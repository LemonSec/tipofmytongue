1
00:02:26,239 --> 00:02:28,640
away like this people can't hear you if

2
00:02:28,640 --> 00:02:31,599
you do this and you're like

3
00:02:32,400 --> 00:02:34,160
people can't hear you

4
00:02:34,160 --> 00:02:36,319
keep the mic in front of your mouth

5
00:02:36,319 --> 00:02:38,560
please also closer like i wasn't doing

6
00:02:38,560 --> 00:02:40,800
over there so this doesn't really help

7
00:02:40,800 --> 00:02:43,040
it's got to be upgraded like like this

8
00:02:43,040 --> 00:02:45,280
you can just do like you know

9
00:02:45,280 --> 00:02:47,360
all right it's working

10
00:02:47,360 --> 00:02:48,959
okay so

11
00:02:48,959 --> 00:02:52,319
back down to the seat

12
00:02:54,319 --> 00:02:55,680
oh and feel free to take the mic out of

13
00:02:55,680 --> 00:02:58,080
the stand

14
00:03:00,959 --> 00:03:04,319
okay as we were as i was saying

15
00:03:04,319 --> 00:03:06,000
be nice to other people imagine that

16
00:03:06,000 --> 00:03:07,120
they're trying to do the same thing you

17
00:03:07,120 --> 00:03:10,239
are which is make the internet better

18
00:03:10,239 --> 00:03:11,680
please don't make us have to say this

19
00:03:11,680 --> 00:03:13,040
again

20
00:03:13,040 --> 00:03:15,920
okay and then after that warren has some

21
00:03:15,920 --> 00:03:17,599
intro stuff unless somebody else has

22
00:03:17,599 --> 00:03:19,200
other agenda items they'd like to hop to

23
00:03:19,200 --> 00:03:21,518
the mic

24
00:03:22,480 --> 00:03:25,760
maybe it's not working again

25
00:03:27,840 --> 00:03:30,159
well i mean

26
00:03:30,159 --> 00:03:32,159
audio is working video i can do we have

27
00:03:32,159 --> 00:03:35,679
to dance now george to keep the

28
00:03:36,720 --> 00:03:38,799
da

29
00:03:38,799 --> 00:03:41,040
okay

30
00:03:44,959 --> 00:03:47,120
okay audio

31
00:03:47,120 --> 00:03:48,799
video

32
00:03:48,799 --> 00:03:53,000
we have both the a and the v

33
00:04:01,680 --> 00:04:03,280
my god you're tall

34
00:04:03,280 --> 00:04:05,599
there we go so hopefully audio and video

35
00:04:05,599 --> 00:04:07,439
continue to work for a little bit

36
00:04:07,439 --> 00:04:08,959
actually hopefully they continue to work

37
00:04:08,959 --> 00:04:10,480
for the whole thing

38
00:04:10,480 --> 00:04:14,239
um so hi everyone i'm warren kumari i'm

39
00:04:14,239 --> 00:04:17,120
the op sadie and have been 80 for this

40
00:04:17,120 --> 00:04:18,720
working group for

41
00:04:18,720 --> 00:04:21,279
what feels like a very long time

42
00:04:21,279 --> 00:04:25,199
um i am still enjoying being ops 80 but

43
00:04:25,199 --> 00:04:28,639
my term is up in march and i will

44
00:04:28,639 --> 00:04:30,639
probably run again but what i would

45
00:04:30,639 --> 00:04:32,479
really really like is for a bunch of

46
00:04:32,479 --> 00:04:34,240
other people to run

47
00:04:34,240 --> 00:04:36,320
um and so if anybody's interested in

48
00:04:36,320 --> 00:04:39,520
knowing what the ops id role is like

49
00:04:39,520 --> 00:04:41,520
what the time investment is

50
00:04:41,520 --> 00:04:43,759
what the fun parts are what the less fun

51
00:04:43,759 --> 00:04:45,520
parts are please come along and talk to

52
00:04:45,520 --> 00:04:48,960
me and i'm happy to provide background

53
00:04:48,960 --> 00:04:51,680
chat about what it's actually like etc

54
00:04:51,680 --> 00:04:53,680
um as i say i've been doing it for a

55
00:04:53,680 --> 00:04:55,360
while and i've been doing it for a while

56
00:04:55,360 --> 00:04:57,520
because it's actually kind of fun

57
00:04:57,520 --> 00:04:58,560
um

58
00:04:58,560 --> 00:05:01,039
some parts more so than others but yep

59
00:05:01,039 --> 00:05:03,039
as i say come hunt me down let's have a

60
00:05:03,039 --> 00:05:05,520
chat i'm happy to

61
00:05:05,520 --> 00:05:07,919
to provide any background etc

62
00:05:07,919 --> 00:05:08,960
and

63
00:05:08,960 --> 00:05:11,199
um natalie does it still seem like audio

64
00:05:11,199 --> 00:05:12,479
is working

65
00:05:12,479 --> 00:05:14,880
yay

66
00:05:19,199 --> 00:05:23,880
okay oh my presentation got kicked

67
00:05:29,280 --> 00:05:31,440
yep so all this stuff

68
00:05:31,440 --> 00:05:33,039
saw warren

69
00:05:33,039 --> 00:05:35,360
too far

70
00:05:35,840 --> 00:05:38,800
okay i think the next person up is igor

71
00:05:38,800 --> 00:05:41,440
who was here oh still here excellent

72
00:05:41,440 --> 00:05:43,520
um

73
00:05:43,520 --> 00:05:44,560
i think

74
00:05:44,560 --> 00:05:45,919
you don't have a phone with you so i can

75
00:05:45,919 --> 00:05:48,800
do the slide click it clicks oh can you

76
00:05:48,800 --> 00:05:50,320
can you just drive the slides and that's

77
00:05:50,320 --> 00:05:52,320
yeah exactly i can do that as soon as i

78
00:05:52,320 --> 00:05:54,240
find the slides

79
00:05:54,240 --> 00:05:55,680
it's pa

80
00:05:55,680 --> 00:05:57,280
well

81
00:05:57,280 --> 00:05:59,280
i'll introduce myself first while the

82
00:05:59,280 --> 00:06:01,199
slides are coming up and say here

83
00:06:01,199 --> 00:06:03,440
so i'm igor lubachev uh this is

84
00:06:03,440 --> 00:06:05,440
something that

85
00:06:05,440 --> 00:06:07,280
dawg and myself have been working on sri

86
00:06:07,280 --> 00:06:09,039
rama's in india

87
00:06:09,039 --> 00:06:12,479
but he is virtually with us

88
00:06:13,600 --> 00:06:15,280
so

89
00:06:15,280 --> 00:06:16,800
this is something that

90
00:06:16,800 --> 00:06:19,199
a problem space that's typically not

91
00:06:19,199 --> 00:06:21,199
been worked inside the wraps and maybe

92
00:06:21,199 --> 00:06:22,880
that's why

93
00:06:22,880 --> 00:06:25,199
it's still a problem so we're trying to

94
00:06:25,199 --> 00:06:27,520
bring it to this group because we think

95
00:06:27,520 --> 00:06:30,240
that cider apps have some very unique

96
00:06:30,240 --> 00:06:32,319
and interesting techniques that can help

97
00:06:32,319 --> 00:06:35,280
so next slide

98
00:06:35,280 --> 00:06:37,280
so the problem is source address

99
00:06:37,280 --> 00:06:40,080
validation on the internet or basically

100
00:06:40,080 --> 00:06:42,639
how do we stop bad people from spoofing

101
00:06:42,639 --> 00:06:45,039
ap addresses and doing bad things

102
00:06:45,039 --> 00:06:48,479
um problem is not new uh been around

103
00:06:48,479 --> 00:06:49,440
well in

104
00:06:49,440 --> 00:06:52,479
been around forever uh in 2000 we even

105
00:06:52,479 --> 00:06:55,120
had the draft that says that's bad

106
00:06:55,120 --> 00:06:57,199
should fix it

107
00:06:57,199 --> 00:07:00,000
we're in 2022 still working on this

108
00:07:00,000 --> 00:07:03,120
problem the best we've got

109
00:07:03,120 --> 00:07:04,800
state of the art

110
00:07:04,800 --> 00:07:07,440
is look at bgp messages insure some

111
00:07:07,440 --> 00:07:09,360
information from it

112
00:07:09,360 --> 00:07:11,199
uh the algorithms that we have don't

113
00:07:11,199 --> 00:07:14,080
work other than in theory because real

114
00:07:14,080 --> 00:07:16,400
networks i mean the algorithms require

115
00:07:16,400 --> 00:07:18,160
no route filtering

116
00:07:18,160 --> 00:07:20,000
no real traffic engineering that can

117
00:07:20,000 --> 00:07:23,360
happen uh well that's not real world so

118
00:07:23,360 --> 00:07:26,240
the feasible path of rpf has been with

119
00:07:26,240 --> 00:07:27,120
us

120
00:07:27,120 --> 00:07:28,800
from 2004

121
00:07:28,800 --> 00:07:29,599
um

122
00:07:29,599 --> 00:07:31,039
yeah

123
00:07:31,039 --> 00:07:33,360
two years ago there's been

124
00:07:33,360 --> 00:07:36,800
an improvement uh 8704

125
00:07:36,800 --> 00:07:38,720
which basically said hey let's look at

126
00:07:38,720 --> 00:07:41,280
those bgp update messages one more time

127
00:07:41,280 --> 00:07:43,039
there is a little bit more information

128
00:07:43,039 --> 00:07:44,479
we can infer

129
00:07:44,479 --> 00:07:46,720
this is origin as number

130
00:07:46,720 --> 00:07:48,639
so if you find

131
00:07:48,639 --> 00:07:50,479
on the interface

132
00:07:50,479 --> 00:07:54,160
some route advertised by that origin is

133
00:07:54,160 --> 00:07:56,800
uh look at all your bgp announcements

134
00:07:56,800 --> 00:07:59,120
and any route advertising

135
00:07:59,120 --> 00:08:01,599
any prefix advertisement that originates

136
00:08:01,599 --> 00:08:04,160
should probably also be okay

137
00:08:04,160 --> 00:08:06,400
and there is also one small paragraphs

138
00:08:06,400 --> 00:08:08,319
in the in the draft like really an

139
00:08:08,319 --> 00:08:10,160
afterthought and talking to the author

140
00:08:10,160 --> 00:08:13,280
of it it really is an afterthought

141
00:08:13,280 --> 00:08:15,599
that says you could also look at raw

142
00:08:15,599 --> 00:08:18,160
information and maybe augment uh your

143
00:08:18,160 --> 00:08:22,080
data set uh with that info

144
00:08:22,080 --> 00:08:23,919
but anyway uh

145
00:08:23,919 --> 00:08:26,400
it's much better but still has a bunch

146
00:08:26,400 --> 00:08:29,280
of problems and here we are today

147
00:08:29,280 --> 00:08:31,599
next

148
00:08:33,120 --> 00:08:34,559
so this is a

149
00:08:34,559 --> 00:08:36,958
simple very simple example

150
00:08:36,958 --> 00:08:40,399
why 8704 is not working you have

151
00:08:40,399 --> 00:08:43,839
as1 which is a customer of as2

152
00:08:43,839 --> 00:08:47,200
as2 is multi-homed and it propagates

153
00:08:47,200 --> 00:08:48,399
both

154
00:08:48,399 --> 00:08:50,800
propagates customer route to both

155
00:08:50,800 --> 00:08:52,959
providers but its own route it only

156
00:08:52,959 --> 00:08:55,440
wants to propagate to as3

157
00:08:55,440 --> 00:08:58,000
for reasons

158
00:08:58,000 --> 00:09:00,959
if s4 is doing source address validation

159
00:09:00,959 --> 00:09:04,640
s4 will not see

160
00:09:04,880 --> 00:09:08,240
any prefix advertised with as2's prefix

161
00:09:08,240 --> 00:09:09,200
2

162
00:09:09,200 --> 00:09:11,920
on its customer interface and therefore

163
00:09:11,920 --> 00:09:14,160
it will not accept packets from

164
00:09:14,160 --> 00:09:16,000
prefix 2.

165
00:09:16,000 --> 00:09:19,760
so 22 years later people are really

166
00:09:19,760 --> 00:09:21,920
trying to fix it why are we still having

167
00:09:21,920 --> 00:09:23,680
a problem and

168
00:09:23,680 --> 00:09:25,600
we contend that

169
00:09:25,600 --> 00:09:26,720
it's

170
00:09:26,720 --> 00:09:28,000
the root cause of it is that we're

171
00:09:28,000 --> 00:09:30,240
trying to ensure data plane forward

172
00:09:30,240 --> 00:09:32,240
information from bgp signals that was

173
00:09:32,240 --> 00:09:33,760
not designed for it

174
00:09:33,760 --> 00:09:38,000
uh so it just doesn't have enough signal

175
00:09:38,000 --> 00:09:40,000
the next idea is well

176
00:09:40,000 --> 00:09:42,959
we have other sources of authoritative

177
00:09:42,959 --> 00:09:46,800
information so for example raw and we're

178
00:09:46,800 --> 00:09:48,720
talking about aspa

179
00:09:48,720 --> 00:09:51,040
and somebody also suggested uh earlier

180
00:09:51,040 --> 00:09:55,440
this week what about signed iir data and

181
00:09:55,440 --> 00:09:58,800
actually why not so um

182
00:09:58,800 --> 00:10:00,320
again that

183
00:10:00,320 --> 00:10:03,200
all the signals that were not designed

184
00:10:03,200 --> 00:10:05,120
for source address validation so all

185
00:10:05,120 --> 00:10:06,800
sort of hacks but

186
00:10:06,800 --> 00:10:08,560
that's what we do in the internet we try

187
00:10:08,560 --> 00:10:12,720
to do hacks that work um so that's

188
00:10:12,720 --> 00:10:14,399
why we're here and trying to see what we

189
00:10:14,399 --> 00:10:17,760
can do with nasa but next

190
00:10:17,760 --> 00:10:18,720
before

191
00:10:18,720 --> 00:10:23,519
we go a little bit further uh next slide

192
00:10:23,600 --> 00:10:26,000
um just uh first of all i apologize for

193
00:10:26,000 --> 00:10:27,839
this slide it's a little bit it's got a

194
00:10:27,839 --> 00:10:29,440
lot more graphics that were used at the

195
00:10:29,440 --> 00:10:31,920
atf i just pulled it from an internal

196
00:10:31,920 --> 00:10:33,360
presentation

197
00:10:33,360 --> 00:10:35,760
but it's basically

198
00:10:35,760 --> 00:10:37,600
a real problem that

199
00:10:37,600 --> 00:10:40,800
i'm very familiar with because

200
00:10:40,800 --> 00:10:42,640
it's a cdn

201
00:10:42,640 --> 00:10:44,160
that's

202
00:10:44,160 --> 00:10:46,480
trying to serve traffic on any cast ap

203
00:10:46,480 --> 00:10:47,920
address

204
00:10:47,920 --> 00:10:50,959
and the anycast well of course any cast

205
00:10:50,959 --> 00:10:53,120
home pop

206
00:10:53,120 --> 00:10:55,279
will look at the incoming request and

207
00:10:55,279 --> 00:10:57,440
decides there is an hp that's better

208
00:10:57,440 --> 00:11:01,200
suited to serve the traffic from so

209
00:11:01,200 --> 00:11:04,000
it will tunnel some sort of ap and ap

210
00:11:04,000 --> 00:11:04,880
thing

211
00:11:04,880 --> 00:11:06,000
uh

212
00:11:06,000 --> 00:11:08,320
the packets to the edge

213
00:11:08,320 --> 00:11:10,959
and the edge wants to reply directly and

214
00:11:10,959 --> 00:11:12,880
that's where the bulk of the transfer is

215
00:11:12,880 --> 00:11:15,519
happening so

216
00:11:15,519 --> 00:11:18,160
the only thing that stating the detour

217
00:11:18,160 --> 00:11:20,240
through the anycast address is the

218
00:11:20,240 --> 00:11:23,040
headers and the acts

219
00:11:23,040 --> 00:11:25,920
the heavy duty stuff is going direct

220
00:11:25,920 --> 00:11:27,760
pretty neat infrastructure

221
00:11:27,760 --> 00:11:29,440
next

222
00:11:29,440 --> 00:11:30,640
so this is a

223
00:11:30,640 --> 00:11:32,240
more typical

224
00:11:32,240 --> 00:11:35,600
picture of the same thing um

225
00:11:35,600 --> 00:11:37,200
doesn't have to be any cast it's like

226
00:11:37,200 --> 00:11:41,040
any sort of dsr direct server return

227
00:11:41,040 --> 00:11:43,360
prefix four has a customer who is

228
00:11:43,360 --> 00:11:44,720
conducting

229
00:11:44,720 --> 00:11:47,440
uh service at prefix three

230
00:11:47,440 --> 00:11:49,519
which is advertised which happens to

231
00:11:49,519 --> 00:11:52,079
land in as1

232
00:11:52,079 --> 00:11:55,440
which tunnels the packet to s two the

233
00:11:55,440 --> 00:11:56,480
age

234
00:11:56,480 --> 00:11:58,560
and there it needs to

235
00:11:58,560 --> 00:12:01,120
s2 wants to complete the connection but

236
00:12:01,120 --> 00:12:04,000
it needs to source packets from the

237
00:12:04,000 --> 00:12:05,360
prefix three

238
00:12:05,360 --> 00:12:07,680
so that the end user sees normal

239
00:12:07,680 --> 00:12:10,639
connection happening and the question is

240
00:12:10,639 --> 00:12:14,959
will s9 this provider allow

241
00:12:14,959 --> 00:12:16,560
such packets

242
00:12:16,560 --> 00:12:19,360
and dsr is a obviously case well it's an

243
00:12:19,360 --> 00:12:20,639
important case

244
00:12:20,639 --> 00:12:23,440
cdn i just described and so is mobile

245
00:12:23,440 --> 00:12:26,240
roaming and some gaming and

246
00:12:26,240 --> 00:12:28,959
security products what not

247
00:12:28,959 --> 00:12:30,959
many of the services use the sro wants

248
00:12:30,959 --> 00:12:32,399
to use dsr

249
00:12:32,399 --> 00:12:34,639
next

250
00:12:35,040 --> 00:12:37,600
so here is a crux of our proposal we

251
00:12:37,600 --> 00:12:39,760
call it bar self

252
00:12:39,760 --> 00:12:40,560
uh

253
00:12:40,560 --> 00:12:43,200
bar serve so bar for bgp we're still

254
00:12:43,200 --> 00:12:45,120
using bgp messages we

255
00:12:45,120 --> 00:12:47,200
need to get get information from there

256
00:12:47,200 --> 00:12:51,040
but we also augment it with aspen raw

257
00:12:51,040 --> 00:12:56,560
uh it is strictly an improvement on 8704

258
00:12:56,560 --> 00:12:59,519
even in the way it just processes bgp

259
00:12:59,519 --> 00:13:00,639
messages

260
00:13:00,639 --> 00:13:01,839
uh so

261
00:13:01,839 --> 00:13:04,800
8704 just looked at the origin as number

262
00:13:04,800 --> 00:13:06,720
and bar server is looking at the entire

263
00:13:06,720 --> 00:13:08,720
asp

264
00:13:08,720 --> 00:13:09,760
and

265
00:13:09,760 --> 00:13:11,519
we'll see how it does it but it

266
00:13:11,519 --> 00:13:13,040
basically gets

267
00:13:13,040 --> 00:13:15,600
more signal from existing

268
00:13:15,600 --> 00:13:16,720
messages

269
00:13:16,720 --> 00:13:18,320
but it also

270
00:13:18,320 --> 00:13:21,600
augments this information with aspen raw

271
00:13:21,600 --> 00:13:23,839
um the good thing that we think it's

272
00:13:23,839 --> 00:13:25,360
actually valuable

273
00:13:25,360 --> 00:13:28,480
is that it requires no new protocol no

274
00:13:28,480 --> 00:13:30,800
new changes to existing protocols oh

275
00:13:30,800 --> 00:13:31,920
that's nice

276
00:13:31,920 --> 00:13:34,720
um can we get the slides back at some

277
00:13:34,720 --> 00:13:35,600
point

278
00:13:35,600 --> 00:13:37,920
and um thank you

279
00:13:37,920 --> 00:13:38,880
and the

280
00:13:38,880 --> 00:13:40,880
the fact that it requires none of that

281
00:13:40,880 --> 00:13:44,000
means that uh it's actually good for

282
00:13:44,000 --> 00:13:45,440
uh

283
00:13:45,440 --> 00:13:49,279
for adoption because the very very first

284
00:13:49,279 --> 00:13:51,360
network that deploys something like that

285
00:13:51,360 --> 00:13:53,839
will immediately see benefits so

286
00:13:53,839 --> 00:13:55,360
that's that's what you're going to see

287
00:13:55,360 --> 00:13:56,959
is that early adopters actually get

288
00:13:56,959 --> 00:13:58,160
value

289
00:13:58,160 --> 00:14:00,480
next

290
00:14:00,720 --> 00:14:02,320
this is a little busy slides many

291
00:14:02,320 --> 00:14:04,639
circles but the point here is only

292
00:14:04,639 --> 00:14:07,600
simple one that the protocol works on

293
00:14:07,600 --> 00:14:10,000
both peer links and customer links

294
00:14:10,000 --> 00:14:11,760
exactly the same way

295
00:14:11,760 --> 00:14:14,000
next

296
00:14:15,199 --> 00:14:17,120
now

297
00:14:17,120 --> 00:14:19,440
this is a high-level description of the

298
00:14:19,440 --> 00:14:21,519
protocol this is a

299
00:14:21,519 --> 00:14:24,160
simplified version in the

300
00:14:24,160 --> 00:14:27,440
utopian world where everybody has

301
00:14:27,440 --> 00:14:31,760
adopted aspen raw and we have the entire

302
00:14:31,760 --> 00:14:34,399
internet there i mean of course it's way

303
00:14:34,399 --> 00:14:38,480
way in the future but um

304
00:14:38,880 --> 00:14:41,440
basically the way it works is that you

305
00:14:41,440 --> 00:14:44,639
have two phases phase number one use ask

306
00:14:44,639 --> 00:14:46,480
the information to discover customer

307
00:14:46,480 --> 00:14:47,360
call

308
00:14:47,360 --> 00:14:48,560
so all the

309
00:14:48,560 --> 00:14:51,839
customers of all of your customers and

310
00:14:51,839 --> 00:14:54,000
their customers transitively

311
00:14:54,000 --> 00:14:56,160
and once you have the customer code

312
00:14:56,160 --> 00:14:58,560
which is the list of as numbers look at

313
00:14:58,560 --> 00:15:01,279
raw information and find the prefixes

314
00:15:01,279 --> 00:15:02,880
that they've

315
00:15:02,880 --> 00:15:05,120
advertised that they own

316
00:15:05,120 --> 00:15:06,720
those are the prefixes that are allowed

317
00:15:06,720 --> 00:15:09,040
in the interface

318
00:15:09,040 --> 00:15:10,079
next

319
00:15:10,079 --> 00:15:13,839
so let's get back to the real world

320
00:15:14,800 --> 00:15:15,920
thank you

321
00:15:15,920 --> 00:15:19,199
um the real world is very very similar

322
00:15:19,199 --> 00:15:21,600
it's still exactly those two phases find

323
00:15:21,600 --> 00:15:23,199
the customer cone

324
00:15:23,199 --> 00:15:26,079
and once you did find the prefixes that

325
00:15:26,079 --> 00:15:28,399
those customers own

326
00:15:28,399 --> 00:15:31,600
to find the customer code what you do is

327
00:15:31,600 --> 00:15:32,480
you

328
00:15:32,480 --> 00:15:35,519
look at aspa when available

329
00:15:35,519 --> 00:15:38,639
and also look at bgp as path

330
00:15:38,639 --> 00:15:41,040
and those can be received from anywhere

331
00:15:41,040 --> 00:15:43,440
uh your cast this customer interface

332
00:15:43,440 --> 00:15:46,000
other customer interface transits even

333
00:15:46,000 --> 00:15:47,279
provider

334
00:15:47,279 --> 00:15:50,560
um and look at the asp

335
00:15:50,560 --> 00:15:53,920
consider every single as number in there

336
00:15:53,920 --> 00:15:56,720
and the previous one is the customer of

337
00:15:56,720 --> 00:15:57,839
the

338
00:15:57,839 --> 00:15:59,839
of the of the next one

339
00:15:59,839 --> 00:16:00,959
so

340
00:16:00,959 --> 00:16:03,360
look at the uh look at asps

341
00:16:03,360 --> 00:16:05,759
look at aspa do it

342
00:16:05,759 --> 00:16:08,800
do it iteratively until you can discover

343
00:16:08,800 --> 00:16:10,800
no nothing new

344
00:16:10,800 --> 00:16:12,639
that's your customer code and then look

345
00:16:12,639 --> 00:16:14,079
at raw

346
00:16:14,079 --> 00:16:16,079
and also look at

347
00:16:16,079 --> 00:16:19,519
just like 8704

348
00:16:19,920 --> 00:16:23,120
prefix is announced through bgp and

349
00:16:23,120 --> 00:16:26,079
of all all the prefixes announcer bgp

350
00:16:26,079 --> 00:16:29,040
where origin is in your customer column

351
00:16:29,040 --> 00:16:32,320
and that's your list for validation

352
00:16:32,320 --> 00:16:34,639
next

353
00:16:37,040 --> 00:16:39,519
so next

354
00:16:39,519 --> 00:16:40,240
so

355
00:16:40,240 --> 00:16:42,800
very busy slide the point here is not to

356
00:16:42,800 --> 00:16:44,000
read it but

357
00:16:44,000 --> 00:16:47,199
in detail but this is just an example

358
00:16:47,199 --> 00:16:48,000
where

359
00:16:48,000 --> 00:16:49,920
you have a bunch of different things

360
00:16:49,920 --> 00:16:52,480
happening you have some prefixes that

361
00:16:52,480 --> 00:16:54,720
have raw some that don't some prefixes

362
00:16:54,720 --> 00:16:57,120
that have asp some that don't

363
00:16:57,120 --> 00:17:00,320
there is a lot of um

364
00:17:00,320 --> 00:17:02,800
traffic engineering map

365
00:17:02,800 --> 00:17:05,439
no exports happening things like that um

366
00:17:05,439 --> 00:17:07,520
next

367
00:17:07,520 --> 00:17:09,199
and let's the point is just to

368
00:17:09,199 --> 00:17:12,240
illustrate quickly how bar serve works

369
00:17:12,240 --> 00:17:14,160
with something like this

370
00:17:14,160 --> 00:17:16,959
so next slide

371
00:17:17,039 --> 00:17:20,799
so first you will start with the only s

372
00:17:20,799 --> 00:17:22,720
number we know which is

373
00:17:22,720 --> 00:17:24,799
the as number on the other side of the

374
00:17:24,799 --> 00:17:27,119
interface that we are looking at

375
00:17:27,119 --> 00:17:29,360
uh so that's as3

376
00:17:29,360 --> 00:17:30,400
and

377
00:17:30,400 --> 00:17:32,320
well there is nothing in aspas that

378
00:17:32,320 --> 00:17:35,840
shows as3 as a provider fine

379
00:17:35,840 --> 00:17:38,480
but there is a bunch of bgp prefixes we

380
00:17:38,480 --> 00:17:40,320
have that

381
00:17:40,320 --> 00:17:42,160
have as3 so

382
00:17:42,160 --> 00:17:44,720
collect everybody before it

383
00:17:44,720 --> 00:17:46,640
and that's the new as numbers you

384
00:17:46,640 --> 00:17:47,760
discovered

385
00:17:47,760 --> 00:17:49,520
next path the

386
00:17:49,520 --> 00:17:52,240
next uh iteration repeat

387
00:17:52,240 --> 00:17:54,960
now we found something in aspen and and

388
00:17:54,960 --> 00:17:56,240
aspess

389
00:17:56,240 --> 00:17:57,440
repeat

390
00:17:57,440 --> 00:17:59,600
okay we found nothing new we have a

391
00:17:59,600 --> 00:18:01,600
customer calling list

392
00:18:01,600 --> 00:18:03,918
next

393
00:18:04,640 --> 00:18:07,120
for each one in the customer cone look

394
00:18:07,120 --> 00:18:08,400
at raw

395
00:18:08,400 --> 00:18:09,360
and

396
00:18:09,360 --> 00:18:10,480
look at

397
00:18:10,480 --> 00:18:14,640
bgp announcements of which one is the

398
00:18:14,640 --> 00:18:17,360
the one that features that s number

399
00:18:17,360 --> 00:18:19,280
as

400
00:18:19,280 --> 00:18:20,640
origin as

401
00:18:20,640 --> 00:18:22,960
you merge it two lists together

402
00:18:22,960 --> 00:18:24,720
and you have your

403
00:18:24,720 --> 00:18:27,720
subfilter

404
00:18:32,240 --> 00:18:34,080
two more

405
00:18:34,080 --> 00:18:37,120
okay that's your sub list uh at the end

406
00:18:37,120 --> 00:18:39,439
next

407
00:18:39,760 --> 00:18:42,320
all right if you go back at the example

408
00:18:42,320 --> 00:18:46,000
we had before that 8704 couldn't deal

409
00:18:46,000 --> 00:18:47,200
with

410
00:18:47,200 --> 00:18:50,160
bars have deals with it trivially

411
00:18:50,160 --> 00:18:52,799
in fact it discovers that as2 is part of

412
00:18:52,799 --> 00:18:55,200
a customer cone in a trivial way it

413
00:18:55,200 --> 00:18:57,039
doesn't have to be directly connected it

414
00:18:57,039 --> 00:18:59,360
could be like an another

415
00:18:59,360 --> 00:19:01,760
network between as2 and s4 doesn't

416
00:19:01,760 --> 00:19:03,919
matter it will discover it and then it

417
00:19:03,919 --> 00:19:05,360
will see that

418
00:19:05,360 --> 00:19:08,400
there is a route received from the pier

419
00:19:08,400 --> 00:19:12,400
that shows as2 as the origin is and

420
00:19:12,400 --> 00:19:14,960
prefix 2 will be

421
00:19:14,960 --> 00:19:17,520
accepted wow we have a good um all right

422
00:19:17,520 --> 00:19:19,280
so imagine

423
00:19:19,280 --> 00:19:23,679
my dsr slide while it's been found now

424
00:19:23,679 --> 00:19:24,720
um

425
00:19:24,720 --> 00:19:28,080
what can barsap help with dsr

426
00:19:28,080 --> 00:19:31,280
well it's actually pretty simple

427
00:19:31,280 --> 00:19:33,760
all you need is that the

428
00:19:33,760 --> 00:19:36,080
cdn owns

429
00:19:36,080 --> 00:19:40,640
both edge uh both the hs number and the

430
00:19:40,640 --> 00:19:44,400
anycast home cs number cdn owns

431
00:19:44,400 --> 00:19:46,640
uh all the prefixes

432
00:19:46,640 --> 00:19:48,720
prefix um

433
00:19:48,720 --> 00:19:51,600
next uh two more times yeah good and one

434
00:19:51,600 --> 00:19:53,600
good so cd

435
00:19:53,600 --> 00:19:56,400
yeah good thank you cdn owns prefix one

436
00:19:56,400 --> 00:19:58,799
prefix two and prefix three so all it

437
00:19:58,799 --> 00:20:01,520
needs to do is needs to publish raw

438
00:20:01,520 --> 00:20:04,320
that says s2

439
00:20:04,320 --> 00:20:07,280
owns authorized to advertise

440
00:20:07,280 --> 00:20:09,440
prefix 2 and prefix 3.

441
00:20:09,440 --> 00:20:13,440
now s2 the h1 will never want to

442
00:20:13,440 --> 00:20:15,919
actually advertise prefix 3

443
00:20:15,919 --> 00:20:18,240
but that's ok doesn't matter

444
00:20:18,240 --> 00:20:20,640
it owns it so it publishes raw and

445
00:20:20,640 --> 00:20:22,559
therefore

446
00:20:22,559 --> 00:20:26,159
as9 when it does bar save will find from

447
00:20:26,159 --> 00:20:27,440
raw that

448
00:20:27,440 --> 00:20:29,760
s2 owns prefix

449
00:20:29,760 --> 00:20:32,240
3 and it will allow

450
00:20:32,240 --> 00:20:35,200
next

451
00:20:35,200 --> 00:20:37,440
um

452
00:20:37,760 --> 00:20:40,320
asba obviously can also help with route

453
00:20:40,320 --> 00:20:42,480
leaks i mean that's what it was designed

454
00:20:42,480 --> 00:20:43,280
for

455
00:20:43,280 --> 00:20:45,360
uh it also helps

456
00:20:45,360 --> 00:20:47,760
barcelona in the same way

457
00:20:47,760 --> 00:20:49,120
that

458
00:20:49,120 --> 00:20:50,880
when it's trying to

459
00:20:50,880 --> 00:20:53,919
infer information from bgp so in this

460
00:20:53,919 --> 00:20:55,760
case we have uh

461
00:20:55,760 --> 00:20:56,960
as2

462
00:20:56,960 --> 00:21:00,000
that's leaked route from its

463
00:21:00,000 --> 00:21:01,280
peer

464
00:21:01,280 --> 00:21:04,159
and the the red one and somehow the

465
00:21:04,159 --> 00:21:06,960
trout made it to as4

466
00:21:06,960 --> 00:21:09,120
now the trout should really be rejected

467
00:21:09,120 --> 00:21:10,320
for

468
00:21:10,320 --> 00:21:14,080
for uh for forwarding because

469
00:21:14,080 --> 00:21:16,640
after says that it's leaked but it made

470
00:21:16,640 --> 00:21:18,880
it to s4 somehow

471
00:21:18,880 --> 00:21:20,480
um

472
00:21:20,480 --> 00:21:22,000
barcelov

473
00:21:22,000 --> 00:21:24,640
when it before it tries to ensure

474
00:21:24,640 --> 00:21:27,520
information from bgpas path

475
00:21:27,520 --> 00:21:29,200
would check that hey

476
00:21:29,200 --> 00:21:30,640
uh

477
00:21:30,640 --> 00:21:32,880
i'm thinking of adding s

478
00:21:32,880 --> 00:21:33,919
8

479
00:21:33,919 --> 00:21:36,000
as a customer of

480
00:21:36,000 --> 00:21:37,679
as2

481
00:21:37,679 --> 00:21:40,320
because it comes after s2 but

482
00:21:40,320 --> 00:21:44,640
s8 actually has a aspa entry and s2 is

483
00:21:44,640 --> 00:21:47,600
not its transit so it will reject adding

484
00:21:47,600 --> 00:21:48,960
this

485
00:21:48,960 --> 00:21:50,480
s8

486
00:21:50,480 --> 00:21:52,240
however

487
00:21:52,240 --> 00:21:53,600
we say that

488
00:21:53,600 --> 00:21:55,840
that it will reject but

489
00:21:55,840 --> 00:21:58,000
it can still ensure that as2 is a

490
00:21:58,000 --> 00:22:00,799
customer of s9

491
00:22:00,799 --> 00:22:03,039
no reason to do that and in fact if it's

492
00:22:03,039 --> 00:22:05,280
needed it will never be actually needed

493
00:22:05,280 --> 00:22:06,880
in this case but

494
00:22:06,880 --> 00:22:11,200
um as5 is a customer of s8

495
00:22:11,200 --> 00:22:13,200
um

496
00:22:13,200 --> 00:22:14,880
so

497
00:22:14,880 --> 00:22:20,080
basically aspar validation also helps

498
00:22:20,240 --> 00:22:23,200
ourselves to construct the correct

499
00:22:23,200 --> 00:22:24,799
list

500
00:22:24,799 --> 00:22:27,799
next

501
00:22:28,799 --> 00:22:31,360
and actually i want to do one more slide

502
00:22:31,360 --> 00:22:33,440
just one one more that will be my last

503
00:22:33,440 --> 00:22:36,159
slide just to show that this problem is

504
00:22:36,159 --> 00:22:39,120
important and this problem is not being

505
00:22:39,120 --> 00:22:41,039
solved on the internet

506
00:22:41,039 --> 00:22:42,880
in 2015

507
00:22:42,880 --> 00:22:45,600
we've uh looked at atacama we've looked

508
00:22:45,600 --> 00:22:48,559
at several thousands of our pubs where

509
00:22:48,559 --> 00:22:50,960
we are and to see how many of them do

510
00:22:50,960 --> 00:22:54,080
any sort of source address validation

511
00:22:54,080 --> 00:22:57,120
and we found that about 15 did

512
00:22:57,120 --> 00:22:59,440
and just before coming here i pulled the

513
00:22:59,440 --> 00:23:01,120
stats and then

514
00:23:01,120 --> 00:23:03,360
seven years later

515
00:23:03,360 --> 00:23:05,919
about 15 of the networks do source

516
00:23:05,919 --> 00:23:08,640
address validation so i don't think it's

517
00:23:08,640 --> 00:23:10,799
purely economics it's mostly like it

518
00:23:10,799 --> 00:23:12,960
actually is not working too well the

519
00:23:12,960 --> 00:23:15,039
algorithms that we have

520
00:23:15,039 --> 00:23:16,400
and

521
00:23:16,400 --> 00:23:17,360
maybe

522
00:23:17,360 --> 00:23:19,200
uh they and

523
00:23:19,200 --> 00:23:20,159
we really

524
00:23:20,159 --> 00:23:21,440
expect that

525
00:23:21,440 --> 00:23:24,000
improved algorithms with data produced

526
00:23:24,000 --> 00:23:26,159
by cider ups

527
00:23:26,159 --> 00:23:29,120
will actually move the needle

528
00:23:29,120 --> 00:23:31,439
thank you

529
00:23:33,360 --> 00:23:35,760
questions

530
00:23:43,520 --> 00:23:45,520
speaking as a

531
00:23:45,520 --> 00:23:47,360
working group member i think it's a

532
00:23:47,360 --> 00:23:48,880
great presentation

533
00:23:48,880 --> 00:23:51,440
two points i will make is that

534
00:23:51,440 --> 00:23:54,480
it'll be great to see how this solution

535
00:23:54,480 --> 00:23:57,600
solves the problem for ibgp cases while

536
00:23:57,600 --> 00:24:00,480
you have depicted ebgp cases

537
00:24:00,480 --> 00:24:02,240
most of the problems

538
00:24:02,240 --> 00:24:03,279
um

539
00:24:03,279 --> 00:24:06,080
will probably also require you to have a

540
00:24:06,080 --> 00:24:08,400
control within ebgp it's quite possible

541
00:24:08,400 --> 00:24:11,919
in the scenarios that across ibgp your

542
00:24:11,919 --> 00:24:13,760
your uh

543
00:24:13,760 --> 00:24:16,480
a solution may not be honored or

544
00:24:16,480 --> 00:24:18,880
may not be enforced but what is critical

545
00:24:18,880 --> 00:24:21,600
is if we can sort of zoom into ibgp

546
00:24:21,600 --> 00:24:23,440
cases that would be phenomenal yeah

547
00:24:23,440 --> 00:24:24,480
thank you

548
00:24:24,480 --> 00:24:27,679
thank you that's um

549
00:24:27,760 --> 00:24:30,720
it is i think it's very valuable to also

550
00:24:30,720 --> 00:24:34,880
look at ibcp one of the things that

551
00:24:34,880 --> 00:24:37,279
we want to do is that on the internet is

552
00:24:37,279 --> 00:24:40,400
that okay if one network will not

553
00:24:40,400 --> 00:24:42,000
enforce it

554
00:24:42,000 --> 00:24:43,039
maybe the

555
00:24:43,039 --> 00:24:46,000
next network should have a chance uh to

556
00:24:46,000 --> 00:24:47,279
still do it

557
00:24:47,279 --> 00:24:50,240
that said obviously all this serve

558
00:24:50,240 --> 00:24:52,960
filtering best done as close to as close

559
00:24:52,960 --> 00:24:56,960
as possible but that's a good point

560
00:24:59,440 --> 00:25:00,880
okay since the chair seems to be

561
00:25:00,880 --> 00:25:02,640
distracted jeff has

562
00:25:02,640 --> 00:25:03,840
uh

563
00:25:03,840 --> 00:25:07,760
i worked with sri ram and doug on 8704

564
00:25:07,760 --> 00:25:10,240
i'm going to offer two observations for

565
00:25:10,240 --> 00:25:14,240
you that feed on the stuff from 8704.

566
00:25:14,240 --> 00:25:16,880
the the core enhancement from 8704 is

567
00:25:16,880 --> 00:25:19,279
one part you can

568
00:25:19,279 --> 00:25:20,720
add stuff to your source address

569
00:25:20,720 --> 00:25:22,159
validation

570
00:25:22,159 --> 00:25:24,000
from additional bhp data that's not

571
00:25:24,000 --> 00:25:26,240
being used immediately for forwarding

572
00:25:26,240 --> 00:25:27,120
so

573
00:25:27,120 --> 00:25:28,799
being able to see it from other sources

574
00:25:28,799 --> 00:25:30,240
is great you know the presentation

575
00:25:30,240 --> 00:25:31,919
you're giving is an excellent example of

576
00:25:31,919 --> 00:25:33,760
that we talked about rose as one example

577
00:25:33,760 --> 00:25:35,760
in 8704 i'm glad to see this is going

578
00:25:35,760 --> 00:25:37,760
forward

579
00:25:37,760 --> 00:25:39,440
but the second thing ties into the slide

580
00:25:39,440 --> 00:25:40,400
you're displaying here about the

581
00:25:40,400 --> 00:25:41,679
economics

582
00:25:41,679 --> 00:25:43,039
i was like why haven't we seen more of

583
00:25:43,039 --> 00:25:45,600
this stuff it's one part the tooling for

584
00:25:45,600 --> 00:25:48,000
adding 8704 is not out there

585
00:25:48,000 --> 00:25:50,080
but the bigger one is source address

586
00:25:50,080 --> 00:25:52,880
validation in hardware

587
00:25:52,880 --> 00:25:56,159
is predicated on burning fib resources

588
00:25:56,159 --> 00:25:58,720
to do the extra lookup to see if you

589
00:25:58,720 --> 00:26:01,039
know that you can actually do this sort

590
00:26:01,039 --> 00:26:03,200
of this validation

591
00:26:03,200 --> 00:26:05,520
it's cheaper than doing firewalling so

592
00:26:05,520 --> 00:26:07,679
from that perspective it's a wonderful

593
00:26:07,679 --> 00:26:08,640
thing

594
00:26:08,640 --> 00:26:10,960
but it's still an additional cost in

595
00:26:10,960 --> 00:26:12,000
your fib

596
00:26:12,000 --> 00:26:14,720
in cases where you can uh have sev

597
00:26:14,720 --> 00:26:16,720
covered by what you're using for

598
00:26:16,720 --> 00:26:19,279
forwarding you basically get it for free

599
00:26:19,279 --> 00:26:20,400
just at the cost of additional

600
00:26:20,400 --> 00:26:22,320
forwarding lookups yes

601
00:26:22,320 --> 00:26:24,159
every other thing that we're looking at

602
00:26:24,159 --> 00:26:26,080
here and as you start expanding these

603
00:26:26,080 --> 00:26:27,360
use cases

604
00:26:27,360 --> 00:26:29,600
you're looking at effectively

605
00:26:29,600 --> 00:26:31,279
you know doubling or tripling the size

606
00:26:31,279 --> 00:26:34,000
of your fib to be able to implement this

607
00:26:34,000 --> 00:26:35,840
functionality so

608
00:26:35,840 --> 00:26:37,279
part of what you're fighting against is

609
00:26:37,279 --> 00:26:39,520
the economic cost of something that's

610
00:26:39,520 --> 00:26:41,679
there for security that isn't actually

611
00:26:41,679 --> 00:26:43,360
selling moving bits around it's actually

612
00:26:43,360 --> 00:26:45,360
to help you stop building bits

613
00:26:45,360 --> 00:26:46,159
so

614
00:26:46,159 --> 00:26:48,159
thank you that's definitely i mean

615
00:26:48,159 --> 00:26:50,480
that's part of the point i'm making here

616
00:26:50,480 --> 00:26:52,880
that economics is definitely

617
00:26:52,880 --> 00:26:53,919
a driver

618
00:26:53,919 --> 00:26:55,919
probably more for some networks than the

619
00:26:55,919 --> 00:26:57,600
others some networks would actually

620
00:26:57,600 --> 00:27:00,159
benefit and i mean we do see that 15 of

621
00:27:00,159 --> 00:27:02,480
the network chose to implement something

622
00:27:02,480 --> 00:27:03,840
so

623
00:27:03,840 --> 00:27:05,919
there is some value there so but

624
00:27:05,919 --> 00:27:07,440
anything we do

625
00:27:07,440 --> 00:27:10,720
is important that yes it's as economical

626
00:27:10,720 --> 00:27:12,640
as possible especially for the smaller

627
00:27:12,640 --> 00:27:15,120
networks because that's where the

628
00:27:15,120 --> 00:27:17,760
source address validation is done best

629
00:27:17,760 --> 00:27:21,840
and especially for the first movers

630
00:27:24,880 --> 00:27:28,480
hi ben madison work online um so there's

631
00:27:28,480 --> 00:27:30,960
three separate things firstly just to

632
00:27:30,960 --> 00:27:32,320
kind of continue from the point that

633
00:27:32,320 --> 00:27:34,720
jeff was making um

634
00:27:34,720 --> 00:27:36,640
certainly all of that's true

635
00:27:36,640 --> 00:27:38,720
but one caveat to that is at least

636
00:27:38,720 --> 00:27:40,960
speaking for the network that i operate

637
00:27:40,960 --> 00:27:43,200
we typically run out of face plate

638
00:27:43,200 --> 00:27:45,679
interfaces long before we run out of

639
00:27:45,679 --> 00:27:47,200
packets per second

640
00:27:47,200 --> 00:27:50,159
so that that that

641
00:27:50,159 --> 00:27:51,520
that interaction with the hardware is

642
00:27:51,520 --> 00:27:53,760
not necessarily a deal breaker even for

643
00:27:53,760 --> 00:27:55,679
reasonably large networks that are kind

644
00:27:55,679 --> 00:27:57,600
of a similar sort of a shape

645
00:27:57,600 --> 00:27:59,200
um

646
00:27:59,200 --> 00:28:00,399
the second point i wanted to make is

647
00:28:00,399 --> 00:28:01,760
mostly to just reiterate what i

648
00:28:01,760 --> 00:28:04,000
mentioned in savnet which is that

649
00:28:04,000 --> 00:28:05,279
using

650
00:28:05,279 --> 00:28:06,080
um

651
00:28:06,080 --> 00:28:09,520
rpki objects in this way

652
00:28:09,520 --> 00:28:11,679
kind of breaks the the

653
00:28:11,679 --> 00:28:14,399
um the fail open semantics that they

654
00:28:14,399 --> 00:28:15,840
have in their current use case and i

655
00:28:15,840 --> 00:28:17,440
think we need to think quite hard about

656
00:28:17,440 --> 00:28:20,080
that um i think there are other use

657
00:28:20,080 --> 00:28:22,480
cases where we want something that's

658
00:28:22,480 --> 00:28:25,200
kind of like a sticky rpki object i

659
00:28:25,200 --> 00:28:26,640
think that's going to be required if we

660
00:28:26,640 --> 00:28:29,120
ever want to replace things like the irr

661
00:28:29,120 --> 00:28:31,360
so i think that there's other work

662
00:28:31,360 --> 00:28:32,880
other useful work that would need the

663
00:28:32,880 --> 00:28:34,559
same sort of thing

664
00:28:34,559 --> 00:28:37,440
um and then the third thing is

665
00:28:37,440 --> 00:28:40,240
your example of pruning

666
00:28:40,240 --> 00:28:42,240
the customer cone

667
00:28:42,240 --> 00:28:45,600
using the aspa i think is problematic

668
00:28:45,600 --> 00:28:47,039
semantically

669
00:28:47,039 --> 00:28:49,440
um because i can imagine a scenario

670
00:28:49,440 --> 00:28:52,080
where a customer wants to use a transit

671
00:28:52,080 --> 00:28:55,039
link purely in the outbound direction

672
00:28:55,039 --> 00:28:57,840
and never intends to advertise any

673
00:28:57,840 --> 00:28:59,760
inbound reachability over it and

674
00:28:59,760 --> 00:29:01,919
therefore doesn't include that adjacency

675
00:29:01,919 --> 00:29:04,399
in their aspa but expects the return

676
00:29:04,399 --> 00:29:05,440
traffic to

677
00:29:05,440 --> 00:29:07,760
the outbound traffic to continue working

678
00:29:07,760 --> 00:29:08,960
and

679
00:29:08,960 --> 00:29:12,000
and using it to prune the the source

680
00:29:12,000 --> 00:29:14,559
address validation filter in that way

681
00:29:14,559 --> 00:29:15,919
breaks that assumption and i think

682
00:29:15,919 --> 00:29:18,000
that's going to be

683
00:29:18,000 --> 00:29:19,600
it would be if we wanted to do that i

684
00:29:19,600 --> 00:29:21,120
think we'd have to be very careful about

685
00:29:21,120 --> 00:29:22,720
how we document it

686
00:29:22,720 --> 00:29:24,080
so that that doesn't end up being a

687
00:29:24,080 --> 00:29:26,240
nasty surprise for a knock somewhere in

688
00:29:26,240 --> 00:29:27,919
the world at three in the morning

689
00:29:27,919 --> 00:29:29,840
um because it's such a corner case but

690
00:29:29,840 --> 00:29:31,520
it's a valid corner case

691
00:29:31,520 --> 00:29:33,200
um

692
00:29:33,200 --> 00:29:35,440
kind of all of those cumulatively leave

693
00:29:35,440 --> 00:29:37,279
me kind of feeling like if we want to be

694
00:29:37,279 --> 00:29:40,080
using rpki objects for source address

695
00:29:40,080 --> 00:29:41,600
validation

696
00:29:41,600 --> 00:29:43,360
i think i would prefer

697
00:29:43,360 --> 00:29:45,600
looking at defining new objects with

698
00:29:45,600 --> 00:29:48,080
those precise semantics rather than

699
00:29:48,080 --> 00:29:49,440
trying to

700
00:29:49,440 --> 00:29:50,960
kind of shoehorn the stuff we've got

701
00:29:50,960 --> 00:29:53,679
already into this hole

702
00:29:53,679 --> 00:29:55,120
i think it's a worthwhile thing doing

703
00:29:55,120 --> 00:29:56,960
potentially and i'd be happy to you know

704
00:29:56,960 --> 00:29:58,480
spend cycles and trying to get it done

705
00:29:58,480 --> 00:30:00,880
but i i don't love the trying to reuse

706
00:30:00,880 --> 00:30:03,840
the existing object stuff

707
00:30:03,840 --> 00:30:06,159
okay thank you so let me uh

708
00:30:06,159 --> 00:30:08,320
try to remember a few comments so the

709
00:30:08,320 --> 00:30:10,480
comment about implementation yes uh

710
00:30:10,480 --> 00:30:12,640
you're absolutely right um

711
00:30:12,640 --> 00:30:14,399
and basically like i said in subnet i

712
00:30:14,399 --> 00:30:17,200
mean the devil is an implementation and

713
00:30:17,200 --> 00:30:21,919
yes if you have a temporary loss of cash

714
00:30:21,919 --> 00:30:24,159
your implementation should expect that

715
00:30:24,159 --> 00:30:25,679
this can happen and

716
00:30:25,679 --> 00:30:26,480
not

717
00:30:26,480 --> 00:30:29,840
start to deny a lot more

718
00:30:31,520 --> 00:30:32,960
as a last comment

719
00:30:32,960 --> 00:30:34,159
absolutely

720
00:30:34,159 --> 00:30:36,880
having a purpose-built signal

721
00:30:36,880 --> 00:30:39,840
is much less of a hack than using

722
00:30:39,840 --> 00:30:42,000
another signal that was not built for

723
00:30:42,000 --> 00:30:43,919
the purpose so it's i see it as a

724
00:30:43,919 --> 00:30:45,760
trade-off between

725
00:30:45,760 --> 00:30:48,399
doing one more thing that's new versus

726
00:30:48,399 --> 00:30:51,360
using things that already exist now aspa

727
00:30:51,360 --> 00:30:53,679
doesn't really exist so it's an

728
00:30:53,679 --> 00:30:54,960
opportunity

729
00:30:54,960 --> 00:30:58,960
um so i agree thank you

730
00:31:01,120 --> 00:31:03,200
i think cohen has a question as well

731
00:31:03,200 --> 00:31:05,279
he's the last person with questions so

732
00:31:05,279 --> 00:31:06,159
yeah

733
00:31:06,159 --> 00:31:10,240
yeah i wanted to um also uh continue on

734
00:31:10,240 --> 00:31:13,519
by point that then medicine made um

735
00:31:13,519 --> 00:31:16,159
university of atlanta by the way um

736
00:31:16,159 --> 00:31:18,080
regarding what there are what you expect

737
00:31:18,080 --> 00:31:20,799
the failure condition uh to be because

738
00:31:20,799 --> 00:31:22,960
we've seen that rpg publication points

739
00:31:22,960 --> 00:31:25,519
don't meet this uh even

740
00:31:25,519 --> 00:31:26,720
100

741
00:31:26,720 --> 00:31:29,039
uptime availability every

742
00:31:29,039 --> 00:31:31,519
at all times there's probably some

743
00:31:31,519 --> 00:31:33,039
replication point

744
00:31:33,039 --> 00:31:34,640
out there that isn't quite working as it

745
00:31:34,640 --> 00:31:36,720
shoots so you are not retrieving the

746
00:31:36,720 --> 00:31:40,000
roast or in the future objects that from

747
00:31:40,000 --> 00:31:41,039
there

748
00:31:41,039 --> 00:31:43,519
um and what i've heard from you or what

749
00:31:43,519 --> 00:31:45,679
i've understood that would mean that

750
00:31:45,679 --> 00:31:47,519
suddenly a lot of traffic is getting

751
00:31:47,519 --> 00:31:49,600
blocked which indeed

752
00:31:49,600 --> 00:31:51,440
goes against the feel open nature of the

753
00:31:51,440 --> 00:31:53,440
rpki um

754
00:31:53,440 --> 00:31:55,200
what does she how do you

755
00:31:55,200 --> 00:31:57,760
and you didn't answer to bad medicine

756
00:31:57,760 --> 00:31:58,720
that

757
00:31:58,720 --> 00:32:00,880
you to take care of what when your cash

758
00:32:00,880 --> 00:32:03,279
goes but what if just part of your cash

759
00:32:03,279 --> 00:32:05,519
goes

760
00:32:05,519 --> 00:32:07,679
right so that's the same uh comment

761
00:32:07,679 --> 00:32:10,159
about the implementation detail is that

762
00:32:10,159 --> 00:32:12,480
uh how can it see i mean the first thing

763
00:32:12,480 --> 00:32:15,519
that comes to mind is uh you cash

764
00:32:15,519 --> 00:32:16,640
uh

765
00:32:16,640 --> 00:32:18,880
your information and

766
00:32:18,880 --> 00:32:21,279
you assume if something disappeared it's

767
00:32:21,279 --> 00:32:24,640
still valid for like 24 hours or 48

768
00:32:24,640 --> 00:32:25,600
hours

769
00:32:25,600 --> 00:32:28,320
and only if it's still not there 48

770
00:32:28,320 --> 00:32:30,080
hours later you remove it because you

771
00:32:30,080 --> 00:32:31,919
think maybe it's for a reason i mean

772
00:32:31,919 --> 00:32:33,200
that's just the first thing that comes

773
00:32:33,200 --> 00:32:34,720
to mind maybe other people will come up

774
00:32:34,720 --> 00:32:36,559
with some more clever

775
00:32:36,559 --> 00:32:39,279
heuristics

776
00:32:40,720 --> 00:32:43,720
okay

777
00:32:44,640 --> 00:32:45,919
all right

778
00:32:45,919 --> 00:32:47,200
jeff

779
00:32:47,200 --> 00:32:50,080
and then alexander

780
00:32:50,240 --> 00:32:52,880
yeah hi jeff houston um

781
00:32:52,880 --> 00:32:55,200
in looking through this

782
00:32:55,200 --> 00:32:57,039
what i understand you're trying to do is

783
00:32:57,039 --> 00:32:58,880
to take the simple case of source

784
00:32:58,880 --> 00:33:01,760
address validation which is a stub

785
00:33:01,760 --> 00:33:02,880
network

786
00:33:02,880 --> 00:33:04,880
where you've got enforced symmetric

787
00:33:04,880 --> 00:33:06,960
traffic because there's only one way out

788
00:33:06,960 --> 00:33:08,480
it's a stub

789
00:33:08,480 --> 00:33:10,480
and you're trying to synthesize

790
00:33:10,480 --> 00:33:13,440
that form of stub by taking an arbitrary

791
00:33:13,440 --> 00:33:15,760
subnet of networks

792
00:33:15,760 --> 00:33:18,320
and saying well what's the total amount

793
00:33:18,320 --> 00:33:20,080
they can sort of advertise in that

794
00:33:20,080 --> 00:33:23,279
arbitrary subnet which is a closed

795
00:33:23,279 --> 00:33:25,360
not

796
00:33:36,960 --> 00:33:39,600
not using available connectivity tool

797
00:33:39,600 --> 00:33:41,600
that doesn't care

798
00:33:41,600 --> 00:33:44,399
and in my head is this lingering doubt

799
00:33:44,399 --> 00:33:46,399
that when you try and assemble

800
00:33:46,399 --> 00:33:49,360
this sort of closed connected what you

801
00:33:49,360 --> 00:33:51,519
call customer cone which is not quite

802
00:33:51,519 --> 00:33:54,559
correct it's a cone of connectivity

803
00:33:54,559 --> 00:33:56,720
and saying well all the possible source

804
00:33:56,720 --> 00:33:58,960
addresses are now known because of rov

805
00:33:58,960 --> 00:34:00,000
etc

806
00:34:00,000 --> 00:34:02,480
therefore i can apply this acl

807
00:34:02,480 --> 00:34:05,039
your implicit assumption is that the

808
00:34:05,039 --> 00:34:07,279
policy directionality

809
00:34:07,279 --> 00:34:10,239
is the same as isomorphic

810
00:34:10,239 --> 00:34:12,560
to straight connectivity

811
00:34:12,560 --> 00:34:14,320
and somewhere in my head is a niggling

812
00:34:14,320 --> 00:34:15,199
doubt

813
00:34:15,199 --> 00:34:17,760
that i don't think that's the case

814
00:34:17,760 --> 00:34:20,480
and if that is the case there's a

815
00:34:20,480 --> 00:34:22,000
problem there

816
00:34:22,000 --> 00:34:24,320
and i haven't heard you

817
00:34:24,320 --> 00:34:25,440
kind of

818
00:34:25,440 --> 00:34:28,560
reassure me that that's not true

819
00:34:28,560 --> 00:34:31,199
or directly address this issue

820
00:34:31,199 --> 00:34:32,000
that

821
00:34:32,000 --> 00:34:34,800
policy-based connectivity is isomorphic

822
00:34:34,800 --> 00:34:37,760
to just rate connectivity

823
00:34:37,760 --> 00:34:39,119
right

824
00:34:39,119 --> 00:34:39,839
so

825
00:34:39,839 --> 00:34:41,839
you're absolutely right and that's what

826
00:34:41,839 --> 00:34:43,040
and in fact

827
00:34:43,040 --> 00:34:44,320
everything

828
00:34:44,320 --> 00:34:48,800
that has been done since 2000 is looking

829
00:34:48,800 --> 00:34:51,119
at the signals and bgp is

830
00:34:51,119 --> 00:34:52,800
exactly the same thing

831
00:34:52,800 --> 00:34:55,119
that has directionality and trying to

832
00:34:55,119 --> 00:34:57,040
enforce the reverse direction

833
00:34:57,040 --> 00:34:58,079
and

834
00:34:58,079 --> 00:35:00,960
aspa is just another

835
00:35:00,960 --> 00:35:02,800
signal like that

836
00:35:02,800 --> 00:35:04,240
and

837
00:35:04,240 --> 00:35:06,400
that is the information that we do have

838
00:35:06,400 --> 00:35:07,920
and we don't have the other one right

839
00:35:07,920 --> 00:35:08,720
now

840
00:35:08,720 --> 00:35:10,480
and so the goal is

841
00:35:10,480 --> 00:35:13,599
what can we do given what we have

842
00:35:13,599 --> 00:35:16,400
because that's the only thing we can do

843
00:35:16,400 --> 00:35:18,960
and so well okay this is the only thing

844
00:35:18,960 --> 00:35:21,119
we can do immediately we can build

845
00:35:21,119 --> 00:35:22,880
something we can build something new

846
00:35:22,880 --> 00:35:24,160
absolutely

847
00:35:24,160 --> 00:35:25,920
but then when we build something new it

848
00:35:25,920 --> 00:35:28,079
has to have the property that

849
00:35:28,079 --> 00:35:30,960
earlier it's cheap for early adopters

850
00:35:30,960 --> 00:35:32,960
and early adopters get immediate value

851
00:35:32,960 --> 00:35:34,720
when they're the first network to adopt

852
00:35:34,720 --> 00:35:36,480
it otherwise you get

853
00:35:36,480 --> 00:35:39,359
problems and i know i mean ipv6 kind of

854
00:35:39,359 --> 00:35:40,640
comes to mind but

855
00:35:40,640 --> 00:35:42,079
let's not go there

856
00:35:42,079 --> 00:35:44,160
um

857
00:35:44,160 --> 00:35:44,960
so

858
00:35:44,960 --> 00:35:45,680
but

859
00:35:45,680 --> 00:35:47,520
in your essence absolutely right but we

860
00:35:47,520 --> 00:35:50,240
think that getting sba information and

861
00:35:50,240 --> 00:35:52,000
raw information

862
00:35:52,000 --> 00:35:54,640
will enhance the state of the art we

863
00:35:54,640 --> 00:35:56,480
have and get it better will it get it

864
00:35:56,480 --> 00:35:57,599
perfect

865
00:35:57,599 --> 00:35:59,839
no

866
00:36:00,000 --> 00:36:03,520
an overly restrictive view of the

867
00:36:03,520 --> 00:36:06,240
prefixes coming from this

868
00:36:06,240 --> 00:36:08,480
bounded set of networks

869
00:36:08,480 --> 00:36:10,560
will create filters that are too

870
00:36:10,560 --> 00:36:12,400
enthusiastic

871
00:36:12,400 --> 00:36:14,160
that there will be valid presentations

872
00:36:14,160 --> 00:36:15,680
of source addresses that aren't in the

873
00:36:15,680 --> 00:36:17,839
list that's created

874
00:36:17,839 --> 00:36:20,079
the problem with going down this path is

875
00:36:20,079 --> 00:36:20,880
that

876
00:36:20,880 --> 00:36:22,800
the operator push back

877
00:36:22,800 --> 00:36:24,880
where an otherwise perfectly valid

878
00:36:24,880 --> 00:36:27,280
packet gets discarded because

879
00:36:27,280 --> 00:36:29,520
of some automated tool

880
00:36:29,520 --> 00:36:32,320
then becomes an operational cost

881
00:36:32,320 --> 00:36:35,920
and that's the underlying concern when i

882
00:36:35,920 --> 00:36:38,320
review this work going

883
00:36:38,320 --> 00:36:40,160
you're starting from a small set that's

884
00:36:40,160 --> 00:36:41,920
constrained rather than a large set

885
00:36:41,920 --> 00:36:44,560
that's maybe overly liberal

886
00:36:44,560 --> 00:36:46,880
but at least it encompasses all of that

887
00:36:46,880 --> 00:36:48,720
connectivity bound

888
00:36:48,720 --> 00:36:49,599
and

889
00:36:49,599 --> 00:36:50,400
you know

890
00:36:50,400 --> 00:36:53,040
there's more work to do here obviously

891
00:36:53,040 --> 00:36:54,400
but you know it's an interesting

892
00:36:54,400 --> 00:36:55,359
approach

893
00:36:55,359 --> 00:36:57,520
but it just struck me that policy and

894
00:36:57,520 --> 00:37:00,160
connectivity don't quite align the way

895
00:37:00,160 --> 00:37:02,320
you'd like it to for this work

896
00:37:02,320 --> 00:37:04,880
exactly so the goal

897
00:37:04,880 --> 00:37:06,960
what this thing is doing on top of what

898
00:37:06,960 --> 00:37:09,920
exists is that it's trying to expand

899
00:37:09,920 --> 00:37:13,119
the number of prefixes that it will find

900
00:37:13,119 --> 00:37:16,800
to put into your more permissive list

901
00:37:16,800 --> 00:37:18,640
so it's trying to make the list more

902
00:37:18,640 --> 00:37:20,079
permissive

903
00:37:20,079 --> 00:37:21,280
and

904
00:37:21,280 --> 00:37:23,359
will it get it perfect no and there was

905
00:37:23,359 --> 00:37:26,079
a suggestion how about you create a new

906
00:37:26,079 --> 00:37:29,520
sba record that's specifically for it

907
00:37:29,520 --> 00:37:30,320
that's

908
00:37:30,320 --> 00:37:31,280
maybe

909
00:37:31,280 --> 00:37:34,320
we could explore that um as far as the

910
00:37:34,320 --> 00:37:37,680
network goes so that was like okay

911
00:37:37,680 --> 00:37:40,960
somebody put sba just because they know

912
00:37:40,960 --> 00:37:43,920
that they will never advertise to a

913
00:37:43,920 --> 00:37:45,680
particular provider they never listed

914
00:37:45,680 --> 00:37:48,839
them in aspa

915
00:37:48,839 --> 00:37:51,280
um maybe

916
00:37:51,280 --> 00:37:52,640
now they will

917
00:37:52,640 --> 00:37:54,720
uh because they they think that this is

918
00:37:54,720 --> 00:37:56,320
uh but maybe it's a bene maybe it's a

919
00:37:56,320 --> 00:37:58,320
bad idea because it goes against the

920
00:37:58,320 --> 00:38:00,800
original purpose of sba

921
00:38:00,800 --> 00:38:03,280
so that that's why i i think it should

922
00:38:03,280 --> 00:38:04,800
be explored uh

923
00:38:04,800 --> 00:38:08,000
another sp record type

924
00:38:08,000 --> 00:38:10,000
i suppose we agree this is

925
00:38:10,000 --> 00:38:12,560
not ready yet but it's an interesting

926
00:38:12,560 --> 00:38:13,920
path to take well it's the first time

927
00:38:13,920 --> 00:38:16,240
the brain is here so and if there are

928
00:38:16,240 --> 00:38:18,320
people interested in working on it that

929
00:38:18,320 --> 00:38:21,760
it will get better thank you

930
00:38:23,599 --> 00:38:25,599
hey one quick question patel again

931
00:38:25,599 --> 00:38:27,839
speaking as a working group member um

932
00:38:27,839 --> 00:38:30,240
you talk about the

933
00:38:30,240 --> 00:38:33,280
customer cone and the relationships

934
00:38:33,280 --> 00:38:35,440
there but isn't this problem wider than

935
00:38:35,440 --> 00:38:37,520
that

936
00:38:37,520 --> 00:38:39,920
can you elaborate meaning the attack can

937
00:38:39,920 --> 00:38:43,280
also happen from appearing yes as well

938
00:38:43,280 --> 00:38:46,160
yes yes yes uh so when you're talking

939
00:38:46,160 --> 00:38:48,160
when i said the algorithm works both on

940
00:38:48,160 --> 00:38:49,839
peering interfaces and customer

941
00:38:49,839 --> 00:38:51,280
interfaces

942
00:38:51,280 --> 00:38:54,240
when you're looking at a peer interface

943
00:38:54,240 --> 00:38:56,240
you're trying to discover their customer

944
00:38:56,240 --> 00:38:58,560
code

945
00:38:58,960 --> 00:39:01,760
got it but it's quite possible that

946
00:39:01,760 --> 00:39:03,839
aisp has not

947
00:39:03,839 --> 00:39:06,079
um turned on this

948
00:39:06,079 --> 00:39:08,720
and you're simply peering to that isp

949
00:39:08,720 --> 00:39:10,640
and you still have an attack or and this

950
00:39:10,640 --> 00:39:12,480
attack has can be generated from a

951
00:39:12,480 --> 00:39:14,640
service provider itself right

952
00:39:14,640 --> 00:39:19,279
right so this is not defending against

953
00:39:20,480 --> 00:39:22,960
incoming packets

954
00:39:22,960 --> 00:39:23,839
that

955
00:39:23,839 --> 00:39:25,359
coming from your

956
00:39:25,359 --> 00:39:28,160
service provider into your network this

957
00:39:28,160 --> 00:39:30,960
is filtering packets coming from your

958
00:39:30,960 --> 00:39:34,800
customers or or your peers

959
00:39:34,800 --> 00:39:36,640
i mean unless your service provider is

960
00:39:36,640 --> 00:39:38,960
giving you a full table in which case

961
00:39:38,960 --> 00:39:40,800
you can really treat them

962
00:39:40,800 --> 00:39:42,880
as

963
00:39:51,680 --> 00:39:52,720
um

964
00:39:52,720 --> 00:39:55,920
sorry ben madison again um i think the i

965
00:39:55,920 --> 00:39:57,599
think the failure mode that cares kind

966
00:39:57,599 --> 00:39:58,880
of hinting at

967
00:39:58,880 --> 00:40:01,200
is when you have a combination of a

968
00:40:01,200 --> 00:40:03,119
regionalized peering

969
00:40:03,119 --> 00:40:06,079
and a partial transit service offered by

970
00:40:06,079 --> 00:40:07,280
that peer

971
00:40:07,280 --> 00:40:10,000
or or even to one of your own customers

972
00:40:10,000 --> 00:40:12,160
in a different region

973
00:40:12,160 --> 00:40:13,040
then

974
00:40:13,040 --> 00:40:15,680
that kind of breaks this kind of closure

975
00:40:15,680 --> 00:40:16,800
of

976
00:40:16,800 --> 00:40:19,680
um of of the the allowed to originate

977
00:40:19,680 --> 00:40:21,119
traffic relation

978
00:40:21,119 --> 00:40:22,720
and you end up not discovering

979
00:40:22,720 --> 00:40:25,280
potentially valid sources even under the

980
00:40:25,280 --> 00:40:27,280
expanded algorithm because those paths

981
00:40:27,280 --> 00:40:28,720
don't show up

982
00:40:28,720 --> 00:40:29,520
um

983
00:40:29,520 --> 00:40:31,200
i think that's but i don't think that's

984
00:40:31,200 --> 00:40:33,839
got anything to do with the rpki related

985
00:40:33,839 --> 00:40:35,680
stuff here i think that's a fundamental

986
00:40:35,680 --> 00:40:38,160
problem with the kind of algorithm

987
00:40:38,160 --> 00:40:40,160
assumptions there are two things there

988
00:40:40,160 --> 00:40:41,040
one

989
00:40:41,040 --> 00:40:42,240
is

990
00:40:42,240 --> 00:40:44,319
if those networks actually bother to

991
00:40:44,319 --> 00:40:46,400
create spa records

992
00:40:46,400 --> 00:40:50,960
they would list themselves as providers

993
00:40:50,960 --> 00:40:52,960
so it would discover it

994
00:40:52,960 --> 00:40:56,880
and also in a particular location

995
00:40:56,880 --> 00:40:58,079
where

996
00:40:58,079 --> 00:41:01,280
somebody is a customer

997
00:41:01,280 --> 00:41:04,560
you would likely receive bgp messages

998
00:41:04,560 --> 00:41:08,000
from them pointing to that interface

999
00:41:08,000 --> 00:41:09,839
i may need to think a little more about

1000
00:41:09,839 --> 00:41:11,839
it but that's yeah so there's there's a

1001
00:41:11,839 --> 00:41:14,000
gap there because of the fact that you

1002
00:41:14,000 --> 00:41:15,599
don't have to talk about lateral

1003
00:41:15,599 --> 00:41:18,079
peerings in aspa records

1004
00:41:18,079 --> 00:41:20,240
that the paths don't show up in bgp

1005
00:41:20,240 --> 00:41:21,680
because of policy

1006
00:41:21,680 --> 00:41:22,640
the

1007
00:41:22,640 --> 00:41:25,040
um adjacencies don't show up in the aspa

1008
00:41:25,040 --> 00:41:27,200
because they're just pairings and as a

1009
00:41:27,200 --> 00:41:28,880
result that gets left out of the cone

1010
00:41:28,880 --> 00:41:30,400
i'm pretty sure that there is a i'm

1011
00:41:30,400 --> 00:41:31,599
pretty sure that there is a gap there

1012
00:41:31,599 --> 00:41:33,280
that we wouldn't catch um it only

1013
00:41:33,280 --> 00:41:35,040
happens in the partial transit case but

1014
00:41:35,040 --> 00:41:36,720
it's i think it would have

1015
00:41:36,720 --> 00:41:37,920
we can look at it i think it's an

1016
00:41:37,920 --> 00:41:39,599
interesting case that needs to be

1017
00:41:39,599 --> 00:41:42,000
explored

1018
00:41:43,040 --> 00:41:44,400
thank you

1019
00:41:44,400 --> 00:41:49,000
thanks we have tom next

1020
00:41:52,319 --> 00:41:55,440
oh okay you can hear me

1021
00:41:55,440 --> 00:41:58,440
yes

1022
00:42:02,400 --> 00:42:04,720
all right thanks uh so

1023
00:42:04,720 --> 00:42:07,520
to recap briefly on this

1024
00:42:07,520 --> 00:42:10,240
um this document defines a new signed

1025
00:42:10,240 --> 00:42:13,119
object called a trust anchor key

1026
00:42:13,119 --> 00:42:15,440
object or attack object

1027
00:42:15,440 --> 00:42:18,240
and the idea is that it's used to signal

1028
00:42:18,240 --> 00:42:21,440
to relying parties that the ta key or

1029
00:42:21,440 --> 00:42:24,319
the root ca certificate urls

1030
00:42:24,319 --> 00:42:26,800
are going to change

1031
00:42:26,800 --> 00:42:28,720
so the main goal here is simplifying key

1032
00:42:28,720 --> 00:42:31,359
rollover if we wanted to roll a key

1033
00:42:31,359 --> 00:42:33,520
today we would have to take our nutella

1034
00:42:33,520 --> 00:42:34,560
file

1035
00:42:34,560 --> 00:42:36,319
uh distribute it to all the different

1036
00:42:36,319 --> 00:42:38,000
vendors

1037
00:42:38,000 --> 00:42:39,920
wait for people to upgrade their clients

1038
00:42:39,920 --> 00:42:42,240
if the if they're upgrading them

1039
00:42:42,240 --> 00:42:43,599
the upgrade process would have to

1040
00:42:43,599 --> 00:42:45,920
involve uh getting that new tail into

1041
00:42:45,920 --> 00:42:47,119
place

1042
00:42:47,119 --> 00:42:48,960
and so on so there are a few steps

1043
00:42:48,960 --> 00:42:51,280
involved um and a few things that can go

1044
00:42:51,280 --> 00:42:52,800
wrong

1045
00:42:52,800 --> 00:42:55,200
uh or clients might have a custom da

1046
00:42:55,200 --> 00:42:56,960
update process maybe operating system

1047
00:42:56,960 --> 00:42:59,680
packages or something like that

1048
00:42:59,680 --> 00:43:01,920
so whereas if we have a process like

1049
00:43:01,920 --> 00:43:03,839
this then it's all in banned

1050
00:43:03,839 --> 00:43:06,000
um and even the people who aren't

1051
00:43:06,000 --> 00:43:09,200
updating the trust store automatically

1052
00:43:09,200 --> 00:43:10,960
they still get a signal that there's a

1053
00:43:10,960 --> 00:43:13,520
change and they need to do something

1054
00:43:13,520 --> 00:43:15,440
so the more confidence we have in this

1055
00:43:15,440 --> 00:43:18,240
process uh the easier it is to do key

1056
00:43:18,240 --> 00:43:22,000
rollover and that helps with hsm vendor

1057
00:43:22,000 --> 00:43:23,040
lock-in

1058
00:43:23,040 --> 00:43:24,560
which is the main goal here not being

1059
00:43:24,560 --> 00:43:26,400
stuck on one hsm

1060
00:43:26,400 --> 00:43:27,920
indefinitely

1061
00:43:27,920 --> 00:43:30,240
and the secondary goal is the ability to

1062
00:43:30,240 --> 00:43:33,680
update um root ca certificate urls so

1063
00:43:33,680 --> 00:43:35,040
that just gives us a bit more

1064
00:43:35,040 --> 00:43:38,319
flexibility around deployment

1065
00:43:39,280 --> 00:43:42,480
uh so this was last presented at itf 111

1066
00:43:42,480 --> 00:43:45,040
and one of the key feedback items was to

1067
00:43:45,040 --> 00:43:46,000
look at

1068
00:43:46,000 --> 00:43:48,480
other approaches to ta rollover and just

1069
00:43:48,480 --> 00:43:51,040
see whether they might be relevant here

1070
00:43:51,040 --> 00:43:53,200
so one document that came up out of that

1071
00:43:53,200 --> 00:43:54,800
was 40 to 10

1072
00:43:54,800 --> 00:43:56,560
certificate management protocol which

1073
00:43:56,560 --> 00:43:59,920
has uh as part of its ta transition

1074
00:43:59,920 --> 00:44:01,280
process

1075
00:44:01,280 --> 00:44:03,440
uh this root ca key

1076
00:44:03,440 --> 00:44:05,119
update section

1077
00:44:05,119 --> 00:44:07,920
the idea there is that a ta operator

1078
00:44:07,920 --> 00:44:10,160
when it's transitioning to a new trust

1079
00:44:10,160 --> 00:44:12,240
anchor will sign the old one with the

1080
00:44:12,240 --> 00:44:14,960
new one and the new one with the old one

1081
00:44:14,960 --> 00:44:16,960
and then make those certificates

1082
00:44:16,960 --> 00:44:20,000
available via a repository that clients

1083
00:44:20,000 --> 00:44:21,280
can

1084
00:44:21,280 --> 00:44:23,440
where clients can retrieve them

1085
00:44:23,440 --> 00:44:25,920
so that if the client trusts the old

1086
00:44:25,920 --> 00:44:27,760
trust anchor then they can validate

1087
00:44:27,760 --> 00:44:30,000
stuff signed with the new trust anchor

1088
00:44:30,000 --> 00:44:32,960
and vice versa

1089
00:44:33,119 --> 00:44:35,040
but there are a couple of things here

1090
00:44:35,040 --> 00:44:36,960
which are different from rpqr the first

1091
00:44:36,960 --> 00:44:38,800
one is that ta distribution is out of

1092
00:44:38,800 --> 00:44:41,200
band um clients might be using the old

1093
00:44:41,200 --> 00:44:43,920
one or the new one whereas with scientel

1094
00:44:43,920 --> 00:44:46,319
ta distribution is in band

1095
00:44:46,319 --> 00:44:49,119
and the other thing is that

1096
00:44:49,119 --> 00:44:51,440
with cmp or at least in that context

1097
00:44:51,440 --> 00:44:53,200
clients might receive certificates from

1098
00:44:53,200 --> 00:44:54,400
other sources

1099
00:44:54,400 --> 00:44:56,480
whereas with rpco it's all in the

1100
00:44:56,480 --> 00:44:57,920
repositories

1101
00:44:57,920 --> 00:45:00,720
so it's not clear that this model is uh

1102
00:45:00,720 --> 00:45:05,078
applicable in the uppercut space

1103
00:45:06,160 --> 00:45:08,800
uh the next document is 8649 hash of

1104
00:45:08,800 --> 00:45:10,800
root key certificate extension which was

1105
00:45:10,800 --> 00:45:12,160
mentioned

1106
00:45:12,160 --> 00:45:14,960
as part of the discussion after 111.

1107
00:45:14,960 --> 00:45:17,119
the idea there is that you include the

1108
00:45:17,119 --> 00:45:20,880
hash of the upcoming ta key in the ta

1109
00:45:20,880 --> 00:45:23,200
certificate that you distribute

1110
00:45:23,200 --> 00:45:25,440
so that when a client sees that new ta

1111
00:45:25,440 --> 00:45:27,839
certificate it can it can compare the

1112
00:45:27,839 --> 00:45:29,359
key with the hash

1113
00:45:29,359 --> 00:45:32,960
and uh know that this is um the new

1114
00:45:32,960 --> 00:45:34,720
certificate is using the expected key

1115
00:45:34,720 --> 00:45:36,240
basically

1116
00:45:36,240 --> 00:45:38,960
tim commented uh on this at the time on

1117
00:45:38,960 --> 00:45:41,520
the list uh one issue is that

1118
00:45:41,520 --> 00:45:44,240
rp's may not ignore that extension which

1119
00:45:44,240 --> 00:45:45,760
could be a problem

1120
00:45:45,760 --> 00:45:48,640
another one is that if the new ta

1121
00:45:48,640 --> 00:45:50,800
certificate replaces the old one

1122
00:45:50,800 --> 00:45:52,640
then there's no way to transition from

1123
00:45:52,640 --> 00:45:54,800
previous tal data once uh the

1124
00:45:54,800 --> 00:45:57,440
certificate has been replaced um

1125
00:45:57,440 --> 00:46:00,880
which is not ideal uh it's good to be

1126
00:46:00,880 --> 00:46:02,960
able it's good to have that transition

1127
00:46:02,960 --> 00:46:04,720
available

1128
00:46:04,720 --> 00:46:08,079
another thing is that 86.9 involves a ta

1129
00:46:08,079 --> 00:46:10,480
certificate issued ahead of time that is

1130
00:46:10,480 --> 00:46:12,160
presumably stable

1131
00:46:12,160 --> 00:46:14,480
whereas rpki because of the indirection

1132
00:46:14,480 --> 00:46:16,319
of the tau supports arbitrary

1133
00:46:16,319 --> 00:46:18,240
reassurance of that certificate

1134
00:46:18,240 --> 00:46:20,400
so if a model like this were to be

1135
00:46:20,400 --> 00:46:22,160
adopted there'd need to be additional

1136
00:46:22,160 --> 00:46:24,240
guidance about what to do when the value

1137
00:46:24,240 --> 00:46:28,200
changes and so on

1138
00:46:29,280 --> 00:46:32,160
uh web pki um

1139
00:46:32,160 --> 00:46:33,839
it doesn't appear that anybody does

1140
00:46:33,839 --> 00:46:36,880
rollover here uh it looks like root ca

1141
00:46:36,880 --> 00:46:39,920
operators just issue new root ca

1142
00:46:39,920 --> 00:46:41,920
certificates and rely on cross

1143
00:46:41,920 --> 00:46:43,599
certification so

1144
00:46:43,599 --> 00:46:46,240
not dissimilar to the the cmp type

1145
00:46:46,240 --> 00:46:48,640
approach

1146
00:46:49,040 --> 00:46:51,200
and the last document found here was

1147
00:46:51,200 --> 00:46:54,640
5011 automated updates of dns sections

1148
00:46:54,640 --> 00:46:57,119
so one of the key things out of from

1149
00:46:57,119 --> 00:46:58,880
that document is this idea of an

1150
00:46:58,880 --> 00:47:00,720
acceptance timer

1151
00:47:00,720 --> 00:47:02,000
a client

1152
00:47:02,000 --> 00:47:03,680
sets an acceptance timer when it sees a

1153
00:47:03,680 --> 00:47:04,960
new key

1154
00:47:04,960 --> 00:47:06,160
and

1155
00:47:06,160 --> 00:47:08,400
it needs to continue seeing that new key

1156
00:47:08,400 --> 00:47:10,480
for a period of time before it updates

1157
00:47:10,480 --> 00:47:12,319
its trust store

1158
00:47:12,319 --> 00:47:14,079
with that new key starts relying on that

1159
00:47:14,079 --> 00:47:15,280
new key

1160
00:47:15,280 --> 00:47:18,240
so that model has been adopted

1161
00:47:18,240 --> 00:47:21,359
in the scientel document now um the

1162
00:47:21,359 --> 00:47:23,119
acceptance time period is 30 days which

1163
00:47:23,119 --> 00:47:25,119
is just arbitrary

1164
00:47:25,119 --> 00:47:28,319
and the idea is that um that will help

1165
00:47:28,319 --> 00:47:29,680
with some of the concerns that were

1166
00:47:29,680 --> 00:47:30,960
raised around

1167
00:47:30,960 --> 00:47:34,319
temporary key compromise um if as in if

1168
00:47:34,319 --> 00:47:35,839
an attacker has

1169
00:47:35,839 --> 00:47:37,200
access to the key even for a short

1170
00:47:37,200 --> 00:47:39,200
period of time they can transition

1171
00:47:39,200 --> 00:47:41,119
everybody to a new key and a new

1172
00:47:41,119 --> 00:47:42,640
publication point are controlled

1173
00:47:42,640 --> 00:47:46,079
exclusively by the attacker which is um

1174
00:47:46,079 --> 00:47:48,160
yeah and then it's game over so this

1175
00:47:48,160 --> 00:47:51,720
will help with that

1176
00:47:52,880 --> 00:47:54,559
something else that came up with i7 was

1177
00:47:54,559 --> 00:47:56,640
the use of the term revoked the attack

1178
00:47:56,640 --> 00:47:59,599
object in i7 had this revoked flag

1179
00:47:59,599 --> 00:48:02,400
and when that was set uh it was a signal

1180
00:48:02,400 --> 00:48:04,559
to the clients to move to the successor

1181
00:48:04,559 --> 00:48:05,599
key

1182
00:48:05,599 --> 00:48:07,599
the problem is that it's not really

1183
00:48:07,599 --> 00:48:09,280
revoked in the sense that that term is

1184
00:48:09,280 --> 00:48:11,200
used in um

1185
00:48:11,200 --> 00:48:14,079
in other contexts uh because you still

1186
00:48:14,079 --> 00:48:16,400
have to use that attack object to get to

1187
00:48:16,400 --> 00:48:18,079
the new key

1188
00:48:18,079 --> 00:48:20,400
so it's just not the right term to use

1189
00:48:20,400 --> 00:48:21,440
so

1190
00:48:21,440 --> 00:48:23,119
to address that the

1191
00:48:23,119 --> 00:48:24,240
um

1192
00:48:24,240 --> 00:48:25,760
the attack object no longer has a

1193
00:48:25,760 --> 00:48:28,319
revoked flag just has a different model

1194
00:48:28,319 --> 00:48:30,480
and uh there's some advice in the

1195
00:48:30,480 --> 00:48:33,440
document for tas to reuse

1196
00:48:33,440 --> 00:48:35,280
previous tier certificate urls for new

1197
00:48:35,280 --> 00:48:37,280
keys once they've stopped maintaining

1198
00:48:37,280 --> 00:48:38,640
the previous key

1199
00:48:38,640 --> 00:48:40,960
the idea with that is that if an

1200
00:48:40,960 --> 00:48:42,800
attacker gets access to

1201
00:48:42,800 --> 00:48:43,599
a

1202
00:48:43,599 --> 00:48:45,440
previous talent key and publication

1203
00:48:45,440 --> 00:48:47,040
point

1204
00:48:47,040 --> 00:48:49,839
a client that connects to that will see

1205
00:48:49,839 --> 00:48:51,280
a different certificate with a different

1206
00:48:51,280 --> 00:48:52,079
key

1207
00:48:52,079 --> 00:48:54,240
and then all things being equal we'll

1208
00:48:54,240 --> 00:48:56,319
think uh we'll go and get new tail data

1209
00:48:56,319 --> 00:48:58,000
and everything will be fine it won't be

1210
00:48:58,000 --> 00:48:59,839
possible for the attacker to exploit

1211
00:48:59,839 --> 00:49:03,078
that client

1212
00:49:04,000 --> 00:49:06,319
a couple of other changes the attack

1213
00:49:06,319 --> 00:49:07,760
object now includes a reference to the

1214
00:49:07,760 --> 00:49:09,920
predecessor key this is just a belt and

1215
00:49:09,920 --> 00:49:12,559
suspenders type thing making sure that

1216
00:49:12,559 --> 00:49:13,920
each

1217
00:49:13,920 --> 00:49:15,520
each publication point is operating in

1218
00:49:15,520 --> 00:49:18,559
its expect in an expected capacity

1219
00:49:18,559 --> 00:49:19,440
um

1220
00:49:19,440 --> 00:49:21,440
yep so that the success key actually

1221
00:49:21,440 --> 00:49:23,040
knows that it's operating as a successor

1222
00:49:23,040 --> 00:49:25,440
for a specific predecessor

1223
00:49:25,440 --> 00:49:26,880
there's some discussion around the use

1224
00:49:26,880 --> 00:49:28,880
of tac objects as a substitute for tau

1225
00:49:28,880 --> 00:49:30,480
data

1226
00:49:30,480 --> 00:49:33,040
and after the cut off there were some

1227
00:49:33,040 --> 00:49:36,000
further updates around security

1228
00:49:36,000 --> 00:49:38,000
and

1229
00:49:38,000 --> 00:49:40,559
i suppose threat model type updates but

1230
00:49:40,559 --> 00:49:42,160
they didn't make the deadline so they'll

1231
00:49:42,160 --> 00:49:45,799
go into the next update

1232
00:49:48,480 --> 00:49:50,559
uh another thing that came up

1233
00:49:50,559 --> 00:49:53,280
the last time this was presented was

1234
00:49:53,280 --> 00:49:56,400
looking at the currency of validators

1235
00:49:56,400 --> 00:49:58,240
to see when it might be possible to rely

1236
00:49:58,240 --> 00:50:01,200
on something like this in practice

1237
00:50:01,200 --> 00:50:03,680
so this is a graph of the validators

1238
00:50:03,680 --> 00:50:07,680
that we see at openings rrdp service um

1239
00:50:07,680 --> 00:50:09,839
but probably every rrdp server sees

1240
00:50:09,839 --> 00:50:11,440
something similar

1241
00:50:11,440 --> 00:50:13,520
each of the data points on the x-axis is

1242
00:50:13,520 --> 00:50:15,520
from the last day of that month the

1243
00:50:15,520 --> 00:50:17,520
validators we saw in that day

1244
00:50:17,520 --> 00:50:20,960
uh on the y-axis we have the asn's and

1245
00:50:20,960 --> 00:50:23,200
their sensor got from the ip address

1246
00:50:23,200 --> 00:50:26,160
information just by looking at bgp

1247
00:50:26,160 --> 00:50:27,440
uh

1248
00:50:27,440 --> 00:50:30,319
so the clients are rather the relying

1249
00:50:30,319 --> 00:50:33,440
parties that provide version information

1250
00:50:33,440 --> 00:50:36,000
um those are route nader

1251
00:50:36,000 --> 00:50:37,760
octo rpqi

1252
00:50:37,760 --> 00:50:40,960
rpk approver

1253
00:50:40,960 --> 00:50:44,400
the right validator and fort

1254
00:50:44,400 --> 00:50:46,559
so each of those is taken into account

1255
00:50:46,559 --> 00:50:48,079
for one of the time figures in the

1256
00:50:48,079 --> 00:50:49,760
legend on the right

1257
00:50:49,760 --> 00:50:51,839
uh then there's rpko client which

1258
00:50:51,839 --> 00:50:53,359
doesn't provide version information

1259
00:50:53,359 --> 00:50:54,960
unfortunately so it has a separate

1260
00:50:54,960 --> 00:50:56,079
section

1261
00:50:56,079 --> 00:50:58,480
and then there are other unknown clients

1262
00:50:58,480 --> 00:51:00,559
uh the unknown clients actually exclude

1263
00:51:00,559 --> 00:51:03,920
traffic that is coming from browsers so

1264
00:51:03,920 --> 00:51:05,280
uh

1265
00:51:05,280 --> 00:51:07,680
yeah it's software that appears to be

1266
00:51:07,680 --> 00:51:08,960
connecting to the repo well is

1267
00:51:08,960 --> 00:51:10,480
connecting to repositories for some

1268
00:51:10,480 --> 00:51:12,880
reason but it's not immediately apparent

1269
00:51:12,880 --> 00:51:15,119
what that reason is

1270
00:51:15,119 --> 00:51:17,839
so looking at this pessimistically uh if

1271
00:51:17,839 --> 00:51:18,800
all those

1272
00:51:18,800 --> 00:51:22,000
rpq client instances are version 7.0

1273
00:51:22,000 --> 00:51:23,599
which was the first release of rpq

1274
00:51:23,599 --> 00:51:26,960
client that had support for rdp

1275
00:51:26,960 --> 00:51:28,880
then it could be as much as 50 of the

1276
00:51:28,880 --> 00:51:30,559
validator population that's more than 12

1277
00:51:30,559 --> 00:51:31,839
months old

1278
00:51:31,839 --> 00:51:34,559
uh more optimistically

1279
00:51:34,559 --> 00:51:36,880
it's still 15 to 20 so it's a

1280
00:51:36,880 --> 00:51:40,079
substantial number of validators that uh

1281
00:51:40,079 --> 00:51:41,920
are fairly old

1282
00:51:41,920 --> 00:51:43,920
and then there's the unknown uh clients

1283
00:51:43,920 --> 00:51:45,839
to consider as well so that needs more

1284
00:51:45,839 --> 00:51:47,440
looking into

1285
00:51:47,440 --> 00:51:50,240
but in short uh if we want to rely on

1286
00:51:50,240 --> 00:51:53,200
tack objects in practice then after the

1287
00:51:53,200 --> 00:51:55,680
rp code rp code updates are done

1288
00:51:55,680 --> 00:51:57,280
there needs to be a fairly concerted

1289
00:51:57,280 --> 00:51:58,720
effort around getting people onto

1290
00:51:58,720 --> 00:52:03,399
versions that support those objects

1291
00:52:04,880 --> 00:52:08,000
okay uh so next steps um

1292
00:52:08,000 --> 00:52:10,240
obviously feedback would be good uh once

1293
00:52:10,240 --> 00:52:12,720
that feedback is addressed we will

1294
00:52:12,720 --> 00:52:15,520
move to updating the prototype code and

1295
00:52:15,520 --> 00:52:17,680
then we'll go from there

1296
00:52:17,680 --> 00:52:20,480
and that's it thanks

1297
00:52:25,119 --> 00:52:28,640
do we have any questions for tom

1298
00:52:31,280 --> 00:52:33,920
going once going twice

1299
00:52:33,920 --> 00:52:35,040
okay

1300
00:52:35,040 --> 00:52:37,680
thank you tom

1301
00:52:41,440 --> 00:52:44,839
next up is i think tim

1302
00:52:44,839 --> 00:52:48,558
or yes tim

1303
00:52:54,079 --> 00:52:56,079
you still stand on the cross

1304
00:52:56,079 --> 00:52:57,040
all right

1305
00:52:57,040 --> 00:52:59,520
can everybody hear me yeah i hear myself

1306
00:52:59,520 --> 00:53:00,559
so

1307
00:53:00,559 --> 00:53:03,119
probably yes

1308
00:53:10,800 --> 00:53:13,359
oh good lord

1309
00:53:13,359 --> 00:53:15,839
there we go

1310
00:53:17,040 --> 00:53:18,160
yeah

1311
00:53:18,160 --> 00:53:21,440
well speaking oh that that helps

1312
00:53:21,440 --> 00:53:23,920
okay um well let's move on to the next

1313
00:53:23,920 --> 00:53:25,200
slide

1314
00:53:25,200 --> 00:53:28,000
i'm going to tell a short story at least

1315
00:53:28,000 --> 00:53:29,359
that's the

1316
00:53:29,359 --> 00:53:30,319
idea

1317
00:53:30,319 --> 00:53:31,200
um

1318
00:53:31,200 --> 00:53:33,760
i wanted to talk about hosted rpi

1319
00:53:33,760 --> 00:53:35,520
services delegated i wanted to talk

1320
00:53:35,520 --> 00:53:39,200
about delegated cas and repositories and

1321
00:53:39,200 --> 00:53:41,280
then zoom in on a particular aspect of

1322
00:53:41,280 --> 00:53:44,000
it so jumping ahead of it i'll get there

1323
00:53:44,000 --> 00:53:46,880
i want to look at how do we

1324
00:53:46,880 --> 00:53:48,800
migrate from one repository to another

1325
00:53:48,800 --> 00:53:49,920
actually

1326
00:53:49,920 --> 00:53:50,800
um

1327
00:53:50,800 --> 00:53:53,119
but let's start at the start so the

1328
00:53:53,119 --> 00:53:55,359
different models that we see

1329
00:53:55,359 --> 00:53:58,079
today the by far the most common model

1330
00:53:58,079 --> 00:54:00,240
is what is here in the in the in the top

1331
00:54:00,240 --> 00:54:01,280
left

1332
00:54:01,280 --> 00:54:03,760
which is where um you have a parent and

1333
00:54:03,760 --> 00:54:06,800
a bunch of child cas in one system

1334
00:54:06,800 --> 00:54:11,359
provided by a an rar and are usually

1335
00:54:11,359 --> 00:54:13,119
publishing all their content in a

1336
00:54:13,119 --> 00:54:15,520
repository

1337
00:54:15,520 --> 00:54:16,880
that is operated by that same

1338
00:54:16,880 --> 00:54:19,520
organization parent or organization

1339
00:54:19,520 --> 00:54:22,480
now you can also run dedicated

1340
00:54:22,480 --> 00:54:24,400
cas and then you have a choice of where

1341
00:54:24,400 --> 00:54:25,599
you publish

1342
00:54:25,599 --> 00:54:26,640
at least

1343
00:54:26,640 --> 00:54:28,480
sometimes you do

1344
00:54:28,480 --> 00:54:31,200
you can run your own repository

1345
00:54:31,200 --> 00:54:34,400
for certain uh a number of arias provide

1346
00:54:34,400 --> 00:54:35,920
a service where

1347
00:54:35,920 --> 00:54:37,520
a member of

1348
00:54:37,520 --> 00:54:39,920
said arya i can publish at them

1349
00:54:39,920 --> 00:54:42,319
and we don't see this just yet but it

1350
00:54:42,319 --> 00:54:44,160
has been mentioned a few times in the

1351
00:54:44,160 --> 00:54:45,599
past

1352
00:54:45,599 --> 00:54:47,680
the way the separation between the

1353
00:54:47,680 --> 00:54:49,520
publication protocol and the delegation

1354
00:54:49,520 --> 00:54:50,880
protocol if you will the provisioning

1355
00:54:50,880 --> 00:54:52,720
protocol is organized

1356
00:54:52,720 --> 00:54:54,880
allowed for

1357
00:54:54,880 --> 00:54:56,559
essentially third-party content

1358
00:54:56,559 --> 00:54:59,599
providers to also provide a service

1359
00:54:59,599 --> 00:55:01,040
where people could

1360
00:55:01,040 --> 00:55:03,680
publish so i remember people saying

1361
00:55:03,680 --> 00:55:05,599
let's just publish at google amazon

1362
00:55:05,599 --> 00:55:07,440
cloudflare i don't know whoever i'm not

1363
00:55:07,440 --> 00:55:09,119
taking any sites but

1364
00:55:09,119 --> 00:55:11,280
that was an idea behind it

1365
00:55:11,280 --> 00:55:13,760
moving on

1366
00:55:14,480 --> 00:55:17,280
next slide please

1367
00:55:18,880 --> 00:55:21,280
yep so um

1368
00:55:21,280 --> 00:55:23,680
using a provided repository well what we

1369
00:55:23,680 --> 00:55:25,520
have found is that

1370
00:55:25,520 --> 00:55:26,720
um

1371
00:55:26,720 --> 00:55:29,440
in brazil in particular

1372
00:55:29,440 --> 00:55:32,319
the rpki uptake is all done through

1373
00:55:32,319 --> 00:55:33,920
well people running their own system

1374
00:55:33,920 --> 00:55:36,240
because they don't have an option to use

1375
00:55:36,240 --> 00:55:38,400
a hosted servers

1376
00:55:38,400 --> 00:55:39,440
um

1377
00:55:39,440 --> 00:55:41,760
so yeah maybe if they did they would use

1378
00:55:41,760 --> 00:55:43,040
it

1379
00:55:43,040 --> 00:55:45,839
on the other hand we see quite a lot of

1380
00:55:45,839 --> 00:55:48,960
uptake more than i personally expected

1381
00:55:48,960 --> 00:55:52,160
and i think that's mainly because

1382
00:55:52,160 --> 00:55:54,000
if you don't have the concern about

1383
00:55:54,000 --> 00:55:55,760
publishing

1384
00:55:55,760 --> 00:55:58,000
hosting a repository yourself

1385
00:55:58,000 --> 00:56:00,400
that takes away a lot of the pain of of

1386
00:56:00,400 --> 00:56:01,440
doing this

1387
00:56:01,440 --> 00:56:02,720
and especially it takes away a lot of

1388
00:56:02,720 --> 00:56:04,720
the pain of you know providing accurate

1389
00:56:04,720 --> 00:56:06,000
good uptime

1390
00:56:06,000 --> 00:56:08,240
for https but more importantly maybe

1391
00:56:08,240 --> 00:56:10,160
even for rsync because organizations are

1392
00:56:10,160 --> 00:56:11,920
not always ready to do that kind of

1393
00:56:11,920 --> 00:56:12,880
thing

1394
00:56:12,880 --> 00:56:15,040
whereas if you just run an aca on your

1395
00:56:15,040 --> 00:56:17,040
side and it goes down for whatever

1396
00:56:17,040 --> 00:56:18,160
reason

1397
00:56:18,160 --> 00:56:20,240
if you bring it off in time for it to

1398
00:56:20,240 --> 00:56:22,000
republish before manifest and serials

1399
00:56:22,000 --> 00:56:24,720
would expire then it is a lot more

1400
00:56:24,720 --> 00:56:28,240
forgiving than operating something 24 7.

1401
00:56:28,240 --> 00:56:30,079
so i think this is really an enabler for

1402
00:56:30,079 --> 00:56:32,400
people to do this kind of thing

1403
00:56:32,400 --> 00:56:34,480
okay

1404
00:56:34,480 --> 00:56:35,200
now

1405
00:56:35,200 --> 00:56:37,680
the question i wanted to get to is

1406
00:56:37,680 --> 00:56:39,440
suppose i'm doing this and suppose i set

1407
00:56:39,440 --> 00:56:41,760
up my own repository for example but now

1408
00:56:41,760 --> 00:56:43,599
i want to move on to another repository

1409
00:56:43,599 --> 00:56:45,440
how do i go about that

1410
00:56:45,440 --> 00:56:47,119
is that even possible

1411
00:56:47,119 --> 00:56:48,720
and

1412
00:56:48,720 --> 00:56:50,960
we have actually implemented something

1413
00:56:50,960 --> 00:56:53,200
i think it needs improvement

1414
00:56:53,200 --> 00:56:56,640
and it's based on key roles an existing

1415
00:56:56,640 --> 00:57:00,559
standard that we do have so next slide

1416
00:57:00,559 --> 00:57:02,480
i'll try to briefly discuss how key

1417
00:57:02,480 --> 00:57:04,319
roles work maybe it go

1418
00:57:04,319 --> 00:57:09,040
how are we for time should i be quick or

1419
00:57:09,040 --> 00:57:11,280
well there's a lot of arrows here and

1420
00:57:11,280 --> 00:57:14,640
most of the arrows are actually missing

1421
00:57:14,640 --> 00:57:16,559
but it's to give an idea right before

1422
00:57:16,559 --> 00:57:18,640
any any key role the situation is you

1423
00:57:18,640 --> 00:57:20,559
get a certificate from your parent you

1424
00:57:20,559 --> 00:57:22,319
publish a manifest and a serial and then

1425
00:57:22,319 --> 00:57:24,559
you have a bunch of objects

1426
00:57:24,559 --> 00:57:26,960
rawas etc and you may publish

1427
00:57:26,960 --> 00:57:29,280
ca certificates um

1428
00:57:29,280 --> 00:57:30,000
for

1429
00:57:30,000 --> 00:57:32,000
grandchildren

1430
00:57:32,000 --> 00:57:35,599
um they're all in in in one repository

1431
00:57:35,599 --> 00:57:37,920
right so then the next phase is that you

1432
00:57:37,920 --> 00:57:39,920
would

1433
00:57:39,920 --> 00:57:43,040
next slide please

1434
00:57:47,440 --> 00:57:49,200
you generate a new key pair you ask for

1435
00:57:49,200 --> 00:57:50,559
a new certificate and you publish a

1436
00:57:50,559 --> 00:57:52,240
manifest and a serial but nothing else

1437
00:57:52,240 --> 00:57:54,480
all the actual content is still under

1438
00:57:54,480 --> 00:57:56,160
your old key

1439
00:57:56,160 --> 00:57:59,119
and then you enter a 24 7 24 hour

1440
00:57:59,119 --> 00:58:01,359
staging period

1441
00:58:01,359 --> 00:58:04,000
next slide

1442
00:58:05,359 --> 00:58:07,680
then the time comes to activate your new

1443
00:58:07,680 --> 00:58:10,240
key and what happens then uh

1444
00:58:10,240 --> 00:58:13,440
in the current uh key role algorithm

1445
00:58:13,440 --> 00:58:14,880
process or

1446
00:58:14,880 --> 00:58:16,000
thing

1447
00:58:16,000 --> 00:58:17,839
is that you republish everything under

1448
00:58:17,839 --> 00:58:20,839
your new key so the roas i mean and

1449
00:58:20,839 --> 00:58:22,799
delegated uh certificates for for

1450
00:58:22,799 --> 00:58:24,720
grandchildren etc

1451
00:58:24,720 --> 00:58:25,920
um

1452
00:58:25,920 --> 00:58:27,920
and you remove them from the list of

1453
00:58:27,920 --> 00:58:29,680
objects that you publish under your old

1454
00:58:29,680 --> 00:58:32,000
key so there you just have a manifesto

1455
00:58:32,000 --> 00:58:33,760
crl left over

1456
00:58:33,760 --> 00:58:36,400
you can publish this in one go using a

1457
00:58:36,400 --> 00:58:38,319
multi-element

1458
00:58:38,319 --> 00:58:39,920
publication query

1459
00:58:39,920 --> 00:58:41,599
and this means that the relying parties

1460
00:58:41,599 --> 00:58:44,160
will also see it as one delta so they

1461
00:58:44,160 --> 00:58:46,079
will see

1462
00:58:46,079 --> 00:58:48,000
this as an atomic operation more or less

1463
00:58:48,000 --> 00:58:48,960
well

1464
00:58:48,960 --> 00:58:52,559
more this is true for rdp if you set up

1465
00:58:52,559 --> 00:58:54,640
rsync with the right

1466
00:58:54,640 --> 00:58:58,559
incantations this is also true for rsync

1467
00:58:58,559 --> 00:58:59,599
um

1468
00:58:59,599 --> 00:59:02,799
yeah and then finally

1469
00:59:02,799 --> 00:59:04,880
you will remove the old key so you will

1470
00:59:04,880 --> 00:59:06,880
ask the parent to revoke the certificate

1471
00:59:06,880 --> 00:59:08,799
for your old key and you can get rid of

1472
00:59:08,799 --> 00:59:10,880
the manifest in the serial and this can

1473
00:59:10,880 --> 00:59:13,599
be done immediately after the previous

1474
00:59:13,599 --> 00:59:16,079
one so it may not even be visible as two

1475
00:59:16,079 --> 00:59:19,599
separate steps to everybody looking

1476
00:59:19,599 --> 00:59:20,559
now

1477
00:59:20,559 --> 00:59:22,559
if we apply this to migrating

1478
00:59:22,559 --> 00:59:24,400
repositories

1479
00:59:24,400 --> 00:59:26,640
what we've done perhaps naively is just

1480
00:59:26,640 --> 00:59:29,040
you know let's just use a new repository

1481
00:59:29,040 --> 00:59:31,359
for the new key

1482
00:59:31,359 --> 00:59:33,040
and we follow the steps

1483
00:59:33,040 --> 00:59:35,599
as though we're a normal key role

1484
00:59:35,599 --> 00:59:37,920
so we have a

1485
00:59:37,920 --> 00:59:39,839
yeah here in the

1486
00:59:39,839 --> 00:59:43,359
off green color is the new repository

1487
00:59:43,359 --> 00:59:45,440
a new key we created new certificate we

1488
00:59:45,440 --> 00:59:48,000
got we published a manifesto

1489
00:59:48,000 --> 00:59:49,440
we

1490
00:59:49,440 --> 00:59:51,599
don't always wait 24 hours to be honest

1491
00:59:51,599 --> 00:59:52,720
but

1492
00:59:52,720 --> 00:59:54,160
we could

1493
00:59:54,160 --> 00:59:56,960
the next step is undertalk manually

1494
00:59:56,960 --> 00:59:58,240
and that's

1495
00:59:58,240 --> 01:00:00,720
just like any other system um

1496
01:00:00,720 --> 01:00:02,400
you know we activate a new key meaning

1497
01:00:02,400 --> 01:00:04,079
that we publish everything in the new

1498
01:00:04,079 --> 01:00:05,280
location

1499
01:00:05,280 --> 01:00:08,079
and and this i think we should change

1500
01:00:08,079 --> 01:00:10,160
we also immediately remove everything

1501
01:00:10,160 --> 01:00:11,599
from the old key because that's how the

1502
01:00:11,599 --> 01:00:13,760
normal key role works except in this

1503
01:00:13,760 --> 01:00:15,359
case

1504
01:00:15,359 --> 01:00:16,880
you wouldn't see this as one atomic

1505
01:00:16,880 --> 01:00:19,119
update because fetches are happening in

1506
01:00:19,119 --> 01:00:20,720
two different places so

1507
01:00:20,720 --> 01:00:22,160
you might

1508
01:00:22,160 --> 01:00:24,400
see no objects you might see both

1509
01:00:24,400 --> 01:00:27,359
objects at the same time

1510
01:00:27,359 --> 01:00:29,599
yeah or you might just see this which

1511
01:00:29,599 --> 01:00:32,720
would be the happy case of course um

1512
01:00:32,720 --> 01:00:34,480
so a question is and

1513
01:00:34,480 --> 01:00:36,799
i think maybe asking the question is ask

1514
01:00:36,799 --> 01:00:39,839
answering it is that you probably want

1515
01:00:39,839 --> 01:00:42,160
to keep objects in both locations for

1516
01:00:42,160 --> 01:00:44,720
some time before you know you you remove

1517
01:00:44,720 --> 01:00:46,640
them in the old location

1518
01:00:46,640 --> 01:00:49,440
um next please

1519
01:00:49,440 --> 01:00:51,920
then yeah the final step is easy once

1520
01:00:51,920 --> 01:00:54,559
that's all done you remove the alter

1521
01:00:54,559 --> 01:00:55,839
you ask for a revocation of your

1522
01:00:55,839 --> 01:00:57,280
certificate and you remove the the

1523
01:00:57,280 --> 01:00:59,520
objects associated with it

1524
01:00:59,520 --> 01:01:02,160
so that part should be relatively easy

1525
01:01:02,160 --> 01:01:05,440
um one thing to realize as well

1526
01:01:05,440 --> 01:01:06,400
um

1527
01:01:06,400 --> 01:01:08,240
i don't think any of the relying party

1528
01:01:08,240 --> 01:01:09,839
tools uh

1529
01:01:09,839 --> 01:01:12,319
treat aia other than informational so

1530
01:01:12,319 --> 01:01:15,760
they the back pointers let's say the

1531
01:01:15,760 --> 01:01:17,839
authority information access pointers

1532
01:01:17,839 --> 01:01:20,000
uris that are included in objects they

1533
01:01:20,000 --> 01:01:21,359
point back to where a certificate is

1534
01:01:21,359 --> 01:01:23,839
published now if that changes here then

1535
01:01:23,839 --> 01:01:26,000
that might flag some things

1536
01:01:26,000 --> 01:01:27,440
um

1537
01:01:27,440 --> 01:01:28,319
or

1538
01:01:28,319 --> 01:01:30,559
maybe we need to

1539
01:01:30,559 --> 01:01:31,839
look at the

1540
01:01:31,839 --> 01:01:35,880
provisioning protocol 649.6492

1541
01:01:36,720 --> 01:01:38,799
that essentially has text okay when a

1542
01:01:38,799 --> 01:01:40,400
child asks a parent like what are my

1543
01:01:40,400 --> 01:01:41,920
resource entitlements

1544
01:01:41,920 --> 01:01:43,520
essentially they get a response of these

1545
01:01:43,520 --> 01:01:45,760
are your entire resources this validity

1546
01:01:45,760 --> 01:01:47,920
time that may be applicable and by the

1547
01:01:47,920 --> 01:01:49,520
way this is the uri where your object

1548
01:01:49,520 --> 01:01:51,119
might be published

1549
01:01:51,119 --> 01:01:53,200
now if that changes maybe that should

1550
01:01:53,200 --> 01:01:56,079
also trigger that cas republish things

1551
01:01:56,079 --> 01:01:57,680
the downside of that is that you would

1552
01:01:57,680 --> 01:01:58,720
see

1553
01:01:58,720 --> 01:02:00,400
quite a lot of objects we published at

1554
01:02:00,400 --> 01:02:01,839
that time but i'm not sure that that is

1555
01:02:01,839 --> 01:02:04,640
actually a problem

1556
01:02:05,119 --> 01:02:07,680
last night i guess yeah so the question

1557
01:02:07,680 --> 01:02:10,079
would be really like okay i think we do

1558
01:02:10,079 --> 01:02:12,720
need to support this kind of thing

1559
01:02:12,720 --> 01:02:14,960
um i see at least one way that we could

1560
01:02:14,960 --> 01:02:16,079
improve it

1561
01:02:16,079 --> 01:02:18,160
but the more important question that i

1562
01:02:18,160 --> 01:02:19,680
would have to the group is do you agree

1563
01:02:19,680 --> 01:02:21,920
that we should perhaps document this and

1564
01:02:21,920 --> 01:02:24,240
try to standardize how one would go

1565
01:02:24,240 --> 01:02:27,520
about this this process

1566
01:02:27,520 --> 01:02:29,920
i'm done

1567
01:02:30,559 --> 01:02:33,880
yes please

1568
01:02:34,240 --> 01:02:36,319
questions from anybody else

1569
01:02:36,319 --> 01:02:38,480
sorry this is chris morrow as a regular

1570
01:02:38,480 --> 01:02:41,119
person yes please standardize

1571
01:02:41,119 --> 01:02:43,039
release document very well the migration

1572
01:02:43,039 --> 01:02:44,319
process

1573
01:02:44,319 --> 01:02:45,359
all right

1574
01:02:45,359 --> 01:02:50,160
and uh i'll send one to the list soonish

1575
01:02:54,319 --> 01:02:56,480
next up alexander

1576
01:02:56,480 --> 01:02:59,359
i think might be here no

1577
01:02:59,359 --> 01:03:03,440
no he's not here okay well hold on

1578
01:03:03,440 --> 01:03:05,200
i think i don't know do you want to do

1579
01:03:05,200 --> 01:03:07,440
that

1580
01:03:07,440 --> 01:03:10,480
okay i'll try to share my screen

1581
01:03:10,480 --> 01:03:15,000
or i'll try to use my select

1582
01:03:22,559 --> 01:03:25,559
um

1583
01:03:45,119 --> 01:03:48,079
so i'm gonna briefly check it

1584
01:03:48,079 --> 01:03:50,319
okay yeah

1585
01:03:50,319 --> 01:03:52,240
uh i will try to share my printing

1586
01:03:52,240 --> 01:03:54,720
because it's a outdated version of my

1587
01:03:54,720 --> 01:03:58,880
slides it's my fault uh

1588
01:03:58,880 --> 01:04:00,640
so if you can give me a chance to share

1589
01:04:00,640 --> 01:04:03,200
my screen

1590
01:04:08,160 --> 01:04:11,160
yes

1591
01:04:20,620 --> 01:04:23,679
[Music]

1592
01:04:35,520 --> 01:04:37,039
seems to be taking its sweet time there

1593
01:04:37,039 --> 01:04:39,440
like that do you want to

1594
01:04:39,440 --> 01:04:41,039
there you go

1595
01:04:41,039 --> 01:04:43,920
okay i hope you can see it

1596
01:04:43,920 --> 01:04:44,720
so

1597
01:04:44,720 --> 01:04:45,760
uh

1598
01:04:45,760 --> 01:04:48,559
once again hello everyone uh my name is

1599
01:04:48,559 --> 01:04:50,960
alexander asimov

1600
01:04:50,960 --> 01:04:52,799
and today i'm going to present a long

1601
01:04:52,799 --> 01:04:56,799
awaited update on asp documents

1602
01:04:56,799 --> 01:05:00,960
let's start with the profile document

1603
01:05:00,960 --> 01:05:03,119
so

1604
01:05:04,079 --> 01:05:06,720
in the version 7 and before

1605
01:05:06,720 --> 01:05:09,599
the spa object was defined as customer

1606
01:05:09,599 --> 01:05:10,480
is

1607
01:05:10,480 --> 01:05:13,039
with its provider list

1608
01:05:13,039 --> 01:05:15,440
it was expected that nasp will create

1609
01:05:15,440 --> 01:05:16,799
two objects

1610
01:05:16,799 --> 01:05:19,920
one for ipv4 oxy and another one for

1611
01:05:19,920 --> 01:05:23,440
ipv6 for this

1612
01:05:24,559 --> 01:05:25,680
in the

1613
01:05:25,680 --> 01:05:28,558
latest version

1614
01:05:31,710 --> 01:05:33,839
[Music]

1615
01:05:33,839 --> 01:05:35,039
in the latest

1616
01:05:35,039 --> 01:05:38,960
version this scheme was updated

1617
01:05:38,960 --> 01:05:41,599
now asp object carries not a list of

1618
01:05:41,599 --> 01:05:42,880
providers

1619
01:05:42,880 --> 01:05:46,400
but a list of lists where each item

1620
01:05:46,400 --> 01:05:49,359
contains a list of providers and may

1621
01:05:49,359 --> 01:05:51,839
contain address family

1622
01:05:51,839 --> 01:05:54,000
as far as i understand the idea was to

1623
01:05:54,000 --> 01:05:56,799
give a way to create a single object for

1624
01:05:56,799 --> 01:06:00,960
both ipv6 and ipv4 policies

1625
01:06:00,960 --> 01:06:03,760
it's true that a significant number of

1626
01:06:03,760 --> 01:06:05,520
networks uh

1627
01:06:05,520 --> 01:06:08,480
have the same set of providers in ipv4

1628
01:06:08,480 --> 01:06:10,319
and ipv6

1629
01:06:10,319 --> 01:06:13,440
and the process seems to be converging

1630
01:06:13,440 --> 01:06:15,200
towards this state

1631
01:06:15,200 --> 01:06:17,200
still there are networks who have

1632
01:06:17,200 --> 01:06:19,440
different policies in different address

1633
01:06:19,440 --> 01:06:21,039
families

1634
01:06:21,039 --> 01:06:24,000
so it presumes the opportunity to have

1635
01:06:24,000 --> 01:06:26,799
different policies in ipv4 and ipv6

1636
01:06:26,799 --> 01:06:28,559
while given a way to put

1637
01:06:28,559 --> 01:06:33,440
it all in one asp object

1638
01:06:33,440 --> 01:06:35,760
uh in my view

1639
01:06:35,760 --> 01:06:38,319
the same goal may have been achieved

1640
01:06:38,319 --> 01:06:40,240
with less changes just making the

1641
01:06:40,240 --> 01:06:42,559
address family option still

1642
01:06:42,559 --> 01:06:45,440
even these lightweight change is getting

1643
01:06:45,440 --> 01:06:48,559
into the same trap

1644
01:06:49,520 --> 01:06:52,319
it's the the level of router

1645
01:06:52,319 --> 01:06:54,480
we will have different

1646
01:06:54,480 --> 01:06:56,880
representation of ace pay record for

1647
01:06:56,880 --> 01:06:58,640
different address families

1648
01:06:58,640 --> 01:07:00,720
i can expect the click support to

1649
01:07:00,720 --> 01:07:02,960
navigate separately through the set of

1650
01:07:02,960 --> 01:07:06,240
ipv4 and ipv6 records

1651
01:07:06,240 --> 01:07:09,599
it's a the level of rtr protocol will

1652
01:07:09,599 --> 01:07:14,000
also have different asp pdu for ipv4 and

1653
01:07:14,000 --> 01:07:15,839
ipv6

1654
01:07:15,839 --> 01:07:16,799
for me

1655
01:07:16,799 --> 01:07:18,160
the last

1656
01:07:18,160 --> 01:07:20,000
sp object update

1657
01:07:20,000 --> 01:07:21,200
may break

1658
01:07:21,200 --> 01:07:23,760
expected behavior

1659
01:07:23,760 --> 01:07:26,079
by changing the object format during the

1660
01:07:26,079 --> 01:07:28,960
processing and may also complicate

1661
01:07:28,960 --> 01:07:31,440
debugging

1662
01:07:40,720 --> 01:07:43,720
uh

1663
01:07:44,400 --> 01:07:47,119
i checked the thread uh this morning and

1664
01:07:47,119 --> 01:07:50,160
uh if i'm not mistaken we have a perfect

1665
01:07:50,160 --> 01:07:51,280
split

1666
01:07:51,280 --> 01:07:52,720
through

1667
01:07:52,720 --> 01:07:55,839
although the new format have intercooked

1668
01:07:55,839 --> 01:07:58,480
testing on its side

1669
01:07:58,480 --> 01:08:00,880
i have a nasty feeling that profile

1670
01:08:00,880 --> 01:08:03,680
document and the new rtr document are

1671
01:08:03,680 --> 01:08:05,920
running in different directions and

1672
01:08:05,920 --> 01:08:08,400
running surprisingly fast and if we

1673
01:08:08,400 --> 01:08:11,200
don't converge uh the community will

1674
01:08:11,200 --> 01:08:12,559
know who to play

1675
01:08:12,559 --> 01:08:15,039
so let's try to discuss this topic

1676
01:08:15,039 --> 01:08:17,520
before jumping through the second part

1677
01:08:17,520 --> 01:08:20,479
how are we going to address this format

1678
01:08:20,479 --> 01:08:22,158
change with

1679
01:08:22,158 --> 01:08:26,158
uh 8210 these in the rfc editor queen

1680
01:08:26,158 --> 01:08:29,479
please advice

1681
01:08:42,158 --> 01:08:43,920
maybe ben

1682
01:08:43,920 --> 01:08:44,880
won't

1683
01:08:44,880 --> 01:08:48,359
go to the mic

1684
01:08:54,319 --> 01:08:56,560
then madison work online um

1685
01:08:56,560 --> 01:08:59,279
look i think i've probably said

1686
01:08:59,279 --> 01:09:00,719
better

1687
01:09:00,719 --> 01:09:02,719
i think i probably said everything that

1688
01:09:02,719 --> 01:09:04,158
i need to on the mailing list already

1689
01:09:04,158 --> 01:09:07,359
but to reiterate i think it's

1690
01:09:07,359 --> 01:09:09,198
less work for the rp

1691
01:09:09,198 --> 01:09:11,759
if there are fewer objects i think that

1692
01:09:11,759 --> 01:09:13,679
the overwhelmingly

1693
01:09:13,679 --> 01:09:15,679
more common case is that networks have

1694
01:09:15,679 --> 01:09:18,479
the same or very close to the same set

1695
01:09:18,479 --> 01:09:20,960
of transits in both address families

1696
01:09:20,960 --> 01:09:23,920
um and i think that for i think one of

1697
01:09:23,920 --> 01:09:25,279
the things that i tried to point out in

1698
01:09:25,279 --> 01:09:27,439
a recent email is that

1699
01:09:27,439 --> 01:09:29,679
i think that for an operator that's used

1700
01:09:29,679 --> 01:09:30,399
to

1701
01:09:30,399 --> 01:09:33,198
a user interface where it presents this

1702
01:09:33,198 --> 01:09:34,960
kind of a mental model

1703
01:09:34,960 --> 01:09:36,960
where the base assumption is that both

1704
01:09:36,960 --> 01:09:38,238
the dress family is the same

1705
01:09:38,238 --> 01:09:39,839
topologically

1706
01:09:39,839 --> 01:09:40,960
um

1707
01:09:40,960 --> 01:09:42,080
the day

1708
01:09:42,080 --> 01:09:44,238
that that operator then needs to go and

1709
01:09:44,238 --> 01:09:46,319
read one of these objects to see what's

1710
01:09:46,319 --> 01:09:48,479
actually being transmitted on the wire i

1711
01:09:48,479 --> 01:09:50,880
think it's much less surprising

1712
01:09:50,880 --> 01:09:54,000
if it doesn't diverge too much

1713
01:09:54,000 --> 01:09:57,120
from that mental model um

1714
01:09:57,120 --> 01:09:59,040
i think the other thing to point out is

1715
01:09:59,040 --> 01:10:00,640
that there's quite a lot that you know

1716
01:10:00,640 --> 01:10:02,400
there's been a lot of running

1717
01:10:02,400 --> 01:10:04,400
a lot of progress in

1718
01:10:04,400 --> 01:10:06,800
in new implementations over the last few

1719
01:10:06,800 --> 01:10:07,679
weeks

1720
01:10:07,679 --> 01:10:10,080
and all of those are based on the

1721
01:10:10,080 --> 01:10:12,320
version 8 profile um

1722
01:10:12,320 --> 01:10:14,320
i think rolling that back is quite a lot

1723
01:10:14,320 --> 01:10:16,239
of work for you know a fair number of

1724
01:10:16,239 --> 01:10:17,199
people

1725
01:10:17,199 --> 01:10:19,920
um so i'm quite strongly in favor of the

1726
01:10:19,920 --> 01:10:22,400
version age range

1727
01:10:22,400 --> 01:10:24,640
uh i have a question for you what are

1728
01:10:24,640 --> 01:10:27,120
you suggesting to do with rtr

1729
01:10:27,120 --> 01:10:31,679
specification that is

1730
01:10:31,679 --> 01:10:34,480
fortunately or unfortunately in the rfc

1731
01:10:34,480 --> 01:10:35,520
quick

1732
01:10:35,520 --> 01:10:38,880
that at the moment aspires understand

1733
01:10:38,880 --> 01:10:40,239
uh

1734
01:10:40,239 --> 01:10:42,400
was cooked for the previous version of

1735
01:10:42,400 --> 01:10:45,839
the object

1736
01:10:48,159 --> 01:10:50,719
we can make it to work with the new one

1737
01:10:50,719 --> 01:10:52,480
but it will be

1738
01:10:52,480 --> 01:10:56,080
may have a surprising specifics

1739
01:10:56,080 --> 01:10:57,199
so i

1740
01:10:57,199 --> 01:11:00,560
i don't think that there's

1741
01:11:00,560 --> 01:11:02,800
i mean certainly the two for the formats

1742
01:11:02,800 --> 01:11:06,800
in the rtr protocol and the the asn.1 do

1743
01:11:06,800 --> 01:11:08,480
diverge um

1744
01:11:08,480 --> 01:11:11,440
i don't feel like that's a huge problem

1745
01:11:11,440 --> 01:11:13,760
um i think that the the

1746
01:11:13,760 --> 01:11:17,120
i think that the the the overwhelming

1747
01:11:17,120 --> 01:11:18,400
um

1748
01:11:18,400 --> 01:11:20,000
the overwhelming consideration for the

1749
01:11:20,000 --> 01:11:22,239
rtr protocol is to make things as

1750
01:11:22,239 --> 01:11:24,320
convenient as possible for

1751
01:11:24,320 --> 01:11:27,199
routers to use it in policy decisions

1752
01:11:27,199 --> 01:11:29,120
and i think the existing format is you

1753
01:11:29,120 --> 01:11:30,800
know mostly fairly well suited to that

1754
01:11:30,800 --> 01:11:33,120
whether we do this translation when it

1755
01:11:33,120 --> 01:11:35,040
arrives at the router or when it's being

1756
01:11:35,040 --> 01:11:37,120
processed by the rp

1757
01:11:37,120 --> 01:11:39,600
i don't feel like that's

1758
01:11:39,600 --> 01:11:41,600
it's it it's not a non-issue but i think

1759
01:11:41,600 --> 01:11:44,080
that the the profile change can co-exist

1760
01:11:44,080 --> 01:11:45,760
with the existing

1761
01:11:45,760 --> 01:11:49,360
um rtr spec pretty comfortably

1762
01:11:49,360 --> 01:11:51,840
but don't you think that i'm sorry i'm

1763
01:11:51,840 --> 01:11:54,719
keeping you at the mic but

1764
01:11:54,719 --> 01:11:56,560
you are the person to blame for this

1765
01:11:56,560 --> 01:11:59,040
quick progress

1766
01:11:59,040 --> 01:12:01,519
no kidding

1767
01:12:01,600 --> 01:12:03,760
my question is that

1768
01:12:03,760 --> 01:12:05,199
okay we can

1769
01:12:05,199 --> 01:12:07,440
split to

1770
01:12:07,440 --> 01:12:10,000
we can say different policies at the

1771
01:12:10,000 --> 01:12:13,760
level of uh rpk cash i think that's what

1772
01:12:13,760 --> 01:12:15,280
you are suggesting

1773
01:12:15,280 --> 01:12:18,400
yeah that is what i'm suggesting but

1774
01:12:18,400 --> 01:12:19,920
don't you think that

1775
01:12:19,920 --> 01:12:22,560
the debugging can become really

1776
01:12:22,560 --> 01:12:25,440
complicated when you will be using three

1777
01:12:25,440 --> 01:12:27,920
at your router

1778
01:12:27,920 --> 01:12:30,960
asking for please show them give me the

1779
01:12:30,960 --> 01:12:32,880
information about what

1780
01:12:32,880 --> 01:12:36,000
base days are for selected address

1781
01:12:36,000 --> 01:12:38,960
family and after that you will you may

1782
01:12:38,960 --> 01:12:40,239
have problems

1783
01:12:40,239 --> 01:12:44,480
by building corresponding asp objects

1784
01:12:44,719 --> 01:12:46,480
in the

1785
01:12:46,480 --> 01:12:50,320
distributed of the other database yeah

1786
01:12:50,320 --> 01:12:51,120
so

1787
01:12:51,120 --> 01:12:53,360
i think you're right um but i think it

1788
01:12:53,360 --> 01:12:56,159
is i think it's inevitable that there's

1789
01:12:56,159 --> 01:12:57,360
a

1790
01:12:57,360 --> 01:12:59,360
the the

1791
01:12:59,360 --> 01:13:02,159
the kind of structure to use in kind of

1792
01:13:02,159 --> 01:13:04,320
provisioning tools and config management

1793
01:13:04,320 --> 01:13:05,840
tools

1794
01:13:05,840 --> 01:13:08,239
is inevitably different from what is

1795
01:13:08,239 --> 01:13:10,000
convenient for the router to store in

1796
01:13:10,000 --> 01:13:12,000
its internal data structures

1797
01:13:12,000 --> 01:13:13,679
and so that translation has to happen

1798
01:13:13,679 --> 01:13:15,840
somewhere and my feeling is that

1799
01:13:15,840 --> 01:13:16,880
probably the best place for that

1800
01:13:16,880 --> 01:13:19,679
translation to happen is the rp

1801
01:13:19,679 --> 01:13:22,640
because computer's cheap there and

1802
01:13:22,640 --> 01:13:24,719
my feeling is it's the least surprising

1803
01:13:24,719 --> 01:13:26,560
place for it to occur because you're

1804
01:13:26,560 --> 01:13:28,560
going from one protocol to another and

1805
01:13:28,560 --> 01:13:30,560
you're expecting there to be aggregation

1806
01:13:30,560 --> 01:13:32,000
and things like taking unions and

1807
01:13:32,000 --> 01:13:34,080
potentially multiple objects and you're

1808
01:13:34,080 --> 01:13:35,760
expecting there to be

1809
01:13:35,760 --> 01:13:40,080
structural process going on there anyway

1810
01:13:43,199 --> 01:13:45,290
did that make sense

1811
01:13:45,290 --> 01:13:47,120
[Music]

1812
01:13:47,120 --> 01:13:49,840
i still have a feeling because i'm

1813
01:13:49,840 --> 01:13:51,920
at the same time while you are i'll keep

1814
01:13:51,920 --> 01:13:54,320
keeping you at the mic i'm reading the

1815
01:13:54,320 --> 01:13:55,120
chat

1816
01:13:55,120 --> 01:13:56,159
uh

1817
01:13:56,159 --> 01:13:59,360
and i still have a feeling that

1818
01:13:59,360 --> 01:14:01,040
it's a group

1819
01:14:01,040 --> 01:14:03,120
of side errors we're not converging

1820
01:14:03,120 --> 01:14:04,800
because i see

1821
01:14:04,800 --> 01:14:06,080
that

1822
01:14:06,080 --> 01:14:07,360
randy bush

1823
01:14:07,360 --> 01:14:11,040
is still opposing the exchange and he's

1824
01:14:11,040 --> 01:14:14,719
authoring the rtr

1825
01:14:14,719 --> 01:14:17,280
i don't know how to make

1826
01:14:17,280 --> 01:14:20,559
everybody happy about

1827
01:14:21,760 --> 01:14:24,880
asp object style

1828
01:14:24,880 --> 01:14:27,040
maybe we should ask

1829
01:14:27,040 --> 01:14:28,560
the chairs to be more involved in the

1830
01:14:28,560 --> 01:14:30,960
process

1831
01:14:36,560 --> 01:14:38,320
i think i should sit down and give other

1832
01:14:38,320 --> 01:14:39,760
people a chance to offer their opinions

1833
01:14:39,760 --> 01:14:42,000
then

1834
01:14:42,000 --> 01:14:44,560
thank you man

1835
01:14:46,480 --> 01:14:49,679
um this is the concrete ncc uh we have

1836
01:14:49,679 --> 01:14:52,560
an internal implement

1837
01:14:53,280 --> 01:14:56,239
volume and height is okay now yeah okay

1838
01:14:56,239 --> 01:14:58,320
this cockpit ncc

1839
01:14:58,320 --> 01:14:59,920
we have an internal implementation of

1840
01:14:59,920 --> 01:15:02,000
the version 8

1841
01:15:02,000 --> 01:15:03,840
profile and i kind of elaborate here on

1842
01:15:03,840 --> 01:15:05,360
why i prefer

1843
01:15:05,360 --> 01:15:08,840
the version 7 profile in hindsight

1844
01:15:08,840 --> 01:15:12,159
um in the end the user interface that

1845
01:15:12,159 --> 01:15:14,640
people will present may or may not align

1846
01:15:14,640 --> 01:15:16,560
very closely to the objects that

1847
01:15:16,560 --> 01:15:19,040
people create um

1848
01:15:19,040 --> 01:15:20,239
it's all about making sure that the

1849
01:15:20,239 --> 01:15:21,840
right objects are

1850
01:15:21,840 --> 01:15:23,840
created and that there's no confusion in

1851
01:15:23,840 --> 01:15:25,600
these objects themselves and what we

1852
01:15:25,600 --> 01:15:27,520
realized after implementing this what

1853
01:15:27,520 --> 01:15:29,360
was that we

1854
01:15:29,360 --> 01:15:31,280
could create a lot of edge cases in the

1855
01:15:31,280 --> 01:15:34,159
content of the version 8

1856
01:15:34,159 --> 01:15:36,239
profile where the content semantically

1857
01:15:36,239 --> 01:15:37,679
overlaps and you need to take a union

1858
01:15:37,679 --> 01:15:39,520
there within the object

1859
01:15:39,520 --> 01:15:42,239
and uh covering this with a

1860
01:15:42,239 --> 01:15:44,800
proper uh a proper set of test objects

1861
01:15:44,800 --> 01:15:47,360
was just very hard or test cases

1862
01:15:47,360 --> 01:15:50,159
and that's the main reason i prefer the

1863
01:15:50,159 --> 01:15:51,840
the version seven

1864
01:15:51,840 --> 01:15:53,040
object

1865
01:15:53,040 --> 01:15:55,120
even though

1866
01:15:55,120 --> 01:15:56,719
i really like the idea of having a

1867
01:15:56,719 --> 01:15:57,840
single

1868
01:15:57,840 --> 01:16:01,520
signed object per as

1869
01:16:01,520 --> 01:16:04,159
but i'm just afraid that covering all

1870
01:16:04,159 --> 01:16:06,800
these cases where v4 v6 overlap or not

1871
01:16:06,800 --> 01:16:08,159
uh

1872
01:16:08,159 --> 01:16:09,920
could lead to yeah interesting edge

1873
01:16:09,920 --> 01:16:12,960
cases and implementations

1874
01:16:13,520 --> 01:16:17,600
okay i'll take it as a point for the

1875
01:16:17,600 --> 01:16:21,600
whole version of a speed or sbo

1876
01:16:26,960 --> 01:16:29,260
would you go folk

1877
01:16:29,260 --> 01:16:31,120
[Music]

1878
01:16:31,120 --> 01:16:34,320
i failed to really

1879
01:16:34,320 --> 01:16:36,480
track the mailing list for a couple of

1880
01:16:36,480 --> 01:16:39,600
months and i'm sorry i did not raise my

1881
01:16:39,600 --> 01:16:41,199
voice earlier

1882
01:16:41,199 --> 01:16:43,360
but look at

1883
01:16:43,360 --> 01:16:44,560
the

1884
01:16:44,560 --> 01:16:47,360
proposed

1885
01:16:47,360 --> 01:16:49,840
change of the profile

1886
01:16:49,840 --> 01:16:51,679
uh well okay

1887
01:16:51,679 --> 01:16:54,400
uh a very superficial

1888
01:16:54,400 --> 01:16:57,920
look at it says o7 looks

1889
01:16:57,920 --> 01:17:00,320
much less complex than

1890
01:17:00,320 --> 01:17:01,600
o8

1891
01:17:01,600 --> 01:17:03,280
straight forward

1892
01:17:03,280 --> 01:17:05,679
and

1893
01:17:05,840 --> 01:17:07,360
i guess

1894
01:17:07,360 --> 01:17:10,159
some of the complications that tees was

1895
01:17:10,159 --> 01:17:11,920
mentioning

1896
01:17:11,920 --> 01:17:13,840
is related

1897
01:17:13,840 --> 01:17:17,840
to the more complex data structure

1898
01:17:20,400 --> 01:17:22,719
on the other hand my understanding is

1899
01:17:22,719 --> 01:17:23,679
that

1900
01:17:23,679 --> 01:17:25,679
actually

1901
01:17:25,679 --> 01:17:28,800
a more complex data structure

1902
01:17:28,800 --> 01:17:30,800
is not used

1903
01:17:30,800 --> 01:17:34,159
in any significant way to express more

1904
01:17:34,159 --> 01:17:37,040
functionality

1905
01:17:37,199 --> 01:17:40,080
kind of yes there is yeah there is a

1906
01:17:40,080 --> 01:17:42,239
possibility to add a third and the

1907
01:17:42,239 --> 01:17:45,600
fourth afi

1908
01:17:45,600 --> 01:17:46,960
and

1909
01:17:46,960 --> 01:17:49,360
there is

1910
01:17:49,360 --> 01:17:52,719
the complexity that tees was

1911
01:17:52,719 --> 01:17:54,560
pointing to

1912
01:17:54,560 --> 01:17:56,560
and well okay kind of

1913
01:17:56,560 --> 01:18:00,640
i uh just from that

1914
01:18:00,640 --> 01:18:02,960
i'm quite certainly

1915
01:18:02,960 --> 01:18:07,040
uh not happy about moving to a uh

1916
01:18:07,040 --> 01:18:09,050
08

1917
01:18:09,050 --> 01:18:11,600
[Music]

1918
01:18:11,600 --> 01:18:14,000
in my first understanding

1919
01:18:14,000 --> 01:18:17,679
i was expecting that the work on 8210

1920
01:18:17,679 --> 01:18:19,120
bis

1921
01:18:19,120 --> 01:18:21,600
would not have to be redone

1922
01:18:21,600 --> 01:18:23,760
to fit the

1923
01:18:23,760 --> 01:18:26,800
which is adding more complexity to the

1924
01:18:26,800 --> 01:18:28,159
whole system

1925
01:18:28,159 --> 01:18:30,080
because

1926
01:18:30,080 --> 01:18:31,520
if you have

1927
01:18:31,520 --> 01:18:33,040
different

1928
01:18:33,040 --> 01:18:35,280
presentation

1929
01:18:35,280 --> 01:18:37,840
of the in data structures

1930
01:18:37,840 --> 01:18:38,800
for

1931
01:18:38,800 --> 01:18:42,480
essentially the same content

1932
01:18:42,480 --> 01:18:44,718
uh

1933
01:18:45,120 --> 01:18:48,000
kind of that means there are there is

1934
01:18:48,000 --> 01:18:50,880
translation there is there is there

1935
01:18:50,880 --> 01:18:53,520
there are translations necessary

1936
01:18:53,520 --> 01:18:56,239
and that's more complexity in the damned

1937
01:18:56,239 --> 01:18:57,520
system

1938
01:18:57,520 --> 01:19:01,840
than if you just can't straight copy

1939
01:19:01,840 --> 01:19:02,330
um

1940
01:19:02,330 --> 01:19:05,369
[Music]

1941
01:19:07,040 --> 01:19:08,719
i'm

1942
01:19:08,719 --> 01:19:09,520
for

1943
01:19:09,520 --> 01:19:13,120
for the question whether we are actually

1944
01:19:13,120 --> 01:19:15,120
delaying

1945
01:19:15,120 --> 01:19:20,320
uh creation of the operational system

1946
01:19:20,840 --> 01:19:26,159
um uh i would think well okay if uh uh

1947
01:19:26,159 --> 01:19:27,600
a rerun

1948
01:19:27,600 --> 01:19:30,960
of 8210 bis is required

1949
01:19:30,960 --> 01:19:35,960
i would strictly oppose the idea

1950
01:19:37,920 --> 01:19:42,000
moving on on eight on o8

1951
01:19:42,000 --> 01:19:42,540
um

1952
01:19:42,540 --> 01:19:44,239
[Music]

1953
01:19:44,239 --> 01:19:48,560
i'm very unhappy about added complexity

1954
01:19:48,560 --> 01:19:51,840
i don't see real good reason for it and

1955
01:19:51,840 --> 01:19:55,040
for those who are saying well okay

1956
01:19:55,040 --> 01:19:59,040
lower complexity for the user interface

1957
01:19:59,040 --> 01:20:02,800
which actually is another presentation

1958
01:20:02,800 --> 01:20:07,040
of the same of the same content

1959
01:20:07,520 --> 01:20:09,360
well okay

1960
01:20:09,360 --> 01:20:11,599
uh

1961
01:20:11,840 --> 01:20:14,080
ten years back we would have had a

1962
01:20:14,080 --> 01:20:15,920
situation where

1963
01:20:15,920 --> 01:20:19,120
the afis usually would not align very

1964
01:20:19,120 --> 01:20:21,040
well

1965
01:20:21,040 --> 01:20:25,520
and if they align at this point in time

1966
01:20:25,520 --> 01:20:28,080
this does not mean that it's going to

1967
01:20:28,080 --> 01:20:31,040
stay this way

1968
01:20:31,520 --> 01:20:34,080
so kind of the argument well okay we are

1969
01:20:34,080 --> 01:20:36,080
making people happier uh

1970
01:20:36,080 --> 01:20:37,120
for

1971
01:20:37,120 --> 01:20:39,520
for just this time this is

1972
01:20:39,520 --> 01:20:42,800
just a temporary argument

1973
01:20:42,800 --> 01:20:45,120
and i don't really buy it

1974
01:20:45,120 --> 01:20:47,440
but kind of

1975
01:20:47,440 --> 01:20:51,280
my highest concern is that i do not want

1976
01:20:51,280 --> 01:20:53,840
to see development of the operational

1977
01:20:53,840 --> 01:20:55,440
system

1978
01:20:55,440 --> 01:20:57,440
being delayed

1979
01:20:57,440 --> 01:20:59,120
but complexity

1980
01:20:59,120 --> 01:21:02,239
is is going to have cost and should be

1981
01:21:02,239 --> 01:21:06,959
avoided and not unnecessarily introduced

1982
01:21:12,800 --> 01:21:15,600
randy bush

1983
01:21:18,880 --> 01:21:19,920
first

1984
01:21:19,920 --> 01:21:23,020
[Music]

1985
01:21:30,630 --> 01:21:37,619
[Music]

1986
01:21:39,199 --> 01:21:42,919
your audio is

1987
01:21:44,000 --> 01:21:46,719
randy you have a really bad voice

1988
01:21:46,719 --> 01:21:49,719
synthesizer

1989
01:21:57,120 --> 01:22:00,320
do you want to try one more time

1990
01:22:04,080 --> 01:22:05,520
okay

1991
01:22:05,520 --> 01:22:08,159
sorry randy

1992
01:22:08,320 --> 01:22:10,239
okay you pop back into the mic queue

1993
01:22:10,239 --> 01:22:14,960
when you're ready uh but i think tim

1994
01:22:14,960 --> 01:22:17,920
and then warren and ben

1995
01:22:17,920 --> 01:22:21,840
yeah so uh hi yeah tim gonzalez

1996
01:22:21,840 --> 01:22:23,440
um

1997
01:22:23,440 --> 01:22:25,040
i guess i'm partly to blame for all of

1998
01:22:25,040 --> 01:22:27,280
this because i think this discussion

1999
01:22:27,280 --> 01:22:29,760
started last year sometime november

2000
01:22:29,760 --> 01:22:32,320
december

2001
01:22:33,120 --> 01:22:33,920
um

2002
01:22:33,920 --> 01:22:36,960
and um i think it started with a desire

2003
01:22:36,960 --> 01:22:39,840
to use a blast space

2004
01:22:39,840 --> 01:22:40,880
even

2005
01:22:40,880 --> 01:22:42,960
and this

2006
01:22:42,960 --> 01:22:46,560
afi limit actually came to be

2007
01:22:46,560 --> 01:22:48,480
as a an additional thought in the

2008
01:22:48,480 --> 01:22:51,360
process so the first proposal that i did

2009
01:22:51,360 --> 01:22:54,560
then was that we would have a single

2010
01:22:54,560 --> 01:22:56,560
as object with

2011
01:22:56,560 --> 01:22:58,080
two distinct

2012
01:22:58,080 --> 01:23:01,120
lists for each address family then the

2013
01:23:01,120 --> 01:23:03,360
address family limit was introduced as a

2014
01:23:03,360 --> 01:23:06,239
way to compress that even further and

2015
01:23:06,239 --> 01:23:08,560
then the idea came to be that this might

2016
01:23:08,560 --> 01:23:10,400
actually reflect better what people want

2017
01:23:10,400 --> 01:23:12,400
to do

2018
01:23:12,400 --> 01:23:14,719
all in all this can express exactly the

2019
01:23:14,719 --> 01:23:17,280
same kind of data as you know you can

2020
01:23:17,280 --> 01:23:19,440
express now with the with this o7

2021
01:23:19,440 --> 01:23:20,880
protocol so

2022
01:23:20,880 --> 01:23:22,480
in that sense

2023
01:23:22,480 --> 01:23:24,639
it is really a matter of preference and

2024
01:23:24,639 --> 01:23:26,880
i think it's something that we can you

2025
01:23:26,880 --> 01:23:29,120
know keep on discussing until

2026
01:23:29,120 --> 01:23:30,880
you know well how did they say the cows

2027
01:23:30,880 --> 01:23:32,000
come home

2028
01:23:32,000 --> 01:23:35,679
and i want a second what um rudiger said

2029
01:23:35,679 --> 01:23:37,120
i would really

2030
01:23:37,120 --> 01:23:39,440
hate for that discussion to

2031
01:23:39,440 --> 01:23:42,639
delay deployment and experience with uh

2032
01:23:42,639 --> 01:23:44,320
with aspa

2033
01:23:44,320 --> 01:23:46,880
so if it comes to that then

2034
01:23:46,880 --> 01:23:48,719
i am quite willing to

2035
01:23:48,719 --> 01:23:50,320
change my implementation to follow

2036
01:23:50,320 --> 01:23:51,840
whatever

2037
01:23:51,840 --> 01:23:55,760
profile is in the end acceptable

2038
01:23:55,760 --> 01:23:57,760
so that's what i wanted to have said

2039
01:23:57,760 --> 01:23:59,440
to comment on the

2040
01:23:59,440 --> 01:24:01,280
data format versus

2041
01:24:01,280 --> 01:24:03,520
8210 this

2042
01:24:03,520 --> 01:24:05,040
i think there's prior art there i mean

2043
01:24:05,040 --> 01:24:06,800
if you look at roas

2044
01:24:06,800 --> 01:24:08,960
you can have multiple prefixes in a

2045
01:24:08,960 --> 01:24:10,560
single robot object

2046
01:24:10,560 --> 01:24:12,639
you don't get this structure in your

2047
01:24:12,639 --> 01:24:14,480
router you actually have to

2048
01:24:14,480 --> 01:24:16,639
validate multiple robo objects and make

2049
01:24:16,639 --> 01:24:18,400
a union of everything

2050
01:24:18,400 --> 01:24:20,159
and then

2051
01:24:20,159 --> 01:24:21,280
and then

2052
01:24:21,280 --> 01:24:24,000
that is what gets sent to the router and

2053
01:24:24,000 --> 01:24:27,040
similarly whatever the profile is this

2054
01:24:27,040 --> 01:24:28,480
translation can happen at different

2055
01:24:28,480 --> 01:24:30,719
levels it can happen

2056
01:24:30,719 --> 01:24:32,480
in the rp as it is currently done for

2057
01:24:32,480 --> 01:24:34,159
rawas already

2058
01:24:34,159 --> 01:24:36,719
and yeah it can also happen in the ui

2059
01:24:36,719 --> 01:24:37,840
where

2060
01:24:37,840 --> 01:24:40,000
obviously i can present users with an

2061
01:24:40,000 --> 01:24:41,679
interface that allows them to provide a

2062
01:24:41,679 --> 01:24:42,800
common list

2063
01:24:42,800 --> 01:24:44,719
and then my software can work out how to

2064
01:24:44,719 --> 01:24:46,480
make two distinct lists of that it's

2065
01:24:46,480 --> 01:24:48,639
trivial for me as well to do that

2066
01:24:48,639 --> 01:24:50,000
so

2067
01:24:50,000 --> 01:24:51,440
yeah i don't know if

2068
01:24:51,440 --> 01:24:53,040
any of this is bringing it closer to a

2069
01:24:53,040 --> 01:24:55,440
solution but i guess my main message is

2070
01:24:55,440 --> 01:24:57,120
that

2071
01:24:57,120 --> 01:25:00,480
you know i just want this to work

2072
01:25:04,239 --> 01:25:07,638
try for randy

2073
01:25:15,520 --> 01:25:18,480
one two three one two three

2074
01:25:18,480 --> 01:25:20,239
any better good

2075
01:25:20,239 --> 01:25:24,239
better oh is that a bugger feature

2076
01:25:24,239 --> 01:25:25,679
first of all

2077
01:25:25,679 --> 01:25:28,000
what's presented to the user and the gui

2078
01:25:28,000 --> 01:25:31,120
is arbitrary in either of these schemes

2079
01:25:31,120 --> 01:25:32,719
you can present

2080
01:25:32,719 --> 01:25:35,520
separate or joined in the gui makes no

2081
01:25:35,520 --> 01:25:36,880
difference

2082
01:25:36,880 --> 01:25:39,600
what is on the wire is

2083
01:25:39,600 --> 01:25:43,040
almost never seen by the operator a few

2084
01:25:43,040 --> 01:25:46,639
x 509 geeks actually look to the garbage

2085
01:25:46,639 --> 01:25:49,360
on the wire

2086
01:25:50,080 --> 01:25:51,760
when i want to see

2087
01:25:51,760 --> 01:25:52,880
what's

2088
01:25:52,880 --> 01:25:55,000
being published i don't look in the

2089
01:25:55,000 --> 01:25:58,159
repository i don't look on the wire i

2090
01:25:58,159 --> 01:26:00,639
look in my router because that's where

2091
01:26:00,639 --> 01:26:03,760
the rubber meets the road

2092
01:26:03,760 --> 01:26:04,719
okay

2093
01:26:04,719 --> 01:26:07,199
what is in the router

2094
01:26:07,199 --> 01:26:10,400
is going to separate v4 and v6 because

2095
01:26:10,400 --> 01:26:13,520
that's what happens in routers thank you

2096
01:26:13,520 --> 01:26:17,280
steve dearing and bob hinden

2097
01:26:17,840 --> 01:26:19,360
the

2098
01:26:19,360 --> 01:26:21,600
8210

2099
01:26:21,600 --> 01:26:23,920
bis

2100
01:26:24,480 --> 01:26:25,600
change

2101
01:26:25,600 --> 01:26:27,679
while technically

2102
01:26:27,679 --> 01:26:29,679
procedurally possible

2103
01:26:29,679 --> 01:26:31,199
is

2104
01:26:31,199 --> 01:26:33,920
not what we want to do because we want

2105
01:26:33,920 --> 01:26:37,679
to keep the burden of any hacks

2106
01:26:37,679 --> 01:26:39,120
north

2107
01:26:39,120 --> 01:26:42,159
of the router the whole purpose of 8210

2108
01:26:42,159 --> 01:26:44,800
is to get the load minimize the load on

2109
01:26:44,800 --> 01:26:48,080
the router and the router chooses

2110
01:26:48,080 --> 01:26:52,239
choose up six and four separately

2111
01:26:52,719 --> 01:26:55,440
lastly like it or not

2112
01:26:55,440 --> 01:26:58,960
v4 and v6 topologies are not

2113
01:26:58,960 --> 01:27:01,120
congruent

2114
01:27:01,120 --> 01:27:02,960
we wish they were

2115
01:27:02,960 --> 01:27:05,440
we've wished they were for 20 years

2116
01:27:05,440 --> 01:27:08,159
they're not yet this is especially seen

2117
01:27:08,159 --> 01:27:12,080
in asia but it occurs here today

2118
01:27:12,080 --> 01:27:15,520
all this air any operator on

2119
01:27:15,520 --> 01:27:17,440
me in this meeting

2120
01:27:17,440 --> 01:27:21,440
who actually uses multi-protocol bgp so

2121
01:27:21,440 --> 01:27:24,560
that they have v4 and v6 in a single

2122
01:27:24,560 --> 01:27:26,560
configuration

2123
01:27:26,560 --> 01:27:29,120
configured session with their peer

2124
01:27:29,120 --> 01:27:31,120
or is it like all the rest of us that we

2125
01:27:31,120 --> 01:27:33,199
have separate sessions

2126
01:27:33,199 --> 01:27:36,560
for v4 and v6 it's not pretty

2127
01:27:36,560 --> 01:27:40,239
it's just reality

2128
01:27:40,400 --> 01:27:43,719
thank you

2129
01:27:46,400 --> 01:27:49,760
thank you and warren kumari relaying a

2130
01:27:49,760 --> 01:27:52,239
um comment from rob

2131
01:27:52,239 --> 01:27:54,480
stillmore yeah i can't read and look at

2132
01:27:54,480 --> 01:27:55,760
the same time

2133
01:27:55,760 --> 01:27:58,639
so i'm extreme oh thank you ridika i'm

2134
01:27:58,639 --> 01:28:00,639
extremely uncomfortable with requiring

2135
01:28:00,639 --> 01:28:02,320
transit on different atheists to be in

2136
01:28:02,320 --> 01:28:04,080
the same path when he damn well know

2137
01:28:04,080 --> 01:28:06,080
that sometimes they are not maybe i

2138
01:28:06,080 --> 01:28:08,639
misunderstood the question

2139
01:28:08,639 --> 01:28:10,560
chaor is looking confused i can read

2140
01:28:10,560 --> 01:28:11,840
that again

2141
01:28:11,840 --> 01:28:13,840
i am extremely uncomfortable with

2142
01:28:13,840 --> 01:28:16,560
requiring transit on different afi's to

2143
01:28:16,560 --> 01:28:18,800
be on the same path when we damn well

2144
01:28:18,800 --> 01:28:20,719
know that sometimes they are not maybe i

2145
01:28:20,719 --> 01:28:24,440
misunderstood the question

2146
01:28:31,600 --> 01:28:34,560
i'm not getting it

2147
01:28:34,880 --> 01:28:37,679
if somebody can help me

2148
01:28:37,679 --> 01:28:41,560
please go ahead

2149
01:28:44,960 --> 01:28:46,000
it sounds like a lot of this

2150
01:28:46,000 --> 01:28:47,840
conversation should be on the mailing

2151
01:28:47,840 --> 01:28:49,760
list probably it would be easier to

2152
01:28:49,760 --> 01:28:51,520
reason about it that way also just

2153
01:28:51,520 --> 01:28:53,440
remember please of course code of

2154
01:28:53,440 --> 01:28:56,560
contact on the mailing list applies uh

2155
01:28:56,560 --> 01:28:57,520
ben

2156
01:28:57,520 --> 01:28:59,199
just the last thing i mean mostly in

2157
01:28:59,199 --> 01:29:02,559
response to what rudiger was saying is

2158
01:29:03,199 --> 01:29:04,880
better yeah

2159
01:29:04,880 --> 01:29:05,840
um

2160
01:29:05,840 --> 01:29:08,320
i don't think that we're

2161
01:29:08,320 --> 01:29:10,320
arguing here about more or less less

2162
01:29:10,320 --> 01:29:12,880
complexity

2163
01:29:12,880 --> 01:29:14,560
in the system as a whole i think we're

2164
01:29:14,560 --> 01:29:15,679
mostly talking about where that

2165
01:29:15,679 --> 01:29:17,120
complexity should be that should be

2166
01:29:17,120 --> 01:29:18,400
dealt with um

2167
01:29:18,400 --> 01:29:20,000
[Music]

2168
01:29:20,000 --> 01:29:22,080
i don't think that any of this need to

2169
01:29:22,080 --> 01:29:24,320
be a showstopper and my priority in all

2170
01:29:24,320 --> 01:29:25,600
of this really is to try and get some

2171
01:29:25,600 --> 01:29:27,600
running code out the door and into

2172
01:29:27,600 --> 01:29:28,719
production

2173
01:29:28,719 --> 01:29:30,400
sooner rather than later because i think

2174
01:29:30,400 --> 01:29:31,760
this is

2175
01:29:31,760 --> 01:29:33,920
this is a technology that we

2176
01:29:33,920 --> 01:29:36,960
have wanted for a long time and

2177
01:29:36,960 --> 01:29:38,800
you know we we should prioritize trying

2178
01:29:38,800 --> 01:29:40,400
to get it deployable as soon as possible

2179
01:29:40,400 --> 01:29:44,159
rather than arguing about the details

2180
01:29:50,320 --> 01:29:53,840
okay there's still three people in

2181
01:29:53,840 --> 01:29:55,520
alexander go

2182
01:29:55,520 --> 01:29:57,920
ah there are uh three people in the uh

2183
01:29:57,920 --> 01:30:01,120
in the queen okay okay um

2184
01:30:01,120 --> 01:30:02,320
there's two warren needs to take his

2185
01:30:02,320 --> 01:30:03,360
hand down if he's not going to say

2186
01:30:03,360 --> 01:30:06,800
something i see i say sorry same for tim

2187
01:30:06,800 --> 01:30:08,719
nope okay tim's all done good it's all

2188
01:30:08,719 --> 01:30:11,600
in you alex go

2189
01:30:12,320 --> 01:30:13,600
so um

2190
01:30:13,600 --> 01:30:15,760
i'm not uh

2191
01:30:15,760 --> 01:30:17,920
so the person to announce

2192
01:30:17,920 --> 01:30:20,560
that we have reached consensus here

2193
01:30:20,560 --> 01:30:21,520
uh

2194
01:30:21,520 --> 01:30:24,080
hopefully

2195
01:30:24,159 --> 01:30:26,799
i believe that

2196
01:30:27,199 --> 01:30:29,440
getting back in the form of

2197
01:30:29,440 --> 01:30:30,719
zero seven

2198
01:30:30,719 --> 01:30:32,320
can simplify

2199
01:30:32,320 --> 01:30:34,000
the process if i

2200
01:30:34,000 --> 01:30:35,760
want to move faster

2201
01:30:35,760 --> 01:30:37,679
maybe it's the best way especially

2202
01:30:37,679 --> 01:30:40,560
taking into account the comments of one

2203
01:30:40,560 --> 01:30:44,719
of the implementers who was saying that

2204
01:30:44,960 --> 01:30:48,800
there are a huge amount of tests and the

2205
01:30:48,800 --> 01:30:51,199
format is getting complicated

2206
01:30:51,199 --> 01:30:52,239
uh

2207
01:30:52,239 --> 01:30:54,320
i will i'm not one of the implementers

2208
01:30:54,320 --> 01:30:55,840
so i can't

2209
01:30:55,840 --> 01:30:58,800
comment further but

2210
01:30:58,800 --> 01:31:00,719
my personal view

2211
01:31:00,719 --> 01:31:03,840
is that uh zero seven

2212
01:31:03,840 --> 01:31:06,880
is simple and so it's uh can fly faster

2213
01:31:06,880 --> 01:31:08,639
than zero eight

2214
01:31:08,639 --> 01:31:11,120
okay uh but nevertheless let's keep this

2215
01:31:11,120 --> 01:31:13,199
discussion in demand at least i will try

2216
01:31:13,199 --> 01:31:15,440
to summarize it uh after the meeting

2217
01:31:15,440 --> 01:31:17,120
ends and

2218
01:31:17,120 --> 01:31:19,840
as i have only 15 minutes left let's

2219
01:31:19,840 --> 01:31:23,679
move forward to the second document

2220
01:31:23,679 --> 01:31:26,320
and it's about verification and it's

2221
01:31:26,320 --> 01:31:27,920
also suffered a lot of

2222
01:31:27,920 --> 01:31:29,360
changes

2223
01:31:29,360 --> 01:31:32,040
the more changes were devoted to

2224
01:31:32,040 --> 01:31:35,199
generalization upstream and downstream

2225
01:31:35,199 --> 01:31:36,400
procedures

2226
01:31:36,400 --> 01:31:38,719
for this purpose we will define new

2227
01:31:38,719 --> 01:31:40,320
index types

2228
01:31:40,320 --> 01:31:43,440
first one is invalid index which is a

2229
01:31:43,440 --> 01:31:44,800
minimal index

2230
01:31:44,800 --> 01:31:46,159
for which

2231
01:31:46,159 --> 01:31:47,280
is

2232
01:31:47,280 --> 01:31:49,760
with index i have no

2233
01:31:49,760 --> 01:31:51,360
not authorized

2234
01:31:51,360 --> 01:31:53,840
next is to be its provider

2235
01:31:53,840 --> 01:31:54,960
we also

2236
01:31:54,960 --> 01:31:58,239
defined a reversed embedded index that

2237
01:31:58,239 --> 01:32:00,880
is calculated the same way but for the

2238
01:32:00,880 --> 01:32:03,760
reverse highest part

2239
01:32:03,760 --> 01:32:05,280
let's see how

2240
01:32:05,280 --> 01:32:06,960
these

2241
01:32:06,960 --> 01:32:10,639
indexes help to detect problems

2242
01:32:10,639 --> 01:32:13,520
for prefixes that are received by ear

2243
01:32:13,520 --> 01:32:16,400
provider route server route server

2244
01:32:16,400 --> 01:32:19,120
client the rule is very simple

2245
01:32:19,120 --> 01:32:22,239
the inverted index defines the length of

2246
01:32:22,239 --> 01:32:24,880
the first upstream segment

2247
01:32:24,880 --> 01:32:28,320
and in the case of a correct path it

2248
01:32:28,320 --> 01:32:31,199
should be equal to the length of this

2249
01:32:31,199 --> 01:32:33,040
path

2250
01:32:33,040 --> 01:32:35,440
from this we can get a simple rule if

2251
01:32:35,440 --> 01:32:37,360
invalid index

2252
01:32:37,360 --> 01:32:39,840
is less

2253
01:32:39,840 --> 01:32:42,080
the length of ice path

2254
01:32:42,080 --> 01:32:44,800
it's roughly

2255
01:32:44,800 --> 01:32:50,000
ah it's important to know that uh

2256
01:32:50,000 --> 01:32:52,480
leak detection at ice

2257
01:32:52,480 --> 01:32:54,480
by route server and transfer a third

2258
01:32:54,480 --> 01:32:57,840
client is not a special case anymore

2259
01:32:57,840 --> 01:32:59,760
in the profile document document we

2260
01:32:59,760 --> 01:33:02,639
added that if a route server is not

2261
01:33:02,639 --> 01:33:05,600
transparent it must be added in the list

2262
01:33:05,600 --> 01:33:06,960
of providers

2263
01:33:06,960 --> 01:33:10,159
with this all parties at the eyes are

2264
01:33:10,159 --> 01:33:12,719
entitled to use upstream verification

2265
01:33:12,719 --> 01:33:15,840
procedure that we discussed just

2266
01:33:15,840 --> 01:33:18,159
above

2267
01:33:18,159 --> 01:33:21,120
now detection of problem flips that are

2268
01:33:21,120 --> 01:33:24,080
coming from private

2269
01:33:24,080 --> 01:33:25,840
the correct

2270
01:33:25,840 --> 01:33:29,199
downstream path may contain the upstream

2271
01:33:29,199 --> 01:33:32,239
segment and downstream segment

2272
01:33:32,239 --> 01:33:33,360
the

2273
01:33:33,360 --> 01:33:35,920
invalid and reverse invalid indexes

2274
01:33:35,920 --> 01:33:38,639
define their length respectively

2275
01:33:38,639 --> 01:33:41,679
so to detect roughly we need to check

2276
01:33:41,679 --> 01:33:45,280
that the zoom of invalid indexes is less

2277
01:33:45,280 --> 01:33:47,520
than highest path length

2278
01:33:47,520 --> 01:33:50,239
for me it looks fairly simple now let's

2279
01:33:50,239 --> 01:33:53,360
discuss the unknowns

2280
01:33:53,360 --> 01:33:55,360
in the previous versions of the document

2281
01:33:55,360 --> 01:33:58,320
the unknown path was defined as the path

2282
01:33:58,320 --> 01:33:59,120
but

2283
01:33:59,120 --> 01:34:01,520
that has a common system

2284
01:34:01,520 --> 01:34:04,639
that don't have psp record

2285
01:34:04,639 --> 01:34:07,199
with comments from sri ram and yara the

2286
01:34:07,199 --> 01:34:10,080
definition was transformed to the next

2287
01:34:10,080 --> 01:34:10,960
one

2288
01:34:10,960 --> 01:34:14,719
the unknown path is the path they may

2289
01:34:14,719 --> 01:34:17,280
have been leaked

2290
01:34:17,280 --> 01:34:18,800
and it proved

2291
01:34:18,800 --> 01:34:22,000
uh also that the detection of unknown

2292
01:34:22,000 --> 01:34:24,719
paths is in this definition is very

2293
01:34:24,719 --> 01:34:27,280
similar to the detection of fractix we

2294
01:34:27,280 --> 01:34:30,159
again define two indexes the unknown

2295
01:34:30,159 --> 01:34:33,600
index uh defines the first is in the

2296
01:34:33,600 --> 01:34:36,719
upstream segment that doesn't have asp

2297
01:34:36,719 --> 01:34:37,760
record

2298
01:34:37,760 --> 01:34:39,840
so it's not inverted it doesn't just

2299
01:34:39,840 --> 01:34:41,520
doesn't exist

2300
01:34:41,520 --> 01:34:43,600
we also define a reverse unknown index

2301
01:34:43,600 --> 01:34:47,760
for the reverse i spot

2302
01:34:47,760 --> 01:34:50,639
so the path may be leaked if there is

2303
01:34:50,639 --> 01:34:53,199
enough space for leak to happen

2304
01:34:53,199 --> 01:34:56,159
in case of routes received by providers

2305
01:34:56,159 --> 01:34:59,280
peers or at eyes it means that unknown

2306
01:34:59,280 --> 01:35:02,159
index should be less than highest path

2307
01:35:02,159 --> 01:35:03,520
length

2308
01:35:03,520 --> 01:35:06,560
and a very similar family

2309
01:35:06,560 --> 01:35:09,520
equation we get for routes received from

2310
01:35:09,520 --> 01:35:10,880
providers

2311
01:35:10,880 --> 01:35:14,320
if the sum of unknown indexes is less

2312
01:35:14,320 --> 01:35:16,400
than ice path length

2313
01:35:16,400 --> 01:35:19,119
we can't guarantee that the prefix was

2314
01:35:19,119 --> 01:35:20,880
not leaked

2315
01:35:20,880 --> 01:35:24,080
now the other rules for provided piers

2316
01:35:24,080 --> 01:35:26,719
and types

2317
01:35:26,719 --> 01:35:30,400
if the invalid index is less than i spot

2318
01:35:30,400 --> 01:35:31,440
length

2319
01:35:31,440 --> 01:35:33,760
it's a arrival

2320
01:35:33,760 --> 01:35:37,760
if the unknown index is less uh than its

2321
01:35:37,760 --> 01:35:41,040
path length it's unknown otherwise it's

2322
01:35:41,040 --> 01:35:42,320
weather

2323
01:35:42,320 --> 01:35:44,480
for the downstream

2324
01:35:44,480 --> 01:35:45,679
uh

2325
01:35:45,679 --> 01:35:46,800
it's a

2326
01:35:46,800 --> 01:35:48,000
nearly this

2327
01:35:48,000 --> 01:35:49,679
the same thing so

2328
01:35:49,679 --> 01:35:53,040
uh if the zoo of invalid indexes is less

2329
01:35:53,040 --> 01:35:56,480
than ice pathways it's invaded if uh

2330
01:35:56,480 --> 01:35:58,880
the zoom of unknown indices is less of

2331
01:35:58,880 --> 01:36:02,400
the ice pattern it's unknown otherwise

2332
01:36:02,400 --> 01:36:05,119
what surprises

2333
01:36:05,600 --> 01:36:08,320
so there is an ongoing discussion how we

2334
01:36:08,320 --> 01:36:10,560
should protest assets

2335
01:36:10,560 --> 01:36:12,960
it seems that we are converging code on

2336
01:36:12,960 --> 01:36:16,400
marking routes with i sets as invalid

2337
01:36:16,400 --> 01:36:19,040
to make it considered consistent this

2338
01:36:19,040 --> 01:36:21,760
should be applied without reference

2339
01:36:21,760 --> 01:36:25,280
where i set is placed in the beginning

2340
01:36:25,280 --> 01:36:27,840
or in the middle of the path

2341
01:36:27,840 --> 01:36:31,280
the implementation of pfsp logic uh with

2342
01:36:31,280 --> 01:36:32,960
corresponding unit test the current

2343
01:36:32,960 --> 01:36:34,639
implementation you can find at the

2344
01:36:34,639 --> 01:36:36,320
github so

2345
01:36:36,320 --> 01:36:38,400
what i need i need input on these

2346
01:36:38,400 --> 01:36:41,440
questions i need volunteers that want to

2347
01:36:41,440 --> 01:36:44,480
read the document i will need volunteers

2348
01:36:44,480 --> 01:36:47,600
who want to code the a spay logic to

2349
01:36:47,600 --> 01:36:49,920
check the specification

2350
01:36:49,920 --> 01:36:53,410
the mic is yours

2351
01:36:53,410 --> 01:36:56,620
[Music]

2352
01:37:02,960 --> 01:37:06,840
chris i go

2353
01:37:10,080 --> 01:37:14,480
can folks hear me this is sriram

2354
01:37:15,600 --> 01:37:17,920
i can hear you okay

2355
01:37:17,920 --> 01:37:19,600
thank you for the nice presentation

2356
01:37:19,600 --> 01:37:22,639
alexander uh can you please go to slide

2357
01:37:22,639 --> 01:37:24,960
9.

2358
01:37:26,920 --> 01:37:29,999
[Music]

2359
01:37:30,239 --> 01:37:32,480
right

2360
01:37:32,480 --> 01:37:34,639
so just want to make a comment uh that

2361
01:37:34,639 --> 01:37:36,800
uh

2362
01:37:36,800 --> 01:37:39,440
when you have a provider that has no

2363
01:37:39,440 --> 01:37:42,480
providers like the tier one uh we have

2364
01:37:42,480 --> 01:37:44,239
said in the draft that they will

2365
01:37:44,239 --> 01:37:48,480
register an as0 aspa that is fine

2366
01:37:48,480 --> 01:37:50,480
i think we have also said that

2367
01:37:50,480 --> 01:37:54,400
nix nix or the route server as will also

2368
01:37:54,400 --> 01:37:55,520
register

2369
01:37:55,520 --> 01:37:57,679
uh nas 0

2370
01:37:57,679 --> 01:37:59,040
aspa

2371
01:37:59,040 --> 01:38:00,639
that's also fine

2372
01:38:00,639 --> 01:38:02,480
you didn't mention it here so i thought

2373
01:38:02,480 --> 01:38:05,119
it's worthwhile mentioning those but one

2374
01:38:05,119 --> 01:38:07,840
more a little bit more tricky thing uh

2375
01:38:07,840 --> 01:38:10,400
that not not in the draft yet but i

2376
01:38:10,400 --> 01:38:13,360
think we perhaps should discuss that

2377
01:38:13,360 --> 01:38:14,800
between you and me

2378
01:38:14,800 --> 01:38:17,920
at least and include that in the draft

2379
01:38:17,920 --> 01:38:19,920
and that is about

2380
01:38:19,920 --> 01:38:21,600
uh

2381
01:38:21,600 --> 01:38:22,880
if you have a

2382
01:38:22,880 --> 01:38:25,280
a transit provider who happens to be

2383
01:38:25,280 --> 01:38:27,800
present at a

2384
01:38:27,800 --> 01:38:30,080
rs at

2385
01:38:30,080 --> 01:38:33,679
the rs as a client so it's a tier one a

2386
01:38:33,679 --> 01:38:35,520
transit provider and happens to be

2387
01:38:35,520 --> 01:38:36,719
present

2388
01:38:36,719 --> 01:38:38,239
as a uh

2389
01:38:38,239 --> 01:38:41,920
at an rs as an rs client uh in that case

2390
01:38:41,920 --> 01:38:45,840
uh they should register uh naspa with

2391
01:38:45,840 --> 01:38:48,800
the rsas as a provider just like any

2392
01:38:48,800 --> 01:38:49,679
other

2393
01:38:49,679 --> 01:38:51,199
rs client

2394
01:38:51,199 --> 01:38:53,199
i think that's something that we still

2395
01:38:53,199 --> 01:38:55,199
need to include in the draft and

2396
01:38:55,199 --> 01:38:58,159
wondering if you agree with that i

2397
01:38:58,159 --> 01:39:00,880
wonder why we should emphasize this

2398
01:39:00,880 --> 01:39:02,960
together

2399
01:39:02,960 --> 01:39:05,360
because the government just says

2400
01:39:05,360 --> 01:39:07,280
if

2401
01:39:07,280 --> 01:39:09,679
you are connected to non-transparent

2402
01:39:09,679 --> 01:39:11,440
transparent art

2403
01:39:11,440 --> 01:39:13,119
you should include

2404
01:39:13,119 --> 01:39:15,920
each other sister number in your set of

2405
01:39:15,920 --> 01:39:18,080
commanders that's all it doesn't matter

2406
01:39:18,080 --> 01:39:19,360
if you are

2407
01:39:19,360 --> 01:39:21,839
t1

2408
01:39:22,480 --> 01:39:24,239
okay good yeah so

2409
01:39:24,239 --> 01:39:27,119
so tier one should not be misled uh into

2410
01:39:27,119 --> 01:39:29,280
thinking that they just need to register

2411
01:39:29,280 --> 01:39:32,239
in a zero spa and they are done uh they

2412
01:39:32,239 --> 01:39:34,800
should be sensitive that if they are

2413
01:39:34,800 --> 01:39:38,000
present at a route server as a client

2414
01:39:38,000 --> 01:39:40,159
they should definitely include the route

2415
01:39:40,159 --> 01:39:43,040
server as uh uh

2416
01:39:43,040 --> 01:39:45,920
in the aspa uh if you think the draft is

2417
01:39:45,920 --> 01:39:47,440
clear about that

2418
01:39:47,440 --> 01:39:49,760
it's okay if not we can talk about it

2419
01:39:49,760 --> 01:39:52,320
and perhaps put in a word to be sure

2420
01:39:52,320 --> 01:39:55,280
that people understand that

2421
01:39:55,280 --> 01:39:57,520
uh if you find that

2422
01:39:57,520 --> 01:40:00,880
somebody is missing this document please

2423
01:40:00,880 --> 01:40:03,600
send it back you know i'm trying to do

2424
01:40:03,600 --> 01:40:05,920
my best to carefully read all the

2425
01:40:05,920 --> 01:40:06,840
comments

2426
01:40:06,840 --> 01:40:08,719
and

2427
01:40:08,719 --> 01:40:10,719
push that into the document

2428
01:40:10,719 --> 01:40:13,440
uh sure i'll help you uh and just a

2429
01:40:13,440 --> 01:40:16,320
little mention of the uh the use of the

2430
01:40:16,320 --> 01:40:19,280
upstream uh for the route server client

2431
01:40:19,280 --> 01:40:22,639
uh i think we uh i have some

2432
01:40:22,639 --> 01:40:24,880
examples where that doesn't seem to work

2433
01:40:24,880 --> 01:40:26,000
correctly

2434
01:40:26,000 --> 01:40:28,400
but again that is too complex to discuss

2435
01:40:28,400 --> 01:40:31,040
here uh we will discuss it between

2436
01:40:31,040 --> 01:40:33,280
yourself and myself and then we can take

2437
01:40:33,280 --> 01:40:35,600
it to the mailing list if needed i just

2438
01:40:35,600 --> 01:40:37,119
want to mention that

2439
01:40:37,119 --> 01:40:38,880
thank you

2440
01:40:38,880 --> 01:40:41,199
okay

2441
01:40:43,840 --> 01:40:46,239
if it's too complex maybe you should oh

2442
01:40:46,239 --> 01:40:49,199
i'm sorry randy bush i j marcus if it's

2443
01:40:49,199 --> 01:40:51,280
too complex maybe you should take that

2444
01:40:51,280 --> 01:40:53,199
as a warning

2445
01:40:53,199 --> 01:40:55,440
um

2446
01:40:56,800 --> 01:40:58,560
exchange points

2447
01:40:58,560 --> 01:41:00,080
that put

2448
01:41:00,080 --> 01:41:01,600
their ass

2449
01:41:01,600 --> 01:41:02,960
in the path

2450
01:41:02,960 --> 01:41:06,480
are against spec

2451
01:41:06,480 --> 01:41:07,760
do not

2452
01:41:07,760 --> 01:41:12,320
make complexity in 93 other places

2453
01:41:12,320 --> 01:41:14,560
because of it

2454
01:41:14,560 --> 01:41:16,840
it's not worth it it's

2455
01:41:16,840 --> 01:41:20,080
uninteresting and it just creates more

2456
01:41:20,080 --> 01:41:21,679
complexity

2457
01:41:21,679 --> 01:41:25,119
reduce complexity please reduce

2458
01:41:25,119 --> 01:41:27,920
complexity

2459
01:41:28,000 --> 01:41:29,520
ready thank you very much for the

2460
01:41:29,520 --> 01:41:32,800
comment i'm doing my best

2461
01:41:32,800 --> 01:41:33,600
so

2462
01:41:33,600 --> 01:41:36,000
about the non-transparent access as far

2463
01:41:36,000 --> 01:41:37,920
as i remember there are two phrases

2464
01:41:37,920 --> 01:41:39,440
devoted to them

2465
01:41:39,440 --> 01:41:42,400
and unfortunately i need to stress that

2466
01:41:42,400 --> 01:41:45,119
they are in the wild

2467
01:41:45,119 --> 01:41:47,600
the last time i checked i've seen one

2468
01:41:47,600 --> 01:41:50,480
items that my network is using that was

2469
01:41:50,480 --> 01:41:52,960
present in the park and i was also

2470
01:41:52,960 --> 01:41:54,880
surprised to see that

2471
01:41:54,880 --> 01:41:56,800
hong kong internet exchange is still

2472
01:41:56,800 --> 01:41:58,159
there

2473
01:41:58,159 --> 01:42:01,839
i was not looking for more examples

2474
01:42:04,960 --> 01:42:07,920
yeah madison work online um

2475
01:42:07,920 --> 01:42:09,920
so

2476
01:42:09,920 --> 01:42:13,280
it's it's it's certainly true that a

2477
01:42:13,280 --> 01:42:16,000
transit-free network at a

2478
01:42:16,000 --> 01:42:16,880
um

2479
01:42:16,880 --> 01:42:19,600
at a non-transparent ix root server

2480
01:42:19,600 --> 01:42:21,440
would need to include that root server

2481
01:42:21,440 --> 01:42:23,280
as one of its providers

2482
01:42:23,280 --> 01:42:26,400
but that is such a vanishingly unlikely

2483
01:42:26,400 --> 01:42:28,960
scenario to actually come up in the real

2484
01:42:28,960 --> 01:42:31,440
world i really wouldn't call it out

2485
01:42:31,440 --> 01:42:34,880
explicitly in ways prose on it

2486
01:42:34,880 --> 01:42:36,400
i think that

2487
01:42:36,400 --> 01:42:39,199
in the interests of simplicity

2488
01:42:39,199 --> 01:42:41,280
what the document should do is emphasize

2489
01:42:41,280 --> 01:42:42,400
the fact

2490
01:42:42,400 --> 01:42:45,360
that a non-transparent

2491
01:42:45,360 --> 01:42:47,920
internet exchange root server is just a

2492
01:42:47,920 --> 01:42:49,600
transit provider it just happens to

2493
01:42:49,600 --> 01:42:51,360
forward on mac addresses and not ip

2494
01:42:51,360 --> 01:42:54,080
headers but in every in any way that

2495
01:42:54,080 --> 01:42:56,560
this document cares about it is just a

2496
01:42:56,560 --> 01:42:58,719
transit provider and should be treated

2497
01:42:58,719 --> 01:43:02,239
indistinguishably from that case

2498
01:43:07,920 --> 01:43:11,520
i think for a um

2499
01:43:11,520 --> 01:43:12,719
uh

2500
01:43:12,719 --> 01:43:15,280
if we are digging into the details there

2501
01:43:15,280 --> 01:43:17,920
is only one thing that is different you

2502
01:43:17,920 --> 01:43:19,440
are speaking about

2503
01:43:19,440 --> 01:43:20,400
uh

2504
01:43:20,400 --> 01:43:23,520
rough server behavior because if it is

2505
01:43:23,520 --> 01:43:26,239
uh transparent as the specifications

2506
01:43:26,239 --> 01:43:27,520
suggest

2507
01:43:27,520 --> 01:43:28,639
uh

2508
01:43:28,639 --> 01:43:31,199
we are not checking that

2509
01:43:31,199 --> 01:43:32,159
the

2510
01:43:32,159 --> 01:43:35,440
neighbor at all system is equal to the

2511
01:43:35,440 --> 01:43:37,760
last account system of the path this is

2512
01:43:37,760 --> 01:43:41,280
the only exception in its proxy in all

2513
01:43:41,280 --> 01:43:43,440
our other

2514
01:43:43,440 --> 01:43:46,080
cases it's just the same so i think we

2515
01:43:46,080 --> 01:43:50,280
are on the same page here

2516
01:43:55,040 --> 01:43:55,920
uh

2517
01:43:55,920 --> 01:43:58,719
this is sriram again um i just want to

2518
01:43:58,719 --> 01:44:00,560
make a quick comment that it actually

2519
01:44:00,560 --> 01:44:04,480
turns out that the non-transparent ix

2520
01:44:04,480 --> 01:44:06,960
is less complex than the

2521
01:44:06,960 --> 01:44:09,119
uh transparent ix

2522
01:44:09,119 --> 01:44:11,760
but but both of them can be uh taken

2523
01:44:11,760 --> 01:44:14,480
care of in the draft

2524
01:44:14,480 --> 01:44:17,119
without too much complexity

2525
01:44:17,119 --> 01:44:19,280
the only other comment is that it

2526
01:44:19,280 --> 01:44:20,960
appears to me that if

2527
01:44:20,960 --> 01:44:22,639
if as

2528
01:44:22,639 --> 01:44:25,760
even if the route server is transparent

2529
01:44:25,760 --> 01:44:28,320
uh it may be worthwhile to register in

2530
01:44:28,320 --> 01:44:29,600
aspa

2531
01:44:29,600 --> 01:44:32,880
uh by the client including the even the

2532
01:44:32,880 --> 01:44:36,400
even the transparent ix in the aspa uh

2533
01:44:36,400 --> 01:44:38,400
that's something again that

2534
01:44:38,400 --> 01:44:40,400
we need to think about that carefully

2535
01:44:40,400 --> 01:44:42,800
and uh there is there is i think utility

2536
01:44:42,800 --> 01:44:45,199
for that

2537
01:44:46,560 --> 01:44:48,719
uh according to the

2538
01:44:48,719 --> 01:44:51,040
goal that we're trying to solve the

2539
01:44:51,040 --> 01:44:53,840
rapid detection

2540
01:44:53,840 --> 01:44:56,880
there is no need the origin uh

2541
01:44:56,880 --> 01:44:58,560
not

2542
01:44:58,560 --> 01:45:03,159
to register transparent eyes

2543
01:45:07,040 --> 01:45:09,360
go ahead

2544
01:45:09,360 --> 01:45:12,080
it's not harmful to

2545
01:45:12,080 --> 01:45:13,760
register them

2546
01:45:13,760 --> 01:45:15,520
but still i don't think that the

2547
01:45:15,520 --> 01:45:17,360
specifications should make such

2548
01:45:17,360 --> 01:45:20,000
suggestions

2549
01:45:20,000 --> 01:45:23,040
yeah uh yeah again like it in my mind it

2550
01:45:23,040 --> 01:45:24,880
helps to

2551
01:45:24,880 --> 01:45:27,520
it helps to

2552
01:45:27,520 --> 01:45:28,800
have the

2553
01:45:28,800 --> 01:45:32,320
uh algorithm at the route server client

2554
01:45:32,320 --> 01:45:33,040
uh

2555
01:45:33,040 --> 01:45:34,560
unified

2556
01:45:34,560 --> 01:45:36,000
hey sriram

2557
01:45:36,000 --> 01:45:37,600
yeah hey we're gonna get kicked out of

2558
01:45:37,600 --> 01:45:39,520
the room here so i think all this has to

2559
01:45:39,520 --> 01:45:41,520
end up on the list so my suggestion is

2560
01:45:41,520 --> 01:45:42,960
that you start writing to the list right

2561
01:45:42,960 --> 01:45:46,480
now sure yeah thank you and sasha thank

2562
01:45:46,480 --> 01:45:48,480
you very much for the presentation

2563
01:45:48,480 --> 01:45:49,600
you probably also have some stuff to

2564
01:45:49,600 --> 01:45:51,440
write to the list

2565
01:45:51,440 --> 01:45:53,280
yeah see everybody in the next place

2566
01:45:53,280 --> 01:45:54,400
we're going to be which i think is

2567
01:45:54,400 --> 01:45:55,440
london

2568
01:45:55,440 --> 01:45:57,440
unless we need to have an intermediate

2569
01:45:57,440 --> 01:45:59,840
interim meeting to talk about stuff and

2570
01:45:59,840 --> 01:46:01,600
if we do you should definitely put that

2571
01:46:01,600 --> 01:46:03,280
on the list

2572
01:46:03,280 --> 01:46:05,119
thank you

2573
01:46:05,119 --> 01:46:08,280
thank you

2574
01:46:17,600 --> 01:46:19,679
you

