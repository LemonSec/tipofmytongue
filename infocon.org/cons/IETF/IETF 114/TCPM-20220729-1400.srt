1
00:00:13,599 --> 00:00:16,599
oh

2
00:00:32,079 --> 00:00:35,079
okay

3
00:00:56,480 --> 00:00:59,480
uh

4
00:01:56,079 --> 00:01:57,119
should we

5
00:01:57,119 --> 00:01:59,040
give people a couple of minutes or

6
00:01:59,040 --> 00:02:02,360
should we start

7
00:02:35,680 --> 00:02:37,840
um

8
00:02:54,000 --> 00:02:55,280
okay

9
00:02:55,280 --> 00:02:57,120
i guess we can start

10
00:02:57,120 --> 00:02:59,680
can you hear me

11
00:03:00,000 --> 00:03:01,280
yes yes

12
00:03:01,280 --> 00:03:03,040
okay

13
00:03:03,040 --> 00:03:04,720
this is tcpm

14
00:03:04,720 --> 00:03:08,959
um so if you are not interested in tcp

15
00:03:08,959 --> 00:03:11,440
you might have chosen the wrong rule

16
00:03:11,440 --> 00:03:13,840
um

17
00:03:15,040 --> 00:03:18,159
you have three coaches here

18
00:03:18,159 --> 00:03:20,560
my name is michael jackson i'm remote

19
00:03:20,560 --> 00:03:22,800
and

20
00:03:23,200 --> 00:03:26,480
in front of you are

21
00:03:29,440 --> 00:03:31,519
ian's what

22
00:03:31,519 --> 00:03:33,440
finish

23
00:03:33,440 --> 00:03:36,400
perfect thanks

24
00:03:36,400 --> 00:03:39,040
this is the note well i've i think you

25
00:03:39,040 --> 00:03:41,200
have seen it a lot of times this week so

26
00:03:41,200 --> 00:03:43,760
i won't spend much time on it

27
00:03:43,760 --> 00:03:45,120
it applies to

28
00:03:45,120 --> 00:03:47,840
this session

29
00:03:48,159 --> 00:03:50,000
the logistics the session is being

30
00:03:50,000 --> 00:03:51,920
recorded

31
00:03:51,920 --> 00:03:53,760
thank you to richard chef and egger for

32
00:03:53,760 --> 00:03:56,000
taking notes

33
00:03:56,000 --> 00:03:59,920
we have a javascript yoshi will look it

34
00:03:59,920 --> 00:04:01,599
the chat and

35
00:04:01,599 --> 00:04:04,319
if there are any comments he will make

36
00:04:04,319 --> 00:04:06,640
sure that they come to like

37
00:04:06,640 --> 00:04:08,958
um

38
00:04:09,519 --> 00:04:10,799
one

39
00:04:10,799 --> 00:04:12,840
information if you are writing a

40
00:04:12,840 --> 00:04:16,238
document and think tcpm

41
00:04:16,238 --> 00:04:17,120
is

42
00:04:17,120 --> 00:04:20,320
a venue for it which

43
00:04:20,320 --> 00:04:22,560
might be interested in it then

44
00:04:22,560 --> 00:04:25,520
use tcpm in the name and it's on our

45
00:04:25,520 --> 00:04:27,360
radar

46
00:04:27,360 --> 00:04:29,840
so then type draft

47
00:04:29,840 --> 00:04:33,040
whatever your name is tcpm and

48
00:04:33,040 --> 00:04:36,160
then the subject

49
00:04:36,479 --> 00:04:38,479
this is the agenda for today

50
00:04:38,479 --> 00:04:39,199
we

51
00:04:39,199 --> 00:04:41,120
gave you a short update on the working

52
00:04:41,120 --> 00:04:43,120
group status

53
00:04:43,120 --> 00:04:45,600
then we have four presentations

54
00:04:45,600 --> 00:04:47,600
regarding

55
00:04:47,600 --> 00:04:49,840
working group documents

56
00:04:49,840 --> 00:04:52,560
two of them

57
00:04:53,360 --> 00:04:55,120
have at least

58
00:04:55,120 --> 00:04:56,800
been for a while on the working group

59
00:04:56,800 --> 00:04:58,160
last call

60
00:04:58,160 --> 00:05:00,240
two of them

61
00:05:00,240 --> 00:05:01,919
will be in the working group class

62
00:05:01,919 --> 00:05:04,160
called sometime in the future

63
00:05:04,160 --> 00:05:08,080
and we have two presentations um

64
00:05:08,080 --> 00:05:12,240
one is uh based on the feedback of

65
00:05:12,240 --> 00:05:17,039
the tcpm regarding the tcp yang module

66
00:05:17,360 --> 00:05:19,120
by gaian who

67
00:05:19,120 --> 00:05:20,880
is

68
00:05:20,880 --> 00:05:23,360
presenting what

69
00:05:23,360 --> 00:05:25,199
features are needed from a user

70
00:05:25,199 --> 00:05:28,479
perspective and we have one non-working

71
00:05:28,479 --> 00:05:30,560
good document presentation the tcpa

72
00:05:30,560 --> 00:05:33,840
great request an update on that

73
00:05:33,840 --> 00:05:36,160
are there any

74
00:05:36,160 --> 00:05:37,440
uh

75
00:05:37,440 --> 00:05:39,600
should this be changed

76
00:05:39,600 --> 00:05:40,800
any

77
00:05:40,800 --> 00:05:44,000
comments regarding that

78
00:05:44,000 --> 00:05:46,320
so i i have seen

79
00:05:46,320 --> 00:05:48,240
the presenters i think

80
00:05:48,240 --> 00:05:49,759
um

81
00:05:49,759 --> 00:05:51,440
mahesh is still on the train he's

82
00:05:51,440 --> 00:05:54,639
heading to a hotel and once the

83
00:05:54,639 --> 00:05:56,800
document once the presentation is up he

84
00:05:56,800 --> 00:05:57,919
should be

85
00:05:57,919 --> 00:06:00,639
in the hotel being online so that should

86
00:06:00,639 --> 00:06:02,880
work

87
00:06:03,280 --> 00:06:06,639
these are the

88
00:06:06,639 --> 00:06:07,600
on the

89
00:06:07,600 --> 00:06:09,840
uh on the milestones

90
00:06:09,840 --> 00:06:12,160
of the working group

91
00:06:12,160 --> 00:06:15,199
the tcpmao test vectors has been

92
00:06:15,199 --> 00:06:18,360
published since the last ietf it's rsc

93
00:06:18,360 --> 00:06:21,440
9235 and you might have seen a couple of

94
00:06:21,440 --> 00:06:23,120
emails regarding

95
00:06:23,120 --> 00:06:25,840
errata so

96
00:06:25,840 --> 00:06:27,680
there's one issue

97
00:06:27,680 --> 00:06:29,039
which means

98
00:06:29,039 --> 00:06:31,199
which is that the

99
00:06:31,199 --> 00:06:33,680
tcp checksum

100
00:06:33,680 --> 00:06:37,919
is wrong in the example packets when

101
00:06:37,919 --> 00:06:39,840
using

102
00:06:39,840 --> 00:06:43,280
ipv4 is the network layer this is for 12

103
00:06:43,280 --> 00:06:45,440
packets so they're

104
00:06:45,440 --> 00:06:48,160
12 or 6 in packets i think so that's why

105
00:06:48,160 --> 00:06:51,280
you see 16 erratas right now

106
00:06:51,280 --> 00:06:54,639
it's up to the 80 to

107
00:06:54,639 --> 00:06:56,000
figure out

108
00:06:56,000 --> 00:06:58,639
whether to apply them

109
00:06:58,639 --> 00:07:01,440
individually or change this stuff to a

110
00:07:01,440 --> 00:07:03,360
single errata

111
00:07:03,360 --> 00:07:04,880
that's up to

112
00:07:04,880 --> 00:07:06,960
up to the 80

113
00:07:06,960 --> 00:07:08,960
whatever is

114
00:07:08,960 --> 00:07:11,919
however this is handled best in the

115
00:07:11,919 --> 00:07:15,240
in the tools

116
00:07:17,039 --> 00:07:20,400
yeah spartan um

117
00:07:20,479 --> 00:07:22,000
i i don't want to

118
00:07:22,000 --> 00:07:23,680
like have an extended debate about this

119
00:07:23,680 --> 00:07:26,160
i think probably the least i mean you've

120
00:07:26,160 --> 00:07:27,759
already filed the errata thank you for

121
00:07:27,759 --> 00:07:29,680
that but i think the least aggregate

122
00:07:29,680 --> 00:07:31,520
work for everyone is if we just have a

123
00:07:31,520 --> 00:07:32,560
single

124
00:07:32,560 --> 00:07:35,039
if you just do the step of filing a

125
00:07:35,039 --> 00:07:37,039
single errata for all of them that

126
00:07:37,039 --> 00:07:39,599
doesn't that's general to the document

127
00:07:39,599 --> 00:07:40,639
um

128
00:07:40,639 --> 00:07:42,560
well

129
00:07:42,560 --> 00:07:44,080
let me think i guess we have to we have

130
00:07:44,080 --> 00:07:46,160
to tell the rfc editor i'm sorry i'm

131
00:07:46,160 --> 00:07:47,759
thinking about this in real time but i

132
00:07:47,759 --> 00:07:49,120
guess we have to tell the rc editor to

133
00:07:49,120 --> 00:07:50,560
make all the changes so actually you

134
00:07:50,560 --> 00:07:53,039
know what you file the 16

135
00:07:53,039 --> 00:07:54,960
i'll just approve them all and that way

136
00:07:54,960 --> 00:07:57,039
the rfc end has no ambiguity but they're

137
00:07:57,039 --> 00:07:59,039
going to do so i changed my mind in the

138
00:07:59,039 --> 00:08:00,479
middle of my comment let's just leave it

139
00:08:00,479 --> 00:08:02,000
like it is

140
00:08:02,000 --> 00:08:03,120
okay i mean if

141
00:08:03,120 --> 00:08:04,879
talk to the rfc editor if they want it

142
00:08:04,879 --> 00:08:06,720
in a different way just drop me a note i

143
00:08:06,720 --> 00:08:07,759
can do that

144
00:08:07,759 --> 00:08:09,680
okay that's a good point i'll i'll ask

145
00:08:09,680 --> 00:08:11,440
them i'll ask owls before i get out of

146
00:08:11,440 --> 00:08:13,599
here how she wants me to handle it

147
00:08:13,599 --> 00:08:14,720
thanks

148
00:08:14,720 --> 00:08:16,000
okay

149
00:08:16,000 --> 00:08:16,560
um

150
00:08:16,560 --> 00:08:18,160
[Music]

151
00:08:18,160 --> 00:08:22,560
rfc 793 bis that's the tcp spec uh the

152
00:08:22,560 --> 00:08:26,000
base back it's an auth 48 and

153
00:08:26,000 --> 00:08:27,440
there have been

154
00:08:27,440 --> 00:08:29,680
a lot of comments from the rfc editor

155
00:08:29,680 --> 00:08:32,080
which have been addressed recently by

156
00:08:32,080 --> 00:08:33,039
wes

157
00:08:33,039 --> 00:08:35,360
and so the document is

158
00:08:35,360 --> 00:08:37,360
moving forward

159
00:08:37,360 --> 00:08:40,479
the tcp yang document is

160
00:08:40,479 --> 00:08:43,200
after working group last call in the isg

161
00:08:43,200 --> 00:08:46,640
last call a couple of comments have been

162
00:08:46,640 --> 00:08:48,560
raised and

163
00:08:48,560 --> 00:08:50,160
the authors are working on addressing

164
00:08:50,160 --> 00:08:50,959
them

165
00:08:50,959 --> 00:08:54,080
we'll get a status update here and also

166
00:08:54,080 --> 00:08:55,920
we will have a

167
00:08:55,920 --> 00:08:59,600
presentation about uh

168
00:08:59,600 --> 00:09:02,959
potential additional features

169
00:09:02,959 --> 00:09:05,440
which some users think

170
00:09:05,440 --> 00:09:08,640
would be very useful so we can then i

171
00:09:08,640 --> 00:09:09,839
think they are

172
00:09:09,839 --> 00:09:12,640
maybe suggesting something like another

173
00:09:12,640 --> 00:09:14,880
more

174
00:09:15,839 --> 00:09:18,720
detailed yang module

175
00:09:18,720 --> 00:09:21,839
the next two documents

176
00:09:21,839 --> 00:09:23,519
prr and

177
00:09:23,519 --> 00:09:26,399
the next one is cubic uh the prr is we

178
00:09:26,399 --> 00:09:28,240
have a presentation on that

179
00:09:28,240 --> 00:09:29,839
uh it's still

180
00:09:29,839 --> 00:09:32,720
in progress uh the cubic one we will

181
00:09:32,720 --> 00:09:34,720
also have a presentation

182
00:09:34,720 --> 00:09:36,959
on their we are past working group last

183
00:09:36,959 --> 00:09:39,279
call but got substantial comments and

184
00:09:39,279 --> 00:09:41,760
are still in the

185
00:09:41,760 --> 00:09:44,240
uh in the face of discussing

186
00:09:44,240 --> 00:09:48,240
them um we will we will get a status

187
00:09:48,240 --> 00:09:50,560
update uh of that during the discussion

188
00:09:50,560 --> 00:09:52,480
unfortunately the person

189
00:09:52,480 --> 00:09:54,560
raising the comments couldn't attend

190
00:09:54,560 --> 00:09:56,480
this meeting

191
00:09:56,480 --> 00:09:59,839
histor plus i marked it as green

192
00:09:59,839 --> 00:10:00,800
i

193
00:10:00,800 --> 00:10:03,279
am the document shepherd so i

194
00:10:03,279 --> 00:10:05,440
read it i have some

195
00:10:05,440 --> 00:10:08,079
editorial formal

196
00:10:08,079 --> 00:10:10,720
changes requested once that is done

197
00:10:10,720 --> 00:10:12,720
i'll do my shattered write-up and pass

198
00:10:12,720 --> 00:10:15,279
it to the ad so that's from a working

199
00:10:15,279 --> 00:10:17,279
group perspective it's it's done right

200
00:10:17,279 --> 00:10:19,040
now

201
00:10:19,040 --> 00:10:23,360
accurate ecn is also uh

202
00:10:23,839 --> 00:10:26,160
on the list of

203
00:10:26,160 --> 00:10:28,399
drafts which will be presented that's

204
00:10:28,399 --> 00:10:31,839
ongoing work um almost ready for working

205
00:10:31,839 --> 00:10:34,399
group last call i would say

206
00:10:34,399 --> 00:10:36,959
we have generalized ecm which builds on

207
00:10:36,959 --> 00:10:40,320
that and tcp edo which has not had lots

208
00:10:40,320 --> 00:10:42,959
of changes

209
00:10:43,360 --> 00:10:45,760
related to the last

210
00:10:45,760 --> 00:10:48,160
meeting

211
00:10:50,800 --> 00:10:52,800
yeah um

212
00:10:52,800 --> 00:10:54,880
this is all fine but just and you know i

213
00:10:54,880 --> 00:10:56,320
realize things have to be done when

214
00:10:56,320 --> 00:10:58,640
they're done but if if at all possible

215
00:10:58,640 --> 00:11:01,519
it's to if it's possible to

216
00:11:01,519 --> 00:11:04,399
prioritize accurate ecn and like maybe

217
00:11:04,399 --> 00:11:05,839
deliver it to me

218
00:11:05,839 --> 00:11:08,480
well i don't know if if it's at all like

219
00:11:08,480 --> 00:11:09,680
if you have two documents in front of

220
00:11:09,680 --> 00:11:11,120
you and one of those accurate ecn please

221
00:11:11,120 --> 00:11:13,440
process equity cn first because the l4s

222
00:11:13,440 --> 00:11:14,880
stuff is already kind of going through

223
00:11:14,880 --> 00:11:17,120
so i think it's a little

224
00:11:17,120 --> 00:11:18,959
it's a little awkward for this to be you

225
00:11:18,959 --> 00:11:20,800
know significantly behind that

226
00:11:20,800 --> 00:11:23,040
but you know don't you know so i hope

227
00:11:23,040 --> 00:11:26,240
that guidance made sense just if you if

228
00:11:26,240 --> 00:11:28,959
if you have any do you have any document

229
00:11:28,959 --> 00:11:31,760
which you would

230
00:11:31,760 --> 00:11:35,519
are you asking us to delay

231
00:11:35,600 --> 00:11:38,160
oh i mean

232
00:11:39,360 --> 00:11:41,600
so so like the practical implication of

233
00:11:41,600 --> 00:11:43,600
this guidance would be that if like say

234
00:11:43,600 --> 00:11:45,360
as a document shepard you had two

235
00:11:45,360 --> 00:11:47,040
documents and one of them was accurate

236
00:11:47,040 --> 00:11:49,200
ecn that you would work work on the

237
00:11:49,200 --> 00:11:51,760
shepherd write up for accurate ecn first

238
00:11:51,760 --> 00:11:54,000
this this dilemma may not arise like you

239
00:11:54,000 --> 00:11:55,760
may just have a document in front of you

240
00:11:55,760 --> 00:11:57,200
and then accurate dcn is the only thing

241
00:11:57,200 --> 00:11:58,320
on your plate

242
00:11:58,320 --> 00:12:00,639
and um you know obviously accuracy it

243
00:12:00,639 --> 00:12:02,000
has to be done first and it's not done

244
00:12:02,000 --> 00:12:03,680
we haven't done the last call

245
00:12:03,680 --> 00:12:05,519
but to the extent that you have

246
00:12:05,519 --> 00:12:06,880
you know

247
00:12:06,880 --> 00:12:08,880
process gates and something is blocking

248
00:12:08,880 --> 00:12:11,200
accurate ecn like i would i would

249
00:12:11,200 --> 00:12:12,880
encourage you to

250
00:12:12,880 --> 00:12:14,480
i don't think anything is blocking you

251
00:12:14,480 --> 00:12:17,200
accurately so i think the the thing we

252
00:12:17,200 --> 00:12:21,440
are working on is uh basically is cubic

253
00:12:21,440 --> 00:12:23,110
yeah

254
00:12:23,110 --> 00:12:24,399
[Music]

255
00:12:24,399 --> 00:12:26,800
so so i don't see anything being blocked

256
00:12:26,800 --> 00:12:29,040
so we can we can start working the glass

257
00:12:29,040 --> 00:12:30,800
call of accurate ecm whenever we think

258
00:12:30,800 --> 00:12:31,600
it's

259
00:12:31,600 --> 00:12:33,120
it's ready

260
00:12:33,120 --> 00:12:35,440
we are not waiting for anything

261
00:12:35,440 --> 00:12:37,279
and bob is coming and telling us that

262
00:12:37,279 --> 00:12:39,760
it's ready

263
00:12:39,760 --> 00:12:42,079
um yeah this is bob briscoe

264
00:12:42,079 --> 00:12:44,639
yes that's true um i just wanted to ask

265
00:12:44,639 --> 00:12:45,920
whether we're going to get a working

266
00:12:45,920 --> 00:12:47,760
group last call on

267
00:12:47,760 --> 00:12:49,600
an attempt at it on generalized ecm as

268
00:12:49,600 --> 00:12:50,959
well because that's

269
00:12:50,959 --> 00:12:53,760
part of the same thing

270
00:13:01,360 --> 00:13:03,920
so like rule number one is it is ready

271
00:13:03,920 --> 00:13:06,320
and um i'm not saying like can't stop

272
00:13:06,320 --> 00:13:07,839
all work so we all just sit here and

273
00:13:07,839 --> 00:13:09,360
focus on ecn

274
00:13:09,360 --> 00:13:11,120
but to the extent that there's a process

275
00:13:11,120 --> 00:13:12,959
thing where you're doing one one working

276
00:13:12,959 --> 00:13:14,720
last call at a time or one separate

277
00:13:14,720 --> 00:13:17,440
write up at a time or whatever

278
00:13:17,440 --> 00:13:19,040
if there's an ec and doc in the queue it

279
00:13:19,040 --> 00:13:20,560
would be nice if those were given

280
00:13:20,560 --> 00:13:21,760
priority

281
00:13:21,760 --> 00:13:24,959
does that make sense

282
00:13:25,760 --> 00:13:27,440
okay

283
00:13:27,440 --> 00:13:30,760
okay thanks

284
00:13:34,480 --> 00:13:38,240
any other comments regarding

285
00:13:38,240 --> 00:13:40,720
these issues or any other working group

286
00:13:40,720 --> 00:13:44,199
related issues

287
00:13:48,000 --> 00:13:49,279
if that's not the case then i would

288
00:13:49,279 --> 00:13:52,079
suggest we move on to um

289
00:13:52,079 --> 00:13:54,800
to the first presentation we have 15

290
00:13:54,800 --> 00:13:58,720
minutes spare from our agenda and if

291
00:13:58,720 --> 00:14:01,040
there is for any of the

292
00:14:01,040 --> 00:14:02,959
the the issues we have discussed

293
00:14:02,959 --> 00:14:04,480
fruitful discussion

294
00:14:04,480 --> 00:14:06,560
we are willing to run over

295
00:14:06,560 --> 00:14:09,760
the time limit in in a certain way

296
00:14:09,760 --> 00:14:12,639
but um

297
00:14:12,800 --> 00:14:14,240
still trying to make sure that all

298
00:14:14,240 --> 00:14:16,480
presentations can be happened

299
00:14:16,480 --> 00:14:20,560
um so then i would say vidi

300
00:14:23,920 --> 00:14:25,519
video you hear me

301
00:14:25,519 --> 00:14:27,680
yes we do are you running the slides

302
00:14:27,680 --> 00:14:30,399
from your computer

303
00:14:30,399 --> 00:14:33,279
i'm trying to

304
00:14:35,440 --> 00:14:37,020
ask to screen share

305
00:14:37,020 --> 00:14:38,560
[Music]

306
00:14:38,560 --> 00:14:40,639
you don't need to screen share you can

307
00:14:40,639 --> 00:14:41,600
just

308
00:14:41,600 --> 00:14:43,279
do the job sorry

309
00:14:43,279 --> 00:14:45,760
sorry yeah

310
00:14:45,760 --> 00:14:49,480
the document is uploaded

311
00:14:58,000 --> 00:15:00,079
can everybody see the

312
00:15:00,079 --> 00:15:03,920
yes slides thank you perfect

313
00:15:04,000 --> 00:15:04,880
um

314
00:15:04,880 --> 00:15:08,880
so uh this is um update on revised cubic

315
00:15:08,880 --> 00:15:10,880
um and

316
00:15:10,880 --> 00:15:13,760
we are you know aiming to publish it as

317
00:15:13,760 --> 00:15:16,320
a proposed standard

318
00:15:16,320 --> 00:15:19,519
um so there are some issues that were

319
00:15:19,519 --> 00:15:21,600
raised by markup

320
00:15:21,600 --> 00:15:22,750
and um

321
00:15:22,750 --> 00:15:24,320
[Music]

322
00:15:24,320 --> 00:15:26,240
i've been exchanging emails with him

323
00:15:26,240 --> 00:15:27,920
regarding some of the issues that i

324
00:15:27,920 --> 00:15:30,639
couldn't really um

325
00:15:30,639 --> 00:15:32,160
figure out from the mailing list and

326
00:15:32,160 --> 00:15:35,360
i'll talk about it in a little bit

327
00:15:35,360 --> 00:15:37,839
issue one is um

328
00:15:37,839 --> 00:15:39,199
about

329
00:15:39,199 --> 00:15:42,320
the tcp friendly model

330
00:15:42,320 --> 00:15:43,600
and

331
00:15:43,600 --> 00:15:47,040
it seems like marco said that the tcp

332
00:15:47,040 --> 00:15:49,839
friendly model used by cubic is not

333
00:15:49,839 --> 00:15:51,360
correct

334
00:15:51,360 --> 00:15:55,040
and he pointed to a paper

335
00:15:55,040 --> 00:15:57,920
i think wrote by bob um so

336
00:15:57,920 --> 00:15:59,279
maybe we will

337
00:15:59,279 --> 00:16:01,040
take this

338
00:16:01,040 --> 00:16:03,360
after i present this and

339
00:16:03,360 --> 00:16:05,920
ask for bob's input

340
00:16:05,920 --> 00:16:10,160
on this issue that marco has raised

341
00:16:10,160 --> 00:16:12,560
the second issue is

342
00:16:12,560 --> 00:16:18,560
changing beta from 0.7 to 0.5

343
00:16:19,279 --> 00:16:21,199
it is an interesting thing

344
00:16:21,199 --> 00:16:22,560
i i do

345
00:16:22,560 --> 00:16:26,639
i have spoken to many other

346
00:16:26,639 --> 00:16:27,600
folks

347
00:16:27,600 --> 00:16:31,279
in parts who participate in tcpm and

348
00:16:31,279 --> 00:16:35,120
it seems like you know the 0.7 to 0.5 is

349
00:16:35,120 --> 00:16:37,120
kind of like

350
00:16:37,120 --> 00:16:39,120
related to the doubling in the slow

351
00:16:39,120 --> 00:16:40,079
start

352
00:16:40,079 --> 00:16:42,399
and when you double it

353
00:16:42,399 --> 00:16:44,959
and you see a loss you have it

354
00:16:44,959 --> 00:16:47,839
you kind of reach the

355
00:16:47,839 --> 00:16:50,959
um basically you you get one x

356
00:16:50,959 --> 00:16:53,120
times the condition window which still

357
00:16:53,120 --> 00:16:54,560
means

358
00:16:54,560 --> 00:16:56,880
the queues are going to be full

359
00:16:56,880 --> 00:16:58,480
even if

360
00:16:58,480 --> 00:17:00,720
there won't be a second

361
00:17:00,720 --> 00:17:02,560
round of loss

362
00:17:02,560 --> 00:17:06,240
so um it's not the best but it still

363
00:17:06,240 --> 00:17:10,079
avoids probably a second round of loss

364
00:17:10,079 --> 00:17:12,799
having said that

365
00:17:12,799 --> 00:17:13,599
um

366
00:17:13,599 --> 00:17:16,319
i have also spoken about this to a lot

367
00:17:16,319 --> 00:17:19,760
of folks and and the authors and

368
00:17:19,760 --> 00:17:24,000
my and in my personal opinion is that

369
00:17:24,000 --> 00:17:26,319
changing this at this point

370
00:17:26,319 --> 00:17:29,360
is not something

371
00:17:29,360 --> 00:17:30,960
we think is the right thing to do

372
00:17:30,960 --> 00:17:33,679
because there is just literally no

373
00:17:33,679 --> 00:17:35,039
deployment

374
00:17:35,039 --> 00:17:38,240
with 0.5

375
00:17:38,480 --> 00:17:40,720
not in linux not in apple not in any

376
00:17:40,720 --> 00:17:43,679
stack quick stack that uses cubic

377
00:17:43,679 --> 00:17:44,799
and

378
00:17:44,799 --> 00:17:48,480
i suppose free psd as well as microsoft

379
00:17:48,480 --> 00:17:50,000
if anybody has

380
00:17:50,000 --> 00:17:55,039
or has been using 0.5 please let us know

381
00:17:55,039 --> 00:17:57,120
but this is something

382
00:17:57,120 --> 00:18:01,840
i think we cannot change at this point

383
00:18:02,799 --> 00:18:03,919
um

384
00:18:03,919 --> 00:18:08,480
then there was issue number three

385
00:18:08,480 --> 00:18:10,240
which has been resolved by neil this

386
00:18:10,240 --> 00:18:12,840
issue was about

387
00:18:12,840 --> 00:18:18,080
um basically you know it's just a bug um

388
00:18:18,080 --> 00:18:19,360
where

389
00:18:19,360 --> 00:18:21,440
we were um

390
00:18:21,440 --> 00:18:22,880
initially we were saying if the

391
00:18:22,880 --> 00:18:25,600
congestion window is over w max

392
00:18:25,600 --> 00:18:28,400
then set alpha cubic to one and there

393
00:18:28,400 --> 00:18:30,559
was a bug here which where it should

394
00:18:30,559 --> 00:18:32,559
rather say and the conduction window is

395
00:18:32,559 --> 00:18:34,960
higher than the prior condition window

396
00:18:34,960 --> 00:18:36,799
so neil has fixed the issue thank you

397
00:18:36,799 --> 00:18:38,080
neo for that

398
00:18:38,080 --> 00:18:39,840
and i think he also said this issue was

399
00:18:39,840 --> 00:18:42,720
fixed in linux

400
00:18:43,600 --> 00:18:47,120
issue number six was about

401
00:18:47,120 --> 00:18:47,840
the

402
00:18:47,840 --> 00:18:50,080
implementations that still use

403
00:18:50,080 --> 00:18:52,480
congestion window directly

404
00:18:52,480 --> 00:18:54,160
during a condition event to do the

405
00:18:54,160 --> 00:18:55,200
reduction

406
00:18:55,200 --> 00:18:57,679
and there's a pr open for this

407
00:18:57,679 --> 00:18:58,060
um

408
00:18:58,060 --> 00:18:59,919
[Music]

409
00:18:59,919 --> 00:19:02,880
i think uh there is just a

410
00:19:02,880 --> 00:19:06,400
small edit left in this one as mark who

411
00:19:06,400 --> 00:19:08,799
sent an email about it yesterday

412
00:19:08,799 --> 00:19:10,640
but i think this is something we can

413
00:19:10,640 --> 00:19:12,559
resolve

414
00:19:12,559 --> 00:19:15,280
um so as i was saying uh

415
00:19:15,280 --> 00:19:18,080
i did email him to ask what are issue

416
00:19:18,080 --> 00:19:20,480
number four and five

417
00:19:20,480 --> 00:19:21,520
and

418
00:19:21,520 --> 00:19:25,919
he replied um a day ago so i have not

419
00:19:25,919 --> 00:19:27,440
covered that

420
00:19:27,440 --> 00:19:29,360
but i think the issue number four if i

421
00:19:29,360 --> 00:19:32,000
understand it correctly um he mentioned

422
00:19:32,000 --> 00:19:33,600
that

423
00:19:33,600 --> 00:19:37,280
0.5 should also be used

424
00:19:37,280 --> 00:19:40,320
when we are in congestion avoidance

425
00:19:40,320 --> 00:19:43,120
and not just after slow start

426
00:19:43,120 --> 00:19:45,039
um

427
00:19:45,039 --> 00:19:47,280
i have my opinion on that but i would

428
00:19:47,280 --> 00:19:49,440
like to hear more from the

429
00:19:49,440 --> 00:19:51,840
folks here

430
00:19:51,840 --> 00:19:54,240
have any opinion about

431
00:19:54,240 --> 00:19:58,559
uh how does changing 0.705

432
00:19:58,559 --> 00:20:02,400
impact the congestion avoidance

433
00:20:02,400 --> 00:20:04,640
um

434
00:20:05,039 --> 00:20:07,679
last slide um

435
00:20:07,679 --> 00:20:11,120
there are open issues and pull requests

436
00:20:11,120 --> 00:20:12,880
actually there are no open issues on

437
00:20:12,880 --> 00:20:14,559
github but there are open issues on

438
00:20:14,559 --> 00:20:15,840
mailing last

439
00:20:15,840 --> 00:20:17,600
but there are pull requests and github

440
00:20:17,600 --> 00:20:19,360
so if you are interested in reviewing

441
00:20:19,360 --> 00:20:21,520
them please go ahead we're trying to

442
00:20:21,520 --> 00:20:23,760
convert as soon as possible

443
00:20:23,760 --> 00:20:26,559
so please help us to review the pull

444
00:20:26,559 --> 00:20:29,360
request and march into the draft

445
00:20:29,360 --> 00:20:32,080
there is support for publication um

446
00:20:32,080 --> 00:20:34,640
sps on mailing list as well as

447
00:20:34,640 --> 00:20:37,840
on in the last meeting um

448
00:20:37,840 --> 00:20:39,520
and then

449
00:20:39,520 --> 00:20:43,039
for issue two um i just noted here it's

450
00:20:43,039 --> 00:20:45,360
it's not um

451
00:20:45,360 --> 00:20:47,600
it can be considered for future but not

452
00:20:47,600 --> 00:20:49,039
now

453
00:20:49,039 --> 00:20:51,280
that's what that's what we think

454
00:20:51,280 --> 00:20:55,440
um that's all i have but we can

455
00:20:55,440 --> 00:20:58,799
we can go through the queue

456
00:20:59,440 --> 00:21:00,640
richard

457
00:21:00,640 --> 00:21:03,200
so richard just an observation so i

458
00:21:03,200 --> 00:21:05,440
believe uh none of the

459
00:21:05,440 --> 00:21:08,240
current implementations of cubic are

460
00:21:08,240 --> 00:21:11,679
pure um just look at just implementing

461
00:21:11,679 --> 00:21:14,400
cubic as it is in this draft so for the

462
00:21:14,400 --> 00:21:16,640
slow start it will typically always have

463
00:21:16,640 --> 00:21:19,760
some kind of high start or more advanced

464
00:21:19,760 --> 00:21:21,200
functionality there

465
00:21:21,200 --> 00:21:23,280
if perhaps the notable exception of

466
00:21:23,280 --> 00:21:25,520
freebsd but their cubic is not the

467
00:21:25,520 --> 00:21:27,440
default method

468
00:21:27,440 --> 00:21:29,440
so maybe it would be worthwhile so i

469
00:21:29,440 --> 00:21:30,559
would

470
00:21:30,559 --> 00:21:32,000
want to say that i

471
00:21:32,000 --> 00:21:34,640
agree with your statement here that it

472
00:21:34,640 --> 00:21:35,520
would

473
00:21:35,520 --> 00:21:37,280
not be advisable to change the

474
00:21:37,280 --> 00:21:40,000
recommended beta value at this stage

475
00:21:40,000 --> 00:21:42,880
however perhaps make a note in the

476
00:21:42,880 --> 00:21:45,760
document that a pure

477
00:21:45,760 --> 00:21:48,799
slow start as you know in the

478
00:21:48,799 --> 00:21:51,760
in the past is maybe not the best uh

479
00:21:51,760 --> 00:21:54,240
ideal situation to determine when to

480
00:21:54,240 --> 00:21:57,200
stop slowstar when running kubic

481
00:21:57,200 --> 00:21:59,679
thank you okay thank you richard and

482
00:21:59,679 --> 00:22:03,039
that's covered in the document

483
00:22:04,799 --> 00:22:06,480
all right bob briscoe i think if you are

484
00:22:06,480 --> 00:22:08,799
going to mention anything about 0.5 in

485
00:22:08,799 --> 00:22:10,159
the document and i don't know whether

486
00:22:10,159 --> 00:22:12,720
that is needed given the way richard

487
00:22:12,720 --> 00:22:13,919
said that but

488
00:22:13,919 --> 00:22:16,159
if you are i think um

489
00:22:16,159 --> 00:22:18,960
there's also potential problems with

490
00:22:18,960 --> 00:22:21,120
0.5 in that you then get more queue

491
00:22:21,120 --> 00:22:22,799
variation so you get more delay

492
00:22:22,799 --> 00:22:24,400
variation

493
00:22:24,400 --> 00:22:26,240
and so you know that's that's obviously

494
00:22:26,240 --> 00:22:27,679
something as you say has not been

495
00:22:27,679 --> 00:22:29,919
measured and if it was i think you you'd

496
00:22:29,919 --> 00:22:32,880
find things were worse

497
00:22:33,200 --> 00:22:35,840
thank you bob

498
00:22:36,159 --> 00:22:38,640
uh you see from the floor this is my

499
00:22:38,640 --> 00:22:41,039
individual command for each one

500
00:22:41,039 --> 00:22:43,600
and each one is kind of overshooting

501
00:22:43,600 --> 00:22:45,440
issues rostered

502
00:22:45,440 --> 00:22:48,159
but uh i think you know this is the

503
00:22:48,159 --> 00:22:50,640
issue for roster not the security cubic

504
00:22:50,640 --> 00:22:53,280
if we use cubic it's more visible

505
00:22:53,280 --> 00:22:55,679
compared to rena but even we know we

506
00:22:55,679 --> 00:22:58,240
have overshooting issues so i think the

507
00:22:58,240 --> 00:23:00,320
problem should be fixed

508
00:23:00,320 --> 00:23:03,360
in slow start not a cubic which

509
00:23:03,360 --> 00:23:06,000
all we can do in cubic is just tuning

510
00:23:06,000 --> 00:23:08,400
but at this point i'm not sure if we

511
00:23:08,400 --> 00:23:11,120
need to do that

512
00:23:12,799 --> 00:23:15,440
uh putting my chair hat on uh if folks

513
00:23:15,440 --> 00:23:17,280
could try to add themselves to the cue

514
00:23:17,280 --> 00:23:19,520
uh even if you're in person uh that'd be

515
00:23:19,520 --> 00:23:23,000
great thanks

516
00:23:28,320 --> 00:23:31,720
any more comments

517
00:23:36,960 --> 00:23:40,000
on the chat um rodney is asking whether

518
00:23:40,000 --> 00:23:41,600
you can run high start plus for this

519
00:23:41,600 --> 00:23:44,080
cubic

520
00:23:44,720 --> 00:23:45,919
um

521
00:23:45,919 --> 00:23:46,880
yes

522
00:23:46,880 --> 00:23:49,279
people are running that already it's

523
00:23:49,279 --> 00:23:51,440
also mentioned in the draft

524
00:23:51,440 --> 00:23:53,679
yep

525
00:23:53,679 --> 00:23:55,919
uh stuart cheshire from apple so my

526
00:23:55,919 --> 00:23:57,600
quick comment is

527
00:23:57,600 --> 00:24:00,080
this is largely documenting

528
00:24:00,080 --> 00:24:01,840
what is incredibly

529
00:24:01,840 --> 00:24:04,080
prevalent on the internet today so if

530
00:24:04,080 --> 00:24:06,400
somebody wanted to propose

531
00:24:06,400 --> 00:24:09,679
a cubic version 2 with a different

532
00:24:09,679 --> 00:24:12,400
beta parameter

533
00:24:12,400 --> 00:24:15,360
that's fine as a proposal that the itf

534
00:24:15,360 --> 00:24:16,480
would discuss

535
00:24:16,480 --> 00:24:18,159
but that is really not the purpose of

536
00:24:18,159 --> 00:24:19,600
this and

537
00:24:19,600 --> 00:24:20,480
um

538
00:24:20,480 --> 00:24:22,320
this is reflecting the reality as

539
00:24:22,320 --> 00:24:24,080
several people have said the reality has

540
00:24:24,080 --> 00:24:26,080
had the benefit good or bad of lots and

541
00:24:26,080 --> 00:24:28,080
lots of testing this proposed

542
00:24:28,080 --> 00:24:29,360
alternative

543
00:24:29,360 --> 00:24:30,799
uh

544
00:24:30,799 --> 00:24:33,039
would take years of study to get to the

545
00:24:33,039 --> 00:24:34,720
same level of understanding about how it

546
00:24:34,720 --> 00:24:37,840
behaves at the large scale

547
00:24:44,880 --> 00:24:47,440
okay um

548
00:24:47,440 --> 00:24:50,240
any more comment

549
00:24:50,720 --> 00:24:53,440
and then um

550
00:24:54,159 --> 00:24:56,880
sir rodney asked on the chat does that

551
00:24:56,880 --> 00:25:00,240
solve the alpha issue of

552
00:25:00,240 --> 00:25:02,720
issue one i don't know if folks

553
00:25:02,720 --> 00:25:05,360
understand the issue one

554
00:25:05,360 --> 00:25:07,760
um

555
00:25:07,760 --> 00:25:09,919
yeah sorry so the issue one is a little

556
00:25:09,919 --> 00:25:11,679
bit complicated if you read on the

557
00:25:11,679 --> 00:25:13,600
mailing list it might provide some

558
00:25:13,600 --> 00:25:15,279
insight

559
00:25:15,279 --> 00:25:18,480
but it's really hard to explain it um in

560
00:25:18,480 --> 00:25:21,360
in short time

561
00:25:24,080 --> 00:25:27,840
yeah for each one is our model and so i

562
00:25:27,840 --> 00:25:30,000
have some you know mark and i have been

563
00:25:30,000 --> 00:25:31,200
a discussion

564
00:25:31,200 --> 00:25:32,159
and then

565
00:25:32,159 --> 00:25:33,520
um

566
00:25:33,520 --> 00:25:36,080
i i have some comment and mike mark has

567
00:25:36,080 --> 00:25:39,120
some comment and then we exchange a lot

568
00:25:39,120 --> 00:25:40,720
of comment each other

569
00:25:40,720 --> 00:25:42,640
then um

570
00:25:42,640 --> 00:25:44,320
right now i have some common argument

571
00:25:44,320 --> 00:25:46,559
his comment but for babies come to

572
00:25:46,559 --> 00:25:48,799
argument contrary i will have a counter

573
00:25:48,799 --> 00:25:50,559
argument i've contacted me to comment

574
00:25:50,559 --> 00:25:51,520
argument

575
00:25:51,520 --> 00:25:54,799
so the conclusion is

576
00:25:54,799 --> 00:25:56,640
this is not the easy issue

577
00:25:56,640 --> 00:25:58,480
that's a conclusion from my from this

578
00:25:58,480 --> 00:25:59,440
point

579
00:25:59,440 --> 00:26:01,600
and that means in order to settle down

580
00:26:01,600 --> 00:26:03,279
this issue we need more

581
00:26:03,279 --> 00:26:05,279
detail analysis otherwise we cannot

582
00:26:05,279 --> 00:26:08,080
settle down discussion but at this point

583
00:26:08,080 --> 00:26:09,360
i don't know

584
00:26:09,360 --> 00:26:11,360
if we should you know wait for the

585
00:26:11,360 --> 00:26:13,200
conclusion of the discussion may take

586
00:26:13,200 --> 00:26:15,840
years for detailed analysis

587
00:26:15,840 --> 00:26:19,200
and if our purpose is you know like

588
00:26:19,200 --> 00:26:20,400
uh

589
00:26:20,400 --> 00:26:22,840
publishing the cubic draft in

590
00:26:22,840 --> 00:26:25,440
2025 this is a

591
00:26:25,440 --> 00:26:27,760
perfect version of tubing then

592
00:26:27,760 --> 00:26:30,159
we can wait but uh this is i don't know

593
00:26:30,159 --> 00:26:32,159
this is what we want

594
00:26:32,159 --> 00:26:33,440
basically

595
00:26:33,440 --> 00:26:34,400
um

596
00:26:34,400 --> 00:26:35,120
so

597
00:26:35,120 --> 00:26:36,159
if

598
00:26:36,159 --> 00:26:39,120
that's just says no if we want to make a

599
00:26:39,120 --> 00:26:41,840
cute version too it's totally fine

600
00:26:41,840 --> 00:26:43,200
we should do it

601
00:26:43,200 --> 00:26:46,159
but not this draft i think that's i

602
00:26:46,159 --> 00:26:47,760
think that's the you know general

603
00:26:47,760 --> 00:26:50,159
consensus of the working group uh we

604
00:26:50,159 --> 00:26:51,440
have you know

605
00:26:51,440 --> 00:26:53,440
analyze the consensus in the previous

606
00:26:53,440 --> 00:26:54,960
meeting and then

607
00:26:54,960 --> 00:26:57,520
we see sorry the concerns that that we

608
00:26:57,520 --> 00:26:59,600
are going to publish this draft

609
00:26:59,600 --> 00:27:01,679
as a proposed standard

610
00:27:01,679 --> 00:27:04,720
and i don't see any you know

611
00:27:04,720 --> 00:27:06,640
big opposition

612
00:27:06,640 --> 00:27:09,279
to change current situation from my

613
00:27:09,279 --> 00:27:10,799
point of view

614
00:27:10,799 --> 00:27:14,799
and the one thing i want to emphasize is

615
00:27:14,799 --> 00:27:16,480
the cubic draft

616
00:27:16,480 --> 00:27:18,799
is not a threat for the internet if we

617
00:27:18,799 --> 00:27:21,279
deploy cubic there is no congestion crap

618
00:27:21,279 --> 00:27:22,159
happen

619
00:27:22,159 --> 00:27:23,679
nobody says that

620
00:27:23,679 --> 00:27:26,559
so what we are arguing is if we compare

621
00:27:26,559 --> 00:27:28,320
renault and the cubic

622
00:27:28,320 --> 00:27:30,960
and then cubic might be aggressive and

623
00:27:30,960 --> 00:27:31,919
then

624
00:27:31,919 --> 00:27:33,760
some people say it's not true aggressive

625
00:27:33,760 --> 00:27:35,200
it's maybe really aggressive but some

626
00:27:35,200 --> 00:27:37,600
people say it's drastically aggressive

627
00:27:37,600 --> 00:27:40,080
but this is you know under discussion we

628
00:27:40,080 --> 00:27:42,240
don't see any conclusion yet but in

629
00:27:42,240 --> 00:27:44,480
order to see the conclusion

630
00:27:44,480 --> 00:27:46,240
we need more analysis not the kind of

631
00:27:46,240 --> 00:27:47,600
situation

632
00:27:47,600 --> 00:27:49,360
and then at this point

633
00:27:49,360 --> 00:27:51,440
um

634
00:27:51,440 --> 00:27:53,679
does people want to wait

635
00:27:53,679 --> 00:27:55,600
for the data analysis of the result what

636
00:27:55,600 --> 00:27:57,600
we want to publish and then let's

637
00:27:57,600 --> 00:28:00,000
discuss about the qb version too which

638
00:28:00,000 --> 00:28:02,080
one people want that's the point of the

639
00:28:02,080 --> 00:28:04,159
discussion in my understanding

640
00:28:04,159 --> 00:28:07,039
and if there is if people any comment on

641
00:28:07,039 --> 00:28:08,399
this one

642
00:28:08,399 --> 00:28:11,360
i would like to hear it

643
00:28:11,360 --> 00:28:13,520
if there is no strong opinion i think i

644
00:28:13,520 --> 00:28:17,480
would like to proceed it

645
00:28:17,760 --> 00:28:19,919
and i just want to add i just want to

646
00:28:19,919 --> 00:28:23,279
add to what yoshi said about

647
00:28:23,279 --> 00:28:25,520
doing these analysis these are more

648
00:28:25,520 --> 00:28:28,399
research thing at this point and not

649
00:28:28,399 --> 00:28:30,799
something that would get to the

650
00:28:30,799 --> 00:28:35,279
standards or ietf organization before

651
00:28:35,279 --> 00:28:38,240
folks do research on it so that's a lot

652
00:28:38,240 --> 00:28:40,720
of time

653
00:28:41,440 --> 00:28:44,440
corey

654
00:28:44,559 --> 00:28:45,840
hello

655
00:28:45,840 --> 00:28:49,200
yeah i am going to say again what i said

656
00:28:49,200 --> 00:28:51,840
last time of the night

657
00:28:51,840 --> 00:28:54,640
i don't like this position i think we

658
00:28:54,640 --> 00:28:58,000
should have done respect differently

659
00:28:58,000 --> 00:28:58,799
this

660
00:28:58,799 --> 00:29:00,640
has been deployed it's the one we're

661
00:29:00,640 --> 00:29:01,760
using

662
00:29:01,760 --> 00:29:04,399
i think we should publish this as a ps i

663
00:29:04,399 --> 00:29:06,159
think we should note down this important

664
00:29:06,159 --> 00:29:07,919
discussion we're having now as part of

665
00:29:07,919 --> 00:29:09,360
that ps

666
00:29:09,360 --> 00:29:11,520
and we should keep progressing

667
00:29:11,520 --> 00:29:13,279
i don't think we should stop and start

668
00:29:13,279 --> 00:29:15,120
evaluating something different to what's

669
00:29:15,120 --> 00:29:18,080
actually being deployed

670
00:29:21,840 --> 00:29:24,240
marching

671
00:29:25,360 --> 00:29:27,200
martin do google no hats to be clear

672
00:29:27,200 --> 00:29:28,960
we're talking about the 0.5 thing on

673
00:29:28,960 --> 00:29:30,720
whether we want to see more data there

674
00:29:30,720 --> 00:29:33,039
before we move forward

675
00:29:33,039 --> 00:29:35,279
or did i misunderstand your statement

676
00:29:35,279 --> 00:29:37,679
yoshi

677
00:29:37,760 --> 00:29:40,320
which issue do is are we debating more

678
00:29:40,320 --> 00:29:42,080
more study of

679
00:29:42,080 --> 00:29:42,880
um

680
00:29:42,880 --> 00:29:46,480
one thing is uh issue one uh cubic uh

681
00:29:46,480 --> 00:29:48,320
tcp friendly model

682
00:29:48,320 --> 00:29:52,080
and second one is uh

683
00:29:52,720 --> 00:29:55,039
beta for rate zero point

684
00:29:55,039 --> 00:29:57,520
zero point seven to zero point five

685
00:29:57,520 --> 00:29:59,679
uh after three step

686
00:29:59,679 --> 00:30:02,720
that's another the two things okay

687
00:30:02,720 --> 00:30:05,200
um well all right well with issue one i

688
00:30:05,200 --> 00:30:07,760
think um the case was made that was too

689
00:30:07,760 --> 00:30:09,520
complicated to discuss

690
00:30:09,520 --> 00:30:11,760
in person um and i've not read the email

691
00:30:11,760 --> 00:30:13,600
so i will i don't know

692
00:30:13,600 --> 00:30:15,440
issue two like i i think i'm gonna

693
00:30:15,440 --> 00:30:17,520
concur with the other people that

694
00:30:17,520 --> 00:30:20,880
0.7 is what we deployed and um 0.5 is

695
00:30:20,880 --> 00:30:24,640
very researchy and i think um

696
00:30:24,640 --> 00:30:26,240
like opening a research topic is not

697
00:30:26,240 --> 00:30:29,760
appropriate for this effort yeah

698
00:30:29,760 --> 00:30:30,720
thanks

699
00:30:30,720 --> 00:30:33,039
thank you

700
00:30:33,760 --> 00:30:34,840
so

701
00:30:34,840 --> 00:30:40,720
um my position as an individual is um

702
00:30:40,720 --> 00:30:42,880
we should spend some time on discussing

703
00:30:42,880 --> 00:30:45,039
the issues because uh

704
00:30:45,039 --> 00:30:47,039
if it's if it's a mistake in the

705
00:30:47,039 --> 00:30:48,480
specification

706
00:30:48,480 --> 00:30:51,679
we can fix it as the one new fixed

707
00:30:51,679 --> 00:30:54,159
um if we have something like the dot

708
00:30:54,159 --> 00:30:55,520
zero

709
00:30:55,520 --> 00:30:57,919
versus dot five

710
00:30:57,919 --> 00:30:59,039
i would

711
00:30:59,039 --> 00:31:02,640
be happy with documenting that

712
00:31:02,640 --> 00:31:04,480
people are now using

713
00:31:04,480 --> 00:31:05,919
um

714
00:31:05,919 --> 00:31:07,919
5.7

715
00:31:07,919 --> 00:31:09,440
and

716
00:31:09,440 --> 00:31:12,080
give a short description why

717
00:31:12,080 --> 00:31:13,840
there was a discussion that dot five

718
00:31:13,840 --> 00:31:15,600
might be appropriate or the better value

719
00:31:15,600 --> 00:31:17,679
or whatever but it is about documenting

720
00:31:17,679 --> 00:31:21,600
what's now being used whether that is

721
00:31:21,760 --> 00:31:24,000
related to a mistake or not doesn't

722
00:31:24,000 --> 00:31:26,320
matter

723
00:31:28,080 --> 00:31:31,080
richard

724
00:31:43,130 --> 00:31:44,559
[Music]

725
00:31:44,559 --> 00:31:46,240
i believe we should be documenting in

726
00:31:46,240 --> 00:31:48,320
this draft what has been deployed where

727
00:31:48,320 --> 00:31:50,240
we have a lot of uh

728
00:31:50,240 --> 00:31:52,240
experience already we have known that we

729
00:31:52,240 --> 00:31:53,679
haven't

730
00:31:53,679 --> 00:31:55,519
corrupted or collapsed the entire

731
00:31:55,519 --> 00:31:56,559
internet

732
00:31:56,559 --> 00:31:58,480
and

733
00:31:58,480 --> 00:32:01,120
going at this stage to 0.5 and holding

734
00:32:01,120 --> 00:32:03,440
this document for an extended period of

735
00:32:03,440 --> 00:32:04,720
time

736
00:32:04,720 --> 00:32:06,880
then quite frankly nobody will actually

737
00:32:06,880 --> 00:32:09,120
change the beta parameter

738
00:32:09,120 --> 00:32:11,279
i don't know how what value that would

739
00:32:11,279 --> 00:32:14,519
really bring

740
00:32:19,600 --> 00:32:23,519
stuart trasher from apple um

741
00:32:26,840 --> 00:32:28,799
uh

742
00:32:28,799 --> 00:32:30,320
i'm kind of repeating my previous

743
00:32:30,320 --> 00:32:32,640
comments but uh this conversation sounds

744
00:32:32,640 --> 00:32:36,000
very strange to me taking a step back

745
00:32:36,000 --> 00:32:38,960
it is widely been observed that cubic

746
00:32:38,960 --> 00:32:40,840
probably the most dominant congestion

747
00:32:40,840 --> 00:32:43,440
control in use on the internet doesn't

748
00:32:43,440 --> 00:32:46,000
have an rfc specifying it and that's a

749
00:32:46,000 --> 00:32:47,840
gap we need to fix

750
00:32:47,840 --> 00:32:50,080
if we choose to write an rfc specifying

751
00:32:50,080 --> 00:32:51,760
some other fictional protocol that no

752
00:32:51,760 --> 00:32:53,919
one uses we've totally failed in that

753
00:32:53,919 --> 00:32:55,200
first goal

754
00:32:55,200 --> 00:32:57,840
one of the goals is document

755
00:32:57,840 --> 00:33:00,000
what is whether we liked or not the

756
00:33:00,000 --> 00:33:01,679
dominant congestion control for the last

757
00:33:01,679 --> 00:33:05,640
decade let's write it down

758
00:33:22,000 --> 00:33:24,960
okay um i i just want to switch to issue

759
00:33:24,960 --> 00:33:27,279
one i think issue is stunned from my

760
00:33:27,279 --> 00:33:28,320
point of view

761
00:33:28,320 --> 00:33:30,399
um

762
00:33:30,399 --> 00:33:33,120
all i will say is that the um model i

763
00:33:33,120 --> 00:33:36,240
wrote up um was uh for tailed well for

764
00:33:36,240 --> 00:33:38,799
tail drop and aqm and i couldn't acrom

765
00:33:38,799 --> 00:33:40,159
is more difficult because it depends on

766
00:33:40,159 --> 00:33:41,600
which one it is

767
00:33:41,600 --> 00:33:43,039
um

768
00:33:43,039 --> 00:33:44,080
and

769
00:33:44,080 --> 00:33:45,919
for the aqm model

770
00:33:45,919 --> 00:33:47,440
um

771
00:33:47,440 --> 00:33:49,360
results we showed yesterday comparing

772
00:33:49,360 --> 00:33:51,519
prague against cubic and prague against

773
00:33:51,519 --> 00:33:54,159
reno gave exactly the same results

774
00:33:54,159 --> 00:33:56,320
in

775
00:33:56,399 --> 00:33:57,679
which

776
00:33:57,679 --> 00:34:00,000
over a range of link rates and round

777
00:34:00,000 --> 00:34:01,519
trip times

778
00:34:01,519 --> 00:34:03,840
so you know

779
00:34:03,840 --> 00:34:05,279
i can't believe that no one else has

780
00:34:05,279 --> 00:34:07,120
done results like that but we have

781
00:34:07,120 --> 00:34:09,280
results as of now

782
00:34:09,280 --> 00:34:11,839
that show that reno in its tcp friendly

783
00:34:11,839 --> 00:34:13,839
mode with an aqm is

784
00:34:13,839 --> 00:34:16,960
um identical to cubic within the

785
00:34:16,960 --> 00:34:19,440
ability of the human eye to see

786
00:34:19,440 --> 00:34:22,320
differences in graphs

787
00:34:24,320 --> 00:34:27,679
so so yes that's true and then bob

788
00:34:27,679 --> 00:34:29,119
presented that with those results

789
00:34:29,119 --> 00:34:31,280
yesterday if somebody wants to look at

790
00:34:31,280 --> 00:34:33,760
it those are available on the iccrg

791
00:34:33,760 --> 00:34:35,918
slides

792
00:34:35,918 --> 00:34:38,560
about this um

793
00:34:38,560 --> 00:34:41,679
0.7 to 0.5 i want to reply to michael

794
00:34:41,679 --> 00:34:43,839
about about

795
00:34:43,839 --> 00:34:45,599
whether it was a mistake i don't think

796
00:34:45,599 --> 00:34:48,639
there's pros and cons to things uh

797
00:34:48,639 --> 00:34:51,280
probably in slow start it is a little

798
00:34:51,280 --> 00:34:52,480
bit

799
00:34:52,480 --> 00:34:53,520
um

800
00:34:53,520 --> 00:34:57,920
maybe takes two rounds to reduce the

801
00:34:57,920 --> 00:35:00,560
uh to basically get below the

802
00:35:00,560 --> 00:35:01,440
um

803
00:35:01,440 --> 00:35:02,560
you know

804
00:35:02,560 --> 00:35:04,400
the

805
00:35:04,400 --> 00:35:07,359
basically avoid second loss um

806
00:35:07,359 --> 00:35:10,640
it's it's for that that's the con and i

807
00:35:10,640 --> 00:35:12,160
i think

808
00:35:12,160 --> 00:35:14,560
um probably in slow start there is no

809
00:35:14,560 --> 00:35:17,520
pro but i have to think thoroughly uh

810
00:35:17,520 --> 00:35:20,240
but in congestion avoidance it's the

811
00:35:20,240 --> 00:35:23,040
queueing delay variation is lower

812
00:35:23,040 --> 00:35:26,079
when you use 0.7

813
00:35:26,079 --> 00:35:28,240
because your reduction is smaller that

814
00:35:28,240 --> 00:35:30,800
means you were

815
00:35:30,800 --> 00:35:33,599
you need you need don't need as deep

816
00:35:33,599 --> 00:35:37,200
buffers as new reno need and perhaps it

817
00:35:37,200 --> 00:35:40,000
also makes sense for slow start because

818
00:35:40,000 --> 00:35:42,640
if you have less deeper buffer

819
00:35:42,640 --> 00:35:44,400
then

820
00:35:44,400 --> 00:35:46,720
this slow start will also

821
00:35:46,720 --> 00:35:50,000
kind of have low delay variation

822
00:35:50,000 --> 00:35:52,000
so correct me if i'm wrong but

823
00:35:52,000 --> 00:35:54,560
it's not it's just a mystic it's it's

824
00:35:54,560 --> 00:35:56,800
about pros and cons and

825
00:35:56,800 --> 00:35:59,599
we can't just look at

826
00:35:59,599 --> 00:36:02,480
just look at one side to make a decision

827
00:36:02,480 --> 00:36:04,079
as i said this is not going to be

828
00:36:04,079 --> 00:36:06,240
decided

829
00:36:06,240 --> 00:36:10,078
right away it needs some research

830
00:36:10,240 --> 00:36:13,479
thank you

831
00:36:18,240 --> 00:36:20,160
uh yeah hi can you hear me

832
00:36:20,160 --> 00:36:21,119
yes

833
00:36:21,119 --> 00:36:23,599
okay great yeah i just had a a few

834
00:36:23,599 --> 00:36:25,440
comments to follow up on a few of the

835
00:36:25,440 --> 00:36:27,920
things said recently um

836
00:36:27,920 --> 00:36:29,119
i think

837
00:36:29,119 --> 00:36:31,359
there was a statement made that probably

838
00:36:31,359 --> 00:36:33,440
no one would change the beta value in

839
00:36:33,440 --> 00:36:34,480
practice

840
00:36:34,480 --> 00:36:37,520
um i i would tend to disagree with that

841
00:36:37,520 --> 00:36:39,359
i think

842
00:36:39,359 --> 00:36:42,000
there are definite issues with the 0.7

843
00:36:42,000 --> 00:36:44,640
versus 0.5 and i think in the future

844
00:36:44,640 --> 00:36:45,680
um

845
00:36:45,680 --> 00:36:47,760
i could see for example linux deploying

846
00:36:47,760 --> 00:36:49,040
something different

847
00:36:49,040 --> 00:36:50,240
um

848
00:36:50,240 --> 00:36:52,240
you know after appropriate research but

849
00:36:52,240 --> 00:36:53,760
i agree with the consensus in the room

850
00:36:53,760 --> 00:36:55,280
that for this document we should

851
00:36:55,280 --> 00:36:57,200
document what's deployed already rather

852
00:36:57,200 --> 00:36:59,680
than embarking on a research expedition

853
00:36:59,680 --> 00:37:01,760
before publishing this

854
00:37:01,760 --> 00:37:02,720
um

855
00:37:02,720 --> 00:37:03,839
in terms of

856
00:37:03,839 --> 00:37:05,680
bob's remark about

857
00:37:05,680 --> 00:37:08,079
the tests recently showing reno and

858
00:37:08,079 --> 00:37:09,119
cubic

859
00:37:09,119 --> 00:37:12,560
look the same if i recall correctly

860
00:37:12,560 --> 00:37:13,920
those tests were

861
00:37:13,920 --> 00:37:16,800
reno by itself and cubic by itself but i

862
00:37:16,800 --> 00:37:19,200
don't think we would

863
00:37:19,200 --> 00:37:21,680
expect that to show the issue one i

864
00:37:21,680 --> 00:37:23,920
think issue one is about the interaction

865
00:37:23,920 --> 00:37:25,839
between reno and cubic interacting in

866
00:37:25,839 --> 00:37:28,560
the same queue

867
00:37:28,640 --> 00:37:30,400
where

868
00:37:30,400 --> 00:37:32,240
the difference is basically the cubic

869
00:37:32,240 --> 00:37:34,000
increases at sea wind every other round

870
00:37:34,000 --> 00:37:35,119
trip time

871
00:37:35,119 --> 00:37:38,400
and is therefore um you know potentially

872
00:37:38,400 --> 00:37:40,160
less likely to see

873
00:37:40,160 --> 00:37:42,480
uh packet loss than reno is when sharing

874
00:37:42,480 --> 00:37:44,560
the same queue so i think we might need

875
00:37:44,560 --> 00:37:46,720
more more testing really to

876
00:37:46,720 --> 00:37:47,839
to

877
00:37:47,839 --> 00:37:49,920
understand issue one more deeply but

878
00:37:49,920 --> 00:37:51,200
again i think that's something that

879
00:37:51,200 --> 00:37:52,400
should be put off

880
00:37:52,400 --> 00:37:53,839
to the future we should just document

881
00:37:53,839 --> 00:37:55,440
what cubic does now

882
00:37:55,440 --> 00:37:56,560
um

883
00:37:56,560 --> 00:37:58,000
and then

884
00:37:58,000 --> 00:38:01,359
i do another question earlier was do we

885
00:38:01,359 --> 00:38:04,079
what about this 0.7 versus 0.5 in

886
00:38:04,079 --> 00:38:06,800
congestion avoidance and i think as i

887
00:38:06,800 --> 00:38:08,640
think as stated on the email list i

888
00:38:08,640 --> 00:38:11,760
think there is a potential concern with

889
00:38:11,760 --> 00:38:14,000
that 0.7 versus 0.5 distinction and

890
00:38:14,000 --> 00:38:16,000
congestion avoidance as well because

891
00:38:16,000 --> 00:38:18,480
cubic can increase its congestion window

892
00:38:18,480 --> 00:38:21,440
at up to 1.5 x per round trip time and

893
00:38:21,440 --> 00:38:23,119
so if it gets to that rate of increase

894
00:38:23,119 --> 00:38:25,920
then 0.7 is not enough to pull the sea

895
00:38:25,920 --> 00:38:28,800
wind back down to a level that will

896
00:38:28,800 --> 00:38:30,640
actually fit in the network so i think

897
00:38:30,640 --> 00:38:33,359
there is a issue there as well again

898
00:38:33,359 --> 00:38:34,160
worth

899
00:38:34,160 --> 00:38:36,800
being making a long-term research

900
00:38:36,800 --> 00:38:38,240
priority and not something in this

901
00:38:38,240 --> 00:38:42,319
document um uh thanks a lot

902
00:38:43,119 --> 00:38:45,280
i just wanted to say that

903
00:38:45,280 --> 00:38:47,440
that the word mistake

904
00:38:47,440 --> 00:38:49,440
i was choosing was not

905
00:38:49,440 --> 00:38:51,839
i mean i wanted to

906
00:38:51,839 --> 00:38:54,560
my point was please document

907
00:38:54,560 --> 00:38:56,720
what is out there

908
00:38:56,720 --> 00:38:58,480
and in the case there is a discussion

909
00:38:58,480 --> 00:38:59,520
about

910
00:38:59,520 --> 00:39:02,079
whether anything else is better or not

911
00:39:02,079 --> 00:39:02,800
or

912
00:39:02,800 --> 00:39:04,800
this kind of stuff we might want to

913
00:39:04,800 --> 00:39:07,520
document it but we don't want to discuss

914
00:39:07,520 --> 00:39:10,800
this for years to figure out what's

915
00:39:10,800 --> 00:39:12,960
what is what is better so it's about

916
00:39:12,960 --> 00:39:16,320
documenting what is out there

917
00:39:16,320 --> 00:39:18,720
martin

918
00:39:20,400 --> 00:39:22,160
it was a comeback on what neil said so

919
00:39:22,160 --> 00:39:23,040
yeah

920
00:39:23,040 --> 00:39:25,520
um yeah so bob briscoe

921
00:39:25,520 --> 00:39:28,480
yeah neil there were results of um

922
00:39:28,480 --> 00:39:29,920
prague versus

923
00:39:29,920 --> 00:39:32,240
cubic and pride versus reno in the same

924
00:39:32,240 --> 00:39:34,480
scenario so you could see compare

925
00:39:34,480 --> 00:39:36,560
how reno fights a different congestion

926
00:39:36,560 --> 00:39:38,800
control and how cubic does as well in an

927
00:39:38,800 --> 00:39:40,000
aqm

928
00:39:40,000 --> 00:39:42,880
um and they're also cubic with ecn

929
00:39:42,880 --> 00:39:44,720
versus cubic without and

930
00:39:44,720 --> 00:39:47,040
cubic versus reno and so on so it wasn't

931
00:39:47,040 --> 00:39:50,240
just one flow on its own

932
00:39:51,280 --> 00:39:53,760
uh martin do google again no hats um i

933
00:39:53,760 --> 00:39:55,280
would like to zoom out a little bit

934
00:39:55,280 --> 00:39:57,839
because i think the basic tension here

935
00:39:57,839 --> 00:39:59,520
is between

936
00:39:59,520 --> 00:40:01,680
documenting what is actually out there

937
00:40:01,680 --> 00:40:03,680
and like

938
00:40:03,680 --> 00:40:05,119
you know because we sort of change

939
00:40:05,119 --> 00:40:07,680
control this document um maybe making

940
00:40:07,680 --> 00:40:10,319
some fixes and correcting you know bugs

941
00:40:10,319 --> 00:40:12,000
so-called bugs and what what is how it

942
00:40:12,000 --> 00:40:13,280
is implemented

943
00:40:13,280 --> 00:40:15,119
and i think the right way to think about

944
00:40:15,119 --> 00:40:16,640
this is

945
00:40:16,640 --> 00:40:17,680
that we have a bunch of cubic

946
00:40:17,680 --> 00:40:19,520
implementers in the room

947
00:40:19,520 --> 00:40:21,680
and i think if in relatively short order

948
00:40:21,680 --> 00:40:25,040
we able to reach the rough consensus

949
00:40:25,040 --> 00:40:27,119
that like we really should do this with

950
00:40:27,119 --> 00:40:28,800
cubic and

951
00:40:28,800 --> 00:40:30,160
you know we will probably go back and do

952
00:40:30,160 --> 00:40:32,160
this in our implementations

953
00:40:32,160 --> 00:40:34,240
that it would be appropriate to put that

954
00:40:34,240 --> 00:40:35,680
in the document

955
00:40:35,680 --> 00:40:36,560
um

956
00:40:36,560 --> 00:40:38,319
and make maybe make a note that some

957
00:40:38,319 --> 00:40:40,000
implementations might not do this

958
00:40:40,000 --> 00:40:41,599
because you know the previous consensus

959
00:40:41,599 --> 00:40:42,720
was x

960
00:40:42,720 --> 00:40:44,079
and that's fine

961
00:40:44,079 --> 00:40:46,000
um i'm not suggesting we start research

962
00:40:46,000 --> 00:40:47,920
projects in this area that that could be

963
00:40:47,920 --> 00:40:50,240
a different document but like

964
00:40:50,240 --> 00:40:52,319
if everyone says oh this number you know

965
00:40:52,319 --> 00:40:54,160
was four but it actually should be five

966
00:40:54,160 --> 00:40:55,839
and that was just a dumb thing it's a

967
00:40:55,839 --> 00:40:57,280
bug and we all sort of agree with that

968
00:40:57,280 --> 00:40:59,440
then we can absolutely make changes to

969
00:40:59,440 --> 00:41:01,200
what is deployed out there

970
00:41:01,200 --> 00:41:02,400
um

971
00:41:02,400 --> 00:41:04,400
i hope that's helpful but i think that's

972
00:41:04,400 --> 00:41:06,079
the right principle to apply to these

973
00:41:06,079 --> 00:41:09,359
sort of tensions thanks

974
00:41:11,520 --> 00:41:14,240
this is yoshi from my personal opinion

975
00:41:14,240 --> 00:41:16,160
and yeah i

976
00:41:16,160 --> 00:41:19,440
basically i agree

977
00:41:19,440 --> 00:41:21,440
to describing the issues

978
00:41:21,440 --> 00:41:24,319
but uh what i'm wondering is if we you

979
00:41:24,319 --> 00:41:26,960
know describe the detail of the

980
00:41:26,960 --> 00:41:28,560
issuance

981
00:41:28,560 --> 00:41:31,520
and then uh i'm afraid that document is

982
00:41:31,520 --> 00:41:34,240
getting bigger and bigger and complex so

983
00:41:34,240 --> 00:41:37,119
maybe i'm thinking about you know we can

984
00:41:37,119 --> 00:41:39,280
write about some simple no simple

985
00:41:39,280 --> 00:41:41,200
information document describe this

986
00:41:41,200 --> 00:41:43,520
documentation and then and

987
00:41:43,520 --> 00:41:45,359
motivate people to do some more

988
00:41:45,359 --> 00:41:48,400
experiment that might be you know from

989
00:41:48,400 --> 00:41:50,720
my point of view might be preferable to

990
00:41:50,720 --> 00:41:52,560
describe this

991
00:41:52,560 --> 00:41:53,839
specific issue

992
00:41:53,839 --> 00:41:56,319
specifically detail

993
00:41:56,319 --> 00:42:00,040
that's what i'm thinking

994
00:42:02,480 --> 00:42:04,880
thank you

995
00:42:04,880 --> 00:42:06,720
thanks for the discussion um

996
00:42:06,720 --> 00:42:08,160
[Music]

997
00:42:08,160 --> 00:42:10,880
please continue discussing this

998
00:42:10,880 --> 00:42:14,560
on the mailing list and get the issues i

999
00:42:14,560 --> 00:42:16,560
just like to make sure that our current

1000
00:42:16,560 --> 00:42:19,040
consensus is published this document has

1001
00:42:19,040 --> 00:42:21,200
proposed standard and then there is no

1002
00:42:21,200 --> 00:42:24,000
holding back at this point if you have

1003
00:42:24,000 --> 00:42:25,040
any

1004
00:42:25,040 --> 00:42:27,119
objection of it this is a good chance to

1005
00:42:27,119 --> 00:42:30,440
speak up

1006
00:42:32,000 --> 00:42:34,160
okay

1007
00:42:34,160 --> 00:42:36,079
no one does this right now

1008
00:42:36,079 --> 00:42:37,520
okay

1009
00:42:37,520 --> 00:42:38,640
thank you

1010
00:42:38,640 --> 00:42:40,240
um

1011
00:42:40,240 --> 00:42:43,599
then i would suggest we move on to

1012
00:42:43,599 --> 00:42:47,440
u-turn regarding prl

1013
00:42:48,800 --> 00:42:52,800
vidi can you undo the presentation

1014
00:42:52,800 --> 00:42:55,119
can you

1015
00:42:56,560 --> 00:42:58,640
will you present will you run the slides

1016
00:42:58,640 --> 00:43:01,118
your channel

1017
00:43:01,200 --> 00:43:02,400
uh

1018
00:43:02,400 --> 00:43:04,800
sorry i thought will you run your slides

1019
00:43:04,800 --> 00:43:06,160
or should

1020
00:43:06,160 --> 00:43:09,119
uh could you run the slide thank you

1021
00:43:09,119 --> 00:43:13,720
i can try to do that

1022
00:43:18,319 --> 00:43:20,400
thanks

1023
00:43:20,400 --> 00:43:21,680
okay um

1024
00:43:21,680 --> 00:43:23,839
i'm here to present the

1025
00:43:23,839 --> 00:43:27,240
second revision of the rfc

1026
00:43:27,240 --> 00:43:28,960
6937

1027
00:43:28,960 --> 00:43:30,079
this

1028
00:43:30,079 --> 00:43:33,920
um please next slide

1029
00:43:35,040 --> 00:43:38,240
so what is rc 6937

1030
00:43:38,240 --> 00:43:41,280
is to remind people is the

1031
00:43:41,280 --> 00:43:46,160
prr proportional rate reduction um

1032
00:43:46,160 --> 00:43:47,920
for tcp

1033
00:43:47,920 --> 00:43:50,400
um congestion control specifically

1034
00:43:50,400 --> 00:43:53,280
during fast recovery basically

1035
00:43:53,280 --> 00:43:56,240
it decides what the sea would and how

1036
00:43:56,240 --> 00:43:59,680
much how fast to send uh during the fast

1037
00:43:59,680 --> 00:44:01,599
recovery so it's a kind of mini

1038
00:44:01,599 --> 00:44:03,200
congestion control

1039
00:44:03,200 --> 00:44:05,520
uh well it's mini it's actually can be

1040
00:44:05,520 --> 00:44:08,000
used very very often

1041
00:44:08,000 --> 00:44:11,680
when a connection is experiencing

1042
00:44:11,680 --> 00:44:14,319
very frequent losses

1043
00:44:14,319 --> 00:44:16,800
it was published in 2013

1044
00:44:16,800 --> 00:44:19,440
as an experimental and only implement by

1045
00:44:19,440 --> 00:44:22,560
linux at that time uh without rock and

1046
00:44:22,560 --> 00:44:23,920
pop

1047
00:44:23,920 --> 00:44:27,800
um so it uses the previous rc

1048
00:44:27,800 --> 00:44:30,720
3517 the conservative stack based

1049
00:44:30,720 --> 00:44:32,560
recovery

1050
00:44:32,560 --> 00:44:34,160
at that time

1051
00:44:34,160 --> 00:44:35,040
so

1052
00:44:35,040 --> 00:44:38,240
over nine years we have done

1053
00:44:38,240 --> 00:44:39,200
some

1054
00:44:39,200 --> 00:44:41,520
large experiments uh through real

1055
00:44:41,520 --> 00:44:44,720
deployments and revised the algorithm

1056
00:44:44,720 --> 00:44:46,240
several times

1057
00:44:46,240 --> 00:44:48,640
and it's now default in several stacks

1058
00:44:48,640 --> 00:44:51,520
here on linux

1059
00:44:51,520 --> 00:44:52,960
esd

1060
00:44:52,960 --> 00:44:56,720
netflix rack stack and windows

1061
00:44:56,720 --> 00:44:58,480
um

1062
00:44:58,480 --> 00:45:00,640
and i want to emphasize one thing is

1063
00:45:00,640 --> 00:45:02,640
that this

1064
00:45:02,640 --> 00:45:05,280
sort of uh fast recovery congestion

1065
00:45:05,280 --> 00:45:06,319
control

1066
00:45:06,319 --> 00:45:08,880
uh is actually the default no matter

1067
00:45:08,880 --> 00:45:09,839
what

1068
00:45:09,839 --> 00:45:12,160
transition control module you use in

1069
00:45:12,160 --> 00:45:13,520
linux

1070
00:45:13,520 --> 00:45:15,440
except bbr

1071
00:45:15,440 --> 00:45:18,400
but bbr has a lot of this shirt sort of

1072
00:45:18,400 --> 00:45:19,839
um

1073
00:45:19,839 --> 00:45:22,880
principle or algorithm

1074
00:45:22,880 --> 00:45:26,000
like rc 6937

1075
00:45:26,000 --> 00:45:27,119
as well

1076
00:45:27,119 --> 00:45:31,440
so i think uh two a year ago uh i think

1077
00:45:31,440 --> 00:45:33,520
our group decided that this should move

1078
00:45:33,520 --> 00:45:36,079
to standard now given the

1079
00:45:36,079 --> 00:45:39,040
large implementation

1080
00:45:39,040 --> 00:45:42,160
expand pose and the experience that we

1081
00:45:42,160 --> 00:45:46,440
have next slide please

1082
00:45:49,760 --> 00:45:52,240
so let's talk about the most important

1083
00:45:52,240 --> 00:45:56,480
improvement of uh the original algorithm

1084
00:45:56,480 --> 00:45:59,520
uh that is when the in-flight drops

1085
00:45:59,520 --> 00:46:01,359
below ss stretch

1086
00:46:01,359 --> 00:46:04,240
right so for example if your

1087
00:46:04,240 --> 00:46:05,680
um

1088
00:46:05,680 --> 00:46:08,000
ceiling was 20 and

1089
00:46:08,000 --> 00:46:11,280
you use reno and your ssres

1090
00:46:11,280 --> 00:46:13,520
the ring congestion control is lower to

1091
00:46:13,520 --> 00:46:16,240
10 but your in flight

1092
00:46:16,240 --> 00:46:19,200
has dropped to say three or two like

1093
00:46:19,200 --> 00:46:21,200
below that 10 number

1094
00:46:21,200 --> 00:46:23,520
uh this is when the original algorithm

1095
00:46:23,520 --> 00:46:26,000
asks you to hand pick two different

1096
00:46:26,000 --> 00:46:27,359
algorithms

1097
00:46:27,359 --> 00:46:30,000
one is more aggressive uh the other is

1098
00:46:30,000 --> 00:46:32,560
more conservative but it comes with pros

1099
00:46:32,560 --> 00:46:34,880
and cons so let's look at that

1100
00:46:34,880 --> 00:46:37,200
the aggressive version is you during

1101
00:46:37,200 --> 00:46:39,599
that time you slow start right since

1102
00:46:39,599 --> 00:46:43,200
your c1 is below excess stretch um

1103
00:46:43,200 --> 00:46:44,319
obvious

1104
00:46:44,319 --> 00:46:47,119
upside is that it's a lock and recovery

1105
00:46:47,119 --> 00:46:49,520
uh because it's slow starting uh the

1106
00:46:49,520 --> 00:46:52,079
downside is that if during this loss

1107
00:46:52,079 --> 00:46:55,040
fast recovery the buffer remains very

1108
00:46:55,040 --> 00:46:56,880
fall um

1109
00:46:56,880 --> 00:46:59,920
it's not just a single burst drop

1110
00:46:59,920 --> 00:47:00,800
um

1111
00:47:00,800 --> 00:47:03,280
or you are going through a policer which

1112
00:47:03,280 --> 00:47:05,920
runs out of tokens that's why it's

1113
00:47:05,920 --> 00:47:08,720
essentially dropping any excess rate

1114
00:47:08,720 --> 00:47:11,760
that you send it through that policer

1115
00:47:11,760 --> 00:47:14,640
then this could result in terrible uh

1116
00:47:14,640 --> 00:47:16,960
losses because literally you are pouring

1117
00:47:16,960 --> 00:47:18,880
gas to fire

1118
00:47:18,880 --> 00:47:21,200
um so it will be like keep repeating

1119
00:47:21,200 --> 00:47:22,880
shelling sense

1120
00:47:22,880 --> 00:47:24,640
trying to ramp up at

1121
00:47:24,640 --> 00:47:27,359
twice the the speed that the rink is

1122
00:47:27,359 --> 00:47:30,000
draining and those just keep getting

1123
00:47:30,000 --> 00:47:30,960
lost

1124
00:47:30,960 --> 00:47:33,200
uh very easily if you don't have rack

1125
00:47:33,200 --> 00:47:36,559
that results in uh repeated timeout

1126
00:47:36,559 --> 00:47:40,319
because you run out of any ad clocking

1127
00:47:40,319 --> 00:47:41,680
and

1128
00:47:41,680 --> 00:47:42,960
but

1129
00:47:42,960 --> 00:47:44,400
on the other side if you pick the

1130
00:47:44,400 --> 00:47:46,400
conservative one um

1131
00:47:46,400 --> 00:47:48,160
basically it's a strict packet

1132
00:47:48,160 --> 00:47:51,119
conservation when you get a packet

1133
00:47:51,119 --> 00:47:54,319
sacked you send one more into it

1134
00:47:54,319 --> 00:47:55,440
um

1135
00:47:55,440 --> 00:47:58,000
obvious downside linear recovery time

1136
00:47:58,000 --> 00:48:01,040
and packet losses and round trips for

1137
00:48:01,040 --> 00:48:03,599
large congestion window

1138
00:48:03,599 --> 00:48:07,520
um this is terrible um but the upside is

1139
00:48:07,520 --> 00:48:09,839
that since you are just sending exactly

1140
00:48:09,839 --> 00:48:11,760
as the link draining way of your

1141
00:48:11,760 --> 00:48:13,200
connection

1142
00:48:13,200 --> 00:48:16,960
you are less subject to further losses

1143
00:48:16,960 --> 00:48:18,800
in this case

1144
00:48:18,800 --> 00:48:21,280
so the improvement really is to

1145
00:48:21,280 --> 00:48:23,280
dynamically pick this based on the

1146
00:48:23,280 --> 00:48:26,480
situation uh that what the next act or

1147
00:48:26,480 --> 00:48:29,200
the the most recent act indicates

1148
00:48:29,200 --> 00:48:32,480
by default we want to be conservative uh

1149
00:48:32,480 --> 00:48:34,880
but if the last act

1150
00:48:34,880 --> 00:48:37,839
indicates that hey the repair is in good

1151
00:48:37,839 --> 00:48:39,520
progress meaning that

1152
00:48:39,520 --> 00:48:42,640
the same una is advancing uh that means

1153
00:48:42,640 --> 00:48:45,599
your last retransmit has been delivered

1154
00:48:45,599 --> 00:48:49,040
successfully right and more importantly

1155
00:48:49,040 --> 00:48:51,119
since then una is advancing that means

1156
00:48:51,119 --> 00:48:54,640
receiver application is making progress

1157
00:48:54,640 --> 00:48:57,839
uh as well that he can reach more um

1158
00:48:57,839 --> 00:49:00,079
and also this act does not further

1159
00:49:00,079 --> 00:49:01,760
indicate

1160
00:49:01,760 --> 00:49:03,280
packet losses

1161
00:49:03,280 --> 00:49:05,760
i mean that thing's looking good making

1162
00:49:05,760 --> 00:49:08,000
progress and there's no further losses

1163
00:49:08,000 --> 00:49:10,000
then we'll do slow start and this has

1164
00:49:10,000 --> 00:49:12,960
been shown that this simple technique is

1165
00:49:12,960 --> 00:49:14,960
very useful

1166
00:49:14,960 --> 00:49:16,720
to make it dynamic

1167
00:49:16,720 --> 00:49:19,520
next slide please

1168
00:49:22,720 --> 00:49:26,319
um another smaller issue is that the

1169
00:49:26,319 --> 00:49:29,040
original one doesn't really define nang

1170
00:49:29,040 --> 00:49:32,640
sac case um what do you really do

1171
00:49:32,640 --> 00:49:34,160
so here we

1172
00:49:34,160 --> 00:49:36,160
apply some very simple technique that

1173
00:49:36,160 --> 00:49:38,559
was actually implemented but just didn't

1174
00:49:38,559 --> 00:49:41,440
get documented uh which is

1175
00:49:41,440 --> 00:49:44,160
if the act is a due back right without

1176
00:49:44,160 --> 00:49:46,319
fact all you get is due back

1177
00:49:46,319 --> 00:49:47,119
and

1178
00:49:47,119 --> 00:49:49,520
you simply just assume that you know one

1179
00:49:49,520 --> 00:49:52,960
packet has been acknowledged or

1180
00:49:52,960 --> 00:49:54,319
delivered

1181
00:49:54,319 --> 00:49:56,640
of course this comes with that famous

1182
00:49:56,640 --> 00:49:57,760
caveat

1183
00:49:57,760 --> 00:50:01,599
that neo uh found years ago that hey

1184
00:50:01,599 --> 00:50:04,240
what if i just send you back every bite

1185
00:50:04,240 --> 00:50:05,520
i receive

1186
00:50:05,520 --> 00:50:07,520
so here we add some more protection

1187
00:50:07,520 --> 00:50:08,960
meaning that

1188
00:50:08,960 --> 00:50:11,280
we assume that you cannot act

1189
00:50:11,280 --> 00:50:14,000
more than whatever that has been

1190
00:50:14,000 --> 00:50:14,880
um

1191
00:50:14,880 --> 00:50:17,839
that was in flight right uh as a sort of

1192
00:50:17,839 --> 00:50:20,720
protection to this uh attack uh to some

1193
00:50:20,720 --> 00:50:21,680
degree

1194
00:50:21,680 --> 00:50:24,960
um so this accounting change will allow

1195
00:50:24,960 --> 00:50:26,160
downsack

1196
00:50:26,160 --> 00:50:28,160
to also use

1197
00:50:28,160 --> 00:50:30,400
pr very easily and doesn't really

1198
00:50:30,400 --> 00:50:33,920
require any extra state

1199
00:50:33,920 --> 00:50:36,800
next slide please

1200
00:50:39,200 --> 00:50:42,960
other minor issue uh the original um rc

1201
00:50:42,960 --> 00:50:46,400
does not trying to force fast retransmit

1202
00:50:46,400 --> 00:50:47,520
uh

1203
00:50:47,520 --> 00:50:49,839
upon entering the recovery

1204
00:50:49,839 --> 00:50:52,880
uh for example in the original algorithm

1205
00:50:52,880 --> 00:50:55,599
that you have a sencondstay variable to

1206
00:50:55,599 --> 00:50:58,000
decide how many packets you are allowed

1207
00:50:58,000 --> 00:51:00,160
to send um

1208
00:51:00,160 --> 00:51:01,839
for the given act that you just

1209
00:51:01,839 --> 00:51:03,119
processed

1210
00:51:03,119 --> 00:51:05,119
and it's possible it's zero because you

1211
00:51:05,119 --> 00:51:07,599
want to make sure it's proportionally

1212
00:51:07,599 --> 00:51:08,400
the rate

1213
00:51:08,400 --> 00:51:12,240
um is according to the

1214
00:51:12,240 --> 00:51:14,079
new asset stretch

1215
00:51:14,079 --> 00:51:16,559
whatever the sort of guiding congestion

1216
00:51:16,559 --> 00:51:18,400
control says that what what the new

1217
00:51:18,400 --> 00:51:20,319
window should be

1218
00:51:20,319 --> 00:51:22,400
this has an obvious downside is that you

1219
00:51:22,400 --> 00:51:24,400
could potentially lost

1220
00:51:24,400 --> 00:51:26,480
ad clock uh because you don't know if

1221
00:51:26,480 --> 00:51:28,960
there's gonna be more act coming right

1222
00:51:28,960 --> 00:51:31,440
uh what if there's only one packet that

1223
00:51:31,440 --> 00:51:33,440
survived this uh stone

1224
00:51:33,440 --> 00:51:36,480
um so here we added this well for the

1225
00:51:36,480 --> 00:51:39,119
fast retransmit only once during

1226
00:51:39,119 --> 00:51:41,440
recovery and that

1227
00:51:41,440 --> 00:51:44,400
fast return is also accounted

1228
00:51:44,400 --> 00:51:47,119
in the out delivery package so the

1229
00:51:47,119 --> 00:51:49,599
algorithm just make a little bit tweak

1230
00:51:49,599 --> 00:51:52,400
uh but fourth one out to keep the ad

1231
00:51:52,400 --> 00:51:54,400
clock uh going

1232
00:51:54,400 --> 00:51:56,960
this was originally implemented by linux

1233
00:51:56,960 --> 00:51:59,760
it just didn't get documented in the rc

1234
00:51:59,760 --> 00:52:01,359
um so we put it in

1235
00:52:01,359 --> 00:52:04,400
there um another one is like the

1236
00:52:04,400 --> 00:52:05,839
original

1237
00:52:05,839 --> 00:52:08,240
obviously didn't even define

1238
00:52:08,240 --> 00:52:10,559
how do you calculate the seaweed and

1239
00:52:10,559 --> 00:52:12,960
here we define it like it's simply the

1240
00:52:12,960 --> 00:52:15,200
in flight or the pipe

1241
00:52:15,200 --> 00:52:20,160
plus the cent state variable um so that

1242
00:52:20,160 --> 00:52:22,640
with this ceiling calculation you would

1243
00:52:22,640 --> 00:52:24,640
send exactly the

1244
00:52:24,640 --> 00:52:28,160
same time number of packets out

1245
00:52:28,160 --> 00:52:30,000
to make it more clear

1246
00:52:30,000 --> 00:52:33,200
next slide please

1247
00:52:33,200 --> 00:52:36,000
other minor edits we also recommend that

1248
00:52:36,000 --> 00:52:37,200
you

1249
00:52:37,200 --> 00:52:40,000
should use rack tlp

1250
00:52:40,000 --> 00:52:42,880
so that remember we talked about we want

1251
00:52:42,880 --> 00:52:45,440
to make the algorithm more dynamic

1252
00:52:45,440 --> 00:52:47,599
and we want to say hey does this act

1253
00:52:47,599 --> 00:52:49,760
indicate further losses

1254
00:52:49,760 --> 00:52:52,480
um that usually means is this some fast

1255
00:52:52,480 --> 00:52:55,359
returns but also get lost again uh in

1256
00:52:55,359 --> 00:52:58,319
that you do need the rack plp to detect

1257
00:52:58,319 --> 00:53:00,319
that properly

1258
00:53:00,319 --> 00:53:02,640
we use a recommended because there could

1259
00:53:02,640 --> 00:53:05,760
be other techniques to detect that rack

1260
00:53:05,760 --> 00:53:08,480
top is only one better detection

1261
00:53:08,480 --> 00:53:10,800
algorithm

1262
00:53:10,800 --> 00:53:13,760
and remove some deprecated way having

1263
00:53:13,760 --> 00:53:16,960
text uh and the experiment section since

1264
00:53:16,960 --> 00:53:20,240
now the extreme have been concluded

1265
00:53:20,240 --> 00:53:23,599
um and update the examples to

1266
00:53:23,599 --> 00:53:26,079
reflect the new algorithm uh we also

1267
00:53:26,079 --> 00:53:28,880
noticed that linux had a bug

1268
00:53:28,880 --> 00:53:31,760
that was reported by bob thank you bob

1269
00:53:31,760 --> 00:53:32,720
um

1270
00:53:32,720 --> 00:53:35,280
about the original implementation so we

1271
00:53:35,280 --> 00:53:36,319
also

1272
00:53:36,319 --> 00:53:37,599
send a

1273
00:53:37,599 --> 00:53:40,000
linux patch to fix that

1274
00:53:40,000 --> 00:53:42,960
um so that's all for my presentation uh

1275
00:53:42,960 --> 00:53:46,720
i hope that um we can uh maybe discuss

1276
00:53:46,720 --> 00:53:49,280
if we should move to

1277
00:53:49,280 --> 00:53:51,839
sort of conclude this uh this revision

1278
00:53:51,839 --> 00:53:54,720
so that we can uh turn the experimental

1279
00:53:54,720 --> 00:53:57,200
rc into standard

1280
00:53:57,200 --> 00:54:00,000
okay thank you

1281
00:54:00,720 --> 00:54:02,319
thank you for the presentation any

1282
00:54:02,319 --> 00:54:04,720
comments

1283
00:54:06,559 --> 00:54:08,480
yashi hello

1284
00:54:08,480 --> 00:54:09,520
um

1285
00:54:09,520 --> 00:54:11,680
so i think i sent some kind of review

1286
00:54:11,680 --> 00:54:14,000
comment on the mailing list a couple of

1287
00:54:14,000 --> 00:54:15,200
months ago

1288
00:54:15,200 --> 00:54:16,079
and

1289
00:54:16,079 --> 00:54:18,160
it seems the new version seems to be

1290
00:54:18,160 --> 00:54:20,480
under some of my comment but uh

1291
00:54:20,480 --> 00:54:23,520
if you could respond to my review email

1292
00:54:23,520 --> 00:54:25,839
then this one this point you guys

1293
00:54:25,839 --> 00:54:28,160
updated or this coin you know it's not

1294
00:54:28,160 --> 00:54:30,640
necessary to update and so on if you

1295
00:54:30,640 --> 00:54:32,640
could do that that would be very helpful

1296
00:54:32,640 --> 00:54:34,240
for me

1297
00:54:34,240 --> 00:54:36,640
uh sure i think i went through all your

1298
00:54:36,640 --> 00:54:38,880
comments and i believe i have addressed

1299
00:54:38,880 --> 00:54:41,280
all of them but i'll reply it explicitly

1300
00:54:41,280 --> 00:54:42,480
on

1301
00:54:42,480 --> 00:54:43,760
to your email

1302
00:54:43,760 --> 00:54:46,480
to show where which part i change in

1303
00:54:46,480 --> 00:54:49,359
the draft yeah

1304
00:54:50,839 --> 00:54:53,839
richard uh so this is richard i just

1305
00:54:53,839 --> 00:54:55,520
wanted to say that i'm very happy that

1306
00:54:55,520 --> 00:54:57,200
uh this uh now finally seems to be

1307
00:54:57,200 --> 00:54:58,799
progressing again

1308
00:54:58,799 --> 00:55:02,960
um i would uh want this uh to become uh

1309
00:55:02,960 --> 00:55:05,280
uh going through a working group last

1310
00:55:05,280 --> 00:55:07,359
call quite rather quickly having

1311
00:55:07,359 --> 00:55:08,480
implemented

1312
00:55:08,480 --> 00:55:09,359
the

1313
00:55:09,359 --> 00:55:10,400
pr

1314
00:55:10,400 --> 00:55:12,480
on the on the old draft

1315
00:55:12,480 --> 00:55:14,319
and i would like to improve the

1316
00:55:14,319 --> 00:55:16,640
especially the heuristics

1317
00:55:16,640 --> 00:55:18,799
but would want also to have the proper

1318
00:55:18,799 --> 00:55:21,839
rfc at the time so that it can be

1319
00:55:21,839 --> 00:55:25,440
made upstream right thanks

1320
00:55:31,280 --> 00:55:33,520
i think gauri left the queue hopefully

1321
00:55:33,520 --> 00:55:36,240
intentionally

1322
00:55:41,680 --> 00:55:45,160
any other comments

1323
00:55:48,640 --> 00:55:50,160
then thank you

1324
00:55:50,160 --> 00:55:51,200
and

1325
00:55:51,200 --> 00:55:54,720
follow up on the email with yoshi

1326
00:55:54,720 --> 00:55:56,799
thank you

1327
00:55:56,799 --> 00:56:00,720
okay um i think the next

1328
00:56:00,720 --> 00:56:03,839
speaker is bob

1329
00:56:05,280 --> 00:56:09,480
bob are you running your slides

1330
00:56:19,440 --> 00:56:21,119
he wants you to run the slides since you

1331
00:56:21,119 --> 00:56:22,720
probably didn't hear that

1332
00:56:22,720 --> 00:56:27,480
thank you i didn't hear that oh yeah

1333
00:56:30,319 --> 00:56:31,520
um

1334
00:56:31,520 --> 00:56:34,799
next slide please michael

1335
00:56:36,720 --> 00:56:38,720
right a very quick recap

1336
00:56:38,720 --> 00:56:40,559
accurate ecn

1337
00:56:40,559 --> 00:56:44,079
is a change to the tcpy protocol

1338
00:56:44,079 --> 00:56:45,760
to deal with the

1339
00:56:45,760 --> 00:56:50,480
problem that the existing ecn feedback

1340
00:56:50,559 --> 00:56:54,559
is only for congestion controls that

1341
00:56:54,720 --> 00:56:56,880
need only one

1342
00:56:56,880 --> 00:56:59,440
feedback per round whether or not

1343
00:56:59,440 --> 00:57:00,240
there's

1344
00:57:00,240 --> 00:57:02,720
more than more congestion than that

1345
00:57:02,720 --> 00:57:03,599
um

1346
00:57:03,599 --> 00:57:06,240
and it involves two pieces

1347
00:57:06,240 --> 00:57:07,920
a um

1348
00:57:07,920 --> 00:57:10,559
small three bit field

1349
00:57:10,559 --> 00:57:12,559
is essential and the supplementary

1350
00:57:12,559 --> 00:57:14,079
option

1351
00:57:14,079 --> 00:57:16,880
um and

1352
00:57:17,200 --> 00:57:19,520
having this feedback allow gives you the

1353
00:57:19,520 --> 00:57:21,119
fine grained control that allows you to

1354
00:57:21,119 --> 00:57:23,200
reduce delay a lot more

1355
00:57:23,200 --> 00:57:25,200
um we're using nl4s but it's got other

1356
00:57:25,200 --> 00:57:28,799
uses as well thank you next

1357
00:57:32,000 --> 00:57:35,119
so um since the last cycle of the i or

1358
00:57:35,119 --> 00:57:37,280
within the last cycle of the itf it's

1359
00:57:37,280 --> 00:57:38,640
been two

1360
00:57:38,640 --> 00:57:41,839
updates um links there on the um if you

1361
00:57:41,839 --> 00:57:44,559
go to the slide for the two diffs

1362
00:57:44,559 --> 00:57:46,480
and um

1363
00:57:46,480 --> 00:57:48,160
also an english summary of the diffs on

1364
00:57:48,160 --> 00:57:49,280
the list

1365
00:57:49,280 --> 00:57:51,520
um

1366
00:57:51,680 --> 00:57:54,000
in response to requests from gory from

1367
00:57:54,000 --> 00:57:55,359
ilpo

1368
00:57:55,359 --> 00:57:56,559
um

1369
00:57:56,559 --> 00:57:59,520
from again or a follow until

1370
00:57:59,520 --> 00:58:01,200
the change to oppo and

1371
00:58:01,200 --> 00:58:02,720
um

1372
00:58:02,720 --> 00:58:04,480
uh finally

1373
00:58:04,480 --> 00:58:05,920
some work that was happening earlier in

1374
00:58:05,920 --> 00:58:08,799
the week on the interop we found uh we

1375
00:58:08,799 --> 00:58:10,319
hadn't properly documented the

1376
00:58:10,319 --> 00:58:13,119
experimental ids the tcp options and

1377
00:58:13,119 --> 00:58:14,559
two different implementers had guessed

1378
00:58:14,559 --> 00:58:16,240
two different numbers

1379
00:58:16,240 --> 00:58:19,440
so um we um you'll see we've sorted that

1380
00:58:19,440 --> 00:58:23,079
next slide

1381
00:58:24,400 --> 00:58:28,720
so firstly um gary

1382
00:58:28,799 --> 00:58:30,400
wasn't happy with the section on act

1383
00:58:30,400 --> 00:58:31,440
filtering

1384
00:58:31,440 --> 00:58:34,960
which updated rsd 3449

1385
00:58:34,960 --> 00:58:37,599
which is as the little um asterisk says

1386
00:58:37,599 --> 00:58:38,960
at the bottom tcp performance

1387
00:58:38,960 --> 00:58:41,760
implications of network path asymmetry

1388
00:58:41,760 --> 00:58:43,280
and it particularly updated the act

1389
00:58:43,280 --> 00:58:46,960
filtering um part of that rfc

1390
00:58:46,960 --> 00:58:48,960
and gauri pointed out and he was right

1391
00:58:48,960 --> 00:58:52,240
that that rfc

1392
00:58:52,240 --> 00:58:54,559
referred to 3168

1393
00:58:54,559 --> 00:58:56,319
and so because

1394
00:58:56,319 --> 00:58:58,720
accurate ecn says it is going to update

1395
00:58:58,720 --> 00:59:00,319
3168

1396
00:59:00,319 --> 00:59:03,280
that rfc will then apply to accurate ecn

1397
00:59:03,280 --> 00:59:05,280
as well so we don't need to specifically

1398
00:59:05,280 --> 00:59:07,599
update it it just automatically happens

1399
00:59:07,599 --> 00:59:10,480
by updating rfc 3168 so we change things

1400
00:59:10,480 --> 00:59:11,599
around

1401
00:59:11,599 --> 00:59:13,839
um and we added a bit more technical

1402
00:59:13,839 --> 00:59:16,960
detail on how to do it um how a

1403
00:59:16,960 --> 00:59:19,839
filtering node might

1404
00:59:20,640 --> 00:59:22,079
handle

1405
00:59:22,079 --> 00:59:23,920
accurate ecn feedback

1406
00:59:23,920 --> 00:59:24,960
um

1407
00:59:24,960 --> 00:59:26,799
if it was trying to improve improve

1408
00:59:26,799 --> 00:59:28,160
performance which is the whole point of

1409
00:59:28,160 --> 00:59:29,520
act filtering nodes

1410
00:59:29,520 --> 00:59:31,200
okay um

1411
00:59:31,200 --> 00:59:34,640
any questions on that move on

1412
00:59:36,799 --> 00:59:40,319
so the second change after el po had

1413
00:59:40,319 --> 00:59:42,240
implemented this

1414
00:59:42,240 --> 00:59:44,559
he said the um

1415
00:59:44,559 --> 00:59:47,200
the implementation for sending the tcp

1416
00:59:47,200 --> 00:59:49,839
option the accurate ecm tcp option was

1417
00:59:49,839 --> 00:59:50,960
um

1418
00:59:50,960 --> 00:59:53,040
much simpler than the receiving side of

1419
00:59:53,040 --> 00:59:55,040
it and so the the previous

1420
00:59:55,040 --> 00:59:57,040
recommendation in the draft

1421
00:59:57,040 --> 00:59:58,640
was um

1422
00:59:58,640 --> 01:00:01,520
that you uh you're recommended to at

1423
01:00:01,520 --> 01:00:02,319
least

1424
01:00:02,319 --> 01:00:04,000
do the receiving side even if you don't

1425
01:00:04,000 --> 01:00:05,040
do the sending side obviously i

1426
01:00:05,040 --> 01:00:07,119
recommend it to do both but if you're if

1427
01:00:07,119 --> 01:00:09,680
you're trying to start out um do the

1428
01:00:09,680 --> 01:00:11,680
receiving side first and so we switch

1429
01:00:11,680 --> 01:00:13,359
that to be do the sending side first

1430
01:00:13,359 --> 01:00:15,359
because that's the easier side and that

1431
01:00:15,359 --> 01:00:16,640
means that

1432
01:00:16,640 --> 01:00:17,520
um

1433
01:00:17,520 --> 01:00:20,000
anyone that does do the receiving side

1434
01:00:20,000 --> 01:00:22,960
if they're getting um

1435
01:00:22,960 --> 01:00:24,640
this option

1436
01:00:24,640 --> 01:00:27,040
arriving at them then they sort of can

1437
01:00:27,040 --> 01:00:29,440
unilaterally get it working by just

1438
01:00:29,440 --> 01:00:30,960
implementing the

1439
01:00:30,960 --> 01:00:32,640
the receiver side this means the

1440
01:00:32,640 --> 01:00:35,040
receiving of the option not the risk the

1441
01:00:35,040 --> 01:00:37,359
data receiver because it's the the

1442
01:00:37,359 --> 01:00:40,640
option is feedback so it's the opposite

1443
01:00:40,640 --> 01:00:42,880
half connection to the to the data

1444
01:00:42,880 --> 01:00:45,359
direction

1445
01:00:45,359 --> 01:00:48,319
okay um

1446
01:00:48,720 --> 01:00:52,000
and this this um cycle

1447
01:00:52,000 --> 01:00:54,880
in draft 20 we just added a little more

1448
01:00:54,880 --> 01:00:57,440
strength to the recommendation as to why

1449
01:00:57,440 --> 01:00:59,040
it's important to

1450
01:00:59,040 --> 01:01:00,480
um

1451
01:01:00,480 --> 01:01:02,079
to implement this and you'll see the

1452
01:01:02,079 --> 01:01:03,760
green text there says that i won't read

1453
01:01:03,760 --> 01:01:04,960
it out

1454
01:01:04,960 --> 01:01:07,200
um any comments on that

1455
01:01:07,200 --> 01:01:09,599
um would have been on the list

1456
01:01:09,599 --> 01:01:11,359
um it's had a

1457
01:01:11,359 --> 01:01:13,280
i think a week

1458
01:01:13,280 --> 01:01:16,079
so um

1459
01:01:16,559 --> 01:01:18,559
there's one little point there that

1460
01:01:18,559 --> 01:01:20,960
um because ilpo has implemented both

1461
01:01:20,960 --> 01:01:24,000
send and receive logic in linux

1462
01:01:24,000 --> 01:01:27,040
if that does go through to the main line

1463
01:01:27,040 --> 01:01:29,200
then most linux servers will be able to

1464
01:01:29,200 --> 01:01:31,440
handle both sender and receiver which is

1465
01:01:31,440 --> 01:01:33,680
another argument for if you're

1466
01:01:33,680 --> 01:01:36,160
a client receiver and you don't really

1467
01:01:36,160 --> 01:01:37,440
want to bother implementing this at

1468
01:01:37,440 --> 01:01:39,599
least if you do the sending side

1469
01:01:39,599 --> 01:01:41,760
then um

1470
01:01:41,760 --> 01:01:43,920
the

1471
01:01:44,079 --> 01:01:46,960
server will be getting feedback on on

1472
01:01:46,960 --> 01:01:49,440
the downstream at least

1473
01:01:49,440 --> 01:01:53,079
okay next

1474
01:01:54,400 --> 01:01:58,400
right um this is the point about us um

1475
01:01:58,400 --> 01:02:00,720
omitting to register the experiment

1476
01:02:00,720 --> 01:02:02,799
mental ids that we've been using for

1477
01:02:02,799 --> 01:02:05,280
this tcp option in implementations

1478
01:02:05,280 --> 01:02:08,799
um retrospectively registered them or

1479
01:02:08,799 --> 01:02:10,720
richard did earlier this week they're

1480
01:02:10,720 --> 01:02:13,440
now um on when as of wednesday evening i

1481
01:02:13,440 --> 01:02:14,240
think

1482
01:02:14,240 --> 01:02:16,799
they're on the iona registry

1483
01:02:16,799 --> 01:02:19,839
um as shown there

1484
01:02:19,839 --> 01:02:21,280
but then

1485
01:02:21,280 --> 01:02:22,960
what we want to do now is go for an

1486
01:02:22,960 --> 01:02:24,079
early

1487
01:02:24,079 --> 01:02:26,400
um registration

1488
01:02:26,400 --> 01:02:29,039
no early assignment i think it's called

1489
01:02:29,039 --> 01:02:31,599
of of the

1490
01:02:31,599 --> 01:02:36,079
actual ids that we want to use um

1491
01:02:36,079 --> 01:02:38,160
while this is in in parallel to this

1492
01:02:38,160 --> 01:02:39,760
going through the working group last

1493
01:02:39,760 --> 01:02:42,079
call process and and so on

1494
01:02:42,079 --> 01:02:43,680
um so that

1495
01:02:43,680 --> 01:02:47,119
the implementations can start um using

1496
01:02:47,119 --> 01:02:49,839
the real thing

1497
01:02:49,839 --> 01:02:52,160
next

1498
01:02:52,319 --> 01:02:55,359
and the next is the

1499
01:02:56,880 --> 01:02:59,039
next step slide

1500
01:02:59,039 --> 01:03:00,839
we have

1501
01:03:00,839 --> 01:03:02,480
a

1502
01:03:02,480 --> 01:03:03,599
um

1503
01:03:03,599 --> 01:03:07,920
one early security error um review

1504
01:03:07,920 --> 01:03:09,200
that

1505
01:03:09,200 --> 01:03:11,760
ends up showing has issues but um it was

1506
01:03:11,760 --> 01:03:13,680
all resolved and the the author of that

1507
01:03:13,680 --> 01:03:15,839
review has agreed it's

1508
01:03:15,839 --> 01:03:17,599
it would be almost ready if he put that

1509
01:03:17,599 --> 01:03:19,200
stages in again

1510
01:03:19,200 --> 01:03:20,799
so i believe we're ready for working

1511
01:03:20,799 --> 01:03:22,319
group last call i don't think there's

1512
01:03:22,319 --> 01:03:24,079
anything else

1513
01:03:24,079 --> 01:03:26,079
um i've seen on the list anyone wanting

1514
01:03:26,079 --> 01:03:28,240
anything done and well the authors are

1515
01:03:28,240 --> 01:03:29,920
all happy that everything is done that

1516
01:03:29,920 --> 01:03:31,280
should be done

1517
01:03:31,280 --> 01:03:32,880
um so

1518
01:03:32,880 --> 01:03:33,680
um

1519
01:03:33,680 --> 01:03:35,440
i don't know whether we're gonna do that

1520
01:03:35,440 --> 01:03:38,319
here now i just wanted to also

1521
01:03:38,319 --> 01:03:41,200
add the other two points there

1522
01:03:41,200 --> 01:03:43,520
we're gonna um i don't know whether we

1523
01:03:43,520 --> 01:03:45,680
need or the chairs need a

1524
01:03:45,680 --> 01:03:47,119
feel from the room whether we should go

1525
01:03:47,119 --> 01:03:49,280
for an early assignment

1526
01:03:49,280 --> 01:03:50,559
as well

1527
01:03:50,559 --> 01:03:52,319
and um

1528
01:03:52,319 --> 01:03:55,520
finally whether generalized ecn

1529
01:03:55,520 --> 01:03:56,640
um

1530
01:03:56,640 --> 01:03:58,480
i mean that's that's been ready for

1531
01:03:58,480 --> 01:04:01,200
working group last call for some time

1532
01:04:01,200 --> 01:04:03,119
whether we go for actually doing that it

1533
01:04:03,119 --> 01:04:06,720
has a dependency on accurate ecm

1534
01:04:08,960 --> 01:04:11,520
uh martin duke google uh yeah like early

1535
01:04:11,520 --> 01:04:12,960
allocation i think is a good idea

1536
01:04:12,960 --> 01:04:15,039
because if if it turns out that whatever

1537
01:04:15,039 --> 01:04:17,359
we allocate um

1538
01:04:17,359 --> 01:04:18,880
gets eaten in the internet that would be

1539
01:04:18,880 --> 01:04:21,039
good to know before we published

1540
01:04:21,039 --> 01:04:23,680
before before it goes to the rcn

1541
01:04:23,680 --> 01:04:25,680
um and i don't know if their magic like

1542
01:04:25,680 --> 01:04:27,119
unallocated options that would make it

1543
01:04:27,119 --> 01:04:29,119
through the internet or not um but you

1544
01:04:29,119 --> 01:04:30,480
know who knows

1545
01:04:30,480 --> 01:04:32,960
uh i did have a question i mean you said

1546
01:04:32,960 --> 01:04:34,640
you implemented for linux and i'm

1547
01:04:34,640 --> 01:04:36,000
wondering if you reached out to the

1548
01:04:36,000 --> 01:04:38,720
linux kernel maintainers

1549
01:04:38,720 --> 01:04:40,799
about accepting any of this in

1550
01:04:40,799 --> 01:04:43,359
particular at least the receive side

1551
01:04:43,359 --> 01:04:45,200
well the the the reason this issue came

1552
01:04:45,200 --> 01:04:47,440
up is neil was testing his linux

1553
01:04:47,440 --> 01:04:50,720
implementation with uh interrupt with

1554
01:04:50,720 --> 01:04:52,799
richard's freebsd implementation at the

1555
01:04:52,799 --> 01:04:55,119
interop earlier in the week

1556
01:04:55,119 --> 01:04:58,319
so yes neil is the guy that but but he's

1557
01:04:58,319 --> 01:04:59,839
saying but he's not a kernel maintainer

1558
01:04:59,839 --> 01:05:03,119
like the actual like linux mainline it

1559
01:05:03,119 --> 01:05:05,119
would be great if the sending of the

1560
01:05:05,119 --> 01:05:06,240
option

1561
01:05:06,240 --> 01:05:09,200
was in the kernel because then

1562
01:05:09,200 --> 01:05:10,240
you know

1563
01:05:10,240 --> 01:05:12,640
commodity linux servers would

1564
01:05:12,640 --> 01:05:15,039
do the right thing well i mean

1565
01:05:15,039 --> 01:05:16,000
with

1566
01:05:16,000 --> 01:05:19,200
um ilpo's original um patches he

1567
01:05:19,200 --> 01:05:22,000
produced a patch set for the net dev um

1568
01:05:22,000 --> 01:05:23,200
community

1569
01:05:23,200 --> 01:05:24,559
and um

1570
01:05:24,559 --> 01:05:26,160
basically it was it was all ready there

1571
01:05:26,160 --> 01:05:28,640
weren't any problems but waiting for the

1572
01:05:28,640 --> 01:05:31,280
iatf to do the rfc

1573
01:05:31,280 --> 01:05:32,400
um

1574
01:05:32,400 --> 01:05:33,680
and

1575
01:05:33,680 --> 01:05:34,559
um

1576
01:05:34,559 --> 01:05:36,799
i mean neil is one of the people i mean

1577
01:05:36,799 --> 01:05:38,400
the lens community tends to work on

1578
01:05:38,400 --> 01:05:39,920
trust you know and neil is one of the

1579
01:05:39,920 --> 01:05:40,960
people that

1580
01:05:40,960 --> 01:05:41,839
would be

1581
01:05:41,839 --> 01:05:44,400
a name against that i think um i'm not

1582
01:05:44,400 --> 01:05:47,359
okay presuming that neil will say it's

1583
01:05:47,359 --> 01:05:49,760
okay or anything but you know okay neil

1584
01:05:49,760 --> 01:05:51,520
but you know all right well alex neil

1585
01:05:51,520 --> 01:05:54,880
that's going some other time then thanks

1586
01:05:56,720 --> 01:05:59,920
um quick question is the linux community

1587
01:05:59,920 --> 01:06:02,400
waiting for the

1588
01:06:02,400 --> 01:06:06,799
um for the rfc or waiting for the

1589
01:06:06,799 --> 01:06:10,000
option kind assignments

1590
01:06:10,480 --> 01:06:12,559
you'd have to ask them sorry but when we

1591
01:06:12,559 --> 01:06:13,680
originally

1592
01:06:13,680 --> 01:06:17,039
put it in it was waiting for the itf

1593
01:06:17,039 --> 01:06:20,240
approval it wasn't clear whether like

1594
01:06:20,240 --> 01:06:21,599
if it got through working group last

1595
01:06:21,599 --> 01:06:22,799
call or

1596
01:06:22,799 --> 01:06:24,880
if it got approved by the aisg or

1597
01:06:24,880 --> 01:06:26,559
whether it would actually have to you

1598
01:06:26,559 --> 01:06:28,720
know be a published rfc

1599
01:06:28,720 --> 01:06:29,760
um

1600
01:06:29,760 --> 01:06:32,480
i don't know at what point

1601
01:06:32,480 --> 01:06:34,400
they would be happy but um we can find

1602
01:06:34,400 --> 01:06:36,640
that out

1603
01:06:36,640 --> 01:06:39,520
okay neutral

1604
01:06:39,680 --> 01:06:42,000
yeah a couple things i think we

1605
01:06:42,000 --> 01:06:44,799
definitely should get a

1606
01:06:44,799 --> 01:06:48,079
real auction id um uh as early as

1607
01:06:48,079 --> 01:06:50,000
possible and don't use the experimental

1608
01:06:50,000 --> 01:06:53,119
id uh in implementation uh this is based

1609
01:06:53,119 --> 01:06:54,000
on a

1610
01:06:54,000 --> 01:06:56,559
a real my my own experience with fast

1611
01:06:56,559 --> 01:07:00,000
open because um if you have those

1612
01:07:00,000 --> 01:07:03,440
then you need some way to upgrade on the

1613
01:07:03,440 --> 01:07:06,400
id right when there is a server that

1614
01:07:06,400 --> 01:07:08,799
only talks the experiment and um the

1615
01:07:08,799 --> 01:07:10,960
other one that talks post

1616
01:07:10,960 --> 01:07:14,079
um so it's a pin um pen

1617
01:07:14,079 --> 01:07:17,119
another one is

1618
01:07:17,200 --> 01:07:18,640
for the

1619
01:07:18,640 --> 01:07:19,920
generalized

1620
01:07:19,920 --> 01:07:22,000
ecn

1621
01:07:22,000 --> 01:07:24,799
a quick comment is that

1622
01:07:24,799 --> 01:07:27,119
is it possible to make that generalized

1623
01:07:27,119 --> 01:07:29,599
easiest generalized ecn

1624
01:07:29,599 --> 01:07:31,119
also

1625
01:07:31,119 --> 01:07:34,160
good for the bctcp

1626
01:07:34,160 --> 01:07:37,359
cases because we don't expect people

1627
01:07:37,359 --> 01:07:41,119
that use dc-tcp ecm will hop on

1628
01:07:41,119 --> 01:07:43,200
this accurate ecn anytime soon right

1629
01:07:43,200 --> 01:07:45,440
because there's a real um implementation

1630
01:07:45,440 --> 01:07:46,319
blog

1631
01:07:46,319 --> 01:07:47,440
right

1632
01:07:47,440 --> 01:07:49,520
so that's my question

1633
01:07:49,520 --> 01:07:52,000
yeah that's a good point we can we can

1634
01:07:52,000 --> 01:07:54,079
i have to think how we would word that

1635
01:07:54,079 --> 01:07:56,240
but um because we have to be careful

1636
01:07:56,240 --> 01:07:56,960
that

1637
01:07:56,960 --> 01:07:59,599
we don't sort of endorse using dc tcp

1638
01:07:59,599 --> 01:08:02,160
over the internet somehow but well well

1639
01:08:02,160 --> 01:08:03,760
well um

1640
01:08:03,760 --> 01:08:06,880
we should be able to do that yeah

1641
01:08:07,119 --> 01:08:08,720
so this is richard um

1642
01:08:08,720 --> 01:08:10,799
just to the comment around generalized

1643
01:08:10,799 --> 01:08:13,440
acn for data center tcp

1644
01:08:13,440 --> 01:08:14,400
i

1645
01:08:14,400 --> 01:08:16,479
have a private patch to do this exactly

1646
01:08:16,479 --> 01:08:18,560
because of the same reason that

1647
01:08:18,560 --> 01:08:21,679
aqm that is compatible with l4s would

1648
01:08:21,679 --> 01:08:23,920
mostly be compatible uh with database

1649
01:08:23,920 --> 01:08:25,920
and the tcp as well and therefore

1650
01:08:25,920 --> 01:08:28,479
generalized ecn and data center tcp

1651
01:08:28,479 --> 01:08:31,198
would in my opinion be a natural fit

1652
01:08:31,198 --> 01:08:33,600
however we need to progress on that on

1653
01:08:33,600 --> 01:08:34,719
that draft

1654
01:08:34,719 --> 01:08:36,799
in order for this

1655
01:08:36,799 --> 01:08:38,640
actual implementations to progress

1656
01:08:38,640 --> 01:08:40,880
thanks

1657
01:08:43,439 --> 01:08:44,640
do you want to

1658
01:08:44,640 --> 01:08:48,319
no okay so um i just wanted to add that

1659
01:08:48,319 --> 01:08:51,198
the dc-tcp implementation in linux

1660
01:08:51,198 --> 01:08:54,319
already does what um generalized ecm

1661
01:08:54,319 --> 01:08:57,279
says it just sets ect on all

1662
01:08:57,279 --> 01:08:58,880
packets it doesn't

1663
01:08:58,880 --> 01:09:01,439
um not set it on sins and

1664
01:09:01,439 --> 01:09:04,319
acts and things like that

1665
01:09:04,319 --> 01:09:06,399
i think i was just asking for that to be

1666
01:09:06,399 --> 01:09:09,759
endorsed by the rfc

1667
01:09:10,960 --> 01:09:13,439
okay i'm not aware of that but they we

1668
01:09:13,439 --> 01:09:15,279
can confront our offline since it's just

1669
01:09:15,279 --> 01:09:17,920
implementation

1670
01:09:17,920 --> 01:09:18,839
issues

1671
01:09:18,839 --> 01:09:20,640
yeah

1672
01:09:20,640 --> 01:09:22,479
could i ask martin

1673
01:09:22,479 --> 01:09:25,920
what the procedure of early assignment

1674
01:09:25,920 --> 01:09:28,080
is

1675
01:09:29,120 --> 01:09:32,960
i mean how does it work who decides

1676
01:09:32,960 --> 01:09:35,759
which part

1677
01:09:35,759 --> 01:09:38,080
um i think i have to like

1678
01:09:38,080 --> 01:09:40,319
give my approval but um i think you

1679
01:09:40,319 --> 01:09:41,359
could just

1680
01:09:41,359 --> 01:09:45,719
send an email to ayanna

1681
01:09:50,799 --> 01:09:52,640
you will approve that and then ayanna

1682
01:09:52,640 --> 01:09:54,719
will execute that or is ayanna

1683
01:09:54,719 --> 01:09:56,640
discussing that or

1684
01:09:56,640 --> 01:09:59,280
he is it the secretary of state ryana

1685
01:09:59,280 --> 01:10:01,360
that you do early allocations first

1686
01:10:01,360 --> 01:10:03,280
who's the first contact

1687
01:10:03,280 --> 01:10:05,760
yeah just call just email ayanna and cc

1688
01:10:05,760 --> 01:10:07,600
me and uh things will move forward and

1689
01:10:07,600 --> 01:10:10,560
we'll figure it out from there

1690
01:10:11,199 --> 01:10:12,880
do you have the answer to this

1691
01:10:12,880 --> 01:10:14,960
um i'm being an australian so i started

1692
01:10:14,960 --> 01:10:16,800
the process earlier on an information to

1693
01:10:16,800 --> 01:10:18,560
get closer to the mind

1694
01:10:18,560 --> 01:10:20,239
sorry i'm richard i'm from austria so

1695
01:10:20,239 --> 01:10:22,239
i've started this process on an informal

1696
01:10:22,239 --> 01:10:24,320
basis um jana is aware that this is

1697
01:10:24,320 --> 01:10:25,920
going uh going on

1698
01:10:25,920 --> 01:10:28,400
and quite frankly the process as far as

1699
01:10:28,400 --> 01:10:31,199
i understood is that the formal request

1700
01:10:31,199 --> 01:10:32,560
has to come from the chairs of this

1701
01:10:32,560 --> 01:10:35,920
group after the group has agreed

1702
01:10:35,920 --> 01:10:38,239
the ad has to has to basically sign it

1703
01:10:38,239 --> 01:10:40,640
off and as soon as that is gone

1704
01:10:40,640 --> 01:10:41,520
just

1705
01:10:41,520 --> 01:10:43,760
send the email with those approvals to

1706
01:10:43,760 --> 01:10:46,400
iana and they will do it

1707
01:10:46,400 --> 01:10:48,000
yeah i would just send them an email cc

1708
01:10:48,000 --> 01:10:49,920
me and i'll like just reply i approve

1709
01:10:49,920 --> 01:10:50,800
and

1710
01:10:50,800 --> 01:10:52,719
we'll be good to go

1711
01:10:52,719 --> 01:10:54,960
okay we'll discuss this

1712
01:10:54,960 --> 01:10:56,640
with another choice

1713
01:10:56,640 --> 01:10:58,800
well one question bob

1714
01:10:58,800 --> 01:11:01,760
so i think the draft is most ready for

1715
01:11:01,760 --> 01:11:03,920
working group plus to go from my point

1716
01:11:03,920 --> 01:11:05,040
of view

1717
01:11:05,040 --> 01:11:06,800
but i sometimes you know

1718
01:11:06,800 --> 01:11:09,040
exchange email with you and gory about

1719
01:11:09,040 --> 01:11:11,600
some you know editorial things i

1720
01:11:11,600 --> 01:11:13,280
i just would like to check we've already

1721
01:11:13,280 --> 01:11:15,440
settled down and you can

1722
01:11:15,440 --> 01:11:17,040
you think you're ready for working with

1723
01:11:17,040 --> 01:11:19,519
rascal

1724
01:11:19,840 --> 01:11:20,880
sorry

1725
01:11:20,880 --> 01:11:23,040
did you say that uh are you saying that

1726
01:11:23,040 --> 01:11:25,600
there's some emails we've missed or yeah

1727
01:11:25,600 --> 01:11:28,560
i think so my i'd like to confirm the

1728
01:11:28,560 --> 01:11:30,560
discussion is still going on or it's

1729
01:11:30,560 --> 01:11:31,840
finished

1730
01:11:31,840 --> 01:11:33,360
i think discussion is finished but if

1731
01:11:33,360 --> 01:11:35,600
you point me to anything

1732
01:11:35,600 --> 01:11:38,080
that i missed or anything then no i

1733
01:11:38,080 --> 01:11:40,480
don't think i just tried to confirm

1734
01:11:40,480 --> 01:11:42,000
i can confirm that now and i can confirm

1735
01:11:42,000 --> 01:11:43,760
it by email as well if you want yeah

1736
01:11:43,760 --> 01:11:46,080
yeah and then another thing listen you

1737
01:11:46,080 --> 01:11:49,679
want to wait for earlier assignments

1738
01:11:49,679 --> 01:11:51,679
no i think the two can go in parallel

1739
01:11:51,679 --> 01:11:53,360
because um

1740
01:11:53,360 --> 01:11:54,480
you know

1741
01:11:54,480 --> 01:11:56,000
i don't think either needs to depend on

1742
01:11:56,000 --> 01:11:58,400
the other

1743
01:12:12,800 --> 01:12:14,239
richard do you want to be in the queue

1744
01:12:14,239 --> 01:12:16,239
or

1745
01:12:16,239 --> 01:12:19,360
did you forgot to exit

1746
01:12:19,360 --> 01:12:22,839
okay you tune

1747
01:12:34,719 --> 01:12:36,560
do you have something to say

1748
01:12:36,560 --> 01:12:37,679
okay

1749
01:12:37,679 --> 01:12:41,120
could i release the mic uh button um

1750
01:12:41,120 --> 01:12:44,480
yeah i just want to uh double check that

1751
01:12:44,480 --> 01:12:45,360
um

1752
01:12:45,360 --> 01:12:46,480
we

1753
01:12:46,480 --> 01:12:49,120
accurate ecn um

1754
01:12:49,120 --> 01:12:50,800
is now have a

1755
01:12:50,800 --> 01:12:53,120
working implementation that can show it

1756
01:12:53,120 --> 01:12:56,480
works with gro and tso without any

1757
01:12:56,480 --> 01:12:57,520
issues

1758
01:12:57,520 --> 01:12:58,640
um

1759
01:12:58,640 --> 01:13:01,520
like if we just run it now

1760
01:13:01,520 --> 01:13:03,199
say inside

1761
01:13:03,199 --> 01:13:04,640
they are centers

1762
01:13:04,640 --> 01:13:07,440
right the tso gro

1763
01:13:07,440 --> 01:13:09,280
will all work fine

1764
01:13:09,280 --> 01:13:11,440
no fine prints

1765
01:13:11,440 --> 01:13:13,678
yeah

1766
01:13:14,719 --> 01:13:16,000
i believe it

1767
01:13:16,000 --> 01:13:18,159
doesn't i believe it this is bob sorry i

1768
01:13:18,159 --> 01:13:19,600
believe it doesn't i believe it should

1769
01:13:19,600 --> 01:13:23,600
but um i you know yes obviously test it

1770
01:13:23,600 --> 01:13:25,040
yourself is the

1771
01:13:25,040 --> 01:13:27,280
um

1772
01:13:27,520 --> 01:13:30,000
is the answer to that question

1773
01:13:30,000 --> 01:13:31,600
um

1774
01:13:31,600 --> 01:13:33,920
but yeah the code should work like that

1775
01:13:33,920 --> 01:13:34,880
yep

1776
01:13:34,880 --> 01:13:38,400
okay so that has been my most uh concern

1777
01:13:38,400 --> 01:13:41,440
of accuracy yeah but and if that's clear

1778
01:13:41,440 --> 01:13:44,960
then i'm happy to support that

1779
01:13:45,440 --> 01:13:47,839
corey

1780
01:13:48,000 --> 01:13:49,679
very fairness

1781
01:13:49,679 --> 01:13:51,920
i'm just responding that i think bob

1782
01:13:51,920 --> 01:13:54,480
solved the issues we discussed i don't

1783
01:13:54,480 --> 01:13:57,678
have more issues on that one

1784
01:13:58,159 --> 01:14:01,120
thank you mia

1785
01:14:01,120 --> 01:14:03,520
um yeah i just wanted to follow up on uh

1786
01:14:03,520 --> 01:14:06,320
youtube's questions about uh

1787
01:14:06,320 --> 01:14:09,520
offload support i guess the the one

1788
01:14:09,520 --> 01:14:12,000
um big question i remember was

1789
01:14:12,000 --> 01:14:14,000
this question of uh whether various

1790
01:14:14,000 --> 01:14:15,600
network devices

1791
01:14:15,600 --> 01:14:19,199
in their tso um transmission offload

1792
01:14:19,199 --> 01:14:20,880
facilities might

1793
01:14:20,880 --> 01:14:23,679
might do the wrong thing with the ace

1794
01:14:23,679 --> 01:14:26,480
um bits since they don't know that

1795
01:14:26,480 --> 01:14:27,920
they're trying to be used as ace bits

1796
01:14:27,920 --> 01:14:30,080
and might interpret them as other tcp

1797
01:14:30,080 --> 01:14:31,199
flag bits

1798
01:14:31,199 --> 01:14:32,480
is there anyone

1799
01:14:32,480 --> 01:14:34,480
who can sort of quickly summarize where

1800
01:14:34,480 --> 01:14:36,800
we are with this this question of nick

1801
01:14:36,800 --> 01:14:41,400
compatibility within the ace field

1802
01:14:43,040 --> 01:14:46,560
um i can i can summarize that um

1803
01:14:46,560 --> 01:14:47,360
the

1804
01:14:47,360 --> 01:14:49,280
when tso and gso

1805
01:14:49,280 --> 01:14:51,040
or gso is done in

1806
01:14:51,040 --> 01:14:52,480
the linux stack

1807
01:14:52,480 --> 01:14:55,440
that's all handled

1808
01:14:55,679 --> 01:14:57,679
with hardware

1809
01:14:57,679 --> 01:15:02,080
um we haven't had those discussions yet

1810
01:15:04,000 --> 01:15:07,120
we sort of need um the community that

1811
01:15:07,120 --> 01:15:08,960
um

1812
01:15:08,960 --> 01:15:11,280
uh like yourselves

1813
01:15:11,280 --> 01:15:14,719
so that we can start those discussions

1814
01:15:23,280 --> 01:15:26,080
any other questions

1815
01:15:30,719 --> 01:15:32,239
so the early assignment stuff we'll

1816
01:15:32,239 --> 01:15:34,800
discuss between the chairs and then

1817
01:15:34,800 --> 01:15:37,040
um

1818
01:15:37,360 --> 01:15:40,239
send the appropriate mail

1819
01:15:40,239 --> 01:15:42,639
thank you

1820
01:15:43,199 --> 01:15:44,560
so

1821
01:15:44,560 --> 01:15:46,400
now it becomes interesting

1822
01:15:46,400 --> 01:15:48,000
um

1823
01:15:48,000 --> 01:15:51,040
this is my hash

1824
01:15:51,679 --> 01:15:55,840
able to give a presentation now

1825
01:15:57,280 --> 01:15:59,360
so he is not

1826
01:15:59,360 --> 01:16:02,080
on site he is in the train

1827
01:16:02,080 --> 01:16:05,440
or maybe not anymore so

1828
01:16:05,440 --> 01:16:08,080
he dropped me a note that he might be

1829
01:16:08,080 --> 01:16:08,880
just

1830
01:16:08,880 --> 01:16:11,040
out of the train

1831
01:16:11,040 --> 01:16:14,080
heading to the hotel

1832
01:16:14,480 --> 01:16:17,718
are you there

1833
01:16:21,280 --> 01:16:23,360
oh yeah do you want you do you want to

1834
01:16:23,360 --> 01:16:26,159
run your slides

1835
01:16:28,239 --> 01:16:33,159
it's very hard to hear you

1836
01:16:46,159 --> 01:16:49,600
can you say something yeah

1837
01:16:49,600 --> 01:16:52,000
i think you're muted

1838
01:16:52,000 --> 01:16:54,480
no he's not muted i can hear him but

1839
01:16:54,480 --> 01:16:58,000
it's very very silent

1840
01:16:59,520 --> 01:17:01,679
now he's so quiet that i can't hear him

1841
01:17:01,679 --> 01:17:02,960
at all

1842
01:17:02,960 --> 01:17:04,400
well i can

1843
01:17:04,400 --> 01:17:09,799
but so he's not muted completely but

1844
01:17:16,159 --> 01:17:18,640
yeah that's not better okay can you hear

1845
01:17:18,640 --> 01:17:20,400
me now

1846
01:17:20,400 --> 01:17:22,719
yes

1847
01:17:24,560 --> 01:17:28,280
so i think you can start

1848
01:17:39,600 --> 01:17:42,080
no that's worse again

1849
01:17:42,080 --> 01:17:46,320
whenever you use your earphones

1850
01:17:56,480 --> 01:18:01,879
we can even heal a bit of the music

1851
01:18:13,280 --> 01:18:16,560
okay i don't know if this is any better

1852
01:18:16,560 --> 01:18:19,120
yes it is just start presenting

1853
01:18:19,120 --> 01:18:20,480
okay

1854
01:18:20,480 --> 01:18:23,679
all right sorry for that snafu um i'm in

1855
01:18:23,679 --> 01:18:26,800
a public place so do

1856
01:18:26,800 --> 01:18:29,679
not mind the noise behind me

1857
01:18:29,679 --> 01:18:32,560
i'm here to give an update on the tcp

1858
01:18:32,560 --> 01:18:35,199
yang model

1859
01:18:37,600 --> 01:18:38,400
so

1860
01:18:38,400 --> 01:18:41,280
we started the scope of the

1861
01:18:41,280 --> 01:18:44,320
of this yang model for tcp with a fairly

1862
01:18:44,320 --> 01:18:45,920
narrow scope

1863
01:18:45,920 --> 01:18:46,800
of

1864
01:18:46,800 --> 01:18:49,520
providing basic statistics

1865
01:18:49,520 --> 01:18:51,600
which by definition were optional to

1866
01:18:51,600 --> 01:18:54,600
implement

1867
01:18:54,800 --> 01:18:57,040
a list of tcp connections

1868
01:18:57,040 --> 01:19:01,199
and a newly added list of

1869
01:19:01,199 --> 01:19:02,719
listeners

1870
01:19:02,719 --> 01:19:04,480
for uh that was

1871
01:19:04,480 --> 01:19:08,400
added in the recent version

1872
01:19:08,560 --> 01:19:11,120
that definition of that listener list

1873
01:19:11,120 --> 01:19:13,600
was established by what is existing in

1874
01:19:13,600 --> 01:19:16,320
tcp map

1875
01:19:16,320 --> 01:19:17,600
uh the

1876
01:19:17,600 --> 01:19:21,040
third item there is the modifications to

1877
01:19:21,040 --> 01:19:24,640
support tcpao and md5

1878
01:19:24,640 --> 01:19:27,040
previously we were trying to implement

1879
01:19:27,040 --> 01:19:28,239
another

1880
01:19:28,239 --> 01:19:31,600
by not augmenting the keychain model and

1881
01:19:31,600 --> 01:19:34,080
that didn't go down very well

1882
01:19:34,080 --> 01:19:36,560
so the recent changes now

1883
01:19:36,560 --> 01:19:38,719
add the augmentation

1884
01:19:38,719 --> 01:19:39,520
of

1885
01:19:39,520 --> 01:19:42,800
the keychain model to support tcpao and

1886
01:19:42,800 --> 01:19:45,040
md5

1887
01:19:45,040 --> 01:19:46,960
the

1888
01:19:46,960 --> 01:19:47,920
final

1889
01:19:47,920 --> 01:19:50,719
edition was the import of keep a live

1890
01:19:50,719 --> 01:19:52,000
groupings from

1891
01:19:52,000 --> 01:19:54,880
netcom tcp client server

1892
01:19:54,880 --> 01:19:55,920
draft

1893
01:19:55,920 --> 01:19:57,920
and this is mostly for alignment between

1894
01:19:57,920 --> 01:20:00,880
the two documents

1895
01:20:00,880 --> 01:20:03,520
the current status of the document is

1896
01:20:03,520 --> 01:20:06,159
it's in isc evaluation

1897
01:20:06,159 --> 01:20:09,040
there is a revised id needed

1898
01:20:09,040 --> 01:20:12,239
currently to address three discusses and

1899
01:20:12,239 --> 01:20:15,199
several comments that were received

1900
01:20:15,199 --> 01:20:16,320
and

1901
01:20:16,320 --> 01:20:19,120
the authors are working on an updated id

1902
01:20:19,120 --> 01:20:23,040
which will post right after the holidays

1903
01:20:23,040 --> 01:20:25,679
uh no fundamental extensions of the

1904
01:20:25,679 --> 01:20:28,320
scope of of the model are planned as as

1905
01:20:28,320 --> 01:20:29,679
of this time

1906
01:20:29,679 --> 01:20:32,960
but some minor edits will be required

1907
01:20:32,960 --> 01:20:33,920
to

1908
01:20:33,920 --> 01:20:37,679
address all the discus comments

1909
01:20:42,480 --> 01:20:47,839
now if i can only move to the next slide

1910
01:20:48,000 --> 01:20:49,440
all right

1911
01:20:49,440 --> 01:20:52,080
so here's the overview of the isc

1912
01:20:52,080 --> 01:20:54,639
feedback we have got as i said three

1913
01:20:54,639 --> 01:20:56,480
discusses and several

1914
01:20:56,480 --> 01:20:57,600
comments

1915
01:20:57,600 --> 01:20:59,040
um

1916
01:20:59,040 --> 01:21:01,520
a lot of them are have been addressed in

1917
01:21:01,520 --> 01:21:04,159
a working copy that you can see the

1918
01:21:04,159 --> 01:21:06,560
status on the right side

1919
01:21:06,560 --> 01:21:09,280
um a lot of the discusses and comments

1920
01:21:09,280 --> 01:21:12,639
were related to the encoding of any in

1921
01:21:12,639 --> 01:21:15,360
the tcp listener list

1922
01:21:15,360 --> 01:21:17,679
and i think that does need some minor

1923
01:21:17,679 --> 01:21:20,560
changes that we'll be working on

1924
01:21:20,560 --> 01:21:21,520
the

1925
01:21:21,520 --> 01:21:23,120
the other was the

1926
01:21:23,120 --> 01:21:26,080
uh the new edition of to support tcpa 0

1927
01:21:26,080 --> 01:21:26,840
and

1928
01:21:26,840 --> 01:21:30,239
md5 and the corresponding examples that

1929
01:21:30,239 --> 01:21:32,639
we have in the draft

1930
01:21:32,639 --> 01:21:34,719
there were some inconsistencies

1931
01:21:34,719 --> 01:21:36,400
in that example

1932
01:21:36,400 --> 01:21:39,840
that we have tried to now address

1933
01:21:39,840 --> 01:21:40,960
and then

1934
01:21:40,960 --> 01:21:44,000
um some inconsistency in the 2019

1935
01:21:44,000 --> 01:21:47,199
language we have also addressed

1936
01:21:47,199 --> 01:21:48,880
um

1937
01:21:48,880 --> 01:21:51,679
there is no uh there was a suggestion to

1938
01:21:51,679 --> 01:21:54,400
remove md5 support which the authors are

1939
01:21:54,400 --> 01:21:56,239
not planning to because we do have a

1940
01:21:56,239 --> 01:21:59,360
requirement from the bgp yang model for

1941
01:21:59,360 --> 01:22:02,239
support of md5

1942
01:22:02,239 --> 01:22:05,440
anyway the status of all these and the

1943
01:22:05,440 --> 01:22:08,000
changes is being tracked in the github

1944
01:22:08,000 --> 01:22:12,239
location link at the bottom of the slide

1945
01:22:16,639 --> 01:22:18,719
so as soon as the encoding of the any

1946
01:22:18,719 --> 01:22:21,120
listener list is concerned

1947
01:22:21,120 --> 01:22:24,719
it's currently encoded as a union

1948
01:22:24,719 --> 01:22:26,880
or that you see the definition of which

1949
01:22:26,880 --> 01:22:28,480
you see below

1950
01:22:28,480 --> 01:22:30,800
and this definition is comes from the

1951
01:22:30,800 --> 01:22:33,440
tcp myth

1952
01:22:33,440 --> 01:22:36,639
and i think the question

1953
01:22:36,639 --> 01:22:38,400
or the discuss comment that we received

1954
01:22:38,400 --> 01:22:39,440
was

1955
01:22:39,440 --> 01:22:41,440
how is um

1956
01:22:41,440 --> 01:22:44,639
the ipv4 address of all zeros or the

1957
01:22:44,639 --> 01:22:46,480
ipv6 address

1958
01:22:46,480 --> 01:22:49,600
interpreted by this particular union

1959
01:22:49,600 --> 01:22:50,880
and we'll

1960
01:22:50,880 --> 01:22:53,199
um the

1961
01:22:53,199 --> 01:22:56,080
yang 1.1 language essentially says that

1962
01:22:56,080 --> 01:22:58,000
if in a union

1963
01:22:58,000 --> 01:23:00,560
you have two type definitions

1964
01:23:00,560 --> 01:23:03,520
a you're supposed to parse the types in

1965
01:23:03,520 --> 01:23:05,360
that particular order

1966
01:23:05,360 --> 01:23:06,639
so if it's a

1967
01:23:06,639 --> 01:23:08,639
interprets what it has received as a

1968
01:23:08,639 --> 01:23:10,159
string it will

1969
01:23:10,159 --> 01:23:12,880
assign it to a type string

1970
01:23:12,880 --> 01:23:15,840
but in this case if the type is actually

1971
01:23:15,840 --> 01:23:17,679
a value

1972
01:23:17,679 --> 01:23:20,000
of four outputs of all zeroes then it

1973
01:23:20,000 --> 01:23:20,960
will be

1974
01:23:20,960 --> 01:23:23,760
assigned the type of inet ip address and

1975
01:23:23,760 --> 01:23:25,840
we'll try to clarify that in the next

1976
01:23:25,840 --> 01:23:28,960
version of the draft

1977
01:23:30,400 --> 01:23:32,560
the final slide

1978
01:23:32,560 --> 01:23:34,960
as i mentioned the ao configuration

1979
01:23:34,960 --> 01:23:37,040
examples there were a couple of

1980
01:23:37,040 --> 01:23:38,560
suggestions

1981
01:23:38,560 --> 01:23:42,719
on how to make uh the containers for ao

1982
01:23:42,719 --> 01:23:45,360
and md5 presence containers

1983
01:23:45,360 --> 01:23:47,199
which we have adopted in the draft it's

1984
01:23:47,199 --> 01:23:49,760
a minor change doesn't fundamentally

1985
01:23:49,760 --> 01:23:52,800
change the model in any way

1986
01:23:52,800 --> 01:23:56,080
what is new and and required edition is

1987
01:23:56,080 --> 01:24:00,159
that because tcpao supports um

1988
01:24:00,159 --> 01:24:02,560
aes 128

1989
01:24:02,560 --> 01:24:05,600
and the example in the draft did not

1990
01:24:05,600 --> 01:24:08,560
reflect the fact that the crypto type

1991
01:24:08,560 --> 01:24:12,639
that a ao supports only 120 aes 128

1992
01:24:12,639 --> 01:24:16,239
we needed to add that to the draft

1993
01:24:16,239 --> 01:24:18,639
so after adding that we had to update

1994
01:24:18,639 --> 01:24:20,159
the examples

1995
01:24:20,159 --> 01:24:25,120
to align it with rfc 9235 also

1996
01:24:25,120 --> 01:24:27,440
i think that's pretty much

1997
01:24:27,440 --> 01:24:29,040
all i had

1998
01:24:29,040 --> 01:24:32,880
from an update perspective

1999
01:24:33,920 --> 01:24:35,520
thank you very much for the comments for

2000
01:24:35,520 --> 01:24:37,440
the presentation and

2001
01:24:37,440 --> 01:24:39,199
for

2002
01:24:39,199 --> 01:24:40,639
arranging that you can make the

2003
01:24:40,639 --> 01:24:42,840
presentation

2004
01:24:42,840 --> 01:24:47,520
um the sheer stroke of luck

2005
01:24:48,880 --> 01:24:51,840
are there any comments

2006
01:24:54,239 --> 01:24:58,000
i only have one which means um

2007
01:24:58,000 --> 01:25:01,280
you said you changed the examples

2008
01:25:01,280 --> 01:25:03,280
are you able to check the examples that

2009
01:25:03,280 --> 01:25:05,199
they still work or

2010
01:25:05,199 --> 01:25:07,360
or

2011
01:25:07,920 --> 01:25:10,400
yeah so as part of

2012
01:25:10,400 --> 01:25:12,639
the draft we do run it

2013
01:25:12,639 --> 01:25:15,760
run the example against the model

2014
01:25:15,760 --> 01:25:18,800
um and we use yang lind to do the

2015
01:25:18,800 --> 01:25:20,800
verification that the example does

2016
01:25:20,800 --> 01:25:22,560
correspond

2017
01:25:22,560 --> 01:25:25,440
to the

2018
01:25:25,840 --> 01:25:28,159
okay

2019
01:25:28,800 --> 01:25:32,000
are there any other questions

2020
01:25:35,120 --> 01:25:36,320
if that's not the case then thank you

2021
01:25:36,320 --> 01:25:38,159
for the presentation

2022
01:25:38,159 --> 01:25:39,199
and

2023
01:25:39,199 --> 01:25:41,280
we

2024
01:25:41,280 --> 01:25:44,639
this presentation was kind of an

2025
01:25:44,639 --> 01:25:47,679
foundation to the next one given by

2026
01:25:47,679 --> 01:25:50,239
um guyan on

2027
01:25:50,239 --> 01:25:51,840
um

2028
01:25:51,840 --> 01:25:55,800
what might be missing

2029
01:25:57,040 --> 01:25:59,360
so

2030
01:26:01,679 --> 01:26:04,400
are you there

2031
01:26:06,719 --> 01:26:08,159
are you running the slides locally or

2032
01:26:08,159 --> 01:26:11,280
should i run them for you

2033
01:26:13,120 --> 01:26:15,440
okay

2034
01:26:15,520 --> 01:26:19,560
i understood thank you martin

2035
01:26:25,840 --> 01:26:28,639
hi my name is

2036
01:26:29,520 --> 01:26:30,639
hello

2037
01:26:30,639 --> 01:26:33,040
my name is gion mishra with verizon and

2038
01:26:33,040 --> 01:26:34,000
i'm

2039
01:26:34,000 --> 01:26:36,639
i will be presenting uh

2040
01:26:36,639 --> 01:26:39,520
the next gen tcp yang model a discussion

2041
01:26:39,520 --> 01:26:43,120
that came up um through the um

2042
01:26:43,120 --> 01:26:46,159
um hopster review um

2043
01:26:46,159 --> 01:26:47,199
recently

2044
01:26:47,199 --> 01:26:50,440
next slide

2045
01:26:51,679 --> 01:26:53,679
so here's some motivation and some

2046
01:26:53,679 --> 01:26:56,719
history related to the uh nextgen tcp

2047
01:26:56,719 --> 01:27:00,719
yang model so during the opsec review

2048
01:27:00,719 --> 01:27:03,440
of the tcp ganging model that was just

2049
01:27:03,440 --> 01:27:04,560
discussed

2050
01:27:04,560 --> 01:27:06,320
um

2051
01:27:06,320 --> 01:27:08,800
the as a result i we started looking at

2052
01:27:08,800 --> 01:27:12,320
a possible uh next-gen tcp yang model

2053
01:27:12,320 --> 01:27:15,040
and would like to get feedback from the

2054
01:27:15,040 --> 01:27:18,719
tcpm working group as well on this um

2055
01:27:18,719 --> 01:27:21,840
on on thoughts regarding this uh process

2056
01:27:21,840 --> 01:27:24,320
and if it's something that's feasible so

2057
01:27:24,320 --> 01:27:26,880
as a result we discussed the yang motto

2058
01:27:26,880 --> 01:27:30,080
and what would actually go into it

2059
01:27:30,080 --> 01:27:32,719
on on the mailing list

2060
01:27:32,719 --> 01:27:33,520
so

2061
01:27:33,520 --> 01:27:36,080
yang is about visibility

2062
01:27:36,080 --> 01:27:38,320
similar to the snmp mib and not remote

2063
01:27:38,320 --> 01:27:40,719
management uh just some discussion that

2064
01:27:40,719 --> 01:27:42,880
we've had that the current yang kind of

2065
01:27:42,880 --> 01:27:45,120
really mirrors the snmp mib

2066
01:27:45,120 --> 01:27:47,440
and uh from

2067
01:27:47,440 --> 01:27:48,239
the

2068
01:27:48,239 --> 01:27:50,159
routing area grouping kind of what we're

2069
01:27:50,159 --> 01:27:52,239
interested related to the next ntcp

2070
01:27:52,239 --> 01:27:55,120
management i mean sorry tcp yang model

2071
01:27:55,120 --> 01:27:57,199
so it's not really necessarily remote

2072
01:27:57,199 --> 01:27:59,280
management but what we would like to be

2073
01:27:59,280 --> 01:28:03,199
able to do is observe the tcp parameters

2074
01:28:03,199 --> 01:28:04,159
um

2075
01:28:04,159 --> 01:28:06,320
related to the tcp session state and

2076
01:28:06,320 --> 01:28:07,679
telemetry

2077
01:28:07,679 --> 01:28:10,320
um either back to a controller

2078
01:28:10,320 --> 01:28:11,040
or

2079
01:28:11,040 --> 01:28:14,000
a netcof netcom slash yang just being

2080
01:28:14,000 --> 01:28:16,880
able to pull our statistics

2081
01:28:16,880 --> 01:28:19,199
um we would like to see we would like to

2082
01:28:19,199 --> 01:28:21,120
be able to see everything

2083
01:28:21,120 --> 01:28:24,000
that could be seen um if you're looking

2084
01:28:24,000 --> 01:28:26,159
at like a local like an os hook into the

2085
01:28:26,159 --> 01:28:29,199
kernel just visibility into a tcp

2086
01:28:29,199 --> 01:28:30,800
parameters

2087
01:28:30,800 --> 01:28:33,280
related to the connection state next

2088
01:28:33,280 --> 01:28:35,599
slide

2089
01:28:37,600 --> 01:28:40,000
so the motivation here on the tcp gang

2090
01:28:40,000 --> 01:28:41,120
model

2091
01:28:41,120 --> 01:28:43,120
and reasons why

2092
01:28:43,120 --> 01:28:44,560
be so

2093
01:28:44,560 --> 01:28:46,159
i would say the main use case it's

2094
01:28:46,159 --> 01:28:48,320
really related to bgp

2095
01:28:48,320 --> 01:28:51,600
bgp has over the years has expanded its

2096
01:28:51,600 --> 01:28:52,800
scope

2097
01:28:52,800 --> 01:28:54,800
one of them is related to data centers

2098
01:28:54,800 --> 01:28:57,440
uh massively scalable data centers and

2099
01:28:57,440 --> 01:29:01,040
which which uh is bgp only now with rfc

2100
01:29:01,040 --> 01:29:03,679
7938 and that's something that

2101
01:29:03,679 --> 01:29:05,199
a lot of operators are looking towards

2102
01:29:05,199 --> 01:29:07,280
so kind of really the visibility and the

2103
01:29:07,280 --> 01:29:08,320
need for

2104
01:29:08,320 --> 01:29:10,880
stability with bgp and being able to

2105
01:29:10,880 --> 01:29:12,480
have

2106
01:29:12,480 --> 01:29:14,719
monitoring capabilities related to bgp

2107
01:29:14,719 --> 01:29:17,600
is really really important for operators

2108
01:29:17,600 --> 01:29:20,159
next slide

2109
01:29:21,760 --> 01:29:23,199
so this is a

2110
01:29:23,199 --> 01:29:26,000
just a use case that came up uh it's

2111
01:29:26,000 --> 01:29:28,639
it's it's come up a few times in the idr

2112
01:29:28,639 --> 01:29:31,120
working group and it's related to

2113
01:29:31,120 --> 01:29:32,880
internet outages that have that have

2114
01:29:32,880 --> 01:29:35,920
occurred with the tcp window

2115
01:29:35,920 --> 01:29:38,320
going into collapsing

2116
01:29:38,320 --> 01:29:41,199
and having a zero window resulting in a

2117
01:29:41,199 --> 01:29:42,480
stuck state

2118
01:29:42,480 --> 01:29:45,520
and i just put in there the mail mailing

2119
01:29:45,520 --> 01:29:49,600
list archives related to that discussion

2120
01:29:49,600 --> 01:29:51,679
so in this in this state what ends up

2121
01:29:51,679 --> 01:29:53,679
happening is you have like a router a on

2122
01:29:53,679 --> 01:29:54,719
the left

2123
01:29:54,719 --> 01:29:57,520
that the control plane is congested he's

2124
01:29:57,520 --> 01:29:59,840
got a send window greater than zero but

2125
01:29:59,840 --> 01:30:02,000
then he's got a receive window at zero

2126
01:30:02,000 --> 01:30:03,440
and then router b

2127
01:30:03,440 --> 01:30:05,440
he's uncongested he's got to send

2128
01:30:05,440 --> 01:30:07,760
windows 0 but a receive window greater

2129
01:30:07,760 --> 01:30:10,400
than zero and then the router a

2130
01:30:10,400 --> 01:30:12,880
he's not able to write to his tcp buffer

2131
01:30:12,880 --> 01:30:15,840
so even though the router b sends like a

2132
01:30:15,840 --> 01:30:18,880
log message notification back towards a

2133
01:30:18,880 --> 01:30:21,520
a is congested and

2134
01:30:21,520 --> 01:30:24,000
the session ends up staying up so we're

2135
01:30:24,000 --> 01:30:26,560
not able to reroute traffic and so it

2136
01:30:26,560 --> 01:30:28,080
which results in a

2137
01:30:28,080 --> 01:30:29,840
internet outage

2138
01:30:29,840 --> 01:30:32,400
next slide

2139
01:30:33,360 --> 01:30:36,080
um the second use case is related to uh

2140
01:30:36,080 --> 01:30:38,159
compute nodes and a tcp session just

2141
01:30:38,159 --> 01:30:39,760
being able to monitor

2142
01:30:39,760 --> 01:30:42,480
statistics uh related to the session

2143
01:30:42,480 --> 01:30:45,040
state and then windowing and the

2144
01:30:45,040 --> 01:30:47,760
window scaling and mostly for throughput

2145
01:30:47,760 --> 01:30:50,000
and application traffic uh

2146
01:30:50,000 --> 01:30:51,920
i guess server to server or client

2147
01:30:51,920 --> 01:30:54,159
server i guess response time

2148
01:30:54,159 --> 01:30:56,638
next slide

2149
01:30:57,760 --> 01:31:00,000
so i guess the really the big question

2150
01:31:00,000 --> 01:31:02,880
is that what do we want to add to this

2151
01:31:02,880 --> 01:31:05,679
next gen tcp yang model

2152
01:31:05,679 --> 01:31:08,400
so just in summary i just

2153
01:31:08,400 --> 01:31:10,400
threw in a few just some bullets of what

2154
01:31:10,400 --> 01:31:12,080
we were thinking

2155
01:31:12,080 --> 01:31:14,639
one is all the tcp states that are part

2156
01:31:14,639 --> 01:31:16,880
of the fsm state machine

2157
01:31:16,880 --> 01:31:20,159
tcp flags in respective states

2158
01:31:20,159 --> 01:31:22,239
tcp parameters that would be accessible

2159
01:31:22,239 --> 01:31:23,120
through the

2160
01:31:23,120 --> 01:31:24,800
local kernel

2161
01:31:24,800 --> 01:31:27,360
windowing parameters tcp options and

2162
01:31:27,360 --> 01:31:28,800
optimizations

2163
01:31:28,800 --> 01:31:31,520
and then um and then this the the

2164
01:31:31,520 --> 01:31:34,639
c-win tcp uh congestion control so the

2165
01:31:34,639 --> 01:31:37,600
cc parameters

2166
01:31:39,920 --> 01:31:42,239
next slide

2167
01:31:42,239 --> 01:31:45,280
and so um i'd like to get feedback from

2168
01:31:45,280 --> 01:31:48,320
the tcp working group uh just thoughts

2169
01:31:48,320 --> 01:31:52,519
related to this thank you

2170
01:31:59,120 --> 01:32:01,360
um michael did you just say bob i think

2171
01:32:01,360 --> 01:32:03,280
i read your lips but you're muted i

2172
01:32:03,280 --> 01:32:05,519
think

2173
01:32:06,719 --> 01:32:10,880
yep you can read my lips correctly

2174
01:32:10,880 --> 01:32:12,639
um

2175
01:32:12,639 --> 01:32:15,199
just just to point out all tcp options

2176
01:32:15,199 --> 01:32:17,199
is probably um

2177
01:32:17,199 --> 01:32:18,320
excessive

2178
01:32:18,320 --> 01:32:20,880
because um probably i don't know how we

2179
01:32:20,880 --> 01:32:22,320
make a list of those that are actually

2180
01:32:22,320 --> 01:32:23,520
used

2181
01:32:23,520 --> 01:32:25,440
but there's a lot that aren't

2182
01:32:25,440 --> 01:32:26,480
so

2183
01:32:26,480 --> 01:32:28,159
i understood

2184
01:32:28,159 --> 01:32:30,000
maybe parsing through because i'm not

2185
01:32:30,000 --> 01:32:30,880
really

2186
01:32:30,880 --> 01:32:33,520
you know if i i don't know what the how

2187
01:32:33,520 --> 01:32:35,600
large the list is but probably parsing

2188
01:32:35,600 --> 01:32:37,840
the list and see what would be pertinent

2189
01:32:37,840 --> 01:32:39,360
i guess would make sense because i'm

2190
01:32:39,360 --> 01:32:41,600
sure if it's a lengthy lengthy probably

2191
01:32:41,600 --> 01:32:43,199
doesn't make sense every single one but

2192
01:32:43,199 --> 01:32:45,440
just finding the ones that are pertinent

2193
01:32:45,440 --> 01:32:48,480
that would make sense

2194
01:32:53,040 --> 01:32:54,400
uh martin duke

2195
01:32:54,400 --> 01:32:56,719
google can you go back to the uh use

2196
01:32:56,719 --> 01:32:58,000
case one

2197
01:32:58,000 --> 01:33:00,239
sure

2198
01:33:03,360 --> 01:33:05,840
so um i'm a little confused by example

2199
01:33:05,840 --> 01:33:08,960
so you have um

2200
01:33:08,960 --> 01:33:11,040
keep going michael let's it's just which

2201
01:33:11,040 --> 01:33:12,480
one was it

2202
01:33:12,480 --> 01:33:13,600
that one

2203
01:33:13,600 --> 01:33:14,480
okay

2204
01:33:14,480 --> 01:33:15,520
so

2205
01:33:15,520 --> 01:33:18,960
in this case like from a to b

2206
01:33:18,960 --> 01:33:20,400
the both the sender received windows are

2207
01:33:20,400 --> 01:33:24,320
nonzero so data can be sent and then in

2208
01:33:24,320 --> 01:33:26,239
in b to a

2209
01:33:26,239 --> 01:33:27,040
it's

2210
01:33:27,040 --> 01:33:28,639
um

2211
01:33:28,639 --> 01:33:29,840
like

2212
01:33:29,840 --> 01:33:32,800
both sides are deadlocked right right

2213
01:33:32,800 --> 01:33:35,800
so

2214
01:33:38,080 --> 01:33:40,239
um

2215
01:33:40,239 --> 01:33:42,159
like what is the cause of this issue i

2216
01:33:42,159 --> 01:33:44,080
mean is this just a question where like

2217
01:33:44,080 --> 01:33:46,560
we just need to wait for an ack from b

2218
01:33:46,560 --> 01:33:48,639
to get a

2219
01:33:48,639 --> 01:33:50,480
unclogged

2220
01:33:50,480 --> 01:33:51,360
yes

2221
01:33:51,360 --> 01:33:53,120
so what what ended up happening this

2222
01:33:53,120 --> 01:33:55,120
stage of the router a

2223
01:33:55,120 --> 01:33:57,920
he's a he's not able to um

2224
01:33:57,920 --> 01:33:59,679
i guess he's he's the one that kind of

2225
01:33:59,679 --> 01:34:01,679
has its management plane it's kind of

2226
01:34:01,679 --> 01:34:02,719
it's hung

2227
01:34:02,719 --> 01:34:05,760
okay so his uh since the management plan

2228
01:34:05,760 --> 01:34:09,440
uses tcp as well as bgp using tcp he's

2229
01:34:09,440 --> 01:34:11,199
not able to uh

2230
01:34:11,199 --> 01:34:13,920
like to write to the uh i guess the us

2231
01:34:13,920 --> 01:34:16,080
is i believe it's the uh

2232
01:34:16,080 --> 01:34:18,480
receive window so he's not able to write

2233
01:34:18,480 --> 01:34:19,760
to his buffer

2234
01:34:19,760 --> 01:34:22,639
and so he is not able to uh

2235
01:34:22,639 --> 01:34:24,560
process i guess anything like if you

2236
01:34:24,560 --> 01:34:27,040
even if he gets the uh message

2237
01:34:27,040 --> 01:34:28,560
he had what ends up happening he just

2238
01:34:28,560 --> 01:34:30,320
doesn't close the session i think that's

2239
01:34:30,320 --> 01:34:31,760
the thing he's not aware of the other

2240
01:34:31,760 --> 01:34:34,000
end he thinks everything is still up and

2241
01:34:34,000 --> 01:34:35,520
he keeps the session like i think the

2242
01:34:35,520 --> 01:34:37,040
best thing that would happen is if

2243
01:34:37,040 --> 01:34:39,199
somehow he was able to like close the

2244
01:34:39,199 --> 01:34:41,920
session or do a tcp reset and then

2245
01:34:41,920 --> 01:34:44,000
traffic would converge to an alternate

2246
01:34:44,000 --> 01:34:46,639
path but the session just kind of it

2247
01:34:46,639 --> 01:34:48,880
ends up just staying in an upstate

2248
01:34:48,880 --> 01:34:49,600
so

2249
01:34:49,600 --> 01:34:52,239
that's that's where the i think in like

2250
01:34:52,239 --> 01:34:54,400
if you it you know like a client server

2251
01:34:54,400 --> 01:34:56,159
application where you have

2252
01:34:56,159 --> 01:34:58,480
you know tcp zero window which happens

2253
01:34:58,480 --> 01:35:00,400
and then the window opens up in this

2254
01:35:00,400 --> 01:35:02,480
particular case because it's router to

2255
01:35:02,480 --> 01:35:03,840
router

2256
01:35:03,840 --> 01:35:05,600
in this for when when that happens that

2257
01:35:05,600 --> 01:35:08,080
congested state happens it's like the

2258
01:35:08,080 --> 01:35:10,480
management plane is just completely hung

2259
01:35:10,480 --> 01:35:12,400
but then the bgp just kind of because

2260
01:35:12,400 --> 01:35:14,239
the managing plane is hung and it's

2261
01:35:14,239 --> 01:35:15,840
using tcp

2262
01:35:15,840 --> 01:35:19,360
um these state of the connection ends up

2263
01:35:19,360 --> 01:35:21,520
remains remaining active

2264
01:35:21,520 --> 01:35:24,159
and unfortunately bgp doesn't reroute

2265
01:35:24,159 --> 01:35:25,920
okay so the problem here is a is hung

2266
01:35:25,920 --> 01:35:27,840
and b doesn't realize that a is fine

2267
01:35:27,840 --> 01:35:29,760
okay that's right but like your remedy

2268
01:35:29,760 --> 01:35:32,400
is to reboot a then i would imagine it

2269
01:35:32,400 --> 01:35:34,719
is but i think what ends up happening i

2270
01:35:34,719 --> 01:35:36,560
think with the knock whenever this has

2271
01:35:36,560 --> 01:35:38,880
happened because the session is up

2272
01:35:38,880 --> 01:35:41,600
it's hard for the not to realize that

2273
01:35:41,600 --> 01:35:42,560
it's um

2274
01:35:42,560 --> 01:35:44,480
it sees routes and everything seems like

2275
01:35:44,480 --> 01:35:47,040
normal but it's not able to process

2276
01:35:47,040 --> 01:35:49,280
anything so it takes time so so the

2277
01:35:49,280 --> 01:35:50,800
issue so i'm guessing that in this

2278
01:35:50,800 --> 01:35:53,440
scenario a is not like

2279
01:35:53,440 --> 01:35:55,760
is not reporting yang stuff because it's

2280
01:35:55,760 --> 01:35:57,679
toast so it's b is

2281
01:35:57,679 --> 01:35:59,360
so what you're trying to do here is use

2282
01:35:59,360 --> 01:36:01,440
b to ascertain the state of a by looking

2283
01:36:01,440 --> 01:36:03,199
at the tcp parameters

2284
01:36:03,199 --> 01:36:04,000
okay

2285
01:36:04,000 --> 01:36:06,560
all right that that at least makes sense

2286
01:36:06,560 --> 01:36:08,159
and just to be clear these are not like

2287
01:36:08,159 --> 01:36:10,000
commodity tcp implementations these are

2288
01:36:10,000 --> 01:36:11,920
specific to the routers that are they

2289
01:36:11,920 --> 01:36:13,679
have their own

2290
01:36:13,679 --> 01:36:16,159
distinct tcp implementation

2291
01:36:16,159 --> 01:36:18,080
yes probably

2292
01:36:18,080 --> 01:36:20,159
yes okay different different vendors i

2293
01:36:20,159 --> 01:36:22,080
guess or because i'm interesting like if

2294
01:36:22,080 --> 01:36:23,840
you're just using linux tcp i don't know

2295
01:36:23,840 --> 01:36:25,199
you can install i mean i doubt they're

2296
01:36:25,199 --> 01:36:27,760
going to implement the yang and so

2297
01:36:27,760 --> 01:36:30,639
um there's no market for this if that's

2298
01:36:30,639 --> 01:36:32,880
if that's the case um

2299
01:36:32,880 --> 01:36:35,199
yeah i mean i'm a little i'm a little

2300
01:36:35,199 --> 01:36:38,199
like

2301
01:36:39,199 --> 01:36:41,040
it seems like you're not like tuning

2302
01:36:41,040 --> 01:36:43,119
since since by since you stated you were

2303
01:36:43,119 --> 01:36:46,800
not tuning these parameters right i i do

2304
01:36:46,800 --> 01:36:49,440
it seems like your actual um option

2305
01:36:49,440 --> 01:36:51,199
you're just like reset connections

2306
01:36:51,199 --> 01:36:53,440
reboot stuff right and like i'm

2307
01:36:53,440 --> 01:36:56,000
wondering if a much simpler like

2308
01:36:56,000 --> 01:36:57,760
i am dead locked model

2309
01:36:57,760 --> 01:36:59,920
is much simpler than trying to like have

2310
01:36:59,920 --> 01:37:01,600
like dozens and dozens of parameters

2311
01:37:01,600 --> 01:37:02,960
you're specifying and reporting and like

2312
01:37:02,960 --> 01:37:05,360
having complex logic for what means what

2313
01:37:05,360 --> 01:37:06,880
um just having looked at this and

2314
01:37:06,880 --> 01:37:08,639
thought about it for 10 minutes

2315
01:37:08,639 --> 01:37:10,320
but um thanks i i think i understand

2316
01:37:10,320 --> 01:37:12,080
your use case better now

2317
01:37:12,080 --> 01:37:14,400
thank you

2318
01:37:14,639 --> 01:37:16,400
um

2319
01:37:16,400 --> 01:37:18,000
regarding this deadlock situation i'm

2320
01:37:18,000 --> 01:37:21,119
wondering i mean tcp the tcp connection

2321
01:37:21,119 --> 01:37:24,000
can be up and happy

2322
01:37:24,000 --> 01:37:25,840
even if you are not able to progress

2323
01:37:25,840 --> 01:37:27,840
user data

2324
01:37:27,840 --> 01:37:30,000
so if the application is stuck

2325
01:37:30,000 --> 01:37:32,080
from from from a tcp point of view

2326
01:37:32,080 --> 01:37:33,600
that's fine so normally what you do

2327
01:37:33,600 --> 01:37:36,159
there is application layer

2328
01:37:36,159 --> 01:37:37,760
heart beating or

2329
01:37:37,760 --> 01:37:40,080
application layer test messages and then

2330
01:37:40,080 --> 01:37:42,000
you figure out that your

2331
01:37:42,000 --> 01:37:43,840
peer application you can't talk to your

2332
01:37:43,840 --> 01:37:46,480
peer application layer anymore

2333
01:37:46,480 --> 01:37:49,040
but on the

2334
01:37:49,040 --> 01:37:50,159
on

2335
01:37:50,159 --> 01:37:52,880
these points i'm trying to so i i don't

2336
01:37:52,880 --> 01:37:54,480
know much about yang so that's why i

2337
01:37:54,480 --> 01:37:56,320
want to figure out what you what you are

2338
01:37:56,320 --> 01:37:57,920
looking for

2339
01:37:57,920 --> 01:38:00,000
looking at tcp flags

2340
01:38:00,000 --> 01:38:02,400
this means like you want to do kind of a

2341
01:38:02,400 --> 01:38:06,000
live tracing of which packets are being

2342
01:38:06,000 --> 01:38:08,560
sent and received

2343
01:38:08,560 --> 01:38:09,920
and

2344
01:38:09,920 --> 01:38:12,159
reading that you want where is it state

2345
01:38:12,159 --> 01:38:13,600
you you want to

2346
01:38:13,600 --> 01:38:15,600
all tcp parameters that would be

2347
01:38:15,600 --> 01:38:18,400
accessible with the local os kernel hook

2348
01:38:18,400 --> 01:38:20,719
this looks like

2349
01:38:20,719 --> 01:38:24,800
a lot of implementation specific values

2350
01:38:24,800 --> 01:38:25,840
and

2351
01:38:25,840 --> 01:38:27,760
i think it's very hard to

2352
01:38:27,760 --> 01:38:31,440
to to standardize them

2353
01:38:33,040 --> 01:38:34,719
so my understanding is that you can you

2354
01:38:34,719 --> 01:38:36,880
can get you can get a snapshot of a

2355
01:38:36,880 --> 01:38:39,520
state but like continuous monitoring

2356
01:38:39,520 --> 01:38:41,440
seems to be

2357
01:38:41,440 --> 01:38:42,880
different

2358
01:38:42,880 --> 01:38:45,840
that's correct

2359
01:38:46,159 --> 01:38:48,480
you know as far as the tcp parameters i

2360
01:38:48,480 --> 01:38:50,080
think as i think someone else had asked

2361
01:38:50,080 --> 01:38:52,239
that question but i think really

2362
01:38:52,239 --> 01:38:54,480
maybe the pertinent parameters i don't

2363
01:38:54,480 --> 01:38:56,400
think we'd probably need all of all of

2364
01:38:56,400 --> 01:38:57,920
the parameters but i think what's

2365
01:38:57,920 --> 01:39:00,159
pertinent to the connection state that

2366
01:39:00,159 --> 01:39:02,560
actually would help us in

2367
01:39:02,560 --> 01:39:05,360
determining whether a problem i guess

2368
01:39:05,360 --> 01:39:07,840
for like the knock i guess if if there's

2369
01:39:07,840 --> 01:39:09,119
a problem

2370
01:39:09,119 --> 01:39:11,679
and maybe parsing through the parameters

2371
01:39:11,679 --> 01:39:13,119
and there may be

2372
01:39:13,119 --> 01:39:14,960
some key parameters that would be

2373
01:39:14,960 --> 01:39:17,440
helpful i guess

2374
01:39:17,440 --> 01:39:19,119
i mean do you want to know that time

2375
01:39:19,119 --> 01:39:21,280
stems have been negotiated sec has been

2376
01:39:21,280 --> 01:39:24,719
negotiated and window scaling

2377
01:39:24,719 --> 01:39:27,600
these are the typical tcp options which

2378
01:39:27,600 --> 01:39:29,760
are negotiated in your case i guess

2379
01:39:29,760 --> 01:39:33,920
tcpao or tcp md5 also but

2380
01:39:33,920 --> 01:39:35,520
that's a static thing that's that's

2381
01:39:35,520 --> 01:39:37,360
something you can

2382
01:39:37,360 --> 01:39:41,280
query and get a response

2383
01:39:41,280 --> 01:39:43,760
but i don't see how that helps in the

2384
01:39:43,760 --> 01:39:46,719
problem you showed

2385
01:39:50,320 --> 01:39:52,799
jeffrey

2386
01:39:52,960 --> 01:39:55,360
jeffrey haase juniper networks bgb

2387
01:39:55,360 --> 01:39:56,880
developer

2388
01:39:56,880 --> 01:39:59,440
yang no author

2389
01:39:59,440 --> 01:40:00,880
so

2390
01:40:00,880 --> 01:40:02,480
you gave me a giant list to try to work

2391
01:40:02,480 --> 01:40:03,920
through i wish i could have hit them one

2392
01:40:03,920 --> 01:40:05,600
at a time sorry

2393
01:40:05,600 --> 01:40:08,560
so uh to guyan's point

2394
01:40:08,560 --> 01:40:10,639
the stuff that's in here state-wise is

2395
01:40:10,639 --> 01:40:13,360
all appropriate uh your point about

2396
01:40:13,360 --> 01:40:14,960
we're not trying to implement t-speed

2397
01:40:14,960 --> 01:40:16,719
dump on top of yang that does not make

2398
01:40:16,719 --> 01:40:17,920
sense

2399
01:40:17,920 --> 01:40:19,760
so being able to look at the tcp flags

2400
01:40:19,760 --> 01:40:21,520
modeling all those that's not a big deal

2401
01:40:21,520 --> 01:40:23,679
for the session if you think about most

2402
01:40:23,679 --> 01:40:25,679
tcp you know stacks you're setting these

2403
01:40:25,679 --> 01:40:27,600
things as socket options

2404
01:40:27,600 --> 01:40:29,440
and that's an appropriate thing to see

2405
01:40:29,440 --> 01:40:31,440
as part of socket state as an example

2406
01:40:31,440 --> 01:40:33,280
there may be appropriate things like you

2407
01:40:33,280 --> 01:40:35,199
know if you've seen an expected tcp

2408
01:40:35,199 --> 01:40:36,719
option on the session you could also

2409
01:40:36,719 --> 01:40:38,639
record that and basically say so this

2410
01:40:38,639 --> 01:40:40,159
was the thing that's seen

2411
01:40:40,159 --> 01:40:42,800
but trying to snapshot live state

2412
01:40:42,800 --> 01:40:45,360
for flag for each packet is not part of

2413
01:40:45,360 --> 01:40:47,520
the goal

2414
01:40:47,520 --> 01:40:49,199
so rolling back to the use case one

2415
01:40:49,199 --> 01:40:50,800
stuff no with the

2416
01:40:50,800 --> 01:40:52,400
stuck sessions there's

2417
01:40:52,400 --> 01:40:55,360
multiple reasons this stuff can happen

2418
01:40:55,360 --> 01:40:57,520
sometimes you have you know drop packets

2419
01:40:57,520 --> 01:40:59,440
at inopportune times where each side

2420
01:40:59,440 --> 01:41:00,880
sort of thinks that's trying to get out

2421
01:41:00,880 --> 01:41:02,560
of the state and it just never gets

2422
01:41:02,560 --> 01:41:04,320
there for some reason sometimes you have

2423
01:41:04,320 --> 01:41:05,840
that due to specific types of network

2424
01:41:05,840 --> 01:41:06,960
drop

2425
01:41:06,960 --> 01:41:08,880
sometimes authentication can cause that

2426
01:41:08,880 --> 01:41:09,679
in

2427
01:41:09,679 --> 01:41:12,080
certain circumstances but in the vast

2428
01:41:12,080 --> 01:41:13,600
majority of cases these things are

2429
01:41:13,600 --> 01:41:15,199
either bugs

2430
01:41:15,199 --> 01:41:18,080
or other unusual circumstances that the

2431
01:41:18,080 --> 01:41:19,440
whole issue is

2432
01:41:19,440 --> 01:41:21,840
this session is wedged

2433
01:41:21,840 --> 01:41:24,719
the client you know bgp is the example

2434
01:41:24,719 --> 01:41:26,000
case but this can happen for other

2435
01:41:26,000 --> 01:41:27,040
things

2436
01:41:27,040 --> 01:41:28,880
it's sort of stuck waiting to get out of

2437
01:41:28,880 --> 01:41:30,880
the circumstance and you know if you're

2438
01:41:30,880 --> 01:41:34,800
not implementing a form of protocol go

2439
01:41:34,800 --> 01:41:36,960
keep alive or hold timer that expects to

2440
01:41:36,960 --> 01:41:39,199
get out of the situation because as far

2441
01:41:39,199 --> 01:41:41,360
as each side can tell you have you know

2442
01:41:41,360 --> 01:41:43,119
data pending you're waiting to actually

2443
01:41:43,119 --> 01:41:44,719
move along

2444
01:41:44,719 --> 01:41:46,239
so the challenge comes you know when you

2445
01:41:46,239 --> 01:41:48,480
get into these stuck situations how do

2446
01:41:48,480 --> 01:41:50,639
you troubleshoot them and if you're on

2447
01:41:50,639 --> 01:41:52,480
the box you're going to sit down type

2448
01:41:52,480 --> 01:41:55,199
netstat and see what's going on

2449
01:41:55,199 --> 01:41:57,280
what's needed for operators that are

2450
01:41:57,280 --> 01:41:59,280
trying to troubleshoot applications like

2451
01:41:59,280 --> 01:42:02,080
bgp that are used in routers

2452
01:42:02,080 --> 01:42:03,840
to be able to troubleshoot the situation

2453
01:42:03,840 --> 01:42:05,119
you know remotely is being able to

2454
01:42:05,119 --> 01:42:07,760
simply get the status of the session

2455
01:42:07,760 --> 01:42:09,199
see what's going on

2456
01:42:09,199 --> 01:42:10,320
and

2457
01:42:10,320 --> 01:42:11,760
you know there may be opportunities for

2458
01:42:11,760 --> 01:42:13,600
some level of telemetry for these stuck

2459
01:42:13,600 --> 01:42:16,000
situations like zero windowing is a

2460
01:42:16,000 --> 01:42:17,679
common thing you don't want to generate

2461
01:42:17,679 --> 01:42:19,119
a

2462
01:42:19,119 --> 01:42:20,800
gang notification or trap out of this

2463
01:42:20,800 --> 01:42:22,639
sort of thing just like you wouldn't

2464
01:42:22,639 --> 01:42:24,800
want to do an snmp

2465
01:42:24,800 --> 01:42:26,000
but it's very appropriate that if you're

2466
01:42:26,000 --> 01:42:27,440
monitoring these things and you see that

2467
01:42:27,440 --> 01:42:29,679
a bgp session sort of gotten stuck being

2468
01:42:29,679 --> 01:42:32,639
able to query you know via netcave you

2469
01:42:32,639 --> 01:42:34,239
know what is the status of the socket

2470
01:42:34,239 --> 01:42:36,080
you know it's been zero windowed

2471
01:42:36,080 --> 01:42:37,679
and if i see that's been that way for

2472
01:42:37,679 --> 01:42:39,119
you know a minute

2473
01:42:39,119 --> 01:42:40,639
you can then take action you like

2474
01:42:40,639 --> 01:42:42,080
resetting the session you know using

2475
01:42:42,080 --> 01:42:44,480
your new router protocol

2476
01:42:44,480 --> 01:42:46,639
so there's a lot of options for things

2477
01:42:46,639 --> 01:42:49,040
that you can do here but most of this is

2478
01:42:49,040 --> 01:42:51,360
the same type of visibility you'd get

2479
01:42:51,360 --> 01:42:53,360
via cli

2480
01:42:53,360 --> 01:42:54,719
and just simply you know putting into

2481
01:42:54,719 --> 01:42:56,000
the management plane in a generic

2482
01:42:56,000 --> 01:42:58,080
fashion and uh there's a throwaway

2483
01:42:58,080 --> 01:43:00,719
comment about you know modern stacks you

2484
01:43:00,719 --> 01:43:02,639
know we run bsd drive stacks we run

2485
01:43:02,639 --> 01:43:05,280
linux drive stacks and we layer stuff on

2486
01:43:05,280 --> 01:43:07,760
top of all that for management so this

2487
01:43:07,760 --> 01:43:11,840
is not an unusual thing

2488
01:43:15,199 --> 01:43:16,560
thank you

2489
01:43:16,560 --> 01:43:19,360
thank you jeff thank you jeff

2490
01:43:19,360 --> 01:43:20,719
quick question

2491
01:43:20,719 --> 01:43:24,719
again yes so are you going to propose a

2492
01:43:24,719 --> 01:43:27,360
new document sorry um

2493
01:43:27,360 --> 01:43:29,600
so i want to generally reflect uh i

2494
01:43:29,600 --> 01:43:31,520
think the comments that both

2495
01:43:31,520 --> 01:43:34,000
jeff and michael provided

2496
01:43:34,000 --> 01:43:37,280
both as uh author of the bgp yang model

2497
01:43:37,280 --> 01:43:41,119
and the tcp yang model

2498
01:43:41,199 --> 01:43:42,320
that i think

2499
01:43:42,320 --> 01:43:44,800
trying to keep track of state

2500
01:43:44,800 --> 01:43:47,199
information or at least the live state

2501
01:43:47,199 --> 01:43:49,119
information doesn't probably doesn't

2502
01:43:49,119 --> 01:43:50,320
make sense

2503
01:43:50,320 --> 01:43:52,400
as a replacement for

2504
01:43:52,400 --> 01:43:56,000
um tcp dump but definitely

2505
01:43:56,000 --> 01:43:57,360
for

2506
01:43:57,360 --> 01:43:58,639
conditions

2507
01:43:58,639 --> 01:44:01,040
just like jeff pointed out about stuck

2508
01:44:01,040 --> 01:44:03,760
connections and zero window

2509
01:44:03,760 --> 01:44:04,880
though that

2510
01:44:04,880 --> 01:44:07,040
certainly can be helpful piece of

2511
01:44:07,040 --> 01:44:08,239
information

2512
01:44:08,239 --> 01:44:12,718
that we could add to the model

2513
01:44:14,719 --> 01:44:16,080
that would be perfect i mean that's

2514
01:44:16,080 --> 01:44:18,080
really as jeff described that's exactly

2515
01:44:18,080 --> 01:44:19,520
what we're looking for

2516
01:44:19,520 --> 01:44:21,520
somehow that we can get an alert you

2517
01:44:21,520 --> 01:44:23,679
know when that stuck state happens with

2518
01:44:23,679 --> 01:44:26,320
the zero you know when that zero window

2519
01:44:26,320 --> 01:44:28,159
happens and being able to

2520
01:44:28,159 --> 01:44:29,199
you know

2521
01:44:29,199 --> 01:44:31,920
get a report you know you know flagged i

2522
01:44:31,920 --> 01:44:33,679
guess to the knock and then being able

2523
01:44:33,679 --> 01:44:36,159
to you know act on it as soon as the

2524
01:44:36,159 --> 01:44:38,080
stuck stage like if it's stuck for a

2525
01:44:38,080 --> 01:44:40,960
period of time then we can act on it and

2526
01:44:40,960 --> 01:44:43,760
reset the session

2527
01:44:45,119 --> 01:44:48,480
uh martin duke google again um

2528
01:44:48,480 --> 01:44:50,960
so like uh you know obviously the bg

2529
01:44:50,960 --> 01:44:54,400
community bgp community uses yang and so

2530
01:44:54,400 --> 01:44:56,400
i i'm you know we're doing getting work

2531
01:44:56,400 --> 01:44:58,239
now for them and i think doing more work

2532
01:44:58,239 --> 01:44:59,679
for them is fine

2533
01:44:59,679 --> 01:45:03,480
i just think um

2534
01:45:03,679 --> 01:45:04,880
i think the principle we're trying to

2535
01:45:04,880 --> 01:45:07,760
apply to our yang work is to not

2536
01:45:07,760 --> 01:45:09,520
um

2537
01:45:09,520 --> 01:45:11,440
not try to do all of tcp

2538
01:45:11,440 --> 01:45:13,119
because the mib experience was a

2539
01:45:13,119 --> 01:45:15,679
terrible one and to be very very

2540
01:45:15,679 --> 01:45:17,760
deliberate in adding stuff to that so

2541
01:45:17,760 --> 01:45:19,520
like i mean

2542
01:45:19,520 --> 01:45:21,119
if this work i don't i fundamentally

2543
01:45:21,119 --> 01:45:22,560
object to this work progressing but i

2544
01:45:22,560 --> 01:45:25,280
would like to like i would like the the

2545
01:45:25,280 --> 01:45:28,800
proponents to think hard about

2546
01:45:28,800 --> 01:45:30,560
what kind of information would be

2547
01:45:30,560 --> 01:45:32,400
actionable and whether you need like

2548
01:45:32,400 --> 01:45:33,520
really

2549
01:45:33,520 --> 01:45:36,080
fine-grained stuff like window sizes or

2550
01:45:36,080 --> 01:45:38,080
like where like booleans could be used

2551
01:45:38,080 --> 01:45:40,080
there's or like if there's a bunch of

2552
01:45:40,080 --> 01:45:41,840
stuff where the answer is reboot the box

2553
01:45:41,840 --> 01:45:43,440
like just have like a i need to be

2554
01:45:43,440 --> 01:45:46,000
rebooted indicator or whatever um uh i

2555
01:45:46,000 --> 01:45:47,600
mean you know i'm off top of my head i'm

2556
01:45:47,600 --> 01:45:49,520
probably not saying that right but

2557
01:45:49,520 --> 01:45:52,159
um to not have like try to have a very

2558
01:45:52,159 --> 01:45:54,960
like small yang model if possible that

2559
01:45:54,960 --> 01:45:56,960
covers what you really need for this use

2560
01:45:56,960 --> 01:45:59,360
for these use cases and um

2561
01:45:59,360 --> 01:46:00,800
that you know

2562
01:46:00,800 --> 01:46:03,199
that relates to actionable stuff and

2563
01:46:03,199 --> 01:46:04,400
that will just make this a much more

2564
01:46:04,400 --> 01:46:05,600
practical thing to get through the

2565
01:46:05,600 --> 01:46:06,639
process

2566
01:46:06,639 --> 01:46:09,600
makes make sense

2567
01:46:11,679 --> 01:46:14,800
jeffrey hans following up

2568
01:46:14,800 --> 01:46:16,480
i don't disagree with you

2569
01:46:16,480 --> 01:46:18,159
you want to keep the model

2570
01:46:18,159 --> 01:46:20,400
as small as reasonable yang has the

2571
01:46:20,400 --> 01:46:22,239
property that it can be extended

2572
01:46:22,239 --> 01:46:24,800
especially no proprietary in a very easy

2573
01:46:24,800 --> 01:46:27,360
manner

2574
01:46:27,360 --> 01:46:29,040
offering advice to this working group

2575
01:46:29,040 --> 01:46:30,800
having done lobbying stuff for itf at

2576
01:46:30,800 --> 01:46:31,920
the moment

2577
01:46:31,920 --> 01:46:34,080
you have a choice in front of you

2578
01:46:34,080 --> 01:46:36,159
you can either do enough of the work

2579
01:46:36,159 --> 01:46:37,600
such that everybody that wants to use

2580
01:46:37,600 --> 01:46:39,199
the stuff and you'll leave a lot of

2581
01:46:39,199 --> 01:46:41,199
stuff optional

2582
01:46:41,199 --> 01:46:43,520
and model it once

2583
01:46:43,520 --> 01:46:45,440
or risk all the vendors coming out and

2584
01:46:45,440 --> 01:46:47,840
saying you missed a important thing

2585
01:46:47,840 --> 01:46:48,880
and every one of them doing a

2586
01:46:48,880 --> 01:46:50,719
proprietary extension and forking

2587
01:46:50,719 --> 01:46:52,320
everything

2588
01:46:52,320 --> 01:46:55,440
so it's a hard walk to do

2589
01:46:55,440 --> 01:46:56,880
but it's doable

2590
01:46:56,880 --> 01:46:58,800
thank you

2591
01:46:58,800 --> 01:47:01,360
thank you jeff

2592
01:47:04,639 --> 01:47:06,639
all right yoshi how did you did you want

2593
01:47:06,639 --> 01:47:08,320
to

2594
01:47:08,320 --> 01:47:11,040
ask a question

2595
01:47:12,320 --> 01:47:14,719
does anyone have any other questions

2596
01:47:14,719 --> 01:47:18,159
okay all right thank you

2597
01:47:21,840 --> 01:47:24,159
okay

2598
01:47:25,199 --> 01:47:27,760
any comments regarding

2599
01:47:27,760 --> 01:47:30,480
the young stuff

2600
01:47:33,440 --> 01:47:35,280
if that's not the case then we are at

2601
01:47:35,280 --> 01:47:37,040
the last presentation

2602
01:47:37,040 --> 01:47:39,600
charts

2603
01:47:39,920 --> 01:47:42,320
okay hello can you hear me

2604
01:47:42,320 --> 01:47:44,080
yep

2605
01:47:44,080 --> 01:47:46,800
are you running a slide

2606
01:47:46,800 --> 01:47:48,719
can you do it

2607
01:47:48,719 --> 01:47:50,400
i can do it you can do it on your own

2608
01:47:50,400 --> 01:47:53,280
you have on your upper so below your

2609
01:47:53,280 --> 01:47:57,760
name the second item from the left

2610
01:47:57,760 --> 01:48:00,159
yeah you can choose your slides

2611
01:48:00,159 --> 01:48:03,799
slightly requested

2612
01:48:04,719 --> 01:48:07,840
so i pressed ask to share yeah okay now

2613
01:48:07,840 --> 01:48:09,600
i see the

2614
01:48:09,600 --> 01:48:10,880
slides

2615
01:48:10,880 --> 01:48:14,400
then you control them yourself

2616
01:48:15,440 --> 01:48:17,520
okay

2617
01:48:17,520 --> 01:48:18,480
okay so

2618
01:48:18,480 --> 01:48:20,880
uh hello everyone my name is carlos

2619
01:48:20,880 --> 01:48:22,560
gomez i'm going to present the updated

2620
01:48:22,560 --> 01:48:25,440
version of the draft entitled tcp a

2621
01:48:25,440 --> 01:48:27,679
great request star option

2622
01:48:27,679 --> 01:48:29,600
my co-author is john krugrad from the

2623
01:48:29,600 --> 01:48:33,280
university of cambridge

2624
01:48:33,280 --> 01:48:34,800
so first of all let's take a look at the

2625
01:48:34,800 --> 01:48:36,880
motivation for this draft

2626
01:48:36,880 --> 01:48:39,440
delay tax is a widely used mechanism

2627
01:48:39,440 --> 01:48:41,760
which is intended to reduce protocol

2628
01:48:41,760 --> 01:48:44,480
overhead however it may also contribute

2629
01:48:44,480 --> 01:48:47,440
to suboptimal performance in some cases

2630
01:48:47,440 --> 01:48:49,280
for example in so-called large

2631
01:48:49,280 --> 01:48:51,679
congestion window scenarios meaning

2632
01:48:51,679 --> 01:48:53,600
congestion window size much greater than

2633
01:48:53,600 --> 01:48:54,960
the mss

2634
01:48:54,960 --> 01:48:57,119
where saving up to one of every 2x may

2635
01:48:57,119 --> 01:48:58,719
be insufficient

2636
01:48:58,719 --> 01:49:00,239
for example when there are performance

2637
01:49:00,239 --> 01:49:01,840
limitations due to a symmetric path

2638
01:49:01,840 --> 01:49:05,440
capacity or due when we want to reduce

2639
01:49:05,440 --> 01:49:07,040
further the computational cost and

2640
01:49:07,040 --> 01:49:08,560
network load

2641
01:49:08,560 --> 01:49:10,560
and then there are also so-called small

2642
01:49:10,560 --> 01:49:13,520
congestion window scenarios that is a

2643
01:49:13,520 --> 01:49:15,520
congestion window size up to the order

2644
01:49:15,520 --> 01:49:18,480
of one mss for example in data centers

2645
01:49:18,480 --> 01:49:20,639
where the bandwidth delay product

2646
01:49:20,639 --> 01:49:23,199
can be up to the order of one mss in

2647
01:49:23,199 --> 01:49:25,599
this case the latex will incur a delay

2648
01:49:25,599 --> 01:49:27,679
much greater than the rtt

2649
01:49:27,679 --> 01:49:29,440
and also when there are transactional

2650
01:49:29,440 --> 01:49:33,040
data exchanges or when congestion window

2651
01:49:33,040 --> 01:49:34,239
decreases

2652
01:49:34,239 --> 01:49:36,480
then

2653
01:49:36,960 --> 01:49:38,800
yeah the ability of requesting immediate

2654
01:49:38,800 --> 01:49:42,320
acts may help avoid idle times or it may

2655
01:49:42,320 --> 01:49:44,239
allow a faster congestion with their

2656
01:49:44,239 --> 01:49:46,638
growth

2657
01:49:46,880 --> 01:49:47,760
so

2658
01:49:47,760 --> 01:49:49,920
on the status of this draft before the

2659
01:49:49,920 --> 01:49:51,760
creation of the document there was some

2660
01:49:51,760 --> 01:49:53,760
related prior discussion in the area of

2661
01:49:53,760 --> 01:49:56,639
center control of tcp x which appeared

2662
01:49:56,639 --> 01:49:59,920
to converge to defining a new tcp option

2663
01:49:59,920 --> 01:50:02,320
serving to purposes the ability of

2664
01:50:02,320 --> 01:50:04,560
requesting a given act rate and the

2665
01:50:04,560 --> 01:50:07,599
ability of requesting immediate acts

2666
01:50:07,599 --> 01:50:08,320
so

2667
01:50:08,320 --> 01:50:11,119
since the last idf we produced versions

2668
01:50:11,119 --> 01:50:13,199
zero four and zero five

2669
01:50:13,199 --> 01:50:15,520
with the address comments received in

2670
01:50:15,520 --> 01:50:17,679
the last idea but also uh on the mailing

2671
01:50:17,679 --> 01:50:19,360
list and by the way thanks a lot to

2672
01:50:19,360 --> 01:50:21,599
everyone for the useful very useful

2673
01:50:21,599 --> 01:50:24,880
feedback received

2674
01:50:24,880 --> 01:50:26,560
so now let's go through the

2675
01:50:26,560 --> 01:50:29,040
update in the last

2676
01:50:29,040 --> 01:50:30,800
versions of the draft

2677
01:50:30,800 --> 01:50:31,840
so

2678
01:50:31,840 --> 01:50:34,400
here on the slide you can see the main

2679
01:50:34,400 --> 01:50:37,199
format of the option

2680
01:50:37,199 --> 01:50:39,920
you have the old version which is

2681
01:50:39,920 --> 01:50:43,040
zero three and also the new format in

2682
01:50:43,040 --> 01:50:44,320
zero five

2683
01:50:44,320 --> 01:50:46,800
so there are several things to mention

2684
01:50:46,800 --> 01:50:47,920
here

2685
01:50:47,920 --> 01:50:50,400
first is that in previous versions of

2686
01:50:50,400 --> 01:50:52,239
the draft there was a feature called

2687
01:50:52,239 --> 01:50:53,760
ignore order

2688
01:50:53,760 --> 01:50:54,960
however

2689
01:50:54,960 --> 01:50:56,800
it was not very clear

2690
01:50:56,800 --> 01:50:58,480
whether this was actually useful we

2691
01:50:58,480 --> 01:51:00,239
received a significant amount of

2692
01:51:00,239 --> 01:51:02,880
feedback in this regard so we decided to

2693
01:51:02,880 --> 01:51:05,599
remove it from the document

2694
01:51:05,599 --> 01:51:08,159
a second point is that

2695
01:51:08,159 --> 01:51:10,639
now in in zero five

2696
01:51:10,639 --> 01:51:13,119
we state that the kind field value is

2697
01:51:13,119 --> 01:51:15,920
254

2698
01:51:15,920 --> 01:51:18,320
as you may recall the intended status

2699
01:51:18,320 --> 01:51:20,719
for this document is experimental

2700
01:51:20,719 --> 01:51:21,760
so

2701
01:51:21,760 --> 01:51:25,440
we are following rfc 6994 which defines

2702
01:51:25,440 --> 01:51:27,520
the shared use of experimental tcp

2703
01:51:27,520 --> 01:51:28,480
options

2704
01:51:28,480 --> 01:51:31,280
and according to that rfc

2705
01:51:31,280 --> 01:51:33,920
the kind field can take only two values

2706
01:51:33,920 --> 01:51:35,760
two five three or two five four so we

2707
01:51:35,760 --> 01:51:37,679
have chosen the latter

2708
01:51:37,679 --> 01:51:40,800
and the last common uh for this light is

2709
01:51:40,800 --> 01:51:42,719
that uh well it was mentioned on the

2710
01:51:42,719 --> 01:51:43,920
mailing list

2711
01:51:43,920 --> 01:51:48,719
that the old format having an odd length

2712
01:51:48,719 --> 01:51:51,599
in some cases the implementations might

2713
01:51:51,599 --> 01:51:53,760
or implementers might want to add some

2714
01:51:53,760 --> 01:51:56,560
padding to make the size even

2715
01:51:56,560 --> 01:51:57,360
so

2716
01:51:57,360 --> 01:51:59,520
based on that we decided to make the

2717
01:51:59,520 --> 01:52:02,320
size even by ourselves by extending the

2718
01:52:02,320 --> 01:52:03,599
size of the

2719
01:52:03,599 --> 01:52:05,760
option by one byte

2720
01:52:05,760 --> 01:52:06,719
so

2721
01:52:06,719 --> 01:52:09,119
this is by increasing the size of the r

2722
01:52:09,119 --> 01:52:11,679
field which carries the requested

2723
01:52:11,679 --> 01:52:13,520
upgrade and also adding a few more

2724
01:52:13,520 --> 01:52:17,840
reserve bits for future purposes

2725
01:52:18,000 --> 01:52:21,119
so uh regarding the r field as you may

2726
01:52:21,119 --> 01:52:24,320
recall in version 0.3 of the draft we

2727
01:52:24,320 --> 01:52:26,400
were considering two different options

2728
01:52:26,400 --> 01:52:29,199
for encoding the r value

2729
01:52:29,199 --> 01:52:31,760
the option one was uh using a simple

2730
01:52:31,760 --> 01:52:34,239
binary encoding where the maximum value

2731
01:52:34,239 --> 01:52:38,080
of r was 63 then there was option two

2732
01:52:38,080 --> 01:52:40,239
which was a bit more complex with

2733
01:52:40,239 --> 01:52:42,639
mantissa an exponent and a possible

2734
01:52:42,639 --> 01:52:45,440
maximum value of one thousand twenty

2735
01:52:45,440 --> 01:52:46,400
four

2736
01:52:46,400 --> 01:52:49,040
so now in zero five uh

2737
01:52:49,040 --> 01:52:51,440
making use of the additional bits

2738
01:52:51,440 --> 01:52:53,199
now um

2739
01:52:53,199 --> 01:52:55,360
we state that the r field carries the

2740
01:52:55,360 --> 01:52:58,560
binary encoding of the accredit

2741
01:52:58,560 --> 01:53:02,000
then we also state that r equal to 0 is

2742
01:53:02,000 --> 01:53:04,480
a special case where we request the

2743
01:53:04,480 --> 01:53:07,360
sender requests an immediate pack

2744
01:53:07,360 --> 01:53:10,480
while not modifying the default or

2745
01:53:10,480 --> 01:53:12,880
steady state acc rate

2746
01:53:12,880 --> 01:53:13,840
and

2747
01:53:13,840 --> 01:53:16,080
with this encoding now the maximum value

2748
01:53:16,080 --> 01:53:17,280
of r

2749
01:53:17,280 --> 01:53:22,080
is actually 2047 at least in version 0.5

2750
01:53:22,080 --> 01:53:22,880
so

2751
01:53:22,880 --> 01:53:24,400
there has actually been discussion

2752
01:53:24,400 --> 01:53:25,920
already in the past regarding the

2753
01:53:25,920 --> 01:53:28,480
maximum value for this parameter the

2754
01:53:28,480 --> 01:53:30,639
request attack rate are

2755
01:53:30,639 --> 01:53:34,400
so again in zero five it is 2047.

2756
01:53:34,400 --> 01:53:36,480
this perhaps is for discussion

2757
01:53:36,480 --> 01:53:37,440
but

2758
01:53:37,440 --> 01:53:38,880
well in the past there have been

2759
01:53:38,880 --> 01:53:41,760
questions on why values greater than

2760
01:53:41,760 --> 01:53:44,239
63 would be needed

2761
01:53:44,239 --> 01:53:46,080
so there have already been some answers

2762
01:53:46,080 --> 01:53:50,080
given for example jonathan wrote a nice

2763
01:53:50,080 --> 01:53:53,280
and detailed explanation of why

2764
01:53:53,280 --> 01:53:55,920
there are some values for r in the range

2765
01:53:55,920 --> 01:53:59,119
of 100 few hundred or even one thousand

2766
01:53:59,119 --> 01:54:00,800
which could be even justifiable in

2767
01:54:00,800 --> 01:54:03,199
current scenarios for example assuming a

2768
01:54:03,199 --> 01:54:05,920
long rate of one gigabit per second rtt

2769
01:54:05,920 --> 01:54:08,639
is up to the order of 100 milliseconds

2770
01:54:08,639 --> 01:54:10,080
but those

2771
01:54:10,080 --> 01:54:12,880
large values for r would still comply

2772
01:54:12,880 --> 01:54:15,520
with a sort of rule of thumb of having

2773
01:54:15,520 --> 01:54:18,400
at least four acts per rtd

2774
01:54:18,400 --> 01:54:21,040
and then they have also been comments

2775
01:54:21,040 --> 01:54:24,560
for example by bob or juhamati

2776
01:54:24,560 --> 01:54:26,560
expressing that it would be nice to make

2777
01:54:26,560 --> 01:54:28,159
sure that that our option could be

2778
01:54:28,159 --> 01:54:30,239
useful as well in future scenarios where

2779
01:54:30,239 --> 01:54:32,239
the expectation is that there will be

2780
01:54:32,239 --> 01:54:34,840
even greater link rates

2781
01:54:34,840 --> 01:54:37,440
so uh i don't know if there are any

2782
01:54:37,440 --> 01:54:41,759
comments on this maximum value of r

2783
01:54:45,760 --> 01:54:48,080
if not

2784
01:54:48,080 --> 01:54:49,280
yeah

2785
01:54:49,280 --> 01:54:50,880
i think there's

2786
01:54:50,880 --> 01:54:53,599
gory in the queue

2787
01:54:55,599 --> 01:54:57,920
whoa

2788
01:55:00,000 --> 01:55:03,040
yeah i'm going to argue that flexibility

2789
01:55:03,040 --> 01:55:05,440
here isn't a good thing

2790
01:55:05,440 --> 01:55:08,960
but having one act every 100 packets

2791
01:55:08,960 --> 01:55:11,119
is still pretty infrequent we've used it

2792
01:55:11,119 --> 01:55:14,000
with rtp and other protocols it's not a

2793
01:55:14,000 --> 01:55:15,760
big overhead

2794
01:55:15,760 --> 01:55:17,520
why would we ever want to go to a

2795
01:55:17,520 --> 01:55:20,800
thousand even on gigabit links one one

2796
01:55:20,800 --> 01:55:23,040
every 100 data packets is a very low

2797
01:55:23,040 --> 01:55:27,040
load in rate or volume

2798
01:55:30,800 --> 01:55:34,560
okay so yeah i understand for example uh

2799
01:55:34,560 --> 01:55:37,679
some of the reasons expressed for

2800
01:55:37,679 --> 01:55:39,840
larger maximum values

2801
01:55:39,840 --> 01:55:42,159
in that order would be to

2802
01:55:42,159 --> 01:55:44,639
reduce for example the amount of acts

2803
01:55:44,639 --> 01:55:46,400
that would need to be

2804
01:55:46,400 --> 01:55:48,639
processed by the network but also i

2805
01:55:48,639 --> 01:55:52,000
understand that the concern uh for

2806
01:55:52,000 --> 01:55:54,880
large values of ours so yeah i guess

2807
01:55:54,880 --> 01:55:57,599
and i'm wondering how to to achieve a

2808
01:55:57,599 --> 01:56:01,480
suitable trade-off here

2809
01:56:07,920 --> 01:56:11,119
hi this is bob briscoe um i've just

2810
01:56:11,119 --> 01:56:13,280
discovered that a male i

2811
01:56:13,280 --> 01:56:15,199
thought i'd send i never sent so i'll

2812
01:56:15,199 --> 01:56:16,480
say it now

2813
01:56:16,480 --> 01:56:18,239
um

2814
01:56:18,239 --> 01:56:19,920
obviously i didn't click send and it's

2815
01:56:19,920 --> 01:56:21,520
sitting in my drafts

2816
01:56:21,520 --> 01:56:23,440
um

2817
01:56:23,440 --> 01:56:26,320
i i noticed that the format of this has

2818
01:56:26,320 --> 01:56:28,480
now become very close to

2819
01:56:28,480 --> 01:56:30,560
the at congestion control rfc that we

2820
01:56:30,560 --> 01:56:32,239
already have

2821
01:56:32,239 --> 01:56:35,360
um which is just basically an 8-bit

2822
01:56:35,360 --> 01:56:36,480
number

2823
01:56:36,480 --> 01:56:38,480
and the rules as to when you can send

2824
01:56:38,480 --> 01:56:40,480
that are very similar

2825
01:56:40,480 --> 01:56:41,679
so

2826
01:56:41,679 --> 01:56:43,760
well i

2827
01:56:43,760 --> 01:56:46,480
don't like to sort of point this out but

2828
01:56:46,480 --> 01:56:48,560
maybe we've converged on something where

2829
01:56:48,560 --> 01:56:50,000
you don't need to do anything anymore

2830
01:56:50,000 --> 01:56:51,679
charles

2831
01:56:51,679 --> 01:56:54,880
we already have we already have an rfc

2832
01:56:54,880 --> 01:56:56,480
and we can just use it

2833
01:56:56,480 --> 01:56:57,840
um

2834
01:56:57,840 --> 01:56:59,040
and

2835
01:56:59,040 --> 01:57:00,080
um

2836
01:57:00,080 --> 01:57:04,000
that gives you eight bits so it's 256.

2837
01:57:04,000 --> 01:57:04,960
um

2838
01:57:04,960 --> 01:57:07,440
as your number

2839
01:57:07,440 --> 01:57:09,760
just just think about it

2840
01:57:09,760 --> 01:57:11,679
you know i i should have sent this i'm

2841
01:57:11,679 --> 01:57:12,880
really sorry i should have sent that

2842
01:57:12,880 --> 01:57:14,320
mail earlier but

2843
01:57:14,320 --> 01:57:16,320
just see whether there's stuff in that

2844
01:57:16,320 --> 01:57:18,639
rfc that precludes the use cases you're

2845
01:57:18,639 --> 01:57:19,760
thinking of

2846
01:57:19,760 --> 01:57:21,520
and maybe it's an update to the rfc

2847
01:57:21,520 --> 01:57:24,320
that's needed or whatever

2848
01:57:24,320 --> 01:57:27,520
okay so i guess if if you can send

2849
01:57:27,520 --> 01:57:29,520
the message you had prepared with

2850
01:57:29,520 --> 01:57:31,840
possibly the details i think it will be

2851
01:57:31,840 --> 01:57:33,360
very helpful probably got some old stuff

2852
01:57:33,360 --> 01:57:34,880
in it because it was in answer to

2853
01:57:34,880 --> 01:57:36,560
something from jonathan morton but that

2854
01:57:36,560 --> 01:57:38,480
was just a side comment so

2855
01:57:38,480 --> 01:57:40,400
i'll send it i'll press send but i'll

2856
01:57:40,400 --> 01:57:41,840
put a little note on saying some of this

2857
01:57:41,840 --> 01:57:43,599
might be out of date

2858
01:57:43,599 --> 01:57:45,920
thank you

2859
01:57:48,639 --> 01:57:49,840
okay

2860
01:57:49,840 --> 01:57:51,599
so

2861
01:57:51,599 --> 01:57:53,360
yeah

2862
01:57:53,360 --> 01:57:55,840
bro uh your thing is that just personal

2863
01:57:55,840 --> 01:57:58,400
opinion if we want to save the options

2864
01:57:58,400 --> 01:58:01,440
with just even just one byte maybe

2865
01:58:01,440 --> 01:58:03,040
we can use the

2866
01:58:03,040 --> 01:58:06,080
previous version and if we need big

2867
01:58:06,080 --> 01:58:07,360
value

2868
01:58:07,360 --> 01:58:10,400
and we can utilize an elizabethan bit

2869
01:58:10,400 --> 01:58:12,880
and then arrogate new formats something

2870
01:58:12,880 --> 01:58:15,679
like that then maybe we can address your

2871
01:58:15,679 --> 01:58:18,159
concern

2872
01:58:19,119 --> 01:58:21,520
okay i see that

2873
01:58:21,520 --> 01:58:22,560
there's

2874
01:58:22,560 --> 01:58:25,280
some pressure on one hand to to maybe

2875
01:58:25,280 --> 01:58:26,239
have

2876
01:58:26,239 --> 01:58:27,360
uh an

2877
01:58:27,360 --> 01:58:28,400
even

2878
01:58:28,400 --> 01:58:30,880
length for the option but then

2879
01:58:30,880 --> 01:58:33,360
also we want to to keep the format short

2880
01:58:33,360 --> 01:58:35,280
so yeah let's see if we can find a

2881
01:58:35,280 --> 01:58:38,159
suitable solution

2882
01:58:41,040 --> 01:58:43,119
as an individual

2883
01:58:43,119 --> 01:58:45,040
i

2884
01:58:45,040 --> 01:58:47,360
at least looking at the tcp options we

2885
01:58:47,360 --> 01:58:49,520
are using right now they are all they

2886
01:58:49,520 --> 01:58:52,719
all have an even length

2887
01:58:53,040 --> 01:58:54,880
so

2888
01:58:54,880 --> 01:58:56,159
um

2889
01:58:56,159 --> 01:58:57,199
that's why

2890
01:58:57,199 --> 01:59:00,560
are we really saving a byte if we have

2891
01:59:00,560 --> 01:59:04,639
one option with with a knot length

2892
01:59:04,719 --> 01:59:06,400
that was my point

2893
01:59:06,400 --> 01:59:08,000
in suggesting

2894
01:59:08,000 --> 01:59:10,000
if that's not the case then we can just

2895
01:59:10,000 --> 01:59:12,080
use two because

2896
01:59:12,080 --> 01:59:16,040
you will you will pet it anyway

2897
01:59:18,159 --> 01:59:20,400
okay

2898
01:59:22,880 --> 01:59:24,639
richard

2899
01:59:24,639 --> 01:59:26,639
so while while we are generally doing

2900
01:59:26,639 --> 01:59:28,800
padding uh padding is something that we

2901
01:59:28,800 --> 01:59:31,280
could uh really do away with

2902
01:59:31,280 --> 01:59:33,280
i would really more like to see an

2903
01:59:33,280 --> 01:59:34,880
argument made that a

2904
01:59:34,880 --> 01:59:37,599
larger field length or option length is

2905
01:59:37,599 --> 01:59:39,119
really valuable

2906
01:59:39,119 --> 01:59:41,280
and as gorge has pointed out even a

2907
01:59:41,280 --> 01:59:43,840
value of 100 is already quite excessive

2908
01:59:43,840 --> 01:59:45,760
at least at this

2909
01:59:45,760 --> 01:59:48,000
age

2910
01:59:48,560 --> 01:59:50,239
having having a

2911
01:59:50,239 --> 01:59:52,400
transport protocol

2912
01:59:52,400 --> 01:59:55,440
flying without feedback for thousands of

2913
01:59:55,440 --> 01:59:58,880
a flight of thousands of packets it

2914
01:59:58,880 --> 02:00:00,960
i can hardly imagine a transport

2915
02:00:00,960 --> 02:00:02,639
protocol that would

2916
02:00:02,639 --> 02:00:04,639
you know have a decent

2917
02:00:04,639 --> 02:00:06,800
decent properties with such a

2918
02:00:06,800 --> 02:00:08,719
rare feedback

2919
02:00:08,719 --> 02:00:10,480
on the other hand i mean this is

2920
02:00:10,480 --> 02:00:11,760
advisory

2921
02:00:11,760 --> 02:00:13,440
and not a mandatory

2922
02:00:13,440 --> 02:00:15,520
option so the receiver

2923
02:00:15,520 --> 02:00:16,960
can use it

2924
02:00:16,960 --> 02:00:18,480
can delay

2925
02:00:18,480 --> 02:00:22,239
but it's not that it has to follow that

2926
02:00:22,239 --> 02:00:24,080
so therefore it's uh it's that's the

2927
02:00:24,080 --> 02:00:26,880
other thing the other aspect

2928
02:00:26,880 --> 02:00:28,719
why i don't think that we need really

2929
02:00:28,719 --> 02:00:31,920
that lengthy option thank you

2930
02:00:32,320 --> 02:00:35,040
regarding the regarding the option um

2931
02:00:35,040 --> 02:00:37,840
the concatenation of all tcp options has

2932
02:00:37,840 --> 02:00:40,719
to be length divisible by four so that's

2933
02:00:40,719 --> 02:00:44,080
that's the padding i was

2934
02:00:44,080 --> 02:00:46,480
referring to

2935
02:00:46,480 --> 02:00:48,639
i by the way i closed the queue since we

2936
02:00:48,639 --> 02:00:51,840
are at the end of the time and

2937
02:00:52,880 --> 02:00:57,920
carl says let's start outside jonathan

2938
02:01:00,800 --> 02:01:01,850
so

2939
02:01:01,850 --> 02:01:05,249
[Music]

2940
02:01:05,840 --> 02:01:07,840
there's question about

2941
02:01:07,840 --> 02:01:08,970
whether

2942
02:01:08,970 --> 02:01:11,360
[Music]

2943
02:01:11,360 --> 02:01:16,000
whether the large value of r is harmful

2944
02:01:16,000 --> 02:01:17,040
and

2945
02:01:17,040 --> 02:01:18,719
that's why we have the rule of thumb of

2946
02:01:18,719 --> 02:01:23,280
having 4x per rtt because that gives

2947
02:01:23,280 --> 02:01:24,239
um

2948
02:01:24,239 --> 02:01:25,840
sufficiently

2949
02:01:25,840 --> 02:01:27,679
rapid feedback to

2950
02:01:27,679 --> 02:01:29,920
suit the network path

2951
02:01:29,920 --> 02:01:32,480
it's also worth remembering that if a

2952
02:01:32,480 --> 02:01:35,199
congestion event occurs that will result

2953
02:01:35,199 --> 02:01:37,520
in immediate feedback

2954
02:01:37,520 --> 02:01:40,400
regardless of the value of the delayed

2955
02:01:40,400 --> 02:01:43,119
act timer

2956
02:01:48,320 --> 02:01:50,880
cards do we have do you want to have

2957
02:01:50,880 --> 02:01:52,800
uh show more slides

2958
02:01:52,800 --> 02:01:55,040
or are you basically done

2959
02:01:55,040 --> 02:01:57,280
well perhaps just one which is super

2960
02:01:57,280 --> 02:01:58,639
quick

2961
02:01:58,639 --> 02:02:00,080
then do that because we are running

2962
02:02:00,080 --> 02:02:03,119
already over time yeah so just

2963
02:02:03,119 --> 02:02:06,880
mentioning that uh yeah we have

2964
02:02:06,880 --> 02:02:09,360
running code so this is great news and

2965
02:02:09,360 --> 02:02:11,920
as michael announced on the mailing list

2966
02:02:11,920 --> 02:02:13,520
he has been leading the development of a

2967
02:02:13,520 --> 02:02:15,280
prototype implementation of the draft

2968
02:02:15,280 --> 02:02:16,800
for freebsd

2969
02:02:16,800 --> 02:02:18,639
my understanding is that

2970
02:02:18,639 --> 02:02:20,239
there are some features already

2971
02:02:20,239 --> 02:02:21,760
supported and

2972
02:02:21,760 --> 02:02:24,000
it will be completed in the next few

2973
02:02:24,000 --> 02:02:25,840
months

2974
02:02:25,840 --> 02:02:26,719
so

2975
02:02:26,719 --> 02:02:28,400
yes

2976
02:02:28,400 --> 02:02:29,840
so it's it's basically it was a

2977
02:02:29,840 --> 02:02:31,280
student's project

2978
02:02:31,280 --> 02:02:33,520
to get this

2979
02:02:33,520 --> 02:02:35,760
to get this implemented and

2980
02:02:35,760 --> 02:02:37,440
there will be some final touches before

2981
02:02:37,440 --> 02:02:40,320
it can be open sourced

2982
02:02:40,320 --> 02:02:43,719
any other comments

2983
02:02:50,719 --> 02:02:54,000
if that's not the case then thank you

2984
02:02:54,000 --> 02:02:54,480
um

2985
02:02:54,480 --> 02:02:57,530
[Music]

2986
02:02:59,199 --> 02:03:02,000
do you want to say last words from

2987
02:03:02,000 --> 02:03:03,760
philadelphia

2988
02:03:03,760 --> 02:03:05,199
see you in london

2989
02:03:05,199 --> 02:03:06,480
see you in london

2990
02:03:06,480 --> 02:03:10,598
see you in london bye

2991
02:03:18,080 --> 02:03:21,080
oh

2992
02:03:29,760 --> 02:03:31,840
you

