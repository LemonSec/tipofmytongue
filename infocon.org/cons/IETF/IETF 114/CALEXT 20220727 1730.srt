1
00:00:14,880 --> 00:00:17,200
you

2
00:00:18,080 --> 00:00:20,320
not sure it is

3
00:00:20,320 --> 00:00:23,760
3 30 a.m for him

4
00:00:28,840 --> 00:00:32,800
so uh according to uh to my clock it is

5
00:00:32,800 --> 00:00:35,680
time for us to start this session so

6
00:00:35,680 --> 00:00:37,840
hello everybody and welcome to this

7
00:00:37,840 --> 00:00:41,280
this massively packed collect session

8
00:00:41,280 --> 00:00:42,320
um

9
00:00:42,320 --> 00:00:44,160
i will just quickly flick through these

10
00:00:44,160 --> 00:00:46,399
slides here i think everyone in the room

11
00:00:46,399 --> 00:00:50,320
has has checked in to the system so

12
00:00:50,320 --> 00:00:53,039
that's all good um

13
00:00:53,039 --> 00:00:55,039
the note well applies i'm sure you have

14
00:00:55,039 --> 00:00:55,840
all

15
00:00:55,840 --> 00:00:58,320
seen this and if you have not please

16
00:00:58,320 --> 00:00:59,520
read it

17
00:00:59,520 --> 00:01:01,280
i expect everyone will be behaving

18
00:01:01,280 --> 00:01:04,479
themselves perfectly hello welcome

19
00:01:04,479 --> 00:01:07,760
just flipping through the the

20
00:01:07,760 --> 00:01:10,400
chair slides here

21
00:01:10,400 --> 00:01:13,200
meeting tips we're about halfway through

22
00:01:13,200 --> 00:01:14,720
this atf now so most of you have

23
00:01:14,720 --> 00:01:16,400
probably already seen

24
00:01:16,400 --> 00:01:19,200
how to add yourself in

25
00:01:19,200 --> 00:01:20,960
we're pretty happy for people just to

26
00:01:20,960 --> 00:01:22,400
pop in and chat i don't think we'll use

27
00:01:22,400 --> 00:01:24,560
the queue unless we have to but feel

28
00:01:24,560 --> 00:01:26,080
free to pop yourself in the queue or

29
00:01:26,080 --> 00:01:27,920
just pop yourself straight on audio if

30
00:01:27,920 --> 00:01:29,119
you're remote

31
00:01:29,119 --> 00:01:31,920
good morning neil

32
00:01:32,240 --> 00:01:33,840
and um

33
00:01:33,840 --> 00:01:35,600
here's some links handy links but

34
00:01:35,600 --> 00:01:37,360
basically go to the data tracker and

35
00:01:37,360 --> 00:01:40,400
everything's available from the agenda

36
00:01:40,400 --> 00:01:42,399
i have put together a separate set of

37
00:01:42,399 --> 00:01:44,240
slides just because this template was a

38
00:01:44,240 --> 00:01:46,159
pain to use

39
00:01:46,159 --> 00:01:48,320
with the agenda as sent out but if

40
00:01:48,320 --> 00:01:50,240
there's any agenda bashing please let us

41
00:01:50,240 --> 00:01:53,240
know

42
00:01:55,759 --> 00:01:57,759
does anybody want to change the order or

43
00:01:57,759 --> 00:02:01,119
talk about anything different here

44
00:02:02,880 --> 00:02:04,799
cool all right we're starting with js

45
00:02:04,799 --> 00:02:07,280
contact

46
00:02:07,600 --> 00:02:09,758
and with that i think should we just get

47
00:02:09,758 --> 00:02:12,398
straight into it

48
00:02:14,400 --> 00:02:16,879
yes let's do that hello everyone

49
00:02:16,879 --> 00:02:18,959
um hope you can hear me if not let me

50
00:02:18,959 --> 00:02:20,480
know in the chat

51
00:02:20,480 --> 00:02:22,800
starting with js contact on the next

52
00:02:22,800 --> 00:02:25,520
slide please

53
00:02:26,239 --> 00:02:28,879
so um we already had two rfcs in the

54
00:02:28,879 --> 00:02:30,239
work

55
00:02:30,239 --> 00:02:33,840
js contact o3 is the current version of

56
00:02:33,840 --> 00:02:36,480
the js contact format specification

57
00:02:36,480 --> 00:02:40,080
js contact vcard o2 is the specification

58
00:02:40,080 --> 00:02:43,200
for mapping between js contact and vcar

59
00:02:43,200 --> 00:02:45,599
and as a new addition we have now we are

60
00:02:45,599 --> 00:02:48,000
also defining vcard extensions for js

61
00:02:48,000 --> 00:02:49,440
contact

62
00:02:49,440 --> 00:02:51,360
which define new vcart properties and

63
00:02:51,360 --> 00:02:52,560
parameters

64
00:02:52,560 --> 00:02:55,200
that we require for dgs contact vcard

65
00:02:55,200 --> 00:02:57,120
mapping

66
00:02:57,120 --> 00:02:59,440
that being said this

67
00:02:59,440 --> 00:03:00,319
this

68
00:03:00,319 --> 00:03:03,440
last rfc the extensions rfc

69
00:03:03,440 --> 00:03:06,480
most likely isn't uh complete yet

70
00:03:06,480 --> 00:03:07,840
so we

71
00:03:07,840 --> 00:03:10,800
so we plan to publish all of those d3

72
00:03:10,800 --> 00:03:12,800
rfcs together

73
00:03:12,800 --> 00:03:16,000
as really this only makes sense

74
00:03:16,000 --> 00:03:19,560
next slide please

75
00:03:20,720 --> 00:03:21,599
um

76
00:03:21,599 --> 00:03:23,040
that being

77
00:03:23,040 --> 00:03:26,560
so what are the main changes um for js

78
00:03:26,560 --> 00:03:27,920
contact we

79
00:03:27,920 --> 00:03:30,239
clarified that the id values that that

80
00:03:30,239 --> 00:03:31,760
you use in these

81
00:03:31,760 --> 00:03:34,400
options objects for

82
00:03:34,400 --> 00:03:36,000
mapping

83
00:03:36,000 --> 00:03:38,000
specific types like addresses and others

84
00:03:38,000 --> 00:03:39,360
to

85
00:03:39,360 --> 00:03:41,280
short identifiers these identifiers must

86
00:03:41,280 --> 00:03:42,640
be persisted

87
00:03:42,640 --> 00:03:45,200
um that's mainly because we want

88
00:03:45,200 --> 00:03:47,599
to make patching

89
00:03:47,599 --> 00:03:50,159
existing js contact objects

90
00:03:50,159 --> 00:03:52,879
easy and it's way more

91
00:03:52,879 --> 00:03:55,519
way more easier than if you um

92
00:03:55,519 --> 00:03:58,400
if you can rely on being these ids

93
00:03:58,400 --> 00:04:01,120
being set as you had stored them on your

94
00:04:01,120 --> 00:04:03,200
client or whatever

95
00:04:03,200 --> 00:04:05,120
secondly

96
00:04:05,120 --> 00:04:07,680
the js contact specification

97
00:04:07,680 --> 00:04:09,439
defines the resources property the

98
00:04:09,439 --> 00:04:11,680
resources properties

99
00:04:11,680 --> 00:04:14,480
a property that combines various vcard

100
00:04:14,480 --> 00:04:15,920
properties

101
00:04:15,920 --> 00:04:18,399
like directory services and such

102
00:04:18,399 --> 00:04:21,519
that all basically are uris

103
00:04:21,519 --> 00:04:24,400
for a specific use case

104
00:04:24,400 --> 00:04:25,120
we

105
00:04:25,120 --> 00:04:27,120
combined most of them into a resources

106
00:04:27,120 --> 00:04:29,919
property but we came to realize that for

107
00:04:29,919 --> 00:04:30,800
some

108
00:04:30,800 --> 00:04:32,960
um some of these resources we need to

109
00:04:32,960 --> 00:04:34,720
specialize one of them and this is the

110
00:04:34,720 --> 00:04:36,800
latest addition our online services so

111
00:04:36,800 --> 00:04:38,160
that you can

112
00:04:38,160 --> 00:04:42,479
specify as the service this uri is for

113
00:04:42,479 --> 00:04:44,080
which should where the service name

114
00:04:44,080 --> 00:04:46,800
should be the canonical name of the of

115
00:04:46,800 --> 00:04:48,639
the service

116
00:04:48,639 --> 00:04:51,680
um and as i said before we now define

117
00:04:51,680 --> 00:04:54,000
new vcard properties and parameters um

118
00:04:54,000 --> 00:04:56,000
as you can see there is there's the list

119
00:04:56,000 --> 00:04:58,479
of current ones i think there are a few

120
00:04:58,479 --> 00:05:01,840
more um if not they will get more

121
00:05:01,840 --> 00:05:04,240
um and some of them we will share with

122
00:05:04,240 --> 00:05:06,639
the exact same semantics between new i

123
00:05:06,639 --> 00:05:10,240
calendar properties and vcard properties

124
00:05:10,240 --> 00:05:11,680
so um

125
00:05:11,680 --> 00:05:13,840
i would like to now use the time more to

126
00:05:13,840 --> 00:05:16,720
talk about the stuff but that we that is

127
00:05:16,720 --> 00:05:18,880
currently in discussion and the next

128
00:05:18,880 --> 00:05:19,840
slide

129
00:05:19,840 --> 00:05:22,160
starts with that

130
00:05:22,160 --> 00:05:26,560
um so for js contact we in almost every

131
00:05:26,560 --> 00:05:28,880
complex object type

132
00:05:28,880 --> 00:05:31,120
we have a label property the label

133
00:05:31,120 --> 00:05:34,080
property is meant to

134
00:05:34,080 --> 00:05:38,160
is meant for users um to set any

135
00:05:38,160 --> 00:05:40,240
any human readable text they want to set

136
00:05:40,240 --> 00:05:42,560
in there there's no semantics art in

137
00:05:42,560 --> 00:05:44,720
that so it's um it's not expected that

138
00:05:44,720 --> 00:05:47,039
machines parse it and extract values

139
00:05:47,039 --> 00:05:49,280
from it

140
00:05:49,280 --> 00:05:51,280
this mainly was

141
00:05:51,280 --> 00:05:53,360
motivated by

142
00:05:53,360 --> 00:05:54,400
apple

143
00:05:54,400 --> 00:05:57,360
address books using a label service

144
00:05:57,360 --> 00:05:58,960
already

145
00:05:58,960 --> 00:06:00,880
now that we want to standardize this

146
00:06:00,880 --> 00:06:03,680
also for vcard we need to define how

147
00:06:03,680 --> 00:06:07,440
a short history on labels in vcard so

148
00:06:07,440 --> 00:06:08,639
um

149
00:06:08,639 --> 00:06:10,400
there is already a label parameter

150
00:06:10,400 --> 00:06:13,199
defined for the address property in the

151
00:06:13,199 --> 00:06:14,639
vcard

152
00:06:14,639 --> 00:06:16,800
which is like really meant to be like

153
00:06:16,800 --> 00:06:19,120
the the label you would put in a package

154
00:06:19,120 --> 00:06:20,960
if you want to send that package there

155
00:06:20,960 --> 00:06:23,840
so um it contains delivery address

156
00:06:23,840 --> 00:06:26,759
interestingly it the

157
00:06:26,759 --> 00:06:29,680
rfc6350 defines this parameter but it's

158
00:06:29,680 --> 00:06:32,000
not included in the iana registry i

159
00:06:32,000 --> 00:06:34,319
think that's just an omission but if

160
00:06:34,319 --> 00:06:37,759
somebody knows better please let me know

161
00:06:37,759 --> 00:06:39,919
but also there was already a label

162
00:06:39,919 --> 00:06:44,080
property in the vcard 3 rfcs

163
00:06:44,080 --> 00:06:46,240
but which also were used for delivery

164
00:06:46,240 --> 00:06:49,840
addresses but these got obsoleted so

165
00:06:49,840 --> 00:06:52,240
at least we now know that the name label

166
00:06:52,240 --> 00:06:54,560
for either a parameter or a property in

167
00:06:54,560 --> 00:06:56,400
vcard is loaded

168
00:06:56,400 --> 00:06:59,280
and most likely we will not be able to

169
00:06:59,280 --> 00:07:01,759
use this name for

170
00:07:01,759 --> 00:07:03,840
the type of thing we want to use with

171
00:07:03,840 --> 00:07:08,080
jscontact label if we map it to vcard

172
00:07:08,080 --> 00:07:09,840
or as i said before

173
00:07:09,840 --> 00:07:13,599
already on the next slide there exists

174
00:07:13,599 --> 00:07:15,680
a mechanism for that

175
00:07:15,680 --> 00:07:17,759
but it's disputable if this really is

176
00:07:17,759 --> 00:07:18,800
what we

177
00:07:18,800 --> 00:07:20,479
what the current js contact label

178
00:07:20,479 --> 00:07:22,400
properly defines and that is apple

179
00:07:22,400 --> 00:07:23,680
address books

180
00:07:23,680 --> 00:07:25,919
so apple address books since a long time

181
00:07:25,919 --> 00:07:28,800
use um both vcard groupings of

182
00:07:28,800 --> 00:07:31,759
properties and the specific xab label

183
00:07:31,759 --> 00:07:32,960
property

184
00:07:32,960 --> 00:07:35,199
to assign a label to

185
00:07:35,199 --> 00:07:39,120
another item or a couple of items in the

186
00:07:39,120 --> 00:07:41,599
nd card so in this case we would have an

187
00:07:41,599 --> 00:07:43,759
address with the label my label

188
00:07:43,759 --> 00:07:45,759
you you can assign that also to i don't

189
00:07:45,759 --> 00:07:46,879
know

190
00:07:46,879 --> 00:07:49,840
basically any property um that the apple

191
00:07:49,840 --> 00:07:52,960
address books allow you to define

192
00:07:52,960 --> 00:07:55,520
now um having had a look at how apple

193
00:07:55,520 --> 00:07:57,759
implements this in their clients for

194
00:07:57,759 --> 00:08:00,720
example the context app in mac os

195
00:08:00,720 --> 00:08:03,680
it seems that this label is really

196
00:08:03,680 --> 00:08:05,759
meant for very short

197
00:08:05,759 --> 00:08:08,639
identifiers like you would use it if you

198
00:08:08,639 --> 00:08:10,000
do not want to

199
00:08:10,000 --> 00:08:11,840
if you want to sign a phone number

200
00:08:11,840 --> 00:08:14,319
anything else then mobile work like the

201
00:08:14,319 --> 00:08:17,440
predefined values you use this one

202
00:08:17,440 --> 00:08:17,770
um

203
00:08:17,770 --> 00:08:20,160
[Music]

204
00:08:20,160 --> 00:08:22,960
you can see a bit of the history

205
00:08:22,960 --> 00:08:24,720
in the link that i provided here which

206
00:08:24,720 --> 00:08:26,720
also discusses a couple of other

207
00:08:26,720 --> 00:08:28,720
properties which i mainly think are

208
00:08:28,720 --> 00:08:30,720
covered in vcot4 already with standard

209
00:08:30,720 --> 00:08:32,080
properties

210
00:08:32,080 --> 00:08:33,839
so the topic i would like like now to

211
00:08:33,839 --> 00:08:35,279
bring up is how to

212
00:08:35,279 --> 00:08:37,440
how to deal with labeling js contact and

213
00:08:37,440 --> 00:08:40,479
mapping it in vcard um

214
00:08:40,479 --> 00:08:43,279
i'm also not sure actually that

215
00:08:43,279 --> 00:08:46,640
the jscontact label property necessarily

216
00:08:46,640 --> 00:08:48,240
is

217
00:08:48,240 --> 00:08:50,959
defined as how we want it to be defined

218
00:08:50,959 --> 00:08:53,120
as i said before it was really motivated

219
00:08:53,120 --> 00:08:55,839
by mapping the xav labels

220
00:08:55,839 --> 00:08:57,120
from apple

221
00:08:57,120 --> 00:08:58,800
into our structures

222
00:08:58,800 --> 00:09:00,480
but now it seems that the definitions

223
00:09:00,480 --> 00:09:03,360
like kind of got out of sync it won't be

224
00:09:03,360 --> 00:09:04,480
like

225
00:09:04,480 --> 00:09:06,800
a free text how long you ever wanted to

226
00:09:06,800 --> 00:09:08,399
be labor

227
00:09:08,399 --> 00:09:10,880
and a promo seemingly using it only for

228
00:09:10,880 --> 00:09:13,839
very short identifiers so

229
00:09:13,839 --> 00:09:16,399
maybe someone who is using the labels

230
00:09:16,399 --> 00:09:18,399
can shed more light on their experience

231
00:09:18,399 --> 00:09:21,640
with it

232
00:09:34,959 --> 00:09:37,519
hansiak also says he needs to look it up

233
00:09:37,519 --> 00:09:41,040
um yeah so i think at least we can

234
00:09:41,040 --> 00:09:42,800
say here that

235
00:09:42,800 --> 00:09:43,600
um

236
00:09:43,600 --> 00:09:46,080
there is more work required on

237
00:09:46,080 --> 00:09:49,040
identifying if the js contact labor

238
00:09:49,040 --> 00:09:50,560
property as it currently is defined

239
00:09:50,560 --> 00:09:52,160
really is useful

240
00:09:52,160 --> 00:09:52,959
um

241
00:09:52,959 --> 00:09:54,880
do people really need to

242
00:09:54,880 --> 00:09:56,800
tag

243
00:09:56,800 --> 00:10:00,240
an arbitrary node to every

244
00:10:00,240 --> 00:10:02,320
to every object type that we define in

245
00:10:02,320 --> 00:10:05,120
the new format

246
00:10:05,120 --> 00:10:06,560
and

247
00:10:06,560 --> 00:10:08,800
independently of that

248
00:10:08,800 --> 00:10:11,200
would would we want something like what

249
00:10:11,200 --> 00:10:13,040
apple is doing in apple address books

250
00:10:13,040 --> 00:10:14,959
with these

251
00:10:14,959 --> 00:10:17,200
xab labels

252
00:10:17,200 --> 00:10:18,880
would we want to have something similar

253
00:10:18,880 --> 00:10:24,079
to map and shares context or not and um

254
00:10:24,160 --> 00:10:26,240
if there is no opinion on that in the

255
00:10:26,240 --> 00:10:29,440
room today then we will continue

256
00:10:29,440 --> 00:10:31,600
uh working with this both mario and me

257
00:10:31,600 --> 00:10:32,880
and um

258
00:10:32,880 --> 00:10:36,320
will come up with a proposal

259
00:10:36,720 --> 00:10:39,760
what is your intention

260
00:10:39,839 --> 00:10:41,360
well i think

261
00:10:41,360 --> 00:10:43,440
i think for interoperability

262
00:10:43,440 --> 00:10:44,640
we should

263
00:10:44,640 --> 00:10:47,120
we should understand what the xab label

264
00:10:47,120 --> 00:10:50,800
is is really used for since it's

265
00:10:50,800 --> 00:10:52,880
for such a long time already in existing

266
00:10:52,880 --> 00:10:53,760
data

267
00:10:53,760 --> 00:10:55,200
um

268
00:10:55,200 --> 00:10:56,480
we should not

269
00:10:56,480 --> 00:10:59,360
we should find a way to map it

270
00:10:59,360 --> 00:11:00,959
the question i think on the next slide i

271
00:11:00,959 --> 00:11:04,000
even posed a question um

272
00:11:04,000 --> 00:11:07,200
if uh if we should just use xab label

273
00:11:07,200 --> 00:11:09,440
because i would assume that since it's

274
00:11:09,440 --> 00:11:11,680
defined since 20 years

275
00:11:11,680 --> 00:11:13,200
uh

276
00:11:13,200 --> 00:11:14,959
the majority of clients who do care

277
00:11:14,959 --> 00:11:17,200
implement it so maybe we should just use

278
00:11:17,200 --> 00:11:20,240
that one um but that will only be in my

279
00:11:20,240 --> 00:11:22,320
opinion useful if we have a full

280
00:11:22,320 --> 00:11:25,279
understanding of what this property

281
00:11:25,279 --> 00:11:29,000
is supposed to do

282
00:11:31,519 --> 00:11:33,760
so this is yours speaking

283
00:11:33,760 --> 00:11:34,880
yeah so

284
00:11:34,880 --> 00:11:36,480
my opinion on this just to give an

285
00:11:36,480 --> 00:11:37,519
opinion

286
00:11:37,519 --> 00:11:38,399
is

287
00:11:38,399 --> 00:11:40,800
it should the label property should at

288
00:11:40,800 --> 00:11:44,240
least be as powerful as the apple xav

289
00:11:44,240 --> 00:11:46,079
label property

290
00:11:46,079 --> 00:11:46,959
but

291
00:11:46,959 --> 00:11:49,360
i don't see it in it like it's not

292
00:11:49,360 --> 00:11:50,880
necessarily

293
00:11:50,880 --> 00:11:52,959
it doesn't necessarily need to be more

294
00:11:52,959 --> 00:11:54,959
powerful

295
00:11:54,959 --> 00:11:57,680
yeah at least if if there's like a

296
00:11:57,680 --> 00:12:00,160
mapping that we can do between the two

297
00:12:00,160 --> 00:12:01,760
it's fine

298
00:12:01,760 --> 00:12:04,240
yeah um and okay if we cannot map the

299
00:12:04,240 --> 00:12:06,079
the full label

300
00:12:06,079 --> 00:12:08,880
property of js contact back to the the

301
00:12:08,880 --> 00:12:10,959
mac x property

302
00:12:10,959 --> 00:12:13,920
i would also say it's fine in my opinion

303
00:12:13,920 --> 00:12:16,320
yeah if we do it sorry from the old to

304
00:12:16,320 --> 00:12:18,160
the new there should be a

305
00:12:18,160 --> 00:12:20,160
good way to map or from new to old it's

306
00:12:20,160 --> 00:12:22,880
not necessarily in my opinion

307
00:12:22,880 --> 00:12:24,639
yeah but that's it

308
00:12:24,639 --> 00:12:26,560
what i would say um yeah i mean the

309
00:12:26,560 --> 00:12:28,720
charter currently requires us to define

310
00:12:28,720 --> 00:12:30,959
a clear mapping between all context

311
00:12:30,959 --> 00:12:34,399
properties we have yeah um but yeah

312
00:12:34,399 --> 00:12:36,240
there are pros and cons of just reusing

313
00:12:36,240 --> 00:12:39,200
the xav label or introducing a new one i

314
00:12:39,200 --> 00:12:40,639
think with the current

315
00:12:40,639 --> 00:12:42,720
definition of the label property in js

316
00:12:42,720 --> 00:12:45,680
contact we should use a new one because

317
00:12:45,680 --> 00:12:47,519
i would very much assume that clients

318
00:12:47,519 --> 00:12:49,519
that use the xab label expected to be

319
00:12:49,519 --> 00:12:51,200
very short and have their user

320
00:12:51,200 --> 00:12:53,360
interfaces designed as such

321
00:12:53,360 --> 00:12:55,440
um if we come to the conclusion there is

322
00:12:55,440 --> 00:12:57,040
really no need for a

323
00:12:57,040 --> 00:12:59,040
free text thingy you can tag on

324
00:12:59,040 --> 00:13:01,040
everything in shares contact then we

325
00:13:01,040 --> 00:13:02,639
should clarify it is meant for very

326
00:13:02,639 --> 00:13:04,880
short identifiers

327
00:13:04,880 --> 00:13:06,639
in the in the js contact and then i

328
00:13:06,639 --> 00:13:10,079
think we should just use xav label

329
00:13:10,079 --> 00:13:13,519
let me just get um

330
00:13:15,839 --> 00:13:18,399
okay um there is no further input on

331
00:13:18,399 --> 00:13:20,800
that next slide please

332
00:13:20,800 --> 00:13:22,639
we already brought it up property groups

333
00:13:22,639 --> 00:13:26,240
so vcard allows to group properties

334
00:13:26,240 --> 00:13:28,079
as you can see on the left there is a

335
00:13:28,079 --> 00:13:29,600
group

336
00:13:29,600 --> 00:13:32,560
with identifier group one

337
00:13:32,560 --> 00:13:34,800
vcard says there is no further meaning

338
00:13:34,800 --> 00:13:37,600
to that it's just like an um

339
00:13:37,600 --> 00:13:40,320
opaque identifier and you can group two

340
00:13:40,320 --> 00:13:44,079
or more properties in vcard with that

341
00:13:44,079 --> 00:13:47,680
um we already um define in the

342
00:13:47,680 --> 00:13:50,880
in the mapping rfc a way how to preserve

343
00:13:50,880 --> 00:13:52,720
them it's it's it's a draft version

344
00:13:52,720 --> 00:13:55,040
still but um basically we will just use

345
00:13:55,040 --> 00:13:56,639
js

346
00:13:56,639 --> 00:13:58,639
json pointers um

347
00:13:58,639 --> 00:14:01,320
to define the members of the group

348
00:14:01,320 --> 00:14:02,959
[Music]

349
00:14:02,959 --> 00:14:05,120
what i'm not sure about is

350
00:14:05,120 --> 00:14:07,680
is if property groups should be a thing

351
00:14:07,680 --> 00:14:09,440
in js contact

352
00:14:09,440 --> 00:14:11,440
in the format 2 at the moment as you can

353
00:14:11,440 --> 00:14:14,240
see we're using our special

354
00:14:14,240 --> 00:14:16,320
mapping properties which really are

355
00:14:16,320 --> 00:14:18,720
meant only to preserve stuff that exists

356
00:14:18,720 --> 00:14:21,360
in vcart but we do not map to a chase

357
00:14:21,360 --> 00:14:22,800
contact

358
00:14:22,800 --> 00:14:24,230
um but

359
00:14:24,230 --> 00:14:26,079
[Music]

360
00:14:26,079 --> 00:14:27,839
i wouldn't know of a use case where

361
00:14:27,839 --> 00:14:29,839
property groups are used but if somebody

362
00:14:29,839 --> 00:14:30,959
here

363
00:14:30,959 --> 00:14:34,079
uses them or knows of use cases for them

364
00:14:34,079 --> 00:14:37,199
and says they are

365
00:14:37,279 --> 00:14:39,839
they should be a regular feature in js

366
00:14:39,839 --> 00:14:41,360
contact then please

367
00:14:41,360 --> 00:14:42,959
let us know

368
00:14:42,959 --> 00:14:44,560
now or

369
00:14:44,560 --> 00:14:46,959
later

370
00:14:50,480 --> 00:14:52,800
maybe we go to the next slide please

371
00:14:52,800 --> 00:14:54,240
ah sorry back again i thought there was

372
00:14:54,240 --> 00:14:55,760
a second slide

373
00:14:55,760 --> 00:14:58,240
i was just waiting to be called so this

374
00:14:58,240 --> 00:14:59,760
is hanseaux speaking

375
00:14:59,760 --> 00:15:01,120
um

376
00:15:01,120 --> 00:15:02,880
no particular strong opinion right at

377
00:15:02,880 --> 00:15:05,839
the moment but just an uh a note i think

378
00:15:05,839 --> 00:15:08,480
the only system i'm aware of that's i've

379
00:15:08,480 --> 00:15:09,920
ever seen using these kind of group

380
00:15:09,920 --> 00:15:11,920
properties is really apple so i'm not

381
00:15:11,920 --> 00:15:13,600
aware of any other system i've never

382
00:15:13,600 --> 00:15:15,040
seen it before

383
00:15:15,040 --> 00:15:17,760
um i might still need to look into if

384
00:15:17,760 --> 00:15:20,160
the case for apple is valid or makes

385
00:15:20,160 --> 00:15:21,360
sense so

386
00:15:21,360 --> 00:15:22,959
might make sense because apple is quite

387
00:15:22,959 --> 00:15:23,680
a

388
00:15:23,680 --> 00:15:26,000
big usage factor here but yeah that's

389
00:15:26,000 --> 00:15:27,440
just as a short note for the moment i'll

390
00:15:27,440 --> 00:15:29,680
also keep that on my list for rechecking

391
00:15:29,680 --> 00:15:31,839
okay thank you yeah as i said so um i

392
00:15:31,839 --> 00:15:33,759
surely want to preserve them in the js

393
00:15:33,759 --> 00:15:35,600
contact data so that we can map that

394
00:15:35,600 --> 00:15:38,320
cleanly back again to a vcard

395
00:15:38,320 --> 00:15:40,800
but currently i do not see the need or

396
00:15:40,800 --> 00:15:43,279
do not also hear the need that something

397
00:15:43,279 --> 00:15:45,360
like property groups should be a first

398
00:15:45,360 --> 00:15:46,560
class

399
00:15:46,560 --> 00:15:50,000
feature in js content

400
00:15:51,040 --> 00:15:53,839
all right then the next and uh if i

401
00:15:53,839 --> 00:15:55,839
remember correctly the last slide for gs

402
00:15:55,839 --> 00:15:57,839
contact is stuff that we do not intend

403
00:15:57,839 --> 00:15:58,720
to

404
00:15:58,720 --> 00:16:03,199
cover in js contact um

405
00:16:03,199 --> 00:16:05,680
we want this to be quite short but it's

406
00:16:05,680 --> 00:16:08,160
never going to be completely empty so

407
00:16:08,160 --> 00:16:10,880
what we do not what we will not map

408
00:16:10,880 --> 00:16:11,680
um

409
00:16:11,680 --> 00:16:12,560
to

410
00:16:12,560 --> 00:16:14,959
standard properties in js contact are

411
00:16:14,959 --> 00:16:17,920
the pid and client pid properties

412
00:16:17,920 --> 00:16:19,600
these are defined in vcards for

413
00:16:19,600 --> 00:16:21,600
synchronization so very

414
00:16:21,600 --> 00:16:24,880
of different so that such that different

415
00:16:24,880 --> 00:16:27,519
applications can work on the same vcard

416
00:16:27,519 --> 00:16:30,079
similar kind of simultaneously and can

417
00:16:30,079 --> 00:16:33,199
keep track of who added or changed what

418
00:16:33,199 --> 00:16:36,199
um

419
00:16:36,639 --> 00:16:39,600
i haven't seen this in use anywhere um

420
00:16:39,600 --> 00:16:42,320
i also have doubts that this is really

421
00:16:42,320 --> 00:16:44,880
this this is this is how synchronization

422
00:16:44,880 --> 00:16:46,399
should be done

423
00:16:46,399 --> 00:16:49,680
um that being said we can of course

424
00:16:49,680 --> 00:16:52,480
preserve these values if they show up in

425
00:16:52,480 --> 00:16:53,839
a v card

426
00:16:53,839 --> 00:16:56,720
but as for now we have no intention to

427
00:16:56,720 --> 00:16:59,279
provide a similar mechanism in js

428
00:16:59,279 --> 00:17:02,279
contact

429
00:17:04,720 --> 00:17:07,919
um similarly for the

430
00:17:07,919 --> 00:17:11,439
vcard defines um a couple of

431
00:17:11,439 --> 00:17:14,160
temporal values um

432
00:17:14,160 --> 00:17:15,679
timestamp being

433
00:17:15,679 --> 00:17:18,720
like a regular utc timestamp

434
00:17:18,720 --> 00:17:21,119
a date end or time but also just the

435
00:17:21,119 --> 00:17:23,359
date and time

436
00:17:23,359 --> 00:17:25,119
and all of them can have

437
00:17:25,119 --> 00:17:27,359
partial values so you can define a time

438
00:17:27,359 --> 00:17:29,120
where you do not know the minutes or you

439
00:17:29,120 --> 00:17:31,120
can have a date or you just know the

440
00:17:31,120 --> 00:17:33,679
year

441
00:17:33,679 --> 00:17:34,880
we

442
00:17:34,880 --> 00:17:36,720
we do not intend to support the date and

443
00:17:36,720 --> 00:17:38,480
time types mainly because there is no

444
00:17:38,480 --> 00:17:40,559
property using them

445
00:17:40,559 --> 00:17:43,039
also in vcard at least as far as we know

446
00:17:43,039 --> 00:17:43,380
um

447
00:17:43,380 --> 00:17:44,640
[Music]

448
00:17:44,640 --> 00:17:47,600
we do support the date and or time type

449
00:17:47,600 --> 00:17:49,679
for anniversaries

450
00:17:49,679 --> 00:17:51,360
um

451
00:17:51,360 --> 00:17:52,720
and

452
00:17:52,720 --> 00:17:54,559
here at the current definition we

453
00:17:54,559 --> 00:17:55,600
support

454
00:17:55,600 --> 00:17:58,160
partial dates we do not

455
00:17:58,160 --> 00:18:01,360
support time only birthdays um

456
00:18:01,360 --> 00:18:03,120
which

457
00:18:03,120 --> 00:18:04,799
i think makes sense but if somebody

458
00:18:04,799 --> 00:18:08,160
disagrees let me know um what we might

459
00:18:08,160 --> 00:18:10,160
change is that um

460
00:18:10,160 --> 00:18:12,799
at the moment if i recall correctly but

461
00:18:12,799 --> 00:18:14,160
i might be wrong i think we do not

462
00:18:14,160 --> 00:18:17,440
support time in a birthday

463
00:18:17,440 --> 00:18:19,360
and i think if we do not support it we

464
00:18:19,360 --> 00:18:20,799
should support it

465
00:18:20,799 --> 00:18:21,679
um

466
00:18:21,679 --> 00:18:24,960
because people might know their exact

467
00:18:24,960 --> 00:18:27,039
time of birth i do know for example so i

468
00:18:27,039 --> 00:18:30,480
think that should also be supported

469
00:18:30,799 --> 00:18:33,120
and as i said again all this is just the

470
00:18:33,120 --> 00:18:35,760
discussion of what to um were to provide

471
00:18:35,760 --> 00:18:38,240
standard properties in js contact we can

472
00:18:38,240 --> 00:18:40,000
all preserve this from a vcard when we

473
00:18:40,000 --> 00:18:43,840
map it to js conflict

474
00:18:44,720 --> 00:18:46,080
all right

475
00:18:46,080 --> 00:18:47,919
any further input on gs contact

476
00:18:47,919 --> 00:18:49,600
otherwise i would continue with js

477
00:18:49,600 --> 00:18:52,000
calendar

478
00:18:54,320 --> 00:18:57,280
all right cool

479
00:18:57,280 --> 00:18:59,840
just calendar next slide please uh again

480
00:18:59,840 --> 00:19:02,080
the same story like with vcard we have

481
00:19:02,080 --> 00:19:04,480
three rfcs the latest the last one being

482
00:19:04,480 --> 00:19:06,720
the latest edition which defines a

483
00:19:06,720 --> 00:19:08,160
couple of new

484
00:19:08,160 --> 00:19:10,240
um eye credit the properties at the

485
00:19:10,240 --> 00:19:12,080
moment um

486
00:19:12,080 --> 00:19:14,400
we are

487
00:19:14,400 --> 00:19:17,120
it for these extension rfcs for both

488
00:19:17,120 --> 00:19:19,520
weaker and icalendar at the end they

489
00:19:19,520 --> 00:19:20,880
will share

490
00:19:20,880 --> 00:19:23,760
a couple of definitions um for example

491
00:19:23,760 --> 00:19:24,640
the

492
00:19:24,640 --> 00:19:28,240
prop id parameter that you currently see

493
00:19:28,240 --> 00:19:30,720
just defined in the icard and the js

494
00:19:30,720 --> 00:19:32,240
calendar extensions

495
00:19:32,240 --> 00:19:35,600
will also use them for vcard

496
00:19:35,600 --> 00:19:39,039
and similarly in the

497
00:19:39,039 --> 00:19:42,400
in the in the v card extension i think

498
00:19:42,400 --> 00:19:44,000
in one of them we have defined already

499
00:19:44,000 --> 00:19:45,360
the mapping of

500
00:19:45,360 --> 00:19:47,919
of of properties um that are in

501
00:19:47,919 --> 00:19:49,679
icalendar vcard

502
00:19:49,679 --> 00:19:53,280
to chase contact.js calendar

503
00:19:53,280 --> 00:19:56,240
as long as these definitions are not

504
00:19:56,240 --> 00:19:58,240
as these definitions are not final we

505
00:19:58,240 --> 00:20:00,080
want to just

506
00:20:00,080 --> 00:20:02,720
propose it in one of the rfcs just not

507
00:20:02,720 --> 00:20:04,960
to double our editing work

508
00:20:04,960 --> 00:20:06,720
because we definitely want these

509
00:20:06,720 --> 00:20:08,640
mechanisms to be exactly the same for

510
00:20:08,640 --> 00:20:12,240
both formats except where

511
00:20:12,240 --> 00:20:13,919
one of the formats for example vcard

512
00:20:13,919 --> 00:20:16,400
requires additional definitions but they

513
00:20:16,400 --> 00:20:19,600
should share the same mechanisms

514
00:20:19,600 --> 00:20:20,559
where they

515
00:20:20,559 --> 00:20:22,000
share the same

516
00:20:22,000 --> 00:20:25,919
property types and values

517
00:20:26,159 --> 00:20:27,440
so

518
00:20:27,440 --> 00:20:29,120
i encourage you to look at the latest

519
00:20:29,120 --> 00:20:31,440
one the extensions draft and see

520
00:20:31,440 --> 00:20:33,600
if

521
00:20:33,760 --> 00:20:35,679
how you think about that um that being

522
00:20:35,679 --> 00:20:37,440
said on the next slide

523
00:20:37,440 --> 00:20:39,600
we will discuss a couple of changes for

524
00:20:39,600 --> 00:20:41,840
js calendar biz

525
00:20:41,840 --> 00:20:44,960
uh we currently identify the number of

526
00:20:44,960 --> 00:20:48,799
of changes that are mainly

527
00:20:48,960 --> 00:20:50,880
improving the design or were just

528
00:20:50,880 --> 00:20:53,440
clarifying things that were

529
00:20:53,440 --> 00:20:56,080
not as clearly defined by and as we came

530
00:20:56,080 --> 00:20:58,559
to learn while we were implementing the

531
00:20:58,559 --> 00:21:00,799
standard mapping between js calendar and

532
00:21:00,799 --> 00:21:02,799
icalendar

533
00:21:02,799 --> 00:21:04,720
that so the the main

534
00:21:04,720 --> 00:21:07,039
points um that we want to get into gs

535
00:21:07,039 --> 00:21:08,640
calendar biz i've kept for this

536
00:21:08,640 --> 00:21:11,440
discussion today um as there are

537
00:21:11,440 --> 00:21:13,520
as there is not consensus

538
00:21:13,520 --> 00:21:15,600
about them for all the changes that

539
00:21:15,600 --> 00:21:18,559
already made it into the rfc i've

540
00:21:18,559 --> 00:21:21,280
put the link into this

541
00:21:21,280 --> 00:21:22,640
into this presentation which you can

542
00:21:22,640 --> 00:21:26,400
click on if you download the pdf

543
00:21:27,120 --> 00:21:28,000
yes

544
00:21:28,000 --> 00:21:29,600
now it says clearly what i couldn't

545
00:21:29,600 --> 00:21:32,559
remember in the js calendar i calendar

546
00:21:32,559 --> 00:21:34,720
rfc we defined the standard mapping for

547
00:21:34,720 --> 00:21:36,880
unknown properties the

548
00:21:36,880 --> 00:21:39,760
summary is we are using an extension

549
00:21:39,760 --> 00:21:42,000
property mechanism for that where we use

550
00:21:42,000 --> 00:21:43,440
a

551
00:21:43,440 --> 00:21:46,480
uri in the urn namespace um

552
00:21:46,480 --> 00:21:48,080
to

553
00:21:48,080 --> 00:21:50,960
which allows us to use the already itf

554
00:21:50,960 --> 00:21:52,880
registered

555
00:21:52,880 --> 00:21:55,360
namespace for urns and we can exactly

556
00:21:55,360 --> 00:21:57,919
point to the rfc where we define this

557
00:21:57,919 --> 00:21:58,960
mapping

558
00:21:58,960 --> 00:22:01,200
so that the property also kind of

559
00:22:01,200 --> 00:22:04,880
self-documents um where it is defined

560
00:22:04,880 --> 00:22:07,280
the last one i already talked about so

561
00:22:07,280 --> 00:22:09,039
next slide please and that brings up the

562
00:22:09,039 --> 00:22:10,240
first

563
00:22:10,240 --> 00:22:11,919
point for discussion which we have seen

564
00:22:11,919 --> 00:22:13,360
on the mailing list already i will just

565
00:22:13,360 --> 00:22:15,039
give a short summary and then i would

566
00:22:15,039 --> 00:22:17,520
like to ask mike and neil to join the

567
00:22:17,520 --> 00:22:18,720
discussion

568
00:22:18,720 --> 00:22:20,400
um

569
00:22:20,400 --> 00:22:22,080
and and hopefully we can sort this out

570
00:22:22,080 --> 00:22:24,080
today so in

571
00:22:24,080 --> 00:22:27,120
js calendar we have reply to property

572
00:22:27,120 --> 00:22:29,360
it's a multivalued property which allows

573
00:22:29,360 --> 00:22:30,720
to define

574
00:22:30,720 --> 00:22:34,960
um multiple ways to send rsr

575
00:22:34,960 --> 00:22:36,559
rsvps

576
00:22:36,559 --> 00:22:39,200
or invites

577
00:22:39,200 --> 00:22:41,360
keyed by the identifier of the

578
00:22:41,360 --> 00:22:43,280
scheduling method currently the

579
00:22:43,280 --> 00:22:45,200
scheduling methods imap web and other

580
00:22:45,200 --> 00:22:47,440
are defined for reply to

581
00:22:47,440 --> 00:22:48,480
um

582
00:22:48,480 --> 00:22:51,039
where web is basically link the user is

583
00:22:51,039 --> 00:22:52,799
expected to click on to

584
00:22:52,799 --> 00:22:54,720
to rsvp

585
00:22:54,720 --> 00:22:57,760
and similarly in participant

586
00:22:57,760 --> 00:22:59,760
oops there is a s missing so it's

587
00:22:59,760 --> 00:23:01,840
participant sent to

588
00:23:01,840 --> 00:23:03,600
this defines where to send invites to

589
00:23:03,600 --> 00:23:05,039
this participant

590
00:23:05,039 --> 00:23:06,720
this does not allow the web method as we

591
00:23:06,720 --> 00:23:10,080
do not expect organizers to manually

592
00:23:10,080 --> 00:23:12,159
click on something where they can invite

593
00:23:12,159 --> 00:23:14,640
a participant

594
00:23:14,640 --> 00:23:16,640
next slide please

595
00:23:16,640 --> 00:23:19,600
now the issue that came up during the

596
00:23:19,600 --> 00:23:21,840
conversion to icalendar and from i

597
00:23:21,840 --> 00:23:24,559
calendar to js calendar was that

598
00:23:24,559 --> 00:23:25,600
as

599
00:23:25,600 --> 00:23:27,280
as we said there is a multivalued

600
00:23:27,280 --> 00:23:29,440
property in gs calendar using various

601
00:23:29,440 --> 00:23:31,360
scheduling methods but i canada really

602
00:23:31,360 --> 00:23:33,360
only allows one

603
00:23:33,360 --> 00:23:36,880
which is a calendar address aka uri

604
00:23:36,880 --> 00:23:39,679
almost always a mail to uri but the spec

605
00:23:39,679 --> 00:23:41,120
does not

606
00:23:41,120 --> 00:23:42,480
require that

607
00:23:42,480 --> 00:23:44,080
that you can put in the organizer or

608
00:23:44,080 --> 00:23:46,640
attendee properties in a calendar

609
00:23:46,640 --> 00:23:47,919
resource

610
00:23:47,919 --> 00:23:50,640
de facto scheduling is done over uh is

611
00:23:50,640 --> 00:23:53,919
over it is with itip over imip so um as

612
00:23:53,919 --> 00:23:56,159
i said typically you will see male 2

613
00:23:56,159 --> 00:23:57,440
uris

614
00:23:57,440 --> 00:23:59,360
in the organization but there can be

615
00:23:59,360 --> 00:24:00,960
anything else

616
00:24:00,960 --> 00:24:04,400
um now this brings up the issue that we

617
00:24:04,400 --> 00:24:05,760
cannot

618
00:24:05,760 --> 00:24:08,159
unambiguously map

619
00:24:08,159 --> 00:24:11,120
from the sent to property or the reply

620
00:24:11,120 --> 00:24:13,520
to properties to the organizer or

621
00:24:13,520 --> 00:24:16,159
attendee respectively

622
00:24:16,159 --> 00:24:19,360
and there are a couple of options how we

623
00:24:19,360 --> 00:24:22,480
make this uh unambiguous uh that are

624
00:24:22,480 --> 00:24:25,039
that that were discussed on the list

625
00:24:25,039 --> 00:24:25,350
um

626
00:24:25,350 --> 00:24:26,640
[Music]

627
00:24:26,640 --> 00:24:28,480
and um maybe

628
00:24:28,480 --> 00:24:30,799
yeah so maybe let's also say that we we

629
00:24:30,799 --> 00:24:33,039
currently do not have ways to define

630
00:24:33,039 --> 00:24:35,520
multiple uris for for an attendee or

631
00:24:35,520 --> 00:24:37,279
participant

632
00:24:37,279 --> 00:24:39,360
and the web 2 method at the moment has

633
00:24:39,360 --> 00:24:41,440
absolutely no mapping at all so on the

634
00:24:41,440 --> 00:24:46,039
next slide we'll discuss options

635
00:24:46,400 --> 00:24:48,159
uh the first option is to keep js

636
00:24:48,159 --> 00:24:51,279
calendar multivalued um and define a

637
00:24:51,279 --> 00:24:52,960
heuristic and say okay if you if you

638
00:24:52,960 --> 00:24:54,960
have an imap just put that into the 10d

639
00:24:54,960 --> 00:24:56,320
because it's very likely that the

640
00:24:56,320 --> 00:24:58,880
scheduling should be done over um

641
00:24:58,880 --> 00:25:00,720
with it over imip

642
00:25:00,720 --> 00:25:02,320
um but of course

643
00:25:02,320 --> 00:25:04,000
there is data where there is no mailto

644
00:25:04,000 --> 00:25:04,960
uri

645
00:25:04,960 --> 00:25:06,880
in the original icard and the data so

646
00:25:06,880 --> 00:25:08,799
what happens if you add

647
00:25:08,799 --> 00:25:11,600
in js calendar in addition to an an

648
00:25:11,600 --> 00:25:12,840
existing

649
00:25:12,840 --> 00:25:15,200
other uh scheduling method in imap

650
00:25:15,200 --> 00:25:17,039
should that overrule what's in the icon

651
00:25:17,039 --> 00:25:18,720
the data or should you stick to what was

652
00:25:18,720 --> 00:25:21,120
in the ikland data before we just don't

653
00:25:21,120 --> 00:25:22,960
know and um

654
00:25:22,960 --> 00:25:24,799
and uh most likely also the people

655
00:25:24,799 --> 00:25:26,880
updating the data will not be even aware

656
00:25:26,880 --> 00:25:29,840
of the rules

657
00:25:30,000 --> 00:25:30,960
and

658
00:25:30,960 --> 00:25:33,120
if we use heuristic like this

659
00:25:33,120 --> 00:25:34,799
we need to be aware that for every

660
00:25:34,799 --> 00:25:36,080
additional

661
00:25:36,080 --> 00:25:37,840
scheduling method defined we need to

662
00:25:37,840 --> 00:25:39,520
update the rule because

663
00:25:39,520 --> 00:25:41,520
we always want to be

664
00:25:41,520 --> 00:25:43,760
unambiguous

665
00:25:43,760 --> 00:25:46,159
the alternative would be that we merge

666
00:25:46,159 --> 00:25:49,120
the other and imit methods the other

667
00:25:49,120 --> 00:25:51,120
method really just came up because we

668
00:25:51,120 --> 00:25:52,640
realized

669
00:25:52,640 --> 00:25:54,880
in rare cases there are

670
00:25:54,880 --> 00:25:57,039
non-male to uris in an attendee or

671
00:25:57,039 --> 00:25:59,679
organizer and we can't map the two imaps

672
00:25:59,679 --> 00:26:01,679
so we introduced other

673
00:26:01,679 --> 00:26:04,640
um so the idea really one of the ideas

674
00:26:04,640 --> 00:26:07,200
now would be okay we just say it's not

675
00:26:07,200 --> 00:26:09,360
other or image we just say it's imit i

676
00:26:09,360 --> 00:26:12,159
tip sorry and then it's absolutely clear

677
00:26:12,159 --> 00:26:14,240
whatever you put into this value

678
00:26:14,240 --> 00:26:15,840
will end up

679
00:26:15,840 --> 00:26:18,159
if you schedule over itip

680
00:26:18,159 --> 00:26:20,159
will end up in the

681
00:26:20,159 --> 00:26:23,520
in the it message

682
00:26:23,600 --> 00:26:26,480
and the last option that was brought up

683
00:26:26,480 --> 00:26:28,640
was to um

684
00:26:28,640 --> 00:26:31,120
do not use a multivalued property but

685
00:26:31,120 --> 00:26:33,919
for each scheduling method define its

686
00:26:33,919 --> 00:26:37,200
own property which still might be uri

687
00:26:37,200 --> 00:26:38,960
might be something more complex that

688
00:26:38,960 --> 00:26:40,400
very much depends on the scheduling

689
00:26:40,400 --> 00:26:41,600
method

690
00:26:41,600 --> 00:26:43,200
speaking of scheduling methods and this

691
00:26:43,200 --> 00:26:45,919
will be my last comment before i hope

692
00:26:45,919 --> 00:26:48,400
neil and mike can join

693
00:26:48,400 --> 00:26:51,120
at the moment we have the scheduling

694
00:26:51,120 --> 00:26:55,039
methods that we have defined are

695
00:26:55,039 --> 00:26:56,400
imip

696
00:26:56,400 --> 00:26:59,120
and and or itip

697
00:26:59,120 --> 00:27:02,480
but really it's itip over imap

698
00:27:02,480 --> 00:27:05,279
the web scheduling method seems

699
00:27:05,279 --> 00:27:07,600
rather straightforward to understand if

700
00:27:07,600 --> 00:27:10,320
it's if it means to click on something

701
00:27:10,320 --> 00:27:11,279
and

702
00:27:11,279 --> 00:27:13,840
let the user do manual action

703
00:27:13,840 --> 00:27:15,360
at the moment i wouldn't know of any

704
00:27:15,360 --> 00:27:17,440
other scheduling method that should go

705
00:27:17,440 --> 00:27:20,640
into js calendar so we might not know

706
00:27:20,640 --> 00:27:22,240
the requirements

707
00:27:22,240 --> 00:27:24,320
the full requirements for additional

708
00:27:24,320 --> 00:27:27,200
scheduling methods

709
00:27:27,200 --> 00:27:29,679
okay that's the end of my

710
00:27:29,679 --> 00:27:33,640
intro to this topic

711
00:27:35,120 --> 00:27:38,959
feel free to just type in neil go ahead

712
00:27:40,640 --> 00:27:43,679
hello can i jump in

713
00:27:43,840 --> 00:27:47,520
oh i've got echo again correct

714
00:27:47,679 --> 00:27:49,600
so i thought about this

715
00:27:49,600 --> 00:27:51,279
quite a bit and

716
00:27:51,279 --> 00:27:55,039
i still think the current

717
00:27:55,039 --> 00:27:59,000
i'm gonna have to mute this okay

718
00:28:05,039 --> 00:28:07,600
how do you mean

719
00:28:12,399 --> 00:28:15,120
i think the current version is the best

720
00:28:15,120 --> 00:28:17,279
option

721
00:28:17,279 --> 00:28:19,840
although we

722
00:28:19,919 --> 00:28:22,080
should be more explicit about what to do

723
00:28:22,080 --> 00:28:24,320
with

724
00:28:27,679 --> 00:28:28,880
male 2

725
00:28:28,880 --> 00:28:30,480
non-male 2

726
00:28:30,480 --> 00:28:31,679
now i need to find a way without this

727
00:28:31,679 --> 00:28:35,880
echo i can't possibly

728
00:28:46,720 --> 00:28:48,960
um

729
00:28:51,200 --> 00:28:55,559
try different device way back in a sec

730
00:29:14,000 --> 00:29:16,080
this

731
00:29:16,080 --> 00:29:17,200
i don't know if it's coming from this

732
00:29:17,200 --> 00:29:18,960
room or whether it's in his own system

733
00:29:18,960 --> 00:29:21,919
that he's getting the echo

734
00:29:22,960 --> 00:29:25,120
this is very interesting i can't remove

735
00:29:25,120 --> 00:29:28,240
him from the queue because he's

736
00:29:28,240 --> 00:29:29,520
not online

737
00:29:29,520 --> 00:29:32,480
that's definitely

738
00:29:34,880 --> 00:29:36,399
hi let me

739
00:29:36,399 --> 00:29:38,320
can you hear me

740
00:29:38,320 --> 00:29:39,360
yes

741
00:29:39,360 --> 00:29:41,520
i'm not getting any echo

742
00:29:41,520 --> 00:29:44,799
i'm not going remotely

743
00:29:47,200 --> 00:29:50,000
did he just connect

744
00:29:50,000 --> 00:29:53,880
oh yeah he's back again

745
00:30:02,880 --> 00:30:05,520
okay can you hear me here

746
00:30:05,520 --> 00:30:07,120
yep

747
00:30:07,120 --> 00:30:09,279
that's much better sorry about that

748
00:30:09,279 --> 00:30:11,039
um it was impossible to concentrate with

749
00:30:11,039 --> 00:30:12,799
your own words coming back new year like

750
00:30:12,799 --> 00:30:15,360
two seconds later um

751
00:30:15,360 --> 00:30:16,720
so

752
00:30:16,720 --> 00:30:18,399
i think the

753
00:30:18,399 --> 00:30:21,760
at the moment there's basically

754
00:30:21,760 --> 00:30:24,159
there there's two types of address we

755
00:30:24,159 --> 00:30:26,080
can get here it's

756
00:30:26,080 --> 00:30:27,520
um

757
00:30:27,520 --> 00:30:28,399
a

758
00:30:28,399 --> 00:30:30,159
itup address

759
00:30:30,159 --> 00:30:31,039
that's

760
00:30:31,039 --> 00:30:33,520
uh mailed to and so we understand i can

761
00:30:33,520 --> 00:30:36,799
use the admit one eye to address that

762
00:30:36,799 --> 00:30:38,960
is not and so can only be used

763
00:30:38,960 --> 00:30:41,279
essentially internally with calder now

764
00:30:41,279 --> 00:30:42,640
there is a poor name for that and we

765
00:30:42,640 --> 00:30:45,679
should probably rename that to something

766
00:30:45,679 --> 00:30:46,640
else

767
00:30:46,640 --> 00:30:49,600
to make it explicit

768
00:30:49,760 --> 00:30:53,279
we could merge those two into

769
00:30:53,279 --> 00:30:55,600
a single item thing but i prefer them

770
00:30:55,600 --> 00:30:58,720
separate i think um like uh

771
00:30:58,720 --> 00:31:00,880
uh put on the mailing list

772
00:31:00,880 --> 00:31:02,880
that at the moment you've got servers

773
00:31:02,880 --> 00:31:04,240
trying to do this translation on the

774
00:31:04,240 --> 00:31:05,279
edges

775
00:31:05,279 --> 00:31:06,640
which doesn't always work and so

776
00:31:06,640 --> 00:31:08,640
sometimes they leak out the

777
00:31:08,640 --> 00:31:10,320
they they you don't get the mail to

778
00:31:10,320 --> 00:31:11,600
address when you need it because they

779
00:31:11,600 --> 00:31:13,440
didn't translate it within an external

780
00:31:13,440 --> 00:31:14,399
system

781
00:31:14,399 --> 00:31:15,279
um

782
00:31:15,279 --> 00:31:16,399
and

783
00:31:16,399 --> 00:31:17,840
you'll be much cleaner for them if they

784
00:31:17,840 --> 00:31:19,279
could have both

785
00:31:19,279 --> 00:31:20,720
stored inside it

786
00:31:20,720 --> 00:31:21,600
um

787
00:31:21,600 --> 00:31:23,120
now the the thing about having

788
00:31:23,120 --> 00:31:24,399
multi-value

789
00:31:24,399 --> 00:31:26,720
property in general is

790
00:31:26,720 --> 00:31:28,480
essentially it's kind of a name spacing

791
00:31:28,480 --> 00:31:31,120
you'd say all of these are um

792
00:31:31,120 --> 00:31:33,200
properties are kind of the scheduling

793
00:31:33,200 --> 00:31:35,039
properties rather than having them with

794
00:31:35,039 --> 00:31:36,799
the separate top level names and the

795
00:31:36,799 --> 00:31:40,720
reason that's important is um

796
00:31:40,720 --> 00:31:42,640
for when you have something like uh jmap

797
00:31:42,640 --> 00:31:44,159
calendars

798
00:31:44,159 --> 00:31:45,360
you could have

799
00:31:45,360 --> 00:31:48,159
the servers add support for a new

800
00:31:48,159 --> 00:31:50,000
scheduling thing without the clients

801
00:31:50,000 --> 00:31:51,279
having to

802
00:31:51,279 --> 00:31:53,200
explicitly know about it

803
00:31:53,200 --> 00:31:55,120
uh so

804
00:31:55,120 --> 00:31:56,240
the

805
00:31:56,240 --> 00:31:58,399
all the the jmat spec can say that you

806
00:31:58,399 --> 00:31:59,679
can

807
00:31:59,679 --> 00:32:02,960
identify which um

808
00:32:03,519 --> 00:32:04,480
uh

809
00:32:04,480 --> 00:32:06,240
which participant is you by looking for

810
00:32:06,240 --> 00:32:07,840
a corresponding

811
00:32:07,840 --> 00:32:09,200
kind of uh

812
00:32:09,200 --> 00:32:12,320
key value within the send to and like

813
00:32:12,320 --> 00:32:14,080
the identity for that user so saying

814
00:32:14,080 --> 00:32:16,080
this user um

815
00:32:16,080 --> 00:32:17,760
if you add this user to an event here

816
00:32:17,760 --> 00:32:20,000
are the scheduling methods for it and

817
00:32:20,000 --> 00:32:22,159
you just add that as a single property

818
00:32:22,159 --> 00:32:24,000
um

819
00:32:24,000 --> 00:32:26,480
so it might have say uh this is mail to

820
00:32:26,480 --> 00:32:30,399
neil jay at fastmailteam.com and

821
00:32:30,480 --> 00:32:32,880
a future thing

822
00:32:32,880 --> 00:32:35,039
new uri and the client doesn't have to

823
00:32:35,039 --> 00:32:36,720
know anything about how those scheduling

824
00:32:36,720 --> 00:32:38,000
methods work it just gets told by the

825
00:32:38,000 --> 00:32:39,120
server those

826
00:32:39,120 --> 00:32:41,519
are that that object is what you add for

827
00:32:41,519 --> 00:32:44,559
the send to and if it wants to know if

828
00:32:44,559 --> 00:32:47,279
if an existing event is for that user it

829
00:32:47,279 --> 00:32:48,720
just has to look for if there's a

830
00:32:48,720 --> 00:32:51,200
corresponding uri

831
00:32:51,200 --> 00:32:52,799
within that object

832
00:32:52,799 --> 00:32:54,000
otherwise it wouldn't know which

833
00:32:54,000 --> 00:32:55,760
properties it could look at so you'd

834
00:32:55,760 --> 00:32:57,840
have to hard code kind of which

835
00:32:57,840 --> 00:32:59,279
protocols you support and that's going

836
00:32:59,279 --> 00:33:01,279
to make it much harder to extend

837
00:33:01,279 --> 00:33:03,519
um in in the future

838
00:33:03,519 --> 00:33:05,120
so

839
00:33:05,120 --> 00:33:08,640
i i i do think the current design

840
00:33:08,640 --> 00:33:10,720
is correct um

841
00:33:10,720 --> 00:33:12,080
the

842
00:33:12,080 --> 00:33:15,279
i in terms of of translating um

843
00:33:15,279 --> 00:33:17,840
i would probably go with just a simple

844
00:33:17,840 --> 00:33:18,880
yeah if

845
00:33:18,880 --> 00:33:21,039
um well from calendar to just count i

846
00:33:21,039 --> 00:33:22,399
can't stress down as a straightforward

847
00:33:22,399 --> 00:33:24,559
there's a single value if it's

848
00:33:24,559 --> 00:33:25,679
um

849
00:33:25,679 --> 00:33:27,120
because icalendar is you know currently

850
00:33:27,120 --> 00:33:28,960
quite limited it's it's it's always got

851
00:33:28,960 --> 00:33:31,279
to be an item value it's either a mail

852
00:33:31,279 --> 00:33:32,960
to one or something else and that's

853
00:33:32,960 --> 00:33:34,480
pretty much all we care about

854
00:33:34,480 --> 00:33:35,440
um

855
00:33:35,440 --> 00:33:38,240
and so it either goes to i'm it or to

856
00:33:38,240 --> 00:33:39,200
whatever the other one's called

857
00:33:39,200 --> 00:33:42,000
depending on whether it's a mail to uh

858
00:33:42,000 --> 00:33:44,960
and then reverse i take the item one

859
00:33:44,960 --> 00:33:47,919
first and if not take the um the other

860
00:33:47,919 --> 00:33:50,000
one to go back

861
00:33:50,000 --> 00:33:53,039
and i i just

862
00:33:53,039 --> 00:33:54,480
like i think that's actually absolutely

863
00:33:54,480 --> 00:33:56,559
gonna be fine in practice

864
00:33:56,559 --> 00:33:59,279
that's um we just if we want to just be

865
00:33:59,279 --> 00:34:00,559
able to store the other values in eye

866
00:34:00,559 --> 00:34:02,240
calendar we'll need to find some extra

867
00:34:02,240 --> 00:34:04,799
properties to store them um obviously

868
00:34:04,799 --> 00:34:06,880
you know existing clients won't support

869
00:34:06,880 --> 00:34:08,719
the other properties yet and that's fine

870
00:34:08,719 --> 00:34:10,320
because they can't that's kind of the

871
00:34:10,320 --> 00:34:11,839
point of js calendar was giving us an

872
00:34:11,839 --> 00:34:13,599
extension method for the future

873
00:34:13,599 --> 00:34:15,040
um

874
00:34:15,040 --> 00:34:17,520
yeah so that that's a summary of

875
00:34:17,520 --> 00:34:21,079
my position on that

876
00:34:23,839 --> 00:34:25,440
i'm not sure i saw

877
00:34:25,440 --> 00:34:27,119
mike before in the queue now he's gone

878
00:34:27,119 --> 00:34:29,280
mike do you want to say something or

879
00:34:29,280 --> 00:34:32,280
otherwise

880
00:34:34,960 --> 00:34:37,199
and i just don't

881
00:34:37,199 --> 00:34:40,079
and i just don't really see what what

882
00:34:40,079 --> 00:34:41,280
um

883
00:34:41,280 --> 00:34:43,119
problems he's trying to solve it doesn't

884
00:34:43,119 --> 00:34:46,719
map onto what it does at the moment

885
00:34:46,719 --> 00:34:47,679
um

886
00:34:47,679 --> 00:34:49,520
it i definitely disagree with the idea

887
00:34:49,520 --> 00:34:51,520
of referring to it as imip anyway but

888
00:34:51,520 --> 00:34:53,760
that's that's just a naming

889
00:34:53,760 --> 00:34:56,639
thing it's really i tip we're doing

890
00:34:56,639 --> 00:34:57,599
and

891
00:34:57,599 --> 00:35:00,560
it it's up to

892
00:35:00,560 --> 00:35:02,400
servers or clients to figure out having

893
00:35:02,400 --> 00:35:03,920
identified the

894
00:35:03,920 --> 00:35:05,760
the attendee

895
00:35:05,760 --> 00:35:07,760
uh is to figure out how to get it to the

896
00:35:07,760 --> 00:35:09,920
attendee whether these imip or some

897
00:35:09,920 --> 00:35:11,680
other transport method they've got

898
00:35:11,680 --> 00:35:16,598
available to them is is up to them

899
00:35:16,720 --> 00:35:17,839
and

900
00:35:17,839 --> 00:35:19,280
i think the only thing that we've

901
00:35:19,280 --> 00:35:21,839
identified as a as as something that

902
00:35:21,839 --> 00:35:24,480
needs changing and this predates js

903
00:35:24,480 --> 00:35:25,520
calendar

904
00:35:25,520 --> 00:35:29,359
is is separating out the organizer from

905
00:35:29,359 --> 00:35:31,839
from the the reply to address

906
00:35:31,839 --> 00:35:33,440
that that

907
00:35:33,440 --> 00:35:35,280
became

908
00:35:35,280 --> 00:35:37,599
a problem with sharing

909
00:35:37,599 --> 00:35:40,000
and shared calendars

910
00:35:40,000 --> 00:35:42,320
the the organizer really shouldn't be

911
00:35:42,320 --> 00:35:45,040
the one you reply to necessarily

912
00:35:45,040 --> 00:35:46,320
but that's that's

913
00:35:46,320 --> 00:35:47,920
that's something we can easily deal with

914
00:35:47,920 --> 00:35:51,119
we can extend it to add a

915
00:35:51,119 --> 00:35:53,680
a reply to

916
00:35:53,680 --> 00:35:54,880
um

917
00:35:54,880 --> 00:35:56,240
but that's the only thing i'm seeing i

918
00:35:56,240 --> 00:35:57,760
think we really need to simplify this

919
00:35:57,760 --> 00:36:00,800
back down to what we do and not not try

920
00:36:00,800 --> 00:36:01,599
to

921
00:36:01,599 --> 00:36:03,760
anticipate

922
00:36:03,760 --> 00:36:04,960
um

923
00:36:04,960 --> 00:36:05,839
some

924
00:36:05,839 --> 00:36:08,000
scheduling approach that we don't have

925
00:36:08,000 --> 00:36:08,880
yet

926
00:36:08,880 --> 00:36:11,040
and it and i'm not even sure we should

927
00:36:11,040 --> 00:36:13,359
try and deal with the um

928
00:36:13,359 --> 00:36:15,680
the web thing i mean that's an extension

929
00:36:15,680 --> 00:36:18,000
again it'd be nice to standardize

930
00:36:18,000 --> 00:36:19,839
the um

931
00:36:19,839 --> 00:36:21,359
having a

932
00:36:21,359 --> 00:36:24,480
a way of of responding to an invitation

933
00:36:24,480 --> 00:36:25,440
through

934
00:36:25,440 --> 00:36:28,079
some other mechanism such as the web

935
00:36:28,079 --> 00:36:30,160
and

936
00:36:30,160 --> 00:36:32,160
the the you know the current approach of

937
00:36:32,160 --> 00:36:33,599
adding

938
00:36:33,599 --> 00:36:34,480
um

939
00:36:34,480 --> 00:36:37,359
http bodies to the to the message it

940
00:36:37,359 --> 00:36:38,839
works sort

941
00:36:38,839 --> 00:36:42,640
of but um it'd be nice to standardize

942
00:36:42,640 --> 00:36:45,040
that i guess but i don't think i said

943
00:36:45,040 --> 00:36:46,400
that's something we necessarily have to

944
00:36:46,400 --> 00:36:47,760
deal with here

945
00:36:47,760 --> 00:36:51,119
um it's something we can add later

946
00:36:51,119 --> 00:36:52,960
i'd just like to see us

947
00:36:52,960 --> 00:36:55,280
get it working

948
00:36:55,280 --> 00:36:56,640
minimize

949
00:36:56,640 --> 00:36:59,200
js calendar so it does enough to do that

950
00:36:59,200 --> 00:37:02,720
and not try and anticipate

951
00:37:02,720 --> 00:37:04,560
some future scheduling method we don't

952
00:37:04,560 --> 00:37:05,680
have

953
00:37:05,680 --> 00:37:07,599
because it may not be adequate for that

954
00:37:07,599 --> 00:37:09,280
if there's multiple properties to deal

955
00:37:09,280 --> 00:37:10,800
with then it's simply not going to be

956
00:37:10,800 --> 00:37:13,839
adequate simply having another reply to

957
00:37:13,839 --> 00:37:16,320
address

958
00:37:17,440 --> 00:37:18,960
the i think the only thing we need to do

959
00:37:18,960 --> 00:37:21,040
with is identify the

960
00:37:21,040 --> 00:37:24,800
the um the recipient and and we're done

961
00:37:24,800 --> 00:37:28,000
that's all we have at the moment

962
00:37:30,320 --> 00:37:32,320
just popping myself in the queue with uh

963
00:37:32,320 --> 00:37:35,119
with my chair hat off here i think i'd

964
00:37:35,119 --> 00:37:37,599
definitely say the the point in having a

965
00:37:37,599 --> 00:37:40,079
single object that all the reply to is

966
00:37:40,079 --> 00:37:41,119
inside

967
00:37:41,119 --> 00:37:42,560
so then you can

968
00:37:42,560 --> 00:37:44,960
patch overwrite whatever happens to be

969
00:37:44,960 --> 00:37:46,800
in it with new replacements without

970
00:37:46,800 --> 00:37:48,400
needing to keep a full list of all the

971
00:37:48,400 --> 00:37:50,880
possible fields in future um so having

972
00:37:50,880 --> 00:37:52,960
that one level of indirection is

973
00:37:52,960 --> 00:37:55,040
still makes a nice easy extension point

974
00:37:55,040 --> 00:37:57,040
here even if we only need to find one

975
00:37:57,040 --> 00:37:58,480
thing inside it

976
00:37:58,480 --> 00:38:00,000
and i think that that might be the way

977
00:38:00,000 --> 00:38:02,079
to say we only define one item and that

978
00:38:02,079 --> 00:38:03,520
maps directly to whatever's in our

979
00:38:03,520 --> 00:38:04,560
calendar

980
00:38:04,560 --> 00:38:06,240
but we have a future extension point

981
00:38:06,240 --> 00:38:09,520
that's quite convenient there

982
00:38:10,160 --> 00:38:13,040
yeah you i mean so so with mike's point

983
00:38:13,040 --> 00:38:15,040
about not being sure whether it

984
00:38:15,040 --> 00:38:16,880
it'll be rich enough i you know we could

985
00:38:16,880 --> 00:38:19,280
say

986
00:38:19,280 --> 00:38:20,720
yeah the values are currently defined to

987
00:38:20,720 --> 00:38:22,640
be your eyes we could relax that say

988
00:38:22,640 --> 00:38:24,240
they could be anything

989
00:38:24,240 --> 00:38:25,119
i

990
00:38:25,119 --> 00:38:26,240
uh

991
00:38:26,240 --> 00:38:27,680
i don't know we necessarily need to do

992
00:38:27,680 --> 00:38:29,599
that um

993
00:38:29,599 --> 00:38:30,480
but

994
00:38:30,480 --> 00:38:33,119
that's that's an option um that would

995
00:38:33,119 --> 00:38:34,960
make it harder

996
00:38:34,960 --> 00:38:36,800
by saying they have to be your eyes we i

997
00:38:36,800 --> 00:38:39,119
said that the advantage is that a client

998
00:38:39,119 --> 00:38:40,240
can check

999
00:38:40,240 --> 00:38:41,520
is there

1000
00:38:41,520 --> 00:38:44,320
a match between this property and

1001
00:38:44,320 --> 00:38:46,640
a uri i know about identifies this user

1002
00:38:46,640 --> 00:38:47,760
without having to know anything about

1003
00:38:47,760 --> 00:38:49,280
how the uri

1004
00:38:49,280 --> 00:38:51,200
works without how that scheduling method

1005
00:38:51,200 --> 00:38:52,240
works so

1006
00:38:52,240 --> 00:38:54,320
i said you're you're dis

1007
00:38:54,320 --> 00:38:55,920
you're not coupling the

1008
00:38:55,920 --> 00:38:57,280
ability to add

1009
00:38:57,280 --> 00:38:58,960
this other uh

1010
00:38:58,960 --> 00:39:00,640
method to the

1011
00:39:00,640 --> 00:39:04,000
to the client knowing about it

1012
00:39:04,960 --> 00:39:07,680
um i would like to clarify

1013
00:39:07,680 --> 00:39:08,880
um

1014
00:39:08,880 --> 00:39:11,359
what i would like to first state one

1015
00:39:11,359 --> 00:39:12,800
point and then i would outcast for

1016
00:39:12,800 --> 00:39:15,680
clarification so the point i'm i want to

1017
00:39:15,680 --> 00:39:18,480
make is um given the charter and also

1018
00:39:18,480 --> 00:39:20,400
practically all practical purposes i

1019
00:39:20,400 --> 00:39:23,359
think it's necessary that

1020
00:39:23,359 --> 00:39:25,839
scheduling with js calendar i calendar

1021
00:39:25,839 --> 00:39:28,000
should be should be seamless there

1022
00:39:28,000 --> 00:39:30,320
should be no source for implementers to

1023
00:39:30,320 --> 00:39:32,400
mess this up because this is really the

1024
00:39:32,400 --> 00:39:34,560
core of the specification

1025
00:39:34,560 --> 00:39:37,440
um so that's why i'm so much against um

1026
00:39:37,440 --> 00:39:39,839
heuristics

1027
00:39:39,839 --> 00:39:41,599
so whatever we come up with it needs to

1028
00:39:41,599 --> 00:39:43,119
be absolutely critically clear what to

1029
00:39:43,119 --> 00:39:45,359
do um and it

1030
00:39:45,359 --> 00:39:47,760
it should be simple to implement

1031
00:39:47,760 --> 00:39:49,760
what i wanted to ask for clarification

1032
00:39:49,760 --> 00:39:51,839
is um neil um

1033
00:39:51,839 --> 00:39:54,160
what do you described before that the um

1034
00:39:54,160 --> 00:39:57,040
like the client might not necessarily

1035
00:39:57,040 --> 00:39:58,720
know the scheduling methods of the

1036
00:39:58,720 --> 00:40:00,640
people they invite

1037
00:40:00,640 --> 00:40:02,560
um

1038
00:40:02,560 --> 00:40:04,400
so that this kind of

1039
00:40:04,400 --> 00:40:06,240
is the same thing like in icalendar

1040
00:40:06,240 --> 00:40:09,280
currently that the uri both acts as an

1041
00:40:09,280 --> 00:40:13,040
identifier like as of the user but also

1042
00:40:13,040 --> 00:40:16,079
as a way to reach that user and

1043
00:40:16,079 --> 00:40:17,839
wouldn't that speak more of what you

1044
00:40:17,839 --> 00:40:20,480
were saying to like splitting this so um

1045
00:40:20,480 --> 00:40:22,960
why why would i necessarily define the

1046
00:40:22,960 --> 00:40:26,560
imit method to identify someone and not

1047
00:40:26,560 --> 00:40:27,280
just

1048
00:40:27,280 --> 00:40:29,440
identify with the uri who i want to

1049
00:40:29,440 --> 00:40:30,880
contact and the server might have the

1050
00:40:30,880 --> 00:40:32,880
best idea idea

1051
00:40:32,880 --> 00:40:34,960
what to put then in the reply to or sent

1052
00:40:34,960 --> 00:40:38,280
to properties

1053
00:40:39,119 --> 00:40:41,520
um so i identify

1054
00:40:41,520 --> 00:40:43,760
that last minute

1055
00:40:43,760 --> 00:40:44,440
so um

1056
00:40:44,440 --> 00:40:47,280
[Music]

1057
00:40:47,280 --> 00:40:50,280
are wondering if we are conflating

1058
00:40:50,280 --> 00:40:53,520
identification of a participant

1059
00:40:53,520 --> 00:40:54,880
with their

1060
00:40:54,880 --> 00:40:58,240
uh scheduling method uris

1061
00:40:58,240 --> 00:41:00,800
which is what i calendar is doing

1062
00:41:00,800 --> 00:41:02,960
we definitely are just

1063
00:41:02,960 --> 00:41:05,359
yes i think to extend

1064
00:41:05,359 --> 00:41:07,680
i'm not sure we can get away

1065
00:41:07,680 --> 00:41:09,599
from no we i don't know i think about

1066
00:41:09,599 --> 00:41:12,560
this compatibility

1067
00:41:14,640 --> 00:41:16,880
that was that was where that was where i

1068
00:41:16,880 --> 00:41:17,680
actually

1069
00:41:17,680 --> 00:41:18,960
started to

1070
00:41:18,960 --> 00:41:20,560
experience difficulties with seeing how

1071
00:41:20,560 --> 00:41:23,440
this would work is is being able to

1072
00:41:23,440 --> 00:41:25,520
unequivocally identify

1073
00:41:25,520 --> 00:41:27,760
the the attendee we're dealing with the

1074
00:41:27,760 --> 00:41:29,359
participant

1075
00:41:29,359 --> 00:41:31,119
and um

1076
00:41:31,119 --> 00:41:34,880
and that was where what i wanted to um

1077
00:41:34,880 --> 00:41:37,599
simplify this to to ensure that that was

1078
00:41:37,599 --> 00:41:39,359
was the case that it looked to me it's

1079
00:41:39,359 --> 00:41:41,520
gonna be too easy for me to get a uh

1080
00:41:41,520 --> 00:41:42,800
invitation where i couldn't even

1081
00:41:42,800 --> 00:41:45,280
identify the uh the participant we're

1082
00:41:45,280 --> 00:41:48,599
talking about

1083
00:41:49,280 --> 00:41:50,720
well i think that's quite well defined

1084
00:41:50,720 --> 00:41:52,960
so i don't think that's a problem like i

1085
00:41:52,960 --> 00:41:54,960
i think

1086
00:41:54,960 --> 00:41:57,119
what we were saying about could we split

1087
00:41:57,119 --> 00:41:58,640
that is interesting i just don't know

1088
00:41:58,640 --> 00:42:00,079
that there is a way

1089
00:42:00,079 --> 00:42:03,760
to do that right now um

1090
00:42:03,760 --> 00:42:06,240
you know if

1091
00:42:06,240 --> 00:42:07,839
this is the problem of if i have an

1092
00:42:07,839 --> 00:42:11,040
event in my calendar how do i know which

1093
00:42:11,040 --> 00:42:13,359
one of the participants is

1094
00:42:13,359 --> 00:42:15,359
me so to speak

1095
00:42:15,359 --> 00:42:18,319
and the way we do it at the moment is

1096
00:42:18,319 --> 00:42:20,000
one of the

1097
00:42:20,000 --> 00:42:22,240
presumings added by mail to one of those

1098
00:42:22,240 --> 00:42:23,359
um

1099
00:42:23,359 --> 00:42:24,640
uh

1100
00:42:24,640 --> 00:42:26,400
mail to

1101
00:42:26,400 --> 00:42:28,240
uh send two things on the participant

1102
00:42:28,240 --> 00:42:30,960
matches an email address that i own

1103
00:42:30,960 --> 00:42:32,720
or possibly if you're using implicit

1104
00:42:32,720 --> 00:42:35,040
scheduling you know that this

1105
00:42:35,040 --> 00:42:36,720
uri matches

1106
00:42:36,720 --> 00:42:39,118
my own

1107
00:42:39,280 --> 00:42:41,359
yeah i think that this is something that

1108
00:42:41,359 --> 00:42:44,880
already was kind of trying to address in

1109
00:42:44,880 --> 00:42:45,920
the

1110
00:42:45,920 --> 00:42:49,280
new icon the properties rfc 7986 i think

1111
00:42:49,280 --> 00:42:52,000
it is where this this email parameter

1112
00:42:52,000 --> 00:42:54,160
right this was exactly meant to like you

1113
00:42:54,160 --> 00:42:56,720
can provide the email address of someone

1114
00:42:56,720 --> 00:42:58,480
who identifies them i think the

1115
00:42:58,480 --> 00:43:00,720
description was in a con in an address

1116
00:43:00,720 --> 00:43:02,960
book but that's not that's not

1117
00:43:02,960 --> 00:43:04,800
necessarily the address where you send

1118
00:43:04,800 --> 00:43:07,359
the imap to and i think this is exactly

1119
00:43:07,359 --> 00:43:09,680
going in the same direction um if there

1120
00:43:09,680 --> 00:43:11,040
is the need

1121
00:43:11,040 --> 00:43:12,560
to separate scheduling from

1122
00:43:12,560 --> 00:43:14,960
identification because as you described

1123
00:43:14,960 --> 00:43:16,560
before you you really would expect the

1124
00:43:16,560 --> 00:43:19,200
server to better know the various

1125
00:43:19,200 --> 00:43:22,400
scheduling methods rather the client

1126
00:43:22,400 --> 00:43:24,160
and at the moment it seems not so clear

1127
00:43:24,160 --> 00:43:27,920
to me um if as a client implementer one

1128
00:43:27,920 --> 00:43:28,720
what

1129
00:43:28,720 --> 00:43:31,200
what they would put into the reply to

1130
00:43:31,200 --> 00:43:33,599
are they expected to not they know all

1131
00:43:33,599 --> 00:43:35,200
the scheduling methods for the

1132
00:43:35,200 --> 00:43:38,160
participants no i mean the

1133
00:43:38,160 --> 00:43:40,160
recommendation in the jmf spec is they

1134
00:43:40,160 --> 00:43:42,000
do not set a reply to the server sets it

1135
00:43:42,000 --> 00:43:43,359
when you create it and the server can

1136
00:43:43,359 --> 00:43:45,359
put in any methods it knows about if the

1137
00:43:45,359 --> 00:43:47,280
client wants to it can create an

1138
00:43:47,280 --> 00:43:49,440
explicit one um

1139
00:43:49,440 --> 00:43:50,800
you know wants to save whatever we can

1140
00:43:50,800 --> 00:43:52,560
reply to this way and i know this is

1141
00:43:52,560 --> 00:43:54,480
going to work but the recommendation is

1142
00:43:54,480 --> 00:43:56,640
they don't set it in the services

1143
00:43:56,640 --> 00:43:58,240
yeah but it's the same for send tool

1144
00:43:58,240 --> 00:44:00,160
right for cento you need like to say

1145
00:44:00,160 --> 00:44:02,720
this is going to be so

1146
00:44:02,720 --> 00:44:03,760
sure but

1147
00:44:03,760 --> 00:44:05,520
for your send to

1148
00:44:05,520 --> 00:44:07,280
um again you get those from the server

1149
00:44:07,280 --> 00:44:08,880
the server says here's the identity so

1150
00:44:08,880 --> 00:44:09,760
to you

1151
00:44:09,760 --> 00:44:11,280
for each of these identities this is the

1152
00:44:11,280 --> 00:44:13,200
center object you just put this object

1153
00:44:13,200 --> 00:44:15,040
in verbatim and that may have whatever

1154
00:44:15,040 --> 00:44:16,400
scheduling methods

1155
00:44:16,400 --> 00:44:17,200
the

1156
00:44:17,200 --> 00:44:19,520
server knows how it's going to receive

1157
00:44:19,520 --> 00:44:21,599
and so in both cases the client doesn't

1158
00:44:21,599 --> 00:44:22,400
have to know

1159
00:44:22,400 --> 00:44:24,560
how those protocols work which the

1160
00:44:24,560 --> 00:44:26,480
server just says here's the value to use

1161
00:44:26,480 --> 00:44:28,560
what the client needs to know is i can

1162
00:44:28,560 --> 00:44:30,880
know that this user is this participant

1163
00:44:30,880 --> 00:44:34,079
by matching a uri in the send to with

1164
00:44:34,079 --> 00:44:36,240
one of the uis in the send to for that

1165
00:44:36,240 --> 00:44:38,079
identity that user

1166
00:44:38,079 --> 00:44:42,160
yeah but now it's multiple uris right so

1167
00:44:42,160 --> 00:44:44,079
yeah you know that

1168
00:44:44,079 --> 00:44:46,800
let's look through

1169
00:44:47,359 --> 00:44:49,440
yeah so

1170
00:44:49,440 --> 00:44:51,760
at the moment i i i get the impression

1171
00:44:51,760 --> 00:44:55,359
that we haven't progressed from the

1172
00:44:55,359 --> 00:44:58,240
state of um consensus or non-existence

1173
00:44:58,240 --> 00:45:01,759
of consensus from the mailing list

1174
00:45:03,599 --> 00:45:05,440
i don't know if

1175
00:45:05,440 --> 00:45:06,880
i don't know how to proceed currently

1176
00:45:06,880 --> 00:45:08,079
with that

1177
00:45:08,079 --> 00:45:10,079
um

1178
00:45:10,079 --> 00:45:11,920
i'll write up a bit more for the mailing

1179
00:45:11,920 --> 00:45:13,440
list i meant that for the meeting and

1180
00:45:13,440 --> 00:45:15,599
didn't get a chance as i really like

1181
00:45:15,599 --> 00:45:17,119
just kind of

1182
00:45:17,119 --> 00:45:18,480
trying to make what we talked about

1183
00:45:18,480 --> 00:45:21,200
today you know clearer because it's easy

1184
00:45:21,200 --> 00:45:22,319
when you see it written down i'm trying

1185
00:45:22,319 --> 00:45:23,440
to think about it

1186
00:45:23,440 --> 00:45:25,280
um

1187
00:45:25,280 --> 00:45:28,000
maybe that will help

1188
00:45:28,720 --> 00:45:31,720
mike

1189
00:45:33,839 --> 00:45:35,520
um no i

1190
00:45:35,520 --> 00:45:36,960
i don't i don't see that we've

1191
00:45:36,960 --> 00:45:38,800
progressed

1192
00:45:38,800 --> 00:45:41,800
um

1193
00:45:47,119 --> 00:45:48,880
uh so

1194
00:45:48,880 --> 00:45:51,440
i hesitate to offer a number four uh

1195
00:45:51,440 --> 00:45:52,720
both because it's a number four and

1196
00:45:52,720 --> 00:45:54,480
because i may be deadly wrong this is

1197
00:45:54,480 --> 00:45:55,760
rick sickness

1198
00:45:55,760 --> 00:45:57,280
um

1199
00:45:57,280 --> 00:45:59,280
it sounds like part of the problem here

1200
00:45:59,280 --> 00:46:02,240
is the conflation of identity and reply

1201
00:46:02,240 --> 00:46:03,760
mechanism

1202
00:46:03,760 --> 00:46:06,480
and right now we have a single value uh

1203
00:46:06,480 --> 00:46:08,560
attendee who is you know we

1204
00:46:08,560 --> 00:46:11,680
conventionally always use their mail to

1205
00:46:11,680 --> 00:46:14,000
i wonder if the this a simpler answer is

1206
00:46:14,000 --> 00:46:16,000
to always have that with the assumption

1207
00:46:16,000 --> 00:46:17,839
that if you only have that that is your

1208
00:46:17,839 --> 00:46:19,680
single reply mechanism you can always

1209
00:46:19,680 --> 00:46:21,200
reply with imip

1210
00:46:21,200 --> 00:46:23,040
uh to the attendee as you said like

1211
00:46:23,040 --> 00:46:25,520
their email address so instead of saying

1212
00:46:25,520 --> 00:46:27,440
add an email property which is their

1213
00:46:27,440 --> 00:46:29,040
address book email

1214
00:46:29,040 --> 00:46:32,079
and the organizers addresses the the

1215
00:46:32,079 --> 00:46:34,560
reply to we say the the field that is

1216
00:46:34,560 --> 00:46:36,960
there now which is doing two jobs that's

1217
00:46:36,960 --> 00:46:39,520
the default reply to for imep

1218
00:46:39,520 --> 00:46:42,160
and if you wish you can supply alternate

1219
00:46:42,160 --> 00:46:44,560
reply mechanisms this is the current

1220
00:46:44,560 --> 00:46:46,800
replied to which is these are these are

1221
00:46:46,800 --> 00:46:48,960
alternates and then to get rid of this

1222
00:46:48,960 --> 00:46:50,160
heuristic

1223
00:46:50,160 --> 00:46:52,079
i would suggest replacing the use of an

1224
00:46:52,079 --> 00:46:54,480
object with an array and you can put

1225
00:46:54,480 --> 00:46:56,800
them in the recipient's preferred order

1226
00:46:56,800 --> 00:46:58,560
or the server's preferred order in

1227
00:46:58,560 --> 00:47:00,640
multi-part alternative style

1228
00:47:00,640 --> 00:47:02,160
so you could say look if there's nothing

1229
00:47:02,160 --> 00:47:05,040
here imip will work you have my mail too

1230
00:47:05,040 --> 00:47:06,480
and if i didn't use a mail to as my

1231
00:47:06,480 --> 00:47:08,240
identifier uri

1232
00:47:08,240 --> 00:47:09,599
what am i doing

1233
00:47:09,599 --> 00:47:11,680
and if we have other mechanisms that we

1234
00:47:11,680 --> 00:47:14,240
would like transport to upgrade to we

1235
00:47:14,240 --> 00:47:16,160
can supply those as alternative

1236
00:47:16,160 --> 00:47:18,960
preferential methods so this is this is

1237
00:47:18,960 --> 00:47:20,800
an idea shot from the hip but i haven't

1238
00:47:20,800 --> 00:47:22,559
been able to see why it's a terrible one

1239
00:47:22,559 --> 00:47:25,559
yet

1240
00:47:26,079 --> 00:47:27,359
so the main difference there is this is

1241
00:47:27,359 --> 00:47:30,160
very rather an object

1242
00:47:30,160 --> 00:47:32,319
sorry

1243
00:47:32,319 --> 00:47:33,599
it's the main difference just that it's

1244
00:47:33,599 --> 00:47:35,040
an array or is there a different another

1245
00:47:35,040 --> 00:47:37,119
different side missing there

1246
00:47:37,119 --> 00:47:38,400
saying

1247
00:47:38,400 --> 00:47:40,319
the the other difference is that

1248
00:47:40,319 --> 00:47:42,960
unless i misremember js calendar that

1249
00:47:42,960 --> 00:47:45,680
we're pulling out the need for reply to

1250
00:47:45,680 --> 00:47:48,400
to fall back to a single identifier that

1251
00:47:48,400 --> 00:47:50,480
is on uh that's

1252
00:47:50,480 --> 00:47:53,839
it's on the data

1253
00:47:55,920 --> 00:47:57,020
but for this um

1254
00:47:57,020 --> 00:47:58,720
[Music]

1255
00:47:58,720 --> 00:48:00,720
i would understand that so we can't do

1256
00:48:00,720 --> 00:48:03,440
that with itip as it is right now so we

1257
00:48:03,440 --> 00:48:06,400
would need i mean

1258
00:48:12,079 --> 00:48:15,119
currently at the moment is um

1259
00:48:15,119 --> 00:48:19,040
what do we need to provide to to make

1260
00:48:19,040 --> 00:48:21,760
it in interoperate with the current eye

1261
00:48:21,760 --> 00:48:24,319
tip over with i calendar yeah method and

1262
00:48:24,319 --> 00:48:25,200
of course

1263
00:48:25,200 --> 00:48:27,280
we can build something on top but we

1264
00:48:27,280 --> 00:48:29,839
need to extend it um

1265
00:48:29,839 --> 00:48:31,680
but if i understood correctly what you

1266
00:48:31,680 --> 00:48:33,599
were saying like we there are a couple

1267
00:48:33,599 --> 00:48:35,760
of scheduling addresses and then there

1268
00:48:35,760 --> 00:48:37,440
is one where you say this is the

1269
00:48:37,440 --> 00:48:39,119
preferred and this is what

1270
00:48:39,119 --> 00:48:40,640
the preferred one also should go into

1271
00:48:40,640 --> 00:48:42,240
the eye tip right

1272
00:48:42,240 --> 00:48:44,079
no no i don't well we can follow those

1273
00:48:44,079 --> 00:48:45,599
up on the list where i can write it down

1274
00:48:45,599 --> 00:48:47,440
very clear but my suggestion is we have

1275
00:48:47,440 --> 00:48:50,240
a canonical identifier that's what we're

1276
00:48:50,240 --> 00:48:52,240
currently using the single uri for the

1277
00:48:52,240 --> 00:48:54,160
user which is which is now the

1278
00:48:54,160 --> 00:48:56,800
identifier for the user and can be used

1279
00:48:56,800 --> 00:48:58,960
for itip if nothing for sending imap

1280
00:48:58,960 --> 00:49:01,119
right if it's mailed to and nothing else

1281
00:49:01,119 --> 00:49:04,559
is present but to offer an upgrade path

1282
00:49:04,559 --> 00:49:07,680
to to richer forms of reply than imip

1283
00:49:07,680 --> 00:49:09,520
allows there can be a list of

1284
00:49:09,520 --> 00:49:11,599
alternative paths i'll write something

1285
00:49:11,599 --> 00:49:16,079
up but i i think i've called it yeah i

1286
00:49:16,079 --> 00:49:17,680
think i get it so

1287
00:49:17,680 --> 00:49:19,359
just as a point here we have 10 minutes

1288
00:49:19,359 --> 00:49:21,839
left in the session we have uh six more

1289
00:49:21,839 --> 00:49:24,160
slides on this plus task so let's not

1290
00:49:24,160 --> 00:49:27,200
spend too much longer on this

1291
00:49:27,280 --> 00:49:29,280
okay oh it should probably take the rest

1292
00:49:29,280 --> 00:49:31,599
but can

1293
00:49:31,599 --> 00:49:34,079
yeah so real quick um i originally stood

1294
00:49:34,079 --> 00:49:36,319
up to basically

1295
00:49:36,319 --> 00:49:38,240
thumbs up what ron and mike said earlier

1296
00:49:38,240 --> 00:49:39,119
and

1297
00:49:39,119 --> 00:49:42,079
partially what rick just said so

1298
00:49:42,079 --> 00:49:43,280
i think there's three points we need to

1299
00:49:43,280 --> 00:49:45,760
look at we need to preserve the

1300
00:49:45,760 --> 00:49:47,520
identifier in the attendee or the

1301
00:49:47,520 --> 00:49:49,599
organizer which may or may not be a mail

1302
00:49:49,599 --> 00:49:51,040
to uri

1303
00:49:51,040 --> 00:49:52,800
if it's if it's a url or something else

1304
00:49:52,800 --> 00:49:54,160
we need to

1305
00:49:54,160 --> 00:49:56,480
preserve the mail property it should be

1306
00:49:56,480 --> 00:49:58,000
a mail parameter because that's the

1307
00:49:58,000 --> 00:49:59,760
address we actually need to use

1308
00:49:59,760 --> 00:50:02,240
for itunes i'm with mike on this there's

1309
00:50:02,240 --> 00:50:04,000
no distinction between itip and imip

1310
00:50:04,000 --> 00:50:05,680
they're both the same thing that's the

1311
00:50:05,680 --> 00:50:07,520
address currently being used and as

1312
00:50:07,520 --> 00:50:09,200
braun said i think we should

1313
00:50:09,200 --> 00:50:11,599
allow this to be extensible

1314
00:50:11,599 --> 00:50:13,680
but as mike said let's not try to jam

1315
00:50:13,680 --> 00:50:15,119
something in there now because we don't

1316
00:50:15,119 --> 00:50:16,960
know what might be coming down the road

1317
00:50:16,960 --> 00:50:18,160
and whatever we come up with now might

1318
00:50:18,160 --> 00:50:19,680
be insufficient

1319
00:50:19,680 --> 00:50:21,839
i think that's a fairly straightforward

1320
00:50:21,839 --> 00:50:23,280
way forward whether we're making an

1321
00:50:23,280 --> 00:50:25,280
object or an array

1322
00:50:25,280 --> 00:50:27,280
agnostic on that i don't really care

1323
00:50:27,280 --> 00:50:30,559
either way yep i agree

1324
00:50:30,880 --> 00:50:33,920
uh next slide please

1325
00:50:35,599 --> 00:50:37,680
um okay send buyer make this quick uh so

1326
00:50:37,680 --> 00:50:39,520
there is it sent by property property's

1327
00:50:39,520 --> 00:50:41,680
calendar defined to be the email address

1328
00:50:41,680 --> 00:50:43,839
of the the from header from the email

1329
00:50:43,839 --> 00:50:46,480
that this uh this calendaring data got

1330
00:50:46,480 --> 00:50:47,760
received from

1331
00:50:47,760 --> 00:50:49,680
there is a send by parameter on an

1332
00:50:49,680 --> 00:50:51,760
attendee in i calendar

1333
00:50:51,760 --> 00:50:54,960
which is defined differently

1334
00:50:54,960 --> 00:50:57,440
i wonder if we should rename sent by in

1335
00:50:57,440 --> 00:51:00,480
chairs calendar to send from because

1336
00:51:00,480 --> 00:51:01,920
it doesn't

1337
00:51:01,920 --> 00:51:03,760
name have to use the same name for

1338
00:51:03,760 --> 00:51:05,599
something different

1339
00:51:05,599 --> 00:51:07,040
and the question is also do we need to

1340
00:51:07,040 --> 00:51:09,599
preserve descent by parameter from

1341
00:51:09,599 --> 00:51:11,920
i calendar on a participant

1342
00:51:11,920 --> 00:51:13,280
i would say yes

1343
00:51:13,280 --> 00:51:17,359
are any quick opinions on that

1344
00:51:17,760 --> 00:51:20,160
okay i hear thumbs up perfect

1345
00:51:20,160 --> 00:51:21,359
um

1346
00:51:21,359 --> 00:51:24,078
next one please

1347
00:51:24,480 --> 00:51:25,359
um

1348
00:51:25,359 --> 00:51:27,680
okay so very quick um

1349
00:51:27,680 --> 00:51:30,240
we propose to uh change the vendor

1350
00:51:30,240 --> 00:51:32,240
extension naming schemes uh currently

1351
00:51:32,240 --> 00:51:34,079
it's defined to be a domain and the

1352
00:51:34,079 --> 00:51:35,680
property name

1353
00:51:35,680 --> 00:51:37,680
while mapping by defining the standard

1354
00:51:37,680 --> 00:51:38,960
mapping for

1355
00:51:38,960 --> 00:51:40,640
js kind of icon that we realized we

1356
00:51:40,640 --> 00:51:42,480
don't have a domain we can we are

1357
00:51:42,480 --> 00:51:44,240
authorized to use

1358
00:51:44,240 --> 00:51:46,640
so uh we want to change the extension

1359
00:51:46,640 --> 00:51:48,640
mechanism on the next slide there is the

1360
00:51:48,640 --> 00:51:50,319
proposal

1361
00:51:50,319 --> 00:51:54,640
we propose to allow any https uri

1362
00:51:54,640 --> 00:51:56,480
which should point to the definition of

1363
00:51:56,480 --> 00:51:58,800
the property

1364
00:51:58,800 --> 00:52:01,200
this any any vendor extend vendor can

1365
00:52:01,200 --> 00:52:04,240
use for extension we also allow uris in

1366
00:52:04,240 --> 00:52:06,800
the urn namespace if they use the itf

1367
00:52:06,800 --> 00:52:08,960
namespace so basically for every

1368
00:52:08,960 --> 00:52:10,800
property it will be self-documented in

1369
00:52:10,800 --> 00:52:14,559
which i receive they were defined

1370
00:52:16,839 --> 00:52:20,160
any all right that was quick thank you

1371
00:52:20,160 --> 00:52:22,400
sorry yours okay

1372
00:52:22,400 --> 00:52:25,520
um last point uh at last itf we were

1373
00:52:25,520 --> 00:52:28,079
saying um that unknown properties should

1374
00:52:28,079 --> 00:52:30,880
be preserved so that that unknown

1375
00:52:30,880 --> 00:52:32,960
properties in js calendar should not

1376
00:52:32,960 --> 00:52:35,839
lead to clients invalid invalidate the

1377
00:52:35,839 --> 00:52:38,480
js calendar data that was mainly because

1378
00:52:38,480 --> 00:52:40,240
we were saying okay maybe some

1379
00:52:40,240 --> 00:52:42,000
implementations will not keep up with

1380
00:52:42,000 --> 00:52:43,440
all the extensions

1381
00:52:43,440 --> 00:52:46,559
so currently they would reject legit js

1382
00:52:46,559 --> 00:52:48,720
calendar data

1383
00:52:48,720 --> 00:52:50,960
it turns out that we need specified

1384
00:52:50,960 --> 00:52:52,640
meter in the in

1385
00:52:52,640 --> 00:52:55,680
in the existing jsk and the rfc so we

1386
00:52:55,680 --> 00:52:58,640
are free to do whatever we want

1387
00:52:58,640 --> 00:53:01,520
there are two ways to deal with that

1388
00:53:01,520 --> 00:53:04,160
and the next slide is the first option

1389
00:53:04,160 --> 00:53:06,559
the first option would be to validate

1390
00:53:06,559 --> 00:53:08,720
known properties but

1391
00:53:08,720 --> 00:53:11,119
to demand that all others should be

1392
00:53:11,119 --> 00:53:13,599
ignored but stored

1393
00:53:13,599 --> 00:53:16,480
but this in my opinion can lead to name

1394
00:53:16,480 --> 00:53:18,400
squatting for example if you have a

1395
00:53:18,400 --> 00:53:21,359
vendor a using prop a

1396
00:53:21,359 --> 00:53:24,079
later on an rfc defines prop a but with

1397
00:53:24,079 --> 00:53:27,040
a different value type or semantics

1398
00:53:27,040 --> 00:53:28,400
there's going to be data with that

1399
00:53:28,400 --> 00:53:30,480
property already out there and we do not

1400
00:53:30,480 --> 00:53:32,319
want it because it would um

1401
00:53:32,319 --> 00:53:34,079
it would clash

1402
00:53:34,079 --> 00:53:37,200
we already have quite a lenient

1403
00:53:37,200 --> 00:53:39,839
way to add things to js calendar we have

1404
00:53:39,839 --> 00:53:41,760
expert review

1405
00:53:41,760 --> 00:53:45,359
and not specification review

1406
00:53:45,359 --> 00:53:47,520
but i would propose even something more

1407
00:53:47,520 --> 00:53:50,079
lenient so that vendors are encouraged

1408
00:53:50,079 --> 00:53:51,200
to

1409
00:53:51,200 --> 00:53:53,520
at least document their extensions and

1410
00:53:53,520 --> 00:53:56,720
this is on the next slide

1411
00:53:56,720 --> 00:53:58,800
i would like to propose that we

1412
00:53:58,800 --> 00:54:01,119
do not support any

1413
00:54:01,119 --> 00:54:02,960
unvendered

1414
00:54:02,960 --> 00:54:05,280
properties at all after we have defined

1415
00:54:05,280 --> 00:54:07,440
js calendar

1416
00:54:07,440 --> 00:54:09,440
implicitly all properties that do not

1417
00:54:09,440 --> 00:54:11,599
have have a prefix will be the

1418
00:54:11,599 --> 00:54:14,079
properties of js calendar biz

1419
00:54:14,079 --> 00:54:16,319
everything else will be prefixed either

1420
00:54:16,319 --> 00:54:20,720
by an https uri or by the urn of the rfc

1421
00:54:20,720 --> 00:54:23,440
that the extension is defined in

1422
00:54:23,440 --> 00:54:25,440
this way this is very similar to chain

1423
00:54:25,440 --> 00:54:27,599
map capabilities in a way

1424
00:54:27,599 --> 00:54:29,839
um it decreases the payload because we

1425
00:54:29,839 --> 00:54:31,760
have longer strings in a way

1426
00:54:31,760 --> 00:54:34,400
but um using complex types like i've

1427
00:54:34,400 --> 00:54:36,400
shown with the examples on the right

1428
00:54:36,400 --> 00:54:37,280
side

1429
00:54:37,280 --> 00:54:40,160
i think it would be worth it so that we

1430
00:54:40,160 --> 00:54:42,559
do not have any issue with name clashes

1431
00:54:42,559 --> 00:54:44,319
and hopefully

1432
00:54:44,319 --> 00:54:46,720
uh all the properties one sees are

1433
00:54:46,720 --> 00:54:50,960
self-documented in the payload

1434
00:54:50,960 --> 00:54:53,119
i don't think this deals with the issue

1435
00:54:53,119 --> 00:54:55,119
of

1436
00:54:55,119 --> 00:54:57,599
of um implementations getting out of

1437
00:54:57,599 --> 00:55:00,000
step with the i mean they may not be

1438
00:55:00,000 --> 00:55:02,319
unknown properties in the specification

1439
00:55:02,319 --> 00:55:04,240
there may just be unknown properties to

1440
00:55:04,240 --> 00:55:06,799
that particular implementation

1441
00:55:06,799 --> 00:55:07,599
yeah

1442
00:55:07,599 --> 00:55:12,079
so it'll be rejecting a perfectly valid

1443
00:55:12,400 --> 00:55:14,799
object because it simply doesn't know

1444
00:55:14,799 --> 00:55:17,280
about a property

1445
00:55:17,280 --> 00:55:18,799
but we already

1446
00:55:18,799 --> 00:55:20,559
we we

1447
00:55:20,559 --> 00:55:23,760
we require implementations to preserve

1448
00:55:23,760 --> 00:55:26,000
extension properties

1449
00:55:26,000 --> 00:55:28,720
we obviously require implementations to

1450
00:55:28,720 --> 00:55:30,799
implement the

1451
00:55:30,799 --> 00:55:32,480
js calendar spec

1452
00:55:32,480 --> 00:55:34,400
and there can be nothing else

1453
00:55:34,400 --> 00:55:37,280
uh in a js calendar data either an

1454
00:55:37,280 --> 00:55:38,880
extension properties from future

1455
00:55:38,880 --> 00:55:40,240
extensions

1456
00:55:40,240 --> 00:55:41,040
or

1457
00:55:41,040 --> 00:55:42,400
the ones that are defined in the

1458
00:55:42,400 --> 00:55:44,400
specification that the implementation is

1459
00:55:44,400 --> 00:55:47,440
expected to implement so

1460
00:55:47,440 --> 00:55:49,440
in that using this scheme

1461
00:55:49,440 --> 00:55:51,480
there can't be any

1462
00:55:51,480 --> 00:55:53,200
unprefixed

1463
00:55:53,200 --> 00:55:55,839
unknown property ever

1464
00:55:55,839 --> 00:55:57,920
so basically the properties we define in

1465
00:55:57,920 --> 00:55:59,359
this document are the only things that

1466
00:55:59,359 --> 00:56:00,839
can't start with a

1467
00:56:00,839 --> 00:56:02,960
url or an html yes

1468
00:56:02,960 --> 00:56:04,880
okay

1469
00:56:04,880 --> 00:56:05,680
um

1470
00:56:05,680 --> 00:56:06,559
so

1471
00:56:06,559 --> 00:56:08,319
i have questions around

1472
00:56:08,319 --> 00:56:10,400
patching and and

1473
00:56:10,400 --> 00:56:12,640
path objects with all the slashes that

1474
00:56:12,640 --> 00:56:14,079
are in

1475
00:56:14,079 --> 00:56:15,040
these

1476
00:56:15,040 --> 00:56:16,799
it's going to be very easy for people to

1477
00:56:16,799 --> 00:56:19,759
screw up the quoting

1478
00:56:20,240 --> 00:56:22,240
i'm not i'm not a fan

1479
00:56:22,240 --> 00:56:23,040
of

1480
00:56:23,040 --> 00:56:24,880
all those slashers i'm seeing in these

1481
00:56:24,880 --> 00:56:26,720
examples here given that

1482
00:56:26,720 --> 00:56:29,599
that's a special character in

1483
00:56:29,599 --> 00:56:32,160
in our patch syntax i mean we won't get

1484
00:56:32,160 --> 00:56:34,799
rid of all the slashes um i can see the

1485
00:56:34,799 --> 00:56:36,559
point you're raising

1486
00:56:36,559 --> 00:56:38,240
i was thinking of if we should say that

1487
00:56:38,240 --> 00:56:41,200
the h if it's not the urn the https

1488
00:56:41,200 --> 00:56:43,359
scheme is implicit so we would be back

1489
00:56:43,359 --> 00:56:47,839
again at domain name but with the path

1490
00:56:48,319 --> 00:56:50,799
yeah i mean

1491
00:56:51,359 --> 00:56:53,280
it's not hard to do if you're using you

1492
00:56:53,280 --> 00:56:54,240
know

1493
00:56:54,240 --> 00:56:56,000
not trying to do it by hand but if you

1494
00:56:56,000 --> 00:56:59,839
are then yes you could screw that up

1495
00:57:02,000 --> 00:57:03,920
so maybe um

1496
00:57:03,920 --> 00:57:06,400
we can separate

1497
00:57:06,400 --> 00:57:09,920
https domains from

1498
00:57:09,920 --> 00:57:12,400
which of the two options or other set

1499
00:57:12,400 --> 00:57:14,480
is option two something that people tend

1500
00:57:14,480 --> 00:57:17,680
to agree with other than me

1501
00:57:17,680 --> 00:57:20,160
are there any

1502
00:57:20,160 --> 00:57:21,760
would you see any reason not to do the

1503
00:57:21,760 --> 00:57:24,480
second option

1504
00:57:25,040 --> 00:57:26,480
which is um

1505
00:57:26,480 --> 00:57:27,599
saying that

1506
00:57:27,599 --> 00:57:28,720
only the

1507
00:57:28,720 --> 00:57:32,319
the only non vendor extended properties

1508
00:57:32,319 --> 00:57:34,079
in the js calendar are the ones in the

1509
00:57:34,079 --> 00:57:35,760
rfc that

1510
00:57:35,760 --> 00:57:37,839
this js kind of is

1511
00:57:37,839 --> 00:57:39,839
and everything else

1512
00:57:39,839 --> 00:57:42,559
is added as an extension properly with

1513
00:57:42,559 --> 00:57:43,839
the proper

1514
00:57:43,839 --> 00:57:46,079
rfc number where this property is

1515
00:57:46,079 --> 00:57:48,480
defined

1516
00:57:52,960 --> 00:57:54,799
i don't particularly like option two

1517
00:57:54,799 --> 00:57:57,200
because over time we're going to wind up

1518
00:57:57,200 --> 00:57:58,319
with

1519
00:57:58,319 --> 00:58:00,319
a lot lots of

1520
00:58:00,319 --> 00:58:02,799
url rfc number stuff everywhere it does

1521
00:58:02,799 --> 00:58:04,480
really bloat it and make it hard for

1522
00:58:04,480 --> 00:58:09,319
people to to deal with in future i think

1523
00:58:09,599 --> 00:58:11,119
this is ken my suggestion was going to

1524
00:58:11,119 --> 00:58:13,119
be if there are vendor

1525
00:58:13,119 --> 00:58:15,359
specific properties why can't they

1526
00:58:15,359 --> 00:58:17,520
define their own url space just like the

1527
00:58:17,520 --> 00:58:19,599
ietf has

1528
00:58:19,599 --> 00:58:21,440
and then yeah we can do that we get rid

1529
00:58:21,440 --> 00:58:22,880
of slashes that way

1530
00:58:22,880 --> 00:58:24,319
i just thought like it might not make

1531
00:58:24,319 --> 00:58:27,680
sense to have an isbn url in the

1532
00:58:27,680 --> 00:58:29,520
as a property but maybe it does i don't

1533
00:58:29,520 --> 00:58:31,680
know

1534
00:58:33,839 --> 00:58:35,040
but um

1535
00:58:35,040 --> 00:58:37,760
taking points i brought point into

1536
00:58:37,760 --> 00:58:39,280
account

1537
00:58:39,280 --> 00:58:42,079
for option one there is the unresolved

1538
00:58:42,079 --> 00:58:44,240
question of how to deal with name

1539
00:58:44,240 --> 00:58:45,599
squatting

1540
00:58:45,599 --> 00:58:46,720
of

1541
00:58:46,720 --> 00:58:49,119
non-vendor extended properties

1542
00:58:49,119 --> 00:58:50,559
given the time i don't think we will be

1543
00:58:50,559 --> 00:58:52,799
able to resolve that i'd just say that

1544
00:58:52,799 --> 00:58:55,760
you can't create non non um vendor

1545
00:58:55,760 --> 00:58:58,480
properties unless you specify an rfc

1546
00:58:58,480 --> 00:58:59,440
done

1547
00:58:59,440 --> 00:59:00,160
no

1548
00:59:00,160 --> 00:59:02,160
the issue here is

1549
00:59:02,160 --> 00:59:04,000
what would we expect implementations to

1550
00:59:04,000 --> 00:59:05,280
do

1551
00:59:05,280 --> 00:59:07,040
if they don't know about this property

1552
00:59:07,040 --> 00:59:09,040
but it's actually legit properly should

1553
00:59:09,040 --> 00:59:11,599
they reject it or not they don't know

1554
00:59:11,599 --> 00:59:13,680
they should do exactly as they would if

1555
00:59:13,680 --> 00:59:16,799
it had a urn rfc number on the front if

1556
00:59:16,799 --> 00:59:19,119
as far as they can yeah ignore it

1557
00:59:19,119 --> 00:59:20,720
just a string they don't know

1558
00:59:20,720 --> 00:59:23,440
so it will so it will mean that um

1559
00:59:23,440 --> 00:59:27,280
clients or services can store data

1560
00:59:27,280 --> 00:59:28,559
with

1561
00:59:28,559 --> 00:59:30,640
standard named properties that are not

1562
00:59:30,640 --> 00:59:33,200
standard and in the future the same same

1563
00:59:33,200 --> 00:59:35,119
standard property will come up and it

1564
00:59:35,119 --> 00:59:36,720
will have a different semantic or value

1565
00:59:36,720 --> 00:59:38,000
fight

1566
00:59:38,000 --> 00:59:39,839
that's going to happen whatever you do

1567
00:59:39,839 --> 00:59:42,078
alright

1568
00:59:42,240 --> 00:59:44,319
so i don't know it was said that it's

1569
00:59:44,319 --> 00:59:46,400
not going to happen or

1570
00:59:46,400 --> 00:59:48,559
yeah i i can't see how that's different

1571
00:59:48,559 --> 00:59:50,720
either way

1572
00:59:50,720 --> 00:59:52,480
it could happen it could happen now and

1573
00:59:52,480 --> 00:59:55,599
um and it's not uh it's not that much of

1574
00:59:55,599 --> 00:59:58,720
a problem but i think i think um

1575
00:59:58,720 --> 01:00:02,000
he can avoid it um

1576
01:00:02,000 --> 01:00:04,000
happening when people are trying to do

1577
01:00:04,000 --> 01:00:06,240
stuff legitimately by making a very easy

1578
01:00:06,240 --> 01:00:08,799
registration process or pre-registration

1579
01:00:08,799 --> 01:00:11,200
process for names

1580
01:00:11,200 --> 01:00:12,960
we already have expert review i don't

1581
01:00:12,960 --> 01:00:17,440
think we can make it more easy than that

1582
01:00:17,839 --> 01:00:18,720
okay

1583
01:00:18,720 --> 01:00:21,520
that might be enough

1584
01:00:21,760 --> 01:00:24,400
all right so then that's it for today

1585
01:00:24,400 --> 01:00:27,400
um

1586
01:00:32,319 --> 01:00:34,640
all right mike go for it

1587
01:00:34,640 --> 01:00:38,400
all right next next slide please

1588
01:00:38,480 --> 01:00:40,400
this came up as part of discussions we

1589
01:00:40,400 --> 01:00:42,480
were having about um

1590
01:00:42,480 --> 01:00:45,839
other possibilities for for the tasks um

1591
01:00:45,839 --> 01:00:47,280
specification

1592
01:00:47,280 --> 01:00:48,160
and

1593
01:00:48,160 --> 01:00:49,599
somebody pointed this out and i hadn't

1594
01:00:49,599 --> 01:00:53,760
even noticed this so it says in rfc 5545

1595
01:00:53,760 --> 01:00:55,119
the v2du

1596
01:00:55,119 --> 01:00:57,760
explicitly disallows a duration on its

1597
01:00:57,760 --> 01:00:59,280
own

1598
01:00:59,280 --> 01:01:00,640
um

1599
01:01:00,640 --> 01:01:03,599
so i hadn't noticed this bit of text

1600
01:01:03,599 --> 01:01:07,200
uh if you go to the next slide

1601
01:01:07,200 --> 01:01:08,400
um

1602
01:01:08,400 --> 01:01:10,400
okay just saying the same thing again

1603
01:01:10,400 --> 01:01:12,240
you've got to have a dt start like a

1604
01:01:12,240 --> 01:01:14,079
five five four five now two four four

1605
01:01:14,079 --> 01:01:16,880
five didn't say that it didn't have that

1606
01:01:16,880 --> 01:01:18,400
restriction

1607
01:01:18,400 --> 01:01:21,520
so that restriction got slipped in

1608
01:01:21,520 --> 01:01:23,440
when bernard rewrote

1609
01:01:23,440 --> 01:01:27,200
245 and produce five five four five

1610
01:01:27,200 --> 01:01:28,160
um

1611
01:01:28,160 --> 01:01:29,680
so

1612
01:01:29,680 --> 01:01:32,720
um can we move on the next slide i'll

1613
01:01:32,720 --> 01:01:34,160
see if i can move along here and get us

1614
01:01:34,160 --> 01:01:35,520
done in

1615
01:01:35,520 --> 01:01:39,839
um okay so 245 allows duration by itself

1616
01:01:39,839 --> 01:01:42,799
um and why does it matter it matters in

1617
01:01:42,799 --> 01:01:44,400
things like one of the things with our

1618
01:01:44,400 --> 01:01:47,599
aims with um with the the tasks update

1619
01:01:47,599 --> 01:01:49,440
was to try and make the more compatible

1620
01:01:49,440 --> 01:01:50,839
things like project

1621
01:01:50,839 --> 01:01:53,680
management and um

1622
01:01:53,680 --> 01:01:56,319
when you string tasks together

1623
01:01:56,319 --> 01:01:58,559
uh using temporal relationships it's

1624
01:01:58,559 --> 01:02:01,440
quite probable that the uh these

1625
01:02:01,440 --> 01:02:03,359
subsequent tasks in the in the chain

1626
01:02:03,359 --> 01:02:05,200
will not have a start because they

1627
01:02:05,200 --> 01:02:06,799
depend on

1628
01:02:06,799 --> 01:02:09,760
previous tasks in the chain you may know

1629
01:02:09,760 --> 01:02:12,400
um how long you you're going to allow

1630
01:02:12,400 --> 01:02:14,240
for the task but you don't necessarily

1631
01:02:14,240 --> 01:02:16,400
know exactly when it's going to start so

1632
01:02:16,400 --> 01:02:18,400
having a duration on its own is

1633
01:02:18,400 --> 01:02:20,799
perfectly reasonable there in fact i

1634
01:02:20,799 --> 01:02:23,039
think duration is perfectly reasonable

1635
01:02:23,039 --> 01:02:26,400
on a standalone task your if you don't

1636
01:02:26,400 --> 01:02:27,920
have a start

1637
01:02:27,920 --> 01:02:31,200
on a task or on end it just floats along

1638
01:02:31,200 --> 01:02:32,799
and it's supposed to appear there in

1639
01:02:32,799 --> 01:02:34,799
your in your ui

1640
01:02:34,799 --> 01:02:36,559
every day until you do something about

1641
01:02:36,559 --> 01:02:37,599
it

1642
01:02:37,599 --> 01:02:39,200
um

1643
01:02:39,200 --> 01:02:42,160
having a duration on it just as i say i

1644
01:02:42,160 --> 01:02:44,400
think this is going to take an hour

1645
01:02:44,400 --> 01:02:46,079
and it can just carry on floating along

1646
01:02:46,079 --> 01:02:48,480
like that i i believe that was probably

1647
01:02:48,480 --> 01:02:49,839
the intent

1648
01:02:49,839 --> 01:02:52,079
of two four four five

1649
01:02:52,079 --> 01:02:54,240
was you you want to know how long this

1650
01:02:54,240 --> 01:02:55,119
thing's going to take but you don't

1651
01:02:55,119 --> 01:02:56,559
necessarily know when you're going to do

1652
01:02:56,559 --> 01:02:58,160
it

1653
01:02:58,160 --> 01:02:59,440
so

1654
01:02:59,440 --> 01:03:00,880
um

1655
01:03:00,880 --> 01:03:03,680
next slide please

1656
01:03:03,680 --> 01:03:05,359
my suggestion is we simply drop the

1657
01:03:05,359 --> 01:03:06,640
constraint

1658
01:03:06,640 --> 01:03:07,680
um

1659
01:03:07,680 --> 01:03:09,200
because

1660
01:03:09,200 --> 01:03:10,799
there's no real indication of why it was

1661
01:03:10,799 --> 01:03:12,559
added i did have a call with bernard and

1662
01:03:12,559 --> 01:03:14,839
asked and he couldn't remember

1663
01:03:14,839 --> 01:03:17,359
um and

1664
01:03:17,359 --> 01:03:18,559
i don't think there's any discussion

1665
01:03:18,559 --> 01:03:21,280
online it just appeared there

1666
01:03:21,280 --> 01:03:23,839
and then i had a look i'd look at ical

1667
01:03:23,839 --> 01:03:26,400
for jay i think ken

1668
01:03:26,400 --> 01:03:28,319
is that ken wandering up there

1669
01:03:28,319 --> 01:03:31,599
uh looks at liv ical ice alpha j doesn't

1670
01:03:31,599 --> 01:03:33,520
doesn't apply the constraint most of

1671
01:03:33,520 --> 01:03:35,280
these libraries i suspect were written

1672
01:03:35,280 --> 01:03:37,839
around two four four five times and up

1673
01:03:37,839 --> 01:03:39,599
and they they

1674
01:03:39,599 --> 01:03:41,520
weren't changed for this thing so i'm

1675
01:03:41,520 --> 01:03:45,599
not sure it's going to cause any problem

1676
01:03:45,599 --> 01:03:48,000
family so this is yeah yeah so um i

1677
01:03:48,000 --> 01:03:49,760
agree with mike's assessment i also

1678
01:03:49,760 --> 01:03:50,799
believe

1679
01:03:50,799 --> 01:03:54,799
that this text crept into 545

1680
01:03:54,799 --> 01:03:56,160
by mistake

1681
01:03:56,160 --> 01:03:58,400
and duration should be allowed by itself

1682
01:03:58,400 --> 01:04:00,319
uh which brings up the question of what

1683
01:04:00,319 --> 01:04:02,079
do libraries currently do with would

1684
01:04:02,079 --> 01:04:03,680
they choke if it saw a duration while

1685
01:04:03,680 --> 01:04:04,960
the dt start

1686
01:04:04,960 --> 01:04:06,799
uh i did check lib ical which i'm a

1687
01:04:06,799 --> 01:04:09,839
maintainer of it does not enforce dt

1688
01:04:09,839 --> 01:04:11,760
start with duration presumably because

1689
01:04:11,760 --> 01:04:14,240
it was based on two four four five and

1690
01:04:14,240 --> 01:04:16,160
it's been very minimally updated as

1691
01:04:16,160 --> 01:04:18,079
required with five four pro five

1692
01:04:18,079 --> 01:04:21,039
that being said i'm not sure

1693
01:04:21,039 --> 01:04:23,680
if we can rewrite this

1694
01:04:23,680 --> 01:04:26,720
and just drop it uh wholesale we may

1695
01:04:26,720 --> 01:04:28,480
have to talk to our ad

1696
01:04:28,480 --> 01:04:29,760
to see

1697
01:04:29,760 --> 01:04:31,280
i think that's the next

1698
01:04:31,280 --> 01:04:34,160
move to the next slide

1699
01:04:35,599 --> 01:04:36,880
yeah there we go

1700
01:04:36,880 --> 01:04:38,240
i don't know what we do about it is it

1701
01:04:38,240 --> 01:04:40,640
an errata or is it an update

1702
01:04:40,640 --> 01:04:41,760
yes

1703
01:04:41,760 --> 01:04:43,119
exactly which which is which is why i

1704
01:04:43,119 --> 01:04:44,240
think we probably need to talk to our

1705
01:04:44,240 --> 01:04:47,599
a.d and i already have something with uh

1706
01:04:47,599 --> 01:04:48,880
with read card i need to talk to him

1707
01:04:48,880 --> 01:04:50,160
about tomorrow night so i'll bring this

1708
01:04:50,160 --> 01:04:51,200
up with him

1709
01:04:51,200 --> 01:04:55,760
and uh see what his opinions are

1710
01:04:55,760 --> 01:04:58,000
yeah

1711
01:04:58,240 --> 01:04:59,520
i mean clearly something was in

1712
01:04:59,520 --> 01:05:01,039
somebody's mind when they added this

1713
01:05:01,039 --> 01:05:03,760
it's probably bernard's mind um

1714
01:05:03,760 --> 01:05:04,880
and

1715
01:05:04,880 --> 01:05:07,039
and he added it i don't know why

1716
01:05:07,039 --> 01:05:08,799
um

1717
01:05:08,799 --> 01:05:12,000
and i don't think he does now

1718
01:05:16,160 --> 01:05:18,000
so i think i think that was i think that

1719
01:05:18,000 --> 01:05:19,599
was my last slide

1720
01:05:19,599 --> 01:05:21,599
i

1721
01:05:21,599 --> 01:05:21,839
just think

1722
01:05:21,839 --> 01:05:24,640
add one more point so um yes it was

1723
01:05:24,640 --> 01:05:27,440
added in an intermediate draft

1724
01:05:27,440 --> 01:05:29,359
and it is not mentioned as one of the

1725
01:05:29,359 --> 01:05:32,799
changes in the appendix of 545. so

1726
01:05:32,799 --> 01:05:34,480
oh yes

1727
01:05:34,480 --> 01:05:36,079
i could find no traffic on the mailing

1728
01:05:36,079 --> 01:05:37,039
list

1729
01:05:37,039 --> 01:05:39,839
with discussion so my gut feeling is

1730
01:05:39,839 --> 01:05:42,640
this was some kind of copy and paste

1731
01:05:42,640 --> 01:05:43,760
mistake

1732
01:05:43,760 --> 01:05:46,160
that wasn't even noticed uh in review

1733
01:05:46,160 --> 01:05:48,240
and neither by the author or by the

1734
01:05:48,240 --> 01:05:51,558
working group

1735
01:05:57,440 --> 01:05:59,680
so this is yours i just want to state

1736
01:05:59,680 --> 01:06:00,799
that

1737
01:06:00,799 --> 01:06:02,559
it might also be relevant for mapping

1738
01:06:02,559 --> 01:06:04,480
between icalendar and js calendar

1739
01:06:04,480 --> 01:06:06,559
because js calendar does not

1740
01:06:06,559 --> 01:06:08,880
and for you can also have a duration on

1741
01:06:08,880 --> 01:06:11,119
its own there yeah yeah that's where

1742
01:06:11,119 --> 01:06:13,520
that's where it came up and i was i um

1743
01:06:13,520 --> 01:06:15,599
there was a lot of talking across

1744
01:06:15,599 --> 01:06:17,280
purposes because i hadn't realized that

1745
01:06:17,280 --> 01:06:22,880
the constraint was there in in 5545

1746
01:06:27,280 --> 01:06:29,760
all right um we're also already over

1747
01:06:29,760 --> 01:06:31,839
time is there anything else people want

1748
01:06:31,839 --> 01:06:34,240
to do before we we let this go i mean i

1749
01:06:34,240 --> 01:06:35,520
guess this just has to go to the area

1750
01:06:35,520 --> 01:06:38,319
director but we're all keen to lose the

1751
01:06:38,319 --> 01:06:40,400
restriction if we can

1752
01:06:40,400 --> 01:06:41,359
good

1753
01:06:41,359 --> 01:06:44,359
yes

1754
01:06:57,119 --> 01:06:58,799
all right our area director is

1755
01:06:58,799 --> 01:07:00,720
officially francesca for this working

1756
01:07:00,720 --> 01:07:02,960
group um but obviously she's on leave at

1757
01:07:02,960 --> 01:07:04,160
the moment so i guess we talked to

1758
01:07:04,160 --> 01:07:05,599
murray

1759
01:07:05,599 --> 01:07:07,680
for now kenya were going to

1760
01:07:07,680 --> 01:07:10,078
talk to him

1761
01:07:11,599 --> 01:07:12,839
cool

1762
01:07:12,839 --> 01:07:16,000
perfect all right thanks everybody um

1763
01:07:16,000 --> 01:07:17,440
we're done

1764
01:07:17,440 --> 01:07:21,119
enjoy the rest of your day last week

1765
01:07:21,520 --> 01:07:24,759
thank you

1766
01:07:41,119 --> 01:07:42,559
if you're wondering

1767
01:07:42,559 --> 01:07:44,000
whether it's in the right dominant

1768
01:07:44,000 --> 01:07:46,960
update it should be an update

1769
01:07:46,960 --> 01:07:49,960
ideally

