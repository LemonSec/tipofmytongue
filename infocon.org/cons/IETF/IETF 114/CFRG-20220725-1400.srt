1
00:00:14,480 --> 00:00:17,920
online can you hear the chairs mike

2
00:00:19,279 --> 00:00:22,680
yes we do

3
00:00:32,800 --> 00:00:35,760
all right attempt number 2001

4
00:00:35,760 --> 00:00:37,280
um

5
00:00:37,280 --> 00:00:39,200
so

6
00:00:39,200 --> 00:00:42,399
qui very quick updates on documents we

7
00:00:42,399 --> 00:00:45,200
have quite a few documents in flight uh

8
00:00:45,200 --> 00:00:47,680
we have one document in uh

9
00:00:47,680 --> 00:00:49,920
that will be going to sg review which is

10
00:00:49,920 --> 00:00:52,230
ash to curve

11
00:00:52,230 --> 00:00:55,199
[Music]

12
00:00:55,199 --> 00:00:57,360
i think the most interesting is probably

13
00:00:57,360 --> 00:00:59,600
next slides about various adoption calls

14
00:00:59,600 --> 00:01:02,079
we have

15
00:01:02,960 --> 00:01:05,280
um

16
00:01:08,400 --> 00:01:10,799
madsen cfrg deterministic signature with

17
00:01:10,799 --> 00:01:14,240
noise document was

18
00:01:14,960 --> 00:01:16,880
very interesting

19
00:01:16,880 --> 00:01:19,439
to watch on the mailing list

20
00:01:19,439 --> 00:01:21,119
because of

21
00:01:21,119 --> 00:01:23,360
ipr concerns even though the api is

22
00:01:23,360 --> 00:01:25,360
expired i

23
00:01:25,360 --> 00:01:29,439
chairs are consulting with irtf chair to

24
00:01:29,439 --> 00:01:32,320
decide what the best way forward is on

25
00:01:32,320 --> 00:01:34,479
this they seem to be interested in the

26
00:01:34,479 --> 00:01:36,640
topic

27
00:01:36,640 --> 00:01:38,560
but a lot of

28
00:01:38,560 --> 00:01:40,479
people said that

29
00:01:40,479 --> 00:01:42,240
they only they want to work on the

30
00:01:42,240 --> 00:01:44,560
document condition they so this is i'm

31
00:01:44,560 --> 00:01:46,640
not entirely sure how to

32
00:01:46,640 --> 00:01:48,320
as a chair how to process this

33
00:01:48,320 --> 00:01:49,439
information

34
00:01:49,439 --> 00:01:51,360
um

35
00:01:51,360 --> 00:01:55,040
we also have another document

36
00:02:01,280 --> 00:02:03,600
ages

37
00:02:03,600 --> 00:02:05,280
in adoption call

38
00:02:05,280 --> 00:02:07,119
there were very few comments until

39
00:02:07,119 --> 00:02:09,440
recently there was some support this

40
00:02:09,440 --> 00:02:10,878
week

41
00:02:10,878 --> 00:02:13,520
i think we're extending last call a

42
00:02:13,520 --> 00:02:15,520
little bit more to

43
00:02:15,520 --> 00:02:19,280
get more information about this

44
00:02:19,680 --> 00:02:22,959
so if you have an opinion whether

45
00:02:22,959 --> 00:02:25,040
this should be worked on

46
00:02:25,040 --> 00:02:26,879
in cfrg plus

47
00:02:26,879 --> 00:02:30,640
please comment on the mailing list

48
00:02:34,879 --> 00:02:36,720
and with this let's

49
00:02:36,720 --> 00:02:41,599
try start with other presentations

50
00:02:47,440 --> 00:02:51,560
i did sort of skip through it

51
00:03:07,840 --> 00:03:10,840
yes

52
00:03:25,280 --> 00:03:27,040
right here's our first presentation it's

53
00:03:27,040 --> 00:03:28,959
about the bbs signature scheme

54
00:03:28,959 --> 00:03:31,200
um we're obviously very tight on time

55
00:03:31,200 --> 00:03:33,440
here so we'll sort of limit the

56
00:03:33,440 --> 00:03:35,519
questions and have the conversation uh

57
00:03:35,519 --> 00:03:36,959
bring it online

58
00:03:36,959 --> 00:03:38,080
but um

59
00:03:38,080 --> 00:03:41,440
here is our presenter

60
00:03:42,080 --> 00:03:43,519
this one

61
00:03:43,519 --> 00:03:45,360
yeah

62
00:03:45,360 --> 00:03:47,680
and sorry there's some transition so

63
00:03:47,680 --> 00:03:50,159
will i just ask just say next slide okay

64
00:03:50,159 --> 00:03:52,159
thank you the difficulty is uh they

65
00:03:52,159 --> 00:03:55,120
cannot see you at the moment right okay

66
00:03:55,120 --> 00:03:58,159
that's right um hi all my name's tobias

67
00:03:58,159 --> 00:03:59,920
and i'm here to talk today about a

68
00:03:59,920 --> 00:04:02,000
signature scene called the bbs signature

69
00:04:02,000 --> 00:04:05,280
scheme so next slide please

70
00:04:05,280 --> 00:04:07,519
so at a high level what are vbs

71
00:04:07,519 --> 00:04:09,680
signatures with a few words effectively

72
00:04:09,680 --> 00:04:12,000
it's a digital scheme supporting

73
00:04:12,000 --> 00:04:13,519
sorry next there's a couple of

74
00:04:13,519 --> 00:04:14,400
transitions

75
00:04:14,400 --> 00:04:15,280
um

76
00:04:15,280 --> 00:04:17,040
selective disclosure or multi-message

77
00:04:17,040 --> 00:04:21,199
signing we call it um next one

78
00:04:21,918 --> 00:04:24,080
thank you thank you uh proof of position

79
00:04:24,080 --> 00:04:27,520
enabled and finally

80
00:04:27,520 --> 00:04:29,840
um unlinkable proofs through a zero

81
00:04:29,840 --> 00:04:31,440
knowledge proof protocol

82
00:04:31,440 --> 00:04:33,840
uh next slide

83
00:04:33,840 --> 00:04:35,759
so just a bit of a timeline around where

84
00:04:35,759 --> 00:04:37,919
some of this works originated from

85
00:04:37,919 --> 00:04:39,919
the first appearance of this

86
00:04:39,919 --> 00:04:41,840
short group signature was documented in

87
00:04:41,840 --> 00:04:43,919
2004

88
00:04:43,919 --> 00:04:45,840
which is where the name bbs is derived

89
00:04:45,840 --> 00:04:50,320
from the work of banay boyan and shakum

90
00:04:50,320 --> 00:04:52,880
there was been multiple revisions in

91
00:04:52,880 --> 00:04:55,600
academia since then in a paper in 2006

92
00:04:55,600 --> 00:04:57,360
and again in 2016

93
00:04:57,360 --> 00:04:59,360
and then uh as a working group at the

94
00:04:59,360 --> 00:05:01,039
decentralized identity foundation we

95
00:05:01,039 --> 00:05:03,120
started work on documenting the scheme

96
00:05:03,120 --> 00:05:05,039
at the applied crypto working group in

97
00:05:05,039 --> 00:05:08,800
2021. next slide

98
00:05:09,199 --> 00:05:11,919
so at a high level of the scheme um

99
00:05:11,919 --> 00:05:14,400
next slide um it is

100
00:05:14,400 --> 00:05:16,080
pairing based so it uses type three

101
00:05:16,080 --> 00:05:19,120
pairings um two subgroups a g1 and g2 of

102
00:05:19,120 --> 00:05:21,360
non-prime order um in the current cipher

103
00:05:21,360 --> 00:05:22,320
suite that's defined in the

104
00:05:22,320 --> 00:05:24,560
specification today

105
00:05:24,560 --> 00:05:25,440
the

106
00:05:25,440 --> 00:05:28,240
scheme itself is is curve agnostic but

107
00:05:28,240 --> 00:05:29,840
the cipher suit we've defined within the

108
00:05:29,840 --> 00:05:31,440
scheme today

109
00:05:31,440 --> 00:05:33,360
and the spec

110
00:05:33,360 --> 00:05:34,400
is

111
00:05:34,400 --> 00:05:38,080
based on using the bls 1231 curve

112
00:05:38,080 --> 00:05:39,840
but as we said any pairing friendly

113
00:05:39,840 --> 00:05:42,960
curve is compatible

114
00:05:42,960 --> 00:05:45,039
provided it's type 3 in nature

115
00:05:45,039 --> 00:05:47,440
next slide

116
00:05:47,440 --> 00:05:49,600
so

117
00:05:50,400 --> 00:05:52,000
there's a obviously a problem with this

118
00:05:52,000 --> 00:05:54,000
slide but effectively at a high level in

119
00:05:54,000 --> 00:05:55,919
terms of concepts um there are three

120
00:05:55,919 --> 00:05:57,759
parties involved in this protocol sign

121
00:05:57,759 --> 00:05:59,759
approval and verifier and there are two

122
00:05:59,759 --> 00:06:01,600
kind of core constructs which are

123
00:06:01,600 --> 00:06:03,199
signatures and proofs

124
00:06:03,199 --> 00:06:06,960
so if we move on to the next slide

125
00:06:06,960 --> 00:06:09,199
the highest level

126
00:06:09,199 --> 00:06:11,039
summary of how this protocol works is a

127
00:06:11,039 --> 00:06:13,199
signer signs a set of messages and

128
00:06:13,199 --> 00:06:15,360
headers messages and headers are the two

129
00:06:15,360 --> 00:06:17,680
kind of application level payload

130
00:06:17,680 --> 00:06:19,280
kind of classes of application level

131
00:06:19,280 --> 00:06:22,080
payloads we can sign with the scheme

132
00:06:22,080 --> 00:06:23,840
loosely a header is information that

133
00:06:23,840 --> 00:06:25,600
must always be revealed and any proof

134
00:06:25,600 --> 00:06:27,360
generated under this protocol and

135
00:06:27,360 --> 00:06:29,440
messages it's a set of messages it can

136
00:06:29,440 --> 00:06:31,360
be any number of messages

137
00:06:31,360 --> 00:06:33,520
chosen by the signer and those are

138
00:06:33,520 --> 00:06:36,160
selectively disclosable by the prover

139
00:06:36,160 --> 00:06:38,080
signatures generated over top of them

140
00:06:38,080 --> 00:06:40,160
and then on the proving

141
00:06:40,160 --> 00:06:42,560
half of the protocol prover can create a

142
00:06:42,560 --> 00:06:44,240
presentation header

143
00:06:44,240 --> 00:06:47,039
selectively disclose create a proof and

144
00:06:47,039 --> 00:06:48,639
send that to the verifier for

145
00:06:48,639 --> 00:06:52,080
verification next slide

146
00:06:52,400 --> 00:06:54,400
so just uh

147
00:06:54,400 --> 00:06:57,280
moving into the lower level sort of

148
00:06:57,280 --> 00:06:59,599
properties of how sign works as we

149
00:06:59,599 --> 00:07:00,400
as

150
00:07:00,400 --> 00:07:01,840
i said on the last slide there are

151
00:07:01,840 --> 00:07:03,680
essentially two levels of application

152
00:07:03,680 --> 00:07:06,960
level payloads here the header which is

153
00:07:06,960 --> 00:07:08,479
effectively a message or a payload

154
00:07:08,479 --> 00:07:10,240
that's always disclosed and any proofs

155
00:07:10,240 --> 00:07:13,440
generated and the messages are

156
00:07:13,440 --> 00:07:15,440
selectively disclosable

157
00:07:15,440 --> 00:07:17,120
the sign operation is effectively the

158
00:07:17,120 --> 00:07:18,400
signer that takes all of that

159
00:07:18,400 --> 00:07:20,319
information together signs that and

160
00:07:20,319 --> 00:07:22,400
produces a signature some notable

161
00:07:22,400 --> 00:07:24,400
properties is the signature is constant

162
00:07:24,400 --> 00:07:25,680
size

163
00:07:25,680 --> 00:07:27,759
even under n number of messages

164
00:07:27,759 --> 00:07:29,520
and that signature is essentially a

165
00:07:29,520 --> 00:07:31,280
combination of a single ec point and two

166
00:07:31,280 --> 00:07:32,560
scalars

167
00:07:32,560 --> 00:07:34,880
in the context of the bls 12381 cipher

168
00:07:34,880 --> 00:07:40,080
suite that is 112 bytes in size

169
00:07:40,080 --> 00:07:42,160
the slide has

170
00:07:42,160 --> 00:07:44,080
cut off on the efficiency we're trying

171
00:07:44,080 --> 00:07:46,479
to say that it's of n efficiency

172
00:07:46,479 --> 00:07:48,800
um or constant time if no selective

173
00:07:48,800 --> 00:07:51,039
disclosure messages are used in terms of

174
00:07:51,039 --> 00:07:54,000
the efficiency of the sign operation

175
00:07:54,000 --> 00:07:57,440
and another thing that to note is

176
00:07:57,440 --> 00:07:59,919
in the scheme you can either sign just a

177
00:07:59,919 --> 00:08:03,680
header or just a set of messages or both

178
00:08:03,680 --> 00:08:06,479
so the scheme's flexible in that regard

179
00:08:06,479 --> 00:08:09,280
next slide please

180
00:08:11,039 --> 00:08:12,560
so verification

181
00:08:12,560 --> 00:08:15,520
um this is this is a operation that

182
00:08:15,520 --> 00:08:17,199
would primarily be done by approver

183
00:08:17,199 --> 00:08:18,639
because the signature itself would never

184
00:08:18,639 --> 00:08:20,080
be revealed to a verifier directly

185
00:08:20,080 --> 00:08:21,680
that's what proofs are for

186
00:08:21,680 --> 00:08:23,759
but effectively um

187
00:08:23,759 --> 00:08:26,240
to verify signature it behaves much like

188
00:08:26,240 --> 00:08:28,319
a normal digital signature you take all

189
00:08:28,319 --> 00:08:29,680
the information protected by the

190
00:08:29,680 --> 00:08:31,280
signature which is the n number of

191
00:08:31,280 --> 00:08:33,679
messages in the header

192
00:08:33,679 --> 00:08:36,799
and the signature the sign is public key

193
00:08:36,799 --> 00:08:38,640
and you get a result around whether or

194
00:08:38,640 --> 00:08:40,640
not the signature is valid again that's

195
00:08:40,640 --> 00:08:42,159
oen efficiency

196
00:08:42,159 --> 00:08:44,399
or constant time if

197
00:08:44,399 --> 00:08:48,480
no selected disclosure messages are used

198
00:08:48,480 --> 00:08:51,040
next slide please

199
00:08:51,040 --> 00:08:54,480
so the proof protocol is effectively

200
00:08:54,480 --> 00:08:57,440
the approver receives a

201
00:08:57,440 --> 00:08:59,360
signature with a set of messages and a

202
00:08:59,360 --> 00:09:01,519
header and then they decide which

203
00:09:01,519 --> 00:09:03,120
messages they would like to selectively

204
00:09:03,120 --> 00:09:05,120
reveal if they are present in the

205
00:09:05,120 --> 00:09:06,320
signature

206
00:09:06,320 --> 00:09:08,320
they produce a presentation header which

207
00:09:08,320 --> 00:09:11,600
can be used to put in announce or scope

208
00:09:11,600 --> 00:09:12,720
the proof

209
00:09:12,720 --> 00:09:16,959
to a particular domain or audience

210
00:09:17,040 --> 00:09:19,680
combine that with assigned as public key

211
00:09:19,680 --> 00:09:22,720
and generate a proof so the

212
00:09:22,720 --> 00:09:24,560
size of the proof is linear to the

213
00:09:24,560 --> 00:09:26,560
number of hidden messages there's an

214
00:09:26,560 --> 00:09:28,800
equation there that gives you an idea of

215
00:09:28,800 --> 00:09:31,360
how that scales again this operation is

216
00:09:31,360 --> 00:09:33,360
owen efficient or constant time if no

217
00:09:33,360 --> 00:09:35,440
selective disclosure messages are

218
00:09:35,440 --> 00:09:37,600
used and there's obviously a choice for

219
00:09:37,600 --> 00:09:39,360
the approver to make around which

220
00:09:39,360 --> 00:09:41,839
messages to disclose

221
00:09:41,839 --> 00:09:43,360
lastly

222
00:09:43,360 --> 00:09:46,080
next slide please

223
00:09:46,080 --> 00:09:47,279
so bbs

224
00:09:47,279 --> 00:09:49,519
the verify proof so this is the

225
00:09:49,519 --> 00:09:51,360
operation that's performed by a verifier

226
00:09:51,360 --> 00:09:52,880
they they receive

227
00:09:52,880 --> 00:09:55,440
essentially the set of revealed messages

228
00:09:55,440 --> 00:09:56,560
and header

229
00:09:56,560 --> 00:09:58,320
the presentation header and proof they

230
00:09:58,320 --> 00:10:01,279
combine this um information with the

231
00:10:01,279 --> 00:10:03,680
signers public key and that

232
00:10:03,680 --> 00:10:05,279
produces a result of whether or not the

233
00:10:05,279 --> 00:10:07,120
proof is valid or not

234
00:10:07,120 --> 00:10:11,279
again o inefficient or constant time

235
00:10:11,440 --> 00:10:13,519
if no selected disclosure messages are

236
00:10:13,519 --> 00:10:14,880
used

237
00:10:14,880 --> 00:10:17,880
next

238
00:10:18,320 --> 00:10:20,240
so the proof just a note on what the

239
00:10:20,240 --> 00:10:21,920
proof provides it proves integrity and

240
00:10:21,920 --> 00:10:23,760
authenticity of the revealed messages

241
00:10:23,760 --> 00:10:25,519
also the header

242
00:10:25,519 --> 00:10:26,640
and it proves possession of the

243
00:10:26,640 --> 00:10:28,320
signature the presentation header is

244
00:10:28,320 --> 00:10:30,640
essentially brown to the proof as well

245
00:10:30,640 --> 00:10:33,120
and the proof is essential is said to be

246
00:10:33,120 --> 00:10:35,040
unlinkable because effectively the proof

247
00:10:35,040 --> 00:10:36,240
is um

248
00:10:36,240 --> 00:10:37,839
it's generated under a non-interactive

249
00:10:37,839 --> 00:10:41,120
zero knowledge proof protocol

250
00:10:41,360 --> 00:10:43,920
next slide

251
00:10:44,160 --> 00:10:46,079
so these are some some benchmarks for

252
00:10:46,079 --> 00:10:48,320
the for uh our implementation that we

253
00:10:48,320 --> 00:10:49,839
have most recently

254
00:10:49,839 --> 00:10:52,800
um done for the most recent draft um we

255
00:10:52,800 --> 00:10:55,040
are still uh refining some of these but

256
00:10:55,040 --> 00:10:56,720
this gives an idea of the

257
00:10:56,720 --> 00:10:59,120
characteristics that that we've found so

258
00:10:59,120 --> 00:11:00,800
the benchmarks um you've got a

259
00:11:00,800 --> 00:11:03,120
logarithmic scale on the bottom there so

260
00:11:03,120 --> 00:11:05,519
this really shows that uh performance

261
00:11:05,519 --> 00:11:06,959
scales linearly to the number of

262
00:11:06,959 --> 00:11:08,160
messages

263
00:11:08,160 --> 00:11:10,079
um in the in the smallest case where you

264
00:11:10,079 --> 00:11:11,440
are maybe just signing a header you're

265
00:11:11,440 --> 00:11:12,800
not using the selected disclosure

266
00:11:12,800 --> 00:11:15,440
feature afforded by the bbs signature

267
00:11:15,440 --> 00:11:18,240
um you're looking at a signed verified

268
00:11:18,240 --> 00:11:21,200
times of you know sub half a millisecond

269
00:11:21,200 --> 00:11:24,399
um and obviously the proofs just for

270
00:11:24,399 --> 00:11:26,160
note on these benchmarks

271
00:11:26,160 --> 00:11:27,600
as they go up

272
00:11:27,600 --> 00:11:29,839
were generated with 50 of the messages

273
00:11:29,839 --> 00:11:32,000
were disclosed in the generator proofs

274
00:11:32,000 --> 00:11:33,600
and there's some details on

275
00:11:33,600 --> 00:11:36,800
the machine those benchmarks are run on

276
00:11:36,800 --> 00:11:39,599
next slide please

277
00:11:39,920 --> 00:11:42,720
so just a brief um section on some of

278
00:11:42,720 --> 00:11:45,600
the use cases we see um for this scheme

279
00:11:45,600 --> 00:11:47,200
uh the first is privacy preserving

280
00:11:47,200 --> 00:11:49,360
anonymous credentials so effectively the

281
00:11:49,360 --> 00:11:51,360
ability to leverage the selective

282
00:11:51,360 --> 00:11:53,519
disclosure feature to produce

283
00:11:53,519 --> 00:11:55,760
attribute-based credentials that include

284
00:11:55,760 --> 00:11:57,920
personal information about someone

285
00:11:57,920 --> 00:12:00,399
where they can derive proofs of the

286
00:12:00,399 --> 00:12:02,160
subset of that information signed by the

287
00:12:02,160 --> 00:12:04,000
original issuer

288
00:12:04,000 --> 00:12:05,839
to different relying parties free from

289
00:12:05,839 --> 00:12:09,040
the risk of correlating themselves

290
00:12:09,040 --> 00:12:11,440
and presentations and also

291
00:12:11,440 --> 00:12:14,079
providing the ability for them to

292
00:12:14,079 --> 00:12:15,920
granularly manage what information they

293
00:12:15,920 --> 00:12:18,880
share to different relying parties

294
00:12:18,880 --> 00:12:21,439
next slide

295
00:12:22,639 --> 00:12:24,320
another application is what we call

296
00:12:24,320 --> 00:12:25,920
proof of possession enabled security or

297
00:12:25,920 --> 00:12:27,760
access tokens so

298
00:12:27,760 --> 00:12:29,920
um this is a

299
00:12:29,920 --> 00:12:32,720
what we believe is a feature that um

300
00:12:32,720 --> 00:12:34,959
allows you to say issue a security token

301
00:12:34,959 --> 00:12:36,639
or an access token under a protocol like

302
00:12:36,639 --> 00:12:39,680
oauth2 where the signer can just produce

303
00:12:39,680 --> 00:12:41,600
a access token secured with a bbs

304
00:12:41,600 --> 00:12:44,000
signature and then the approver using

305
00:12:44,000 --> 00:12:46,399
the proving half of the protocol can

306
00:12:46,399 --> 00:12:48,639
generate a unique proof

307
00:12:48,639 --> 00:12:50,639
and send that to say a resource server

308
00:12:50,639 --> 00:12:53,200
and a protocol like oauth2 proving

309
00:12:53,200 --> 00:12:55,680
possession of that token which is

310
00:12:55,680 --> 00:12:56,880
obviously

311
00:12:56,880 --> 00:12:59,760
an enhancement in terms of replay attack

312
00:12:59,760 --> 00:13:01,680
affordable detection for a resource

313
00:13:01,680 --> 00:13:03,839
server over say bearer tokens and

314
00:13:03,839 --> 00:13:05,360
there's also some

315
00:13:05,360 --> 00:13:07,839
simplifications versus other proof of

316
00:13:07,839 --> 00:13:10,079
position enabled schemes that

317
00:13:10,079 --> 00:13:11,680
require the prover or the client to

318
00:13:11,680 --> 00:13:14,240
manage key material and proof position

319
00:13:14,240 --> 00:13:16,240
of that and get that essentially tied

320
00:13:16,240 --> 00:13:17,839
into the token to

321
00:13:17,839 --> 00:13:19,839
do something so

322
00:13:19,839 --> 00:13:22,240
that's one application

323
00:13:22,240 --> 00:13:25,040
and then finally

324
00:13:25,040 --> 00:13:26,639
the last one is essentially

325
00:13:26,639 --> 00:13:29,279
non-correlating security token proofs so

326
00:13:29,279 --> 00:13:32,399
the idea that a signer can issue a

327
00:13:32,399 --> 00:13:34,880
single token to a client and that client

328
00:13:34,880 --> 00:13:37,519
can then generate n number of proofs

329
00:13:37,519 --> 00:13:39,360
for n number of parties

330
00:13:39,360 --> 00:13:40,480
um

331
00:13:40,480 --> 00:13:42,880
proving proving whatever the

332
00:13:42,880 --> 00:13:44,560
presence of that essentially what that

333
00:13:44,560 --> 00:13:46,320
token

334
00:13:46,320 --> 00:13:47,839
underlies what that actually proves or

335
00:13:47,839 --> 00:13:49,600
grants the client

336
00:13:49,600 --> 00:13:51,839
um to different servers without being

337
00:13:51,839 --> 00:13:54,160
correlated through the cryptographic

338
00:13:54,160 --> 00:13:56,160
layer say a fixed signature because

339
00:13:56,160 --> 00:13:58,480
again the proofs are indistinguishable

340
00:13:58,480 --> 00:14:01,519
from random and just a quick note there

341
00:14:01,519 --> 00:14:03,680
the indistinguishable from random is

342
00:14:03,680 --> 00:14:05,760
it's a it's not an artifact of the

343
00:14:05,760 --> 00:14:07,279
presentation header which is set by the

344
00:14:07,279 --> 00:14:08,480
client it's actually built into the

345
00:14:08,480 --> 00:14:10,959
protocol

346
00:14:12,160 --> 00:14:15,199
so just a quick note on why we believe

347
00:14:15,199 --> 00:14:16,560
while we're presenting this work to the

348
00:14:16,560 --> 00:14:18,399
cfr gen why we'd like to continue it at

349
00:14:18,399 --> 00:14:21,040
the cfrg we think it fits um with

350
00:14:21,040 --> 00:14:22,800
numerous existing work items already

351
00:14:22,800 --> 00:14:24,959
here which is notably the peering

352
00:14:24,959 --> 00:14:26,639
friendly curves draft which includes the

353
00:14:26,639 --> 00:14:28,399
definition of the curve that we're using

354
00:14:28,399 --> 00:14:30,160
present and the current cyphers we've

355
00:14:30,160 --> 00:14:33,199
defined which is bls 1231

356
00:14:33,199 --> 00:14:35,360
it also bears a lot of a relationship

357
00:14:35,360 --> 00:14:37,680
and and structure and nature

358
00:14:37,680 --> 00:14:40,480
to the existing bls signatures draft

359
00:14:40,480 --> 00:14:42,880
and we also make heavy use of of hash to

360
00:14:42,880 --> 00:14:46,320
curve in our draft

361
00:14:46,880 --> 00:14:48,639
next slide please

362
00:14:48,639 --> 00:14:52,160
so as effectively we'd like to

363
00:14:52,160 --> 00:14:54,800
call for adoption of this draft

364
00:14:54,800 --> 00:14:56,079
and you know we believe that it's

365
00:14:56,079 --> 00:14:58,880
sufficiently just um evolved today to

366
00:14:58,880 --> 00:15:00,560
describe the scheme however it's you

367
00:15:00,560 --> 00:15:02,000
know incomplete

368
00:15:02,000 --> 00:15:04,639
um as a draft we've got numerous issues

369
00:15:04,639 --> 00:15:07,040
still in in our repository

370
00:15:07,040 --> 00:15:09,279
um such as you know we would appreciate

371
00:15:09,279 --> 00:15:13,279
a broader review of the scheme um

372
00:15:13,279 --> 00:15:15,360
the cipher suite kind of definition that

373
00:15:15,360 --> 00:15:17,120
we have within the spec today which

374
00:15:17,120 --> 00:15:18,959
allows kind of extensibility in future

375
00:15:18,959 --> 00:15:20,880
cipher suites to be defined we uh we

376
00:15:20,880 --> 00:15:22,480
still have a series of refinements to do

377
00:15:22,480 --> 00:15:23,279
there

378
00:15:23,279 --> 00:15:25,199
and then beyond that also clarify some

379
00:15:25,199 --> 00:15:27,680
of the extensibility points that we have

380
00:15:27,680 --> 00:15:29,839
built into the scan

381
00:15:29,839 --> 00:15:31,839
uh a slight please

382
00:15:31,839 --> 00:15:34,959
good question yeah is there any idea for

383
00:15:34,959 --> 00:15:35,839
that

384
00:15:35,839 --> 00:15:38,480
that will be using this any sorry any

385
00:15:38,480 --> 00:15:41,040
ietf work that we'll be using

386
00:15:41,040 --> 00:15:44,639
yeah so um this afternoon there is a um

387
00:15:44,639 --> 00:15:47,279
uh buff a birds of a feather session for

388
00:15:47,279 --> 00:15:50,399
a new a call for what's called jason

389
00:15:50,399 --> 00:15:53,279
webb proofs which proposes to

390
00:15:53,279 --> 00:15:55,440
essentially extend the jose family of

391
00:15:55,440 --> 00:15:56,880
cryptographic data representation

392
00:15:56,880 --> 00:15:58,320
formats to

393
00:15:58,320 --> 00:16:01,680
allow and accommodate schemes like bbs

394
00:16:01,680 --> 00:16:05,839
so yes related work at atf

395
00:16:06,560 --> 00:16:08,240
chris wood also wanted to comment that

396
00:16:08,240 --> 00:16:09,839
says potential implications or

397
00:16:09,839 --> 00:16:12,720
applications to privacy pass as well so

398
00:16:12,720 --> 00:16:15,199
there's another one yeah yeah um

399
00:16:15,199 --> 00:16:16,959
thanks so i've definitely seen that work

400
00:16:16,959 --> 00:16:18,800
and i think that's fantastic and there's

401
00:16:18,800 --> 00:16:20,800
there's definitely intersect and overlap

402
00:16:20,800 --> 00:16:24,719
um with applications like privacy pass

403
00:16:26,399 --> 00:16:27,199
so

404
00:16:27,199 --> 00:16:28,480
in conclusion

405
00:16:28,480 --> 00:16:30,480
essentially it's bbs is an efficient

406
00:16:30,480 --> 00:16:32,079
multi-message digital signature scheme

407
00:16:32,079 --> 00:16:33,519
supporting select disclosure and zero

408
00:16:33,519 --> 00:16:34,959
knowledge proofs

409
00:16:34,959 --> 00:16:36,560
it's had quite a long line of research

410
00:16:36,560 --> 00:16:38,000
backing it out improving its security

411
00:16:38,000 --> 00:16:39,680
properties

412
00:16:39,680 --> 00:16:41,040
and efficiency there's been multiple

413
00:16:41,040 --> 00:16:42,880
iterations in academia over the years as

414
00:16:42,880 --> 00:16:44,160
well

415
00:16:44,160 --> 00:16:46,079
we believe there are multiple use cases

416
00:16:46,079 --> 00:16:48,800
um for which bbs can be applied and the

417
00:16:48,800 --> 00:16:50,399
current cipher suites based on the bls

418
00:16:50,399 --> 00:16:52,480
1231 curve obviously there's already

419
00:16:52,480 --> 00:16:54,720
work going on at the atf

420
00:16:54,720 --> 00:16:57,040
uh sorry at the cfig using that curve as

421
00:16:57,040 --> 00:16:57,920
well

422
00:16:57,920 --> 00:16:59,759
um any proofing friendly curve can be

423
00:16:59,759 --> 00:17:01,360
used

424
00:17:01,360 --> 00:17:04,000
and we also believe that the signature

425
00:17:04,000 --> 00:17:06,559
scheme itself is also extendable to

426
00:17:06,559 --> 00:17:09,919
fit a range of other use cases

427
00:17:09,919 --> 00:17:11,199
so

428
00:17:11,199 --> 00:17:13,919
that's that's it

429
00:17:13,919 --> 00:17:17,720
okay any more questions

430
00:17:18,160 --> 00:17:20,000
that's not exactly a question but i'm

431
00:17:20,000 --> 00:17:21,839
very interested in seeing this work uh

432
00:17:21,839 --> 00:17:24,000
continue especially in the context of

433
00:17:24,000 --> 00:17:26,400
securing cyber physical supply chains

434
00:17:26,400 --> 00:17:27,839
given the performance and the size of

435
00:17:27,839 --> 00:17:31,799
the proofs thank you

436
00:17:32,559 --> 00:17:33,600
um

437
00:17:33,600 --> 00:17:35,360
from dell

438
00:17:35,360 --> 00:17:37,520
the verifier does need to have the

439
00:17:37,520 --> 00:17:39,919
public key of the sign right

440
00:17:39,919 --> 00:17:42,559
the the verifier does what sorry does it

441
00:17:42,559 --> 00:17:44,400
need to have the public key

442
00:17:44,400 --> 00:17:47,760
to verify the proof yeah yes okay so how

443
00:17:47,760 --> 00:17:49,440
is it unlinkable

444
00:17:49,440 --> 00:17:52,080
sorry so how is it unlinkable if you

445
00:17:52,080 --> 00:17:54,080
need to have your public key to verify

446
00:17:54,080 --> 00:17:56,320
your signature or the proof that you

447
00:17:56,320 --> 00:17:58,000
have signed something how is it

448
00:17:58,000 --> 00:17:59,520
unlinkable to you

449
00:17:59,520 --> 00:18:01,280
because the public key represents the

450
00:18:01,280 --> 00:18:03,200
public key of the issuer so you've got

451
00:18:03,200 --> 00:18:05,280
heard privacy within it's essentially a

452
00:18:05,280 --> 00:18:08,400
group signature so you say one issuer

453
00:18:08,400 --> 00:18:10,000
issues

454
00:18:10,000 --> 00:18:13,440
to a herd of you know 10 000 or million

455
00:18:13,440 --> 00:18:14,799
signatures

456
00:18:14,799 --> 00:18:16,640
then any party that possesses a

457
00:18:16,640 --> 00:18:18,559
signature within that group has

458
00:18:18,559 --> 00:18:20,880
anonymity to that group

459
00:18:20,880 --> 00:18:23,520
got it thank you

460
00:18:25,120 --> 00:18:27,120
okay thanks uh we're not going to do an

461
00:18:27,120 --> 00:18:28,880
adoption call here but

462
00:18:28,880 --> 00:18:30,880
we'll definitely um talk with the chairs

463
00:18:30,880 --> 00:18:32,240
and we'll decide whether to take it to

464
00:18:32,240 --> 00:18:33,200
the list

465
00:18:33,200 --> 00:18:35,520
thank you

466
00:18:40,160 --> 00:18:43,360
all right uh dear deardrive

467
00:18:51,520 --> 00:18:52,960
hello

468
00:18:52,960 --> 00:18:55,280
uh there i am

469
00:18:55,280 --> 00:18:56,720
yes

470
00:18:56,720 --> 00:18:59,120
cool hi i'm deirdre i work at the zcash

471
00:18:59,120 --> 00:19:01,919
foundation uh this is frost uh next

472
00:19:01,919 --> 00:19:04,480
slide please

473
00:19:05,600 --> 00:19:08,320
uh what is frost frost is a flexible

474
00:19:08,320 --> 00:19:10,640
next

475
00:19:10,640 --> 00:19:13,200
next please

476
00:19:13,520 --> 00:19:15,440
next please

477
00:19:15,440 --> 00:19:18,559
ground optimized next please

478
00:19:18,559 --> 00:19:21,360
this is two rounds for frost if you're

479
00:19:21,360 --> 00:19:23,200
familiar with any of the frostwork that

480
00:19:23,200 --> 00:19:24,559
has been published

481
00:19:24,559 --> 00:19:26,080
elsewhere the thing that we're

482
00:19:26,080 --> 00:19:27,760
specifying in this document is the

483
00:19:27,760 --> 00:19:30,640
two-round variant of frost that's where

484
00:19:30,640 --> 00:19:32,880
the flexible comes from there were two

485
00:19:32,880 --> 00:19:34,080
variants

486
00:19:34,080 --> 00:19:36,480
this is the two-round variant uh next

487
00:19:36,480 --> 00:19:38,080
please

488
00:19:38,080 --> 00:19:40,880
schnoor next please

489
00:19:40,880 --> 00:19:44,320
only schnorr signatures or snore like

490
00:19:44,320 --> 00:19:47,200
signatures there is no ec dsa in this

491
00:19:47,200 --> 00:19:49,679
protocol next please threshold next

492
00:19:49,679 --> 00:19:52,679
please

493
00:19:53,120 --> 00:19:54,960
i thought i would have a clicker

494
00:19:54,960 --> 00:19:56,160
uh

495
00:19:56,160 --> 00:19:58,880
for every signature you create you can

496
00:19:58,880 --> 00:19:59,679
use

497
00:19:59,679 --> 00:20:03,280
a threshold t of n possible signers

498
00:20:03,280 --> 00:20:06,080
where those n possible signers have

499
00:20:06,080 --> 00:20:09,600
shares of the secret next please

500
00:20:09,600 --> 00:20:11,919
and that's the signature scene

501
00:20:11,919 --> 00:20:14,159
and the resulting signature is

502
00:20:14,159 --> 00:20:16,799
indistinguishable from a single signer

503
00:20:16,799 --> 00:20:19,679
schnorr signature like an ed dsa type

504
00:20:19,679 --> 00:20:22,880
signature next please

505
00:20:24,240 --> 00:20:26,480
um so high level

506
00:20:26,480 --> 00:20:28,960
you have already done some keygen

507
00:20:28,960 --> 00:20:29,919
and then

508
00:20:29,919 --> 00:20:32,559
the document that we are proposing is

509
00:20:32,559 --> 00:20:34,400
the signing protocol after you've

510
00:20:34,400 --> 00:20:36,000
already done keygen

511
00:20:36,000 --> 00:20:38,960
first round involves generating dances

512
00:20:38,960 --> 00:20:39,919
rather

513
00:20:39,919 --> 00:20:42,960
your contributions to the nonces and

514
00:20:42,960 --> 00:20:45,600
then commitments to those and publishing

515
00:20:45,600 --> 00:20:46,559
them

516
00:20:46,559 --> 00:20:48,960
and then the second round uh you

517
00:20:48,960 --> 00:20:51,520
actually use those and all the other

518
00:20:51,520 --> 00:20:54,320
signing participants commitments

519
00:20:54,320 --> 00:20:55,840
uh with your

520
00:20:55,840 --> 00:20:58,080
key share to generate your signature

521
00:20:58,080 --> 00:21:00,960
share and then the coordinator whoever

522
00:21:00,960 --> 00:21:04,000
that is uh takes all these shares

523
00:21:04,000 --> 00:21:05,760
signature shares all these nonce

524
00:21:05,760 --> 00:21:07,679
commitments and combines them together

525
00:21:07,679 --> 00:21:09,520
into the final signature

526
00:21:09,520 --> 00:21:12,000
and outputs your your frost signature

527
00:21:12,000 --> 00:21:13,919
next please

528
00:21:13,919 --> 00:21:17,640
and next one more

529
00:21:17,679 --> 00:21:19,440
so this is a high level

530
00:21:19,440 --> 00:21:22,240
prior to starting the two round protocol

531
00:21:22,240 --> 00:21:24,559
you have done your key gen

532
00:21:24,559 --> 00:21:27,280
someone is operating as a coordinator uh

533
00:21:27,280 --> 00:21:30,720
we've seen implementations where anyone

534
00:21:30,720 --> 00:21:32,880
everyone can be the coordinator in the

535
00:21:32,880 --> 00:21:35,039
thing we're describing there is a

536
00:21:35,039 --> 00:21:38,080
coordinator next please

537
00:21:38,080 --> 00:21:40,240
um as i described you

538
00:21:40,240 --> 00:21:41,919
generate nonces

539
00:21:41,919 --> 00:21:43,679
you create these commitments to your

540
00:21:43,679 --> 00:21:45,679
nonces and you publish them

541
00:21:45,679 --> 00:21:47,840
in an authenticated channel not a

542
00:21:47,840 --> 00:21:49,760
confidential channel but authenticated

543
00:21:49,760 --> 00:21:52,400
channel next please

544
00:21:52,400 --> 00:21:54,080
and then

545
00:21:54,080 --> 00:21:56,400
the coordinator or whoever

546
00:21:56,400 --> 00:22:00,000
who having shuffled around not shuffled

547
00:22:00,000 --> 00:22:02,080
distributed all the commitments to these

548
00:22:02,080 --> 00:22:04,320
nonces to all the parties who are

549
00:22:04,320 --> 00:22:05,360
signing

550
00:22:05,360 --> 00:22:08,000
uh uses them to grant to generate your

551
00:22:08,000 --> 00:22:10,559
signature share with those commitments

552
00:22:10,559 --> 00:22:12,880
and your signing share your

553
00:22:12,880 --> 00:22:13,919
key share

554
00:22:13,919 --> 00:22:16,000
next please

555
00:22:16,000 --> 00:22:18,000
and then you send that signing share

556
00:22:18,000 --> 00:22:19,919
back to the coordinator

557
00:22:19,919 --> 00:22:21,840
and you aggregate all those signing

558
00:22:21,840 --> 00:22:23,840
shares back into the final signature

559
00:22:23,840 --> 00:22:24,840
next

560
00:22:24,840 --> 00:22:27,360
please so uh

561
00:22:27,360 --> 00:22:29,760
fully specified we've been it cranking

562
00:22:29,760 --> 00:22:31,200
on it for

563
00:22:31,200 --> 00:22:32,559
eight months now

564
00:22:32,559 --> 00:22:35,760
um we have four cipher suites in the

565
00:22:35,760 --> 00:22:38,960
document the ristretto primordia group

566
00:22:38,960 --> 00:22:40,720
p256

567
00:22:40,720 --> 00:22:43,840
uh ed25519 can you go back

568
00:22:43,840 --> 00:22:46,000
and uh ed 448

569
00:22:46,000 --> 00:22:47,919
we have specifically specified these

570
00:22:47,919 --> 00:22:50,080
cipher suites and the api of the

571
00:22:50,080 --> 00:22:52,559
document uh to be compatible with edge 5

572
00:22:52,559 --> 00:22:57,039
ed2519 and ed48 verification

573
00:22:57,039 --> 00:23:00,320
and we also have multiple interoperable

574
00:23:00,320 --> 00:23:02,559
implementations several and rust at

575
00:23:02,559 --> 00:23:04,159
least one and z

576
00:23:04,159 --> 00:23:06,799
our proof of concept or

577
00:23:06,799 --> 00:23:08,480
reference implementation in python and

578
00:23:08,480 --> 00:23:10,640
sage over multiple cipher suites

579
00:23:10,640 --> 00:23:12,960
restrain those popular ed25519 is very

580
00:23:12,960 --> 00:23:15,840
popular next please

581
00:23:15,840 --> 00:23:16,720
um

582
00:23:16,720 --> 00:23:19,440
so some of the latest updates um

583
00:23:19,440 --> 00:23:20,720
there was a

584
00:23:20,720 --> 00:23:23,200
optimization that was proposed to frost

585
00:23:23,200 --> 00:23:25,039
that would take

586
00:23:25,039 --> 00:23:26,320
uh

587
00:23:26,320 --> 00:23:29,440
order t scalar optimizations

588
00:23:29,440 --> 00:23:32,000
for if you have t possible sign of t

589
00:23:32,000 --> 00:23:33,919
signers in a single signing

590
00:23:33,919 --> 00:23:35,200
protocol

591
00:23:35,200 --> 00:23:38,799
down to one order one and we updated the

592
00:23:38,799 --> 00:23:40,559
protocol update the specification to

593
00:23:40,559 --> 00:23:42,960
include this but there was some further

594
00:23:42,960 --> 00:23:44,799
analysis that showed

595
00:23:44,799 --> 00:23:47,120
this introduced a

596
00:23:47,120 --> 00:23:48,720
inter-round

597
00:23:48,720 --> 00:23:51,840
malleability in the set of signers not

598
00:23:51,840 --> 00:23:54,799
malleability of this resulting signature

599
00:23:54,799 --> 00:23:55,520
but

600
00:23:55,520 --> 00:23:56,400
it

601
00:23:56,400 --> 00:24:00,080
wasn't clear that the people who started

602
00:24:00,080 --> 00:24:03,200
the signing in round one were

603
00:24:03,200 --> 00:24:06,159
provably the same set that finished in

604
00:24:06,159 --> 00:24:08,799
round two so we backed this out we

605
00:24:08,799 --> 00:24:12,559
decided to eat the cost of the um

606
00:24:12,559 --> 00:24:14,320
of the further scalar multiplications

607
00:24:14,320 --> 00:24:16,400
and just went back to the one where that

608
00:24:16,400 --> 00:24:18,159
was no longer an issue so that is in the

609
00:24:18,159 --> 00:24:21,520
current version in v7 of the draft

610
00:24:21,520 --> 00:24:23,840
and another big update is um we were

611
00:24:23,840 --> 00:24:26,159
having trouble um

612
00:24:26,159 --> 00:24:28,720
having a consistent

613
00:24:28,720 --> 00:24:31,200
subroutine definition of how to do

614
00:24:31,200 --> 00:24:33,840
verification for these signatures

615
00:24:33,840 --> 00:24:35,279
because

616
00:24:35,279 --> 00:24:38,000
uh the ed25519 document and other

617
00:24:38,000 --> 00:24:39,440
documents

618
00:24:39,440 --> 00:24:40,720
uh

619
00:24:40,720 --> 00:24:43,520
have led to their verification

620
00:24:43,520 --> 00:24:44,840
uh

621
00:24:44,840 --> 00:24:47,120
subroutine they don't really have one

622
00:24:47,120 --> 00:24:49,600
they have a two lines of text

623
00:24:49,600 --> 00:24:51,200
um

624
00:24:51,200 --> 00:24:53,520
suggest things

625
00:24:53,520 --> 00:24:56,559
that we would rather are uh

626
00:24:56,559 --> 00:24:58,880
uh musts and they're sort of just sort

627
00:24:58,880 --> 00:25:00,960
of like anyway

628
00:25:00,960 --> 00:25:03,760
we have made this easier by having

629
00:25:03,760 --> 00:25:06,240
per cypher suite verification

630
00:25:06,240 --> 00:25:08,000
which is basically the same operation

631
00:25:08,000 --> 00:25:10,480
you would do for singleton so we're just

632
00:25:10,480 --> 00:25:12,640
trying to remain compatible while also

633
00:25:12,640 --> 00:25:14,000
like kind of giving strong

634
00:25:14,000 --> 00:25:16,480
recommendations of uh some of these

635
00:25:16,480 --> 00:25:17,600
cofactor

636
00:25:17,600 --> 00:25:18,880
curves

637
00:25:18,880 --> 00:25:20,000
of how we

638
00:25:20,000 --> 00:25:22,240
would like to see implement implementers

639
00:25:22,240 --> 00:25:24,080
implement verification

640
00:25:24,080 --> 00:25:26,240
um and then for

641
00:25:26,240 --> 00:25:28,640
general schnorr signatures over prime

642
00:25:28,640 --> 00:25:31,520
order groups like ristretto and like p56

643
00:25:31,520 --> 00:25:33,760
that don't have an equivalent uh

644
00:25:33,760 --> 00:25:35,760
verification equation defined anywhere

645
00:25:35,760 --> 00:25:37,440
we give a if you have a prime order

646
00:25:37,440 --> 00:25:39,200
group here's your verification procedure

647
00:25:39,200 --> 00:25:41,600
for a signature that uses the primordial

648
00:25:41,600 --> 00:25:45,520
group so we include that uh next please

649
00:25:45,520 --> 00:25:48,000
so we think it's in a good place and

650
00:25:48,000 --> 00:25:50,799
we're seeking crypto panel review um and

651
00:25:50,799 --> 00:25:52,880
wider cfrd review

652
00:25:52,880 --> 00:25:54,559
we've been cranking on this and talking

653
00:25:54,559 --> 00:25:56,559
to many people in the broader

654
00:25:56,559 --> 00:25:59,520
cryptographic community uh but we think

655
00:25:59,520 --> 00:26:02,960
we we are ready for the cfrg to really

656
00:26:02,960 --> 00:26:04,240
uh

657
00:26:04,240 --> 00:26:05,600
really take a look at it now because

658
00:26:05,600 --> 00:26:07,760
we've we've cranked out a lot

659
00:26:07,760 --> 00:26:09,600
um is there anything

660
00:26:09,600 --> 00:26:11,520
unclear in the draft is there anything

661
00:26:11,520 --> 00:26:13,840
ambiguous in the draft uh is there

662
00:26:13,840 --> 00:26:15,600
anything technically incorrect

663
00:26:15,600 --> 00:26:17,600
it's insecure or unsafe in the

664
00:26:17,600 --> 00:26:20,799
specification um is it written in a way

665
00:26:20,799 --> 00:26:22,880
that embedding it into

666
00:26:22,880 --> 00:26:24,880
higher order application protocols or

667
00:26:24,880 --> 00:26:25,679
other

668
00:26:25,679 --> 00:26:29,679
things uh is clear and not full of

669
00:26:29,679 --> 00:26:30,799
friction

670
00:26:30,799 --> 00:26:32,559
um we always welcome more

671
00:26:32,559 --> 00:26:34,480
implementations

672
00:26:34,480 --> 00:26:37,200
we do have we haven't added yet but

673
00:26:37,200 --> 00:26:39,039
we're interested in adding another

674
00:26:39,039 --> 00:26:42,799
cypher suite over sec p256k1 which is

675
00:26:42,799 --> 00:26:44,960
another primordial curve that

676
00:26:44,960 --> 00:26:48,000
we would like to see supported um that

677
00:26:48,000 --> 00:26:50,000
hasn't been done yet but we'll see if

678
00:26:50,000 --> 00:26:51,520
anyone else is still interested next

679
00:26:51,520 --> 00:26:53,760
please

680
00:26:53,760 --> 00:26:55,919
and that's pretty much it do you have

681
00:26:55,919 --> 00:26:58,480
any questions

682
00:27:03,840 --> 00:27:06,720
hi there daniel kahn gilmore from aclu

683
00:27:06,720 --> 00:27:08,880
thanks for working on this um i'm

684
00:27:08,880 --> 00:27:10,559
wondering whether you think that we need

685
00:27:10,559 --> 00:27:13,279
to update 80 32 because of the looseness

686
00:27:13,279 --> 00:27:14,799
of the

687
00:27:14,799 --> 00:27:18,080
255.19 signature verification like do

688
00:27:18,080 --> 00:27:19,840
you see a path forward for that is that

689
00:27:19,840 --> 00:27:20,880
something that you would be interested

690
00:27:20,880 --> 00:27:22,320
in in seeing happen what are the

691
00:27:22,320 --> 00:27:24,159
roadblocks to that i mean this is not

692
00:27:24,159 --> 00:27:25,840
the only place where this has come up i

693
00:27:25,840 --> 00:27:27,679
would be very interested in seeing that

694
00:27:27,679 --> 00:27:29,039
happening i don't know what the

695
00:27:29,039 --> 00:27:32,720
roadblocks are but i will say that every

696
00:27:32,720 --> 00:27:36,000
implementation of ed25519 worth its salt

697
00:27:36,000 --> 00:27:37,679
and i've worked on a few

698
00:27:37,679 --> 00:27:40,720
uh are all

699
00:27:41,039 --> 00:27:43,760
they're all doing the co-factor check

700
00:27:43,760 --> 00:27:46,960
especially in places as opposed to the

701
00:27:46,960 --> 00:27:48,799
as opposed to the cofactorless check

702
00:27:48,799 --> 00:27:49,840
which is

703
00:27:49,840 --> 00:27:51,840
one is sufficient

704
00:27:51,840 --> 00:27:54,000
not strictly required and the strictly

705
00:27:54,000 --> 00:27:56,320
require and the one that uh

706
00:27:56,320 --> 00:27:58,640
actually multiplies by the cofactor is

707
00:27:58,640 --> 00:28:00,480
the one you need for

708
00:28:00,480 --> 00:28:03,600
um for example concept consensus

709
00:28:03,600 --> 00:28:05,760
interoperability

710
00:28:05,760 --> 00:28:09,840
and also you want if you are using this

711
00:28:09,840 --> 00:28:12,880
where low order points or torsion points

712
00:28:12,880 --> 00:28:15,520
are an issue which is a lot of places

713
00:28:15,520 --> 00:28:18,080
you should just do the cofactor mall and

714
00:28:18,080 --> 00:28:19,120
if the

715
00:28:19,120 --> 00:28:23,120
uh if the extra cost of that is an issue

716
00:28:23,120 --> 00:28:24,880
i i don't know what to tell you like you

717
00:28:24,880 --> 00:28:26,720
you can run into to serious security

718
00:28:26,720 --> 00:28:27,760
issues if you're not doing this

719
00:28:27,760 --> 00:28:31,279
co-factor check uh i would highly like

720
00:28:31,279 --> 00:28:34,720
to see that document updated uh as an

721
00:28:34,720 --> 00:28:36,799
implementer and a

722
00:28:36,799 --> 00:28:38,480
person who does cryptography and that

723
00:28:38,480 --> 00:28:42,360
gets deployed in the real world

724
00:28:45,120 --> 00:28:47,279
okay one more uh question from inside

725
00:28:47,279 --> 00:28:49,679
the room and then we have one from uh

726
00:28:49,679 --> 00:28:51,440
meat echo great

727
00:28:51,440 --> 00:28:53,840
mike ellsworth um so i'm working on the

728
00:28:53,840 --> 00:28:56,640
composite sort of combining pq and

729
00:28:56,640 --> 00:28:58,720
classical together for security stuff

730
00:28:58,720 --> 00:29:00,080
within the lamps

731
00:29:00,080 --> 00:29:01,919
this seems like it's sort of solving a

732
00:29:01,919 --> 00:29:02,799
different

733
00:29:02,799 --> 00:29:04,480
application problem but with the same

734
00:29:04,480 --> 00:29:06,399
technique so i'd love to chat see if mr

735
00:29:06,399 --> 00:29:09,279
we're on the same page or sure yeah um a

736
00:29:09,279 --> 00:29:11,679
lot of

737
00:29:11,679 --> 00:29:14,559
basic group assumptions and

738
00:29:14,559 --> 00:29:16,640
the security proof reduces to one more

739
00:29:16,640 --> 00:29:18,960
diffie-hellman assumptions

740
00:29:18,960 --> 00:29:21,520
so we can talk but there are some

741
00:29:21,520 --> 00:29:23,440
security reductions that may not be

742
00:29:23,440 --> 00:29:26,150
available to pq systems

743
00:29:26,150 --> 00:29:30,420
[Laughter]

744
00:29:32,799 --> 00:29:35,200
okay the question online is no longer

745
00:29:35,200 --> 00:29:36,399
here okay

746
00:29:36,399 --> 00:29:38,399
so the queue is closed

747
00:29:38,399 --> 00:29:40,720
uh all right thanks deirdre thanks i'm

748
00:29:40,720 --> 00:29:42,480
here for today and then i'll be leaving

749
00:29:42,480 --> 00:29:45,360
so come find me

750
00:29:48,159 --> 00:29:51,720
all right chris wood

751
00:29:57,840 --> 00:30:00,000
uh i'm going to do both of them it

752
00:30:00,000 --> 00:30:02,880
doesn't matter which order

753
00:30:02,880 --> 00:30:04,720
all right uh so this is just an update

754
00:30:04,720 --> 00:30:06,320
on the the keep landing for signature

755
00:30:06,320 --> 00:30:08,480
schemes draft that was recently adopted

756
00:30:08,480 --> 00:30:11,760
uh next slide please

757
00:30:13,120 --> 00:30:15,039
so uh just to remind folks what this

758
00:30:15,039 --> 00:30:17,360
draft is all about um

759
00:30:17,360 --> 00:30:19,919
imagine you did not have um imagine the

760
00:30:19,919 --> 00:30:22,159
setting where you have a a what we call

761
00:30:22,159 --> 00:30:23,840
a proven a verifier approver wants to

762
00:30:23,840 --> 00:30:26,320
sign some message and

763
00:30:26,320 --> 00:30:27,919
have the verifier check that this

764
00:30:27,919 --> 00:30:29,600
particular signature on this message is

765
00:30:29,600 --> 00:30:30,559
fine

766
00:30:30,559 --> 00:30:32,320
kruger gets his input

767
00:30:32,320 --> 00:30:33,919
a secret key and a public key and a

768
00:30:33,919 --> 00:30:36,080
message as well does the signing thing

769
00:30:36,080 --> 00:30:38,080
sends the message in the public key and

770
00:30:38,080 --> 00:30:40,000
the proof uh or the signature all the

771
00:30:40,000 --> 00:30:41,360
way over to the verifier which just

772
00:30:41,360 --> 00:30:44,559
determines whether or not it's valid um

773
00:30:44,559 --> 00:30:46,240
and

774
00:30:46,240 --> 00:30:48,960
sort of uh obviously we don't want the

775
00:30:48,960 --> 00:30:50,799
the signature itself to be unforged or

776
00:30:50,799 --> 00:30:54,159
forgeable so um the approver can't uh

777
00:30:54,159 --> 00:30:55,840
trick the verifier into accepting this

778
00:30:55,840 --> 00:30:57,600
particular proof of the signature

779
00:30:57,600 --> 00:30:58,799
without actually like running the

780
00:30:58,799 --> 00:31:03,200
signing algorithm um next slide please

781
00:31:03,440 --> 00:31:04,640
um

782
00:31:04,640 --> 00:31:05,840
but there are other interesting

783
00:31:05,840 --> 00:31:07,760
applications wherein you know i might

784
00:31:07,760 --> 00:31:10,000
not want the the verifier to learn

785
00:31:10,000 --> 00:31:11,840
anything else about the approver like

786
00:31:11,840 --> 00:31:13,760
you might not want the verifier to learn

787
00:31:13,760 --> 00:31:16,720
that this specific public key that this

788
00:31:16,720 --> 00:31:19,279
specific prover owned was used to verify

789
00:31:19,279 --> 00:31:21,360
this message um

790
00:31:21,360 --> 00:31:23,519
his application's in tor this has

791
00:31:23,519 --> 00:31:25,200
applications in a variant of privacy

792
00:31:25,200 --> 00:31:27,279
pass as well as other cryptocurrency

793
00:31:27,279 --> 00:31:28,240
settings

794
00:31:28,240 --> 00:31:30,080
which we talk about

795
00:31:30,080 --> 00:31:34,240
and i will describe in the next slide

796
00:31:38,080 --> 00:31:39,919
um so imagine you had a slightly

797
00:31:39,919 --> 00:31:41,360
different scenario where you have now

798
00:31:41,360 --> 00:31:42,720
two provers each of which have their

799
00:31:42,720 --> 00:31:44,880
distinct sets of uh you know private and

800
00:31:44,880 --> 00:31:47,440
public key pairs they're both signing a

801
00:31:47,440 --> 00:31:49,760
message um they run their signing over

802
00:31:49,760 --> 00:31:51,360
them independently and they send them to

803
00:31:51,360 --> 00:31:54,399
some with some middleman or

804
00:31:54,399 --> 00:31:56,559
intermediary we call the mediator

805
00:31:56,559 --> 00:31:58,480
mediator choose a bit chooses a bit at

806
00:31:58,480 --> 00:32:01,039
random and then sends the message the

807
00:32:01,039 --> 00:32:02,880
public key corresponding to the bit and

808
00:32:02,880 --> 00:32:04,159
the signature corresponding to the

809
00:32:04,159 --> 00:32:06,000
chosen bit to the verifier and the

810
00:32:06,000 --> 00:32:07,760
verified dose the check has before it

811
00:32:07,760 --> 00:32:09,200
wants to see if the signature over the

812
00:32:09,200 --> 00:32:10,960
message is valid

813
00:32:10,960 --> 00:32:12,559
and it also wants to try to determine

814
00:32:12,559 --> 00:32:15,279
what was the bit that was chosen by the

815
00:32:15,279 --> 00:32:18,960
mediator next slide please

816
00:32:19,200 --> 00:32:20,080
um

817
00:32:20,080 --> 00:32:22,399
so we have the same property as before

818
00:32:22,399 --> 00:32:24,399
the the signature itself is not uh

819
00:32:24,399 --> 00:32:26,320
forgeable which is great

820
00:32:26,320 --> 00:32:29,440
next slide

821
00:32:29,440 --> 00:32:31,120
um but we don't have this other property

822
00:32:31,120 --> 00:32:34,399
of sort of unlinkability wherein um the

823
00:32:34,399 --> 00:32:36,080
the verifier doesn't learn basically

824
00:32:36,080 --> 00:32:38,240
which prover generated this particular

825
00:32:38,240 --> 00:32:39,840
signature because the verifier is

826
00:32:39,840 --> 00:32:41,440
assumed to have as input the public key

827
00:32:41,440 --> 00:32:43,279
is corresponding to zero and prover one

828
00:32:43,279 --> 00:32:44,480
then they could just simply check does

829
00:32:44,480 --> 00:32:47,360
this validate with uh public key zero or

830
00:32:47,360 --> 00:32:49,360
does this validate with public key one

831
00:32:49,360 --> 00:32:51,360
and that determines my bit

832
00:32:51,360 --> 00:32:53,600
um so that's the property we want next

833
00:32:53,600 --> 00:32:54,840
slide

834
00:32:54,840 --> 00:32:59,440
please um and so this this signing um uh

835
00:32:59,440 --> 00:33:01,679
with key blinding extension of a digital

836
00:33:01,679 --> 00:33:03,440
signature scheme is basically how we go

837
00:33:03,440 --> 00:33:05,679
about constructing this um and it

838
00:33:05,679 --> 00:33:07,679
basically has two fundamental properties

839
00:33:07,679 --> 00:33:09,039
the first of which is that the per

840
00:33:09,039 --> 00:33:10,799
message public keys that are produced

841
00:33:10,799 --> 00:33:12,480
are independently distributed from what

842
00:33:12,480 --> 00:33:14,320
we call the long-term public keys of a

843
00:33:14,320 --> 00:33:16,559
particular signer so these

844
00:33:16,559 --> 00:33:19,600
uh pk0 and pk1 in the previous slide

845
00:33:19,600 --> 00:33:21,120
and moreover that the signatures that

846
00:33:21,120 --> 00:33:22,640
are produced don't leak any information

847
00:33:22,640 --> 00:33:25,519
about the long-term signing keys um

848
00:33:25,519 --> 00:33:27,039
and this is what the this construction

849
00:33:27,039 --> 00:33:28,960
allows us to to achieve

850
00:33:28,960 --> 00:33:31,760
next slide please

851
00:33:32,080 --> 00:33:33,679
so i said it was a sort of an extension

852
00:33:33,679 --> 00:33:35,840
of a basic digital signature scheme and

853
00:33:35,840 --> 00:33:39,440
um it the extension basically adds in

854
00:33:39,440 --> 00:33:41,679
three new functions on top of your

855
00:33:41,679 --> 00:33:43,679
classical key generation signing and

856
00:33:43,679 --> 00:33:44,799
verifying

857
00:33:44,799 --> 00:33:46,799
three of functions are

858
00:33:46,799 --> 00:33:49,679
a new function to generate a blind key

859
00:33:49,679 --> 00:33:52,720
uh blind key gen um a function to blind

860
00:33:52,720 --> 00:33:55,600
a public key and then a function to sign

861
00:33:55,600 --> 00:33:58,320
with a blinded key

862
00:33:58,320 --> 00:34:00,720
and the uh the correctness property that

863
00:34:00,720 --> 00:34:02,320
we want is sort of listed at the bottom

864
00:34:02,320 --> 00:34:03,840
so you can run the verification

865
00:34:03,840 --> 00:34:09,199
algorithm uh over a blinded public key

866
00:34:09,199 --> 00:34:12,000
or against a blinded public key

867
00:34:12,000 --> 00:34:13,599
using

868
00:34:13,599 --> 00:34:14,399
a

869
00:34:14,399 --> 00:34:16,159
the output of the blind key sign

870
00:34:16,159 --> 00:34:17,280
function

871
00:34:17,280 --> 00:34:18,879
with that same blinded key and

872
00:34:18,879 --> 00:34:21,040
everything should work out just fine the

873
00:34:21,040 --> 00:34:22,639
verifier is totally unaware that this

874
00:34:22,639 --> 00:34:24,879
particular procedure took place behind

875
00:34:24,879 --> 00:34:26,639
the scenes um it just knows that the

876
00:34:26,639 --> 00:34:29,359
signature is valid and was not forged

877
00:34:29,359 --> 00:34:31,199
which is which is great next slide

878
00:34:31,199 --> 00:34:34,079
please

879
00:34:34,079 --> 00:34:35,839
there's uh also

880
00:34:35,839 --> 00:34:37,599
optionally the ability to add yep

881
00:34:37,599 --> 00:34:39,119
another function to this particular

882
00:34:39,119 --> 00:34:41,520
construction um the the ability to

883
00:34:41,520 --> 00:34:44,399
unblind a public key so if i give you a

884
00:34:44,399 --> 00:34:46,159
blinded public key as well as the blind

885
00:34:46,159 --> 00:34:48,239
key that was used to produce that binded

886
00:34:48,239 --> 00:34:50,159
public key you can invert the operation

887
00:34:50,159 --> 00:34:53,440
and recover the sort of the long term or

888
00:34:53,440 --> 00:34:55,440
the the the input public key that was

889
00:34:55,440 --> 00:34:56,639
not blinded

890
00:34:56,639 --> 00:34:57,680
um

891
00:34:57,680 --> 00:34:59,599
so here you just basically the inverse

892
00:34:59,599 --> 00:35:00,800
of one another

893
00:35:00,800 --> 00:35:03,760
um and

894
00:35:03,760 --> 00:35:04,880
i don't know what happened to me echo

895
00:35:04,880 --> 00:35:07,200
but i'm just gonna keep talking um and

896
00:35:07,200 --> 00:35:08,800
so the question uh

897
00:35:08,800 --> 00:35:10,640
for the draft specifically was how do we

898
00:35:10,640 --> 00:35:12,800
achieve this sort of optionality in

899
00:35:12,800 --> 00:35:14,800
practice um

900
00:35:14,800 --> 00:35:17,359
x5 please

901
00:35:17,359 --> 00:35:19,599
and so we chose to do uh the proposal

902
00:35:19,599 --> 00:35:21,119
that we came up with was to sort of

903
00:35:21,119 --> 00:35:23,520
contextualize the blind public key

904
00:35:23,520 --> 00:35:25,920
function itself so previously it just

905
00:35:25,920 --> 00:35:29,280
took as input a long-term public key a

906
00:35:29,280 --> 00:35:32,640
fresh ephemeral blinding key skb

907
00:35:32,640 --> 00:35:33,760
and that was it would just produce a

908
00:35:33,760 --> 00:35:36,160
blind and public key but now we slot in

909
00:35:36,160 --> 00:35:38,480
this additional context string

910
00:35:38,480 --> 00:35:40,240
where context can be entirely

911
00:35:40,240 --> 00:35:41,920
application defined so

912
00:35:41,920 --> 00:35:44,400
for example in the the privacy pass

913
00:35:44,400 --> 00:35:46,480
application it's empty it doesn't have

914
00:35:46,480 --> 00:35:48,400
any particular value and that allows

915
00:35:48,400 --> 00:35:51,040
this unblinding operation to take place

916
00:35:51,040 --> 00:35:52,880
um because

917
00:35:52,880 --> 00:35:54,880
uh the person who wants to unblind knows

918
00:35:54,880 --> 00:35:56,960
what context is and they can do so

919
00:35:56,960 --> 00:35:59,119
in the context of tor

920
00:35:59,119 --> 00:36:00,079
there's a slightly different

921
00:36:00,079 --> 00:36:01,839
construction for specifying what the

922
00:36:01,839 --> 00:36:04,160
context is includes the long-term public

923
00:36:04,160 --> 00:36:06,480
key and like a time stamp

924
00:36:06,480 --> 00:36:08,079
or whatever i forget exactly how it's

925
00:36:08,079 --> 00:36:09,440
encoded but that's functionally sort of

926
00:36:09,440 --> 00:36:10,880
what happens

927
00:36:10,880 --> 00:36:12,800
and that sort of prevents this

928
00:36:12,800 --> 00:36:14,320
unblinding step from taking place

929
00:36:14,320 --> 00:36:16,000
because you don't know as a verifier

930
00:36:16,000 --> 00:36:17,440
either one of these uh you don't know

931
00:36:17,440 --> 00:36:19,280
the long-term public key

932
00:36:19,280 --> 00:36:21,599
um the proposed change is up on a pull

933
00:36:21,599 --> 00:36:23,440
request it's been reviewed by a couple

934
00:36:23,440 --> 00:36:24,800
people um it seems pretty

935
00:36:24,800 --> 00:36:26,079
straightforward and obvious so we'll

936
00:36:26,079 --> 00:36:27,680
likely land that after we get some

937
00:36:27,680 --> 00:36:29,680
implementations and uh new test factors

938
00:36:29,680 --> 00:36:30,480
going

939
00:36:30,480 --> 00:36:33,280
next slide please

940
00:36:33,359 --> 00:36:35,280
um okay and then just to remind people

941
00:36:35,280 --> 00:36:36,880
about the implementation status so we

942
00:36:36,880 --> 00:36:38,480
have implemented this for all of the

943
00:36:38,480 --> 00:36:39,920
signature teams that are in the draft

944
00:36:39,920 --> 00:36:42,560
both edu dsa and ecdsa

945
00:36:42,560 --> 00:36:44,160
and there are different inter they're

946
00:36:44,160 --> 00:36:45,200
interoperable these different

947
00:36:45,200 --> 00:36:47,040
implementations um

948
00:36:47,040 --> 00:36:49,280
we do have a security analysis of uh

949
00:36:49,280 --> 00:36:50,640
specifically the unlinkability and

950
00:36:50,640 --> 00:36:54,720
unforgeability of both eddsa and essay

951
00:36:54,720 --> 00:36:55,920
completed

952
00:36:55,920 --> 00:36:57,680
it's under peer review right now so not

953
00:36:57,680 --> 00:36:59,520
publicly available yet but if we you

954
00:36:59,520 --> 00:37:00,960
know ask the right potential we can make

955
00:37:00,960 --> 00:37:03,200
it available um next steps for this are

956
00:37:03,200 --> 00:37:04,960
to hopefully merge the pr that i just

957
00:37:04,960 --> 00:37:07,200
talked about and then start soliciting

958
00:37:07,200 --> 00:37:08,960
uh early review ideally from the crypto

959
00:37:08,960 --> 00:37:10,480
review panel because if that's at this

960
00:37:10,480 --> 00:37:11,839
point we think the document is feature

961
00:37:11,839 --> 00:37:13,760
complete

962
00:37:13,760 --> 00:37:16,000
um next slide i think that's it actually

963
00:37:16,000 --> 00:37:18,270
yeah questions

964
00:37:18,270 --> 00:37:21,329
[Music]

965
00:37:27,680 --> 00:37:28,960
uh if there's no

966
00:37:28,960 --> 00:37:31,280
there's um

967
00:37:31,280 --> 00:37:34,079
queues open online

968
00:37:34,079 --> 00:37:36,480
anybody joining

969
00:37:36,480 --> 00:37:38,640
uh it seems not thank you chris let's

970
00:37:38,640 --> 00:37:41,920
move on to the next presentation

971
00:37:48,560 --> 00:37:50,880
hello

972
00:37:50,880 --> 00:37:51,839
hello

973
00:37:51,839 --> 00:37:53,119
hi bjorn

974
00:37:53,119 --> 00:37:55,920
so finally

975
00:37:59,760 --> 00:38:01,520
at least i'm hearing

976
00:38:01,520 --> 00:38:02,880
could you show the

977
00:38:02,880 --> 00:38:05,839
slides

978
00:38:08,800 --> 00:38:12,160
what the next presentation yeah

979
00:38:15,040 --> 00:38:18,480
is it rsa or sequence

980
00:38:29,280 --> 00:38:32,480
chris will do another presentation

981
00:38:32,480 --> 00:38:33,680
there's one more presentation here and

982
00:38:33,680 --> 00:38:36,640
then we'll then we'll get to you

983
00:38:37,920 --> 00:38:40,400
okay um so this is a really quick update

984
00:38:40,400 --> 00:38:41,599
um

985
00:38:41,599 --> 00:38:43,440
thankfully in the interest of time

986
00:38:43,440 --> 00:38:45,680
for a while now we have the address of

987
00:38:45,680 --> 00:38:48,240
this this draft in the in the group on

988
00:38:48,240 --> 00:38:50,640
specifying blind signatures based on rsa

989
00:38:50,640 --> 00:38:52,400
that have been used in a huge number of

990
00:38:52,400 --> 00:38:54,079
applications so it was about time we

991
00:38:54,079 --> 00:38:56,160
wrote down how to do this correctly

992
00:38:56,160 --> 00:39:00,160
um next slide please

993
00:39:00,160 --> 00:39:03,200
uh thankfully uh we had someone um uh in

994
00:39:03,200 --> 00:39:05,040
the community conduct a security review

995
00:39:05,040 --> 00:39:08,160
of this the scheme in the paper um uh

996
00:39:08,160 --> 00:39:10,320
unfortunately however um it raised a

997
00:39:10,320 --> 00:39:12,400
number of uh concerns with the draft

998
00:39:12,400 --> 00:39:14,480
that specified that were not things that

999
00:39:14,480 --> 00:39:16,079
were considered in prior analysis of the

1000
00:39:16,079 --> 00:39:17,440
construction

1001
00:39:17,440 --> 00:39:19,520
the main insight was that previously

1002
00:39:19,520 --> 00:39:20,720
when trying to reason about the

1003
00:39:20,720 --> 00:39:23,119
blindness property of blind rsa

1004
00:39:23,119 --> 00:39:25,200
folks did not consider what happens if

1005
00:39:25,200 --> 00:39:27,520
the signers public key is generated

1006
00:39:27,520 --> 00:39:28,880
maliciously

1007
00:39:28,880 --> 00:39:29,839
because you're trying to define

1008
00:39:29,839 --> 00:39:31,200
blindness against this person who's

1009
00:39:31,200 --> 00:39:33,040
verifying the public key and if they

1010
00:39:33,040 --> 00:39:34,240
construct this public key in a

1011
00:39:34,240 --> 00:39:36,160
particular way in a malicious way

1012
00:39:36,160 --> 00:39:37,760
information can leak when the client

1013
00:39:37,760 --> 00:39:39,440
engages with the protocol

1014
00:39:39,440 --> 00:39:42,320
which is not great um and this is

1015
00:39:42,320 --> 00:39:44,079
specifically or especially problematic

1016
00:39:44,079 --> 00:39:45,520
for the deterministic variants in the

1017
00:39:45,520 --> 00:39:47,440
draft specifically those that use the

1018
00:39:47,440 --> 00:39:48,880
full domain hash

1019
00:39:48,880 --> 00:39:51,280
uh for the like actually encoding of a

1020
00:39:51,280 --> 00:39:52,720
message and any other sort of

1021
00:39:52,720 --> 00:39:54,480
deterministic variant like pss with a

1022
00:39:54,480 --> 00:39:56,400
zero like salt or whatever

1023
00:39:56,400 --> 00:39:58,079
um

1024
00:39:58,079 --> 00:39:58,880
so

1025
00:39:58,880 --> 00:40:00,240
it's important to know that this is only

1026
00:40:00,240 --> 00:40:02,720
a problem with low entropy inputs so if

1027
00:40:02,720 --> 00:40:05,520
you are using blind rsa for a

1028
00:40:05,520 --> 00:40:07,920
like a voting application where you know

1029
00:40:07,920 --> 00:40:09,760
you're there's like five people or

1030
00:40:09,760 --> 00:40:12,560
whatever in your pool um

1031
00:40:12,560 --> 00:40:14,319
uh

1032
00:40:14,319 --> 00:40:16,640
running the protocol with this type of

1033
00:40:16,640 --> 00:40:20,079
input could leak your vote um or bits of

1034
00:40:20,079 --> 00:40:21,839
your vote um but if you have

1035
00:40:21,839 --> 00:40:22,960
applications where you have a high

1036
00:40:22,960 --> 00:40:25,760
entropy input like privacy pass that has

1037
00:40:25,760 --> 00:40:28,720
a like freshly chosen 32 byte nodes as

1038
00:40:28,720 --> 00:40:29,839
input

1039
00:40:29,839 --> 00:40:31,599
it's not an issue

1040
00:40:31,599 --> 00:40:33,119
it's also worth noting that it's also

1041
00:40:33,119 --> 00:40:35,119
not an issue if you have for example

1042
00:40:35,119 --> 00:40:36,800
proof that the private or the public key

1043
00:40:36,800 --> 00:40:38,400
was not chosen maliciously

1044
00:40:38,400 --> 00:40:40,720
you can in fact like generate

1045
00:40:40,720 --> 00:40:42,319
non-interactive zero-knowledge proofs

1046
00:40:42,319 --> 00:40:43,200
that

1047
00:40:43,200 --> 00:40:45,119
someone can check specifically the

1048
00:40:45,119 --> 00:40:46,319
client that wants to engage in this

1049
00:40:46,319 --> 00:40:48,640
protocol to see whether or not the the

1050
00:40:48,640 --> 00:40:51,280
public key was constructed correctly um

1051
00:40:51,280 --> 00:40:53,280
but they are not standard um and they

1052
00:40:53,280 --> 00:40:54,960
only give us sort of like probabilistic

1053
00:40:54,960 --> 00:40:57,599
guarantees that things are okay so

1054
00:40:57,599 --> 00:41:00,720
that said next slide

1055
00:41:00,800 --> 00:41:02,560
um a resolution to this issue and to

1056
00:41:02,560 --> 00:41:04,000
deal with this emerging security

1057
00:41:04,000 --> 00:41:07,839
analysis is um basically to uh start

1058
00:41:07,839 --> 00:41:09,599
stripping away things that we we

1059
00:41:09,599 --> 00:41:11,760
included for the purposes of you know

1060
00:41:11,760 --> 00:41:13,680
having the draft be maximally useful for

1061
00:41:13,680 --> 00:41:16,240
a number of applications um

1062
00:41:16,240 --> 00:41:17,680
now the first of which is we're going to

1063
00:41:17,680 --> 00:41:19,359
like remove all the deterministic

1064
00:41:19,359 --> 00:41:21,040
variants from the draft

1065
00:41:21,040 --> 00:41:23,440
and just sort of enforce it require that

1066
00:41:23,440 --> 00:41:25,760
pss with a salt length that matches that

1067
00:41:25,760 --> 00:41:29,359
underlying hash digest is the way to go

1068
00:41:29,359 --> 00:41:31,119
perhaps in the future if there's you

1069
00:41:31,119 --> 00:41:33,520
know some new insight that we get

1070
00:41:33,520 --> 00:41:35,359
that allows us to like bring this back

1071
00:41:35,359 --> 00:41:36,720
or some of the deterministic variant

1072
00:41:36,720 --> 00:41:38,400
back to do so in a separate draft i

1073
00:41:38,400 --> 00:41:39,680
don't think it needs to block this

1074
00:41:39,680 --> 00:41:41,040
particular work

1075
00:41:41,040 --> 00:41:43,119
um and we also

1076
00:41:43,119 --> 00:41:46,079
added text to talk about what happens if

1077
00:41:46,079 --> 00:41:47,599
you're an application that has low

1078
00:41:47,599 --> 00:41:50,160
entropy inputs

1079
00:41:50,160 --> 00:41:52,160
specifically what you should do to add

1080
00:41:52,160 --> 00:41:54,240
entropy to your input generated locally

1081
00:41:54,240 --> 00:41:56,160
on the client

1082
00:41:56,160 --> 00:41:58,079
this is interesting because

1083
00:41:58,079 --> 00:41:59,920
if there's like randomness that's

1084
00:41:59,920 --> 00:42:01,599
generated locally before invoking the

1085
00:42:01,599 --> 00:42:03,680
signing protocol that randomness has to

1086
00:42:03,680 --> 00:42:06,160
be like part of the message now that the

1087
00:42:06,160 --> 00:42:08,560
verifiers will consume and verify

1088
00:42:08,560 --> 00:42:10,640
um so it does have api implications if

1089
00:42:10,640 --> 00:42:12,560
you're if you're you know using the

1090
00:42:12,560 --> 00:42:14,800
construction in that particular mode or

1091
00:42:14,800 --> 00:42:17,040
you're like generating local randomness

1092
00:42:17,040 --> 00:42:19,680
or local entropy

1093
00:42:19,680 --> 00:42:20,720
but if you're an application like

1094
00:42:20,720 --> 00:42:22,240
privacy fast that has high entropy

1095
00:42:22,240 --> 00:42:24,560
inputs you can use the scheme as it was

1096
00:42:24,560 --> 00:42:26,640
previously before without any without

1097
00:42:26,640 --> 00:42:28,240
any problems

1098
00:42:28,240 --> 00:42:30,800
next slide please

1099
00:42:30,800 --> 00:42:32,880
um so at this point uh before we

1100
00:42:32,880 --> 00:42:35,920
actually merge the change um i want to

1101
00:42:35,920 --> 00:42:38,079
you know do the check with folks to see

1102
00:42:38,079 --> 00:42:40,000
if anyone had a real concrete

1103
00:42:40,000 --> 00:42:41,599
application where deterministic signing

1104
00:42:41,599 --> 00:42:44,720
is actually a hard requirement

1105
00:42:44,720 --> 00:42:46,240
such that if we ripped it out it would

1106
00:42:46,240 --> 00:42:47,920
not break your use case

1107
00:42:47,920 --> 00:42:49,119
um

1108
00:42:49,119 --> 00:42:50,880
there's a lot of reasons

1109
00:42:50,880 --> 00:42:52,880
to pull this out the security concerns

1110
00:42:52,880 --> 00:42:54,960
are perhaps paramount

1111
00:42:54,960 --> 00:42:57,119
and there are two open pull requests to

1112
00:42:57,119 --> 00:42:59,839
um

1113
00:43:00,240 --> 00:43:03,440
basically propose a way to to

1114
00:43:03,440 --> 00:43:05,119
enact the proposed resolution that i

1115
00:43:05,119 --> 00:43:07,680
just went through one of which um i

1116
00:43:07,680 --> 00:43:09,440
forget the number i should have included

1117
00:43:09,440 --> 00:43:11,839
here my apologies um one of which

1118
00:43:11,839 --> 00:43:12,880
basically

1119
00:43:12,880 --> 00:43:14,640
introduces uh

1120
00:43:14,640 --> 00:43:16,480
like an external api on top of the

1121
00:43:16,480 --> 00:43:18,880
internal api or on top of the existing

1122
00:43:18,880 --> 00:43:20,240
api and the specification and this

1123
00:43:20,240 --> 00:43:21,680
external api would be the thing that's

1124
00:43:21,680 --> 00:43:23,680
responsible for sampling local

1125
00:43:23,680 --> 00:43:26,960
randomness and then equally or also

1126
00:43:26,960 --> 00:43:29,040
passing it to the verifier such that it

1127
00:43:29,040 --> 00:43:31,200
can verify randomness plus message

1128
00:43:31,200 --> 00:43:33,119
um and that's sort of the approach we're

1129
00:43:33,119 --> 00:43:35,119
leaning towards right now

1130
00:43:35,119 --> 00:43:36,800
minimally invasive

1131
00:43:36,800 --> 00:43:37,680
with

1132
00:43:37,680 --> 00:43:39,119
lots of text to talk about how

1133
00:43:39,119 --> 00:43:40,560
applications should

1134
00:43:40,560 --> 00:43:41,520
uh

1135
00:43:41,520 --> 00:43:42,560
use this

1136
00:43:42,560 --> 00:43:44,720
in a safe way

1137
00:43:44,720 --> 00:43:48,078
and i believe that's it

1138
00:43:48,160 --> 00:43:50,880
i don't think there's another slide

1139
00:43:50,880 --> 00:43:52,400
okay great

1140
00:43:52,400 --> 00:43:54,480
anybody have any uh feedback on this

1141
00:43:54,480 --> 00:43:57,440
question for the uh rg

1142
00:43:57,440 --> 00:43:58,960
i should know also that at this point

1143
00:43:58,960 --> 00:44:01,920
once uh once we merge this uh resolution

1144
00:44:01,920 --> 00:44:02,880
uh

1145
00:44:02,880 --> 00:44:04,560
uh like the keep lining draft we're

1146
00:44:04,560 --> 00:44:05,920
basically gonna be

1147
00:44:05,920 --> 00:44:08,000
done we will have the security analysis

1148
00:44:08,000 --> 00:44:10,400
and and everything complete so

1149
00:44:10,400 --> 00:44:11,920
whatever is the next step at that point

1150
00:44:11,920 --> 00:44:13,599
yeah i recommend getting some

1151
00:44:13,599 --> 00:44:15,359
confirmation on the list with a link to

1152
00:44:15,359 --> 00:44:16,319
the pr

1153
00:44:16,319 --> 00:44:18,800
if done

1154
00:44:20,720 --> 00:44:23,119
okay nobody's in the queue thank you

1155
00:44:23,119 --> 00:44:23,600
thanks chris

1156
00:44:23,600 --> 00:44:27,310
[Music]

1157
00:44:34,720 --> 00:44:36,960
so okay sorry for the night

1158
00:44:36,960 --> 00:44:39,359
early

1159
00:44:39,520 --> 00:44:41,119
just now

1160
00:44:41,119 --> 00:44:43,680
can you hear me

1161
00:44:43,839 --> 00:44:46,000
yes we can okay

1162
00:44:46,000 --> 00:44:49,119
well i'd like to give you a short update

1163
00:44:49,119 --> 00:44:51,520
regarding the extra

1164
00:44:51,520 --> 00:44:54,400
essentially maybe

1165
00:44:54,720 --> 00:44:57,440
essentially we have new content changed

1166
00:44:57,440 --> 00:45:00,640
in the current draft six which i've

1167
00:45:00,640 --> 00:45:02,880
uploaded yesterday

1168
00:45:02,880 --> 00:45:05,440
after the service got open again as you

1169
00:45:05,440 --> 00:45:08,720
go to slide into the next slide

1170
00:45:08,720 --> 00:45:11,040
and basically what we have been doing

1171
00:45:11,040 --> 00:45:12,400
when changing from

1172
00:45:12,400 --> 00:45:15,440
draft version five to six is that we

1173
00:45:15,440 --> 00:45:17,359
modified the write-up

1174
00:45:17,359 --> 00:45:18,560
so and

1175
00:45:18,560 --> 00:45:20,960
became clear in the discussions that we

1176
00:45:20,960 --> 00:45:23,760
had on the list and off the list that

1177
00:45:23,760 --> 00:45:26,480
we probably should focus on a clear set

1178
00:45:26,480 --> 00:45:27,520
of

1179
00:45:27,520 --> 00:45:30,400
readers and a clear set of audience

1180
00:45:30,400 --> 00:45:34,480
and as we have completed the security

1181
00:45:34,480 --> 00:45:36,880
analysis

1182
00:45:36,880 --> 00:45:39,760
of the pace in the asia paper

1183
00:45:39,760 --> 00:45:42,880
uh which clearly covers the scope and

1184
00:45:42,880 --> 00:45:44,400
the

1185
00:45:44,400 --> 00:45:46,800
cipher suites that we are discussing in

1186
00:45:46,800 --> 00:45:49,760
the draft we decided to

1187
00:45:49,760 --> 00:45:52,079
focus rather on the

1188
00:45:52,079 --> 00:45:54,160
on the perspective of the application

1189
00:45:54,160 --> 00:45:56,560
architecture designer

1190
00:45:56,560 --> 00:45:58,800
the implementer and tester

1191
00:45:58,800 --> 00:46:02,240
for implementations of cpace so

1192
00:46:02,240 --> 00:46:04,640
following the feedback that we got for

1193
00:46:04,640 --> 00:46:07,040
the version four and five drafts we

1194
00:46:07,040 --> 00:46:10,160
rewrote the introduction completely and

1195
00:46:10,160 --> 00:46:12,319
focused it on on the implement

1196
00:46:12,319 --> 00:46:13,680
implementers

1197
00:46:13,680 --> 00:46:15,599
and that's uh

1198
00:46:15,599 --> 00:46:18,400
basically the change um which we have

1199
00:46:18,400 --> 00:46:19,680
applied

1200
00:46:19,680 --> 00:46:22,319
which covers the new draft version which

1201
00:46:22,319 --> 00:46:23,599
is online

1202
00:46:23,599 --> 00:46:26,240
and we would welcome

1203
00:46:26,240 --> 00:46:29,280
a broader review and

1204
00:46:29,280 --> 00:46:31,359
also maybe a review from a native

1205
00:46:31,359 --> 00:46:32,880
english speaker

1206
00:46:32,880 --> 00:46:34,560
regarding the draft

1207
00:46:34,560 --> 00:46:36,640
and the next step in our perspective

1208
00:46:36,640 --> 00:46:37,839
would be

1209
00:46:37,839 --> 00:46:38,880
a

1210
00:46:38,880 --> 00:46:42,480
review from the

1211
00:46:42,480 --> 00:46:45,599
crypto review panel

1212
00:46:45,599 --> 00:46:47,359
board and

1213
00:46:47,359 --> 00:46:48,480
other

1214
00:46:48,480 --> 00:46:49,839
potential

1215
00:46:49,839 --> 00:46:52,400
users and

1216
00:46:52,400 --> 00:46:53,680
people that

1217
00:46:53,680 --> 00:46:56,319
would be using cpas so that

1218
00:46:56,319 --> 00:46:57,760
if you go to the next slide that's

1219
00:46:57,760 --> 00:46:59,839
essentially the message

1220
00:46:59,839 --> 00:47:02,000
i'd like to motivate you to have a look

1221
00:47:02,000 --> 00:47:04,560
on the new write-up of the draft version

1222
00:47:04,560 --> 00:47:06,960
6.

1223
00:47:07,359 --> 00:47:09,119
so

1224
00:47:09,119 --> 00:47:11,680
as next step

1225
00:47:11,680 --> 00:47:13,520
and essentially from respect on the

1226
00:47:13,520 --> 00:47:18,040
content there's been no change

1227
00:47:26,400 --> 00:47:29,280
any quick comments

1228
00:47:29,680 --> 00:47:31,280
if not thank you

1229
00:47:31,280 --> 00:47:34,839
okay fine

1230
00:47:43,760 --> 00:47:47,200
um right uh the last two presentations

1231
00:47:47,200 --> 00:47:49,680
are related to recent

1232
00:47:49,680 --> 00:47:50,640
nist

1233
00:47:50,640 --> 00:47:53,839
results on

1234
00:47:56,160 --> 00:47:59,720
pqc contest

1235
00:48:13,280 --> 00:48:15,520
okay

1236
00:48:15,839 --> 00:48:18,880
sophia you can start

1237
00:48:18,880 --> 00:48:21,200
yes uh thank you

1238
00:48:21,200 --> 00:48:23,760
hi everyone uh today we're just giving a

1239
00:48:23,760 --> 00:48:26,240
quick presentation with tom biges

1240
00:48:26,240 --> 00:48:28,240
about the post quantum cryptography in

1241
00:48:28,240 --> 00:48:30,800
his process my name is viacelli uh thank

1242
00:48:30,800 --> 00:48:33,280
you for having us here uh next slide

1243
00:48:33,280 --> 00:48:35,839
please

1244
00:48:35,920 --> 00:48:37,599
okay so just to give you a little bit of

1245
00:48:37,599 --> 00:48:40,400
a disclaimer slash preface here um what

1246
00:48:40,400 --> 00:48:42,079
we're going to be presenting is not a

1247
00:48:42,079 --> 00:48:43,680
complete overview of the wholeness

1248
00:48:43,680 --> 00:48:45,280
process because that will take a really

1249
00:48:45,280 --> 00:48:46,720
long time to do

1250
00:48:46,720 --> 00:48:48,960
but we're just mainly summarizes the

1251
00:48:48,960 --> 00:48:50,880
results of the first milestone that this

1252
00:48:50,880 --> 00:48:53,040
process has actually reached

1253
00:48:53,040 --> 00:48:55,040
and there's some bias that you're going

1254
00:48:55,040 --> 00:48:56,720
to hear from us but we try to make the

1255
00:48:56,720 --> 00:48:59,040
presentation as neutral as possible and

1256
00:48:59,040 --> 00:49:01,680
we also not uh we're not pointing into

1257
00:49:01,680 --> 00:49:03,359
actually choosing any a specific

1258
00:49:03,359 --> 00:49:04,800
direction but rather treating this

1259
00:49:04,800 --> 00:49:06,559
presentation as a conversation we

1260
00:49:06,559 --> 00:49:09,200
started if you want to learn more um our

1261
00:49:09,200 --> 00:49:11,119
recommendation will be that you read

1262
00:49:11,119 --> 00:49:13,119
denise report of the first milestone

1263
00:49:13,119 --> 00:49:14,480
that they reach

1264
00:49:14,480 --> 00:49:17,839
uh next slide and now

1265
00:49:18,319 --> 00:49:21,359
yeah so if you saw the report

1266
00:49:21,359 --> 00:49:23,920
uh or some stuff on twitter then you

1267
00:49:23,920 --> 00:49:26,559
might have seen that uh kyber

1268
00:49:26,559 --> 00:49:28,839
is the ken that has been chosen for key

1269
00:49:28,839 --> 00:49:31,440
exchange in a post quantum way

1270
00:49:31,440 --> 00:49:33,520
and there are actually three signature

1271
00:49:33,520 --> 00:49:36,079
schemes uh we're going to provide a very

1272
00:49:36,079 --> 00:49:37,760
very brief overview here and basically

1273
00:49:37,760 --> 00:49:40,400
just stealing this report

1274
00:49:40,400 --> 00:49:42,240
and

1275
00:49:42,240 --> 00:49:43,200
yeah

1276
00:49:43,200 --> 00:49:45,599
summarizing it very very briefly so if

1277
00:49:45,599 --> 00:49:48,079
you go to the next slide um

1278
00:49:48,079 --> 00:49:49,760
kyber is the

1279
00:49:49,760 --> 00:49:51,680
chem the key encapsulation mechanism

1280
00:49:51,680 --> 00:49:53,359
that has been chosen

1281
00:49:53,359 --> 00:49:54,800
um

1282
00:49:54,800 --> 00:49:57,280
there are a few others that are still in

1283
00:49:57,280 --> 00:49:59,359
the running uh that might be

1284
00:49:59,359 --> 00:50:00,800
standardized later but that will

1285
00:50:00,800 --> 00:50:02,720
probably take a while still

1286
00:50:02,720 --> 00:50:05,040
uh kyber is quite fast

1287
00:50:05,040 --> 00:50:08,880
quite efficient and is based on lattices

1288
00:50:08,880 --> 00:50:10,640
uh something which is important in the

1289
00:50:10,640 --> 00:50:12,720
context of making protocols and putting

1290
00:50:12,720 --> 00:50:14,559
this into stuff is that it's important

1291
00:50:14,559 --> 00:50:16,559
to realize that cams are not the same

1292
00:50:16,559 --> 00:50:17,920
stiff helmet

1293
00:50:17,920 --> 00:50:18,640
so

1294
00:50:18,640 --> 00:50:21,200
while it has been applied into in for

1295
00:50:21,200 --> 00:50:24,319
example tls very straightforwardly

1296
00:50:24,319 --> 00:50:27,440
because canvas are interactive uh

1297
00:50:27,440 --> 00:50:29,200
you cannot put it for example into

1298
00:50:29,200 --> 00:50:30,800
signal

1299
00:50:30,800 --> 00:50:33,680
next slide please

1300
00:50:36,000 --> 00:50:38,400
okay all right um so i'm just talking

1301
00:50:38,400 --> 00:50:39,760
about the

1302
00:50:39,760 --> 00:50:42,079
key encapsulation mechanisms which are

1303
00:50:42,079 --> 00:50:44,480
basically the ones that necessarily uh

1304
00:50:44,480 --> 00:50:46,400
in order to step confidentiality in the

1305
00:50:46,400 --> 00:50:49,200
face of quantum computers but nist also

1306
00:50:49,200 --> 00:50:51,520
decided to select certain algorithm for

1307
00:50:51,520 --> 00:50:52,880
standardization

1308
00:50:52,880 --> 00:50:54,720
for to protect the authentication in the

1309
00:50:54,720 --> 00:50:56,319
face of quantum computers and those are

1310
00:50:56,319 --> 00:50:57,839
the signature schemes

1311
00:50:57,839 --> 00:50:59,839
and the ones that were chosen were three

1312
00:50:59,839 --> 00:51:01,839
uh the first one is deleting which is

1313
00:51:01,839 --> 00:51:03,680
very general purpose and it's the main

1314
00:51:03,680 --> 00:51:06,000
recommendation that this provides

1315
00:51:06,000 --> 00:51:07,680
but as you can see here and this is

1316
00:51:07,680 --> 00:51:09,520
light the sizes of the public gear and

1317
00:51:09,520 --> 00:51:11,359
the signature of the lithium is much

1318
00:51:11,359 --> 00:51:12,720
more bigger when compared with the

1319
00:51:12,720 --> 00:51:14,640
classical counterparts

1320
00:51:14,640 --> 00:51:16,720
on the bright side though the

1321
00:51:16,720 --> 00:51:18,720
computation times of the lithium is much

1322
00:51:18,720 --> 00:51:20,720
faster than the classical counterpart

1323
00:51:20,720 --> 00:51:22,880
that we use nowadays

1324
00:51:22,880 --> 00:51:25,680
next slide please

1325
00:51:26,240 --> 00:51:28,000
the second signature algorithm that

1326
00:51:28,000 --> 00:51:30,079
needs recommends for the standardization

1327
00:51:30,079 --> 00:51:31,359
no sorry that this is going to

1328
00:51:31,359 --> 00:51:33,040
standardize and it's recommended to be

1329
00:51:33,040 --> 00:51:36,079
used it's falcom which sizes are indeed

1330
00:51:36,079 --> 00:51:37,520
better if you compare them with the

1331
00:51:37,520 --> 00:51:39,200
lithium and could indeed be used in

1332
00:51:39,200 --> 00:51:41,440
certain protocols the problem with this

1333
00:51:41,440 --> 00:51:43,680
is that in order to instantiate falcom

1334
00:51:43,680 --> 00:51:45,839
you have to use a floating point

1335
00:51:45,839 --> 00:51:48,240
arithmetic and that could be really

1336
00:51:48,240 --> 00:51:50,400
cumbersome for certain implementations

1337
00:51:50,400 --> 00:51:51,920
because the implementation have to be

1338
00:51:51,920 --> 00:51:54,400
done very much correctly

1339
00:51:54,400 --> 00:51:56,000
so there's the assumption

1340
00:51:56,000 --> 00:51:58,559
that you could use this scheme but only

1341
00:51:58,559 --> 00:52:01,839
if you are correctly implementing it

1342
00:52:01,839 --> 00:52:04,319
next slide please

1343
00:52:04,319 --> 00:52:05,680
and the last one the last initial

1344
00:52:05,680 --> 00:52:07,839
algorithm that was proposed to or that

1345
00:52:07,839 --> 00:52:09,280
is going to be standardized this is

1346
00:52:09,280 --> 00:52:11,359
things uh which is a stateless hash

1347
00:52:11,359 --> 00:52:13,119
based signature that maybe you're

1348
00:52:13,119 --> 00:52:14,559
already a little bit familiar with

1349
00:52:14,559 --> 00:52:16,559
because the cfig has already a

1350
00:52:16,559 --> 00:52:18,760
standardized xmss and

1351
00:52:18,760 --> 00:52:20,559
lms

1352
00:52:20,559 --> 00:52:23,520
but as you can see here um the algorithm

1353
00:52:23,520 --> 00:52:24,400
has

1354
00:52:24,400 --> 00:52:26,400
nice sizes for the public key but not so

1355
00:52:26,400 --> 00:52:28,000
much for the signature

1356
00:52:28,000 --> 00:52:30,000
and indeed because it has a lot of hash

1357
00:52:30,000 --> 00:52:32,319
function calls it is pretty slow and

1358
00:52:32,319 --> 00:52:34,079
also there are many parameter sets that

1359
00:52:34,079 --> 00:52:35,599
essentially are going to be determined

1360
00:52:35,599 --> 00:52:37,920
by this but as it is currently right now

1361
00:52:37,920 --> 00:52:39,680
this system algorithm has a lot of

1362
00:52:39,680 --> 00:52:41,839
parameters and the reason why it was

1363
00:52:41,839 --> 00:52:43,760
chosen is because the previous schemes

1364
00:52:43,760 --> 00:52:45,599
as sorry the lithium is based on

1365
00:52:45,599 --> 00:52:47,359
lattice-based assumptions and this one

1366
00:52:47,359 --> 00:52:48,559
is based on a set of different

1367
00:52:48,559 --> 00:52:50,640
assumptions so it provides a wider range

1368
00:52:50,640 --> 00:52:53,599
of uh security notions for the schemes

1369
00:52:53,599 --> 00:52:56,319
next slide please

1370
00:52:57,599 --> 00:52:58,640
yeah so

1371
00:52:58,640 --> 00:53:01,359
to briefly refresh or reflect on those

1372
00:53:01,359 --> 00:53:04,079
current itf standards um it's very

1373
00:53:04,079 --> 00:53:05,520
important to realize that those are

1374
00:53:05,520 --> 00:53:08,400
stateful hashtag signatures so although

1375
00:53:08,400 --> 00:53:10,240
they are quite a bit smaller than what

1376
00:53:10,240 --> 00:53:12,079
sphinx bus is giving you

1377
00:53:12,079 --> 00:53:12,839
uh

1378
00:53:12,839 --> 00:53:15,920
this condition

1379
00:53:18,000 --> 00:53:20,960
and um if you for example

1380
00:53:20,960 --> 00:53:22,880
uh restore your key from a backup you're

1381
00:53:22,880 --> 00:53:25,200
completely screwed

1382
00:53:25,200 --> 00:53:28,559
um so that's why it's important to note

1383
00:53:28,559 --> 00:53:30,240
that this is definitely a very

1384
00:53:30,240 --> 00:53:33,200
significant difference

1385
00:53:33,200 --> 00:53:36,160
falcon and the lithium are of course

1386
00:53:36,160 --> 00:53:40,079
based on lattices and do not have state

1387
00:53:40,079 --> 00:53:43,520
next slide please

1388
00:53:43,520 --> 00:53:45,200
so i already briefly mentioned that

1389
00:53:45,200 --> 00:53:47,280
there's a few more camps that are still

1390
00:53:47,280 --> 00:53:49,040
in the race uh

1391
00:53:49,040 --> 00:53:51,040
if you read the report it's more or less

1392
00:53:51,040 --> 00:53:52,480
feels like

1393
00:53:52,480 --> 00:53:54,319
uh this is either waiting for more

1394
00:53:54,319 --> 00:53:56,400
research

1395
00:53:56,400 --> 00:53:59,119
and waiting too much mature

1396
00:53:59,119 --> 00:54:01,839
certain scenes schemes a bit more

1397
00:54:01,839 --> 00:54:03,520
and otherwise isn't exactly sure what to

1398
00:54:03,520 --> 00:54:05,280
do

1399
00:54:05,280 --> 00:54:07,680
so mclee's

1400
00:54:07,680 --> 00:54:10,480
bike and hqc are all based on codes uh

1401
00:54:10,480 --> 00:54:12,480
classic mclease has a very tiny

1402
00:54:12,480 --> 00:54:13,920
ciphertext but

1403
00:54:13,920 --> 00:54:15,599
probably keys in the megabytes so this

1404
00:54:15,599 --> 00:54:17,839
isn't sure if that's actually useful

1405
00:54:17,839 --> 00:54:20,559
uh tell them if you actually do like it

1406
00:54:20,559 --> 00:54:22,079
psych is

1407
00:54:22,079 --> 00:54:25,280
very fancy esogenies math but it's very

1408
00:54:25,280 --> 00:54:26,160
new

1409
00:54:26,160 --> 00:54:29,119
still quite slow uh but actually very

1410
00:54:29,119 --> 00:54:31,599
very small uh compared to geiber so that

1411
00:54:31,599 --> 00:54:34,559
is very nice and bike and hqc are sort

1412
00:54:34,559 --> 00:54:36,000
of similar but have slightly different

1413
00:54:36,000 --> 00:54:38,240
tradeoffs you see that these schemes are

1414
00:54:38,240 --> 00:54:40,960
all not lattices which seems like uh

1415
00:54:40,960 --> 00:54:43,760
yeah the main feature uh in these

1416
00:54:43,760 --> 00:54:45,680
alternates

1417
00:54:45,680 --> 00:54:47,119
and then

1418
00:54:47,119 --> 00:54:48,640
there's going to be some signatures as

1419
00:54:48,640 --> 00:54:50,160
well and that's what sofia is going to

1420
00:54:50,160 --> 00:54:53,839
tell you about in the next slide

1421
00:54:54,000 --> 00:54:55,680
yes finally as they said the nice

1422
00:54:55,680 --> 00:54:57,599
process is not ended but rather they

1423
00:54:57,599 --> 00:54:59,599
reached the first milestone one thing

1424
00:54:59,599 --> 00:55:01,359
that they also announced is that the

1425
00:55:01,359 --> 00:55:03,119
aston said they're going to be still

1426
00:55:03,119 --> 00:55:04,960
advancing certain algorithms for a

1427
00:55:04,960 --> 00:55:06,880
fourth run and they also are calling now

1428
00:55:06,880 --> 00:55:09,200
for a next call of proposals uh

1429
00:55:09,200 --> 00:55:10,880
specifically for digital signature

1430
00:55:10,880 --> 00:55:12,880
algorithms and the reason is because as

1431
00:55:12,880 --> 00:55:15,280
you saw the majority of digital signatu

1432
00:55:15,280 --> 00:55:17,440
signature algorithms have like bigger

1433
00:55:17,440 --> 00:55:19,119
sizes that maybe would be cumbersome

1434
00:55:19,119 --> 00:55:20,559
when actually putting them into

1435
00:55:20,559 --> 00:55:22,880
networking protocols so this new round

1436
00:55:22,880 --> 00:55:24,880
is going to come there's already some

1437
00:55:24,880 --> 00:55:26,559
hope of certain algorithms let's for

1438
00:55:26,559 --> 00:55:28,960
example mayo that seems very nice but it

1439
00:55:28,960 --> 00:55:32,079
still needs a certain um security checks

1440
00:55:32,079 --> 00:55:33,280
to actually attest to the correct

1441
00:55:33,280 --> 00:55:35,599
security of the algorithm and of course

1442
00:55:35,599 --> 00:55:37,920
also to just let you know don't expect

1443
00:55:37,920 --> 00:55:41,119
any mr standards before 2030 because at

1444
00:55:41,119 --> 00:55:43,520
least the end of this next call of the

1445
00:55:43,520 --> 00:55:45,760
process is going to take several years

1446
00:55:45,760 --> 00:55:48,480
as it did with the previous call

1447
00:55:48,480 --> 00:55:51,359
nexus live please

1448
00:55:51,520 --> 00:55:53,040
okay if you are actually very

1449
00:55:53,040 --> 00:55:55,200
interesting and we want to really start

1450
00:55:55,200 --> 00:55:57,440
uh running code there's already all of

1451
00:55:57,440 --> 00:55:59,520
these libraries specifically libreoqs

1452
00:55:59,520 --> 00:56:00,960
it's a really great library because it

1453
00:56:00,960 --> 00:56:02,640
performs a lot of safety check of the

1454
00:56:02,640 --> 00:56:04,799
best quantum algorithms and it has many

1455
00:56:04,799 --> 00:56:06,640
bindings to different other uh

1456
00:56:06,640 --> 00:56:08,559
programming languages there's also the

1457
00:56:08,559 --> 00:56:10,640
eu clean and pqm4 especially

1458
00:56:10,640 --> 00:56:14,640
specifically for embedded applications

1459
00:56:14,640 --> 00:56:17,839
nexus live please

1460
00:56:20,240 --> 00:56:21,760
ah this one i think should have been

1461
00:56:21,760 --> 00:56:24,720
dropped but uh yeah so these are some of

1462
00:56:24,720 --> 00:56:26,480
the questions that you might ask today

1463
00:56:26,480 --> 00:56:27,599
basically

1464
00:56:27,599 --> 00:56:30,599
do

1465
00:56:30,960 --> 00:56:35,280
or a problem can we go to the next slide

1466
00:56:36,319 --> 00:56:39,280
so here we have a collection of links uh

1467
00:56:39,280 --> 00:56:41,280
notably this report that we believe and

1468
00:56:41,280 --> 00:56:43,440
we plagiarize here

1469
00:56:43,440 --> 00:56:45,520
and also some other fun

1470
00:56:45,520 --> 00:56:48,240
research papers as well as some

1471
00:56:48,240 --> 00:56:49,920
blog posts that have

1472
00:56:49,920 --> 00:56:51,680
real work measurements

1473
00:56:51,680 --> 00:56:53,839
and a nice talk from some colleagues of

1474
00:56:53,839 --> 00:56:55,839
mine that explain kyra for more general

1475
00:56:55,839 --> 00:56:57,839
audience if you're not very into

1476
00:56:57,839 --> 00:57:00,400
lattices

1477
00:57:00,960 --> 00:57:03,200
these links are all in the in the slide

1478
00:57:03,200 --> 00:57:06,000
deck so as far as just clicking the

1479
00:57:06,000 --> 00:57:08,319
next slide

1480
00:57:08,319 --> 00:57:10,559
and that was it already

1481
00:57:10,559 --> 00:57:12,240
we were trying to keep this slightly

1482
00:57:12,240 --> 00:57:13,680
short to

1483
00:57:13,680 --> 00:57:15,680
enable asking lots of questions or

1484
00:57:15,680 --> 00:57:17,920
perhaps start discussion

1485
00:57:17,920 --> 00:57:19,040
um

1486
00:57:19,040 --> 00:57:21,280
so i guess we'll be taking questions and

1487
00:57:21,280 --> 00:57:22,720
uh there's one comment i can make

1488
00:57:22,720 --> 00:57:25,359
already uh responding to the chat

1489
00:57:25,359 --> 00:57:26,640
um

1490
00:57:26,640 --> 00:57:29,119
the non-interactive versus interactive

1491
00:57:29,119 --> 00:57:32,400
thing with kens is a very important

1492
00:57:32,400 --> 00:57:33,440
issue

1493
00:57:33,440 --> 00:57:35,599
and it's important to realize right now

1494
00:57:35,599 --> 00:57:37,839
that there's no solution for

1495
00:57:37,839 --> 00:57:39,920
non-interactive postpartum key exchange

1496
00:57:39,920 --> 00:57:41,200
yet

1497
00:57:41,200 --> 00:57:44,160
that we have a lot of confidence in

1498
00:57:44,160 --> 00:57:47,200
there is seaside which is not in this

1499
00:57:47,200 --> 00:57:48,799
standardization project and will

1500
00:57:48,799 --> 00:57:51,520
probably not enter it right now

1501
00:57:51,520 --> 00:57:55,680
uh seaside security is hotly contested

1502
00:57:55,680 --> 00:57:57,040
and

1503
00:57:57,040 --> 00:57:59,599
although it's quite small it's also very

1504
00:57:59,599 --> 00:58:02,480
very very very slow

1505
00:58:02,480 --> 00:58:03,760
even at the

1506
00:58:03,760 --> 00:58:05,359
very aggressive

1507
00:58:05,359 --> 00:58:08,240
parameter set that exists today and

1508
00:58:08,240 --> 00:58:10,559
there's some

1509
00:58:10,559 --> 00:58:12,240
work that i've seen that suggests that

1510
00:58:12,240 --> 00:58:13,680
if you want to go conservative for that

1511
00:58:13,680 --> 00:58:16,000
scheme you're looking at

1512
00:58:16,000 --> 00:58:18,880
tens of seconds of operation times which

1513
00:58:18,880 --> 00:58:19,839
is

1514
00:58:19,839 --> 00:58:21,599
not nice

1515
00:58:21,599 --> 00:58:24,160
but seaside yeah it's very new i don't

1516
00:58:24,160 --> 00:58:25,839
think that will be standardized anytime

1517
00:58:25,839 --> 00:58:28,000
soon so it's looking that for now we

1518
00:58:28,000 --> 00:58:30,319
will not have non-interactive key

1519
00:58:30,319 --> 00:58:31,440
exchange

1520
00:58:31,440 --> 00:58:35,000
uh post quantumly

1521
00:58:36,319 --> 00:58:38,640
um

1522
00:58:43,200 --> 00:58:45,760
there was also one question regarding

1523
00:58:45,760 --> 00:58:48,640
lattice's attacks um yeah it is true

1524
00:58:48,640 --> 00:58:50,400
that there has been some research about

1525
00:58:50,400 --> 00:58:53,920
the matter but no drawing conclusion

1526
00:58:53,920 --> 00:58:56,559
there has been another clear conclusion

1527
00:58:56,559 --> 00:58:58,400
about the matter and so far it seems

1528
00:58:58,400 --> 00:58:59,920
that the security assumptions under

1529
00:58:59,920 --> 00:59:01,839
which the specific lattice problems that

1530
00:59:01,839 --> 00:59:05,440
are used by the quantum algorithms seem

1531
00:59:05,440 --> 00:59:07,760
to be secure

1532
00:59:07,760 --> 00:59:10,319
but yes perhaps something's

1533
00:59:10,319 --> 00:59:12,000
you got them sorry

1534
00:59:12,000 --> 00:59:14,400
yeah so

1535
00:59:14,400 --> 00:59:16,960
this is all of course the

1536
00:59:16,960 --> 00:59:18,960
there are minimum schemes so i need

1537
00:59:18,960 --> 00:59:21,119
threshold or fancy stuff uh i think

1538
00:59:21,119 --> 00:59:22,480
there's a lot of research to be done

1539
00:59:22,480 --> 00:59:24,880
there still

1540
00:59:24,880 --> 00:59:27,599
and i see falcon being brought up

1541
00:59:27,599 --> 00:59:29,119
and i think it's important to emphasize

1542
00:59:29,119 --> 00:59:31,359
that nist explicitly wrote that the

1543
00:59:31,359 --> 00:59:33,920
lithium is the primary candidate

1544
00:59:33,920 --> 00:59:36,160
uh for signature schemes

1545
00:59:36,160 --> 00:59:37,200
because

1546
00:59:37,200 --> 00:59:41,760
falcon is very easy to mess up

1547
00:59:41,760 --> 00:59:44,079
which is also sort of evidenced by the

1548
00:59:44,079 --> 00:59:45,760
there's basically only one

1549
00:59:45,760 --> 00:59:47,680
implementation of the scheme which kind

1550
00:59:47,680 --> 00:59:48,480
of

1551
00:59:48,480 --> 00:59:51,040
is a testament to

1552
00:59:51,040 --> 00:59:53,040
the fact that if just implementing

1553
00:59:53,040 --> 00:59:56,720
falcon is a technical achievement

1554
00:59:56,720 --> 00:59:58,640
and

1555
00:59:58,640 --> 01:00:02,640
indeed nist explicitly noted in his

1556
01:00:02,640 --> 01:00:04,720
recommendation that

1557
01:00:04,720 --> 01:00:07,119
if implemented correctly which i think

1558
01:00:07,119 --> 01:00:10,920
is is quite telling

1559
01:00:16,160 --> 01:00:17,839
uh we have a question from

1560
01:00:17,839 --> 01:00:20,480
uh scott fleur uh this is scott floor

1561
01:00:20,480 --> 01:00:23,040
cisco systems uh one issue that you did

1562
01:00:23,040 --> 01:00:27,119
not bring up is ipr concerns uh kyber uh

1563
01:00:27,119 --> 01:00:29,599
then this the the soul in this chem uh

1564
01:00:29,599 --> 01:00:31,040
final uh

1565
01:00:31,040 --> 01:00:32,240
selection

1566
01:00:32,240 --> 01:00:34,880
uh has plausible patents on it and we

1567
01:00:34,880 --> 01:00:36,400
don't know if those patents are valid

1568
01:00:36,400 --> 01:00:38,000
until some judge

1569
01:00:38,000 --> 01:00:40,160
makes a ruling which will not happen

1570
01:00:40,160 --> 01:00:41,359
quickly

1571
01:00:41,359 --> 01:00:43,599
uh nist has uh

1572
01:00:43,599 --> 01:00:45,920
some agreements uh with the various

1573
01:00:45,920 --> 01:00:47,359
patent holders but they have not

1574
01:00:47,359 --> 01:00:49,119
published them so we do not know if

1575
01:00:49,119 --> 01:00:52,079
they'll be acceptable to everybody

1576
01:00:52,079 --> 01:00:54,079
uh if that's not the case it sounds like

1577
01:00:54,079 --> 01:00:57,599
we need to actually have an alternative

1578
01:00:57,599 --> 01:00:59,680
most likely and true even though it was

1579
01:00:59,680 --> 01:01:02,400
not selected by nist

1580
01:01:02,400 --> 01:01:03,520
your comments

1581
01:01:03,520 --> 01:01:05,599
uh thank you for raising that um that

1582
01:01:05,599 --> 01:01:06,880
will be true

1583
01:01:06,880 --> 01:01:09,920
and specifically underneath report uh

1584
01:01:09,920 --> 01:01:11,680
announcing the selected algorithms for

1585
01:01:11,680 --> 01:01:13,599
the standardization niche does indeed

1586
01:01:13,599 --> 01:01:16,319
know this and they think i said i think

1587
01:01:16,319 --> 01:01:18,000
they say that if the patents have not

1588
01:01:18,000 --> 01:01:20,319
been resolved by the end of this year

1589
01:01:20,319 --> 01:01:22,480
um they will be advancing and true

1590
01:01:22,480 --> 01:01:24,079
instead of kaiba

1591
01:01:24,079 --> 01:01:27,520
so indeed it has been addressed by myth

1592
01:01:27,520 --> 01:01:28,880
uh

1593
01:01:28,880 --> 01:01:30,799
yeah i don't know if we particularly

1594
01:01:30,799 --> 01:01:33,839
want to necessarily wait till 2023 and

1595
01:01:33,839 --> 01:01:36,480
also uh resolving things to miss

1596
01:01:36,480 --> 01:01:38,799
satisfaction does not mean it's satisf

1597
01:01:38,799 --> 01:01:40,400
as resolving things to everyone else's

1598
01:01:40,400 --> 01:01:42,480
satisfaction

1599
01:01:42,480 --> 01:01:43,359
i am

1600
01:01:43,359 --> 01:01:48,079
we're both lawyers uh and as you said uh

1601
01:01:48,079 --> 01:01:50,079
this is the a lot of the information

1602
01:01:50,079 --> 01:01:52,640
isn't out there yet um

1603
01:01:52,640 --> 01:01:54,240
i don't think i can speak for any

1604
01:01:54,240 --> 01:01:56,000
company's lawyers

1605
01:01:56,000 --> 01:01:57,760
but

1606
01:01:57,760 --> 01:02:00,160
i do kind of expect that the fact of the

1607
01:02:00,160 --> 01:02:01,760
matter is going to be that

1608
01:02:01,760 --> 01:02:04,960
the next fib standard will require kyber

1609
01:02:04,960 --> 01:02:07,920
whatever if if nis does res uh reach

1610
01:02:07,920 --> 01:02:09,200
some agreement

1611
01:02:09,200 --> 01:02:11,839
uh i have no idea what that means uh for

1612
01:02:11,839 --> 01:02:14,079
adoption etc i think it's a worthwhile

1613
01:02:14,079 --> 01:02:15,760
discussion to have especially as we

1614
01:02:15,760 --> 01:02:18,160
reach more information but i yeah i

1615
01:02:18,160 --> 01:02:19,680
really can't say anything useful about

1616
01:02:19,680 --> 01:02:21,680
that right now

1617
01:02:21,680 --> 01:02:23,280
actually

1618
01:02:23,280 --> 01:02:24,960
so far

1619
01:02:24,960 --> 01:02:27,039
uh as far as this is concerned you are

1620
01:02:27,039 --> 01:02:28,880
perfectly miscompatible if you're using

1621
01:02:28,880 --> 01:02:32,160
say elliptic curve p556

1622
01:02:32,160 --> 01:02:34,640
and some other mechanism such as entrue

1623
01:02:34,640 --> 01:02:37,359
that is perfectly acceptable to them

1624
01:02:37,359 --> 01:02:39,280
yeah for the moment uh

1625
01:02:39,280 --> 01:02:41,440
hip certification if you concatenate a

1626
01:02:41,440 --> 01:02:43,599
classical algorithm with an experimental

1627
01:02:43,599 --> 01:02:45,920
one for the key exchange part i think it

1628
01:02:45,920 --> 01:02:50,400
was fibs 140 it's compatible yes um if

1629
01:02:50,400 --> 01:02:52,559
that will change i don't know um so

1630
01:02:52,559 --> 01:02:54,000
maybe this is something that indeed

1631
01:02:54,000 --> 01:02:56,720
could be started at a discussion um

1632
01:02:56,720 --> 01:02:58,720
but i don't think we will get a lot of

1633
01:02:58,720 --> 01:03:01,039
clarity also in the coming months so my

1634
01:03:01,039 --> 01:03:03,440
recommendation would be to kind of see

1635
01:03:03,440 --> 01:03:04,880
where the different discussions are

1636
01:03:04,880 --> 01:03:06,559
going around this

1637
01:03:06,559 --> 01:03:08,480
yeah uh personally i'll be putting

1638
01:03:08,480 --> 01:03:09,760
together a

1639
01:03:09,760 --> 01:03:12,480
a i submit a draft submission to

1640
01:03:12,480 --> 01:03:16,480
to the cfrg to for and then true uh

1641
01:03:16,480 --> 01:03:17,920
so let's see if

1642
01:03:17,920 --> 01:03:18,799
if

1643
01:03:18,799 --> 01:03:22,240
they can can um uh make that into an rfc

1644
01:03:22,240 --> 01:03:25,200
as well just in case uh

1645
01:03:25,200 --> 01:03:27,760
the the nist approval process does not

1646
01:03:27,760 --> 01:03:32,079
uh a patent process fails

1647
01:03:37,599 --> 01:03:40,559
all right last question from the room

1648
01:03:40,559 --> 01:03:43,359
all right uh i was curious uh you noted

1649
01:03:43,359 --> 01:03:44,960
some of the difficulties with falcon

1650
01:03:44,960 --> 01:03:46,960
implementations etc and i'm working

1651
01:03:46,960 --> 01:03:48,799
downstream on some of the post-quantum

1652
01:03:48,799 --> 01:03:51,200
serializations more like the jose cose

1653
01:03:51,200 --> 01:03:52,559
side of things

1654
01:03:52,559 --> 01:03:54,960
um question about how should we be

1655
01:03:54,960 --> 01:03:56,799
thinking about non-lattice-based stuff

1656
01:03:56,799 --> 01:03:58,079
because this was pretty clear that

1657
01:03:58,079 --> 01:03:59,520
there's going to be steps down some of

1658
01:03:59,520 --> 01:04:02,160
that pads are there two or three things

1659
01:04:02,160 --> 01:04:04,160
we should be looking at early just to be

1660
01:04:04,160 --> 01:04:06,160
aware of on the non-lattice-based

1661
01:04:06,160 --> 01:04:07,280
approaches

1662
01:04:07,280 --> 01:04:09,280
and prioritizing some investigations

1663
01:04:09,280 --> 01:04:11,039
around

1664
01:04:11,039 --> 01:04:13,839
i think i could comment on that um

1665
01:04:13,839 --> 01:04:15,359
so a schema

1666
01:04:15,359 --> 01:04:17,839
last month

1667
01:04:19,599 --> 01:04:23,440
uh but rainbow is a refinement of a uov

1668
01:04:23,440 --> 01:04:25,760
and it's pretty the way that the call

1669
01:04:25,760 --> 01:04:27,920
for new schemes is written it's pretty

1670
01:04:27,920 --> 01:04:29,760
clear that

1671
01:04:29,760 --> 01:04:31,440
they're basically

1672
01:04:31,440 --> 01:04:34,319
calling for a uav submission

1673
01:04:34,319 --> 01:04:36,480
so then you're looking at

1674
01:04:36,480 --> 01:04:38,000
computationally it's going to be

1675
01:04:38,000 --> 01:04:41,039
somewhat okay for the values of okay

1676
01:04:41,039 --> 01:04:42,000
um

1677
01:04:42,000 --> 01:04:45,680
but public keys are gonna be massive 400

1678
01:04:45,680 --> 01:04:47,839
kilobytes massive

1679
01:04:47,839 --> 01:04:48,799
um

1680
01:04:48,799 --> 01:04:50,559
but very small signatures on the other

1681
01:04:50,559 --> 01:04:51,440
hand

1682
01:04:51,440 --> 01:04:52,559
uh

1683
01:04:52,559 --> 01:04:55,200
so i think if you want to play with

1684
01:04:55,200 --> 01:04:56,880
something right now there's some code

1685
01:04:56,880 --> 01:05:00,000
for rainbow still out i expect that uov

1686
01:05:00,000 --> 01:05:02,000
code will also be available soon and

1687
01:05:02,000 --> 01:05:03,599
there was already some discussion on the

1688
01:05:03,599 --> 01:05:06,240
pc forum the nist mailing list

1689
01:05:06,240 --> 01:05:08,319
about parameter sets for u of e so you

1690
01:05:08,319 --> 01:05:11,440
can get some idea of the sizes there

1691
01:05:11,440 --> 01:05:12,319
uh

1692
01:05:12,319 --> 01:05:14,640
but i think that is the most significant

1693
01:05:14,640 --> 01:05:16,720
uh

1694
01:05:16,720 --> 01:05:19,200
thing that will

1695
01:05:19,200 --> 01:05:20,960
i would bet money on that that will make

1696
01:05:20,960 --> 01:05:23,680
it into the on-ramp for new signature

1697
01:05:23,680 --> 01:05:26,400
schemes uh there's some other stuff that

1698
01:05:26,400 --> 01:05:28,000
we put in the slides and that's much

1699
01:05:28,000 --> 01:05:29,119
less

1700
01:05:29,119 --> 01:05:31,119
certain if that's gonna make it uh

1701
01:05:31,119 --> 01:05:32,319
because the

1702
01:05:32,319 --> 01:05:34,799
those kinds of schemes are much newer

1703
01:05:34,799 --> 01:05:37,760
and this did specify that they want

1704
01:05:37,760 --> 01:05:40,079
mature crypto analysis to exist of your

1705
01:05:40,079 --> 01:05:42,240
scheme and uov itself

1706
01:05:42,240 --> 01:05:43,839
um

1707
01:05:43,839 --> 01:05:46,480
rainbow was a variant of uov

1708
01:05:46,480 --> 01:05:49,119
and the attack lies in that variant and

1709
01:05:49,119 --> 01:05:50,480
i think that

1710
01:05:50,480 --> 01:05:52,640
the confidence in uav itself

1711
01:05:52,640 --> 01:05:55,760
is quite high so i think that will

1712
01:05:55,760 --> 01:05:58,160
probably be accepted into this

1713
01:05:58,160 --> 01:06:01,160
thing

1714
01:06:05,280 --> 01:06:06,160
okay

1715
01:06:06,160 --> 01:06:08,240
thank you tom sophia

1716
01:06:08,240 --> 01:06:10,799
uh last presentation of the meeting is

1717
01:06:10,799 --> 01:06:14,680
going to be boss western

1718
01:06:20,480 --> 01:06:22,720
good morning

1719
01:06:22,720 --> 01:06:25,039
can you hear me

1720
01:06:25,039 --> 01:06:25,839
yes

1721
01:06:25,839 --> 01:06:27,200
good

1722
01:06:27,200 --> 01:06:29,599
thank you tom uh thank you sophia next

1723
01:06:29,599 --> 01:06:32,839
slide please

1724
01:06:34,319 --> 01:06:36,559
i think tom and sophia basically covered

1725
01:06:36,559 --> 01:06:39,119
everything on this already so kyber is

1726
01:06:39,119 --> 01:06:42,720
the post quantum key agreement that nist

1727
01:06:42,720 --> 01:06:44,799
will standardize first

1728
01:06:44,799 --> 01:06:49,200
it would likely perform great so

1729
01:06:49,280 --> 01:06:51,039
that's very good news

1730
01:06:51,039 --> 01:06:54,559
um next slide please

1731
01:06:57,760 --> 01:06:59,839
there are so it will take some time

1732
01:06:59,839 --> 01:07:02,400
before nest actually has it standardized

1733
01:07:02,400 --> 01:07:03,359
they just said that they will

1734
01:07:03,359 --> 01:07:04,880
standardize it

1735
01:07:04,880 --> 01:07:07,680
we expect probably in 2024

1736
01:07:07,680 --> 01:07:09,760
but we never know

1737
01:07:09,760 --> 01:07:12,240
uh there are still changes likely to

1738
01:07:12,240 --> 01:07:13,839
kyber

1739
01:07:13,839 --> 01:07:16,559
but we ex i expect many early adopters

1740
01:07:16,559 --> 01:07:19,440
before 2024.

1741
01:07:19,440 --> 01:07:22,240
next slide please

1742
01:07:22,240 --> 01:07:23,920
that's why uh

1743
01:07:23,920 --> 01:07:26,720
we would like to have an rfc

1744
01:07:26,720 --> 01:07:29,760
a draft but we want to match nist's

1745
01:07:29,760 --> 01:07:32,240
final standard

1746
01:07:32,240 --> 01:07:34,319
so what's the point then

1747
01:07:34,319 --> 01:07:37,039
well the drafts can be used as a

1748
01:07:37,039 --> 01:07:39,200
reference for early adopters instead of

1749
01:07:39,200 --> 01:07:43,280
everyone doing something different

1750
01:07:43,280 --> 01:07:45,599
a different advantage is that nist will

1751
01:07:45,599 --> 01:07:46,960
not include a machine readable

1752
01:07:46,960 --> 01:07:49,039
specification and

1753
01:07:49,039 --> 01:07:51,200
we intend to in this case python but

1754
01:07:51,200 --> 01:07:52,640
maybe

1755
01:07:52,640 --> 01:07:55,039
something else

1756
01:07:55,039 --> 01:07:58,000
also it will um

1757
01:07:58,000 --> 01:07:59,520
have the idf closer to the

1758
01:07:59,520 --> 01:08:04,000
standardization as the cardboard team is

1759
01:08:04,000 --> 01:08:06,720
very eager to help out on this draft

1760
01:08:06,720 --> 01:08:08,480
and it will unlock

1761
01:08:08,480 --> 01:08:11,920
early usage in uh in for instance tls

1762
01:08:11,920 --> 01:08:15,039
because code points are cheap

1763
01:08:15,039 --> 01:08:17,839
next slide please

1764
01:08:18,319 --> 01:08:19,040
so

1765
01:08:19,040 --> 01:08:22,080
um any questions uh concerns

1766
01:08:22,080 --> 01:08:25,839
is there interest for this

1767
01:08:29,920 --> 01:08:32,158
philharm baker yeah i'm very interested

1768
01:08:32,158 --> 01:08:35,439
in this uh i i don't particularly care

1769
01:08:35,439 --> 01:08:38,479
if it matches what nist comes out at

1770
01:08:38,479 --> 01:08:40,399
in the end because

1771
01:08:40,399 --> 01:08:42,560
what i'm concerned about at the moment

1772
01:08:42,560 --> 01:08:46,238
is not doing pqc cryptography i can't

1773
01:08:46,238 --> 01:08:48,000
because i'm doing threshold

1774
01:08:48,000 --> 01:08:49,759
but i would like to be able to set

1775
01:08:49,759 --> 01:08:52,799
myself up a safety net

1776
01:08:52,799 --> 01:08:55,120
of shared secrets

1777
01:08:55,120 --> 01:08:58,960
and routes of trust that a pqc hardened

1778
01:08:58,960 --> 01:09:00,080
so that

1779
01:09:00,080 --> 01:09:02,719
if there is a quantum computer produced

1780
01:09:02,719 --> 01:09:05,520
i can then back out and recover my

1781
01:09:05,520 --> 01:09:07,439
security context

1782
01:09:07,439 --> 01:09:08,799
uh you know

1783
01:09:08,799 --> 01:09:09,839
i can

1784
01:09:09,839 --> 01:09:12,080
do a new release that is secure

1785
01:09:12,080 --> 01:09:14,799
but i'm only looking to uh establish

1786
01:09:14,799 --> 01:09:17,120
those shared secrets for uh

1787
01:09:17,120 --> 01:09:18,640
you know limited

1788
01:09:18,640 --> 01:09:20,238
application and the other thing you can

1789
01:09:20,238 --> 01:09:22,238
do is once i've got a shared secret i

1790
01:09:22,238 --> 01:09:24,238
can create a global mix in

1791
01:09:24,238 --> 01:09:26,719
that will pkc harden all my other stuff

1792
01:09:26,719 --> 01:09:30,480
like russ housley did in his draft

1793
01:09:32,880 --> 01:09:35,359
okay uh any other

1794
01:09:35,359 --> 01:09:38,000
questions in the room

1795
01:09:38,000 --> 01:09:39,520
we have one online and then we'll take

1796
01:09:39,520 --> 01:09:41,198
the question in the room

1797
01:09:41,198 --> 01:09:44,319
um i think i'm online that's you um

1798
01:09:44,319 --> 01:09:48,000
hi um i'm flo from uk ntsc um i can say

1799
01:09:48,000 --> 01:09:49,279
it's really really good to see this

1800
01:09:49,279 --> 01:09:50,880
happening i'm kind of following on from

1801
01:09:50,880 --> 01:09:52,399
nist's announcement

1802
01:09:52,399 --> 01:09:53,679
um i guess

1803
01:09:53,679 --> 01:09:55,360
as a contrast to the earlier comment i

1804
01:09:55,360 --> 01:09:56,480
think it's really important that

1805
01:09:56,480 --> 01:09:58,320
eventually we do match with nist

1806
01:09:58,320 --> 01:10:00,400
specifications i appreciate all the

1807
01:10:00,400 --> 01:10:02,800
reasons to start doing this work now but

1808
01:10:02,800 --> 01:10:04,880
i think in the end it's critical that

1809
01:10:04,880 --> 01:10:06,400
these match up and we don't end up with

1810
01:10:06,400 --> 01:10:08,960
fragmentation between standards bodies

1811
01:10:08,960 --> 01:10:10,880
thanks

1812
01:10:10,880 --> 01:10:12,960
okay thanks um

1813
01:10:12,960 --> 01:10:14,640
and uh i want to remind folks that the

1814
01:10:14,640 --> 01:10:16,400
tls meeting is

1815
01:10:16,400 --> 01:10:18,719
later in the day and i don't know if the

1816
01:10:18,719 --> 01:10:21,199
tls chairs have anything to share about

1817
01:10:21,199 --> 01:10:23,920
opinions with respect to

1818
01:10:23,920 --> 01:10:27,199
early definition of pq algorithms for

1819
01:10:27,199 --> 01:10:29,679
key exchange in cfrg whether that's

1820
01:10:29,679 --> 01:10:31,280
helpful or not

1821
01:10:31,280 --> 01:10:33,199
if you have anything to say

1822
01:10:33,199 --> 01:10:36,559
no nothing to say at this time great

1823
01:10:42,080 --> 01:10:43,520
okay well

1824
01:10:43,520 --> 01:10:45,040
uh we are ending a little bit early

1825
01:10:45,040 --> 01:10:47,600
despite the uh delay in the start uh

1826
01:10:47,600 --> 01:10:49,920
folks did kind of push through these

1827
01:10:49,920 --> 01:10:51,440
presentations pretty quickly so thanks

1828
01:10:51,440 --> 01:10:53,040
everyone for attending

1829
01:10:53,040 --> 01:10:55,600
and uh thank you rich for taking notes

1830
01:10:55,600 --> 01:10:57,840
and we will

1831
01:10:57,840 --> 01:11:01,120
have the have the notes up sometime soon

1832
01:11:01,120 --> 01:11:04,599
thanks all for coming

1833
01:11:07,180 --> 01:11:10,549
[Applause]

1834
01:11:13,679 --> 01:11:16,000
yeah i'll just uh

1835
01:11:16,000 --> 01:11:19,880
surely try to catch up

1836
01:11:26,560 --> 01:11:30,120
put your hand down

1837
01:11:42,000 --> 01:11:45,640
there's so many sources

1838
01:11:56,000 --> 01:11:59,000
is

1839
01:12:02,510 --> 01:12:05,619
[Music]

1840
01:12:08,320 --> 01:12:11,320
right

1841
01:12:42,080 --> 01:12:45,080
um

1842
01:13:02,719 --> 01:13:05,840
that's the

