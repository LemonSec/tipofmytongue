1
00:00:50,239 --> 00:00:53,360
sure it's quiet in here

2
00:00:56,640 --> 00:00:59,359
i really wish we had like elevator music

3
00:00:59,359 --> 00:01:01,199
before the meetings started so you don't

4
00:01:01,199 --> 00:01:04,399
feel like your audio is not working

5
00:01:05,680 --> 00:01:07,680
i did that in one of the web transport

6
00:01:07,680 --> 00:01:09,520
remote sessions during the pandemic and

7
00:01:09,520 --> 00:01:13,798
people were very annoyed at me

8
00:01:14,159 --> 00:01:16,960
you gotta choose better songs

9
00:01:16,960 --> 00:01:19,119
i mean is there a rating system for

10
00:01:19,119 --> 00:01:21,600
elevator

11
00:01:22,200 --> 00:01:26,200
music songs

12
00:01:32,880 --> 00:01:34,960
yeah

13
00:01:34,960 --> 00:01:36,479
no but it's more fitting for a working

14
00:01:36,479 --> 00:01:39,640
group business

15
00:01:40,799 --> 00:01:42,240
all right we'll we'll give folks a few

16
00:01:42,240 --> 00:01:45,679
more minutes and then we'll get started

17
00:01:48,479 --> 00:01:51,439
yeah slow mini hell is probably a good

18
00:01:51,439 --> 00:01:55,240
summary for what we do

19
00:02:02,560 --> 00:02:05,560
right

20
00:02:49,440 --> 00:02:51,840
oh

21
00:03:16,159 --> 00:03:18,400
all right i

22
00:03:18,400 --> 00:03:21,519
i think we can get started

23
00:03:21,519 --> 00:03:24,239
uh welcome to the web transport working

24
00:03:24,239 --> 00:03:26,640
group by tf-114

25
00:03:26,640 --> 00:03:27,440
it's

26
00:03:27,440 --> 00:03:29,280
really nice to see so many of you in

27
00:03:29,280 --> 00:03:31,680
person uh more than last time and way

28
00:03:31,680 --> 00:03:34,239
more than for two years when we

29
00:03:34,239 --> 00:03:36,640
you know had the first session of this

30
00:03:36,640 --> 00:03:38,959
working group in the pandemic

31
00:03:38,959 --> 00:03:43,040
um next slide please bernard

32
00:03:44,879 --> 00:03:48,959
so for everyone in person as a reminder

33
00:03:48,959 --> 00:03:51,040
we've been doing cue management using

34
00:03:51,040 --> 00:03:52,400
meet echo

35
00:03:52,400 --> 00:03:53,280
so

36
00:03:53,280 --> 00:03:55,439
first off just make sure to join meet

37
00:03:55,439 --> 00:03:56,879
echo

38
00:03:56,879 --> 00:03:59,200
to get yourself on the blue sheets we're

39
00:03:59,200 --> 00:04:02,080
not doing paper blue sheets anymore

40
00:04:02,080 --> 00:04:04,319
there's a qr code to simplify stuff

41
00:04:04,319 --> 00:04:06,159
otherwise it's accessible from the itf

42
00:04:06,159 --> 00:04:08,000
agenda page

43
00:04:08,000 --> 00:04:10,000
the full meet echo allows you to have

44
00:04:10,000 --> 00:04:11,760
access to the chat

45
00:04:11,760 --> 00:04:13,439
and

46
00:04:13,439 --> 00:04:15,599
otherwise the meat echo light which this

47
00:04:15,599 --> 00:04:17,440
this qr code

48
00:04:17,440 --> 00:04:18,959
gives you the opportunity to join the

49
00:04:18,959 --> 00:04:20,478
queue and to join the blue sheets but

50
00:04:20,478 --> 00:04:22,160
without the rest of the interface it's

51
00:04:22,160 --> 00:04:23,040
uh

52
00:04:23,040 --> 00:04:24,560
it works better than the other one on

53
00:04:24,560 --> 00:04:26,800
phones for example

54
00:04:26,800 --> 00:04:28,880
um

55
00:04:28,880 --> 00:04:32,159
all right next slide please

56
00:04:32,400 --> 00:04:33,520
uh

57
00:04:33,520 --> 00:04:37,199
so here's a reminder on the buttons um

58
00:04:37,199 --> 00:04:40,479
you know please stay muted unless you

59
00:04:40,479 --> 00:04:42,479
want us to hear your keyboard and

60
00:04:42,479 --> 00:04:44,160
there's a hand icon for joining the

61
00:04:44,160 --> 00:04:45,280
queue

62
00:04:45,280 --> 00:04:47,759
um yeah if if your remote having the

63
00:04:47,759 --> 00:04:49,680
video on when you're speaking is pretty

64
00:04:49,680 --> 00:04:51,759
nice helps us understand you better but

65
00:04:51,759 --> 00:04:54,720
it's not required

66
00:04:54,840 --> 00:04:56,479
um

67
00:04:56,479 --> 00:04:57,919
then

68
00:04:57,919 --> 00:05:00,639
yep here are some links

69
00:05:00,639 --> 00:05:02,240
especially if you're following along

70
00:05:02,240 --> 00:05:03,840
remotely

71
00:05:03,840 --> 00:05:06,560
next slide

72
00:05:07,360 --> 00:05:09,759
the notewell so some of you may know

73
00:05:09,759 --> 00:05:12,320
this pretty well but it's worth taking a

74
00:05:12,320 --> 00:05:13,199
minute

75
00:05:13,199 --> 00:05:15,199
to discuss this

76
00:05:15,199 --> 00:05:16,479
the what the

77
00:05:16,479 --> 00:05:20,080
ietf does is covered by our notewell and

78
00:05:20,080 --> 00:05:22,080
if you're here it means you actually

79
00:05:22,080 --> 00:05:25,440
said you read it on the page but

80
00:05:25,440 --> 00:05:26,880
everyone is used to clicking things

81
00:05:26,880 --> 00:05:28,320
without actually reading them so let me

82
00:05:28,320 --> 00:05:30,880
take a minute

83
00:05:30,880 --> 00:05:33,759
one of the parts of it is that anything

84
00:05:33,759 --> 00:05:35,919
you say at an itf meeting or on the

85
00:05:35,919 --> 00:05:38,320
github issues or on the mailing list is

86
00:05:38,320 --> 00:05:40,800
considered an itf contribution

87
00:05:40,800 --> 00:05:45,680
and that triggers the itf um

88
00:05:45,680 --> 00:05:48,400
policy on intellectual property patents

89
00:05:48,400 --> 00:05:49,600
and all that

90
00:05:49,600 --> 00:05:52,240
so if you don't know what that is you

91
00:05:52,240 --> 00:05:54,160
should take a look because if you're

92
00:05:54,160 --> 00:05:55,840
aware of a patent it means you have to

93
00:05:55,840 --> 00:05:57,120
disclose it

94
00:05:57,120 --> 00:05:58,479
and

95
00:05:58,479 --> 00:06:00,400
that could become complicated if your

96
00:06:00,400 --> 00:06:02,639
lawyers at your company could be upset

97
00:06:02,639 --> 00:06:04,800
at you if you don't do it right so just

98
00:06:04,800 --> 00:06:06,800
make sure you read all this

99
00:06:06,800 --> 00:06:09,360
and next slide please

100
00:06:09,360 --> 00:06:10,800
the

101
00:06:10,800 --> 00:06:13,840
notewell also covers the itf code of

102
00:06:13,840 --> 00:06:17,280
conduct and anti-harassment policy

103
00:06:17,280 --> 00:06:19,520
i want to take a minute to underscore

104
00:06:19,520 --> 00:06:21,120
that we've never had a problem in this

105
00:06:21,120 --> 00:06:22,800
working group everyone has always been

106
00:06:22,800 --> 00:06:24,880
working nicely so let's just keep doing

107
00:06:24,880 --> 00:06:26,560
that because everything's more fun when

108
00:06:26,560 --> 00:06:28,560
everyone's nice

109
00:06:28,560 --> 00:06:30,000
and if you

110
00:06:30,000 --> 00:06:32,800
see anything that you think is not great

111
00:06:32,800 --> 00:06:34,160
we have procedures in place for

112
00:06:34,160 --> 00:06:37,280
reporting it come talk to me or

113
00:06:37,280 --> 00:06:38,880
to the ombuds team

114
00:06:38,880 --> 00:06:40,880
uh we'll make sure it gets handled the

115
00:06:40,880 --> 00:06:42,560
best way we can

116
00:06:42,560 --> 00:06:43,440
uh

117
00:06:43,440 --> 00:06:46,080
next slide please

118
00:06:46,080 --> 00:06:48,479
so as a quick reminder

119
00:06:48,479 --> 00:06:52,319
the itf has a strict mask policy for all

120
00:06:52,319 --> 00:06:53,680
working group sessions if you're

121
00:06:53,680 --> 00:06:56,160
attending in person you have to wear a

122
00:06:56,160 --> 00:06:57,199
mask

123
00:06:57,199 --> 00:06:59,759
unless you are presenting or at the

124
00:06:59,759 --> 00:07:01,919
chair table which is far away from

125
00:07:01,919 --> 00:07:04,400
everyone and currently speaking

126
00:07:04,400 --> 00:07:05,919
also note that

127
00:07:05,919 --> 00:07:09,360
masks need to be certified with these

128
00:07:09,360 --> 00:07:11,919
certifications or something equivalent

129
00:07:11,919 --> 00:07:13,919
which means that most cloth masks and

130
00:07:13,919 --> 00:07:16,560
surgical masks actually don't qualify

131
00:07:16,560 --> 00:07:18,960
those don't really do a good job of

132
00:07:18,960 --> 00:07:20,639
preventing transmission of the latest

133
00:07:20,639 --> 00:07:24,319
variants so just fyi we have free kn 95

134
00:07:24,319 --> 00:07:26,240
mass at the front desks if you need one

135
00:07:26,240 --> 00:07:28,560
and you've or you forgot yours there

136
00:07:28,560 --> 00:07:31,120
come in all sorts of cool colors too

137
00:07:31,120 --> 00:07:32,479
okay

138
00:07:32,479 --> 00:07:34,639
um and if you're talking at the

139
00:07:34,639 --> 00:07:36,560
microphone you don't need to take your

140
00:07:36,560 --> 00:07:38,240
mask off just get close to the

141
00:07:38,240 --> 00:07:40,319
microphone it works really well

142
00:07:40,319 --> 00:07:44,319
uh next slide please

143
00:07:44,319 --> 00:07:48,879
all right here are some more links um

144
00:07:48,879 --> 00:07:51,120
we're going to need a jabra scribe and a

145
00:07:51,120 --> 00:07:53,280
note taker can we have a volunteer for

146
00:07:53,280 --> 00:07:56,000
jabber scribe

147
00:07:56,319 --> 00:07:58,479
all right thank you jake can we have a

148
00:07:58,479 --> 00:08:01,758
volunteer for notetaker

149
00:08:02,000 --> 00:08:04,400
uh the fun part now i get to awkwardly

150
00:08:04,400 --> 00:08:07,039
stare at people in the room and remotely

151
00:08:07,039 --> 00:08:08,400
and we're not going to start the session

152
00:08:08,400 --> 00:08:10,160
until we have a volunteer because notes

153
00:08:10,160 --> 00:08:13,560
are very important

154
00:08:14,720 --> 00:08:16,400
it's best if i don't have to pick

155
00:08:16,400 --> 00:08:18,400
someone i see everyone's intently

156
00:08:18,400 --> 00:08:21,599
staring at their keyboard

157
00:08:24,720 --> 00:08:26,960
oh oh thank you jake that is amazing all

158
00:08:26,960 --> 00:08:29,120
right can someone do jabra scribe that's

159
00:08:29,120 --> 00:08:32,320
a very limited bit now ah thank you alan

160
00:08:32,320 --> 00:08:34,640
all right thank you both

161
00:08:34,640 --> 00:08:38,000
oh yes we are now using zulip um you so

162
00:08:38,000 --> 00:08:39,440
you can either join through the meet

163
00:08:39,440 --> 00:08:42,080
echo chat or through the zoolop client

164
00:08:42,080 --> 00:08:43,760
and both of them seem to work and are

165
00:08:43,760 --> 00:08:46,320
bridged together and if you want

166
00:08:46,320 --> 00:08:47,920
alan to say something because for

167
00:08:47,920 --> 00:08:49,440
example let's say you're remote and you

168
00:08:49,440 --> 00:08:50,800
don't have audio

169
00:08:50,800 --> 00:08:52,000
just say

170
00:08:52,000 --> 00:08:55,040
mick colon something and alan will jump

171
00:08:55,040 --> 00:08:57,519
in the mic queue and say what you said

172
00:08:57,519 --> 00:08:59,279
at the microphone

173
00:08:59,279 --> 00:09:03,279
awesome thanks both of you next slide

174
00:09:04,800 --> 00:09:08,080
this is our current agenda so first is

175
00:09:08,080 --> 00:09:11,120
me blabbering around for way too long

176
00:09:11,120 --> 00:09:14,480
then a an update on the w3c process for

177
00:09:14,480 --> 00:09:15,680
janivar

178
00:09:15,680 --> 00:09:19,920
uh then discussions on capsules

179
00:09:19,920 --> 00:09:23,200
and on the capsule design team 4h2 and

180
00:09:23,200 --> 00:09:25,519
h3 led by eric kinnear

181
00:09:25,519 --> 00:09:28,160
and then going through some issues uh

182
00:09:28,160 --> 00:09:30,800
for web transfer h3 from victor and then

183
00:09:30,800 --> 00:09:32,959
we'll wrap up

184
00:09:32,959 --> 00:09:37,560
does anyone want to bash this agenda

185
00:09:40,720 --> 00:09:43,400
all right

186
00:09:43,400 --> 00:09:47,079
[Music]

187
00:09:47,200 --> 00:09:50,480
next slide please

188
00:09:50,480 --> 00:09:54,160
uh johnnyvar are you

189
00:09:54,240 --> 00:09:56,480
we see you

190
00:09:56,480 --> 00:10:00,000
and we can't oh say something again

191
00:10:00,000 --> 00:10:02,000
hi it's me can you hear me now

192
00:10:02,000 --> 00:10:04,720
yes we can go ahead

193
00:10:04,720 --> 00:10:07,279
all right thank you so uh i'm janavar um

194
00:10:07,279 --> 00:10:11,040
um co-chair with uh will law for the w3c

195
00:10:11,040 --> 00:10:13,040
uh specification for web transport so

196
00:10:13,040 --> 00:10:15,120
i'm here to give you a progress update

197
00:10:15,120 --> 00:10:18,399
on changes since march 24th

198
00:10:18,399 --> 00:10:20,480
so we published another working draft

199
00:10:20,480 --> 00:10:23,040
the latest version is june 23rd

200
00:10:23,040 --> 00:10:24,399
of this year

201
00:10:24,399 --> 00:10:26,320
and we have a charter extension underway

202
00:10:26,320 --> 00:10:28,160
for an additional year because the

203
00:10:28,160 --> 00:10:30,959
current charter expires september 22nd

204
00:10:30,959 --> 00:10:33,200
so if you have input on that it's still

205
00:10:33,200 --> 00:10:35,680
not too late to provide

206
00:10:35,680 --> 00:10:38,160
and then uh the next bullet has a type

207
00:10:38,160 --> 00:10:40,640
bow uh it should say more realistic time

208
00:10:40,640 --> 00:10:43,120
table for the year because we had an

209
00:10:43,120 --> 00:10:44,079
earlier

210
00:10:44,079 --> 00:10:45,600
we presented an earlier optimistic

211
00:10:45,600 --> 00:10:47,279
timetable that was not

212
00:10:47,279 --> 00:10:49,040
anywhere near realistic so

213
00:10:49,040 --> 00:10:51,279
currently we're aiming for this is what

214
00:10:51,279 --> 00:10:53,040
we're aiming for uh september end of

215
00:10:53,040 --> 00:10:56,240
september for canada recommendation

216
00:10:56,240 --> 00:10:59,360
which requires stability in api

217
00:10:59,360 --> 00:11:01,519
and then by end of the year we're hoping

218
00:11:01,519 --> 00:11:02,640
for

219
00:11:02,640 --> 00:11:04,160
that's our goal post for a proposed

220
00:11:04,160 --> 00:11:06,160
recommendation at the moment which would

221
00:11:06,160 --> 00:11:07,680
require two independent implementations

222
00:11:07,680 --> 00:11:09,519
for our charter

223
00:11:09,519 --> 00:11:11,440
which would put us in line for a call

224
00:11:11,440 --> 00:11:12,640
for review

225
00:11:12,640 --> 00:11:15,440
in february and ideally

226
00:11:15,440 --> 00:11:18,160
everything works we have publication by

227
00:11:18,160 --> 00:11:21,120
recommendation by the next ac meeting in

228
00:11:21,120 --> 00:11:22,160
april

229
00:11:22,160 --> 00:11:23,440
ish

230
00:11:23,440 --> 00:11:25,680
all right so um

231
00:11:25,680 --> 00:11:29,839
we've defined some milestones we have

232
00:11:29,839 --> 00:11:31,360
the original milestone

233
00:11:31,360 --> 00:11:33,040
for the initial implementation that

234
00:11:33,040 --> 00:11:33,920
shipped

235
00:11:33,920 --> 00:11:36,000
has three remaining issues

236
00:11:36,000 --> 00:11:38,240
we've been a bit slow to close those but

237
00:11:38,240 --> 00:11:41,200
none of them are major

238
00:11:41,279 --> 00:11:43,120
we have a new milestone created which

239
00:11:43,120 --> 00:11:44,320
aligns with

240
00:11:44,320 --> 00:11:46,399
the w3c release process of candidate

241
00:11:46,399 --> 00:11:48,240
recommendation where we have 10 open

242
00:11:48,240 --> 00:11:49,200
issues

243
00:11:49,200 --> 00:11:51,440
where about six are ready for pr

244
00:11:51,440 --> 00:11:54,000
next slide

245
00:11:55,040 --> 00:11:57,440
and so here are some decisions since um

246
00:11:57,440 --> 00:11:59,760
our last presentation in march we have

247
00:11:59,760 --> 00:12:01,760
added per stream stats

248
00:12:01,760 --> 00:12:03,360
that means per outgoing and then going

249
00:12:03,360 --> 00:12:07,040
in duplex stream not not datagrams

250
00:12:07,040 --> 00:12:08,480
and these are

251
00:12:08,480 --> 00:12:11,200
uh not these are bytes written by sent

252
00:12:11,200 --> 00:12:13,279
and by technology bytes acknowledged

253
00:12:13,279 --> 00:12:14,800
which are not

254
00:12:14,800 --> 00:12:17,440
uh total network byte counters however

255
00:12:17,440 --> 00:12:18,959
they're they're mostly concerned with

256
00:12:18,959 --> 00:12:20,240
the

257
00:12:20,240 --> 00:12:22,079
bytes application bytes that are written

258
00:12:22,079 --> 00:12:25,120
to the stream and how much of that has

259
00:12:25,120 --> 00:12:26,480
been sent and how much of that has been

260
00:12:26,480 --> 00:12:28,160
acknowledged so

261
00:12:28,160 --> 00:12:28,959
uh

262
00:12:28,959 --> 00:12:30,480
bytes acknowledged will always be less

263
00:12:30,480 --> 00:12:32,160
or equal to by sent which will always be

264
00:12:32,160 --> 00:12:34,399
less or equal to bytes written

265
00:12:34,399 --> 00:12:36,480
and then for datagrams

266
00:12:36,480 --> 00:12:39,200
we reduced the uh priority algorithm to

267
00:12:39,200 --> 00:12:41,360
normative guidance because we found some

268
00:12:41,360 --> 00:12:42,880
mistakes in it

269
00:12:42,880 --> 00:12:45,040
um we still haven't

270
00:12:45,040 --> 00:12:48,720
gotten any further on specifying

271
00:12:48,720 --> 00:12:51,120
uh specifying that algorithm in detail

272
00:12:51,120 --> 00:12:54,399
so that's left to implementation

273
00:12:55,120 --> 00:12:56,639
we put some datagram stats in a

274
00:12:56,639 --> 00:12:58,639
subdirectionally of getstats so we have

275
00:12:58,639 --> 00:13:00,880
a couple of additional datagram stats

276
00:13:00,880 --> 00:13:02,000
that are

277
00:13:02,000 --> 00:13:04,079
dropped too big dropped incoming and

278
00:13:04,079 --> 00:13:06,480
lost

279
00:13:06,480 --> 00:13:08,720
and for the web transfer control web

280
00:13:08,720 --> 00:13:10,720
transport constructor

281
00:13:10,720 --> 00:13:12,560
where we now support

282
00:13:12,560 --> 00:13:15,839
a re require unreliable through boolean

283
00:13:15,839 --> 00:13:18,399
which defaults to false

284
00:13:18,399 --> 00:13:20,240
this is so applications can in the

285
00:13:20,240 --> 00:13:21,920
future specify

286
00:13:21,920 --> 00:13:24,320
whether they want to uh

287
00:13:24,320 --> 00:13:25,760
require udp

288
00:13:25,760 --> 00:13:27,120
and

289
00:13:27,120 --> 00:13:29,279
by default they will get fall back to

290
00:13:29,279 --> 00:13:32,320
http uh too

291
00:13:32,320 --> 00:13:34,160
and we added another read-only property

292
00:13:34,160 --> 00:13:35,920
for that so that you can tell

293
00:13:35,920 --> 00:13:38,720
what what you're looking at

294
00:13:38,720 --> 00:13:40,160
um

295
00:13:40,160 --> 00:13:41,680
another issue was is connection pulling

296
00:13:41,680 --> 00:13:43,680
off the right default and yes so a lot

297
00:13:43,680 --> 00:13:45,600
pulling still defaults to false

298
00:13:45,600 --> 00:13:49,000
next slide

299
00:13:49,279 --> 00:13:51,040
all right so current issues of debate so

300
00:13:51,040 --> 00:13:52,639
we have three

301
00:13:52,639 --> 00:13:53,760
uh

302
00:13:53,760 --> 00:13:55,600
the remaining issues we've been circling

303
00:13:55,600 --> 00:13:57,600
around the same remaining issues

304
00:13:57,600 --> 00:14:00,240
and and this is one of them which is

305
00:14:00,240 --> 00:14:02,880
people want to send media

306
00:14:02,880 --> 00:14:04,320
and that doesn't always work so great

307
00:14:04,320 --> 00:14:06,240
with the default congestion controlling

308
00:14:06,240 --> 00:14:07,199
quick

309
00:14:07,199 --> 00:14:09,360
so we have agreement to provide some

310
00:14:09,360 --> 00:14:11,360
constructor level configuration api

311
00:14:11,360 --> 00:14:12,399
surface

312
00:14:12,399 --> 00:14:13,839
that would allow an application to

313
00:14:13,839 --> 00:14:16,639
specify its preference for the type of

314
00:14:16,639 --> 00:14:19,040
condition control to be used

315
00:14:19,040 --> 00:14:20,639
now

316
00:14:20,639 --> 00:14:22,399
we know that that's not

317
00:14:22,399 --> 00:14:25,680
necessarily available anywhere yet

318
00:14:25,680 --> 00:14:27,920
however

319
00:14:27,920 --> 00:14:30,160
we hope that we can get the api ready

320
00:14:30,160 --> 00:14:31,600
and

321
00:14:31,600 --> 00:14:33,199
have bashed out all the

322
00:14:33,199 --> 00:14:35,600
api decisions here

323
00:14:35,600 --> 00:14:38,399
to get us to candidate recommendation

324
00:14:38,399 --> 00:14:40,560
and we can then subsequently mark this

325
00:14:40,560 --> 00:14:42,240
as a feature at risk

326
00:14:42,240 --> 00:14:44,480
if implementations fail to materialize

327
00:14:44,480 --> 00:14:47,040
prior to proposed recommendation

328
00:14:47,040 --> 00:14:49,680
so discussions around shape uh remain so

329
00:14:49,680 --> 00:14:51,519
we have two proposals

330
00:14:51,519 --> 00:14:53,920
with two directions basically one is a

331
00:14:53,920 --> 00:14:55,680
highly abstract

332
00:14:55,680 --> 00:14:58,320
input that you specify basically the

333
00:14:58,320 --> 00:14:59,839
type of

334
00:14:59,839 --> 00:15:02,000
congestion control the type of problem

335
00:15:02,000 --> 00:15:04,079
you want congestion control to solve

336
00:15:04,079 --> 00:15:05,760
where the default will be throughput

337
00:15:05,760 --> 00:15:07,120
which we have today

338
00:15:07,120 --> 00:15:09,279
and then load latency would be a sort of

339
00:15:09,279 --> 00:15:10,720
application hint

340
00:15:10,720 --> 00:15:12,560
that i want to send something that is

341
00:15:12,560 --> 00:15:14,800
more real-time than that

342
00:15:14,800 --> 00:15:16,399
and with different trade-offs and the

343
00:15:16,399 --> 00:15:18,240
alternative is

344
00:15:18,240 --> 00:15:21,839
to have basically a getter that exposes

345
00:15:21,839 --> 00:15:23,360
the names of

346
00:15:23,360 --> 00:15:25,360
available congestion control algorithms

347
00:15:25,360 --> 00:15:26,800
and then you can then specify more

348
00:15:26,800 --> 00:15:28,000
specifically

349
00:15:28,000 --> 00:15:29,600
you can learn what the browser has but

350
00:15:29,600 --> 00:15:32,880
you can also specify a specific one

351
00:15:32,880 --> 00:15:35,360
next slide

352
00:15:38,560 --> 00:15:41,120
a second issue is uh datagrams versus

353
00:15:41,120 --> 00:15:43,120
streams and relative prioritization

354
00:15:43,120 --> 00:15:45,519
having a prioritization api

355
00:15:45,519 --> 00:15:47,440
discussion seems to center here on

356
00:15:47,440 --> 00:15:49,759
ordering instead of bandwidth allocation

357
00:15:49,759 --> 00:15:52,720
that's an observation from the shares

358
00:15:52,720 --> 00:15:54,160
ordering requires strict and not

359
00:15:54,160 --> 00:15:56,079
weighted levels

360
00:15:56,079 --> 00:15:57,279
um

361
00:15:57,279 --> 00:15:58,880
the the desire here seems to be to

362
00:15:58,880 --> 00:16:02,000
support use cases around uh you know one

363
00:16:02,000 --> 00:16:04,160
frame of media per stream

364
00:16:04,160 --> 00:16:06,399
as well as a control channel

365
00:16:06,399 --> 00:16:07,759
a high level control channel that you

366
00:16:07,759 --> 00:16:09,600
can't uh starve

367
00:16:09,600 --> 00:16:12,000
as well as real-time adb audio video

368
00:16:12,000 --> 00:16:13,360
streams and long-term background

369
00:16:13,360 --> 00:16:14,880
downloads

370
00:16:14,880 --> 00:16:16,639
so some schemes

371
00:16:16,639 --> 00:16:18,240
may need as many levels as we have

372
00:16:18,240 --> 00:16:20,240
objects in flight

373
00:16:20,240 --> 00:16:22,880
current proposals boil down to

374
00:16:22,880 --> 00:16:25,360
again there's disagreement so on one end

375
00:16:25,360 --> 00:16:28,160
i think at a minimum we think we need

376
00:16:28,160 --> 00:16:30,880
to to expose at least eight resettable

377
00:16:30,880 --> 00:16:33,839
levels to match what browsers are doing

378
00:16:33,839 --> 00:16:35,360
in most cases

379
00:16:35,360 --> 00:16:36,959
and this would allow javascript to down

380
00:16:36,959 --> 00:16:38,959
prioritize ongoing streams

381
00:16:38,959 --> 00:16:40,800
by basically saying

382
00:16:40,800 --> 00:16:42,800
on this stream that i've sent before set

383
00:16:42,800 --> 00:16:45,120
its priority now to a lower level

384
00:16:45,120 --> 00:16:48,639
which should give enough granularity

385
00:16:48,639 --> 00:16:51,360
to solve most problems with some effort

386
00:16:51,360 --> 00:16:52,880
um

387
00:16:52,880 --> 00:16:54,000
and this

388
00:16:54,000 --> 00:16:55,360
the assumption there is that you are

389
00:16:55,360 --> 00:16:58,160
going to have javascript in involved in

390
00:16:58,160 --> 00:16:59,920
the send loop that is going to be very

391
00:16:59,920 --> 00:17:01,040
active

392
00:17:01,040 --> 00:17:03,199
and responding to

393
00:17:03,199 --> 00:17:04,720
changing conditions

394
00:17:04,720 --> 00:17:06,480
in your

395
00:17:06,480 --> 00:17:08,880
connection so this is a low-level

396
00:17:08,880 --> 00:17:10,000
version

397
00:17:10,000 --> 00:17:12,160
now the alternative would be to provide

398
00:17:12,160 --> 00:17:14,559
something more

399
00:17:14,559 --> 00:17:16,400
upfront where you can specify fixed

400
00:17:16,400 --> 00:17:17,520
levels

401
00:17:17,520 --> 00:17:18,400
and

402
00:17:18,400 --> 00:17:21,199
that has been specifically requested for

403
00:17:21,199 --> 00:17:22,319
a warp

404
00:17:22,319 --> 00:17:23,199
and

405
00:17:23,199 --> 00:17:25,199
chrome

406
00:17:25,199 --> 00:17:26,959
has volunteered to investigate if that

407
00:17:26,959 --> 00:17:28,480
is practical

408
00:17:28,480 --> 00:17:31,679
having in 32 number of levels

409
00:17:31,679 --> 00:17:34,400
would provide javascript with some more

410
00:17:34,400 --> 00:17:36,640
ability to just hear all the priorities

411
00:17:36,640 --> 00:17:39,200
levels i want send it to that order and

412
00:17:39,200 --> 00:17:42,160
and i don't need to change it later

413
00:17:42,160 --> 00:17:44,559
next slide

414
00:17:44,559 --> 00:17:47,520
what's up jake uh

415
00:17:47,520 --> 00:17:50,000
is it is there a should i ask questions

416
00:17:50,000 --> 00:17:51,520
now or

417
00:17:51,520 --> 00:17:54,080
i have a question about the yeah but for

418
00:17:54,080 --> 00:17:55,280
next time

419
00:17:55,280 --> 00:17:57,360
go in the queue from the button but yeah

420
00:17:57,360 --> 00:17:59,120
go ahead okay sorry

421
00:17:59,120 --> 00:18:01,200
uh hi i'm jake holland i wanted to ask

422
00:18:01,200 --> 00:18:03,120
about the congestion control api are you

423
00:18:03,120 --> 00:18:04,799
also going to

424
00:18:04,799 --> 00:18:06,960
uh set the server side congestion

425
00:18:06,960 --> 00:18:08,000
control

426
00:18:08,000 --> 00:18:10,799
with this api no i should uh no i should

427
00:18:10,799 --> 00:18:12,320
have clarified this is this would only

428
00:18:12,320 --> 00:18:13,679
be for

429
00:18:13,679 --> 00:18:15,200
we assume servers will take care of

430
00:18:15,200 --> 00:18:17,440
their own congestion control and clients

431
00:18:17,440 --> 00:18:19,280
in that case will just receive

432
00:18:19,280 --> 00:18:22,240
what they receive so uh so apologies so

433
00:18:22,240 --> 00:18:24,240
this would only be for uh ingestion and

434
00:18:24,240 --> 00:18:25,120
basically

435
00:18:25,120 --> 00:18:27,600
for clients sending media to servers

436
00:18:27,600 --> 00:18:29,280
that's the that's the missing gap that

437
00:18:29,280 --> 00:18:31,440
we're trying to specify

438
00:18:31,440 --> 00:18:33,200
thanks for that question

439
00:18:33,200 --> 00:18:36,640
thanks and uh just for for everyone um i

440
00:18:36,640 --> 00:18:38,720
think it's really important to get some

441
00:18:38,720 --> 00:18:41,760
itf involvement in the w in these issues

442
00:18:41,760 --> 00:18:44,480
from the w3c so i just pasted a link to

443
00:18:44,480 --> 00:18:47,120
the github in the chat here

444
00:18:47,120 --> 00:18:48,880
and i think the congestion control one

445
00:18:48,880 --> 00:18:50,720
is a perfect example

446
00:18:50,720 --> 00:18:51,919
um

447
00:18:51,919 --> 00:18:53,440
so there might be some people in the

448
00:18:53,440 --> 00:18:55,760
room who have opinions on latency if

449
00:18:55,760 --> 00:18:58,480
latency or throughput matters more

450
00:18:58,480 --> 00:18:59,600
and

451
00:18:59,600 --> 00:19:01,440
there might be more in this room than

452
00:19:01,440 --> 00:19:04,080
they are at the w3c so

453
00:19:04,080 --> 00:19:05,919
please go and comment on those issues

454
00:19:05,919 --> 00:19:07,679
that's what we're asking for here

455
00:19:07,679 --> 00:19:09,440
because that that's the kind of thing

456
00:19:09,440 --> 00:19:12,240
where the w3c has to figure out an api

457
00:19:12,240 --> 00:19:13,120
for it

458
00:19:13,120 --> 00:19:15,679
but we have the congestion control

459
00:19:15,679 --> 00:19:17,440
experience that ietf

460
00:19:17,440 --> 00:19:19,440
so this is the kind of cross-pollination

461
00:19:19,440 --> 00:19:21,200
that we left to see

462
00:19:21,200 --> 00:19:25,120
and i see bernard in the queue

463
00:19:25,120 --> 00:19:26,720
yeah i just wanted to mention something

464
00:19:26,720 --> 00:19:29,120
yanovar uh which has come up at this

465
00:19:29,120 --> 00:19:31,840
meeting which is uh the idea some of the

466
00:19:31,840 --> 00:19:33,360
i4s

467
00:19:33,360 --> 00:19:34,640
uh stuff

468
00:19:34,640 --> 00:19:36,799
and in that situation you can have

469
00:19:36,799 --> 00:19:38,400
algorithms that are

470
00:19:38,400 --> 00:19:39,679
really about

471
00:19:39,679 --> 00:19:40,960
both

472
00:19:40,960 --> 00:19:43,360
latency and throughput like

473
00:19:43,360 --> 00:19:44,799
prague

474
00:19:44,799 --> 00:19:49,918
um so anyway just just a weird little uh

475
00:19:51,280 --> 00:19:53,280
uh yes uh there was a detail in the api

476
00:19:53,280 --> 00:19:55,280
didn't show which is that uh you can

477
00:19:55,280 --> 00:19:56,080
still

478
00:19:56,080 --> 00:19:57,919
for the second proposal when you expose

479
00:19:57,919 --> 00:19:59,919
the name you don't you can also expose

480
00:19:59,919 --> 00:20:01,520
other attributes of each congestion

481
00:20:01,520 --> 00:20:03,120
controller such as

482
00:20:03,120 --> 00:20:04,480
what the aim of it is and you can have

483
00:20:04,480 --> 00:20:05,520
enums

484
00:20:05,520 --> 00:20:07,919
for for several of these properties if

485
00:20:07,919 --> 00:20:09,360
you will

486
00:20:09,360 --> 00:20:11,679
so but but uh thanks david that's a good

487
00:20:11,679 --> 00:20:14,080
question that uh good

488
00:20:14,080 --> 00:20:15,520
it's good to highlight that these aren't

489
00:20:15,520 --> 00:20:17,200
set in stone in any way this is just

490
00:20:17,200 --> 00:20:20,080
early discussion and if they provoke you

491
00:20:20,080 --> 00:20:22,799
to uh participate that is

492
00:20:22,799 --> 00:20:24,559
excellent so so

493
00:20:24,559 --> 00:20:26,320
we're definitely

494
00:20:26,320 --> 00:20:28,159
uh maybe a bit

495
00:20:28,159 --> 00:20:29,360
we we could definitely use some more

496
00:20:29,360 --> 00:20:31,440
input from more people and that would

497
00:20:31,440 --> 00:20:34,880
probably help move this discussion along

498
00:20:34,880 --> 00:20:37,520
and i see uh omar in the queue by the

499
00:20:37,520 --> 00:20:39,520
way if you get in line in the queue

500
00:20:39,520 --> 00:20:41,039
don't hesitate to like walk up to the

501
00:20:41,039 --> 00:20:42,880
microphone as well so you're ready to

502
00:20:42,880 --> 00:20:45,919
talk when we call on you

503
00:20:48,480 --> 00:20:50,640
can you hear me through the mask uh

504
00:20:50,640 --> 00:20:52,880
speak a bit close as close to the man to

505
00:20:52,880 --> 00:20:54,480
the mic as you can please

506
00:20:54,480 --> 00:20:58,880
owner shapira uh apple uh

507
00:20:59,360 --> 00:21:00,320
as

508
00:21:00,320 --> 00:21:02,320
david hinted there are many people with

509
00:21:02,320 --> 00:21:04,720
opinions about what matters more uh

510
00:21:04,720 --> 00:21:07,440
servatory latency they spent

511
00:21:07,440 --> 00:21:09,600
four wonderful days

512
00:21:09,600 --> 00:21:11,840
discussing this last year

513
00:21:11,840 --> 00:21:14,158
uh

514
00:21:15,280 --> 00:21:17,440
the opinion that i'm going to voice is

515
00:21:17,440 --> 00:21:21,440
that it may be counter-produ

516
00:21:21,440 --> 00:21:24,080
it may be not useful to

517
00:21:24,080 --> 00:21:26,080
allow the

518
00:21:26,080 --> 00:21:29,919
uh application to set the name of the

519
00:21:29,919 --> 00:21:31,520
construction control

520
00:21:31,520 --> 00:21:33,840
because by careful

521
00:21:33,840 --> 00:21:36,720
tweaking of the parameters one can cause

522
00:21:36,720 --> 00:21:38,799
neurina behave like cubic and cubic

523
00:21:38,799 --> 00:21:40,480
behave like tahoe

524
00:21:40,480 --> 00:21:44,000
and what's not

525
00:21:44,000 --> 00:21:46,240
may be much more productive to

526
00:21:46,240 --> 00:21:47,919
have the application

527
00:21:47,919 --> 00:21:50,640
uh express its um

528
00:21:50,640 --> 00:21:52,320
its goal

529
00:21:52,320 --> 00:21:55,760
do i want to be uh do i do i need the

530
00:21:55,760 --> 00:21:58,559
real damage

531
00:21:58,640 --> 00:21:59,840
latency

532
00:21:59,840 --> 00:22:02,559
how sensitive mi2 delays

533
00:22:02,559 --> 00:22:07,760
how sensitive am i to so good spikes

534
00:22:07,919 --> 00:22:10,640
etc

535
00:22:10,880 --> 00:22:13,840
that's what i have to say

536
00:22:14,880 --> 00:22:18,240
thank you omar can i ask you to uh

537
00:22:18,240 --> 00:22:20,080
like kind of take what you said and put

538
00:22:20,080 --> 00:22:21,679
it in that issue i think that's really

539
00:22:21,679 --> 00:22:24,000
good feedback uh i'll post a link to

540
00:22:24,000 --> 00:22:26,799
that specific issue um on in the chat

541
00:22:26,799 --> 00:22:29,120
thank you so much stewart thank you yeah

542
00:22:29,120 --> 00:22:32,639
i think that's good input thanks

543
00:22:32,880 --> 00:22:34,080
i saw

544
00:22:34,080 --> 00:22:35,600
david was talking about throughput and

545
00:22:35,600 --> 00:22:37,280
latency and looking meaningfully in my

546
00:22:37,280 --> 00:22:39,520
direction so i felt compelled to say

547
00:22:39,520 --> 00:22:40,400
something

548
00:22:40,400 --> 00:22:42,720
um

549
00:22:43,039 --> 00:22:46,080
uh i worry here that there's a tendency

550
00:22:46,080 --> 00:22:48,960
to overcomplicate things

551
00:22:48,960 --> 00:22:50,720
um

552
00:22:50,720 --> 00:22:54,080
as we've seen this week at the hackathon

553
00:22:54,080 --> 00:22:57,520
with the almost work done on l4s

554
00:22:57,520 --> 00:22:59,280
uh and other things that have been going

555
00:22:59,280 --> 00:23:01,679
on in the industry this year

556
00:23:01,679 --> 00:23:04,559
it's possible to have low latency

557
00:23:04,559 --> 00:23:07,120
anti-throughput at the same time

558
00:23:07,120 --> 00:23:10,159
it's not an either or choice

559
00:23:10,159 --> 00:23:11,600
priorities

560
00:23:11,600 --> 00:23:13,919
become very problematic because

561
00:23:13,919 --> 00:23:15,280
somebody's got to decide what the

562
00:23:15,280 --> 00:23:17,200
relative priorities are

563
00:23:17,200 --> 00:23:19,280
and

564
00:23:19,280 --> 00:23:20,640
and if you have enough bandwidth for

565
00:23:20,640 --> 00:23:22,480
everything then it doesn't matter

566
00:23:22,480 --> 00:23:24,720
every flow gets what it needs

567
00:23:24,720 --> 00:23:26,320
and if you don't have enough bandwidth

568
00:23:26,320 --> 00:23:27,919
for what you need

569
00:23:27,919 --> 00:23:30,320
then it becomes extremely tricky to

570
00:23:30,320 --> 00:23:31,600
figure out

571
00:23:31,600 --> 00:23:34,640
uh what is the right way to resolve that

572
00:23:34,640 --> 00:23:36,400
do you have a strict priority where you

573
00:23:36,400 --> 00:23:38,480
have you have total starvation for the

574
00:23:38,480 --> 00:23:40,080
lower priority things or do you have

575
00:23:40,080 --> 00:23:42,559
some relative priority

576
00:23:42,559 --> 00:23:43,679
um

577
00:23:43,679 --> 00:23:45,520
uh this is all very complicated but the

578
00:23:45,520 --> 00:23:47,919
good news is with l4s

579
00:23:47,919 --> 00:23:51,440
uh and similar technologies uh the whole

580
00:23:51,440 --> 00:23:54,000
problem goes away you you open multiple

581
00:23:54,000 --> 00:23:56,559
streams and they each get a nominal fair

582
00:23:56,559 --> 00:23:58,880
share of the capacity when it's scarce

583
00:23:58,880 --> 00:23:59,600
when

584
00:23:59,600 --> 00:24:02,080
when bandwidth is abundant

585
00:24:02,080 --> 00:24:04,960
then everything gets what it needs so

586
00:24:04,960 --> 00:24:06,080
um

587
00:24:06,080 --> 00:24:08,799
i guess the summary is that let's not

588
00:24:08,799 --> 00:24:11,120
over complicate this with mechanism that

589
00:24:11,120 --> 00:24:12,960
is is really hard to understand and even

590
00:24:12,960 --> 00:24:14,159
the people at the ietf who are

591
00:24:14,159 --> 00:24:15,760
congestion control experts find this

592
00:24:15,760 --> 00:24:17,919
hard to understand so the average web

593
00:24:17,919 --> 00:24:19,840
developer is probably just going to

594
00:24:19,840 --> 00:24:21,840
twiddle knobs randomly without even

595
00:24:21,840 --> 00:24:23,200
understanding the implications of what

596
00:24:23,200 --> 00:24:24,510
they're doing

597
00:24:24,510 --> 00:24:26,000
[Music]

598
00:24:26,000 --> 00:24:27,600
thank you stuart

599
00:24:27,600 --> 00:24:29,279
can i

600
00:24:29,279 --> 00:24:31,600
ask the same thing and just ah and also

601
00:24:31,600 --> 00:24:33,679
to everyone to also add that on the

602
00:24:33,679 --> 00:24:36,080
github issue for the w3c

603
00:24:36,080 --> 00:24:39,120
thank you alex

604
00:24:39,120 --> 00:24:41,840
um hi everyone i'm alex schneichowski i

605
00:24:41,840 --> 00:24:43,279
work at google and one of the things i

606
00:24:43,279 --> 00:24:44,559
wanted to mention is that i was a little

607
00:24:44,559 --> 00:24:46,159
bit surprised when i saw this slide

608
00:24:46,159 --> 00:24:48,000
because i remember when we were

609
00:24:48,000 --> 00:24:50,799
deploying bbr on the youtube cdn and one

610
00:24:50,799 --> 00:24:53,520
of the concerns that we had was

611
00:24:53,520 --> 00:24:55,840
that we actually saw people complaining

612
00:24:55,840 --> 00:24:58,080
about bbr's initial lack of fairness

613
00:24:58,080 --> 00:24:59,279
with all the other congestion

614
00:24:59,279 --> 00:25:01,120
controllers and one of the things that i

615
00:25:01,120 --> 00:25:02,799
worry about here is that even if you do

616
00:25:02,799 --> 00:25:04,640
something nice like saying you know aim

617
00:25:04,640 --> 00:25:07,120
low latency versus aim throughput

618
00:25:07,120 --> 00:25:09,120
if you give people the ability to choose

619
00:25:09,120 --> 00:25:10,559
these things they might actually end up

620
00:25:10,559 --> 00:25:12,080
with pathological behavior on the

621
00:25:12,080 --> 00:25:13,520
broader internet even though they've set

622
00:25:13,520 --> 00:25:15,840
their aims and i think that

623
00:25:15,840 --> 00:25:17,840
my gut feeling is probably better to

624
00:25:17,840 --> 00:25:19,520
focus on high quality congestion

625
00:25:19,520 --> 00:25:20,960
controllers which

626
00:25:20,960 --> 00:25:23,440
do well most of the time and not give

627
00:25:23,440 --> 00:25:26,240
apis which might actually result in

628
00:25:26,240 --> 00:25:27,760
poor performance unless you are very

629
00:25:27,760 --> 00:25:29,039
careful and know how to hold them i

630
00:25:29,039 --> 00:25:30,080
think

631
00:25:30,080 --> 00:25:31,360
the experts who work on congestion

632
00:25:31,360 --> 00:25:33,520
control know very well how to do this

633
00:25:33,520 --> 00:25:35,360
well and the rest of us should benefit

634
00:25:35,360 --> 00:25:38,080
from their knowledge

635
00:25:39,279 --> 00:25:40,320
thank you

636
00:25:40,320 --> 00:25:41,760
luke

637
00:25:41,760 --> 00:25:45,440
hi uh luke from twitch here um so

638
00:25:45,440 --> 00:25:47,039
first thing the congestion control uh

639
00:25:47,039 --> 00:25:49,120
it's something that is i think the low

640
00:25:49,120 --> 00:25:51,200
latency hint is pretty important um one

641
00:25:51,200 --> 00:25:52,480
of the things with warp that we struggle

642
00:25:52,480 --> 00:25:54,720
with is uh cue management and just

643
00:25:54,720 --> 00:25:56,480
trying to have this buffer in the socket

644
00:25:56,480 --> 00:25:57,919
that needs to be sent

645
00:25:57,919 --> 00:26:00,000
and buffer bloat is an issue like if

646
00:26:00,000 --> 00:26:02,799
there's 500 milliseconds of rtt it's

647
00:26:02,799 --> 00:26:04,720
like there's no point prioritizing

648
00:26:04,720 --> 00:26:06,240
anything like

649
00:26:06,240 --> 00:26:07,760
you just everything's gonna be ordered

650
00:26:07,760 --> 00:26:09,120
over the wire

651
00:26:09,120 --> 00:26:11,120
um so just a way of you know saying

652
00:26:11,120 --> 00:26:13,039
congestion control like keep the rtt

653
00:26:13,039 --> 00:26:14,880
down is important

654
00:26:14,880 --> 00:26:17,440
and for the next slide just um

655
00:26:17,440 --> 00:26:18,720
i think there's two little things that

656
00:26:18,720 --> 00:26:21,279
come down to it one is um like you said

657
00:26:21,279 --> 00:26:24,080
mentioned ordering is important um it's

658
00:26:24,080 --> 00:26:25,600
not clear if the eight levels the

659
00:26:25,600 --> 00:26:27,039
ordering is

660
00:26:27,039 --> 00:26:29,039
mainly like uh is

661
00:26:29,039 --> 00:26:31,200
priority two always uh lower than

662
00:26:31,200 --> 00:26:32,640
priority three

663
00:26:32,640 --> 00:26:34,480
um and exactly like you mentioned as

664
00:26:34,480 --> 00:26:36,159
well you need at least enough levels as

665
00:26:36,159 --> 00:26:37,840
there are active streams and eight is

666
00:26:37,840 --> 00:26:39,360
kind of low

667
00:26:39,360 --> 00:26:40,960
but um

668
00:26:40,960 --> 00:26:42,880
for warp it would be fine honestly but

669
00:26:42,880 --> 00:26:44,640
um if you start doing stuff like per

670
00:26:44,640 --> 00:26:46,320
frame priorities

671
00:26:46,320 --> 00:26:49,360
then eight is just gonna be artificially

672
00:26:49,360 --> 00:26:51,039
low it's almost like a flow control

673
00:26:51,039 --> 00:26:53,200
limit of eight hard-coded

674
00:26:53,200 --> 00:26:54,960
there's just not much you can do

675
00:26:54,960 --> 00:26:56,559
but all end of the day it all comes down

676
00:26:56,559 --> 00:26:58,159
to buffer management just a way of

677
00:26:58,159 --> 00:27:00,400
saying uh we want this data to be sent

678
00:27:00,400 --> 00:27:02,000
over the wire first

679
00:27:02,000 --> 00:27:03,600
and uh nothing else can get in front of

680
00:27:03,600 --> 00:27:05,440
it

681
00:27:05,440 --> 00:27:07,760
thank you

682
00:27:07,760 --> 00:27:08,799
thank you

683
00:27:08,799 --> 00:27:10,799
jonathan uh yeah donald linux i mean i

684
00:27:10,799 --> 00:27:13,039
get the impression that the

685
00:27:13,039 --> 00:27:14,640
what is actually meant by throughput

686
00:27:14,640 --> 00:27:17,440
versus low latency is cubic versus gcc

687
00:27:17,440 --> 00:27:20,399
which i mean personally i'd be fine with

688
00:27:20,399 --> 00:27:22,240
but um

689
00:27:22,240 --> 00:27:24,559
i mean obviously short term longer term

690
00:27:24,559 --> 00:27:25,520
um

691
00:27:25,520 --> 00:27:27,279
personally congestion control people

692
00:27:27,279 --> 00:27:28,640
will come up with something more clever

693
00:27:28,640 --> 00:27:29,440
but

694
00:27:29,440 --> 00:27:30,720
in the short term those are the two

695
00:27:30,720 --> 00:27:32,559
algorithms that are actually

696
00:27:32,559 --> 00:27:34,960
deployed in chrome and i suspect the

697
00:27:34,960 --> 00:27:36,720
idea is to switch out the one for the

698
00:27:36,720 --> 00:27:38,720
other

699
00:27:38,720 --> 00:27:41,279
uh just to add as someone who used to

700
00:27:41,279 --> 00:27:43,279
work on chrome chrome supports bbr as

701
00:27:43,279 --> 00:27:45,200
well okay well i mean

702
00:27:45,200 --> 00:27:46,720
but yeah i mean i think the the goal of

703
00:27:46,720 --> 00:27:48,240
the people who want the low latency is

704
00:27:48,240 --> 00:27:49,679
to basically to get

705
00:27:49,679 --> 00:27:52,080
something like gcc you know for the

706
00:27:52,080 --> 00:27:54,799
interactive media

707
00:28:00,480 --> 00:28:03,440
thanks yeah i know to uh

708
00:28:03,440 --> 00:28:04,960
relay that conversation that happened

709
00:28:04,960 --> 00:28:07,039
away from the mic you mentioned gcc is

710
00:28:07,039 --> 00:28:08,640
google's congestion control not

711
00:28:08,640 --> 00:28:11,120
everyone's second favorite compiler

712
00:28:11,120 --> 00:28:14,918
uh victor you're next

713
00:28:25,600 --> 00:28:28,159
oh sure oh i just wanted to say get

714
00:28:28,159 --> 00:28:30,559
closer to the mic please okay

715
00:28:30,559 --> 00:28:33,440
uh i just wanted to say that there is

716
00:28:33,440 --> 00:28:35,760
practical tradeoff between

717
00:28:35,760 --> 00:28:37,760
throughput and latency in the sense that

718
00:28:37,760 --> 00:28:39,360
there is some level of fundamental

719
00:28:39,360 --> 00:28:42,559
uncertainty of what your benefits

720
00:28:42,559 --> 00:28:44,640
and any attempt to probe it would result

721
00:28:44,640 --> 00:28:47,039
in building up secure so

722
00:28:47,039 --> 00:28:48,000
uh

723
00:28:48,000 --> 00:28:51,360
that is one of the fundamental tuning

724
00:28:51,360 --> 00:28:53,279
properties that pretty much every

725
00:28:53,279 --> 00:28:55,840
congestion control scheme has to

726
00:28:55,840 --> 00:28:58,960
overcome so from that perspective

727
00:28:58,960 --> 00:29:03,520
setting latency targets make sense

728
00:29:06,159 --> 00:29:07,520
thank you victor

729
00:29:07,520 --> 00:29:09,840
ian

730
00:29:12,240 --> 00:29:14,799
ian sweat uh google yeah i would also

731
00:29:14,799 --> 00:29:16,320
prefer a objective-based approach

732
00:29:16,320 --> 00:29:18,000
whether it's latency or throughput i

733
00:29:18,000 --> 00:29:19,919
mean even two levels is vastly

734
00:29:19,919 --> 00:29:21,919
preferable so like there are times

735
00:29:21,919 --> 00:29:23,120
or we actually have deployments where

736
00:29:23,120 --> 00:29:26,799
we're using bbr b1 but we have it tuned

737
00:29:26,799 --> 00:29:29,279
to be much lower latency and it's not as

738
00:29:29,279 --> 00:29:30,399
good as like

739
00:29:30,399 --> 00:29:32,080
uh you know a real-time congestion

740
00:29:32,080 --> 00:29:34,320
control but it does prevent buffer bloat

741
00:29:34,320 --> 00:29:36,720
um and so for a given dash controller as

742
00:29:36,720 --> 00:29:38,480
did before you can commonly tune

743
00:29:38,480 --> 00:29:40,960
parameters to like provide output that's

744
00:29:40,960 --> 00:29:42,720
much more similar to one of the other i

745
00:29:42,720 --> 00:29:44,320
don't really know what we're going to do

746
00:29:44,320 --> 00:29:46,000
with cubic in this situation cubic seems

747
00:29:46,000 --> 00:29:47,919
like always the wrong option as a

748
00:29:47,919 --> 00:29:50,240
concession controller but um

749
00:29:50,240 --> 00:29:51,919
it's becoming a proposed standard and

750
00:29:51,919 --> 00:29:53,919
it's what we got so i don't let's let's

751
00:29:53,919 --> 00:29:55,440
hope that no one actually ships cubic by

752
00:29:55,440 --> 00:29:58,320
default here but

753
00:29:58,720 --> 00:30:00,240
thanks colin

754
00:30:00,240 --> 00:30:01,679
fascinating to hear the only thing we're

755
00:30:01,679 --> 00:30:03,840
standardizing sucks um

756
00:30:03,840 --> 00:30:06,880
the uh i wanted to actually jump back a

757
00:30:06,880 --> 00:30:09,440
bunch too there are some comments about

758
00:30:09,440 --> 00:30:11,600
users of this at the api level will just

759
00:30:11,600 --> 00:30:13,360
be confused with this and not how know

760
00:30:13,360 --> 00:30:14,880
how to set these things and that's

761
00:30:14,880 --> 00:30:16,880
that's unquestionably true in some cases

762
00:30:16,880 --> 00:30:18,240
with all these things i'm not arguing

763
00:30:18,240 --> 00:30:20,399
against that but i think that is the

764
00:30:20,399 --> 00:30:22,720
wrong thing to design for that the thing

765
00:30:22,720 --> 00:30:24,559
is we have to realize that whatever

766
00:30:24,559 --> 00:30:26,960
levels of controls here we give limit

767
00:30:26,960 --> 00:30:28,960
what the applications that literally

768
00:30:28,960 --> 00:30:32,000
billions of users use like zoom webex

769
00:30:32,000 --> 00:30:33,600
these other things that are using huge

770
00:30:33,600 --> 00:30:35,120
numbers of minutes

771
00:30:35,120 --> 00:30:37,039
they do know how to set this stuff okay

772
00:30:37,039 --> 00:30:38,480
they have some very good people at all

773
00:30:38,480 --> 00:30:39,919
of those companies are doing broad

774
00:30:39,919 --> 00:30:42,480
webrtc products and if you don't give

775
00:30:42,480 --> 00:30:43,840
them the controls to be able to set

776
00:30:43,840 --> 00:30:45,200
things up the way they need whether it's

777
00:30:45,200 --> 00:30:47,120
twitch or somebody else

778
00:30:47,120 --> 00:30:48,720
they just can't use this and they will

779
00:30:48,720 --> 00:30:50,559
will just abandon the web stuff and go

780
00:30:50,559 --> 00:30:52,080
use um

781
00:30:52,080 --> 00:30:53,760
thick apps which is it was the problem

782
00:30:53,760 --> 00:30:56,799
so we have to design for the use cases

783
00:30:56,799 --> 00:30:59,279
that represent large numbers of users of

784
00:30:59,279 --> 00:31:01,679
end users on the internet not designed

785
00:31:01,679 --> 00:31:03,840
for

786
00:31:03,840 --> 00:31:05,600
you know an average web developer who

787
00:31:05,600 --> 00:31:07,600
may not understand this stuff um so i

788
00:31:07,600 --> 00:31:10,320
think that we should design for giving

789
00:31:10,320 --> 00:31:12,480
lots of control of what's going on at

790
00:31:12,480 --> 00:31:14,000
this api level and i think that's a

791
00:31:14,000 --> 00:31:15,279
different direction than we have

792
00:31:15,279 --> 00:31:17,120
traditionally gone

793
00:31:17,120 --> 00:31:19,600
on javascript level apis but i think

794
00:31:19,600 --> 00:31:20,880
it's necessary if we want this to be

795
00:31:20,880 --> 00:31:22,960
successful thanks

796
00:31:22,960 --> 00:31:25,279
thank you and i've cut the cue after

797
00:31:25,279 --> 00:31:28,480
eric on this specific topic

798
00:31:28,480 --> 00:31:29,760
cool

799
00:31:29,760 --> 00:31:32,399
tommy pauly apple um

800
00:31:32,399 --> 00:31:35,279
so to colin's point i'm sympathetic that

801
00:31:35,279 --> 00:31:37,840
you want to be able to have fine grain

802
00:31:37,840 --> 00:31:40,080
control particularly like if you're

803
00:31:40,080 --> 00:31:41,519
doing something like option b where you

804
00:31:41,519 --> 00:31:43,120
want to give like here's the specific

805
00:31:43,120 --> 00:31:44,960
name of my congestion control algorithm

806
00:31:44,960 --> 00:31:46,399
and

807
00:31:46,399 --> 00:31:48,000
i i'm sure

808
00:31:48,000 --> 00:31:49,200
the people who know what they're doing

809
00:31:49,200 --> 00:31:51,519
will want to take advantage of that

810
00:31:51,519 --> 00:31:54,159
um my comment though on the

811
00:31:54,159 --> 00:31:56,880
other style if we have something

812
00:31:56,880 --> 00:31:59,039
like a that's more like here's just i'm

813
00:31:59,039 --> 00:32:01,919
describing what i like is there a reason

814
00:32:01,919 --> 00:32:02,720
that

815
00:32:02,720 --> 00:32:03,919
and maybe there's something else in the

816
00:32:03,919 --> 00:32:06,080
api already but is there a reason that

817
00:32:06,080 --> 00:32:07,760
we're specifying the properties of the

818
00:32:07,760 --> 00:32:10,000
congestion controller we want as opposed

819
00:32:10,000 --> 00:32:12,240
to specifying the properties of the

820
00:32:12,240 --> 00:32:14,720
traffic we're doing to say

821
00:32:14,720 --> 00:32:18,240
you know i i am doing

822
00:32:18,240 --> 00:32:20,640
real-time latency sensitive

823
00:32:20,640 --> 00:32:23,200
interactive audio or i'm doing

824
00:32:23,200 --> 00:32:25,200
just streaming of video or i'm doing

825
00:32:25,200 --> 00:32:28,480
more bulk data transfer and that way the

826
00:32:28,480 --> 00:32:30,000
system can choose the right congestion

827
00:32:30,000 --> 00:32:31,519
controller but also potentially other

828
00:32:31,519 --> 00:32:33,679
things and that's the model that

829
00:32:33,679 --> 00:32:34,799
we've seen

830
00:32:34,799 --> 00:32:38,399
um in other apis and like in taps and

831
00:32:38,399 --> 00:32:40,480
stuff like when they expose it it's like

832
00:32:40,480 --> 00:32:43,039
this is your category of traffic and

833
00:32:43,039 --> 00:32:44,159
then you can make potentially other

834
00:32:44,159 --> 00:32:45,840
decisions rather than

835
00:32:45,840 --> 00:32:47,440
having the application try to describe

836
00:32:47,440 --> 00:32:50,000
the congestion controller that they want

837
00:32:50,000 --> 00:32:51,039
with

838
00:32:51,039 --> 00:32:52,960
these other names like low latency and

839
00:32:52,960 --> 00:32:54,159
throughput

840
00:32:54,159 --> 00:32:55,440
um so like if we're not going to give it

841
00:32:55,440 --> 00:32:57,519
a specific name can we describe the

842
00:32:57,519 --> 00:32:59,279
traffic instead of the congestion

843
00:32:59,279 --> 00:33:02,159
controller properties

844
00:33:02,159 --> 00:33:05,760
that make sense thank you tommy mo

845
00:33:05,760 --> 00:33:08,080
moza daddy cisco um

846
00:33:08,080 --> 00:33:10,080
regarding collins point uh i think if

847
00:33:10,080 --> 00:33:11,760
you look at the webrtc example where we

848
00:33:11,760 --> 00:33:12,960
started off

849
00:33:12,960 --> 00:33:14,640
um you know thinking this stuff is way

850
00:33:14,640 --> 00:33:16,080
too complex for the average you know

851
00:33:16,080 --> 00:33:18,320
javascript person don't give them

852
00:33:18,320 --> 00:33:19,519
control list the browser has to do the

853
00:33:19,519 --> 00:33:21,440
rtp the browser just do the codex the

854
00:33:21,440 --> 00:33:22,960
browser has to do all of these things

855
00:33:22,960 --> 00:33:25,279
and then we started unwrapping that and

856
00:33:25,279 --> 00:33:26,880
now we give more control and now you

857
00:33:26,880 --> 00:33:28,320
have web codec so you don't have to do

858
00:33:28,320 --> 00:33:30,480
rtp and now you have wasm that can do

859
00:33:30,480 --> 00:33:31,919
the codec directly

860
00:33:31,919 --> 00:33:33,360
in javascript a little so i think we

861
00:33:33,360 --> 00:33:35,519
should realize that

862
00:33:35,519 --> 00:33:38,159
the application innovators are faster

863
00:33:38,159 --> 00:33:39,440
than the browser

864
00:33:39,440 --> 00:33:41,600
vendors and we need to

865
00:33:41,600 --> 00:33:44,399
bias some of our designs to that um one

866
00:33:44,399 --> 00:33:46,000
specific thing on the prioritization

867
00:33:46,000 --> 00:33:46,799
though

868
00:33:46,799 --> 00:33:47,840
um

869
00:33:47,840 --> 00:33:49,360
when you start talking about abstract

870
00:33:49,360 --> 00:33:50,880
levels you know one two three four five

871
00:33:50,880 --> 00:33:52,399
six whatever

872
00:33:52,399 --> 00:33:54,320
like someone said those numbers don't

873
00:33:54,320 --> 00:33:55,519
mean much unless you know what the

874
00:33:55,519 --> 00:33:57,919
actual prioritization method is whether

875
00:33:57,919 --> 00:33:59,840
it's you know strict priority or what

876
00:33:59,840 --> 00:34:01,600
the queuing discipline is and all that

877
00:34:01,600 --> 00:34:03,760
one of the things um people may want to

878
00:34:03,760 --> 00:34:06,080
consider is in rmcat there was a

879
00:34:06,080 --> 00:34:08,960
proposal called nada um it's actually an

880
00:34:08,960 --> 00:34:10,960
rfc now but uh it's an experimental

881
00:34:10,960 --> 00:34:12,480
congestion control and one of the

882
00:34:12,480 --> 00:34:14,239
interesting things about it is

883
00:34:14,239 --> 00:34:16,399
it has weighted fairness and so rather

884
00:34:16,399 --> 00:34:18,800
than expressing priority in terms of

885
00:34:18,800 --> 00:34:21,520
um you know abstract numbers

886
00:34:21,520 --> 00:34:23,119
they are weights and they are weights

887
00:34:23,119 --> 00:34:24,320
relative to

888
00:34:24,320 --> 00:34:26,159
what a default unprioritized stream

889
00:34:26,159 --> 00:34:28,960
would be so you have an atom almost you

890
00:34:28,960 --> 00:34:30,480
know as if

891
00:34:30,480 --> 00:34:32,960
you have an atom stream that if you

892
00:34:32,960 --> 00:34:35,440
don't do anything that's what you get

893
00:34:35,440 --> 00:34:38,000
but if you want to have a priority

894
00:34:38,000 --> 00:34:40,000
you you specify

895
00:34:40,000 --> 00:34:42,560
a weight so if you want to be a three

896
00:34:42,560 --> 00:34:44,800
three times heavy stream or a half heavy

897
00:34:44,800 --> 00:34:47,280
stream so that weight is in is in terms

898
00:34:47,280 --> 00:34:49,040
of an absolute thing it's in terms of

899
00:34:49,040 --> 00:34:50,560
it's relative to an absolute thing which

900
00:34:50,560 --> 00:34:53,760
is the default stream that you would get

901
00:34:53,760 --> 00:34:55,520
if you didn't do any prioritization so i

902
00:34:55,520 --> 00:34:56,800
think that may be a useful concept to

903
00:34:56,800 --> 00:34:58,240
look at when you look at doing the

904
00:34:58,240 --> 00:35:01,799
prioritization apis

905
00:35:02,640 --> 00:35:04,480
thank you that makes sense

906
00:35:04,480 --> 00:35:06,000
eric

907
00:35:06,000 --> 00:35:08,480
eric kinnear apple um if we go back to

908
00:35:08,480 --> 00:35:11,280
the congestion control stuff and

909
00:35:11,280 --> 00:35:13,680
continue to talk about it um

910
00:35:13,680 --> 00:35:15,760
one of the challenges that we've seen in

911
00:35:15,760 --> 00:35:16,880
trying to express something like low

912
00:35:16,880 --> 00:35:18,640
latency and throughput and i'm usually

913
00:35:18,640 --> 00:35:20,160
one of the first people to jump up and

914
00:35:20,160 --> 00:35:22,400
say no no describe what you want

915
00:35:22,400 --> 00:35:23,680
the properties of what you're looking

916
00:35:23,680 --> 00:35:26,240
for more than you know hard-coding cubic

917
00:35:26,240 --> 00:35:27,359
and assuming that's just going to get

918
00:35:27,359 --> 00:35:28,960
you what you want

919
00:35:28,960 --> 00:35:31,440
but i think we've alluded a bit in this

920
00:35:31,440 --> 00:35:32,880
discussion to the fact that like you

921
00:35:32,880 --> 00:35:34,320
might have something that gives you both

922
00:35:34,320 --> 00:35:37,200
low latency and throughput and so we've

923
00:35:37,200 --> 00:35:39,040
almost we've had real trouble trying to

924
00:35:39,040 --> 00:35:41,359
specify something that actually makes

925
00:35:41,359 --> 00:35:44,079
sense in real life for people uh it's

926
00:35:44,079 --> 00:35:45,760
almost like you want the inverse of that

927
00:35:45,760 --> 00:35:47,839
of let me tell you the thing i am most

928
00:35:47,839 --> 00:35:49,760
willing to compromise on

929
00:35:49,760 --> 00:35:51,280
because we haven't talked about like

930
00:35:51,280 --> 00:35:53,119
power here but that's another

931
00:35:53,119 --> 00:35:55,839
consideration um that you might be

932
00:35:55,839 --> 00:35:57,280
taking into account especially if you're

933
00:35:57,280 --> 00:35:58,800
you know trying to upload something to

934
00:35:58,800 --> 00:36:00,240
do ingestion of media in the background

935
00:36:00,240 --> 00:36:01,280
while the user goes off and does

936
00:36:01,280 --> 00:36:02,480
something else

937
00:36:02,480 --> 00:36:04,960
um and so

938
00:36:04,960 --> 00:36:06,640
once you start saying oh well i'm most

939
00:36:06,640 --> 00:36:09,200
willing to compromise on latency because

940
00:36:09,200 --> 00:36:11,040
i'm interested in everything else being

941
00:36:11,040 --> 00:36:12,800
better

942
00:36:12,800 --> 00:36:14,480
that starts to get really messy and kind

943
00:36:14,480 --> 00:36:16,800
of gross so i would almost support what

944
00:36:16,800 --> 00:36:19,200
tommy was saying of either let's go all

945
00:36:19,200 --> 00:36:21,040
the way up to the top and like describe

946
00:36:21,040 --> 00:36:23,200
what we're doing

947
00:36:23,200 --> 00:36:24,720
rather than some intermediate property

948
00:36:24,720 --> 00:36:26,960
that we think will accomplish that goal

949
00:36:26,960 --> 00:36:27,920
or

950
00:36:27,920 --> 00:36:30,079
and maybe both also

951
00:36:30,079 --> 00:36:32,320
give people a direct ability to just say

952
00:36:32,320 --> 00:36:34,400
nope like i'm advanced i know what i'm

953
00:36:34,400 --> 00:36:36,240
doing i'm working on developing

954
00:36:36,240 --> 00:36:38,480
conjunction controls and like i know i

955
00:36:38,480 --> 00:36:40,960
want bbr v2 let's do it that's going to

956
00:36:40,960 --> 00:36:44,079
be exactly what i want

957
00:36:44,320 --> 00:36:46,320
awesome thanks eric

958
00:36:46,320 --> 00:36:49,839
all right i i had a feeling that just

959
00:36:49,839 --> 00:36:51,599
poking the congestion control there

960
00:36:51,599 --> 00:36:53,359
would be very successful in an itf

961
00:36:53,359 --> 00:36:55,680
meeting and it was so thanks everyone

962
00:36:55,680 --> 00:36:57,359
for the really good discussion i'll

963
00:36:57,359 --> 00:36:59,599
repeat my point about please adding that

964
00:36:59,599 --> 00:37:02,400
on the w3c github this is really good

965
00:37:02,400 --> 00:37:03,920
input for them

966
00:37:03,920 --> 00:37:05,119
and uh

967
00:37:05,119 --> 00:37:07,520
that's something that they can act on so

968
00:37:07,520 --> 00:37:11,759
thank you all right yanivar keep going

969
00:37:12,000 --> 00:37:15,119
oh yes thank you can you hear me

970
00:37:15,520 --> 00:37:17,920
so yes uh thanks again and uh yes i

971
00:37:17,920 --> 00:37:20,160
think we should say the w3c will be

972
00:37:20,160 --> 00:37:23,280
probably perfectly happy to specify

973
00:37:23,280 --> 00:37:25,280
um whatever you guys come up with and

974
00:37:25,280 --> 00:37:27,200
we're very open to your input so thank

975
00:37:27,200 --> 00:37:29,839
you uh the last slide the current the

976
00:37:29,839 --> 00:37:32,320
third issue under debate

977
00:37:32,320 --> 00:37:33,920
is to expose some stats to enable

978
00:37:33,920 --> 00:37:35,680
javascript to build

979
00:37:35,680 --> 00:37:38,160
more rtp like real-time protocols for

980
00:37:38,160 --> 00:37:39,680
client to server

981
00:37:39,680 --> 00:37:42,079
audio video so the previous discussion

982
00:37:42,079 --> 00:37:44,720
was all about

983
00:37:44,720 --> 00:37:47,599
giving javascript control knobs for what

984
00:37:47,599 --> 00:37:50,480
the browser can do about it and there's

985
00:37:50,480 --> 00:37:51,839
some

986
00:37:51,839 --> 00:37:54,079
some who are trying to

987
00:37:54,079 --> 00:37:56,079
hand off this wholesale to javascript as

988
00:37:56,079 --> 00:37:57,839
well and you know somewhere in the

989
00:37:57,839 --> 00:37:59,359
middle you want to control all of this

990
00:37:59,359 --> 00:38:00,560
so

991
00:38:00,560 --> 00:38:02,960
uh this

992
00:38:02,960 --> 00:38:04,640
it's a separate issue that we're

993
00:38:04,640 --> 00:38:06,320
tracking it's assumed to be about

994
00:38:06,320 --> 00:38:08,480
datagrams only or

995
00:38:08,480 --> 00:38:10,720
at least at the connection level only

996
00:38:10,720 --> 00:38:12,240
um

997
00:38:12,240 --> 00:38:15,359
so uh this is again

998
00:38:15,359 --> 00:38:17,520
open for discussion uh current data

999
00:38:17,520 --> 00:38:18,800
ground stats

1000
00:38:18,800 --> 00:38:20,800
only detailed loss through we have

1001
00:38:20,800 --> 00:38:22,560
expired outgoing dropped incoming and

1002
00:38:22,560 --> 00:38:24,320
lost outgoing

1003
00:38:24,320 --> 00:38:26,160
and

1004
00:38:26,160 --> 00:38:28,720
um so we've struggled with what kind of

1005
00:38:28,720 --> 00:38:30,240
stats

1006
00:38:30,240 --> 00:38:31,760
so we've asked the question what kind of

1007
00:38:31,760 --> 00:38:33,760
what kind of stats would javascript need

1008
00:38:33,760 --> 00:38:36,079
in order to build its own

1009
00:38:36,079 --> 00:38:37,119
uh

1010
00:38:37,119 --> 00:38:39,599
congestion control algorithm for example

1011
00:38:39,599 --> 00:38:40,720
here

1012
00:38:40,720 --> 00:38:44,160
uh and so there's an rfc

1013
00:38:44,160 --> 00:38:47,920
8888 that suggested uh latest rtt packet

1014
00:38:47,920 --> 00:38:50,880
departure package or packet arrival

1015
00:38:50,880 --> 00:38:53,119
which i assume is arrival on the server

1016
00:38:53,119 --> 00:38:54,079
right

1017
00:38:54,079 --> 00:38:57,119
and then ecn maybe an ack info would be

1018
00:38:57,119 --> 00:38:58,960
sufficient

1019
00:38:58,960 --> 00:39:01,680
and we've also reached out to um david

1020
00:39:01,680 --> 00:39:04,000
balderson i hope i got your name right

1021
00:39:04,000 --> 00:39:05,440
for some experimental data over

1022
00:39:05,440 --> 00:39:08,400
implementing rtp over web transport

1023
00:39:08,400 --> 00:39:11,200
with bbr 2

1024
00:39:11,200 --> 00:39:13,520
or maybe bbr2 plus screen

1025
00:39:13,520 --> 00:39:15,520
so this is still

1026
00:39:15,520 --> 00:39:16,960
we still need more information here to

1027
00:39:16,960 --> 00:39:18,240
understand

1028
00:39:18,240 --> 00:39:20,240
um

1029
00:39:20,240 --> 00:39:22,720
what stats would be needed so if anyone

1030
00:39:22,720 --> 00:39:25,040
else is doing experiments like this

1031
00:39:25,040 --> 00:39:27,040
we would be very interested in your

1032
00:39:27,040 --> 00:39:29,839
input

1033
00:39:30,079 --> 00:39:32,000
and the reason why this is only for

1034
00:39:32,000 --> 00:39:33,359
datagrams or only at the connection

1035
00:39:33,359 --> 00:39:35,680
level is that the javascript api for

1036
00:39:35,680 --> 00:39:37,920
outgoing incoming streams

1037
00:39:37,920 --> 00:39:41,200
do not operate at the packet level so

1038
00:39:41,200 --> 00:39:42,720
the questions we still have are our

1039
00:39:42,720 --> 00:39:44,640
packets and datagrams sufficiently

1040
00:39:44,640 --> 00:39:48,880
analogous for an rtp like implementation

1041
00:39:48,880 --> 00:39:50,880
and you know

1042
00:39:50,880 --> 00:39:54,079
this is again an exploratory issue so

1043
00:39:54,079 --> 00:39:54,960
uh

1044
00:39:54,960 --> 00:39:57,599
questions of welcome

1045
00:39:57,599 --> 00:40:00,480
or input welcome i should say

1046
00:40:00,480 --> 00:40:03,599
i think that's my last slide

1047
00:40:05,440 --> 00:40:07,440
all right thank you genevar

1048
00:40:07,440 --> 00:40:08,960
um

1049
00:40:08,960 --> 00:40:11,119
the only bar sorry um

1050
00:40:11,119 --> 00:40:14,400
anyone have any questions on this before

1051
00:40:14,400 --> 00:40:17,680
we move on to the next topic

1052
00:40:19,200 --> 00:40:21,680
all right well thank you very much and

1053
00:40:21,680 --> 00:40:25,799
now it's external

1054
00:40:27,200 --> 00:40:29,520
come on up and take the mic off the

1055
00:40:29,520 --> 00:40:31,520
stand probably

1056
00:40:31,520 --> 00:40:34,000
and there's a pink x again

1057
00:40:34,000 --> 00:40:37,800
it's almost as good as a box

1058
00:40:39,920 --> 00:40:41,440
[Music]

1059
00:40:41,440 --> 00:40:43,040
how's that gonna do

1060
00:40:43,040 --> 00:40:44,240
yes no

1061
00:40:44,240 --> 00:40:46,640
good bad sweet all right

1062
00:40:46,640 --> 00:40:47,599
cool

1063
00:40:47,599 --> 00:40:50,319
i'm eric kinnear from apple and if we

1064
00:40:50,319 --> 00:40:52,720
can get the next slide please

1065
00:40:52,720 --> 00:40:54,640
we're going to talk a bit about the

1066
00:40:54,640 --> 00:40:57,119
capsule design team that we started in

1067
00:40:57,119 --> 00:40:59,440
ihf 113

1068
00:40:59,440 --> 00:41:02,000
and the main question was what the heck

1069
00:41:02,000 --> 00:41:04,000
should we do about capsules

1070
00:41:04,000 --> 00:41:06,240
so like should we use them should we not

1071
00:41:06,240 --> 00:41:07,440
use them

1072
00:41:07,440 --> 00:41:10,720
um we had an existing h2 spec for how we

1073
00:41:10,720 --> 00:41:13,359
do web transport over h2 and we were

1074
00:41:13,359 --> 00:41:15,839
defining all of these new h2 frames that

1075
00:41:15,839 --> 00:41:19,280
we wanted to use um to make a kind of a

1076
00:41:19,280 --> 00:41:21,280
baby quick that you run over an h2

1077
00:41:21,280 --> 00:41:22,400
stream

1078
00:41:22,400 --> 00:41:25,359
and we said some of these could also

1079
00:41:25,359 --> 00:41:27,200
look very very similar to what we're

1080
00:41:27,200 --> 00:41:29,200
using in h3 where we defined a couple of

1081
00:41:29,200 --> 00:41:30,960
different capsules as well and if we go

1082
00:41:30,960 --> 00:41:34,000
to the next slide

1083
00:41:34,000 --> 00:41:36,079
we can see like we had a datagram

1084
00:41:36,079 --> 00:41:37,760
capsule which is coming from hp

1085
00:41:37,760 --> 00:41:40,079
datagrams and we want to use that to

1086
00:41:40,079 --> 00:41:41,920
send it on an h2 stream just as much as

1087
00:41:41,920 --> 00:41:44,319
we want to send that in h3 uh there's

1088
00:41:44,319 --> 00:41:45,920
also a closed web transport session

1089
00:41:45,920 --> 00:41:48,560
capsule in h3 and if we go to the next

1090
00:41:48,560 --> 00:41:50,880
slide

1091
00:41:51,280 --> 00:41:52,880
we can see we have a whole pile of them

1092
00:41:52,880 --> 00:41:55,200
for h2 so the obvious crossover here is

1093
00:41:55,200 --> 00:41:57,040
something like datagram

1094
00:41:57,040 --> 00:41:59,359
we also had padding reset stream stop

1095
00:41:59,359 --> 00:42:00,319
sending

1096
00:42:00,319 --> 00:42:02,560
actual stream capsules

1097
00:42:02,560 --> 00:42:04,160
um and then

1098
00:42:04,160 --> 00:42:06,079
flow control which we've

1099
00:42:06,079 --> 00:42:07,839
stuck onto one line here but is some

1100
00:42:07,839 --> 00:42:10,880
combination of max data max streams max

1101
00:42:10,880 --> 00:42:12,800
stream data and then blocked variants

1102
00:42:12,800 --> 00:42:16,000
for all of those things

1103
00:42:16,000 --> 00:42:17,520
this is our new compact representation

1104
00:42:17,520 --> 00:42:18,319
of that

1105
00:42:18,319 --> 00:42:21,440
all right next slide please

1106
00:42:22,560 --> 00:42:24,720
we had looked at this slide in 113 as

1107
00:42:24,720 --> 00:42:27,440
kind of the precursor to um spinning up

1108
00:42:27,440 --> 00:42:29,200
this conversation so i wanted to just

1109
00:42:29,200 --> 00:42:30,560
look at it again so this is the full

1110
00:42:30,560 --> 00:42:31,839
list of all the different things that we

1111
00:42:31,839 --> 00:42:33,440
defined for h2

1112
00:42:33,440 --> 00:42:36,880
and if you go to the next slide

1113
00:42:36,880 --> 00:42:38,480
we had kind of tentatively talked about

1114
00:42:38,480 --> 00:42:39,920
hey there's this datagram one and it's

1115
00:42:39,920 --> 00:42:42,160
shared with h3 and so that would be cool

1116
00:42:42,160 --> 00:42:43,200
if these things shared and we didn't

1117
00:42:43,200 --> 00:42:44,960
just define two of the same thing and

1118
00:42:44,960 --> 00:42:47,599
that's kind of what got us talking about

1119
00:42:47,599 --> 00:42:49,280
should we be sharing everything else how

1120
00:42:49,280 --> 00:42:50,560
does the rest of this work what is the

1121
00:42:50,560 --> 00:42:54,079
role if i can i send a

1122
00:42:54,079 --> 00:42:56,720
wt stream capsule on

1123
00:42:56,720 --> 00:42:58,800
an h3 stream and

1124
00:42:58,800 --> 00:43:00,480
is that cool does that give us awesome

1125
00:43:00,480 --> 00:43:02,400
version independence does that

1126
00:43:02,400 --> 00:43:03,760
destroy everything and make things go

1127
00:43:03,760 --> 00:43:05,440
down in flames

1128
00:43:05,440 --> 00:43:08,319
so next slide please

1129
00:43:08,960 --> 00:43:10,960
we also opened the can of worms that is

1130
00:43:10,960 --> 00:43:13,839
flow control

1131
00:43:14,720 --> 00:43:17,280
that's what we started with in terms of

1132
00:43:17,280 --> 00:43:18,880
problems for everything and like i said

1133
00:43:18,880 --> 00:43:20,160
on the slide here we'll talk a little

1134
00:43:20,160 --> 00:43:21,599
bit more about flow control and some of

1135
00:43:21,599 --> 00:43:23,359
that stuff later but the opportunity

1136
00:43:23,359 --> 00:43:24,800
arose to say hey we have all of these

1137
00:43:24,800 --> 00:43:27,680
different like stream max stream data

1138
00:43:27,680 --> 00:43:29,520
blocked capsule should we send that on

1139
00:43:29,520 --> 00:43:31,520
h3 and what does that mean

1140
00:43:31,520 --> 00:43:32,720
so that's kind of what we set out to

1141
00:43:32,720 --> 00:43:34,880
solve uh where we are right now is we

1142
00:43:34,880 --> 00:43:36,240
have a pull request against h2 and a

1143
00:43:36,240 --> 00:43:37,920
pull request against h3 that we will

1144
00:43:37,920 --> 00:43:39,280
send the links out to on the mailing

1145
00:43:39,280 --> 00:43:40,800
list and ask for a bunch of input and

1146
00:43:40,800 --> 00:43:41,760
review

1147
00:43:41,760 --> 00:43:43,599
i'm going to summarize very quickly in

1148
00:43:43,599 --> 00:43:45,599
slide form what those do because that's

1149
00:43:45,599 --> 00:43:47,119
often a lot more

1150
00:43:47,119 --> 00:43:48,640
grockable than

1151
00:43:48,640 --> 00:43:50,079
reading a bunch of diff from what it

1152
00:43:50,079 --> 00:43:51,200
used to look like

1153
00:43:51,200 --> 00:43:54,800
so if we go to the next slide

1154
00:43:54,800 --> 00:43:57,839
the first thing that we talked about

1155
00:43:57,839 --> 00:43:58,960
and

1156
00:43:58,960 --> 00:44:01,520
came to a proposal on was what do we do

1157
00:44:01,520 --> 00:44:02,800
with this

1158
00:44:02,800 --> 00:44:04,880
splitting a datagram out into a native

1159
00:44:04,880 --> 00:44:06,720
h3 datagram that is actually truly

1160
00:44:06,720 --> 00:44:08,560
unreliable and quick whereas obviously

1161
00:44:08,560 --> 00:44:11,280
when you're sending a datagram over h2

1162
00:44:11,280 --> 00:44:12,720
it's going to get retransmitted whether

1163
00:44:12,720 --> 00:44:14,720
you like it or not

1164
00:44:14,720 --> 00:44:16,319
and so we've been referring to that kind

1165
00:44:16,319 --> 00:44:18,800
of as you're exploding something out

1166
00:44:18,800 --> 00:44:20,800
into a native feature or six other terms

1167
00:44:20,800 --> 00:44:22,319
for it but i chose to use explode here

1168
00:44:22,319 --> 00:44:24,880
so we're going to continue with that one

1169
00:44:24,880 --> 00:44:26,960
and we looked at some pros of why we

1170
00:44:26,960 --> 00:44:28,400
would want that it's really attractive

1171
00:44:28,400 --> 00:44:30,079
from a symmetry perspective to have this

1172
00:44:30,079 --> 00:44:32,480
single conceptual model that looks kind

1173
00:44:32,480 --> 00:44:33,920
of like a miniature version of quick

1174
00:44:33,920 --> 00:44:35,200
that you can run on

1175
00:44:35,200 --> 00:44:39,040
any http exchange that you have anywhere

1176
00:44:39,040 --> 00:44:41,040
you could potentially get h1 support out

1177
00:44:41,040 --> 00:44:42,400
of this for free

1178
00:44:42,400 --> 00:44:44,480
you just you know doesn't matter it's

1179
00:44:44,480 --> 00:44:46,560
completely transport agnostic this is

1180
00:44:46,560 --> 00:44:48,960
just how i send web transport streams

1181
00:44:48,960 --> 00:44:50,400
there's a web transport stream capsule

1182
00:44:50,400 --> 00:44:52,240
and it just goes where it's going to go

1183
00:44:52,240 --> 00:44:53,200
and it gets there how it's going to get

1184
00:44:53,200 --> 00:44:55,040
there

1185
00:44:55,040 --> 00:44:56,640
this is also kind of fun because if we

1186
00:44:56,640 --> 00:44:58,079
reuse all this stuff

1187
00:44:58,079 --> 00:44:59,359
things that we do in the future for

1188
00:44:59,359 --> 00:45:00,880
different extensions if we add new

1189
00:45:00,880 --> 00:45:02,640
capsules those automatically work for h3

1190
00:45:02,640 --> 00:45:04,720
they automatically work for h2

1191
00:45:04,720 --> 00:45:05,599
and

1192
00:45:05,599 --> 00:45:06,960
if there's a butt coming it's on the

1193
00:45:06,960 --> 00:45:09,520
next slide

1194
00:45:09,680 --> 00:45:12,400
there's a way longer list of cons

1195
00:45:12,400 --> 00:45:13,440
which are

1196
00:45:13,440 --> 00:45:15,839
mainly and primarily that we care the

1197
00:45:15,839 --> 00:45:19,200
most about h3 for web transport and h3

1198
00:45:19,200 --> 00:45:20,640
is the one where you have the most

1199
00:45:20,640 --> 00:45:22,480
native feature usage already right so

1200
00:45:22,480 --> 00:45:25,119
like datagrams actually go in h3

1201
00:45:25,119 --> 00:45:28,000
datagrams um

1202
00:45:28,000 --> 00:45:30,400
now you'd have to be able to handle all

1203
00:45:30,400 --> 00:45:32,880
of those capsules arriving on the same

1204
00:45:32,880 --> 00:45:34,240
stream so when you had different web

1205
00:45:34,240 --> 00:45:36,000
transport streams instead of those being

1206
00:45:36,000 --> 00:45:37,200
different

1207
00:45:37,200 --> 00:45:39,359
h3 streams you'd have to cope with

1208
00:45:39,359 --> 00:45:41,119
multiplexing them onto a single h3

1209
00:45:41,119 --> 00:45:42,000
stream

1210
00:45:42,000 --> 00:45:43,839
and as much as that's great and gives

1211
00:45:43,839 --> 00:45:45,280
you all this great protocol you know

1212
00:45:45,280 --> 00:45:47,839
kind of transport independence

1213
00:45:47,839 --> 00:45:49,760
now the common case you have to be like

1214
00:45:49,760 --> 00:45:51,599
how's it coming in what do i do are you

1215
00:45:51,599 --> 00:45:53,599
allowed to switch part way through

1216
00:45:53,599 --> 00:45:55,920
like what if some go over a single h3

1217
00:45:55,920 --> 00:45:57,280
stream but others you choose to split

1218
00:45:57,280 --> 00:45:58,960
out into its own h3 stream and like can

1219
00:45:58,960 --> 00:46:00,400
i restrict that if i'm not willing to

1220
00:46:00,400 --> 00:46:02,160
give you some of those resources and

1221
00:46:02,160 --> 00:46:03,680
what does that do to our stream limits

1222
00:46:03,680 --> 00:46:04,880
for flow control which we're going to

1223
00:46:04,880 --> 00:46:07,280
talk about in a second

1224
00:46:07,280 --> 00:46:09,440
so that's kind of painful there's also

1225
00:46:09,440 --> 00:46:11,280
one of our only two capsules so far for

1226
00:46:11,280 --> 00:46:12,880
h3 which is closing the web transport

1227
00:46:12,880 --> 00:46:15,599
session doesn't really make sense with

1228
00:46:15,599 --> 00:46:17,440
the like how would you explode that into

1229
00:46:17,440 --> 00:46:19,520
a native feature that's not a native

1230
00:46:19,520 --> 00:46:21,920
feature that's just a signaling about

1231
00:46:21,920 --> 00:46:23,920
the h3 session

1232
00:46:23,920 --> 00:46:26,800
and then similarly

1233
00:46:26,880 --> 00:46:29,920
one of our other main pros that we were

1234
00:46:29,920 --> 00:46:31,839
excited about doing this with which was

1235
00:46:31,839 --> 00:46:33,359
that you know if we define it all in one

1236
00:46:33,359 --> 00:46:34,960
place when you improve it everybody gets

1237
00:46:34,960 --> 00:46:36,160
those improvements for free and we don't

1238
00:46:36,160 --> 00:46:37,599
have to keep having a parallel document

1239
00:46:37,599 --> 00:46:38,880
for every possible version we want to

1240
00:46:38,880 --> 00:46:40,480
send this on

1241
00:46:40,480 --> 00:46:42,000
gets more complicated because if we

1242
00:46:42,000 --> 00:46:43,280
decide that

1243
00:46:43,280 --> 00:46:45,040
on the down the line some extension

1244
00:46:45,040 --> 00:46:46,640
needs us to have used the native feature

1245
00:46:46,640 --> 00:46:49,119
or needs us to not have um we're kind of

1246
00:46:49,119 --> 00:46:50,400
screwed

1247
00:46:50,400 --> 00:46:52,960
so the proposal here is that

1248
00:46:52,960 --> 00:46:54,880
you have a per capsule requirement for

1249
00:46:54,880 --> 00:46:57,280
how to send it which is kind of already

1250
00:46:57,280 --> 00:46:59,839
inherent in capsules and is is already a

1251
00:46:59,839 --> 00:47:00,800
thing

1252
00:47:00,800 --> 00:47:02,560
but essentially that we're going to

1253
00:47:02,560 --> 00:47:03,839
require

1254
00:47:03,839 --> 00:47:05,760
that anything that can be

1255
00:47:05,760 --> 00:47:08,880
sent as a native feature is always sent

1256
00:47:08,880 --> 00:47:10,720
as a native feature so

1257
00:47:10,720 --> 00:47:13,119
you are not sending a datagram capsule

1258
00:47:13,119 --> 00:47:15,680
on your h3 stream it is

1259
00:47:15,680 --> 00:47:18,160
an actual datagram

1260
00:47:18,160 --> 00:47:20,240
and that persists throughout all of h3

1261
00:47:20,240 --> 00:47:21,839
everything that h3 can split out which

1262
00:47:21,839 --> 00:47:24,319
is most everything um looks just like it

1263
00:47:24,319 --> 00:47:26,720
does today there's no debate over oh but

1264
00:47:26,720 --> 00:47:28,000
it came in this other way am i supposed

1265
00:47:28,000 --> 00:47:29,359
to handle it some weird different way

1266
00:47:29,359 --> 00:47:31,359
and can i signal to the other person

1267
00:47:31,359 --> 00:47:32,480
about it

1268
00:47:32,480 --> 00:47:33,359
so

1269
00:47:33,359 --> 00:47:35,440
no weirdness there just if it can use a

1270
00:47:35,440 --> 00:47:36,880
native feature it must use the native

1271
00:47:36,880 --> 00:47:38,880
feature if you're in h2 and the native

1272
00:47:38,880 --> 00:47:41,920
feature isn't available then it is sent

1273
00:47:41,920 --> 00:47:45,680
as a capsule on the existing h2 string

1274
00:47:45,839 --> 00:47:48,640
next slide please

1275
00:47:50,079 --> 00:47:53,280
this is a nice easy one capsule protocol

1276
00:47:53,280 --> 00:47:55,440
is a header field

1277
00:47:55,440 --> 00:47:56,240
in

1278
00:47:56,240 --> 00:47:58,559
the http datagram document

1279
00:47:58,559 --> 00:48:00,640
we cheerfully say that you can either

1280
00:48:00,640 --> 00:48:01,680
use

1281
00:48:01,680 --> 00:48:03,760
the capsule protocol header field or you

1282
00:48:03,760 --> 00:48:06,079
can simply say that this upgrade token

1283
00:48:06,079 --> 00:48:09,040
implies that capsule support exists

1284
00:48:09,040 --> 00:48:10,960
and we're going to say great the upgrade

1285
00:48:10,960 --> 00:48:13,119
token web transport means capsules are a

1286
00:48:13,119 --> 00:48:16,079
thing and you have to be okay with that

1287
00:48:16,079 --> 00:48:18,160
mike

1288
00:48:18,160 --> 00:48:20,240
does that also require that the

1289
00:48:20,240 --> 00:48:22,640
underlying quick quick connection must

1290
00:48:22,640 --> 00:48:25,598
support datagrams

1291
00:48:26,160 --> 00:48:28,240
whoo that's a good question

1292
00:48:28,240 --> 00:48:29,920
because you've made an assumption there

1293
00:48:29,920 --> 00:48:31,760
that it must be used but you can't

1294
00:48:31,760 --> 00:48:33,359
assume that's true for all age three

1295
00:48:33,359 --> 00:48:35,680
unless you're making requirements on

1296
00:48:35,680 --> 00:48:37,760
the transport stack underneath you

1297
00:48:37,760 --> 00:48:40,079
that is a good point we require capsule

1298
00:48:40,079 --> 00:48:41,280
support

1299
00:48:41,280 --> 00:48:44,160
and we say that if you have

1300
00:48:44,160 --> 00:48:45,520
that's an interesting one if you have

1301
00:48:45,520 --> 00:48:48,240
datagrams available you have to use them

1302
00:48:48,240 --> 00:48:49,760
but

1303
00:48:49,760 --> 00:48:52,960
you have a button push the button

1304
00:48:54,160 --> 00:48:56,079
no join the queue and walk up to the mic

1305
00:48:56,079 --> 00:48:58,640
victor you know how this works i was

1306
00:48:58,640 --> 00:48:59,760
going to ask that question in the

1307
00:48:59,760 --> 00:49:01,280
previous slide but it took me that long

1308
00:49:01,280 --> 00:49:03,119
to find the button again i'm right there

1309
00:49:03,119 --> 00:49:05,359
with you

1310
00:49:09,920 --> 00:49:12,400
how do we normally signal if datagrams

1311
00:49:12,400 --> 00:49:14,880
aren't there

1312
00:49:14,880 --> 00:49:17,280
because we i mean we just say like i

1313
00:49:17,280 --> 00:49:18,720
support datagrams i'm good to go so i

1314
00:49:18,720 --> 00:49:20,880
guess if they don't do that then are you

1315
00:49:20,880 --> 00:49:23,280
actually doing web transport

1316
00:49:23,280 --> 00:49:25,119
right um

1317
00:49:25,119 --> 00:49:28,160
so tommy paulie um i mean the datagram

1318
00:49:28,160 --> 00:49:29,359
support

1319
00:49:29,359 --> 00:49:31,520
is indicated

1320
00:49:31,520 --> 00:49:32,400
via

1321
00:49:32,400 --> 00:49:34,880
transport parameter in quick so you need

1322
00:49:34,880 --> 00:49:37,119
that and that might not be there right

1323
00:49:37,119 --> 00:49:39,680
and you have the h3 level

1324
00:49:39,680 --> 00:49:40,720
setting

1325
00:49:40,720 --> 00:49:42,240
so

1326
00:49:42,240 --> 00:49:44,160
i mean either you're going to say you

1327
00:49:44,160 --> 00:49:46,079
don't like web transfers just going to

1328
00:49:46,079 --> 00:49:47,839
break in those cases or you need to

1329
00:49:47,839 --> 00:49:49,280
tweak the language where you say that

1330
00:49:49,280 --> 00:49:51,280
you must use datagram

1331
00:49:51,280 --> 00:49:52,960
in h3 to say

1332
00:49:52,960 --> 00:49:55,839
you must use datagram if you have

1333
00:49:55,839 --> 00:49:57,200
the transport parameter but if for some

1334
00:49:57,200 --> 00:49:58,079
reason the other side didn't do the

1335
00:49:58,079 --> 00:49:59,680
transfer parameter you know already that

1336
00:49:59,680 --> 00:50:01,599
it can't do it so then you must use the

1337
00:50:01,599 --> 00:50:03,839
capsule version of it but i think saying

1338
00:50:03,839 --> 00:50:05,760
that you have to support capsules is

1339
00:50:05,760 --> 00:50:07,839
fine because you always can do that well

1340
00:50:07,839 --> 00:50:09,040
we say that

1341
00:50:09,040 --> 00:50:10,640
if i can jump in and we say that web

1342
00:50:10,640 --> 00:50:13,040
transport uses the capsule protocol

1343
00:50:13,040 --> 00:50:14,480
so therefore if you support web

1344
00:50:14,480 --> 00:50:16,160
transport you support capsules that's

1345
00:50:16,160 --> 00:50:18,000
that's a given yeah that one i think is

1346
00:50:18,000 --> 00:50:19,520
straightforward the only the only

1347
00:50:19,520 --> 00:50:21,200
question is if our main goal here was to

1348
00:50:21,200 --> 00:50:22,240
not have

1349
00:50:22,240 --> 00:50:23,680
was to not force you to write code that

1350
00:50:23,680 --> 00:50:26,000
could handle them coming in both places

1351
00:50:26,000 --> 00:50:29,440
are we willing to say if you don't see

1352
00:50:29,440 --> 00:50:32,319
both quick datagrams and http datagrams

1353
00:50:32,319 --> 00:50:33,520
present that you're just going to take

1354
00:50:33,520 --> 00:50:34,720
your toys and go home and know web

1355
00:50:34,720 --> 00:50:37,439
transport for you

1356
00:50:39,280 --> 00:50:40,720
yeah so we've talked about this in the

1357
00:50:40,720 --> 00:50:42,800
past and i

1358
00:50:42,800 --> 00:50:45,040
i think the same set of concerns apply

1359
00:50:45,040 --> 00:50:46,800
here you can

1360
00:50:46,800 --> 00:50:48,240
you can very much on a sort of

1361
00:50:48,240 --> 00:50:50,720
connection by connection basis have a

1362
00:50:50,720 --> 00:50:52,160
stack of things that need to be

1363
00:50:52,160 --> 00:50:54,160
prerequisites for the for the next one

1364
00:50:54,160 --> 00:50:54,880
so

1365
00:50:54,880 --> 00:50:57,200
you need quick in order to get datagrams

1366
00:50:57,200 --> 00:50:58,880
you need datagrams in order to get h3

1367
00:50:58,880 --> 00:51:01,599
datagrams and you need h3 datagrams in

1368
00:51:01,599 --> 00:51:03,119
order to get

1369
00:51:03,119 --> 00:51:04,800
web transport to work

1370
00:51:04,800 --> 00:51:06,400
is a reasonable thing if we think about

1371
00:51:06,400 --> 00:51:09,119
it on a per connection basis

1372
00:51:09,119 --> 00:51:11,760
and i think that's still okay in this

1373
00:51:11,760 --> 00:51:13,119
context

1374
00:51:13,119 --> 00:51:15,200
it does mean that if someone's going to

1375
00:51:15,200 --> 00:51:16,960
try to deploy this

1376
00:51:16,960 --> 00:51:18,559
and they're using intermediaries in

1377
00:51:18,559 --> 00:51:20,720
their in their deployment

1378
00:51:20,720 --> 00:51:23,200
they're going to need to ensure that

1379
00:51:23,200 --> 00:51:25,920
when the the front end receives one of

1380
00:51:25,920 --> 00:51:28,319
these things and says yes it's okay

1381
00:51:28,319 --> 00:51:31,200
the connection onward is dealt with

1382
00:51:31,200 --> 00:51:32,240
somehow

1383
00:51:32,240 --> 00:51:34,559
whether that means translation or

1384
00:51:34,559 --> 00:51:36,960
whether it means uh full-on support for

1385
00:51:36,960 --> 00:51:38,559
the same sort of feature set

1386
00:51:38,559 --> 00:51:39,839
i think that's just something we can

1387
00:51:39,839 --> 00:51:42,079
write down and and explain

1388
00:51:42,079 --> 00:51:43,680
i know that's going to make some people

1389
00:51:43,680 --> 00:51:45,119
unhappy

1390
00:51:45,119 --> 00:51:47,440
but those people were probably unhappy

1391
00:51:47,440 --> 00:51:49,200
with the set of design choices we've

1392
00:51:49,200 --> 00:51:51,359
made here anyway

1393
00:51:51,359 --> 00:51:52,400
so

1394
00:51:52,400 --> 00:51:53,839
i think this is

1395
00:51:53,839 --> 00:51:56,160
fine

1396
00:51:56,160 --> 00:51:57,040
i do

1397
00:51:57,040 --> 00:51:58,960
kind of want to caution that

1398
00:51:58,960 --> 00:52:01,359
when when you have

1399
00:52:01,359 --> 00:52:03,440
something like the upgrade token that

1400
00:52:03,440 --> 00:52:04,640
sits on the top of a stack of

1401
00:52:04,640 --> 00:52:06,000
prerequisites

1402
00:52:06,000 --> 00:52:08,319
i don't think you want to just say oh

1403
00:52:08,319 --> 00:52:10,000
because the the upgrade token is there

1404
00:52:10,000 --> 00:52:10,960
you can

1405
00:52:10,960 --> 00:52:13,440
not provide the indicators for all of

1406
00:52:13,440 --> 00:52:14,800
the prerequisites i think you want to

1407
00:52:14,800 --> 00:52:17,520
have all all the prerequisites in also

1408
00:52:17,520 --> 00:52:20,160
signaled in that process and if they

1409
00:52:20,160 --> 00:52:21,760
don't appear

1410
00:52:21,760 --> 00:52:24,319
then something's broken and you fail

1411
00:52:24,319 --> 00:52:25,280
uh

1412
00:52:25,280 --> 00:52:27,119
so that you you can build software

1413
00:52:27,119 --> 00:52:29,200
that's rational with with all of these

1414
00:52:29,200 --> 00:52:31,200
things so you don't have to

1415
00:52:31,200 --> 00:52:32,720
okay so i've got a layer that's dealing

1416
00:52:32,720 --> 00:52:34,240
with capsules

1417
00:52:34,240 --> 00:52:35,920
i

1418
00:52:35,920 --> 00:52:37,520
don't want to have that layer suddenly

1419
00:52:37,520 --> 00:52:40,160
need to be taught about web transport

1420
00:52:40,160 --> 00:52:42,160
upgrade tokens

1421
00:52:42,160 --> 00:52:44,400
just so that it continues to function

1422
00:52:44,400 --> 00:52:49,200
so um this is fine um i would note that

1423
00:52:49,200 --> 00:52:51,520
we broke that principle in one place i

1424
00:52:51,520 --> 00:52:53,760
think for extended connect victor did

1425
00:52:53,760 --> 00:52:55,200
that yes

1426
00:52:55,200 --> 00:52:56,240
indeed

1427
00:52:56,240 --> 00:52:58,880
is it encompassing we yeah

1428
00:52:58,880 --> 00:53:01,839
um i understand that to be a problem for

1429
00:53:01,839 --> 00:53:04,000
some people but i think this whole idea

1430
00:53:04,000 --> 00:53:06,319
of implicit signaling that's tied to

1431
00:53:06,319 --> 00:53:09,119
other things is com is problematic when

1432
00:53:09,119 --> 00:53:11,599
it crosses layers it may be appropriate

1433
00:53:11,599 --> 00:53:13,760
at the layer in which it was done for

1434
00:53:13,760 --> 00:53:15,200
that one because it was all tied into

1435
00:53:15,200 --> 00:53:16,720
the same

1436
00:53:16,720 --> 00:53:19,359
negotiation i don't like that but that's

1437
00:53:19,359 --> 00:53:21,119
where we ended up and

1438
00:53:21,119 --> 00:53:23,119
yeah i guess something awaits to jump in

1439
00:53:23,119 --> 00:53:25,359
on that specific one that's there's an

1440
00:53:25,359 --> 00:53:26,880
issue open for that that victor will be

1441
00:53:26,880 --> 00:53:28,400
discussing later

1442
00:53:28,400 --> 00:53:29,200
okay

1443
00:53:29,200 --> 00:53:30,319
yeah

1444
00:53:30,319 --> 00:53:32,240
martin

1445
00:53:32,240 --> 00:53:35,119
no not martin martin

1446
00:53:35,119 --> 00:53:36,880
i would like to point out that there is

1447
00:53:36,880 --> 00:53:39,200
a use case of web transport that doesn't

1448
00:53:39,200 --> 00:53:41,200
require

1449
00:53:41,200 --> 00:53:41,839
um datagrams

1450
00:53:41,839 --> 00:53:43,839
a somewhat primitive use case but you

1451
00:53:43,839 --> 00:53:46,160
can imagine just doing the stuff you did

1452
00:53:46,160 --> 00:53:49,359
on on websocket via web transport now

1453
00:53:49,359 --> 00:53:52,000
and benefit from streams and never sent

1454
00:53:52,000 --> 00:53:55,040
a single datagram so i don't see why

1455
00:53:55,040 --> 00:53:56,559
datagram support needs to be a

1456
00:53:56,559 --> 00:53:58,079
requirement

1457
00:53:58,079 --> 00:53:59,280
that that was going to be my next

1458
00:53:59,280 --> 00:54:01,359
question was is there anybody who's

1459
00:54:01,359 --> 00:54:02,960
planning on deploying this that doesn't

1460
00:54:02,960 --> 00:54:05,119
have datagrams and doesn't want them and

1461
00:54:05,119 --> 00:54:05,920
would

1462
00:54:05,920 --> 00:54:08,800
rather have code that handles datagram

1463
00:54:08,800 --> 00:54:11,760
capsules coming in on an h3 stream

1464
00:54:11,760 --> 00:54:13,200
because that's kind of your alternative

1465
00:54:13,200 --> 00:54:13,920
right

1466
00:54:13,920 --> 00:54:15,280
so you're still going to have to write

1467
00:54:15,280 --> 00:54:17,520
code that has the letters data and gram

1468
00:54:17,520 --> 00:54:19,200
in them it's just now you have to have

1469
00:54:19,200 --> 00:54:20,400
an if statement and deal with it in

1470
00:54:20,400 --> 00:54:23,040
multiple places

1471
00:54:23,200 --> 00:54:25,040
or do i not

1472
00:54:25,040 --> 00:54:26,960
like that

1473
00:54:26,960 --> 00:54:29,119
there's no requirement that i i ever

1474
00:54:29,119 --> 00:54:31,440
send or receive a data right i could

1475
00:54:31,440 --> 00:54:33,359
just say like this is

1476
00:54:33,359 --> 00:54:35,440
this feature is not available as we have

1477
00:54:35,440 --> 00:54:36,880
in http

1478
00:54:36,880 --> 00:54:39,520
completely fair

1479
00:54:39,520 --> 00:54:41,280
martin

1480
00:54:41,280 --> 00:54:43,280
i noticed the queue has just gotten long

1481
00:54:43,280 --> 00:54:46,160
um so i think what we're looking for

1482
00:54:46,160 --> 00:54:48,160
here is interoperability

1483
00:54:48,160 --> 00:54:51,440
and if we have people that want to use

1484
00:54:51,440 --> 00:54:53,520
the protocol without

1485
00:54:53,520 --> 00:54:55,440
with a sort of i'd like to pick and

1486
00:54:55,440 --> 00:54:57,760
choose the the pieces that i'd like

1487
00:54:57,760 --> 00:55:00,000
we end up in a situation where we don't

1488
00:55:00,000 --> 00:55:02,480
have interoperability in those cases

1489
00:55:02,480 --> 00:55:04,319
if you have a deployment that wants to

1490
00:55:04,319 --> 00:55:05,599
use something that looks a little bit

1491
00:55:05,599 --> 00:55:07,040
like web transport but doesn't have

1492
00:55:07,040 --> 00:55:08,640
datagrams in it

1493
00:55:08,640 --> 00:55:10,559
that is possible as a proprietary

1494
00:55:10,559 --> 00:55:12,799
protocol but building something that

1495
00:55:12,799 --> 00:55:14,720
doesn't have datagrams

1496
00:55:14,720 --> 00:55:15,599
in it

1497
00:55:15,599 --> 00:55:17,680
and specifically designing to allow for

1498
00:55:17,680 --> 00:55:19,760
that possibility does complicate

1499
00:55:19,760 --> 00:55:21,599
how we build this thing

1500
00:55:21,599 --> 00:55:23,760
and i think it's a complication that we

1501
00:55:23,760 --> 00:55:25,839
don't necessarily want here

1502
00:55:25,839 --> 00:55:28,160
implementing datagrams and or

1503
00:55:28,160 --> 00:55:29,359
implementing the possibility of

1504
00:55:29,359 --> 00:55:31,119
receiving datagrams from someone is

1505
00:55:31,119 --> 00:55:33,280
relatively simple to do

1506
00:55:33,280 --> 00:55:35,119
and um

1507
00:55:35,119 --> 00:55:37,200
even if you don't plan to use them and

1508
00:55:37,200 --> 00:55:38,720
and all you do is throw them away then

1509
00:55:38,720 --> 00:55:40,319
that's probably something that that you

1510
00:55:40,319 --> 00:55:41,760
could possibly do in that context and

1511
00:55:41,760 --> 00:55:43,760
then you would get interoperability

1512
00:55:43,760 --> 00:55:46,000
however building something that says

1513
00:55:46,000 --> 00:55:48,480
well datagrams are optional

1514
00:55:48,480 --> 00:55:50,079
makes it very much more difficult for

1515
00:55:50,079 --> 00:55:51,520
those of us who are building to this

1516
00:55:51,520 --> 00:55:52,799
sort of thing

1517
00:55:52,799 --> 00:55:55,599
and have to talk to arbitrary servers

1518
00:55:55,599 --> 00:55:56,799
and then we have to deal with the

1519
00:55:56,799 --> 00:55:58,319
possibility that maybe datagrams aren't

1520
00:55:58,319 --> 00:55:59,520
present we have to think about how to

1521
00:55:59,520 --> 00:56:01,520
move things on capsules and all sorts of

1522
00:56:01,520 --> 00:56:05,280
other things so i think that's

1523
00:56:05,280 --> 00:56:08,000
nice but i don't want to go there

1524
00:56:08,000 --> 00:56:09,520
i would tend to argue that you know

1525
00:56:09,520 --> 00:56:10,880
aborting when you see a datagram is

1526
00:56:10,880 --> 00:56:12,400
about as hard as dropping the datagram

1527
00:56:12,400 --> 00:56:14,160
and just pretending you never saw it

1528
00:56:14,160 --> 00:56:14,839
but

1529
00:56:14,839 --> 00:56:20,240
yeah uh david schnazzy uh no hats um

1530
00:56:20,240 --> 00:56:22,880
well mask enthusiast hat

1531
00:56:22,880 --> 00:56:25,839
uh so just uh to add in the http

1532
00:56:25,839 --> 00:56:27,599
datagrams document

1533
00:56:27,599 --> 00:56:29,119
we say that

1534
00:56:29,119 --> 00:56:32,000
like you you must support receiving

1535
00:56:32,000 --> 00:56:35,119
datagrams on inside capsules

1536
00:56:35,119 --> 00:56:37,839
uh so that's kind of a requirement here

1537
00:56:37,839 --> 00:56:40,319
uh i mean at the end of the day

1538
00:56:40,319 --> 00:56:42,079
if you already have a capsule parser

1539
00:56:42,079 --> 00:56:44,000
which you need because of the closed web

1540
00:56:44,000 --> 00:56:46,240
transport session capsule

1541
00:56:46,240 --> 00:56:48,799
like having that call the i received a

1542
00:56:48,799 --> 00:56:50,799
datagram frame function is pretty

1543
00:56:50,799 --> 00:56:52,720
trivial so i wouldn't worry about that

1544
00:56:52,720 --> 00:56:55,119
too much i think this boils down to

1545
00:56:55,119 --> 00:56:57,040
do we want to say

1546
00:56:57,040 --> 00:57:00,799
uh you must send them over datagrams

1547
00:57:00,799 --> 00:57:02,960
if they're available or

1548
00:57:02,960 --> 00:57:04,480
you must support

1549
00:57:04,480 --> 00:57:08,079
datagrams like at the end of the day

1550
00:57:08,079 --> 00:57:09,839
i cannot

1551
00:57:09,839 --> 00:57:13,040
imagine anyone like deploying web

1552
00:57:13,040 --> 00:57:16,000
transport like without datagrams like

1553
00:57:16,000 --> 00:57:18,400
all quick stacks that are in the space

1554
00:57:18,400 --> 00:57:20,960
like it is the easiest thing to add to a

1555
00:57:20,960 --> 00:57:22,880
quick stack by far

1556
00:57:22,880 --> 00:57:25,599
so i don't think we should like

1557
00:57:25,599 --> 00:57:27,520
spend too much time on this and now with

1558
00:57:27,520 --> 00:57:29,520
my cheer hat i'm gonna lock the queue on

1559
00:57:29,520 --> 00:57:32,400
this one after luke

1560
00:57:33,440 --> 00:57:35,599
hi it's luke uh so i've deployed a quick

1561
00:57:35,599 --> 00:57:38,400
stack without datagram support

1562
00:57:38,400 --> 00:57:39,280
um

1563
00:57:39,280 --> 00:57:41,440
you're right it's really easy uh and

1564
00:57:41,440 --> 00:57:43,839
it's it's kind of trivial to just throw

1565
00:57:43,839 --> 00:57:46,160
them away i think the only concern is

1566
00:57:46,160 --> 00:57:48,640
maybe capabilities on the w3c side i

1567
00:57:48,640 --> 00:57:49,920
think there was a slide there saying

1568
00:57:49,920 --> 00:57:52,480
datagrams are reliable or unreliable

1569
00:57:52,480 --> 00:57:54,160
and it's kind of hard to tell if a

1570
00:57:54,160 --> 00:57:56,720
server actually supports

1571
00:57:56,720 --> 00:57:58,880
these unreliable datagrams if it just

1572
00:57:58,880 --> 00:58:01,280
lies it just says i support them

1573
00:58:01,280 --> 00:58:03,920
i need to say this to get web transport

1574
00:58:03,920 --> 00:58:05,440
but then you actually try to send them

1575
00:58:05,440 --> 00:58:07,839
and it doesn't work um so there might

1576
00:58:07,839 --> 00:58:09,359
still be a use case there to say that

1577
00:58:09,359 --> 00:58:10,240
the

1578
00:58:10,240 --> 00:58:11,280
um

1579
00:58:11,280 --> 00:58:11,920
i

1580
00:58:11,920 --> 00:58:13,280
yeah i don't know i can't really think

1581
00:58:13,280 --> 00:58:15,359
of any reason why you can't just lie

1582
00:58:15,359 --> 00:58:17,599
about it but uh

1583
00:58:17,599 --> 00:58:19,839
i definitely would like to avoid having

1584
00:58:19,839 --> 00:58:22,000
to implement anything complicated with

1585
00:58:22,000 --> 00:58:23,760
datagrams

1586
00:58:23,760 --> 00:58:26,240
there's just no reason to use them in

1587
00:58:26,240 --> 00:58:29,280
most use cases i think

1588
00:58:29,280 --> 00:58:31,359
so to summarize our options which i

1589
00:58:31,359 --> 00:58:33,520
think david said very nicely we kind of

1590
00:58:33,520 --> 00:58:37,040
have the the choice of saying either

1591
00:58:37,040 --> 00:58:38,000
you can

1592
00:58:38,000 --> 00:58:40,400
optionally have datagrams and everybody

1593
00:58:40,400 --> 00:58:42,480
has to be able to cope with them showing

1594
00:58:42,480 --> 00:58:44,160
up in multiple ways in multiple places

1595
00:58:44,160 --> 00:58:46,319
in different forms or we say you don't

1596
00:58:46,319 --> 00:58:47,440
get web transport if you don't have

1597
00:58:47,440 --> 00:58:50,400
datagrams and it's easier to implement

1598
00:58:50,400 --> 00:58:52,319
datagrams and throw them on the floor

1599
00:58:52,319 --> 00:58:53,760
than it is to

1600
00:58:53,760 --> 00:58:55,440
uh consider both and i think that second

1601
00:58:55,440 --> 00:58:56,720
one is the thing that we're proposing

1602
00:58:56,720 --> 00:58:58,319
right now but that would be a great

1603
00:58:58,319 --> 00:58:59,920
thing to chime in with

1604
00:58:59,920 --> 00:59:01,680
uh on the actual pull request for the

1605
00:59:01,680 --> 00:59:02,799
stuff

1606
00:59:02,799 --> 00:59:04,240
or we can also make an issue if we want

1607
00:59:04,240 --> 00:59:07,760
to have a continued back and forth

1608
00:59:07,760 --> 00:59:09,839
but like if you have a a implementation

1609
00:59:09,839 --> 00:59:12,240
where it really would be a burden um it

1610
00:59:12,240 --> 00:59:13,520
would be good to

1611
00:59:13,520 --> 00:59:14,960
talk that through

1612
00:59:14,960 --> 00:59:16,799
all right capsule protocol stuff is nice

1613
00:59:16,799 --> 00:59:18,160
and easy that's why i said this was a

1614
00:59:18,160 --> 00:59:19,440
nice easy

1615
00:59:19,440 --> 00:59:22,960
low drama slide next one please

1616
00:59:23,680 --> 00:59:25,520
let's talk about flow control

1617
00:59:25,520 --> 00:59:28,480
this is not low drama

1618
00:59:29,040 --> 00:59:32,720
the first one is uh fairly easy uh so

1619
00:59:32,720 --> 00:59:34,400
we've talked about having a setting to

1620
00:59:34,400 --> 00:59:35,839
limit the number of sessions that you

1621
00:59:35,839 --> 00:59:39,279
can have and if we go to the next slide

1622
00:59:39,599 --> 00:59:41,599
this ends up being fairly ergonomic it's

1623
00:59:41,599 --> 00:59:43,520
pretty straightforward we say instead of

1624
00:59:43,520 --> 00:59:45,280
sending a flag that says settings enable

1625
00:59:45,280 --> 00:59:46,480
web transport

1626
00:59:46,480 --> 00:59:47,839
you just send

1627
00:59:47,839 --> 00:59:49,359
settings

1628
00:59:49,359 --> 00:59:51,839
web transport max sessions and if you

1629
00:59:51,839 --> 00:59:53,119
set it to xero

1630
00:59:53,119 --> 00:59:55,200
no web transport for you today

1631
00:59:55,200 --> 00:59:56,880
but if you set it to one you have web

1632
00:59:56,880 --> 00:59:58,559
transport you have no pooling you get

1633
00:59:58,559 --> 01:00:00,400
one session

1634
01:00:00,400 --> 01:00:02,240
and if you set it to more than one now

1635
01:00:02,240 --> 01:00:05,839
you have however many you asked for

1636
01:00:05,839 --> 01:00:08,880
so completely reasonable

1637
01:00:09,599 --> 01:00:12,720
sweet next slide please

1638
01:00:13,520 --> 01:00:15,760
so we've talked about that part the next

1639
01:00:15,760 --> 01:00:18,160
piece of flow control that adds some

1640
01:00:18,160 --> 01:00:20,480
complexity is limiting the number of

1641
01:00:20,480 --> 01:00:22,799
streams within a session with max

1642
01:00:22,799 --> 01:00:23,839
streams

1643
01:00:23,839 --> 01:00:26,480
so kind of the problem here is

1644
01:00:26,480 --> 01:00:28,960
especially in h3 where

1645
01:00:28,960 --> 01:00:31,920
you have stream limits for flow control

1646
01:00:31,920 --> 01:00:33,520
but if you have multiple web transport

1647
01:00:33,520 --> 01:00:35,280
sessions and each of those are you using

1648
01:00:35,280 --> 01:00:37,760
native h3 streams it would be very very

1649
01:00:37,760 --> 01:00:40,079
easy for my first session to use the

1650
01:00:40,079 --> 01:00:42,319
entire budget and my next session says

1651
01:00:42,319 --> 01:00:43,680
i'd like to open a new web transport

1652
01:00:43,680 --> 01:00:46,880
stream and the answer is haha nice try

1653
01:00:46,880 --> 01:00:49,839
so this is a way for within a web

1654
01:00:49,839 --> 01:00:51,280
transport session

1655
01:00:51,280 --> 01:00:52,880
that in a

1656
01:00:52,880 --> 01:00:54,799
context that understands that as opposed

1657
01:00:54,799 --> 01:00:56,559
to h3 which just sees

1658
01:00:56,559 --> 01:00:59,119
lots and lots of very equal streams um

1659
01:00:59,119 --> 01:01:00,559
you can just say

1660
01:01:00,559 --> 01:01:02,400
mac streams and use that same capsule

1661
01:01:02,400 --> 01:01:04,960
the same way we do in h2 and it's all

1662
01:01:04,960 --> 01:01:06,960
fairly straightforward and you just say

1663
01:01:06,960 --> 01:01:08,880
yep this web transport session gets 10

1664
01:01:08,880 --> 01:01:10,960
streams and this one gets 100 and now

1665
01:01:10,960 --> 01:01:13,040
i'm happy and i can limit things

1666
01:01:13,040 --> 01:01:14,960
and i see motions as if we're going

1667
01:01:14,960 --> 01:01:17,599
towards a queue

1668
01:01:19,760 --> 01:01:23,480
all right just go ahead

1669
01:01:24,319 --> 01:01:26,880
so in h2 you have an ordering guarantee

1670
01:01:26,880 --> 01:01:28,640
between streams

1671
01:01:28,640 --> 01:01:30,640
in h2 you have an ordering guarantee

1672
01:01:30,640 --> 01:01:34,319
between streams in h3 you don't

1673
01:01:34,319 --> 01:01:36,400
how do we deal with that

1674
01:01:36,400 --> 01:01:37,280
yes

1675
01:01:37,280 --> 01:01:39,520
so there's a fun caveat

1676
01:01:39,520 --> 01:01:42,400
which is that if essentially uh i think

1677
01:01:42,400 --> 01:01:44,799
to paraphrase in h3 because things can

1678
01:01:44,799 --> 01:01:46,640
come in out of order if you've

1679
01:01:46,640 --> 01:01:49,839
potentially uh closed a stream

1680
01:01:49,839 --> 01:01:52,160
before the stream is considered to be

1681
01:01:52,160 --> 01:01:53,200
opened

1682
01:01:53,200 --> 01:01:54,319
you

1683
01:01:54,319 --> 01:01:56,480
lose that you essentially leak that

1684
01:01:56,480 --> 01:01:57,359
credit

1685
01:01:57,359 --> 01:01:59,920
um and our answer is essentially don't

1686
01:01:59,920 --> 01:02:01,599
do that and we don't think it actually

1687
01:02:01,599 --> 01:02:03,760
is going to kill anything

1688
01:02:03,760 --> 01:02:05,280
there's more on a slide in that in a

1689
01:02:05,280 --> 01:02:08,319
second can we go to the next slide

1690
01:02:09,520 --> 01:02:11,119
look at that oh we got some formatting

1691
01:02:11,119 --> 01:02:12,079
fun here

1692
01:02:12,079 --> 01:02:14,000
so yes so street streams that are closed

1693
01:02:14,000 --> 01:02:16,079
before they're opened are an issue you

1694
01:02:16,079 --> 01:02:19,119
essentially lose one from that session

1695
01:02:19,119 --> 01:02:22,079
each time that happens

1696
01:02:23,520 --> 01:02:25,039
the and the reason for that is because

1697
01:02:25,039 --> 01:02:26,480
you can't necessarily tell that that was

1698
01:02:26,480 --> 01:02:27,920
associated with that session because the

1699
01:02:27,920 --> 01:02:29,599
stream is gone and you're not gonna

1700
01:02:29,599 --> 01:02:30,960
when the the

1701
01:02:30,960 --> 01:02:34,000
frames arrive um you're having a bad day

1702
01:02:34,000 --> 01:02:36,480
and so i think we we discussed

1703
01:02:36,480 --> 01:02:39,039
wordsmithing some text around how

1704
01:02:39,039 --> 01:02:41,839
uh the capsule kind of has to be paired

1705
01:02:41,839 --> 01:02:44,160
um to try to make that less possible but

1706
01:02:44,160 --> 01:02:45,359
i don't know that we ever got it to a

1707
01:02:45,359 --> 01:02:49,480
zero percent chance possibility

1708
01:02:51,200 --> 01:02:52,960
um i have a silly question how does the

1709
01:02:52,960 --> 01:02:54,799
session level max streams interact with

1710
01:02:54,799 --> 01:02:57,280
the connection level max streams

1711
01:02:57,280 --> 01:02:59,440
connection on the h3 connection yes

1712
01:02:59,440 --> 01:03:00,880
because i'm wondering like do you have

1713
01:03:00,880 --> 01:03:02,559
to have a guarantee that like all of the

1714
01:03:02,559 --> 01:03:03,599
sessions

1715
01:03:03,599 --> 01:03:05,599
uh some max streams must be less than or

1716
01:03:05,599 --> 01:03:06,960
equal to the connection level one or is

1717
01:03:06,960 --> 01:03:08,480
it possible in a valid deployment to

1718
01:03:08,480 --> 01:03:11,280
have the sum exceed and like yeah have a

1719
01:03:11,280 --> 01:03:12,880
higher limit and like does that mean

1720
01:03:12,880 --> 01:03:15,200
that a particular session does not

1721
01:03:15,200 --> 01:03:16,799
have the guarantee that it can get all

1722
01:03:16,799 --> 01:03:19,839
of its allowable maximum streams the the

1723
01:03:19,839 --> 01:03:22,079
the latter so it's it's very similar to

1724
01:03:22,079 --> 01:03:24,079
what happens for for you know connection

1725
01:03:24,079 --> 01:03:25,599
level data limit versus stream level

1726
01:03:25,599 --> 01:03:28,079
data limit is if you wanted to say hey

1727
01:03:28,079 --> 01:03:31,440
um you know i'm willing to use

1728
01:03:31,440 --> 01:03:34,559
i'm willing to give anybody 10 streams

1729
01:03:34,559 --> 01:03:37,119
i could say um you know i'm only

1730
01:03:37,119 --> 01:03:38,880
allowing the whole connection to have 10

1731
01:03:38,880 --> 01:03:40,880
more streams but any of you could take

1732
01:03:40,880 --> 01:03:42,480
those 10 or i could say no no you know

1733
01:03:42,480 --> 01:03:46,240
the first some of you only get five

1734
01:03:46,240 --> 01:03:48,160
right

1735
01:03:48,160 --> 01:03:50,480
two things so i don't understand the

1736
01:03:50,480 --> 01:03:52,480
streams that are closed before being

1737
01:03:52,480 --> 01:03:56,400
opened because the stream internally has

1738
01:03:56,400 --> 01:03:59,599
ordering control has byte ordering

1739
01:03:59,599 --> 01:04:03,119
so if if the con if the fin bit arrives

1740
01:04:03,119 --> 01:04:04,559
before

1741
01:04:04,559 --> 01:04:06,319
the actual stream data

1742
01:04:06,319 --> 01:04:08,799
the quick stack will deal with that

1743
01:04:08,799 --> 01:04:11,119
the the problem i see is that there's a

1744
01:04:11,119 --> 01:04:12,720
race condition here

1745
01:04:12,720 --> 01:04:16,000
like let's say i you give me 10 streams

1746
01:04:16,000 --> 01:04:18,960
i close i have this 10 streams open i

1747
01:04:18,960 --> 01:04:20,880
close five of them and open five new

1748
01:04:20,880 --> 01:04:23,760
streams and now the fin bits for the

1749
01:04:23,760 --> 01:04:26,000
closed streams get reordered then you

1750
01:04:26,000 --> 01:04:28,000
will think that i open 15 streams and

1751
01:04:28,000 --> 01:04:29,839
you will give me a protocol violation i

1752
01:04:29,839 --> 01:04:31,039
would assume

1753
01:04:31,039 --> 01:04:33,520
got it the uh closing before being

1754
01:04:33,520 --> 01:04:34,880
opened is essentially like so if a

1755
01:04:34,880 --> 01:04:37,039
stream gets reset uh

1756
01:04:37,039 --> 01:04:38,839
before you knew it

1757
01:04:38,839 --> 01:04:41,039
existed so if i say hey i'm resetting

1758
01:04:41,039 --> 01:04:42,400
the stream and you go excuse me what

1759
01:04:42,400 --> 01:04:44,000
stream um

1760
01:04:44,000 --> 01:04:46,000
very often in at least several

1761
01:04:46,000 --> 01:04:48,079
implementations you basically say okay

1762
01:04:48,079 --> 01:04:49,520
cool this stream is dead and when things

1763
01:04:49,520 --> 01:04:52,079
then show up for it later you basically

1764
01:04:52,079 --> 01:04:54,799
just completely discard

1765
01:04:54,799 --> 01:04:57,760
everything to do with it which

1766
01:04:57,760 --> 01:04:59,440
without careful wording it means that

1767
01:04:59,440 --> 01:05:01,039
you're also discarding

1768
01:05:01,039 --> 01:05:02,799
the information that told you which web

1769
01:05:02,799 --> 01:05:04,319
transport session you should have built

1770
01:05:04,319 --> 01:05:07,640
for that stream

1771
01:05:10,480 --> 01:05:13,119
allen from dell meta um so yeah i think

1772
01:05:13,119 --> 01:05:14,480
what martin said about

1773
01:05:14,480 --> 01:05:15,599
uh

1774
01:05:15,599 --> 01:05:17,359
the streams that are closed gracefully

1775
01:05:17,359 --> 01:05:19,920
with a fin bit don't have this problem

1776
01:05:19,920 --> 01:05:24,400
but the ones that reset yeah could and

1777
01:05:24,400 --> 01:05:26,000
uh i think there may be a separate issue

1778
01:05:26,000 --> 01:05:27,440
that we'll talk about in the h3 section

1779
01:05:27,440 --> 01:05:29,359
but i think the

1780
01:05:29,359 --> 01:05:31,440
leaking it is bad and that

1781
01:05:31,440 --> 01:05:32,960
we probably need

1782
01:05:32,960 --> 01:05:35,760
a reset capsule which would be reliable

1783
01:05:35,760 --> 01:05:37,119
to make sure that

1784
01:05:37,119 --> 01:05:39,280
that doesn't happen so you would in h3

1785
01:05:39,280 --> 01:05:40,400
you would have you would reset the

1786
01:05:40,400 --> 01:05:41,359
stream

1787
01:05:41,359 --> 01:05:42,720
and also

1788
01:05:42,720 --> 01:05:43,599
um

1789
01:05:43,599 --> 01:05:45,520
send the application level message

1790
01:05:45,520 --> 01:05:46,960
uh which

1791
01:05:46,960 --> 01:05:48,799
is sort of like the way things work in

1792
01:05:48,799 --> 01:05:50,559
qpack and that would go on the control

1793
01:05:50,559 --> 01:05:51,760
stream that would go on that would go on

1794
01:05:51,760 --> 01:05:54,160
the yeah the h3 stream dude basically

1795
01:05:54,160 --> 01:05:56,960
hey hey you needed to bill me for this

1796
01:05:56,960 --> 01:06:00,160
is essentially what you'd be saying

1797
01:06:01,200 --> 01:06:05,480
speak in the mic please

1798
01:06:07,119 --> 01:06:09,119
so i'm not even sure that we need this

1799
01:06:09,119 --> 01:06:12,559
capability honestly um there is always

1800
01:06:12,559 --> 01:06:14,720
the possibility that you can have

1801
01:06:14,720 --> 01:06:16,160
the

1802
01:06:16,160 --> 01:06:18,799
the bad session completely overwhelmed

1803
01:06:18,799 --> 01:06:21,359
the capacity of the connection

1804
01:06:21,359 --> 01:06:23,359
um for instance if i

1805
01:06:23,359 --> 01:06:26,400
as a as a bad website um

1806
01:06:26,400 --> 01:06:27,920
or just one that didn't know what they

1807
01:06:27,920 --> 01:06:29,039
were doing

1808
01:06:29,039 --> 01:06:30,160
um

1809
01:06:30,160 --> 01:06:31,839
were to create multiple web transport

1810
01:06:31,839 --> 01:06:33,200
sessions and use lots and lots of

1811
01:06:33,200 --> 01:06:34,559
streams on them it's possible that you

1812
01:06:34,559 --> 01:06:36,079
could exceed

1813
01:06:36,079 --> 01:06:38,319
the available streams that are there for

1814
01:06:38,319 --> 01:06:40,079
that connection maybe you forgot to

1815
01:06:40,079 --> 01:06:41,599
close them

1816
01:06:41,599 --> 01:06:43,760
right um and it could be very simple

1817
01:06:43,760 --> 01:06:47,359
like that um but that's the sort of

1818
01:06:47,359 --> 01:06:49,200
thing that we'll have to deal with

1819
01:06:49,200 --> 01:06:50,400
anyway

1820
01:06:50,400 --> 01:06:52,480
because the number of streams within a

1821
01:06:52,480 --> 01:06:54,480
session times the number of sessions

1822
01:06:54,480 --> 01:06:57,039
could well exceed the number of streams

1823
01:06:57,039 --> 01:06:58,960
the entire connection

1824
01:06:58,960 --> 01:07:01,680
could could have anyway at which point

1825
01:07:01,680 --> 01:07:03,440
you have a connection that is entirely

1826
01:07:03,440 --> 01:07:05,440
consumed by all of the web transport

1827
01:07:05,440 --> 01:07:08,400
stuff and you have no means of doing

1828
01:07:08,400 --> 01:07:09,760
other things on that connection like

1829
01:07:09,760 --> 01:07:11,440
making a simple http request for

1830
01:07:11,440 --> 01:07:12,319
instance

1831
01:07:12,319 --> 01:07:14,720
or making a new session or what have you

1832
01:07:14,720 --> 01:07:16,960
so i think that possibility exists

1833
01:07:16,960 --> 01:07:19,920
anyway and

1834
01:07:20,240 --> 01:07:23,039
maybe just throwing this in the well we

1835
01:07:23,039 --> 01:07:26,079
can do this later bucket is entirely

1836
01:07:26,079 --> 01:07:28,480
plausible here i'm not sure

1837
01:07:28,480 --> 01:07:30,400
well and there is a line to be drawn

1838
01:07:30,400 --> 01:07:33,039
there so uh sneak peek the next slide is

1839
01:07:33,039 --> 01:07:34,720
going to be taking all of the data

1840
01:07:34,720 --> 01:07:36,400
limits and throwing them in the we'll

1841
01:07:36,400 --> 01:07:37,760
deal with this later if we decide we

1842
01:07:37,760 --> 01:07:38,960
actually need it it's a real problem

1843
01:07:38,960 --> 01:07:40,880
bucket so we could choose to do that for

1844
01:07:40,880 --> 01:07:42,960
this the thing you say about you know

1845
01:07:42,960 --> 01:07:44,880
hey i want to send non-web transport

1846
01:07:44,880 --> 01:07:47,680
requests on this h3 connection

1847
01:07:47,680 --> 01:07:49,440
if you don't have some way to limit this

1848
01:07:49,440 --> 01:07:50,240
here

1849
01:07:50,240 --> 01:07:51,760
you essentially cannot guarantee that

1850
01:07:51,760 --> 01:07:53,359
that will ever be possible right because

1851
01:07:53,359 --> 01:07:55,760
the web transport session can just

1852
01:07:55,760 --> 01:07:58,559
whether you have one session or 10

1853
01:07:58,559 --> 01:08:00,480
can walk right up to the limit of how

1854
01:08:00,480 --> 01:08:01,760
many streams you can have on your h3

1855
01:08:01,760 --> 01:08:04,160
connection and you're done

1856
01:08:04,160 --> 01:08:06,960
so it it's always going to be the case

1857
01:08:06,960 --> 01:08:09,920
that you can exceed it unless you have

1858
01:08:09,920 --> 01:08:12,480
reserved a few streams for the purposes

1859
01:08:12,480 --> 01:08:14,400
of making other requests

1860
01:08:14,400 --> 01:08:16,158
which a browser is

1861
01:08:16,158 --> 01:08:17,198
quite

1862
01:08:17,198 --> 01:08:19,120
capable of doing if that's what we want

1863
01:08:19,120 --> 01:08:21,359
to do

1864
01:08:21,359 --> 01:08:22,560
but that's a lot of that's going to

1865
01:08:22,560 --> 01:08:24,080
depend on what the server is willing to

1866
01:08:24,080 --> 01:08:26,399
allow for so if the server only gives us

1867
01:08:26,399 --> 01:08:29,439
a budget of three streams

1868
01:08:29,439 --> 01:08:31,600
then we don't have a lot of options

1869
01:08:31,600 --> 01:08:33,198
available to us

1870
01:08:33,198 --> 01:08:35,600
so um some of this is going to come down

1871
01:08:35,600 --> 01:08:37,359
to just having

1872
01:08:37,359 --> 01:08:39,920
sensible practices on on servers and

1873
01:08:39,920 --> 01:08:41,520
conveniently the people who are writing

1874
01:08:41,520 --> 01:08:42,640
the code

1875
01:08:42,640 --> 01:08:43,839
to

1876
01:08:43,839 --> 01:08:46,080
consume the streams

1877
01:08:46,080 --> 01:08:48,399
also have some degree of control over

1878
01:08:48,399 --> 01:08:49,679
how the server is going to be operating

1879
01:08:49,679 --> 01:08:51,679
here so i don't think this is going to

1880
01:08:51,679 --> 01:08:53,359
be as much of a problem

1881
01:08:53,359 --> 01:08:55,198
as we're making out we're not in so much

1882
01:08:55,198 --> 01:08:57,120
of an adversarial situation as much as

1883
01:08:57,120 --> 01:09:00,000
we are in a situation of what do we do

1884
01:09:00,000 --> 01:09:01,759
on the browser side to manage the

1885
01:09:01,759 --> 01:09:04,319
resources so that it is easier for those

1886
01:09:04,319 --> 01:09:06,399
people writing the server applications

1887
01:09:06,399 --> 01:09:07,279
to

1888
01:09:07,279 --> 01:09:09,198
to

1889
01:09:09,198 --> 01:09:10,399
avoid

1890
01:09:10,399 --> 01:09:11,839
harming themselves

1891
01:09:11,839 --> 01:09:12,960
essentially

1892
01:09:12,960 --> 01:09:14,960
so it may just be that

1893
01:09:14,960 --> 01:09:16,399
doing nothing

1894
01:09:16,399 --> 01:09:17,600
and

1895
01:09:17,600 --> 01:09:21,120
is still a viable option here

1896
01:09:21,120 --> 01:09:22,080
all right

1897
01:09:22,080 --> 01:09:24,000
victor and then let's go on to our next

1898
01:09:24,000 --> 01:09:25,600
slide where we propose doing exactly

1899
01:09:25,600 --> 01:09:27,839
that yeah one observation i wanted to

1900
01:09:27,839 --> 01:09:30,479
make is partially that

1901
01:09:30,479 --> 01:09:32,399
because this is

1902
01:09:32,399 --> 01:09:34,640
some of this is limiting so the

1903
01:09:34,640 --> 01:09:36,479
situation is like when the client opens

1904
01:09:36,479 --> 01:09:38,640
too many streams so the

1905
01:09:38,640 --> 01:09:41,359
browser can send a http request

1906
01:09:41,359 --> 01:09:43,520
well browser can

1907
01:09:43,520 --> 01:09:47,198
control the number of open streams

1908
01:09:47,198 --> 01:09:49,839
on top of what's imposed by http

1909
01:09:49,839 --> 01:09:52,080
connections it is to say the browser

1910
01:09:52,080 --> 01:09:54,400
might decide that you only get

1911
01:09:54,400 --> 01:09:56,960
32 streams from this connection and

1912
01:09:56,960 --> 01:09:58,560
there is no need to support this in

1913
01:09:58,560 --> 01:10:00,480
protocol because it's all local to the

1914
01:10:00,480 --> 01:10:02,080
browser

1915
01:10:02,080 --> 01:10:03,840
the reason you would need to support

1916
01:10:03,840 --> 01:10:05,280
that in the protocol is if you needed to

1917
01:10:05,280 --> 01:10:06,880
have them explicitly communicate about

1918
01:10:06,880 --> 01:10:10,080
it and especially if you wanted to let

1919
01:10:10,080 --> 01:10:10,960
the

1920
01:10:10,960 --> 01:10:13,040
uh application

1921
01:10:13,040 --> 01:10:15,360
have input onto into whether or not

1922
01:10:15,360 --> 01:10:16,880
that's happening

1923
01:10:16,880 --> 01:10:19,840
uh i'm pointing out that

1924
01:10:19,840 --> 01:10:21,920
samosa's resource

1925
01:10:21,920 --> 01:10:23,520
problems are

1926
01:10:23,520 --> 01:10:26,960
not necessarily the server imposing

1927
01:10:26,960 --> 01:10:29,600
resources and limits on client but

1928
01:10:29,600 --> 01:10:33,040
are purely client concerned and could be

1929
01:10:33,040 --> 01:10:35,920
dealt locally

1930
01:10:39,760 --> 01:10:42,080
alan frindell i think

1931
01:10:42,080 --> 01:10:44,719
the concern that i have with letting the

1932
01:10:44,719 --> 01:10:46,960
browsers just decide like we're going to

1933
01:10:46,960 --> 01:10:48,480
reserve some streams and it doesn't need

1934
01:10:48,480 --> 01:10:50,480
to be communicated is that

1935
01:10:50,480 --> 01:10:52,159
then servers have to deal with browsers

1936
01:10:52,159 --> 01:10:53,440
that have different

1937
01:10:53,440 --> 01:10:55,600
limits or maybe you decide that you're

1938
01:10:55,600 --> 01:10:56,960
not going to have the limits or some

1939
01:10:56,960 --> 01:10:59,199
browsers do or don't so that it's sort

1940
01:10:59,199 --> 01:11:00,560
of inconvenient just better to be able

1941
01:11:00,560 --> 01:11:02,080
to like have some guarantees but i think

1942
01:11:02,080 --> 01:11:03,280
also to victor's point i seem to

1943
01:11:03,280 --> 01:11:04,719
remember

1944
01:11:04,719 --> 01:11:05,920
maybe something like this along with

1945
01:11:05,920 --> 01:11:08,320
websockets where chrome has some limit

1946
01:11:08,320 --> 01:11:10,480
for like how many websocket streams you

1947
01:11:10,480 --> 01:11:13,040
can have in an h2 session which is kind

1948
01:11:13,040 --> 01:11:14,000
of similar

1949
01:11:14,000 --> 01:11:15,760
so i don't know it would having some

1950
01:11:15,760 --> 01:11:17,920
explicit way to communicate with what

1951
01:11:17,920 --> 01:11:19,760
the limits are i think would be good

1952
01:11:19,760 --> 01:11:21,120
right

1953
01:11:21,120 --> 01:11:23,040
if if i if i'm offering a server and

1954
01:11:23,040 --> 01:11:24,159
there's three different browsers and

1955
01:11:24,159 --> 01:11:25,600
they preserve a different number of

1956
01:11:25,600 --> 01:11:26,480
streams

1957
01:11:26,480 --> 01:11:28,480
for extra requests and my application

1958
01:11:28,480 --> 01:11:29,679
needed

1959
01:11:29,679 --> 01:11:31,280
six and half of them reserved five and

1960
01:11:31,280 --> 01:11:33,199
half of them reserved ten i'm now

1961
01:11:33,199 --> 01:11:35,120
awkwardly screwed

1962
01:11:35,120 --> 01:11:36,560
martin

1963
01:11:36,560 --> 01:11:38,960
going back in time five years

1964
01:11:38,960 --> 01:11:41,440
google quick had

1965
01:11:41,440 --> 01:11:43,760
a configuration option for maximum

1966
01:11:43,760 --> 01:11:45,600
concurrent streams

1967
01:11:45,600 --> 01:11:47,440
it seems like

1968
01:11:47,440 --> 01:11:50,000
we have the exact same situation here

1969
01:11:50,000 --> 01:11:52,080
and quick resolve this by having stream

1970
01:11:52,080 --> 01:11:55,760
ids and allowing a maximum stream id

1971
01:11:55,760 --> 01:11:59,280
instead of a number of streams

1972
01:12:01,600 --> 01:12:02,719
i like that

1973
01:12:02,719 --> 01:12:06,280
next slide please

1974
01:12:10,480 --> 01:12:12,400
all right this is the part where we uh

1975
01:12:12,400 --> 01:12:15,679
declare bankruptcy for bytes

1976
01:12:15,679 --> 01:12:17,120
and we say

1977
01:12:17,120 --> 01:12:19,040
if the conversation we just had seems

1978
01:12:19,040 --> 01:12:20,080
kind of twisted and a little bit

1979
01:12:20,080 --> 01:12:21,280
complicated

1980
01:12:21,280 --> 01:12:23,679
when you start having the same

1981
01:12:23,679 --> 01:12:26,960
type of conversation but for byte limits

1982
01:12:26,960 --> 01:12:28,800
it gets way worse

1983
01:12:28,800 --> 01:12:30,640
so we're going to say that at least for

1984
01:12:30,640 --> 01:12:32,880
those bytes you have the ability for any

1985
01:12:32,880 --> 01:12:34,239
h3 stream

1986
01:12:34,239 --> 01:12:35,679
and obviously a lot of this also applies

1987
01:12:35,679 --> 01:12:36,880
to h2 but

1988
01:12:36,880 --> 01:12:38,960
specifically for h3 for any h3 stream

1989
01:12:38,960 --> 01:12:40,640
you already have flow control you

1990
01:12:40,640 --> 01:12:42,719
already can use it you already screw it

1991
01:12:42,719 --> 01:12:44,640
up sometimes

1992
01:12:44,640 --> 01:12:46,800
let's not make it any more complicated

1993
01:12:46,800 --> 01:12:47,760
um

1994
01:12:47,760 --> 01:12:49,199
you can reserve

1995
01:12:49,199 --> 01:12:50,640
practically pretty much what you would

1996
01:12:50,640 --> 01:12:52,880
actually need and so if we discover a

1997
01:12:52,880 --> 01:12:55,199
need for some additional signaling

1998
01:12:55,199 --> 01:12:58,000
beyond what you can already do in h3

1999
01:12:58,000 --> 01:13:00,000
um across you know connection and then

2000
01:13:00,000 --> 01:13:01,840
stream limits um

2001
01:13:01,840 --> 01:13:04,480
and to the point of you know can the sum

2002
01:13:04,480 --> 01:13:05,840
of the stream limits be larger than the

2003
01:13:05,840 --> 01:13:07,760
connection like absolutely yes and that

2004
01:13:07,760 --> 01:13:09,440
can lead to all sorts of interesting

2005
01:13:09,440 --> 01:13:11,679
strategies um we're not going to add any

2006
01:13:11,679 --> 01:13:13,360
additional complexity there if we end up

2007
01:13:13,360 --> 01:13:15,120
needing some kind of thing that we'd

2008
01:13:15,120 --> 01:13:16,880
actually want to signal about that we

2009
01:13:16,880 --> 01:13:18,640
can certainly add it later um it's not

2010
01:13:18,640 --> 01:13:20,480
super hard to add capsules and

2011
01:13:20,480 --> 01:13:22,880
extend things by making that work uh but

2012
01:13:22,880 --> 01:13:25,360
we're gonna propose not doing that so

2013
01:13:25,360 --> 01:13:26,239
the

2014
01:13:26,239 --> 01:13:28,800
number of streams we said was this is a

2015
01:13:28,800 --> 01:13:30,840
thing that you cannot necessarily do

2016
01:13:30,840 --> 01:13:33,520
otherwise um and it'd be interesting if

2017
01:13:33,520 --> 01:13:34,800
we can

2018
01:13:34,800 --> 01:13:36,880
chime in with some some

2019
01:13:36,880 --> 01:13:38,719
clear text on how we would explain that

2020
01:13:38,719 --> 01:13:40,000
browsers should

2021
01:13:40,000 --> 01:13:43,360
you know do a sensible default there or

2022
01:13:43,360 --> 01:13:46,880
do concurrent stream count or

2023
01:13:46,880 --> 01:13:48,320
pick some other strategy that would be

2024
01:13:48,320 --> 01:13:49,440
excellent

2025
01:13:49,440 --> 01:13:50,719
but

2026
01:13:50,719 --> 01:13:52,880
we said it was worth biting off a little

2027
01:13:52,880 --> 01:13:54,159
bit of this complexity for streams

2028
01:13:54,159 --> 01:13:55,360
because that's something that you don't

2029
01:13:55,360 --> 01:13:56,880
necessarily have good control over

2030
01:13:56,880 --> 01:13:59,600
otherwise but for bytes you have lots of

2031
01:13:59,600 --> 01:14:00,480
knobs

2032
01:14:00,480 --> 01:14:02,239
we have yet to prove that we can use

2033
01:14:02,239 --> 01:14:04,080
those knobs successfully in every case

2034
01:14:04,080 --> 01:14:05,679
so let's do that first and then we'll

2035
01:14:05,679 --> 01:14:08,560
add more knobs later

2036
01:14:10,239 --> 01:14:11,600
excellent

2037
01:14:11,600 --> 01:14:15,040
next slide please

2038
01:14:15,040 --> 01:14:16,480
intermediaries make the entire

2039
01:14:16,480 --> 01:14:17,920
conversation we just had a lot more

2040
01:14:17,920 --> 01:14:20,320
complicated that is also potentially a

2041
01:14:20,320 --> 01:14:22,159
reason to have

2042
01:14:22,159 --> 01:14:23,040
um

2043
01:14:23,040 --> 01:14:24,560
a little bit more explicit signaling if

2044
01:14:24,560 --> 01:14:26,880
we need to distribute some of that

2045
01:14:26,880 --> 01:14:28,960
so this is a place where we have a split

2046
01:14:28,960 --> 01:14:31,120
between a way to conceptualize what's

2047
01:14:31,120 --> 01:14:33,040
going on and the thing you actually need

2048
01:14:33,040 --> 01:14:34,640
to do when you write your code

2049
01:14:34,640 --> 01:14:36,800
so conceptually

2050
01:14:36,800 --> 01:14:40,640
the proposal here is that and

2051
01:14:40,640 --> 01:14:42,320
it's less of a proposal and more of a

2052
01:14:42,320 --> 01:14:44,560
reality uh flow control is terminated at

2053
01:14:44,560 --> 01:14:46,159
an intermediary

2054
01:14:46,159 --> 01:14:49,040
so when i have my h3 connection that is

2055
01:14:49,040 --> 01:14:50,560
terminated by somebody who's then going

2056
01:14:50,560 --> 01:14:54,480
to talk upstream of that via h3 or h2 um

2057
01:14:54,480 --> 01:14:55,840
a lot of those flow control limits are

2058
01:14:55,840 --> 01:14:56,960
actually terminated especially if

2059
01:14:56,960 --> 01:14:59,360
they're translating between h3 and h2

2060
01:14:59,360 --> 01:15:00,880
but even if they're just sending h3 to

2061
01:15:00,880 --> 01:15:02,880
h3 or h2 to h2

2062
01:15:02,880 --> 01:15:04,400
um

2063
01:15:04,400 --> 01:15:06,480
that intermediary could choose to allow

2064
01:15:06,480 --> 01:15:08,719
someone to send it more than it was then

2065
01:15:08,719 --> 01:15:10,480
it's allowed to send upstream and vice

2066
01:15:10,480 --> 01:15:12,800
versa so if it's willing to

2067
01:15:12,800 --> 01:15:14,400
pay the cost to put the memory into

2068
01:15:14,400 --> 01:15:16,080
buffering a bunch of that stuff and

2069
01:15:16,080 --> 01:15:18,000
potentially having a sad day

2070
01:15:18,000 --> 01:15:19,520
you're perfectly allowed to have a sad

2071
01:15:19,520 --> 01:15:20,719
day

2072
01:15:20,719 --> 01:15:23,280
but in practice

2073
01:15:23,280 --> 01:15:24,719
you can usually just for the limits

2074
01:15:24,719 --> 01:15:26,719
onwards so if we go to our uh butchered

2075
01:15:26,719 --> 01:15:29,360
next diagram

2076
01:15:29,360 --> 01:15:32,159
yeah my apologies to eric and everyone

2077
01:15:32,159 --> 01:15:34,159
for resizing the slides right before the

2078
01:15:34,159 --> 01:15:36,080
meeting and kind of nuking some of the

2079
01:15:36,080 --> 01:15:38,320
diagrams in the process

2080
01:15:38,320 --> 01:15:39,840
so these lovely fast forward symbols

2081
01:15:39,840 --> 01:15:41,600
that you see are actually uh

2082
01:15:41,600 --> 01:15:43,679
double-ended arrows between these uh

2083
01:15:43,679 --> 01:15:46,320
different boxes

2084
01:15:49,840 --> 01:15:51,440
and if we skip to the next slide since i

2085
01:15:51,440 --> 01:15:53,360
think building this in in segments is

2086
01:15:53,360 --> 01:15:55,679
not necessarily going to help much

2087
01:15:55,679 --> 01:15:57,679
we got more numbers here um that refers

2088
01:15:57,679 --> 01:15:59,520
to a thing that's on the left somewhere

2089
01:15:59,520 --> 01:16:01,360
conceptually what this is saying is that

2090
01:16:01,360 --> 01:16:03,199
if you're an intermediary and somebody's

2091
01:16:03,199 --> 01:16:06,560
saying hey you can send me 100 bytes

2092
01:16:06,560 --> 01:16:08,800
you probably want to be very careful

2093
01:16:08,800 --> 01:16:10,480
before you tell the person sending you

2094
01:16:10,480 --> 01:16:12,159
stuff that they can send you more than

2095
01:16:12,159 --> 01:16:14,080
that 100 bytes

2096
01:16:14,080 --> 01:16:15,840
which should be pretty straightforward

2097
01:16:15,840 --> 01:16:18,159
um

2098
01:16:18,719 --> 01:16:21,440
did you just join the queue yeah

2099
01:16:21,440 --> 01:16:24,000
let's do it

2100
01:16:24,960 --> 01:16:28,159
how does that work um because the client

2101
01:16:28,159 --> 01:16:29,760
establishes the connection to the

2102
01:16:29,760 --> 01:16:31,760
intermediary first

2103
01:16:31,760 --> 01:16:33,600
and during the quick handshake you

2104
01:16:33,600 --> 01:16:35,760
communicate these limits

2105
01:16:35,760 --> 01:16:38,239
the initial limits yes yes

2106
01:16:38,239 --> 01:16:40,640
right so you need some sensible set of

2107
01:16:40,640 --> 01:16:42,080
initial limits but essentially as you're

2108
01:16:42,080 --> 01:16:44,080
going to increase those limits

2109
01:16:44,080 --> 01:16:45,440
um you need to be careful but yes you

2110
01:16:45,440 --> 01:16:47,520
you could be stuck in a situation where

2111
01:16:47,520 --> 01:16:48,960
uh when you establish your upstream

2112
01:16:48,960 --> 01:16:50,400
connection it says my initial limit is

2113
01:16:50,400 --> 01:16:53,520
50 and you'd already advertised 100 um

2114
01:16:53,520 --> 01:16:57,120
and you're gonna have to deal with that

2115
01:16:57,199 --> 01:16:59,120
so let's try to be a little bit more

2116
01:16:59,120 --> 01:17:01,120
pragmatic about this sort of thing

2117
01:17:01,120 --> 01:17:02,480
this is going to be a gateway sitting in

2118
01:17:02,480 --> 01:17:04,239
front of a bunch of servers and a lot of

2119
01:17:04,239 --> 01:17:05,440
cases the gateway's going to know

2120
01:17:05,440 --> 01:17:07,040
something about those servers now

2121
01:17:07,040 --> 01:17:08,320
whether that's based on the fact that

2122
01:17:08,320 --> 01:17:09,679
it's already talked to those servers in

2123
01:17:09,679 --> 01:17:10,640
the past

2124
01:17:10,640 --> 01:17:13,199
or because they're actually operated by

2125
01:17:13,199 --> 01:17:14,239
the same people and they run off the

2126
01:17:14,239 --> 01:17:17,280
same configuration as largely a material

2127
01:17:17,280 --> 01:17:19,760
the intermediary can advertise initial

2128
01:17:19,760 --> 01:17:21,600
flow control windows that match those of

2129
01:17:21,600 --> 01:17:23,920
the servers below behind them that's i

2130
01:17:23,920 --> 01:17:26,400
think relatively straightforward

2131
01:17:26,400 --> 01:17:27,600
if there are multiple servers on the

2132
01:17:27,600 --> 01:17:29,840
back end they might do things like take

2133
01:17:29,840 --> 01:17:31,840
the minimum of the servers if they have

2134
01:17:31,840 --> 01:17:34,000
different configurations

2135
01:17:34,000 --> 01:17:38,080
and then as the backend server provides

2136
01:17:38,080 --> 01:17:40,640
per stream flow control credits

2137
01:17:40,640 --> 01:17:42,080
the intermediary can just forward those

2138
01:17:42,080 --> 01:17:43,120
credits

2139
01:17:43,120 --> 01:17:45,040
onwards and then you then you have

2140
01:17:45,040 --> 01:17:46,480
essentially an end-to-end flow control

2141
01:17:46,480 --> 01:17:47,600
and the intermediary is in an

2142
01:17:47,600 --> 01:17:49,360
interesting position there

2143
01:17:49,360 --> 01:17:50,320
um

2144
01:17:50,320 --> 01:17:52,400
i was just thinking there's

2145
01:17:52,400 --> 01:17:53,600
interesting complications here when you

2146
01:17:53,600 --> 01:17:55,520
talk about having quick on both sides of

2147
01:17:55,520 --> 01:17:57,520
the intermediary and when you have quick

2148
01:17:57,520 --> 01:18:00,800
quick and tcp on on different sides

2149
01:18:00,800 --> 01:18:02,640
with quick if you get

2150
01:18:02,640 --> 01:18:04,400
an out of order

2151
01:18:04,400 --> 01:18:06,159
piece of stream information you just

2152
01:18:06,159 --> 01:18:07,440
forward it on

2153
01:18:07,440 --> 01:18:09,199
and sort of say oh this is just stuff

2154
01:18:09,199 --> 01:18:10,480
that you'll need to deal with in the

2155
01:18:10,480 --> 01:18:13,440
future that's easy with ccp with

2156
01:18:13,440 --> 01:18:15,040
headline blocking you have to wait for

2157
01:18:15,040 --> 01:18:16,719
everything you have to buffer things up

2158
01:18:16,719 --> 01:18:19,280
so ultimately the intermediary can't

2159
01:18:19,280 --> 01:18:22,159
sort of blindly forward those things on

2160
01:18:22,159 --> 01:18:24,320
in the in the tcp context

2161
01:18:24,320 --> 01:18:25,600
because

2162
01:18:25,600 --> 01:18:28,719
it does need to have

2163
01:18:28,719 --> 01:18:30,159
all of the

2164
01:18:30,159 --> 01:18:32,880
space that that it advertises available

2165
01:18:32,880 --> 01:18:34,960
for buffering otherwise it could end up

2166
01:18:34,960 --> 01:18:38,560
in a situation where it it has data that

2167
01:18:38,560 --> 01:18:41,199
it said it could take but it couldn't

2168
01:18:41,199 --> 01:18:42,000
right

2169
01:18:42,000 --> 01:18:44,159
yeah and i i think that's a really good

2170
01:18:44,159 --> 01:18:46,400
point and kind of underscores the

2171
01:18:46,400 --> 01:18:49,040
the idea that conceptually you are

2172
01:18:49,040 --> 01:18:51,199
terminating that flow control you you

2173
01:18:51,199 --> 01:18:52,880
are responsible for whatever you choose

2174
01:18:52,880 --> 01:18:56,560
to advertise and the fact that in many

2175
01:18:56,560 --> 01:18:59,040
cases it is fairly straightforward to

2176
01:18:59,040 --> 01:19:00,400
send that through

2177
01:19:00,400 --> 01:19:01,520
is okay

2178
01:19:01,520 --> 01:19:02,560
but

2179
01:19:02,560 --> 01:19:04,159
the underlying reality

2180
01:19:04,159 --> 01:19:05,760
you like you can't just completely

2181
01:19:05,760 --> 01:19:08,719
ignore that

2182
01:19:08,719 --> 01:19:11,199
hi uh luke from twitch um

2183
01:19:11,199 --> 01:19:13,440
so flow control is usually based on like

2184
01:19:13,440 --> 01:19:15,760
i have limited ram uh i think the

2185
01:19:15,760 --> 01:19:17,520
assumption here the intermediary is like

2186
01:19:17,520 --> 01:19:19,280
we've just got big beefy servers and

2187
01:19:19,280 --> 01:19:20,880
they can have as much ram as the client

2188
01:19:20,880 --> 01:19:22,480
of the server

2189
01:19:22,480 --> 01:19:23,199
but

2190
01:19:23,199 --> 01:19:25,280
i mean exactly like it sounds like it's

2191
01:19:25,280 --> 01:19:27,199
a poor decision to just forward flow

2192
01:19:27,199 --> 01:19:29,120
control if you're running a raspberry pi

2193
01:19:29,120 --> 01:19:30,719
or something like there's going to be

2194
01:19:30,719 --> 01:19:32,400
congestion all of a sudden you

2195
01:19:32,400 --> 01:19:34,960
advertised you know a gigabyte of ram

2196
01:19:34,960 --> 01:19:37,360
available but you didn't have that right

2197
01:19:37,360 --> 01:19:39,040
so i'm not sure it's actually a good

2198
01:19:39,040 --> 01:19:41,440
idea to ever forward flow control um and

2199
01:19:41,440 --> 01:19:42,800
i don't think it's an end-to-end thing i

2200
01:19:42,800 --> 01:19:44,159
think it's literally just i just have

2201
01:19:44,159 --> 01:19:47,360
this much ram availability each hop

2202
01:19:47,360 --> 01:19:49,360
yes well and

2203
01:19:49,360 --> 01:19:51,199
martin had also made a good point around

2204
01:19:51,199 --> 01:19:53,920
if you're translating between h3 and h2

2205
01:19:53,920 --> 01:19:56,080
like h2 to h2 is pretty straightforward

2206
01:19:56,080 --> 01:19:58,400
h3 to h3 is pretty straightforward

2207
01:19:58,400 --> 01:20:01,280
plus some extra ordering fun um

2208
01:20:01,280 --> 01:20:02,480
but

2209
01:20:02,480 --> 01:20:04,960
at the end of the day we're not defining

2210
01:20:04,960 --> 01:20:05,679
a

2211
01:20:05,679 --> 01:20:07,920
new signaling mechanism for this in the

2212
01:20:07,920 --> 01:20:09,280
spec so

2213
01:20:09,280 --> 01:20:10,480
if you've got a bunch of big beefy

2214
01:20:10,480 --> 01:20:11,760
servers

2215
01:20:11,760 --> 01:20:13,679
that's awesome

2216
01:20:13,679 --> 01:20:15,040
other people may not have a bunch of big

2217
01:20:15,040 --> 01:20:16,960
beefy servers that's cool too i think

2218
01:20:16,960 --> 01:20:18,080
what we're trying to do is provide

2219
01:20:18,080 --> 01:20:20,080
enough guidance that we're giving a

2220
01:20:20,080 --> 01:20:22,080
heads up as to some of the pitfalls and

2221
01:20:22,080 --> 01:20:23,360
the things you need to be careful with

2222
01:20:23,360 --> 01:20:26,400
as you choose to do this but

2223
01:20:26,400 --> 01:20:28,239
what what your intermediary chooses to

2224
01:20:28,239 --> 01:20:30,400
do with web transport is not something

2225
01:20:30,400 --> 01:20:31,600
like we're not defining additional

2226
01:20:31,600 --> 01:20:33,840
signaling about it um and we're not

2227
01:20:33,840 --> 01:20:35,360
really putting any requirements on it

2228
01:20:35,360 --> 01:20:37,040
either so if you've got a raspberry pi

2229
01:20:37,040 --> 01:20:38,239
and you want to be super careful and you

2230
01:20:38,239 --> 01:20:40,560
want to manage it

2231
01:20:40,560 --> 01:20:42,320
completely on your own and not have any

2232
01:20:42,320 --> 01:20:44,239
signal from upstream like go downstream

2233
01:20:44,239 --> 01:20:45,760
that's totally cool

2234
01:20:45,760 --> 01:20:47,360
yeah i think it's just sometimes with

2235
01:20:47,360 --> 01:20:48,800
max streams it's conflated like it

2236
01:20:48,800 --> 01:20:50,320
sounds like we want max stream to kind

2237
01:20:50,320 --> 01:20:52,320
of be end to end like it's meant to be

2238
01:20:52,320 --> 01:20:54,560
an application level decision but for

2239
01:20:54,560 --> 01:20:56,800
data it's definitely not i think it's

2240
01:20:56,800 --> 01:20:59,600
kind of my point got it yeah thank you

2241
01:20:59,600 --> 01:21:01,120
yeah

2242
01:21:01,120 --> 01:21:03,280
yeah ian sweat google

2243
01:21:03,280 --> 01:21:04,719
uh i would agree that yeah thinking

2244
01:21:04,719 --> 01:21:06,719
about this as end-to-end is is probably

2245
01:21:06,719 --> 01:21:08,560
just not gonna work but the good part is

2246
01:21:08,560 --> 01:21:10,239
that like intermediate areas that

2247
01:21:10,239 --> 01:21:12,080
terminate like h2 and h3 already deal

2248
01:21:12,080 --> 01:21:13,199
with this problem

2249
01:21:13,199 --> 01:21:14,560
and so like

2250
01:21:14,560 --> 01:21:16,080
i'm not really sure you really need to

2251
01:21:16,080 --> 01:21:18,159
say anything at all i will call it one

2252
01:21:18,159 --> 01:21:20,400
note for your example um the

2253
01:21:20,400 --> 01:21:22,000
intermediate to the server could have

2254
01:21:22,000 --> 01:21:23,840
like an incredibly small rtt like in the

2255
01:21:23,840 --> 01:21:26,239
order of a millisecond or less it is not

2256
01:21:26,239 --> 01:21:28,080
uncommon the client would have an rtt

2257
01:21:28,080 --> 01:21:29,440
that is like two orders of magnitude

2258
01:21:29,440 --> 01:21:31,840
larger as a result the bdp between the

2259
01:21:31,840 --> 01:21:33,760
client and the intermediary is fairly

2260
01:21:33,760 --> 01:21:35,199
often going to be probably at least an

2261
01:21:35,199 --> 01:21:36,400
order of magnitude larger than the

2262
01:21:36,400 --> 01:21:38,159
server to the intermediary so unless

2263
01:21:38,159 --> 01:21:39,120
you're going to give a bunch of

2264
01:21:39,120 --> 01:21:41,600
information to the server

2265
01:21:41,600 --> 01:21:44,480
about the client and that bdp even

2266
01:21:44,480 --> 01:21:46,000
trying to do end to end is going to hose

2267
01:21:46,000 --> 01:21:48,080
you because like you're going to be

2268
01:21:48,080 --> 01:21:49,600
sending far too little flow control from

2269
01:21:49,600 --> 01:21:52,239
server to intermediary so like

2270
01:21:52,239 --> 01:21:53,760
there's a drag in there maybe maybe it's

2271
01:21:53,760 --> 01:21:55,199
even worth calling out like this isn't

2272
01:21:55,199 --> 01:21:56,560
end end you're probably going to get

2273
01:21:56,560 --> 01:21:58,480
yourself in troubles i think that is

2274
01:21:58,480 --> 01:22:00,320
that is why the

2275
01:22:00,320 --> 01:22:03,520
fundamental underlying reality is it is

2276
01:22:03,520 --> 01:22:05,760
not end to end it terminates at each

2277
01:22:05,760 --> 01:22:07,600
intermediary it's essentially hot by hop

2278
01:22:07,600 --> 01:22:09,600
as it were and like what you've

2279
01:22:09,600 --> 01:22:11,600
committed to you've committed to and you

2280
01:22:11,600 --> 01:22:13,120
might choose because you know that

2281
01:22:13,120 --> 01:22:15,040
there's gonna be way higher bdp like you

2282
01:22:15,040 --> 01:22:16,320
might choose to advertise something

2283
01:22:16,320 --> 01:22:19,040
that's way higher and if everything goes

2284
01:22:19,040 --> 01:22:20,400
wrong and

2285
01:22:20,400 --> 01:22:22,239
even though you have a super low latency

2286
01:22:22,239 --> 01:22:23,760
link between you and your upstream like

2287
01:22:23,760 --> 01:22:25,920
if that gets locked for whatever reason

2288
01:22:25,920 --> 01:22:27,600
like yeah now you have to hold up like

2289
01:22:27,600 --> 01:22:29,280
you are left holding the bag

2290
01:22:29,280 --> 01:22:32,719
but in practice like that's fine

2291
01:22:34,639 --> 01:22:35,520
so what i'm getting from this

2292
01:22:35,520 --> 01:22:37,120
conversation is that building an

2293
01:22:37,120 --> 01:22:40,159
intermediary could be hard

2294
01:22:40,159 --> 01:22:43,040
but people do it anyway and have done so

2295
01:22:43,040 --> 01:22:46,960
successfully for some amount of time

2296
01:22:47,520 --> 01:22:50,239
and it might be the case that trying to

2297
01:22:50,239 --> 01:22:51,520
find the guidance that you're looking to

2298
01:22:51,520 --> 01:22:52,800
put in here

2299
01:22:52,800 --> 01:22:55,920
is subtle and difficult enough that

2300
01:22:55,920 --> 01:22:57,679
maybe we shouldn't even bother

2301
01:22:57,679 --> 01:23:00,400
maybe we should simply say

2302
01:23:00,400 --> 01:23:03,040
intermediaries exist

2303
01:23:03,040 --> 01:23:04,560
and that's it

2304
01:23:04,560 --> 01:23:07,840
something very very simple and

2305
01:23:07,840 --> 01:23:09,679
anodyne basically

2306
01:23:09,679 --> 01:23:11,920
i don't think there's much

2307
01:23:11,920 --> 01:23:14,000
so that we benefit from from trying to

2308
01:23:14,000 --> 01:23:15,520
explore all the various ways in which

2309
01:23:15,520 --> 01:23:17,840
you might implement an intermediary

2310
01:23:17,840 --> 01:23:19,440
under the varying conditions that ian's

2311
01:23:19,440 --> 01:23:20,960
talking about because

2312
01:23:20,960 --> 01:23:22,560
yeah that's

2313
01:23:22,560 --> 01:23:23,600
that's why people building

2314
01:23:23,600 --> 01:23:25,840
intermediaries still continue to have

2315
01:23:25,840 --> 01:23:28,000
job security i think

2316
01:23:28,000 --> 01:23:29,600
so the the

2317
01:23:29,600 --> 01:23:31,199
just for for clarity that the current

2318
01:23:31,199 --> 01:23:34,239
proposal um is we're saying this is

2319
01:23:34,239 --> 01:23:36,320
essentially hot by hop if you commit to

2320
01:23:36,320 --> 01:23:37,840
it like you're the one left holding that

2321
01:23:37,840 --> 01:23:39,199
bag that's up to you

2322
01:23:39,199 --> 01:23:40,159
and

2323
01:23:40,159 --> 01:23:41,760
any other text we choose to put on top

2324
01:23:41,760 --> 01:23:43,679
of which we have proposed very little

2325
01:23:43,679 --> 01:23:45,920
right now um

2326
01:23:45,920 --> 01:23:47,440
if we if we want to describe something

2327
01:23:47,440 --> 01:23:50,000
that helps people and lays out some of

2328
01:23:50,000 --> 01:23:51,440
the here are common pitfalls and things

2329
01:23:51,440 --> 01:23:52,719
you might want to think about that's

2330
01:23:52,719 --> 01:23:55,040
totally cool but the um in terms of our

2331
01:23:55,040 --> 01:23:55,920
like

2332
01:23:55,920 --> 01:23:58,000
actual pull request for this stuff the

2333
01:23:58,000 --> 01:24:00,000
only hard line statement that we're

2334
01:24:00,000 --> 01:24:01,520
making is

2335
01:24:01,520 --> 01:24:03,840
this is not an end to end concept like

2336
01:24:03,840 --> 01:24:05,360
if you advertise something that's higher

2337
01:24:05,360 --> 01:24:06,639
than what your upstream could do like

2338
01:24:06,639 --> 01:24:09,920
you got to deal with that that's on you

2339
01:24:11,120 --> 01:24:14,080
colin jason i i mean i i anytime i was

2340
01:24:14,080 --> 01:24:15,280
just sort of reacting a little bit to

2341
01:24:15,280 --> 01:24:17,679
martin's uh you know like any time we're

2342
01:24:17,679 --> 01:24:20,159
trying wish intermarry's intermediaries

2343
01:24:20,159 --> 01:24:22,880
away we ten years later deeply regret

2344
01:24:22,880 --> 01:24:25,520
having done that right but i think your

2345
01:24:25,520 --> 01:24:26,719
statement that you have what i read in

2346
01:24:26,719 --> 01:24:28,239
the draft of you're not wishing them

2347
01:24:28,239 --> 01:24:30,320
away at all you're saying very hardcore

2348
01:24:30,320 --> 01:24:32,560
you know you have to fully be

2349
01:24:32,560 --> 01:24:34,080
you know whatever you advertise you have

2350
01:24:34,080 --> 01:24:35,760
to provide and that means you're a full

2351
01:24:35,760 --> 01:24:38,320
sbc in the sip sense or a full you know

2352
01:24:38,320 --> 01:24:39,920
i think that's a great way to d in fact

2353
01:24:39,920 --> 01:24:41,120
i think it's the only practical way to

2354
01:24:41,120 --> 01:24:42,880
deal with intermediate problems but i

2355
01:24:42,880 --> 01:24:44,480
think you should claim you are dealing

2356
01:24:44,480 --> 01:24:46,560
with interiors and this is the answer

2357
01:24:46,560 --> 01:24:48,320
not we're sort of

2358
01:24:48,320 --> 01:24:50,239
you figure it out yourself because the

2359
01:24:50,239 --> 01:24:51,840
figure it out yourself it leads to bad

2360
01:24:51,840 --> 01:24:54,800
results later thanks beautiful

2361
01:24:54,800 --> 01:24:59,000
all right next slide please

2362
01:25:02,719 --> 01:25:04,719
all right so if we summarize what we've

2363
01:25:04,719 --> 01:25:06,639
talked about

2364
01:25:06,639 --> 01:25:08,560
we are proposing that h2 should use

2365
01:25:08,560 --> 01:25:09,600
capsules

2366
01:25:09,600 --> 01:25:10,960
we are saying that h3 should use

2367
01:25:10,960 --> 01:25:12,560
capsules and share with h2 where

2368
01:25:12,560 --> 01:25:14,560
appropriate which is actually a

2369
01:25:14,560 --> 01:25:16,159
reasonably small list

2370
01:25:16,159 --> 01:25:17,840
our main reason for using capsules is

2371
01:25:17,840 --> 01:25:19,360
because the frames look exactly the same

2372
01:25:19,360 --> 01:25:20,719
but now they're in a shared list and we

2373
01:25:20,719 --> 01:25:23,920
can reuse them between protocols

2374
01:25:23,920 --> 01:25:25,440
we're saying that capsules will always

2375
01:25:25,440 --> 01:25:28,159
use native features if possible uh and i

2376
01:25:28,159 --> 01:25:30,000
think we may want to split out a

2377
01:25:30,000 --> 01:25:32,080
specific github issue even just so we

2378
01:25:32,080 --> 01:25:34,000
can write down some of our conversation

2379
01:25:34,000 --> 01:25:36,000
around uh what happens if datagrams

2380
01:25:36,000 --> 01:25:38,719
aren't there and and how we are going to

2381
01:25:38,719 --> 01:25:40,960
maybe have text that that

2382
01:25:40,960 --> 01:25:42,880
makes a takes a strong stance on that if

2383
01:25:42,880 --> 01:25:44,639
that's what we want to do

2384
01:25:44,639 --> 01:25:46,560
uh eric can you take the action item of

2385
01:25:46,560 --> 01:25:50,080
filing that issue yep thank you

2386
01:25:50,080 --> 01:25:51,760
h3 and h2

2387
01:25:51,760 --> 01:25:54,239
are getting a setting for max sessions

2388
01:25:54,239 --> 01:25:57,120
which replaces the enable web transport

2389
01:25:57,120 --> 01:25:59,280
uh setting so instead of it being you

2390
01:25:59,280 --> 01:26:01,120
know zero or one you can now have zero

2391
01:26:01,120 --> 01:26:03,199
one or more than one

2392
01:26:03,199 --> 01:26:04,320
um

2393
01:26:04,320 --> 01:26:06,719
and the last one is

2394
01:26:06,719 --> 01:26:09,520
we're proposing that h3 gets a

2395
01:26:09,520 --> 01:26:12,320
stream count limit within a session uh

2396
01:26:12,320 --> 01:26:14,560
but i will actually split out a similar

2397
01:26:14,560 --> 01:26:17,360
issue for that where we can

2398
01:26:17,360 --> 01:26:19,040
make sure that we've

2399
01:26:19,040 --> 01:26:20,560
fully written down everything we need to

2400
01:26:20,560 --> 01:26:22,159
for that stuff and if we get to the end

2401
01:26:22,159 --> 01:26:23,600
of that issue and we say you know what

2402
01:26:23,600 --> 01:26:25,040
flow control is not the thing we were

2403
01:26:25,040 --> 01:26:26,239
trying to solve when we talked about

2404
01:26:26,239 --> 01:26:29,760
capsules that is totally okay

2405
01:26:29,760 --> 01:26:32,560
nobody will be sad with less of that

2406
01:26:32,560 --> 01:26:34,239
all right um so

2407
01:26:34,239 --> 01:26:36,000
just process wise uh we have two pull

2408
01:26:36,000 --> 01:26:37,120
requests for this

2409
01:26:37,120 --> 01:26:39,120
um they're gonna move around a bit in

2410
01:26:39,120 --> 01:26:41,040
github and stuff so i will send them out

2411
01:26:41,040 --> 01:26:42,880
with links to the list so keep an eye

2412
01:26:42,880 --> 01:26:44,960
out for that and if you can come in and

2413
01:26:44,960 --> 01:26:47,120
read a lot of that and especially if

2414
01:26:47,120 --> 01:26:48,880
your reading of them does not give you

2415
01:26:48,880 --> 01:26:50,320
the same impression as the words that we

2416
01:26:50,320 --> 01:26:52,159
all just said uh that'd be really cool

2417
01:26:52,159 --> 01:26:53,360
to call out

2418
01:26:53,360 --> 01:26:54,400
um

2419
01:26:54,400 --> 01:26:56,239
but yeah please please give them a look

2420
01:26:56,239 --> 01:26:58,400
the diff for h3 is quite small the

2421
01:26:58,400 --> 01:27:01,199
differ h2 is quite large it's almost all

2422
01:27:01,199 --> 01:27:03,280
packet formats and fun figures and stuff

2423
01:27:03,280 --> 01:27:04,960
like that so it's not super onerous to

2424
01:27:04,960 --> 01:27:06,960
take a look at so i will send a link out

2425
01:27:06,960 --> 01:27:08,639
to that and thank you

2426
01:27:08,639 --> 01:27:10,719
all right thank you very much eric uh

2427
01:27:10,719 --> 01:27:14,719
any last questions for before we move on

2428
01:27:14,719 --> 01:27:18,480
uh okay so process wise eric will send

2429
01:27:18,480 --> 01:27:20,480
out this email and then the chairs will

2430
01:27:20,480 --> 01:27:23,199
turn that into a formal consensus call

2431
01:27:23,199 --> 01:27:24,800
on those pr's since this is a

2432
01:27:24,800 --> 01:27:28,080
non-trivial change to how h2 works

2433
01:27:28,080 --> 01:27:29,440
and uh

2434
01:27:29,440 --> 01:27:31,280
and then while assuming that goes

2435
01:27:31,280 --> 01:27:34,400
through we'll have a set design

2436
01:27:34,400 --> 01:27:35,679
going forward

2437
01:27:35,679 --> 01:27:39,560
all right victor

2438
01:27:47,520 --> 01:27:48,480
uh

2439
01:27:48,480 --> 01:27:51,440
hello everyone i'm victor editor for

2440
01:27:51,440 --> 01:27:54,400
the h free spec

2441
01:27:54,400 --> 01:27:55,199
uh

2442
01:27:55,199 --> 01:27:58,000
each space track is hopefully

2443
01:27:58,000 --> 01:28:00,000
approaching the stage where it's almost

2444
01:28:00,000 --> 01:28:01,120
done

2445
01:28:01,120 --> 01:28:05,199
so today we're going to go over

2446
01:28:05,199 --> 01:28:06,320
the

2447
01:28:06,320 --> 01:28:08,880
some of the remaining issues uh next

2448
01:28:08,880 --> 01:28:11,120
slide

2449
01:28:11,120 --> 01:28:12,080
so

2450
01:28:12,080 --> 01:28:14,080
update since last minuting first of all

2451
01:28:14,080 --> 01:28:17,440
for the overview draft uh we've merged

2452
01:28:17,440 --> 01:28:19,760
the pr that defines the common

2453
01:28:19,760 --> 01:28:21,840
operations that any web transport should

2454
01:28:21,840 --> 01:28:22,800
provide

2455
01:28:22,800 --> 01:28:24,639
this is meant to be as a layer of

2456
01:28:24,639 --> 01:28:27,760
abstraction on top of web transport over

2457
01:28:27,760 --> 01:28:30,639
h3 or transport over h2 and whatever

2458
01:28:30,639 --> 01:28:31,679
else

2459
01:28:31,679 --> 01:28:34,159
uh and uh

2460
01:28:34,159 --> 01:28:36,400
uh

2461
01:28:36,960 --> 01:28:38,560
this is

2462
01:28:38,560 --> 01:28:42,639
mostly useful for people who edit w3c

2463
01:28:42,639 --> 01:28:44,000
spec but

2464
01:28:44,000 --> 01:28:47,600
everyone is encouraged to read

2465
01:28:47,600 --> 01:28:50,400
the updated version

2466
01:28:50,400 --> 01:28:53,040
next slide

2467
01:28:54,960 --> 01:28:57,199
for web transport over it freeze up this

2468
01:28:57,199 --> 01:28:59,760
has been mostly minor we've uh

2469
01:28:59,760 --> 01:29:02,560
notable one is since last meeting as we

2470
01:29:02,560 --> 01:29:04,480
decided we clarified

2471
01:29:04,480 --> 01:29:06,639
what happens once again away frame is

2472
01:29:06,639 --> 01:29:09,840
sent on stage free connection

2473
01:29:09,840 --> 01:29:12,239
and added some missing details about how

2474
01:29:12,239 --> 01:29:14,400
exactly you turn down the transport

2475
01:29:14,400 --> 01:29:17,920
session so on the next slide we

2476
01:29:17,920 --> 01:29:19,600
have

2477
01:29:19,600 --> 01:29:22,400
some of we have about

2478
01:29:22,400 --> 01:29:25,199
10 remaining issues if the roughly five

2479
01:29:25,199 --> 01:29:27,280
of those are

2480
01:29:27,280 --> 01:29:30,560
either editorial or just near the pr so

2481
01:29:30,560 --> 01:29:33,440
the issues are still not discussing are

2482
01:29:33,440 --> 01:29:35,679
each free is though we currently do not

2483
01:29:35,679 --> 01:29:38,719
define what we do with http redirects

2484
01:29:38,719 --> 01:29:39,679
uh

2485
01:29:39,679 --> 01:29:42,320
the rfc 9205

2486
01:29:42,320 --> 01:29:44,480
says that we have to provide explicit

2487
01:29:44,480 --> 01:29:46,560
guidance on what to do with this

2488
01:29:46,560 --> 01:29:48,960
uh our current behavior in the web

2489
01:29:48,960 --> 01:29:51,440
browser is that we explicitly do not

2490
01:29:51,440 --> 01:29:53,199
handle them

2491
01:29:53,199 --> 01:29:54,719
as in there

2492
01:29:54,719 --> 01:29:59,280
is now automatic redirect support

2493
01:29:59,440 --> 01:30:02,320
but we need some normative tax since the

2494
01:30:02,320 --> 01:30:03,360
draft

2495
01:30:03,360 --> 01:30:04,480
so

2496
01:30:04,480 --> 01:30:08,080
do people have opinions on what

2497
01:30:08,080 --> 01:30:10,800
should be there

2498
01:30:14,159 --> 01:30:16,400
oh david so

2499
01:30:16,400 --> 01:30:19,199
speaking as an individual contributor

2500
01:30:19,199 --> 01:30:20,800
i would say just

2501
01:30:20,800 --> 01:30:23,199
must follow redirects it's not a hard

2502
01:30:23,199 --> 01:30:26,000
thing to implement for browsers and some

2503
01:30:26,000 --> 01:30:29,280
folks could find this useful

2504
01:30:29,920 --> 01:30:32,320
oh as an individual

2505
01:30:32,320 --> 01:30:34,400
an implementer uh i

2506
01:30:34,400 --> 01:30:36,719
err on should not

2507
01:30:36,719 --> 01:30:39,679
uh we've definitely

2508
01:30:39,679 --> 01:30:42,639
uh from what i understand

2509
01:30:42,639 --> 01:30:44,400
have ran in

2510
01:30:44,400 --> 01:30:48,080
a bunch of implementation issues when we

2511
01:30:48,080 --> 01:30:50,960
with redirects in websockets

2512
01:30:50,960 --> 01:30:55,679
and there are some rough edges around

2513
01:30:56,800 --> 01:30:59,679
the fact that those aren't really

2514
01:30:59,679 --> 01:31:01,679
http

2515
01:31:01,679 --> 01:31:03,760
requests

2516
01:31:03,760 --> 01:31:05,679
oh

2517
01:31:05,679 --> 01:31:06,480
and

2518
01:31:06,480 --> 01:31:08,800
what does it mean what is the difference

2519
01:31:08,800 --> 01:31:11,440
between every director

2520
01:31:11,440 --> 01:31:14,840
i would moderately prefer should not as

2521
01:31:14,840 --> 01:31:19,199
in uh you could follow but we

2522
01:31:19,199 --> 01:31:21,360
will not normally

2523
01:31:21,360 --> 01:31:24,159
follow uh

2524
01:31:24,159 --> 01:31:26,320
and

2525
01:31:27,280 --> 01:31:28,159
so

2526
01:31:28,159 --> 01:31:30,960
question for the room as chair here like

2527
01:31:30,960 --> 01:31:33,360
either do browser implementers have

2528
01:31:33,360 --> 01:31:36,000
thought on how hard this or annoying or

2529
01:31:36,000 --> 01:31:38,480
risky this is to implement or do users

2530
01:31:38,480 --> 01:31:40,560
of web transport have thoughts on

2531
01:31:40,560 --> 01:31:41,760
whether

2532
01:31:41,760 --> 01:31:44,000
they would want this feature or they

2533
01:31:44,000 --> 01:31:46,560
don't care

2534
01:31:57,440 --> 01:31:59,440
so

2535
01:31:59,440 --> 01:32:03,040
this this advice that we've got is

2536
01:32:03,040 --> 01:32:05,040
not actually very helpful advice i'm

2537
01:32:05,040 --> 01:32:06,400
afraid

2538
01:32:06,400 --> 01:32:08,560
and so um

2539
01:32:08,560 --> 01:32:10,239
when when you think about using

2540
01:32:10,239 --> 01:32:11,440
something like

2541
01:32:11,440 --> 01:32:13,199
um

2542
01:32:13,199 --> 01:32:14,320
fetch

2543
01:32:14,320 --> 01:32:15,600
you will normally

2544
01:32:15,600 --> 01:32:17,199
you would normally expect to have the

2545
01:32:17,199 --> 01:32:19,440
redirects followed

2546
01:32:19,440 --> 01:32:21,760
until the point that you get

2547
01:32:21,760 --> 01:32:22,880
something

2548
01:32:22,880 --> 01:32:25,600
that requires action on the part of the

2549
01:32:25,600 --> 01:32:28,320
the thing following the redirect

2550
01:32:28,320 --> 01:32:30,960
here i think

2551
01:32:33,199 --> 01:32:34,880
because browsers work following

2552
01:32:34,880 --> 01:32:37,440
redirects generally i would i would hope

2553
01:32:37,440 --> 01:32:39,280
that we can follow redirects here as

2554
01:32:39,280 --> 01:32:40,719
well simply be

2555
01:32:40,719 --> 01:32:42,480
mainly because that's just how

2556
01:32:42,480 --> 01:32:43,840
everything else works but also because

2557
01:32:43,840 --> 01:32:45,840
there is value in having redirects in

2558
01:32:45,840 --> 01:32:48,320
terms of being able to put resources on

2559
01:32:48,320 --> 01:32:50,000
different servers

2560
01:32:50,000 --> 01:32:53,199
for deployment reasons or being able to

2561
01:32:53,199 --> 01:32:54,800
move things around

2562
01:32:54,800 --> 01:32:57,120
when people are given a url for

2563
01:32:57,120 --> 01:32:59,440
something and they find that

2564
01:32:59,440 --> 01:33:01,120
that

2565
01:33:01,120 --> 01:33:03,120
that needs to move somewhere else

2566
01:33:03,120 --> 01:33:06,480
so i would be on the must end

2567
01:33:06,480 --> 01:33:10,159
anything in the should may space here is

2568
01:33:10,159 --> 01:33:11,440
awful

2569
01:33:11,440 --> 01:33:13,040
uh because it means that you have no

2570
01:33:13,040 --> 01:33:15,760
determinism um you you don't know who's

2571
01:33:15,760 --> 01:33:18,239
who's following and who's who's not uh

2572
01:33:18,239 --> 01:33:20,000
if we can find a set of reasons why you

2573
01:33:20,000 --> 01:33:22,239
might not follow a redirect that would

2574
01:33:22,239 --> 01:33:26,080
be interesting but um i would probably

2575
01:33:26,080 --> 01:33:27,440
er toward the

2576
01:33:27,440 --> 01:33:31,120
the must end on this one

2577
01:33:34,960 --> 01:33:36,960
mike bishop speaking from an http

2578
01:33:36,960 --> 01:33:39,199
perspective i'm not entirely clear what

2579
01:33:39,199 --> 01:33:40,880
it means to follow a redirect on a

2580
01:33:40,880 --> 01:33:44,239
connect request to begin with

2581
01:33:46,639 --> 01:33:50,960
well you if you get a 3dx response yeah

2582
01:33:50,960 --> 01:33:52,800
i mean i know how mechanically you would

2583
01:33:52,800 --> 01:33:54,000
do it you

2584
01:33:54,000 --> 01:33:55,920
you get the 3xx response you go to a

2585
01:33:55,920 --> 01:33:57,840
different url you reissue your connect

2586
01:33:57,840 --> 01:34:00,320
request i guess but like

2587
01:34:00,320 --> 01:34:02,719
when i

2588
01:34:03,040 --> 01:34:05,679
it makes more sense

2589
01:34:05,679 --> 01:34:07,679
if i'm trying to fetch a resource if i'm

2590
01:34:07,679 --> 01:34:10,080
asking you to perform an action

2591
01:34:10,080 --> 01:34:13,519
if i'm trying to talk to you

2592
01:34:14,320 --> 01:34:17,520
connect and getting a redirect back

2593
01:34:17,520 --> 01:34:19,600
seems a little weird semantically yeah

2594
01:34:19,600 --> 01:34:22,400
there is a similar question like do

2595
01:34:22,400 --> 01:34:25,520
cache connect redirects

2596
01:34:25,520 --> 01:34:28,400
how does that work

2597
01:34:28,719 --> 01:34:31,760
hi luke here so just like martin said it

2598
01:34:31,760 --> 01:34:34,960
should be a must or must not as a user i

2599
01:34:34,960 --> 01:34:36,320
if i'm going to use a redirect feature

2600
01:34:36,320 --> 01:34:37,840
on my server i need to know if the

2601
01:34:37,840 --> 01:34:39,840
browser is going to do it

2602
01:34:39,840 --> 01:34:41,040
otherwise i could just do it through

2603
01:34:41,040 --> 01:34:43,360
some other mechanism so if it does

2604
01:34:43,360 --> 01:34:44,719
support redirects that's one more tool

2605
01:34:44,719 --> 01:34:46,639
to my toolbox if it doesn't i can just

2606
01:34:46,639 --> 01:34:48,560
do redirects via like some other

2607
01:34:48,560 --> 01:34:49,679
endpoint

2608
01:34:49,679 --> 01:34:51,440
um so

2609
01:34:51,440 --> 01:34:55,280
i think either way just one of the musts

2610
01:34:55,850 --> 01:34:58,480
[Music]

2611
01:34:58,480 --> 01:35:00,080
i was getting uh colin jones i was

2612
01:35:00,080 --> 01:35:01,199
getting up to say what luke said it's

2613
01:35:01,199 --> 01:35:03,040
got to be muster must not absolutely

2614
01:35:03,040 --> 01:35:05,119
mandatory has to be one of those two uh

2615
01:35:05,119 --> 01:35:07,280
but i totally assumed it was a must it

2616
01:35:07,280 --> 01:35:08,719
never occurred to me in any way

2617
01:35:08,719 --> 01:35:10,400
whatsoever that it wouldn't be and i

2618
01:35:10,400 --> 01:35:11,920
think that that's probably what most

2619
01:35:11,920 --> 01:35:13,199
implementers using this are going to

2620
01:35:13,199 --> 01:35:15,839
assume

2621
01:35:17,920 --> 01:35:20,480
yeah so um to to mike's point i think

2622
01:35:20,480 --> 01:35:22,000
part of the problem we're having here is

2623
01:35:22,000 --> 01:35:24,000
that the the model that we're using for

2624
01:35:24,000 --> 01:35:25,600
connect

2625
01:35:25,600 --> 01:35:26,639
here

2626
01:35:26,639 --> 01:35:27,520
is

2627
01:35:27,520 --> 01:35:29,840
somewhat different than the model that

2628
01:35:29,840 --> 01:35:32,560
you might imagine for a classical http

2629
01:35:32,560 --> 01:35:34,000
proxy connect

2630
01:35:34,000 --> 01:35:34,800
where

2631
01:35:34,800 --> 01:35:36,639
there's a target that isn't really a

2632
01:35:36,639 --> 01:35:38,159
target because there's no resource

2633
01:35:38,159 --> 01:35:39,840
involved in any of any of the connect

2634
01:35:39,840 --> 01:35:41,760
stuff classically here we have a

2635
01:35:41,760 --> 01:35:44,080
resource we're making an http request to

2636
01:35:44,080 --> 01:35:45,920
a particular resource and the effect of

2637
01:35:45,920 --> 01:35:47,920
that request is to establish a web

2638
01:35:47,920 --> 01:35:50,400
transport session to that resource and

2639
01:35:50,400 --> 01:35:52,320
so having a redirect here makes a a

2640
01:35:52,320 --> 01:35:53,679
great deal of sense because it does fit

2641
01:35:53,679 --> 01:35:56,080
much more within the http model of

2642
01:35:56,080 --> 01:35:57,520
resources and

2643
01:35:57,520 --> 01:35:59,119
redirects and all those sorts of other

2644
01:35:59,119 --> 01:36:01,360
things so i think um that's why i lean

2645
01:36:01,360 --> 01:36:03,440
toward the must here more than anything

2646
01:36:03,440 --> 01:36:04,239
else

2647
01:36:04,239 --> 01:36:06,000
it doesn't make a lot of sense to have a

2648
01:36:06,000 --> 01:36:08,719
redirect for a connect you're right

2649
01:36:08,719 --> 01:36:11,520
because there's that

2650
01:36:11,520 --> 01:36:14,080
that's bizarre but connect is weird

2651
01:36:14,080 --> 01:36:15,760
in its native form

2652
01:36:15,760 --> 01:36:18,000
and this is what we're building here is

2653
01:36:18,000 --> 01:36:20,639
much less weird it's still a little bit

2654
01:36:20,639 --> 01:36:23,760
weird but it's much much less weird so

2655
01:36:23,760 --> 01:36:27,199
um i i think must

2656
01:36:35,840 --> 01:36:38,320
donald max i agree muster must not and i

2657
01:36:38,320 --> 01:36:40,000
also wanted to ask you said there was

2658
01:36:40,000 --> 01:36:41,520
weirdness that happened with web sockets

2659
01:36:41,520 --> 01:36:42,800
and redirects and i'm curious if you

2660
01:36:42,800 --> 01:36:46,480
could expand on that so i cannot i would

2661
01:36:46,480 --> 01:36:50,879
have to talk to people at w3c who

2662
01:36:56,960 --> 01:36:57,760
oh

2663
01:36:57,760 --> 01:37:00,400
okay we've drained the cue i'm

2664
01:37:00,400 --> 01:37:01,840
hearing

2665
01:37:01,840 --> 01:37:02,639
that

2666
01:37:02,639 --> 01:37:05,040
majority of the folks speaking want a

2667
01:37:05,040 --> 01:37:07,360
must or must not

2668
01:37:07,360 --> 01:37:08,639
and

2669
01:37:08,639 --> 01:37:10,719
i'm hearing

2670
01:37:10,719 --> 01:37:12,639
preference towards must

2671
01:37:12,639 --> 01:37:14,960
instead of must not

2672
01:37:14,960 --> 01:37:15,920
er

2673
01:37:15,920 --> 01:37:17,840
is going with must something that

2674
01:37:17,840 --> 01:37:20,800
everyone can live with uh i would prefer

2675
01:37:20,800 --> 01:37:22,880
to continue discussion on the issue

2676
01:37:22,880 --> 01:37:25,360
because i believe some of the people

2677
01:37:25,360 --> 01:37:28,639
who might have objection are not in zero

2678
01:37:28,639 --> 01:37:31,040
okay

2679
01:37:31,679 --> 01:37:34,880
so victor said that he

2680
01:37:34,880 --> 01:37:36,159
believes that some people who would

2681
01:37:36,159 --> 01:37:38,239
object are not in the room and he wants

2682
01:37:38,239 --> 01:37:40,320
to continue discussion so that makes

2683
01:37:40,320 --> 01:37:42,560
sense we don't have consensus here we'll

2684
01:37:42,560 --> 01:37:44,320
keep discussing on the list and i'm

2685
01:37:44,320 --> 01:37:46,000
going to give victor an action item to

2686
01:37:46,000 --> 01:37:48,719
get those folks to chime in because you

2687
01:37:48,719 --> 01:37:50,800
i suppose you know who to contact there

2688
01:37:50,800 --> 01:37:51,600
yeah

2689
01:37:51,600 --> 01:37:54,400
all right thank you

2690
01:37:57,199 --> 01:37:59,919
next slide

2691
01:38:01,040 --> 01:38:04,639
stream frame ordering so there is

2692
01:38:04,639 --> 01:38:07,520
so the way we do

2693
01:38:07,520 --> 01:38:09,920
unidirectional streams as we define a

2694
01:38:09,920 --> 01:38:12,159
stream type which is

2695
01:38:12,159 --> 01:38:14,000
just uh

2696
01:38:14,000 --> 01:38:14,960
okay

2697
01:38:14,960 --> 01:38:16,400
the way we do

2698
01:38:16,400 --> 01:38:18,400
unidirectional streams is we define a

2699
01:38:18,400 --> 01:38:20,159
specific stream type

2700
01:38:20,159 --> 01:38:22,960
uh so there is a stream type and then

2701
01:38:22,960 --> 01:38:24,560
there is the

2702
01:38:24,560 --> 01:38:26,480
web transport session id and then there

2703
01:38:26,480 --> 01:38:27,679
is payload

2704
01:38:27,679 --> 01:38:31,119
for bi-directional streams we

2705
01:38:31,119 --> 01:38:33,600
do not have stream types so we define a

2706
01:38:33,600 --> 01:38:35,360
special frame

2707
01:38:35,360 --> 01:38:37,600
that once you send that frame the rest

2708
01:38:37,600 --> 01:38:40,159
of the stream becomes

2709
01:38:40,159 --> 01:38:42,960
just web transport data stream

2710
01:38:42,960 --> 01:38:46,320
and there is a question of

2711
01:38:46,320 --> 01:38:49,119
whether we want to allow to send any

2712
01:38:49,119 --> 01:38:52,239
frames on the stream before

2713
01:38:52,239 --> 01:38:52,780
and

2714
01:38:52,780 --> 01:38:55,840
[Music]

2715
01:38:55,840 --> 01:38:59,320
do we want to be consistent between

2716
01:38:59,320 --> 01:39:01,119
unidirectional and bi-directional

2717
01:39:01,119 --> 01:39:03,199
streams

2718
01:39:03,199 --> 01:39:06,880
how if we are not consistent in life

2719
01:39:06,880 --> 01:39:09,600
do people have opinions because i know

2720
01:39:09,600 --> 01:39:11,679
that people have expressed opinions on

2721
01:39:11,679 --> 01:39:14,920
the issue

2722
01:39:28,719 --> 01:39:32,000
so if you if you allow other stuff on

2723
01:39:32,000 --> 01:39:34,400
one of these streams before you

2724
01:39:34,400 --> 01:39:36,080
mark it as being part of a web transport

2725
01:39:36,080 --> 01:39:37,600
session

2726
01:39:37,600 --> 01:39:39,520
someone's going to get confused

2727
01:39:39,520 --> 01:39:41,760
so

2728
01:39:41,760 --> 01:39:43,119
there's always a possibility that you

2729
01:39:43,119 --> 01:39:45,119
have code that essentially opens the

2730
01:39:45,119 --> 01:39:46,560
bi-directional stream looks for the

2731
01:39:46,560 --> 01:39:47,520
session

2732
01:39:47,520 --> 01:39:48,480
frame

2733
01:39:48,480 --> 01:39:50,320
and then switches

2734
01:39:50,320 --> 01:39:51,920
but it has a state machine that says

2735
01:39:51,920 --> 01:39:54,239
when the first frame comes in that will

2736
01:39:54,239 --> 01:39:55,840
determine what i

2737
01:39:55,840 --> 01:39:57,600
what what i do for

2738
01:39:57,600 --> 01:39:59,199
for subsequent frames on the stream that

2739
01:39:59,199 --> 01:40:01,360
will determine the status of the stream

2740
01:40:01,360 --> 01:40:04,800
if you allow other

2741
01:40:04,800 --> 01:40:06,960
frames on that stream

2742
01:40:06,960 --> 01:40:09,840
you mess with that logic pretty badly

2743
01:40:09,840 --> 01:40:11,760
is there any reason

2744
01:40:11,760 --> 01:40:13,840
you would want something on one of these

2745
01:40:13,840 --> 01:40:15,199
streams

2746
01:40:15,199 --> 01:40:18,639
that isn't web transport session

2747
01:40:18,639 --> 01:40:21,280
as far as we can tell there is no

2748
01:40:21,280 --> 01:40:24,960
particularly compelling proposals

2749
01:40:24,960 --> 01:40:26,239
that's fine

2750
01:40:26,239 --> 01:40:28,080
because if if there was say a headers

2751
01:40:28,080 --> 01:40:30,080
frame there there's a very good chance

2752
01:40:30,080 --> 01:40:31,840
that most servers will look at that and

2753
01:40:31,840 --> 01:40:33,520
go oh that's a request

2754
01:40:33,520 --> 01:40:36,320
and then start treating it like one at

2755
01:40:36,320 --> 01:40:37,520
which point

2756
01:40:37,520 --> 01:40:38,880
things will go poorly for everyone

2757
01:40:38,880 --> 01:40:41,520
involved yeah so

2758
01:40:41,520 --> 01:40:45,760
i guess the status quo is

2759
01:40:45,760 --> 01:40:47,199
for

2760
01:40:47,199 --> 01:40:49,440
uni-directional it's already effectively

2761
01:40:49,440 --> 01:40:51,679
forbidden because there's no provision

2762
01:40:51,679 --> 01:40:54,480
in the wireframing and the question is

2763
01:40:54,480 --> 01:40:57,520
do we ban it for bi-directional requests

2764
01:40:57,520 --> 01:40:59,440
and so far what i hear is suggestions

2765
01:40:59,440 --> 01:41:01,280
that we should yeah i think we very much

2766
01:41:01,280 --> 01:41:03,119
should ban it unless we've got a very

2767
01:41:03,119 --> 01:41:04,960
strong reason otherwise

2768
01:41:04,960 --> 01:41:06,560
it really would complicate the

2769
01:41:06,560 --> 01:41:09,040
implementation at endpoints if we if we

2770
01:41:09,040 --> 01:41:11,600
allowed for other stuff to appear

2771
01:41:11,600 --> 01:41:14,560
all right thank you

2772
01:41:14,560 --> 01:41:16,560
clarification question for you martin

2773
01:41:16,560 --> 01:41:18,639
are you saying for all frames including

2774
01:41:18,639 --> 01:41:21,520
future extension frames or do we or do

2775
01:41:21,520 --> 01:41:23,840
we punt that question for later i'm

2776
01:41:23,840 --> 01:41:25,760
going to say everything i think i think

2777
01:41:25,760 --> 01:41:29,119
you want to have a dis disposition frame

2778
01:41:29,119 --> 01:41:30,960
this basically establishes what the

2779
01:41:30,960 --> 01:41:32,560
stream is

2780
01:41:32,560 --> 01:41:34,000
and will

2781
01:41:34,000 --> 01:41:36,239
ultimately determine what extensions are

2782
01:41:36,239 --> 01:41:38,400
are available or not now we may regret

2783
01:41:38,400 --> 01:41:40,159
that at which point we can revise this

2784
01:41:40,159 --> 01:41:42,800
specification but i'm um fairly

2785
01:41:42,800 --> 01:41:44,080
confident that when you have a

2786
01:41:44,080 --> 01:41:46,400
disposition thing that's

2787
01:41:46,400 --> 01:41:47,679
definitive

2788
01:41:47,679 --> 01:41:50,000
and you want to have that

2789
01:41:50,000 --> 01:41:51,360
first

2790
01:41:51,360 --> 01:41:53,599
all right

2791
01:41:56,480 --> 01:41:58,800
alan frindle um

2792
01:41:58,800 --> 01:42:00,960
so my first opinion is they should we

2793
01:42:00,960 --> 01:42:02,800
should they should be the same

2794
01:42:02,800 --> 01:42:04,639
like whatever we do for bi-directional

2795
01:42:04,639 --> 01:42:06,639
we should do for unidirectional

2796
01:42:06,639 --> 01:42:09,440
um i think the point that martin was

2797
01:42:09,440 --> 01:42:11,440
making about

2798
01:42:11,440 --> 01:42:13,760
well if we did this then

2799
01:42:13,760 --> 01:42:16,880
people might assume that it's different

2800
01:42:16,880 --> 01:42:18,639
or have buggy logic i'm not sure i

2801
01:42:18,639 --> 01:42:19,920
totally buy that like if the

2802
01:42:19,920 --> 01:42:21,440
specification says

2803
01:42:21,440 --> 01:42:24,800
that web transport is a series of frames

2804
01:42:24,800 --> 01:42:26,400
followed by a frame which begins the

2805
01:42:26,400 --> 01:42:28,480
unframed part then people will write

2806
01:42:28,480 --> 01:42:30,480
parsers that handle that and if they

2807
01:42:30,480 --> 01:42:32,000
don't they have they're not following

2808
01:42:32,000 --> 01:42:34,000
specifications and

2809
01:42:34,000 --> 01:42:36,239
i don't know we can't make people follow

2810
01:42:36,239 --> 01:42:38,480
specifications i guess but

2811
01:42:38,480 --> 01:42:40,080
um

2812
01:42:40,080 --> 01:42:41,760
in terms of i don't have a super

2813
01:42:41,760 --> 01:42:44,159
compelling use case either so i'm i'm

2814
01:42:44,159 --> 01:42:45,440
not going to lie down in the road here

2815
01:42:45,440 --> 01:42:47,760
but uh you know that i think just the

2816
01:42:47,760 --> 01:42:49,840
issue mentions either greece or

2817
01:42:49,840 --> 01:42:52,000
potentially priority i think

2818
01:42:52,000 --> 01:42:54,239
um the ability to have extensions in the

2819
01:42:54,239 --> 01:42:55,600
future is

2820
01:42:55,600 --> 01:42:57,760
easier if we say if there's a series of

2821
01:42:57,760 --> 01:42:59,440
frames followed by the beginning of

2822
01:42:59,440 --> 01:43:00,800
unframed data

2823
01:43:00,800 --> 01:43:03,679
uh otherwise you would have to have a

2824
01:43:03,679 --> 01:43:05,199
different

2825
01:43:05,199 --> 01:43:06,480
way of

2826
01:43:06,480 --> 01:43:07,440
you'd have a different kind of web

2827
01:43:07,440 --> 01:43:08,960
transport session frame in the future to

2828
01:43:08,960 --> 01:43:11,040
support that um

2829
01:43:11,040 --> 01:43:12,960
so anyway but i'm i'm i'm not super

2830
01:43:12,960 --> 01:43:15,440
passionate

2831
01:43:17,520 --> 01:43:19,760
uh luke here quick question do we have

2832
01:43:19,760 --> 01:43:21,520
similar wording for the header frame

2833
01:43:21,520 --> 01:43:22,639
because i think martin brought up a

2834
01:43:22,639 --> 01:43:24,719
point there that if a client assumes the

2835
01:43:24,719 --> 01:43:26,400
header frame is first

2836
01:43:26,400 --> 01:43:27,840
but is that prohibited already or is

2837
01:43:27,840 --> 01:43:29,520
that just left up

2838
01:43:29,520 --> 01:43:30,880
right because we should probably just

2839
01:43:30,880 --> 01:43:33,199
follow what hp3 does and if it leaves it

2840
01:43:33,199 --> 01:43:36,560
open then we can leave it open

2841
01:43:36,560 --> 01:43:38,159
yeah i see my coming and answer the

2842
01:43:38,159 --> 01:43:39,840
question

2843
01:43:39,840 --> 01:43:41,360
yeah so it's a little more complicated

2844
01:43:41,360 --> 01:43:42,400
than that

2845
01:43:42,400 --> 01:43:45,199
um because h3 does allow for the

2846
01:43:45,199 --> 01:43:46,639
possibility of other frames to be

2847
01:43:46,639 --> 01:43:49,440
introduced in the future so what h3 does

2848
01:43:49,440 --> 01:43:51,040
is

2849
01:43:51,040 --> 01:43:53,679
when the spec says that a certain frame

2850
01:43:53,679 --> 01:43:55,280
must be first

2851
01:43:55,280 --> 01:43:57,119
which for example the settings frame on

2852
01:43:57,119 --> 01:43:58,560
the control stream

2853
01:43:58,560 --> 01:44:01,040
then that exact frame must be first with

2854
01:44:01,040 --> 01:44:02,800
nothing else before it

2855
01:44:02,800 --> 01:44:04,000
but when we're talking about the

2856
01:44:04,000 --> 01:44:05,600
ordering of headers and data on the

2857
01:44:05,600 --> 01:44:07,520
request stream

2858
01:44:07,520 --> 01:44:09,520
it's all about sequence the headers must

2859
01:44:09,520 --> 01:44:11,679
come before you see any data if you see

2860
01:44:11,679 --> 01:44:13,679
data before headers that's an error but

2861
01:44:13,679 --> 01:44:15,840
if you see something else before headers

2862
01:44:15,840 --> 01:44:18,400
that's potentially okay

2863
01:44:18,400 --> 01:44:21,839
and if you don't know what it is toss it

2864
01:44:23,840 --> 01:44:26,080
so i think i think the challenge that um

2865
01:44:26,080 --> 01:44:28,800
we're facing here is that http 3

2866
01:44:28,800 --> 01:44:30,400
assumes

2867
01:44:30,400 --> 01:44:32,159
very strongly that the

2868
01:44:32,159 --> 01:44:33,920
the streams that it has the the

2869
01:44:33,920 --> 01:44:34,880
bi-directional streams that are

2870
01:44:34,880 --> 01:44:36,560
established are for the purposes of

2871
01:44:36,560 --> 01:44:38,639
requests it doesn't really contemplate

2872
01:44:38,639 --> 01:44:40,560
the possibility that they could be a

2873
01:44:40,560 --> 01:44:42,239
different type of thing

2874
01:44:42,239 --> 01:44:44,639
and so when it doesn't say anything

2875
01:44:44,639 --> 01:44:46,400
about the ordering

2876
01:44:46,400 --> 01:44:48,239
it does that under the assumption that

2877
01:44:48,239 --> 01:44:50,159
it that it's already been determined

2878
01:44:50,159 --> 01:44:51,520
that it's a request stream and and

2879
01:44:51,520 --> 01:44:52,880
that's okay

2880
01:44:52,880 --> 01:44:56,560
and so if request stream is the default

2881
01:44:56,560 --> 01:44:59,520
and the assumption that h3 makes

2882
01:44:59,520 --> 01:45:01,600
if we do anything other than then force

2883
01:45:01,600 --> 01:45:03,600
this to be the first thing on the stream

2884
01:45:03,600 --> 01:45:04,960
we're messing with that assumption

2885
01:45:04,960 --> 01:45:06,000
because

2886
01:45:06,000 --> 01:45:06,800
um

2887
01:45:06,800 --> 01:45:08,880
that um

2888
01:45:08,880 --> 01:45:10,639
an endpoint that's implementing this

2889
01:45:10,639 --> 01:45:12,080
under the same assumption will look at

2890
01:45:12,080 --> 01:45:14,560
things and see oh this is an arbitrary

2891
01:45:14,560 --> 01:45:16,639
frame that i don't understand

2892
01:45:16,639 --> 01:45:19,600
i'll this must be a request stream

2893
01:45:19,600 --> 01:45:21,679
um because of course you could add

2894
01:45:21,679 --> 01:45:23,679
new frame types that

2895
01:45:23,679 --> 01:45:25,440
are extensions without any prior

2896
01:45:25,440 --> 01:45:26,639
negotiation

2897
01:45:26,639 --> 01:45:28,480
so um

2898
01:45:28,480 --> 01:45:29,360
we're

2899
01:45:29,360 --> 01:45:31,360
basically punt if we if we allow other

2900
01:45:31,360 --> 01:45:32,960
things we're essentially punting it

2901
01:45:32,960 --> 01:45:35,280
across to the h3 assumption

2902
01:45:35,280 --> 01:45:37,280
so i i think we need the disposition to

2903
01:45:37,280 --> 01:45:40,159
be up up front and unambiguous and and

2904
01:45:40,159 --> 01:45:41,679
very clear otherwise we'll end up in

2905
01:45:41,679 --> 01:45:42,480
that

2906
01:45:42,480 --> 01:45:44,960
complicated place

2907
01:45:44,960 --> 01:45:46,560
oh

2908
01:45:46,560 --> 01:45:48,719
oh

2909
01:45:48,719 --> 01:45:50,880
did you want to say something

2910
01:45:50,880 --> 01:45:52,560
i just want to say that i mean there's a

2911
01:45:52,560 --> 01:45:54,239
way to have what martin is suggesting

2912
01:45:54,239 --> 01:45:56,800
and which is you have a frame up front

2913
01:45:56,800 --> 01:45:58,000
the first thing that says this is a web

2914
01:45:58,000 --> 01:46:00,000
transport session but it's a frame which

2915
01:46:00,000 --> 01:46:01,840
does not start unframedness and then you

2916
01:46:01,840 --> 01:46:03,840
have potentially more frames and you

2917
01:46:03,840 --> 01:46:05,440
have another frame which says okay but

2918
01:46:05,440 --> 01:46:07,360
now we're starting the unframed part of

2919
01:46:07,360 --> 01:46:09,360
the stream so you could do it that way

2920
01:46:09,360 --> 01:46:11,280
but i think you could also

2921
01:46:11,280 --> 01:46:12,639
that was what it would look like if we

2922
01:46:12,639 --> 01:46:14,000
punted this to some later version when

2923
01:46:14,000 --> 01:46:15,920
we have a compelling use case

2924
01:46:15,920 --> 01:46:17,119
so i think that's probably what we

2925
01:46:17,119 --> 01:46:20,800
should do yeah i i think we don't yeah i

2926
01:46:20,800 --> 01:46:22,000
think the

2927
01:46:22,000 --> 01:46:23,840
key point is we don't actually have a

2928
01:46:23,840 --> 01:46:26,480
compelling use case for frames and web

2929
01:46:26,480 --> 01:46:28,480
transport data streams so

2930
01:46:28,480 --> 01:46:29,280
uh

2931
01:46:29,280 --> 01:46:30,400
and

2932
01:46:30,400 --> 01:46:33,360
i believe that if we require web

2933
01:46:33,360 --> 01:46:36,159
transport session to be in front

2934
01:46:36,159 --> 01:46:38,719
that actually would simplify

2935
01:46:38,719 --> 01:46:41,119
implementations including the one in our

2936
01:46:41,119 --> 01:46:42,719
code so there are some practical

2937
01:46:42,719 --> 01:46:44,560
advantages to that

2938
01:46:44,560 --> 01:46:46,639
uh

2939
01:46:46,639 --> 01:46:49,199
do you want me to jump in victor so

2940
01:46:49,199 --> 01:46:51,840
i'm hearing from the room that

2941
01:46:51,840 --> 01:46:53,840
folks want to do the same thing for

2942
01:46:53,840 --> 01:46:55,600
united directional and bi-directional

2943
01:46:55,600 --> 01:46:57,360
for consistency

2944
01:46:57,360 --> 01:46:59,520
and i'm hearing that folks are now

2945
01:46:59,520 --> 01:47:02,159
leaning towards disallowing any frames

2946
01:47:02,159 --> 01:47:05,360
but this one to start

2947
01:47:05,360 --> 01:47:09,719
does anyone object to that resolution

2948
01:47:10,880 --> 01:47:12,000
amazing

2949
01:47:12,000 --> 01:47:13,920
all right i'll write that up in the

2950
01:47:13,920 --> 01:47:15,920
issue thank you

2951
01:47:15,920 --> 01:47:19,199
oh all right next slide

2952
01:47:19,840 --> 01:47:22,480
this one is a more interesting so there

2953
01:47:22,480 --> 01:47:24,159
is this problem where

2954
01:47:24,159 --> 01:47:27,040
we open a web transport data stream

2955
01:47:27,040 --> 01:47:29,600
and we can reset it before

2956
01:47:29,600 --> 01:47:31,040
the peer

2957
01:47:31,040 --> 01:47:32,960
knows it's a web transport data stream

2958
01:47:32,960 --> 01:47:35,520
and can associate it with it

2959
01:47:35,520 --> 01:47:37,840
uh

2960
01:47:37,840 --> 01:47:41,679
so the problem is here is that once that

2961
01:47:41,679 --> 01:47:44,719
happens is uh

2962
01:47:44,719 --> 01:47:46,639
let's say we do that as a client on the

2963
01:47:46,639 --> 01:47:49,199
server there is a stream that is half

2964
01:47:49,199 --> 01:47:51,199
open

2965
01:47:51,199 --> 01:47:51,810
and

2966
01:47:51,810 --> 01:47:53,840
[Music]

2967
01:47:53,840 --> 01:47:55,040
it's now

2968
01:47:55,040 --> 01:47:57,040
in a state where it's not clear what's

2969
01:47:57,040 --> 01:47:59,280
supposed to happen to it because the

2970
01:47:59,280 --> 01:48:01,199
client has reset it

2971
01:48:01,199 --> 01:48:03,280
uh and the issue is what happens to the

2972
01:48:03,280 --> 01:48:05,360
other side of the stream

2973
01:48:05,360 --> 01:48:07,840
and i think my answer is this is not

2974
01:48:07,840 --> 01:48:09,040
really a

2975
01:48:09,040 --> 01:48:11,440
web transportation person because that

2976
01:48:11,440 --> 01:48:13,119
could happen to

2977
01:48:13,119 --> 01:48:16,960
anything else in http free

2978
01:48:16,960 --> 01:48:20,000
and uh

2979
01:48:20,320 --> 01:48:23,199
so the question

2980
01:48:23,199 --> 01:48:25,199
i don't feel like we need to specify

2981
01:48:25,199 --> 01:48:27,280
anything i feel like implementations of

2982
01:48:27,280 --> 01:48:29,600
http 3 already have a way of dealing

2983
01:48:29,600 --> 01:48:30,880
with that i'm not sure if they're

2984
01:48:30,880 --> 01:48:33,840
explicitly specified

2985
01:48:34,000 --> 01:48:36,960
uh mike bishop so h3 has an error that

2986
01:48:36,960 --> 01:48:39,119
basically boils down to i didn't see

2987
01:48:39,119 --> 01:48:41,520
enough of your request to act on it

2988
01:48:41,520 --> 01:48:44,000
go away

2989
01:48:44,239 --> 01:48:48,000
so i mean in this case it's very similar

2990
01:48:48,000 --> 01:48:48,430
um

2991
01:48:48,430 --> 01:48:49,600
[Music]

2992
01:48:49,600 --> 01:48:52,560
i if http has provision for that i feel

2993
01:48:52,560 --> 01:48:56,639
like we don't even need to spell it out

2994
01:48:56,639 --> 01:48:58,800
the stream terminated before a complete

2995
01:48:58,800 --> 01:49:01,119
request was read i believe is the way

2996
01:49:01,119 --> 01:49:03,679
it's phrased

2997
01:49:06,719 --> 01:49:09,360
uh eric can your apple so

2998
01:49:09,360 --> 01:49:11,360
this also could be solved by the thing

2999
01:49:11,360 --> 01:49:13,440
that i think alan was talking about

3000
01:49:13,440 --> 01:49:15,760
if we wanted to have an explicit message

3001
01:49:15,760 --> 01:49:18,000
that goes on the control stream

3002
01:49:18,000 --> 01:49:20,560
that says like hey you need to bill me

3003
01:49:20,560 --> 01:49:22,880
for this one this is essentially the

3004
01:49:22,880 --> 01:49:24,800
same problem right

3005
01:49:24,800 --> 01:49:26,800
you're saying hey i've got this stream

3006
01:49:26,800 --> 01:49:29,199
it's hanging out and i don't i don't

3007
01:49:29,199 --> 01:49:31,119
even know if it was web transport if it

3008
01:49:31,119 --> 01:49:32,320
is i don't know which web transport

3009
01:49:32,320 --> 01:49:35,119
session it was what the heck

3010
01:49:35,119 --> 01:49:36,639
right so that there is an opportunity to

3011
01:49:36,639 --> 01:49:39,599
have a way to kind of catch up with that

3012
01:49:39,599 --> 01:49:42,320
to to kind of have it resolve those

3013
01:49:42,320 --> 01:49:44,239
lingering inconsistencies and leaks of

3014
01:49:44,239 --> 01:49:45,280
things

3015
01:49:45,280 --> 01:49:47,840
it's not

3016
01:49:48,080 --> 01:49:50,719
not trivial i think to write text that's

3017
01:49:50,719 --> 01:49:52,400
good for that but

3018
01:49:52,400 --> 01:49:54,320
it would solve this and the other

3019
01:49:54,320 --> 01:49:55,920
problem so maybe we're approaching the

3020
01:49:55,920 --> 01:49:58,080
point where it's worth doing yeah

3021
01:49:58,080 --> 01:50:00,560
i think i could actually solve that

3022
01:50:00,560 --> 01:50:03,280
because you cannot actually reference

3023
01:50:03,280 --> 01:50:05,280
the string numbers

3024
01:50:05,280 --> 01:50:08,159
inside your

3025
01:50:08,400 --> 01:50:11,400
recent

3026
01:50:12,480 --> 01:50:13,360
all right

3027
01:50:13,360 --> 01:50:15,360
um mt do you have a reason to jump the

3028
01:50:15,360 --> 01:50:17,520
queue here yeah yeah because victor said

3029
01:50:17,520 --> 01:50:21,260
something that's wrong okay go ahead

3030
01:50:21,260 --> 01:50:24,880
[Laughter]

3031
01:50:24,880 --> 01:50:27,199
um so so once you create the string

3032
01:50:27,199 --> 01:50:28,400
you'll know what the stream identifier

3033
01:50:28,400 --> 01:50:29,119
is

3034
01:50:29,119 --> 01:50:31,199
and so you can use it

3035
01:50:31,199 --> 01:50:34,000
it's true but remember if you're

3036
01:50:34,000 --> 01:50:35,840
translating each phrase to those are not

3037
01:50:35,840 --> 01:50:38,840
consistent

3038
01:50:39,360 --> 01:50:41,199
we're talking about h3 though h3 has

3039
01:50:41,199 --> 01:50:45,040
this problem h2 doesn't okay

3040
01:50:47,760 --> 01:50:49,920
alan fendell so i'm curious about what

3041
01:50:49,920 --> 01:50:52,719
mike said it's sort of if i'm a server

3042
01:50:52,719 --> 01:50:54,400
and like the only thing i receive is a

3043
01:50:54,400 --> 01:50:55,760
reset stream

3044
01:50:55,760 --> 01:50:58,239
and a stream number

3045
01:50:58,239 --> 01:50:59,520
first of all i'm not sure everybody's

3046
01:50:59,520 --> 01:51:02,080
quick api would even notify the

3047
01:51:02,080 --> 01:51:03,920
application that that happened

3048
01:51:03,920 --> 01:51:08,239
i don't know maybe they would um

3049
01:51:10,480 --> 01:51:12,400
yeah so i'm i'm a little bit concerned

3050
01:51:12,400 --> 01:51:14,080
if that's the only thing the server says

3051
01:51:14,080 --> 01:51:16,080
it'll have a chance to send the like oh

3052
01:51:16,080 --> 01:51:18,320
you sent me this stream and i don't know

3053
01:51:18,320 --> 01:51:21,440
what it was um

3054
01:51:21,440 --> 01:51:23,679
also what

3055
01:51:23,679 --> 01:51:26,320
if that was a unidirectional stream

3056
01:51:26,320 --> 01:51:28,159
how would you even well this is only for

3057
01:51:28,159 --> 01:51:30,639
bi-direction well this is for both

3058
01:51:30,639 --> 01:51:32,480
it has to be bi-directional this is the

3059
01:51:32,480 --> 01:51:34,639
bi-directional case okay so you have a

3060
01:51:34,639 --> 01:51:36,880
way to send the answer there okay

3061
01:51:36,880 --> 01:51:37,920
um

3062
01:51:37,920 --> 01:51:40,080
okay yeah and so i think i mean i'll

3063
01:51:40,080 --> 01:51:41,440
admit so yeah like i said this is we

3064
01:51:41,440 --> 01:51:43,040
mentioned earlier this is how qpac does

3065
01:51:43,040 --> 01:51:45,040
stuff which is like just it puts the

3066
01:51:45,040 --> 01:51:46,320
stream number on the other stream and

3067
01:51:46,320 --> 01:51:49,119
it's like hey this thing got reset so

3068
01:51:49,119 --> 01:51:51,760
the accounting can be taken care of

3069
01:51:51,760 --> 01:51:53,040
it's a little bit

3070
01:51:53,040 --> 01:51:55,119
not wonderful that it's this actual

3071
01:51:55,119 --> 01:51:57,360
quick stream id floating around in qpack

3072
01:51:57,360 --> 01:51:59,440
space but that is

3073
01:51:59,440 --> 01:52:03,839
you know with just we did it that way

3074
01:52:04,480 --> 01:52:05,679
so

3075
01:52:05,679 --> 01:52:06,639
i

3076
01:52:06,639 --> 01:52:08,639
and and correct me if i'm wrong uh

3077
01:52:08,639 --> 01:52:10,480
martin seaman uh

3078
01:52:10,480 --> 01:52:12,719
since you filed the issue

3079
01:52:12,719 --> 01:52:14,880
like this doesn't sound specific to web

3080
01:52:14,880 --> 01:52:17,360
transport for me um

3081
01:52:17,360 --> 01:52:20,239
it's a bi-directional stream so in h3

3082
01:52:20,239 --> 01:52:21,440
already if the client opens a

3083
01:52:21,440 --> 01:52:23,920
bi-directional stream and resets it

3084
01:52:23,920 --> 01:52:26,320
the server could in theory keep it open

3085
01:52:26,320 --> 01:52:27,760
forever

3086
01:52:27,760 --> 01:52:30,880
but that would be silly uh i'm pretty

3087
01:52:30,880 --> 01:52:32,719
sure i mean i should check what our

3088
01:52:32,719 --> 01:52:34,480
implementation does but the correct

3089
01:52:34,480 --> 01:52:36,080
thing to do is go

3090
01:52:36,080 --> 01:52:37,840
whatever kill this thing

3091
01:52:37,840 --> 01:52:40,239
um otherwise that sounds like a resource

3092
01:52:40,239 --> 01:52:41,679
exhaustion attack

3093
01:52:41,679 --> 01:52:44,679
um

3094
01:52:45,040 --> 01:52:46,880
therefore if this isn't specific to web

3095
01:52:46,880 --> 01:52:48,400
transfer i don't think anything needs to

3096
01:52:48,400 --> 01:52:50,800
be done in the web transport spec and

3097
01:52:50,800 --> 01:52:55,159
this can just be handled by h3

3098
01:52:55,720 --> 01:52:58,899
[Music]

3099
01:52:59,280 --> 01:53:01,760
so i i think this is a web transporter

3100
01:53:01,760 --> 01:53:03,280
specific problem

3101
01:53:03,280 --> 01:53:05,440
because when the client creates the web

3102
01:53:05,440 --> 01:53:06,960
transport stream

3103
01:53:06,960 --> 01:53:08,320
it creates it under the understanding

3104
01:53:08,320 --> 01:53:10,159
that it's creating it within

3105
01:53:10,159 --> 01:53:12,400
that particular session now we're not

3106
01:53:12,400 --> 01:53:14,639
doing if we decide not to do any stream

3107
01:53:14,639 --> 01:53:16,080
limiting and whatever else we don't need

3108
01:53:16,080 --> 01:53:18,000
to deal with that particular problem

3109
01:53:18,000 --> 01:53:19,920
but it does create on the server side a

3110
01:53:19,920 --> 01:53:22,639
stream that the server can

3111
01:53:22,639 --> 01:53:24,080
send on

3112
01:53:24,080 --> 01:53:27,440
and it needs to know

3113
01:53:27,440 --> 01:53:29,440
it needs to know what it

3114
01:53:29,440 --> 01:53:31,119
needs to do with that that thing it

3115
01:53:31,119 --> 01:53:33,199
might want to send on it because

3116
01:53:33,199 --> 01:53:34,960
i don't know um maybe this is the

3117
01:53:34,960 --> 01:53:36,800
protocol that you develop you

3118
01:53:36,800 --> 01:53:38,800
you create a stream and reset your end

3119
01:53:38,800 --> 01:53:40,159
and then expect the other end to do

3120
01:53:40,159 --> 01:53:42,639
something with it i don't know um

3121
01:53:42,639 --> 01:53:44,960
so i think eric's suggestion was

3122
01:53:44,960 --> 01:53:47,599
perfectly good here we need

3123
01:53:47,599 --> 01:53:49,440
we could we can resolve

3124
01:53:49,440 --> 01:53:51,119
the problem here

3125
01:53:51,119 --> 01:53:53,199
um whether or not we

3126
01:53:53,199 --> 01:53:54,800
want to do the stream level accounting

3127
01:53:54,800 --> 01:53:56,880
stuff we can still solve it in in that

3128
01:53:56,880 --> 01:53:59,360
way and it's probably still worth doing

3129
01:53:59,360 --> 01:54:01,599
is is to do exactly what um allen was

3130
01:54:01,599 --> 01:54:04,239
suggesting as we did with qpack just say

3131
01:54:04,239 --> 01:54:06,320
oh by the way i reset this thing

3132
01:54:06,320 --> 01:54:10,000
reset's fairly uncommon um

3133
01:54:10,000 --> 01:54:11,360
we'll still need to send the resets

3134
01:54:11,360 --> 01:54:12,639
because that's how

3135
01:54:12,639 --> 01:54:15,679
quick expects us to behave but um

3136
01:54:15,679 --> 01:54:17,760
having a having a message saying oh by

3137
01:54:17,760 --> 01:54:19,280
the way this the stream was created and

3138
01:54:19,280 --> 01:54:21,040
reset now you can connect it up with

3139
01:54:21,040 --> 01:54:22,480
your session is probably something

3140
01:54:22,480 --> 01:54:24,000
that's worthwhile having

3141
01:54:24,000 --> 01:54:27,199
just so that everything runs

3142
01:54:27,199 --> 01:54:28,159
neatly

3143
01:54:28,159 --> 01:54:29,679
and everything can be accounted for

3144
01:54:29,679 --> 01:54:31,440
properly

3145
01:54:31,440 --> 01:54:33,599
yeah we have about six more minutes in

3146
01:54:33,599 --> 01:54:36,480
five slides so we might want to limit uh

3147
01:54:36,480 --> 01:54:39,280
the cube from here on out i think

3148
01:54:39,280 --> 01:54:41,199
i agree thanks for putting that up

3149
01:54:41,199 --> 01:54:42,560
bernard all right alan if you could make

3150
01:54:42,560 --> 01:54:44,159
it quick yeah i'll be quick i just i

3151
01:54:44,159 --> 01:54:45,679
think what martin said or someone just

3152
01:54:45,679 --> 01:54:46,960
said reminded me that like what would

3153
01:54:46,960 --> 01:54:49,280
happen if all he received is a reset and

3154
01:54:49,280 --> 01:54:51,440
then the server was like sent to an http

3155
01:54:51,440 --> 01:54:53,360
error page for example onto a web

3156
01:54:53,360 --> 01:54:54,719
transport stream on the other side that

3157
01:54:54,719 --> 01:54:56,239
might be very unexpected or do very

3158
01:54:56,239 --> 01:54:57,760
weird things so that's probably not what

3159
01:54:57,760 --> 01:54:59,760
we want

3160
01:54:59,760 --> 01:55:02,000
okay so

3161
01:55:02,000 --> 01:55:04,560
i'm hearing a proposal of

3162
01:55:04,560 --> 01:55:06,239
biting that bullet and having that

3163
01:55:06,239 --> 01:55:08,239
capsule that makes the

3164
01:55:08,239 --> 01:55:10,480
the

3165
01:55:10,480 --> 01:55:13,360
web transport session attached to a

3166
01:55:13,360 --> 01:55:16,560
reset reliable

3167
01:55:16,560 --> 01:55:18,400
does that resol

3168
01:55:18,400 --> 01:55:22,159
does anyone object to that resolution

3169
01:55:23,760 --> 01:55:24,960
sweet

3170
01:55:24,960 --> 01:55:27,280
awesome

3171
01:55:30,840 --> 01:55:34,159
uh okay so i think this is the last of

3172
01:55:34,159 --> 01:55:36,239
the actual issues is

3173
01:55:36,239 --> 01:55:38,239
we do not actually describe how we

3174
01:55:38,239 --> 01:55:40,239
expect the web transport section to be

3175
01:55:40,239 --> 01:55:41,599
closed

3176
01:55:41,599 --> 01:55:44,719
uh there have been a couple of proposals

3177
01:55:44,719 --> 01:55:47,280
floating around one of them is

3178
01:55:47,280 --> 01:55:49,679
you sends a closed capsule you send the

3179
01:55:49,679 --> 01:55:51,280
fin and then

3180
01:55:51,280 --> 01:55:54,080
some points appear responds with a fin

3181
01:55:54,080 --> 01:55:57,280
uh and other is like you send capsules

3182
01:55:57,280 --> 01:55:59,220
and venus and stop sending

3183
01:55:59,220 --> 01:56:02,430
[Music]

3184
01:56:02,719 --> 01:56:05,599
the people have preference between those

3185
01:56:05,599 --> 01:56:10,520
two i have a mild preference for one

3186
01:56:15,360 --> 01:56:18,239
which one do you prefer victor uh

3187
01:56:18,239 --> 01:56:20,000
i prefer one

3188
01:56:20,000 --> 01:56:21,840
i think you mean stop sending by the way

3189
01:56:21,840 --> 01:56:23,440
oh which one

3190
01:56:23,440 --> 01:56:25,440
there's no stop waiting

3191
01:56:25,440 --> 01:56:27,199
oh i said

3192
01:56:27,199 --> 01:56:28,880
that's a typo

3193
01:56:28,880 --> 01:56:30,320
uh

3194
01:56:30,320 --> 01:56:33,199
yes uh

3195
01:56:33,199 --> 01:56:34,960
either of those would require you to

3196
01:56:34,960 --> 01:56:37,599
have a timer to eventually tear the

3197
01:56:37,599 --> 01:56:40,239
entire thing down if the peer does not

3198
01:56:40,239 --> 01:56:43,239
respond

3199
01:56:48,480 --> 01:56:50,400
so martin seaman says off the mic

3200
01:56:50,400 --> 01:56:53,920
proposal to not need a timer

3201
01:56:53,920 --> 01:56:55,119
i don't think

3202
01:56:55,119 --> 01:56:57,119
why do you need a timer

3203
01:56:57,119 --> 01:56:59,760
oh you need a timer

3204
01:56:59,760 --> 01:57:00,960
so

3205
01:57:00,960 --> 01:57:02,800
i'm trying to remember

3206
01:57:02,800 --> 01:57:05,040
all right we definitely need a timer in

3207
01:57:05,040 --> 01:57:08,000
case we will have only one

3208
01:57:08,000 --> 01:57:10,239
session on connection because if you

3209
01:57:10,239 --> 01:57:11,920
only have one session on connection you

3210
01:57:11,920 --> 01:57:13,440
need to tear down that connection that's

3211
01:57:13,440 --> 01:57:16,080
why i have a timer

3212
01:57:16,080 --> 01:57:18,800
oh i suspect when you have multiple

3213
01:57:18,800 --> 01:57:20,159
sessions

3214
01:57:20,159 --> 01:57:22,800
uh you can wait and you just lead to

3215
01:57:22,800 --> 01:57:24,400
resource exhaustion if you never send

3216
01:57:24,400 --> 01:57:27,199
the finn in the response

3217
01:57:27,199 --> 01:57:30,000
alan fendell i guess my question is

3218
01:57:30,000 --> 01:57:32,159
do web transport sessions not normally

3219
01:57:32,159 --> 01:57:34,159
have a timer is there not a concept of

3220
01:57:34,159 --> 01:57:35,920
an idle timeout it's just completely

3221
01:57:35,920 --> 01:57:39,520
open until the other side closes uh yes

3222
01:57:39,520 --> 01:57:41,280
like because we have no idea what the

3223
01:57:41,280 --> 01:57:42,960
application wants maybe application

3224
01:57:42,960 --> 01:57:45,520
wants to push notifications once every

3225
01:57:45,520 --> 01:57:47,280
five minutes

3226
01:57:47,280 --> 01:57:50,280
okay

3227
01:57:53,840 --> 01:57:55,199
okay so

3228
01:57:55,199 --> 01:57:56,960
do you have a propos

3229
01:57:56,960 --> 01:57:58,719
resolution you prefer that you want to

3230
01:57:58,719 --> 01:58:00,800
propose to the working group victor uh i

3231
01:58:00,800 --> 01:58:01,920
would just

3232
01:58:01,920 --> 01:58:04,400
write in proposal one explicitly

3233
01:58:04,400 --> 01:58:07,199
proposal one

3234
01:58:07,199 --> 01:58:10,400
unless people have strong reasons unless

3235
01:58:10,400 --> 01:58:12,320
people have to prefer reasons to prefer

3236
01:58:12,320 --> 01:58:15,679
proposal to to purpose a lot

3237
01:58:18,480 --> 01:58:22,000
let's do this you go first

3238
01:58:23,679 --> 01:58:24,960
and reminder to keep it true we're

3239
01:58:24,960 --> 01:58:26,560
almost out of time

3240
01:58:26,560 --> 01:58:28,960
can you explain why you prefer one over

3241
01:58:28,960 --> 01:58:29,840
two

3242
01:58:29,840 --> 01:58:31,119
oh i

3243
01:58:31,119 --> 01:58:33,920
believe that stops

3244
01:58:33,920 --> 01:58:35,440
there is

3245
01:58:35,440 --> 01:58:38,239
a value in waiting for

3246
01:58:38,239 --> 01:58:40,400
the server to acknowledge on the

3247
01:58:40,400 --> 01:58:42,800
application level that it has received

3248
01:58:42,800 --> 01:58:44,239
the

3249
01:58:44,239 --> 01:58:45,520
capsule

3250
01:58:45,520 --> 01:58:47,760
and that is how it acknowledges is by

3251
01:58:47,760 --> 01:58:51,280
sending the fan in response

3252
01:58:52,159 --> 01:58:53,760
what does the client do with that

3253
01:58:53,760 --> 01:58:56,080
information that acknowledgement if it's

3254
01:58:56,080 --> 01:58:57,599
the only thing

3255
01:58:57,599 --> 01:59:00,960
it can immediately close a connection

3256
01:59:00,960 --> 01:59:02,719
that sounds like an implementation issue

3257
01:59:02,719 --> 01:59:04,000
on the client

3258
01:59:04,000 --> 01:59:06,880
or is that just detail right

3259
01:59:06,880 --> 01:59:10,159
so not really

3260
01:59:10,239 --> 01:59:11,040
yep

3261
01:59:11,040 --> 01:59:12,400
since i would like to point out that

3262
01:59:12,400 --> 01:59:14,639
proposal 2 is closer to what we do in

3263
01:59:14,639 --> 01:59:16,719
quick you send the connection close and

3264
01:59:16,719 --> 01:59:19,440
you walk away

3265
01:59:19,920 --> 01:59:22,480
well in quick you send the connection

3266
01:59:22,480 --> 01:59:24,000
close

3267
01:59:24,000 --> 01:59:26,560
it's not that simple

3268
01:59:26,560 --> 01:59:28,800
okay

3269
01:59:28,880 --> 01:59:31,679
yeah so um i think there's

3270
01:59:31,679 --> 01:59:33,760
i think there is value to having

3271
01:59:33,760 --> 01:59:36,480
the ability to do it either way here in

3272
01:59:36,480 --> 01:59:37,280
fact

3273
01:59:37,280 --> 01:59:38,239
so

3274
01:59:38,239 --> 01:59:40,080
i think i think that

3275
01:59:40,080 --> 01:59:41,440
there's value in sending a capsule

3276
01:59:41,440 --> 01:59:43,440
saying why it is the connection closed

3277
01:59:43,440 --> 01:59:46,080
and i think either either side should be

3278
01:59:46,080 --> 01:59:47,599
able to send that in this circumstance

3279
01:59:47,599 --> 01:59:50,880
so i think this is neither one or two

3280
01:59:50,880 --> 01:59:54,320
um it is either side can simply

3281
01:59:54,320 --> 01:59:56,000
send a capsule and a pin

3282
01:59:56,000 --> 01:59:57,840
explaining what's going on independent

3283
01:59:57,840 --> 01:59:58,960
of each other

3284
01:59:58,960 --> 02:00:00,800
now the question is how you how you

3285
02:00:00,800 --> 02:00:02,719
respond to seeing that

3286
02:00:02,719 --> 02:00:04,960
and um

3287
02:00:04,960 --> 02:00:06,560
i think

3288
02:00:06,560 --> 02:00:09,199
either one or two is is an option here

3289
02:00:09,199 --> 02:00:11,679
because in the case where i want to walk

3290
02:00:11,679 --> 02:00:12,960
away

3291
02:00:12,960 --> 02:00:14,960
and i just say i'm not going to pay any

3292
02:00:14,960 --> 02:00:17,280
attention to what it is that you send

3293
02:00:17,280 --> 02:00:18,880
from this point onwards stop sending is

3294
02:00:18,880 --> 02:00:20,560
perfectly acceptable in that in that

3295
02:00:20,560 --> 02:00:22,400
scenario

3296
02:00:22,400 --> 02:00:24,639
but you may be interested in

3297
02:00:24,639 --> 02:00:26,000
knowing what the other side has to say

3298
02:00:26,000 --> 02:00:28,159
as well um or

3299
02:00:28,159 --> 02:00:29,280
at least you can't stop them from

3300
02:00:29,280 --> 02:00:31,119
sending something with a capsule saying

3301
02:00:31,119 --> 02:00:33,599
that they wanted to go away as well so i

3302
02:00:33,599 --> 02:00:36,159
i think all of the all the possible

3303
02:00:36,159 --> 02:00:37,920
options are available to anyone and i

3304
02:00:37,920 --> 02:00:40,400
don't see why we have to pick one

3305
02:00:40,400 --> 02:00:43,040
i i hear a proposal to maybe mention

3306
02:00:43,040 --> 02:00:45,440
that both of these are possible

3307
02:00:45,440 --> 02:00:48,639
and like maybe just a sentence to

3308
02:00:48,639 --> 02:00:50,239
clarify what the semantics are i mean

3309
02:00:50,239 --> 02:00:51,440
they're pretty clear if you're sending

3310
02:00:51,440 --> 02:00:53,040
swap sending it means you're no longer

3311
02:00:53,040 --> 02:00:55,840
listening

3312
02:00:56,080 --> 02:00:58,320
how do you feel about that victor sure

3313
02:00:58,320 --> 02:01:01,840
does anyone object to that resolution

3314
02:01:01,840 --> 02:01:04,239
all right phew

3315
02:01:04,239 --> 02:01:05,920
and we are

3316
02:01:05,920 --> 02:01:08,320
at time so we're not going to be able to

3317
02:01:08,320 --> 02:01:10,800
go through the last few pr's or if you

3318
02:01:10,800 --> 02:01:12,000
want to

3319
02:01:12,000 --> 02:01:13,440
say something specific about a very

3320
02:01:13,440 --> 02:01:16,320
specific thing is there are free pr's

3321
02:01:16,320 --> 02:01:18,080
everyone please read them

3322
02:01:18,080 --> 02:01:20,239
uh

3323
02:01:20,400 --> 02:01:22,800
i guess that's

3324
02:01:22,800 --> 02:01:24,800
all i want to say

3325
02:01:24,800 --> 02:01:27,040
uh

3326
02:01:28,960 --> 02:01:31,760
all right so let's wrap up thanks

3327
02:01:31,760 --> 02:01:34,800
everyone we got a lot of stuff done

3328
02:01:34,800 --> 02:01:36,560
just to verify i didn't hear any actions

3329
02:01:36,560 --> 02:01:38,639
for for me from this right

3330
02:01:38,639 --> 02:01:39,760
i'm looking after this working group

3331
02:01:39,760 --> 02:01:41,440
while francesca's away

3332
02:01:41,440 --> 02:01:43,679
you're all good thanks mary

3333
02:01:43,679 --> 02:01:45,440
um so

3334
02:01:45,440 --> 02:01:47,199
we

3335
02:01:47,199 --> 02:01:47,920
got

3336
02:01:47,920 --> 02:01:50,080
folks to be like everyone seems okay

3337
02:01:50,080 --> 02:01:51,599
with the output of the capsule design

3338
02:01:51,599 --> 02:01:53,119
team that's great that was blocking

3339
02:01:53,119 --> 02:01:54,320
quite a few other issues that we're

3340
02:01:54,320 --> 02:01:56,159
going to be able to make progress on

3341
02:01:56,159 --> 02:01:58,159
we got a resolution quite a few other

3342
02:01:58,159 --> 02:02:00,000
issues on h3

3343
02:02:00,000 --> 02:02:03,119
and so that was very productive um

3344
02:02:03,119 --> 02:02:05,760
we do have a few other one issues that

3345
02:02:05,760 --> 02:02:07,199
we haven't gone through in prs that need

3346
02:02:07,199 --> 02:02:09,360
to be reviewed so please take some time

3347
02:02:09,360 --> 02:02:10,719
to do that

3348
02:02:10,719 --> 02:02:12,159
um

3349
02:02:12,159 --> 02:02:14,800
the editors will spend some time

3350
02:02:14,800 --> 02:02:17,280
like we'll be discussing the

3351
02:02:17,280 --> 02:02:19,599
capsule design tprs on the list once

3352
02:02:19,599 --> 02:02:20,880
those are emerged we'll have more

3353
02:02:20,880 --> 02:02:22,159
discussions on the issues that were

3354
02:02:22,159 --> 02:02:24,159
blocked on that resolution

3355
02:02:24,159 --> 02:02:26,159
and we'll see maybe maybe we'll have an

3356
02:02:26,159 --> 02:02:27,440
interim

3357
02:02:27,440 --> 02:02:30,239
before london

3358
02:02:30,560 --> 02:02:33,599
go ahead bernard yeah that was my my

3359
02:02:33,599 --> 02:02:35,360
question um

3360
02:02:35,360 --> 02:02:36,719
i guess we'll bring it up on the list

3361
02:02:36,719 --> 02:02:40,159
david right yeah yeah let's um my gut

3362
02:02:40,159 --> 02:02:42,560
feeling is let's get the output of the

3363
02:02:42,560 --> 02:02:44,400
design team merged assuming there's on

3364
02:02:44,400 --> 02:02:46,560
this concessions for that and see if we

3365
02:02:46,560 --> 02:02:48,639
can progress the other issues

3366
02:02:48,639 --> 02:02:50,800
on github and if we feel like a

3367
02:02:50,800 --> 02:02:52,960
face-to-face you know probably virtual

3368
02:02:52,960 --> 02:02:54,560
conversation would help

3369
02:02:54,560 --> 02:02:56,800
we'll organize an interim so

3370
02:02:56,800 --> 02:02:59,679
thanks everyone for coming and

3371
02:02:59,679 --> 02:03:02,400
see you all soon

3372
02:03:02,400 --> 02:03:04,320
on the list

3373
02:03:04,320 --> 02:03:07,559
thank you

3374
02:03:24,239 --> 02:03:27,239
well

3375
02:03:29,280 --> 02:03:31,360
you

