1
00:00:18,080 --> 00:00:21,080
yes

2
00:00:46,719 --> 00:00:49,280
okay everybody

3
00:00:49,280 --> 00:00:52,399
welcome to my budgie um welcome to one

4
00:00:52,399 --> 00:00:54,320
of the last sessions of the ietf meeting

5
00:00:54,320 --> 00:00:56,480
114 in philadelphia so you're nearly

6
00:00:56,480 --> 00:00:59,039
done and this is an easy session so sit

7
00:00:59,039 --> 00:01:01,760
back and relax

8
00:01:01,920 --> 00:01:05,199
my name is mia coolevent

9
00:01:05,840 --> 00:01:08,640
dave do you want to introduce yourself

10
00:01:08,640 --> 00:01:10,880
hi folks good afternoon i'm dave blanca

11
00:01:10,880 --> 00:01:12,880
i'm remote at my home in madison

12
00:01:12,880 --> 00:01:15,360
wisconsin

13
00:01:17,600 --> 00:01:19,200
okay so there's still a few people

14
00:01:19,200 --> 00:01:20,960
dripping in but we will start

15
00:01:20,960 --> 00:01:24,759
as we have a packed agenda

16
00:01:26,080 --> 00:01:29,119
so this is an irtf group but this still

17
00:01:29,119 --> 00:01:31,360
falls under under most of the

18
00:01:31,360 --> 00:01:33,200
node well points one point is

19
00:01:33,200 --> 00:01:34,640
intellectual property everything you

20
00:01:34,640 --> 00:01:36,640
contribute here it's also converted into

21
00:01:36,640 --> 00:01:39,119
the itf and you have to declare

22
00:01:39,119 --> 00:01:40,400
intellectual property

23
00:01:40,400 --> 00:01:41,680
you might know this already by now

24
00:01:41,680 --> 00:01:45,280
hopefully otherwise please read it up

25
00:01:45,520 --> 00:01:49,200
then um as you can see or is it hard not

26
00:01:49,200 --> 00:01:50,320
hard to miss

27
00:01:50,320 --> 00:01:52,799
um this meeting is recorded

28
00:01:52,799 --> 00:01:54,479
and will be published on youtube at some

29
00:01:54,479 --> 00:01:56,399
point so which is also good if you

30
00:01:56,399 --> 00:01:59,360
missed something you can look it up

31
00:01:59,360 --> 00:02:03,280
and also in the irtf the privacy policy

32
00:02:03,280 --> 00:02:05,520
and the code of conduct apply

33
00:02:05,520 --> 00:02:07,520
um usually i think this group is like

34
00:02:07,520 --> 00:02:09,119
very friendly and we're very nice to

35
00:02:09,119 --> 00:02:11,120
each other and we should generally do

36
00:02:11,120 --> 00:02:12,000
that

37
00:02:12,000 --> 00:02:13,520
so you're very encouraged to ask

38
00:02:13,520 --> 00:02:14,560
questions

39
00:02:14,560 --> 00:02:16,080
but always be friendly and be

40
00:02:16,080 --> 00:02:19,520
constructive and be positive

41
00:02:21,599 --> 00:02:23,599
again this is an irtf session so it's a

42
00:02:23,599 --> 00:02:25,280
little bit different than the ietf

43
00:02:25,280 --> 00:02:26,800
working session

44
00:02:26,800 --> 00:02:28,800
in our case we are mainly

45
00:02:28,800 --> 00:02:29,920
inviting

46
00:02:29,920 --> 00:02:31,680
researchers with really good papers and

47
00:02:31,680 --> 00:02:33,280
contribution which might interest you

48
00:02:33,280 --> 00:02:35,440
and provide you the

49
00:02:35,440 --> 00:02:38,160
presentations

50
00:02:41,040 --> 00:02:43,280
in the slides you find a couple of links

51
00:02:43,280 --> 00:02:45,200
that might be useful for you about what

52
00:02:45,200 --> 00:02:46,959
this group is about about the agenda

53
00:02:46,959 --> 00:02:48,959
about our mailing list

54
00:02:48,959 --> 00:02:50,239
please subscribe to the mailing list

55
00:02:50,239 --> 00:02:51,519
even so there's not much going on you

56
00:02:51,519 --> 00:02:53,280
will see some announcements which might

57
00:02:53,280 --> 00:02:55,840
be helpful

58
00:02:56,560 --> 00:02:58,720
and then this one you should also kind

59
00:02:58,720 --> 00:03:01,680
of know by now but many were telling you

60
00:03:01,680 --> 00:03:03,440
if you want to

61
00:03:03,440 --> 00:03:05,599
say something at the cube please join

62
00:03:05,599 --> 00:03:07,440
the queue and meet echo

63
00:03:07,440 --> 00:03:08,800
please also if you don't want to

64
00:03:08,800 --> 00:03:10,560
contribute please join me echo because

65
00:03:10,560 --> 00:03:12,640
that will also generate our

66
00:03:12,640 --> 00:03:14,800
blue sheets and the blue sheets will

67
00:03:14,800 --> 00:03:16,400
tell us like how big our room is next

68
00:03:16,400 --> 00:03:17,680
time and these kind of things that's

69
00:03:17,680 --> 00:03:20,800
really important to sign up

70
00:03:20,800 --> 00:03:22,239
when you're in the room you don't need

71
00:03:22,239 --> 00:03:23,519
to put on your video and audio you

72
00:03:23,519 --> 00:03:26,000
should actually take it off

73
00:03:26,000 --> 00:03:27,680
but when you're in the room you are

74
00:03:27,680 --> 00:03:29,280
obligated to

75
00:03:29,280 --> 00:03:30,640
wear a mask

76
00:03:30,640 --> 00:03:32,400
and i think we are currently doing

77
00:03:32,400 --> 00:03:34,319
really well in this room so thank you

78
00:03:34,319 --> 00:03:36,480
for that

79
00:03:36,480 --> 00:03:38,720
for remote participants we use the same

80
00:03:38,720 --> 00:03:41,519
queue that's very convenient

81
00:03:41,519 --> 00:03:42,239
and

82
00:03:42,239 --> 00:03:45,120
if you are not shy and we're happy to to

83
00:03:45,120 --> 00:03:46,799
see you on video and have an interactive

84
00:03:46,799 --> 00:03:49,599
discussion with you

85
00:03:52,319 --> 00:03:54,560
and that's it already from my start as i

86
00:03:54,560 --> 00:03:56,159
said we have a very packed agenda so we

87
00:03:56,159 --> 00:03:58,799
will start immediately

88
00:03:58,799 --> 00:04:01,519
the first talk is is a heads-up talk

89
00:04:01,519 --> 00:04:03,200
because it's a little bit kind of out of

90
00:04:03,200 --> 00:04:04,879
the focus of this group what this group

91
00:04:04,879 --> 00:04:06,480
is usually doing our focus is on

92
00:04:06,480 --> 00:04:08,720
measurements of protocols

93
00:04:08,720 --> 00:04:10,239
um but we thought it might anyway be

94
00:04:10,239 --> 00:04:12,400
interested so we invited tal

95
00:04:12,400 --> 00:04:14,480
to give a short 10-minute

96
00:04:14,480 --> 00:04:16,320
heads-up of his work

97
00:04:16,320 --> 00:04:19,279
and i think he's remote

98
00:04:19,279 --> 00:04:21,358
yeah hi webcam hope you can see me in

99
00:04:21,358 --> 00:04:22,560
here

100
00:04:22,560 --> 00:04:23,919
yeah we can

101
00:04:23,919 --> 00:04:27,120
okay do you want to request a slight

102
00:04:27,120 --> 00:04:29,919
sharing so you can control them yourself

103
00:04:29,919 --> 00:04:32,919
yes

104
00:04:45,199 --> 00:04:47,360
i'm miriam just since we didn't go

105
00:04:47,360 --> 00:04:49,440
through the whole agenda of the

106
00:04:49,440 --> 00:04:51,440
presentations today i think we have

107
00:04:51,440 --> 00:04:53,680
seven including this intro

108
00:04:53,680 --> 00:04:56,160
and so um people will have the 10 or 15

109
00:04:56,160 --> 00:04:58,080
minutes and then we have a few minutes

110
00:04:58,080 --> 00:05:00,479
in between but i want to apologize in

111
00:05:00,479 --> 00:05:01,840
advance if we have to cut you off but

112
00:05:01,840 --> 00:05:02,880
we're just going to try to keep to that

113
00:05:02,880 --> 00:05:07,639
so everyone has their allotted time

114
00:05:10,639 --> 00:05:13,120
okay tom the floor is yours

115
00:05:13,120 --> 00:05:14,400
okay thanks

116
00:05:14,400 --> 00:05:16,800
so my name is thomas rahi and this is

117
00:05:16,800 --> 00:05:19,280
joint work with jose luz we're both from

118
00:05:19,280 --> 00:05:20,880
the technion

119
00:05:20,880 --> 00:05:22,840
and actually this is work in

120
00:05:22,840 --> 00:05:25,600
progress but some of our preliminary

121
00:05:25,600 --> 00:05:28,160
some of the preliminary results

122
00:05:28,160 --> 00:05:30,960
are already available publicly in

123
00:05:30,960 --> 00:05:32,960
archive you can see the links at the

124
00:05:32,960 --> 00:05:35,960
bottom

125
00:05:40,720 --> 00:05:43,120
okay so the conflict in ukraine started

126
00:05:43,120 --> 00:05:44,639
in february

127
00:05:44,639 --> 00:05:48,000
and we started looking at various

128
00:05:48,000 --> 00:05:52,720
measurement data from various sources

129
00:05:52,720 --> 00:05:55,680
and we looked at publicly available data

130
00:05:55,680 --> 00:05:57,520
from all these different sources and

131
00:05:57,520 --> 00:05:59,120
currently we're showing some of the

132
00:05:59,120 --> 00:06:00,560
results

133
00:06:00,560 --> 00:06:02,800
focusing on the first two months of the

134
00:06:02,800 --> 00:06:05,800
conflict

135
00:06:09,120 --> 00:06:12,000
so one of the first things we saw was

136
00:06:12,000 --> 00:06:14,880
kind of an asymmetric trend

137
00:06:14,880 --> 00:06:17,440
around the border between ukraine and

138
00:06:17,440 --> 00:06:18,560
russia

139
00:06:18,560 --> 00:06:20,800
so what we see here is our speed test

140
00:06:20,800 --> 00:06:21,919
results

141
00:06:21,919 --> 00:06:23,440
and

142
00:06:23,440 --> 00:06:26,160
basically download and upload speeds and

143
00:06:26,160 --> 00:06:29,120
on the left side we see ukraine

144
00:06:29,120 --> 00:06:30,880
we see uh the

145
00:06:30,880 --> 00:06:32,720
download and upload speeds as a function

146
00:06:32,720 --> 00:06:34,880
of time and we see that starting from

147
00:06:34,880 --> 00:06:37,520
the beginning of the conflict

148
00:06:37,520 --> 00:06:39,759
the performance degraded

149
00:06:39,759 --> 00:06:40,720
and

150
00:06:40,720 --> 00:06:43,360
that's not very surprising but

151
00:06:43,360 --> 00:06:45,520
on the right side we see russia

152
00:06:45,520 --> 00:06:47,120
so starting from the beginning of the

153
00:06:47,120 --> 00:06:48,720
conflict the performance actually

154
00:06:48,720 --> 00:06:50,800
improved

155
00:06:50,800 --> 00:06:52,880
and it improved more significantly than

156
00:06:52,880 --> 00:06:55,039
in previous months so that was kind of

157
00:06:55,039 --> 00:06:56,639
surprising

158
00:06:56,639 --> 00:06:57,360
so

159
00:06:57,360 --> 00:06:59,199
a few words about the reason for that in

160
00:06:59,199 --> 00:07:02,599
a couple of minutes

161
00:07:05,520 --> 00:07:08,400
another thing we looked at was uh the

162
00:07:08,400 --> 00:07:09,520
google

163
00:07:09,520 --> 00:07:11,840
google search rate okay so what we see

164
00:07:11,840 --> 00:07:14,240
here is the google search rate

165
00:07:14,240 --> 00:07:16,639
the rate of google searches

166
00:07:16,639 --> 00:07:18,960
uh as a function of time we see it in

167
00:07:18,960 --> 00:07:20,960
ukraine on the left side russia on the

168
00:07:20,960 --> 00:07:22,800
right side

169
00:07:22,800 --> 00:07:24,400
so in ukraine we see that from the

170
00:07:24,400 --> 00:07:26,400
beginning of the conflict

171
00:07:26,400 --> 00:07:29,360
there was a clear degradation in the web

172
00:07:29,360 --> 00:07:30,639
search rate

173
00:07:30,639 --> 00:07:32,160
and in russia

174
00:07:32,160 --> 00:07:35,120
there's kind of a an increase in the web

175
00:07:35,120 --> 00:07:37,120
search rate

176
00:07:37,120 --> 00:07:39,599
so if we consider what happened in

177
00:07:39,599 --> 00:07:41,120
russia it's

178
00:07:41,120 --> 00:07:43,360
slightly connected to

179
00:07:43,360 --> 00:07:46,240
something that was observed by

180
00:07:46,240 --> 00:07:49,919
the cloudflare ceo matthew prince

181
00:07:49,919 --> 00:07:51,759
who said that they were seeing in

182
00:07:51,759 --> 00:07:53,680
cloudflare they were seeing

183
00:07:53,680 --> 00:07:55,919
a dramatic increase in requests from

184
00:07:55,919 --> 00:07:57,039
russia

185
00:07:57,039 --> 00:07:58,800
to worldwide media

186
00:07:58,800 --> 00:08:01,039
consuming world news

187
00:08:01,039 --> 00:08:02,879
not just local news

188
00:08:02,879 --> 00:08:05,280
and that's something that can be seen in

189
00:08:05,280 --> 00:08:06,080
the

190
00:08:06,080 --> 00:08:08,160
google web searches and also on the

191
00:08:08,160 --> 00:08:11,199
cloudflare data the rate of traffic from

192
00:08:11,199 --> 00:08:14,639
cloudflare to russia

193
00:08:14,639 --> 00:08:16,800
so that's one aspect of the performance

194
00:08:16,800 --> 00:08:20,240
in russia another aspect

195
00:08:21,120 --> 00:08:22,960
is related to what happened at the

196
00:08:22,960 --> 00:08:25,759
beginning of march which is the russian

197
00:08:25,759 --> 00:08:27,919
government blocked

198
00:08:27,919 --> 00:08:29,440
facebook and you and

199
00:08:29,440 --> 00:08:31,360
twitter

200
00:08:31,360 --> 00:08:33,519
and at the same day they blocked

201
00:08:33,519 --> 00:08:35,200
facebook and twitter

202
00:08:35,200 --> 00:08:38,839
the rate of youtube traffic also

203
00:08:38,839 --> 00:08:40,880
dropped and

204
00:08:40,880 --> 00:08:42,958
so obviously we know that youtube

205
00:08:42,958 --> 00:08:44,720
traffic a lot of times you get the links

206
00:08:44,720 --> 00:08:47,680
from the social networks so once the

207
00:08:47,680 --> 00:08:49,600
social networks are blocked

208
00:08:49,600 --> 00:08:51,440
some of the youtube consumption also

209
00:08:51,440 --> 00:08:53,519
drops

210
00:08:53,519 --> 00:08:55,920
also on the same week netflix announced

211
00:08:55,920 --> 00:08:58,720
that they were disconnecting their uh

212
00:08:58,720 --> 00:09:00,480
russian users

213
00:09:00,480 --> 00:09:03,680
and so what we see here is basically a

214
00:09:03,680 --> 00:09:05,440
significant decrease

215
00:09:05,440 --> 00:09:06,320
in the

216
00:09:06,320 --> 00:09:08,640
streaming traffic rate

217
00:09:08,640 --> 00:09:10,560
and this can be a possible explanation

218
00:09:10,560 --> 00:09:12,480
of why we saw an increase in the

219
00:09:12,480 --> 00:09:13,760
performance

220
00:09:13,760 --> 00:09:17,519
in the speed test results

221
00:09:18,800 --> 00:09:19,680
so

222
00:09:19,680 --> 00:09:21,440
we talked about russia but we haven't

223
00:09:21,440 --> 00:09:22,399
explained

224
00:09:22,399 --> 00:09:23,120
the

225
00:09:23,120 --> 00:09:24,640
degradation

226
00:09:24,640 --> 00:09:26,640
in the web searches in ukraine and in

227
00:09:26,640 --> 00:09:28,399
general the degradation and performance

228
00:09:28,399 --> 00:09:29,920
in ukraine

229
00:09:29,920 --> 00:09:30,880
and

230
00:09:30,880 --> 00:09:32,240
we believe that

231
00:09:32,240 --> 00:09:36,000
the main reason for that

232
00:09:36,000 --> 00:09:37,760
the refugee crisis

233
00:09:37,760 --> 00:09:39,200
so

234
00:09:39,200 --> 00:09:40,880
we've all seen these

235
00:09:40,880 --> 00:09:43,360
heartbreaking pictures and we know that

236
00:09:43,360 --> 00:09:46,640
there was a very

237
00:09:47,200 --> 00:09:49,360
very large refugee crisis

238
00:09:49,360 --> 00:09:51,440
millions of people crossed the border to

239
00:09:51,440 --> 00:09:53,360
the countries around ukraine

240
00:09:53,360 --> 00:09:56,480
and millions of other people had to be

241
00:09:56,480 --> 00:09:59,279
displaced inside ukraine

242
00:09:59,279 --> 00:10:01,760
and there are statistics statistics that

243
00:10:01,760 --> 00:10:04,800
are published by the un we can see here

244
00:10:04,800 --> 00:10:06,880
a graph showing the number of refugees

245
00:10:06,880 --> 00:10:08,560
as a function of time

246
00:10:08,560 --> 00:10:11,760
so if we take this graph and

247
00:10:11,760 --> 00:10:13,760
we take its first derivative we see the

248
00:10:13,760 --> 00:10:14,720
rate

249
00:10:14,720 --> 00:10:17,200
of refugees as a function of time

250
00:10:17,200 --> 00:10:18,640
so we take that

251
00:10:18,640 --> 00:10:21,279
graph of the rate of refugees we see it

252
00:10:21,279 --> 00:10:23,040
on the left here

253
00:10:23,040 --> 00:10:26,000
and we compare it to the rate

254
00:10:26,000 --> 00:10:27,519
of google maps

255
00:10:27,519 --> 00:10:29,680
traffic okay this is what we see in the

256
00:10:29,680 --> 00:10:32,480
middle the google maps traffic rate

257
00:10:32,480 --> 00:10:34,240
and we see that there is a very clear

258
00:10:34,240 --> 00:10:36,160
correlation between these two graphs and

259
00:10:36,160 --> 00:10:37,839
obviously

260
00:10:37,839 --> 00:10:39,760
people had to move around people had to

261
00:10:39,760 --> 00:10:42,240
travel to the border

262
00:10:42,240 --> 00:10:43,920
so they had to use google maps that's

263
00:10:43,920 --> 00:10:46,240
not surprising what we see on the right

264
00:10:46,240 --> 00:10:47,519
side

265
00:10:47,519 --> 00:10:49,279
the rightmost graph is

266
00:10:49,279 --> 00:10:51,760
the mobile to desktop ratio

267
00:10:51,760 --> 00:10:54,000
so again people had to travel

268
00:10:54,000 --> 00:10:56,959
people had to use their mobile phones so

269
00:10:56,959 --> 00:10:58,079
we see a

270
00:10:58,079 --> 00:11:01,040
significant difference here in how the

271
00:11:01,040 --> 00:11:03,040
basically the

272
00:11:03,040 --> 00:11:06,000
usage profile changed over this uh

273
00:11:06,000 --> 00:11:08,800
period of time

274
00:11:11,680 --> 00:11:12,480
one

275
00:11:12,480 --> 00:11:14,640
one of the important things to point out

276
00:11:14,640 --> 00:11:15,760
is that

277
00:11:15,760 --> 00:11:17,920
in order to help the refugees what the

278
00:11:17,920 --> 00:11:19,920
u.n is trying to do

279
00:11:19,920 --> 00:11:21,680
is to try to map

280
00:11:21,680 --> 00:11:22,480
where

281
00:11:22,480 --> 00:11:24,720
refugees are staying so

282
00:11:24,720 --> 00:11:26,800
the u.n is kind of trying to keep track

283
00:11:26,800 --> 00:11:29,120
of how many refugees are staying in each

284
00:11:29,120 --> 00:11:30,399
country

285
00:11:30,399 --> 00:11:32,800
and that's obviously that's very

286
00:11:32,800 --> 00:11:34,880
important in order to help them

287
00:11:34,880 --> 00:11:38,560
and in order to do that what the un does

288
00:11:38,560 --> 00:11:40,720
is it collects data from

289
00:11:40,720 --> 00:11:42,480
humanitarian organizations

290
00:11:42,480 --> 00:11:43,279
from

291
00:11:43,279 --> 00:11:45,440
governments

292
00:11:45,440 --> 00:11:47,600
and the data from governments is based

293
00:11:47,600 --> 00:11:49,279
mainly on

294
00:11:49,279 --> 00:11:51,120
border crossing but the problem with

295
00:11:51,120 --> 00:11:54,240
that is that when people travel

296
00:11:54,240 --> 00:11:56,480
inside the eu

297
00:11:56,480 --> 00:11:57,279
um

298
00:11:57,279 --> 00:11:59,360
basically that's not monitored in any

299
00:11:59,360 --> 00:12:01,040
way so if people cross the border

300
00:12:01,040 --> 00:12:02,639
there's no way for the governments to

301
00:12:02,639 --> 00:12:03,760
know that

302
00:12:03,760 --> 00:12:05,440
so

303
00:12:05,440 --> 00:12:07,920
the information published by the un is

304
00:12:07,920 --> 00:12:10,880
not necessarily accurate regarding

305
00:12:10,880 --> 00:12:13,120
the eu countries so what we're

306
00:12:13,120 --> 00:12:14,639
suggesting here and that's what we see

307
00:12:14,639 --> 00:12:16,399
on the right side in pink

308
00:12:16,399 --> 00:12:18,240
is to use

309
00:12:18,240 --> 00:12:20,720
publicly available available

310
00:12:20,720 --> 00:12:23,040
measurements from the internet in order

311
00:12:23,040 --> 00:12:26,480
to try to estimate how many refugees

312
00:12:26,480 --> 00:12:29,680
are staying in each country

313
00:12:29,680 --> 00:12:31,600
so

314
00:12:31,600 --> 00:12:33,920
in order to do that what we did was look

315
00:12:33,920 --> 00:12:36,880
at ukrainian websites

316
00:12:36,880 --> 00:12:39,680
so uh for each of these ukrainian

317
00:12:39,680 --> 00:12:41,360
websites we looked at

318
00:12:41,360 --> 00:12:42,480
data

319
00:12:42,480 --> 00:12:45,600
that tells us how many visits or the the

320
00:12:45,600 --> 00:12:47,040
visit rate

321
00:12:47,040 --> 00:12:49,279
from each country so for example we see

322
00:12:49,279 --> 00:12:51,360
here on the right side of the slide

323
00:12:51,360 --> 00:12:53,760
we see google.com.ua which is the

324
00:12:53,760 --> 00:12:56,160
ukrainian version of google

325
00:12:56,160 --> 00:12:58,720
and we see that almost five percent of

326
00:12:58,720 --> 00:13:00,800
the visits to this site

327
00:13:00,800 --> 00:13:03,600
came from germany

328
00:13:03,600 --> 00:13:04,880
so

329
00:13:04,880 --> 00:13:07,680
more generally speaking we took

330
00:13:07,680 --> 00:13:09,600
uh data

331
00:13:09,600 --> 00:13:12,560
on the top 15 ukrainian sites the most

332
00:13:12,560 --> 00:13:15,839
popular ukraine ukrainian sites and we

333
00:13:15,839 --> 00:13:17,360
use data about

334
00:13:17,360 --> 00:13:20,320
the visit rate from each country and we

335
00:13:20,320 --> 00:13:23,279
computed a maximum likelihood estimation

336
00:13:23,279 --> 00:13:25,680
of how many ukrainian people are staying

337
00:13:25,680 --> 00:13:27,600
in each country and that's basically

338
00:13:27,600 --> 00:13:29,120
what we see in the graph here at the

339
00:13:29,120 --> 00:13:31,760
bottom kind of a histogram showing how

340
00:13:31,760 --> 00:13:34,480
many people in each country

341
00:13:34,480 --> 00:13:36,320
and what's it basically we believe that

342
00:13:36,320 --> 00:13:37,279
this

343
00:13:37,279 --> 00:13:39,279
methodology can

344
00:13:39,279 --> 00:13:40,560
be used

345
00:13:40,560 --> 00:13:42,639
in order to complement some of the data

346
00:13:42,639 --> 00:13:45,440
that is already published by the un so

347
00:13:45,440 --> 00:13:47,600
it can be kind of another piece to

348
00:13:47,600 --> 00:13:50,560
complete the picture

349
00:13:52,880 --> 00:13:56,000
so that's in brief uh the work in

350
00:13:56,000 --> 00:13:58,720
progress that we're working on some more

351
00:13:58,720 --> 00:14:01,199
detailed results will be published soon

352
00:14:01,199 --> 00:14:03,440
in the meantime we would be happy for

353
00:14:03,440 --> 00:14:05,120
any feedback

354
00:14:05,120 --> 00:14:07,360
and

355
00:14:08,000 --> 00:14:10,639
obviously we hope that the conflict will

356
00:14:10,639 --> 00:14:13,680
be resolved soon

357
00:14:13,839 --> 00:14:15,279
so if there are any comments or

358
00:14:15,279 --> 00:14:16,399
questions

359
00:14:16,399 --> 00:14:17,839
this would be

360
00:14:17,839 --> 00:14:18,959
thank you tom

361
00:14:18,959 --> 00:14:21,760
we have one question

362
00:14:24,240 --> 00:14:25,920
hi max thank you to you

363
00:14:25,920 --> 00:14:26,800
um

364
00:14:26,800 --> 00:14:28,320
so it's been pretty well known that

365
00:14:28,320 --> 00:14:30,160
stalin was shipped like a lot of

366
00:14:30,160 --> 00:14:32,000
stalin's worship to ukraine

367
00:14:32,000 --> 00:14:33,920
um do you have any statistics on that or

368
00:14:33,920 --> 00:14:36,480
do you want to try to incorporate some

369
00:14:36,480 --> 00:14:39,199
of that like

370
00:14:40,720 --> 00:14:43,519
yeah so yeah starlink was something that

371
00:14:43,519 --> 00:14:44,639
probably improved some of the

372
00:14:44,639 --> 00:14:46,800
connectivity in ukraine but we don't

373
00:14:46,800 --> 00:14:48,800
have any we haven't

374
00:14:48,800 --> 00:14:51,519
analyzed any data about that

375
00:14:51,519 --> 00:14:53,440
but that's a good point yes

376
00:14:53,440 --> 00:14:55,360
um and second question you had

377
00:14:55,360 --> 00:14:57,440
statistics on the google searches do you

378
00:14:57,440 --> 00:14:59,360
also have statistics on like the the

379
00:14:59,360 --> 00:15:01,199
search trends so what was search do you

380
00:15:01,199 --> 00:15:03,760
see like a return to normal and what was

381
00:15:03,760 --> 00:15:05,519
searched for after a while or is it

382
00:15:05,519 --> 00:15:06,240
still

383
00:15:06,240 --> 00:15:09,199
mostly conflict related

384
00:15:09,199 --> 00:15:10,160
um

385
00:15:10,160 --> 00:15:11,839
again another interesting question but

386
00:15:11,839 --> 00:15:13,839
we focused on the

387
00:15:13,839 --> 00:15:16,639
uh google search traffic crate

388
00:15:16,639 --> 00:15:19,040
and we didn't look into the actual

389
00:15:19,040 --> 00:15:20,480
content of the

390
00:15:20,480 --> 00:15:21,839
searches

391
00:15:21,839 --> 00:15:23,120
all right thank you interesting

392
00:15:23,120 --> 00:15:24,720
presentation

393
00:15:24,720 --> 00:15:27,720
thanks

394
00:15:31,759 --> 00:15:34,240
uh hello ian williams with amazon i just

395
00:15:34,240 --> 00:15:36,959
had a question one of your slides had

396
00:15:36,959 --> 00:15:38,959
some points regarding

397
00:15:38,959 --> 00:15:40,959
the redirects from or like visitors from

398
00:15:40,959 --> 00:15:44,000
certain countries on like say google uh

399
00:15:44,000 --> 00:15:46,240
uh google uh ukraine was you know how

400
00:15:46,240 --> 00:15:48,079
many visitors from from from germany i

401
00:15:48,079 --> 00:15:49,519
know google has like a no country

402
00:15:49,519 --> 00:15:51,600
redirect option if you were in google's

403
00:15:51,600 --> 00:15:53,279
shoes would you have recommended say

404
00:15:53,279 --> 00:15:56,079
enabling that for this crisis to prevent

405
00:15:56,079 --> 00:15:58,720
this kind of disclosure or

406
00:15:58,720 --> 00:15:59,920
do you think it would wouldn't have been

407
00:15:59,920 --> 00:16:02,319
useful

408
00:16:02,639 --> 00:16:04,560
yeah that's an interesting question it's

409
00:16:04,560 --> 00:16:07,120
kind of related to privacy and

410
00:16:07,120 --> 00:16:10,639
um and actually google.com.ua was just

411
00:16:10,639 --> 00:16:12,800
one of the websites we looked at and and

412
00:16:12,800 --> 00:16:14,880
like you said it may be affected by

413
00:16:14,880 --> 00:16:16,320
redirection

414
00:16:16,320 --> 00:16:19,440
um but when people look at

415
00:16:19,440 --> 00:16:23,040
news websites for example uh it's not

416
00:16:23,040 --> 00:16:23,920
really

417
00:16:23,920 --> 00:16:24,959
uh

418
00:16:24,959 --> 00:16:27,040
related to any redirections or something

419
00:16:27,040 --> 00:16:28,639
like that so

420
00:16:28,639 --> 00:16:30,320
i think uh

421
00:16:30,320 --> 00:16:32,480
the fact that google may be based on

422
00:16:32,480 --> 00:16:35,120
redirections is just uh one one small

423
00:16:35,120 --> 00:16:37,440
aspect of this i hope it didn't affect

424
00:16:37,440 --> 00:16:40,399
the results too much

425
00:16:40,399 --> 00:16:42,079
cool thank you

426
00:16:42,079 --> 00:16:44,319
thanks

427
00:16:44,800 --> 00:16:48,199
one more question

428
00:16:56,079 --> 00:16:59,600
uh kenji china mobile i remember during

429
00:16:59,600 --> 00:17:02,720
the the war and after a couple of weeks

430
00:17:02,720 --> 00:17:04,799
the starling has installed is like a

431
00:17:04,799 --> 00:17:06,079
second pass

432
00:17:06,079 --> 00:17:08,319
so have you ever mentioned anything for

433
00:17:08,319 --> 00:17:09,439
it like

434
00:17:09,439 --> 00:17:11,679
a backup that's going to

435
00:17:11,679 --> 00:17:13,439
know the damage but they're going to at

436
00:17:13,439 --> 00:17:15,919
least relieve some burden from

437
00:17:15,919 --> 00:17:18,000
from the damage the infrastructure

438
00:17:18,000 --> 00:17:21,439
through the starting thank you

439
00:17:22,000 --> 00:17:24,160
okay so if if i understand the question

440
00:17:24,160 --> 00:17:26,240
it was related to

441
00:17:26,240 --> 00:17:27,119
how

442
00:17:27,119 --> 00:17:30,000
damage and infrastructure damage

443
00:17:30,000 --> 00:17:32,799
affected the performance and that's uh

444
00:17:32,799 --> 00:17:33,840
something

445
00:17:33,840 --> 00:17:36,080
no no the things like i remember after a

446
00:17:36,080 --> 00:17:38,240
couple weeks the starlink has been in

447
00:17:38,240 --> 00:17:39,440
store

448
00:17:39,440 --> 00:17:40,320
over

449
00:17:40,320 --> 00:17:43,280
the sky on ukraine and then that is like

450
00:17:43,280 --> 00:17:45,360
a backup pass so

451
00:17:45,360 --> 00:17:47,120
have you ever measured anything it's

452
00:17:47,120 --> 00:17:48,480
like a backup

453
00:17:48,480 --> 00:17:51,039
does that like a relief some burden from

454
00:17:51,039 --> 00:17:53,120
the management that you have done

455
00:17:53,120 --> 00:17:55,280
for those damaging infrastructure thank

456
00:17:55,280 --> 00:17:57,679
you on correct on terrestrial network

457
00:17:57,679 --> 00:17:58,840
thank

458
00:17:58,840 --> 00:18:01,360
you okay so

459
00:18:01,360 --> 00:18:03,039
i think it's related to the first

460
00:18:03,039 --> 00:18:04,880
question and

461
00:18:04,880 --> 00:18:07,919
we haven't gone into specific data that

462
00:18:07,919 --> 00:18:11,039
would allow us to analyze that aspect so

463
00:18:11,039 --> 00:18:14,840
but it's a good point

464
00:18:15,360 --> 00:18:18,480
jack the name is

465
00:18:18,480 --> 00:18:20,559
up here

466
00:18:20,559 --> 00:18:22,799
jake

467
00:18:23,120 --> 00:18:24,880
the queue name is up here so that's easy

468
00:18:24,880 --> 00:18:25,919
no

469
00:18:25,919 --> 00:18:28,080
okay thank you chao thank you for the

470
00:18:28,080 --> 00:18:29,600
quick i'm very interesting

471
00:18:29,600 --> 00:18:31,679
next we have jeff

472
00:18:31,679 --> 00:18:33,840
do you want to share your slides over

473
00:18:33,840 --> 00:18:37,480
everything i do it okay

474
00:18:48,640 --> 00:18:50,160
good afternoon all my name is jeff

475
00:18:50,160 --> 00:18:52,720
houston i'm with ap nick and with my

476
00:18:52,720 --> 00:18:54,720
colleague joao damas who is right in the

477
00:18:54,720 --> 00:18:57,520
back row we've been doing a fair deal of

478
00:18:57,520 --> 00:18:58,799
work on

479
00:18:58,799 --> 00:19:00,960
various forms of measurement

480
00:19:00,960 --> 00:19:02,720
and one of the more recent ones we

481
00:19:02,720 --> 00:19:04,240
started up which is actually at the

482
00:19:04,240 --> 00:19:06,640
start of june is to actually look at the

483
00:19:06,640 --> 00:19:09,440
incidence of the use of quick

484
00:19:09,440 --> 00:19:12,400
inside the context of http 3 uh next

485
00:19:12,400 --> 00:19:14,400
slide

486
00:19:14,400 --> 00:19:16,240
uh you know all this don't you next

487
00:19:16,240 --> 00:19:17,760
slide

488
00:19:17,760 --> 00:19:19,440
uh you know all that don't you next

489
00:19:19,440 --> 00:19:21,760
slide

490
00:19:21,919 --> 00:19:24,240
standard intro don't eat it

491
00:19:24,240 --> 00:19:27,200
the way we do this

492
00:19:27,200 --> 00:19:29,840
is trying to actually do extremely large

493
00:19:29,840 --> 00:19:32,640
scale measurements

494
00:19:32,640 --> 00:19:35,760
equipping the server

495
00:19:35,760 --> 00:19:38,960
and using an online ad campaign

496
00:19:38,960 --> 00:19:40,559
to enroll

497
00:19:40,559 --> 00:19:43,200
almost unwitting clients

498
00:19:43,200 --> 00:19:44,640
it's an ad

499
00:19:44,640 --> 00:19:46,480
it's a really simple ad

500
00:19:46,480 --> 00:19:49,120
if you click on it i pay more

501
00:19:49,120 --> 00:19:50,960
so if you see an ad from ap nick just

502
00:19:50,960 --> 00:19:53,440
leave it alone okay don't touch it i pay

503
00:19:53,440 --> 00:19:55,200
more if you click

504
00:19:55,200 --> 00:19:57,760
the ad system that we've configured does

505
00:19:57,760 --> 00:20:00,720
around 20 million eyeball based networks

506
00:20:00,720 --> 00:20:03,120
eyeball-based users per day

507
00:20:03,120 --> 00:20:04,720
and one of the interesting things about

508
00:20:04,720 --> 00:20:05,600
ads

509
00:20:05,600 --> 00:20:08,000
is that the ad network tries extremely

510
00:20:08,000 --> 00:20:08,960
hard

511
00:20:08,960 --> 00:20:12,240
to enroll a different set of people

512
00:20:12,240 --> 00:20:14,240
every sort of period

513
00:20:14,240 --> 00:20:16,880
so we don't go and inflict the same ad

514
00:20:16,880 --> 00:20:19,280
on the same set of users

515
00:20:19,280 --> 00:20:21,200
and it actually gets around some forms

516
00:20:21,200 --> 00:20:23,039
of measurement bias

517
00:20:23,039 --> 00:20:24,960
because if you keep on touching the same

518
00:20:24,960 --> 00:20:27,280
endpoint you just see that end point you

519
00:20:27,280 --> 00:20:28,480
don't see

520
00:20:28,480 --> 00:20:30,320
a generic collection

521
00:20:30,320 --> 00:20:33,200
so it's the best thing we've found

522
00:20:33,200 --> 00:20:36,799
to do a massive sampling of users

523
00:20:36,799 --> 00:20:38,640
the downside is

524
00:20:38,640 --> 00:20:41,360
the script only does so much

525
00:20:41,360 --> 00:20:43,039
and that's not much

526
00:20:43,039 --> 00:20:44,559
because the only thing that's running is

527
00:20:44,559 --> 00:20:47,039
the injected html5 that you put through

528
00:20:47,039 --> 00:20:50,640
in the ad and all it can really do

529
00:20:50,640 --> 00:20:53,520
is get a url

530
00:20:53,520 --> 00:20:56,000
and do a delay

531
00:20:56,000 --> 00:20:57,840
and oddly enough that's enough because

532
00:20:57,840 --> 00:20:59,039
what we do

533
00:20:59,039 --> 00:21:02,080
is equip the server

534
00:21:02,080 --> 00:21:03,679
so if you make sure

535
00:21:03,679 --> 00:21:06,320
that every time an ad is impressed on a

536
00:21:06,320 --> 00:21:09,360
user they go and do a collection of urls

537
00:21:09,360 --> 00:21:11,520
which is a dns lookup followed by a web

538
00:21:11,520 --> 00:21:15,360
lookup with a completely unique dns name

539
00:21:15,360 --> 00:21:16,799
every time

540
00:21:16,799 --> 00:21:18,400
so you're trying to get rid of quite

541
00:21:18,400 --> 00:21:19,600
deliberately

542
00:21:19,600 --> 00:21:21,760
most forms of proxying

543
00:21:21,760 --> 00:21:24,159
and mass other forms of caching which

544
00:21:24,159 --> 00:21:26,000
means all that material from the end

545
00:21:26,000 --> 00:21:29,200
client ends up hitting our servers

546
00:21:29,200 --> 00:21:31,360
and we run a number of them in vms all

547
00:21:31,360 --> 00:21:33,200
over the planet

548
00:21:33,200 --> 00:21:35,200
this started as an initial measurement

549
00:21:35,200 --> 00:21:38,000
around ipv6 deployment

550
00:21:38,000 --> 00:21:39,280
simple stuff

551
00:21:39,280 --> 00:21:41,120
three urls

552
00:21:41,120 --> 00:21:45,200
one dual stack one v4 only one v6 only

553
00:21:45,200 --> 00:21:46,720
you're trying to see the number of folk

554
00:21:46,720 --> 00:21:49,840
who can get to the v6 only interesting

555
00:21:49,840 --> 00:21:51,679
and the number of folk

556
00:21:51,679 --> 00:21:55,440
who use v4 to get to a dual stack entry

557
00:21:55,440 --> 00:21:57,120
in other words the number of folks who

558
00:21:57,120 --> 00:21:59,120
are not for some reason or another doing

559
00:21:59,120 --> 00:22:01,039
happy eyeballs

560
00:22:01,039 --> 00:22:03,039
and comparing it with the baseline of e4

561
00:22:03,039 --> 00:22:05,200
so you can see how you do control and

562
00:22:05,200 --> 00:22:08,080
then experiment bundled up in an ad

563
00:22:08,080 --> 00:22:09,919
we've done exactly the same thing for d

564
00:22:09,919 --> 00:22:12,400
and sec validation and more recently

565
00:22:12,400 --> 00:22:14,799
there's been an ongoing debate in v6

566
00:22:14,799 --> 00:22:17,280
circles about how good or extension

567
00:22:17,280 --> 00:22:21,120
headers does fragmentation work

568
00:22:21,120 --> 00:22:23,039
does extension headers work hop by hop

569
00:22:23,039 --> 00:22:24,559
or destination

570
00:22:24,559 --> 00:22:26,960
and despite other claims to the contrary

571
00:22:26,960 --> 00:22:30,080
by other measurements the ad system

572
00:22:30,080 --> 00:22:32,559
and the predominantly mobile devices

573
00:22:32,559 --> 00:22:34,240
that are eyeball networks in today's

574
00:22:34,240 --> 00:22:35,600
network go

575
00:22:35,600 --> 00:22:36,400
no

576
00:22:36,400 --> 00:22:38,320
but that's a different talk

577
00:22:38,320 --> 00:22:40,400
what we're looking at here though is to

578
00:22:40,400 --> 00:22:42,400
actually see the level of penetration of

579
00:22:42,400 --> 00:22:44,799
quick in today's environment

580
00:22:44,799 --> 00:22:47,120
inside that eyeball based network does

581
00:22:47,120 --> 00:22:49,360
quick actually happen next slide

582
00:22:49,360 --> 00:22:52,559
now to do this

583
00:22:53,280 --> 00:22:54,640
it's quite easy

584
00:22:54,640 --> 00:22:57,520
um we use nginx as our server platform

585
00:22:57,520 --> 00:22:59,600
it runs on a number of servers around

586
00:22:59,600 --> 00:23:00,559
the planet

587
00:23:00,559 --> 00:23:01,480
um

588
00:23:01,480 --> 00:23:03,919
121.7 now has a beta version that

589
00:23:03,919 --> 00:23:05,840
actually does quick functions enabled

590
00:23:05,840 --> 00:23:08,400
yahoo it all comes

591
00:23:08,400 --> 00:23:10,799
we set up dns

592
00:23:10,799 --> 00:23:13,360
basically in a wild card configuration

593
00:23:13,360 --> 00:23:17,120
that does the https record

594
00:23:17,120 --> 00:23:20,080
and we put in an alpn value

595
00:23:20,080 --> 00:23:22,240
come back to that later but certainly

596
00:23:22,240 --> 00:23:24,400
we're signaling that if you're looking

597
00:23:24,400 --> 00:23:26,960
for it you'll find an answer yes for

598
00:23:26,960 --> 00:23:28,480
this domain name

599
00:23:28,480 --> 00:23:30,640
we support quick

600
00:23:30,640 --> 00:23:33,120
additionally in the content header of

601
00:23:33,120 --> 00:23:36,000
this delivered one by one pixel we put

602
00:23:36,000 --> 00:23:38,000
the alt service directive

603
00:23:38,000 --> 00:23:39,360
which of course

604
00:23:39,360 --> 00:23:42,400
if you're following what i just said

605
00:23:42,400 --> 00:23:44,080
doesn't work

606
00:23:44,080 --> 00:23:45,039
because

607
00:23:45,039 --> 00:23:47,919
you get an ad it fetches a bunch of urls

608
00:23:47,919 --> 00:23:49,440
the ad stops

609
00:23:49,440 --> 00:23:51,039
it's a unique name

610
00:23:51,039 --> 00:23:52,480
no one should ever ask for that name

611
00:23:52,480 --> 00:23:53,279
again

612
00:23:53,279 --> 00:23:55,200
so when i put in a content directive

613
00:23:55,200 --> 00:23:57,120
saying if you ever come and visit this

614
00:23:57,120 --> 00:23:59,360
property again you will use quick won't

615
00:23:59,360 --> 00:24:02,000
you you're never going to come

616
00:24:02,000 --> 00:24:04,960
so we had to actually alter the ad

617
00:24:04,960 --> 00:24:06,880
and in this particular case

618
00:24:06,880 --> 00:24:11,039
the ad scripts go fetch this url

619
00:24:11,039 --> 00:24:13,279
start a two second timer and then

620
00:24:13,279 --> 00:24:15,600
schedule the same fetch again so tell

621
00:24:15,600 --> 00:24:17,919
the browser to go refetch to see how

622
00:24:17,919 --> 00:24:20,240
much we could tickle by just basically

623
00:24:20,240 --> 00:24:22,720
doing that refresh for refetch

624
00:24:22,720 --> 00:24:24,640
that doesn't happen all the time in that

625
00:24:24,640 --> 00:24:26,000
particular case it happened around a

626
00:24:26,000 --> 00:24:28,320
fifth of the time or so

627
00:24:28,320 --> 00:24:30,559
the domain name in this case is constant

628
00:24:30,559 --> 00:24:32,159
it's not unique for the second fetch

629
00:24:32,159 --> 00:24:33,279
because we're trying to trigger it next

630
00:24:33,279 --> 00:24:35,039
slide

631
00:24:35,039 --> 00:24:38,480
so yeah i just said that next slide

632
00:24:38,480 --> 00:24:41,039
so there's a difference in quick

633
00:24:41,039 --> 00:24:43,120
whether the browser or whatever the user

634
00:24:43,120 --> 00:24:46,559
agent is is triggering by the dns which

635
00:24:46,559 --> 00:24:49,760
will happen on the first time you fetch

636
00:24:49,760 --> 00:24:52,320
or if it's using the content directive

637
00:24:52,320 --> 00:24:53,919
which will only happen on the second

638
00:24:53,919 --> 00:24:56,080
time because the first is yeah it's just

639
00:24:56,080 --> 00:24:59,440
tcp tls it's http 2 or whatever the

640
00:24:59,440 --> 00:25:01,760
second fetch makes a difference so here

641
00:25:01,760 --> 00:25:04,159
are two lines for june and july the red

642
00:25:04,159 --> 00:25:04,960
line

643
00:25:04,960 --> 00:25:08,080
is actually the second fetch

644
00:25:08,080 --> 00:25:10,320
and what we're seeing is around 3.5

645
00:25:10,320 --> 00:25:11,919
percent of users

646
00:25:11,919 --> 00:25:14,240
actually use quick the second time

647
00:25:14,240 --> 00:25:15,200
around

648
00:25:15,200 --> 00:25:17,600
the lower down one is the blue line

649
00:25:17,600 --> 00:25:20,080
that's around one percent of users use

650
00:25:20,080 --> 00:25:22,480
http 3 on the first query

651
00:25:22,480 --> 00:25:24,640
next line next slide

652
00:25:24,640 --> 00:25:25,919
now

653
00:25:25,919 --> 00:25:27,679
you kind of think

654
00:25:27,679 --> 00:25:30,320
particularly if you believe apple you're

655
00:25:30,320 --> 00:25:32,880
all running the current version of ios

656
00:25:32,880 --> 00:25:34,960
and even if you're you're running chrome

657
00:25:34,960 --> 00:25:37,520
the nag ware is good enough now you're

658
00:25:37,520 --> 00:25:39,360
all running chrome what is it 100

659
00:25:39,360 --> 00:25:41,279
whatever it is and it's actually quite

660
00:25:41,279 --> 00:25:42,880
difficult to go no i don't want to

661
00:25:42,880 --> 00:25:44,799
upgrade no no no no no and you find

662
00:25:44,799 --> 00:25:47,039
yourself typing no all the time so in

663
00:25:47,039 --> 00:25:48,640
theory

664
00:25:48,640 --> 00:25:50,159
these vendors are doing a pretty good

665
00:25:50,159 --> 00:25:52,480
job of getting us all up to the same

666
00:25:52,480 --> 00:25:54,000
release levels

667
00:25:54,000 --> 00:25:55,039
because

668
00:25:55,039 --> 00:25:56,400
the stuff that's out of date you

669
00:25:56,400 --> 00:25:58,480
shouldn't be running anyway so when we

670
00:25:58,480 --> 00:26:00,640
look at this by country population of

671
00:26:00,640 --> 00:26:03,120
quick use next slide

672
00:26:03,120 --> 00:26:05,120
what you actually find

673
00:26:05,120 --> 00:26:08,000
on the second fetch is a pronounced sort

674
00:26:08,000 --> 00:26:09,679
of bias

675
00:26:09,679 --> 00:26:12,559
and the country at 26 or something yeah

676
00:26:12,559 --> 00:26:14,799
28 is malta

677
00:26:14,799 --> 00:26:17,679
and even the central african republic in

678
00:26:17,679 --> 00:26:19,440
africa yay

679
00:26:19,440 --> 00:26:21,279
a massive use of quick on the second

680
00:26:21,279 --> 00:26:23,919
fetch um i have no idea why and i have

681
00:26:23,919 --> 00:26:27,440
no idea why those national variations

682
00:26:27,440 --> 00:26:29,440
i just don't know

683
00:26:29,440 --> 00:26:31,200
i don't think it's a measurement bias

684
00:26:31,200 --> 00:26:32,559
it's the same measurement all the way

685
00:26:32,559 --> 00:26:35,279
around but the relative level per

686
00:26:35,279 --> 00:26:38,320
country does vary a lot which is odd

687
00:26:38,320 --> 00:26:40,159
next slide

688
00:26:40,159 --> 00:26:43,840
and now we look at the first fetch

689
00:26:43,840 --> 00:26:44,960
now

690
00:26:44,960 --> 00:26:47,120
don't forget there's really only one

691
00:26:47,120 --> 00:26:50,559
browser that does this and one platform

692
00:26:50,559 --> 00:26:52,159
actually i don't know if it's a platform

693
00:26:52,159 --> 00:26:54,240
it's certainly safari

694
00:26:54,240 --> 00:26:55,919
not even sure you can get safari on

695
00:26:55,919 --> 00:26:57,360
linux but if you could maybe it'll do

696
00:26:57,360 --> 00:26:59,679
the same thing who knows um but it's

697
00:26:59,679 --> 00:27:02,960
safari on ios safari on macos

698
00:27:02,960 --> 00:27:04,480
and oddly enough

699
00:27:04,480 --> 00:27:05,440
maybe

700
00:27:05,440 --> 00:27:07,360
denmark is just in love with apple

701
00:27:07,360 --> 00:27:08,320
product

702
00:27:08,320 --> 00:27:10,320
but certainly it has the highest rate of

703
00:27:10,320 --> 00:27:12,480
first fetch um

704
00:27:12,480 --> 00:27:14,960
and this is largely european largely

705
00:27:14,960 --> 00:27:17,679
northern european as having the highest

706
00:27:17,679 --> 00:27:19,039
rates

707
00:27:19,039 --> 00:27:20,799
africa um

708
00:27:20,799 --> 00:27:23,279
much much much much much lower so again

709
00:27:23,279 --> 00:27:25,600
huge amounts of national variation

710
00:27:25,600 --> 00:27:28,240
next slide

711
00:27:28,240 --> 00:27:30,399
so i actually had four questions when i

712
00:27:30,399 --> 00:27:31,919
looked at this

713
00:27:31,919 --> 00:27:33,520
uh and i've sort of given you some hints

714
00:27:33,520 --> 00:27:35,840
already who's doing quick and why what

715
00:27:35,840 --> 00:27:38,320
are the mss values you know what's the

716
00:27:38,320 --> 00:27:40,880
connection failure rate like because

717
00:27:40,880 --> 00:27:43,279
putting all of our traffic over udp port

718
00:27:43,279 --> 00:27:45,360
443

719
00:27:45,360 --> 00:27:47,279
is not something we used to do 10 years

720
00:27:47,279 --> 00:27:49,840
ago and if you're using cpus or

721
00:27:49,840 --> 00:27:51,679
firewalls it's kind of this is crap

722
00:27:51,679 --> 00:27:54,000
traffic i'm going to drop it so you know

723
00:27:54,000 --> 00:27:55,679
how much is being dropped

724
00:27:55,679 --> 00:27:57,279
and last but not least the whole

725
00:27:57,279 --> 00:27:59,840
rationale or not the entire rationale

726
00:27:59,840 --> 00:28:02,399
but a strong rationale for doing this

727
00:28:02,399 --> 00:28:04,320
amongst others was it's meant to be

728
00:28:04,320 --> 00:28:05,520
faster

729
00:28:05,520 --> 00:28:08,480
is it so next slide let's try and answer

730
00:28:08,480 --> 00:28:11,039
each of those who's doing it these are

731
00:28:11,039 --> 00:28:13,840
vertical columns don't go sideways

732
00:28:13,840 --> 00:28:15,279
normally

733
00:28:15,279 --> 00:28:18,320
the android platform is seen in about 84

734
00:28:18,320 --> 00:28:20,480
percent of ads ads see android most of

735
00:28:20,480 --> 00:28:22,799
the time ads see mac os about one

736
00:28:22,799 --> 00:28:25,919
percent ads see ios iphones about five

737
00:28:25,919 --> 00:28:28,080
percent it's the market share of

738
00:28:28,080 --> 00:28:31,360
eyeballs as seen by google's ad system

739
00:28:31,360 --> 00:28:32,399
fair enough

740
00:28:32,399 --> 00:28:34,720
as far as i can see with other stats not

741
00:28:34,720 --> 00:28:37,440
too far off some kind of truth

742
00:28:37,440 --> 00:28:40,559
when we look at the first fetch

743
00:28:40,559 --> 00:28:42,559
almost all of the first fetches come

744
00:28:42,559 --> 00:28:46,080
from ios and macos

745
00:28:46,080 --> 00:28:48,080
and certainly none from android you know

746
00:28:48,080 --> 00:28:49,600
none from the others

747
00:28:49,600 --> 00:28:52,080
so strong correlation the platform is

748
00:28:52,080 --> 00:28:56,000
apples when you look at the second fetch

749
00:28:56,000 --> 00:28:57,600
the first fetchers are still doing it

750
00:28:57,600 --> 00:29:00,080
the second time the dns is working it's

751
00:29:00,080 --> 00:29:02,559
sticky but now android the second time

752
00:29:02,559 --> 00:29:04,640
around goes yep gonna do it as well so

753
00:29:04,640 --> 00:29:06,399
that's why the android number rises on

754
00:29:06,399 --> 00:29:09,440
the second pitch next slide

755
00:29:09,440 --> 00:29:12,480
so which user agent now this is what the

756
00:29:12,480 --> 00:29:14,399
browser claims it's running

757
00:29:14,399 --> 00:29:16,480
you know there are lies there are more

758
00:29:16,480 --> 00:29:19,279
lies and there's the browser string lies

759
00:29:19,279 --> 00:29:21,440
uh which are the best lies of all so you

760
00:29:21,440 --> 00:29:23,760
know with a strong grain of salt about

761
00:29:23,760 --> 00:29:26,000
who's reporting what you know what you

762
00:29:26,000 --> 00:29:28,480
actually find again is safari is first

763
00:29:28,480 --> 00:29:31,919
fit first fetch and no others

764
00:29:31,919 --> 00:29:35,200
um so the 4.1 percent of chrome

765
00:29:35,200 --> 00:29:37,679
probably lying who knows

766
00:29:37,679 --> 00:29:39,760
in the second fetch what you find is the

767
00:29:39,760 --> 00:29:43,120
chrome numbers come in 81 on chrome 16

768
00:29:43,120 --> 00:29:44,480
on safari

769
00:29:44,480 --> 00:29:47,919
um firefox which was only ever 0.8 of

770
00:29:47,919 --> 00:29:49,279
eyeballs which is pretty low market

771
00:29:49,279 --> 00:29:50,720
share and it's declining very very

772
00:29:50,720 --> 00:29:54,559
quickly uh first fetch

773
00:29:54,640 --> 00:29:56,320
i don't think it's doing anything if it

774
00:29:56,320 --> 00:29:58,960
is doing dns it's not clear from this

775
00:29:58,960 --> 00:30:02,240
and on the second fetch again

776
00:30:02,240 --> 00:30:03,760
point eight percent to one percent of

777
00:30:03,760 --> 00:30:04,880
share

778
00:30:04,880 --> 00:30:08,880
not clear what's going on next slide

779
00:30:08,880 --> 00:30:11,360
so who does it safari does it with the

780
00:30:11,360 --> 00:30:13,679
dns https query

781
00:30:13,679 --> 00:30:16,399
they may or may not also be sensitive to

782
00:30:16,399 --> 00:30:18,480
the content directive

783
00:30:18,480 --> 00:30:19,919
but if they're doing the dns query

784
00:30:19,919 --> 00:30:21,520
that's the sticky bit that's the bit

785
00:30:21,520 --> 00:30:23,279
that triggers it the rest is going to

786
00:30:23,279 --> 00:30:24,480
happen anyway

787
00:30:24,480 --> 00:30:26,480
but we also looked at the amount of

788
00:30:26,480 --> 00:30:28,720
https

789
00:30:28,720 --> 00:30:31,440
four times the number of safari clients

790
00:30:31,440 --> 00:30:32,720
asked

791
00:30:32,720 --> 00:30:34,480
than did

792
00:30:34,480 --> 00:30:36,640
you sort of scratch your head

793
00:30:36,640 --> 00:30:38,320
and what a little hair is left and go

794
00:30:38,320 --> 00:30:39,840
hang on a second

795
00:30:39,840 --> 00:30:42,159
if you knew enough to ask

796
00:30:42,159 --> 00:30:44,960
and the server goes sure

797
00:30:44,960 --> 00:30:47,919
why only one in four goes yeah

798
00:30:47,919 --> 00:30:49,440
you know it's kind of if you're going to

799
00:30:49,440 --> 00:30:50,720
ask

800
00:30:50,720 --> 00:30:53,679
why not follow up the hint um

801
00:30:53,679 --> 00:30:55,440
we'll go into that it's an interesting

802
00:30:55,440 --> 00:30:59,279
point secondly the alt service

803
00:30:59,279 --> 00:31:01,200
this is a low number

804
00:31:01,200 --> 00:31:02,880
there's a lot of chrome and if all of

805
00:31:02,880 --> 00:31:04,799
chrome says alt service i'm going to do

806
00:31:04,799 --> 00:31:07,039
it we're seeing a remarkably small

807
00:31:07,039 --> 00:31:09,120
capture rate it is tiny there's

808
00:31:09,120 --> 00:31:11,039
something going on there so that's the

809
00:31:11,039 --> 00:31:12,559
first question on to the next time is

810
00:31:12,559 --> 00:31:14,640
moving um

811
00:31:14,640 --> 00:31:17,880
next slide

812
00:31:18,159 --> 00:31:20,080
you're right uh the next question was

813
00:31:20,080 --> 00:31:22,720
packet size in quick you must must must

814
00:31:22,720 --> 00:31:24,640
must never fragment

815
00:31:24,640 --> 00:31:26,159
so what's the distribution of packet

816
00:31:26,159 --> 00:31:28,080
sizes the standard says in the first

817
00:31:28,080 --> 00:31:31,279
packet pad to 1200 and around 45 percent

818
00:31:31,279 --> 00:31:32,640
of 1200

819
00:31:32,640 --> 00:31:34,640
the maximum packet size i ever saw was a

820
00:31:34,640 --> 00:31:36,480
tiny percentage doing a little bit over

821
00:31:36,480 --> 00:31:40,000
1350 so most of quick sits in that magic

822
00:31:40,000 --> 00:31:42,799
thing which is somewhere between 1200

823
00:31:42,799 --> 00:31:43,919
the minimum

824
00:31:43,919 --> 00:31:46,320
according to quick and a realistic

825
00:31:46,320 --> 00:31:48,559
maximum of 1400

826
00:31:48,559 --> 00:31:50,880
no one's doing path mtu and extending

827
00:31:50,880 --> 00:31:52,399
beyond that

828
00:31:52,399 --> 00:31:55,200
next slide next question

829
00:31:55,200 --> 00:31:57,120
what's the connection loss

830
00:31:57,120 --> 00:32:01,200
this amazes me that i'm only seeing half

831
00:32:01,200 --> 00:32:03,200
most of the problems we have with b6 and

832
00:32:03,200 --> 00:32:04,720
it's a much worse connection failure

833
00:32:04,720 --> 00:32:07,120
rate in v6 around two and a half percent

834
00:32:07,120 --> 00:32:09,440
is the packet being sent back

835
00:32:09,440 --> 00:32:12,480
you give me a sin i give you a synack

836
00:32:12,480 --> 00:32:14,159
the filters and firewalls at the front

837
00:32:14,159 --> 00:32:17,440
of you go v6 is evil drop the packet

838
00:32:17,440 --> 00:32:19,039
and so you actually see quite a visible

839
00:32:19,039 --> 00:32:21,279
drop rate and you would have thought or

840
00:32:21,279 --> 00:32:23,760
i would have these cpes sometimes were

841
00:32:23,760 --> 00:32:25,840
built in the paleolithic era before

842
00:32:25,840 --> 00:32:28,960
dinosaurs and you go udp 443 wow that's

843
00:32:28,960 --> 00:32:32,080
evil but interestingly if i take one day

844
00:32:32,080 --> 00:32:34,000
and look at some 20 million sessions

845
00:32:34,000 --> 00:32:36,000
there's the exact numbers there

846
00:32:36,000 --> 00:32:39,039
the second packet comes through

847
00:32:39,039 --> 00:32:42,320
in all but 46 000 attempts which is a

848
00:32:42,320 --> 00:32:46,240
phenomenally low failure rate of 0.24

849
00:32:46,240 --> 00:32:48,799
so whatever's going on

850
00:32:48,799 --> 00:32:51,120
whatever reason the first packet hits me

851
00:32:51,120 --> 00:32:52,640
and i've no idea if the first packet

852
00:32:52,640 --> 00:32:55,120
never got to me because that's a problem

853
00:32:55,120 --> 00:32:56,880
on the other sort of direction in i

854
00:32:56,880 --> 00:32:58,799
can't tell if i didn't get a packet but

855
00:32:58,799 --> 00:33:00,320
when i got one

856
00:33:00,320 --> 00:33:02,000
almost always

857
00:33:02,000 --> 00:33:04,240
the responder gets my packet and i get

858
00:33:04,240 --> 00:33:06,399
the next quick packet coming in

859
00:33:06,399 --> 00:33:09,279
so that handshake rate is better than v6

860
00:33:09,279 --> 00:33:12,640
it is amazingly good next slide

861
00:33:12,640 --> 00:33:14,080
is it

862
00:33:14,080 --> 00:33:16,080
jeff just heads up um you got about

863
00:33:16,080 --> 00:33:17,279
three more minutes and that's going into

864
00:33:17,279 --> 00:33:19,360
your i am moving so quickly yeah i know

865
00:33:19,360 --> 00:33:22,559
time is tight um

866
00:33:22,720 --> 00:33:25,440
i use the browser timer browsers not

867
00:33:25,440 --> 00:33:27,519
only lie in the browser string browsers

868
00:33:27,519 --> 00:33:29,679
line and elapsed time so taking the

869
00:33:29,679 --> 00:33:31,679
browser timer i get this pattern next

870
00:33:31,679 --> 00:33:33,519
slide

871
00:33:33,519 --> 00:33:36,240
um there's a definite bias in the in the

872
00:33:36,240 --> 00:33:37,440
measurements

873
00:33:37,440 --> 00:33:40,720
to say the timed amount to fetch a quick

874
00:33:40,720 --> 00:33:42,880
versus fetching over any other protocol

875
00:33:42,880 --> 00:33:44,399
it's faster

876
00:33:44,399 --> 00:33:45,840
a lot no

877
00:33:45,840 --> 00:33:47,679
but then again there's a huge variation

878
00:33:47,679 --> 00:33:50,320
in rtts but on the whole it's faster

879
00:33:50,320 --> 00:33:53,279
four how many next slide

880
00:33:53,279 --> 00:33:54,720
around about two-thirds of the folk

881
00:33:54,720 --> 00:33:56,640
record a faster performance using quick

882
00:33:56,640 --> 00:33:58,320
that is significant that is very

883
00:33:58,320 --> 00:34:00,320
significant does it work does it make it

884
00:34:00,320 --> 00:34:02,559
faster well the browsers are reporting

885
00:34:02,559 --> 00:34:03,679
it does

886
00:34:03,679 --> 00:34:07,440
on the whole on average next slide

887
00:34:07,440 --> 00:34:09,599
so those are the answers i just told you

888
00:34:09,599 --> 00:34:12,320
that next slide

889
00:34:12,719 --> 00:34:15,199
these numbers are low even cloud player

890
00:34:15,199 --> 00:34:17,679
with their radar reports far far far

891
00:34:17,679 --> 00:34:21,119
higher numbers 30 next slide

892
00:34:21,119 --> 00:34:22,320
why

893
00:34:22,320 --> 00:34:24,159
i should be seeing up to ninety percent

894
00:34:24,159 --> 00:34:25,599
in chrome

895
00:34:25,599 --> 00:34:27,520
well the issue is

896
00:34:27,520 --> 00:34:29,599
that two second timer

897
00:34:29,599 --> 00:34:31,280
i'm too fast

898
00:34:31,280 --> 00:34:33,520
if you've ever tried to do this manually

899
00:34:33,520 --> 00:34:35,119
on a chrome browser you actually have to

900
00:34:35,119 --> 00:34:36,879
hit the sentinel again and again and

901
00:34:36,879 --> 00:34:38,879
again to actually make it flick too

902
00:34:38,879 --> 00:34:41,599
quick so it's not deterministic and it

903
00:34:41,599 --> 00:34:44,320
takes time so that two second fetch

904
00:34:44,320 --> 00:34:46,639
seems to be too fast i have to wait

905
00:34:46,639 --> 00:34:49,199
longer for that directive to get sort of

906
00:34:49,199 --> 00:34:52,000
sticky inside chrome for the next fetch

907
00:34:52,000 --> 00:34:54,320
to trigger so i think i was jumping the

908
00:34:54,320 --> 00:34:56,879
gun so that's bad and that's why the

909
00:34:56,879 --> 00:35:00,640
numbers are low next slide

910
00:35:00,640 --> 00:35:04,000
right why is the safari query rate for

911
00:35:04,000 --> 00:35:07,200
https so much higher than the actual

912
00:35:07,200 --> 00:35:08,720
fetch rate

913
00:35:08,720 --> 00:35:10,960
again what's going on is that i'm not

914
00:35:10,960 --> 00:35:12,560
giving hints

915
00:35:12,560 --> 00:35:15,520
i'm only telling you use http 3. i'm not

916
00:35:15,520 --> 00:35:17,200
saying here's the v4 address and here's

917
00:35:17,200 --> 00:35:20,480
the v6 address in the https record so

918
00:35:20,480 --> 00:35:22,480
safari has to separately go and fetch

919
00:35:22,480 --> 00:35:24,320
that and there's an internal race

920
00:35:24,320 --> 00:35:26,560
condition because if it gets an answer

921
00:35:26,560 --> 00:35:28,960
for the address records and doesn't get

922
00:35:28,960 --> 00:35:31,359
an answer for the https guess what it's

923
00:35:31,359 --> 00:35:33,680
going to do speed is more important at

924
00:35:33,680 --> 00:35:36,079
that particular point so

925
00:35:36,079 --> 00:35:38,000
we're now altering this measurement to

926
00:35:38,000 --> 00:35:41,280
actually put the hints into https to see

927
00:35:41,280 --> 00:35:43,040
if that will tickle the rest of the

928
00:35:43,040 --> 00:35:45,599
apple side to actually go down the quick

929
00:35:45,599 --> 00:35:47,680
path from the start

930
00:35:47,680 --> 00:35:49,359
i've been talking to apple as well at

931
00:35:49,359 --> 00:35:52,280
this point it also seems that not every

932
00:35:52,280 --> 00:35:54,800
https answer

933
00:35:54,800 --> 00:35:57,040
converts to quick anyway there's a

934
00:35:57,040 --> 00:35:58,960
certain amount of seeing how well it

935
00:35:58,960 --> 00:35:59,920
goes

936
00:35:59,920 --> 00:36:02,640
and i think that reaping rate of query

937
00:36:02,640 --> 00:36:04,960
to fetch is actually being throttled

938
00:36:04,960 --> 00:36:07,200
somewhat by apple itself

939
00:36:07,200 --> 00:36:09,520
secondly why all the countries different

940
00:36:09,520 --> 00:36:11,520
i have no idea

941
00:36:11,520 --> 00:36:13,680
are there regional defaults

942
00:36:13,680 --> 00:36:16,079
other various pieces of browser software

943
00:36:16,079 --> 00:36:18,400
variant region by region that's a

944
00:36:18,400 --> 00:36:20,000
browser question it's not a jeff

945
00:36:20,000 --> 00:36:22,800
question next slide

946
00:36:22,800 --> 00:36:24,720
wow that was it i think i'm in under the

947
00:36:24,720 --> 00:36:26,560
minutes there dave

948
00:36:26,560 --> 00:36:28,160
there is a url down at the bottom i

949
00:36:28,160 --> 00:36:30,240
didn't do the qr code this stuff is

950
00:36:30,240 --> 00:36:32,480
being run every single day with about 20

951
00:36:32,480 --> 00:36:34,880
million users every single day being

952
00:36:34,880 --> 00:36:37,359
enrolled as the picture changes the

953
00:36:37,359 --> 00:36:38,960
picture on that web page will

954
00:36:38,960 --> 00:36:40,880
necessarily change to reflect current

955
00:36:40,880 --> 00:36:45,200
reality and i'm done thank you

956
00:36:45,280 --> 00:36:47,599
hello

957
00:36:48,560 --> 00:36:50,320
brave browser

958
00:36:50,320 --> 00:36:52,720
thanks for this study just wondering do

959
00:36:52,720 --> 00:36:55,280
you take into account ad blocking at all

960
00:36:55,280 --> 00:36:58,720
and um you know like 35 of the web five

961
00:36:58,720 --> 00:37:00,960
years ago using ad blocker

962
00:37:00,960 --> 00:37:02,000
um

963
00:37:02,000 --> 00:37:05,119
ad blocking is actually an odd activity

964
00:37:05,119 --> 00:37:08,000
and this is the world as seen by ads

965
00:37:08,000 --> 00:37:09,920
it's not the world

966
00:37:09,920 --> 00:37:11,359
and there are certain providers and

967
00:37:11,359 --> 00:37:13,200
there's a mobile provider in south korea

968
00:37:13,200 --> 00:37:15,680
that does almost 100 ad blocking i get

969
00:37:15,680 --> 00:37:18,079
very little visibility oddly enough

970
00:37:18,079 --> 00:37:19,920
since march as you saw from the previous

971
00:37:19,920 --> 00:37:22,320
talk getting ads into certain parts of

972
00:37:22,320 --> 00:37:24,320
the world is now extremely difficult and

973
00:37:24,320 --> 00:37:27,040
i see very few ads in those countries

974
00:37:27,040 --> 00:37:28,320
yes

975
00:37:28,320 --> 00:37:29,280
but

976
00:37:29,280 --> 00:37:31,359
of the bits you see

977
00:37:31,359 --> 00:37:33,520
it's all the same equipment it's all the

978
00:37:33,520 --> 00:37:34,640
same view

979
00:37:34,640 --> 00:37:36,800
and does ad blocking buy us these

980
00:37:36,800 --> 00:37:39,280
numbers i don't think it biases them per

981
00:37:39,280 --> 00:37:40,560
se

982
00:37:40,560 --> 00:37:43,359
it's just the view as seen from the ad

983
00:37:43,359 --> 00:37:45,759
system

984
00:37:49,520 --> 00:37:51,839
ben

985
00:37:53,599 --> 00:37:55,119
so i can't see the rest of the control

986
00:37:55,119 --> 00:37:57,599
slide so you've got the cube

987
00:37:57,599 --> 00:37:59,280
hi ben schwartz

988
00:37:59,280 --> 00:38:00,560
um

989
00:38:00,560 --> 00:38:03,920
i i had two two notes here one uh are

990
00:38:03,920 --> 00:38:05,359
you are you

991
00:38:05,359 --> 00:38:07,359
killing the quick connection from the

992
00:38:07,359 --> 00:38:10,000
server side before the second

993
00:38:10,000 --> 00:38:12,560
uh fetch is initiated

994
00:38:12,560 --> 00:38:15,760
that's oddly enough an nginx question

995
00:38:15,760 --> 00:38:17,680
we did very little to the beta version

996
00:38:17,680 --> 00:38:20,320
of nginx so the quick connection comes

997
00:38:20,320 --> 00:38:21,599
in

998
00:38:21,599 --> 00:38:24,640
by the look of it the two second delay

999
00:38:24,640 --> 00:38:27,920
happens at the instruct the browser

1000
00:38:27,920 --> 00:38:30,000
not two seconds between subsequent

1001
00:38:30,000 --> 00:38:32,160
fetches because browsers have more

1002
00:38:32,160 --> 00:38:34,079
complexity than any operating system

1003
00:38:34,079 --> 00:38:35,599
that ever got built

1004
00:38:35,599 --> 00:38:38,079
and so the variance between in time

1005
00:38:38,079 --> 00:38:40,400
between those two features seems to be

1006
00:38:40,400 --> 00:38:43,119
an extraordinary amount of variance ben

1007
00:38:43,119 --> 00:38:44,720
and it actually is a separate piece of

1008
00:38:44,720 --> 00:38:46,320
work to understand what the true

1009
00:38:46,320 --> 00:38:47,760
variance is

1010
00:38:47,760 --> 00:38:49,119
just as a quick out on the way we're

1011
00:38:49,119 --> 00:38:51,040
going to change this is that we're going

1012
00:38:51,040 --> 00:38:53,119
to change the ad to fetch the second

1013
00:38:53,119 --> 00:38:55,760
time wait two seconds a third time wait

1014
00:38:55,760 --> 00:38:58,000
two seconds a fourth time and do this

1015
00:38:58,000 --> 00:38:59,599
seven times

1016
00:38:59,599 --> 00:39:02,240
if chrome is going to flick over at some

1017
00:39:02,240 --> 00:39:04,880
point in those 14 seconds hopefully it's

1018
00:39:04,880 --> 00:39:06,880
going to figure out that it can if

1019
00:39:06,880 --> 00:39:07,760
that's

1020
00:39:07,760 --> 00:39:09,839
to give you

1021
00:39:09,839 --> 00:39:12,160
okay so so my feedback would be

1022
00:39:12,160 --> 00:39:14,960
try something like http connection close

1023
00:39:14,960 --> 00:39:17,040
the connection close header or

1024
00:39:17,040 --> 00:39:18,240
otherwise

1025
00:39:18,240 --> 00:39:21,040
like from the server side close that

1026
00:39:21,040 --> 00:39:23,599
http 2 connection as soon as you've sent

1027
00:39:23,599 --> 00:39:25,760
the response because

1028
00:39:25,760 --> 00:39:28,000
what you want is for the client to be

1029
00:39:28,000 --> 00:39:29,520
initiating a new

1030
00:39:29,520 --> 00:39:31,839
socket to see should i use http 3. if

1031
00:39:31,839 --> 00:39:35,200
the client already has an open http 2

1032
00:39:35,200 --> 00:39:37,760
socket to the server it might just reuse

1033
00:39:37,760 --> 00:39:40,640
it instead of going through the delay

1034
00:39:40,640 --> 00:39:43,359
and and complexity of opening up a new

1035
00:39:43,359 --> 00:39:45,920
http 3 session but if if you can wipe

1036
00:39:45,920 --> 00:39:47,520
all of your if you can close all of your

1037
00:39:47,520 --> 00:39:49,520
connections then from scratch it's more

1038
00:39:49,520 --> 00:39:51,920
likely to start http 3.

1039
00:39:51,920 --> 00:39:53,839
ben that's extraordinarily helpful thank

1040
00:39:53,839 --> 00:39:56,240
you very much we will do that this

1041
00:39:56,240 --> 00:39:57,520
afternoon

1042
00:39:57,520 --> 00:39:59,280
the other thing i would say is for for

1043
00:39:59,280 --> 00:40:02,960
the https ip hints um in general ip

1044
00:40:02,960 --> 00:40:06,160
hints are only necessary if your target

1045
00:40:06,160 --> 00:40:07,760
name is not

1046
00:40:07,760 --> 00:40:08,720
dot

1047
00:40:08,720 --> 00:40:11,040
so uh we can talk about that in more

1048
00:40:11,040 --> 00:40:13,040
detail but i would i would encourage you

1049
00:40:13,040 --> 00:40:15,200
to set your target name in the https

1050
00:40:15,200 --> 00:40:18,319
record to dot the magic default value

1051
00:40:18,319 --> 00:40:19,920
which means i'm not doing anything

1052
00:40:19,920 --> 00:40:22,560
interesting in terms of redirection here

1053
00:40:22,560 --> 00:40:25,599
uh that makes the iphone relevant

1054
00:40:25,599 --> 00:40:27,520
again no should thank you very much we

1055
00:40:27,520 --> 00:40:29,440
will do that

1056
00:40:29,440 --> 00:40:31,680
any others no that's it thank you for

1057
00:40:31,680 --> 00:40:34,240
joining us

1058
00:40:36,240 --> 00:40:37,680
your summer

1059
00:40:37,680 --> 00:40:40,800
yep just come up um

1060
00:40:40,800 --> 00:40:42,480
you can request slide sharing do you

1061
00:40:42,480 --> 00:40:44,079
want to do that

1062
00:40:44,079 --> 00:40:46,319
yep

1063
00:40:49,839 --> 00:40:51,359
now you should get it now you should

1064
00:40:51,359 --> 00:40:54,078
select this like

1065
00:40:56,319 --> 00:40:59,599
you still need to select this light

1066
00:40:59,599 --> 00:41:02,839
try it again

1067
00:41:11,200 --> 00:41:14,439
there you go

1068
00:41:21,839 --> 00:41:23,599
all right so

1069
00:41:23,599 --> 00:41:25,920
uh i'm sam i'm a phd candidate brown

1070
00:41:25,920 --> 00:41:28,480
university

1071
00:41:29,119 --> 00:41:30,880
uh is it better

1072
00:41:30,880 --> 00:41:32,400
all right

1073
00:41:32,400 --> 00:41:34,240
so yeah everyone in the room knows that

1074
00:41:34,240 --> 00:41:36,480
web performance is important and better

1075
00:41:36,480 --> 00:41:38,079
performance leads to better revenue and

1076
00:41:38,079 --> 00:41:39,760
better use engagement

1077
00:41:39,760 --> 00:41:41,839
in order to do that uh websites

1078
00:41:41,839 --> 00:41:44,400
typically use cdns which have servers

1079
00:41:44,400 --> 00:41:46,319
spread across the globe typically called

1080
00:41:46,319 --> 00:41:48,640
cdn edge at the cdn edge we have

1081
00:41:48,640 --> 00:41:50,560
protocols like http and tcp that

1082
00:41:50,560 --> 00:41:51,920
controls the

1083
00:41:51,920 --> 00:41:54,400
rules for request and response and

1084
00:41:54,400 --> 00:41:56,640
rules for data transmission

1085
00:41:56,640 --> 00:41:59,200
now an operator is required to select

1086
00:41:59,200 --> 00:42:01,200
from among a different configuration

1087
00:42:01,200 --> 00:42:03,359
option available so for example they may

1088
00:42:03,359 --> 00:42:05,520
have multiple constituent controls and

1089
00:42:05,520 --> 00:42:07,359
they need to select one of those

1090
00:42:07,359 --> 00:42:09,440
similarly initial condition windows and

1091
00:42:09,440 --> 00:42:12,560
a lot of other tcp and http options

1092
00:42:12,560 --> 00:42:14,880
uh now traditionally the operator

1093
00:42:14,880 --> 00:42:16,800
selects one set of configuration that

1094
00:42:16,800 --> 00:42:18,800
are then used homogeneously for the

1095
00:42:18,800 --> 00:42:20,880
entire user base

1096
00:42:20,880 --> 00:42:22,640
uh the goal here is to maximize

1097
00:42:22,640 --> 00:42:23,760
performance

1098
00:42:23,760 --> 00:42:25,119
uh but in this work we asked this

1099
00:42:25,119 --> 00:42:26,400
question that

1100
00:42:26,400 --> 00:42:27,359
uh

1101
00:42:27,359 --> 00:42:30,240
is this approach really optimal so if

1102
00:42:30,240 --> 00:42:31,520
you're using a single set of

1103
00:42:31,520 --> 00:42:34,480
configurations for possibly diverse

1104
00:42:34,480 --> 00:42:36,480
users you have to go even closer to the

1105
00:42:36,480 --> 00:42:37,520
mic

1106
00:42:37,520 --> 00:42:40,000
uh is this one take it off if you want

1107
00:42:40,000 --> 00:42:41,760
okay

1108
00:42:41,760 --> 00:42:43,520
is this one-size-fits-all approach

1109
00:42:43,520 --> 00:42:45,839
really optimal

1110
00:42:45,839 --> 00:42:47,760
so in practice users are not really

1111
00:42:47,760 --> 00:42:49,280
homogeneous

1112
00:42:49,280 --> 00:42:50,800
because they come from different regions

1113
00:42:50,800 --> 00:42:51,920
uh they have different last-minute

1114
00:42:51,920 --> 00:42:54,400
connections like 2g 3g 4g and they have

1115
00:42:54,400 --> 00:42:55,359
different

1116
00:42:55,359 --> 00:42:58,319
devices and the reason uh this makes it

1117
00:42:58,319 --> 00:43:00,000
a challenge to select right

1118
00:43:00,000 --> 00:43:02,240
configuration is that uh protocol

1119
00:43:02,240 --> 00:43:03,760
performance is sensitive to all these

1120
00:43:03,760 --> 00:43:04,880
features

1121
00:43:04,880 --> 00:43:06,480
so assuming that we have different

1122
00:43:06,480 --> 00:43:08,000
network paths with different delay

1123
00:43:08,000 --> 00:43:09,359
different loss and different bandwidth

1124
00:43:09,359 --> 00:43:11,920
properties uh the choice of optimal

1125
00:43:11,920 --> 00:43:14,400
congestion control might be different

1126
00:43:14,400 --> 00:43:15,440
so

1127
00:43:15,440 --> 00:43:17,440
a consequence of this observation is

1128
00:43:17,440 --> 00:43:20,400
that uh the one-size-fits-all approach

1129
00:43:20,400 --> 00:43:22,480
might not be optimal when we're talking

1130
00:43:22,480 --> 00:43:26,800
about heterogeneous connections

1131
00:43:26,800 --> 00:43:29,760
so the goal of this work is to how to

1132
00:43:29,760 --> 00:43:32,079
dynamically tune the networking stack so

1133
00:43:32,079 --> 00:43:33,599
that we can maximize performance for

1134
00:43:33,599 --> 00:43:36,160
diverse connections but before

1135
00:43:36,160 --> 00:43:37,359
we

1136
00:43:37,359 --> 00:43:39,599
i start talking about system uh let's go

1137
00:43:39,599 --> 00:43:40,800
over some of the measurements that we

1138
00:43:40,800 --> 00:43:42,000
did

1139
00:43:42,000 --> 00:43:44,480
so we started with the review of what

1140
00:43:44,480 --> 00:43:45,920
are the three traditional approaches

1141
00:43:45,920 --> 00:43:48,000
that that are currently being used uh

1142
00:43:48,000 --> 00:43:50,800
the first one is default where operators

1143
00:43:50,800 --> 00:43:53,119
do not apply any explicit turning and

1144
00:43:53,119 --> 00:43:54,720
they simply use the configuration that

1145
00:43:54,720 --> 00:43:57,119
are set by default in either kernel or

1146
00:43:57,119 --> 00:43:58,400
in servers

1147
00:43:58,400 --> 00:44:00,240
the second is hand-picked where

1148
00:44:00,240 --> 00:44:02,319
operators

1149
00:44:02,319 --> 00:44:04,319
run out multiple uh

1150
00:44:04,319 --> 00:44:05,839
measurements from in different regions

1151
00:44:05,839 --> 00:44:07,440
and based on that they see that okay

1152
00:44:07,440 --> 00:44:09,200
these configurations are working better

1153
00:44:09,200 --> 00:44:11,760
so we we're going to select those

1154
00:44:11,760 --> 00:44:13,440
and the third one uh we see some

1155
00:44:13,440 --> 00:44:15,040
evidence in literature that people are

1156
00:44:15,040 --> 00:44:17,760
building dynamic systems where they use

1157
00:44:17,760 --> 00:44:19,680
algorithms like business optimization or

1158
00:44:19,680 --> 00:44:21,440
reinforcement learning to tune their

1159
00:44:21,440 --> 00:44:22,880
configuration but they are mostly

1160
00:44:22,880 --> 00:44:24,560
limited to either a single configuration

1161
00:44:24,560 --> 00:44:26,400
like initialization window or a single

1162
00:44:26,400 --> 00:44:29,280
layer like tcp

1163
00:44:29,280 --> 00:44:32,160
so in order to test that uh we leveraged

1164
00:44:32,160 --> 00:44:35,520
some public packet traces and we got a

1165
00:44:35,520 --> 00:44:37,520
we got a network trace from a production

1166
00:44:37,520 --> 00:44:39,440
cdn with billions of users across the

1167
00:44:39,440 --> 00:44:40,240
world

1168
00:44:40,240 --> 00:44:43,040
and we used that traces to simulate a

1169
00:44:43,040 --> 00:44:44,560
representative network condition in a

1170
00:44:44,560 --> 00:44:45,839
local testbed

1171
00:44:45,839 --> 00:44:47,200
so what we did was for each of the

1172
00:44:47,200 --> 00:44:48,160
network

1173
00:44:48,160 --> 00:44:50,319
uh we sweep the entire configuration

1174
00:44:50,319 --> 00:44:52,400
space so basically from the server side

1175
00:44:52,400 --> 00:44:53,440
we

1176
00:44:53,440 --> 00:44:55,839
set every possible configuration for tcp

1177
00:44:55,839 --> 00:44:58,240
and http configurations and we measured

1178
00:44:58,240 --> 00:44:59,839
page load time for alexa top on it

1179
00:44:59,839 --> 00:45:01,200
website

1180
00:45:01,200 --> 00:45:03,599
so once this entire sweep was complete

1181
00:45:03,599 --> 00:45:05,920
we created an oracle that has like

1182
00:45:05,920 --> 00:45:07,839
complete knowledge of the configuration

1183
00:45:07,839 --> 00:45:10,000
network space and can always select the

1184
00:45:10,000 --> 00:45:11,760
best configuration

1185
00:45:11,760 --> 00:45:13,680
so in this figure here you see

1186
00:45:13,680 --> 00:45:15,520
the improvement in page load time on the

1187
00:45:15,520 --> 00:45:17,839
x-axis and we see that for the hand pick

1188
00:45:17,839 --> 00:45:19,760
configuration there is some improvement

1189
00:45:19,760 --> 00:45:21,760
uh but it's mostly capped by twenty

1190
00:45:21,760 --> 00:45:23,920
percent at tail because uh hand pick

1191
00:45:23,920 --> 00:45:25,359
configuration though

1192
00:45:25,359 --> 00:45:27,119
being manually selected uh they're still

1193
00:45:27,119 --> 00:45:29,119
static and they stay the same across

1194
00:45:29,119 --> 00:45:32,319
diverse connections

1195
00:45:32,319 --> 00:45:34,640
uh for this orange line for the tcpcc we

1196
00:45:34,640 --> 00:45:36,160
used oracle

1197
00:45:36,160 --> 00:45:39,280
to uh tune a single configuration which

1198
00:45:39,280 --> 00:45:41,839
is the condition control so basically

1199
00:45:41,839 --> 00:45:43,440
based on the type of network uh we

1200
00:45:43,440 --> 00:45:45,599
selected the config congestion control

1201
00:45:45,599 --> 00:45:47,520
that maximizes

1202
00:45:47,520 --> 00:45:50,319
actually minimizes that pace load time

1203
00:45:50,319 --> 00:45:53,040
so we see that at a tail uh improvement

1204
00:45:53,040 --> 00:45:55,200
there's a better improvement but around

1205
00:45:55,200 --> 00:45:58,319
the medium is still the same

1206
00:45:58,720 --> 00:46:00,560
in the third case uh the green line uh

1207
00:46:00,560 --> 00:46:02,480
we use bayesian optimization which is a

1208
00:46:02,480 --> 00:46:05,119
algorithm for auto tuning uh systems

1209
00:46:05,119 --> 00:46:07,680
uh and interestingly uh the improvement

1210
00:46:07,680 --> 00:46:09,680
uh results are not that good

1211
00:46:09,680 --> 00:46:12,160
uh because we noticed that uh

1212
00:46:12,160 --> 00:46:15,040
this algorithm is not really a good fit

1213
00:46:15,040 --> 00:46:16,000
for

1214
00:46:16,000 --> 00:46:17,599
network internet measurement case where

1215
00:46:17,599 --> 00:46:18,720
we have

1216
00:46:18,720 --> 00:46:20,880
lots of dynamicity we have lots of

1217
00:46:20,880 --> 00:46:22,160
noises

1218
00:46:22,160 --> 00:46:24,960
and it sort of derails the optimization

1219
00:46:24,960 --> 00:46:27,200
process

1220
00:46:27,200 --> 00:46:29,440
and finally we see the uh results for

1221
00:46:29,440 --> 00:46:31,680
the oracle which tunes uh across the

1222
00:46:31,680 --> 00:46:32,960
different layers

1223
00:46:32,960 --> 00:46:34,800
and we see uh we make team observation

1224
00:46:34,800 --> 00:46:36,319
here

1225
00:46:36,319 --> 00:46:37,599
first uh

1226
00:46:37,599 --> 00:46:40,000
at the tail we see up to 70 and more

1227
00:46:40,000 --> 00:46:42,640
improvement which sort of motivates that

1228
00:46:42,640 --> 00:46:44,240
dynamic tuning

1229
00:46:44,240 --> 00:46:46,720
opens uh an opportunity here where we

1230
00:46:46,720 --> 00:46:50,319
can uh optimize the page layout times

1231
00:46:50,319 --> 00:46:52,560
second uh the gap between the

1232
00:46:52,560 --> 00:46:54,560
orange and the red line

1233
00:46:54,560 --> 00:46:56,160
basically motivates that we we should

1234
00:46:56,160 --> 00:46:57,839
use uh crosslayer tuning instead of

1235
00:46:57,839 --> 00:47:00,079
tuning just a single uh configuration

1236
00:47:00,079 --> 00:47:02,640
like congestion control

1237
00:47:02,640 --> 00:47:04,640
and finally the the gap between the red

1238
00:47:04,640 --> 00:47:07,680
and the our green line uh shows us that

1239
00:47:07,680 --> 00:47:10,079
uh the existing algorithm for autotuning

1240
00:47:10,079 --> 00:47:12,560
are not that a good fit uh for this case

1241
00:47:12,560 --> 00:47:16,960
so we need we need a better algorithm

1242
00:47:17,839 --> 00:47:20,160
so basically uh to achieve these goals

1243
00:47:20,160 --> 00:47:21,920
we built a system called confignator

1244
00:47:21,920 --> 00:47:23,680
which optimizes the performance by

1245
00:47:23,680 --> 00:47:25,280
systematically reconfiguring the

1246
00:47:25,280 --> 00:47:26,960
networking stack

1247
00:47:26,960 --> 00:47:29,359
so confignator takes into input features

1248
00:47:29,359 --> 00:47:31,440
like website properties our user's

1249
00:47:31,440 --> 00:47:33,280
network or the connections network and

1250
00:47:33,280 --> 00:47:34,480
the device

1251
00:47:34,480 --> 00:47:35,839
and

1252
00:47:35,839 --> 00:47:37,200
it tries to

1253
00:47:37,200 --> 00:47:40,079
find a near optimal configuration

1254
00:47:40,079 --> 00:47:42,160
in a minimal number of such steps so

1255
00:47:42,160 --> 00:47:46,000
that web performance can be improved

1256
00:47:49,200 --> 00:47:51,119
so we faced a number of challenges in

1257
00:47:51,119 --> 00:47:53,280
the design of confignator

1258
00:47:53,280 --> 00:47:55,359
uh since we are talking about internet

1259
00:47:55,359 --> 00:47:58,160
um into environments and cdn scale uh

1260
00:47:58,160 --> 00:48:00,319
there's a cure associated here

1261
00:48:00,319 --> 00:48:02,240
uh if it's just a bad configuration then

1262
00:48:02,240 --> 00:48:03,920
it's going to hurt performance and

1263
00:48:03,920 --> 00:48:05,440
possibly revenue

1264
00:48:05,440 --> 00:48:07,040
and further there's high dimensionality

1265
00:48:07,040 --> 00:48:08,640
of devices and last mile connection

1266
00:48:08,640 --> 00:48:10,559
there's network dynamics uh because

1267
00:48:10,559 --> 00:48:12,079
network changes over time and there's

1268
00:48:12,079 --> 00:48:15,119
noise uh so these sort of properties

1269
00:48:15,119 --> 00:48:17,520
makes it hard to create a performance

1270
00:48:17,520 --> 00:48:20,640
model that can accurately represent uh

1271
00:48:20,640 --> 00:48:22,079
the performance of the configuration so

1272
00:48:22,079 --> 00:48:24,400
that we can select the right one

1273
00:48:24,400 --> 00:48:25,680
and finally we have some system

1274
00:48:25,680 --> 00:48:28,000
limitations that uh we don't have the

1275
00:48:28,000 --> 00:48:29,359
networking stacks

1276
00:48:29,359 --> 00:48:31,280
available right now that can tune the

1277
00:48:31,280 --> 00:48:33,280
configurations in a low overhead manner

1278
00:48:33,280 --> 00:48:35,280
so we can use things like set socket rpt

1279
00:48:35,280 --> 00:48:37,119
but it means that we are going

1280
00:48:37,119 --> 00:48:38,880
we need will need to uh change

1281
00:48:38,880 --> 00:48:40,480
application code itself and we want it

1282
00:48:40,480 --> 00:48:42,160
to be non-invasive

1283
00:48:42,160 --> 00:48:43,839
so basically there's two set of uh

1284
00:48:43,839 --> 00:48:45,760
challenges some could be solved to

1285
00:48:45,760 --> 00:48:47,359
algorithmic design and others could be

1286
00:48:47,359 --> 00:48:50,960
solved through system design

1287
00:48:51,280 --> 00:48:52,800
so in order to

1288
00:48:52,800 --> 00:48:54,640
solve these challenges we use a split

1289
00:48:54,640 --> 00:48:57,520
pin architecture for config confignator

1290
00:48:57,520 --> 00:48:59,760
there's a central uh control plane

1291
00:48:59,760 --> 00:49:02,400
called config manager uh which which

1292
00:49:02,400 --> 00:49:04,240
runs in a data event manner it sort of

1293
00:49:04,240 --> 00:49:06,559
ingests data from uh all the servers in

1294
00:49:06,559 --> 00:49:08,400
the edge and it builds performance

1295
00:49:08,400 --> 00:49:10,079
models through which it can know that

1296
00:49:10,079 --> 00:49:11,359
which configuration should be used for a

1297
00:49:11,359 --> 00:49:12,960
certain type of network

1298
00:49:12,960 --> 00:49:14,400
and then there's a data blend component

1299
00:49:14,400 --> 00:49:16,160
called config agent which is basically a

1300
00:49:16,160 --> 00:49:18,319
piece of code that runs on every edge

1301
00:49:18,319 --> 00:49:19,839
server

1302
00:49:19,839 --> 00:49:21,119
so

1303
00:49:21,119 --> 00:49:23,680
for uh tuning the configurations we

1304
00:49:23,680 --> 00:49:24,960
wrote a kernel module and several

1305
00:49:24,960 --> 00:49:26,160
callbacks

1306
00:49:26,160 --> 00:49:28,559
through which we can tune tcp and http

1307
00:49:28,559 --> 00:49:30,319
configurations and since this config

1308
00:49:30,319 --> 00:49:32,640
agent is on the fast path uh

1309
00:49:32,640 --> 00:49:36,319
it uh it caches uh configuration uh

1310
00:49:36,319 --> 00:49:39,200
mappings that the control pin generates

1311
00:49:39,200 --> 00:49:41,440
and it use that for real-time

1312
00:49:41,440 --> 00:49:44,720
configuration decisions

1313
00:49:44,720 --> 00:49:46,960
at the control point side uh it's it

1314
00:49:46,960 --> 00:49:48,480
it's uh the workflow looks something

1315
00:49:48,480 --> 00:49:49,440
like this

1316
00:49:49,440 --> 00:49:50,160
so

1317
00:49:50,160 --> 00:49:52,400
config agent with that runs on servers

1318
00:49:52,400 --> 00:49:53,280
uh

1319
00:49:53,280 --> 00:49:54,720
sends data about

1320
00:49:54,720 --> 00:49:56,800
a connection feature such as network uh

1321
00:49:56,800 --> 00:49:59,119
and performance metrics like page load

1322
00:49:59,119 --> 00:49:59,839
and

1323
00:49:59,839 --> 00:50:03,558
these disinformation

1324
00:54:48,240 --> 00:54:49,119
so

1325
00:54:49,119 --> 00:54:51,119
and also the other percentage is

1326
00:54:51,119 --> 00:54:54,319
non-zero i'm kind of confused

1327
00:54:54,319 --> 00:54:55,119
seems

1328
00:54:55,119 --> 00:54:57,920
at some moment like 20 of the time you

1329
00:54:57,920 --> 00:54:59,520
get worse

1330
00:54:59,520 --> 00:55:01,440
yes you get worse uh

1331
00:55:01,440 --> 00:55:03,520
result what's the reason

1332
00:55:03,520 --> 00:55:06,160
so uh we're talking about an online

1333
00:55:06,160 --> 00:55:08,799
online search algorithm case here so

1334
00:55:08,799 --> 00:55:10,799
definitely we're going to run into cases

1335
00:55:10,799 --> 00:55:11,599
where

1336
00:55:11,599 --> 00:55:13,440
while we are searching for new

1337
00:55:13,440 --> 00:55:14,799
configuration

1338
00:55:14,799 --> 00:55:17,839
uh if you have no context about what our

1339
00:55:17,839 --> 00:55:19,280
network uh

1340
00:55:19,280 --> 00:55:21,280
what works better for a network we are

1341
00:55:21,280 --> 00:55:22,480
going to definitely run into a case

1342
00:55:22,480 --> 00:55:24,400
where we we might be

1343
00:55:24,400 --> 00:55:26,480
testing some configuration that have an

1344
00:55:26,480 --> 00:55:28,880
adverse impact on the performance

1345
00:55:28,880 --> 00:55:30,559
but the property of the algorithm that

1346
00:55:30,559 --> 00:55:32,160
we developed was that that should be

1347
00:55:32,160 --> 00:55:34,720
minimum so the search should be directed

1348
00:55:34,720 --> 00:55:37,520
uh so that's why uh there is a negative

1349
00:55:37,520 --> 00:55:39,440
impact here but we the algorithm tries

1350
00:55:39,440 --> 00:55:41,280
to keep it to a minimum so in the paper

1351
00:55:41,280 --> 00:55:43,440
we have experiments where we sort of try

1352
00:55:43,440 --> 00:55:44,799
out different versions of of the

1353
00:55:44,799 --> 00:55:46,240
algorithm and show that

1354
00:55:46,240 --> 00:55:47,680
this is sort of the minimum that we can

1355
00:55:47,680 --> 00:55:50,319
get right now

1356
00:55:50,400 --> 00:55:53,920
and we have been in the remote queue

1357
00:55:54,640 --> 00:55:55,440
hi

1358
00:55:55,440 --> 00:55:57,200
ben schwartz uh sorry i missed a bunch

1359
00:55:57,200 --> 00:55:58,880
of this presentation due to the the

1360
00:55:58,880 --> 00:56:01,280
glitch but i wanted to ask if you've

1361
00:56:01,280 --> 00:56:03,599
thought about the game theoretic

1362
00:56:03,599 --> 00:56:05,920
questions here how much of this

1363
00:56:05,920 --> 00:56:07,680
uh how much of this gain is somebody

1364
00:56:07,680 --> 00:56:10,640
else's loss you know is this uh

1365
00:56:10,640 --> 00:56:12,960
is this a competition

1366
00:56:12,960 --> 00:56:14,720
so that's a great question so in the in

1367
00:56:14,720 --> 00:56:16,319
the paper we talked about we talked

1368
00:56:16,319 --> 00:56:17,760
about fairness

1369
00:56:17,760 --> 00:56:19,839
uh but we haven't actively looked into

1370
00:56:19,839 --> 00:56:22,480
the game theory aspect yet so currently

1371
00:56:22,480 --> 00:56:24,160
uh we are working on some future work

1372
00:56:24,160 --> 00:56:25,680
where we are trying to

1373
00:56:25,680 --> 00:56:27,839
uh present this problem as

1374
00:56:27,839 --> 00:56:30,160
as you said game two between two uh two

1375
00:56:30,160 --> 00:56:31,920
players and we are trying to see if we

1376
00:56:31,920 --> 00:56:34,480
can find a good nash equilibrium there

1377
00:56:34,480 --> 00:56:36,079
because like let's say in the future

1378
00:56:36,079 --> 00:56:38,079
case 10 10 or 15 years from now if

1379
00:56:38,079 --> 00:56:40,000
everyone is sort of running these sort

1380
00:56:40,000 --> 00:56:42,160
of systems

1381
00:56:42,160 --> 00:56:44,079
then they're kind of competing against

1382
00:56:44,079 --> 00:56:45,760
each other uh

1383
00:56:45,760 --> 00:56:48,960
because if the choice of my competition

1384
00:56:48,960 --> 00:56:50,880
changes then my choice is also bound to

1385
00:56:50,880 --> 00:56:52,000
change

1386
00:56:52,000 --> 00:56:54,640
uh so yeah we don't really address the

1387
00:56:54,640 --> 00:56:57,200
game theory uh aspect in this paper yet

1388
00:56:57,200 --> 00:56:58,480
but we are currently looking into it

1389
00:56:58,480 --> 00:57:01,440
more in the future work

1390
00:57:01,440 --> 00:57:03,359
thank you uh i would say that you know i

1391
00:57:03,359 --> 00:57:05,359
think that nash equilibrium has a name

1392
00:57:05,359 --> 00:57:08,400
it's the ietf

1393
00:57:11,680 --> 00:57:14,240
yeah so thanks for having you here

1394
00:57:14,240 --> 00:57:17,359
thank you thanks

1395
00:57:20,480 --> 00:57:23,280
and next we have marcos

1396
00:57:23,280 --> 00:57:27,799
you request sharing yourself yeah

1397
00:57:37,119 --> 00:57:40,440
there you go

1398
00:57:41,760 --> 00:57:45,200
okay hi i'm marcus and together with my

1399
00:57:45,200 --> 00:57:46,480
co-authors

1400
00:57:46,480 --> 00:57:48,799
we investigated uh

1401
00:57:48,799 --> 00:57:51,440
how we can use tls to fingerprint

1402
00:57:51,440 --> 00:57:53,839
servers and find similarities among

1403
00:57:53,839 --> 00:57:56,079
these server deployments to use it for

1404
00:57:56,079 --> 00:57:58,960
further use cases

1405
00:57:59,200 --> 00:58:00,010
all right um

1406
00:58:00,010 --> 00:58:03,109
[Music]

1407
00:58:06,160 --> 00:58:09,839
it cannot it's not working

1408
00:58:11,839 --> 00:58:14,880
try requesting again

1409
00:58:18,319 --> 00:58:22,040
try requesting again

1410
00:58:25,680 --> 00:58:29,440
no i didn't see it all okay

1411
00:58:30,400 --> 00:58:31,680
then you just have to tell me when you

1412
00:58:31,680 --> 00:58:34,640
go to the yeah i'll do

1413
00:58:35,040 --> 00:58:37,839
yes uh so very short introduction to tls

1414
00:58:37,839 --> 00:58:39,520
as you probably all know everyone is

1415
00:58:39,520 --> 00:58:41,040
using it it's probably the effective

1416
00:58:41,040 --> 00:58:42,240
standard of all the encrypted

1417
00:58:42,240 --> 00:58:44,000
communication on the internet

1418
00:58:44,000 --> 00:58:45,040
and

1419
00:58:45,040 --> 00:58:47,200
it's also already quite old so this

1420
00:58:47,200 --> 00:58:49,280
means it has been grown to a very

1421
00:58:49,280 --> 00:58:51,920
complex ecosystem

1422
00:58:51,920 --> 00:58:53,839
which means now that in the initial

1423
00:58:53,839 --> 00:58:56,319
handshake the clients and servers they

1424
00:58:56,319 --> 00:58:58,480
need to exchange a lot about a lot of

1425
00:58:58,480 --> 00:59:00,880
information about their own capabilities

1426
00:59:00,880 --> 00:59:02,480
such that you can find a mutual

1427
00:59:02,480 --> 00:59:05,119
encryption base and the idea of this

1428
00:59:05,119 --> 00:59:07,119
work was now we can collect this

1429
00:59:07,119 --> 00:59:09,359
metadata and we can use it to

1430
00:59:09,359 --> 00:59:12,000
fingerprint a tls stack on the server

1431
00:59:12,000 --> 00:59:13,920
like tls stack as a combination between

1432
00:59:13,920 --> 00:59:14,880
config

1433
00:59:14,880 --> 00:59:17,119
implementation hardware so next slide

1434
00:59:17,119 --> 00:59:19,440
please

1435
00:59:20,079 --> 00:59:21,280
all right so if i'm talking about

1436
00:59:21,280 --> 00:59:22,960
fingerprinting what does it mean it's

1437
00:59:22,960 --> 00:59:25,040
basically just collecting

1438
00:59:25,040 --> 00:59:27,280
characteristics about tls that you

1439
00:59:27,280 --> 00:59:30,000
summary represent as a fingerprint and

1440
00:59:30,000 --> 00:59:31,839
then you build a database that maps

1441
00:59:31,839 --> 00:59:33,440
these fingerprints to something that is

1442
00:59:33,440 --> 00:59:35,359
just not directly related but somehow

1443
00:59:35,359 --> 00:59:37,680
useful and for example you could have

1444
00:59:37,680 --> 00:59:40,079
see these three fingerprints here maybe

1445
00:59:40,079 --> 00:59:41,040
one in

1446
00:59:41,040 --> 00:59:43,680
indicates an idf web server another

1447
00:59:43,680 --> 00:59:46,000
fingerprint might indicate an nginx

1448
00:59:46,000 --> 00:59:48,319
docker image or even a malicious

1449
00:59:48,319 --> 00:59:50,319
commanding control server

1450
00:59:50,319 --> 00:59:52,400
of course these are all just indicators

1451
00:59:52,400 --> 00:59:54,079
but they work

1452
00:59:54,079 --> 00:59:56,400
so next slide please

1453
00:59:56,400 --> 00:59:58,559
all right so let's have a short look at

1454
00:59:58,559 --> 01:00:01,280
the tls 1.3 handshake and what

1455
01:00:01,280 --> 01:00:02,799
information is there that we can use for

1456
01:00:02,799 --> 01:00:04,000
fingerprinting

1457
01:00:04,000 --> 01:00:05,200
so

1458
01:00:05,200 --> 01:00:08,240
as you can see like the tls works by

1459
01:00:08,240 --> 01:00:11,440
for that a client sends a server hello

1460
01:00:11,440 --> 01:00:14,400
to a server that initiates the handshake

1461
01:00:14,400 --> 01:00:16,240
it contains the version session specific

1462
01:00:16,240 --> 01:00:18,720
information cypher suits and a whole

1463
01:00:18,720 --> 01:00:20,880
bunch of tls extensions

1464
01:00:20,880 --> 01:00:23,040
now the server looks at it and responds

1465
01:00:23,040 --> 01:00:25,119
with a server hello that again contains

1466
01:00:25,119 --> 01:00:26,400
a version

1467
01:00:26,400 --> 01:00:28,880
a cypher suit and tls extensions that

1468
01:00:28,880 --> 01:00:30,480
are usually a response to the versions

1469
01:00:30,480 --> 01:00:31,760
from the client

1470
01:00:31,760 --> 01:00:34,400
and then now tls 1.3 specific the

1471
01:00:34,400 --> 01:00:35,920
handshake gets encrypted you get these

1472
01:00:35,920 --> 01:00:37,520
encrypted extensions certificate

1473
01:00:37,520 --> 01:00:38,720
extensions

1474
01:00:38,720 --> 01:00:41,040
and so on and now all this information

1475
01:00:41,040 --> 01:00:43,680
that is written in bold somehow depends

1476
01:00:43,680 --> 01:00:46,400
on the tls stack that is on the server

1477
01:00:46,400 --> 01:00:48,079
so if we collect this information we can

1478
01:00:48,079 --> 01:00:50,720
use it to fingerprint the server

1479
01:00:50,720 --> 01:00:53,040
right continue please

1480
01:00:53,040 --> 01:00:55,040
all right why should you need such a

1481
01:00:55,040 --> 01:00:57,040
thing so there were three applications

1482
01:00:57,040 --> 01:00:59,680
we thought about how this could be used

1483
01:00:59,680 --> 01:01:02,319
uh first of all an intrusion detection

1484
01:01:02,319 --> 01:01:03,599
system could use

1485
01:01:03,599 --> 01:01:05,599
such a fingerprinting mechanism to just

1486
01:01:05,599 --> 01:01:07,760
gain an additional source of information

1487
01:01:07,760 --> 01:01:09,040
for example you could fingerprint all

1488
01:01:09,040 --> 01:01:11,280
the servers in network flows and then

1489
01:01:11,280 --> 01:01:13,760
just look up the fingerprints in a

1490
01:01:13,760 --> 01:01:16,000
database of known malicious fingerprints

1491
01:01:16,000 --> 01:01:17,440
or you could use it in intel white

1492
01:01:17,440 --> 01:01:20,079
measurements where you really use these

1493
01:01:20,079 --> 01:01:22,240
fingerprinting fingerprints to actively

1494
01:01:22,240 --> 01:01:24,559
hunt for new threats or you could use it

1495
01:01:24,559 --> 01:01:27,440
to monitor your own servers right now

1496
01:01:27,440 --> 01:01:29,119
uh basically

1497
01:01:29,119 --> 01:01:30,640
if the fingerprints change from your own

1498
01:01:30,640 --> 01:01:32,720
server something happened uh this might

1499
01:01:32,720 --> 01:01:34,480
be intended or unintended you might

1500
01:01:34,480 --> 01:01:36,400
intend to change your software or there

1501
01:01:36,400 --> 01:01:38,079
has even been a melbourne infection

1502
01:01:38,079 --> 01:01:40,480
happening and somehow changing the dtls

1503
01:01:40,480 --> 01:01:41,440
deck

1504
01:01:41,440 --> 01:01:43,599
right next slide please

1505
01:01:43,599 --> 01:01:45,119
all right so before i get into some

1506
01:01:45,119 --> 01:01:47,200
results let me share a small problem we

1507
01:01:47,200 --> 01:01:49,920
had in the beginning it was that we did

1508
01:01:49,920 --> 01:01:51,520
this fingerprinting with some default

1509
01:01:51,520 --> 01:01:53,359
client hellos from the library it just

1510
01:01:53,359 --> 01:01:56,240
didn't work so it was actually because

1511
01:01:56,240 --> 01:01:57,599
we didn't collect enough information

1512
01:01:57,599 --> 01:01:58,880
from the server

1513
01:01:58,880 --> 01:02:00,960
due to this question answer design of

1514
01:02:00,960 --> 01:02:04,480
tls that is intended to hide information

1515
01:02:04,480 --> 01:02:07,359
but as you can see this is an example so

1516
01:02:07,359 --> 01:02:09,359
um

1517
01:02:09,359 --> 01:02:11,200
in the client hello just looking at the

1518
01:02:11,200 --> 01:02:13,359
cypher suits in a client hello this line

1519
01:02:13,359 --> 01:02:14,960
sends a whole bunch of cypher suits it

1520
01:02:14,960 --> 01:02:16,880
could be hundreds of cypher suits to the

1521
01:02:16,880 --> 01:02:19,119
server the server looks at this list and

1522
01:02:19,119 --> 01:02:21,920
selects a single cypher suit and from

1523
01:02:21,920 --> 01:02:23,839
this example you can see why tls

1524
01:02:23,839 --> 01:02:25,520
fingerprinting is already quite common

1525
01:02:25,520 --> 01:02:26,240
for

1526
01:02:26,240 --> 01:02:28,720
clients because the client reviews a lot

1527
01:02:28,720 --> 01:02:30,720
of information about it so the server

1528
01:02:30,720 --> 01:02:32,839
does not so that's not a lot of

1529
01:02:32,839 --> 01:02:35,440
information and this led us came to the

1530
01:02:35,440 --> 01:02:37,359
conclusion that well we should not use

1531
01:02:37,359 --> 01:02:39,599
default client hellos we need some how

1532
01:02:39,599 --> 01:02:41,200
unusual client hellos that really

1533
01:02:41,200 --> 01:02:42,160
trigger

1534
01:02:42,160 --> 01:02:44,240
new behaviors from the server and we

1535
01:02:44,240 --> 01:02:46,000
need to send multiple client hellos to

1536
01:02:46,000 --> 01:02:48,480
the server that somehow complement each

1537
01:02:48,480 --> 01:02:51,119
other so we learn even more

1538
01:02:51,119 --> 01:02:54,000
and like a third point was like if we

1539
01:02:54,000 --> 01:02:55,839
now send multiple client hellos and we

1540
01:02:55,839 --> 01:02:58,000
want to have a scalable approach we need

1541
01:02:58,000 --> 01:03:00,640
to somehow find a trade-off between

1542
01:03:00,640 --> 01:03:02,720
the the amount of data we want to learn

1543
01:03:02,720 --> 01:03:05,200
about the server and this costs of the

1544
01:03:05,200 --> 01:03:06,799
whole fingerprinting

1545
01:03:06,799 --> 01:03:09,520
like costs meaning the time it takes and

1546
01:03:09,520 --> 01:03:11,280
also the impact we have on the server

1547
01:03:11,280 --> 01:03:13,520
because we probably do not want to

1548
01:03:13,520 --> 01:03:16,960
perform an unintentional dos attack

1549
01:03:16,960 --> 01:03:19,359
if you take too many requests

1550
01:03:19,359 --> 01:03:21,039
all right this led us to these three

1551
01:03:21,039 --> 01:03:22,880
research questions so first of all how

1552
01:03:22,880 --> 01:03:25,599
can we relate now similar deployments

1553
01:03:25,599 --> 01:03:27,520
how can we improve the effectiveness

1554
01:03:27,520 --> 01:03:29,680
effectiveness of our client hellos and

1555
01:03:29,680 --> 01:03:32,160
what's not the informants of use cases

1556
01:03:32,160 --> 01:03:33,440
so let's have a look at the first

1557
01:03:33,440 --> 01:03:35,280
research question

1558
01:03:35,280 --> 01:03:37,359
basically relate these servers by well

1559
01:03:37,359 --> 01:03:40,319
fingerprinting but in a way that we

1560
01:03:40,319 --> 01:03:42,640
extract all these handshake features

1561
01:03:42,640 --> 01:03:44,880
from the tls handshake in a way that

1562
01:03:44,880 --> 01:03:46,240
similar deployments have the same

1563
01:03:46,240 --> 01:03:47,359
fingerprint

1564
01:03:47,359 --> 01:03:50,160
and base code we did we just extracted

1565
01:03:50,160 --> 01:03:51,839
all this information put it together in

1566
01:03:51,839 --> 01:03:54,079
one big string so this you can see this

1567
01:03:54,079 --> 01:03:56,160
is our format but it's of course kind of

1568
01:03:56,160 --> 01:03:58,079
arbitrary you can see it contains the

1569
01:03:58,079 --> 01:04:00,880
version cipher extensions and also the

1570
01:04:00,880 --> 01:04:02,960
tls alerts which are

1571
01:04:02,960 --> 01:04:05,440
error codes in from the tls protocol

1572
01:04:05,440 --> 01:04:06,799
because error handling is of course also

1573
01:04:06,799 --> 01:04:08,720
implementation specific

1574
01:04:08,720 --> 01:04:11,680
and as we send multiple requests to

1575
01:04:11,680 --> 01:04:12,400
server

1576
01:04:12,400 --> 01:04:13,760
well we just

1577
01:04:13,760 --> 01:04:15,920
combined all these representations in

1578
01:04:15,920 --> 01:04:18,799
one big fingerprint

1579
01:04:18,799 --> 01:04:20,160
all right then let's have a look at the

1580
01:04:20,160 --> 01:04:21,760
second research question how can we

1581
01:04:21,760 --> 01:04:24,000
prove now the effectiveness well we did

1582
01:04:24,000 --> 01:04:25,359
this

1583
01:04:25,359 --> 01:04:26,880
basically had this challenge that we do

1584
01:04:26,880 --> 01:04:29,280
not know every implementation so how

1585
01:04:29,280 --> 01:04:30,480
should we know what's the ideal

1586
01:04:30,480 --> 01:04:31,920
combination of client hellos we should

1587
01:04:31,920 --> 01:04:33,599
send

1588
01:04:33,599 --> 01:04:35,200
but what we can definitely do we can

1589
01:04:35,200 --> 01:04:37,440
somehow optimize the effectiveness of

1590
01:04:37,440 --> 01:04:40,400
our client hellos and we did this by

1591
01:04:40,400 --> 01:04:43,119
doing this empirically by basically just

1592
01:04:43,119 --> 01:04:44,799
first of all measuring effectiveness

1593
01:04:44,799 --> 01:04:47,119
which is the metric we use the distinct

1594
01:04:47,119 --> 01:04:48,720
number of fingerprints we were able to

1595
01:04:48,720 --> 01:04:51,039
collect from the servers as a metric

1596
01:04:51,039 --> 01:04:53,039
then perform the measurement with a

1597
01:04:53,039 --> 01:04:55,119
whole bunch of randomly generated client

1598
01:04:55,119 --> 01:04:56,319
hellos

1599
01:04:56,319 --> 01:04:57,680
and then we just

1600
01:04:57,680 --> 01:04:59,280
pick the combination of client hellos

1601
01:04:59,280 --> 01:05:01,440
that maximize this metric and this way

1602
01:05:01,440 --> 01:05:03,440
we generated 10 like scanning client

1603
01:05:03,440 --> 01:05:06,799
hellos we used in the following analysis

1604
01:05:06,799 --> 01:05:08,880
all right so let's have a look at the

1605
01:05:08,880 --> 01:05:11,680
the last point does this work now um

1606
01:05:11,680 --> 01:05:13,680
therefore

1607
01:05:13,680 --> 01:05:17,200
we've designed a smooth study that with

1608
01:05:17,200 --> 01:05:19,200
weekly measurements where we scan these

1609
01:05:19,200 --> 01:05:22,480
two top lists and two block lists uh

1610
01:05:22,480 --> 01:05:25,039
over 30 weeks we were able to collect

1611
01:05:25,039 --> 01:05:27,280
around 100 million fingerprints so quite

1612
01:05:27,280 --> 01:05:29,280
a lot of amount of data we can test our

1613
01:05:29,280 --> 01:05:31,039
approach on

1614
01:05:31,039 --> 01:05:33,039
and now the first use case we had a look

1615
01:05:33,039 --> 01:05:35,039
at the next slide piece

1616
01:05:35,039 --> 01:05:38,079
were cdn servers as a content delivery

1617
01:05:38,079 --> 01:05:40,559
network servers because they were really

1618
01:05:40,559 --> 01:05:42,960
great for us to test our approach on

1619
01:05:42,960 --> 01:05:45,920
because well cdns are basically a single

1620
01:05:45,920 --> 01:05:48,000
actor deploying a large amount of tls

1621
01:05:48,000 --> 01:05:49,680
servers

1622
01:05:49,680 --> 01:05:51,440
which is exactly what we want to be able

1623
01:05:51,440 --> 01:05:53,599
to detect but they also provide us with

1624
01:05:53,599 --> 01:05:55,920
a lot larger amount of data

1625
01:05:55,920 --> 01:05:58,160
and

1626
01:05:58,160 --> 01:05:59,680
okay

1627
01:05:59,680 --> 01:06:01,680
but their service could also be verified

1628
01:06:01,680 --> 01:06:03,440
through other means as well

1629
01:06:03,440 --> 01:06:05,119
so we can generate a ground truth

1630
01:06:05,119 --> 01:06:06,160
through

1631
01:06:06,160 --> 01:06:08,400
for example the a s or certificates they

1632
01:06:08,400 --> 01:06:11,280
return and that's what we did we

1633
01:06:11,280 --> 01:06:14,799
evaluated this cdn detection

1634
01:06:14,799 --> 01:06:16,960
with this ground rule and if you're not

1635
01:06:16,960 --> 01:06:18,799
so familiar with classification metrics

1636
01:06:18,799 --> 01:06:20,640
so we used precision and recall so

1637
01:06:20,640 --> 01:06:22,240
precision is basically the number of

1638
01:06:22,240 --> 01:06:24,079
correct classifications we did and

1639
01:06:24,079 --> 01:06:26,640
recall how many of these ct answers from

1640
01:06:26,640 --> 01:06:28,079
the ground truth we are now able to

1641
01:06:28,079 --> 01:06:30,240
detect so let's have a look at the

1642
01:06:30,240 --> 01:06:31,440
results

1643
01:06:31,440 --> 01:06:33,440
so here can you see this uh precision

1644
01:06:33,440 --> 01:06:36,000
and recall for the four cdn's we had a

1645
01:06:36,000 --> 01:06:38,000
look at as you can see it results for

1646
01:06:38,000 --> 01:06:40,640
akamai alibaba cloudflare and fastly

1647
01:06:40,640 --> 01:06:42,319
you can see that the uh

1648
01:06:42,319 --> 01:06:44,319
like the metrics are quite high for all

1649
01:06:44,319 --> 01:06:47,359
of them so this detection works

1650
01:06:47,359 --> 01:06:49,280
interesting at least for us was for

1651
01:06:49,280 --> 01:06:50,720
cloudflare and fastly it was

1652
01:06:50,720 --> 01:06:52,480
astonishingly high so the precision was

1653
01:06:52,480 --> 01:06:54,079
above 99

1654
01:06:54,079 --> 01:06:56,559
which means their gls configurations are

1655
01:06:56,559 --> 01:06:58,000
very unique among

1656
01:06:58,000 --> 01:07:00,240
in the internet and they're quite easy

1657
01:07:00,240 --> 01:07:01,119
to

1658
01:07:01,119 --> 01:07:02,000
to

1659
01:07:02,000 --> 01:07:05,039
we were able to detect them quite easily

1660
01:07:05,039 --> 01:07:07,920
and what's also interesting for us at

1661
01:07:07,920 --> 01:07:09,119
least was

1662
01:07:09,119 --> 01:07:09,920
that

1663
01:07:09,920 --> 01:07:12,319
with this method we were able to detect

1664
01:07:12,319 --> 01:07:13,440
also

1665
01:07:13,440 --> 01:07:16,079
quite a lot of often at cdn servers

1666
01:07:16,079 --> 01:07:18,880
sometimes in even unexpected places so

1667
01:07:18,880 --> 01:07:21,839
for example for cloudflare we saw some

1668
01:07:21,839 --> 01:07:24,319
servers but there were actually

1669
01:07:24,319 --> 01:07:27,039
reverse proxies a third party has set up

1670
01:07:27,039 --> 01:07:29,440
that somehow proxied all the traffic we

1671
01:07:29,440 --> 01:07:31,839
sent to cloudflare you know why they did

1672
01:07:31,839 --> 01:07:34,559
this but yeah we saw this

1673
01:07:34,559 --> 01:07:37,119
all right so and uh second use case we

1674
01:07:37,119 --> 01:07:38,640
had a look at

1675
01:07:38,640 --> 01:07:40,880
the command control servers

1676
01:07:40,880 --> 01:07:42,559
so where we now really

1677
01:07:42,559 --> 01:07:44,640
are able to

1678
01:07:44,640 --> 01:07:46,720
fingerprint or detect even potentially

1679
01:07:46,720 --> 01:07:49,280
malicious servers

1680
01:07:49,280 --> 01:07:51,119
to make this more realistic we just had

1681
01:07:51,119 --> 01:07:52,319
a look at

1682
01:07:52,319 --> 01:07:54,880
new additions to the tool list

1683
01:07:54,880 --> 01:07:57,520
and because this uh classification

1684
01:07:57,520 --> 01:08:00,319
wasn't that obvious anymore uh we now

1685
01:08:00,319 --> 01:08:02,720
considered like how often we saw a

1686
01:08:02,720 --> 01:08:04,880
fingerprint from top list versus from

1687
01:08:04,880 --> 01:08:07,440
block list to kind of generate a score

1688
01:08:07,440 --> 01:08:09,280
how certain we are we now found a

1689
01:08:09,280 --> 01:08:11,280
commander control server

1690
01:08:11,280 --> 01:08:13,039
and if this score was above a certain

1691
01:08:13,039 --> 01:08:15,760
threshold we just classified it as a cnc

1692
01:08:15,760 --> 01:08:17,359
server

1693
01:08:17,359 --> 01:08:18,719
all right so let's have a look at the

1694
01:08:18,719 --> 01:08:19,759
results

1695
01:08:19,759 --> 01:08:21,359
you can see uh

1696
01:08:21,359 --> 01:08:23,920
now the precision recoil again for this

1697
01:08:23,920 --> 01:08:25,679
detection

1698
01:08:25,679 --> 01:08:28,238
just on the x-axis is now the threshold

1699
01:08:28,238 --> 01:08:30,719
above which we classified this

1700
01:08:30,719 --> 01:08:33,279
see the server as cnc server

1701
01:08:33,279 --> 01:08:35,759
and you can see three different sources

1702
01:08:35,759 --> 01:08:39,439
of input data we used so on the left you

1703
01:08:39,439 --> 01:08:40,319
see

1704
01:08:40,319 --> 01:08:42,960
just the t dls fingerprints we've

1705
01:08:42,960 --> 01:08:44,080
designed

1706
01:08:44,080 --> 01:08:46,399
and which actually works quite fine

1707
01:08:46,399 --> 01:08:48,640
already so the precision is okay let's

1708
01:08:48,640 --> 01:08:50,640
say the recall isn't that high

1709
01:08:50,640 --> 01:08:53,839
especially for the higher thresholds

1710
01:08:53,839 --> 01:08:56,719
we had a look at how to improve this and

1711
01:08:56,719 --> 01:08:58,399
we noticed some

1712
01:08:58,399 --> 01:08:59,198
like

1713
01:08:59,198 --> 01:09:01,839
noticed some strange hdb server headers

1714
01:09:01,839 --> 01:09:04,158
but they weren't really

1715
01:09:04,158 --> 01:09:06,479
good enough to detect these servers uh

1716
01:09:06,479 --> 01:09:08,960
but if we combine this combine both data

1717
01:09:08,960 --> 01:09:11,759
sources uh this uh detection now worked

1718
01:09:11,759 --> 01:09:13,520
quite well so

1719
01:09:13,520 --> 01:09:15,920
in this case we were now able to

1720
01:09:15,920 --> 01:09:17,600
like

1721
01:09:17,600 --> 01:09:20,000
detect almost half of all the new

1722
01:09:20,000 --> 01:09:22,238
additions to these block lists with the

1723
01:09:22,238 --> 01:09:24,479
precision over 99

1724
01:09:24,479 --> 01:09:25,839
this is quite good

1725
01:09:25,839 --> 01:09:28,000
and that's also how we expect people

1726
01:09:28,000 --> 01:09:30,000
will use such a fingerprinting mechanism

1727
01:09:30,000 --> 01:09:31,839
just as in conjunction with additional

1728
01:09:31,839 --> 01:09:33,279
indicators

1729
01:09:33,279 --> 01:09:36,319
all right let's let me conclude our work

1730
01:09:36,319 --> 01:09:38,880
so in this paper we proposed a selection

1731
01:09:38,880 --> 01:09:40,399
of handshake features and the encoding

1732
01:09:40,399 --> 01:09:42,238
as fingerprints as a mechanism to relate

1733
01:09:42,238 --> 01:09:44,640
tls servers we also provide a metal

1734
01:09:44,640 --> 01:09:46,719
methodology to find new client hellos

1735
01:09:46,719 --> 01:09:49,198
for scanning or just provide always some

1736
01:09:49,198 --> 01:09:51,679
10 general purpose clienteles

1737
01:09:51,679 --> 01:09:53,920
we've made a study to really demonstrate

1738
01:09:53,920 --> 01:09:56,239
the potential of this fingerprinting and

1739
01:09:56,239 --> 01:09:59,360
maybe you've heard of it

1740
01:09:59,360 --> 01:10:01,600
there's also this tool called yarn out

1741
01:10:01,600 --> 01:10:04,400
there it's also able to fingerprint tls

1742
01:10:04,400 --> 01:10:06,799
servers

1743
01:10:06,960 --> 01:10:09,120
it was announced one around one and a

1744
01:10:09,120 --> 01:10:11,760
half years ago by salesforce

1745
01:10:11,760 --> 01:10:14,480
or every showed in the paper that our

1746
01:10:14,480 --> 01:10:16,159
mechanism of fingerprinting is actually

1747
01:10:16,159 --> 01:10:17,280
a bit more

1748
01:10:17,280 --> 01:10:18,239
effective

1749
01:10:18,239 --> 01:10:20,239
and we've open sourced all our data and

1750
01:10:20,239 --> 01:10:22,480
code if you want to try it yourself

1751
01:10:22,480 --> 01:10:24,000
thank you

1752
01:10:24,000 --> 01:10:26,080
sorry thanks a lot thanks a lot for

1753
01:10:26,080 --> 01:10:28,000
coming here basically for this

1754
01:10:28,000 --> 01:10:30,320
presentation specifically because you're

1755
01:10:30,320 --> 01:10:32,080
very spontaneous came here and joined us

1756
01:10:32,080 --> 01:10:34,000
i hope you had a good week yeah that's

1757
01:10:34,000 --> 01:10:37,360
great uh we have dave in the queue

1758
01:10:37,360 --> 01:10:40,320
marcus uh that's really interesting um i

1759
01:10:40,320 --> 01:10:42,320
wanted to ask you for a comment on you

1760
01:10:42,320 --> 01:10:43,679
had a slide up where you showed four

1761
01:10:43,679 --> 01:10:46,320
cdn's and the varying precision and

1762
01:10:46,320 --> 01:10:48,960
recall on them i maybe i missed it but

1763
01:10:48,960 --> 01:10:51,120
how were you determining the ground

1764
01:10:51,120 --> 01:10:52,080
truth

1765
01:10:52,080 --> 01:10:54,320
about which cdn they were on

1766
01:10:54,320 --> 01:10:56,080
and the reason i'm asking is what did

1767
01:10:56,080 --> 01:10:57,280
you do with

1768
01:10:57,280 --> 01:10:59,840
content that was multi-cdn like did that

1769
01:10:59,840 --> 01:11:02,800
come up did you did you see

1770
01:11:02,800 --> 01:11:05,360
content that you wanted to validate but

1771
01:11:05,360 --> 01:11:06,159
the

1772
01:11:06,159 --> 01:11:07,920
that content providers using multiple

1773
01:11:07,920 --> 01:11:10,480
cdns

1774
01:11:11,600 --> 01:11:15,199
yep we didn't investigate the multi-cdn

1775
01:11:15,199 --> 01:11:16,400
case

1776
01:11:16,400 --> 01:11:18,960
but how we evaluate it was basically we

1777
01:11:18,960 --> 01:11:20,320
um

1778
01:11:20,320 --> 01:11:23,280
we send a request to this server for

1779
01:11:23,280 --> 01:11:24,640
example for cloudflare if you could

1780
01:11:24,640 --> 01:11:26,960
return us to certificate for

1781
01:11:26,960 --> 01:11:28,320
cloudflare.com

1782
01:11:28,320 --> 01:11:30,880
and if they were able there definitely

1783
01:11:30,880 --> 01:11:34,679
were a cloudflare server

1784
01:11:40,960 --> 01:11:45,040
okay um any further questions

1785
01:11:51,040 --> 01:11:52,080
then

1786
01:11:52,080 --> 01:11:53,840
check out the chat as well there were a

1787
01:11:53,840 --> 01:11:56,400
little bit of discussion and like also

1788
01:11:56,400 --> 01:11:57,679
any further questions can go to the

1789
01:11:57,679 --> 01:11:59,120
mailing list of course

1790
01:11:59,120 --> 01:12:01,280
and we go to the next presentation um

1791
01:12:01,280 --> 01:12:04,640
that's constantine right

1792
01:12:04,640 --> 01:12:07,199
yes i hope you can hear me

1793
01:12:07,199 --> 01:12:09,839
we can hear you

1794
01:12:19,120 --> 01:12:22,480
should be able to select your slides

1795
01:12:22,480 --> 01:12:23,679
well

1796
01:12:23,679 --> 01:12:26,080
somehow i'm not

1797
01:12:26,080 --> 01:12:28,400
okay

1798
01:12:29,280 --> 01:12:31,520
then can you request it again

1799
01:12:31,520 --> 01:12:33,840
yes

1800
01:12:33,920 --> 01:12:36,800
let's try it again no i can do it let me

1801
01:12:36,800 --> 01:12:39,840
see where it is

1802
01:12:42,000 --> 01:12:44,320
okay

1803
01:12:44,400 --> 01:12:47,040
i think you can see it now right

1804
01:12:47,040 --> 01:12:48,640
we can see you we can see the slides we

1805
01:12:48,640 --> 01:12:50,480
can hear you we are ready to go

1806
01:12:50,480 --> 01:12:51,679
okay

1807
01:12:51,679 --> 01:12:53,840
so thank you for all

1808
01:12:53,840 --> 01:12:55,920
inviting me i'm constantine i'm a phd

1809
01:12:55,920 --> 01:12:58,880
student at rwh university in germany

1810
01:12:58,880 --> 01:13:00,640
and i'm going to present you the results

1811
01:13:00,640 --> 01:13:03,199
of our paper in which you took a look at

1812
01:13:03,199 --> 01:13:04,960
the influence of resource prioritization

1813
01:13:04,960 --> 01:13:07,280
on actual hedge of line blocking

1814
01:13:07,280 --> 01:13:09,600
and the performance when using this with

1815
01:13:09,600 --> 01:13:11,920
hp3 and this is joint work with ike and

1816
01:13:11,920 --> 01:13:14,000
klaus but before getting actually into

1817
01:13:14,000 --> 01:13:15,440
the results let me give you a short

1818
01:13:15,440 --> 01:13:17,199
introduction i guess most of you already

1819
01:13:17,199 --> 01:13:19,440
know that but just let me quickly repeat

1820
01:13:19,440 --> 01:13:21,440
this so we want to load a website

1821
01:13:21,440 --> 01:13:22,320
and

1822
01:13:22,320 --> 01:13:23,199
for

1823
01:13:23,199 --> 01:13:24,719
maximum performance you would like to

1824
01:13:24,719 --> 01:13:26,560
load of course all of the resources in

1825
01:13:26,560 --> 01:13:27,920
parallel so you would like to load the

1826
01:13:27,920 --> 01:13:29,920
html but you would also like to load

1827
01:13:29,920 --> 01:13:31,280
already the resources that you

1828
01:13:31,280 --> 01:13:33,040
discovered so for example the two images

1829
01:13:33,040 --> 01:13:35,600
the red and the blue one and with hdb1

1830
01:13:35,600 --> 01:13:37,760
you then just open multiple

1831
01:13:37,760 --> 01:13:39,840
tcp connections to load these resources

1832
01:13:39,840 --> 01:13:41,840
in parallel however this of course came

1833
01:13:41,840 --> 01:13:44,080
with the the overheads of opening

1834
01:13:44,080 --> 01:13:46,400
multiple tcp connections and because of

1835
01:13:46,400 --> 01:13:48,000
that with http 2 it was introduced to

1836
01:13:48,000 --> 01:13:49,920
use just a single tcp connection where

1837
01:13:49,920 --> 01:13:52,080
you then multiplex

1838
01:13:52,080 --> 01:13:53,920
the different resources in in streams

1839
01:13:53,920 --> 01:13:55,600
and stream frames over this one tcp

1840
01:13:55,600 --> 01:13:57,760
connection however the issue is that tcp

1841
01:13:57,760 --> 01:13:59,520
is completely unaware of the streams so

1842
01:13:59,520 --> 01:14:01,760
it just sees a opaque byte stream and

1843
01:14:01,760 --> 01:14:02,960
this can lead to transparent head of

1844
01:14:02,960 --> 01:14:04,480
line blocking so let's say that for

1845
01:14:04,480 --> 01:14:06,320
example for the blue image now one of

1846
01:14:06,320 --> 01:14:08,480
the segments the tcp segments is lost

1847
01:14:08,480 --> 01:14:11,520
which is just carrying the blue

1848
01:14:11,520 --> 01:14:13,840
we saw this information and basically we

1849
01:14:13,840 --> 01:14:15,360
could use the other information for the

1850
01:14:15,360 --> 01:14:17,600
red and the green resources but tcp

1851
01:14:17,600 --> 01:14:19,199
doesn't know this and just now waits for

1852
01:14:19,199 --> 01:14:21,920
the re-transmission of its last segment

1853
01:14:21,920 --> 01:14:23,840
so we have to wait for run round trip

1854
01:14:23,840 --> 01:14:25,040
time and the browser does not get

1855
01:14:25,040 --> 01:14:27,040
further information in that time with

1856
01:14:27,040 --> 01:14:29,840
hbe3 instead quick is used and quick has

1857
01:14:29,840 --> 01:14:31,280
multiple streams implemented on the

1858
01:14:31,280 --> 01:14:33,280
transport layer these streams are now

1859
01:14:33,280 --> 01:14:34,880
independent so we don't have any

1860
01:14:34,880 --> 01:14:36,000
interest stream head of line blocking

1861
01:14:36,000 --> 01:14:38,640
anymore so for example we now have again

1862
01:14:38,640 --> 01:14:40,960
the case where the blue resource

1863
01:14:40,960 --> 01:14:43,040
information is lost during

1864
01:14:43,040 --> 01:14:45,440
the transmission however quick knows

1865
01:14:45,440 --> 01:14:47,199
that this is only in

1866
01:14:47,199 --> 01:14:49,280
influencing the blue

1867
01:14:49,280 --> 01:14:51,920
resource stream here and the red and the

1868
01:14:51,920 --> 01:14:53,520
the green information can still be

1869
01:14:53,520 --> 01:14:55,600
forwarded to the browser however for

1870
01:14:55,600 --> 01:14:57,120
this to work of course multiple streams

1871
01:14:57,120 --> 01:14:59,120
have to be active and we can also get to

1872
01:14:59,120 --> 01:14:59,760
the

1873
01:14:59,760 --> 01:15:01,679
case where only one of the streams is

1874
01:15:01,679 --> 01:15:04,000
active and in this case we get the same

1875
01:15:04,000 --> 01:15:06,320
the same case that again now this

1876
01:15:06,320 --> 01:15:07,679
this one stream is waiting for the

1877
01:15:07,679 --> 01:15:09,199
retransmission and because basically

1878
01:15:09,199 --> 01:15:11,120
only this one stream is active the whole

1879
01:15:11,120 --> 01:15:12,000
connection is waiting for the

1880
01:15:12,000 --> 01:15:13,360
retransmission

1881
01:15:13,360 --> 01:15:15,920
and how this data is now scheduled uh

1882
01:15:15,920 --> 01:15:17,920
with quick so which stream is actually

1883
01:15:17,920 --> 01:15:20,960
sent in which stream frames is actually

1884
01:15:20,960 --> 01:15:23,600
sent on the wire basically depends on

1885
01:15:23,600 --> 01:15:25,920
the server so how the server depends uh

1886
01:15:25,920 --> 01:15:28,000
decides how to send it and how the quick

1887
01:15:28,000 --> 01:15:30,000
stack then decides

1888
01:15:30,000 --> 01:15:31,679
however there's one thing this is

1889
01:15:31,679 --> 01:15:34,000
resource prioritization which basically

1890
01:15:34,000 --> 01:15:35,360
allows the browser to sequence the

1891
01:15:35,360 --> 01:15:37,199
server a preferred scheduling so this

1892
01:15:37,199 --> 01:15:39,040
can be used for example to say hey send

1893
01:15:39,040 --> 01:15:41,040
me the html first i need to discover all

1894
01:15:41,040 --> 01:15:43,040
the other resources first and then send

1895
01:15:43,040 --> 01:15:45,040
me the images and this allows the

1896
01:15:45,040 --> 01:15:46,640
browser to have different prioritization

1897
01:15:46,640 --> 01:15:49,120
strategies and there are strategies used

1898
01:15:49,120 --> 01:15:51,199
for example with internet explorer or

1899
01:15:51,199 --> 01:15:53,440
the default for hdb2 which was a round

1900
01:15:53,440 --> 01:15:55,920
robin then there's rated rod robin it

1901
01:15:55,920 --> 01:15:57,760
has been used by safari then there's an

1902
01:15:57,760 --> 01:15:59,600
approach by chrome which uses a

1903
01:15:59,600 --> 01:16:02,000
sequential scheduling but they reorder

1904
01:16:02,000 --> 01:16:03,760
that important resources are sent

1905
01:16:03,760 --> 01:16:05,520
earlier than unimportant resources and

1906
01:16:05,520 --> 01:16:08,000
there's firefox which used with hb2 a

1907
01:16:08,000 --> 01:16:09,600
mixture of rated round robin and

1908
01:16:09,600 --> 01:16:11,280
sequential scheduling

1909
01:16:11,280 --> 01:16:14,320
and because this deal depends on

1910
01:16:14,320 --> 01:16:16,239
because this influences how data is sent

1911
01:16:16,239 --> 01:16:17,760
this of course also influences the

1912
01:16:17,760 --> 01:16:19,679
performance there has been some related

1913
01:16:19,679 --> 01:16:21,760
work on that and basically this

1914
01:16:21,760 --> 01:16:24,080
regulated work found out that for hp2

1915
01:16:24,080 --> 01:16:26,480
and also for hdb3 the round-robin and

1916
01:16:26,480 --> 01:16:28,000
great round-dropping approaches are

1917
01:16:28,000 --> 01:16:30,159
actually worst while the chrome and the

1918
01:16:30,159 --> 01:16:32,320
firefox approach is actually the best or

1919
01:16:32,320 --> 01:16:34,400
the better one why better because in

1920
01:16:34,400 --> 01:16:37,440
that specific work also website specific

1921
01:16:37,440 --> 01:16:39,440
prioritization strategies have been

1922
01:16:39,440 --> 01:16:41,120
discussed and they found that if you

1923
01:16:41,120 --> 01:16:42,800
have website specific knowledge for

1924
01:16:42,800 --> 01:16:44,960
example one image is very important you

1925
01:16:44,960 --> 01:16:47,040
get even better resource

1926
01:16:47,040 --> 01:16:49,199
prioritization results in that regard

1927
01:16:49,199 --> 01:16:50,800
however what we can also see here is

1928
01:16:50,800 --> 01:16:52,400
that this sequential scheduling from

1929
01:16:52,400 --> 01:16:53,920
chrome

1930
01:16:53,920 --> 01:16:55,920
showed best results here although it

1931
01:16:55,920 --> 01:16:57,199
would be worse for head of blind

1932
01:16:57,199 --> 01:16:58,480
blocking because we would then

1933
01:16:58,480 --> 01:17:00,239
monopolize this connection as we've seen

1934
01:17:00,239 --> 01:17:01,679
in the example before

1935
01:17:01,679 --> 01:17:04,080
so basically we would say okay this

1936
01:17:04,080 --> 01:17:06,400
problem is now solved we just know there

1937
01:17:06,400 --> 01:17:08,880
is no no influence however

1938
01:17:08,880 --> 01:17:10,239
take this with a grain of salt because

1939
01:17:10,239 --> 01:17:12,080
this related work on the one hand only

1940
01:17:12,080 --> 01:17:15,679
looked at http 2 so no hdb3 no no

1941
01:17:15,679 --> 01:17:17,440
head of line blocking free streams and

1942
01:17:17,440 --> 01:17:19,600
the other work looked at a

1943
01:17:19,600 --> 01:17:22,159
at a quick stack at a time where a quick

1944
01:17:22,159 --> 01:17:23,920
boss rather that stack was rather

1945
01:17:23,920 --> 01:17:25,920
premature and they disabled the

1946
01:17:25,920 --> 01:17:27,520
congestion control and just sent at a

1947
01:17:27,520 --> 01:17:29,600
constant rate and tried to avoid any

1948
01:17:29,600 --> 01:17:32,000
loss so loss hasn't really been looked

1949
01:17:32,000 --> 01:17:34,159
at in the related work in this regard

1950
01:17:34,159 --> 01:17:36,640
and our idea was then to look at the the

1951
01:17:36,640 --> 01:17:39,280
impact of prioritization on the actual

1952
01:17:39,280 --> 01:17:43,120
head of hdb3 performance under loss and

1953
01:17:43,120 --> 01:17:44,880
for this we then use different scenarios

1954
01:17:44,880 --> 01:17:46,480
where we change the laws the last person

1955
01:17:46,480 --> 01:17:48,560
the rtt and the bandwidth and then also

1956
01:17:48,560 --> 01:17:50,480
tested different prioritization

1957
01:17:50,480 --> 01:17:52,880
strategies and we did this to identify

1958
01:17:52,880 --> 01:17:54,640
the head of line blocking and the

1959
01:17:54,640 --> 01:17:56,080
performance

1960
01:17:56,080 --> 01:17:57,040
and

1961
01:17:57,040 --> 01:17:58,960
for this we downloaded 35 websites we

1962
01:17:58,960 --> 01:18:01,199
replayed those websites in a test bed

1963
01:18:01,199 --> 01:18:02,640
and then measured the speed index and

1964
01:18:02,640 --> 01:18:05,440
the head of line blocking uh so how many

1965
01:18:05,440 --> 01:18:06,880
bytes were actually

1966
01:18:06,880 --> 01:18:09,360
blocked during re-transmission and then

1967
01:18:09,360 --> 01:18:10,800
tried this

1968
01:18:10,800 --> 01:18:12,640
and then measured basically the speed

1969
01:18:12,640 --> 01:18:16,000
index let me just skip the the testbed

1970
01:18:16,000 --> 01:18:17,440
uh implementation in the interest of

1971
01:18:17,440 --> 01:18:19,840
time and let's get directly to the

1972
01:18:19,840 --> 01:18:22,000
results and for the results what we will

1973
01:18:22,000 --> 01:18:23,840
see is always the relative median

1974
01:18:23,840 --> 01:18:25,920
difference to chrome and we use chrome

1975
01:18:25,920 --> 01:18:28,239
as our sequential baseline and what we

1976
01:18:28,239 --> 01:18:29,679
can see for the head of line blocking is

1977
01:18:29,679 --> 01:18:31,440
that for very low

1978
01:18:31,440 --> 01:18:32,640
um

1979
01:18:32,640 --> 01:18:35,199
that for very low bandwidth we see an

1980
01:18:35,199 --> 01:18:37,199
improvement in head of line blocking so

1981
01:18:37,199 --> 01:18:38,719
basically the head of line blocking is

1982
01:18:38,719 --> 01:18:40,239
reduced but we're using a parallel

1983
01:18:40,239 --> 01:18:42,080
strategy in comparison to chrome

1984
01:18:42,080 --> 01:18:43,760
sequential scheduling but we can see

1985
01:18:43,760 --> 01:18:45,360
that the differences are vanishing when

1986
01:18:45,360 --> 01:18:46,960
we're using higher bandwidths so we can

1987
01:18:46,960 --> 01:18:48,159
see that this

1988
01:18:48,159 --> 01:18:50,080
this curve is always moving more to the

1989
01:18:50,080 --> 01:18:51,360
right

1990
01:18:51,360 --> 01:18:54,159
up to the point where um we even get a

1991
01:18:54,159 --> 01:18:56,239
lot of overlap for example with the

1992
01:18:56,239 --> 01:18:58,880
sequential baseline and actually those

1993
01:18:58,880 --> 01:19:01,360
cases where we have this overlap so from

1994
01:19:01,360 --> 01:19:04,800
in the cdf from 0.5 to 7 and 0.75 on the

1995
01:19:04,800 --> 01:19:07,520
y-axis that's actually points where the

1996
01:19:07,520 --> 01:19:09,280
whole website fitted into slow start

1997
01:19:09,280 --> 01:19:11,760
because the website was very small and

1998
01:19:11,760 --> 01:19:13,360
basically we could transmit everything

1999
01:19:13,360 --> 01:19:15,679
of that without having any loss

2000
01:19:15,679 --> 01:19:17,440
so that's also one point that we have to

2001
01:19:17,440 --> 01:19:19,520
look at and for the speed index we can

2002
01:19:19,520 --> 01:19:20,800
see in

2003
01:19:20,800 --> 01:19:23,040
a comparable results where we see that

2004
01:19:23,040 --> 01:19:25,120
for lower bandwidths we can see even

2005
01:19:25,120 --> 01:19:26,640
some improvements in speed index when

2006
01:19:26,640 --> 01:19:28,719
using parallelism on the median case so

2007
01:19:28,719 --> 01:19:31,280
the curve is slightly moved to the left

2008
01:19:31,280 --> 01:19:33,760
however these benefits are also

2009
01:19:33,760 --> 01:19:35,679
vanishing with higher bandwidths this is

2010
01:19:35,679 --> 01:19:37,440
actually due to the same case on the one

2011
01:19:37,440 --> 01:19:40,159
hand we have fewer laws but on the other

2012
01:19:40,159 --> 01:19:41,920
hand we have a higher bandwidth so more

2013
01:19:41,920 --> 01:19:43,760
of our resources can be transmitted in

2014
01:19:43,760 --> 01:19:45,760
that time and we also have a higher

2015
01:19:45,760 --> 01:19:48,080
congestion window with higher bandwidths

2016
01:19:48,080 --> 01:19:49,280
and that leads to the fact that

2017
01:19:49,280 --> 01:19:51,280
sometimes the resources are just smaller

2018
01:19:51,280 --> 01:19:53,440
than our congestion window so even when

2019
01:19:53,440 --> 01:19:55,360
we're using sequential scheduling still

2020
01:19:55,360 --> 01:19:57,199
multiple streams have been active

2021
01:19:57,199 --> 01:19:59,280
because just the resources ended and the

2022
01:19:59,280 --> 01:20:00,880
next stream could start

2023
01:20:00,880 --> 01:20:02,800
so this is the the influence of the

2024
01:20:02,800 --> 01:20:04,880
bandwidth on its own however this is of

2025
01:20:04,880 --> 01:20:06,800
course um

2026
01:20:06,800 --> 01:20:08,080
introducing

2027
01:20:08,080 --> 01:20:09,760
congestion loss so let's also have a

2028
01:20:09,760 --> 01:20:11,600
look at at random loss and for this we

2029
01:20:11,600 --> 01:20:12,960
looked at the two megabits per second

2030
01:20:12,960 --> 01:20:16,639
case and then just added via net in

2031
01:20:16,639 --> 01:20:18,239
artificial loss from zero to five

2032
01:20:18,239 --> 01:20:20,159
percent and what we can see is that

2033
01:20:20,159 --> 01:20:23,360
again for higher loss so

2034
01:20:23,360 --> 01:20:25,760
where uh more packets are lost we can

2035
01:20:25,760 --> 01:20:27,040
see that the head of line blocking is

2036
01:20:27,040 --> 01:20:28,880
reduced which is actually as expected

2037
01:20:28,880 --> 01:20:30,560
and this is due to the fact that loss is

2038
01:20:30,560 --> 01:20:32,480
stopping many of the active streams for

2039
01:20:32,480 --> 01:20:35,040
sequential scheduling while for round

2040
01:20:35,040 --> 01:20:36,719
robin we have a lot of active streams

2041
01:20:36,719 --> 01:20:38,719
and only a few of those are actually

2042
01:20:38,719 --> 01:20:39,840
affected

2043
01:20:39,840 --> 01:20:41,280
and for the speed index we can see a

2044
01:20:41,280 --> 01:20:42,320
comparable

2045
01:20:42,320 --> 01:20:44,800
effect it's very subtle so i added this

2046
01:20:44,800 --> 01:20:46,960
black s-curve here but we can see that

2047
01:20:46,960 --> 01:20:48,800
there's a growing benefit for higher

2048
01:20:48,800 --> 01:20:51,360
loss however this benefit is is really

2049
01:20:51,360 --> 01:20:53,120
subtle so we can see that

2050
01:20:53,120 --> 01:20:55,520
on the left side a lot of the the data

2051
01:20:55,520 --> 01:20:58,159
points in the red circle are below our s

2052
01:20:58,159 --> 01:20:59,040
curve

2053
01:20:59,040 --> 01:21:00,400
and on the right side we can see that a

2054
01:21:00,400 --> 01:21:02,639
lot of the data points are above this so

2055
01:21:02,639 --> 01:21:04,000
it's not as strongly as for the head of

2056
01:21:04,000 --> 01:21:05,760
line blocking and we were wondering why

2057
01:21:05,760 --> 01:21:08,000
this is actually the case so we then

2058
01:21:08,000 --> 01:21:09,520
looked into the data a little closer and

2059
01:21:09,520 --> 01:21:11,600
we found that different websites behave

2060
01:21:11,600 --> 01:21:14,320
differently when using this and because

2061
01:21:14,320 --> 01:21:15,600
of this we then looked into the

2062
01:21:15,600 --> 01:21:17,679
correlation between loss and the speed

2063
01:21:17,679 --> 01:21:18,880
index

2064
01:21:18,880 --> 01:21:20,480
and here we can see the correlation for

2065
01:21:20,480 --> 01:21:21,679
the speed index and head of line

2066
01:21:21,679 --> 01:21:23,520
blocking and basically a red means that

2067
01:21:23,520 --> 01:21:24,639
there has been

2068
01:21:24,639 --> 01:21:26,719
a correlation which was negative so we

2069
01:21:26,719 --> 01:21:28,000
could see that the head of line blocking

2070
01:21:28,000 --> 01:21:30,000
has been reduced but the speed index got

2071
01:21:30,000 --> 01:21:32,080
worse while blue means that we had a

2072
01:21:32,080 --> 01:21:34,159
positive correlation so the speed index

2073
01:21:34,159 --> 01:21:35,280
was also

2074
01:21:35,280 --> 01:21:36,960
improving when the head of line blocking

2075
01:21:36,960 --> 01:21:38,880
was improving and here we can see for

2076
01:21:38,880 --> 01:21:41,040
example for wikipedia.org that we can

2077
01:21:41,040 --> 01:21:41,840
see

2078
01:21:41,840 --> 01:21:42,960
only

2079
01:21:42,960 --> 01:21:44,880
not very strong positive correlations or

2080
01:21:44,880 --> 01:21:46,320
even red patches so negative

2081
01:21:46,320 --> 01:21:48,239
correlations while for newyorktimes.com

2082
01:21:48,239 --> 01:21:50,480
we see very strong positive correlations

2083
01:21:50,480 --> 01:21:51,840
and the interesting difference between

2084
01:21:51,840 --> 01:21:54,000
wikipedia.org and newyorktimes.com in

2085
01:21:54,000 --> 01:21:56,320
our data set is basically that these are

2086
01:21:56,320 --> 01:21:58,080
two different extrema for the website

2087
01:21:58,080 --> 01:22:00,000
size so wikipedia.org is our smallest

2088
01:22:00,000 --> 01:22:01,920
website and newyorktimes.com is our

2089
01:22:01,920 --> 01:22:03,199
biggest website

2090
01:22:03,199 --> 01:22:04,560
we can see that when we are looking on

2091
01:22:04,560 --> 01:22:06,400
the left for the smaller website we can

2092
01:22:06,400 --> 01:22:08,560
see a lot of red patches one for the

2093
01:22:08,560 --> 01:22:10,239
right side for the bigger websites we

2094
01:22:10,239 --> 01:22:12,159
see a lot of blue patches so very strong

2095
01:22:12,159 --> 01:22:14,000
positive correlations

2096
01:22:14,000 --> 01:22:16,239
and we could see that the negative

2097
01:22:16,239 --> 01:22:17,840
effect for this matter is for the

2098
01:22:17,840 --> 01:22:19,679
smaller websites were occurring because

2099
01:22:19,679 --> 01:22:20,719
we could see that the head of line

2100
01:22:20,719 --> 01:22:22,239
blocking has been reduced but only

2101
01:22:22,239 --> 01:22:24,320
slightly because basically there hasn't

2102
01:22:24,320 --> 01:22:26,639
been a lot of data in

2103
01:22:26,639 --> 01:22:27,600
in

2104
01:22:27,600 --> 01:22:29,920
on the wire in that case or in flight

2105
01:22:29,920 --> 01:22:30,639
and

2106
01:22:30,639 --> 01:22:33,280
in that case where we don't have a huge

2107
01:22:33,280 --> 01:22:34,639
improvement ahead of line blocking we

2108
01:22:34,639 --> 01:22:36,000
could see the negative effect of the

2109
01:22:36,000 --> 01:22:37,440
parallel prioritization that also

2110
01:22:37,440 --> 01:22:39,679
related worksaw while for the larger

2111
01:22:39,679 --> 01:22:41,600
website we saw that the head of line

2112
01:22:41,600 --> 01:22:43,520
blocking reduced more strongly and then

2113
01:22:43,520 --> 01:22:46,639
the negative effect was outraged

2114
01:22:46,639 --> 01:22:48,560
i would also like to go into the details

2115
01:22:48,560 --> 01:22:51,040
for other loss patterns and also what

2116
01:22:51,040 --> 01:22:53,280
the impact of the round trip time is

2117
01:22:53,280 --> 01:22:54,320
however

2118
01:22:54,320 --> 01:22:56,000
i cannot go into detail here but i can

2119
01:22:56,000 --> 01:22:57,920
just tell you that the loss pattern is

2120
01:22:57,920 --> 01:22:59,760
very important because when you have

2121
01:22:59,760 --> 01:23:02,159
bursts around robin is again really well

2122
01:23:02,159 --> 01:23:03,920
bad because you are then affecting a lot

2123
01:23:03,920 --> 01:23:05,679
of the streams and for the round-trip

2124
01:23:05,679 --> 01:23:09,120
time you can tell you that higher rtts

2125
01:23:09,120 --> 01:23:10,560
increase the round trip time or the

2126
01:23:10,560 --> 01:23:13,280
retransmission penalty and so

2127
01:23:13,280 --> 01:23:15,840
in smaller rtt cases the effects are not

2128
01:23:15,840 --> 01:23:17,840
as pronounced as we could see it here

2129
01:23:17,840 --> 01:23:20,159
okay so time to conclude we saw that

2130
01:23:20,159 --> 01:23:21,679
reduced head of line blocking via quick

2131
01:23:21,679 --> 01:23:23,520
is possible however for that multiple

2132
01:23:23,520 --> 01:23:25,199
streams need to be active in parallel

2133
01:23:25,199 --> 01:23:26,400
and hp

2134
01:23:26,400 --> 01:23:28,880
http prioritization influences how many

2135
01:23:28,880 --> 01:23:30,239
streams are active

2136
01:23:30,239 --> 01:23:32,320
and the the easy way would

2137
01:23:32,320 --> 01:23:34,480
would be to say just use round robin

2138
01:23:34,480 --> 01:23:36,560
however related work said round robin is

2139
01:23:36,560 --> 01:23:38,239
detrimental for performance and we found

2140
01:23:38,239 --> 01:23:39,360
that there is a new performance

2141
01:23:39,360 --> 01:23:41,040
interplay between prioritization in the

2142
01:23:41,040 --> 01:23:42,960
network ron robin can improve head of

2143
01:23:42,960 --> 01:23:45,199
line blocking and can thus also improve

2144
01:23:45,199 --> 01:23:47,360
performance however mainly in cases for

2145
01:23:47,360 --> 01:23:50,080
large websites smaller bandwidths higher

2146
01:23:50,080 --> 01:23:51,920
rtt scenarios or where rendering loss

2147
01:23:51,920 --> 01:23:53,520
was was seen

2148
01:23:53,520 --> 01:23:54,880
and we could also see that the new

2149
01:23:54,880 --> 01:23:56,639
extensive prioritization scheme that has

2150
01:23:56,639 --> 01:23:58,560
been um

2151
01:23:58,560 --> 01:24:00,080
i think it has been a draft i'm not sure

2152
01:24:00,080 --> 01:24:02,560
if it's standardized now for http 3

2153
01:24:02,560 --> 01:24:04,000
um

2154
01:24:04,000 --> 01:24:05,840
it's this new scheme we haven't seen a

2155
01:24:05,840 --> 01:24:07,280
big difference between using the old

2156
01:24:07,280 --> 01:24:09,840
scheme or this scheme here so all in all

2157
01:24:09,840 --> 01:24:11,679
we can say http 3 prioritization is

2158
01:24:11,679 --> 01:24:13,120
still website dependent which related

2159
01:24:13,120 --> 01:24:14,960
workforce but it's now also network

2160
01:24:14,960 --> 01:24:17,840
dependent

2161
01:24:17,920 --> 01:24:20,320
thank you

2162
01:24:20,400 --> 01:24:21,920
thanks for spending your friday night

2163
01:24:21,920 --> 01:24:24,239
with us

2164
01:24:24,560 --> 01:24:28,520
let's see if we have any questions

2165
01:24:31,440 --> 01:24:33,840
okay but like um you can check out the

2166
01:24:33,840 --> 01:24:35,440
chat if there are any for questions and

2167
01:24:35,440 --> 01:24:37,280
people can put them in a chat or contact

2168
01:24:37,280 --> 01:24:40,719
you directly read your paper send emails

2169
01:24:40,719 --> 01:24:42,000
thank you

2170
01:24:42,000 --> 01:24:45,639
and move on

2171
01:24:46,880 --> 01:24:50,520
nick you're up next

2172
01:25:07,920 --> 01:25:09,440
yeah please

2173
01:25:09,440 --> 01:25:11,920
unmute nick and turn on your video if

2174
01:25:11,920 --> 01:25:13,280
you like

2175
01:25:13,280 --> 01:25:15,120
and

2176
01:25:15,120 --> 01:25:17,040
in the best case you also request slide

2177
01:25:17,040 --> 01:25:19,679
sharing which is the second button

2178
01:25:19,679 --> 01:25:21,679
at the top from the left next to the

2179
01:25:21,679 --> 01:25:24,920
hand button

2180
01:25:29,280 --> 01:25:30,800
okay you're requesting keep screen

2181
01:25:30,800 --> 01:25:32,480
sharing but that's

2182
01:25:32,480 --> 01:25:35,519
okay as well i guess

2183
01:25:36,560 --> 01:25:38,320
but you also have to enable your audio i

2184
01:25:38,320 --> 01:25:41,840
don't think we can hear yet

2185
01:26:01,520 --> 01:26:03,520
at the top there is this

2186
01:26:03,520 --> 01:26:04,480
kind of

2187
01:26:04,480 --> 01:26:06,159
microphone sign you have to click as

2188
01:26:06,159 --> 01:26:09,159
well

2189
01:26:12,880 --> 01:26:16,760
because we can't hear yet

2190
01:26:37,040 --> 01:26:38,239
you can ask

2191
01:26:38,239 --> 01:26:40,400
text me in the chat window if that

2192
01:26:40,400 --> 01:26:42,159
doesn't work for you and then we come

2193
01:26:42,159 --> 01:26:45,199
back later to you

2194
01:26:47,199 --> 01:26:49,360
let's do that miriah uh i i also wrote

2195
01:26:49,360 --> 01:26:51,120
to nick asking him if his pre-flight

2196
01:26:51,120 --> 01:26:53,600
test worked but i i'd suggest he'd

2197
01:26:53,600 --> 01:26:55,280
rejoin and do the pre-flight test to

2198
01:26:55,280 --> 01:26:56,560
show that your mic is working and then

2199
01:26:56,560 --> 01:26:59,280
we should be able to go in minutes

2200
01:26:59,280 --> 01:27:00,719
yeah please rejoin or maybe try a

2201
01:27:00,719 --> 01:27:02,880
different browser okay we go to the next

2202
01:27:02,880 --> 01:27:05,679
presentation that's phong are you round

2203
01:27:05,679 --> 01:27:07,199
phone

2204
01:27:07,199 --> 01:27:10,199
perfect

2205
01:27:26,159 --> 01:27:28,159
oh so the next two presentations are

2206
01:27:28,159 --> 01:27:30,239
both about um dns encryption so they

2207
01:27:30,239 --> 01:27:32,560
should fit very well together and great

2208
01:27:32,560 --> 01:27:34,159
to have you here from

2209
01:27:34,159 --> 01:27:35,280
um

2210
01:27:35,280 --> 01:27:37,440
yeah okay we try the other slides that's

2211
01:27:37,440 --> 01:27:38,639
probably easier now you should be able

2212
01:27:38,639 --> 01:27:42,199
to select your slides

2213
01:27:47,280 --> 01:27:49,600
okay okay i uh

2214
01:27:49,600 --> 01:27:52,159
so i hope everyone can uh

2215
01:27:52,159 --> 01:27:55,120
see my slide uh just give me one second

2216
01:27:55,120 --> 01:27:56,800
okay nick we can't see your video now

2217
01:27:56,800 --> 01:27:58,719
but we're taking fong's presentation

2218
01:27:58,719 --> 01:28:00,320
first you have to wait a little bit

2219
01:28:00,320 --> 01:28:03,040
longer oh okay sure no problem yeah but

2220
01:28:03,040 --> 01:28:04,719
we can hear you and see you that's great

2221
01:28:04,719 --> 01:28:06,719
so we take phone first anyway because

2222
01:28:06,719 --> 01:28:08,719
you're all set we can see you we can

2223
01:28:08,719 --> 01:28:10,880
hear you we have your your slides so you

2224
01:28:10,880 --> 01:28:12,880
can go ahead

2225
01:28:12,880 --> 01:28:13,679
uh

2226
01:28:13,679 --> 01:28:16,480
i mean uh okay

2227
01:28:16,480 --> 01:28:19,199
so uh just let me hear that i

2228
01:28:19,199 --> 01:28:20,480
have a little

2229
01:28:20,480 --> 01:28:21,760
problem here

2230
01:28:21,760 --> 01:28:24,159
so okay uh hello everyone my name is

2231
01:28:24,159 --> 01:28:26,639
bong and i'm a boston researcher at the

2232
01:28:26,639 --> 01:28:28,960
university of chicago and today we'll be

2233
01:28:28,960 --> 01:28:31,760
presenting our work on measuring the

2234
01:28:31,760 --> 01:28:34,960
accessibility of domain name encryptions

2235
01:28:34,960 --> 01:28:38,960
and its impact on internet censorship

2236
01:28:39,120 --> 01:28:41,040
and so

2237
01:28:41,040 --> 01:28:43,679
regardless of the expansions of https

2238
01:28:43,679 --> 01:28:45,440
traffic plaintext domain names are the

2239
01:28:45,440 --> 01:28:48,080
last piece of unencrypted information

2240
01:28:48,080 --> 01:28:50,159
that is still lightly visible onto the

2241
01:28:50,159 --> 01:28:52,239
internet so where is domain name

2242
01:28:52,239 --> 01:28:54,560
information exposed and the slide here

2243
01:28:54,560 --> 01:28:56,400
shows you the common places where domain

2244
01:28:56,400 --> 01:28:59,040
name information can be monitored by any

2245
01:28:59,040 --> 01:29:01,840
network level observer for example

2246
01:29:01,840 --> 01:29:03,760
your internet service provider or your

2247
01:29:03,760 --> 01:29:05,600
network administrator

2248
01:29:05,600 --> 01:29:07,199
so this other network packet that i

2249
01:29:07,199 --> 01:29:09,600
capture when visiting istanbul.com and

2250
01:29:09,600 --> 01:29:12,080
the first place that you see here is uh

2251
01:29:12,080 --> 01:29:14,320
through the next query and respond and

2252
01:29:14,320 --> 01:29:16,320
after getting packed back the ip address

2253
01:29:16,320 --> 01:29:18,960
of example.com the client initiated

2254
01:29:18,960 --> 01:29:21,520
the 2s handshake to port 443

2255
01:29:21,520 --> 01:29:22,719
and

2256
01:29:22,719 --> 01:29:24,560
the second place here you can see is in

2257
01:29:24,560 --> 01:29:26,560
the server name indications where you

2258
01:29:26,560 --> 01:29:29,120
can see sample.com domain name and the

2259
01:29:29,120 --> 01:29:31,600
exposures of the domain name information

2260
01:29:31,600 --> 01:29:34,000
in these two channels have led to many

2261
01:29:34,000 --> 01:29:37,199
security and privacy problems and

2262
01:29:37,199 --> 01:29:39,679
most network connections susceptible to

2263
01:29:39,679 --> 01:29:44,400
domain name based uh internet filtering

2264
01:29:44,560 --> 01:29:48,000
and so domain name uh

2265
01:29:48,000 --> 01:29:50,480
to to address those problems many domain

2266
01:29:50,480 --> 01:29:52,400
name encryption technologies have been

2267
01:29:52,400 --> 01:29:54,480
introduced in in recent

2268
01:29:54,480 --> 01:29:57,520
years including dns over tos dns over

2269
01:29:57,520 --> 01:30:00,800
https and encrypted sni which some of

2270
01:30:00,800 --> 01:30:03,440
you know uh here that they being

2271
01:30:03,440 --> 01:30:06,560
reported to encrypted client hello as

2272
01:30:06,560 --> 01:30:07,679
but still

2273
01:30:07,679 --> 01:30:11,760
being developed as an internet draft

2274
01:30:11,840 --> 01:30:12,960
and so

2275
01:30:12,960 --> 01:30:16,000
in the new setting the users and the dns

2276
01:30:16,000 --> 01:30:18,159
resolver first established an encrypted

2277
01:30:18,159 --> 01:30:19,120
channel

2278
01:30:19,120 --> 01:30:21,760
which could be over hdbs

2279
01:30:21,760 --> 01:30:24,080
or tos and after that the next querying

2280
01:30:24,080 --> 01:30:26,560
responses are sent over this channel

2281
01:30:26,560 --> 01:30:28,560
and during the dsm checks unlike in

2282
01:30:28,560 --> 01:30:31,760
previous gms versions since version 1.3

2283
01:30:31,760 --> 01:30:34,800
the server name indications

2284
01:30:34,800 --> 01:30:37,520
extension can also be encrypted

2285
01:30:37,520 --> 01:30:39,920
and this new proposal to prevent any

2286
01:30:39,920 --> 01:30:41,760
unpacked observer from seeing the

2287
01:30:41,760 --> 01:30:45,360
plaintext domain name information

2288
01:30:45,679 --> 01:30:47,600
and so

2289
01:30:47,600 --> 01:30:48,800
you know

2290
01:30:48,800 --> 01:30:50,480
this is clear that domain name

2291
01:30:50,480 --> 01:30:52,719
encryption can help improving the

2292
01:30:52,719 --> 01:30:55,840
security and privacy for internet users

2293
01:30:55,840 --> 01:30:58,000
but it's also take away the

2294
01:30:58,000 --> 01:31:00,400
visibility into plaintext domain name

2295
01:31:00,400 --> 01:31:02,560
from the network traffic

2296
01:31:02,560 --> 01:31:04,719
and so that has motivated us to

2297
01:31:04,719 --> 01:31:06,000
investigate

2298
01:31:06,000 --> 01:31:08,639
how domain encryptions impact internet

2299
01:31:08,639 --> 01:31:11,199
censorship more specifically we want to

2300
01:31:11,199 --> 01:31:13,520
know whether any sensor out there are

2301
01:31:13,520 --> 01:31:16,480
taking a ha a step ahead to plot domain

2302
01:31:16,480 --> 01:31:18,320
name encryption technologies

2303
01:31:18,320 --> 01:31:20,960
and if domain encryption is not blocked

2304
01:31:20,960 --> 01:31:23,280
which means it's accessible then can it

2305
01:31:23,280 --> 01:31:26,239
help to circumvent traditional internet

2306
01:31:26,239 --> 01:31:31,559
censorship technology like dns poisoning

2307
01:31:32,159 --> 01:31:34,400
and so to that end

2308
01:31:34,400 --> 01:31:36,800
we measured the accessibility of domain

2309
01:31:36,800 --> 01:31:38,320
and encryption

2310
01:31:38,320 --> 01:31:40,960
by building this system called dni based

2311
01:31:40,960 --> 01:31:43,760
on a network of distributed vpn vantage

2312
01:31:43,760 --> 01:31:47,199
point recruited by the vpn gay project

2313
01:31:47,199 --> 01:31:49,280
give us the capability to conduct

2314
01:31:49,280 --> 01:31:51,840
measurements in 85 countries around the

2315
01:31:51,840 --> 01:31:53,600
world and

2316
01:31:53,600 --> 01:31:56,000
we first what we do here is we take the

2317
01:31:56,000 --> 01:31:57,360
input from

2318
01:31:57,360 --> 01:31:59,120
many other censorship measurement

2319
01:31:59,120 --> 01:32:01,120
platforms including uni icelab and

2320
01:32:01,120 --> 01:32:03,679
sensorplanet to see what domain that

2321
01:32:03,679 --> 01:32:06,080
this platform has been

2322
01:32:06,080 --> 01:32:08,719
discovered to be censored

2323
01:32:08,719 --> 01:32:09,760
and then

2324
01:32:09,760 --> 01:32:13,600
and also we input 71 dot and doh

2325
01:32:13,600 --> 01:32:14,800
resolver

2326
01:32:14,800 --> 01:32:17,520
um to this infrastructure to to conduct

2327
01:32:17,520 --> 01:32:20,080
measurements what we do is we first do

2328
01:32:20,080 --> 01:32:22,560
dns measurement by sending out dns uh

2329
01:32:22,560 --> 01:32:25,280
queries for these domain names to see if

2330
01:32:25,280 --> 01:32:27,199
you know any of them get blocked or not

2331
01:32:27,199 --> 01:32:29,920
and then uh later on we do

2332
01:32:29,920 --> 01:32:33,520
dns resolutions over to eh and https to

2333
01:32:33,520 --> 01:32:36,080
see if we can properly get back to the

2334
01:32:36,080 --> 01:32:38,560
answers that we were anticipated

2335
01:32:38,560 --> 01:32:41,920
and finally we do while doing all this

2336
01:32:41,920 --> 01:32:45,040
we we capture the network packet

2337
01:32:45,040 --> 01:32:47,120
to later on uh

2338
01:32:47,120 --> 01:32:49,360
analyze and see how

2339
01:32:49,360 --> 01:32:51,120
in which way that

2340
01:32:51,120 --> 01:32:53,120
sensors out there are blocking these new

2341
01:32:53,120 --> 01:32:55,199
technologies

2342
01:32:55,199 --> 01:32:58,480
so here is what we found

2343
01:32:58,480 --> 01:33:00,400
from the measurement conducted by this

2344
01:33:00,400 --> 01:33:03,360
system we could conclude that censorship

2345
01:33:03,360 --> 01:33:06,159
based on plaintext domain names is still

2346
01:33:06,159 --> 01:33:08,880
widespread and as dns tampering has been

2347
01:33:08,880 --> 01:33:10,080
you know

2348
01:33:10,080 --> 01:33:12,080
detected in many countries so here the

2349
01:33:12,080 --> 01:33:15,440
top five countries china russia iran

2350
01:33:15,440 --> 01:33:17,920
indonesia and india

2351
01:33:17,920 --> 01:33:21,199
but we didn't observe any dns based

2352
01:33:21,199 --> 01:33:24,480
locking of the domain name of major dlt

2353
01:33:24,480 --> 01:33:28,159
lds resolver like we have

2354
01:33:28,159 --> 01:33:30,239
dns.google

2355
01:33:30,239 --> 01:33:33,280
or we have dns last cloudflare.com those

2356
01:33:33,280 --> 01:33:36,159
are popular dlt us resolver but we

2357
01:33:36,159 --> 01:33:38,960
didn't see any tambourines dns tampering

2358
01:33:38,960 --> 01:33:41,440
when resolving those only one case in

2359
01:33:41,440 --> 01:33:43,440
china that we found that the great

2360
01:33:43,440 --> 01:33:46,719
fireworks timber with the resolutions of

2361
01:33:46,719 --> 01:33:48,719
uh the

2362
01:33:48,719 --> 01:33:51,040
of this domain name which belongs to uh

2363
01:33:51,040 --> 01:33:54,000
hurricane electric

2364
01:33:54,960 --> 01:33:56,719
and so um

2365
01:33:56,719 --> 01:33:59,280
we then conducted the accessibility test

2366
01:33:59,280 --> 01:34:02,719
for 71 dlt and uf servers by sending

2367
01:34:02,719 --> 01:34:05,679
encrypted dns queries to them from all

2368
01:34:05,679 --> 01:34:07,440
of the vantage point we have

2369
01:34:07,440 --> 01:34:09,760
and to better highlight the findings we

2370
01:34:09,760 --> 01:34:12,800
compute the data of the top five not

2371
01:34:12,800 --> 01:34:14,880
three countries when i say top five not

2372
01:34:14,880 --> 01:34:17,199
free this classification is not done by

2373
01:34:17,199 --> 01:34:19,360
myself that the top five not three

2374
01:34:19,360 --> 01:34:21,120
countries classified by the freedom

2375
01:34:21,120 --> 01:34:24,480
house um and and that they have the

2376
01:34:24,480 --> 01:34:27,600
largest number of fellow resolutions and

2377
01:34:27,600 --> 01:34:29,520
uh namely china

2378
01:34:29,520 --> 01:34:32,800
russia iran saudi arabia and venezuela

2379
01:34:32,800 --> 01:34:35,760
and it's visible on this plot that

2380
01:34:35,760 --> 01:34:36,920
from march

2381
01:34:36,920 --> 01:34:40,880
2021 there's a decrease driven mostly by

2382
01:34:40,880 --> 01:34:43,119
the blocking effort of china

2383
01:34:43,119 --> 01:34:47,719
against dot and u.s resolution

2384
01:34:48,480 --> 01:34:50,960
and so here i go more into detail to

2385
01:34:50,960 --> 01:34:53,440
show you how they actually go and pluck

2386
01:34:53,440 --> 01:34:54,560
it

2387
01:34:54,560 --> 01:34:55,600
so

2388
01:34:55,600 --> 01:34:58,480
this is the packet capture when i was

2389
01:34:58,480 --> 01:35:01,760
trying to do a resolution using dns over

2390
01:35:01,760 --> 01:35:04,639
2s what you're seeing here is

2391
01:35:04,639 --> 01:35:07,679
because this dns over 2s is standardized

2392
01:35:07,679 --> 01:35:10,560
report 853 and this port is not used by

2393
01:35:10,560 --> 01:35:13,199
any other properly popular applications

2394
01:35:13,199 --> 01:35:15,440
and so blocking the ip

2395
01:35:15,440 --> 01:35:18,320
and port a53 is trivial and sufficient

2396
01:35:18,320 --> 01:35:20,800
enough to to hinder the use of

2397
01:35:20,800 --> 01:35:22,639
dns over 2s

2398
01:35:22,639 --> 01:35:26,080
and that's how china is documented

2399
01:35:26,080 --> 01:35:28,400
and so this slide uh show us how they

2400
01:35:28,400 --> 01:35:30,159
they block the uh

2401
01:35:30,159 --> 01:35:31,520
um

2402
01:35:31,520 --> 01:35:33,760
what you're seeing here is i i try to

2403
01:35:33,760 --> 01:35:37,280
use the uh service of google resolver

2404
01:35:37,280 --> 01:35:40,480
and what what have uh finished here is

2405
01:35:40,480 --> 01:35:42,800
that i could finish the

2406
01:35:42,800 --> 01:35:45,760
the the dns lookup for the ip address of

2407
01:35:45,760 --> 01:35:47,840
dns.google.com

2408
01:35:47,840 --> 01:35:50,560
right but then as soon as i i start the

2409
01:35:50,560 --> 01:35:53,840
tcp stream to do the dns over to s uh

2410
01:35:53,840 --> 01:35:55,520
over https

2411
01:35:55,520 --> 01:35:58,320
um then it's blocked so

2412
01:35:58,320 --> 01:36:00,639
the thing is the ip address of popular

2413
01:36:00,639 --> 01:36:03,119
the us resolver are widely known

2414
01:36:03,119 --> 01:36:05,199
and therefore dropping traffic based on

2415
01:36:05,199 --> 01:36:08,880
just the resolver ip and port 443 pairs

2416
01:36:08,880 --> 01:36:11,760
is enough to block penis over https too

2417
01:36:11,760 --> 01:36:14,320
although you know among our community we

2418
01:36:14,320 --> 01:36:17,360
say if we do dns over https because it's

2419
01:36:17,360 --> 01:36:21,040
run on port 403 then it's just a more

2420
01:36:21,040 --> 01:36:24,000
collateral damage but just think of like

2421
01:36:24,000 --> 01:36:26,000
what else like what other service that

2422
01:36:26,000 --> 01:36:27,400
may run on

2423
01:36:27,400 --> 01:36:31,920
8.8.8.8 right so it's just obvious

2424
01:36:32,320 --> 01:36:33,920
and so um

2425
01:36:33,920 --> 01:36:36,719
another blocking that we

2426
01:36:36,719 --> 01:36:38,960
observed what's in saudi arabia which is

2427
01:36:38,960 --> 01:36:41,840
against cloudflare resolver and

2428
01:36:41,840 --> 01:36:43,679
we observe this to be a centralized

2429
01:36:43,679 --> 01:36:45,840
effort because we we observe the same

2430
01:36:45,840 --> 01:36:48,639
blocking signatures in multiple asses in

2431
01:36:48,639 --> 01:36:50,320
this country

2432
01:36:50,320 --> 01:36:52,800
so whatever the domain name and with

2433
01:36:52,800 --> 01:36:54,960
cloudflare.dns.com

2434
01:36:54,960 --> 01:36:57,199
as soon as we start the ts handset we

2435
01:36:57,199 --> 01:36:59,119
complete it we send a client hello they

2436
01:36:59,119 --> 01:37:01,360
detect it in the client hello then

2437
01:37:01,360 --> 01:37:04,320
there's uh they inject the reset packet

2438
01:37:04,320 --> 01:37:07,679
to another connection

2439
01:37:07,679 --> 01:37:09,119
and so for

2440
01:37:09,119 --> 01:37:10,320
um

2441
01:37:10,320 --> 01:37:13,520
the case of russia we see uh

2442
01:37:13,520 --> 01:37:16,000
a decentralized blocking efforts against

2443
01:37:16,000 --> 01:37:18,159
encrypted sni which means that we we

2444
01:37:18,159 --> 01:37:20,560
don't see it everywhere in russia there

2445
01:37:20,560 --> 01:37:23,280
and here in the countries uh that we see

2446
01:37:23,280 --> 01:37:25,520
some efforts of blocking this uh

2447
01:37:25,520 --> 01:37:27,920
protocol based on the two biosignatures

2448
01:37:27,920 --> 01:37:30,480
of encrypted sni uh basically this

2449
01:37:30,480 --> 01:37:33,199
blocking mechanism is similar with the

2450
01:37:33,199 --> 01:37:34,880
way great firework china has been

2451
01:37:34,880 --> 01:37:36,639
blocking it since

2452
01:37:36,639 --> 01:37:42,320
i guess october or september of 2020

2453
01:37:44,719 --> 01:37:46,080
and so

2454
01:37:46,080 --> 01:37:49,840
with that we we move on to to

2455
01:37:49,840 --> 01:37:52,480
answer the final questions that we ask

2456
01:37:52,480 --> 01:37:53,679
is like

2457
01:37:53,679 --> 01:37:55,600
if all of these technologies is

2458
01:37:55,600 --> 01:37:58,000
accessible it's not blocked or somehow

2459
01:37:58,000 --> 01:37:59,360
we get it to work

2460
01:37:59,360 --> 01:38:01,440
then can it help to circumvent

2461
01:38:01,440 --> 01:38:03,199
traditional censorship

2462
01:38:03,199 --> 01:38:04,639
uh

2463
01:38:04,639 --> 01:38:08,639
mechanisms and so we use encrypted dns

2464
01:38:08,639 --> 01:38:11,199
when crawling sensor website

2465
01:38:11,199 --> 01:38:13,280
and so this encrypted dns in some

2466
01:38:13,280 --> 01:38:15,679
country i say oh china block it russia i

2467
01:38:15,679 --> 01:38:18,239
block it iran's locker so the way we do

2468
01:38:18,239 --> 01:38:21,040
is like we we have our old

2469
01:38:21,040 --> 01:38:24,400
uh dns over https server running on a

2470
01:38:24,400 --> 01:38:26,000
non-standard port

2471
01:38:26,000 --> 01:38:28,080
and we thought that none of the country

2472
01:38:28,080 --> 01:38:31,199
that flopped so they don't do any like

2473
01:38:31,199 --> 01:38:33,760
fingerprinting on the traffic they just

2474
01:38:33,760 --> 01:38:36,880
use the ip and port to block it so

2475
01:38:36,880 --> 01:38:38,800
the takeaway here is that if we run out

2476
01:38:38,800 --> 01:38:41,280
of dns over https server we don't get

2477
01:38:41,280 --> 01:38:43,280
blocked and we use that to visit the

2478
01:38:43,280 --> 01:38:46,800
website that were found censored earlier

2479
01:38:46,800 --> 01:38:49,360
and so the finding is that a lot of them

2480
01:38:49,360 --> 01:38:51,040
in country like

2481
01:38:51,040 --> 01:38:53,760
russia indonesia and india you can

2482
01:38:53,760 --> 01:38:56,400
actually defeat censorship just by using

2483
01:38:56,400 --> 01:38:58,639
this technology but then in china and

2484
01:38:58,639 --> 01:39:01,920
iran we couldn't um to set uh

2485
01:39:01,920 --> 01:39:03,760
we couldn't do it successfully because a

2486
01:39:03,760 --> 01:39:06,239
lot of this uh website

2487
01:39:06,239 --> 01:39:08,719
they don't support encrypted sni

2488
01:39:08,719 --> 01:39:11,280
and so you could bypass dns censorship

2489
01:39:11,280 --> 01:39:13,440
but then at the ts handshake you still

2490
01:39:13,440 --> 01:39:15,440
expose the domain name information and

2491
01:39:15,440 --> 01:39:18,719
because china and brand they also have

2492
01:39:18,719 --> 01:39:20,960
filtering at that layer so

2493
01:39:20,960 --> 01:39:23,119
we couldn't bypass it

2494
01:39:23,119 --> 01:39:26,239
and so the key men take away from from

2495
01:39:26,239 --> 01:39:28,000
this 30 is that

2496
01:39:28,000 --> 01:39:30,400
domain encryptions can help to partially

2497
01:39:30,400 --> 01:39:33,360
circumvent internet censorship based on

2498
01:39:33,360 --> 01:39:35,840
plaintext domain name

2499
01:39:35,840 --> 01:39:38,159
based on plaintext dns resolutions

2500
01:39:38,159 --> 01:39:41,440
however notorious uh sensors has taken

2501
01:39:41,440 --> 01:39:44,239
step ahead you know to to prevent the

2502
01:39:44,239 --> 01:39:46,159
deployment of domain name encryptions by

2503
01:39:46,159 --> 01:39:47,679
blocking dot

2504
01:39:47,679 --> 01:39:49,920
the us servers as well as encrypted

2505
01:39:49,920 --> 01:39:51,440
sniper connections

2506
01:39:51,440 --> 01:39:55,040
and to address this problem new domain

2507
01:39:55,040 --> 01:39:55,920
name

2508
01:39:55,920 --> 01:39:58,239
encryption protocol should be designed

2509
01:39:58,239 --> 01:40:00,159
and deployed in a way that you know

2510
01:40:00,159 --> 01:40:03,280
plugging that traffic is not an option

2511
01:40:03,280 --> 01:40:05,199
without causing huge amounts of

2512
01:40:05,199 --> 01:40:08,080
collateral damage and snipes blocking is

2513
01:40:08,080 --> 01:40:10,719
still possible as encrypted sni has not

2514
01:40:10,719 --> 01:40:13,440
been widely adopted and uh when i say an

2515
01:40:13,440 --> 01:40:15,760
encrypted sni now it should be encrypted

2516
01:40:15,760 --> 01:40:18,719
client hello uh and and

2517
01:40:18,719 --> 01:40:20,880
to tackle this problem we should really

2518
01:40:20,880 --> 01:40:23,920
deploy this technology at a larger scale

2519
01:40:23,920 --> 01:40:24,880
um

2520
01:40:24,880 --> 01:40:25,840
you know

2521
01:40:25,840 --> 01:40:28,719
and possibly like universally to discard

2522
01:40:28,719 --> 01:40:31,760
a sensor from blanket blocking

2523
01:40:31,760 --> 01:40:34,159
and with that i'm happy to

2524
01:40:34,159 --> 01:40:38,480
take any questions that you you may have

2525
01:40:38,639 --> 01:40:41,520
thanks a lot interesting results um

2526
01:40:41,520 --> 01:40:43,600
very good for this audience let's see if

2527
01:40:43,600 --> 01:40:45,360
there are any questions we have some

2528
01:40:45,360 --> 01:40:48,360
time

2529
01:40:52,000 --> 01:40:54,239
dave

2530
01:40:54,239 --> 01:40:56,800
yeah thanks vong this is interesting um

2531
01:40:56,800 --> 01:40:58,560
just following on to some comments in

2532
01:40:58,560 --> 01:41:01,040
the in thread was um i think a

2533
01:41:01,040 --> 01:41:02,320
reasonable follow-up question would be

2534
01:41:02,320 --> 01:41:03,760
do you know of any work that tries to

2535
01:41:03,760 --> 01:41:06,400
classify the types of censorship

2536
01:41:06,400 --> 01:41:08,639
for instance so that you would know if

2537
01:41:08,639 --> 01:41:10,639
the if the censorship was trying to

2538
01:41:10,639 --> 01:41:12,400
block malware or sexually explicit

2539
01:41:12,400 --> 01:41:14,719
content as opposed to say a political

2540
01:41:14,719 --> 01:41:17,280
motivation

2541
01:41:17,600 --> 01:41:18,880
uh so

2542
01:41:18,880 --> 01:41:22,159
i um so in in the case that we found

2543
01:41:22,159 --> 01:41:23,920
here is like most of the domain that we

2544
01:41:23,920 --> 01:41:26,400
found to be blocked actually a lot of

2545
01:41:26,400 --> 01:41:28,239
them are political

2546
01:41:28,239 --> 01:41:30,400
uh motivated uh

2547
01:41:30,400 --> 01:41:34,320
blocking rather than malware because uh

2548
01:41:34,320 --> 01:41:36,800
this 30 is based on the block list that

2549
01:41:36,800 --> 01:41:38,639
used by the citizen lab

2550
01:41:38,639 --> 01:41:39,920
which is a

2551
01:41:39,920 --> 01:41:42,480
mostly politically motivated

2552
01:41:42,480 --> 01:41:46,040
blocked website

2553
01:41:46,239 --> 01:41:47,760
for somewhere to send people if they

2554
01:41:47,760 --> 01:41:49,360
were interested in classification there

2555
01:41:49,360 --> 01:41:51,600
so that block list and maybe does only

2556
01:41:51,600 --> 01:41:53,920
have anything that is about classifying

2557
01:41:53,920 --> 01:41:55,840
the censorship types

2558
01:41:55,840 --> 01:41:57,280
um

2559
01:41:57,280 --> 01:41:59,199
it's not in this study but if you

2560
01:41:59,199 --> 01:42:02,239
interested in uh classifications uh i

2561
01:42:02,239 --> 01:42:04,159
have a work on just the great firewall

2562
01:42:04,159 --> 01:42:06,400
of china where i break down that they

2563
01:42:06,400 --> 01:42:09,840
block 300 thousands website and what are

2564
01:42:09,840 --> 01:42:11,840
the portions of that belong to business

2565
01:42:11,840 --> 01:42:13,520
belong to

2566
01:42:13,520 --> 01:42:15,520
pornography belong to malware or

2567
01:42:15,520 --> 01:42:17,600
melissa's website

2568
01:42:17,600 --> 01:42:19,920
i'm going to put the name of that it's

2569
01:42:19,920 --> 01:42:22,480
called gfws.org that's the website you

2570
01:42:22,480 --> 01:42:25,199
can go and see the breakdown

2571
01:42:25,199 --> 01:42:26,880
of

2572
01:42:26,880 --> 01:42:28,400
you know websites being blocked

2573
01:42:28,400 --> 01:42:30,639
specifically in china

2574
01:42:30,639 --> 01:42:32,960
thanks so much

2575
01:42:32,960 --> 01:42:34,639
thanks patrick

2576
01:42:34,639 --> 01:42:37,520
hello thank you for this um pat mcmanus

2577
01:42:37,520 --> 01:42:39,360
i'm with fastly at the moment

2578
01:42:39,360 --> 01:42:40,400
um

2579
01:42:40,400 --> 01:42:43,280
i really like your takeaways thank you

2580
01:42:43,280 --> 01:42:45,199
one sort of nuance i want to point out

2581
01:42:45,199 --> 01:42:46,560
is that um

2582
01:42:46,560 --> 01:42:49,920
you're focused mostly on the

2583
01:42:49,920 --> 01:42:51,520
censorship case

2584
01:42:51,520 --> 01:42:52,880
and even in these cases where there's

2585
01:42:52,880 --> 01:42:54,719
blocking and censorship is indeed

2586
01:42:54,719 --> 01:42:56,880
applied you still preserve the property

2587
01:42:56,880 --> 01:42:58,560
of confidentiality of what people are

2588
01:42:58,560 --> 01:43:00,800
looking up rather than having to say

2589
01:43:00,800 --> 01:43:02,880
what your destination was going to be

2590
01:43:02,880 --> 01:43:06,320
um with an encrypted dns you just can't

2591
01:43:06,320 --> 01:43:08,320
ask that question right what's being

2592
01:43:08,320 --> 01:43:09,760
blocked is your connection to a

2593
01:43:09,760 --> 01:43:12,000
well-known resolver and that is a

2594
01:43:12,000 --> 01:43:13,600
strictly better situation than you were

2595
01:43:13,600 --> 01:43:15,040
in before of someone looking at the

2596
01:43:15,040 --> 01:43:17,520
plain text and throwing that away so

2597
01:43:17,520 --> 01:43:19,280
even in these situations we have like

2598
01:43:19,280 --> 01:43:20,880
ratcheted the

2599
01:43:20,880 --> 01:43:21,840
problem forward at least from

2600
01:43:21,840 --> 01:43:24,800
confidentiality point of view um i guess

2601
01:43:24,800 --> 01:43:27,760
my second note is you are making sort of

2602
01:43:27,760 --> 01:43:30,080
a call here to back encrypted client

2603
01:43:30,080 --> 01:43:32,400
hello and i just want to say i'm

2604
01:43:32,400 --> 01:43:33,679
actually bullish on that i think that's

2605
01:43:33,679 --> 01:43:35,600
going to work out the distinction you

2606
01:43:35,600 --> 01:43:37,040
draw here of

2607
01:43:37,040 --> 01:43:40,000
uh the old esn i and the migration to

2608
01:43:40,000 --> 01:43:41,600
group decline hello i think all you're

2609
01:43:41,600 --> 01:43:43,679
seeing there are those gears turning a

2610
01:43:43,679 --> 01:43:45,040
little slowly but i don't think it's

2611
01:43:45,040 --> 01:43:47,119
really ever exception in the marketplace

2612
01:43:47,119 --> 01:43:48,320
so

2613
01:43:48,320 --> 01:43:50,400
cool thank you for this

2614
01:43:50,400 --> 01:43:52,719
thank you for the comments and uh i i

2615
01:43:52,719 --> 01:43:55,440
totally agree on that um

2616
01:43:55,440 --> 01:43:56,320
so

2617
01:43:56,320 --> 01:43:58,960
these protocols are like uh i think they

2618
01:43:58,960 --> 01:44:00,880
are of course they're not gonna go like

2619
01:44:00,880 --> 01:44:02,639
be employ and address all of the

2620
01:44:02,639 --> 01:44:04,400
problems out there of course they will

2621
01:44:04,400 --> 01:44:06,320
introduce new problems that we may face

2622
01:44:06,320 --> 01:44:08,320
too with until you know how how we're

2623
01:44:08,320 --> 01:44:10,560
gonna do the packet inspection how we do

2624
01:44:10,560 --> 01:44:13,199
gonna do uh you know malware detections

2625
01:44:13,199 --> 01:44:16,320
and and all of that uh but i believe

2626
01:44:16,320 --> 01:44:18,480
these technologies are very important

2627
01:44:18,480 --> 01:44:21,840
for our online privacy and in the long

2628
01:44:21,840 --> 01:44:23,119
run

2629
01:44:23,119 --> 01:44:24,239
um

2630
01:44:24,239 --> 01:44:26,560
just like i believe like 10 years or

2631
01:44:26,560 --> 01:44:28,400
even 15 years ago when people talking

2632
01:44:28,400 --> 01:44:32,480
about uh moving from http to 100 https a

2633
01:44:32,480 --> 01:44:34,719
lot of people was very like uh

2634
01:44:34,719 --> 01:44:36,560
susceptible about that but then now you

2635
01:44:36,560 --> 01:44:38,719
see like more than 90 percent of the web

2636
01:44:38,719 --> 01:44:42,320
is like over https and uh just similar

2637
01:44:42,320 --> 01:44:44,159
to that i i believe there will be a day

2638
01:44:44,159 --> 01:44:46,239
that encrypted client hello will be

2639
01:44:46,239 --> 01:44:49,119
deployed universally and hopefully it

2640
01:44:49,119 --> 01:44:51,840
will help to address some of the

2641
01:44:51,840 --> 01:44:55,679
the problem about civilian censorship

2642
01:44:56,560 --> 01:44:58,719
thank you

2643
01:44:58,719 --> 01:44:59,920
um

2644
01:44:59,920 --> 01:45:02,480
yeah then we finally go on to nick

2645
01:45:02,480 --> 01:45:06,000
you can try to join us again

2646
01:45:10,000 --> 01:45:12,320
how about now

2647
01:45:12,320 --> 01:45:14,639
yes we can hear you we can see you

2648
01:45:14,639 --> 01:45:18,639
all right we're we're getting somewhere

2649
01:45:21,199 --> 01:45:23,040
so actually it's easier if you if you

2650
01:45:23,040 --> 01:45:24,880
don't do screen share but only

2651
01:45:24,880 --> 01:45:26,400
slideshare because we uploaded your

2652
01:45:26,400 --> 01:45:27,840
slide so if you

2653
01:45:27,840 --> 01:45:31,800
oh okay uh

2654
01:45:34,880 --> 01:45:37,199
the paper sign right next to screen

2655
01:45:37,199 --> 01:45:38,719
share

2656
01:45:38,719 --> 01:45:39,600
okay

2657
01:45:39,600 --> 01:45:41,520
yeah it's

2658
01:45:41,520 --> 01:45:45,840
open system preferences okay

2659
01:45:46,159 --> 01:45:48,800
no yes stop that process just um hit the

2660
01:45:48,800 --> 01:45:51,840
paper sign oh here

2661
01:45:51,840 --> 01:45:54,159
okay in the hand and the screen share

2662
01:45:54,159 --> 01:45:58,119
sign not a thick

2663
01:45:58,320 --> 01:45:59,760
all right

2664
01:45:59,760 --> 01:46:02,159
or i can't oh he wants to quit firefox

2665
01:46:02,159 --> 01:46:03,679
and reopen this

2666
01:46:03,679 --> 01:46:05,920
no no wait wait i do it

2667
01:46:05,920 --> 01:46:08,320
stay late

2668
01:46:08,320 --> 01:46:11,679
uh later okay

2669
01:46:11,840 --> 01:46:14,320
yeah let's use your slides i've

2670
01:46:14,320 --> 01:46:16,639
i've got slides here but

2671
01:46:16,639 --> 01:46:19,520
let's just do it your way

2672
01:46:19,520 --> 01:46:22,880
no i selected the wrong side

2673
01:46:24,320 --> 01:46:29,199
there's this great software called zoom

2674
01:46:29,199 --> 01:46:31,280
that actually works um

2675
01:46:31,280 --> 01:46:32,560
let's see

2676
01:46:32,560 --> 01:46:34,960
uh fantastically well i can see myself

2677
01:46:34,960 --> 01:46:36,320
behind you in the room that's kind of

2678
01:46:36,320 --> 01:46:38,559
cool

2679
01:46:38,719 --> 01:46:41,360
i don't know if we're gonna get

2680
01:46:41,360 --> 01:46:42,400
slides

2681
01:46:42,400 --> 01:46:44,639
i could go back to brave i could try

2682
01:46:44,639 --> 01:46:47,119
that again

2683
01:46:48,239 --> 01:46:50,560
uh no give me one second sorry this is

2684
01:46:50,560 --> 01:46:52,639
my photo okay

2685
01:46:52,639 --> 01:46:54,320
because they should be here we'll get

2686
01:46:54,320 --> 01:46:58,000
there i'll just talk fast um

2687
01:46:58,000 --> 01:47:00,400
this is

2688
01:47:01,280 --> 01:47:03,679
let me just see if i can uh yeah did you

2689
01:47:03,679 --> 01:47:05,119
upload them already

2690
01:47:05,119 --> 01:47:07,040
or did you convert them already

2691
01:47:07,040 --> 01:47:09,360
you can also do that okay

2692
01:47:09,360 --> 01:47:12,400
yeah there's so many solutions here

2693
01:47:12,400 --> 01:47:13,280
yeah

2694
01:47:13,280 --> 01:47:16,239
so there it is

2695
01:47:18,719 --> 01:47:21,719
yikes

2696
01:47:29,920 --> 01:47:32,800
oh man okay

2697
01:47:34,320 --> 01:47:37,119
hey look at that amazing okay

2698
01:47:37,119 --> 01:47:39,679
um hi everyone great

2699
01:47:39,679 --> 01:47:41,760
uh i'm going to talk a little bit and

2700
01:47:41,760 --> 01:47:44,400
thanks to miria and dave for the invite

2701
01:47:44,400 --> 01:47:46,480
uh to the group it's great to

2702
01:47:46,480 --> 01:47:49,840
see a lot of familiar and friendly faces

2703
01:47:49,840 --> 01:47:51,199
i'm going to talk about some work we've

2704
01:47:51,199 --> 01:47:53,119
been doing to

2705
01:47:53,119 --> 01:47:54,320
measure

2706
01:47:54,320 --> 01:47:56,560
the availability and response times of

2707
01:47:56,560 --> 01:47:58,480
some of the public encrypted dns

2708
01:47:58,480 --> 01:48:00,080
resolvers

2709
01:48:00,080 --> 01:48:01,040
i think

2710
01:48:01,040 --> 01:48:03,600
as this group probably knows very well

2711
01:48:03,600 --> 01:48:05,040
i'm not going to spend any time on the

2712
01:48:05,040 --> 01:48:07,520
background of encrypted dns or dns over

2713
01:48:07,520 --> 01:48:09,040
https

2714
01:48:09,040 --> 01:48:10,960
um as this group probably also knows

2715
01:48:10,960 --> 01:48:12,000
pretty well

2716
01:48:12,000 --> 01:48:13,679
uh there are some

2717
01:48:13,679 --> 01:48:15,920
so-called mainstream resolvers i'll

2718
01:48:15,920 --> 01:48:17,440
define what i mean by that in just a

2719
01:48:17,440 --> 01:48:19,199
minute but um

2720
01:48:19,199 --> 01:48:21,199
what we were interested in

2721
01:48:21,199 --> 01:48:23,360
in sort of looking at in this work is if

2722
01:48:23,360 --> 01:48:25,600
you go to like dns qrik proxy there's a

2723
01:48:25,600 --> 01:48:27,679
whole bunch of other

2724
01:48:27,679 --> 01:48:30,159
dns

2725
01:48:30,239 --> 01:48:31,280
do

2726
01:48:31,280 --> 01:48:33,840
dot resolvers etc that are listed on

2727
01:48:33,840 --> 01:48:36,320
that page as you can use these

2728
01:48:36,320 --> 01:48:38,239
and so we we wondered about that we

2729
01:48:38,239 --> 01:48:40,400
wondered well can you actually use them

2730
01:48:40,400 --> 01:48:42,560
and if you go to link

2731
01:48:42,560 --> 01:48:45,520
there and there's there's a draft paper

2732
01:48:45,520 --> 01:48:47,760
linked off of that page that's

2733
01:48:47,760 --> 01:48:50,159
fresh

2734
01:48:50,480 --> 01:48:52,320
you can see the full list i've i'll put

2735
01:48:52,320 --> 01:48:54,239
some examples up in just a minute but

2736
01:48:54,239 --> 01:48:57,280
the the the gist of this uh work is to

2737
01:48:57,280 --> 01:48:59,600
try to really figure out

2738
01:48:59,600 --> 01:49:02,400
how many public encrypted dns resolvers

2739
01:49:02,400 --> 01:49:04,000
are out there that you can you can

2740
01:49:04,000 --> 01:49:05,520
actually use

2741
01:49:05,520 --> 01:49:07,440
that aren't some of the some of the

2742
01:49:07,440 --> 01:49:09,040
usual suspects

2743
01:49:09,040 --> 01:49:12,239
and credit to rania sharma

2744
01:49:12,239 --> 01:49:13,199
who

2745
01:49:13,199 --> 01:49:15,199
did a lot of this measurement work

2746
01:49:15,199 --> 01:49:16,960
uh rania is

2747
01:49:16,960 --> 01:49:18,560
actually did this work as a high school

2748
01:49:18,560 --> 01:49:21,119
student um and she will be an undergrad

2749
01:49:21,119 --> 01:49:22,719
a first-year undergrad

2750
01:49:22,719 --> 01:49:25,679
at university of chicago in in the fall

2751
01:49:25,679 --> 01:49:28,239
so hopefully we'll have a

2752
01:49:28,239 --> 01:49:31,759
encrypted dns expert

2753
01:49:32,159 --> 01:49:34,480
four years from now who's

2754
01:49:34,480 --> 01:49:36,480
ready to go out into the world

2755
01:49:36,480 --> 01:49:37,520
um

2756
01:49:37,520 --> 01:49:39,760
so um

2757
01:49:39,760 --> 01:49:41,679
part of this you can you can see i think

2758
01:49:41,679 --> 01:49:44,159
from from the page as there's a is an

2759
01:49:44,159 --> 01:49:45,840
open source tool for measuring encrypted

2760
01:49:45,840 --> 01:49:47,440
dns performance

2761
01:49:47,440 --> 01:49:50,080
uh that we used uh to perform these

2762
01:49:50,080 --> 01:49:51,599
measurements you can you can find it

2763
01:49:51,599 --> 01:49:53,199
from that page i linked

2764
01:49:53,199 --> 01:49:54,400
um

2765
01:49:54,400 --> 01:49:55,679
that's

2766
01:49:55,679 --> 01:49:57,840
an ongoing and active development

2767
01:49:57,840 --> 01:50:00,719
actually as we consider as we continue

2768
01:50:00,719 --> 01:50:03,520
uh work in this uh space

2769
01:50:03,520 --> 01:50:04,400
um

2770
01:50:04,400 --> 01:50:05,520
you know dig

2771
01:50:05,520 --> 01:50:08,000
uh et cetera have added dough and dot

2772
01:50:08,000 --> 01:50:10,000
support and so we'll we're going to be

2773
01:50:10,000 --> 01:50:11,599
redoing a bunch of these measurements

2774
01:50:11,599 --> 01:50:14,400
with uh with dig

2775
01:50:14,400 --> 01:50:16,800
but some of what we've released includes

2776
01:50:16,800 --> 01:50:18,960
not only doe lookup time measurements

2777
01:50:18,960 --> 01:50:21,360
but also web response time

2778
01:50:21,360 --> 01:50:23,280
measurements

2779
01:50:23,280 --> 01:50:26,320
so using the tool that we developed um

2780
01:50:26,320 --> 01:50:27,840
we've measured those response times

2781
01:50:27,840 --> 01:50:29,199
using a

2782
01:50:29,199 --> 01:50:31,679
very large list of resolvers

2783
01:50:31,679 --> 01:50:33,440
including the mainstream resolvers which

2784
01:50:33,440 --> 01:50:35,360
i'll show some comparisons of

2785
01:50:35,360 --> 01:50:37,520
as well as what we call non-mainstream

2786
01:50:37,520 --> 01:50:38,639
resolvers

2787
01:50:38,639 --> 01:50:40,560
and then we study how the performance of

2788
01:50:40,560 --> 01:50:43,040
these resolvers differ based on vantage

2789
01:50:43,040 --> 01:50:44,719
point because you can imagine

2790
01:50:44,719 --> 01:50:47,040
uh some of the some of the

2791
01:50:47,040 --> 01:50:50,080
usual suspects they're highly replicated

2792
01:50:50,080 --> 01:50:51,679
but some of the others that are further

2793
01:50:51,679 --> 01:50:53,040
down on the list you know they may be

2794
01:50:53,040 --> 01:50:54,639
deployed in a particular country or

2795
01:50:54,639 --> 01:50:56,560
continent and so if you're going to

2796
01:50:56,560 --> 01:50:57,760
measure that

2797
01:50:57,760 --> 01:50:59,440
performance you probably want to measure

2798
01:50:59,440 --> 01:51:02,800
it uh from you know from the

2799
01:51:02,800 --> 01:51:05,199
uh nearby as well as not nearby so we

2800
01:51:05,199 --> 01:51:07,040
did we we did our measurements from a

2801
01:51:07,040 --> 01:51:08,719
vantage point in north america europe

2802
01:51:08,719 --> 01:51:10,400
and and asia

2803
01:51:10,400 --> 01:51:11,520
um

2804
01:51:11,520 --> 01:51:12,480
we

2805
01:51:12,480 --> 01:51:13,520
um

2806
01:51:13,520 --> 01:51:14,639
continue

2807
01:51:14,639 --> 01:51:16,719
to expand on this work i'll talk about

2808
01:51:16,719 --> 01:51:18,719
that in the in the conclusion

2809
01:51:18,719 --> 01:51:20,480
uh because we only did it from these

2810
01:51:20,480 --> 01:51:22,560
three vantage points

2811
01:51:22,560 --> 01:51:25,760
and it was a one-time shot but we're

2812
01:51:25,760 --> 01:51:27,520
extending that

2813
01:51:27,520 --> 01:51:29,599
first let me sort of talk about

2814
01:51:29,599 --> 01:51:32,159
the context so

2815
01:51:32,159 --> 01:51:34,880
modern browsers provide a few choices

2816
01:51:34,880 --> 01:51:36,159
for encrypted

2817
01:51:36,159 --> 01:51:38,400
dns resolvers uh

2818
01:51:38,400 --> 01:51:40,239
we define those as

2819
01:51:40,239 --> 01:51:42,719
mainstream so you can see the choices

2820
01:51:42,719 --> 01:51:44,480
here this by the way is as of a couple

2821
01:51:44,480 --> 01:51:47,199
months ago it's constantly changing so

2822
01:51:47,199 --> 01:51:50,880
if you see a mistake please let me know

2823
01:51:50,880 --> 01:51:51,760
so

2824
01:51:51,760 --> 01:51:52,639
um

2825
01:51:52,639 --> 01:51:54,719
the performance of these is is of course

2826
01:51:54,719 --> 01:51:57,440
of interest in the the draft paper that

2827
01:51:57,440 --> 01:52:00,559
i linked does

2828
01:52:00,960 --> 01:52:02,400
you know provide measurements on all

2829
01:52:02,400 --> 01:52:03,840
those and we do comparisons against

2830
01:52:03,840 --> 01:52:05,679
those we were also interested in like

2831
01:52:05,679 --> 01:52:07,440
all these other doe resolvers that are

2832
01:52:07,440 --> 01:52:09,440
supposedly running are they actually

2833
01:52:09,440 --> 01:52:12,320
running and can you use them and so

2834
01:52:12,320 --> 01:52:14,159
forth um

2835
01:52:14,159 --> 01:52:16,960
so uh so yeah so we measured a bunch of

2836
01:52:16,960 --> 01:52:18,880
different things one was availability

2837
01:52:18,880 --> 01:52:20,639
which doe resolvers are active and

2838
01:52:20,639 --> 01:52:22,480
responding to queries

2839
01:52:22,480 --> 01:52:24,480
uh we also wanted to measure the round

2840
01:52:24,480 --> 01:52:26,800
trip latency to each resolver i should

2841
01:52:26,800 --> 01:52:27,599
say

2842
01:52:27,599 --> 01:52:29,599
um because we want to measure our look

2843
01:52:29,599 --> 01:52:31,679
up times against uh

2844
01:52:31,679 --> 01:52:33,119
against

2845
01:52:33,119 --> 01:52:34,960
i guess in the context of what that

2846
01:52:34,960 --> 01:52:37,040
round trip latency is and then finally

2847
01:52:37,040 --> 01:52:39,679
of course what's the query response time

2848
01:52:39,679 --> 01:52:42,320
uh the experiment setup uh we had three

2849
01:52:42,320 --> 01:52:43,920
global vantage points as i mentioned

2850
01:52:43,920 --> 01:52:45,280
here they are

2851
01:52:45,280 --> 01:52:48,080
uh this particular study we did queries

2852
01:52:48,080 --> 01:52:50,000
to google and netflix

2853
01:52:50,000 --> 01:52:51,360
and this is not a full list of the

2854
01:52:51,360 --> 01:52:52,480
resolvers

2855
01:52:52,480 --> 01:52:54,320
that we queried for that i couldn't fit

2856
01:52:54,320 --> 01:52:56,000
them all on the slide but for that you

2857
01:52:56,000 --> 01:52:57,679
can look at the at the paper but there

2858
01:52:57,679 --> 01:52:58,960
are um

2859
01:52:58,960 --> 01:53:01,440
uh i think 80 or 100 some odd uh

2860
01:53:01,440 --> 01:53:02,639
resolvers

2861
01:53:02,639 --> 01:53:04,960
that we did query so you can see some

2862
01:53:04,960 --> 01:53:06,719
this is just the top of the list so you

2863
01:53:06,719 --> 01:53:08,480
can see some usual suspects in here and

2864
01:53:08,480 --> 01:53:11,599
you can see some perhaps less familiar

2865
01:53:11,599 --> 01:53:13,280
faces

2866
01:53:13,280 --> 01:53:15,760
um first thing we looked at was you know

2867
01:53:15,760 --> 01:53:18,639
are these non-mainstream resolvers

2868
01:53:18,639 --> 01:53:19,840
available

2869
01:53:19,840 --> 01:53:22,159
and uh turns out that you know a lot of

2870
01:53:22,159 --> 01:53:24,480
them uh you know

2871
01:53:24,480 --> 01:53:28,239
we saw a fairly high

2872
01:53:28,239 --> 01:53:30,880
failure rate as you can see

2873
01:53:30,880 --> 01:53:33,360
uh here in a lot of cases we were not

2874
01:53:33,360 --> 01:53:35,920
able to uh to even connect

2875
01:53:35,920 --> 01:53:39,520
uh to the um to the resolver

2876
01:53:39,520 --> 01:53:41,679
in some cases we were able to connect

2877
01:53:41,679 --> 01:53:43,520
but we got like an

2878
01:53:43,520 --> 01:53:46,320
http error code status i mean other

2879
01:53:46,320 --> 01:53:47,440
cases

2880
01:53:47,440 --> 01:53:48,320
we

2881
01:53:48,320 --> 01:53:52,239
uh you know had ssl tls errors or other

2882
01:53:52,239 --> 01:53:55,520
errors in http um

2883
01:53:55,520 --> 01:53:57,679
so you can see basically about a

2884
01:53:57,679 --> 01:53:59,520
you know 78

2885
01:53:59,520 --> 01:54:01,679
success rate um

2886
01:54:01,679 --> 01:54:02,800
which is

2887
01:54:02,800 --> 01:54:05,040
um

2888
01:54:05,040 --> 01:54:06,480
well

2889
01:54:06,480 --> 01:54:08,400
let's leave it at that

2890
01:54:08,400 --> 01:54:09,840
um

2891
01:54:09,840 --> 01:54:11,679
good um

2892
01:54:11,679 --> 01:54:13,440
okay so here

2893
01:54:13,440 --> 01:54:16,000
um here what we do and i hope this is

2894
01:54:16,000 --> 01:54:19,119
this is large enough uh for you to see

2895
01:54:19,119 --> 01:54:21,520
but um here what we do is we look at how

2896
01:54:21,520 --> 01:54:24,320
the mainstream resolvers perform

2897
01:54:24,320 --> 01:54:26,080
and i'm going to walk through this uh

2898
01:54:26,080 --> 01:54:28,960
kind of one one box plot by one box plot

2899
01:54:28,960 --> 01:54:30,159
so these are

2900
01:54:30,159 --> 01:54:32,080
uh box and whisker plots if you're

2901
01:54:32,080 --> 01:54:34,080
familiar with those we're looking at

2902
01:54:34,080 --> 01:54:35,520
distributions

2903
01:54:35,520 --> 01:54:36,560
and

2904
01:54:36,560 --> 01:54:38,560
um

2905
01:54:38,560 --> 01:54:39,760
and you can see

2906
01:54:39,760 --> 01:54:41,920
going down the list here we've got

2907
01:54:41,920 --> 01:54:42,800
uh

2908
01:54:42,800 --> 01:54:46,719
resolvers okay um these are sorted

2909
01:54:46,719 --> 01:54:49,760
by median response median uh

2910
01:54:49,760 --> 01:54:51,360
dns

2911
01:54:51,360 --> 01:54:53,440
response time

2912
01:54:53,440 --> 01:54:55,840
uh oh

2913
01:54:55,840 --> 01:54:58,480
yep sort of my median dns response time

2914
01:54:58,480 --> 01:54:59,840
uh and and

2915
01:54:59,840 --> 01:55:01,199
uh oops

2916
01:55:01,199 --> 01:55:02,719
and this is

2917
01:55:02,719 --> 01:55:06,639
this is dough okay um

2918
01:55:06,639 --> 01:55:07,760
so

2919
01:55:07,760 --> 01:55:10,000
um

2920
01:55:10,480 --> 01:55:13,760
for each resolver you can see the red in

2921
01:55:13,760 --> 01:55:16,080
the red or the top of the group it's

2922
01:55:16,080 --> 01:55:18,320
it's a grouped box and whisker you can

2923
01:55:18,320 --> 01:55:19,920
see the ping time so that's just like

2924
01:55:19,920 --> 01:55:21,360
icmp ping

2925
01:55:21,360 --> 01:55:22,719
and again that's

2926
01:55:22,719 --> 01:55:24,719
um that's a distribution so you can see

2927
01:55:24,719 --> 01:55:26,800
a green line for each of those that

2928
01:55:26,800 --> 01:55:29,040
shows like what's the the median ping

2929
01:55:29,040 --> 01:55:31,040
time and you can see some of these are

2930
01:55:31,040 --> 01:55:32,880
pretty close right if you're in north

2931
01:55:32,880 --> 01:55:34,800
america as you sort of move

2932
01:55:34,800 --> 01:55:36,400
uh

2933
01:55:36,400 --> 01:55:38,880
as you sort of get to less replicated

2934
01:55:38,880 --> 01:55:40,239
services

2935
01:55:40,239 --> 01:55:42,800
uh or resolvers you can see some of them

2936
01:55:42,800 --> 01:55:44,480
moving a little bit a little bit further

2937
01:55:44,480 --> 01:55:45,440
away

2938
01:55:45,440 --> 01:55:47,040
um

2939
01:55:47,040 --> 01:55:49,199
bolded are what you know what we would

2940
01:55:49,199 --> 01:55:51,119
call what we define as mainstream

2941
01:55:51,119 --> 01:55:52,560
resolvers those are the ones that are

2942
01:55:52,560 --> 01:55:54,080
that i showed on the previous slide and

2943
01:55:54,080 --> 01:55:55,920
those are uh you know

2944
01:55:55,920 --> 01:55:58,960
offered in as options in your browser

2945
01:55:58,960 --> 01:56:01,119
um and so

2946
01:56:01,119 --> 01:56:03,440
things to pay attention to here

2947
01:56:03,440 --> 01:56:05,360
are um you know

2948
01:56:05,360 --> 01:56:07,599
uh

2949
01:56:07,599 --> 01:56:09,840
the molded ones and then we've basically

2950
01:56:09,840 --> 01:56:12,080
got three of these one per vantage point

2951
01:56:12,080 --> 01:56:14,159
so if you want to just kind of focus on

2952
01:56:14,159 --> 01:56:15,440
the main takeaways you could sort of

2953
01:56:15,440 --> 01:56:17,520
start by looking at north america this

2954
01:56:17,520 --> 01:56:19,119
is by the way um

2955
01:56:19,119 --> 01:56:20,320
this is from

2956
01:56:20,320 --> 01:56:22,239
i'm showing one of these the paper has

2957
01:56:22,239 --> 01:56:23,840
has it does this three different times

2958
01:56:23,840 --> 01:56:26,560
so you see north america local

2959
01:56:26,560 --> 01:56:29,520
we're measuring north of this group here

2960
01:56:29,520 --> 01:56:33,360
our north american doe resolvers

2961
01:56:33,360 --> 01:56:34,480
um

2962
01:56:34,480 --> 01:56:36,880
as measured from north america and we

2963
01:56:36,880 --> 01:56:38,480
put the mainstream

2964
01:56:38,480 --> 01:56:40,880
dough resolvers on all three because we

2965
01:56:40,880 --> 01:56:42,880
assume they're replicated in all three

2966
01:56:42,880 --> 01:56:47,280
places but like dracoplan9ns2.com

2967
01:56:47,280 --> 01:56:48,800
that's sitting somewhere in north

2968
01:56:48,800 --> 01:56:52,960
america whereas public dns iij.jp that's

2969
01:56:52,960 --> 01:56:55,199
in japan so that's why you see that on

2970
01:56:55,199 --> 01:56:56,719
the asia plot so

2971
01:56:56,719 --> 01:56:57,760
a

2972
01:56:57,760 --> 01:57:01,119
is north america to north america local

2973
01:57:01,119 --> 01:57:03,360
b is north america to asia so that's why

2974
01:57:03,360 --> 01:57:04,880
you see higher

2975
01:57:04,880 --> 01:57:07,679
uh higher uh ping response times here

2976
01:57:07,679 --> 01:57:10,000
you can see these are clearly

2977
01:57:10,000 --> 01:57:11,599
geo-replicated

2978
01:57:11,599 --> 01:57:12,560
um

2979
01:57:12,560 --> 01:57:14,400
and then here we've got north america to

2980
01:57:14,400 --> 01:57:16,480
europe okay so

2981
01:57:16,480 --> 01:57:18,639
um a bunch of things you can take away

2982
01:57:18,639 --> 01:57:20,480
here um

2983
01:57:20,480 --> 01:57:22,159
certain and then as i mentioned just to

2984
01:57:22,159 --> 01:57:25,360
repeat these are sorted by median dns

2985
01:57:25,360 --> 01:57:27,760
encrypted dns response time so the

2986
01:57:27,760 --> 01:57:29,840
better performing ones according to that

2987
01:57:29,840 --> 01:57:32,560
median are or towards the top so

2988
01:57:32,560 --> 01:57:34,000
as expected you would see those

2989
01:57:34,000 --> 01:57:36,159
mainstream resolvers sort of closer to

2990
01:57:36,159 --> 01:57:39,280
the top there are some surprises i think

2991
01:57:39,280 --> 01:57:42,560
like you know for example uh or dns that

2992
01:57:42,560 --> 01:57:44,480
he does so hurricane electric apparently

2993
01:57:44,480 --> 01:57:46,960
runs a pretty decent um

2994
01:57:46,960 --> 01:57:48,639
encrypted dns resolver that is

2995
01:57:48,639 --> 01:57:50,960
replicated and also performs pretty well

2996
01:57:50,960 --> 01:57:53,199
even though it's not a browser option

2997
01:57:53,199 --> 01:57:54,159
um

2998
01:57:54,159 --> 01:57:55,440
and then

2999
01:57:55,440 --> 01:57:57,840
some of these others you know they may

3000
01:57:57,840 --> 01:58:00,800
be reasonable options depending on

3001
01:58:00,800 --> 01:58:02,719
where you happen to be

3002
01:58:02,719 --> 01:58:04,639
sitting in the world

3003
01:58:04,639 --> 01:58:06,000
one of the things that we didn't do in

3004
01:58:06,000 --> 01:58:07,920
this study i noticed i'm coming up on

3005
01:58:07,920 --> 01:58:08,719
time

3006
01:58:08,719 --> 01:58:09,840
that we

3007
01:58:09,840 --> 01:58:11,440
are in the process of doing is also

3008
01:58:11,440 --> 01:58:13,679
doing page load times this is just this

3009
01:58:13,679 --> 01:58:15,760
is just doe response time if you

3010
01:58:15,760 --> 01:58:17,520
presumably also care about web page

3011
01:58:17,520 --> 01:58:18,400
loads

3012
01:58:18,400 --> 01:58:19,520
but um

3013
01:58:19,520 --> 01:58:21,440
i i think you know

3014
01:58:21,440 --> 01:58:23,840
um this is pretty interesting for a

3015
01:58:23,840 --> 01:58:25,599
number of reasons i think we expect the

3016
01:58:25,599 --> 01:58:27,599
the the mainstream resolvers to perform

3017
01:58:27,599 --> 01:58:28,800
pretty well but another thing that i

3018
01:58:28,800 --> 01:58:31,199
think the ietf is considering a lot is

3019
01:58:31,199 --> 01:58:32,960
consolidation

3020
01:58:32,960 --> 01:58:34,960
right and um

3021
01:58:34,960 --> 01:58:36,639
for the healthy you know for a healthy

3022
01:58:36,639 --> 01:58:39,920
dough ecosystem it is good to have many

3023
01:58:39,920 --> 01:58:42,560
organizations that operate uh dough

3024
01:58:42,560 --> 01:58:44,719
resolvers that we can use

3025
01:58:44,719 --> 01:58:46,639
uh that perform well and i think there's

3026
01:58:46,639 --> 01:58:48,719
there's good news and there's news here

3027
01:58:48,719 --> 01:58:49,599
um

3028
01:58:49,599 --> 01:58:51,199
i don't know if you know i don't know if

3029
01:58:51,199 --> 01:58:52,719
there's bad news but there's certainly

3030
01:58:52,719 --> 01:58:54,639
information here about other resolvers

3031
01:58:54,639 --> 01:58:56,639
that that others can use in other places

3032
01:58:56,639 --> 01:58:57,360
to

3033
01:58:57,360 --> 01:59:00,400
to invest um this is i think my final

3034
01:59:00,400 --> 01:59:01,760
plot and then i'll kind of come to

3035
01:59:01,760 --> 01:59:03,040
conclusions but

3036
01:59:03,040 --> 01:59:04,159
that was a little trick you know that

3037
01:59:04,159 --> 01:59:06,080
was a little bit of an eye chart and so

3038
01:59:06,080 --> 01:59:07,760
one of the things that we've

3039
01:59:07,760 --> 01:59:10,080
also been uh sort of looking at

3040
01:59:10,080 --> 01:59:10,880
is

3041
01:59:10,880 --> 01:59:12,239
um

3042
01:59:12,239 --> 01:59:15,360
you know how do these resolvers perform

3043
01:59:15,360 --> 01:59:17,040
with respect

3044
01:59:17,040 --> 01:59:19,280
to to network round trip time right

3045
01:59:19,280 --> 01:59:20,480
because that's that's the fair

3046
01:59:20,480 --> 01:59:22,320
comparison in in some sense from like

3047
01:59:22,320 --> 01:59:24,400
wherever we happen to be sitting where

3048
01:59:24,400 --> 01:59:26,000
is that resolver

3049
01:59:26,000 --> 01:59:27,840
right and then you would expect it like

3050
01:59:27,840 --> 01:59:29,760
hopefully you know at least on your

3051
01:59:29,760 --> 01:59:31,679
initial look up you've got a couple

3052
01:59:31,679 --> 01:59:33,840
round trip times to set up your your tcp

3053
01:59:33,840 --> 01:59:35,440
connection in your tls connection but

3054
01:59:35,440 --> 01:59:37,360
then hopefully you're not adding too

3055
01:59:37,360 --> 01:59:39,440
much latency on top of that

3056
01:59:39,440 --> 01:59:41,760
and you can kind of see how that is if

3057
01:59:41,760 --> 01:59:43,280
you look at sort of how's it going in

3058
01:59:43,280 --> 01:59:44,719
north america

3059
01:59:44,719 --> 01:59:46,960
asia and europe and you can in each

3060
01:59:46,960 --> 01:59:48,639
point here each blue point is a doe

3061
01:59:48,639 --> 01:59:50,080
resolver

3062
01:59:50,080 --> 01:59:52,239
and so so i don't know what's good

3063
01:59:52,239 --> 01:59:54,080
things should not be probably below the

3064
01:59:54,080 --> 01:59:55,599
line so

3065
01:59:55,599 --> 01:59:56,400
but

3066
01:59:56,400 --> 01:59:59,440
um but you can see here that you know um

3067
01:59:59,440 --> 02:00:00,239
how

3068
02:00:00,239 --> 02:00:02,480
we're doing as far as

3069
02:00:02,480 --> 02:00:04,880
um you know the existence of of

3070
02:00:04,880 --> 02:00:06,960
performant though resolvers around the

3071
02:00:06,960 --> 02:00:08,719
world so this is all in the paper that's

3072
02:00:08,719 --> 02:00:10,239
linked their slides are also linked from

3073
02:00:10,239 --> 02:00:11,440
that page

3074
02:00:11,440 --> 02:00:14,239
um so in conclusion you know i think the

3075
02:00:14,239 --> 02:00:16,000
non-mainstream resolvers have a higher

3076
02:00:16,000 --> 02:00:17,760
median response time than the mainstream

3077
02:00:17,760 --> 02:00:20,320
ones uh typically speaking the

3078
02:00:20,320 --> 02:00:22,560
mainstream ones appear to be replicated

3079
02:00:22,560 --> 02:00:23,679
um

3080
02:00:23,679 --> 02:00:25,679
however a local non-mainstream resolver

3081
02:00:25,679 --> 02:00:27,360
you know sometimes actually exhibits

3082
02:00:27,360 --> 02:00:29,360
equivalent performance as compared to

3083
02:00:29,360 --> 02:00:30,960
some of the mainstream ones hurricane

3084
02:00:30,960 --> 02:00:31,920
electric

3085
02:00:31,920 --> 02:00:35,040
uh in north america and in general um

3086
02:00:35,040 --> 02:00:37,199
all dns in europe and there's there's

3087
02:00:37,199 --> 02:00:38,960
one in greece also that actually seems

3088
02:00:38,960 --> 02:00:40,320
to perform pretty well even though it

3089
02:00:40,320 --> 02:00:43,040
wasn't uh globally replicated so i think

3090
02:00:43,040 --> 02:00:44,960
this presents some some interesting

3091
02:00:44,960 --> 02:00:46,719
early findings some opportunities as i

3092
02:00:46,719 --> 02:00:48,480
mentioned there's a bunch of

3093
02:00:48,480 --> 02:00:50,000
uh ways that they're following up on

3094
02:00:50,000 --> 02:00:51,679
these measurements and i look forward to

3095
02:00:51,679 --> 02:00:54,400
the feedback of the map rg and again

3096
02:00:54,400 --> 02:00:56,480
thank you so much to dave and miriam for

3097
02:00:56,480 --> 02:00:58,480
the invite and the privilege of speaking

3098
02:00:58,480 --> 02:00:59,840
to the group

3099
02:00:59,840 --> 02:01:00,800
and

3100
02:01:00,800 --> 02:01:02,800
really welcoming the feedback

3101
02:01:02,800 --> 02:01:04,639
thank you

3102
02:01:04,639 --> 02:01:06,880
thanks nick snick um we don't really

3103
02:01:06,880 --> 02:01:09,679
have time for um questions anymore but

3104
02:01:09,679 --> 02:01:11,840
yeah

3105
02:01:12,080 --> 02:01:13,360
um

3106
02:01:13,360 --> 02:01:14,880
and i also don't see anyone in the queue

3107
02:01:14,880 --> 02:01:16,800
but you know how to reach nick there's

3108
02:01:16,800 --> 02:01:19,119
this chat there's mailing this there is

3109
02:01:19,119 --> 02:01:20,400
probably

3110
02:01:20,400 --> 02:01:23,040
here's a website that has a link that

3111
02:01:23,040 --> 02:01:25,040
slides to the paper and you can reach me

3112
02:01:25,040 --> 02:01:26,560
from there too

3113
02:01:26,560 --> 02:01:28,560
cool nick i posted that link in the chat

3114
02:01:28,560 --> 02:01:29,840
too for people

3115
02:01:29,840 --> 02:01:31,040
sweet

3116
02:01:31,040 --> 02:01:33,040
yeah

3117
02:01:33,040 --> 02:01:35,360
okay that means we're at the end of the

3118
02:01:35,360 --> 02:01:37,280
session we're at the end of the ietf

3119
02:01:37,280 --> 02:01:38,800
meeting i just want to say one more

3120
02:01:38,800 --> 02:01:40,480
thing this time we only got a very few

3121
02:01:40,480 --> 02:01:42,159
contributions and we were very lucky

3122
02:01:42,159 --> 02:01:43,520
that we reached out to some people and

3123
02:01:43,520 --> 02:01:45,520
they said but then it's less yes to

3124
02:01:45,520 --> 02:01:46,960
present here and so we had a nice

3125
02:01:46,960 --> 02:01:48,000
program

3126
02:01:48,000 --> 02:01:50,320
um but we're depending on contributions

3127
02:01:50,320 --> 02:01:52,159
so like let people know about this group

3128
02:01:52,159 --> 02:01:53,920
um if anybody's doing measurements

3129
02:01:53,920 --> 02:01:55,840
please come to us and tell us about it

3130
02:01:55,840 --> 02:01:57,440
that's very helpful

3131
02:01:57,440 --> 02:01:58,880
dave

3132
02:01:58,880 --> 02:02:00,719
those of you are traveling happy travels

3133
02:02:00,719 --> 02:02:02,880
home and we will see you in the fall if

3134
02:02:02,880 --> 02:02:04,800
not before

3135
02:02:04,800 --> 02:02:08,280
thank you bye

3136
02:02:26,800 --> 02:02:29,800
is

3137
02:02:56,080 --> 02:02:59,080
guys

3138
02:03:10,080 --> 02:03:13,080
so

3139
02:03:39,360 --> 02:03:42,598
last minute

