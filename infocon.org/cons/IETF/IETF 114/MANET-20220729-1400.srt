1
00:00:10,559 --> 00:00:13,799
this is

2
00:00:25,039 --> 00:00:27,279
julius can we do a quick

3
00:00:27,279 --> 00:00:30,840
microphone test

4
00:00:37,280 --> 00:00:38,239
hello

5
00:00:38,239 --> 00:00:40,959
can you hear me

6
00:00:41,200 --> 00:00:43,920
very well and we can see you as well

7
00:00:43,920 --> 00:00:46,079
good

8
00:00:47,200 --> 00:00:51,039
all right okay we should get going yep

9
00:00:51,840 --> 00:00:53,120
all right

10
00:00:53,120 --> 00:00:54,320
good day

11
00:00:54,320 --> 00:00:55,280
um

12
00:00:55,280 --> 00:00:56,840
welcome to the

13
00:00:56,840 --> 00:00:59,600
um joint session of

14
00:00:59,600 --> 00:01:01,920
babel roll and man a on multicast

15
00:01:01,920 --> 00:01:04,320
routing

16
00:01:04,879 --> 00:01:08,320
next chart please

17
00:01:11,360 --> 00:01:13,200
you've probably all seen this but

18
00:01:13,200 --> 00:01:15,439
just to highlight the note well again

19
00:01:15,439 --> 00:01:16,880
and uh

20
00:01:16,880 --> 00:01:19,600
so you agree to follow the

21
00:01:19,600 --> 00:01:23,119
itf processes and policies um and you're

22
00:01:23,119 --> 00:01:26,000
aware of the patent policy

23
00:01:26,000 --> 00:01:29,439
and you um

24
00:01:29,759 --> 00:01:31,840
as a participant you agree to work

25
00:01:31,840 --> 00:01:35,280
respectfully with others and please

26
00:01:35,280 --> 00:01:36,159
um

27
00:01:36,159 --> 00:01:38,240
take if you have any questions or

28
00:01:38,240 --> 00:01:41,280
concerns about this you can take that up

29
00:01:41,280 --> 00:01:44,560
all right next chart

30
00:01:46,079 --> 00:01:50,640
so um the meeting tips uh

31
00:01:50,640 --> 00:01:52,560
everybody here should know how to to

32
00:01:52,560 --> 00:01:55,040
sign in and

33
00:01:55,040 --> 00:01:56,880
track the attendance

34
00:01:56,880 --> 00:01:59,759
and um

35
00:01:59,759 --> 00:02:01,680
remote people

36
00:02:01,680 --> 00:02:03,840
as well

37
00:02:03,840 --> 00:02:05,759
make sure your audio and video is off

38
00:02:05,759 --> 00:02:07,280
unless you are

39
00:02:07,280 --> 00:02:08,800
are speaking

40
00:02:08,800 --> 00:02:11,520
and if you're a speaker a headset is

41
00:02:11,520 --> 00:02:13,920
recommended but we did the audio test

42
00:02:13,920 --> 00:02:15,440
with some people that didn't have that

43
00:02:15,440 --> 00:02:17,360
so you're okay

44
00:02:17,360 --> 00:02:19,840
next one

45
00:02:21,280 --> 00:02:24,239
uh just some pointers to the agenda and

46
00:02:24,239 --> 00:02:26,160
any other information that you may need

47
00:02:26,160 --> 00:02:29,280
go on to the next chart

48
00:02:29,440 --> 00:02:31,200
the resources for this session have all

49
00:02:31,200 --> 00:02:34,560
been uploaded the usual places

50
00:02:34,560 --> 00:02:37,360
and if you would um we could use some

51
00:02:37,360 --> 00:02:39,599
help with the take note-taking when

52
00:02:39,599 --> 00:02:42,000
people are uh speaking if you could do

53
00:02:42,000 --> 00:02:44,239
that

54
00:02:44,720 --> 00:02:46,720
next

55
00:02:46,720 --> 00:02:49,120
all right i'm going to pass this over to

56
00:02:49,120 --> 00:02:51,440
ronald who's going to talk about the the

57
00:02:51,440 --> 00:02:53,810
agenda part here

58
00:02:53,810 --> 00:02:55,120
[Music]

59
00:02:55,120 --> 00:02:56,140
hello um

60
00:02:56,140 --> 00:02:57,200
[Music]

61
00:02:57,200 --> 00:03:00,000
yeah we

62
00:03:00,000 --> 00:03:02,000
have a joint session

63
00:03:02,000 --> 00:03:05,840
uh with a topic multicast

64
00:03:05,840 --> 00:03:07,680
and um

65
00:03:07,680 --> 00:03:09,840
i'll give a short introduction and then

66
00:03:09,840 --> 00:03:11,280
we

67
00:03:11,280 --> 00:03:14,560
go into a number of presentations

68
00:03:14,560 --> 00:03:17,360
after that we have some time for

69
00:03:17,360 --> 00:03:19,360
discussion

70
00:03:19,360 --> 00:03:20,720
and we

71
00:03:20,720 --> 00:03:23,920
try to reach some form of a conclusion

72
00:03:23,920 --> 00:03:26,400
after that and see

73
00:03:26,400 --> 00:03:28,959
if there needs to be any follow-up

74
00:03:28,959 --> 00:03:30,640
activity to this

75
00:03:30,640 --> 00:03:34,799
and what form that may take

76
00:03:34,799 --> 00:03:35,840
so

77
00:03:35,840 --> 00:03:38,560
after the presentations are done

78
00:03:38,560 --> 00:03:41,040
you're all invited to

79
00:03:41,040 --> 00:03:43,920
voice opinions

80
00:03:43,920 --> 00:03:46,640
point out deficiencies uh whatever you

81
00:03:46,640 --> 00:03:48,480
want to do

82
00:03:48,480 --> 00:03:50,080
and then

83
00:03:50,080 --> 00:03:53,200
we wrap up the uh

84
00:03:53,200 --> 00:03:56,159
the multicast part of this session and

85
00:03:56,159 --> 00:03:58,959
as a by the way by the way of desert we

86
00:03:58,959 --> 00:04:02,000
have a presentation from julius grobach

87
00:04:02,000 --> 00:04:05,439
on exciting new features in the babel

88
00:04:05,439 --> 00:04:07,920
routing protocol

89
00:04:07,920 --> 00:04:10,238
and

90
00:04:10,879 --> 00:04:13,120
that's the program for today

91
00:04:13,120 --> 00:04:15,519
just ask for anybody any bashing any

92
00:04:15,519 --> 00:04:18,399
questions yes is there anybody who wants

93
00:04:18,399 --> 00:04:21,440
to bash the agenda

94
00:04:23,840 --> 00:04:26,479
going once going twice

95
00:04:26,479 --> 00:04:30,159
then we stick with the current agenda

96
00:04:30,320 --> 00:04:32,639
um

97
00:04:32,720 --> 00:04:34,960
the idea for this session was born in a

98
00:04:34,960 --> 00:04:36,960
conversation that

99
00:04:36,960 --> 00:04:38,560
donald eastlake

100
00:04:38,560 --> 00:04:42,080
had with uh

101
00:04:42,080 --> 00:04:43,199
the

102
00:04:43,199 --> 00:04:44,800
routing ids

103
00:04:44,800 --> 00:04:49,199
and i suspect with overall in particular

104
00:04:49,199 --> 00:04:52,560
because he also hinted

105
00:04:52,560 --> 00:04:53,840
at this

106
00:04:53,840 --> 00:04:59,120
after the money session at itf 113

107
00:04:59,120 --> 00:05:02,320
and i think it's a good idea

108
00:05:04,320 --> 00:05:06,000
the routing ids

109
00:05:06,000 --> 00:05:07,600
have seen that

110
00:05:07,600 --> 00:05:12,400
multicast was discussed in various forms

111
00:05:12,400 --> 00:05:16,080
in all three of the working groups

112
00:05:16,400 --> 00:05:18,639
but that

113
00:05:18,639 --> 00:05:21,199
not much progress

114
00:05:21,199 --> 00:05:23,039
was made

115
00:05:23,039 --> 00:05:25,680
now whether all of you agree with that i

116
00:05:25,680 --> 00:05:27,520
think it's true for monet but i cannot

117
00:05:27,520 --> 00:05:30,240
judge for the other groups

118
00:05:30,240 --> 00:05:32,000
um

119
00:05:32,000 --> 00:05:33,840
but that's also

120
00:05:33,840 --> 00:05:35,360
something that can come up in the

121
00:05:35,360 --> 00:05:38,160
discussion

122
00:05:38,160 --> 00:05:39,919
um

123
00:05:39,919 --> 00:05:41,840
today's presentations

124
00:05:41,840 --> 00:05:43,039
uh

125
00:05:43,039 --> 00:05:45,440
given by participants in all of the

126
00:05:45,440 --> 00:05:47,199
three working groups

127
00:05:47,199 --> 00:05:48,479
should

128
00:05:48,479 --> 00:05:50,720
make clear what the challenges are

129
00:05:50,720 --> 00:05:52,639
why this is not

130
00:05:52,639 --> 00:05:55,120
multicast as we know it

131
00:05:55,120 --> 00:05:58,560
in the uh maybe in the wired network

132
00:05:58,560 --> 00:05:58,910
um

133
00:05:58,910 --> 00:06:00,240
[Music]

134
00:06:00,240 --> 00:06:02,880
and what can be done about it

135
00:06:02,880 --> 00:06:04,720
and if there's anything that the three

136
00:06:04,720 --> 00:06:06,400
groups have in common that they can work

137
00:06:06,400 --> 00:06:08,560
on

138
00:06:11,680 --> 00:06:13,440
and then we see well where we go from

139
00:06:13,440 --> 00:06:15,680
there

140
00:06:19,199 --> 00:06:22,319
all right we'll come to that later

141
00:06:22,479 --> 00:06:25,360
so can you share the other

142
00:06:25,360 --> 00:06:28,360
um

143
00:06:42,880 --> 00:06:47,400
so first up is my own presentation

144
00:06:50,000 --> 00:06:52,479
you did

145
00:06:52,560 --> 00:06:54,800
okay

146
00:06:56,720 --> 00:06:58,720
yeah

147
00:06:58,720 --> 00:07:00,960
but i want to stand over there yeah i'll

148
00:07:00,960 --> 00:07:03,039
do the odds right there okay good

149
00:07:03,039 --> 00:07:06,000
don't let it go to sleep

150
00:07:07,520 --> 00:07:10,000
next one

151
00:07:13,680 --> 00:07:15,520
just gonna find your page down button

152
00:07:15,520 --> 00:07:17,680
that's all

153
00:07:17,680 --> 00:07:21,120
oh okay i got it there

154
00:07:21,120 --> 00:07:22,639
so um

155
00:07:22,639 --> 00:07:25,120
the last time that monet working group

156
00:07:25,120 --> 00:07:27,599
was recharged was in 2016.

157
00:07:27,599 --> 00:07:30,400
could you move the mic up a bit

158
00:07:30,400 --> 00:07:34,000
i'll hold it in my hand is that better

159
00:07:35,599 --> 00:07:36,639
and then

160
00:07:36,639 --> 00:07:38,360
we ended up with

161
00:07:38,360 --> 00:07:41,599
a work item in the

162
00:07:41,599 --> 00:07:43,120
in the charter

163
00:07:43,120 --> 00:07:45,199
that says that we were going to continue

164
00:07:45,199 --> 00:07:46,639
to look at simplified multicast

165
00:07:46,639 --> 00:07:47,919
forwarding

166
00:07:47,919 --> 00:07:48,879
which is

167
00:07:48,879 --> 00:07:53,240
an experimental rfc 6621

168
00:07:53,840 --> 00:07:55,919
and as part of that work

169
00:07:55,919 --> 00:08:00,479
we would produce a well-defined

170
00:08:00,479 --> 00:08:02,639
forwarding information base for

171
00:08:02,639 --> 00:08:04,639
multicast

172
00:08:04,639 --> 00:08:06,240
and some background

173
00:08:06,240 --> 00:08:09,520
on how that would look like

174
00:08:10,879 --> 00:08:14,720
is given in a presentation that is

175
00:08:14,720 --> 00:08:15,520
is

176
00:08:15,520 --> 00:08:17,430
lined up in a presentation that

177
00:08:17,430 --> 00:08:20,529
[Music]

178
00:08:20,720 --> 00:08:23,120
justin dean at the time the chair of the

179
00:08:23,120 --> 00:08:27,520
uh my neighbor group gave at itf 96

180
00:08:27,520 --> 00:08:28,639
i

181
00:08:28,639 --> 00:08:30,160
invite you to go have a look at the

182
00:08:30,160 --> 00:08:33,279
slides it's a very good presentation

183
00:08:33,279 --> 00:08:34,640
but

184
00:08:34,640 --> 00:08:37,599
to be honest nothing much happened since

185
00:08:37,599 --> 00:08:40,799
next slide please

186
00:08:40,799 --> 00:08:41,679
because

187
00:08:41,679 --> 00:08:43,200
monet

188
00:08:43,200 --> 00:08:45,200
in the subsequent years was pro was

189
00:08:45,200 --> 00:08:47,600
mostly concentrating on

190
00:08:47,600 --> 00:08:49,839
the d-lab protocol

191
00:08:49,839 --> 00:08:52,480
lots of work happened with d-lab but the

192
00:08:52,480 --> 00:08:54,000
multicast

193
00:08:54,000 --> 00:08:57,920
work item got neglected a bit

194
00:08:57,920 --> 00:09:00,160
so even before that recharge ring there

195
00:09:00,160 --> 00:09:02,080
was activity

196
00:09:02,080 --> 00:09:07,600
of course 6621 was produced in 2012.

197
00:09:07,600 --> 00:09:09,040
it's not really a full protocol

198
00:09:09,040 --> 00:09:11,360
description it basically describes

199
00:09:11,360 --> 00:09:12,880
mechanisms for duplicate packet

200
00:09:12,880 --> 00:09:14,640
detection why that is needed we will see

201
00:09:14,640 --> 00:09:16,000
later

202
00:09:16,000 --> 00:09:17,519
it also has

203
00:09:17,519 --> 00:09:18,959
three different

204
00:09:18,959 --> 00:09:21,279
so-called relay set selection

205
00:09:21,279 --> 00:09:23,040
algorithms

206
00:09:23,040 --> 00:09:25,279
or really set reduction algorithms if

207
00:09:25,279 --> 00:09:27,680
you want

208
00:09:28,000 --> 00:09:30,959
which are described in appendices

209
00:09:30,959 --> 00:09:33,200
and these make use

210
00:09:33,200 --> 00:09:35,040
of

211
00:09:35,040 --> 00:09:37,040
information that's already available

212
00:09:37,040 --> 00:09:38,560
from a

213
00:09:38,560 --> 00:09:40,080
unicast

214
00:09:40,080 --> 00:09:42,000
routing protocol monet rather than

215
00:09:42,000 --> 00:09:43,360
protocol

216
00:09:43,360 --> 00:09:45,279
to

217
00:09:45,279 --> 00:09:48,080
reduce the number of nodes that are

218
00:09:48,080 --> 00:09:49,519
retransmitting

219
00:09:49,519 --> 00:09:51,839
packets

220
00:09:52,320 --> 00:09:54,320
there was also some other work that has

221
00:09:54,320 --> 00:09:56,240
been abandoned

222
00:09:56,240 --> 00:10:00,160
the only multicast routing protocol

223
00:10:00,160 --> 00:10:02,320
and um

224
00:10:02,320 --> 00:10:05,920
it was worked on by brian adamson from

225
00:10:05,920 --> 00:10:07,600
naval research lab

226
00:10:07,600 --> 00:10:10,560
on elastic multicast routing

227
00:10:10,560 --> 00:10:13,040
and um

228
00:10:13,040 --> 00:10:16,240
this was a protocol that

229
00:10:16,240 --> 00:10:18,720
um

230
00:10:18,720 --> 00:10:21,120
tried to

231
00:10:21,120 --> 00:10:23,440
have uh

232
00:10:23,440 --> 00:10:25,839
multicast group membership awareness in

233
00:10:25,839 --> 00:10:28,399
the routers at certain points in the

234
00:10:28,399 --> 00:10:32,560
network in mobile networks that were

235
00:10:32,560 --> 00:10:34,560
somewhat more stable where there was not

236
00:10:34,560 --> 00:10:36,959
that much topology change

237
00:10:36,959 --> 00:10:38,640
and there

238
00:10:38,640 --> 00:10:41,200
it could be more effective

239
00:10:41,200 --> 00:10:42,880
to use that

240
00:10:42,880 --> 00:10:44,399
this was

241
00:10:44,399 --> 00:10:48,000
presented only once

242
00:10:48,079 --> 00:10:50,560
during itf 88 in

243
00:10:50,560 --> 00:10:53,199
vancouver

244
00:10:53,519 --> 00:10:56,560
i know that nrl continued working on

245
00:10:56,560 --> 00:10:58,839
this but

246
00:10:58,839 --> 00:11:02,320
um yeah

247
00:11:02,320 --> 00:11:04,480
maybe they will at some point bring it

248
00:11:04,480 --> 00:11:08,800
back to the itf next slide please

249
00:11:09,760 --> 00:11:11,839
so what makes multicast in minnesota

250
00:11:11,839 --> 00:11:14,079
particularly challenging

251
00:11:14,079 --> 00:11:16,640
the links

252
00:11:16,880 --> 00:11:19,279
can be non-transitive

253
00:11:19,279 --> 00:11:20,240
so if

254
00:11:20,240 --> 00:11:24,079
b hears hears a and c here is b

255
00:11:24,079 --> 00:11:26,480
there's no guarantee that

256
00:11:26,480 --> 00:11:29,360
the c can also

257
00:11:29,360 --> 00:11:32,399
receive from node a

258
00:11:32,399 --> 00:11:34,160
nodes often have only one radio

259
00:11:34,160 --> 00:11:35,600
interface

260
00:11:35,600 --> 00:11:37,839
and they're relaying

261
00:11:37,839 --> 00:11:41,279
to get from a to c for instance

262
00:11:41,279 --> 00:11:42,060
and then

263
00:11:42,060 --> 00:11:43,839
[Music]

264
00:11:43,839 --> 00:11:45,920
they're using the same

265
00:11:45,920 --> 00:11:47,040
interface

266
00:11:47,040 --> 00:11:49,200
over which the packet was received to to

267
00:11:49,200 --> 00:11:51,040
send it out again

268
00:11:51,040 --> 00:11:53,519
this has some implications for some

269
00:11:53,519 --> 00:11:56,240
existing multicast protocols or

270
00:11:56,240 --> 00:11:58,079
mechanisms

271
00:11:58,079 --> 00:12:00,319
that

272
00:12:00,639 --> 00:12:02,880
do not allow to have the

273
00:12:02,880 --> 00:12:04,639
incoming interface in the outgoing

274
00:12:04,639 --> 00:12:06,000
interface list

275
00:12:06,000 --> 00:12:08,079
or that try to do a reverse path

276
00:12:08,079 --> 00:12:09,440
forwarding check

277
00:12:09,440 --> 00:12:11,519
based on interface

278
00:12:11,519 --> 00:12:12,959
and then there's of course the node

279
00:12:12,959 --> 00:12:14,240
mobility

280
00:12:14,240 --> 00:12:17,519
that leads to frequent topology changes

281
00:12:17,519 --> 00:12:20,480
and it's thought that

282
00:12:21,279 --> 00:12:24,560
maintaining group membership on all the

283
00:12:24,560 --> 00:12:26,560
intermediate nodes

284
00:12:26,560 --> 00:12:28,320
causes too much turn because it has to

285
00:12:28,320 --> 00:12:30,720
be updated all the time

286
00:12:30,720 --> 00:12:32,959
and hence

287
00:12:32,959 --> 00:12:35,920
smart flooding approaches are used

288
00:12:35,920 --> 00:12:40,000
but this is uh for me an important slide

289
00:12:40,000 --> 00:12:41,839
because it shows most

290
00:12:41,839 --> 00:12:43,440
general

291
00:12:43,440 --> 00:12:45,680
link model

292
00:12:45,680 --> 00:12:47,440
um

293
00:12:47,440 --> 00:12:48,880
we have a host

294
00:12:48,880 --> 00:12:50,560
where transport layer and application

295
00:12:50,560 --> 00:12:52,720
layer protocols are running

296
00:12:52,720 --> 00:12:54,480
we have a router

297
00:12:54,480 --> 00:12:57,519
and we have a radio separate entities

298
00:12:57,519 --> 00:13:00,720
possibly connected by ethernet

299
00:13:00,720 --> 00:13:02,959
of course you can collapse this

300
00:13:02,959 --> 00:13:05,680
of course you can have a single laptop

301
00:13:05,680 --> 00:13:07,680
running your routing protocol in

302
00:13:07,680 --> 00:13:08,800
software

303
00:13:08,800 --> 00:13:11,440
and using wi-fi as your radio

304
00:13:11,440 --> 00:13:14,160
but this is the most general model

305
00:13:14,160 --> 00:13:16,720
and this should be supported by our

306
00:13:16,720 --> 00:13:18,959
solutions

307
00:13:18,959 --> 00:13:21,519
and you can see here

308
00:13:21,519 --> 00:13:22,800
uh

309
00:13:22,800 --> 00:13:27,040
the note in the middle relays node b

310
00:13:27,360 --> 00:13:29,279
and if it does that

311
00:13:29,279 --> 00:13:31,680
uh for an

312
00:13:31,680 --> 00:13:33,600
a packet that started this live

313
00:13:33,600 --> 00:13:36,079
somewhere in node a

314
00:13:36,079 --> 00:13:37,680
node a is also going to hear the

315
00:13:37,680 --> 00:13:41,680
retransmission again next slide please

316
00:13:43,360 --> 00:13:45,600
another assumption is that we are

317
00:13:45,600 --> 00:13:46,880
working with

318
00:13:46,880 --> 00:13:48,480
radio links that are

319
00:13:48,480 --> 00:13:50,720
limited in capacity

320
00:13:50,720 --> 00:13:53,040
to the point that you can safely

321
00:13:53,040 --> 00:13:55,120
run your

322
00:13:55,120 --> 00:13:58,800
unicast and multicast

323
00:13:59,040 --> 00:14:02,079
money routing protocols in software you

324
00:14:02,079 --> 00:14:04,000
don't need big hardware that's the

325
00:14:04,000 --> 00:14:05,760
assumption

326
00:14:05,760 --> 00:14:07,199
the links are the bottleneck not the

327
00:14:07,199 --> 00:14:09,839
processor

328
00:14:11,600 --> 00:14:14,399
and it's also

329
00:14:14,480 --> 00:14:16,320
as an aside

330
00:14:16,320 --> 00:14:18,079
in the d-lab work that we've been doing

331
00:14:18,079 --> 00:14:19,839
and that lua for instance has been

332
00:14:19,839 --> 00:14:21,040
working on

333
00:14:21,040 --> 00:14:23,279
the assumption for flow controllers

334
00:14:23,279 --> 00:14:25,040
that the modem or the radio needs to

335
00:14:25,040 --> 00:14:26,399
flow control the router and not the

336
00:14:26,399 --> 00:14:28,639
other way around next slide please uh we

337
00:14:28,639 --> 00:14:30,240
have a question in the queue do you have

338
00:14:30,240 --> 00:14:32,320
time to take it yes

339
00:14:32,320 --> 00:14:34,880
okay go ahead

340
00:14:35,040 --> 00:14:36,399
so uh

341
00:14:36,399 --> 00:14:37,279
i

342
00:14:37,279 --> 00:14:39,279
caution us to be careful with this

343
00:14:39,279 --> 00:14:40,959
assumption

344
00:14:40,959 --> 00:14:43,760
in particular all of the solutions that

345
00:14:43,760 --> 00:14:46,240
i that are going to be presented today

346
00:14:46,240 --> 00:14:48,720
push all packets through user space

347
00:14:48,720 --> 00:14:50,720
on a lot of hardware that's going to be

348
00:14:50,720 --> 00:14:52,399
prohibitive

349
00:14:52,399 --> 00:14:56,079
even with moderate speed links so i'd

350
00:14:56,079 --> 00:14:57,920
like us to be a little bit cautious with

351
00:14:57,920 --> 00:14:59,440
the assumption that we have plenty of

352
00:14:59,440 --> 00:15:01,920
cpu

353
00:15:02,000 --> 00:15:02,880
okay

354
00:15:02,880 --> 00:15:05,519
thank you for that

355
00:15:07,279 --> 00:15:11,959
my radios may be slower than your radios

356
00:15:13,600 --> 00:15:16,000
so a question that has come up a couple

357
00:15:16,000 --> 00:15:18,320
of times do we actually need multi-hope

358
00:15:18,320 --> 00:15:19,839
multicast

359
00:15:19,839 --> 00:15:22,480
at the ip layer and uh

360
00:15:22,480 --> 00:15:24,839
in some of the previous

361
00:15:24,839 --> 00:15:28,880
uh monet sessions at previous itfs

362
00:15:28,880 --> 00:15:30,639
particularly rick taylor has commented

363
00:15:30,639 --> 00:15:31,600
on this

364
00:15:31,600 --> 00:15:33,759
there are solutions out there and one is

365
00:15:33,759 --> 00:15:36,160
going to be presented today by donald

366
00:15:36,160 --> 00:15:39,519
that take care of multicast

367
00:15:39,519 --> 00:15:42,399
below the ip layer

368
00:15:42,399 --> 00:15:44,240
and then

369
00:15:44,240 --> 00:15:46,399
make it seem to the ip layer whether

370
00:15:46,399 --> 00:15:48,000
that

371
00:15:48,000 --> 00:15:50,880
is just talking to

372
00:15:50,880 --> 00:15:53,040
a well connected well-behaved

373
00:15:53,040 --> 00:15:54,560
single link

374
00:15:54,560 --> 00:15:57,199
and everything is one hope away

375
00:15:57,199 --> 00:15:59,759
and reachable and what happens

376
00:15:59,759 --> 00:16:02,240
underwater so to speak is

377
00:16:02,240 --> 00:16:05,040
is not visible to the ip layer

378
00:16:05,040 --> 00:16:07,199
there's another technique synchronized

379
00:16:07,199 --> 00:16:09,279
collaborative broadcast

380
00:16:09,279 --> 00:16:11,440
roughly equivalent to so this is

381
00:16:11,440 --> 00:16:12,959
something called barrage relay but

382
00:16:12,959 --> 00:16:14,880
that's a trademark of a company called

383
00:16:14,880 --> 00:16:17,519
trellisware

384
00:16:17,759 --> 00:16:20,320
and that that's true of course

385
00:16:20,320 --> 00:16:23,199
but what if you have

386
00:16:23,199 --> 00:16:25,360
an ip overlay over

387
00:16:25,360 --> 00:16:28,000
heterogeneous radio technology or what

388
00:16:28,000 --> 00:16:30,560
if you want to

389
00:16:30,800 --> 00:16:33,839
federate monet networks

390
00:16:33,839 --> 00:16:35,279
that

391
00:16:35,279 --> 00:16:38,160
use different technologies

392
00:16:38,160 --> 00:16:40,959
next slide please

393
00:16:41,279 --> 00:16:45,360
well then you get into things like this

394
00:16:45,360 --> 00:16:47,199
here the nodes a

395
00:16:47,199 --> 00:16:48,320
and e

396
00:16:48,320 --> 00:16:50,639
both have two radios

397
00:16:50,639 --> 00:16:52,880
so they have one lag in

398
00:16:52,880 --> 00:16:54,880
one of the radio technologies and

399
00:16:54,880 --> 00:16:56,800
another lag in the other radio

400
00:16:56,800 --> 00:16:58,160
technologies

401
00:16:58,160 --> 00:17:00,079
and you can see that this can lead to

402
00:17:00,079 --> 00:17:01,839
interesting

403
00:17:01,839 --> 00:17:04,240
forwarding complications where things go

404
00:17:04,240 --> 00:17:06,160
looking around

405
00:17:06,160 --> 00:17:06,959
and

406
00:17:06,959 --> 00:17:09,280
again a solution should be able to deal

407
00:17:09,280 --> 00:17:10,880
with this

408
00:17:10,880 --> 00:17:13,679
next slide please

409
00:17:17,439 --> 00:17:18,720
the

410
00:17:18,720 --> 00:17:20,880
presentation that justin dean gave at

411
00:17:20,880 --> 00:17:25,919
itf 96 which i referred to earlier

412
00:17:29,679 --> 00:17:32,160
listed a number of shortcomings of the

413
00:17:32,160 --> 00:17:34,559
simplified multicast

414
00:17:34,559 --> 00:17:36,240
forwarding

415
00:17:36,240 --> 00:17:37,840
which is

416
00:17:37,840 --> 00:17:40,000
an experimental rfc but the only thing

417
00:17:40,000 --> 00:17:42,000
that we really have in the money working

418
00:17:42,000 --> 00:17:44,160
group

419
00:17:45,440 --> 00:17:47,360
implementations are often done in user

420
00:17:47,360 --> 00:17:48,640
space

421
00:17:48,640 --> 00:17:52,000
which can lead to poor performance

422
00:17:52,000 --> 00:17:55,280
for instance the linux kernel

423
00:17:55,679 --> 00:17:58,799
doesn't really support

424
00:17:58,960 --> 00:18:01,120
multicast forwarding and over the same

425
00:18:01,120 --> 00:18:02,720
interface and all sorts of this but

426
00:18:02,720 --> 00:18:04,640
that's really uh

427
00:18:04,640 --> 00:18:06,400
hennig's presentation that's coming next

428
00:18:06,400 --> 00:18:08,640
that's going into that

429
00:18:08,640 --> 00:18:10,559
uh packets are disseminated to the

430
00:18:10,559 --> 00:18:12,080
entire monet

431
00:18:12,080 --> 00:18:14,240
there's no knowledge of group membership

432
00:18:14,240 --> 00:18:18,000
because that's considered too much turn

433
00:18:18,080 --> 00:18:20,799
the relay set selection algorithms and

434
00:18:20,799 --> 00:18:23,440
this goes back to the previous slide do

435
00:18:23,440 --> 00:18:26,799
not support multiple interfaces well

436
00:18:26,799 --> 00:18:30,559
and it's same is true for the

437
00:18:30,559 --> 00:18:32,640
duplicate packet detection

438
00:18:32,640 --> 00:18:34,960
in smf and i had to look in the code to

439
00:18:34,960 --> 00:18:36,799
see how it works but i think it is per

440
00:18:36,799 --> 00:18:38,799
interface

441
00:18:38,799 --> 00:18:40,080
um

442
00:18:40,080 --> 00:18:41,200
there also

443
00:18:41,200 --> 00:18:43,520
some some circumstances where it does

444
00:18:43,520 --> 00:18:45,679
not very well work very well if you have

445
00:18:45,679 --> 00:18:48,640
multiple interfaces

446
00:18:50,559 --> 00:18:50,950
um

447
00:18:50,950 --> 00:18:54,000
[Music]

448
00:18:54,000 --> 00:18:56,720
recently brian adamson posted on the m a

449
00:18:56,720 --> 00:18:59,600
mailing list about their the advances

450
00:18:59,600 --> 00:19:02,160
that they have been making

451
00:19:02,160 --> 00:19:06,720
they they sort of stepped away from uh

452
00:19:06,720 --> 00:19:08,880
the itf and the money working group but

453
00:19:08,880 --> 00:19:12,320
they have been continuing their work

454
00:19:12,880 --> 00:19:16,000
their nrl smf implementation is on

455
00:19:16,000 --> 00:19:17,840
github

456
00:19:17,840 --> 00:19:21,199
in the u.s naval

457
00:19:22,320 --> 00:19:26,000
laboratory repository on github

458
00:19:26,000 --> 00:19:28,720
so you can find the code there

459
00:19:28,720 --> 00:19:30,799
documentation might be

460
00:19:30,799 --> 00:19:33,840
lagging a bit behind

461
00:19:36,840 --> 00:19:40,960
however this has been uh outside

462
00:19:40,960 --> 00:19:43,280
the visibility of the monet working

463
00:19:43,280 --> 00:19:45,600
group for for some time

464
00:19:45,600 --> 00:19:48,000
and uh

465
00:19:49,280 --> 00:19:52,520
what's that

466
00:19:53,840 --> 00:19:57,439
simplified multicast forwarding

467
00:19:59,520 --> 00:20:00,559
um

468
00:20:00,559 --> 00:20:03,280
next slide please

469
00:20:04,640 --> 00:20:07,600
and that's it any questions at this

470
00:20:07,600 --> 00:20:09,039
point

471
00:20:09,039 --> 00:20:11,520
we have uh

472
00:20:11,520 --> 00:20:15,200
uh we have a person thank you um

473
00:20:15,200 --> 00:20:18,000
yeah tahoe or jeffrey from juniper okay

474
00:20:18,000 --> 00:20:21,520
um cindy is going to present uh beer in

475
00:20:21,520 --> 00:20:23,440
babel networks later

476
00:20:23,440 --> 00:20:25,200
looking at the

477
00:20:25,200 --> 00:20:26,880
properties of monet

478
00:20:26,880 --> 00:20:28,080
you talk about

479
00:20:28,080 --> 00:20:30,320
it seems that uh beer would be a good

480
00:20:30,320 --> 00:20:32,320
fit for this as well especially when you

481
00:20:32,320 --> 00:20:34,640
talk about

482
00:20:34,640 --> 00:20:38,159
multicast ip layer over heterogeneous

483
00:20:38,159 --> 00:20:39,200
hydrogen

484
00:20:39,200 --> 00:20:40,880
generous

485
00:20:40,880 --> 00:20:43,120
radio types

486
00:20:43,120 --> 00:20:44,720
okay thank you

487
00:20:44,720 --> 00:20:48,080
this is something that during this week

488
00:20:48,080 --> 00:20:50,480
david lombarder and myself have been

489
00:20:50,480 --> 00:20:53,679
talking about a lot

490
00:20:54,159 --> 00:20:56,559
i hope that during the discussion

491
00:20:56,559 --> 00:20:57,679
david

492
00:20:57,679 --> 00:20:59,919
will come up to the microphone and

493
00:20:59,919 --> 00:21:02,880
give his opinion

494
00:21:02,880 --> 00:21:04,320
um

495
00:21:04,320 --> 00:21:06,799
but thanks yeah it's something

496
00:21:06,799 --> 00:21:08,960
that i personally don't know enough

497
00:21:08,960 --> 00:21:10,960
about at the moment i'm trying to wrap

498
00:21:10,960 --> 00:21:12,240
my head around

499
00:21:12,240 --> 00:21:14,320
a beer

500
00:21:14,320 --> 00:21:16,799
but others have looked at it and

501
00:21:16,799 --> 00:21:19,200
seemed to think that it might be a

502
00:21:19,200 --> 00:21:20,240
solution

503
00:21:20,240 --> 00:21:21,280
so

504
00:21:21,280 --> 00:21:22,960
we need to need to do some work at least

505
00:21:22,960 --> 00:21:25,919
there thank you

506
00:21:28,240 --> 00:21:31,120
okay

507
00:21:31,120 --> 00:21:35,158
thanks for your attention

508
00:21:53,520 --> 00:21:55,280
you're next

509
00:21:55,280 --> 00:21:59,000
trying to find your slides

510
00:22:20,640 --> 00:22:24,320
okay i hope everybody can hear me

511
00:22:24,320 --> 00:22:26,080
[Applause]

512
00:22:26,080 --> 00:22:29,600
it's not something we talk about a lot

513
00:22:29,600 --> 00:22:32,320
in the ietf uh but we are talking about

514
00:22:32,320 --> 00:22:35,039
protocols the control plane but

515
00:22:35,039 --> 00:22:38,000
one of the problems of ip multicast is

516
00:22:38,000 --> 00:22:40,400
always the data plane is it has always

517
00:22:40,400 --> 00:22:42,720
been and i think this is the reason why

518
00:22:42,720 --> 00:22:44,960
we don't have that much

519
00:22:44,960 --> 00:22:49,360
work for multicast so next slide

520
00:22:49,360 --> 00:22:51,919
so i will be talking only about ip

521
00:22:51,919 --> 00:22:54,559
multicast routing on linux i don't know

522
00:22:54,559 --> 00:22:56,559
enough about bsd

523
00:22:56,559 --> 00:22:59,679
and especially about windows so this is

524
00:22:59,679 --> 00:23:03,039
linux only at the moment next

525
00:23:03,039 --> 00:23:04,559
what we have been doing over the years

526
00:23:04,559 --> 00:23:06,000
yeah we have been doing multicast

527
00:23:06,000 --> 00:23:09,200
forwarding in user space next

528
00:23:09,200 --> 00:23:11,120
raw sockets everybody loves rock

529
00:23:11,120 --> 00:23:13,360
circuits at least everybody uses raw

530
00:23:13,360 --> 00:23:15,919
sockets as i think i know three smf

531
00:23:15,919 --> 00:23:19,039
implementations all of them are using

532
00:23:19,039 --> 00:23:23,200
to some kind raw socket next

533
00:23:23,200 --> 00:23:25,520
the good thing is it works you can do

534
00:23:25,520 --> 00:23:27,360
multicast forwarding with raw sockets

535
00:23:27,360 --> 00:23:28,400
but

536
00:23:28,400 --> 00:23:30,480
it doesn't play nice with the other

537
00:23:30,480 --> 00:23:32,159
complicated stuff of the linux

538
00:23:32,159 --> 00:23:33,679
networking code

539
00:23:33,679 --> 00:23:36,320
some raw sockets don't like firewalls

540
00:23:36,320 --> 00:23:38,880
and ignore them some raw sockets have

541
00:23:38,880 --> 00:23:41,360
trouble with policy routing so if you do

542
00:23:41,360 --> 00:23:44,000
multi topology routing or

543
00:23:44,000 --> 00:23:47,279
if you plan to do some containers

544
00:23:47,279 --> 00:23:50,000
make sure to test that raw sockets don't

545
00:23:50,000 --> 00:23:53,200
mess up your settings

546
00:23:53,520 --> 00:23:56,320
so yes we have a solution so next one

547
00:23:56,320 --> 00:23:58,400
time tab interface that's always if

548
00:23:58,400 --> 00:24:00,960
someone says raw sockets i normally say

549
00:24:00,960 --> 00:24:02,840
use tun tap

550
00:24:02,840 --> 00:24:04,799
next

551
00:24:04,799 --> 00:24:07,279
the advantage is it's a real interface

552
00:24:07,279 --> 00:24:09,600
it's easy to integrate the disadvantage

553
00:24:09,600 --> 00:24:11,840
is how to get the traffic into the ton

554
00:24:11,840 --> 00:24:13,440
tab interface so

555
00:24:13,440 --> 00:24:16,240
we're talking again about how to do some

556
00:24:16,240 --> 00:24:18,640
multicast forwarding which makes

557
00:24:18,640 --> 00:24:21,039
everything more complicated and it's

558
00:24:21,039 --> 00:24:22,880
still user space so

559
00:24:22,880 --> 00:24:25,679
it's not that much better and it's more

560
00:24:25,679 --> 00:24:27,200
work to do

561
00:24:27,200 --> 00:24:29,440
next

562
00:24:29,440 --> 00:24:32,480
what we want to do is doing multicast

563
00:24:32,480 --> 00:24:34,480
forwarding in kernel space it's a matter

564
00:24:34,480 --> 00:24:36,240
of performance especially if we have not

565
00:24:36,240 --> 00:24:39,039
that much hardware lifting up everything

566
00:24:39,039 --> 00:24:40,559
into user space

567
00:24:40,559 --> 00:24:43,600
is really not that great we would like

568
00:24:43,600 --> 00:24:46,400
to do it with like unicast traffic

569
00:24:46,400 --> 00:24:50,480
just let the corner do its stuff next

570
00:24:50,480 --> 00:24:53,279
and yes ip multicast routing it has been

571
00:24:53,279 --> 00:24:56,799
part of linux forever it works it's fast

572
00:24:56,799 --> 00:24:58,840
it's integrated it plays

573
00:24:58,840 --> 00:25:02,559
nice but it doesn't work for our use

574
00:25:02,559 --> 00:25:04,480
case it has been done for multicast

575
00:25:04,480 --> 00:25:08,400
routing between ethernet segments and so

576
00:25:08,400 --> 00:25:10,960
it's not the solution we are normally

577
00:25:10,960 --> 00:25:12,880
looking for

578
00:25:12,880 --> 00:25:15,279
next

579
00:25:15,279 --> 00:25:16,159
so

580
00:25:16,159 --> 00:25:17,120
is it

581
00:25:17,120 --> 00:25:19,200
has someone looked into the linux

582
00:25:19,200 --> 00:25:21,919
multicast routing and the new new shiny

583
00:25:21,919 --> 00:25:24,240
stuff we got over the last decade or

584
00:25:24,240 --> 00:25:25,600
something like this

585
00:25:25,600 --> 00:25:26,960
i must admit

586
00:25:26,960 --> 00:25:29,840
i've looked into it not for years and

587
00:25:29,840 --> 00:25:31,360
then last

588
00:25:31,360 --> 00:25:33,520
last week i started looking to it again

589
00:25:33,520 --> 00:25:36,400
so next

590
00:25:36,480 --> 00:25:38,320
what what's trouble

591
00:25:38,320 --> 00:25:40,240
there are four points that making

592
00:25:40,240 --> 00:25:41,760
multicast are

593
00:25:41,760 --> 00:25:43,520
difficult for us

594
00:25:43,520 --> 00:25:45,600
re-transmission on the same interface

595
00:25:45,600 --> 00:25:47,840
selective forwarding local traffic and

596
00:25:47,840 --> 00:25:49,760
suppressing duplicates

597
00:25:49,760 --> 00:25:51,840
next

598
00:25:51,840 --> 00:25:53,919
so re-transmission on the same interface

599
00:25:53,919 --> 00:25:56,640
i tested this a week ago it seems to

600
00:25:56,640 --> 00:25:59,039
work i don't know when they changed the

601
00:25:59,039 --> 00:26:01,760
kernel code but i used a static

602
00:26:01,760 --> 00:26:04,320
multicast forwarding daemon

603
00:26:04,320 --> 00:26:06,799
and i could send out multicast traffic

604
00:26:06,799 --> 00:26:09,679
kernel based on the same interface again

605
00:26:09,679 --> 00:26:11,919
earlier kernel versions

606
00:26:11,919 --> 00:26:14,799
years ago just said no that's not

607
00:26:14,799 --> 00:26:17,440
allowed so it seems at least this

608
00:26:17,440 --> 00:26:18,799
problem

609
00:26:18,799 --> 00:26:21,039
was solved

610
00:26:21,039 --> 00:26:23,440
a long time ago i don't know how many

611
00:26:23,440 --> 00:26:24,880
years ago

612
00:26:24,880 --> 00:26:28,480
good one thing done next

613
00:26:29,279 --> 00:26:31,919
no selective forwarding vertical one one

614
00:26:31,919 --> 00:26:34,159
back

615
00:26:36,000 --> 00:26:37,360
so yeah

616
00:26:37,360 --> 00:26:40,480
depend uh sometimes we don't want to uh

617
00:26:40,480 --> 00:26:42,080
we want to deal

618
00:26:42,080 --> 00:26:44,080
with incoming multicast differently

619
00:26:44,080 --> 00:26:46,480
depending on what was the last node who

620
00:26:46,480 --> 00:26:49,120
sent us so to improve the efficiency of

621
00:26:49,120 --> 00:26:51,679
the forwarding a little bit

622
00:26:51,679 --> 00:26:54,080
we could do this in theory with some

623
00:26:54,080 --> 00:26:56,880
clever dynamic firewalling

624
00:26:56,880 --> 00:26:58,559
we might need access to something like

625
00:26:58,559 --> 00:27:01,200
the ethernet mac address and nobody

626
00:27:01,200 --> 00:27:04,000
likes to dynamically load ip tables eb

627
00:27:04,000 --> 00:27:06,720
tables enough tables rules all the times

628
00:27:06,720 --> 00:27:09,120
but it could be possible

629
00:27:09,120 --> 00:27:11,439
next

630
00:27:11,600 --> 00:27:13,200
local traffic

631
00:27:13,200 --> 00:27:15,600
as said in the last presentation you

632
00:27:15,600 --> 00:27:18,880
don't always have a nice router with a

633
00:27:18,880 --> 00:27:20,960
host attached but

634
00:27:20,960 --> 00:27:23,760
kernel multicast forwarding only deals

635
00:27:23,760 --> 00:27:24,480
in

636
00:27:24,480 --> 00:27:26,799
interface to interface forwarding it

637
00:27:26,799 --> 00:27:29,840
doesn't it does ignore local traffic

638
00:27:29,840 --> 00:27:32,399
completely the idea is that the local

639
00:27:32,399 --> 00:27:34,159
application should know which interface

640
00:27:34,159 --> 00:27:35,279
to use

641
00:27:35,279 --> 00:27:38,640
which is bad if you have multiple

642
00:27:38,640 --> 00:27:40,880
radio interfaces so

643
00:27:40,880 --> 00:27:43,600
but we could change this today there's

644
00:27:43,600 --> 00:27:44,960
something called virtual ethernet

645
00:27:44,960 --> 00:27:46,880
devices so it's just

646
00:27:46,880 --> 00:27:49,600
like a pair of interfaces you put in all

647
00:27:49,600 --> 00:27:51,919
local traffic into one end and it comes

648
00:27:51,919 --> 00:27:54,399
out of a real interface so

649
00:27:54,399 --> 00:27:56,240
you move the problem from

650
00:27:56,240 --> 00:27:58,960
local traffic to interface to interface

651
00:27:58,960 --> 00:28:03,279
hey that's easy done next

652
00:28:03,279 --> 00:28:05,679
suppressing duplicates yeah

653
00:28:05,679 --> 00:28:09,480
because of radio transmissions and this

654
00:28:09,480 --> 00:28:12,399
non-transitivity we often get the same

655
00:28:12,399 --> 00:28:14,840
packet multiple times because it's

656
00:28:14,840 --> 00:28:18,080
transmitted from multiple neighbors and

657
00:28:18,080 --> 00:28:21,520
we need to filter this out so

658
00:28:21,520 --> 00:28:23,840
we need custom code in the kernel and

659
00:28:23,840 --> 00:28:27,840
nobody likes to write or even maintain

660
00:28:27,840 --> 00:28:30,880
a linux kernel module this is hard work

661
00:28:30,880 --> 00:28:32,559
really hard work

662
00:28:32,559 --> 00:28:34,880
yeah so what can we do

663
00:28:34,880 --> 00:28:37,120
next

664
00:28:37,120 --> 00:28:39,600
wait a moment what was about new toys

665
00:28:39,600 --> 00:28:41,679
there's something called ebpf for a

666
00:28:41,679 --> 00:28:43,240
number of years

667
00:28:43,240 --> 00:28:45,679
extended or enhanced berkeley packet

668
00:28:45,679 --> 00:28:47,520
filters it's some kind of virtual

669
00:28:47,520 --> 00:28:50,080
machine in the linux kernel you can push

670
00:28:50,080 --> 00:28:52,399
for some functions you can push code

671
00:28:52,399 --> 00:28:55,760
into the kernel and do some custom

672
00:28:55,760 --> 00:28:58,000
custom stuff without writing kerner

673
00:28:58,000 --> 00:28:59,440
module

674
00:28:59,440 --> 00:29:02,000
and there's xdp express data path we

675
00:29:02,000 --> 00:29:05,039
don't need to express paths but xdp can

676
00:29:05,039 --> 00:29:07,360
be attached to interfaces

677
00:29:07,360 --> 00:29:10,399
and do some logic based on an ebpf

678
00:29:10,399 --> 00:29:13,120
program for example deciding to drop

679
00:29:13,120 --> 00:29:14,240
packets

680
00:29:14,240 --> 00:29:15,600
that are incoming

681
00:29:15,600 --> 00:29:18,000
or maybe modify them

682
00:29:18,000 --> 00:29:19,600
or redirect them to a different

683
00:29:19,600 --> 00:29:22,799
interface that sounds interesting

684
00:29:22,799 --> 00:29:26,000
so i got an idea i have to admit i did

685
00:29:26,000 --> 00:29:28,960
not i could not test this in time but

686
00:29:28,960 --> 00:29:31,200
maybe we have something to talk about

687
00:29:31,200 --> 00:29:33,360
next

688
00:29:33,360 --> 00:29:36,000
so what i would like to do is combine

689
00:29:36,000 --> 00:29:37,760
all these things

690
00:29:37,760 --> 00:29:39,600
we have a little ethernet in the middle

691
00:29:39,600 --> 00:29:42,080
so this resolves the local traffic part

692
00:29:42,080 --> 00:29:44,640
ever we have at the end of the ethernet

693
00:29:44,640 --> 00:29:46,720
a firewall to make sure

694
00:29:46,720 --> 00:29:49,120
what's going on

695
00:29:49,120 --> 00:29:52,399
with air traffic before we forward it we

696
00:29:52,399 --> 00:29:55,039
use normal ip multicast routing on the

697
00:29:55,039 --> 00:29:57,600
outside to go to an outgoing magnet

698
00:29:57,600 --> 00:29:59,600
interface

699
00:29:59,600 --> 00:30:01,679
and we can use

700
00:30:01,679 --> 00:30:03,919
the the ebpf filter

701
00:30:03,919 --> 00:30:07,440
to filter incoming mana traffic and

702
00:30:07,440 --> 00:30:10,080
if and then if you want either

703
00:30:10,080 --> 00:30:12,080
redirect it to the little ethernet pair

704
00:30:12,080 --> 00:30:13,520
for forwarding

705
00:30:13,520 --> 00:30:16,320
or redirect it there and just modify the

706
00:30:16,320 --> 00:30:18,159
ttl field to make sure it's not

707
00:30:18,159 --> 00:30:19,840
forwarded but comes out of the same

708
00:30:19,840 --> 00:30:22,480
interface or just drop it

709
00:30:22,480 --> 00:30:25,360
based on custom code

710
00:30:25,360 --> 00:30:28,000
next slide

711
00:30:28,240 --> 00:30:31,760
so what's a good thing here we have

712
00:30:31,760 --> 00:30:34,320
the ethernet available so not a problem

713
00:30:34,320 --> 00:30:36,960
with ip tables that we don't know who

714
00:30:36,960 --> 00:30:39,919
sent us the multicast at the last hop

715
00:30:39,919 --> 00:30:42,159
we can change the ttl field on the fly

716
00:30:42,159 --> 00:30:44,320
and recompute the checksum

717
00:30:44,320 --> 00:30:47,039
or with a helper function to make sure

718
00:30:47,039 --> 00:30:49,919
that that this packet will be handled

719
00:30:49,919 --> 00:30:52,799
locally but not forwarded

720
00:30:52,799 --> 00:30:54,559
i've seen implementations of hash

721
00:30:54,559 --> 00:30:57,120
functions in ebpf at least for recent

722
00:30:57,120 --> 00:30:59,440
kernels which improved what we can do

723
00:30:59,440 --> 00:31:00,799
with epf

724
00:31:00,799 --> 00:31:01,679
so

725
00:31:01,679 --> 00:31:04,880
in theory we could do to complete smf

726
00:31:04,880 --> 00:31:07,440
duplicate detection either on sequence

727
00:31:07,440 --> 00:31:09,519
numbers or on hashes

728
00:31:09,519 --> 00:31:12,000
there in the kernel

729
00:31:12,000 --> 00:31:12,720
so

730
00:31:12,720 --> 00:31:13,519
this

731
00:31:13,519 --> 00:31:16,240
could be a way to completely do the

732
00:31:16,240 --> 00:31:18,960
whole forwarding chain inside the linux

733
00:31:18,960 --> 00:31:22,559
kernel without writing new kernel code

734
00:31:22,559 --> 00:31:26,000
because from my point of view

735
00:31:26,000 --> 00:31:29,200
writing a new kernel module just for

736
00:31:29,200 --> 00:31:32,880
marnet i don't think this is feasible

737
00:31:32,880 --> 00:31:35,200
most likely the module will either be

738
00:31:35,200 --> 00:31:36,720
not accepted

739
00:31:36,720 --> 00:31:37,760
or will

740
00:31:37,760 --> 00:31:41,120
age badly

741
00:31:41,760 --> 00:31:44,159
so that's it next slide is just

742
00:31:44,159 --> 00:31:46,399
questions

743
00:31:46,399 --> 00:31:48,559
so

744
00:31:48,559 --> 00:31:51,200
what do you think

745
00:31:53,360 --> 00:31:55,039
thank you

746
00:31:55,039 --> 00:31:57,120
david

747
00:31:57,120 --> 00:31:59,840
davilan potter

748
00:31:59,840 --> 00:32:01,519
things um

749
00:32:01,519 --> 00:32:02,480
so

750
00:32:02,480 --> 00:32:05,200
first there is specific reasons the

751
00:32:05,200 --> 00:32:07,840
linux kernel multicast routing api is

752
00:32:07,840 --> 00:32:09,760
not suited for magnets

753
00:32:09,760 --> 00:32:11,679
um because it's

754
00:32:11,679 --> 00:32:14,159
designed to deal with consistent

755
00:32:14,159 --> 00:32:15,840
broadcast domains so it was never

756
00:32:15,840 --> 00:32:17,360
intended to deal with cases where you

757
00:32:17,360 --> 00:32:18,799
have a disjoint

758
00:32:18,799 --> 00:32:20,960
uh network like this

759
00:32:20,960 --> 00:32:23,440
and the fact that you can now use it for

760
00:32:23,440 --> 00:32:25,480
a money because the

761
00:32:25,480 --> 00:32:29,039
iif equals oaf restriction was removed

762
00:32:29,039 --> 00:32:31,279
doesn't make it a good tool that

763
00:32:31,279 --> 00:32:32,799
restriction was there for a purpose in

764
00:32:32,799 --> 00:32:34,559
the beginning um because if you have

765
00:32:34,559 --> 00:32:36,799
actual broadcast domains the only thing

766
00:32:36,799 --> 00:32:38,320
that that will ever achieve is create

767
00:32:38,320 --> 00:32:40,080
loops um

768
00:32:40,080 --> 00:32:41,279
and um

769
00:32:41,279 --> 00:32:42,640
i'm

770
00:32:42,640 --> 00:32:45,360
missing considerations here

771
00:32:45,360 --> 00:32:47,200
what else will break

772
00:32:47,200 --> 00:32:49,600
by transferring this tool that was

773
00:32:49,600 --> 00:32:52,320
designed for broadcast networks

774
00:32:52,320 --> 00:32:53,200
to

775
00:32:53,200 --> 00:32:56,000
this new scenario that it very much was

776
00:32:56,000 --> 00:32:58,480
not designed for um

777
00:32:58,480 --> 00:33:00,799
that's the one thing

778
00:33:00,799 --> 00:33:01,679
um

779
00:33:01,679 --> 00:33:03,039
the other

780
00:33:03,039 --> 00:33:05,120
uh thing that i'm that we kind of

781
00:33:05,120 --> 00:33:07,840
skipped over in in the sequence of

782
00:33:07,840 --> 00:33:10,240
discussion here is

783
00:33:10,240 --> 00:33:13,840
duplicate detection may sound necessary

784
00:33:13,840 --> 00:33:17,279
but it is in in my opinion fundamentally

785
00:33:17,279 --> 00:33:20,080
never the correct thing to do

786
00:33:20,080 --> 00:33:21,039
so

787
00:33:21,039 --> 00:33:23,120
not only will you run into scaling

788
00:33:23,120 --> 00:33:24,720
problems as soon as you get larger

789
00:33:24,720 --> 00:33:26,960
amount of multicast traffic

790
00:33:26,960 --> 00:33:29,919
there is also the fact that there's

791
00:33:29,919 --> 00:33:32,320
a reasonable number of protocols which

792
00:33:32,320 --> 00:33:34,480
will send the same multicast

793
00:33:34,480 --> 00:33:38,399
packet multiple times at some intervals

794
00:33:38,399 --> 00:33:39,679
which

795
00:33:39,679 --> 00:33:41,120
is just part of normal operation for

796
00:33:41,120 --> 00:33:42,399
those protocols

797
00:33:42,399 --> 00:33:45,120
and if whatever you set up for duplicate

798
00:33:45,120 --> 00:33:46,480
detection

799
00:33:46,480 --> 00:33:49,200
doesn't allow that traffic to go through

800
00:33:49,200 --> 00:33:51,120
then you're breaking the the upper layer

801
00:33:51,120 --> 00:33:52,799
protocol

802
00:33:52,799 --> 00:33:55,519
it becomes a question of timers relative

803
00:33:55,519 --> 00:33:57,039
to to each other if your duplicate

804
00:33:57,039 --> 00:33:58,480
detection is

805
00:33:58,480 --> 00:34:01,039
faster in quotation marks than

806
00:34:01,039 --> 00:34:04,320
the protocol using it then it works

807
00:34:04,320 --> 00:34:05,360
but

808
00:34:05,360 --> 00:34:06,799
that's

809
00:34:06,799 --> 00:34:09,440
ip forwarding is not supposed to remove

810
00:34:09,440 --> 00:34:11,839
duplicates in in general and this also

811
00:34:11,839 --> 00:34:15,520
applies to multicast routing um i'm

812
00:34:15,520 --> 00:34:19,599
i i very strongly would would argue that

813
00:34:19,599 --> 00:34:22,079
the solution should not cannot must not

814
00:34:22,079 --> 00:34:25,839
contain duplicate elimination

815
00:34:25,839 --> 00:34:27,280
and i think that's it for now i have

816
00:34:27,280 --> 00:34:28,960
more comments later so

817
00:34:28,960 --> 00:34:30,560
yeah

818
00:34:30,560 --> 00:34:33,599
i would agree to most what you said but

819
00:34:33,599 --> 00:34:35,599
that's the toolbox we have at the moment

820
00:34:35,599 --> 00:34:38,079
and we would like to do multicast

821
00:34:38,079 --> 00:34:41,760
in our typically confusing radio

822
00:34:41,760 --> 00:34:44,960
environments with mitral radios so

823
00:34:44,960 --> 00:34:47,280
and i don't think we

824
00:34:47,280 --> 00:34:50,159
really break less things by doing raw

825
00:34:50,159 --> 00:34:52,960
sockets so this is just an idea an

826
00:34:52,960 --> 00:34:54,000
option

827
00:34:54,000 --> 00:34:55,918
to see what we can do

828
00:34:55,918 --> 00:34:57,680
yeah we have more tools coming up i

829
00:34:57,680 --> 00:35:00,680
think

830
00:35:02,720 --> 00:35:06,480
okay uh julius

831
00:35:08,400 --> 00:35:10,960
so uh henning i absolutely loved your

832
00:35:10,960 --> 00:35:15,119
talk until slide 16

833
00:35:15,119 --> 00:35:19,440
and then i was a little bit well i was

834
00:35:19,440 --> 00:35:22,480
uh the point is that if so you're saying

835
00:35:22,480 --> 00:35:24,640
we don't want custom code in the kernel

836
00:35:24,640 --> 00:35:26,800
which i agree with and then you say

837
00:35:26,800 --> 00:35:29,520
let's put ebpf custom code in the kernel

838
00:35:29,520 --> 00:35:32,000
there's still custom code in the kernel

839
00:35:32,000 --> 00:35:34,960
our problem here is that there is too

840
00:35:34,960 --> 00:35:37,040
strong a couple between the control

841
00:35:37,040 --> 00:35:39,599
plane and the data plane we don't have a

842
00:35:39,599 --> 00:35:42,160
good api for multicast over mesh

843
00:35:42,160 --> 00:35:44,400
networks that will serve

844
00:35:44,400 --> 00:35:46,720
all control planes independently of the

845
00:35:46,720 --> 00:35:48,160
routing protocol

846
00:35:48,160 --> 00:35:50,560
now the kernel is not immutable if we

847
00:35:50,560 --> 00:35:53,200
have a good idea if we know what we want

848
00:35:53,200 --> 00:35:55,520
the kernel to do and if that is

849
00:35:55,520 --> 00:35:57,040
something that does not depend on the

850
00:35:57,040 --> 00:35:58,960
rooting protocol and can get into the

851
00:35:58,960 --> 00:36:01,040
kernel it will no longer be custom code

852
00:36:01,040 --> 00:36:03,440
it will be general code and our problem

853
00:36:03,440 --> 00:36:05,839
here is that we currently i mean david

854
00:36:05,839 --> 00:36:07,599
hinted to the opposite of what i'm going

855
00:36:07,599 --> 00:36:10,160
to say but our problem is that we don't

856
00:36:10,160 --> 00:36:12,160
have a good idea of what it is that we

857
00:36:12,160 --> 00:36:15,040
want the what general forwarding the

858
00:36:15,040 --> 00:36:19,520
kernel needs to do for our needs

859
00:36:20,560 --> 00:36:22,800
yes it would be nice to have some better

860
00:36:22,800 --> 00:36:25,040
user plane in the kernel i definitely

861
00:36:25,040 --> 00:36:29,280
agree but i vary that depending on what

862
00:36:29,280 --> 00:36:31,839
kind of network we are talking about we

863
00:36:31,839 --> 00:36:34,320
need different solutions we will need

864
00:36:34,320 --> 00:36:37,280
for example if we have a high data rate

865
00:36:37,280 --> 00:36:39,599
wi-fi network

866
00:36:39,599 --> 00:36:41,200
we might

867
00:36:41,200 --> 00:36:43,520
deploy something very differently than

868
00:36:43,520 --> 00:36:47,280
when we have a vhf uhf network that has

869
00:36:47,280 --> 00:36:48,960
two different interfaces with two orders

870
00:36:48,960 --> 00:36:51,599
of magnitude different capabilities

871
00:36:51,599 --> 00:36:54,079
so at the moment we don't really know

872
00:36:54,079 --> 00:36:56,000
that well what we need

873
00:36:56,000 --> 00:36:57,440
which will

874
00:36:57,440 --> 00:36:59,760
will make it difficult to go to uh to

875
00:36:59,760 --> 00:37:02,160
propose a new kernel module write it and

876
00:37:02,160 --> 00:37:04,960
get it accepted because maybe a few

877
00:37:04,960 --> 00:37:07,200
years later we say oh we need something

878
00:37:07,200 --> 00:37:09,599
else again

879
00:37:09,599 --> 00:37:11,200
i think that indicates that we don't

880
00:37:11,200 --> 00:37:13,359
fully understand the problem the notion

881
00:37:13,359 --> 00:37:15,200
that we need different algorithm for

882
00:37:15,200 --> 00:37:16,960
different networks indicate we don't

883
00:37:16,960 --> 00:37:19,200
understand the problem well yet

884
00:37:19,200 --> 00:37:22,200
yes

885
00:37:22,560 --> 00:37:24,800
donald donald east lake uh future weight

886
00:37:24,800 --> 00:37:26,240
technology just a real quick thing that

887
00:37:26,240 --> 00:37:28,000
obviously duplicate detection can't just

888
00:37:28,000 --> 00:37:29,920
be based on the packet but has to be

889
00:37:29,920 --> 00:37:31,200
based on

890
00:37:31,200 --> 00:37:32,960
where it entered the mesh and a sequence

891
00:37:32,960 --> 00:37:35,200
number applied at that point so that you

892
00:37:35,200 --> 00:37:37,119
can if you sometimes you're supposed to

893
00:37:37,119 --> 00:37:39,200
have two packets that are binary

894
00:37:39,200 --> 00:37:41,680
identical

895
00:37:42,960 --> 00:37:45,839
can i quickly say that smf had

896
00:37:45,839 --> 00:37:48,720
adds a an extension header an iphone 6

897
00:37:48,720 --> 00:37:50,800
extension header to make the packet

898
00:37:50,800 --> 00:37:53,119
unique

899
00:37:54,800 --> 00:37:57,119
so i think this blue burger

900
00:37:57,119 --> 00:37:59,599
my comment is to the this presentation

901
00:37:59,599 --> 00:38:01,599
but maybe also to ronald's i think it'd

902
00:38:01,599 --> 00:38:03,280
be really helpful to

903
00:38:03,280 --> 00:38:04,720
talk about how

904
00:38:04,720 --> 00:38:06,079
uh

905
00:38:06,079 --> 00:38:08,079
not only end hosts fit into the solution

906
00:38:08,079 --> 00:38:10,560
being discussed but also routers and how

907
00:38:10,560 --> 00:38:13,760
you fit into a wider routed network

908
00:38:13,760 --> 00:38:14,720
and

909
00:38:14,720 --> 00:38:16,960
you know looking at i've been i'm coming

910
00:38:16,960 --> 00:38:19,280
at this from like the raw perspective

911
00:38:19,280 --> 00:38:21,359
and in there the wireless network is

912
00:38:21,359 --> 00:38:24,079
just part of a larger network and one of

913
00:38:24,079 --> 00:38:25,839
the things i've been grappling with is

914
00:38:25,839 --> 00:38:27,359
how do you integrate your your all your

915
00:38:27,359 --> 00:38:28,960
routing information

916
00:38:28,960 --> 00:38:32,560
and make it so that the um

917
00:38:32,560 --> 00:38:35,040
the unique properties of your manet

918
00:38:35,040 --> 00:38:37,359
are like constrained to the man a but

919
00:38:37,359 --> 00:38:39,680
you can also pass through your transit

920
00:38:39,680 --> 00:38:40,640
routes

921
00:38:40,640 --> 00:38:41,760
and

922
00:38:41,760 --> 00:38:43,760
on in this discussion in this

923
00:38:43,760 --> 00:38:44,960
presentation

924
00:38:44,960 --> 00:38:46,560
and i'm willing to bet in the future

925
00:38:46,560 --> 00:38:47,760
ones although it'll be interesting to

926
00:38:47,760 --> 00:38:49,040
hear in the future ones really

927
00:38:49,040 --> 00:38:50,720
interested in how you fit into a routed

928
00:38:50,720 --> 00:38:53,119
network as opposed to just the routed

929
00:38:53,119 --> 00:38:56,400
monet that connects hosts thanks

930
00:38:56,400 --> 00:38:58,160
and if you want to talk about that for

931
00:38:58,160 --> 00:38:59,359
what you've

932
00:38:59,359 --> 00:39:01,040
presented that'd be useful also thank

933
00:39:01,040 --> 00:39:02,400
you

934
00:39:02,400 --> 00:39:05,119
yes but that adds a whole other

935
00:39:05,119 --> 00:39:07,599
dimension and makes it extra complicated

936
00:39:07,599 --> 00:39:09,760
so

937
00:39:11,119 --> 00:39:12,640
maybe

938
00:39:12,640 --> 00:39:14,160
any

939
00:39:14,160 --> 00:39:15,359
um

940
00:39:15,359 --> 00:39:18,160
yes i i would say we are the transit

941
00:39:18,160 --> 00:39:20,160
routes always for unicast and for

942
00:39:20,160 --> 00:39:23,200
multicast get things more complicated

943
00:39:23,200 --> 00:39:25,680
and we don't even know how to deal

944
00:39:25,680 --> 00:39:27,680
within the radio domain with the

945
00:39:27,680 --> 00:39:29,920
multicast we should not forget external

946
00:39:29,920 --> 00:39:32,720
networks both just attach networks and

947
00:39:32,720 --> 00:39:34,240
transit

948
00:39:34,240 --> 00:39:35,280
but

949
00:39:35,280 --> 00:39:37,040
if we don't have a date a good data

950
00:39:37,040 --> 00:39:39,680
plane to experiment with then we have

951
00:39:39,680 --> 00:39:42,560
trouble even finding out what we need

952
00:39:42,560 --> 00:39:44,480
so i don't say this is the final

953
00:39:44,480 --> 00:39:46,880
solution but this might be

954
00:39:46,880 --> 00:39:49,680
a good way to experiment with things and

955
00:39:49,680 --> 00:39:52,160
maybe give us a few hints what we

956
00:39:52,160 --> 00:39:55,359
could work on for general more general

957
00:39:55,359 --> 00:39:58,000
data plane

958
00:39:59,040 --> 00:40:00,000
rick

959
00:40:00,000 --> 00:40:02,079
uh rick taylor um thanks for the

960
00:40:02,079 --> 00:40:04,319
presentation henning i i i do like your

961
00:40:04,319 --> 00:40:06,480
research it's very interesting a big fan

962
00:40:06,480 --> 00:40:08,079
of ebpf and

963
00:40:08,079 --> 00:40:09,599
the cool stuff you can do with the linux

964
00:40:09,599 --> 00:40:12,079
kernel and it's just a small

965
00:40:12,079 --> 00:40:14,400
question i have is

966
00:40:14,400 --> 00:40:16,000
it's great that these are tips and

967
00:40:16,000 --> 00:40:17,760
tricks that can help us build a data

968
00:40:17,760 --> 00:40:20,079
plane in order to prototype and work out

969
00:40:20,079 --> 00:40:22,560
some of the protocols i i actually

970
00:40:22,560 --> 00:40:24,720
kind of think here in manet we have the

971
00:40:24,720 --> 00:40:26,800
bandwidth really to

972
00:40:26,800 --> 00:40:29,599
look at what those protocols should be

973
00:40:29,599 --> 00:40:30,880
um

974
00:40:30,880 --> 00:40:33,920
following on from lou's comment

975
00:40:33,920 --> 00:40:37,119
i need a multicast domain that spans

976
00:40:37,119 --> 00:40:39,119
some of my fixed infrastructure that may

977
00:40:39,119 --> 00:40:40,000
be

978
00:40:40,000 --> 00:40:41,760
not just that one laptop connected to

979
00:40:41,760 --> 00:40:43,200
the router connected to the radio but

980
00:40:43,200 --> 00:40:45,359
that might actually be a small sub-area

981
00:40:45,359 --> 00:40:48,000
network i uh there will be backhaul into

982
00:40:48,000 --> 00:40:49,200
the fixed infrastructure that

983
00:40:49,200 --> 00:40:51,040
heterogeneous

984
00:40:51,040 --> 00:40:54,079
network of which some segment is one or

985
00:40:54,079 --> 00:40:56,160
more radio systems going back to

986
00:40:56,160 --> 00:40:58,000
ronald's original

987
00:40:58,000 --> 00:41:00,720
diagram earlier on i think is

988
00:41:00,720 --> 00:41:02,960
probably more relevant for the working

989
00:41:02,960 --> 00:41:04,720
group than how do we

990
00:41:04,720 --> 00:41:06,720
beat linux into submission

991
00:41:06,720 --> 00:41:07,520
um

992
00:41:07,520 --> 00:41:09,839
don't get me wrong it's great stuff but

993
00:41:09,839 --> 00:41:11,599
i just want to pull it back to a bit

994
00:41:11,599 --> 00:41:13,599
more of an idea focus sorry talking

995
00:41:13,599 --> 00:41:16,000
about duplicate

996
00:41:16,000 --> 00:41:16,960
i

997
00:41:16,960 --> 00:41:18,720
fundamentally believe radio systems are

998
00:41:18,720 --> 00:41:21,119
getting smarter and smarter and smarter

999
00:41:21,119 --> 00:41:23,040
and a lot of them are running some kind

1000
00:41:23,040 --> 00:41:24,880
of embedded real-time operating system

1001
00:41:24,880 --> 00:41:25,920
anyway

1002
00:41:25,920 --> 00:41:27,599
they understand what's happening at

1003
00:41:27,599 --> 00:41:30,079
layer 1 and layer 2.

1004
00:41:30,079 --> 00:41:32,880
they are doing a lot of duplicate packet

1005
00:41:32,880 --> 00:41:35,520
elimination anyway based on information

1006
00:41:35,520 --> 00:41:37,119
they have from the from the radio

1007
00:41:37,119 --> 00:41:39,839
subsystem and i think it

1008
00:41:39,839 --> 00:41:42,839
the naive approach of not

1009
00:41:42,839 --> 00:41:44,880
deduplicating is actually the correct

1010
00:41:44,880 --> 00:41:46,240
way to go so i'm a

1011
00:41:46,240 --> 00:41:48,160
i say naive but it's actually the right

1012
00:41:48,160 --> 00:41:50,400
thing to be doing if l if the lower

1013
00:41:50,400 --> 00:41:52,079
layer says i've got two packets that are

1014
00:41:52,079 --> 00:41:54,400
as far as you're concerned are identical

1015
00:41:54,400 --> 00:41:56,640
what is the ip layer to do the op layer

1016
00:41:56,640 --> 00:41:58,240
should just forward those

1017
00:41:58,240 --> 00:42:00,240
it's not the ip layers business to do

1018
00:42:00,240 --> 00:42:01,920
that deduplication and we've got to be

1019
00:42:01,920 --> 00:42:03,119
really careful about that layer

1020
00:42:03,119 --> 00:42:05,359
separation

1021
00:42:05,359 --> 00:42:08,079
i don't think layer 2 can help us there

1022
00:42:08,079 --> 00:42:10,079
just as a personal command because you

1023
00:42:10,079 --> 00:42:12,240
can push everything we do down to layer

1024
00:42:12,240 --> 00:42:14,960
2 of course then we need then someone

1025
00:42:14,960 --> 00:42:17,440
else needs to solve the problem

1026
00:42:17,440 --> 00:42:19,119
but uh

1027
00:42:19,119 --> 00:42:20,000
that's

1028
00:42:20,000 --> 00:42:22,079
not always helpful especially with my

1029
00:42:22,079 --> 00:42:24,560
radios

1030
00:42:25,119 --> 00:42:26,319
my quick response and then i'm going to

1031
00:42:26,319 --> 00:42:27,839
shut up and sit down

1032
00:42:27,839 --> 00:42:29,440
this has always been the problem with

1033
00:42:29,440 --> 00:42:31,839
the with the many working group we we

1034
00:42:31,839 --> 00:42:33,280
live within the ietf we're supposed to

1035
00:42:33,280 --> 00:42:37,359
be layer 3 ip focused but many problems

1036
00:42:37,359 --> 00:42:39,040
often exist at layer 2 as well and i'm

1037
00:42:39,040 --> 00:42:40,240
really interested in what donald's going

1038
00:42:40,240 --> 00:42:42,400
to tell us about um

1039
00:42:42,400 --> 00:42:45,040
what's happening in 80 to 11 because

1040
00:42:45,040 --> 00:42:46,880
for the link there really that shouldn't

1041
00:42:46,880 --> 00:42:48,960
be in the scope but we all try and solve

1042
00:42:48,960 --> 00:42:50,880
these many problems in as a general

1043
00:42:50,880 --> 00:42:53,119
thing

1044
00:42:53,599 --> 00:42:55,680
thanks helling thanks

1045
00:42:55,680 --> 00:42:58,240
commenters

1046
00:43:06,079 --> 00:43:08,319
hi there i'm donald eastlake with future

1047
00:43:08,319 --> 00:43:10,640
way technologies i was actually chair of

1048
00:43:10,640 --> 00:43:14,240
the 80211 mesh task group for the first

1049
00:43:14,240 --> 00:43:17,040
half of its existence

1050
00:43:17,040 --> 00:43:18,800
next slide

1051
00:43:18,800 --> 00:43:19,920
so

1052
00:43:19,920 --> 00:43:22,000
i i'll try to go through these the first

1053
00:43:22,000 --> 00:43:25,119
slides are pretty quick

1054
00:43:25,119 --> 00:43:26,400
that you can read them at your leisure

1055
00:43:26,400 --> 00:43:28,079
but basically eleven is very complex

1056
00:43:28,079 --> 00:43:29,839
standard got all kinds of stuff in it

1057
00:43:29,839 --> 00:43:31,520
get your own copy read all four thousand

1058
00:43:31,520 --> 00:43:34,000
pages if you feel like it

1059
00:43:34,000 --> 00:43:35,359
uh

1060
00:43:35,359 --> 00:43:36,640
it's very widely deployed it's got all

1061
00:43:36,640 --> 00:43:37,599
kinds of things you've probably never

1062
00:43:37,599 --> 00:43:39,200
heard of and operates in all kinds of

1063
00:43:39,200 --> 00:43:41,760
different spectrums and different

1064
00:43:41,760 --> 00:43:43,040
control

1065
00:43:43,040 --> 00:43:45,359
paradigms and stuff like that it huge

1066
00:43:45,359 --> 00:43:47,520
number of chipsets per year so it's

1067
00:43:47,520 --> 00:43:50,079
worth doing the effort to make

1068
00:43:50,079 --> 00:43:52,079
improvements in them because the cost of

1069
00:43:52,079 --> 00:43:53,680
the engineering gets spread over a large

1070
00:43:53,680 --> 00:43:55,839
number

1071
00:43:55,920 --> 00:43:57,440
security is built into the hardware so

1072
00:43:57,440 --> 00:43:58,560
it's free

1073
00:43:58,560 --> 00:44:00,079
to use and you have to get the keying

1074
00:44:00,079 --> 00:44:02,319
right the working group is a link at the

1075
00:44:02,319 --> 00:44:05,440
bottom next slide please

1076
00:44:06,560 --> 00:44:08,480
it's got fragmentation and aggregation

1077
00:44:08,480 --> 00:44:11,200
multiple levels of aggregation and uh

1078
00:44:11,200 --> 00:44:13,119
uh mostly talk about the infrastructure

1079
00:44:13,119 --> 00:44:15,280
mode uh and mesh

1080
00:44:15,280 --> 00:44:17,359
uh

1081
00:44:17,359 --> 00:44:20,079
next slide please now skip some of this

1082
00:44:20,079 --> 00:44:21,520
so this is uh

1083
00:44:21,520 --> 00:44:24,400
what a data frame looks like in 80 11.

1084
00:44:24,400 --> 00:44:27,680
8211 believes in a complex header with

1085
00:44:27,680 --> 00:44:30,319
extensions rather than layering

1086
00:44:30,319 --> 00:44:33,200
it's uh it's all layer two in a sense

1087
00:44:33,200 --> 00:44:35,040
but uh you could still imagine ways of

1088
00:44:35,040 --> 00:44:36,640
doing this with nested stuff over there

1089
00:44:36,640 --> 00:44:38,160
on the right the next to the last thing

1090
00:44:38,160 --> 00:44:39,839
is there's actually some data there's a

1091
00:44:39,839 --> 00:44:41,520
frame body i don't know and then there's

1092
00:44:41,520 --> 00:44:43,920
the frame checksum but uh there's space

1093
00:44:43,920 --> 00:44:44,720
for

1094
00:44:44,720 --> 00:44:46,480
uh lots of addresses and these are all

1095
00:44:46,480 --> 00:44:49,040
48-bit mac addresses and the left hand

1096
00:44:49,040 --> 00:44:50,880
is the frame control and the bottom

1097
00:44:50,880 --> 00:44:53,359
shows uh frame control they all have a

1098
00:44:53,359 --> 00:44:55,680
version type and subtype but what the

1099
00:44:55,680 --> 00:44:57,599
raining bits are depends there's data

1100
00:44:57,599 --> 00:44:59,520
type data frames and control flames and

1101
00:44:59,520 --> 00:45:01,680
management frames and action frames and

1102
00:45:01,680 --> 00:45:04,079
multi-hop management frames and on and

1103
00:45:04,079 --> 00:45:06,560
on and on matter of fact the ran out of

1104
00:45:06,560 --> 00:45:08,480
types and subtypes so there are things

1105
00:45:08,480 --> 00:45:10,240
with protocol version zero one not

1106
00:45:10,240 --> 00:45:11,680
because it's really a new protocol

1107
00:45:11,680 --> 00:45:12,720
because they ran out of types and

1108
00:45:12,720 --> 00:45:14,319
subtypes

1109
00:45:14,319 --> 00:45:16,720
next frame the next slide

1110
00:45:16,720 --> 00:45:18,720
so this is the classic uh infrastructure

1111
00:45:18,720 --> 00:45:20,319
ess you got a

1112
00:45:20,319 --> 00:45:22,160
uh it's just called the distribution

1113
00:45:22,160 --> 00:45:24,079
system in the standard it's very vaguely

1114
00:45:24,079 --> 00:45:26,079
described so you can

1115
00:45:26,079 --> 00:45:28,160
instantiate it in many different ways

1116
00:45:28,160 --> 00:45:30,000
access points stations associated with

1117
00:45:30,000 --> 00:45:30,880
that

1118
00:45:30,880 --> 00:45:33,040
extended service set as this whole thing

1119
00:45:33,040 --> 00:45:34,720
where the stations can all talk to each

1120
00:45:34,720 --> 00:45:36,480
other as if they were local to each

1121
00:45:36,480 --> 00:45:38,880
other within the same ssid

1122
00:45:38,880 --> 00:45:41,440
next slide

1123
00:45:41,920 --> 00:45:44,400
so the ap is beacon periodically it

1124
00:45:44,400 --> 00:45:45,520
could be any time but actually it's

1125
00:45:45,520 --> 00:45:48,400
always 100 milliseconds for normal cases

1126
00:45:48,400 --> 00:45:50,000
and that includes their capabilities

1127
00:45:50,000 --> 00:45:51,680
ssid and the stations associated with

1128
00:45:51,680 --> 00:45:53,680
the access point negotiate pairwise

1129
00:45:53,680 --> 00:45:55,599
keying and the access point pushes down

1130
00:45:55,599 --> 00:45:58,400
a group key so the access point can send

1131
00:45:58,400 --> 00:46:00,720
multicast are broadcast and all the

1132
00:46:00,720 --> 00:46:02,319
associated stations will be able to

1133
00:46:02,319 --> 00:46:03,359
receive it

1134
00:46:03,359 --> 00:46:05,839
there are these four logical addresses

1135
00:46:05,839 --> 00:46:08,720
the real source of original source final

1136
00:46:08,720 --> 00:46:10,560
destination and the actual transmitter

1137
00:46:10,560 --> 00:46:12,640
and receivers address

1138
00:46:12,640 --> 00:46:14,560
and uh

1139
00:46:14,560 --> 00:46:16,400
i'll skip over the

1140
00:46:16,400 --> 00:46:18,720
the uh unicast case but for

1141
00:46:18,720 --> 00:46:21,280
uh multicast at the bottom there if it's

1142
00:46:21,280 --> 00:46:23,280
the multicast source is actually the ap

1143
00:46:23,280 --> 00:46:25,520
itself is sending it or behind the ap

1144
00:46:25,520 --> 00:46:27,520
then the ab you can just multicast it

1145
00:46:27,520 --> 00:46:30,000
because it can set the receiver address

1146
00:46:30,000 --> 00:46:31,359
to be the same as the multicast

1147
00:46:31,359 --> 00:46:33,440
destination address and all the stations

1148
00:46:33,440 --> 00:46:34,240
will

1149
00:46:34,240 --> 00:46:36,319
happily listen to that

1150
00:46:36,319 --> 00:46:38,400
if you send them multicast from a

1151
00:46:38,400 --> 00:46:40,480
individual station it gets unicast to

1152
00:46:40,480 --> 00:46:43,760
the access point which then uh

1153
00:46:43,760 --> 00:46:45,040
so it has in at the multicast

1154
00:46:45,040 --> 00:46:46,640
destination but it uses the access

1155
00:46:46,640 --> 00:46:49,440
points receiver address and then it gets

1156
00:46:49,440 --> 00:46:51,760
multicast by the access point down to

1157
00:46:51,760 --> 00:46:52,960
the stations

1158
00:46:52,960 --> 00:46:54,960
and that means the station does get the

1159
00:46:54,960 --> 00:46:57,599
multicast that it sent uh back to itself

1160
00:46:57,599 --> 00:46:59,040
it receives it again

1161
00:46:59,040 --> 00:47:02,319
but it can tell because it has its own

1162
00:47:02,319 --> 00:47:04,640
address as the source address in that

1163
00:47:04,640 --> 00:47:05,599
frame

1164
00:47:05,599 --> 00:47:07,280
so it doesn't have any problem uh

1165
00:47:07,280 --> 00:47:08,960
because even though this is something

1166
00:47:08,960 --> 00:47:11,359
that's a violation of the ethernet axiom

1167
00:47:11,359 --> 00:47:13,040
that when you send

1168
00:47:13,040 --> 00:47:15,280
a packet a frame you never get it back

1169
00:47:15,280 --> 00:47:18,079
but as long you can tell when it'll drop

1170
00:47:18,079 --> 00:47:22,480
it it's easy enough next slide please

1171
00:47:22,480 --> 00:47:25,599
so uh how does it get reliability uh

1172
00:47:25,599 --> 00:47:28,000
unicast stuff it usually uses link level

1173
00:47:28,000 --> 00:47:29,920
acknowledgment and retransmission but of

1174
00:47:29,920 --> 00:47:32,079
course things go wrong acts are lost you

1175
00:47:32,079 --> 00:47:33,680
might re-transmit when you didn't need

1176
00:47:33,680 --> 00:47:35,599
to and so on and so forth so there's a

1177
00:47:35,599 --> 00:47:37,839
sequence number and when it's fragmented

1178
00:47:37,839 --> 00:47:39,599
as a fragment

1179
00:47:39,599 --> 00:47:41,599
number as well so you can always tell if

1180
00:47:41,599 --> 00:47:44,000
you got something more than once and of

1181
00:47:44,000 --> 00:47:45,599
course eight or two eleven is you're

1182
00:47:45,599 --> 00:47:48,880
talking a single hop and it's there's a

1183
00:47:48,880 --> 00:47:51,040
goal is a maximum distance of 100 meters

1184
00:47:51,040 --> 00:47:52,160
and stuff the timing is sort of

1185
00:47:52,160 --> 00:47:53,760
constrained so you can figure out a

1186
00:47:53,760 --> 00:47:54,800
reasonable

1187
00:47:54,800 --> 00:47:57,599
number range and stuff

1188
00:47:57,599 --> 00:47:59,119
for multicast there's got all kinds of

1189
00:47:59,119 --> 00:48:00,079
things in there people frequently

1190
00:48:00,079 --> 00:48:02,079
complain about the unreliability of

1191
00:48:02,079 --> 00:48:04,240
multicast native 211 but really

1192
00:48:04,240 --> 00:48:05,839
anything you can think of as a

1193
00:48:05,839 --> 00:48:07,359
reasonable way to make multicast more

1194
00:48:07,359 --> 00:48:10,160
reliable uh has probably already been

1195
00:48:10,160 --> 00:48:12,319
put into the standard now whether it's

1196
00:48:12,319 --> 00:48:14,000
implemented and widely deployed is a

1197
00:48:14,000 --> 00:48:16,240
whole other question but uh sometimes

1198
00:48:16,240 --> 00:48:18,240
people say multicast is always sent at

1199
00:48:18,240 --> 00:48:20,240
the lowest possible rate that's not true

1200
00:48:20,240 --> 00:48:22,400
you can tell the access point whatever

1201
00:48:22,400 --> 00:48:23,760
rate you want to send it at if it's

1202
00:48:23,760 --> 00:48:25,200
discovery you might want to send it at a

1203
00:48:25,200 --> 00:48:27,280
pretty low rate but it's for data you

1204
00:48:27,280 --> 00:48:29,200
could send it at just the what rate you

1205
00:48:29,200 --> 00:48:31,280
think is necessary for the most remote

1206
00:48:31,280 --> 00:48:32,960
station or something like that

1207
00:48:32,960 --> 00:48:35,440
you can have uh unsolicited

1208
00:48:35,440 --> 00:48:37,520
re-transmissions where the the thing

1209
00:48:37,520 --> 00:48:39,440
gets transmitted multiple times and you

1210
00:48:39,440 --> 00:48:41,119
just depend on the duplicate detection

1211
00:48:41,119 --> 00:48:43,119
and that more likely to get through you

1212
00:48:43,119 --> 00:48:44,880
can go through and pull every station to

1213
00:48:44,880 --> 00:48:46,880
see if it received that multicast frame

1214
00:48:46,880 --> 00:48:48,720
of course this uses up a lot of air time

1215
00:48:48,720 --> 00:48:50,160
and kind of

1216
00:48:50,160 --> 00:48:51,359
loses a lot of the advantage of

1217
00:48:51,359 --> 00:48:53,040
multicast but of course there's a

1218
00:48:53,040 --> 00:48:54,319
feature where you can send a bunch of

1219
00:48:54,319 --> 00:48:56,319
multicast frames and then pull the

1220
00:48:56,319 --> 00:48:58,880
stations for a block of acknowledgements

1221
00:48:58,880 --> 00:49:01,599
and see which stations missed what and

1222
00:49:01,599 --> 00:49:03,680
because the receiver address and the

1223
00:49:03,680 --> 00:49:05,440
destination address are separate you

1224
00:49:05,440 --> 00:49:07,520
could go through and serially unicast

1225
00:49:07,520 --> 00:49:09,520
which also eliminates of course a lot of

1226
00:49:09,520 --> 00:49:11,520
the advantage of multicast and is

1227
00:49:11,520 --> 00:49:13,920
useless if you're trying to do discovery

1228
00:49:13,920 --> 00:49:16,960
next slide

1229
00:49:16,960 --> 00:49:18,559
there's also this ad hoc mode which i

1230
00:49:18,559 --> 00:49:20,000
think is mostly used these days for

1231
00:49:20,000 --> 00:49:22,079
tethering like if you tether to an

1232
00:49:22,079 --> 00:49:23,359
iphone or something it uses that hawk

1233
00:49:23,359 --> 00:49:25,520
mode and that way all this that all the

1234
00:49:25,520 --> 00:49:27,920
stations beacon and they uh they just

1235
00:49:27,920 --> 00:49:30,720
send directly to each other and in some

1236
00:49:30,720 --> 00:49:31,680
weird

1237
00:49:31,680 --> 00:49:33,200
mode you might think of it as a one-hop

1238
00:49:33,200 --> 00:49:34,240
meshes

1239
00:49:34,240 --> 00:49:35,440
and

1240
00:49:35,440 --> 00:49:36,720
in in that case

1241
00:49:36,720 --> 00:49:38,240
you really sort of only need two

1242
00:49:38,240 --> 00:49:40,079
addresses because in every case the

1243
00:49:40,079 --> 00:49:41,520
source address and the transmitter

1244
00:49:41,520 --> 00:49:42,960
address are the same

1245
00:49:42,960 --> 00:49:44,800
and the receiver address the receiver

1246
00:49:44,800 --> 00:49:46,160
address and the destination address are

1247
00:49:46,160 --> 00:49:48,559
the same but the header still has three

1248
00:49:48,559 --> 00:49:50,640
fields and the third field is this basic

1249
00:49:50,640 --> 00:49:52,480
service set id which is how the ad hoc

1250
00:49:52,480 --> 00:49:54,960
network kind of is identified and of

1251
00:49:54,960 --> 00:49:56,880
course uh it may not be full

1252
00:49:56,880 --> 00:49:58,880
connectivity it's not very reliable but

1253
00:49:58,880 --> 00:50:00,319
if you want to send multicast it's easy

1254
00:50:00,319 --> 00:50:02,559
you just send multicast and everybody

1255
00:50:02,559 --> 00:50:04,400
can hear you gets it and those that

1256
00:50:04,400 --> 00:50:07,359
happen not be able to hear you don't

1257
00:50:07,359 --> 00:50:09,920
next slide

1258
00:50:10,480 --> 00:50:12,000
so there is this fourth address in the

1259
00:50:12,000 --> 00:50:14,400
header which is optional so why is that

1260
00:50:14,400 --> 00:50:15,920
there uh there's been various

1261
00:50:15,920 --> 00:50:18,640
proprietary uses uh the current starting

1262
00:50:18,640 --> 00:50:20,720
they're sort of two standardized uses

1263
00:50:20,720 --> 00:50:23,280
one is the general link feature and the

1264
00:50:23,280 --> 00:50:25,760
other is mesh the general link basically

1265
00:50:25,760 --> 00:50:27,760
has the idea you're sending something

1266
00:50:27,760 --> 00:50:29,760
through a station across an 8 or 2 11

1267
00:50:29,760 --> 00:50:32,880
linked through another station and uh so

1268
00:50:32,880 --> 00:50:34,800
the source transmitter receiver and

1269
00:50:34,800 --> 00:50:36,960
destination address are all separate and

1270
00:50:36,960 --> 00:50:38,559
they could all be there it would all

1271
00:50:38,559 --> 00:50:40,480
typically be different

1272
00:50:40,480 --> 00:50:41,760
so

1273
00:50:41,760 --> 00:50:44,800
if you go back one slide for just a sec

1274
00:50:44,800 --> 00:50:46,559
you can in fact under the in the

1275
00:50:46,559 --> 00:50:49,680
standard you can do this ad hoc thing

1276
00:50:49,680 --> 00:50:51,440
and you can make all those radio links

1277
00:50:51,440 --> 00:50:53,440
be general links and if you did that

1278
00:50:53,440 --> 00:50:55,599
there could be arbitrary networks behind

1279
00:50:55,599 --> 00:50:57,680
each of these stations of course the

1280
00:50:57,680 --> 00:50:59,599
connectivity in the middle would still

1281
00:50:59,599 --> 00:51:02,079
have this flaky one-hop uh

1282
00:51:02,079 --> 00:51:03,680
pseudo-mesh thing

1283
00:51:03,680 --> 00:51:06,319
so uh but if you you could do that of

1284
00:51:06,319 --> 00:51:09,200
course the alternative is to make these

1285
00:51:09,200 --> 00:51:10,960
have a network behind the station but

1286
00:51:10,960 --> 00:51:12,480
make it still appear to be one station

1287
00:51:12,480 --> 00:51:14,160
by putting a nat in there or something

1288
00:51:14,160 --> 00:51:19,119
but anyway go forward two slides please

1289
00:51:19,119 --> 00:51:20,720
uh

1290
00:51:20,720 --> 00:51:22,559
anyway you can also use general link in

1291
00:51:22,559 --> 00:51:24,079
the infrastructure white case in which

1292
00:51:24,079 --> 00:51:25,440
case you have an access point and

1293
00:51:25,440 --> 00:51:26,880
associated stations and you can have a

1294
00:51:26,880 --> 00:51:29,200
network behind the station anyway so the

1295
00:51:29,200 --> 00:51:30,880
initial idea for mesh was it was just

1296
00:51:30,880 --> 00:51:32,880
going to be used for wireless backhaul

1297
00:51:32,880 --> 00:51:35,200
people like to limit the charter scope

1298
00:51:35,200 --> 00:51:37,599
initially so all the mesh

1299
00:51:37,599 --> 00:51:39,680
points uh mesh stations would be access

1300
00:51:39,680 --> 00:51:41,200
points

1301
00:51:41,200 --> 00:51:42,400
might not actually have any stations

1302
00:51:42,400 --> 00:51:45,280
associated with them so it's somewhat of

1303
00:51:45,280 --> 00:51:47,599
a pointless restriction but it might

1304
00:51:47,599 --> 00:51:49,520
look something like this where

1305
00:51:49,520 --> 00:51:51,040
some access points can only get back to

1306
00:51:51,040 --> 00:51:53,200
the distribution system through other

1307
00:51:53,200 --> 00:51:54,559
access points

1308
00:51:54,559 --> 00:51:56,800
next slide

1309
00:51:56,800 --> 00:51:59,200
but fairly soon the mesh gut

1310
00:51:59,200 --> 00:52:01,520
idea got generalized and people decided

1311
00:52:01,520 --> 00:52:04,640
it really should be look like uh more of

1312
00:52:04,640 --> 00:52:06,960
a a disc it looks like a link from the

1313
00:52:06,960 --> 00:52:08,720
outside so the idea here is this this

1314
00:52:08,720 --> 00:52:10,880
packet uh our frame actually goes

1315
00:52:10,880 --> 00:52:12,559
through the mesh along the solid line

1316
00:52:12,559 --> 00:52:15,359
and the dotted lines or other uh radio

1317
00:52:15,359 --> 00:52:18,000
pairings between mesh stations

1318
00:52:18,000 --> 00:52:20,640
next slide

1319
00:52:21,280 --> 00:52:23,119
so in mesh all the stations send beacons

1320
00:52:23,119 --> 00:52:25,440
periodically and uh there's they

1321
00:52:25,440 --> 00:52:27,200
included that their mesh profile which

1322
00:52:27,200 --> 00:52:29,520
is a mesh id it's like the ssid but

1323
00:52:29,520 --> 00:52:31,359
different they also indicate what

1324
00:52:31,359 --> 00:52:33,280
protocol what path selection protocol

1325
00:52:33,280 --> 00:52:34,559
otherwise known as routing protocol

1326
00:52:34,559 --> 00:52:36,800
they're using the path metric uh cipher

1327
00:52:36,800 --> 00:52:38,480
suites et cetera et cetera and they

1328
00:52:38,480 --> 00:52:41,119
appear it's an equal pair of equals

1329
00:52:41,119 --> 00:52:43,119
between them and negotiate pairwise

1330
00:52:43,119 --> 00:52:45,280
keying and each station distributes to

1331
00:52:45,280 --> 00:52:47,520
its peers the group key that it uses if

1332
00:52:47,520 --> 00:52:49,760
it wants to transmit uh multicast or

1333
00:52:49,760 --> 00:52:50,960
broadcast

1334
00:52:50,960 --> 00:52:52,160
and from the outside world that the

1335
00:52:52,160 --> 00:52:54,079
whole mesh just looks like a layer two

1336
00:52:54,079 --> 00:52:54,880
link

1337
00:52:54,880 --> 00:52:57,760
so you generally have six addresses the

1338
00:52:57,760 --> 00:52:59,920
original source the final destination

1339
00:52:59,920 --> 00:53:01,680
the mesh source which is where the frame

1340
00:53:01,680 --> 00:53:05,920
entered the mesh or or where it uh

1341
00:53:05,920 --> 00:53:07,440
where it originated if it starts inside

1342
00:53:07,440 --> 00:53:09,440
the mesh mesh destination which is where

1343
00:53:09,440 --> 00:53:11,040
it exits the mesh or terminates in the

1344
00:53:11,040 --> 00:53:12,800
mesh and then the actual transmitter and

1345
00:53:12,800 --> 00:53:14,800
receiver on the particular op

1346
00:53:14,800 --> 00:53:17,359
next slide

1347
00:53:17,520 --> 00:53:19,280
so here's a

1348
00:53:19,280 --> 00:53:20,000
a

1349
00:53:20,000 --> 00:53:22,720
connection from a station

1350
00:53:22,720 --> 00:53:26,079
to on an ethernet lan on the left

1351
00:53:26,079 --> 00:53:28,960
to a mesh station that has this there's

1352
00:53:28,960 --> 00:53:31,440
a device and a component called a gate

1353
00:53:31,440 --> 00:53:35,200
which you need to get out of the mesh

1354
00:53:35,359 --> 00:53:37,359
and then there's a mesh links and over

1355
00:53:37,359 --> 00:53:39,920
on the right we have a co-located mesh

1356
00:53:39,920 --> 00:53:42,000
station an access point and a station

1357
00:53:42,000 --> 00:53:44,079
that's associated with that access point

1358
00:53:44,079 --> 00:53:45,520
the station at the far right has no idea

1359
00:53:45,520 --> 00:53:47,200
there's any mesh involved it's just

1360
00:53:47,200 --> 00:53:49,920
associated to that access point so the a

1361
00:53:49,920 --> 00:53:51,599
frame in the middle would have all six

1362
00:53:51,599 --> 00:53:53,599
addresses which are the six addresses

1363
00:53:53,599 --> 00:53:55,680
shown across the top there

1364
00:53:55,680 --> 00:53:58,319
next slide

1365
00:53:58,319 --> 00:54:00,400
so this is just a table of what of all

1366
00:54:00,400 --> 00:54:03,359
these addresses exist or don't exist for

1367
00:54:03,359 --> 00:54:06,400
unicast and multicast for

1368
00:54:06,400 --> 00:54:08,319
frames that are transmitted internal to

1369
00:54:08,319 --> 00:54:10,559
the mesh as opposed to frames that start

1370
00:54:10,559 --> 00:54:13,200
outside transit and leave the mesh next

1371
00:54:13,200 --> 00:54:15,520
slide

1372
00:54:16,640 --> 00:54:17,520
so

1373
00:54:17,520 --> 00:54:19,119
what's where these extra addresses go

1374
00:54:19,119 --> 00:54:20,160
well

1375
00:54:20,160 --> 00:54:22,720
as i say 801 has this complex header

1376
00:54:22,720 --> 00:54:23,440
with

1377
00:54:23,440 --> 00:54:25,520
optional extension so it is a smesh

1378
00:54:25,520 --> 00:54:28,640
extension it's got mesh flags has a ttl

1379
00:54:28,640 --> 00:54:31,200
uh four byte sequence number and can

1380
00:54:31,200 --> 00:54:33,359
have zero one or two additional

1381
00:54:33,359 --> 00:54:35,119
addresses because in certain cases where

1382
00:54:35,119 --> 00:54:35,839
the

1383
00:54:35,839 --> 00:54:38,400
destination is multicast you don't need

1384
00:54:38,400 --> 00:54:39,359
additional

1385
00:54:39,359 --> 00:54:40,559
addresses

1386
00:54:40,559 --> 00:54:43,920
so the secret the source address

1387
00:54:43,920 --> 00:54:44,960
and the

1388
00:54:44,960 --> 00:54:48,880
sequence number as a pair is uh cached

1389
00:54:48,880 --> 00:54:51,520
at the mesh nodes and used for duplicate

1390
00:54:51,520 --> 00:54:52,480
detection

1391
00:54:52,480 --> 00:54:54,079
and there's nothing very definitive in

1392
00:54:54,079 --> 00:54:56,319
the 802.11 mesh standard about

1393
00:54:56,319 --> 00:54:58,720
how long it needs to be cached for

1394
00:54:58,720 --> 00:55:01,599
or things like that

1395
00:55:01,599 --> 00:55:02,640
so

1396
00:55:02,640 --> 00:55:04,960
unicast as this routing is determined by

1397
00:55:04,960 --> 00:55:06,720
this past selection protocol the

1398
00:55:06,720 --> 00:55:09,200
mandatory to implement one is has both

1399
00:55:09,200 --> 00:55:12,319
reactive uh aodv like features and

1400
00:55:12,319 --> 00:55:13,920
it also has a proactive part which

1401
00:55:13,920 --> 00:55:16,799
builds a tree from configured roots so

1402
00:55:16,799 --> 00:55:18,799
you can always use that tree but

1403
00:55:18,799 --> 00:55:20,240
you may get more efficient paths with

1404
00:55:20,240 --> 00:55:23,119
the hybrid with the reactive mode

1405
00:55:23,119 --> 00:55:26,000
uh next slide

1406
00:55:26,720 --> 00:55:29,839
so multicast so it's they're sent uh

1407
00:55:29,839 --> 00:55:31,280
with just with the destination address

1408
00:55:31,280 --> 00:55:33,119
the multigas that wrestle you don't need

1409
00:55:33,119 --> 00:55:34,960
separate receiver addresses for the

1410
00:55:34,960 --> 00:55:36,480
physical receivers

1411
00:55:36,480 --> 00:55:38,640
or alternatively you can serially

1412
00:55:38,640 --> 00:55:40,400
unicast by specifying individual

1413
00:55:40,400 --> 00:55:42,240
receivers to get acknowledgements and

1414
00:55:42,240 --> 00:55:44,319
re-transmissions on each hub

1415
00:55:44,319 --> 00:55:46,160
so the receiver discards them if the

1416
00:55:46,160 --> 00:55:48,319
ttl's got it down obviously or if

1417
00:55:48,319 --> 00:55:49,599
they're duplicates

1418
00:55:49,599 --> 00:55:51,920
or if they're not from appear

1419
00:55:51,920 --> 00:55:54,240
so it basically just floods it with

1420
00:55:54,240 --> 00:55:56,079
duplicate elimination

1421
00:55:56,079 --> 00:55:57,599
and that gets your multicast or

1422
00:55:57,599 --> 00:56:00,079
broadcast frame to all the nodes in the

1423
00:56:00,079 --> 00:56:03,839
all the mesh stations in your mesh

1424
00:56:03,920 --> 00:56:06,000
and this has always been in there 8211

1425
00:56:06,000 --> 00:56:07,680
has always had multicast that worked in

1426
00:56:07,680 --> 00:56:09,200
this fashion

1427
00:56:09,200 --> 00:56:12,240
uh since it's been standardized 11s

1428
00:56:12,240 --> 00:56:14,319
next slide

1429
00:56:14,319 --> 00:56:15,680
this is my last slide to the question

1430
00:56:15,680 --> 00:56:18,000
well okay this is all all layer two and

1431
00:56:18,000 --> 00:56:19,760
it's all like that and you can have

1432
00:56:19,760 --> 00:56:21,280
these gates that connect to the outside

1433
00:56:21,280 --> 00:56:23,440
world uh and uh

1434
00:56:23,440 --> 00:56:25,359
this duplicate elimination may solve

1435
00:56:25,359 --> 00:56:28,400
things inside the mesh and the ttl is a

1436
00:56:28,400 --> 00:56:30,480
sort of extra backup so you can't really

1437
00:56:30,480 --> 00:56:31,760
have you know

1438
00:56:31,760 --> 00:56:34,160
looping and stuff like that inside the

1439
00:56:34,160 --> 00:56:36,559
mesh that would be problematic but what

1440
00:56:36,559 --> 00:56:39,119
about loops in the external networks but

1441
00:56:39,119 --> 00:56:41,040
since everything is layer two

1442
00:56:41,040 --> 00:56:43,359
it just uses a spanning tree

1443
00:56:43,359 --> 00:56:46,799
and disables uh gateways and such that

1444
00:56:46,799 --> 00:56:48,559
you don't have loops

1445
00:56:48,559 --> 00:56:52,079
uh by the typical spanning tree method

1446
00:56:52,079 --> 00:56:53,119
uh

1447
00:56:53,119 --> 00:56:55,280
so i i you know i think the the flooding

1448
00:56:55,280 --> 00:56:57,119
and duplicate elimination has got

1449
00:56:57,119 --> 00:56:59,680
obviously some some bad uh

1450
00:56:59,680 --> 00:57:02,079
aspects and sort of a burden and storage

1451
00:57:02,079 --> 00:57:03,920
of the nodes and so forth but it's a

1452
00:57:03,920 --> 00:57:04,720
pretty

1453
00:57:04,720 --> 00:57:06,079
general and powerful technique for

1454
00:57:06,079 --> 00:57:08,720
getting multicast to actually uh work in

1455
00:57:08,720 --> 00:57:11,440
in meshes and things like that

1456
00:57:11,440 --> 00:57:14,400
that's my last slide

1457
00:57:16,400 --> 00:57:18,720
thank you donald perfect timing uh

1458
00:57:18,720 --> 00:57:21,040
questions can you go back to the slide

1459
00:57:21,040 --> 00:57:23,440
sure backup one um can you clarify if

1460
00:57:23,440 --> 00:57:25,440
this is one spanning tree for all

1461
00:57:25,440 --> 00:57:27,839
traffic or one spanning tree for

1462
00:57:27,839 --> 00:57:28,640
uh

1463
00:57:28,640 --> 00:57:32,799
each source like rooted at that source

1464
00:57:32,799 --> 00:57:36,480
uh it's for all traffic i believe

1465
00:57:36,480 --> 00:57:38,000
but it has been quite a few years since

1466
00:57:38,000 --> 00:57:41,280
i was involved with this but anyway

1467
00:57:41,280 --> 00:57:42,480
hopefully there weren't too many errors

1468
00:57:42,480 --> 00:57:45,119
in this and i know

1469
00:57:45,760 --> 00:57:47,920
running

1470
00:57:47,920 --> 00:57:50,880
i have worked a little bit with 82211s

1471
00:57:50,880 --> 00:57:53,119
and in my opinion

1472
00:57:53,119 --> 00:57:55,760
it was not working well in anything

1473
00:57:55,760 --> 00:57:58,240
beyond a couple of nodes

1474
00:57:58,240 --> 00:57:59,200
but

1475
00:57:59,200 --> 00:58:02,319
even then because this aodv with

1476
00:58:02,319 --> 00:58:04,240
proactive beaconing

1477
00:58:04,240 --> 00:58:05,760
didn't scale well

1478
00:58:05,760 --> 00:58:08,480
811 ls might be the best

1479
00:58:08,480 --> 00:58:10,559
mode to use your

1480
00:58:10,559 --> 00:58:12,799
wi-fi if you want to do layer 3 routing

1481
00:58:12,799 --> 00:58:13,760
over it

1482
00:58:13,760 --> 00:58:16,640
because you can just switch off the mesh

1483
00:58:16,640 --> 00:58:18,319
protocol below it and then you have a

1484
00:58:18,319 --> 00:58:20,839
fully bridgeable single hop

1485
00:58:20,839 --> 00:58:23,760
wi-fi ad hoc mode

1486
00:58:23,760 --> 00:58:25,520
because the original i don't know

1487
00:58:25,520 --> 00:58:27,440
doesn't work well on newer wi-fi

1488
00:58:27,440 --> 00:58:30,400
versions so even if we want to use a

1489
00:58:30,400 --> 00:58:32,040
different protocol

1490
00:58:32,040 --> 00:58:34,240
8.211s might be

1491
00:58:34,240 --> 00:58:36,319
the single link layer we want to look

1492
00:58:36,319 --> 00:58:38,559
into because everything else on wi-fi

1493
00:58:38,559 --> 00:58:42,400
doesn't work that well for manage

1494
00:58:42,400 --> 00:58:44,559
i would like to say that i i

1495
00:58:44,559 --> 00:58:47,520
am not supporting the uh

1496
00:58:47,520 --> 00:58:49,280
current path selection protocol in

1497
00:58:49,280 --> 00:58:50,960
802.11s

1498
00:58:50,960 --> 00:58:52,000
originally there were gonna be two of

1499
00:58:52,000 --> 00:58:54,000
them one got dropped at the last minute

1500
00:58:54,000 --> 00:58:57,119
and uh i think there are

1501
00:58:57,119 --> 00:58:59,359
could be better alternatives for the uh

1502
00:58:59,359 --> 00:59:05,160
for the routing inside um 80-11 mesh

1503
00:59:07,200 --> 00:59:09,680
julius

1504
00:59:09,680 --> 00:59:12,160
could you please go one slide back

1505
00:59:12,160 --> 00:59:15,280
slide 16 please

1506
00:59:15,280 --> 00:59:19,440
um so here you're saying that you can do

1507
00:59:19,440 --> 00:59:21,920
a conversion of multicast to unicast

1508
00:59:21,920 --> 00:59:23,040
right

1509
00:59:23,040 --> 00:59:26,319
right does that mean that every node

1510
00:59:26,319 --> 00:59:28,640
knows the membership of every multicast

1511
00:59:28,640 --> 00:59:30,319
group of that mean that you're spamming

1512
00:59:30,319 --> 00:59:32,400
the whole mesh with your mouse slamming

1513
00:59:32,400 --> 00:59:33,599
the whole mesh

1514
00:59:33,599 --> 00:59:36,240
okay thank you

1515
00:59:36,799 --> 00:59:39,200
yeah by the way so you don't wouldn't

1516
00:59:39,200 --> 00:59:40,880
you don't just send general multicast

1517
00:59:40,880 --> 00:59:43,119
frames for the purpose of discovery in

1518
00:59:43,119 --> 00:59:44,960
80211 mesh

1519
00:59:44,960 --> 00:59:47,359
discovery happens because the first

1520
00:59:47,359 --> 00:59:49,520
these stations send beacons and then

1521
00:59:49,520 --> 00:59:51,599
they peer so when you're actually

1522
00:59:51,599 --> 00:59:53,680
sending data it never worries about

1523
00:59:53,680 --> 00:59:55,599
getting them to anything but a peer that

1524
00:59:55,599 --> 00:59:57,760
it already knows about

1525
00:59:57,760 --> 00:59:59,200
so you can just serially you have that

1526
00:59:59,200 --> 01:00:00,559
list of peers and you can serially

1527
01:00:00,559 --> 01:00:03,520
unicast to them uh quite easily

1528
01:00:03,520 --> 01:00:05,119
and actually should not appear then if

1529
01:00:05,119 --> 01:00:06,559
they're not appear when you you

1530
01:00:06,559 --> 01:00:08,000
multicast or there's some other and

1531
01:00:08,000 --> 01:00:09,839
receiver that receives it they won't be

1532
01:00:09,839 --> 01:00:11,920
able to decode it anyway because they

1533
01:00:11,920 --> 01:00:14,640
won't have the group key for the sender

1534
01:00:14,640 --> 01:00:17,839
sure that's clear thank you

1535
01:00:19,920 --> 01:00:20,799
okay

1536
01:00:20,799 --> 01:00:23,280
thank you we need to move on

1537
01:00:23,280 --> 01:00:24,400
dominic

1538
01:00:24,400 --> 01:00:29,400
we show you briefly in the queue but uh

1539
01:00:32,400 --> 01:00:34,000
i was going to ask you to hold your

1540
01:00:34,000 --> 01:00:36,000
question into the discussion

1541
01:00:36,000 --> 01:00:39,000
okay

1542
01:00:54,480 --> 01:00:56,319
i think you're

1543
01:00:56,319 --> 01:00:59,200
a bit too loud

1544
01:00:59,839 --> 01:01:01,280
too loud

1545
01:01:01,280 --> 01:01:02,880
i'm not very sure

1546
01:01:02,880 --> 01:01:05,920
there's something wrong

1547
01:01:08,000 --> 01:01:10,799
is it better now

1548
01:01:10,799 --> 01:01:14,000
yeah uh can you uh

1549
01:01:14,000 --> 01:01:16,000
have the microphone

1550
01:01:16,000 --> 01:01:17,359
at a

1551
01:01:17,359 --> 01:01:20,640
greater distance from your mouse

1552
01:01:21,680 --> 01:01:22,559
um

1553
01:01:22,559 --> 01:01:25,440
i use headset here but i'm not very sure

1554
01:01:25,440 --> 01:01:26,799
there

1555
01:01:26,799 --> 01:01:29,040
maybe something wrong here but

1556
01:01:29,040 --> 01:01:32,480
i don't know if you hear me well

1557
01:01:32,480 --> 01:01:34,799
hello

1558
01:01:35,839 --> 01:01:37,599
yeah it's better if you talk a little

1559
01:01:37,599 --> 01:01:38,720
lower

1560
01:01:38,720 --> 01:01:41,440
it's it's pretty high gain i guess so

1561
01:01:41,440 --> 01:01:42,799
if you can talk a little something a

1562
01:01:42,799 --> 01:01:46,880
little quieter we can hear you better

1563
01:01:46,880 --> 01:01:48,559
okay okay

1564
01:01:48,559 --> 01:01:50,000
okay

1565
01:01:50,000 --> 01:01:54,079
is it better now well

1566
01:01:54,720 --> 01:01:56,960
yeah go ahead

1567
01:01:56,960 --> 01:01:58,799
oh okay okay

1568
01:01:58,799 --> 01:02:01,760
hello everyone i'm sandison from zte

1569
01:02:01,760 --> 01:02:04,880
this presentation is for beer in bevel

1570
01:02:04,880 --> 01:02:07,520
we have co-author tony from juniper

1571
01:02:07,520 --> 01:02:10,240
next please

1572
01:02:12,240 --> 01:02:15,520
at first let's see what's beer here is

1573
01:02:15,520 --> 01:02:18,400
the acronym of beer index explicit

1574
01:02:18,400 --> 01:02:19,680
replication

1575
01:02:19,680 --> 01:02:22,640
here is a new multicast technology it

1576
01:02:22,640 --> 01:02:25,680
can achieve multicast forwarding without

1577
01:02:25,680 --> 01:02:27,440
explicit

1578
01:02:27,440 --> 01:02:29,760
multicast distribution trees building

1579
01:02:29,760 --> 01:02:32,799
and it doesn't require intermediate

1580
01:02:32,799 --> 01:02:36,400
nodes to maintain any per flow state

1581
01:02:36,400 --> 01:02:39,359
pure introduces a layer architecture to

1582
01:02:39,359 --> 01:02:41,920
decode the multicast packet and

1583
01:02:41,920 --> 01:02:44,160
multicast the transportation the

1584
01:02:44,160 --> 01:02:46,640
multicast forwarding in beer doesn't

1585
01:02:46,640 --> 01:02:50,720
depend on the ip header which has the

1586
01:02:50,720 --> 01:02:54,559
multicast destination it depends on the

1587
01:02:54,559 --> 01:02:56,720
new beer header

1588
01:02:56,720 --> 01:02:59,359
beer forwarding is based on bit stream

1589
01:02:59,359 --> 01:03:02,640
in the beer header that follows a layer

1590
01:03:02,640 --> 01:03:07,039
2 or a tunnel header for example mpls in

1591
01:03:07,039 --> 01:03:10,000
ipv6 or any internal

1592
01:03:10,000 --> 01:03:12,880
whose encapsulation header can indicate

1593
01:03:12,880 --> 01:03:15,359
that beer header follows

1594
01:03:15,359 --> 01:03:19,200
each beach in the big stream indicates

1595
01:03:19,200 --> 01:03:22,720
an age router that needs to receive the

1596
01:03:22,720 --> 01:03:23,760
traffic

1597
01:03:23,760 --> 01:03:27,799
the beer architecture is defined in fc

1598
01:03:27,799 --> 01:03:31,760
8279 and the beer header is defending

1599
01:03:31,760 --> 01:03:36,400
fc 82 96 and the drop bearing six

1600
01:03:36,400 --> 01:03:39,119
next please

1601
01:03:40,799 --> 01:03:43,839
there is the beer layered architecture

1602
01:03:43,839 --> 01:03:46,400
the multicast for wording is decoupled

1603
01:03:46,400 --> 01:03:48,799
from the multicast package

1604
01:03:48,799 --> 01:03:52,720
the multicast package which has the ipv4

1605
01:03:52,720 --> 01:03:56,480
or ipv6 multicast destination address

1606
01:03:56,480 --> 01:04:00,319
is recognized in the ingress router and

1607
01:04:00,319 --> 01:04:01,760
the egress

1608
01:04:01,760 --> 01:04:02,960
routers

1609
01:04:02,960 --> 01:04:06,000
the intermediate nodes forward the

1610
01:04:06,000 --> 01:04:09,760
packet depend on the their header only

1611
01:04:09,760 --> 01:04:12,400
the multicast destination address of the

1612
01:04:12,400 --> 01:04:14,640
package doesn't have been seen in the

1613
01:04:14,640 --> 01:04:16,559
intermediate nodes

1614
01:04:16,559 --> 01:04:19,039
the control of the multicast package

1615
01:04:19,039 --> 01:04:22,960
among the ingress and the egress routers

1616
01:04:22,960 --> 01:04:26,799
is called multicast flow overlay the

1617
01:04:26,799 --> 01:04:29,440
ingress router encapsulates the

1618
01:04:29,440 --> 01:04:31,839
multicast package with beer header and

1619
01:04:31,839 --> 01:04:34,960
the necessary outer encapsulation

1620
01:04:34,960 --> 01:04:39,200
for example mpls ethernet or ipv6

1621
01:04:39,200 --> 01:04:42,799
the egress router removes removes the

1622
01:04:42,799 --> 01:04:45,520
beer header and associated outer

1623
01:04:45,520 --> 01:04:48,640
encapsulation forwards the multicast

1624
01:04:48,640 --> 01:04:51,760
package to receiver or the next hop

1625
01:04:51,760 --> 01:04:53,119
router

1626
01:04:53,119 --> 01:04:56,559
the beer layer is is the core part of

1627
01:04:56,559 --> 01:04:59,440
beer the node forwards the package

1628
01:04:59,440 --> 01:05:02,240
according to the beer header only the

1629
01:05:02,240 --> 01:05:06,319
outer encapsulation as we mentioned

1630
01:05:06,319 --> 01:05:09,200
can be changed by each node that means

1631
01:05:09,200 --> 01:05:10,880
the whole i hope

1632
01:05:10,880 --> 01:05:13,200
that is no multicultural trees in the

1633
01:05:13,200 --> 01:05:14,480
beer domain

1634
01:05:14,480 --> 01:05:16,799
the details of beer forwarding and the

1635
01:05:16,799 --> 01:05:20,000
beer header is described in the

1636
01:05:20,000 --> 01:05:23,440
fc we mentioned above

1637
01:05:23,440 --> 01:05:26,160
the routing underlay is extending the

1638
01:05:26,160 --> 01:05:29,520
routing protocols to build their layer

1639
01:05:29,520 --> 01:05:31,920
the forwarding table used in the layer

1640
01:05:31,920 --> 01:05:34,480
is generated by the routing only

1641
01:05:34,480 --> 01:05:35,760
protocols

1642
01:05:35,760 --> 01:05:36,799
such as

1643
01:05:36,799 --> 01:05:38,240
isis

1644
01:05:38,240 --> 01:05:40,480
ospf or bdp

1645
01:05:40,480 --> 01:05:42,640
and of course payable

1646
01:05:42,640 --> 01:05:45,119
and the only protocol is extended to

1647
01:05:45,119 --> 01:05:46,640
advertise

1648
01:05:46,640 --> 01:05:49,200
the node's peer information and compute

1649
01:05:49,200 --> 01:05:50,640
the specific

1650
01:05:50,640 --> 01:05:53,440
beer for wording table that means

1651
01:05:53,440 --> 01:05:55,839
bift gift

1652
01:05:55,839 --> 01:05:58,640
next please

1653
01:06:02,000 --> 01:06:05,760
from above we know that when we use beer

1654
01:06:05,760 --> 01:06:08,640
there is no multicast tree signaling and

1655
01:06:08,640 --> 01:06:11,920
the multicast state in the network

1656
01:06:11,920 --> 01:06:13,680
beer can work with

1657
01:06:13,680 --> 01:06:16,319
any routing protocol for secondary beer

1658
01:06:16,319 --> 01:06:19,520
information used for dipped calculation

1659
01:06:19,520 --> 01:06:21,359
for example

1660
01:06:21,359 --> 01:06:23,760
sis or spf btp

1661
01:06:23,760 --> 01:06:25,200
and babel

1662
01:06:25,200 --> 01:06:27,599
and the other routing protocol

1663
01:06:27,599 --> 01:06:29,760
can do it as well

1664
01:06:29,760 --> 01:06:32,880
beer can work with any l2 or internal

1665
01:06:32,880 --> 01:06:34,400
encapsulations

1666
01:06:34,400 --> 01:06:39,760
as we mentioned empires ipv6 and so on

1667
01:06:39,760 --> 01:06:42,640
if the multicast traffic reach is not

1668
01:06:42,640 --> 01:06:43,680
high

1669
01:06:43,680 --> 01:06:46,480
fear forwarding can also be achieved by

1670
01:06:46,480 --> 01:06:48,000
software

1671
01:06:48,000 --> 01:06:49,440
so beer is

1672
01:06:49,440 --> 01:06:52,480
perfect for fable networks

1673
01:06:52,480 --> 01:06:55,280
next please

1674
01:06:57,520 --> 01:07:00,319
let's see the beer signaling in apple

1675
01:07:00,319 --> 01:07:03,440
protocol paper route advertisements for

1676
01:07:03,440 --> 01:07:05,839
vr router roofback addresses

1677
01:07:05,839 --> 01:07:08,400
carrier trvs for their information used

1678
01:07:08,400 --> 01:07:10,240
for beef calculation

1679
01:07:10,240 --> 01:07:13,119
beer traffic can be tunneled over via

1680
01:07:13,119 --> 01:07:17,039
incapable nodes by any kind of tunnels

1681
01:07:17,039 --> 01:07:19,680
because bevel is a distance vector

1682
01:07:19,680 --> 01:07:21,599
protocol like bdp

1683
01:07:21,599 --> 01:07:24,799
methods used being brbgp segmenting can

1684
01:07:24,799 --> 01:07:28,240
also be used here for babel this part

1685
01:07:28,240 --> 01:07:33,279
will be added in next version next piece

1686
01:07:34,400 --> 01:07:36,079
for your information

1687
01:07:36,079 --> 01:07:39,119
there is an open source implementation

1688
01:07:39,119 --> 01:07:42,160
for beer signaling bevel protocol in the

1689
01:07:42,160 --> 01:07:43,359
github

1690
01:07:43,359 --> 01:07:44,960
that's all i appreciate for your

1691
01:07:44,960 --> 01:07:48,640
listening comments welcomed

1692
01:07:50,319 --> 01:07:51,599
thank you

1693
01:07:51,599 --> 01:07:55,079
questions comments

1694
01:07:58,559 --> 01:08:01,200
jeffrey from juniper um i just want to

1695
01:08:01,200 --> 01:08:03,759
add that

1696
01:08:04,160 --> 01:08:05,760
the

1697
01:08:05,760 --> 01:08:07,039
beer

1698
01:08:07,039 --> 01:08:09,920
it can achieve efficient broadcast

1699
01:08:09,920 --> 01:08:12,799
replication without building a tree

1700
01:08:12,799 --> 01:08:15,119
that's why it's a

1701
01:08:15,119 --> 01:08:17,040
it's the best

1702
01:08:17,040 --> 01:08:20,799
multicast protocol i have seen

1703
01:08:21,120 --> 01:08:23,120
the there is one cache in other

1704
01:08:23,120 --> 01:08:25,439
scenarios uh where

1705
01:08:25,439 --> 01:08:26,319
it

1706
01:08:26,319 --> 01:08:28,719
it requires new we use a new

1707
01:08:28,719 --> 01:08:31,679
encapsulation a new folding algorithm

1708
01:08:31,679 --> 01:08:32,640
so

1709
01:08:32,640 --> 01:08:35,198
in um when you need to to use hardware

1710
01:08:35,198 --> 01:08:38,319
based forwarding then you either need a

1711
01:08:38,319 --> 01:08:40,479
new a6 or

1712
01:08:40,479 --> 01:08:42,479
a programmable chips

1713
01:08:42,479 --> 01:08:44,640
and that has been uh

1714
01:08:44,640 --> 01:08:47,120
hindering its deployment to some extent

1715
01:08:47,120 --> 01:08:48,960
it's a there's a chicken egg problem

1716
01:08:48,960 --> 01:08:49,839
there

1717
01:08:49,839 --> 01:08:53,279
but in the bevel environment

1718
01:08:53,279 --> 01:08:55,120
especially

1719
01:08:55,120 --> 01:08:56,880
when the data rate is not high you can

1720
01:08:56,880 --> 01:08:58,560
use software-based forwarding and

1721
01:08:58,560 --> 01:09:01,120
ascending mission that that is one thing

1722
01:09:01,120 --> 01:09:04,000
that makes it very attractive there

1723
01:09:04,000 --> 01:09:07,000
and

1724
01:09:07,198 --> 01:09:08,238
so

1725
01:09:08,238 --> 01:09:08,640
um

1726
01:09:08,640 --> 01:09:10,158
[Music]

1727
01:09:10,158 --> 01:09:13,439
i i yeah i i i just uh emphasis also

1728
01:09:13,439 --> 01:09:17,439
emphasized that the fact that it's a

1729
01:09:18,319 --> 01:09:20,799
efficient replication that does that

1730
01:09:20,799 --> 01:09:22,158
does not go

1731
01:09:22,158 --> 01:09:24,479
does not flood the traffic and

1732
01:09:24,479 --> 01:09:26,719
and yet you don't need to build trees

1733
01:09:26,719 --> 01:09:28,080
that's that's the

1734
01:09:28,080 --> 01:09:28,880
uh

1735
01:09:28,880 --> 01:09:33,640
the key a key concept of it

1736
01:09:41,759 --> 01:09:45,439
yeah just two quick comments um so

1737
01:09:45,439 --> 01:09:47,679
i don't have an opinion yet of whether

1738
01:09:47,679 --> 01:09:50,080
beer is a good or a bad idea

1739
01:09:50,080 --> 01:09:52,238
i sincerely don't know

1740
01:09:52,238 --> 01:09:54,320
but what i

1741
01:09:54,320 --> 01:09:57,600
am ready to claim is that

1742
01:09:57,600 --> 01:09:59,520
beer does

1743
01:09:59,520 --> 01:10:00,480
not

1744
01:10:00,480 --> 01:10:04,000
suffer from the duplicate problem

1745
01:10:04,000 --> 01:10:07,040
okay so beer does not need duplicate uh

1746
01:10:07,040 --> 01:10:10,000
detection and as far as i can tell

1747
01:10:10,000 --> 01:10:12,000
just by reading the specs i haven't

1748
01:10:12,000 --> 01:10:14,000
checked that formally as far as i can

1749
01:10:14,000 --> 01:10:15,840
tell it does not suffer from the

1750
01:10:15,840 --> 01:10:18,719
problems that ronaldo described in his

1751
01:10:18,719 --> 01:10:20,480
talk at the beginning

1752
01:10:20,480 --> 01:10:22,320
okay and i think that

1753
01:10:22,320 --> 01:10:24,159
at least i don't know whether beer is a

1754
01:10:24,159 --> 01:10:26,320
protocol is suitable for many but the

1755
01:10:26,320 --> 01:10:28,480
ideas behind beer is that something that

1756
01:10:28,480 --> 01:10:32,080
definitely we should be looking at

1757
01:10:37,040 --> 01:10:39,199
uh dublin putter um this is going to be

1758
01:10:39,199 --> 01:10:41,760
a bit of a longer well comment slash

1759
01:10:41,760 --> 01:10:44,239
additional notes

1760
01:10:44,239 --> 01:10:46,320
i first would like to point out a few

1761
01:10:46,320 --> 01:10:48,400
things about

1762
01:10:48,400 --> 01:10:50,080
babel's functioning as it would apply to

1763
01:10:50,080 --> 01:10:51,199
money

1764
01:10:51,199 --> 01:10:53,280
it's it's important to understand that

1765
01:10:53,280 --> 01:10:57,199
when we have a situation where

1766
01:10:57,199 --> 01:10:59,679
a mesh node is forwarding multicast

1767
01:10:59,679 --> 01:11:02,480
traffic to multiple other mesh nodes

1768
01:11:02,480 --> 01:11:03,440
ie

1769
01:11:03,440 --> 01:11:04,800
so this

1770
01:11:04,800 --> 01:11:06,159
it doesn't matter so this is about the

1771
01:11:06,159 --> 01:11:08,400
single hop behavior if so multiple mesh

1772
01:11:08,400 --> 01:11:10,000
nodes in this case means that there's

1773
01:11:10,000 --> 01:11:11,840
multiple paths for the traffic to

1774
01:11:11,840 --> 01:11:13,600
progress

1775
01:11:13,600 --> 01:11:16,560
that traffic in current beer designs is

1776
01:11:16,560 --> 01:11:18,320
always unicast

1777
01:11:18,320 --> 01:11:20,320
so you always have

1778
01:11:20,320 --> 01:11:23,679
the the replication into unicast on the

1779
01:11:23,679 --> 01:11:26,480
single mesh hop level

1780
01:11:26,480 --> 01:11:28,640
um whether that is a good thing or a bad

1781
01:11:28,640 --> 01:11:30,400
thing depends on the actual mesh

1782
01:11:30,400 --> 01:11:31,600
properties

1783
01:11:31,600 --> 01:11:32,640
um

1784
01:11:32,640 --> 01:11:34,880
but you do only send it once so if you

1785
01:11:34,880 --> 01:11:35,760
have

1786
01:11:35,760 --> 01:11:36,880
a thousand

1787
01:11:36,880 --> 01:11:39,440
receivers behind one mesh node then it's

1788
01:11:39,440 --> 01:11:42,159
only forwarded once to that mesh node

1789
01:11:42,159 --> 01:11:43,280
and

1790
01:11:43,280 --> 01:11:45,600
this is not necessarily

1791
01:11:45,600 --> 01:11:48,159
something about beer that

1792
01:11:48,159 --> 01:11:52,080
needs to stay this way it's only so

1793
01:11:52,080 --> 01:11:55,600
if you look at the problems with um

1794
01:11:55,600 --> 01:11:58,239
using multicast for labels multicast

1795
01:11:58,239 --> 01:12:00,880
propagation on lower levels in for

1796
01:12:00,880 --> 01:12:05,280
example mldp the problem was always that

1797
01:12:05,280 --> 01:12:08,960
you are moving from assigning the

1798
01:12:08,960 --> 01:12:12,239
labeling and control from the receiver

1799
01:12:12,239 --> 01:12:13,199
to

1800
01:12:13,199 --> 01:12:14,800
assigning that function to the sender of

1801
01:12:14,800 --> 01:12:16,560
the multicast traffic which has

1802
01:12:16,560 --> 01:12:17,760
historically

1803
01:12:17,760 --> 01:12:18,719
been

1804
01:12:18,719 --> 01:12:19,600
well

1805
01:12:19,600 --> 01:12:22,239
learned been learned to to not work that

1806
01:12:22,239 --> 01:12:24,400
well

1807
01:12:24,400 --> 01:12:25,760
however

1808
01:12:25,760 --> 01:12:28,960
in mesh networks and especially if this

1809
01:12:28,960 --> 01:12:32,239
ends up using the beer and ipv6 encoding

1810
01:12:32,239 --> 01:12:34,320
i believe this is a very solvable

1811
01:12:34,320 --> 01:12:35,600
problem

1812
01:12:35,600 --> 01:12:37,920
which just needs a bunch of

1813
01:12:37,920 --> 01:12:41,920
additions to beer so this protocol so in

1814
01:12:41,920 --> 01:12:44,000
in itself beer

1815
01:12:44,000 --> 01:12:48,159
will start out with only unicast packets

1816
01:12:48,159 --> 01:12:52,719
on the lower layer um and if if uh

1817
01:12:52,719 --> 01:12:54,719
if we want uh to use multicast

1818
01:12:54,719 --> 01:12:56,320
capabilities of the radios then that

1819
01:12:56,320 --> 01:12:58,719
will be additional beer work

1820
01:12:58,719 --> 01:12:59,840
um

1821
01:12:59,840 --> 01:13:01,600
but it can be done

1822
01:13:01,600 --> 01:13:03,280
there is another thing i would like to

1823
01:13:03,280 --> 01:13:05,840
point out

1824
01:13:05,840 --> 01:13:06,960
in

1825
01:13:06,960 --> 01:13:09,120
it in a way

1826
01:13:09,120 --> 01:13:12,000
there is there's a commonality with 11s

1827
01:13:12,000 --> 01:13:15,520
and even smf to some degree in that

1828
01:13:15,520 --> 01:13:17,199
the reason that this doesn't need

1829
01:13:17,199 --> 01:13:19,199
duplicate detection is because it's

1830
01:13:19,199 --> 01:13:21,440
fundamentally an added layer of

1831
01:13:21,440 --> 01:13:22,800
encapsulation

1832
01:13:22,800 --> 01:13:25,360
um if you if you look at it sideways

1833
01:13:25,360 --> 01:13:28,320
kind of then 11s is also an additional

1834
01:13:28,320 --> 01:13:30,159
layer of encapsulation because you have

1835
01:13:30,159 --> 01:13:33,440
this the six address frame um and if you

1836
01:13:33,440 --> 01:13:35,040
look at adding extension headers with

1837
01:13:35,040 --> 01:13:36,640
sequence numbers that's

1838
01:13:36,640 --> 01:13:38,000
a very

1839
01:13:38,000 --> 01:13:38,880
very

1840
01:13:38,880 --> 01:13:40,880
simple kind of added encapsulation but

1841
01:13:40,880 --> 01:13:42,480
still you're you're tacking additional

1842
01:13:42,480 --> 01:13:45,199
data into the packet that is kind of the

1843
01:13:45,199 --> 01:13:48,159
one important takeaway for me here

1844
01:13:48,159 --> 01:13:50,480
the way to avoid all the trying to

1845
01:13:50,480 --> 01:13:54,159
duplicate things is to add a layer and

1846
01:13:54,159 --> 01:13:56,640
that layer also tends to allow

1847
01:13:56,640 --> 01:13:59,440
better uh routing behavior

1848
01:13:59,440 --> 01:14:01,679
and i think that's

1849
01:14:01,679 --> 01:14:03,760
taken at this point and we should focus

1850
01:14:03,760 --> 01:14:04,960
on figuring out what the best

1851
01:14:04,960 --> 01:14:06,560
encapsulation is

1852
01:14:06,560 --> 01:14:08,400
rather than trying to make it work

1853
01:14:08,400 --> 01:14:11,360
without encapsulation

1854
01:14:11,600 --> 01:14:15,360
i'd like to make a clarification

1855
01:14:15,360 --> 01:14:18,800
beer ipv6 encapsulation that means the

1856
01:14:18,800 --> 01:14:21,280
director adopted in their working group

1857
01:14:21,280 --> 01:14:22,480
is

1858
01:14:22,480 --> 01:14:25,520
bare insects it's not encapsulated in

1859
01:14:25,520 --> 01:14:29,520
beer in ipv6 extension header it's just

1860
01:14:29,520 --> 01:14:34,800
a protocol follow ipv6 header so

1861
01:14:34,800 --> 01:14:37,840
we needn't to do the check of

1862
01:14:37,840 --> 01:14:41,600
extension header for bearing 6 we just

1863
01:14:41,600 --> 01:14:44,400
read the ip protocol

1864
01:14:44,400 --> 01:14:47,600
or next header field in the package we

1865
01:14:47,600 --> 01:14:50,640
can know that there is a verb header

1866
01:14:50,640 --> 01:14:51,679
followed

1867
01:14:51,679 --> 01:14:54,080
me we need to do the

1868
01:14:54,080 --> 01:14:56,960
extension header check um yeah sorry i

1869
01:14:56,960 --> 01:14:58,560
was a bit unclear about that that that

1870
01:14:58,560 --> 01:15:01,120
is what i meant um i did forget another

1871
01:15:01,120 --> 01:15:01,840
thing

1872
01:15:01,840 --> 01:15:05,440
in in the beer pable work um there's one

1873
01:15:05,440 --> 01:15:07,040
very important thing that is completely

1874
01:15:07,040 --> 01:15:08,560
missing at this point which is there

1875
01:15:08,560 --> 01:15:11,199
needs to be some way to dynamically uh

1876
01:15:11,199 --> 01:15:13,600
or within the mesh assign the actual

1877
01:15:13,600 --> 01:15:15,920
identifiers for the beer nodes i either

1878
01:15:15,920 --> 01:15:18,560
the bit position and that is the actual

1879
01:15:18,560 --> 01:15:20,400
difficulty that that

1880
01:15:20,400 --> 01:15:22,800
doing beer in monet will need to solve

1881
01:15:22,800 --> 01:15:25,840
in some way

1882
01:15:26,800 --> 01:15:29,920
yes only the age routers need to be

1883
01:15:29,920 --> 01:15:32,960
assigned the bit position for it and the

1884
01:15:32,960 --> 01:15:35,760
intermediate nodes even to be assigned

1885
01:15:35,760 --> 01:15:36,560
with

1886
01:15:36,560 --> 01:15:39,360
a bit operation

1887
01:15:40,560 --> 01:15:42,880
um we need to speed up a bit the heading

1888
01:15:42,880 --> 01:15:44,239
uh

1889
01:15:44,239 --> 01:15:45,280
sword please

1890
01:15:45,280 --> 01:15:46,880
quick um

1891
01:15:46,880 --> 01:15:49,199
we would just need deduplication for

1892
01:15:49,199 --> 01:15:51,679
dense mode flutters multicast customs

1893
01:15:51,679 --> 01:15:54,800
not for sparse mode that follow a tree

1894
01:15:54,800 --> 01:15:57,520
if i understand this right beer is just

1895
01:15:57,520 --> 01:15:59,120
following a

1896
01:15:59,120 --> 01:16:01,120
joint tree that is made out of the

1897
01:16:01,120 --> 01:16:04,800
unicast roots and use the explicit bits

1898
01:16:04,800 --> 01:16:07,840
to keep track which part of the already

1899
01:16:07,840 --> 01:16:09,679
split traffic is still having to travel

1900
01:16:09,679 --> 01:16:12,560
to multiple nodes

1901
01:16:15,360 --> 01:16:18,239
yes the only the topology

1902
01:16:18,239 --> 01:16:21,600
is carried in the beer forwarding and we

1903
01:16:21,600 --> 01:16:23,199
cannot

1904
01:16:23,199 --> 01:16:26,239
we care not about the multicast flow

1905
01:16:26,239 --> 01:16:30,719
just the topology that is the

1906
01:16:30,719 --> 01:16:32,159
set of the

1907
01:16:32,159 --> 01:16:35,839
egress routers yeah

1908
01:16:39,040 --> 01:16:40,560
um

1909
01:16:40,560 --> 01:16:42,400
i don't know how to pronounce his name

1910
01:16:42,400 --> 01:16:43,760
oh it's you

1911
01:16:43,760 --> 01:16:45,840
or jeffrey from juniper

1912
01:16:45,840 --> 01:16:48,400
i i want to add one thing that i forgot

1913
01:16:48,400 --> 01:16:50,960
to say earlier it's related to the

1914
01:16:50,960 --> 01:16:53,840
earlier point uh

1915
01:16:53,920 --> 01:16:56,560
point about

1916
01:16:56,800 --> 01:16:59,679
uh income interface not it cannot be the

1917
01:16:59,679 --> 01:17:01,520
same as i'll go interface in the

1918
01:17:01,520 --> 01:17:03,679
traditional multicast folding

1919
01:17:03,679 --> 01:17:05,440
um with beer

1920
01:17:05,440 --> 01:17:08,719
as david pointed out is even online

1921
01:17:08,719 --> 01:17:11,280
interface it's a neighbor based

1922
01:17:11,280 --> 01:17:13,360
so you

1923
01:17:13,360 --> 01:17:15,120
you don't we do not have this problem

1924
01:17:15,120 --> 01:17:16,800
you can receive

1925
01:17:16,800 --> 01:17:19,120
traffic on an incoming

1926
01:17:19,120 --> 01:17:21,120
lane and you can go out of the same lane

1927
01:17:21,120 --> 01:17:24,320
again to a different neighbor

1928
01:17:28,080 --> 01:17:32,159
hi luberger um i'm new to beer so

1929
01:17:32,159 --> 01:17:33,920
i'm new to beer so i may have it wrong

1930
01:17:33,920 --> 01:17:36,320
but i think the really interesting point

1931
01:17:36,320 --> 01:17:38,640
here is is by adding beer is adding a

1932
01:17:38,640 --> 01:17:40,640
new forwarding layer or an additional

1933
01:17:40,640 --> 01:17:41,840
forwarding layer

1934
01:17:41,840 --> 01:17:44,159
and that separates out sort of the ip

1935
01:17:44,159 --> 01:17:45,920
semantics from the forwarding semantics

1936
01:17:45,920 --> 01:17:47,360
which i think is really good for solving

1937
01:17:47,360 --> 01:17:48,640
the router to router problem that i

1938
01:17:48,640 --> 01:17:51,120
asked about before so i think

1939
01:17:51,120 --> 01:17:53,280
david talked about the question for the

1940
01:17:53,280 --> 01:17:55,280
group is what encapsulation

1941
01:17:55,280 --> 01:17:57,040
uh mechanisms should be thinking about i

1942
01:17:57,040 --> 01:17:58,800
want to generalize that to say what

1943
01:17:58,800 --> 01:18:02,400
layering mechanism we should think about

1944
01:18:03,280 --> 01:18:04,880
thanks

1945
01:18:04,880 --> 01:18:07,280
we now move on to

1946
01:18:07,280 --> 01:18:11,040
pascal's presentation about

1947
01:18:11,040 --> 01:18:14,080
multicasting role

1948
01:18:14,719 --> 01:18:17,199
for 15 minutes

1949
01:18:17,199 --> 01:18:20,560
you know can you show me your thing

1950
01:18:20,560 --> 01:18:22,719
hello

1951
01:18:22,719 --> 01:18:26,000
cool um did you give me the amp or will

1952
01:18:26,000 --> 01:18:28,880
you move the slides

1953
01:18:31,840 --> 01:18:33,440
start talking we'll get we'll figure it

1954
01:18:33,440 --> 01:18:34,320
out

1955
01:18:34,320 --> 01:18:35,920
but if you transfer it to me then i will

1956
01:18:35,920 --> 01:18:38,400
move them

1957
01:18:40,080 --> 01:18:42,960
well we can start already so so ripple

1958
01:18:42,960 --> 01:18:45,600
is a uh world it's the working group

1959
01:18:45,600 --> 01:18:47,040
that defines the ripple

1960
01:18:47,040 --> 01:18:48,560
routine protocol

1961
01:18:48,560 --> 01:18:51,440
and uh ripple is

1962
01:18:51,440 --> 01:18:54,640
a distance vector that's optimized

1963
01:18:54,640 --> 01:18:57,280
for a mesh that is

1964
01:18:57,280 --> 01:18:59,840
using one or several routes

1965
01:18:59,840 --> 01:19:01,600
to reach the outside so most of the

1966
01:19:01,600 --> 01:19:03,840
traffic is supposed to be

1967
01:19:03,840 --> 01:19:06,960
from that route or to that route

1968
01:19:06,960 --> 01:19:09,840
and this is designed to operate in a

1969
01:19:09,840 --> 01:19:11,840
constrained network low power llc

1970
01:19:11,840 --> 01:19:12,880
network

1971
01:19:12,880 --> 01:19:15,920
so we we did extensive optimizations to

1972
01:19:15,920 --> 01:19:19,360
limit the knowledge of topology

1973
01:19:19,360 --> 01:19:21,600
and the routes and address that that you

1974
01:19:21,600 --> 01:19:23,760
need to have inside the network

1975
01:19:23,760 --> 01:19:25,199
and for that

1976
01:19:25,199 --> 01:19:27,600
uh basically what we are doing is we are

1977
01:19:27,600 --> 01:19:29,040
uh

1978
01:19:29,040 --> 01:19:31,199
routing mostly from the perspective of

1979
01:19:31,199 --> 01:19:32,560
the root

1980
01:19:32,560 --> 01:19:34,560
so think about a distance vector but

1981
01:19:34,560 --> 01:19:37,040
instead of doing any to any you will

1982
01:19:37,040 --> 01:19:38,080
do

1983
01:19:38,080 --> 01:19:39,040
root

1984
01:19:39,040 --> 01:19:40,960
20

1985
01:19:40,960 --> 01:19:42,239
and for that the first thing that

1986
01:19:42,239 --> 01:19:44,400
happens is you you build

1987
01:19:44,400 --> 01:19:46,560
a tree which is not really a tree it's a

1988
01:19:46,560 --> 01:19:49,440
directly a cyclic graph

1989
01:19:49,440 --> 01:19:51,760
that is rooted at

1990
01:19:51,760 --> 01:19:54,000
the root and that basically points the

1991
01:19:54,000 --> 01:19:56,400
destination of that geodag is the root

1992
01:19:56,400 --> 01:19:58,719
so that gives you a loopless path for

1993
01:19:58,719 --> 01:20:01,199
any node for the default routing if you

1994
01:20:01,199 --> 01:20:03,040
just want to do collection that's enough

1995
01:20:03,040 --> 01:20:04,800
and and you're dead

1996
01:20:04,800 --> 01:20:07,600
if you want to be able to route down

1997
01:20:07,600 --> 01:20:10,400
this geodac towards the devices

1998
01:20:10,400 --> 01:20:11,600
then

1999
01:20:11,600 --> 01:20:13,280
you will have to establish the watts

2000
01:20:13,280 --> 01:20:14,159
path

2001
01:20:14,159 --> 01:20:16,560
and for that you have two modes one is

2002
01:20:16,560 --> 01:20:18,239
what we call storing mode and the other

2003
01:20:18,239 --> 01:20:20,159
one is non-storing mode so in

2004
01:20:20,159 --> 01:20:23,280
non-storing mode basically the each node

2005
01:20:23,280 --> 01:20:26,320
advertises its potential parrots so

2006
01:20:26,320 --> 01:20:27,920
since it's a deodorant it's not just one

2007
01:20:27,920 --> 01:20:29,920
parent it's multiple parents so

2008
01:20:29,920 --> 01:20:32,080
advertise its parents to the roots so

2009
01:20:32,080 --> 01:20:34,639
each note says i'm here and my potential

2010
01:20:34,639 --> 01:20:36,800
parents have those guys and with this

2011
01:20:36,800 --> 01:20:38,960
the root is capable of rebuilding the

2012
01:20:38,960 --> 01:20:41,840
whole structure of the geoduck in memory

2013
01:20:41,840 --> 01:20:43,679
and then use that for source routing so

2014
01:20:43,679 --> 01:20:45,840
that's that's the non-storing mode

2015
01:20:45,840 --> 01:20:48,719
in storing mode you will use this duo

2016
01:20:48,719 --> 01:20:50,960
dag and basically tell your potential

2017
01:20:50,960 --> 01:20:52,880
parents about your addresses and

2018
01:20:52,880 --> 01:20:54,239
recursively

2019
01:20:54,239 --> 01:20:55,920
the potential parents will tell their

2020
01:20:55,920 --> 01:20:58,320
own addresses plus all their children to

2021
01:20:58,320 --> 01:21:00,800
to the to the grandparents etc

2022
01:21:00,800 --> 01:21:02,960
so so you you end up

2023
01:21:02,960 --> 01:21:04,080
knowing

2024
01:21:04,080 --> 01:21:05,679
every route

2025
01:21:05,679 --> 01:21:08,159
downwards and using only the default

2026
01:21:08,159 --> 01:21:10,400
route upwards so that that's the very

2027
01:21:10,400 --> 01:21:14,080
basic of of ripple so it is anisotropic

2028
01:21:14,080 --> 01:21:17,040
it has a sense of up and down which was

2029
01:21:17,040 --> 01:21:19,760
inherited by rift basically to extend

2030
01:21:19,760 --> 01:21:22,080
uh the model to multiple roots and

2031
01:21:22,080 --> 01:21:24,239
basically the top of fabric and left is

2032
01:21:24,239 --> 01:21:27,199
is like a root but you have many of them

2033
01:21:27,199 --> 01:21:30,639
um what else we have uh we have extended

2034
01:21:30,639 --> 01:21:34,159
ripple for a neodv model

2035
01:21:34,159 --> 01:21:37,600
and for a centralized routing model so a

2036
01:21:37,600 --> 01:21:39,679
lot of what you've seen in

2037
01:21:39,679 --> 01:21:41,040
donald's

2038
01:21:41,040 --> 01:21:43,520
slides you know the the tree that that's

2039
01:21:43,520 --> 01:21:45,600
possibility or iodv that's a possibility

2040
01:21:45,600 --> 01:21:47,120
we have we have pretty much the same

2041
01:21:47,120 --> 01:21:48,320
thing

2042
01:21:48,320 --> 01:21:50,639
um

2043
01:21:50,639 --> 01:21:52,960
so that's the basic of it and uh we have

2044
01:21:52,960 --> 01:21:54,480
different modes of operation in

2045
01:21:54,480 --> 01:21:56,159
different instances i need to talk about

2046
01:21:56,159 --> 01:21:58,719
that a little so if you basically want

2047
01:21:58,719 --> 01:22:00,800
to make different optimization or or

2048
01:22:00,800 --> 01:22:03,760
build different dags then ripple allows

2049
01:22:03,760 --> 01:22:07,760
you to to build multiple of those geodex

2050
01:22:07,760 --> 01:22:10,000
and each one will that the node

2051
01:22:10,000 --> 01:22:12,400
participates to will translate into a

2052
01:22:12,400 --> 01:22:13,760
different verb

2053
01:22:13,760 --> 01:22:15,600
so we need to signal in the packet which

2054
01:22:15,600 --> 01:22:18,080
verb which routing table you're using

2055
01:22:18,080 --> 01:22:19,840
which corresponds to the ripple instance

2056
01:22:19,840 --> 01:22:21,920
that installed that route so we have the

2057
01:22:21,920 --> 01:22:23,840
hub by hub

2058
01:22:23,840 --> 01:22:25,840
option so it's not there by operating

2059
01:22:25,840 --> 01:22:28,000
here but we have a hub by hub option

2060
01:22:28,000 --> 01:22:30,639
in the packets to signal which ripple

2061
01:22:30,639 --> 01:22:32,480
instance we are using so it's an

2062
01:22:32,480 --> 01:22:34,239
alternative like of source destination

2063
01:22:34,239 --> 01:22:37,040
routing to go to a particular route if

2064
01:22:37,040 --> 01:22:39,280
if you have multiple if your monthly

2065
01:22:39,280 --> 01:22:40,320
home

2066
01:22:40,320 --> 01:22:42,639
you can build one instance per exit

2067
01:22:42,639 --> 01:22:44,080
point and

2068
01:22:44,080 --> 01:22:45,760
then you route along that instance and

2069
01:22:45,760 --> 01:22:48,000
you will exit the the expected place in

2070
01:22:48,000 --> 01:22:50,239
the network

2071
01:22:50,239 --> 01:22:54,080
so the one the mode of operation uh

2072
01:22:54,080 --> 01:22:56,320
one is uh non-starting mode mode

2073
01:22:56,320 --> 01:22:58,560
operation two historic mode model

2074
01:22:58,560 --> 01:23:01,040
profession three mode three is storing

2075
01:23:01,040 --> 01:23:04,639
mode with multicast what it means is

2076
01:23:04,639 --> 01:23:06,960
um inside the geodec there is what we

2077
01:23:06,960 --> 01:23:08,639
call the preferred parent tree and we

2078
01:23:08,639 --> 01:23:10,480
use that tree as the multicast tree

2079
01:23:10,480 --> 01:23:11,760
basically

2080
01:23:11,760 --> 01:23:12,639
so

2081
01:23:12,639 --> 01:23:14,719
the leaves inject

2082
01:23:14,719 --> 01:23:16,880
their multicast addresses

2083
01:23:16,880 --> 01:23:19,679
as they would inject any cast address or

2084
01:23:19,679 --> 01:23:21,760
unicast addresses it's just that the

2085
01:23:21,760 --> 01:23:24,239
parent instead of keeping the freshest

2086
01:23:24,239 --> 01:23:25,120
one

2087
01:23:25,120 --> 01:23:27,600
using what we call the past seconds

2088
01:23:27,600 --> 01:23:30,320
um that's how we do mobility in ripple

2089
01:23:30,320 --> 01:23:34,159
uh instead we we just keep them all and

2090
01:23:34,159 --> 01:23:35,920
let the lifetime expire

2091
01:23:35,920 --> 01:23:38,480
and as we keep them all then we

2092
01:23:38,480 --> 01:23:39,760
basically

2093
01:23:39,760 --> 01:23:42,400
unicast copy typically but we could also

2094
01:23:42,400 --> 01:23:43,840
broadcast copy

2095
01:23:43,840 --> 01:23:46,320
a packet going down the tree to every

2096
01:23:46,320 --> 01:23:48,400
every child that's interested

2097
01:23:48,400 --> 01:23:50,880
so compared to what was said before it's

2098
01:23:50,880 --> 01:23:53,360
not a flood right we still register the

2099
01:23:53,360 --> 01:23:55,199
multicast addresses

2100
01:23:55,199 --> 01:23:58,239
they are injected uh and aggregated as

2101
01:23:58,239 --> 01:24:01,199
they go up the tree us in traditional

2102
01:24:01,199 --> 01:24:04,800
space and uh they are the packets are

2103
01:24:04,800 --> 01:24:07,040
then routed uh

2104
01:24:07,040 --> 01:24:09,600
basically down that path so you really

2105
01:24:09,600 --> 01:24:11,600
have to do the two traditional modes

2106
01:24:11,600 --> 01:24:14,320
where uh either you you send a multicast

2107
01:24:14,320 --> 01:24:16,400
packet all the way to the root

2108
01:24:16,400 --> 01:24:18,480
and then it will go down the tree in

2109
01:24:18,480 --> 01:24:20,080
which case you don't have to have this

2110
01:24:20,080 --> 01:24:22,960
duplicate elimination prime

2111
01:24:22,960 --> 01:24:26,159
or you can optimize and say let me pass

2112
01:24:26,159 --> 01:24:27,280
it to

2113
01:24:27,280 --> 01:24:29,440
when it's when it's sourced anywhere in

2114
01:24:29,440 --> 01:24:30,719
the tree you can always pass it to

2115
01:24:30,719 --> 01:24:32,320
everybody but the one that passed it to

2116
01:24:32,320 --> 01:24:33,360
you

2117
01:24:33,360 --> 01:24:35,840
which which is an optimization but then

2118
01:24:35,840 --> 01:24:38,000
you need to be able to not pass it back

2119
01:24:38,000 --> 01:24:39,600
to the node that passed it to you the

2120
01:24:39,600 --> 01:24:40,880
first place

2121
01:24:40,880 --> 01:24:42,960
so so the the two models the two folding

2122
01:24:42,960 --> 01:24:44,560
models are available

2123
01:24:44,560 --> 01:24:46,159
uh if you don't want to have to care

2124
01:24:46,159 --> 01:24:48,560
about where you receive this packet or

2125
01:24:48,560 --> 01:24:50,560
if you already received it then

2126
01:24:50,560 --> 01:24:52,639
basically yes you can leverage the tree

2127
01:24:52,639 --> 01:24:54,400
and and pass the packet to the root and

2128
01:24:54,400 --> 01:24:56,960
let the the packet go down down that

2129
01:24:56,960 --> 01:24:59,360
tree

2130
01:24:59,360 --> 01:25:01,679
um next slide please oh no it's me now

2131
01:25:01,679 --> 01:25:04,960
yes it's me you've got control

2132
01:25:07,040 --> 01:25:10,480
okay so um now that that was the the mob

2133
01:25:10,480 --> 01:25:12,960
screen report now the role has has done

2134
01:25:12,960 --> 01:25:14,239
another piece of work which is

2135
01:25:14,239 --> 01:25:15,840
completely independent and and

2136
01:25:15,840 --> 01:25:17,280
completely

2137
01:25:17,280 --> 01:25:20,880
um that doesn't need any form of of

2138
01:25:20,880 --> 01:25:23,280
geodac installed or anything so you have

2139
01:25:23,280 --> 01:25:25,280
a big crash and you need to to flood

2140
01:25:25,280 --> 01:25:26,639
some information

2141
01:25:26,639 --> 01:25:29,440
then meeple can be your friend so what

2142
01:25:29,440 --> 01:25:32,320
it does think again of a very large

2143
01:25:32,320 --> 01:25:34,800
network with many many nodes and and the

2144
01:25:34,800 --> 01:25:36,960
problem that you want to

2145
01:25:36,960 --> 01:25:38,639
the thing you want to avoid is every

2146
01:25:38,639 --> 01:25:40,800
node trying to relay this packet

2147
01:25:40,800 --> 01:25:43,199
so you basically want in another fashion

2148
01:25:43,199 --> 01:25:44,159
to

2149
01:25:44,159 --> 01:25:46,400
to create islands where one will stand

2150
01:25:46,400 --> 01:25:48,400
and the rest will receive and when

2151
01:25:48,400 --> 01:25:50,080
you're at the border of that island then

2152
01:25:50,080 --> 01:25:51,760
someone will stand again and that will

2153
01:25:51,760 --> 01:25:53,440
propagate that way

2154
01:25:53,440 --> 01:25:55,440
and so there is an algorithm which is

2155
01:25:55,440 --> 01:25:58,000
three core rfc 6206

2156
01:25:58,000 --> 01:26:00,000
which is used by ripple anyway to

2157
01:26:00,000 --> 01:26:01,920
console excessive flooding

2158
01:26:01,920 --> 01:26:05,199
and um which is there leveraged as the

2159
01:26:05,199 --> 01:26:06,880
main as the base of the multicast

2160
01:26:06,880 --> 01:26:09,840
operation basically what it does is

2161
01:26:09,840 --> 01:26:10,880
um

2162
01:26:10,880 --> 01:26:12,639
if there is an information that you want

2163
01:26:12,639 --> 01:26:14,960
to synchronize on every node a certain

2164
01:26:14,960 --> 01:26:17,520
knowledge also then packet

2165
01:26:17,520 --> 01:26:19,280
someone sends it

2166
01:26:19,280 --> 01:26:21,120
and and

2167
01:26:21,120 --> 01:26:23,920
everyone runs a timer and in a certain

2168
01:26:23,920 --> 01:26:25,760
portion of timer you just listen and the

2169
01:26:25,760 --> 01:26:27,840
second portion of the timer you have a

2170
01:26:27,840 --> 01:26:29,679
random piece where you still listen and

2171
01:26:29,679 --> 01:26:31,520
then you send but you only send if you

2172
01:26:31,520 --> 01:26:33,360
have not received more than a certain

2173
01:26:33,360 --> 01:26:35,280
constant number of packets

2174
01:26:35,280 --> 01:26:37,679
so if enough packets of this same

2175
01:26:37,679 --> 01:26:40,719
knowledge were transmitted around you

2176
01:26:40,719 --> 01:26:43,920
then basically you you assume that

2177
01:26:43,920 --> 01:26:46,159
everyone around you

2178
01:26:46,159 --> 01:26:47,840
had that packet and you don't need to

2179
01:26:47,840 --> 01:26:50,000
resend on the other hand if you did not

2180
01:26:50,000 --> 01:26:52,800
receive enough copies of this thing then

2181
01:26:52,800 --> 01:26:55,199
you will retransmit it

2182
01:26:55,199 --> 01:26:57,120
now the efficiency is

2183
01:26:57,120 --> 01:26:58,400
is what it is right you have no

2184
01:26:58,400 --> 01:27:01,120
guarantee that everyone will get it it's

2185
01:27:01,120 --> 01:27:02,719
a little bit

2186
01:27:02,719 --> 01:27:05,360
problematic at the edge of the network

2187
01:27:05,360 --> 01:27:07,760
um because you might receive many copies

2188
01:27:07,760 --> 01:27:09,600
from the inside of the network and there

2189
01:27:09,600 --> 01:27:11,440
might be path nodes

2190
01:27:11,440 --> 01:27:14,239
beyond you on the edge of the network

2191
01:27:14,239 --> 01:27:15,840
and just because you received enough

2192
01:27:15,840 --> 01:27:17,040
from one side doesn't mean that

2193
01:27:17,040 --> 01:27:19,120
everybody on the other side got it so

2194
01:27:19,120 --> 01:27:21,520
there are a few corner cases with it uh

2195
01:27:21,520 --> 01:27:23,760
it's not quite efficient but it's it's

2196
01:27:23,760 --> 01:27:25,840
much better than flooding in a very very

2197
01:27:25,840 --> 01:27:28,239
dense radio environment

2198
01:27:28,239 --> 01:27:30,080
next slide please oops it's still me

2199
01:27:30,080 --> 01:27:33,080
sorry

2200
01:27:33,120 --> 01:27:35,840
okay and then we've got uh extension

2201
01:27:35,840 --> 01:27:38,000
work for meepo but i won't spend time on

2202
01:27:38,000 --> 01:27:39,600
that one

2203
01:27:39,600 --> 01:27:40,400
um

2204
01:27:40,400 --> 01:27:43,840
the new work that we have started uh at

2205
01:27:43,840 --> 01:27:47,840
six lupine actually six low end and raw

2206
01:27:47,840 --> 01:27:48,880
is

2207
01:27:48,880 --> 01:27:50,719
based on

2208
01:27:50,719 --> 01:27:52,080
the fact that

2209
01:27:52,080 --> 01:27:54,239
most of the time we don't use the

2210
01:27:54,239 --> 01:27:56,159
storing mode and so we don't have this

2211
01:27:56,159 --> 01:27:57,600
tree

2212
01:27:57,600 --> 01:27:59,280
so we have also

2213
01:27:59,280 --> 01:28:01,280
designed something which leverage the

2214
01:28:01,280 --> 01:28:02,960
non-storing mode in non-storing mode

2215
01:28:02,960 --> 01:28:05,120
there is a source route by the root

2216
01:28:05,120 --> 01:28:06,719
and so what we'll do in that case is

2217
01:28:06,719 --> 01:28:09,040
we'll exploit the source route

2218
01:28:09,040 --> 01:28:10,560
basically the the

2219
01:28:10,560 --> 01:28:12,000
nodes use

2220
01:28:12,000 --> 01:28:14,080
the extensions that we've made to ipv6

2221
01:28:14,080 --> 01:28:16,400
network discovery to register unicast

2222
01:28:16,400 --> 01:28:18,239
address now we are also enabling the

2223
01:28:18,239 --> 01:28:21,520
registration of multicast address

2224
01:28:21,520 --> 01:28:22,880
which is

2225
01:28:22,880 --> 01:28:25,199
maybe of interest for you guys actually

2226
01:28:25,199 --> 01:28:27,360
because the first thing before you you

2227
01:28:27,360 --> 01:28:29,600
distribute uh

2228
01:28:29,600 --> 01:28:31,600
traffic is to know who the listeners are

2229
01:28:31,600 --> 01:28:34,560
and and mld is a poor model that is not

2230
01:28:34,560 --> 01:28:36,639
necessarily the one you want

2231
01:28:36,639 --> 01:28:38,560
you might want actually the devices to

2232
01:28:38,560 --> 01:28:40,239
register

2233
01:28:40,239 --> 01:28:42,560
the addresses that that they listen to

2234
01:28:42,560 --> 01:28:44,159
and that's the model we use in iot

2235
01:28:44,159 --> 01:28:46,000
because low power devices might not be

2236
01:28:46,000 --> 01:28:47,440
listening to

2237
01:28:47,440 --> 01:28:50,960
multicast queries from from dmld routers

2238
01:28:50,960 --> 01:28:52,639
so we want the devices to be able to

2239
01:28:52,639 --> 01:28:54,560
sleep and tell the routers hey i'm

2240
01:28:54,560 --> 01:28:56,719
interested in that multicast flow if

2241
01:28:56,719 --> 01:28:58,480
there is something that comes on that

2242
01:28:58,480 --> 01:29:01,520
flow well you know i i want it so uh

2243
01:29:01,520 --> 01:29:03,280
when i wake up i will come and see if

2244
01:29:03,280 --> 01:29:05,120
you've got one

2245
01:29:05,120 --> 01:29:08,239
so basically the the sleep proxy model

2246
01:29:08,239 --> 01:29:11,440
so so the the sixth version is always to

2247
01:29:11,440 --> 01:29:14,159
avoid having to do multicast and having

2248
01:29:14,159 --> 01:29:16,719
the design the the devices register the

2249
01:29:16,719 --> 01:29:19,040
unicast and now any cast and multicast

2250
01:29:19,040 --> 01:29:20,960
addresses they care about

2251
01:29:20,960 --> 01:29:22,719
and to make that work now the root will

2252
01:29:22,719 --> 01:29:25,199
do ingress replication so basically the

2253
01:29:25,199 --> 01:29:27,199
root will tunnel to every edge router

2254
01:29:27,199 --> 01:29:29,440
and the edge routers will distribute of

2255
01:29:29,440 --> 01:29:32,239
our unicast or multicast they are two

2256
01:29:32,239 --> 01:29:35,280
to the listeners

2257
01:29:35,280 --> 01:29:38,159
um since we talked about beer i will

2258
01:29:38,159 --> 01:29:39,760
speak a little bit more we have two

2259
01:29:39,760 --> 01:29:42,400
variations of the beer idea uh the

2260
01:29:42,400 --> 01:29:44,639
working group now for the lack of

2261
01:29:44,639 --> 01:29:47,040
interest this this work is pretty much

2262
01:29:47,040 --> 01:29:50,239
stalled doesn't mean it's abandoned

2263
01:29:50,239 --> 01:29:52,880
but it means that we

2264
01:29:52,880 --> 01:29:55,199
we did not get strength and interest and

2265
01:29:55,199 --> 01:29:56,400
and

2266
01:29:56,400 --> 01:29:59,520
consumers for the those work this piece

2267
01:29:59,520 --> 01:30:01,840
of work so one is constraint cast and

2268
01:30:01,840 --> 01:30:04,000
constraint cast uses bloom filters so

2269
01:30:04,000 --> 01:30:06,159
it's a bit like beer i see it as beer

2270
01:30:06,159 --> 01:30:08,320
family but it's not exactly beer

2271
01:30:08,320 --> 01:30:10,080
and with the bloom filter what you can

2272
01:30:10,080 --> 01:30:13,360
do is is encode in a bit map

2273
01:30:13,360 --> 01:30:14,159
not

2274
01:30:14,159 --> 01:30:16,000
the bit of the destination or something

2275
01:30:16,000 --> 01:30:19,040
like beer but more a few bits which

2276
01:30:19,040 --> 01:30:21,520
basically represent the azure use for an

2277
01:30:21,520 --> 01:30:23,520
address that you care about

2278
01:30:23,520 --> 01:30:26,159
so blooms are used for

2279
01:30:26,159 --> 01:30:28,800
finding if something is there basically

2280
01:30:28,800 --> 01:30:31,120
and if you have a match i'm not sure uh

2281
01:30:31,120 --> 01:30:32,719
it's there but if you don't have a match

2282
01:30:32,719 --> 01:30:34,400
you're sure it's not there

2283
01:30:34,400 --> 01:30:36,320
what it does is for each address for

2284
01:30:36,320 --> 01:30:37,920
instance that that you you have in the

2285
01:30:37,920 --> 01:30:41,040
network it will compute a

2286
01:30:41,040 --> 01:30:43,280
three four bit position using a function

2287
01:30:43,280 --> 01:30:44,639
hash functions

2288
01:30:44,639 --> 01:30:45,600
and then

2289
01:30:45,600 --> 01:30:47,040
to know everybody who's there you

2290
01:30:47,040 --> 01:30:49,120
basically or all those bits so now

2291
01:30:49,120 --> 01:30:51,440
you've got the map of everybody use here

2292
01:30:51,440 --> 01:30:52,960
now if you want to see if somebody is

2293
01:30:52,960 --> 01:30:56,159
here you take your ash's address and you

2294
01:30:56,159 --> 01:30:58,480
you see if all the bits of this ash are

2295
01:30:58,480 --> 01:31:00,719
present in the in the aggregate big map

2296
01:31:00,719 --> 01:31:02,480
if it is then there's a chance the guy

2297
01:31:02,480 --> 01:31:03,600
is not there

2298
01:31:03,600 --> 01:31:06,080
if it's not then you're sure

2299
01:31:06,080 --> 01:31:08,080
he is not there

2300
01:31:08,080 --> 01:31:10,320
so we can effectively leverage that for

2301
01:31:10,320 --> 01:31:12,080
routing and

2302
01:31:12,080 --> 01:31:14,880
the way c s you could do it for for

2303
01:31:14,880 --> 01:31:17,840
deciding the social path or to just find

2304
01:31:17,840 --> 01:31:19,440
the destinations

2305
01:31:19,440 --> 01:31:20,480
beer

2306
01:31:20,480 --> 01:31:22,080
classical beer

2307
01:31:22,080 --> 01:31:24,080
as bits for the destination so the bit

2308
01:31:24,080 --> 01:31:26,010
would say go that way

2309
01:31:26,010 --> 01:31:27,280
[Music]

2310
01:31:27,280 --> 01:31:30,080
brte actually will signal bits for the

2311
01:31:30,080 --> 01:31:31,440
hops

2312
01:31:31,440 --> 01:31:33,920
and so you can specify which route

2313
01:31:33,920 --> 01:31:35,440
you're going to take by following the

2314
01:31:35,440 --> 01:31:37,360
bits the bits are not the destination

2315
01:31:37,360 --> 01:31:39,840
the bits are the hops

2316
01:31:39,840 --> 01:31:41,120
c cast

2317
01:31:41,120 --> 01:31:44,400
has bloom for the hops

2318
01:31:44,400 --> 01:31:46,639
but it could have i think it would have

2319
01:31:46,639 --> 01:31:48,400
been optimized to to basically just

2320
01:31:48,400 --> 01:31:50,480
bloom filter the destinations

2321
01:31:50,480 --> 01:31:53,760
and uh so basically what you would do in

2322
01:31:53,760 --> 01:31:55,360
your case i don't think you're going to

2323
01:31:55,360 --> 01:31:57,600
use this but if you were to consider it

2324
01:31:57,600 --> 01:32:00,000
you would probably look at all

2325
01:32:00,000 --> 01:32:02,639
the subscribers to your multicast

2326
01:32:02,639 --> 01:32:05,920
and uh compute you know have the bits

2327
01:32:05,920 --> 01:32:07,440
for them and when when you have

2328
01:32:07,440 --> 01:32:08,880
something to distribute you basically

2329
01:32:08,880 --> 01:32:10,719
distribute it to the

2330
01:32:10,719 --> 01:32:12,560
uh the aggregate bloom filter of all

2331
01:32:12,560 --> 01:32:14,080
this destination and when you want to

2332
01:32:14,080 --> 01:32:16,159
forward that's what is done in this

2333
01:32:16,159 --> 01:32:18,159
draft you just match

2334
01:32:18,159 --> 01:32:20,080
the aggregate of your next stop to see

2335
01:32:20,080 --> 01:32:22,000
if all the bits that you want for to

2336
01:32:22,000 --> 01:32:23,679
asset and if they are then you fall to

2337
01:32:23,679 --> 01:32:25,280
him

2338
01:32:25,280 --> 01:32:27,760
um i'm not sure my expectation went that

2339
01:32:27,760 --> 01:32:29,679
great but think about using bloom filter

2340
01:32:29,679 --> 01:32:33,280
as opposed to to just exact bits in beer

2341
01:32:33,280 --> 01:32:35,120
the advantage of that

2342
01:32:35,120 --> 01:32:38,239
is that you're not limited drastically

2343
01:32:38,239 --> 01:32:41,920
by the exact size of your bitmap

2344
01:32:41,920 --> 01:32:44,239
like like effectively if you store more

2345
01:32:44,239 --> 01:32:47,600
stuff in your bloom filter then then

2346
01:32:47,600 --> 01:32:49,920
it's it's normal capacity then you will

2347
01:32:49,920 --> 01:32:52,480
have more false positives but you will

2348
01:32:52,480 --> 01:32:54,800
still rot you would just rot

2349
01:32:54,800 --> 01:32:56,560
down the graph a little bit too much

2350
01:32:56,560 --> 01:32:58,880
some copies and then you realize that

2351
01:32:58,880 --> 01:33:00,560
that effectively some of the bits were

2352
01:33:00,560 --> 01:33:02,000
coming from the left some from the right

2353
01:33:02,000 --> 01:33:04,719
so the mesh does not exist further down

2354
01:33:04,719 --> 01:33:05,440
but

2355
01:33:05,440 --> 01:33:08,800
that avoids this hard limitation of

2356
01:33:08,800 --> 01:33:10,880
what size did you use for your bitmap oh

2357
01:33:10,880 --> 01:33:14,639
i have one more node now i'm screwed

2358
01:33:14,800 --> 01:33:16,560
i'm almost done

2359
01:33:16,560 --> 01:33:18,880
okay so i'm almost done so the other

2360
01:33:18,880 --> 01:33:21,199
thing we have is effectively beer for

2361
01:33:21,199 --> 01:33:23,199
repo so then again

2362
01:33:23,199 --> 01:33:24,400
um

2363
01:33:24,400 --> 01:33:26,159
we have this tree right starting at the

2364
01:33:26,159 --> 01:33:27,679
root

2365
01:33:27,679 --> 01:33:29,280
and so

2366
01:33:29,280 --> 01:33:31,360
what we care about in repo is is

2367
01:33:31,360 --> 01:33:33,360
compression right we don't want to have

2368
01:33:33,360 --> 01:33:36,880
to to have a lot of state and a lot of

2369
01:33:36,880 --> 01:33:39,280
on big advertisements and what is very

2370
01:33:39,280 --> 01:33:41,600
cool with beer knowing that we have the

2371
01:33:41,600 --> 01:33:43,760
same promise everybody to assign bits

2372
01:33:43,760 --> 01:33:45,679
it's not so right we have same question

2373
01:33:45,679 --> 01:33:47,120
the bits must be assigned but say the

2374
01:33:47,120 --> 01:33:49,520
bits are assigned and we have

2375
01:33:49,520 --> 01:33:52,400
see it as a tree even if it's a diode

2376
01:33:52,400 --> 01:33:53,679
um

2377
01:33:53,679 --> 01:33:56,080
when instead of advertising your address

2378
01:33:56,080 --> 01:33:58,080
and all the address of your children to

2379
01:33:58,080 --> 01:34:00,239
your parent in storing mode

2380
01:34:00,239 --> 01:34:02,000
what you could do

2381
01:34:02,000 --> 01:34:03,199
is

2382
01:34:03,199 --> 01:34:05,520
send a single bitmap for you and your

2383
01:34:05,520 --> 01:34:07,440
children with all the bits that

2384
01:34:07,440 --> 01:34:10,000
represent you and your children set

2385
01:34:10,000 --> 01:34:12,320
so basically when you do that the parent

2386
01:34:12,320 --> 01:34:14,000
receives the bids for one child for

2387
01:34:14,000 --> 01:34:15,520
another child for another child what you

2388
01:34:15,520 --> 01:34:17,199
will do is it will or

2389
01:34:17,199 --> 01:34:19,440
the different bitmaps that he gets for

2390
01:34:19,440 --> 01:34:22,480
all his children and that odd

2391
01:34:22,480 --> 01:34:24,000
aggregate bitmap that's what he will

2392
01:34:24,000 --> 01:34:25,760
pass to his own parent

2393
01:34:25,760 --> 01:34:28,960
and as you go up the tree to the root

2394
01:34:28,960 --> 01:34:31,360
then at the end all the bits should be

2395
01:34:31,360 --> 01:34:34,080
set for for every destination and the

2396
01:34:34,080 --> 01:34:36,239
root knows that this bit is via this

2397
01:34:36,239 --> 01:34:38,400
particular children so every node will

2398
01:34:38,400 --> 01:34:41,360
keep the bitmap it got from its children

2399
01:34:41,360 --> 01:34:42,880
and now a packet that you want to

2400
01:34:42,880 --> 01:34:45,199
forward you will basically set the bits

2401
01:34:45,199 --> 01:34:47,440
that you want to reach and and it will

2402
01:34:47,440 --> 01:34:50,960
be ended with by each hop to all his

2403
01:34:50,960 --> 01:34:53,600
children and if one children matches

2404
01:34:53,600 --> 01:34:56,320
that mean you know the the the one of

2405
01:34:56,320 --> 01:34:58,320
the bits that that you care for

2406
01:34:58,320 --> 01:35:00,000
is effectively said then you forward to

2407
01:35:00,000 --> 01:35:02,080
that children to the chat so the cool

2408
01:35:02,080 --> 01:35:04,080
thing is instead of maintaining

2409
01:35:04,080 --> 01:35:06,719
uh in your database one and three for

2410
01:35:06,719 --> 01:35:08,960
every descendant for every ip address of

2411
01:35:08,960 --> 01:35:10,639
every destiny and down the tree you just

2412
01:35:10,639 --> 01:35:15,119
keep one bitmap for every direct child

2413
01:35:15,119 --> 01:35:17,760
and and you forward along the bitmap and

2414
01:35:17,760 --> 01:35:19,520
that's pretty much it that that's that's

2415
01:35:19,520 --> 01:35:23,440
all i had for you so i guess i'm okay

2416
01:35:23,440 --> 01:35:24,960
thank you

2417
01:35:24,960 --> 01:35:27,520
i really would want to go directly into

2418
01:35:27,520 --> 01:35:30,080
the discussion part otherwise we will

2419
01:35:30,080 --> 01:35:32,320
have no time for julius's presentation

2420
01:35:32,320 --> 01:35:34,719
on the end

2421
01:35:35,199 --> 01:35:37,360
so if you have questions

2422
01:35:37,360 --> 01:35:38,960
for a past call

2423
01:35:38,960 --> 01:35:40,719
specifically please take them to the

2424
01:35:40,719 --> 01:35:42,719
mailing list

2425
01:35:42,719 --> 01:35:46,000
or mailing lists

2426
01:35:47,520 --> 01:35:49,440
yeah so we have the the general

2427
01:35:49,440 --> 01:35:51,840
discussion part right now and i've given

2428
01:35:51,840 --> 01:35:53,920
15 minutes for that allowing 10 minutes

2429
01:35:53,920 --> 01:35:57,560
for julian's

2430
01:36:00,960 --> 01:36:03,760
anybody there we got everything if we

2431
01:36:03,760 --> 01:36:05,679
got everything in maybe we should go to

2432
01:36:05,679 --> 01:36:10,320
julian's presentation then

2433
01:36:10,320 --> 01:36:13,040
uh we've got about 20

2434
01:36:13,040 --> 01:36:17,440
just over 20 minutes left 24.

2435
01:36:17,679 --> 01:36:19,520
all right why don't you bring up

2436
01:36:19,520 --> 01:36:21,540
julius's

2437
01:36:21,540 --> 01:36:26,800
[Music]

2438
01:36:26,960 --> 01:36:28,880
do you want to do julius first in the

2439
01:36:28,880 --> 01:36:31,119
discussion at the end or yeah okay

2440
01:36:31,119 --> 01:36:32,800
that's fine we didn't have anybody

2441
01:36:32,800 --> 01:36:35,760
jumping up for that

2442
01:36:36,159 --> 01:36:37,360
oh okay

2443
01:36:37,360 --> 01:36:39,840
sorry we we had some online people well

2444
01:36:39,840 --> 01:36:41,600
let's do julian sits and then we'll do

2445
01:36:41,600 --> 01:36:44,000
the the discussion at the end okay as

2446
01:36:44,000 --> 01:36:45,040
you wish

2447
01:36:45,040 --> 01:36:49,280
okay they're not true for the confusion

2448
01:36:50,960 --> 01:36:53,520
so okay well the slides

2449
01:36:53,520 --> 01:36:56,719
are being put up i'm julius croblocheck

2450
01:36:56,719 --> 01:36:58,480
and uh

2451
01:36:58,480 --> 01:37:01,440
so i had nothing to say about i had

2452
01:37:01,440 --> 01:37:02,719
nothing interesting to say about

2453
01:37:02,719 --> 01:37:04,719
multicast so i asked

2454
01:37:04,719 --> 01:37:06,400
the chairs for the opportunity

2455
01:37:06,400 --> 01:37:07,920
to

2456
01:37:07,920 --> 01:37:09,040
to

2457
01:37:09,040 --> 01:37:11,280
show the monet group

2458
01:37:11,280 --> 01:37:13,440
whether what we have been doing recently

2459
01:37:13,440 --> 01:37:14,960
in the babel group

2460
01:37:14,960 --> 01:37:16,880
and well it was worth trying i was

2461
01:37:16,880 --> 01:37:18,480
expecting the chance to say no that's

2462
01:37:18,480 --> 01:37:20,239
off topic and to my great surprise they

2463
01:37:20,239 --> 01:37:22,159
said yes so thank you very much to the

2464
01:37:22,159 --> 01:37:24,960
chairs next please

2465
01:37:24,960 --> 01:37:28,000
yeah do you want control by the way

2466
01:37:28,000 --> 01:37:30,480
i'm fine

2467
01:37:32,239 --> 01:37:33,600
so

2468
01:37:33,600 --> 01:37:36,000
most of you hopefully have heard about

2469
01:37:36,000 --> 01:37:39,280
babel for those who haven't dabbled is a

2470
01:37:39,280 --> 01:37:41,360
traditional rooting protocol which

2471
01:37:41,360 --> 01:37:43,840
originally was designed for hybrid or

2472
01:37:43,840 --> 01:37:47,040
heterogeneous networks so i was seeing

2473
01:37:47,040 --> 01:37:49,360
at the time people struggling with

2474
01:37:49,360 --> 01:37:52,239
putting uh mesh networking protocols and

2475
01:37:52,239 --> 01:37:54,719
networks that were mostly wired so that

2476
01:37:54,719 --> 01:37:56,719
had a wired backbone with some meshy

2477
01:37:56,719 --> 01:37:58,159
bits at the edges

2478
01:37:58,159 --> 01:37:59,280
and that

2479
01:37:59,280 --> 01:38:01,520
did not necessarily work very well when

2480
01:38:01,520 --> 01:38:03,360
most of the network was traditionally

2481
01:38:03,360 --> 01:38:05,760
structured and so i tried to design a

2482
01:38:05,760 --> 01:38:07,520
protocol that

2483
01:38:07,520 --> 01:38:10,000
is a traditional routing protocol that

2484
01:38:10,000 --> 01:38:12,080
but that happens to deal well with the

2485
01:38:12,080 --> 01:38:13,280
meshes

2486
01:38:13,280 --> 01:38:16,519
next please

2487
01:38:17,520 --> 01:38:20,800
so babel became an its standard track

2488
01:38:20,800 --> 01:38:25,199
protocol in january 2021 about two years

2489
01:38:25,199 --> 01:38:27,199
later than i expected

2490
01:38:27,199 --> 01:38:29,199
that will be familiar to everyone here i

2491
01:38:29,199 --> 01:38:32,080
think and uh since then we've done a

2492
01:38:32,080 --> 01:38:34,239
number of useful extensions and a number

2493
01:38:34,239 --> 01:38:36,239
of useless extensions that we've

2494
01:38:36,239 --> 01:38:38,800
abandoned and i would like to quickly

2495
01:38:38,800 --> 01:38:39,920
mention four of them their

2496
01:38:39,920 --> 01:38:41,760
authentication source specific routing

2497
01:38:41,760 --> 01:38:45,679
v4 via v6 and rtt sensitive metrics

2498
01:38:45,679 --> 01:38:47,760
and i would like to point out that all

2499
01:38:47,760 --> 01:38:49,760
of those have two independent

2500
01:38:49,760 --> 01:38:51,920
implementations that they interoperate

2501
01:38:51,920 --> 01:38:53,520
to the extent possible with the base

2502
01:38:53,520 --> 01:38:54,719
protocol

2503
01:38:54,719 --> 01:38:56,719
and the important point we've been

2504
01:38:56,719 --> 01:38:58,719
trying to design protocol agnostic

2505
01:38:58,719 --> 01:38:59,920
extensions

2506
01:38:59,920 --> 01:39:02,239
they are implemented in babel but there

2507
01:39:02,239 --> 01:39:03,760
is nothing in principle that would

2508
01:39:03,760 --> 01:39:05,920
prevent them from being generalized to

2509
01:39:05,920 --> 01:39:08,080
other protocols and my goal here is to

2510
01:39:08,080 --> 01:39:10,320
have people steal our ideas thanks

2511
01:39:10,320 --> 01:39:13,320
please

2512
01:39:13,920 --> 01:39:16,800
so mac authentication we've done a

2513
01:39:16,800 --> 01:39:19,040
minimalistic and easy to implement

2514
01:39:19,040 --> 01:39:21,440
authentication protocol we have another

2515
01:39:21,440 --> 01:39:23,199
authentication protocol for when you

2516
01:39:23,199 --> 01:39:24,880
need more features

2517
01:39:24,880 --> 01:39:26,960
and what is original in this protocol is

2518
01:39:26,960 --> 01:39:29,119
that it is provably invulnerable to

2519
01:39:29,119 --> 01:39:31,119
replace so most of the authentication

2520
01:39:31,119 --> 01:39:32,719
protocols if you look for example at

2521
01:39:32,719 --> 01:39:35,840
ospf they do not deal with replay in the

2522
01:39:35,840 --> 01:39:38,400
general case then just rely on

2523
01:39:38,400 --> 01:39:40,800
properties at the rooting protocol

2524
01:39:40,800 --> 01:39:43,520
so that the replay attacks are not

2525
01:39:43,520 --> 01:39:44,719
useful

2526
01:39:44,719 --> 01:39:46,639
and that that makes reasoning about the

2527
01:39:46,639 --> 01:39:48,639
security properties uselessly

2528
01:39:48,639 --> 01:39:51,199
complicated here we are invulnerable to

2529
01:39:51,199 --> 01:39:52,800
replay and it was designed to be

2530
01:39:52,800 --> 01:39:55,360
implementable on plastic home routers it

2531
01:39:55,360 --> 01:39:57,199
doesn't require real-time clocks it

2532
01:39:57,199 --> 01:39:59,920
doesn't require persistent storage and

2533
01:39:59,920 --> 01:40:02,000
it does not depend on features of the

2534
01:40:02,000 --> 01:40:04,639
bevel protocol it is completely general

2535
01:40:04,639 --> 01:40:07,880
next please

2536
01:40:08,000 --> 01:40:10,239
source specific routing it's sometimes

2537
01:40:10,239 --> 01:40:13,520
called asdr for source address dependent

2538
01:40:13,520 --> 01:40:14,480
routing

2539
01:40:14,480 --> 01:40:16,239
is an extension that allows routing

2540
01:40:16,239 --> 01:40:18,000
packets depending on their source and it

2541
01:40:18,000 --> 01:40:19,520
allows a cheap form of network

2542
01:40:19,520 --> 01:40:21,360
multi-homing so you have your network is

2543
01:40:21,360 --> 01:40:23,840
connected to two isps and you want

2544
01:40:23,840 --> 01:40:26,560
packets to be directed to one isp or the

2545
01:40:26,560 --> 01:40:28,560
other isp depending

2546
01:40:28,560 --> 01:40:31,199
on their source address or in other

2547
01:40:31,199 --> 01:40:33,679
words the source node controls which

2548
01:40:33,679 --> 01:40:35,920
edge router is reached by using by

2549
01:40:35,920 --> 01:40:38,320
setting the source address of the packet

2550
01:40:38,320 --> 01:40:39,920
this requires kernel support but the

2551
01:40:39,920 --> 01:40:43,119
kernel support is in since linux 311 and

2552
01:40:43,119 --> 01:40:45,040
for best performance it requires health

2553
01:40:45,040 --> 01:40:47,600
changes but it does work without host

2554
01:40:47,600 --> 01:40:49,840
changes and again it's something so

2555
01:40:49,840 --> 01:40:52,000
that's something that would be very easy

2556
01:40:52,000 --> 01:40:55,119
to implement in something like osrb2

2557
01:40:55,119 --> 01:40:57,600
next please

2558
01:40:57,600 --> 01:40:59,199
okay that's the latest one the one i'm

2559
01:40:59,199 --> 01:41:01,040
currently excited about

2560
01:41:01,040 --> 01:41:04,480
it's v4 via v6 we call it v4 via v6

2561
01:41:04,480 --> 01:41:08,400
routing and the goal of that is to allow

2562
01:41:08,400 --> 01:41:12,880
routing ipv4 through ipv6 only nodes

2563
01:41:12,880 --> 01:41:15,760
so here on the right you have a bunch of

2564
01:41:15,760 --> 01:41:17,840
double stack nodes and some of those

2565
01:41:17,840 --> 01:41:20,239
nodes need to be sending

2566
01:41:20,239 --> 01:41:23,280
ipv ipv4 traffic but in the middle of

2567
01:41:23,280 --> 01:41:24,719
your network

2568
01:41:24,719 --> 01:41:26,159
your backbone

2569
01:41:26,159 --> 01:41:29,360
consists of ipv6 only nodes

2570
01:41:29,360 --> 01:41:32,480
well v4 via v6 allows sending the v4

2571
01:41:32,480 --> 01:41:35,199
traffic through the v6 nodes the go

2572
01:41:35,199 --> 01:41:36,880
being here to reduce the amount of

2573
01:41:36,880 --> 01:41:38,719
administrative overhead

2574
01:41:38,719 --> 01:41:41,119
and there is no translation there is no

2575
01:41:41,119 --> 01:41:43,840
tunneling there is no overhead

2576
01:41:43,840 --> 01:41:46,639
so usually i always try to work out what

2577
01:41:46,639 --> 01:41:49,280
are the trade-offs and in the case of v4

2578
01:41:49,280 --> 01:41:53,040
via v6 i cannot see any trade-offs

2579
01:41:53,040 --> 01:41:56,639
it's to me it looks just like magic

2580
01:41:56,639 --> 01:41:58,080
um

2581
01:41:58,080 --> 01:41:58,960
it's

2582
01:41:58,960 --> 01:42:01,199
so we've enabled by it by default

2583
01:42:01,199 --> 01:42:04,639
expecting our user base to complain it's

2584
01:42:04,639 --> 01:42:06,480
been deployed for a couple of months

2585
01:42:06,480 --> 01:42:08,480
nobody seems to be complaining we've had

2586
01:42:08,480 --> 01:42:10,159
some comments saying it's pretty cool to

2587
01:42:10,159 --> 01:42:12,239
have more roots but other than that

2588
01:42:12,239 --> 01:42:14,400
everything seems to work it does require

2589
01:42:14,400 --> 01:42:16,800
kernel changes the kernel changes for ip

2590
01:42:16,800 --> 01:42:19,920
were done in linux 5.2 and turkey hail

2591
01:42:19,920 --> 01:42:21,360
and jorgensen

2592
01:42:21,360 --> 01:42:23,840
uh implemented the changes for icmp and

2593
01:42:23,840 --> 01:42:26,480
linux 5.13 so the implementation will

2594
01:42:26,480 --> 01:42:29,360
disable it if your kernel is too old and

2595
01:42:29,360 --> 01:42:31,119
again that's something that's completely

2596
01:42:31,119 --> 01:42:33,600
protocol agnostic it has some very nice

2597
01:42:33,600 --> 01:42:35,360
features and can be generalized to other

2598
01:42:35,360 --> 01:42:38,799
roots and protocols next please

2599
01:42:39,600 --> 01:42:41,600
and finally that's something that i'm

2600
01:42:41,600 --> 01:42:44,719
feeling very ill at ease

2601
01:42:44,719 --> 01:42:48,320
with ronald has been pushing me to

2602
01:42:48,320 --> 01:42:49,920
push it forward

2603
01:42:49,920 --> 01:42:50,800
so

2604
01:42:50,800 --> 01:42:53,199
it's an extension that's extremely

2605
01:42:53,199 --> 01:42:56,239
useful it allows computing automatically

2606
01:42:56,239 --> 01:42:57,520
metrics

2607
01:42:57,520 --> 01:43:01,760
uh by looking at roots rtts and at the

2608
01:43:01,760 --> 01:43:04,320
same time it does not suffer with major

2609
01:43:04,320 --> 01:43:06,960
stability issues which is if you do rtt

2610
01:43:06,960 --> 01:43:08,239
naively

2611
01:43:08,239 --> 01:43:11,119
the problem is that i think that we've

2612
01:43:11,119 --> 01:43:13,280
i've been i'm very at ease with it we've

2613
01:43:13,280 --> 01:43:16,320
done a lot of experimentation it's works

2614
01:43:16,320 --> 01:43:18,159
surprisingly well

2615
01:43:18,159 --> 01:43:19,760
and the problem is that we don't

2616
01:43:19,760 --> 01:43:22,480
understand why it works

2617
01:43:22,480 --> 01:43:26,080
and so that makes writing down the draft

2618
01:43:26,080 --> 01:43:27,920
very difficult

2619
01:43:27,920 --> 01:43:28,719
uh

2620
01:43:28,719 --> 01:43:31,119
so the draft has been adopted but it's

2621
01:43:31,119 --> 01:43:33,360
been in a state in which i don't manage

2622
01:43:33,360 --> 01:43:35,440
to finish it for a long time

2623
01:43:35,440 --> 01:43:38,080
it's widely deployed in production

2624
01:43:38,080 --> 01:43:41,360
because it is extremely useful

2625
01:43:41,360 --> 01:43:43,679
and um

2626
01:43:43,679 --> 01:43:46,639
the fact that the draft is not ready yet

2627
01:43:46,639 --> 01:43:48,800
didn't prevent a completely independent

2628
01:43:48,800 --> 01:43:51,040
implementation again by turkey hail and

2629
01:43:51,040 --> 01:43:53,600
jergensen in bird

2630
01:43:53,600 --> 01:43:56,080
it is not quite protocol agnostic it

2631
01:43:56,080 --> 01:43:58,080
would need some significant tweaks to be

2632
01:43:58,080 --> 01:44:00,560
made to work well with a protocol that

2633
01:44:00,560 --> 01:44:03,119
has different dynamics from babel next

2634
01:44:03,119 --> 01:44:06,119
please

2635
01:44:06,159 --> 01:44:06,880
well

2636
01:44:06,880 --> 01:44:08,719
okay so uh

2637
01:44:08,719 --> 01:44:11,760
we have implementations of at least four

2638
01:44:11,760 --> 01:44:14,320
useful extensions that are deployed in

2639
01:44:14,320 --> 01:44:16,880
production and that are mostly protocol

2640
01:44:16,880 --> 01:44:18,000
agnostic

2641
01:44:18,000 --> 01:44:21,040
you should consider stealing the ideas

2642
01:44:21,040 --> 01:44:23,280
behind them for your favorite routine

2643
01:44:23,280 --> 01:44:25,920
protocol i promise we won't get offended

2644
01:44:25,920 --> 01:44:27,920
to the upper contrary we'll take it as a

2645
01:44:27,920 --> 01:44:32,400
compliment thank you for your attention

2646
01:44:32,560 --> 01:44:34,480
thank you julius one quick question from

2647
01:44:34,480 --> 01:44:36,879
annie

2648
01:44:42,400 --> 01:44:44,799
henning

2649
01:44:46,239 --> 01:44:48,400
sorry forgot to activate the microphone

2650
01:44:48,400 --> 01:44:49,199
uh

2651
01:44:49,199 --> 01:44:51,040
for soft specific routing does it now

2652
01:44:51,040 --> 01:44:52,960
work with version four in the kernel i

2653
01:44:52,960 --> 01:44:55,040
remember when i stole the idea years ago

2654
01:44:55,040 --> 01:44:57,440
for my oldest r version two it was only

2655
01:44:57,440 --> 01:44:59,840
version six in the kernel

2656
01:44:59,840 --> 01:45:02,400
no it's version six only and the

2657
01:45:02,400 --> 01:45:06,480
implementation that simulates it with

2658
01:45:06,480 --> 01:45:09,199
policy routing has been removed from the

2659
01:45:09,199 --> 01:45:11,040
implementation

2660
01:45:11,040 --> 01:45:14,000
nobody um in order to do multi-homing

2661
01:45:14,000 --> 01:45:16,480
cheat multi-homing with ipv4 people just

2662
01:45:16,480 --> 01:45:17,600
not

2663
01:45:17,600 --> 01:45:20,320
okay so nobody seemed to be interested

2664
01:45:20,320 --> 01:45:23,360
and we we haven't pushed it because the

2665
01:45:23,360 --> 01:45:26,800
users were not interested yeah version 4

2666
01:45:26,800 --> 01:45:29,600
version 4 destination with version 6

2667
01:45:29,600 --> 01:45:31,920
next top if i read your description

2668
01:45:31,920 --> 01:45:36,320
correctly that's a different extension

2669
01:45:39,199 --> 01:45:43,040
that's what the e4 v6 does let's go okay

2670
01:45:43,040 --> 01:45:46,560
that's it thank you

2671
01:45:54,880 --> 01:45:57,040
all right so now

2672
01:45:57,040 --> 01:45:58,710
so now we have the general discussion

2673
01:45:58,710 --> 01:46:01,789
[Music]

2674
01:46:01,840 --> 01:46:03,840
so people that were online and in the

2675
01:46:03,840 --> 01:46:06,080
queue

2676
01:46:06,560 --> 01:46:10,040
now's your time

2677
01:46:13,199 --> 01:46:16,239
uh dublin potter again um

2678
01:46:16,239 --> 01:46:19,040
this actually a little bit ties into the

2679
01:46:19,040 --> 01:46:22,080
the babel presentation but also beer for

2680
01:46:22,080 --> 01:46:25,199
multicasting and mayonnaise

2681
01:46:25,199 --> 01:46:28,000
the hardest problem that i i see which

2682
01:46:28,000 --> 01:46:30,159
i've already noted is assigning the the

2683
01:46:30,159 --> 01:46:32,880
identifiers for using beer

2684
01:46:32,880 --> 01:46:35,040
and i would like to note two things

2685
01:46:35,040 --> 01:46:37,520
about solving that um

2686
01:46:37,520 --> 01:46:38,800
so either

2687
01:46:38,800 --> 01:46:42,880
the mesh becomes its own beer domain

2688
01:46:42,880 --> 01:46:43,920
which

2689
01:46:43,920 --> 01:46:46,320
is a perfectly fine thing to do even if

2690
01:46:46,320 --> 01:46:48,480
other parts of the network also use beer

2691
01:46:48,480 --> 01:46:50,320
there's no problem with having the edge

2692
01:46:50,320 --> 01:46:52,560
of the mesh just be a transition between

2693
01:46:52,560 --> 01:46:55,199
two different beer domains which

2694
01:46:55,199 --> 01:46:57,600
allows limiting the scope of the

2695
01:46:57,600 --> 01:46:59,440
assignment of identifiers for beer to

2696
01:46:59,440 --> 01:47:00,960
inside the mesh

2697
01:47:00,960 --> 01:47:03,440
but also

2698
01:47:03,440 --> 01:47:05,199
if the

2699
01:47:05,199 --> 01:47:07,119
signaling mechanisms for this can be

2700
01:47:07,119 --> 01:47:10,080
designed in a suitable protocol agnostic

2701
01:47:10,080 --> 01:47:10,880
way

2702
01:47:10,880 --> 01:47:12,880
then there's no problem with having

2703
01:47:12,880 --> 01:47:15,679
this work inside of babel to assign

2704
01:47:15,679 --> 01:47:18,400
identifiers inside of the mesh and then

2705
01:47:18,400 --> 01:47:22,080
transition into isis or ospf or bgp at

2706
01:47:22,080 --> 01:47:23,360
the boundary of the mesh and just

2707
01:47:23,360 --> 01:47:25,280
continue in the same kind of signaling

2708
01:47:25,280 --> 01:47:27,679
whether that's actually desirable and or

2709
01:47:27,679 --> 01:47:28,880
whether people are actually going to

2710
01:47:28,880 --> 01:47:31,840
implement it for bgp isis or spf is a

2711
01:47:31,840 --> 01:47:34,960
different question but both of those are

2712
01:47:34,960 --> 01:47:38,800
fundamentally viable approaches

2713
01:47:48,159 --> 01:47:51,199
we have talked quite a bit about uh that

2714
01:47:51,199 --> 01:47:52,719
we need something in the forwarding

2715
01:47:52,719 --> 01:47:55,440
plane dear talked about it because

2716
01:47:55,440 --> 01:47:58,320
it needs some uh bits and must

2717
01:47:58,320 --> 01:48:01,119
send it somewhere i talked about this

2718
01:48:01,119 --> 01:48:02,840
and someone mentioned

2719
01:48:02,840 --> 01:48:06,480
mpls has someone experienced how well

2720
01:48:06,480 --> 01:48:08,960
mpls works in

2721
01:48:08,960 --> 01:48:11,520
marned environments

2722
01:48:11,520 --> 01:48:12,560
because

2723
01:48:12,560 --> 01:48:13,520
does

2724
01:48:13,520 --> 01:48:17,760
wi-fi do most wi-fi chips supported well

2725
01:48:17,760 --> 01:48:19,840
because at least some of the more

2726
01:48:19,840 --> 01:48:22,719
esoteric radios that like to do marnet

2727
01:48:22,719 --> 01:48:24,000
thing

2728
01:48:24,000 --> 01:48:26,320
uh tend to be a little bit conservative

2729
01:48:26,320 --> 01:48:28,719
what they accept as

2730
01:48:28,719 --> 01:48:32,360
over the layer two

2731
01:48:34,480 --> 01:48:37,760
uh jeffrey here i my tool onsite tool

2732
01:48:37,760 --> 01:48:39,679
does not allow me to raise my hand or

2733
01:48:39,679 --> 01:48:40,960
something i couldn't find it so i'll

2734
01:48:40,960 --> 01:48:43,199
just

2735
01:48:44,880 --> 01:48:48,560
mpos is it was it it's probably

2736
01:48:48,560 --> 01:48:50,800
mentioned in the context of beer

2737
01:48:50,800 --> 01:48:53,600
following mgos however beer does not

2738
01:48:53,600 --> 01:48:57,119
require mpos at all it can work with

2739
01:48:57,119 --> 01:48:59,679
mpos it can work with any layer 2 header

2740
01:48:59,679 --> 01:49:01,920
or tunnel header so

2741
01:49:01,920 --> 01:49:03,360
you can use

2742
01:49:03,360 --> 01:49:05,440
beer without mpls at all

2743
01:49:05,440 --> 01:49:08,480
now also going back to the question of

2744
01:49:08,480 --> 01:49:11,119
rounding beer in a man 8

2745
01:49:11,119 --> 01:49:13,199
network itself

2746
01:49:13,199 --> 01:49:15,440
not at the ip layer

2747
01:49:15,440 --> 01:49:17,520
originally i was thinking it's

2748
01:49:17,520 --> 01:49:20,239
it works very well and then i realized

2749
01:49:20,239 --> 01:49:23,599
that in my network

2750
01:49:23,599 --> 01:49:24,719
it's

2751
01:49:24,719 --> 01:49:27,360
i assume it's mostly a radio network and

2752
01:49:27,360 --> 01:49:29,760
quite often you'll want to

2753
01:49:29,760 --> 01:49:32,080
reach multiple destinations over the

2754
01:49:32,080 --> 01:49:33,440
same radio

2755
01:49:33,440 --> 01:49:35,679
and in that case

2756
01:49:35,679 --> 01:49:38,880
beer itself may not be a very good fit

2757
01:49:38,880 --> 01:49:40,080
because

2758
01:49:40,080 --> 01:49:43,040
beer folding is labor-based it's you can

2759
01:49:43,040 --> 01:49:44,960
only send it one by one

2760
01:49:44,960 --> 01:49:47,760
but if you don't consider that part uh

2761
01:49:47,760 --> 01:49:48,960
then

2762
01:49:48,960 --> 01:49:50,560
the beer

2763
01:49:50,560 --> 01:49:53,599
itself the the architecture even though

2764
01:49:53,599 --> 01:49:57,040
it currently is based on the ip

2765
01:49:57,040 --> 01:50:00,400
layer uh it's for the it's over ipa

2766
01:50:00,400 --> 01:50:02,719
routing underneath but the beer

2767
01:50:02,719 --> 01:50:05,280
encapsulation and beer

2768
01:50:05,280 --> 01:50:06,960
folding algorithm

2769
01:50:06,960 --> 01:50:10,239
connect is actually not

2770
01:50:10,239 --> 01:50:13,040
limited to to ip to layer three you can

2771
01:50:13,040 --> 01:50:14,960
do it at layer two

2772
01:50:14,960 --> 01:50:17,440
all you need to do is map

2773
01:50:17,440 --> 01:50:19,679
the layer two station to

2774
01:50:19,679 --> 01:50:22,320
to a bit in the b string everything will

2775
01:50:22,320 --> 01:50:24,639
still work well that's very nice about

2776
01:50:24,639 --> 01:50:26,800
it

2777
01:50:29,119 --> 01:50:31,598
julius

2778
01:50:32,639 --> 01:50:35,040
yeah i'd like to come back to the point

2779
01:50:35,040 --> 01:50:36,960
that david made earlier

2780
01:50:36,960 --> 01:50:38,639
so

2781
01:50:38,639 --> 01:50:40,800
david made two two points that i fully

2782
01:50:40,800 --> 01:50:43,119
agree with so he said that the protocol

2783
01:50:43,119 --> 01:50:46,080
that work well for multicast or protocol

2784
01:50:46,080 --> 01:50:49,360
that use extra encapsulation

2785
01:50:49,360 --> 01:50:52,880
and that's basically the alternative to

2786
01:50:52,880 --> 01:50:55,840
encapsulation is to have duplicate

2787
01:50:55,840 --> 01:50:57,040
suppression

2788
01:50:57,040 --> 01:50:59,199
and if you have duplicate suppression

2789
01:50:59,199 --> 01:51:01,199
you're doing two things that are very

2790
01:51:01,199 --> 01:51:02,320
evil

2791
01:51:02,320 --> 01:51:05,760
one is that you break protocols that

2792
01:51:05,760 --> 01:51:08,239
resend the exact same packet

2793
01:51:08,239 --> 01:51:11,119
so there is one protocol that does that

2794
01:51:11,119 --> 01:51:13,360
and that you're using all the time

2795
01:51:13,360 --> 01:51:15,520
that's dhcp v4

2796
01:51:15,520 --> 01:51:18,239
so duplicate suppression needs to handle

2797
01:51:18,239 --> 01:51:19,679
especially

2798
01:51:19,679 --> 01:51:22,639
dcp v4 which is a horrible

2799
01:51:22,639 --> 01:51:24,480
layer violation

2800
01:51:24,480 --> 01:51:27,360
and um

2801
01:51:27,360 --> 01:51:29,280
and the other thing it does is that it

2802
01:51:29,280 --> 01:51:32,159
puts in potentially unbounded amounts of

2803
01:51:32,159 --> 01:51:34,960
states in the forward and plane if i'm

2804
01:51:34,960 --> 01:51:37,840
correct that's essentially what mpl does

2805
01:51:37,840 --> 01:51:40,320
so it looks like we have two things one

2806
01:51:40,320 --> 01:51:42,400
which we definitely dislike that's

2807
01:51:42,400 --> 01:51:44,480
duplicate suppression the other one

2808
01:51:44,480 --> 01:51:46,800
which is not very elegant

2809
01:51:46,800 --> 01:51:49,199
which is to encapsulate all of our

2810
01:51:49,199 --> 01:51:51,560
packets this is the beer isn't done in

2811
01:51:51,560 --> 01:51:53,840
802.11s and so on

2812
01:51:53,840 --> 01:51:56,719
and i'm wondering whether anyone that's

2813
01:51:56,719 --> 01:51:58,639
not i'm not expecting an answer now but

2814
01:51:58,639 --> 01:52:00,800
does anyone have any ideas is there a

2815
01:52:00,800 --> 01:52:03,040
third possibility that allows to exclude

2816
01:52:03,040 --> 01:52:04,960
both of those places if we find a third

2817
01:52:04,960 --> 01:52:07,360
possibility then we could have a nice

2818
01:52:07,360 --> 01:52:09,840
diagram with a triangle we'd call it

2819
01:52:09,840 --> 01:52:12,320
lampertur's triangle and david would be

2820
01:52:12,320 --> 01:52:14,880
famous so i'd like to encourage everyone

2821
01:52:14,880 --> 01:52:16,880
to think about is there a third

2822
01:52:16,880 --> 01:52:19,520
possibility

2823
01:52:21,119 --> 01:52:23,360
okay look go ahead

2824
01:52:23,360 --> 01:52:25,599
so a couple of comments first on mpls

2825
01:52:25,599 --> 01:52:27,440
you know mpls is a data plane it's also

2826
01:52:27,440 --> 01:52:29,199
a control plane

2827
01:52:29,199 --> 01:52:30,639
or has lots of control plane protocols

2828
01:52:30,639 --> 01:52:32,639
associated with it from a data plane

2829
01:52:32,639 --> 01:52:34,719
perspective it has a nice property of

2830
01:52:34,719 --> 01:52:35,599
being

2831
01:52:35,599 --> 01:52:38,400
these stackable labels so you know maybe

2832
01:52:38,400 --> 01:52:40,239
there's a way to use or abuse the data

2833
01:52:40,239 --> 01:52:42,800
plane for the layering that we talked

2834
01:52:42,800 --> 01:52:44,639
about earlier but i would i wouldn't try

2835
01:52:44,639 --> 01:52:46,239
to say that any of the

2836
01:52:46,239 --> 01:52:48,000
mpls control protocols are at all

2837
01:52:48,000 --> 01:52:50,080
appropriate for men a's and i don't

2838
01:52:50,080 --> 01:52:51,840
think anyone suggested that i didn't

2839
01:52:51,840 --> 01:52:53,199
hear that and

2840
01:52:53,199 --> 01:52:54,960
you know if someone suggested it i would

2841
01:52:54,960 --> 01:52:56,480
agree with the comment that it's not a

2842
01:52:56,480 --> 01:52:57,599
good idea

2843
01:52:57,599 --> 01:52:59,040
um

2844
01:52:59,040 --> 01:53:00,719
so that's on mpls the other comment was

2845
01:53:00,719 --> 01:53:03,040
actually in response to the the prior

2846
01:53:03,040 --> 01:53:05,679
uh to the third leg of the triangle to

2847
01:53:05,679 --> 01:53:08,480
the lampeter triangle is

2848
01:53:08,480 --> 01:53:12,239
one option is is to uh

2849
01:53:12,239 --> 01:53:14,800
leveraged ethernet header and there's a

2850
01:53:14,800 --> 01:53:16,560
lot of radios out there like wi-fi that

2851
01:53:16,560 --> 01:53:18,239
have an ethernet header and maybe we can

2852
01:53:18,239 --> 01:53:19,679
use and abuse

2853
01:53:19,679 --> 01:53:21,679
the addressing that's going on there by

2854
01:53:21,679 --> 01:53:24,239
and allow for not carrying extra bits on

2855
01:53:24,239 --> 01:53:27,679
the wire or not adding extra headers so

2856
01:53:27,679 --> 01:53:29,199
i'd like to just add that in as that

2857
01:53:29,199 --> 01:53:31,839
third leg

2858
01:53:33,440 --> 01:53:35,678
turn

2859
01:53:35,760 --> 01:53:38,159
i was already pointing out on the

2860
01:53:38,159 --> 01:53:40,800
on the mailing list that we did have a

2861
01:53:40,800 --> 01:53:42,159
lot more um

2862
01:53:42,159 --> 01:53:45,440
in-depth uh starting evaluation of using

2863
01:53:45,440 --> 01:53:48,320
beer beer or beer-like technologies in

2864
01:53:48,320 --> 01:53:51,280
role specifically where uh it the goal

2865
01:53:51,280 --> 01:53:53,280
was not only to do multicast with it but

2866
01:53:53,280 --> 01:53:55,440
also as an actually more efficient way

2867
01:53:55,440 --> 01:53:57,119
to steer the traffic hop by hop through

2868
01:53:57,119 --> 01:53:58,480
the network so that you don't have to

2869
01:53:58,480 --> 01:54:01,199
have the this expensive routing state in

2870
01:54:01,199 --> 01:54:03,840
a road network and i think the way i'm

2871
01:54:03,840 --> 01:54:05,760
intonating that may already show you

2872
01:54:05,760 --> 01:54:08,239
that there may be good differences to

2873
01:54:08,239 --> 01:54:09,679
other use cases where you have more

2874
01:54:09,679 --> 01:54:11,360
energy and where you love to have

2875
01:54:11,360 --> 01:54:14,160
routing and you would for example rather

2876
01:54:14,160 --> 01:54:15,920
[Music]

2877
01:54:15,920 --> 01:54:18,480
rely on them so one of the technologies

2878
01:54:18,480 --> 01:54:19,840
that we've done in the beer working

2879
01:54:19,840 --> 01:54:23,520
group also which is the north 48 is brte

2880
01:54:23,520 --> 01:54:25,119
and that is basically allowing you to

2881
01:54:25,119 --> 01:54:27,440
hop by hop steer the packet through the

2882
01:54:27,440 --> 01:54:29,199
network um

2883
01:54:29,199 --> 01:54:30,880
with um for

2884
01:54:30,880 --> 01:54:32,880
a steering solution probably the most

2885
01:54:32,880 --> 01:54:35,280
compact encoding um and that was exactly

2886
01:54:35,280 --> 01:54:39,040
the the brte um thing was uh what what

2887
01:54:39,040 --> 01:54:41,840
what we thought role would uh very much

2888
01:54:41,840 --> 01:54:44,159
benefit from as opposed to relying on

2889
01:54:44,159 --> 01:54:46,320
hop by hop using the igp routing

2890
01:54:46,320 --> 01:54:48,480
information so now obviously

2891
01:54:48,480 --> 01:54:50,560
that requires you to have a topology

2892
01:54:50,560 --> 01:54:52,960
information on uh the the router that

2893
01:54:52,960 --> 01:54:55,440
sends it um so that you can calculate uh

2894
01:54:55,440 --> 01:54:58,239
that path hop by hop there um like

2895
01:54:58,239 --> 01:55:00,480
we've done in mpls networks with the

2896
01:55:00,480 --> 01:55:03,520
rsvpt and eros so pretty much same thing

2897
01:55:03,520 --> 01:55:05,679
just a very much more compact

2898
01:55:05,679 --> 01:55:08,480
um encoded and there probably wouldn't

2899
01:55:08,480 --> 01:55:10,239
be something you want to do with barbell

2900
01:55:10,239 --> 01:55:12,000
and unless you

2901
01:55:12,000 --> 01:55:14,239
start disseminating topology information

2902
01:55:14,239 --> 01:55:16,719
sufficiently well like we do it in isis

2903
01:55:16,719 --> 01:55:20,000
or ospf i would assume normally you

2904
01:55:20,000 --> 01:55:22,320
don't have that information so

2905
01:55:22,320 --> 01:55:25,280
yeah i i'm rambling a lot of hopefully

2906
01:55:25,280 --> 01:55:27,440
funny details but i think it shows that

2907
01:55:27,440 --> 01:55:29,360
the solution

2908
01:55:29,360 --> 01:55:32,639
environment is is a lot wider and

2909
01:55:32,639 --> 01:55:36,080
it shows also that the different um

2910
01:55:36,080 --> 01:55:37,840
worlds that we have here with barbell

2911
01:55:37,840 --> 01:55:40,800
roll and many may not necessarily

2912
01:55:40,800 --> 01:55:41,599
need

2913
01:55:41,599 --> 01:55:44,239
one and the same option out of all these

2914
01:55:44,239 --> 01:55:46,880
multicast things that we have

2915
01:55:46,880 --> 01:55:49,360
in the end

2916
01:55:50,800 --> 01:55:52,080
rick rick

2917
01:55:52,080 --> 01:55:53,920
um very quick comment about putting

2918
01:55:53,920 --> 01:55:56,480
topology information out into mayonnaise

2919
01:55:56,480 --> 01:55:59,040
the churn for most many use cases is so

2920
01:55:59,040 --> 01:56:01,199
high that you just absorb all your

2921
01:56:01,199 --> 01:56:02,639
bandwidth keeping the topology

2922
01:56:02,639 --> 01:56:05,360
consistent so let's not drift off into

2923
01:56:05,360 --> 01:56:06,880
that just a quick comment about

2924
01:56:06,880 --> 01:56:09,199
duplication of packets or deduplication

2925
01:56:09,199 --> 01:56:11,360
of packets there are two reasons for

2926
01:56:11,360 --> 01:56:12,800
having duplicate

2927
01:56:12,800 --> 01:56:15,040
packets in your in your system one is

2928
01:56:15,040 --> 01:56:16,320
because

2929
01:56:16,320 --> 01:56:18,480
it's meant to be there dhcp v4 is a

2930
01:56:18,480 --> 01:56:20,239
classic example you know the application

2931
01:56:20,239 --> 01:56:21,199
there is saying actually i need

2932
01:56:21,199 --> 01:56:23,760
duplicate packets the other reason is

2933
01:56:23,760 --> 01:56:26,159
because your multicast system

2934
01:56:26,159 --> 01:56:27,280
can't

2935
01:56:27,280 --> 01:56:30,159
remove them or accidentally create them

2936
01:56:30,159 --> 01:56:31,440
and i think there needs to be a real

2937
01:56:31,440 --> 01:56:34,719
separation of these two things um

2938
01:56:34,719 --> 01:56:37,119
generic deduplication of packets within

2939
01:56:37,119 --> 01:56:38,560
a manet is not something we want to

2940
01:56:38,560 --> 01:56:39,520
pursue

2941
01:56:39,520 --> 01:56:42,159
smf due to the way it works creates

2942
01:56:42,159 --> 01:56:43,840
duplicates by accident and therefore

2943
01:56:43,840 --> 01:56:46,159
must clean them up other systems may not

2944
01:56:46,159 --> 01:56:47,599
create duplicates i just want to make

2945
01:56:47,599 --> 01:56:49,360
sure there's some clarity there before

2946
01:56:49,360 --> 01:56:52,000
we get fixated on deduplication and and

2947
01:56:52,000 --> 01:56:54,320
lou's point about using the frames using

2948
01:56:54,320 --> 01:56:56,719
the lower layer frames for

2949
01:56:56,719 --> 01:57:00,080
some sort of identity is a good plan

2950
01:57:00,080 --> 01:57:03,280
but layer two dependent

2951
01:57:08,239 --> 01:57:10,560
yeah i'm slightly confused that earlier

2952
01:57:10,560 --> 01:57:12,960
thank david lampotter again um

2953
01:57:12,960 --> 01:57:15,599
but i i have something other to well ask

2954
01:57:15,599 --> 01:57:17,119
here um

2955
01:57:17,119 --> 01:57:19,679
with beer being suggested in role

2956
01:57:19,679 --> 01:57:21,199
already um

2957
01:57:21,199 --> 01:57:23,599
i don't have the history on on why that

2958
01:57:23,599 --> 01:57:26,000
fizzled out or anything um if there's

2959
01:57:26,000 --> 01:57:28,000
any

2960
01:57:28,000 --> 01:57:30,080
and oh apparently it fizzled out didn't

2961
01:57:30,080 --> 01:57:32,000
do the pandemic if there's any actual

2962
01:57:32,000 --> 01:57:33,520
technical reasons we should totally dig

2963
01:57:33,520 --> 01:57:38,159
them up and not repeat the same mistakes

2964
01:57:38,159 --> 01:57:40,480
thank you

2965
01:57:44,639 --> 01:57:47,360
so so my my takeaway uh

2966
01:57:47,360 --> 01:57:51,280
is that beer is definitely something um

2967
01:57:51,280 --> 01:57:53,360
that we should look into

2968
01:57:53,360 --> 01:57:56,000
for monet maybe also for uh for role

2969
01:57:56,000 --> 01:57:57,120
where it was already

2970
01:57:57,120 --> 01:57:58,960
[Music]

2971
01:57:58,960 --> 01:58:00,880
on the to-do list

2972
01:58:00,880 --> 01:58:03,880
um

2973
01:58:06,000 --> 01:58:08,159
really something really important uh i i

2974
01:58:08,159 --> 01:58:10,400
closed the queue because

2975
01:58:10,400 --> 01:58:14,000
we're out of time uh actually um

2976
01:58:14,000 --> 01:58:15,920
so but do

2977
01:58:15,920 --> 01:58:18,800
do please continue this discussion on

2978
01:58:18,800 --> 01:58:21,280
the mailing list and the mailing lists i

2979
01:58:21,280 --> 01:58:22,960
would say

2980
01:58:22,960 --> 01:58:24,080
i mean

2981
01:58:24,080 --> 01:58:26,960
people don't like cross-posting but to

2982
01:58:26,960 --> 01:58:29,040
keep this crowd together

2983
01:58:29,040 --> 01:58:31,199
we

2984
01:58:31,280 --> 01:58:32,800
we

2985
01:58:32,800 --> 01:58:34,800
cannot escape that uh

2986
01:58:34,800 --> 01:58:37,520
i think for the moment

2987
01:58:37,520 --> 01:58:39,199
and uh

2988
01:58:39,199 --> 01:58:41,520
overall any

2989
01:58:41,520 --> 01:58:44,320
final words of wisdom from you

2990
01:58:44,320 --> 01:58:45,760
um

2991
01:58:45,760 --> 01:58:46,840
sure

2992
01:58:46,840 --> 01:58:49,679
uh so uh yes let's continue this

2993
01:58:49,679 --> 01:58:52,239
question i would hope that that

2994
01:58:52,239 --> 01:58:55,199
um there are commonalities uh we all

2995
01:58:55,199 --> 01:58:57,119
understand that uh lens and mesh

2996
01:58:57,119 --> 01:58:59,360
networks and uh networks and all that

2997
01:58:59,360 --> 01:59:00,960
stuff are different

2998
01:59:00,960 --> 01:59:02,880
and some have different needs

2999
01:59:02,880 --> 01:59:05,679
but what i would like to what i would

3000
01:59:05,679 --> 01:59:09,280
really love to see is some type of of

3001
01:59:09,280 --> 01:59:11,599
of more sharing right instead of going

3002
01:59:11,599 --> 01:59:12,960
back and saying oh we learned about

3003
01:59:12,960 --> 01:59:15,040
stuff let's keep working and roll or

3004
01:59:15,040 --> 01:59:16,639
dominate you know whatever something

3005
01:59:16,639 --> 01:59:18,719
else to try and keep the discussion

3006
01:59:18,719 --> 01:59:19,679
going

3007
01:59:19,679 --> 01:59:21,520
uh maybe that means

3008
01:59:21,520 --> 01:59:23,599
we meet more often like this because i

3009
01:59:23,599 --> 01:59:25,840
think this will be very productive

3010
01:59:25,840 --> 01:59:29,119
maybe it means we on purpose think about

3011
01:59:29,119 --> 01:59:30,560
any common

3012
01:59:30,560 --> 01:59:31,920
building blocks

3013
01:59:31,920 --> 01:59:34,080
that could be used

3014
01:59:34,080 --> 01:59:35,599
uh for different things

3015
01:59:35,599 --> 01:59:38,400
and we work on that in some place

3016
01:59:38,400 --> 01:59:39,760
um you know one of the working groups

3017
01:59:39,760 --> 01:59:40,960
whether the system working groups maybe

3018
01:59:40,960 --> 01:59:42,159
we spin up on your effort you know

3019
01:59:42,159 --> 01:59:44,639
whatever it is but if we can figure out

3020
01:59:44,639 --> 01:59:46,560
uh those building blocks then maybe we

3021
01:59:46,560 --> 01:59:48,639
can we can make more progress

3022
01:59:48,639 --> 01:59:50,719
than just you know going off and then

3023
01:59:50,719 --> 01:59:51,920
coming back

3024
01:59:51,920 --> 01:59:54,560
every other atf to share what we did and

3025
01:59:54,560 --> 01:59:56,800
um it's great for learning but you know

3026
01:59:56,800 --> 01:59:58,480
i would really like to

3027
01:59:58,480 --> 02:00:01,040
uh given the interest that we take

3028
02:00:01,040 --> 02:00:03,040
advantage of this and keep uh

3029
02:00:03,040 --> 02:00:04,320
building on it

3030
02:00:04,320 --> 02:00:06,000
but thank you everyone for participating

3031
02:00:06,000 --> 02:00:09,119
thank you sounds like maybe an interim

3032
02:00:09,119 --> 02:00:11,599
would be an idea but i will i will

3033
02:00:11,599 --> 02:00:14,960
discuss this with the other chairs

3034
02:00:16,560 --> 02:00:18,639
thank you all for your contributions

3035
02:00:18,639 --> 02:00:21,920
and enjoy the rest of your itf and

3036
02:00:21,920 --> 02:00:25,719
see you in london hopefully

3037
02:00:29,119 --> 02:00:31,280
any words from you

3038
02:00:31,280 --> 02:00:34,679
just thank you

3039
02:00:58,480 --> 02:01:02,119
take your slides down

