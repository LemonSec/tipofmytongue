1
00:00:08,880 --> 00:00:11,360
hello

2
00:00:15,679 --> 00:00:18,720
i have been disconnected

3
00:00:22,240 --> 00:00:25,119
anyone hearing me

4
00:00:35,440 --> 00:00:37,280
yeah we can hear you

5
00:00:37,280 --> 00:00:40,879
okay but we can't hear the room now

6
00:00:40,879 --> 00:00:42,960
so maybe we need to to wait for some

7
00:00:42,960 --> 00:00:44,399
some time

8
00:00:44,399 --> 00:00:46,160
yeah

9
00:00:46,160 --> 00:00:47,520
thank you

10
00:00:47,520 --> 00:00:48,480
uh

11
00:00:48,480 --> 00:00:51,199
they broke it all over again yeah

12
00:00:51,199 --> 00:00:53,440
all right

13
00:00:56,160 --> 00:00:57,520
hello bruno

14
00:00:57,520 --> 00:00:58,399
can you

15
00:00:58,399 --> 00:01:00,000
let will the system let you share your

16
00:01:00,000 --> 00:01:01,359
slides again

17
00:01:01,359 --> 00:01:03,120
uh yes

18
00:01:03,120 --> 00:01:05,040
we got disconnected from the room at

19
00:01:05,040 --> 00:01:05,840
least

20
00:01:05,840 --> 00:01:07,360
yep

21
00:01:07,360 --> 00:01:08,640
um

22
00:01:08,640 --> 00:01:12,159
it says your sharing is getting started

23
00:01:12,159 --> 00:01:14,799
uh waiting for it there

24
00:01:14,799 --> 00:01:16,400
you need to back up to the beginning we

25
00:01:16,400 --> 00:01:18,880
didn't hear and the room didn't hear any

26
00:01:18,880 --> 00:01:20,400
of what you said

27
00:01:20,400 --> 00:01:22,720
okay

28
00:01:22,720 --> 00:01:25,759
so this is um

29
00:01:25,759 --> 00:01:28,479
114 spring working group

30
00:01:28,479 --> 00:01:32,159
association is being recorded hopefully

31
00:01:32,159 --> 00:01:36,000
uh ghost audio and on video

32
00:01:36,240 --> 00:01:38,960
this is the usual noteworld we'll skip

33
00:01:38,960 --> 00:01:43,199
it for a second of time

34
00:01:44,240 --> 00:01:44,970
um

35
00:01:44,970 --> 00:01:46,399
[Music]

36
00:01:46,399 --> 00:01:48,159
i'll try to to be short

37
00:01:48,159 --> 00:01:50,399
this is a hybrid meetings so if you are

38
00:01:50,399 --> 00:01:51,840
in person

39
00:01:51,840 --> 00:01:56,079
you need to sign in uh using mytheco

40
00:01:56,079 --> 00:01:58,399
and you you need also to use mytheco to

41
00:01:58,399 --> 00:02:01,360
join the mic queue

42
00:02:01,360 --> 00:02:03,520
and very importantly you need to to wear

43
00:02:03,520 --> 00:02:05,840
mask anytime

44
00:02:05,840 --> 00:02:07,680
and if your remote

45
00:02:07,680 --> 00:02:09,679
nothing changed please make sure your

46
00:02:09,679 --> 00:02:12,319
audio and video are switched off

47
00:02:12,319 --> 00:02:14,480
to avoid noise

48
00:02:14,480 --> 00:02:14,980
and uh

49
00:02:14,980 --> 00:02:17,440
[Music]

50
00:02:17,440 --> 00:02:20,319
minutes they are collaborative shooting

51
00:02:20,319 --> 00:02:22,560
is the main minute taker but you can

52
00:02:22,560 --> 00:02:24,080
help

53
00:02:24,080 --> 00:02:26,080
especially if you if you have comments

54
00:02:26,080 --> 00:02:29,680
you can check your name and comments

55
00:02:29,680 --> 00:02:32,080
in live

56
00:02:32,400 --> 00:02:35,120
this is the agenda for for today

57
00:02:35,120 --> 00:02:37,519
we are full agenda

58
00:02:37,519 --> 00:02:41,360
so we're already 20 minutes late

59
00:02:41,360 --> 00:02:42,879
so please

60
00:02:42,879 --> 00:02:45,280
stick to your allocated time which

61
00:02:45,280 --> 00:02:47,040
include both

62
00:02:47,040 --> 00:02:49,519
presentations and comments

63
00:02:49,519 --> 00:02:51,360
otherwise we may

64
00:02:51,360 --> 00:02:54,560
we may catch your presentation

65
00:02:54,560 --> 00:02:56,400
if people have commented on their gender

66
00:02:56,400 --> 00:02:59,760
you can i can go to the mic

67
00:03:00,080 --> 00:03:02,159
the time of document status we have two

68
00:03:02,159 --> 00:03:04,959
documents publish limited to isg for

69
00:03:04,959 --> 00:03:06,560
publication

70
00:03:06,560 --> 00:03:09,360
first is the past segment in mps based

71
00:03:09,360 --> 00:03:11,280
segment routing network

72
00:03:11,280 --> 00:03:14,000
and second is the integration of network

73
00:03:14,000 --> 00:03:15,200
service better

74
00:03:15,200 --> 00:03:16,959
and segment routing for service

75
00:03:16,959 --> 00:03:19,840
functions training

76
00:03:20,159 --> 00:03:22,560
and finally we have one new rfc which is

77
00:03:22,560 --> 00:03:25,360
a segmented policy architecture it's a

78
00:03:25,360 --> 00:03:27,760
important milestone for for spring so

79
00:03:27,760 --> 00:03:29,920
thank you to the authors

80
00:03:29,920 --> 00:03:31,360
the working group

81
00:03:31,360 --> 00:03:36,319
the shepherd the eddy on the isg

82
00:03:36,400 --> 00:03:39,280
and that's all for the chairs

83
00:03:39,280 --> 00:03:43,040
we can now move to a christian

84
00:03:43,040 --> 00:03:47,640
or circuit style segmenting policies

85
00:03:51,200 --> 00:03:53,280
before we start just uh we've been asked

86
00:03:53,280 --> 00:03:55,200
to remind people that it is a

87
00:03:55,200 --> 00:03:57,680
requirement having masks on in the room

88
00:03:57,680 --> 00:04:00,640
so if you haven't got them on please do

89
00:04:00,640 --> 00:04:03,040
so thank you

90
00:04:03,040 --> 00:04:04,480
okay

91
00:04:04,480 --> 00:04:06,000
joel do you want me to share the slides

92
00:04:06,000 --> 00:04:08,400
so it's okay for you i'll share the

93
00:04:08,400 --> 00:04:12,120
slides right now

94
00:04:15,840 --> 00:04:17,519
bruno you need to release things and i

95
00:04:17,519 --> 00:04:21,478
will start sharing the slides

96
00:04:34,160 --> 00:04:36,880
okay our first presenter yes

97
00:04:36,880 --> 00:04:38,720
christian go ahead

98
00:04:38,720 --> 00:04:41,440
um i will give you

99
00:04:41,440 --> 00:04:44,160
you have slide control

100
00:04:44,160 --> 00:04:45,759
okay thank you

101
00:04:45,759 --> 00:04:47,440
uh hello everybody this is christian

102
00:04:47,440 --> 00:04:50,000
schmutzer i'm presenting uh as a

103
00:04:50,000 --> 00:04:51,919
representative of all the authors on the

104
00:04:51,919 --> 00:04:54,479
draft and i will be talking about the

105
00:04:54,479 --> 00:04:56,000
circuit style

106
00:04:56,000 --> 00:04:59,280
segment routing policies

107
00:04:59,520 --> 00:05:01,120
um

108
00:05:01,120 --> 00:05:03,680
sorry i'm not sure if i can actually

109
00:05:03,680 --> 00:05:06,720
advance the slides

110
00:05:08,320 --> 00:05:11,719
what i can't

111
00:05:12,600 --> 00:05:15,680
[Music]

112
00:05:15,680 --> 00:05:17,440
okay sorry

113
00:05:17,440 --> 00:05:19,680
we'll take control back and uh just just

114
00:05:19,680 --> 00:05:22,000
prompt us when you need to change slides

115
00:05:22,000 --> 00:05:25,000
sure

116
00:05:31,919 --> 00:05:34,160
okay okay so thanks

117
00:05:34,160 --> 00:05:36,560
the motivation for circuit cell segment

118
00:05:36,560 --> 00:05:39,600
routing policies is to allow operators

119
00:05:39,600 --> 00:05:42,160
to run a single network that not only

120
00:05:42,160 --> 00:05:44,720
carries what we call connection-less

121
00:05:44,720 --> 00:05:47,120
services which is classical ipvpn

122
00:05:47,120 --> 00:05:49,120
services or layer 2

123
00:05:49,120 --> 00:05:52,639
vpn services in conjunction with more

124
00:05:52,639 --> 00:05:54,400
transport oriented or connection

125
00:05:54,400 --> 00:05:56,639
oriented point of point services uh

126
00:05:56,639 --> 00:05:59,199
often called private lines or um you

127
00:05:59,199 --> 00:06:02,400
know in essence wise uh if you will

128
00:06:02,400 --> 00:06:03,199
um

129
00:06:03,199 --> 00:06:05,520
now what circuit style segment routing

130
00:06:05,520 --> 00:06:07,600
policies are adding on is from a

131
00:06:07,600 --> 00:06:09,360
underlay transport

132
00:06:09,360 --> 00:06:11,280
we addressing additional requirements

133
00:06:11,280 --> 00:06:13,520
first of all to have traffic engineered

134
00:06:13,520 --> 00:06:15,680
paths which are persistent meaning they

135
00:06:15,680 --> 00:06:18,560
are not changing because of traffic load

136
00:06:18,560 --> 00:06:20,800
or topology changes they only shall

137
00:06:20,800 --> 00:06:23,039
change when the operator is requesting

138
00:06:23,039 --> 00:06:24,720
the path to change

139
00:06:24,720 --> 00:06:26,240
we're looking at strict pain with

140
00:06:26,240 --> 00:06:28,160
commitments

141
00:06:28,160 --> 00:06:30,319
and end-to-end path protection to

142
00:06:30,319 --> 00:06:32,720
achieve you know very quick failure

143
00:06:32,720 --> 00:06:34,479
recovery and the famous sub 50

144
00:06:34,479 --> 00:06:36,400
millisecond target as well as

145
00:06:36,400 --> 00:06:37,680
restoration

146
00:06:37,680 --> 00:06:40,400
to handle multiple failures

147
00:06:40,400 --> 00:06:42,880
and along with that of course path oem

148
00:06:42,880 --> 00:06:44,479
which is very important to understand

149
00:06:44,479 --> 00:06:46,639
the liveness of a path and understand

150
00:06:46,639 --> 00:06:48,560
when somebody needs to switch

151
00:06:48,560 --> 00:06:51,120
next slide

152
00:06:54,960 --> 00:06:57,199
so how do we address those requirements

153
00:06:57,199 --> 00:06:58,560
and what are the characteristics of

154
00:06:58,560 --> 00:07:00,240
segment route circuit style segment

155
00:07:00,240 --> 00:07:01,680
routing policies

156
00:07:01,680 --> 00:07:03,520
first of all we have a centralized path

157
00:07:03,520 --> 00:07:05,919
computation element in the picture that

158
00:07:05,919 --> 00:07:10,000
is responsible to get the path requests

159
00:07:10,000 --> 00:07:11,759
and part of the path request is of

160
00:07:11,759 --> 00:07:14,080
course the requested bandwidth and the

161
00:07:14,080 --> 00:07:16,479
path computation element will make sure

162
00:07:16,479 --> 00:07:18,400
that we have bandwidth management for

163
00:07:18,400 --> 00:07:20,080
all the links and this is important

164
00:07:20,080 --> 00:07:21,680
because in a segment routing network you

165
00:07:21,680 --> 00:07:24,560
don't have any rsvp that normally would

166
00:07:24,560 --> 00:07:27,039
have done that job for us

167
00:07:27,039 --> 00:07:29,039
we're forming bi-directional constructs

168
00:07:29,039 --> 00:07:31,280
that which are co-routed by associating

169
00:07:31,280 --> 00:07:33,440
a forward and reverse segment routing

170
00:07:33,440 --> 00:07:35,440
policy together

171
00:07:35,440 --> 00:07:37,280
and the

172
00:07:37,280 --> 00:07:39,440
persistent paths

173
00:07:39,440 --> 00:07:40,560
we are

174
00:07:40,560 --> 00:07:43,599
what we are creating by using strict

175
00:07:43,599 --> 00:07:45,680
tops of a list of strict types of

176
00:07:45,680 --> 00:07:48,720
unprotected json specifics unprotected

177
00:07:48,720 --> 00:07:50,639
jssits are important because we have

178
00:07:50,639 --> 00:07:53,199
path protection and we don't want any ti

179
00:07:53,199 --> 00:07:55,599
lfa for example to kick in

180
00:07:55,599 --> 00:07:58,160
as mentioned the path computation

181
00:07:58,160 --> 00:08:00,800
element shall not reoptimize the path

182
00:08:00,800 --> 00:08:03,039
only when the operator is requesting

183
00:08:03,039 --> 00:08:04,560
that and that's a behavior that is

184
00:08:04,560 --> 00:08:06,879
commonly uh requested and known in the

185
00:08:06,879 --> 00:08:08,240
tdm world

186
00:08:08,240 --> 00:08:11,360
aka solid stage or otn

187
00:08:11,360 --> 00:08:14,240
uh we are using multiple candidate paths

188
00:08:14,240 --> 00:08:16,800
uh now we're going to program two of

189
00:08:16,800 --> 00:08:19,840
them to install um you know a

190
00:08:19,840 --> 00:08:21,440
protection scheme and there can be a

191
00:08:21,440 --> 00:08:24,080
third one if restoration is required as

192
00:08:24,080 --> 00:08:25,360
well

193
00:08:25,360 --> 00:08:27,440
and stamp is used to do loopback

194
00:08:27,440 --> 00:08:28,800
liveness

195
00:08:28,800 --> 00:08:31,360
detection or observation if you will and

196
00:08:31,360 --> 00:08:33,360
performance measurement

197
00:08:33,360 --> 00:08:35,919
next slide

198
00:08:38,719 --> 00:08:40,880
how are we creating uh circuit style

199
00:08:40,880 --> 00:08:43,039
segment rounding policies before we can

200
00:08:43,039 --> 00:08:45,519
create them a few uh words on the

201
00:08:45,519 --> 00:08:48,959
topology uh the topology is um you know

202
00:08:48,959 --> 00:08:50,720
every link has to be configured with

203
00:08:50,720 --> 00:08:53,440
unprotected adjacency sits

204
00:08:53,440 --> 00:08:55,120
and they should be persistent across

205
00:08:55,120 --> 00:08:57,040
router reloads which generally is done

206
00:08:57,040 --> 00:08:58,560
if you configure them manually and

207
00:08:58,560 --> 00:08:59,920
explicitly

208
00:08:59,920 --> 00:09:02,160
the topology will be known by the pce

209
00:09:02,160 --> 00:09:05,279
via igp or vgpls extensions

210
00:09:05,279 --> 00:09:06,959
the path computation element will have

211
00:09:06,959 --> 00:09:09,279
to ban with configured for uh that is

212
00:09:09,279 --> 00:09:11,120
available for all the circuit style

213
00:09:11,120 --> 00:09:12,560
segment routing policies for on each

214
00:09:12,560 --> 00:09:13,680
link

215
00:09:13,680 --> 00:09:15,200
and there are pair hop behavior

216
00:09:15,200 --> 00:09:16,720
guaranteed

217
00:09:16,720 --> 00:09:19,440
uh you know guarantees you know assumed

218
00:09:19,440 --> 00:09:21,360
or required so that the provision

219
00:09:21,360 --> 00:09:24,320
bandwidth on the link can be at all time

220
00:09:24,320 --> 00:09:26,399
assured to be available for circuit

221
00:09:26,399 --> 00:09:29,120
circuit style second route

222
00:09:29,120 --> 00:09:31,839
the endpoints of the policy um are

223
00:09:31,839 --> 00:09:34,560
acting as pcc and will delegate the path

224
00:09:34,560 --> 00:09:36,800
computation to the pce

225
00:09:36,800 --> 00:09:40,000
um the draft is outlining a bunch of um

226
00:09:40,000 --> 00:09:42,080
you know attributes or information that

227
00:09:42,080 --> 00:09:43,839
will be included in the

228
00:09:43,839 --> 00:09:46,320
candidate path request uh important is

229
00:09:46,320 --> 00:09:49,120
for example the the c bit in the

230
00:09:49,120 --> 00:09:51,360
bidirectional association object to a

231
00:09:51,360 --> 00:09:52,880
force co-routing

232
00:09:52,880 --> 00:09:54,480
we also have

233
00:09:54,480 --> 00:09:56,640
some um you know

234
00:09:56,640 --> 00:10:01,040
some bits in the lsb a object to uh um

235
00:10:01,040 --> 00:10:03,680
to enforce no local protection but there

236
00:10:03,680 --> 00:10:05,839
is a dedicated draft for that will cover

237
00:10:05,839 --> 00:10:06,800
that

238
00:10:06,800 --> 00:10:08,560
and it is being discussed in the pce

239
00:10:08,560 --> 00:10:10,720
working group um

240
00:10:10,720 --> 00:10:12,720
and we are using multiple candidates for

241
00:10:12,720 --> 00:10:14,480
protection i mentioned that

242
00:10:14,480 --> 00:10:16,959
the path computation element is uh is

243
00:10:16,959 --> 00:10:20,399
responsible for configuring or computing

244
00:10:20,399 --> 00:10:22,560
working in the protect path uh in a

245
00:10:22,560 --> 00:10:24,079
disjoint manner and we're using the

246
00:10:24,079 --> 00:10:26,720
disjoint association for that uh and so

247
00:10:26,720 --> 00:10:29,920
on so forth next slide

248
00:10:29,920 --> 00:10:33,240
next slide

249
00:10:38,079 --> 00:10:40,079
i'm going quite quick because i wanted

250
00:10:40,079 --> 00:10:42,240
to share the updates and the progress we

251
00:10:42,240 --> 00:10:44,640
made we have done our first presentation

252
00:10:44,640 --> 00:10:46,959
at iitf 113

253
00:10:46,959 --> 00:10:50,720
in the pc working group we got

254
00:10:50,720 --> 00:10:52,480
quite a lot of input in the meeting as

255
00:10:52,480 --> 00:10:54,240
well as after that

256
00:10:54,240 --> 00:10:55,279
and we

257
00:10:55,279 --> 00:10:57,120
received you know

258
00:10:57,120 --> 00:10:58,399
a lot of

259
00:10:58,399 --> 00:10:59,839
review comments which already got

260
00:10:59,839 --> 00:11:02,160
incorporated

261
00:11:02,160 --> 00:11:04,880
the document changes are mostly around

262
00:11:04,880 --> 00:11:06,720
clarifying the role of the pce and the

263
00:11:06,720 --> 00:11:08,480
stateful pc

264
00:11:08,480 --> 00:11:10,320
we added a section about how to deal

265
00:11:10,320 --> 00:11:12,480
with the maximum segment depth

266
00:11:12,480 --> 00:11:14,480
limitations that may arise

267
00:11:14,480 --> 00:11:17,279
and we overall cleaned up or reshuffled

268
00:11:17,279 --> 00:11:19,920
the the sections so that uh to to get a

269
00:11:19,920 --> 00:11:21,600
better structure and readability of the

270
00:11:21,600 --> 00:11:22,720
draft

271
00:11:22,720 --> 00:11:24,959
and speaking of the draft uh one of the

272
00:11:24,959 --> 00:11:27,680
feedback was that the draft is probably

273
00:11:27,680 --> 00:11:28,399
more

274
00:11:28,399 --> 00:11:30,320
uh better suited in the spring working

275
00:11:30,320 --> 00:11:31,680
group and that's why we renamed the

276
00:11:31,680 --> 00:11:32,880
spring working group and we're

277
00:11:32,880 --> 00:11:34,320
presenting it here

278
00:11:34,320 --> 00:11:37,200
in the final slide

279
00:11:38,320 --> 00:11:40,720
we would like to get more comments and

280
00:11:40,720 --> 00:11:43,760
and feedback this is always welcome um

281
00:11:43,760 --> 00:11:45,839
we think that we got already the

282
00:11:45,839 --> 00:11:47,440
document in a pretty good state and

283
00:11:47,440 --> 00:11:50,160
that's why we would uh suggest uh the

284
00:11:50,160 --> 00:11:52,560
the working group to uh to uh do an

285
00:11:52,560 --> 00:11:54,800
adoption call so that that this draft

286
00:11:54,800 --> 00:11:57,200
may be uh adopted by this working group

287
00:11:57,200 --> 00:11:59,839
thank you very much

288
00:12:00,720 --> 00:12:02,959
thanks christian uh nitsan you were on

289
00:12:02,959 --> 00:12:05,040
thecube but you dropped off um i don't

290
00:12:05,040 --> 00:12:06,079
know if you

291
00:12:06,079 --> 00:12:09,439
want to jump back on or whether

292
00:12:09,760 --> 00:12:13,120
do you have a question or not

293
00:12:13,920 --> 00:12:16,000
okay i'll assume not uh

294
00:12:16,000 --> 00:12:17,519
please go ahead

295
00:12:17,519 --> 00:12:21,600
oh wait a minute uh nitzan go ahead

296
00:12:22,560 --> 00:12:24,399
one issue is that

297
00:12:24,399 --> 00:12:27,360
i'm not sure about how do we ensure uh

298
00:12:27,360 --> 00:12:29,040
protection

299
00:12:29,040 --> 00:12:32,000
uh with resource allocation

300
00:12:32,000 --> 00:12:34,760
uh and um

301
00:12:34,760 --> 00:12:37,120
bidirectional thing i mean it seems to

302
00:12:37,120 --> 00:12:39,440
be addressed but i'm not sure exactly

303
00:12:39,440 --> 00:12:41,440
how

304
00:12:41,440 --> 00:12:44,160
uh i'd appreciate any elaboration on

305
00:12:44,160 --> 00:12:46,880
those issues

306
00:12:48,160 --> 00:12:50,959
so maybe to to cover the the um

307
00:12:50,959 --> 00:12:53,680
the core the bi-directional so we we're

308
00:12:53,680 --> 00:12:55,360
going to use the bi-directional

309
00:12:55,360 --> 00:12:57,600
association to signal from both end

310
00:12:57,600 --> 00:12:59,600
points to the pc that those two sr

311
00:12:59,600 --> 00:13:01,920
policies belong to together and then

312
00:13:01,920 --> 00:13:04,480
it's the the job of the pc to basically

313
00:13:04,480 --> 00:13:06,399
perform the path computation

314
00:13:06,399 --> 00:13:09,120
so that those both sr policies that are

315
00:13:09,120 --> 00:13:11,040
indicated to belong together are

316
00:13:11,040 --> 00:13:13,120
co-routed in a bi-direction are routed

317
00:13:13,120 --> 00:13:15,279
in a bi-directional and co-routed manner

318
00:13:15,279 --> 00:13:18,160
uh which i think is something that um

319
00:13:18,160 --> 00:13:20,560
um you know it's it's is already quite

320
00:13:20,560 --> 00:13:23,040
well defined with piece of extensions

321
00:13:23,040 --> 00:13:26,079
um the protection uh maybe i was going a

322
00:13:26,079 --> 00:13:27,440
little quick right so we have two

323
00:13:27,440 --> 00:13:28,720
candidate paths that working at the

324
00:13:28,720 --> 00:13:31,920
protect they will be signaled each as a

325
00:13:31,920 --> 00:13:35,040
request and each having a bandwidth uh

326
00:13:35,040 --> 00:13:37,360
you know requested as well so when the

327
00:13:37,360 --> 00:13:39,680
the pc is doing the computation

328
00:13:39,680 --> 00:13:41,839
and manages the allocations of all the

329
00:13:41,839 --> 00:13:43,279
path computation requests in the

330
00:13:43,279 --> 00:13:45,760
topology it will allocate both the

331
00:13:45,760 --> 00:13:47,839
working and the protect band so whenever

332
00:13:47,839 --> 00:13:50,959
we need to switch the protect uh path is

333
00:13:50,959 --> 00:13:53,680
pre-programmed and already

334
00:13:53,680 --> 00:13:55,440
and has the bandwidth um you know

335
00:13:55,440 --> 00:13:57,199
assumed or allocated from the pc

336
00:13:57,199 --> 00:14:00,199
perspective

337
00:14:02,639 --> 00:14:05,839
uh robin go ahead

338
00:14:11,519 --> 00:14:15,399
robin please go ahead

339
00:14:19,519 --> 00:14:21,120
can you hear me

340
00:14:21,120 --> 00:14:22,880
yes we can hear you

341
00:14:22,880 --> 00:14:26,000
okay uh in fact several years ago the

342
00:14:26,000 --> 00:14:29,199
similar work like oem protection and the

343
00:14:29,199 --> 00:14:31,199
bi-directional

344
00:14:31,199 --> 00:14:34,800
sr paths have been taken into account

345
00:14:34,800 --> 00:14:37,279
so the work of sr

346
00:14:37,279 --> 00:14:38,880
pass segment

347
00:14:38,880 --> 00:14:41,199
has been developed

348
00:14:41,199 --> 00:14:44,000
so in my opinion i think this work has

349
00:14:44,000 --> 00:14:46,639
much relation with the existing past

350
00:14:46,639 --> 00:14:50,000
segment work i wish the work can be

351
00:14:50,000 --> 00:14:52,959
taken into account this

352
00:14:52,959 --> 00:14:56,079
in this draft and also can

353
00:14:56,079 --> 00:14:58,480
do some of the combination work with the

354
00:14:58,480 --> 00:15:01,120
past segment

355
00:15:03,600 --> 00:15:05,600
yeah i think this is um

356
00:15:05,600 --> 00:15:06,720
this is a

357
00:15:06,720 --> 00:15:09,680
a fair comment the our draft i think is

358
00:15:09,680 --> 00:15:12,800
mostly focusing on on the the overall

359
00:15:12,800 --> 00:15:14,320
solution how the corroded and

360
00:15:14,320 --> 00:15:16,880
bi-directional computation and this and

361
00:15:16,880 --> 00:15:18,720
the paths are getting established you

362
00:15:18,720 --> 00:15:20,639
know establishing

363
00:15:20,639 --> 00:15:22,560
an end-to-end path segment as part of

364
00:15:22,560 --> 00:15:25,279
that um you know i think fits in the

365
00:15:25,279 --> 00:15:27,360
picture so we definitely can we can we

366
00:15:27,360 --> 00:15:30,240
can talk about how uh how those two work

367
00:15:30,240 --> 00:15:34,399
items are are you know aligning

368
00:15:34,560 --> 00:15:36,240
okay all right

369
00:15:36,240 --> 00:15:40,040
dhruv please go ahead

370
00:15:40,720 --> 00:15:42,480
my one query is

371
00:15:42,480 --> 00:15:44,399
like even in this presentation as well

372
00:15:44,399 --> 00:15:45,759
as in the draft

373
00:15:45,759 --> 00:15:48,480
uh the pc is used extensively

374
00:15:48,480 --> 00:15:51,480
is

375
00:16:04,000 --> 00:16:07,000
uh

376
00:16:08,160 --> 00:16:11,600
okay we're gonna have to move on uh um

377
00:16:11,600 --> 00:16:12,959
in the interest of time because we were

378
00:16:12,959 --> 00:16:14,959
late starting so let's uh move to the

379
00:16:14,959 --> 00:16:16,560
next presentation and any other

380
00:16:16,560 --> 00:16:20,079
questions please take to the mailing

381
00:16:21,040 --> 00:16:21,079
slice list

382
00:16:36,800 --> 00:16:37,600
yeah

383
00:16:37,600 --> 00:16:40,160
is it on

384
00:16:41,680 --> 00:16:43,360
there we go

385
00:16:43,360 --> 00:16:44,560
hello

386
00:16:44,560 --> 00:16:47,279
uh hi my name is gion mishra i'm with

387
00:16:47,279 --> 00:16:50,440
verizon and i will be presenting uh

388
00:16:50,440 --> 00:16:54,000
srpmtu for sr policy on behalf of the

389
00:16:54,000 --> 00:16:57,920
co-authors thank you next slide

390
00:16:58,240 --> 00:17:00,399
so some history as to how this draft

391
00:17:00,399 --> 00:17:02,560
came about and came into the spring

392
00:17:02,560 --> 00:17:05,359
working group so during the adoption of

393
00:17:05,359 --> 00:17:09,839
draft pce psep uh with uh shipping

394
00:17:09,839 --> 00:17:12,000
a need for the spring a need for a

395
00:17:12,000 --> 00:17:14,079
spring document was requested and

396
00:17:14,079 --> 00:17:16,240
confirmed by both the pce and spring

397
00:17:16,240 --> 00:17:19,520
workgroup chairs uh so with that

398
00:17:19,520 --> 00:17:20,640
a

399
00:17:20,640 --> 00:17:22,880
and i during that discussion of the

400
00:17:22,880 --> 00:17:25,280
adoption during that adoption call an

401
00:17:25,280 --> 00:17:28,799
idr document um for sr policy path mtu

402
00:17:28,799 --> 00:17:30,000
adoption

403
00:17:30,000 --> 00:17:32,480
this this topic had as well had come up

404
00:17:32,480 --> 00:17:35,200
in april of 2020 a discussion was

405
00:17:35,200 --> 00:17:37,600
brought up by keith and taluer uh that

406
00:17:37,600 --> 00:17:40,320
the concept of path mtu for sr policy

407
00:17:40,320 --> 00:17:41,120
and its

408
00:17:41,120 --> 00:17:43,760
applicability should be first defined in

409
00:17:43,760 --> 00:17:47,280
the spring working group

410
00:17:47,280 --> 00:17:48,480
should be the first to find in the

411
00:17:48,480 --> 00:17:50,160
spring working group before we introduce

412
00:17:50,160 --> 00:17:53,280
the signaling aspect into the into bgp

413
00:17:53,280 --> 00:17:54,960
so as a result

414
00:17:54,960 --> 00:17:58,240
of the pc mtu extension adoption call uh

415
00:17:58,240 --> 00:18:01,600
for pete for psep of path mtu extension

416
00:18:01,600 --> 00:18:03,919
was to maintain basically only protocol

417
00:18:03,919 --> 00:18:05,679
extensions that was also as well

418
00:18:05,679 --> 00:18:08,640
requested for the idr draft to just

419
00:18:08,640 --> 00:18:10,160
really maintain just the protocol

420
00:18:10,160 --> 00:18:13,360
extension details while the sr policy

421
00:18:13,360 --> 00:18:16,400
path mtu definition and framework was to

422
00:18:16,400 --> 00:18:18,080
be developed in the spring working group

423
00:18:18,080 --> 00:18:20,640
as a standards track document to ensure

424
00:18:20,640 --> 00:18:21,840
interventor

425
00:18:21,840 --> 00:18:24,799
interoperability related to sr path mtu

426
00:18:24,799 --> 00:18:27,360
concept and computation details

427
00:18:27,360 --> 00:18:30,160
this topic came up as a critical issue

428
00:18:30,160 --> 00:18:32,080
to be addressed during the idr work

429
00:18:32,080 --> 00:18:34,480
adoption as i mentioned in 2020

430
00:18:34,480 --> 00:18:36,400
and then and then the second time again

431
00:18:36,400 --> 00:18:38,320
during the psap

432
00:18:38,320 --> 00:18:40,320
extension for pat mtu

433
00:18:40,320 --> 00:18:42,240
due to the criticality of solving this

434
00:18:42,240 --> 00:18:44,799
topic and related related to handling of

435
00:18:44,799 --> 00:18:47,200
fragmentation and fragmentation issues

436
00:18:47,200 --> 00:18:50,080
that could happen with an sr policy

437
00:18:50,080 --> 00:18:52,639
next slide

438
00:18:54,000 --> 00:18:56,880
yep thank you

439
00:18:56,880 --> 00:19:00,559
so ssr policy uh so an overview here so

440
00:19:00,559 --> 00:19:02,960
the motivation of handling the sr policy

441
00:19:02,960 --> 00:19:05,039
path mtu so we got fragmentation

442
00:19:05,039 --> 00:19:07,760
avoidance by the sr head end to be aware

443
00:19:07,760 --> 00:19:10,320
of the sr path mtu associated with the

444
00:19:10,320 --> 00:19:13,679
sr policies sr paths and policies the

445
00:19:13,679 --> 00:19:16,000
ability to generate an icm message at

446
00:19:16,000 --> 00:19:19,360
the head end if they're if fragmentation

447
00:19:19,360 --> 00:19:20,880
is required

448
00:19:20,880 --> 00:19:22,640
and then follow correct fragmentation

449
00:19:22,640 --> 00:19:25,440
procedures to ensure interoperability

450
00:19:25,440 --> 00:19:27,840
between implementations and the ability

451
00:19:27,840 --> 00:19:29,919
for the sr policy as as a path

452
00:19:29,919 --> 00:19:33,039
competition constraint to be added in a

453
00:19:33,039 --> 00:19:34,480
distributed model

454
00:19:34,480 --> 00:19:37,760
directly to the sr policy in cli or i'm

455
00:19:37,760 --> 00:19:40,160
in a centralized controller method

456
00:19:40,160 --> 00:19:42,799
with a pcsdn controller as a cons

457
00:19:42,799 --> 00:19:44,559
as a constraint that could be pushed

458
00:19:44,559 --> 00:19:47,520
down by the pce to the head end source

459
00:19:47,520 --> 00:19:50,480
node next slide

460
00:19:50,960 --> 00:19:54,480
so sr policy uh definition for sr policy

461
00:19:54,480 --> 00:19:57,440
srp sorry pmtu definition for sr policy

462
00:19:57,440 --> 00:19:59,360
so basically a valid candidate path is

463
00:19:59,360 --> 00:20:01,440
selected as the active path and once

464
00:20:01,440 --> 00:20:03,280
determined to be the best path for the

465
00:20:03,280 --> 00:20:06,240
sr policy it could build the dynamics

466
00:20:06,240 --> 00:20:08,320
explicit composite set of segment lists

467
00:20:08,320 --> 00:20:10,400
or composite canada path container

468
00:20:10,400 --> 00:20:13,360
grouping of the sr policy so so with

469
00:20:13,360 --> 00:20:16,799
that definition srpmtu for a segment

470
00:20:16,799 --> 00:20:19,520
list is defined as the minimum link mtu

471
00:20:19,520 --> 00:20:20,960
of all the links in the path from the

472
00:20:20,960 --> 00:20:22,720
source to destination

473
00:20:22,720 --> 00:20:25,120
srpm to you for candidate path is the

474
00:20:25,120 --> 00:20:28,559
same as the sr policy same as srpm2 of a

475
00:20:28,559 --> 00:20:30,880
segment list for an explicit or dynamic

476
00:20:30,880 --> 00:20:33,120
is expressed as a set of segment segment

477
00:20:33,120 --> 00:20:36,240
lists and the srpmtu of the candidate

478
00:20:36,240 --> 00:20:39,200
path as defined as a minimum srpmt of

479
00:20:39,200 --> 00:20:41,360
all segment lists in this set

480
00:20:41,360 --> 00:20:43,919
for for composite is the minimum srpmt

481
00:20:43,919 --> 00:20:46,159
of all constituent sr policies of the

482
00:20:46,159 --> 00:20:48,960
composite candidate path and finally the

483
00:20:48,960 --> 00:20:50,480
srpmtu

484
00:20:50,480 --> 00:20:53,120
on that sr policy is defined as the srpm

485
00:20:53,120 --> 00:20:55,200
of the selected active candidate path

486
00:20:55,200 --> 00:20:57,120
next slide

487
00:20:57,120 --> 00:21:00,000
so here just depicting kind of the sr

488
00:21:00,000 --> 00:21:03,520
policy for a pmtu framework

489
00:21:03,520 --> 00:21:05,840
so in this example we're showing an sdn

490
00:21:05,840 --> 00:21:08,720
controller we have a path these so the

491
00:21:08,720 --> 00:21:11,760
sr uh piece the uh centralized

492
00:21:11,760 --> 00:21:14,240
controller would basically push down via

493
00:21:14,240 --> 00:21:16,960
pc the pce to pcc

494
00:21:16,960 --> 00:21:19,679
to the uh sr source node the a

495
00:21:19,679 --> 00:21:21,520
constraint so it'd be an s it would be

496
00:21:21,520 --> 00:21:24,640
an srpm2 constraint that we're pushing

497
00:21:24,640 --> 00:21:26,960
down from the controller to these a

498
00:21:26,960 --> 00:21:28,559
head-end source node and that's with the

499
00:21:28,559 --> 00:21:31,039
bgpsr policy so when that gets pushed it

500
00:21:31,039 --> 00:21:33,039
would it would it would uh add that

501
00:21:33,039 --> 00:21:35,120
constraint into the policy to prevent

502
00:21:35,120 --> 00:21:39,120
fragmentation as well as part of that uh

503
00:21:39,120 --> 00:21:41,360
framework the link mtu collection would

504
00:21:41,360 --> 00:21:45,840
be would be done via bgpls next slide

505
00:21:48,000 --> 00:21:51,039
so the framework of sr policy for p for

506
00:21:51,039 --> 00:21:53,200
srpmt for sr policy so with that

507
00:21:53,200 --> 00:21:55,200
framework uh

508
00:21:55,200 --> 00:21:58,480
the srpm2 path computation

509
00:21:58,480 --> 00:22:00,480
and how that would work for the variety

510
00:22:00,480 --> 00:22:03,600
of different paths so a loose te path

511
00:22:03,600 --> 00:22:07,120
would be the minimum srpm2 of all ecmps

512
00:22:07,120 --> 00:22:10,720
between the two adjacent and two nodes

513
00:22:10,720 --> 00:22:13,200
between uh ingress source node and

514
00:22:13,200 --> 00:22:15,760
egress destination node node sid along

515
00:22:15,760 --> 00:22:18,640
an srt path so that's basically the node

516
00:22:18,640 --> 00:22:22,880
node sid uh ecm ps so the next one is a

517
00:22:22,880 --> 00:22:25,200
strict patch so this here it's a minimum

518
00:22:25,200 --> 00:22:27,600
link empty of all links along the strict

519
00:22:27,600 --> 00:22:29,039
srt path

520
00:22:29,039 --> 00:22:31,919
and then mix to the minimum sr pmt of

521
00:22:31,919 --> 00:22:34,080
all ucmps between the two

522
00:22:34,080 --> 00:22:37,200
two node sids and the link mtu of all

523
00:22:37,200 --> 00:22:38,240
the

524
00:22:38,240 --> 00:22:40,320
link mtu of all links along the path

525
00:22:40,320 --> 00:22:42,720
indicated in the adjacency sid

526
00:22:42,720 --> 00:22:45,919
and then binding city path is is the

527
00:22:45,919 --> 00:22:48,880
srpm2 of the binding path is the same as

528
00:22:48,880 --> 00:22:51,039
the sr policy except that it includes

529
00:22:51,039 --> 00:22:52,880
the associated encapsulation overhead of

530
00:22:52,880 --> 00:22:56,960
for srv6 with the outer ipv6 header nsrh

531
00:22:56,960 --> 00:23:00,159
and srm pls sids sid list that's pushed

532
00:23:00,159 --> 00:23:01,600
onto the stack

533
00:23:01,600 --> 00:23:04,640
for tlfti lfa the srpm2 of the repair

534
00:23:04,640 --> 00:23:07,280
path at the plr node to the merge point

535
00:23:07,280 --> 00:23:09,200
is computed by the controller which

536
00:23:09,200 --> 00:23:11,360
updates the head end with the new srp

537
00:23:11,360 --> 00:23:14,799
mtu so in that bypass loop if there is a

538
00:23:14,799 --> 00:23:17,039
different mtu than the uh then the

539
00:23:17,039 --> 00:23:19,919
primary path that that that path

540
00:23:19,919 --> 00:23:22,159
computation for the bypass loop is

541
00:23:22,159 --> 00:23:24,960
actually is is is sent back to the uh ti

542
00:23:24,960 --> 00:23:27,919
to the head end node for the bypass loop

543
00:23:27,919 --> 00:23:30,480
next slide

544
00:23:30,720 --> 00:23:32,799
so this shows an example of kind of how

545
00:23:32,799 --> 00:23:35,360
this would work so so with this is an

546
00:23:35,360 --> 00:23:37,600
example of a sr policy for loose path

547
00:23:37,600 --> 00:23:39,919
you with the node sid so you have the

548
00:23:39,919 --> 00:23:42,480
node sit on the ingress and egress pe

549
00:23:42,480 --> 00:23:45,679
and here we have an ecmp so so to keep

550
00:23:45,679 --> 00:23:47,120
in mind that we're looking at so this

551
00:23:47,120 --> 00:23:49,120
could be an n-way ecmp you have many

552
00:23:49,120 --> 00:23:51,600
ecmp that are that are there with the uh

553
00:23:51,600 --> 00:23:55,200
prefix sid prefix node said so now

554
00:23:55,200 --> 00:23:57,360
here it's the lowest

555
00:23:57,360 --> 00:24:00,240
the the lowest pm2 of all the pads of

556
00:24:00,240 --> 00:24:02,240
all the ecmps so if you see the path

557
00:24:02,240 --> 00:24:04,320
from left to right it's got an m2 of

558
00:24:04,320 --> 00:24:06,559
2000 but then you see the bypass loop

559
00:24:06,559 --> 00:24:09,840
has an mtu 1500 so as as with with the

560
00:24:09,840 --> 00:24:12,799
uh computation it would be the lowest so

561
00:24:12,799 --> 00:24:14,400
here the lowest would be that bypass

562
00:24:14,400 --> 00:24:16,799
loop 1500. so now here the controller

563
00:24:16,799 --> 00:24:19,200
would basically push down the constraint

564
00:24:19,200 --> 00:24:21,279
of 1500 down to the

565
00:24:21,279 --> 00:24:23,039
sr pulse sr

566
00:24:23,039 --> 00:24:25,520
sr head end head end node for the sr

567
00:24:25,520 --> 00:24:28,080
policy next slide

568
00:24:28,080 --> 00:24:30,640
so this example is a strict

569
00:24:30,640 --> 00:24:33,279
policy example uh with the adjacency

570
00:24:33,279 --> 00:24:35,840
sids and in this example what we're what

571
00:24:35,840 --> 00:24:38,400
i'm depicting here is if you see if it's

572
00:24:38,400 --> 00:24:40,799
similar to the last slide so in the

573
00:24:40,799 --> 00:24:43,279
the path along from left to right you

574
00:24:43,279 --> 00:24:45,520
see an mt of 2000 with the adjacency

575
00:24:45,520 --> 00:24:48,240
sids and then along the bypass loops you

576
00:24:48,240 --> 00:24:49,600
see a um

577
00:24:49,600 --> 00:24:53,360
a nmt of 1500. so in this example what

578
00:24:53,360 --> 00:24:55,120
we're trying to do is we're trying to

579
00:24:55,120 --> 00:24:57,760
but so normally the path mtu would take

580
00:24:57,760 --> 00:24:59,840
as as mentioned in the previous slide

581
00:24:59,840 --> 00:25:01,760
the low the lowest uh

582
00:25:01,760 --> 00:25:03,440
lowest path mtu so in this case the

583
00:25:03,440 --> 00:25:06,400
lowest path mtu would be the bypass

584
00:25:06,400 --> 00:25:08,159
path the triangle path along the bottom

585
00:25:08,159 --> 00:25:10,799
1500 so that would that would be normal

586
00:25:10,799 --> 00:25:13,120
standard computation when the path mq's

587
00:25:13,120 --> 00:25:15,600
is is computed so now what we're doing

588
00:25:15,600 --> 00:25:18,159
here is we want to take the actual the

589
00:25:18,159 --> 00:25:20,320
higher mtu so we want to take that 2000

590
00:25:20,320 --> 00:25:21,760
pounds from that ingress pe to the

591
00:25:21,760 --> 00:25:23,919
egress pe so in this case what we're

592
00:25:23,919 --> 00:25:26,000
doing is we're actually pushing

593
00:25:26,000 --> 00:25:26,960
a uh

594
00:25:26,960 --> 00:25:29,520
a constraint a path mtu constraint of

595
00:25:29,520 --> 00:25:32,720
1800 from the controller to the sr

596
00:25:32,720 --> 00:25:34,720
policy on the head and source node and

597
00:25:34,720 --> 00:25:37,120
we're pushing down 1800 so since that is

598
00:25:37,120 --> 00:25:39,679
our constraint that we won as a minimum

599
00:25:39,679 --> 00:25:41,600
and that actually forces that green line

600
00:25:41,600 --> 00:25:43,440
so now we're actually instead of taking

601
00:25:43,440 --> 00:25:46,240
the default uh path m2 using the lowest

602
00:25:46,240 --> 00:25:47,840
which is the triangle path now we're

603
00:25:47,840 --> 00:25:49,840
actually with that new constraint we're

604
00:25:49,840 --> 00:25:51,279
actually taking that green line path

605
00:25:51,279 --> 00:25:52,720
from left to right

606
00:25:52,720 --> 00:25:55,200
next slide

607
00:25:55,279 --> 00:25:57,440
so this example is the loose so it's a

608
00:25:57,440 --> 00:25:59,600
similar topology so we got left to right

609
00:25:59,600 --> 00:26:02,240
we got 2000 and then we have the uh

610
00:26:02,240 --> 00:26:05,039
triangle path 1500 along the uh low the

611
00:26:05,039 --> 00:26:07,279
other path and this is here is example

612
00:26:07,279 --> 00:26:08,159
of

613
00:26:08,159 --> 00:26:10,880
a mix so you got prefixed so you you

614
00:26:10,880 --> 00:26:13,200
take the prefix sid in the segment list

615
00:26:13,200 --> 00:26:14,640
you're you're

616
00:26:14,640 --> 00:26:16,559
taking you have the prefix sid so that's

617
00:26:16,559 --> 00:26:18,480
your first sid in the si the active sit

618
00:26:18,480 --> 00:26:20,559
in the sit list and then you have then

619
00:26:20,559 --> 00:26:23,520
you have an adjacency sid that you take

620
00:26:23,520 --> 00:26:25,679
along the path to get to the uh egress

621
00:26:25,679 --> 00:26:28,640
destination so in this in this case what

622
00:26:28,640 --> 00:26:30,159
would happen from left to right you have

623
00:26:30,159 --> 00:26:32,240
the uh you have the two-way ecmp here

624
00:26:32,240 --> 00:26:34,320
left to right you got 2000 and then on

625
00:26:34,320 --> 00:26:37,200
the bottom triangle path you got 1500 so

626
00:26:37,200 --> 00:26:39,600
it's the lowest lowest of of the path

627
00:26:39,600 --> 00:26:41,840
mtu along all the paths and this case is

628
00:26:41,840 --> 00:26:43,840
1500 so the the

629
00:26:43,840 --> 00:26:45,440
the controller would basically push down

630
00:26:45,440 --> 00:26:48,240
that constraint to 1500 down to the sr

631
00:26:48,240 --> 00:26:51,960
policy at the head and source

632
00:26:52,400 --> 00:26:54,400
okay uh let's

633
00:26:54,400 --> 00:26:57,679
let's go down to the last we will if did

634
00:26:57,679 --> 00:26:59,360
you have time for just one more

635
00:26:59,360 --> 00:27:01,919
go up one slide you one more slide

636
00:27:01,919 --> 00:27:04,240
okay thank you so what i would like to

637
00:27:04,240 --> 00:27:07,039
ask the work group is if we could if

638
00:27:07,039 --> 00:27:10,000
folks could review the draft and we just

639
00:27:10,000 --> 00:27:11,600
want to get feedback there's some there

640
00:27:11,600 --> 00:27:13,679
are there are some critical

641
00:27:13,679 --> 00:27:15,360
components that we would like to get

642
00:27:15,360 --> 00:27:17,360
feedback from these spring working group

643
00:27:17,360 --> 00:27:18,559
experts

644
00:27:18,559 --> 00:27:20,960
the three three topics that that we

645
00:27:20,960 --> 00:27:22,960
bulleted uh with the uh

646
00:27:22,960 --> 00:27:24,159
you know with with the authors

647
00:27:24,159 --> 00:27:26,399
co-authors on on you know as that we had

648
00:27:26,399 --> 00:27:28,480
discussed one the first one that we want

649
00:27:28,480 --> 00:27:30,159
to get feedback on from the spring

650
00:27:30,159 --> 00:27:32,960
working group experts is the ti lfa

651
00:27:32,960 --> 00:27:35,039
srpm2 ti lfa computation and

652
00:27:35,039 --> 00:27:37,200
fragmentation caveats so just to make

653
00:27:37,200 --> 00:27:38,799
sure we didn't miss anything you want to

654
00:27:38,799 --> 00:27:40,880
make sure that we we're really on target

655
00:27:40,880 --> 00:27:42,480
and so we really want to get get

656
00:27:42,480 --> 00:27:44,480
feedback from the experts the next one

657
00:27:44,480 --> 00:27:47,760
is the srpmq srv6 source node

658
00:27:47,760 --> 00:27:50,480
encapsulation fragmentation caveats and

659
00:27:50,480 --> 00:27:51,760
the last one

660
00:27:51,760 --> 00:27:54,480
is srpm2 bindingsid path computation

661
00:27:54,480 --> 00:27:57,760
caveats so much appreciated and if you

662
00:27:57,760 --> 00:27:58,960
know and we'll take this to the

663
00:27:58,960 --> 00:28:01,200
workgroup mailing list and uh and i

664
00:28:01,200 --> 00:28:02,960
really appreciate the feedback yeah i'm

665
00:28:02,960 --> 00:28:04,559
really sorry we don't have time for

666
00:28:04,559 --> 00:28:06,880
questions but we're really short of time

667
00:28:06,880 --> 00:28:08,480
this time and we want to

668
00:28:08,480 --> 00:28:10,480
let things keep moving so thank you very

669
00:28:10,480 --> 00:28:12,159
much and the next presenter will be up

670
00:28:12,159 --> 00:28:16,360
in a moment thank you

671
00:28:25,440 --> 00:28:27,520
so this is the connection oriented path

672
00:28:27,520 --> 00:28:29,840
in srv6 i'm not sure who's presenting

673
00:28:29,840 --> 00:28:31,279
this and

674
00:28:31,279 --> 00:28:33,520
zhang ping so

675
00:28:33,520 --> 00:28:36,760
go ahead

676
00:28:58,880 --> 00:29:02,399
and this is about the motivation

677
00:29:02,399 --> 00:29:06,559
uh we think that uh the exact uh name

678
00:29:06,559 --> 00:29:07,600
should be

679
00:29:07,600 --> 00:29:09,919
the connection only the whole backhoe

680
00:29:09,919 --> 00:29:14,399
switching pass in the sr6

681
00:29:14,399 --> 00:29:16,399
the whole pipe hope switching is just

682
00:29:16,399 --> 00:29:18,960
the way that the traditional amps start

683
00:29:18,960 --> 00:29:20,640
on its node

684
00:29:20,640 --> 00:29:23,919
in which the label is locally allocated

685
00:29:23,919 --> 00:29:26,640
and slapped on each node

686
00:29:26,640 --> 00:29:28,640
as we know that

687
00:29:28,640 --> 00:29:31,679
at r6 packet can contain a hole or

688
00:29:31,679 --> 00:29:34,720
partial nodes to do the strict or loose

689
00:29:34,720 --> 00:29:36,720
source rooting thus

690
00:29:36,720 --> 00:29:39,120
fewer status on each node would be

691
00:29:39,120 --> 00:29:42,000
needed however if we need a strict t

692
00:29:42,000 --> 00:29:44,480
pass in the network we need to put

693
00:29:44,480 --> 00:29:47,039
each node state in every packet tyler

694
00:29:47,039 --> 00:29:50,080
which is not very convenient

695
00:29:50,080 --> 00:29:53,639
next page please

696
00:29:55,440 --> 00:29:57,039
and the

697
00:29:57,039 --> 00:30:00,399
uh for the connection oriented strictly

698
00:30:00,399 --> 00:30:02,640
passed in s56

699
00:30:02,640 --> 00:30:04,159
we can

700
00:30:04,159 --> 00:30:07,120
we have several options the first is

701
00:30:07,120 --> 00:30:08,480
we we

702
00:30:08,480 --> 00:30:11,279
still put every node state into

703
00:30:11,279 --> 00:30:13,279
the package header

704
00:30:13,279 --> 00:30:15,200
but if the path is long the packet

705
00:30:15,200 --> 00:30:17,120
header will be large

706
00:30:17,120 --> 00:30:19,760
optionally we can also compress the c

707
00:30:19,760 --> 00:30:20,640
list

708
00:30:20,640 --> 00:30:23,919
the second option we can support both

709
00:30:23,919 --> 00:30:26,080
have our v6 and i'm pairs

710
00:30:26,080 --> 00:30:28,799
but it is complicated and

711
00:30:28,799 --> 00:30:30,960
with this document many talks about the

712
00:30:30,960 --> 00:30:32,799
third option

713
00:30:32,799 --> 00:30:35,600
we want to try to support her back home

714
00:30:35,600 --> 00:30:40,240
switching advice 6 network

715
00:30:40,240 --> 00:30:42,880
we think the benefits is that

716
00:30:42,880 --> 00:30:46,080
it is based on the uniform srv6 network

717
00:30:46,080 --> 00:30:48,960
programming platform and we also think

718
00:30:48,960 --> 00:30:51,039
that the platform can support many

719
00:30:51,039 --> 00:30:53,679
network characteristics and reduce

720
00:30:53,679 --> 00:30:56,640
number of protocols in the network and

721
00:30:56,640 --> 00:30:58,960
we have two graphs and the first one is

722
00:30:58,960 --> 00:31:00,720
about option one and

723
00:31:00,720 --> 00:31:03,039
uh the packet heidel pipes need to

724
00:31:03,039 --> 00:31:05,919
contain each node seed and

725
00:31:05,919 --> 00:31:08,240
in option 3

726
00:31:08,240 --> 00:31:10,960
we perhaps have only one node seed in

727
00:31:10,960 --> 00:31:12,000
the

728
00:31:12,000 --> 00:31:13,440
packet header

729
00:31:13,440 --> 00:31:16,960
we also add some explanation here

730
00:31:16,960 --> 00:31:19,440
we think that we do currently we do not

731
00:31:19,440 --> 00:31:21,600
need to manage this kind of or correct

732
00:31:21,600 --> 00:31:24,799
oriented uh parts in the as fast in the

733
00:31:24,799 --> 00:31:26,880
network

734
00:31:26,880 --> 00:31:29,840
next page please

735
00:31:30,880 --> 00:31:32,640
for the

736
00:31:32,640 --> 00:31:33,519
uh

737
00:31:33,519 --> 00:31:34,399
for the

738
00:31:34,399 --> 00:31:37,760
folding on the display uh we introduced

739
00:31:37,760 --> 00:31:40,240
a new set of seeds

740
00:31:40,240 --> 00:31:42,960
uh on the data it is easy to replace the

741
00:31:42,960 --> 00:31:45,679
label in mpls with the seed in

742
00:31:45,679 --> 00:31:49,039
advance 6 in this document we call it a

743
00:31:49,039 --> 00:31:50,880
endpoint x

744
00:31:50,880 --> 00:31:51,679
cup

745
00:31:51,679 --> 00:31:53,679
d function

746
00:31:53,679 --> 00:31:56,399
it should be supposed on each node and

747
00:31:56,399 --> 00:31:57,760
contains

748
00:31:57,760 --> 00:31:59,200
a

749
00:31:59,200 --> 00:32:01,840
argument similar to a label

750
00:32:01,840 --> 00:32:03,760
uh this is a

751
00:32:03,760 --> 00:32:05,360
graph

752
00:32:05,360 --> 00:32:07,760
we can see that on each node

753
00:32:07,760 --> 00:32:09,279
the packet header

754
00:32:09,279 --> 00:32:10,159
uh

755
00:32:10,159 --> 00:32:12,880
the destination in the packet header

756
00:32:12,880 --> 00:32:15,440
is changed

757
00:32:15,440 --> 00:32:18,240
is similar to the label swap

758
00:32:18,240 --> 00:32:21,760
and we have we have we need these nodes

759
00:32:21,760 --> 00:32:23,600
to support the

760
00:32:23,600 --> 00:32:25,840
label mapping

761
00:32:25,840 --> 00:32:28,799
in a seed format

762
00:32:28,799 --> 00:32:31,679
next page please

763
00:32:32,720 --> 00:32:35,279
on the different it is simple to

764
00:32:35,279 --> 00:32:37,519
introduce new cs to

765
00:32:37,519 --> 00:32:38,330
replace the

766
00:32:38,330 --> 00:32:39,440
[Music]

767
00:32:39,440 --> 00:32:41,760
label in mpls but

768
00:32:41,760 --> 00:32:44,399
on the control plan we also have

769
00:32:44,399 --> 00:32:47,039
two options the first option

770
00:32:47,039 --> 00:32:50,320
perhaps we can use a pce server

771
00:32:50,320 --> 00:32:53,279
to connect to each node and communicate

772
00:32:53,279 --> 00:32:55,279
the label labels

773
00:32:55,279 --> 00:32:58,080
uh for the past uh and under the

774
00:32:58,080 --> 00:33:00,080
document that we also introduced another

775
00:33:00,080 --> 00:33:01,039
option

776
00:33:01,039 --> 00:33:04,960
uh is to simulate the procedure or svpt

777
00:33:04,960 --> 00:33:08,320
mpls by using new uh control plan c's in

778
00:33:08,320 --> 00:33:11,919
n56 we call it and they are

779
00:33:11,919 --> 00:33:13,840
independent

780
00:33:13,840 --> 00:33:16,000
corpse c function

781
00:33:16,000 --> 00:33:18,720
which is also needed to be supported

782
00:33:18,720 --> 00:33:21,760
on each node and the content data paths

783
00:33:21,760 --> 00:33:25,519
contains an argument similar to a label

784
00:33:25,519 --> 00:33:28,799
uh and the id step we think that the

785
00:33:28,799 --> 00:33:32,240
legal zero is special it is used for the

786
00:33:32,240 --> 00:33:34,240
confirm the path

787
00:33:34,240 --> 00:33:35,200
we have

788
00:33:35,200 --> 00:33:39,039
the the graph and the node one is a

789
00:33:39,039 --> 00:33:42,640
hidden and the node file is the endpoint

790
00:33:42,640 --> 00:33:45,840
the first node one will send a packet

791
00:33:45,840 --> 00:33:47,200
containing the

792
00:33:47,200 --> 00:33:51,279
uh the end point code c function

793
00:33:51,279 --> 00:33:53,919
with the label zero and

794
00:33:53,919 --> 00:33:57,440
it is sent from one two three four five

795
00:33:57,440 --> 00:33:59,519
to confirm the path and the

796
00:33:59,519 --> 00:34:02,480
note file will enter a

797
00:34:02,480 --> 00:34:06,240
packet similar to uh

798
00:34:12,000 --> 00:34:14,800
next page please

799
00:34:16,560 --> 00:34:18,320
and

800
00:34:18,320 --> 00:34:21,679
we in this page we introduced the steps

801
00:34:21,679 --> 00:34:24,960
or as hebrews in the past the first step

802
00:34:24,960 --> 00:34:28,480
is we we need the hidden standard packet

803
00:34:28,480 --> 00:34:30,079
to know for

804
00:34:30,079 --> 00:34:32,879
node one to know the file and

805
00:34:32,879 --> 00:34:35,599
it contains all the nodes seeds

806
00:34:35,599 --> 00:34:36,399
and

807
00:34:36,399 --> 00:34:39,599
each downstream node will respond a

808
00:34:39,599 --> 00:34:41,760
table in the

809
00:34:41,760 --> 00:34:44,639
package returned to the node one

810
00:34:44,639 --> 00:34:45,839
and

811
00:34:45,839 --> 00:34:49,520
they can establish this mapping table

812
00:34:49,520 --> 00:34:53,839
but it is in the sealed format

813
00:34:54,079 --> 00:34:56,399
next page please

814
00:34:56,399 --> 00:34:58,720
i think this is the last page and thanks

815
00:34:58,720 --> 00:35:01,440
for listening welcome for comments

816
00:35:01,440 --> 00:35:03,440
and our contributions

817
00:35:03,440 --> 00:35:05,839
thank you

818
00:35:09,200 --> 00:35:10,880
any

819
00:35:10,880 --> 00:35:13,280
question

820
00:35:14,960 --> 00:35:16,480
there any questions from the room

821
00:35:16,480 --> 00:35:18,960
there's none on the cube

822
00:35:18,960 --> 00:35:22,240
okay we're moving on then thank you

823
00:35:22,240 --> 00:35:25,399
thank you

824
00:35:34,640 --> 00:35:37,040
okay go ahead you song

825
00:35:37,040 --> 00:35:39,280
hello

826
00:35:39,280 --> 00:35:40,960
yeah we can hear you please go ahead

827
00:35:40,960 --> 00:35:42,640
yeah okay

828
00:35:42,640 --> 00:35:46,079
thank you uh hello everyone uh i'm yuzun

829
00:35:46,079 --> 00:35:49,359
leo from channel mobile uh today

830
00:35:49,359 --> 00:35:52,720
i will introduce uh rprd

831
00:35:52,720 --> 00:35:55,760
uh for the network slicing in src

832
00:35:55,760 --> 00:35:56,960
segment

833
00:35:56,960 --> 00:35:58,800
this is the first

834
00:35:58,800 --> 00:36:01,200
presentation of this draft next page

835
00:36:01,200 --> 00:36:03,439
please

836
00:36:03,760 --> 00:36:06,320
next slide

837
00:36:10,160 --> 00:36:11,760
and

838
00:36:11,760 --> 00:36:13,839
firstly i'll introduce the background

839
00:36:13,839 --> 00:36:16,240
and as we know a network slicing

840
00:36:16,240 --> 00:36:18,320
partition a physical network into

841
00:36:18,320 --> 00:36:21,680
multiple isolated logical networks

842
00:36:21,680 --> 00:36:24,240
network slides associated with the

843
00:36:24,240 --> 00:36:28,240
spatial specific network resources

844
00:36:28,240 --> 00:36:32,800
called the nrp an rpid is used to

845
00:36:32,800 --> 00:36:34,480
identify the nrp

846
00:36:34,480 --> 00:36:36,640
during the package forwarding

847
00:36:36,640 --> 00:36:40,640
and it can be carried in the pack packet

848
00:36:40,640 --> 00:36:41,760
and

849
00:36:41,760 --> 00:36:45,520
like in i like the picture

850
00:36:45,680 --> 00:36:49,599
the router can use the rpid to determine

851
00:36:49,599 --> 00:36:52,160
the rrp

852
00:36:52,160 --> 00:36:54,960
and for the package

853
00:36:54,960 --> 00:36:56,480
uh

854
00:36:56,480 --> 00:37:00,880
like an rpid eco2 uh the router will use

855
00:37:00,880 --> 00:37:03,680
the green line to forward the packet

856
00:37:03,680 --> 00:37:06,839
so uh in this chapter we propose

857
00:37:06,839 --> 00:37:08,800
a ambassador

858
00:37:08,800 --> 00:37:11,920
for the for the uh nrp id

859
00:37:11,920 --> 00:37:15,280
uh in the sixth segment

860
00:37:15,280 --> 00:37:18,320
so that's the page please

861
00:37:21,040 --> 00:37:23,599
okay uh

862
00:37:23,599 --> 00:37:27,040
uh this master to uh encoding an rpid in

863
00:37:27,040 --> 00:37:30,160
a 76 segment so uh

864
00:37:30,160 --> 00:37:33,599
yes i succeed we have uh three parts of

865
00:37:33,599 --> 00:37:35,200
that

866
00:37:35,200 --> 00:37:37,920
locator function argument and in the

867
00:37:37,920 --> 00:37:40,720
either 6t mode

868
00:37:40,720 --> 00:37:42,400
the segments

869
00:37:42,400 --> 00:37:46,079
of the intermediate endpoint along the

870
00:37:46,079 --> 00:37:47,680
six parts

871
00:37:47,680 --> 00:37:51,839
are usually the end or and.x type

872
00:37:51,839 --> 00:37:53,040
segment

873
00:37:53,040 --> 00:37:53,839
so

874
00:37:53,839 --> 00:37:55,359
we can

875
00:37:55,359 --> 00:37:57,040
and the argument

876
00:37:57,040 --> 00:37:59,200
field of this type

877
00:37:59,200 --> 00:38:02,079
segment are not defined

878
00:38:02,079 --> 00:38:05,119
so we can use this uh

879
00:38:05,119 --> 00:38:06,960
this field

880
00:38:06,960 --> 00:38:10,320
uh to uh carry the nrp id

881
00:38:10,320 --> 00:38:13,920
so the seedless in the rsrh

882
00:38:13,920 --> 00:38:15,599
every segment

883
00:38:15,599 --> 00:38:20,160
can carry the same or different rpids

884
00:38:20,160 --> 00:38:22,960
which can remain by the

885
00:38:22,960 --> 00:38:24,079
controller

886
00:38:24,079 --> 00:38:28,320
of the cri so next okay please

887
00:38:31,520 --> 00:38:33,680
uh because uh

888
00:38:33,680 --> 00:38:36,640
for the in the srv6 parts

889
00:38:36,640 --> 00:38:38,960
uh the srv6

890
00:38:38,960 --> 00:38:41,119
endpoint

891
00:38:41,119 --> 00:38:42,240
can

892
00:38:42,240 --> 00:38:44,800
look up the local seed table

893
00:38:44,800 --> 00:38:48,240
to extract the

894
00:38:48,240 --> 00:38:52,560
argument field to get the rpid

895
00:38:52,560 --> 00:38:56,720
but in other nodes like the non

896
00:38:56,720 --> 00:38:58,960
srv6 node

897
00:38:58,960 --> 00:39:02,480
even the node cannot support the israel

898
00:39:02,480 --> 00:39:05,760
6 only supports ipv6

899
00:39:05,760 --> 00:39:07,680
so we need

900
00:39:07,680 --> 00:39:08,960
a

901
00:39:08,960 --> 00:39:11,359
table to uh

902
00:39:11,359 --> 00:39:13,680
get the nrp id

903
00:39:13,680 --> 00:39:14,880
from the

904
00:39:14,880 --> 00:39:16,880
destination

905
00:39:16,880 --> 00:39:18,880
address so

906
00:39:18,880 --> 00:39:20,960
we uh

907
00:39:20,960 --> 00:39:24,000
we should uh create and

908
00:39:24,000 --> 00:39:28,560
look up the slice prefix table here

909
00:39:28,560 --> 00:39:32,000
so with the static configuration mode of

910
00:39:32,000 --> 00:39:36,079
the dynamic advertising mode

911
00:39:36,079 --> 00:39:38,640
that means from the controller or the

912
00:39:38,640 --> 00:39:39,680
cri

913
00:39:39,680 --> 00:39:44,240
to the router or or

914
00:39:44,240 --> 00:39:47,680
from the bbp rs or the lgp to other

915
00:39:47,680 --> 00:39:49,520
nodes of the controller

916
00:39:49,520 --> 00:39:50,960
and

917
00:39:50,960 --> 00:39:52,400
the protocol can

918
00:39:52,400 --> 00:39:55,200
extensions will be provided in future

919
00:39:55,200 --> 00:39:56,880
versions or

920
00:39:56,880 --> 00:39:58,000
separate

921
00:39:58,000 --> 00:39:59,599
drafts so

922
00:39:59,599 --> 00:40:02,720
this is the basic uh mechanism

923
00:40:02,720 --> 00:40:06,000
so a slice prefix

924
00:40:06,000 --> 00:40:09,040
includes the prefix

925
00:40:09,040 --> 00:40:12,480
should be matched and the

926
00:40:12,480 --> 00:40:15,200
the second part in the encoding position

927
00:40:15,200 --> 00:40:16,640
in segment

928
00:40:16,640 --> 00:40:20,079
we can uh get where we can get the

929
00:40:20,079 --> 00:40:22,480
an rpid

930
00:40:22,480 --> 00:40:25,839
so that's the page please

931
00:40:26,720 --> 00:40:31,040
so this is the uh rspt that uh

932
00:40:31,040 --> 00:40:34,079
we we will build the

933
00:40:34,079 --> 00:40:38,160
local slice prefix table in every node

934
00:40:38,160 --> 00:40:41,839
along the sr6 parts

935
00:40:41,839 --> 00:40:45,359
for the head end of the sra 6

936
00:40:45,359 --> 00:40:49,119
we will write the rpid into the segment

937
00:40:49,119 --> 00:40:54,319
and in for the intermediate nodes we'll

938
00:40:55,040 --> 00:40:58,000
get the nrp id from the destination

939
00:40:58,000 --> 00:40:59,200
address

940
00:40:59,200 --> 00:41:02,079
uh if the nodes are not the

941
00:41:02,079 --> 00:41:06,480
it's not the uh srv6 and the honda

942
00:41:06,480 --> 00:41:09,119
like the example

943
00:41:09,119 --> 00:41:10,240
in

944
00:41:10,240 --> 00:41:11,839
in the slide

945
00:41:11,839 --> 00:41:13,920
for the

946
00:41:13,920 --> 00:41:17,119
p1 and the p3

947
00:41:17,119 --> 00:41:20,800
they have a different slice prefix

948
00:41:20,800 --> 00:41:23,920
and every uh each prefix

949
00:41:23,920 --> 00:41:26,640
has a different position

950
00:41:26,640 --> 00:41:30,240
of the rpid and if

951
00:41:30,240 --> 00:41:33,200
if the destination

952
00:41:33,200 --> 00:41:35,920
adjust match the

953
00:41:35,920 --> 00:41:39,359
slice prefix it can get the nrp id

954
00:41:39,359 --> 00:41:41,440
position and

955
00:41:41,440 --> 00:41:44,960
it can extract the rpid from the

956
00:41:44,960 --> 00:41:47,680
destination address

957
00:41:47,680 --> 00:41:50,960
okay next page please

958
00:41:52,319 --> 00:41:54,880
this is the example for uh this

959
00:41:54,880 --> 00:41:56,400
mechanism

960
00:41:56,400 --> 00:41:57,440
so we

961
00:41:57,440 --> 00:42:00,720
assume that we have a two rps

962
00:42:00,720 --> 00:42:04,640
and rp1 guarantees the 100

963
00:42:04,640 --> 00:42:07,760
megabits band device and the rp2

964
00:42:07,760 --> 00:42:09,359
guaranteeing

965
00:42:09,359 --> 00:42:10,960
200

966
00:42:10,960 --> 00:42:13,040
megabits pen wise

967
00:42:13,040 --> 00:42:16,480
so we dedicated the the queues for the

968
00:42:16,480 --> 00:42:17,520
airy

969
00:42:17,520 --> 00:42:20,800
router to guarantee in the bad ones

970
00:42:20,800 --> 00:42:23,359
so uh we have a

971
00:42:23,359 --> 00:42:26,720
sra 6 policy on p1

972
00:42:26,720 --> 00:42:28,319
including the

973
00:42:28,319 --> 00:42:29,839
segment

974
00:42:29,839 --> 00:42:30,800
for the

975
00:42:30,800 --> 00:42:31,920
p1

976
00:42:31,920 --> 00:42:35,440
and seed and the p3 and the seed

977
00:42:35,440 --> 00:42:36,960
and

978
00:42:36,960 --> 00:42:40,720
for the p1 as the head end

979
00:42:40,720 --> 00:42:41,920
it will

980
00:42:41,920 --> 00:42:43,359
determine the

981
00:42:43,359 --> 00:42:46,240
nrp and

982
00:42:46,240 --> 00:42:48,160
it will uh

983
00:42:48,160 --> 00:42:51,119
carry the nrp id2

984
00:42:51,119 --> 00:42:52,560
uh to the

985
00:42:52,560 --> 00:42:57,040
p1 and the seed and the p3 and speed

986
00:42:57,040 --> 00:43:00,240
and in the in caps with the srh and the

987
00:43:00,240 --> 00:43:03,359
ipv6 header

988
00:43:04,000 --> 00:43:05,200
and the

989
00:43:05,200 --> 00:43:07,359
uh

990
00:43:07,599 --> 00:43:09,599
sorry

991
00:43:09,599 --> 00:43:11,680
i'm not finished

992
00:43:11,680 --> 00:43:17,040
and for the endpoint the p1 and the p3

993
00:43:17,760 --> 00:43:21,280
it can extract the rpid adjuster from

994
00:43:21,280 --> 00:43:22,079
the

995
00:43:22,079 --> 00:43:24,319
local seed table

996
00:43:24,319 --> 00:43:27,200
and for the p2 it's just a transient

997
00:43:27,200 --> 00:43:28,079
node

998
00:43:28,079 --> 00:43:28,800
so

999
00:43:28,800 --> 00:43:30,400
it must

1000
00:43:30,400 --> 00:43:34,480
look up the rspt to get the nrp id

1001
00:43:34,480 --> 00:43:38,160
position to extract the nrp id

1002
00:43:38,160 --> 00:43:39,040
and

1003
00:43:39,040 --> 00:43:40,720
decide how to uh

1004
00:43:40,720 --> 00:43:45,200
uh forward the package with the queue

1005
00:43:45,200 --> 00:43:47,680
so that's that's all uh

1006
00:43:47,680 --> 00:43:50,000
we are seeking uh the feedback from the

1007
00:43:50,000 --> 00:43:52,319
working group any questions uh comments

1008
00:43:52,319 --> 00:43:55,839
and welcome thank you

1009
00:43:57,920 --> 00:43:59,920
i'll ask one question this is joel

1010
00:43:59,920 --> 00:44:01,119
halpern

1011
00:44:01,119 --> 00:44:03,119
as a participant i'm

1012
00:44:03,119 --> 00:44:05,440
in looking at this material i think i

1013
00:44:05,440 --> 00:44:07,200
understand the general driver and

1014
00:44:07,200 --> 00:44:09,040
actually like it but

1015
00:44:09,040 --> 00:44:10,800
the

1016
00:44:10,800 --> 00:44:12,960
material needs to be much clearer about

1017
00:44:12,960 --> 00:44:16,079
whether you are requiring

1018
00:44:16,079 --> 00:44:19,920
strict paths expecting strict paths or

1019
00:44:19,920 --> 00:44:22,319
expecting intermediate nodes which are

1020
00:44:22,319 --> 00:44:26,079
not addressed to extract these arg bits

1021
00:44:26,079 --> 00:44:28,319
from the current sid and

1022
00:44:28,319 --> 00:44:30,079
and handle them which would be an

1023
00:44:30,079 --> 00:44:33,200
unusual requirement so we need to be

1024
00:44:33,200 --> 00:44:34,880
very clear i'm not telling you what the

1025
00:44:34,880 --> 00:44:37,200
right answer is but we need to be very

1026
00:44:37,200 --> 00:44:40,480
clear about what we're doing

1027
00:44:40,480 --> 00:44:42,800
okay other questions on the queue

1028
00:44:42,800 --> 00:44:46,359
okay thank you

1029
00:44:52,480 --> 00:44:54,240
i didn't get my name on the list but

1030
00:44:54,240 --> 00:44:56,560
darren duke cisco systems quick question

1031
00:44:56,560 --> 00:44:59,920
is is this a hop by hop every sr and non

1032
00:44:59,920 --> 00:45:01,280
sr node

1033
00:45:01,280 --> 00:45:02,839
does this

1034
00:45:02,839 --> 00:45:06,160
stuff i was asking okay

1035
00:45:08,079 --> 00:45:10,319
now iso 6 node

1036
00:45:10,319 --> 00:45:12,079
it should

1037
00:45:12,079 --> 00:45:16,079
get the rpid from the rspt

1038
00:45:16,079 --> 00:45:19,720
so uh

1039
00:45:26,960 --> 00:45:30,119
thank you

1040
00:45:32,800 --> 00:45:35,760
okay thank you son

1041
00:45:40,800 --> 00:45:44,640
john wade uh do you want to uh go ahead

1042
00:45:44,640 --> 00:45:46,640
uh hello can you hear me

1043
00:45:46,640 --> 00:45:48,720
yes we can

1044
00:45:48,720 --> 00:45:51,680
uh okay hello everyone my name is jaiway

1045
00:45:51,680 --> 00:45:54,480
mao i'm glad to introduce this new draft

1046
00:45:54,480 --> 00:45:55,440
for you

1047
00:45:55,440 --> 00:45:59,359
generalized arguments of srv6 segment

1048
00:45:59,359 --> 00:46:02,400
next slide please

1049
00:46:06,400 --> 00:46:09,200
here is the background and motivation

1050
00:46:09,200 --> 00:46:11,440
in these years some new features are

1051
00:46:11,440 --> 00:46:15,359
created include network slicing ion

1052
00:46:15,359 --> 00:46:19,040
alternate marking apn6 then net and so

1053
00:46:19,040 --> 00:46:20,000
on

1054
00:46:20,000 --> 00:46:22,160
the instructions or commands of these

1055
00:46:22,160 --> 00:46:24,800
new features can be processed and all

1056
00:46:24,800 --> 00:46:28,000
nodes along an sr path or some endpoint

1057
00:46:28,000 --> 00:46:29,760
of an sr pass

1058
00:46:29,760 --> 00:46:32,800
that means the ipv6 callback hub options

1059
00:46:32,800 --> 00:46:35,680
header the destination options header or

1060
00:46:35,680 --> 00:46:39,280
the srhtlv may be used to carry the

1061
00:46:39,280 --> 00:46:41,520
instructions or commands

1062
00:46:41,520 --> 00:46:42,400
however

1063
00:46:42,400 --> 00:46:45,280
the usage of the options or trvs will

1064
00:46:45,280 --> 00:46:47,040
cause two issues

1065
00:46:47,040 --> 00:46:49,280
first you will make the packet header

1066
00:46:49,280 --> 00:46:51,680
longer that will reduce transmission

1067
00:46:51,680 --> 00:46:53,119
efficiency

1068
00:46:53,119 --> 00:46:55,760
and it will make

1069
00:46:55,760 --> 00:46:58,800
make the forwarding processing complex

1070
00:46:58,800 --> 00:47:01,040
they will affect a forwarding

1071
00:47:01,040 --> 00:47:03,440
performance

1072
00:47:03,440 --> 00:47:06,720
besides in the solution of srv6 c6

1073
00:47:06,720 --> 00:47:09,359
compression with next flavor

1074
00:47:09,359 --> 00:47:11,839
if all the c seed of the seed list can

1075
00:47:11,839 --> 00:47:14,960
be put in the ipv6 destination address

1076
00:47:14,960 --> 00:47:16,800
field of a package

1077
00:47:16,800 --> 00:47:20,319
there is no srh or the doh which is

1078
00:47:20,319 --> 00:47:22,240
before the srh

1079
00:47:22,240 --> 00:47:23,760
here in the package after the

1080
00:47:23,760 --> 00:47:24,960
compression

1081
00:47:24,960 --> 00:47:27,440
that means we will have no space to

1082
00:47:27,440 --> 00:47:29,680
carry the instructions

1083
00:47:29,680 --> 00:47:31,830
next slides please

1084
00:47:31,830 --> 00:47:33,119
[Music]

1085
00:47:33,119 --> 00:47:36,240
so in order to address these challenges

1086
00:47:36,240 --> 00:47:38,720
we propose this draft to use the

1087
00:47:38,720 --> 00:47:41,920
arguments of the srv6 seat to carry

1088
00:47:41,920 --> 00:47:44,079
those instructions

1089
00:47:44,079 --> 00:47:46,480
using the arguments we will gain this

1090
00:47:46,480 --> 00:47:47,599
benefit

1091
00:47:47,599 --> 00:47:49,760
first we can reduce the transmission

1092
00:47:49,760 --> 00:47:52,240
overhead because it will reduce the

1093
00:47:52,240 --> 00:47:55,760
needed space of ipv6 extension header or

1094
00:47:55,760 --> 00:47:57,520
sih tlv

1095
00:47:57,520 --> 00:47:59,440
next we can get better forwarding

1096
00:47:59,440 --> 00:48:03,760
performance because the i the the srv6

1097
00:48:03,760 --> 00:48:06,559
arguments can be read and processed as a

1098
00:48:06,559 --> 00:48:09,920
part of ipv6 address that means it can

1099
00:48:09,920 --> 00:48:13,000
avoid to process the extension header or

1100
00:48:13,000 --> 00:48:17,440
srhtlv behind the basic ipv6 header

1101
00:48:17,440 --> 00:48:20,319
finally we may unify and simplify the

1102
00:48:20,319 --> 00:48:23,119
package processing because the

1103
00:48:23,119 --> 00:48:26,079
instructions for the srv6 and the new

1104
00:48:26,079 --> 00:48:28,640
features can be put together in the

1105
00:48:28,640 --> 00:48:30,880
arguments part

1106
00:48:30,880 --> 00:48:33,760
in addition we noticed that there are

1107
00:48:33,760 --> 00:48:36,040
several kinds of arguments for the

1108
00:48:36,040 --> 00:48:39,760
srv6nc and endo x seed which need to be

1109
00:48:39,760 --> 00:48:40,960
compatible

1110
00:48:40,960 --> 00:48:44,480
for example the srv6 cc compression

1111
00:48:44,480 --> 00:48:47,520
solution use arguments to carry multiple

1112
00:48:47,520 --> 00:48:51,200
c seats cl field or both of them

1113
00:48:51,200 --> 00:48:52,660
next slides please

1114
00:48:52,660 --> 00:48:55,770
[Music]

1115
00:48:56,319 --> 00:48:58,720
okay in this draft we propose the

1116
00:48:58,720 --> 00:49:00,640
generalized arguments

1117
00:49:00,640 --> 00:49:04,240
it makes the srv6 arguments structured

1118
00:49:04,240 --> 00:49:06,079
and generalized

1119
00:49:06,079 --> 00:49:08,960
and allocates spaces to encode the

1120
00:49:08,960 --> 00:49:11,440
instructions of multiple new features

1121
00:49:11,440 --> 00:49:14,079
and srv6 seed

1122
00:49:14,079 --> 00:49:17,359
this draft specifies two methods to use

1123
00:49:17,359 --> 00:49:19,760
the generalized arguments

1124
00:49:19,760 --> 00:49:23,119
the first method is template

1125
00:49:23,119 --> 00:49:25,920
we we configure a template to network

1126
00:49:25,920 --> 00:49:28,720
devices then the devices read and

1127
00:49:28,720 --> 00:49:31,280
process the content of the arguments

1128
00:49:31,280 --> 00:49:33,200
according to the template

1129
00:49:33,200 --> 00:49:35,839
for example if the argument has the

1130
00:49:35,839 --> 00:49:38,800
total length of their bits we can define

1131
00:49:38,800 --> 00:49:42,559
b0 to bx stores the instructions of

1132
00:49:42,559 --> 00:49:43,760
feature a

1133
00:49:43,760 --> 00:49:47,520
bit x to bit y stores that of bishop b

1134
00:49:47,520 --> 00:49:50,559
and bit y to be z stores that of feature

1135
00:49:50,559 --> 00:49:51,920
c

1136
00:49:51,920 --> 00:49:54,960
next slide please

1137
00:49:55,200 --> 00:49:58,559
the second method is called bitmap

1138
00:49:58,559 --> 00:50:02,000
the this draft defines a bms structure

1139
00:50:02,000 --> 00:50:05,200
in the arguments it is used as an

1140
00:50:05,200 --> 00:50:07,280
indicator

1141
00:50:07,280 --> 00:50:09,760
each bit in the beam map indicates

1142
00:50:09,760 --> 00:50:12,240
whether the instructions of a specific

1143
00:50:12,240 --> 00:50:15,280
feature exist and are valid

1144
00:50:15,280 --> 00:50:18,400
in this method the generalized arguments

1145
00:50:18,400 --> 00:50:20,480
have two possible formats

1146
00:50:20,480 --> 00:50:24,880
corresponding to msb and lsb

1147
00:50:24,880 --> 00:50:27,839
next slide please

1148
00:50:28,640 --> 00:50:32,079
moreover this draft also considers how

1149
00:50:32,079 --> 00:50:35,839
to interact with srv6 cc compression

1150
00:50:35,839 --> 00:50:37,200
solution

1151
00:50:37,200 --> 00:50:38,720
as for the next

1152
00:50:38,720 --> 00:50:41,359
as for the next flavor or the next and

1153
00:50:41,359 --> 00:50:44,960
replace flavor it is required to shift

1154
00:50:44,960 --> 00:50:47,839
the sea seed in the srv6 seed

1155
00:50:47,839 --> 00:50:51,200
so the c seeds can be placed in the

1156
00:50:51,200 --> 00:50:53,440
generalized arguments and need to be

1157
00:50:53,440 --> 00:50:57,200
placed from the most significant bit

1158
00:50:57,200 --> 00:50:59,839
while shifting the multiple cc's the

1159
00:50:59,839 --> 00:51:02,240
remaining parts of the generalized

1160
00:51:02,240 --> 00:51:05,359
arguments should not be shifted

1161
00:51:05,359 --> 00:51:09,078
next slides please

1162
00:51:11,760 --> 00:51:13,839
so finally we believe there are

1163
00:51:13,839 --> 00:51:16,079
something to be discussed and clearly

1164
00:51:16,079 --> 00:51:19,040
defined in the next step for example

1165
00:51:19,040 --> 00:51:21,440
which bit in the bin map corresponds to

1166
00:51:21,440 --> 00:51:22,800
which feature

1167
00:51:22,800 --> 00:51:25,440
and what instructions or fields of the

1168
00:51:25,440 --> 00:51:28,160
specific feature need to be carried in

1169
00:51:28,160 --> 00:51:30,480
the generalized arguments

1170
00:51:30,480 --> 00:51:33,440
and how long is the space of arguments

1171
00:51:33,440 --> 00:51:36,079
that we need to allocate for a specific

1172
00:51:36,079 --> 00:51:38,000
feature

1173
00:51:38,000 --> 00:51:40,000
at the end we'll come to give us some

1174
00:51:40,000 --> 00:51:42,800
advice online only the mailing list or

1175
00:51:42,800 --> 00:51:45,040
join us to make some contributions many

1176
00:51:45,040 --> 00:51:46,559
things

1177
00:51:46,559 --> 00:51:48,480
that's all thank you

1178
00:51:48,480 --> 00:51:50,559
thanks jim generally um

1179
00:51:50,559 --> 00:51:52,000
i have a question myself as an

1180
00:51:52,000 --> 00:51:54,480
individual contributor um before i go to

1181
00:51:54,480 --> 00:51:55,839
the queue

1182
00:51:55,839 --> 00:51:58,319
it's not obvious to me anyway what these

1183
00:51:58,319 --> 00:52:01,440
uh features that you talk about are

1184
00:52:01,440 --> 00:52:04,160
you you're kind of indicating that it's

1185
00:52:04,160 --> 00:52:06,000
a feature but presumably there's going

1186
00:52:06,000 --> 00:52:08,800
to be more data so for example you talk

1187
00:52:08,800 --> 00:52:11,359
about network slicing

1188
00:52:11,359 --> 00:52:13,920
why do you need to indicate that feature

1189
00:52:13,920 --> 00:52:15,359
when you're going to need more

1190
00:52:15,359 --> 00:52:16,880
information than that to actually be

1191
00:52:16,880 --> 00:52:18,960
able to do anything you don't need to

1192
00:52:18,960 --> 00:52:20,480
answer that now but something to

1193
00:52:20,480 --> 00:52:22,079
consider

1194
00:52:22,079 --> 00:52:24,720
um the other thing to consider is

1195
00:52:24,720 --> 00:52:26,000
potentially

1196
00:52:26,000 --> 00:52:28,319
giving some example how the compression

1197
00:52:28,319 --> 00:52:30,480
would actually work with this

1198
00:52:30,480 --> 00:52:33,119
so my concern would be

1199
00:52:33,119 --> 00:52:34,960
for something like the next

1200
00:52:34,960 --> 00:52:36,079
um

1201
00:52:36,079 --> 00:52:37,440
flavor

1202
00:52:37,440 --> 00:52:39,760
and if i've already used up all the bits

1203
00:52:39,760 --> 00:52:40,800
for

1204
00:52:40,800 --> 00:52:42,800
for that how i'm going to be able to do

1205
00:52:42,800 --> 00:52:46,400
that so so just some things to consider

1206
00:52:46,400 --> 00:52:49,839
um kitan do you want to go ahead

1207
00:52:50,960 --> 00:52:53,359
uh thanks for your comment

1208
00:52:53,359 --> 00:52:54,480
uh

1209
00:52:54,480 --> 00:52:56,800
in the draft we have defined a new

1210
00:52:56,800 --> 00:52:58,559
flavor to indicate

1211
00:52:58,559 --> 00:53:00,800
that the argument part is needed to be

1212
00:53:00,800 --> 00:53:03,920
processed as a generalized argument uh

1213
00:53:03,920 --> 00:53:06,319
it's named as a structural argument

1214
00:53:06,319 --> 00:53:09,839
flavor now uh this point is no shown in

1215
00:53:09,839 --> 00:53:12,400
the slides for time reason uh thanks for

1216
00:53:12,400 --> 00:53:14,559
your mention and

1217
00:53:14,559 --> 00:53:15,520
about

1218
00:53:15,520 --> 00:53:18,240
how to interact with the srv6

1219
00:53:18,240 --> 00:53:20,400
compression uh

1220
00:53:20,400 --> 00:53:21,839
is shown

1221
00:53:21,839 --> 00:53:26,119
in the above page

1222
00:53:28,000 --> 00:53:30,079
okay katan go ahead

1223
00:53:30,079 --> 00:53:32,720
okay uh so i have a concern with this

1224
00:53:32,720 --> 00:53:35,359
notion of uh generalized arguments uh

1225
00:53:35,359 --> 00:53:37,839
because uh there isn't anything of that

1226
00:53:37,839 --> 00:53:41,520
nature uh based uh for rfc 8986 the

1227
00:53:41,520 --> 00:53:43,520
network programming

1228
00:53:43,520 --> 00:53:44,640
whether

1229
00:53:44,640 --> 00:53:46,000
whether a

1230
00:53:46,000 --> 00:53:48,160
sid has an argument or not or whether it

1231
00:53:48,160 --> 00:53:50,720
is valid or not is determined by the

1232
00:53:50,720 --> 00:53:54,160
srv6 endpoint behavior definition of

1233
00:53:54,160 --> 00:53:56,800
that side so

1234
00:53:56,800 --> 00:53:59,839
if there is if anyone wants to use

1235
00:53:59,839 --> 00:54:02,559
arguments in a seed uh said

1236
00:54:02,559 --> 00:54:03,920
there has to be a

1237
00:54:03,920 --> 00:54:05,920
endpoint behavior definition which

1238
00:54:05,920 --> 00:54:07,920
should precisely say what the arguments

1239
00:54:07,920 --> 00:54:10,480
are or how it is to be processed

1240
00:54:10,480 --> 00:54:13,040
so i think uh maybe i'm missing

1241
00:54:13,040 --> 00:54:15,440
something uh very fundamental or basic

1242
00:54:15,440 --> 00:54:17,680
here

1243
00:54:18,480 --> 00:54:20,800
okay thanks for your questions like

1244
00:54:20,800 --> 00:54:22,720
there isn't anything like a generalized

1245
00:54:22,720 --> 00:54:25,359
arguments for that may be applicable for

1246
00:54:25,359 --> 00:54:29,119
our srv succeeds basically

1247
00:54:30,319 --> 00:54:33,839
uh okay uh i guess you are

1248
00:54:33,839 --> 00:54:36,079
you are a question about

1249
00:54:36,079 --> 00:54:36,960
the

1250
00:54:36,960 --> 00:54:40,160
how to know to process the arguments as

1251
00:54:40,160 --> 00:54:42,480
and generalized arguments

1252
00:54:42,480 --> 00:54:45,599
in this draft we don't define as

1253
00:54:45,599 --> 00:54:48,640
a new behavior for this we define a

1254
00:54:48,640 --> 00:54:50,160
flavor to

1255
00:54:50,160 --> 00:54:54,640
identify this srv6 seed is carried on

1256
00:54:54,640 --> 00:54:57,200
generalized arguments and

1257
00:54:57,200 --> 00:55:00,400
and it is needed to be parsed

1258
00:55:00,400 --> 00:55:03,040
sure so you need to define i mean

1259
00:55:03,040 --> 00:55:06,079
behavior flavor is like i mean i don't

1260
00:55:06,079 --> 00:55:07,599
want to go into it you would need to

1261
00:55:07,599 --> 00:55:10,319
define a new code point let me say that

1262
00:55:10,319 --> 00:55:11,760
uh for

1263
00:55:11,760 --> 00:55:14,240
for set behavior slash flavor that is

1264
00:55:14,240 --> 00:55:16,400
going to use generalized arguments they

1265
00:55:16,400 --> 00:55:18,480
do not apply to

1266
00:55:18,480 --> 00:55:21,520
existing ones that are defined and uh

1267
00:55:21,520 --> 00:55:23,359
let's say today

1268
00:55:23,359 --> 00:55:24,960
we can discuss further on the list

1269
00:55:24,960 --> 00:55:27,599
perhaps if you have any queries um

1270
00:55:27,599 --> 00:55:30,160
uh okay okay thank you greg please go

1271
00:55:30,160 --> 00:55:31,359
ahead

1272
00:55:31,359 --> 00:55:33,760
thank you uh greg mursky erickson i i

1273
00:55:33,760 --> 00:55:35,920
think that my comment is in continuation

1274
00:55:35,920 --> 00:55:39,760
of jim common because it's not clear

1275
00:55:39,760 --> 00:55:42,000
whether this argument really defines the

1276
00:55:42,000 --> 00:55:46,400
behavior or capability advertisement

1277
00:55:46,400 --> 00:55:49,760
what's not clear in particular is uh how

1278
00:55:49,760 --> 00:55:52,559
that net is relevant to this so

1279
00:55:52,559 --> 00:55:55,680
basically what you expect

1280
00:55:55,680 --> 00:55:58,160
if this uh argument

1281
00:55:58,160 --> 00:56:00,480
indicates that that net is it support of

1282
00:56:00,480 --> 00:56:03,599
that net and what's else

1283
00:56:03,599 --> 00:56:05,040
okay thank you

1284
00:56:05,040 --> 00:56:06,960
that's great okay thanks for your

1285
00:56:06,960 --> 00:56:10,799
question uh we just defined a general

1286
00:56:10,799 --> 00:56:13,839
a general space for the

1287
00:56:13,839 --> 00:56:17,119
multiple or the many features

1288
00:56:17,119 --> 00:56:19,760
so the dead net or the network slicing

1289
00:56:19,760 --> 00:56:22,640
or the api 6 is just a

1290
00:56:22,640 --> 00:56:24,799
structure

1291
00:56:24,799 --> 00:56:27,760
instruction example feature for this

1292
00:56:27,760 --> 00:56:29,599
and

1293
00:56:29,599 --> 00:56:32,880
and whether it is fit uh it is suitable

1294
00:56:32,880 --> 00:56:36,319
to put their net here and we can discuss

1295
00:56:36,319 --> 00:56:37,359
uh

1296
00:56:37,359 --> 00:56:40,400
further thank you

1297
00:56:41,200 --> 00:56:42,160
robin

1298
00:56:42,160 --> 00:56:43,680
please go ahead

1299
00:56:43,680 --> 00:56:46,799
okay i this is a quick reply about this

1300
00:56:46,799 --> 00:56:50,079
about this the questions uh in fact this

1301
00:56:50,079 --> 00:56:51,119
the

1302
00:56:51,119 --> 00:56:54,880
arguments should be uh processed in the

1303
00:56:54,880 --> 00:56:58,799
local node but because the instruction

1304
00:56:58,799 --> 00:56:59,920
to be

1305
00:56:59,920 --> 00:57:03,599
processed by the specified segment

1306
00:57:03,599 --> 00:57:05,599
there can be multiple

1307
00:57:05,599 --> 00:57:08,400
arguments for different features

1308
00:57:08,400 --> 00:57:11,440
so we need a template we all need a

1309
00:57:11,440 --> 00:57:14,640
structure the arguments to be defined

1310
00:57:14,640 --> 00:57:16,480
for this purpose

1311
00:57:16,480 --> 00:57:20,559
but we ask this these comments we should

1312
00:57:20,559 --> 00:57:23,359
refine this draft to explain the use

1313
00:57:23,359 --> 00:57:24,559
case

1314
00:57:24,559 --> 00:57:25,839
more

1315
00:57:25,839 --> 00:57:26,450
okay

1316
00:57:26,450 --> 00:57:28,160
[Music]

1317
00:57:28,160 --> 00:57:30,879
thanks robin

1318
00:57:32,720 --> 00:57:36,879
okay uh fan please go ahead

1319
00:57:37,359 --> 00:57:40,720
hi um this is faryang from huawei and on

1320
00:57:40,720 --> 00:57:42,960
behalf of the other courses i present

1321
00:57:42,960 --> 00:57:45,839
this redundancy policy for preventive

1322
00:57:45,839 --> 00:57:48,079
protection

1323
00:57:48,079 --> 00:57:50,720
next please

1324
00:57:51,119 --> 00:57:52,720
yeah here's some background of the

1325
00:57:52,720 --> 00:57:54,400
redundancy protection

1326
00:57:54,400 --> 00:57:56,400
and it is a generalized protection

1327
00:57:56,400 --> 00:57:59,440
mechanism that um

1328
00:57:59,440 --> 00:58:02,480
and and used in used in the context of

1329
00:58:02,480 --> 00:58:05,200
of the segment routing paradigm

1330
00:58:05,200 --> 00:58:06,000
and

1331
00:58:06,000 --> 00:58:08,400
it it replicates the service package on

1332
00:58:08,400 --> 00:58:11,599
the redundancy note uh yeah shown in the

1333
00:58:11,599 --> 00:58:14,000
in the figure it replicates the service

1334
00:58:14,000 --> 00:58:16,000
packet on the redundancy node and

1335
00:58:16,000 --> 00:58:18,720
transmit the copies of the service

1336
00:58:18,720 --> 00:58:21,599
packets uh from different uh destroyed

1337
00:58:21,599 --> 00:58:22,480
paths

1338
00:58:22,480 --> 00:58:25,359
and transmit the first correct and

1339
00:58:25,359 --> 00:58:27,359
illuminate the redundancy packet as the

1340
00:58:27,359 --> 00:58:28,559
merging node

1341
00:58:28,559 --> 00:58:31,599
and to to be clarified it

1342
00:58:31,599 --> 00:58:34,079
the the redundancy protection is

1343
00:58:34,079 --> 00:58:35,680
triggered

1344
00:58:35,680 --> 00:58:39,040
is inspired by the then that

1345
00:58:39,040 --> 00:58:41,520
packet replication illumination and

1346
00:58:41,520 --> 00:58:43,359
ordering functions

1347
00:58:43,359 --> 00:58:44,720
but it

1348
00:58:44,720 --> 00:58:45,839
it is

1349
00:58:45,839 --> 00:58:49,200
extended to provide

1350
00:58:49,200 --> 00:58:51,599
provide production protection functions

1351
00:58:51,599 --> 00:58:55,119
to sr to segment routing and uh here

1352
00:58:55,119 --> 00:58:57,839
many will use to uh draft

1353
00:58:57,839 --> 00:58:59,040
to

1354
00:58:59,040 --> 00:59:01,520
introduce this uh mechanism

1355
00:59:01,520 --> 00:59:03,280
the first draft is

1356
00:59:03,280 --> 00:59:05,760
was adopted by spring last year

1357
00:59:05,760 --> 00:59:08,319
introduced the redundancy seed and

1358
00:59:08,319 --> 00:59:11,040
merging seed in data plane and to

1359
00:59:11,040 --> 00:59:13,760
specify the endpoint behavior

1360
00:59:13,760 --> 00:59:16,240
and this draft introduced the redundancy

1361
00:59:16,240 --> 00:59:19,920
policy in control plan to instruct the

1362
00:59:19,920 --> 00:59:21,760
instructor multiple redundancy

1363
00:59:21,760 --> 00:59:24,799
forwarding pass from controller to the

1364
00:59:24,799 --> 00:59:28,559
redundancy node next

1365
00:59:30,559 --> 00:59:32,480
so what is the redundancy

1366
00:59:32,480 --> 00:59:35,280
redundancy policy it is defined as a

1367
00:59:35,280 --> 00:59:38,240
variant of the sr policy and with

1368
00:59:38,240 --> 00:59:41,680
minimum changes so it inherits the the

1369
00:59:41,680 --> 00:59:44,400
main structure and the most attribute uh

1370
00:59:44,400 --> 00:59:46,960
from of the sr policy

1371
00:59:46,960 --> 00:59:49,200
and the function is to instruct the

1372
00:59:49,200 --> 00:59:51,680
replication of the server's packet and

1373
00:59:51,680 --> 00:59:53,920
assign the multiple redundancy

1374
00:59:53,920 --> 00:59:55,280
forwarding pass

1375
00:59:55,280 --> 00:59:59,760
so um we actually we specify it in

1376
00:59:59,760 --> 01:00:00,799
um

1377
01:00:00,799 --> 01:00:03,040
there are actually it works in two

1378
01:00:03,040 --> 01:00:06,240
scenarios and and the scenario is shown

1379
01:00:06,240 --> 01:00:09,280
in the in the two figures below um the

1380
01:00:09,280 --> 01:00:10,720
main difference between the two

1381
01:00:10,720 --> 01:00:13,440
scenarios is that whether the

1382
01:00:13,440 --> 01:00:15,680
the redundancy whether the head end of

1383
01:00:15,680 --> 01:00:18,960
the head and node of the sr domain is

1384
01:00:18,960 --> 01:00:22,799
the redundancy node or not so it did it

1385
01:00:22,799 --> 01:00:25,440
if it is the if the head-end notice the

1386
01:00:25,440 --> 01:00:27,280
redundancy node

1387
01:00:27,280 --> 01:00:29,359
it means that there's no necessary to

1388
01:00:29,359 --> 01:00:32,559
use the uh redundancy seat at the at the

1389
01:00:32,559 --> 01:00:35,680
header so that it did so it determines

1390
01:00:35,680 --> 01:00:36,480
the

1391
01:00:36,480 --> 01:00:40,240
whether we used to identify seed or not

1392
01:00:40,240 --> 01:00:43,240
next

1393
01:00:44,000 --> 01:00:46,799
um in this picture in this page that we

1394
01:00:46,799 --> 01:00:49,520
used uh an example to explain the

1395
01:00:49,520 --> 01:00:50,880
structure and the behaviors of the

1396
01:00:50,880 --> 01:00:54,319
radiances node and uh in the figure on

1397
01:00:54,319 --> 01:00:55,520
the right

1398
01:00:55,520 --> 01:00:57,920
there are three um folding paths between

1399
01:00:57,920 --> 01:01:00,720
the arnold and m note so we use the

1400
01:01:00,720 --> 01:01:02,880
first two blue um

1401
01:01:02,880 --> 01:01:06,160
first two um forwarding paths in blue as

1402
01:01:06,160 --> 01:01:08,480
the redundancy note as the redundancy

1403
01:01:08,480 --> 01:01:09,599
path

1404
01:01:09,599 --> 01:01:12,319
so they are they are the seed list one

1405
01:01:12,319 --> 01:01:14,480
as they list two in the first candidate

1406
01:01:14,480 --> 01:01:15,920
passive one

1407
01:01:15,920 --> 01:01:19,040
and the last uh the last the third

1408
01:01:19,040 --> 01:01:22,799
folding pass in ring and is a is

1409
01:01:22,799 --> 01:01:25,040
described in the second candidate past

1410
01:01:25,040 --> 01:01:26,480
cp2

1411
01:01:26,480 --> 01:01:28,640
as these list three

1412
01:01:28,640 --> 01:01:31,440
so in this redundancy policy that will

1413
01:01:31,440 --> 01:01:34,720
introduce a new optional uh attribute at

1414
01:01:34,720 --> 01:01:37,920
the candidate pass level so it uh so if

1415
01:01:37,920 --> 01:01:39,920
we use the

1416
01:01:39,920 --> 01:01:42,720
the head attribute is for the flag so we

1417
01:01:42,720 --> 01:01:45,359
define one flag the redundancy flag to

1418
01:01:45,359 --> 01:01:47,599
indicate the type of the candidate pass

1419
01:01:47,599 --> 01:01:50,480
is used for redundancy forwarding

1420
01:01:50,480 --> 01:01:53,440
so uh come back to the example here that

1421
01:01:53,440 --> 01:01:54,559
if um

1422
01:01:54,559 --> 01:01:55,280
uh

1423
01:01:55,280 --> 01:01:57,039
when the with the first candidate pass

1424
01:01:57,039 --> 01:02:01,599
cp1 is selected as the uh best valid uh

1425
01:02:01,599 --> 01:02:03,760
uh can they pass for this redundancy

1426
01:02:03,760 --> 01:02:06,960
policy and this um

1427
01:02:06,960 --> 01:02:09,520
all the syllabus are used for all these

1428
01:02:09,520 --> 01:02:11,920
lists in this um candid pass are used

1429
01:02:11,920 --> 01:02:14,160
for the redundancy forwarding and not

1430
01:02:14,160 --> 01:02:17,599
for the for the load balancing functions

1431
01:02:17,599 --> 01:02:20,400
so at the same time the weight of these

1432
01:02:20,400 --> 01:02:23,920
list is not applicable

1433
01:02:24,799 --> 01:02:27,280
and next

1434
01:02:31,520 --> 01:02:34,240
yeah as we've shown that in the in the

1435
01:02:34,240 --> 01:02:36,799
scenarios that there are the

1436
01:02:36,799 --> 01:02:38,799
this um

1437
01:02:38,799 --> 01:02:40,640
redundancy policy can be optionally

1438
01:02:40,640 --> 01:02:42,480
associated with the bounty seed and

1439
01:02:42,480 --> 01:02:43,920
actually the body seeds should be the

1440
01:02:43,920 --> 01:02:45,680
redemptive seed

1441
01:02:45,680 --> 01:02:49,680
so and it is it is defined as optionally

1442
01:02:49,680 --> 01:02:52,640
as optional

1443
01:02:53,599 --> 01:02:56,400
and next please

1444
01:02:59,520 --> 01:03:03,200
uh here i list several um separate draft

1445
01:03:03,200 --> 01:03:04,000
and

1446
01:03:04,000 --> 01:03:06,000
and as a

1447
01:03:06,000 --> 01:03:09,599
other actions that to make this function

1448
01:03:09,599 --> 01:03:13,039
make this mechanism complete and um yeah

1449
01:03:13,039 --> 01:03:16,480
i will also present the bgp and pcep

1450
01:03:16,480 --> 01:03:18,880
extensions in the following

1451
01:03:18,880 --> 01:03:20,640
working group sessions

1452
01:03:20,640 --> 01:03:22,879
next

1453
01:03:26,400 --> 01:03:29,119
yeah the the next steps that we mainly

1454
01:03:29,119 --> 01:03:31,359
want to uh have the discussion on the

1455
01:03:31,359 --> 01:03:34,319
melody stored on the on the meeting to

1456
01:03:34,319 --> 01:03:36,960
define the solution and also keep the

1457
01:03:36,960 --> 01:03:38,880
keep in line with the sr policy if

1458
01:03:38,880 --> 01:03:40,079
necessary

1459
01:03:40,079 --> 01:03:44,240
and the further uh possible discussion

1460
01:03:44,240 --> 01:03:47,440
on the alternative solutions um people

1461
01:03:47,440 --> 01:03:49,920
may want to discuss whether

1462
01:03:49,920 --> 01:03:51,359
why not use the

1463
01:03:51,359 --> 01:03:53,680
use multiple candidate paths

1464
01:03:53,680 --> 01:03:55,680
for the for the redundancy forwarding

1465
01:03:55,680 --> 01:03:57,280
forwarding pass

1466
01:03:57,280 --> 01:03:58,880
and

1467
01:03:58,880 --> 01:04:00,880
we're happy to receive and comments and

1468
01:04:00,880 --> 01:04:04,400
suggestions and thank you

1469
01:04:04,559 --> 01:04:05,839
thank you fam we have a couple of

1470
01:04:05,839 --> 01:04:08,079
questions on the queue mike uh please go

1471
01:04:08,079 --> 01:04:09,920
ahead

1472
01:04:09,920 --> 01:04:12,480
this is mike from cisco systems

1473
01:04:12,480 --> 01:04:14,559
i just want to make a comment that i

1474
01:04:14,559 --> 01:04:17,119
think it's it would be better if you

1475
01:04:17,119 --> 01:04:20,079
replicate the packets across candidate

1476
01:04:20,079 --> 01:04:23,119
paths rather than across segment lists

1477
01:04:23,119 --> 01:04:25,200
because uh if you replicate it across

1478
01:04:25,200 --> 01:04:27,599
the center yeah yeah i think the load

1479
01:04:27,599 --> 01:04:29,359
balancing

1480
01:04:29,359 --> 01:04:32,000
of the sr policy so you can't uh you

1481
01:04:32,000 --> 01:04:33,920
know have load balancing

1482
01:04:33,920 --> 01:04:35,839
anymore and like you say the weight is

1483
01:04:35,839 --> 01:04:37,359
not applicable right so the weight is

1484
01:04:37,359 --> 01:04:39,599
there for load balancing

1485
01:04:39,599 --> 01:04:40,880
so

1486
01:04:40,880 --> 01:04:42,559
it's perfectly possible to do what

1487
01:04:42,559 --> 01:04:44,400
you're saying uh if you

1488
01:04:44,400 --> 01:04:46,319
replicate across the candidate paths

1489
01:04:46,319 --> 01:04:47,760
rather than

1490
01:04:47,760 --> 01:04:51,440
uh segmentalists that's all thanks

1491
01:04:51,440 --> 01:04:53,280
yeah thank you for the comments actually

1492
01:04:53,280 --> 01:04:55,680
i we will think about the which one is

1493
01:04:55,680 --> 01:04:57,839
which solution would be better or will

1494
01:04:57,839 --> 01:04:58,799
be

1495
01:04:58,799 --> 01:05:00,160
more um

1496
01:05:00,160 --> 01:05:01,280
uh

1497
01:05:01,280 --> 01:05:03,760
more suitable for for uh for different

1498
01:05:03,760 --> 01:05:08,400
uh scenarios but we can move to sili

1499
01:05:09,039 --> 01:05:12,720
to have more discussion yeah

1500
01:05:13,920 --> 01:05:15,760
israel

1501
01:05:15,760 --> 01:05:19,160
please go ahead

1502
01:05:28,559 --> 01:05:32,400
israel please go ahead you're on thecube

1503
01:05:33,760 --> 01:05:36,720
can can everyone hear me yes we can now

1504
01:05:36,720 --> 01:05:38,960
yeah israel at t uh in in the material

1505
01:05:38,960 --> 01:05:40,799
you mentioned a binding sit you also

1506
01:05:40,799 --> 01:05:42,240
mentioned something referred to as a

1507
01:05:42,240 --> 01:05:44,960
redundancy uh binding set however what

1508
01:05:44,960 --> 01:05:46,319
wasn't clear

1509
01:05:46,319 --> 01:05:48,400
is if the redundancy

1510
01:05:48,400 --> 01:05:49,280
uh

1511
01:05:49,280 --> 01:05:51,599
it takes all of the semantics of a

1512
01:05:51,599 --> 01:05:53,200
standard binding set or if the standard

1513
01:05:53,200 --> 01:05:55,119
bindings it can also function

1514
01:05:55,119 --> 01:05:58,240
as a redundancy uh sid can you clarify

1515
01:05:58,240 --> 01:06:00,479
that

1516
01:06:02,880 --> 01:06:04,960
yeah the redundancy seed

1517
01:06:04,960 --> 01:06:07,680
um that we defined in the previous in in

1518
01:06:07,680 --> 01:06:11,599
the first draft and it is uh we

1519
01:06:11,599 --> 01:06:14,079
we defined it as a

1520
01:06:14,079 --> 01:06:16,319
as a variant of the of the

1521
01:06:16,319 --> 01:06:20,079
bunking seed um i think it takes uh

1522
01:06:20,079 --> 01:06:22,480
issue takes all the all the functions

1523
01:06:22,480 --> 01:06:24,319
from the all the semantics from the

1524
01:06:24,319 --> 01:06:25,760
pounding seed but

1525
01:06:25,760 --> 01:06:28,400
uh add more uh functions like the

1526
01:06:28,400 --> 01:06:30,640
replication of the packet

1527
01:06:30,640 --> 01:06:33,280
to this new spending seat

1528
01:06:33,280 --> 01:06:36,799
yeah but but if you have the after any

1529
01:06:36,799 --> 01:06:39,440
doubts about the semantics if if the

1530
01:06:39,440 --> 01:06:42,160
semantics is correct or not we can have

1531
01:06:42,160 --> 01:06:45,280
further discussion so far i think he it

1532
01:06:45,280 --> 01:06:48,079
inhabits it has the same

1533
01:06:48,079 --> 01:06:50,640
okay thank you

1534
01:06:50,640 --> 01:06:53,680
uh greg yes go ahead okay uh greg mursky

1535
01:06:53,680 --> 01:06:55,520
erickson um

1536
01:06:55,520 --> 01:06:57,839
one question i have and then probably a

1537
01:06:57,839 --> 01:06:59,680
recommendation

1538
01:06:59,680 --> 01:07:00,480
so

1539
01:07:00,480 --> 01:07:02,880
the merge function works on packet by

1540
01:07:02,880 --> 01:07:05,520
packet basis or

1541
01:07:05,520 --> 01:07:08,319
flow basis

1542
01:07:11,039 --> 01:07:12,720
yeah

1543
01:07:12,720 --> 01:07:14,559
yeah the margin

1544
01:07:14,559 --> 01:07:16,960
for the merging function that we define

1545
01:07:16,960 --> 01:07:18,319
as uh

1546
01:07:18,319 --> 01:07:20,160
as a merging seed

1547
01:07:20,160 --> 01:07:23,119
so i suppose it should be a percent

1548
01:07:23,119 --> 01:07:25,280
packet by packet

1549
01:07:25,280 --> 01:07:29,039
okay um so uh in this case it looks very

1550
01:07:29,039 --> 01:07:31,680
similar to the uh prior functionality

1551
01:07:31,680 --> 01:07:33,520
defined in the depthnet so packet

1552
01:07:33,520 --> 01:07:35,680
replication elimination

1553
01:07:35,680 --> 01:07:38,640
and order preservation and so i think

1554
01:07:38,640 --> 01:07:40,240
that

1555
01:07:40,240 --> 01:07:42,400
you might consider it presenting it and

1556
01:07:42,400 --> 01:07:44,240
sharing with the debt networking group

1557
01:07:44,240 --> 01:07:47,680
at some point thank you

1558
01:07:48,799 --> 01:07:50,400
yeah thank you actually we have the

1559
01:07:50,400 --> 01:07:52,000
previous discussion about the

1560
01:07:52,000 --> 01:07:54,720
relationship between the uh between here

1561
01:07:54,720 --> 01:07:58,079
and then that so uh if the people still

1562
01:07:58,079 --> 01:08:00,720
have the doubts or have not clarified we

1563
01:08:00,720 --> 01:08:03,760
will clarify it in in future and found

1564
01:08:03,760 --> 01:08:06,160
the on the mailing list and the draft

1565
01:08:06,160 --> 01:08:09,319
thank you

1566
01:08:10,400 --> 01:08:13,119
thank you fan

1567
01:08:13,200 --> 01:08:17,600
uh you song uh you're up please go ahead

1568
01:08:17,600 --> 01:08:20,799
hi uh thank you can you hear me well

1569
01:08:20,799 --> 01:08:22,399
yes we can

1570
01:08:22,399 --> 01:08:23,839
oh thanks jim

1571
01:08:23,839 --> 01:08:26,880
uh hi this is josue and i will introduce

1572
01:08:26,880 --> 01:08:29,000
our work about segment routine for

1573
01:08:29,000 --> 01:08:30,560
newhamster.net

1574
01:08:30,560 --> 01:08:34,279
next slide please

1575
01:08:38,560 --> 01:08:41,359
uh this page i just want to show a very

1576
01:08:41,359 --> 01:08:43,279
brief introduction to

1577
01:08:43,279 --> 01:08:46,158
uh the audience what is that net uh

1578
01:08:46,158 --> 01:08:48,399
actually based on the

1579
01:08:48,399 --> 01:08:50,238
definition erc

1580
01:08:50,238 --> 01:08:52,640
8655

1581
01:08:52,640 --> 01:08:54,960
there are three key features for the net

1582
01:08:54,960 --> 01:08:58,158
cues one of them is upon the latency and

1583
01:08:58,158 --> 01:08:59,839
bonded variation

1584
01:08:59,839 --> 01:09:02,640
uh that means there will be minimal and

1585
01:09:02,640 --> 01:09:04,799
maximum end to end latency from source

1586
01:09:04,799 --> 01:09:08,719
to destination and also zero packet loss

1587
01:09:08,719 --> 01:09:11,040
which means there there will be

1588
01:09:11,040 --> 01:09:14,640
uh zero delay when packet switch when

1589
01:09:14,640 --> 01:09:16,080
past switching

1590
01:09:16,080 --> 01:09:18,399
and also

1591
01:09:18,399 --> 01:09:20,960
upper upper bound on out of order packet

1592
01:09:20,960 --> 01:09:23,839
delivery and the reordering function

1593
01:09:23,839 --> 01:09:24,640
will

1594
01:09:24,640 --> 01:09:27,679
uh will do its work to make the the

1595
01:09:27,679 --> 01:09:29,839
packet in order again

1596
01:09:29,839 --> 01:09:32,399
so all these features will be achieved

1597
01:09:32,399 --> 01:09:35,198
by three technologies as resource

1598
01:09:35,198 --> 01:09:36,560
allocation

1599
01:09:36,560 --> 01:09:40,158
service protection and explicit routines

1600
01:09:40,158 --> 01:09:43,359
the existing technologies can be reused

1601
01:09:43,359 --> 01:09:46,158
or new functionalities or technologies

1602
01:09:46,158 --> 01:09:48,799
can be introduced to achieve the

1603
01:09:48,799 --> 01:09:50,479
standard qs

1604
01:09:50,479 --> 01:09:52,080
functions or

1605
01:09:52,080 --> 01:09:54,320
sla guarantees

1606
01:09:54,320 --> 01:09:57,120
this document is to provide solutions

1607
01:09:57,120 --> 01:09:59,199
for boundary latency with segment

1608
01:09:59,199 --> 01:10:00,640
routing

1609
01:10:00,640 --> 01:10:05,120
for that net next slide please

1610
01:10:07,520 --> 01:10:08,480
uh

1611
01:10:08,480 --> 01:10:12,000
actually as we all know uh sr mps and

1612
01:10:12,000 --> 01:10:15,199
sr6 is able to provide explicit routine

1613
01:10:15,199 --> 01:10:18,480
with which is also requested by that net

1614
01:10:18,480 --> 01:10:20,640
and

1615
01:10:20,640 --> 01:10:23,520
for the convenience of uh presentation i

1616
01:10:23,520 --> 01:10:26,679
just take srs6 and as an example and

1617
01:10:26,679 --> 01:10:29,440
srmprc is very similar

1618
01:10:29,440 --> 01:10:32,719
um with source routing it could steer

1619
01:10:32,719 --> 01:10:34,400
that then airflows go through the

1620
01:10:34,400 --> 01:10:37,440
network according to an explicit routine

1621
01:10:37,440 --> 01:10:40,320
by second releasing srh but only

1622
01:10:40,320 --> 01:10:42,560
explicit routine is not enough for

1623
01:10:42,560 --> 01:10:46,000
guaranteed bonded latency so what's more

1624
01:10:46,000 --> 01:10:48,880
next slide please

1625
01:10:51,679 --> 01:10:55,600
what we are proposing is srv6 extensions

1626
01:10:55,600 --> 01:10:58,080
should be defined to provide explicit

1627
01:10:58,080 --> 01:11:00,560
routine and upon the latency

1628
01:11:00,560 --> 01:11:03,920
um the the basic idea is very

1629
01:11:03,920 --> 01:11:06,239
simple if we just

1630
01:11:06,239 --> 01:11:08,960
indicate a explicit routine along the

1631
01:11:08,960 --> 01:11:11,120
past if we can guarantee the boundary

1632
01:11:11,120 --> 01:11:12,480
latency for

1633
01:11:12,480 --> 01:11:14,800
each half inside of the path the

1634
01:11:14,800 --> 01:11:17,280
end-to-end latency can be guaranteed

1635
01:11:17,280 --> 01:11:19,360
so here we

1636
01:11:19,360 --> 01:11:22,400
we just use network programming provided

1637
01:11:22,400 --> 01:11:25,120
by sr6 which can give packet

1638
01:11:25,120 --> 01:11:26,880
instructions in every node along the

1639
01:11:26,880 --> 01:11:30,480
path to guarantee the bonding latency

1640
01:11:30,480 --> 01:11:32,640
so what kind of instructions is

1641
01:11:32,640 --> 01:11:34,800
requested in this case

1642
01:11:34,800 --> 01:11:37,679
next slide please

1643
01:11:39,199 --> 01:11:41,760
uh here i just referred to another

1644
01:11:41,760 --> 01:11:44,640
document we have another document called

1645
01:11:44,640 --> 01:11:46,880
upon the linus information which is

1646
01:11:46,880 --> 01:11:48,640
introduced uh

1647
01:11:48,640 --> 01:11:51,040
for body latency function

1648
01:11:51,040 --> 01:11:54,159
the the document will be presented in

1649
01:11:54,159 --> 01:11:56,239
the networking group the basic idea is

1650
01:11:56,239 --> 01:12:00,000
very simple uh we just want to avoid

1651
01:12:00,000 --> 01:12:02,320
going into details of different hardware

1652
01:12:02,320 --> 01:12:04,320
implementations for guaranteed on the

1653
01:12:04,320 --> 01:12:06,880
latency we just

1654
01:12:06,880 --> 01:12:09,520
define a concept a general concept of

1655
01:12:09,520 --> 01:12:12,640
under latency information which have uh

1656
01:12:12,640 --> 01:12:15,920
eight we defined in existing version

1657
01:12:15,920 --> 01:12:16,800
eight

1658
01:12:16,800 --> 01:12:19,679
body latency information types and we

1659
01:12:19,679 --> 01:12:21,679
then cover most of the

1660
01:12:21,679 --> 01:12:25,120
cases we have met the mechanisms to

1661
01:12:25,120 --> 01:12:28,000
guarantee bonding latency and also the

1662
01:12:28,000 --> 01:12:30,000
the boundary latency information value

1663
01:12:30,000 --> 01:12:33,040
is specified uh value of

1664
01:12:33,040 --> 01:12:36,000
of bli to provide guidance for packet

1665
01:12:36,000 --> 01:12:37,440
processing with the meaning of a

1666
01:12:37,440 --> 01:12:40,000
particular bi type as i have mentioned

1667
01:12:40,000 --> 01:12:42,560
the the eight one of the eight type

1668
01:12:42,560 --> 01:12:45,199
in the table in the right hand

1669
01:12:45,199 --> 01:12:48,480
so the information pair bi type and the

1670
01:12:48,480 --> 01:12:51,280
blf value should be indicated by srv6

1671
01:12:51,280 --> 01:12:52,719
data plan to

1672
01:12:52,719 --> 01:12:54,640
provide a boundary latency

1673
01:12:54,640 --> 01:12:56,800
next slide please

1674
01:12:56,800 --> 01:12:59,199
i notice as greg is in the queue do you

1675
01:12:59,199 --> 01:13:02,000
want to ask now or after

1676
01:13:02,000 --> 01:13:05,760
i finish the presentation

1677
01:13:05,760 --> 01:13:08,239
go ahead greg okay thank you uh greg

1678
01:13:08,239 --> 01:13:11,840
murray erickson so uh can you clarify uh

1679
01:13:11,840 --> 01:13:13,920
when you say guarantee

1680
01:13:13,920 --> 01:13:16,080
what particular technique you use to

1681
01:13:16,080 --> 01:13:18,800
guarantee the latency or

1682
01:13:18,800 --> 01:13:21,040
jitter or any performance

1683
01:13:21,040 --> 01:13:22,000
behave

1684
01:13:22,000 --> 01:13:22,960
metric

1685
01:13:22,960 --> 01:13:24,560
value

1686
01:13:24,560 --> 01:13:27,840
uh i think here we will try to go along

1687
01:13:27,840 --> 01:13:29,760
with the definition internet because

1688
01:13:29,760 --> 01:13:30,960
then that

1689
01:13:30,960 --> 01:13:32,560
internet queues

1690
01:13:32,560 --> 01:13:34,400
the terminologies of

1691
01:13:34,400 --> 01:13:36,640
guarantee in my understanding is to

1692
01:13:36,640 --> 01:13:37,840
provide

1693
01:13:37,840 --> 01:13:40,800
an expected

1694
01:13:40,800 --> 01:13:43,040
bounded latency which means that we know

1695
01:13:43,040 --> 01:13:45,440
the maximum bandwidth and the the

1696
01:13:45,440 --> 01:13:47,840
minimum bandwidth uh from the source to

1697
01:13:47,840 --> 01:13:49,600
destination

1698
01:13:49,600 --> 01:13:52,320
uh you're right so

1699
01:13:52,320 --> 01:13:54,719
the in that net i think that there is no

1700
01:13:54,719 --> 01:13:57,520
uh discussion of guarantee

1701
01:13:57,520 --> 01:14:01,840
uh the mechanisms discussed

1702
01:14:02,000 --> 01:14:04,960
tsn or

1703
01:14:04,960 --> 01:14:07,360
priof

1704
01:14:07,360 --> 01:14:10,560
improve or reduce certain behaviors but

1705
01:14:10,560 --> 01:14:14,920
they provide no guarantee

1706
01:14:15,199 --> 01:14:17,280
actually if there is only only time

1707
01:14:17,280 --> 01:14:20,400
division multiplexing um can provide the

1708
01:14:20,400 --> 01:14:21,840
guarantee

1709
01:14:21,840 --> 01:14:24,239
in a packet multiplexing

1710
01:14:24,239 --> 01:14:29,320
i believe that we have no guarantees

1711
01:14:29,679 --> 01:14:32,400
if there is no guarantee there is

1712
01:14:32,400 --> 01:14:35,440
no meaning to mention that we can expect

1713
01:14:35,440 --> 01:14:37,840
a particular value of the maximum or

1714
01:14:37,840 --> 01:14:39,679
minimum of the

1715
01:14:39,679 --> 01:14:41,520
latency

1716
01:14:41,520 --> 01:14:43,840
i believe the detailed definitions of

1717
01:14:43,840 --> 01:14:46,400
these are said to be det net this

1718
01:14:46,400 --> 01:14:48,520
clearly will not advance until the

1719
01:14:48,520 --> 01:14:51,600
dependent.net stuff is adopted

1720
01:14:51,600 --> 01:14:52,880
and so

1721
01:14:52,880 --> 01:14:54,960
we'll leave it to det net to debate the

1722
01:14:54,960 --> 01:14:57,440
exact way to describe these various

1723
01:14:57,440 --> 01:15:00,560
properties because it's their space the

1724
01:15:00,560 --> 01:15:02,880
only question for spring would be how to

1725
01:15:02,880 --> 01:15:06,080
indicate that net properties in a spring

1726
01:15:06,080 --> 01:15:08,800
segment list

1727
01:15:08,840 --> 01:15:11,760
okay all right you may continue

1728
01:15:11,760 --> 01:15:14,719
yeah thank you thank you joy i i agree

1729
01:15:14,719 --> 01:15:17,120
i think the the the definition of the

1730
01:15:17,120 --> 01:15:19,760
terminology or the meaning of uh the

1731
01:15:19,760 --> 01:15:22,560
terminology we can leave it to that net

1732
01:15:22,560 --> 01:15:25,440
and this page i just want to if

1733
01:15:25,440 --> 01:15:28,640
we want to summary the the ideas from

1734
01:15:28,640 --> 01:15:31,120
the previous slides uh

1735
01:15:31,120 --> 01:15:34,560
bundy latency information is used to uh

1736
01:15:34,560 --> 01:15:36,560
to guide forwarding in the network

1737
01:15:36,560 --> 01:15:39,920
device which could be initiated in srv6

1738
01:15:39,920 --> 01:15:42,000
data plan for example also

1739
01:15:42,000 --> 01:15:45,440
similar as a mps

1740
01:15:45,440 --> 01:15:48,719
sr data plan with the characteristics of

1741
01:15:48,719 --> 01:15:50,320
segment routing the boundary latency

1742
01:15:50,320 --> 01:15:52,640
information could be coupled with the

1743
01:15:52,640 --> 01:15:55,360
explicit pass to provide the latency

1744
01:15:55,360 --> 01:15:58,480
guarantee in each hub or

1745
01:15:58,480 --> 01:16:00,800
both it can be node or adjacency

1746
01:16:00,800 --> 01:16:04,159
indicated by the segment list

1747
01:16:04,159 --> 01:16:06,320
in order to achieve this we in this

1748
01:16:06,320 --> 01:16:08,400
documentary we've introduced two new

1749
01:16:08,400 --> 01:16:11,120
variations of uh ndo

1750
01:16:11,120 --> 01:16:12,960
and dot x seed

1751
01:16:12,960 --> 01:16:15,120
uh they are defined for that net

1752
01:16:15,120 --> 01:16:17,520
boundary latency uh which are called and

1753
01:16:17,520 --> 01:16:19,040
dot x

1754
01:16:19,040 --> 01:16:23,600
l and n dot x bli uh the difference uh

1755
01:16:23,600 --> 01:16:26,560
main difference of these two cs is

1756
01:16:26,560 --> 01:16:30,239
whether to carry bis ex implicitly in

1757
01:16:30,239 --> 01:16:34,080
the encapsulation for uh and dot x blc

1758
01:16:34,080 --> 01:16:36,960
uh it has two meanings one is uh to

1759
01:16:36,960 --> 01:16:39,120
identify an interface or link just like

1760
01:16:39,120 --> 01:16:41,440
the normal or the json c the second

1761
01:16:41,440 --> 01:16:43,920
meaning is to identify the information

1762
01:16:43,920 --> 01:16:47,520
pair of bli type and the br value on the

1763
01:16:47,520 --> 01:16:48,400
interface

1764
01:16:48,400 --> 01:16:50,320
uh or linked to guaranteed funding

1765
01:16:50,320 --> 01:16:54,320
latency so there will be a multiple and

1766
01:16:54,320 --> 01:16:59,040
dot x blcs for one adjacency

1767
01:16:59,040 --> 01:17:01,920
in order to differentiate different bi

1768
01:17:01,920 --> 01:17:03,760
type and the br value

1769
01:17:03,760 --> 01:17:06,960
to guide the packet forwarding

1770
01:17:06,960 --> 01:17:09,760
and another variation is and doltech's

1771
01:17:09,760 --> 01:17:13,280
bli seed it also has two meanings the

1772
01:17:13,280 --> 01:17:15,600
one the first one is to identify

1773
01:17:15,600 --> 01:17:18,480
uh interface or link uh as the norm of

1774
01:17:18,480 --> 01:17:20,800
the tcc seed and uh second is to

1775
01:17:20,800 --> 01:17:23,120
identify the vi type to guarantee

1776
01:17:23,120 --> 01:17:26,159
boundary latency uh in this case the the

1777
01:17:26,159 --> 01:17:28,640
bli value will be

1778
01:17:28,640 --> 01:17:31,760
carried in the encapsulation of

1779
01:17:31,760 --> 01:17:35,280
the srv6 packet now there are three

1780
01:17:35,280 --> 01:17:37,199
possible options have already been

1781
01:17:37,199 --> 01:17:39,520
defined in this document uh the first

1782
01:17:39,520 --> 01:17:42,480
one is the arguments in the ant dot

1783
01:17:42,480 --> 01:17:44,879
effects

1784
01:17:45,360 --> 01:17:49,600
and the second one is srh tlv for bi uh

1785
01:17:49,600 --> 01:17:51,360
will be used together with endodontics

1786
01:17:51,360 --> 01:17:55,480
vli seed and

1787
01:18:04,480 --> 01:18:08,560
you just yeah we just lost you son yes

1788
01:18:08,560 --> 01:18:13,320
we just lost you briefly there you song

1789
01:18:13,440 --> 01:18:15,760
how about okay you're back go ahead

1790
01:18:15,760 --> 01:18:19,360
okay okay thank you i just finished uh

1791
01:18:19,360 --> 01:18:22,320
there are three possible options to

1792
01:18:22,320 --> 01:18:26,320
carrying the the bi information value

1793
01:18:26,320 --> 01:18:29,600
and what is the next uh we we would like

1794
01:18:29,600 --> 01:18:31,920
to collect the comments from spring and

1795
01:18:31,920 --> 01:18:33,280
attendance like

1796
01:18:33,280 --> 01:18:36,159
joy has already mentioned uh

1797
01:18:36,159 --> 01:18:39,679
the maybe the definition of mechanisms

1798
01:18:39,679 --> 01:18:42,320
should be left to the net about how to

1799
01:18:42,320 --> 01:18:43,520
uh

1800
01:18:43,520 --> 01:18:46,480
how to make srv6 and

1801
01:18:46,480 --> 01:18:49,120
srmps to support this function should be

1802
01:18:49,120 --> 01:18:51,760
left to spring and we would like to

1803
01:18:51,760 --> 01:18:54,400
collect feedback from both working group

1804
01:18:54,400 --> 01:18:56,480
and also

1805
01:18:56,480 --> 01:18:58,640
we would like to seek more

1806
01:18:58,640 --> 01:19:00,000
corporations with people who are

1807
01:19:00,000 --> 01:19:02,480
interested in this work

1808
01:19:02,480 --> 01:19:04,640
thank you

1809
01:19:04,640 --> 01:19:07,040
thank you

1810
01:19:07,199 --> 01:19:10,400
any questions from the room

1811
01:19:10,400 --> 01:19:12,960
there's no questions on the queue

1812
01:19:12,960 --> 01:19:14,960
okay we'll uh move on to the next

1813
01:19:14,960 --> 01:19:17,960
presentation

1814
01:19:26,000 --> 01:19:28,560
okay how how lee please go ahead

1815
01:19:28,560 --> 01:19:30,960
hear me

1816
01:19:33,120 --> 01:19:35,199
uh can you hear me

1817
01:19:35,199 --> 01:19:36,960
yes we can

1818
01:19:36,960 --> 01:19:41,280
okay uh first page please

1819
01:19:45,760 --> 01:19:48,400
uh hi uh this is the ho

1820
01:19:48,400 --> 01:19:51,520
from it's rizzy and i'm going to present

1821
01:19:51,520 --> 01:19:53,440
at least two drafts on behalf of the

1822
01:19:53,440 --> 01:19:56,320
authors and these two jobs are all about

1823
01:19:56,320 --> 01:19:59,760
extension of bgpsr policy

1824
01:19:59,760 --> 01:20:03,040
this page is the motivation for segment

1825
01:20:03,040 --> 01:20:04,800
leads list identifier

1826
01:20:04,800 --> 01:20:07,199
we know the draft segment relating to

1827
01:20:07,199 --> 01:20:10,480
policy defined as a policy to distribute

1828
01:20:10,480 --> 01:20:13,440
as a policy to the hand and node

1829
01:20:13,440 --> 01:20:15,840
there are policy name and candidate pass

1830
01:20:15,840 --> 01:20:18,560
name to identify the policy and

1831
01:20:18,560 --> 01:20:21,280
candidate parts respectively

1832
01:20:21,280 --> 01:20:22,800
for seminal

1833
01:20:22,800 --> 01:20:24,880
segment list

1834
01:20:24,880 --> 01:20:28,239
there is no id or name in sr policy

1835
01:20:28,239 --> 01:20:31,520
so in some scenarios it is inconvenient

1836
01:20:31,520 --> 01:20:34,719
to do some process about someone list

1837
01:20:34,719 --> 01:20:37,920
one case is the reporting statistic

1838
01:20:37,920 --> 01:20:40,560
from head and node to controller

1839
01:20:40,560 --> 01:20:43,360
normally hidden can collect a forwarding

1840
01:20:43,360 --> 01:20:46,639
statistic account based on signal list

1841
01:20:46,639 --> 01:20:50,080
one report the control controller

1842
01:20:50,080 --> 01:20:51,120
patent

1843
01:20:51,120 --> 01:20:53,920
has reported static with the whole

1844
01:20:53,920 --> 01:20:55,199
signal list

1845
01:20:55,199 --> 01:20:57,520
and the controller has to compile the

1846
01:20:57,520 --> 01:21:00,560
seed one by one to identify which

1847
01:21:00,560 --> 01:21:03,760
segment list is reported and another

1848
01:21:03,760 --> 01:21:07,360
case is distributing configuration it is

1849
01:21:07,360 --> 01:21:09,520
from controller to hidden node

1850
01:21:09,520 --> 01:21:12,239
in addition to distributing policy

1851
01:21:12,239 --> 01:21:14,960
through bcp as a policy the controller

1852
01:21:14,960 --> 01:21:17,520
also distributed configuration uh

1853
01:21:17,520 --> 01:21:20,480
through that that conf our procedure is

1854
01:21:20,480 --> 01:21:23,199
similar the whole segment list has to be

1855
01:21:23,199 --> 01:21:24,239
carried

1856
01:21:24,239 --> 01:21:25,920
in these cases

1857
01:21:25,920 --> 01:21:28,719
identifier or segment list may be

1858
01:21:28,719 --> 01:21:29,920
helpful

1859
01:21:29,920 --> 01:21:32,800
next slide please

1860
01:21:37,040 --> 01:21:40,560
yes this is uh okay thanks

1861
01:21:40,560 --> 01:21:43,120
this draft hopes to add the second list

1862
01:21:43,120 --> 01:21:46,320
identifier in bgpsr policy and

1863
01:21:46,320 --> 01:21:50,880
identifier could be a id or a name

1864
01:21:50,880 --> 01:21:54,120
next slide

1865
01:21:59,920 --> 01:22:03,040
so displayed uh two uh subtlety are

1866
01:22:03,040 --> 01:22:05,679
defined and the left subject away

1867
01:22:05,679 --> 01:22:08,159
special file identifier

1868
01:22:08,159 --> 01:22:11,360
second list buy uh four octaves number

1869
01:22:11,360 --> 01:22:14,320
uh the right sub here we specify latin

1870
01:22:14,320 --> 01:22:15,440
fear of

1871
01:22:15,440 --> 01:22:18,880
a second list by a simple logic name at

1872
01:22:18,880 --> 01:22:21,440
least two subtlety are optional and it

1873
01:22:21,440 --> 01:22:23,360
must not appear more than once inside

1874
01:22:23,360 --> 01:22:26,239
the same listed subject uh maybe just

1875
01:22:26,239 --> 01:22:28,239
need to keep one on them

1876
01:22:28,239 --> 01:22:31,120
we can update jobs according to feedback

1877
01:22:31,120 --> 01:22:34,800
working group next slide

1878
01:22:35,360 --> 01:22:38,639
and this is another draft about the head

1879
01:22:38,639 --> 01:22:40,159
and behavior

1880
01:22:40,159 --> 01:22:42,880
we know there are multiple ways to steer

1881
01:22:42,880 --> 01:22:46,239
packet flow into a 76 policy for

1882
01:22:46,239 --> 01:22:48,880
binances during multiple behavior have

1883
01:22:48,880 --> 01:22:50,400
been defined

1884
01:22:50,400 --> 01:22:53,280
the multiple sf6 uh

1885
01:22:53,280 --> 01:22:54,480
yet

1886
01:22:54,480 --> 01:22:56,400
banning seed with different behavior

1887
01:22:56,400 --> 01:22:59,440
could be encoded in the same six policy

1888
01:22:59,440 --> 01:23:02,159
it can perform corresponding behavior of

1889
01:23:02,159 --> 01:23:04,719
68 with a 76

1890
01:23:04,719 --> 01:23:07,280
banning seed but for us doing well

1891
01:23:07,280 --> 01:23:10,560
hannah behavior is not specified by bgp

1892
01:23:10,560 --> 01:23:13,520
as a policy next page

1893
01:23:13,520 --> 01:23:16,320
uh hal lee before you move on um

1894
01:23:16,320 --> 01:23:17,760
chung li do you want to ask your

1895
01:23:17,760 --> 01:23:19,360
question because i presume it's on the

1896
01:23:19,360 --> 01:23:21,679
previous uh um

1897
01:23:21,679 --> 01:23:24,080
okay document that was described so

1898
01:23:24,080 --> 01:23:26,400
chungli please go ahead

1899
01:23:26,400 --> 01:23:28,239
yeah yeah thank you jim money from

1900
01:23:28,239 --> 01:23:30,880
huawei so uh yeah it's

1901
01:23:30,880 --> 01:23:33,360
firstly it's really happy to see the

1902
01:23:33,360 --> 01:23:34,400
people

1903
01:23:34,400 --> 01:23:36,560
uh also

1904
01:23:36,560 --> 01:23:39,199
also thinking in the similar way

1905
01:23:39,199 --> 01:23:41,679
actually we have some draft to propose

1906
01:23:41,679 --> 01:23:44,480
some like second list id ident

1907
01:23:44,480 --> 01:23:45,840
identifier

1908
01:23:45,840 --> 01:23:48,080
or plus segment something like this

1909
01:23:48,080 --> 01:23:51,360
already so we can discuss further to see

1910
01:23:51,360 --> 01:23:53,600
how to cooperate together

1911
01:23:53,600 --> 01:23:55,280
to avoid multi

1912
01:23:55,280 --> 01:23:56,480
redundant

1913
01:23:56,480 --> 01:23:59,679
uh draft in the itf thank you

1914
01:23:59,679 --> 01:24:02,159
okay thank you

1915
01:24:02,159 --> 01:24:04,719
and ketan is your question do you want

1916
01:24:04,719 --> 01:24:07,679
to take your question now or or

1917
01:24:07,679 --> 01:24:09,520
is it on this uh this other document

1918
01:24:09,520 --> 01:24:11,679
here

1919
01:24:12,400 --> 01:24:15,199
no this is a what

1920
01:24:15,199 --> 01:24:18,080
go go ahead then

1921
01:24:21,679 --> 01:24:24,080
go ahead catan

1922
01:24:24,080 --> 01:24:26,480
wait for uh the present uh presentation

1923
01:24:26,480 --> 01:24:28,400
to get over

1924
01:24:28,400 --> 01:24:30,400
okay fine um

1925
01:24:30,400 --> 01:24:32,800
how lee please uh continue

1926
01:24:32,800 --> 01:24:36,719
okay please the next slide please

1927
01:24:40,960 --> 01:24:43,280
yeah uh this draft uh hopes to add a

1928
01:24:43,280 --> 01:24:46,639
handy behavior in bgp as a policy

1929
01:24:46,639 --> 01:24:49,520
and the head-end behavior is only for

1930
01:24:49,520 --> 01:24:53,600
srv6 uh next slide please

1931
01:24:55,280 --> 01:24:57,920
okay the two subtlety are defined for

1932
01:24:57,920 --> 01:25:00,960
distribute distributing some six policy

1933
01:25:00,960 --> 01:25:02,960
and the labs subject will specify the

1934
01:25:02,960 --> 01:25:05,600
behavior for layer three traffic for

1935
01:25:05,600 --> 01:25:07,360
behavior as defined

1936
01:25:07,360 --> 01:25:10,159
the right subjects verified behavior for

1937
01:25:10,159 --> 01:25:12,480
layer two traffic and two behavior are

1938
01:25:12,480 --> 01:25:13,600
defined

1939
01:25:13,600 --> 01:25:15,679
uh these two subtitles are optional and

1940
01:25:15,679 --> 01:25:18,080
must not be a more than once in the as a

1941
01:25:18,080 --> 01:25:19,760
policy encoding

1942
01:25:19,760 --> 01:25:21,120
yeah next slide

1943
01:25:21,120 --> 01:25:24,679
okay let's all

1944
01:25:26,639 --> 01:25:30,719
okay uh so couple of uh uh

1945
01:25:30,719 --> 01:25:32,639
clarification and one question uh the

1946
01:25:32,639 --> 01:25:35,120
clarification is that sr policy yang

1947
01:25:35,120 --> 01:25:37,840
model does have a name for a segment

1948
01:25:37,840 --> 01:25:38,639
list

1949
01:25:38,639 --> 01:25:41,440
and i think uh that should normally be

1950
01:25:41,440 --> 01:25:42,719
sufficient

1951
01:25:42,719 --> 01:25:45,120
so i would suggest

1952
01:25:45,120 --> 01:25:47,440
that you know uh that's something to be

1953
01:25:47,440 --> 01:25:48,560
looked at

1954
01:25:48,560 --> 01:25:50,400
the second point is there were feedback

1955
01:25:50,400 --> 01:25:53,520
here on the bgp sr policy

1956
01:25:53,520 --> 01:25:56,880
and i would not much rather prefer

1957
01:25:56,880 --> 01:25:58,639
and i'm speaking as a co-author there i

1958
01:25:58,639 --> 01:26:00,239
would much rather prefer that such

1959
01:26:00,239 --> 01:26:03,760
feedback is given on the idr list

1960
01:26:03,760 --> 01:26:06,239
so that you know we still have a chance

1961
01:26:06,239 --> 01:26:06,960
to

1962
01:26:06,960 --> 01:26:09,600
make any changes or you know address any

1963
01:26:09,600 --> 01:26:11,440
comments rather than bringing new

1964
01:26:11,440 --> 01:26:12,880
documents

1965
01:26:12,880 --> 01:26:16,080
so i believe that we have the necessary

1966
01:26:16,080 --> 01:26:18,159
things there

1967
01:26:18,159 --> 01:26:19,840
to address this and

1968
01:26:19,840 --> 01:26:22,159
you know basic behaviors but if you

1969
01:26:22,159 --> 01:26:24,480
think that it is not please

1970
01:26:24,480 --> 01:26:26,400
comment on the idr list

1971
01:26:26,400 --> 01:26:28,719
thank you

1972
01:26:28,719 --> 01:26:31,120
thank you

1973
01:26:32,480 --> 01:26:35,959
okay thank you

1974
01:26:36,560 --> 01:26:40,320
just pulling up the next presentation

1975
01:26:47,600 --> 01:26:48,560
okay

1976
01:26:48,560 --> 01:26:51,840
uh please go ahead

1977
01:26:52,400 --> 01:26:54,719
hello can you help me

1978
01:26:54,719 --> 01:26:57,360
yes we can

1979
01:26:57,760 --> 01:26:58,800
okay

1980
01:26:58,800 --> 01:27:02,040
this is

1981
01:27:03,679 --> 01:27:05,920
myself along with the ninja will be

1982
01:27:05,920 --> 01:27:08,320
presenting this draft on

1983
01:27:08,320 --> 01:27:10,400
problem statement for introducing intent

1984
01:27:10,400 --> 01:27:13,280
away routing using color

1985
01:27:13,280 --> 01:27:16,840
next slide please

1986
01:27:20,159 --> 01:27:23,520
uh so some background on this draft

1987
01:27:23,520 --> 01:27:25,760
we had a seamless smart problem

1988
01:27:25,760 --> 01:27:27,600
statement in spring working group and

1989
01:27:27,600 --> 01:27:28,480
another

1990
01:27:28,480 --> 01:27:31,520
draft bgp card statement in a best

1991
01:27:31,520 --> 01:27:33,360
working group

1992
01:27:33,360 --> 01:27:34,480
so the

1993
01:27:34,480 --> 01:27:37,679
as the problem statement documents were

1994
01:27:37,679 --> 01:27:40,639
addressing the same use cases the chairs

1995
01:27:40,639 --> 01:27:43,920
suggested us to merge this document

1996
01:27:43,920 --> 01:27:46,960
so the authors from a subset of authors

1997
01:27:46,960 --> 01:27:48,880
from both the draft work

1998
01:27:48,880 --> 01:27:49,920
to

1999
01:27:49,920 --> 01:27:52,400
produce a merged

2000
01:27:52,400 --> 01:27:54,400
document

2001
01:27:54,400 --> 01:27:56,000
so this is the first version of the

2002
01:27:56,000 --> 01:27:59,600
merge document that we have posted

2003
01:27:59,600 --> 01:28:03,080
next slide please

2004
01:28:17,440 --> 01:28:20,678
go ahead

2005
01:28:28,880 --> 01:28:30,960
we're not here in charlotte dj are you

2006
01:28:30,960 --> 01:28:33,199
there

2007
01:28:33,360 --> 01:28:36,400
hey uh hey jim can you hear me

2008
01:28:36,400 --> 01:28:37,920
yeah do you want to take over because

2009
01:28:37,920 --> 01:28:41,040
we're not here in um

2010
01:28:41,040 --> 01:28:43,520
sure sure um so yeah so the problem

2011
01:28:43,520 --> 01:28:46,480
statement uh is you know focused on uh

2012
01:28:46,480 --> 01:28:48,800
defining requirements uh and of course

2013
01:28:48,800 --> 01:28:51,040
use cases for uh you know building

2014
01:28:51,040 --> 01:28:52,719
intent aware paths across multiple

2015
01:28:52,719 --> 01:28:55,440
domains uh and again focused on our

2016
01:28:55,440 --> 01:28:57,760
distributed routing solution uh

2017
01:28:57,760 --> 01:29:00,880
primarily on bgp given bgp is the you

2018
01:29:00,880 --> 01:29:02,880
know inter domain protocol and many of

2019
01:29:02,880 --> 01:29:05,679
these networks that are being targeted

2020
01:29:05,679 --> 01:29:07,280
of course the requirements are general

2021
01:29:07,280 --> 01:29:09,440
so they could apply to other solutions

2022
01:29:09,440 --> 01:29:13,120
as well next slide please

2023
01:29:16,159 --> 01:29:18,239
next slide

2024
01:29:18,239 --> 01:29:19,440
yeah thanks

2025
01:29:19,440 --> 01:29:22,000
um so in general why you know focus on

2026
01:29:22,000 --> 01:29:25,440
bgp uh you know clearly today bgplu is

2027
01:29:25,440 --> 01:29:27,920
used in many seamless mpls as well as

2028
01:29:27,920 --> 01:29:30,320
you know uh some multi-year deployments

2029
01:29:30,320 --> 01:29:32,400
so because operators have operational

2030
01:29:32,400 --> 01:29:35,600
familiarity uh so some of them expect

2031
01:29:35,600 --> 01:29:38,080
the you know an incremental solution uh

2032
01:29:38,080 --> 01:29:41,040
that they can deploy in you know of

2033
01:29:41,040 --> 01:29:42,400
bgplu

2034
01:29:42,400 --> 01:29:44,800
um there is an expectation that you know

2035
01:29:44,800 --> 01:29:47,120
with the you know familiarity with bgp

2036
01:29:47,120 --> 01:29:50,080
uh it would support uh you know a higher

2037
01:29:50,080 --> 01:29:52,560
scale than what they are deployed

2038
01:29:52,560 --> 01:29:54,239
currently

2039
01:29:54,239 --> 01:29:55,600
and um

2040
01:29:55,600 --> 01:29:58,560
there is the familiarity with the uh you

2041
01:29:58,560 --> 01:30:00,719
know the the sort of the trust model

2042
01:30:00,719 --> 01:30:03,360
when you if you have to go across

2043
01:30:03,360 --> 01:30:06,320
different uh bgp domains mostly in terms

2044
01:30:06,320 --> 01:30:09,040
of appearing policies

2045
01:30:09,040 --> 01:30:12,000
uh next slide please

2046
01:30:12,000 --> 01:30:14,159
so um

2047
01:30:14,159 --> 01:30:16,960
so as shraddha said this is a you know

2048
01:30:16,960 --> 01:30:19,280
merged document

2049
01:30:19,280 --> 01:30:22,320
so what we've managed to do is uh put

2050
01:30:22,320 --> 01:30:24,639
together some sections that uh you know

2051
01:30:24,639 --> 01:30:27,199
with the content uh that we uh would

2052
01:30:27,199 --> 01:30:28,480
like to see

2053
01:30:28,480 --> 01:30:30,239
so some of these sections they're

2054
01:30:30,239 --> 01:30:32,320
broadly divided into two uh you know

2055
01:30:32,320 --> 01:30:35,440
areas one is um look at some of the

2056
01:30:35,440 --> 01:30:37,840
typical deployment scenarios uh you know

2057
01:30:37,840 --> 01:30:40,239
explain some of the use cases so that's

2058
01:30:40,239 --> 01:30:42,560
uh you know like the first set of

2059
01:30:42,560 --> 01:30:43,520
sections

2060
01:30:43,520 --> 01:30:47,320
uh next slide please

2061
01:30:50,560 --> 01:30:53,840
um and then uh given that uh there is

2062
01:30:53,840 --> 01:30:56,239
already a set of solutions uh including

2063
01:30:56,239 --> 01:30:58,880
you know uh you know the srt solution

2064
01:30:58,880 --> 01:31:01,760
that's been standardized and deployed

2065
01:31:01,760 --> 01:31:03,520
you know by the

2066
01:31:03,520 --> 01:31:05,520
spring working group and supported by

2067
01:31:05,520 --> 01:31:07,360
multiple implementations

2068
01:31:07,360 --> 01:31:09,760
the there is a section that defines uh

2069
01:31:09,760 --> 01:31:11,920
an intent aware routing framework uh

2070
01:31:11,920 --> 01:31:13,920
introducing some of the you know the the

2071
01:31:13,920 --> 01:31:14,719
base

2072
01:31:14,719 --> 01:31:16,880
constructs the concepts

2073
01:31:16,880 --> 01:31:20,159
and how existing solutions work

2074
01:31:20,159 --> 01:31:21,520
so this is meant to be used as a

2075
01:31:21,520 --> 01:31:23,440
reference for some of the you know

2076
01:31:23,440 --> 01:31:25,840
detailed requirements in the subsequent

2077
01:31:25,840 --> 01:31:27,280
sections

2078
01:31:27,280 --> 01:31:30,679
next slide please

2079
01:31:33,360 --> 01:31:36,400
um then we go into uh

2080
01:31:36,400 --> 01:31:38,480
some details uh you know in terms of the

2081
01:31:38,480 --> 01:31:41,280
technical requirements again it's uh

2082
01:31:41,280 --> 01:31:44,320
broken up into different categories

2083
01:31:44,320 --> 01:31:46,000
there's a section on the intent

2084
01:31:46,000 --> 01:31:48,239
requirements currently what we have are

2085
01:31:48,239 --> 01:31:51,120
the transport network requirements

2086
01:31:51,120 --> 01:31:54,639
specified um in general the the sections

2087
01:31:54,639 --> 01:31:56,719
that you see underlined

2088
01:31:56,719 --> 01:31:59,040
are ones that are placeholders you know

2089
01:31:59,040 --> 01:32:02,159
specifically the vpn uh layer

2090
01:32:02,159 --> 01:32:04,719
intent requirements the oem requirements

2091
01:32:04,719 --> 01:32:06,000
as well as the multicast intent

2092
01:32:06,000 --> 01:32:08,719
requirements the co-authors and editors

2093
01:32:08,719 --> 01:32:09,840
you know have

2094
01:32:09,840 --> 01:32:12,400
not yet managed to you know discuss and

2095
01:32:12,400 --> 01:32:13,920
review the content in you know those

2096
01:32:13,920 --> 01:32:15,120
sections so

2097
01:32:15,120 --> 01:32:17,199
but we will address them in subsequent

2098
01:32:17,199 --> 01:32:18,000
uh

2099
01:32:18,000 --> 01:32:20,560
versions um in terms of the

2100
01:32:20,560 --> 01:32:22,800
the other you know requirements we have

2101
01:32:22,800 --> 01:32:24,800
the steering requirements we have

2102
01:32:24,800 --> 01:32:27,760
deployment requirements that go into uh

2103
01:32:27,760 --> 01:32:29,760
you know different topologies different

2104
01:32:29,760 --> 01:32:31,600
transport types that are you know that

2105
01:32:31,600 --> 01:32:34,800
need to be supported um a variety of

2106
01:32:34,800 --> 01:32:37,600
interworking and color you know mapping

2107
01:32:37,600 --> 01:32:40,560
uh scenarios are also described and then

2108
01:32:40,560 --> 01:32:43,760
we have uh scalability as uh you know

2109
01:32:43,760 --> 01:32:45,360
section network availability

2110
01:32:45,360 --> 01:32:48,239
requirements and finally given that you

2111
01:32:48,239 --> 01:32:51,280
know the primary target here is bgp

2112
01:32:51,280 --> 01:32:53,440
there is a section on uh you know bgp

2113
01:32:53,440 --> 01:32:55,600
protocol requirements as well

2114
01:32:55,600 --> 01:32:58,320
next slide please

2115
01:32:59,040 --> 01:33:01,360
um yeah so i don't know how much time we

2116
01:33:01,360 --> 01:33:02,159
have

2117
01:33:02,159 --> 01:33:04,080
in general what we've done with the

2118
01:33:04,080 --> 01:33:06,560
network intent requirements

2119
01:33:06,560 --> 01:33:08,239
this is not an exhaustive list but

2120
01:33:08,239 --> 01:33:11,040
there's a you know a number of commonly

2121
01:33:11,040 --> 01:33:13,120
seen you know scenarios so we've

2122
01:33:13,120 --> 01:33:15,440
provided uh you know a description of

2123
01:33:15,440 --> 01:33:16,960
those scenarios with reference

2124
01:33:16,960 --> 01:33:20,239
topologies and flows uh the uh the idea

2125
01:33:20,239 --> 01:33:22,000
being you know it will be used as a

2126
01:33:22,000 --> 01:33:23,280
reference for

2127
01:33:23,280 --> 01:33:24,880
various solutions

2128
01:33:24,880 --> 01:33:28,320
uh next slide please

2129
01:33:32,400 --> 01:33:34,480
again when it comes to steering we start

2130
01:33:34,480 --> 01:33:36,400
with the baseline that uh you know

2131
01:33:36,400 --> 01:33:38,400
existing solutions like srt you know

2132
01:33:38,400 --> 01:33:40,800
support uh we've added some more detail

2133
01:33:40,800 --> 01:33:43,440
on fallback uh in terms of

2134
01:33:43,440 --> 01:33:44,880
you know things like ordered fallback

2135
01:33:44,880 --> 01:33:47,920
across multiple you know intents uh you

2136
01:33:47,920 --> 01:33:50,320
know the granularity of fallback schemes

2137
01:33:50,320 --> 01:33:51,520
and so on

2138
01:33:51,520 --> 01:33:54,239
um and of course you know the

2139
01:33:54,239 --> 01:33:56,239
the requirement for steering to be

2140
01:33:56,239 --> 01:33:59,600
supported for all uh services

2141
01:33:59,600 --> 01:34:04,040
uh next slide please

2142
01:34:08,480 --> 01:34:12,159
uh again in terms of scalability uh we

2143
01:34:12,159 --> 01:34:14,000
you know provided some data on you know

2144
01:34:14,000 --> 01:34:16,560
the target uh scale uh you know and then

2145
01:34:16,560 --> 01:34:19,520
some analysis on what that entails uh

2146
01:34:19,520 --> 01:34:21,840
for existing you know designs what are

2147
01:34:21,840 --> 01:34:24,000
some of the constraints that need to be

2148
01:34:24,000 --> 01:34:26,800
uh you know taken into account uh and

2149
01:34:26,800 --> 01:34:28,880
then uh in terms of requirements we

2150
01:34:28,880 --> 01:34:31,040
focus on two broad requirements one is

2151
01:34:31,040 --> 01:34:33,520
uh you know to scale the mpls data plane

2152
01:34:33,520 --> 01:34:34,320
you know

2153
01:34:34,320 --> 01:34:37,440
the need for uh in hierarchy uh and then

2154
01:34:37,440 --> 01:34:39,520
also to reduce the control plane you

2155
01:34:39,520 --> 01:34:40,560
know uh

2156
01:34:40,560 --> 01:34:43,280
state as well as data plane state uh the

2157
01:34:43,280 --> 01:34:47,280
need for a subscription based pull model

2158
01:34:47,280 --> 01:34:50,080
next slide please

2159
01:34:54,800 --> 01:34:56,560
um so

2160
01:34:56,560 --> 01:34:58,000
we have gotten some you know good

2161
01:34:58,000 --> 01:35:00,080
feedback already after publishing this

2162
01:35:00,080 --> 01:35:02,480
uh first you know zero zero version uh

2163
01:35:02,480 --> 01:35:04,719
we do request uh you know

2164
01:35:04,719 --> 01:35:07,199
more folks to review and provide uh your

2165
01:35:07,199 --> 01:35:08,400
comments thanks to the ones who have

2166
01:35:08,400 --> 01:35:09,760
already done that

2167
01:35:09,760 --> 01:35:13,040
and uh thanks also to joel and jyotaro

2168
01:35:13,040 --> 01:35:14,880
for you know guiding the

2169
01:35:14,880 --> 01:35:16,800
the merge effort

2170
01:35:16,800 --> 01:35:17,679
um

2171
01:35:17,679 --> 01:35:19,600
you know given the time we spent on this

2172
01:35:19,600 --> 01:35:21,840
and the you know the content and the

2173
01:35:21,840 --> 01:35:24,080
quality of the document we think it's in

2174
01:35:24,080 --> 01:35:26,239
a good shape to be adopted by the

2175
01:35:26,239 --> 01:35:28,719
working group so we request

2176
01:35:28,719 --> 01:35:30,960
the working group to you know do that

2177
01:35:30,960 --> 01:35:33,280
thank you

2178
01:35:37,679 --> 01:35:40,000
thanks dj um you mentioned about working

2179
01:35:40,000 --> 01:35:42,639
group adoption so um

2180
01:35:42,639 --> 01:35:44,239
if the document gets

2181
01:35:44,239 --> 01:35:46,159
adopted then the chairs obviously want

2182
01:35:46,159 --> 01:35:48,719
to see that front page cleaned up um

2183
01:35:48,719 --> 01:35:50,159
preferably

2184
01:35:50,159 --> 01:35:52,400
with editors and everybody else moved

2185
01:35:52,400 --> 01:35:54,080
into contributors but i'm sure you're

2186
01:35:54,080 --> 01:35:57,119
aware of that but the sooner that's done

2187
01:35:57,119 --> 01:35:59,360
obviously the better so if you could

2188
01:35:59,360 --> 01:36:00,800
take that to your co-authors that would

2189
01:36:00,800 --> 01:36:02,320
be uh

2190
01:36:02,320 --> 01:36:06,320
um sounds good thankful from the chairs

2191
01:36:06,320 --> 01:36:07,760
and the other thing i will just remind

2192
01:36:07,760 --> 01:36:09,280
all the participants is that the

2193
01:36:09,280 --> 01:36:10,960
technical work on

2194
01:36:10,960 --> 01:36:13,280
how the heck to do whatever it is that

2195
01:36:13,280 --> 01:36:15,920
meets these requirements is in the idr

2196
01:36:15,920 --> 01:36:17,520
working group not the spring working

2197
01:36:17,520 --> 01:36:20,239
group you please do go to the idr

2198
01:36:20,239 --> 01:36:21,760
working group and participate in the

2199
01:36:21,760 --> 01:36:24,719
discussions there okay we'll go on to

2200
01:36:24,719 --> 01:36:26,719
the next presentation which i need to

2201
01:36:26,719 --> 01:36:30,199
briefly introduce

2202
01:36:39,920 --> 01:36:42,560
okay we are pressed for time this is a

2203
01:36:42,560 --> 01:36:45,600
brief presentation on the on one of the

2204
01:36:45,600 --> 01:36:48,719
proposals for encoding

2205
01:36:48,719 --> 01:36:51,600
changes to the mpls header this is an

2206
01:36:51,600 --> 01:36:54,080
active topic being discussed in the mpls

2207
01:36:54,080 --> 01:36:55,600
working group there are multiple

2208
01:36:55,600 --> 01:36:58,159
proposals what we have here is one of

2209
01:36:58,159 --> 01:36:59,840
them to give you an idea of what's going

2210
01:36:59,840 --> 01:37:02,880
on in this space

2211
01:37:03,440 --> 01:37:06,159
uh hi everyone my name is rakesh gandhi

2212
01:37:06,159 --> 01:37:07,040
and

2213
01:37:07,040 --> 01:37:09,520
presenting the m a

2214
01:37:09,520 --> 01:37:10,960
encoding

2215
01:37:10,960 --> 01:37:13,440
for everything that's above the bottom

2216
01:37:13,440 --> 01:37:14,880
of the stack

2217
01:37:14,880 --> 01:37:17,440
on behalf of the authors listed and next

2218
01:37:17,440 --> 01:37:20,320
slide please

2219
01:37:20,320 --> 01:37:22,400
so agenda we won't go through a lot of

2220
01:37:22,400 --> 01:37:24,320
details about the encoding and bits and

2221
01:37:24,320 --> 01:37:25,760
pieces but

2222
01:37:25,760 --> 01:37:28,560
we'll show the salient features of the

2223
01:37:28,560 --> 01:37:32,159
the encoding next slide please

2224
01:37:32,320 --> 01:37:34,639
so many thanks to the

2225
01:37:34,639 --> 01:37:36,960
open design team

2226
01:37:36,960 --> 01:37:40,320
between pulse and net and mpls

2227
01:37:40,320 --> 01:37:43,119
there's a lot of work done there for the

2228
01:37:43,119 --> 01:37:46,320
requirements framework and use cases

2229
01:37:46,320 --> 01:37:48,480
so this is basically leveraging the work

2230
01:37:48,480 --> 01:37:51,280
to provide the encoding formats

2231
01:37:51,280 --> 01:37:54,000
next like this

2232
01:37:54,080 --> 01:37:56,080
so basically in the encoding we need two

2233
01:37:56,080 --> 01:37:59,199
things one is the present indicators so

2234
01:37:59,199 --> 01:38:02,560
there is an m a lab label we call it

2235
01:38:02,560 --> 01:38:04,400
the indicator for the

2236
01:38:04,400 --> 01:38:06,960
network accent sub stack

2237
01:38:06,960 --> 01:38:08,800
and the flags that says there is a in

2238
01:38:08,800 --> 01:38:10,480
stack or post stack

2239
01:38:10,480 --> 01:38:11,360
and

2240
01:38:11,360 --> 01:38:13,119
basically um

2241
01:38:13,119 --> 01:38:15,760
the second part is the network accents

2242
01:38:15,760 --> 01:38:18,400
the flags or pop quotes that says that

2243
01:38:18,400 --> 01:38:21,040
this action needs to be performed

2244
01:38:21,040 --> 01:38:23,840
next slide please

2245
01:38:24,239 --> 01:38:26,560
so uh the encoding basically uh there is

2246
01:38:26,560 --> 01:38:27,520
a

2247
01:38:27,520 --> 01:38:30,159
label uh this is a base special purpose

2248
01:38:30,159 --> 01:38:32,320
label that's an indicator

2249
01:38:32,320 --> 01:38:36,320
and the next lse has the encoding flags

2250
01:38:36,320 --> 01:38:38,639
in the tc and ttl fields that has a

2251
01:38:38,639 --> 01:38:41,040
length and the present indicators

2252
01:38:41,040 --> 01:38:44,480
and there is a flag based network action

2253
01:38:44,480 --> 01:38:46,960
defined in the second llc next slide

2254
01:38:46,960 --> 01:38:49,199
please

2255
01:38:49,199 --> 01:38:51,840
so this is more details about

2256
01:38:51,840 --> 01:38:54,000
the flag based

2257
01:38:54,000 --> 01:38:58,760
network actions and next slide please

2258
01:38:59,600 --> 01:39:02,000
and this one is an encoding that shows

2259
01:39:02,000 --> 01:39:02,880
the

2260
01:39:02,880 --> 01:39:05,280
opcode-based network accents

2261
01:39:05,280 --> 01:39:07,840
it can contain the ancillary data that

2262
01:39:07,840 --> 01:39:10,800
is used to execute the network accents

2263
01:39:10,800 --> 01:39:12,880
associated with the opcode

2264
01:39:12,880 --> 01:39:15,840
there are other fields like the scope

2265
01:39:15,840 --> 01:39:19,119
and the length also part of the same lse

2266
01:39:19,119 --> 01:39:21,119
so this makes it a

2267
01:39:21,119 --> 01:39:23,440
hardware parser friendly

2268
01:39:23,440 --> 01:39:26,960
next slide please

2269
01:39:26,960 --> 01:39:29,520
so this is just an example of uh if

2270
01:39:29,520 --> 01:39:31,119
network action needs to be performed a

2271
01:39:31,119 --> 01:39:33,360
flag is assigned by inf

2272
01:39:33,360 --> 01:39:35,679
uh that this flag is to do that network

2273
01:39:35,679 --> 01:39:38,560
action next slide please

2274
01:39:38,560 --> 01:39:41,360
uh if there are more than 19 flags

2275
01:39:41,360 --> 01:39:44,159
required it can be easily extended next

2276
01:39:44,159 --> 01:39:46,400
like this

2277
01:39:46,400 --> 01:39:48,560
uh this is the one where opcode10 is

2278
01:39:48,560 --> 01:39:50,960
assigned to perform some action

2279
01:39:50,960 --> 01:39:55,760
uh with his data and next slide please

2280
01:39:55,760 --> 01:39:58,400
so this is an example where if you need

2281
01:39:58,400 --> 01:40:01,040
to have more than 20 bits of data for

2282
01:40:01,040 --> 01:40:03,360
the top code it can be easily extended

2283
01:40:03,360 --> 01:40:04,719
as well

2284
01:40:04,719 --> 01:40:07,119
next slide please

2285
01:40:07,119 --> 01:40:09,679
uh it can be encoded with the flag base

2286
01:40:09,679 --> 01:40:11,600
and of course network actions in the

2287
01:40:11,600 --> 01:40:12,960
same

2288
01:40:12,960 --> 01:40:15,360
network substract in the same packet

2289
01:40:15,360 --> 01:40:18,320
and next slide please

2290
01:40:19,520 --> 01:40:22,719
again uh it's flexible enough to

2291
01:40:22,719 --> 01:40:25,040
carry multiple opcode based network

2292
01:40:25,040 --> 01:40:26,080
actions

2293
01:40:26,080 --> 01:40:26,880
and

2294
01:40:26,880 --> 01:40:29,040
end cap node can put the network actions

2295
01:40:29,040 --> 01:40:31,920
in a certain desired order

2296
01:40:31,920 --> 01:40:35,040
this is an important characteristic

2297
01:40:35,040 --> 01:40:36,960
of the encoding

2298
01:40:36,960 --> 01:40:39,679
next slide please

2299
01:40:39,679 --> 01:40:41,679
so that the encoding is backwards

2300
01:40:41,679 --> 01:40:44,239
compatible um

2301
01:40:44,239 --> 01:40:46,080
obviously that the capability needs to

2302
01:40:46,080 --> 01:40:48,719
be signaled that node is capable of uh m

2303
01:40:48,719 --> 01:40:52,400
a processing the acmp is not adversely

2304
01:40:52,400 --> 01:40:53,760
affected

2305
01:40:53,760 --> 01:40:55,119
um

2306
01:40:55,119 --> 01:40:57,280
it does not alias with an existing

2307
01:40:57,280 --> 01:41:00,000
reserve label so it will not cause an

2308
01:41:00,000 --> 01:41:02,719
issue in the legacy network

2309
01:41:02,719 --> 01:41:05,920
the penalty mode ttl propagation will

2310
01:41:05,920 --> 01:41:08,159
not cut up the m a because we we're

2311
01:41:08,159 --> 01:41:11,840
leaving the tt ttl and tc fields uh

2312
01:41:11,840 --> 01:41:14,159
uh as is um

2313
01:41:14,159 --> 01:41:16,400
and it can coexist with the

2314
01:41:16,400 --> 01:41:19,040
gsch and other current

2315
01:41:19,040 --> 01:41:20,159
encodings

2316
01:41:20,159 --> 01:41:23,040
and next like this

2317
01:41:23,040 --> 01:41:26,159
so it is aligned with the mna framework

2318
01:41:26,159 --> 01:41:28,320
and requirements for in stack and

2319
01:41:28,320 --> 01:41:29,679
posttech

2320
01:41:29,679 --> 01:41:31,199
it's flexible

2321
01:41:31,199 --> 01:41:33,679
you can put the action in the desired

2322
01:41:33,679 --> 01:41:36,159
order it can be easily extended for

2323
01:41:36,159 --> 01:41:38,800
various use cases

2324
01:41:38,800 --> 01:41:41,520
we have worked with multiple vendors

2325
01:41:41,520 --> 01:41:44,239
the encoding is

2326
01:41:44,239 --> 01:41:46,480
hardware parcel friendly uh because of

2327
01:41:46,480 --> 01:41:47,760
the fact that

2328
01:41:47,760 --> 01:41:50,480
the opcode the data the scope the flags

2329
01:41:50,480 --> 01:41:53,199
the land everything is in one lse

2330
01:41:53,199 --> 01:41:55,840
uh so it can execute the instruction

2331
01:41:55,840 --> 01:41:57,119
quite

2332
01:41:57,119 --> 01:41:58,400
easily

2333
01:41:58,400 --> 01:42:00,159
in hardware

2334
01:42:00,159 --> 01:42:03,119
it is msd efficient because you can take

2335
01:42:03,119 --> 01:42:05,119
advantage of the various encoding

2336
01:42:05,119 --> 01:42:06,480
formats

2337
01:42:06,480 --> 01:42:08,480
backwards compatible we make sure it's

2338
01:42:08,480 --> 01:42:10,080
backwards compatible

2339
01:42:10,080 --> 01:42:12,800
and ecmp friendly as well

2340
01:42:12,800 --> 01:42:15,119
next slide please

2341
01:42:15,119 --> 01:42:17,679
so uh welcome your uh comments and

2342
01:42:17,679 --> 01:42:20,080
feedbacks um there is very strong

2343
01:42:20,080 --> 01:42:21,760
interest from multiple vendors and

2344
01:42:21,760 --> 01:42:24,480
operators and we have requested working

2345
01:42:24,480 --> 01:42:28,159
group adoption in the mpls working group

2346
01:42:28,159 --> 01:42:30,559
thank you

2347
01:42:31,199 --> 01:42:33,920
thank you very much my thanks to all of

2348
01:42:33,920 --> 01:42:36,159
the presenters who were expeditious and

2349
01:42:36,159 --> 01:42:39,119
helped us make up the time we lost to do

2350
01:42:39,119 --> 01:42:41,119
technical issues

2351
01:42:41,119 --> 01:42:42,000
and

2352
01:42:42,000 --> 01:42:43,760
the fact we've even squeezed in a few

2353
01:42:43,760 --> 01:42:46,320
comments i really prefer discussion but

2354
01:42:46,320 --> 01:42:47,840
we have what we have

2355
01:42:47,840 --> 01:42:49,440
so thank you very much for your time

2356
01:42:49,440 --> 01:42:51,119
we'll see you on the mailing list where

2357
01:42:51,119 --> 01:42:53,360
the work actually gets done please

2358
01:42:53,360 --> 01:42:56,360
engage

2359
01:43:08,320 --> 01:43:09,679
i'll take a minute and then i'll be

2360
01:43:09,679 --> 01:43:13,080
walking around

