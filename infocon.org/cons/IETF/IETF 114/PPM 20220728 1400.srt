1
00:00:32,238 --> 00:00:35,239
uh

2
00:01:01,760 --> 00:01:04,759
so

3
00:03:40,159 --> 00:03:41,760
welcome to privacy preserving

4
00:03:41,760 --> 00:03:43,360
measurement

5
00:03:43,360 --> 00:03:45,760
you've seen the um

6
00:03:45,760 --> 00:03:48,239
note well

7
00:03:49,120 --> 00:03:50,400
it's thursday i'm not gonna read it to

8
00:03:50,400 --> 00:03:52,879
you next

9
00:03:52,879 --> 00:03:55,760
um thanks i see i don't see any nostrils

10
00:03:55,760 --> 00:03:57,360
in the room i'd like to keep it that way

11
00:03:57,360 --> 00:03:58,640
if you need to take a sip of water put

12
00:03:58,640 --> 00:04:01,839
your mask back on afterwards

13
00:04:06,319 --> 00:04:08,400
you know how to use meat echo

14
00:04:08,400 --> 00:04:09,599
make sure if you're using the full

15
00:04:09,599 --> 00:04:11,280
version here you don't

16
00:04:11,280 --> 00:04:13,200
turn on your microphone because we'll

17
00:04:13,200 --> 00:04:16,159
get feedback in the room

18
00:04:17,600 --> 00:04:19,358
and if you're speaking at the microphone

19
00:04:19,358 --> 00:04:21,358
keep your mask on

20
00:04:21,358 --> 00:04:22,240
um

21
00:04:22,240 --> 00:04:24,800
i think we're ready for siobhan

22
00:04:24,800 --> 00:04:26,080
shawn's gonna talk about star and then

23
00:04:26,080 --> 00:04:29,719
we're gonna move on to that

24
00:04:42,479 --> 00:04:45,479
yes

25
00:05:00,479 --> 00:05:04,280
i can just say next slide

26
00:05:14,080 --> 00:05:16,080
chris and chris are you in queue for

27
00:05:16,080 --> 00:05:17,860
agenda bashing

28
00:05:17,860 --> 00:05:19,759
[Music]

29
00:05:19,759 --> 00:05:22,320
uh yes i mean q to bash the agenda there

30
00:05:22,320 --> 00:05:24,960
was no opportunity to do so um i would i

31
00:05:24,960 --> 00:05:26,560
would like to request that this be moved

32
00:05:26,560 --> 00:05:28,960
to the end of the session so we give uh

33
00:05:28,960 --> 00:05:30,880
appropriate amount of time for all the

34
00:05:30,880 --> 00:05:33,039
dapper-related issues that we have

35
00:05:33,039 --> 00:05:34,960
um we need to make sure we get through

36
00:05:34,960 --> 00:05:37,440
those prior to discussing non-working

37
00:05:37,440 --> 00:05:40,479
group items at this time

38
00:05:40,479 --> 00:05:41,840
thank you the cheers have decided to do

39
00:05:41,840 --> 00:05:42,880
otherwise

40
00:05:42,880 --> 00:05:45,880
chris

41
00:05:55,759 --> 00:05:59,000
chris cotton

42
00:06:11,680 --> 00:06:14,720
thank you i i for one i am remote i'm

43
00:06:14,720 --> 00:06:16,240
having trouble hearing the room it's

44
00:06:16,240 --> 00:06:18,240
very choppy is anyone else having

45
00:06:18,240 --> 00:06:19,440
trouble hearing

46
00:06:19,440 --> 00:06:21,039
oh all right

47
00:06:21,039 --> 00:06:23,120
um

48
00:06:23,120 --> 00:06:25,199
is it is it either you're having trouble

49
00:06:25,199 --> 00:06:26,720
with or siobhan would you say a word of

50
00:06:26,720 --> 00:06:29,680
that mike hello hello hello is that okay

51
00:06:29,680 --> 00:06:32,000
chris

52
00:06:33,680 --> 00:06:35,360
okay it's just me

53
00:06:35,360 --> 00:06:38,160
uh chris wood can you cover me if i am

54
00:06:38,160 --> 00:06:40,319
not able to uh

55
00:06:40,319 --> 00:06:43,039
to communicate with people

56
00:06:43,039 --> 00:06:45,360
um i'll i'll figure it out on my end

57
00:06:45,360 --> 00:06:50,160
i'll be i'll be back but um yep

58
00:06:53,520 --> 00:06:55,599
okay go ahead siobhan

59
00:06:55,599 --> 00:06:59,120
hey chris would i'll entry offline

60
00:06:59,759 --> 00:07:03,120
hello um my name is siobhan and um

61
00:07:03,120 --> 00:07:05,199
alex pete and i have been

62
00:07:05,199 --> 00:07:07,759
um talking about star for a while

63
00:07:07,759 --> 00:07:10,400
star is was a research paper um it's

64
00:07:10,400 --> 00:07:12,639
gonna come in the uh it's gonna appear

65
00:07:12,639 --> 00:07:13,520
in the

66
00:07:13,520 --> 00:07:15,440
upcoming ccs i think

67
00:07:15,440 --> 00:07:18,400
and um yeah looking

68
00:07:18,400 --> 00:07:20,720
forward to discussing with folks the

69
00:07:20,720 --> 00:07:22,319
central idea is that we would like to

70
00:07:22,319 --> 00:07:25,199
have k anonymity for clients reporting

71
00:07:25,199 --> 00:07:27,199
potentially sensitive measurements to an

72
00:07:27,199 --> 00:07:29,360
untrusted server

73
00:07:29,360 --> 00:07:30,800
um and the

74
00:07:30,800 --> 00:07:33,919
pretty important goal that we have is

75
00:07:33,919 --> 00:07:36,479
that it should be cheap because brave is

76
00:07:36,479 --> 00:07:38,319
a small organization and

77
00:07:38,319 --> 00:07:39,919
there are other similar small

78
00:07:39,919 --> 00:07:41,280
organizations who would like to do

79
00:07:41,280 --> 00:07:43,120
privacy preserving measurement

80
00:07:43,120 --> 00:07:45,759
but don't have um

81
00:07:45,759 --> 00:07:48,400
infinite aws um

82
00:07:48,400 --> 00:07:50,400
you know money to spend on that

83
00:07:50,400 --> 00:07:52,080
and so yeah so low computational

84
00:07:52,080 --> 00:07:54,240
overhead and network usage for clients

85
00:07:54,240 --> 00:07:56,000
and servers is pretty important

86
00:07:56,000 --> 00:07:57,360
it should i guess similarly it should

87
00:07:57,360 --> 00:07:59,039
also be easy to implement using

88
00:07:59,039 --> 00:08:00,080
well-known

89
00:08:00,080 --> 00:08:02,080
cryptographic techniques um

90
00:08:02,080 --> 00:08:05,599
and obviously should also be private

91
00:08:06,080 --> 00:08:07,759
um the central idea here i won't go into

92
00:08:07,759 --> 00:08:09,759
too much detail i think alex's

93
00:08:09,759 --> 00:08:11,440
presentation at the last itf did a good

94
00:08:11,440 --> 00:08:14,240
job but essentially we're going to use

95
00:08:14,240 --> 00:08:16,479
jameer's secret sharing so you get a

96
00:08:16,479 --> 00:08:17,840
symmetric key

97
00:08:17,840 --> 00:08:20,800
through some deterministic function

98
00:08:20,800 --> 00:08:23,360
operation on the initial measurement

99
00:08:23,360 --> 00:08:25,680
and then you encrypt the measurement

100
00:08:25,680 --> 00:08:27,280
using that key

101
00:08:27,280 --> 00:08:29,280
and um so the idea now is that you can

102
00:08:29,280 --> 00:08:32,719
only get x um when you have key when you

103
00:08:32,719 --> 00:08:33,679
have k

104
00:08:33,679 --> 00:08:36,320
um so you generate a secret share of of

105
00:08:36,320 --> 00:08:37,440
k

106
00:08:37,440 --> 00:08:38,719
and you send the measurement and the

107
00:08:38,719 --> 00:08:40,719
secret share to the server

108
00:08:40,719 --> 00:08:42,719
and the server gets a bunch of these but

109
00:08:42,719 --> 00:08:45,360
it doesn't know what m is until it can

110
00:08:45,360 --> 00:08:47,760
perform the recovery operation

111
00:08:47,760 --> 00:08:50,720
um on k on the secret share of k

112
00:08:50,720 --> 00:08:52,959
and it can only do that once there are n

113
00:08:52,959 --> 00:08:55,760
of those so in this way you get like uh

114
00:08:55,760 --> 00:08:58,399
key anomaly where n is the number of uh

115
00:08:58,399 --> 00:09:00,959
minimum number of shares you need

116
00:09:00,959 --> 00:09:02,480
and then you can use k

117
00:09:02,480 --> 00:09:05,519
once you recover it to decrypt them

118
00:09:05,519 --> 00:09:09,040
to and get the original measurement back

119
00:09:09,040 --> 00:09:10,560
and it's really important to have an

120
00:09:10,560 --> 00:09:13,279
anonymizing proxy here um so i'll talk a

121
00:09:13,279 --> 00:09:14,560
little bit about this later on but

122
00:09:14,560 --> 00:09:16,399
essentially once the measurement is

123
00:09:16,399 --> 00:09:18,240
decrypted you want you want to be sure

124
00:09:18,240 --> 00:09:21,360
that you still don't have access to the

125
00:09:21,360 --> 00:09:23,440
the ip address of the people submitting

126
00:09:23,440 --> 00:09:24,560
this

127
00:09:24,560 --> 00:09:26,880
and also you have to use a randomness

128
00:09:26,880 --> 00:09:28,959
server um because

129
00:09:28,959 --> 00:09:29,680
the

130
00:09:29,680 --> 00:09:31,519
you could also do this locally but we

131
00:09:31,519 --> 00:09:33,680
decided that um it's just

132
00:09:33,680 --> 00:09:35,839
a lot better for privacy reasons if you

133
00:09:35,839 --> 00:09:38,000
use this so the idea is that you would

134
00:09:38,000 --> 00:09:40,640
the client sends a blinded input value

135
00:09:40,640 --> 00:09:42,160
to the randomness server and it gets

136
00:09:42,160 --> 00:09:43,440
assault back

137
00:09:43,440 --> 00:09:44,800
and if you have

138
00:09:44,800 --> 00:09:48,080
the same input value then

139
00:09:48,080 --> 00:09:49,760
all of those clients would get the same

140
00:09:49,760 --> 00:09:51,839
salt pack um and this is to do this is

141
00:09:51,839 --> 00:09:54,399
done to like mitigate the server brute

142
00:09:54,399 --> 00:09:56,320
forcing all possible input values

143
00:09:56,320 --> 00:09:58,080
because if the

144
00:09:58,080 --> 00:10:00,640
if the space for the

145
00:10:00,640 --> 00:10:03,680
if the initial measurement is not except

146
00:10:03,680 --> 00:10:05,600
doesn't have enough entropy then

147
00:10:05,600 --> 00:10:08,160
the so the server can very easily

148
00:10:08,160 --> 00:10:09,839
brute force all possible values and then

149
00:10:09,839 --> 00:10:11,839
just see what the values match up with

150
00:10:11,839 --> 00:10:13,200
the encrypted value

151
00:10:13,200 --> 00:10:15,680
uh and then yeah we also use an opr to

152
00:10:15,680 --> 00:10:16,959
make sure that the randomness server

153
00:10:16,959 --> 00:10:18,959
does not learn the

154
00:10:18,959 --> 00:10:21,040
input value as well

155
00:10:21,040 --> 00:10:23,279
this is the architecture so there is a

156
00:10:23,279 --> 00:10:25,440
randomness phase like i mentioned where

157
00:10:25,440 --> 00:10:26,800
the client talks to the randomness

158
00:10:26,800 --> 00:10:27,920
server

159
00:10:27,920 --> 00:10:29,360
and gets back

160
00:10:29,360 --> 00:10:31,600
the random value that it needs to

161
00:10:31,600 --> 00:10:33,200
generate the message

162
00:10:33,200 --> 00:10:35,600
and then there's a key rotation

163
00:10:35,600 --> 00:10:37,279
and this is done so that

164
00:10:37,279 --> 00:10:39,279
when the aggregation server gets the

165
00:10:39,279 --> 00:10:41,040
message the

166
00:10:41,040 --> 00:10:43,120
randomness server has already already

167
00:10:43,120 --> 00:10:45,040
rotated its keys so the aggregation

168
00:10:45,040 --> 00:10:47,040
server can't ask the randomness server

169
00:10:47,040 --> 00:10:48,240
at this point

170
00:10:48,240 --> 00:10:50,640
um and yes and then the client sends the

171
00:10:50,640 --> 00:10:52,399
encrypted message over an anonymizing

172
00:10:52,399 --> 00:10:55,120
proxy to the aggregation server and then

173
00:10:55,120 --> 00:10:57,040
there's an aggregation phase where you

174
00:10:57,040 --> 00:10:59,279
can reveal the original message if it's

175
00:10:59,279 --> 00:11:02,399
sent by enough clients

176
00:11:08,160 --> 00:11:09,920
right now yeah

177
00:11:09,920 --> 00:11:11,760
we're all allowing only 10 minutes for

178
00:11:11,760 --> 00:11:16,399
this now so the questions are nice

179
00:11:16,399 --> 00:11:17,680
okay cool

180
00:11:17,680 --> 00:11:19,680
um so the implementation status is that

181
00:11:19,680 --> 00:11:21,440
we're shipping this in brave for some

182
00:11:21,440 --> 00:11:23,760
telemetry um there is an open source

183
00:11:23,760 --> 00:11:25,839
rust implementation with some razon

184
00:11:25,839 --> 00:11:27,600
bindings

185
00:11:27,600 --> 00:11:29,920
and we right now using a tcp proxy for

186
00:11:29,920 --> 00:11:32,399
the anonymizing proxy bit but we're

187
00:11:32,399 --> 00:11:34,240
experimenting with we're using an ohio

188
00:11:34,240 --> 00:11:36,480
one

189
00:11:37,440 --> 00:11:39,519
yeah and we made a bunch of changes

190
00:11:39,519 --> 00:11:41,519
given the feedback that we got at the

191
00:11:41,519 --> 00:11:43,360
last ietf on mailing list and through

192
00:11:43,360 --> 00:11:46,399
conversations so we don't use punctual

193
00:11:46,399 --> 00:11:48,240
uh opr apps anymore

194
00:11:48,240 --> 00:11:49,279
and um

195
00:11:49,279 --> 00:11:51,120
we just simply rotate the keys like i

196
00:11:51,120 --> 00:11:53,120
mentioned um so the randomness server

197
00:11:53,120 --> 00:11:55,600
the client can only sends the encrypted

198
00:11:55,600 --> 00:11:58,800
value to the aggregation server um in

199
00:11:58,800 --> 00:12:01,120
the subsequent ebook after the

200
00:12:01,120 --> 00:12:03,519
randomness phase and yeah we also

201
00:12:03,519 --> 00:12:05,680
require the use of a randomness server

202
00:12:05,680 --> 00:12:07,760
um just to make i guess keep things

203
00:12:07,760 --> 00:12:09,920
simple and um you don't have to like

204
00:12:09,920 --> 00:12:11,519
then make that decision yourself oh

205
00:12:11,519 --> 00:12:14,720
should i do i need one do i not need one

206
00:12:14,720 --> 00:12:16,320
and also apart from that just a bunch of

207
00:12:16,320 --> 00:12:18,720
documentation of the risk of collusions

208
00:12:18,720 --> 00:12:21,680
um between various entities um and just

209
00:12:21,680 --> 00:12:24,399
a lot more like details on leakages and

210
00:12:24,399 --> 00:12:26,000
the security consideration sections and

211
00:12:26,000 --> 00:12:27,279
stuff like that

212
00:12:27,279 --> 00:12:29,279
and um

213
00:12:29,279 --> 00:12:30,959
yeah and

214
00:12:30,959 --> 00:12:33,040
we think it's ready for adoption um we

215
00:12:33,040 --> 00:12:35,440
spoke a bunch to chris wood and um he

216
00:12:35,440 --> 00:12:37,600
had some good comments and

217
00:12:37,600 --> 00:12:39,519
i think we will be making those comments

218
00:12:39,519 --> 00:12:40,480
but i think at this point it would be

219
00:12:40,480 --> 00:12:42,399
great if that's a

220
00:12:42,399 --> 00:12:44,560
working group um

221
00:12:44,560 --> 00:12:45,200
if

222
00:12:45,200 --> 00:12:47,760
the if the draft is like a working group

223
00:12:47,760 --> 00:12:49,600
thing that the working group works on

224
00:12:49,600 --> 00:12:51,519
instead of just a couple of people so

225
00:12:51,519 --> 00:12:53,360
yeah so happy to hear any comments about

226
00:12:53,360 --> 00:12:54,399
that

227
00:12:54,399 --> 00:12:56,639
thank you

228
00:12:57,519 --> 00:12:58,240
so

229
00:12:58,240 --> 00:12:59,279
um

230
00:12:59,279 --> 00:13:00,800
first question um

231
00:13:00,800 --> 00:13:02,560
how long do you imagine the epochs being

232
00:13:02,560 --> 00:13:03,680
is it again sorry how long do you

233
00:13:03,680 --> 00:13:05,680
envision the epochs being

234
00:13:05,680 --> 00:13:09,279
how long do we envision the airpods

235
00:13:09,279 --> 00:13:10,399
because now that you have because you've

236
00:13:10,399 --> 00:13:11,920
diverted the keys every so often right

237
00:13:11,920 --> 00:13:13,040
and you say you can't upload the data

238
00:13:13,040 --> 00:13:14,480
until after the

239
00:13:14,480 --> 00:13:15,680
so how long do you vision the epochs

240
00:13:15,680 --> 00:13:19,200
begin right so right now we um use it

241
00:13:19,200 --> 00:13:21,440
the the the time period we use is one

242
00:13:21,440 --> 00:13:22,639
day okay

243
00:13:22,639 --> 00:13:25,760
but that's what we imagine

244
00:13:25,760 --> 00:13:28,480
okay my second question is what happens

245
00:13:28,480 --> 00:13:30,720
if um

246
00:13:30,720 --> 00:13:32,639
if i as a client

247
00:13:32,639 --> 00:13:35,040
generate a bogus share what i mean is i

248
00:13:35,040 --> 00:13:36,320
generate a share that corresponds to a

249
00:13:36,320 --> 00:13:38,399
different encryption key

250
00:13:38,399 --> 00:13:39,279
right

251
00:13:39,279 --> 00:13:40,959
um yeah so this is something that chris

252
00:13:40,959 --> 00:13:43,279
would brought up as well and

253
00:13:43,279 --> 00:13:44,399
so you mean like when you finally

254
00:13:44,399 --> 00:13:46,959
decrypt it you get a value that is not

255
00:13:46,959 --> 00:13:49,199
the same as the other ones right

256
00:13:49,199 --> 00:13:50,639
well that's not but that's not what

257
00:13:50,639 --> 00:13:53,040
happens right no no no no no i generate

258
00:13:53,040 --> 00:13:55,279
a secret share that corresponds to a

259
00:13:55,279 --> 00:13:57,839
random value

260
00:14:01,120 --> 00:14:02,480
so that when we construct something

261
00:14:02,480 --> 00:14:04,560
similar right any endpoints right allow

262
00:14:04,560 --> 00:14:06,880
you construct right and so imagine that

263
00:14:06,880 --> 00:14:08,480
imagine the amount like a modest civil

264
00:14:08,480 --> 00:14:11,519
attack or 20 so you need 500 so you need

265
00:14:11,519 --> 00:14:14,560
500 500 shares and 10 of shares are

266
00:14:14,560 --> 00:14:16,800
bogus and correspond to

267
00:14:16,800 --> 00:14:19,360
and correspond so what happens then so

268
00:14:19,360 --> 00:14:21,600
but it is a secret share um you're

269
00:14:21,600 --> 00:14:23,199
trying to attack a particular

270
00:14:23,199 --> 00:14:24,480
well i want what i want is to make it

271
00:14:24,480 --> 00:14:25,760
impossible for you to construct a given

272
00:14:25,760 --> 00:14:28,399
value so like so so for instance like

273
00:14:28,399 --> 00:14:30,399
you're collecting the top urls right and

274
00:14:30,399 --> 00:14:31,600
i want to make it to impossible for you

275
00:14:31,600 --> 00:14:32,800
to impossible for you to collect the

276
00:14:32,800 --> 00:14:35,360
google.com on the top urls so what i do

277
00:14:35,360 --> 00:14:37,920
is i generate a description

278
00:14:37,920 --> 00:14:39,839
because i generate so i generate a thing

279
00:14:39,839 --> 00:14:41,519
that has the encrypted value for

280
00:14:41,519 --> 00:14:42,720
google.com

281
00:14:42,720 --> 00:14:44,320
but has a secret share that corresponds

282
00:14:44,320 --> 00:14:46,079
to a random point

283
00:14:46,079 --> 00:14:47,839
i think generally we are keeping civil

284
00:14:47,839 --> 00:14:49,839
attacks out of um

285
00:14:49,839 --> 00:14:52,079
out of scope because i think that's a

286
00:14:52,079 --> 00:14:53,760
common problem with like many systems

287
00:14:53,760 --> 00:14:54,560
but

288
00:14:54,560 --> 00:14:56,079
the one thing that we do that we were

289
00:14:56,079 --> 00:14:58,480
talking about with chris is that

290
00:14:58,480 --> 00:15:00,959
if on decryption like that's one aspect

291
00:15:00,959 --> 00:15:02,800
of it is that on decryption if you see a

292
00:15:02,800 --> 00:15:04,320
value that is different from everyone

293
00:15:04,320 --> 00:15:05,680
else then you

294
00:15:05,680 --> 00:15:06,639
you know i think you're misunderstanding

295
00:15:06,639 --> 00:15:08,000
me no one will be able to correct right

296
00:15:08,000 --> 00:15:09,120
i see that

297
00:15:09,120 --> 00:15:11,040
i think in general we will be not

298
00:15:11,040 --> 00:15:12,959
considering simple values for okay but

299
00:15:12,959 --> 00:15:14,000
this is like this is like the most

300
00:15:14,000 --> 00:15:16,079
trivial analysis attack in the world

301
00:15:16,079 --> 00:15:17,519
like basically

302
00:15:17,519 --> 00:15:18,880
like so

303
00:15:18,880 --> 00:15:19,760
so maybe

304
00:15:19,760 --> 00:15:21,279
they try to hit the point if like

305
00:15:21,279 --> 00:15:22,720
because of the way your super sharing

306
00:15:22,720 --> 00:15:24,560
works if any input value is bogus that

307
00:15:24,560 --> 00:15:26,399
put key is bogus right so if i can

308
00:15:26,399 --> 00:15:27,920
convince you to take as one of the

309
00:15:27,920 --> 00:15:29,839
quorum one of the quorum of n keys the

310
00:15:29,839 --> 00:15:31,839
user construct a point of mine and my

311
00:15:31,839 --> 00:15:33,600
point is bogus the consequence will be

312
00:15:33,600 --> 00:15:35,120
the key is bogus

313
00:15:35,120 --> 00:15:36,959
and and and now you can't charge any of

314
00:15:36,959 --> 00:15:38,160
the values

315
00:15:38,160 --> 00:15:39,440
because you're because your corresponds

316
00:15:39,440 --> 00:15:41,839
to a random key and so the aad fails

317
00:15:41,839 --> 00:15:43,440
but you still wouldn't be able to you

318
00:15:43,440 --> 00:15:45,040
would still be waiting for enough number

319
00:15:45,040 --> 00:15:46,880
of no no no no because

320
00:15:46,880 --> 00:15:49,040
so if i understand it you inventory

321
00:15:49,040 --> 00:15:51,279
the you sort the keys so you sort the

322
00:15:51,279 --> 00:15:53,759
inputs on the encrypted value right good

323
00:15:53,759 --> 00:15:55,600
so you bucket them up on encrypted value

324
00:15:55,600 --> 00:15:57,120
you take the corresponding sql shares

325
00:15:57,120 --> 00:15:59,120
right now you can start the key

326
00:15:59,120 --> 00:16:00,480
and now you get a key and you try to

327
00:16:00,480 --> 00:16:02,160
decrypt them and none of the values will

328
00:16:02,160 --> 00:16:04,560
decrypt

329
00:16:05,279 --> 00:16:06,959
and so because if you consider one key

330
00:16:06,959 --> 00:16:09,519
you've considered a random key right

331
00:16:09,519 --> 00:16:11,040
so you've got to say so you've got to

332
00:16:11,040 --> 00:16:13,199
find somebody to reject the bogus key

333
00:16:13,199 --> 00:16:15,199
the book is inputs right

334
00:16:15,199 --> 00:16:16,560
and so if i remember correctly there was

335
00:16:16,560 --> 00:16:18,399
some technique that apple used in their

336
00:16:18,399 --> 00:16:20,800
um in their in their system system for

337
00:16:20,800 --> 00:16:22,959
this but like i don't know how to do it

338
00:16:22,959 --> 00:16:24,720
with this design so

339
00:16:24,720 --> 00:16:26,160
um so i think this actually doesn't

340
00:16:26,160 --> 00:16:27,680
answer for this i think it's not just i

341
00:16:27,680 --> 00:16:29,519
mean so civil i mean like it's like one

342
00:16:29,519 --> 00:16:31,199
thing to be like we don't have

343
00:16:31,199 --> 00:16:32,560
grand civil attacks but like the

344
00:16:32,560 --> 00:16:35,040
situation where you know

345
00:16:35,040 --> 00:16:36,800
the situation is that like if i can get

346
00:16:36,800 --> 00:16:38,720
any small fraction of the keys that you

347
00:16:38,720 --> 00:16:40,399
can't decrypt um that's like actually

348
00:16:40,399 --> 00:16:41,680
very serious so i think you think you

349
00:16:41,680 --> 00:16:42,639
need a way to

350
00:16:42,639 --> 00:16:45,519
reject bad input shares okay

351
00:16:45,519 --> 00:16:47,199
um

352
00:16:47,199 --> 00:16:48,959
yeah i got to think more about that

353
00:16:48,959 --> 00:16:51,199
um but did you have another i don't know

354
00:16:51,199 --> 00:16:52,320
i don't know i don't know how to fix it

355
00:16:52,320 --> 00:16:54,880
um i think as i i said i said um my

356
00:16:54,880 --> 00:16:57,680
pleasure would be that there was a um

357
00:16:57,680 --> 00:17:00,240
that in the um in the binet

358
00:17:00,240 --> 00:17:04,799
um you know um lester meyers apple ccm

359
00:17:04,799 --> 00:17:06,480
thing they had a secret share a secret

360
00:17:06,480 --> 00:17:07,919
shimmer secret share scheme and they had

361
00:17:07,919 --> 00:17:09,359
some way to

362
00:17:09,359 --> 00:17:11,359
reject broker's values so maybe you can

363
00:17:11,359 --> 00:17:14,079
steal that maybe you can't

364
00:17:14,079 --> 00:17:14,880
yeah

365
00:17:14,880 --> 00:17:17,919
the queue is closed and uh alex it's

366
00:17:17,919 --> 00:17:21,039
your uh you're the last speaker

367
00:17:21,039 --> 00:17:23,520
hey uh can you hear me okay

368
00:17:23,520 --> 00:17:24,959
yes alex

369
00:17:24,959 --> 00:17:27,679
yeah uh yeah i'm alex i'm one of the

370
00:17:27,679 --> 00:17:29,360
authors of the star draft a co-author of

371
00:17:29,360 --> 00:17:31,440
the star draft so in answer to eric's

372
00:17:31,440 --> 00:17:32,960
question that's what we do in brave is

373
00:17:32,960 --> 00:17:35,440
we take the threshold a threshold number

374
00:17:35,440 --> 00:17:37,280
the threshold number of ship the minimum

375
00:17:37,280 --> 00:17:38,640
threshold number of shares and tries to

376
00:17:38,640 --> 00:17:39,919
reconstruct and then if we can't

377
00:17:39,919 --> 00:17:41,679
reconstruct we keep taking random sets

378
00:17:41,679 --> 00:17:42,880
of shares so

379
00:17:42,880 --> 00:17:45,440
that's like one thing that we don't work

380
00:17:45,440 --> 00:17:46,799
if there's any substantial fractions of

381
00:17:46,799 --> 00:17:48,799
bogus

382
00:17:48,799 --> 00:17:50,559
uh no

383
00:17:50,559 --> 00:17:52,400
say your threshold see a threshold is

384
00:17:52,400 --> 00:17:54,799
zero threshold is 500 shares right and

385
00:17:54,799 --> 00:17:56,720
one percent of the shares are bogus what

386
00:17:56,720 --> 00:17:58,400
is what is the chance that not what is

387
00:17:58,400 --> 00:18:00,080
the chance that 99

388
00:18:00,080 --> 00:18:02,640
so 0.99 to the 500 is like an incredibly

389
00:18:02,640 --> 00:18:04,080
small number

390
00:18:04,080 --> 00:18:06,559
so like it doesn't work it doesn't it

391
00:18:06,559 --> 00:18:07,919
doesn't work it can't attack with any

392
00:18:07,919 --> 00:18:09,440
kind of power

393
00:18:09,440 --> 00:18:11,679
agreed but the adept secret sharing

394
00:18:11,679 --> 00:18:13,360
framework that we currently have has

395
00:18:13,360 --> 00:18:15,039
like a mechanism for deciding whether

396
00:18:15,039 --> 00:18:16,320
shares are authenticated or not and

397
00:18:16,320 --> 00:18:18,320
that's the thing that we use

398
00:18:18,320 --> 00:18:20,799
dedicated

399
00:18:21,679 --> 00:18:23,200
there's mechanisms in the adept secret

400
00:18:23,200 --> 00:18:25,039
showing framework to decide whether

401
00:18:25,039 --> 00:18:26,799
shares are valid or not

402
00:18:26,799 --> 00:18:28,080
and whether they agree with a certain

403
00:18:28,080 --> 00:18:30,240
policy okay i i i i do have to write

404
00:18:30,240 --> 00:18:32,000
this down because like i'm sorry

405
00:18:32,000 --> 00:18:33,440
i i think

406
00:18:33,440 --> 00:18:34,320
the

407
00:18:34,320 --> 00:18:36,559
uh thanks for thanks for

408
00:18:36,559 --> 00:18:37,679
uh

409
00:18:37,679 --> 00:18:39,679
highlighting that point uh i think we're

410
00:18:39,679 --> 00:18:41,679
out of time we need to move to the next

411
00:18:41,679 --> 00:18:42,720
speaker

412
00:18:42,720 --> 00:18:45,679
which is tim

413
00:18:46,080 --> 00:18:47,520
thanks for mentioning the the question

414
00:18:47,520 --> 00:18:50,480
of adoption uh we we might come back to

415
00:18:50,480 --> 00:18:52,320
that if there happens to be time at the

416
00:18:52,320 --> 00:18:55,720
end of the session

417
00:19:04,720 --> 00:19:05,919
uh

418
00:19:05,919 --> 00:19:08,240
chris uh

419
00:19:08,240 --> 00:19:10,799
is uh

420
00:19:10,799 --> 00:19:13,600
i see tim is in the in the q2 tim this

421
00:19:13,600 --> 00:19:16,240
is your uh presentation do you want to

422
00:19:16,240 --> 00:19:17,679
present slides

423
00:19:17,679 --> 00:19:20,160
no go ahead if you have them

424
00:19:20,160 --> 00:19:21,200
uh oh

425
00:19:21,200 --> 00:19:22,960
i see a slide request i'm happy to

426
00:19:22,960 --> 00:19:25,840
approve that

427
00:19:34,880 --> 00:19:37,440
here we go okay

428
00:19:37,440 --> 00:19:39,600
let's see and i got buttons

429
00:19:39,600 --> 00:19:42,480
all right great let's get started uh

430
00:19:42,480 --> 00:19:44,160
okay so

431
00:19:44,160 --> 00:19:45,280
um

432
00:19:45,280 --> 00:19:47,200
so in this uh particular deck we're

433
00:19:47,200 --> 00:19:48,880
going to cover uh the current status of

434
00:19:48,880 --> 00:19:50,880
implementations of jp

435
00:19:50,880 --> 00:19:52,640
then i want to talk about a small number

436
00:19:52,640 --> 00:19:54,640
of the notable changes in the most

437
00:19:54,640 --> 00:19:57,440
recent draft 001 of bap and then we're

438
00:19:57,440 --> 00:19:59,039
going to use that to segue into the

439
00:19:59,039 --> 00:20:01,360
discussion of a couple of

440
00:20:01,360 --> 00:20:04,080
one or two open problems that the chairs

441
00:20:04,080 --> 00:20:04,880
have encountered and that we're

442
00:20:04,880 --> 00:20:06,240
interested in discussing in the working

443
00:20:06,240 --> 00:20:07,760
group before i move on i just want to

444
00:20:07,760 --> 00:20:09,520
check can the room hear me everyone can

445
00:20:09,520 --> 00:20:12,080
hear me okay

446
00:20:13,039 --> 00:20:14,000
chairs

447
00:20:14,000 --> 00:20:16,400
we hear you clearly on site

448
00:20:16,400 --> 00:20:17,840
sounds good all right

449
00:20:17,840 --> 00:20:18,640
so

450
00:20:18,640 --> 00:20:21,440
implementation status so as of right now

451
00:20:21,440 --> 00:20:23,840
we have two implementations of draft

452
00:20:23,840 --> 00:20:25,480
ietf ppm

453
00:20:25,480 --> 00:20:27,679
dap01 uh

454
00:20:27,679 --> 00:20:29,679
that are up on github uh first there's

455
00:20:29,679 --> 00:20:32,159
daphne which implements a dap leader

456
00:20:32,159 --> 00:20:35,039
helper and a collector and is written in

457
00:20:35,039 --> 00:20:36,320
pure rust

458
00:20:36,320 --> 00:20:38,559
then yanus is another implementation of

459
00:20:38,559 --> 00:20:40,880
dap server components uh also written in

460
00:20:40,880 --> 00:20:43,440
pure rust um so dafty and giannis are

461
00:20:43,440 --> 00:20:44,960
independent implementations of dap

462
00:20:44,960 --> 00:20:46,159
though they do share some common

463
00:20:46,159 --> 00:20:47,440
dependencies which we'll get to in a

464
00:20:47,440 --> 00:20:51,200
minute and finally there's a divi up ts

465
00:20:51,200 --> 00:20:53,120
which is a client so it only has enough

466
00:20:53,120 --> 00:20:54,960
of the protocol and cryptography bits

467
00:20:54,960 --> 00:20:56,880
just to do report uploads

468
00:20:56,880 --> 00:20:58,640
uh and it's written mostly in pure

469
00:20:58,640 --> 00:21:00,080
typescript although some of the

470
00:21:00,080 --> 00:21:02,320
cryptography dependencies are transpiled

471
00:21:02,320 --> 00:21:04,240
from rust

472
00:21:04,240 --> 00:21:05,919
uh so as

473
00:21:05,919 --> 00:21:07,039
chris patton would have explained

474
00:21:07,039 --> 00:21:10,880
hedigon before me um so the dnp protocol

475
00:21:10,880 --> 00:21:14,080
is defined in terms of vdaf which is a

476
00:21:14,080 --> 00:21:16,000
verifiable distributed aggregation

477
00:21:16,000 --> 00:21:17,760
functions uh so that's being

478
00:21:17,760 --> 00:21:19,760
standardized through the cfrg

479
00:21:19,760 --> 00:21:21,360
um and draft zero two of that just

480
00:21:21,360 --> 00:21:23,520
dropped a few weeks ago now

481
00:21:23,520 --> 00:21:26,159
uh so we have an implementation of vdaf

482
00:21:26,159 --> 00:21:29,919
draft zero one um in librio rs

483
00:21:29,919 --> 00:21:32,159
which is up on github and also published

484
00:21:32,159 --> 00:21:34,880
as create prio on create.io

485
00:21:34,880 --> 00:21:37,440
um the significant thing that's missing

486
00:21:37,440 --> 00:21:38,799
from librio in order to be an

487
00:21:38,799 --> 00:21:41,280
implementation of vda f02 is an

488
00:21:41,280 --> 00:21:43,200
efficient um which is to say scalable

489
00:21:43,200 --> 00:21:44,960
implementation of popular one which we

490
00:21:44,960 --> 00:21:46,480
don't currently have but we're hoping to

491
00:21:46,480 --> 00:21:48,320
get to in the coming months

492
00:21:48,320 --> 00:21:49,360
uh

493
00:21:49,360 --> 00:21:51,360
so as i mentioned before daphne and

494
00:21:51,360 --> 00:21:52,640
giannis are

495
00:21:52,640 --> 00:21:54,559
independent implementations of dap but

496
00:21:54,559 --> 00:21:56,840
they both use libprio to implement um

497
00:21:56,840 --> 00:21:58,480
vdafs

498
00:21:58,480 --> 00:21:59,840
so it certainly would be nice to see

499
00:21:59,840 --> 00:22:01,679
more implementations and especially ones

500
00:22:01,679 --> 00:22:03,919
in um some languages besides rust then

501
00:22:03,919 --> 00:22:05,120
you want there if anyone out there is

502
00:22:05,120 --> 00:22:06,080
interesting

503
00:22:06,080 --> 00:22:07,919
so yeah all this stuff is up on github

504
00:22:07,919 --> 00:22:10,080
uh please you know go check it out uh

505
00:22:10,080 --> 00:22:11,360
maybe deploy them let us know how it

506
00:22:11,360 --> 00:22:12,720
works out for you

507
00:22:12,720 --> 00:22:14,640
uh so we have been doing uh some measure

508
00:22:14,640 --> 00:22:17,280
of manual testing of interoperability uh

509
00:22:17,280 --> 00:22:19,039
between daphne and giannis which has

510
00:22:19,039 --> 00:22:21,440
gone all right and going forward uh

511
00:22:21,440 --> 00:22:22,640
we're looking at designing an

512
00:22:22,640 --> 00:22:24,720
interoperability test framework inspired

513
00:22:24,720 --> 00:22:26,480
by the quick interrupt runner

514
00:22:26,480 --> 00:22:28,400
uh the uh the aim of which is uh you

515
00:22:28,400 --> 00:22:30,000
know in a nutshell you could take a dp

516
00:22:30,000 --> 00:22:31,840
implementation stick it inside a docker

517
00:22:31,840 --> 00:22:33,760
container and then besides the endpoints

518
00:22:33,760 --> 00:22:35,520
uh specified by the protocol you would

519
00:22:35,520 --> 00:22:37,440
have um a handful of extra sort of

520
00:22:37,440 --> 00:22:39,360
control endpoints that allow the

521
00:22:39,360 --> 00:22:42,159
automated um setup and execution of

522
00:22:42,159 --> 00:22:44,400
interoperability tests so the idea being

523
00:22:44,400 --> 00:22:46,000
that uh hopefully at some point we'll

524
00:22:46,000 --> 00:22:46,960
have

525
00:22:46,960 --> 00:22:48,480
some tests running in like a continuous

526
00:22:48,480 --> 00:22:50,799
integration setup somewhere that uh you

527
00:22:50,799 --> 00:22:51,840
know gives us

528
00:22:51,840 --> 00:22:53,039
like ongoing results about whether

529
00:22:53,039 --> 00:22:55,039
implementations are working and can talk

530
00:22:55,039 --> 00:22:57,120
to each other

531
00:22:57,120 --> 00:22:58,559
okay so that's it for implementation

532
00:22:58,559 --> 00:23:00,559
status and let's look at some stuff

533
00:23:00,559 --> 00:23:02,880
interesting stuff that's changed

534
00:23:02,880 --> 00:23:05,039
first up there's a course grain report

535
00:23:05,039 --> 00:23:06,720
timestamps

536
00:23:06,720 --> 00:23:09,520
so in uh dap a report gets uniquely

537
00:23:09,520 --> 00:23:12,320
identified by its knots and a nonce

538
00:23:12,320 --> 00:23:13,919
consists of the time at which the

539
00:23:13,919 --> 00:23:15,760
measurement was taken and then a random

540
00:23:15,760 --> 00:23:17,440
component that's intended to make the

541
00:23:17,440 --> 00:23:20,640
nazis unique so nonces have to be unique

542
00:23:20,640 --> 00:23:22,640
uh because they are used for anti-replay

543
00:23:22,640 --> 00:23:24,720
by the aggregators and they are time

544
00:23:24,720 --> 00:23:26,000
stamped so that the aggregators can

545
00:23:26,000 --> 00:23:28,400
decide whether a given report falls into

546
00:23:28,400 --> 00:23:31,679
a particular batch interval um

547
00:23:31,679 --> 00:23:34,400
so up until draft zero one the notch was

548
00:23:34,400 --> 00:23:35,840
the number of seconds since the unix

549
00:23:35,840 --> 00:23:38,880
epic and then eight random bikes

550
00:23:38,880 --> 00:23:40,640
as it turns out that timestamp is high

551
00:23:40,640 --> 00:23:42,080
enough resolution to leak some

552
00:23:42,080 --> 00:23:44,080
meaningful information about the client

553
00:23:44,080 --> 00:23:46,400
so as of the most recent draft we now

554
00:23:46,400 --> 00:23:48,400
expect clients to round the timestamp

555
00:23:48,400 --> 00:23:50,080
down to the minimum batch duration which

556
00:23:50,080 --> 00:23:52,559
is one of the long lived task parameters

557
00:23:52,559 --> 00:23:54,799
and we widen the random component to 16

558
00:23:54,799 --> 00:23:55,919
bytes

559
00:23:55,919 --> 00:23:58,400
so this allows a task to tune how

560
00:23:58,400 --> 00:24:00,400
identifying a time stamp is because

561
00:24:00,400 --> 00:24:02,080
bigger mid-batch duration takes entropy

562
00:24:02,080 --> 00:24:03,360
out of the timestamp

563
00:24:03,360 --> 00:24:04,880
but we can still ensure that noises are

564
00:24:04,880 --> 00:24:06,880
unique and meet the requirements

565
00:24:06,880 --> 00:24:08,240
so you can take a look at the linked

566
00:24:08,240 --> 00:24:09,360
issue and pr

567
00:24:09,360 --> 00:24:11,039
the ones linked on the slide and the

568
00:24:11,039 --> 00:24:12,799
chairs want to thank shan wyang for

569
00:24:12,799 --> 00:24:16,320
championing this great idea

570
00:24:16,559 --> 00:24:19,520
moving on uh but okay next big idea is

571
00:24:19,520 --> 00:24:21,360
aggregation jobs

572
00:24:21,360 --> 00:24:23,200
so first

573
00:24:23,200 --> 00:24:25,039
uh let's recall what the aggregation sub

574
00:24:25,039 --> 00:24:26,400
protocol is about

575
00:24:26,400 --> 00:24:27,600
and i suppose here i should take a brief

576
00:24:27,600 --> 00:24:30,640
parenthesis to note that um dfp

577
00:24:30,640 --> 00:24:31,440
uh

578
00:24:31,440 --> 00:24:33,679
consists of three sub-protocols upload

579
00:24:33,679 --> 00:24:35,600
where clients are transmitting reports

580
00:24:35,600 --> 00:24:38,880
to the aggregators then aggregate where

581
00:24:38,880 --> 00:24:39,760
the

582
00:24:39,760 --> 00:24:41,679
aggregators jointly

583
00:24:41,679 --> 00:24:42,640
prepare

584
00:24:42,640 --> 00:24:44,480
prepare inputs

585
00:24:44,480 --> 00:24:46,480
and aggregate them and finally collect

586
00:24:46,480 --> 00:24:48,960
where the aggregate shares are

587
00:24:48,960 --> 00:24:51,279
transmitted uh to the collector so that

588
00:24:51,279 --> 00:24:53,600
it can get the eventual aggregate result

589
00:24:53,600 --> 00:24:55,360
uh chris patton is going to get a into

590
00:24:55,360 --> 00:24:56,640
this a little bit more

591
00:24:56,640 --> 00:24:57,679
uh

592
00:24:57,679 --> 00:25:00,480
in just a few more minutes uh okay

593
00:25:00,480 --> 00:25:01,840
turning back to the aggregation sub

594
00:25:01,840 --> 00:25:03,600
protocol let's just unpack a bit more

595
00:25:03,600 --> 00:25:05,200
what it actually does

596
00:25:05,200 --> 00:25:06,080
so

597
00:25:06,080 --> 00:25:07,760
at some point uh aggregators are going

598
00:25:07,760 --> 00:25:09,360
to be holding some large number of input

599
00:25:09,360 --> 00:25:10,880
chairs that have been uploaded by

600
00:25:10,880 --> 00:25:11,840
clients

601
00:25:11,840 --> 00:25:13,279
and i mean they want to aggregate them

602
00:25:13,279 --> 00:25:15,919
together but in the taxonomy of dap you

603
00:25:15,919 --> 00:25:18,880
can't actually aggregate input shares

604
00:25:18,880 --> 00:25:20,880
you first have to obtain an output share

605
00:25:20,880 --> 00:25:23,360
an output share that is from each input

606
00:25:23,360 --> 00:25:26,080
share and that process of going from

607
00:25:26,080 --> 00:25:28,320
input to output share is what vdaf

608
00:25:28,320 --> 00:25:30,559
refers to as preparation

609
00:25:30,559 --> 00:25:32,960
so preparation is generally going to

610
00:25:32,960 --> 00:25:34,640
require multiple rounds of interaction

611
00:25:34,640 --> 00:25:36,640
between the aggregators exactly how many

612
00:25:36,640 --> 00:25:39,679
depends on the vdaf in use

613
00:25:39,679 --> 00:25:41,919
and that process is stateful so what

614
00:25:41,919 --> 00:25:43,279
actually happens when we prepare an

615
00:25:43,279 --> 00:25:45,840
input into an output depends on the vdaf

616
00:25:45,840 --> 00:25:48,640
once again so in the prio family of

617
00:25:48,640 --> 00:25:49,919
vdafs

618
00:25:49,919 --> 00:25:51,760
we are only evaluating the

619
00:25:51,760 --> 00:25:53,120
zero-knowledge proofs of the input's

620
00:25:53,120 --> 00:25:54,960
validity and no actual transformation

621
00:25:54,960 --> 00:25:57,120
occurs from input to output so it'd be

622
00:25:57,120 --> 00:25:58,559
tempting then to call this process

623
00:25:58,559 --> 00:26:01,279
verification or proof evaluation but we

624
00:26:01,279 --> 00:26:04,240
know that in vdas like poplar one or

625
00:26:04,240 --> 00:26:06,240
other vdafs that have yet to be

626
00:26:06,240 --> 00:26:08,400
specified there will be some meaningful

627
00:26:08,400 --> 00:26:09,919
transformation such that the input and

628
00:26:09,919 --> 00:26:11,919
output don't have the same type hence we

629
00:26:11,919 --> 00:26:13,279
end up with the

630
00:26:13,279 --> 00:26:15,520
somewhat unhelpfully generic term of

631
00:26:15,520 --> 00:26:17,039
preparation

632
00:26:17,039 --> 00:26:18,559
but one thing that we do expect is going

633
00:26:18,559 --> 00:26:21,840
to hold across all or most vdafs is that

634
00:26:21,840 --> 00:26:23,840
preparation is embarrassingly parallel

635
00:26:23,840 --> 00:26:25,760
since verifying the proof of one input's

636
00:26:25,760 --> 00:26:26,799
validity

637
00:26:26,799 --> 00:26:28,000
should generally be completely

638
00:26:28,000 --> 00:26:29,600
independent from another

639
00:26:29,600 --> 00:26:31,360
so we want to enable the leader to be

640
00:26:31,360 --> 00:26:32,720
able to schedule the preparation of lots

641
00:26:32,720 --> 00:26:34,240
and lots of inputs in parallel for

642
00:26:34,240 --> 00:26:35,440
efficiency

643
00:26:35,440 --> 00:26:37,039
and this is why we introduced this

644
00:26:37,039 --> 00:26:38,799
notion of the aggregation job into the

645
00:26:38,799 --> 00:26:39,919
protocol

646
00:26:39,919 --> 00:26:41,360
okay so as we discussed at some point

647
00:26:41,360 --> 00:26:42,320
the leader is going to want to schedule

648
00:26:42,320 --> 00:26:44,880
the preparation of a big set of shares

649
00:26:44,880 --> 00:26:47,520
uh in the prio family vdafs preparation

650
00:26:47,520 --> 00:26:49,360
can begin as soon as the aggregators

651
00:26:49,360 --> 00:26:51,679
receive inputs from the clients because

652
00:26:51,679 --> 00:26:54,159
there isn't an aggregation parameter uh

653
00:26:54,159 --> 00:26:56,480
in those vdafs so maybe in that setting

654
00:26:56,480 --> 00:26:58,400
the leader every time it receives a

655
00:26:58,400 --> 00:27:00,640
thousand inputs uh it'll dispatch an

656
00:27:00,640 --> 00:27:03,120
aggregation job right but in something

657
00:27:03,120 --> 00:27:05,279
like poplar one you can't do preparation

658
00:27:05,279 --> 00:27:07,200
until you get an aggregation parameter

659
00:27:07,200 --> 00:27:09,039
from the collector so there maybe the

660
00:27:09,039 --> 00:27:10,880
collector will have gathered 10 million

661
00:27:10,880 --> 00:27:12,240
client inputs by the time it gets the

662
00:27:12,240 --> 00:27:14,000
aggregation parameter and at that point

663
00:27:14,000 --> 00:27:15,200
it's going to want to schedule say a

664
00:27:15,200 --> 00:27:17,200
thousand parallel aggregation jobs to

665
00:27:17,200 --> 00:27:19,039
get the collector the aggregate results

666
00:27:19,039 --> 00:27:20,720
sorry aggregate shares as quickly as

667
00:27:20,720 --> 00:27:21,760
possible

668
00:27:21,760 --> 00:27:24,559
so either way what the leader will do is

669
00:27:24,559 --> 00:27:27,200
generate random aggregation job ids and

670
00:27:27,200 --> 00:27:30,000
assign a set of reports to each job that

671
00:27:30,000 --> 00:27:32,320
mapping one job id to many shares gets

672
00:27:32,320 --> 00:27:34,720
transmitted to the uh to the helper in

673
00:27:34,720 --> 00:27:36,559
the aggregate initialize request

674
00:27:36,559 --> 00:27:38,720
illustrated here on the slide and that

675
00:27:38,720 --> 00:27:40,399
job id is going to be referenced in

676
00:27:40,399 --> 00:27:42,000
subsequent messages in the aggregate

677
00:27:42,000 --> 00:27:43,760
protocol

678
00:27:43,760 --> 00:27:45,919
um

679
00:27:45,919 --> 00:27:47,440
right so then the helper can use the job

680
00:27:47,440 --> 00:27:49,279
id to index into its own storage to

681
00:27:49,279 --> 00:27:50,799
fetch the state and execute the next

682
00:27:50,799 --> 00:27:52,960
step of edaf preparation

683
00:27:52,960 --> 00:27:55,200
uh so this enables

684
00:27:55,200 --> 00:27:56,640
many helpers to work in parallel

685
00:27:56,640 --> 00:27:58,080
provided they can share some storage

686
00:27:58,080 --> 00:27:59,520
like you know a database or key value

687
00:27:59,520 --> 00:28:01,440
store or what have you

688
00:28:01,440 --> 00:28:02,960
uh and the other virtue of the scheme is

689
00:28:02,960 --> 00:28:06,080
that since the job ids aren't secret um

690
00:28:06,080 --> 00:28:07,919
the they excuse me the job ids aren't

691
00:28:07,919 --> 00:28:10,240
secret and uh neither do they need any

692
00:28:10,240 --> 00:28:12,480
uh complicated anti-replay protections

693
00:28:12,480 --> 00:28:14,640
because all the sensitive state is in uh

694
00:28:14,640 --> 00:28:17,600
either aggregator's trusted data store

695
00:28:17,600 --> 00:28:19,520
um so again you can check out the linked

696
00:28:19,520 --> 00:28:21,360
issue and pull request on the slide

697
00:28:21,360 --> 00:28:22,960
if you want to learn more about like the

698
00:28:22,960 --> 00:28:25,360
context behind this change

699
00:28:25,360 --> 00:28:28,159
all right moving on uh now let's discuss

700
00:28:28,159 --> 00:28:30,159
how the aggregators authenticate to each

701
00:28:30,159 --> 00:28:31,919
other in this aggregate sub protocol

702
00:28:31,919 --> 00:28:34,240
that we've just been discussing

703
00:28:34,240 --> 00:28:35,360
so

704
00:28:35,360 --> 00:28:38,320
in in dp aggregation is coordinated by

705
00:28:38,320 --> 00:28:40,720
the leader aggregator

706
00:28:40,720 --> 00:28:42,080
though actually in the aggregate sub

707
00:28:42,080 --> 00:28:43,520
protocol the leader is acting as a

708
00:28:43,520 --> 00:28:46,480
client to the helper's http server now

709
00:28:46,480 --> 00:28:48,399
this channel between the two aggregators

710
00:28:48,399 --> 00:28:50,399
has to be mutually authenticated uh to

711
00:28:50,399 --> 00:28:51,520
prevent network attackers from

712
00:28:51,520 --> 00:28:54,000
impersonating either aggregator

713
00:28:54,000 --> 00:28:56,159
we might assume that they talk over tls

714
00:28:56,159 --> 00:28:57,919
which helps to an extent with server

715
00:28:57,919 --> 00:28:59,679
authentication uh but we also need

716
00:28:59,679 --> 00:29:01,120
client auth here

717
00:29:01,120 --> 00:29:02,960
so what's in the spec now as of the pull

718
00:29:02,960 --> 00:29:05,279
request linked in the slide uh is a

719
00:29:05,279 --> 00:29:07,200
requirement that the leader has to set a

720
00:29:07,200 --> 00:29:10,480
um a bearer token under this uh dap auth

721
00:29:10,480 --> 00:29:12,559
token header that we invented in the

722
00:29:12,559 --> 00:29:14,799
request it makes and the value of that

723
00:29:14,799 --> 00:29:18,399
token is a secret pre-negotiated between

724
00:29:18,399 --> 00:29:19,600
the aggregators before the start of the

725
00:29:19,600 --> 00:29:20,960
protocol

726
00:29:20,960 --> 00:29:22,320
now we did this because it enables the

727
00:29:22,320 --> 00:29:23,679
deployments that we have in mind right

728
00:29:23,679 --> 00:29:25,520
now but this isn't really a workable

729
00:29:25,520 --> 00:29:27,520
solution for the protocol uh so first

730
00:29:27,520 --> 00:29:28,880
off you know long-term shared secrets

731
00:29:28,880 --> 00:29:30,240
between the participants is not

732
00:29:30,240 --> 00:29:31,679
desirable we should do our best to avoid

733
00:29:31,679 --> 00:29:32,799
that of course

734
00:29:32,799 --> 00:29:33,679
um

735
00:29:33,679 --> 00:29:34,799
and

736
00:29:34,799 --> 00:29:36,799
more to the point because it's such a

737
00:29:36,799 --> 00:29:38,799
specific prescription uh it makes it

738
00:29:38,799 --> 00:29:40,480
impossible for deployments to use any

739
00:29:40,480 --> 00:29:42,799
number of existing well-established

740
00:29:42,799 --> 00:29:45,200
offense or offset mechanisms uh used

741
00:29:45,200 --> 00:29:47,760
widely used in http apis

742
00:29:47,760 --> 00:29:50,320
so this in particular is something

743
00:29:50,320 --> 00:29:51,440
that we definitely want to change in a

744
00:29:51,440 --> 00:29:53,600
future draft but at this point we should

745
00:29:53,600 --> 00:29:55,120
take a step back from the specific

746
00:29:55,120 --> 00:29:57,120
interaction between the two aggregators

747
00:29:57,120 --> 00:29:59,200
uh and look more broadly at how protocol

748
00:29:59,200 --> 00:30:00,960
participants are authenticating to each

749
00:30:00,960 --> 00:30:03,760
other when they communicate in dap

750
00:30:03,760 --> 00:30:04,640
um

751
00:30:04,640 --> 00:30:06,480
and that's we have a summary in this

752
00:30:06,480 --> 00:30:08,480
slide here

753
00:30:08,480 --> 00:30:10,720
so um so

754
00:30:10,720 --> 00:30:12,480
right so here we have the different uh

755
00:30:12,480 --> 00:30:14,320
communication interactions between uh

756
00:30:14,320 --> 00:30:17,120
dap participants so in the first row

757
00:30:17,120 --> 00:30:19,039
we're looking at uh

758
00:30:19,039 --> 00:30:20,240
the uh

759
00:30:20,240 --> 00:30:21,919
how the client uh interacts with the

760
00:30:21,919 --> 00:30:24,000
aggregators to upload its uh input

761
00:30:24,000 --> 00:30:25,039
shares

762
00:30:25,039 --> 00:30:25,840
so

763
00:30:25,840 --> 00:30:28,240
uh in this case the design requirements

764
00:30:28,240 --> 00:30:30,080
are confidentiality which we achieve by

765
00:30:30,080 --> 00:30:32,880
having uh the client encrypt either

766
00:30:32,880 --> 00:30:35,039
input share to

767
00:30:35,039 --> 00:30:37,440
an hpk public key advertised by either

768
00:30:37,440 --> 00:30:39,200
aggregator of course this is necessary

769
00:30:39,200 --> 00:30:40,960
because if a network observer could see

770
00:30:40,960 --> 00:30:42,399
the input shares in the clear then that

771
00:30:42,399 --> 00:30:44,159
would defeat all the privacy goals of

772
00:30:44,159 --> 00:30:45,440
the protocol what are the colors

773
00:30:45,440 --> 00:30:47,279
maintain

774
00:30:47,279 --> 00:30:49,679
the colors are intended to match up the

775
00:30:49,679 --> 00:30:51,760
requirements to the specified mechanism

776
00:30:51,760 --> 00:30:54,000
that satisfies the requirement and then

777
00:30:54,000 --> 00:30:56,480
red highlights uh just like stuff that's

778
00:30:56,480 --> 00:30:57,679
going to change

779
00:30:57,679 --> 00:30:59,840
um hence the motivation for discussing

780
00:30:59,840 --> 00:31:02,879
this with the working group today

781
00:31:03,279 --> 00:31:04,960
um okay where was i right

782
00:31:04,960 --> 00:31:07,519
confidentiality uh right so we protect

783
00:31:07,519 --> 00:31:10,399
the input shares uh in flight by http

784
00:31:10,399 --> 00:31:11,519
encrypting them to a public key

785
00:31:11,519 --> 00:31:13,840
advertised by either aggregator

786
00:31:13,840 --> 00:31:16,159
okay then of course this has to be uh we

787
00:31:16,159 --> 00:31:17,360
need server authentication in this

788
00:31:17,360 --> 00:31:19,519
setting um because we want to make sure

789
00:31:19,519 --> 00:31:20,399
that the input chairs are being

790
00:31:20,399 --> 00:31:21,840
transmitted to the act the authentic

791
00:31:21,840 --> 00:31:23,519
aggregators participating in a dap

792
00:31:23,519 --> 00:31:26,159
deployment uh so we do this by having

793
00:31:26,159 --> 00:31:27,360
the client

794
00:31:27,360 --> 00:31:29,760
um fetch vhpke configuration that it's

795
00:31:29,760 --> 00:31:32,159
going to encrypt you over tls so that

796
00:31:32,159 --> 00:31:33,679
the server identity can be verified that

797
00:31:33,679 --> 00:31:35,600
way

798
00:31:35,600 --> 00:31:37,200
um

799
00:31:37,200 --> 00:31:39,120
excuse me where was i all right finally

800
00:31:39,120 --> 00:31:41,840
uh we have the dap allows but does not

801
00:31:41,840 --> 00:31:43,679
require the client to authenticate to

802
00:31:43,679 --> 00:31:45,519
the aggregators

803
00:31:45,519 --> 00:31:48,080
um so it's tempting to require klein off

804
00:31:48,080 --> 00:31:50,399
as a mitigation for civil attacks and in

805
00:31:50,399 --> 00:31:51,760
those deployments where this is possible

806
00:31:51,760 --> 00:31:53,600
that's going to be extremely effective

807
00:31:53,600 --> 00:31:55,760
but

808
00:31:55,840 --> 00:31:57,200
but it's not going to be the case that

809
00:31:57,200 --> 00:32:00,159
every deployment will be um will be able

810
00:32:00,159 --> 00:32:02,159
to have a meaningful client side

811
00:32:02,159 --> 00:32:04,080
identity uh with which you could

812
00:32:04,080 --> 00:32:05,519
authenticate

813
00:32:05,519 --> 00:32:08,080
so for that reason um we don't want to

814
00:32:08,080 --> 00:32:09,919
require it in all cases some deployments

815
00:32:09,919 --> 00:32:11,440
are are going to have to allow on

816
00:32:11,440 --> 00:32:13,919
authenticated input uh

817
00:32:13,919 --> 00:32:15,440
input uploads and we'll have to figure

818
00:32:15,440 --> 00:32:16,960
out some other means of mitigating civil

819
00:32:16,960 --> 00:32:18,240
attacks

820
00:32:18,240 --> 00:32:19,440
um

821
00:32:19,440 --> 00:32:20,240
we

822
00:32:20,240 --> 00:32:21,440
we also i

823
00:32:21,440 --> 00:32:23,120
in my view don't want to specify how a

824
00:32:23,120 --> 00:32:24,880
deployment would do client

825
00:32:24,880 --> 00:32:27,279
authentication if it chose to

826
00:32:27,279 --> 00:32:29,039
which i'm going to come back to

827
00:32:29,039 --> 00:32:31,360
all right the next row is um the

828
00:32:31,360 --> 00:32:32,720
communication between the leader and the

829
00:32:32,720 --> 00:32:35,200
helper during the aggregate sub protocol

830
00:32:35,200 --> 00:32:36,799
which we just covered so i don't want to

831
00:32:36,799 --> 00:32:38,799
spend a ton of time on it again but yeah

832
00:32:38,799 --> 00:32:40,159
confidentiality is generally cheap

833
00:32:40,159 --> 00:32:42,320
because they are communicating over tls

834
00:32:42,320 --> 00:32:44,320
and mutual authentication through that

835
00:32:44,320 --> 00:32:46,880
um through this current pre-negotiated

836
00:32:46,880 --> 00:32:48,559
barrier token scheme and the server's

837
00:32:48,559 --> 00:32:50,000
tls certificate

838
00:32:50,000 --> 00:32:52,000
uh and finally we have the interaction

839
00:32:52,000 --> 00:32:53,519
between the collector and either

840
00:32:53,519 --> 00:32:55,440
aggregator uh to deliver aggregate

841
00:32:55,440 --> 00:32:56,799
shares at the at the end of the whole

842
00:32:56,799 --> 00:32:58,880
protocol during the during the collect

843
00:32:58,880 --> 00:33:00,080
sub protocol

844
00:33:00,080 --> 00:33:02,880
so these aren't exactly the same um

845
00:33:02,880 --> 00:33:04,000
because

846
00:33:04,000 --> 00:33:05,840
while the while the collector makes

847
00:33:05,840 --> 00:33:08,720
direct http requests to the leader um it

848
00:33:08,720 --> 00:33:10,080
never actually talks directly to the

849
00:33:10,080 --> 00:33:11,919
helper the communication between

850
00:33:11,919 --> 00:33:13,919
collector and helper is uh tunneled

851
00:33:13,919 --> 00:33:15,519
through the leader which coordinates the

852
00:33:15,519 --> 00:33:18,240
collect and aggregate protocols

853
00:33:18,240 --> 00:33:20,080
so we achieve confidentiality in both

854
00:33:20,080 --> 00:33:21,519
cases um

855
00:33:21,519 --> 00:33:23,120
here here i mean the transmission of

856
00:33:23,120 --> 00:33:24,799
aggregate shares from either aggregator

857
00:33:24,799 --> 00:33:26,799
to the collector uh by having the

858
00:33:26,799 --> 00:33:28,880
aggregate shares hbk encrypted to a

859
00:33:28,880 --> 00:33:31,279
public key advertised by the collector

860
00:33:31,279 --> 00:33:33,519
but we don't currently have a good story

861
00:33:33,519 --> 00:33:34,640
for how the collector is meant to

862
00:33:34,640 --> 00:33:36,320
authenticate to the leader uh what's in

863
00:33:36,320 --> 00:33:39,200
the text right now is the same uh bearer

864
00:33:39,200 --> 00:33:42,000
token scheme as between the aggregators

865
00:33:42,000 --> 00:33:44,399
and we currently have nothing to specify

866
00:33:44,399 --> 00:33:46,799
uh whether or how uh the collector and

867
00:33:46,799 --> 00:33:48,640
helper should authenticate to each other

868
00:33:48,640 --> 00:33:50,480
which is necessary in the one direction

869
00:33:50,480 --> 00:33:52,080
because we don't want the leader to be

870
00:33:52,080 --> 00:33:53,760
able to present forged collect request

871
00:33:53,760 --> 00:33:55,600
parameters to the helper and in the

872
00:33:55,600 --> 00:33:56,880
other direction because we'd like the

873
00:33:56,880 --> 00:33:58,559
collector to have confidence that it's

874
00:33:58,559 --> 00:34:00,080
receiving an aggregate chair from the

875
00:34:00,080 --> 00:34:03,440
authentic helper aggregator

876
00:34:03,440 --> 00:34:05,679
okay so clearly we have a bunch of cases

877
00:34:05,679 --> 00:34:06,960
where what we do say about

878
00:34:06,960 --> 00:34:08,639
authentication needs to change and

879
00:34:08,639 --> 00:34:10,079
others where we say nothing at all and

880
00:34:10,079 --> 00:34:11,599
maybe we should

881
00:34:11,599 --> 00:34:12,879
um

882
00:34:12,879 --> 00:34:14,399
oh excuse me before i move on i forgot

883
00:34:14,399 --> 00:34:15,760
one interesting piece of red text in the

884
00:34:15,760 --> 00:34:17,520
slide which is in the collector helper

885
00:34:17,520 --> 00:34:19,199
case as it turns out both of those

886
00:34:19,199 --> 00:34:20,960
actors already advertise in http

887
00:34:20,960 --> 00:34:22,879
configuration and public key so maybe

888
00:34:22,879 --> 00:34:24,480
that uh the problem of mutual

889
00:34:24,480 --> 00:34:25,918
authentication there could be solved by

890
00:34:25,918 --> 00:34:28,399
using hpke's uh mutual authentication

891
00:34:28,399 --> 00:34:29,520
mode

892
00:34:29,520 --> 00:34:31,119
okay where was i

893
00:34:31,119 --> 00:34:33,280
right so clearly um we have some

894
00:34:33,280 --> 00:34:35,359
inconsistent guidance and some missing

895
00:34:35,359 --> 00:34:36,719
recommendations about authentication in

896
00:34:36,719 --> 00:34:38,879
this protocol uh

897
00:34:38,879 --> 00:34:39,918
so

898
00:34:39,918 --> 00:34:41,839
the question here broadly is what should

899
00:34:41,839 --> 00:34:44,000
dap say about request or response

900
00:34:44,000 --> 00:34:45,679
authentication

901
00:34:45,679 --> 00:34:48,239
so to advance the strawman claim and

902
00:34:48,239 --> 00:34:49,839
stimulate some discussion i'm going to

903
00:34:49,839 --> 00:34:51,280
claim that as much as possible we should

904
00:34:51,280 --> 00:34:52,960
say nothing

905
00:34:52,960 --> 00:34:54,639
and stick to enumerating requirements

906
00:34:54,639 --> 00:34:56,480
for the security of the channels rather

907
00:34:56,480 --> 00:34:59,200
than solutions

908
00:34:59,520 --> 00:35:02,079
dap is built on top of http and one of

909
00:35:02,079 --> 00:35:03,839
the virtues of that is that we get to

910
00:35:03,839 --> 00:35:05,359
rely on existing mechanisms and

911
00:35:05,359 --> 00:35:06,880
implementations for all sorts of things

912
00:35:06,880 --> 00:35:08,079
like caching

913
00:35:08,079 --> 00:35:10,560
uh error handling or authentication so

914
00:35:10,560 --> 00:35:11,839
in my view we should be aiming for

915
00:35:11,839 --> 00:35:13,359
composability with existing

916
00:35:13,359 --> 00:35:15,440
authentication schemes widely deployed

917
00:35:15,440 --> 00:35:17,599
with http apis

918
00:35:17,599 --> 00:35:19,119
with an eye towards sort of integrating

919
00:35:19,119 --> 00:35:21,119
nicely with

920
00:35:21,119 --> 00:35:22,480
with the schemes already deployed by

921
00:35:22,480 --> 00:35:24,320
vendors who might want to operate uh dap

922
00:35:24,320 --> 00:35:26,320
servers so stuff like aws request

923
00:35:26,320 --> 00:35:29,200
signatures oauth2 or even tls client

924
00:35:29,200 --> 00:35:30,960
certs which a lot of people do use for

925
00:35:30,960 --> 00:35:32,560
authentication

926
00:35:32,560 --> 00:35:34,480
um now of course the exception there is

927
00:35:34,480 --> 00:35:35,839
the cases that i discussed where we

928
00:35:35,839 --> 00:35:37,520
mandate the use excuse me where dap

929
00:35:37,520 --> 00:35:39,440
mandates the use of hpke

930
00:35:39,440 --> 00:35:41,119
the distinction to keep in mind there is

931
00:35:41,119 --> 00:35:42,000
that

932
00:35:42,000 --> 00:35:43,760
we mandate that in those cases where

933
00:35:43,760 --> 00:35:45,280
we're channeling a secure channel

934
00:35:45,280 --> 00:35:47,599
through some protocol participant and so

935
00:35:47,599 --> 00:35:49,520
in those cases we can't rely on an under

936
00:35:49,520 --> 00:35:50,880
excuse me on a security property of an

937
00:35:50,880 --> 00:35:53,760
underlying transport

938
00:35:54,400 --> 00:35:56,079
all right so that brings me to some of

939
00:35:56,079 --> 00:35:57,359
the goals that the editors have for the

940
00:35:57,359 --> 00:35:58,960
next draft of dap

941
00:35:58,960 --> 00:36:00,240
some but not all we're going to discuss

942
00:36:00,240 --> 00:36:02,320
other goals in them in a couple of later

943
00:36:02,320 --> 00:36:03,520
presentations

944
00:36:03,520 --> 00:36:05,119
so continuing from the topic of like

945
00:36:05,119 --> 00:36:07,359
good use of http um

946
00:36:07,359 --> 00:36:09,359
we're thinking about uh rewriting the

947
00:36:09,359 --> 00:36:12,160
http the api mandated by dap to be a

948
00:36:12,160 --> 00:36:13,839
little more resource oriented if not

949
00:36:13,839 --> 00:36:16,240
full-on restful so for instance instead

950
00:36:16,240 --> 00:36:18,320
of the upload endpoint uh being just

951
00:36:18,320 --> 00:36:19,359
upload with all the meaningful

952
00:36:19,359 --> 00:36:20,880
parameters being encoded into the body

953
00:36:20,880 --> 00:36:22,160
of the request

954
00:36:22,160 --> 00:36:25,440
you might have a path where you have

955
00:36:25,440 --> 00:36:26,960
like tasks and then encode a task

956
00:36:26,960 --> 00:36:28,560
identifier and then encode a report

957
00:36:28,560 --> 00:36:30,560
identifier you know into into the uri

958
00:36:30,560 --> 00:36:33,040
that you're uploading to

959
00:36:33,040 --> 00:36:35,119
um we're also interested in looking at

960
00:36:35,119 --> 00:36:36,400
the relevant best current practices

961
00:36:36,400 --> 00:36:37,680
documents and aligning with their

962
00:36:37,680 --> 00:36:40,079
guidance where it makes sense uh for

963
00:36:40,079 --> 00:36:41,040
instance

964
00:36:41,040 --> 00:36:42,640
uh to get to make use of better http

965
00:36:42,640 --> 00:36:44,720
semantics and maybe doing something like

966
00:36:44,720 --> 00:36:47,040
extending the http config and point into

967
00:36:47,040 --> 00:36:49,920
something like acme's api directory

968
00:36:49,920 --> 00:36:51,680
uh and as we were just discussing or

969
00:36:51,680 --> 00:36:53,040
interested in revisiting what the

970
00:36:53,040 --> 00:36:54,400
requirements are for authentication and

971
00:36:54,400 --> 00:36:56,720
what if any prescriptions we make

972
00:36:56,720 --> 00:36:58,640
um okay so that's it for me we're

973
00:36:58,640 --> 00:36:59,839
looking forward to discussing all these

974
00:36:59,839 --> 00:37:01,760
topics in the working group here today

975
00:37:01,760 --> 00:37:02,720
and

976
00:37:02,720 --> 00:37:04,240
uh you know in the coming weeks and

977
00:37:04,240 --> 00:37:08,598
months on the mailing list and so on

978
00:37:10,560 --> 00:37:12,560
tim can you go back um or something back

979
00:37:12,560 --> 00:37:14,320
to a few slides to this authentication

980
00:37:14,320 --> 00:37:15,359
point

981
00:37:15,359 --> 00:37:18,720
thank you nope but next

982
00:37:19,599 --> 00:37:20,640
so

983
00:37:20,640 --> 00:37:22,079
knowing what i know now which is not

984
00:37:22,079 --> 00:37:23,920
much um um

985
00:37:23,920 --> 00:37:25,359
well i know i know how this document

986
00:37:25,359 --> 00:37:27,680
works but i mean more generally um

987
00:37:27,680 --> 00:37:29,680
the um this seems like a good approach

988
00:37:29,680 --> 00:37:31,520
um but i think perhaps we should do is

989
00:37:31,520 --> 00:37:34,000
reach out to the hdp api working group

990
00:37:34,000 --> 00:37:35,280
because they are specifying best

991
00:37:35,280 --> 00:37:36,880
practices for this and i think they can

992
00:37:36,880 --> 00:37:38,880
like this is just like straight up http

993
00:37:38,880 --> 00:37:41,200
web app right our http web service and

994
00:37:41,200 --> 00:37:43,280
so i think we should take their guidance

995
00:37:43,280 --> 00:37:44,560
on how we do this which i think would

996
00:37:44,560 --> 00:37:45,920
quite likely be this but i think we

997
00:37:45,920 --> 00:37:47,359
should get their guidance on that rather

998
00:37:47,359 --> 00:37:48,800
than reinventing the wheel so i don't

999
00:37:48,800 --> 00:37:51,359
know who will be responsible for that is

1000
00:37:51,359 --> 00:37:52,720
um you know i suppose we could do it

1001
00:37:52,720 --> 00:37:54,880
privately and i said not but um uh that

1002
00:37:54,880 --> 00:37:56,640
would be my recommendation for this

1003
00:37:56,640 --> 00:37:58,480
um as i said i think these are like i

1004
00:37:58,480 --> 00:37:59,760
think you're i think that your your

1005
00:37:59,760 --> 00:38:01,359
intuition here that like

1006
00:38:01,359 --> 00:38:02,320
people are going to have their own

1007
00:38:02,320 --> 00:38:03,440
mechanisms and we don't want to

1008
00:38:03,440 --> 00:38:04,880
interfere with those like i think it's

1009
00:38:04,880 --> 00:38:07,040
entirely entirely correct um i think

1010
00:38:07,040 --> 00:38:08,320
that's also true for the for the next

1011
00:38:08,320 --> 00:38:10,400
thing you said about like the acme you

1012
00:38:10,400 --> 00:38:12,240
know um the you know

1013
00:38:12,240 --> 00:38:13,680
um the directory and stuff like that

1014
00:38:13,680 --> 00:38:14,960
those are also questions which like that

1015
00:38:14,960 --> 00:38:17,760
one might help us with um so starting

1016
00:38:17,760 --> 00:38:18,960
our recommendation

1017
00:38:18,960 --> 00:38:21,040
yeah yeah i agree eric thank you i think

1018
00:38:21,040 --> 00:38:22,640
we should also talk to some of the uh

1019
00:38:22,640 --> 00:38:25,040
prominent operators of acme i i know a

1020
00:38:25,040 --> 00:38:27,119
couple of them um to see what their

1021
00:38:27,119 --> 00:38:29,040
experience has been with like this you

1022
00:38:29,040 --> 00:38:30,560
know acme specifically mandates the use

1023
00:38:30,560 --> 00:38:34,480
of jwts and the directory um

1024
00:38:34,480 --> 00:38:35,839
and like i know the people who run let's

1025
00:38:35,839 --> 00:38:37,119
encrypt have opinions about those things

1026
00:38:37,119 --> 00:38:39,040
i'd love to hear from other acme

1027
00:38:39,040 --> 00:38:40,720
operators how they've what their

1028
00:38:40,720 --> 00:38:44,439
experience of that has been

1029
00:38:50,640 --> 00:38:53,200
chris patton

1030
00:38:53,680 --> 00:38:55,760
yeah i i just wanted to

1031
00:38:55,760 --> 00:38:57,599
mention i'm a little

1032
00:38:57,599 --> 00:39:00,400
a little apprehensive about leaning on

1033
00:39:00,400 --> 00:39:02,560
hpke for mutual

1034
00:39:02,560 --> 00:39:04,000
authentication

1035
00:39:04,000 --> 00:39:06,079
um i kind of see the motivation though

1036
00:39:06,079 --> 00:39:08,000
because we have basically this collect

1037
00:39:08,000 --> 00:39:09,680
request from the

1038
00:39:09,680 --> 00:39:11,920
lecturer goes to the it goes through the

1039
00:39:11,920 --> 00:39:14,720
helper via the leader and if the leader

1040
00:39:14,720 --> 00:39:17,440
is is attacking privacy then this is

1041
00:39:17,440 --> 00:39:18,800
this is a problem

1042
00:39:18,800 --> 00:39:20,240
um

1043
00:39:20,240 --> 00:39:21,520
you should also stipulate though that

1044
00:39:21,520 --> 00:39:23,440
the collector is also part of the threat

1045
00:39:23,440 --> 00:39:26,720
model so privacy should hold as long as

1046
00:39:26,720 --> 00:39:29,520
one aggregator's honest um

1047
00:39:29,520 --> 00:39:32,400
that said uh i think i think off the

1048
00:39:32,400 --> 00:39:34,640
authentication would be useful ecker

1049
00:39:34,640 --> 00:39:36,800
once suggested that like we you know

1050
00:39:36,800 --> 00:39:38,880
change the protocol shape so that the

1051
00:39:38,880 --> 00:39:40,560
collector communicates directly with the

1052
00:39:40,560 --> 00:39:42,640
helper that might help

1053
00:39:42,640 --> 00:39:44,400
so i just wanted to suggest that as a

1054
00:39:44,400 --> 00:39:47,280
possible alternative

1055
00:39:47,280 --> 00:39:48,960
yes yes i think that's a good point

1056
00:39:48,960 --> 00:39:51,440
chris um and yeah and on the topic of

1057
00:39:51,440 --> 00:39:53,440
direct communication either aggregator

1058
00:39:53,440 --> 00:39:54,640
that's also something we've been batting

1059
00:39:54,640 --> 00:39:56,240
around in this on the upload side of the

1060
00:39:56,240 --> 00:39:58,800
protocol right like at the moment um the

1061
00:39:58,800 --> 00:40:00,560
way uploads work is that the client

1062
00:40:00,560 --> 00:40:03,040
sends one message sorry chris we can

1063
00:40:03,040 --> 00:40:04,319
hear you we can hear your typing you

1064
00:40:04,319 --> 00:40:06,960
wouldn't um doing my muting thank you um

1065
00:40:06,960 --> 00:40:08,640
at the moment clients will create one

1066
00:40:08,640 --> 00:40:10,480
message that contains both input shares

1067
00:40:10,480 --> 00:40:12,160
transmit that to the leader and the

1068
00:40:12,160 --> 00:40:13,839
leader is responsible for relaying the

1069
00:40:13,839 --> 00:40:16,480
helper's chair to the helper uh so this

1070
00:40:16,480 --> 00:40:18,800
has some problems like the the the main

1071
00:40:18,800 --> 00:40:19,760
problem with that which i think we

1072
00:40:19,760 --> 00:40:21,440
discussed the last ietf

1073
00:40:21,440 --> 00:40:22,960
is that it means a leader may incur like

1074
00:40:22,960 --> 00:40:26,480
significant uh costs for network egress

1075
00:40:26,480 --> 00:40:28,480
uh but yeah but it also forces us to

1076
00:40:28,480 --> 00:40:30,079
deal with like this tunnel channel

1077
00:40:30,079 --> 00:40:32,160
through the leader so

1078
00:40:32,160 --> 00:40:33,359
yeah i think there's a few things that

1079
00:40:33,359 --> 00:40:35,119
are still like

1080
00:40:35,119 --> 00:40:36,319
that have the potential to change right

1081
00:40:36,319 --> 00:40:37,520
about whether we introduce direct

1082
00:40:37,520 --> 00:40:38,720
communication between protocol

1083
00:40:38,720 --> 00:40:39,920
participants

1084
00:40:39,920 --> 00:40:41,520
which might significantly change how we

1085
00:40:41,520 --> 00:40:45,560
approach these authentication questions

1086
00:41:00,640 --> 00:41:03,280
rich saul's in this case http api

1087
00:41:03,280 --> 00:41:05,839
co-chair um it'd be great to come and

1088
00:41:05,839 --> 00:41:07,920
ask for advice we have done no work in

1089
00:41:07,920 --> 00:41:10,640
this area so it'll be like asking

1090
00:41:10,640 --> 00:41:13,200
economic economics people

1091
00:41:13,200 --> 00:41:15,040
you know you'll get 10 people giving you

1092
00:41:15,040 --> 00:41:18,359
11 opinions

1093
00:41:23,760 --> 00:41:24,960
um

1094
00:41:24,960 --> 00:41:26,000
i i

1095
00:41:26,000 --> 00:41:26,800
uh

1096
00:41:26,800 --> 00:41:28,880
want to reinforce the concerns tim that

1097
00:41:28,880 --> 00:41:31,119
you're raising about the dependence of

1098
00:41:31,119 --> 00:41:32,839
this on uh

1099
00:41:32,839 --> 00:41:35,520
uh proper behavior of

1100
00:41:35,520 --> 00:41:37,040
some of the centralized players in

1101
00:41:37,040 --> 00:41:38,480
particular the leader

1102
00:41:38,480 --> 00:41:40,640
has worried me um

1103
00:41:40,640 --> 00:41:42,560
with this design you know the goal here

1104
00:41:42,560 --> 00:41:44,560
is to make it so that as i think chris

1105
00:41:44,560 --> 00:41:45,680
said

1106
00:41:45,680 --> 00:41:47,040
it should be the privacy should be

1107
00:41:47,040 --> 00:41:48,319
preserved as long as there's one

1108
00:41:48,319 --> 00:41:50,160
aggregator who's playing fair

1109
00:41:50,160 --> 00:41:51,599
and i worry that the leader has a

1110
00:41:51,599 --> 00:41:53,920
tremendous amount of control here

1111
00:41:53,920 --> 00:41:57,839
um and could potentially uh de-anonymize

1112
00:41:57,839 --> 00:42:00,640
uh or remove the privacy protections

1113
00:42:00,640 --> 00:42:03,200
based on it being capable of

1114
00:42:03,200 --> 00:42:04,960
uh just controlling which messages get

1115
00:42:04,960 --> 00:42:07,040
rounded where both from the collector to

1116
00:42:07,040 --> 00:42:08,400
the other helpers

1117
00:42:08,400 --> 00:42:10,640
um and from the

1118
00:42:10,640 --> 00:42:11,760
reporter

1119
00:42:11,760 --> 00:42:13,599
uh to the collectors so

1120
00:42:13,599 --> 00:42:16,000
i i i would appreciate more thought

1121
00:42:16,000 --> 00:42:18,319
about distributing the routing itself

1122
00:42:18,319 --> 00:42:21,040
message driver

1123
00:42:21,040 --> 00:42:22,800
yeah i agree this is why i highlighted

1124
00:42:22,800 --> 00:42:24,319
the problem of a collector the collect

1125
00:42:24,319 --> 00:42:26,000
request being authenticated all the way

1126
00:42:26,000 --> 00:42:28,640
through to the helper um otherwise we do

1127
00:42:28,640 --> 00:42:29,760
have a threat model in the back of the

1128
00:42:29,760 --> 00:42:31,440
document that tries to enumerate like

1129
00:42:31,440 --> 00:42:32,800
what exactly the leader can do but the

1130
00:42:32,800 --> 00:42:34,480
helper can't i think it's out of date

1131
00:42:34,480 --> 00:42:35,839
though and it certainly i think it needs

1132
00:42:35,839 --> 00:42:38,400
some attention

1133
00:42:39,920 --> 00:42:40,640
so

1134
00:42:40,640 --> 00:42:43,280
on overscroll um if we do have that

1135
00:42:43,280 --> 00:42:44,640
problem however

1136
00:42:44,640 --> 00:42:45,440
um

1137
00:42:45,440 --> 00:42:47,760
if the protocol is lines away the leader

1138
00:42:47,760 --> 00:42:49,839
can't leader can independently

1139
00:42:49,839 --> 00:42:52,319
break the privacy protocol

1140
00:42:52,319 --> 00:42:53,599
then

1141
00:42:53,599 --> 00:42:55,839
then there's a protocol design failure

1142
00:42:55,839 --> 00:42:57,520
because the

1143
00:42:57,520 --> 00:42:58,480
um

1144
00:42:58,480 --> 00:43:00,480
because the collector if you take the

1145
00:43:00,480 --> 00:43:01,599
collector and leader and you split them

1146
00:43:01,599 --> 00:43:02,880
apart the collector talks directly to

1147
00:43:02,880 --> 00:43:04,079
the helper

1148
00:43:04,079 --> 00:43:05,440
and then the collector closes the leader

1149
00:43:05,440 --> 00:43:07,680
you're back in the soup so the protocol

1150
00:43:07,680 --> 00:43:08,960
must resist that

1151
00:43:08,960 --> 00:43:10,800
must resist it must have but really

1152
00:43:10,800 --> 00:43:12,079
designer design was that neither case so

1153
00:43:12,079 --> 00:43:13,680
i actually don't believe it's like so

1154
00:43:13,680 --> 00:43:14,640
like so

1155
00:43:14,640 --> 00:43:18,078
while i'm open to having the

1156
00:43:18,160 --> 00:43:19,599
open to having the collector talk

1157
00:43:19,599 --> 00:43:21,680
directly to the helpers um i do not

1158
00:43:21,680 --> 00:43:22,960
believe they address the problem the gtg

1159
00:43:22,960 --> 00:43:24,240
is addressing

1160
00:43:24,240 --> 00:43:25,119
um

1161
00:43:25,119 --> 00:43:27,520
so um

1162
00:43:27,520 --> 00:43:29,520
one thing that uh

1163
00:43:29,520 --> 00:43:30,720
sorry i'm finding something there's a

1164
00:43:30,720 --> 00:43:32,560
bunch of backup machine guys we have the

1165
00:43:32,560 --> 00:43:35,520
secretariat on it great okay

1166
00:43:35,520 --> 00:43:36,800
um

1167
00:43:36,800 --> 00:43:38,240
so um

1168
00:43:38,240 --> 00:43:41,839
with that said uh i i think

1169
00:43:41,839 --> 00:43:44,000
i'm not not averse to having the um

1170
00:43:44,000 --> 00:43:46,640
collectors directly to like the uh um

1171
00:43:46,640 --> 00:43:48,480
the helpers um

1172
00:43:48,480 --> 00:43:49,520
the uh

1173
00:43:49,520 --> 00:43:51,280
uh you know in our implementation um you

1174
00:43:51,280 --> 00:43:53,359
know we looked we literally like to send

1175
00:43:53,359 --> 00:43:54,480
to um

1176
00:43:54,480 --> 00:43:55,280
both

1177
00:43:55,280 --> 00:43:57,599
helpers independently um and that made

1178
00:43:57,599 --> 00:43:59,359
us pretty sad so i think if we do decide

1179
00:43:59,359 --> 00:44:00,480
to do that we have to have a mechanism

1180
00:44:00,480 --> 00:44:02,400
that also allows you to have a an ingest

1181
00:44:02,400 --> 00:44:04,640
server um because like otherwise there

1182
00:44:04,640 --> 00:44:05,760
are all kinds of problems where like we

1183
00:44:05,760 --> 00:44:07,280
send like only one chair not the other

1184
00:44:07,280 --> 00:44:09,200
and you could deal with that so um i

1185
00:44:09,200 --> 00:44:10,319
think there's less of an issue for the

1186
00:44:10,319 --> 00:44:12,160
helper though it is like a lot of burden

1187
00:44:12,160 --> 00:44:13,760
on the helper to like you know make it

1188
00:44:13,760 --> 00:44:16,000
happen sorry i'm the collector how to

1189
00:44:16,000 --> 00:44:17,119
make the logic of like what if this

1190
00:44:17,119 --> 00:44:18,880
guy's name this guy doesn't answer

1191
00:44:18,880 --> 00:44:20,000
but it's obviously much more important

1192
00:44:20,000 --> 00:44:23,480
on a plan

1193
00:44:23,610 --> 00:44:26,809
[Music]

1194
00:44:28,560 --> 00:44:29,520
so

1195
00:44:29,520 --> 00:44:33,119
i also want to echo some of uh dkg's

1196
00:44:33,119 --> 00:44:35,920
concerns um but separately i noticed in

1197
00:44:35,920 --> 00:44:39,599
the draft that you specifically say that

1198
00:44:39,599 --> 00:44:41,760
uh only one collector is or sorry only

1199
00:44:41,760 --> 00:44:43,440
one helper is supported is that still

1200
00:44:43,440 --> 00:44:44,480
the case

1201
00:44:44,480 --> 00:44:47,599
um because it i did not pick up on any

1202
00:44:47,599 --> 00:44:50,079
real blockers for that but i'm curious

1203
00:44:50,079 --> 00:44:52,800
what's providing that thanks

1204
00:44:52,800 --> 00:44:54,319
all right so

1205
00:44:54,319 --> 00:44:56,079
my understanding is that there is

1206
00:44:56,079 --> 00:44:58,240
nothing in like the underlying uh crypto

1207
00:44:58,240 --> 00:45:00,640
constructions which is to say the vdas

1208
00:45:00,640 --> 00:45:02,960
precludes additional helpers although

1209
00:45:02,960 --> 00:45:04,240
chris patton is about to because i think

1210
00:45:04,240 --> 00:45:06,079
that's not very popular but in prior you

1211
00:45:06,079 --> 00:45:09,440
can have arbitrarily many helpers um dap

1212
00:45:09,440 --> 00:45:10,880
kind of makes the soft assumption but

1213
00:45:10,880 --> 00:45:13,760
there's uh exactly one helper though um

1214
00:45:13,760 --> 00:45:15,359
we're a little inconsistent i think

1215
00:45:15,359 --> 00:45:16,880
throughout the draft about whether

1216
00:45:16,880 --> 00:45:19,440
there's exactly would help or not but

1217
00:45:19,440 --> 00:45:20,560
yeah so

1218
00:45:20,560 --> 00:45:22,880
in my view there's a trade-off between

1219
00:45:22,880 --> 00:45:24,640
if you add more helpers you get in some

1220
00:45:24,640 --> 00:45:26,640
sense more privacy because

1221
00:45:26,640 --> 00:45:29,200
more actors have to collude to defeat

1222
00:45:29,200 --> 00:45:31,440
uh the privacy of the protocol but

1223
00:45:31,440 --> 00:45:33,040
that's a trade-off against like the

1224
00:45:33,040 --> 00:45:34,640
complexity resulting complexity of the

1225
00:45:34,640 --> 00:45:36,319
protocol because you have so many more

1226
00:45:36,319 --> 00:45:39,680
actors um to coordinate

1227
00:45:39,680 --> 00:45:41,599
uh so i think we're

1228
00:45:41,599 --> 00:45:43,359
where we're at at the moment

1229
00:45:43,359 --> 00:45:44,560
i suppose when i say we just mean the

1230
00:45:44,560 --> 00:45:46,880
editors of the document um

1231
00:45:46,880 --> 00:45:48,550
is that exactly what helper

1232
00:45:48,550 --> 00:45:50,160
[Music]

1233
00:45:50,160 --> 00:45:52,160
is yeah i think that's where we're at

1234
00:45:52,160 --> 00:45:55,160
common

1235
00:46:04,560 --> 00:46:06,960
if anyone's ever played that video game

1236
00:46:06,960 --> 00:46:08,640
um okay

1237
00:46:08,640 --> 00:46:09,839
uh

1238
00:46:09,839 --> 00:46:11,599
so yeah um

1239
00:46:11,599 --> 00:46:14,720
just to echo tim's point um right now we

1240
00:46:14,720 --> 00:46:16,240
don't support more than one helper

1241
00:46:16,240 --> 00:46:17,440
however

1242
00:46:17,440 --> 00:46:20,720
we uh we intended to design the protocol

1243
00:46:20,720 --> 00:46:23,119
in a way that we can we could go in that

1244
00:46:23,119 --> 00:46:24,960
direction if that's what people wanted

1245
00:46:24,960 --> 00:46:27,119
to do um

1246
00:46:27,119 --> 00:46:28,560
one liter one helper is kind of the

1247
00:46:28,560 --> 00:46:30,400
simplest thing it adds protocol

1248
00:46:30,400 --> 00:46:32,960
complexity uh to add additional helpers

1249
00:46:32,960 --> 00:46:35,440
but i don't think that complexity uh is

1250
00:46:35,440 --> 00:46:38,240
impossible to address um so if folks

1251
00:46:38,240 --> 00:46:41,520
want to um add support for more for more

1252
00:46:41,520 --> 00:46:44,640
uh aggregators i think we can do it um

1253
00:46:44,640 --> 00:46:48,720
i wanted to go back to dkg's point um

1254
00:46:48,720 --> 00:46:51,440
collector to helper authentication

1255
00:46:51,440 --> 00:46:53,760
doesn't have anything to do with the

1256
00:46:53,760 --> 00:46:55,599
power the extra power that the leader

1257
00:46:55,599 --> 00:46:57,920
has the extra power that the leader has

1258
00:46:57,920 --> 00:47:00,000
has to do with civil attacks because the

1259
00:47:00,000 --> 00:47:01,599
leader gets to pick the set of reports

1260
00:47:01,599 --> 00:47:03,040
that are aggregated

1261
00:47:03,040 --> 00:47:04,160
um

1262
00:47:04,160 --> 00:47:05,920
we don't have a generic we don't have a

1263
00:47:05,920 --> 00:47:07,839
generic defense for civil attacks uh

1264
00:47:07,839 --> 00:47:10,400
that would probably be pretty hard

1265
00:47:10,400 --> 00:47:12,480
but something definitely we should we

1266
00:47:12,480 --> 00:47:14,720
should uh find solutions for

1267
00:47:14,720 --> 00:47:15,520
um

1268
00:47:15,520 --> 00:47:17,200
i wanted to point out that the helper

1269
00:47:17,200 --> 00:47:20,640
also has can do sybil attacks by

1270
00:47:20,640 --> 00:47:23,359
anyone who can upload reports to the

1271
00:47:23,359 --> 00:47:26,319
leader can can mount a civil attack they

1272
00:47:26,319 --> 00:47:28,240
have to collude with the collector um

1273
00:47:28,240 --> 00:47:31,359
because the uh as tim pointed out the

1274
00:47:31,359 --> 00:47:33,599
aggregate shares are encrypted under the

1275
00:47:33,599 --> 00:47:35,599
uh collector's public key so as long as

1276
00:47:35,599 --> 00:47:37,119
one server's honest they don't they

1277
00:47:37,119 --> 00:47:38,480
don't actually the attacker doesn't see

1278
00:47:38,480 --> 00:47:40,960
the result um but we want you know we

1279
00:47:40,960 --> 00:47:42,240
want to be able to deal with the case

1280
00:47:42,240 --> 00:47:45,680
where the collector is malicious um

1281
00:47:45,680 --> 00:47:47,040
so

1282
00:47:47,040 --> 00:47:48,960
because reports are unauthenticated

1283
00:47:48,960 --> 00:47:50,079
there's uh

1284
00:47:50,079 --> 00:47:51,680
anyone can do a civil attack and i think

1285
00:47:51,680 --> 00:47:54,000
the leader's relative strength is kind

1286
00:47:54,000 --> 00:47:56,559
of minor uh and i would i i would like

1287
00:47:56,559 --> 00:47:59,119
to see defenses be more generic uh and

1288
00:47:59,119 --> 00:48:00,640
not just apply to that particular

1289
00:48:00,640 --> 00:48:03,640
situation

1290
00:48:06,800 --> 00:48:09,040
nick

1291
00:48:10,480 --> 00:48:13,280
nick you're on here

1292
00:48:14,000 --> 00:48:16,559
um i i wanted to go back to the request

1293
00:48:16,559 --> 00:48:18,160
authentication unless unless other

1294
00:48:18,160 --> 00:48:22,160
people have an immediate reply to that

1295
00:48:23,280 --> 00:48:25,280
okay um

1296
00:48:25,280 --> 00:48:27,200
i i would be concerned about not

1297
00:48:27,200 --> 00:48:29,200
specifying or only specifying

1298
00:48:29,200 --> 00:48:32,079
requirements not specifying um

1299
00:48:32,079 --> 00:48:34,720
an effective way to do uh request

1300
00:48:34,720 --> 00:48:36,079
authentication

1301
00:48:36,079 --> 00:48:37,440
um

1302
00:48:37,440 --> 00:48:38,240
uh

1303
00:48:38,240 --> 00:48:39,760
apologies i didn't introduce myself at

1304
00:48:39,760 --> 00:48:41,119
nick dodie center for democracy and

1305
00:48:41,119 --> 00:48:42,559
technology um

1306
00:48:42,559 --> 00:48:44,480
my concern would be that uh that there

1307
00:48:44,480 --> 00:48:47,359
would be like an extraordinary

1308
00:48:47,359 --> 00:48:49,599
or like silent spec for actually

1309
00:48:49,599 --> 00:48:51,440
enabling interoperability between

1310
00:48:51,440 --> 00:48:52,720
clients and

1311
00:48:52,720 --> 00:48:54,720
uh servers and we would like to make

1312
00:48:54,720 --> 00:48:56,640
that easier and so it would be good if

1313
00:48:56,640 --> 00:48:59,760
we had a sort of recommended way do that

1314
00:48:59,760 --> 00:49:01,839
um even if yes there are going to be

1315
00:49:01,839 --> 00:49:03,280
cases where someone would deploy this

1316
00:49:03,280 --> 00:49:04,640
with their own

1317
00:49:04,640 --> 00:49:07,599
custom authentication scheme

1318
00:49:07,599 --> 00:49:09,920
thanks

1319
00:49:11,920 --> 00:49:15,160
chris wood

1320
00:49:16,559 --> 00:49:19,599
um on on the topic of uh one helper

1321
00:49:19,599 --> 00:49:21,839
versus multiple helper i'm sorry to keep

1322
00:49:21,839 --> 00:49:22,880
bouncing back and forth between

1323
00:49:22,880 --> 00:49:24,640
different things um

1324
00:49:24,640 --> 00:49:26,640
i wouldn't be surprised if we find out

1325
00:49:26,640 --> 00:49:28,960
that popular in practice is just like

1326
00:49:28,960 --> 00:49:30,720
too expensive to run

1327
00:49:30,720 --> 00:49:32,640
given how many rounds it requires for

1328
00:49:32,640 --> 00:49:34,240
every single bit of input that you're

1329
00:49:34,240 --> 00:49:35,520
actually that you actually want to

1330
00:49:35,520 --> 00:49:36,720
aggregate

1331
00:49:36,720 --> 00:49:38,079
um

1332
00:49:38,079 --> 00:49:40,160
so uh

1333
00:49:40,160 --> 00:49:41,200
i don't know what that says about the

1334
00:49:41,200 --> 00:49:44,000
fate of the dap as a you know generic

1335
00:49:44,000 --> 00:49:47,599
thing for all vdos versus dap as a prio

1336
00:49:47,599 --> 00:49:50,640
specific or uh bus or whatever specific

1337
00:49:50,640 --> 00:49:53,359
protocol but i i could see a future

1338
00:49:53,359 --> 00:49:54,319
wherein

1339
00:49:54,319 --> 00:49:55,680
dap kind of gets

1340
00:49:55,680 --> 00:49:58,079
less general more specific to prio and

1341
00:49:58,079 --> 00:50:02,720
maybe a heavy hitters like solution gets

1342
00:50:02,720 --> 00:50:04,319
it's its own thing maybe that star maybe

1343
00:50:04,319 --> 00:50:06,559
that's something else but um if that

1344
00:50:06,559 --> 00:50:08,319
were the case then accommodating

1345
00:50:08,319 --> 00:50:10,319
multiple helpers would be um rather

1346
00:50:10,319 --> 00:50:14,480
straightforward and dap for prio um

1347
00:50:14,480 --> 00:50:16,240
but uh if it's

1348
00:50:16,240 --> 00:50:18,960
like super general and we have popular

1349
00:50:18,960 --> 00:50:20,400
with its constraint that it only works

1350
00:50:20,400 --> 00:50:22,240
with one particular helper

1351
00:50:22,240 --> 00:50:24,480
um it's it's

1352
00:50:24,480 --> 00:50:27,200
not clear like what the the result of in

1353
00:50:27,200 --> 00:50:28,720
terms of complexity would be on the

1354
00:50:28,720 --> 00:50:30,800
protocol but i just wanted to note that

1355
00:50:30,800 --> 00:50:32,400
like we're not set in stone here we

1356
00:50:32,400 --> 00:50:34,720
might see that things get less general

1357
00:50:34,720 --> 00:50:38,598
or not as we go forward

1358
00:50:41,520 --> 00:50:44,240
i think uh so on the topic of the

1359
00:50:44,240 --> 00:50:46,800
leaders uh

1360
00:50:46,800 --> 00:50:49,680
power and and control over over the

1361
00:50:49,680 --> 00:50:53,520
system can you just clarify just so i i

1362
00:50:53,520 --> 00:50:55,599
know i i'm understanding it so the

1363
00:50:55,599 --> 00:50:58,079
leader has the ability to

1364
00:50:58,079 --> 00:50:58,880
uh

1365
00:50:58,880 --> 00:51:01,440
reject shares and therefore they are

1366
00:51:01,440 --> 00:51:04,079
never processed by the helper and

1367
00:51:04,079 --> 00:51:06,720
therefore a colluding leader and

1368
00:51:06,720 --> 00:51:08,559
collector can basically

1369
00:51:08,559 --> 00:51:11,599
single out individual um

1370
00:51:11,599 --> 00:51:15,200
uh uploads is that correct

1371
00:51:15,280 --> 00:51:17,040
uh yeah but then you're

1372
00:51:17,040 --> 00:51:19,760
going to select yeah which shares get

1373
00:51:19,760 --> 00:51:21,520
paired like as we saw earlier right it's

1374
00:51:21,520 --> 00:51:24,160
good to assign a reporter to job ids

1375
00:51:24,160 --> 00:51:26,880
however uh the helper also can do this

1376
00:51:26,880 --> 00:51:28,960
on a per share basis because

1377
00:51:28,960 --> 00:51:30,640
um the responsibility helper delivers to

1378
00:51:30,640 --> 00:51:32,240
a leader's aggregation request is going

1379
00:51:32,240 --> 00:51:34,800
to include like a list of um essentially

1380
00:51:34,800 --> 00:51:36,640
a list of like per input preparation

1381
00:51:36,640 --> 00:51:38,400
messages so the helper could simply

1382
00:51:38,400 --> 00:51:40,559
choose to like fail to prepare any

1383
00:51:40,559 --> 00:51:43,440
individual input right so

1384
00:51:43,440 --> 00:51:45,359
i'm not saying that that's good my point

1385
00:51:45,359 --> 00:51:47,040
is that in this respect the leader i

1386
00:51:47,040 --> 00:51:49,280
don't think has a power that the helper

1387
00:51:49,280 --> 00:51:50,480
doesn't

1388
00:51:50,480 --> 00:51:52,880
um

1389
00:51:53,280 --> 00:51:55,200
the other half-baked thought i have in

1390
00:51:55,200 --> 00:51:57,760
response to that question is that

1391
00:51:57,760 --> 00:51:59,760
i think injection servers anonymize

1392
00:51:59,760 --> 00:52:02,160
congestion servers uh are probably a

1393
00:52:02,160 --> 00:52:03,760
helpful mitigation here right in that

1394
00:52:03,760 --> 00:52:05,520
one of the issues is that um if you have

1395
00:52:05,520 --> 00:52:07,200
a in a deployment where clients are

1396
00:52:07,200 --> 00:52:09,040
uploading directly to a leader uh the

1397
00:52:09,040 --> 00:52:10,400
leader gets to see all sorts like

1398
00:52:10,400 --> 00:52:11,839
interesting metadata about a report you

1399
00:52:11,839 --> 00:52:14,240
know client ip stuff like that um

1400
00:52:14,240 --> 00:52:16,480
on which basis he could choose to to to

1401
00:52:16,480 --> 00:52:18,800
drop reports so

1402
00:52:18,800 --> 00:52:20,319
we anticipate that a lot of deployments

1403
00:52:20,319 --> 00:52:21,200
are going to use some kind of

1404
00:52:21,200 --> 00:52:23,520
intervening ingestion server um

1405
00:52:23,520 --> 00:52:25,119
hopefully you could just like stick an

1406
00:52:25,119 --> 00:52:27,760
ohio server in front of um in front of

1407
00:52:27,760 --> 00:52:30,559
the leader such that the leader

1408
00:52:30,559 --> 00:52:31,920
uh

1409
00:52:31,920 --> 00:52:33,200
i don't want to say to be impossible but

1410
00:52:33,200 --> 00:52:35,040
certainly it ought to be harder for it

1411
00:52:35,040 --> 00:52:39,279
to be able to selectively drop reports

1412
00:52:43,920 --> 00:52:45,920
i i think that's the last word on this

1413
00:52:45,920 --> 00:52:47,760
topic and we're going to move to the

1414
00:52:47,760 --> 00:52:50,400
next presentation

1415
00:52:50,400 --> 00:52:52,960
chris patton

1416
00:52:57,760 --> 00:53:01,400
good morning everybody

1417
00:53:06,160 --> 00:53:08,720
all right um

1418
00:53:08,720 --> 00:53:11,200
so uh you planned for me to go first i

1419
00:53:11,200 --> 00:53:13,040
was going to start with kind of an

1420
00:53:13,040 --> 00:53:16,160
overview of hold on let me turn off

1421
00:53:16,160 --> 00:53:17,119
this

1422
00:53:17,119 --> 00:53:18,240
there we go

1423
00:53:18,240 --> 00:53:19,920
um we were going to start with an

1424
00:53:19,920 --> 00:53:23,119
overview of the dap protocol

1425
00:53:23,119 --> 00:53:24,800
i'm curious if people would find that

1426
00:53:24,800 --> 00:53:26,800
useful at this point

1427
00:53:26,800 --> 00:53:28,559
chairs can you can you basically just

1428
00:53:28,559 --> 00:53:30,640
tell me if i should uh do like a four

1429
00:53:30,640 --> 00:53:34,640
like four to five minute overview of dap

1430
00:53:34,640 --> 00:53:37,040
thumbs up

1431
00:53:37,040 --> 00:53:38,319
uh

1432
00:53:38,319 --> 00:53:39,870
some slavery

1433
00:53:39,870 --> 00:53:43,080
[Music]

1434
00:53:43,599 --> 00:53:45,920
four or five minutes ago yes

1435
00:53:45,920 --> 00:53:47,040
all right

1436
00:53:47,040 --> 00:53:49,520
cool um well so the

1437
00:53:49,520 --> 00:53:51,040
so what this what this talk is going to

1438
00:53:51,040 --> 00:53:54,800
be about is about how people use dap um

1439
00:53:54,800 --> 00:53:56,960
recently since adoption um a couple of

1440
00:53:56,960 --> 00:53:58,559
use cases that have come up that we

1441
00:53:58,559 --> 00:54:00,559
don't support very well so what i want

1442
00:54:00,559 --> 00:54:01,200
to

1443
00:54:01,200 --> 00:54:03,119
ask the room about is what protocol

1444
00:54:03,119 --> 00:54:06,000
changes um should be made if any to

1445
00:54:06,000 --> 00:54:08,800
accommodate these use cases um and as

1446
00:54:08,800 --> 00:54:10,079
i'm talking i think it would be helpful

1447
00:54:10,079 --> 00:54:12,319
if folks would sort of think about

1448
00:54:12,319 --> 00:54:15,119
how they intend to use dap and whether

1449
00:54:15,119 --> 00:54:16,880
the protocol really suits their their

1450
00:54:16,880 --> 00:54:18,400
needs

1451
00:54:18,400 --> 00:54:21,280
so as tim mentioned um

1452
00:54:21,280 --> 00:54:23,599
dap centers around a particular class of

1453
00:54:23,599 --> 00:54:25,440
multi-party computation schemes that we

1454
00:54:25,440 --> 00:54:28,160
call vdfs these all have basically the

1455
00:54:28,160 --> 00:54:29,040
same

1456
00:54:29,040 --> 00:54:30,000
shape

1457
00:54:30,000 --> 00:54:31,680
we have a large number of clients each

1458
00:54:31,680 --> 00:54:33,040
with the measurement

1459
00:54:33,040 --> 00:54:34,800
clients split their measurements into

1460
00:54:34,800 --> 00:54:36,640
what we call input shares and upload

1461
00:54:36,640 --> 00:54:38,960
these to a small number of aggregation

1462
00:54:38,960 --> 00:54:40,000
servers

1463
00:54:40,000 --> 00:54:42,240
the aggregation servers interact with

1464
00:54:42,240 --> 00:54:44,240
one another in order to verify and

1465
00:54:44,240 --> 00:54:46,000
aggregate the reports

1466
00:54:46,000 --> 00:54:48,480
at the end of this process each computes

1467
00:54:48,480 --> 00:54:50,960
a share of the aggregate results

1468
00:54:50,960 --> 00:54:53,040
then later on a collector comes along

1469
00:54:53,040 --> 00:54:54,480
and pulls aggregate shares from the

1470
00:54:54,480 --> 00:54:56,480
aggregators and computes the final

1471
00:54:56,480 --> 00:54:57,599
result

1472
00:54:57,599 --> 00:54:58,640
um

1473
00:54:58,640 --> 00:55:00,960
so yeah uh vdas are being worked on in

1474
00:55:00,960 --> 00:55:03,200
the cfrg uh there is a link to the

1475
00:55:03,200 --> 00:55:04,720
document there if you'd like to learn

1476
00:55:04,720 --> 00:55:06,880
more but this broadly covers things like

1477
00:55:06,880 --> 00:55:09,440
prio poplar and other schemes um that

1478
00:55:09,440 --> 00:55:11,280
we've we found in the literature and we

1479
00:55:11,280 --> 00:55:12,799
hope um

1480
00:55:12,799 --> 00:55:15,520
this becomes a target for cryptographers

1481
00:55:15,520 --> 00:55:17,839
to go design solutions for uh the

1482
00:55:17,839 --> 00:55:19,200
problems that we have in this working

1483
00:55:19,200 --> 00:55:20,640
group

1484
00:55:20,640 --> 00:55:23,599
so what dap is basically is a way for

1485
00:55:23,599 --> 00:55:27,200
executing a vdf over http and as tim

1486
00:55:27,200 --> 00:55:29,040
mentioned we have we sort of think of

1487
00:55:29,040 --> 00:55:32,160
this as three three protocols in one all

1488
00:55:32,160 --> 00:55:33,440
of which are being executed

1489
00:55:33,440 --> 00:55:35,119
simultaneously

1490
00:55:35,119 --> 00:55:37,599
so the first is uh the upload protocol

1491
00:55:37,599 --> 00:55:39,359
clients uh

1492
00:55:39,359 --> 00:55:41,440
uh take their measurement generate input

1493
00:55:41,440 --> 00:55:44,400
shares and then um upload these to one

1494
00:55:44,400 --> 00:55:47,359
of the the aggregators the leader in a

1495
00:55:47,359 --> 00:55:48,640
report

1496
00:55:48,640 --> 00:55:51,119
the input shares are encrypted under the

1497
00:55:51,119 --> 00:55:52,960
public key of each of the aggregators in

1498
00:55:52,960 --> 00:55:55,599
order in order to protect them

1499
00:55:55,599 --> 00:55:57,760
and at the same time

1500
00:55:57,760 --> 00:56:00,000
the aggregators are aggregating reports

1501
00:56:00,000 --> 00:56:02,319
um so this process begins with the

1502
00:56:02,319 --> 00:56:04,559
leader whose gets all the reports it

1503
00:56:04,559 --> 00:56:07,440
picks some set um and

1504
00:56:07,440 --> 00:56:09,520
takes the uh pulls out the encrypted

1505
00:56:09,520 --> 00:56:11,520
input shares of the helper and sends

1506
00:56:11,520 --> 00:56:14,240
these to the helper in a a

1507
00:56:14,240 --> 00:56:16,880
an http request and then after some

1508
00:56:16,880 --> 00:56:19,440
number of rounds um they have uh

1509
00:56:19,440 --> 00:56:20,480
computed

1510
00:56:20,480 --> 00:56:22,640
aggregate shares for the set of reports

1511
00:56:22,640 --> 00:56:25,200
they were able to verify

1512
00:56:25,200 --> 00:56:27,680
and finally we have the uh eventually

1513
00:56:27,680 --> 00:56:31,040
the collector comes along and grabs data

1514
00:56:31,040 --> 00:56:32,720
um it does so by sending this thing

1515
00:56:32,720 --> 00:56:35,599
called a collect request and um

1516
00:56:35,599 --> 00:56:39,040
this is where the uh uh yeah so

1517
00:56:39,040 --> 00:56:40,720
um

1518
00:56:40,720 --> 00:56:41,839
the uh

1519
00:56:41,839 --> 00:56:43,920
the in general the leader is not

1520
00:56:43,920 --> 00:56:45,920
prepared to respond to a collect request

1521
00:56:45,920 --> 00:56:48,319
right away um in general it has to

1522
00:56:48,319 --> 00:56:50,160
interact with the helper first in order

1523
00:56:50,160 --> 00:56:51,280
to

1524
00:56:51,280 --> 00:56:53,200
compute the correct aggregate shares to

1525
00:56:53,200 --> 00:56:55,359
return to the uh collector

1526
00:56:55,359 --> 00:56:57,920
so uh what it does immediately is it and

1527
00:56:57,920 --> 00:57:00,559
sends the the leader sends to the

1528
00:57:00,559 --> 00:57:03,599
collector this uri that the uh collector

1529
00:57:03,599 --> 00:57:05,280
can pull later on in order to get the

1530
00:57:05,280 --> 00:57:06,799
result

1531
00:57:06,799 --> 00:57:08,880
so that's kind of the the shape of the

1532
00:57:08,880 --> 00:57:10,640
thing that we're working on

1533
00:57:10,640 --> 00:57:12,960
um the problem i want to talk about is

1534
00:57:12,960 --> 00:57:16,160
uh this how do we choose how do we

1535
00:57:16,160 --> 00:57:20,319
choose a set of reports to aggregate um

1536
00:57:20,319 --> 00:57:21,440
and when you think about it the most

1537
00:57:21,440 --> 00:57:23,680
basic requirement for this is

1538
00:57:23,680 --> 00:57:26,559
well the batch of reports needs to be

1539
00:57:26,559 --> 00:57:28,400
sufficiently large

1540
00:57:28,400 --> 00:57:29,839
that um

1541
00:57:29,839 --> 00:57:31,520
the measurements the set of measurements

1542
00:57:31,520 --> 00:57:33,520
remain private um

1543
00:57:33,520 --> 00:57:34,720
and what this means is kind of

1544
00:57:34,720 --> 00:57:37,680
application dependent but

1545
00:57:37,680 --> 00:57:39,680
at least intuitively the larger the

1546
00:57:39,680 --> 00:57:43,359
batch the more privacy that you get

1547
00:57:43,599 --> 00:57:45,839
but think about this from a sort of a

1548
00:57:45,839 --> 00:57:47,520
usability perspective what are the

1549
00:57:47,520 --> 00:57:49,599
expectations of the collector who's

1550
00:57:49,599 --> 00:57:51,839
grabbing data

1551
00:57:51,839 --> 00:57:53,359
this basic requirement doesn't say

1552
00:57:53,359 --> 00:57:55,040
anything about like whether reports

1553
00:57:55,040 --> 00:57:56,480
should have anything to do with one

1554
00:57:56,480 --> 00:57:57,599
another

1555
00:57:57,599 --> 00:58:00,640
um so how should we how should how do we

1556
00:58:00,640 --> 00:58:02,640
like kind of automate the process of of

1557
00:58:02,640 --> 00:58:04,640
grouping reports

1558
00:58:04,640 --> 00:58:06,079
um

1559
00:58:06,079 --> 00:58:08,400
so uh here's what we do today today

1560
00:58:08,400 --> 00:58:09,280
um

1561
00:58:09,280 --> 00:58:12,480
basically uh reports are assigned to a

1562
00:58:12,480 --> 00:58:14,960
time window a discrete time window based

1563
00:58:14,960 --> 00:58:17,440
on a time stamp that's generated but

1564
00:58:17,440 --> 00:58:19,599
generated by the client and included in

1565
00:58:19,599 --> 00:58:20,960
the report

1566
00:58:20,960 --> 00:58:24,640
so um what a collect request specifies a

1567
00:58:24,640 --> 00:58:27,280
batch interval which determines a

1568
00:58:27,280 --> 00:58:29,520
sequence of time windows and what the

1569
00:58:29,520 --> 00:58:31,680
collector expects is that the reports

1570
00:58:31,680 --> 00:58:33,760
aggregated all fall into one of these

1571
00:58:33,760 --> 00:58:37,040
time windows um now we have certain

1572
00:58:37,040 --> 00:58:39,920
restrictions on the on on batch on batch

1573
00:58:39,920 --> 00:58:41,920
intervals on the one hand this is about

1574
00:58:41,920 --> 00:58:44,319
like operational stuff like

1575
00:58:44,319 --> 00:58:46,319
we want it to be possible for

1576
00:58:46,319 --> 00:58:48,480
uh both aggregators to be able to

1577
00:58:48,480 --> 00:58:51,119
efficiently pre-compute

1578
00:58:51,119 --> 00:58:53,359
aggregate shares in advance of getting a

1579
00:58:53,359 --> 00:58:55,520
collect request

1580
00:58:55,520 --> 00:58:57,200
and also there's privacy considerations

1581
00:58:57,200 --> 00:58:58,799
here

1582
00:58:58,799 --> 00:59:01,680
basically what we what we

1583
00:59:01,680 --> 00:59:02,559
what we

1584
00:59:02,559 --> 00:59:04,160
what we do what we say today is that

1585
00:59:04,160 --> 00:59:06,160
batch intervals must not overlap in

1586
00:59:06,160 --> 00:59:09,119
order to avoid leaking uh small batches

1587
00:59:09,119 --> 00:59:10,720
um and then chris wood is going to get

1588
00:59:10,720 --> 00:59:12,240
into this problem a little bit more in

1589
00:59:12,240 --> 00:59:14,079
the next talk

1590
00:59:14,079 --> 00:59:15,119
um

1591
00:59:15,119 --> 00:59:16,960
but the problem we're working on right

1592
00:59:16,960 --> 00:59:19,359
here is um

1593
00:59:19,359 --> 00:59:21,599
there are a couple of use cases that

1594
00:59:21,599 --> 00:59:23,760
this this scheme doesn't support very

1595
00:59:23,760 --> 00:59:24,960
well

1596
00:59:24,960 --> 00:59:27,440
so for starters you might want to select

1597
00:59:27,440 --> 00:59:30,640
a batch based on some client property um

1598
00:59:30,640 --> 00:59:33,280
so uh this was brought up in in issue

1599
00:59:33,280 --> 00:59:34,559
183

1600
00:59:34,559 --> 00:59:35,920
um

1601
00:59:35,920 --> 00:59:38,000
basically reports uh you might what the

1602
00:59:38,000 --> 00:59:40,160
collector might want is that the reports

1603
00:59:40,160 --> 00:59:42,400
are grouped by say user agent or

1604
00:59:42,400 --> 00:59:43,599
location

1605
00:59:43,599 --> 00:59:46,079
um so the collector would specify some

1606
00:59:46,079 --> 00:59:48,799
predicate that defines a set of reports

1607
00:59:48,799 --> 00:59:51,200
uh that go in the batch uh basically the

1608
00:59:51,200 --> 00:59:53,200
properties of reports that go in the

1609
00:59:53,200 --> 00:59:54,240
batch

1610
00:59:54,240 --> 00:59:56,160
um and you can imagine this this could

1611
00:59:56,160 --> 00:59:58,000
be quite simple like give me the

1612
00:59:58,000 --> 00:59:59,839
aggregate for all chrome users or all

1613
00:59:59,839 --> 01:00:02,400
safari users or a little bit more

1614
01:00:02,400 --> 01:00:04,559
complicated like give me the aggregate

1615
01:00:04,559 --> 01:00:08,240
for all chrome users in the us or or all

1616
01:00:08,240 --> 01:00:10,960
firefox users that aren't in canada or

1617
01:00:10,960 --> 01:00:13,119
something like that

1618
01:00:13,119 --> 01:00:15,839
and um yeah so

1619
01:00:15,839 --> 01:00:17,599
the problem that is the problem though

1620
01:00:17,599 --> 01:00:19,280
is that even a very simple version of

1621
01:00:19,280 --> 01:00:21,520
this kind of grouping strategy is not

1622
01:00:21,520 --> 01:00:23,520
well supported in the protocol you can

1623
01:00:23,520 --> 01:00:25,440
kind of hack around it but we don't

1624
01:00:25,440 --> 01:00:27,920
expect that uh any solution that we have

1625
01:00:27,920 --> 01:00:31,680
today uh will scale very well

1626
01:00:32,000 --> 01:00:35,040
now uh issue 273 brought up even what's

1627
01:00:35,040 --> 01:00:38,000
arguably a simpler use case um maybe you

1628
01:00:38,000 --> 01:00:40,000
actually don't care that reports have

1629
01:00:40,000 --> 01:00:42,880
anything to do with each other um

1630
01:00:42,880 --> 01:00:45,520
maybe what you need basically is that

1631
01:00:45,520 --> 01:00:49,040
reports are the the batches are disjoint

1632
01:00:49,040 --> 01:00:51,040
and that they all have the same size or

1633
01:00:51,040 --> 01:00:53,599
at least approximately the same size

1634
01:00:53,599 --> 01:00:55,680
and this is this is important yeah yeah

1635
01:00:55,680 --> 01:00:56,799
go ahead

1636
01:00:56,799 --> 01:00:57,760
do you think it will help to have

1637
01:00:57,760 --> 01:00:59,920
discussion on each of these piecemeal or

1638
01:00:59,920 --> 01:01:02,640
do you want to finish and

1639
01:01:02,640 --> 01:01:05,040
um i think it would i think it would be

1640
01:01:05,040 --> 01:01:07,359
good to uh finish because i want to i

1641
01:01:07,359 --> 01:01:08,480
want to sort of talk about the

1642
01:01:08,480 --> 01:01:10,799
generalization of this um but we can

1643
01:01:10,799 --> 01:01:12,720
talk about these i mean i guess up to

1644
01:01:12,720 --> 01:01:14,160
you

1645
01:01:14,160 --> 01:01:15,839
go ahead

1646
01:01:15,839 --> 01:01:16,640
okay

1647
01:01:16,640 --> 01:01:17,599
um

1648
01:01:17,599 --> 01:01:19,119
so so

1649
01:01:19,119 --> 01:01:22,000
fixed size batches are useful for like

1650
01:01:22,000 --> 01:01:23,760
you know a statistical analysis where

1651
01:01:23,760 --> 01:01:26,400
you need to control the sample size um

1652
01:01:26,400 --> 01:01:27,920
and for applications that want to

1653
01:01:27,920 --> 01:01:30,240
compose dap with differential privacy

1654
01:01:30,240 --> 01:01:31,599
this is also going to be important for

1655
01:01:31,599 --> 01:01:32,880
tuning noise

1656
01:01:32,880 --> 01:01:35,119
um and then there's also

1657
01:01:35,119 --> 01:01:35,920
uh

1658
01:01:35,920 --> 01:01:36,799
you know

1659
01:01:36,799 --> 01:01:39,440
waiting for the current time endo to

1660
01:01:39,440 --> 01:01:41,920
expire before you compute in aggregate

1661
01:01:41,920 --> 01:01:44,160
can add latency uh to the system that

1662
01:01:44,160 --> 01:01:46,400
might not actually be uh sort of

1663
01:01:46,400 --> 01:01:47,599
necessary

1664
01:01:47,599 --> 01:01:48,480
um

1665
01:01:48,480 --> 01:01:51,680
so this sort of fixed size chunks uh use

1666
01:01:51,680 --> 01:01:53,920
case which was brought up in this issue

1667
01:01:53,920 --> 01:01:55,920
is not supported at all today because

1668
01:01:55,920 --> 01:01:57,760
the collector has no control over the

1669
01:01:57,760 --> 01:02:00,000
batch size beyond specifying the minimum

1670
01:02:00,000 --> 01:02:02,079
size

1671
01:02:02,079 --> 01:02:03,039
um

1672
01:02:03,039 --> 01:02:05,039
okay

1673
01:02:05,039 --> 01:02:07,599
so um

1674
01:02:07,599 --> 01:02:10,160
all right so uh where we are we think is

1675
01:02:10,160 --> 01:02:11,599
that we need more flexibility the

1676
01:02:11,599 --> 01:02:14,240
question is how much um and we need to

1677
01:02:14,240 --> 01:02:16,000
stipulate the fact that

1678
01:02:16,000 --> 01:02:18,079
collectors in dap are going to be more

1679
01:02:18,079 --> 01:02:21,119
constrained than uh in a more in a

1680
01:02:21,119 --> 01:02:23,680
traditional database or telemetry system

1681
01:02:23,680 --> 01:02:26,319
um and this has to do with some privacy

1682
01:02:26,319 --> 01:02:28,640
privacy issues uh which chris will talk

1683
01:02:28,640 --> 01:02:31,119
about in the next presentation uh lots

1684
01:02:31,119 --> 01:02:33,520
of open questions there but even from

1685
01:02:33,520 --> 01:02:35,760
like a functional perspective uh we need

1686
01:02:35,760 --> 01:02:37,839
to figure out what we need uh one

1687
01:02:37,839 --> 01:02:39,839
question is what are all the query types

1688
01:02:39,839 --> 01:02:43,200
so i've talked about three here um

1689
01:02:43,200 --> 01:02:44,799
basically this time series things that

1690
01:02:44,799 --> 01:02:47,359
we have today uh grouping by client

1691
01:02:47,359 --> 01:02:49,119
properties um

1692
01:02:49,119 --> 01:02:50,240
or or

1693
01:02:50,240 --> 01:02:52,000
or partitioning things into fixed-sized

1694
01:02:52,000 --> 01:02:55,119
chunks uh what else do we need

1695
01:02:55,119 --> 01:02:56,559
another question is

1696
01:02:56,559 --> 01:02:59,200
uh do we need to be able to compose

1697
01:02:59,200 --> 01:03:01,680
different query types um

1698
01:03:01,680 --> 01:03:04,799
this can get quite complicated i imagine

1699
01:03:04,799 --> 01:03:06,720
not all query types would necessarily

1700
01:03:06,720 --> 01:03:08,319
compose

1701
01:03:08,319 --> 01:03:10,480
and finally would every dapp deployment

1702
01:03:10,480 --> 01:03:12,559
need to implement all query types or is

1703
01:03:12,559 --> 01:03:14,480
this something that we can

1704
01:03:14,480 --> 01:03:16,480
allow folks to implement incrementally

1705
01:03:16,480 --> 01:03:18,480
or not at all

1706
01:03:18,480 --> 01:03:20,319
so um

1707
01:03:20,319 --> 01:03:22,480
yeah so i i guess i'll leave this slide

1708
01:03:22,480 --> 01:03:24,000
up for the discussion i can also go back

1709
01:03:24,000 --> 01:03:26,319
and forth as needed um

1710
01:03:26,319 --> 01:03:28,319
my proposal for draft two would be to

1711
01:03:28,319 --> 01:03:31,039
take uh an incremental step

1712
01:03:31,039 --> 01:03:32,960
that is minimal but is sufficient for

1713
01:03:32,960 --> 01:03:35,039
our use cases and i think this would

1714
01:03:35,039 --> 01:03:36,960
involve enumerating all the possible

1715
01:03:36,960 --> 01:03:38,960
query types that we want to support in a

1716
01:03:38,960 --> 01:03:40,640
way that's extensible

1717
01:03:40,640 --> 01:03:42,160
um

1718
01:03:42,160 --> 01:03:44,400
uh and then i you know i would add some

1719
01:03:44,400 --> 01:03:47,039
additional requirements to this um

1720
01:03:47,039 --> 01:03:48,720
basically the idea would be that the

1721
01:03:48,720 --> 01:03:50,799
collector would include in its collect

1722
01:03:50,799 --> 01:03:53,520
request a query uh that the leader would

1723
01:03:53,520 --> 01:03:57,039
use to um choose a batch of reports that

1724
01:03:57,039 --> 01:03:58,559
satisfy that query

1725
01:03:58,559 --> 01:03:59,839
um

1726
01:03:59,839 --> 01:04:01,599
will uh there are some additional

1727
01:04:01,599 --> 01:04:04,319
requirements here to think about um

1728
01:04:04,319 --> 01:04:06,559
uh yeah so

1729
01:04:06,559 --> 01:04:08,960
my question i guess for the room is uh

1730
01:04:08,960 --> 01:04:11,520
does a protocol change that satisfies

1731
01:04:11,520 --> 01:04:13,520
this these requirements uh fit your use

1732
01:04:13,520 --> 01:04:15,599
case do you think we need something else

1733
01:04:15,599 --> 01:04:17,680
and i see eckerd's in the queue uh in

1734
01:04:17,680 --> 01:04:19,200
person yep

1735
01:04:19,200 --> 01:04:21,200
go ahead i am impacting person not a

1736
01:04:21,200 --> 01:04:23,520
sybil

1737
01:04:24,079 --> 01:04:26,400
so do not believe

1738
01:04:26,400 --> 01:04:27,839
well i want to just talk this over

1739
01:04:27,839 --> 01:04:29,359
before i start saying what i think we

1740
01:04:29,359 --> 01:04:31,200
got to do um

1741
01:04:31,200 --> 01:04:32,720
so i guess i want to make two

1742
01:04:32,720 --> 01:04:33,920
observations

1743
01:04:33,920 --> 01:04:35,760
um one i know what's going to talk about

1744
01:04:35,760 --> 01:04:38,240
the pro but the privacy implications um

1745
01:04:38,240 --> 01:04:40,640
but i think we're already like kind of

1746
01:04:40,640 --> 01:04:42,960
out of the zone where we can plausibly

1747
01:04:42,960 --> 01:04:44,319
make

1748
01:04:44,319 --> 01:04:45,359
um

1749
01:04:45,359 --> 01:04:47,839
privacy assertions so like the the the

1750
01:04:47,839 --> 01:04:49,039
property that's nice about the current

1751
01:04:49,039 --> 01:04:50,079
design

1752
01:04:50,079 --> 01:04:51,520
is that you can look at that look at the

1753
01:04:51,520 --> 01:04:53,520
possible and queries these trips don't

1754
01:04:53,520 --> 01:04:55,440
work the possible outputs and draw

1755
01:04:55,440 --> 01:04:56,880
conclusions about the privacy properties

1756
01:04:56,880 --> 01:04:58,400
of the system right you got some key and

1757
01:04:58,400 --> 01:04:59,839
enemy conclusion you draw some like

1758
01:04:59,839 --> 01:05:01,440
conclusion about like interception

1759
01:05:01,440 --> 01:05:03,359
attacks like you can just conclude it's

1760
01:05:03,359 --> 01:05:05,280
safe or unsafe but like you can just

1761
01:05:05,280 --> 01:05:06,640
analyze it right

1762
01:05:06,640 --> 01:05:09,039
um and so

1763
01:05:09,039 --> 01:05:10,799
i suspect that the minute we get to the

1764
01:05:10,799 --> 01:05:11,920
point

1765
01:05:11,920 --> 01:05:12,960
where

1766
01:05:12,960 --> 01:05:14,559
so and the reason you get the properties

1767
01:05:14,559 --> 01:05:16,559
because you guarantee only process one

1768
01:05:16,559 --> 01:05:19,280
each each input submission once

1769
01:05:19,280 --> 01:05:20,400
and so as soon as you get out of that

1770
01:05:20,400 --> 01:05:22,799
mode and you allow any other structure

1771
01:05:22,799 --> 01:05:24,559
which i think we're going to likely have

1772
01:05:24,559 --> 01:05:26,319
which i think it's not quite clear to me

1773
01:05:26,319 --> 01:05:28,000
that this allows but if it doesn't but i

1774
01:05:28,000 --> 01:05:30,079
mean sorry you know although

1775
01:05:30,079 --> 01:05:31,440
screwing around we've done is that

1776
01:05:31,440 --> 01:05:33,200
trying to make that single processing

1777
01:05:33,200 --> 01:05:34,640
requirement easier to implement on the

1778
01:05:34,640 --> 01:05:37,599
helper run later right um and so

1779
01:05:37,599 --> 01:05:39,039
um as soon as you get out of that mode

1780
01:05:39,039 --> 01:05:40,480
and you say you can make one query

1781
01:05:40,480 --> 01:05:42,000
multiple queries

1782
01:05:42,000 --> 01:05:44,240
um on the same submission

1783
01:05:44,240 --> 01:05:45,920
which is not quite creative this allows

1784
01:05:45,920 --> 01:05:48,480
but like it implicitly might allow um

1785
01:05:48,480 --> 01:05:49,839
and and certainly we're much harder to

1786
01:05:49,839 --> 01:05:52,400
implement um um you know if it doesn't

1787
01:05:52,400 --> 01:05:53,280
allow

1788
01:05:53,280 --> 01:05:55,039
um then like the situation's much more

1789
01:05:55,039 --> 01:05:56,799
complicated wise and then some other way

1790
01:05:56,799 --> 01:05:58,640
to think about it um i'm not saying you

1791
01:05:58,640 --> 01:05:59,680
can't generalize it but i'm saying that

1792
01:05:59,680 --> 01:06:01,039
trying to analyze what the political

1793
01:06:01,039 --> 01:06:02,000
commitment doesn't permit it will be

1794
01:06:02,000 --> 01:06:03,599
almost impossible

1795
01:06:03,599 --> 01:06:05,520
you have policy construction instead

1796
01:06:05,520 --> 01:06:08,000
um to look at a different example and so

1797
01:06:08,000 --> 01:06:09,119
that's like the first thing i want to

1798
01:06:09,119 --> 01:06:11,760
say um look at a different example the

1799
01:06:11,760 --> 01:06:14,160
way ipa works on the meta missile

1800
01:06:14,160 --> 01:06:16,160
proposal for interoperable private uh

1801
01:06:16,160 --> 01:06:18,480
aggregation um

1802
01:06:18,480 --> 01:06:20,000
the uh

1803
01:06:20,000 --> 01:06:22,480
instead of having the

1804
01:06:22,480 --> 01:06:24,880
um the the selection of the submissions

1805
01:06:24,880 --> 01:06:28,400
is entirely within the the unit

1806
01:06:28,400 --> 01:06:30,400
of the effectively what's in this case

1807
01:06:30,400 --> 01:06:31,440
the collector

1808
01:06:31,440 --> 01:06:33,200
namely that the collector collects all

1809
01:06:33,200 --> 01:06:34,799
the submissions and then then shoves

1810
01:06:34,799 --> 01:06:36,480
them into the in in the helper for

1811
01:06:36,480 --> 01:06:37,760
analysis right

1812
01:06:37,760 --> 01:06:39,680
um and so we can do anything or anything

1813
01:06:39,680 --> 01:06:42,000
anything it wants uh modulo whatever

1814
01:06:42,000 --> 01:06:44,720
mechanisms are provided for privacy

1815
01:06:44,720 --> 01:06:47,440
and so um

1816
01:06:47,440 --> 01:06:49,039
what i wonder is

1817
01:06:49,039 --> 01:06:50,319
whether or not

1818
01:06:50,319 --> 01:06:52,240
that kind of design even not that about

1819
01:06:52,240 --> 01:06:54,240
that specific design is what we want

1820
01:06:54,240 --> 01:06:55,200
here

1821
01:06:55,200 --> 01:06:57,839
um in particular allowing essentially

1822
01:06:57,839 --> 01:06:58,960
instead of trying to create some

1823
01:06:58,960 --> 01:07:01,680
language here um that is sort of like uh

1824
01:07:01,680 --> 01:07:03,920
restricted for what you can say

1825
01:07:03,920 --> 01:07:05,200
i wonder if we want something like much

1826
01:07:05,200 --> 01:07:06,880
more fancier instead right

1827
01:07:06,880 --> 01:07:09,440
um and so what i need a fancier is

1828
01:07:09,440 --> 01:07:12,079
effectively to say well

1829
01:07:12,079 --> 01:07:14,160
um the collector's like any subset it

1830
01:07:14,160 --> 01:07:16,720
wants to be any mechanism at once and

1831
01:07:16,720 --> 01:07:17,599
um

1832
01:07:17,599 --> 01:07:18,640
uh

1833
01:07:18,640 --> 01:07:20,160
and then they usually analyze and we

1834
01:07:20,160 --> 01:07:21,280
have some other mechanism for ensuring

1835
01:07:21,280 --> 01:07:22,880
privacy into those conditions

1836
01:07:22,880 --> 01:07:24,799
um but anything could be i'm not sure

1837
01:07:24,799 --> 01:07:26,400
quite sure but to say once we have any

1838
01:07:26,400 --> 01:07:27,520
kind of query methods that allows

1839
01:07:27,520 --> 01:07:28,640
overlapping queries we're already in the

1840
01:07:28,640 --> 01:07:29,760
soup and we're going to have a

1841
01:07:29,760 --> 01:07:32,640
flexibility question analysis so um so

1842
01:07:32,640 --> 01:07:34,720
like here's like my dumb version of this

1843
01:07:34,720 --> 01:07:37,680
um which is effectively that the um that

1844
01:07:37,680 --> 01:07:39,359
the collector gets to upload a piece of

1845
01:07:39,359 --> 01:07:41,920
javascript that the the leader and help

1846
01:07:41,920 --> 01:07:43,119
the coverage execute the term whether

1847
01:07:43,119 --> 01:07:45,039
it'll include a given section

1848
01:07:45,039 --> 01:07:46,960
um another version of that would be for

1849
01:07:46,960 --> 01:07:49,440
the leader and helper to um provide the

1850
01:07:49,440 --> 01:07:50,880
collector with the entire inventory

1851
01:07:50,880 --> 01:07:52,720
every possible submission and and the

1852
01:07:52,720 --> 01:07:54,000
collectors simply say aggregate these

1853
01:07:54,000 --> 01:07:56,559
ones these ones these ones right um and

1854
01:07:56,559 --> 01:07:58,240
so the reason why the reason the reason

1855
01:07:58,240 --> 01:08:00,160
i'm saying this is not it's not make the

1856
01:08:00,160 --> 01:08:02,559
problem harder but to make it easier um

1857
01:08:02,559 --> 01:08:04,559
and to sort admit the fact like admit

1858
01:08:04,559 --> 01:08:05,920
the fact that we already are sort of

1859
01:08:05,920 --> 01:08:08,160
like off the fairway and try to solve

1860
01:08:08,160 --> 01:08:09,359
the problem on the far end of the

1861
01:08:09,359 --> 01:08:10,720
fairway instead of trying to solve my

1862
01:08:10,720 --> 01:08:12,880
immersion camera here

1863
01:08:12,880 --> 01:08:15,760
so um one thing one thing i'd point out

1864
01:08:15,760 --> 01:08:16,670
though um

1865
01:08:16,670 --> 01:08:18,238
[Music]

1866
01:08:18,238 --> 01:08:20,799
so this this this fixed size chunk use

1867
01:08:20,799 --> 01:08:22,238
case um

1868
01:08:22,238 --> 01:08:25,040
here's kind of it's it's

1869
01:08:25,040 --> 01:08:28,080
it's it's simple in that um

1870
01:08:28,080 --> 01:08:29,439
there's no

1871
01:08:29,439 --> 01:08:31,920
reason to ever have overlapping batches

1872
01:08:31,920 --> 01:08:34,880
what we want is every chunk is disjoint

1873
01:08:34,880 --> 01:08:37,040
um i would love to be able to support

1874
01:08:37,040 --> 01:08:39,439
something like this that is simple and

1875
01:08:39,439 --> 01:08:41,439
already kind of constrained but i like

1876
01:08:41,439 --> 01:08:44,000
your point though is well taken like

1877
01:08:44,000 --> 01:08:46,560
whatever we do here i think at a minimum

1878
01:08:46,560 --> 01:08:48,238
we can try to

1879
01:08:48,238 --> 01:08:50,960
uh prevent overlapping batches um like

1880
01:08:50,960 --> 01:08:52,319
that i think that could always be

1881
01:08:52,319 --> 01:08:53,279
defined

1882
01:08:53,279 --> 01:08:54,319
um

1883
01:08:54,319 --> 01:08:57,600
although with like the grouping thing

1884
01:08:57,600 --> 01:08:58,640
like

1885
01:08:58,640 --> 01:09:00,799
the what this is what this is kind of

1886
01:09:00,799 --> 01:09:03,520
about is i want to i want to explore the

1887
01:09:03,520 --> 01:09:06,399
data

1888
01:09:06,399 --> 01:09:08,158
yeah yeah well well they could be

1889
01:09:08,158 --> 01:09:09,759
overlapping because

1890
01:09:09,759 --> 01:09:11,120
uh

1891
01:09:11,120 --> 01:09:13,359
the intersection between

1892
01:09:13,359 --> 01:09:15,198
uh

1893
01:09:15,198 --> 01:09:16,640
chrome users

1894
01:09:16,640 --> 01:09:18,560
and everybody else that would be an

1895
01:09:18,560 --> 01:09:20,158
overlapping batch might tell you

1896
01:09:20,158 --> 01:09:22,158
something about everybody okay that's

1897
01:09:22,158 --> 01:09:23,439
what i'm saying that's what i'm saying

1898
01:09:23,439 --> 01:09:25,520
yeah so i think so i think like one so

1899
01:09:25,520 --> 01:09:27,279
again like i don't know

1900
01:09:27,279 --> 01:09:28,479
um i guess what i'm saying is like

1901
01:09:28,479 --> 01:09:30,238
instead of having like we initially

1902
01:09:30,238 --> 01:09:31,439
designed this

1903
01:09:31,439 --> 01:09:32,238
the

1904
01:09:32,238 --> 01:09:34,479
kind of idea was we designed a grammar

1905
01:09:34,479 --> 01:09:35,759
that would basically not let you say

1906
01:09:35,759 --> 01:09:37,600
things that were illegal right um and

1907
01:09:37,600 --> 01:09:38,640
the grammar like it wasn't even really a

1908
01:09:38,640 --> 01:09:39,839
query grammar just like this is how it

1909
01:09:39,839 --> 01:09:41,679
works right and so

1910
01:09:41,679 --> 01:09:43,359
um and it was and that grammar

1911
01:09:43,359 --> 01:09:45,198
inherently enforced one query per match

1912
01:09:45,198 --> 01:09:48,238
right one career submission and so i

1913
01:09:48,238 --> 01:09:49,520
think we need to go back and say what's

1914
01:09:49,520 --> 01:09:51,198
the underlying rule that guarantees

1915
01:09:51,198 --> 01:09:52,719
guarantees privacy

1916
01:09:52,719 --> 01:09:53,679
and

1917
01:09:53,679 --> 01:09:54,880
then

1918
01:09:54,880 --> 01:09:57,360
let's implement that rule on the helpers

1919
01:09:57,360 --> 01:09:59,600
and uh and not worry about like and not

1920
01:09:59,600 --> 01:10:00,800
trying to minimize state on the helpers

1921
01:10:00,800 --> 01:10:03,600
and leaders and just be like this

1922
01:10:03,600 --> 01:10:04,880
rule and then within the limits of that

1923
01:10:04,880 --> 01:10:06,320
rule you can do any queries any query

1924
01:10:06,320 --> 01:10:08,000
pattern you want and we won't try and

1925
01:10:08,000 --> 01:10:09,360
we'll try to shift that so that's

1926
01:10:09,360 --> 01:10:10,719
probably a better way to go and so like

1927
01:10:10,719 --> 01:10:12,640
so if that means if we say right now the

1928
01:10:12,640 --> 01:10:14,560
answer is one query per submission then

1929
01:10:14,560 --> 01:10:16,320
you like a counter on every submission

1930
01:10:16,320 --> 01:10:17,679
and like you know and i don't know about

1931
01:10:17,679 --> 01:10:19,360
one query right and these are some other

1932
01:10:19,360 --> 01:10:21,440
rules and some other rule but i think

1933
01:10:21,440 --> 01:10:23,120
like and and then i think that what

1934
01:10:23,120 --> 01:10:24,960
basically says like

1935
01:10:24,960 --> 01:10:26,239
and then i think the question is what's

1936
01:10:26,239 --> 01:10:28,239
the most the cheapest way to allow

1937
01:10:28,239 --> 01:10:31,440
arbitrary queries um and not design a

1938
01:10:31,440 --> 01:10:33,520
whole new language for that um rather

1939
01:10:33,520 --> 01:10:34,800
than trying to design that language for

1940
01:10:34,800 --> 01:10:36,320
that so now we might put on this on this

1941
01:10:36,320 --> 01:10:37,600
i think dkg is probably going to say

1942
01:10:37,600 --> 01:10:38,640
like the answer would be to live no

1943
01:10:38,640 --> 01:10:40,640
queries in the problem we were simpler

1944
01:10:40,640 --> 01:10:42,320
we're going to close the queue on this

1945
01:10:42,320 --> 01:10:45,600
topic soon so if you want to hop in

1946
01:10:45,600 --> 01:10:48,880
all right daniel gilmore um so

1947
01:10:48,880 --> 01:10:50,719
uh i wanted to say something similar to

1948
01:10:50,719 --> 01:10:52,320
what ecker was saying but maybe looking

1949
01:10:52,320 --> 01:10:54,960
at it from a different perspective um

1950
01:10:54,960 --> 01:10:56,560
the reason that people are comfortable

1951
01:10:56,560 --> 01:10:58,719
participating in this scheme

1952
01:10:58,719 --> 01:11:00,640
is because they want to give feedback

1953
01:11:00,640 --> 01:11:02,960
that will help the person the the group

1954
01:11:02,960 --> 01:11:04,560
that's developing their software or they

1955
01:11:04,560 --> 01:11:06,960
want to report some telemetry without

1956
01:11:06,960 --> 01:11:08,960
risking their own privacy right

1957
01:11:08,960 --> 01:11:10,400
and some of these types of

1958
01:11:10,400 --> 01:11:12,640
disaggregation mechanisms

1959
01:11:12,640 --> 01:11:15,199
require me as a user to report some

1960
01:11:15,199 --> 01:11:17,040
specific things

1961
01:11:17,040 --> 01:11:18,800
that i don't actually know how they're

1962
01:11:18,800 --> 01:11:21,040
going to be used to

1963
01:11:21,040 --> 01:11:22,880
differentiate me from the rest of the

1964
01:11:22,880 --> 01:11:23,840
crowd

1965
01:11:23,840 --> 01:11:26,000
yeah so if the goal is to convince

1966
01:11:26,000 --> 01:11:28,320
people that they can do this safely and

1967
01:11:28,320 --> 01:11:29,440
not everyone's going to do the full

1968
01:11:29,440 --> 01:11:30,880
analysis here but they might read

1969
01:11:30,880 --> 01:11:33,040
analysis from other people

1970
01:11:33,040 --> 01:11:36,000
then the more complicated you make this

1971
01:11:36,000 --> 01:11:37,920
the harder it is for somebody to analyze

1972
01:11:37,920 --> 01:11:40,880
it and say you cannot be disaggregated

1973
01:11:40,880 --> 01:11:42,880
right yeah totally and that seems to be

1974
01:11:42,880 --> 01:11:44,560
defeating the purpose of all of this

1975
01:11:44,560 --> 01:11:45,760
right if people are willing to just

1976
01:11:45,760 --> 01:11:46,800
throw their hands in the air and say

1977
01:11:46,800 --> 01:11:48,239
well we trust

1978
01:11:48,239 --> 01:11:49,840
that the telemetry collector is not

1979
01:11:49,840 --> 01:11:51,280
going to

1980
01:11:51,280 --> 01:11:53,760
disaggregate me then we don't need any

1981
01:11:53,760 --> 01:11:55,520
of this protocol

1982
01:11:55,520 --> 01:11:58,239
so i would be very wary about uh the

1983
01:11:58,239 --> 01:12:00,560
extent to which we are asking people to

1984
01:12:00,560 --> 01:12:01,840
tag

1985
01:12:01,840 --> 01:12:04,239
uh or to tag their submissions or opt

1986
01:12:04,239 --> 01:12:06,960
into their submissions in some way that

1987
01:12:06,960 --> 01:12:09,280
uh that has something complicated here

1988
01:12:09,280 --> 01:12:10,320
so so

1989
01:12:10,320 --> 01:12:12,960
you know ecker's point of like if we can

1990
01:12:12,960 --> 01:12:15,280
say that you know the helper that obeys

1991
01:12:15,280 --> 01:12:18,000
the right rules has this limit which is

1992
01:12:18,000 --> 01:12:18,719
like

1993
01:12:18,719 --> 01:12:21,280
each query can only be put into one

1994
01:12:21,280 --> 01:12:23,520
aggregate response that's much easier to

1995
01:12:23,520 --> 01:12:24,880
analyze and much easier to convince

1996
01:12:24,880 --> 01:12:26,800
someone that they should participate

1997
01:12:26,800 --> 01:12:27,760
um

1998
01:12:27,760 --> 01:12:30,000
than this kind of like well you might be

1999
01:12:30,000 --> 01:12:32,159
disaggregatable if you happen to use a

2000
01:12:32,159 --> 01:12:34,000
browser that

2001
01:12:34,000 --> 01:12:36,080
you know more than 75 percent of other

2002
01:12:36,080 --> 01:12:38,640
people don't use or something like

2003
01:12:38,640 --> 01:12:40,000
how do i know that that's going to

2004
01:12:40,000 --> 01:12:41,120
happen

2005
01:12:41,120 --> 01:12:43,040
whereas yeah the the simpler thing is

2006
01:12:43,040 --> 01:12:44,800
better that's what i'm saying simpler

2007
01:12:44,800 --> 01:12:47,679
yeah i i totally agree with that um i

2008
01:12:47,679 --> 01:12:49,760
think like i think where we might be

2009
01:12:49,760 --> 01:12:51,440
heading is

2010
01:12:51,440 --> 01:12:53,920
uh i would like to be able to support at

2011
01:12:53,920 --> 01:12:54,719
least

2012
01:12:54,719 --> 01:12:57,280
use case number three but maybe we sort

2013
01:12:57,280 --> 01:12:58,000
of

2014
01:12:58,000 --> 01:13:01,199
um so so one one like in in the in the

2015
01:13:01,199 --> 01:13:02,880
original design one thing we were we

2016
01:13:02,880 --> 01:13:04,960
were contending with is what if you

2017
01:13:04,960 --> 01:13:07,360
don't have enough data so like say your

2018
01:13:07,360 --> 01:13:10,400
batch interval is t0 to t1 and you don't

2019
01:13:10,400 --> 01:13:12,480
have enough data to actually get an

2020
01:13:12,480 --> 01:13:13,840
aggregate

2021
01:13:13,840 --> 01:13:15,600
to actually uh

2022
01:13:15,600 --> 01:13:17,600
get over the minimum batch size well if

2023
01:13:17,600 --> 01:13:20,719
i have enough data t0 and t1 then that's

2024
01:13:20,719 --> 01:13:23,199
good enough like then that's good enough

2025
01:13:23,199 --> 01:13:26,159
as long as uh i'm prevented from ever

2026
01:13:26,159 --> 01:13:28,239
like doing an intersection over over

2027
01:13:28,239 --> 01:13:30,880
that that larger interval

2028
01:13:30,880 --> 01:13:32,080
but i think yeah i think this is

2029
01:13:32,080 --> 01:13:33,600
something a problem that we can deal

2030
01:13:33,600 --> 01:13:34,880
with um

2031
01:13:34,880 --> 01:13:37,280
simplicity is key here

2032
01:13:37,280 --> 01:13:39,040
sorry let me just add one more thing um

2033
01:13:39,040 --> 01:13:40,719
the fact that this is looking like it

2034
01:13:40,719 --> 01:13:43,040
might be proposed as uh

2035
01:13:43,040 --> 01:13:46,320
an in protocol negotiation also makes me

2036
01:13:46,320 --> 01:13:48,480
more worried right so if you could say

2037
01:13:48,480 --> 01:13:50,800
if you're doing ppm you make a decision

2038
01:13:50,800 --> 01:13:52,080
whether you're doing this kind of

2039
01:13:52,080 --> 01:13:53,440
grouping or that kind of grouping and

2040
01:13:53,440 --> 01:13:55,520
the whole the whole deployment makes a

2041
01:13:55,520 --> 01:13:58,239
decision so it's not in the wire format

2042
01:13:58,239 --> 01:14:00,480
right yeah you know as part of the

2043
01:14:00,480 --> 01:14:02,880
configuration of your of your system

2044
01:14:02,880 --> 01:14:04,320
that you're going to be doing this type

2045
01:14:04,320 --> 01:14:06,560
of grouping that makes it easier for

2046
01:14:06,560 --> 01:14:08,560
someone who's considering do i want to

2047
01:14:08,560 --> 01:14:10,320
deploy this do i want to participate as

2048
01:14:10,320 --> 01:14:12,640
a helper do i want to

2049
01:14:12,640 --> 01:14:14,880
report as a client to know what they're

2050
01:14:14,880 --> 01:14:16,239
getting themselves into instead of being

2051
01:14:16,239 --> 01:14:17,920
like well it could change up while we're

2052
01:14:17,920 --> 01:14:19,360
going on and it looks like here this

2053
01:14:19,360 --> 01:14:21,280
proposal for adapt2 looks like you've

2054
01:14:21,280 --> 01:14:23,040
got it in the wire format which suggests

2055
01:14:23,040 --> 01:14:24,960
dynamic transformation

2056
01:14:24,960 --> 01:14:27,199
of any particular collection over time

2057
01:14:27,199 --> 01:14:29,920
and that that seems much harder to

2058
01:14:29,920 --> 01:14:31,520
believe in

2059
01:14:31,520 --> 01:14:33,440
yeah yeah totally um i think that

2060
01:14:33,440 --> 01:14:35,199
initially we would just say that the

2061
01:14:35,199 --> 01:14:38,719
query type is uh is is configured out of

2062
01:14:38,719 --> 01:14:40,159
band and as part of the task

2063
01:14:40,159 --> 01:14:42,400
configuration that's like it's kind of

2064
01:14:42,400 --> 01:14:43,920
punting but um

2065
01:14:43,920 --> 01:14:45,600
i think that at least kind of addresses

2066
01:14:45,600 --> 01:14:48,239
your concern

2067
01:14:54,840 --> 01:14:57,679
jim i also agree with the simplicity

2068
01:14:57,679 --> 01:15:00,320
point i think for that the

2069
01:15:00,320 --> 01:15:02,159
most important thing is we deliver a

2070
01:15:02,159 --> 01:15:04,719
badge that satisfies some privacy

2071
01:15:04,719 --> 01:15:06,480
guarantees

2072
01:15:06,480 --> 01:15:07,760
how the

2073
01:15:07,760 --> 01:15:10,400
analyzing of the badge is totally up to

2074
01:15:10,400 --> 01:15:12,719
the user and it doesn't have to be

2075
01:15:12,719 --> 01:15:15,120
um part of the the

2076
01:15:15,120 --> 01:15:18,320
initial requirement for that because

2077
01:15:18,320 --> 01:15:21,600
like others have said there are you know

2078
01:15:21,600 --> 01:15:23,600
infinite possibilities of how a user

2079
01:15:23,600 --> 01:15:25,679
wants to

2080
01:15:25,679 --> 01:15:27,920
define these selecting groups or query

2081
01:15:27,920 --> 01:15:28,960
groups

2082
01:15:28,960 --> 01:15:31,280
and also another point is

2083
01:15:31,280 --> 01:15:34,400
these predicates you define for

2084
01:15:34,400 --> 01:15:36,560
grouping the data it can also be

2085
01:15:36,560 --> 01:15:37,840
achieved by

2086
01:15:37,840 --> 01:15:39,280
encoding your

2087
01:15:39,280 --> 01:15:41,520
input shares or your measurements in a

2088
01:15:41,520 --> 01:15:44,800
way that every client participating will

2089
01:15:44,800 --> 01:15:48,080
subject to the same predicate so

2090
01:15:48,080 --> 01:15:50,800
everyone knows what kind of a task they

2091
01:15:50,800 --> 01:15:52,560
are participating in but

2092
01:15:52,560 --> 01:15:54,400
later there's no way you can slice the

2093
01:15:54,400 --> 01:15:56,960
data to pick up some user lab

2094
01:15:56,960 --> 01:15:59,600
but you could like encode

2095
01:15:59,600 --> 01:16:02,800
whether a user is using chrome or safari

2096
01:16:02,800 --> 01:16:05,440
without actually picking out the

2097
01:16:05,440 --> 01:16:07,040
the group of users that actually using

2098
01:16:07,040 --> 01:16:09,519
safari

2099
01:16:13,920 --> 01:16:16,800
chris wood i agree

2100
01:16:18,960 --> 01:16:20,640
um

2101
01:16:20,640 --> 01:16:23,120
uh a couple things so uh

2102
01:16:23,120 --> 01:16:24,560
i think chris you already mentioned this

2103
01:16:24,560 --> 01:16:26,000
or someone mentioned it but the the

2104
01:16:26,000 --> 01:16:27,360
current restrictions that we have in the

2105
01:16:27,360 --> 01:16:29,760
draft right now for validating our um

2106
01:16:29,760 --> 01:16:31,199
verifying password

2107
01:16:31,199 --> 01:16:33,440
basically is present forces limit that

2108
01:16:33,440 --> 01:16:35,199
echo is adjusted where you have

2109
01:16:35,199 --> 01:16:36,800
basically one query submitting to a

2110
01:16:36,800 --> 01:16:38,239
given report there's no intersection

2111
01:16:38,239 --> 01:16:39,199
allowed

2112
01:16:39,199 --> 01:16:40,080
um

2113
01:16:40,080 --> 01:16:41,120
and

2114
01:16:41,120 --> 01:16:43,199
that allows us to like very reasonably

2115
01:16:43,199 --> 01:16:44,719
conclude like certain privacy properties

2116
01:16:44,719 --> 01:16:47,120
about the the resulting scheme if you're

2117
01:16:47,120 --> 01:16:49,440
using that in a specific way it is

2118
01:16:49,440 --> 01:16:51,520
overly perhaps overly rigid particularly

2119
01:16:51,520 --> 01:16:53,440
because it doesn't enable like the um

2120
01:16:53,440 --> 01:16:56,880
the chunk based variant here um

2121
01:16:56,880 --> 01:16:59,199
so i would be in support of you know

2122
01:16:59,199 --> 01:17:01,440
perhaps looser enforcement

2123
01:17:01,440 --> 01:17:04,159
that did enable that use case

2124
01:17:04,159 --> 01:17:05,120
um

2125
01:17:05,120 --> 01:17:06,400
but i guess

2126
01:17:06,400 --> 01:17:08,239
what i'm concerned about is whether or

2127
01:17:08,239 --> 01:17:10,480
not

2128
01:17:11,040 --> 01:17:14,080
those two different

2129
01:17:14,320 --> 01:17:16,880
or that or rather the the enforcements

2130
01:17:16,880 --> 01:17:18,400
that we put in place whether or not it

2131
01:17:18,400 --> 01:17:20,080
would yield a protocol or a system

2132
01:17:20,080 --> 01:17:21,199
that's like

2133
01:17:21,199 --> 01:17:22,960
useful in practice

2134
01:17:22,960 --> 01:17:23,840
um

2135
01:17:23,840 --> 01:17:25,520
there's certainly like a large gap that

2136
01:17:25,520 --> 01:17:27,440
exists between dap with like all these

2137
01:17:27,440 --> 01:17:29,760
sort of query constraints and like other

2138
01:17:29,760 --> 01:17:31,120
general purpose data collection systems

2139
01:17:31,120 --> 01:17:33,199
that are used today it's like daf is not

2140
01:17:33,199 --> 01:17:35,440
a drop in replacement for these things

2141
01:17:35,440 --> 01:17:37,920
um and if it's not a drop-in replacement

2142
01:17:37,920 --> 01:17:39,280
for these things like what is the

2143
01:17:39,280 --> 01:17:41,199
incentive for people to

2144
01:17:41,199 --> 01:17:43,280
to use this protocol

2145
01:17:43,280 --> 01:17:45,760
um the the drill down use case that was

2146
01:17:45,760 --> 01:17:47,280
mentioned

2147
01:17:47,280 --> 01:17:48,159
um

2148
01:17:48,159 --> 01:17:49,600
i think echo originally brought it up a

2149
01:17:49,600 --> 01:17:52,800
while back is you know particularly

2150
01:17:52,800 --> 01:17:55,360
interesting to consider um

2151
01:17:55,360 --> 01:17:56,320
and

2152
01:17:56,320 --> 01:17:58,640
i i don't know if that's something that

2153
01:17:58,640 --> 01:18:00,960
people will want to have in order to

2154
01:18:00,960 --> 01:18:03,520
like use doubt um to enable privacy

2155
01:18:03,520 --> 01:18:05,120
preserving collection

2156
01:18:05,120 --> 01:18:06,640
um

2157
01:18:06,640 --> 01:18:10,320
so i i'm kind of conflicted here i i

2158
01:18:10,320 --> 01:18:12,640
very much support you know

2159
01:18:12,640 --> 01:18:14,719
guardrails where appropriate and more

2160
01:18:14,719 --> 01:18:16,719
reasonable such that we can reason about

2161
01:18:16,719 --> 01:18:18,640
the resulting privacy but i'm worried

2162
01:18:18,640 --> 01:18:20,080
about the

2163
01:18:20,080 --> 01:18:22,400
inflexibility that that yields for the

2164
01:18:22,400 --> 01:18:23,920
resulting system

2165
01:18:23,920 --> 01:18:25,360
um

2166
01:18:25,360 --> 01:18:27,440
and i don't know how to square that

2167
01:18:27,440 --> 01:18:29,840
right now

2168
01:18:29,840 --> 01:18:32,239
yeah i mean i i

2169
01:18:32,239 --> 01:18:34,560
i maybe there's a way i mean

2170
01:18:34,560 --> 01:18:36,640
if anyone is insisting on supporting

2171
01:18:36,640 --> 01:18:40,239
this it doesn't sound like anybody is um

2172
01:18:40,239 --> 01:18:42,880
i i'll just say that uh i i have a i

2173
01:18:42,880 --> 01:18:45,760
want to be able to use this use case um

2174
01:18:45,760 --> 01:18:46,800
i think it's going to be really

2175
01:18:46,800 --> 01:18:48,400
important for in particular for

2176
01:18:48,400 --> 01:18:50,159
differential privacy which

2177
01:18:50,159 --> 01:18:51,520
is something we haven't totally worked

2178
01:18:51,520 --> 01:18:52,840
out but

2179
01:18:52,840 --> 01:18:54,640
um uh

2180
01:18:54,640 --> 01:18:56,400
i would like to at least take a step in

2181
01:18:56,400 --> 01:18:58,480
draft two that that deals with this use

2182
01:18:58,480 --> 01:19:00,718
case

2183
01:19:02,640 --> 01:19:04,320
go ahead wes

2184
01:19:04,320 --> 01:19:06,560
no thanks um so i always hesitate

2185
01:19:06,560 --> 01:19:08,000
speaking about a protocol that i haven't

2186
01:19:08,000 --> 01:19:09,360
read the draft but that's never stuck to

2187
01:19:09,360 --> 01:19:10,960
me before

2188
01:19:10,960 --> 01:19:12,000
but i'm going to speak at a really high

2189
01:19:12,000 --> 01:19:13,920
level i mean one to rephrase i think

2190
01:19:13,920 --> 01:19:15,120
some of the things that other people

2191
01:19:15,120 --> 01:19:16,960
have said um that are extremely

2192
01:19:16,960 --> 01:19:18,560
important is

2193
01:19:18,560 --> 01:19:20,640
it's not even so much the complexity but

2194
01:19:20,640 --> 01:19:24,320
the instant you add two parties into

2195
01:19:24,320 --> 01:19:26,000
determining whether you're getting the

2196
01:19:26,000 --> 01:19:28,800
proper privacy aspects you know or not

2197
01:19:28,800 --> 01:19:31,199
it greatly changes things right so i

2198
01:19:31,199 --> 01:19:32,800
think about this protocol being deployed

2199
01:19:32,800 --> 01:19:34,560
in a wide range of circumstances

2200
01:19:34,560 --> 01:19:36,320
everything from you know in my house

2201
01:19:36,320 --> 01:19:38,080
collecting data about my wife and then

2202
01:19:38,080 --> 01:19:39,360
you know we have this mutual agreement

2203
01:19:39,360 --> 01:19:40,640
that's all fine

2204
01:19:40,640 --> 01:19:42,239
and these extension mechanisms would be

2205
01:19:42,239 --> 01:19:43,120
great

2206
01:19:43,120 --> 01:19:45,760
to the flip side of you know industry

2207
01:19:45,760 --> 01:19:48,640
that have agreed legally on a binding

2208
01:19:48,640 --> 01:19:51,360
you know contract and therefore only one

2209
01:19:51,360 --> 01:19:53,040
side can pick it and it's got to be

2210
01:19:53,040 --> 01:19:55,600
static hard-coded configuration

2211
01:19:55,600 --> 01:19:57,120
so if you do end up putting this

2212
01:19:57,120 --> 01:19:59,040
document i greatly suggest putting in

2213
01:19:59,040 --> 01:20:00,880
some guidance on

2214
01:20:00,880 --> 01:20:02,800
when it shouldn't be used like when you

2215
01:20:02,800 --> 01:20:04,480
know what the error message should be if

2216
01:20:04,480 --> 01:20:07,199
i refuse to actually you know

2217
01:20:07,199 --> 01:20:09,199
resolve this this conflict in this

2218
01:20:09,199 --> 01:20:11,040
negotiation i just don't do negotiation

2219
01:20:11,040 --> 01:20:12,880
it's hard-coded and you know there's

2220
01:20:12,880 --> 01:20:15,040
legal auditing and representation behind

2221
01:20:15,040 --> 01:20:17,199
it

2222
01:20:17,440 --> 01:20:19,430
thanks for that perspective

2223
01:20:19,430 --> 01:20:22,619
[Music]

2224
01:20:22,880 --> 01:20:25,520
eckhart go ahead we'll let you in

2225
01:20:25,520 --> 01:20:27,199
since you're insisting

2226
01:20:27,199 --> 01:20:30,239
well i'm insisted but on rich madrid for

2227
01:20:30,239 --> 01:20:32,400
you but the um i mean the drill down

2228
01:20:32,400 --> 01:20:33,679
case is important but when we're like

2229
01:20:33,679 --> 01:20:35,120
able to drill down based on client

2230
01:20:35,120 --> 01:20:37,360
demographics is like

2231
01:20:37,360 --> 01:20:40,320
like i can tell you is all the time um

2232
01:20:40,320 --> 01:20:41,920
and and yes you get to the point where

2233
01:20:41,920 --> 01:20:43,840
you're like hey the failure like some

2234
01:20:43,840 --> 01:20:46,400
statistic is like bizarrely high

2235
01:20:46,400 --> 01:20:48,159
on you know overall and now you want to

2236
01:20:48,159 --> 01:20:49,440
know where it is like that's like

2237
01:20:49,440 --> 01:20:51,040
absolutely important and it's not just a

2238
01:20:51,040 --> 01:20:53,520
matter of time windows but that said um

2239
01:20:53,520 --> 01:20:55,040
i think it'd be okay to like roll out

2240
01:20:55,040 --> 01:20:56,880
like certainly be okay in this version

2241
01:20:56,880 --> 01:20:58,080
of the draft and the next version of the

2242
01:20:58,080 --> 01:21:00,239
draft to only only cover a smaller set

2243
01:21:00,239 --> 01:21:02,320
of use cases um and it might even be

2244
01:21:02,320 --> 01:21:04,880
okay if we had a sensible system that um

2245
01:21:04,880 --> 01:21:07,199
allowed for drawdown later um but like

2246
01:21:07,199 --> 01:21:08,320
at the end of the day this is going to

2247
01:21:08,320 --> 01:21:09,440
be necessary for like a lot of

2248
01:21:09,440 --> 01:21:12,000
correction um cases so

2249
01:21:12,000 --> 01:21:14,560
thanks hacker um yeah i mean i it would

2250
01:21:14,560 --> 01:21:17,120
be great uh yeah um

2251
01:21:17,120 --> 01:21:19,679
given the the known unknowns i think we

2252
01:21:19,679 --> 01:21:21,280
we should try to take

2253
01:21:21,280 --> 01:21:23,520
uh as small of a step as possible i

2254
01:21:23,520 --> 01:21:25,199
think differential privacy is something

2255
01:21:25,199 --> 01:21:27,920
that we need to figure out the story of

2256
01:21:27,920 --> 01:21:30,719
uh pretty soon um i would say it's like

2257
01:21:30,719 --> 01:21:32,480
it's higher priority than other things

2258
01:21:32,480 --> 01:21:34,239
but i mean what would you say is higher

2259
01:21:34,239 --> 01:21:35,760
priority figuring out differential

2260
01:21:35,760 --> 01:21:39,360
privacy or um or drilling down at this

2261
01:21:39,360 --> 01:21:40,960
point do you have a preference

2262
01:21:40,960 --> 01:21:42,480
aren't this the same aren't this

2263
01:21:42,480 --> 01:21:44,239
connected

2264
01:21:44,239 --> 01:21:46,718
they're connected

2265
01:21:47,760 --> 01:21:49,199
yeah i think if you pick i think if you

2266
01:21:49,199 --> 01:21:51,040
just did 273 like for the next six

2267
01:21:51,040 --> 01:21:55,480
months that'd be fine so i keep it

2268
01:21:57,600 --> 01:21:58,719
sure

2269
01:21:58,719 --> 01:22:00,480
yeah no let me give you a concrete

2270
01:22:00,480 --> 01:22:02,639
example um we take measurements um

2271
01:22:02,639 --> 01:22:04,960
regularly of the fraction of of tls

2272
01:22:04,960 --> 01:22:05,920
deployments of the fraction of

2273
01:22:05,920 --> 01:22:07,520
connections that potentials

2274
01:22:07,520 --> 01:22:09,120
um and so we have a graph you can see

2275
01:22:09,120 --> 01:22:10,560
that's like you know how much how many

2276
01:22:10,560 --> 01:22:13,199
connections are https versus http and

2277
01:22:13,199 --> 01:22:14,719
like that was like up to the right until

2278
01:22:14,719 --> 01:22:16,960
about nine months ago and then for some

2279
01:22:16,960 --> 01:22:18,239
reason it started going down for the

2280
01:22:18,239 --> 01:22:19,440
world's whole

2281
01:22:19,440 --> 01:22:21,920
and so we're like what the hell

2282
01:22:21,920 --> 01:22:23,840
and so um i asked somebody to go and

2283
01:22:23,840 --> 01:22:25,199
like look and they were like let's

2284
01:22:25,199 --> 01:22:26,880
bucket by country and they discovered

2285
01:22:26,880 --> 01:22:28,239
that there was like two countries where

2286
01:22:28,239 --> 01:22:29,679
it was like they had bizarrely high

2287
01:22:29,679 --> 01:22:30,880
numbers of reports and what was going

2288
01:22:30,880 --> 01:22:32,560
down and if you remove those back it up

2289
01:22:32,560 --> 01:22:34,080
to the right so like there's a great

2290
01:22:34,080 --> 01:22:35,120
case of drill down we'd like to

2291
01:22:35,120 --> 01:22:36,159
demographic drill down to figure out

2292
01:22:36,159 --> 01:22:37,760
what's going on in a statistic and so

2293
01:22:37,760 --> 01:22:38,960
it's not you can't do it temporarily

2294
01:22:38,960 --> 01:22:40,320
you've got to do it like by the

2295
01:22:40,320 --> 01:22:43,199
demographics and so you know now again

2296
01:22:43,199 --> 01:22:44,480
we have to like we have developed

2297
01:22:44,480 --> 01:22:45,520
preserving privacy which is the

2298
01:22:45,520 --> 01:22:47,520
complicated part but like it's like and

2299
01:22:47,520 --> 01:22:48,719
that requires overstep because we're

2300
01:22:48,719 --> 01:22:50,400
pretty sampling on the same data set to

2301
01:22:50,400 --> 01:22:52,080
solve that problem and i guess if we

2302
01:22:52,080 --> 01:22:53,120
cancel that problem i guess we'll like

2303
01:22:53,120 --> 01:22:54,480
have a less useful protocol than others

2304
01:22:54,480 --> 01:22:55,760
would but like it's like a really

2305
01:22:55,760 --> 01:22:57,920
important use case we do all the time

2306
01:22:57,920 --> 01:22:59,600
chris patton do you have the guidance

2307
01:22:59,600 --> 01:23:02,239
you need on this

2308
01:23:02,639 --> 01:23:03,760
um

2309
01:23:03,760 --> 01:23:04,960
i think so

2310
01:23:04,960 --> 01:23:07,360
i think so i think uh the connection to

2311
01:23:07,360 --> 01:23:08,880
differential privacy whether

2312
01:23:08,880 --> 01:23:10,320
differential privacy is going to be

2313
01:23:10,320 --> 01:23:13,120
necessary uh or or

2314
01:23:13,120 --> 01:23:15,040
if it's sufficient or even necessary i'm

2315
01:23:15,040 --> 01:23:17,360
not sure about um but we we can we can

2316
01:23:17,360 --> 01:23:20,759
get into that

2317
01:23:23,040 --> 01:23:27,199
you are the next presenter um

2318
01:23:27,690 --> 01:23:30,320
[Music]

2319
01:23:30,320 --> 01:23:33,520
well i i just wanted to summarize my way

2320
01:23:33,520 --> 01:23:34,400
uh

2321
01:23:34,400 --> 01:23:35,679
for chris and i love to meet you as well

2322
01:23:35,679 --> 01:23:38,400
i think like addressing 273 with

2323
01:23:38,400 --> 01:23:41,520
equivalent constraints that are um

2324
01:23:41,520 --> 01:23:43,600
currently in the draft um one report

2325
01:23:43,600 --> 01:23:45,760
poor query um is a good next step for

2326
01:23:45,760 --> 01:23:47,280
the next version and then we can sort

2327
01:23:47,280 --> 01:23:48,960
out separately how we want to deal with

2328
01:23:48,960 --> 01:23:50,960
drill down and the related differential

2329
01:23:50,960 --> 01:23:52,800
privacy issue

2330
01:23:52,800 --> 01:23:54,880
perfect i'll i'm going to file an issue

2331
01:23:54,880 --> 01:23:57,199
and then i'll uh i'll start working on a

2332
01:23:57,199 --> 01:23:58,320
pr

2333
01:23:58,320 --> 01:24:02,000
to discuss thank you everybody

2334
01:24:02,000 --> 01:24:04,560
thank you chris

2335
01:24:15,679 --> 01:24:17,679
okay um

2336
01:24:17,679 --> 01:24:18,960
so uh

2337
01:24:18,960 --> 01:24:20,080
talked a lot about privacy in the

2338
01:24:20,080 --> 01:24:22,000
previous presentation specifically for

2339
01:24:22,000 --> 01:24:22,800
uh

2340
01:24:22,800 --> 01:24:25,199
uh the the colexa protocol and what that

2341
01:24:25,199 --> 01:24:28,159
means for dap so um attempt here is to

2342
01:24:28,159 --> 01:24:29,920
sort of take a step back and and try and

2343
01:24:29,920 --> 01:24:31,360
reason about what the what the threat

2344
01:24:31,360 --> 01:24:33,040
model is for dap make sure we have sort

2345
01:24:33,040 --> 01:24:34,639
of agreement there what irrelevant

2346
01:24:34,639 --> 01:24:36,080
attacks that we want to consider what

2347
01:24:36,080 --> 01:24:38,400
are possible to consider in the protocol

2348
01:24:38,400 --> 01:24:40,239
itself is like first class thing and

2349
01:24:40,239 --> 01:24:42,320
what are uh attacks that we need to sort

2350
01:24:42,320 --> 01:24:44,560
of punt to deployment specific uh

2351
01:24:44,560 --> 01:24:46,480
mitigations

2352
01:24:46,480 --> 01:24:48,480
um

2353
01:24:48,480 --> 01:24:49,679
uh

2354
01:24:49,679 --> 01:24:52,000
just a reminder um you know we just we

2355
01:24:52,000 --> 01:24:53,679
just saw this but i'm gonna i'm gonna

2356
01:24:53,679 --> 01:24:55,520
repeat it anyways the collector protocol

2357
01:24:55,520 --> 01:24:57,199
basically allows the collector to issue

2358
01:24:57,199 --> 01:25:00,320
a batch predator cut for a particular um

2359
01:25:00,320 --> 01:25:01,920
for a particular query and get an

2360
01:25:01,920 --> 01:25:03,920
aggregate result as the output um the

2361
01:25:03,920 --> 01:25:05,679
details of like what happens internally

2362
01:25:05,679 --> 01:25:08,080
are not really that important

2363
01:25:08,080 --> 01:25:09,840
beyond the the stuff that was talked

2364
01:25:09,840 --> 01:25:11,600
about in chat like the leader can choose

2365
01:25:11,600 --> 01:25:13,840
which reports correspond to a particular

2366
01:25:13,840 --> 01:25:16,719
batch that satisfy the batch predicate

2367
01:25:16,719 --> 01:25:17,920
um

2368
01:25:17,920 --> 01:25:19,199
and that relates to you know civil

2369
01:25:19,199 --> 01:25:21,120
attacks and stuffing attacks and whatnot

2370
01:25:21,120 --> 01:25:23,280
but uh at the end of the day the

2371
01:25:23,280 --> 01:25:25,120
collector issues a query with some

2372
01:25:25,120 --> 01:25:26,639
predicate and gets back and i agree

2373
01:25:26,639 --> 01:25:27,679
results

2374
01:25:27,679 --> 01:25:29,520
and the question is

2375
01:25:29,520 --> 01:25:30,719
you know what is the right way of

2376
01:25:30,719 --> 01:25:33,280
validating that batch credit kit

2377
01:25:33,280 --> 01:25:34,320
right now

2378
01:25:34,320 --> 01:25:36,400
in the draft we're extremely constrained

2379
01:25:36,400 --> 01:25:39,040
in terms of what is permitted as a valid

2380
01:25:39,040 --> 01:25:40,400
batch predicate

2381
01:25:40,400 --> 01:25:42,320
there's a number of conditions i should

2382
01:25:42,320 --> 01:25:45,199
have linked to this specific section

2383
01:25:45,199 --> 01:25:46,639
but the the first and foremost most

2384
01:25:46,639 --> 01:25:47,600
obvious one is that the number of

2385
01:25:47,600 --> 01:25:49,280
reports must be at least the min batch

2386
01:25:49,280 --> 01:25:50,560
size so you get the gain energy

2387
01:25:50,560 --> 01:25:52,000
guarantees that you want from the

2388
01:25:52,000 --> 01:25:53,040
particular

2389
01:25:53,040 --> 01:25:54,960
um instantiation of

2390
01:25:54,960 --> 01:25:55,840
dab

2391
01:25:55,840 --> 01:25:57,840
uh you have that a

2392
01:25:57,840 --> 01:26:00,080
a report has not been included more than

2393
01:26:00,080 --> 01:26:02,000
uh

2394
01:26:02,000 --> 01:26:03,520
max batch lifetime we need to change

2395
01:26:03,520 --> 01:26:05,199
that particular variable name that

2396
01:26:05,199 --> 01:26:07,120
constant name or whatever but um hasn't

2397
01:26:07,120 --> 01:26:10,000
been included in more uh reports than is

2398
01:26:10,000 --> 01:26:11,040
allowed

2399
01:26:11,040 --> 01:26:12,960
um and importantly we

2400
01:26:12,960 --> 01:26:15,679
uh to deal with intersection attacks um

2401
01:26:15,679 --> 01:26:17,040
which chris was sort of alluding to

2402
01:26:17,040 --> 01:26:19,920
previously we require that no batches

2403
01:26:19,920 --> 01:26:21,520
can intersect

2404
01:26:21,520 --> 01:26:23,280
they either have to be exactly matching

2405
01:26:23,280 --> 01:26:24,639
so two collect requests they have to

2406
01:26:24,639 --> 01:26:26,400
have the same start and end time

2407
01:26:26,400 --> 01:26:28,719
interval um or

2408
01:26:28,719 --> 01:26:30,880
they must be completely disjoint

2409
01:26:30,880 --> 01:26:32,320
otherwise the aggregators are supposed

2410
01:26:32,320 --> 01:26:34,320
to reject the leader supposed to project

2411
01:26:34,320 --> 01:26:37,760
that particular requested

2412
01:26:37,760 --> 01:26:40,400
but as noted this is not really flexible

2413
01:26:40,400 --> 01:26:41,920
it doesn't allow sort of the other use

2414
01:26:41,920 --> 01:26:43,840
cases that chris was going through in

2415
01:26:43,840 --> 01:26:45,760
particular group based

2416
01:26:45,760 --> 01:26:46,800
or

2417
01:26:46,800 --> 01:26:48,880
maybe we need a better name for that but

2418
01:26:48,880 --> 01:26:52,000
whatever more chunk-based collection um

2419
01:26:52,000 --> 01:26:53,199
and the

2420
01:26:53,199 --> 01:26:55,760
the motivation for this uh restriction

2421
01:26:55,760 --> 01:26:58,480
was uh primarily doing an abundance of

2422
01:26:58,480 --> 01:27:00,560
you know safety we wanted to make sure

2423
01:27:00,560 --> 01:27:02,560
that it was not possible to

2424
01:27:02,560 --> 01:27:05,840
interact with that in a way and

2425
01:27:05,840 --> 01:27:07,840
that could lead or compromise the

2426
01:27:07,840 --> 01:27:08,960
privacy guarantees that you want from

2427
01:27:08,960 --> 01:27:10,560
the protocol

2428
01:27:10,560 --> 01:27:12,960
and this seemed like the safest safest

2429
01:27:12,960 --> 01:27:16,560
and simplest thing to do at the time

2430
01:27:16,560 --> 01:27:18,400
i think since this landed we've had lots

2431
01:27:18,400 --> 01:27:19,679
of discussions about

2432
01:27:19,679 --> 01:27:21,120
what are

2433
01:27:21,120 --> 01:27:22,880
um what are reasonable ways to enforce

2434
01:27:22,880 --> 01:27:25,199
it uh you know the the underlying

2435
01:27:25,199 --> 01:27:27,360
fundamental requirement um ecker just

2436
01:27:27,360 --> 01:27:28,800
proposed a new one that we might move to

2437
01:27:28,800 --> 01:27:31,199
in the next version um but the gist is

2438
01:27:31,199 --> 01:27:32,800
that you know

2439
01:27:32,800 --> 01:27:34,960
we we had this huge gap we plugged the

2440
01:27:34,960 --> 01:27:36,239
gap but um

2441
01:27:36,239 --> 01:27:38,159
we plugged it with uh perhaps too big of

2442
01:27:38,159 --> 01:27:41,440
a van date or too big of a patch

2443
01:27:41,440 --> 01:27:44,800
um so it's probably worth uh you know to

2444
01:27:44,800 --> 01:27:46,320
identifying

2445
01:27:46,320 --> 01:27:48,400
towards all right let's take a step back

2446
01:27:48,400 --> 01:27:50,000
so um

2447
01:27:50,000 --> 01:27:51,760
if we wanted to identify what was sort

2448
01:27:51,760 --> 01:27:54,159
of the minimal um

2449
01:27:54,159 --> 01:27:55,679
the minimal enforcement needed to take

2450
01:27:55,679 --> 01:27:57,760
place and the minimal patch that we

2451
01:27:57,760 --> 01:27:59,840
needed to apply in order to allow dap to

2452
01:27:59,840 --> 01:28:02,719
be queried correctly it's worth like

2453
01:28:02,719 --> 01:28:05,360
taking a step back and looking at

2454
01:28:05,360 --> 01:28:08,320
what dap is doing under the hood um

2455
01:28:08,320 --> 01:28:10,400
so chris already

2456
01:28:10,400 --> 01:28:12,639
already mentioned this

2457
01:28:12,639 --> 01:28:14,800
but dap is a multi-party computation

2458
01:28:14,800 --> 01:28:17,199
protocol um it computes some aggregate

2459
01:28:17,199 --> 01:28:20,400
function f uh that is parameterized by a

2460
01:28:20,400 --> 01:28:21,840
query in this particular case that's

2461
01:28:21,840 --> 01:28:23,600
provided by the collector and then a

2462
01:28:23,600 --> 01:28:25,199
bunch of inputs a bunch of plain inputs

2463
01:28:25,199 --> 01:28:28,239
x one all the way to x i whatever all

2464
01:28:28,239 --> 01:28:30,320
these inputs get fed in

2465
01:28:30,320 --> 01:28:32,639
collector issues a query and gets an

2466
01:28:32,639 --> 01:28:34,159
aggregate as output

2467
01:28:34,159 --> 01:28:36,880
and the uh privacy goal that we want is

2468
01:28:36,880 --> 01:28:39,280
that the aggregate output does not leak

2469
01:28:39,280 --> 01:28:40,880
anything more

2470
01:28:40,880 --> 01:28:43,360
beyond the aggregate itself

2471
01:28:43,360 --> 01:28:46,639
so in particular the person who views or

2472
01:28:46,639 --> 01:28:48,880
is able to interactively and adaptively

2473
01:28:48,880 --> 01:28:50,880
query the system and get aggregates

2474
01:28:50,880 --> 01:28:52,560
doesn't learn anything about honest

2475
01:28:52,560 --> 01:28:55,199
client inputs

2476
01:28:55,199 --> 01:28:57,760
beyond the aggregate that is computed

2477
01:28:57,760 --> 01:28:59,840
based on those honest client inputs

2478
01:28:59,840 --> 01:29:01,679
so as chris said sort of that means you

2479
01:29:01,679 --> 01:29:03,920
want the batchman batch size to be high

2480
01:29:03,920 --> 01:29:06,159
uh higher the better for more privacy um

2481
01:29:06,159 --> 01:29:07,920
it's an application specific parameter

2482
01:29:07,920 --> 01:29:10,080
or a deployment specific parameter but

2483
01:29:10,080 --> 01:29:12,320
um that this isn't sort of intuitively

2484
01:29:12,320 --> 01:29:15,040
or fundamentally sort of the privacy

2485
01:29:15,040 --> 01:29:15,840
uh

2486
01:29:15,840 --> 01:29:19,520
definition for for dap

2487
01:29:19,520 --> 01:29:21,280
the threat model that we consider as a

2488
01:29:21,280 --> 01:29:23,520
reminder um for privacy not for

2489
01:29:23,520 --> 01:29:26,080
robustness is that there's some fraction

2490
01:29:26,080 --> 01:29:27,760
of clients that are assumed to be

2491
01:29:27,760 --> 01:29:30,080
malicious um and others that are assumed

2492
01:29:30,080 --> 01:29:32,080
to be honest so if ever every client was

2493
01:29:32,080 --> 01:29:33,920
malicious uh the system wouldn't really

2494
01:29:33,920 --> 01:29:35,520
make sense so you assume you have some

2495
01:29:35,520 --> 01:29:36,560
number of honest clients that are

2496
01:29:36,560 --> 01:29:37,600
contributing to the protocol

2497
01:29:37,600 --> 01:29:41,520
contributing to individual aggregates

2498
01:29:41,520 --> 01:29:43,280
and the number of malicious

2499
01:29:43,280 --> 01:29:45,280
entities are bounded

2500
01:29:45,280 --> 01:29:48,719
all of one of the aggregators are honest

2501
01:29:48,719 --> 01:29:52,239
uh or dishonest rather um

2502
01:29:52,239 --> 01:29:54,639
so we assume that every single there's

2503
01:29:54,639 --> 01:29:56,719
at least one honest aggregator that is

2504
01:29:56,719 --> 01:29:58,480
you know implementing and abiding by the

2505
01:29:58,480 --> 01:30:00,880
protocol as as specified

2506
01:30:00,880 --> 01:30:02,000
um

2507
01:30:02,000 --> 01:30:04,880
and everything else is malicious

2508
01:30:04,880 --> 01:30:07,360
and we also assume that the collector is

2509
01:30:07,360 --> 01:30:09,760
malicious from the purposes are from

2510
01:30:09,760 --> 01:30:11,360
from the perspective of actually

2511
01:30:11,360 --> 01:30:14,000
interacting with the system uh

2512
01:30:14,000 --> 01:30:16,719
as it adaptively queries it um this is

2513
01:30:16,719 --> 01:30:18,480
kind of interesting because you know in

2514
01:30:18,480 --> 01:30:20,000
practice i guess we

2515
01:30:20,000 --> 01:30:21,600
in practice i

2516
01:30:21,600 --> 01:30:23,280
can see you know scenarios where the

2517
01:30:23,280 --> 01:30:24,239
collector is the one actually

2518
01:30:24,239 --> 01:30:25,920
configuring the system deciding whether

2519
01:30:25,920 --> 01:30:27,760
or not to use dapp in the first place so

2520
01:30:27,760 --> 01:30:29,679
a malicious collector could just easily

2521
01:30:29,679 --> 01:30:32,159
not use that or you know configure the

2522
01:30:32,159 --> 01:30:33,679
system with parameters that are pretty

2523
01:30:33,679 --> 01:30:34,639
awful

2524
01:30:34,639 --> 01:30:36,400
um but we're sort of assuming that you

2525
01:30:36,400 --> 01:30:38,960
know that was done in an honest way

2526
01:30:38,960 --> 01:30:40,800
clients are actively or we're configured

2527
01:30:40,800 --> 01:30:42,560
with good parameters

2528
01:30:42,560 --> 01:30:45,199
and we're configured with um

2529
01:30:45,199 --> 01:30:47,120
or are actually using dap and we want to

2530
01:30:47,120 --> 01:30:48,480
protect against now a collector that

2531
01:30:48,480 --> 01:30:51,199
wants to subvert this honest bootstrap

2532
01:30:51,199 --> 01:30:52,800
or an honest configuration for the

2533
01:30:52,800 --> 01:30:54,320
purposes of learning individual

2534
01:30:54,320 --> 01:30:56,400
information about client inputs

2535
01:30:56,400 --> 01:30:58,480
um and as noted at the bottom the

2536
01:30:58,480 --> 01:30:59,840
robustness start model is different

2537
01:30:59,840 --> 01:31:01,440
which assume it does assume that all

2538
01:31:01,440 --> 01:31:04,719
aggregators are honest

2539
01:31:05,199 --> 01:31:07,920
okay um so there are a number of tacks

2540
01:31:07,920 --> 01:31:08,800
that

2541
01:31:08,800 --> 01:31:10,800
we've already identified and that we

2542
01:31:10,800 --> 01:31:11,600
have

2543
01:31:11,600 --> 01:31:13,280
either text in the document to deal with

2544
01:31:13,280 --> 01:31:15,600
or open issues to address the first of

2545
01:31:15,600 --> 01:31:17,440
which is a stopping attack um your

2546
01:31:17,440 --> 01:31:19,360
classic civil attack wherein uh the

2547
01:31:19,360 --> 01:31:20,800
attacker which could be either a

2548
01:31:20,800 --> 01:31:22,239
combination of leader helper or

2549
01:31:22,239 --> 01:31:24,719
compromised clients is injecting things

2550
01:31:24,719 --> 01:31:26,800
into the system into the aggregate to

2551
01:31:26,800 --> 01:31:29,679
basically skew the result and allow

2552
01:31:29,679 --> 01:31:31,360
allow the attacker to learn information

2553
01:31:31,360 --> 01:31:33,199
about an individual client inputs so in

2554
01:31:33,199 --> 01:31:36,719
this example we have all but one of the

2555
01:31:36,719 --> 01:31:38,080
clients contributing to a particular

2556
01:31:38,080 --> 01:31:40,159
aggregate are malicious and the honest

2557
01:31:40,159 --> 01:31:41,920
collector is

2558
01:31:41,920 --> 01:31:43,360
or the honest client is submitting its

2559
01:31:43,360 --> 01:31:44,480
honest value

2560
01:31:44,480 --> 01:31:45,840
it would be very easy for someone

2561
01:31:45,840 --> 01:31:47,040
looking at the aggregate to determine

2562
01:31:47,040 --> 01:31:48,960
what this honest input was

2563
01:31:48,960 --> 01:31:50,320
which is obviously something we want to

2564
01:31:50,320 --> 01:31:52,480
protect against in in actual deployments

2565
01:31:52,480 --> 01:31:54,959
of the system

2566
01:31:55,199 --> 01:31:56,960
it's also um

2567
01:31:56,960 --> 01:31:59,040
i'm calling like an over sampling attack

2568
01:31:59,040 --> 01:32:00,480
um in the differential pharmacy

2569
01:32:00,480 --> 01:32:02,239
literature it's like uh continual

2570
01:32:02,239 --> 01:32:04,880
release up to exposure um or i don't

2571
01:32:04,880 --> 01:32:06,239
know maybe that's not the correct

2572
01:32:06,239 --> 01:32:08,000
technical term but basically the idea is

2573
01:32:08,000 --> 01:32:10,159
like you have clients that are uh

2574
01:32:10,159 --> 01:32:12,400
contributing honest inputs over and over

2575
01:32:12,400 --> 01:32:14,159
and over again up to a point where

2576
01:32:14,159 --> 01:32:16,159
they've revealed or contributed that

2577
01:32:16,159 --> 01:32:19,199
input too many times and have sort of

2578
01:32:19,199 --> 01:32:21,199
uh it's been

2579
01:32:21,199 --> 01:32:23,600
folded into an aggregate and the the

2580
01:32:23,600 --> 01:32:25,120
intersection of the combination of those

2581
01:32:25,120 --> 01:32:26,719
aggregates therefore reveals information

2582
01:32:26,719 --> 01:32:30,719
about the honest client's input um so in

2583
01:32:30,719 --> 01:32:33,280
the the sketch here i have like multiple

2584
01:32:33,280 --> 01:32:35,760
instantiate or multiple runs of the

2585
01:32:35,760 --> 01:32:37,520
aggregation function f

2586
01:32:37,520 --> 01:32:39,920
uh the honest client x one is

2587
01:32:39,920 --> 01:32:41,600
contributing at the same value each time

2588
01:32:41,600 --> 01:32:43,360
but every other client is contributing a

2589
01:32:43,360 --> 01:32:45,840
different value um uh maybe either

2590
01:32:45,840 --> 01:32:48,719
honestly or maybe maliciously um so this

2591
01:32:48,719 --> 01:32:50,239
is kind of related to the stuffing tax

2592
01:32:50,239 --> 01:32:52,400
but kind of different in that it depends

2593
01:32:52,400 --> 01:32:54,400
on how you're using tap

2594
01:32:54,400 --> 01:32:56,080
and specifically

2595
01:32:56,080 --> 01:32:58,080
what you're using gap to measure as an

2596
01:32:58,080 --> 01:33:00,639
aggregate

2597
01:33:00,800 --> 01:33:04,960
so this is i think important to consider

2598
01:33:04,960 --> 01:33:08,080
the other attack which is um referred to

2599
01:33:08,080 --> 01:33:10,880
as an intersection attack uh

2600
01:33:10,880 --> 01:33:13,520
was also discussed um as uh in the

2601
01:33:13,520 --> 01:33:15,440
previous presentation which is why we

2602
01:33:15,440 --> 01:33:18,480
have the sort of very restricted

2603
01:33:18,480 --> 01:33:21,920
uh query uh batch or the batch predicate

2604
01:33:21,920 --> 01:33:23,920
enforcement right now it's where the

2605
01:33:23,920 --> 01:33:26,320
collector is adaptively querying the

2606
01:33:26,320 --> 01:33:28,159
system with different query parameters

2607
01:33:28,159 --> 01:33:30,159
trying to like yield different

2608
01:33:30,159 --> 01:33:33,679
aggregates that may have uh overlapping

2609
01:33:33,679 --> 01:33:35,679
underlying batches and then using the

2610
01:33:35,679 --> 01:33:38,639
aggregate results to compute

2611
01:33:38,639 --> 01:33:40,960
some you know some aggregate that is

2612
01:33:40,960 --> 01:33:43,280
based on less than min batch size client

2613
01:33:43,280 --> 01:33:45,040
inputs which is a violation of the

2614
01:33:45,040 --> 01:33:47,440
privacy goal or definition that i sort

2615
01:33:47,440 --> 01:33:50,320
of sketched out earlier

2616
01:33:50,320 --> 01:33:52,159
the current query enforcement mechanism

2617
01:33:52,159 --> 01:33:53,760
does not prohib or does not allow this

2618
01:33:53,760 --> 01:33:55,040
because it ensures that every single

2619
01:33:55,040 --> 01:33:56,880
query must be disjoint or exactly the

2620
01:33:56,880 --> 01:33:58,080
same

2621
01:33:58,080 --> 01:34:00,239
but this is obviously

2622
01:34:00,239 --> 01:34:02,560
i think something we want to

2623
01:34:02,560 --> 01:34:05,840
protect against

2624
01:34:06,480 --> 01:34:09,440
um okay so uh i don't know if this list

2625
01:34:09,440 --> 01:34:10,960
is exhaustive in fact that's one of the

2626
01:34:10,960 --> 01:34:12,239
questions for the group like have we

2627
01:34:12,239 --> 01:34:14,159
sufficiently identified you know all the

2628
01:34:14,159 --> 01:34:15,880
relevant problems for

2629
01:34:15,880 --> 01:34:19,920
a privacy relevant problems for dap um

2630
01:34:19,920 --> 01:34:21,199
but the question

2631
01:34:21,199 --> 01:34:22,400
that we're asking ourselves now is you

2632
01:34:22,400 --> 01:34:24,560
know what are reasonable mitigations for

2633
01:34:24,560 --> 01:34:26,159
these particular issues

2634
01:34:26,159 --> 01:34:29,679
uh so a stuffing attack as an example uh

2635
01:34:29,679 --> 01:34:30,960
it might be reasonable to say that this

2636
01:34:30,960 --> 01:34:33,600
is a very deployment specific problem um

2637
01:34:33,600 --> 01:34:35,040
that you could deal with if you had for

2638
01:34:35,040 --> 01:34:37,199
example client authentication that

2639
01:34:37,199 --> 01:34:39,280
ensured that every single client input

2640
01:34:39,280 --> 01:34:41,840
was honest and not maliciously generated

2641
01:34:41,840 --> 01:34:43,520
you could address it with some

2642
01:34:43,520 --> 01:34:45,360
application of different privacy local

2643
01:34:45,360 --> 01:34:47,119
or central or otherwise

2644
01:34:47,119 --> 01:34:49,679
um i think it kind of depends on you

2645
01:34:49,679 --> 01:34:51,840
know the specific deployment and i don't

2646
01:34:51,840 --> 01:34:54,320
know to what extent dap wants to mandate

2647
01:34:54,320 --> 01:34:56,400
to require anything um about dealing

2648
01:34:56,400 --> 01:34:58,159
with this particular problem

2649
01:34:58,159 --> 01:34:59,520
and the same goes for oversampling as

2650
01:34:59,520 --> 01:35:00,880
well because that's very closely

2651
01:35:00,880 --> 01:35:04,159
adjacent uh to uh the stuffing in civil

2652
01:35:04,159 --> 01:35:05,440
attack

2653
01:35:05,440 --> 01:35:07,280
the intersection attack however we can

2654
01:35:07,280 --> 01:35:09,600
deal with in the protocol in fact we do

2655
01:35:09,600 --> 01:35:11,600
deal with in the protocol right now but

2656
01:35:11,600 --> 01:35:12,719
it's uh

2657
01:35:12,719 --> 01:35:16,400
as 273 or issue 273 sort of uh talks

2658
01:35:16,400 --> 01:35:19,360
about it's um it's not it can be

2659
01:35:19,360 --> 01:35:20,639
improved and

2660
01:35:20,639 --> 01:35:23,679
and we aim to do that

2661
01:35:24,800 --> 01:35:26,159
okay um

2662
01:35:26,159 --> 01:35:28,239
so uh

2663
01:35:28,239 --> 01:35:30,080
we i mean we kind of already talked

2664
01:35:30,080 --> 01:35:31,520
about this fortunately in the previous

2665
01:35:31,520 --> 01:35:33,440
presentation so uh and we kind of have

2666
01:35:33,440 --> 01:35:34,800
like a proposed solution for moving

2667
01:35:34,800 --> 01:35:36,960
forward but um so this slide was meant

2668
01:35:36,960 --> 01:35:38,560
to say like we're trying to ask the

2669
01:35:38,560 --> 01:35:39,760
question what is the fundamental

2670
01:35:39,760 --> 01:35:41,760
requirement that we have for mitigating

2671
01:35:41,760 --> 01:35:43,199
intersection attacks

2672
01:35:43,199 --> 01:35:45,920
um and the informal goal is to basically

2673
01:35:45,920 --> 01:35:47,520
not allow you know the privacy

2674
01:35:47,520 --> 01:35:49,040
definition that we described earlier to

2675
01:35:49,040 --> 01:35:50,960
be violated so all aggregates are based

2676
01:35:50,960 --> 01:35:52,639
on the minimum batch size

2677
01:35:52,639 --> 01:35:54,719
um and the enforcement is to basically

2678
01:35:54,719 --> 01:35:56,800
ensure that uh you know every single

2679
01:35:56,800 --> 01:36:00,000
report contributes to um uh some number

2680
01:36:00,000 --> 01:36:01,840
of uh or exactly one query in this

2681
01:36:01,840 --> 01:36:03,600
particular case as we were as we were

2682
01:36:03,600 --> 01:36:05,440
describing um

2683
01:36:05,440 --> 01:36:06,560
and uh

2684
01:36:06,560 --> 01:36:07,600
the the

2685
01:36:07,600 --> 01:36:09,440
question that was raised previously was

2686
01:36:09,440 --> 01:36:10,960
you know what is uh

2687
01:36:10,960 --> 01:36:12,320
what is a reasonable way for expressing

2688
01:36:12,320 --> 01:36:13,600
queries such that this price equals

2689
01:36:13,600 --> 01:36:14,960
meant but i think like the the

2690
01:36:14,960 --> 01:36:16,719
conclusion that we reached was

2691
01:36:16,719 --> 01:36:18,080
you know maybe don't

2692
01:36:18,080 --> 01:36:20,000
uh constrain ourselves with how we

2693
01:36:20,000 --> 01:36:21,520
express queries just

2694
01:36:21,520 --> 01:36:23,760
enforce the fundamental invariant for

2695
01:36:23,760 --> 01:36:26,000
query validation or batch predicate

2696
01:36:26,000 --> 01:36:27,840
validation and allow whatever sort of

2697
01:36:27,840 --> 01:36:29,520
queries make sense in the time being and

2698
01:36:29,520 --> 01:36:30,880
separately we can figure out what the

2699
01:36:30,880 --> 01:36:32,960
drill-down solution would be

2700
01:36:32,960 --> 01:36:33,760
um

2701
01:36:33,760 --> 01:36:35,360
yeah dkg but

2702
01:36:35,360 --> 01:36:37,280
i assume now's a good time to take

2703
01:36:37,280 --> 01:36:39,840
questions

2704
01:36:42,880 --> 01:36:44,719
so i'm thinking about these underlying

2705
01:36:44,719 --> 01:36:45,600
uh

2706
01:36:45,600 --> 01:36:47,520
constraints right that that echo

2707
01:36:47,520 --> 01:36:52,000
proposed in the previous talk um yeah um

2708
01:36:52,000 --> 01:36:53,520
sorry there's there's also

2709
01:36:53,520 --> 01:36:56,400
something on a few slides back that

2710
01:36:56,400 --> 01:36:57,920
uh i just don't want to go into the

2711
01:36:57,920 --> 01:37:00,239
record if it wasn't if it was miswritten

2712
01:37:00,239 --> 01:37:01,840
and you might want to update the slides

2713
01:37:01,840 --> 01:37:04,000
or maybe it's right and i'm confused one

2714
01:37:04,000 --> 01:37:07,440
more back one more back that one all but

2715
01:37:07,440 --> 01:37:09,920
one of the aggregators is honest

2716
01:37:09,920 --> 01:37:12,159
yeah i i realized that was wrong as i

2717
01:37:12,159 --> 01:37:13,920
was saying it out loud so there's a typo

2718
01:37:13,920 --> 01:37:16,960
here okay yeah please update the slides

2719
01:37:16,960 --> 01:37:19,679
um in in whatever archive we have i just

2720
01:37:19,679 --> 01:37:22,320
want to just make that should be

2721
01:37:22,320 --> 01:37:24,639
at most uh at least one of the

2722
01:37:24,639 --> 01:37:26,719
aggregated zones right yes okay just

2723
01:37:26,719 --> 01:37:28,880
wanted to put that in on the record okay

2724
01:37:28,880 --> 01:37:30,800
we can go back

2725
01:37:30,800 --> 01:37:32,080
um

2726
01:37:32,080 --> 01:37:35,719
the um

2727
01:37:36,159 --> 01:37:37,920
in the situation where everyone submits

2728
01:37:37,920 --> 01:37:40,159
one report on their own

2729
01:37:40,159 --> 01:37:41,920
then the types of constraints that ecker

2730
01:37:41,920 --> 01:37:44,080
was describing sound pretty plausible to

2731
01:37:44,080 --> 01:37:45,600
me i mean i don't have a clear analysis

2732
01:37:45,600 --> 01:37:48,400
of it exactly i don't know for sure but

2733
01:37:48,400 --> 01:37:51,440
if we say you can only use each report

2734
01:37:51,440 --> 01:37:53,040
in one query

2735
01:37:53,040 --> 01:37:55,360
uh and each query needs a reasonable

2736
01:37:55,360 --> 01:37:56,880
size batch

2737
01:37:56,880 --> 01:37:59,920
then i'm fairly confident about those

2738
01:37:59,920 --> 01:38:01,280
protections

2739
01:38:01,280 --> 01:38:03,360
in the event that each

2740
01:38:03,360 --> 01:38:05,840
client might report more than one more

2741
01:38:05,840 --> 01:38:08,480
than once over time

2742
01:38:08,480 --> 01:38:11,520
i am much less confident in that defense

2743
01:38:11,520 --> 01:38:14,000
in the event that the client's

2744
01:38:14,000 --> 01:38:15,600
reports

2745
01:38:15,600 --> 01:38:19,199
might themselves be aggregatable um

2746
01:38:19,199 --> 01:38:20,960
then i don't know how we i don't know

2747
01:38:20,960 --> 01:38:22,719
how to evaluate this

2748
01:38:22,719 --> 01:38:24,400
so yeah i mean the same thing with a lot

2749
01:38:24,400 --> 01:38:26,080
of differential privacy questions right

2750
01:38:26,080 --> 01:38:27,920
right you know yes if everybody's doing

2751
01:38:27,920 --> 01:38:29,360
it once it's fine but then once you

2752
01:38:29,360 --> 01:38:30,800
think about it over time and you don't

2753
01:38:30,800 --> 01:38:32,320
know what the aggregation possibilities

2754
01:38:32,320 --> 01:38:33,040
are

2755
01:38:33,040 --> 01:38:35,600
it's a lot harder to evaluate

2756
01:38:35,600 --> 01:38:37,600
yeah i was chatting with martin thompson

2757
01:38:37,600 --> 01:38:38,639
about this earlier in the week in the

2758
01:38:38,639 --> 01:38:41,360
concept of ipa um this is fundamentally

2759
01:38:41,360 --> 01:38:43,360
related to the the concept of like over

2760
01:38:43,360 --> 01:38:45,119
release or continual release in that in

2761
01:38:45,119 --> 01:38:47,360
that setting um it's not clear like what

2762
01:38:47,360 --> 01:38:48,400
is the best way to deal with some

2763
01:38:48,400 --> 01:38:50,719
practice like you do on the client

2764
01:38:50,719 --> 01:38:52,159
collector side you bound the number of

2765
01:38:52,159 --> 01:38:53,840
times a given client can contribute its

2766
01:38:53,840 --> 01:38:56,400
input across different aggregations or

2767
01:38:56,400 --> 01:38:59,119
different tasks um

2768
01:38:59,119 --> 01:39:01,040
i so i don't i don't know the answer

2769
01:39:01,040 --> 01:39:03,520
there or the best answer there but i i

2770
01:39:03,520 --> 01:39:05,440
agree that the current query enforcement

2771
01:39:05,440 --> 01:39:06,639
mechanism and even the one that was

2772
01:39:06,639 --> 01:39:09,119
proposed is only helpful in the context

2773
01:39:09,119 --> 01:39:12,000
of a given a single like aggregate or a

2774
01:39:12,000 --> 01:39:14,000
single task rather

2775
01:39:14,000 --> 01:39:16,719
it does not consider like leakage that

2776
01:39:16,719 --> 01:39:19,440
might occur across tasks that have as

2777
01:39:19,440 --> 01:39:22,960
input the same client

2778
01:39:24,840 --> 01:39:27,360
values yeah go ahead

2779
01:39:27,360 --> 01:39:28,719
yeah um

2780
01:39:28,719 --> 01:39:29,840
so

2781
01:39:29,840 --> 01:39:32,960
just just to that point first um

2782
01:39:32,960 --> 01:39:34,560
i believe that actually do anything

2783
01:39:34,560 --> 01:39:36,560
about that um

2784
01:39:36,560 --> 01:39:37,760
sorry

2785
01:39:37,760 --> 01:39:39,360
another constraint the claims are

2786
01:39:39,360 --> 01:39:41,040
continuously reporting i suppose to the

2787
01:39:41,040 --> 01:39:42,719
clients you know report only a small

2788
01:39:42,719 --> 01:39:44,880
number of times i don't need any way to

2789
01:39:44,880 --> 01:39:46,560
do anything about that that doesn't also

2790
01:39:46,560 --> 01:39:47,520
require

2791
01:39:47,520 --> 01:39:48,480
um

2792
01:39:48,480 --> 01:39:50,080
uh some some sort of reasonably strong

2793
01:39:50,080 --> 01:39:52,560
client identification um like if you do

2794
01:39:52,560 --> 01:39:53,840
know if you don't miss the clients

2795
01:39:53,840 --> 01:39:55,520
obviously there's no way to person say

2796
01:39:55,520 --> 01:39:57,040
that you can't bucket up all the clients

2797
01:39:57,040 --> 01:39:58,880
you know you know other clients over a

2798
01:39:58,880 --> 01:40:00,320
month right um

2799
01:40:00,320 --> 01:40:02,320
so um so i'm not sure i'm like i don't

2800
01:40:02,320 --> 01:40:03,520
have fix but that's like that's my

2801
01:40:03,520 --> 01:40:07,040
initial observation um the second is um

2802
01:40:07,040 --> 01:40:09,280
you know the version that the constraint

2803
01:40:09,280 --> 01:40:11,520
the dkg just suggested which is to say

2804
01:40:11,520 --> 01:40:13,600
you know one query per submission and

2805
01:40:13,600 --> 01:40:16,159
you know um and no submission maybe and

2806
01:40:16,159 --> 01:40:17,920
no no batch size is more than n it's

2807
01:40:17,920 --> 01:40:20,800
like playing an easy mode right um and

2808
01:40:20,800 --> 01:40:23,679
um the and i guess i don't

2809
01:40:23,679 --> 01:40:25,360
i don't actually know

2810
01:40:25,360 --> 01:40:27,119
whether there's an algorithm

2811
01:40:27,119 --> 01:40:29,119
that provides the variant you describe

2812
01:40:29,119 --> 01:40:30,719
up there informally

2813
01:40:30,719 --> 01:40:32,080
given a

2814
01:40:32,080 --> 01:40:34,080
like if you just give me the you know

2815
01:40:34,080 --> 01:40:36,400
the matrix of like which queries are in

2816
01:40:36,400 --> 01:40:37,920
which batches

2817
01:40:37,920 --> 01:40:39,520
um i actually don't know if there's an

2818
01:40:39,520 --> 01:40:40,960
efficient algorithm to determine whether

2819
01:40:40,960 --> 01:40:43,199
it conforms to this requirement um yeah

2820
01:40:43,199 --> 01:40:45,520
maybe you do know but i don't know do

2821
01:40:45,520 --> 01:40:46,800
you know no i don't think i don't think

2822
01:40:46,800 --> 01:40:48,719
we have one either um and this is

2823
01:40:48,719 --> 01:40:49,760
something we were talking about with

2824
01:40:49,760 --> 01:40:52,400
some folks in the slack channel um

2825
01:40:52,400 --> 01:40:54,880
about uh especially as you start adding

2826
01:40:54,880 --> 01:40:57,199
like multiple dimensions to how you uh

2827
01:40:57,199 --> 01:40:59,119
express certain queries how do you

2828
01:40:59,119 --> 01:41:01,199
enforce this like non-overlapping well

2829
01:41:01,199 --> 01:41:02,000
i'm actually suggesting something

2830
01:41:02,000 --> 01:41:04,159
different i'm saying give me for each

2831
01:41:04,159 --> 01:41:05,679
query give me the list of submissions

2832
01:41:05,679 --> 01:41:07,600
involved in a query

2833
01:41:07,600 --> 01:41:09,280
like in normal form rather than like you

2834
01:41:09,280 --> 01:41:10,719
know in enumerated form rather than

2835
01:41:10,719 --> 01:41:13,040
rather than degenerative form and can

2836
01:41:13,040 --> 01:41:14,480
you simply determine the term validity

2837
01:41:14,480 --> 01:41:17,119
of this of this constraint right um

2838
01:41:17,119 --> 01:41:19,119
and if we had an algorithm like i guess

2839
01:41:19,119 --> 01:41:20,480
where i'm going with this i think i sort

2840
01:41:20,480 --> 01:41:22,320
of indicated earlier right is that i

2841
01:41:22,320 --> 01:41:23,600
think the easiest way to do whatever we

2842
01:41:23,600 --> 01:41:24,320
do

2843
01:41:24,320 --> 01:41:26,639
is going to be to require the

2844
01:41:26,639 --> 01:41:28,800
um to require the

2845
01:41:28,800 --> 01:41:31,199
uh the servers to maintain an inventory

2846
01:41:31,199 --> 01:41:33,119
of exactly which queries each client was

2847
01:41:33,119 --> 01:41:34,639
involved in and then to prescribe an

2848
01:41:34,639 --> 01:41:37,199
algorithm that determines whether with

2849
01:41:37,199 --> 01:41:39,360
the m plus one query is a valid query

2850
01:41:39,360 --> 01:41:41,840
based on the previous end queries and it

2851
01:41:41,840 --> 01:41:43,040
doesn't require it doesn't say anything

2852
01:41:43,040 --> 01:41:44,159
that other queries are expressed because

2853
01:41:44,159 --> 01:41:45,600
the query because thing that the server

2854
01:41:45,600 --> 01:41:47,199
is required to express is membership in

2855
01:41:47,199 --> 01:41:49,679
that query membership right so and so i

2856
01:41:49,679 --> 01:41:50,800
think that then

2857
01:41:50,800 --> 01:41:52,880
if we had that then we'd be able for the

2858
01:41:52,880 --> 01:41:54,480
case of this to ask the simple this like

2859
01:41:54,480 --> 01:41:56,320
math question of like is there a way is

2860
01:41:56,320 --> 01:41:58,560
an algorithm for looking at a matrix and

2861
01:41:58,560 --> 01:42:00,320
terminating conformance right um and i

2862
01:42:00,320 --> 01:42:02,159
suspect there is um but i just like i

2863
01:42:02,159 --> 01:42:03,119
don't know because like i'm not a math

2864
01:42:03,119 --> 01:42:04,320
guy

2865
01:42:04,320 --> 01:42:06,320
yeah i mean i think the the thinking

2866
01:42:06,320 --> 01:42:07,520
that i have right now is that each

2867
01:42:07,520 --> 01:42:09,520
aggregate mark reports uh that

2868
01:42:09,520 --> 01:42:11,520
contributed to batches is dirty or not

2869
01:42:11,520 --> 01:42:12,480
based on whether or not they were

2870
01:42:12,480 --> 01:42:14,000
included in particular queries and then

2871
01:42:14,000 --> 01:42:15,520
we would express

2872
01:42:15,520 --> 01:42:18,159
the enforcement criteria based on like

2873
01:42:18,159 --> 01:42:20,320
that dirty bit for every single report

2874
01:42:20,320 --> 01:42:21,520
um

2875
01:42:21,520 --> 01:42:23,679
uh that seems like the simplest thing

2876
01:42:23,679 --> 01:42:24,880
right now

2877
01:42:24,880 --> 01:42:27,199
but i i agree as written i don't see an

2878
01:42:27,199 --> 01:42:29,760
obvious algorithm but the

2879
01:42:29,760 --> 01:42:31,119
the simpler one that i think you're

2880
01:42:31,119 --> 01:42:33,040
describing just makes sense

2881
01:42:33,040 --> 01:42:35,280
chris

2882
01:42:37,360 --> 01:42:40,239
we can find a solution um i think i

2883
01:42:40,239 --> 01:42:42,960
would like to be able to

2884
01:42:42,960 --> 01:42:44,800
can you you uh

2885
01:42:44,800 --> 01:42:45,679
can you

2886
01:42:45,679 --> 01:42:47,280
start over like there's you're cut off

2887
01:42:47,280 --> 01:42:48,800
at the beginning yeah

2888
01:42:48,800 --> 01:42:49,760
um

2889
01:42:49,760 --> 01:42:52,000
i i also don't have a solution for this

2890
01:42:52,000 --> 01:42:53,520
but i i

2891
01:42:53,520 --> 01:42:55,360
i suspect like we've been thinking about

2892
01:42:55,360 --> 01:42:56,560
this uh

2893
01:42:56,560 --> 01:42:57,520
at

2894
01:42:57,520 --> 01:42:59,119
on my team for a little while and i

2895
01:42:59,119 --> 01:43:00,719
think i'm a little more confident that

2896
01:43:00,719 --> 01:43:03,600
we can find a solution um

2897
01:43:03,600 --> 01:43:05,760
but yeah so so i i don't think we should

2898
01:43:05,760 --> 01:43:07,440
rule anything in or out at this point

2899
01:43:07,440 --> 01:43:10,879
but uh just work on the problem

2900
01:43:11,679 --> 01:43:13,520
uh one i actually wanted to add

2901
01:43:13,520 --> 01:43:15,760
something um

2902
01:43:15,760 --> 01:43:17,280
for folks interested in working on

2903
01:43:17,280 --> 01:43:19,840
differential privacy um we are

2904
01:43:19,840 --> 01:43:20,800
definitely gonna have to make

2905
01:43:20,800 --> 01:43:23,679
accommodations in the dap spec itself

2906
01:43:23,679 --> 01:43:25,920
but over in the cfrg

2907
01:43:25,920 --> 01:43:28,639
uh we have uh we're

2908
01:43:28,639 --> 01:43:30,320
we think that we're going to need to say

2909
01:43:30,320 --> 01:43:32,480
something in the vdef vdf document

2910
01:43:32,480 --> 01:43:35,520
itself about how to how to compose

2911
01:43:35,520 --> 01:43:37,840
differential privacy so if anyone has

2912
01:43:37,840 --> 01:43:39,360
expertise there

2913
01:43:39,360 --> 01:43:41,040
and wants to contribute we would love to

2914
01:43:41,040 --> 01:43:44,159
have your help on the vdf document

2915
01:43:44,159 --> 01:43:46,960
and that's all i got

2916
01:43:48,719 --> 01:43:50,000
okay cool

2917
01:43:50,000 --> 01:43:51,360
thank you

2918
01:43:51,360 --> 01:43:53,440
um

2919
01:43:53,440 --> 01:43:55,360
all right so uh just to kind of wrap up

2920
01:43:55,360 --> 01:43:57,840
uh i wanted to circle back to the the

2921
01:43:57,840 --> 01:43:59,440
high level questions that i was trying

2922
01:43:59,440 --> 01:44:02,480
to identify and um uh hopefully get some

2923
01:44:02,480 --> 01:44:03,840
discussion around

2924
01:44:03,840 --> 01:44:04,800
um

2925
01:44:04,800 --> 01:44:06,719
first i guess is the threat model clear

2926
01:44:06,719 --> 01:44:08,639
with the you know the edit that dkg

2927
01:44:08,639 --> 01:44:09,840
pointed out and that we discovered

2928
01:44:09,840 --> 01:44:11,600
during uh presenting it

2929
01:44:11,600 --> 01:44:13,920
um second of which is are there attacks

2930
01:44:13,920 --> 01:44:16,560
that we're actively not considering um

2931
01:44:16,560 --> 01:44:19,119
uh or just not considering not actively

2932
01:44:19,119 --> 01:44:20,960
um that we we think we should address

2933
01:44:20,960 --> 01:44:22,639
either as first class sort of citizens

2934
01:44:22,639 --> 01:44:25,760
in the protocol itself or um

2935
01:44:25,760 --> 01:44:27,760
or as you know

2936
01:44:27,760 --> 01:44:31,119
a deployment specific uh thing

2937
01:44:31,119 --> 01:44:32,320
and the

2938
01:44:32,320 --> 01:44:34,560
third one uh the folks agree with sort

2939
01:44:34,560 --> 01:44:36,320
of just right now constraining ourselves

2940
01:44:36,320 --> 01:44:38,560
to mitigating the intersection attack

2941
01:44:38,560 --> 01:44:41,119
using the the the sort of proposal that

2942
01:44:41,119 --> 01:44:44,239
has now uh been floated and end up and

2943
01:44:44,239 --> 01:44:45,760
sort of punting on the other ones for

2944
01:44:45,760 --> 01:44:48,239
the time being right my sense isn't

2945
01:44:48,239 --> 01:44:50,080
based on nothing in the room but seeing

2946
01:44:50,080 --> 01:44:52,159
chatter and hearing people talk is that

2947
01:44:52,159 --> 01:44:54,639
uh yes uh like let's let's deal with the

2948
01:44:54,639 --> 01:44:57,600
intersection attacks um and let's let's

2949
01:44:57,600 --> 01:44:59,760
like separately in parallel talk about

2950
01:44:59,760 --> 01:45:01,520
how we might consider these stuffing

2951
01:45:01,520 --> 01:45:04,159
attacks and uh you know over release of

2952
01:45:04,159 --> 01:45:06,000
data across tasks or the over sampling

2953
01:45:06,000 --> 01:45:08,800
attacks separately

2954
01:45:10,639 --> 01:45:12,080
i think that's the right answer um i

2955
01:45:12,080 --> 01:45:14,400
think so i think one yes two i don't

2956
01:45:14,400 --> 01:45:16,000
know of any but i'm sure we'll find some

2957
01:45:16,000 --> 01:45:17,440
um three

2958
01:45:17,440 --> 01:45:18,239
um

2959
01:45:18,239 --> 01:45:19,840
yeah so i think that right now we should

2960
01:45:19,840 --> 01:45:21,520
do is effectively you said what i said

2961
01:45:21,520 --> 01:45:24,000
and what dkg said which is like any

2962
01:45:24,000 --> 01:45:25,840
minimum batch size and any submission

2963
01:45:25,840 --> 01:45:27,199
can only be one query it could ever be

2964
01:45:27,199 --> 01:45:29,679
only one in one query and then like

2965
01:45:29,679 --> 01:45:31,040
maybe you could last requirement later

2966
01:45:31,040 --> 01:45:32,239
but like that would get that will get

2967
01:45:32,239 --> 01:45:33,360
you pretty far

2968
01:45:33,360 --> 01:45:34,960
and i think it's compatible with like a

2969
01:45:34,960 --> 01:45:37,119
very a very flexible set of uh actually

2970
01:45:37,119 --> 01:45:38,719
quite a flexible set of queries a little

2971
01:45:38,719 --> 01:45:39,840
drill up

2972
01:45:39,840 --> 01:45:42,560
um and we'll get you pretty far and then

2973
01:45:42,560 --> 01:45:44,560
like you know and then like once you

2974
01:45:44,560 --> 01:45:46,480
have some experience or anything like i

2975
01:45:46,480 --> 01:45:47,440
think we're gonna like this is a

2976
01:45:47,440 --> 01:45:48,560
complicated enough thing it's a new

2977
01:45:48,560 --> 01:45:49,520
enough thing that we're getting some

2978
01:45:49,520 --> 01:45:51,760
experience either like pre rc or post

2979
01:45:51,760 --> 01:45:53,440
rfc so i think this would get us far

2980
01:45:53,440 --> 01:45:54,480
enough to make some real progress and

2981
01:45:54,480 --> 01:45:56,560
then we could like as and then you know

2982
01:45:56,560 --> 01:45:58,320
and like if they the coop and i were

2983
01:45:58,320 --> 01:45:59,920
discussing earlier right you know we

2984
01:45:59,920 --> 01:46:01,360
could have addressed that problem by

2985
01:46:01,360 --> 01:46:04,080
like doing doing that aggregate on like

2986
01:46:04,080 --> 01:46:05,600
like day one and then drill down for day

2987
01:46:05,600 --> 01:46:07,440
two and like that would have also sold a

2988
01:46:07,440 --> 01:46:09,920
problem a slightly clunky one so i think

2989
01:46:09,920 --> 01:46:11,119
i think this is already useful

2990
01:46:11,119 --> 01:46:12,800
functionality and as patent was saying

2991
01:46:12,800 --> 01:46:15,119
like let's get something there

2992
01:46:15,119 --> 01:46:17,760
please try to keep remarks brief so we

2993
01:46:17,760 --> 01:46:21,560
can get to the last presentation

2994
01:46:31,520 --> 01:46:33,440
tim

2995
01:46:33,440 --> 01:46:35,760
you're muted

2996
01:46:35,760 --> 01:46:38,239
or you're not muted but i can't hear you

2997
01:46:38,239 --> 01:46:40,320
right click the button uh okay sorry we

2998
01:46:40,320 --> 01:46:42,080
were talking now about the notion of

2999
01:46:42,080 --> 01:46:44,400
tracking how many uh queries a given

3000
01:46:44,400 --> 01:46:45,360
report

3001
01:46:45,360 --> 01:46:48,000
had been used in so um i think actually

3002
01:46:48,000 --> 01:46:50,080
this motion does exist in the draft

3003
01:46:50,080 --> 01:46:52,080
there's this concept of that lifetime in

3004
01:46:52,080 --> 01:46:54,239
there um and that's the that's intended

3005
01:46:54,239 --> 01:46:57,040
to accommodate uh poplar

3006
01:46:57,040 --> 01:46:58,400
in the popular setting it's expected

3007
01:46:58,400 --> 01:46:59,679
that the collector would make multiple

3008
01:46:59,679 --> 01:47:01,760
iterative queries um against an

3009
01:47:01,760 --> 01:47:03,520
aggregate in order to like like

3010
01:47:03,520 --> 01:47:04,800
essentially it would be longer and

3011
01:47:04,800 --> 01:47:06,239
longer string prefixes to eventually

3012
01:47:06,239 --> 01:47:08,560
figure out like what the heavy hitter

3013
01:47:08,560 --> 01:47:10,560
in a population is

3014
01:47:10,560 --> 01:47:12,480
so yeah so one like i think we already

3015
01:47:12,480 --> 01:47:14,239
have this and uh

3016
01:47:14,239 --> 01:47:16,159
i'm pretty sure having the code that the

3017
01:47:16,159 --> 01:47:18,159
honest implementation already handles it

3018
01:47:18,159 --> 01:47:20,239
and we should keep in mind that like i'm

3019
01:47:20,239 --> 01:47:22,400
pretty sure that in order to make

3020
01:47:22,400 --> 01:47:25,679
poplar useful uh you have to allow

3021
01:47:25,679 --> 01:47:28,080
multiple queries against the same set of

3022
01:47:28,080 --> 01:47:30,480
reports

3023
01:47:33,280 --> 01:47:37,840
thanks tim nick yeah thanks tim

3024
01:47:40,719 --> 01:47:43,199
nick dirty seriously um

3025
01:47:43,199 --> 01:47:45,280
i think this is a

3026
01:47:45,280 --> 01:47:47,600
great start in the privacy right model

3027
01:47:47,600 --> 01:47:51,520
um i i don't think we should be um

3028
01:47:51,520 --> 01:47:53,360
uh confident that we've considered every

3029
01:47:53,360 --> 01:47:54,800
privacy threat and in particular i

3030
01:47:54,800 --> 01:47:55,920
wanted to raise something that i think

3031
01:47:55,920 --> 01:47:57,040
has come up

3032
01:47:57,040 --> 01:48:00,159
in the uh chat or um

3033
01:48:00,159 --> 01:48:01,600
sophia had mentioned in another

3034
01:48:01,600 --> 01:48:02,960
presentation

3035
01:48:02,960 --> 01:48:04,480
there might be some privacy threads that

3036
01:48:04,480 --> 01:48:07,199
are about uh groups rather than

3037
01:48:07,199 --> 01:48:08,880
individuals um

3038
01:48:08,880 --> 01:48:09,840
and i think that'd be particularly

3039
01:48:09,840 --> 01:48:12,000
important with small groups but

3040
01:48:12,000 --> 01:48:14,719
uh if i don't learn that uh yes this

3041
01:48:14,719 --> 01:48:16,800
particular person had this particular

3042
01:48:16,800 --> 01:48:20,560
report but i do learn that you know

3043
01:48:31,280 --> 01:48:33,119
unfortunately we're not able to to get

3044
01:48:33,119 --> 01:48:35,360
your audio very clearly um maybe you can

3045
01:48:35,360 --> 01:48:37,679
write your question in the chat

3046
01:48:37,679 --> 01:48:41,440
and we can uh invite sean to uh come up

3047
01:48:41,440 --> 01:48:43,280
and and show his slides

3048
01:48:43,280 --> 01:48:46,159
so we can get started there

3049
01:48:46,159 --> 01:48:48,000
thank you chris

3050
01:48:48,000 --> 01:48:51,320
thank you chris

3051
01:49:01,199 --> 01:49:03,600
good day everyone so this last talk is

3052
01:49:03,600 --> 01:49:05,520
about a task enforcement and

3053
01:49:05,520 --> 01:49:07,360
configuration

3054
01:49:07,360 --> 01:49:09,760
this is somewhat related to the staffing

3055
01:49:09,760 --> 01:49:12,840
attack chris wood was talking about

3056
01:49:12,840 --> 01:49:14,560
um

3057
01:49:14,560 --> 01:49:18,400
so this is a list of task parameters uh

3058
01:49:18,400 --> 01:49:22,080
defining the current uh that draft

3059
01:49:22,080 --> 01:49:23,360
so

3060
01:49:23,360 --> 01:49:25,920
today we are focusing on the parameters

3061
01:49:25,920 --> 01:49:27,920
that are particularly important to a

3062
01:49:27,920 --> 01:49:29,280
task

3063
01:49:29,280 --> 01:49:30,800
so here we have

3064
01:49:30,800 --> 01:49:33,199
parameters like the vdf verified key

3065
01:49:33,199 --> 01:49:34,719
which is uh

3066
01:49:34,719 --> 01:49:37,119
not necessarily related to a task and

3067
01:49:37,119 --> 01:49:39,360
it's also a shared secret between the

3068
01:49:39,360 --> 01:49:40,960
leader and helpers

3069
01:49:40,960 --> 01:49:42,880
so what we are talking today doesn't

3070
01:49:42,880 --> 01:49:44,880
necessarily apply to these kind of

3071
01:49:44,880 --> 01:49:47,040
parameters but it definitely applies to

3072
01:49:47,040 --> 01:49:50,080
saying like minimal batch size

3073
01:49:50,080 --> 01:49:52,719
so when we say task

3074
01:49:52,719 --> 01:49:54,880
enforcement what we mean is

3075
01:49:54,880 --> 01:49:58,239
how do we make sure the parameters we

3076
01:49:58,239 --> 01:50:00,560
configured for a particular task

3077
01:50:00,560 --> 01:50:03,040
is used by the client and how does the

3078
01:50:03,040 --> 01:50:06,159
client know these parameters are

3079
01:50:06,159 --> 01:50:08,320
enforced and actually used by the

3080
01:50:08,320 --> 01:50:09,599
aggregators

3081
01:50:09,599 --> 01:50:11,280
and when you see task configuration we

3082
01:50:11,280 --> 01:50:13,440
mean the process of creating the task

3083
01:50:13,440 --> 01:50:15,760
with such parameters

3084
01:50:15,760 --> 01:50:18,880
and today this is handled auto band

3085
01:50:18,880 --> 01:50:20,520
there is no detailed

3086
01:50:20,520 --> 01:50:22,719
specifics assumes

3087
01:50:22,719 --> 01:50:25,840
its deployment specific

3088
01:50:26,400 --> 01:50:28,719
but there are some potential issues and

3089
01:50:28,719 --> 01:50:33,280
privacy issues with this so first of all

3090
01:50:33,679 --> 01:50:36,159
what if the leader that

3091
01:50:36,159 --> 01:50:37,920
configures these parameters are

3092
01:50:37,920 --> 01:50:39,119
dishonest

3093
01:50:39,119 --> 01:50:41,840
this is not necessarily just the leader

3094
01:50:41,840 --> 01:50:44,800
it could be the collector or sometimes

3095
01:50:44,800 --> 01:50:46,159
the leader and the collector could be

3096
01:50:46,159 --> 01:50:47,920
the same organization

3097
01:50:47,920 --> 01:50:51,440
if the when the task is constructed

3098
01:50:51,440 --> 01:50:53,199
either the leader or the collector they

3099
01:50:53,199 --> 01:50:55,840
define a minimum batch size that is too

3100
01:50:55,840 --> 01:50:58,159
small for the task and then

3101
01:50:58,159 --> 01:51:00,480
communicate that with the helper

3102
01:51:00,480 --> 01:51:02,560
it's impossible for the helper to know

3103
01:51:02,560 --> 01:51:04,560
if this size is too small

3104
01:51:04,560 --> 01:51:06,800
and also it's impossible for the

3105
01:51:06,800 --> 01:51:08,719
clients that participating in this task

3106
01:51:08,719 --> 01:51:09,599
to know

3107
01:51:09,599 --> 01:51:11,920
the privacy guaranteeing in this task is

3108
01:51:11,920 --> 01:51:13,679
compromised

3109
01:51:13,679 --> 01:51:16,639
now this applies to other parameters

3110
01:51:16,639 --> 01:51:18,239
especially if you adopt the differential

3111
01:51:18,239 --> 01:51:19,760
privacy

3112
01:51:19,760 --> 01:51:21,840
there could be parameters like the

3113
01:51:21,840 --> 01:51:24,159
different currency epsilon and so on

3114
01:51:24,159 --> 01:51:26,080
these parameters can also be redef

3115
01:51:26,080 --> 01:51:28,639
specific

3116
01:51:28,800 --> 01:51:29,840
and

3117
01:51:29,840 --> 01:51:32,560
like i mentioned how how does dap earn

3118
01:51:32,560 --> 01:51:35,520
clients trust so the client know the

3119
01:51:35,520 --> 01:51:37,520
task of the participant

3120
01:51:37,520 --> 01:51:40,080
is indeed configured of the the right

3121
01:51:40,080 --> 01:51:42,880
parameters and is enforced on the server

3122
01:51:42,880 --> 01:51:44,400
side

3123
01:51:44,400 --> 01:51:46,320
so what i think

3124
01:51:46,320 --> 01:51:47,920
needs to be addressed in depth on the

3125
01:51:47,920 --> 01:51:51,040
protocol level is first the transparency

3126
01:51:51,040 --> 01:51:53,119
so the client or the user they shouldn't

3127
01:51:53,119 --> 01:51:53,920
know

3128
01:51:53,920 --> 01:51:55,280
the privacy guaranteeing they are

3129
01:51:55,280 --> 01:51:57,440
getting they should know the parameters

3130
01:51:57,440 --> 01:51:59,679
that defines the privacy guarantee of

3131
01:51:59,679 --> 01:52:00,960
the task

3132
01:52:00,960 --> 01:52:02,639
secondly there needs to be some

3133
01:52:02,639 --> 01:52:05,520
enforcement on the server side

3134
01:52:05,520 --> 01:52:08,320
in the aggregators this should make sure

3135
01:52:08,320 --> 01:52:10,880
the parameters configured for the task

3136
01:52:10,880 --> 01:52:14,239
is indeed used on all the clients that

3137
01:52:14,239 --> 01:52:18,000
participate in this in this task

3138
01:52:18,000 --> 01:52:22,320
so what we mentioned in issue 271 is

3139
01:52:22,320 --> 01:52:25,440
a proposal for inband task enforcement

3140
01:52:25,440 --> 01:52:27,920
it has basically three things first we

3141
01:52:27,920 --> 01:52:29,360
let client know about the task

3142
01:52:29,360 --> 01:52:31,360
parameters being used

3143
01:52:31,360 --> 01:52:33,520
this will help better auditing so the

3144
01:52:33,520 --> 01:52:36,159
client can see what parameters

3145
01:52:36,159 --> 01:52:38,400
the the they are

3146
01:52:38,400 --> 01:52:39,920
participating in

3147
01:52:39,920 --> 01:52:41,520
deca also

3148
01:52:41,520 --> 01:52:44,639
develop policies to either obtain a task

3149
01:52:44,639 --> 01:52:47,920
or not or have some way of auditing the

3150
01:52:47,920 --> 01:52:49,920
tasks they have been joining

3151
01:52:49,920 --> 01:52:52,480
and the parameters being used there

3152
01:52:52,480 --> 01:52:55,199
this can also use

3153
01:52:55,199 --> 01:52:58,000
this can also allow client to have some

3154
01:52:58,000 --> 01:52:59,599
of these parameters hard-coded on the

3155
01:52:59,599 --> 01:53:00,800
client side

3156
01:53:00,800 --> 01:53:01,840
for example if you are using

3157
01:53:01,840 --> 01:53:04,000
differential privacy the client could

3158
01:53:04,000 --> 01:53:06,400
decide uh i want to use the local

3159
01:53:06,400 --> 01:53:08,159
different privacy

3160
01:53:08,159 --> 01:53:09,679
of a particular

3161
01:53:09,679 --> 01:53:11,970
epsilon or lower

3162
01:53:11,970 --> 01:53:13,280
[Music]

3163
01:53:13,280 --> 01:53:14,960
and the second thing is the client needs

3164
01:53:14,960 --> 01:53:16,880
to send these task parameters back to

3165
01:53:16,880 --> 01:53:18,000
the server

3166
01:53:18,000 --> 01:53:19,599
we want to use the

3167
01:53:19,599 --> 01:53:21,360
extension in the

3168
01:53:21,360 --> 01:53:23,520
current report

3169
01:53:23,520 --> 01:53:25,199
because the extension

3170
01:53:25,199 --> 01:53:26,800
is supposed to be

3171
01:53:26,800 --> 01:53:29,119
extending what the

3172
01:53:29,119 --> 01:53:31,760
the report is providing so this is a

3173
01:53:31,760 --> 01:53:33,520
a way to make it extensible for

3174
01:53:33,520 --> 01:53:35,440
different read-apps we can have one

3175
01:53:35,440 --> 01:53:36,719
particular

3176
01:53:36,719 --> 01:53:39,840
extension data type for

3177
01:53:39,840 --> 01:53:42,159
a re-dash with a particular dp guarantee

3178
01:53:42,159 --> 01:53:44,239
or a particular privacy guarantee

3179
01:53:44,239 --> 01:53:46,320
but also because the extension is used

3180
01:53:46,320 --> 01:53:50,000
in aed so a malicious aggregator cannot

3181
01:53:50,000 --> 01:53:52,560
change these parameters later on they

3182
01:53:52,560 --> 01:53:55,280
will fail to decrypt

3183
01:53:55,280 --> 01:53:56,960
the report

3184
01:53:56,960 --> 01:53:59,360
and thirdly the aggregator should check

3185
01:53:59,360 --> 01:54:02,320
the parameters coming from the extension

3186
01:54:02,320 --> 01:54:04,560
match what they have stored for that

3187
01:54:04,560 --> 01:54:05,599
task

3188
01:54:05,599 --> 01:54:07,760
in this way a malicious client cannot

3189
01:54:07,760 --> 01:54:10,320
pollute the aggregation by

3190
01:54:10,320 --> 01:54:12,000
permuting the parameters in the

3191
01:54:12,000 --> 01:54:14,560
extension

3192
01:54:14,719 --> 01:54:15,520
so

3193
01:54:15,520 --> 01:54:17,679
as a quick example

3194
01:54:17,679 --> 01:54:19,840
here you have a leader that sends the

3195
01:54:19,840 --> 01:54:22,159
task parameters to client helper auto

3196
01:54:22,159 --> 01:54:24,639
banned the client each client will seal

3197
01:54:24,639 --> 01:54:27,040
the input shares with the extension that

3198
01:54:27,040 --> 01:54:29,199
contains the task parameters and then

3199
01:54:29,199 --> 01:54:31,040
send those back to the leader in the

3200
01:54:31,040 --> 01:54:32,960
report the leader will verify the

3201
01:54:32,960 --> 01:54:36,080
parameters from the extension and when

3202
01:54:36,080 --> 01:54:38,239
the aggregation flow starts it will send

3203
01:54:38,239 --> 01:54:38,960
the

3204
01:54:38,960 --> 01:54:40,800
same extension in the report share to

3205
01:54:40,800 --> 01:54:42,800
the helper which will do the same

3206
01:54:42,800 --> 01:54:45,599
verification

3207
01:54:46,639 --> 01:54:48,480
now once we have the

3208
01:54:48,480 --> 01:54:50,960
this kind of inband task parameter

3209
01:54:50,960 --> 01:54:53,679
delivery we can go one step further this

3210
01:54:53,679 --> 01:54:58,159
is what was proposed by issue 290

3211
01:54:58,159 --> 01:54:59,840
what this does is

3212
01:54:59,840 --> 01:55:01,280
we can actually

3213
01:55:01,280 --> 01:55:04,480
create the task on demand automatically

3214
01:55:04,480 --> 01:55:07,520
when we receive a new combination of

3215
01:55:07,520 --> 01:55:10,320
task id and task parameters so

3216
01:55:10,320 --> 01:55:12,639
in this diagram we no longer have the

3217
01:55:12,639 --> 01:55:14,960
auto band task parameter distribution

3218
01:55:14,960 --> 01:55:17,280
between leader and helper so the

3219
01:55:17,280 --> 01:55:19,760
parameters are only given to the client

3220
01:55:19,760 --> 01:55:21,520
the client does exactly the same thing

3221
01:55:21,520 --> 01:55:22,400
in

3222
01:55:22,400 --> 01:55:24,880
as in task enforcement but when the

3223
01:55:24,880 --> 01:55:26,880
leader receives the report

3224
01:55:26,880 --> 01:55:28,239
if it's uh

3225
01:55:28,239 --> 01:55:30,480
an insane task id

3226
01:55:30,480 --> 01:55:32,880
and task parameters tuple the leader can

3227
01:55:32,880 --> 01:55:36,080
create a new task on demand

3228
01:55:36,080 --> 01:55:38,800
similarly helper can do the same when

3229
01:55:38,800 --> 01:55:40,480
when it receives the same combination of

3230
01:55:40,480 --> 01:55:42,320
task value and parameters

3231
01:55:42,320 --> 01:55:43,360
and

3232
01:55:43,360 --> 01:55:46,000
in this way we avoid this autobahn task

3233
01:55:46,000 --> 01:55:49,040
orchestration between leader and helper

3234
01:55:49,040 --> 01:55:51,280
and also the

3235
01:55:51,280 --> 01:55:53,840
there is a nice side effect that any

3236
01:55:53,840 --> 01:55:55,679
malicious client

3237
01:55:55,679 --> 01:55:57,679
permuting the parameters

3238
01:55:57,679 --> 01:55:59,760
will cause their

3239
01:55:59,760 --> 01:56:02,000
reports to be aggregated in a different

3240
01:56:02,000 --> 01:56:03,280
batch than

3241
01:56:03,280 --> 01:56:04,159
the

3242
01:56:04,159 --> 01:56:05,599
the good

3243
01:56:05,599 --> 01:56:08,239
reports from normal clients

3244
01:56:08,239 --> 01:56:10,239
because in this way

3245
01:56:10,239 --> 01:56:11,440
essentially

3246
01:56:11,440 --> 01:56:14,400
a task is identified by not only the

3247
01:56:14,400 --> 01:56:16,239
task id but also

3248
01:56:16,239 --> 01:56:18,800
the group of parameters it was defined

3249
01:56:18,800 --> 01:56:20,159
with

3250
01:56:20,159 --> 01:56:22,480
this also from a

3251
01:56:22,480 --> 01:56:24,400
implementation point of view is easy to

3252
01:56:24,400 --> 01:56:25,520
do with

3253
01:56:25,520 --> 01:56:27,920
any frameworks that

3254
01:56:27,920 --> 01:56:30,480
implement a group by operator so you can

3255
01:56:30,480 --> 01:56:33,199
essentially group by the report by their

3256
01:56:33,199 --> 01:56:35,679
id and the task parameters

3257
01:56:35,679 --> 01:56:39,520
in that case your task object becomes

3258
01:56:39,520 --> 01:56:40,560
kind of a

3259
01:56:40,560 --> 01:56:42,480
index that just groups

3260
01:56:42,480 --> 01:56:45,199
reports together

3261
01:56:45,199 --> 01:56:48,080
now in this last slides uh this is a

3262
01:56:48,080 --> 01:56:51,280
small optimization uh so

3263
01:56:51,280 --> 01:56:52,880
like i said

3264
01:56:52,880 --> 01:56:55,199
in this scheme the task is identified by

3265
01:56:55,199 --> 01:56:58,480
tuple of task id and parameters we can

3266
01:56:58,480 --> 01:57:01,040
optimize that further by creating the

3267
01:57:01,040 --> 01:57:02,800
task ids

3268
01:57:02,800 --> 01:57:05,280
not randomly at the uuid but

3269
01:57:05,280 --> 01:57:07,840
as like a hash of

3270
01:57:07,840 --> 01:57:10,000
some shared info among all the clients

3271
01:57:10,000 --> 01:57:13,119
participating and the extension that

3272
01:57:13,119 --> 01:57:15,119
includes all the parameters in this way

3273
01:57:15,119 --> 01:57:16,960
the id can be sent to

3274
01:57:16,960 --> 01:57:18,800
the server and

3275
01:57:18,800 --> 01:57:21,440
as one thing the server have to verify

3276
01:57:21,440 --> 01:57:25,840
as a genuine task um

3277
01:57:25,840 --> 01:57:26,639
but

3278
01:57:26,639 --> 01:57:28,800
this does have some implications

3279
01:57:28,800 --> 01:57:31,440
on whether you know the task id can be

3280
01:57:31,440 --> 01:57:33,360
defined on the server side before the

3281
01:57:33,360 --> 01:57:35,199
task starts

3282
01:57:35,199 --> 01:57:38,480
so this is really just now optimization

3283
01:57:38,480 --> 01:57:41,119
just say at this point i want to end

3284
01:57:41,119 --> 01:57:42,239
the the

3285
01:57:42,239 --> 01:57:46,159
presentation and take some points

3286
01:57:46,159 --> 01:57:49,159
okay

3287
01:57:52,719 --> 01:57:53,920
there we go

3288
01:57:53,920 --> 01:57:56,159
uh thanks john for the presentation so i

3289
01:57:56,159 --> 01:57:58,080
just have uh one note on the notion of

3290
01:57:58,080 --> 01:58:00,880
like dynamic configuration uh based on

3291
01:58:00,880 --> 01:58:03,119
our experience finding the um

3292
01:58:03,119 --> 01:58:05,759
notifications

3293
01:58:07,679 --> 01:58:10,400
describes in that um

3294
01:58:10,400 --> 01:58:12,400
like

3295
01:58:12,400 --> 01:58:13,920
you uh

3296
01:58:13,920 --> 01:58:16,800
the tasks effect the task analog um are

3297
01:58:16,800 --> 01:58:18,159
configured dynamically just based on

3298
01:58:18,159 --> 01:58:20,400
like what inputs are getting uploaded

3299
01:58:20,400 --> 01:58:23,840
um by in that system's uh ingestion

3300
01:58:23,840 --> 01:58:25,360
servers anyway and it turns out that has

3301
01:58:25,360 --> 01:58:26,639
been quite valuable because it has

3302
01:58:26,639 --> 01:58:28,639
enabled like the mobile os vendors to

3303
01:58:28,639 --> 01:58:30,960
add new aggregations to the system uh

3304
01:58:30,960 --> 01:58:32,719
without needing to explicitly coordinate

3305
01:58:32,719 --> 01:58:34,639
with like the three organ

3306
01:58:34,639 --> 01:58:36,800
organizations running the other servers

3307
01:58:36,800 --> 01:58:39,199
um so yeah i just wanted to you know

3308
01:58:39,199 --> 01:58:40,480
put up that comment that it is kind of

3309
01:58:40,480 --> 01:58:42,480
valuable to have this dynamic task

3310
01:58:42,480 --> 01:58:45,598
configuration capability

3311
01:58:45,920 --> 01:58:49,719
oh great thank you

3312
01:58:51,040 --> 01:58:53,920
uh chris patton

3313
01:58:56,960 --> 01:59:00,239
um i also think this is a great idea um

3314
01:59:00,239 --> 01:59:03,679
i'm a little i'm not very clear on some

3315
01:59:03,679 --> 01:59:04,880
of the

3316
01:59:04,880 --> 01:59:07,840
uh security considerations um

3317
01:59:07,840 --> 01:59:10,480
i would like to see those fleshed out a

3318
01:59:10,480 --> 01:59:12,880
bit more before we consider a pr like

3319
01:59:12,880 --> 01:59:16,080
before we consider a change but like uh

3320
01:59:16,080 --> 01:59:17,840
it would hopefully be nice to like look

3321
01:59:17,840 --> 01:59:20,560
at apr for this for me personally like

3322
01:59:20,560 --> 01:59:21,599
thinking through the security

3323
01:59:21,599 --> 01:59:23,520
implications and like what we have to do

3324
01:59:23,520 --> 01:59:24,480
on the

3325
01:59:24,480 --> 01:59:25,840
to implement on the server side so if

3326
01:59:25,840 --> 01:59:27,840
you wanted i would say like

3327
01:59:27,840 --> 01:59:30,080
uh if you wanted to start drafting

3328
01:59:30,080 --> 01:59:32,000
for for people to look at i think that

3329
01:59:32,000 --> 01:59:34,719
would be a great part

3330
01:59:35,280 --> 01:59:37,599
yeah we can start preparing a pr for

3331
01:59:37,599 --> 01:59:39,520
this

3332
01:59:39,520 --> 01:59:41,840
thank you

3333
01:59:43,119 --> 01:59:44,400
i appreciate that you're thinking about

3334
01:59:44,400 --> 01:59:47,280
this uh because i think it pushes us to

3335
01:59:47,280 --> 01:59:48,639
really think about how things are going

3336
01:59:48,639 --> 01:59:50,320
to be deployed

3337
01:59:50,320 --> 01:59:51,760
um when i think about how things are

3338
01:59:51,760 --> 01:59:53,119
going to be deployed i like to ask a

3339
01:59:53,119 --> 01:59:54,719
couple of questions by taking the

3340
01:59:54,719 --> 01:59:58,639
perspective of some of the participants

3341
01:59:58,639 --> 02:00:00,080
as a client

3342
02:00:00,080 --> 02:00:01,920
i don't know how we would expect the

3343
02:00:01,920 --> 02:00:02,880
client

3344
02:00:02,880 --> 02:00:04,080
to

3345
02:00:04,080 --> 02:00:05,360
set

3346
02:00:05,360 --> 02:00:08,159
to to to be able to choose uh the

3347
02:00:08,159 --> 02:00:10,480
consent options here like well i'm okay

3348
02:00:10,480 --> 02:00:11,840
with this kind of parameters but not

3349
02:00:11,840 --> 02:00:13,440
that kind of parameters that seems very

3350
02:00:13,440 --> 02:00:15,199
complicated and difficult

3351
02:00:15,199 --> 02:00:17,119
for clients to do and i'm wary of asking

3352
02:00:17,119 --> 02:00:18,880
clients to do that kind of

3353
02:00:18,880 --> 02:00:21,360
configuration choice

3354
02:00:21,360 --> 02:00:22,719
when i think about asking someone to

3355
02:00:22,719 --> 02:00:25,199
operate as a helper

3356
02:00:25,199 --> 02:00:27,199
the helper's job is to keep the system

3357
02:00:27,199 --> 02:00:29,760
honest as far as i can tell

3358
02:00:29,760 --> 02:00:32,239
and if my job is to keep the system

3359
02:00:32,239 --> 02:00:33,760
honest

3360
02:00:33,760 --> 02:00:36,480
then i'm going to need to make some very

3361
02:00:36,480 --> 02:00:38,639
specific decisions about what types of

3362
02:00:38,639 --> 02:00:41,040
parameters i'm willing to accept

3363
02:00:41,040 --> 02:00:43,360
not just um

3364
02:00:43,360 --> 02:00:45,760
not just

3365
02:00:45,760 --> 02:00:47,840
you know take oh here's a new set of

3366
02:00:47,840 --> 02:00:49,440
parameters i'll just i'll just adopt

3367
02:00:49,440 --> 02:00:50,239
them

3368
02:00:50,239 --> 02:00:51,440
and that means the helper is going to

3369
02:00:51,440 --> 02:00:53,199
need to actually make some

3370
02:00:53,199 --> 02:00:55,440
constraints on their system about what

3371
02:00:55,440 --> 02:00:57,599
what requests they're going to accept

3372
02:00:57,599 --> 02:00:59,360
and now you're asking the helper to make

3373
02:00:59,360 --> 02:01:00,960
some pretty sophisticated decisions as

3374
02:01:00,960 --> 02:01:02,080
well

3375
02:01:02,080 --> 02:01:04,480
i think the way we want people to

3376
02:01:04,480 --> 02:01:06,080
step up and say yes i'm willing to be a

3377
02:01:06,080 --> 02:01:07,440
helper because i think this measurement

3378
02:01:07,440 --> 02:01:09,119
is valuable and i also want to protect

3379
02:01:09,119 --> 02:01:10,960
the client's privacy

3380
02:01:10,960 --> 02:01:12,239
um

3381
02:01:12,239 --> 02:01:13,199
it seems

3382
02:01:13,199 --> 02:01:15,119
i don't know how how you're going to

3383
02:01:15,119 --> 02:01:16,960
offer those kind of constraints if this

3384
02:01:16,960 --> 02:01:20,480
dynamic configuration is happening

3385
02:01:20,960 --> 02:01:23,119
yeah can i just quickly address the

3386
02:01:23,119 --> 02:01:24,320
question so

3387
02:01:24,320 --> 02:01:26,800
uh i agree

3388
02:01:26,800 --> 02:01:28,560
for clients to understand all the

3389
02:01:28,560 --> 02:01:30,800
privacy parameters and decide to open or

3390
02:01:30,800 --> 02:01:33,360
not uh is not realistic for most of the

3391
02:01:33,360 --> 02:01:35,679
clients but i think the transparency

3392
02:01:35,679 --> 02:01:38,080
needs to be there so for the few that do

3393
02:01:38,080 --> 02:01:40,560
understand i do want to see

3394
02:01:40,560 --> 02:01:42,159
what kind of a

3395
02:01:42,159 --> 02:01:44,320
collection schema they are they are

3396
02:01:44,320 --> 02:01:46,400
participating in i think this is very

3397
02:01:46,400 --> 02:01:47,440
valuable

3398
02:01:47,440 --> 02:01:49,840
and sometimes these kind of

3399
02:01:49,840 --> 02:01:51,679
obtaining opt-out policy could be

3400
02:01:51,679 --> 02:01:53,040
defined by

3401
02:01:53,040 --> 02:01:54,480
uh the

3402
02:01:54,480 --> 02:01:56,800
organization that provides the client

3403
02:01:56,800 --> 02:02:00,560
side to the to the individual clients

3404
02:02:00,560 --> 02:02:02,080
that's one thing and then the other

3405
02:02:02,080 --> 02:02:04,320
thing is for the uh you mentioned the

3406
02:02:04,320 --> 02:02:07,599
photo helper it has a responsibility to

3407
02:02:07,599 --> 02:02:09,360
you know know the parameters that you

3408
02:02:09,360 --> 02:02:12,080
receive and make sense privacy-wise uh

3409
02:02:12,080 --> 02:02:13,760
that is true and for

3410
02:02:13,760 --> 02:02:16,560
uh in issues 271 we also

3411
02:02:16,560 --> 02:02:18,719
said something about uh like if you have

3412
02:02:18,719 --> 02:02:20,560
differential privacy guaranteeing then

3413
02:02:20,560 --> 02:02:21,599
we could

3414
02:02:21,599 --> 02:02:23,840
implement some uh

3415
02:02:23,840 --> 02:02:26,400
sanity check on the helper side

3416
02:02:26,400 --> 02:02:28,800
uh and this can be extended to to extend

3417
02:02:28,800 --> 02:02:30,719
it to the client side as well that you

3418
02:02:30,719 --> 02:02:32,639
know the privacy differential privacy

3419
02:02:32,639 --> 02:02:34,639
parameter you received indeed makes

3420
02:02:34,639 --> 02:02:36,320
sense for the kind of batch size you are

3421
02:02:36,320 --> 02:02:37,440
defining

3422
02:02:37,440 --> 02:02:38,560
um

3423
02:02:38,560 --> 02:02:40,960
but i think here that the key is one the

3424
02:02:40,960 --> 02:02:43,440
transparency to the client today we we

3425
02:02:43,440 --> 02:02:45,920
simply don't have that on that side and

3426
02:02:45,920 --> 02:02:47,520
two is like you said when you deploy

3427
02:02:47,520 --> 02:02:49,440
something

3428
02:02:49,440 --> 02:02:52,239
you have to worry about how do you

3429
02:02:52,239 --> 02:02:53,760
communicate these parameters between

3430
02:02:53,760 --> 02:02:55,440
need and helper

3431
02:02:55,440 --> 02:02:56,639
you could find

3432
02:02:56,639 --> 02:03:00,480
any secure ways to deliver these but

3433
02:03:00,480 --> 02:03:02,800
i think it's better that you don't have

3434
02:03:02,800 --> 02:03:05,040
to worry about that and there is one

3435
02:03:05,040 --> 02:03:06,880
option for you to actually configure

3436
02:03:06,880 --> 02:03:09,040
these using the same route that you

3437
02:03:09,040 --> 02:03:13,119
uploaded the report to the aggregators

3438
02:03:13,119 --> 02:03:15,119
and and you achieve both transparency

3439
02:03:15,119 --> 02:03:17,760
and enforcement in in one

3440
02:03:17,760 --> 02:03:20,159
solution

3441
02:03:20,159 --> 02:03:21,760
thank you sean

3442
02:03:21,760 --> 02:03:25,199
uh that concludes our meeting of privacy

3443
02:03:25,199 --> 02:03:26,719
preserving measurement

3444
02:03:26,719 --> 02:03:28,719
thank you everyone for participating and

3445
02:03:28,719 --> 02:03:32,400
for getting through our whole agenda

3446
02:03:38,719 --> 02:03:40,639
i noticed continuing discussion

3447
02:03:40,639 --> 02:03:43,679
particularly about star in the zulu room

3448
02:03:43,679 --> 02:03:45,520
feel free to take that to the list we

3449
02:03:45,520 --> 02:03:47,920
haven't issued a call for adoption but

3450
02:03:47,920 --> 02:03:51,440
feel free to comment on that on the list

3451
02:03:51,440 --> 02:03:52,719
because i see that some people are

3452
02:03:52,719 --> 02:03:54,719
interested in

3453
02:03:54,719 --> 02:03:56,639
if there are topics that are warrant an

3454
02:03:56,639 --> 02:03:57,679
interim

3455
02:03:57,679 --> 02:03:59,599
feel free to come to the chairs we could

3456
02:03:59,599 --> 02:04:03,239
schedule such

3457
02:04:10,480 --> 02:04:13,480
okay

3458
02:04:33,040 --> 02:04:36,040
oh

3459
02:04:56,719 --> 02:04:58,800
you

