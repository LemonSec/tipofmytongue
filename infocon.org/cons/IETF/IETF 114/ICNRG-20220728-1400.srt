1
00:00:07,440 --> 00:00:10,080
okay so give give us one minute we are

2
00:00:10,080 --> 00:00:13,679
trying to um make the coin code shares

3
00:00:13,679 --> 00:00:15,440
delegate so that they can actually run

4
00:00:15,440 --> 00:00:18,759
the meeting later

5
00:00:31,840 --> 00:00:34,840
uh

6
00:00:45,600 --> 00:00:48,600
um

7
00:00:59,680 --> 00:01:02,680
um

8
00:01:14,560 --> 00:01:17,040
okay

9
00:01:17,759 --> 00:01:20,000
um

10
00:01:20,799 --> 00:01:23,520
if mary jose and jeffrey i think

11
00:01:23,520 --> 00:01:25,439
if you would

12
00:01:25,439 --> 00:01:27,840
kind of lock out and log in again um you

13
00:01:27,840 --> 00:01:29,840
should have delegate privileges like

14
00:01:29,840 --> 00:01:32,880
lisa yes and then that could make you

15
00:01:32,880 --> 00:01:36,479
could allow you to control the session

16
00:01:39,439 --> 00:01:40,799
i'll try

17
00:01:40,799 --> 00:01:42,240
thanks

18
00:01:42,240 --> 00:01:45,798
give that a shot

19
00:01:59,680 --> 00:02:02,680
so

20
00:02:26,570 --> 00:02:29,440
[Laughter]

21
00:02:29,440 --> 00:02:33,000
so it didn't work

22
00:02:40,000 --> 00:02:43,200
let's wait for marie jose

23
00:02:45,200 --> 00:02:48,480
no no luck okay

24
00:02:48,879 --> 00:02:52,239
then we figure out another way

25
00:02:52,239 --> 00:02:54,480
okay

26
00:02:57,680 --> 00:03:00,480
okay let's start

27
00:03:01,680 --> 00:03:03,360
welcome everybody

28
00:03:03,360 --> 00:03:04,560
to this

29
00:03:04,560 --> 00:03:07,120
ietf 114

30
00:03:07,120 --> 00:03:09,120
joint

31
00:03:09,120 --> 00:03:12,239
irtf session on icn and computing in the

32
00:03:12,239 --> 00:03:13,920
network so this is a joint meeting of

33
00:03:13,920 --> 00:03:15,920
icnrg and

34
00:03:15,920 --> 00:03:18,879
coinrg

35
00:03:18,879 --> 00:03:21,760
so we have some common topics some mind

36
00:03:21,760 --> 00:03:24,000
share in like distributed computing and

37
00:03:24,000 --> 00:03:25,840
networking so we thought it would be a

38
00:03:25,840 --> 00:03:27,360
good idea

39
00:03:27,360 --> 00:03:30,720
to try a joint session

40
00:03:30,720 --> 00:03:32,720
and um so that's what we're doing today

41
00:03:32,720 --> 00:03:33,599
so

42
00:03:33,599 --> 00:03:35,280
today um

43
00:03:35,280 --> 00:03:38,400
the first session will be on icn topics

44
00:03:38,400 --> 00:03:40,480
and the second half will be on on coin

45
00:03:40,480 --> 00:03:42,480
topics

46
00:03:42,480 --> 00:03:43,760
um

47
00:03:43,760 --> 00:03:46,080
i'm the culture my

48
00:03:46,080 --> 00:03:49,519
other remote coach is dave oran

49
00:03:49,519 --> 00:03:51,200
and

50
00:03:51,200 --> 00:03:54,159
we have lisha zhang in the room who

51
00:03:54,159 --> 00:03:55,760
kindly agreed to

52
00:03:55,760 --> 00:03:57,519
help us as a

53
00:03:57,519 --> 00:03:59,120
local co-chair today

54
00:03:59,120 --> 00:04:01,840
thanks a lot

55
00:04:03,680 --> 00:04:06,720
yeah as all meetings this one is

56
00:04:06,720 --> 00:04:09,280
recorded

57
00:04:09,439 --> 00:04:12,080
so just a quick a few housekeeping

58
00:04:12,080 --> 00:04:14,159
announcements first of all if you are in

59
00:04:14,159 --> 00:04:15,360
the room

60
00:04:15,360 --> 00:04:18,399
please make sure you're wearing an

61
00:04:18,399 --> 00:04:22,720
n95 or at least ffp2 mask

62
00:04:22,720 --> 00:04:23,759
um

63
00:04:23,759 --> 00:04:26,240
also we are here as all other sessions

64
00:04:26,240 --> 00:04:28,639
are using the meat echo

65
00:04:28,639 --> 00:04:32,479
queue management so please sign in

66
00:04:32,479 --> 00:04:34,320
to the session using the meet echo

67
00:04:34,320 --> 00:04:36,880
client or lite client

68
00:04:36,880 --> 00:04:38,960
and make sure you have your audio video

69
00:04:38,960 --> 00:04:40,960
off

70
00:04:40,960 --> 00:04:44,720
and um yeah i think

71
00:04:44,720 --> 00:04:47,680
remote participants uh by now probably

72
00:04:47,680 --> 00:04:49,840
know how to use their headsets and

73
00:04:49,840 --> 00:04:52,880
microphones so please

74
00:04:52,880 --> 00:04:53,680
um

75
00:04:53,680 --> 00:04:55,520
do that and

76
00:04:55,520 --> 00:04:56,400
um

77
00:04:56,400 --> 00:05:00,080
okay let's let's skip this um

78
00:05:00,080 --> 00:05:02,320
so we are

79
00:05:02,320 --> 00:05:04,320
following the ietf

80
00:05:04,320 --> 00:05:07,759
ipr disclosure rules so um in essence

81
00:05:07,759 --> 00:05:08,960
that means

82
00:05:08,960 --> 00:05:11,440
you will expect it to let us know if you

83
00:05:11,440 --> 00:05:15,120
um here see or say anything

84
00:05:15,120 --> 00:05:18,240
that has ipr relevance

85
00:05:18,240 --> 00:05:19,360
in a

86
00:05:19,360 --> 00:05:22,080
short timeframe

87
00:05:22,400 --> 00:05:26,960
um okay this is obviously recorded um

88
00:05:26,960 --> 00:05:29,680
and um there's also a

89
00:05:29,680 --> 00:05:32,240
privacy and code of conduct

90
00:05:32,240 --> 00:05:34,960
please consult these links if you are

91
00:05:34,960 --> 00:05:39,039
not familiar with these rules

92
00:05:39,039 --> 00:05:42,160
and finally um yeah we

93
00:05:42,160 --> 00:05:44,560
like to remind you that um well we are

94
00:05:44,560 --> 00:05:47,600
here to do um research uh

95
00:05:47,600 --> 00:05:50,560
although that we are using the same same

96
00:05:50,560 --> 00:05:53,280
mechanisms for managing documents and

97
00:05:53,280 --> 00:05:55,919
some research groups are also publishing

98
00:05:55,919 --> 00:05:57,280
our seas

99
00:05:57,280 --> 00:05:59,199
um we are typically not

100
00:05:59,199 --> 00:06:01,120
we're not doing standards so this is

101
00:06:01,120 --> 00:06:03,680
purely for research for enabling

102
00:06:03,680 --> 00:06:05,680
experimentation

103
00:06:05,680 --> 00:06:06,479
and

104
00:06:06,479 --> 00:06:08,160
so if you are unfamiliar

105
00:06:08,160 --> 00:06:09,280
with this

106
00:06:09,280 --> 00:06:12,679
check out rc7418

107
00:06:14,479 --> 00:06:16,400
okay so this is

108
00:06:16,400 --> 00:06:18,720
i see energy

109
00:06:18,720 --> 00:06:20,240
please join our mailing list if you

110
00:06:20,240 --> 00:06:22,720
haven't done so um

111
00:06:22,720 --> 00:06:25,600
so we only agreed um

112
00:06:25,600 --> 00:06:27,759
on having jose as a notetaker for the

113
00:06:27,759 --> 00:06:31,120
first half and um me for the second half

114
00:06:31,120 --> 00:06:32,160
so that's

115
00:06:32,160 --> 00:06:35,400
all sorted

116
00:06:35,680 --> 00:06:36,560
and

117
00:06:36,560 --> 00:06:38,560
this is the um

118
00:06:38,560 --> 00:06:39,759
icn

119
00:06:39,759 --> 00:06:42,720
uh agenda for today so we're gonna hear

120
00:06:42,720 --> 00:06:45,280
about um and the update on ping and

121
00:06:45,280 --> 00:06:48,960
traceroute and the update on um the data

122
00:06:48,960 --> 00:06:50,960
time encoding spec

123
00:06:50,960 --> 00:06:53,440
and then nicos is

124
00:06:53,440 --> 00:06:54,560
going to

125
00:06:54,560 --> 00:06:55,599
present

126
00:06:55,599 --> 00:06:58,000
um research work on

127
00:06:58,000 --> 00:07:00,240
selective content disclosure disclosure

128
00:07:00,240 --> 00:07:01,840
using um

129
00:07:01,840 --> 00:07:04,799
zero knowledge proofs

130
00:07:05,199 --> 00:07:06,240
and

131
00:07:06,240 --> 00:07:08,560
yeah that's it for for now and

132
00:07:08,560 --> 00:07:10,479
let's start with the ping and traceroute

133
00:07:10,479 --> 00:07:12,319
update unless there's anything else you

134
00:07:12,319 --> 00:07:14,000
want to

135
00:07:14,000 --> 00:07:15,599
suggest for

136
00:07:15,599 --> 00:07:18,560
discussion today

137
00:07:21,039 --> 00:07:23,360
all right

138
00:07:23,360 --> 00:07:25,039
so

139
00:07:25,039 --> 00:07:29,159
i'll stop sharing

140
00:07:35,120 --> 00:07:36,639
if i can just bring up the slides if you

141
00:07:36,639 --> 00:07:39,639
want

142
00:07:55,919 --> 00:07:57,440
so if i

143
00:07:57,440 --> 00:08:00,240
can hear a song

144
00:08:06,000 --> 00:08:08,160
so he may be experiencing some

145
00:08:08,160 --> 00:08:11,039
connectivity or audio

146
00:08:11,039 --> 00:08:16,120
let's issues him a few more seconds

147
00:08:27,919 --> 00:08:29,759
okay can you hear me

148
00:08:29,759 --> 00:08:32,799
yeah yeah oh finally okay so this will

149
00:08:32,799 --> 00:08:34,320
be really quick

150
00:08:34,320 --> 00:08:36,559
uh let's see i think i can drive

151
00:08:36,559 --> 00:08:40,119
slides right

152
00:08:45,440 --> 00:08:48,120
how do i drive the slides just a second

153
00:08:48,120 --> 00:08:51,320
[Music]

154
00:08:52,399 --> 00:08:56,240
i need to take control of the slides

155
00:08:58,880 --> 00:09:00,399
maybe you should just start tearing

156
00:09:00,399 --> 00:09:02,399
yourself and then you can control them

157
00:09:02,399 --> 00:09:04,880
wait i i can do it for a second

158
00:09:04,880 --> 00:09:07,360
i just i had to share it myself

159
00:09:07,360 --> 00:09:08,800
okay

160
00:09:08,800 --> 00:09:10,800
there we go now i think i can drive them

161
00:09:10,800 --> 00:09:12,959
right

162
00:09:15,760 --> 00:09:16,720
huh

163
00:09:16,720 --> 00:09:19,600
how do you drive them

164
00:09:19,600 --> 00:09:23,120
i've done this before

165
00:09:23,120 --> 00:09:25,600
i've got the slides shared

166
00:09:25,600 --> 00:09:28,560
so i i can't control them

167
00:09:28,560 --> 00:09:30,560
left and right arrow okay here we go

168
00:09:30,560 --> 00:09:32,080
okay so

169
00:09:32,080 --> 00:09:33,519
um

170
00:09:33,519 --> 00:09:35,040
these two specs have been around for

171
00:09:35,040 --> 00:09:36,880
quite a while they've been advancing

172
00:09:36,880 --> 00:09:38,160
slowly

173
00:09:38,160 --> 00:09:40,320
we got them through a research group

174
00:09:40,320 --> 00:09:41,440
last call

175
00:09:41,440 --> 00:09:43,839
a few months ago they went into irsg

176
00:09:43,839 --> 00:09:44,959
review

177
00:09:44,959 --> 00:09:47,519
um colin did a pre-review

178
00:09:47,519 --> 00:09:51,360
um and chris wood did the irsg review so

179
00:09:51,360 --> 00:09:52,959
thanks to both of them

180
00:09:52,959 --> 00:09:56,560
and during the review cycle um we

181
00:09:56,560 --> 00:09:58,240
actually we actually got the attention

182
00:09:58,240 --> 00:10:00,080
of uh some some folks who hadn't

183
00:10:00,080 --> 00:10:02,800
participated earlier thank you very much

184
00:10:02,800 --> 00:10:04,480
and jude chao

185
00:10:04,480 --> 00:10:07,040
offered us some comments uh at the same

186
00:10:07,040 --> 00:10:08,880
time we went through the irs g review

187
00:10:08,880 --> 00:10:11,360
and we've even we've gotten a few more

188
00:10:11,360 --> 00:10:15,040
uh since then mostly relating to uh some

189
00:10:15,040 --> 00:10:16,880
technical problems with how we decided

190
00:10:16,880 --> 00:10:18,640
to do the

191
00:10:18,640 --> 00:10:22,079
field encoding in ndn packets

192
00:10:22,079 --> 00:10:24,399
since the spec supports both

193
00:10:24,399 --> 00:10:28,240
ccnx and ndn as underlying protocols

194
00:10:28,240 --> 00:10:29,040
so

195
00:10:29,040 --> 00:10:31,040
we the latest versions are the ones that

196
00:10:31,040 --> 00:10:33,279
were in review

197
00:10:33,279 --> 00:10:35,600
um

198
00:10:35,839 --> 00:10:37,600
and uh

199
00:10:37,600 --> 00:10:41,200
so we made one set of updates uh colin

200
00:10:41,200 --> 00:10:42,560
seems to think his

201
00:10:42,560 --> 00:10:45,120
comments were addressed uh during his

202
00:10:45,120 --> 00:10:47,760
initial review to the irsg

203
00:10:47,760 --> 00:10:48,560
um

204
00:10:48,560 --> 00:10:52,160
i already mentioned uh june chaos um

205
00:10:52,160 --> 00:10:53,600
comments about

206
00:10:53,600 --> 00:10:56,560
um mdn packet format

207
00:10:56,560 --> 00:10:59,279
and uh we got some really good sort of

208
00:10:59,279 --> 00:11:01,360
general comments from chris

209
00:11:01,360 --> 00:11:03,680
um and those have been responded to on

210
00:11:03,680 --> 00:11:07,200
the list um and we'll try to get those

211
00:11:07,200 --> 00:11:08,800
changes into the spec

212
00:11:08,800 --> 00:11:11,200
uh pretty quickly

213
00:11:11,200 --> 00:11:13,200
so uh

214
00:11:13,200 --> 00:11:15,920
there's one other area where uh we seem

215
00:11:15,920 --> 00:11:18,399
to have blown it on the packet encoding

216
00:11:18,399 --> 00:11:19,680
for ndn

217
00:11:19,680 --> 00:11:22,720
which is how the path steering

218
00:11:22,720 --> 00:11:24,959
uh capability which is not actually in

219
00:11:24,959 --> 00:11:27,440
that spec it's another spec gets

220
00:11:27,440 --> 00:11:28,959
placed in the

221
00:11:28,959 --> 00:11:30,560
traceroute packets

222
00:11:30,560 --> 00:11:31,360
so

223
00:11:31,360 --> 00:11:33,120
um we need to do a little bit of

224
00:11:33,120 --> 00:11:35,120
technical work there both on the ping

225
00:11:35,120 --> 00:11:38,240
and tracer outspecs uh to point to the

226
00:11:38,240 --> 00:11:41,279
path steering spec and then uh since the

227
00:11:41,279 --> 00:11:43,440
path steering spec is mine

228
00:11:43,440 --> 00:11:45,440
i'm going to do an update of that to get

229
00:11:45,440 --> 00:11:48,800
the ndn packet coding uh correct

230
00:11:48,800 --> 00:11:51,040
so moving forward we're going to update

231
00:11:51,040 --> 00:11:52,959
both of those drafts plus the path

232
00:11:52,959 --> 00:11:54,880
steering draft

233
00:11:54,880 --> 00:11:57,279
in the next few weeks uh and hopefully

234
00:11:57,279 --> 00:11:59,200
that will be able to move everything

235
00:11:59,200 --> 00:12:01,920
forward i'll make one quick note

236
00:12:01,920 --> 00:12:04,320
uh that the past steering draft is still

237
00:12:04,320 --> 00:12:07,440
an individual draft and um dirk is going

238
00:12:07,440 --> 00:12:10,079
to talk probably at the end about uh

239
00:12:10,079 --> 00:12:13,040
whether we uh are ready to adopt that as

240
00:12:13,040 --> 00:12:15,360
an rg item so that we can move it

241
00:12:15,360 --> 00:12:17,760
forward in parallel the pan and pad

242
00:12:17,760 --> 00:12:20,399
steering the ping and trace route can go

243
00:12:20,399 --> 00:12:22,880
forward without path steering uh since

244
00:12:22,880 --> 00:12:25,279
it's useful in the absence of that but

245
00:12:25,279 --> 00:12:26,959
they work uh i hate to use the word

246
00:12:26,959 --> 00:12:28,880
synergistically but you know that's

247
00:12:28,880 --> 00:12:30,320
probably the right word

248
00:12:30,320 --> 00:12:33,279
uh together uh so having them all in the

249
00:12:33,279 --> 00:12:36,240
in the game here uh is probably a good

250
00:12:36,240 --> 00:12:38,639
idea so i'll take any questions folks

251
00:12:38,639 --> 00:12:39,600
have

252
00:12:39,600 --> 00:12:42,880
this is pretty straightforward

253
00:12:50,800 --> 00:12:52,399
going once

254
00:12:52,399 --> 00:12:53,600
going twice

255
00:12:53,600 --> 00:12:55,760
okay anything yeah you come up with

256
00:12:55,760 --> 00:12:58,480
please uh either contact spiros and me

257
00:12:58,480 --> 00:13:00,800
directly or post on the list preferably

258
00:13:00,800 --> 00:13:02,639
post on the list

259
00:13:02,639 --> 00:13:04,399
so thanks

260
00:13:04,399 --> 00:13:06,959
thanks dave

261
00:13:06,959 --> 00:13:07,839
um

262
00:13:07,839 --> 00:13:09,760
so actually i

263
00:13:09,760 --> 00:13:11,279
since you mentioned past during actually

264
00:13:11,279 --> 00:13:15,040
jumped ahead a bit um too fast

265
00:13:15,040 --> 00:13:18,079
let's just quickly

266
00:13:18,079 --> 00:13:21,839
look at our documents and

267
00:13:24,399 --> 00:13:26,720
so um here's a list of our current

268
00:13:26,720 --> 00:13:27,760
active

269
00:13:27,760 --> 00:13:29,440
documents so we just heard about ping

270
00:13:29,440 --> 00:13:30,959
and traceroute

271
00:13:30,959 --> 00:13:32,880
we are going to hear about

272
00:13:32,880 --> 00:13:35,279
the delta time encoding

273
00:13:35,279 --> 00:13:37,200
in a bit

274
00:13:37,200 --> 00:13:41,519
we have the ate 4g draft that i think is

275
00:13:41,519 --> 00:13:42,820
about to be published

276
00:13:42,820 --> 00:13:45,040
[Music]

277
00:13:45,040 --> 00:13:49,199
and we have ccn info which also has been

278
00:13:49,199 --> 00:13:51,360
um

279
00:13:51,360 --> 00:13:54,079
around in isg reviews and certain and

280
00:13:54,079 --> 00:13:56,560
and for some time so colin

281
00:13:56,560 --> 00:13:58,399
if you're listening do you know what's

282
00:13:58,399 --> 00:14:02,279
the latest state of this

283
00:14:11,440 --> 00:14:13,199
sorry i'm trying to listen to too many

284
00:14:13,199 --> 00:14:17,839
meetings at once yeah sure

285
00:14:18,000 --> 00:14:20,399
um

286
00:14:21,839 --> 00:14:26,240
as far as i know we're still waiting for

287
00:14:26,240 --> 00:14:27,120
um

288
00:14:27,120 --> 00:14:29,519
elastic checked we're still waiting for

289
00:14:29,519 --> 00:14:32,480
responses to the ballot i think it's got

290
00:14:32,480 --> 00:14:35,360
two yeses but i think one of them is

291
00:14:35,360 --> 00:14:36,959
you and

292
00:14:36,959 --> 00:14:38,480
you're the chair so you would have to

293
00:14:38,480 --> 00:14:40,320
recuse i think he doesn't quite have

294
00:14:40,320 --> 00:14:41,920
enough

295
00:14:41,920 --> 00:14:44,920
positions

296
00:14:45,600 --> 00:14:47,760
so i mean i think we if i'm remembering

297
00:14:47,760 --> 00:14:50,399
right we need to i need to remind the

298
00:14:50,399 --> 00:14:52,800
irs and see if we can persuade someone

299
00:14:52,800 --> 00:14:54,639
to either change their no objection to a

300
00:14:54,639 --> 00:14:56,800
yes or something else to review it

301
00:14:56,800 --> 00:14:58,560
okay yeah

302
00:14:58,560 --> 00:15:00,959
okay thanks

303
00:15:00,959 --> 00:15:03,120
great problem here

304
00:15:03,120 --> 00:15:05,199
we just need to finish off the

305
00:15:05,199 --> 00:15:06,480
reviews although i think there are some

306
00:15:06,480 --> 00:15:07,839
comments on the list that they get

307
00:15:07,839 --> 00:15:09,360
reflected yet

308
00:15:09,360 --> 00:15:12,160
um i think yeah they have been reflected

309
00:15:12,160 --> 00:15:13,680
um

310
00:15:13,680 --> 00:15:15,279
i think this is should be ready to go

311
00:15:15,279 --> 00:15:17,680
and to be honest um

312
00:15:17,680 --> 00:15:19,279
i think uh probably good to remind

313
00:15:19,279 --> 00:15:21,279
people once and

314
00:15:21,279 --> 00:15:23,519
and get this yeah i will remind people

315
00:15:23,519 --> 00:15:25,040
again after this meeting uh i've

316
00:15:25,040 --> 00:15:26,720
reminded send a couple of reminders

317
00:15:26,720 --> 00:15:30,160
already but i will do yeah i know

318
00:15:30,240 --> 00:15:33,120
okay great thanks

319
00:15:33,839 --> 00:15:36,079
and um

320
00:15:36,079 --> 00:15:38,560
yeah so dave just mentioned um past

321
00:15:38,560 --> 00:15:41,600
steering um which is

322
00:15:41,600 --> 00:15:42,320
not

323
00:15:42,320 --> 00:15:44,320
kind of really required for ping and

324
00:15:44,320 --> 00:15:47,519
trace mode but it's like in the same

325
00:15:47,519 --> 00:15:50,160
mental model of

326
00:15:50,160 --> 00:15:52,839
using icn

327
00:15:52,839 --> 00:15:54,639
and just

328
00:15:54,639 --> 00:15:56,399
to remind everyone that there has been

329
00:15:56,399 --> 00:15:59,600
an ipr declaration um

330
00:15:59,600 --> 00:16:03,360
on past d-ring um so just to

331
00:16:03,360 --> 00:16:04,639
i think we share this on the main list

332
00:16:04,639 --> 00:16:05,920
as well which

333
00:16:05,920 --> 00:16:07,600
just for completeness

334
00:16:07,600 --> 00:16:09,199
and last time

335
00:16:09,199 --> 00:16:12,560
we discussed adopting it as a research

336
00:16:12,560 --> 00:16:14,720
group document and we didn't really

337
00:16:14,720 --> 00:16:15,839
follow up

338
00:16:15,839 --> 00:16:18,320
on that so far um just checking if there

339
00:16:18,320 --> 00:16:20,000
are any

340
00:16:20,000 --> 00:16:23,839
uh opinions on that

341
00:16:25,360 --> 00:16:27,839
okay so then it's up to us to follow up

342
00:16:27,839 --> 00:16:29,440
on the main list um

343
00:16:29,440 --> 00:16:30,880
so maybe

344
00:16:30,880 --> 00:16:32,800
if you could note this uh on the meeting

345
00:16:32,800 --> 00:16:34,399
notes that would be great

346
00:16:34,399 --> 00:16:36,639
let me just uh mention what's what's the

347
00:16:36,639 --> 00:16:39,839
deal with this uh um ipr generation

348
00:16:39,839 --> 00:16:40,560
so

349
00:16:40,560 --> 00:16:41,360
um

350
00:16:41,360 --> 00:16:44,399
this is cisco ipr and cisco of course

351
00:16:44,399 --> 00:16:47,199
has the the standard itf

352
00:16:47,199 --> 00:16:48,480
uh you know

353
00:16:48,480 --> 00:16:51,199
mad type ipr disclosure which says you

354
00:16:51,199 --> 00:16:53,440
can use it just buy no royalties

355
00:16:53,440 --> 00:16:56,959
anything like that for itf documents now

356
00:16:56,959 --> 00:16:59,839
the problem is that cisco has no policy

357
00:16:59,839 --> 00:17:02,480
for irtf documents since they're not

358
00:17:02,480 --> 00:17:04,799
destined to be standards

359
00:17:04,799 --> 00:17:05,679
so

360
00:17:05,679 --> 00:17:07,119
um

361
00:17:07,119 --> 00:17:09,919
cisco did not put in an ipr declaration

362
00:17:09,919 --> 00:17:11,359
on path steering because they didn't

363
00:17:11,359 --> 00:17:13,520
know what to say so this is the third

364
00:17:13,520 --> 00:17:15,679
party declaration by me

365
00:17:15,679 --> 00:17:19,119
so just so people understand this is um

366
00:17:19,119 --> 00:17:20,959
in this sort of nether world where cisco

367
00:17:20,959 --> 00:17:22,959
doesn't know what to say

368
00:17:22,959 --> 00:17:24,319
about it

369
00:17:24,319 --> 00:17:25,839
since they don't have a policy for

370
00:17:25,839 --> 00:17:29,280
non-standards documents

371
00:17:30,960 --> 00:17:34,240
yeah thanks that's that's good to know

372
00:17:34,240 --> 00:17:38,000
okay so um with that let's move on and

373
00:17:38,000 --> 00:17:39,360
um so next

374
00:17:39,360 --> 00:17:42,480
on the on the agenda would be um thomas

375
00:17:42,480 --> 00:17:45,440
um who i think is in the room

376
00:17:45,440 --> 00:17:47,440
and

377
00:17:47,440 --> 00:17:49,039
i think i should bring up the slides all

378
00:17:49,039 --> 00:17:51,679
right um yes i'm in the room and it

379
00:17:51,679 --> 00:17:54,960
would be nice to if you drove my slides

380
00:17:54,960 --> 00:17:56,160
so this is

381
00:17:56,160 --> 00:17:58,640
um this is an update of the alternative

382
00:17:58,640 --> 00:18:00,960
delta time encoding for ccnx using

383
00:18:00,960 --> 00:18:02,320
compact

384
00:18:02,320 --> 00:18:04,720
time formats uh this was recently

385
00:18:04,720 --> 00:18:07,760
adopted or after last ietf

386
00:18:07,760 --> 00:18:09,840
some sometime then

387
00:18:09,840 --> 00:18:12,080
as a research group document so this is

388
00:18:12,080 --> 00:18:14,400
actually the research group document

389
00:18:14,400 --> 00:18:17,919
version 0 i'm presenting which has

390
00:18:17,919 --> 00:18:20,880
addressed a couple

391
00:18:22,000 --> 00:18:23,120
let's say

392
00:18:23,120 --> 00:18:27,679
cosmetic things and also editorial

393
00:18:27,679 --> 00:18:30,000
aspects so i will give a brief recap

394
00:18:30,000 --> 00:18:32,400
next slide please

395
00:18:32,400 --> 00:18:34,240
so what is the objective we are looking

396
00:18:34,240 --> 00:18:36,960
at uh constrained iot networks here and

397
00:18:36,960 --> 00:18:39,520
in this context the the research group

398
00:18:39,520 --> 00:18:40,720
has

399
00:18:40,720 --> 00:18:44,880
produced the rfc 9139 which is icn lopen

400
00:18:44,880 --> 00:18:47,600
and that was one open question on how

401
00:18:47,600 --> 00:18:48,559
can we

402
00:18:48,559 --> 00:18:50,559
can we make the

403
00:18:50,559 --> 00:18:52,960
time and coding more efficient because

404
00:18:52,960 --> 00:18:54,880
in these constrained

405
00:18:54,880 --> 00:18:56,480
environments the bandwidth is low and

406
00:18:56,480 --> 00:18:58,880
the latency is high we have slow links

407
00:18:58,880 --> 00:19:00,960
lossy links so the more data you put on

408
00:19:00,960 --> 00:19:03,280
the link the more you lose

409
00:19:03,280 --> 00:19:06,639
and just the um

410
00:19:06,720 --> 00:19:07,600
i mean

411
00:19:07,600 --> 00:19:10,240
generally the field of power is that the

412
00:19:10,240 --> 00:19:12,960
the node processing capacities

413
00:19:12,960 --> 00:19:14,400
are

414
00:19:14,400 --> 00:19:16,640
larger and less

415
00:19:16,640 --> 00:19:19,679
battery energy consuming

416
00:19:19,679 --> 00:19:22,720
than using the links so we want to

417
00:19:22,720 --> 00:19:23,440
to

418
00:19:23,440 --> 00:19:26,320
pre-process or process on the nodes to

419
00:19:26,320 --> 00:19:29,919
save link bandwidth next slide please

420
00:19:29,919 --> 00:19:32,880
and for this we look at the um

421
00:19:32,880 --> 00:19:35,760
tlvs that represent time so this this is

422
00:19:35,760 --> 00:19:38,880
the way it uh it is encoded currently in

423
00:19:38,880 --> 00:19:40,720
the ccnx specs

424
00:19:40,720 --> 00:19:43,039
so we have relative times

425
00:19:43,039 --> 00:19:46,240
uh that is um

426
00:19:46,240 --> 00:19:48,880
that is an offset with a

427
00:19:48,880 --> 00:19:50,559
given in millisecond seconds with a

428
00:19:50,559 --> 00:19:53,200
variable length so it can be

429
00:19:53,200 --> 00:19:55,200
can be larger than one byte so there's a

430
00:19:55,200 --> 00:19:56,960
length field and then you can have a

431
00:19:56,960 --> 00:19:59,520
corresponding longer

432
00:19:59,520 --> 00:20:00,799
time

433
00:20:00,799 --> 00:20:02,799
time value and then there are absolute

434
00:20:02,799 --> 00:20:06,000
times that that always have a length of

435
00:20:06,000 --> 00:20:09,200
eight and uh this is a ut utc

436
00:20:09,200 --> 00:20:10,799
time encoding

437
00:20:10,799 --> 00:20:13,200
an epoch timer encoding in the length of

438
00:20:13,200 --> 00:20:14,400
eight bytes

439
00:20:14,400 --> 00:20:17,360
so next slide please um

440
00:20:17,360 --> 00:20:20,640
so the the mechanism we

441
00:20:20,640 --> 00:20:22,480
want to introduce here is a compact time

442
00:20:22,480 --> 00:20:24,640
encoding that supports a dynamic range

443
00:20:24,640 --> 00:20:26,720
it is built in milliseconds

444
00:20:26,720 --> 00:20:28,640
um

445
00:20:28,640 --> 00:20:31,360
from an exponent in mantissa so that you

446
00:20:31,360 --> 00:20:34,960
have a very you are have a relatively

447
00:20:34,960 --> 00:20:37,039
high precision in the small time values

448
00:20:37,039 --> 00:20:39,360
and a relatively uh

449
00:20:39,360 --> 00:20:41,039
coarse-grained uh

450
00:20:41,039 --> 00:20:43,039
precision in the in the larger values so

451
00:20:43,039 --> 00:20:44,960
if you look at the formula you have the

452
00:20:44,960 --> 00:20:47,360
subnormal part where you actually start

453
00:20:47,360 --> 00:20:49,360
uh

454
00:20:49,360 --> 00:20:51,520
start with a i mean that the distinction

455
00:20:51,520 --> 00:20:54,320
between the two uh uh formulas is that

456
00:20:54,320 --> 00:20:56,400
the the the upper formula starts with a

457
00:20:56,400 --> 00:20:57,360
zero

458
00:20:57,360 --> 00:20:59,679
so you have basically you you divide the

459
00:20:59,679 --> 00:21:01,440
mantissa and then

460
00:21:01,440 --> 00:21:03,840
then you divide further

461
00:21:03,840 --> 00:21:07,120
uh for the value of an exponent value of

462
00:21:07,120 --> 00:21:08,960
zero if the exponent value is larger

463
00:21:08,960 --> 00:21:10,720
then you actually go into an exponential

464
00:21:10,720 --> 00:21:13,200
representation which is uh which is of

465
00:21:13,200 --> 00:21:16,000
course grained in larger values so next

466
00:21:16,000 --> 00:21:16,960
slide

467
00:21:16,960 --> 00:21:18,799
please

468
00:21:18,799 --> 00:21:21,280
so the existing time values

469
00:21:21,280 --> 00:21:24,240
are in interest and data messages so in

470
00:21:24,240 --> 00:21:26,159
in the interest lifetime you have a

471
00:21:26,159 --> 00:21:28,480
relative time in the hop by hop header

472
00:21:28,480 --> 00:21:30,240
and in the interest and the interest

473
00:21:30,240 --> 00:21:32,080
message itself has a signature time

474
00:21:32,080 --> 00:21:34,080
which is an absolute value

475
00:21:34,080 --> 00:21:36,159
and for the data you have an absolute

476
00:21:36,159 --> 00:21:38,559
value for the hop by hop header

477
00:21:38,559 --> 00:21:40,799
which is a recommended cache time and

478
00:21:40,799 --> 00:21:43,200
you have an once again a signature time

479
00:21:43,200 --> 00:21:45,679
which is also an absolute value so the

480
00:21:45,679 --> 00:21:47,600
idea is to convert

481
00:21:47,600 --> 00:21:49,679
the recommended cash time to relative

482
00:21:49,679 --> 00:21:53,760
times and to compress interest lifetime

483
00:21:54,320 --> 00:21:56,480
but but leave the leave the signature

484
00:21:56,480 --> 00:21:59,440
times intact so next slide please

485
00:21:59,440 --> 00:22:03,440
so what uh changes is um

486
00:22:03,440 --> 00:22:06,240
in the k if you're given the the

487
00:22:06,240 --> 00:22:08,640
currently existing protocol in the case

488
00:22:08,640 --> 00:22:09,520
where

489
00:22:09,520 --> 00:22:12,240
it is encoded a length of one so that

490
00:22:12,240 --> 00:22:15,440
means a short length field then we put

491
00:22:15,440 --> 00:22:17,840
in the we want to put in the compact

492
00:22:17,840 --> 00:22:19,440
time offset

493
00:22:19,440 --> 00:22:21,440
and in the case the length value is

494
00:22:21,440 --> 00:22:23,840
larger than one

495
00:22:23,840 --> 00:22:26,320
in the encoding we use the regular i

496
00:22:26,320 --> 00:22:28,559
mean we just keep the regular timing

497
00:22:28,559 --> 00:22:30,880
intact to make to make the

498
00:22:30,880 --> 00:22:33,120
uh the protocol to plug into the

499
00:22:33,120 --> 00:22:34,720
existing

500
00:22:34,720 --> 00:22:36,880
into into the existing

501
00:22:36,880 --> 00:22:38,880
protocol encoding because i mean as we

502
00:22:38,880 --> 00:22:41,679
understand not all ccnx packets are on

503
00:22:41,679 --> 00:22:43,360
constrained devices

504
00:22:43,360 --> 00:22:46,159
so next slide please

505
00:22:46,159 --> 00:22:47,280
so

506
00:22:47,280 --> 00:22:49,039
this is the case for the protocol

507
00:22:49,039 --> 00:22:50,720
integration for the recommended cache

508
00:22:50,720 --> 00:22:52,640
time before it was an absolute value of

509
00:22:52,640 --> 00:22:56,240
length eight now we change uh to this

510
00:22:56,240 --> 00:22:58,720
duality if it's uh

511
00:22:58,720 --> 00:23:00,720
if it's encoded with a length one then

512
00:23:00,720 --> 00:23:03,440
we use a compact time offset of of uh

513
00:23:03,440 --> 00:23:05,679
one byte if it's uh if it continues to

514
00:23:05,679 --> 00:23:08,000
be length one length eight and it's the

515
00:23:08,000 --> 00:23:09,360
regular timing

516
00:23:09,360 --> 00:23:12,879
values on the next slide please

517
00:23:14,480 --> 00:23:15,440
uh

518
00:23:15,440 --> 00:23:17,760
uh sorry uh

519
00:23:17,760 --> 00:23:19,919
we already have the cache name sorry

520
00:23:19,919 --> 00:23:22,320
yeah i'm fine i was just i was confused

521
00:23:22,320 --> 00:23:24,559
um so what are the the diffs to the

522
00:23:24,559 --> 00:23:26,720
version zero five of the individual

523
00:23:26,720 --> 00:23:28,080
draft uh

524
00:23:28,080 --> 00:23:29,760
um

525
00:23:29,760 --> 00:23:33,120
so we we uh um

526
00:23:33,120 --> 00:23:35,200
updated the the integration of the

527
00:23:35,200 --> 00:23:36,720
interest lifetime

528
00:23:36,720 --> 00:23:39,440
and the recommended cash time to to uh

529
00:23:39,440 --> 00:23:41,840
to in into interpret the

530
00:23:41,840 --> 00:23:44,000
corresponding values we added equations

531
00:23:44,000 --> 00:23:47,200
to approximate the conversion

532
00:23:47,200 --> 00:23:49,919
and just to to estimate the error that

533
00:23:49,919 --> 00:23:51,760
actually occurs because you you cannot

534
00:23:51,760 --> 00:23:54,559
represent any value every value anymore

535
00:23:54,559 --> 00:23:56,799
there's an approximation formula which

536
00:23:56,799 --> 00:23:59,520
helps to to see what actually what what

537
00:23:59,520 --> 00:24:02,080
error you you're producing it's a simple

538
00:24:02,080 --> 00:24:05,120
formula we also re arrange the

539
00:24:05,120 --> 00:24:06,559
references and the acknowledgement

540
00:24:06,559 --> 00:24:08,080
section and

541
00:24:08,080 --> 00:24:10,159
from our side this is a pretty pretty

542
00:24:10,159 --> 00:24:12,960
mature document but please feel free

543
00:24:12,960 --> 00:24:17,679
please uh feedback to get this document

544
00:24:17,679 --> 00:24:19,919
finalized

545
00:24:19,919 --> 00:24:20,960
okay

546
00:24:20,960 --> 00:24:22,159
questions

547
00:24:22,159 --> 00:24:22,880
um

548
00:24:22,880 --> 00:24:25,200
rick taylor industries uh just a sort of

549
00:24:25,200 --> 00:24:27,039
general question on this one how far

550
00:24:27,039 --> 00:24:29,840
does this deviate from ieee 754

551
00:24:29,840 --> 00:24:32,240
formatting i noticed you've got no sign

552
00:24:32,240 --> 00:24:33,039
bit

553
00:24:33,039 --> 00:24:34,960
i'm assuming you don't support infinite

554
00:24:34,960 --> 00:24:36,320
values

555
00:24:36,320 --> 00:24:39,039
no it is um i've actually

556
00:24:39,039 --> 00:24:41,600
we had this discussion i mean there

557
00:24:41,600 --> 00:24:43,600
are different time formats existing

558
00:24:43,600 --> 00:24:45,919
there's this ieee format there's also a

559
00:24:45,919 --> 00:24:48,080
time format by the ietf that was uh

560
00:24:48,080 --> 00:24:50,000
introduced

561
00:24:50,000 --> 00:24:51,679
i guess in the

562
00:24:51,679 --> 00:24:54,320
context of

563
00:24:55,200 --> 00:24:57,200
of some routing protocols so my question

564
00:24:57,200 --> 00:24:58,799
is not about the time format it's about

565
00:24:58,799 --> 00:25:01,440
the floating point format so everyone's

566
00:25:01,440 --> 00:25:04,240
pretty well experienced with ieee 754

567
00:25:04,240 --> 00:25:06,480
floating for floating point for 32-bit

568
00:25:06,480 --> 00:25:09,039
floats and 64-bit floats with silicon

569
00:25:09,039 --> 00:25:10,640
support

570
00:25:10,640 --> 00:25:13,279
i know there's an 8-bit float support

571
00:25:13,279 --> 00:25:16,480
used in in graphics quite heavily

572
00:25:16,480 --> 00:25:19,440
if this deviates too far away from that

573
00:25:19,440 --> 00:25:21,919
are we losing the ability to use silicon

574
00:25:21,919 --> 00:25:24,080
that already understands how to do this

575
00:25:24,080 --> 00:25:25,919
this work i know

576
00:25:25,919 --> 00:25:27,919
i i'm just interested in the in the diff

577
00:25:27,919 --> 00:25:31,120
i know you don't need negative times no

578
00:25:31,120 --> 00:25:32,840
and i know you don't need

579
00:25:32,840 --> 00:25:35,520
unrepresentable times you know uh

580
00:25:35,520 --> 00:25:38,080
division by zero infinity and so on i'm

581
00:25:38,080 --> 00:25:40,480
just wondering whether it whether the

582
00:25:40,480 --> 00:25:42,400
working group has considered

583
00:25:42,400 --> 00:25:45,520
the benefits of

584
00:25:45,520 --> 00:25:47,840
not including support for those weighed

585
00:25:47,840 --> 00:25:48,880
against

586
00:25:48,880 --> 00:25:50,240
supporting something that's pretty

587
00:25:50,240 --> 00:25:52,000
industry standard from a sort of silicon

588
00:25:52,000 --> 00:25:54,400
perspective as a sort of well-known way

589
00:25:54,400 --> 00:25:56,400
of dealing with floating point numbers

590
00:25:56,400 --> 00:25:58,480
i mean we had the uh i mean the

591
00:25:58,480 --> 00:26:00,400
discussion we had a longer discussion

592
00:26:00,400 --> 00:26:02,480
about the the actual format and also

593
00:26:02,480 --> 00:26:05,200
about we were also discussing the ieee

594
00:26:05,200 --> 00:26:06,320
format

595
00:26:06,320 --> 00:26:09,360
um i'm not sure i recall everything uh

596
00:26:09,360 --> 00:26:12,000
correctly in the moment so maybe uh i

597
00:26:12,000 --> 00:26:14,400
mean if this is we

598
00:26:14,400 --> 00:26:15,840
should probably have a follow-up on the

599
00:26:15,840 --> 00:26:17,440
list if uh

600
00:26:17,440 --> 00:26:19,919
if we need to recap all this uh

601
00:26:19,919 --> 00:26:22,240
discussions it's actually something like

602
00:26:22,240 --> 00:26:24,480
two years ago or so

603
00:26:24,480 --> 00:26:26,159
it's it's great work done don't get me

604
00:26:26,159 --> 00:26:27,360
wrong i just think there's some new ones

605
00:26:27,360 --> 00:26:30,080
in here but thanks

606
00:26:32,320 --> 00:26:35,760
all right see no other

607
00:26:35,760 --> 00:26:39,840
nobody that's on the queue at the moment

608
00:26:41,679 --> 00:26:43,120
yeah thanks a lot

609
00:26:43,120 --> 00:26:45,120
thomas and chank and team for

610
00:26:45,120 --> 00:26:47,200
progressing this and

611
00:26:47,200 --> 00:26:49,760
also for everyone paying attention

612
00:26:49,760 --> 00:26:52,720
to details and providing comments so we

613
00:26:52,720 --> 00:26:55,440
hope to get this

614
00:26:55,520 --> 00:26:58,639
finished in the near future

615
00:26:59,679 --> 00:27:02,000
okay

616
00:27:02,240 --> 00:27:05,120
so let's move to our next agenda item

617
00:27:05,120 --> 00:27:06,720
and this would be nikos was his

618
00:27:06,720 --> 00:27:08,320
presentation

619
00:27:08,320 --> 00:27:10,000
and he wanted to

620
00:27:10,000 --> 00:27:13,120
run the slides himself

621
00:27:18,159 --> 00:27:23,200
can you hear me we can access granted

622
00:27:23,200 --> 00:27:24,559
okay

623
00:27:24,559 --> 00:27:25,760
so

624
00:27:25,760 --> 00:27:28,730
i'm sharing my screen now and

625
00:27:28,730 --> 00:27:30,559
[Music]

626
00:27:30,559 --> 00:27:32,640
i don't see

627
00:27:32,640 --> 00:27:34,960
the conference tool so

628
00:27:34,960 --> 00:27:37,279
if there is a comment or someone do you

629
00:27:37,279 --> 00:27:40,559
want to intervene please

630
00:27:41,039 --> 00:27:43,600
yeah let me know so

631
00:27:43,600 --> 00:27:45,279
uh

632
00:27:45,279 --> 00:27:48,080
i'm going to present you our ongoing

633
00:27:48,080 --> 00:27:50,640
work on uh selective conduct disclosure

634
00:27:50,640 --> 00:27:53,200
using zero knowledge proofs

635
00:27:53,200 --> 00:27:55,279
i am nikos fatihu from the athens

636
00:27:55,279 --> 00:27:58,240
university of economic and business and

637
00:27:58,240 --> 00:28:00,799
also in this meeting is george xilomenos

638
00:28:00,799 --> 00:28:03,520
who is a part of the thing

639
00:28:03,520 --> 00:28:05,919
doing this stuff

640
00:28:05,919 --> 00:28:08,640
so a bit of a bulk round

641
00:28:08,640 --> 00:28:11,279
related to this talk

642
00:28:11,279 --> 00:28:13,760
the main building block of

643
00:28:13,760 --> 00:28:16,320
the solution that i'm going to present

644
00:28:16,320 --> 00:28:19,120
is a digital signature scheme

645
00:28:19,120 --> 00:28:21,039
called bbs

646
00:28:21,039 --> 00:28:24,000
which was initially proposed by

647
00:28:24,000 --> 00:28:27,440
pone and others in the paper

648
00:28:27,440 --> 00:28:30,640
included in the first bullet of this

649
00:28:30,640 --> 00:28:31,840
list

650
00:28:31,840 --> 00:28:32,720
and

651
00:28:32,720 --> 00:28:36,159
this signature scheme was initially

652
00:28:36,159 --> 00:28:38,399
designed to allow

653
00:28:38,399 --> 00:28:40,960
users to sign group of messages

654
00:28:40,960 --> 00:28:44,240
then many others extend this scheme to

655
00:28:44,240 --> 00:28:46,799
include zero knowledge proofs

656
00:28:46,799 --> 00:28:47,760
and

657
00:28:47,760 --> 00:28:51,919
one of the the latest and most important

658
00:28:51,919 --> 00:28:54,399
extension to this scheme is by

659
00:28:54,399 --> 00:28:56,480
governments and all and

660
00:28:56,480 --> 00:28:58,960
you can find it in the paper included in

661
00:28:58,960 --> 00:29:02,640
the second bullet of this list

662
00:29:02,640 --> 00:29:04,399
so

663
00:29:04,399 --> 00:29:06,480
earlier this week

664
00:29:06,480 --> 00:29:09,200
in this iedf meeting

665
00:29:09,200 --> 00:29:12,799
there was a head talk by tobias lucker

666
00:29:12,799 --> 00:29:14,480
about

667
00:29:14,480 --> 00:29:16,480
this signature scheme

668
00:29:16,480 --> 00:29:18,720
tobias and others

669
00:29:18,720 --> 00:29:21,679
are using this signature scheme

670
00:29:21,679 --> 00:29:22,720
and

671
00:29:22,720 --> 00:29:23,600
they are

672
00:29:23,600 --> 00:29:25,679
developing a solution in the context of

673
00:29:25,679 --> 00:29:28,399
identity foundation

674
00:29:28,399 --> 00:29:30,320
that applies this signature in a

675
00:29:30,320 --> 00:29:33,360
technology called verifiable credentials

676
00:29:33,360 --> 00:29:36,320
and using this technology

677
00:29:36,320 --> 00:29:39,200
they allow users

678
00:29:39,200 --> 00:29:41,279
to selectively disclose your claims

679
00:29:41,279 --> 00:29:43,039
about themselves

680
00:29:43,039 --> 00:29:44,000
and

681
00:29:44,000 --> 00:29:46,399
all these claims are included in this

682
00:29:46,399 --> 00:29:48,640
so-called verified credential

683
00:29:48,640 --> 00:29:49,760
so

684
00:29:49,760 --> 00:29:51,600
the purpose of

685
00:29:51,600 --> 00:29:54,559
the talk of tobias in this meeting

686
00:29:54,559 --> 00:29:56,320
was to propose

687
00:29:56,320 --> 00:29:58,640
the adoption of this signature scheme by

688
00:29:58,640 --> 00:30:01,520
iatf and in particular by

689
00:30:01,520 --> 00:30:03,440
cfrg

690
00:30:03,440 --> 00:30:04,399
and

691
00:30:04,399 --> 00:30:06,720
if this happens it's going to be very

692
00:30:06,720 --> 00:30:08,399
exciting

693
00:30:08,399 --> 00:30:10,000
so

694
00:30:10,000 --> 00:30:13,360
many related works uh are investigating

695
00:30:13,360 --> 00:30:16,399
this signature scheme mostly in the

696
00:30:16,399 --> 00:30:19,919
context of digital credentials

697
00:30:19,919 --> 00:30:23,520
what we are doing in our lab is we are

698
00:30:23,520 --> 00:30:26,799
trying to apply this signature scheme

699
00:30:26,799 --> 00:30:29,200
for implementing selective disclosure of

700
00:30:29,200 --> 00:30:32,720
content so currently

701
00:30:32,720 --> 00:30:35,520
we are running two projects the first

702
00:30:35,520 --> 00:30:38,159
one is called second

703
00:30:38,159 --> 00:30:42,480
and the it is funded by nga atlantic

704
00:30:42,480 --> 00:30:44,880
this is in cooperation with the

705
00:30:44,880 --> 00:30:48,000
university of memphis and in this

706
00:30:48,000 --> 00:30:50,799
project we are trying uh we are

707
00:30:50,799 --> 00:30:52,320
exploring the application of this

708
00:30:52,320 --> 00:30:55,760
signature scheme in nbn and as a matter

709
00:30:55,760 --> 00:30:57,360
of fact

710
00:30:57,360 --> 00:30:59,360
we are we have scheduled some

711
00:30:59,360 --> 00:31:02,240
experiments to take place in the indian

712
00:31:02,240 --> 00:31:04,880
testbed

713
00:31:04,880 --> 00:31:07,440
the second project is called select

714
00:31:07,440 --> 00:31:08,799
share

715
00:31:08,799 --> 00:31:12,640
it is funded by ngidabc and there with

716
00:31:12,640 --> 00:31:14,720
two sms

717
00:31:14,720 --> 00:31:16,799
we are applying this signature scheme

718
00:31:16,799 --> 00:31:21,039
for providing a solution that allows a

719
00:31:21,039 --> 00:31:22,960
secure sharing of

720
00:31:22,960 --> 00:31:24,960
iot measurement data

721
00:31:24,960 --> 00:31:25,840
so

722
00:31:25,840 --> 00:31:27,279
you can find

723
00:31:27,279 --> 00:31:29,440
more information about this project as

724
00:31:29,440 --> 00:31:32,960
well as reports pointers to source code

725
00:31:32,960 --> 00:31:35,519
and the url included

726
00:31:35,519 --> 00:31:40,000
at the bottom left part of these slides

727
00:31:40,000 --> 00:31:44,240
so what is our goal with these projects

728
00:31:44,240 --> 00:31:47,840
we want to develop a solution that will

729
00:31:47,840 --> 00:31:50,399
allow casting of data

730
00:31:50,399 --> 00:31:52,880
on which we can make computations so we

731
00:31:52,880 --> 00:31:54,960
are not talking about

732
00:31:54,960 --> 00:31:58,799
bulk data but we are talking about data

733
00:31:58,799 --> 00:32:03,120
like relational database or data streams

734
00:32:03,120 --> 00:32:06,080
generated by iot devices

735
00:32:06,080 --> 00:32:09,440
this data can even be

736
00:32:09,440 --> 00:32:09,640
the

737
00:32:09,640 --> 00:32:10,960
[Music]

738
00:32:10,960 --> 00:32:14,559
the log of operations in a distributed

739
00:32:14,559 --> 00:32:16,960
ledger or it can be

740
00:32:16,960 --> 00:32:19,120
the graph of a distributed social

741
00:32:19,120 --> 00:32:21,840
networks you name them so the

742
00:32:21,840 --> 00:32:24,559
applications are countless

743
00:32:24,559 --> 00:32:26,640
so we want

744
00:32:26,640 --> 00:32:28,480
to allow the storage

745
00:32:28,480 --> 00:32:31,200
of this data uh in

746
00:32:31,200 --> 00:32:33,600
third party storage providers

747
00:32:33,600 --> 00:32:36,799
we want to allow users uh to request

748
00:32:36,799 --> 00:32:38,880
portions of this data

749
00:32:38,880 --> 00:32:41,679
and at the same time we want to enable

750
00:32:41,679 --> 00:32:43,840
these storage providers to provide

751
00:32:43,840 --> 00:32:46,799
proofs of integrity but without sharing

752
00:32:46,799 --> 00:32:48,480
with them

753
00:32:48,480 --> 00:32:52,080
signature schemes signature keys

754
00:32:52,080 --> 00:32:55,279
so let me give you an example

755
00:32:55,279 --> 00:32:58,159
so this

756
00:32:58,159 --> 00:32:59,360
json

757
00:32:59,360 --> 00:33:00,799
object

758
00:33:00,799 --> 00:33:03,200
represents a

759
00:33:03,200 --> 00:33:06,159
data item that includes information

760
00:33:06,159 --> 00:33:08,640
about some measurements generated by an

761
00:33:08,640 --> 00:33:11,840
iot device and

762
00:33:11,840 --> 00:33:14,640
this file has been assigned by somebody

763
00:33:14,640 --> 00:33:17,360
for example the device owner

764
00:33:17,360 --> 00:33:21,519
and this file is stored as a whole

765
00:33:21,519 --> 00:33:23,679
in a storage node which can be something

766
00:33:23,679 --> 00:33:25,600
like into the web server

767
00:33:25,600 --> 00:33:27,760
to a cdn node or even

768
00:33:27,760 --> 00:33:29,440
to a cast

769
00:33:29,440 --> 00:33:30,320
and

770
00:33:30,320 --> 00:33:33,760
we want to enable users to perform

771
00:33:33,760 --> 00:33:37,039
queries like this runs so i want from

772
00:33:37,039 --> 00:33:40,399
this particular file to access

773
00:33:40,399 --> 00:33:42,960
the temperature measurement

774
00:33:42,960 --> 00:33:46,159
generated by this particular device

775
00:33:46,159 --> 00:33:49,679
and the reasons for making such queries

776
00:33:49,679 --> 00:33:51,039
are either

777
00:33:51,039 --> 00:33:54,080
this user recently is interested only in

778
00:33:54,080 --> 00:33:56,879
these two

779
00:33:57,120 --> 00:33:59,919
these two fields included in this file

780
00:33:59,919 --> 00:34:02,640
or even more importantly this user is

781
00:34:02,640 --> 00:34:04,880
authorized to access only these two

782
00:34:04,880 --> 00:34:07,679
fields and

783
00:34:07,679 --> 00:34:10,079
we are working on a solution

784
00:34:10,079 --> 00:34:12,879
that allows firstly users to perform

785
00:34:12,879 --> 00:34:14,159
such

786
00:34:14,159 --> 00:34:17,760
a qrs and we do that in a way

787
00:34:17,760 --> 00:34:19,760
which is compatibly

788
00:34:19,760 --> 00:34:24,639
with ndn api and secondly we allow

789
00:34:24,639 --> 00:34:26,960
storage snows to respond to these

790
00:34:26,960 --> 00:34:28,399
queries

791
00:34:28,399 --> 00:34:30,480
in a way

792
00:34:30,480 --> 00:34:32,399
that allows

793
00:34:32,399 --> 00:34:35,199
users to verify the integrity and the

794
00:34:35,199 --> 00:34:39,199
correctness of the generated response

795
00:34:39,599 --> 00:34:42,639
so i will first introduce

796
00:34:42,639 --> 00:34:44,560
the signature scheme which is the main

797
00:34:44,560 --> 00:34:46,000
building block

798
00:34:46,000 --> 00:34:49,440
of our system so i guess you are all

799
00:34:49,440 --> 00:34:51,599
familiar with digital signatures

800
00:34:51,599 --> 00:34:54,239
traditional digital signatures allow a

801
00:34:54,239 --> 00:34:57,280
signer to sign a message and then a

802
00:34:57,280 --> 00:34:59,359
verifier

803
00:34:59,359 --> 00:35:02,000
can validate the digital signatures of

804
00:35:02,000 --> 00:35:04,160
this message using the public key of

805
00:35:04,160 --> 00:35:05,680
designer

806
00:35:05,680 --> 00:35:09,200
so group signatures are very similar

807
00:35:09,200 --> 00:35:11,680
the only difference is that the sire

808
00:35:11,680 --> 00:35:15,119
instead of signing a secret message

809
00:35:15,119 --> 00:35:18,160
it is capable of signing a

810
00:35:18,160 --> 00:35:20,800
a group of messages and then the

811
00:35:20,800 --> 00:35:23,680
verifier can in a similar way

812
00:35:23,680 --> 00:35:24,800
validate

813
00:35:24,800 --> 00:35:28,480
the digital signature of this

814
00:35:28,480 --> 00:35:30,560
group of messages so

815
00:35:30,560 --> 00:35:31,920
so far

816
00:35:31,920 --> 00:35:32,960
there is

817
00:35:32,960 --> 00:35:35,200
there are no significant difference

818
00:35:35,200 --> 00:35:37,839
but the group signatures have a very

819
00:35:37,839 --> 00:35:40,000
nice property

820
00:35:40,000 --> 00:35:41,359
they allow

821
00:35:41,359 --> 00:35:43,119
a third party

822
00:35:43,119 --> 00:35:46,079
which we call the prover

823
00:35:46,079 --> 00:35:48,560
that has access only

824
00:35:48,560 --> 00:35:49,440
to the

825
00:35:49,440 --> 00:35:51,680
this group of messages into the digital

826
00:35:51,680 --> 00:35:54,240
signature

827
00:35:54,640 --> 00:35:55,920
to hide

828
00:35:55,920 --> 00:35:56,800
some

829
00:35:56,800 --> 00:35:59,920
elements of this group of messages

830
00:35:59,920 --> 00:36:03,200
and at the same time provide

831
00:36:03,200 --> 00:36:04,480
a proof

832
00:36:04,480 --> 00:36:06,800
that proves that

833
00:36:06,800 --> 00:36:08,560
the revealed

834
00:36:08,560 --> 00:36:12,320
items are correct so more formally this

835
00:36:12,320 --> 00:36:15,040
proof is a zero knowledge proof

836
00:36:15,040 --> 00:36:17,839
that proves that the prover knows a

837
00:36:17,839 --> 00:36:20,880
digital signature that covers both the

838
00:36:20,880 --> 00:36:23,760
revealed and the hidden messages and

839
00:36:23,760 --> 00:36:26,960
this and since this digital signature

840
00:36:26,960 --> 00:36:30,560
can only be generated by the signer

841
00:36:30,560 --> 00:36:32,720
this zero knowledge proof is a proof

842
00:36:32,720 --> 00:36:34,800
that the revealed messages

843
00:36:34,800 --> 00:36:38,720
have not been modified

844
00:36:39,359 --> 00:36:41,839
uh so uh

845
00:36:41,839 --> 00:36:44,240
works in this area

846
00:36:44,240 --> 00:36:46,560
are most

847
00:36:46,560 --> 00:36:48,240
are focused

848
00:36:48,240 --> 00:36:49,920
on two problems

849
00:36:49,920 --> 00:36:52,480
the pr the first problem is related how

850
00:36:52,480 --> 00:36:54,880
on how to transfer

851
00:36:54,880 --> 00:36:57,440
structure data in something that

852
00:36:57,440 --> 00:37:00,720
resembles to this group of messages so

853
00:37:00,720 --> 00:37:02,480
so that the bbs

854
00:37:02,480 --> 00:37:04,640
signature scheme can be applied

855
00:37:04,640 --> 00:37:07,280
so in our work

856
00:37:07,280 --> 00:37:09,200
we focus on

857
00:37:09,200 --> 00:37:12,640
data items and coded association objects

858
00:37:12,640 --> 00:37:13,680
and

859
00:37:13,680 --> 00:37:16,359
we are using a mechanism called

860
00:37:16,359 --> 00:37:17,920
canonicalization

861
00:37:17,920 --> 00:37:20,320
and this mechanism

862
00:37:20,320 --> 00:37:23,839
transports adjacent object into an array

863
00:37:23,839 --> 00:37:26,000
of messages so

864
00:37:26,000 --> 00:37:28,960
you can see in this example how this

865
00:37:28,960 --> 00:37:31,119
json object on the left

866
00:37:31,119 --> 00:37:32,800
has been

867
00:37:32,800 --> 00:37:36,079
flattened to this list of messages on

868
00:37:36,079 --> 00:37:37,119
the right

869
00:37:37,119 --> 00:37:39,040
so this is a very simple and

870
00:37:39,040 --> 00:37:40,960
straightforward example

871
00:37:40,960 --> 00:37:41,920
but

872
00:37:41,920 --> 00:37:44,400
for more let's say advanced

873
00:37:44,400 --> 00:37:48,800
objects like those that includes arrays

874
00:37:48,800 --> 00:37:51,040
they the economicalization approach is

875
00:37:51,040 --> 00:37:53,119
not straightforward

876
00:37:53,119 --> 00:37:54,640
and

877
00:37:54,640 --> 00:37:57,280
we are using a economicalization

878
00:37:57,280 --> 00:37:58,560
algorithm

879
00:37:58,560 --> 00:38:01,760
that we have created by ourselves

880
00:38:01,760 --> 00:38:03,280
and it's a

881
00:38:03,280 --> 00:38:04,800
the security properties of this

882
00:38:04,800 --> 00:38:07,200
algorithm have been formally verified

883
00:38:07,200 --> 00:38:08,640
and they

884
00:38:08,640 --> 00:38:11,040
are included in the in the publication

885
00:38:11,040 --> 00:38:12,320
that i

886
00:38:12,320 --> 00:38:16,320
is located on the bottom of this slide

887
00:38:16,320 --> 00:38:18,640
but there are also

888
00:38:18,640 --> 00:38:20,720
other working groups

889
00:38:20,720 --> 00:38:22,960
working in similar colonicalization

890
00:38:22,960 --> 00:38:25,760
algorithms so there is a great space for

891
00:38:25,760 --> 00:38:28,240
research in this area

892
00:38:28,240 --> 00:38:33,200
so the second problem is related how on

893
00:38:33,200 --> 00:38:36,640
how do we request

894
00:38:37,920 --> 00:38:40,960
specific properties of a

895
00:38:40,960 --> 00:38:45,200
of a data object so how do we ask from a

896
00:38:45,200 --> 00:38:49,919
storage snow to give us to generate

897
00:38:50,160 --> 00:38:52,240
to generate a new item that includes

898
00:38:52,240 --> 00:38:53,839
specific properties

899
00:38:53,839 --> 00:38:57,760
and in our work we are using an approach

900
00:38:57,760 --> 00:38:59,520
called framing

901
00:38:59,520 --> 00:39:00,560
so

902
00:39:00,560 --> 00:39:04,880
a frame is just a json object

903
00:39:04,880 --> 00:39:08,400
that includes the keys

904
00:39:08,400 --> 00:39:10,400
in which we are interested

905
00:39:10,400 --> 00:39:13,119
so in this example frame

906
00:39:13,119 --> 00:39:14,640
we indicate

907
00:39:14,640 --> 00:39:15,680
that

908
00:39:15,680 --> 00:39:18,320
we want

909
00:39:18,320 --> 00:39:22,079
to extract from a stored item the device

910
00:39:22,079 --> 00:39:25,440
id the temperature and they created the

911
00:39:25,440 --> 00:39:28,400
key of the metadata field so if we apply

912
00:39:28,400 --> 00:39:29,839
this frame

913
00:39:29,839 --> 00:39:33,119
to our example json object

914
00:39:33,119 --> 00:39:36,560
we'll get a new json object with which

915
00:39:36,560 --> 00:39:40,000
is the same as the original one

916
00:39:40,000 --> 00:39:42,000
if we extract

917
00:39:42,000 --> 00:39:44,480
the fields that are not included in the

918
00:39:44,480 --> 00:39:46,720
json frame

919
00:39:46,720 --> 00:39:48,240
so

920
00:39:48,240 --> 00:39:49,920
we are working

921
00:39:49,920 --> 00:39:51,599
on a

922
00:39:51,599 --> 00:39:53,920
framing mechanism that

923
00:39:53,920 --> 00:39:55,200
allows us

924
00:39:55,200 --> 00:39:57,280
that allows us to make

925
00:39:57,280 --> 00:40:00,880
more advanced requests so for example

926
00:40:00,880 --> 00:40:04,079
here we have a json object

927
00:40:04,079 --> 00:40:06,640
which includes an array called

928
00:40:06,640 --> 00:40:07,839
measurements

929
00:40:07,839 --> 00:40:09,040
and

930
00:40:09,040 --> 00:40:12,079
this array includes

931
00:40:12,079 --> 00:40:13,839
key value pairs

932
00:40:13,839 --> 00:40:14,960
and

933
00:40:14,960 --> 00:40:18,319
we can have a frame like this one

934
00:40:18,319 --> 00:40:21,839
so this frame in essence says that

935
00:40:21,839 --> 00:40:24,000
from the measurements array we want to

936
00:40:24,000 --> 00:40:26,000
learn all values

937
00:40:26,000 --> 00:40:29,520
whose id equals to temperature so if we

938
00:40:29,520 --> 00:40:32,240
apply this frame to this array

939
00:40:32,240 --> 00:40:34,880
we get something like that

940
00:40:34,880 --> 00:40:36,319
so again

941
00:40:36,319 --> 00:40:38,560
this is a an open area

942
00:40:38,560 --> 00:40:40,640
with a lot of uh

943
00:40:40,640 --> 00:40:42,720
space for research

944
00:40:42,720 --> 00:40:45,520
so let's see how do we apply all these

945
00:40:45,520 --> 00:40:47,839
mechanisms to ntn

946
00:40:47,839 --> 00:40:50,160
so we have a

947
00:40:50,160 --> 00:40:53,119
an entity we call it the data owner that

948
00:40:53,119 --> 00:40:56,480
generates this structure item so in this

949
00:40:56,480 --> 00:40:58,720
example this json object

950
00:40:58,720 --> 00:41:03,119
and this data owner signs this item and

951
00:41:03,119 --> 00:41:05,119
the stories

952
00:41:05,119 --> 00:41:06,640
in a storage snow

953
00:41:06,640 --> 00:41:09,680
which we call it the producer

954
00:41:09,680 --> 00:41:11,440
then the producer

955
00:41:11,440 --> 00:41:12,560
assigns

956
00:41:12,560 --> 00:41:14,720
an identifier

957
00:41:14,720 --> 00:41:18,079
for this item and advertise it

958
00:41:18,079 --> 00:41:19,760
in the indian network

959
00:41:19,760 --> 00:41:21,200
then

960
00:41:21,200 --> 00:41:26,560
any user can send a an interest message

961
00:41:26,560 --> 00:41:29,520
that includes the identifier

962
00:41:29,520 --> 00:41:32,000
of this advertised item

963
00:41:32,000 --> 00:41:33,440
moreover

964
00:41:33,440 --> 00:41:35,359
this interest message

965
00:41:35,359 --> 00:41:38,079
and the application parameters field

966
00:41:38,079 --> 00:41:39,200
includes

967
00:41:39,200 --> 00:41:42,960
the json frame that we want to apply

968
00:41:42,960 --> 00:41:44,720
in this item

969
00:41:44,720 --> 00:41:48,160
and by convention

970
00:41:48,160 --> 00:41:50,640
the identifier included the in the

971
00:41:50,640 --> 00:41:53,599
interest message is appended by

972
00:41:53,599 --> 00:41:56,079
the hash value of everything included in

973
00:41:56,079 --> 00:41:58,400
this app parameters field

974
00:41:58,400 --> 00:42:00,319
so

975
00:42:00,319 --> 00:42:02,880
this interest will end up

976
00:42:02,880 --> 00:42:04,960
in the producer the producer will

977
00:42:04,960 --> 00:42:07,280
extract the json frame

978
00:42:07,280 --> 00:42:10,240
it will derive the new item you will

979
00:42:10,240 --> 00:42:13,200
perform the canonicalization algorithm

980
00:42:13,200 --> 00:42:14,880
it will calculate the zero knowledge

981
00:42:14,880 --> 00:42:17,599
proof and then it will send the output

982
00:42:17,599 --> 00:42:20,560
as a data packet back to the consumer

983
00:42:20,560 --> 00:42:23,280
now a very nice interesting property of

984
00:42:23,280 --> 00:42:25,760
this approach is that the data packet

985
00:42:25,760 --> 00:42:28,640
that the producer will send back

986
00:42:28,640 --> 00:42:32,640
it can be cast by an entity which may be

987
00:42:32,640 --> 00:42:34,800
as well oblivious about our zero

988
00:42:34,800 --> 00:42:37,520
knowledge proof mechanism and since all

989
00:42:37,520 --> 00:42:40,720
consumers interested in the same portion

990
00:42:40,720 --> 00:42:43,680
of the data item will calculate the same

991
00:42:43,680 --> 00:42:45,839
json frame

992
00:42:45,839 --> 00:42:48,240
they will send

993
00:42:48,240 --> 00:42:49,599
interests

994
00:42:49,599 --> 00:42:52,400
that includes the same coded identifier

995
00:42:52,400 --> 00:42:53,839
therefore

996
00:42:53,839 --> 00:42:58,000
the cast can respond with the cast item

997
00:42:58,000 --> 00:42:59,040
and

998
00:42:59,040 --> 00:43:01,839
the consumers can verify their provided

999
00:43:01,839 --> 00:43:04,800
jury knowledge proof

1000
00:43:04,800 --> 00:43:06,240
just like

1001
00:43:06,240 --> 00:43:08,079
they have this if they have received

1002
00:43:08,079 --> 00:43:11,119
this item directly from the producer so

1003
00:43:11,119 --> 00:43:12,960
casting here

1004
00:43:12,960 --> 00:43:14,079
is not

1005
00:43:14,079 --> 00:43:16,720
prevented

1006
00:43:17,440 --> 00:43:19,599
so

1007
00:43:19,599 --> 00:43:22,400
some performance results

1008
00:43:22,400 --> 00:43:24,640
we have implemented an evaluated

1009
00:43:24,640 --> 00:43:26,160
scenario

1010
00:43:26,160 --> 00:43:29,280
we in this scenario we have a json

1011
00:43:29,280 --> 00:43:30,880
object

1012
00:43:30,880 --> 00:43:32,400
which includes

1013
00:43:32,400 --> 00:43:34,000
100

1014
00:43:34,000 --> 00:43:36,560
fields this field represents

1015
00:43:36,560 --> 00:43:40,880
measurements from iot devices and in

1016
00:43:40,880 --> 00:43:42,160
this graph

1017
00:43:42,160 --> 00:43:45,280
we saw the time required

1018
00:43:45,280 --> 00:43:47,440
to generate a zero knowledge proof as

1019
00:43:47,440 --> 00:43:49,920
well as to verify zero knowledge proof

1020
00:43:49,920 --> 00:43:51,920
as a function

1021
00:43:51,920 --> 00:43:54,640
to the number of the revealed items

1022
00:43:54,640 --> 00:43:58,079
so as it may observe

1023
00:43:58,079 --> 00:44:00,720
generating the zero knowledge proof

1024
00:44:00,720 --> 00:44:02,480
the time required to generate the zero

1025
00:44:02,480 --> 00:44:05,359
knowledge proof i is almost constant it

1026
00:44:05,359 --> 00:44:07,839
is not affected by

1027
00:44:07,839 --> 00:44:10,319
the number of revealed items

1028
00:44:10,319 --> 00:44:12,079
whereas

1029
00:44:12,079 --> 00:44:14,560
the more items we reveal

1030
00:44:14,560 --> 00:44:17,440
the less time we need to verify zero

1031
00:44:17,440 --> 00:44:21,359
knowledge proof but in any case

1032
00:44:21,359 --> 00:44:22,400
the

1033
00:44:22,400 --> 00:44:25,359
time required for these operations

1034
00:44:25,359 --> 00:44:26,319
is

1035
00:44:26,319 --> 00:44:29,119
less than eight milliseconds

1036
00:44:29,119 --> 00:44:31,359
and i have to say here that for these

1037
00:44:31,359 --> 00:44:33,680
measurements we are using an unoptimized

1038
00:44:33,680 --> 00:44:35,680
the python implementation of the

1039
00:44:35,680 --> 00:44:37,839
signature scheme uh

1040
00:44:37,839 --> 00:44:42,079
in an ubuntu machine with a two cores

1041
00:44:42,079 --> 00:44:46,720
and four gigabyte of thumb so it's a

1042
00:44:46,720 --> 00:44:50,240
it's an ordinary machine and these times

1043
00:44:50,240 --> 00:44:51,200
can be

1044
00:44:51,200 --> 00:44:52,880
greatly improved

1045
00:44:52,880 --> 00:44:54,640
so so far

1046
00:44:54,640 --> 00:44:57,680
we have seen that this approach has some

1047
00:44:57,680 --> 00:45:00,960
nice security properties and it has a

1048
00:45:00,960 --> 00:45:03,280
low computational overhead

1049
00:45:03,280 --> 00:45:05,520
but it turns out that it also has some

1050
00:45:05,520 --> 00:45:08,319
nice properties when it comes to storage

1051
00:45:08,319 --> 00:45:10,400
and to communication overhead

1052
00:45:10,400 --> 00:45:13,920
so we compare our solution i guess an

1053
00:45:13,920 --> 00:45:15,520
alternative

1054
00:45:15,520 --> 00:45:16,720
in which

1055
00:45:16,720 --> 00:45:18,640
its measurement

1056
00:45:18,640 --> 00:45:21,280
in this file

1057
00:45:21,280 --> 00:45:24,240
is individually signed

1058
00:45:24,240 --> 00:45:26,880
using a eddca

1059
00:45:26,880 --> 00:45:28,720
digital signature scheme

1060
00:45:28,720 --> 00:45:29,680
so

1061
00:45:29,680 --> 00:45:31,440
we assume that

1062
00:45:31,440 --> 00:45:34,640
if we assign it's a record of this file

1063
00:45:34,640 --> 00:45:36,480
individually and we achieve the same

1064
00:45:36,480 --> 00:45:39,040
security properties which of course this

1065
00:45:39,040 --> 00:45:41,200
is not the case

1066
00:45:41,200 --> 00:45:43,200
but and we measure

1067
00:45:43,200 --> 00:45:44,800
the computational and the storage

1068
00:45:44,800 --> 00:45:47,599
overhead

1069
00:45:47,599 --> 00:45:50,079
of course

1070
00:45:50,240 --> 00:45:53,040
it's straightforward that

1071
00:45:53,040 --> 00:45:57,119
having 100 different digital signatures

1072
00:45:57,119 --> 00:45:59,520
requires more storage space as opposed

1073
00:45:59,520 --> 00:46:02,480
to having a single digital signature

1074
00:46:02,480 --> 00:46:04,480
but also when it comes to the

1075
00:46:04,480 --> 00:46:07,599
communication overhead

1076
00:46:07,599 --> 00:46:08,720
the

1077
00:46:08,720 --> 00:46:09,839
the

1078
00:46:09,839 --> 00:46:14,079
the bandwidth required to transmit the

1079
00:46:14,079 --> 00:46:16,880
the adca these are signatures

1080
00:46:16,880 --> 00:46:19,760
of course is proportional to the number

1081
00:46:19,760 --> 00:46:22,160
of the revealed items since we reveal

1082
00:46:22,160 --> 00:46:25,440
one digital signature per item

1083
00:46:25,440 --> 00:46:27,359
whereas when it comes to zero knowledge

1084
00:46:27,359 --> 00:46:31,040
proof this is the opposite so

1085
00:46:31,040 --> 00:46:33,720
the size of a zero knowledge proof is a

1086
00:46:33,720 --> 00:46:35,760
272 bytes

1087
00:46:35,760 --> 00:46:39,280
plus 32 bytes for every revealed items

1088
00:46:39,280 --> 00:46:40,160
so

1089
00:46:40,160 --> 00:46:42,319
the more items we're revealing the less

1090
00:46:42,319 --> 00:46:44,640
is the size of this zero knowledge proof

1091
00:46:44,640 --> 00:46:48,960
so if we refill 32 items or more

1092
00:46:48,960 --> 00:46:51,760
uh we need less bandwidth for the zero

1093
00:46:51,760 --> 00:46:52,960
knowledge proof

1094
00:46:52,960 --> 00:46:56,319
compared to an edc8 digital signature of

1095
00:46:56,319 --> 00:46:59,760
course in both cases

1096
00:46:59,760 --> 00:47:02,800
the size the the the computational

1097
00:47:02,800 --> 00:47:05,040
overhead required for transmitting these

1098
00:47:05,040 --> 00:47:08,160
digital signatures is small

1099
00:47:08,160 --> 00:47:11,920
but in any case this may be important in

1100
00:47:11,920 --> 00:47:14,640
some use cases

1101
00:47:14,640 --> 00:47:15,680
so

1102
00:47:15,680 --> 00:47:17,440
how

1103
00:47:17,440 --> 00:47:20,720
can we move forward

1104
00:47:20,720 --> 00:47:22,400
this approach

1105
00:47:22,400 --> 00:47:26,960
is using a new key type and this a

1106
00:47:26,960 --> 00:47:30,000
key is you is required by the bbs

1107
00:47:30,000 --> 00:47:33,359
signature bbs signature algorithm and

1108
00:47:33,359 --> 00:47:38,559
moreover it defines two new signature

1109
00:47:38,559 --> 00:47:41,680
types once generated by the data owner

1110
00:47:41,680 --> 00:47:43,440
and the other is the zero knowledge

1111
00:47:43,440 --> 00:47:46,160
proof generated by the

1112
00:47:46,160 --> 00:47:49,520
the prover so

1113
00:47:50,079 --> 00:47:52,319
we can

1114
00:47:52,319 --> 00:47:53,520
we can

1115
00:47:53,520 --> 00:47:56,160
research how these in context can be

1116
00:47:56,160 --> 00:48:00,400
integrated into ndn or in other related

1117
00:48:00,400 --> 00:48:01,520
proto

1118
00:48:01,520 --> 00:48:02,880
architectures

1119
00:48:02,880 --> 00:48:04,880
as i told you data framing

1120
00:48:04,880 --> 00:48:06,480
economicalization

1121
00:48:06,480 --> 00:48:08,079
is still

1122
00:48:08,079 --> 00:48:11,119
an upper problem where

1123
00:48:11,119 --> 00:48:14,240
many things can be done especially if we

1124
00:48:14,240 --> 00:48:16,079
consider

1125
00:48:16,079 --> 00:48:18,960
non-json recorded objects

1126
00:48:18,960 --> 00:48:23,680
and this also um

1127
00:48:23,680 --> 00:48:26,000
many similar activities are taking place

1128
00:48:26,000 --> 00:48:28,960
in other working groups not only in idf

1129
00:48:28,960 --> 00:48:32,240
but also in the body such as identity

1130
00:48:32,240 --> 00:48:36,079
foundation and w3c so there is there are

1131
00:48:36,079 --> 00:48:38,559
great opportunities for a collaboration

1132
00:48:38,559 --> 00:48:39,440
there

1133
00:48:39,440 --> 00:48:40,960
and

1134
00:48:40,960 --> 00:48:41,839
and

1135
00:48:41,839 --> 00:48:44,240
of course

1136
00:48:44,240 --> 00:48:46,559
the sky is the limit when it comes to

1137
00:48:46,559 --> 00:48:51,359
use cases for this signature scheme and

1138
00:48:51,359 --> 00:48:52,720
for example

1139
00:48:52,720 --> 00:48:55,280
i can imagine this scheme being

1140
00:48:55,280 --> 00:48:58,160
integrated into rooting protocols where

1141
00:48:58,160 --> 00:49:00,800
routers advertise only a portion of the

1142
00:49:00,800 --> 00:49:03,040
network graph but

1143
00:49:03,040 --> 00:49:05,040
many applications can be imagined

1144
00:49:05,040 --> 00:49:07,759
especially

1145
00:49:08,319 --> 00:49:13,839
in the context of a of the coined rd

1146
00:49:14,079 --> 00:49:18,400
so that's all uh so as i told you we are

1147
00:49:18,400 --> 00:49:21,280
working actively in this area

1148
00:49:21,280 --> 00:49:23,200
please contact us if you want to learn

1149
00:49:23,200 --> 00:49:24,720
more information

1150
00:49:24,720 --> 00:49:28,720
we can provide the source code

1151
00:49:28,720 --> 00:49:32,079
and many other helpful pointers

1152
00:49:32,079 --> 00:49:34,720
so thank you

1153
00:49:34,800 --> 00:49:37,839
thank you very much nicholas

1154
00:49:37,839 --> 00:49:42,040
are there any questions for nikons

1155
00:49:48,160 --> 00:49:50,640
so do you have a paper published on this

1156
00:49:50,640 --> 00:49:52,960
already

1157
00:49:54,079 --> 00:49:56,480
not yet published we have under

1158
00:49:56,480 --> 00:50:00,480
submission okay great thanks

1159
00:50:00,720 --> 00:50:03,839
um so i was wondering about um

1160
00:50:03,839 --> 00:50:06,240
this json object

1161
00:50:06,240 --> 00:50:08,720
integration what you call framing

1162
00:50:08,720 --> 00:50:11,680
um is this actually a

1163
00:50:11,680 --> 00:50:13,520
crdt

1164
00:50:13,520 --> 00:50:15,599
like operation so

1165
00:50:15,599 --> 00:50:18,079
like an addition where

1166
00:50:18,079 --> 00:50:19,359
this

1167
00:50:19,359 --> 00:50:22,078
commutative

1168
00:50:22,559 --> 00:50:25,559
and

1169
00:50:26,880 --> 00:50:28,400
so it basically doesn't really matter

1170
00:50:28,400 --> 00:50:29,839
which order you do these additions you

1171
00:50:29,839 --> 00:50:32,400
can add or combine several objects in a

1172
00:50:32,400 --> 00:50:34,240
row

1173
00:50:34,240 --> 00:50:36,240
actually

1174
00:50:36,240 --> 00:50:39,520
this is an open issue so

1175
00:50:39,520 --> 00:50:42,000
it is mostly no it is only a read

1176
00:50:42,000 --> 00:50:43,680
operation okay

1177
00:50:43,680 --> 00:50:47,119
so but suppose that the you want to

1178
00:50:47,119 --> 00:50:48,400
access

1179
00:50:48,400 --> 00:50:51,040
an object

1180
00:50:51,359 --> 00:50:52,559
and

1181
00:50:52,559 --> 00:50:55,760
your response is cast somewhere

1182
00:50:55,760 --> 00:50:59,040
and then somebody else

1183
00:50:59,040 --> 00:51:00,880
wants to access

1184
00:51:00,880 --> 00:51:02,960
a subset of the object that you

1185
00:51:02,960 --> 00:51:04,160
requested

1186
00:51:04,160 --> 00:51:07,200
so there it is a very nice problem if

1187
00:51:07,200 --> 00:51:09,440
this intermediate that has cast the

1188
00:51:09,440 --> 00:51:11,599
previous response

1189
00:51:11,599 --> 00:51:14,800
how to generate a new object

1190
00:51:14,800 --> 00:51:17,200
that can satisfy this uh

1191
00:51:17,200 --> 00:51:18,800
the new request

1192
00:51:18,800 --> 00:51:22,800
which is which in essence request no as

1193
00:51:22,800 --> 00:51:25,920
a smaller portion of the

1194
00:51:25,920 --> 00:51:28,400
of the original message

1195
00:51:28,400 --> 00:51:30,559
and of course

1196
00:51:30,559 --> 00:51:32,079
combining

1197
00:51:32,079 --> 00:51:35,200
such responses for and creating a new

1198
00:51:35,200 --> 00:51:39,680
object is also another very interesting

1199
00:51:39,680 --> 00:51:42,399
open topic

1200
00:51:42,880 --> 00:51:43,680
yeah

1201
00:51:43,680 --> 00:51:46,079
i think so too great

1202
00:51:46,079 --> 00:51:48,319
yeah thanks for bringing this work to us

1203
00:51:48,319 --> 00:51:49,599
i think it

1204
00:51:49,599 --> 00:51:52,160
fits really nice into the spirit of this

1205
00:51:52,160 --> 00:51:53,440
session so

1206
00:51:53,440 --> 00:51:56,480
icn and coin rg

1207
00:51:56,480 --> 00:51:59,839
i see no other questions um oh i think

1208
00:51:59,839 --> 00:52:00,800
let's

1209
00:52:00,800 --> 00:52:02,079
follow up on the main list if people

1210
00:52:02,079 --> 00:52:03,599
have questions and looking forward to

1211
00:52:03,599 --> 00:52:05,520
the paper

1212
00:52:05,520 --> 00:52:08,880
thank you thanks nicholas

1213
00:52:09,280 --> 00:52:10,319
um

1214
00:52:10,319 --> 00:52:12,160
so just quickly i

1215
00:52:12,160 --> 00:52:13,920
realized that some people seem to be

1216
00:52:13,920 --> 00:52:16,160
having

1217
00:52:16,160 --> 00:52:18,240
connectivity issues or audio video

1218
00:52:18,240 --> 00:52:20,160
issues um

1219
00:52:20,160 --> 00:52:21,920
which cannot

1220
00:52:21,920 --> 00:52:23,839
explain directly so

1221
00:52:23,839 --> 00:52:26,400
it works perfectly for me um but could

1222
00:52:26,400 --> 00:52:28,160
be a good idea to just share some new

1223
00:52:28,160 --> 00:52:30,640
experience on in the chat so just to

1224
00:52:30,640 --> 00:52:31,839
maybe

1225
00:52:31,839 --> 00:52:34,559
figure out what this is um so i'm

1226
00:52:34,559 --> 00:52:36,400
connecting from germany i don't have any

1227
00:52:36,400 --> 00:52:38,880
issues today

1228
00:52:38,880 --> 00:52:40,880
but i heard from others then it doesn't

1229
00:52:40,880 --> 00:52:44,440
really work so well

1230
00:52:46,480 --> 00:52:49,359
okay let me just bring up

1231
00:52:49,359 --> 00:52:53,359
um our slides again

1232
00:52:56,000 --> 00:52:57,280
um

1233
00:52:57,280 --> 00:52:58,160
okay

1234
00:52:58,160 --> 00:52:59,119
so

1235
00:52:59,119 --> 00:53:00,960
just a few things that we shouldn't

1236
00:53:00,960 --> 00:53:03,119
forget about um so we

1237
00:53:03,119 --> 00:53:05,280
really wanted to get um the flick

1238
00:53:05,280 --> 00:53:07,680
specification um

1239
00:53:07,680 --> 00:53:10,400
finished and published um so it looks

1240
00:53:10,400 --> 00:53:12,079
like it's currently

1241
00:53:12,079 --> 00:53:12,960
um

1242
00:53:12,960 --> 00:53:16,319
stored again um

1243
00:53:16,480 --> 00:53:19,040
so yeah dave and i have been

1244
00:53:19,040 --> 00:53:20,720
trying to um

1245
00:53:20,720 --> 00:53:22,640
motivate

1246
00:53:22,640 --> 00:53:25,119
authors and the group to kind of

1247
00:53:25,119 --> 00:53:28,480
see how we can get this to last call um

1248
00:53:28,480 --> 00:53:30,079
we we think it's a it's a really

1249
00:53:30,079 --> 00:53:32,319
important specification and it should

1250
00:53:32,319 --> 00:53:35,200
really be published um so um

1251
00:53:35,200 --> 00:53:36,800
if you have any idea how to to move this

1252
00:53:36,800 --> 00:53:37,680
forward

1253
00:53:37,680 --> 00:53:40,960
please let us know or

1254
00:53:41,040 --> 00:53:45,680
please free also feel free to suggest

1255
00:53:45,839 --> 00:53:47,599
text or anything if you think there's

1256
00:53:47,599 --> 00:53:51,040
something missing or and so on

1257
00:53:51,040 --> 00:53:53,359
and um yeah then

1258
00:53:53,359 --> 00:53:55,040
of course

1259
00:53:55,040 --> 00:53:57,040
we don't have that much time today but

1260
00:53:57,040 --> 00:53:57,920
um

1261
00:53:57,920 --> 00:53:58,720
so

1262
00:53:58,720 --> 00:54:00,400
potentially there could be many

1263
00:54:00,400 --> 00:54:03,760
interesting work items uh to uh discuss

1264
00:54:03,760 --> 00:54:05,040
here

1265
00:54:05,040 --> 00:54:08,640
and here just a few examples that we

1266
00:54:08,640 --> 00:54:10,960
came up with so you're probably aware

1267
00:54:10,960 --> 00:54:14,559
that there is a media over a quick

1268
00:54:14,559 --> 00:54:18,000
discussion in the ietf

1269
00:54:18,000 --> 00:54:18,960
so

1270
00:54:18,960 --> 00:54:21,920
a buff is uh this week

1271
00:54:21,920 --> 00:54:25,440
and so this is essentially a proposal to

1272
00:54:25,440 --> 00:54:28,079
do something like um yeah named data

1273
00:54:28,079 --> 00:54:30,640
networking you can say um over quick or

1274
00:54:30,640 --> 00:54:31,599
like

1275
00:54:31,599 --> 00:54:33,839
an overlay network of

1276
00:54:33,839 --> 00:54:36,240
quick relays you can say

1277
00:54:36,240 --> 00:54:37,040
um

1278
00:54:37,040 --> 00:54:38,799
of course this could be done much better

1279
00:54:38,799 --> 00:54:41,280
uh maybe that's an interesting topic for

1280
00:54:41,280 --> 00:54:44,400
this community um as well

1281
00:54:44,400 --> 00:54:46,160
um

1282
00:54:46,160 --> 00:54:48,399
i

1283
00:54:49,520 --> 00:54:52,480
kicked off a discussion on self-learning

1284
00:54:52,480 --> 00:54:56,000
auto configuration and also potentially

1285
00:54:56,000 --> 00:54:58,880
nd and switch design on the main list

1286
00:54:58,880 --> 00:55:00,319
and

1287
00:55:00,319 --> 00:55:02,160
so there is some interesting work that

1288
00:55:02,160 --> 00:55:03,280
has happened

1289
00:55:03,280 --> 00:55:04,079
in

1290
00:55:04,079 --> 00:55:06,720
ndn cxx um

1291
00:55:06,720 --> 00:55:08,480
as a code base

1292
00:55:08,480 --> 00:55:09,599
um

1293
00:55:09,599 --> 00:55:11,280
i still think this could be optimized

1294
00:55:11,280 --> 00:55:13,760
and maybe um that's an interesting topic

1295
00:55:13,760 --> 00:55:15,680
if people are interested

1296
00:55:15,680 --> 00:55:16,480
to

1297
00:55:16,480 --> 00:55:19,280
discuss further

1298
00:55:19,520 --> 00:55:21,839
then um

1299
00:55:21,839 --> 00:55:23,280
so

1300
00:55:23,280 --> 00:55:26,640
uh we we often you know um

1301
00:55:26,640 --> 00:55:29,119
explain icn is a good way to to access

1302
00:55:29,119 --> 00:55:30,640
arbitrary content in network which is

1303
00:55:30,640 --> 00:55:32,079
true

1304
00:55:32,079 --> 00:55:33,760
however

1305
00:55:33,760 --> 00:55:35,680
if you think about doing something

1306
00:55:35,680 --> 00:55:38,559
equivalent like um web

1307
00:55:38,559 --> 00:55:42,640
protocol so like http 3 for example and

1308
00:55:42,640 --> 00:55:44,400
um there are a few other things you have

1309
00:55:44,400 --> 00:55:47,200
to um

1310
00:55:47,440 --> 00:55:50,400
care about so um

1311
00:55:50,400 --> 00:55:53,359
things like name privacy for example

1312
00:55:53,359 --> 00:55:57,200
um maybe um setting up something like a

1313
00:55:57,200 --> 00:55:59,920
tls security context

1314
00:55:59,920 --> 00:56:01,040
and so on

1315
00:56:01,040 --> 00:56:02,640
and maybe other things

1316
00:56:02,640 --> 00:56:05,359
so we think that that's actually an

1317
00:56:05,359 --> 00:56:06,960
interesting topic

1318
00:56:06,960 --> 00:56:07,760
and

1319
00:56:07,760 --> 00:56:09,599
maybe

1320
00:56:09,599 --> 00:56:12,319
something to work on

1321
00:56:12,640 --> 00:56:14,799
so

1322
00:56:15,040 --> 00:56:17,119
yeah we just saw an

1323
00:56:17,119 --> 00:56:18,559
example for

1324
00:56:18,559 --> 00:56:22,319
um say icn security work um

1325
00:56:22,319 --> 00:56:25,440
that um kind of is connected to

1326
00:56:25,440 --> 00:56:28,640
disability computing and coin

1327
00:56:28,640 --> 00:56:30,799
and we have talked about others before

1328
00:56:30,799 --> 00:56:32,559
um so we

1329
00:56:32,559 --> 00:56:35,359
would also encourage you to um maybe if

1330
00:56:35,359 --> 00:56:37,280
you do if you're looking in this field

1331
00:56:37,280 --> 00:56:38,240
um

1332
00:56:38,240 --> 00:56:41,839
please share your ideas um in this group

1333
00:56:41,839 --> 00:56:45,839
and i see alicia on thecube

1334
00:56:46,640 --> 00:56:48,319
you can hear me

1335
00:56:48,319 --> 00:56:49,760
i think you have to move a bit closer to

1336
00:56:49,760 --> 00:56:52,240
the microphone

1337
00:56:53,920 --> 00:56:56,960
i look at the your slides

1338
00:56:56,960 --> 00:57:00,240
searching for ideas for new work

1339
00:57:00,240 --> 00:57:03,440
i thought maybe a different way to ask

1340
00:57:03,440 --> 00:57:05,359
the question

1341
00:57:05,359 --> 00:57:06,480
is

1342
00:57:06,480 --> 00:57:10,480
what are the important problems

1343
00:57:10,480 --> 00:57:13,359
that really need the solutions

1344
00:57:13,359 --> 00:57:16,000
and start the

1345
00:57:16,000 --> 00:57:17,520
look around

1346
00:57:17,520 --> 00:57:20,559
in that direction

1347
00:57:21,280 --> 00:57:23,520
so like uh

1348
00:57:23,520 --> 00:57:26,240
the kind to suggest that the list is

1349
00:57:26,240 --> 00:57:29,440
give me a impression

1350
00:57:29,440 --> 00:57:31,920
sorry if i'm saying the bad words again

1351
00:57:31,920 --> 00:57:33,839
this is like

1352
00:57:33,839 --> 00:57:37,440
you really look for work to do

1353
00:57:37,920 --> 00:57:40,079
on the other hand research group really

1354
00:57:40,079 --> 00:57:41,040
should

1355
00:57:41,040 --> 00:57:42,960
addressing

1356
00:57:42,960 --> 00:57:44,480
the burning

1357
00:57:44,480 --> 00:57:46,240
challenges

1358
00:57:46,240 --> 00:57:47,760
not

1359
00:57:47,760 --> 00:57:50,400
trying to figure out what to do next but

1360
00:57:50,400 --> 00:57:54,559
rather among other problems

1361
00:57:54,559 --> 00:57:57,680
are the important ones and still

1362
00:57:57,680 --> 00:58:01,520
manageable to make progress

1363
00:58:02,079 --> 00:58:04,559
yeah point point taken um

1364
00:58:04,559 --> 00:58:06,240
okay i

1365
00:58:06,240 --> 00:58:08,400
didn't explain this um

1366
00:58:08,400 --> 00:58:10,240
well enough and of course some of these

1367
00:58:10,240 --> 00:58:12,799
points um are actually motivated by

1368
00:58:12,799 --> 00:58:14,400
actual problems

1369
00:58:14,400 --> 00:58:17,359
so for just for example um like the like

1370
00:58:17,359 --> 00:58:20,319
this first one meteor over quick or icn

1371
00:58:20,319 --> 00:58:22,480
i mean they're clearly um

1372
00:58:22,480 --> 00:58:26,480
is a problem in uh distributing um

1373
00:58:26,480 --> 00:58:29,359
real-time multimedia content um over the

1374
00:58:29,359 --> 00:58:32,480
internet and um so these media over

1375
00:58:32,480 --> 00:58:33,760
quick ideas

1376
00:58:33,760 --> 00:58:37,200
um directly stem from these um from this

1377
00:58:37,200 --> 00:58:40,000
change in the like cdn

1378
00:58:40,000 --> 00:58:41,680
environment

1379
00:58:41,680 --> 00:58:44,240
and so you could you could say that that

1380
00:58:44,240 --> 00:58:47,760
this is the problem and i see um

1381
00:58:47,760 --> 00:58:50,240
solution proposals right now that are

1382
00:58:50,240 --> 00:58:53,598
say leave room for optimization

1383
00:58:54,480 --> 00:58:57,440
so if i speak again i think if you look

1384
00:58:57,440 --> 00:58:59,200
at the

1385
00:58:59,200 --> 00:59:01,839
issue from that direction

1386
00:59:01,839 --> 00:59:05,599
that could give people much better ideas

1387
00:59:05,599 --> 00:59:09,599
if we just look at to say media over icn

1388
00:59:09,599 --> 00:59:11,200
instead of quick

1389
00:59:11,200 --> 00:59:14,000
it wasn't clear as opposed to many

1390
00:59:14,000 --> 00:59:15,680
people

1391
00:59:15,680 --> 00:59:17,599
why you do that

1392
00:59:17,599 --> 00:59:18,400
even

1393
00:59:18,400 --> 00:59:20,559
quicker it's really they

1394
00:59:20,559 --> 00:59:23,359
transfer the protocol that is catching

1395
00:59:23,359 --> 00:59:25,680
all the attention

1396
00:59:25,680 --> 00:59:27,760
if you state the

1397
00:59:27,760 --> 00:59:30,160
stand in a different way

1398
00:59:30,160 --> 00:59:31,280
to

1399
00:59:31,280 --> 00:59:33,839
something like

1400
00:59:33,839 --> 00:59:37,359
media over quick does not address the

1401
00:59:37,359 --> 00:59:38,640
following

1402
00:59:38,640 --> 00:59:40,559
problems

1403
00:59:40,559 --> 00:59:42,559
and which

1404
00:59:42,559 --> 00:59:44,559
could be addressed

1405
00:59:44,559 --> 00:59:48,079
simply by over icn that will really get

1406
00:59:48,079 --> 00:59:49,119
people

1407
00:59:49,119 --> 00:59:51,520
moving to look into

1408
00:59:51,520 --> 00:59:54,240
why there are issues with quick and how

1409
00:59:54,240 --> 00:59:58,079
action can solve the problem

1410
00:59:58,079 --> 01:00:02,160
i would also i take the floor now

1411
01:00:02,160 --> 01:00:04,559
i had some private exchanges i guess you

1412
01:00:04,559 --> 01:00:07,040
know you people remember with you cheers

1413
01:00:07,040 --> 01:00:09,040
also with the collins

1414
01:00:09,040 --> 01:00:12,720
i think ic is a fundamental

1415
01:00:12,720 --> 01:00:14,480
secret sauce

1416
01:00:14,480 --> 01:00:16,160
is named

1417
01:00:16,160 --> 01:00:18,799
and they secure the data

1418
01:00:18,799 --> 01:00:19,839
i

1419
01:00:19,839 --> 01:00:22,799
am a bit afraid that

1420
01:00:22,799 --> 01:00:25,520
the names are not

1421
01:00:25,520 --> 01:00:27,920
really fully utilized as a semantic

1422
01:00:27,920 --> 01:00:29,119
power

1423
01:00:29,119 --> 01:00:33,040
and the security seems to be

1424
01:00:33,280 --> 01:00:35,760
i don't know ignored forgotten or

1425
01:00:35,760 --> 01:00:37,599
otherwise people don't know how to do it

1426
01:00:37,599 --> 01:00:40,240
so they just escape it

1427
01:00:40,240 --> 01:00:43,119
i worry that without

1428
01:00:43,119 --> 01:00:46,960
showing people how i think help address

1429
01:00:46,960 --> 01:00:48,880
the security challenges facing the

1430
01:00:48,880 --> 01:00:50,880
internet

1431
01:00:50,880 --> 01:00:53,599
we we are really losing

1432
01:00:53,599 --> 01:00:57,079
the real

1433
01:00:58,559 --> 01:01:00,240
yeah

1434
01:01:00,240 --> 01:01:03,040
thanks no i i fully agree so that like

1435
01:01:03,040 --> 01:01:05,200
just quickly um

1436
01:01:05,200 --> 01:01:06,880
this this first item here is not

1437
01:01:06,880 --> 01:01:09,520
intended as just like a protocol drop-in

1438
01:01:09,520 --> 01:01:11,280
replacement or something is more likely

1439
01:01:11,280 --> 01:01:14,160
referring to the like bigger picture um

1440
01:01:14,160 --> 01:01:17,280
the architectural problems um but i yeah

1441
01:01:17,280 --> 01:01:20,000
we don't have time today to to

1442
01:01:20,000 --> 01:01:21,520
discuss this

1443
01:01:21,520 --> 01:01:24,079
um so

1444
01:01:24,079 --> 01:01:25,280
there's like yeah there's i think

1445
01:01:25,280 --> 01:01:28,160
there's a lot to um you know unwrap here

1446
01:01:28,160 --> 01:01:29,839
but um

1447
01:01:29,839 --> 01:01:32,160
we just wanted to like um inject a few

1448
01:01:32,160 --> 01:01:33,760
ideas for for

1449
01:01:33,760 --> 01:01:36,160
maybe deeper discussions or like actual

1450
01:01:36,160 --> 01:01:39,040
work um later in this group

1451
01:01:39,040 --> 01:01:41,839
but i i agree about the security

1452
01:01:41,839 --> 01:01:44,640
topic and that's definitely

1453
01:01:44,640 --> 01:01:46,480
so also when you think about web over

1454
01:01:46,480 --> 01:01:48,799
icn of course

1455
01:01:48,799 --> 01:01:51,599
one of the really pressing issues

1456
01:01:51,599 --> 01:01:54,960
okay thanks um

1457
01:01:56,480 --> 01:01:58,799
so we are done with the icn part but

1458
01:01:58,799 --> 01:02:00,960
there's more to come on computing in the

1459
01:02:00,960 --> 01:02:02,559
network um

1460
01:02:02,559 --> 01:02:03,680
so

1461
01:02:03,680 --> 01:02:06,720
uh yeah we we have this first bullet

1462
01:02:06,720 --> 01:02:09,520
item for a couple of meetings now um and

1463
01:02:09,520 --> 01:02:11,039
we are really hoping

1464
01:02:11,039 --> 01:02:12,000
things will

1465
01:02:12,000 --> 01:02:15,119
clear up um but yeah no promises at this

1466
01:02:15,119 --> 01:02:16,480
point

1467
01:02:16,480 --> 01:02:20,240
um just quickly uh please mark september

1468
01:02:20,240 --> 01:02:22,880
19th to 21st in your calendar and this

1469
01:02:22,880 --> 01:02:24,720
is where the icn

1470
01:02:24,720 --> 01:02:28,160
conference um happens um

1471
01:02:28,160 --> 01:02:32,160
in osaka japan um this year

1472
01:02:32,160 --> 01:02:34,640
okay thank you very much um now let's

1473
01:02:34,640 --> 01:02:36,720
just directly continue with uh with coin

1474
01:02:36,720 --> 01:02:38,079
rg

1475
01:02:38,079 --> 01:02:40,319
and

1476
01:02:43,280 --> 01:02:45,839
i would like to invite the coin rg

1477
01:02:45,839 --> 01:02:49,720
chance to take over now

1478
01:02:55,359 --> 01:02:57,759
hello

1479
01:02:59,119 --> 01:03:02,119
see

1480
01:03:05,680 --> 01:03:07,440
i guess because i'm not a delegate i

1481
01:03:07,440 --> 01:03:10,640
have to request

1482
01:03:10,720 --> 01:03:12,559
i don't have to look fast to share

1483
01:03:12,559 --> 01:03:13,599
slides

1484
01:03:13,599 --> 01:03:14,880
yeah probably i think that's the best

1485
01:03:14,880 --> 01:03:17,839
way

1486
01:03:17,920 --> 01:03:19,200
yep

1487
01:03:19,200 --> 01:03:22,200
okay

1488
01:03:37,119 --> 01:03:38,559
okay

1489
01:03:38,559 --> 01:03:41,280
so strange being on this side of the

1490
01:03:41,280 --> 01:03:43,359
presentations okay

1491
01:03:43,359 --> 01:03:46,880
uh hello everybody we're thrilled to

1492
01:03:46,880 --> 01:03:49,200
have part of this session

1493
01:03:49,200 --> 01:03:51,440
uh i'm eve schuler

1494
01:03:51,440 --> 01:03:54,960
and my co-chairs are jeffrey hey and

1495
01:03:54,960 --> 01:03:57,119
mauricio is a mopati

1496
01:03:57,119 --> 01:04:01,359
and uh who are also here um but here is

1497
01:04:01,359 --> 01:04:03,200
that we are all remote

1498
01:04:03,200 --> 01:04:05,119
some of us had hoped to be there in

1499
01:04:05,119 --> 01:04:08,000
person and were disappointed due to

1500
01:04:08,000 --> 01:04:09,440
cohort that

1501
01:04:09,440 --> 01:04:10,400
and other

1502
01:04:10,400 --> 01:04:14,400
airborne diseases that we are not there

1503
01:04:14,400 --> 01:04:17,920
we hope you all are staying safe

1504
01:04:18,880 --> 01:04:20,720
i don't believe we have to go through

1505
01:04:20,720 --> 01:04:23,480
any of these slides because that was um

1506
01:04:23,480 --> 01:04:25,839
[Music]

1507
01:04:25,839 --> 01:04:28,000
already stated at the outset

1508
01:04:28,000 --> 01:04:30,240
of the icnrg

1509
01:04:30,240 --> 01:04:31,200
um

1510
01:04:31,200 --> 01:04:33,680
but we have three very interesting

1511
01:04:33,680 --> 01:04:35,760
presentations today

1512
01:04:35,760 --> 01:04:36,720
um

1513
01:04:36,720 --> 01:04:40,640
and uh we'll begin with uh

1514
01:04:40,640 --> 01:04:42,960
dirk who will be talking to us about

1515
01:04:42,960 --> 01:04:45,440
traffic steering at layer 3.

1516
01:04:45,440 --> 01:04:46,720
um

1517
01:04:46,720 --> 01:04:49,200
andy uh who will discuss name spaces

1518
01:04:49,200 --> 01:04:51,760
security network addressing and uh

1519
01:04:51,760 --> 01:04:55,119
tushar swamy uh

1520
01:04:55,119 --> 01:04:56,720
building adaptive networks with machine

1521
01:04:56,720 --> 01:04:58,799
learning

1522
01:04:58,799 --> 01:05:00,000
and

1523
01:05:00,000 --> 01:05:02,640
and then we will discuss

1524
01:05:02,640 --> 01:05:03,520
the

1525
01:05:03,520 --> 01:05:06,240
need for an interim uh there are several

1526
01:05:06,240 --> 01:05:09,200
things that we've had on our to-do list

1527
01:05:09,200 --> 01:05:11,039
for quite some time

1528
01:05:11,039 --> 01:05:12,559
namely

1529
01:05:12,559 --> 01:05:15,280
a more appointed scoping discussion

1530
01:05:15,280 --> 01:05:17,520
really synthesizing many of the

1531
01:05:17,520 --> 01:05:20,079
conversations discussions and debates

1532
01:05:20,079 --> 01:05:22,000
we've been having on the mailing list

1533
01:05:22,000 --> 01:05:24,400
for for many months

1534
01:05:24,400 --> 01:05:26,640
uh and um

1535
01:05:26,640 --> 01:05:30,880
really to take a a step back and uh try

1536
01:05:30,880 --> 01:05:32,400
to scope

1537
01:05:32,400 --> 01:05:35,599
as our charter states you know re-scope

1538
01:05:35,599 --> 01:05:39,200
or scope more articulately or

1539
01:05:39,200 --> 01:05:40,640
deliberately

1540
01:05:40,640 --> 01:05:42,400
and

1541
01:05:42,400 --> 01:05:45,280
the other task that we would like to

1542
01:05:45,280 --> 01:05:47,839
accomplish in an interim

1543
01:05:47,839 --> 01:05:50,559
possibly a separate interim is to

1544
01:05:50,559 --> 01:05:51,920
revisit

1545
01:05:51,920 --> 01:05:54,000
the many drafts

1546
01:05:54,000 --> 01:05:56,240
that have been written

1547
01:05:56,240 --> 01:05:57,359
and

1548
01:05:57,359 --> 01:05:59,280
how they fall into the architectural

1549
01:05:59,280 --> 01:06:01,520
space

1550
01:06:01,520 --> 01:06:02,240
so

1551
01:06:02,240 --> 01:06:05,599
with that let's see i think

1552
01:06:05,599 --> 01:06:08,559
marie jose wanted to oh well you are

1553
01:06:08,559 --> 01:06:10,559
here so it's kind of funny you know if

1554
01:06:10,559 --> 01:06:12,880
if you're not here this is how you get

1555
01:06:12,880 --> 01:06:15,119
to meet echo you won't get to see that

1556
01:06:15,119 --> 01:06:17,520
but nonetheless um because this is a

1557
01:06:17,520 --> 01:06:19,280
shared meeting it's a little funny how

1558
01:06:19,280 --> 01:06:20,960
meat echo

1559
01:06:20,960 --> 01:06:23,440
tracks or doesn't track

1560
01:06:23,440 --> 01:06:25,359
the history of this it will appear in

1561
01:06:25,359 --> 01:06:27,599
the icn meeting

1562
01:06:27,599 --> 01:06:29,280
minutes

1563
01:06:29,280 --> 01:06:31,039
and meeting

1564
01:06:31,039 --> 01:06:32,960
under the data tracker the meeting

1565
01:06:32,960 --> 01:06:36,720
directory but not in the coin rg so that

1566
01:06:36,720 --> 01:06:39,599
i think is an oversight um and i for

1567
01:06:39,599 --> 01:06:41,599
meet echo and hopefully we will submit

1568
01:06:41,599 --> 01:06:43,599
that as something we'd like to see

1569
01:06:43,599 --> 01:06:44,720
changed

1570
01:06:44,720 --> 01:06:47,119
our minutes are being

1571
01:06:47,119 --> 01:06:48,880
tracked in the same

1572
01:06:48,880 --> 01:06:52,240
space as where icn is which is great

1573
01:06:52,240 --> 01:06:53,920
and thanks to people to all the people

1574
01:06:53,920 --> 01:06:57,200
who've been contributing there

1575
01:06:57,520 --> 01:06:59,520
marie jose i think you had said you

1576
01:06:59,520 --> 01:07:02,799
wanted to talk about our document status

1577
01:07:02,799 --> 01:07:05,359
okay yeah i just wanted to say that

1578
01:07:05,359 --> 01:07:07,440
we have two rg documents that we would

1579
01:07:07,440 --> 01:07:08,640
like to

1580
01:07:08,640 --> 01:07:10,000
move forward

1581
01:07:10,000 --> 01:07:12,079
one is expired

1582
01:07:12,079 --> 01:07:13,039
um

1583
01:07:13,039 --> 01:07:16,240
and uh the other one uh i think needs

1584
01:07:16,240 --> 01:07:19,599
updates we have a ton of other documents

1585
01:07:19,599 --> 01:07:23,280
and that as um

1586
01:07:24,160 --> 01:07:26,799
eve said uh it's there's a lot of them

1587
01:07:26,799 --> 01:07:28,880
that maybe they're they're still good

1588
01:07:28,880 --> 01:07:30,559
maybe that some of them

1589
01:07:30,559 --> 01:07:32,559
should not

1590
01:07:32,559 --> 01:07:36,000
um be um

1591
01:07:36,000 --> 01:07:37,119
um

1592
01:07:37,119 --> 01:07:39,039
maybe would you know that they just

1593
01:07:39,039 --> 01:07:41,119
expired and we don't want to continue

1594
01:07:41,119 --> 01:07:43,359
anything but it would be good for the

1595
01:07:43,359 --> 01:07:45,839
authors to um

1596
01:07:45,839 --> 01:07:47,760
um

1597
01:07:47,760 --> 01:07:50,079
tell us what they intend to do and again

1598
01:07:50,079 --> 01:07:52,079
i think this is going to be

1599
01:07:52,079 --> 01:07:54,400
very much what we want to do uh at the

1600
01:07:54,400 --> 01:07:56,079
interim where we want to take some more

1601
01:07:56,079 --> 01:07:57,119
time

1602
01:07:57,119 --> 01:07:59,920
uh we also want to re-look at some of

1603
01:07:59,920 --> 01:08:01,440
the um

1604
01:08:01,440 --> 01:08:02,640
the charter

1605
01:08:02,640 --> 01:08:05,280
uh i don't think we need to be recharted

1606
01:08:05,280 --> 01:08:07,280
but there's uh goals that we had that we

1607
01:08:07,280 --> 01:08:08,240
need to

1608
01:08:08,240 --> 01:08:11,359
uh to look into and we will do that

1609
01:08:11,359 --> 01:08:14,960
again uh in a september

1610
01:08:14,960 --> 01:08:17,120
time frame um

1611
01:08:17,120 --> 01:08:18,719
yeah we've been hit pretty much by the

1612
01:08:18,719 --> 01:08:20,960
covid and um i think we're all a bit

1613
01:08:20,960 --> 01:08:22,719
under the weather

1614
01:08:22,719 --> 01:08:23,920
um

1615
01:08:23,920 --> 01:08:26,399
and uh yeah so i think without taking

1616
01:08:26,399 --> 01:08:28,479
more time because we're already uh our

1617
01:08:28,479 --> 01:08:29,839
terminates late

1618
01:08:29,839 --> 01:08:33,359
uh dirk trossen uh will present uh some

1619
01:08:33,359 --> 01:08:34,719
work uh

1620
01:08:34,719 --> 01:08:35,759
for

1621
01:08:35,759 --> 01:08:39,198
actually raider routing and addressing

1622
01:08:39,198 --> 01:08:41,439
and i would like to mention that tushar

1623
01:08:41,439 --> 01:08:42,880
who's going to have our last

1624
01:08:42,880 --> 01:08:46,080
presentation but not least was also the

1625
01:08:46,080 --> 01:08:49,279
applied networking research prize winner

1626
01:08:49,279 --> 01:08:50,719
and um

1627
01:08:50,719 --> 01:08:54,000
since that the last the last session uh

1628
01:08:54,000 --> 01:08:56,319
dirk said that he was looking forward to

1629
01:08:56,319 --> 01:08:59,040
start having so maybe some work in uh

1630
01:08:59,040 --> 01:09:00,719
you know and and machine learning

1631
01:09:00,719 --> 01:09:02,560
intelligence networking that type of

1632
01:09:02,560 --> 01:09:04,479
stuff and this is exactly what shaw is

1633
01:09:04,479 --> 01:09:06,560
going to present and of course the name

1634
01:09:06,560 --> 01:09:08,238
space is always

1635
01:09:08,238 --> 01:09:11,040
a common a common thing between icn and

1636
01:09:11,040 --> 01:09:11,759
us

1637
01:09:11,759 --> 01:09:13,120
and so i think uh those three

1638
01:09:13,120 --> 01:09:15,920
presentations will be very um

1639
01:09:15,920 --> 01:09:17,920
complementary to what was presented

1640
01:09:17,920 --> 01:09:21,120
before uh so dirk uh please uh we're

1641
01:09:21,120 --> 01:09:23,520
waiting for your presence

1642
01:09:23,520 --> 01:09:26,799
take the floor yes

1643
01:09:28,880 --> 01:09:30,719
slide sharing

1644
01:09:30,719 --> 01:09:33,279
um see

1645
01:09:33,279 --> 01:09:35,759
okay what am i for some reason i'm not

1646
01:09:35,759 --> 01:09:37,759
able to un

1647
01:09:37,759 --> 01:09:38,960
ah

1648
01:09:38,960 --> 01:09:42,000
right you have to stop sharing first eve

1649
01:09:42,000 --> 01:09:44,560
yes i'm trying but my my machine is

1650
01:09:44,560 --> 01:09:46,839
giving me beeps it's not

1651
01:09:46,839 --> 01:09:49,439
um let me just do that for you okay

1652
01:09:49,439 --> 01:09:52,158
perfect thank you

1653
01:09:52,158 --> 01:09:55,040
and uh can you see um share preloaded

1654
01:09:55,040 --> 01:09:56,640
slides in the top

1655
01:09:56,640 --> 01:09:59,199
or is that just for sure for chairs

1656
01:09:59,199 --> 01:10:02,000
no i don't i can see that i erase the

1657
01:10:02,000 --> 01:10:03,600
slide request

1658
01:10:03,600 --> 01:10:06,239
oh okay yeah right um

1659
01:10:06,239 --> 01:10:08,239
i think it has to go through you now

1660
01:10:08,239 --> 01:10:10,000
yeah let me just bring your slides up

1661
01:10:10,000 --> 01:10:13,679
and then i can drive them if you like

1662
01:10:14,159 --> 01:10:16,880
thank you yeah yes as as

1663
01:10:16,880 --> 01:10:18,320
i mentioned this is some work that's

1664
01:10:18,320 --> 01:10:20,400
related to um what you could call

1665
01:10:20,400 --> 01:10:23,040
advanced um packet forwarding if you

1666
01:10:23,040 --> 01:10:25,840
will more routing this is the joint work

1667
01:10:25,840 --> 01:10:28,560
um with my uh colleagues karima i mean

1668
01:10:28,560 --> 01:10:30,480
zoro and artur and also with george

1669
01:10:30,480 --> 01:10:32,640
khaled two hence the two logos at the

1670
01:10:32,640 --> 01:10:34,640
bottom they can see if you can go to the

1671
01:10:34,640 --> 01:10:37,440
next slide please

1672
01:10:39,840 --> 01:10:41,920
oh do i

1673
01:10:41,920 --> 01:10:43,440
um so the problem of random scheduling

1674
01:10:43,440 --> 01:10:45,120
that we that we looked at and there is

1675
01:10:45,120 --> 01:10:47,440
an accompanying draft um wasn't the list

1676
01:10:47,440 --> 01:10:49,360
that were usually um before so

1677
01:10:49,360 --> 01:10:51,600
scheduling and then and

1678
01:10:51,600 --> 01:10:53,760
joined network compute optimization has

1679
01:10:53,760 --> 01:10:56,239
been talked about in uh contributions to

1680
01:10:56,239 --> 01:10:57,440
coin before

1681
01:10:57,440 --> 01:10:58,960
so the environment that we're talking

1682
01:10:58,960 --> 01:11:00,719
about here is execution of services in

1683
01:11:00,719 --> 01:11:02,159
the distributed

1684
01:11:02,159 --> 01:11:03,520
service environment then particular

1685
01:11:03,520 --> 01:11:04,960
virtualization

1686
01:11:04,960 --> 01:11:07,120
drives the distribution of

1687
01:11:07,120 --> 01:11:09,440
a service implementation

1688
01:11:09,440 --> 01:11:10,400
in

1689
01:11:10,400 --> 01:11:12,960
one or more servers instances right um

1690
01:11:12,960 --> 01:11:15,280
they are available in one or possibly

1691
01:11:15,280 --> 01:11:16,880
more network locations

1692
01:11:16,880 --> 01:11:17,760
um

1693
01:11:17,760 --> 01:11:19,280
and and and you have to make a choice

1694
01:11:19,280 --> 01:11:21,760
which of the instances you would like to

1695
01:11:21,760 --> 01:11:23,520
like to use for your computation that's

1696
01:11:23,520 --> 01:11:24,719
essentially the runtime scheduling

1697
01:11:24,719 --> 01:11:26,880
problem the additional problem comes in

1698
01:11:26,880 --> 01:11:28,159
through when we capture this to the

1699
01:11:28,159 --> 01:11:30,640
notion of service transaction

1700
01:11:30,640 --> 01:11:33,760
it it may require an affinity to service

1701
01:11:33,760 --> 01:11:35,920
instance after you made an initial

1702
01:11:35,920 --> 01:11:38,400
decision because of ephemeral state that

1703
01:11:38,400 --> 01:11:40,159
has been created so this type of

1704
01:11:40,159 --> 01:11:42,000
affinity needs to be

1705
01:11:42,000 --> 01:11:44,080
observed otherwise you're putting

1706
01:11:44,080 --> 01:11:45,280
additional requirements on the

1707
01:11:45,280 --> 01:11:47,199
application to move state which you can

1708
01:11:47,199 --> 01:11:49,280
do through shared data layers but not

1709
01:11:49,280 --> 01:11:50,880
all of the application frameworks

1710
01:11:50,880 --> 01:11:53,600
necessarily work with shared data layers

1711
01:11:53,600 --> 01:11:55,760
so the problem that we that we outlined

1712
01:11:55,760 --> 01:11:58,480
is to find the best service instance to

1713
01:11:58,480 --> 01:12:00,719
serve the client transaction runtime um

1714
01:12:00,719 --> 01:12:03,600
while we also preserve the um

1715
01:12:03,600 --> 01:12:05,600
at the the the the affinity after

1716
01:12:05,600 --> 01:12:07,280
machine has been made

1717
01:12:07,280 --> 01:12:08,880
and and the solution is called computer

1718
01:12:08,880 --> 01:12:10,960
where distributed scheduling you can see

1719
01:12:10,960 --> 01:12:13,040
the two key aspects the one is it is

1720
01:12:13,040 --> 01:12:14,400
computer where

1721
01:12:14,400 --> 01:12:15,199
so

1722
01:12:15,199 --> 01:12:17,679
best that we put in a in in quotes there

1723
01:12:17,679 --> 01:12:20,159
is is an awareness of the compute

1724
01:12:20,159 --> 01:12:22,719
capability of the service instance and

1725
01:12:22,719 --> 01:12:24,960
it is distributed scheduling it does not

1726
01:12:24,960 --> 01:12:25,840
um

1727
01:12:25,840 --> 01:12:28,960
go wire in in inflection point it's it's

1728
01:12:28,960 --> 01:12:32,560
done at the inquest to the network

1729
01:12:32,560 --> 01:12:35,920
okay yeah there is no thank you very

1730
01:12:35,920 --> 01:12:37,760
much i can see them a little bit faded

1731
01:12:37,760 --> 01:12:41,280
on on some of the browsers funny enough

1732
01:12:41,280 --> 01:12:43,280
that was great sorry

1733
01:12:43,280 --> 01:12:44,640
so

1734
01:12:44,640 --> 01:12:47,920
we're basing the the the the cards idea

1735
01:12:47,920 --> 01:12:50,560
on a system um that routes service

1736
01:12:50,560 --> 01:12:52,320
requests based on service identifiers

1737
01:12:52,320 --> 01:12:54,000
that's that's also there's a certain

1738
01:12:54,000 --> 01:12:56,400
proximity there to icn if you will

1739
01:12:56,400 --> 01:12:59,199
uh in in the sense that the

1740
01:12:59,199 --> 01:13:01,199
um so we have distributed

1741
01:13:01,199 --> 01:13:02,880
geographically distribute sites over the

1742
01:13:02,880 --> 01:13:04,800
service instances they are shown

1743
01:13:04,800 --> 01:13:06,560
in red on the

1744
01:13:06,560 --> 01:13:09,120
more right hand side of the picture

1745
01:13:09,120 --> 01:13:11,040
client issue service request which is

1746
01:13:11,040 --> 01:13:14,080
destined to service identifier

1747
01:13:14,080 --> 01:13:17,040
and the incoming semantic router which

1748
01:13:17,040 --> 01:13:19,440
are the the uh the red

1749
01:13:19,440 --> 01:13:21,760
uh boarded one sr one two and three for

1750
01:13:21,760 --> 01:13:23,679
each of the clients

1751
01:13:23,679 --> 01:13:25,440
forward the service request towards a

1752
01:13:25,440 --> 01:13:27,920
suitable destination which is one of the

1753
01:13:27,920 --> 01:13:30,560
possibly many substances the five that

1754
01:13:30,560 --> 01:13:32,000
you can see here on the slide that's

1755
01:13:32,000 --> 01:13:33,280
three different locations so you have

1756
01:13:33,280 --> 01:13:35,360
three different locations um but five

1757
01:13:35,360 --> 01:13:37,520
different instances

1758
01:13:37,520 --> 01:13:39,679
it performs an on path forwarding

1759
01:13:39,679 --> 01:13:42,320
decision and that's the the key part um

1760
01:13:42,320 --> 01:13:43,840
that we proposed

1761
01:13:43,840 --> 01:13:46,159
and that's compared to an existing dns

1762
01:13:46,159 --> 01:13:49,440
plus ip of pass

1763
01:13:49,440 --> 01:13:51,840
decision that you could do as well

1764
01:13:51,840 --> 01:13:53,840
the affinity is insured in the system by

1765
01:13:53,840 --> 01:13:56,159
using iplocator for the subsequent

1766
01:13:56,159 --> 01:13:57,679
request so the service request is a

1767
01:13:57,679 --> 01:13:59,440
special request to serve identifier it

1768
01:13:59,440 --> 01:14:02,560
makes its way to let's say this instance

1769
01:14:02,560 --> 01:14:05,360
and then the subsequent requests for the

1770
01:14:05,360 --> 01:14:07,280
transaction are using the ip locator of

1771
01:14:07,280 --> 01:14:09,280
that instance to

1772
01:14:09,280 --> 01:14:11,040
root the request directly to the

1773
01:14:11,040 --> 01:14:13,280
instance so only the very for the very

1774
01:14:13,280 --> 01:14:17,040
first request the decision is being made

1775
01:14:17,199 --> 01:14:18,400
what is computer where the swivel is

1776
01:14:18,400 --> 01:14:19,679
getting now one of the things we wanted

1777
01:14:19,679 --> 01:14:21,440
to achieve is that we that we wouldn't

1778
01:14:21,440 --> 01:14:24,000
need to signal permanently a lot of work

1779
01:14:24,000 --> 01:14:26,159
on computer wear uh

1780
01:14:26,159 --> 01:14:28,640
forwarding decisions that are also cited

1781
01:14:28,640 --> 01:14:29,760
in the paper

1782
01:14:29,760 --> 01:14:32,560
um but but we wanted to avoid very very

1783
01:14:32,560 --> 01:14:34,480
frequent signaling so we attached to

1784
01:14:34,480 --> 01:14:37,280
computer awareness to something you can

1785
01:14:37,280 --> 01:14:38,719
derive from

1786
01:14:38,719 --> 01:14:40,159
the deployment of a server so each

1787
01:14:40,159 --> 01:14:41,679
service instance is assigned a

1788
01:14:41,679 --> 01:14:44,080
normalized compute unit this could be

1789
01:14:44,080 --> 01:14:45,360
depending on your orchestration

1790
01:14:45,360 --> 01:14:47,679
framework something like how many cores

1791
01:14:47,679 --> 01:14:49,280
am i assigning to the service instance

1792
01:14:49,280 --> 01:14:50,960
when i deploy this how many threads how

1793
01:14:50,960 --> 01:14:53,360
many containers the different ways and

1794
01:14:53,360 --> 01:14:55,280
examples are given in the paper how you

1795
01:14:55,280 --> 01:14:57,760
could represent the complete unit

1796
01:14:57,760 --> 01:14:59,360
all the convenience are flattened and

1797
01:14:59,360 --> 01:15:01,679
joined in an identify specific routing

1798
01:15:01,679 --> 01:15:03,280
identifier interval you can see this on

1799
01:15:03,280 --> 01:15:06,000
the right hand side um so that in in

1800
01:15:06,000 --> 01:15:07,679
this case it means you know you have

1801
01:15:07,679 --> 01:15:09,520
exactly one compute in it for the first

1802
01:15:09,520 --> 01:15:11,760
one you have two for the second one

1803
01:15:11,760 --> 01:15:14,400
again one for this one uh four this is a

1804
01:15:14,400 --> 01:15:16,080
rather big server

1805
01:15:16,080 --> 01:15:18,640
at the bottom and two again for the last

1806
01:15:18,640 --> 01:15:20,880
instance and it's then distributed to

1807
01:15:20,880 --> 01:15:23,280
all routers correctly the semantic

1808
01:15:23,280 --> 01:15:25,280
router so not the routers the the

1809
01:15:25,280 --> 01:15:27,600
standard ipv6 which is only the bridges

1810
01:15:27,600 --> 01:15:28,560
at

1811
01:15:28,560 --> 01:15:31,120
the inquest that are shown here

1812
01:15:31,120 --> 01:15:33,199
the scheduling now that you

1813
01:15:33,199 --> 01:15:35,679
implement is a distributed round robin

1814
01:15:35,679 --> 01:15:38,159
so you essentially run through this

1815
01:15:38,159 --> 01:15:39,520
interval

1816
01:15:39,520 --> 01:15:41,280
in a round-robin fashion you have an

1817
01:15:41,280 --> 01:15:43,520
incoming request at the and each of the

1818
01:15:43,520 --> 01:15:44,960
identifiers

1819
01:15:44,960 --> 01:15:46,800
uh exist at each of the increases so

1820
01:15:46,800 --> 01:15:48,960
each inquest is independent from the

1821
01:15:48,960 --> 01:15:51,120
others a decision of sending the first

1822
01:15:51,120 --> 01:15:53,440
request to the first one the next two

1823
01:15:53,440 --> 01:15:56,320
requests to the second one the

1824
01:15:56,320 --> 01:15:58,400
the fourth one to this one etcetera

1825
01:15:58,400 --> 01:15:59,920
until it

1826
01:15:59,920 --> 01:16:01,520
it wraps around

1827
01:16:01,520 --> 01:16:03,360
when it reaches the last one that's

1828
01:16:03,360 --> 01:16:04,960
what's being implemented

1829
01:16:04,960 --> 01:16:06,719
it's it can be implemented like a link

1830
01:16:06,719 --> 01:16:08,080
speed we have a separate paper we

1831
01:16:08,080 --> 01:16:09,760
published last year

1832
01:16:09,760 --> 01:16:12,239
um where we did a very similar mechanism

1833
01:16:12,239 --> 01:16:15,600
uh in t4 and showed what are the issues

1834
01:16:15,600 --> 01:16:20,840
before in doing that uh successfully

1835
01:16:21,840 --> 01:16:22,719
so

1836
01:16:22,719 --> 01:16:24,560
we implemented this in in in

1837
01:16:24,560 --> 01:16:26,640
assimilation and we also have now um by

1838
01:16:26,640 --> 01:16:28,560
the way a a

1839
01:16:28,560 --> 01:16:30,480
real implementation ebpf but at the time

1840
01:16:30,480 --> 01:16:32,719
when we published a paper simulation and

1841
01:16:32,719 --> 01:16:34,880
these results see our simulation we went

1842
01:16:34,880 --> 01:16:37,760
by simulator um we used five sites for

1843
01:16:37,760 --> 01:16:40,640
servers service instant um

1844
01:16:40,640 --> 01:16:42,880
per server you can also have multi-host

1845
01:16:42,880 --> 01:16:44,159
but uh we didn't do this in the

1846
01:16:44,159 --> 01:16:45,360
simulation

1847
01:16:45,360 --> 01:16:48,080
um the compute units are signed at the

1848
01:16:48,080 --> 01:16:51,679
start so really emulating a deployment

1849
01:16:51,679 --> 01:16:53,679
of these compute units and and the

1850
01:16:53,679 --> 01:16:55,199
instances run for a certain amount of

1851
01:16:55,199 --> 01:16:57,440
time until you may redeploy or

1852
01:16:57,440 --> 01:16:59,600
reorchestrate uh

1853
01:16:59,600 --> 01:17:00,880
your your

1854
01:17:00,880 --> 01:17:02,400
your service setup

1855
01:17:02,400 --> 01:17:04,239
you have five english semantic widows as

1856
01:17:04,239 --> 01:17:05,120
well

1857
01:17:05,120 --> 01:17:06,960
uh and the sales requests only go to one

1858
01:17:06,960 --> 01:17:08,880
service function uh and there are single

1859
01:17:08,880 --> 01:17:12,480
packet requests uh um with which they're

1860
01:17:12,480 --> 01:17:13,760
sent

1861
01:17:13,760 --> 01:17:15,360
the main metric that we're interested in

1862
01:17:15,360 --> 01:17:17,360
is the request completion time so how

1863
01:17:17,360 --> 01:17:19,199
can we improve the actual

1864
01:17:19,199 --> 01:17:22,159
um latency at the request level of these

1865
01:17:22,159 --> 01:17:24,560
service requests

1866
01:17:24,560 --> 01:17:26,880
so the scenario one we we looked at was

1867
01:17:26,880 --> 01:17:29,199
generally in scenario one

1868
01:17:29,199 --> 01:17:30,960
um and there's one a and one b and then

1869
01:17:30,960 --> 01:17:32,560
b i would skip over in the interest of

1870
01:17:32,560 --> 01:17:34,719
time um we had different design aspects

1871
01:17:34,719 --> 01:17:35,920
so so what's the impact of the

1872
01:17:35,920 --> 01:17:38,080
centralization versus the

1873
01:17:38,080 --> 01:17:40,640
distribution um so we distributed the

1874
01:17:40,640 --> 01:17:43,600
scheduling over a growing number of

1875
01:17:43,600 --> 01:17:46,159
of inquest points and even in the end

1876
01:17:46,159 --> 01:17:48,880
into the clients themselves clients

1877
01:17:48,880 --> 01:17:50,719
could be seen as an increase point very

1878
01:17:50,719 --> 01:17:53,199
very much um close to the actual

1879
01:17:53,199 --> 01:17:56,080
application versus an idealized center

1880
01:17:56,080 --> 01:17:59,120
central scheduling so idealized means we

1881
01:17:59,120 --> 01:18:01,040
neglected the actual path latency to

1882
01:18:01,040 --> 01:18:03,199
move to a central point and only

1883
01:18:03,199 --> 01:18:05,040
centralize the actual logic so not

1884
01:18:05,040 --> 01:18:06,800
necessarily the actual latency obviously

1885
01:18:06,800 --> 01:18:08,800
we'll have different latency there

1886
01:18:08,800 --> 01:18:10,400
and and and the observation we got from

1887
01:18:10,400 --> 01:18:11,920
the civilization is there's a natural

1888
01:18:11,920 --> 01:18:14,480
effect of the distribution of the on the

1889
01:18:14,480 --> 01:18:16,719
mean rcts which means

1890
01:18:16,719 --> 01:18:18,560
the distribution itself the fact that

1891
01:18:18,560 --> 01:18:20,960
these schedulers run independent from

1892
01:18:20,960 --> 01:18:23,120
each other is not particularly large

1893
01:18:23,120 --> 01:18:25,520
when you start growing this to to very

1894
01:18:25,520 --> 01:18:27,520
many increase points when you see an

1895
01:18:27,520 --> 01:18:29,679
increase in rcts when the

1896
01:18:29,679 --> 01:18:32,480
uh when the system load approaches 100

1897
01:18:32,480 --> 01:18:35,600
but generally uh the the impact uh um is

1898
01:18:35,600 --> 01:18:37,440
relatively small so that was one of the

1899
01:18:37,440 --> 01:18:39,280
aspects so and again this obviously does

1900
01:18:39,280 --> 01:18:41,600
not take into account the latency

1901
01:18:41,600 --> 01:18:43,360
through running wire centralized point

1902
01:18:43,360 --> 01:18:44,640
if you take that into account the

1903
01:18:44,640 --> 01:18:45,520
numbers

1904
01:18:45,520 --> 01:18:46,800
would get better again for the

1905
01:18:46,800 --> 01:18:48,560
distributed scheduling where you do not

1906
01:18:48,560 --> 01:18:50,719
have this additional latency

1907
01:18:50,719 --> 01:18:52,320
i skipped this one this was actually in

1908
01:18:52,320 --> 01:18:54,320
the pptx that i sent in the powerpoint

1909
01:18:54,320 --> 01:18:56,159
it was actually hidden you can look at

1910
01:18:56,159 --> 01:18:59,199
it separately if you download the slides

1911
01:18:59,199 --> 01:19:01,600
we then compare it with other

1912
01:19:01,600 --> 01:19:03,600
network level solutions

1913
01:19:03,600 --> 01:19:05,040
so we wanted to compare cards

1914
01:19:05,040 --> 01:19:06,800
performance against other distributed

1915
01:19:06,800 --> 01:19:08,400
scheduling mechanisms

1916
01:19:08,400 --> 01:19:09,199
um

1917
01:19:09,199 --> 01:19:12,000
that in in the sense of both factoring

1918
01:19:12,000 --> 01:19:13,520
compute capabilities in the scheduling

1919
01:19:13,520 --> 01:19:15,120
decision so they needed to be computer

1920
01:19:15,120 --> 01:19:16,000
aware

1921
01:19:16,000 --> 01:19:18,800
um they uh to perform scheduling at the

1922
01:19:18,800 --> 01:19:20,880
inquest versus at sites so we wanted to

1923
01:19:20,880 --> 01:19:24,159
compare this design aspect of cards

1924
01:19:24,159 --> 01:19:26,560
and we also wanted to uh evaluate the

1925
01:19:26,560 --> 01:19:28,640
impact of distributing compute units

1926
01:19:28,640 --> 01:19:30,640
across sites and with insights so if

1927
01:19:30,640 --> 01:19:32,800
there are imbalances of distributions

1928
01:19:32,800 --> 01:19:35,120
compute units what's the impact of that

1929
01:19:35,120 --> 01:19:37,600
we use two um schedulers one is a random

1930
01:19:37,600 --> 01:19:39,600
scheduler it's it's position of the

1931
01:19:39,600 --> 01:19:42,159
increase a note it is not compute away

1932
01:19:42,159 --> 01:19:44,320
at all it performs random load balancing

1933
01:19:44,320 --> 01:19:47,040
it by selecting an instance uniformly at

1934
01:19:47,040 --> 01:19:48,880
a random and then just sends it to the

1935
01:19:48,880 --> 01:19:50,480
actual network location

1936
01:19:50,480 --> 01:19:52,960
the second one um is called steam that's

1937
01:19:52,960 --> 01:19:55,840
an an infocomm uh from instagram paper

1938
01:19:55,840 --> 01:19:58,480
in 2020 so it was one year before we

1939
01:19:58,480 --> 01:20:00,400
started our work one of the courses

1940
01:20:00,400 --> 01:20:01,679
ramen

1941
01:20:01,679 --> 01:20:04,800
is also on this paper this is positioned

1942
01:20:04,800 --> 01:20:06,639
at the site increases not that the

1943
01:20:06,639 --> 01:20:09,040
client increases at the site interest

1944
01:20:09,040 --> 01:20:11,600
and they for the the actual

1945
01:20:11,600 --> 01:20:12,880
network interest notes forward the

1946
01:20:12,880 --> 01:20:15,120
request to the sites uniformly at random

1947
01:20:15,120 --> 01:20:16,320
but then the

1948
01:20:16,320 --> 01:20:17,199
uh

1949
01:20:17,199 --> 01:20:19,199
is therefore compute unaware at the

1950
01:20:19,199 --> 01:20:20,719
network interest but at the site

1951
01:20:20,719 --> 01:20:22,880
increase it is using node estimation to

1952
01:20:22,880 --> 01:20:23,840
find

1953
01:20:23,840 --> 01:20:26,800
the right uh compute instance

1954
01:20:26,800 --> 01:20:29,280
within the site so it is kind of like a

1955
01:20:29,280 --> 01:20:31,520
mixture of compute unaware in the

1956
01:20:31,520 --> 01:20:35,040
network but computer wear at the side

1957
01:20:35,040 --> 01:20:37,440
the what we found in the comparison

1958
01:20:37,440 --> 01:20:39,520
not surprising is the card significantly

1959
01:20:39,520 --> 01:20:42,320
reduces the the the rct in particular in

1960
01:20:42,320 --> 01:20:45,360
high load settings um because it is uh

1961
01:20:45,360 --> 01:20:46,080
uh

1962
01:20:46,080 --> 01:20:47,360
is taking into account even the

1963
01:20:47,360 --> 01:20:50,400
distribution to the sites the compute

1964
01:20:50,400 --> 01:20:52,159
units of the individual instances which

1965
01:20:52,159 --> 01:20:54,239
steam doesn't do

1966
01:20:54,239 --> 01:20:57,040
steam on the other hand has issues when

1967
01:20:57,040 --> 01:20:57,840
the

1968
01:20:57,840 --> 01:20:59,760
the system load goes significantly up

1969
01:20:59,760 --> 01:21:01,440
above eighty percent as you can see in

1970
01:21:01,440 --> 01:21:03,360
the right hand side it jumps quite

1971
01:21:03,360 --> 01:21:05,040
significantly even above the renmin

1972
01:21:05,040 --> 01:21:07,600
scheduler

1973
01:21:07,679 --> 01:21:10,400
uh what we then looked was the imbalance

1974
01:21:10,400 --> 01:21:13,440
of the computing distribution so we

1975
01:21:13,440 --> 01:21:15,360
we created imbalances across sites the

1976
01:21:15,360 --> 01:21:17,360
normal configuration was roughly the

1977
01:21:17,360 --> 01:21:19,360
same compute unit

1978
01:21:19,360 --> 01:21:21,760
um number per each of the sites and then

1979
01:21:21,760 --> 01:21:23,520
within the sites roughly the service

1980
01:21:23,520 --> 01:21:25,600
instances were you know almost the same

1981
01:21:25,600 --> 01:21:26,880
distributed

1982
01:21:26,880 --> 01:21:28,480
and we changed this now

1983
01:21:28,480 --> 01:21:32,239
um in uh making one side very very big

1984
01:21:32,239 --> 01:21:34,480
and the other one's relatively weak in

1985
01:21:34,480 --> 01:21:38,320
compute units uh and equally uh we had

1986
01:21:38,320 --> 01:21:42,880
in the second sub-scenario we uh create

1987
01:21:42,880 --> 01:21:44,639
the same imbalance within the site so

1988
01:21:44,639 --> 01:21:46,400
one of the service instances was very

1989
01:21:46,400 --> 01:21:49,360
very big compared to the the other um

1990
01:21:49,360 --> 01:21:51,600
service instances and what we could see

1991
01:21:51,600 --> 01:21:52,960
is that

1992
01:21:52,960 --> 01:21:56,480
the steam handles the the contention

1993
01:21:56,480 --> 01:22:00,480
uh uh um quite well in the in when the

1994
01:22:00,480 --> 01:22:01,760
when there's an imbalance within the

1995
01:22:01,760 --> 01:22:04,239
side because it uses load uh balancing

1996
01:22:04,239 --> 01:22:06,159
with inner side hence it can obviously

1997
01:22:06,159 --> 01:22:07,520
deal with the imbalance but it cannot

1998
01:22:07,520 --> 01:22:09,520
deal with the imbalance across sites

1999
01:22:09,520 --> 01:22:12,639
because it's computer unaware

2000
01:22:12,639 --> 01:22:14,159
cards is

2001
01:22:14,159 --> 01:22:15,440
performs well across all of the

2002
01:22:15,440 --> 01:22:16,960
scenarios because it is generally

2003
01:22:16,960 --> 01:22:18,639
computer where even across sides and

2004
01:22:18,639 --> 01:22:20,159
hence it outperforms all of the other

2005
01:22:20,159 --> 01:22:21,280
ones

2006
01:22:21,280 --> 01:22:23,600
the random schedule is particularly bad

2007
01:22:23,600 --> 01:22:26,480
in the in the

2008
01:22:26,480 --> 01:22:28,719
in all across the scenarios because it

2009
01:22:28,719 --> 01:22:30,000
is simply unaware of the compute

2010
01:22:30,000 --> 01:22:32,320
capabilities if you have imbalances it

2011
01:22:32,320 --> 01:22:35,679
shows that quite badly

2012
01:22:36,400 --> 01:22:38,560
we also use the use case driven analysis

2013
01:22:38,560 --> 01:22:40,080
and here we set the simulation

2014
01:22:40,080 --> 01:22:42,239
parameters um this is kind of like a

2015
01:22:42,239 --> 01:22:43,760
media scenario since they mentioned

2016
01:22:43,760 --> 01:22:45,440
media before in the ic energy as a

2017
01:22:45,440 --> 01:22:49,600
potential work as well where um

2018
01:22:49,600 --> 01:22:50,880
where we have individual service

2019
01:22:50,880 --> 01:22:52,400
requests for instance for content

2020
01:22:52,400 --> 01:22:54,560
retrieval um or you know which could be

2021
01:22:54,560 --> 01:22:56,239
either video or it could be software

2022
01:22:56,239 --> 01:22:57,920
uploads where i would like to have

2023
01:22:57,920 --> 01:22:59,360
something i'm getting a larger chunk

2024
01:22:59,360 --> 01:23:01,120
back so it's kind of like a rather icy

2025
01:23:01,120 --> 01:23:03,679
energy scenario if you will right and we

2026
01:23:03,679 --> 01:23:05,520
compare this to existing long lift

2027
01:23:05,520 --> 01:23:07,040
approaches what we mean with long lift

2028
01:23:07,040 --> 01:23:08,960
approaches is an approach

2029
01:23:08,960 --> 01:23:11,040
where a decision which server to be

2030
01:23:11,040 --> 01:23:13,679
chosen is relatively long and this can

2031
01:23:13,679 --> 01:23:15,280
either be

2032
01:23:15,280 --> 01:23:17,600
a and we chose to it's a one minute

2033
01:23:17,600 --> 01:23:19,840
transaction so after one minute we

2034
01:23:19,840 --> 01:23:22,000
essentially recalibrate um that would

2035
01:23:22,000 --> 01:23:23,920
mean we issue after flush in the dns

2036
01:23:23,920 --> 01:23:24,719
cache

2037
01:23:24,719 --> 01:23:27,040
we are issuing another dns request

2038
01:23:27,040 --> 01:23:29,440
hopefully getting another choice now

2039
01:23:29,440 --> 01:23:32,080
and we used random as the the comparison

2040
01:23:32,080 --> 01:23:34,800
there we also compared um

2041
01:23:34,800 --> 01:23:36,800
random choice at packet level so where

2042
01:23:36,800 --> 01:23:38,560
you would make a change even at the

2043
01:23:38,560 --> 01:23:39,840
packet level

2044
01:23:39,840 --> 01:23:42,560
and what we can see is is the the

2045
01:23:42,560 --> 01:23:44,560
performance of cards

2046
01:23:44,560 --> 01:23:45,440
um

2047
01:23:45,440 --> 01:23:48,239
even up to very very high the

2048
01:23:48,239 --> 01:23:50,639
vertical line here is 100 system load

2049
01:23:50,639 --> 01:23:52,560
even when the system not approaches 100

2050
01:23:52,560 --> 01:23:53,520
percent

2051
01:23:53,520 --> 01:23:55,199
um and what's more important because in

2052
01:23:55,199 --> 01:23:58,000
the use case to written analysis we set

2053
01:23:58,000 --> 01:24:00,320
the latency at the end arrival time at

2054
01:24:00,320 --> 01:24:02,719
two seconds i said well what about if

2055
01:24:02,719 --> 01:24:04,320
you if you have a

2056
01:24:04,320 --> 01:24:07,840
um an up about legacy of 1.5 seconds so

2057
01:24:07,840 --> 01:24:09,199
meaning i still have enough time to

2058
01:24:09,199 --> 01:24:10,880
receive the packet and do whatever

2059
01:24:10,880 --> 01:24:12,480
decoding i need to do but one and a half

2060
01:24:12,480 --> 01:24:13,679
seconds should really be the upper bound

2061
01:24:13,679 --> 01:24:15,760
latency and what is the number of

2062
01:24:15,760 --> 01:24:17,520
clients where this upper bound latency

2063
01:24:17,520 --> 01:24:20,560
is is is is being exceeded and we can

2064
01:24:20,560 --> 01:24:22,560
see that cards in comparison to the

2065
01:24:22,560 --> 01:24:24,400
other mechanism significantly this is

2066
01:24:24,400 --> 01:24:26,239
significantly more client so if you draw

2067
01:24:26,239 --> 01:24:28,320
in our horizontal line which would be

2068
01:24:28,320 --> 01:24:31,040
very much at the bottom of this graph

2069
01:24:31,040 --> 01:24:33,920
you can see that cards serves 24 000

2070
01:24:33,920 --> 01:24:35,920
more clients

2071
01:24:35,920 --> 01:24:37,040
than uh

2072
01:24:37,040 --> 01:24:38,480
than uh

2073
01:24:38,480 --> 01:24:41,199
steam and 162 percent more even more

2074
01:24:41,199 --> 01:24:42,639
clients

2075
01:24:42,639 --> 01:24:44,800
for the uh for the long-lived affinity

2076
01:24:44,800 --> 01:24:46,400
scheduling oh sorry for the packet level

2077
01:24:46,400 --> 01:24:47,920
scheduling versus the long-lived dfinity

2078
01:24:47,920 --> 01:24:48,960
scheduling

2079
01:24:48,960 --> 01:24:51,199
so the the the packet level computer

2080
01:24:51,199 --> 01:24:53,440
variant decision a little bit expected

2081
01:24:53,440 --> 01:24:57,638
has a significantly higher performance

2082
01:24:58,000 --> 01:24:59,120
what's the conclusion well the

2083
01:24:59,120 --> 01:25:01,360
conclusion is that we we we try to show

2084
01:25:01,360 --> 01:25:03,120
with this work that we can integrate

2085
01:25:03,120 --> 01:25:05,280
computer awareness into the steering

2086
01:25:05,280 --> 01:25:07,840
decision of at the data plane level

2087
01:25:07,840 --> 01:25:09,679
these are two pieces of work at a system

2088
01:25:09,679 --> 01:25:11,679
that we outlined in the paper but also

2089
01:25:11,679 --> 01:25:13,520
the accompanying p4 work that we've done

2090
01:25:13,520 --> 01:25:15,360
before to show that you could implement

2091
01:25:15,360 --> 01:25:17,840
this at the data pineapple through

2092
01:25:17,840 --> 01:25:19,920
programming frameworks like p4 the

2093
01:25:19,920 --> 01:25:21,440
computer awareness here is a relatively

2094
01:25:21,440 --> 01:25:23,199
static computer awareness so it doesn't

2095
01:25:23,199 --> 01:25:24,960
require frequent

2096
01:25:24,960 --> 01:25:27,440
load signaling it just says well do you

2097
01:25:27,440 --> 01:25:29,600
are you going to put a big server versus

2098
01:25:29,600 --> 01:25:31,280
a small server somewhere that's already

2099
01:25:31,280 --> 01:25:32,400
enough to make

2100
01:25:32,400 --> 01:25:34,719
fairly good decisions and it doesn't

2101
01:25:34,719 --> 01:25:36,880
have much signaling overhead that's the

2102
01:25:36,880 --> 01:25:38,080
good thing

2103
01:25:38,080 --> 01:25:39,600
significant performance improvements and

2104
01:25:39,600 --> 01:25:41,600
the simulation we've seen that um

2105
01:25:41,600 --> 01:25:45,520
including also to serve more clients

2106
01:25:45,520 --> 01:25:46,239
so

2107
01:25:46,239 --> 01:25:48,320
where do we want to push this work this

2108
01:25:48,320 --> 01:25:49,840
was as i mentioned ethic networking

2109
01:25:49,840 --> 01:25:51,280
paper um

2110
01:25:51,280 --> 01:25:54,000
and my apologies for the mix-up was

2111
01:25:54,000 --> 01:25:55,760
getting the proceedings um i

2112
01:25:55,760 --> 01:25:58,159
accidentally disclosed the author link

2113
01:25:58,159 --> 01:26:00,480
as i was told later and the website had

2114
01:26:00,480 --> 01:26:02,239
to be shut down so and this to the coin

2115
01:26:02,239 --> 01:26:03,840
list it was only the link was only live

2116
01:26:03,840 --> 01:26:05,679
for a couple of minutes um the

2117
01:26:05,679 --> 01:26:07,920
proceedings should be available now even

2118
01:26:07,920 --> 01:26:09,360
though i don't have the link handy at

2119
01:26:09,360 --> 01:26:10,320
the moment

2120
01:26:10,320 --> 01:26:12,880
what this did it is it is a horizontal

2121
01:26:12,880 --> 01:26:15,360
comparison it it compares cards with two

2122
01:26:15,360 --> 01:26:17,840
other mechanisms at layer 3.

2123
01:26:17,840 --> 01:26:19,360
what we've done as follow-up work

2124
01:26:19,360 --> 01:26:21,199
already is

2125
01:26:21,199 --> 01:26:22,719
to answer the question what about if you

2126
01:26:22,719 --> 01:26:24,400
use cards so there's no particular

2127
01:26:24,400 --> 01:26:26,480
reason why you use cards at l3 right you

2128
01:26:26,480 --> 01:26:29,120
could use cards at l7 as well right

2129
01:26:29,120 --> 01:26:31,199
and that's a vertical comparison and we

2130
01:26:31,199 --> 01:26:33,840
did this um at the moment um

2131
01:26:33,840 --> 01:26:34,719
uh

2132
01:26:34,719 --> 01:26:36,639
in a new paper that we published in the

2133
01:26:36,639 --> 01:26:39,040
upcoming uh firearm workshop where also

2134
01:26:39,040 --> 01:26:40,800
the namespace paper that you will hear

2135
01:26:40,800 --> 01:26:43,360
next is going to be presented

2136
01:26:43,360 --> 01:26:45,360
which compares will be then positioned

2137
01:26:45,360 --> 01:26:48,159
as an off-pass traffic steering at l3

2138
01:26:48,159 --> 01:26:49,920
against a sorry on-pass traffic steering

2139
01:26:49,920 --> 01:26:52,639
at l3 against an off-pass indirection

2140
01:26:52,639 --> 01:26:56,400
based resolution at l7 and it compares

2141
01:26:56,400 --> 01:26:59,120
so that allows us to somewhat compare

2142
01:26:59,120 --> 01:27:01,280
the usage of the same mechanism computer

2143
01:27:01,280 --> 01:27:03,920
by mechanism but with different systems

2144
01:27:03,920 --> 01:27:06,880
and tests and you can find those results

2145
01:27:06,880 --> 01:27:09,440
in that um paper i think the proceedings

2146
01:27:09,440 --> 01:27:11,840
will be live at some point the workshop

2147
01:27:11,840 --> 01:27:14,560
is going to be in in in in august um

2148
01:27:14,560 --> 01:27:17,280
third week of august

2149
01:27:17,280 --> 01:27:20,400
that was it thank you very much

2150
01:27:25,600 --> 01:27:28,800
any questions reactions

2151
01:27:30,400 --> 01:27:33,199
i'm dirk yes

2152
01:27:33,199 --> 01:27:37,040
um so i i don't want to start a

2153
01:27:37,040 --> 01:27:39,360
rightful discussion here but um

2154
01:27:39,360 --> 01:27:42,480
why call this semantic routing um so why

2155
01:27:42,480 --> 01:27:44,960
why what do the forwarders have to know

2156
01:27:44,960 --> 01:27:47,040
about semantics isn't this just names

2157
01:27:47,040 --> 01:27:48,239
that they

2158
01:27:48,239 --> 01:27:50,719
need to know and then make the following

2159
01:27:50,719 --> 01:27:51,840
decisions

2160
01:27:51,840 --> 01:27:54,320
based on on that knowledge

2161
01:27:54,320 --> 01:27:56,239
yeah so so the semantic here is the

2162
01:27:56,239 --> 01:27:58,000
service identifier um we actually

2163
01:27:58,000 --> 01:27:59,920
changed the name in the apk in the fire

2164
01:27:59,920 --> 01:28:01,360
paper so you won't find some anecdotes

2165
01:28:01,360 --> 01:28:02,960
anymore this paper

2166
01:28:02,960 --> 01:28:04,639
i think was written initially actually

2167
01:28:04,639 --> 01:28:06,159
for infocom last year when we called it

2168
01:28:06,159 --> 01:28:08,480
semantic reader and we called it after a

2169
01:28:08,480 --> 01:28:09,679
service with it because it's a service

2170
01:28:09,679 --> 01:28:10,960
identifier so it's a bit more

2171
01:28:10,960 --> 01:28:13,440
descriptive as to what the semantic is

2172
01:28:13,440 --> 01:28:15,440
for the same reasons you weren't the

2173
01:28:15,440 --> 01:28:17,120
first one that actually asked for you or

2174
01:28:17,120 --> 01:28:19,440
what if it is a specific semantic while

2175
01:28:19,440 --> 01:28:20,800
you just put the semantic into the name

2176
01:28:20,800 --> 01:28:23,280
which into the description which we did

2177
01:28:23,280 --> 01:28:24,719
i just use semantic reader because

2178
01:28:24,719 --> 01:28:26,480
that's what's written in the paper

2179
01:28:26,480 --> 01:28:29,839
okay thank you

2180
01:28:31,600 --> 01:28:34,320
uh jeffrey

2181
01:28:36,000 --> 01:28:38,159
um yeah there's this is marie there's a

2182
01:28:38,159 --> 01:28:39,600
question also

2183
01:28:39,600 --> 01:28:43,040
uh from the uh the chat uh dirk which is

2184
01:28:43,040 --> 01:28:45,120
from oh sorry i haven't i didn't get i

2185
01:28:45,120 --> 01:28:46,960
didn't go there sorry

2186
01:28:46,960 --> 01:28:48,800
so uh what is the advantage of doing

2187
01:28:48,800 --> 01:28:51,199
this at l3 versus seven

2188
01:28:51,199 --> 01:28:54,480
and we will put the um

2189
01:28:54,480 --> 01:28:56,960
the paper that's sitting that

2190
01:28:56,960 --> 01:28:58,560
is um

2191
01:28:58,560 --> 01:29:01,440
cited there in in the in the minutes so

2192
01:29:01,440 --> 01:29:05,199
maybe you can answer to to cat to ken

2193
01:29:05,199 --> 01:29:06,880
yeah so so i mean this obviously goes

2194
01:29:06,880 --> 01:29:08,480
after you know at the the paper that i

2195
01:29:08,480 --> 01:29:10,159
didn't talk about just the one that

2196
01:29:10,159 --> 01:29:12,960
comes in fiverr um we looked at this and

2197
01:29:12,960 --> 01:29:13,760
and

2198
01:29:13,760 --> 01:29:15,120
of course the first thing you have you

2199
01:29:15,120 --> 01:29:16,800
have the initial uh uh resolution

2200
01:29:16,800 --> 01:29:18,239
latency which is

2201
01:29:18,239 --> 01:29:20,000
you know you can quantify we do this

2202
01:29:20,000 --> 01:29:21,679
actually in the paper what's the the

2203
01:29:21,679 --> 01:29:24,400
typical initial resolution latency

2204
01:29:24,400 --> 01:29:26,639
in dns was optimization in dns has

2205
01:29:26,639 --> 01:29:28,560
significantly gone down but the other

2206
01:29:28,560 --> 01:29:30,639
one that we outlined in the paper is

2207
01:29:30,639 --> 01:29:32,320
actually not necessarily an improvement

2208
01:29:32,320 --> 01:29:34,480
of the average latency but the variance

2209
01:29:34,480 --> 01:29:36,159
of the latency

2210
01:29:36,159 --> 01:29:37,440
and this is quite clear if you think

2211
01:29:37,440 --> 01:29:39,360
about you know a problem when you

2212
01:29:39,360 --> 01:29:40,960
instead of distributing

2213
01:29:40,960 --> 01:29:41,840
um

2214
01:29:41,840 --> 01:29:43,679
a smaller number of clients to a fixed

2215
01:29:43,679 --> 01:29:46,480
server you now have the option to pick

2216
01:29:46,480 --> 01:29:48,800
among a larger number of clients more

2217
01:29:48,800 --> 01:29:51,360
servers you actually so you haven't you

2218
01:29:51,360 --> 01:29:55,360
have an uh mm-1 system with n divided by

2219
01:29:55,360 --> 01:29:58,320
k clients versus n clients in an mmk

2220
01:29:58,320 --> 01:30:00,400
system queuing theory will already tell

2221
01:30:00,400 --> 01:30:03,440
you average latency is about the same

2222
01:30:03,440 --> 01:30:05,280
it's the variance that is impacted the

2223
01:30:05,280 --> 01:30:08,159
variance significantly is reduced so if

2224
01:30:08,159 --> 01:30:09,920
you have use cases like which we have in

2225
01:30:09,920 --> 01:30:11,280
the firewall paper

2226
01:30:11,280 --> 01:30:14,639
like ar vr actually the reduction of the

2227
01:30:14,639 --> 01:30:17,120
latency variants is a very very

2228
01:30:17,120 --> 01:30:18,159
good thing

2229
01:30:18,159 --> 01:30:20,239
right what you also have is a scenario

2230
01:30:20,239 --> 01:30:21,840
that we have in in the file workshop

2231
01:30:21,840 --> 01:30:22,639
where

2232
01:30:22,639 --> 01:30:25,679
about resilience um you you you share

2233
01:30:25,679 --> 01:30:27,120
the damage so we're overloading one of

2234
01:30:27,120 --> 01:30:29,760
the servers um if you if you have been

2235
01:30:29,760 --> 01:30:31,760
attached to the server in a longer lift

2236
01:30:31,760 --> 01:30:33,920
affinity obviously you're being affected

2237
01:30:33,920 --> 01:30:35,600
immediately and you will be affected for

2238
01:30:35,600 --> 01:30:37,360
the duration of the outage

2239
01:30:37,360 --> 01:30:40,560
while in the in in the lc mechanism uh

2240
01:30:40,560 --> 01:30:43,280
and the scheduling happening um across

2241
01:30:43,280 --> 01:30:44,400
the service

2242
01:30:44,400 --> 01:30:46,960
allows you to distribute the impact of

2243
01:30:46,960 --> 01:30:49,600
that it's not a fail server we actually

2244
01:30:49,600 --> 01:30:51,360
reduced we increased the latency from

2245
01:30:51,360 --> 01:30:54,000
that server um is distributed across all

2246
01:30:54,000 --> 01:30:55,840
of the clients and and hence you get

2247
01:30:55,840 --> 01:30:59,040
overall better performance

2248
01:30:59,280 --> 01:31:00,719
still good enough performance for

2249
01:31:00,719 --> 01:31:02,080
everybody while nobody's really

2250
01:31:02,080 --> 01:31:03,760
negatively affected so these are some of

2251
01:31:03,760 --> 01:31:05,920
the takeaways we have in this fire paper

2252
01:31:05,920 --> 01:31:07,199
but thanks for the reference for you

2253
01:31:07,199 --> 01:31:08,159
certainly

2254
01:31:08,159 --> 01:31:10,960
at this one as well

2255
01:31:13,360 --> 01:31:14,880
look are you still in queue or you're

2256
01:31:14,880 --> 01:31:17,120
again enqueue

2257
01:31:17,120 --> 01:31:18,960
i i just wanted to make sure that there

2258
01:31:18,960 --> 01:31:20,719
was uh

2259
01:31:20,719 --> 01:31:24,560
who else is in the queue

2260
01:31:24,560 --> 01:31:27,280
yes dirk

2261
01:31:27,360 --> 01:31:29,280
i i would also say that in the interest

2262
01:31:29,280 --> 01:31:30,719
of time this should be the last question

2263
01:31:30,719 --> 01:31:32,159
or maybe we even take this question to

2264
01:31:32,159 --> 01:31:33,600
the list

2265
01:31:33,600 --> 01:31:35,280
uh so that we have time for the next

2266
01:31:35,280 --> 01:31:37,440
couple of talks

2267
01:31:37,440 --> 01:31:39,520
yeah i'm happy to do that

2268
01:31:39,520 --> 01:31:41,440
and yes colin thank you

2269
01:31:41,440 --> 01:31:44,000
thank you for finding the the the paper

2270
01:31:44,000 --> 01:31:46,159
calling to put the paper into the chat

2271
01:31:46,159 --> 01:31:47,520
when i checked the last time they

2272
01:31:47,520 --> 01:31:48,800
weren't online yet

2273
01:31:48,800 --> 01:31:52,760
thank you for pasting it

2274
01:31:58,400 --> 01:32:01,199
okay i think andy uh

2275
01:32:01,199 --> 01:32:03,120
to you thank you

2276
01:32:03,120 --> 01:32:05,760
that was easy

2277
01:32:06,080 --> 01:32:07,600
uh dirk you're running you're driving

2278
01:32:07,600 --> 01:32:09,280
the slides great

2279
01:32:09,280 --> 01:32:11,120
i passed control to andy so he should be

2280
01:32:11,120 --> 01:32:12,880
able to do it now

2281
01:32:12,880 --> 01:32:15,280
okay this is all fairly new to me oh and

2282
01:32:15,280 --> 01:32:17,199
it's come up on the wrong camera as well

2283
01:32:17,199 --> 01:32:18,320
so uh

2284
01:32:18,320 --> 01:32:20,000
you're getting a side view i won't try

2285
01:32:20,000 --> 01:32:21,679
and fix that

2286
01:32:21,679 --> 01:32:23,199
uh

2287
01:32:23,199 --> 01:32:26,000
yeah this is uh this is some uh put

2288
01:32:26,000 --> 01:32:29,199
together uh fairly recently i don't

2289
01:32:29,199 --> 01:32:32,080
maybe go on to the next slide

2290
01:32:32,080 --> 01:32:33,679
um i think you can do it yourself with

2291
01:32:33,679 --> 01:32:36,239
your cursor keys

2292
01:32:36,239 --> 01:32:37,600
ah

2293
01:32:37,600 --> 01:32:39,120
uh yes

2294
01:32:39,120 --> 01:32:40,480
uh

2295
01:32:40,480 --> 01:32:43,360
yeah this is uh obviously it's like a

2296
01:32:43,360 --> 01:32:46,560
preview we've uh had a paper accepted

2297
01:32:46,560 --> 01:32:50,000
for the same sitcom fire workshop uh

2298
01:32:50,000 --> 01:32:51,440
that uh

2299
01:32:51,440 --> 01:32:55,120
crosston just uh mentioned uh so this is

2300
01:32:55,120 --> 01:32:58,000
like a a preview of what's in that paper

2301
01:32:58,000 --> 01:33:00,880
without necessarily getting into

2302
01:33:00,880 --> 01:33:02,800
all its detail

2303
01:33:02,800 --> 01:33:05,440
uh it's also and we've got the that's

2304
01:33:05,440 --> 01:33:07,199
the the reference for the workshop we

2305
01:33:07,199 --> 01:33:09,760
think the agenda hasn't actually been

2306
01:33:09,760 --> 01:33:12,719
fully published yet

2307
01:33:12,719 --> 01:33:15,840
but presumably will be very shortly

2308
01:33:15,840 --> 01:33:16,960
uh the

2309
01:33:16,960 --> 01:33:20,840
this is also come out of work within a

2310
01:33:20,840 --> 01:33:24,000
european uh collaborative project under

2311
01:33:24,000 --> 01:33:25,600
celtic next

2312
01:33:25,600 --> 01:33:29,440
uh between uk and germany

2313
01:33:29,440 --> 01:33:31,760
uh so there's there's

2314
01:33:31,760 --> 01:33:33,520
one of the nice things about this is

2315
01:33:33,520 --> 01:33:37,600
we've had a pretty broad range of uh

2316
01:33:37,600 --> 01:33:40,000
input including from

2317
01:33:40,000 --> 01:33:42,960
automotive and

2318
01:33:42,960 --> 01:33:46,080
video surveillance

2319
01:33:46,080 --> 01:33:47,600
partners

2320
01:33:47,600 --> 01:33:48,960
which all

2321
01:33:48,960 --> 01:33:50,960
come to uh

2322
01:33:50,960 --> 01:33:51,600
in

2323
01:33:51,600 --> 01:33:53,440
a couple of slides

2324
01:33:53,440 --> 01:33:54,960
uh

2325
01:33:54,960 --> 01:33:57,520
with background is the question that we

2326
01:33:57,520 --> 01:34:00,800
were asking ourselves uh

2327
01:34:00,800 --> 01:34:02,000
was

2328
01:34:02,000 --> 01:34:04,719
looking at some of the applications

2329
01:34:04,719 --> 01:34:06,159
we've got

2330
01:34:06,159 --> 01:34:09,199
uh the general go-to solution that

2331
01:34:09,199 --> 01:34:11,120
exists at the moment

2332
01:34:11,120 --> 01:34:12,239
is

2333
01:34:12,239 --> 01:34:14,320
microservices

2334
01:34:14,320 --> 01:34:17,520
based architecture normally based on on

2335
01:34:17,520 --> 01:34:19,520
very one or other

2336
01:34:19,520 --> 01:34:22,480
form of container modularization

2337
01:34:22,480 --> 01:34:25,520
uh and hosting and arrangements

2338
01:34:25,520 --> 01:34:26,480
uh

2339
01:34:26,480 --> 01:34:27,440
and

2340
01:34:27,440 --> 01:34:29,920
there's an awful lot of traction of that

2341
01:34:29,920 --> 01:34:31,360
in

2342
01:34:31,360 --> 01:34:34,799
in the industry at the moment

2343
01:34:34,960 --> 01:34:35,920
and

2344
01:34:35,920 --> 01:34:38,960
we started by noting that there's a lot

2345
01:34:38,960 --> 01:34:40,560
of

2346
01:34:40,560 --> 01:34:42,159
good reasons

2347
01:34:42,159 --> 01:34:44,400
why the modularity associated with

2348
01:34:44,400 --> 01:34:45,920
containers

2349
01:34:45,920 --> 01:34:48,320
seems to be a good thing

2350
01:34:48,320 --> 01:34:51,360
uh covering quite a wide range of things

2351
01:34:51,360 --> 01:34:52,239
so

2352
01:34:52,239 --> 01:34:55,280
starting even from the code development

2353
01:34:55,280 --> 01:34:57,600
uh if you're following the

2354
01:34:57,600 --> 01:35:00,560
agile agenda and looking for a

2355
01:35:00,560 --> 01:35:02,480
modularity

2356
01:35:02,480 --> 01:35:05,679
ability to refactor and so on

2357
01:35:05,679 --> 01:35:09,040
uh it provides a very good way a good

2358
01:35:09,040 --> 01:35:10,159
unit

2359
01:35:10,159 --> 01:35:12,840
of modularity in your application

2360
01:35:12,840 --> 01:35:14,480
development

2361
01:35:14,480 --> 01:35:16,639
is the basic uh

2362
01:35:16,639 --> 01:35:19,840
point of abstraction service abstraction

2363
01:35:19,840 --> 01:35:22,159
by which the point of which you don't

2364
01:35:22,159 --> 01:35:24,800
see inside to the implementation again

2365
01:35:24,800 --> 01:35:27,520
which goes alongside some of the ability

2366
01:35:27,520 --> 01:35:29,840
to to refactor

2367
01:35:29,840 --> 01:35:32,719
without impacting the wider system

2368
01:35:32,719 --> 01:35:33,520
uh

2369
01:35:33,520 --> 01:35:36,560
it provides a heterogeneity between

2370
01:35:36,560 --> 01:35:37,840
development

2371
01:35:37,840 --> 01:35:40,080
uh or different runtime environments

2372
01:35:40,080 --> 01:35:41,840
different language environments and so

2373
01:35:41,840 --> 01:35:43,760
on

2374
01:35:43,760 --> 01:35:48,080
it's also a point of integration and

2375
01:35:48,080 --> 01:35:51,040
module test and end-to-end system tests

2376
01:35:51,040 --> 01:35:54,480
in ci cd pipelines

2377
01:35:54,480 --> 01:35:57,520
it is our basic unit of distribution

2378
01:35:57,520 --> 01:35:59,520
and i think from our point of view here

2379
01:35:59,520 --> 01:36:01,440
it's also the primary point of

2380
01:36:01,440 --> 01:36:04,239
interaction between the application

2381
01:36:04,239 --> 01:36:06,800
and networking

2382
01:36:06,800 --> 01:36:08,719
so that's the way

2383
01:36:08,719 --> 01:36:10,880
we'd encountered it

2384
01:36:10,880 --> 01:36:14,800
uh at the moment and certainly

2385
01:36:14,800 --> 01:36:17,199
what we were taking is there's a lot of

2386
01:36:17,199 --> 01:36:18,960
momentum to say this is a jolly good

2387
01:36:18,960 --> 01:36:21,119
thing all these things come together at

2388
01:36:21,119 --> 01:36:23,040
one point

2389
01:36:23,040 --> 01:36:26,080
but it does still ask the question does

2390
01:36:26,080 --> 01:36:29,920
one size really work for for all

2391
01:36:29,920 --> 01:36:33,199
and so we were identifying we'd be

2392
01:36:33,199 --> 01:36:34,719
identifying

2393
01:36:34,719 --> 01:36:37,040
uh a number of

2394
01:36:37,040 --> 01:36:38,719
issues

2395
01:36:38,719 --> 01:36:39,840
where

2396
01:36:39,840 --> 01:36:43,040
it's not immediately clear that this is

2397
01:36:43,040 --> 01:36:45,600
the best long-term answer or it can't be

2398
01:36:45,600 --> 01:36:47,280
improved

2399
01:36:47,280 --> 01:36:49,520
uh so at the moment a lot of the

2400
01:36:49,520 --> 01:36:51,920
distribution is focused are around

2401
01:36:51,920 --> 01:36:54,159
distribution within a data center for

2402
01:36:54,159 --> 01:36:57,199
some of these other aspects

2403
01:36:57,199 --> 01:37:00,239
uh not necessarily distribution as in

2404
01:37:00,239 --> 01:37:02,639
physical distribution and when we think

2405
01:37:02,639 --> 01:37:04,880
about physical distribution there are

2406
01:37:04,880 --> 01:37:08,000
some more demanding constraints

2407
01:37:08,000 --> 01:37:08,960
uh

2408
01:37:08,960 --> 01:37:09,760
that

2409
01:37:09,760 --> 01:37:11,119
don't

2410
01:37:11,119 --> 01:37:12,880
present a great uh

2411
01:37:12,880 --> 01:37:15,600
more concern more complexity

2412
01:37:15,600 --> 01:37:17,600
in working out the distribution of the

2413
01:37:17,600 --> 01:37:20,239
management of the distribution

2414
01:37:20,239 --> 01:37:21,199
uh

2415
01:37:21,199 --> 01:37:22,080
the

2416
01:37:22,080 --> 01:37:23,600
scale

2417
01:37:23,600 --> 01:37:26,239
of the service abstraction the point of

2418
01:37:26,239 --> 01:37:29,040
service abstraction is largely fixed

2419
01:37:29,040 --> 01:37:32,960
so once you've decided your web services

2420
01:37:32,960 --> 01:37:35,600
for example your web services interface

2421
01:37:35,600 --> 01:37:38,000
it's hard to go back and then break it

2422
01:37:38,000 --> 01:37:40,159
open into sub components that are within

2423
01:37:40,159 --> 01:37:42,320
it and say i want to distribute

2424
01:37:42,320 --> 01:37:43,600
a part

2425
01:37:43,600 --> 01:37:46,159
that's within a container module take

2426
01:37:46,159 --> 01:37:47,760
that out and distribute it somewhere

2427
01:37:47,760 --> 01:37:49,840
else

2428
01:37:50,000 --> 01:37:54,159
which they also sets up a

2429
01:37:54,159 --> 01:37:56,880
a trade-off that you have to decide

2430
01:37:56,880 --> 01:37:58,560
fairly early on

2431
01:37:58,560 --> 01:38:00,560
in the

2432
01:38:00,560 --> 01:38:01,679
in your

2433
01:38:01,679 --> 01:38:04,239
in your application development

2434
01:38:04,239 --> 01:38:06,560
if you choose small modules that gives

2435
01:38:06,560 --> 01:38:08,639
you a lot of flexibility particularly in

2436
01:38:08,639 --> 01:38:10,800
the way you might choose to implement

2437
01:38:10,800 --> 01:38:12,639
the distribution

2438
01:38:12,639 --> 01:38:15,040
but you've now created a whole lot a

2439
01:38:15,040 --> 01:38:17,360
large number of networking interfaces

2440
01:38:17,360 --> 01:38:19,679
between these small modules

2441
01:38:19,679 --> 01:38:21,920
which create a

2442
01:38:21,920 --> 01:38:23,199
performance

2443
01:38:23,199 --> 01:38:24,719
overhead

2444
01:38:24,719 --> 01:38:27,199
if you select large modules you can

2445
01:38:27,199 --> 01:38:29,280
greatly improve the efficiency of the

2446
01:38:29,280 --> 01:38:32,000
communication by internalizing

2447
01:38:32,000 --> 01:38:33,840
a lot of the communication within a

2448
01:38:33,840 --> 01:38:35,360
module

2449
01:38:35,360 --> 01:38:37,840
but now it's inflexible and it's much

2450
01:38:37,840 --> 01:38:41,840
harder to break open bits in the future

2451
01:38:41,840 --> 01:38:43,760
and then coupled with that some of the

2452
01:38:43,760 --> 01:38:45,600
solutions that are out there at the

2453
01:38:45,600 --> 01:38:49,040
moment side cars and proxies for some of

2454
01:38:49,040 --> 01:38:50,800
the compute environments we've been

2455
01:38:50,800 --> 01:38:53,840
looking at would be very heavy weight

2456
01:38:53,840 --> 01:38:56,080
indeed

2457
01:38:56,080 --> 01:38:58,880
uh so some of the the background to the

2458
01:38:58,880 --> 01:39:01,199
way we've been looking at this

2459
01:39:01,199 --> 01:39:02,080
uh

2460
01:39:02,080 --> 01:39:02,880
the

2461
01:39:02,880 --> 01:39:05,840
couple of use cases that have been

2462
01:39:05,840 --> 01:39:07,360
really interesting certainly i found

2463
01:39:07,360 --> 01:39:08,080
them

2464
01:39:08,080 --> 01:39:09,040
uh

2465
01:39:09,040 --> 01:39:12,800
cause cause a lot of good thinking

2466
01:39:12,800 --> 01:39:14,400
in understanding

2467
01:39:14,400 --> 01:39:16,320
what drives

2468
01:39:16,320 --> 01:39:20,559
the potential for physical distribution

2469
01:39:20,639 --> 01:39:22,239
there's been an awful lot of discussion

2470
01:39:22,239 --> 01:39:25,040
about edge compute

2471
01:39:25,040 --> 01:39:26,480
one that we've been looking at

2472
01:39:26,480 --> 01:39:30,320
distributed video processing does appear

2473
01:39:30,320 --> 01:39:32,000
to really

2474
01:39:32,000 --> 01:39:34,159
produce a use case

2475
01:39:34,159 --> 01:39:35,600
where

2476
01:39:35,600 --> 01:39:38,719
out of the edge processing of upstream

2477
01:39:38,719 --> 01:39:42,880
video does make a lot of economic sense

2478
01:39:42,880 --> 01:39:45,119
if you were so if you've got a video

2479
01:39:45,119 --> 01:39:47,119
application where you're wanting to

2480
01:39:47,119 --> 01:39:49,040
extract features

2481
01:39:49,040 --> 01:39:50,800
from the video

2482
01:39:50,800 --> 01:39:52,719
in real time

2483
01:39:52,719 --> 01:39:54,880
if you try and do that to the camera

2484
01:39:54,880 --> 01:39:57,440
then that's quite heavyweight and costly

2485
01:39:57,440 --> 01:39:59,920
uh addition to the camera

2486
01:39:59,920 --> 01:40:00,800
uh

2487
01:40:00,800 --> 01:40:04,400
it also makes upgrading or changing the

2488
01:40:04,400 --> 01:40:06,080
any algorithms you're using much more

2489
01:40:06,080 --> 01:40:08,320
complex because you've got to get it

2490
01:40:08,320 --> 01:40:10,639
right up to the uh to the camera and

2491
01:40:10,639 --> 01:40:12,960
there are all sorts of security uh

2492
01:40:12,960 --> 01:40:14,719
issues associated with trying to upgrade

2493
01:40:14,719 --> 01:40:16,719
the software on it

2494
01:40:16,719 --> 01:40:18,960
uh if you bring all the information up

2495
01:40:18,960 --> 01:40:20,960
to the cloud well firstly you require

2496
01:40:20,960 --> 01:40:22,639
the full video bandwidth all the way up

2497
01:40:22,639 --> 01:40:24,000
to the cloud

2498
01:40:24,000 --> 01:40:26,560
he's also got the uh

2499
01:40:26,560 --> 01:40:28,320
potential issue that what you've

2500
01:40:28,320 --> 01:40:32,000
uploaded is the full raw video stream

2501
01:40:32,000 --> 01:40:34,159
with all sorts of other information

2502
01:40:34,159 --> 01:40:36,400
which you don't necessarily

2503
01:40:36,400 --> 01:40:39,360
want exposed and cross-correlated in a

2504
01:40:39,360 --> 01:40:41,600
way that you never intended

2505
01:40:41,600 --> 01:40:44,320
for the particular application

2506
01:40:44,320 --> 01:40:45,920
so the edge

2507
01:40:45,920 --> 01:40:47,440
doing the video processing at the edge

2508
01:40:47,440 --> 01:40:49,040
would appear to

2509
01:40:49,040 --> 01:40:52,239
give you the best of both

2510
01:40:52,960 --> 01:40:56,159
the other one completely in to many ways

2511
01:40:56,159 --> 01:40:58,719
completely different is looking at the

2512
01:40:58,719 --> 01:41:00,880
automated production filter facilities

2513
01:41:00,880 --> 01:41:03,040
in a smart factory

2514
01:41:03,040 --> 01:41:04,719
uh where

2515
01:41:04,719 --> 01:41:07,440
the sort of things that we understand

2516
01:41:07,440 --> 01:41:09,360
are

2517
01:41:09,360 --> 01:41:11,199
developing there

2518
01:41:11,199 --> 01:41:12,320
is

2519
01:41:12,320 --> 01:41:13,920
going for

2520
01:41:13,920 --> 01:41:17,520
a greater scale of production automation

2521
01:41:17,520 --> 01:41:20,320
uh moving uh where you've got

2522
01:41:20,320 --> 01:41:22,159
and changing from an environment where

2523
01:41:22,159 --> 01:41:24,159
you've got a lot of legacy

2524
01:41:24,159 --> 01:41:26,960
uh or existing uh

2525
01:41:26,960 --> 01:41:31,679
interfaces for sensors and actuators

2526
01:41:31,679 --> 01:41:33,840
we do have a a

2527
01:41:33,840 --> 01:41:35,440
an architecture that's a lot more

2528
01:41:35,440 --> 01:41:38,000
modular where the compute facility may

2529
01:41:38,000 --> 01:41:39,760
be in very small

2530
01:41:39,760 --> 01:41:40,639
uh

2531
01:41:40,639 --> 01:41:41,360
uh

2532
01:41:41,360 --> 01:41:43,760
boards where raspberry pi may even

2533
01:41:43,760 --> 01:41:46,000
appear fairly heavy weight that is

2534
01:41:46,000 --> 01:41:49,040
connected directly to the the actuators

2535
01:41:49,040 --> 01:41:52,800
and uh and sensors but is also doing a

2536
01:41:52,800 --> 01:41:54,639
lot of the compute

2537
01:41:54,639 --> 01:41:57,199
uh in a distributed way and when you

2538
01:41:57,199 --> 01:41:59,679
start looking at this it looks like

2539
01:41:59,679 --> 01:42:01,920
architecturally a very similar sort of

2540
01:42:01,920 --> 01:42:03,920
architecture to some of the applications

2541
01:42:03,920 --> 01:42:06,239
we've been looking at that are much more

2542
01:42:06,239 --> 01:42:07,440
uh

2543
01:42:07,440 --> 01:42:09,920
large-scale wand type

2544
01:42:09,920 --> 01:42:11,440
distribution

2545
01:42:11,440 --> 01:42:13,280
so that seemed to us that there's a

2546
01:42:13,280 --> 01:42:16,880
growing convergence between these what a

2547
01:42:16,880 --> 01:42:17,760
very

2548
01:42:17,760 --> 01:42:20,239
at the moment very specialist

2549
01:42:20,239 --> 01:42:23,199
uh very small network environments and

2550
01:42:23,199 --> 01:42:25,360
production facilities are becoming to

2551
01:42:25,360 --> 01:42:27,040
look much more like the sorts of

2552
01:42:27,040 --> 01:42:28,800
distributed applications that we might

2553
01:42:28,800 --> 01:42:31,199
see in a wider network

2554
01:42:31,199 --> 01:42:33,360
i think

2555
01:42:33,360 --> 01:42:35,679
uh coupled with that is one of the

2556
01:42:35,679 --> 01:42:38,639
things that drives this is that as the

2557
01:42:38,639 --> 01:42:40,639
production gets more complicated the

2558
01:42:40,639 --> 01:42:42,560
time to reprogram

2559
01:42:42,560 --> 01:42:45,520
is a big concern and the modularization

2560
01:42:45,520 --> 01:42:46,880
of the compute

2561
01:42:46,880 --> 01:42:48,560
potentially can help that very

2562
01:42:48,560 --> 01:42:51,360
considerably

2563
01:42:51,520 --> 01:42:53,040
so the sort of

2564
01:42:53,040 --> 01:42:56,639
basic architecture being looking at

2565
01:42:56,639 --> 01:42:58,000
is

2566
01:42:58,000 --> 01:42:59,440
represented here and i won't

2567
01:42:59,440 --> 01:43:01,920
particularly go into the detail key

2568
01:43:01,920 --> 01:43:03,280
points are

2569
01:43:03,280 --> 01:43:06,239
that at the moment there is almost

2570
01:43:06,239 --> 01:43:09,040
complete isolation between application

2571
01:43:09,040 --> 01:43:10,800
namespaces

2572
01:43:10,800 --> 01:43:12,800
and network addressing

2573
01:43:12,800 --> 01:43:15,119
and we end up with these fairly

2574
01:43:15,119 --> 01:43:16,560
heavyweight

2575
01:43:16,560 --> 01:43:17,440
uh

2576
01:43:17,440 --> 01:43:20,239
adjunct devices

2577
01:43:20,239 --> 01:43:22,719
that amongst other things are

2578
01:43:22,719 --> 01:43:24,880
essentially mapping the application

2579
01:43:24,880 --> 01:43:27,119
namespace to network addressing so the

2580
01:43:27,119 --> 01:43:29,840
sidecars and the proxy load balancers

2581
01:43:29,840 --> 01:43:32,000
uh and so on

2582
01:43:32,000 --> 01:43:32,960
uh

2583
01:43:32,960 --> 01:43:33,920
the

2584
01:43:33,920 --> 01:43:35,600
so what's

2585
01:43:35,600 --> 01:43:38,560
what we're looking at and what uh and

2586
01:43:38,560 --> 01:43:39,840
what we've been

2587
01:43:39,840 --> 01:43:43,920
and what paper comes to is what ways can

2588
01:43:43,920 --> 01:43:46,800
we improve the way the network

2589
01:43:46,800 --> 01:43:50,960
uh works that can give a much greater

2590
01:43:50,960 --> 01:43:53,840
uh visibility and connection between the

2591
01:43:53,840 --> 01:43:55,520
name spaces

2592
01:43:55,520 --> 01:43:57,040
of the application and network

2593
01:43:57,040 --> 01:43:59,199
addressing

2594
01:43:59,199 --> 01:44:01,040
uh

2595
01:44:01,040 --> 01:44:03,920
and so three things that we've been

2596
01:44:03,920 --> 01:44:05,280
they've been looking at and the three

2597
01:44:05,280 --> 01:44:08,480
things that the paper uh concentrates on

2598
01:44:08,480 --> 01:44:10,320
that's firstly

2599
01:44:10,320 --> 01:44:12,239
can i just request in the interest of

2600
01:44:12,239 --> 01:44:13,920
leaving a little time for our last

2601
01:44:13,920 --> 01:44:15,840
speaker that you try to wrap up in the

2602
01:44:15,840 --> 01:44:18,080
next minute thanks okay

2603
01:44:18,080 --> 01:44:22,320
so the uh the uh the first one is

2604
01:44:22,320 --> 01:44:24,320
bringing together the compiler and the

2605
01:44:24,320 --> 01:44:26,560
orchestrator which are the things the

2606
01:44:26,560 --> 01:44:28,480
compiler maps

2607
01:44:28,480 --> 01:44:31,840
uh the application name space

2608
01:44:31,840 --> 01:44:32,560
to

2609
01:44:32,560 --> 01:44:35,119
addressing in the computer architect

2610
01:44:35,119 --> 01:44:38,880
architecture the orchestrator maps uh

2611
01:44:38,880 --> 01:44:42,719
application things to or the services to

2612
01:44:42,719 --> 01:44:45,040
network addresses if we could bring the

2613
01:44:45,040 --> 01:44:47,600
two together then the application could

2614
01:44:47,600 --> 01:44:48,480
see

2615
01:44:48,480 --> 01:44:51,040
uh much closer to the way the network

2616
01:44:51,040 --> 01:44:52,159
addressing

2617
01:44:52,159 --> 01:44:53,199
works

2618
01:44:53,199 --> 01:44:54,480
uh and

2619
01:44:54,480 --> 01:44:56,400
and this is one of the things that we've

2620
01:44:56,400 --> 01:44:57,280
been

2621
01:44:57,280 --> 01:45:00,239
uh that would potentially avoid the need

2622
01:45:00,239 --> 01:45:02,639
for the side cars and the proxies

2623
01:45:02,639 --> 01:45:05,440
uh there's a there's a lot that would

2624
01:45:05,440 --> 01:45:08,320
look into this and uh happy to to take

2625
01:45:08,320 --> 01:45:10,320
further discussion on

2626
01:45:10,320 --> 01:45:12,719
uh the next one is

2627
01:45:12,719 --> 01:45:13,679
that

2628
01:45:13,679 --> 01:45:14,480
a

2629
01:45:14,480 --> 01:45:17,440
an efficient way of of trying to bring

2630
01:45:17,440 --> 01:45:19,840
this into a common framework

2631
01:45:19,840 --> 01:45:22,480
is defining all the layering whether

2632
01:45:22,480 --> 01:45:24,719
there's uh layer seven layer four layer

2633
01:45:24,719 --> 01:45:26,880
three whatever

2634
01:45:26,880 --> 01:45:30,480
rather than by an intent of what should

2635
01:45:30,480 --> 01:45:33,040
be we're actually looking at what a

2636
01:45:33,040 --> 01:45:35,600
function executes on and what it's

2637
01:45:35,600 --> 01:45:38,400
transparent to by an observation of what

2638
01:45:38,400 --> 01:45:40,800
it does that then gives a clear

2639
01:45:40,800 --> 01:45:43,280
framework for both the application and

2640
01:45:43,280 --> 01:45:45,040
for the network

2641
01:45:45,040 --> 01:45:47,040
can you please we we have another

2642
01:45:47,040 --> 01:45:49,119
presentation and we promised the person

2643
01:45:49,119 --> 01:45:50,719
full 15 minutes

2644
01:45:50,719 --> 01:45:54,400
so uh we really need to conclude now

2645
01:45:54,400 --> 01:45:56,000
okay this is the last this is the very

2646
01:45:56,000 --> 01:45:59,679
last point here the final one is uh

2647
01:45:59,679 --> 01:46:02,000
what's more most radical is

2648
01:46:02,000 --> 01:46:04,400
that in order to join up the network

2649
01:46:04,400 --> 01:46:08,320
addressing much more uh coherently with

2650
01:46:08,320 --> 01:46:09,119
the

2651
01:46:09,119 --> 01:46:11,920
uh namespaces of applications the

2652
01:46:11,920 --> 01:46:14,320
network addressing would work much

2653
01:46:14,320 --> 01:46:17,040
better if it started as fundamentally

2654
01:46:17,040 --> 01:46:19,440
private addressing that then can be an

2655
01:46:19,440 --> 01:46:22,400
extensible and contextualizable in the

2656
01:46:22,400 --> 01:46:24,880
same way that name spaces work

2657
01:46:24,880 --> 01:46:28,960
this would also facilitate security

2658
01:46:29,360 --> 01:46:32,320
okay thank you um we we really need to

2659
01:46:32,320 --> 01:46:34,880
move on uh we can move the discussion on

2660
01:46:34,880 --> 01:46:35,920
this

2661
01:46:35,920 --> 01:46:38,239
uh to the list uh i see there's

2662
01:46:38,239 --> 01:46:40,880
discussion on the chat maybe you want to

2663
01:46:40,880 --> 01:46:43,040
have a look at that and respond and

2664
01:46:43,040 --> 01:46:44,560
we're going to

2665
01:46:44,560 --> 01:46:46,560
put that in the minutes thank you very

2666
01:46:46,560 --> 01:46:49,119
much and to shar

2667
01:46:49,119 --> 01:46:53,799
please uh we're waiting for you

2668
01:46:54,719 --> 01:46:59,199
and tushar is local so this is wonderful

2669
01:46:59,840 --> 01:47:01,840
can you hear me

2670
01:47:01,840 --> 01:47:04,080
yes

2671
01:47:04,239 --> 01:47:07,679
um is it possible to uh give control the

2672
01:47:07,679 --> 01:47:10,560
slides um i'm on the uh

2673
01:47:10,560 --> 01:47:12,719
yeah i'm just

2674
01:47:12,719 --> 01:47:17,400
trying to find you in the list uh just

2675
01:47:29,040 --> 01:47:31,600
so i don't see you in the roadster here

2676
01:47:31,600 --> 01:47:33,520
and what's

2677
01:47:33,520 --> 01:47:34,840
going

2678
01:47:34,840 --> 01:47:38,560
on ah here we are okay

2679
01:47:38,560 --> 01:47:39,920
sorry

2680
01:47:39,920 --> 01:47:42,480
you have control

2681
01:47:42,480 --> 01:47:43,440
awesome

2682
01:47:43,440 --> 01:47:44,960
uh so

2683
01:47:44,960 --> 01:47:47,440
hi everyone i'm tushar swami so

2684
01:47:47,440 --> 01:47:48,800
i'm gonna be talking about building

2685
01:47:48,800 --> 01:47:50,719
adaptive networks with machine learning

2686
01:47:50,719 --> 01:47:53,199
and more generally the the role of

2687
01:47:53,199 --> 01:47:55,280
machine learning and networking uh

2688
01:47:55,280 --> 01:47:58,000
infrastructure

2689
01:47:58,080 --> 01:47:58,960
so

2690
01:47:58,960 --> 01:48:00,159
um

2691
01:48:00,159 --> 01:48:02,080
more and more uh

2692
01:48:02,080 --> 01:48:04,080
we're seeing like network complexity

2693
01:48:04,080 --> 01:48:06,719
increase and they can benefit from

2694
01:48:06,719 --> 01:48:09,040
data-driven decisions rather than the

2695
01:48:09,040 --> 01:48:11,760
many um hand-tuned heuristics that we

2696
01:48:11,760 --> 01:48:14,880
find in the network today and so machine

2697
01:48:14,880 --> 01:48:17,360
learning is a good solution here in the

2698
01:48:17,360 --> 01:48:18,480
sense that

2699
01:48:18,480 --> 01:48:19,280
we're

2700
01:48:19,280 --> 01:48:21,040
essentially customizing our algorithms

2701
01:48:21,040 --> 01:48:22,719
to the traffic and data that we're

2702
01:48:22,719 --> 01:48:25,440
seeing in the network

2703
01:48:25,440 --> 01:48:28,159
so this isn't in and of itself a novel

2704
01:48:28,159 --> 01:48:31,040
idea uh there's been a bunch of papers

2705
01:48:31,040 --> 01:48:33,280
published on anything from security

2706
01:48:33,280 --> 01:48:34,960
control and analytics different kinds of

2707
01:48:34,960 --> 01:48:36,800
machine learning applications

2708
01:48:36,800 --> 01:48:38,880
but the issue that we found was that a

2709
01:48:38,880 --> 01:48:40,800
lot of these are just running in

2710
01:48:40,800 --> 01:48:43,280
something like tensorflow pi torch

2711
01:48:43,280 --> 01:48:47,040
essentially in software and it

2712
01:48:47,040 --> 01:48:49,040
that means that it's not really feasible

2713
01:48:49,040 --> 01:48:50,960
to deploy them into a network because

2714
01:48:50,960 --> 01:48:52,960
it's not clear how exactly they would

2715
01:48:52,960 --> 01:48:54,480
fit into the network and where they

2716
01:48:54,480 --> 01:48:56,959
would run

2717
01:48:57,600 --> 01:48:58,320
so

2718
01:48:58,320 --> 01:49:00,639
that led to the first piece of our uh

2719
01:49:00,639 --> 01:49:04,000
our project which was taurus and the

2720
01:49:04,000 --> 01:49:05,760
i'll go over this quickly because i

2721
01:49:05,760 --> 01:49:07,040
talked about this on monday but the

2722
01:49:07,040 --> 01:49:09,040
general idea is that we're going to take

2723
01:49:09,040 --> 01:49:11,040
our software-defined network and we're

2724
01:49:11,040 --> 01:49:13,920
going to slightly modify it where policy

2725
01:49:13,920 --> 01:49:15,119
creation is

2726
01:49:15,119 --> 01:49:17,760
takes the place of not just flow rules

2727
01:49:17,760 --> 01:49:20,080
but also machine learning training

2728
01:49:20,080 --> 01:49:22,400
and then in the data plane in addition

2729
01:49:22,400 --> 01:49:24,560
to our typical packet forwarding with

2730
01:49:24,560 --> 01:49:26,719
match action tables we're also going to

2731
01:49:26,719 --> 01:49:28,880
do decision making with machine learning

2732
01:49:28,880 --> 01:49:30,960
inference so the control plane will be

2733
01:49:30,960 --> 01:49:32,480
developing

2734
01:49:32,480 --> 01:49:34,800
new models based on information that's

2735
01:49:34,800 --> 01:49:36,880
taken from the network and it's going to

2736
01:49:36,880 --> 01:49:38,480
be installing model weights into the

2737
01:49:38,480 --> 01:49:41,280
data plane similar to flow rules

2738
01:49:41,280 --> 01:49:43,840
so the issue here was

2739
01:49:43,840 --> 01:49:46,000
if we're operating in the data plane we

2740
01:49:46,000 --> 01:49:48,880
need to be uh doing our ml inference

2741
01:49:48,880 --> 01:49:51,360
fast to keep up with typical data plane

2742
01:49:51,360 --> 01:49:54,000
operations

2743
01:49:54,560 --> 01:49:57,920
and so that led to taurus which was a

2744
01:49:57,920 --> 01:49:59,520
switch architecture

2745
01:49:59,520 --> 01:50:00,480
um

2746
01:50:00,480 --> 01:50:04,400
a pipeline for enabling ml inference at

2747
01:50:04,400 --> 01:50:05,360
a

2748
01:50:05,360 --> 01:50:06,560
line rate

2749
01:50:06,560 --> 01:50:08,560
at a per packet level

2750
01:50:08,560 --> 01:50:09,440
um

2751
01:50:09,440 --> 01:50:11,199
and being able to

2752
01:50:11,199 --> 01:50:12,800
essentially give you a programmable

2753
01:50:12,800 --> 01:50:14,400
fabric so that you can put in different

2754
01:50:14,400 --> 01:50:16,800
kinds of machine learning applications

2755
01:50:16,800 --> 01:50:18,960
while still meeting your per packet line

2756
01:50:18,960 --> 01:50:20,639
rate up operation

2757
01:50:20,639 --> 01:50:23,360
and so we're reusing

2758
01:50:23,360 --> 01:50:25,520
a lot of typical

2759
01:50:25,520 --> 01:50:27,760
programmable switch hardware like packet

2760
01:50:27,760 --> 01:50:30,239
parsers and match action tables but now

2761
01:50:30,239 --> 01:50:32,000
the packet parsing is doing things like

2762
01:50:32,000 --> 01:50:34,159
feature extraction we're using match

2763
01:50:34,159 --> 01:50:36,800
action tables for rule based pre and

2764
01:50:36,800 --> 01:50:38,800
post processing

2765
01:50:38,800 --> 01:50:41,040
we have our typical traffic manager but

2766
01:50:41,040 --> 01:50:43,280
we've inserted this mapreduce unit so

2767
01:50:43,280 --> 01:50:45,360
based on the mapreduce abstraction and

2768
01:50:45,360 --> 01:50:47,199
that's what implements our machine

2769
01:50:47,199 --> 01:50:50,000
learning inference

2770
01:50:50,719 --> 01:50:51,440
so

2771
01:50:51,440 --> 01:50:54,239
the the takeaway there was

2772
01:50:54,239 --> 01:50:56,480
we the robustness of our network is

2773
01:50:56,480 --> 01:50:58,639
going to be based on the quality and

2774
01:50:58,639 --> 01:51:00,560
speed of your reaction

2775
01:51:00,560 --> 01:51:02,480
and that means that machine learning

2776
01:51:02,480 --> 01:51:04,639
inference should happen at a per packet

2777
01:51:04,639 --> 01:51:07,119
level in the data plane and this is what

2778
01:51:07,119 --> 01:51:09,599
the taurus architectures

2779
01:51:09,599 --> 01:51:11,599
aims to do so we published that in s

2780
01:51:11,599 --> 01:51:12,480
plus

2781
01:51:12,480 --> 01:51:14,480
but um

2782
01:51:14,480 --> 01:51:16,480
there you know that brought up some

2783
01:51:16,480 --> 01:51:20,199
follow-up issues

2784
01:51:20,480 --> 01:51:23,760
namely how do we program uh taurus like

2785
01:51:23,760 --> 01:51:25,679
architecture because now what's

2786
01:51:25,679 --> 01:51:27,599
happening is that we're asking network

2787
01:51:27,599 --> 01:51:29,119
operators to

2788
01:51:29,119 --> 01:51:31,599
be familiar with networking

2789
01:51:31,599 --> 01:51:33,360
they should be able to do all of our the

2790
01:51:33,360 --> 01:51:35,280
machine learning hyper parameter tuning

2791
01:51:35,280 --> 01:51:36,159
and

2792
01:51:36,159 --> 01:51:38,400
architecture search and then they have

2793
01:51:38,400 --> 01:51:40,639
to have some knowledge of the hardware

2794
01:51:40,639 --> 01:51:43,360
itself in order to efficiently program

2795
01:51:43,360 --> 01:51:44,880
their models

2796
01:51:44,880 --> 01:51:45,599
so

2797
01:51:45,599 --> 01:51:48,080
it's actually kind of a lot to ask and

2798
01:51:48,080 --> 01:51:50,080
um this was one thing we found by

2799
01:51:50,080 --> 01:51:51,840
talking to different people the network

2800
01:51:51,840 --> 01:51:53,440
in the networking community he said if

2801
01:51:53,440 --> 01:51:55,679
he gave us a an easier way to program

2802
01:51:55,679 --> 01:51:58,239
this an easier stack

2803
01:51:58,239 --> 01:52:01,679
we'd be more inclined to use it

2804
01:52:01,679 --> 01:52:03,520
and so that led to our next project

2805
01:52:03,520 --> 01:52:06,239
which was homunculus which was

2806
01:52:06,239 --> 01:52:09,119
essentially a high-level

2807
01:52:09,119 --> 01:52:11,360
compiler or framework for

2808
01:52:11,360 --> 01:52:13,599
generating these data plane models

2809
01:52:13,599 --> 01:52:16,239
um depending on what kind of hardware

2810
01:52:16,239 --> 01:52:17,599
you had available

2811
01:52:17,599 --> 01:52:20,320
so the idea was that the user gets these

2812
01:52:20,320 --> 01:52:22,719
very high level directives that they can

2813
01:52:22,719 --> 01:52:24,880
use to essentially request their

2814
01:52:24,880 --> 01:52:26,239
applications

2815
01:52:26,239 --> 01:52:27,920
and they can provide the different

2816
01:52:27,920 --> 01:52:29,520
network and resource constraints that

2817
01:52:29,520 --> 01:52:31,679
are available in this environment

2818
01:52:31,679 --> 01:52:34,400
and then the compiler will simply

2819
01:52:34,400 --> 01:52:36,000
generate binaries

2820
01:52:36,000 --> 01:52:37,760
for your different data planes in this

2821
01:52:37,760 --> 01:52:41,119
case a taurus switch with optimized ml

2822
01:52:41,119 --> 01:52:44,119
models

2823
01:52:44,480 --> 01:52:45,440
so

2824
01:52:45,440 --> 01:52:47,599
this is the general architecture the

2825
01:52:47,599 --> 01:52:50,080
homunculus compiler there's some more

2826
01:52:50,080 --> 01:52:52,800
complicated stuff on the uh the inside

2827
01:52:52,800 --> 01:52:54,960
but really can be broken down on the

2828
01:52:54,960 --> 01:52:56,480
left here into

2829
01:52:56,480 --> 01:52:58,560
three core pieces

2830
01:52:58,560 --> 01:53:00,159
which are the the front end the

2831
01:53:00,159 --> 01:53:01,840
optimization core

2832
01:53:01,840 --> 01:53:03,520
and then the back end

2833
01:53:03,520 --> 01:53:06,159
so the idea here is the user is

2834
01:53:06,159 --> 01:53:07,280
inputting

2835
01:53:07,280 --> 01:53:09,119
some sort of data set for their

2836
01:53:09,119 --> 01:53:11,040
application let's say in the case of

2837
01:53:11,040 --> 01:53:12,880
anomaly detection maybe you're having

2838
01:53:12,880 --> 01:53:15,760
the uh the kdd intrusion detection data

2839
01:53:15,760 --> 01:53:16,639
set

2840
01:53:16,639 --> 01:53:19,920
uh constraints so they're saying that my

2841
01:53:19,920 --> 01:53:22,400
switch has this many resources maybe

2842
01:53:22,400 --> 01:53:26,400
some limitation on sram um on chip sram

2843
01:53:26,400 --> 01:53:29,840
or dsps match action tables and whatnot

2844
01:53:29,840 --> 01:53:33,360
and um also network constraints like i

2845
01:53:33,360 --> 01:53:36,400
need to run at one gigapacket per second

2846
01:53:36,400 --> 01:53:39,840
or i have a latency requirement for my

2847
01:53:39,840 --> 01:53:42,159
slo objectives each switch needs to run

2848
01:53:42,159 --> 01:53:44,239
in under you know 500 nanoseconds or

2849
01:53:44,239 --> 01:53:46,159
something like that

2850
01:53:46,159 --> 01:53:48,880
so you input that data it goes through

2851
01:53:48,880 --> 01:53:51,040
the compiler and then you get a

2852
01:53:51,040 --> 01:53:54,719
binary for your data plane

2853
01:53:54,719 --> 01:53:57,199
so a little bit more concretely

2854
01:53:57,199 --> 01:53:59,599
you can imagine the user is programming

2855
01:53:59,599 --> 01:54:00,400
their

2856
01:54:00,400 --> 01:54:03,280
switch in say p4 and then the machine

2857
01:54:03,280 --> 01:54:05,440
learning portion is programmed by

2858
01:54:05,440 --> 01:54:07,440
providing this data and configuration

2859
01:54:07,440 --> 01:54:08,639
information

2860
01:54:08,639 --> 01:54:10,719
and then we're going to generate these

2861
01:54:10,719 --> 01:54:12,960
ml models and this is sort of the key

2862
01:54:12,960 --> 01:54:14,639
here we have so many different

2863
01:54:14,639 --> 01:54:18,080
constraints between the network and the

2864
01:54:18,080 --> 01:54:20,800
physical resources available that

2865
01:54:20,800 --> 01:54:22,560
it makes it very difficult for a human

2866
01:54:22,560 --> 01:54:25,280
to program it but that means that it

2867
01:54:25,280 --> 01:54:27,599
actually reduces the search space

2868
01:54:27,599 --> 01:54:30,560
in an automl fashion

2869
01:54:30,560 --> 01:54:32,400
to the point that we can actually

2870
01:54:32,400 --> 01:54:34,239
reasonably traverse the automotive space

2871
01:54:34,239 --> 01:54:36,719
and come up with optimized models here

2872
01:54:36,719 --> 01:54:38,800
and so to do that we actually use

2873
01:54:38,800 --> 01:54:41,199
multi-objective bayesian optimization

2874
01:54:41,199 --> 01:54:44,080
with feasibility constraints generated

2875
01:54:44,080 --> 01:54:45,679
from the network and hardware

2876
01:54:45,679 --> 01:54:47,840
constraints and so we're generating

2877
01:54:47,840 --> 01:54:49,760
different ml models and testing their

2878
01:54:49,760 --> 01:54:51,760
feasibility and using that to guide the

2879
01:54:51,760 --> 01:54:53,280
automl search

2880
01:54:53,280 --> 01:54:56,800
and then we're generating whatever um

2881
01:54:56,800 --> 01:54:59,840
back-end specific code you need for your

2882
01:54:59,840 --> 01:55:01,679
uh switch so in the case of a tour

2883
01:55:01,679 --> 01:55:03,920
switch we program the machine learning

2884
01:55:03,920 --> 01:55:06,000
portions in the spatial hardware

2885
01:55:06,000 --> 01:55:08,000
description language so that's what's

2886
01:55:08,000 --> 01:55:10,320
being generated from

2887
01:55:10,320 --> 01:55:13,519
the machine learning models

2888
01:55:15,199 --> 01:55:17,199
so just going through quickly a little

2889
01:55:17,199 --> 01:55:18,880
bit more in depth on the the different

2890
01:55:18,880 --> 01:55:20,080
pieces here

2891
01:55:20,080 --> 01:55:23,040
um at the front end

2892
01:55:23,040 --> 01:55:23,920
uh

2893
01:55:23,920 --> 01:55:25,840
we call it alchemy it's really just a

2894
01:55:25,840 --> 01:55:28,719
python library so this is the full code

2895
01:55:28,719 --> 01:55:30,840
that you need for

2896
01:55:30,840 --> 01:55:35,360
generating a simple model in this case

2897
01:55:35,360 --> 01:55:38,480
we're doing anomaly detection

2898
01:55:38,480 --> 01:55:39,679
so you can see

2899
01:55:39,679 --> 01:55:42,400
at the top there you import your alchemy

2900
01:55:42,400 --> 01:55:44,879
library

2901
01:55:45,440 --> 01:55:47,520
in the second block here you provide

2902
01:55:47,520 --> 01:55:50,000
some user function for loading your data

2903
01:55:50,000 --> 01:55:51,440
this case we're just loading it from a

2904
01:55:51,440 --> 01:55:54,560
csv file and it's under this uh data

2905
01:55:54,560 --> 01:55:56,560
loader annotation that allows the

2906
01:55:56,560 --> 01:55:58,960
compiler to wrap it and figure out what

2907
01:55:58,960 --> 01:56:01,840
to do with it

2908
01:56:02,480 --> 01:56:04,639
you specify your model some sort of

2909
01:56:04,639 --> 01:56:06,400
optimization metric and what kind of

2910
01:56:06,400 --> 01:56:08,080
algorithm you want to use you can

2911
01:56:08,080 --> 01:56:09,520
actually even leave these blank and let

2912
01:56:09,520 --> 01:56:13,320
the compiler choose

2913
01:56:14,880 --> 01:56:16,800
and then our constraints so we have

2914
01:56:16,800 --> 01:56:18,560
performance constraints you can see

2915
01:56:18,560 --> 01:56:21,040
through put in latency here and resource

2916
01:56:21,040 --> 01:56:22,719
constraints and this is all

2917
01:56:22,719 --> 01:56:24,560
these constraints are being placed on a

2918
01:56:24,560 --> 01:56:27,440
torus platform

2919
01:56:27,520 --> 01:56:28,880
and then finally

2920
01:56:28,880 --> 01:56:30,719
we ask it to generate the binary or

2921
01:56:30,719 --> 01:56:33,920
bitstream in this case

2922
01:56:33,920 --> 01:56:36,639
so moving to the optimization core once

2923
01:56:36,639 --> 01:56:38,400
the user has provided all of this

2924
01:56:38,400 --> 01:56:41,040
information

2925
01:56:41,360 --> 01:56:42,880
we actually want to generate our models

2926
01:56:42,880 --> 01:56:44,480
so this is the piece where i mentioned

2927
01:56:44,480 --> 01:56:46,000
earlier we're doing bayesian

2928
01:56:46,000 --> 01:56:48,080
optimization using the hyper mapper

2929
01:56:48,080 --> 01:56:50,320
package and the hypermapper is

2930
01:56:50,320 --> 01:56:53,199
suggesting batches of hyperparameters so

2931
01:56:53,199 --> 01:56:55,760
this is everything from say the number

2932
01:56:55,760 --> 01:56:59,760
of neurons and layers in the dnn or

2933
01:56:59,760 --> 01:57:01,760
the different unrolling factors on

2934
01:57:01,760 --> 01:57:03,040
different layers

2935
01:57:03,040 --> 01:57:04,639
in your dnn

2936
01:57:04,639 --> 01:57:06,719
and different parameters in the hardware

2937
01:57:06,719 --> 01:57:08,800
that would allow to be mapped more

2938
01:57:08,800 --> 01:57:10,560
efficiently so

2939
01:57:10,560 --> 01:57:11,520
uh

2940
01:57:11,520 --> 01:57:14,239
this these are that will be sent to

2941
01:57:14,239 --> 01:57:16,400
homunculus which is then going to

2942
01:57:16,400 --> 01:57:19,199
um start producing candidate models

2943
01:57:19,199 --> 01:57:21,199
based on these hyper parameters it's

2944
01:57:21,199 --> 01:57:22,800
going to test models and see how well

2945
01:57:22,800 --> 01:57:24,960
they're performing say how good or bad

2946
01:57:24,960 --> 01:57:26,960
your accuracy is and then doing these

2947
01:57:26,960 --> 01:57:29,280
feasibility checks so if someone

2948
01:57:29,280 --> 01:57:32,159
requested one gigapacket per second uh

2949
01:57:32,159 --> 01:57:35,040
throughput did this model that i tried

2950
01:57:35,040 --> 01:57:37,440
out uh actually need that does this

2951
01:57:37,440 --> 01:57:41,520
model map properly onto these resources

2952
01:57:41,520 --> 01:57:43,920
um and so all that information is going

2953
01:57:43,920 --> 01:57:46,639
to be sent back to hypermapper which is

2954
01:57:46,639 --> 01:57:47,840
going to continue the bayesian

2955
01:57:47,840 --> 01:57:49,920
optimization process and based on that

2956
01:57:49,920 --> 01:57:51,280
information it's going to refine its

2957
01:57:51,280 --> 01:57:54,159
search more and more

2958
01:57:55,679 --> 01:57:58,880
so jumping quickly to the back end here

2959
01:57:58,880 --> 01:58:01,199
the back end is responsible for the

2960
01:58:01,199 --> 01:58:04,000
actual code generation for your final

2961
01:58:04,000 --> 01:58:06,880
switch hardware but also doing these

2962
01:58:06,880 --> 01:58:08,800
feasibility checks like did i meet the

2963
01:58:08,800 --> 01:58:13,360
throughput or did i run out of resources

2964
01:58:14,159 --> 01:58:16,719
and that's really just a

2965
01:58:16,719 --> 01:58:19,280
built from a template library so this is

2966
01:58:19,280 --> 01:58:21,199
all supposed to be modular so you can

2967
01:58:21,199 --> 01:58:23,119
slot in different backends into

2968
01:58:23,119 --> 01:58:25,599
homunculus but in this case

2969
01:58:25,599 --> 01:58:28,960
we're building um a multi-class

2970
01:58:28,960 --> 01:58:31,119
classifier

2971
01:58:31,119 --> 01:58:33,760
with a dnn with packet parsing and d

2972
01:58:33,760 --> 01:58:35,760
parsing so we're just building out of

2973
01:58:35,760 --> 01:58:39,760
these um smaller component functions and

2974
01:58:39,760 --> 01:58:41,920
these will all be customized based on

2975
01:58:41,920 --> 01:58:44,880
those hyper parameters that um that were

2976
01:58:44,880 --> 01:58:46,880
suggested by the bayesian optimization

2977
01:58:46,880 --> 01:58:49,840
process

2978
01:58:50,000 --> 01:58:50,800
so

2979
01:58:50,800 --> 01:58:52,639
just some quick results here

2980
01:58:52,639 --> 01:58:54,080
um

2981
01:58:54,080 --> 01:58:56,719
we tested it with a

2982
01:58:56,719 --> 01:58:58,960
baseline of three different applications

2983
01:58:58,960 --> 01:59:01,840
versus our homunculus version that was

2984
01:59:01,840 --> 01:59:04,080
automatically generated the baselines

2985
01:59:04,080 --> 01:59:06,080
are hand tuned

2986
01:59:06,080 --> 01:59:07,840
and you can see in actually in all of

2987
01:59:07,840 --> 01:59:10,239
these cases we're getting a higher f1

2988
01:59:10,239 --> 01:59:11,199
score

2989
01:59:11,199 --> 01:59:13,599
um and this is without any human

2990
01:59:13,599 --> 01:59:16,400
intervention and the the real the secret

2991
01:59:16,400 --> 01:59:19,199
behind this is that the baseline

2992
01:59:19,199 --> 01:59:21,280
applications are done

2993
01:59:21,280 --> 01:59:23,760
abstractly with they're just put into

2994
01:59:23,760 --> 01:59:26,719
tensorflow or pytorch whereas in

2995
01:59:26,719 --> 01:59:28,639
homunculus you're specifying the actual

2996
01:59:28,639 --> 01:59:31,040
platform so you can make better uses of

2997
01:59:31,040 --> 01:59:32,560
the resources because you know what's

2998
01:59:32,560 --> 01:59:35,040
available

2999
01:59:37,360 --> 01:59:38,400
so

3000
01:59:38,400 --> 01:59:41,760
just to wrap this up here

3001
01:59:41,760 --> 01:59:43,440
homunculus gives you high level

3002
01:59:43,440 --> 01:59:44,639
interface

3003
01:59:44,639 --> 01:59:46,880
it makes use of the network and resource

3004
01:59:46,880 --> 01:59:48,719
constraints and generates binaries for

3005
01:59:48,719 --> 01:59:50,800
your models so there's a link for the

3006
01:59:50,800 --> 01:59:52,480
the paper here it's actually under

3007
01:59:52,480 --> 01:59:56,080
submission but there's an archive paper

3008
01:59:56,080 --> 01:59:58,400
so the final piece of this then

3009
01:59:58,400 --> 01:59:59,199
is

3010
01:59:59,199 --> 02:00:00,639
if we're looking to

3011
02:00:00,639 --> 02:00:02,719
work on network infrastructure how do we

3012
02:00:02,719 --> 02:00:05,840
supply data to homunculus

3013
02:00:05,840 --> 02:00:06,800
so

3014
02:00:06,800 --> 02:00:08,800
now we have our tourist data plane which

3015
02:00:08,800 --> 02:00:11,520
is doing line rate per packet machine

3016
02:00:11,520 --> 02:00:14,000
learning inference we have homunculus on

3017
02:00:14,000 --> 02:00:16,320
the far right there that's producing

3018
02:00:16,320 --> 02:00:18,400
models for the data plane

3019
02:00:18,400 --> 02:00:21,119
and the last piece here is

3020
02:00:21,119 --> 02:00:24,480
and this is current ongoing work

3021
02:00:24,480 --> 02:00:25,520
so

3022
02:00:25,520 --> 02:00:27,679
how do we take telemetry data

3023
02:00:27,679 --> 02:00:29,840
and clean that data to feed it to

3024
02:00:29,840 --> 02:00:32,080
homunculus so that we had this loop

3025
02:00:32,080 --> 02:00:34,719
of the network essentially taking

3026
02:00:34,719 --> 02:00:35,840
measurements

3027
02:00:35,840 --> 02:00:38,719
uh from its own data plane um

3028
02:00:38,719 --> 02:00:41,119
and then building progressively newer

3029
02:00:41,119 --> 02:00:42,960
and better machine learning models which

3030
02:00:42,960 --> 02:00:44,560
then it installs back into the data

3031
02:00:44,560 --> 02:00:47,119
plane and just keeping this loop going

3032
02:00:47,119 --> 02:00:49,920
so we have a simple pipeline here set up

3033
02:00:49,920 --> 02:00:52,480
with a streaming database doing basic

3034
02:00:52,480 --> 02:00:54,960
cleaning data extraction and repair

3035
02:00:54,960 --> 02:00:57,119
augmentation transformation and then

3036
02:00:57,119 --> 02:00:58,800
some automatic labeling with different

3037
02:00:58,800 --> 02:01:01,520
oracles but the really the the takeaway

3038
02:01:01,520 --> 02:01:04,560
here is uh completing this loop which

3039
02:01:04,560 --> 02:01:07,040
gives you this whole this adaptive sort

3040
02:01:07,040 --> 02:01:08,880
of feedback loop within your network

3041
02:01:08,880 --> 02:01:11,520
allowing it to modify itself for the

3042
02:01:11,520 --> 02:01:13,199
different ml applications that you're

3043
02:01:13,199 --> 02:01:15,839
working with

3044
02:01:16,560 --> 02:01:17,360
so

3045
02:01:17,360 --> 02:01:20,560
uh that's it for me um i have links here

3046
02:01:20,560 --> 02:01:22,719
for the taurus and homunculus papers and

3047
02:01:22,719 --> 02:01:25,360
we actually have an fpga testbed for

3048
02:01:25,360 --> 02:01:27,840
taurus if people want to try out and at

3049
02:01:27,840 --> 02:01:28,960
sitcom

3050
02:01:28,960 --> 02:01:31,040
this august we're giving a full day

3051
02:01:31,040 --> 02:01:33,599
tutorial if people want to

3052
02:01:33,599 --> 02:01:35,599
get their hands dirty

3053
02:01:35,599 --> 02:01:39,040
so i'm happy to take any questions

3054
02:01:46,080 --> 02:01:48,400
thank you very very much

3055
02:01:48,400 --> 02:01:50,159
this is the type of research that this

3056
02:01:50,159 --> 02:01:53,280
group is absolutely interested in

3057
02:01:53,280 --> 02:01:56,880
uh not only because it com it has um

3058
02:01:56,880 --> 02:01:57,920
this this

3059
02:01:57,920 --> 02:02:00,080
idea of the computing in the network but

3060
02:02:00,080 --> 02:02:01,840
also the data-driven

3061
02:02:01,840 --> 02:02:04,719
approaches and and the idea that ai can

3062
02:02:04,719 --> 02:02:05,440
be

3063
02:02:05,440 --> 02:02:07,520
can be a tool in networking not just a

3064
02:02:07,520 --> 02:02:09,360
uh

3065
02:02:09,360 --> 02:02:10,880
some kind of magic that people think

3066
02:02:10,880 --> 02:02:13,199
they put everywhere um i don't see any

3067
02:02:13,199 --> 02:02:16,480
questions um oh i have a question sorry

3068
02:02:16,480 --> 02:02:19,718
i'm jumping

3069
02:02:20,320 --> 02:02:24,080
okay this is eve schuler and um

3070
02:02:24,080 --> 02:02:26,639
i guess what this goes back to i mean so

3071
02:02:26,639 --> 02:02:28,400
what i heard you say

3072
02:02:28,400 --> 02:02:29,280
um

3073
02:02:29,280 --> 02:02:32,159
was that you're putting the ml needs to

3074
02:02:32,159 --> 02:02:33,520
be line rate

3075
02:02:33,520 --> 02:02:35,280
the feature extraction

3076
02:02:35,280 --> 02:02:37,440
and that seems to be sort of one of the

3077
02:02:37,440 --> 02:02:40,400
challenges here is um not just match

3078
02:02:40,400 --> 02:02:42,320
action as we know it for packet headers

3079
02:02:42,320 --> 02:02:43,760
but there's this whole other kind of

3080
02:02:43,760 --> 02:02:46,320
algorithmic stuff that has to happen at

3081
02:02:46,320 --> 02:02:49,599
very high speed um what kinds of feature

3082
02:02:49,599 --> 02:02:51,840
extraction i mean so you talked about

3083
02:02:51,840 --> 02:02:53,280
you said there were sort of three use

3084
02:02:53,280 --> 02:02:55,920
cases that you applied this to but i've

3085
02:02:55,920 --> 02:02:57,599
been very curious for a long time in

3086
02:02:57,599 --> 02:02:59,040
this group we've talked about something

3087
02:02:59,040 --> 02:03:01,199
called ubiquitous witness which is

3088
02:03:01,199 --> 02:03:03,280
really taking image data and doing

3089
02:03:03,280 --> 02:03:05,440
feature extraction and have you done

3090
02:03:05,440 --> 02:03:07,920
anything along those lines that would

3091
02:03:07,920 --> 02:03:09,440
potentially have

3092
02:03:09,440 --> 02:03:12,080
a larger overhead and kind of thwart you

3093
02:03:12,080 --> 02:03:15,599
in this regard uh so we haven't done

3094
02:03:15,599 --> 02:03:19,040
much with um image data uh at the moment

3095
02:03:19,040 --> 02:03:22,159
so um in this case feature extraction

3096
02:03:22,159 --> 02:03:24,960
is is more based around like uh

3097
02:03:24,960 --> 02:03:28,719
predefined headers so say um matt like

3098
02:03:28,719 --> 02:03:30,880
our packet purchase and manchester we

3099
02:03:30,880 --> 02:03:32,400
would be pulling out to like an ip

3100
02:03:32,400 --> 02:03:34,480
address or something of those along

3101
02:03:34,480 --> 02:03:37,119
those lines but yeah the

3102
02:03:37,119 --> 02:03:39,440
we're looking to to start dealing with

3103
02:03:39,440 --> 02:03:40,719
um

3104
02:03:40,719 --> 02:03:42,560
like uh some sort of uh image

3105
02:03:42,560 --> 02:03:44,719
classification networks in the in the

3106
02:03:44,719 --> 02:03:46,880
data plane but um

3107
02:03:46,880 --> 02:03:48,480
yeah it's not

3108
02:03:48,480 --> 02:03:51,360
we're not certain actually what like the

3109
02:03:51,360 --> 02:03:53,360
the best use case here would be to

3110
02:03:53,360 --> 02:03:56,560
motivate um say grabbing images from

3111
02:03:56,560 --> 02:03:58,960
your packet um and then how that applies

3112
02:03:58,960 --> 02:04:00,800
to the like the networking things

3113
02:04:00,800 --> 02:04:03,679
further into the packet right right

3114
02:04:03,679 --> 02:04:05,119
but yeah it's definitely an interesting

3115
02:04:05,119 --> 02:04:07,599
thing there is uh there is the the

3116
02:04:07,599 --> 02:04:09,599
somewhat of the the downside that a

3117
02:04:09,599 --> 02:04:11,280
convolutional neural networks that are

3118
02:04:11,280 --> 02:04:13,360
used for image classification are they

3119
02:04:13,360 --> 02:04:17,040
tend to be very large and we're still

3120
02:04:17,040 --> 02:04:20,320
fairly resource limited um on the switch

3121
02:04:20,320 --> 02:04:22,480
even though we can do some you know data

3122
02:04:22,480 --> 02:04:24,719
plane machine learning the networks do

3123
02:04:24,719 --> 02:04:28,079
have to on average be smaller than um

3124
02:04:28,079 --> 02:04:32,320
like the the resnets and uh you know um

3125
02:04:32,320 --> 02:04:35,280
those kind of like the c410 um

3126
02:04:35,280 --> 02:04:36,880
networks that you see

3127
02:04:36,880 --> 02:04:41,520
in in like the typical ml competitions

3128
02:04:41,520 --> 02:04:44,719
thank you that was a great talk

3129
02:04:44,719 --> 02:04:46,719
yeah thank you very very much

3130
02:04:46,719 --> 02:04:48,560
uh other question

3131
02:04:48,560 --> 02:04:50,719
there's somebody at the mic

3132
02:04:50,719 --> 02:04:52,639
yeah i have a question to show can you

3133
02:04:52,639 --> 02:04:56,239
identify yourself please i am hisham

3134
02:04:56,239 --> 02:04:58,239
so my question is

3135
02:04:58,239 --> 02:05:01,199
uh you update the model

3136
02:05:01,199 --> 02:05:02,719
in line

3137
02:05:02,719 --> 02:05:05,280
yeah do you update the model in line in

3138
02:05:05,280 --> 02:05:07,599
the data plane itself

3139
02:05:07,599 --> 02:05:09,760
or the model is created in the control

3140
02:05:09,760 --> 02:05:10,719
plane

3141
02:05:10,719 --> 02:05:13,280
automatically using these tools

3142
02:05:13,280 --> 02:05:15,599
and but it gets updated also by the

3143
02:05:15,599 --> 02:05:18,320
control plane not in the database right

3144
02:05:18,320 --> 02:05:21,119
right okay that's it yeah yeah so so the

3145
02:05:21,119 --> 02:05:24,400
the data plane is as far as is as far as

3146
02:05:24,400 --> 02:05:26,320
the data plane is concerned just as a

3147
02:05:26,320 --> 02:05:28,480
static model it's doing inference by

3148
02:05:28,480 --> 02:05:30,560
applying it and then the control plane

3149
02:05:30,560 --> 02:05:33,119
is responsible for taking uh

3150
02:05:33,119 --> 02:05:35,520
measurements in the network refining

3151
02:05:35,520 --> 02:05:37,040
models and then

3152
02:05:37,040 --> 02:05:39,360
in its own judgment when it's time

3153
02:05:39,360 --> 02:05:40,880
sending those models out to the data

3154
02:05:40,880 --> 02:05:43,119
plane

3155
02:05:44,880 --> 02:05:47,599
okay well i guess we're over time

3156
02:05:47,599 --> 02:05:49,679
so thank you we're going to see you at

3157
02:05:49,679 --> 02:05:53,679
the um at the interim and to shar

3158
02:05:53,679 --> 02:05:56,239
please join our list and participate in

3159
02:05:56,239 --> 02:05:58,239
our discussions because

3160
02:05:58,239 --> 02:06:01,119
your work is absolutely related to what

3161
02:06:01,119 --> 02:06:03,360
we want this group to evolve into

3162
02:06:03,360 --> 02:06:06,400
and not just uh the original you know

3163
02:06:06,400 --> 02:06:09,599
using p4 to to do match action but what

3164
02:06:09,599 --> 02:06:11,840
else we can do with all of this uh once

3165
02:06:11,840 --> 02:06:13,760
we have a framework i would like to

3166
02:06:13,760 --> 02:06:15,440
thank lucia

3167
02:06:15,440 --> 02:06:17,840
to have been or uh

3168
02:06:17,840 --> 02:06:19,920
well for me an avatar but for you guys a

3169
02:06:19,920 --> 02:06:21,199
real person

3170
02:06:21,199 --> 02:06:24,159
uh thank you very much lucia for uh for

3171
02:06:24,159 --> 02:06:25,760
having uh

3172
02:06:25,760 --> 02:06:29,280
given your time for us and hopefully

3173
02:06:29,280 --> 02:06:31,760
um it was good i would like to thank

3174
02:06:31,760 --> 02:06:34,880
also dirk and and dave to have allowed

3175
02:06:34,880 --> 02:06:37,280
us uh to be hosted

3176
02:06:37,280 --> 02:06:39,760
in their two hour uh we

3177
02:06:39,760 --> 02:06:41,520
reorganized this a little bit at the

3178
02:06:41,520 --> 02:06:44,320
last uh a bit late because we were we

3179
02:06:44,320 --> 02:06:46,400
gave our own slot to somebody else who

3180
02:06:46,400 --> 02:06:49,599
could not use their thursday slot

3181
02:06:49,599 --> 02:06:51,760
and i would like to really thank icn to

3182
02:06:51,760 --> 02:06:54,079
icnrg to have hosted us

3183
02:06:54,079 --> 02:06:56,159
um i think we are

3184
02:06:56,159 --> 02:06:58,239
showing more and more that there are so

3185
02:06:58,239 --> 02:06:59,119
much

3186
02:06:59,119 --> 02:07:01,199
in common between

3187
02:07:01,199 --> 02:07:02,079
um

3188
02:07:02,079 --> 02:07:03,840
the two communities so that i think it

3189
02:07:03,840 --> 02:07:06,960
was it was good and maybe we will have

3190
02:07:06,960 --> 02:07:07,920
other

3191
02:07:07,920 --> 02:07:10,639
uh similar uh co-located meetings i was

3192
02:07:10,639 --> 02:07:11,840
thinking this afternoon there's a

3193
02:07:11,840 --> 02:07:14,159
distributed networking

3194
02:07:14,159 --> 02:07:16,480
meeting which also has a lot of

3195
02:07:16,480 --> 02:07:18,560
overlap with what we do

3196
02:07:18,560 --> 02:07:20,960
and i think um

3197
02:07:20,960 --> 02:07:22,400
in terms of the research that was

3198
02:07:22,400 --> 02:07:23,840
presented today

3199
02:07:23,840 --> 02:07:25,920
i think it shows that

3200
02:07:25,920 --> 02:07:28,400
coin rg is still very much

3201
02:07:28,400 --> 02:07:30,880
a very active

3202
02:07:30,880 --> 02:07:33,440
topic and i think a more and more active

3203
02:07:33,440 --> 02:07:34,480
topic

3204
02:07:34,480 --> 02:07:36,639
in networking and thank you very much

3205
02:07:36,639 --> 02:07:37,760
everyone

3206
02:07:37,760 --> 02:07:39,199
and for those of you who are local in

3207
02:07:39,199 --> 02:07:40,480
philadelphia

3208
02:07:40,480 --> 02:07:43,599
have a wonderful end of meeting and for

3209
02:07:43,599 --> 02:07:45,679
those of us who are

3210
02:07:45,679 --> 02:07:48,000
a bit under the weather uh somewhere

3211
02:07:48,000 --> 02:07:49,520
else in the world

3212
02:07:49,520 --> 02:07:52,480
um i wish us all

3213
02:07:52,480 --> 02:07:54,480
to feel better and for the other ones

3214
02:07:54,480 --> 02:07:57,599
who are not sick well don't get sick and

3215
02:07:57,599 --> 02:07:58,639
please

3216
02:07:58,639 --> 02:08:01,360
um stay safe everyone and have a good

3217
02:08:01,360 --> 02:08:02,560
flight back

3218
02:08:02,560 --> 02:08:04,960
and hopefully uh we'll be able to see

3219
02:08:04,960 --> 02:08:07,679
you in london thank you

3220
02:08:07,679 --> 02:08:09,520
thanks for doing this with us and thanks

3221
02:08:09,520 --> 02:08:10,800
alicia

3222
02:08:10,800 --> 02:08:13,920
for being our culture hello

3223
02:08:13,920 --> 02:08:15,440
bye-bye

3224
02:08:15,440 --> 02:08:18,919
bye thank you

3225
02:08:47,280 --> 02:08:48,960
so the question do i need to do anything

3226
02:08:48,960 --> 02:08:51,760
shutting anything down or we just do it

3227
02:08:51,760 --> 02:08:52,880
okay

3228
02:08:52,880 --> 02:08:55,880
great

3229
02:09:14,960 --> 02:09:17,960
from

3230
02:09:22,239 --> 02:09:25,239
okay

3231
02:09:43,199 --> 02:09:45,280
you

