1
00:01:30,720 --> 00:01:33,720
so

2
00:01:52,159 --> 00:01:55,159
what

3
00:02:17,680 --> 00:02:20,920
next one

4
00:02:33,280 --> 00:02:36,599
hello folks

5
00:02:38,800 --> 00:02:41,280
hello

6
00:02:41,680 --> 00:02:43,599
trying to figure out how to get my

7
00:02:43,599 --> 00:02:47,160
slides up here

8
00:02:56,000 --> 00:02:59,000
so

9
00:03:07,680 --> 00:03:09,840
hopefully your audio works more reliably

10
00:03:09,840 --> 00:03:11,519
this time

11
00:03:11,519 --> 00:03:12,879
yeah i'm trying to figure out how to

12
00:03:12,879 --> 00:03:15,040
share i'm not seeing my slides up here

13
00:03:15,040 --> 00:03:17,040
and share yet

14
00:03:17,040 --> 00:03:21,400
so a bit dismayed

15
00:03:38,319 --> 00:03:40,400
okay well i don't know if i can do it

16
00:03:40,400 --> 00:03:41,599
this way

17
00:03:41,599 --> 00:03:45,679
let's not try and share my slides

18
00:03:45,840 --> 00:03:48,840
uh

19
00:04:03,040 --> 00:04:07,798
you can see my screen

20
00:04:16,720 --> 00:04:18,720
yes we can see you but please use

21
00:04:18,720 --> 00:04:21,280
presentations

22
00:04:21,839 --> 00:04:26,758
uh yes i'm going to do that

23
00:04:40,639 --> 00:04:42,560
well if you can't hear me we are in a

24
00:04:42,560 --> 00:04:44,320
bit of trouble but not for too long

25
00:04:44,320 --> 00:04:47,759
because i won't be talking for too long

26
00:04:51,199 --> 00:04:54,320
by saying welcome this is

27
00:04:54,320 --> 00:04:55,120
the

28
00:04:55,120 --> 00:04:57,199
iccrg meeting

29
00:04:57,199 --> 00:05:00,160
at idea 14. um

30
00:05:00,160 --> 00:05:01,520
if you

31
00:05:01,520 --> 00:05:04,080
meant to be somewhere else this is more

32
00:05:04,080 --> 00:05:05,919
fun i promise you so just stay here

33
00:05:05,919 --> 00:05:07,440
anyway

34
00:05:07,440 --> 00:05:08,639
um

35
00:05:08,639 --> 00:05:10,080
i'm going to just very quickly go

36
00:05:10,080 --> 00:05:12,960
through and show you the note well

37
00:05:12,960 --> 00:05:15,039
if you are not familiar with this you

38
00:05:15,039 --> 00:05:17,039
should become familiar with it

39
00:05:17,039 --> 00:05:19,440
and if you don't uh um

40
00:05:19,440 --> 00:05:20,800
uh

41
00:05:20,800 --> 00:05:22,240
if you if you're not familiar with this

42
00:05:22,240 --> 00:05:23,919
again hit me up i'm happy to share this

43
00:05:23,919 --> 00:05:25,520
and talk to you about it

44
00:05:25,520 --> 00:05:27,520
uh know that the irtf note well is a

45
00:05:27,520 --> 00:05:30,000
little bit different the ietf note 12

46
00:05:30,000 --> 00:05:33,680
however high level it still applies

47
00:05:33,680 --> 00:05:34,639
um

48
00:05:34,639 --> 00:05:36,240
i'm not going to go over the goals of

49
00:05:36,240 --> 00:05:39,039
the irtf they are in the slides you can

50
00:05:39,039 --> 00:05:40,400
look at this the only thing i'll point

51
00:05:40,400 --> 00:05:41,600
out is that this is a room where we are

52
00:05:41,600 --> 00:05:43,520
not doing standards development so

53
00:05:43,520 --> 00:05:45,600
remember that as we have conversation

54
00:05:45,600 --> 00:05:48,560
and discussion today

55
00:05:48,800 --> 00:05:50,639
finally the agenda

56
00:05:50,639 --> 00:05:53,199
we've got three topics today uh got

57
00:05:53,199 --> 00:05:55,039
product congestion control

58
00:05:55,039 --> 00:05:57,600
bob uh briscoe and vivi gold will be

59
00:05:57,600 --> 00:05:58,960
talking about that

60
00:05:58,960 --> 00:06:02,240
um i have after that um the agenda

61
00:06:02,240 --> 00:06:05,759
slightly changed we're gonna have uh

62
00:06:05,759 --> 00:06:07,600
present packet reordering in multipath

63
00:06:07,600 --> 00:06:10,000
transport scenarios after that and colin

64
00:06:10,000 --> 00:06:12,720
will be go talking about

65
00:06:12,720 --> 00:06:14,960
condition control work especially with

66
00:06:14,960 --> 00:06:16,479
respect to the new proposal and

67
00:06:16,479 --> 00:06:18,319
transport area about condition control

68
00:06:18,319 --> 00:06:21,280
work in the irtf and in iccrg

69
00:06:21,280 --> 00:06:23,440
uh so we'll we'll spend the last 10

70
00:06:23,440 --> 00:06:26,400
minutes or so talking about that today

71
00:06:26,400 --> 00:06:28,240
um that's all i've got

72
00:06:28,240 --> 00:06:31,680
uh i want to quickly get somebody to do

73
00:06:31,680 --> 00:06:35,160
uh scribing

74
00:06:37,680 --> 00:06:41,090
uh i might as well do javascript again

75
00:06:41,090 --> 00:06:44,150
[Music]

76
00:06:46,840 --> 00:06:51,039
uh yeah who's taking notes

77
00:06:58,880 --> 00:07:02,919
we need somebody to take minutes

78
00:07:02,960 --> 00:07:04,080
it's gonna be a lot you don't have to

79
00:07:04,080 --> 00:07:05,440
take minutes through the presentations

80
00:07:05,440 --> 00:07:09,880
just the q a for the most part

81
00:07:18,639 --> 00:07:21,360
hello hello

82
00:07:22,319 --> 00:07:25,440
you want me to assign a person

83
00:07:25,440 --> 00:07:27,199
i can't see people in the room here and

84
00:07:27,199 --> 00:07:30,599
call out people

85
00:07:34,160 --> 00:07:36,479
ah it seems like new cultural is

86
00:07:36,479 --> 00:07:38,319
volunteering

87
00:07:38,319 --> 00:07:42,080
oh excellent thank you neil

88
00:07:43,280 --> 00:07:44,560
all right

89
00:07:44,560 --> 00:07:47,440
i will send you your gifts later

90
00:07:47,440 --> 00:07:48,720
um

91
00:07:48,720 --> 00:07:51,599
and i'll charge the ietf irtf for it

92
00:07:51,599 --> 00:07:53,599
uh we're gonna go on to the first talk

93
00:07:53,599 --> 00:07:55,759
bob you're already up there uh take it

94
00:07:55,759 --> 00:07:58,879
away we got uh 30 minutes for this

95
00:07:58,879 --> 00:08:00,720
thanks bob

96
00:08:00,720 --> 00:08:02,800
i assume you're driving the presentation

97
00:08:02,800 --> 00:08:05,039
are you

98
00:08:05,680 --> 00:08:07,680
jenna

99
00:08:07,680 --> 00:08:10,879
uh so you should be able to

100
00:08:10,879 --> 00:08:12,479
you want me i can do that if you want me

101
00:08:12,479 --> 00:08:14,639
to

102
00:08:14,639 --> 00:08:16,319
well i'm going to stop my

103
00:08:16,319 --> 00:08:18,160
i'm going to mic without any

104
00:08:18,160 --> 00:08:20,080
way of controlling anything

105
00:08:20,080 --> 00:08:22,878
got it i can do it

106
00:08:23,440 --> 00:08:26,479
let me get it going

107
00:08:26,479 --> 00:08:29,680
what's that light out there

108
00:08:31,520 --> 00:08:33,919
right okay

109
00:08:33,919 --> 00:08:35,679
so um

110
00:08:35,679 --> 00:08:37,919
i had a look back and realized that when

111
00:08:37,919 --> 00:08:39,440
we've presented things about prior

112
00:08:39,440 --> 00:08:42,559
congestion control twice in iccrg before

113
00:08:42,559 --> 00:08:44,000
we always just said the latest thing

114
00:08:44,000 --> 00:08:45,600
we've done and we never actually gave

115
00:08:45,600 --> 00:08:47,600
the sort of basic results

116
00:08:47,600 --> 00:08:48,800
so

117
00:08:48,800 --> 00:08:50,399
this is what this is all about there's

118
00:08:50,399 --> 00:08:52,959
the people involved

119
00:08:52,959 --> 00:08:55,839
in the authorship of the draft and the

120
00:08:55,839 --> 00:08:57,519
experiments that i'm going to go through

121
00:08:57,519 --> 00:09:01,120
next slide please jenna

122
00:09:02,240 --> 00:09:03,519
um

123
00:09:03,519 --> 00:09:05,279
yeah so just just uh

124
00:09:05,279 --> 00:09:06,800
some caveats

125
00:09:06,800 --> 00:09:09,760
um what you're going to see

126
00:09:09,760 --> 00:09:11,839
is comparative results between different

127
00:09:11,839 --> 00:09:14,480
congestion controls and different um

128
00:09:14,480 --> 00:09:16,080
aqms

129
00:09:16,080 --> 00:09:17,120
and

130
00:09:17,120 --> 00:09:19,680
the primary reason is to share insights

131
00:09:19,680 --> 00:09:21,519
that we got from those

132
00:09:21,519 --> 00:09:23,760
and you'll obviously get the numbers in

133
00:09:23,760 --> 00:09:26,240
the results as well but um

134
00:09:26,240 --> 00:09:28,160
the the test traffic isn't designed to

135
00:09:28,160 --> 00:09:29,200
be

136
00:09:29,200 --> 00:09:31,200
um

137
00:09:31,200 --> 00:09:33,279
realistic it's designed to be

138
00:09:33,279 --> 00:09:35,360
um explain these effects i want to talk

139
00:09:35,360 --> 00:09:38,080
about so next

140
00:09:41,040 --> 00:09:43,120
right so you've you've probably seen the

141
00:09:43,120 --> 00:09:44,800
right hand picture first the the left

142
00:09:44,800 --> 00:09:46,560
hand of this slide is

143
00:09:46,560 --> 00:09:47,760
um

144
00:09:47,760 --> 00:09:48,800
more

145
00:09:48,800 --> 00:09:51,600
what the congestion control what the

146
00:09:51,600 --> 00:09:54,320
difference is between the dc-tcp and the

147
00:09:54,320 --> 00:09:56,480
congestion control are on the left the

148
00:09:56,480 --> 00:09:58,880
right-hand side is the principle by

149
00:09:58,880 --> 00:10:01,839
which dc-tcp and prague

150
00:10:01,839 --> 00:10:04,560
work i'll start with the left and i

151
00:10:04,560 --> 00:10:05,680
don't i'm not going to go through all

152
00:10:05,680 --> 00:10:07,279
these i'm just going to say

153
00:10:07,279 --> 00:10:08,800
really the list isn't that long and

154
00:10:08,800 --> 00:10:10,160
that's why it's there

155
00:10:10,160 --> 00:10:12,240
and this is what is in the draft to

156
00:10:12,240 --> 00:10:13,519
explain

157
00:10:13,519 --> 00:10:16,800
um assuming you start from dc tcp what

158
00:10:16,800 --> 00:10:19,839
the differences are

159
00:10:20,000 --> 00:10:21,040
so

160
00:10:21,040 --> 00:10:22,399
on the right

161
00:10:22,399 --> 00:10:23,519
um

162
00:10:23,519 --> 00:10:25,680
i've

163
00:10:25,680 --> 00:10:26,959
i always

164
00:10:26,959 --> 00:10:28,480
explain

165
00:10:28,480 --> 00:10:30,560
the point of dc-tcp and scalable

166
00:10:30,560 --> 00:10:32,560
congestion controls generally as having

167
00:10:32,560 --> 00:10:34,640
small sore teeth so you don't have a

168
00:10:34,640 --> 00:10:36,640
large variation in the buffer to get

169
00:10:36,640 --> 00:10:39,360
full utilization and if you push down

170
00:10:39,360 --> 00:10:40,320
delay

171
00:10:40,320 --> 00:10:41,760
um

172
00:10:41,760 --> 00:10:43,200
by

173
00:10:43,200 --> 00:10:46,480
setting the set point of the an aqm low

174
00:10:46,480 --> 00:10:47,680
you don't start

175
00:10:47,680 --> 00:10:49,600
losing utilization

176
00:10:49,600 --> 00:10:51,200
so you get the best of both worlds so

177
00:10:51,200 --> 00:10:53,120
next slide is going to be

178
00:10:53,120 --> 00:10:56,240
empirical results that prove that

179
00:10:56,240 --> 00:10:58,100
just with a single flow

180
00:10:58,100 --> 00:10:59,680
[Music]

181
00:10:59,680 --> 00:11:03,600
on the left is is a cubic flow acn cubic

182
00:11:03,600 --> 00:11:05,600
in fact to show that it's not ecm that's

183
00:11:05,600 --> 00:11:07,680
doing it but it's the cubic cubic key

184
00:11:07,680 --> 00:11:08,880
part of it

185
00:11:08,880 --> 00:11:11,920
um happens to be using fq coddle but of

186
00:11:11,920 --> 00:11:13,760
any

187
00:11:13,760 --> 00:11:14,720
classic

188
00:11:14,720 --> 00:11:18,480
aqm would do and the left hand column

189
00:11:18,480 --> 00:11:20,800
of results uses a five millisecond

190
00:11:20,800 --> 00:11:22,480
target and the middle column uses a one

191
00:11:22,480 --> 00:11:24,880
millisecond target

192
00:11:24,880 --> 00:11:27,440
and then the right hand column is

193
00:11:27,440 --> 00:11:29,440
prago dual pi squared also using one

194
00:11:29,440 --> 00:11:31,200
millisecond target

195
00:11:31,200 --> 00:11:32,079
the

196
00:11:32,079 --> 00:11:34,079
horizontal axis

197
00:11:34,079 --> 00:11:35,920
is

198
00:11:35,920 --> 00:11:38,640
a range of five link rates and five

199
00:11:38,640 --> 00:11:41,279
round trip times so you've got 25

200
00:11:41,279 --> 00:11:44,160
different cases for each

201
00:11:44,160 --> 00:11:45,600
column

202
00:11:45,600 --> 00:11:48,160
and you've got q delay and utilization

203
00:11:48,160 --> 00:11:50,720
as shown in the previous plot now shown

204
00:11:50,720 --> 00:11:51,760
here

205
00:11:51,760 --> 00:11:52,959
and you can see

206
00:11:52,959 --> 00:11:56,800
as you push down the queue delay

207
00:11:56,800 --> 00:11:59,040
set point for fq codal from five to one

208
00:11:59,040 --> 00:12:00,240
millisecond

209
00:12:00,240 --> 00:12:02,959
you do get lower mean delay which is the

210
00:12:02,959 --> 00:12:04,000
blocks

211
00:12:04,000 --> 00:12:06,240
and you do get lower

212
00:12:06,240 --> 00:12:08,000
99th percentile delay which is the

213
00:12:08,000 --> 00:12:10,560
little dots on top

214
00:12:10,560 --> 00:12:13,200
but you lose out on utilization it the

215
00:12:13,200 --> 00:12:16,000
mean which is the the um

216
00:12:16,000 --> 00:12:18,000
little bar in the middle of the

217
00:12:18,000 --> 00:12:19,120
horizontal bar in the middle of the

218
00:12:19,120 --> 00:12:20,320
vertical bar

219
00:12:20,320 --> 00:12:24,160
goes down to about 87 88

220
00:12:24,160 --> 00:12:26,800
and um you can see the

221
00:12:26,800 --> 00:12:29,200
um first percentile and 99th percentile

222
00:12:29,200 --> 00:12:30,399
also

223
00:12:30,399 --> 00:12:32,560
um well the first percentile goes down

224
00:12:32,560 --> 00:12:34,079
below 85

225
00:12:34,079 --> 00:12:35,760
uh in the

226
00:12:35,760 --> 00:12:38,399
highest bdp case tested

227
00:12:38,399 --> 00:12:40,480
whereas on the right you can see

228
00:12:40,480 --> 00:12:41,760
um

229
00:12:41,760 --> 00:12:42,639
if you

230
00:12:42,639 --> 00:12:45,519
use a one millisecond threshold with

231
00:12:45,519 --> 00:12:47,360
tcp prague because of the small saw

232
00:12:47,360 --> 00:12:50,800
teeth you get near 100 utilization

233
00:12:50,800 --> 00:12:52,720
um as well

234
00:12:52,720 --> 00:12:53,600
and that's

235
00:12:53,600 --> 00:12:54,320
just

236
00:12:54,320 --> 00:12:56,639
showing you proof of that point next

237
00:12:56,639 --> 00:12:58,959
slide

238
00:13:01,440 --> 00:13:02,320
um

239
00:13:02,320 --> 00:13:03,440
so this

240
00:13:03,440 --> 00:13:05,200
now um

241
00:13:05,200 --> 00:13:07,360
the next point i want to make runs over

242
00:13:07,360 --> 00:13:09,920
about four slides

243
00:13:09,920 --> 00:13:11,519
first of all

244
00:13:11,519 --> 00:13:14,399
when you look at a plot of delay

245
00:13:14,399 --> 00:13:15,200
um

246
00:13:15,200 --> 00:13:16,880
the the little

247
00:13:16,880 --> 00:13:19,200
blue dots in the middle column

248
00:13:19,200 --> 00:13:20,959
that the columns are the same by the way

249
00:13:20,959 --> 00:13:22,079
the same

250
00:13:22,079 --> 00:13:24,240
five link rates same five round trip

251
00:13:24,240 --> 00:13:28,000
times giving you 25 of each um

252
00:13:28,000 --> 00:13:29,920
case

253
00:13:29,920 --> 00:13:32,839
but both plots this time a q delay

254
00:13:32,839 --> 00:13:35,120
and the trouble is

255
00:13:35,120 --> 00:13:38,000
as with all um delay

256
00:13:38,000 --> 00:13:40,160
metrics smaller is better so you can't

257
00:13:40,160 --> 00:13:41,920
actually see the good ones

258
00:13:41,920 --> 00:13:43,040
um

259
00:13:43,040 --> 00:13:44,720
whereas if you show a log plot which is

260
00:13:44,720 --> 00:13:45,600
what the

261
00:13:45,600 --> 00:13:47,040
bottom one is

262
00:13:47,040 --> 00:13:49,600
you can see it's significantly below the

263
00:13:49,600 --> 00:13:51,519
other ones and the other interesting

264
00:13:51,519 --> 00:13:52,959
pattern there is it's getting lower as

265
00:13:52,959 --> 00:13:55,920
the link rate goes up

266
00:13:56,800 --> 00:13:58,320
now

267
00:13:58,320 --> 00:14:00,480
when you work out how many packets there

268
00:14:00,480 --> 00:14:02,320
are in the queue

269
00:14:02,320 --> 00:14:03,120
um

270
00:14:03,120 --> 00:14:05,519
you find that that's because as the link

271
00:14:05,519 --> 00:14:07,519
rate gets higher by the way as the round

272
00:14:07,519 --> 00:14:09,519
trip time changes it doesn't change so

273
00:14:09,519 --> 00:14:12,000
each step is flat

274
00:14:12,000 --> 00:14:13,760
but the link rate is obviously making a

275
00:14:13,760 --> 00:14:17,360
difference and you find that there's um

276
00:14:17,360 --> 00:14:19,519
about a mean of one packet in the queue

277
00:14:19,519 --> 00:14:20,800
and

278
00:14:20,800 --> 00:14:21,760
um

279
00:14:21,760 --> 00:14:25,760
the 99th percentile is about two packets

280
00:14:25,760 --> 00:14:27,519
as the link rate goes up

281
00:14:27,519 --> 00:14:28,880
and

282
00:14:28,880 --> 00:14:29,760
um

283
00:14:29,760 --> 00:14:32,800
the important um point here is this is

284
00:14:32,800 --> 00:14:35,199
one prague flow and one cubic flow

285
00:14:35,199 --> 00:14:36,639
competing with each other in a dual

286
00:14:36,639 --> 00:14:38,079
queue

287
00:14:38,079 --> 00:14:39,360
and

288
00:14:39,360 --> 00:14:41,120
the reason

289
00:14:41,120 --> 00:14:42,079
that

290
00:14:42,079 --> 00:14:44,800
delay continues to go down

291
00:14:44,800 --> 00:14:48,560
um you'll see on the next slide

292
00:14:50,240 --> 00:14:53,120
um in the dual q case

293
00:14:53,120 --> 00:14:55,680
it's it's due to both the coupling and

294
00:14:55,680 --> 00:14:58,639
pacing now let me explain so the the top

295
00:14:58,639 --> 00:15:01,199
this time series shows you

296
00:15:01,199 --> 00:15:02,720
um

297
00:15:02,720 --> 00:15:04,160
the

298
00:15:04,160 --> 00:15:06,160
number of packets in the queue

299
00:15:06,160 --> 00:15:09,199
over a time series but just in the lq

300
00:15:09,199 --> 00:15:11,120
but bear in mind there is also a cq here

301
00:15:11,120 --> 00:15:14,000
that isn't shown there's a second queue

302
00:15:14,000 --> 00:15:16,639
that is serving the um classic flow

303
00:15:16,639 --> 00:15:18,160
because it's one on one

304
00:15:18,160 --> 00:15:19,519
remember

305
00:15:19,519 --> 00:15:21,760
so what's happening is

306
00:15:21,760 --> 00:15:24,560
when this queue is zero

307
00:15:24,560 --> 00:15:26,720
it allows the cq

308
00:15:26,720 --> 00:15:27,519
to

309
00:15:27,519 --> 00:15:29,440
drain its packets and so you can see

310
00:15:29,440 --> 00:15:32,320
it's about half of the time the queue is

311
00:15:32,320 --> 00:15:35,040
zero and that what what happens is the

312
00:15:35,040 --> 00:15:36,240
coupling

313
00:15:36,240 --> 00:15:37,519
um

314
00:15:37,519 --> 00:15:40,320
from this eq

315
00:15:40,320 --> 00:15:43,600
causes the marking in in this lq

316
00:15:43,600 --> 00:15:44,720
to

317
00:15:44,720 --> 00:15:48,079
push back the prague flow until it

318
00:15:48,079 --> 00:15:49,680
leaves enough gaps to be about one to

319
00:15:49,680 --> 00:15:50,480
one

320
00:15:50,480 --> 00:15:54,399
um rate between the two flows um

321
00:15:54,399 --> 00:15:56,399
and that's why

322
00:15:56,399 --> 00:15:59,040
as the rate goes up

323
00:15:59,040 --> 00:16:00,480
then the

324
00:16:00,480 --> 00:16:02,079
q delay gets lower and lower because

325
00:16:02,079 --> 00:16:03,680
we're we're

326
00:16:03,680 --> 00:16:04,880
just

327
00:16:04,880 --> 00:16:06,399
the size of the queue is essentially

328
00:16:06,399 --> 00:16:08,560
just the size of the burst from pacing

329
00:16:08,560 --> 00:16:12,320
which in this case are two packets

330
00:16:12,320 --> 00:16:14,160
so you don't have a standing queue at

331
00:16:14,160 --> 00:16:15,120
all

332
00:16:15,120 --> 00:16:16,560
and it's not touching that one

333
00:16:16,560 --> 00:16:20,320
millisecond threshold it's just

334
00:16:20,320 --> 00:16:23,519
being affected by the marking from the

335
00:16:23,519 --> 00:16:26,240
cq coupled across

336
00:16:26,240 --> 00:16:27,839
not by its own

337
00:16:27,839 --> 00:16:29,199
aqm

338
00:16:29,199 --> 00:16:31,199
so it's not causing a standing queue up

339
00:16:31,199 --> 00:16:33,600
to the one millisecond threshold

340
00:16:33,600 --> 00:16:34,800
and so

341
00:16:34,800 --> 00:16:37,920
the size of this gear is purely

342
00:16:37,920 --> 00:16:39,920
the size of the

343
00:16:39,920 --> 00:16:41,920
bursts that come from pacing

344
00:16:41,920 --> 00:16:44,639
so in this case because the pacing is um

345
00:16:44,639 --> 00:16:46,880
about two packets you get small bumps

346
00:16:46,880 --> 00:16:48,240
with lots of small gaps but if the

347
00:16:48,240 --> 00:16:50,399
pacing was larger or if the bursts were

348
00:16:50,399 --> 00:16:52,000
larger you'd get larger

349
00:16:52,000 --> 00:16:53,759
and fewer gaps

350
00:16:53,759 --> 00:16:56,480
but um the next slide

351
00:16:56,480 --> 00:16:58,399
you'll see

352
00:16:58,399 --> 00:16:59,199
that

353
00:16:59,199 --> 00:17:02,000
if we this is a zoom in back on the very

354
00:17:02,000 --> 00:17:04,799
first plot i showed

355
00:17:04,799 --> 00:17:07,039
of the delay versus utilization but just

356
00:17:07,039 --> 00:17:09,520
zooming in on the delay the one i said

357
00:17:09,520 --> 00:17:11,520
didn't um

358
00:17:11,520 --> 00:17:13,679
stayed flat and the utilization stayed

359
00:17:13,679 --> 00:17:15,679
good but here you notice the delay is

360
00:17:15,679 --> 00:17:18,000
not reducing even though this isn't a

361
00:17:18,000 --> 00:17:20,000
log plot you can see that

362
00:17:20,000 --> 00:17:22,240
and that's because this is a single flow

363
00:17:22,240 --> 00:17:26,160
in the lq without a flow in the cq

364
00:17:26,160 --> 00:17:27,280
and so

365
00:17:27,280 --> 00:17:28,559
then it is

366
00:17:28,559 --> 00:17:30,640
butting up against the

367
00:17:30,640 --> 00:17:31,520
um

368
00:17:31,520 --> 00:17:34,080
the threshold

369
00:17:34,080 --> 00:17:35,679
of one millisecond

370
00:17:35,679 --> 00:17:38,559
in the lq and that one millisecond is

371
00:17:38,559 --> 00:17:39,679
configured

372
00:17:39,679 --> 00:17:42,080
so again the same um link rates and

373
00:17:42,080 --> 00:17:44,000
round trip times

374
00:17:44,000 --> 00:17:47,440
um and the main and p99 shown there

375
00:17:47,440 --> 00:17:50,320
um the the red it doesn't exist because

376
00:17:50,320 --> 00:17:52,320
this is just pulled out zoomed out of

377
00:17:52,320 --> 00:17:54,000
the um

378
00:17:54,000 --> 00:17:55,520
other plot it's an inset from the other

379
00:17:55,520 --> 00:17:56,400
plot

380
00:17:56,400 --> 00:17:57,919
so it's not it's not a problem that

381
00:17:57,919 --> 00:17:59,039
there's a standing queue up to one

382
00:17:59,039 --> 00:18:01,200
millisecond because one millisecond is

383
00:18:01,200 --> 00:18:04,480
is um small enough it's just interesting

384
00:18:04,480 --> 00:18:06,000
that um

385
00:18:06,000 --> 00:18:07,760
when you have

386
00:18:07,760 --> 00:18:10,000
the traffic in the other queue

387
00:18:10,000 --> 00:18:12,840
the lq is actually

388
00:18:12,840 --> 00:18:14,640
um

389
00:18:14,640 --> 00:18:15,760
just

390
00:18:15,760 --> 00:18:17,760
causing one or two packets of queuing

391
00:18:17,760 --> 00:18:18,559
not

392
00:18:18,559 --> 00:18:21,520
um a standing queue up to the threshold

393
00:18:21,520 --> 00:18:24,400
and that insight shows you that if if

394
00:18:24,400 --> 00:18:26,960
you mark a cue from any other queue

395
00:18:26,960 --> 00:18:28,559
that's related to it

396
00:18:28,559 --> 00:18:30,240
you can get rid of a standing queue

397
00:18:30,240 --> 00:18:31,840
which could be useful

398
00:18:31,840 --> 00:18:33,919
um for instance if you had a virtual

399
00:18:33,919 --> 00:18:35,600
queue

400
00:18:35,600 --> 00:18:36,880
which some of you may know what a

401
00:18:36,880 --> 00:18:38,880
virtual queue is i haven't got time to

402
00:18:38,880 --> 00:18:41,679
explain it now but it it will um

403
00:18:41,679 --> 00:18:42,559
it's a

404
00:18:42,559 --> 00:18:43,440
q

405
00:18:43,440 --> 00:18:45,440
it's what the q would be if your link

406
00:18:45,440 --> 00:18:47,280
rate was slightly slower than

407
00:18:47,280 --> 00:18:48,640
the real q

408
00:18:48,640 --> 00:18:50,559
and if you mark with that you will lose

409
00:18:50,559 --> 00:18:52,240
the standing q and you so you just get

410
00:18:52,240 --> 00:18:55,120
the bursts not the standing q so that

411
00:18:55,120 --> 00:18:56,480
can be useful

412
00:18:56,480 --> 00:18:58,320
okay um

413
00:18:58,320 --> 00:19:01,678
next slide please jenna

414
00:19:02,320 --> 00:19:03,760
right um

415
00:19:03,760 --> 00:19:05,360
jumping to a completely different point

416
00:19:05,360 --> 00:19:07,440
we've still got

417
00:19:07,440 --> 00:19:09,120
one flow for each

418
00:19:09,120 --> 00:19:10,559
uh one steady state flow for each

419
00:19:10,559 --> 00:19:12,480
congestion control here and this is just

420
00:19:12,480 --> 00:19:14,720
showing what happens when you have more

421
00:19:14,720 --> 00:19:15,840
and more

422
00:19:15,840 --> 00:19:17,520
or different numbers of flows of

423
00:19:17,520 --> 00:19:19,280
different types

424
00:19:19,280 --> 00:19:20,400
um

425
00:19:20,400 --> 00:19:22,160
so now along the bottom instead of link

426
00:19:22,160 --> 00:19:24,799
rate and round trip time we're at

427
00:19:24,799 --> 00:19:26,240
one link rate which is showing bottom

428
00:19:26,240 --> 00:19:27,840
left 40 megabits per second and one

429
00:19:27,840 --> 00:19:30,080
round trip time 10 milliseconds

430
00:19:30,080 --> 00:19:31,679
but we've got different numbers of flows

431
00:19:31,679 --> 00:19:33,360
a and b if you look at the little gray

432
00:19:33,360 --> 00:19:34,960
box at the bottom

433
00:19:34,960 --> 00:19:37,600
example a2 b8 means two a a-type flows

434
00:19:37,600 --> 00:19:40,400
and a b eight b type flows

435
00:19:40,400 --> 00:19:41,440
a

436
00:19:41,440 --> 00:19:42,799
um

437
00:19:42,799 --> 00:19:43,840
is

438
00:19:43,840 --> 00:19:45,919
depends on the column

439
00:19:45,919 --> 00:19:47,039
um

440
00:19:47,039 --> 00:19:48,480
on the left column

441
00:19:48,480 --> 00:19:51,120
a is e c and cubic and b is

442
00:19:51,120 --> 00:19:55,199
um cubic without acn

443
00:19:55,360 --> 00:19:57,440
on the middle column

444
00:19:57,440 --> 00:19:58,559
um

445
00:19:58,559 --> 00:20:01,360
sorry am i right

446
00:20:03,120 --> 00:20:04,159
oh

447
00:20:04,159 --> 00:20:05,520
sorry

448
00:20:05,520 --> 00:20:07,039
i completely forgot billy was meant to

449
00:20:07,039 --> 00:20:08,720
be jumping in here because she's got to

450
00:20:08,720 --> 00:20:11,840
get a flight yes

451
00:20:13,120 --> 00:20:15,840
janet can you jump to video slides

452
00:20:15,840 --> 00:20:19,639
sorry i'll come back to that

453
00:20:23,760 --> 00:20:25,679
sorry for this interruption sorry it's

454
00:20:25,679 --> 00:20:28,000
just i have to take a flight so we're

455
00:20:28,000 --> 00:20:31,919
gonna sandwich my results on apple

456
00:20:31,919 --> 00:20:33,039
uh quick

457
00:20:33,039 --> 00:20:35,360
in between bob's slides

458
00:20:35,360 --> 00:20:36,320
um

459
00:20:36,320 --> 00:20:38,640
so we have started working on prague

460
00:20:38,640 --> 00:20:40,640
conduction control as some of you know

461
00:20:40,640 --> 00:20:43,679
from the wdc developer

462
00:20:43,679 --> 00:20:46,559
session that we had some a few months

463
00:20:46,559 --> 00:20:48,480
ago and these are some early results

464
00:20:48,480 --> 00:20:51,120
from our lab testing um

465
00:20:51,120 --> 00:20:54,399
and next slide please

466
00:20:55,200 --> 00:20:57,840
these results are over ethernet and for

467
00:20:57,840 --> 00:21:02,520
upstream traffic next slide

468
00:21:02,799 --> 00:21:06,080
um as you can see these are we tried to

469
00:21:06,080 --> 00:21:09,039
do the testing on similar bandwidths and

470
00:21:09,039 --> 00:21:11,440
different rtt combinations

471
00:21:11,440 --> 00:21:14,640
as they have been done for tcp prague

472
00:21:14,640 --> 00:21:16,240
just to you know compare the two

473
00:21:16,240 --> 00:21:17,760
implementations

474
00:21:17,760 --> 00:21:19,200
and we see

475
00:21:19,200 --> 00:21:21,280
sort of similar results

476
00:21:21,280 --> 00:21:22,320
and

477
00:21:22,320 --> 00:21:24,640
um in in general if you look at the

478
00:21:24,640 --> 00:21:27,679
different results prague has almost 90

479
00:21:27,679 --> 00:21:29,600
percent reduction

480
00:21:29,600 --> 00:21:32,960
in queuing delay as compared to cubic

481
00:21:32,960 --> 00:21:34,559
for

482
00:21:34,559 --> 00:21:36,640
for the low bandwidth case you know the

483
00:21:36,640 --> 00:21:39,039
four megabits per second

484
00:21:39,039 --> 00:21:41,039
i think this you see these results

485
00:21:41,039 --> 00:21:42,320
because the queuing delay is a little

486
00:21:42,320 --> 00:21:44,000
higher because you know for four

487
00:21:44,000 --> 00:21:46,640
megabits per second

488
00:21:46,640 --> 00:21:49,280
to have a one millisecond

489
00:21:49,280 --> 00:21:51,679
cueing threshold you need to send less

490
00:21:51,679 --> 00:21:56,600
than one packet it's just 0.33

491
00:21:56,720 --> 00:21:59,360
amount of the packet so that's something

492
00:21:59,360 --> 00:22:01,280
we don't do we don't do fractional

493
00:22:01,280 --> 00:22:03,280
congestion window

494
00:22:03,280 --> 00:22:06,080
so that's something to look at for low

495
00:22:06,080 --> 00:22:07,440
bandwidths

496
00:22:07,440 --> 00:22:10,240
next slide please

497
00:22:11,280 --> 00:22:13,039
uh this is the

498
00:22:13,039 --> 00:22:15,840
application good put

499
00:22:15,840 --> 00:22:17,120
plotted as

500
00:22:17,120 --> 00:22:18,720
utilization

501
00:22:18,720 --> 00:22:20,320
so there's a little bit difference as

502
00:22:20,320 --> 00:22:22,400
compared to tcp product because first of

503
00:22:22,400 --> 00:22:24,480
all we're not plotting the link

504
00:22:24,480 --> 00:22:27,520
throughput but the application could put

505
00:22:27,520 --> 00:22:29,760
and which includes

506
00:22:29,760 --> 00:22:32,320
the link utilization includes header

507
00:22:32,320 --> 00:22:34,799
sizes while this one doesn't and the

508
00:22:34,799 --> 00:22:37,919
second difference that we have

509
00:22:37,919 --> 00:22:39,360
uh is we

510
00:22:39,360 --> 00:22:41,520
didn't start the measurement at the

511
00:22:41,520 --> 00:22:44,000
steady state so we'll improve this plot

512
00:22:44,000 --> 00:22:47,600
to match the tcp plot and um

513
00:22:47,600 --> 00:22:48,720
this should

514
00:22:48,720 --> 00:22:51,039
get to higher link utilizations for both

515
00:22:51,039 --> 00:22:52,880
cubic and proc the important thing to

516
00:22:52,880 --> 00:22:54,720
see here is the comparison between the

517
00:22:54,720 --> 00:22:55,679
two

518
00:22:55,679 --> 00:22:57,760
and we are

519
00:22:57,760 --> 00:23:01,039
able to get a similar throughput for

520
00:23:01,039 --> 00:23:02,559
both of them

521
00:23:02,559 --> 00:23:05,440
next slide please

522
00:23:06,240 --> 00:23:09,440
this is a test done where we have two

523
00:23:09,440 --> 00:23:12,080
competing flows one of them is cubic the

524
00:23:12,080 --> 00:23:13,919
other one is prague

525
00:23:13,919 --> 00:23:15,919
and again we're measuring the queuing

526
00:23:15,919 --> 00:23:20,240
delay for the 25 different combinations

527
00:23:20,240 --> 00:23:22,480
the results are very similar as to what

528
00:23:22,480 --> 00:23:25,760
we saw for the single flow as well

529
00:23:25,760 --> 00:23:28,000
and

530
00:23:28,000 --> 00:23:29,919
you can take a look at these results on

531
00:23:29,919 --> 00:23:31,360
the slides

532
00:23:31,360 --> 00:23:34,918
next slide please

533
00:23:36,400 --> 00:23:39,280
um this test was done to run

534
00:23:39,280 --> 00:23:43,520
four prog flows at staggered times

535
00:23:43,520 --> 00:23:47,039
with a gap of 10 seconds

536
00:23:47,760 --> 00:23:49,200
and

537
00:23:49,200 --> 00:23:50,480
you can see that

538
00:23:50,480 --> 00:23:51,600
uh

539
00:23:51,600 --> 00:23:54,080
the flows the first flow start and it

540
00:23:54,080 --> 00:23:57,120
has uh almost the you use the the full

541
00:23:57,120 --> 00:23:58,640
link and then the second and the third

542
00:23:58,640 --> 00:24:00,080
and the fourth starts and they start to

543
00:24:00,080 --> 00:24:01,679
converge

544
00:24:01,679 --> 00:24:02,559
um

545
00:24:02,559 --> 00:24:05,600
at at around between 20 to 40 megabits

546
00:24:05,600 --> 00:24:06,799
per second

547
00:24:06,799 --> 00:24:09,600
there is one uh flow that

548
00:24:09,600 --> 00:24:11,279
seems to pop out

549
00:24:11,279 --> 00:24:13,360
and the other three flows tend to stay

550
00:24:13,360 --> 00:24:15,520
together and we're investigating the

551
00:24:15,520 --> 00:24:18,799
reason for for this behavior

552
00:24:18,799 --> 00:24:21,360
next slide

553
00:24:24,480 --> 00:24:26,880
comparing this with

554
00:24:26,880 --> 00:24:29,120
comparing prague with cubic prag is on

555
00:24:29,120 --> 00:24:31,520
the left side that i already showed

556
00:24:31,520 --> 00:24:33,760
cubic is on the right side and as you

557
00:24:33,760 --> 00:24:35,840
can see cubic is

558
00:24:35,840 --> 00:24:38,640
has a lot more variation

559
00:24:38,640 --> 00:24:40,159
for throughput for the four different

560
00:24:40,159 --> 00:24:42,159
flows

561
00:24:42,159 --> 00:24:45,400
next slide

562
00:24:46,720 --> 00:24:49,520
this is uh the corresponding

563
00:24:49,520 --> 00:24:53,120
smooth rtt plot for the same test

564
00:24:53,120 --> 00:24:54,799
where you can see

565
00:24:54,799 --> 00:24:57,679
all these four flows the measured smooth

566
00:24:57,679 --> 00:25:01,200
rtt at the quick layer at the end host

567
00:25:01,200 --> 00:25:03,039
is staying between

568
00:25:03,039 --> 00:25:06,480
20 and 22 or sometimes

569
00:25:06,480 --> 00:25:09,919
20 20 and 23 so this is very

570
00:25:09,919 --> 00:25:12,640
this is very good result we have

571
00:25:12,640 --> 00:25:15,600
much much less deviation from the base

572
00:25:15,600 --> 00:25:18,480
rtt the base rtt here is 20 millisecond

573
00:25:18,480 --> 00:25:19,760
as you can see

574
00:25:19,760 --> 00:25:22,880
and the deviation is very little and

575
00:25:22,880 --> 00:25:25,520
it also reduces the jitter

576
00:25:25,520 --> 00:25:29,039
and next slide please

577
00:25:29,039 --> 00:25:31,679
and comparing this with cubic you can

578
00:25:31,679 --> 00:25:34,000
see the amount of jitter

579
00:25:34,000 --> 00:25:36,880
and deviation from the base rtt for

580
00:25:36,880 --> 00:25:39,279
cubic

581
00:25:39,840 --> 00:25:43,399
next slide please

582
00:25:43,440 --> 00:25:46,000
um so those were the results from apple

583
00:25:46,000 --> 00:25:49,360
quick we are continuously working on the

584
00:25:49,360 --> 00:25:52,000
improving the conduction controller

585
00:25:52,000 --> 00:25:54,640
and now i'll go through a few points

586
00:25:54,640 --> 00:25:56,559
that are

587
00:25:56,559 --> 00:25:58,720
important while people are getting

588
00:25:58,720 --> 00:26:00,559
started on this and they might have

589
00:26:00,559 --> 00:26:02,080
questions on these so i thought i'll

590
00:26:02,080 --> 00:26:04,320
just include that

591
00:26:04,320 --> 00:26:07,120
next slide please

592
00:26:07,600 --> 00:26:08,799
um

593
00:26:08,799 --> 00:26:11,200
some of the folks asked me whether we

594
00:26:11,200 --> 00:26:14,799
need to use reno for implementing prague

595
00:26:14,799 --> 00:26:17,120
requirements and that's not true you

596
00:26:17,120 --> 00:26:19,360
don't need to use that

597
00:26:19,360 --> 00:26:20,880
you can use

598
00:26:20,880 --> 00:26:21,679
your

599
00:26:21,679 --> 00:26:23,679
default condition controller behavior

600
00:26:23,679 --> 00:26:25,760
like cubic

601
00:26:25,760 --> 00:26:29,279
and use that for reductions

602
00:26:29,279 --> 00:26:31,760
and increase during the loss

603
00:26:31,760 --> 00:26:34,080
it's only during the ce you have to

604
00:26:34,080 --> 00:26:36,080
change the behavior

605
00:26:36,080 --> 00:26:38,320
for prague and there are other caveats

606
00:26:38,320 --> 00:26:40,159
that you should look at the draft for

607
00:26:40,159 --> 00:26:44,000
for example rtt independence and pacing

608
00:26:44,000 --> 00:26:45,679
another thing um

609
00:26:45,679 --> 00:26:48,080
that's interesting for that's

610
00:26:48,080 --> 00:26:50,320
interesting for prague is you know when

611
00:26:50,320 --> 00:26:51,120
you

612
00:26:51,120 --> 00:26:54,159
do a reduction due to loss

613
00:26:54,159 --> 00:26:57,120
sorry when you do a reduction due to ce

614
00:26:57,120 --> 00:26:59,679
and then you see a packet loss

615
00:26:59,679 --> 00:27:00,960
right after

616
00:27:00,960 --> 00:27:03,360
you did a reduction due to ce within the

617
00:27:03,360 --> 00:27:05,039
same rtt

618
00:27:05,039 --> 00:27:07,760
would you want to do another reduction

619
00:27:07,760 --> 00:27:09,600
independent of what you reduced due to

620
00:27:09,600 --> 00:27:12,080
ce or would you like to combine

621
00:27:12,080 --> 00:27:13,120
the two

622
00:27:13,120 --> 00:27:16,000
so that the total reduction is either 30

623
00:27:16,000 --> 00:27:20,240
percent or for cubic or 50 for reno this

624
00:27:20,240 --> 00:27:22,799
is something to investigate um

625
00:27:22,799 --> 00:27:23,600
and

626
00:27:23,600 --> 00:27:26,000
it would be great if folks can try this

627
00:27:26,000 --> 00:27:29,279
out and show their results with this

628
00:27:29,279 --> 00:27:32,080
um with this approach

629
00:27:32,080 --> 00:27:35,639
next slide please

630
00:27:36,240 --> 00:27:38,880
uh another important thing for l4s and

631
00:27:38,880 --> 00:27:41,600
prog is pacing is mandatory

632
00:27:41,600 --> 00:27:43,120
because otherwise you will create

633
00:27:43,120 --> 00:27:45,120
burstiness and you will see a lot of

634
00:27:45,120 --> 00:27:46,399
marks

635
00:27:46,399 --> 00:27:49,200
um and for pacing

636
00:27:49,200 --> 00:27:51,279
uh there are obviously things to

637
00:27:51,279 --> 00:27:54,000
consider like if your congestion control

638
00:27:54,000 --> 00:27:55,760
is in user space

639
00:27:55,760 --> 00:27:58,080
you know for example quick protocol has

640
00:27:58,080 --> 00:28:00,399
conduction control in user space

641
00:28:00,399 --> 00:28:02,320
what kind of pacing would you want to

642
00:28:02,320 --> 00:28:05,200
use because you need more fine grain

643
00:28:05,200 --> 00:28:06,559
pacing than

644
00:28:06,559 --> 00:28:09,200
what you might have been using right now

645
00:28:09,200 --> 00:28:12,000
so if you use user space spacing

646
00:28:12,000 --> 00:28:14,000
you could have skew and timers that

647
00:28:14,000 --> 00:28:15,360
could

648
00:28:15,360 --> 00:28:17,679
basically cause some amount of bursting

649
00:28:17,679 --> 00:28:21,440
if the pacing is not accurate

650
00:28:21,440 --> 00:28:23,919
on linux operating system there are ways

651
00:28:23,919 --> 00:28:26,960
to offload this to kernel

652
00:28:26,960 --> 00:28:29,039
there are apis like

653
00:28:29,039 --> 00:28:32,559
as socket max spacing rate and

654
00:28:32,559 --> 00:28:36,399
sotx time and you need to use a fair q

655
00:28:36,399 --> 00:28:39,760
queueing discipline for both of them

656
00:28:39,760 --> 00:28:41,840
and some of some of the quick

657
00:28:41,840 --> 00:28:44,399
implementers have already tried sotx

658
00:28:44,399 --> 00:28:46,799
time so they have some experience and

659
00:28:46,799 --> 00:28:49,200
you can try either of the approach and

660
00:28:49,200 --> 00:28:51,440
you know decide what works best for your

661
00:28:51,440 --> 00:28:53,360
implementation

662
00:28:53,360 --> 00:28:55,919
for the condition controllers in kernel

663
00:28:55,919 --> 00:28:58,240
some tcp still exists in the kernel

664
00:28:58,240 --> 00:28:59,200
stack

665
00:28:59,200 --> 00:29:00,960
so for that

666
00:29:00,960 --> 00:29:03,279
it's pretty simple on linux you can use

667
00:29:03,279 --> 00:29:04,240
the

668
00:29:04,240 --> 00:29:05,919
sk pacing rate

669
00:29:05,919 --> 00:29:08,159
on the sk and then you you have a

670
00:29:08,159 --> 00:29:10,880
callback for tso segments

671
00:29:10,880 --> 00:29:13,679
which allows you to set the burst size

672
00:29:13,679 --> 00:29:18,000
um so that is all from me today um

673
00:29:18,000 --> 00:29:19,760
as i have to leave now so if you have

674
00:29:19,760 --> 00:29:21,120
any questions

675
00:29:21,120 --> 00:29:23,039
you can ask bob

676
00:29:23,039 --> 00:29:25,600
and if bob doesn't have those answers

677
00:29:25,600 --> 00:29:27,279
please feel free to send questions to

678
00:29:27,279 --> 00:29:28,720
the mailing list

679
00:29:28,720 --> 00:29:30,320
thank you

680
00:29:30,320 --> 00:29:32,639
thank you

681
00:29:34,799 --> 00:29:38,120
safe journey

682
00:29:42,799 --> 00:29:46,240
yeah sorry janna can you um

683
00:29:46,240 --> 00:29:48,880
does anyone want to ask billy questions

684
00:29:48,880 --> 00:29:50,159
no she's probably wanting to get off

685
00:29:50,159 --> 00:29:51,120
isn't she

686
00:29:51,120 --> 00:29:52,159
um

687
00:29:52,159 --> 00:29:54,480
okay want one back yep

688
00:29:54,480 --> 00:29:56,960
um so here

689
00:29:56,960 --> 00:29:59,440
this is a plot of normalized uh

690
00:29:59,440 --> 00:30:01,600
this is this is now going back to tcp

691
00:30:01,600 --> 00:30:04,559
prague so vinnie was um implemented

692
00:30:04,559 --> 00:30:06,559
prague in quick this is going back to

693
00:30:06,559 --> 00:30:09,760
the linux implementation of tcp prague

694
00:30:09,760 --> 00:30:11,760
um

695
00:30:11,760 --> 00:30:13,679
before

696
00:30:13,679 --> 00:30:16,240
we had to let video

697
00:30:16,240 --> 00:30:19,279
so she could get her flight

698
00:30:19,279 --> 00:30:21,039
right this shows

699
00:30:21,039 --> 00:30:23,039
along the bottom

700
00:30:23,039 --> 00:30:25,120
different numbers of flows

701
00:30:25,120 --> 00:30:27,760
for instance a to b eight meaning

702
00:30:27,760 --> 00:30:31,279
two a flows and eight b flows

703
00:30:31,279 --> 00:30:34,080
on the left they're all ecn cubic

704
00:30:34,080 --> 00:30:34,840
on the

705
00:30:34,840 --> 00:30:38,559
right they're all prague in coddle

706
00:30:38,559 --> 00:30:39,760
and in the middle

707
00:30:39,760 --> 00:30:41,520
they're prague

708
00:30:41,520 --> 00:30:42,559
versus

709
00:30:42,559 --> 00:30:44,080
cubic

710
00:30:44,080 --> 00:30:46,559
in um a dual queue

711
00:30:46,559 --> 00:30:49,120
so the the cubic ones go

712
00:30:49,120 --> 00:30:51,120
into the classic q and the prague ones

713
00:30:51,120 --> 00:30:52,640
into the other queue

714
00:30:52,640 --> 00:30:55,200
and the aim is obviously to get

715
00:30:55,200 --> 00:30:56,320
roughly

716
00:30:56,320 --> 00:30:57,200
hit

717
00:30:57,200 --> 00:30:59,279
the ratio of one

718
00:30:59,279 --> 00:31:01,200
but it's not a ratio sorry it's a

719
00:31:01,200 --> 00:31:03,360
normalized rate per flow

720
00:31:03,360 --> 00:31:04,559
where

721
00:31:04,559 --> 00:31:06,080
one means

722
00:31:06,080 --> 00:31:08,720
your flow is going at one end of the

723
00:31:08,720 --> 00:31:11,760
capacity where there are end flows

724
00:31:11,760 --> 00:31:13,760
so along the bottom you see you've got

725
00:31:13,760 --> 00:31:19,200
a1 b1 a2b2 so for a2b2 n would be four

726
00:31:19,200 --> 00:31:21,760
and you're getting um if you're getting

727
00:31:21,760 --> 00:31:23,919
a quarter then your the normalized rate

728
00:31:23,919 --> 00:31:25,519
would be one

729
00:31:25,519 --> 00:31:28,399
um and you'll see about halfway along

730
00:31:28,399 --> 00:31:31,360
it it also starts testing a naught b b10

731
00:31:31,360 --> 00:31:35,120
a1 b9 a2 b8 so um

732
00:31:35,120 --> 00:31:37,039
we have actually tested the full matrix

733
00:31:37,039 --> 00:31:37,760
but

734
00:31:37,760 --> 00:31:38,640
um

735
00:31:38,640 --> 00:31:40,559
this gives you representative results

736
00:31:40,559 --> 00:31:42,480
and you can see the fq coddle is pretty

737
00:31:42,480 --> 00:31:45,440
um spot on one all the time

738
00:31:45,440 --> 00:31:48,399
with very little variance if none

739
00:31:48,399 --> 00:31:50,240
apart from the odd

740
00:31:50,240 --> 00:31:52,480
um

741
00:31:53,039 --> 00:31:54,720
bump and fart which

742
00:31:54,720 --> 00:31:59,120
they are in fact uh hash collisions

743
00:31:59,120 --> 00:32:01,679
given we did a lot of tests on this

744
00:32:01,679 --> 00:32:02,799
and

745
00:32:02,799 --> 00:32:05,679
on the left-hand column

746
00:32:05,679 --> 00:32:06,720
um

747
00:32:06,720 --> 00:32:08,799
you can see that pi is similarly

748
00:32:08,799 --> 00:32:10,480
the mean is sitting at one but the

749
00:32:10,480 --> 00:32:12,000
variance is greater

750
00:32:12,000 --> 00:32:15,840
i should add that the top plot is cubic

751
00:32:15,840 --> 00:32:17,840
and the bottom plot

752
00:32:17,840 --> 00:32:21,519
is cubic versus reno um as the

753
00:32:21,519 --> 00:32:23,519
as the other flow so top is cubic cubic

754
00:32:23,519 --> 00:32:25,600
and the bottom is cubic reno

755
00:32:25,600 --> 00:32:27,519
for the pine um

756
00:32:27,519 --> 00:32:29,360
for the pie case

757
00:32:29,360 --> 00:32:31,039
and the middle is

758
00:32:31,039 --> 00:32:33,600
pie cubic at the top and pyrino at the

759
00:32:33,600 --> 00:32:35,120
bottom

760
00:32:35,120 --> 00:32:37,360
and you can see in the middle the dual

761
00:32:37,360 --> 00:32:38,640
pie squared

762
00:32:38,640 --> 00:32:40,799
it's not quite on one but it's not far

763
00:32:40,799 --> 00:32:41,679
off

764
00:32:41,679 --> 00:32:44,240
it sort of wanders around a bit

765
00:32:44,240 --> 00:32:46,159
and um

766
00:32:46,159 --> 00:32:46,960
the

767
00:32:46,960 --> 00:32:48,320
blue one

768
00:32:48,320 --> 00:32:51,120
is sometimes above one sometimes below

769
00:32:51,120 --> 00:32:52,000
um

770
00:32:52,000 --> 00:32:54,559
but not significantly far off

771
00:32:54,559 --> 00:32:56,559
but the the

772
00:32:56,559 --> 00:32:59,440
classic flow has a similar variance

773
00:32:59,440 --> 00:33:01,279
to the pi one

774
00:33:01,279 --> 00:33:04,159
and the prague flow has a um flows have

775
00:33:04,159 --> 00:33:06,720
a similar variance but well not quite as

776
00:33:06,720 --> 00:33:08,640
good as the fq gotta one

777
00:33:08,640 --> 00:33:10,640
by any stretch of the imagination but

778
00:33:10,640 --> 00:33:12,159
pretty good

779
00:33:12,159 --> 00:33:14,960
um i'm i'm going to jump over the point

780
00:33:14,960 --> 00:33:16,720
in with the grave

781
00:33:16,720 --> 00:33:17,919
um

782
00:33:17,919 --> 00:33:19,919
call out in the interest of time

783
00:33:19,919 --> 00:33:21,600
so um

784
00:33:21,600 --> 00:33:23,360
please that you should be able to read

785
00:33:23,360 --> 00:33:24,480
about that or we can talk about it on

786
00:33:24,480 --> 00:33:26,000
the list next

787
00:33:26,000 --> 00:33:27,919
slide

788
00:33:27,919 --> 00:33:30,000
and then i think we're pretty close to

789
00:33:30,000 --> 00:33:31,279
done

790
00:33:31,279 --> 00:33:33,679
um so this one is now with mixed round

791
00:33:33,679 --> 00:33:35,919
trip time flows which has been a point

792
00:33:35,919 --> 00:33:37,360
of contention

793
00:33:37,360 --> 00:33:40,880
with the dual queue algorithm

794
00:33:40,880 --> 00:33:41,919
so

795
00:33:41,919 --> 00:33:43,760
we solve this

796
00:33:43,760 --> 00:33:45,679
using

797
00:33:45,679 --> 00:33:47,760
an rtg rtt

798
00:33:47,760 --> 00:33:49,919
independence approach within

799
00:33:49,919 --> 00:33:51,519
prague

800
00:33:51,519 --> 00:33:53,200
within tcp prague

801
00:33:53,200 --> 00:33:54,880
and here

802
00:33:54,880 --> 00:33:56,640
just to explain the plots

803
00:33:56,640 --> 00:33:58,960
again you've got a number b number and

804
00:33:58,960 --> 00:34:01,279
that this time the numbers represent

805
00:34:01,279 --> 00:34:02,559
again if you look at the key at the

806
00:34:02,559 --> 00:34:05,360
bottom they represent different around

807
00:34:05,360 --> 00:34:08,159
trip times so something like a5 b100

808
00:34:08,159 --> 00:34:10,079
means five milliseconds versus 100

809
00:34:10,079 --> 00:34:12,079
milliseconds

810
00:34:12,079 --> 00:34:14,320
and um

811
00:34:14,320 --> 00:34:15,599
it tests

812
00:34:15,599 --> 00:34:17,918
a is always prag in the middle

813
00:34:17,918 --> 00:34:22,079
uh column and b is um

814
00:34:22,079 --> 00:34:25,040
either cubic or

815
00:34:25,040 --> 00:34:28,000
reno top or bottom uh sorry

816
00:34:28,000 --> 00:34:30,560
um not top or bottom

817
00:34:30,560 --> 00:34:34,000
uh reno's the red triangle and the black

818
00:34:34,000 --> 00:34:36,560
star is cubic

819
00:34:36,560 --> 00:34:38,639
and the top one is rate ratio and the

820
00:34:38,639 --> 00:34:40,639
bottom one is window ratio

821
00:34:40,639 --> 00:34:42,000
so you'll see

822
00:34:42,000 --> 00:34:43,119
um

823
00:34:43,119 --> 00:34:44,320
fq coddle

824
00:34:44,320 --> 00:34:46,560
gets the rate ratio pretty much one to

825
00:34:46,560 --> 00:34:48,879
one because it's a it's a fq schedule so

826
00:34:48,879 --> 00:34:50,800
you would expect that

827
00:34:50,800 --> 00:34:52,480
um the single queue

828
00:34:52,480 --> 00:34:54,320
there it's on the left

829
00:34:54,320 --> 00:34:55,599
um pi

830
00:34:55,599 --> 00:34:57,440
you'll see the rate varies with round

831
00:34:57,440 --> 00:34:58,880
trip time

832
00:34:58,880 --> 00:35:00,320
um

833
00:35:00,320 --> 00:35:02,880
across that sweep of round trip times

834
00:35:02,880 --> 00:35:05,520
but the window stays pretty much close

835
00:35:05,520 --> 00:35:08,560
to one because they're window fare

836
00:35:08,560 --> 00:35:09,280
um

837
00:35:09,280 --> 00:35:10,720
whereas on the right you can see the

838
00:35:10,720 --> 00:35:11,839
window

839
00:35:11,839 --> 00:35:13,680
is is pushed

840
00:35:13,680 --> 00:35:15,520
um into being

841
00:35:15,520 --> 00:35:18,000
different because the rate is equal

842
00:35:18,000 --> 00:35:20,800
now dual pi squared

843
00:35:20,800 --> 00:35:22,480
um

844
00:35:22,480 --> 00:35:26,240
effectively emulates a single qaqm by

845
00:35:26,240 --> 00:35:27,520
this

846
00:35:27,520 --> 00:35:30,800
rtt reduction algorithm that's in it

847
00:35:30,800 --> 00:35:33,359
it's just slightly worse um so you can

848
00:35:33,359 --> 00:35:37,119
see that the worst case is 6.3 a ratio

849
00:35:37,119 --> 00:35:40,480
rather than 5.5 so that's 1.14

850
00:35:40,480 --> 00:35:42,839
harm metric if you like

851
00:35:42,839 --> 00:35:44,560
worse um

852
00:35:44,560 --> 00:35:46,320
i won't go through all the writing which

853
00:35:46,320 --> 00:35:47,440
i've put on there for anyone who wants

854
00:35:47,440 --> 00:35:48,720
to study this

855
00:35:48,720 --> 00:35:50,400
in their own time

856
00:35:50,400 --> 00:35:53,119
okay next

857
00:35:55,599 --> 00:35:58,079
thanks jenna oh yes there's this is the

858
00:35:58,079 --> 00:36:00,480
last last um set of plots

859
00:36:00,480 --> 00:36:02,400
this is now

860
00:36:02,400 --> 00:36:04,000
the first one that isn't steady state

861
00:36:04,000 --> 00:36:06,400
stuff we um

862
00:36:06,400 --> 00:36:08,400
to give a feel for what happens when

863
00:36:08,400 --> 00:36:09,839
you've got um

864
00:36:09,839 --> 00:36:11,760
web light load this is heavy web light

865
00:36:11,760 --> 00:36:12,720
load

866
00:36:12,720 --> 00:36:14,880
plus a long running flow

867
00:36:14,880 --> 00:36:16,880
from both flows

868
00:36:16,880 --> 00:36:18,880
we've got um

869
00:36:18,880 --> 00:36:19,920
cubic

870
00:36:19,920 --> 00:36:22,880
ecn versus cubic non-ecn in on the

871
00:36:22,880 --> 00:36:25,280
left-hand column

872
00:36:25,280 --> 00:36:28,000
and the right hand column left hand

873
00:36:28,000 --> 00:36:30,160
being pi right being effical again

874
00:36:30,160 --> 00:36:32,720
middle is prague versus cubic so all the

875
00:36:32,720 --> 00:36:34,640
time we're trying to compare ecn versus

876
00:36:34,640 --> 00:36:37,200
non-ecn so we cut out the

877
00:36:37,200 --> 00:36:41,440
any any effect of vcn itself um

878
00:36:41,440 --> 00:36:43,599
the

879
00:36:43,839 --> 00:36:46,560
plots of the along the bottom two plots

880
00:36:46,560 --> 00:36:49,520
are q delay and utilization again as as

881
00:36:49,520 --> 00:36:52,160
at the start but this time remember with

882
00:36:52,160 --> 00:36:54,400
a lot of short flows as well

883
00:36:54,400 --> 00:36:56,000
and there's a very heavy load of short

884
00:36:56,000 --> 00:36:57,599
flows here

885
00:36:57,599 --> 00:36:59,599
um and you can see

886
00:36:59,599 --> 00:37:01,359
the q delay is pretty much like it was

887
00:37:01,359 --> 00:37:02,800
before

888
00:37:02,800 --> 00:37:03,680
um

889
00:37:03,680 --> 00:37:05,680
in the dual pi square case

890
00:37:05,680 --> 00:37:08,079
in the fq coddle case it's quite a lot

891
00:37:08,079 --> 00:37:10,000
worse particularly at the low

892
00:37:10,000 --> 00:37:12,000
round trip times because if you look at

893
00:37:12,000 --> 00:37:13,839
the scale there

894
00:37:13,839 --> 00:37:16,000
it's auto scaled up to nearly

895
00:37:16,000 --> 00:37:19,040
250 milliseconds of the 99th percentile

896
00:37:19,040 --> 00:37:20,839
on fq coddle

897
00:37:20,839 --> 00:37:22,400
um

898
00:37:22,400 --> 00:37:23,520
and

899
00:37:23,520 --> 00:37:25,119
utilization

900
00:37:25,119 --> 00:37:27,200
is probably best on the pi one but it's

901
00:37:27,200 --> 00:37:28,880
it's um

902
00:37:28,880 --> 00:37:30,800
the profile of the utilization is pretty

903
00:37:30,800 --> 00:37:32,800
much the same for the dual

904
00:37:32,800 --> 00:37:33,839
um

905
00:37:33,839 --> 00:37:36,800
pi squared and fq coddle cases

906
00:37:36,800 --> 00:37:38,640
and and really the the point here is

907
00:37:38,640 --> 00:37:42,079
that the way prague works

908
00:37:42,079 --> 00:37:44,800
um the long-running flow

909
00:37:44,800 --> 00:37:45,760
um

910
00:37:45,760 --> 00:37:50,079
has an ewma ewma in it which um

911
00:37:50,079 --> 00:37:52,800
recognizes there's there's a load here

912
00:37:52,800 --> 00:37:55,760
of unresponsive short flows and it um

913
00:37:55,760 --> 00:37:57,520
makes some headroom for them

914
00:37:57,520 --> 00:38:00,160
to keep the the delay down and that was

915
00:38:00,160 --> 00:38:02,160
all part of the design of dc tcp and

916
00:38:02,160 --> 00:38:03,440
that's

917
00:38:03,440 --> 00:38:05,200
what we wanted

918
00:38:05,200 --> 00:38:06,000
for

919
00:38:06,000 --> 00:38:08,000
the internet

920
00:38:08,000 --> 00:38:11,680
the the top plots are

921
00:38:12,160 --> 00:38:14,240
cumulative

922
00:38:14,240 --> 00:38:16,320
distribution functions

923
00:38:16,320 --> 00:38:17,520
and they're complementary and they're

924
00:38:17,520 --> 00:38:19,119
also log scale

925
00:38:19,119 --> 00:38:20,800
i have shown one of these before so

926
00:38:20,800 --> 00:38:22,240
along the bottom

927
00:38:22,240 --> 00:38:23,920
scale is the q delay and the and the

928
00:38:23,920 --> 00:38:25,200
vertical is

929
00:38:25,200 --> 00:38:28,960
um percentiles on a log scale

930
00:38:28,960 --> 00:38:31,599
and each one of those is just one case

931
00:38:31,599 --> 00:38:32,800
of the other

932
00:38:32,800 --> 00:38:35,040
um you know as i mentioned before there

933
00:38:35,040 --> 00:38:36,880
are 25 cases and it's just picking one

934
00:38:36,880 --> 00:38:40,800
of them 120 meg 10 millisecond case

935
00:38:40,800 --> 00:38:42,400
in each case

936
00:38:42,400 --> 00:38:44,400
and the gray

937
00:38:44,400 --> 00:38:46,480
background plots of the the ones off the

938
00:38:46,480 --> 00:38:48,720
other plot so it's picking out the two

939
00:38:48,720 --> 00:38:49,839
that are in the

940
00:38:49,839 --> 00:38:51,520
either experiment one experiment two or

941
00:38:51,520 --> 00:38:52,800
experiment three but you can still

942
00:38:52,800 --> 00:38:54,480
compare it with the others and as you

943
00:38:54,480 --> 00:38:55,760
can see the blue

944
00:38:55,760 --> 00:38:58,640
um prague one there is

945
00:38:58,640 --> 00:39:01,359
right down much lower um

946
00:39:01,359 --> 00:39:03,839
even at five nines percentile it's

947
00:39:03,839 --> 00:39:06,400
uh about six milliseconds and a 99th

948
00:39:06,400 --> 00:39:09,040
percentile it's about two milliseconds

949
00:39:09,040 --> 00:39:10,720
um

950
00:39:10,720 --> 00:39:12,720
and uh

951
00:39:12,720 --> 00:39:15,760
so that um i've shown you that uh

952
00:39:15,760 --> 00:39:16,800
plot

953
00:39:16,800 --> 00:39:18,960
top middle if you've been in any

954
00:39:18,960 --> 00:39:22,400
presentations about um l4s before

955
00:39:22,400 --> 00:39:23,760
um

956
00:39:23,760 --> 00:39:24,960
and

957
00:39:24,960 --> 00:39:27,520
it also shows where fk coddle is and pi

958
00:39:27,520 --> 00:39:29,599
on the same thing but just to point out

959
00:39:29,599 --> 00:39:31,119
that that is

960
00:39:31,119 --> 00:39:33,680
um sort of seeing fk coddle in a good

961
00:39:33,680 --> 00:39:35,200
light because it's picking

962
00:39:35,200 --> 00:39:37,599
one of the better ones for fq codel

963
00:39:37,599 --> 00:39:38,480
okay

964
00:39:38,480 --> 00:39:41,200
thank you janna i think there's

965
00:39:41,200 --> 00:39:45,040
one more slide plus a sort of final

966
00:39:45,040 --> 00:39:47,440
yeah just a summing up slide i think

967
00:39:47,440 --> 00:39:49,520
um

968
00:39:49,520 --> 00:39:52,000
yeah so the messages are

969
00:39:52,000 --> 00:39:53,119
if you don't want a standing queue in

970
00:39:53,119 --> 00:39:54,960
your buffer

971
00:39:54,960 --> 00:39:57,520
control marking from another queue

972
00:39:57,520 --> 00:39:58,320
um

973
00:39:58,320 --> 00:40:00,720
possibly a um a coupled queue or a

974
00:40:00,720 --> 00:40:02,240
virtual queue

975
00:40:02,240 --> 00:40:03,200
um

976
00:40:03,200 --> 00:40:05,920
secondly the proper place to address

977
00:40:05,920 --> 00:40:07,599
round-trip time independence around

978
00:40:07,599 --> 00:40:09,280
triton dependence

979
00:40:09,280 --> 00:40:10,560
is

980
00:40:10,560 --> 00:40:11,920
in

981
00:40:11,920 --> 00:40:13,599
a congestion control like prague which

982
00:40:13,599 --> 00:40:16,560
is being newly deployed

983
00:40:16,560 --> 00:40:18,560
for low latency which is where the

984
00:40:18,560 --> 00:40:19,599
problem is

985
00:40:19,599 --> 00:40:20,880
and third

986
00:40:20,880 --> 00:40:22,800
long proud flows

987
00:40:22,800 --> 00:40:26,160
leave headroom for the short ones

988
00:40:26,160 --> 00:40:27,200
so

989
00:40:27,200 --> 00:40:28,960
and that and that's a feature that's

990
00:40:28,960 --> 00:40:30,319
intended

991
00:40:30,319 --> 00:40:32,079
for the utilization to be reduced when

992
00:40:32,079 --> 00:40:34,720
you've got a lot of

993
00:40:35,040 --> 00:40:36,880
short flows that are unresponsive

994
00:40:36,880 --> 00:40:39,839
effectively and just finally to say

995
00:40:39,839 --> 00:40:42,640
these results we use these um sort of

996
00:40:42,640 --> 00:40:43,760
plots

997
00:40:43,760 --> 00:40:46,560
um to check for regressions um and these

998
00:40:46,560 --> 00:40:47,920
have been stable

999
00:40:47,920 --> 00:40:50,000
since about

1000
00:40:50,000 --> 00:40:51,839
that says july 19 i think this is

1001
00:40:51,839 --> 00:40:55,040
probably jana the the first

1002
00:40:55,040 --> 00:40:57,119
version of the plots i sent you i think

1003
00:40:57,119 --> 00:40:59,680
a new one says we can go back to

1004
00:40:59,680 --> 00:41:02,720
2016 and and they're

1005
00:41:02,720 --> 00:41:03,760
stable

1006
00:41:03,760 --> 00:41:05,599
like this

1007
00:41:05,599 --> 00:41:06,480
okay

1008
00:41:06,480 --> 00:41:09,200
any questions for either me or

1009
00:41:09,200 --> 00:41:10,800
biddy and i'll try and

1010
00:41:10,800 --> 00:41:12,880
channel it to vidi

1011
00:41:12,880 --> 00:41:16,000
i can't see you by the way

1012
00:41:16,000 --> 00:41:18,720
i'm gonna uh i'm gonna step in here very

1013
00:41:18,720 --> 00:41:20,800
quickly we don't have a lot of time so

1014
00:41:20,800 --> 00:41:23,200
let's take one or two quick questions i

1015
00:41:23,200 --> 00:41:25,839
need to switch

1016
00:41:28,480 --> 00:41:30,079
do you have people there at the mic i

1017
00:41:30,079 --> 00:41:31,359
don't see anybody in the mic but there

1018
00:41:31,359 --> 00:41:33,599
are a couple of discussion questions on

1019
00:41:33,599 --> 00:41:34,640
the

1020
00:41:34,640 --> 00:41:38,000
uh chat there bob

1021
00:41:38,000 --> 00:41:39,680
that might be something that if you can

1022
00:41:39,680 --> 00:41:42,640
get back to your laptop you can respond

1023
00:41:42,640 --> 00:41:44,560
there

1024
00:41:44,560 --> 00:41:47,440
you know i'm jenna i'm having trouble

1025
00:41:47,440 --> 00:41:49,200
understanding you

1026
00:41:49,200 --> 00:41:51,839
can you oh

1027
00:41:51,839 --> 00:41:55,359
that is a problem in my life in general

1028
00:41:55,359 --> 00:41:59,920
i said uh we'll take a quick question

1029
00:41:59,920 --> 00:42:00,839
right

1030
00:42:00,839 --> 00:42:02,800
yep

1031
00:42:02,800 --> 00:42:05,680
john you're on you're on the

1032
00:42:05,680 --> 00:42:08,879
thing go for a jonathan

1033
00:42:09,839 --> 00:42:11,040
okay

1034
00:42:11,040 --> 00:42:12,640
now

1035
00:42:12,640 --> 00:42:14,800
as you probably know by now i'm going to

1036
00:42:14,800 --> 00:42:16,800
be quite critical

1037
00:42:16,800 --> 00:42:19,839
but i'll try to keep it

1038
00:42:19,839 --> 00:42:23,760
sensible for this particular group

1039
00:42:23,760 --> 00:42:25,599
so

1040
00:42:25,599 --> 00:42:28,800
first question is um

1041
00:42:28,800 --> 00:42:31,359
you mentioned that it would need a very

1042
00:42:31,359 --> 00:42:33,760
smooth pacing

1043
00:42:33,760 --> 00:42:36,720
in order to reduce burstiness

1044
00:42:36,720 --> 00:42:38,480
um

1045
00:42:38,480 --> 00:42:40,720
what happens if burstness is introduced

1046
00:42:40,720 --> 00:42:42,839
by the

1047
00:42:42,839 --> 00:42:45,599
link right right yes

1048
00:42:45,599 --> 00:42:47,520
so um

1049
00:42:47,520 --> 00:42:49,119
that that's actually

1050
00:42:49,119 --> 00:42:51,359
semi-answered by

1051
00:42:51,359 --> 00:42:53,599
the point about um

1052
00:42:53,599 --> 00:42:55,599
marking with another queue

1053
00:42:55,599 --> 00:42:57,680
and um

1054
00:42:57,680 --> 00:43:00,400
i i mentioned if you mark with a virtual

1055
00:43:00,400 --> 00:43:01,760
cue

1056
00:43:01,760 --> 00:43:03,280
um

1057
00:43:03,280 --> 00:43:04,319
you can

1058
00:43:04,319 --> 00:43:05,680
um

1059
00:43:05,680 --> 00:43:07,359
ensure that the

1060
00:43:07,359 --> 00:43:10,960
any any bursts coming into your

1061
00:43:10,960 --> 00:43:14,560
l4s link whether you know if if caused

1062
00:43:14,560 --> 00:43:16,240
by like you say another link like a

1063
00:43:16,240 --> 00:43:18,560
wi-fi upstream or something

1064
00:43:18,560 --> 00:43:20,319
they will still

1065
00:43:20,319 --> 00:43:21,839
come into the

1066
00:43:21,839 --> 00:43:23,680
um

1067
00:43:23,680 --> 00:43:24,960
the l4s

1068
00:43:24,960 --> 00:43:28,000
aqm and the flow will still

1069
00:43:28,000 --> 00:43:30,319
hit the um

1070
00:43:30,319 --> 00:43:31,920
threshold but if you put that threshold

1071
00:43:31,920 --> 00:43:33,680
in the virtual queue

1072
00:43:33,680 --> 00:43:36,079
it at least will ensure that the bursts

1073
00:43:36,079 --> 00:43:38,880
don't get into the real queue

1074
00:43:38,880 --> 00:43:41,040
even though um so effectively it will

1075
00:43:41,040 --> 00:43:44,240
reduce the utilization of the um bursty

1076
00:43:44,240 --> 00:43:45,359
flow

1077
00:43:45,359 --> 00:43:46,160
um

1078
00:43:46,160 --> 00:43:48,240
up to the well it depends depends where

1079
00:43:48,240 --> 00:43:50,160
you put the threshold in the

1080
00:43:50,160 --> 00:43:51,920
um virtual queue

1081
00:43:51,920 --> 00:43:54,000
you can you can absorb some of the burst

1082
00:43:54,000 --> 00:43:55,680
in the virtual queue

1083
00:43:55,680 --> 00:43:57,839
and then above that the burst will go

1084
00:43:57,839 --> 00:44:00,079
into the real queue but the reason for

1085
00:44:00,079 --> 00:44:02,240
doing that is that what you don't want

1086
00:44:02,240 --> 00:44:04,160
to do is to set the

1087
00:44:04,160 --> 00:44:06,839
threshold in the um real

1088
00:44:06,839 --> 00:44:09,119
queue i mean say for instance you're

1089
00:44:09,119 --> 00:44:10,640
getting 10 millisecond burst you don't

1090
00:44:10,640 --> 00:44:11,760
want to set the threshold at 10

1091
00:44:11,760 --> 00:44:14,640
milliseconds just in case you get bursts

1092
00:44:14,640 --> 00:44:15,760
um

1093
00:44:15,760 --> 00:44:17,119
and then when you don't get burst you

1094
00:44:17,119 --> 00:44:18,400
get a standing queue up to 10

1095
00:44:18,400 --> 00:44:19,839
milliseconds

1096
00:44:19,839 --> 00:44:21,280
whereas if you put it in the virtual

1097
00:44:21,280 --> 00:44:24,960
queue you will get um

1098
00:44:24,960 --> 00:44:26,480
when you have bursts

1099
00:44:26,480 --> 00:44:29,200
you you will still get bursts in in the

1100
00:44:29,200 --> 00:44:31,520
real queue or at least the top of them

1101
00:44:31,520 --> 00:44:33,040
but when you haven't got burst so you've

1102
00:44:33,040 --> 00:44:35,359
got an ethernet link coming in um as

1103
00:44:35,359 --> 00:44:37,119
well and you've got traffic coming over

1104
00:44:37,119 --> 00:44:39,440
that then at least you will have the

1105
00:44:39,440 --> 00:44:40,640
smoothness

1106
00:44:40,640 --> 00:44:42,079
of that link

1107
00:44:42,079 --> 00:44:43,520
so

1108
00:44:43,520 --> 00:44:45,200
the aim here is

1109
00:44:45,200 --> 00:44:47,359
not necessarily to get rid of the bursts

1110
00:44:47,359 --> 00:44:49,280
from the wi-fi all that although that

1111
00:44:49,280 --> 00:44:50,960
would be another

1112
00:44:50,960 --> 00:44:52,560
a possible approach where you put a

1113
00:44:52,560 --> 00:44:54,960
shaper in or something but only if you

1114
00:44:54,960 --> 00:44:56,800
really knew that you had the burst in

1115
00:44:56,800 --> 00:44:58,079
the first place

1116
00:44:58,079 --> 00:45:00,160
but it's more to make sure that

1117
00:45:00,160 --> 00:45:02,160
you don't

1118
00:45:02,160 --> 00:45:04,720
configure your thresholds

1119
00:45:04,720 --> 00:45:08,480
just in case you've got burstiness

1120
00:45:08,560 --> 00:45:11,119
if you haven't always got it so you you

1121
00:45:11,119 --> 00:45:13,280
get the benefit of

1122
00:45:13,280 --> 00:45:15,359
smooth smooth links when you're using

1123
00:45:15,359 --> 00:45:17,599
them and you can still absorb the bursts

1124
00:45:17,599 --> 00:45:20,240
from the burst you want is that a um oh

1125
00:45:20,240 --> 00:45:22,640
and i i should add

1126
00:45:22,640 --> 00:45:24,240
that that

1127
00:45:24,240 --> 00:45:25,119
um

1128
00:45:25,119 --> 00:45:27,839
virtual cue is in

1129
00:45:27,839 --> 00:45:29,839
in the design of docsis

1130
00:45:29,839 --> 00:45:31,599
from the start we would have to add it

1131
00:45:31,599 --> 00:45:35,680
to the linux implementation to test it

1132
00:45:35,680 --> 00:45:37,680
and we haven't tested anything i've just

1133
00:45:37,680 --> 00:45:40,960
said that was that's just

1134
00:45:40,960 --> 00:45:44,000
how i believe we'll be able to do it

1135
00:45:44,000 --> 00:45:45,920
but i have started doing this with my

1136
00:45:45,920 --> 00:45:49,359
colleague joachim mitsun

1137
00:45:50,240 --> 00:45:51,280
right

1138
00:45:51,280 --> 00:45:53,359
i'm going to say

1139
00:45:53,359 --> 00:45:57,040
we need to move on uh to the next one

1140
00:45:57,040 --> 00:45:58,160
and i

1141
00:45:58,160 --> 00:45:59,200
encourage you to continue this

1142
00:45:59,200 --> 00:46:02,400
conversation on either the chat channel

1143
00:46:02,400 --> 00:46:04,720
or on email

1144
00:46:04,720 --> 00:46:05,920
uh bob

1145
00:46:05,920 --> 00:46:07,839
we yeah we have 15 minutes left we've

1146
00:46:07,839 --> 00:46:09,920
got two more things to do so

1147
00:46:09,920 --> 00:46:13,520
thank you bob vidi for the presentation

1148
00:46:13,520 --> 00:46:14,720
i do appreciate it there's some like i

1149
00:46:14,720 --> 00:46:16,160
said there's some feedback on the chat

1150
00:46:16,160 --> 00:46:17,359
please go take a look i'm going to

1151
00:46:17,359 --> 00:46:19,280
switch over to natalie i'm also going to

1152
00:46:19,280 --> 00:46:22,160
try to come here and eat your head from

1153
00:46:22,160 --> 00:46:24,160
here as you leave

1154
00:46:24,160 --> 00:46:27,118
let me see if i can do that

1155
00:46:27,760 --> 00:46:30,480
i can't do that

1156
00:46:31,040 --> 00:46:34,640
i was going to eat you up bob

1157
00:46:39,599 --> 00:46:40,720
so

1158
00:46:40,720 --> 00:46:42,879
low

1159
00:46:48,480 --> 00:46:49,760
so

1160
00:46:49,760 --> 00:46:51,920
hello everybody my name is natalie romo

1161
00:46:51,920 --> 00:46:54,240
moreno from dutch telecom and welcome to

1162
00:46:54,240 --> 00:46:56,400
this presentation about packet

1163
00:46:56,400 --> 00:46:58,240
reordering in multi-path transport

1164
00:46:58,240 --> 00:46:59,520
scenarios

1165
00:46:59,520 --> 00:47:02,720
next slide please

1166
00:47:06,079 --> 00:47:08,000
should i control it or do you have the

1167
00:47:08,000 --> 00:47:10,640
control again okay perfect

1168
00:47:10,640 --> 00:47:13,040
so i'm going to start with a brief

1169
00:47:13,040 --> 00:47:15,200
introduction explaining the problem that

1170
00:47:15,200 --> 00:47:17,680
we try to address here

1171
00:47:17,680 --> 00:47:20,319
and then i will show some experimental

1172
00:47:20,319 --> 00:47:23,119
results and conclusions

1173
00:47:23,119 --> 00:47:26,240
so uh first of all when we compare

1174
00:47:26,240 --> 00:47:28,160
multiple transport with single path

1175
00:47:28,160 --> 00:47:30,559
transport characteristics we know that

1176
00:47:30,559 --> 00:47:32,720
in the case of the multipath scenario we

1177
00:47:32,720 --> 00:47:34,800
experience an extraordinary higher

1178
00:47:34,800 --> 00:47:37,200
jitter and also a significantly higher

1179
00:47:37,200 --> 00:47:38,960
out of order delivery

1180
00:47:38,960 --> 00:47:40,720
this comes precisely from the

1181
00:47:40,720 --> 00:47:43,680
heterogeneous nature of the different a

1182
00:47:43,680 --> 00:47:45,280
parts which are bundled within the

1183
00:47:45,280 --> 00:47:47,119
multipath connection

1184
00:47:47,119 --> 00:47:48,880
now these characteristics this high

1185
00:47:48,880 --> 00:47:51,119
jitter and high out of order

1186
00:47:51,119 --> 00:47:53,520
are exposed by the multiple protocols

1187
00:47:53,520 --> 00:47:55,680
either to the higher layer application

1188
00:47:55,680 --> 00:47:57,760
that makes use of them or to the

1189
00:47:57,760 --> 00:47:59,440
end-to-end traffic that is carried by

1190
00:47:59,440 --> 00:48:01,440
them in the case an intermediary

1191
00:48:01,440 --> 00:48:03,760
multi-path transport is used

1192
00:48:03,760 --> 00:48:06,559
as it is the case of the atss framework

1193
00:48:06,559 --> 00:48:10,480
specified in 3gbp which defines a 5g and

1194
00:48:10,480 --> 00:48:13,040
wi-fi mno boundary

1195
00:48:13,040 --> 00:48:16,000
so from the mp protocols those who have

1196
00:48:16,000 --> 00:48:18,160
a strict reliability and strict

1197
00:48:18,160 --> 00:48:19,440
inaudible

1198
00:48:19,440 --> 00:48:22,240
delivery like mptcp and mp quick in

1199
00:48:22,240 --> 00:48:23,520
stream mode

1200
00:48:23,520 --> 00:48:25,680
they only experience a high jitter

1201
00:48:25,680 --> 00:48:28,480
dominated by the path latency difference

1202
00:48:28,480 --> 00:48:30,960
but for those protocols which do not

1203
00:48:30,960 --> 00:48:33,599
have this strict in order delivery like

1204
00:48:33,599 --> 00:48:37,920
mptcp mpqi with the datagram extension

1205
00:48:37,920 --> 00:48:40,640
and ssttp with the cmt extension we

1206
00:48:40,640 --> 00:48:42,800
experience jitter at all but we also

1207
00:48:42,800 --> 00:48:45,200
experience a high out of order delivery

1208
00:48:45,200 --> 00:48:47,280
also dominated by the path latency

1209
00:48:47,280 --> 00:48:48,640
difference

1210
00:48:48,640 --> 00:48:49,839
now

1211
00:48:49,839 --> 00:48:51,760
the problem is that the service running

1212
00:48:51,760 --> 00:48:54,079
over the internet are designed to cope

1213
00:48:54,079 --> 00:48:55,920
with the characteristics of the single

1214
00:48:55,920 --> 00:48:58,800
path transport so if we add this high

1215
00:48:58,800 --> 00:49:00,400
jitter and this high out of order

1216
00:49:00,400 --> 00:49:03,119
delivery introduced for example by an

1217
00:49:03,119 --> 00:49:05,520
atss splitting use case

1218
00:49:05,520 --> 00:49:06,800
this might cause

1219
00:49:06,800 --> 00:49:08,240
this might result in quality of

1220
00:49:08,240 --> 00:49:09,920
experience and quality of service

1221
00:49:09,920 --> 00:49:12,160
degradation

1222
00:49:12,160 --> 00:49:14,400
so coming from this statement

1223
00:49:14,400 --> 00:49:16,400
what we did was to conduct some work to

1224
00:49:16,400 --> 00:49:18,880
investigate the demand of imperial

1225
00:49:18,880 --> 00:49:20,480
multipath reordering and latency

1226
00:49:20,480 --> 00:49:22,960
difference compensation precisely in the

1227
00:49:22,960 --> 00:49:25,200
scenario where an intermediary multipath

1228
00:49:25,200 --> 00:49:27,920
transport is used as it is the case of

1229
00:49:27,920 --> 00:49:31,440
the atss splitting scenario

1230
00:49:31,440 --> 00:49:33,520
in the first stage we demonstrate the

1231
00:49:33,520 --> 00:49:36,160
impact of no reordering with different

1232
00:49:36,160 --> 00:49:38,079
traffic types carried over a multiple

1233
00:49:38,079 --> 00:49:39,119
transport

1234
00:49:39,119 --> 00:49:41,040
and afterwards we evaluate different

1235
00:49:41,040 --> 00:49:43,040
solutions to correct this out-of-order

1236
00:49:43,040 --> 00:49:45,040
delivery and digital

1237
00:49:45,040 --> 00:49:47,040
the explanation of these algorithms that

1238
00:49:47,040 --> 00:49:48,720
are going to be shown here is also in

1239
00:49:48,720 --> 00:49:50,079
this draft that i linked in the

1240
00:49:50,079 --> 00:49:51,839
presentation

1241
00:49:51,839 --> 00:49:53,119
so

1242
00:49:53,119 --> 00:49:55,839
the tests that we executed were executed

1243
00:49:55,839 --> 00:49:58,400
using the mpdccp framework but the

1244
00:49:58,400 --> 00:50:00,319
results are also applicable to other

1245
00:50:00,319 --> 00:50:02,720
multipath solutions like mpquik

1246
00:50:02,720 --> 00:50:05,599
we generate the traffic tcp udp using

1247
00:50:05,599 --> 00:50:07,760
iperf and we also generated quick

1248
00:50:07,760 --> 00:50:09,440
traffic using the quick go

1249
00:50:09,440 --> 00:50:11,280
implementation

1250
00:50:11,280 --> 00:50:14,400
next slide please

1251
00:50:17,839 --> 00:50:20,559
so as i said in an initial stage we

1252
00:50:20,559 --> 00:50:22,640
demonstrate the what happens when there

1253
00:50:22,640 --> 00:50:25,280
is no reordering at all so for this test

1254
00:50:25,280 --> 00:50:27,920
we used plain utp traffic and quick

1255
00:50:27,920 --> 00:50:29,680
traffic over a multi-part dccp

1256
00:50:29,680 --> 00:50:30,960
connection

1257
00:50:30,960 --> 00:50:34,000
the mp3 connection has two subfloors or

1258
00:50:34,000 --> 00:50:35,920
two parts each one of them with a 10

1259
00:50:35,920 --> 00:50:38,240
megabit per second capacity and the

1260
00:50:38,240 --> 00:50:40,400
latency difference between them is at 15

1261
00:50:40,400 --> 00:50:42,319
milliseconds

1262
00:50:42,319 --> 00:50:44,480
we use a priority by statistic mode that

1263
00:50:44,480 --> 00:50:46,319
means there is a primary link that is

1264
00:50:46,319 --> 00:50:48,240
going to be used by default once the

1265
00:50:48,240 --> 00:50:50,319
primary link is congested the secondary

1266
00:50:50,319 --> 00:50:53,119
link will start being used

1267
00:50:53,119 --> 00:50:55,839
and the congestion control used in the

1268
00:50:55,839 --> 00:50:58,640
quick traffic is nearing

1269
00:50:58,640 --> 00:51:01,359
so in the left we see the results for

1270
00:51:01,359 --> 00:51:03,920
the udp traffic we see that both links

1271
00:51:03,920 --> 00:51:06,400
are fully utilized and that we achieve

1272
00:51:06,400 --> 00:51:10,079
full aggregated bandwidth

1273
00:51:12,880 --> 00:51:14,640
and

1274
00:51:14,640 --> 00:51:17,520
to the right we have the quick

1275
00:51:17,520 --> 00:51:18,559
results

1276
00:51:18,559 --> 00:51:21,119
and then we can see that only one path

1277
00:51:21,119 --> 00:51:23,680
is fully utilized even if the secondary

1278
00:51:23,680 --> 00:51:27,200
path is attempt to be used sometimes

1279
00:51:27,200 --> 00:51:29,839
so what happened in the quick case is

1280
00:51:29,839 --> 00:51:32,559
that as soon as the secondary path

1281
00:51:32,559 --> 00:51:35,200
starts being utilized the bad latency

1282
00:51:35,200 --> 00:51:37,440
difference causes a lot of scrambling

1283
00:51:37,440 --> 00:51:39,200
this scrambling causes duplicate

1284
00:51:39,200 --> 00:51:41,119
acknowledgements which are an indication

1285
00:51:41,119 --> 00:51:43,520
for the quick protocol of packet loss so

1286
00:51:43,520 --> 00:51:45,359
the reliability mechanisms and the

1287
00:51:45,359 --> 00:51:47,200
congestion control react immediately

1288
00:51:47,200 --> 00:51:49,920
there is a packet retransmission and the

1289
00:51:49,920 --> 00:51:52,079
congestion window is cut and therefore

1290
00:51:52,079 --> 00:51:54,480
the throughput is also reduced

1291
00:51:54,480 --> 00:51:57,359
so at the end we end up utilizing only

1292
00:51:57,359 --> 00:51:59,200
one path

1293
00:51:59,200 --> 00:52:02,079
in conclusion for a protocol like udp

1294
00:52:02,079 --> 00:52:04,000
where there is no any congestion control

1295
00:52:04,000 --> 00:52:06,480
or any reliability there is also no need

1296
00:52:06,480 --> 00:52:09,520
of any real no demand of any reorders so

1297
00:52:09,520 --> 00:52:11,839
the scrambling introduced by the

1298
00:52:11,839 --> 00:52:15,040
multipath a transport doesn't have any

1299
00:52:15,040 --> 00:52:17,359
impact on the overall performance

1300
00:52:17,359 --> 00:52:20,079
but unlike udp which has a congestion

1301
00:52:20,079 --> 00:52:22,240
control and therefore there is a demand

1302
00:52:22,240 --> 00:52:24,400
for another delivery and therefore it

1303
00:52:24,400 --> 00:52:26,480
fails to use the aggregated bandwidth

1304
00:52:26,480 --> 00:52:28,000
due to the impact of the packet of

1305
00:52:28,000 --> 00:52:29,680
scrambling

1306
00:52:29,680 --> 00:52:33,399
next slide please

1307
00:52:35,839 --> 00:52:37,359
so

1308
00:52:37,359 --> 00:52:38,960
now that we demonstrate that there is an

1309
00:52:38,960 --> 00:52:41,440
impact when no reordering is in place

1310
00:52:41,440 --> 00:52:43,359
and that this impact is also correlated

1311
00:52:43,359 --> 00:52:45,119
with the characteristics

1312
00:52:45,119 --> 00:52:46,880
of the current traffic we proceed to

1313
00:52:46,880 --> 00:52:49,280
evaluate some solutions to correct this

1314
00:52:49,280 --> 00:52:51,280
a out of order delete

1315
00:52:51,280 --> 00:52:53,839
the first one is a reordering algorithm

1316
00:52:53,839 --> 00:52:56,079
based on connection sequence number with

1317
00:52:56,079 --> 00:52:58,559
an static tag so what we do here is

1318
00:52:58,559 --> 00:53:01,440
basically read sequence number to verify

1319
00:53:01,440 --> 00:53:04,160
the inorder arrival if a gap is detected

1320
00:53:04,160 --> 00:53:05,920
there is a buffer whose which starts the

1321
00:53:05,920 --> 00:53:08,160
receive packet until the missing one

1322
00:53:08,160 --> 00:53:12,319
arrives or until our fixed timer expires

1323
00:53:12,319 --> 00:53:14,640
in this case we use the same setup as we

1324
00:53:14,640 --> 00:53:16,559
had before we use quick traffic because

1325
00:53:16,559 --> 00:53:17,920
we know there is an impact over this

1326
00:53:17,920 --> 00:53:19,680
type of traffic

1327
00:53:19,680 --> 00:53:21,440
but with the only difference that we

1328
00:53:21,440 --> 00:53:23,760
introduce a reordering algorithm with an

1329
00:53:23,760 --> 00:53:25,920
aesthetic timer of 50 milliseconds which

1330
00:53:25,920 --> 00:53:26,800
is

1331
00:53:26,800 --> 00:53:28,640
higher than the pad latency difference

1332
00:53:28,640 --> 00:53:31,359
and therefore enough to correct all the

1333
00:53:31,359 --> 00:53:32,559
scrum

1334
00:53:32,559 --> 00:53:34,559
the results are shown in the figure in

1335
00:53:34,559 --> 00:53:36,960
this scenario we managed to fully

1336
00:53:36,960 --> 00:53:39,280
utilize both parts and to have the full

1337
00:53:39,280 --> 00:53:41,359
aggregated bank width close to the 20

1338
00:53:41,359 --> 00:53:42,880
megabits per second

1339
00:53:42,880 --> 00:53:45,200
so basically the reordering algorithm in

1340
00:53:45,200 --> 00:53:46,800
this case corrects the scrambling

1341
00:53:46,800 --> 00:53:48,079
eliminates the duplicate

1342
00:53:48,079 --> 00:53:49,760
acknowledgements and therefore prevents

1343
00:53:49,760 --> 00:53:51,760
the congestion control in the quick

1344
00:53:51,760 --> 00:53:54,000
stream to react and as a result the

1345
00:53:54,000 --> 00:53:56,880
application manages to fully utilize a

1346
00:53:56,880 --> 00:53:59,280
both parts bandwidth

1347
00:53:59,280 --> 00:54:02,400
next slide please

1348
00:54:04,160 --> 00:54:04,880
so

1349
00:54:04,880 --> 00:54:05,839
this

1350
00:54:05,839 --> 00:54:07,920
reordering with the static tag works

1351
00:54:07,920 --> 00:54:09,760
well as long as we know what the path

1352
00:54:09,760 --> 00:54:12,079
latency difference is and if this

1353
00:54:12,079 --> 00:54:14,160
latency difference doesn't change

1354
00:54:14,160 --> 00:54:15,599
but there might be the case where this

1355
00:54:15,599 --> 00:54:18,079
latency difference goes either above or

1356
00:54:18,079 --> 00:54:20,559
below the timer that we configure

1357
00:54:20,559 --> 00:54:23,520
so this is what we try to test here

1358
00:54:23,520 --> 00:54:24,640
we have

1359
00:54:24,640 --> 00:54:26,800
a the same setup as before but we have a

1360
00:54:26,800 --> 00:54:28,160
pad latency difference of 20

1361
00:54:28,160 --> 00:54:30,559
milliseconds and a timer of only 15

1362
00:54:30,559 --> 00:54:31,920
milliseconds

1363
00:54:31,920 --> 00:54:34,160
the results are in the graph of the in

1364
00:54:34,160 --> 00:54:35,839
the left side so we see that the

1365
00:54:35,839 --> 00:54:38,160
secondary path is not fully utilized and

1366
00:54:38,160 --> 00:54:40,160
there is an impact on the overall

1367
00:54:40,160 --> 00:54:42,000
aggregated bandwidth

1368
00:54:42,000 --> 00:54:44,000
to correct this problem

1369
00:54:44,000 --> 00:54:46,640
the solution that we test is the same a

1370
00:54:46,640 --> 00:54:49,599
reordering bases on sequence numbers but

1371
00:54:49,599 --> 00:54:52,480
with a dynamic type this dynamic number

1372
00:54:52,480 --> 00:54:55,359
is going to be updated

1373
00:54:55,359 --> 00:54:57,440
to be equal to the latency difference of

1374
00:54:57,440 --> 00:54:59,599
the paths and this latency difference is

1375
00:54:59,599 --> 00:55:01,760
going to be estimated using the rdt

1376
00:55:01,760 --> 00:55:03,520
measurements provided by the condition

1377
00:55:03,520 --> 00:55:04,880
controlling place

1378
00:55:04,880 --> 00:55:07,200
so we see the result to the right and we

1379
00:55:07,200 --> 00:55:10,240
see that it works we have again both

1380
00:55:10,240 --> 00:55:12,160
parts fully utilized and a fully

1381
00:55:12,160 --> 00:55:14,319
aggregated bandwidth because the timer

1382
00:55:14,319 --> 00:55:15,839
manages to adapt to the network

1383
00:55:15,839 --> 00:55:17,839
conditions and the scrambling is fully

1384
00:55:17,839 --> 00:55:19,520
correct

1385
00:55:19,520 --> 00:55:21,520
now at this point we prove that this

1386
00:55:21,520 --> 00:55:24,319
sequence-based reordering a

1387
00:55:24,319 --> 00:55:26,240
solves the problem of the scrambling so

1388
00:55:26,240 --> 00:55:28,400
there is no more scrambling and a

1389
00:55:28,400 --> 00:55:30,640
congestion control like new arena

1390
00:55:30,640 --> 00:55:32,400
doesn't react anymore

1391
00:55:32,400 --> 00:55:33,280
but

1392
00:55:33,280 --> 00:55:35,680
this sequence-based reordering doesn't

1393
00:55:35,680 --> 00:55:37,359
do anything with the latency difference

1394
00:55:37,359 --> 00:55:38,880
of the butts so we still have the

1395
00:55:38,880 --> 00:55:41,040
problem of the high jitter even though

1396
00:55:41,040 --> 00:55:43,599
the new arena doesn't react to that

1397
00:55:43,599 --> 00:55:47,400
next slide please

1398
00:55:48,799 --> 00:55:52,160
no there is one before

1399
00:55:53,440 --> 00:55:55,359
there's gotta be one before

1400
00:55:55,359 --> 00:55:57,119
yeah the other one

1401
00:55:57,119 --> 00:55:59,040
uh so now the question is what happens

1402
00:55:59,040 --> 00:56:00,400
when the congestion control is not the

1403
00:56:00,400 --> 00:56:02,319
last base of congestion control but a

1404
00:56:02,319 --> 00:56:04,160
latency sensitive congestion control

1405
00:56:04,160 --> 00:56:05,599
like vbr

1406
00:56:05,599 --> 00:56:08,960
so to test that we use tcpr carried over

1407
00:56:08,960 --> 00:56:11,599
our multipaticcp framework

1408
00:56:11,599 --> 00:56:14,000
we have the same same setup of the

1409
00:56:14,000 --> 00:56:16,400
static reordering with a timer higher

1410
00:56:16,400 --> 00:56:18,480
than the bad latency difference so we

1411
00:56:18,480 --> 00:56:20,000
know that the scrambler that the

1412
00:56:20,000 --> 00:56:21,760
scrambling is corrected

1413
00:56:21,760 --> 00:56:24,160
but we still see that only one path is

1414
00:56:24,160 --> 00:56:25,520
utilized

1415
00:56:25,520 --> 00:56:27,359
and this happens because

1416
00:56:27,359 --> 00:56:29,040
for a congestion controller like bbr

1417
00:56:29,040 --> 00:56:31,760
which is latency sensitive the jumps in

1418
00:56:31,760 --> 00:56:33,280
the latency

1419
00:56:33,280 --> 00:56:35,680
generated by the by the scheduling

1420
00:56:35,680 --> 00:56:37,760
through the through both butts

1421
00:56:37,760 --> 00:56:39,520
generate a throttling of the throughput

1422
00:56:39,520 --> 00:56:41,440
under the assumption that this hey

1423
00:56:41,440 --> 00:56:43,200
fixing the latency come from buffer

1424
00:56:43,200 --> 00:56:46,319
blood so to correct this problem

1425
00:56:46,319 --> 00:56:48,880
we use or we test a solution which is

1426
00:56:48,880 --> 00:56:50,960
the delay equalization or the path

1427
00:56:50,960 --> 00:56:53,440
latency difference compensation what we

1428
00:56:53,440 --> 00:56:54,960
do with the solution is that at the

1429
00:56:54,960 --> 00:56:57,520
receiving side we delay the incoming

1430
00:56:57,520 --> 00:56:59,920
packets in the fastest path to equal the

1431
00:56:59,920 --> 00:57:02,160
latency of this lowest path

1432
00:57:02,160 --> 00:57:04,319
again this delay has to be equal to the

1433
00:57:04,319 --> 00:57:06,240
pad latency difference that is

1434
00:57:06,240 --> 00:57:08,880
estimated from the rtt measurements the

1435
00:57:08,880 --> 00:57:10,799
results are in the right so the

1436
00:57:10,799 --> 00:57:12,559
correction of the latency difference or

1437
00:57:12,559 --> 00:57:14,319
the equalization of the latency in both

1438
00:57:14,319 --> 00:57:15,280
paths

1439
00:57:15,280 --> 00:57:16,799
solves the problem of the reaction of

1440
00:57:16,799 --> 00:57:18,880
the vbr congestion control and we have

1441
00:57:18,880 --> 00:57:21,760
again full utilization of both paths and

1442
00:57:21,760 --> 00:57:24,720
full bandwidth aggregation

1443
00:57:24,720 --> 00:57:28,078
and next slide please

1444
00:57:28,400 --> 00:57:30,799
so to summarize

1445
00:57:30,799 --> 00:57:32,319
all these things

1446
00:57:32,319 --> 00:57:34,000
we demonstrate that there is an impact

1447
00:57:34,000 --> 00:57:36,640
when no reordering is used and we also

1448
00:57:36,640 --> 00:57:38,559
demonstrate that this impact on the

1449
00:57:38,559 --> 00:57:40,400
performance barriers depending on the

1450
00:57:40,400 --> 00:57:42,400
characteristics of the current traffic

1451
00:57:42,400 --> 00:57:44,880
or servicing the multiple transport and

1452
00:57:44,880 --> 00:57:46,480
therefore different solutions are

1453
00:57:46,480 --> 00:57:49,280
suitable for different traffic types

1454
00:57:49,280 --> 00:57:52,160
now within the atss splitting scenario

1455
00:57:52,160 --> 00:57:53,760
the characteristics of the traffic

1456
00:57:53,760 --> 00:57:55,760
carried over the multiple network might

1457
00:57:55,760 --> 00:57:57,359
be unknown

1458
00:57:57,359 --> 00:57:59,200
so in this case we need certain

1459
00:57:59,200 --> 00:58:01,359
in-network reordering mechanism to

1460
00:58:01,359 --> 00:58:04,400
guarantee an optimal performance

1461
00:58:04,400 --> 00:58:06,160
additionally all the results that i

1462
00:58:06,160 --> 00:58:08,640
presented here an additional one with

1463
00:58:08,640 --> 00:58:11,440
more analysis were presented in the 3gpp

1464
00:58:11,440 --> 00:58:13,119
sa2 working group

1465
00:58:13,119 --> 00:58:15,680
and there it was also concluded that

1466
00:58:15,680 --> 00:58:17,599
in-network in network re-ordering

1467
00:58:17,599 --> 00:58:19,760
support is required

1468
00:58:19,760 --> 00:58:21,760
in this document that is linked in the

1469
00:58:21,760 --> 00:58:25,520
presentation it is also recommended that

1470
00:58:25,520 --> 00:58:27,839
to achieve an ultimate performance it is

1471
00:58:27,839 --> 00:58:30,000
better to use a combination of all these

1472
00:58:30,000 --> 00:58:31,839
solutions together so a sequence number

1473
00:58:31,839 --> 00:58:33,280
base a

1474
00:58:33,280 --> 00:58:34,799
a sequence number based reordering with

1475
00:58:34,799 --> 00:58:37,119
a dynamic expiration timer a delay

1476
00:58:37,119 --> 00:58:39,520
equalization and also some algorithms to

1477
00:58:39,520 --> 00:58:43,440
detect fast packet loss detection

1478
00:58:43,599 --> 00:58:47,400
next slide please

1479
00:58:50,240 --> 00:58:53,599
now the question here is how this fits

1480
00:58:53,599 --> 00:58:55,680
into itf scopes

1481
00:58:55,680 --> 00:58:58,240
so far reordering and latency difference

1482
00:58:58,240 --> 00:59:00,319
compensations for multiple protocols is

1483
00:59:00,319 --> 00:59:02,000
not a standardizer at all similar to

1484
00:59:02,000 --> 00:59:04,160
what happens to schedule it within the

1485
00:59:04,160 --> 00:59:05,839
multipath context

1486
00:59:05,839 --> 00:59:08,640
board are so far out of scope of serious

1487
00:59:08,640 --> 00:59:10,160
standardizations there are some

1488
00:59:10,160 --> 00:59:11,280
individual

1489
00:59:11,280 --> 00:59:13,280
informational drafts about it

1490
00:59:13,280 --> 00:59:15,359
but therefore are implementation

1491
00:59:15,359 --> 00:59:16,960
specific

1492
00:59:16,960 --> 00:59:18,880
without a specification a consistent

1493
00:59:18,880 --> 00:59:21,200
behavior between client and server in

1494
00:59:21,200 --> 00:59:24,400
down enabling direction is not insured

1495
00:59:24,400 --> 00:59:26,559
and also these scheduling and reordering

1496
00:59:26,559 --> 00:59:29,920
algorithms are mainly agnostic to a idf

1497
00:59:29,920 --> 00:59:32,079
protocols so they will not be part of

1498
00:59:32,079 --> 00:59:35,680
the standard of mptcp mpdccp or mp quick

1499
00:59:35,680 --> 00:59:37,839
so our question here is what is the

1500
00:59:37,839 --> 00:59:39,760
right place or where to say hey were in

1501
00:59:39,760 --> 00:59:42,319
itf to address this multiple operating

1502
00:59:42,319 --> 00:59:44,839
topics like reordering and

1503
00:59:44,839 --> 00:59:46,400
scheduling

1504
00:59:46,400 --> 00:59:47,599
that's it

1505
00:59:47,599 --> 00:59:49,839
thank you very much

1506
00:59:49,839 --> 00:59:51,760
if you have any questions

1507
00:59:51,760 --> 00:59:53,839
uh i think this is a

1508
00:59:53,839 --> 00:59:55,599
magnus is in the queue magnus if you

1509
00:59:55,599 --> 00:59:57,359
want to respond to this quickly and

1510
00:59:57,359 --> 00:59:58,720
that'd be great i want to switch to

1511
00:59:58,720 --> 01:00:00,319
giving colin in a couple of minutes

1512
01:00:00,319 --> 01:00:02,319
before we leave the room

1513
01:00:02,319 --> 01:00:04,640
go ahead

1514
01:00:04,720 --> 01:00:07,119
language westland uh

1515
01:00:07,119 --> 01:00:12,119
your new reno did it include rack

1516
01:00:16,559 --> 01:00:18,799
did you did it include any rack

1517
01:00:18,799 --> 01:00:20,720
functionality

1518
01:00:20,720 --> 01:00:23,760
and no i just tested with the default

1519
01:00:23,760 --> 01:00:26,000
a configuration of the quick go so that

1520
01:00:26,000 --> 01:00:29,200
was basically now okay

1521
01:00:29,200 --> 01:00:30,799
so i guess it would

1522
01:00:30,799 --> 01:00:32,960
more likely would behave slightly better

1523
01:00:32,960 --> 01:00:35,280
but anyway and when it comes to this i

1524
01:00:35,280 --> 01:00:36,960
think what you're actually asking around

1525
01:00:36,960 --> 01:00:39,280
the itf scope here

1526
01:00:39,280 --> 01:00:41,119
it's a question i mean you're tunneling

1527
01:00:41,119 --> 01:00:42,559
over an mp

1528
01:00:42,559 --> 01:00:44,319
if you have an application protocol on

1529
01:00:44,319 --> 01:00:46,400
top directly on mp this is not the

1530
01:00:46,400 --> 01:00:47,680
question it's only when you're doing

1531
01:00:47,680 --> 01:00:50,400
tunneling and have another flow so it's

1532
01:00:50,400 --> 01:00:53,760
a question of tunneling over mp protocol

1533
01:00:53,760 --> 01:00:57,480
when this arises

1534
01:00:58,640 --> 01:01:00,480
i'll say in authority that it's a

1535
01:01:00,480 --> 01:01:03,040
conversation in terms of

1536
01:01:03,040 --> 01:01:04,880
where does it fit in the itf i encourage

1537
01:01:04,880 --> 01:01:07,920
you to reach out over email

1538
01:01:07,920 --> 01:01:10,880
and we can we can i can pull the right

1539
01:01:10,880 --> 01:01:12,000
people in

1540
01:01:12,000 --> 01:01:14,160
but uh please reach out over even and

1541
01:01:14,160 --> 01:01:16,880
i'm happy to take it from there

1542
01:01:16,880 --> 01:01:18,799
um thank you for your presentation again

1543
01:01:18,799 --> 01:01:20,559
um before we leave the room i know we

1544
01:01:20,559 --> 01:01:22,240
are past time but i just want to give

1545
01:01:22,240 --> 01:01:25,359
colin a couple of minutes to talk about

1546
01:01:25,359 --> 01:01:26,880
uh

1547
01:01:26,880 --> 01:01:29,040
uh

1548
01:01:29,040 --> 01:01:30,720
corn are you there

1549
01:01:30,720 --> 01:01:33,119
to talk about condition control

1550
01:01:33,119 --> 01:01:35,280
work

1551
01:01:35,920 --> 01:01:37,760
go for it colin

1552
01:01:37,760 --> 01:01:40,160
all right thanks jonah um

1553
01:01:40,160 --> 01:01:42,559
so i just wanted to give people a little

1554
01:01:42,559 --> 01:01:45,200
bit of a heads up for some work which is

1555
01:01:45,200 --> 01:01:47,280
uh potentially happening in the ietf

1556
01:01:47,280 --> 01:01:48,960
side of things

1557
01:01:48,960 --> 01:01:51,680
um so those of you who are in the

1558
01:01:51,680 --> 01:01:53,520
transport area working group earlier in

1559
01:01:53,520 --> 01:01:55,599
the week are on the transmit area list

1560
01:01:55,599 --> 01:01:58,079
will have seen that the

1561
01:01:58,079 --> 01:02:00,559
transport ads are considering chartering

1562
01:02:00,559 --> 01:02:03,280
a new congestion control working group

1563
01:02:03,280 --> 01:02:05,440
in the ietf

1564
01:02:05,440 --> 01:02:08,480
um a lot of the goal of that

1565
01:02:08,480 --> 01:02:12,000
looks to be to update rfc 5033 which is

1566
01:02:12,000 --> 01:02:14,480
the the guidelines for how the itf

1567
01:02:14,480 --> 01:02:16,000
standardizes congestion control

1568
01:02:16,000 --> 01:02:17,599
algorithms

1569
01:02:17,599 --> 01:02:18,480
um

1570
01:02:18,480 --> 01:02:19,359
but

1571
01:02:19,359 --> 01:02:21,119
there's also suggestions that the the

1572
01:02:21,119 --> 01:02:23,119
group will consider developing standards

1573
01:02:23,119 --> 01:02:24,799
track congestion control algorithms

1574
01:02:24,799 --> 01:02:26,960
after that

1575
01:02:26,960 --> 01:02:28,559
uh this obviously raises a number of

1576
01:02:28,559 --> 01:02:30,319
questions about the relation of this

1577
01:02:30,319 --> 01:02:34,319
group and uh what's happening in iccrg

1578
01:02:34,319 --> 01:02:36,558
um

1579
01:02:36,799 --> 01:02:39,039
the expectation i have is certainly that

1580
01:02:39,039 --> 01:02:42,400
iccrg is going to continue in the irtf

1581
01:02:42,400 --> 01:02:44,960
um as a home for research and

1582
01:02:44,960 --> 01:02:47,760
experimentation on congestion control

1583
01:02:47,760 --> 01:02:50,160
and it will continue to be separate to

1584
01:02:50,160 --> 01:02:54,640
standards track work in ietf

1585
01:02:55,760 --> 01:02:56,480
the

1586
01:02:56,480 --> 01:02:59,280
expectation i think from the itf side is

1587
01:02:59,280 --> 01:03:02,400
is that proposals for standards track

1588
01:03:02,400 --> 01:03:04,079
congestion control algorithms will have

1589
01:03:04,079 --> 01:03:06,240
been pretty thoroughly

1590
01:03:06,240 --> 01:03:08,079
vetted by the research community before

1591
01:03:08,079 --> 01:03:10,319
they get to the ietf

1592
01:03:10,319 --> 01:03:13,200
and i expect iccrg will will certainly

1593
01:03:13,200 --> 01:03:16,480
play a role in doing that um

1594
01:03:16,480 --> 01:03:18,720
and um in you know facilitating

1595
01:03:18,720 --> 01:03:21,039
discussion uh providing review of the

1596
01:03:21,039 --> 01:03:23,280
documents um

1597
01:03:23,280 --> 01:03:26,799
and uh i think icc

1598
01:03:26,799 --> 01:03:28,160
rg is

1599
01:03:28,160 --> 01:03:29,440
um

1600
01:03:29,440 --> 01:03:32,559
a uh a really good venue for people to

1601
01:03:32,559 --> 01:03:35,920
talk about this this this sort of work

1602
01:03:35,920 --> 01:03:37,520
it's it's got really strong links to the

1603
01:03:37,520 --> 01:03:39,760
research community and i think it really

1604
01:03:39,760 --> 01:03:43,359
sort of helps to add value when um

1605
01:03:43,359 --> 01:03:45,920
just by allowing the the researchers the

1606
01:03:45,920 --> 01:03:46,960
uh

1607
01:03:46,960 --> 01:03:48,960
the industry the standards community to

1608
01:03:48,960 --> 01:03:51,359
exchange ideas

1609
01:03:51,359 --> 01:03:55,119
um and you know the the the work in icci

1610
01:03:55,119 --> 01:03:57,359
has been really good at getting

1611
01:03:57,359 --> 01:04:00,000
practical experience getting

1612
01:04:00,000 --> 01:04:01,520
your researchers

1613
01:04:01,520 --> 01:04:04,079
implementers talking to each other each

1614
01:04:04,079 --> 01:04:05,280
other and i think that's really

1615
01:04:05,280 --> 01:04:08,960
important and i hope it continues

1616
01:04:09,200 --> 01:04:10,880
iccig is also

1617
01:04:10,880 --> 01:04:12,480
going to continue to be able to publish

1618
01:04:12,480 --> 01:04:13,119
our

1619
01:04:13,119 --> 01:04:15,520
experimental rfcs um

1620
01:04:15,520 --> 01:04:17,839
they're a really great way to document

1621
01:04:17,839 --> 01:04:20,559
congestion control algorithms um i think

1622
01:04:20,559 --> 01:04:22,480
that they're especially important

1623
01:04:22,480 --> 01:04:24,559
perhaps as a way of

1624
01:04:24,559 --> 01:04:26,559
documenting things that are perhaps

1625
01:04:26,559 --> 01:04:29,039
hoping to move into the itf standards

1626
01:04:29,039 --> 01:04:29,920
track

1627
01:04:29,920 --> 01:04:31,119
just as a

1628
01:04:31,119 --> 01:04:32,079
way of

1629
01:04:32,079 --> 01:04:35,200
clearly describing the baseline

1630
01:04:35,200 --> 01:04:38,000
um that said i don't expect iccrg to

1631
01:04:38,000 --> 01:04:40,880
turn into an experimental rfc factory um

1632
01:04:40,880 --> 01:04:42,720
it's a venue for

1633
01:04:42,720 --> 01:04:45,200
research experimentation and discussion

1634
01:04:45,200 --> 01:04:47,680
first of all

1635
01:04:47,680 --> 01:04:49,680
so uh yeah

1636
01:04:49,680 --> 01:04:50,559
um

1637
01:04:50,559 --> 01:04:52,480
i think jana's been doing a great job as

1638
01:04:52,480 --> 01:04:54,640
chair i'm expecting and hoping that he

1639
01:04:54,640 --> 01:04:56,799
will continue as as chair of the group

1640
01:04:56,799 --> 01:04:59,440
uh but we we are certainly looking to

1641
01:04:59,440 --> 01:05:02,480
appoint new co-chair candidates to uh

1642
01:05:02,480 --> 01:05:05,680
help move things along in iccrg and uh

1643
01:05:05,680 --> 01:05:07,920
uh janna and i are talking to some

1644
01:05:07,920 --> 01:05:10,960
potential people in that space

1645
01:05:10,960 --> 01:05:13,119
so uh that's what i think is happening

1646
01:05:13,119 --> 01:05:14,240
um

1647
01:05:14,240 --> 01:05:16,160
if there are any questions about it i'm

1648
01:05:16,160 --> 01:05:17,599
happy to try and answer them from the

1649
01:05:17,599 --> 01:05:19,520
irtf side and

1650
01:05:19,520 --> 01:05:21,760
i guess talk to martin duke

1651
01:05:21,760 --> 01:05:24,559
in the ietf side if there are questions

1652
01:05:24,559 --> 01:05:26,480
about that i don't know if

1653
01:05:26,480 --> 01:05:28,400
any of the transport ads are

1654
01:05:28,400 --> 01:05:30,880
on this in this meeting

1655
01:05:30,880 --> 01:05:33,880
thanks

1656
01:05:40,400 --> 01:05:42,319
yeah i soon have walked in at exactly

1657
01:05:42,319 --> 01:05:43,839
the right moment uh martin duke from

1658
01:05:43,839 --> 01:05:46,480
google and transport a.d um

1659
01:05:46,480 --> 01:05:49,440
uh yeah so i just to be clear i

1660
01:05:49,440 --> 01:05:51,119
completely endorse everything colin has

1661
01:05:51,119 --> 01:05:52,720
said i think he and i are in complete

1662
01:05:52,720 --> 01:05:55,280
alignment about the vision here

1663
01:05:55,280 --> 01:05:56,480
and um

1664
01:05:56,480 --> 01:05:59,839
i i i in fact insist that i see ccrit

1665
01:05:59,839 --> 01:06:01,839
continue to to exist

1666
01:06:01,839 --> 01:06:03,920
um and do what it has been doing if not

1667
01:06:03,920 --> 01:06:04,880
more

1668
01:06:04,880 --> 01:06:07,760
um a very possible outcome is that we do

1669
01:06:07,760 --> 01:06:09,920
this congested working group and

1670
01:06:09,920 --> 01:06:12,240
it completes its assigned tasks

1671
01:06:12,240 --> 01:06:14,400
and um there's little if any

1672
01:06:14,400 --> 01:06:16,000
standardization effort and the group

1673
01:06:16,000 --> 01:06:19,200
closes and like ccrg will be there as a

1674
01:06:19,200 --> 01:06:22,000
kadesh control forum as it has been for

1675
01:06:22,000 --> 01:06:23,200
for years

1676
01:06:23,200 --> 01:06:27,760
so um yeah i just wanted to just

1677
01:06:27,760 --> 01:06:29,280
be absolutely clear about our complete

1678
01:06:29,280 --> 01:06:30,640
alignment on this

1679
01:06:30,640 --> 01:06:33,640
thanks

1680
01:06:37,359 --> 01:06:40,240
thank you both colin and martin

1681
01:06:40,240 --> 01:06:42,160
i think by the next

1682
01:06:42,160 --> 01:06:43,680
meeting we should have a lot more

1683
01:06:43,680 --> 01:06:46,559
clarity on what's going on so i would

1684
01:06:46,559 --> 01:06:50,000
encourage people to stay tuned and

1685
01:06:50,000 --> 01:06:51,680
definitely show up to the next iccrg

1686
01:06:51,680 --> 01:06:52,640
meeting

1687
01:06:52,640 --> 01:06:54,160
and the next idea of course both of

1688
01:06:54,160 --> 01:06:56,720
those will have some interesting bits

1689
01:06:56,720 --> 01:06:58,000
for those interested in construction

1690
01:06:58,000 --> 01:07:01,680
control and how that work is done in the

1691
01:07:01,680 --> 01:07:03,440
istar space

1692
01:07:03,440 --> 01:07:04,400
so

1693
01:07:04,400 --> 01:07:05,599
with that

1694
01:07:05,599 --> 01:07:08,319
um thank you everybody um

1695
01:07:08,319 --> 01:07:11,440
please enjoy the amazing heat in

1696
01:07:11,440 --> 01:07:14,000
philadelphia i for one will not have to

1697
01:07:14,000 --> 01:07:17,280
deal with that but

1698
01:07:18,720 --> 01:07:20,240
i hope you have wonderful rest of your

1699
01:07:20,240 --> 01:07:22,319
week in ietf

1700
01:07:22,319 --> 01:07:25,480
thank you

1701
01:07:32,559 --> 01:07:35,559
so

1702
01:07:52,400 --> 01:07:54,480
you

