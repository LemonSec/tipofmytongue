1
00:00:22,480 --> 00:00:24,880
okay so i guess we're at time

2
00:00:24,880 --> 00:00:27,039
so good afternoon

3
00:00:27,039 --> 00:00:30,560
welcome to the lake meeting it's itf 114

4
00:00:30,560 --> 00:00:33,280
my co-chair militia is remote but is

5
00:00:33,280 --> 00:00:35,120
popping on screen say hello

6
00:00:35,120 --> 00:00:37,920
hello hello this is malicious speaking

7
00:00:37,920 --> 00:00:40,079
great uh i think we marco's kindly agree

8
00:00:40,079 --> 00:00:42,879
to take note so thank you marco

9
00:00:42,879 --> 00:00:45,120
we'll keep an eye on the chat ourselves

10
00:00:45,120 --> 00:00:47,600
as chairs

11
00:00:47,600 --> 00:00:49,280
okay so there's the

12
00:00:49,280 --> 00:00:50,559
note well

13
00:00:50,559 --> 00:00:52,000
i guess you've seen this before during

14
00:00:52,000 --> 00:00:54,000
the week um

15
00:00:54,000 --> 00:00:57,360
have a quick read and enjoy it

16
00:00:57,360 --> 00:01:00,000
additionally uh we're as a hybrid

17
00:01:00,000 --> 00:01:01,280
meeting we need to kind of pay attention

18
00:01:01,280 --> 00:01:02,879
to remote people

19
00:01:02,879 --> 00:01:05,199
so if if you're a remote uh please keep

20
00:01:05,199 --> 00:01:08,400
your audio and video muted unless you

21
00:01:08,400 --> 00:01:09,840
need to speak

22
00:01:09,840 --> 00:01:12,799
uh if you're here and you want to go to

23
00:01:12,799 --> 00:01:15,200
the mic please join the queue if you can

24
00:01:15,200 --> 00:01:16,799
but we don't have thousands of people so

25
00:01:16,799 --> 00:01:18,240
that's it's probably quite manageable

26
00:01:18,240 --> 00:01:20,799
but no harm no harm to join the queue uh

27
00:01:20,799 --> 00:01:22,720
if you can do so before going to the

28
00:01:22,720 --> 00:01:23,920
microphone

29
00:01:23,920 --> 00:01:25,200
and if you go to the microphone please

30
00:01:25,200 --> 00:01:27,200
also state your name

31
00:01:27,200 --> 00:01:28,640
you need to

32
00:01:28,640 --> 00:01:30,400
click onto the data tracker somewhere or

33
00:01:30,400 --> 00:01:32,479
scan the qr code as paul is doing in

34
00:01:32,479 --> 00:01:33,600
order to

35
00:01:33,600 --> 00:01:35,040
sign into the meetings for record

36
00:01:35,040 --> 00:01:39,240
keeping so please do that too

37
00:01:41,439 --> 00:01:44,159
uh so there's some links

38
00:01:44,159 --> 00:01:47,119
in case you need to do a bit of clicking

39
00:01:47,119 --> 00:01:49,200
and here's our agenda for today

40
00:01:49,200 --> 00:01:50,799
um so

41
00:01:50,799 --> 00:01:52,560
administrator we're doing then we'll

42
00:01:52,560 --> 00:01:53,520
have

43
00:01:53,520 --> 00:01:55,200
mark we'll talk about some computational

44
00:01:55,200 --> 00:01:56,719
analysis

45
00:01:56,719 --> 00:01:58,799
as then we'll baptised so the main kind

46
00:01:58,799 --> 00:02:00,719
of goal of today's meeting is to get

47
00:02:00,719 --> 00:02:02,079
this feedback from people who've been

48
00:02:02,079 --> 00:02:04,399
doing analysis of the protocol

49
00:02:04,399 --> 00:02:06,799
then john i think will give us an update

50
00:02:06,799 --> 00:02:09,199
on the draft and traces and so on and

51
00:02:09,199 --> 00:02:12,080
marco has a quick report on the

52
00:02:12,080 --> 00:02:13,280
hackathon

53
00:02:13,280 --> 00:02:14,879
and then we have one other thing uh

54
00:02:14,879 --> 00:02:16,720
malicious i forget what it is you remind

55
00:02:16,720 --> 00:02:17,520
me

56
00:02:17,520 --> 00:02:20,480
yes so we received one request on

57
00:02:20,480 --> 00:02:23,040
from marek to give an update on the uh

58
00:02:23,040 --> 00:02:26,080
his work on test factors but i don't see

59
00:02:26,080 --> 00:02:28,720
mark in the participants list so

60
00:02:28,720 --> 00:02:32,160
uh with that i guess if we can just do

61
00:02:32,160 --> 00:02:34,400
the regular gender bashing see if anyone

62
00:02:34,400 --> 00:02:36,400
else has any proposals

63
00:02:36,400 --> 00:02:38,080
so great so if he shows up and we have

64
00:02:38,080 --> 00:02:40,480
time we'll get to that and then finally

65
00:02:40,480 --> 00:02:43,200
we want to try and discuss what else we

66
00:02:43,200 --> 00:02:44,720
think is needed before we get to working

67
00:02:44,720 --> 00:02:46,160
your best call and move towards being

68
00:02:46,160 --> 00:02:49,160
done

69
00:02:50,400 --> 00:02:51,920
so status militia i think you want to

70
00:02:51,920 --> 00:02:53,840
talk to this yes so i wanted just to

71
00:02:53,840 --> 00:02:55,920
give a brief update on the status uh so

72
00:02:55,920 --> 00:02:57,360
essentially as

73
00:02:57,360 --> 00:02:59,360
as steven noted we are kind of wrapping

74
00:02:59,360 --> 00:03:01,040
up the formal analysis stage of the

75
00:03:01,040 --> 00:03:05,200
protocol uh during the previous itf-113

76
00:03:05,200 --> 00:03:07,360
meeting we had the symbolic analysis

77
00:03:07,360 --> 00:03:09,040
presented of all ad-hoc meta

78
00:03:09,040 --> 00:03:10,879
authentication methods

79
00:03:10,879 --> 00:03:13,280
uh right in this meeting we will have

80
00:03:13,280 --> 00:03:15,440
two presentations on computational

81
00:03:15,440 --> 00:03:17,200
analysis of method

82
00:03:17,200 --> 00:03:20,480
0 and method 3 by mark and baptist

83
00:03:20,480 --> 00:03:22,560
respectively so

84
00:03:22,560 --> 00:03:25,200
as you can see we have kind of

85
00:03:25,200 --> 00:03:27,760
all almost all parts of the protocol

86
00:03:27,760 --> 00:03:30,480
covered which is great

87
00:03:30,480 --> 00:03:33,280
on the implementation security side i

88
00:03:33,280 --> 00:03:35,760
won't be giving an update as due to the

89
00:03:35,760 --> 00:03:37,440
lack of agenda time but we made some

90
00:03:37,440 --> 00:03:40,159
good progress on that and completed uh

91
00:03:40,159 --> 00:03:41,760
the hacks back implementation that i

92
00:03:41,760 --> 00:03:43,920
mentioned during the previous ietf

93
00:03:43,920 --> 00:03:45,040
meeting

94
00:03:45,040 --> 00:03:47,280
uh i will be giving an update on the

95
00:03:47,280 --> 00:03:48,959
implementation security of one

96
00:03:48,959 --> 00:03:50,799
particular implementation during the

97
00:03:50,799 --> 00:03:54,319
london meeting uh during the itf 115.

98
00:03:54,319 --> 00:03:56,080
so as steven noted the goal of this

99
00:03:56,080 --> 00:03:58,400
meeting is kind of to to gather the

100
00:03:58,400 --> 00:04:01,120
final results from the formal analysis

101
00:04:01,120 --> 00:04:04,560
stage as well as to discuss what else is

102
00:04:04,560 --> 00:04:06,319
needed before the working

103
00:04:06,319 --> 00:04:08,799
group last call

104
00:04:08,799 --> 00:04:12,239
so one note we created the page

105
00:04:12,239 --> 00:04:13,319
lake

106
00:04:13,319 --> 00:04:17,199
workinggroup.org lake wwg.org

107
00:04:17,199 --> 00:04:19,358
where uh we are keeping track of the

108
00:04:19,358 --> 00:04:22,560
different activities uh around the uh

109
00:04:22,560 --> 00:04:24,160
the working group mainly

110
00:04:24,160 --> 00:04:27,199
interoperability testing formal analysis

111
00:04:27,199 --> 00:04:30,080
some informal uh presentations of the

112
00:04:30,080 --> 00:04:33,040
protocol like key schedule so just

113
00:04:33,040 --> 00:04:35,520
something that facilitated the formal

114
00:04:35,520 --> 00:04:38,720
analysis in the past so give this a a

115
00:04:38,720 --> 00:04:41,120
look and we welcome any feedback if you

116
00:04:41,120 --> 00:04:44,720
have any uh on on this particular page

117
00:04:44,720 --> 00:04:45,520
uh

118
00:04:45,520 --> 00:04:48,080
that would be pretty much it on this

119
00:04:48,080 --> 00:04:50,880
slide one one more aspect that i forget

120
00:04:50,880 --> 00:04:53,520
uh forgot to mention previously the

121
00:04:53,520 --> 00:04:56,400
external people have uh

122
00:04:56,400 --> 00:04:58,320
people external to the working group

123
00:04:58,320 --> 00:05:01,360
have mostly been referring to this to

124
00:05:01,360 --> 00:05:04,080
the protocol as a lake

125
00:05:04,080 --> 00:05:08,840
so uh we as chairs uh we wanted to kind

126
00:05:08,840 --> 00:05:12,160
of uh brief uh kind of paul the working

127
00:05:12,160 --> 00:05:15,199
group on the uh on the question whether

128
00:05:15,199 --> 00:05:16,000
uh

129
00:05:16,000 --> 00:05:19,840
renaming uh ad hoc two lake makes sense

130
00:05:19,840 --> 00:05:21,600
and we will be doing this in the next

131
00:05:21,600 --> 00:05:24,800
days on the on the mailing list so that

132
00:05:24,800 --> 00:05:27,759
would be all i wanted to to mention on

133
00:05:27,759 --> 00:05:30,639
this slide i think we can go ahead with

134
00:05:30,639 --> 00:05:32,639
our first presenter unless even you have

135
00:05:32,639 --> 00:05:34,400
something to add

136
00:05:34,400 --> 00:05:36,240
yeah i just i didn't i neglected to give

137
00:05:36,240 --> 00:05:37,600
people an opportunity to actually bash

138
00:05:37,600 --> 00:05:39,440
the agenda so does anybody want to bash

139
00:05:39,440 --> 00:05:42,000
the agenda

140
00:05:42,160 --> 00:05:44,000
not seeing anyone then yes we'll move to

141
00:05:44,000 --> 00:05:47,039
the next presentation

142
00:05:47,440 --> 00:05:52,039
yeah so the first presentation is mark

143
00:05:57,600 --> 00:06:00,160
hello uh just test me you can hear me

144
00:06:00,160 --> 00:06:02,080
and see me okay

145
00:06:02,080 --> 00:06:03,600
we can hear you and see you and you

146
00:06:03,600 --> 00:06:05,360
should have control of the slides

147
00:06:05,360 --> 00:06:07,680
perfect thanks and i guess i can get

148
00:06:07,680 --> 00:06:10,080
started

149
00:06:11,520 --> 00:06:13,840
right so hello everyone

150
00:06:13,840 --> 00:06:15,600
so in this short presentation is about

151
00:06:15,600 --> 00:06:18,240
our work on a computational analysis of

152
00:06:18,240 --> 00:06:19,759
adopt six sick

153
00:06:19,759 --> 00:06:22,240
the work was done in the context of my

154
00:06:22,240 --> 00:06:24,639
master thesis which is being supervised

155
00:06:24,639 --> 00:06:27,360
by felix gunter at zurich

156
00:06:27,360 --> 00:06:29,360
given the time restriction i will only

157
00:06:29,360 --> 00:06:31,360
focus on the most interesting part

158
00:06:31,360 --> 00:06:34,000
insights of our analysis a detailed

159
00:06:34,000 --> 00:06:36,160
write-up should be available once the

160
00:06:36,160 --> 00:06:38,960
thesis is completed in a few weeks time

161
00:06:38,960 --> 00:06:41,280
actually in a week

162
00:06:41,280 --> 00:06:43,680
um so with that said i would like to

163
00:06:43,680 --> 00:06:48,440
start by summarizing our main results

164
00:06:48,560 --> 00:06:50,160
the main takeover message from our

165
00:06:50,160 --> 00:06:52,400
analysis is that the educ is

166
00:06:52,400 --> 00:06:54,479
structurally sound and secure

167
00:06:54,479 --> 00:06:55,360
we

168
00:06:55,360 --> 00:06:58,400
targeted key secrecy we analyze explicit

169
00:06:58,400 --> 00:07:00,479
authentication and the four secrecy

170
00:07:00,479 --> 00:07:02,800
guarantees of adopt six sig

171
00:07:02,800 --> 00:07:04,880
for our security model we analyzed edoc

172
00:07:04,880 --> 00:07:06,800
in the multi-stage exchange model that i

173
00:07:06,800 --> 00:07:09,440
will briefly explain later

174
00:07:09,440 --> 00:07:12,000
so the main output of our analysis is a

175
00:07:12,000 --> 00:07:15,199
security proof for erdogan

176
00:07:15,199 --> 00:07:16,479
however

177
00:07:16,479 --> 00:07:18,800
a caveat or analysis that i should state

178
00:07:18,800 --> 00:07:20,240
is that our

179
00:07:20,240 --> 00:07:23,199
bound is not tight um however belief

180
00:07:23,199 --> 00:07:25,280
that the recent work of davis etal on

181
00:07:25,280 --> 00:07:28,479
tls 1.3 should be a good opportunity

182
00:07:28,479 --> 00:07:30,560
there to provide the better tighter

183
00:07:30,560 --> 00:07:32,560
security analysis of

184
00:07:32,560 --> 00:07:34,479
edoxing

185
00:07:34,479 --> 00:07:35,680
along the way

186
00:07:35,680 --> 00:07:37,440
in this analysis we also gained some

187
00:07:37,440 --> 00:07:39,039
insight into the market and signed

188
00:07:39,039 --> 00:07:40,639
protocol that

189
00:07:40,639 --> 00:07:42,479
we'll share as well in hope that it

190
00:07:42,479 --> 00:07:45,919
helps with potential further development

191
00:07:45,919 --> 00:07:48,639
so let me then start by explaining our

192
00:07:48,639 --> 00:07:50,000
security model

193
00:07:50,000 --> 00:07:52,160
as mentioned we analyze edoc in the

194
00:07:52,160 --> 00:07:54,639
multi-systec exchange model

195
00:07:54,639 --> 00:07:57,039
we closely follow the work of doling a

196
00:07:57,039 --> 00:08:00,240
tile on analyzing the ts 1.3 and check

197
00:08:00,240 --> 00:08:01,599
protocols

198
00:08:01,599 --> 00:08:03,599
so in the msk model we consider a key

199
00:08:03,599 --> 00:08:05,919
exchange protocol here denoted by pi

200
00:08:05,919 --> 00:08:07,199
that can be used for example to

201
00:08:07,199 --> 00:08:09,599
establish a key to communicate

202
00:08:09,599 --> 00:08:11,280
over an insecure channel

203
00:08:11,280 --> 00:08:13,440
furthermore

204
00:08:13,440 --> 00:08:16,319
users will run typically multiple

205
00:08:16,319 --> 00:08:18,319
concurrent instances of the protocol

206
00:08:18,319 --> 00:08:21,280
that we call sessions

207
00:08:22,000 --> 00:08:23,440
we additionally consider a strong

208
00:08:23,440 --> 00:08:26,000
adversary that can compromise long-term

209
00:08:26,000 --> 00:08:29,680
secrets can eavesdrop and modify

210
00:08:29,680 --> 00:08:31,360
messages arbitrarily so they have full

211
00:08:31,360 --> 00:08:33,919
control over the network

212
00:08:33,919 --> 00:08:36,559
key indispensability

213
00:08:36,559 --> 00:08:38,839
then will capture the notion of the

214
00:08:38,839 --> 00:08:41,519
secrecy of the

215
00:08:41,519 --> 00:08:42,958
session key

216
00:08:42,958 --> 00:08:46,320
since there is a question yeah

217
00:08:46,320 --> 00:08:49,040
so the goal of the adversary is given

218
00:08:49,040 --> 00:08:50,480
access to

219
00:08:50,480 --> 00:08:53,120
either a freshly generated session key

220
00:08:53,120 --> 00:08:55,680
or random one they should try and

221
00:08:55,680 --> 00:08:59,599
distinguish which they received

222
00:09:01,600 --> 00:09:04,399
a closer look at edoc shows that edoc is

223
00:09:04,399 --> 00:09:07,440
not just a protocol that derives a

224
00:09:07,440 --> 00:09:09,360
single session key but there are

225
00:09:09,360 --> 00:09:11,519
actually multiple stage keys that are

226
00:09:11,519 --> 00:09:14,480
derived throughout the protocol

227
00:09:14,480 --> 00:09:18,080
in particular four in our model

228
00:09:18,080 --> 00:09:20,160
so just the

229
00:09:20,160 --> 00:09:23,680
msk model is adapted to edoc so in

230
00:09:23,680 --> 00:09:27,440
particular multi-stage protocols um

231
00:09:27,440 --> 00:09:29,920
may introduce dependencies between stage

232
00:09:29,920 --> 00:09:32,320
keys that are potentially unwanted and

233
00:09:32,320 --> 00:09:34,399
so the sql model allows us to capture

234
00:09:34,399 --> 00:09:38,000
such issues and it also enabled

235
00:09:38,000 --> 00:09:41,760
fine-grained analysis of the stage keys

236
00:09:41,760 --> 00:09:46,080
thereby giving an overall security proof

237
00:09:48,880 --> 00:09:50,160
explicit authentication was of

238
00:09:50,160 --> 00:09:53,120
particular interest in our analysis um

239
00:09:53,120 --> 00:09:54,880
and this will be the the subject of the

240
00:09:54,880 --> 00:09:56,959
reminder of my of my talk very

241
00:09:56,959 --> 00:09:58,080
informally

242
00:09:58,080 --> 00:09:59,760
explicit authentication captures the

243
00:09:59,760 --> 00:10:00,959
fact that

244
00:10:00,959 --> 00:10:03,519
for authenticated stages only

245
00:10:03,519 --> 00:10:06,399
the peers knows about the stage keys and

246
00:10:06,399 --> 00:10:07,839
they also demonstrated actively

247
00:10:07,839 --> 00:10:10,959
knowledge of that key

248
00:10:10,959 --> 00:10:12,959
however in edoc we particularly looked

249
00:10:12,959 --> 00:10:15,200
at the specification for

250
00:10:15,200 --> 00:10:16,880
credential identifiers and the

251
00:10:16,880 --> 00:10:19,120
possibility that they may be non-unique

252
00:10:19,120 --> 00:10:21,200
there is sort of an ongoing discussion

253
00:10:21,200 --> 00:10:22,640
going about this

254
00:10:22,640 --> 00:10:25,600
and what we did is that we took a very

255
00:10:25,600 --> 00:10:27,200
conservative approach and we modeled

256
00:10:27,200 --> 00:10:30,079
this aspect by assuming that all

257
00:10:30,079 --> 00:10:32,880
identity i don't um all credential

258
00:10:32,880 --> 00:10:35,519
identifier may be non-unique

259
00:10:35,519 --> 00:10:37,360
and furthermore in our model we actually

260
00:10:37,360 --> 00:10:39,760
allow the adversary to choose these

261
00:10:39,760 --> 00:10:42,240
these identifiers arbitrarily

262
00:10:42,240 --> 00:10:44,560
in order to essentially see what sort of

263
00:10:44,560 --> 00:10:45,920
security guarantees we can have in

264
00:10:45,920 --> 00:10:48,319
addock

265
00:10:48,399 --> 00:10:50,800
so with non-unique

266
00:10:50,800 --> 00:10:52,399
identical

267
00:10:52,399 --> 00:10:54,880
credentials identifier i'm sorry

268
00:10:54,880 --> 00:10:56,480
so at glance

269
00:10:56,480 --> 00:10:59,040
it seems like a receiver of a message

270
00:10:59,040 --> 00:11:00,640
for example here in shetty would have to

271
00:11:00,640 --> 00:11:03,120
verify multiple public keys related to

272
00:11:03,120 --> 00:11:04,880
the same

273
00:11:04,880 --> 00:11:07,440
identifier in order to then validate the

274
00:11:07,440 --> 00:11:08,959
identity of the pier

275
00:11:08,959 --> 00:11:10,720
so in the scenario that i'm depicting

276
00:11:10,720 --> 00:11:12,160
here

277
00:11:12,160 --> 00:11:14,560
we see that we could have an adversary

278
00:11:14,560 --> 00:11:16,160
who would

279
00:11:16,160 --> 00:11:18,000
intercept the second message and then

280
00:11:18,000 --> 00:11:19,839
what they would do in our model is that

281
00:11:19,839 --> 00:11:23,440
they can then register a new user

282
00:11:23,440 --> 00:11:25,760
with a public key that is associated to

283
00:11:25,760 --> 00:11:27,120
the same

284
00:11:27,120 --> 00:11:28,800
id cred

285
00:11:28,800 --> 00:11:31,200
and this key pair is specially generated

286
00:11:31,200 --> 00:11:33,760
in a way that for every

287
00:11:33,760 --> 00:11:35,839
message and signature this

288
00:11:35,839 --> 00:11:38,320
public key always verifies and the

289
00:11:38,320 --> 00:11:40,800
consequence of this is that

290
00:11:40,800 --> 00:11:43,519
this protocol as depicted here at least

291
00:11:43,519 --> 00:11:45,839
this sort of simplified version of edoc

292
00:11:45,839 --> 00:11:47,600
will run through

293
00:11:47,600 --> 00:11:48,480
um

294
00:11:48,480 --> 00:11:49,600
and

295
00:11:49,600 --> 00:11:51,600
the protocol will not stop and i will

296
00:11:51,600 --> 00:11:55,880
explain a bit later why

297
00:11:56,320 --> 00:11:58,320
so here we're saying that

298
00:11:58,320 --> 00:12:00,480
again i've sort of simplified edit by

299
00:12:00,480 --> 00:12:03,440
showing that in the second message the

300
00:12:03,440 --> 00:12:04,800
receiver

301
00:12:04,800 --> 00:12:07,360
the responder would send sort of a key

302
00:12:07,360 --> 00:12:09,279
identifier a signature and then some

303
00:12:09,279 --> 00:12:10,880
message obviously the message is not

304
00:12:10,880 --> 00:12:13,120
really sent in edok as we know

305
00:12:13,120 --> 00:12:16,720
um only sort of partially and uh

306
00:12:16,720 --> 00:12:18,399
interesting observation is as well

307
00:12:18,399 --> 00:12:20,000
that's

308
00:12:20,000 --> 00:12:22,000
the message that the the actual

309
00:12:22,000 --> 00:12:23,680
responder sends is always different than

310
00:12:23,680 --> 00:12:26,720
the one that will be verified for the

311
00:12:26,720 --> 00:12:28,480
malicious key this is because the

312
00:12:28,480 --> 00:12:30,000
credentials are

313
00:12:30,000 --> 00:12:33,360
signed if you recall the

314
00:12:33,360 --> 00:12:35,760
run of edoc the credentials are signed

315
00:12:35,760 --> 00:12:39,200
therefore the message always different

316
00:12:39,200 --> 00:12:42,560
so the natural question then here was

317
00:12:42,560 --> 00:12:43,440
what

318
00:12:43,440 --> 00:12:46,480
type of security guarantees do we need

319
00:12:46,480 --> 00:12:48,720
from the signatures well we realized

320
00:12:48,720 --> 00:12:51,360
that in fact we need more than the

321
00:12:51,360 --> 00:12:53,680
normal unforgeability that is usually

322
00:12:53,680 --> 00:12:58,720
sort of the minimal required guarantees

323
00:12:58,720 --> 00:13:00,639
in the previous attack actually the

324
00:13:00,639 --> 00:13:02,720
transcript hashes as you've seen the

325
00:13:02,720 --> 00:13:04,560
adversary never changes the

326
00:13:04,560 --> 00:13:06,079
communication transcript so the

327
00:13:06,079 --> 00:13:08,560
transcript ashes nor the keys

328
00:13:08,560 --> 00:13:11,040
will are modified therefore the protocol

329
00:13:11,040 --> 00:13:13,760
runs through

330
00:13:13,760 --> 00:13:15,760
without error

331
00:13:15,760 --> 00:13:17,760
so this inside the fact that we need

332
00:13:17,760 --> 00:13:19,440
besides

333
00:13:19,440 --> 00:13:21,360
forgivability we need a notion of

334
00:13:21,360 --> 00:13:23,920
exclusive ownership of signatures

335
00:13:23,920 --> 00:13:25,760
and in particular because as we said the

336
00:13:25,760 --> 00:13:28,480
messages are different for different

337
00:13:28,480 --> 00:13:31,200
users who are authenticating themselves

338
00:13:31,200 --> 00:13:32,560
we need

339
00:13:32,560 --> 00:13:35,040
the minimal required security guarantee

340
00:13:35,040 --> 00:13:39,199
would be destructive exclusive ownership

341
00:13:39,920 --> 00:13:42,560
interestingly the macdon sign

342
00:13:42,560 --> 00:13:44,399
protocol would also be vulnerable to a

343
00:13:44,399 --> 00:13:46,320
similar attack if the signature scheme

344
00:13:46,320 --> 00:13:48,160
would contain

345
00:13:48,160 --> 00:13:50,160
weak keys

346
00:13:50,160 --> 00:13:52,480
and additionally we also saw that

347
00:13:52,480 --> 00:13:55,360
the ambiguous and ambiguous nature of

348
00:13:55,360 --> 00:13:57,680
sebor and when it's encoded also

349
00:13:57,680 --> 00:13:59,360
prevented some issues that would for

350
00:13:59,360 --> 00:14:02,880
example come from concatenating but by

351
00:14:02,880 --> 00:14:06,000
strings as is done in the computation of

352
00:14:06,000 --> 00:14:06,180
the

353
00:14:06,180 --> 00:14:07,279
[Music]

354
00:14:07,279 --> 00:14:10,480
mach 2 for it for instance

355
00:14:10,480 --> 00:14:13,519
so fortunately um we could show that the

356
00:14:13,519 --> 00:14:16,240
signature scheme in adult six sig

357
00:14:16,240 --> 00:14:18,160
provider required exclusive ownership

358
00:14:18,160 --> 00:14:19,440
guarantees

359
00:14:19,440 --> 00:14:20,800
so in particular

360
00:14:20,800 --> 00:14:23,760
edwards 25519 is known to provide

361
00:14:23,760 --> 00:14:26,000
universal exclusive ownership

362
00:14:26,000 --> 00:14:28,320
for scdsa it's not really the case

363
00:14:28,320 --> 00:14:30,560
however the fact that

364
00:14:30,560 --> 00:14:32,720
the public key is also signed

365
00:14:32,720 --> 00:14:35,519
um is enough to provide the security

366
00:14:35,519 --> 00:14:37,120
guarantees that we need

367
00:14:37,120 --> 00:14:39,120
namely exclusive ownership

368
00:14:39,120 --> 00:14:41,839
um however this requires that there are

369
00:14:41,839 --> 00:14:43,920
no weak keys and also inside the fact

370
00:14:43,920 --> 00:14:46,480
that the implementation must

371
00:14:46,480 --> 00:14:47,360
be

372
00:14:47,360 --> 00:14:48,240
must

373
00:14:48,240 --> 00:14:51,199
perform all the checks um

374
00:14:51,199 --> 00:14:52,800
as we've seen it's not always the case

375
00:14:52,800 --> 00:14:54,480
with the recent

376
00:14:54,480 --> 00:14:56,959
cv for example on such psychic

377
00:14:56,959 --> 00:14:58,639
signatures

378
00:14:58,639 --> 00:15:01,440
and beside exclusive ownership our proof

379
00:15:01,440 --> 00:15:04,079
um we also required strong

380
00:15:04,079 --> 00:15:06,000
enforceability instead of just the

381
00:15:06,000 --> 00:15:07,440
existential unforgivability of

382
00:15:07,440 --> 00:15:08,800
signatures

383
00:15:08,800 --> 00:15:12,480
this is because in contrast to tls 103

384
00:15:12,480 --> 00:15:15,279
uh the magnet sign um

385
00:15:15,279 --> 00:15:17,519
the mac is under the signature and not

386
00:15:17,519 --> 00:15:19,040
it's not the other way around where the

387
00:15:19,040 --> 00:15:22,240
mac also covers the the signatures

388
00:15:22,240 --> 00:15:26,880
without that the consequence is that

389
00:15:26,880 --> 00:15:28,800
an initiator for example would accept a

390
00:15:28,800 --> 00:15:31,440
second message even if it was modified

391
00:15:31,440 --> 00:15:33,440
by sgfcm attack

392
00:15:33,440 --> 00:15:35,199
the consequences here are probably not

393
00:15:35,199 --> 00:15:37,680
interesting it's not clear what

394
00:15:37,680 --> 00:15:40,800
practical issue will happen here but

395
00:15:40,800 --> 00:15:43,759
it's it's it's good to be aware of this

396
00:15:43,759 --> 00:15:44,639
and

397
00:15:44,639 --> 00:15:47,040
as for the signature schemes well for

398
00:15:47,040 --> 00:15:48,880
edward 2019

399
00:15:48,880 --> 00:15:51,600
um while this is not to provide um it's

400
00:15:51,600 --> 00:15:53,920
not to be it is known to be src may

401
00:15:53,920 --> 00:15:56,560
secure obviously it has to be the itf1

402
00:15:56,560 --> 00:15:58,920
as it's been shown that the original

403
00:15:58,920 --> 00:16:01,759
air2519 is actually not uh as you have

404
00:16:01,759 --> 00:16:04,639
cma secure and for ecdsa again there are

405
00:16:04,639 --> 00:16:06,880
ways to modify the signatures

406
00:16:06,880 --> 00:16:11,040
um in a way that breaks your cma

407
00:16:11,040 --> 00:16:13,279
so to this effect we um

408
00:16:13,279 --> 00:16:15,120
we suggested two modifications to

409
00:16:15,120 --> 00:16:17,279
strengthen exclusive authentication

410
00:16:17,279 --> 00:16:20,320
although we could already prove it

411
00:16:20,320 --> 00:16:22,480
namely this is to add the credentials to

412
00:16:22,480 --> 00:16:24,639
the transcript hashes as as

413
00:16:24,639 --> 00:16:25,920
shown there

414
00:16:25,920 --> 00:16:29,360
uh the benefit is that an attempt to

415
00:16:29,360 --> 00:16:31,279
identify spinning attack as i've shown

416
00:16:31,279 --> 00:16:34,240
before will lead to diverging transcript

417
00:16:34,240 --> 00:16:36,720
hashes which then sort of stops the

418
00:16:36,720 --> 00:16:39,839
protocol and leads to a termination

419
00:16:39,839 --> 00:16:42,800
of course assuming with some collision

420
00:16:42,800 --> 00:16:44,560
resistance assumption on the hash

421
00:16:44,560 --> 00:16:46,880
function

422
00:16:48,000 --> 00:16:49,600
so with all that being said how many

423
00:16:49,600 --> 00:16:52,079
theorem is essentially an upper bound uh

424
00:16:52,079 --> 00:16:54,880
on the advantage of an msk adversary so

425
00:16:54,880 --> 00:16:57,600
the msk being the security model again i

426
00:16:57,600 --> 00:17:00,560
can't really go home

427
00:17:00,560 --> 00:17:03,920
into the details now um but essentially

428
00:17:03,920 --> 00:17:05,599
what it shows is that we can reduce the

429
00:17:05,599 --> 00:17:07,839
security of edox 66 to its main

430
00:17:07,839 --> 00:17:09,359
components

431
00:17:09,359 --> 00:17:11,280
namely uh collision resistance hash

432
00:17:11,280 --> 00:17:14,640
function um strongly unforgeable um

433
00:17:14,640 --> 00:17:16,640
signature scheme that also provides

434
00:17:16,640 --> 00:17:18,480
exclusive ownership

435
00:17:18,480 --> 00:17:19,599
a prf

436
00:17:19,599 --> 00:17:22,319
function which is the expand on the prf

437
00:17:22,319 --> 00:17:24,640
assumption on the expand function and

438
00:17:24,640 --> 00:17:28,000
the prf odh assumption on the extract

439
00:17:28,000 --> 00:17:30,400
function

440
00:17:31,120 --> 00:17:33,120
finally let me briefly evaluate some of

441
00:17:33,120 --> 00:17:34,559
the

442
00:17:34,559 --> 00:17:36,960
past suggestion that we propose to sort

443
00:17:36,960 --> 00:17:39,440
of improve the protocol

444
00:17:39,440 --> 00:17:41,440
the first one is having an explicit

445
00:17:41,440 --> 00:17:44,160
session key um this obviously made

446
00:17:44,160 --> 00:17:45,039
really

447
00:17:45,039 --> 00:17:47,280
easy to prove security and to have sort

448
00:17:47,280 --> 00:17:48,360
of a clean

449
00:17:48,360 --> 00:17:50,559
indistinguishability proof

450
00:17:50,559 --> 00:17:51,280
and

451
00:17:51,280 --> 00:17:54,880
so by that i mean secrecy proof for the

452
00:17:54,880 --> 00:17:57,360
prk out which is now the sort of final

453
00:17:57,360 --> 00:17:58,720
session key

454
00:17:58,720 --> 00:17:59,679
and

455
00:17:59,679 --> 00:18:01,760
computing transcript hashes over the

456
00:18:01,760 --> 00:18:04,640
plain text was our second suggestion and

457
00:18:04,640 --> 00:18:06,480
that also simplified our proof in the

458
00:18:06,480 --> 00:18:08,960
sense that we did not rely on some

459
00:18:08,960 --> 00:18:10,880
potentially non-standard

460
00:18:10,880 --> 00:18:14,960
assumption on the encryption schemes

461
00:18:14,960 --> 00:18:17,200
so with that i conclude my talk thank

462
00:18:17,200 --> 00:18:19,200
you very much for your attention and i'm

463
00:18:19,200 --> 00:18:22,799
really happy to take any questions

464
00:18:24,400 --> 00:18:26,400
great and thanks for all the work uh i

465
00:18:26,400 --> 00:18:28,400
think we have john on the left yeah john

466
00:18:28,400 --> 00:18:31,440
here thanks for all this work you really

467
00:18:31,440 --> 00:18:34,400
really great the the pre yes pointing

468
00:18:34,400 --> 00:18:36,000
out the previous recommendations have

469
00:18:36,000 --> 00:18:38,240
been included in the latest

470
00:18:38,240 --> 00:18:39,360
version

471
00:18:39,360 --> 00:18:40,640
for the

472
00:18:40,640 --> 00:18:44,000
update of three and th four there is

473
00:18:44,000 --> 00:18:45,520
already and

474
00:18:45,520 --> 00:18:48,640
pr there's also ongoing discussion

475
00:18:48,640 --> 00:18:49,840
between

476
00:18:49,840 --> 00:18:51,360
different

477
00:18:51,360 --> 00:18:54,640
teams here in the issue right

478
00:18:54,640 --> 00:18:57,120
now but it seems like a very

479
00:18:57,120 --> 00:18:59,280
it's a very simple

480
00:18:59,280 --> 00:19:01,360
change but please

481
00:19:01,360 --> 00:19:02,559
look into the

482
00:19:02,559 --> 00:19:05,760
issue and the pr

483
00:19:07,280 --> 00:19:08,480
thank you

484
00:19:08,480 --> 00:19:10,799
thank you

485
00:19:10,799 --> 00:19:12,320
okay i don't see anyone else in the

486
00:19:12,320 --> 00:19:13,840
queue

487
00:19:13,840 --> 00:19:15,360
so thanks mark again for for the work

488
00:19:15,360 --> 00:19:18,240
it's really valuable um and

489
00:19:18,240 --> 00:19:20,799
keep doing more of it

490
00:19:20,799 --> 00:19:21,600
okay

491
00:19:21,600 --> 00:19:25,840
so with that we'll switch presenter

492
00:19:36,160 --> 00:19:38,559
and baptiste if you could

493
00:19:38,559 --> 00:19:41,120
jump on

494
00:19:42,400 --> 00:19:43,679
you should have control of the slides

495
00:19:43,679 --> 00:19:45,600
now

496
00:19:45,600 --> 00:19:48,160
hi everybody

497
00:19:48,160 --> 00:19:52,039
great thank you go ahead

498
00:19:57,520 --> 00:19:59,280
yes we hear you about this you can go

499
00:19:59,280 --> 00:20:01,280
the floor is yours

500
00:20:01,280 --> 00:20:02,400
okay thanks

501
00:20:02,400 --> 00:20:05,799
so um

502
00:20:11,520 --> 00:20:13,280
sorry baptiste the audio

503
00:20:13,280 --> 00:20:14,320
is a little bit low i don't know if you

504
00:20:14,320 --> 00:20:17,039
could be closer to the microphone or

505
00:20:17,039 --> 00:20:20,039
oh

506
00:20:22,320 --> 00:20:25,320
sorry

507
00:20:43,840 --> 00:20:47,199
is it better no oh

508
00:20:47,360 --> 00:20:48,640
no

509
00:20:48,640 --> 00:20:50,400
so yeah keep speaking and we'll let you

510
00:20:50,400 --> 00:20:53,120
know when it works

511
00:20:53,840 --> 00:20:55,200
it's better

512
00:20:55,200 --> 00:20:57,520
right

513
00:20:59,280 --> 00:21:00,320
okay

514
00:21:00,320 --> 00:21:02,080
so thank you all

515
00:21:02,080 --> 00:21:04,960
on the computational analysis of the ad

516
00:21:04,960 --> 00:21:08,240
doc protocol in the stat stat

517
00:21:08,240 --> 00:21:09,440
method

518
00:21:09,440 --> 00:21:10,240
so

519
00:21:10,240 --> 00:21:12,960
first represent some equations

520
00:21:12,960 --> 00:21:14,799
we made some

521
00:21:14,799 --> 00:21:16,559
notations so

522
00:21:16,559 --> 00:21:19,039
pi a single pi will be the one time

523
00:21:19,039 --> 00:21:21,120
encryption scheme

524
00:21:21,120 --> 00:21:22,400
while the

525
00:21:22,400 --> 00:21:25,039
pi prime will be an

526
00:21:25,039 --> 00:21:28,400
authenticated encryption scheme

527
00:21:28,400 --> 00:21:31,679
the a will be not an adversary and g is

528
00:21:31,679 --> 00:21:35,280
a secret group of order p

529
00:21:35,280 --> 00:21:39,039
we choose to denote ski the key denoted

530
00:21:39,039 --> 00:21:42,240
ki in the specification and x

531
00:21:42,240 --> 00:21:45,440
s is the initiative we can keep the

532
00:21:45,440 --> 00:21:50,080
energy the i in the specification

533
00:21:50,320 --> 00:21:53,120
so the first basis we use is the

534
00:21:53,120 --> 00:21:56,799
compositional defiant so uh given g

535
00:21:56,799 --> 00:21:59,050
to the u and g to the v it

536
00:21:59,050 --> 00:22:00,400
[Music]

537
00:22:00,400 --> 00:22:02,400
you the

538
00:22:02,400 --> 00:22:06,000
an adversary has to compute g to do

539
00:22:06,000 --> 00:22:08,720
g to the e v

540
00:22:08,720 --> 00:22:09,840
and

541
00:22:09,840 --> 00:22:12,000
the advantage of the adversary is

542
00:22:12,000 --> 00:22:14,640
denoted as

543
00:22:14,640 --> 00:22:17,280
on the slide

544
00:22:17,440 --> 00:22:19,520
we also use the gap edition

545
00:22:19,520 --> 00:22:23,600
assumption so that is the cdh assumption

546
00:22:23,600 --> 00:22:25,679
we have an access to

547
00:22:25,679 --> 00:22:28,880
film an oracle so that is an oracle can

548
00:22:28,880 --> 00:22:31,840
unlike an anterior if

549
00:22:31,840 --> 00:22:36,080
if a triple is a different triple

550
00:22:37,360 --> 00:22:40,240
and the best attack known on this

551
00:22:40,240 --> 00:22:42,799
on this assumption is the baby step

552
00:22:42,799 --> 00:22:45,600
doesn't step attack that run in the

553
00:22:45,600 --> 00:22:48,880
square root of b where p is the

554
00:22:48,880 --> 00:22:52,320
the size of the group g

555
00:22:53,039 --> 00:22:55,200
the hypothesis for the symmetry

556
00:22:55,200 --> 00:22:56,559
encryption

557
00:22:56,559 --> 00:22:59,360
so we have the injectivity so

558
00:22:59,360 --> 00:23:02,799
for any key in the space of keys

559
00:23:02,799 --> 00:23:05,440
two encryption of different message with

560
00:23:05,440 --> 00:23:08,240
the same keys will result in if you have

561
00:23:08,240 --> 00:23:11,679
an equality in two encryption

562
00:23:11,679 --> 00:23:13,760
of two messages with the same key it

563
00:23:13,760 --> 00:23:17,600
means the message are equals

564
00:23:17,600 --> 00:23:20,080
also we have in the one time the

565
00:23:20,080 --> 00:23:24,720
undiscussibility so for an adversary

566
00:23:24,720 --> 00:23:28,080
given an extrusion of m0 and an

567
00:23:28,080 --> 00:23:30,080
encryption of m1

568
00:23:30,080 --> 00:23:32,400
it can say

569
00:23:32,400 --> 00:23:35,600
with a consequent advantage which one is

570
00:23:35,600 --> 00:23:38,480
an encryption of m0 and which one is the

571
00:23:38,480 --> 00:23:41,919
inclusion of m1

572
00:23:43,120 --> 00:23:44,960
know the hypothesis about the

573
00:23:44,960 --> 00:23:47,279
authenticated encryption

574
00:23:47,279 --> 00:23:49,120
so for the industry and

575
00:23:49,120 --> 00:23:51,039
distinguishability

576
00:23:51,039 --> 00:23:53,600
we do the same as previous with an

577
00:23:53,600 --> 00:23:56,080
access to an encryption in decryption

578
00:23:56,080 --> 00:23:57,279
oracle

579
00:23:57,279 --> 00:23:59,520
so here again the adversary has to

580
00:23:59,520 --> 00:24:02,960
distinguish between an encryption of m0

581
00:24:02,960 --> 00:24:05,360
and an encryption of f1

582
00:24:05,360 --> 00:24:06,640
but you can

583
00:24:06,640 --> 00:24:08,400
ask do you recall

584
00:24:08,400 --> 00:24:11,200
can you entry and decrypt these messages

585
00:24:11,200 --> 00:24:13,840
so and the advantage is

586
00:24:13,840 --> 00:24:16,559
denoted as advantage

587
00:24:16,559 --> 00:24:18,000
in the in

588
00:24:18,000 --> 00:24:21,360
in distinguishability of p pi

589
00:24:21,360 --> 00:24:23,600
in a polynomial

590
00:24:23,600 --> 00:24:26,320
time a t

591
00:24:28,000 --> 00:24:30,799
we also have the invaluability of the

592
00:24:30,799 --> 00:24:34,400
auto ticket authenticated encryption

593
00:24:34,400 --> 00:24:38,000
so here again the baby has an access to

594
00:24:38,000 --> 00:24:38,799
the

595
00:24:38,799 --> 00:24:41,279
encryption and decryption records

596
00:24:41,279 --> 00:24:43,919
you have to generate a valid cipher text

597
00:24:43,919 --> 00:24:44,960
and

598
00:24:44,960 --> 00:24:47,440
the advantage is

599
00:24:47,440 --> 00:24:49,120
denoted

600
00:24:49,120 --> 00:24:50,400
as the

601
00:24:50,400 --> 00:24:54,799
as the capacity to for the srv to afford

602
00:24:54,799 --> 00:24:57,360
to further well it's a text with

603
00:24:57,360 --> 00:25:00,678
chosen messages

604
00:25:02,000 --> 00:25:04,640
so her results so

605
00:25:04,640 --> 00:25:08,640
we use a queue arrow to the number of

606
00:25:08,640 --> 00:25:10,960
queries to the random records

607
00:25:10,960 --> 00:25:14,000
and sigma to denote the number of

608
00:25:14,000 --> 00:25:15,840
running sessions

609
00:25:15,840 --> 00:25:19,840
uh capital n the number of users

610
00:25:19,840 --> 00:25:23,520
and ash is the length of the hd and lmac

611
00:25:23,520 --> 00:25:27,120
is the mac digest length

612
00:25:27,279 --> 00:25:30,320
so for the carry the key privacy

613
00:25:30,320 --> 00:25:32,080
we have this

614
00:25:32,080 --> 00:25:34,559
disadvantage so

615
00:25:34,559 --> 00:25:35,600
that

616
00:25:35,600 --> 00:25:39,039
that leads to around 128

617
00:25:39,039 --> 00:25:41,279
bit security

618
00:25:41,279 --> 00:25:43,360
so the best attack is

619
00:25:43,360 --> 00:25:46,559
in one hand the baby steps in step

620
00:25:46,559 --> 00:25:47,600
to

621
00:25:47,600 --> 00:25:51,600
try to break a gdh assumption

622
00:25:51,600 --> 00:25:52,720
and

623
00:25:52,720 --> 00:25:55,679
together with the birthday paradox to

624
00:25:55,679 --> 00:25:58,400
try to find a

625
00:25:58,400 --> 00:26:00,640
session key or

626
00:26:00,640 --> 00:26:02,960
an intermediary

627
00:26:02,960 --> 00:26:03,919
so

628
00:26:03,919 --> 00:26:05,440
we have the

629
00:26:05,440 --> 00:26:08,880
square root of b for the baby step

630
00:26:08,880 --> 00:26:09,679
and

631
00:26:09,679 --> 00:26:12,480
2 to the lh

632
00:26:12,480 --> 00:26:16,880
divided by 2 for the birthday paradox

633
00:26:17,600 --> 00:26:19,360
for the explicit

634
00:26:19,360 --> 00:26:22,480
authentic responder

635
00:26:22,480 --> 00:26:25,200
we have the

636
00:26:25,200 --> 00:26:26,960
the terrain 2

637
00:26:26,960 --> 00:26:28,190
that gives

638
00:26:28,190 --> 00:26:29,360
[Music]

639
00:26:29,360 --> 00:26:32,240
a security of 64

640
00:26:32,240 --> 00:26:35,039
around 64 bits

641
00:26:35,039 --> 00:26:37,440
because the best attack is simply to

642
00:26:37,440 --> 00:26:40,240
guess the tag t2 so

643
00:26:40,240 --> 00:26:42,640
the tag

644
00:26:42,640 --> 00:26:45,760
when you are in a cipher suit

645
00:26:45,760 --> 00:26:48,000
0 and 2

646
00:26:48,000 --> 00:26:51,279
the tag t2 is 64 bit length and in this

647
00:26:51,279 --> 00:26:55,679
case the security is 64 bits

648
00:26:57,120 --> 00:26:59,520
this is

649
00:26:59,600 --> 00:27:03,120
the similar for the initiator explicit

650
00:27:03,120 --> 00:27:05,039
authentication

651
00:27:05,039 --> 00:27:06,400
so

652
00:27:06,400 --> 00:27:07,760
however you

653
00:27:07,760 --> 00:27:10,640
even if the initiator use an

654
00:27:10,640 --> 00:27:13,440
authenticated encryption

655
00:27:13,440 --> 00:27:16,880
this this has no impact on the

656
00:27:16,880 --> 00:27:18,480
on the security

657
00:27:18,480 --> 00:27:20,080
as

658
00:27:20,080 --> 00:27:23,360
this is the it is encrypted using the

659
00:27:23,360 --> 00:27:28,640
key sk3 that any imposter can compute so

660
00:27:28,640 --> 00:27:30,000
that

661
00:27:30,000 --> 00:27:32,960
that does not give any uh security for

662
00:27:32,960 --> 00:27:37,200
the authentication initiator

663
00:27:38,320 --> 00:27:40,320
for the identity protection of the

664
00:27:40,320 --> 00:27:42,480
responder

665
00:27:42,480 --> 00:27:44,960
so here we have

666
00:27:44,960 --> 00:27:46,840
similarly at the key

667
00:27:46,840 --> 00:27:48,559
privacy

668
00:27:48,559 --> 00:27:52,399
security of 128 bits

669
00:27:52,399 --> 00:27:54,559
with the same attacks

670
00:27:54,559 --> 00:27:55,679
and

671
00:27:55,679 --> 00:27:58,399
similarly for the identity

672
00:27:58,399 --> 00:28:00,880
of the initiator

673
00:28:00,880 --> 00:28:03,600
so in the summary so

674
00:28:03,600 --> 00:28:06,399
if you consider the cypher suits 0 and

675
00:28:06,399 --> 00:28:07,520
2.

676
00:28:07,520 --> 00:28:11,840
we use a tag mac tag of length 64 bits

677
00:28:11,840 --> 00:28:13,360
and

678
00:28:13,360 --> 00:28:16,640
we have a key privacy security of 128

679
00:28:16,640 --> 00:28:17,679
bits

680
00:28:17,679 --> 00:28:19,919
and another protection for both the

681
00:28:19,919 --> 00:28:22,200
initiator and the responder of

682
00:28:22,200 --> 00:28:24,480
128 bits

683
00:28:24,480 --> 00:28:27,919
and for the authentication we have a

684
00:28:27,919 --> 00:28:31,760
64-bit security each

685
00:28:31,760 --> 00:28:34,480
so and uh

686
00:28:34,480 --> 00:28:36,720
in the protocol as a defined protocol we

687
00:28:36,720 --> 00:28:38,000
make the use

688
00:28:38,000 --> 00:28:40,960
of the authenticated encryption

689
00:28:40,960 --> 00:28:43,120
but that's used

690
00:28:43,120 --> 00:28:45,679
in the point of view of the security as

691
00:28:45,679 --> 00:28:47,440
sk the key

692
00:28:47,440 --> 00:28:50,799
sk3 is independent of xs

693
00:28:50,799 --> 00:28:51,679
and

694
00:28:51,679 --> 00:28:53,520
any investor can

695
00:28:53,520 --> 00:28:56,080
compute it

696
00:28:56,080 --> 00:28:58,399
so

697
00:28:58,399 --> 00:29:00,399
we made some we suggest some

698
00:29:00,399 --> 00:29:02,720
improvements

699
00:29:02,720 --> 00:29:06,080
so the first one is in the case

700
00:29:06,080 --> 00:29:07,559
the mac is

701
00:29:07,559 --> 00:29:10,159
128 bits

702
00:29:10,159 --> 00:29:15,120
so as sk3 is independent of xs

703
00:29:15,120 --> 00:29:18,039
and uh as the mac is

704
00:29:18,039 --> 00:29:21,000
128 bit length we have

705
00:29:21,000 --> 00:29:23,200
128bpt for

706
00:29:23,200 --> 00:29:24,840
the

707
00:29:24,840 --> 00:29:27,279
authentication so it's simply the idea

708
00:29:27,279 --> 00:29:31,039
to replace the authenticated encryption

709
00:29:31,039 --> 00:29:32,880
with

710
00:29:32,880 --> 00:29:36,399
one type encryption as there is no

711
00:29:36,399 --> 00:29:38,080
impact on

712
00:29:38,080 --> 00:29:39,360
security

713
00:29:39,360 --> 00:29:41,440
we have the same security for the key

714
00:29:41,440 --> 00:29:43,520
privacy the material authentication and

715
00:29:43,520 --> 00:29:44,320
the

716
00:29:44,320 --> 00:29:46,080
protection

717
00:29:46,080 --> 00:29:49,520
and we have another

718
00:29:50,399 --> 00:29:53,200
we have a shorter messenger tree because

719
00:29:53,200 --> 00:29:54,399
as

720
00:29:54,399 --> 00:29:56,880
when encrypting with authenticated

721
00:29:56,880 --> 00:29:59,679
encryption this is a block cipher

722
00:29:59,679 --> 00:30:02,000
while when we use the one type pad this

723
00:30:02,000 --> 00:30:04,559
is a stream cipher so

724
00:30:04,559 --> 00:30:06,559
the cipher text is

725
00:30:06,559 --> 00:30:09,039
the same have the same size as the plain

726
00:30:09,039 --> 00:30:09,919
text

727
00:30:09,919 --> 00:30:13,840
so we have the same security

728
00:30:13,840 --> 00:30:18,399
the same security for a smaller message

729
00:30:18,720 --> 00:30:24,240
for the case of the mac are 64 bits

730
00:30:24,240 --> 00:30:25,440
length

731
00:30:25,440 --> 00:30:28,880
this is different so

732
00:30:28,880 --> 00:30:31,600
we will use the

733
00:30:31,600 --> 00:30:35,200
detected authenticated encryption to

734
00:30:35,200 --> 00:30:37,600
to have a better better

735
00:30:37,600 --> 00:30:40,080
initiator authentication

736
00:30:40,080 --> 00:30:42,640
so yeah

737
00:30:42,640 --> 00:30:45,919
was first to compute the

738
00:30:45,919 --> 00:30:47,440
sk3

739
00:30:47,440 --> 00:30:50,399
depending of xs

740
00:30:50,399 --> 00:30:53,919
but doing so the responder not compute

741
00:30:53,919 --> 00:30:57,760
the key as to the key init defamation

742
00:30:57,760 --> 00:31:01,200
ide that is sent in the message

743
00:31:01,200 --> 00:31:05,519
so the solution was to compute two

744
00:31:05,519 --> 00:31:07,840
encryption so the first encryption with

745
00:31:07,840 --> 00:31:10,880
the key is key sk3

746
00:31:10,880 --> 00:31:13,919
that will encrypt ide and

747
00:31:13,919 --> 00:31:15,440
external data

748
00:31:15,440 --> 00:31:18,399
with the symmetric key once the

749
00:31:18,399 --> 00:31:21,360
responder decrypt this message he has

750
00:31:21,360 --> 00:31:22,480
the

751
00:31:22,480 --> 00:31:25,360
information to compute the key the key

752
00:31:25,360 --> 00:31:28,559
before that depends of xs

753
00:31:28,559 --> 00:31:30,840
and in the message the

754
00:31:30,840 --> 00:31:32,399
initiator

755
00:31:32,399 --> 00:31:36,240
an authenticated encryption of s of

756
00:31:36,240 --> 00:31:39,760
t3 with the key is key 4

757
00:31:39,760 --> 00:31:40,559
and

758
00:31:40,559 --> 00:31:43,519
agent vector 4.

759
00:31:43,519 --> 00:31:45,120
and

760
00:31:45,120 --> 00:31:47,840
using these

761
00:31:47,840 --> 00:31:50,320
the initiator authentication

762
00:31:50,320 --> 00:31:54,640
reaches security of 128 bits as we have

763
00:31:54,640 --> 00:31:59,279
64 bits from the tag t3

764
00:31:59,279 --> 00:32:01,840
and now we have 64 bits

765
00:32:01,840 --> 00:32:02,960
from the

766
00:32:02,960 --> 00:32:06,000
authentic authenticated encryption

767
00:32:06,000 --> 00:32:07,440
so

768
00:32:07,440 --> 00:32:08,480
before

769
00:32:08,480 --> 00:32:11,840
trying to fold a tag the adversary will

770
00:32:11,840 --> 00:32:15,600
have to forge the valid surface text

771
00:32:15,600 --> 00:32:17,840
and so the security

772
00:32:17,840 --> 00:32:20,000
are multiplied and we have a security

773
00:32:20,000 --> 00:32:22,640
that is around 128

774
00:32:22,640 --> 00:32:24,320
bits

775
00:32:24,320 --> 00:32:26,399
and about the length of the message

776
00:32:26,399 --> 00:32:28,880
three it depends on

777
00:32:28,880 --> 00:32:32,399
the length of the plain text

778
00:32:32,399 --> 00:32:36,080
3a so ide and e3

779
00:32:36,080 --> 00:32:38,799
because if this message

780
00:32:38,799 --> 00:32:43,440
is smaller than 64 bits modulo 128 we

781
00:32:43,440 --> 00:32:45,120
have a longer message

782
00:32:45,120 --> 00:32:47,519
and if this is not the case we have a

783
00:32:47,519 --> 00:32:49,200
shorter message

784
00:32:49,200 --> 00:32:52,559
this is due the fact that um

785
00:32:52,559 --> 00:32:57,039
t4 t33 will be a 64-bit message

786
00:32:57,039 --> 00:33:00,399
that will be encrypted under 128

787
00:33:00,399 --> 00:33:02,080
bits block

788
00:33:02,080 --> 00:33:03,600
so we

789
00:33:03,600 --> 00:33:05,600
lose in some

790
00:33:05,600 --> 00:33:08,320
kind of los 64 bits

791
00:33:08,320 --> 00:33:11,600
and depending on the length of the

792
00:33:11,600 --> 00:33:14,080
text we have a either shorter or longer

793
00:33:14,080 --> 00:33:16,480
message

794
00:33:17,440 --> 00:33:18,640
and

795
00:33:18,640 --> 00:33:21,679
we can use the similar idea for the

796
00:33:21,679 --> 00:33:25,279
message too so to increase the responder

797
00:33:25,279 --> 00:33:26,720
authentication

798
00:33:26,720 --> 00:33:28,799
where you would send

799
00:33:28,799 --> 00:33:30,720
is a

800
00:33:30,720 --> 00:33:31,679
in the

801
00:33:31,679 --> 00:33:34,080
information

802
00:33:34,080 --> 00:33:36,960
key stream ciphertext and use the

803
00:33:36,960 --> 00:33:39,200
authenticated encryption

804
00:33:39,200 --> 00:33:40,320
for

805
00:33:40,320 --> 00:33:43,600
better authentication security

806
00:33:43,600 --> 00:33:46,320
but this will uh

807
00:33:46,320 --> 00:33:49,440
this will lead to a higher

808
00:33:49,440 --> 00:33:52,960
bigger message too but better security

809
00:33:52,960 --> 00:33:54,000
so

810
00:33:54,000 --> 00:33:58,240
there may be some compromise to do here

811
00:33:59,840 --> 00:34:01,840
also another way to

812
00:34:01,840 --> 00:34:03,840
the authentication

813
00:34:03,840 --> 00:34:04,880
is to

814
00:34:04,880 --> 00:34:08,399
add a first message that appears in the

815
00:34:08,399 --> 00:34:10,159
documentation

816
00:34:10,159 --> 00:34:13,199
and with this message that's the same

817
00:34:13,199 --> 00:34:15,520
idea as before

818
00:34:15,520 --> 00:34:18,079
with the authenticated inclusion we have

819
00:34:18,079 --> 00:34:21,199
a 64 extra bits security

820
00:34:21,199 --> 00:34:23,280
as the key

821
00:34:23,280 --> 00:34:26,800
pair key for e3m depends of ys

822
00:34:26,800 --> 00:34:30,639
the ciphertext c4 will depend yes

823
00:34:30,639 --> 00:34:32,839
and if

824
00:34:32,839 --> 00:34:36,800
the if the sulphur tax is valid it means

825
00:34:36,800 --> 00:34:37,839
that

826
00:34:37,839 --> 00:34:40,480
either the ssi broke the unforgivability

827
00:34:40,480 --> 00:34:41,280
of

828
00:34:41,280 --> 00:34:45,679
pi prime or exactly the respondent so

829
00:34:45,679 --> 00:34:47,440
we have an ad the advantage is

830
00:34:47,440 --> 00:34:50,480
multiplied by the advantage of the

831
00:34:50,480 --> 00:34:53,520
of the adversary in forging in a valid

832
00:34:53,520 --> 00:34:54,800
ciphertext

833
00:34:54,800 --> 00:34:58,560
so this advantage is around 2 to the

834
00:34:58,560 --> 00:35:00,320
minus 64.

835
00:35:00,320 --> 00:35:04,000
and multiplied by the 2

836
00:35:04,000 --> 00:35:06,000
64 security

837
00:35:06,000 --> 00:35:08,240
of the

838
00:35:08,240 --> 00:35:11,280
responder thanks to the mac this lead to

839
00:35:11,280 --> 00:35:16,359
an authentication security of 128

840
00:35:18,000 --> 00:35:20,800
the last minor improvement is that in

841
00:35:20,800 --> 00:35:23,760
all our terms we have

842
00:35:23,760 --> 00:35:27,839
n sigma times a q airport

843
00:35:27,839 --> 00:35:29,839
and this comes from the fact that the

844
00:35:29,839 --> 00:35:32,560
key pr key to e

845
00:35:32,560 --> 00:35:33,680
is uh

846
00:35:33,680 --> 00:35:36,320
computed according to an empty string

847
00:35:36,320 --> 00:35:39,760
and because of the empty string when the

848
00:35:39,760 --> 00:35:42,480
adversary make a query to the random

849
00:35:42,480 --> 00:35:45,680
oracle it can find a match with any of

850
00:35:45,680 --> 00:35:48,000
the sessions so if you have a 10 session

851
00:35:48,000 --> 00:35:49,680
a second query

852
00:35:49,680 --> 00:35:52,160
can generate

853
00:35:52,160 --> 00:35:54,800
a collision with

854
00:35:54,800 --> 00:35:56,560
any other 10 sessions

855
00:35:56,560 --> 00:36:00,640
so that's why we have a factor in sigma

856
00:36:00,640 --> 00:36:02,640
the idea

857
00:36:02,640 --> 00:36:03,280
to uh

858
00:36:03,280 --> 00:36:05,040
[Music]

859
00:36:05,040 --> 00:36:06,079
to

860
00:36:06,079 --> 00:36:09,520
protect from this is simply to use th2

861
00:36:09,520 --> 00:36:12,800
as the input string of the computation

862
00:36:12,800 --> 00:36:15,440
of player key to e

863
00:36:15,440 --> 00:36:19,359
as in this case each th2 is

864
00:36:19,359 --> 00:36:20,400
is

865
00:36:20,400 --> 00:36:22,880
related to a single session

866
00:36:22,880 --> 00:36:25,839
so when the industry will make a query

867
00:36:25,839 --> 00:36:27,680
to the random record

868
00:36:27,680 --> 00:36:30,480
you will have to shoot which session he

869
00:36:30,480 --> 00:36:32,480
will

870
00:36:32,480 --> 00:36:34,880
target

871
00:36:34,960 --> 00:36:35,839
and

872
00:36:35,839 --> 00:36:39,280
this has no extra cost of competition

873
00:36:39,280 --> 00:36:43,920
and now we gain we have a better

874
00:36:45,040 --> 00:36:46,960
security

875
00:36:46,960 --> 00:36:48,800
for the

876
00:36:48,800 --> 00:36:51,119
for all the

877
00:36:51,119 --> 00:36:52,640
key privacy

878
00:36:52,640 --> 00:36:54,880
the authentication and the protect and

879
00:36:54,880 --> 00:36:56,560
identity protection

880
00:36:56,560 --> 00:36:57,520
and

881
00:36:57,520 --> 00:37:01,040
therefore the security is independent of

882
00:37:01,040 --> 00:37:02,079
the

883
00:37:02,079 --> 00:37:04,640
number of users

884
00:37:04,640 --> 00:37:06,800
of sessions independent of the number of

885
00:37:06,800 --> 00:37:09,800
sessions

886
00:37:10,480 --> 00:37:12,400
so thanks everyone and if you have

887
00:37:12,400 --> 00:37:14,400
questions

888
00:37:14,400 --> 00:37:17,200
i will listen to you

889
00:37:20,880 --> 00:37:24,320
so we have john in the queue

890
00:37:24,480 --> 00:37:27,680
thank you baptist for the all this work

891
00:37:27,680 --> 00:37:30,720
really appreciated uh

892
00:37:30,720 --> 00:37:32,320
we made some

893
00:37:32,320 --> 00:37:35,040
there's been recent issues created for

894
00:37:35,040 --> 00:37:39,280
these things and for the th2

895
00:37:39,280 --> 00:37:42,079
the th2s yes and have had an issue and a

896
00:37:42,079 --> 00:37:44,480
discussion ongoing whether these extra

897
00:37:44,480 --> 00:37:46,480
factories is

898
00:37:46,480 --> 00:37:48,480
needed or or not

899
00:37:48,480 --> 00:37:51,440
very recently a few days ago made a

900
00:37:51,440 --> 00:37:54,320
pr turns out that

901
00:37:54,320 --> 00:37:56,720
adding three also simplifies the

902
00:37:56,720 --> 00:37:59,920
specification because each

903
00:37:59,920 --> 00:38:01,520
kdf has

904
00:38:01,520 --> 00:38:03,599
some

905
00:38:03,599 --> 00:38:06,320
strange behavior with

906
00:38:06,320 --> 00:38:08,640
the empty string so we needed so we

907
00:38:08,640 --> 00:38:10,960
could actually remove text so it might

908
00:38:10,960 --> 00:38:13,520
be worth doing just for

909
00:38:13,520 --> 00:38:17,440
for that alone uh joram made this

910
00:38:17,440 --> 00:38:19,760
morning i think an issue for the

911
00:38:19,760 --> 00:38:24,000
other and also started looking at how

912
00:38:24,000 --> 00:38:26,880
how it would affect the implication i

913
00:38:26,880 --> 00:38:29,200
think it would increase

914
00:38:29,200 --> 00:38:32,000
in many cases the message tree with a

915
00:38:32,000 --> 00:38:33,119
single

916
00:38:33,119 --> 00:38:35,119
bite to do this but i think

917
00:38:35,119 --> 00:38:37,839
that needs some more

918
00:38:37,839 --> 00:38:39,520
more discussion and

919
00:38:39,520 --> 00:38:41,599
analysis

920
00:38:41,599 --> 00:38:44,760
on github

921
00:38:47,760 --> 00:38:49,359
yes john so what i hear from you is that

922
00:38:49,359 --> 00:38:51,119
we are tracking the improvements um

923
00:38:51,119 --> 00:38:53,040
suggestions that are proposed by baptist

924
00:38:53,040 --> 00:38:54,880
and that we have the ongoing discussion

925
00:38:54,880 --> 00:38:56,160
on github

926
00:38:56,160 --> 00:38:58,880
uh around these which is very important

927
00:38:58,880 --> 00:39:00,720
as

928
00:39:00,720 --> 00:39:03,599
and please let's keep on doing that uh i

929
00:39:03,599 --> 00:39:06,480
think we have mark in the queue uh

930
00:39:06,480 --> 00:39:07,920
mark did you want to comment on

931
00:39:07,920 --> 00:39:10,560
something or

932
00:39:10,960 --> 00:39:13,280
yeah thank you thanks that is for the

933
00:39:13,280 --> 00:39:15,200
presentation i just had a question i was

934
00:39:15,200 --> 00:39:17,119
wondering whether the

935
00:39:17,119 --> 00:39:19,520
sort of your work would be available

936
00:39:19,520 --> 00:39:22,000
published somewhere

937
00:39:22,000 --> 00:39:24,000
yes uh so

938
00:39:24,000 --> 00:39:25,839
it's uh still

939
00:39:25,839 --> 00:39:29,040
a draft but we are working with uh

940
00:39:29,040 --> 00:39:31,359
david poncheval and uh

941
00:39:31,359 --> 00:39:34,720
i think soon depends on

942
00:39:34,720 --> 00:39:37,599
on the conversation or

943
00:39:37,599 --> 00:39:40,400
how it will uh evaluate but yes there is

944
00:39:40,400 --> 00:39:42,320
a

945
00:39:42,320 --> 00:39:43,920
paper that

946
00:39:43,920 --> 00:39:47,359
may be soon be a preprint and uh

947
00:39:47,359 --> 00:39:50,640
why not be a submit but yes there is a

948
00:39:50,640 --> 00:39:53,119
ongoing paper

949
00:39:53,119 --> 00:39:54,640
great thank you

950
00:39:54,640 --> 00:39:57,839
you're welcome

951
00:39:57,839 --> 00:39:59,440
great thanks baptiste uh thanks again

952
00:39:59,440 --> 00:40:01,359
for all the work

953
00:40:01,359 --> 00:40:05,359
and i think next is john

954
00:40:08,480 --> 00:40:09,839
so just say when you're not in a new

955
00:40:09,839 --> 00:40:12,160
slide

956
00:40:14,160 --> 00:40:15,760
yeah i think

957
00:40:15,760 --> 00:40:18,319
how many if you have like around 10

958
00:40:18,319 --> 00:40:20,319
minutes i guess or something yeah yeah

959
00:40:20,319 --> 00:40:22,839
we've twenty left so

960
00:40:22,839 --> 00:40:26,480
yeah so we can today's presentation

961
00:40:26,480 --> 00:40:31,359
about all the updates and ongoing issues

962
00:40:31,359 --> 00:40:34,800
uh this is an overview so version 13 was

963
00:40:34,800 --> 00:40:36,319
just a

964
00:40:36,319 --> 00:40:38,560
resubmission and then

965
00:40:38,560 --> 00:40:41,599
quite major changes in 14.

966
00:40:41,599 --> 00:40:45,760
but we waited with submitting that to

967
00:40:48,880 --> 00:40:51,839
oh maybe it's often just like

968
00:40:51,839 --> 00:40:52,640
so

969
00:40:52,640 --> 00:40:54,560
yeah much better

970
00:40:54,560 --> 00:40:56,720
uh so this is an overview of the

971
00:40:56,720 --> 00:40:59,839
submitted version we waited with 14 for

972
00:40:59,839 --> 00:41:02,160
a long time

973
00:41:02,160 --> 00:41:04,640
to have a stable version now i guess the

974
00:41:04,640 --> 00:41:07,280
slides disappeared yeah it's like it's

975
00:41:07,280 --> 00:41:09,200
reconnecting

976
00:41:09,200 --> 00:41:10,400
um

977
00:41:10,400 --> 00:41:11,200
and

978
00:41:11,200 --> 00:41:13,440
then there was a recent update of the

979
00:41:13,440 --> 00:41:16,720
traces aligning with 1450

980
00:41:16,720 --> 00:41:19,760
1415 has the same buyer format

981
00:41:19,760 --> 00:41:22,560
and then very recently just a few days

982
00:41:22,560 --> 00:41:24,880
ago zero two traces was

983
00:41:24,880 --> 00:41:27,280
submitted with a

984
00:41:27,280 --> 00:41:28,480
correction

985
00:41:28,480 --> 00:41:31,280
i think the oscar master salt was

986
00:41:31,280 --> 00:41:32,839
wrong in the draft

987
00:41:32,839 --> 00:41:35,839
version and then we can go to the next

988
00:41:35,839 --> 00:41:38,240
slide

989
00:41:47,119 --> 00:41:49,839
yeah next

990
00:41:51,599 --> 00:41:52,400
so

991
00:41:52,400 --> 00:41:55,359
what are so this is i don't have time to

992
00:41:55,359 --> 00:41:59,280
go through all the changes but the major

993
00:41:59,280 --> 00:42:03,440
rewrites and updates to the

994
00:42:03,440 --> 00:42:08,119
3 5 which is authentication

995
00:42:08,800 --> 00:42:12,960
and then a major rewrite of ead

996
00:42:12,960 --> 00:42:15,359
section

997
00:42:15,359 --> 00:42:17,839
yeah and some technical change the ad

998
00:42:17,839 --> 00:42:20,319
value is now a bit string

999
00:42:20,319 --> 00:42:24,560
uh quite a lot of changes to the adhoc

1000
00:42:24,560 --> 00:42:28,160
key derivation and key schedule based on

1001
00:42:28,160 --> 00:42:31,760
comments from the formal verification

1002
00:42:31,760 --> 00:42:32,960
uh

1003
00:42:32,960 --> 00:42:36,160
the three main updates are that there's

1004
00:42:36,160 --> 00:42:39,040
no more key derivations

1005
00:42:39,040 --> 00:42:40,560
to be able to use

1006
00:42:40,560 --> 00:42:43,200
different keys in the

1007
00:42:43,200 --> 00:42:47,200
kdf expand and extract before the same

1008
00:42:47,200 --> 00:42:51,040
key was used in both

1009
00:42:51,040 --> 00:42:55,280
the transcriptasion context

1010
00:42:55,280 --> 00:42:57,760
input has been

1011
00:42:57,760 --> 00:43:00,880
made a single context input and all the

1012
00:43:00,880 --> 00:43:05,040
labels are now integers

1013
00:43:05,040 --> 00:43:08,400
you can take the next

1014
00:43:09,599 --> 00:43:12,960
also changes to the identifier encoding

1015
00:43:12,960 --> 00:43:15,760
this has been an ongoing

1016
00:43:15,760 --> 00:43:16,770
discussion

1017
00:43:16,770 --> 00:43:18,000
[Music]

1018
00:43:18,000 --> 00:43:19,760
with different

1019
00:43:19,760 --> 00:43:21,280
solutions

1020
00:43:21,280 --> 00:43:23,680
all pretty same

1021
00:43:23,680 --> 00:43:25,520
strong conclusion in the group that we

1022
00:43:25,520 --> 00:43:28,480
need to have this one byte encoding but

1023
00:43:28,480 --> 00:43:29,839
unclear how

1024
00:43:29,839 --> 00:43:32,720
now we have gone back to

1025
00:43:32,720 --> 00:43:35,359
before it was in discussed to have

1026
00:43:35,359 --> 00:43:39,359
integer kids in cosi that has now been

1027
00:43:39,359 --> 00:43:42,800
scrapped and it's specified as there are

1028
00:43:42,800 --> 00:43:45,680
byte strings but they are encoded as

1029
00:43:45,680 --> 00:43:48,160
integer this is similar to the solution

1030
00:43:48,160 --> 00:43:49,920
before but

1031
00:43:49,920 --> 00:43:52,800
presented it's a new solution which is

1032
00:43:52,800 --> 00:43:55,760
much simpler hopefully so hopefully this

1033
00:43:55,760 --> 00:43:59,040
is the last version of that

1034
00:43:59,040 --> 00:44:01,520
next

1035
00:44:01,520 --> 00:44:03,520
here is a

1036
00:44:03,520 --> 00:44:06,839
new dramatic of the key schedule

1037
00:44:06,839 --> 00:44:08,880
yeah and

1038
00:44:08,880 --> 00:44:11,599
as before major change more key

1039
00:44:11,599 --> 00:44:13,839
derivations there's also a new

1040
00:44:13,839 --> 00:44:17,839
key the prk exporter there's a new

1041
00:44:17,839 --> 00:44:22,560
session key called prk out

1042
00:44:22,560 --> 00:44:25,200
to have a very well-defined

1043
00:44:25,200 --> 00:44:27,599
session key formal verification

1044
00:44:27,599 --> 00:44:29,839
typically wants to have a very formal

1045
00:44:29,839 --> 00:44:32,319
session key that is

1046
00:44:32,319 --> 00:44:35,760
you can state properties with

1047
00:44:35,760 --> 00:44:38,400
next slide

1048
00:44:40,560 --> 00:44:41,359
so

1049
00:44:41,359 --> 00:44:46,400
quite a lot of changes in the processing

1050
00:44:48,319 --> 00:44:51,040
partly technical partly more

1051
00:44:51,040 --> 00:44:53,040
clarification

1052
00:44:53,040 --> 00:44:56,480
this ead and id cred needs to be passed

1053
00:44:56,480 --> 00:44:59,440
a bit earlier

1054
00:44:59,440 --> 00:45:02,240
there's padding has been added

1055
00:45:02,240 --> 00:45:04,640
to hide length of things

1056
00:45:04,640 --> 00:45:06,800
optionally

1057
00:45:06,800 --> 00:45:09,920
quite a lot of clarification security

1058
00:45:09,920 --> 00:45:14,560
updates i think we can go to the next

1059
00:45:14,560 --> 00:45:17,560
next

1060
00:45:18,800 --> 00:45:21,680
so there's some new uh now we're coming

1061
00:45:21,680 --> 00:45:23,200
to more

1062
00:45:23,200 --> 00:45:25,119
discussions there's a few remaining

1063
00:45:25,119 --> 00:45:27,200
discussions and issues

1064
00:45:27,200 --> 00:45:28,079
left

1065
00:45:28,079 --> 00:45:29,680
um

1066
00:45:29,680 --> 00:45:32,079
in 15 there's a new section on

1067
00:45:32,079 --> 00:45:35,280
authenticated operation this was

1068
00:45:35,280 --> 00:45:38,480
previously an empty trust on first

1069
00:45:38,480 --> 00:45:42,160
use section but we realized it can be

1070
00:45:42,160 --> 00:45:43,119
included

1071
00:45:43,119 --> 00:45:44,800
you can

1072
00:45:44,800 --> 00:45:46,800
there's more options here there's been

1073
00:45:46,800 --> 00:45:48,560
more generalized

1074
00:45:48,560 --> 00:45:49,599
yeah

1075
00:45:49,599 --> 00:45:52,319
then there's a lot of clarifications

1076
00:45:52,319 --> 00:45:54,000
a security concer

1077
00:45:54,000 --> 00:45:56,319
can take next

1078
00:45:56,319 --> 00:45:58,079
slide

1079
00:45:58,079 --> 00:46:00,480
so now we're coming to ongoing

1080
00:46:00,480 --> 00:46:03,599
discussions and

1081
00:46:03,599 --> 00:46:07,359
some changes to the ead based on the

1082
00:46:07,359 --> 00:46:10,400
item issue created by christian amsas i

1083
00:46:10,400 --> 00:46:11,520
think

1084
00:46:11,520 --> 00:46:14,160
about encrypted client hello types of

1085
00:46:14,160 --> 00:46:17,119
use cases but one of the things that

1086
00:46:17,119 --> 00:46:19,280
popped up there was that it would be

1087
00:46:19,280 --> 00:46:20,880
good to have

1088
00:46:20,880 --> 00:46:26,480
a critical non-critical flag for the ead

1089
00:46:26,480 --> 00:46:28,800
and this has already been included in

1090
00:46:28,800 --> 00:46:31,359
the latest

1091
00:46:31,359 --> 00:46:34,640
version i think

1092
00:46:34,640 --> 00:46:35,520
and

1093
00:46:35,520 --> 00:46:39,200
negative values are now

1094
00:46:40,000 --> 00:46:43,599
critical and positive values

1095
00:46:43,599 --> 00:46:44,960
are

1096
00:46:44,960 --> 00:46:46,400
non

1097
00:46:46,400 --> 00:46:48,800
critical

1098
00:46:48,800 --> 00:46:49,599
and

1099
00:46:49,599 --> 00:46:50,800
this is

1100
00:46:50,800 --> 00:46:52,640
quite similar to

1101
00:46:52,640 --> 00:46:56,940
extensions in x 509 certificates

1102
00:46:56,940 --> 00:46:59,839
[Music]

1103
00:46:59,839 --> 00:47:01,359
i think that

1104
00:47:01,359 --> 00:47:03,440
might please look at

1105
00:47:03,440 --> 00:47:06,720
this and especially any processing

1106
00:47:06,720 --> 00:47:09,280
requirement what you're supposed to do

1107
00:47:09,280 --> 00:47:10,480
might need

1108
00:47:10,480 --> 00:47:13,200
further clarification

1109
00:47:13,200 --> 00:47:15,598
next

1110
00:47:16,720 --> 00:47:18,800
open issues

1111
00:47:18,800 --> 00:47:21,520
so this has i guess most of this has

1112
00:47:21,520 --> 00:47:23,280
been

1113
00:47:23,280 --> 00:47:24,240
inc

1114
00:47:24,240 --> 00:47:27,599
already discussed the tree first as

1115
00:47:27,599 --> 00:47:30,160
are based on the formal verification

1116
00:47:30,160 --> 00:47:31,520
that is i think

1117
00:47:31,520 --> 00:47:33,200
already discussed

1118
00:47:33,200 --> 00:47:34,319
uh

1119
00:47:34,319 --> 00:47:38,559
except this one remaining issue is that

1120
00:47:38,559 --> 00:47:42,240
it was realized that the hkdf has a

1121
00:47:42,240 --> 00:47:43,280
length

1122
00:47:43,280 --> 00:47:46,880
limit depends on the hash algorithm used

1123
00:47:46,880 --> 00:47:49,839
but when you use char256

1124
00:47:49,839 --> 00:47:52,839
the maximum output is

1125
00:47:52,839 --> 00:47:57,839
8160 bytes can take next slide

1126
00:47:59,599 --> 00:48:02,800
i think the first question is is this a

1127
00:48:02,800 --> 00:48:04,090
problem

1128
00:48:04,090 --> 00:48:05,440
[Music]

1129
00:48:05,440 --> 00:48:08,160
normally not but you could imagine that

1130
00:48:08,160 --> 00:48:09,920
you have

1131
00:48:09,920 --> 00:48:12,800
a quite large ead or you could have a

1132
00:48:12,800 --> 00:48:15,119
large certificate chain or you could

1133
00:48:15,119 --> 00:48:16,160
have

1134
00:48:16,160 --> 00:48:18,558
both

1135
00:48:19,200 --> 00:48:21,280
and so the first question is this

1136
00:48:21,280 --> 00:48:23,920
something we should fix and second

1137
00:48:23,920 --> 00:48:26,800
question if we fix it how should we fix

1138
00:48:26,800 --> 00:48:27,599
it

1139
00:48:27,599 --> 00:48:30,319
this is a list of

1140
00:48:30,319 --> 00:48:33,119
basically all the potential

1141
00:48:33,119 --> 00:48:35,680
solutions we could

1142
00:48:35,680 --> 00:48:37,359
think of

1143
00:48:37,359 --> 00:48:42,079
and of these number two and number

1144
00:48:42,079 --> 00:48:44,960
five are backward

1145
00:48:44,960 --> 00:48:47,040
compatible

1146
00:48:47,040 --> 00:48:49,520
so you only need to change your

1147
00:48:49,520 --> 00:48:53,119
implementation if you actually use low

1148
00:48:53,119 --> 00:48:55,440
messages

1149
00:48:55,440 --> 00:48:56,319
uh

1150
00:48:56,319 --> 00:48:58,319
and h and

1151
00:48:58,319 --> 00:49:02,319
hkf expand piece here would be hkdf with

1152
00:49:02,319 --> 00:49:04,880
a 16-bit

1153
00:49:04,880 --> 00:49:06,880
value instead it was

1154
00:49:06,880 --> 00:49:09,119
it's still hkdf according to the

1155
00:49:09,119 --> 00:49:12,240
academic paper but not hkdf according to

1156
00:49:12,240 --> 00:49:15,359
the rfc

1157
00:49:15,359 --> 00:49:17,839
next

1158
00:49:18,400 --> 00:49:22,000
and the most promising solution if you

1159
00:49:22,000 --> 00:49:25,280
want to fix this seems to just use hkdf

1160
00:49:25,280 --> 00:49:28,640
according to the rfc several times

1161
00:49:28,640 --> 00:49:29,680
if you

1162
00:49:29,680 --> 00:49:32,240
don't want to support very long messages

1163
00:49:32,240 --> 00:49:35,119
you don't have to do anything and if you

1164
00:49:35,119 --> 00:49:38,640
do you can still use an implementation

1165
00:49:38,640 --> 00:49:42,400
compliant with the rfc

1166
00:49:44,079 --> 00:49:46,720
and there's an issue and i think a pr4

1167
00:49:46,720 --> 00:49:48,480
for this yeah

1168
00:49:48,480 --> 00:49:51,040
github

1169
00:49:51,680 --> 00:49:54,319
next

1170
00:49:55,839 --> 00:49:57,119
this is

1171
00:49:57,119 --> 00:49:58,400
this is based on the form of

1172
00:49:58,400 --> 00:50:03,119
verification the changes to

1173
00:50:04,000 --> 00:50:06,160
the

1174
00:50:07,680 --> 00:50:09,920
how to encrypt

1175
00:50:09,920 --> 00:50:12,880
the authentication in message three i

1176
00:50:12,880 --> 00:50:16,319
think we can take next

1177
00:50:18,319 --> 00:50:22,000
and then traces next

1178
00:50:24,720 --> 00:50:27,920
so this has been updated

1179
00:50:27,920 --> 00:50:29,520
aligning with

1180
00:50:29,520 --> 00:50:32,720
ad hoc 14

1181
00:50:32,720 --> 00:50:34,079
and then there's

1182
00:50:34,079 --> 00:50:36,800
some embark was fixed in zero two

1183
00:50:36,800 --> 00:50:40,000
there's been very recently a new bug

1184
00:50:40,000 --> 00:50:41,760
just submitted so i think there will

1185
00:50:41,760 --> 00:50:46,400
come a new version of traces fixing that

1186
00:50:47,040 --> 00:50:49,599
next

1187
00:50:49,599 --> 00:50:50,720
then

1188
00:50:50,720 --> 00:50:52,240
next

1189
00:50:52,240 --> 00:50:55,119
steps i guess that we will discuss

1190
00:50:55,119 --> 00:50:58,800
are there any questions so we have

1191
00:50:58,800 --> 00:51:01,040
yeah

1192
00:51:03,680 --> 00:51:05,680
so nobody in the queue

1193
00:51:05,680 --> 00:51:09,040
okay so we'll discuss this shortly

1194
00:51:09,040 --> 00:51:11,040
great thank you

1195
00:51:11,040 --> 00:51:13,440
marco

1196
00:51:20,079 --> 00:51:22,240
hi everyone this is marco i have just

1197
00:51:22,240 --> 00:51:25,760
one slide uh a second report

1198
00:51:25,760 --> 00:51:26,800
next please

1199
00:51:26,800 --> 00:51:28,079
thank you

1200
00:51:28,079 --> 00:51:30,559
yeah it was me and militia and we had

1201
00:51:30,559 --> 00:51:33,359
our implementations up to date version

1202
00:51:33,359 --> 00:51:35,839
15 of edoc and same implantations we

1203
00:51:35,839 --> 00:51:37,839
consider the previous

1204
00:51:37,839 --> 00:51:40,079
acaton and in vienna and in fact we

1205
00:51:40,079 --> 00:51:42,400
considered exactly the same um setup

1206
00:51:42,400 --> 00:51:43,839
with malicious initiator and me as

1207
00:51:43,839 --> 00:51:45,280
responder

1208
00:51:45,280 --> 00:51:46,240
and

1209
00:51:46,240 --> 00:51:48,000
well the the most effective

1210
00:51:48,000 --> 00:51:49,839
configuration if you want because that's

1211
00:51:49,839 --> 00:51:52,079
the one really bringing you to the

1212
00:51:52,079 --> 00:51:53,839
smallest possible message to you which

1213
00:51:53,839 --> 00:51:56,480
is uh 45 bytes and we specifically

1214
00:51:56,480 --> 00:51:58,800
considered the cypher c2

1215
00:51:58,800 --> 00:52:02,319
uh method three both peers with ccs and

1216
00:52:02,319 --> 00:52:05,440
kids as credential identifiers with a

1217
00:52:05,440 --> 00:52:07,680
kid such that and call it as an integer

1218
00:52:07,680 --> 00:52:09,040
on the wire

1219
00:52:09,040 --> 00:52:10,000
and

1220
00:52:10,000 --> 00:52:11,920
yes everything eventually succeeded we

1221
00:52:11,920 --> 00:52:13,440
converted to the same master secret and

1222
00:52:13,440 --> 00:52:14,720
sold

1223
00:52:14,720 --> 00:52:16,960
and i'm aware of more people updating

1224
00:52:16,960 --> 00:52:19,280
their implementation so i would expect

1225
00:52:19,280 --> 00:52:20,640
more tests

1226
00:52:20,640 --> 00:52:23,040
in the following weeks or months

1227
00:52:23,040 --> 00:52:24,400
that's it

1228
00:52:24,400 --> 00:52:27,040
great thank you

1229
00:52:27,040 --> 00:52:30,040
thanks

1230
00:52:33,200 --> 00:52:35,760
so we have joran in the queue you're on

1231
00:52:35,760 --> 00:52:37,920
yeah i just wanted to add

1232
00:52:37,920 --> 00:52:39,040
to what

1233
00:52:39,040 --> 00:52:40,880
mark would said we have

1234
00:52:40,880 --> 00:52:43,200
a confirmation from stephan ristof that

1235
00:52:43,200 --> 00:52:44,960
he his

1236
00:52:44,960 --> 00:52:46,480
implementation is also updated to

1237
00:52:46,480 --> 00:52:48,480
version 15

1238
00:52:48,480 --> 00:52:51,760
and marek who couldn't be here

1239
00:52:51,760 --> 00:52:52,800
has made

1240
00:52:52,800 --> 00:52:55,100
has updated the test vector code

1241
00:52:55,100 --> 00:52:56,319
[Music]

1242
00:52:56,319 --> 00:52:58,480
also to version 15

1243
00:52:58,480 --> 00:53:01,359
and there are now test vectors for ecdsa

1244
00:53:01,359 --> 00:53:02,720
and eddsa

1245
00:53:02,720 --> 00:53:05,520
in a folder in the github

1246
00:53:05,520 --> 00:53:08,559
called something like test vector 15.

1247
00:53:08,559 --> 00:53:11,200
yeah that's it

1248
00:53:11,680 --> 00:53:13,359
just as a qualification when you refer

1249
00:53:13,359 --> 00:53:15,680
to test vectors you're referring to the

1250
00:53:15,680 --> 00:53:18,960
json version in the github file right

1251
00:53:18,960 --> 00:53:20,480
exactly yeah

1252
00:53:20,480 --> 00:53:23,599
the json version of the traces drive

1253
00:53:23,599 --> 00:53:25,839
it's it's not only the traces draft it's

1254
00:53:25,839 --> 00:53:27,119
the additional one

1255
00:53:27,119 --> 00:53:28,480
there are multiple yeah there are

1256
00:53:28,480 --> 00:53:30,559
additional test vectors not only the two

1257
00:53:30,559 --> 00:53:32,200
two test vectors in the traces right

1258
00:53:32,200 --> 00:53:33,599
[Music]

1259
00:53:33,599 --> 00:53:36,400
thank you very much

1260
00:53:38,800 --> 00:53:41,440
great so so i think we have a

1261
00:53:41,440 --> 00:53:42,960
about seven minutes left i think that

1262
00:53:42,960 --> 00:53:44,960
the topic that we position i would like

1263
00:53:44,960 --> 00:53:45,680
to

1264
00:53:45,680 --> 00:53:46,880
cover is

1265
00:53:46,880 --> 00:53:48,559
how do we get done uh what's the next

1266
00:53:48,559 --> 00:53:49,839
things obviously there's some

1267
00:53:49,839 --> 00:53:51,920
outstanding prs and things that need to

1268
00:53:51,920 --> 00:53:53,359
be discussed

1269
00:53:53,359 --> 00:53:55,839
but what else is needed now that we kind

1270
00:53:55,839 --> 00:53:58,240
of have some of the analysis done

1271
00:53:58,240 --> 00:53:59,599
before we're ready for working group

1272
00:53:59,599 --> 00:54:01,680
last call so i'd

1273
00:54:01,680 --> 00:54:04,240
appreciate your thoughts on that

1274
00:54:04,240 --> 00:54:05,839
what else do we need to do before we're

1275
00:54:05,839 --> 00:54:08,839
finished

1276
00:54:10,319 --> 00:54:11,680
and if nobody has thoughts i presume the

1277
00:54:11,680 --> 00:54:13,359
answer is nothing and then we think

1278
00:54:13,359 --> 00:54:15,759
we're finished

1279
00:54:16,319 --> 00:54:19,599
so let's hear from john

1280
00:54:20,640 --> 00:54:22,319
yeah i think

1281
00:54:22,319 --> 00:54:25,280
i would say nothing more

1282
00:54:25,280 --> 00:54:29,440
unless something pops up but we need to

1283
00:54:29,440 --> 00:54:31,680
we have some current issues there's

1284
00:54:31,680 --> 00:54:35,680
nothing coming in very much more issues

1285
00:54:35,680 --> 00:54:38,799
so i think we fix these issues publish a

1286
00:54:38,799 --> 00:54:41,200
new version then of course we need some

1287
00:54:41,200 --> 00:54:43,359
implementation but after that i think we

1288
00:54:43,359 --> 00:54:46,319
are ready for working group last call we

1289
00:54:46,319 --> 00:54:50,720
already had very substantial reviews

1290
00:54:50,720 --> 00:54:53,839
before yeah

1291
00:54:54,160 --> 00:54:56,799
john john is it here

1292
00:54:56,799 --> 00:54:59,040
okay

1293
00:54:59,520 --> 00:55:01,599
so maybe as a reply to john i mean it

1294
00:55:01,599 --> 00:55:05,280
seemed that uh yes so the uh suggestions

1295
00:55:05,280 --> 00:55:07,280
proposed by baptist will also affect the

1296
00:55:07,280 --> 00:55:10,480
key schedule and therefore also uh

1297
00:55:10,480 --> 00:55:12,640
affected the traces

1298
00:55:12,640 --> 00:55:16,559
so they still seem to be kind of not i

1299
00:55:16,559 --> 00:55:18,799
won't say substantial but important as

1300
00:55:18,799 --> 00:55:22,160
they affect the security level of the uh

1301
00:55:22,160 --> 00:55:25,920
of the static static mode right

1302
00:55:26,319 --> 00:55:27,200
so

1303
00:55:27,200 --> 00:55:28,480
we want

1304
00:55:28,480 --> 00:55:31,119
do we need an interim to discuss those

1305
00:55:31,119 --> 00:55:32,160
or

1306
00:55:32,160 --> 00:55:35,680
should we uh call it a break now for the

1307
00:55:35,680 --> 00:55:36,720
summer

1308
00:55:36,720 --> 00:55:39,359
do what are the people's thoughts

1309
00:55:39,359 --> 00:55:41,759
on this

1310
00:55:44,880 --> 00:55:46,480
so i guess people are agreeing with john

1311
00:55:46,480 --> 00:55:49,359
that there's not much more to do

1312
00:55:49,359 --> 00:55:51,119
you're on

1313
00:55:51,119 --> 00:55:53,440
yeah yeah i'm about to say the same

1314
00:55:53,440 --> 00:55:54,559
thing but so

1315
00:55:54,559 --> 00:55:57,119
i think that we definitely need to look

1316
00:55:57,119 --> 00:55:58,559
at carefully at the

1317
00:55:58,559 --> 00:56:00,319
security analysis

1318
00:56:00,319 --> 00:56:02,000
the latest input

1319
00:56:02,000 --> 00:56:05,119
maybe we could have a meeting with the

1320
00:56:05,119 --> 00:56:07,280
some of the teams uh i'll reach out to

1321
00:56:07,280 --> 00:56:09,599
webtest here after the meeting see if we

1322
00:56:09,599 --> 00:56:11,440
can have a short meeting and

1323
00:56:11,440 --> 00:56:14,000
and discuss the latest input and then we

1324
00:56:14,000 --> 00:56:15,599
need to do the

1325
00:56:15,599 --> 00:56:18,400
to the prs and

1326
00:56:18,400 --> 00:56:19,920
then the specifications should be fine

1327
00:56:19,920 --> 00:56:22,319
and we of course we need to update

1328
00:56:22,319 --> 00:56:24,319
implementations also but this is not as

1329
00:56:24,319 --> 00:56:27,359
big any change as

1330
00:56:27,359 --> 00:56:31,200
13 to 14 i'd say

1331
00:56:31,200 --> 00:56:32,319
so i don't know if we need any

1332
00:56:32,319 --> 00:56:34,799
interesting before uh before the

1333
00:56:34,799 --> 00:56:36,160
vacation there's a lot of people going

1334
00:56:36,160 --> 00:56:38,559
on vacation now

1335
00:56:38,559 --> 00:56:41,200
sure okay so i think what i'm hearing is

1336
00:56:41,200 --> 00:56:43,599
we you know depending if

1337
00:56:43,599 --> 00:56:45,200
we might or might not want to organize

1338
00:56:45,200 --> 00:56:47,839
an interim around october time but other

1339
00:56:47,839 --> 00:56:48,720
than that

1340
00:56:48,720 --> 00:56:51,040
we'd like to hopefully get to start the

1341
00:56:51,040 --> 00:56:53,440
working group last call

1342
00:56:53,440 --> 00:56:56,960
before the november ietf meeting so that

1343
00:56:56,960 --> 00:56:58,720
the working group last call ends just as

1344
00:56:58,720 --> 00:56:59,839
that meeting happens or something

1345
00:56:59,839 --> 00:57:00,880
perhaps

1346
00:57:00,880 --> 00:57:03,280
does that sound reasonable

1347
00:57:03,280 --> 00:57:04,079
yes

1348
00:57:04,079 --> 00:57:07,839
and earlier we're ready but otherwise

1349
00:57:09,119 --> 00:57:10,240
okay

1350
00:57:10,240 --> 00:57:12,799
so

1351
00:57:12,799 --> 00:57:14,319
nobody seems to be screaming and

1352
00:57:14,319 --> 00:57:16,960
objecting which is very nice um so i

1353
00:57:16,960 --> 00:57:18,720
think that's the plan

1354
00:57:18,720 --> 00:57:21,040
uh we'll try and aim to wither without

1355
00:57:21,040 --> 00:57:22,640
an intro and get to working past call

1356
00:57:22,640 --> 00:57:25,119
completed before november

1357
00:57:25,119 --> 00:57:27,040
um seems that seems feasible to me i

1358
00:57:27,040 --> 00:57:29,119
think given where we are so it's good

1359
00:57:29,119 --> 00:57:31,280
and thanks all for the work uh i think

1360
00:57:31,280 --> 00:57:32,720
we're at the kind of any other business

1361
00:57:32,720 --> 00:57:34,240
part of the agenda where we have a

1362
00:57:34,240 --> 00:57:35,520
couple of minutes

1363
00:57:35,520 --> 00:57:39,240
if there is any other business

1364
00:57:41,359 --> 00:57:44,720
don't uh yes paul our id is jumping up

1365
00:57:44,720 --> 00:57:46,559
sorry

1366
00:57:46,559 --> 00:57:48,559
i'm just on the preview topic um you

1367
00:57:48,559 --> 00:57:51,040
could maybe do an early sector review if

1368
00:57:51,040 --> 00:57:53,200
you're anywhere in a sort of lull where

1369
00:57:53,200 --> 00:57:55,520
there aren't any big changes happening

1370
00:57:55,520 --> 00:57:57,440
it could perhaps be useful

1371
00:57:57,440 --> 00:57:59,920
yeah yeah okay that's a good idea so

1372
00:57:59,920 --> 00:58:01,440
once we get the next drive that resolves

1373
00:58:01,440 --> 00:58:03,040
the issues that came out of the analysis

1374
00:58:03,040 --> 00:58:04,720
i think we can hit the sector review

1375
00:58:04,720 --> 00:58:08,040
request button

1376
00:58:09,359 --> 00:58:10,880
and

1377
00:58:10,880 --> 00:58:13,200
with that i think uh militia anything

1378
00:58:13,200 --> 00:58:14,640
else

1379
00:58:14,640 --> 00:58:16,640
so i just wanted to pass my thanks to

1380
00:58:16,640 --> 00:58:18,319
the formal analysis teams doing the

1381
00:58:18,319 --> 00:58:20,480
analysis many things guys i mean this is

1382
00:58:20,480 --> 00:58:23,839
really valuable for us

1383
00:58:25,359 --> 00:58:27,760
yeah actually i have a final request now

1384
00:58:27,760 --> 00:58:31,680
we are i mean if we follow um a proposal

1385
00:58:31,680 --> 00:58:33,680
from baptist and and

1386
00:58:33,680 --> 00:58:35,119
and david

1387
00:58:35,119 --> 00:58:38,000
we are making changes uh and it would be

1388
00:58:38,000 --> 00:58:39,760
great if those teams

1389
00:58:39,760 --> 00:58:41,839
who have been analyzing

1390
00:58:41,839 --> 00:58:43,839
the protocol could make another round

1391
00:58:43,839 --> 00:58:46,319
and see that we don't mess up things

1392
00:58:46,319 --> 00:58:47,680
when when we

1393
00:58:47,680 --> 00:58:50,720
make those final changes

1394
00:58:50,720 --> 00:58:52,400
sure yeah we should definitely ask i

1395
00:58:52,400 --> 00:58:53,359
mean you know

1396
00:58:53,359 --> 00:58:55,040
can't expect too much effort but it's

1397
00:58:55,040 --> 00:58:57,280
definitely worth asking

1398
00:58:57,280 --> 00:58:58,799
uh okay

1399
00:58:58,799 --> 00:59:00,079
so with that i think we're we're done

1400
00:59:00,079 --> 00:59:01,680
for today thanks for coming uh thanks

1401
00:59:01,680 --> 00:59:03,200
for all your work thanks again to the

1402
00:59:03,200 --> 00:59:04,400
people doing the formal analysis that

1403
00:59:04,400 --> 00:59:05,440
was really good

1404
00:59:05,440 --> 00:59:06,799
and

1405
00:59:06,799 --> 00:59:08,559
we might we may well meet next time i

1406
00:59:08,559 --> 00:59:10,559
guess depending on if working group last

1407
00:59:10,559 --> 00:59:12,640
call has any comments

1408
00:59:12,640 --> 00:59:14,960
thank you

1409
00:59:15,200 --> 00:59:16,640
thank you

1410
00:59:16,640 --> 00:59:19,960
thanks bishop

1411
00:59:37,359 --> 00:59:39,440
you

