1
00:00:08,880 --> 00:00:10,880
all right uh welcome to ippm this is the

2
00:00:10,880 --> 00:00:13,360
last session um i think we'll probably

3
00:00:13,360 --> 00:00:15,599
wait a couple minutes before starting to

4
00:00:15,599 --> 00:00:17,920
let some other people show up but

5
00:00:17,920 --> 00:00:20,480
i guess if you are remote uh maybe if

6
00:00:20,480 --> 00:00:22,560
someone can give a signal of if you can

7
00:00:22,560 --> 00:00:26,359
hear the audio just fine

8
00:00:34,160 --> 00:00:38,199
all right we have confirmation

9
00:00:57,760 --> 00:01:00,760
yep

10
00:01:14,320 --> 00:01:17,559
thank you

11
00:01:29,200 --> 00:01:32,200
yes

12
00:01:44,479 --> 00:01:47,479
so

13
00:01:58,320 --> 00:02:00,159
we're not in vienna even though the

14
00:02:00,159 --> 00:02:03,799
slide sets up

15
00:02:11,319 --> 00:02:14,879
okay does it

16
00:02:20,840 --> 00:02:23,120
matter so in case you're wondering we're

17
00:02:23,120 --> 00:02:26,440
still in philadelphia

18
00:02:37,280 --> 00:02:39,120
just a quick audio check before we get

19
00:02:39,120 --> 00:02:41,840
going as hell

20
00:02:41,840 --> 00:02:44,239
works fine we hear you

21
00:02:44,239 --> 00:02:46,640
thank you

22
00:02:49,040 --> 00:02:50,800
so congratulations everyone you've made

23
00:02:50,800 --> 00:02:54,400
it to the last session of the week

24
00:02:54,400 --> 00:02:57,519
this is ippm

25
00:02:58,640 --> 00:03:03,399
and we'll get started very briefly here

26
00:03:08,400 --> 00:03:10,480
i can take the time to remind you all if

27
00:03:10,480 --> 00:03:12,080
you're in the room that you should

28
00:03:12,080 --> 00:03:15,280
please wear your masks

29
00:03:15,280 --> 00:03:18,239
except for when you're up talking then

30
00:03:18,239 --> 00:03:19,519
you have the opportunity to take your

31
00:03:19,519 --> 00:03:21,120
mask off otherwise we would like you to

32
00:03:21,120 --> 00:03:23,120
keep the masks on

33
00:03:23,120 --> 00:03:25,920
and please use an ffp2 kn95 or

34
00:03:25,920 --> 00:03:29,879
equivalent mask as well

35
00:03:38,879 --> 00:03:41,879
oh

36
00:04:05,200 --> 00:04:06,159
okay

37
00:04:06,159 --> 00:04:07,519
we have now been teleported to

38
00:04:07,519 --> 00:04:11,519
philadelphia so let's continue

39
00:04:11,680 --> 00:04:13,519
so yeah welcome everyone

40
00:04:13,519 --> 00:04:15,280
this is ippm

41
00:04:15,280 --> 00:04:17,358
last session of the week i hope you're

42
00:04:17,358 --> 00:04:18,798
still awake and

43
00:04:18,798 --> 00:04:21,120
fresh

44
00:04:21,358 --> 00:04:23,919
and yeah let's get on with it i hope

45
00:04:23,919 --> 00:04:26,240
you're all familiar with this slide if

46
00:04:26,240 --> 00:04:27,919
you're not you should really try to read

47
00:04:27,919 --> 00:04:30,560
it by now um it it sort of it's

48
00:04:30,560 --> 00:04:32,400
important for whatever you try to say

49
00:04:32,400 --> 00:04:35,840
and what you contribute with there so

50
00:04:39,919 --> 00:04:42,160
meeting management uh we're running this

51
00:04:42,160 --> 00:04:44,320
as a hybrid meeting so you can join me

52
00:04:44,320 --> 00:04:48,560
deco on this link here um if you are on

53
00:04:48,560 --> 00:04:51,280
site and you want to join the queue

54
00:04:51,280 --> 00:04:54,320
please do so via meet echo either using

55
00:04:54,320 --> 00:04:56,560
the the on-site tool that you can have

56
00:04:56,560 --> 00:04:57,919
on your phone or

57
00:04:57,919 --> 00:05:02,080
via the meet echo session on your laptop

58
00:05:03,360 --> 00:05:05,120
we'll be using meet echo for sharing

59
00:05:05,120 --> 00:05:07,759
slides all the slides are loaded here

60
00:05:07,759 --> 00:05:08,960
we can

61
00:05:08,960 --> 00:05:10,560
advance the slides for you or you can

62
00:05:10,560 --> 00:05:12,479
request permission to

63
00:05:12,479 --> 00:05:15,120
to to advance the slides yourself

64
00:05:15,120 --> 00:05:17,520
notes can be fine here and we would like

65
00:05:17,520 --> 00:05:19,840
to have somebody volunteer to take notes

66
00:05:19,840 --> 00:05:21,919
for this session

67
00:05:21,919 --> 00:05:25,840
it's the last session of the week

68
00:05:27,360 --> 00:05:29,280
oh thank you very much

69
00:05:29,280 --> 00:05:31,199
do we have somebody who can take uh the

70
00:05:31,199 --> 00:05:34,080
role of jabber scribing as well

71
00:05:34,080 --> 00:05:36,800
just relaying stuff from the chat

72
00:05:36,800 --> 00:05:39,120
oh okay perfect perfect

73
00:05:39,120 --> 00:05:41,600
all good

74
00:05:43,039 --> 00:05:46,160
um so document status we have a couple

75
00:05:46,160 --> 00:05:49,039
of documents that are owned by the iusg

76
00:05:49,039 --> 00:05:51,440
right now there is a bunch of reviews of

77
00:05:51,440 --> 00:05:56,319
iom flags direct export rfc 8321 bis rfc

78
00:05:56,319 --> 00:05:59,680
8889 bis

79
00:05:59,680 --> 00:06:02,800
lots of good reviews some revised ids

80
00:06:02,800 --> 00:06:04,400
flying around and it looks like we're

81
00:06:04,400 --> 00:06:07,840
making good progress with this

82
00:06:08,240 --> 00:06:11,360
we also have iom conf state and ipv6

83
00:06:11,360 --> 00:06:13,120
options that have been handed over to

84
00:06:13,120 --> 00:06:14,400
our ad

85
00:06:14,400 --> 00:06:17,680
and we have an ongoing or we just had a

86
00:06:17,680 --> 00:06:20,319
working group last call on explicit flow

87
00:06:20,319 --> 00:06:21,600
measurements

88
00:06:21,600 --> 00:06:23,120
and i see we have martin duke in the

89
00:06:23,120 --> 00:06:25,360
queue

90
00:06:25,520 --> 00:06:27,360
i see i'm still the delegate from vienna

91
00:06:27,360 --> 00:06:29,440
that's cool um

92
00:06:29,440 --> 00:06:30,800
uh yeah so

93
00:06:30,800 --> 00:06:32,720
comp state that's on me i've sat on that

94
00:06:32,720 --> 00:06:33,600
for like

95
00:06:33,600 --> 00:06:35,759
almost a month i'll get to that like

96
00:06:35,759 --> 00:06:37,039
next week

97
00:06:37,039 --> 00:06:40,400
um ipv6 options to be clear is with the

98
00:06:40,400 --> 00:06:42,319
well i mean i i have possession of it

99
00:06:42,319 --> 00:06:44,639
but the action item is on the authors

100
00:06:44,639 --> 00:06:46,560
um just to reiterate that in case

101
00:06:46,560 --> 00:06:48,800
they're listening and don't realize that

102
00:06:48,800 --> 00:06:51,080
and um

103
00:06:51,080 --> 00:06:53,039
8321-8889 will probably be a while

104
00:06:53,039 --> 00:06:54,479
before i guess through isg i think we

105
00:06:54,479 --> 00:06:56,880
have to do another big scrub on

106
00:06:56,880 --> 00:06:58,880
the experimental language in there kind

107
00:06:58,880 --> 00:07:00,400
of lucy goosey

108
00:07:00,400 --> 00:07:03,520
you can try this or that stuff um

109
00:07:03,520 --> 00:07:05,599
and frankly input and help would be

110
00:07:05,599 --> 00:07:07,440
useful there uh if people aren't so

111
00:07:07,440 --> 00:07:09,199
inclined thanks

112
00:07:09,199 --> 00:07:11,599
thank you

113
00:07:12,479 --> 00:07:15,280
right next slide please

114
00:07:15,280 --> 00:07:17,599
so we have a quite packed agenda today

115
00:07:17,599 --> 00:07:20,240
uh lots of drafts uh so we will be

116
00:07:20,240 --> 00:07:22,800
focusing mainly on on drafts that we are

117
00:07:22,800 --> 00:07:24,080
working on that are adopted by the

118
00:07:24,080 --> 00:07:25,280
working group

119
00:07:25,280 --> 00:07:28,160
so uh we'll be starting with a

120
00:07:28,160 --> 00:07:30,080
presentation of

121
00:07:30,080 --> 00:07:32,560
iom data integrity and deployment it

122
00:07:32,560 --> 00:07:34,479
will be presented together and then we

123
00:07:34,479 --> 00:07:37,759
have the iom yang and stamp yang stamp

124
00:07:37,759 --> 00:07:39,599
srpm

125
00:07:39,599 --> 00:07:41,199
then we will have a bit longer

126
00:07:41,199 --> 00:07:45,440
presentation on the ip capacity protocol

127
00:07:45,440 --> 00:07:46,879
followed by a presentation on the

128
00:07:46,879 --> 00:07:49,120
explicit flow measurements which has

129
00:07:49,120 --> 00:07:50,960
just been through uh

130
00:07:50,960 --> 00:07:52,639
working group last call

131
00:07:52,639 --> 00:07:56,400
um then we have ippm responsiveness

132
00:07:56,400 --> 00:08:00,319
and encrypted pdm v2 these are the these

133
00:08:00,319 --> 00:08:03,199
are the adopted drafts that we focus on

134
00:08:03,199 --> 00:08:06,560
this uh this meeting um are people fine

135
00:08:06,560 --> 00:08:09,280
with this order of

136
00:08:09,280 --> 00:08:12,280
presentations

137
00:08:12,560 --> 00:08:13,840
so it seems

138
00:08:13,840 --> 00:08:15,360
uh and then we have one more

139
00:08:15,360 --> 00:08:17,759
presentation uh it's about precision

140
00:08:17,759 --> 00:08:20,000
availability metrics uh which will be

141
00:08:20,000 --> 00:08:23,800
presented by greg

142
00:08:26,080 --> 00:08:29,639
so let's get started

143
00:08:41,839 --> 00:08:43,760
hi everyone so

144
00:08:43,760 --> 00:08:46,959
just a quick update on the iom integrity

145
00:08:46,959 --> 00:08:49,760
draft first

146
00:08:50,720 --> 00:08:53,040
okay

147
00:08:53,680 --> 00:08:57,040
so what we made as changes from previous

148
00:08:57,040 --> 00:09:00,080
version uh is pretty light so we can

149
00:09:00,080 --> 00:09:01,360
call on

150
00:09:01,360 --> 00:09:04,000
the document quite or pretty stable by

151
00:09:04,000 --> 00:09:05,120
now

152
00:09:05,120 --> 00:09:09,040
the changes include um that we replaced

153
00:09:09,040 --> 00:09:12,080
references to draft that became rfcs so

154
00:09:12,080 --> 00:09:14,399
you can find them on the slides

155
00:09:14,399 --> 00:09:15,760
we also

156
00:09:15,760 --> 00:09:18,399
rewarded some important parts

157
00:09:18,399 --> 00:09:21,279
and that led to actually merging the

158
00:09:21,279 --> 00:09:23,839
capsulating node and valid

159
00:09:23,839 --> 00:09:26,560
sorry validator roars

160
00:09:26,560 --> 00:09:28,480
and we also included some editorial

161
00:09:28,480 --> 00:09:29,760
changes

162
00:09:29,760 --> 00:09:32,000
so basically you can find the poor

163
00:09:32,000 --> 00:09:33,040
request

164
00:09:33,040 --> 00:09:35,600
by clicking that link and you will have

165
00:09:35,600 --> 00:09:38,880
each detail that you need

166
00:09:39,279 --> 00:09:41,600
and so a good news is that there is an

167
00:09:41,600 --> 00:09:43,360
ongoing implementation effort by the

168
00:09:43,360 --> 00:09:45,920
university of liege in belgium

169
00:09:45,920 --> 00:09:49,560
so let's look

170
00:09:50,720 --> 00:09:52,399
thank you

171
00:09:52,399 --> 00:09:54,399
and so we could actually already

172
00:09:54,399 --> 00:09:56,320
consider a working group last call maybe

173
00:09:56,320 --> 00:09:59,600
but we feel that we're not in a hurry so

174
00:09:59,600 --> 00:10:01,600
this is my question for you should we

175
00:10:01,600 --> 00:10:03,680
wait for feedback on the implementation

176
00:10:03,680 --> 00:10:05,680
we should have it by

177
00:10:05,680 --> 00:10:08,320
let's say in september and then consider

178
00:10:08,320 --> 00:10:10,000
working with pascal that makes a lot of

179
00:10:10,000 --> 00:10:11,920
sense

180
00:10:11,920 --> 00:10:13,680
um is

181
00:10:13,680 --> 00:10:15,200
do you know if there's any plan for

182
00:10:15,200 --> 00:10:17,279
other implementations so we can

183
00:10:17,279 --> 00:10:19,440
test interrupt with this i don't know

184
00:10:19,440 --> 00:10:21,440
how much that right now this is only

185
00:10:21,440 --> 00:10:24,560
planned for vpp okay um

186
00:10:24,560 --> 00:10:26,560
i i think

187
00:10:26,560 --> 00:10:27,920
having the one implementation is

188
00:10:27,920 --> 00:10:29,440
probably sufficient so we can do working

189
00:10:29,440 --> 00:10:30,839
group last call

190
00:10:30,839 --> 00:10:34,880
reviews um it would be fantastic to

191
00:10:34,880 --> 00:10:37,440
see other implementations

192
00:10:37,440 --> 00:10:39,600
um you know as we are progressing the

193
00:10:39,600 --> 00:10:41,360
document so i don't know if we can try

194
00:10:41,360 --> 00:10:42,880
to rope people into doing hackathon at

195
00:10:42,880 --> 00:10:44,880
the next itf or something like that

196
00:10:44,880 --> 00:10:46,399
that could be useful

197
00:10:46,399 --> 00:10:48,320
this is worth mentioning that um the

198
00:10:48,320 --> 00:10:50,000
implementation is about the integrity of

199
00:10:50,000 --> 00:10:51,600
the trace because this is kind of a

200
00:10:51,600 --> 00:10:53,760
corner case in the in the integrity of

201
00:10:53,760 --> 00:10:56,800
iom so this is

202
00:10:57,120 --> 00:11:00,880
so that's all for the iom integrity

203
00:11:00,880 --> 00:11:02,399
i don't know if tal is

204
00:11:02,399 --> 00:11:04,560
already available should i take the

205
00:11:04,560 --> 00:11:06,480
presentation for him yeah because you

206
00:11:06,480 --> 00:11:08,480
had a conflict so

207
00:11:08,480 --> 00:11:09,680
so

208
00:11:09,680 --> 00:11:11,760
quite quick for this one too next slide

209
00:11:11,760 --> 00:11:14,000
please so

210
00:11:14,000 --> 00:11:18,880
no change from uh ietf 112

211
00:11:18,880 --> 00:11:22,160
we published the new version right after

212
00:11:22,160 --> 00:11:26,079
uh vienna and basically it only includes

213
00:11:26,079 --> 00:11:29,360
references to beer and so

214
00:11:29,360 --> 00:11:32,000
that led us to consider maybe a working

215
00:11:32,000 --> 00:11:34,640
group last call

216
00:11:37,360 --> 00:11:40,360
xiaomi

217
00:11:47,360 --> 00:11:50,560
hi uh xiaomi from zte i have a comment

218
00:11:50,560 --> 00:11:52,399
on this document

219
00:11:52,399 --> 00:11:53,279
uh

220
00:11:53,279 --> 00:11:54,880
i suggest

221
00:11:54,880 --> 00:11:58,240
authors to add one more reference

222
00:11:58,240 --> 00:12:01,120
to iom com state

223
00:12:01,120 --> 00:12:02,320
as you have

224
00:12:02,320 --> 00:12:04,959
seen on this chair slide

225
00:12:04,959 --> 00:12:07,600
that document is now

226
00:12:07,600 --> 00:12:09,600
passing working group last call and with

227
00:12:09,600 --> 00:12:12,240
our transporter ad so

228
00:12:12,240 --> 00:12:15,839
i suggest you to add that reference

229
00:12:15,839 --> 00:12:18,320
and add some description on the function

230
00:12:18,320 --> 00:12:22,320
of iom capabilities discovery

231
00:12:22,320 --> 00:12:25,200
thank you okay thank you so again i'm

232
00:12:25,200 --> 00:12:27,440
just a proxy of tal and other authors of

233
00:12:27,440 --> 00:12:28,639
the document but i'm sure they will

234
00:12:28,639 --> 00:12:31,760
consider your your remark thank you

235
00:12:31,760 --> 00:12:33,920
thank you for the notes should we get

236
00:12:33,920 --> 00:12:36,880
that down i think that's the conf state

237
00:12:36,880 --> 00:12:38,800
configuration state document that they

238
00:12:38,800 --> 00:12:41,599
want to reference too

239
00:12:43,440 --> 00:12:44,880
uh

240
00:12:44,880 --> 00:12:46,800
gentlemen was asking for a

241
00:12:46,800 --> 00:12:48,639
reference from

242
00:12:48,639 --> 00:12:52,000
the deployment document to the iom conf

243
00:12:52,000 --> 00:12:54,399
state

244
00:12:59,519 --> 00:13:02,680
thank you

245
00:13:18,880 --> 00:13:20,480
hey can you hear me

246
00:13:20,480 --> 00:13:23,120
this is it yes

247
00:13:23,120 --> 00:13:24,240
thank you

248
00:13:24,240 --> 00:13:26,720
and in this presentation i will report

249
00:13:26,720 --> 00:13:29,839
the major changes since last meeting

250
00:13:29,839 --> 00:13:33,399
and next

251
00:13:34,959 --> 00:13:38,399
um we adjust the comments from andy as

252
00:13:38,399 --> 00:13:41,680
the young doctor early review there are

253
00:13:41,680 --> 00:13:45,040
some major uh minor issues

254
00:13:45,040 --> 00:13:48,720
firstly use the derived from our self

255
00:13:48,720 --> 00:13:51,920
for the when statement using identities

256
00:13:51,920 --> 00:13:54,639
we followed this suggestion and modified

257
00:13:54,639 --> 00:13:56,079
the yam model

258
00:13:56,079 --> 00:13:58,240
and then use the

259
00:13:58,240 --> 00:13:59,680
interface with

260
00:13:59,680 --> 00:14:02,480
data type yes we align

261
00:14:02,480 --> 00:14:05,760
and the use of plans

262
00:14:05,760 --> 00:14:09,519
string as a list key to adjust this we

263
00:14:09,519 --> 00:14:14,839
add length 1 to max to disallow empty

264
00:14:14,839 --> 00:14:19,680
strings and to cl uh clarify the use of

265
00:14:19,680 --> 00:14:21,680
order by user

266
00:14:21,680 --> 00:14:23,680
we checked the list

267
00:14:23,680 --> 00:14:25,360
and the usage

268
00:14:25,360 --> 00:14:28,800
there is actually no special user order

269
00:14:28,800 --> 00:14:32,160
so we removed this statement

270
00:14:32,160 --> 00:14:34,639
and is there any mandatory

271
00:14:34,639 --> 00:14:36,720
functionalities

272
00:14:36,720 --> 00:14:41,360
we add a description to clarify this

273
00:14:41,360 --> 00:14:44,639
there is no monetary type of profile in

274
00:14:44,639 --> 00:14:47,920
the list but at least one profile should

275
00:14:47,920 --> 00:14:49,920
be added

276
00:14:49,920 --> 00:14:53,279
and then there are several points in the

277
00:14:53,279 --> 00:14:56,720
model the description are very simple we

278
00:14:56,720 --> 00:14:59,279
added more detailed information here and

279
00:14:59,279 --> 00:15:03,600
there especially for the mentioned lines

280
00:15:03,600 --> 00:15:05,360
at last we

281
00:15:05,360 --> 00:15:07,519
cleaned some needs

282
00:15:07,519 --> 00:15:09,600
and that's all

283
00:15:09,600 --> 00:15:12,600
next

284
00:15:13,600 --> 00:15:15,639
the rfc

285
00:15:15,639 --> 00:15:18,639
9197 is published

286
00:15:18,639 --> 00:15:21,040
this year model is already aligned

287
00:15:21,040 --> 00:15:24,240
stable and mature so we would like to

288
00:15:24,240 --> 00:15:26,959
ask for group last call

289
00:15:26,959 --> 00:15:30,199
thank you

290
00:15:43,199 --> 00:15:45,920
yeah it it seems like a good time to do

291
00:15:45,920 --> 00:15:48,160
that

292
00:15:48,160 --> 00:15:51,560
thank you very much

293
00:16:01,480 --> 00:16:05,639
morgan yep

294
00:16:11,759 --> 00:16:15,839
okay hello um next slide please

295
00:16:15,839 --> 00:16:20,160
um so this is justin um give you a quick

296
00:16:20,160 --> 00:16:21,360
update

297
00:16:21,360 --> 00:16:23,519
we progressed the work

298
00:16:23,519 --> 00:16:27,040
and as discussed in

299
00:16:27,040 --> 00:16:29,600
our previous meeting so included the

300
00:16:29,600 --> 00:16:32,000
coverage of

301
00:16:32,000 --> 00:16:35,519
rfc 8972

302
00:16:35,519 --> 00:16:36,720
stamp

303
00:16:36,720 --> 00:16:38,959
options extensions

304
00:16:38,959 --> 00:16:40,720
so

305
00:16:40,720 --> 00:16:43,279
next slide

306
00:16:44,240 --> 00:16:46,240
so now it's

307
00:16:46,240 --> 00:16:47,519
for their

308
00:16:47,519 --> 00:16:50,160
operational stamp information now it's a

309
00:16:50,160 --> 00:16:52,399
config false so it will be

310
00:16:52,399 --> 00:16:54,240
read only

311
00:16:54,240 --> 00:16:56,800
next slide

312
00:16:58,560 --> 00:16:59,759
and

313
00:16:59,759 --> 00:17:03,800
it includes the uh

314
00:17:04,919 --> 00:17:08,720
8972 including a stamp uh session

315
00:17:08,720 --> 00:17:13,119
identifier that uh may be used for uh

316
00:17:13,119 --> 00:17:16,319
session demultiplexing as well as extra

317
00:17:16,319 --> 00:17:19,039
padding location uh tob time step

318
00:17:19,039 --> 00:17:20,959
information tv

319
00:17:20,959 --> 00:17:25,280
class of service that allows um

320
00:17:25,280 --> 00:17:28,880
testing uh treatment of different

321
00:17:28,880 --> 00:17:33,440
dhcp markings and uh in one way

322
00:17:33,440 --> 00:17:35,440
uh both directions

323
00:17:35,440 --> 00:17:37,600
what direct measurement was

324
00:17:37,600 --> 00:17:41,200
access report uh follow-up telemetry

325
00:17:41,200 --> 00:17:45,679
so to uh improve um accuracy of

326
00:17:45,679 --> 00:17:48,320
timing measurement in particular

327
00:17:48,320 --> 00:17:51,280
in a virtual environment

328
00:17:51,280 --> 00:17:55,600
nfv and authentication for

329
00:17:55,600 --> 00:17:58,240
extensions

330
00:17:59,120 --> 00:18:01,039
next slide

331
00:18:01,039 --> 00:18:03,679
so next we'll continue working and we'll

332
00:18:03,679 --> 00:18:06,559
try to get uh it ready for the working

333
00:18:06,559 --> 00:18:10,559
group last call by the next meeting

334
00:18:12,080 --> 00:18:12,840
any

335
00:18:12,840 --> 00:18:16,000
questions so please uh take a look at

336
00:18:16,000 --> 00:18:19,440
this document and uh please send your

337
00:18:19,440 --> 00:18:21,840
comments and uh questions on the mailing

338
00:18:21,840 --> 00:18:23,280
list

339
00:18:23,280 --> 00:18:24,240
thank you

340
00:18:24,240 --> 00:18:27,039
um yeah thank you for this

341
00:18:27,039 --> 00:18:30,000
when you uh when we have a new version

342
00:18:30,000 --> 00:18:31,840
that we think addresses all of those

343
00:18:31,840 --> 00:18:33,760
early comments

344
00:18:33,760 --> 00:18:35,760
um that looks like i think that early

345
00:18:35,760 --> 00:18:37,440
review is done quite a long time ago yes

346
00:18:37,440 --> 00:18:39,600
2018. um so

347
00:18:39,600 --> 00:18:41,440
i'm wondering if it would make sense um

348
00:18:41,440 --> 00:18:43,679
you can just let us know on the list and

349
00:18:43,679 --> 00:18:45,520
then we can kick off another young

350
00:18:45,520 --> 00:18:47,760
doctor's review uh we yeah and then

351
00:18:47,760 --> 00:18:49,679
we'll do last call yeah we follow

352
00:18:49,679 --> 00:18:51,840
by the list of comments that mahesh

353
00:18:51,840 --> 00:18:54,640
provided and addressing when we feel

354
00:18:54,640 --> 00:18:56,799
comfortable then we'll appreciate your

355
00:18:56,799 --> 00:18:59,120
help and we'll reach out so to have

356
00:18:59,120 --> 00:19:00,320
another

357
00:19:00,320 --> 00:19:03,559
thank you

358
00:19:18,080 --> 00:19:21,080
hmm

359
00:19:29,280 --> 00:19:31,919
uh hi everyone my name is raques gandhi

360
00:19:31,919 --> 00:19:34,559
and i'm presenting the stem extension

361
00:19:34,559 --> 00:19:36,160
for sr

362
00:19:36,160 --> 00:19:39,600
on behalf of the authors listed

363
00:19:39,600 --> 00:19:42,160
next night please

364
00:19:42,160 --> 00:19:45,120
so uh it's a very brief update on the

365
00:19:45,120 --> 00:19:47,520
revision that we posted recently

366
00:19:47,520 --> 00:19:50,000
uh just to highlight uh some work in

367
00:19:50,000 --> 00:19:52,799
other working groups and the next steps

368
00:19:52,799 --> 00:19:55,280
excellent

369
00:19:55,760 --> 00:20:00,000
so uh many thanks to footer for

370
00:20:00,000 --> 00:20:03,600
his help with aligning the draft with

371
00:20:03,600 --> 00:20:06,640
rfc 8972 for the

372
00:20:06,640 --> 00:20:09,280
flags and the tlvs

373
00:20:09,280 --> 00:20:11,679
so the new flag we had defined

374
00:20:11,679 --> 00:20:14,799
verification flag uh it applies to all

375
00:20:14,799 --> 00:20:16,720
the stamp tlvs

376
00:20:16,720 --> 00:20:18,720
and including the two tlvs defined in

377
00:20:18,720 --> 00:20:22,400
this trap so some text added for that

378
00:20:22,400 --> 00:20:23,520
and

379
00:20:23,520 --> 00:20:25,679
there is a notion of symmetric packet

380
00:20:25,679 --> 00:20:27,120
size

381
00:20:27,120 --> 00:20:30,320
so this is also added for the the two

382
00:20:30,320 --> 00:20:32,840
tlus defined uh in this

383
00:20:32,840 --> 00:20:36,799
draft and this also allows us to

384
00:20:36,799 --> 00:20:39,520
transmit the tlv flags back to the

385
00:20:39,520 --> 00:20:41,280
sender

386
00:20:41,280 --> 00:20:44,159
so other than these two updates um

387
00:20:44,159 --> 00:20:46,720
we added experimental values for the

388
00:20:46,720 --> 00:20:49,200
tlvs in order to facilitate the

389
00:20:49,200 --> 00:20:51,760
interrupt testing and implementation

390
00:20:51,760 --> 00:20:54,400
uh but we also have made the request for

391
00:20:54,400 --> 00:20:57,919
um earlier allocation as well

392
00:20:57,919 --> 00:20:59,679
there are some few minor editorial

393
00:20:59,679 --> 00:21:01,760
changes and we don't have any open

394
00:21:01,760 --> 00:21:03,200
issues

395
00:21:03,200 --> 00:21:05,360
so many thanks to everyone who reviewed

396
00:21:05,360 --> 00:21:07,280
the document and provided comments as

397
00:21:07,280 --> 00:21:08,720
well

398
00:21:08,720 --> 00:21:11,679
and next slide please

399
00:21:11,679 --> 00:21:14,720
so we do have a few uh companion drafts

400
00:21:14,720 --> 00:21:18,480
in other working group this one in the

401
00:21:18,480 --> 00:21:20,159
spring for the

402
00:21:20,159 --> 00:21:21,760
srpm

403
00:21:21,760 --> 00:21:23,200
using a stamp

404
00:21:23,200 --> 00:21:26,159
there is also some for the enhanced srpm

405
00:21:26,159 --> 00:21:29,200
as well as one for the mpls

406
00:21:29,200 --> 00:21:30,960
pseudo wire

407
00:21:30,960 --> 00:21:33,760
next slide please

408
00:21:34,480 --> 00:21:37,520
and uh we are seeking your comments and

409
00:21:37,520 --> 00:21:40,159
uh suggestions uh at this point as well

410
00:21:40,159 --> 00:21:41,039
as

411
00:21:41,039 --> 00:21:42,840
the inaudible

412
00:21:42,840 --> 00:21:47,678
location thank you greg yeah comments

413
00:21:49,200 --> 00:21:52,159
hi thank you rakesh and uh i just wanted

414
00:21:52,159 --> 00:21:53,919
to um

415
00:21:53,919 --> 00:21:55,120
fyi

416
00:21:55,120 --> 00:21:58,000
uh we talked with the and

417
00:21:58,000 --> 00:21:59,440
footer about

418
00:21:59,440 --> 00:22:01,679
some other methods and

419
00:22:01,679 --> 00:22:04,720
we started work on

420
00:22:04,720 --> 00:22:07,919
document ip udp encapsulation

421
00:22:07,919 --> 00:22:09,280
of stamp

422
00:22:09,280 --> 00:22:14,080
in mpos and using lsp team to bootstrap

423
00:22:14,080 --> 00:22:16,799
uh stamped session along with their

424
00:22:16,799 --> 00:22:19,520
controlling the path for reflected test

425
00:22:19,520 --> 00:22:22,400
packets so

426
00:22:22,400 --> 00:22:25,760
aiming this work for mpos working group

427
00:22:25,760 --> 00:22:28,720
but appreciate your reviews and comments

428
00:22:28,720 --> 00:22:31,520
to mpos and ittm working groups thank

429
00:22:31,520 --> 00:22:32,880
you

430
00:22:32,880 --> 00:22:33,760
okay

431
00:22:33,760 --> 00:22:35,919
thanks greg

432
00:22:35,919 --> 00:22:38,320
yeah we had a good meeting and

433
00:22:38,320 --> 00:22:41,360
there were some good discussions and

434
00:22:41,360 --> 00:22:43,039
we'll update the draft if there is any

435
00:22:43,039 --> 00:22:45,039
need for it as well thanks

436
00:22:45,039 --> 00:22:47,280
that's great to hear um

437
00:22:47,280 --> 00:22:49,919
so regarding the early allocations since

438
00:22:49,919 --> 00:22:52,080
that's something we can do is that

439
00:22:52,080 --> 00:22:54,080
are there any objections to doing those

440
00:22:54,080 --> 00:22:56,720
early allocations i guess you know greg

441
00:22:56,720 --> 00:22:57,840
we had gotten a lot of comments from you

442
00:22:57,840 --> 00:22:59,120
before are we

443
00:22:59,120 --> 00:23:01,600
do we think it's okay to go ahead and

444
00:23:01,600 --> 00:23:04,480
ask ayanna for that now um

445
00:23:04,480 --> 00:23:05,440
okay

446
00:23:05,440 --> 00:23:08,880
i haven't thought about it as objections

447
00:23:08,880 --> 00:23:10,480
i haven't thought of my comments as

448
00:23:10,480 --> 00:23:13,120
objections so it was comments and as

449
00:23:13,120 --> 00:23:15,679
rakesh pointed out so we had a meeting

450
00:23:15,679 --> 00:23:19,440
and we realized that

451
00:23:19,600 --> 00:23:23,200
there are many ways to um so okay the

452
00:23:23,200 --> 00:23:25,760
problem that this draft addresses is

453
00:23:25,760 --> 00:23:28,320
real operational problems so now we

454
00:23:28,320 --> 00:23:30,320
started to work on a little bit

455
00:23:30,320 --> 00:23:31,919
different approach to addressing the

456
00:23:31,919 --> 00:23:33,200
same problem

457
00:23:33,200 --> 00:23:35,760
so yeah it's perfectly fine to go and

458
00:23:35,760 --> 00:23:37,760
help with the implementations and get

459
00:23:37,760 --> 00:23:40,880
the early ayanna so to put it in a uh

460
00:23:40,880 --> 00:23:41,679
good

461
00:23:41,679 --> 00:23:42,720
footing

462
00:23:42,720 --> 00:23:44,240
great thank you thank you very much

463
00:23:44,240 --> 00:23:46,240
thank you very much we'll we'll continue

464
00:23:46,240 --> 00:23:48,320
with that then okay yeah

465
00:23:48,320 --> 00:23:51,840
okay thanks

466
00:23:53,760 --> 00:23:56,080
awesome

467
00:24:01,520 --> 00:24:02,880
oh

468
00:24:02,880 --> 00:24:05,520
hi everybody um

469
00:24:05,520 --> 00:24:07,919
i apologize for my voice i've got a uh

470
00:24:07,919 --> 00:24:09,600
vocal cord problem

471
00:24:09,600 --> 00:24:12,480
and i'll uh i'll go to the video here

472
00:24:12,480 --> 00:24:13,760
briefly

473
00:24:13,760 --> 00:24:15,520
to uh

474
00:24:15,520 --> 00:24:16,559
uh

475
00:24:16,559 --> 00:24:18,559
slots for the media are already taken

476
00:24:18,559 --> 00:24:20,559
blah blah okay

477
00:24:20,559 --> 00:24:22,640
do you want to share your screen

478
00:24:22,640 --> 00:24:25,440
no i just wanna oh i i screwed up sorry

479
00:24:25,440 --> 00:24:27,120
let me cancel that

480
00:24:27,120 --> 00:24:28,960
i just wanted to

481
00:24:28,960 --> 00:24:33,279
just wanted to wave to everybody hi

482
00:24:33,279 --> 00:24:35,760
and now i'll stop the video to keep from

483
00:24:35,760 --> 00:24:38,720
bombing either my audio or my wife's uh

484
00:24:38,720 --> 00:24:39,919
class

485
00:24:39,919 --> 00:24:41,120
so um

486
00:24:41,120 --> 00:24:43,520
yeah hi uh we've um

487
00:24:43,520 --> 00:24:45,679
we've made some real uh substantial

488
00:24:45,679 --> 00:24:48,640
progress in the last uh interim period

489
00:24:48,640 --> 00:24:50,000
between meetings

490
00:24:50,000 --> 00:24:52,799
and that's uh thanks to tommy and marcus

491
00:24:52,799 --> 00:24:53,600
for

492
00:24:53,600 --> 00:24:56,000
initiating the sector review

493
00:24:56,000 --> 00:24:56,799
and

494
00:24:56,799 --> 00:24:58,559
thanks to brian

495
00:24:58,559 --> 00:24:59,520
weiss

496
00:24:59,520 --> 00:25:02,880
who um it was responded to us twice now

497
00:25:02,880 --> 00:25:05,840
and so uh this uh this first page is uh

498
00:25:05,840 --> 00:25:08,320
mostly about the uh the comments we've

499
00:25:08,320 --> 00:25:11,120
already resolved in uh in the zero two

500
00:25:11,120 --> 00:25:12,400
of the draft

501
00:25:12,400 --> 00:25:13,279
and

502
00:25:13,279 --> 00:25:14,960
then we got some more comments and we

503
00:25:14,960 --> 00:25:17,520
had some open issues so well we're going

504
00:25:17,520 --> 00:25:20,400
to go on with with that um as they know

505
00:25:20,400 --> 00:25:22,080
in the remaining slides

506
00:25:22,080 --> 00:25:24,559
but um

507
00:25:24,880 --> 00:25:27,279
let me say this that uh i think a lot of

508
00:25:27,279 --> 00:25:29,120
things have come out of the sector

509
00:25:29,120 --> 00:25:30,080
review

510
00:25:30,080 --> 00:25:32,640
that are really valuable for anybody

511
00:25:32,640 --> 00:25:35,279
designing an active measurement or a

512
00:25:35,279 --> 00:25:37,120
protocol to deliver that active

513
00:25:37,120 --> 00:25:38,159
measurement

514
00:25:38,159 --> 00:25:40,400
and um so i want people to think in

515
00:25:40,400 --> 00:25:42,240
those terms

516
00:25:42,240 --> 00:25:43,840
you know how can i apply this to what

517
00:25:43,840 --> 00:25:46,240
i'm doing uh it's certainly more

518
00:25:46,240 --> 00:25:48,240
applicable to anything beyond the

519
00:25:48,240 --> 00:25:49,919
capacity protocol

520
00:25:49,919 --> 00:25:52,799
and the truth is the capacity protocols

521
00:25:52,799 --> 00:25:55,039
more applicable to things beyond just

522
00:25:55,039 --> 00:25:56,559
measuring capacity

523
00:25:56,559 --> 00:25:59,520
we've been measuring uh loss latency

524
00:25:59,520 --> 00:26:01,520
reordering duplication we've been

525
00:26:01,520 --> 00:26:04,720
measuring everything since day one

526
00:26:04,720 --> 00:26:07,600
so um those are the uh you know it's

527
00:26:07,600 --> 00:26:10,000
it's really lined up very well in udp

528
00:26:10,000 --> 00:26:10,960
based

529
00:26:10,960 --> 00:26:12,159
transport

530
00:26:12,159 --> 00:26:13,520
to measure what everybody needs to

531
00:26:13,520 --> 00:26:15,760
measure

532
00:26:15,760 --> 00:26:16,880
excuse me

533
00:26:16,880 --> 00:26:18,559
so there's there are two categories of

534
00:26:18,559 --> 00:26:22,000
changes uh the text clarifications alone

535
00:26:22,000 --> 00:26:25,440
and the text plus protocol modifications

536
00:26:25,440 --> 00:26:29,440
so the the text is uh clarified in o2

537
00:26:29,440 --> 00:26:32,080
um we also clarified that we used a

538
00:26:32,080 --> 00:26:34,480
conventional communication setup with a

539
00:26:34,480 --> 00:26:37,679
well-known port at the server and

540
00:26:37,679 --> 00:26:39,840
the uh brian's observation that

541
00:26:39,840 --> 00:26:41,600
authentication mode

542
00:26:41,600 --> 00:26:44,159
can help us with uh uh protections for

543
00:26:44,159 --> 00:26:46,159
features like bit error checking

544
00:26:46,159 --> 00:26:47,360
um

545
00:26:47,360 --> 00:26:49,760
let's see so uh like i said uh all the

546
00:26:49,760 --> 00:26:52,080
all that sort of stuff is in

547
00:26:52,080 --> 00:26:54,080
touchdown in note 2.

548
00:26:54,080 --> 00:26:55,600
and we had this

549
00:26:55,600 --> 00:26:58,720
the original idea of four security modes

550
00:26:58,720 --> 00:27:00,159
for operation

551
00:27:00,159 --> 00:27:03,039
uh the unauthenticated and the password

552
00:27:03,039 --> 00:27:05,679
uh auth code it is

553
00:27:05,679 --> 00:27:08,559
implemented but uh authorizing

554
00:27:08,559 --> 00:27:10,960
uh for all the important messages and

555
00:27:10,960 --> 00:27:13,200
encrypt all the things we were looking

556
00:27:13,200 --> 00:27:16,400
for one more recommendation on item d

557
00:27:16,400 --> 00:27:19,200
here and that's uh that's been a topic

558
00:27:19,200 --> 00:27:20,399
of the um

559
00:27:20,399 --> 00:27:22,320
uh the other uh

560
00:27:22,320 --> 00:27:25,360
um messages we've exchanged recently

561
00:27:25,360 --> 00:27:28,080
so if we go on to slide three here brian

562
00:27:28,080 --> 00:27:30,799
or um not brian

563
00:27:30,799 --> 00:27:32,960
tommy or whoever's doing it who is it is

564
00:27:32,960 --> 00:27:35,120
it tommy okay thanks tommy

565
00:27:35,120 --> 00:27:36,720
i'm doing so well

566
00:27:36,720 --> 00:27:38,559
yeah cool thank you

567
00:27:38,559 --> 00:27:39,919
so the the thing

568
00:27:39,919 --> 00:27:42,640
the main things uh to keep in mind here

569
00:27:42,640 --> 00:27:43,760
this this is

570
00:27:43,760 --> 00:27:46,720
um the previous draft and the current

571
00:27:46,720 --> 00:27:47,840
draft

572
00:27:47,840 --> 00:27:50,480
described the protocol version nine

573
00:27:50,480 --> 00:27:52,799
and that looks like this

574
00:27:52,799 --> 00:27:55,279
we've got a setup exchange we've got a

575
00:27:55,279 --> 00:27:58,080
test activation exchange and those are

576
00:27:58,080 --> 00:28:00,720
both parts of the setup phase

577
00:28:00,720 --> 00:28:02,640
and we look on those differently from

578
00:28:02,640 --> 00:28:05,279
the test phase in terms of their demands

579
00:28:05,279 --> 00:28:06,480
on the hosts

580
00:28:06,480 --> 00:28:07,840
and their um

581
00:28:07,840 --> 00:28:10,640
uh requirements and the information they

582
00:28:10,640 --> 00:28:11,760
expose

583
00:28:11,760 --> 00:28:14,480
and also uh exchange

584
00:28:14,480 --> 00:28:15,440
so

585
00:28:15,440 --> 00:28:17,279
these in red

586
00:28:17,279 --> 00:28:18,480
we were

587
00:28:18,480 --> 00:28:21,039
you know zero one of the draft we were

588
00:28:21,039 --> 00:28:22,559
adding the

589
00:28:22,559 --> 00:28:25,200
server admission control and also the

590
00:28:25,200 --> 00:28:29,039
load adjustment uh algorithm check

591
00:28:29,039 --> 00:28:31,600
so we we had the mod ability to modify

592
00:28:31,600 --> 00:28:34,000
the load adjustment algorithm already

593
00:28:34,000 --> 00:28:36,159
built into the protocol we'll get into

594
00:28:36,159 --> 00:28:37,760
that a little more and then the next

595
00:28:37,760 --> 00:28:38,799
slide

596
00:28:38,799 --> 00:28:41,120
so um we're actually further down so

597
00:28:41,120 --> 00:28:45,080
slide four there tommy

598
00:28:45,440 --> 00:28:46,720
thanks

599
00:28:46,720 --> 00:28:48,559
so now we're looking at the next version

600
00:28:48,559 --> 00:28:50,399
of the protocol the next version of the

601
00:28:50,399 --> 00:28:51,520
draft

602
00:28:51,520 --> 00:28:52,399
and

603
00:28:52,399 --> 00:28:54,480
we've still got the setup exchange still

604
00:28:54,480 --> 00:28:56,799
got the test activation exchange

605
00:28:56,799 --> 00:28:59,600
and what we're uh what brian's basically

606
00:28:59,600 --> 00:29:00,960
asking us to do

607
00:29:00,960 --> 00:29:02,799
is to uh add the

608
00:29:02,799 --> 00:29:05,760
the auth digest and processing on the

609
00:29:05,760 --> 00:29:08,480
reply in this test setup so that would

610
00:29:08,480 --> 00:29:10,480
make a complete

611
00:29:10,480 --> 00:29:13,200
authenticated exchange for the initial

612
00:29:13,200 --> 00:29:15,760
commands for things like the um

613
00:29:15,760 --> 00:29:18,640
the femoral report and the bandwidth

614
00:29:18,640 --> 00:29:21,039
admission check and so forth

615
00:29:21,039 --> 00:29:22,159
and then

616
00:29:22,159 --> 00:29:25,120
what he's also asking us to do is to add

617
00:29:25,120 --> 00:29:28,559
the authentication digest on the request

618
00:29:28,559 --> 00:29:31,039
and reply for the test activation

619
00:29:31,039 --> 00:29:32,320
exchange

620
00:29:32,320 --> 00:29:34,880
so that's a that's an important ad

621
00:29:34,880 --> 00:29:35,679
um

622
00:29:35,679 --> 00:29:37,679
we think we can do this

623
00:29:37,679 --> 00:29:40,000
obviously it means a protocol uh

624
00:29:40,000 --> 00:29:42,240
modification and updating the fields and

625
00:29:42,240 --> 00:29:44,960
so forth but that seems doable

626
00:29:44,960 --> 00:29:47,840
so then a little more controversy comes

627
00:29:47,840 --> 00:29:50,559
when we get to the load pdus and the

628
00:29:50,559 --> 00:29:53,279
feedback messages so let me let me talk

629
00:29:53,279 --> 00:29:55,600
about the feedback messages first we're

630
00:29:55,600 --> 00:29:57,679
sending these load pdus

631
00:29:57,679 --> 00:30:00,240
we're um

632
00:30:00,480 --> 00:30:01,840
uh

633
00:30:01,840 --> 00:30:04,159
what the heck is this lies more lies in

634
00:30:04,159 --> 00:30:06,799
browser user agent strings from rich

635
00:30:06,799 --> 00:30:08,480
salts i don't know what the hell that

636
00:30:08,480 --> 00:30:09,600
means rich

637
00:30:09,600 --> 00:30:12,559
are you in this meeting

638
00:30:16,880 --> 00:30:18,159
i guess not

639
00:30:18,159 --> 00:30:19,200
okay

640
00:30:19,200 --> 00:30:22,000
so um

641
00:30:22,000 --> 00:30:25,440
uh so when the load pdus are flowing uh

642
00:30:25,440 --> 00:30:27,360
in the test phase we've got this

643
00:30:27,360 --> 00:30:29,919
feedback messages and 50 millisecond

644
00:30:29,919 --> 00:30:32,720
default and that's where we communicate

645
00:30:32,720 --> 00:30:35,919
the loss the delay uh the receive rates

646
00:30:35,919 --> 00:30:37,360
all the other parameters i mentioned

647
00:30:37,360 --> 00:30:40,320
like reordering and delay variation

648
00:30:40,320 --> 00:30:42,240
and um

649
00:30:42,240 --> 00:30:43,039
or

650
00:30:43,039 --> 00:30:43,840
um

651
00:30:43,840 --> 00:30:46,240
if the if the server is making these

652
00:30:46,240 --> 00:30:48,880
measurements then the server sends

653
00:30:48,880 --> 00:30:51,840
the new sending rate down to the client

654
00:30:51,840 --> 00:30:54,640
for an upstream test so that means

655
00:30:54,640 --> 00:30:57,360
sending the sending rate structure down

656
00:30:57,360 --> 00:30:58,880
and

657
00:30:58,880 --> 00:31:01,360
basically brian's question here is uh

658
00:31:01,360 --> 00:31:03,600
can we add the auth authentication

659
00:31:03,600 --> 00:31:06,799
digest and processing to the uh feedback

660
00:31:06,799 --> 00:31:07,840
messages

661
00:31:07,840 --> 00:31:11,200
and uh yeah so um

662
00:31:11,200 --> 00:31:12,640
so this is uh

663
00:31:12,640 --> 00:31:14,799
this is what we'd like to do is to

664
00:31:14,799 --> 00:31:17,039
probably do this uh it's probably going

665
00:31:17,039 --> 00:31:18,799
to be an additional option

666
00:31:18,799 --> 00:31:21,519
beyond authenticating the control phase

667
00:31:21,519 --> 00:31:23,200
the setup phase here

668
00:31:23,200 --> 00:31:24,320
and um

669
00:31:24,320 --> 00:31:25,039
uh

670
00:31:25,039 --> 00:31:27,679
but it seems worthwhile to uh to try to

671
00:31:27,679 --> 00:31:28,799
do that

672
00:31:28,799 --> 00:31:31,360
um i'll also note that we've got uh

673
00:31:31,360 --> 00:31:34,960
rates up to 40 gigabits per second now

674
00:31:34,960 --> 00:31:38,080
in the uh in the sending rate table uh

675
00:31:38,080 --> 00:31:40,320
of the running code and the uh

676
00:31:40,320 --> 00:31:42,960
um and allowed for it in the uh

677
00:31:42,960 --> 00:31:45,039
um

678
00:31:45,039 --> 00:31:46,720
you know and basically in the in the

679
00:31:46,720 --> 00:31:49,440
protocol so uh that's cool

680
00:31:49,440 --> 00:31:51,600
but uh the the place where we're having

681
00:31:51,600 --> 00:31:52,640
problems

682
00:31:52,640 --> 00:31:55,519
is in uh um basically adding the

683
00:31:55,519 --> 00:31:58,240
authentication digest and processing on

684
00:31:58,240 --> 00:32:00,559
the load pdus because obviously to

685
00:32:00,559 --> 00:32:02,880
measure capacity we're sending a lot of

686
00:32:02,880 --> 00:32:05,440
them we're going to encounter hosts

687
00:32:05,440 --> 00:32:07,360
either at the client or the server or

688
00:32:07,360 --> 00:32:08,159
both

689
00:32:08,159 --> 00:32:11,279
uh that have processing limitations

690
00:32:11,279 --> 00:32:12,159
and

691
00:32:12,159 --> 00:32:13,919
so you know you're going to see us

692
00:32:13,919 --> 00:32:17,440
pushing back on the idea of of um

693
00:32:17,440 --> 00:32:20,159
authenticating every packet in the in

694
00:32:20,159 --> 00:32:22,720
the load pdu stream we've got so much

695
00:32:22,720 --> 00:32:24,240
other stuff to do

696
00:32:24,240 --> 00:32:26,640
all right so three things to keep in

697
00:32:26,640 --> 00:32:29,440
mind test setup test activation they're

698
00:32:29,440 --> 00:32:32,720
the control exchanges um they're the uh

699
00:32:32,720 --> 00:32:34,320
the things that we

700
00:32:34,320 --> 00:32:37,600
uh would probably be easily able to uh

701
00:32:37,600 --> 00:32:41,279
to authenticate also probably encrypt

702
00:32:41,279 --> 00:32:44,399
and um if we were to uh if you were to

703
00:32:44,399 --> 00:32:45,600
imply in

704
00:32:45,600 --> 00:32:48,320
encryption then we'd also need an

705
00:32:48,320 --> 00:32:49,760
additional pack

706
00:32:49,760 --> 00:32:52,159
to open an ephemeral port on the

707
00:32:52,159 --> 00:32:54,559
firewall brian really looked at our

708
00:32:54,559 --> 00:32:57,760
firewall uh operations and gave us some

709
00:32:57,760 --> 00:33:00,000
really good advice on that and this is

710
00:33:00,000 --> 00:33:01,919
the kind of stuff you know firewall at

711
00:33:01,919 --> 00:33:03,919
the server and this is the kind of stuff

712
00:33:03,919 --> 00:33:06,480
that would be really useful for anybody

713
00:33:06,480 --> 00:33:09,279
uh planning an active uh protocol and

714
00:33:09,279 --> 00:33:11,679
installing it in the network so these

715
00:33:11,679 --> 00:33:13,919
with all things to keep in mind you know

716
00:33:13,919 --> 00:33:16,559
as i go through the details now uh tommy

717
00:33:16,559 --> 00:33:19,120
you can switch to slide five uh we may

718
00:33:19,120 --> 00:33:20,880
need to go back to slide four here

719
00:33:20,880 --> 00:33:22,000
occasionally

720
00:33:22,000 --> 00:33:24,799
but uh let's try to just go ahead so the

721
00:33:24,799 --> 00:33:26,559
firewall operation

722
00:33:26,559 --> 00:33:28,799
um at the client uh

723
00:33:28,799 --> 00:33:30,159
the client

724
00:33:30,159 --> 00:33:33,039
basically initiates all the exchanges so

725
00:33:33,039 --> 00:33:35,440
we punch our own pin holes in the client

726
00:33:35,440 --> 00:33:36,880
and we're okay

727
00:33:36,880 --> 00:33:39,440
at the server though um our current

728
00:33:39,440 --> 00:33:42,240
practice is that we open an ephemeral

729
00:33:42,240 --> 00:33:45,279
port range so whatever whatever port

730
00:33:45,279 --> 00:33:48,000
range comes back from the client uh we

731
00:33:48,000 --> 00:33:49,679
uh we basically

732
00:33:49,679 --> 00:33:52,559
allow that and um

733
00:33:52,559 --> 00:33:55,600
but if we uh if we put that

734
00:33:55,600 --> 00:33:58,399
dummy packet in as i just showed uh that

735
00:33:58,399 --> 00:34:01,120
would open the pinhole on the client for

736
00:34:01,120 --> 00:34:04,000
the client firewall for the

737
00:34:04,000 --> 00:34:06,080
um you know the two-way exchange and the

738
00:34:06,080 --> 00:34:08,639
test activation and that seems likely to

739
00:34:08,639 --> 00:34:09,440
work

740
00:34:09,440 --> 00:34:11,520
um whether we encrypt or whether we just

741
00:34:11,520 --> 00:34:13,040
authenticate

742
00:34:13,040 --> 00:34:14,239
so um

743
00:34:14,239 --> 00:34:16,079
um i think you know we i think we can

744
00:34:16,079 --> 00:34:18,239
probably handle that with at least one

745
00:34:18,239 --> 00:34:21,520
more uh dummy packet

746
00:34:21,520 --> 00:34:23,918
so that's again a protocol modification

747
00:34:23,918 --> 00:34:26,159
we'll be looking at so then moving on

748
00:34:26,159 --> 00:34:28,800
here we need to look at reorganizing the

749
00:34:28,800 --> 00:34:30,639
mode of operations

750
00:34:30,639 --> 00:34:34,560
uh same thing yeah yeah yeah so um

751
00:34:34,560 --> 00:34:35,839
basically

752
00:34:35,839 --> 00:34:38,239
based on brian's input

753
00:34:38,239 --> 00:34:41,040
we're looking at required authentication

754
00:34:41,040 --> 00:34:44,239
for the control modes messages

755
00:34:44,239 --> 00:34:45,679
um the

756
00:34:45,679 --> 00:34:48,399
test setup exchange and activation

757
00:34:48,399 --> 00:34:50,239
exchange they would both be

758
00:34:50,239 --> 00:34:52,639
authenticated in a required mode of

759
00:34:52,639 --> 00:34:53,839
operation

760
00:34:53,839 --> 00:34:55,119
so we could have

761
00:34:55,119 --> 00:34:56,960
optional authentication for the data

762
00:34:56,960 --> 00:34:59,119
messages and maybe only status as i

763
00:34:59,119 --> 00:35:00,960
mentioned

764
00:35:00,960 --> 00:35:02,480
optional encryption

765
00:35:02,480 --> 00:35:05,359
for the setup messages and um

766
00:35:05,359 --> 00:35:07,280
um maybe the

767
00:35:07,280 --> 00:35:08,800
activation

768
00:35:08,800 --> 00:35:10,160
messages too

769
00:35:10,160 --> 00:35:12,720
uh maybe use dtls for the

770
00:35:12,720 --> 00:35:15,119
with those exchanges

771
00:35:15,119 --> 00:35:18,000
and also maybe and this a big maybe

772
00:35:18,000 --> 00:35:21,040
maybe reuse the keen from the authentic

773
00:35:21,040 --> 00:35:24,240
uh from the dtls in the authentication

774
00:35:24,240 --> 00:35:25,280
aspects

775
00:35:25,280 --> 00:35:28,320
um then we'd also have this optional

776
00:35:28,320 --> 00:35:30,480
unauthenticated mode which obviously

777
00:35:30,480 --> 00:35:33,280
we've got working now so um you know

778
00:35:33,280 --> 00:35:35,760
those are uh that's that's our reading

779
00:35:35,760 --> 00:35:38,480
of the current uh requirements and

780
00:35:38,480 --> 00:35:41,680
and um and options for the various modes

781
00:35:41,680 --> 00:35:43,440
of operation

782
00:35:43,440 --> 00:35:46,160
i haven't got these lettered yet but

783
00:35:46,160 --> 00:35:48,400
that's what we're working with um next

784
00:35:48,400 --> 00:35:51,359
slide please tell me

785
00:35:52,240 --> 00:35:53,359
so

786
00:35:53,359 --> 00:35:56,079
yeah so going in deeper here we prefer

787
00:35:56,079 --> 00:35:58,400
not to add the um

788
00:35:58,400 --> 00:36:01,119
digest on the load pdu

789
00:36:01,119 --> 00:36:02,720
uh the only real

790
00:36:02,720 --> 00:36:06,959
uh information there is um

791
00:36:07,280 --> 00:36:10,320
like the control information is the uh

792
00:36:10,320 --> 00:36:13,119
the bits that we flip uh to stop the

793
00:36:13,119 --> 00:36:14,400
test

794
00:36:14,400 --> 00:36:15,520
and um

795
00:36:15,520 --> 00:36:16,400
if and

796
00:36:16,400 --> 00:36:19,359
if an attacker clears the stop bits um

797
00:36:19,359 --> 00:36:21,599
the tests are going to stop anyway after

798
00:36:21,599 --> 00:36:24,320
a timeout with the test duration already

799
00:36:24,320 --> 00:36:25,599
specified

800
00:36:25,599 --> 00:36:28,480
that comes during test activation

801
00:36:28,480 --> 00:36:31,599
if an attacker adds the stop bits um you

802
00:36:31,599 --> 00:36:33,680
know jumping in on a message

803
00:36:33,680 --> 00:36:34,640
then

804
00:36:34,640 --> 00:36:37,040
a premature end of test you you'll see

805
00:36:37,040 --> 00:36:39,359
that but it's no threat to the internet

806
00:36:39,359 --> 00:36:41,040
just kind of annoying

807
00:36:41,040 --> 00:36:45,280
and um adding the shot 256 what digest

808
00:36:45,280 --> 00:36:47,760
that significantly increases the minimum

809
00:36:47,760 --> 00:36:51,200
packet sizes so basically we're we're

810
00:36:51,200 --> 00:36:53,440
trying to avoid that if we possibly can

811
00:36:53,440 --> 00:36:54,720
and and

812
00:36:54,720 --> 00:36:56,640
you know we think we can do that

813
00:36:56,640 --> 00:36:59,119
on the other hand with the status pdu

814
00:36:59,119 --> 00:37:02,640
um there's a skeptical stuff to protect

815
00:37:02,640 --> 00:37:05,599
here um integrity wise

816
00:37:05,599 --> 00:37:07,440
uh as i mentioned the

817
00:37:07,440 --> 00:37:09,599
new measurements or the sending rate

818
00:37:09,599 --> 00:37:11,359
command

819
00:37:11,359 --> 00:37:13,520
and the sampled rtt measurements those

820
00:37:13,520 --> 00:37:17,359
are all you know sort of important to uh

821
00:37:17,359 --> 00:37:20,000
to protect so it seems viable to protect

822
00:37:20,000 --> 00:37:22,400
those with the digest

823
00:37:22,400 --> 00:37:24,720
but we need to keep the um the fact that

824
00:37:24,720 --> 00:37:26,640
round-trip time measurements are are

825
00:37:26,640 --> 00:37:29,200
taking place on that on that 50

826
00:37:29,200 --> 00:37:32,800
millisecond uh feedback so uh you know

827
00:37:32,800 --> 00:37:34,599
it's the old trade-off between

828
00:37:34,599 --> 00:37:37,839
accuracy and

829
00:37:39,119 --> 00:37:41,280
security protections got to keep that in

830
00:37:41,280 --> 00:37:45,440
mind uh next slide please tell me

831
00:37:46,320 --> 00:37:48,800
okay key management so this is a brand

832
00:37:48,800 --> 00:37:50,560
new thing that uh

833
00:37:50,560 --> 00:37:52,880
brian has raised it's good to know about

834
00:37:52,880 --> 00:37:55,040
uh we're currently using manually

835
00:37:55,040 --> 00:37:59,200
configured keys uh one per server um he

836
00:37:59,200 --> 00:38:03,119
suggested we look into our c20 7210

837
00:38:03,119 --> 00:38:05,040
which we'll do

838
00:38:05,040 --> 00:38:07,200
if we add a key identifier

839
00:38:07,200 --> 00:38:09,440
that could help us uh to do the key

840
00:38:09,440 --> 00:38:10,480
management

841
00:38:10,480 --> 00:38:12,960
we don't have that we don't also have a

842
00:38:12,960 --> 00:38:15,920
config file for the key and the id

843
00:38:15,920 --> 00:38:17,520
so um

844
00:38:17,520 --> 00:38:18,880
you know these are things we could look

845
00:38:18,880 --> 00:38:21,520
into adding brian suggests or we could

846
00:38:21,520 --> 00:38:24,720
add a section uh just describing the

847
00:38:24,720 --> 00:38:27,280
orderly key rollover so there's lots of

848
00:38:27,280 --> 00:38:28,720
options there

849
00:38:28,720 --> 00:38:30,880
but this is a you know it's an excellent

850
00:38:30,880 --> 00:38:35,040
feedback and i'm really glad to get it

851
00:38:35,040 --> 00:38:38,640
so then the dtls for confidentiality in

852
00:38:38,640 --> 00:38:41,119
the setup phase um it adds

853
00:38:41,119 --> 00:38:43,680
re-transmission and order delivery uh

854
00:38:43,680 --> 00:38:45,920
those are good things but

855
00:38:45,920 --> 00:38:48,000
with the cost of uh you know like a

856
00:38:48,000 --> 00:38:49,200
fairly

857
00:38:49,200 --> 00:38:52,880
fairly significant uh dtls setup as i

858
00:38:52,880 --> 00:38:55,359
understand it so um you know i've been

859
00:38:55,359 --> 00:38:57,440
looking at the pictures i see tommy

860
00:38:57,440 --> 00:39:00,560
nodding there it's a it's a uh

861
00:39:00,560 --> 00:39:02,079
um you know it's something to keep in

862
00:39:02,079 --> 00:39:02,960
mind

863
00:39:02,960 --> 00:39:06,160
um if we were to do that um on both the

864
00:39:06,160 --> 00:39:08,880
uh both the client the test setup and

865
00:39:08,880 --> 00:39:12,560
test activation then we need a dummy

866
00:39:12,560 --> 00:39:14,880
packet from the server to open up the

867
00:39:14,880 --> 00:39:17,359
firewall at the server side uh dummy

868
00:39:17,359 --> 00:39:19,680
packet of the client to open up before

869
00:39:19,680 --> 00:39:21,200
the load pdus

870
00:39:21,200 --> 00:39:23,119
and that that's the packet

871
00:39:23,119 --> 00:39:24,960
dummy packet exchange

872
00:39:24,960 --> 00:39:27,200
so we need probably to wait for time for

873
00:39:27,200 --> 00:39:29,760
the dummy packets to go back and forth

874
00:39:29,760 --> 00:39:31,200
and then we'd

875
00:39:31,200 --> 00:39:32,720
be able to operate

876
00:39:32,720 --> 00:39:34,720
fairly safely on the

877
00:39:34,720 --> 00:39:36,960
on the new ephemeral port and the

878
00:39:36,960 --> 00:39:39,119
original ephemeral port from the from

879
00:39:39,119 --> 00:39:41,599
the client but um you know that all

880
00:39:41,599 --> 00:39:44,000
seems possible so uh you know we're

881
00:39:44,000 --> 00:39:45,920
going to look into doing that

882
00:39:45,920 --> 00:39:48,000
and then um again this i mentioned the

883
00:39:48,000 --> 00:39:50,720
deriving key from the dtls session

884
00:39:50,720 --> 00:39:52,560
um

885
00:39:52,560 --> 00:39:54,960
we'd be looking at that on the feedback

886
00:39:54,960 --> 00:39:58,000
messages and um if we're wondering if

887
00:39:58,000 --> 00:39:59,359
you've got

888
00:39:59,359 --> 00:40:01,359
the support necessary for that in the

889
00:40:01,359 --> 00:40:03,599
open ssl

890
00:40:03,599 --> 00:40:06,720
from the dtls session it's a question

891
00:40:06,720 --> 00:40:09,119
so that's an open issue

892
00:40:09,119 --> 00:40:12,560
next slide there please tell me

893
00:40:12,640 --> 00:40:13,760
all right

894
00:40:13,760 --> 00:40:15,200
so um

895
00:40:15,200 --> 00:40:16,000
um

896
00:40:16,000 --> 00:40:19,040
we've got the topic of silent rejection

897
00:40:19,040 --> 00:40:21,599
during the senate setup phase

898
00:40:21,599 --> 00:40:25,040
um in authenticated mode we'd likely use

899
00:40:25,040 --> 00:40:27,200
silent projection now because we don't

900
00:40:27,200 --> 00:40:29,440
really know where the requests come from

901
00:40:29,440 --> 00:40:31,359
there's no authentication

902
00:40:31,359 --> 00:40:34,720
but um if we've got a successful

903
00:40:34,720 --> 00:40:37,839
validation of authentication then we

904
00:40:37,839 --> 00:40:40,480
could return the full rejection message

905
00:40:40,480 --> 00:40:42,800
with the area code we've uh sorted this

906
00:40:42,800 --> 00:40:45,200
out in the follow up and

907
00:40:45,200 --> 00:40:46,960
discussions with brian

908
00:40:46,960 --> 00:40:48,240
and uh

909
00:40:48,240 --> 00:40:50,400
if we have authenticated mode with

910
00:40:50,400 --> 00:40:53,280
failed authentication we could have the

911
00:40:53,280 --> 00:40:55,200
silent rejection again

912
00:40:55,200 --> 00:40:58,079
on the other hand uh compile time to

913
00:40:58,079 --> 00:41:00,960
help troubleshooting we could turn on uh

914
00:41:00,960 --> 00:41:04,640
um to reject turn on non-silent uh for

915
00:41:04,640 --> 00:41:06,240
troubleshooting that would be probably a

916
00:41:06,240 --> 00:41:07,440
good thing

917
00:41:07,440 --> 00:41:09,520
so um you know these are things we can

918
00:41:09,520 --> 00:41:11,200
uh look at doing

919
00:41:11,200 --> 00:41:13,599
also the client uh does not currently

920
00:41:13,599 --> 00:41:16,079
validate the server setup response i

921
00:41:16,079 --> 00:41:18,880
think i mentioned that in in the picture

922
00:41:18,880 --> 00:41:21,280
and so we need to be sure that the uh

923
00:41:21,280 --> 00:41:22,720
what digest

924
00:41:22,720 --> 00:41:25,680
uh checking lists and um expanding that

925
00:41:25,680 --> 00:41:26,880
would fix it

926
00:41:26,880 --> 00:41:27,680
uh

927
00:41:27,680 --> 00:41:29,760
to check on the uh in the

928
00:41:29,760 --> 00:41:31,359
setup response

929
00:41:31,359 --> 00:41:35,200
all sort of dual on my my mind um the

930
00:41:35,200 --> 00:41:37,440
authentics time is not a complete

931
00:41:37,440 --> 00:41:40,800
production of uh against replay attacks

932
00:41:40,800 --> 00:41:43,599
uh brian pointed that out um

933
00:41:43,599 --> 00:41:46,079
it's a you know kind of we could add in

934
00:41:46,079 --> 00:41:49,920
a record of previously received messages

935
00:41:49,920 --> 00:41:52,560
within that window and we could add an

936
00:41:52,560 --> 00:41:56,079
id uh which can't be replayed with the

937
00:41:56,079 --> 00:41:57,680
same hmac

938
00:41:57,680 --> 00:41:59,839
but the um you know the idea is this

939
00:41:59,839 --> 00:42:00,720
isn't

940
00:42:00,720 --> 00:42:03,200
an infrequent diagnostic message we

941
00:42:03,200 --> 00:42:06,240
can't measure capacity all the time

942
00:42:06,240 --> 00:42:09,760
um and also we're not norad here so uh

943
00:42:09,760 --> 00:42:11,040
maybe uh

944
00:42:11,040 --> 00:42:12,480
we could

945
00:42:12,480 --> 00:42:15,200
not worry about this quite so much but

946
00:42:15,200 --> 00:42:16,960
the id might help

947
00:42:16,960 --> 00:42:18,720
so um you know those are things where

948
00:42:18,720 --> 00:42:21,119
we're thinking about ways to solve them

949
00:42:21,119 --> 00:42:23,680
and again thanks for the comments

950
00:42:23,680 --> 00:42:26,400
so next slide there brian

951
00:42:26,400 --> 00:42:28,160
tommy

952
00:42:28,160 --> 00:42:30,880
so the kind of the summary that came up

953
00:42:30,880 --> 00:42:33,839
in bryant's brian's uh uh mode d

954
00:42:33,839 --> 00:42:35,760
encrypted all the things this is the

955
00:42:35,760 --> 00:42:37,280
safe advice

956
00:42:37,280 --> 00:42:38,079
um

957
00:42:38,079 --> 00:42:40,960
the strong authentication uh for all

958
00:42:40,960 --> 00:42:44,000
methods is a good choice we've got that

959
00:42:44,000 --> 00:42:45,920
for well for all of them that we think

960
00:42:45,920 --> 00:42:47,920
we can do

961
00:42:47,920 --> 00:42:50,240
make it optional for a site to deploy

962
00:42:50,240 --> 00:42:52,319
that sounds good

963
00:42:52,319 --> 00:42:54,480
require it on the authentication of the

964
00:42:54,480 --> 00:42:56,480
setup messages so we're going to have a

965
00:42:56,480 --> 00:42:57,680
mode for that

966
00:42:57,680 --> 00:43:00,800
make it make authentication um optional

967
00:43:00,800 --> 00:43:03,280
on the data plane that seems defensible

968
00:43:03,280 --> 00:43:04,480
to brian

969
00:43:04,480 --> 00:43:07,520
and um because he understands the effect

970
00:43:07,520 --> 00:43:11,760
on the test accuracy the next uh sector

971
00:43:11,760 --> 00:43:14,880
error reviewer or the ids they might not

972
00:43:14,880 --> 00:43:16,880
understand that so you know we got to

973
00:43:16,880 --> 00:43:18,319
make that clear

974
00:43:18,319 --> 00:43:19,440
and um

975
00:43:19,440 --> 00:43:21,200
since uh

976
00:43:21,200 --> 00:43:23,839
orderly key rollover is a good thing to

977
00:43:23,839 --> 00:43:25,839
have so we'll look into adding the

978
00:43:25,839 --> 00:43:28,800
features uh to support that and also

979
00:43:28,800 --> 00:43:33,119
dtls and reusing the keys possibly um so

980
00:43:33,119 --> 00:43:35,599
that's a good summary i think of of all

981
00:43:35,599 --> 00:43:37,200
the kinds of things we're

982
00:43:37,200 --> 00:43:39,599
looking into but notice that

983
00:43:39,599 --> 00:43:41,599
that brian asked the question

984
00:43:41,599 --> 00:43:45,119
look um he said i haven't seen anywhere

985
00:43:45,119 --> 00:43:48,480
that full encryption is a requirement

986
00:43:48,480 --> 00:43:50,720
and i i took it from

987
00:43:50,720 --> 00:43:51,520
the

988
00:43:51,520 --> 00:43:54,560
wording of of uh privacy

989
00:43:54,560 --> 00:43:57,200
is the default in the um

990
00:43:57,200 --> 00:43:59,040
perversive monitoring

991
00:43:59,040 --> 00:44:03,200
is a an attack rfc and also from

992
00:44:03,200 --> 00:44:05,520
ted hardy saying that you know

993
00:44:05,520 --> 00:44:08,000
encryption has to be on by default in

994
00:44:08,000 --> 00:44:10,319
itf protocols but that's not written

995
00:44:10,319 --> 00:44:11,680
down anywhere

996
00:44:11,680 --> 00:44:14,160
so so look you know if if the

997
00:44:14,160 --> 00:44:17,119
authentication and the encrypted setup

998
00:44:17,119 --> 00:44:18,319
is enough

999
00:44:18,319 --> 00:44:20,640
then you know i really like to hear that

1000
00:44:20,640 --> 00:44:22,800
from the ads that are ultimately going

1001
00:44:22,800 --> 00:44:25,280
to have to review this thing

1002
00:44:25,280 --> 00:44:27,520
because we could do that very easily

1003
00:44:27,520 --> 00:44:30,800
but um putting this all in a tunnel it's

1004
00:44:30,800 --> 00:44:32,640
going to make the um it's going to have

1005
00:44:32,640 --> 00:44:34,480
an impact on the measurements it's going

1006
00:44:34,480 --> 00:44:36,560
to have an impact on the host that can

1007
00:44:36,560 --> 00:44:38,960
perform it and note that it it's

1008
00:44:38,960 --> 00:44:40,960
basically not in this list

1009
00:44:40,960 --> 00:44:44,240
so so this is brian's advice he's not

1010
00:44:44,240 --> 00:44:46,240
speaking for the sector he's not

1011
00:44:46,240 --> 00:44:48,480
speaking for the ids but this is all

1012
00:44:48,480 --> 00:44:52,240
very reasonable to us so you know or

1013
00:44:52,240 --> 00:44:54,400
we can do this i think

1014
00:44:54,400 --> 00:44:56,480
um and um you know that's where we're

1015
00:44:56,480 --> 00:44:58,880
gonna go for now be great if we could

1016
00:44:58,880 --> 00:45:01,200
hear we want you to do two more things

1017
00:45:01,200 --> 00:45:02,240
too

1018
00:45:02,240 --> 00:45:03,200
um

1019
00:45:03,200 --> 00:45:05,599
so anyway let's uh let's keep bugging

1020
00:45:05,599 --> 00:45:06,960
people about that

1021
00:45:06,960 --> 00:45:10,160
next slide please tell me

1022
00:45:12,000 --> 00:45:13,760
so we finally get to something fun to

1023
00:45:13,760 --> 00:45:14,880
look at

1024
00:45:14,880 --> 00:45:17,680
um i mentioned that we can have uh new

1025
00:45:17,680 --> 00:45:20,319
types of algorithms uh supported by the

1026
00:45:20,319 --> 00:45:21,520
protocol

1027
00:45:21,520 --> 00:45:23,680
so here i've got a pod where we've got

1028
00:45:23,680 --> 00:45:25,280
megabits per second

1029
00:45:25,280 --> 00:45:28,640
um on a docsis downlink up to when i 1

1030
00:45:28,640 --> 00:45:31,280
000 megabits or one gigabit

1031
00:45:31,280 --> 00:45:34,480
and i'm comparing on the left the type b

1032
00:45:34,480 --> 00:45:36,800
algorithm which is the current default

1033
00:45:36,800 --> 00:45:39,119
to a new algorithm which we're calling

1034
00:45:39,119 --> 00:45:40,160
type c

1035
00:45:40,160 --> 00:45:42,560
and which is implemented in the new

1036
00:45:42,560 --> 00:45:44,079
running code

1037
00:45:44,079 --> 00:45:46,720
so let's let's look at these um

1038
00:45:46,720 --> 00:45:47,599
uh

1039
00:45:47,599 --> 00:45:50,640
these measurements um basically it's

1040
00:45:50,640 --> 00:45:54,079
it's a two ten second tests in series

1041
00:45:54,079 --> 00:45:55,520
on the one gigabit downloading

1042
00:45:55,520 --> 00:45:58,560
measurement it's uh the one it's a udp

1043
00:45:58,560 --> 00:46:00,319
7.5.0

1044
00:46:00,319 --> 00:46:03,920
in debug mode and we've got the uh

1045
00:46:03,920 --> 00:46:06,079
50 millisecond feedback measurement you

1046
00:46:06,079 --> 00:46:09,359
can get that from the debug and um

1047
00:46:09,359 --> 00:46:11,680
packet loss measurements are in blue so

1048
00:46:11,680 --> 00:46:14,079
you see those counts and

1049
00:46:14,079 --> 00:46:16,000
that b is fairly nice

1050
00:46:16,000 --> 00:46:19,200
uh to the network we get some uh some

1051
00:46:19,200 --> 00:46:22,000
bursts of loss here but not much when

1052
00:46:22,000 --> 00:46:23,920
we're testing kind of in the steady

1053
00:46:23,920 --> 00:46:26,400
state at the at the maximum

1054
00:46:26,400 --> 00:46:29,440
now the big difference between type b

1055
00:46:29,440 --> 00:46:30,560
and type c

1056
00:46:30,560 --> 00:46:33,599
is that we're going to continue to retry

1057
00:46:33,599 --> 00:46:35,680
a fast ramp up mode

1058
00:46:35,680 --> 00:46:38,160
and the fast ramp up mode is very

1059
00:46:38,160 --> 00:46:41,280
different instead of being linear at a

1060
00:46:41,280 --> 00:46:42,560
factor of 10

1061
00:46:42,560 --> 00:46:45,200
it's now a multiplicative

1062
00:46:45,200 --> 00:46:48,240
at a factor of 1.5 the current sending

1063
00:46:48,240 --> 00:46:49,040
rate

1064
00:46:49,040 --> 00:46:49,839
um

1065
00:46:49,839 --> 00:46:51,599
by the way that's a good thing

1066
00:46:51,599 --> 00:46:54,480
and now what we see here is the

1067
00:46:54,480 --> 00:46:58,240
the air bit rate in the 50 millisecond

1068
00:46:58,240 --> 00:47:01,359
and also the one second sub interval

1069
00:47:01,359 --> 00:47:04,079
measurements you may recall that we take

1070
00:47:04,079 --> 00:47:06,480
an average of the 50 millisecond

1071
00:47:06,480 --> 00:47:08,800
measurements every second

1072
00:47:08,800 --> 00:47:12,079
and this one one second rise to the

1073
00:47:12,079 --> 00:47:15,280
gigabit range is very valuable in the

1074
00:47:15,280 --> 00:47:17,839
mobile testing and if you want to have

1075
00:47:17,839 --> 00:47:20,160
short intervals of testing like five

1076
00:47:20,160 --> 00:47:23,040
seconds or things like that or if you're

1077
00:47:23,040 --> 00:47:25,280
in mobile and you expect

1078
00:47:25,280 --> 00:47:28,720
lots of variation in your uh

1079
00:47:28,720 --> 00:47:30,640
maximum data rate because you're

1080
00:47:30,640 --> 00:47:34,400
switching back and forth between 5g and

1081
00:47:34,400 --> 00:47:37,119
and the other then um then type c

1082
00:47:37,119 --> 00:47:39,119
algorithm is for you

1083
00:47:39,119 --> 00:47:42,720
it's i note that the rt rtt variation

1084
00:47:42,720 --> 00:47:44,720
it's kind of an underestimate

1085
00:47:44,720 --> 00:47:45,599
um

1086
00:47:45,599 --> 00:47:47,839
the servers and everything else here are

1087
00:47:47,839 --> 00:47:50,319
kind of limited to one gigabit so you

1088
00:47:50,319 --> 00:47:53,440
would expect if um if we had greater

1089
00:47:53,440 --> 00:47:55,119
bandwidths than

1090
00:47:55,119 --> 00:47:57,599
than the bottleneck on the docsis

1091
00:47:57,599 --> 00:47:59,680
downlink we'd probably see the delay

1092
00:47:59,680 --> 00:48:02,960
climbing up here and then we have a real

1093
00:48:02,960 --> 00:48:05,440
uh higher delay measurement of

1094
00:48:05,440 --> 00:48:08,400
responsiveness here but the uh the key

1095
00:48:08,400 --> 00:48:10,720
thing is that you know we can basically

1096
00:48:10,720 --> 00:48:11,599
measure

1097
00:48:11,599 --> 00:48:14,720
uh responsiveness when it matters and we

1098
00:48:14,720 --> 00:48:17,119
do that in the same context as we call

1099
00:48:17,119 --> 00:48:20,079
speed test we do it in the same context

1100
00:48:20,079 --> 00:48:23,359
as uh the capacity tests and in the

1101
00:48:23,359 --> 00:48:26,079
responsiveness metric as i'm reading it

1102
00:48:26,079 --> 00:48:28,079
the big difference is that we're making

1103
00:48:28,079 --> 00:48:30,160
the measurements at udp

1104
00:48:30,160 --> 00:48:34,160
and not at the tcp or http so it's kind

1105
00:48:34,160 --> 00:48:36,960
of a complimentary thing to the

1106
00:48:36,960 --> 00:48:38,559
uh the other measurements that have been

1107
00:48:38,559 --> 00:48:41,119
proposed

1108
00:48:41,280 --> 00:48:42,559
so um

1109
00:48:42,559 --> 00:48:44,480
um oh we have martin in the queue would

1110
00:48:44,480 --> 00:48:46,079
you like to take his comment now or

1111
00:48:46,079 --> 00:48:48,079
would you like to take a look yeah sure

1112
00:48:48,079 --> 00:48:49,359
go ahead martin

1113
00:48:49,359 --> 00:48:51,520
yeah let's give your voice your vocal

1114
00:48:51,520 --> 00:48:54,400
cords a chance to relax um

1115
00:48:54,400 --> 00:48:56,720
uh do you anticipate delivering this

1116
00:48:56,720 --> 00:49:00,480
document to me in next six months or so

1117
00:49:00,480 --> 00:49:04,400
yeah i hope so i hope we can um

1118
00:49:04,400 --> 00:49:05,839
so like

1119
00:49:05,839 --> 00:49:07,440
i mean you asked

1120
00:49:07,440 --> 00:49:09,280
to refer to the like the previous

1121
00:49:09,280 --> 00:49:11,119
conversation about like what will get

1122
00:49:11,119 --> 00:49:12,880
through the isg i don't want to presume

1123
00:49:12,880 --> 00:49:14,880
to speak for roman or paul

1124
00:49:14,880 --> 00:49:18,160
um and i personally you know don't have

1125
00:49:18,160 --> 00:49:20,960
a strong position on it um

1126
00:49:20,960 --> 00:49:22,640
maybe it would be good to start like

1127
00:49:22,640 --> 00:49:24,240
rather than just sort of guess we should

1128
00:49:24,240 --> 00:49:27,119
just like start a dialogue with um

1129
00:49:27,119 --> 00:49:28,480
with them and you know i'm happy to be

1130
00:49:28,480 --> 00:49:30,079
included we can just start discussing

1131
00:49:30,079 --> 00:49:31,520
like

1132
00:49:31,520 --> 00:49:32,960
you know how much of a deal breaker is

1133
00:49:32,960 --> 00:49:35,599
this for them what are the costs to this

1134
00:49:35,599 --> 00:49:37,359
to the system if we do have to encrypt

1135
00:49:37,359 --> 00:49:38,880
everything you mentioned them in your

1136
00:49:38,880 --> 00:49:40,880
talk but just like kind of capture those

1137
00:49:40,880 --> 00:49:42,800
trade-offs and kind of see what they say

1138
00:49:42,800 --> 00:49:47,280
rather than um guess and guess wrong

1139
00:49:47,280 --> 00:49:48,800
yeah

1140
00:49:48,800 --> 00:49:49,920
especially

1141
00:49:49,920 --> 00:49:51,920
thank you especially since we've got

1142
00:49:51,920 --> 00:49:53,359
running code that we're trying to keep

1143
00:49:53,359 --> 00:49:55,920
up to date here and that's

1144
00:49:55,920 --> 00:49:57,760
yeah i don't want to throw away any code

1145
00:49:57,760 --> 00:49:59,440
yeah it's not like i said the reason i

1146
00:49:59,440 --> 00:50:00,640
asked about the six months is because of

1147
00:50:00,640 --> 00:50:04,800
course there'll be different ads um next

1148
00:50:04,800 --> 00:50:06,079
yeah

1149
00:50:06,079 --> 00:50:08,960
yeah that's a good point so um at least

1150
00:50:08,960 --> 00:50:12,559
we'll keep one of them though right

1151
00:50:12,559 --> 00:50:13,680
okay

1152
00:50:13,680 --> 00:50:16,559
good thanks martin i'll uh i'll do that

1153
00:50:16,559 --> 00:50:19,680
and um we can refer to the sector um

1154
00:50:19,680 --> 00:50:22,480
reviews as well thank you

1155
00:50:22,480 --> 00:50:25,760
um so um next steps reviews test

1156
00:50:25,760 --> 00:50:28,720
experiences uh comments are welcome uh

1157
00:50:28,720 --> 00:50:32,000
the implementations are happening um you

1158
00:50:32,000 --> 00:50:34,079
can see this diagram here where it

1159
00:50:34,079 --> 00:50:36,960
basically says oh look you know there's

1160
00:50:36,960 --> 00:50:38,960
pins popping up

1161
00:50:38,960 --> 00:50:41,119
looks like a road map to me

1162
00:50:41,119 --> 00:50:42,559
that's because we've talked to lots of

1163
00:50:42,559 --> 00:50:44,640
people who are doing this

1164
00:50:44,640 --> 00:50:46,640
and um we're really looking forward to

1165
00:50:46,640 --> 00:50:49,440
everybody's input and uh ideas on how to

1166
00:50:49,440 --> 00:50:51,359
do this

1167
00:50:51,359 --> 00:50:54,000
additionally what we can do with it and

1168
00:50:54,000 --> 00:50:56,000
then the backup slides you'll see that

1169
00:50:56,000 --> 00:50:58,160
we can

1170
00:50:58,160 --> 00:51:00,960
implement alternative rates of rate

1171
00:51:00,960 --> 00:51:03,920
programming to emulate applications

1172
00:51:03,920 --> 00:51:06,240
so that's a really valuable feature of

1173
00:51:06,240 --> 00:51:08,720
this protocol and this uh

1174
00:51:08,720 --> 00:51:11,599
it's not just capacity it's um almost

1175
00:51:11,599 --> 00:51:13,599
anything you can imagine that you can

1176
00:51:13,599 --> 00:51:17,119
write the load adjustment um system for

1177
00:51:17,119 --> 00:51:20,000
it can be static and it can be dynamic

1178
00:51:20,000 --> 00:51:22,559
based on the measurement feedback

1179
00:51:22,559 --> 00:51:25,920
so uh think about this i'm almost sorry

1180
00:51:25,920 --> 00:51:27,839
i called it a capacity measurement

1181
00:51:27,839 --> 00:51:30,319
protocol because we can do so much more

1182
00:51:30,319 --> 00:51:32,400
than that so thanks everybody for your

1183
00:51:32,400 --> 00:51:33,440
attention

1184
00:51:33,440 --> 00:51:34,480
and um

1185
00:51:34,480 --> 00:51:35,839
uh we can

1186
00:51:35,839 --> 00:51:40,599
i guess we can just run on here now

1187
00:51:50,880 --> 00:51:52,960
there is a comment there from uh will

1188
00:51:52,960 --> 00:51:54,960
hawkins

1189
00:51:54,960 --> 00:51:57,520
also have the same feedback and problem

1190
00:51:57,520 --> 00:51:58,319
um

1191
00:51:58,319 --> 00:51:59,920
in responsiveness

1192
00:51:59,920 --> 00:52:02,240
uh the presence of encryption the

1193
00:52:02,240 --> 00:52:03,920
protocol means that it's more difficult

1194
00:52:03,920 --> 00:52:05,040
to measure

1195
00:52:05,040 --> 00:52:07,280
low power limit devices we think this

1196
00:52:07,280 --> 00:52:09,119
problem is significant so will's

1197
00:52:09,119 --> 00:52:11,680
basically agreeing with me um

1198
00:52:11,680 --> 00:52:13,440
uh we got to let kind of let the

1199
00:52:13,440 --> 00:52:16,079
measurement side of this uh

1200
00:52:16,079 --> 00:52:17,200
go loose

1201
00:52:17,200 --> 00:52:19,520
on encryption to get

1202
00:52:19,520 --> 00:52:21,599
effectively the right answers thank you

1203
00:52:21,599 --> 00:52:24,599
will

1204
00:52:35,200 --> 00:52:36,720
and um

1205
00:52:36,720 --> 00:52:38,480
edward says it looks like we lost the

1206
00:52:38,480 --> 00:52:40,720
room

1207
00:52:43,520 --> 00:52:44,960
uh i don't know if you can hear us from

1208
00:52:44,960 --> 00:52:47,280
the room uh and everyone we have some

1209
00:52:47,280 --> 00:52:50,079
network issues here so kind of

1210
00:52:50,079 --> 00:52:52,960
medical is offline in this room so we'll

1211
00:52:52,960 --> 00:52:54,559
we will try to get back to you as soon

1212
00:52:54,559 --> 00:52:57,599
as we can um

1213
00:52:57,680 --> 00:53:01,680
yes we have this video okay thanks

1214
00:53:01,680 --> 00:53:04,079
i think i'm pretty much done though yeah

1215
00:53:04,079 --> 00:53:06,800
i i think you hear us because i enabled

1216
00:53:06,800 --> 00:53:08,480
my

1217
00:53:08,480 --> 00:53:10,640
local microphone here but um

1218
00:53:10,640 --> 00:53:12,720
we'll hopefully get this fixed as soon

1219
00:53:12,720 --> 00:53:15,440
as possible do you do you want me to

1220
00:53:15,440 --> 00:53:17,680
share some slides or something like that

1221
00:53:17,680 --> 00:53:21,160
to keep going

1222
00:53:30,880 --> 00:53:33,880
uh

1223
00:53:57,119 --> 00:53:59,280
oh

1224
00:54:00,960 --> 00:54:03,960
yep

1225
00:54:10,800 --> 00:54:12,400
all right it looks like we are coming

1226
00:54:12,400 --> 00:54:15,040
back online over here

1227
00:54:15,040 --> 00:54:16,880
al do you want to try talking and seeing

1228
00:54:16,880 --> 00:54:19,040
if the room can hear you if you assuming

1229
00:54:19,040 --> 00:54:20,240
you can't hear me

1230
00:54:20,240 --> 00:54:22,640
okay yeah

1231
00:54:22,640 --> 00:54:25,680
yeah all right

1232
00:54:25,680 --> 00:54:27,359
yeah i don't want to take up any more

1233
00:54:27,359 --> 00:54:28,160
time

1234
00:54:28,160 --> 00:54:30,240
oh thanks everybody for your attention

1235
00:54:30,240 --> 00:54:31,920
and feedback

1236
00:54:31,920 --> 00:54:33,920
yeah um actually al

1237
00:54:33,920 --> 00:54:38,799
um i i did have a couple comments myself

1238
00:54:38,799 --> 00:54:41,680
that's fine so i mean in in general i

1239
00:54:41,680 --> 00:54:43,040
think

1240
00:54:43,040 --> 00:54:44,319
the

1241
00:54:44,319 --> 00:54:45,599
the approach and sentiments you're

1242
00:54:45,599 --> 00:54:47,280
expressing i

1243
00:54:47,280 --> 00:54:50,240
i agree with a lot um

1244
00:54:50,240 --> 00:54:52,240
when actually could we jump back to like

1245
00:54:52,240 --> 00:54:54,160
slide

1246
00:54:54,160 --> 00:54:55,839
five

1247
00:54:55,839 --> 00:54:59,279
or one more six

1248
00:55:00,000 --> 00:55:03,760
oh oh yeah yeah um so when we're talking

1249
00:55:03,760 --> 00:55:04,880
about

1250
00:55:04,880 --> 00:55:08,640
the authentication of the data

1251
00:55:08,640 --> 00:55:10,799
the actual load packets which i

1252
00:55:10,799 --> 00:55:12,880
would certainly agree that

1253
00:55:12,880 --> 00:55:14,319
that doesn't seem like a great idea to

1254
00:55:14,319 --> 00:55:17,119
try to add more authentication to those

1255
00:55:17,119 --> 00:55:19,760
since it's a pretty minimal attack um i

1256
00:55:19,760 --> 00:55:21,200
have a couple questions so we you

1257
00:55:21,200 --> 00:55:23,280
mentioned the three second timeout here

1258
00:55:23,280 --> 00:55:25,680
is that a negotiated

1259
00:55:25,680 --> 00:55:28,240
uh timeout in the kind of initial test

1260
00:55:28,240 --> 00:55:30,720
setup um such that that is just an

1261
00:55:30,720 --> 00:55:34,319
example time or is that a fixed time

1262
00:55:34,319 --> 00:55:36,559
in the document

1263
00:55:36,559 --> 00:55:37,440
um

1264
00:55:37,440 --> 00:55:40,559
it's a fixed time in the in the protocol

1265
00:55:40,559 --> 00:55:43,440
it's a you know basically a pound define

1266
00:55:43,440 --> 00:55:44,640
and um

1267
00:55:44,640 --> 00:55:45,760
uh

1268
00:55:45,760 --> 00:55:48,480
okay

1269
00:55:48,480 --> 00:55:51,040
um and then i was also

1270
00:55:51,040 --> 00:55:52,559
wondering you know like if we're getting

1271
00:55:52,559 --> 00:55:54,480
if for some reason we get pushback on

1272
00:55:54,480 --> 00:55:55,359
not

1273
00:55:55,359 --> 00:55:57,599
having these authenticated kind of going

1274
00:55:57,599 --> 00:55:59,119
into you know what do we actually think

1275
00:55:59,119 --> 00:56:00,400
an attacker

1276
00:56:00,400 --> 00:56:03,920
could do with this would be good i mean

1277
00:56:03,920 --> 00:56:06,079
um you mentioned they could you know

1278
00:56:06,079 --> 00:56:08,079
stop the test prematurely

1279
00:56:08,079 --> 00:56:09,440
um

1280
00:56:09,440 --> 00:56:10,559
would there be something we could

1281
00:56:10,559 --> 00:56:12,160
potentially do

1282
00:56:12,160 --> 00:56:14,559
at the end either in a status feedback

1283
00:56:14,559 --> 00:56:16,400
or it seems like like the the final

1284
00:56:16,400 --> 00:56:19,359
message which would be authenticated

1285
00:56:19,359 --> 00:56:20,079
to

1286
00:56:20,079 --> 00:56:22,240
indicate if one side like thought it

1287
00:56:22,240 --> 00:56:24,880
sent a stop or just essentially detect

1288
00:56:24,880 --> 00:56:26,720
after the fact that something like a

1289
00:56:26,720 --> 00:56:29,280
stop bit was set by an attacker so you

1290
00:56:29,280 --> 00:56:30,720
could just confirm that like yes we ran

1291
00:56:30,720 --> 00:56:31,839
this test

1292
00:56:31,839 --> 00:56:32,799
and

1293
00:56:32,799 --> 00:56:34,240
there were the number of stops that we

1294
00:56:34,240 --> 00:56:35,920
expected to see

1295
00:56:35,920 --> 00:56:38,079
or there was a mismatch and so we should

1296
00:56:38,079 --> 00:56:41,760
throw this result out

1297
00:56:41,760 --> 00:56:43,359
yeah um

1298
00:56:43,359 --> 00:56:46,480
i think i think the client can send the

1299
00:56:46,480 --> 00:56:49,520
client can send its own stop bit and

1300
00:56:49,520 --> 00:56:51,280
that um

1301
00:56:51,280 --> 00:56:53,760
uh that that would either be

1302
00:56:53,760 --> 00:56:54,720
uh

1303
00:56:54,720 --> 00:56:56,799
it would either be in the load if it's

1304
00:56:56,799 --> 00:57:00,079
an upstream test or in the feedback if

1305
00:57:00,079 --> 00:57:03,280
it's a if it's a downstream test

1306
00:57:03,280 --> 00:57:05,520
and um and both the client and the

1307
00:57:05,520 --> 00:57:08,720
server have the timeouts for ending the

1308
00:57:08,720 --> 00:57:11,720
test

1309
00:57:12,880 --> 00:57:14,000
okay

1310
00:57:14,000 --> 00:57:16,160
thanks for clarifying

1311
00:57:16,160 --> 00:57:18,480
all right

1312
00:57:19,839 --> 00:57:22,000
yeah

1313
00:57:22,000 --> 00:57:23,359
you wanna i think you have to stop

1314
00:57:23,359 --> 00:57:26,359
sharing

1315
00:57:31,280 --> 00:57:34,440
you go

1316
00:57:40,960 --> 00:57:42,160
hello

1317
00:57:42,160 --> 00:57:45,760
working great so i'm igor lubachev um

1318
00:57:45,760 --> 00:57:47,040
i'm going to talk here about the

1319
00:57:47,040 --> 00:57:49,440
explicit slow measurement that's a draft

1320
00:57:49,440 --> 00:57:52,400
that's in the working group last call

1321
00:57:52,400 --> 00:57:54,720
if you recall the

1322
00:57:54,720 --> 00:57:57,119
uh if you've been following it uh it's

1323
00:57:57,119 --> 00:57:58,640
been basically

1324
00:57:58,640 --> 00:58:01,119
merged together from two different

1325
00:58:01,119 --> 00:58:03,440
drafts that explore slightly different

1326
00:58:03,440 --> 00:58:05,599
techniques to solve a very similar

1327
00:58:05,599 --> 00:58:08,240
problem uh that's why we have quite a

1328
00:58:08,240 --> 00:58:09,920
list of others here

1329
00:58:09,920 --> 00:58:14,240
um nothing has much changed since the uh

1330
00:58:14,240 --> 00:58:16,799
were since the last call so we have the

1331
00:58:16,799 --> 00:58:19,119
same version of the draft um

1332
00:58:19,119 --> 00:58:20,559
we haven't received a whole ton of

1333
00:58:20,559 --> 00:58:22,400
feedback in last call maybe because it's

1334
00:58:22,400 --> 00:58:23,839
perfect

1335
00:58:23,839 --> 00:58:26,000
but

1336
00:58:26,000 --> 00:58:28,559
but so i'll take this opportunity to

1337
00:58:28,559 --> 00:58:31,119
kind of reintroduce the problem and show

1338
00:58:31,119 --> 00:58:34,559
you what we've come up with and then ask

1339
00:58:34,559 --> 00:58:38,000
for hey if you do have some comments for

1340
00:58:38,000 --> 00:58:39,839
during the last call i mean it's awesome

1341
00:58:39,839 --> 00:58:41,599
time to

1342
00:58:41,599 --> 00:58:43,520
to give them and to improve things

1343
00:58:43,520 --> 00:58:46,559
so the problem is uh well network

1344
00:58:46,559 --> 00:58:47,839
operators need to be able to

1345
00:58:47,839 --> 00:58:50,480
troubleshoot problems such as

1346
00:58:50,480 --> 00:58:52,640
loss and latency issues and i mean

1347
00:58:52,640 --> 00:58:54,640
detect them first

1348
00:58:54,640 --> 00:58:57,040
and to do that it's really best to

1349
00:58:57,040 --> 00:58:59,119
actually be able to observe the problem

1350
00:58:59,119 --> 00:59:00,799
because otherwise

1351
00:59:00,799 --> 00:59:03,599
a response to a trouble call is

1352
00:59:03,599 --> 00:59:05,040
we looked at a few

1353
00:59:05,040 --> 00:59:06,960
at a few statistics here and there we

1354
00:59:06,960 --> 00:59:09,440
saw nothing uh sorry

1355
00:59:09,440 --> 00:59:10,480
um

1356
00:59:10,480 --> 00:59:12,799
that might be just uh like well maybe

1357
00:59:12,799 --> 00:59:14,160
you haven't looked enough maybe you

1358
00:59:14,160 --> 00:59:16,960
should look at a few more so uh with

1359
00:59:16,960 --> 00:59:19,200
protocols like tcp

1360
00:59:19,200 --> 00:59:20,480
uh

1361
00:59:20,480 --> 00:59:22,799
at the last resort you could pull out a

1362
00:59:22,799 --> 00:59:25,680
wire shark and try to observe the

1363
00:59:25,680 --> 00:59:27,520
problem as it's happening if somebody is

1364
00:59:27,520 --> 00:59:29,440
saying that you have lost in your

1365
00:59:29,440 --> 00:59:32,240
network and you can't find it so observe

1366
00:59:32,240 --> 00:59:32,960
it

1367
00:59:32,960 --> 00:59:33,920
um

1368
00:59:33,920 --> 00:59:36,480
with encrypted protocols that's not

1369
00:59:36,480 --> 00:59:38,640
going to work well

1370
00:59:38,640 --> 00:59:41,359
because the transports are encrypting

1371
00:59:41,359 --> 00:59:44,240
all the headers everything that would be

1372
00:59:44,240 --> 00:59:46,240
useful for this purpose and they're

1373
00:59:46,240 --> 00:59:48,960
doing it for a good reason

1374
00:59:48,960 --> 00:59:51,520
i mean at least good enough reason

1375
00:59:51,520 --> 00:59:54,559
number one concern is

1376
00:59:54,559 --> 00:59:55,920
all that

1377
00:59:55,920 --> 00:59:58,240
clear tx stuff could lead

1378
00:59:58,240 --> 01:00:00,720
leak uh some information that could be

1379
01:00:00,720 --> 01:00:03,680
considered to disclose more stuff than

1380
01:00:03,680 --> 01:00:06,079
endpoints wish to disclose so privacy

1381
01:00:06,079 --> 01:00:07,119
risk

1382
01:00:07,119 --> 01:00:09,520
and the second concern is that unpassed

1383
01:00:09,520 --> 01:00:12,720
devices trying to be super helpful

1384
01:00:12,720 --> 01:00:15,680
uh to be able to be very helpful need to

1385
01:00:15,680 --> 01:00:17,280
understand what they're seeing and when

1386
01:00:17,280 --> 01:00:19,040
they understand what they're seeing they

1387
01:00:19,040 --> 01:00:21,680
don't understand any different anything

1388
01:00:21,680 --> 01:00:22,720
different

1389
01:00:22,720 --> 01:00:25,920
and may cause problems and as an effect

1390
01:00:25,920 --> 01:00:29,680
you have protocol classification uh that

1391
01:00:29,680 --> 01:00:31,839
basically you just can't do any

1392
01:00:31,839 --> 01:00:34,480
innovations uh can any do any changes

1393
01:00:34,480 --> 01:00:36,640
we're all familiar with that so that's

1394
01:00:36,640 --> 01:00:38,880
like another reason why

1395
01:00:38,880 --> 01:00:40,079
some of them

1396
01:00:40,079 --> 01:00:42,480
looking at quick of course encrypted

1397
01:00:42,480 --> 01:00:44,799
transports chose to encrypt as much

1398
01:00:44,799 --> 01:00:47,280
information as possible

1399
01:00:47,280 --> 01:00:49,359
um there are other uses

1400
01:00:49,359 --> 01:00:52,319
for these techniques that are unrelated

1401
01:00:52,319 --> 01:00:54,480
to encrypted transports

1402
01:00:54,480 --> 01:00:56,400
so we're trying to find

1403
01:00:56,400 --> 01:00:57,599
uh

1404
01:00:57,599 --> 01:00:59,119
develop techniques

1405
01:00:59,119 --> 01:01:00,400
that can be

1406
01:01:00,400 --> 01:01:03,839
used with just a few bits like really

1407
01:01:03,839 --> 01:01:06,000
really a few like one or two

1408
01:01:06,000 --> 01:01:07,119
three

1409
01:01:07,119 --> 01:01:08,079
um

1410
01:01:08,079 --> 01:01:10,480
that would be enough to

1411
01:01:10,480 --> 01:01:12,240
figure out quite a bit of information

1412
01:01:12,240 --> 01:01:14,799
about any problem that's happening

1413
01:01:14,799 --> 01:01:16,559
the advantage of having just a few

1414
01:01:16,559 --> 01:01:18,640
techniques a few bits is that first of

1415
01:01:18,640 --> 01:01:21,440
all fewer bits means it's easier to do

1416
01:01:21,440 --> 01:01:24,000
any sort of privacy security analysis

1417
01:01:24,000 --> 01:01:26,480
you're much less likely to leak stuff

1418
01:01:26,480 --> 01:01:28,319
inadvertently

1419
01:01:28,319 --> 01:01:29,680
especially if your bids are

1420
01:01:29,680 --> 01:01:31,599
purpose-built and not built for some

1421
01:01:31,599 --> 01:01:32,880
other purpose

1422
01:01:32,880 --> 01:01:35,920
and second is that an explicit signal as

1423
01:01:35,920 --> 01:01:38,640
opposed to implied signal from transport

1424
01:01:38,640 --> 01:01:39,680
headers

1425
01:01:39,680 --> 01:01:43,520
means that it's not integral uh to the

1426
01:01:43,520 --> 01:01:45,839
operation of the transport which means

1427
01:01:45,839 --> 01:01:48,319
you can just turn it off

1428
01:01:48,319 --> 01:01:50,880
or you can only enable it selectively

1429
01:01:50,880 --> 01:01:53,200
when you need it you can grease them

1430
01:01:53,200 --> 01:01:54,079
um

1431
01:01:54,079 --> 01:01:56,240
and that's

1432
01:01:56,240 --> 01:01:57,280
that will

1433
01:01:57,280 --> 01:01:58,319
help

1434
01:01:58,319 --> 01:02:00,400
against protocolsification

1435
01:02:00,400 --> 01:02:02,960
next please

1436
01:02:04,720 --> 01:02:05,760
um

1437
01:02:05,760 --> 01:02:08,640
some of the prior art uh

1438
01:02:08,640 --> 01:02:10,960
latency spin bit uh

1439
01:02:10,960 --> 01:02:13,760
after quite a bit of debate in quick

1440
01:02:13,760 --> 01:02:16,480
working group it's been added to

1441
01:02:16,480 --> 01:02:18,839
quick version one

1442
01:02:18,839 --> 01:02:21,599
and its

1443
01:02:21,599 --> 01:02:24,480
purpose is to be able to measure um

1444
01:02:24,480 --> 01:02:26,960
round trip latency

1445
01:02:26,960 --> 01:02:29,680
now this draft in this draft we are the

1446
01:02:29,680 --> 01:02:32,559
whole ton of additional bits that are

1447
01:02:32,559 --> 01:02:35,599
designed to

1448
01:02:35,599 --> 01:02:38,480
do particular measurements uh

1449
01:02:38,480 --> 01:02:40,720
latency measurements and different kinds

1450
01:02:40,720 --> 01:02:42,319
of loss measurements

1451
01:02:42,319 --> 01:02:43,920
uh they can be used together in

1452
01:02:43,920 --> 01:02:48,520
combinations uh next

1453
01:02:50,079 --> 01:02:51,119
um

1454
01:02:51,119 --> 01:02:53,760
some of them again the goal is not to

1455
01:02:53,760 --> 01:02:55,760
read the eye chart and the like ever

1456
01:02:55,760 --> 01:02:57,359
since

1457
01:02:57,359 --> 01:02:59,920
this table is in the draft um but the

1458
01:02:59,920 --> 01:03:02,559
idea is that we are discussing

1459
01:03:02,559 --> 01:03:05,200
what different bits do we compare

1460
01:03:05,200 --> 01:03:07,599
their performance in terms of fidelity

1461
01:03:07,599 --> 01:03:09,520
versus

1462
01:03:09,520 --> 01:03:13,520
latency of the measurement versus

1463
01:03:13,520 --> 01:03:15,760
how

1464
01:03:15,760 --> 01:03:18,000
how many measurements you can do on a

1465
01:03:18,000 --> 01:03:21,280
particular flow so

1466
01:03:21,440 --> 01:03:25,680
that's about latency next

1467
01:03:28,079 --> 01:03:31,039
and similar for loss uh we have many

1468
01:03:31,039 --> 01:03:34,720
different loss metrics you can derive

1469
01:03:34,720 --> 01:03:37,039
from using different bits or their

1470
01:03:37,039 --> 01:03:38,880
combinations again

1471
01:03:38,880 --> 01:03:42,640
uh we have a bunch of analysis for

1472
01:03:42,640 --> 01:03:45,440
comparing a different alternative what

1473
01:03:45,440 --> 01:03:48,880
you can do with just two bits one bit

1474
01:03:48,880 --> 01:03:49,760
um

1475
01:03:49,760 --> 01:03:53,440
trade-off between again fidelity and

1476
01:03:53,440 --> 01:03:54,720
um

1477
01:03:54,720 --> 01:03:57,280
how quickly you can see loss after it's

1478
01:03:57,280 --> 01:03:59,200
happened um

1479
01:03:59,200 --> 01:04:02,319
do you see lost shape or do you see just

1480
01:04:02,319 --> 01:04:05,039
approximate average loss per connection

1481
01:04:05,039 --> 01:04:07,760
round three perhaps anyway so

1482
01:04:07,760 --> 01:04:12,520
a lot of different analysis here next

1483
01:04:13,119 --> 01:04:14,720
sorry do you want to take a comment now

1484
01:04:14,720 --> 01:04:16,559
for martin or yeah yeah i'll take that

1485
01:04:16,559 --> 01:04:19,280
i'll take a comment

1486
01:04:20,400 --> 01:04:23,520
hey gore martin duke google um

1487
01:04:23,520 --> 01:04:26,319
square bit in particular uh seems to

1488
01:04:26,319 --> 01:04:29,599
have a lot of overlap with 8321

1489
01:04:29,599 --> 01:04:30,480
um

1490
01:04:30,480 --> 01:04:32,559
which is this is this is standard

1491
01:04:32,559 --> 01:04:35,520
proposed standard uh informational okay

1492
01:04:35,520 --> 01:04:37,119
so um

1493
01:04:37,119 --> 01:04:39,039
like

1494
01:04:39,039 --> 01:04:40,720
uh uh

1495
01:04:40,720 --> 01:04:42,160
one like i think we should probably

1496
01:04:42,160 --> 01:04:44,480
figure out where we're gonna like

1497
01:04:44,480 --> 01:04:46,319
discuss and specify this square bit

1498
01:04:46,319 --> 01:04:47,760
thing unless it's just referring to that

1499
01:04:47,760 --> 01:04:48,720
draft

1500
01:04:48,720 --> 01:04:50,480
so um

1501
01:04:50,480 --> 01:04:52,799
it is referring to i mean it's

1502
01:04:52,799 --> 01:04:56,400
square bit is not was not invented here

1503
01:04:56,400 --> 01:04:59,119
okay it is just one of the signals so

1504
01:04:59,119 --> 01:05:01,359
the purpose of the draft is not to

1505
01:05:01,359 --> 01:05:03,280
specify bits on the wire

1506
01:05:03,280 --> 01:05:05,280
that will be up to the protocols how to

1507
01:05:05,280 --> 01:05:07,119
how they choose to implement it the

1508
01:05:07,119 --> 01:05:09,839
purpose is to give you techniques uh to

1509
01:05:09,839 --> 01:05:11,839
analyze techniques and to say and

1510
01:05:11,839 --> 01:05:14,000
basically to say that's what you can do

1511
01:05:14,000 --> 01:05:16,799
with as many bits as you want to spare

1512
01:05:16,799 --> 01:05:19,839
yeah i mean 83-21 even though it's

1513
01:05:19,839 --> 01:05:21,520
currently experimental and headed for

1514
01:05:21,520 --> 01:05:22,799
standards i guess

1515
01:05:22,799 --> 01:05:24,400
it's the same thing it is not attached

1516
01:05:24,400 --> 01:05:25,920
to a protocol and i guess there are

1517
01:05:25,920 --> 01:05:28,400
other draft other drafts that are

1518
01:05:28,400 --> 01:05:30,559
instantiating that but um

1519
01:05:30,559 --> 01:05:32,799
also interestingly um

1520
01:05:32,799 --> 01:05:35,119
i think they've gone away from the like

1521
01:05:35,119 --> 01:05:36,799
end packets to having like a time

1522
01:05:36,799 --> 01:05:37,920
interval

1523
01:05:37,920 --> 01:05:39,760
um

1524
01:05:39,760 --> 01:05:40,799
so

1525
01:05:40,799 --> 01:05:41,839
i don't know i think we should get our

1526
01:05:41,839 --> 01:05:44,640
story straight on that uh

1527
01:05:44,640 --> 01:05:45,599
but

1528
01:05:45,599 --> 01:05:47,280
yeah i think that's exactly the kind of

1529
01:05:47,280 --> 01:05:49,920
feedback that's totally awesome and we

1530
01:05:49,920 --> 01:05:52,000
can we can discuss looks like giuseppe

1531
01:05:52,000 --> 01:05:54,079
he's a co-author here uh maybe he wants

1532
01:05:54,079 --> 01:05:55,039
to

1533
01:05:55,039 --> 01:05:57,760
find something

1534
01:05:58,960 --> 01:06:00,960
hello

1535
01:06:00,960 --> 01:06:02,079
yep

1536
01:06:02,079 --> 01:06:05,839
yeah just to answer to martin point yeah

1537
01:06:05,839 --> 01:06:07,760
uh the square bit

1538
01:06:07,760 --> 01:06:11,280
is introduced also in the 8321

1539
01:06:11,280 --> 01:06:13,920
but yeah the difference as you know that

1540
01:06:13,920 --> 01:06:15,920
in the 8321 in particular in the

1541
01:06:15,920 --> 01:06:19,200
proposed standard document we focus only

1542
01:06:19,200 --> 01:06:22,400
on fixed timer

1543
01:06:22,400 --> 01:06:24,640
blocks while the

1544
01:06:24,640 --> 01:06:26,160
square bit

1545
01:06:26,160 --> 01:06:29,200
is on based on fixed number so

1546
01:06:29,200 --> 01:06:30,559
in case

1547
01:06:30,559 --> 01:06:33,359
of course these uh will be standard

1548
01:06:33,359 --> 01:06:35,200
track i mean the explicit flow

1549
01:06:35,200 --> 01:06:37,520
measurement this will need

1550
01:06:37,520 --> 01:06:39,520
a

1551
01:06:39,520 --> 01:06:43,038
an accurate uh

1552
01:06:43,680 --> 01:06:44,799
detail

1553
01:06:44,799 --> 01:06:49,319
as we do in the 83-21

1554
01:06:50,799 --> 01:06:53,200
yeah and i just want to clarify that i i

1555
01:06:53,200 --> 01:06:55,119
technically have no dock in this fight

1556
01:06:55,119 --> 01:06:55,920
um

1557
01:06:55,920 --> 01:06:57,359
but uh

1558
01:06:57,359 --> 01:07:00,559
like i think the community should decide

1559
01:07:00,559 --> 01:07:02,480
the best way to do this because 83-21

1560
01:07:02,480 --> 01:07:05,440
had both and 83-21 this is down

1561
01:07:05,440 --> 01:07:07,440
selecting to time

1562
01:07:07,440 --> 01:07:08,799
so um

1563
01:07:08,799 --> 01:07:11,119
like i said and that's fine yeah i mean

1564
01:07:11,119 --> 01:07:13,200
whatever works best for the purpose

1565
01:07:13,200 --> 01:07:15,520
right i mean if we decide time works

1566
01:07:15,520 --> 01:07:17,760
fine fine but if we decide that we look

1567
01:07:17,760 --> 01:07:20,000
at time and say it has problems for the

1568
01:07:20,000 --> 01:07:22,240
purpose i mean what's important is that

1569
01:07:22,240 --> 01:07:24,480
it's fit for the purpose

1570
01:07:24,480 --> 01:07:26,000
yeah absolutely yeah

1571
01:07:26,000 --> 01:07:28,240
i mean if the if the name clash is a

1572
01:07:28,240 --> 01:07:31,200
problem we can obviously rename it

1573
01:07:31,200 --> 01:07:32,319
well i mean i don't think it's a

1574
01:07:32,319 --> 01:07:33,920
question of name class thing

1575
01:07:33,920 --> 01:07:34,880
i think

1576
01:07:34,880 --> 01:07:37,440
name clashing i think um

1577
01:07:37,440 --> 01:07:39,200
like if you're going to use that if

1578
01:07:39,200 --> 01:07:41,039
you're going to use a bit for loss

1579
01:07:41,039 --> 01:07:42,960
detection i think communities to decide

1580
01:07:42,960 --> 01:07:44,400
how that works

1581
01:07:44,400 --> 01:07:46,799
um and whether it's this or

1582
01:07:46,799 --> 01:07:47,839
whether it's

1583
01:07:47,839 --> 01:07:51,440
packets or whether it's packets or time

1584
01:07:51,440 --> 01:07:53,760
either one but we should decide

1585
01:07:53,760 --> 01:07:54,640
thanks

1586
01:07:54,640 --> 01:07:57,440
thank you

1587
01:07:57,440 --> 01:08:00,559
all right uh next slide

1588
01:08:00,559 --> 01:08:02,799
just a comment on that um

1589
01:08:02,799 --> 01:08:04,880
so does the current

1590
01:08:04,880 --> 01:08:07,039
document where it defines the square bit

1591
01:08:07,039 --> 01:08:08,160
talk about

1592
01:08:08,160 --> 01:08:10,240
the time option or does it only describe

1593
01:08:10,240 --> 01:08:10,960
the

1594
01:08:10,960 --> 01:08:14,799
uh no it talks about uh packets yes

1595
01:08:14,799 --> 01:08:16,319
i mean what i would suggest given that

1596
01:08:16,319 --> 01:08:17,759
this is informational it's kind of

1597
01:08:17,759 --> 01:08:19,839
laying out here's the zoo

1598
01:08:19,839 --> 01:08:22,080
of all of the different bits

1599
01:08:22,080 --> 01:08:24,479
this should just describe both say hey

1600
01:08:24,479 --> 01:08:25,839
there's you could do it based on time

1601
01:08:25,839 --> 01:08:26,960
you could do it based on number of

1602
01:08:26,960 --> 01:08:28,080
packets

1603
01:08:28,080 --> 01:08:30,319
this other document over here chose to

1604
01:08:30,319 --> 01:08:31,759
do it based on time here's why you would

1605
01:08:31,759 --> 01:08:33,759
want to do that but if in the future

1606
01:08:33,759 --> 01:08:35,120
someone has a really good reason why

1607
01:08:35,120 --> 01:08:37,279
they want to do it based on packets

1608
01:08:37,279 --> 01:08:40,480
that also exists

1609
01:08:42,479 --> 01:08:44,479
thank you

1610
01:08:44,479 --> 01:08:46,238
sorry i just yeah i think that's

1611
01:08:46,238 --> 01:08:49,120
reasonable um

1612
01:08:49,359 --> 01:08:50,960
uh

1613
01:08:50,960 --> 01:08:52,960
with the caveat that like

1614
01:08:52,960 --> 01:08:54,880
if 83 21 business the pro standard we

1615
01:08:54,880 --> 01:08:56,238
really have community consensus that

1616
01:08:56,238 --> 01:08:58,479
that is the best way to go forward um

1617
01:08:58,479 --> 01:09:00,479
then we should probably make sure that's

1618
01:09:00,479 --> 01:09:01,279
clear

1619
01:09:01,279 --> 01:09:03,920
in any informational document

1620
01:09:03,920 --> 01:09:06,319
and yeah totally we should discuss it

1621
01:09:06,319 --> 01:09:07,839
yeah thank you

1622
01:09:07,839 --> 01:09:10,000
all right uh so

1623
01:09:10,000 --> 01:09:12,399
this slide is basically talking about

1624
01:09:12,399 --> 01:09:14,880
this being actually in use

1625
01:09:14,880 --> 01:09:16,880
um

1626
01:09:16,880 --> 01:09:20,319
there's a number of industry uh that's

1627
01:09:20,319 --> 01:09:22,640
in the implementation so for example

1628
01:09:22,640 --> 01:09:26,000
akamai orange implemented it and ran uh

1629
01:09:26,000 --> 01:09:27,359
this for

1630
01:09:27,359 --> 01:09:30,479
about a year uh in production we've made

1631
01:09:30,479 --> 01:09:31,759
um

1632
01:09:31,759 --> 01:09:32,839
go

1633
01:09:32,839 --> 01:09:35,520
back we're a little bit short out of

1634
01:09:35,520 --> 01:09:37,120
time okay very good so i'll just

1635
01:09:37,120 --> 01:09:38,399
summarize

1636
01:09:38,399 --> 01:09:39,920
a number of implementations from

1637
01:09:39,920 --> 01:09:42,960
different operators uh a number of uh

1638
01:09:42,960 --> 01:09:46,399
implementations from researchers um so

1639
01:09:46,399 --> 01:09:49,120
that's been done and just like the last

1640
01:09:49,120 --> 01:09:52,158
slide uh the quick history of it is that

1641
01:09:52,158 --> 01:09:54,480
we've been running uh last call since

1642
01:09:54,480 --> 01:09:58,880
july 6. uh we just received on the least

1643
01:09:58,880 --> 01:10:01,199
substantive good feedback from marcus

1644
01:10:01,199 --> 01:10:03,040
about some hidden parts of the delay

1645
01:10:03,040 --> 01:10:06,880
bits i just now feedback from martin um

1646
01:10:06,880 --> 01:10:08,560
so let's

1647
01:10:08,560 --> 01:10:09,360
uh

1648
01:10:09,360 --> 01:10:11,040
looks like we need another revision of

1649
01:10:11,040 --> 01:10:13,600
it uh let's discuss on the list uh

1650
01:10:13,600 --> 01:10:16,000
probably we want to extend the last call

1651
01:10:16,000 --> 01:10:17,520
and

1652
01:10:17,520 --> 01:10:19,760
get another revision in

1653
01:10:19,760 --> 01:10:21,920
yeah probably maybe get another revision

1654
01:10:21,920 --> 01:10:24,640
in and make a new last call at a later

1655
01:10:24,640 --> 01:10:26,320
point yeah

1656
01:10:26,320 --> 01:10:27,199
okay

1657
01:10:27,199 --> 01:10:30,360
thank you

1658
01:10:31,280 --> 01:10:33,519
okay

1659
01:10:34,719 --> 01:10:36,560
all right so next i think we have a

1660
01:10:36,560 --> 01:10:39,280
responsiveness and uh christoph i think

1661
01:10:39,280 --> 01:10:41,600
billy wanted to share his own

1662
01:10:41,600 --> 01:10:42,840
uh

1663
01:10:42,840 --> 01:10:45,600
slides oh yes i would like to share my

1664
01:10:45,600 --> 01:10:47,360
screen that way you can see in

1665
01:10:47,360 --> 01:10:51,040
animations which will make it easier

1666
01:10:51,199 --> 01:10:54,159
to visualize the changes

1667
01:10:54,159 --> 01:10:56,320
i want to show you screen yes let me

1668
01:10:56,320 --> 01:10:59,840
know if it does not work

1669
01:11:03,199 --> 01:11:04,800
we see it

1670
01:11:04,800 --> 01:11:06,080
so you know you should see it in the

1671
01:11:06,080 --> 01:11:08,880
presentation mode

1672
01:11:09,360 --> 01:11:11,040
yes

1673
01:11:11,040 --> 01:11:12,480
great

1674
01:11:12,480 --> 01:11:13,620
so um

1675
01:11:13,620 --> 01:11:15,679
[Music]

1676
01:11:15,679 --> 01:11:18,239
so hello yes um this is responsiveness

1677
01:11:18,239 --> 01:11:21,040
under working conditions um we

1678
01:11:21,040 --> 01:11:22,560
submitted a

1679
01:11:22,560 --> 01:11:26,480
zero one version um shortly before uh

1680
01:11:26,480 --> 01:11:29,040
this meeting here the update from zero

1681
01:11:29,040 --> 01:11:32,800
zero one to zero one is uh the mill is

1682
01:11:32,800 --> 01:11:35,199
listed here we closed the

1683
01:11:35,199 --> 01:11:37,760
set of get up issues we merged a few

1684
01:11:37,760 --> 01:11:40,159
pr's got a few contributions

1685
01:11:40,159 --> 01:11:42,560
and in terms of the significant changes

1686
01:11:42,560 --> 01:11:43,840
there's first

1687
01:11:43,840 --> 01:11:46,480
stuart cheshire added dns based service

1688
01:11:46,480 --> 01:11:47,760
discovery

1689
01:11:47,760 --> 01:11:48,800
for

1690
01:11:48,800 --> 01:11:49,520
the

1691
01:11:49,520 --> 01:11:51,840
network quality measurement or the

1692
01:11:51,840 --> 01:11:53,600
responsiveness measurement

1693
01:11:53,600 --> 01:11:55,760
that way it means that

1694
01:11:55,760 --> 01:11:58,239
if i am on my network i can basically

1695
01:11:58,239 --> 01:12:00,640
browse these dns based services that are

1696
01:12:00,640 --> 01:12:02,560
being and the the services that are

1697
01:12:02,560 --> 01:12:05,360
being announced through dns i can

1698
01:12:05,360 --> 01:12:07,760
discover them on my local network and

1699
01:12:07,760 --> 01:12:09,840
just discover endpoints on my network

1700
01:12:09,840 --> 01:12:11,600
that allow me to test

1701
01:12:11,600 --> 01:12:14,159
the responsiveness in my local network

1702
01:12:14,159 --> 01:12:15,840
so we hope that this is going to be a

1703
01:12:15,840 --> 01:12:18,560
very useful addition

1704
01:12:18,560 --> 01:12:20,080
we added server-side example

1705
01:12:20,080 --> 01:12:22,480
configurations in the appendix so that

1706
01:12:22,480 --> 01:12:23,840
if people want to deploy a

1707
01:12:23,840 --> 01:12:26,239
responsiveness measurement endpoint they

1708
01:12:26,239 --> 01:12:28,080
can

1709
01:12:28,080 --> 01:12:30,080
simply simply take a look at those

1710
01:12:30,080 --> 01:12:32,080
example configurations

1711
01:12:32,080 --> 01:12:34,480
and we did a significant rework of the

1712
01:12:34,480 --> 01:12:37,120
measurement algorithm and of course some

1713
01:12:37,120 --> 01:12:39,920
wording changes minor minor minor fixes

1714
01:12:39,920 --> 01:12:41,040
and so on

1715
01:12:41,040 --> 01:12:42,719
so i want to double click on the

1716
01:12:42,719 --> 01:12:44,800
significant rework of the measurement

1717
01:12:44,800 --> 01:12:47,440
algorithm

1718
01:12:48,239 --> 01:12:50,960
so how is the was the previous algorithm

1719
01:12:50,960 --> 01:12:53,760
and so the previous algorithm its goal

1720
01:12:53,760 --> 01:12:56,239
was to find the point of good put

1721
01:12:56,239 --> 01:12:57,600
saturation

1722
01:12:57,600 --> 01:12:59,360
the way it worked was the following we

1723
01:12:59,360 --> 01:13:01,679
started with a set of connections by

1724
01:13:01,679 --> 01:13:03,600
default four connections

1725
01:13:03,600 --> 01:13:06,159
and at one point we reach

1726
01:13:06,159 --> 01:13:08,080
the maximum good put

1727
01:13:08,080 --> 01:13:10,239
with those four connections

1728
01:13:10,239 --> 01:13:12,640
and it starts leveling off at this point

1729
01:13:12,640 --> 01:13:15,360
the question is whether we would be able

1730
01:13:15,360 --> 01:13:17,520
to achieve higher good put by adding

1731
01:13:17,520 --> 01:13:20,400
more connections because the bdp of the

1732
01:13:20,400 --> 01:13:21,600
path is

1733
01:13:21,600 --> 01:13:24,480
is very large right and so the only

1734
01:13:24,480 --> 01:13:26,080
point to do this is we were adding more

1735
01:13:26,080 --> 01:13:29,120
connections right until we again we

1736
01:13:29,120 --> 01:13:31,760
reached the maximum good put

1737
01:13:31,760 --> 01:13:33,920
at which point it levels off again

1738
01:13:33,920 --> 01:13:36,159
and so now the question becomes well did

1739
01:13:36,159 --> 01:13:38,880
we actually reach the link capacity yes

1740
01:13:38,880 --> 01:13:40,640
or no or do we still need to add more

1741
01:13:40,640 --> 01:13:41,840
connections

1742
01:13:41,840 --> 01:13:42,880
and to

1743
01:13:42,880 --> 01:13:45,840
learn this we add yet more connections

1744
01:13:45,840 --> 01:13:47,199
into the pool

1745
01:13:47,199 --> 01:13:49,360
until we realize well okay the good but

1746
01:13:49,360 --> 01:13:51,520
didn't changed so there's no change in

1747
01:13:51,520 --> 01:13:53,520
good good put and so we declare

1748
01:13:53,520 --> 01:13:55,040
saturation

1749
01:13:55,040 --> 01:13:57,120
at which point we started the latency

1750
01:13:57,120 --> 01:14:00,000
probes right we sent a set of probes on

1751
01:14:00,000 --> 01:14:02,000
the load generating connections and a

1752
01:14:02,000 --> 01:14:03,440
set of probes on the separate

1753
01:14:03,440 --> 01:14:04,800
connections

1754
01:14:04,800 --> 01:14:07,440
so what are the problems um

1755
01:14:07,440 --> 01:14:09,040
with this approach

1756
01:14:09,040 --> 01:14:11,679
so first the problem is that we only

1757
01:14:11,679 --> 01:14:13,920
have a very small sample size right

1758
01:14:13,920 --> 01:14:15,920
because at the point where we reach a

1759
01:14:15,920 --> 01:14:18,239
good put saturation they might already

1760
01:14:18,239 --> 01:14:20,800
be very high buff upload and so sending

1761
01:14:20,800 --> 01:14:22,320
those probes

1762
01:14:22,320 --> 01:14:24,480
might take quite a long time and so we

1763
01:14:24,480 --> 01:14:26,640
can only send a very limited number of

1764
01:14:26,640 --> 01:14:28,800
those probes so the sample size is

1765
01:14:28,800 --> 01:14:30,719
pretty small

1766
01:14:30,719 --> 01:14:33,120
on extremely buffer bloated links that

1767
01:14:33,120 --> 01:14:35,840
have several seconds of buffer load

1768
01:14:35,840 --> 01:14:37,920
these latency probes have a tendency to

1769
01:14:37,920 --> 01:14:40,560
time out so we may sometimes not even be

1770
01:14:40,560 --> 01:14:42,960
able to get a measurement

1771
01:14:42,960 --> 01:14:45,679
and finally

1772
01:14:45,760 --> 01:14:47,760
these kind of one-shot measurement that

1773
01:14:47,760 --> 01:14:49,920
are happening only at one point in time

1774
01:14:49,920 --> 01:14:52,640
have the tendency to be impacted by

1775
01:14:52,640 --> 01:14:55,199
short-term uh buffer occupancy

1776
01:14:55,199 --> 01:14:58,080
variations right um we have seen cases

1777
01:14:58,080 --> 01:14:58,880
where

1778
01:14:58,880 --> 01:15:00,960
there is on these load generating

1779
01:15:00,960 --> 01:15:02,560
connections there is an

1780
01:15:02,560 --> 01:15:04,159
effect of what we call a synchronized

1781
01:15:04,159 --> 01:15:06,159
packet loss where all of these

1782
01:15:06,159 --> 01:15:07,600
connections get a packet loss at the

1783
01:15:07,600 --> 01:15:10,239
same time so all of these at the same

1784
01:15:10,239 --> 01:15:12,400
time reducing their congestion window

1785
01:15:12,400 --> 01:15:14,480
and so they are all of these at the same

1786
01:15:14,480 --> 01:15:17,440
time reducing the buffer occupancy and

1787
01:15:17,440 --> 01:15:19,360
so sending these one-shot measurement

1788
01:15:19,360 --> 01:15:21,360
probes has the impact of being

1789
01:15:21,360 --> 01:15:24,640
has the result of being impacted but d

1790
01:15:24,640 --> 01:15:27,360
by these short-term buffer occupancy

1791
01:15:27,360 --> 01:15:29,520
fluctuations

1792
01:15:29,520 --> 01:15:31,840
so these here are the again these the

1793
01:15:31,840 --> 01:15:32,880
the draw

1794
01:15:32,880 --> 01:15:35,280
the drawbacks of this algorithm

1795
01:15:35,280 --> 01:15:37,520
so what we realize is the way we can

1796
01:15:37,520 --> 01:15:40,719
actually solve most of these problems

1797
01:15:40,719 --> 01:15:44,080
is by basically well we we keep on

1798
01:15:44,080 --> 01:15:46,880
trying to reach capacity right

1799
01:15:46,880 --> 01:15:48,000
but

1800
01:15:48,000 --> 01:15:50,239
instead of waiting until saturation to

1801
01:15:50,239 --> 01:15:52,560
start the probing we start probing right

1802
01:15:52,560 --> 01:15:55,360
away and we probe every 100 milliseconds

1803
01:15:55,360 --> 01:15:57,840
we probe on separate connections

1804
01:15:57,840 --> 01:15:59,520
and we probe on the load generating

1805
01:15:59,520 --> 01:16:00,880
connections

1806
01:16:00,880 --> 01:16:02,320
and we just keep on going through the

1807
01:16:02,320 --> 01:16:04,320
algorithm and we continuously probe

1808
01:16:04,320 --> 01:16:06,640
every 100 milliseconds

1809
01:16:06,640 --> 01:16:08,400
we send one probe on the first load

1810
01:16:08,400 --> 01:16:10,480
generating connection and one probe on

1811
01:16:10,480 --> 01:16:12,560
the separate connection

1812
01:16:12,560 --> 01:16:13,920
so what does this means as you can

1813
01:16:13,920 --> 01:16:15,840
already see graphically right we have a

1814
01:16:15,840 --> 01:16:18,159
lot of probes now right

1815
01:16:18,159 --> 01:16:21,520
and so we get four data sets with this

1816
01:16:21,520 --> 01:16:24,640
approach we get latency on the separate

1817
01:16:24,640 --> 01:16:27,760
connections we get tcp handshake latency

1818
01:16:27,760 --> 01:16:30,239
we get tls handshake latency

1819
01:16:30,239 --> 01:16:33,360
and we get http rigorous respond latency

1820
01:16:33,360 --> 01:16:35,440
under on the separate connections

1821
01:16:35,440 --> 01:16:37,199
on the load generating connection which

1822
01:16:37,199 --> 01:16:40,640
we call itself we get also a http

1823
01:16:40,640 --> 01:16:42,800
request response latency

1824
01:16:42,800 --> 01:16:44,719
and so those are now very large data

1825
01:16:44,719 --> 01:16:46,880
sets right because we have sent lots of

1826
01:16:46,880 --> 01:16:49,360
probes so how do we aggregate all of

1827
01:16:49,360 --> 01:16:51,120
these four data sets into a single

1828
01:16:51,120 --> 01:16:52,640
number

1829
01:16:52,640 --> 01:16:55,440
first of all we take the 90th percentile

1830
01:16:55,440 --> 01:16:59,520
right so that way we filter out those

1831
01:16:59,520 --> 01:17:00,800
probes that were happening at the

1832
01:17:00,800 --> 01:17:03,040
beginning of the test when the link was

1833
01:17:03,040 --> 01:17:06,239
not yet buff uploaded

1834
01:17:06,239 --> 01:17:07,120
then

1835
01:17:07,120 --> 01:17:09,360
we need to weigh those four different

1836
01:17:09,360 --> 01:17:12,560
numbers right and so our goal is to put

1837
01:17:12,560 --> 01:17:15,280
equal weight on the load generating and

1838
01:17:15,280 --> 01:17:17,600
on the separate connections

1839
01:17:17,600 --> 01:17:19,120
now for the separate connections we get

1840
01:17:19,120 --> 01:17:20,800
three data points right the tcp

1841
01:17:20,800 --> 01:17:23,120
handshake latency the tls handshake

1842
01:17:23,120 --> 01:17:27,120
latency and the http latency and so we

1843
01:17:27,120 --> 01:17:29,280
weigh these in in the way we show it

1844
01:17:29,280 --> 01:17:32,000
here in the in the slides we have one

1845
01:17:32,000 --> 01:17:34,880
sixth for each of the uh

1846
01:17:34,880 --> 01:17:38,239
separate data points and half for the on

1847
01:17:38,239 --> 01:17:40,400
the low generating data points that way

1848
01:17:40,400 --> 01:17:41,760
both are

1849
01:17:41,760 --> 01:17:43,440
weighted equally

1850
01:17:43,440 --> 01:17:45,600
now this is going to give us a number in

1851
01:17:45,600 --> 01:17:48,800
terms of seconds and so as we want to

1852
01:17:48,800 --> 01:17:52,239
express responsiveness in terms of

1853
01:17:52,239 --> 01:17:54,159
round trips per minute we basically

1854
01:17:54,159 --> 01:17:57,280
normalize it to rpm

1855
01:17:57,280 --> 01:17:58,960
for those interested this is the final

1856
01:17:58,960 --> 01:18:02,560
formula 60 000 divided by the p90 is of

1857
01:18:02,560 --> 01:18:05,679
the different values uh normal

1858
01:18:05,679 --> 01:18:07,360
appropriately weighted the way we have

1859
01:18:07,360 --> 01:18:10,080
described it

1860
01:18:11,360 --> 01:18:13,920
so the advantages of this approach is

1861
01:18:13,920 --> 01:18:17,199
first we have a very large sample size

1862
01:18:17,199 --> 01:18:20,640
about 150 data points for 15 second test

1863
01:18:20,640 --> 01:18:22,320
which is great which removes a lot of

1864
01:18:22,320 --> 01:18:23,360
variance

1865
01:18:23,360 --> 01:18:26,080
which avoids uh all of the issues that

1866
01:18:26,080 --> 01:18:27,679
we described earlier

1867
01:18:27,679 --> 01:18:29,760
we have much less timeout issues because

1868
01:18:29,760 --> 01:18:32,000
the probing happens right from the start

1869
01:18:32,000 --> 01:18:34,480
so even if you have a link that has huge

1870
01:18:34,480 --> 01:18:38,080
buffer bloat we usually end up to get a

1871
01:18:38,080 --> 01:18:40,080
quite a few samples of this very huge

1872
01:18:40,080 --> 01:18:40,960
buffer

1873
01:18:40,960 --> 01:18:42,159
scenario

1874
01:18:42,159 --> 01:18:43,280
and there are no more short-term

1875
01:18:43,280 --> 01:18:45,199
fluctuations because of the huge data

1876
01:18:45,199 --> 01:18:48,560
size and the huge sample size we have

1877
01:18:48,560 --> 01:18:50,800
this has been implemented in mac os

1878
01:18:50,800 --> 01:18:52,960
ventura the upcoming macro is released

1879
01:18:52,960 --> 01:18:55,760
and the network quality tool and the

1880
01:18:55,760 --> 01:18:58,480
open source go responsiveness tool has

1881
01:18:58,480 --> 01:19:01,599
it implemented as well

1882
01:19:04,800 --> 01:19:07,840
now in terms of the remaining issues

1883
01:19:07,840 --> 01:19:09,520
there are few more

1884
01:19:09,520 --> 01:19:11,520
more remaining issues that we would like

1885
01:19:11,520 --> 01:19:13,120
to address

1886
01:19:13,120 --> 01:19:15,520
issue number 17 on the github is we

1887
01:19:15,520 --> 01:19:17,440
would like to use a well-known uri for

1888
01:19:17,440 --> 01:19:19,199
the json config

1889
01:19:19,199 --> 01:19:21,280
that way any web

1890
01:19:21,280 --> 01:19:24,239
service could basically expose this

1891
01:19:24,239 --> 01:19:27,040
responsiveness measurement as a service

1892
01:19:27,040 --> 01:19:28,640
and we could simply discover it by

1893
01:19:28,640 --> 01:19:30,480
hitting the well-known uri to see if

1894
01:19:30,480 --> 01:19:33,520
there's a json config available

1895
01:19:33,520 --> 01:19:36,239
issue number 63 we need to explain the

1896
01:19:36,239 --> 01:19:38,480
impact of congestion control it came up

1897
01:19:38,480 --> 01:19:40,080
in the past but we haven't yet had the

1898
01:19:40,080 --> 01:19:42,800
time to address this question and we

1899
01:19:42,800 --> 01:19:45,679
want to write a section on how the

1900
01:19:45,679 --> 01:19:48,080
different congestion control algorithms

1901
01:19:48,080 --> 01:19:51,920
like cubic bbr and so on can affect the

1902
01:19:51,920 --> 01:19:54,719
responsiveness

1903
01:19:54,800 --> 01:19:58,480
issue number 55 we want to provide

1904
01:19:58,480 --> 01:20:01,120
guidance on how we can provide an

1905
01:20:01,120 --> 01:20:03,280
estimate of how confident we are in the

1906
01:20:03,280 --> 01:20:05,840
values of the results

1907
01:20:05,840 --> 01:20:07,520
because there are different ways of how

1908
01:20:07,520 --> 01:20:10,080
the algorithm can evolve and because we

1909
01:20:10,080 --> 01:20:11,600
may hit

1910
01:20:11,600 --> 01:20:13,440
timing issues

1911
01:20:13,440 --> 01:20:15,440
sometimes the numbers may be more or

1912
01:20:15,440 --> 01:20:18,800
less accurate because the goal is to

1913
01:20:18,800 --> 01:20:20,639
provide a measurement of responsiveness

1914
01:20:20,639 --> 01:20:22,719
within a reasonable time frame

1915
01:20:22,719 --> 01:20:26,239
sometimes in order to provide a result

1916
01:20:26,239 --> 01:20:27,199
within

1917
01:20:27,199 --> 01:20:29,760
less than 30 seconds we

1918
01:20:29,760 --> 01:20:31,679
have to give a lower confidence in the

1919
01:20:31,679 --> 01:20:33,440
result

1920
01:20:33,440 --> 01:20:36,719
issue number 66 what l also brought up

1921
01:20:36,719 --> 01:20:39,280
is we need to allow non-tls measurements

1922
01:20:39,280 --> 01:20:41,360
because on some low end devices if we

1923
01:20:41,360 --> 01:20:43,600
want to allow for example that your

1924
01:20:43,600 --> 01:20:47,199
router exposes the dns

1925
01:20:47,199 --> 01:20:50,080
servers via the the service through dns

1926
01:20:50,080 --> 01:20:52,719
space for discovery right

1927
01:20:52,719 --> 01:20:55,600
low-end gateways usually don't have the

1928
01:20:55,600 --> 01:20:57,440
performance to actually fill the link

1929
01:20:57,440 --> 01:20:59,199
with tls traffic

1930
01:20:59,199 --> 01:21:01,199
which self-generated tls traffic and so

1931
01:21:01,199 --> 01:21:02,639
we want to allow for non-tls

1932
01:21:02,639 --> 01:21:04,800
measurements

1933
01:21:04,800 --> 01:21:07,120
and finally the most important one um

1934
01:21:07,120 --> 01:21:10,880
search i filed an issue number 62

1935
01:21:10,880 --> 01:21:12,159
called the flaw in the working

1936
01:21:12,159 --> 01:21:14,400
conditions algorithm and i want to

1937
01:21:14,400 --> 01:21:16,719
double click on this one because to

1938
01:21:16,719 --> 01:21:18,800
explain what is the problem

1939
01:21:18,800 --> 01:21:22,400
and how we can solve it

1940
01:21:22,480 --> 01:21:23,600
so

1941
01:21:23,600 --> 01:21:25,920
if we look at what i explained earlier

1942
01:21:25,920 --> 01:21:27,679
in terms of our algorithm right we have

1943
01:21:27,679 --> 01:21:29,600
we are measuring we are trying to reach

1944
01:21:29,600 --> 01:21:31,920
the maximum good put

1945
01:21:31,920 --> 01:21:34,239
now good put is actually not what we are

1946
01:21:34,239 --> 01:21:35,840
measuring we are trying to measure

1947
01:21:35,840 --> 01:21:38,800
responsiveness which is the buffer bloat

1948
01:21:38,800 --> 01:21:39,920
and so

1949
01:21:39,920 --> 01:21:41,440
it means we are trying to measure the

1950
01:21:41,440 --> 01:21:44,080
buffer occupancy so the bottleneck link

1951
01:21:44,080 --> 01:21:47,199
that is driving the maximum good put has

1952
01:21:47,199 --> 01:21:49,600
a certain size it has a maximum buffer

1953
01:21:49,600 --> 01:21:52,560
occupancy and for sake of examples here

1954
01:21:52,560 --> 01:21:54,800
we say let's say this size is 64

1955
01:21:54,800 --> 01:21:56,480
megabytes it's a very buffer bloated

1956
01:21:56,480 --> 01:21:57,360
link

1957
01:21:57,360 --> 01:21:58,480
right

1958
01:21:58,480 --> 01:22:00,400
so as we go through the algorithm and as

1959
01:22:00,400 --> 01:22:03,760
we start with four connections right

1960
01:22:03,760 --> 01:22:08,159
and often um one tcp connection has

1961
01:22:08,159 --> 01:22:09,199
uh

1962
01:22:09,199 --> 01:22:12,000
has frequently uh a limit in terms of

1963
01:22:12,000 --> 01:22:15,199
how much data it could can put in flight

1964
01:22:15,199 --> 01:22:16,080
and

1965
01:22:16,080 --> 01:22:18,400
for someone typically this can be around

1966
01:22:18,400 --> 01:22:20,320
four megabytes eight megabytes six

1967
01:22:20,320 --> 01:22:22,560
megabytes for this example let's pick

1968
01:22:22,560 --> 01:22:24,560
four megabytes right

1969
01:22:24,560 --> 01:22:26,639
so we have four connections with a

1970
01:22:26,639 --> 01:22:28,639
maximum of in-flight data of being four

1971
01:22:28,639 --> 01:22:29,840
megabytes

1972
01:22:29,840 --> 01:22:31,679
that would give us a maximum of

1973
01:22:31,679 --> 01:22:34,480
in-flight data of 16 megabytes

1974
01:22:34,480 --> 01:22:35,600
which means

1975
01:22:35,600 --> 01:22:38,400
as we are on the top graph right we are

1976
01:22:38,400 --> 01:22:39,760
we have created those four connections

1977
01:22:39,760 --> 01:22:41,440
and we are leveling out in terms of good

1978
01:22:41,440 --> 01:22:42,400
put

1979
01:22:42,400 --> 01:22:44,000
we haven't however yet achieved the

1980
01:22:44,000 --> 01:22:46,080
maximum good put which means the buffer

1981
01:22:46,080 --> 01:22:48,239
occupancy will be zero

1982
01:22:48,239 --> 01:22:49,760
right there's no buffer block yet

1983
01:22:49,760 --> 01:22:51,120
happening

1984
01:22:51,120 --> 01:22:53,520
now our algorithm decides to add more

1985
01:22:53,520 --> 01:22:55,199
connections let's say we add eight

1986
01:22:55,199 --> 01:22:57,600
connections now okay

1987
01:22:57,600 --> 01:23:00,159
so eight connections times four megabyte

1988
01:23:00,159 --> 01:23:03,360
means 16 megabytes so the um however we

1989
01:23:03,360 --> 01:23:05,199
are still reaching to the good puts we

1990
01:23:05,199 --> 01:23:07,280
haven't yet reached this

1991
01:23:07,280 --> 01:23:09,040
point of inclination where we are

1992
01:23:09,040 --> 01:23:12,480
actually creating buffer bloat

1993
01:23:12,960 --> 01:23:15,600
now as we reach the maximum good put we

1994
01:23:15,600 --> 01:23:17,280
actually start building a queue now and

1995
01:23:17,280 --> 01:23:19,520
so now the queue starts filling up

1996
01:23:19,520 --> 01:23:21,920
but as it's only eight connections which

1997
01:23:21,920 --> 01:23:24,800
means 16 megabytes worth of buffer

1998
01:23:24,800 --> 01:23:27,440
occupancy we haven't yet completely

1999
01:23:27,440 --> 01:23:29,679
filled the link we are only at 64

2000
01:23:29,679 --> 01:23:32,159
megabytes uh sorry we are only at 16

2001
01:23:32,159 --> 01:23:35,679
megabytes on a 64 megabyte buffer

2002
01:23:35,679 --> 01:23:36,800
right

2003
01:23:36,800 --> 01:23:39,280
now our algorithm keeps on adding more

2004
01:23:39,280 --> 01:23:41,920
connections right so now we are at 12

2005
01:23:41,920 --> 01:23:44,000
connections and the buffer occupancy

2006
01:23:44,000 --> 01:23:46,080
keeps on increasing

2007
01:23:46,080 --> 01:23:48,159
now at this point in time we realize

2008
01:23:48,159 --> 01:23:50,719
okay we reached capacity for the good

2009
01:23:50,719 --> 01:23:53,360
put and so we declare saturation and we

2010
01:23:53,360 --> 01:23:55,280
terminate the test

2011
01:23:55,280 --> 01:23:57,120
what does this mean

2012
01:23:57,120 --> 01:23:59,520
well this means that this is the

2013
01:23:59,520 --> 01:24:02,239
responsiveness that we measured but in

2014
01:24:02,239 --> 01:24:05,679
reality the responsiveness is much much

2015
01:24:05,679 --> 01:24:07,920
worse right we haven't even yet filled

2016
01:24:07,920 --> 01:24:10,960
the buffer completely

2017
01:24:10,960 --> 01:24:13,600
so what is the solution to this problem

2018
01:24:13,600 --> 01:24:15,040
right

2019
01:24:15,040 --> 01:24:16,639
well the solution is we go through this

2020
01:24:16,639 --> 01:24:17,760
algorithm

2021
01:24:17,760 --> 01:24:20,719
but then we see that well actually the

2022
01:24:20,719 --> 01:24:22,800
buffer the responsiveness is still

2023
01:24:22,800 --> 01:24:25,040
evolving right we haven't leveled out

2024
01:24:25,040 --> 01:24:27,679
the responsiveness yet

2025
01:24:27,679 --> 01:24:30,000
and as we realize that okay with 12

2026
01:24:30,000 --> 01:24:32,320
connections we reach 48 megabytes of

2027
01:24:32,320 --> 01:24:34,320
buffer occupancy and so we can say okay

2028
01:24:34,320 --> 01:24:37,360
we we leveled out at 12 connections

2029
01:24:37,360 --> 01:24:39,199
let's add more connections to see if we

2030
01:24:39,199 --> 01:24:40,960
can push it even higher

2031
01:24:40,960 --> 01:24:42,719
so we add more connections and we

2032
01:24:42,719 --> 01:24:44,880
realize that the buffer occupancy is

2033
01:24:44,880 --> 01:24:46,159
increasing

2034
01:24:46,159 --> 01:24:48,320
now with 16 connections we had 64

2035
01:24:48,320 --> 01:24:50,239
megabytes worth of buffering and so we

2036
01:24:50,239 --> 01:24:52,560
actually achieved the full buffer

2037
01:24:52,560 --> 01:24:54,239
occupancy

2038
01:24:54,239 --> 01:24:56,320
the only way for us to find out whether

2039
01:24:56,320 --> 01:24:58,560
really we achieved 64 the full buffer

2040
01:24:58,560 --> 01:25:01,440
occupancy is by have one more iteration

2041
01:25:01,440 --> 01:25:03,440
of adding more connections and we

2042
01:25:03,440 --> 01:25:05,040
realize by adding more connections we

2043
01:25:05,040 --> 01:25:08,000
are not the good but is not changing nor

2044
01:25:08,000 --> 01:25:10,560
is the buffer occupancy changing and so

2045
01:25:10,560 --> 01:25:12,639
it means we can declare saturation and

2046
01:25:12,639 --> 01:25:14,639
we can declare the final responsiveness

2047
01:25:14,639 --> 01:25:17,120
result

2048
01:25:19,760 --> 01:25:21,920
so this is the new algorithm

2049
01:25:21,920 --> 01:25:24,000
so it means that we not only need to

2050
01:25:24,000 --> 01:25:26,480
saturate good put but we also need to

2051
01:25:26,480 --> 01:25:29,679
saturate responsiveness

2052
01:25:29,679 --> 01:25:31,840
and once good put and responsiveness

2053
01:25:31,840 --> 01:25:34,159
stop changing we declare saturation and

2054
01:25:34,159 --> 01:25:37,040
so in in the i in the draft for the

2055
01:25:37,040 --> 01:25:38,639
upcoming version what we need to change

2056
01:25:38,639 --> 01:25:40,480
is in terms of the algorithm

2057
01:25:40,480 --> 01:25:42,480
is that we are adding connections as

2058
01:25:42,480 --> 01:25:45,280
long as either good but increases or the

2059
01:25:45,280 --> 01:25:48,880
responsiveness is decreasing

2060
01:25:50,159 --> 01:25:51,920
so this is going to be the new algorithm

2061
01:25:51,920 --> 01:25:55,440
for the next for the upcoming version

2062
01:25:55,440 --> 01:25:58,000
in terms of other news um

2063
01:25:58,000 --> 01:25:59,840
the open source go

2064
01:25:59,840 --> 01:26:01,920
go responsiveness implementation is

2065
01:26:01,920 --> 01:26:04,480
evolving rapidly and of course we would

2066
01:26:04,480 --> 01:26:06,400
like people to try it out

2067
01:26:06,400 --> 01:26:08,880
we invite everyone to

2068
01:26:08,880 --> 01:26:12,000
to test it will here is on this call and

2069
01:26:12,000 --> 01:26:13,920
would be very happy to get

2070
01:26:13,920 --> 01:26:17,360
pull requests and github issues as well

2071
01:26:17,360 --> 01:26:19,040
in terms of the

2072
01:26:19,040 --> 01:26:22,159
other implementations uh ucla tests now

2073
01:26:22,159 --> 01:26:23,920
started measuring load and latency as

2074
01:26:23,920 --> 01:26:25,440
well

2075
01:26:25,440 --> 01:26:27,520
we don't know details about how they do

2076
01:26:27,520 --> 01:26:29,280
this but

2077
01:26:29,280 --> 01:26:32,159
it's probably a very similar measurement

2078
01:26:32,159 --> 01:26:34,080
methodology

2079
01:26:34,080 --> 01:26:36,480
so the load latency in ookla is going to

2080
01:26:36,480 --> 01:26:38,719
increase also the awareness on the issue

2081
01:26:38,719 --> 01:26:40,880
of buffer bloat and responsiveness under

2082
01:26:40,880 --> 01:26:43,840
working conditions

2083
01:26:44,639 --> 01:26:46,480
so with that

2084
01:26:46,480 --> 01:26:49,280
i'm at the end of the presentation and

2085
01:26:49,280 --> 01:26:51,120
uh if there are any questions

2086
01:26:51,120 --> 01:26:52,480
i'm i would

2087
01:26:52,480 --> 01:26:55,839
i would be very happy to take them

2088
01:26:55,920 --> 01:26:57,679
thank you very much christoph

2089
01:26:57,679 --> 01:27:00,080
wow

2090
01:27:03,040 --> 01:27:05,920
kristoff and will for your work on this

2091
01:27:05,920 --> 01:27:06,800
um

2092
01:27:06,800 --> 01:27:08,880
i think that the uh

2093
01:27:08,880 --> 01:27:11,280
the uh

2094
01:27:11,440 --> 01:27:12,880
one thing you're going to want to fix in

2095
01:27:12,880 --> 01:27:14,080
the draft

2096
01:27:14,080 --> 01:27:16,840
is the uh is the equation for

2097
01:27:16,840 --> 01:27:18,800
responsiveness i was about to do

2098
01:27:18,800 --> 01:27:21,679
something with it and i noticed that um

2099
01:27:21,679 --> 01:27:23,199
instead of one-sixth you've got

2100
01:27:23,199 --> 01:27:24,320
one-third

2101
01:27:24,320 --> 01:27:27,199
in all the denominators there

2102
01:27:27,199 --> 01:27:30,239
uh accepting the uh something the last

2103
01:27:30,239 --> 01:27:34,000
one so i i was confused by that but i

2104
01:27:34,000 --> 01:27:36,880
see now that you mean uh one-sixth and

2105
01:27:36,880 --> 01:27:39,120
that sort of adds up to one with the

2106
01:27:39,120 --> 01:27:39,920
half

2107
01:27:39,920 --> 01:27:42,400
uh half-weighted uh

2108
01:27:42,400 --> 01:27:43,440
aspect

2109
01:27:43,440 --> 01:27:44,400
um

2110
01:27:44,400 --> 01:27:46,239
i think that when you're also when

2111
01:27:46,239 --> 01:27:48,320
you're reporting capacity

2112
01:27:48,320 --> 01:27:50,560
uh it's you know it's based on it's

2113
01:27:50,560 --> 01:27:52,719
based on a lot of connections

2114
01:27:52,719 --> 01:27:55,520
and that's the uh um then i i tried it

2115
01:27:55,520 --> 01:27:57,760
out on a couple of cases i saw 20

2116
01:27:57,760 --> 01:27:58,960
connections

2117
01:27:58,960 --> 01:28:00,400
and so forth

2118
01:28:00,400 --> 01:28:02,719
and um you know those are you're going

2119
01:28:02,719 --> 01:28:05,120
to get uh if matt mathis was probably

2120
01:28:05,120 --> 01:28:06,880
here too you would say the same thing

2121
01:28:06,880 --> 01:28:09,199
you're going to get

2122
01:28:09,199 --> 01:28:11,600
opportunities for synchronization and

2123
01:28:11,600 --> 01:28:13,280
the interaction between the the

2124
01:28:13,280 --> 01:28:16,239
different tcp algorithms and so forth

2125
01:28:16,239 --> 01:28:17,840
thanks for turning on your video so i

2126
01:28:17,840 --> 01:28:21,440
can get some feedback i see you smiling

2127
01:28:21,440 --> 01:28:23,600
i learned i really learned a lot of this

2128
01:28:23,600 --> 01:28:26,000
from matt so i'm just i'm just uh

2129
01:28:26,000 --> 01:28:28,000
proxying matt here when

2130
01:28:28,000 --> 01:28:30,080
when i tell you my story

2131
01:28:30,080 --> 01:28:31,120
but um

2132
01:28:31,120 --> 01:28:33,440
uh i think i mean i think you're on the

2133
01:28:33,440 --> 01:28:35,280
right track in

2134
01:28:35,280 --> 01:28:37,600
uh monitoring the delay as well as the

2135
01:28:37,600 --> 01:28:38,719
good put

2136
01:28:38,719 --> 01:28:41,120
but um there's other factors here too

2137
01:28:41,120 --> 01:28:44,560
that matter and uh you know we've been

2138
01:28:44,560 --> 01:28:46,480
we've actually been we've actually been

2139
01:28:46,480 --> 01:28:48,400
looking at um in our capacity

2140
01:28:48,400 --> 01:28:49,360
measurement

2141
01:28:49,360 --> 01:28:51,360
we've been looking at the

2142
01:28:51,360 --> 01:28:53,600
uh the possibility to

2143
01:28:53,600 --> 01:28:56,159
reduce the some of the factors we found

2144
01:28:56,159 --> 01:28:59,679
that uh reordering and duplication

2145
01:28:59,679 --> 01:29:02,480
um they happen they happen on 5g

2146
01:29:02,480 --> 01:29:04,320
networks more

2147
01:29:04,320 --> 01:29:06,639
prevalently than any place else

2148
01:29:06,639 --> 01:29:07,440
and

2149
01:29:07,440 --> 01:29:09,760
the truth is those are measurements that

2150
01:29:09,760 --> 01:29:12,239
um or packets that are delivered that

2151
01:29:12,239 --> 01:29:14,239
contribute to capacity

2152
01:29:14,239 --> 01:29:16,480
so tcp isn't going to tell you about

2153
01:29:16,480 --> 01:29:18,239
those you know it's going to discard

2154
01:29:18,239 --> 01:29:20,960
those as as it forwards information up

2155
01:29:20,960 --> 01:29:24,480
the stack but we can grab those in the

2156
01:29:24,480 --> 01:29:27,679
udp measurements and uh uh you know like

2157
01:29:27,679 --> 01:29:30,080
we end up we end up

2158
01:29:30,080 --> 01:29:31,920
including the reordered and duplicate

2159
01:29:31,920 --> 01:29:34,000
packets now we're thinking about making

2160
01:29:34,000 --> 01:29:36,639
that the default especially for mobile

2161
01:29:36,639 --> 01:29:40,320
testing so you know there's lots of uh

2162
01:29:40,320 --> 01:29:42,400
there's lots of room for uh

2163
01:29:42,400 --> 01:29:44,320
uh improvement in our algorithms here

2164
01:29:44,320 --> 01:29:45,920
and

2165
01:29:45,920 --> 01:29:47,600
you know i'm glad to keep exchanging

2166
01:29:47,600 --> 01:29:50,560
ideas with you thanks

2167
01:29:50,560 --> 01:29:54,239
sure yeah thanks for your feedback

2168
01:29:57,280 --> 01:29:59,199
all right um

2169
01:29:59,199 --> 01:30:02,000
i jumped and cue not chair head on just

2170
01:30:02,000 --> 01:30:05,199
to comment um one

2171
01:30:05,199 --> 01:30:07,520
uh earlier you mentioned the the issue

2172
01:30:07,520 --> 01:30:11,199
about using a well-known um and i

2173
01:30:11,199 --> 01:30:12,480
looking at that i think there's some

2174
01:30:12,480 --> 01:30:14,719
debate about you know what's in that is

2175
01:30:14,719 --> 01:30:16,639
that just the config is that the actual

2176
01:30:16,639 --> 01:30:18,840
test

2177
01:30:18,840 --> 01:30:20,639
um

2178
01:30:20,639 --> 01:30:24,320
overall within kind of http

2179
01:30:24,320 --> 01:30:25,679
i mean there's certainly a sentiment

2180
01:30:25,679 --> 01:30:28,239
that well known can be overused i think

2181
01:30:28,239 --> 01:30:30,080
this is

2182
01:30:30,080 --> 01:30:32,840
a decent use of it

2183
01:30:32,840 --> 01:30:35,760
but um i think it'd be worth if you want

2184
01:30:35,760 --> 01:30:37,600
to drop a line to mark nottingham who

2185
01:30:37,600 --> 01:30:39,840
has to review all of those anyway to see

2186
01:30:39,840 --> 01:30:41,040
you know is this going to be something

2187
01:30:41,040 --> 01:30:42,480
that would get through

2188
01:30:42,480 --> 01:30:45,040
the expert review for adding well-known

2189
01:30:45,040 --> 01:30:47,600
um and any advice there that'd be good

2190
01:30:47,600 --> 01:30:49,760
to get um

2191
01:30:49,760 --> 01:30:52,560
regarding the new new algorithm i think

2192
01:30:52,560 --> 01:30:53,920
everything's good

2193
01:30:53,920 --> 01:30:55,120
one of the things that came up in the

2194
01:30:55,120 --> 01:30:56,159
chat

2195
01:30:56,159 --> 01:30:57,120
um

2196
01:30:57,120 --> 01:30:58,400
i think there's questions about like why

2197
01:30:58,400 --> 01:30:59,440
would you

2198
01:30:59,440 --> 01:31:02,239
for example not just measure when the

2199
01:31:02,239 --> 01:31:05,040
responsiveness starts decreasing um and

2200
01:31:05,040 --> 01:31:06,639
i think the answer to that is you know

2201
01:31:06,639 --> 01:31:07,920
the responsiveness won't actually

2202
01:31:07,920 --> 01:31:10,400
decrease until there's enough load

2203
01:31:10,400 --> 01:31:11,600
um

2204
01:31:11,600 --> 01:31:14,800
i think then one edge case came up to me

2205
01:31:14,800 --> 01:31:17,040
it's like are there any scenarios in

2206
01:31:17,040 --> 01:31:19,760
which the responsiveness only starts

2207
01:31:19,760 --> 01:31:21,040
decreasing

2208
01:31:21,040 --> 01:31:23,760
further to the right such that you know

2209
01:31:23,760 --> 01:31:26,880
like we could get to 16

2210
01:31:26,880 --> 01:31:29,040
um and you know our good put has

2211
01:31:29,040 --> 01:31:31,120
flattened out but the responsiveness

2212
01:31:31,120 --> 01:31:33,520
will only start going up starting at 20

2213
01:31:33,520 --> 01:31:35,280
or 24 and so we could actually stop the

2214
01:31:35,280 --> 01:31:36,320
test

2215
01:31:36,320 --> 01:31:37,520
too soon

2216
01:31:37,520 --> 01:31:38,880
um is that something we should be

2217
01:31:38,880 --> 01:31:41,120
concerned about

2218
01:31:41,120 --> 01:31:42,480
i

2219
01:31:42,480 --> 01:31:43,360
so

2220
01:31:43,360 --> 01:31:45,040
on your first comment yes absolutely

2221
01:31:45,040 --> 01:31:47,520
you're absolutely right unless we hit

2222
01:31:47,520 --> 01:31:50,719
capacity responsiveness won't change at

2223
01:31:50,719 --> 01:31:53,440
all right that's the party on the left

2224
01:31:53,440 --> 01:31:54,320
um

2225
01:31:54,320 --> 01:31:55,280
i

2226
01:31:55,280 --> 01:31:57,600
don't think there's a

2227
01:31:57,600 --> 01:32:00,000
case where we could hit

2228
01:32:00,000 --> 01:32:01,440
capacity

2229
01:32:01,440 --> 01:32:04,960
and only 20 flows farther down the road

2230
01:32:04,960 --> 01:32:08,400
responsiveness would start changing

2231
01:32:08,400 --> 01:32:09,679
i

2232
01:32:09,679 --> 01:32:11,760
i don't think that's possible

2233
01:32:11,760 --> 01:32:12,800
i think

2234
01:32:12,800 --> 01:32:14,480
the moment we hit capacity

2235
01:32:14,480 --> 01:32:16,880
responsiveness will start changing

2236
01:32:16,880 --> 01:32:18,080
that's just

2237
01:32:18,080 --> 01:32:18,960
um

2238
01:32:18,960 --> 01:32:21,040
the way it is

2239
01:32:21,040 --> 01:32:22,639
if that would not be the case i would

2240
01:32:22,639 --> 01:32:26,679
love to see that

2241
01:32:29,920 --> 01:32:31,760
it's a good point

2242
01:32:31,760 --> 01:32:33,520
absolutely i i just

2243
01:32:33,520 --> 01:32:35,120
i just cannot imagine how it could

2244
01:32:35,120 --> 01:32:36,159
happen

2245
01:32:36,159 --> 01:32:38,480
uh this is stuart joshua i'll say a few

2246
01:32:38,480 --> 01:32:41,199
more words on that and actually in the

2247
01:32:41,199 --> 01:32:43,600
last couple of weeks since the draft

2248
01:32:43,600 --> 01:32:45,679
deadline christoph and i and randall

2249
01:32:45,679 --> 01:32:48,159
have been discussing this internally

2250
01:32:48,159 --> 01:32:51,760
but it was after the submission deadline

2251
01:32:51,760 --> 01:32:53,520
one of the things that i'm starting to

2252
01:32:53,520 --> 01:32:55,280
think is

2253
01:32:55,280 --> 01:32:56,719
we might be able to simplify this

2254
01:32:56,719 --> 01:32:58,880
algorithm instead of this current sort

2255
01:32:58,880 --> 01:33:00,960
of staircase function where we add four

2256
01:33:00,960 --> 01:33:02,480
connections and then wait a bit and then

2257
01:33:02,480 --> 01:33:05,040
add four more

2258
01:33:05,040 --> 01:33:06,960
it might have a more elegant simplicity

2259
01:33:06,960 --> 01:33:09,440
about it if we just

2260
01:33:09,440 --> 01:33:11,280
add new connections at a one second

2261
01:33:11,280 --> 01:33:12,320
cadence

2262
01:33:12,320 --> 01:33:13,840
while measuring

2263
01:33:13,840 --> 01:33:15,679
application around trip time on those

2264
01:33:15,679 --> 01:33:18,400
connections so we're gathering data

2265
01:33:18,400 --> 01:33:19,280
and

2266
01:33:19,280 --> 01:33:21,679
the the initial idea in my head

2267
01:33:21,679 --> 01:33:23,840
to propose a termination condition for

2268
01:33:23,840 --> 01:33:24,639
this

2269
01:33:24,639 --> 01:33:28,000
is we add connections once a second

2270
01:33:28,000 --> 01:33:30,560
and we cease the test when four seconds

2271
01:33:30,560 --> 01:33:32,080
have gone by

2272
01:33:32,080 --> 01:33:33,360
without

2273
01:33:33,360 --> 01:33:35,600
either an increase in throughput

2274
01:33:35,600 --> 01:33:38,000
or an increase in latency

2275
01:33:38,000 --> 01:33:39,120
so

2276
01:33:39,120 --> 01:33:40,719
we kind of keep a high score of the

2277
01:33:40,719 --> 01:33:42,159
highest throughput we've seen and the

2278
01:33:42,159 --> 01:33:43,600
highest latency we've seen and every

2279
01:33:43,600 --> 01:33:45,440
time we break that record we record the

2280
01:33:45,440 --> 01:33:46,880
new record

2281
01:33:46,880 --> 01:33:48,719
after we've gone for four seconds

2282
01:33:48,719 --> 01:33:50,639
without setting a new record for either

2283
01:33:50,639 --> 01:33:52,239
of those things

2284
01:33:52,239 --> 01:33:54,000
that means we've added four more

2285
01:33:54,000 --> 01:33:55,120
connections

2286
01:33:55,120 --> 01:33:57,920
we've put more data into the pipe and

2287
01:33:57,920 --> 01:34:00,719
neither has changed and just to back up

2288
01:34:00,719 --> 01:34:02,080
a little bit to

2289
01:34:02,080 --> 01:34:04,639
second what kristoff was saying

2290
01:34:04,639 --> 01:34:05,679
uh

2291
01:34:05,679 --> 01:34:08,080
as we have more data in flight

2292
01:34:08,080 --> 01:34:10,800
initially we fill up the bdp of the pipe

2293
01:34:10,800 --> 01:34:11,920
which is good because we're getting

2294
01:34:11,920 --> 01:34:14,480
throughput and when we hit that limit

2295
01:34:14,480 --> 01:34:16,960
additional data is now sitting in buffer

2296
01:34:16,960 --> 01:34:20,679
somewhere we may not detect that

2297
01:34:20,679 --> 01:34:23,120
instantaneously but i think over a four

2298
01:34:23,120 --> 01:34:25,840
second window

2299
01:34:25,840 --> 01:34:27,679
if we're continuing to add more data in

2300
01:34:27,679 --> 01:34:30,159
flight then within four seconds we will

2301
01:34:30,159 --> 01:34:32,400
have seen the delay go up and that will

2302
01:34:32,400 --> 01:34:34,719
cause us to keep testing until delay

2303
01:34:34,719 --> 01:34:36,320
stops going up

2304
01:34:36,320 --> 01:34:38,000
so

2305
01:34:38,000 --> 01:34:41,520
uh that's your answer tommy um i think

2306
01:34:41,520 --> 01:34:42,960
if we didn't have that four second

2307
01:34:42,960 --> 01:34:44,320
window there would be a risk of a

2308
01:34:44,320 --> 01:34:47,440
premature exit but that four seconds i

2309
01:34:47,440 --> 01:34:49,679
think is what makes it work

2310
01:34:49,679 --> 01:34:51,520
thank you yes i think we need to move on

2311
01:34:51,520 --> 01:34:54,080
a bit quicker a bit over time

2312
01:34:54,080 --> 01:34:55,679
uh okay

2313
01:34:55,679 --> 01:34:58,159
um so i'll just say the thing i came to

2314
01:34:58,159 --> 01:35:00,239
the microphone originally to explain a

2315
01:35:00,239 --> 01:35:02,560
bit more about christoph mentioned the

2316
01:35:02,560 --> 01:35:05,440
the dns service discovery service type

2317
01:35:05,440 --> 01:35:07,840
the motivation for that is i might i may

2318
01:35:07,840 --> 01:35:09,440
run the network quality test and get a

2319
01:35:09,440 --> 01:35:11,040
lousy score

2320
01:35:11,040 --> 01:35:13,600
but as an engineer i want to know why

2321
01:35:13,600 --> 01:35:15,840
so we've been talking to home gateway

2322
01:35:15,840 --> 01:35:18,239
vendors and wi-fi access point vendors

2323
01:35:18,239 --> 01:35:19,920
who actually want to host a test

2324
01:35:19,920 --> 01:35:20,960
endpoint

2325
01:35:20,960 --> 01:35:23,040
on their wi-fi access points or on the

2326
01:35:23,040 --> 01:35:25,440
home gateway so you can eliminate the

2327
01:35:25,440 --> 01:35:28,239
modem or the dsl from the equation and

2328
01:35:28,239 --> 01:35:30,400
do a local test and see is it my wi-fi

2329
01:35:30,400 --> 01:35:32,159
or is it my cable mode that's causing a

2330
01:35:32,159 --> 01:35:34,480
problem so that's the reason we want

2331
01:35:34,480 --> 01:35:36,320
that auto discovery and if there are any

2332
01:35:36,320 --> 01:35:38,639
other home gateway vendors interested

2333
01:35:38,639 --> 01:35:40,960
then talk to us about how to

2334
01:35:40,960 --> 01:35:42,719
how to host one of those test endpoints

2335
01:35:42,719 --> 01:35:45,199
locally

2336
01:35:49,520 --> 01:35:51,840
hi could you hear me

2337
01:35:51,840 --> 01:35:53,679
yep

2338
01:35:53,679 --> 01:35:55,199
okay

2339
01:35:55,199 --> 01:35:56,719
well um

2340
01:35:56,719 --> 01:35:59,280
just a

2341
01:35:59,440 --> 01:36:02,639
small comment about the them

2342
01:36:02,639 --> 01:36:05,840
this this technique to measure bandwidth

2343
01:36:05,840 --> 01:36:06,880
um

2344
01:36:06,880 --> 01:36:09,040
i i'm not sure

2345
01:36:09,040 --> 01:36:11,280
how noisy it is because

2346
01:36:11,280 --> 01:36:14,159
uh you know the inside the the network

2347
01:36:14,159 --> 01:36:17,119
you you got some other traffic and

2348
01:36:17,119 --> 01:36:19,840
perhaps i i'm not sure if you are just

2349
01:36:19,840 --> 01:36:21,040
mentioning

2350
01:36:21,040 --> 01:36:23,119
uh

2351
01:36:23,119 --> 01:36:24,480
just uh

2352
01:36:24,480 --> 01:36:26,719
i i don't know the the last smile or

2353
01:36:26,719 --> 01:36:29,520
something like that or uh you are

2354
01:36:29,520 --> 01:36:31,920
measuring something more more bigger

2355
01:36:31,920 --> 01:36:33,040
than that

2356
01:36:33,040 --> 01:36:35,679
but i imagine that

2357
01:36:35,679 --> 01:36:38,800
there are the there is some some traffic

2358
01:36:38,800 --> 01:36:42,400
more traffic and could be a little noisy

2359
01:36:42,400 --> 01:36:43,199
um

2360
01:36:43,199 --> 01:36:45,679
i mean the responsiveness is not like an

2361
01:36:45,679 --> 01:36:47,360
stride line

2362
01:36:47,360 --> 01:36:51,360
like you you you draw like there

2363
01:36:51,360 --> 01:36:52,480
and

2364
01:36:52,480 --> 01:36:55,040
therefore how you deal with this

2365
01:36:55,040 --> 01:36:57,280
this variation because it could be

2366
01:36:57,280 --> 01:37:00,239
really very very important when you

2367
01:37:00,239 --> 01:37:01,760
you go

2368
01:37:01,760 --> 01:37:02,880
from

2369
01:37:02,880 --> 01:37:07,840
you go through several links thank you

2370
01:37:07,920 --> 01:37:10,800
yeah thanks for your comment um so

2371
01:37:10,800 --> 01:37:13,679
maybe i i didn't introduce that properly

2372
01:37:13,679 --> 01:37:15,280
at the beginning what we are measuring

2373
01:37:15,280 --> 01:37:16,320
here is

2374
01:37:16,320 --> 01:37:18,880
end-to-end capacity and end-to-end

2375
01:37:18,880 --> 01:37:20,960
responsiveness so from the client to the

2376
01:37:20,960 --> 01:37:22,719
server right

2377
01:37:22,719 --> 01:37:25,119
so it's not necessarily last mile it is

2378
01:37:25,119 --> 01:37:27,199
wherever the bottleneck the bottleneck

2379
01:37:27,199 --> 01:37:29,760
is up for this kind of communication

2380
01:37:29,760 --> 01:37:32,560
right um so yes there may be other

2381
01:37:32,560 --> 01:37:35,119
traffic and so we are measuring what at

2382
01:37:35,119 --> 01:37:37,280
this point in time what is this the

2383
01:37:37,280 --> 01:37:40,320
user's capacity that the fair share of

2384
01:37:40,320 --> 01:37:42,800
its link usage that he can get or she

2385
01:37:42,800 --> 01:37:45,119
can get

2386
01:37:45,360 --> 01:37:48,560
okay okay then then you you got really

2387
01:37:48,560 --> 01:37:49,840
a lot of uh

2388
01:37:49,840 --> 01:37:52,320
noise sure i i mean

2389
01:37:52,320 --> 01:37:53,840
the signal are

2390
01:37:53,840 --> 01:37:56,960
very very okay great i will contact you

2391
01:37:56,960 --> 01:37:58,560
later thank you

2392
01:37:58,560 --> 01:38:02,440
that's good thanks

2393
01:38:06,800 --> 01:38:10,560
all right um let's move on uh nalini do

2394
01:38:10,560 --> 01:38:13,880
you want to present

2395
01:38:26,239 --> 01:38:29,840
so okay so this is um our pdm

2396
01:38:29,840 --> 01:38:33,040
destination option it's an ipv6

2397
01:38:33,040 --> 01:38:35,360
destination header and basically what we

2398
01:38:35,360 --> 01:38:38,719
do this is an end-to-end measurement

2399
01:38:38,719 --> 01:38:42,159
it's put on at the source at the end use

2400
01:38:42,159 --> 01:38:45,040
end client and we put in a sequence

2401
01:38:45,040 --> 01:38:46,000
number

2402
01:38:46,000 --> 01:38:48,480
and um

2403
01:38:48,480 --> 01:38:51,600
timing the idea is to be able to very

2404
01:38:51,600 --> 01:38:54,880
quickly separate server time from

2405
01:38:54,880 --> 01:38:56,719
network time

2406
01:38:56,719 --> 01:39:00,719
and uh the potential users are large um

2407
01:39:00,719 --> 01:39:03,040
uh uh enterprises

2408
01:39:03,040 --> 01:39:05,040
okay

2409
01:39:05,040 --> 01:39:07,360
and so what have we done

2410
01:39:07,360 --> 01:39:09,840
uh we had an early sector review and

2411
01:39:09,840 --> 01:39:12,480
i'll go through that and we're working

2412
01:39:12,480 --> 01:39:16,239
on implementation of this

2413
01:39:16,239 --> 01:39:18,800
and we're also testing uh extension

2414
01:39:18,800 --> 01:39:21,040
headers across the internet and i'll

2415
01:39:21,040 --> 01:39:22,719
talk about that

2416
01:39:22,719 --> 01:39:24,320
okay

2417
01:39:24,320 --> 01:39:26,880
so this is the sector review

2418
01:39:26,880 --> 01:39:29,199
and basically they said it wasn't ready

2419
01:39:29,199 --> 01:39:31,280
because it's still very early

2420
01:39:31,280 --> 01:39:34,080
and and there's a few things uh left to

2421
01:39:34,080 --> 01:39:37,440
do uh basically on uh authentication

2422
01:39:37,440 --> 01:39:39,360
authorization and so on

2423
01:39:39,360 --> 01:39:41,679
and otherwise they think it's pretty

2424
01:39:41,679 --> 01:39:44,239
good and so we will continue to work

2425
01:39:44,239 --> 01:39:46,400
with them we feel pretty good because it

2426
01:39:46,400 --> 01:39:48,159
doesn't look like there's

2427
01:39:48,159 --> 01:39:49,520
huge amounts

2428
01:39:49,520 --> 01:39:52,560
to change and we'll address whatever

2429
01:39:52,560 --> 01:39:53,679
there is

2430
01:39:53,679 --> 01:39:57,280
so that was that feels good

2431
01:39:57,360 --> 01:39:58,880
okay next

2432
01:39:58,880 --> 01:39:59,600
so

2433
01:39:59,600 --> 01:40:02,159
the big thing that we did this last time

2434
01:40:02,159 --> 01:40:04,159
other than implementation

2435
01:40:04,159 --> 01:40:06,800
is look and see can ipv6 extension

2436
01:40:06,800 --> 01:40:09,440
editors can actually be used

2437
01:40:09,440 --> 01:40:11,920
because if they can't we're wasting our

2438
01:40:11,920 --> 01:40:14,320
time in defining this thing

2439
01:40:14,320 --> 01:40:16,639
it doesn't matter encrypted or not it

2440
01:40:16,639 --> 01:40:19,440
won't work so so that's what that's what

2441
01:40:19,440 --> 01:40:23,679
we did and so we tested stuff so um

2442
01:40:23,679 --> 01:40:25,119
so next

2443
01:40:25,119 --> 01:40:28,400
and so what we did and so so what we did

2444
01:40:28,400 --> 01:40:31,040
and this is a this is the start of the

2445
01:40:31,040 --> 01:40:33,760
testing and yes we know we need to do a

2446
01:40:33,760 --> 01:40:36,400
lot more and we're working on doing a

2447
01:40:36,400 --> 01:40:40,320
lot more but basically what i think

2448
01:40:40,320 --> 01:40:41,679
we showed

2449
01:40:41,679 --> 01:40:44,080
is that from we did a patch to the

2450
01:40:44,080 --> 01:40:47,440
freebsd kernel so that it sends out

2451
01:40:47,440 --> 01:40:49,520
extension headers

2452
01:40:49,520 --> 01:40:52,239
with every packet and we sent

2453
01:40:52,239 --> 01:40:55,440
real ftps so i'll show you that and the

2454
01:40:55,440 --> 01:40:58,080
other thing we did is we did it across

2455
01:40:58,080 --> 01:40:58,960
um

2456
01:40:58,960 --> 01:41:02,000
on a couple of different continents

2457
01:41:02,000 --> 01:41:04,320
maybe yeah three different continents

2458
01:41:04,320 --> 01:41:06,639
four different and a bunch of different

2459
01:41:06,639 --> 01:41:10,400
cities the idea is is to see

2460
01:41:10,400 --> 01:41:12,719
if it's going through the core of the

2461
01:41:12,719 --> 01:41:15,760
internet um because if it's you know

2462
01:41:15,760 --> 01:41:17,679
because we want to find out is it being

2463
01:41:17,679 --> 01:41:20,400
stopped at the source is it being

2464
01:41:20,400 --> 01:41:21,840
stopped

2465
01:41:21,840 --> 01:41:24,239
at some transit network is it stopped at

2466
01:41:24,239 --> 01:41:27,520
the destination if extension headers are

2467
01:41:27,520 --> 01:41:29,199
not getting through

2468
01:41:29,199 --> 01:41:32,239
then where are they and ideally why are

2469
01:41:32,239 --> 01:41:35,119
they so next

2470
01:41:35,119 --> 01:41:36,639
and

2471
01:41:36,639 --> 01:41:39,600
and so it was real easy because pdm

2472
01:41:39,600 --> 01:41:41,040
our

2473
01:41:41,040 --> 01:41:42,639
mod to the kernel

2474
01:41:42,639 --> 01:41:45,600
sends pdm with every packet um we can

2475
01:41:45,600 --> 01:41:48,159
just do a very large ftp and that's what

2476
01:41:48,159 --> 01:41:51,280
we did and this one happens to be

2477
01:41:51,280 --> 01:41:54,080
toronto to mumbai

2478
01:41:54,080 --> 01:41:57,600
and you can see it was a big old ftp and

2479
01:41:57,600 --> 01:41:59,840
successfully transferred

2480
01:41:59,840 --> 01:42:02,320
next please

2481
01:42:02,320 --> 01:42:04,239
and you can see our

2482
01:42:04,239 --> 01:42:06,719
wonderful little pdm extension header

2483
01:42:06,719 --> 01:42:09,119
right there in the packet trace

2484
01:42:09,119 --> 01:42:11,840
next please

2485
01:42:11,840 --> 01:42:14,239
and in fact turned out a lot of these

2486
01:42:14,239 --> 01:42:17,040
things were fragmented and so we didn't

2487
01:42:17,040 --> 01:42:19,760
even mean to test fragmentation header

2488
01:42:19,760 --> 01:42:22,239
but it was fragmented and all those got

2489
01:42:22,239 --> 01:42:26,000
through just fine uh as well

2490
01:42:26,000 --> 01:42:27,679
next

2491
01:42:27,679 --> 01:42:29,440
so you can see

2492
01:42:29,440 --> 01:42:32,320
um it appeared to go all the way through

2493
01:42:32,320 --> 01:42:34,719
for a bunch of different sites

2494
01:42:34,719 --> 01:42:37,760
big old ftp going across okay

2495
01:42:37,760 --> 01:42:39,760
next please

2496
01:42:39,760 --> 01:42:40,719
um

2497
01:42:40,719 --> 01:42:44,239
and so we also started doing curls

2498
01:42:44,239 --> 01:42:45,600
and um

2499
01:42:45,600 --> 01:42:48,639
this one was actually at the hackathon

2500
01:42:48,639 --> 01:42:51,119
we started doing it to

2501
01:42:51,119 --> 01:42:54,639
um i think we set up an apache server in

2502
01:42:54,639 --> 01:42:57,360
warsaw with a bunch of junk data in it

2503
01:42:57,360 --> 01:42:59,600
so it would create a bunch of um

2504
01:42:59,600 --> 01:43:01,840
uh fragment headers and we've tested

2505
01:43:01,840 --> 01:43:04,800
from the hackathon and here it is um

2506
01:43:04,800 --> 01:43:07,760
we're doing a curl from the ietf network

2507
01:43:07,760 --> 01:43:11,600
successfully next

2508
01:43:11,600 --> 01:43:14,560
next yeah so

2509
01:43:14,560 --> 01:43:16,719
we're going to do a lot more testing and

2510
01:43:16,719 --> 01:43:19,360
to see kind of where things start and

2511
01:43:19,360 --> 01:43:20,960
there's already

2512
01:43:20,960 --> 01:43:23,119
a number of people who want to work with

2513
01:43:23,119 --> 01:43:26,480
us we will continue on

2514
01:43:26,480 --> 01:43:29,520
implementation of our encryption because

2515
01:43:29,520 --> 01:43:31,440
ideally

2516
01:43:31,440 --> 01:43:34,320
pdm will work to give us our wonderful

2517
01:43:34,320 --> 01:43:36,639
data that we need and then if it

2518
01:43:36,639 --> 01:43:38,800
actually works then we actually do need

2519
01:43:38,800 --> 01:43:42,480
to encrypt it because the data can is is

2520
01:43:42,480 --> 01:43:44,960
actually too good and can it can be the

2521
01:43:44,960 --> 01:43:48,480
source of an attack so one does wish to

2522
01:43:48,480 --> 01:43:49,280
um

2523
01:43:49,280 --> 01:43:54,800
encrypt it so yeah there we are martin

2524
01:43:54,800 --> 01:43:57,440
i'm sorry so i maybe i got confused by

2525
01:43:57,440 --> 01:43:59,119
different so the

2526
01:43:59,119 --> 01:44:00,639
you're finding the eh is making it

2527
01:44:00,639 --> 01:44:02,639
through just fine at least in the

2528
01:44:02,639 --> 01:44:04,159
measurement point you have

2529
01:44:04,159 --> 01:44:06,880
correct oh good great thanks

2530
01:44:06,880 --> 01:44:08,159
correct

2531
01:44:08,159 --> 01:44:10,800
that is indeed what we have found i

2532
01:44:10,800 --> 01:44:13,679
again i'm i'm saying these are the

2533
01:44:13,679 --> 01:44:17,119
points we tested these are the tests we

2534
01:44:17,119 --> 01:44:19,840
did i'm not saying anything more than

2535
01:44:19,840 --> 01:44:22,080
that

2536
01:44:25,600 --> 01:44:28,239
hi paul briscoe um

2537
01:44:28,239 --> 01:44:29,840
just say what i said to you when we were

2538
01:44:29,840 --> 01:44:33,199
chatting in the hackathon yep um that

2539
01:44:33,199 --> 01:44:34,560
all the

2540
01:44:34,560 --> 01:44:36,239
advantage points are

2541
01:44:36,239 --> 01:44:37,920
data centers essentially they're they're

2542
01:44:37,920 --> 01:44:38,800
the

2543
01:44:38,800 --> 01:44:41,119
the hosting services data centers and so

2544
01:44:41,119 --> 01:44:42,880
nothing's going over a sort of consumer

2545
01:44:42,880 --> 01:44:45,840
access network no no no no no no there's

2546
01:44:45,840 --> 01:44:47,920
going over the public internet it is

2547
01:44:47,920 --> 01:44:50,400
going over the public internet yeah yeah

2548
01:44:50,400 --> 01:44:53,119
but not a consumer access network like a

2549
01:44:53,119 --> 01:44:55,600
mobile network or a oh yeah or a dsl

2550
01:44:55,600 --> 01:44:57,119
network or

2551
01:44:57,119 --> 01:44:59,600
yep yep yep we will do mobile testing

2552
01:44:59,600 --> 01:45:01,280
we'll do testing yes yes yes no you're

2553
01:45:01,280 --> 01:45:03,840
you're very right there's lots of

2554
01:45:03,840 --> 01:45:06,560
yeah yeah there's lots more testing lots

2555
01:45:06,560 --> 01:45:08,800
of people you know anybody that wishes

2556
01:45:08,800 --> 01:45:10,159
to help test

2557
01:45:10,159 --> 01:45:12,320
knock yourself out we're setting up an

2558
01:45:12,320 --> 01:45:14,080
email list

2559
01:45:14,080 --> 01:45:15,840
i mean yeah yeah there's a lot more

2560
01:45:15,840 --> 01:45:17,760
testing that needs to be done you're

2561
01:45:17,760 --> 01:45:19,760
you're you could not be more correct

2562
01:45:19,760 --> 01:45:22,480
yeah because because i think that's

2563
01:45:22,480 --> 01:45:24,880
um that's where you're more likely to

2564
01:45:24,880 --> 01:45:27,600
find problems but yeah hey let's just

2565
01:45:27,600 --> 01:45:29,679
see one step at a time

2566
01:45:29,679 --> 01:45:31,760
let's see where we got problems because

2567
01:45:31,760 --> 01:45:33,600
you know the other thing too like like

2568
01:45:33,600 --> 01:45:35,280
um

2569
01:45:35,280 --> 01:45:37,119
let's find out where what's the

2570
01:45:37,119 --> 01:45:40,159
situation where is it being dropped why

2571
01:45:40,159 --> 01:45:43,440
is it because i tell you um just right

2572
01:45:43,440 --> 01:45:48,000
in our testing um at the hackathon um we

2573
01:45:48,000 --> 01:45:50,960
found one bug in a particular router

2574
01:45:50,960 --> 01:45:53,199
implementation where the

2575
01:45:53,199 --> 01:45:55,600
the hop by hop header just right there

2576
01:45:55,600 --> 01:45:57,840
wasn't going out at the source and so of

2577
01:45:57,840 --> 01:45:59,600
course the question is what happened if

2578
01:45:59,600 --> 01:46:02,080
they fix their bug right

2579
01:46:02,080 --> 01:46:04,960
and like lo and behold you know so so

2580
01:46:04,960 --> 01:46:06,800
and and now it's it's super interesting

2581
01:46:06,800 --> 01:46:08,639
we're also talking to the free router

2582
01:46:08,639 --> 01:46:10,239
people i just had the

2583
01:46:10,239 --> 01:46:12,719
little young man uh write me back we'll

2584
01:46:12,719 --> 01:46:16,080
we'll um we'll modify free router to

2585
01:46:16,080 --> 01:46:19,199
send h-by-h i mean hbh because what i

2586
01:46:19,199 --> 01:46:21,600
think is if we can bypass if we can

2587
01:46:21,600 --> 01:46:23,920
control all the equipment if we can

2588
01:46:23,920 --> 01:46:26,080
control the equipment control the end

2589
01:46:26,080 --> 01:46:29,440
points and know exactly what it is we're

2590
01:46:29,440 --> 01:46:32,480
testing i think we gotta we have some

2591
01:46:32,480 --> 01:46:35,520
shot at figuring out what is the actual

2592
01:46:35,520 --> 01:46:38,639
situation yeah any feedback or comments

2593
01:46:38,639 --> 01:46:41,840
or anything that anyone has on you know

2594
01:46:41,840 --> 01:46:43,360
what we're forgetting you should

2595
01:46:43,360 --> 01:46:45,119
remember to test this

2596
01:46:45,119 --> 01:46:47,440
you know please please let us know we

2597
01:46:47,440 --> 01:46:48,960
happy to test

2598
01:46:48,960 --> 01:46:50,239
yep

2599
01:46:50,239 --> 01:46:54,678
we'll more results next time

2600
01:46:55,679 --> 01:46:58,400
thank you very much

2601
01:47:03,520 --> 01:47:06,520
greg

2602
01:47:14,400 --> 01:47:17,679
okay next slide please

2603
01:47:20,639 --> 01:47:23,280
okay so um this is updated just to

2604
01:47:23,280 --> 01:47:28,559
remind you what we're trying to do is um

2605
01:47:29,360 --> 01:47:32,480
there are services that are governed by

2606
01:47:32,480 --> 01:47:35,360
multiple slos that are

2607
01:47:35,360 --> 01:47:38,080
composing their service level

2608
01:47:38,080 --> 01:47:39,280
agreement

2609
01:47:39,280 --> 01:47:40,159
and

2610
01:47:40,159 --> 01:47:40,900
they

2611
01:47:40,900 --> 01:47:42,000
[Music]

2612
01:47:42,000 --> 01:47:42,880
are

2613
01:47:42,880 --> 01:47:45,920
expressing requirements and expectation

2614
01:47:45,920 --> 01:47:48,080
of the service for the particular

2615
01:47:48,080 --> 01:47:51,080
metrics

2616
01:47:51,280 --> 01:47:54,080
in this work we're trying not to look at

2617
01:47:54,080 --> 01:47:57,440
how each particular slo

2618
01:47:57,440 --> 01:47:59,520
is

2619
01:47:59,520 --> 01:48:01,040
complied with

2620
01:48:01,040 --> 01:48:03,199
but in overall

2621
01:48:03,199 --> 01:48:06,800
the combination of multiple slo how it

2622
01:48:06,800 --> 01:48:09,360
uh reflects uh their

2623
01:48:09,360 --> 01:48:14,000
uh service uh and um

2624
01:48:14,239 --> 01:48:18,719
as a whole and uh we express that as

2625
01:48:18,719 --> 01:48:19,520
uh

2626
01:48:19,520 --> 01:48:23,280
precision uh availability of the service

2627
01:48:23,280 --> 01:48:26,320
that is characterized and constrained by

2628
01:48:26,320 --> 01:48:28,800
uh multiple slos

2629
01:48:28,800 --> 01:48:30,880
so if you look at this

2630
01:48:30,880 --> 01:48:35,040
uh figure so you see that

2631
01:48:35,040 --> 01:48:37,119
their period where

2632
01:48:37,119 --> 01:48:39,600
their particular

2633
01:48:39,600 --> 01:48:42,960
slow a particular metric is within

2634
01:48:42,960 --> 01:48:45,360
acceptable range but then there are

2635
01:48:45,360 --> 01:48:49,199
periods when it exceeds uh the critical

2636
01:48:49,199 --> 01:48:52,400
threshold and these

2637
01:48:52,400 --> 01:48:55,840
uh periods are can be considered as uh

2638
01:48:55,840 --> 01:48:57,320
service and

2639
01:48:57,320 --> 01:49:00,560
unavailability whereas there when it's

2640
01:49:00,560 --> 01:49:03,760
acceptable that's uh acceptable and thus

2641
01:49:03,760 --> 01:49:06,400
it's a service availability period next

2642
01:49:06,400 --> 01:49:08,639
slide please

2643
01:49:08,639 --> 01:49:11,199
so uh this is update we already

2644
01:49:11,199 --> 01:49:14,159
presented it uh

2645
01:49:14,159 --> 01:49:17,760
virtual meeting in vienna remotely we

2646
01:49:17,760 --> 01:49:21,119
received a very detailed and uh helpful

2647
01:49:21,119 --> 01:49:23,760
comments from mad work together

2648
01:49:23,760 --> 01:49:27,360
and ned uh agreed to join us and

2649
01:49:27,360 --> 01:49:29,840
continue working on this document

2650
01:49:29,840 --> 01:49:31,840
so let's look what uh

2651
01:49:31,840 --> 01:49:34,159
updates we have now uh for this meeting

2652
01:49:34,159 --> 01:49:37,280
to share with you next slide please

2653
01:49:37,280 --> 01:49:41,119
so we clarify the problem statement

2654
01:49:41,119 --> 01:49:42,480
and um

2655
01:49:42,480 --> 01:49:43,360
so

2656
01:49:43,360 --> 01:49:46,400
basically what we are trying to uh solve

2657
01:49:46,400 --> 01:49:48,080
what we are addressing

2658
01:49:48,080 --> 01:49:50,719
and it's not only on

2659
01:49:50,719 --> 01:49:52,880
particular values

2660
01:49:52,880 --> 01:49:54,480
that uh

2661
01:49:54,480 --> 01:49:57,440
the service experiences

2662
01:49:57,440 --> 01:50:00,080
at the given time uh

2663
01:50:00,080 --> 01:50:02,239
at a given point in time

2664
01:50:02,239 --> 01:50:05,760
but how it uh relative to

2665
01:50:05,760 --> 01:50:09,760
the thresholds their slo that is set for

2666
01:50:09,760 --> 01:50:14,000
their uh particular metric

2667
01:50:14,000 --> 01:50:16,639
next slide

2668
01:50:17,599 --> 01:50:18,880
so

2669
01:50:18,880 --> 01:50:22,000
then we clarify the message of how tam

2670
01:50:22,000 --> 01:50:25,599
can be used so it can be used to verify

2671
01:50:25,599 --> 01:50:27,599
their compliance with the specified

2672
01:50:27,599 --> 01:50:29,599
quality expectations

2673
01:50:29,599 --> 01:50:31,679
and that can be used in

2674
01:50:31,679 --> 01:50:34,400
multiple ways for example optimize

2675
01:50:34,400 --> 01:50:38,880
service delivery or account for

2676
01:50:38,880 --> 01:50:42,880
obviously operator to subscriber

2677
01:50:42,880 --> 01:50:44,159
interaction

2678
01:50:44,159 --> 01:50:46,799
next slide

2679
01:50:49,679 --> 01:50:51,840
there was one metric that we missed so

2680
01:50:51,840 --> 01:50:52,719
we

2681
01:50:52,719 --> 01:50:54,719
added

2682
01:50:54,719 --> 01:50:58,239
packets uh since last violated packet

2683
01:50:58,239 --> 01:51:01,839
oh yeah next slide

2684
01:51:03,199 --> 01:51:06,960
and with terminology so uh if you recall

2685
01:51:06,960 --> 01:51:10,000
uh in the first version we were

2686
01:51:10,000 --> 01:51:12,800
not yet decided uh whether referred to

2687
01:51:12,800 --> 01:51:16,400
the metrics as uh errored

2688
01:51:16,400 --> 01:51:19,119
time intervals and

2689
01:51:19,119 --> 01:51:21,920
well violated so we just discussed and

2690
01:51:21,920 --> 01:51:24,560
uh comments from that helped us us

2691
01:51:24,560 --> 01:51:26,400
to settle on

2692
01:51:26,400 --> 01:51:29,760
a violated term so now uh everything is

2693
01:51:29,760 --> 01:51:32,239
referred to as violated intervals severe

2694
01:51:32,239 --> 01:51:35,199
violated intervals or violation free

2695
01:51:35,199 --> 01:51:36,960
interval

2696
01:51:36,960 --> 01:51:39,520
next slide

2697
01:51:39,760 --> 01:51:42,400
so as you see so this

2698
01:51:42,400 --> 01:51:45,440
item is can be taken out

2699
01:51:45,440 --> 01:51:48,000
there are some more work that we will be

2700
01:51:48,000 --> 01:51:51,280
doing in working uh with this

2701
01:51:51,280 --> 01:51:54,800
document and um still we have some plans

2702
01:51:54,800 --> 01:51:56,239
for the future

2703
01:51:56,239 --> 01:51:58,480
and we will appreciate your comments

2704
01:51:58,480 --> 01:51:59,599
suggestion

2705
01:51:59,599 --> 01:52:00,639
and

2706
01:52:00,639 --> 01:52:03,280
please uh think about joining the work

2707
01:52:03,280 --> 01:52:06,719
there are a lot of work to be done

2708
01:52:07,520 --> 01:52:09,679
next slide please

2709
01:52:09,679 --> 01:52:11,280
so again

2710
01:52:11,280 --> 01:52:12,800
uh

2711
01:52:12,800 --> 01:52:15,599
we think that um since we merged this

2712
01:52:15,599 --> 01:52:18,719
work and addressed the comments from

2713
01:52:18,719 --> 01:52:19,520
ned

2714
01:52:19,520 --> 01:52:22,639
uh the work matured enough that we

2715
01:52:22,639 --> 01:52:24,239
appreciate your consideration for the

2716
01:52:24,239 --> 01:52:27,799
working group adoption

2717
01:52:30,960 --> 01:52:32,159
any questions

2718
01:52:32,159 --> 01:52:33,520
i don't see any

2719
01:52:33,520 --> 01:52:35,679
anybody on the queue

2720
01:52:35,679 --> 01:52:37,360
okay then thank you

2721
01:52:37,360 --> 01:52:40,080
thank you very much

2722
01:52:41,360 --> 01:52:44,480
that was our last presentation

2723
01:52:44,480 --> 01:52:46,959
we made it

2724
01:52:48,480 --> 01:52:50,960
any closing remarks yeah no thank you

2725
01:52:50,960 --> 01:52:52,400
for a good meeting thanks for getting

2726
01:52:52,400 --> 01:52:54,880
through that agenda

2727
01:52:54,880 --> 01:52:57,280
i think we had some good discussion here

2728
01:52:57,280 --> 01:52:59,760
some good follow-ups and

2729
01:52:59,760 --> 01:53:01,599
please you know continue those

2730
01:53:01,599 --> 01:53:04,000
discussions on the list

2731
01:53:04,000 --> 01:53:06,159
and in the github repos for the document

2732
01:53:06,159 --> 01:53:08,560
script that's appropriate

2733
01:53:08,560 --> 01:53:11,360
and yeah we'll see you next time

2734
01:53:11,360 --> 01:53:14,799
and have a good uh

2735
01:53:15,119 --> 01:53:18,799
and safe travel home everyone

2736
01:53:22,480 --> 01:53:25,480
um

2737
01:53:36,960 --> 01:53:39,960
because

2738
01:54:18,719 --> 01:54:20,239
okay so

2739
01:54:20,239 --> 01:54:23,839
i can continue with the next step

2740
01:54:25,920 --> 01:54:29,719
request for early allocations

2741
01:54:31,760 --> 01:54:33,199
for which one like there were so many

2742
01:54:33,199 --> 01:54:36,199
crap

2743
01:55:28,480 --> 01:55:31,480
uh

2744
01:55:37,599 --> 01:55:40,599
uh

2745
01:55:49,570 --> 01:55:52,759
[Music]

2746
01:55:58,800 --> 01:56:01,800
yes

2747
01:56:09,199 --> 01:56:12,199
is

2748
01:56:25,360 --> 01:56:28,679
for the existing

2749
01:56:38,080 --> 01:56:41,080
is

2750
01:56:53,920 --> 01:56:57,480
you can't tell

