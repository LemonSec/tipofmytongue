1
00:00:15,200 --> 00:00:18,240
okay we're on time i guess

2
00:00:19,119 --> 00:00:21,199
should we search

3
00:00:21,199 --> 00:00:23,199
okay good morning

4
00:00:23,199 --> 00:00:26,480
welcome to the open pcp working group

5
00:00:26,480 --> 00:00:29,760
at uh itf114 uh i guess we'll get

6
00:00:29,760 --> 00:00:31,840
started

7
00:00:31,920 --> 00:00:34,399
uh we have some remote people we have

8
00:00:34,399 --> 00:00:36,880
local people i'm stephen farrell this is

9
00:00:36,880 --> 00:00:40,079
daniel kahn gilmore okay

10
00:00:40,079 --> 00:00:42,320
um

11
00:00:42,320 --> 00:00:44,719
you're driving the slides that's the

12
00:00:44,719 --> 00:00:47,520
contact he thinks

13
00:00:48,480 --> 00:00:49,920
this is the note well

14
00:00:49,920 --> 00:00:51,280
i guess you've probably seen that during

15
00:00:51,280 --> 00:00:53,039
the week if you haven't then

16
00:00:53,039 --> 00:00:55,680
noted well um

17
00:00:55,680 --> 00:00:56,559
and

18
00:00:56,559 --> 00:00:58,800
you didn't notice we also are all

19
00:00:58,800 --> 00:01:01,760
wearing masks today so please do so uh

20
00:01:01,760 --> 00:01:03,199
if you're presenting here you don't have

21
00:01:03,199 --> 00:01:06,159
to but otherwise please do

22
00:01:06,159 --> 00:01:08,799
next slide

23
00:01:09,760 --> 00:01:11,520
so this is our agenda

24
00:01:11,520 --> 00:01:12,560
um

25
00:01:12,560 --> 00:01:15,040
we did a working group last call

26
00:01:15,040 --> 00:01:17,520
not probably it won't be the last one um

27
00:01:17,520 --> 00:01:19,119
we have a bunch of issues to talk about

28
00:01:19,119 --> 00:01:21,840
that that we'd like to get through and

29
00:01:21,840 --> 00:01:24,159
if we can

30
00:01:24,159 --> 00:01:26,080
reach some kind of resolution in the in

31
00:01:26,080 --> 00:01:28,960
the room uh whether here or virtually

32
00:01:28,960 --> 00:01:30,240
for those issues that'll be great and

33
00:01:30,240 --> 00:01:32,320
then confirm them on the list later

34
00:01:32,320 --> 00:01:34,479
so that's most of the meeting today

35
00:01:34,479 --> 00:01:36,400
uh and then talk about next steps for

36
00:01:36,400 --> 00:01:38,799
the draft then daniel

37
00:01:38,799 --> 00:01:41,119
who i don't see in the room just yet has

38
00:01:41,119 --> 00:01:44,560
a presentation um and aaron i think is

39
00:01:44,560 --> 00:01:46,479
remote is that correct i think erin is

40
00:01:46,479 --> 00:01:47,759
remote yeah

41
00:01:47,759 --> 00:01:49,200
and

42
00:01:49,200 --> 00:01:50,720
so these are these presentations are

43
00:01:50,720 --> 00:01:52,960
about

44
00:01:53,200 --> 00:01:54,799
things that might happen if we can

45
00:01:54,799 --> 00:01:57,280
actually get this draft out the door uh

46
00:01:57,280 --> 00:01:58,640
and so we're we're hoping that we can

47
00:01:58,640 --> 00:02:00,320
get the drought out the door because we

48
00:02:00,320 --> 00:02:02,159
won't be able to recharge her until we

49
00:02:02,159 --> 00:02:03,439
do that

50
00:02:03,439 --> 00:02:05,200
right

51
00:02:05,200 --> 00:02:09,640
so anybody like to bash the agenda

52
00:02:10,959 --> 00:02:13,760
looks like not no comments

53
00:02:13,760 --> 00:02:15,040
great

54
00:02:15,040 --> 00:02:16,319
we have terrorists taking minutes so

55
00:02:16,319 --> 00:02:18,640
thanks tara um and we can keep an eye on

56
00:02:18,640 --> 00:02:20,480
everyone's chairs

57
00:02:20,480 --> 00:02:21,680
okay so

58
00:02:21,680 --> 00:02:23,120
like i said we had a working group last

59
00:02:23,120 --> 00:02:24,000
call

60
00:02:24,000 --> 00:02:25,280
um

61
00:02:25,280 --> 00:02:27,599
on draft six just really to see where

62
00:02:27,599 --> 00:02:29,440
we're at um because the

63
00:02:29,440 --> 00:02:31,440
we had a design team as we discussed

64
00:02:31,440 --> 00:02:33,760
last time that was working really hard i

65
00:02:33,760 --> 00:02:34,879
think

66
00:02:34,879 --> 00:02:36,480
uh in order to try and get the

67
00:02:36,480 --> 00:02:39,360
documented shape um if you go to that

68
00:02:39,360 --> 00:02:40,239
link

69
00:02:40,239 --> 00:02:42,000
you'll find the working group last call

70
00:02:42,000 --> 00:02:45,680
issues all the label wglc

71
00:02:45,680 --> 00:02:48,080
and what we'd like to do is again go

72
00:02:48,080 --> 00:02:49,200
through those

73
00:02:49,200 --> 00:02:51,280
here with this highly energetic early

74
00:02:51,280 --> 00:02:53,440
morning crowd and

75
00:02:53,440 --> 00:02:54,560
see if we can kind of reach any

76
00:02:54,560 --> 00:02:56,879
resolution on those and if we can great

77
00:02:56,879 --> 00:03:00,399
and we'll confirm it on the list

78
00:03:00,800 --> 00:03:02,879
so yeah so the hope is that people can

79
00:03:02,879 --> 00:03:05,200
can speak to these issues as they come

80
00:03:05,200 --> 00:03:06,720
up uh if you're

81
00:03:06,720 --> 00:03:08,800
remote and you're on you know in jabber

82
00:03:08,800 --> 00:03:11,040
or zulip or whatever

83
00:03:11,040 --> 00:03:12,560
and you want someone to say something to

84
00:03:12,560 --> 00:03:13,440
the mic

85
00:03:13,440 --> 00:03:15,040
just you know put it in there and say

86
00:03:15,040 --> 00:03:17,359
mike

87
00:03:17,440 --> 00:03:19,519
so i think we'll just get started um

88
00:03:19,519 --> 00:03:23,360
with uh issue 132 which is about padding

89
00:03:23,360 --> 00:03:24,239
so

90
00:03:24,239 --> 00:03:25,360
i think what we do is maybe we just

91
00:03:25,360 --> 00:03:26,560
flick through the issues just quickly

92
00:03:26,560 --> 00:03:29,280
then go back to the top sounds good just

93
00:03:29,280 --> 00:03:30,239
some of them might kind of tease

94
00:03:30,239 --> 00:03:32,640
somebody up to go and click a link yep

95
00:03:32,640 --> 00:03:34,480
so so the reminders here this is about

96
00:03:34,480 --> 00:03:36,239
whether the padding package should have

97
00:03:36,239 --> 00:03:39,120
uh all zero content random content or

98
00:03:39,120 --> 00:03:41,440
some other uh scheme

99
00:03:41,440 --> 00:03:43,440
uh question about what do we tell

100
00:03:43,440 --> 00:03:45,519
implementations to do if they receive

101
00:03:45,519 --> 00:03:47,840
aead packets and try to decrypt them and

102
00:03:47,840 --> 00:03:50,480
get a failure

103
00:03:50,959 --> 00:03:52,879
issue about whether we include gcm in

104
00:03:52,879 --> 00:03:55,840
this draft or not

105
00:03:55,840 --> 00:03:58,000
question about whether we use hkdf to

106
00:03:58,000 --> 00:04:03,360
bind keys to the modes in aead

107
00:04:04,159 --> 00:04:05,760
i'm going to look at

108
00:04:05,760 --> 00:04:07,599
what we do with where do the

109
00:04:07,599 --> 00:04:09,840
certificate-wide parameters like

110
00:04:09,840 --> 00:04:11,439
algorithm preferences and things where

111
00:04:11,439 --> 00:04:14,000
do they live in an open pgp certificate

112
00:04:14,000 --> 00:04:15,680
are they in the direct p6 as the draft

113
00:04:15,680 --> 00:04:17,440
currently says

114
00:04:17,440 --> 00:04:19,040
um

115
00:04:19,040 --> 00:04:20,639
the whether we

116
00:04:20,639 --> 00:04:23,040
continue to disallow the revocation key

117
00:04:23,040 --> 00:04:25,199
sub packet for v5 keys or whether we

118
00:04:25,199 --> 00:04:27,440
want to roll that back

119
00:04:27,440 --> 00:04:30,080
um are we okay with the changes to the

120
00:04:30,080 --> 00:04:32,639
iana registry right we've the ayanna

121
00:04:32,639 --> 00:04:34,080
register the draft currently says that

122
00:04:34,080 --> 00:04:35,680
we're moving everything pretty much from

123
00:04:35,680 --> 00:04:38,160
almost everything from rfc required

124
00:04:38,160 --> 00:04:40,400
to specification required which is a

125
00:04:40,400 --> 00:04:42,720
looser requirement to register things in

126
00:04:42,720 --> 00:04:44,240
the registries

127
00:04:44,240 --> 00:04:46,160
um

128
00:04:46,160 --> 00:04:48,160
do we believe that the text on argon 2

129
00:04:48,160 --> 00:04:49,600
is clear do we have

130
00:04:49,600 --> 00:04:50,800
sufficient

131
00:04:50,800 --> 00:04:52,400
guidance there is there anything that

132
00:04:52,400 --> 00:04:55,039
can be cleaned up

133
00:04:55,120 --> 00:04:57,520
and how should we handle uh problematic

134
00:04:57,520 --> 00:04:59,520
keys that we've been seeing in the wild

135
00:04:59,520 --> 00:05:00,880
there's been some reports about some

136
00:05:00,880 --> 00:05:02,720
fairly popular keys that don't conform

137
00:05:02,720 --> 00:05:04,479
to any of the specifications including

138
00:05:04,479 --> 00:05:06,880
rfc 4880 and should do we need to update

139
00:05:06,880 --> 00:05:08,320
the text to handle it better do we need

140
00:05:08,320 --> 00:05:11,199
to modify the spec for v5 keys to not

141
00:05:11,199 --> 00:05:12,479
have to worry about this kind of failure

142
00:05:12,479 --> 00:05:14,960
in the future

143
00:05:14,960 --> 00:05:17,120
and then the last question i think is

144
00:05:17,120 --> 00:05:19,360
about how we want to you know if we can

145
00:05:19,360 --> 00:05:21,840
get through these we get a new draft out

146
00:05:21,840 --> 00:05:24,639
how do we want to

147
00:05:24,639 --> 00:05:26,400
scope the process going forward do we

148
00:05:26,400 --> 00:05:28,240
want to say okay when the new draft is

149
00:05:28,240 --> 00:05:29,520
out if it handles all these things the

150
00:05:29,520 --> 00:05:31,520
way the working group agrees

151
00:05:31,520 --> 00:05:33,360
can we just look at the

152
00:05:33,360 --> 00:05:35,120
the changes going forward the diffs you

153
00:05:35,120 --> 00:05:37,280
know so that we can

154
00:05:37,280 --> 00:05:40,240
minimize the overall level of churn that

155
00:05:40,240 --> 00:05:41,600
that um

156
00:05:41,600 --> 00:05:43,600
that happens on the next phase hopefully

157
00:05:43,600 --> 00:05:45,039
the next phase of the working group last

158
00:05:45,039 --> 00:05:46,160
call

159
00:05:46,160 --> 00:05:47,919
so that's the that's the queue of issues

160
00:05:47,919 --> 00:05:49,440
that we're looking at i'm going to pop

161
00:05:49,440 --> 00:05:51,360
back to the first one

162
00:05:51,360 --> 00:05:52,560
um

163
00:05:52,560 --> 00:05:54,880
so we have some time to discuss each one

164
00:05:54,880 --> 00:05:56,880
uh but hopefully that gives you a flavor

165
00:05:56,880 --> 00:05:58,639
of the types of stuff that we're that

166
00:05:58,639 --> 00:06:00,080
we're asking for

167
00:06:00,080 --> 00:06:02,319
um if you pull the slides

168
00:06:02,319 --> 00:06:03,280
from the

169
00:06:03,280 --> 00:06:06,400
data tracker the meeting agenda you get

170
00:06:06,400 --> 00:06:07,919
links there to go to each of the issues

171
00:06:07,919 --> 00:06:09,759
and we'll pull up the issues here as

172
00:06:09,759 --> 00:06:10,880
well

173
00:06:10,880 --> 00:06:12,880
during discussion

174
00:06:12,880 --> 00:06:13,840
so

175
00:06:13,840 --> 00:06:18,000
heading back to issue 132 about padding

176
00:06:18,000 --> 00:06:21,840
we have this padding packet um

177
00:06:21,840 --> 00:06:24,080
uh and the question for the group is

178
00:06:24,080 --> 00:06:25,600
what should the content of the padding

179
00:06:25,600 --> 00:06:27,600
packet be uh we've had different people

180
00:06:27,600 --> 00:06:29,440
with different perspectives on this uh

181
00:06:29,440 --> 00:06:30,800
on the list we've had a couple different

182
00:06:30,800 --> 00:06:33,440
variants in the in as this evolved

183
00:06:33,440 --> 00:06:36,400
through uh through git

184
00:06:36,400 --> 00:06:37,840
the status quo

185
00:06:37,840 --> 00:06:40,319
is that the padding packet should be

186
00:06:40,319 --> 00:06:41,199
uh

187
00:06:41,199 --> 00:06:43,120
full of random octets

188
00:06:43,120 --> 00:06:44,880
um and there's a little bit of guidance

189
00:06:44,880 --> 00:06:46,319
about where to get the random octets but

190
00:06:46,319 --> 00:06:48,639
there's been discussion on the list

191
00:06:48,639 --> 00:06:50,080
about whether we should revert this and

192
00:06:50,080 --> 00:06:51,199
we have a couple different merge

193
00:06:51,199 --> 00:06:52,960
requests that actually offer different

194
00:06:52,960 --> 00:06:53,919
ways

195
00:06:53,919 --> 00:06:56,000
uh to handle it

196
00:06:56,000 --> 00:06:57,680
so i wonder whether anybody wants to

197
00:06:57,680 --> 00:06:58,960
speak to this

198
00:06:58,960 --> 00:07:01,960
um

199
00:07:03,120 --> 00:07:04,400
either

200
00:07:04,400 --> 00:07:06,080
in the chat or

201
00:07:06,080 --> 00:07:07,280
um

202
00:07:07,280 --> 00:07:08,800
or here at the mic

203
00:07:08,800 --> 00:07:10,720
if you nobody's been in the queue yet to

204
00:07:10,720 --> 00:07:12,479
get in the queue if you're in the room

205
00:07:12,479 --> 00:07:16,639
please use the uh meet echo light thing

206
00:07:16,639 --> 00:07:19,280
and click that ray's hand so quinn

207
00:07:19,280 --> 00:07:21,840
is remote the mic is low so

208
00:07:21,840 --> 00:07:22,960
okay

209
00:07:22,960 --> 00:07:24,639
sorry about that

210
00:07:24,639 --> 00:07:26,560
uh can you hear him is this better

211
00:07:26,560 --> 00:07:27,599
quinn

212
00:07:27,599 --> 00:07:31,199
i see php in the queue for padding

213
00:07:31,199 --> 00:07:34,000
he's here local

214
00:07:37,919 --> 00:07:39,520
well basically

215
00:07:39,520 --> 00:07:41,199
if you can i think the simplest way of

216
00:07:41,199 --> 00:07:43,759
disposing on any item is

217
00:07:43,759 --> 00:07:46,639
if you can find a security reason

218
00:07:46,639 --> 00:07:48,960
if you put zeros in well you've got some

219
00:07:48,960 --> 00:07:50,800
known plain text

220
00:07:50,800 --> 00:07:53,440
and that gives an attacker some leverage

221
00:07:53,440 --> 00:07:55,919
that they otherwise wouldn't have

222
00:07:55,919 --> 00:07:59,039
if you put random in then you have

223
00:07:59,039 --> 00:08:01,599
created a covert channel

224
00:08:01,599 --> 00:08:04,160
that can and will be exploited so i

225
00:08:04,160 --> 00:08:08,160
don't think that so a rigid construction

226
00:08:08,160 --> 00:08:10,560
based on something that is

227
00:08:10,560 --> 00:08:12,639
to do with either the the

228
00:08:12,639 --> 00:08:14,639
that

229
00:08:14,639 --> 00:08:16,400
is to do with uh

230
00:08:16,400 --> 00:08:18,479
something generated from the key

231
00:08:18,479 --> 00:08:20,800
but through a different kdf or whatever

232
00:08:20,800 --> 00:08:23,280
seems to be need to be the best solution

233
00:08:23,280 --> 00:08:24,319
because

234
00:08:24,319 --> 00:08:26,240
then you don't give chosen plain gnome

235
00:08:26,240 --> 00:08:27,680
plain text

236
00:08:27,680 --> 00:08:29,520
and you don't give

237
00:08:29,520 --> 00:08:32,400
a covert channel

238
00:08:32,958 --> 00:08:34,240
thanks phil

239
00:08:34,240 --> 00:08:36,159
does anybody else want to speak to some

240
00:08:36,159 --> 00:08:39,880
of the trade-offs there

241
00:08:40,399 --> 00:08:42,799
sorry about this and i believe this was

242
00:08:42,799 --> 00:08:44,159
brought up on the mailing list as well

243
00:08:44,159 --> 00:08:45,600
and people were a bit worried about the

244
00:08:45,600 --> 00:08:47,680
resources it would take to do this new

245
00:08:47,680 --> 00:08:50,240
hkdf or whatever to to get this random

246
00:08:50,240 --> 00:08:53,240
data

247
00:08:54,160 --> 00:08:55,519
yeah and i think that for this issue i

248
00:08:55,519 --> 00:08:57,040
think we had

249
00:08:57,040 --> 00:08:58,880
two merge requests right

250
00:08:58,880 --> 00:09:00,000
yeah

251
00:09:00,000 --> 00:09:01,920
do you want to do this screen share or

252
00:09:01,920 --> 00:09:03,440
uh sure let me see if i can figure out

253
00:09:03,440 --> 00:09:05,120
how to do that again

254
00:09:05,120 --> 00:09:07,279
uh i will unshare

255
00:09:07,279 --> 00:09:09,200
screen share this so i think for this

256
00:09:09,200 --> 00:09:10,480
one we had two merge requests one

257
00:09:10,480 --> 00:09:12,959
basically was saying here's this

258
00:09:12,959 --> 00:09:15,279
deterministic construction

259
00:09:15,279 --> 00:09:17,440
uh and i think the other one says i

260
00:09:17,440 --> 00:09:19,920
forget what you ended up saying last

261
00:09:19,920 --> 00:09:21,760
one of them says it should be it must be

262
00:09:21,760 --> 00:09:23,040
all zeros

263
00:09:23,040 --> 00:09:24,399
and the other one says it should be this

264
00:09:24,399 --> 00:09:27,920
determin it should be a uh

265
00:09:27,920 --> 00:09:32,160
so 204 is all zeros 203 is deterministic

266
00:09:32,160 --> 00:09:34,160
along those lines

267
00:09:34,160 --> 00:09:36,560
yeah i was meaning deterministic not a

268
00:09:36,560 --> 00:09:38,640
hard yeah yeah

269
00:09:38,640 --> 00:09:40,720
um but then there is the the 203 there

270
00:09:40,720 --> 00:09:42,320
are two variants of deterministic one of

271
00:09:42,320 --> 00:09:44,240
which was always the same deterministic

272
00:09:44,240 --> 00:09:46,000
data but i think that goes back to phil

273
00:09:46,000 --> 00:09:48,880
your your known plain text argument

274
00:09:48,880 --> 00:09:51,839
yes

275
00:09:57,519 --> 00:09:59,680
you only need to change the data really

276
00:09:59,680 --> 00:10:03,040
slightly to take away the

277
00:10:03,040 --> 00:10:05,200
uh you know

278
00:10:05,200 --> 00:10:07,440
to take away the leverage

279
00:10:07,440 --> 00:10:09,680
yeah

280
00:10:10,480 --> 00:10:11,920
and i think the other point that came up

281
00:10:11,920 --> 00:10:13,600
in this discussion was

282
00:10:13,600 --> 00:10:17,279
with the deterministic one you could ask

283
00:10:17,279 --> 00:10:18,959
implementations to try and verify that

284
00:10:18,959 --> 00:10:21,680
it was done correctly or not bother

285
00:10:21,680 --> 00:10:23,920
um so that was the other kind of flavor

286
00:10:23,920 --> 00:10:26,000
of this

287
00:10:26,000 --> 00:10:27,519
right so the receiving implementation

288
00:10:27,519 --> 00:10:29,279
needs to know what to do and i guess we

289
00:10:29,279 --> 00:10:31,120
have this question of what what would a

290
00:10:31,120 --> 00:10:32,640
receiving implementation do when

291
00:10:32,640 --> 00:10:33,839
receiving one of these things that's

292
00:10:33,839 --> 00:10:36,800
supposed to be deterministic but isn't

293
00:10:36,800 --> 00:10:38,079
um

294
00:10:38,079 --> 00:10:40,720
like should it reject the packet stream

295
00:10:40,720 --> 00:10:42,160
uh

296
00:10:42,160 --> 00:10:43,360
do we

297
00:10:43,360 --> 00:10:45,040
what are we what kind of brittleness are

298
00:10:45,040 --> 00:10:46,800
we willing to incorporate in order to

299
00:10:46,800 --> 00:10:48,800
defend against this particular covert

300
00:10:48,800 --> 00:10:51,199
channel

301
00:10:54,480 --> 00:10:56,000
so i guess our

302
00:10:56,000 --> 00:10:58,320
idea here was that we'd let people talk

303
00:10:58,320 --> 00:11:00,720
to these issues to till the you know

304
00:11:00,720 --> 00:11:02,800
they're happy and then probably try and

305
00:11:02,800 --> 00:11:04,079
get a sense

306
00:11:04,079 --> 00:11:06,320
of the participants kind of opinions via

307
00:11:06,320 --> 00:11:08,720
a poll

308
00:11:08,959 --> 00:11:10,240
so i guess i should try and figure out

309
00:11:10,240 --> 00:11:13,360
how a polling tool works um

310
00:11:13,360 --> 00:11:14,399
i think for this one probably the

311
00:11:14,399 --> 00:11:16,560
easiest thing to ask is

312
00:11:16,560 --> 00:11:18,560
should we have

313
00:11:18,560 --> 00:11:19,600
zero

314
00:11:19,600 --> 00:11:22,079
uh i think the random padding is

315
00:11:22,079 --> 00:11:24,079
nobody's that keen on random right which

316
00:11:24,079 --> 00:11:26,240
is what the current draft says

317
00:11:26,240 --> 00:11:28,480
i mean i think i think obviously some

318
00:11:28,480 --> 00:11:29,760
people were or wouldn't admit it into

319
00:11:29,760 --> 00:11:31,360
the current draft but just from the

320
00:11:31,360 --> 00:11:32,959
discussion i mean if somebody wants to

321
00:11:32,959 --> 00:11:34,880
speak to the keeping the thing as is

322
00:11:34,880 --> 00:11:36,240
that would be good but maybe maybe the

323
00:11:36,240 --> 00:11:37,920
question that you raise is a better one

324
00:11:37,920 --> 00:11:39,920
to put as a poll right sorry justice

325
00:11:39,920 --> 00:11:43,279
says he's keen on random okay

326
00:11:43,279 --> 00:11:44,399
um

327
00:11:44,399 --> 00:11:45,839
well maybe the question that you pointed

328
00:11:45,839 --> 00:11:47,200
out is is a better one to add to the

329
00:11:47,200 --> 00:11:50,079
poll which would be um oh i see aaron in

330
00:11:50,079 --> 00:11:53,440
the queue erin do you want to speak

331
00:11:53,440 --> 00:11:57,120
um yeah i also think that um like there

332
00:11:57,120 --> 00:11:59,760
are many many ways on open pgp to put in

333
00:11:59,760 --> 00:12:02,240
some side channel like to put in some

334
00:12:02,240 --> 00:12:04,959
cover data just adding a packet that is

335
00:12:04,959 --> 00:12:07,920
an unknown version or an experimental

336
00:12:07,920 --> 00:12:10,399
and and therefore adding random i don't

337
00:12:10,399 --> 00:12:12,560
think is that much of adding like it's

338
00:12:12,560 --> 00:12:14,639
not adding that much to the copper

339
00:12:14,639 --> 00:12:17,760
channel in openphp

340
00:12:19,120 --> 00:12:21,600
so it seems like one one question is do

341
00:12:21,600 --> 00:12:23,680
we want

342
00:12:23,680 --> 00:12:26,720
uh receiving implementations to reject

343
00:12:26,720 --> 00:12:28,480
padding packets that are considered to

344
00:12:28,480 --> 00:12:30,320
be malformed

345
00:12:30,320 --> 00:12:32,720
right because that actually would govern

346
00:12:32,720 --> 00:12:35,040
whether what like are we are we making a

347
00:12:35,040 --> 00:12:36,959
requirement about what what goes in it

348
00:12:36,959 --> 00:12:39,760
or not and we can make recommendations

349
00:12:39,760 --> 00:12:41,040
about what to put in it but there is

350
00:12:41,040 --> 00:12:42,320
this there is this underlying question

351
00:12:42,320 --> 00:12:43,839
of if we make a recommendation and it's

352
00:12:43,839 --> 00:12:46,079
not followed

353
00:12:46,079 --> 00:12:48,000
um

354
00:12:48,000 --> 00:12:49,920
are we going to expect the receiving

355
00:12:49,920 --> 00:12:53,040
side to reject it

356
00:12:53,040 --> 00:12:55,519
does that is that a reasonable question

357
00:12:55,519 --> 00:12:57,200
or is that is that queuing up too many

358
00:12:57,200 --> 00:12:58,639
too many polls

359
00:12:58,639 --> 00:13:00,959
yeah

360
00:13:02,000 --> 00:13:03,680
so perhaps i just started a poll with

361
00:13:03,680 --> 00:13:05,440
should we leave it as the draft has it

362
00:13:05,440 --> 00:13:07,600
now as random

363
00:13:07,600 --> 00:13:09,440
random is recommended i think

364
00:13:09,440 --> 00:13:10,880
random is currently recommended and

365
00:13:10,880 --> 00:13:11,920
there's a step there's a separate

366
00:13:11,920 --> 00:13:13,920
discussion about what you know this kind

367
00:13:13,920 --> 00:13:15,360
of randomness is probably the least

368
00:13:15,360 --> 00:13:17,680
important randomness of of

369
00:13:17,680 --> 00:13:19,120
of all of the kinds of random there's a

370
00:13:19,120 --> 00:13:20,399
section about how how do you generate

371
00:13:20,399 --> 00:13:22,160
randomness in open pgp and it calls this

372
00:13:22,160 --> 00:13:24,320
out as a as a distinct flavor from like

373
00:13:24,320 --> 00:13:25,920
key generation randomness okay so i

374
00:13:25,920 --> 00:13:27,360
think what i'll do

375
00:13:27,360 --> 00:13:29,600
um

376
00:13:30,959 --> 00:13:32,959
daniel's in the queue here

377
00:13:32,959 --> 00:13:35,440
justice is also just justice was saying

378
00:13:35,440 --> 00:13:36,880
that the design team member is often

379
00:13:36,880 --> 00:13:39,839
expressed opinions in the tracker

380
00:13:39,839 --> 00:13:41,360
he feels like repeating them doesn't add

381
00:13:41,360 --> 00:13:42,800
anything new what should we do please

382
00:13:42,800 --> 00:13:44,720
please do repeat opinions justice and

383
00:13:44,720 --> 00:13:47,360
send audio or text as you prefer

384
00:13:47,360 --> 00:13:49,040
um because i think we'd like to have the

385
00:13:49,040 --> 00:13:50,639
discussion until it's on the record for

386
00:13:50,639 --> 00:13:52,320
everyone and

387
00:13:52,320 --> 00:13:55,040
and we can try and resolve it

388
00:13:55,040 --> 00:13:58,399
yeah so i don't actually have uh an

389
00:13:58,399 --> 00:14:02,639
issue with random data in the um panning

390
00:14:02,639 --> 00:14:04,000
packet the only issue i have with the

391
00:14:04,000 --> 00:14:06,240
current text is that it suggests

392
00:14:06,240 --> 00:14:10,160
that the random data protects against

393
00:14:10,160 --> 00:14:12,560
um

394
00:14:12,560 --> 00:14:15,199
higher level compression

395
00:14:15,199 --> 00:14:16,399
uh

396
00:14:16,399 --> 00:14:18,320
disguising the

397
00:14:18,320 --> 00:14:19,839
let's say padding

398
00:14:19,839 --> 00:14:21,120
or sorry

399
00:14:21,120 --> 00:14:24,399
uh negating the padding so

400
00:14:24,399 --> 00:14:25,920
in my opinion

401
00:14:25,920 --> 00:14:27,839
it doesn't because

402
00:14:27,839 --> 00:14:30,560
the compression will compress the

403
00:14:30,560 --> 00:14:33,199
non-random padding anyway and will

404
00:14:33,199 --> 00:14:35,599
reveal

405
00:14:35,680 --> 00:14:38,240
information about the length it has

406
00:14:38,240 --> 00:14:40,399
so i'm

407
00:14:40,399 --> 00:14:43,040
fine with leaving it random but just

408
00:14:43,040 --> 00:14:45,199
removing that

409
00:14:45,199 --> 00:14:49,439
uh text but yeah

410
00:14:50,079 --> 00:14:51,680
okay so so

411
00:14:51,680 --> 00:14:53,920
have a tougher question

412
00:14:53,920 --> 00:14:55,600
yeah okay so what i'm going to do is i

413
00:14:55,600 --> 00:14:57,279
want to try one of these polls because

414
00:14:57,279 --> 00:14:58,399
you know some of these issues are things

415
00:14:58,399 --> 00:15:00,079
where people have opinions but don't

416
00:15:00,079 --> 00:15:02,000
necessarily feel hugely strongly so i'm

417
00:15:02,000 --> 00:15:04,000
going to ask do we keep the draft 006

418
00:15:04,000 --> 00:15:06,320
random padding scheme

419
00:15:06,320 --> 00:15:09,120
and so i'll start the session

420
00:15:09,120 --> 00:15:10,639
if you think we should keep it please

421
00:15:10,639 --> 00:15:12,639
click the raise hand button if you think

422
00:15:12,639 --> 00:15:15,040
we should change this then please click

423
00:15:15,040 --> 00:15:19,160
the do not raise hand button

424
00:15:27,120 --> 00:15:31,040
and we have 36 people in the room so

425
00:15:31,040 --> 00:15:33,279
nine hands being raised or not

426
00:15:33,279 --> 00:15:36,240
eight eight and one

427
00:15:38,639 --> 00:15:40,800
okay it's not changing so um just for

428
00:15:40,800 --> 00:15:42,000
the record there for the audio record

429
00:15:42,000 --> 00:15:43,759
there we got eight hands raised and one

430
00:15:43,759 --> 00:15:45,759
hand not raised

431
00:15:45,759 --> 00:15:47,279
which i think indicates that we probably

432
00:15:47,279 --> 00:15:48,560
should go back to

433
00:15:48,560 --> 00:15:50,560
confirm on the list that we

434
00:15:50,560 --> 00:15:52,000
it seems like keeping the the current

435
00:15:52,000 --> 00:15:55,519
scheme is what people want

436
00:15:55,519 --> 00:15:57,519
okay okay

437
00:15:57,519 --> 00:15:59,360
okay so pkg is gonna i'm gonna put that

438
00:15:59,360 --> 00:16:02,160
in the notes um in the issue yeah let me

439
00:16:02,160 --> 00:16:04,480
just copy the

440
00:16:04,480 --> 00:16:07,600
specific poll on eight to one

441
00:16:07,600 --> 00:16:09,839
um

442
00:16:10,399 --> 00:16:12,800
so uh let's move on to the next

443
00:16:12,800 --> 00:16:15,040
uh the next issue here how do i get rid

444
00:16:15,040 --> 00:16:17,120
of this

445
00:16:17,120 --> 00:16:18,959
i think i dismissed it no i don't know

446
00:16:18,959 --> 00:16:20,399
it's up there

447
00:16:20,399 --> 00:16:23,920
uh okay so the next issue here

448
00:16:23,920 --> 00:16:25,920
um

449
00:16:25,920 --> 00:16:28,479
still up there

450
00:16:30,160 --> 00:16:31,759
oh wow this is

451
00:16:31,759 --> 00:16:33,839
this uh the switching between the slides

452
00:16:33,839 --> 00:16:36,079
and the

453
00:16:47,120 --> 00:16:49,040
okay i found the button

454
00:16:49,040 --> 00:16:53,519
i'm done okay great so that's that's our

455
00:16:53,759 --> 00:16:56,959
okay so this one i think well

456
00:16:56,959 --> 00:16:59,120
yeah actually

457
00:16:59,120 --> 00:17:00,320
i think i actually understand this one

458
00:17:00,320 --> 00:17:02,079
that's that's that's helpful so this one

459
00:17:02,079 --> 00:17:04,799
here when we're using aad algorithms and

460
00:17:04,799 --> 00:17:07,599
you decrypt the issue is what's how to

461
00:17:07,599 --> 00:17:09,520
handle that we have some chunking so

462
00:17:09,520 --> 00:17:10,640
that

463
00:17:10,640 --> 00:17:11,919
these decrypt failures don't necessarily

464
00:17:11,919 --> 00:17:14,880
apply to an overall message

465
00:17:14,880 --> 00:17:17,039
and currently i think the text in a few

466
00:17:17,039 --> 00:17:18,880
places says that if you get an aea

467
00:17:18,880 --> 00:17:21,599
decryption error um

468
00:17:21,599 --> 00:17:22,480
there's a

469
00:17:22,480 --> 00:17:24,240
should fail kind of statements and i

470
00:17:24,240 --> 00:17:25,919
think the suggestion for this issue was

471
00:17:25,919 --> 00:17:28,160
to change those to must fail instead of

472
00:17:28,160 --> 00:17:30,400
should

473
00:17:31,440 --> 00:17:34,240
so again we'd like to get a sense of

474
00:17:34,240 --> 00:17:35,520
i don't think we have a marriage request

475
00:17:35,520 --> 00:17:36,559
for this order

476
00:17:36,559 --> 00:17:38,240
uh we do okay so that there's a merge

477
00:17:38,240 --> 00:17:39,280
request for this one you can if you

478
00:17:39,280 --> 00:17:40,799
click through the links you'll find the

479
00:17:40,799 --> 00:17:43,679
suggested change

480
00:17:44,240 --> 00:17:45,280
so

481
00:17:45,280 --> 00:17:46,480
do we want to offer i just realized

482
00:17:46,480 --> 00:17:48,480
there was one person who was sort of odd

483
00:17:48,480 --> 00:17:50,640
odd person out whose hand was do not

484
00:17:50,640 --> 00:17:52,559
keep and do we want to on the last poll

485
00:17:52,559 --> 00:17:54,160
do we want to ask that person if they

486
00:17:54,160 --> 00:17:56,480
want to

487
00:17:58,480 --> 00:18:00,320
okay okay your and your but your opinion

488
00:18:00,320 --> 00:18:01,679
was that we you would be okay with

489
00:18:01,679 --> 00:18:02,720
keeping it if we remove the

490
00:18:02,720 --> 00:18:04,160
justification

491
00:18:04,160 --> 00:18:06,160
got it okay okay that was that was danny

492
00:18:06,160 --> 00:18:08,480
hogan's record um

493
00:18:08,480 --> 00:18:10,080
yeah that was a good thought

494
00:18:10,080 --> 00:18:13,280
okay so for this one um

495
00:18:13,280 --> 00:18:15,200
there was some discussion i think mostly

496
00:18:15,200 --> 00:18:16,799
it was kind of in the

497
00:18:16,799 --> 00:18:18,240
in the affirmative like saying that that

498
00:18:18,240 --> 00:18:20,720
change would be a good one i think

499
00:18:20,720 --> 00:18:22,720
so

500
00:18:22,720 --> 00:18:24,320
would anybody like to speak to this

501
00:18:24,320 --> 00:18:28,520
rather remotely or locally

502
00:18:29,520 --> 00:18:30,640
if not i think we'll just do another

503
00:18:30,640 --> 00:18:32,400
poll say make the change or don't make

504
00:18:32,400 --> 00:18:33,440
the change

505
00:18:33,440 --> 00:18:37,080
just give people a second

506
00:18:46,720 --> 00:18:48,240
what's the merge request number for that

507
00:18:48,240 --> 00:18:52,559
one do you know uh yeah that uh

508
00:18:53,120 --> 00:18:56,000
oh it's actually not linked sorry

509
00:18:56,000 --> 00:18:57,600
it's actually not linked i'll pull it up

510
00:18:57,600 --> 00:18:59,918
okay

511
00:19:02,320 --> 00:19:05,320
206.

512
00:19:10,559 --> 00:19:11,840
and i can put that on the screen if i

513
00:19:11,840 --> 00:19:15,360
would help people should i do that

514
00:19:18,880 --> 00:19:20,480
well

515
00:19:20,480 --> 00:19:21,200
i think this one's kind of

516
00:19:21,200 --> 00:19:22,559
straightforward enough just a poll i

517
00:19:22,559 --> 00:19:24,960
suspect

518
00:19:25,039 --> 00:19:26,880
okay so i started poll saying should we

519
00:19:26,880 --> 00:19:29,200
make this change

520
00:19:29,200 --> 00:19:30,240
uh

521
00:19:30,240 --> 00:19:31,600
to change the kind of showed statements

522
00:19:31,600 --> 00:19:32,880
about how yeah the encryption failure is

523
00:19:32,880 --> 00:19:34,799
into most segments

524
00:19:34,799 --> 00:19:36,160
if you think we should make the change

525
00:19:36,160 --> 00:19:38,720
please click the raise hand button

526
00:19:38,720 --> 00:19:40,240
if you think we should not

527
00:19:40,240 --> 00:19:43,120
please click the other one

528
00:19:47,039 --> 00:19:50,679
that's looking pretty clear

529
00:19:57,520 --> 00:19:59,280
nobody wants to speak to it

530
00:19:59,280 --> 00:20:01,760
everybody seems to be in agreement

531
00:20:01,760 --> 00:20:03,520
okay so that's 15 people raised their

532
00:20:03,520 --> 00:20:05,440
hands zero people did not raise their

533
00:20:05,440 --> 00:20:06,640
hands

534
00:20:06,640 --> 00:20:09,360
so i guess that's

535
00:20:12,640 --> 00:20:15,520
not sure if i like this

536
00:20:16,400 --> 00:20:17,919
how do we get rid of the thing

537
00:20:17,919 --> 00:20:21,840
you go back to this yeah

538
00:20:22,320 --> 00:20:24,000
sorry

539
00:20:24,000 --> 00:20:25,760
and then do that yeah reopen the voting

540
00:20:25,760 --> 00:20:28,880
mode and then the red button ah okay

541
00:20:28,880 --> 00:20:30,559
okay

542
00:20:30,559 --> 00:20:32,880
great thank you

543
00:20:32,880 --> 00:20:35,760
next one uh yeah

544
00:20:35,760 --> 00:20:37,120
um

545
00:20:37,120 --> 00:20:39,760
sorry we're we're at the presentation

546
00:20:39,760 --> 00:20:41,520
here

547
00:20:41,520 --> 00:20:43,200
it's still displaying there there we go

548
00:20:43,200 --> 00:20:45,440
okay

549
00:20:45,760 --> 00:20:47,360
okay

550
00:20:47,360 --> 00:20:49,760
gcm

551
00:20:49,760 --> 00:20:52,159
so this one had a bunch of discussion uh

552
00:20:52,159 --> 00:20:54,240
i think good points are raised on both

553
00:20:54,240 --> 00:20:57,360
for inclusion and non-inclusion

554
00:20:57,360 --> 00:20:59,280
i won't really try and summarize it but

555
00:20:59,280 --> 00:21:00,960
the issue here is whether the current

556
00:21:00,960 --> 00:21:02,480
draft includes

557
00:21:02,480 --> 00:21:05,120
gcm is one of the aad

558
00:21:05,120 --> 00:21:07,840
methods that's defined

559
00:21:07,840 --> 00:21:09,280
the

560
00:21:09,280 --> 00:21:10,720
issue is that somebody's basically

561
00:21:10,720 --> 00:21:14,320
saying we should not include gcm

562
00:21:14,480 --> 00:21:16,400
because we have another aad mechanism

563
00:21:16,400 --> 00:21:17,679
with ocb

564
00:21:17,679 --> 00:21:20,000
we actually have two we have ocb and eax

565
00:21:20,000 --> 00:21:22,159
sorry we have two others yeah so

566
00:21:22,159 --> 00:21:23,280
um

567
00:21:23,280 --> 00:21:24,799
and

568
00:21:24,799 --> 00:21:26,000
again there are arguments for and

569
00:21:26,000 --> 00:21:28,080
against inclusion of gcm

570
00:21:28,080 --> 00:21:29,679
and i think another salient point is

571
00:21:29,679 --> 00:21:31,760
that currently with the specification

572
00:21:31,760 --> 00:21:34,400
required iana rules if we do not include

573
00:21:34,400 --> 00:21:36,240
gcm somebody else can come along and add

574
00:21:36,240 --> 00:21:37,280
it next week

575
00:21:37,280 --> 00:21:41,520
as soon as we're done um so

576
00:21:41,679 --> 00:21:43,280
it seems like the opinions are kind of

577
00:21:43,280 --> 00:21:44,880
all over the place but let's let's give

578
00:21:44,880 --> 00:21:46,640
people a chance to speak to should we

579
00:21:46,640 --> 00:21:49,280
include gcm

580
00:21:49,280 --> 00:21:53,360
in this specification now or not

581
00:21:54,880 --> 00:21:56,320
and yes i know that we've talked about

582
00:21:56,320 --> 00:21:57,600
this on the main list i know we talked

583
00:21:57,600 --> 00:22:01,039
about some of the tracker there's kun

584
00:22:03,039 --> 00:22:05,600
quinn go ahead

585
00:22:08,320 --> 00:22:09,520
i think you have to enable your own

586
00:22:09,520 --> 00:22:13,080
audio quinn

587
00:22:20,240 --> 00:22:23,240
uh

588
00:22:35,760 --> 00:22:37,760
if you've got ocb it's a much stronger

589
00:22:37,760 --> 00:22:38,640
incr

590
00:22:38,640 --> 00:22:40,240
construction

591
00:22:40,240 --> 00:22:42,480
now yes somebody can add it to the ion

592
00:22:42,480 --> 00:22:43,120
or

593
00:22:43,120 --> 00:22:46,080
add gcm to the iona registry

594
00:22:46,080 --> 00:22:49,520
but if i'm going to implement pgp

595
00:22:49,520 --> 00:22:51,679
i'm going to implement the algorithms in

596
00:22:51,679 --> 00:22:54,640
the draft and i'm not going to accept

597
00:22:54,640 --> 00:22:57,840
expect to be able to send mail

598
00:22:57,840 --> 00:23:00,559
in a scheme that is not in the draft so

599
00:23:00,559 --> 00:23:02,400
not putting it sorry

600
00:23:02,400 --> 00:23:03,280
if

601
00:23:03,280 --> 00:23:06,400
gcm is not in the rfc it will have a

602
00:23:06,400 --> 00:23:07,679
material

603
00:23:07,679 --> 00:23:10,960
impact on adoption

604
00:23:10,960 --> 00:23:13,039
and it will encourage people to use ocb

605
00:23:13,039 --> 00:23:14,960
which is a stronger construct which we

606
00:23:14,960 --> 00:23:18,240
all should be using so uh thanks for the

607
00:23:18,240 --> 00:23:20,400
reminder for the clarification ocb in

608
00:23:20,400 --> 00:23:23,520
the draft is flagged as must implement

609
00:23:23,520 --> 00:23:25,919
and eax is not flagged as must implement

610
00:23:25,919 --> 00:23:29,840
and gcm uh is also flagged as

611
00:23:29,840 --> 00:23:32,480
is is not mandatory to implement yeah i

612
00:23:32,480 --> 00:23:33,440
hear what you're saying about the

613
00:23:33,440 --> 00:23:35,360
presence in the in the in the draft but

614
00:23:35,360 --> 00:23:36,799
there is a

615
00:23:36,799 --> 00:23:38,880
there is a notable distinction between

616
00:23:38,880 --> 00:23:40,400
the modes and there is an advertising

617
00:23:40,400 --> 00:23:41,760
mechanism

618
00:23:41,760 --> 00:23:43,760
that where you can indicate what you

619
00:23:43,760 --> 00:23:46,960
what what aed algorithms uh you support

620
00:23:46,960 --> 00:23:49,039
with what other ciphers so

621
00:23:49,039 --> 00:23:52,159
you won't accidentally encrypt using gcm

622
00:23:52,159 --> 00:23:53,679
uh to somebody who doesn't support it

623
00:23:53,679 --> 00:23:56,400
and everybody has to support ocb anyway

624
00:23:56,400 --> 00:23:58,480
so that that's that's the that's the the

625
00:23:58,480 --> 00:23:59,919
baseline part of the interop that the

626
00:23:59,919 --> 00:24:01,840
current draft tries to do whether

627
00:24:01,840 --> 00:24:03,520
whether that's right or not or whether

628
00:24:03,520 --> 00:24:04,720
that's useful

629
00:24:04,720 --> 00:24:05,840
so but it sounds to me like you're

630
00:24:05,840 --> 00:24:08,080
speaking against including gcm

631
00:24:08,080 --> 00:24:10,159
well i i think you can make a case i

632
00:24:10,159 --> 00:24:12,640
mean gcm is a stream cycle why turn a

633
00:24:12,640 --> 00:24:16,840
block cypher into a stream site

634
00:24:22,880 --> 00:24:25,760
yeah quentin do you want to go

635
00:24:30,840 --> 00:24:33,279
ahead quinn you have to turn on your own

636
00:24:33,279 --> 00:24:35,360
audio here i'm not sure if that's if

637
00:24:35,360 --> 00:24:36,640
that's not working for you or if you

638
00:24:36,640 --> 00:24:37,919
want to put your what you're saying in

639
00:24:37,919 --> 00:24:38,880
the chat

640
00:24:38,880 --> 00:24:43,240
we can relay it to the mic as well

641
00:24:46,400 --> 00:24:49,039
enabling your audio is the the

642
00:24:49,039 --> 00:24:50,799
it's a button in the

643
00:24:50,799 --> 00:24:52,400
um

644
00:24:52,400 --> 00:24:56,760
it's the microphone button upper left

645
00:25:05,120 --> 00:25:06,799
are you hitting me now

646
00:25:06,799 --> 00:25:09,039
yes we are thank you

647
00:25:09,039 --> 00:25:11,200
thank you i'm sorry about that um so

648
00:25:11,200 --> 00:25:14,159
right now gcm is not a mandatory to

649
00:25:14,159 --> 00:25:15,440
implement

650
00:25:15,440 --> 00:25:18,559
or mandatory to

651
00:25:21,039 --> 00:25:23,760
however if there are people

652
00:25:23,760 --> 00:25:26,880
who want to use tcm

653
00:25:26,880 --> 00:25:29,279
then you know

654
00:25:29,279 --> 00:25:30,000
i

655
00:25:30,000 --> 00:25:32,240
i i don't want to

656
00:25:32,240 --> 00:25:34,799
tell them

657
00:25:36,400 --> 00:25:38,320
um

658
00:25:38,320 --> 00:25:39,279
so

659
00:25:39,279 --> 00:25:44,240
make them to be non-compliant to uh

660
00:25:44,240 --> 00:25:46,640
that they uh they need to

661
00:25:46,640 --> 00:25:48,960
um

662
00:25:50,880 --> 00:25:52,880
you know

663
00:25:52,880 --> 00:25:56,640
really really does that

664
00:25:56,640 --> 00:25:57,679
we should

665
00:25:57,679 --> 00:25:59,120
we should do that that's something that

666
00:25:59,120 --> 00:26:02,000
we should do um

667
00:26:02,000 --> 00:26:04,559
tcm

668
00:26:07,520 --> 00:26:08,320
but

669
00:26:08,320 --> 00:26:09,600
um

670
00:26:09,600 --> 00:26:14,880
it's still good in um in some cases um

671
00:26:14,880 --> 00:26:18,000
so so that's why i think um it's okay to

672
00:26:18,000 --> 00:26:21,520
to make tcm is not a mandatory one

673
00:26:21,520 --> 00:26:24,520
but

674
00:26:37,039 --> 00:26:38,799
thank you quinn do you want to talk to

675
00:26:38,799 --> 00:26:40,080
what you think the reasons are people

676
00:26:40,080 --> 00:26:43,799
might want to use it

677
00:27:09,120 --> 00:27:12,120
uh

678
00:27:40,720 --> 00:27:43,720
so

679
00:27:48,000 --> 00:27:51,000
uh

680
00:28:03,120 --> 00:28:04,960
great thanks guys so yeah that's that

681
00:28:04,960 --> 00:28:06,480
yeah you're clearly asking for

682
00:28:06,480 --> 00:28:07,679
essentially the status quo with the

683
00:28:07,679 --> 00:28:09,279
draft which is to keep it as an option

684
00:28:09,279 --> 00:28:11,039
uh paul

685
00:28:11,039 --> 00:28:11,760
paul

686
00:28:11,760 --> 00:28:13,919
speaking as an individual um i don't

687
00:28:13,919 --> 00:28:16,320
think it matters very much where tcm is

688
00:28:16,320 --> 00:28:18,720
fine pirates in this rfc and another one

689
00:28:18,720 --> 00:28:19,840
the people

690
00:28:19,840 --> 00:28:21,520
that are going to use it are most likely

691
00:28:21,520 --> 00:28:22,720
the people that need to be fips

692
00:28:22,720 --> 00:28:24,320
compliant and they have no other choice

693
00:28:24,320 --> 00:28:27,440
at this point so um those will need to

694
00:28:27,440 --> 00:28:28,960
implement these things anyway whether

695
00:28:28,960 --> 00:28:30,640
they're in a separate document or in

696
00:28:30,640 --> 00:28:33,120
this rfc so i don't think it matters

697
00:28:33,120 --> 00:28:35,760
where it is but but as

698
00:28:35,760 --> 00:28:36,880
as

699
00:28:36,880 --> 00:28:38,720
the people who want fibs have no other

700
00:28:38,720 --> 00:28:40,640
choice at the moment they will they will

701
00:28:40,640 --> 00:28:42,840
do this anyway so

702
00:28:42,840 --> 00:28:45,600
um so so i i did yeah i don't think it's

703
00:28:45,600 --> 00:28:47,360
much of an issue where it is defined so

704
00:28:47,360 --> 00:28:49,919
but i i would personally recommend just

705
00:28:49,919 --> 00:28:52,640
doing it uh with the group so that we

706
00:28:52,640 --> 00:28:55,279
don't get somebody else by their own uh

707
00:28:55,279 --> 00:28:59,279
writing specification for gsm

708
00:28:59,279 --> 00:29:01,760
thanks paul

709
00:29:01,760 --> 00:29:03,760
hi jonathan hamill canadian center for

710
00:29:03,760 --> 00:29:05,360
cyber security so

711
00:29:05,360 --> 00:29:09,120
i i'm in favor of including gcm um

712
00:29:09,120 --> 00:29:11,039
while we don't have requirements for

713
00:29:11,039 --> 00:29:13,120
using uh fips validation it is our

714
00:29:13,120 --> 00:29:14,799
guidance because

715
00:29:14,799 --> 00:29:16,399
because it does provide implementation

716
00:29:16,399 --> 00:29:18,720
validation it's not just a policy

717
00:29:18,720 --> 00:29:20,799
it provides a security benefit that the

718
00:29:20,799 --> 00:29:23,279
implementations can actually be tested

719
00:29:23,279 --> 00:29:25,919
by an independent lab and and that's why

720
00:29:25,919 --> 00:29:29,039
i would like to see it included

721
00:29:31,200 --> 00:29:34,320
daniel howkins uh with openpgp.js

722
00:29:34,320 --> 00:29:36,080
maintainer hats on

723
00:29:36,080 --> 00:29:38,880
uh all acknowledge that our requirements

724
00:29:38,880 --> 00:29:41,919
are uh somewhat peculiar but

725
00:29:41,919 --> 00:29:44,559
the reason we want to use gcm is because

726
00:29:44,559 --> 00:29:47,600
it's in web crypto it's the only aad

727
00:29:47,600 --> 00:29:49,679
mode in in

728
00:29:49,679 --> 00:29:51,679
the web crypto api at the moment which

729
00:29:51,679 --> 00:29:53,360
is you know natively implemented in

730
00:29:53,360 --> 00:29:55,200
browsers and

731
00:29:55,200 --> 00:29:58,240
um gives much better performance so yeah

732
00:29:58,240 --> 00:30:00,240
we'll most likely

733
00:30:00,240 --> 00:30:01,520
implement it

734
00:30:01,520 --> 00:30:04,159
uh whether it's included or not indeed

735
00:30:04,159 --> 00:30:05,279
not for

736
00:30:05,279 --> 00:30:08,399
fips compliance reasons but yeah for for

737
00:30:08,399 --> 00:30:11,360
performance reasons and uh we can either

738
00:30:11,360 --> 00:30:14,960
do that under a private algorithm id

739
00:30:14,960 --> 00:30:16,720
or you know

740
00:30:16,720 --> 00:30:18,559
in a separate document or

741
00:30:18,559 --> 00:30:21,120
in this document

742
00:30:21,120 --> 00:30:22,880
but yeah most likely we'll be

743
00:30:22,880 --> 00:30:25,840
implementing it anyway

744
00:30:27,919 --> 00:30:30,960
or ori steele um from transmute i agree

745
00:30:30,960 --> 00:30:33,120
with everything he just said

746
00:30:33,120 --> 00:30:35,200
i probably would get support for it if

747
00:30:35,200 --> 00:30:36,880
they were to implement it anyway but i

748
00:30:36,880 --> 00:30:37,919
think

749
00:30:37,919 --> 00:30:39,520
for the the reason stated you know

750
00:30:39,520 --> 00:30:42,640
regarding um fips and the expectation um

751
00:30:42,640 --> 00:30:44,240
that i think users will have that there

752
00:30:44,240 --> 00:30:45,679
will be at least one

753
00:30:45,679 --> 00:30:47,520
sort of fips algorithm that would be

754
00:30:47,520 --> 00:30:49,120
available um i think it should be

755
00:30:49,120 --> 00:30:52,559
included thank you

756
00:30:52,880 --> 00:30:54,880
so ben cadek from remote

757
00:30:54,880 --> 00:30:57,279
uh ben kadek uh so

758
00:30:57,279 --> 00:31:00,159
i feel pretty similarly to paul and that

759
00:31:00,159 --> 00:31:02,799
you know this is gonna happen and

760
00:31:02,799 --> 00:31:03,600
you know

761
00:31:03,600 --> 00:31:05,200
having the working group do it sort of

762
00:31:05,200 --> 00:31:07,279
lets us retain a little bit of control

763
00:31:07,279 --> 00:31:08,880
i don't have a particularly strong

764
00:31:08,880 --> 00:31:11,039
preference at all but i have a slight

765
00:31:11,039 --> 00:31:12,640
preference that like the working group

766
00:31:12,640 --> 00:31:13,440
would

767
00:31:13,440 --> 00:31:15,679
specify gcm but in a separate document

768
00:31:15,679 --> 00:31:17,679
but if we keep it in this document i can

769
00:31:17,679 --> 00:31:20,640
certainly live with that i know that

770
00:31:20,640 --> 00:31:21,679
there are definitely going to be some

771
00:31:21,679 --> 00:31:24,159
cases where people need to use gcm

772
00:31:24,159 --> 00:31:26,559
because of the fips requirements

773
00:31:26,559 --> 00:31:29,200
and so having us use our expertise to

774
00:31:29,200 --> 00:31:31,279
make sure it gets well specified and

775
00:31:31,279 --> 00:31:33,760
there aren't any gotchas with it

776
00:31:33,760 --> 00:31:36,480
seems preferred to having some random

777
00:31:36,480 --> 00:31:39,120
person write it up uh in a hurry when

778
00:31:39,120 --> 00:31:41,120
they need it

779
00:31:41,120 --> 00:31:42,799
but again whether that's in this

780
00:31:42,799 --> 00:31:44,480
document or a separate document in the

781
00:31:44,480 --> 00:31:48,240
working group i don't really care

782
00:31:50,960 --> 00:31:53,279
okay thanks ben and

783
00:31:53,279 --> 00:31:54,880
the queue seems to have drained on this

784
00:31:54,880 --> 00:31:56,399
one

785
00:31:56,399 --> 00:31:58,880
okay so how about i'll do a poll saying

786
00:31:58,880 --> 00:32:01,360
keep where the question is keep gcm as

787
00:32:01,360 --> 00:32:03,039
an option as per drop six

788
00:32:03,039 --> 00:32:04,799
yeah and so if you raise your hand

789
00:32:04,799 --> 00:32:08,080
you're arguing to keep it in the draft

790
00:32:08,080 --> 00:32:10,000
and if your hand is down you're arguing

791
00:32:10,000 --> 00:32:12,159
to that it should not be in the draft

792
00:32:12,159 --> 00:32:14,240
whether that means it should not ever

793
00:32:14,240 --> 00:32:16,000
come in which is going to be difficult

794
00:32:16,000 --> 00:32:17,519
to do or whether the working group

795
00:32:17,519 --> 00:32:19,840
should work on it or something else

796
00:32:19,840 --> 00:32:21,519
if you feel that way you can say do not

797
00:32:21,519 --> 00:32:24,760
raise hands

798
00:32:37,200 --> 00:32:38,640
so i figured this one would actually go

799
00:32:38,640 --> 00:32:43,440
all one way or would be 50 50 but uh

800
00:32:43,440 --> 00:32:46,240
this is the better option

801
00:32:51,039 --> 00:32:53,279
okay we seem to have stabilized with the

802
00:32:53,279 --> 00:32:56,640
14 hands raised asking to keep gcm as an

803
00:32:56,640 --> 00:32:58,559
option as per that six 15 hands raised

804
00:32:58,559 --> 00:32:59,760
now

805
00:32:59,760 --> 00:33:02,159
and no hands not raised so that's

806
00:33:02,159 --> 00:33:03,440
i think that indicates preference that

807
00:33:03,440 --> 00:33:05,679
again we'll confirm on the list yep and

808
00:33:05,679 --> 00:33:08,399
i'm noting that in issue 135 as well

809
00:33:08,399 --> 00:33:11,760
great thank you

810
00:33:11,760 --> 00:33:12,640
uh

811
00:33:12,640 --> 00:33:15,360
so yeah we can ask what the zero people

812
00:33:15,360 --> 00:33:17,039
if they want to stand up and

813
00:33:17,039 --> 00:33:18,640
explain why

814
00:33:18,640 --> 00:33:21,519
they are already there

815
00:33:22,320 --> 00:33:25,919
okay okay so uh so issue 136 is uh a

816
00:33:25,919 --> 00:33:28,880
little bit uh trickier uh so

817
00:33:28,880 --> 00:33:31,279
uh the way that we have aead specified

818
00:33:31,279 --> 00:33:32,799
in draft o6

819
00:33:32,799 --> 00:33:35,679
uh uses an hk uses hkdf as a key

820
00:33:35,679 --> 00:33:38,240
derivation function

821
00:33:38,240 --> 00:33:39,519
which

822
00:33:39,519 --> 00:33:43,279
pulls in a chunk of metadata uh

823
00:33:43,279 --> 00:33:45,360
including the choice of mode

824
00:33:45,360 --> 00:33:47,440
so that your key can't accidentally be

825
00:33:47,440 --> 00:33:49,600
reused across modes

826
00:33:49,600 --> 00:33:50,320
if

827
00:33:50,320 --> 00:33:53,519
if someone is tampering with the um

828
00:33:53,519 --> 00:33:55,519
with the construction that you have uh

829
00:33:55,519 --> 00:33:57,279
there's some concern that key reuse

830
00:33:57,279 --> 00:33:59,679
across different modes uh

831
00:33:59,679 --> 00:34:02,320
uh could lead to some kinds of problems

832
00:34:02,320 --> 00:34:03,519
i believe there are maybe other

833
00:34:03,519 --> 00:34:05,600
arguments for why to use the hkdf as

834
00:34:05,600 --> 00:34:08,079
well uh but there the the issue raised

835
00:34:08,079 --> 00:34:10,079
on the list was hkdf isn't is an

836
00:34:10,079 --> 00:34:12,560
unnecessary additional construction

837
00:34:12,560 --> 00:34:14,480
to include here

838
00:34:14,480 --> 00:34:16,480
and maybe it would be simpler if we were

839
00:34:16,480 --> 00:34:18,159
to remove it this is again it's issue

840
00:34:18,159 --> 00:34:20,159
136.

841
00:34:20,159 --> 00:34:22,320
um so i'm wondering whether folks would

842
00:34:22,320 --> 00:34:25,040
be up for speaking to this again

843
00:34:25,040 --> 00:34:26,320
i know that we have had discussion on

844
00:34:26,320 --> 00:34:27,520
the list about it i know we've had

845
00:34:27,520 --> 00:34:29,599
discussion in the data in the

846
00:34:29,599 --> 00:34:32,560
issue tracker about it

847
00:34:33,040 --> 00:34:35,440
but uh

848
00:34:35,440 --> 00:34:36,800
we would like to have that discussion

849
00:34:36,800 --> 00:34:40,399
here in the room if we can anyway so

850
00:34:40,399 --> 00:34:42,560
um now's a good time to

851
00:34:42,560 --> 00:34:44,480
to

852
00:34:44,480 --> 00:34:46,560
state your your opinions and preferences

853
00:34:46,560 --> 00:34:49,280
here

854
00:34:49,280 --> 00:34:53,839
yeah so the most uh specific issue uh

855
00:34:53,839 --> 00:34:56,560
that i know of why this was brought up

856
00:34:56,560 --> 00:35:00,320
was there was a paper where

857
00:35:00,320 --> 00:35:05,119
gcm ciphertexts could be converted into

858
00:35:05,119 --> 00:35:09,280
um for example ascfb ciphertexts

859
00:35:09,280 --> 00:35:11,599
and then if you

860
00:35:11,599 --> 00:35:14,560
have a decryption oracle

861
00:35:14,560 --> 00:35:19,200
for cfp which has happened in the world

862
00:35:19,200 --> 00:35:21,200
then you also have

863
00:35:21,200 --> 00:35:22,000
a

864
00:35:22,000 --> 00:35:23,839
decryption oracle for gcm which

865
00:35:23,839 --> 00:35:26,720
basically means that the the security of

866
00:35:26,720 --> 00:35:28,720
the gcm mode then

867
00:35:28,720 --> 00:35:31,200
gets reduced to

868
00:35:31,200 --> 00:35:34,560
the security of cfb which is

869
00:35:34,560 --> 00:35:35,520
bad

870
00:35:35,520 --> 00:35:40,720
um so i mean in general i think um

871
00:35:40,720 --> 00:35:42,880
not being able to convert

872
00:35:42,880 --> 00:35:45,520
uh keys and ciphertext between different

873
00:35:45,520 --> 00:35:48,079
modes is good but yeah so that was the

874
00:35:48,079 --> 00:35:49,040
most

875
00:35:49,040 --> 00:35:52,240
um specific issue that i know of so if

876
00:35:52,240 --> 00:35:54,960
we're keeping gcm then i think we should

877
00:35:54,960 --> 00:35:58,320
definitely keep this as well

878
00:35:58,320 --> 00:36:00,160
thank you daniel uh juices i see you in

879
00:36:00,160 --> 00:36:02,480
the queue

880
00:36:03,520 --> 00:36:06,160
so i want to stress that this is not

881
00:36:06,160 --> 00:36:09,920
only about gcm this is about preventing

882
00:36:09,920 --> 00:36:12,160
downgrade or cross-grade attacks and

883
00:36:12,160 --> 00:36:15,119
openpgb has suffered from across a

884
00:36:15,119 --> 00:36:17,599
downgrade attack in the past so

885
00:36:17,599 --> 00:36:19,920
this is just a good belt and suspenders

886
00:36:19,920 --> 00:36:21,119
approach and

887
00:36:21,119 --> 00:36:23,839
i'm for keeping

888
00:36:24,839 --> 00:36:27,200
it you're there you says do you want to

889
00:36:27,200 --> 00:36:29,119
mention the other reason i think you

890
00:36:29,119 --> 00:36:32,320
that you've advocated for

891
00:36:32,480 --> 00:36:34,240
yes so

892
00:36:34,240 --> 00:36:36,400
the other kind of feature we snuck in

893
00:36:36,400 --> 00:36:41,440
there is that we have assault in the

894
00:36:41,440 --> 00:36:44,320
site d version to it

895
00:36:44,320 --> 00:36:47,280
and the idea is that if you get an

896
00:36:47,280 --> 00:36:49,040
encrypted message

897
00:36:49,040 --> 00:36:50,560
and you don't have the sender

898
00:36:50,560 --> 00:36:51,920
certificate

899
00:36:51,920 --> 00:36:54,880
that you can reuse the

900
00:36:54,880 --> 00:36:56,720
asymmetric

901
00:36:56,720 --> 00:36:59,200
key material and just change the saw to

902
00:36:59,200 --> 00:37:01,839
derive a new message a new per message

903
00:37:01,839 --> 00:37:02,720
key

904
00:37:02,720 --> 00:37:04,880
from the

905
00:37:04,880 --> 00:37:08,170
from the session key

906
00:37:08,170 --> 00:37:11,040
[Music]

907
00:37:11,040 --> 00:37:13,760
so that makes it uh like a reply it

908
00:37:13,760 --> 00:37:15,599
makes reply functionality when the keys

909
00:37:15,599 --> 00:37:16,880
are not available

910
00:37:16,880 --> 00:37:18,480
uh

911
00:37:18,480 --> 00:37:20,240
a possibility

912
00:37:20,240 --> 00:37:22,470
yes that's correct

913
00:37:22,470 --> 00:37:25,720
[Music]

914
00:37:26,560 --> 00:37:29,200
anybody else want to speak to uh

915
00:37:29,200 --> 00:37:30,240
the

916
00:37:30,240 --> 00:37:32,800
how they what they feel about the hkdf

917
00:37:32,800 --> 00:37:33,400
in this

918
00:37:33,400 --> 00:37:35,359
[Music]

919
00:37:35,359 --> 00:37:37,839
in this context

920
00:37:38,640 --> 00:37:40,240
i guess no i guess nobody else is but i

921
00:37:40,240 --> 00:37:41,520
think the argument against essentially

922
00:37:41,520 --> 00:37:42,720
was that this is

923
00:37:42,720 --> 00:37:44,320
a change and

924
00:37:44,320 --> 00:37:45,920
change before you know change is not

925
00:37:45,920 --> 00:37:47,760
necessarily always good that's i think

926
00:37:47,760 --> 00:37:51,640
the argument was against you

927
00:37:52,480 --> 00:37:53,599
but i don't see anybody else in the

928
00:37:53,599 --> 00:37:55,520
queue uh should we do a poll on this as

929
00:37:55,520 --> 00:37:58,240
well so it's going to say keep hkdf as

930
00:37:58,240 --> 00:38:00,400
per draft six and first question okay

931
00:38:00,400 --> 00:38:02,160
that seem okay folks in the room okay

932
00:38:02,160 --> 00:38:04,079
with with that being the poll text keep

933
00:38:04,079 --> 00:38:06,480
hkdf as per draft oh six

934
00:38:06,480 --> 00:38:10,320
this is hkdf uh in a for aead

935
00:38:10,320 --> 00:38:11,760
i mean there are other places where hkdf

936
00:38:11,760 --> 00:38:13,280
shows up

937
00:38:13,280 --> 00:38:16,520
just uh

938
00:38:19,200 --> 00:38:20,880
okay so our last

939
00:38:20,880 --> 00:38:22,880
the poll will be key page kdf for

940
00:38:22,880 --> 00:38:25,200
binding modes as per draft six

941
00:38:25,200 --> 00:38:27,440
and you can raise your hand if you think

942
00:38:27,440 --> 00:38:28,400
we should

943
00:38:28,400 --> 00:38:30,640
and do not raise your hand if we should

944
00:38:30,640 --> 00:38:32,960
kind of revert that change and again do

945
00:38:32,960 --> 00:38:34,480
not raise your hand means actively

946
00:38:34,480 --> 00:38:36,320
clicking do not raise hand

947
00:38:36,320 --> 00:38:38,480
you can't just sit there

948
00:38:38,480 --> 00:38:41,359
it's always confusing

949
00:38:41,680 --> 00:38:44,078
exactly

950
00:38:45,680 --> 00:38:47,119
to seems we seem to be attracting one

951
00:38:47,119 --> 00:38:48,240
more opinion every time we do this

952
00:38:48,240 --> 00:38:51,200
that's great oh two more

953
00:38:54,560 --> 00:38:57,760
okay so that seems stable and pretty

954
00:38:57,760 --> 00:39:00,240
clear we get 17 hands raised to keep

955
00:39:00,240 --> 00:39:03,040
hkdf for binding as per draft six

956
00:39:03,040 --> 00:39:06,320
and zero hands not raised

957
00:39:06,320 --> 00:39:09,280
and we'll close that hole and go to the

958
00:39:09,280 --> 00:39:11,200
next one all right and i'm putting that

959
00:39:11,200 --> 00:39:12,320
in the

960
00:39:12,320 --> 00:39:15,200
issue tracker as well

961
00:39:15,200 --> 00:39:16,400
thanks folks

962
00:39:16,400 --> 00:39:18,880
uh issue 137

963
00:39:18,880 --> 00:39:20,560
questions about where certificate-wide

964
00:39:20,560 --> 00:39:23,040
parameters live

965
00:39:23,040 --> 00:39:26,480
so certificate-wide parameters meaning

966
00:39:26,480 --> 00:39:28,800
things like your algorithm preferences

967
00:39:28,800 --> 00:39:31,200
uh things like the revocation life the

968
00:39:31,200 --> 00:39:33,119
expiration lifetime of your primary key

969
00:39:33,119 --> 00:39:34,079
which is

970
00:39:34,079 --> 00:39:36,079
by default the expiration of your entire

971
00:39:36,079 --> 00:39:37,440
certificate

972
00:39:37,440 --> 00:39:40,000
um the current draft o6 says those

973
00:39:40,000 --> 00:39:43,760
parameters for v5 keys specifically

974
00:39:43,760 --> 00:39:46,000
those things should live in sub-packets

975
00:39:46,000 --> 00:39:48,079
of a direct key signature on the primary

976
00:39:48,079 --> 00:39:49,359
key

977
00:39:49,359 --> 00:39:50,560
in v4

978
00:39:50,560 --> 00:39:51,920
the tradition has been that those things

979
00:39:51,920 --> 00:39:53,200
could live either in a direct key

980
00:39:53,200 --> 00:39:56,880
signature on the primary key or in the

981
00:39:56,880 --> 00:39:58,560
user id sub

982
00:39:58,560 --> 00:40:01,040
the self signatures over user id sub

983
00:40:01,040 --> 00:40:02,720
packets

984
00:40:02,720 --> 00:40:04,480
so

985
00:40:04,480 --> 00:40:06,640
the current draft says for v5 keys don't

986
00:40:06,640 --> 00:40:09,440
look for those things in the user id

987
00:40:09,440 --> 00:40:11,440
self sigs just look in the direct key

988
00:40:11,440 --> 00:40:12,640
this makes it a little bit more

989
00:40:12,640 --> 00:40:14,800
predictable i think was the rationale

990
00:40:14,800 --> 00:40:16,640
coming from the design team

991
00:40:16,640 --> 00:40:20,240
um and real and a little bit simpler uh

992
00:40:20,240 --> 00:40:21,359
to

993
00:40:21,359 --> 00:40:23,359
consider what's happening

994
00:40:23,359 --> 00:40:27,599
um but it is a change from v4 uh and uh

995
00:40:27,599 --> 00:40:29,280
so it makes v5 certificates look

996
00:40:29,280 --> 00:40:30,640
slightly different it does not actually

997
00:40:30,640 --> 00:40:32,319
the draft does not change v4

998
00:40:32,319 --> 00:40:33,200
certificates if you're going to

999
00:40:33,200 --> 00:40:35,440
implement v4 and v5 you will have to

1000
00:40:35,440 --> 00:40:39,040
have the complexity for dealing with v4

1001
00:40:39,040 --> 00:40:40,960
certificates anyway

1002
00:40:40,960 --> 00:40:43,359
so the question is do we want to allow

1003
00:40:43,359 --> 00:40:45,040
these parameters oh and then i guess the

1004
00:40:45,040 --> 00:40:46,480
other wrinkle to this

1005
00:40:46,480 --> 00:40:48,960
is there's some amount of concern that

1006
00:40:48,960 --> 00:40:51,359
by putting these parameters in the

1007
00:40:51,359 --> 00:40:52,640
primary

1008
00:40:52,640 --> 00:40:54,640
uh in in a direct key signature on the

1009
00:40:54,640 --> 00:40:56,240
primary key

1010
00:40:56,240 --> 00:40:58,880
it might facilitate you uh certificates

1011
00:40:58,880 --> 00:41:01,200
that have no user id because now you

1012
00:41:01,200 --> 00:41:02,880
just you've got the parameters they're

1013
00:41:02,880 --> 00:41:04,480
all there and you can just go ahead and

1014
00:41:04,480 --> 00:41:06,000
leave

1015
00:41:06,000 --> 00:41:08,800
leave the user ids out

1016
00:41:08,800 --> 00:41:11,200
and as from from several generations of

1017
00:41:11,200 --> 00:41:13,599
the draft the user id has been moved

1018
00:41:13,599 --> 00:41:15,280
from must have one

1019
00:41:15,280 --> 00:41:16,960
to

1020
00:41:16,960 --> 00:41:18,640
zero or more user id so there's some

1021
00:41:18,640 --> 00:41:21,359
concern that this demo this uh provides

1022
00:41:21,359 --> 00:41:24,000
some pressure against user ids or

1023
00:41:24,000 --> 00:41:25,440
pressure towards user id list

1024
00:41:25,440 --> 00:41:27,520
certificates

1025
00:41:27,520 --> 00:41:29,920
so uh so those are the concerns that are

1026
00:41:29,920 --> 00:41:32,079
sort of bundled into this question um i

1027
00:41:32,079 --> 00:41:33,599
wonder whether anybody wants to speak

1028
00:41:33,599 --> 00:41:35,760
for either for the text that's currently

1029
00:41:35,760 --> 00:41:37,760
in the draft for v5 certificates or

1030
00:41:37,760 --> 00:41:42,720
against it um i see ben in the queue

1031
00:41:42,720 --> 00:41:45,040
so i'm not actually speaking for or

1032
00:41:45,040 --> 00:41:47,040
against at the moment but uh asking a

1033
00:41:47,040 --> 00:41:49,760
question in that

1034
00:41:49,760 --> 00:41:51,839
in the v4 setup where you can have

1035
00:41:51,839 --> 00:41:54,160
preferences at a per uid level

1036
00:41:54,160 --> 00:41:55,839
do we have any reason to believe that

1037
00:41:55,839 --> 00:41:57,520
someone was using this for some

1038
00:41:57,520 --> 00:41:59,280
complicated setup where they have you

1039
00:41:59,280 --> 00:42:01,200
know multi-uid key

1040
00:42:01,200 --> 00:42:02,560
but they

1041
00:42:02,560 --> 00:42:05,119
have like different implementations on

1042
00:42:05,119 --> 00:42:07,680
their mail reading setups for

1043
00:42:07,680 --> 00:42:09,119
the mailboxes that receive those

1044
00:42:09,119 --> 00:42:11,520
different uids and somehow they wanted

1045
00:42:11,520 --> 00:42:13,359
to express diversion preferences based

1046
00:42:13,359 --> 00:42:15,280
on the different implementations

1047
00:42:15,280 --> 00:42:17,760
uh that could process things specific to

1048
00:42:17,760 --> 00:42:20,400
that uid as opposed to you know i have

1049
00:42:20,400 --> 00:42:22,960
this key it's in multiple locations

1050
00:42:22,960 --> 00:42:24,640
uh or maybe it's only in one location

1051
00:42:24,640 --> 00:42:26,800
and i just can handle what the key has

1052
00:42:26,800 --> 00:42:28,480
like do we think people use that

1053
00:42:28,480 --> 00:42:31,200
flexibility in that way

1054
00:42:31,200 --> 00:42:33,200
i mean it is explicitly contemplated in

1055
00:42:33,200 --> 00:42:36,400
rfc 4880 that this is you know it says

1056
00:42:36,400 --> 00:42:38,560
like if you look this key up by user id

1057
00:42:38,560 --> 00:42:40,160
atlas

1058
00:42:40,160 --> 00:42:41,839
then use the preferences from user that

1059
00:42:41,839 --> 00:42:43,760
are bound to user id atlas but if you

1060
00:42:43,760 --> 00:42:45,760
look it up by bob then use it for user

1061
00:42:45,760 --> 00:42:47,200
you then

1062
00:42:47,200 --> 00:42:48,800
then use the preferences found on on

1063
00:42:48,800 --> 00:42:51,839
bob's self sig i have not heard anyone

1064
00:42:51,839 --> 00:42:53,760
say that they are using it like for

1065
00:42:53,760 --> 00:42:55,280
themselves

1066
00:42:55,280 --> 00:42:56,400
i don't know that anybody's done a

1067
00:42:56,400 --> 00:42:58,800
survey of keys to see whether some you

1068
00:42:58,800 --> 00:43:00,000
know how many of them have different

1069
00:43:00,000 --> 00:43:02,560
preferences per user id

1070
00:43:02,560 --> 00:43:04,480
and i also don't know

1071
00:43:04,480 --> 00:43:06,000
whether anyone's done any testing to see

1072
00:43:06,000 --> 00:43:07,920
whether implementations that are sending

1073
00:43:07,920 --> 00:43:09,680
actually respect that

1074
00:43:09,680 --> 00:43:11,200
because the

1075
00:43:11,200 --> 00:43:12,480
how do you know whether you're accessing

1076
00:43:12,480 --> 00:43:14,160
the key via alice or bob maybe you've

1077
00:43:14,160 --> 00:43:15,599
done some binding that says when i send

1078
00:43:15,599 --> 00:43:17,680
to alice use this fingerprint or

1079
00:43:17,680 --> 00:43:19,200
something like that and then from the

1080
00:43:19,200 --> 00:43:20,880
openpgp implementation it just sees you

1081
00:43:20,880 --> 00:43:22,880
passing the fingerprint and doesn't know

1082
00:43:22,880 --> 00:43:24,560
that you're looking for it in terms of

1083
00:43:24,560 --> 00:43:26,800
alice so i don't know that we have that

1084
00:43:26,800 --> 00:43:28,800
much data about whether it's been used

1085
00:43:28,800 --> 00:43:30,240
there certainly has been nobody stepping

1086
00:43:30,240 --> 00:43:32,560
up to say if you rip this out i'm going

1087
00:43:32,560 --> 00:43:34,800
to be sad because i have two user ids

1088
00:43:34,800 --> 00:43:37,280
that i expect to have divergent

1089
00:43:37,280 --> 00:43:39,440
implement you know divergent parameters

1090
00:43:39,440 --> 00:43:40,880
and and i want to see those things

1091
00:43:40,880 --> 00:43:42,400
present

1092
00:43:42,400 --> 00:43:44,480
so i i i don't think we have much data

1093
00:43:44,480 --> 00:43:45,760
but we definitely don't have anybody

1094
00:43:45,760 --> 00:43:47,280
standing up publicly and saying i'm

1095
00:43:47,280 --> 00:43:49,040
using this

1096
00:43:49,040 --> 00:43:50,720
that has not you know nobody has

1097
00:43:50,720 --> 00:43:52,960
mentioned that on the list

1098
00:43:52,960 --> 00:43:55,520
okay i guess that puts me slightly

1099
00:43:55,520 --> 00:43:57,839
leaning towards uh

1100
00:43:57,839 --> 00:44:01,760
keeping it just in the direct keysig and

1101
00:44:01,760 --> 00:44:03,599
so i think i think i can imagine uses

1102
00:44:03,599 --> 00:44:06,319
for your id less keys as well but that's

1103
00:44:06,319 --> 00:44:09,200
not quite the question being asked

1104
00:44:09,200 --> 00:44:10,400
yeah so i think on the list in the

1105
00:44:10,400 --> 00:44:12,319
discussion verner was kind of opposed to

1106
00:44:12,319 --> 00:44:13,520
this change

1107
00:44:13,520 --> 00:44:16,319
because he he wanted it always to be a

1108
00:44:16,319 --> 00:44:18,319
user id is that correct

1109
00:44:18,319 --> 00:44:20,560
uh right but we could mandate a user id

1110
00:44:20,560 --> 00:44:22,240
without this change also but that would

1111
00:44:22,240 --> 00:44:24,960
mean one one additional uh signature in

1112
00:44:24,960 --> 00:44:26,160
a certificate because you'd have to have

1113
00:44:26,160 --> 00:44:27,839
the direct key sig for the parameters

1114
00:44:27,839 --> 00:44:29,680
and then the user id

1115
00:44:29,680 --> 00:44:30,960
binding stake

1116
00:44:30,960 --> 00:44:33,200
okay

1117
00:44:33,760 --> 00:44:35,920
so i mean i think the question about

1118
00:44:35,920 --> 00:44:38,160
this is like what are you thinking about

1119
00:44:38,160 --> 00:44:40,480
for you know v7 or v8 because it sort of

1120
00:44:40,480 --> 00:44:42,160
signals a direction you're planning on

1121
00:44:42,160 --> 00:44:43,760
taking like you mentioned

1122
00:44:43,760 --> 00:44:45,440
you know if you have to support v4 and

1123
00:44:45,440 --> 00:44:47,280
v5 you're going to have to account for

1124
00:44:47,280 --> 00:44:50,160
this anyway but in future states where

1125
00:44:50,160 --> 00:44:51,440
you're supporting

1126
00:44:51,440 --> 00:44:55,040
v8 and v7 after you know years of this

1127
00:44:55,040 --> 00:44:56,480
change

1128
00:44:56,480 --> 00:44:58,880
this could be a lot simpler and i am

1129
00:44:58,880 --> 00:45:01,200
also in favor of not requiring you user

1130
00:45:01,200 --> 00:45:02,560
ids so

1131
00:45:02,560 --> 00:45:04,640
that's that's my thoughts

1132
00:45:04,640 --> 00:45:06,879
thanks

1133
00:45:09,680 --> 00:45:12,960
yeah i was also gonna say regarding uh

1134
00:45:12,960 --> 00:45:14,960
user id less

1135
00:45:14,960 --> 00:45:16,800
keys it can also be

1136
00:45:16,800 --> 00:45:19,040
seen as an advantage that this allows

1137
00:45:19,040 --> 00:45:20,160
that

1138
00:45:20,160 --> 00:45:22,640
there are some use cases for

1139
00:45:22,640 --> 00:45:26,480
not having a user id for example if it

1140
00:45:26,480 --> 00:45:28,640
doesn't have anything to do with email

1141
00:45:28,640 --> 00:45:30,000
or if

1142
00:45:30,000 --> 00:45:32,319
let's say you don't want to publish the

1143
00:45:32,319 --> 00:45:35,359
user id in some contexts

1144
00:45:35,359 --> 00:45:37,920
uh on on wkd or

1145
00:45:37,920 --> 00:45:40,480
something like that or if you have a

1146
00:45:40,480 --> 00:45:42,160
catch-all address

1147
00:45:42,160 --> 00:45:45,200
where you want to serve some

1148
00:45:45,200 --> 00:45:47,680
key for many different email addresses

1149
00:45:47,680 --> 00:45:50,000
and you don't know in advance which ones

1150
00:45:50,000 --> 00:45:52,319
you want to serve it for so

1151
00:45:52,319 --> 00:45:54,240
and you don't want to keep the private

1152
00:45:54,240 --> 00:45:57,040
key on the server so you can't generate

1153
00:45:57,040 --> 00:45:59,119
a user id on the fly then i think it's

1154
00:45:59,119 --> 00:46:01,440
useful to be able to serve

1155
00:46:01,440 --> 00:46:05,520
a user id less key so i think that this

1156
00:46:05,520 --> 00:46:06,400
change

1157
00:46:06,400 --> 00:46:10,079
allowing that is a good thing

1158
00:46:10,400 --> 00:46:11,680
thanks daniel

1159
00:46:11,680 --> 00:46:15,359
useless i think you're up

1160
00:46:15,359 --> 00:46:18,720
so i also like user id less certificates

1161
00:46:18,720 --> 00:46:22,880
um but i want to say to ben's question

1162
00:46:22,880 --> 00:46:24,640
if someone has such a use case they are

1163
00:46:24,640 --> 00:46:26,560
better off having two

1164
00:46:26,560 --> 00:46:28,720
distinct certificates

1165
00:46:28,720 --> 00:46:32,160
and the complexity that comes with

1166
00:46:32,160 --> 00:46:33,359
having

1167
00:46:33,359 --> 00:46:35,839
having the preferences on user id

1168
00:46:35,839 --> 00:46:37,760
bindings is huge

1169
00:46:37,760 --> 00:46:40,319
and the behavior of implementations is

1170
00:46:40,319 --> 00:46:42,640
basically unpredictable

1171
00:46:42,640 --> 00:46:45,119
and it also complicates stuff like

1172
00:46:45,119 --> 00:46:47,280
simply adding uh

1173
00:46:47,280 --> 00:46:49,200
adding a user id

1174
00:46:49,200 --> 00:46:51,839
because adding a user id now potentially

1175
00:46:51,839 --> 00:46:53,760
changes the preferences of this

1176
00:46:53,760 --> 00:46:54,880
certificate

1177
00:46:54,880 --> 00:46:58,000
so you better find the

1178
00:46:58,000 --> 00:47:00,400
current

1179
00:47:00,400 --> 00:47:02,800
binding that you think is

1180
00:47:02,800 --> 00:47:05,520
the most recent one or so and use that

1181
00:47:05,520 --> 00:47:06,960
as a template

1182
00:47:06,960 --> 00:47:09,119
and the

1183
00:47:09,119 --> 00:47:11,760
the fact that

1184
00:47:11,760 --> 00:47:13,839
simply a simple operation like adding a

1185
00:47:13,839 --> 00:47:16,640
user id potentially changes the behavior

1186
00:47:16,640 --> 00:47:18,240
of your certificate or the preferences

1187
00:47:18,240 --> 00:47:19,520
is

1188
00:47:19,520 --> 00:47:22,520
insane

1189
00:47:28,160 --> 00:47:30,559
okay i think we seem to have drained the

1190
00:47:30,559 --> 00:47:32,000
queue and this is all the last of the

1191
00:47:32,000 --> 00:47:33,599
poll again and this time it's

1192
00:47:33,599 --> 00:47:35,119
essentially

1193
00:47:35,119 --> 00:47:37,680
as was on the slide uh it's

1194
00:47:37,680 --> 00:47:39,040
certificate right parameters live in a

1195
00:47:39,040 --> 00:47:40,960
direct key sig for v5 and should we keep

1196
00:47:40,960 --> 00:47:43,359
that as per draft six

1197
00:47:43,359 --> 00:47:46,000
so i'll start the session

1198
00:47:46,000 --> 00:47:47,920
if you think we should keep it please

1199
00:47:47,920 --> 00:47:50,480
raise your hand if you think we should

1200
00:47:50,480 --> 00:47:52,319
revert that change please do not raise

1201
00:47:52,319 --> 00:47:55,400
your hand

1202
00:48:07,200 --> 00:48:08,800
we've lost some people from last time

1203
00:48:08,800 --> 00:48:12,319
yeah it's a more complicated question

1204
00:48:12,319 --> 00:48:14,400
being on the fence on is probably more

1205
00:48:14,400 --> 00:48:16,000
reasonable on this one

1206
00:48:16,000 --> 00:48:18,000
so we have a software it seems to

1207
00:48:18,000 --> 00:48:20,160
stabilize that eight hands raised and

1208
00:48:20,160 --> 00:48:22,960
zero hands not raised

1209
00:48:22,960 --> 00:48:25,760
which is an indication but i guess again

1210
00:48:25,760 --> 00:48:27,520
we'll confirm on the list and

1211
00:48:27,520 --> 00:48:29,520
if somebody does turn up with some use

1212
00:48:29,520 --> 00:48:31,680
case as ben kind of indicated then we

1213
00:48:31,680 --> 00:48:33,520
might have to revisit but

1214
00:48:33,520 --> 00:48:35,280
for now we have an opinion that's good

1215
00:48:35,280 --> 00:48:37,920
okay noting that in the issue tracker as

1216
00:48:37,920 --> 00:48:39,040
well

1217
00:48:39,040 --> 00:48:41,359
um

1218
00:48:41,760 --> 00:48:46,319
okay uh so issue 138 um

1219
00:48:46,319 --> 00:48:47,119
in

1220
00:48:47,119 --> 00:48:49,520
so in rfc 4880

1221
00:48:49,520 --> 00:48:50,880
we have a

1222
00:48:50,880 --> 00:48:53,119
sub packet that indicates

1223
00:48:53,119 --> 00:48:55,760
that um

1224
00:48:55,760 --> 00:48:56,720
the

1225
00:48:56,720 --> 00:48:58,640
that the key holder

1226
00:48:58,640 --> 00:49:01,520
is willing to accept revocations

1227
00:49:01,520 --> 00:49:03,440
from a third party this is the

1228
00:49:03,440 --> 00:49:06,000
revocation key sub-packet it contains a

1229
00:49:06,000 --> 00:49:08,480
fingerprint of the

1230
00:49:08,480 --> 00:49:11,440
authorized revoker

1231
00:49:11,440 --> 00:49:13,359
in the draft

1232
00:49:13,359 --> 00:49:16,319
we say that the that this sub packet is

1233
00:49:16,319 --> 00:49:19,040
invalid for a v5 certificate

1234
00:49:19,040 --> 00:49:21,440
um and we describe an alternate

1235
00:49:21,440 --> 00:49:24,160
mechanism for doing a sort of delegated

1236
00:49:24,160 --> 00:49:26,000
revocation which is just to make a

1237
00:49:26,000 --> 00:49:27,839
revocation signature

1238
00:49:27,839 --> 00:49:30,800
and send it encrypted to uh

1239
00:49:30,800 --> 00:49:32,319
to the person that you're willing to

1240
00:49:32,319 --> 00:49:34,720
have be able to revoke your key uh that

1241
00:49:34,720 --> 00:49:36,880
mechanism is is available obviously to

1242
00:49:36,880 --> 00:49:39,119
anyone with v4 keys as well

1243
00:49:39,119 --> 00:49:41,359
um it's not a novel mechanism but it's

1244
00:49:41,359 --> 00:49:42,720
the first time that's been described

1245
00:49:42,720 --> 00:49:45,359
explicitly in the draft

1246
00:49:45,359 --> 00:49:47,280
the question here is whether we want to

1247
00:49:47,280 --> 00:49:51,599
keep this revocation sub-packet

1248
00:49:52,400 --> 00:49:53,680
can you continue forbidding the

1249
00:49:53,680 --> 00:49:56,079
stratification key sub-packet for v5

1250
00:49:56,079 --> 00:49:57,440
keys

1251
00:49:57,440 --> 00:49:59,359
some of the reasons arguing for the

1252
00:49:59,359 --> 00:50:00,480
removal

1253
00:50:00,480 --> 00:50:01,680
are that

1254
00:50:01,680 --> 00:50:02,960
given that it's just a fingerprint you

1255
00:50:02,960 --> 00:50:04,880
might not even have a copy of the key

1256
00:50:04,880 --> 00:50:06,400
and you might see a revocation and not

1257
00:50:06,400 --> 00:50:09,040
know whether it belongs or not

1258
00:50:09,040 --> 00:50:10,559
so there's an issue there's a logistical

1259
00:50:10,559 --> 00:50:12,160
issue

1260
00:50:12,160 --> 00:50:13,920
and secondly the

1261
00:50:13,920 --> 00:50:15,760
implementation support for the

1262
00:50:15,760 --> 00:50:16,960
revocation

1263
00:50:16,960 --> 00:50:18,800
key sub-packet

1264
00:50:18,800 --> 00:50:20,800
may not be as universal and robust so

1265
00:50:20,800 --> 00:50:22,960
relying on it seems a little bit

1266
00:50:22,960 --> 00:50:24,880
dangerous compared to relying on an

1267
00:50:24,880 --> 00:50:27,440
actual revocation signature

1268
00:50:27,440 --> 00:50:29,599
so i think those are but the concern

1269
00:50:29,599 --> 00:50:31,599
here of course is that it's still valid

1270
00:50:31,599 --> 00:50:33,839
for v4 so your implementation that does

1271
00:50:33,839 --> 00:50:36,480
v4 and v5 will have to do both

1272
00:50:36,480 --> 00:50:38,800
um and some people say that this is

1273
00:50:38,800 --> 00:50:40,640
actually a concretely useful thing to

1274
00:50:40,640 --> 00:50:41,520
have

1275
00:50:41,520 --> 00:50:43,040
and they

1276
00:50:43,040 --> 00:50:45,280
they want to have it available for v5

1277
00:50:45,280 --> 00:50:46,720
and they're not comfortable with the

1278
00:50:46,720 --> 00:50:48,559
escrowed keys

1279
00:50:48,559 --> 00:50:50,400
so hopefully people can

1280
00:50:50,400 --> 00:50:52,400
ask clarifying questions if you got them

1281
00:50:52,400 --> 00:50:54,800
or speak in favor of the removal for v5

1282
00:50:54,800 --> 00:50:57,760
or speak in opposition to it uh

1283
00:50:57,760 --> 00:51:00,640
that's a good chance

1284
00:51:01,520 --> 00:51:03,520
if i if i mangled that explanation of

1285
00:51:03,520 --> 00:51:05,119
the of the

1286
00:51:05,119 --> 00:51:06,000
um

1287
00:51:06,000 --> 00:51:07,200
of the problem i hope people will

1288
00:51:07,200 --> 00:51:09,839
correct me as well

1289
00:51:12,079 --> 00:51:13,839
uh ben

1290
00:51:13,839 --> 00:51:16,319
hi ben k duck so

1291
00:51:16,319 --> 00:51:17,280
i can

1292
00:51:17,280 --> 00:51:19,200
imagine a scenario

1293
00:51:19,200 --> 00:51:20,319
where

1294
00:51:20,319 --> 00:51:22,880
the

1295
00:51:22,880 --> 00:51:25,760
escrow revocation signature

1296
00:51:25,760 --> 00:51:27,359
has like a

1297
00:51:27,359 --> 00:51:30,000
setup that is more risky than the

1298
00:51:30,000 --> 00:51:33,280
revocation key sub-packet

1299
00:51:33,280 --> 00:51:35,359
and that would be if the

1300
00:51:35,359 --> 00:51:37,839
receiver of the escrow has some system

1301
00:51:37,839 --> 00:51:40,160
that like does automatic processing on

1302
00:51:40,160 --> 00:51:42,160
messages it receives

1303
00:51:42,160 --> 00:51:44,079
and would like automatically decrypt it

1304
00:51:44,079 --> 00:51:46,079
to put it into some other internal store

1305
00:51:46,079 --> 00:51:48,559
and maybe that other internal store

1306
00:51:48,559 --> 00:51:50,880
also automatically update some things so

1307
00:51:50,880 --> 00:51:53,200
you could get into a scenario where

1308
00:51:53,200 --> 00:51:55,200
the the mere fact that this revocation

1309
00:51:55,200 --> 00:51:56,800
signature exists

1310
00:51:56,800 --> 00:51:58,960
cause it causes it to get uploaded

1311
00:51:58,960 --> 00:52:01,359
prematurely um

1312
00:52:01,359 --> 00:52:02,720
when

1313
00:52:02,720 --> 00:52:04,400
it wasn't intended to be it was just

1314
00:52:04,400 --> 00:52:05,200
like

1315
00:52:05,200 --> 00:52:07,280
i have some data it's associated to this

1316
00:52:07,280 --> 00:52:10,720
key let me publish that type thing

1317
00:52:10,720 --> 00:52:11,760
uh

1318
00:52:11,760 --> 00:52:13,760
and like this is seems pretty unlikely

1319
00:52:13,760 --> 00:52:16,400
to me um and i'm not super concerned

1320
00:52:16,400 --> 00:52:19,280
about it but it is an additional risk of

1321
00:52:19,280 --> 00:52:20,960
this

1322
00:52:20,960 --> 00:52:22,960
proposed mechanism

1323
00:52:22,960 --> 00:52:24,800
that you know i don't know if we've

1324
00:52:24,800 --> 00:52:28,240
talked about before i don't remember

1325
00:52:29,920 --> 00:52:32,480
thanks i think that's that's a that's a

1326
00:52:32,480 --> 00:52:35,119
valid point there um

1327
00:52:35,119 --> 00:52:38,960
the original removal here was uh

1328
00:52:38,960 --> 00:52:41,440
was accompanied by a proposal for a

1329
00:52:41,440 --> 00:52:43,200
replacement for the revocation key sub

1330
00:52:43,200 --> 00:52:44,640
packet that actually included the

1331
00:52:44,640 --> 00:52:47,760
revoking primary key the the the the key

1332
00:52:47,760 --> 00:52:49,280
material of the revoking of the

1333
00:52:49,280 --> 00:52:50,880
delegated revoker

1334
00:52:50,880 --> 00:52:53,200
and that was seen as uh either too

1335
00:52:53,200 --> 00:52:55,440
complicated or out of charter or

1336
00:52:55,440 --> 00:52:56,800
too distracting

1337
00:52:56,800 --> 00:52:59,200
um which is why we're in this in this uh

1338
00:52:59,200 --> 00:53:01,599
removal phase um

1339
00:53:01,599 --> 00:53:03,040
that's where that's why this is it the

1340
00:53:03,040 --> 00:53:05,040
proposal is where it is here

1341
00:53:05,040 --> 00:53:07,280
um that would solve the logistical

1342
00:53:07,280 --> 00:53:08,480
problem

1343
00:53:08,480 --> 00:53:09,760
um

1344
00:53:09,760 --> 00:53:12,160
and it also potentially solves the uh i

1345
00:53:12,160 --> 00:53:13,680
guess a linkage problem use this you

1346
00:53:13,680 --> 00:53:16,319
want to speak to it

1347
00:53:16,640 --> 00:53:18,079
so

1348
00:53:18,079 --> 00:53:20,559
uh i'm in favor of removing that because

1349
00:53:20,559 --> 00:53:22,720
it just acknowledges the fact that

1350
00:53:22,720 --> 00:53:25,920
virtually no implementation supports

1351
00:53:25,920 --> 00:53:28,400
designated revokers and i think that's

1352
00:53:28,400 --> 00:53:30,400
due to the fact that it requires

1353
00:53:30,400 --> 00:53:32,640
non-local reasoning about

1354
00:53:32,640 --> 00:53:36,000
uh multiple certificates

1355
00:53:36,000 --> 00:53:37,760
can you talk to how you look when you

1356
00:53:37,760 --> 00:53:39,119
say uh

1357
00:53:39,119 --> 00:53:40,800
you know you're maintaining the interop

1358
00:53:40,800 --> 00:53:43,440
test suite can you can you speak to

1359
00:53:43,440 --> 00:53:45,520
the support i mean you said it's

1360
00:53:45,520 --> 00:53:47,040
that few implementations support it can

1361
00:53:47,040 --> 00:53:48,160
you describe

1362
00:53:48,160 --> 00:53:49,520
like

1363
00:53:49,520 --> 00:53:51,760
the test that

1364
00:53:51,760 --> 00:53:53,280
i don't think we have a test for that

1365
00:53:53,280 --> 00:53:57,440
sadly um we should have one um

1366
00:53:57,440 --> 00:54:00,640
but we we didn't implement it because it

1367
00:54:00,640 --> 00:54:04,079
it uh it was very complicated so

1368
00:54:04,079 --> 00:54:07,680
uh i i doubt many uh implementations out

1369
00:54:07,680 --> 00:54:10,160
there supported maybe daniel can shine

1370
00:54:10,160 --> 00:54:11,359
some light on

1371
00:54:11,359 --> 00:54:13,200
his implementations

1372
00:54:13,200 --> 00:54:15,520
thank you

1373
00:54:16,640 --> 00:54:20,160
yeah so we also don't support it um

1374
00:54:20,160 --> 00:54:22,720
personally i'm not opposed to the idea

1375
00:54:22,720 --> 00:54:25,440
of including the

1376
00:54:25,440 --> 00:54:28,880
revocation key in the

1377
00:54:28,880 --> 00:54:31,920
in in the subpacket directly

1378
00:54:31,920 --> 00:54:35,040
that would make it much easier to check

1379
00:54:35,040 --> 00:54:38,319
the revocation signature if there is one

1380
00:54:38,319 --> 00:54:43,359
at the cost of a slightly increased

1381
00:54:43,440 --> 00:54:46,640
key size but i think that's reasonable

1382
00:54:46,640 --> 00:54:49,280
so i mean yeah we can

1383
00:54:49,280 --> 00:54:51,760
argue again about whether it's in

1384
00:54:51,760 --> 00:54:53,920
charter but i think if we're

1385
00:54:53,920 --> 00:54:56,319
removing it here which i think is

1386
00:54:56,319 --> 00:54:58,720
reasonable then i also think that adding

1387
00:54:58,720 --> 00:55:01,359
a replacement is reasonable but

1388
00:55:01,359 --> 00:55:04,559
um i'm also fine with just removing it

1389
00:55:04,559 --> 00:55:05,280
and

1390
00:55:05,280 --> 00:55:08,799
without a replacement other than having

1391
00:55:08,799 --> 00:55:09,839
um

1392
00:55:09,839 --> 00:55:10,559
a

1393
00:55:10,559 --> 00:55:13,200
revocation certificate which is already

1394
00:55:13,200 --> 00:55:14,720
a mechanism that

1395
00:55:14,720 --> 00:55:16,640
exists and

1396
00:55:16,640 --> 00:55:17,839
is used

1397
00:55:17,839 --> 00:55:19,839
and we already support it

1398
00:55:19,839 --> 00:55:21,359
also in before

1399
00:55:21,359 --> 00:55:25,920
so i think that's reasonable also

1400
00:55:28,079 --> 00:55:30,079
uh ben kadek again uh thanks everybody

1401
00:55:30,079 --> 00:55:32,240
for the extra discussion i think

1402
00:55:32,240 --> 00:55:34,880
that has sort of solidified my thinking

1403
00:55:34,880 --> 00:55:36,559
that um

1404
00:55:36,559 --> 00:55:39,680
in favor of removing the

1405
00:55:39,680 --> 00:55:41,839
verification key sub packet for the v5

1406
00:55:41,839 --> 00:55:43,839
keys that's just like

1407
00:55:43,839 --> 00:55:45,520
acknowledging the

1408
00:55:45,520 --> 00:55:48,079
deployed reality that you can't rely on

1409
00:55:48,079 --> 00:55:50,160
it to work uh seems like something

1410
00:55:50,160 --> 00:55:51,839
that's really appropriate for us to do

1411
00:55:51,839 --> 00:55:54,400
in the biz document and so i i would

1412
00:55:54,400 --> 00:55:55,839
like to see it that way

1413
00:55:55,839 --> 00:55:57,760
i'm okay doing that even if we don't

1414
00:55:57,760 --> 00:55:59,359
have a replacement mechanism

1415
00:55:59,359 --> 00:56:02,079
specifically i would also be okay as

1416
00:56:02,079 --> 00:56:04,079
daniel is with

1417
00:56:04,079 --> 00:56:06,400
uh having this mechanism for like the

1418
00:56:06,400 --> 00:56:07,839
actual full

1419
00:56:07,839 --> 00:56:09,760
verification key

1420
00:56:09,760 --> 00:56:11,200
in in the key

1421
00:56:11,200 --> 00:56:12,720
because like

1422
00:56:12,720 --> 00:56:14,640
the the size issue is on the issue if

1423
00:56:14,640 --> 00:56:17,200
you if you actually use it and so if you

1424
00:56:17,200 --> 00:56:19,119
don't use it you're not affected but i'm

1425
00:56:19,119 --> 00:56:22,319
also okay just uh removing this and and

1426
00:56:22,319 --> 00:56:26,160
not providing a replacement right away

1427
00:56:27,760 --> 00:56:28,839
thanks

1428
00:56:28,839 --> 00:56:30,559
ben

1429
00:56:30,559 --> 00:56:33,119
i think the queue may be drained on this

1430
00:56:33,119 --> 00:56:35,839
one looks like it shall we do it for

1431
00:56:35,839 --> 00:56:38,480
okay so same as before it's the question

1432
00:56:38,480 --> 00:56:40,960
of the slide so the revocation key so

1433
00:56:40,960 --> 00:56:42,319
packet is disallowed for v5 keys in

1434
00:56:42,319 --> 00:56:44,240
draft six should we keep that if you

1435
00:56:44,240 --> 00:56:46,240
think we should keep it as draft six

1436
00:56:46,240 --> 00:56:47,920
please raise your hand

1437
00:56:47,920 --> 00:56:49,680
if you think we should not then please

1438
00:56:49,680 --> 00:56:53,319
do not raise your hands

1439
00:57:00,799 --> 00:57:04,240
and that seems to have stabilized

1440
00:57:04,240 --> 00:57:07,520
and then as then it moves

1441
00:57:07,760 --> 00:57:10,000
so

1442
00:57:10,799 --> 00:57:12,559
okay so that seems to stabilize that uh

1443
00:57:12,559 --> 00:57:14,960
10 hands are raised to keep the scheme

1444
00:57:14,960 --> 00:57:16,960
in drought six and zero hands are not

1445
00:57:16,960 --> 00:57:18,559
raised

1446
00:57:18,559 --> 00:57:20,960
so that's

1447
00:57:20,960 --> 00:57:22,960
good input

1448
00:57:22,960 --> 00:57:25,680
so the next one is kind of a slightly

1449
00:57:25,680 --> 00:57:27,599
less

1450
00:57:27,599 --> 00:57:28,640
slightly easier one to get your head

1451
00:57:28,640 --> 00:57:30,160
around

1452
00:57:30,160 --> 00:57:32,400
so this is iana so

1453
00:57:32,400 --> 00:57:35,040
in 48.80 there's a whole bunch of viana

1454
00:57:35,040 --> 00:57:36,799
considerations and registries and

1455
00:57:36,799 --> 00:57:38,960
registries that's that's to require ietf

1456
00:57:38,960 --> 00:57:40,960
consensus for change

1457
00:57:40,960 --> 00:57:42,079
and

1458
00:57:42,079 --> 00:57:44,079
the suggestion in most cases is not not

1459
00:57:44,079 --> 00:57:46,720
absolutely everywhere but in most cases

1460
00:57:46,720 --> 00:57:48,559
the the draft six basically changes

1461
00:57:48,559 --> 00:57:51,839
those to specification required

1462
00:57:51,839 --> 00:57:53,359
and for those of you who aren't who are

1463
00:57:53,359 --> 00:57:56,000
not iana nerds um

1464
00:57:56,000 --> 00:57:58,319
that the impact there is we're moving

1465
00:57:58,319 --> 00:58:00,240
from a situation where you have to get a

1466
00:58:00,240 --> 00:58:02,319
document through the ietf process to do

1467
00:58:02,319 --> 00:58:03,680
things like add support for another

1468
00:58:03,680 --> 00:58:04,799
algorithm

1469
00:58:04,799 --> 00:58:07,280
and we're moving to a scenario where

1470
00:58:07,280 --> 00:58:08,880
somebody can just say oh i have a i've

1471
00:58:08,880 --> 00:58:10,799
written a paper and i published it

1472
00:58:10,799 --> 00:58:12,400
and

1473
00:58:12,400 --> 00:58:15,040
can essentially ask an expert to be

1474
00:58:15,040 --> 00:58:16,960
designated by the isg

1475
00:58:16,960 --> 00:58:19,280
should the algorithm get a code point in

1476
00:58:19,280 --> 00:58:21,680
the iana tables

1477
00:58:21,680 --> 00:58:22,400
so

1478
00:58:22,400 --> 00:58:24,720
that's where the draft says we're going

1479
00:58:24,720 --> 00:58:26,480
that's where we're coming from and the

1480
00:58:26,480 --> 00:58:28,319
two exceptions there that remain rfc

1481
00:58:28,319 --> 00:58:31,119
required are uh packet type

1482
00:58:31,119 --> 00:58:34,079
and packet version so

1483
00:58:34,079 --> 00:58:35,760
the places where the versions show up

1484
00:58:35,760 --> 00:58:38,559
are still requiring rfc and the and

1485
00:58:38,559 --> 00:58:40,240
something a new packet type is also so i

1486
00:58:40,240 --> 00:58:41,920
think it requires ietf consensus igf

1487
00:58:41,920 --> 00:58:43,680
consensus sorry because an independent

1488
00:58:43,680 --> 00:58:46,160
stream rfc doesn't have that

1489
00:58:46,160 --> 00:58:47,599
so

1490
00:58:47,599 --> 00:58:48,880
so yeah there's a couple of exceptions

1491
00:58:48,880 --> 00:58:50,960
but but the the basic movement is

1492
00:58:50,960 --> 00:58:52,720
towards uh

1493
00:58:52,720 --> 00:58:54,720
allowing specification required which is

1494
00:58:54,720 --> 00:58:56,319
kind of loosening up things a lot of

1495
00:58:56,319 --> 00:58:57,599
other groups have done this over the

1496
00:58:57,599 --> 00:58:59,599
years but it's worth checking

1497
00:58:59,599 --> 00:59:00,960
because for example it means that you

1498
00:59:00,960 --> 00:59:02,799
know a vanity cypher code point could

1499
00:59:02,799 --> 00:59:04,640
could end up their national algorithms

1500
00:59:04,640 --> 00:59:06,319
would connect can end up there which may

1501
00:59:06,319 --> 00:59:08,559
be good or bad

1502
00:59:08,559 --> 00:59:10,160
so the question is do people have

1503
00:59:10,160 --> 00:59:11,359
opinions

1504
00:59:11,359 --> 00:59:13,920
and should can we confirm that that

1505
00:59:13,920 --> 00:59:15,520
change is kind of a good idea we should

1506
00:59:15,520 --> 00:59:17,119
also note that this will require having

1507
00:59:17,119 --> 00:59:19,359
a designated expert

1508
00:59:19,359 --> 00:59:21,040
there are already uh there's already one

1509
00:59:21,040 --> 00:59:22,720
registry that requires like the expert

1510
00:59:22,720 --> 00:59:24,640
who does not exist okay

1511
00:59:24,640 --> 00:59:25,359
so

1512
00:59:25,359 --> 00:59:26,720
this puts even more weight on that

1513
00:59:26,720 --> 00:59:28,559
non-existent role

1514
00:59:28,559 --> 00:59:30,839
yeah digital community so yes

1515
00:59:30,839 --> 00:59:33,760
actually uh designated expert is needed

1516
00:59:33,760 --> 00:59:36,160
and i think it's it would be very useful

1517
00:59:36,160 --> 00:59:37,359
to keep the instructions of the

1518
00:59:37,359 --> 00:59:39,520
designated expert what kind of you know

1519
00:59:39,520 --> 00:59:41,440
specifications are

1520
00:59:41,440 --> 00:59:43,200
do we we probably want to have some kind

1521
00:59:43,200 --> 00:59:44,839
of stable

1522
00:59:44,839 --> 00:59:47,760
reference you know published you know

1523
00:59:47,760 --> 00:59:49,680
some other standards or organization

1524
00:59:49,680 --> 00:59:52,960
paper not just on some webpage somewhere

1525
00:59:52,960 --> 00:59:53,760
so

1526
00:59:53,760 --> 00:59:55,760
you usually and usually dressing

1527
00:59:55,760 --> 00:59:57,920
experts have quite

1528
00:59:57,920 --> 01:00:00,400
are quite free to actually you know

1529
01:00:00,400 --> 01:00:01,760
interpret the instructions they are

1530
01:00:01,760 --> 01:00:02,640
given

1531
01:00:02,640 --> 01:00:05,040
so we don't have written very specific

1532
01:00:05,040 --> 01:00:06,880
instructions just say that okay

1533
01:00:06,880 --> 01:00:08,960
destiny the expert requires a stable

1534
01:00:08,960 --> 01:00:11,119
reference and he decides what is stable

1535
01:00:11,119 --> 01:00:13,280
enough for him his point of view

1536
01:00:13,280 --> 01:00:15,040
so just while you're there do you do you

1537
01:00:15,040 --> 01:00:17,680
have a an example of some specification

1538
01:00:17,680 --> 01:00:19,119
that does that well that you can

1539
01:00:19,119 --> 01:00:20,480
remember

1540
01:00:20,480 --> 01:00:22,559
no okay i think most of the most of the

1541
01:00:22,559 --> 01:00:25,280
rfcs are you know for for those are

1542
01:00:25,280 --> 01:00:27,119
obviously the time for example

1543
01:00:27,119 --> 01:00:28,480
expert i think they actually just say

1544
01:00:28,480 --> 01:00:30,319
that they're expert there's actually no

1545
01:00:30,319 --> 01:00:32,799
specification required but i have always

1546
01:00:32,799 --> 01:00:34,720
as an expert required to have a

1547
01:00:34,720 --> 01:00:36,640
specification before i actually go

1548
01:00:36,640 --> 01:00:38,240
forward and say okay you have to have a

1549
01:00:38,240 --> 01:00:40,240
three p three gpp for example

1550
01:00:40,240 --> 01:00:42,720
specification is is okay

1551
01:00:42,720 --> 01:00:44,720
some webpage i will say okay i don't

1552
01:00:44,720 --> 01:00:46,559
know if i would want to allocate you

1553
01:00:46,559 --> 01:00:49,680
know numbers based on that

1554
01:00:49,920 --> 01:00:52,160
ah pancada i actually got to make

1555
01:00:52,160 --> 01:00:53,920
basically the same point the term made

1556
01:00:53,920 --> 01:00:55,520
about we should have some guidance to

1557
01:00:55,520 --> 01:00:58,640
the experts uh but i do have an example

1558
01:00:58,640 --> 01:01:00,160
of a case that i think does this pretty

1559
01:01:00,160 --> 01:01:00,960
well

1560
01:01:00,960 --> 01:01:03,440
i'm actually the sort of ghost editor

1561
01:01:03,440 --> 01:01:06,799
for the cozy uh drafts that are in all

1562
01:01:06,799 --> 01:01:09,040
48 at the moment

1563
01:01:09,040 --> 01:01:11,599
because jim is no longer here to to do

1564
01:01:11,599 --> 01:01:13,280
the authority himself

1565
01:01:13,280 --> 01:01:15,839
and so we have some text in there about

1566
01:01:15,839 --> 01:01:16,799
um

1567
01:01:16,799 --> 01:01:18,640
the expert is designated an expert as a

1568
01:01:18,640 --> 01:01:20,480
reason because we should trust our

1569
01:01:20,480 --> 01:01:22,799
expertise and give them leeway but also

1570
01:01:22,799 --> 01:01:25,440
guidance about the proposed mechanisms

1571
01:01:25,440 --> 01:01:26,880
or algorithms

1572
01:01:26,880 --> 01:01:29,200
need to like actually be appropriate for

1573
01:01:29,200 --> 01:01:32,079
the requirements of the

1574
01:01:32,079 --> 01:01:34,400
registry that we're trying to use like

1575
01:01:34,400 --> 01:01:36,240
if it's supposed to be a signature

1576
01:01:36,240 --> 01:01:38,079
algorithm it has to actually provide the

1577
01:01:38,079 --> 01:01:40,240
signature functionality

1578
01:01:40,240 --> 01:01:42,880
um and i think there's also some some

1579
01:01:42,880 --> 01:01:44,960
guidance there that it needs to

1580
01:01:44,960 --> 01:01:46,480
meet the community requirements for

1581
01:01:46,480 --> 01:01:48,240
security so like if somebody wanted to

1582
01:01:48,240 --> 01:01:50,160
prove so null security and a null

1583
01:01:50,160 --> 01:01:52,000
sequencer algorithm essentially if it

1584
01:01:52,000 --> 01:01:52,880
doesn't

1585
01:01:52,880 --> 01:01:54,160
meet the requirements of the community

1586
01:01:54,160 --> 01:01:55,760
if there's also some pointers to like

1587
01:01:55,760 --> 01:01:58,319
cfrg is a good resource in there

1588
01:01:58,319 --> 01:01:59,760
um

1589
01:01:59,760 --> 01:02:02,319
and in addition to sort of answering the

1590
01:02:02,319 --> 01:02:04,240
question that you asked of tarot i

1591
01:02:04,240 --> 01:02:08,079
wanted to also say that in general i do

1592
01:02:08,079 --> 01:02:11,599
support this i think in other areas like

1593
01:02:11,599 --> 01:02:13,760
uh tls and i think

1594
01:02:13,760 --> 01:02:16,000
ipsec is actually in the process of

1595
01:02:16,000 --> 01:02:17,920
doing this as well you know

1596
01:02:17,920 --> 01:02:20,240
opening up the registries to make it a

1597
01:02:20,240 --> 01:02:24,640
lower burden is good for the ecosystem

1598
01:02:24,640 --> 01:02:26,559
i guess i also wanted to mention a

1599
01:02:26,559 --> 01:02:28,160
counter example

1600
01:02:28,160 --> 01:02:31,440
in the sense of the expert is not given

1601
01:02:31,440 --> 01:02:33,119
very much leeway

1602
01:02:33,119 --> 01:02:35,599
and i believe the quick registries the

1603
01:02:35,599 --> 01:02:38,400
policy is basically a shell issue policy

1604
01:02:38,400 --> 01:02:40,799
and expert is there to

1605
01:02:40,799 --> 01:02:42,160
like

1606
01:02:42,160 --> 01:02:44,240
apply some back pressure if somebody is

1607
01:02:44,240 --> 01:02:46,960
asking for a lot of code points or

1608
01:02:46,960 --> 01:02:48,160
something like that or if they're asking

1609
01:02:48,160 --> 01:02:49,760
for a specific code point that might be

1610
01:02:49,760 --> 01:02:51,119
problematic

1611
01:02:51,119 --> 01:02:53,599
but the the guidance to the expert is

1612
01:02:53,599 --> 01:02:57,039
basically you've got to approve this

1613
01:02:57,039 --> 01:02:59,200
can you can you send to the list a

1614
01:02:59,200 --> 01:03:01,039
pointer to the specific draft that you

1615
01:03:01,039 --> 01:03:02,640
think has good text the cozy draft that

1616
01:03:02,640 --> 01:03:03,839
you mentioned

1617
01:03:03,839 --> 01:03:06,000
uh sure

1618
01:03:06,000 --> 01:03:08,240
or in the chat yeah

1619
01:03:08,240 --> 01:03:09,920
just just so we have a

1620
01:03:09,920 --> 01:03:12,640
note that we can use to update it

1621
01:03:12,640 --> 01:03:14,559
yeah i'll drop in the chat for sure and

1622
01:03:14,559 --> 01:03:17,039
i will try to remember to send an email

1623
01:03:17,039 --> 01:03:18,240
as well

1624
01:03:18,240 --> 01:03:21,200
okay thank you ben

1625
01:03:22,640 --> 01:03:24,400
so i'm a

1626
01:03:24,400 --> 01:03:27,200
editor maintainer of a registry that was

1627
01:03:27,200 --> 01:03:31,119
recently opened up in in this way and

1628
01:03:31,119 --> 01:03:33,680
i think it is a positive uh thing uh

1629
01:03:33,680 --> 01:03:35,680
that's happening like you mentioned it's

1630
01:03:35,680 --> 01:03:37,280
sort of trend in the space but the

1631
01:03:37,280 --> 01:03:38,319
guidance

1632
01:03:38,319 --> 01:03:40,880
to those maintainers is critical and if

1633
01:03:40,880 --> 01:03:43,119
you don't give good guidance to them you

1634
01:03:43,119 --> 01:03:45,440
open huge political cans of worms for

1635
01:03:45,440 --> 01:03:48,240
them and they're likely to resign so

1636
01:03:48,240 --> 01:03:50,559
you ought to just yeah

1637
01:03:50,559 --> 01:03:52,400
just make sure you give them good

1638
01:03:52,400 --> 01:03:54,319
guidance and i also think it's important

1639
01:03:54,319 --> 01:03:55,359
to

1640
01:03:55,359 --> 01:03:56,799
support

1641
01:03:56,799 --> 01:03:59,359
the sort of mental shift that goes along

1642
01:03:59,359 --> 01:04:02,000
with this kind of process as a community

1643
01:04:02,000 --> 01:04:04,240
um

1644
01:04:04,480 --> 01:04:05,440
because

1645
01:04:05,440 --> 01:04:07,599
if it's happening it should be supported

1646
01:04:07,599 --> 01:04:11,359
by the community um so

1647
01:04:11,359 --> 01:04:14,400
have have a designated expert give them

1648
01:04:14,400 --> 01:04:16,240
good solid advice

1649
01:04:16,240 --> 01:04:18,559
um and then cheer for them while they

1650
01:04:18,559 --> 01:04:21,359
handle the onslaught of registrations

1651
01:04:21,359 --> 01:04:24,319
are you can can you point to guidance

1652
01:04:24,319 --> 01:04:25,760
that you have found useful in that

1653
01:04:25,760 --> 01:04:28,720
position sure i can i'll i'll send it to

1654
01:04:28,720 --> 01:04:30,799
the list but i may have to get connected

1655
01:04:30,799 --> 01:04:32,559
offline yeah that would be very that'd

1656
01:04:32,559 --> 01:04:35,039
be very helpful thank you

1657
01:04:35,039 --> 01:04:39,240
did you actually experience an onslaught

1658
01:04:40,559 --> 01:04:43,119
uh yes but for a registry that i i don't

1659
01:04:43,119 --> 01:04:45,280
want to bring up here to experience any

1660
01:04:45,280 --> 01:04:47,680
challenges

1661
01:04:49,520 --> 01:04:51,599
great uh

1662
01:04:51,599 --> 01:04:53,599
and uh roman has post and then have

1663
01:04:53,599 --> 01:04:55,520
posted some more about that closely

1664
01:04:55,520 --> 01:04:58,640
stuff in the chats

1665
01:05:04,319 --> 01:05:05,280
so

1666
01:05:05,280 --> 01:05:06,480
i think we've trained the queue on this

1667
01:05:06,480 --> 01:05:07,599
one so

1668
01:05:07,599 --> 01:05:10,000
i'll ask the question

1669
01:05:10,000 --> 01:05:11,119
like this

1670
01:05:11,119 --> 01:05:13,039
so if you're happy with these changes

1671
01:05:13,039 --> 01:05:14,079
but

1672
01:05:14,079 --> 01:05:15,680
we should also give guidance to the

1673
01:05:15,680 --> 01:05:17,280
designated experts then please raise

1674
01:05:17,280 --> 01:05:18,559
your hand

1675
01:05:18,559 --> 01:05:20,000
if you'd rather we don't make that

1676
01:05:20,000 --> 01:05:21,280
change

1677
01:05:21,280 --> 01:05:25,559
then please do not raise your hand

1678
01:05:43,359 --> 01:05:45,760
and that one seems to have stabilized

1679
01:05:45,760 --> 01:05:48,720
with 11 hands raised for

1680
01:05:48,720 --> 01:05:50,559
keeping that kind of keeping these

1681
01:05:50,559 --> 01:05:52,079
changes but giving some guidance to the

1682
01:05:52,079 --> 01:05:55,920
de and zero hands not raised

1683
01:05:56,079 --> 01:05:58,480
thank you

1684
01:05:59,760 --> 01:06:02,160
okay

1685
01:06:02,559 --> 01:06:05,799
all right

1686
01:06:06,799 --> 01:06:07,599
so

1687
01:06:07,599 --> 01:06:09,359
i created this issue yesterday just in

1688
01:06:09,359 --> 01:06:10,960
response to uh there was some list

1689
01:06:10,960 --> 01:06:13,359
discussion about argon 2.

1690
01:06:13,359 --> 01:06:14,640
um

1691
01:06:14,640 --> 01:06:16,640
and i i think the issue essentially is

1692
01:06:16,640 --> 01:06:20,879
is that is the text sufficiently clear

1693
01:06:20,960 --> 01:06:24,160
um so if people have opinions or or have

1694
01:06:24,160 --> 01:06:26,480
been watching this thread

1695
01:06:26,480 --> 01:06:28,640
on the mailing list then please do speak

1696
01:06:28,640 --> 01:06:30,000
to it i'm not sure we'll do a poll on

1697
01:06:30,000 --> 01:06:32,400
this one i think it's the case of we'll

1698
01:06:32,400 --> 01:06:34,000
probably just have to go and check but

1699
01:06:34,000 --> 01:06:35,599
uh

1700
01:06:35,599 --> 01:06:37,839
yeah and one of the you know one of the

1701
01:06:37,839 --> 01:06:39,520
ways that we can determine

1702
01:06:39,520 --> 01:06:42,480
quantitatively if it is um

1703
01:06:42,480 --> 01:06:43,760
if it is clear

1704
01:06:43,760 --> 01:06:45,599
is whether we have functioning interop

1705
01:06:45,599 --> 01:06:49,520
as well i mean use this as the as the

1706
01:06:49,520 --> 01:06:51,520
sorry to keep poking at you as the

1707
01:06:51,520 --> 01:06:53,520
maintainer of the interop test suite but

1708
01:06:53,520 --> 01:06:55,680
uh can you can you report back on how

1709
01:06:55,680 --> 01:06:59,039
things like whether whether argon 2 um

1710
01:06:59,039 --> 01:07:00,960
has been tested this is something that

1711
01:07:00,960 --> 01:07:04,240
might be in the in the lineup

1712
01:07:04,240 --> 01:07:06,319
so sadly we don't have a

1713
01:07:06,319 --> 01:07:08,960
test for argon 2 yet but we have two

1714
01:07:08,960 --> 01:07:11,200
interoperating implementations one of

1715
01:07:11,200 --> 01:07:15,119
which i believe is canoe pg maybe

1716
01:07:15,119 --> 01:07:19,920
nib can can talk talk about that

1717
01:07:27,680 --> 01:07:28,480
uh

1718
01:07:28,480 --> 01:07:32,559
glue pg my branch support argon 2

1719
01:07:32,559 --> 01:07:36,400
because the uh leaf decrypt 1.10 already

1720
01:07:36,400 --> 01:07:40,359
have argument to support

1721
01:07:47,839 --> 01:07:49,680
okay so so i think this situation is

1722
01:07:49,680 --> 01:07:51,039
that we have

1723
01:07:51,039 --> 01:07:53,039
we seem to have i think miebe did say

1724
01:07:53,039 --> 01:07:55,280
that it's supported and it's and then

1725
01:07:55,280 --> 01:07:57,839
justice is saying that it interoperates

1726
01:07:57,839 --> 01:07:59,839
so that that you know seems to say that

1727
01:07:59,839 --> 01:08:03,119
the text is not horrible um

1728
01:08:03,119 --> 01:08:04,720
uh but i think so i don't think this one

1729
01:08:04,720 --> 01:08:05,839
would have a poll on i think this is one

1730
01:08:05,839 --> 01:08:07,119
where we should go back and check

1731
01:08:07,119 --> 01:08:08,720
essentially because argon 2 does have a

1732
01:08:08,720 --> 01:08:10,559
bunch of parameters clearly one person

1733
01:08:10,559 --> 01:08:12,400
on the list at least has found that

1734
01:08:12,400 --> 01:08:14,480
confusing or something so

1735
01:08:14,480 --> 01:08:16,319
um i think the resolution of this one is

1736
01:08:16,319 --> 01:08:19,040
we just need to go back and

1737
01:08:19,040 --> 01:08:20,158
check and

1738
01:08:20,158 --> 01:08:21,279
see is there something that needs

1739
01:08:21,279 --> 01:08:23,359
improving yeah

1740
01:08:23,359 --> 01:08:24,960
anybody else want to speak to argon 2

1741
01:08:24,960 --> 01:08:27,120
here

1742
01:08:27,120 --> 01:08:28,719
and again i'd encourage if people can

1743
01:08:28,719 --> 01:08:29,920
just have a look at that text and see

1744
01:08:29,920 --> 01:08:31,040
that i think it's clear that would help

1745
01:08:31,040 --> 01:08:32,640
i think yeah sorry

1746
01:08:32,640 --> 01:08:34,000
so i thought there were

1747
01:08:34,000 --> 01:08:35,279
there was maybe an issue that some

1748
01:08:35,279 --> 01:08:38,399
people did not want argon to

1749
01:08:38,399 --> 01:08:41,920
are we not talking about that or

1750
01:08:42,238 --> 01:08:44,158
yeah so that was i think the person who

1751
01:08:44,158 --> 01:08:46,200
found the text unclear also

1752
01:08:46,200 --> 01:08:47,600
[Music]

1753
01:08:47,600 --> 01:08:50,080
was arguing somewhat against it but i

1754
01:08:50,080 --> 01:08:52,158
that seems to be a fairly niche opinion

1755
01:08:52,158 --> 01:08:54,000
as far as i can see but again if people

1756
01:08:54,000 --> 01:08:55,839
want to start if people want to suggest

1757
01:08:55,839 --> 01:08:57,439
removing argon 2 then

1758
01:08:57,439 --> 01:08:59,279
go ahead and do that

1759
01:08:59,279 --> 01:09:01,198
but i didn't i didn't see a lot of

1760
01:09:01,198 --> 01:09:04,399
people suggesting that her

1761
01:09:04,880 --> 01:09:07,040
and it i mean to be honest you know i

1762
01:09:07,040 --> 01:09:09,359
mean argon 2 seems to be a much better

1763
01:09:09,359 --> 01:09:10,640
way of

1764
01:09:10,640 --> 01:09:13,759
kind of string the key so

1765
01:09:15,198 --> 01:09:16,560
it's also i mean it's the it's the

1766
01:09:16,560 --> 01:09:18,799
winner of the password hashing uh

1767
01:09:18,799 --> 01:09:20,880
competition so that was why it was

1768
01:09:20,880 --> 01:09:22,799
selected

1769
01:09:22,799 --> 01:09:24,560
um yeah okay so i think the resolution

1770
01:09:24,560 --> 01:09:25,920
for that one is is

1771
01:09:25,920 --> 01:09:27,040
again people want to talk to it now

1772
01:09:27,040 --> 01:09:28,319
that's fine but the resolution there

1773
01:09:28,319 --> 01:09:30,399
doesn't need a poll as um

1774
01:09:30,399 --> 01:09:31,600
we need to look at our text just to

1775
01:09:31,600 --> 01:09:33,279
convince ourselves it's clear and fix if

1776
01:09:33,279 --> 01:09:35,279
not yeah and if a third implementation

1777
01:09:35,279 --> 01:09:36,719
could become interoperable or if we

1778
01:09:36,719 --> 01:09:38,640
could get proof on the test suite that

1779
01:09:38,640 --> 01:09:40,080
uh that

1780
01:09:40,080 --> 01:09:42,158
these things are capable of being

1781
01:09:42,158 --> 01:09:45,439
interoperable then that would be um

1782
01:09:45,439 --> 01:09:47,759
that would be useful too

1783
01:09:47,759 --> 01:09:51,679
useful evidence for clarity

1784
01:09:51,679 --> 01:09:54,000
all right

1785
01:09:54,400 --> 01:09:56,080
getting through this folks this is good

1786
01:09:56,080 --> 01:09:57,040
um

1787
01:09:57,040 --> 01:09:58,800
so second last one yeah we're on the

1788
01:09:58,800 --> 01:10:01,280
second to last um so thanks everybody

1789
01:10:01,280 --> 01:10:04,239
for bearing with uh so we've had some

1790
01:10:04,239 --> 01:10:07,600
reports on the list recently about

1791
01:10:07,600 --> 01:10:10,880
open pgp certificates that are um fairly

1792
01:10:10,880 --> 01:10:13,920
widespread and do not follow either rfc

1793
01:10:13,920 --> 01:10:17,440
4880 or the current this draft

1794
01:10:17,440 --> 01:10:19,760
um the crypto refresh

1795
01:10:19,760 --> 01:10:21,520
because of some changes in some of the

1796
01:10:21,520 --> 01:10:23,440
metadata that they have

1797
01:10:23,440 --> 01:10:24,239
um

1798
01:10:24,239 --> 01:10:26,320
we have two potential

1799
01:10:26,320 --> 01:10:27,920
uh

1800
01:10:27,920 --> 01:10:30,400
things that we could do as a community

1801
01:10:30,400 --> 01:10:32,320
of specifiers

1802
01:10:32,320 --> 01:10:34,640
one thing is we could adjust the text in

1803
01:10:34,640 --> 01:10:35,920
the revision

1804
01:10:35,920 --> 01:10:38,640
to explain

1805
01:10:38,640 --> 01:10:40,719
a little bit better about what how this

1806
01:10:40,719 --> 01:10:43,199
metadata should be prepared and to

1807
01:10:43,199 --> 01:10:44,960
describe what what an implementation

1808
01:10:44,960 --> 01:10:46,640
should do if it discovers

1809
01:10:46,640 --> 01:10:48,640
that the metadata has been ill prepared

1810
01:10:48,640 --> 01:10:50,080
so that's just like documentation

1811
01:10:50,080 --> 01:10:51,280
cleanup

1812
01:10:51,280 --> 01:10:52,719
and another thing which we actually have

1813
01:10:52,719 --> 01:10:55,040
a merge request for is to strip out

1814
01:10:55,040 --> 01:10:58,560
those pieces of metadata that are are

1815
01:10:58,560 --> 01:11:01,040
apparently ambiguous from v5 keys so

1816
01:11:01,040 --> 01:11:03,360
that they simply wouldn't be present

1817
01:11:03,360 --> 01:11:04,960
in those structures so you couldn't make

1818
01:11:04,960 --> 01:11:06,320
those mistakes

1819
01:11:06,320 --> 01:11:07,600
um

1820
01:11:07,600 --> 01:11:08,719
it might still be worth adding

1821
01:11:08,719 --> 01:11:10,800
documentation about how to deal with v4

1822
01:11:10,800 --> 01:11:13,679
that have those pieces of metadata

1823
01:11:13,679 --> 01:11:15,440
but so this is

1824
01:11:15,440 --> 01:11:17,040
these are this is the github key

1825
01:11:17,040 --> 01:11:18,880
apparently github's key itself has a

1826
01:11:18,880 --> 01:11:21,040
weird behavior and we've also seen some

1827
01:11:21,040 --> 01:11:24,159
keys generated by open pgp

1828
01:11:24,159 --> 01:11:27,159
php

1829
01:11:27,199 --> 01:11:29,440
that have

1830
01:11:29,440 --> 01:11:31,280
similar but slightly subtly different

1831
01:11:31,280 --> 01:11:33,600
misbehaviors around this metadata

1832
01:11:33,600 --> 01:11:34,480
so

1833
01:11:34,480 --> 01:11:36,320
what do we want to do about these keys

1834
01:11:36,320 --> 01:11:37,840
do we want to try to change the draft

1835
01:11:37,840 --> 01:11:40,400
you want to remove the stuff from v5 do

1836
01:11:40,400 --> 01:11:42,480
you want to make give clear guidance

1837
01:11:42,480 --> 01:11:44,239
about whether to

1838
01:11:44,239 --> 01:11:46,320
ignore if these fields are not set

1839
01:11:46,320 --> 01:11:49,040
so just describe it as metadata is it

1840
01:11:49,040 --> 01:11:51,120
not just a checksum or something

1841
01:11:51,120 --> 01:11:53,120
uh it's a checksum and is there one

1842
01:11:53,120 --> 01:11:54,560
other piece or is it just is it just the

1843
01:11:54,560 --> 01:11:55,920
checksum that we're talking about but

1844
01:11:55,920 --> 01:11:57,760
it's it's not a free form metadata it's

1845
01:11:57,760 --> 01:11:59,679
not free from table here so

1846
01:11:59,679 --> 01:12:01,280
there's a there's a there's a checksum

1847
01:12:01,280 --> 01:12:04,400
that indicates uh you know what's yeah

1848
01:12:04,400 --> 01:12:06,800
um what has been signed here

1849
01:12:06,800 --> 01:12:08,640
so yeah i think it's a checksum so okay

1850
01:12:08,640 --> 01:12:10,159
so this is supposed to be a checksum but

1851
01:12:10,159 --> 01:12:11,840
the uh something but not include things

1852
01:12:11,840 --> 01:12:13,920
that are not the checksum oh okay yeah

1853
01:12:13,920 --> 01:12:17,040
use this you're in the queue

1854
01:12:17,040 --> 01:12:19,679
so i'm aware of two issues um

1855
01:12:19,679 --> 01:12:21,280
first there is the

1856
01:12:21,280 --> 01:12:24,640
the hash digest prefix in the signature

1857
01:12:24,640 --> 01:12:25,679
packet

1858
01:12:25,679 --> 01:12:28,480
and the question came up

1859
01:12:28,480 --> 01:12:30,239
that came up initially was

1860
01:12:30,239 --> 01:12:33,679
what should implementations do if the

1861
01:12:33,679 --> 01:12:35,520
16-bit

1862
01:12:35,520 --> 01:12:37,520
prefix is wrong

1863
01:12:37,520 --> 01:12:40,000
and that i think happens with the php

1864
01:12:40,000 --> 01:12:41,520
implementation

1865
01:12:41,520 --> 01:12:44,719
and the github key and github p2p

1866
01:12:44,719 --> 01:12:46,080
implementation

1867
01:12:46,080 --> 01:12:49,679
has a different problem where

1868
01:12:49,679 --> 01:12:50,400
they

1869
01:12:50,400 --> 01:12:52,960
produce malformed multi-precision

1870
01:12:52,960 --> 01:12:55,960
integers

1871
01:13:08,640 --> 01:13:10,800
so everybody's exhausted with all this

1872
01:13:10,800 --> 01:13:13,920
yeah yeah we're close folks

1873
01:13:15,440 --> 01:13:18,960
so for the first issue i have some

1874
01:13:18,960 --> 01:13:22,159
one fairly orthogonal argument for

1875
01:13:22,159 --> 01:13:24,640
removing it entirely which is that if

1876
01:13:24,640 --> 01:13:25,520
you have

1877
01:13:25,520 --> 01:13:28,880
a crypto api which lets you

1878
01:13:28,880 --> 01:13:33,280
hash and sign in one operation then it's

1879
01:13:33,280 --> 01:13:35,120
it's nice to be able to use that without

1880
01:13:35,120 --> 01:13:38,880
needing to get the intermediate hash

1881
01:13:38,880 --> 01:13:39,840
um

1882
01:13:39,840 --> 01:13:42,080
which uh

1883
01:13:42,080 --> 01:13:44,880
web crypto does so again it's fairly

1884
01:13:44,880 --> 01:13:46,640
specific but

1885
01:13:46,640 --> 01:13:47,679
um

1886
01:13:47,679 --> 01:13:51,760
i i think that's useful and also if um

1887
01:13:51,760 --> 01:13:54,080
implementations are not

1888
01:13:54,080 --> 01:13:56,719
um checking it anyway while some

1889
01:13:56,719 --> 01:13:58,880
implementations are not then it's

1890
01:13:58,880 --> 01:14:01,440
it's perhaps not very useful

1891
01:14:01,440 --> 01:14:03,440
to put it there anyway

1892
01:14:03,440 --> 01:14:05,920
uh we do check it in fact

1893
01:14:05,920 --> 01:14:07,120
so i

1894
01:14:07,120 --> 01:14:10,000
i'm also not opposed to just having some

1895
01:14:10,000 --> 01:14:10,960
text

1896
01:14:10,960 --> 01:14:12,960
that says you should check it or

1897
01:14:12,960 --> 01:14:14,719
something

1898
01:14:14,719 --> 01:14:17,360
um but if i check it you mean reject the

1899
01:14:17,360 --> 01:14:18,960
signature if it doesn't match without

1900
01:14:18,960 --> 01:14:21,360
bothering with the cryptographic outcome

1901
01:14:21,360 --> 01:14:22,239
yes

1902
01:14:22,239 --> 01:14:22,960
so

1903
01:14:22,960 --> 01:14:24,480
would you want i mean do you want that

1904
01:14:24,480 --> 01:14:27,120
to say you must check it like uh you

1905
01:14:27,120 --> 01:14:28,719
must reject the signature if it doesn't

1906
01:14:28,719 --> 01:14:30,480
match i mean one of the problems right

1907
01:14:30,480 --> 01:14:33,040
now is that we have this we have we have

1908
01:14:33,040 --> 01:14:35,600
uh heisen sigs right where yeah some

1909
01:14:35,600 --> 01:14:37,280
implementations uh

1910
01:14:37,280 --> 01:14:38,960
accept them and some don't

1911
01:14:38,960 --> 01:14:42,000
so again the only real reason i see for

1912
01:14:42,000 --> 01:14:42,880
not

1913
01:14:42,880 --> 01:14:44,480
well two reasons i see for not checking

1914
01:14:44,480 --> 01:14:45,600
it is

1915
01:14:45,600 --> 01:14:48,560
one you have such an api where you can

1916
01:14:48,560 --> 01:14:51,040
hash and verify in one step

1917
01:14:51,040 --> 01:14:52,000
or

1918
01:14:52,000 --> 01:14:53,760
well there are keys out there in the

1919
01:14:53,760 --> 01:14:57,600
wild that that are broken so you ignore

1920
01:14:57,600 --> 01:14:58,320
the

1921
01:14:58,320 --> 01:15:00,239
bytes for that reason so

1922
01:15:00,239 --> 01:15:02,080
i mean both of those

1923
01:15:02,080 --> 01:15:04,640
would to me speak for

1924
01:15:04,640 --> 01:15:07,040
either removing it or saying that you

1925
01:15:07,040 --> 01:15:10,080
you should or must check it and reject

1926
01:15:10,080 --> 01:15:12,880
the signature if it's invalid

1927
01:15:12,880 --> 01:15:14,719
um

1928
01:15:14,719 --> 01:15:17,120
yeah i personally i would slightly

1929
01:15:17,120 --> 01:15:19,679
prefer just removing it entirely but

1930
01:15:19,679 --> 01:15:21,520
yeah if we keep it then i think we

1931
01:15:21,520 --> 01:15:24,920
should check it

1932
01:15:25,360 --> 01:15:27,199
okay

1933
01:15:27,199 --> 01:15:28,560
all right

1934
01:15:28,560 --> 01:15:31,199
again agree with everything he just said

1935
01:15:31,199 --> 01:15:31,920
it's

1936
01:15:31,920 --> 01:15:34,000
becoming a bit of a theme yeah if it's

1937
01:15:34,000 --> 01:15:35,920
there it should be checked

1938
01:15:35,920 --> 01:15:37,360
if it doesn't match it should be

1939
01:15:37,360 --> 01:15:38,480
rejected

1940
01:15:38,480 --> 01:15:41,679
i'm in favor of removing it

1941
01:15:41,679 --> 01:15:43,600
i'm not sure exactly the impact on the

1942
01:15:43,600 --> 01:15:45,520
keys in the wild based on that statement

1943
01:15:45,520 --> 01:15:46,480
but

1944
01:15:46,480 --> 01:15:48,480
sometimes you make things that you

1945
01:15:48,480 --> 01:15:52,080
are broken you have to make new ones

1946
01:15:52,080 --> 01:15:53,360
i i think if we were going to remove it

1947
01:15:53,360 --> 01:15:55,040
it would only be applied to v5 keys

1948
01:15:55,040 --> 01:15:56,480
right right we wouldn't remove it from

1949
01:15:56,480 --> 01:16:00,559
b4 we can't we can't remove it from b4

1950
01:16:01,199 --> 01:16:03,678
uses

1951
01:16:04,400 --> 01:16:07,760
so my theory that this is or was once an

1952
01:16:07,760 --> 01:16:10,320
optimization right you could skip the

1953
01:16:10,320 --> 01:16:12,080
uh heavy lifting of doing the other

1954
01:16:12,080 --> 01:16:13,920
metric operation

1955
01:16:13,920 --> 01:16:15,679
when you can determine from the hash

1956
01:16:15,679 --> 01:16:17,520
prefix that

1957
01:16:17,520 --> 01:16:20,080
the signal didn't didn't check out but i

1958
01:16:20,080 --> 01:16:21,920
want to highlight that we have a bit of

1959
01:16:21,920 --> 01:16:22,960
a

1960
01:16:22,960 --> 01:16:25,120
heuristic based on that

1961
01:16:25,120 --> 01:16:28,480
where we use it to

1962
01:16:29,280 --> 01:16:32,640
reorder certificates um that are somehow

1963
01:16:32,640 --> 01:16:34,800
mangled in transport by a key server

1964
01:16:34,800 --> 01:16:35,920
also

1965
01:16:35,920 --> 01:16:38,239
and here we can use the

1966
01:16:38,239 --> 01:16:41,199
the hash badges prefix

1967
01:16:41,199 --> 01:16:44,400
to see if we can

1968
01:16:44,719 --> 01:16:46,640
find the correct location

1969
01:16:46,640 --> 01:16:47,520
for

1970
01:16:47,520 --> 01:16:49,600
a misplaced signature

1971
01:16:49,600 --> 01:16:52,000
even if we don't have the full context

1972
01:16:52,000 --> 01:16:54,000
like the the issuing

1973
01:16:54,000 --> 01:16:55,440
um

1974
01:16:55,440 --> 01:16:58,400
the issuing key

1975
01:16:59,199 --> 01:17:01,280
so i i

1976
01:17:01,280 --> 01:17:04,000
kind of prefer to keep it or that kind

1977
01:17:04,000 --> 01:17:04,719
of

1978
01:17:04,719 --> 01:17:08,640
reordering to include the robustness

1979
01:17:08,640 --> 01:17:11,440
but i i would be okay with

1980
01:17:11,440 --> 01:17:15,320
making the check mandatory

1981
01:17:19,600 --> 01:17:21,040
so if we're going to do a poll it seems

1982
01:17:21,040 --> 01:17:22,080
like we've got

1983
01:17:22,080 --> 01:17:23,600
at least two separate issues here and

1984
01:17:23,600 --> 01:17:26,000
we've spoken mainly to the first one

1985
01:17:26,000 --> 01:17:27,600
um so maybe we want to try to do a poll

1986
01:17:27,600 --> 01:17:29,120
to resolve this first one but about the

1987
01:17:29,120 --> 01:17:31,520
about the two about the checksum in the

1988
01:17:31,520 --> 01:17:33,600
signatures

1989
01:17:33,600 --> 01:17:35,920
um

1990
01:17:36,400 --> 01:17:39,120
what what uh

1991
01:17:39,120 --> 01:17:40,320
i'm trying to think how we want to pull

1992
01:17:40,320 --> 01:17:42,560
this right so one of them is

1993
01:17:42,560 --> 01:17:43,520
i guess

1994
01:17:43,520 --> 01:17:46,159
should we remove the checksum from v5

1995
01:17:46,159 --> 01:17:48,400
and we've heard uses argue

1996
01:17:48,400 --> 01:17:50,480
against it and daniel i think you were

1997
01:17:50,480 --> 01:17:53,919
mildly for removing it

1998
01:17:54,880 --> 01:17:56,960
and then the other question is should we

1999
01:17:56,960 --> 01:18:00,480
make it mandatory to

2000
01:18:00,800 --> 01:18:02,880
retrospectively as well for v4

2001
01:18:02,880 --> 01:18:04,960
signatures as well and then v5 if we

2002
01:18:04,960 --> 01:18:06,719
keep it should make it mandatory to

2003
01:18:06,719 --> 01:18:09,040
reject the signature if it doesn't uh if

2004
01:18:09,040 --> 01:18:12,239
the checksum doesn't match

2005
01:18:12,239 --> 01:18:14,800
okay and yeah okay so

2006
01:18:14,800 --> 01:18:16,800
so two poles one is do we run a remember

2007
01:18:16,800 --> 01:18:19,120
for e5 and second pole is should we make

2008
01:18:19,120 --> 01:18:22,080
it mandatory to reject a signature

2009
01:18:22,080 --> 01:18:23,600
knowing that implementations out there

2010
01:18:23,600 --> 01:18:25,120
don't currently do that

2011
01:18:25,120 --> 01:18:26,560
but some implementations don't do that

2012
01:18:26,560 --> 01:18:28,080
right okay

2013
01:18:28,080 --> 01:18:31,519
all right yes we asked the question

2014
01:18:38,239 --> 01:18:40,080
what's your question

2015
01:18:40,080 --> 01:18:41,360
uh

2016
01:18:41,360 --> 01:18:45,759
uh the uh signature checksum

2017
01:18:46,080 --> 01:18:47,840
uh

2018
01:18:47,840 --> 01:18:49,360
is that fair signature checksum anybody

2019
01:18:49,360 --> 01:18:51,280
want to propose a different name

2020
01:18:51,280 --> 01:18:52,480
the question i'm gonna ask is should we

2021
01:18:52,480 --> 01:18:54,159
remove the signature checks from these

2022
01:18:54,159 --> 01:18:57,360
five signatures yep

2023
01:18:57,360 --> 01:18:58,560
okay so

2024
01:18:58,560 --> 01:19:00,000
should we remove this signature

2025
01:19:00,000 --> 01:19:02,719
problematic metadata field from p5

2026
01:19:02,719 --> 01:19:04,239
signatures if you think we should please

2027
01:19:04,239 --> 01:19:05,840
raise your hand

2028
01:19:05,840 --> 01:19:09,840
if you think we should not please do not

2029
01:19:22,800 --> 01:19:25,679
okay so i'm seeing two people who are

2030
01:19:25,679 --> 01:19:26,880
in the

2031
01:19:26,880 --> 01:19:27,679
uh

2032
01:19:27,679 --> 01:19:29,520
in the do not raise hand and i wonder

2033
01:19:29,520 --> 01:19:31,280
whether anybody wants to speak to those

2034
01:19:31,280 --> 01:19:33,440
uh to to why they would prefer to not

2035
01:19:33,440 --> 01:19:36,839
remove it

2036
01:19:38,800 --> 01:19:40,080
and just for the record there we had

2037
01:19:40,080 --> 01:19:41,520
seven

2038
01:19:41,520 --> 01:19:43,199
people expressing opinion five raised

2039
01:19:43,199 --> 01:19:45,440
their hands for removal two raised two

2040
01:19:45,440 --> 01:19:49,159
did not raise their hands

2041
01:19:53,360 --> 01:19:55,520
um i assume that uh

2042
01:19:55,520 --> 01:19:58,560
uh aaron you want to speak

2043
01:20:02,239 --> 01:20:04,400
okay so um

2044
01:20:04,400 --> 01:20:06,000
i think that

2045
01:20:06,000 --> 01:20:10,560
it it provides debug information too

2046
01:20:10,560 --> 01:20:12,719
so like at times it can be very useful

2047
01:20:12,719 --> 01:20:14,320
to have these two bytes even if we don't

2048
01:20:14,320 --> 01:20:17,280
check it on a regular basis to

2049
01:20:17,280 --> 01:20:18,880
understand whether implementation is

2050
01:20:18,880 --> 01:20:21,280
broken or not

2051
01:20:21,280 --> 01:20:23,520
or whether the data that has been signed

2052
01:20:23,520 --> 01:20:27,360
is different like at times

2053
01:20:28,159 --> 01:20:32,280
you can understand where's the bug

2054
01:20:34,719 --> 01:20:37,280
okay so the the the three arguments for

2055
01:20:37,280 --> 01:20:39,600
keeping it that i've heard are uh one it

2056
01:20:39,600 --> 01:20:42,000
allows you to reject signatures faster

2057
01:20:42,000 --> 01:20:45,199
uh two it allows you to to um

2058
01:20:45,199 --> 01:20:46,880
this debugging argument it gives you

2059
01:20:46,880 --> 01:20:48,719
some extra hints about where the problem

2060
01:20:48,719 --> 01:20:50,880
might be in the emitting implementation

2061
01:20:50,880 --> 01:20:53,040
and then three uses this point about

2062
01:20:53,040 --> 01:20:54,880
being able to reorder certificates more

2063
01:20:54,880 --> 01:20:57,040
efficiently without doing the heavy

2064
01:20:57,040 --> 01:20:59,040
lifting of the crypto piece i see use

2065
01:20:59,040 --> 01:21:01,120
this out of the queue now

2066
01:21:01,120 --> 01:21:03,600
uh okay so

2067
01:21:03,600 --> 01:21:05,040
i mean that's input it's a bit that's a

2068
01:21:05,040 --> 01:21:06,080
kind of rough

2069
01:21:06,080 --> 01:21:09,199
yeah uh consensus if consensus so we'll

2070
01:21:09,199 --> 01:21:10,880
again we verify the list and see where

2071
01:21:10,880 --> 01:21:11,679
we go

2072
01:21:11,679 --> 01:21:15,199
and then the second poll we wanted was

2073
01:21:15,199 --> 01:21:16,239
should we

2074
01:21:16,239 --> 01:21:18,560
should we mandate that implementations

2075
01:21:18,560 --> 01:21:20,800
must reject a signature that has the

2076
01:21:20,800 --> 01:21:22,080
wrong

2077
01:21:22,080 --> 01:21:26,120
checksum in it

2078
01:21:42,080 --> 01:21:44,080
okay so i think what i'm gonna

2079
01:21:44,080 --> 01:21:45,679
i've typed is should we state that

2080
01:21:45,679 --> 01:21:47,440
implementations must reject signatures

2081
01:21:47,440 --> 01:21:49,760
v4 or v5 with incorrect signature

2082
01:21:49,760 --> 01:21:52,239
checksums

2083
01:21:54,480 --> 01:21:57,480
okay

2084
01:21:58,159 --> 01:22:01,120
so you can see the question

2085
01:22:02,960 --> 01:22:03,920
and we know that there are

2086
01:22:03,920 --> 01:22:07,960
implementations that won't do it

2087
01:22:30,719 --> 01:22:33,760
okay so

2088
01:22:35,199 --> 01:22:37,520
so for this one we have so currently

2089
01:22:37,520 --> 01:22:39,920
nine hands raised saying that we should

2090
01:22:39,920 --> 01:22:41,520
add that must

2091
01:22:41,520 --> 01:22:43,520
and one do not raise hands so if the

2092
01:22:43,520 --> 01:22:45,120
person who did not raise their hand

2093
01:22:45,120 --> 01:22:49,199
would like to speak to that please do so

2094
01:22:51,199 --> 01:22:53,600
aaron

2095
01:22:53,600 --> 01:22:55,360
yeah i mean same as before it's the

2096
01:22:55,360 --> 01:22:57,600
thing is depends what's the use of it i

2097
01:22:57,600 --> 01:22:59,520
would definitely be in favor but should

2098
01:22:59,520 --> 01:23:00,800
a must

2099
01:23:00,800 --> 01:23:01,840
might be

2100
01:23:01,840 --> 01:23:03,920
at times too hard especially if you know

2101
01:23:03,920 --> 01:23:05,520
that there are some implementations out

2102
01:23:05,520 --> 01:23:08,320
there that are broken

2103
01:23:09,760 --> 01:23:10,560
so

2104
01:23:10,560 --> 01:23:12,480
um

2105
01:23:12,480 --> 01:23:13,760
okay yeah

2106
01:23:13,760 --> 01:23:15,120
yep that's fine we'll take it to the

2107
01:23:15,120 --> 01:23:17,120
list

2108
01:23:17,120 --> 01:23:18,320
okay

2109
01:23:18,320 --> 01:23:19,280
um and then

2110
01:23:19,280 --> 01:23:21,360
so so then we what we haven't discussed

2111
01:23:21,360 --> 01:23:22,080
yet

2112
01:23:22,080 --> 01:23:24,639
is this um

2113
01:23:24,639 --> 01:23:28,080
uh malformed mpis uh in certificates

2114
01:23:28,080 --> 01:23:31,040
like the github certificate right so

2115
01:23:31,040 --> 01:23:34,080
the mpi specification is very clear uh

2116
01:23:34,080 --> 01:23:35,760
but not necessarily always followed

2117
01:23:35,760 --> 01:23:37,040
apparently apparently it's not as clear

2118
01:23:37,040 --> 01:23:38,239
as it could be

2119
01:23:38,239 --> 01:23:40,239
um it says that

2120
01:23:40,239 --> 01:23:42,560
the it's indeed it indicates length by

2121
01:23:42,560 --> 01:23:45,679
bits for some reason

2122
01:23:45,679 --> 01:23:46,800
and

2123
01:23:46,800 --> 01:23:48,880
in this situation we have certificates

2124
01:23:48,880 --> 01:23:50,000
that are

2125
01:23:50,000 --> 01:23:50,960
uh

2126
01:23:50,960 --> 01:23:52,719
it's supposed to indicate the

2127
01:23:52,719 --> 01:23:54,800
the largest

2128
01:23:54,800 --> 01:23:57,520
bit that is set to one

2129
01:23:57,520 --> 01:23:58,880
but in this situation we're looking at

2130
01:23:58,880 --> 01:24:01,760
certificates which contain mpis or make

2131
01:24:01,760 --> 01:24:03,679
signatures that contain mpis is it

2132
01:24:03,679 --> 01:24:05,040
signatures or certificates that we're

2133
01:24:05,040 --> 01:24:06,400
only seeing this in

2134
01:24:06,400 --> 01:24:07,360
anybody

2135
01:24:07,360 --> 01:24:08,320
aaron

2136
01:24:08,320 --> 01:24:09,520
are you still in the queue from last

2137
01:24:09,520 --> 01:24:12,000
time sorry

2138
01:24:14,719 --> 01:24:16,560
we're seeing this mostly oh there you go

2139
01:24:16,560 --> 01:24:18,800
use this

2140
01:24:18,800 --> 01:24:21,920
so i i've seen it in the signature that

2141
01:24:21,920 --> 01:24:24,239
github creates for merge signatures but

2142
01:24:24,239 --> 01:24:26,239
also in the binding signature of the

2143
01:24:26,239 --> 01:24:29,599
github certificate itself

2144
01:24:29,679 --> 01:24:31,760
so it's in the signature

2145
01:24:31,760 --> 01:24:34,080
um

2146
01:24:34,080 --> 01:24:37,600
okay so so the question is what do we do

2147
01:24:37,600 --> 01:24:40,719
uh if the if the mpi and the signature

2148
01:24:40,719 --> 01:24:42,560
is

2149
01:24:42,560 --> 01:24:44,639
uh

2150
01:24:44,639 --> 01:24:47,199
uh is malformed in that it indicates it

2151
01:24:47,199 --> 01:24:50,560
has a larger uh

2152
01:24:50,560 --> 01:24:52,639
it's basically counting bits by by full

2153
01:24:52,639 --> 01:24:56,560
bite i believe um

2154
01:24:57,440 --> 01:24:58,639
so

2155
01:24:58,639 --> 01:25:00,000
it seems like we should we ought to have

2156
01:25:00,000 --> 01:25:02,159
some guidance so that we can point an

2157
01:25:02,159 --> 01:25:03,360
implementation to what they should do

2158
01:25:03,360 --> 01:25:05,280
about it it seems to me i mean in terms

2159
01:25:05,280 --> 01:25:06,000
of

2160
01:25:06,000 --> 01:25:06,880
just

2161
01:25:06,880 --> 01:25:08,480
leaving it at nothing doesn't seem very

2162
01:25:08,480 --> 01:25:10,719
useful to me uh i don't know what sort

2163
01:25:10,719 --> 01:25:12,400
of guidance people would want one is you

2164
01:25:12,400 --> 01:25:14,560
could tell people to reject a signature

2165
01:25:14,560 --> 01:25:16,480
another one is you could tell people

2166
01:25:16,480 --> 01:25:18,400
to clean up the signature

2167
01:25:18,400 --> 01:25:20,560
uh if the mpi has this particular

2168
01:25:20,560 --> 01:25:22,320
alternate form

2169
01:25:22,320 --> 01:25:25,320
um

2170
01:25:28,880 --> 01:25:30,480
cory

2171
01:25:30,480 --> 01:25:33,360
so um i'm not sure exactly of the

2172
01:25:33,360 --> 01:25:36,320
internals but unless there's a way to

2173
01:25:36,320 --> 01:25:39,679
warn in a softer but very annoying way

2174
01:25:39,679 --> 01:25:41,679
regarding this i think the signature

2175
01:25:41,679 --> 01:25:44,560
should be rejected

2176
01:25:48,560 --> 01:25:49,920
that would mean rejecting all of the

2177
01:25:49,920 --> 01:25:51,920
signatures that github makes on merge

2178
01:25:51,920 --> 01:25:54,320
commits yeah

2179
01:25:54,320 --> 01:25:56,480
so i mean

2180
01:25:56,480 --> 01:25:57,679
is there a security i don't think

2181
01:25:57,679 --> 01:25:58,880
there's a security issue here though is

2182
01:25:58,880 --> 01:26:01,040
there

2183
01:26:02,560 --> 01:26:06,159
i mean there were there were some

2184
01:26:06,159 --> 01:26:08,960
there were some odd lengths keys

2185
01:26:08,960 --> 01:26:11,120
that bleichenbecker attacks work

2186
01:26:11,120 --> 01:26:14,159
slightly better on if if you had like a

2187
01:26:14,159 --> 01:26:16,880
10 25 bit key or something

2188
01:26:16,880 --> 01:26:19,199
or 2049

2189
01:26:19,199 --> 01:26:20,719
but i don't think that has a relevance

2190
01:26:20,719 --> 01:26:23,199
in this yeah exactly so i

2191
01:26:23,199 --> 01:26:27,040
then then you're you're up or

2192
01:26:27,040 --> 01:26:28,880
weird

2193
01:26:28,880 --> 01:26:30,719
yeah i think daniel beat me to actually

2194
01:26:30,719 --> 01:26:33,040
getting in the queue uh

2195
01:26:33,040 --> 01:26:35,040
but i hit unmuted so

2196
01:26:35,040 --> 01:26:37,199
my understanding here is that for these

2197
01:26:37,199 --> 01:26:38,400
problematic

2198
01:26:38,400 --> 01:26:40,000
signatures

2199
01:26:40,000 --> 01:26:42,719
you can

2200
01:26:43,199 --> 01:26:46,960
modify the cipher text so as to

2201
01:26:46,960 --> 01:26:49,520
or will modify the metadata really so as

2202
01:26:49,520 --> 01:26:52,080
to make it a valid signature

2203
01:26:52,080 --> 01:26:52,960
um

2204
01:26:52,960 --> 01:26:56,000
and i believe that that would

2205
01:26:56,000 --> 01:26:57,360
not really

2206
01:26:57,360 --> 01:26:58,960
be something that can constitute an

2207
01:26:58,960 --> 01:27:03,800
attack if you can just fix it yourself

2208
01:27:06,000 --> 01:27:07,679
i i think that's right what is your

2209
01:27:07,679 --> 01:27:09,679
conclusion from that though ben are you

2210
01:27:09,679 --> 01:27:11,520
saying that we should give people

2211
01:27:11,520 --> 01:27:14,719
guidance that they should fix it

2212
01:27:16,480 --> 01:27:18,960
uh

2213
01:27:18,960 --> 01:27:21,960
probably

2214
01:27:22,000 --> 01:27:24,159
i mean it doesn't really seem like it's

2215
01:27:24,159 --> 01:27:26,719
it's not like a cryptographic failure on

2216
01:27:26,719 --> 01:27:29,120
the signer's fault it's just a

2217
01:27:29,120 --> 01:27:30,560
implementation

2218
01:27:30,560 --> 01:27:33,679
failure to respect properly

2219
01:27:33,679 --> 01:27:36,080
and because the cryptography still

2220
01:27:36,080 --> 01:27:37,440
checks out

2221
01:27:37,440 --> 01:27:39,120
i think

2222
01:27:39,120 --> 01:27:40,560
the

2223
01:27:40,560 --> 01:27:42,239
practical

2224
01:27:42,239 --> 01:27:44,480
uh like in favor of better

2225
01:27:44,480 --> 01:27:48,159
interoperability would be to just fix it

2226
01:27:48,159 --> 01:27:50,000
and maybe complain loudly if you have

2227
01:27:50,000 --> 01:27:51,920
the ability to do that

2228
01:27:51,920 --> 01:27:55,120
but uh saying you should reject this

2229
01:27:55,120 --> 01:27:56,639
just feels like

2230
01:27:56,639 --> 01:28:00,600
breakage for the sake of breakage

2231
01:28:03,600 --> 01:28:05,920
i think if we want to say that

2232
01:28:05,920 --> 01:28:09,199
implementations uh should or must reject

2233
01:28:09,199 --> 01:28:11,360
it we could do that for v5

2234
01:28:11,360 --> 01:28:14,400
signatures and keys

2235
01:28:14,400 --> 01:28:15,600
but for

2236
01:28:15,600 --> 01:28:20,080
v4 i also don't think we can

2237
01:28:20,080 --> 01:28:20,800
for

2238
01:28:20,800 --> 01:28:24,560
full disclosure open very old versions

2239
01:28:24,560 --> 01:28:28,560
of openpgp.js also used to

2240
01:28:28,560 --> 01:28:32,719
produce malformed mpis in some cases

2241
01:28:32,719 --> 01:28:35,360
particularly if there were leading zero

2242
01:28:35,360 --> 01:28:37,600
bytes so it was a slightly different

2243
01:28:37,600 --> 01:28:39,440
issue than this one but

2244
01:28:39,440 --> 01:28:43,360
uh still i don't think we can be

2245
01:28:43,360 --> 01:28:46,320
super strict for mpis and v4

2246
01:28:46,320 --> 01:28:48,400
signatures but for v5 we could if we

2247
01:28:48,400 --> 01:28:50,799
want to

2248
01:28:51,920 --> 01:28:54,800
use this europe

2249
01:28:55,440 --> 01:28:57,920
so my concern is that if you have a

2250
01:28:57,920 --> 01:28:59,679
system that is composed

2251
01:28:59,679 --> 01:29:02,560
out of multiple components and they use

2252
01:29:02,560 --> 01:29:04,800
different uh implementations and they

2253
01:29:04,800 --> 01:29:07,600
behave differently you may be able to

2254
01:29:07,600 --> 01:29:10,320
confuse the system as a whole where one

2255
01:29:10,320 --> 01:29:11,840
of the implementations would say it's a

2256
01:29:11,840 --> 01:29:13,679
valid signature and

2257
01:29:13,679 --> 01:29:15,920
the other one may think it's an invalid

2258
01:29:15,920 --> 01:29:17,120
signature

2259
01:29:17,120 --> 01:29:20,480
and that may be able to

2260
01:29:20,480 --> 01:29:23,879
create problems

2261
01:29:36,880 --> 01:29:39,679
so i think you know

2262
01:29:39,679 --> 01:29:41,760
uh the issue that some github or

2263
01:29:41,760 --> 01:29:43,280
somebody getter signatures that are

2264
01:29:43,280 --> 01:29:44,159
wrong

2265
01:29:44,159 --> 01:29:46,159
is not really issue in that case because

2266
01:29:46,159 --> 01:29:47,920
i think they can fix their you know

2267
01:29:47,920 --> 01:29:49,600
signature generation faster than we can

2268
01:29:49,600 --> 01:29:52,239
get the implementation to check these

2269
01:29:52,239 --> 01:29:55,040
you know signatures well those they they

2270
01:29:55,040 --> 01:29:56,880
have old signatures that are that are

2271
01:29:56,880 --> 01:29:59,360
there yes that the old signatures are

2272
01:29:59,360 --> 01:30:00,880
are there that's that's true but

2273
01:30:00,880 --> 01:30:02,560
actually as i said

2274
01:30:02,560 --> 01:30:03,760
uh

2275
01:30:03,760 --> 01:30:05,199
i don't know if there's actually any way

2276
01:30:05,199 --> 01:30:07,360
of you know like somebody was saying it

2277
01:30:07,360 --> 01:30:09,679
would be really nice to get warning

2278
01:30:09,679 --> 01:30:10,960
and that's actually one of the things

2279
01:30:10,960 --> 01:30:12,159
that's been saying that we could

2280
01:30:12,159 --> 01:30:14,480
actually fix it in in before we actually

2281
01:30:14,480 --> 01:30:15,679
keep it so we could actually have an

2282
01:30:15,679 --> 01:30:18,560
implementation actually

2283
01:30:18,560 --> 01:30:20,000
reacting the signature and then checking

2284
01:30:20,000 --> 01:30:21,440
that if it's actually oh it's a

2285
01:30:21,440 --> 01:30:23,360
signature that is if we fix it it

2286
01:30:23,360 --> 01:30:24,719
actually works

2287
01:30:24,719 --> 01:30:26,400
that would actually allow you know user

2288
01:30:26,400 --> 01:30:28,639
interface or or programs to actually way

2289
01:30:28,639 --> 01:30:29,760
of you know

2290
01:30:29,760 --> 01:30:32,080
having a separate method of or or the

2291
01:30:32,080 --> 01:30:33,920
other thing is to that's just reacted on

2292
01:30:33,920 --> 01:30:36,400
all four for version five

2293
01:30:36,400 --> 01:30:38,719
but actually the most important thing of

2294
01:30:38,719 --> 01:30:40,639
course would be to get you know the

2295
01:30:40,639 --> 01:30:43,199
people who are doing this to fix them

2296
01:30:43,199 --> 01:30:45,280
so if unless you start reacting them i

2297
01:30:45,280 --> 01:30:46,880
don't think this hub is going to be

2298
01:30:46,880 --> 01:30:48,480
is this still generating those

2299
01:30:48,480 --> 01:30:50,480
signatures

2300
01:30:50,480 --> 01:30:52,400
i believe it is but i i haven't tested

2301
01:30:52,400 --> 01:30:54,480
it today so i i think because

2302
01:30:54,480 --> 01:30:56,239
they don't see any reason to change

2303
01:30:56,239 --> 01:30:57,679
until somebody actually starts breaking

2304
01:30:57,679 --> 01:30:59,440
things

2305
01:30:59,440 --> 01:31:01,520
and i think we should it would be better

2306
01:31:01,520 --> 01:31:02,800
to have you know

2307
01:31:02,800 --> 01:31:04,320
not to have this kind of corner cases

2308
01:31:04,320 --> 01:31:06,480
because they usually have as

2309
01:31:06,480 --> 01:31:08,480
as was pointed out if you have an

2310
01:31:08,480 --> 01:31:10,000
implementation that actually checks this

2311
01:31:10,000 --> 01:31:11,920
another one that doesn't and it might be

2312
01:31:11,920 --> 01:31:13,600
happening very low level in in the you

2313
01:31:13,600 --> 01:31:15,920
know you know crypto library your crypto

2314
01:31:15,920 --> 01:31:17,760
library might be saying oh no no this is

2315
01:31:17,760 --> 01:31:20,320
not an mp probably nbn's because it

2316
01:31:20,320 --> 01:31:23,520
doesn't have a first bit uh you know one

2317
01:31:23,520 --> 01:31:25,520
and and then you might not be able to

2318
01:31:25,520 --> 01:31:27,120
have to react it in that that might

2319
01:31:27,120 --> 01:31:28,719
cause you know you know this kind of

2320
01:31:28,719 --> 01:31:30,560
issues that some

2321
01:31:30,560 --> 01:31:32,320
you know one part that was supposed to

2322
01:31:32,320 --> 01:31:34,400
do something based on this and toss it

2323
01:31:34,400 --> 01:31:35,920
because it's well it's signature other

2324
01:31:35,920 --> 01:31:37,600
one doesn't because it's invalid

2325
01:31:37,600 --> 01:31:40,080
signature

2326
01:31:42,639 --> 01:31:45,360
so i'll share some sort of similar

2327
01:31:45,360 --> 01:31:48,239
practical experience from handling um

2328
01:31:48,239 --> 01:31:51,600
ac dsa signatures for the second p26 k1

2329
01:31:51,600 --> 01:31:53,440
curve there's upper and lower s

2330
01:31:53,440 --> 01:31:55,920
representations and the bitcoin ethereum

2331
01:31:55,920 --> 01:31:58,159
communities have decided to normalize to

2332
01:31:58,159 --> 01:32:01,920
lower s yet open ssl and other libraries

2333
01:32:01,920 --> 01:32:05,040
produce both upper and lower s

2334
01:32:05,040 --> 01:32:07,199
some implementations will fail to verify

2335
01:32:07,199 --> 01:32:08,480
the signature

2336
01:32:08,480 --> 01:32:09,920
some won't

2337
01:32:09,920 --> 01:32:13,040
and in practice the way i've defended

2338
01:32:13,040 --> 01:32:16,159
our our source from this is to manually

2339
01:32:16,159 --> 01:32:17,120
lower

2340
01:32:17,120 --> 01:32:19,280
the signature to low res

2341
01:32:19,280 --> 01:32:21,520
before emitting anything you know

2342
01:32:21,520 --> 01:32:23,760
outside of our library so for the for

2343
01:32:23,760 --> 01:32:25,679
the libraries that are handling this

2344
01:32:25,679 --> 01:32:27,360
they could decide

2345
01:32:27,360 --> 01:32:29,760
i'm every time i see this thing that's a

2346
01:32:29,760 --> 01:32:31,920
problem i'm gonna fix it

2347
01:32:31,920 --> 01:32:33,360
for myself

2348
01:32:33,360 --> 01:32:35,360
but it's everyone has to decide to do

2349
01:32:35,360 --> 01:32:36,719
that and it's

2350
01:32:36,719 --> 01:32:38,840
like mess in the code you know so i

2351
01:32:38,840 --> 01:32:42,080
think for five it should

2352
01:32:42,080 --> 01:32:44,159
it should error and for four you should

2353
01:32:44,159 --> 01:32:47,199
you should leave it as is

2354
01:32:49,280 --> 01:32:51,759
uses

2355
01:32:51,920 --> 01:32:55,040
so the idea came up to just issue a

2356
01:32:55,040 --> 01:32:56,880
warning i don't believe that there are

2357
01:32:56,880 --> 01:32:58,800
libraries out there that have a suitable

2358
01:32:58,800 --> 01:33:00,239
interface to

2359
01:33:00,239 --> 01:33:02,080
create warnings and even if they did

2360
01:33:02,080 --> 01:33:03,920
it's not clear

2361
01:33:03,920 --> 01:33:05,440
what an application should do with the

2362
01:33:05,440 --> 01:33:09,040
warning if they display that to the user

2363
01:33:09,040 --> 01:33:10,880
i i don't think that that would help

2364
01:33:10,880 --> 01:33:13,199
actually

2365
01:33:13,280 --> 01:33:14,880
also

2366
01:33:14,880 --> 01:33:16,239
i'm not sure if you should make an

2367
01:33:16,239 --> 01:33:19,040
exception for v4 it was it was wrong for

2368
01:33:19,040 --> 01:33:21,040
v4 before that's

2369
01:33:21,040 --> 01:33:23,840
nothing new

2370
01:33:24,960 --> 01:33:26,560
let me add one additional wrinkle here

2371
01:33:26,560 --> 01:33:28,400
which i believe openptp allows you to

2372
01:33:28,400 --> 01:33:31,920
make signatures over signatures

2373
01:33:33,040 --> 01:33:35,600
and that means that fixing a signature

2374
01:33:35,600 --> 01:33:40,239
by twiddling the bits in the mpi header

2375
01:33:40,239 --> 01:33:41,520
will change

2376
01:33:41,520 --> 01:33:42,480
the

2377
01:33:42,480 --> 01:33:45,199
uh bitwise by wise representation of the

2378
01:33:45,199 --> 01:33:46,960
signature which means that that will in

2379
01:33:46,960 --> 01:33:48,880
turn invalidate any

2380
01:33:48,880 --> 01:33:52,000
outer signature that is made over the

2381
01:33:52,000 --> 01:33:54,480
uh over a signature itself

2382
01:33:54,480 --> 01:33:56,560
so for example um

2383
01:33:56,560 --> 01:33:58,320
and if we're talking about mpis

2384
01:33:58,320 --> 01:33:59,520
generally

2385
01:33:59,520 --> 01:34:02,719
twiddling the bits in uh the mpi of say

2386
01:34:02,719 --> 01:34:04,320
a public key will actually change the

2387
01:34:04,320 --> 01:34:06,159
fingerprint of a certificate

2388
01:34:06,159 --> 01:34:08,239
which is not insignificant

2389
01:34:08,239 --> 01:34:09,360
so

2390
01:34:09,360 --> 01:34:10,960
if we're doing guidance we need to think

2391
01:34:10,960 --> 01:34:13,440
about the guidance about mbis for

2392
01:34:13,440 --> 01:34:16,000
signatures maybe distinctly from the

2393
01:34:16,000 --> 01:34:19,679
guidance for mpis in public key material

2394
01:34:19,679 --> 01:34:21,679
otherwise you have two separate

2395
01:34:21,679 --> 01:34:24,080
fingerprints for the same

2396
01:34:24,080 --> 01:34:26,639
public key

2397
01:34:27,600 --> 01:34:29,920
it's a mess

2398
01:34:29,920 --> 01:34:31,199
yeah i think if you're fixing this it's

2399
01:34:31,199 --> 01:34:33,360
at a very low level in your code

2400
01:34:33,360 --> 01:34:35,360
right

2401
01:34:35,360 --> 01:34:38,159
okay um

2402
01:34:39,520 --> 01:34:40,639
i don't know if we're ready to kind of

2403
01:34:40,639 --> 01:34:42,480
do a poll on this i think maybe we'd be

2404
01:34:42,480 --> 01:34:44,560
getting him could we get a volunteer to

2405
01:34:44,560 --> 01:34:46,480
do a produce a merge request i don't

2406
01:34:46,480 --> 01:34:47,840
think we have one right now no that

2407
01:34:47,840 --> 01:34:49,600
would be great right actually

2408
01:34:49,600 --> 01:34:51,360
so yeah so would somebody be willing to

2409
01:34:51,360 --> 01:34:55,360
try and write uh merge requests to

2410
01:34:55,600 --> 01:34:57,040
to propose something that seems

2411
01:34:57,040 --> 01:34:58,719
reasonable to you because based on this

2412
01:34:58,719 --> 01:35:00,239
discussion yeah we've we've had we've

2413
01:35:00,239 --> 01:35:01,679
had a lot of different perspectives

2414
01:35:01,679 --> 01:35:03,280
coming in here and it's hard to see what

2415
01:35:03,280 --> 01:35:04,960
the right outcome is

2416
01:35:04,960 --> 01:35:06,400
maybe if we had

2417
01:35:06,400 --> 01:35:10,320
um i see a hand raised can i

2418
01:35:11,199 --> 01:35:13,280
fantastic thank you diane okay so i

2419
01:35:13,280 --> 01:35:15,360
think that's probably where we should

2420
01:35:15,360 --> 01:35:17,760
move on from that one i think the very

2421
01:35:17,760 --> 01:35:18,960
last one and then we have some

2422
01:35:18,960 --> 01:35:23,360
presentations for for amusement um

2423
01:35:24,080 --> 01:35:25,040
so

2424
01:35:25,040 --> 01:35:26,080
so i think we've made good progress

2425
01:35:26,080 --> 01:35:28,400
we've confirmed on the list the question

2426
01:35:28,400 --> 01:35:29,840
to people is

2427
01:35:29,840 --> 01:35:31,040
uh

2428
01:35:31,040 --> 01:35:32,639
we've got to have six

2429
01:35:32,639 --> 01:35:34,719
let's imagine that draft seven or eight

2430
01:35:34,719 --> 01:35:36,320
or something

2431
01:35:36,320 --> 01:35:38,239
includes the resolution of all these

2432
01:35:38,239 --> 01:35:40,960
issues that we have so far

2433
01:35:40,960 --> 01:35:42,080
we'll probably want to do another

2434
01:35:42,080 --> 01:35:43,920
working group last call at some point uh

2435
01:35:43,920 --> 01:35:46,239
do we want to raise the bar for that

2436
01:35:46,239 --> 01:35:48,880
for future kind of work uh to basically

2437
01:35:48,880 --> 01:35:50,800
ask people to only really be looking at

2438
01:35:50,800 --> 01:35:52,960
the diffs from let's say seven to eight

2439
01:35:52,960 --> 01:35:55,280
or eight to nine

2440
01:35:55,280 --> 01:35:57,520
you know if so if somebody finds some uh

2441
01:35:57,520 --> 01:35:59,760
some new facts or or comes with some new

2442
01:35:59,760 --> 01:36:00,800
information then we'd have to look at

2443
01:36:00,800 --> 01:36:01,760
things but

2444
01:36:01,760 --> 01:36:03,520
should we raise the bar to try and get

2445
01:36:03,520 --> 01:36:04,960
ourselves done

2446
01:36:04,960 --> 01:36:06,960
um by essentially encouraging people to

2447
01:36:06,960 --> 01:36:10,239
only look at the diffs beyond you know

2448
01:36:10,239 --> 01:36:12,560
from seven to eight or whatever

2449
01:36:12,560 --> 01:36:15,199
draft actually resolves these issues

2450
01:36:15,199 --> 01:36:16,480
paul

2451
01:36:16,480 --> 01:36:18,960
uh paolo does a.d um speaking to a

2452
01:36:18,960 --> 01:36:21,520
former ad stefan uh

2453
01:36:21,520 --> 01:36:22,639
is

2454
01:36:22,639 --> 01:36:24,800
can you do that as a process i think not

2455
01:36:24,800 --> 01:36:26,320
right like we do work a group last call

2456
01:36:26,320 --> 01:36:28,400
it goes over the entire document

2457
01:36:28,400 --> 01:36:29,360
yeah but

2458
01:36:29,360 --> 01:36:32,080
it's an expectation matter so and yes it

2459
01:36:32,080 --> 01:36:34,560
has been done in https for example but

2460
01:36:34,560 --> 01:36:36,159
if someone does it anyway against your

2461
01:36:36,159 --> 01:36:37,440
expectation what are you going to do

2462
01:36:37,440 --> 01:36:39,520
with that information like are you going

2463
01:36:39,520 --> 01:36:41,520
to then say do you actively ignore it on

2464
01:36:41,520 --> 01:36:43,440
the list because no no we think you do

2465
01:36:43,440 --> 01:36:44,880
you deal with it but it's ok it's a

2466
01:36:44,880 --> 01:36:46,960
question of you know if we if the if the

2467
01:36:46,960 --> 01:36:48,560
working group and i think so http did

2468
01:36:48,560 --> 01:36:50,719
this a few times um they basically

2469
01:36:50,719 --> 01:36:52,239
agreed that they would they wanted to

2470
01:36:52,239 --> 01:36:54,480
get stuff out so they were

2471
01:36:54,480 --> 01:36:56,000
they were asking people to look at the

2472
01:36:56,000 --> 01:36:57,199
divs if people look at other things

2473
01:36:57,199 --> 01:36:58,719
you've got to deal with it but i think

2474
01:36:58,719 --> 01:37:03,159
we can do it if people want to do it

2475
01:37:09,520 --> 01:37:10,239
so

2476
01:37:10,239 --> 01:37:12,638
um

2477
01:37:12,800 --> 01:37:14,400
nobody's in the queue

2478
01:37:14,400 --> 01:37:16,800
that may indicate a lack of enthusiasm

2479
01:37:16,800 --> 01:37:19,199
or it may indicate fatigue after an hour

2480
01:37:19,199 --> 01:37:20,880
and a half of yeah

2481
01:37:20,880 --> 01:37:23,040
sorry for these things okay so uh for

2482
01:37:23,040 --> 01:37:24,800
this one i'll i'll bring it up on the

2483
01:37:24,800 --> 01:37:26,080
mailing list

2484
01:37:26,080 --> 01:37:28,960
oh okay thank you ben

2485
01:37:28,960 --> 01:37:31,520
sorry you you called so passionately for

2486
01:37:31,520 --> 01:37:33,600
people to be in the queue uh ben kadek

2487
01:37:33,600 --> 01:37:34,880
so

2488
01:37:34,880 --> 01:37:36,080
yeah i think it's it's probably

2489
01:37:36,080 --> 01:37:38,639
worthwhile doing this uh and to sort of

2490
01:37:38,639 --> 01:37:40,159
paul's question you could certainly

2491
01:37:40,159 --> 01:37:41,760
frame this as saying

2492
01:37:41,760 --> 01:37:42,880
we did

2493
01:37:42,880 --> 01:37:45,199
a working class call on this previous

2494
01:37:45,199 --> 01:37:47,440
version and we believe you after

2495
01:37:47,440 --> 01:37:49,360
whatever evidence that it has consensus

2496
01:37:49,360 --> 01:37:52,400
and so bear in mind is reviewing that

2497
01:37:52,400 --> 01:37:54,239
we have a presumption that this other

2498
01:37:54,239 --> 01:37:56,400
stuff already has consensus and so focus

2499
01:37:56,400 --> 01:37:58,480
your review on these changes

2500
01:37:58,480 --> 01:38:01,040
uh would be most fruitful but as stephen

2501
01:38:01,040 --> 01:38:02,880
says of course if somebody does

2502
01:38:02,880 --> 01:38:05,199
come up with a real issue even on text

2503
01:38:05,199 --> 01:38:06,639
that has been reviewed already if you do

2504
01:38:06,639 --> 01:38:08,400
need to handle it you don't just

2505
01:38:08,400 --> 01:38:10,879
ignore it

2506
01:38:14,880 --> 01:38:16,800
okay so yeah we're we're all tired of

2507
01:38:16,800 --> 01:38:19,760
issues so uh what i'll do is i'll um

2508
01:38:19,760 --> 01:38:21,199
i'll raise this on the list when we

2509
01:38:21,199 --> 01:38:22,239
think we've

2510
01:38:22,239 --> 01:38:24,639
got a next draft house and we'll see how

2511
01:38:24,639 --> 01:38:26,159
people think about it then

2512
01:38:26,159 --> 01:38:29,040
so there's no poll for this one

2513
01:38:29,040 --> 01:38:31,199
i think that was yeah that was our last

2514
01:38:31,199 --> 01:38:34,320
steps yep so um

2515
01:38:34,320 --> 01:38:36,639
we have uh

2516
01:38:36,639 --> 01:38:38,400
so we are not chartered to do work

2517
01:38:38,400 --> 01:38:41,199
beyond this crypto refresh uh but there

2518
01:38:41,199 --> 01:38:43,360
has been interest expressed uh on the

2519
01:38:43,360 --> 01:38:45,679
mailing list and

2520
01:38:45,679 --> 01:38:48,560
and here at ihf 114 about potential for

2521
01:38:48,560 --> 01:38:49,760
rechartering

2522
01:38:49,760 --> 01:38:51,440
we are not going to discuss rechartering

2523
01:38:51,440 --> 01:38:53,760
right now but we have two proposed

2524
01:38:53,760 --> 01:38:55,840
presentations about some material that

2525
01:38:55,840 --> 01:38:58,639
might feed into a rechartering

2526
01:38:58,639 --> 01:38:59,760
um

2527
01:38:59,760 --> 01:39:01,679
so if folks have other things that they

2528
01:39:01,679 --> 01:39:04,639
want to raise about the crypto refresh

2529
01:39:04,639 --> 01:39:06,239
beyond the issues that we've just gone

2530
01:39:06,239 --> 01:39:08,880
through now is a good time to raise them

2531
01:39:08,880 --> 01:39:11,760
if you don't then we want to give the

2532
01:39:11,760 --> 01:39:13,760
remainder of the time to uh some

2533
01:39:13,760 --> 01:39:15,760
discussion about these uh

2534
01:39:15,760 --> 01:39:17,440
potential issues that would come up

2535
01:39:17,440 --> 01:39:20,320
after a recharger does that sound right

2536
01:39:20,320 --> 01:39:21,760
yeah

2537
01:39:21,760 --> 01:39:24,080
and i guess what we neglected to say is

2538
01:39:24,080 --> 01:39:25,760
that we'll obviously take the minutes to

2539
01:39:25,760 --> 01:39:27,280
the list of these resolutions from the

2540
01:39:27,280 --> 01:39:29,840
issues and then we'll we'll depend on

2541
01:39:29,840 --> 01:39:31,199
our kind editor

2542
01:39:31,199 --> 01:39:32,880
to uh

2543
01:39:32,880 --> 01:39:35,360
make changes and get a draft seven

2544
01:39:35,360 --> 01:39:37,440
yeah uh we'll talk to paul about when

2545
01:39:37,440 --> 01:39:40,599
that's possible

2546
01:39:40,719 --> 01:39:44,400
and i guess nobody in queue

2547
01:39:45,280 --> 01:39:51,239
if nobody's in qn i guess daniel is up

2548
01:39:54,800 --> 01:39:56,660
thank you

2549
01:39:56,660 --> 01:39:59,600
[Music]

2550
01:39:59,600 --> 01:40:01,600
i'll just hold it

2551
01:40:01,600 --> 01:40:06,159
yes uh thank you steven um and yeah so

2552
01:40:06,159 --> 01:40:07,280
just to

2553
01:40:07,280 --> 01:40:10,159
reiterate this uh this presentation is

2554
01:40:10,159 --> 01:40:12,239
explicitly out of scope for the crypto

2555
01:40:12,239 --> 01:40:15,520
refresh it's more so meant to

2556
01:40:15,520 --> 01:40:18,639
uh provide some ideas and make some

2557
01:40:18,639 --> 01:40:21,600
motivation to get this crypto refresh

2558
01:40:21,600 --> 01:40:24,159
out the door and uh get to

2559
01:40:24,159 --> 01:40:27,040
working on new stuff uh of course that

2560
01:40:27,040 --> 01:40:29,199
only works if there's actually interest

2561
01:40:29,199 --> 01:40:32,159
in these ideas uh otherwise

2562
01:40:32,159 --> 01:40:33,280
well

2563
01:40:33,280 --> 01:40:34,159
uh

2564
01:40:34,159 --> 01:40:36,560
i hope there will be um so yeah next

2565
01:40:36,560 --> 01:40:38,880
slide please

2566
01:40:38,880 --> 01:40:40,560
so um

2567
01:40:40,560 --> 01:40:43,600
first for and

2568
01:40:44,400 --> 01:40:47,520
for an overview of the status quo in

2569
01:40:47,520 --> 01:40:49,920
openpgp we have

2570
01:40:49,920 --> 01:40:52,480
acemeter keys which are typically long

2571
01:40:52,480 --> 01:40:53,360
lived

2572
01:40:53,360 --> 01:40:56,000
and managed in a key ring

2573
01:40:56,000 --> 01:40:57,520
and we have

2574
01:40:57,520 --> 01:40:59,440
symmetric keys

2575
01:40:59,440 --> 01:41:02,800
which are either session keys or derived

2576
01:41:02,800 --> 01:41:07,840
from a a passphrase or a password

2577
01:41:07,840 --> 01:41:10,159
that you can

2578
01:41:10,159 --> 01:41:13,280
encrypt messages and keys with next like

2579
01:41:13,280 --> 01:41:15,440
this

2580
01:41:15,440 --> 01:41:16,560
and

2581
01:41:16,560 --> 01:41:18,400
asymmetric cryptography

2582
01:41:18,400 --> 01:41:22,639
uh in general is um at least the the

2583
01:41:22,639 --> 01:41:24,480
algorithms that we have in openpgp

2584
01:41:24,480 --> 01:41:25,600
currently

2585
01:41:25,600 --> 01:41:26,400
are

2586
01:41:26,400 --> 01:41:28,560
more vulnerable to

2587
01:41:28,560 --> 01:41:31,440
quantum computers and are also slower

2588
01:41:31,440 --> 01:41:32,800
whereas

2589
01:41:32,800 --> 01:41:36,239
symmetric cryptography typically

2590
01:41:36,239 --> 01:41:39,280
is is less vulnerable at least if you

2591
01:41:39,280 --> 01:41:40,159
use

2592
01:41:40,159 --> 01:41:42,480
sufficiently large keys

2593
01:41:42,480 --> 01:41:43,520
and

2594
01:41:43,520 --> 01:41:46,719
is also faster or at least

2595
01:41:46,719 --> 01:41:47,520
the

2596
01:41:47,520 --> 01:41:50,080
the performance for a given security

2597
01:41:50,080 --> 01:41:52,400
level is is better

2598
01:41:52,400 --> 01:41:54,560
next slide please

2599
01:41:54,560 --> 01:41:55,360
so

2600
01:41:55,360 --> 01:41:59,199
um this leads us to the conclusion that

2601
01:41:59,199 --> 01:42:01,920
there are sort of a missing

2602
01:42:01,920 --> 01:42:05,040
middle or a missing type of

2603
01:42:05,040 --> 01:42:08,080
keys if you want to

2604
01:42:08,080 --> 01:42:10,560
encrypt stuff with a symmetric key if

2605
01:42:10,560 --> 01:42:13,440
you don't need asymmetric

2606
01:42:13,440 --> 01:42:16,480
cryptography so it would be really nice

2607
01:42:16,480 --> 01:42:17,760
if you could

2608
01:42:17,760 --> 01:42:22,239
uh store a symmetric key in a long-term

2609
01:42:22,239 --> 01:42:23,520
key ring

2610
01:42:23,520 --> 01:42:25,600
to use

2611
01:42:25,600 --> 01:42:27,679
to to symmetrically encrypt stuff but

2612
01:42:27,679 --> 01:42:30,719
maybe also to symmetrically sign stuff

2613
01:42:30,719 --> 01:42:33,840
uh using an hmac or a cmac

2614
01:42:33,840 --> 01:42:36,719
if it's just for

2615
01:42:36,719 --> 01:42:39,520
yourself or local storage

2616
01:42:39,520 --> 01:42:42,400
next slide please

2617
01:42:42,400 --> 01:42:45,440
so yeah for the use cases of

2618
01:42:45,440 --> 01:42:47,920
symmetric encryption that we see that we

2619
01:42:47,920 --> 01:42:49,520
have in mind for this

2620
01:42:49,520 --> 01:42:51,920
uh is yeah so if you

2621
01:42:51,920 --> 01:42:54,719
have some symmetric file

2622
01:42:54,719 --> 01:42:57,040
encryption or you have some file storage

2623
01:42:57,040 --> 01:42:59,040
that you want to

2624
01:42:59,040 --> 01:43:01,440
uh store files

2625
01:43:01,440 --> 01:43:04,400
symmetrically encrypted for backup or

2626
01:43:04,400 --> 01:43:06,639
long term storage

2627
01:43:06,639 --> 01:43:10,639
or on a usb stick or whatever

2628
01:43:10,719 --> 01:43:13,920
or if you want to

2629
01:43:13,920 --> 01:43:16,239
symmetrically re-encrypt the the

2630
01:43:16,239 --> 01:43:18,800
messages the emails that you got for

2631
01:43:18,800 --> 01:43:20,159
example

2632
01:43:20,159 --> 01:43:22,840
um for long-term

2633
01:43:22,840 --> 01:43:25,119
archival you can

2634
01:43:25,119 --> 01:43:27,119
decrypt them asymmetrically as they come

2635
01:43:27,119 --> 01:43:28,480
in

2636
01:43:28,480 --> 01:43:30,320
and grip them symmetrically and store

2637
01:43:30,320 --> 01:43:33,280
them like that so that

2638
01:43:33,280 --> 01:43:35,760
yeah it's it's smaller it's faster and

2639
01:43:35,760 --> 01:43:38,159
then if you want to retrieve them in the

2640
01:43:38,159 --> 01:43:40,560
future decryption will be faster

2641
01:43:40,560 --> 01:43:43,280
and in general will be more secure again

2642
01:43:43,280 --> 01:43:44,000
as

2643
01:43:44,000 --> 01:43:45,440
against

2644
01:43:45,440 --> 01:43:47,119
quantum computers

2645
01:43:47,119 --> 01:43:48,000
and

2646
01:43:48,000 --> 01:43:50,719
in in this way it lets us

2647
01:43:50,719 --> 01:43:52,719
prepare let's say

2648
01:43:52,719 --> 01:43:53,760
um

2649
01:43:53,760 --> 01:43:57,040
for quantum computers even if they

2650
01:43:57,040 --> 01:43:59,119
aren't here yet um

2651
01:43:59,119 --> 01:43:59,840
but

2652
01:43:59,840 --> 01:44:02,080
at least then we don't have a giant body

2653
01:44:02,080 --> 01:44:02,880
of

2654
01:44:02,880 --> 01:44:06,719
um rsa encrypted and ec easy dh

2655
01:44:06,719 --> 01:44:08,480
encrypted

2656
01:44:08,480 --> 01:44:12,239
messages lying around let's say

2657
01:44:12,239 --> 01:44:15,119
and then finally for drafts before

2658
01:44:15,119 --> 01:44:18,159
you're sending an email

2659
01:44:18,159 --> 01:44:20,639
it would be nice to be able to

2660
01:44:20,639 --> 01:44:22,719
symmetrically encrypt them again it's

2661
01:44:22,719 --> 01:44:25,040
it's faster you you're not sending it

2662
01:44:25,040 --> 01:44:26,719
yet so you don't need asymmetric

2663
01:44:26,719 --> 01:44:28,880
encryption you can store them on the

2664
01:44:28,880 --> 01:44:31,040
server if you want to

2665
01:44:31,040 --> 01:44:33,199
continue editing the draft

2666
01:44:33,199 --> 01:44:35,840
somewhere else later

2667
01:44:35,840 --> 01:44:39,440
and yeah next slide please

2668
01:44:39,440 --> 01:44:42,560
and then for the use cases of

2669
01:44:42,560 --> 01:44:46,000
symmetric signatures or macs

2670
01:44:46,000 --> 01:44:46,960
so

2671
01:44:46,960 --> 01:44:49,840
if you have a symmetric key

2672
01:44:49,840 --> 01:44:52,719
um that you want to store

2673
01:44:52,719 --> 01:44:55,600
and that's only for symmetric usage then

2674
01:44:55,600 --> 01:44:57,679
you might also want

2675
01:44:57,679 --> 01:44:59,840
symmetra key binding signatures just to

2676
01:44:59,840 --> 01:45:01,280
be able to store

2677
01:45:01,280 --> 01:45:03,119
information about the key you know

2678
01:45:03,119 --> 01:45:07,119
expiry and everything else that we have

2679
01:45:07,119 --> 01:45:09,840
similarly you might want to store some

2680
01:45:09,840 --> 01:45:12,560
signature about file

2681
01:45:12,560 --> 01:45:15,600
to make sure that it's authentic it

2682
01:45:15,600 --> 01:45:17,440
hasn't been tampered with

2683
01:45:17,440 --> 01:45:19,520
or if you put it on a usb stick and

2684
01:45:19,520 --> 01:45:21,920
retrieve it later to check that it's

2685
01:45:21,920 --> 01:45:24,000
still the same file

2686
01:45:24,000 --> 01:45:27,440
um might be useful for that or if you

2687
01:45:27,440 --> 01:45:29,040
want to store

2688
01:45:29,040 --> 01:45:30,400
the

2689
01:45:30,400 --> 01:45:32,400
signature verification result let's say

2690
01:45:32,400 --> 01:45:35,600
you get an email you you check using rsa

2691
01:45:35,600 --> 01:45:38,159
or ecdsa or eddsa

2692
01:45:38,159 --> 01:45:39,199
that

2693
01:45:39,199 --> 01:45:41,440
the email was signed and you you don't

2694
01:45:41,440 --> 01:45:44,960
want to have to do that every time

2695
01:45:44,960 --> 01:45:47,760
that you retrieve the email later from

2696
01:45:47,760 --> 01:45:49,600
archival

2697
01:45:49,600 --> 01:45:53,280
so you you store the

2698
01:45:53,280 --> 01:45:56,560
verification result using a symmetric

2699
01:45:56,560 --> 01:45:58,480
signature let's say

2700
01:45:58,480 --> 01:46:01,199
next slide please

2701
01:46:01,280 --> 01:46:02,480
so

2702
01:46:02,480 --> 01:46:05,280
our proposed solution to this is

2703
01:46:05,280 --> 01:46:09,280
admittedly a little bit hacky

2704
01:46:09,600 --> 01:46:10,800
our

2705
01:46:10,800 --> 01:46:14,159
idea is to define two new

2706
01:46:14,159 --> 01:46:15,520
public

2707
01:46:15,520 --> 01:46:18,960
key algorithm ideas ids

2708
01:46:18,960 --> 01:46:22,000
namely aad and hmac

2709
01:46:22,000 --> 01:46:24,320
so the reason

2710
01:46:24,320 --> 01:46:27,520
we are proposing that is because the the

2711
01:46:27,520 --> 01:46:29,360
semantics of

2712
01:46:29,360 --> 01:46:32,239
uh public key cryptography in openpgp

2713
01:46:32,239 --> 01:46:33,360
today

2714
01:46:33,360 --> 01:46:36,400
match much more closely what we want to

2715
01:46:36,400 --> 01:46:38,159
achieve in the sense that

2716
01:46:38,159 --> 01:46:41,520
you encrypt a message with some

2717
01:46:41,520 --> 01:46:44,800
key that you refer to by a fingerprint

2718
01:46:44,800 --> 01:46:46,320
for example

2719
01:46:46,320 --> 01:46:48,639
or you sign a message

2720
01:46:48,639 --> 01:46:50,719
with a key

2721
01:46:50,719 --> 01:46:54,000
whereas for symmetric cryptography and

2722
01:46:54,000 --> 01:46:58,080
open php today you you encrypt a message

2723
01:46:58,080 --> 01:47:00,320
with a password and you derive a key

2724
01:47:00,320 --> 01:47:04,000
from that there's no way to refer to a

2725
01:47:04,000 --> 01:47:07,040
long term key let's say

2726
01:47:07,040 --> 01:47:09,600
um so in that sense it's much more

2727
01:47:09,600 --> 01:47:12,800
convenient to be able to stick

2728
01:47:12,800 --> 01:47:15,679
a public key algorithm id in

2729
01:47:15,679 --> 01:47:18,400
a key packet a signature packet and a

2730
01:47:18,400 --> 01:47:22,239
public key encrypted session key packet

2731
01:47:22,239 --> 01:47:23,440
despite

2732
01:47:23,440 --> 01:47:26,159
of course the the name not

2733
01:47:26,159 --> 01:47:27,679
matching

2734
01:47:27,679 --> 01:47:29,040
uh what

2735
01:47:29,040 --> 01:47:32,480
what it actually is so there's one

2736
01:47:32,480 --> 01:47:33,679
idea

2737
01:47:33,679 --> 01:47:34,639
um

2738
01:47:34,639 --> 01:47:36,560
of course it's not necessary to do so

2739
01:47:36,560 --> 01:47:40,400
but to to fix the mismatch we could

2740
01:47:40,400 --> 01:47:42,480
retcon the name

2741
01:47:42,480 --> 01:47:46,080
uh of well the the algorithm

2742
01:47:46,080 --> 01:47:46,960
uh

2743
01:47:46,960 --> 01:47:50,400
registry perhaps and also maybe the

2744
01:47:50,400 --> 01:47:52,480
the public key encryptization key packet

2745
01:47:52,480 --> 01:47:54,719
and the

2746
01:47:54,719 --> 01:47:56,400
symmetric key encrypted attention key

2747
01:47:56,400 --> 01:47:58,239
packet

2748
01:47:58,239 --> 01:48:00,639
which by the way the latter i would

2749
01:48:00,639 --> 01:48:02,480
argue is already

2750
01:48:02,480 --> 01:48:04,960
misnamed because it's more

2751
01:48:04,960 --> 01:48:07,040
password encrypted session key packet

2752
01:48:07,040 --> 01:48:10,159
but okay so we could rename those

2753
01:48:10,159 --> 01:48:11,600
perhaps to

2754
01:48:11,600 --> 01:48:13,360
uh persistent key encrypted session key

2755
01:48:13,360 --> 01:48:14,960
packet or

2756
01:48:14,960 --> 01:48:17,760
and derived key encrypted session packet

2757
01:48:17,760 --> 01:48:20,400
or personal key and shared key

2758
01:48:20,400 --> 01:48:22,239
or something like that or we could leave

2759
01:48:22,239 --> 01:48:24,480
it as this and just live with the

2760
01:48:24,480 --> 01:48:27,199
hackiness of having

2761
01:48:27,199 --> 01:48:29,920
symmetric algorithms in the public key

2762
01:48:29,920 --> 01:48:30,960
algorithm

2763
01:48:30,960 --> 01:48:33,679
um registry

2764
01:48:33,679 --> 01:48:36,000
um

2765
01:48:37,110 --> 01:48:38,560
[Music]

2766
01:48:38,560 --> 01:48:39,840
next slide please

2767
01:48:39,840 --> 01:48:41,199
so i've just thought of some guidance

2768
01:48:41,199 --> 01:48:44,879
for us to give the designated experts

2769
01:48:45,119 --> 01:48:48,480
not to do this or what

2770
01:48:48,880 --> 01:48:51,360
fair enough

2771
01:48:53,280 --> 01:48:54,320
so

2772
01:48:54,320 --> 01:48:58,639
despite that guidance we do have

2773
01:48:58,639 --> 01:49:01,840
experimental implementations uh in a

2774
01:49:01,840 --> 01:49:02,800
fork

2775
01:49:02,800 --> 01:49:03,679
uh

2776
01:49:03,679 --> 01:49:07,199
and a branch of openphp.js and go crypto

2777
01:49:07,199 --> 01:49:08,800
respectively

2778
01:49:08,800 --> 01:49:10,960
so this is not meant to

2779
01:49:10,960 --> 01:49:13,679
uh be used already

2780
01:49:13,679 --> 01:49:14,639
but

2781
01:49:14,639 --> 01:49:16,639
yeah just to see

2782
01:49:16,639 --> 01:49:20,159
how it would work and uh we have a draft

2783
01:49:20,159 --> 01:49:21,599
specification

2784
01:49:21,599 --> 01:49:22,719
um

2785
01:49:22,719 --> 01:49:23,760
again

2786
01:49:23,760 --> 01:49:27,679
it it still very much up for debate

2787
01:49:27,679 --> 01:49:30,320
another way to do this would be to

2788
01:49:30,320 --> 01:49:33,360
define a private public key algorithm we

2789
01:49:33,360 --> 01:49:35,360
could use algorithms

2790
01:49:35,360 --> 01:49:38,000
100 101

2791
01:49:38,000 --> 01:49:40,080
which is what actually the experimental

2792
01:49:40,080 --> 01:49:42,400
implementations do

2793
01:49:42,400 --> 01:49:44,960
or i mean i think there would be some

2794
01:49:44,960 --> 01:49:48,480
value in having this be interoperable if

2795
01:49:48,480 --> 01:49:50,159
you want to

2796
01:49:50,159 --> 01:49:52,960
export your archive of email and import

2797
01:49:52,960 --> 01:49:55,520
it somewhere else it's it's useful if

2798
01:49:55,520 --> 01:49:57,679
other implementations also support it so

2799
01:49:57,679 --> 01:49:58,960
then

2800
01:49:58,960 --> 01:50:01,199
i would somewhat argue for

2801
01:50:01,199 --> 01:50:03,840
uh you know actually defining an

2802
01:50:03,840 --> 01:50:05,840
algorithm id

2803
01:50:05,840 --> 01:50:08,400
but you might also argue this solution

2804
01:50:08,400 --> 01:50:10,400
is way too hacky we should define new

2805
01:50:10,400 --> 01:50:13,440
packets with better names for this or or

2806
01:50:13,440 --> 01:50:14,960
something like that

2807
01:50:14,960 --> 01:50:17,679
next slide please

2808
01:50:17,920 --> 01:50:19,760
so yeah the questions for the working

2809
01:50:19,760 --> 01:50:21,840
group i have is first of all is there

2810
01:50:21,840 --> 01:50:23,520
interest in this

2811
01:50:23,520 --> 01:50:25,360
if so

2812
01:50:25,360 --> 01:50:28,639
should we add it to the next charter

2813
01:50:28,639 --> 01:50:30,960
and if so do you think this is a

2814
01:50:30,960 --> 01:50:32,960
reasonable solution or is this way too

2815
01:50:32,960 --> 01:50:34,239
hacky

2816
01:50:34,239 --> 01:50:35,920
and if you think it's a reasonable

2817
01:50:35,920 --> 01:50:38,320
solution please do read the draft and

2818
01:50:38,320 --> 01:50:40,960
let me know if you have any comments

2819
01:50:40,960 --> 01:50:43,280
thank you thanks again and are there any

2820
01:50:43,280 --> 01:50:44,639
questions of course

2821
01:50:44,639 --> 01:50:48,960
yeah so we have a little time okay

2822
01:50:51,199 --> 01:50:53,360
right that's a quick question the you

2823
01:50:53,360 --> 01:50:55,920
mentioned signature verifications is

2824
01:50:55,920 --> 01:50:58,480
that in the draft or is that what's here

2825
01:50:58,480 --> 01:51:00,159
it's in there yes so there is an

2826
01:51:00,159 --> 01:51:02,400
algorithm id for hmac in the draft now

2827
01:51:02,400 --> 01:51:04,880
so you can symmetrically sign using hmac

2828
01:51:04,880 --> 01:51:06,480
and then also verify

2829
01:51:06,480 --> 01:51:09,199
the symmetric signatures

2830
01:51:09,199 --> 01:51:11,599
using the long term symmetric key

2831
01:51:11,599 --> 01:51:13,760
right so but you i thought you mentioned

2832
01:51:13,760 --> 01:51:15,520
some some idea about having storing a

2833
01:51:15,520 --> 01:51:18,880
persistent verification result right so

2834
01:51:18,880 --> 01:51:21,280
no that's not in the draft no there is

2835
01:51:21,280 --> 01:51:24,480
no uh specific mechanism for how to

2836
01:51:24,480 --> 01:51:26,960
encode that or how to store that

2837
01:51:26,960 --> 01:51:28,239
because there is a there is a thing

2838
01:51:28,239 --> 01:51:29,840
going through lamps from the stefan

2839
01:51:29,840 --> 01:51:31,679
santos on about signature verification

2840
01:51:31,679 --> 01:51:33,360
tokens that might be good looking at if

2841
01:51:33,360 --> 01:51:35,440
that's actually interesting okay thank

2842
01:51:35,440 --> 01:51:36,719
you

2843
01:51:36,719 --> 01:51:37,760
okay

2844
01:51:37,760 --> 01:51:38,480
so

2845
01:51:38,480 --> 01:51:42,080
thank you um aaron

2846
01:51:45,040 --> 01:51:49,679
i can give you control of the slides and

2847
01:51:50,320 --> 01:51:51,360
okay

2848
01:51:51,360 --> 01:51:53,760
so if i click it forward

2849
01:51:53,760 --> 01:51:56,320
no no you you should see the

2850
01:51:56,320 --> 01:51:58,559
okay

2851
01:51:59,360 --> 01:52:01,760
okay so today

2852
01:52:01,760 --> 01:52:04,960
i wanted to present uh how like like an

2853
01:52:04,960 --> 01:52:07,360
idea we've had to do automatically email

2854
01:52:07,360 --> 01:52:08,960
forwarding

2855
01:52:08,960 --> 01:52:11,280
and this means that with the user being

2856
01:52:11,280 --> 01:52:13,520
offline we can forward the email to

2857
01:52:13,520 --> 01:52:16,719
another open bgp user um

2858
01:52:16,719 --> 01:52:19,280
with clearly uh setting up this protocol

2859
01:52:19,280 --> 01:52:20,960
beforehand

2860
01:52:20,960 --> 01:52:22,080
um

2861
01:52:22,080 --> 01:52:22,800
so

2862
01:52:22,800 --> 01:52:24,800
this is the outline it's gonna be i'm

2863
01:52:24,800 --> 01:52:26,400
gonna try to keep it short especially

2864
01:52:26,400 --> 01:52:29,199
the mathematical part of it but yeah

2865
01:52:29,199 --> 01:52:31,360
so this is the concept of automatic

2866
01:52:31,360 --> 01:52:32,480
email forwarding i think we're all

2867
01:52:32,480 --> 01:52:35,040
familiar with it uh and the problem is

2868
01:52:35,040 --> 01:52:37,280
so often that openpgp in order to do

2869
01:52:37,280 --> 01:52:39,360
that you just gotta share the key so

2870
01:52:39,360 --> 01:52:41,360
you're gonna take your key and send it

2871
01:52:41,360 --> 01:52:43,679
to the forward d so that they can read

2872
01:52:43,679 --> 01:52:45,599
the ciphertext

2873
01:52:45,599 --> 01:52:47,840
in this case instead what we do

2874
01:52:47,840 --> 01:52:50,080
is we delegate

2875
01:52:50,080 --> 01:52:52,000
the authority of transforming the

2876
01:52:52,000 --> 01:52:55,599
ciphertext to to a male cervical proxy

2877
01:52:55,599 --> 01:52:58,080
that can directly deliver a transform

2878
01:52:58,080 --> 01:53:00,320
cipher text to charts that will be able

2879
01:53:00,320 --> 01:53:01,679
to read the email while we're on

2880
01:53:01,679 --> 01:53:05,280
holidays or something like that

2881
01:53:05,599 --> 01:53:07,040
um so

2882
01:53:07,040 --> 01:53:09,199
the idea is basically the following

2883
01:53:09,199 --> 01:53:12,080
alice is the original sender does not

2884
01:53:12,080 --> 01:53:13,840
know the fact that there's a forwarding

2885
01:53:13,840 --> 01:53:16,080
ongoing and she basically sends an

2886
01:53:16,080 --> 01:53:20,159
encrypted open pgp message to bob as

2887
01:53:20,159 --> 01:53:23,360
as all the papers we've read so far and

2888
01:53:23,360 --> 01:53:26,880
uh but pop has basically um created a

2889
01:53:26,880 --> 01:53:29,760
proxy transformation parameter this kbc

2890
01:53:29,760 --> 01:53:31,760
uploaded it to the proxy and the proxy

2891
01:53:31,760 --> 01:53:33,520
can use this per this transformation

2892
01:53:33,520 --> 01:53:35,119
parameter

2893
01:53:35,119 --> 01:53:37,840
to transform the ciphertext into a

2894
01:53:37,840 --> 01:53:39,679
message for chars

2895
01:53:39,679 --> 01:53:42,159
charles must have received as well

2896
01:53:42,159 --> 01:53:44,960
dc the private key

2897
01:53:44,960 --> 01:53:46,880
that will use them to decrypt the

2898
01:53:46,880 --> 01:53:50,400
message coming from the proxy

2899
01:53:50,400 --> 01:53:53,520
here is what happens behind the boxes so

2900
01:53:53,520 --> 01:53:55,520
mathematically speaking the concept is

2901
01:53:55,520 --> 01:53:57,760
actually not too complicated because in

2902
01:53:57,760 --> 01:54:01,119
ecdh is just a multiplication on to the

2903
01:54:01,119 --> 01:54:03,760
elliptic curve field

2904
01:54:03,760 --> 01:54:07,360
we have uh prepared a proof in the paper

2905
01:54:07,360 --> 01:54:09,520
that this is actually a safe operation

2906
01:54:09,520 --> 01:54:12,000
and any attacker

2907
01:54:12,000 --> 01:54:13,440
that does not

2908
01:54:13,440 --> 01:54:15,040
that is not charged colluding with the

2909
01:54:15,040 --> 01:54:18,800
proxy is pretty much left with an ecdh

2910
01:54:18,800 --> 01:54:21,119
instance

2911
01:54:21,119 --> 01:54:22,960
um

2912
01:54:22,960 --> 01:54:25,360
in the interest of time i will skip the

2913
01:54:25,360 --> 01:54:27,360
exact details of the math if you can

2914
01:54:27,360 --> 01:54:29,520
find it in the paper

2915
01:54:29,520 --> 01:54:32,800
um the the schema is um

2916
01:54:32,800 --> 01:54:34,639
is composable so this means that in fact

2917
01:54:34,639 --> 01:54:35,760
you can

2918
01:54:35,760 --> 01:54:38,800
you can basically

2919
01:54:39,040 --> 01:54:41,280
set up a chain of forwardings so you can

2920
01:54:41,280 --> 01:54:44,560
set up multiple forwardings for bob and

2921
01:54:44,560 --> 01:54:46,639
daniel could also set up his own

2922
01:54:46,639 --> 01:54:48,560
forwarding to frank

2923
01:54:48,560 --> 01:54:51,280
so the idea is the fact that these chain

2924
01:54:51,280 --> 01:54:54,000
can be built theoretically infinitely

2925
01:54:54,000 --> 01:54:56,239
long

2926
01:54:57,199 --> 01:54:59,840
now uh the problem with the open pgp

2927
01:54:59,840 --> 01:55:01,840
implementation is the fact that we can't

2928
01:55:01,840 --> 01:55:05,360
use vanilla open pgp because chars

2929
01:55:05,360 --> 01:55:07,199
requires a transform

2930
01:55:07,199 --> 01:55:10,159
modification in their implementation so

2931
01:55:10,159 --> 01:55:12,960
it is transparent onto the sender side

2932
01:55:12,960 --> 01:55:14,400
that is probably the most important

2933
01:55:14,400 --> 01:55:16,960
because we can't go and get someone else

2934
01:55:16,960 --> 01:55:19,679
to update their open pgp implementation

2935
01:55:19,679 --> 01:55:21,920
but it is not transparent onto charts

2936
01:55:21,920 --> 01:55:24,719
implementation so when you accept to be

2937
01:55:24,719 --> 01:55:27,440
a forward d you need to accept a special

2938
01:55:27,440 --> 01:55:28,960
key

2939
01:55:28,960 --> 01:55:30,639
that says

2940
01:55:30,639 --> 01:55:33,599
you are um

2941
01:55:33,599 --> 01:55:36,000
you are receiving forwarded email and

2942
01:55:36,000 --> 01:55:38,320
this is uh the reason because this

2943
01:55:38,320 --> 01:55:40,320
happens is because there's in the key

2944
01:55:40,320 --> 01:55:42,639
derivation function there is a binding

2945
01:55:42,639 --> 01:55:43,520
to

2946
01:55:43,520 --> 01:55:44,239
the

2947
01:55:44,239 --> 01:55:47,520
to bob's key and if we do not know bob's

2948
01:55:47,520 --> 01:55:50,400
fingerprint we cannot decrypt this key

2949
01:55:50,400 --> 01:55:52,159
we cannot decrypt this message we cannot

2950
01:55:52,159 --> 01:55:55,440
obtain the same shared secret

2951
01:55:55,679 --> 01:55:58,080
uh diving a little bit into the open pgp

2952
01:55:58,080 --> 01:55:59,360
changes that they think are more

2953
01:55:59,360 --> 01:56:00,480
relevant

2954
01:56:00,480 --> 01:56:02,320
what basically happens is the fact that

2955
01:56:02,320 --> 01:56:05,760
into this para parameter uh in the

2956
01:56:05,760 --> 01:56:07,599
in the hash

2957
01:56:07,599 --> 01:56:10,000
we do not have um

2958
01:56:10,000 --> 01:56:13,040
we do have the the fingerprint of pop's

2959
01:56:13,040 --> 01:56:14,800
key

2960
01:56:14,800 --> 01:56:17,199
in order to

2961
01:56:17,199 --> 01:56:18,800
there are two ways to work these around

2962
01:56:18,800 --> 01:56:21,520
that i thought that we thought of and

2963
01:56:21,520 --> 01:56:24,000
they are to add the fingerprint to the

2964
01:56:24,000 --> 01:56:27,040
esk so basically to say hey this message

2965
01:56:27,040 --> 01:56:29,119
was originally intended for this

2966
01:56:29,119 --> 01:56:30,320
fingerprint

2967
01:56:30,320 --> 01:56:31,679
but this makes the message

2968
01:56:31,679 --> 01:56:33,760
distinguishable so you

2969
01:56:33,760 --> 01:56:35,599
someone observing the message on the

2970
01:56:35,599 --> 01:56:37,440
wire might be able to tell that this

2971
01:56:37,440 --> 01:56:40,000
message is a forward message

2972
01:56:40,000 --> 01:56:43,679
and second um these allow this basically

2973
01:56:43,679 --> 01:56:45,360
it says for each message you gotta

2974
01:56:45,360 --> 01:56:46,880
acknowledge that that message is

2975
01:56:46,880 --> 01:56:49,040
forwarded well instead if you add this

2976
01:56:49,040 --> 01:56:52,000
information to the forward d key uh this

2977
01:56:52,000 --> 01:56:54,239
becomes a little bit more trans like you

2978
01:56:54,239 --> 01:56:56,320
once you accept the forwarding key and

2979
01:56:56,320 --> 01:56:57,599
add it to your key ring your

2980
01:56:57,599 --> 01:57:00,159
implementation should tell you

2981
01:57:00,159 --> 01:57:03,679
this key is actually bob's key and you

2982
01:57:03,679 --> 01:57:06,800
will receive only email encrypted to bob

2983
01:57:06,800 --> 01:57:08,960
that it has been forwarded for you

2984
01:57:08,960 --> 01:57:11,360
since this key as we've seen before is

2985
01:57:11,360 --> 01:57:14,000
generated uh here we can see it's

2986
01:57:14,000 --> 01:57:16,080
generated from bob so bob knows the

2987
01:57:16,080 --> 01:57:18,639
secret of this key

2988
01:57:18,639 --> 01:57:21,280
uh it is better and you're receiving

2989
01:57:21,280 --> 01:57:23,119
this key from someone else we thought it

2990
01:57:23,119 --> 01:57:25,679
would be better to have a key that you

2991
01:57:25,679 --> 01:57:28,320
know the fact that it can only be used

2992
01:57:28,320 --> 01:57:31,119
for messages and no one can send you

2993
01:57:31,119 --> 01:57:32,320
message

2994
01:57:32,320 --> 01:57:35,119
encrypted directly to this key

2995
01:57:35,119 --> 01:57:37,360
so these are the reasons that has

2996
01:57:37,360 --> 01:57:39,599
pushed us to uh sorry

2997
01:57:39,599 --> 01:57:42,239
to put it into the forwarding key this

2998
01:57:42,239 --> 01:57:45,360
this extra information

2999
01:57:45,360 --> 01:57:47,920
now as i said before the thresh model is

3000
01:57:47,920 --> 01:57:49,360
basically that

3001
01:57:49,360 --> 01:57:51,760
we assume that bob is always honest and

3002
01:57:51,760 --> 01:57:53,760
never leaks the public key or there's

3003
01:57:53,760 --> 01:57:55,360
already probably private key because

3004
01:57:55,360 --> 01:57:56,560
this would

3005
01:57:56,560 --> 01:57:59,520
clearly break any open bgp protocol

3006
01:57:59,520 --> 01:58:03,280
but as as soon as uh the server and the

3007
01:58:03,280 --> 01:58:05,599
forward d party cop like collude

3008
01:58:05,599 --> 01:58:08,159
corporate they can recompute bob's

3009
01:58:08,159 --> 01:58:11,280
private key with a simple operation

3010
01:58:11,280 --> 01:58:14,239
um this key since an open is an open pgp

3011
01:58:14,239 --> 01:58:17,119
key uh it's meant only for encryption

3012
01:58:17,119 --> 01:58:20,080
and in the rfc should be specified that

3013
01:58:20,080 --> 01:58:23,599
this key must be used only for uh but it

3014
01:58:23,599 --> 01:58:25,599
should only have the encryption flag so

3015
01:58:25,599 --> 01:58:27,040
that it cannot be used for

3016
01:58:27,040 --> 01:58:30,639
authentications or signing

3017
01:58:32,000 --> 01:58:34,400
and yeah

3018
01:58:34,400 --> 01:58:35,199
so

3019
01:58:35,199 --> 01:58:37,920
basically this is it and

3020
01:58:37,920 --> 01:58:39,840
we've we've wrote this paper that you

3021
01:58:39,840 --> 01:58:42,719
can find under this address

3022
01:58:42,719 --> 01:58:44,560
you can then you can also download it

3023
01:58:44,560 --> 01:58:45,840
from the slides

3024
01:58:45,840 --> 01:58:48,000
and uh we've wrote this paper that

3025
01:58:48,000 --> 01:58:49,520
allows you to

3026
01:58:49,520 --> 01:58:52,960
set up this forwarding scheme and i um i

3027
01:58:52,960 --> 01:58:54,639
would like to ask the community whether

3028
01:58:54,639 --> 01:58:57,199
there is an interest into standardizing

3029
01:58:57,199 --> 01:58:59,040
this kind of procedure that was already

3030
01:58:59,040 --> 01:59:02,000
briefly discussed at the open pgp summit

3031
01:59:02,000 --> 01:59:04,400
and whether i mean if there's interest i

3032
01:59:04,400 --> 01:59:06,560
guess i volunteer to write an rsc for

3033
01:59:06,560 --> 01:59:08,320
this

3034
01:59:08,320 --> 01:59:10,960
um in particular we've used curve259 in

3035
01:59:10,960 --> 01:59:13,360
our analysis because it's a pretty solid

3036
01:59:13,360 --> 01:59:17,520
curve and well regarded in the community

3037
01:59:17,520 --> 01:59:19,199
great thanks aaron i think we're pretty

3038
01:59:19,199 --> 01:59:20,719
much out of time

3039
01:59:20,719 --> 01:59:22,560
um and i you know so

3040
01:59:22,560 --> 01:59:24,000
as and when we get to the point of

3041
01:59:24,000 --> 01:59:25,440
rechartering i think it's these kind of

3042
01:59:25,440 --> 01:59:27,520
ideas because it would be

3043
01:59:27,520 --> 01:59:30,159
for upper discussion i guess yep sounds

3044
01:59:30,159 --> 01:59:31,040
right

3045
01:59:31,040 --> 01:59:32,639
thank you for the presentation and thank

3046
01:59:32,639 --> 01:59:34,639
you and

3047
01:59:34,639 --> 01:59:36,800
with that uh thanks for all your

3048
01:59:36,800 --> 01:59:38,880
patience with us this morning um as we

3049
01:59:38,880 --> 01:59:40,159
worked through those issues i think it

3050
01:59:40,159 --> 01:59:41,520
was fairly productive

3051
01:59:41,520 --> 01:59:43,360
we take it to the list

3052
01:59:43,360 --> 01:59:46,159
and i think we're set for this meeting

3053
01:59:46,159 --> 01:59:48,159
yep thank you everyone

3054
01:59:48,159 --> 01:59:51,159
thanks

3055
02:00:20,719 --> 02:00:23,719
um

3056
02:00:29,280 --> 02:00:32,280
uh

3057
02:00:42,880 --> 02:00:45,880
yes

