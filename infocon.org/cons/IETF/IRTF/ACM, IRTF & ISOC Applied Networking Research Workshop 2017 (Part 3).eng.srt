1
00:00:04,970 --> 00:00:10,850
all right let's let's start

2
00:00:07,790 --> 00:00:13,790
Janene session my name is Aaron Falk

3
00:00:10,850 --> 00:00:17,810
work for Akamai and I'm going to be

4
00:00:13,790 --> 00:00:20,029
sharing the afternoon session our first

5
00:00:17,810 --> 00:00:23,000
talk is implementing ipv6 segment

6
00:00:20,029 --> 00:00:25,340
routing on the Linux kernel aliyev

7
00:00:23,000 --> 00:00:28,160
Bonaventure's presenting on behalf of

8
00:00:25,340 --> 00:00:30,140
David Lebrun co-author Olivia is a

9
00:00:28,160 --> 00:00:32,780
professor at UCL and levan and of

10
00:00:30,140 --> 00:00:34,760
Belgium where he leads the IP networking

11
00:00:32,780 --> 00:00:36,800
lab his students have contributed to

12
00:00:34,760 --> 00:00:38,629
various implementations of IP IETF

13
00:00:36,800 --> 00:00:42,110
protocols including shim six this

14
00:00:38,630 --> 00:00:44,180
multipath tcp and now ipv6 segment

15
00:00:42,110 --> 00:00:46,940
routing he's also editor of sitcom's

16
00:00:44,180 --> 00:00:48,350
computer communications review where he

17
00:00:46,940 --> 00:00:50,650
encourages authors to release the

18
00:00:48,350 --> 00:00:52,640
software and data sets that enable

19
00:00:50,650 --> 00:00:57,910
reproduction of the results described in

20
00:00:52,640 --> 00:00:57,910
the accepted papers Olivia thank you

21
00:01:03,770 --> 00:01:05,830
you

22
00:02:58,190 --> 00:03:02,750
the loose source wrote inside an ipv6

23
00:03:00,350 --> 00:03:04,100
extension adder that contains a list of

24
00:03:02,750 --> 00:03:06,350
segments and there are basically three

25
00:03:04,100 --> 00:03:08,660
types of segments you can specify your

26
00:03:06,350 --> 00:03:10,880
node so you can force the packet to pass

27
00:03:08,660 --> 00:03:12,140
through a specific roger and in this

28
00:03:10,880 --> 00:03:14,600
case you will use a root or loopback

29
00:03:12,140 --> 00:03:16,100
address as a segment end point so you

30
00:03:14,600 --> 00:03:18,530
can follow the packet to pass through a

31
00:03:16,100 --> 00:03:20,450
specific roger you can specify an

32
00:03:18,530 --> 00:03:22,910
adjacency segment so you can force a

33
00:03:20,450 --> 00:03:25,609
packet to be forwarded on one egress

34
00:03:22,910 --> 00:03:27,859
link on one router which forces you to

35
00:03:25,610 --> 00:03:30,800
use a specific outgoing interface and

36
00:03:27,860 --> 00:03:32,480
it's also possible to use an ipv6

37
00:03:30,800 --> 00:03:35,180
address to encode a virtual function

38
00:03:32,480 --> 00:03:37,970
that will be applied on the packet on a

39
00:03:35,180 --> 00:03:39,710
router to support an AV for example and

40
00:03:37,970 --> 00:03:42,380
there are lots of use case for ipv6

41
00:03:39,710 --> 00:03:44,410
eggman routing and there are working

42
00:03:42,380 --> 00:03:47,600
group discussions within the ITF on that

43
00:03:44,410 --> 00:03:50,770
so how do we do that we define an ipv6

44
00:03:47,600 --> 00:03:54,320
segment routing header so new ipv6

45
00:03:50,770 --> 00:03:56,600
extension and what do we find in this

46
00:03:54,320 --> 00:03:59,269
ipv6 extension well a list of IP

47
00:03:56,600 --> 00:04:01,040
addresses that are the intermediate

48
00:03:59,270 --> 00:04:03,260
segments so we can have a list of

49
00:04:01,040 --> 00:04:06,950
segments inside the ipv6 extension

50
00:04:03,260 --> 00:04:09,709
header and each segment uses one ipv6

51
00:04:06,950 --> 00:04:11,239
address and then as with the traditional

52
00:04:09,710 --> 00:04:13,820
source routing implementation you have

53
00:04:11,240 --> 00:04:15,680
the number of remaining segments and the

54
00:04:13,820 --> 00:04:18,798
index of the last segment in the packet

55
00:04:15,680 --> 00:04:22,310
and there is extensibility with CSV

56
00:04:18,798 --> 00:04:24,140
objects that you can add inside the ipv6

57
00:04:22,310 --> 00:04:26,540
segment working either so nothing really

58
00:04:24,140 --> 00:04:28,190
special what's important is that you

59
00:04:26,540 --> 00:04:31,160
have a list of segments inside each

60
00:04:28,190 --> 00:04:32,660
packet what kind of use case can you do

61
00:04:31,160 --> 00:04:34,670
with a v6 and Marathi

62
00:04:32,660 --> 00:04:36,980
you can give full control on your

63
00:04:34,670 --> 00:04:39,740
network to the Endo's and in this case

64
00:04:36,980 --> 00:04:41,660
the nos will add the segment routing

65
00:04:39,740 --> 00:04:44,240
header to all the packets at its end so

66
00:04:41,660 --> 00:04:45,740
that the packets will be four wide along

67
00:04:44,240 --> 00:04:48,110
your path which is chosen by the

68
00:04:45,740 --> 00:04:50,720
application or chosen by the network

69
00:04:48,110 --> 00:04:52,910
administrator which is who is

70
00:04:50,720 --> 00:04:55,310
configuring the network so you can do

71
00:04:52,910 --> 00:04:58,130
end to end a path control inside a

72
00:04:55,310 --> 00:05:00,500
network you can force packet to pass

73
00:04:58,130 --> 00:05:02,240
through a specific function which is a

74
00:05:00,500 --> 00:05:05,030
software function that you have placed

75
00:05:02,240 --> 00:05:06,620
on one of the roger so here there is a

76
00:05:05,030 --> 00:05:09,020
special function which is running on

77
00:05:06,620 --> 00:05:11,810
water file and this function running on

78
00:05:09,020 --> 00:05:13,460
water file you want it to be applied for

79
00:05:11,810 --> 00:05:15,320
all the packets that are sent by a given

80
00:05:13,460 --> 00:05:18,138
client maybe this function is a firewall

81
00:05:15,320 --> 00:05:21,320
and you would like this device to send

82
00:05:18,139 --> 00:05:23,570
all these packets were I just add the

83
00:05:21,320 --> 00:05:26,210
function in the ipv6 hangman road a

84
00:05:23,570 --> 00:05:27,919
rotting adder the packet will go to the

85
00:05:26,210 --> 00:05:30,620
router and then the function is applied

86
00:05:27,919 --> 00:05:33,799
and then the packet continues until it

87
00:05:30,620 --> 00:05:36,050
reaches the destination you can also do

88
00:05:33,800 --> 00:05:39,200
segment routing ipv6 segment rotting at

89
00:05:36,050 --> 00:05:41,690
the routers only and not at the endpoint

90
00:05:39,200 --> 00:05:44,300
so the endpoint is using plain ipv6

91
00:05:41,690 --> 00:05:49,700
sorry it doesn't work with ipv4 but

92
00:05:44,300 --> 00:05:51,590
nobody is interested in ipv4 so you can

93
00:05:49,700 --> 00:05:53,630
encapsulate the packet and add and

94
00:05:51,590 --> 00:05:55,429
segment routing header to the packet so

95
00:05:53,630 --> 00:05:58,729
that the packet follows a specific paths

96
00:05:55,430 --> 00:06:01,040
in the network and then you D capsulate

97
00:05:58,729 --> 00:06:03,169
at the egress which means that you are

98
00:06:01,040 --> 00:06:04,970
doing ipv6 Eggman routing only between

99
00:06:03,169 --> 00:06:08,479
the routers and you don't have to mess

100
00:06:04,970 --> 00:06:11,510
up with the endpoint security so I

101
00:06:08,479 --> 00:06:14,300
mentioned we had issues with ipv4 we had

102
00:06:11,510 --> 00:06:16,310
issues with ipv6 how do we get rid of

103
00:06:14,300 --> 00:06:19,270
those security issues with IP with

104
00:06:16,310 --> 00:06:21,910
segment rotting basically you can add

105
00:06:19,270 --> 00:06:25,130
inside a segment segment rotting adder

106
00:06:21,910 --> 00:06:28,880
eh Mac TLV which allows you to verify

107
00:06:25,130 --> 00:06:31,070
that the segment routing extension has

108
00:06:28,880 --> 00:06:32,930
been inserted by a trusted device and

109
00:06:31,070 --> 00:06:35,240
typically the trusted device they would

110
00:06:32,930 --> 00:06:37,310
have a special key and knowing the key

111
00:06:35,240 --> 00:06:39,950
you can compute the Ashbaugh H Mac that

112
00:06:37,310 --> 00:06:41,690
authenticates the packet so what's the

113
00:06:39,950 --> 00:06:43,310
typical use case you will configure all

114
00:06:41,690 --> 00:06:47,419
the routers in your network with the H

115
00:06:43,310 --> 00:06:50,060
Mackay key and then some device will be

116
00:06:47,419 --> 00:06:52,340
allowed to do some specific segments

117
00:06:50,060 --> 00:06:53,990
through the network you give them either

118
00:06:52,340 --> 00:06:56,030
the full segments that they have to use

119
00:06:53,990 --> 00:06:58,220
to do cut and paste in the package at

120
00:06:56,030 --> 00:07:00,859
this end so if you want for example all

121
00:06:58,220 --> 00:07:02,900
the client device to pass through a

122
00:07:00,860 --> 00:07:05,090
specific firewall then you give them a

123
00:07:02,900 --> 00:07:08,388
segment working adder that forces them

124
00:07:05,090 --> 00:07:11,450
to always pass with a firewall and you

125
00:07:08,389 --> 00:07:13,430
can verify the H Mac only at the ingress

126
00:07:11,450 --> 00:07:16,690
of the roger and you can also configure

127
00:07:13,430 --> 00:07:19,430
that by using Sdn or the techniques

128
00:07:16,690 --> 00:07:21,320
second point implementation in the Linux

129
00:07:19,430 --> 00:07:23,300
kernel so if you look at what's

130
00:07:21,320 --> 00:07:25,550
happening in a typical Linux kernel when

131
00:07:23,300 --> 00:07:27,260
you process packets you go

132
00:07:25,550 --> 00:07:29,720
from one network interface to another

133
00:07:27,260 --> 00:07:32,240
and the functions that you will apply to

134
00:07:29,720 --> 00:07:33,590
the packet are the prewriting step then

135
00:07:32,240 --> 00:07:35,720
you have the routing decision that

136
00:07:33,590 --> 00:07:37,820
decides whether the packet is local or

137
00:07:35,720 --> 00:07:39,800
whether it needs to be forwarded if it's

138
00:07:37,820 --> 00:07:41,599
local it goes to the input processing

139
00:07:39,800 --> 00:07:43,910
and then it goes to the local processes

140
00:07:41,600 --> 00:07:46,190
and then you have the output processing

141
00:07:43,910 --> 00:07:47,780
writing decision forward and all swati

142
00:07:46,190 --> 00:07:50,390
and typically you have three paths

143
00:07:47,780 --> 00:07:52,940
inside the Linux kernel to process

144
00:07:50,390 --> 00:07:54,740
packets the first one is the rate is the

145
00:07:52,940 --> 00:07:57,620
horizontal pass where you will forward

146
00:07:54,740 --> 00:07:59,360
ipv6 packets where you have pre routing

147
00:07:57,620 --> 00:08:02,390
routing decisions and forwarding and

148
00:07:59,360 --> 00:08:04,550
post writing if the packet is this time

149
00:08:02,390 --> 00:08:07,070
to the node then you will do prewriting

150
00:08:04,550 --> 00:08:09,320
you check that the packet is local and

151
00:08:07,070 --> 00:08:10,820
then you do the input processing and if

152
00:08:09,320 --> 00:08:13,280
you send the package from the node to

153
00:08:10,820 --> 00:08:14,990
the to the outside then you have the

154
00:08:13,280 --> 00:08:16,549
output processing the routing decision

155
00:08:14,990 --> 00:08:20,810
and the post waiting to send the packet

156
00:08:16,550 --> 00:08:23,420
so what do we change with ipv6 eggman

157
00:08:20,810 --> 00:08:25,550
writing well you have to change the way

158
00:08:23,420 --> 00:08:27,890
the package that contain a segment row

159
00:08:25,550 --> 00:08:30,320
together will be processed and let's

160
00:08:27,890 --> 00:08:32,510
take at two examples the first one is

161
00:08:30,320 --> 00:08:35,240
the router is one of the segments in the

162
00:08:32,510 --> 00:08:37,610
list so you have received an ipv6 packet

163
00:08:35,240 --> 00:08:40,549
that contains a segment all together and

164
00:08:37,610 --> 00:08:42,980
this segment rotten header contains the

165
00:08:40,549 --> 00:08:44,839
loopback address of the router as one of

166
00:08:42,980 --> 00:08:47,480
the addresses of the segment routing

167
00:08:44,840 --> 00:08:49,070
header so the packet was designed to

168
00:08:47,480 --> 00:08:53,230
this node at least from a segment

169
00:08:49,070 --> 00:08:55,430
wottinger pond so the packet will arrive

170
00:08:53,230 --> 00:08:57,980
the destination of the packet is

171
00:08:55,430 --> 00:08:59,989
virtually the router so it goes to the

172
00:08:57,980 --> 00:09:02,390
input processing in the input processing

173
00:08:59,990 --> 00:09:05,090
we look at the segment wah together we

174
00:09:02,390 --> 00:09:07,069
find that we have reached one step in

175
00:09:05,090 --> 00:09:08,360
the segment Watty header and then we

176
00:09:07,070 --> 00:09:10,670
will update the segment were together

177
00:09:08,360 --> 00:09:12,920
before forwarding the packet back to the

178
00:09:10,670 --> 00:09:15,020
final destination which means that the

179
00:09:12,920 --> 00:09:15,890
packet is updated and then it will be

180
00:09:15,020 --> 00:09:17,960
reenacted

181
00:09:15,890 --> 00:09:20,180
inside the stack so that it can be

182
00:09:17,960 --> 00:09:22,310
routed and for wall-e to be outgoing

183
00:09:20,180 --> 00:09:24,170
interface with a modified adder so that

184
00:09:22,310 --> 00:09:27,140
it can go to the next stop inside the

185
00:09:24,170 --> 00:09:29,180
network if the packet was an

186
00:09:27,140 --> 00:09:31,460
encapsulated packet and we are the

187
00:09:29,180 --> 00:09:33,140
egress of the tunnel then what happens

188
00:09:31,460 --> 00:09:35,930
is that the destination of the packet

189
00:09:33,140 --> 00:09:38,000
was the router itself so we will run the

190
00:09:35,930 --> 00:09:39,170
decapsulation of the packet in the input

191
00:09:38,000 --> 00:09:40,670
processing

192
00:09:39,170 --> 00:09:44,120
and once we have run the decapsulation

193
00:09:40,670 --> 00:09:46,910
we have back an ipv6 packet that needs

194
00:09:44,120 --> 00:09:48,529
to be again forwarded and we do the

195
00:09:46,910 --> 00:09:50,050
routing and we forward the packet to the

196
00:09:48,529 --> 00:09:53,329
final destination

197
00:09:50,050 --> 00:09:54,969
so I can we can reconfigure ipv6 segment

198
00:09:53,329 --> 00:09:57,469
routing with the Linux implementation

199
00:09:54,970 --> 00:09:59,600
basically the control planning on Linux

200
00:09:57,470 --> 00:10:01,190
you have IP route 2 which allows you to

201
00:09:59,600 --> 00:10:02,660
manipulate the routing tables and

202
00:10:01,190 --> 00:10:05,899
manipulate the configuration of the

203
00:10:02,660 --> 00:10:08,930
interfaces and I appear with to receive

204
00:10:05,899 --> 00:10:11,180
comments from FT net link and basically

205
00:10:08,930 --> 00:10:13,790
in the ipv6 a Marathi implementation we

206
00:10:11,180 --> 00:10:16,219
extend actinic link to support what is

207
00:10:13,790 --> 00:10:18,410
required to manipulate and to configure

208
00:10:16,220 --> 00:10:22,639
ipv6 and marathi and here you have an

209
00:10:18,410 --> 00:10:25,610
example of the IP command which applies

210
00:10:22,639 --> 00:10:28,100
of course to ipv6 where you specify that

211
00:10:25,610 --> 00:10:31,790
all the packets whose destination is FC

212
00:10:28,100 --> 00:10:33,980
42 / 64 so you match the destination

213
00:10:31,790 --> 00:10:35,750
address when you match the destination

214
00:10:33,980 --> 00:10:38,149
address you will encapsulate the packet

215
00:10:35,750 --> 00:10:41,570
with ipv6 segment rotting that's the

216
00:10:38,149 --> 00:10:43,910
second part of the command and you will

217
00:10:41,570 --> 00:10:46,279
add the segment's which is simply

218
00:10:43,910 --> 00:10:48,170
specified as a list of ipv6 addresses

219
00:10:46,279 --> 00:10:50,390
which commas with with commas to

220
00:10:48,170 --> 00:10:52,760
indicate the segment that that needs to

221
00:10:50,390 --> 00:10:54,980
be attached in the encapsulated packet

222
00:10:52,760 --> 00:10:56,930
so this would typically run on an

223
00:10:54,980 --> 00:10:59,720
ingress router where you would have to

224
00:10:56,930 --> 00:11:01,729
add a segment to a packet that matches a

225
00:10:59,720 --> 00:11:04,100
given destination and there are other

226
00:11:01,730 --> 00:11:07,339
ways to configure it to configure it as

227
00:11:04,100 --> 00:11:09,440
well segment routing can also be used

228
00:11:07,339 --> 00:11:12,230
directly by applications and in this

229
00:11:09,440 --> 00:11:13,730
case we modify the socket API so that in

230
00:11:12,230 --> 00:11:16,760
the socket API when you create the

231
00:11:13,730 --> 00:11:19,010
socket for example this is for a TCP

232
00:11:16,760 --> 00:11:21,500
connection when you create the socket

233
00:11:19,010 --> 00:11:23,660
you specify the segment routing header

234
00:11:21,500 --> 00:11:25,430
that has to be used for all the TCP

235
00:11:23,660 --> 00:11:27,949
packets that are sent over the specific

236
00:11:25,430 --> 00:11:29,689
connection so if the application knows

237
00:11:27,949 --> 00:11:32,089
what is the segment working at that it

238
00:11:29,690 --> 00:11:34,250
has to use then it simply creates a

239
00:11:32,089 --> 00:11:36,290
segment altogether as it as a socket

240
00:11:34,250 --> 00:11:38,089
option to the socket and then

241
00:11:36,290 --> 00:11:40,040
automatically the state is placed in the

242
00:11:38,089 --> 00:11:43,069
Linux kernel and all the packets from

243
00:11:40,040 --> 00:11:45,500
this TCP connection will follow the path

244
00:11:43,069 --> 00:11:49,339
specified by the segment working at so

245
00:11:45,500 --> 00:11:51,920
this is not very complex for the H Mac I

246
00:11:49,339 --> 00:11:52,850
told you that H mark allows to verify

247
00:11:51,920 --> 00:11:55,189
the integral

248
00:11:52,850 --> 00:11:58,699
and the authenticity of a sing Monroe

249
00:11:55,189 --> 00:12:00,559
together and there are three knobs that

250
00:11:58,699 --> 00:12:03,199
can be controlled on a rotor to decide

251
00:12:00,559 --> 00:12:05,600
other water would process the packet

252
00:12:03,199 --> 00:12:08,508
with an H mark the first method is you

253
00:12:05,600 --> 00:12:10,549
know H Mack all the time you can also

254
00:12:08,509 --> 00:12:13,699
verify the package that contain an H

255
00:12:10,549 --> 00:12:17,089
Mack and forward the packets without an

256
00:12:13,699 --> 00:12:19,008
H Mike or you can be strict and if the

257
00:12:17,089 --> 00:12:21,079
packet contains an H Mack you verify it

258
00:12:19,009 --> 00:12:23,329
and you process it if the H Mack is

259
00:12:21,079 --> 00:12:25,878
valid and if the packet does not contain

260
00:12:23,329 --> 00:12:27,649
an H Mack then you discard the packet so

261
00:12:25,879 --> 00:12:31,160
the the packets there would be discarded

262
00:12:27,649 --> 00:12:32,660
there is a mistake in this light so

263
00:12:31,160 --> 00:12:34,639
everything has been implemented by the

264
00:12:32,660 --> 00:12:37,728
Vig in the Linux kernel so it was

265
00:12:34,639 --> 00:12:39,439
initially in Linux 4.10 and it so it's

266
00:12:37,729 --> 00:12:41,779
part of the mainline kernel and it has

267
00:12:39,439 --> 00:12:44,959
been improved and now it is the improved

268
00:12:41,779 --> 00:12:46,519
version is part of UNIX 4.12 so the next

269
00:12:44,959 --> 00:12:48,319
time you download the recent Linux

270
00:12:46,519 --> 00:12:49,970
kernel you will have ipv6 segment

271
00:12:48,319 --> 00:12:52,549
watching for free and you will be able

272
00:12:49,970 --> 00:12:54,759
to play with it and I've seen that di

273
00:12:52,549 --> 00:12:57,139
cottan there is a group doing

274
00:12:54,759 --> 00:12:59,239
configuration with net conf on top of

275
00:12:57,139 --> 00:13:00,739
the ipv6 segment rotting implementation

276
00:12:59,239 --> 00:13:03,559
already so people are already playing

277
00:13:00,739 --> 00:13:06,470
with playing with it so let's look at

278
00:13:03,559 --> 00:13:09,259
the performance of the implementation so

279
00:13:06,470 --> 00:13:12,909
to test the implementation we use the

280
00:13:09,259 --> 00:13:15,949
lab so we we took three Intel exome

281
00:13:12,909 --> 00:13:18,409
servers each with four coughs eight

282
00:13:15,949 --> 00:13:22,399
threads at two point three to two point

283
00:13:18,409 --> 00:13:24,259
50 gigahertz 10 gig Ethernet cards we

284
00:13:22,399 --> 00:13:28,699
configured the ethernet just with one

285
00:13:24,259 --> 00:13:30,859
cue per CPU and one IQ / Q we disabled

286
00:13:28,699 --> 00:13:33,498
TSO and GI wrote who have the worst case

287
00:13:30,859 --> 00:13:36,559
or TSO is TCP segmentation of load and

288
00:13:33,499 --> 00:13:38,899
zero is generic receiver load and this

289
00:13:36,559 --> 00:13:41,118
is the solution in Linux to be able to

290
00:13:38,899 --> 00:13:43,459
watch packets together and it's

291
00:13:41,119 --> 00:13:44,720
typically used to support TCP

292
00:13:43,459 --> 00:13:46,909
connections when you have multiple

293
00:13:44,720 --> 00:13:51,109
packets that use the same TCP options

294
00:13:46,909 --> 00:13:52,939
and the same IP v6 adders then they can

295
00:13:51,109 --> 00:13:55,789
be glued together so that you have only

296
00:13:52,939 --> 00:13:57,409
one interrupt for the Linux kernel but

297
00:13:55,789 --> 00:13:58,519
this does not apply to water so we

298
00:13:57,409 --> 00:14:01,459
disable those

299
00:13:58,519 --> 00:14:04,220
improvement and we use pathogen which is

300
00:14:01,459 --> 00:14:06,520
the internal but you to send UDP packets

301
00:14:04,220 --> 00:14:10,360
that we modify to send ipv6

302
00:14:06,520 --> 00:14:12,910
working others so we first write to see

303
00:14:10,360 --> 00:14:16,060
in this setup what is the baseline ipv6

304
00:14:12,910 --> 00:14:19,329
performance and we have a bit more than

305
00:14:16,060 --> 00:14:22,449
1.1 million packets per second for 64

306
00:14:19,330 --> 00:14:23,890
bytes packets and we use this as a bad

307
00:14:22,450 --> 00:14:25,990
light baseline to compare the

308
00:14:23,890 --> 00:14:29,560
performance of the ipv6 segment watching

309
00:14:25,990 --> 00:14:31,870
extension so the first test we did with

310
00:14:29,560 --> 00:14:33,969
inline injection so we add the segment

311
00:14:31,870 --> 00:14:35,770
were together or we do encapsulation

312
00:14:33,970 --> 00:14:37,300
there is no difference no significant

313
00:14:35,770 --> 00:14:40,030
difference from performance you point

314
00:14:37,300 --> 00:14:42,069
between the two operations but we saw

315
00:14:40,030 --> 00:14:44,160
that there is a huge gap between the

316
00:14:42,070 --> 00:14:46,780
plain ipv6 forwarding performance and

317
00:14:44,160 --> 00:14:49,449
the throughput that we obtain with ipv6

318
00:14:46,780 --> 00:14:51,189
in Marathi so David at the more detailed

319
00:14:49,450 --> 00:14:53,530
look at the implementation and he did

320
00:14:51,190 --> 00:14:55,330
some tuning and he found that there were

321
00:14:53,530 --> 00:14:57,640
two reasons for this lower performance

322
00:14:55,330 --> 00:15:00,210
hidden with ipv6 segment raatein

323
00:14:57,640 --> 00:15:03,310
compared to regular ipv6 for wali the

324
00:15:00,210 --> 00:15:06,720
first one is that the ipv6 segment

325
00:15:03,310 --> 00:15:10,300
rotting implementation did not use

326
00:15:06,720 --> 00:15:13,540
completely the cache that were available

327
00:15:10,300 --> 00:15:15,640
in the ipv6 implementation so this was

328
00:15:13,540 --> 00:15:17,380
fixed and there was a strange issue with

329
00:15:15,640 --> 00:15:20,050
the memory allocation where in some

330
00:15:17,380 --> 00:15:22,300
cases when you freed some memory for a

331
00:15:20,050 --> 00:15:24,849
socket buffer for a phone when skb that

332
00:15:22,300 --> 00:15:27,130
represents a packet sometimes it took

333
00:15:24,850 --> 00:15:30,430
the slow pass and it considered that

334
00:15:27,130 --> 00:15:32,290
since we have multiple multiple cpus you

335
00:15:30,430 --> 00:15:33,910
had to take a spin lock to be able to do

336
00:15:32,290 --> 00:15:36,189
the free and so on and this slow down

337
00:15:33,910 --> 00:15:38,589
the performance a lot so that we'd fix

338
00:15:36,190 --> 00:15:41,080
that and improve the performance so that

339
00:15:38,590 --> 00:15:45,070
we reach now 1 million packets per

340
00:15:41,080 --> 00:15:47,050
second for inline injection and almost

341
00:15:45,070 --> 00:15:49,600
the same for encapsulation so we have

342
00:15:47,050 --> 00:15:52,689
the same result and we are pretty close

343
00:15:49,600 --> 00:15:54,460
to what we do with ipv6 a regular

344
00:15:52,690 --> 00:15:56,650
forwarding the main difference is that

345
00:15:54,460 --> 00:15:59,050
we basically have to do to do caps

346
00:15:56,650 --> 00:16:00,579
possibly because we go again in the

347
00:15:59,050 --> 00:16:02,800
column so it's normal that we have lower

348
00:16:00,580 --> 00:16:05,440
performance but the difference is not so

349
00:16:02,800 --> 00:16:07,599
huge anymore so this is reasonable

350
00:16:05,440 --> 00:16:09,970
performance for a single core so we have

351
00:16:07,600 --> 00:16:11,650
one CPU doing that on a 10 gig interface

352
00:16:09,970 --> 00:16:13,330
we looked at whether there was a

353
00:16:11,650 --> 00:16:16,930
difference between long and short

354
00:16:13,330 --> 00:16:20,030
packets so in red you see the 1000 bytes

355
00:16:16,930 --> 00:16:21,260
packets and in blue you have the C

356
00:16:20,030 --> 00:16:23,120
the four bites back yet that were the

357
00:16:21,260 --> 00:16:25,069
default there is no significant

358
00:16:23,120 --> 00:16:28,190
difference and the cost is the other

359
00:16:25,070 --> 00:16:31,430
processing it's not the data movement so

360
00:16:28,190 --> 00:16:34,330
which is good we looked at the H Mac so

361
00:16:31,430 --> 00:16:38,030
if you have to compute an H Mac with

362
00:16:34,330 --> 00:16:39,620
sha-256 for each ipv6 other that you

363
00:16:38,030 --> 00:16:42,650
have to process there is a cost and

364
00:16:39,620 --> 00:16:46,250
there is no surprise so you get a bit

365
00:16:42,650 --> 00:16:48,709
more than 200,000 packets per second

366
00:16:46,250 --> 00:16:52,100
with a generic implementation of each

367
00:16:48,710 --> 00:16:55,430
Mac sha-256 in the linux kernel if you

368
00:16:52,100 --> 00:16:57,980
use the version which uses special Intel

369
00:16:55,430 --> 00:17:01,069
assembly instruction then you have

370
00:16:57,980 --> 00:17:02,960
slightly better you are close to 300,000

371
00:17:01,070 --> 00:17:05,510
packets per second which is not too bad

372
00:17:02,960 --> 00:17:07,880
but this is still very significant and

373
00:17:05,510 --> 00:17:10,460
doing an H map computation is much more

374
00:17:07,880 --> 00:17:13,340
costly than doing a lookup in the ipv6

375
00:17:10,460 --> 00:17:15,500
routing table the good news is that if

376
00:17:13,339 --> 00:17:17,780
you use multiple cores then when you

377
00:17:15,500 --> 00:17:20,869
have multiple cores it's possible to

378
00:17:17,780 --> 00:17:24,020
attach one I asked you and want you for

379
00:17:20,869 --> 00:17:26,629
the NIC to each CPU and then to do load

380
00:17:24,020 --> 00:17:28,940
balancing of the different package that

381
00:17:26,630 --> 00:17:31,280
you receive automatically from the NIC

382
00:17:28,940 --> 00:17:33,890
to the CPUs and basically you can

383
00:17:31,280 --> 00:17:36,920
paralyze the forwarding of the ipv6

384
00:17:33,890 --> 00:17:39,050
packets so this is with eight CPUs but

385
00:17:36,920 --> 00:17:41,930
basically we have four physical CPUs and

386
00:17:39,050 --> 00:17:44,990
each CPU is using two threads so is for

387
00:17:41,930 --> 00:17:48,680
with four physical CPUs we reach about

388
00:17:44,990 --> 00:17:54,170
five million packets per second with

389
00:17:48,680 --> 00:17:56,570
plain ipv6 and with a 36 we are at 4.2

390
00:17:54,170 --> 00:17:59,210
million spec its per second which is

391
00:17:56,570 --> 00:18:00,980
reasonable and each Mac is improved but

392
00:17:59,210 --> 00:18:05,360
we only reach 1 million packets per

393
00:18:00,980 --> 00:18:08,990
second so to summarize and to conclude I

394
00:18:05,360 --> 00:18:11,990
can say that thanks to the work of David

395
00:18:08,990 --> 00:18:14,180
during the entire PhD thesis ipv6

396
00:18:11,990 --> 00:18:16,040
segment routing as matured so now we

397
00:18:14,180 --> 00:18:18,320
have a stable specification you will see

398
00:18:16,040 --> 00:18:20,389
discussions within the ITF there are

399
00:18:18,320 --> 00:18:22,040
many use case with ipv6 segment routing

400
00:18:20,390 --> 00:18:24,860
beyond those that are discussed in this

401
00:18:22,040 --> 00:18:27,560
presentation I think what's good if I

402
00:18:24,860 --> 00:18:29,149
look at the evolution of ITF for the

403
00:18:27,560 --> 00:18:31,790
course and the importance of having an

404
00:18:29,150 --> 00:18:33,799
open source implementation is that this

405
00:18:31,790 --> 00:18:36,320
implementation is already part of the

406
00:18:33,799 --> 00:18:39,230
9 Linux kernel so you can use it easily

407
00:18:36,320 --> 00:18:41,840
and it's supposed OSD and O's functions

408
00:18:39,230 --> 00:18:43,789
for clients and servers and it has the

409
00:18:41,840 --> 00:18:45,499
basic rotor functions within the ITF

410
00:18:43,789 --> 00:18:48,860
there are still discussions on adding

411
00:18:45,499 --> 00:18:52,190
more specific rotor functions such as

412
00:18:48,860 --> 00:18:54,529
doing an encapsulation of v4 inside v6

413
00:18:52,190 --> 00:18:56,330
and other types of forwarding functions

414
00:18:54,529 --> 00:18:57,799
that are not yet implemented but I guess

415
00:18:56,330 --> 00:18:59,570
they will be implemented in the coming

416
00:18:57,799 --> 00:19:02,509
months and the performance evaluation

417
00:18:59,570 --> 00:19:04,610
shows that the performance of ipv6

418
00:19:02,509 --> 00:19:07,460
segment routing is reasonably good and

419
00:19:04,610 --> 00:19:10,729
unsurprisingly the using H max as an

420
00:19:07,460 --> 00:19:12,930
impact on the performance thank you

421
00:19:10,730 --> 00:19:17,440
[Music]

422
00:19:12,930 --> 00:19:29,269
[Applause]

423
00:19:17,440 --> 00:19:32,690
any questions velu yeah hi so this is

424
00:19:29,269 --> 00:19:34,039
really cool stuff so I wanted to ask a

425
00:19:32,690 --> 00:19:36,379
question about the bottom on there on

426
00:19:34,039 --> 00:19:38,119
unsurprisingly H Mac TLB FX performance

427
00:19:36,379 --> 00:19:40,789
yes because there's a lot more work that

428
00:19:38,119 --> 00:19:42,379
has to happen is that with the the

429
00:19:40,789 --> 00:19:43,820
algorithms that are used there is that

430
00:19:42,379 --> 00:19:46,299
or the the ciphers that are used there

431
00:19:43,820 --> 00:19:49,129
is that a thing that could be hardware

432
00:19:46,299 --> 00:19:51,619
accelerated in a Linux based router or

433
00:19:49,129 --> 00:19:54,859
because the design of this preclude that

434
00:19:51,619 --> 00:19:58,730
I don't think that the design producer

435
00:19:54,859 --> 00:20:00,710
hardware acceleration okay cool so it

436
00:19:58,730 --> 00:20:03,919
just seems like this is a we have chips

437
00:20:00,710 --> 00:20:11,059
that can accelerate program with how do

438
00:20:03,919 --> 00:20:12,830
I get tell you which I have a couple

439
00:20:11,059 --> 00:20:15,350
questions to see you said you this is

440
00:20:12,830 --> 00:20:17,090
gonna be showing up in the ITF where is

441
00:20:15,350 --> 00:20:18,709
it gonna be introduced so there are two

442
00:20:17,090 --> 00:20:21,199
places where there are discussions about

443
00:20:18,710 --> 00:20:23,749
segmenting so there is a spring working

444
00:20:21,200 --> 00:20:26,509
group which is the so spring sauce

445
00:20:23,749 --> 00:20:28,190
packet rotating in networks so this is

446
00:20:26,509 --> 00:20:31,779
dedicated to segments working and the

447
00:20:28,190 --> 00:20:34,009
ipv6 version is discussed in six months

448
00:20:31,779 --> 00:20:37,129
well there will be a fight on the

449
00:20:34,009 --> 00:20:39,259
segment rotting header and whether you

450
00:20:37,129 --> 00:20:42,199
can use ipv6 headers or not but that's

451
00:20:39,259 --> 00:20:45,070
another discussion love a good idea

452
00:20:42,200 --> 00:20:48,909
fight also

453
00:20:45,070 --> 00:20:51,009
I can't remember from from a traditional

454
00:20:48,909 --> 00:20:55,480
source routing but what's the correct

455
00:20:51,009 --> 00:20:57,580
behavior if one of the Waypoint

456
00:20:55,480 --> 00:21:00,480
addresses is unreachable should the

457
00:20:57,580 --> 00:21:03,789
packet be discarded or do you skip

458
00:21:00,480 --> 00:21:05,830
waypoints that you can't get to or is it

459
00:21:03,789 --> 00:21:08,019
you can you specify the behavior yeah so

460
00:21:05,830 --> 00:21:11,529
the question what happens when you have

461
00:21:08,019 --> 00:21:13,210
a waypoint that you cannot reach it

462
00:21:11,529 --> 00:21:15,240
really depends on the use case that you

463
00:21:13,210 --> 00:21:17,440
use or whether you have end-to-end

464
00:21:15,240 --> 00:21:20,019
solution or whether you have

465
00:21:17,440 --> 00:21:24,279
encapsulation on that so if you have an

466
00:21:20,019 --> 00:21:25,049
end-to-end solution wait like this one

467
00:21:24,279 --> 00:21:28,240
hmm

468
00:21:25,049 --> 00:21:31,539
if you are you have specified that one

469
00:21:28,240 --> 00:21:34,450
of the address was had to be used with

470
00:21:31,539 --> 00:21:37,120
the destination then if this one if say

471
00:21:34,450 --> 00:21:38,889
rotor six is not available then you

472
00:21:37,120 --> 00:21:40,809
should receive an ICMP back to the

473
00:21:38,889 --> 00:21:42,459
source and the source will know that

474
00:21:40,809 --> 00:21:45,549
there is a problem of which ability of

475
00:21:42,460 --> 00:21:50,230
or of a six but you are not forced to

476
00:21:45,549 --> 00:21:52,330
use F six as a well the segment that you

477
00:21:50,230 --> 00:21:55,149
use does not necessarily be an ipv6

478
00:21:52,330 --> 00:21:56,769
address of one node so you can have an

479
00:21:55,149 --> 00:22:00,908
ipv6 address that corresponds to

480
00:21:56,769 --> 00:22:03,220
multiple nodes so you could say I send a

481
00:22:00,909 --> 00:22:05,169
packet to one IP address within a prefix

482
00:22:03,220 --> 00:22:07,779
and then you can use any of the nodes

483
00:22:05,169 --> 00:22:09,340
inside this prefix to be forwarded you

484
00:22:07,779 --> 00:22:12,580
can assign those same new back address

485
00:22:09,340 --> 00:22:14,649
to multiple routers as well so you are

486
00:22:12,580 --> 00:22:16,899
not always in a situation where you are

487
00:22:14,649 --> 00:22:19,600
forced to go to a device that does not

488
00:22:16,899 --> 00:22:23,049
exist anymore while but if you are in

489
00:22:19,600 --> 00:22:24,428
the uncaf solution Indian capsule when

490
00:22:23,049 --> 00:22:26,830
you have an capsulation then the

491
00:22:24,429 --> 00:22:28,870
situation is different because there you

492
00:22:26,830 --> 00:22:30,970
have to return the ICMP back to the

493
00:22:28,870 --> 00:22:35,428
encapsulation point so that the source

494
00:22:30,970 --> 00:22:39,779
is hidden from this ipv6 Emiratis

495
00:22:35,429 --> 00:22:39,779
thank you thank you

496
00:22:40,200 --> 00:22:46,169
a quick clarification is there any

497
00:22:43,889 --> 00:22:49,799
impact due to number of segments that

498
00:22:46,169 --> 00:22:52,649
were added in the header from the

499
00:22:49,799 --> 00:22:55,730
rudiment continued in Brockton yep not

500
00:22:52,649 --> 00:22:58,799
I'm doing back just computing

501
00:22:55,730 --> 00:23:02,480
computational ways from the host if you

502
00:22:58,799 --> 00:23:05,429
have four segments versus six segments

503
00:23:02,480 --> 00:23:08,610
so on in a software implementation like

504
00:23:05,429 --> 00:23:10,980
the Linux one the number of segments

505
00:23:08,610 --> 00:23:12,840
that use does not have an impact but if

506
00:23:10,980 --> 00:23:14,639
you go in a hardware implementation I

507
00:23:12,840 --> 00:23:16,769
know that for MPLS version of Sigma

508
00:23:14,639 --> 00:23:19,199
writing there are some chips that are

509
00:23:16,769 --> 00:23:21,389
limited to three or four to a depth of

510
00:23:19,200 --> 00:23:23,309
three or four and it's likely that it

511
00:23:21,389 --> 00:23:25,678
will be the same for ipv6 as well but I

512
00:23:23,309 --> 00:23:27,990
don't know the specs of the other way of

513
00:23:25,679 --> 00:23:30,149
platforms that I used to support ipv6 in

514
00:23:27,990 --> 00:23:31,980
other words do you know okay so you

515
00:23:30,149 --> 00:23:35,340
don't know how many number segments were

516
00:23:31,980 --> 00:23:37,019
used in this test all right on the Linux

517
00:23:35,340 --> 00:23:38,970
implementation we have no issue with the

518
00:23:37,019 --> 00:23:40,590
number of segments but I know that there

519
00:23:38,970 --> 00:23:42,269
are there are chipsets where you are

520
00:23:40,590 --> 00:23:57,059
limited to three or four but I cannot

521
00:23:42,269 --> 00:23:58,039
give you special specific numbers okay

522
00:23:57,059 --> 00:24:08,779
any other questions

523
00:23:58,039 --> 00:24:08,779
great thank you love you okay Thomas

524
00:24:23,560 --> 00:24:28,480
Olivia did you take the little remote oh

525
00:24:29,380 --> 00:24:41,210
sure it is sighs so it's right here in

526
00:24:31,520 --> 00:24:44,330
front of me sorry okay while he's

527
00:24:41,210 --> 00:24:48,560
sending up oh sorry we're taking a water

528
00:24:44,330 --> 00:24:52,060
break we were waiting for everybody to

529
00:24:48,560 --> 00:24:52,060
look away so we could sit in the next

530
00:25:16,870 --> 00:25:20,500
get someone for yourself

531
00:26:11,520 --> 00:26:17,710
okay everybody hydrated caffeinated good

532
00:26:16,870 --> 00:26:21,219
all right

533
00:26:17,710 --> 00:26:21,809
so yes no thank you I'm good I've got

534
00:26:21,220 --> 00:26:24,010
coffee

535
00:26:21,809 --> 00:26:26,049
so our next talk is managing

536
00:26:24,010 --> 00:26:28,330
resource-constrained IOT devices through

537
00:26:26,049 --> 00:26:31,658
dynamically generated and deployed yang

538
00:26:28,330 --> 00:26:33,158
models presented by Thomas jeffer Thomas

539
00:26:31,659 --> 00:26:35,770
has worked for 20 years in the field of

540
00:26:33,159 --> 00:26:37,600
IP based data communications since 2008

541
00:26:35,770 --> 00:26:39,580
he's taught data communications network

542
00:26:37,600 --> 00:26:42,129
engineering and network security at Booz

543
00:26:39,580 --> 00:26:44,470
Haku a University of Applied Sciences in

544
00:26:42,130 --> 00:26:46,120
Berlin Germany he's participated in a

545
00:26:44,470 --> 00:26:47,980
number of European research projects in

546
00:26:46,120 --> 00:26:49,678
the area of ipv6 transition and

547
00:26:47,980 --> 00:26:52,179
deployment and network security issues

548
00:26:49,679 --> 00:26:54,039
his current research interests are IOT

549
00:26:52,179 --> 00:26:56,620
deployment and ipv6 security threat

550
00:26:54,039 --> 00:26:58,990
mitigation techniques co-author Thomas

551
00:26:56,620 --> 00:27:00,760
jeffer holds a diploma in computer

552
00:26:58,990 --> 00:27:02,559
science from Technical University of

553
00:27:00,760 --> 00:27:11,470
Dresden and a doctorate from Potsdam

554
00:27:02,559 --> 00:27:14,639
University both in Germany Oh

555
00:27:11,470 --> 00:27:16,870
Thank You Aaron Laura into division so

556
00:27:14,640 --> 00:27:21,640
now onto something completely different

557
00:27:16,870 --> 00:27:24,639
I feel it's much more application

558
00:27:21,640 --> 00:27:26,640
oriented presenting here today but maybe

559
00:27:24,640 --> 00:27:30,370
has some implications for general

560
00:27:26,640 --> 00:27:34,870
internet area as well so this work is

561
00:27:30,370 --> 00:27:36,668
growing out of yeah some some work I've

562
00:27:34,870 --> 00:27:39,100
doing with my students for quite a

563
00:27:36,669 --> 00:27:40,809
couple of times so we what we do with

564
00:27:39,100 --> 00:27:43,090
them is to program these little devices

565
00:27:40,809 --> 00:27:45,970
here which was sort of 8-bit

566
00:27:43,090 --> 00:27:50,590
microcontrollers and trying to do ipv6

567
00:27:45,970 --> 00:27:52,480
on them so and since everybody now sort

568
00:27:50,590 --> 00:27:57,039
of sort of catches up to this and has

569
00:27:52,480 --> 00:28:00,730
this funny funny IOT name for for this

570
00:27:57,039 --> 00:28:03,908
which I feel like it's yeah there's just

571
00:28:00,730 --> 00:28:07,590
the AI is seems to be or supposed to be

572
00:28:03,909 --> 00:28:09,210
stand for Internet but I always have to

573
00:28:07,590 --> 00:28:11,908
feeling that it's much

574
00:28:09,210 --> 00:28:13,470
or did people who develop these kind of

575
00:28:11,909 --> 00:28:15,090
applications are much more treating the

576
00:28:13,470 --> 00:28:18,740
Internet is a bit pipe and and don't

577
00:28:15,090 --> 00:28:21,230
really make use of what's what

578
00:28:18,740 --> 00:28:24,960
infrastructure we have there so I think

579
00:28:21,230 --> 00:28:26,520
my idea is to maybe put some more

580
00:28:24,960 --> 00:28:29,820
internet into the internet of things

581
00:28:26,520 --> 00:28:33,510
than there is at the moment so I'm

582
00:28:29,820 --> 00:28:37,408
trying to use some suffrages we

583
00:28:33,510 --> 00:28:38,970
mentioned already net conf MQTT is

584
00:28:37,409 --> 00:28:41,039
something which is not entirely

585
00:28:38,970 --> 00:28:42,809
internet-based but something which is

586
00:28:41,039 --> 00:28:45,629
maybe useful for for these kind of

587
00:28:42,809 --> 00:28:48,299
devices and what we are trying to do is

588
00:28:45,630 --> 00:28:51,480
or what we did is what we made is we

589
00:28:48,299 --> 00:28:54,450
made some yang models and constructed

590
00:28:51,480 --> 00:28:57,059
engine and dynamically from data which

591
00:28:54,450 --> 00:28:58,980
we have on this devices and what I want

592
00:28:57,059 --> 00:29:01,110
to do here today is sort of prevent the

593
00:28:58,980 --> 00:29:03,450
resent is and maybe discuss this with

594
00:29:01,110 --> 00:29:06,889
you if this is a good approach or if

595
00:29:03,450 --> 00:29:10,970
something else may work or whatever and

596
00:29:06,890 --> 00:29:14,760
have some feedback on what we should do

597
00:29:10,970 --> 00:29:17,419
so well I try to start with some some

598
00:29:14,760 --> 00:29:21,480
really funny pictures here so basically

599
00:29:17,419 --> 00:29:23,250
there's there's been some some probably

600
00:29:21,480 --> 00:29:25,320
something you seen yourself I mean if

601
00:29:23,250 --> 00:29:27,750
you look at the normal I you Chi

602
00:29:25,320 --> 00:29:29,939
installation today it probably looks

603
00:29:27,750 --> 00:29:33,000
something like this you have a jumbo of

604
00:29:29,940 --> 00:29:34,980
middle boxes and things which aren't

605
00:29:33,000 --> 00:29:36,450
really connected to each other I mean

606
00:29:34,980 --> 00:29:40,169
they may be connected to the Internet

607
00:29:36,450 --> 00:29:43,260
but it's that's the only common feature

608
00:29:40,169 --> 00:29:46,559
where you see here so you got a lot of

609
00:29:43,260 --> 00:29:49,908
different ecosystems each one sort of

610
00:29:46,559 --> 00:29:53,639
tries to keep their devices

611
00:29:49,909 --> 00:29:55,919
close together and to themselves so they

612
00:29:53,640 --> 00:29:59,490
the fight at the moment is really about

613
00:29:55,919 --> 00:30:01,950
who's owning these devices and who is

614
00:29:59,490 --> 00:30:03,960
getting the data and how to how do you

615
00:30:01,950 --> 00:30:06,029
protect your your investment but it's

616
00:30:03,960 --> 00:30:09,419
it's not so much about making this stuff

617
00:30:06,029 --> 00:30:11,100
interoperable so in on the other side it

618
00:30:09,419 --> 00:30:14,880
looks like this that sort of each of

619
00:30:11,100 --> 00:30:18,090
them comes with our little app in order

620
00:30:14,880 --> 00:30:22,169
to manage it so it's requires a lot of

621
00:30:18,090 --> 00:30:25,439
user tension and requires a lot of

622
00:30:22,169 --> 00:30:28,559
for to actually manage such a IOT

623
00:30:25,440 --> 00:30:30,570
installation and it may work in in a

624
00:30:28,559 --> 00:30:32,999
home environment but if she was thinking

625
00:30:30,570 --> 00:30:35,279
about industrial deployments that means

626
00:30:32,999 --> 00:30:37,859
definitely something which is maybe not

627
00:30:35,279 --> 00:30:39,899
the right way to do that sort of you

628
00:30:37,859 --> 00:30:42,059
have a closed ecosystem visiting with an

629
00:30:39,899 --> 00:30:45,299
IOT app only one side on your mobile

630
00:30:42,059 --> 00:30:48,899
phone and a closed device on the other

631
00:30:45,299 --> 00:30:51,779
side so we really need to open up this a

632
00:30:48,899 --> 00:30:53,758
little bit more that's my idea that the

633
00:30:51,779 --> 00:31:01,710
wormwood much would make much more sense

634
00:30:53,759 --> 00:31:05,909
if you had a much more insulation so our

635
00:31:01,710 --> 00:31:08,940
idea for this book was that what needs

636
00:31:05,909 --> 00:31:11,090
to be done to make or to break this

637
00:31:08,940 --> 00:31:13,590
current status quo where everybody is

638
00:31:11,090 --> 00:31:17,009
building closed

639
00:31:13,590 --> 00:31:19,439
ecosystems and everybody invents lives

640
00:31:17,009 --> 00:31:22,710
in their own little bubble and and lot

641
00:31:19,440 --> 00:31:24,299
of supposedly standards being developed

642
00:31:22,710 --> 00:31:26,580
but each of these standards is just

643
00:31:24,299 --> 00:31:31,529
basically some way to to lock you in

644
00:31:26,580 --> 00:31:34,519
into some certain vendor and in some

645
00:31:31,529 --> 00:31:38,850
certain sort of set of weather control

646
00:31:34,519 --> 00:31:42,600
so we actually ask is it possible to use

647
00:31:38,850 --> 00:31:45,209
some real standards-based approach where

648
00:31:42,600 --> 00:31:46,949
you say oh there are standards to manage

649
00:31:45,210 --> 00:31:49,529
devices they are standards to manage

650
00:31:46,950 --> 00:31:52,169
networks maybe we could use this same

651
00:31:49,529 --> 00:31:54,509
kind of standards also in in in this the

652
00:31:52,169 --> 00:31:56,359
IOT domain and not try to invent

653
00:31:54,509 --> 00:32:00,419
something new again

654
00:31:56,359 --> 00:32:02,939
so the task which we had to identify or

655
00:32:00,419 --> 00:32:05,609
which we had to do address was actually

656
00:32:02,940 --> 00:32:08,159
first of all try to find this suitable

657
00:32:05,609 --> 00:32:13,739
network management approach for these

658
00:32:08,159 --> 00:32:15,389
kind of scenarios and if we then agree

659
00:32:13,739 --> 00:32:19,739
on what what we wanted to do with this

660
00:32:15,389 --> 00:32:22,139
device is we are actually done in the

661
00:32:19,739 --> 00:32:29,249
situations that sort of you have these

662
00:32:22,139 --> 00:32:31,859
very very simple tiny devices which may

663
00:32:29,249 --> 00:32:35,070
not be user accessible or they may be

664
00:32:31,859 --> 00:32:38,189
built into some some other appliances

665
00:32:35,070 --> 00:32:41,189
and what you really want to is if we

666
00:32:38,190 --> 00:32:43,679
talk about in IOT is an area we have

667
00:32:41,190 --> 00:32:46,230
where we have hundreds and thousands of

668
00:32:43,679 --> 00:32:48,049
these devices that's you don't want to

669
00:32:46,230 --> 00:32:50,730
manage this manually you don't want to

670
00:32:48,049 --> 00:32:52,559
go to every single device into some

671
00:32:50,730 --> 00:32:53,399
onboarding to some bootstrapping

672
00:32:52,559 --> 00:32:55,350
procedure

673
00:32:53,399 --> 00:32:57,449
you want to have these devices to

674
00:32:55,350 --> 00:33:00,059
announce their capabilities and their

675
00:32:57,450 --> 00:33:02,159
presence in the network and then make

676
00:33:00,059 --> 00:33:06,389
this sort of discover make this network

677
00:33:02,159 --> 00:33:08,340
discoverable so what you need to

678
00:33:06,389 --> 00:33:12,059
actually do is now do to sort of bridge

679
00:33:08,340 --> 00:33:14,519
a gap between the the level of

680
00:33:12,059 --> 00:33:17,639
understanding the device of has of its

681
00:33:14,519 --> 00:33:19,830
capabilities to what the network

682
00:33:17,639 --> 00:33:27,299
management function can actually then

683
00:33:19,830 --> 00:33:30,480
discover and control so the obvious xkcd

684
00:33:27,299 --> 00:33:32,279
comic and this is actually sort of yeah

685
00:33:30,480 --> 00:33:37,379
everybody sort of talks about we'd be

686
00:33:32,279 --> 00:33:40,980
building new standards and it doesn't

687
00:33:37,379 --> 00:33:42,928
work by sort of now going to this scene

688
00:33:40,980 --> 00:33:45,600
and say oh we built a new standards

689
00:33:42,929 --> 00:33:49,110
because what will happen is that we only

690
00:33:45,600 --> 00:33:50,879
had one more and and in the end we get

691
00:33:49,110 --> 00:33:53,750
much more confused and by the way if

692
00:33:50,879 --> 00:33:57,299
like 15 competing standards in the IOT

693
00:33:53,750 --> 00:33:59,330
domain is a wicked ridiculous low number

694
00:33:57,299 --> 00:34:01,740
I mean you've got much more than this so

695
00:33:59,330 --> 00:34:06,360
that that's the current situation or at

696
00:34:01,740 --> 00:34:08,280
least how I perceive it so let's talk a

697
00:34:06,360 --> 00:34:11,339
little bit about net conf and how we

698
00:34:08,280 --> 00:34:14,520
could use it so in that computer all

699
00:34:11,339 --> 00:34:17,879
know is kind of the the big thing in the

700
00:34:14,520 --> 00:34:19,379
ITF so everybody defines yang models

701
00:34:17,879 --> 00:34:22,168
everybody uses not conf

702
00:34:19,379 --> 00:34:24,810
but if you look outside your ITF my

703
00:34:22,168 --> 00:34:29,460
feeling is that nobody knows it so

704
00:34:24,810 --> 00:34:33,119
nobody really has an idea that that

705
00:34:29,460 --> 00:34:36,990
there there is something other than SNMP

706
00:34:33,119 --> 00:34:39,750
and and we could use it for for lots of

707
00:34:36,989 --> 00:34:41,848
things it has all these nice features

708
00:34:39,750 --> 00:34:45,329
buildings are the sort of distinguishing

709
00:34:41,849 --> 00:34:47,879
between state and operation manage whole

710
00:34:45,329 --> 00:34:51,419
networks and individual devices

711
00:34:47,879 --> 00:34:53,639
and have discovered we discoverability

712
00:34:51,418 --> 00:34:56,250
built-in have a data model language

713
00:34:53,639 --> 00:35:00,720
which could be used to define services

714
00:34:56,250 --> 00:35:04,019
etc so that Curtin fits actually I feel

715
00:35:00,720 --> 00:35:06,450
like a good starting point for for also

716
00:35:04,019 --> 00:35:10,140
doing a lot of stuff than sort of

717
00:35:06,450 --> 00:35:13,470
managing routers and switches so we have

718
00:35:10,140 --> 00:35:19,348
this protocol we have the angles which

719
00:35:13,470 --> 00:35:21,990
we could use for for describing data on

720
00:35:19,349 --> 00:35:23,819
or describing capabilities of all those

721
00:35:21,990 --> 00:35:27,359
other things than just routers and

722
00:35:23,819 --> 00:35:30,599
switches so what we wanted to do is use

723
00:35:27,359 --> 00:35:33,569
use these kind of protocols in in

724
00:35:30,599 --> 00:35:36,539
comparison or together basis our very

725
00:35:33,569 --> 00:35:38,400
low powered very constrained devices and

726
00:35:36,539 --> 00:35:41,279
what we found out is that there's

727
00:35:38,400 --> 00:35:46,049
actually not a good working model for

728
00:35:41,279 --> 00:35:47,460
using that confundus devices so first of

729
00:35:46,049 --> 00:35:51,450
all our device will not be able to

730
00:35:47,460 --> 00:35:53,730
process as XML I mean it's kind of

731
00:35:51,450 --> 00:35:55,919
obvious we have like 8 kilobyte of RAM

732
00:35:53,730 --> 00:35:59,599
so whenever IP packet comes in

733
00:35:55,920 --> 00:36:03,690
maybe if quarter of our memories already

734
00:35:59,599 --> 00:36:06,059
signed so kind of difficult to do XML

735
00:36:03,690 --> 00:36:08,460
parsing in such a scenario it's also

736
00:36:06,059 --> 00:36:11,069
difficult to use a pure client-server

737
00:36:08,460 --> 00:36:12,990
communication model because you're

738
00:36:11,069 --> 00:36:16,230
expecting your devices to to run

739
00:36:12,990 --> 00:36:17,788
batteries so these this has have some

740
00:36:16,230 --> 00:36:20,369
very high power batteries in there but

741
00:36:17,789 --> 00:36:21,990
there's smaller ones which have maybe

742
00:36:20,369 --> 00:36:25,170
just a button saw so they may be

743
00:36:21,990 --> 00:36:28,890
sleeping they're maybe not responding

744
00:36:25,170 --> 00:36:32,910
may not be able to communicate in in the

745
00:36:28,890 --> 00:36:35,279
same sense of communication protocol as

746
00:36:32,910 --> 00:36:40,078
you would expect body a that comes

747
00:36:35,279 --> 00:36:43,200
standard the other thing is we need to

748
00:36:40,079 --> 00:36:46,230
sort of also describe if you want to

749
00:36:43,200 --> 00:36:48,960
make our devices discoverable we need to

750
00:36:46,230 --> 00:36:52,950
think about data modelling and if you

751
00:36:48,960 --> 00:36:56,809
look at yang it's a fairly static way of

752
00:36:52,950 --> 00:37:00,328
describing your your data because

753
00:36:56,809 --> 00:37:01,800
obviously a route or limitation or

754
00:37:00,329 --> 00:37:07,710
switch implementation doesn't change

755
00:37:01,800 --> 00:37:12,150
much so you can have very static there

756
00:37:07,710 --> 00:37:15,720
aesthetic versioning system and so you

757
00:37:12,150 --> 00:37:17,820
basically know this in advance so if you

758
00:37:15,720 --> 00:37:19,799
look at how yang is actually being

759
00:37:17,820 --> 00:37:21,800
deployed it's actually sort of you write

760
00:37:19,800 --> 00:37:24,600
up your your specification and then you

761
00:37:21,800 --> 00:37:27,060
compile and then you push it to decline

762
00:37:24,600 --> 00:37:32,569
and deserver and and then you're able to

763
00:37:27,060 --> 00:37:39,390
use net conf that's probably not the way

764
00:37:32,570 --> 00:37:41,850
our devices will work because pushing

765
00:37:39,390 --> 00:37:43,910
this specification onto the client

766
00:37:41,850 --> 00:37:46,920
device works while still in the field

767
00:37:43,910 --> 00:37:48,740
may not be possible so so we've need

768
00:37:46,920 --> 00:37:54,180
some some other more dynamic way to

769
00:37:48,740 --> 00:37:57,600
generates these specifications so what

770
00:37:54,180 --> 00:38:00,029
we did if I said you probably don't want

771
00:37:57,600 --> 00:38:02,880
you to not come directly on the device

772
00:38:00,030 --> 00:38:06,270
so what would you do instead what we do

773
00:38:02,880 --> 00:38:09,270
is we use MQTT so this is a standard

774
00:38:06,270 --> 00:38:13,800
which has been around since quite a

775
00:38:09,270 --> 00:38:20,550
while it's been done by by basically by

776
00:38:13,800 --> 00:38:22,620
IBM and they started in 1999 actually as

777
00:38:20,550 --> 00:38:26,190
a practical solution to monitor or

778
00:38:22,620 --> 00:38:28,200
physical installations and so it's been

779
00:38:26,190 --> 00:38:32,880
through quite some iterations and this

780
00:38:28,200 --> 00:38:35,129
kind of works and it's using TCP maybe

781
00:38:32,880 --> 00:38:37,470
not the best solution for for such

782
00:38:35,130 --> 00:38:39,060
constraint devices but it we've got some

783
00:38:37,470 --> 00:38:42,569
implementations running at the moment so

784
00:38:39,060 --> 00:38:47,130
basically we treat this as a way to push

785
00:38:42,570 --> 00:38:49,800
the the device configuration and also to

786
00:38:47,130 --> 00:38:52,260
get commands back why do we use it

787
00:38:49,800 --> 00:38:56,760
because it's using a public subscribe

788
00:38:52,260 --> 00:38:59,610
model so we have a broker in between

789
00:38:56,760 --> 00:39:03,240
which decouples TT publish over and the

790
00:38:59,610 --> 00:39:05,790
subscriber over topic topic is something

791
00:39:03,240 --> 00:39:08,490
a message channel which allows you to

792
00:39:05,790 --> 00:39:10,410
what pace whatever data you have so

793
00:39:08,490 --> 00:39:14,850
maybe some unstructured data or maybe

794
00:39:10,410 --> 00:39:17,009
some some binary stuff whatever so how

795
00:39:14,850 --> 00:39:19,440
do we use this on how do we put this

796
00:39:17,010 --> 00:39:23,910
together we want to create dynamic yang

797
00:39:19,440 --> 00:39:26,550
models so first of all we need to make

798
00:39:23,910 --> 00:39:29,790
some bootstrapping decisions and that's

799
00:39:26,550 --> 00:39:32,430
what we did here is if you look at some

800
00:39:29,790 --> 00:39:36,720
of the protocols they really have not

801
00:39:32,430 --> 00:39:41,430
very good onboarding procedures so even

802
00:39:36,720 --> 00:39:42,750
if in areas like coop there's I feel at

803
00:39:41,430 --> 00:39:45,120
least there there's something missing

804
00:39:42,750 --> 00:39:47,280
which allows you to quickly set up

805
00:39:45,120 --> 00:39:51,509
things so what we did is we did define

806
00:39:47,280 --> 00:39:53,550
like a command channel and device

807
00:39:51,510 --> 00:39:56,700
configuration channel it's just

808
00:39:53,550 --> 00:39:59,490
something we quickly made up and this

809
00:39:56,700 --> 00:40:02,339
allows us to first of all push device

810
00:39:59,490 --> 00:40:07,709
configuration to the broker and then

811
00:40:02,340 --> 00:40:11,010
push it on to the net conf net current

812
00:40:07,710 --> 00:40:13,550
approach and then get commands back from

813
00:40:11,010 --> 00:40:17,970
the net conf which sort of allows us to

814
00:40:13,550 --> 00:40:19,910
to control our devices and we built this

815
00:40:17,970 --> 00:40:22,859
very complicated architecture here is

816
00:40:19,910 --> 00:40:25,920
which consists of basically two servers

817
00:40:22,860 --> 00:40:29,090
here one of us our mqtt pro core in the

818
00:40:25,920 --> 00:40:33,000
MQTT domain which allows us to do very

819
00:40:29,090 --> 00:40:36,510
low profile communication we get a

820
00:40:33,000 --> 00:40:40,740
profile which we push to the net country

821
00:40:36,510 --> 00:40:43,590
server here we we sort of translate this

822
00:40:40,740 --> 00:40:46,950
profile into a yang model then we can

823
00:40:43,590 --> 00:40:51,420
control the net con server and this sort

824
00:40:46,950 --> 00:40:52,740
of just bridges our commands to the MQTT

825
00:40:51,420 --> 00:40:56,160
broker which again that's sort of

826
00:40:52,740 --> 00:41:00,689
translated or passes on to the device

827
00:40:56,160 --> 00:41:03,509
which needs to be managed so the big

828
00:41:00,690 --> 00:41:08,250
question here was what are they

829
00:41:03,510 --> 00:41:11,630
basically modeling requirements what do

830
00:41:08,250 --> 00:41:14,190
we need to put into our our data models

831
00:41:11,630 --> 00:41:17,670
first of all we need some sort of device

832
00:41:14,190 --> 00:41:21,390
description and identification but we

833
00:41:17,670 --> 00:41:23,880
also have like sensors and actors on our

834
00:41:21,390 --> 00:41:26,190
devices which need to sort of first of

835
00:41:23,880 --> 00:41:27,060
all describe what kind of data at they

836
00:41:26,190 --> 00:41:30,000
are putting

837
00:41:27,060 --> 00:41:33,180
out and what kind of command values they

838
00:41:30,000 --> 00:41:35,610
are accepting so this needs to be these

839
00:41:33,180 --> 00:41:37,200
needs to be modeled and also me we may

840
00:41:35,610 --> 00:41:39,300
have some meta information like the

841
00:41:37,200 --> 00:41:42,140
supported protocols like the supported

842
00:41:39,300 --> 00:41:46,500
middle information which needs to be

843
00:41:42,140 --> 00:41:50,370
managed and all this get gets to written

844
00:41:46,500 --> 00:41:52,100
into these these files and I'll show you

845
00:41:50,370 --> 00:41:55,440
in a minute on how this has been done

846
00:41:52,100 --> 00:41:57,779
there's a lot of folks and there's

847
00:41:55,440 --> 00:41:59,760
currently an IT semantic

848
00:41:57,780 --> 00:42:02,670
interoperability workshop next door and

849
00:41:59,760 --> 00:42:05,070
I felt like maybe was more appropriate

850
00:42:02,670 --> 00:42:07,410
to their topic here what I'm describing

851
00:42:05,070 --> 00:42:09,540
here is but I think it's it's relevant

852
00:42:07,410 --> 00:42:11,759
for for both of them that's actually

853
00:42:09,540 --> 00:42:15,090
there's a lot of activity in this area

854
00:42:11,760 --> 00:42:17,640
and what one feels it's like it's it's

855
00:42:15,090 --> 00:42:21,120
very heavily on the development but

856
00:42:17,640 --> 00:42:22,950
foreign for an actual user or from

857
00:42:21,120 --> 00:42:24,750
actually application developers it's

858
00:42:22,950 --> 00:42:27,140
very hard to make sense of it all

859
00:42:24,750 --> 00:42:29,630
because there are so many competing

860
00:42:27,140 --> 00:42:32,129
initiatives and there's so little

861
00:42:29,630 --> 00:42:35,010
guidance and how you would actually

862
00:42:32,130 --> 00:42:37,920
apply these these schemas and and data

863
00:42:35,010 --> 00:42:39,810
models that at the moment I feel like

864
00:42:37,920 --> 00:42:43,560
everybody's sort of rolling out their

865
00:42:39,810 --> 00:42:46,140
own solution and and it may be that

866
00:42:43,560 --> 00:42:49,110
whatever these guys are coming up with

867
00:42:46,140 --> 00:42:54,390
may be too late by the time they

868
00:42:49,110 --> 00:42:56,700
actually finish their efforts so what we

869
00:42:54,390 --> 00:42:59,850
did is we did an easy choice we just

870
00:42:56,700 --> 00:43:02,250
sort of rolled our own and we in order

871
00:42:59,850 --> 00:43:05,100
to get started we'd simply develop our

872
00:43:02,250 --> 00:43:07,770
own JSON format which fairly closely

873
00:43:05,100 --> 00:43:12,600
resembles what yang actually is doing

874
00:43:07,770 --> 00:43:15,810
already so we are very close to what the

875
00:43:12,600 --> 00:43:19,200
final yang model would look like you see

876
00:43:15,810 --> 00:43:22,560
an example so sort of we have a we have

877
00:43:19,200 --> 00:43:26,160
a device which has a description has

878
00:43:22,560 --> 00:43:28,170
some sort of categorization you see this

879
00:43:26,160 --> 00:43:30,569
at the moment it's it's not very machine

880
00:43:28,170 --> 00:43:34,260
readable but maybe this can be improved

881
00:43:30,570 --> 00:43:37,560
and then we define a sort of some set of

882
00:43:34,260 --> 00:43:41,310
our pcs which can be called and query

883
00:43:37,560 --> 00:43:43,799
from our net phone net conf client

884
00:43:41,310 --> 00:43:47,420
and then sort of provides the

885
00:43:43,800 --> 00:43:49,980
functionality here's the corresponding

886
00:43:47,420 --> 00:43:51,990
yang model which is being has been

887
00:43:49,980 --> 00:43:54,480
generated from this information which

888
00:43:51,990 --> 00:43:58,790
looks very similar here you see the

889
00:43:54,480 --> 00:44:03,990
device and the device description some

890
00:43:58,790 --> 00:44:06,690
identifying data and a corresponding our

891
00:44:03,990 --> 00:44:13,348
PC model which allows us to control the

892
00:44:06,690 --> 00:44:17,070
device so what needs to be discussed a

893
00:44:13,349 --> 00:44:19,410
lot of things I think first of all our

894
00:44:17,070 --> 00:44:23,490
experiences has been that device

895
00:44:19,410 --> 00:44:30,149
bootstrapping is far from automatic and

896
00:44:23,490 --> 00:44:32,339
even if you look at yeah inertia if you

897
00:44:30,150 --> 00:44:35,160
even if you look at drafts from from

898
00:44:32,339 --> 00:44:38,040
co-op where you say they have a like a

899
00:44:35,160 --> 00:44:39,029
repository function where they can where

900
00:44:38,040 --> 00:44:41,700
you couldn't put your device

901
00:44:39,030 --> 00:44:44,970
configurations in there it's not really

902
00:44:41,700 --> 00:44:48,118
defined and how you get to this point

903
00:44:44,970 --> 00:44:50,368
where you can actually register and then

904
00:44:48,119 --> 00:44:52,440
query and whatever so so something is

905
00:44:50,369 --> 00:44:54,690
needed to make this much more painless

906
00:44:52,440 --> 00:44:56,490
than it is at the moment so and and

907
00:44:54,690 --> 00:44:58,500
everybody sort of needs to have

908
00:44:56,490 --> 00:45:04,439
reference point and how he can gets this

909
00:44:58,500 --> 00:45:06,480
stuff so maybe some sort of generic ipv6

910
00:45:04,440 --> 00:45:09,089
multicast address whatever sort of dis

911
00:45:06,480 --> 00:45:11,790
have defining something we have enough

912
00:45:09,089 --> 00:45:16,140
address so let's just use them for for

913
00:45:11,790 --> 00:45:19,859
some good purpose here at the moment we

914
00:45:16,140 --> 00:45:22,529
use as I said we use our own custom

915
00:45:19,859 --> 00:45:25,500
Jason but there are some work going on

916
00:45:22,530 --> 00:45:27,690
based on what we did Walt described in

917
00:45:25,500 --> 00:45:31,980
the paper where people are now actually

918
00:45:27,690 --> 00:45:35,520
using the web ontology language in order

919
00:45:31,980 --> 00:45:37,880
to sort of reproduce what what we have

920
00:45:35,520 --> 00:45:41,070
done and then compared compared to to

921
00:45:37,880 --> 00:45:44,070
with their results and what they found

922
00:45:41,070 --> 00:45:47,550
is sort of in the media's result which

923
00:45:44,070 --> 00:45:51,240
we have seen is that once they use one

924
00:45:47,550 --> 00:45:52,950
of these languages they dramatically

925
00:45:51,240 --> 00:45:54,359
increase the size of the subscription

926
00:45:52,950 --> 00:45:56,519
there's nothing

927
00:45:54,359 --> 00:45:58,949
different in their description and what

928
00:45:56,519 --> 00:46:02,640
I've shown you at the moment but so the

929
00:45:58,949 --> 00:46:05,279
suit just by using another description

930
00:46:02,640 --> 00:46:09,089
language here you get like six times the

931
00:46:05,279 --> 00:46:13,589
amount of configuration data which needs

932
00:46:09,089 --> 00:46:15,029
to be pushed from the device so and what

933
00:46:13,589 --> 00:46:18,989
we are currently doing is we are trying

934
00:46:15,029 --> 00:46:23,660
to look if that this is can actually

935
00:46:18,989 --> 00:46:23,660
then sort of make you can make some some

936
00:46:23,689 --> 00:46:31,828
some some some translation from from

937
00:46:27,449 --> 00:46:34,170
from the oh whale to the ein and what we

938
00:46:31,829 --> 00:46:36,509
haven't looked at all is like something

939
00:46:34,170 --> 00:46:38,910
like device management this was kind of

940
00:46:36,509 --> 00:46:42,089
a rapid prototype I know that sure that

941
00:46:38,910 --> 00:46:44,999
things are working but it's not like

942
00:46:42,089 --> 00:46:48,420
textual solution every saying yes that's

943
00:46:44,999 --> 00:46:50,428
that's we should further manage our

944
00:46:48,420 --> 00:46:52,529
devices so then just a lot of things

945
00:46:50,429 --> 00:46:55,319
which you have looked at which we would

946
00:46:52,529 --> 00:46:59,459
need to pick up if in order to make it a

947
00:46:55,319 --> 00:47:02,339
real protocol so and there's another

948
00:46:59,459 --> 00:47:06,089
question which comes up basically is

949
00:47:02,339 --> 00:47:10,078
that we use yang slightly out of their

950
00:47:06,089 --> 00:47:12,538
original definition so so I said you

951
00:47:10,079 --> 00:47:14,849
usually you've defined yang models as

952
00:47:12,539 --> 00:47:17,160
static models with your referenceable

953
00:47:14,849 --> 00:47:19,529
let's say they have the URI they are

954
00:47:17,160 --> 00:47:21,299
version eyes so you can look them up

955
00:47:19,529 --> 00:47:24,029
later I mean they have a defined meaning

956
00:47:21,299 --> 00:47:27,420
in our configuration this is just

957
00:47:24,029 --> 00:47:29,609
ephemeral so whenever a new device on

958
00:47:27,420 --> 00:47:32,670
boards network whenever something

959
00:47:29,609 --> 00:47:35,219
changes by some firmware update or

960
00:47:32,670 --> 00:47:37,469
whatever on the device we may generate

961
00:47:35,219 --> 00:47:41,400
it completely new yang model which is

962
00:47:37,469 --> 00:47:43,170
then again the current model but it

963
00:47:41,400 --> 00:47:47,099
doesn't have any relation to the the

964
00:47:43,170 --> 00:47:48,689
other one also our time granola ran'l

965
00:47:47,099 --> 00:47:50,279
arity is a little bit different I mean

966
00:47:48,689 --> 00:47:52,709
the Earth's versioning and yang so we

967
00:47:50,279 --> 00:47:54,630
could in theory we could say oh just

968
00:47:52,709 --> 00:47:56,669
version these different things and and

969
00:47:54,630 --> 00:48:00,599
so I didn't into some some data store

970
00:47:56,670 --> 00:48:02,999
but our time to honor our rarity is

971
00:48:00,599 --> 00:48:05,459
sorry it's something completely

972
00:48:02,999 --> 00:48:06,509
different from what you current model

973
00:48:05,459 --> 00:48:10,589
uses

974
00:48:06,510 --> 00:48:13,230
so and also yang s as I see it is at

975
00:48:10,590 --> 00:48:16,020
moment very device centric and what we

976
00:48:13,230 --> 00:48:19,710
would like to do they in in in the end

977
00:48:16,020 --> 00:48:22,050
is that we that we don't want to manage

978
00:48:19,710 --> 00:48:24,240
a thousand devices individually or thin

979
00:48:22,050 --> 00:48:26,130
towers nor whatever how many device we

980
00:48:24,240 --> 00:48:29,029
have in the end in the end we wanted to

981
00:48:26,130 --> 00:48:32,400
have something where we aggregate our

982
00:48:29,030 --> 00:48:36,900
device information and make it a network

983
00:48:32,400 --> 00:48:39,180
which we manage and this is maybe not so

984
00:48:36,900 --> 00:48:41,460
much out of scope than the other two

985
00:48:39,180 --> 00:48:44,819
issues but still something which is

986
00:48:41,460 --> 00:48:48,300
currently not very developed in the

987
00:48:44,820 --> 00:48:51,869
current gangster's so my question is is

988
00:48:48,300 --> 00:48:53,910
this could we use it like this or some

989
00:48:51,869 --> 00:48:56,310
strong opposition to what we did

990
00:48:53,910 --> 00:48:59,750
who knows so currently there's a working

991
00:48:56,310 --> 00:49:02,250
prototype it was kind of a moderate

992
00:48:59,750 --> 00:49:04,080
coding effort there are some very good

993
00:49:02,250 --> 00:49:07,350
existing libraries which you could use

994
00:49:04,080 --> 00:49:10,380
and we basically try to use this as a

995
00:49:07,350 --> 00:49:15,299
further step or further development step

996
00:49:10,380 --> 00:49:19,080
for for other existing projects with our

997
00:49:15,300 --> 00:49:23,700
students so this should be hopefully

998
00:49:19,080 --> 00:49:26,190
some some good efforts which we can can

999
00:49:23,700 --> 00:49:29,460
work on in the future so if you have any

1000
00:49:26,190 --> 00:49:39,150
questions please state them now or drop

1001
00:49:29,460 --> 00:49:41,600
me an email or whatever questions

1002
00:49:39,150 --> 00:49:41,600
fitments

1003
00:49:47,359 --> 00:50:00,719
so so you mentioned the ability to run

1004
00:49:54,680 --> 00:50:04,440
the napkin fits over not mqtt beta over

1005
00:50:00,719 --> 00:50:09,239
TLS and and you also told us that it's

1006
00:50:04,440 --> 00:50:13,229
an 8-bit device so how realistic is it

1007
00:50:09,239 --> 00:50:14,999
that we like in this realm for you to

1008
00:50:13,229 --> 00:50:18,359
have cheap devices that we're going to

1009
00:50:14,999 --> 00:50:22,468
get some actual security okay do you

1010
00:50:18,359 --> 00:50:26,808
have any thoughts on that based on yeah

1011
00:50:22,469 --> 00:50:29,069
we actually thought about this that's

1012
00:50:26,809 --> 00:50:31,259
that's it it's a very good question I

1013
00:50:29,069 --> 00:50:35,519
mean how do we manage security on such

1014
00:50:31,259 --> 00:50:42,569
devices in theory these devices could

1015
00:50:35,519 --> 00:50:44,788
support TT OS running UDP whatever so my

1016
00:50:42,569 --> 00:50:47,160
personal view is and this is just purely

1017
00:50:44,789 --> 00:50:49,769
sort of academic here is that we could

1018
00:50:47,160 --> 00:50:52,529
so construct the security boundary here

1019
00:50:49,769 --> 00:50:54,538
at the broker where we say or we

1020
00:50:52,529 --> 00:50:57,809
whenever we talk to something outside

1021
00:50:54,539 --> 00:51:00,420
the network then we can use whatever

1022
00:50:57,809 --> 00:51:03,779
encryption scheme which is deployable

1023
00:51:00,420 --> 00:51:06,269
and but whenever sort of these guys are

1024
00:51:03,779 --> 00:51:10,130
been talking today to the broker then we

1025
00:51:06,269 --> 00:51:13,979
simply use a simple scheme and we just

1026
00:51:10,130 --> 00:51:16,019
just make just be sure that they can't

1027
00:51:13,979 --> 00:51:17,879
be reached from the outside so we would

1028
00:51:16,019 --> 00:51:19,618
need some some some very serious

1029
00:51:17,880 --> 00:51:22,920
filtering here some it's they're very

1030
00:51:19,619 --> 00:51:25,349
serious security policies in place to

1031
00:51:22,920 --> 00:51:27,779
make this happen but that that's a

1032
00:51:25,349 --> 00:51:29,699
that's a very good question because I

1033
00:51:27,779 --> 00:51:34,049
think it's it's also even if we could

1034
00:51:29,699 --> 00:51:37,069
deploy it TOS at the moment my feeling

1035
00:51:34,049 --> 00:51:39,089
is that like the life cycles of these

1036
00:51:37,069 --> 00:51:41,308
technologies are completely different I

1037
00:51:39,089 --> 00:51:45,180
mean if you're talking about Internet

1038
00:51:41,309 --> 00:51:48,420
related stuff nobodies would think that

1039
00:51:45,180 --> 00:51:50,279
sort of the current TOS terminals will

1040
00:51:48,420 --> 00:51:51,660
survive another five years there will be

1041
00:51:50,279 --> 00:51:55,049
another one and another one and another

1042
00:51:51,660 --> 00:51:57,299
one and sort of but here we may have may

1043
00:51:55,049 --> 00:51:57,860
have installations like you're right

1044
00:51:57,299 --> 00:52:00,830
sure

1045
00:51:57,860 --> 00:52:04,100
your air conditioning system which has a

1046
00:52:00,830 --> 00:52:07,460
lifecycle which is multiple time stand

1047
00:52:04,100 --> 00:52:10,220
and an ordinary computer so so I think

1048
00:52:07,460 --> 00:52:12,620
in the end it's kind of futile to try to

1049
00:52:10,220 --> 00:52:15,439
push security on these little devices

1050
00:52:12,620 --> 00:52:18,170
here and I think my personal view is

1051
00:52:15,440 --> 00:52:22,130
what much better invested to to have a

1052
00:52:18,170 --> 00:52:25,040
clearer security boundary in the

1053
00:52:22,130 --> 00:52:29,770
networking and then some use the broker

1054
00:52:25,040 --> 00:52:33,500
here as a kind of offloading security

1055
00:52:29,770 --> 00:52:40,580
functions instead of pushing them out to

1056
00:52:33,500 --> 00:52:42,110
the devices once it's so funny here just

1057
00:52:40,580 --> 00:52:47,540
as just as a follow-up isn't isn't the

1058
00:52:42,110 --> 00:52:49,870
last hop Wireless it is yeah how do you

1059
00:52:47,540 --> 00:52:53,210
build a security boundary do you protect

1060
00:52:49,870 --> 00:52:55,220
all radio waves or while you while you

1061
00:52:53,210 --> 00:52:57,740
can have link layer encryption minutes

1062
00:52:55,220 --> 00:52:59,799
that's what you usually use in this kind

1063
00:52:57,740 --> 00:53:02,779
of networks so you have a link layer

1064
00:52:59,800 --> 00:53:05,240
protection but I mean this did obviously

1065
00:53:02,780 --> 00:53:07,670
just goes to the next router or whatever

1066
00:53:05,240 --> 00:53:09,169
so oh yeah but but I actually came up

1067
00:53:07,670 --> 00:53:14,210
for different questions since you had

1068
00:53:09,170 --> 00:53:16,640
this your issues list there with the

1069
00:53:14,210 --> 00:53:18,470
what how should this model be looking

1070
00:53:16,640 --> 00:53:22,100
like how others have have you had any

1071
00:53:18,470 --> 00:53:25,160
thoughts on how one would one could

1072
00:53:22,100 --> 00:53:27,589
preserve the properties that the usual

1073
00:53:25,160 --> 00:53:30,080
yang models identifiable forever whether

1074
00:53:27,590 --> 00:53:31,850
you are I could you come up with their

1075
00:53:30,080 --> 00:53:33,799
generation and archiving scheme or

1076
00:53:31,850 --> 00:53:36,410
something that those properties could be

1077
00:53:33,800 --> 00:53:38,060
preserved to that you have a fair fair

1078
00:53:36,410 --> 00:53:41,480
chance to talk to the people without

1079
00:53:38,060 --> 00:53:42,860
being shut down immediately I'm just

1080
00:53:41,480 --> 00:53:44,420
wondering whether this whether there's

1081
00:53:42,860 --> 00:53:45,860
architectural considerations or design

1082
00:53:44,420 --> 00:53:51,050
considerations you could put forward

1083
00:53:45,860 --> 00:53:53,720
here well the thing is for me it doesn't

1084
00:53:51,050 --> 00:53:55,460
make much sense to make these these

1085
00:53:53,720 --> 00:53:59,839
young models were horrible I mean I

1086
00:53:55,460 --> 00:54:02,420
don't think there's a hard architectural

1087
00:53:59,840 --> 00:54:04,700
constraint here I mean we'd be we could

1088
00:54:02,420 --> 00:54:06,920
whenever were sort of a new kind of

1089
00:54:04,700 --> 00:54:10,189
model is generated whenever new kind of

1090
00:54:06,920 --> 00:54:11,089
data comes in and I expect these kind of

1091
00:54:10,190 --> 00:54:14,900
networks to be

1092
00:54:11,089 --> 00:54:17,869
very flexible and very very rapidly

1093
00:54:14,900 --> 00:54:20,509
changing so what would happen here is

1094
00:54:17,869 --> 00:54:24,229
that you may generate new like gang

1095
00:54:20,509 --> 00:54:27,710
models in a very short time frame there

1096
00:54:24,229 --> 00:54:30,460
is no particular reason you couldn't

1097
00:54:27,710 --> 00:54:33,109
store these devices do you and these

1098
00:54:30,460 --> 00:54:35,619
configurations really the only reason I

1099
00:54:33,109 --> 00:54:38,900
was thinking about this why would you

1100
00:54:35,619 --> 00:54:40,849
because if the building burns down and

1101
00:54:38,900 --> 00:54:42,410
you want to show our what was the reason

1102
00:54:40,849 --> 00:54:44,329
it might be useful to understand in

1103
00:54:42,410 --> 00:54:46,190
retrospect what has been an operation at

1104
00:54:44,329 --> 00:54:47,960
which point in time of expansion of that

1105
00:54:46,190 --> 00:54:49,789
building yeah that's that's that's fine

1106
00:54:47,960 --> 00:54:51,349
yeah thanks thanks for for this coming

1107
00:54:49,789 --> 00:54:57,009
and you you're completely right I mean

1108
00:54:51,349 --> 00:54:59,900
in if if we would have these very strong

1109
00:54:57,009 --> 00:55:04,069
requirements we possibly can build them

1110
00:54:59,900 --> 00:55:08,779
in here I was just thinking there's in

1111
00:55:04,069 --> 00:55:10,719
order to make this in order to align

1112
00:55:08,779 --> 00:55:14,509
this with the current yang

1113
00:55:10,719 --> 00:55:17,059
specifications they would need it to to

1114
00:55:14,509 --> 00:55:19,099
at least sort of augment their time base

1115
00:55:17,059 --> 00:55:22,549
because at the moment I think the the

1116
00:55:19,099 --> 00:55:25,940
current yang granularity for four

1117
00:55:22,549 --> 00:55:28,430
versions in in the current gang standard

1118
00:55:25,940 --> 00:55:31,579
is a day so so you can't be more

1119
00:55:28,430 --> 00:55:35,019
specific than this and sort of if he

1120
00:55:31,579 --> 00:55:39,200
would use the current existing

1121
00:55:35,019 --> 00:55:46,359
mechanisms then we would need to extend

1122
00:55:39,200 --> 00:55:46,359
them somehow yeah okay Thank You Thomas

1123
00:56:11,849 --> 00:56:18,190
so our next paper is no domain left

1124
00:56:15,280 --> 00:56:20,800
behind is let's encrypt democratizing

1125
00:56:18,190 --> 00:56:23,490
encryption authors are Martin Eriksen

1126
00:56:20,800 --> 00:56:27,070
from Delft University need technology

1127
00:56:23,490 --> 00:56:28,180
message Krasinski from Delft University

1128
00:56:27,070 --> 00:56:31,990
of Technology

1129
00:56:28,180 --> 00:56:36,848
sorry message giovanni mora SI DN labs

1130
00:56:31,990 --> 00:56:38,140
semana edge elites de Kubb from Delft

1131
00:56:36,849 --> 00:56:39,849
University technology and young

1132
00:56:38,140 --> 00:56:43,680
Vanderburgh from Delft University

1133
00:56:39,849 --> 00:56:46,869
technology Martin work said NCSC

1134
00:56:43,680 --> 00:56:48,790
Netherlands as an advisor on the

1135
00:56:46,869 --> 00:56:50,410
security of inter network infrastructure

1136
00:56:48,790 --> 00:56:52,180
standards and protocols he is an

1137
00:56:50,410 --> 00:56:55,899
interest in cryptography in its lack of

1138
00:56:52,180 --> 00:56:57,339
deployment NCS CL is part of the central

1139
00:56:55,900 --> 00:56:59,260
Dutch government its mission is to

1140
00:56:57,340 --> 00:57:01,450
contribute to the enhancement of the

1141
00:56:59,260 --> 00:57:03,369
resilience of Dutch society in the

1142
00:57:01,450 --> 00:57:05,200
digital domain and thus to create a

1143
00:57:03,369 --> 00:57:09,609
secure open and stable information

1144
00:57:05,200 --> 00:57:12,040
society NCSC Netherlands functions as an

1145
00:57:09,609 --> 00:57:14,230
information hub and center of knowledge

1146
00:57:12,040 --> 00:57:16,119
for information security and also hosts

1147
00:57:14,230 --> 00:57:17,200
the computer emergency response team for

1148
00:57:16,119 --> 00:57:18,880
the Dutch central government

1149
00:57:17,200 --> 00:57:21,189
Martin hold the master science from

1150
00:57:18,880 --> 00:57:23,050
University of Twente in telematics and a

1151
00:57:21,190 --> 00:57:25,450
master science from leading University

1152
00:57:23,050 --> 00:57:27,849
in cybersecurity governance this is his

1153
00:57:25,450 --> 00:57:29,319
first time at the IETF he's here to

1154
00:57:27,849 --> 00:57:31,119
understand how he and his employer can

1155
00:57:29,320 --> 00:57:32,619
contribute in this realm follow

1156
00:57:31,119 --> 00:57:35,650
developments and make new acquaintances

1157
00:57:32,619 --> 00:57:38,730
with similar interests and I hope are

1158
00:57:35,650 --> 00:57:41,380
you sharing your passwords with everyone

1159
00:57:38,730 --> 00:57:42,970
that's a that's a great thing to do on

1160
00:57:41,380 --> 00:57:45,760
your first visit to the ITF you'll make

1161
00:57:42,970 --> 00:57:49,540
a lot of friends people will help you

1162
00:57:45,760 --> 00:57:51,580
with your email and be sure to leave

1163
00:57:49,540 --> 00:57:58,089
your instant messaging up so that we can

1164
00:57:51,580 --> 00:58:01,170
all share and that's right you'll get a

1165
00:57:58,089 --> 00:58:01,170
mentor this way very quickly

1166
00:58:05,840 --> 00:58:09,490
[Laughter]

1167
00:58:16,660 --> 00:58:26,920
if you're having trouble you can put on

1168
00:58:18,710 --> 00:58:26,920
my laptop it looks like he got it okay

1169
00:58:31,510 --> 00:58:35,260
people want to hear it you have to say

1170
00:58:36,970 --> 00:58:42,740
so thanks for the first laugh I'm I

1171
00:58:40,099 --> 00:58:46,010
think I'm not I'm bi between you and

1172
00:58:42,740 --> 00:58:47,419
your your next coffee break so I in

1173
00:58:46,010 --> 00:58:48,799
order to to keep everyone away you guys

1174
00:58:47,420 --> 00:58:51,109
three questions and we'll do some

1175
00:58:48,799 --> 00:58:54,079
exercise lifting hands so this talk is

1176
00:58:51,109 --> 00:58:58,339
about let's encrypt come who's heard of

1177
00:58:54,079 --> 00:59:01,520
let's encrypt lots of exercise cool who

1178
00:58:58,339 --> 00:59:04,069
has personally used let's encrypt okay

1179
00:59:01,520 --> 00:59:06,140
about half maybe other people in the

1180
00:59:04,069 --> 00:59:10,400
room who have used that's encrypt on a

1181
00:59:06,140 --> 00:59:13,460
large scale like okay cool yeah so this

1182
00:59:10,400 --> 00:59:17,119
this talk is about the deploy or the use

1183
00:59:13,460 --> 00:59:21,319
of let's encrypt in his first year I did

1184
00:59:17,119 --> 00:59:23,299
this as a thesis work last year so it's

1185
00:59:21,319 --> 00:59:27,109
also data from you last year people who

1186
00:59:23,299 --> 00:59:29,869
have attended the Chicago map orgy talk

1187
00:59:27,109 --> 00:59:32,779
of Giovanni have perhaps seen some of

1188
00:59:29,869 --> 00:59:34,700
this and for those people I expect good

1189
00:59:32,779 --> 00:59:37,039
criticism because you've had some time

1190
00:59:34,700 --> 00:59:45,770
to think about this so so so please

1191
00:59:37,039 --> 00:59:47,480
please do save those for later one thing

1192
00:59:45,770 --> 00:59:49,759
we got asked when we talked about this

1193
00:59:47,480 --> 00:59:53,450
is whether we are affiliated with let's

1194
00:59:49,760 --> 00:59:57,619
encrypt and we're not so we're

1195
00:59:53,450 --> 00:59:59,720
independent and it's it this research

1196
00:59:57,619 --> 01:00:03,470
was kind of born out of an interest to

1197
00:59:59,720 --> 01:00:06,160
find out whether their statistics could

1198
01:00:03,470 --> 01:00:10,189
be improved or what the what another

1199
01:00:06,160 --> 01:00:14,000
crew people would think measuring their

1200
01:00:10,190 --> 01:00:15,529
progress so the the quick motivation was

1201
01:00:14,000 --> 01:00:18,529
basically at this guy and the

1202
01:00:15,529 --> 01:00:24,619
revelations he brought into the

1203
01:00:18,529 --> 01:00:26,270
community so I think since the the news

1204
01:00:24,619 --> 01:00:29,120
broke

1205
01:00:26,270 --> 01:00:32,630
seen wider spread encryption on the

1206
01:00:29,120 --> 01:00:35,480
internet and I won't go into that too

1207
01:00:32,630 --> 01:00:37,670
much detail but you can also plot it on

1208
01:00:35,480 --> 01:00:40,520
on on browser telemetry so if you look

1209
01:00:37,670 --> 01:00:44,150
in the same period at the adoption of

1210
01:00:40,520 --> 01:00:47,180
HTTPS on the web for for basically

1211
01:00:44,150 --> 01:00:50,510
random people we've crossed the 50

1212
01:00:47,180 --> 01:00:52,490
percent mark somewhere and not that's

1213
01:00:50,510 --> 01:00:54,590
that's really cool because that that's

1214
01:00:52,490 --> 01:00:56,899
been a long time coming and it's been I

1215
01:00:54,590 --> 01:00:58,280
guess the hard work of many people on

1216
01:00:56,900 --> 01:00:59,900
the other hand it also means that

1217
01:00:58,280 --> 01:01:04,250
there's a lot of people on the internet

1218
01:00:59,900 --> 01:01:06,470
who do not have HTTPS so one of the

1219
01:01:04,250 --> 01:01:09,230
questions I ask myself is like why is

1220
01:01:06,470 --> 01:01:11,060
this why is this the case and it turned

1221
01:01:09,230 --> 01:01:12,650
out that lots of people have been doing

1222
01:01:11,060 --> 01:01:14,480
work in this area and and one of the

1223
01:01:12,650 --> 01:01:17,930
principal reasons that were in

1224
01:01:14,480 --> 01:01:22,520
identified as as well troubling in this

1225
01:01:17,930 --> 01:01:25,220
area is the use of certificates so

1226
01:01:22,520 --> 01:01:28,580
barriers to to ubiquitous encryption on

1227
01:01:25,220 --> 01:01:30,529
the web are the cost of porches

1228
01:01:28,580 --> 01:01:34,069
deployment and and and renewal of

1229
01:01:30,530 --> 01:01:36,290
certificates and it's also it's not just

1230
01:01:34,070 --> 01:01:38,660
that it's also if you want to do it as a

1231
01:01:36,290 --> 01:01:40,340
skill and that skill is if you do it for

1232
01:01:38,660 --> 01:01:42,589
people who are not in the business of

1233
01:01:40,340 --> 01:01:45,230
running IT or running networks or doing

1234
01:01:42,590 --> 01:01:47,210
security like maybe the bakery on the

1235
01:01:45,230 --> 01:01:49,400
front of your street you need to do it

1236
01:01:47,210 --> 01:01:52,520
for a lot of people and then you run

1237
01:01:49,400 --> 01:01:55,270
into the complexity issues so there's

1238
01:01:52,520 --> 01:01:57,860
basically two to two barriers here and

1239
01:01:55,270 --> 01:02:01,220
the people that let's encrypt they aim

1240
01:01:57,860 --> 01:02:04,180
to make this ubiquitous so they they to

1241
01:02:01,220 --> 01:02:08,870
to Main I think contributions day they

1242
01:02:04,180 --> 01:02:11,480
make is bring the cost down to two free

1243
01:02:08,870 --> 01:02:14,839
they don't do not charge for four

1244
01:02:11,480 --> 01:02:17,450
certificates and they employ automation

1245
01:02:14,840 --> 01:02:20,180
I think there's even a there's been an

1246
01:02:17,450 --> 01:02:24,020
ACME working group at the ITF for for a

1247
01:02:20,180 --> 01:02:25,520
while now and that that spot you know

1248
01:02:24,020 --> 01:02:27,410
there's two parts to this there's a

1249
01:02:25,520 --> 01:02:30,050
protocol to actually request a

1250
01:02:27,410 --> 01:02:32,120
certificate and obtain one and there is

1251
01:02:30,050 --> 01:02:33,590
software implementing this protocol

1252
01:02:32,120 --> 01:02:36,200
which can help you to for example

1253
01:02:33,590 --> 01:02:39,320
configure your web server or deploy

1254
01:02:36,200 --> 01:02:39,980
these certificates at scale so that's

1255
01:02:39,320 --> 01:02:42,920
all

1256
01:02:39,980 --> 01:02:45,530
the work of other people what I was

1257
01:02:42,920 --> 01:02:47,990
interested in is to find out whether the

1258
01:02:45,530 --> 01:02:50,180
first year of let's encrypt help them

1259
01:02:47,990 --> 01:02:53,118
reach those people that would need this

1260
01:02:50,180 --> 01:02:56,839
most so if you think about this the big

1261
01:02:53,119 --> 01:03:00,859
websites already had encryption in some

1262
01:02:56,840 --> 01:03:02,240
cases and they were slowly moving over

1263
01:03:00,859 --> 01:03:04,910
but at least they would have the money

1264
01:03:02,240 --> 01:03:09,618
and maybe also the brainpower to to make

1265
01:03:04,910 --> 01:03:12,410
this work so the other part of the web

1266
01:03:09,619 --> 01:03:14,450
is is end users and and my question

1267
01:03:12,410 --> 01:03:16,310
would be like has the let's encrypt

1268
01:03:14,450 --> 01:03:18,259
being successful in his first year to

1269
01:03:16,310 --> 01:03:22,100
democratize the use of encryption on the

1270
01:03:18,260 --> 01:03:25,640
web how did we do this well this was

1271
01:03:22,100 --> 01:03:29,630
measurement work and it was basically

1272
01:03:25,640 --> 01:03:31,750
analyzing the first year of issuance we

1273
01:03:29,630 --> 01:03:35,470
did not look at deployment which is a

1274
01:03:31,750 --> 01:03:38,240
which is definitely something which is

1275
01:03:35,470 --> 01:03:40,580
much more interesting but is also much

1276
01:03:38,240 --> 01:03:42,379
harder if you want to look back so what

1277
01:03:40,580 --> 01:03:44,920
we did was look at issuance in the first

1278
01:03:42,380 --> 01:03:47,540
year and then we show adoption or

1279
01:03:44,920 --> 01:03:49,430
requests for which certificates were

1280
01:03:47,540 --> 01:03:53,680
issued from various perspectives and

1281
01:03:49,430 --> 01:03:56,839
analyzed the coverage within the market

1282
01:03:53,680 --> 01:03:59,450
we did the first year September 2015 was

1283
01:03:56,840 --> 01:04:00,859
when they went live or day they issued

1284
01:03:59,450 --> 01:04:03,549
the first certificates I think they went

1285
01:04:00,859 --> 01:04:07,450
live in October until one year later and

1286
01:04:03,550 --> 01:04:10,790
all results I'll show you are reduced to

1287
01:04:07,450 --> 01:04:14,089
TL due to LD or three LD form so for

1288
01:04:10,790 --> 01:04:16,970
TLDs that have well ending for example

1289
01:04:14,090 --> 01:04:19,760
dot NL we look at domain Dolan L for the

1290
01:04:16,970 --> 01:04:24,109
dot code that UK type of TLDs we look at

1291
01:04:19,760 --> 01:04:26,240
domain dog code at UK what data sets are

1292
01:04:24,109 --> 01:04:28,130
used for the certificates we use

1293
01:04:26,240 --> 01:04:31,189
certificate transparency who's familiar

1294
01:04:28,130 --> 01:04:33,260
with certificate transparency

1295
01:04:31,190 --> 01:04:35,480
so certificates transparency is

1296
01:04:33,260 --> 01:04:38,300
basically an append-only log of all

1297
01:04:35,480 --> 01:04:41,900
certificates seen as submitted by

1298
01:04:38,300 --> 01:04:45,080
various parties and the nice thing about

1299
01:04:41,900 --> 01:04:50,000
guys at let's encrypt is guys and girls

1300
01:04:45,080 --> 01:04:53,328
is that they decided to submit all the

1301
01:04:50,000 --> 01:04:55,190
issued certificates they ever coined so

1302
01:04:53,329 --> 01:04:58,039
that means that we actually have data to

1303
01:04:55,190 --> 01:05:01,519
offer we have the data we have access to

1304
01:04:58,039 --> 01:05:05,479
all the issued certificates worldwide

1305
01:05:01,519 --> 01:05:07,069
and but if you want to understand like

1306
01:05:05,479 --> 01:05:09,049
who's using this you need to map to

1307
01:05:07,069 --> 01:05:10,058
organizations and we do that in two

1308
01:05:09,049 --> 01:05:13,430
steps

1309
01:05:10,059 --> 01:05:17,650
adèle there was access to far side DNS

1310
01:05:13,430 --> 01:05:22,069
DB which is a passive DNS data set and

1311
01:05:17,650 --> 01:05:25,729
in previous work they used max yd g IP

1312
01:05:22,069 --> 01:05:28,339
and Whois data to actually create to

1313
01:05:25,729 --> 01:05:31,939
bundle IP addresses into organizations

1314
01:05:28,339 --> 01:05:34,670
and organizations there's hosters so

1315
01:05:31,940 --> 01:05:36,469
what can you do and now I'll just walk

1316
01:05:34,670 --> 01:05:38,239
you through the different results in

1317
01:05:36,469 --> 01:05:40,130
different stages so these were the

1318
01:05:38,239 --> 01:05:44,479
numbers which were like publicly known

1319
01:05:40,130 --> 01:05:46,999
and it's just the growth of the service

1320
01:05:44,479 --> 01:05:50,629
so you you first see other growth in in

1321
01:05:46,999 --> 01:05:55,819
unique fqd ends which hits 10 million

1322
01:05:50,630 --> 01:05:59,449
around September 16 if you look at the

1323
01:05:55,819 --> 01:06:02,119
domain so you you get rid of all the

1324
01:05:59,449 --> 01:06:04,789
people issuing certificates for 100

1325
01:06:02,119 --> 01:06:06,969
machines under their own domain it's

1326
01:06:04,789 --> 01:06:09,739
it's much lower it's around 4 million oh

1327
01:06:06,969 --> 01:06:11,979
but that's that's a nice number in a

1328
01:06:09,739 --> 01:06:14,900
year but what does it really tell you

1329
01:06:11,979 --> 01:06:17,598
you can get like relative numbers if you

1330
01:06:14,900 --> 01:06:20,749
compare it with all known domains

1331
01:06:17,599 --> 01:06:23,119
worldwide as found in the specific DNS

1332
01:06:20,749 --> 01:06:27,709
data set and what you then get is the

1333
01:06:23,119 --> 01:06:31,549
number of 2% of all domains worldwide as

1334
01:06:27,709 --> 01:06:33,680
containing this data set have at least

1335
01:06:31,549 --> 01:06:37,400
one certificates issued by let's encrypt

1336
01:06:33,680 --> 01:06:40,848
and then you you can really see why this

1337
01:06:37,400 --> 01:06:44,539
is a big thing because 2% in year is

1338
01:06:40,849 --> 01:06:48,140
pretty pretty pretty nice so that's just

1339
01:06:44,539 --> 01:06:50,569
the raw numbers now who is using let's

1340
01:06:48,140 --> 01:06:53,150
encrypt so if you look at a popular

1341
01:06:50,569 --> 01:06:57,288
website websites you can basically see

1342
01:06:53,150 --> 01:06:59,930
that it stabilizes in the summer of 69

1343
01:06:57,289 --> 01:07:02,089
every time you increase your top list

1344
01:06:59,930 --> 01:07:04,459
with the factor of 10 they also

1345
01:07:02,089 --> 01:07:07,130
contribute a factor of 10 more to the

1346
01:07:04,459 --> 01:07:10,370
overall percentage of

1347
01:07:07,130 --> 01:07:15,170
of certificates over the domains sorry

1348
01:07:10,370 --> 01:07:19,279
so your your exit top 1000 has a

1349
01:07:15,170 --> 01:07:22,730
contribution of like point zero one

1350
01:07:19,280 --> 01:07:23,990
percent and it goes up in ten tens and

1351
01:07:22,730 --> 01:07:26,450
tens and tens and what's interesting

1352
01:07:23,990 --> 01:07:30,259
about this is that if you look at the

1353
01:07:26,450 --> 01:07:32,299
top Alexa 1 million they only have about

1354
01:07:30,260 --> 01:07:35,030
two percent coverage which means that

1355
01:07:32,300 --> 01:07:37,400
the other 98 percent are not for popular

1356
01:07:35,030 --> 01:07:39,080
websites or at least not for popular

1357
01:07:37,400 --> 01:07:45,560
websites if you look at it from the

1358
01:07:39,080 --> 01:07:47,630
perspective of Alexa what's that's kind

1359
01:07:45,560 --> 01:07:49,370
of well you could expect that what's

1360
01:07:47,630 --> 01:07:53,060
more interesting actually is you if you

1361
01:07:49,370 --> 01:07:57,440
turn it around so if you look at within

1362
01:07:53,060 --> 01:08:00,710
each ranking what is the percentage that

1363
01:07:57,440 --> 01:08:02,450
is using let's encrypt you get to the

1364
01:08:00,710 --> 01:08:04,850
point where you see that the most

1365
01:08:02,450 --> 01:08:08,450
popular domains on the planet according

1366
01:08:04,850 --> 01:08:11,690
to Alexa actually have the higher

1367
01:08:08,450 --> 01:08:14,930
percentage use so 18 percent of the

1368
01:08:11,690 --> 01:08:16,940
Alexa 1000 domains employ people who

1369
01:08:14,930 --> 01:08:18,439
know about let's encrypt and they've

1370
01:08:16,939 --> 01:08:22,969
issued the certificate within their

1371
01:08:18,439 --> 01:08:25,719
domain within a year so I guess that's a

1372
01:08:22,970 --> 01:08:29,960
good bit of outreach and that kind of

1373
01:08:25,720 --> 01:08:34,070
slows down when you go to the the bigger

1374
01:08:29,960 --> 01:08:36,830
sets so what we can conclude from from

1375
01:08:34,069 --> 01:08:38,660
from statistics like this this is that

1376
01:08:36,830 --> 01:08:40,460
issuance is not restricted to the lower

1377
01:08:38,660 --> 01:08:43,040
end of the market also the bigger

1378
01:08:40,460 --> 01:08:45,620
websites are basically doing this we

1379
01:08:43,040 --> 01:08:51,200
verified that it's not just this is not

1380
01:08:45,620 --> 01:08:53,330
the like that the big the slash on the

1381
01:08:51,200 --> 01:08:55,910
website like a front page it's usually

1382
01:08:53,330 --> 01:08:58,910
not so we got hits for what the

1383
01:08:55,910 --> 01:09:01,670
Washington Street Wall Street Journal

1384
01:08:58,910 --> 01:09:03,470
for the Lamond and for some other

1385
01:09:01,670 --> 01:09:05,180
newspapers and every time you had a hit

1386
01:09:03,470 --> 01:09:07,070
like that it's not for the front page

1387
01:09:05,180 --> 01:09:11,570
it's for for example internal system a

1388
01:09:07,069 --> 01:09:13,700
testing system or something exhale

1389
01:09:11,569 --> 01:09:16,099
axillary which points to the fact that

1390
01:09:13,700 --> 01:09:19,750
it's probably engineers who like this

1391
01:09:16,100 --> 01:09:20,839
stuff and just try it which is nice so

1392
01:09:19,750 --> 01:09:24,259
enough

1393
01:09:20,839 --> 01:09:25,880
with the popular domains what who is not

1394
01:09:24,259 --> 01:09:28,040
who's actually contributing to this

1395
01:09:25,880 --> 01:09:29,690
growth and I'll take a little bit

1396
01:09:28,040 --> 01:09:32,738
explaining this graph because it's not

1397
01:09:29,689 --> 01:09:36,379
immediately intuitive

1398
01:09:32,738 --> 01:09:38,839
unfortunately so what this graph shows

1399
01:09:36,380 --> 01:09:40,940
you is on the the bottom axis is all

1400
01:09:38,839 --> 01:09:46,158
organizations we identified so an

1401
01:09:40,939 --> 01:09:49,428
organization is an entity having or with

1402
01:09:46,158 --> 01:09:54,229
with IP addresses associated hosting one

1403
01:09:49,429 --> 01:09:56,239
or more domains we know about on the on

1404
01:09:54,229 --> 01:09:58,459
the y-axis there's all the let's encrypt

1405
01:09:56,239 --> 01:10:00,769
domains so in November 2015

1406
01:09:58,460 --> 01:10:02,989
14k domains were conferred with at least

1407
01:10:00,770 --> 01:10:06,469
one certificate and on the top we have

1408
01:10:02,989 --> 01:10:11,509
all known domains using DNS DB so in

1409
01:10:06,469 --> 01:10:14,480
November 2015 the DNS DB had 127 unique

1410
01:10:11,510 --> 01:10:16,790
domains now if you sort organizations

1411
01:10:14,480 --> 01:10:19,339
from small to large but you get in this

1412
01:10:16,790 --> 01:10:22,159
graph is the relative contribution of 8

1413
01:10:19,340 --> 01:10:24,949
an organization to the overall deploy

1414
01:10:22,159 --> 01:10:28,400
the overall issuance of let's encrypt so

1415
01:10:24,949 --> 01:10:32,659
you can see here that the the bottom 25%

1416
01:10:28,400 --> 01:10:37,070
of small organization is almost 25% of

1417
01:10:32,659 --> 01:10:39,530
the let's encrypt issuance and it's it's

1418
01:10:37,070 --> 01:10:42,349
more or less nice so there's there's no

1419
01:10:39,530 --> 01:10:44,599
large discontinuities although for some

1420
01:10:42,349 --> 01:10:46,639
parts of the IP space we do not know

1421
01:10:44,599 --> 01:10:49,159
what organization this so that's all I

1422
01:10:46,639 --> 01:10:50,719
guess always what you get and it becomes

1423
01:10:49,159 --> 01:10:53,030
interesting when you go to September

1424
01:10:50,719 --> 01:10:54,889
2016 or other months and here you can

1425
01:10:53,030 --> 01:10:57,650
see these discontinuities

1426
01:10:54,889 --> 01:10:59,320
start showing up which means is that

1427
01:10:57,650 --> 01:11:02,420
there's a single organization

1428
01:10:59,320 --> 01:11:08,630
responsible for large parts of the

1429
01:11:02,420 --> 01:11:12,679
issued certificates in there you know as

1430
01:11:08,630 --> 01:11:15,590
a single entity it turns out this is

1431
01:11:12,679 --> 01:11:17,480
this is three web posters and when we

1432
01:11:15,590 --> 01:11:20,150
start looking at this in the beginning

1433
01:11:17,480 --> 01:11:23,119
you could nicely align these statistics

1434
01:11:20,150 --> 01:11:25,040
with published press statements so every

1435
01:11:23,119 --> 01:11:26,900
time you find the discontinuity you

1436
01:11:25,040 --> 01:11:29,239
start looking or watching press

1437
01:11:26,900 --> 01:11:30,259
statements and yes sure within a couple

1438
01:11:29,239 --> 01:11:32,330
of weeks there would be a press

1439
01:11:30,260 --> 01:11:33,740
statement like a we will announce this

1440
01:11:32,330 --> 01:11:36,740
for of we will

1441
01:11:33,740 --> 01:11:38,660
start giving all our customers HTTP for

1442
01:11:36,740 --> 01:11:44,030
free and we do this using let's

1443
01:11:38,660 --> 01:11:45,610
increment and by September 2016 3

1444
01:11:44,030 --> 01:11:50,030
hosting providers are responsible for

1445
01:11:45,610 --> 01:11:51,920
47% of all certified domains and well

1446
01:11:50,030 --> 01:11:54,200
this is the lower part more or less

1447
01:11:51,920 --> 01:11:57,530
tasting these hosting providers at that

1448
01:11:54,200 --> 01:11:59,559
point were wordpress.com OVH the French

1449
01:11:57,530 --> 01:12:03,559
hosting provider and and Shopify a

1450
01:11:59,560 --> 01:12:05,150
vendor of online shopping and since

1451
01:12:03,560 --> 01:12:06,680
there have been a couple of large

1452
01:12:05,150 --> 01:12:12,320
joiners but that was outside our

1453
01:12:06,680 --> 01:12:14,030
measurements period so what is the the

1454
01:12:12,320 --> 01:12:17,210
business of these organizations like

1455
01:12:14,030 --> 01:12:19,580
what are they doing and no real

1456
01:12:17,210 --> 01:12:22,430
surprises here so if you try to classify

1457
01:12:19,580 --> 01:12:25,460
organizations in different areas you can

1458
01:12:22,430 --> 01:12:27,580
see that the the the over the large part

1459
01:12:25,460 --> 01:12:31,460
is either unknown which is the white

1460
01:12:27,580 --> 01:12:35,090
stuff on the bottom or web hosting and

1461
01:12:31,460 --> 01:12:38,330
all the unknown bits are small

1462
01:12:35,090 --> 01:12:42,920
organizations because if we would find

1463
01:12:38,330 --> 01:12:45,860
an organization with an unknown Lord

1464
01:12:42,920 --> 01:12:48,320
like business we would do it by hand so

1465
01:12:45,860 --> 01:12:50,599
all these unknowns are very small ones

1466
01:12:48,320 --> 01:12:52,969
which would add up to a lot of manual

1467
01:12:50,600 --> 01:12:56,140
work but still you can see that it's

1468
01:12:52,970 --> 01:12:59,990
about 70% of hosting no surprises

1469
01:12:56,140 --> 01:13:02,660
however if you zoom in on hosting and

1470
01:12:59,990 --> 01:13:04,910
you try to distinguish shared versus non

1471
01:13:02,660 --> 01:13:07,190
shared hosting something interesting

1472
01:13:04,910 --> 01:13:10,160
happens which is actually new for for

1473
01:13:07,190 --> 01:13:12,440
this industry I think is that if you

1474
01:13:10,160 --> 01:13:14,930
define shared hosting as at least 10

1475
01:13:12,440 --> 01:13:20,049
domains per IP address this is ipv4

1476
01:13:14,930 --> 01:13:24,280
unfortunately just to mention it quickly

1477
01:13:20,050 --> 01:13:27,100
you can see that more than 90% of all

1478
01:13:24,280 --> 01:13:29,540
hosting which has let's encrypt domains

1479
01:13:27,100 --> 01:13:31,910
certified domains associated with is in

1480
01:13:29,540 --> 01:13:35,240
the shared hosting business and that's

1481
01:13:31,910 --> 01:13:37,670
the the cheap hosting which also means

1482
01:13:35,240 --> 01:13:39,710
that this is certificates most likely

1483
01:13:37,670 --> 01:13:43,040
for people who would not have had these

1484
01:13:39,710 --> 01:13:44,789
certificates if if the provider would

1485
01:13:43,040 --> 01:13:48,809
not have provided them

1486
01:13:44,789 --> 01:13:51,539
so this is where we kind of get to my

1487
01:13:48,809 --> 01:13:53,190
research question is does let's encrypt

1488
01:13:51,539 --> 01:13:55,889
contribute to getting certificates where

1489
01:13:53,190 --> 01:13:59,009
they weren't previously well yes they

1490
01:13:55,889 --> 01:14:02,750
are because this is the market where it

1491
01:13:59,010 --> 01:14:05,099
would previously not scale to to supply

1492
01:14:02,750 --> 01:14:09,389
well certificates and therefore

1493
01:14:05,099 --> 01:14:11,639
encryption to customers I'll get to an

1494
01:14:09,389 --> 01:14:13,949
open question here also for the audience

1495
01:14:11,639 --> 01:14:16,559
later because there's a related question

1496
01:14:13,949 --> 01:14:19,079
which I was not able to answer but I've

1497
01:14:16,559 --> 01:14:21,989
heard rumors which might allow us to

1498
01:14:19,079 --> 01:14:25,099
answer it and I'll talk to that in a

1499
01:14:21,989 --> 01:14:27,839
little bit we did also some other

1500
01:14:25,099 --> 01:14:29,579
statistics so if you look at renewal

1501
01:14:27,840 --> 01:14:31,980
let's encrypt certificates are only

1502
01:14:29,579 --> 01:14:35,699
valid for 30 days so once you get a

1503
01:14:31,980 --> 01:14:37,829
certificate you need to renew it and the

1504
01:14:35,699 --> 01:14:41,159
automation allows you to automate that

1505
01:14:37,829 --> 01:14:44,610
which makes up for the short lifetime

1506
01:14:41,159 --> 01:14:47,308
but it also allows us to really quantify

1507
01:14:44,610 --> 01:14:50,699
whether or not people see this as a one

1508
01:14:47,309 --> 01:14:52,650
trick like Pony like to try to just try

1509
01:14:50,699 --> 01:14:54,719
it once it's nice and then we turn it

1510
01:14:52,650 --> 01:14:59,820
off again because what this graph

1511
01:14:54,719 --> 01:15:03,000
quantifies it's it basically shows you

1512
01:14:59,820 --> 01:15:07,230
the amount of people as a fraction that

1513
01:15:03,000 --> 01:15:09,800
continue are we doing their domains or

1514
01:15:07,230 --> 01:15:11,909
certificates for domains so the first

1515
01:15:09,800 --> 01:15:14,760
and I see I made a mistake

1516
01:15:11,909 --> 01:15:18,750
so certificates are valid for 90 days

1517
01:15:14,760 --> 01:15:21,750
not 30 but after so 90 days everyone's

1518
01:15:18,750 --> 01:15:24,059
valid no one no one dies in the in the

1519
01:15:21,750 --> 01:15:26,969
in the in the negraph and then you can

1520
01:15:24,059 --> 01:15:29,880
see these renewals but the fact that

1521
01:15:26,969 --> 01:15:33,449
after almost two cycles

1522
01:15:29,880 --> 01:15:36,630
the graph flattens show you that this

1523
01:15:33,449 --> 01:15:40,860
automation is working because at that

1524
01:15:36,630 --> 01:15:43,469
point well you wouldn't expect something

1525
01:15:40,860 --> 01:15:46,049
like point seven of all these millions

1526
01:15:43,469 --> 01:15:49,650
of domains be renewed by hands so

1527
01:15:46,050 --> 01:15:50,909
clearly something is is working funnily

1528
01:15:49,650 --> 01:15:52,920
enough when I asked the let's encrypt

1529
01:15:50,909 --> 01:15:54,619
guys about this they said oh this is

1530
01:15:52,920 --> 01:15:57,340
terrible because we're still missing

1531
01:15:54,619 --> 01:16:00,370
like this is point three

1532
01:15:57,340 --> 01:16:02,470
a fraction I can also get that but I

1533
01:16:00,370 --> 01:16:05,920
think it's pretty nice the Green Line

1534
01:16:02,470 --> 01:16:08,740
shows you what the the statistic would

1535
01:16:05,920 --> 01:16:10,990
have been if you would allow one week of

1536
01:16:08,740 --> 01:16:12,969
like troubleshooting so suppose you get

1537
01:16:10,990 --> 01:16:16,240
you don't get automation right the first

1538
01:16:12,970 --> 01:16:18,280
try but you you find out because you go

1539
01:16:16,240 --> 01:16:20,769
to your website and it doesn't work you

1540
01:16:18,280 --> 01:16:22,960
fix it then you can see that the first

1541
01:16:20,770 --> 01:16:25,330
time that that really makes a little bit

1542
01:16:22,960 --> 01:16:28,780
of a difference and afterwards the lines

1543
01:16:25,330 --> 01:16:30,670
we remain similarly flat so in a sense

1544
01:16:28,780 --> 01:16:32,559
this shows you that people get the

1545
01:16:30,670 --> 01:16:35,170
automation right either the first time

1546
01:16:32,560 --> 01:16:38,920
or after the next time and it doesn't

1547
01:16:35,170 --> 01:16:40,950
really after the first try it seems to

1548
01:16:38,920 --> 01:16:40,950
work

1549
01:16:41,970 --> 01:16:48,760
let's see some bit of a summary so

1550
01:16:46,570 --> 01:16:52,719
certificate issuance in the first year

1551
01:16:48,760 --> 01:16:55,090
of let's encrypt widely used especially

1552
01:16:52,720 --> 01:16:57,730
in the low-cost market of shared hosting

1553
01:16:55,090 --> 01:16:59,740
and specifically this market would be

1554
01:16:57,730 --> 01:17:03,269
unlikely to use certificates and

1555
01:16:59,740 --> 01:17:07,059
therefore encryption without those

1556
01:17:03,270 --> 01:17:10,720
certificates and why is that well it's

1557
01:17:07,060 --> 01:17:22,270
because it allows hosters to issue and

1558
01:17:10,720 --> 01:17:27,490
deploy certificates in bulk remain

1559
01:17:22,270 --> 01:17:30,610
active so this is the the full

1560
01:17:27,490 --> 01:17:35,170
measurement period they we saw that that

1561
01:17:30,610 --> 01:17:37,570
0.7 of all certified domains kept on

1562
01:17:35,170 --> 01:17:39,220
renewing which implies that they keep

1563
01:17:37,570 --> 01:17:46,049
running the software well they can do it

1564
01:17:39,220 --> 01:17:46,050
by hand but it's not very likely and

1565
01:17:46,380 --> 01:17:52,720
that's that's after the first issuance

1566
01:17:48,580 --> 01:17:54,670
because that's what you get for free so

1567
01:17:52,720 --> 01:17:56,260
that's a summary we also have quite some

1568
01:17:54,670 --> 01:17:58,710
future work in the sense that this is

1569
01:17:56,260 --> 01:18:02,230
only the start and I hope others will

1570
01:17:58,710 --> 01:18:04,390
also independently measure the the

1571
01:18:02,230 --> 01:18:06,570
progress made and also maybe the the

1572
01:18:04,390 --> 01:18:09,520
things which are not going as well

1573
01:18:06,570 --> 01:18:11,190
there's there's a simple thing to extend

1574
01:18:09,520 --> 01:18:13,989
the measurement period

1575
01:18:11,190 --> 01:18:18,820
it's also interesting to to measure

1576
01:18:13,989 --> 01:18:22,030
actually use versions issuance for

1577
01:18:18,820 --> 01:18:24,369
example such as active scanning although

1578
01:18:22,030 --> 01:18:26,190
you especially for let's encrypt you you

1579
01:18:24,369 --> 01:18:28,808
run into trouble that you need as an eye

1580
01:18:26,190 --> 01:18:32,829
because all these shared domains well

1581
01:18:28,809 --> 01:18:36,130
reuse IP addresses and we've seen a lot

1582
01:18:32,829 --> 01:18:38,799
of abuse basically because it's now so

1583
01:18:36,130 --> 01:18:40,570
much simpler to request certificates and

1584
01:18:38,800 --> 01:18:47,289
it would be interesting to to understand

1585
01:18:40,570 --> 01:18:49,119
the the patterns there that's it I have

1586
01:18:47,289 --> 01:18:52,630
a question for the audience before I

1587
01:18:49,119 --> 01:18:55,539
open up for questions and that's I've

1588
01:18:52,630 --> 01:18:58,289
heard that so I talked to lots of great

1589
01:18:55,539 --> 01:19:03,690
people and they show a statistic that

1590
01:18:58,289 --> 01:19:07,478
98% of the domains they certify or

1591
01:19:03,690 --> 01:19:09,579
certificate state a issue are for

1592
01:19:07,479 --> 01:19:12,429
domains or fu DNS that are not

1593
01:19:09,579 --> 01:19:14,949
previously did not previously get

1594
01:19:12,429 --> 01:19:17,499
certified and that would directly answer

1595
01:19:14,949 --> 01:19:19,960
my research question but that answer is

1596
01:19:17,499 --> 01:19:24,130
based on the assumption that Google

1597
01:19:19,960 --> 01:19:28,499
actually puts crawls the web and put

1598
01:19:24,130 --> 01:19:31,869
certificates in CT and I've never seen

1599
01:19:28,499 --> 01:19:33,489
evidence for that claim so there is a

1600
01:19:31,869 --> 01:19:35,679
lot of certificates in City it's it's

1601
01:19:33,489 --> 01:19:38,650
huge and it will get you bigger and

1602
01:19:35,679 --> 01:19:41,019
bigger but you can only say something

1603
01:19:38,650 --> 01:19:43,268
about the past if you know that the

1604
01:19:41,019 --> 01:19:45,969
sampling is okay and that would imply

1605
01:19:43,269 --> 01:19:48,039
that some party needs to actually put in

1606
01:19:45,969 --> 01:19:50,139
certificates from all CAS not just the

1607
01:19:48,039 --> 01:19:53,460
ones that participate but does anyone

1608
01:19:50,139 --> 01:19:55,840
have more information about this I think

1609
01:19:53,460 --> 01:19:58,320
there might be some people working for

1610
01:19:55,840 --> 01:20:02,260
the sponsors of let's encrypt in a room

1611
01:19:58,320 --> 01:20:05,440
see mostly blank faces no that's too bad

1612
01:20:02,260 --> 01:20:06,699
well I keep trying in that case thank

1613
01:20:05,440 --> 01:20:11,969
you very much for your attention

1614
01:20:06,699 --> 01:20:11,969
and I'm I'm open for questions

1615
01:20:18,150 --> 01:20:33,160
any questions for Martin Rance Thomas um

1616
01:20:28,390 --> 01:20:34,720
I just wonder do you see that the shared

1617
01:20:33,160 --> 01:20:37,180
hosting providers are actually picking

1618
01:20:34,720 --> 01:20:40,330
up on this because when I last looked at

1619
01:20:37,180 --> 01:20:42,640
Germany there was nobody using it or

1620
01:20:40,330 --> 01:20:45,250
sort of offering it to their customers

1621
01:20:42,640 --> 01:20:47,320
and I thought it might be I mean might

1622
01:20:45,250 --> 01:20:48,790
be actually incentive for them to to

1623
01:20:47,320 --> 01:20:51,460
offer this subject as customers

1624
01:20:48,790 --> 01:20:56,350
especially now that sort of browsers or

1625
01:20:51,460 --> 01:20:58,090
much more yeah making it much more more

1626
01:20:56,350 --> 01:21:00,640
visible that that you are not not

1627
01:20:58,090 --> 01:21:02,890
choosing a secure website and such yeah

1628
01:21:00,640 --> 01:21:04,750
I haven't looked at Germany specifically

1629
01:21:02,890 --> 01:21:06,670
but I have looked or I've followed the

1630
01:21:04,750 --> 01:21:09,280
news also answered a measurement various

1631
01:21:06,670 --> 01:21:11,920
foreign elements and you see that web

1632
01:21:09,280 --> 01:21:14,019
posters are slowly adopting this because

1633
01:21:11,920 --> 01:21:17,200
it and also there I don't think there's

1634
01:21:14,020 --> 01:21:18,730
that much demand but it's nice to to

1635
01:21:17,200 --> 01:21:22,450
contrast yourself against your

1636
01:21:18,730 --> 01:21:27,459
competitors in this way similarly I

1637
01:21:22,450 --> 01:21:30,970
think in the larger software packages

1638
01:21:27,460 --> 01:21:33,010
for web posters or the C panels etc it

1639
01:21:30,970 --> 01:21:36,550
seems that this is being integrated now

1640
01:21:33,010 --> 01:21:39,160
so even for those but maybe smaller web

1641
01:21:36,550 --> 01:21:41,410
posters that are not directly interested

1642
01:21:39,160 --> 01:21:44,080
in offering the feature if it would cost

1643
01:21:41,410 --> 01:21:46,840
them engineering time I think over time

1644
01:21:44,080 --> 01:21:51,280
the chance increases that they just get

1645
01:21:46,840 --> 01:21:53,230
it with their software so yeah I think I

1646
01:21:51,280 --> 01:21:55,420
wouldn't know specific Germany but

1647
01:21:53,230 --> 01:21:58,089
Netherlands I see it there is some

1648
01:21:55,420 --> 01:22:00,340
heartache yeah so one needs you ask them

1649
01:21:58,090 --> 01:22:03,820
how what's your conclusion I mean how

1650
01:22:00,340 --> 01:22:08,140
could we make this sort of make this

1651
01:22:03,820 --> 01:22:10,420
multiplied in in order to I don't think

1652
01:22:08,140 --> 01:22:12,700
expected demand coming from the customer

1653
01:22:10,420 --> 01:22:14,770
but because as you said it at first

1654
01:22:12,700 --> 01:22:16,809
I mean it's sort of you're trying the

1655
01:22:14,770 --> 01:22:20,710
little bakery on the under corner of the

1656
01:22:16,810 --> 01:22:22,660
street which doesn't really need to know

1657
01:22:20,710 --> 01:22:24,730
or doesn't have to knowledge that they

1658
01:22:22,660 --> 01:22:26,440
might be can you use something like this

1659
01:22:24,730 --> 01:22:27,280
and then so therefore I don't think that

1660
01:22:26,440 --> 01:22:30,549
there's a

1661
01:22:27,280 --> 01:22:33,340
who the ma demande market here I think

1662
01:22:30,550 --> 01:22:35,260
it's much more reasonable to assume that

1663
01:22:33,340 --> 01:22:37,929
there are some responsibilities at the

1664
01:22:35,260 --> 01:22:40,059
listing site saying I'm just offering it

1665
01:22:37,929 --> 01:22:43,270
even if I have been asked especially for

1666
01:22:40,059 --> 01:22:47,289
this I have no hard data to support this

1667
01:22:43,270 --> 01:22:49,659
but my looking into for example these

1668
01:22:47,289 --> 01:22:52,809
big newspapers using let's encrypt

1669
01:22:49,659 --> 01:22:54,789
within their domain kind of gave me the

1670
01:22:52,809 --> 01:22:57,940
impression that there is actually an

1671
01:22:54,789 --> 01:23:00,219
interest in what may be the engineering

1672
01:22:57,940 --> 01:23:02,558
community to just try this and then if

1673
01:23:00,219 --> 01:23:05,409
it works or perhaps it gets deployed

1674
01:23:02,559 --> 01:23:11,380
wider I think that's one part of the

1675
01:23:05,409 --> 01:23:13,119
thing I think the clues being integrated

1676
01:23:11,380 --> 01:23:15,429
in browsers will have a larger effect

1677
01:23:13,119 --> 01:23:16,900
but that's just wild conjecture on my

1678
01:23:15,429 --> 01:23:19,900
part and I don't have the data to

1679
01:23:16,900 --> 01:23:22,329
support it so they can take it with a

1680
01:23:19,900 --> 01:23:24,369
grain of salt do you know if it's

1681
01:23:22,329 --> 01:23:27,670
surprise or the convenience that it's a

1682
01:23:24,369 --> 01:23:29,829
driver sorry do you know if the price

1683
01:23:27,670 --> 01:23:32,670
level or at the convenience that is the

1684
01:23:29,829 --> 01:23:35,170
main driver for this democratization

1685
01:23:32,670 --> 01:23:37,929
well based on the parties that have

1686
01:23:35,170 --> 01:23:39,699
deployed I would assume the convenience

1687
01:23:37,929 --> 01:23:43,059
like the automation because I don't have

1688
01:23:39,699 --> 01:23:45,219
any other reason why these these big

1689
01:23:43,059 --> 01:23:47,380
hosters suddenly start to do it now

1690
01:23:45,219 --> 01:23:50,380
because there there used to be three

1691
01:23:47,380 --> 01:23:56,349
certificates before maybe from the CAS

1692
01:23:50,380 --> 01:23:58,510
that are now either bankrupt or not so

1693
01:23:56,349 --> 01:24:02,079
trusted anymore but I mean the free part

1694
01:23:58,510 --> 01:24:04,360
was not new on its own it was just well

1695
01:24:02,079 --> 01:24:08,590
very annoying to make a scale so I would

1696
01:24:04,360 --> 01:24:11,549
say an automation I can add just a tiny

1697
01:24:08,590 --> 01:24:14,800
bit of information that Akamai it

1698
01:24:11,550 --> 01:24:17,559
accepts only let's encrypt certs for

1699
01:24:14,800 --> 01:24:21,039
domain validation so that may encourage

1700
01:24:17,559 --> 01:24:23,139
some set of users ya know I'm a

1701
01:24:21,039 --> 01:24:24,489
co-author I just wanted to also answer

1702
01:24:23,139 --> 01:24:27,130
back to the previous question I think

1703
01:24:24,489 --> 01:24:28,900
this is a question of incentives so what

1704
01:24:27,130 --> 01:24:30,400
let's encrypt set out to do is to remove

1705
01:24:28,900 --> 01:24:32,170
the technical barriers to adoption of

1706
01:24:30,400 --> 01:24:33,789
that so if that's would catch other

1707
01:24:32,170 --> 01:24:35,139
things a thing of the market is not I

1708
01:24:33,789 --> 01:24:37,179
don't think it's this couple that's

1709
01:24:35,139 --> 01:24:38,590
equipped I cannot speak for them but if

1710
01:24:37,179 --> 01:24:40,630
people want to use this right there and

1711
01:24:38,590 --> 01:24:41,090
they think it like a local governments

1712
01:24:40,630 --> 01:24:43,280
or

1713
01:24:41,090 --> 01:24:45,260
the market demands that you actually

1714
01:24:43,280 --> 01:24:46,550
have free encryption it's gonna happen

1715
01:24:45,260 --> 01:24:48,380
but again it's a classic problem

1716
01:24:46,550 --> 01:24:53,590
incentives it's not technical actually

1717
01:24:48,380 --> 01:24:55,760
anymore I thought the question that

1718
01:24:53,590 --> 01:24:57,619
Randi kind of raised earlier was an

1719
01:24:55,760 --> 01:25:00,980
interesting one which is you know how

1720
01:24:57,619 --> 01:25:03,170
well if if people are people just doing

1721
01:25:00,980 --> 01:25:04,790
this trying it out and then discarding

1722
01:25:03,170 --> 01:25:06,650
it or are they actually continuing to

1723
01:25:04,790 --> 01:25:09,260
use it is this going to be is there some

1724
01:25:06,650 --> 01:25:13,879
persistent benefit or is it misurkin

1725
01:25:09,260 --> 01:25:15,199
would be some attrition I mean it has

1726
01:25:13,880 --> 01:25:19,849
been long enough to know for sure yeah

1727
01:25:15,199 --> 01:25:24,138
this is just issuance so we did a

1728
01:25:19,849 --> 01:25:25,790
limited sample of like scans of what our

1729
01:25:24,139 --> 01:25:30,500
people are actually using it and in our

1730
01:25:25,790 --> 01:25:33,320
limited sample of 25 K domains we saw

1731
01:25:30,500 --> 01:25:35,570
that 3% actually configured it and we're

1732
01:25:33,320 --> 01:25:36,889
using it which is only a lower bound

1733
01:25:35,570 --> 01:25:39,860
because you could also use it on

1734
01:25:36,889 --> 01:25:41,989
protocols we didn't scan but yeah it's

1735
01:25:39,860 --> 01:25:44,179
it's it's pretty early yeah I think it'd

1736
01:25:41,989 --> 01:25:45,830
be interesting if you were able to do

1737
01:25:44,179 --> 01:25:49,099
some longitudinal measurements where you

1738
01:25:45,830 --> 01:25:51,110
saw the domains that had been using it

1739
01:25:49,099 --> 01:25:52,400
stopped using it as opposed to just

1740
01:25:51,110 --> 01:25:53,960
looking at aggregate numbers really

1741
01:25:52,400 --> 01:25:56,480
looking at for you know particular

1742
01:25:53,960 --> 01:25:57,380
domains if they because you know there's

1743
01:25:56,480 --> 01:26:00,290
all sorts of things that can affect

1744
01:25:57,380 --> 01:26:02,989
whether there's a domain it still has

1745
01:26:00,290 --> 01:26:05,080
traffic or not we hope that follow-up

1746
01:26:02,989 --> 01:26:07,879
work could be for example to see if

1747
01:26:05,080 --> 01:26:09,800
people switch to other cas after using

1748
01:26:07,880 --> 01:26:11,179
nets and cribs because i would be very

1749
01:26:09,800 --> 01:26:14,389
interested to understand their reasons

1750
01:26:11,179 --> 01:26:17,449
for it for that and if you find them you

1751
01:26:14,389 --> 01:26:21,980
may ask yeah currently it shows up

1752
01:26:17,449 --> 01:26:25,129
differently on your browser bar that's

1753
01:26:21,980 --> 01:26:27,468
different markets I mean this is only so

1754
01:26:25,130 --> 01:26:29,210
for for the green lock icon and so that

1755
01:26:27,469 --> 01:26:29,780
they're not a competitor at all yeah

1756
01:26:29,210 --> 01:26:31,670
right

1757
01:26:29,780 --> 01:26:34,519
now I just want to add I also work for a

1758
01:26:31,670 --> 01:26:35,960
Tod operator so it's about the domain

1759
01:26:34,520 --> 01:26:38,710
lifecycle there's also another thing of

1760
01:26:35,960 --> 01:26:40,730
the domain life domains expire they

1761
01:26:38,710 --> 01:26:41,960
registrants they move the domain shorter

1762
01:26:40,730 --> 01:26:44,030
registrar's and might not have lots

1763
01:26:41,960 --> 01:26:45,290
encrypt so it's not such a easy I mean

1764
01:26:44,030 --> 01:26:50,969
it's possible chancer it's a little

1765
01:26:45,290 --> 01:27:00,300
tricky question as well yes boy okay

1766
01:26:50,969 --> 01:27:01,860
thanks very much button Thanks okay so

1767
01:27:00,300 --> 01:27:04,739
now it's time for more caffeine and

1768
01:27:01,860 --> 01:27:07,130
water and then we reconvene at 4:00 for

1769
01:27:04,739 --> 01:27:07,129
a panel

