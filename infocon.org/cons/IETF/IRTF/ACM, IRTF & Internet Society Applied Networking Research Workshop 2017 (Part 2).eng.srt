1
00:00:31,910 --> 00:00:38,400
so I'm Spencer Dawkins I think the Argos

2
00:00:36,300 --> 00:00:44,069
kind of nudged me to starting the next

3
00:00:38,400 --> 00:00:45,869
session which on transport just to say

4
00:00:44,070 --> 00:00:48,150
this out loud I'm one of the eight

5
00:00:45,869 --> 00:00:49,739
transport area directors of the IETF and

6
00:00:48,150 --> 00:00:53,070
I'm thrilled and smart people show up to

7
00:00:49,739 --> 00:00:54,629
solve problems that I have so thank you

8
00:00:53,070 --> 00:00:58,189
thank you all in advance for the work

9
00:00:54,629 --> 00:01:01,650
that you have done and continue to do so

10
00:00:58,189 --> 00:01:07,260
first presentation we have up is one set

11
00:01:01,650 --> 00:01:12,929
on a paper about a testing mechanism

12
00:01:07,260 --> 00:01:15,920
called copycat presenters Korean and he

13
00:01:12,929 --> 00:01:19,740
is a PhD student at the University

14
00:01:15,920 --> 00:01:21,630
Research Unit in networking at the

15
00:01:19,740 --> 00:01:23,579
University of leash working on middle

16
00:01:21,630 --> 00:01:25,589
box measurements middle box impact on

17
00:01:23,579 --> 00:01:29,339
transport protocols he's collaborating

18
00:01:25,590 --> 00:01:31,590
on the EU H 2020 measurement and

19
00:01:29,340 --> 00:01:34,109
architecture for middle box to Internet

20
00:01:31,590 --> 00:01:37,909
mommy prior to that he was an intern at

21
00:01:34,109 --> 00:01:42,689
Symantec research labs working on

22
00:01:37,909 --> 00:01:46,469
malware analysis so to nobody thanks for

23
00:01:42,689 --> 00:01:48,389
the introduction so I will present you

24
00:01:46,469 --> 00:01:50,609
this tool called copycat that is at

25
00:01:48,389 --> 00:01:54,899
testing for differential treatment of

26
00:01:50,609 --> 00:01:56,548
neutrons for protocols in the Y but this

27
00:01:54,899 --> 00:02:00,090
is joint work between University of

28
00:01:56,549 --> 00:02:03,539
liège and ETH Zurich so let's say you

29
00:02:00,090 --> 00:02:05,819
want to deploy and test a new transport

30
00:02:03,539 --> 00:02:08,670
protocol of yours or a new extension to

31
00:02:05,819 --> 00:02:09,509
a transport protocol what can you do

32
00:02:08,669 --> 00:02:11,700
what choice do you have

33
00:02:09,508 --> 00:02:14,730
you can either implement in we did

34
00:02:11,700 --> 00:02:16,799
within a network simulator and - and

35
00:02:14,730 --> 00:02:18,000
then run it whenever you want you can

36
00:02:16,800 --> 00:02:21,510
run it in a control

37
00:02:18,000 --> 00:02:24,120
if you have access to any and you can

38
00:02:21,510 --> 00:02:26,489
also run it in the wall between a few

39
00:02:24,120 --> 00:02:28,590
nodes that you have access to with the

40
00:02:26,490 --> 00:02:32,190
requirement of having to patch them so

41
00:02:28,590 --> 00:02:33,990
that they speak your protocol what this

42
00:02:32,190 --> 00:02:36,630
tool introduces here is stateless

43
00:02:33,990 --> 00:02:40,320
testing so basically without having to

44
00:02:36,630 --> 00:02:42,540
implement your protocol on any node you

45
00:02:40,320 --> 00:02:44,810
are able to observe how the pass react

46
00:02:42,540 --> 00:02:48,690
to the wire image of your protocol and

47
00:02:44,810 --> 00:02:53,580
infer any differential treatment in term

48
00:02:48,690 --> 00:02:56,609
of connectivity or quality of service so

49
00:02:53,580 --> 00:02:58,950
the idea is to run pairs of flows one

50
00:02:56,610 --> 00:03:01,560
reference flow and one experimental flow

51
00:02:58,950 --> 00:03:03,989
the reference flow will serve as the

52
00:03:01,560 --> 00:03:07,470
ground truth for the comparison and is a

53
00:03:03,990 --> 00:03:10,980
vanilla TCP flow that just transmits

54
00:03:07,470 --> 00:03:14,010
some data then the experimental four can

55
00:03:10,980 --> 00:03:18,000
either be UDP on on UDP based and is

56
00:03:14,010 --> 00:03:19,950
composed of two pairs of headers inner

57
00:03:18,000 --> 00:03:22,680
headers or tunnel headers and outer

58
00:03:19,950 --> 00:03:25,799
headers so the inner headers are

59
00:03:22,680 --> 00:03:29,370
analyticity as well and will be used to

60
00:03:25,800 --> 00:03:31,800
TCP control the flows then the outer

61
00:03:29,370 --> 00:03:36,120
headers can either be so in the case of

62
00:03:31,800 --> 00:03:38,190
UDP there's first a UDP header by the

63
00:03:36,120 --> 00:03:41,570
dedicated socket and then there's an

64
00:03:38,190 --> 00:03:45,480
optional extra header that can either be

65
00:03:41,570 --> 00:03:50,609
quick or plus then in the case of the

66
00:03:45,480 --> 00:03:52,920
non UDP experimental flow you are you

67
00:03:50,610 --> 00:03:55,049
have the possibility to use whatever

68
00:03:52,920 --> 00:03:58,109
transport header that you want by

69
00:03:55,049 --> 00:04:00,750
defining it in raw bytes so for example

70
00:03:58,110 --> 00:04:07,080
you can use it to test GCC PSC TP or

71
00:04:00,750 --> 00:04:10,730
anything then the architecture of the

72
00:04:07,080 --> 00:04:15,420
tool is very basic client-server or

73
00:04:10,730 --> 00:04:16,829
receiver sender architecture so first we

74
00:04:15,420 --> 00:04:18,738
created two new virtual network

75
00:04:16,829 --> 00:04:22,469
interface which is

76
00:04:18,738 --> 00:04:24,900
simulation of network layer device that

77
00:04:22,470 --> 00:04:26,880
operates at layer 3 then if we create

78
00:04:24,900 --> 00:04:29,640
two TCP sockets binds one to the

79
00:04:26,880 --> 00:04:31,350
internet facing interface and want to

80
00:04:29,640 --> 00:04:37,190
join interface

81
00:04:31,350 --> 00:04:40,440
socket our basic data writer readers

82
00:04:37,190 --> 00:04:43,170
then it will create a new DP or a socket

83
00:04:40,440 --> 00:04:45,540
depending on your choice of experimental

84
00:04:43,170 --> 00:04:48,990
flow bind it to the internet facing

85
00:04:45,540 --> 00:04:53,370
interface then it will simply act as a

86
00:04:48,990 --> 00:04:56,310
terminal endpoint by the capsule ating

87
00:04:53,370 --> 00:04:59,100
any packet received from those sockets

88
00:04:56,310 --> 00:05:02,340
and writing it on the tune interface and

89
00:04:59,100 --> 00:05:05,160
reciprocally encapsulating anything read

90
00:05:02,340 --> 00:05:08,520
from the chena interface and forwarding

91
00:05:05,160 --> 00:05:11,670
it towards the Internet in terms of

92
00:05:08,520 --> 00:05:14,849
comes with a few features you can set up

93
00:05:11,670 --> 00:05:17,040
the flow scheduling to be so that the

94
00:05:14,850 --> 00:05:20,160
two flows are wrong parallely or

95
00:05:17,040 --> 00:05:24,230
sequentially you can choose a network

96
00:05:20,160 --> 00:05:27,870
layer v4 v6 or you can even do the

97
00:05:24,230 --> 00:05:29,730
network layer butter so in this case it

98
00:05:27,870 --> 00:05:32,760
will run two pairs of clothes instead of

99
00:05:29,730 --> 00:05:36,810
one in the IDS to infer differential

100
00:05:32,760 --> 00:05:39,599
treatment based on the network layer so

101
00:05:36,810 --> 00:05:42,630
it will run to reference flow one zero

102
00:05:39,600 --> 00:05:47,030
one v6 and then two experimental flow

103
00:05:42,630 --> 00:05:51,890
one v4 and v6 and it works on fuses so

104
00:05:47,030 --> 00:05:54,210
we tested this tool for the UDP

105
00:05:51,890 --> 00:05:58,320
encapsulation for transport evolution

106
00:05:54,210 --> 00:06:01,109
use case so basically just run the

107
00:05:58,320 --> 00:06:04,170
experimental flow to be UDP with no

108
00:06:01,110 --> 00:06:08,430
extra header we deployed it on planet

109
00:06:04,170 --> 00:06:10,980
louse and digital ocean which is cloud

110
00:06:08,430 --> 00:06:14,880
hosting solution we roll we run it on a

111
00:06:10,980 --> 00:06:17,850
few ports we run flows of different

112
00:06:14,880 --> 00:06:21,330
sizes calibrated from the TCP initial

113
00:06:17,850 --> 00:06:26,010
window so that for the smallest flow all

114
00:06:21,330 --> 00:06:30,690
day the packet was sent out once at once

115
00:06:26,010 --> 00:06:33,000
and then we just collected the flow and

116
00:06:30,690 --> 00:06:36,210
analyzed them to infer any different

117
00:06:33,000 --> 00:06:40,530
cell treatment so first in terms of

118
00:06:36,210 --> 00:06:45,000
blocking so here in access you have the

119
00:06:40,530 --> 00:06:48,659
clients per continent per country

120
00:06:45,000 --> 00:06:53,730
and why is the server's the color legend

121
00:06:48,660 --> 00:06:58,190
is the more read the more you GP is more

122
00:06:53,730 --> 00:07:03,900
impaired than TCP the more blue the more

123
00:06:58,190 --> 00:07:07,650
the opposite so you have those two red

124
00:07:03,900 --> 00:07:10,650
lines other brands which are in the case

125
00:07:07,650 --> 00:07:14,909
of one node rocking all UDP traffic in

126
00:07:10,650 --> 00:07:16,289
both direction then I don't know if you

127
00:07:14,910 --> 00:07:20,310
can see with there are some black dots

128
00:07:16,290 --> 00:07:22,919
here which are cases of TCP blocking as

129
00:07:20,310 --> 00:07:28,880
well so this is probably an overloaded

130
00:07:22,919 --> 00:07:31,409
node still most TCP connectivity is good

131
00:07:28,880 --> 00:07:34,560
then there are so lot of cases with no

132
00:07:31,410 --> 00:07:37,890
connectivity bias so the gray squares

133
00:07:34,560 --> 00:07:40,919
and the third case are the transient

134
00:07:37,890 --> 00:07:44,250
connectivity problems so the light

135
00:07:40,919 --> 00:07:46,140
shades of blue and red but what is

136
00:07:44,250 --> 00:07:50,450
interesting here is that there are

137
00:07:46,140 --> 00:07:55,849
clearly line shed so this means that

138
00:07:50,450 --> 00:07:55,849
those problems are access network linked

139
00:07:57,110 --> 00:08:03,000
then the second thing that we looked is

140
00:07:59,490 --> 00:08:06,560
the true put so for this we introduced

141
00:08:03,000 --> 00:08:08,580
this throughput bias metric which is the

142
00:08:06,560 --> 00:08:12,180
relative difference between the UDP

143
00:08:08,580 --> 00:08:14,159
throughput and the TCP throughput so

144
00:08:12,180 --> 00:08:18,330
here we plotted the distribution that we

145
00:08:14,160 --> 00:08:21,810
first separated between low throughput

146
00:08:18,330 --> 00:08:25,430
high throughput so we can see for the

147
00:08:21,810 --> 00:08:29,910
plain lines that low throughputs

148
00:08:25,430 --> 00:08:33,510
I have Shooto no true put bias and when

149
00:08:29,910 --> 00:08:36,599
they have it is balanced between better

150
00:08:33,510 --> 00:08:40,860
UDP and better TCP in the case of high

151
00:08:36,599 --> 00:08:43,760
throughput on digital ocean there is

152
00:08:40,860 --> 00:08:46,500
more bias but it is balanced as well

153
00:08:43,760 --> 00:08:50,460
then in the case of planetlab there is

154
00:08:46,500 --> 00:08:54,170
some sign of imbalance month on the tcp

155
00:08:50,460 --> 00:08:58,320
is better side so we looked at the

156
00:08:54,170 --> 00:08:59,000
location of those paths to investigate

157
00:08:58,320 --> 00:09:01,850
it more

158
00:08:59,000 --> 00:09:04,940
that so here is a similar problem the

159
00:09:01,850 --> 00:09:09,020
connectivity one the legend is the same

160
00:09:04,940 --> 00:09:11,480
red means CCP's better a blue means you

161
00:09:09,020 --> 00:09:14,660
deep is better so we can clearly see

162
00:09:11,480 --> 00:09:23,270
that it is also exceeded access network

163
00:09:14,660 --> 00:09:27,530
based impairments then we looked at the

164
00:09:23,270 --> 00:09:28,910
initial latency so we used the RTT bias

165
00:09:27,530 --> 00:09:32,870
metric which is similar to the

166
00:09:28,910 --> 00:09:35,240
throughput bias once again we splitted

167
00:09:32,870 --> 00:09:39,500
the distribution at 50 milliseconds so

168
00:09:35,240 --> 00:09:44,960
we can see that for low latency there is

169
00:09:39,500 --> 00:09:48,800
once again Shooto no biases for high

170
00:09:44,960 --> 00:09:52,010
latency on digital ocean bias are

171
00:09:48,800 --> 00:09:55,819
balanced and for planetlab

172
00:09:52,010 --> 00:10:00,430
we see the same sign of imbalance ball

173
00:09:55,820 --> 00:10:04,850
on the tcp is better side and this

174
00:10:00,430 --> 00:10:11,390
explained is partially imbalance man in

175
00:10:04,850 --> 00:10:13,010
throughput in the throughput bias we

176
00:10:11,390 --> 00:10:15,290
also looked at the loss but here there

177
00:10:13,010 --> 00:10:18,430
is not much to see because there is no

178
00:10:15,290 --> 00:10:18,430
substantial differences

179
00:10:21,840 --> 00:10:28,470
so in summary so this video here is the

180
00:10:26,170 --> 00:10:32,680
summary of all the biases and

181
00:10:28,470 --> 00:10:34,600
connectivity black holes so we

182
00:10:32,680 --> 00:10:39,339
investigated differential treatment

183
00:10:34,600 --> 00:10:43,600
between TCP and UDP in terms of true pod

184
00:10:39,340 --> 00:10:46,780
latency and connectivity we found that

185
00:10:43,600 --> 00:10:49,900
2.6 percent of our probe world UDP

186
00:10:46,780 --> 00:10:54,610
blocked and that most of those blocking

187
00:10:49,900 --> 00:10:58,319
happened to be access network page so in

188
00:10:54,610 --> 00:11:00,850
those cases if we were to use UDP as a

189
00:10:58,320 --> 00:11:04,780
substrate for transport protocol

190
00:11:00,850 --> 00:11:08,580
it will require a fallback mechanism or

191
00:11:04,780 --> 00:11:12,970
some way to choose not to use UDP and

192
00:11:08,580 --> 00:11:15,750
then we saw we observe that the latency

193
00:11:12,970 --> 00:11:21,520
and throughput biases are very small and

194
00:11:15,750 --> 00:11:23,880
access network based this is the medium

195
00:11:21,520 --> 00:11:23,880
current

196
00:11:26,800 --> 00:11:34,899
so in conclusion we observe that UDP

197
00:11:31,209 --> 00:11:37,209
seemed to be a viable solution for

198
00:11:34,899 --> 00:11:41,079
transport evolution only in the case

199
00:11:37,209 --> 00:11:42,878
where an alternative exists and that

200
00:11:41,079 --> 00:11:45,189
most observed

201
00:11:42,879 --> 00:11:47,379
UDP impairment were accessed network

202
00:11:45,189 --> 00:11:54,118
linked and that different kind of

203
00:11:47,379 --> 00:11:56,499
impairment were very rare so if you want

204
00:11:54,119 --> 00:11:59,980
more about this you can check out the

205
00:11:56,499 --> 00:12:02,319
code of the tool on github or the she

206
00:11:59,980 --> 00:12:04,629
want to know more about the UDP use case

207
00:12:02,319 --> 00:12:14,639
there's the technical report that is

208
00:12:04,629 --> 00:12:17,110
available so you're ready for questions

209
00:12:14,639 --> 00:12:20,619
excellent please I will invite people to

210
00:12:17,110 --> 00:12:24,309
ask questions I had a couple but I will

211
00:12:20,619 --> 00:12:25,209
let people ask questions first Bob but

212
00:12:24,309 --> 00:12:28,868
wait a minute

213
00:12:25,209 --> 00:12:30,758
so clarification question so what is the

214
00:12:28,869 --> 00:12:38,769
throughput and latency measurements done

215
00:12:30,759 --> 00:12:41,860
towards because we have to run we have

216
00:12:38,769 --> 00:12:43,089
to run the tool on on the nose so which

217
00:12:41,860 --> 00:12:44,709
which would mean full mesh between

218
00:12:43,089 --> 00:12:54,579
planetlab nodes and between digital

219
00:12:44,709 --> 00:12:59,439
downloads so planetlab nodes are largely

220
00:12:54,579 --> 00:13:01,059
in research networks and the dish lotion

221
00:12:59,439 --> 00:13:07,779
modes are largely in data set networks

222
00:13:01,059 --> 00:13:09,519
and some I'm I'm just wondering is it

223
00:13:07,779 --> 00:13:12,939
possible that there is more UDP blogging

224
00:13:09,519 --> 00:13:16,600
and access networks which is not seen in

225
00:13:12,939 --> 00:13:18,219
this new jersey probably in different

226
00:13:16,600 --> 00:13:21,249
kind of networks you can have different

227
00:13:18,220 --> 00:13:22,749
behaviors so we have access to some Sam

228
00:13:21,249 --> 00:13:26,919
knows process which allows T deployed at

229
00:13:22,749 --> 00:13:29,319
home and perhaps perhaps we can talk

230
00:13:26,919 --> 00:13:31,449
about this is running this tool from

231
00:13:29,319 --> 00:13:34,569
these Sam those folks try to see yeah it

232
00:13:31,449 --> 00:13:38,069
will see more connectivity buyers from

233
00:13:34,569 --> 00:13:38,069
exercise works yeah

234
00:13:40,750 --> 00:13:45,200
hello exclusive follow up on this

235
00:13:43,280 --> 00:13:50,750
question how do you account for the bias

236
00:13:45,200 --> 00:13:52,790
of the so are they distributed around

237
00:13:50,750 --> 00:13:56,000
the world the 93 notes you selected are

238
00:13:52,790 --> 00:13:58,370
they mostly domestic networks or in

239
00:13:56,000 --> 00:14:01,760
other kinds of networks you are asking

240
00:13:58,370 --> 00:14:03,290
how we selected those nodes yes so we

241
00:14:01,760 --> 00:14:06,770
took all available nodes and planetlab

242
00:14:03,290 --> 00:14:15,170
and selected one per sub Network okay

243
00:14:06,770 --> 00:14:18,380
not more than that so hi Corinne I'm

244
00:14:15,170 --> 00:14:20,120
also a co-author on this paper so

245
00:14:18,380 --> 00:14:22,280
there's another there's a few

246
00:14:20,120 --> 00:14:25,310
interesting data points that we have on

247
00:14:22,280 --> 00:14:29,110
the the immunity blocking right so

248
00:14:25,310 --> 00:14:32,239
there's this study found two point

249
00:14:29,110 --> 00:14:33,680
something percent which is basically you

250
00:14:32,240 --> 00:14:37,430
know two point six which is that one

251
00:14:33,680 --> 00:14:38,870
line right so that's a small enough

252
00:14:37,430 --> 00:14:42,260
sample size that you can't really say

253
00:14:38,870 --> 00:14:43,610
much about it there was a ripe Atlas

254
00:14:42,260 --> 00:14:46,790
study that we did which was actually

255
00:14:43,610 --> 00:14:49,190
part of the bigger paper so the archive

256
00:14:46,790 --> 00:14:52,790
paper that you pointed to where we found

257
00:14:49,190 --> 00:14:55,550
about 3.5% and I think we've presented

258
00:14:52,790 --> 00:14:57,589
that at map RG a couple of a parties ago

259
00:14:55,550 --> 00:14:59,750
and then the number that's been floating

260
00:14:57,590 --> 00:15:01,940
around so that includes ripe Atlas

261
00:14:59,750 --> 00:15:03,890
probes which do include some home access

262
00:15:01,940 --> 00:15:05,810
networks but they tend to be biased

263
00:15:03,890 --> 00:15:09,490
toward people who know people who know

264
00:15:05,810 --> 00:15:11,359
people who are network geeks right so

265
00:15:09,490 --> 00:15:13,670
actually that'd be a really interesting

266
00:15:11,360 --> 00:15:15,890
talk to do at a future map or to your

267
00:15:13,670 --> 00:15:20,479
mat in ripe is sort of if the the social

268
00:15:15,890 --> 00:15:22,760
network of ripe Atlas hosts just and I'm

269
00:15:20,480 --> 00:15:24,050
actually halfway serious about that just

270
00:15:22,760 --> 00:15:25,610
to have it just to be able to answer the

271
00:15:24,050 --> 00:15:27,109
bias question that always comes up every

272
00:15:25,610 --> 00:15:32,870
time you say I'm using right that was

273
00:15:27,110 --> 00:15:34,280
for this what none of these and then

274
00:15:32,870 --> 00:15:36,650
there was that the quick numbers so the

275
00:15:34,280 --> 00:15:39,560
quick the quick blocking numbers was

276
00:15:36,650 --> 00:15:43,550
about 5% right not was that was not that

277
00:15:39,560 --> 00:15:45,469
was taking the thing that that we're

278
00:15:43,550 --> 00:15:46,849
measuring here and conflating it also

279
00:15:45,470 --> 00:15:47,840
with with the blockage right so it was

280
00:15:46,850 --> 00:15:50,390
in 5% of cases

281
00:15:47,840 --> 00:15:51,889
TCP was faster right so it's places

282
00:15:50,390 --> 00:15:54,049
where you have not just deep

283
00:15:51,889 --> 00:15:55,609
red lines here but also kind of reddish

284
00:15:54,049 --> 00:15:57,889
lines in the connectivity bias or in the

285
00:15:55,609 --> 00:15:59,869
in the RTT bias um

286
00:15:57,889 --> 00:16:01,639
what none of these studies look at her

287
00:15:59,869 --> 00:16:04,939
enterprise networks right there's not a

288
00:16:01,639 --> 00:16:08,540
whole lot of Chrome to YouTube on

289
00:16:04,939 --> 00:16:10,339
enterprise networks I mean and there's I

290
00:16:08,540 --> 00:16:14,349
haven't really seen any attempts to

291
00:16:10,339 --> 00:16:16,639
quantify how much we're missing there um

292
00:16:14,350 --> 00:16:17,809
the Sam knows stuff is not going to give

293
00:16:16,639 --> 00:16:22,279
you a lot of enterprise network

294
00:16:17,809 --> 00:16:23,839
information I'm guessing are there any

295
00:16:22,279 --> 00:16:30,399
people who operate enterprise networks

296
00:16:23,839 --> 00:16:32,569
in this room okay great so having it

297
00:16:30,399 --> 00:16:34,279
would be really interesting to find a

298
00:16:32,569 --> 00:16:36,679
way to have visibility into those

299
00:16:34,279 --> 00:16:38,480
networks that would not compromise sort

300
00:16:36,679 --> 00:16:40,549
of their business requirements and

301
00:16:38,480 --> 00:16:44,779
that's a but I think is a really hard

302
00:16:40,549 --> 00:16:47,899
problem for this community to well solve

303
00:16:44,779 --> 00:16:51,109
but I mean think about first so you had

304
00:16:47,899 --> 00:16:53,480
the to be just basically Brian has the

305
00:16:51,109 --> 00:16:55,459
opportunity to the unique opportunity to

306
00:16:53,480 --> 00:16:57,319
throw a problem over the wall and then

307
00:16:55,459 --> 00:16:59,388
run around on the IETF side and catch it

308
00:16:57,319 --> 00:17:02,979
or on the IAB side and catch it good

309
00:16:59,389 --> 00:17:05,839
good job guy yeah it didn't work but I

310
00:17:02,980 --> 00:17:07,250
speaking for Mike Sweeney as a transport

311
00:17:05,839 --> 00:17:09,519
area director I think that's one of the

312
00:17:07,250 --> 00:17:12,970
spookiest things to me about all of this

313
00:17:09,519 --> 00:17:15,138
and I'm really interested not

314
00:17:12,970 --> 00:17:17,289
necessarily for people in this room but

315
00:17:15,138 --> 00:17:23,059
I'm really interested in ideas on how to

316
00:17:17,289 --> 00:17:26,019
get visibility in that Randy Bush I urge

317
00:17:23,059 --> 00:17:30,080
a our customers are our enterprise

318
00:17:26,019 --> 00:17:33,679
entity does consumer and you'd be

319
00:17:30,080 --> 00:17:36,189
surprised how similar they are but I

320
00:17:33,679 --> 00:17:40,549
just wanted to throw in one the bias

321
00:17:36,190 --> 00:17:43,130
shown by rot views and RIS and Atlas

322
00:17:40,549 --> 00:17:49,220
probes is officially known as the clue

323
00:17:43,130 --> 00:17:56,149
core we hope that turns out to be

324
00:17:49,220 --> 00:17:57,830
unbiased but we suspect it doesn't point

325
00:17:56,149 --> 00:18:00,379
you back to Tim Griffin ten years ago

326
00:17:57,830 --> 00:18:03,559
measuring the bias of planetlab in the

327
00:18:00,379 --> 00:18:05,699
triangle inequality and to the what

328
00:18:03,559 --> 00:18:09,629
we're measuring is what we're measuring

329
00:18:05,700 --> 00:18:12,570
that's it boys and girls you there any

330
00:18:09,630 --> 00:18:15,570
other questions if they're not they the

331
00:18:12,570 --> 00:18:17,189
the questioners already asked the

332
00:18:15,570 --> 00:18:29,129
questions I was going to ask so hey

333
00:18:17,190 --> 00:18:31,860
thank you so much so next up we're

334
00:18:29,130 --> 00:18:34,019
talking about tracking transport

335
00:18:31,860 --> 00:18:40,289
evolution layer evolution with path

336
00:18:34,019 --> 00:18:43,139
spider got yet is a born in Belgium

337
00:18:40,289 --> 00:18:45,029
worried it also to secondary school as a

338
00:18:43,139 --> 00:18:48,029
bachelor's of science and electrical

339
00:18:45,029 --> 00:18:49,919
engineering from Delft University of

340
00:18:48,029 --> 00:18:52,169
Technology currently in the final

341
00:18:49,919 --> 00:18:54,240
semester of his electrical engineering

342
00:18:52,169 --> 00:18:57,299
and information technology master's at

343
00:18:54,240 --> 00:19:00,720
ETH sorry outside of academia also

344
00:18:57,299 --> 00:19:04,168
involved in the hacker scene by for

345
00:19:00,720 --> 00:19:09,830
example by organizing Oh Oh hm to that

346
00:19:04,169 --> 00:19:09,830
less than 13 and shot 2017 so

347
00:19:47,380 --> 00:19:52,660
so you good take it away

348
00:19:52,960 --> 00:19:58,790
okay I'm good morning everyone together

349
00:19:56,630 --> 00:20:00,080
with some people from it ha and

350
00:19:58,790 --> 00:20:02,000
University of Aberdeen

351
00:20:00,080 --> 00:20:03,620
we've been looking into a tracking

352
00:20:02,000 --> 00:20:07,040
transport layer revolution with pops

353
00:20:03,620 --> 00:20:08,959
fighter um and when you see this title I

354
00:20:07,040 --> 00:20:11,540
think it really calls for two main

355
00:20:08,960 --> 00:20:13,100
questions the first one is why we do you

356
00:20:11,540 --> 00:20:15,050
want to track transfer to a revolution

357
00:20:13,100 --> 00:20:18,830
and the second one is what the hell is

358
00:20:15,050 --> 00:20:20,480
false fighter so um the answer to the

359
00:20:18,830 --> 00:20:22,550
first question I think most of you will

360
00:20:20,480 --> 00:20:23,990
know and that is that these days the

361
00:20:22,550 --> 00:20:26,270
Internet is full and full and full of

362
00:20:23,990 --> 00:20:29,150
middle boxes and they heavily interfere

363
00:20:26,270 --> 00:20:31,400
with our connections um so if you want

364
00:20:29,150 --> 00:20:33,080
our services to keep working transport

365
00:20:31,400 --> 00:20:35,960
protocols have to react on these

366
00:20:33,080 --> 00:20:38,720
interferences and you could do that by

367
00:20:35,960 --> 00:20:40,640
some feeling in your left thumb or by

368
00:20:38,720 --> 00:20:44,780
some anecdotal evidence but if you want

369
00:20:40,640 --> 00:20:47,780
to do it properly then um you really

370
00:20:44,780 --> 00:20:49,790
have to do that driven by data so we've

371
00:20:47,780 --> 00:20:52,370
tried to collect this data through

372
00:20:49,790 --> 00:20:53,629
active internet measurements and for

373
00:20:52,370 --> 00:20:55,189
that we've built a tool chain of which

374
00:20:53,630 --> 00:20:58,100
fought spider is the central component

375
00:20:55,190 --> 00:21:00,650
and this tool chain can be used to run a

376
00:20:58,100 --> 00:21:02,659
control experiments against pretty much

377
00:21:00,650 --> 00:21:04,880
any protocol you'd want to measure and

378
00:21:02,660 --> 00:21:08,300
pretty much any target that you want to

379
00:21:04,880 --> 00:21:09,890
measure and then and the output of our

380
00:21:08,300 --> 00:21:12,560
measurements are what we call conditions

381
00:21:09,890 --> 00:21:14,060
for example at the condition ec and

382
00:21:12,560 --> 00:21:18,520
connectivity works that are associated

383
00:21:14,060 --> 00:21:21,230
with pots so in this talk we'll start by

384
00:21:18,520 --> 00:21:22,820
first looking at the basic architecture

385
00:21:21,230 --> 00:21:25,280
of all spider so what does it do and

386
00:21:22,820 --> 00:21:27,020
then also how have we incorporated pot

387
00:21:25,280 --> 00:21:30,800
spider into a cloud based measurement

388
00:21:27,020 --> 00:21:32,690
system a system that allows us to run

389
00:21:30,800 --> 00:21:35,180
many measurements both over a long

390
00:21:32,690 --> 00:21:37,430
period of time to really track what is

391
00:21:35,180 --> 00:21:39,080
changing and also many measurements

392
00:21:37,430 --> 00:21:40,340
together over a short

393
00:21:39,080 --> 00:21:44,000
period of time so we can eliminate

394
00:21:40,340 --> 00:21:45,620
trenchant effects and then we'll

395
00:21:44,000 --> 00:21:47,899
actually look after at three studies

396
00:21:45,620 --> 00:21:49,879
that we've done for three protocols with

397
00:21:47,899 --> 00:21:53,689
very different levels of deployments

398
00:21:49,880 --> 00:21:55,700
that's a DAC P ec N and T fo and for

399
00:21:53,690 --> 00:21:57,850
each of them we have results and quite

400
00:21:55,700 --> 00:22:02,090
some interesting insights

401
00:21:57,850 --> 00:22:04,789
so Paul spider is a tool for a B testing

402
00:22:02,090 --> 00:22:08,840
of Internet measurements and or of

403
00:22:04,789 --> 00:22:11,080
Internet path transparency and and more

404
00:22:08,840 --> 00:22:13,519
specifically what we want to look at is

405
00:22:11,080 --> 00:22:15,350
thus using a certain protocol or a

406
00:22:13,519 --> 00:22:19,820
certain protocol feature and Pete on

407
00:22:15,350 --> 00:22:22,459
your connectivity so how we do this is

408
00:22:19,820 --> 00:22:24,200
by opening two TCP connections first we

409
00:22:22,460 --> 00:22:26,960
open up a vanilla baseline TCP

410
00:22:24,200 --> 00:22:28,760
connection and then quasi simultaneously

411
00:22:26,960 --> 00:22:31,730
with that TCP connection with the

412
00:22:28,760 --> 00:22:33,470
protocol under test we compare the

413
00:22:31,730 --> 00:22:36,289
results of these two connections and

414
00:22:33,470 --> 00:22:38,600
based on that we try to deduce whether

415
00:22:36,289 --> 00:22:41,679
using the protocol under test actually

416
00:22:38,600 --> 00:22:41,678
impede some connection or not

417
00:22:41,740 --> 00:22:47,120
so part spider internally looks like

418
00:22:45,169 --> 00:22:49,850
this you have a bunch of worker threads

419
00:22:47,120 --> 00:22:52,969
typically about 50 or 200 or something

420
00:22:49,850 --> 00:22:56,269
that all get their measurement targets

421
00:22:52,970 --> 00:22:57,289
from a large queue they then synchronize

422
00:22:56,269 --> 00:22:59,570
with a configurator

423
00:22:57,289 --> 00:23:00,799
that ensures that your system is in the

424
00:22:59,570 --> 00:23:04,428
right state for the measurement you want

425
00:23:00,799 --> 00:23:07,059
to take for example if you want to take

426
00:23:04,429 --> 00:23:09,200
an NEC end measurement for the baseline

427
00:23:07,059 --> 00:23:11,120
measurements the kernels should have

428
00:23:09,200 --> 00:23:12,799
easy and switched off if you want to do

429
00:23:11,120 --> 00:23:14,149
your expand experimental measurement it

430
00:23:12,799 --> 00:23:15,590
should have it switched on this is

431
00:23:14,149 --> 00:23:19,010
system-wide so everything needs to be

432
00:23:15,590 --> 00:23:21,199
synced up then they generate an traffic

433
00:23:19,010 --> 00:23:23,899
to the desk targets and the day that

434
00:23:21,200 --> 00:23:25,789
they have on the connection they sent to

435
00:23:23,899 --> 00:23:28,760
what we call the murder so this is

436
00:23:25,789 --> 00:23:30,669
typically things like the five tuple and

437
00:23:28,760 --> 00:23:32,809
whether the connection failed or not

438
00:23:30,669 --> 00:23:35,389
basically what you get from your API

439
00:23:32,809 --> 00:23:38,240
calls and then we have an observer

440
00:23:35,389 --> 00:23:41,678
thread that sniffs on all the test test

441
00:23:38,240 --> 00:23:45,049
traffic that's generated also generates

442
00:23:41,679 --> 00:23:47,419
records for example which flags were set

443
00:23:45,049 --> 00:23:49,639
in the TCP headers and so forth also

444
00:23:47,419 --> 00:23:52,490
sends this to the merger merger then

445
00:23:49,639 --> 00:23:54,080
figures out which which

446
00:23:52,490 --> 00:23:56,059
records belong together merges them

447
00:23:54,080 --> 00:24:00,260
together in one outputs and that's the

448
00:23:56,059 --> 00:24:04,309
file that you actually look at so this

449
00:24:00,260 --> 00:24:05,990
allows us to figure out whether certain

450
00:24:04,309 --> 00:24:10,460
protocols and peed on functionality yes

451
00:24:05,990 --> 00:24:13,340
or no but only from one location and but

452
00:24:10,460 --> 00:24:14,990
in the internet you typically have two

453
00:24:13,340 --> 00:24:16,459
places where impairments exist well

454
00:24:14,990 --> 00:24:20,000
actually three you have your access

455
00:24:16,460 --> 00:24:21,470
network then you have impairments close

456
00:24:20,000 --> 00:24:24,740
to the target and you have impairments

457
00:24:21,470 --> 00:24:26,480
close to the network but we measure from

458
00:24:24,740 --> 00:24:28,309
data centers so we rule out the access

459
00:24:26,480 --> 00:24:30,350
network so we're not very interested in

460
00:24:28,309 --> 00:24:32,420
that

461
00:24:30,350 --> 00:24:34,010
and you want to be able to distinguish

462
00:24:32,420 --> 00:24:35,390
between the two because when you have a

463
00:24:34,010 --> 00:24:37,760
problem in the Internet core that's

464
00:24:35,390 --> 00:24:39,530
obviously way more troubling then when

465
00:24:37,760 --> 00:24:44,330
some idiots puts up a broken box

466
00:24:39,530 --> 00:24:47,480
somewhere at his house so how we

467
00:24:44,330 --> 00:24:48,649
distinguish between these is by running

468
00:24:47,480 --> 00:24:50,750
multiple measurements simultaneously

469
00:24:48,650 --> 00:24:53,570
from different vantage points around the

470
00:24:50,750 --> 00:24:57,260
globe and our measurements with use

471
00:24:53,570 --> 00:24:59,750
digitalocean data centers and then we

472
00:24:57,260 --> 00:25:01,700
look at whether a connection with the

473
00:24:59,750 --> 00:25:03,920
protocol under tests always fails so

474
00:25:01,700 --> 00:25:05,630
from all vantage points in which we say

475
00:25:03,920 --> 00:25:07,340
okay clearly there must be something

476
00:25:05,630 --> 00:25:09,140
close to the target that's broke that's

477
00:25:07,340 --> 00:25:12,050
broken and we say that this target

478
00:25:09,140 --> 00:25:14,150
exhibits side dependency or whether it's

479
00:25:12,050 --> 00:25:16,669
only sometimes fails and sometimes work

480
00:25:14,150 --> 00:25:19,340
we're clearly depending on which polity

481
00:25:16,670 --> 00:25:21,170
tract to take through the core

482
00:25:19,340 --> 00:25:23,570
you get impairment or not so we say

483
00:25:21,170 --> 00:25:25,100
there's pot dependency and then to make

484
00:25:23,570 --> 00:25:28,059
sure that we're not just measuring

485
00:25:25,100 --> 00:25:30,260
transients we run every measurement also

486
00:25:28,059 --> 00:25:32,300
multiple times very close together in

487
00:25:30,260 --> 00:25:34,809
time and only if we're really sure that

488
00:25:32,300 --> 00:25:37,610
every time we're seeing the same kind of

489
00:25:34,809 --> 00:25:42,770
impairments we say okay this is path or

490
00:25:37,610 --> 00:25:44,689
side dependent then then we've combined

491
00:25:42,770 --> 00:25:48,800
this into a cloud based measurement

492
00:25:44,690 --> 00:25:51,260
system and that has to always up note it

493
00:25:48,800 --> 00:25:53,178
has an Orchestrator which runs saltstack

494
00:25:51,260 --> 00:25:55,700
which is an open source and pretty

495
00:25:53,179 --> 00:25:58,670
awesome cloud provisioning system and

496
00:25:55,700 --> 00:25:59,620
then a PTO or a Patras parentsí

497
00:25:58,670 --> 00:26:02,750
observatory

498
00:25:59,620 --> 00:26:05,059
so if you'd want to run your measurement

499
00:26:02,750 --> 00:26:06,230
what you do is you SSH into the

500
00:26:05,059 --> 00:26:07,610
orchestrator you

501
00:26:06,230 --> 00:26:09,860
set up your measurement campaign and

502
00:26:07,610 --> 00:26:12,199
then the orchestrator will periodically

503
00:26:09,860 --> 00:26:14,540
spawn a bunch of measurements cloud

504
00:26:12,200 --> 00:26:15,980
notes render measurements and these

505
00:26:14,540 --> 00:26:19,190
measurements will then upload the raw

506
00:26:15,980 --> 00:26:21,260
data into the PTO and then you also

507
00:26:19,190 --> 00:26:24,770
connect to the PTO and you set up what

508
00:26:21,260 --> 00:26:26,629
we call analyzers which define how data

509
00:26:24,770 --> 00:26:29,059
should be processed and then whenever

510
00:26:26,630 --> 00:26:30,980
new data is received at the PTO will

511
00:26:29,059 --> 00:26:32,809
automatically process it and will

512
00:26:30,980 --> 00:26:34,580
populate it in a database for you and

513
00:26:32,809 --> 00:26:36,290
then we have a nice front and that you

514
00:26:34,580 --> 00:26:42,080
can use our web front-end that you can

515
00:26:36,290 --> 00:26:44,480
use to query for your results so with

516
00:26:42,080 --> 00:26:47,178
the system as I said we run measurements

517
00:26:44,480 --> 00:26:50,240
on three different protocols the first

518
00:26:47,179 --> 00:26:54,320
one that we're looking at today is DHCP

519
00:26:50,240 --> 00:26:56,750
or differentiated services which is part

520
00:26:54,320 --> 00:26:58,879
of the IP header it gives you I think a

521
00:26:56,750 --> 00:27:01,419
six bit field that you can use to tag

522
00:26:58,880 --> 00:27:04,820
packets into different service flows or

523
00:27:01,419 --> 00:27:06,980
whatever you want and this is quite

524
00:27:04,820 --> 00:27:09,290
often used by network operators

525
00:27:06,980 --> 00:27:10,610
internally and then when the network

526
00:27:09,290 --> 00:27:14,149
when the packets leave their net or

527
00:27:10,610 --> 00:27:16,580
guilt bleach the fields however related

528
00:27:14,150 --> 00:27:20,360
to weapon there's a web RTC there have

529
00:27:16,580 --> 00:27:23,899
been proposals to also use this field to

530
00:27:20,360 --> 00:27:25,490
send data from ant hosts to servers and

531
00:27:23,900 --> 00:27:27,500
the question that we're looking at is

532
00:27:25,490 --> 00:27:30,559
just doing this impede on your

533
00:27:27,500 --> 00:27:32,240
functionality yes or no and then another

534
00:27:30,559 --> 00:27:34,639
question that we're looking at which is

535
00:27:32,240 --> 00:27:36,590
more by the way thing is is there any

536
00:27:34,640 --> 00:27:38,150
link between the DHCP code points you

537
00:27:36,590 --> 00:27:41,959
get back from a server and the ones you

538
00:27:38,150 --> 00:27:44,210
sent and ideally there should be none so

539
00:27:41,960 --> 00:27:46,669
how do we measure this well um that's

540
00:27:44,210 --> 00:27:48,350
why the first will open up a regular TCP

541
00:27:46,669 --> 00:27:50,540
connection where you set to the DHCP

542
00:27:48,350 --> 00:27:54,049
code point to zero which is the default

543
00:27:50,540 --> 00:27:56,149
value and then we open up a second

544
00:27:54,049 --> 00:27:58,668
connection with a non-default DHCP code

545
00:27:56,150 --> 00:28:01,400
point and then we see if the second

546
00:27:58,669 --> 00:28:03,890
connection fail we assume that the syn

547
00:28:01,400 --> 00:28:05,660
packet must be dropped so something is

548
00:28:03,890 --> 00:28:10,460
impeding on our function or on our

549
00:28:05,660 --> 00:28:11,750
connection so results again we've

550
00:28:10,460 --> 00:28:13,190
measured this from digitalocean

551
00:28:11,750 --> 00:28:17,510
this is true for all the measurements

552
00:28:13,190 --> 00:28:19,640
this is Los MLS a it promise and we see

553
00:28:17,510 --> 00:28:22,070
that for the code point that

554
00:28:19,640 --> 00:28:24,500
use for testing that's code point 46 or

555
00:28:22,070 --> 00:28:27,050
expedited forwarding we see absolutely

556
00:28:24,500 --> 00:28:30,110
natural blocking so if you look here in

557
00:28:27,050 --> 00:28:31,580
the table see that of all the successful

558
00:28:30,110 --> 00:28:35,320
connection attempts with the baseline

559
00:28:31,580 --> 00:28:38,090
case only half a percent or so failed

560
00:28:35,320 --> 00:28:40,730
when using a non standard DCP code

561
00:28:38,090 --> 00:28:44,240
points and of this half a percent pretty

562
00:28:40,730 --> 00:28:46,790
much all of them exhibited some sort of

563
00:28:44,240 --> 00:28:48,320
path dependency so there's almost no

564
00:28:46,790 --> 00:28:50,810
blocking but the blocking there is is

565
00:28:48,320 --> 00:28:59,629
file dependence and yes we ran this on

566
00:28:50,810 --> 00:29:02,659
ipv6 so then the second thing that we

567
00:28:59,630 --> 00:29:04,730
look up looked at is is there any link

568
00:29:02,660 --> 00:29:08,210
between the DHCP Cohen code points you

569
00:29:04,730 --> 00:29:10,370
get back and once you send out and as

570
00:29:08,210 --> 00:29:13,190
you can see here the distribution when

571
00:29:10,370 --> 00:29:16,310
using the baseline case so the zero code

572
00:29:13,190 --> 00:29:19,310
point outgoing or the 46 code points is

573
00:29:16,310 --> 00:29:23,960
almost identical so there is no link

574
00:29:19,310 --> 00:29:29,000
which is good second protocol is TCP

575
00:29:23,960 --> 00:29:31,370
forced open or TFO TCP TFO is a protocol

576
00:29:29,000 --> 00:29:34,310
that allows you to when you connect to a

577
00:29:31,370 --> 00:29:35,870
server over TCP exchange cookie and then

578
00:29:34,310 --> 00:29:38,090
if you connect again to that server you

579
00:29:35,870 --> 00:29:39,469
can send it to cookie and if the cookie

580
00:29:38,090 --> 00:29:41,720
is right you can actually also already

581
00:29:39,470 --> 00:29:44,000
send data on the same packets so you can

582
00:29:41,720 --> 00:29:46,250
basically cut round-trip delay time or

583
00:29:44,000 --> 00:29:47,740
you have loading delay time so I wonder

584
00:29:46,250 --> 00:29:51,680
around trip time

585
00:29:47,740 --> 00:29:54,140
so again for a measurement first we open

586
00:29:51,680 --> 00:29:56,720
up a vanilla TCP connection and then

587
00:29:54,140 --> 00:29:59,300
here we we actually deviate a bit from

588
00:29:56,720 --> 00:30:02,470
our standard procedure because there is

589
00:29:59,300 --> 00:30:07,879
an API issue or was an API a show issue

590
00:30:02,470 --> 00:30:10,940
for the DFO api we saw a very very long

591
00:30:07,880 --> 00:30:14,990
time outs when the connection failed so

592
00:30:10,940 --> 00:30:17,240
in order to to avoid those we only open

593
00:30:14,990 --> 00:30:20,920
up a TFO connection if this baseline

594
00:30:17,240 --> 00:30:24,290
connection actually succeeded so first

595
00:30:20,920 --> 00:30:26,330
we create a first connection and we do a

596
00:30:24,290 --> 00:30:29,000
cookie exchange and then we create

597
00:30:26,330 --> 00:30:31,340
observations whether this cookie was

598
00:30:29,000 --> 00:30:33,539
received or is not received then if we

599
00:30:31,340 --> 00:30:36,090
did receive a cookie and we closed

600
00:30:33,539 --> 00:30:37,950
action we open up a new connection we

601
00:30:36,090 --> 00:30:39,840
send the cookie we send the data and

602
00:30:37,950 --> 00:30:41,340
then we see was this data act was it not

603
00:30:39,840 --> 00:30:47,340
act or did the connection fell all

604
00:30:41,340 --> 00:30:49,019
together results well we found that DFO

605
00:30:47,340 --> 00:30:51,539
correctly informed the tier 4

606
00:30:49,019 --> 00:30:56,100
implementations are still pretty much

607
00:30:51,539 --> 00:30:59,190
limited to Google only and there's this

608
00:30:56,100 --> 00:31:03,090
one firm it's here in the tail it has 14

609
00:30:59,190 --> 00:31:05,489
IPS that actually responds with some non

610
00:31:03,090 --> 00:31:06,988
standards Thea for implementation so

611
00:31:05,489 --> 00:31:09,299
they sent the 6 byte cookie where

612
00:31:06,989 --> 00:31:11,609
everyone else sends an 8 byte cookie so

613
00:31:09,299 --> 00:31:16,229
they're also all linked to the same

614
00:31:11,609 --> 00:31:20,970
Spanish insurance company I've no idea

615
00:31:16,229 --> 00:31:24,599
why they want to do that and we also see

616
00:31:20,970 --> 00:31:26,609
no pal dependency but we only because

617
00:31:24,599 --> 00:31:29,070
only pretty much only Google does this

618
00:31:26,609 --> 00:31:31,739
and we have a very small set of of

619
00:31:29,070 --> 00:31:36,269
targets to measure against so yeah this

620
00:31:31,739 --> 00:31:37,769
this has to be read with some care but

621
00:31:36,269 --> 00:31:39,389
this is actually in line with previous

622
00:31:37,769 --> 00:31:42,090
measurement or with previous findings

623
00:31:39,389 --> 00:31:44,879
that say that TF for impairments is

624
00:31:42,090 --> 00:31:48,840
almost always in the access networks so

625
00:31:44,879 --> 00:31:51,889
even though n is small it still it still

626
00:31:48,840 --> 00:31:54,478
shows us what we would expect to see

627
00:31:51,889 --> 00:31:56,369
then the third protocol that we looked

628
00:31:54,479 --> 00:32:00,179
at is ECM or explicit congestion

629
00:31:56,369 --> 00:32:02,070
notification and this allows routers on

630
00:32:00,179 --> 00:32:06,450
a part to signal congestion to end house

631
00:32:02,070 --> 00:32:08,879
without dropping packets so again we do

632
00:32:06,450 --> 00:32:10,919
our usual yadi yadi we open up a

633
00:32:08,879 --> 00:32:13,649
baseline TCP connection and quasi

634
00:32:10,919 --> 00:32:16,529
simultaneously we open a TCP connection

635
00:32:13,649 --> 00:32:19,080
where we try to ego negotiate ecn we

636
00:32:16,529 --> 00:32:20,849
look depending on which one of these

637
00:32:19,080 --> 00:32:22,830
connections work we say that ecn

638
00:32:20,849 --> 00:32:25,678
connectivity is working broken transient

639
00:32:22,830 --> 00:32:28,080
or the host is just offline and then if

640
00:32:25,679 --> 00:32:30,029
is in connection if the ecn connection

641
00:32:28,080 --> 00:32:32,158
is working we will load the TCP

642
00:32:30,029 --> 00:32:35,309
connection a bit more and we'll see

643
00:32:32,159 --> 00:32:37,950
every receive any of the easy encode

644
00:32:35,309 --> 00:32:40,820
points so we see whether we're actually

645
00:32:37,950 --> 00:32:45,450
also doing easy and after negotiating it

646
00:32:40,820 --> 00:32:46,889
so results we see that server-side ecn

647
00:32:45,450 --> 00:32:50,040
deployment he

648
00:32:46,890 --> 00:32:52,830
increasing which is nice it also keeps

649
00:32:50,040 --> 00:32:55,139
increasing on v6 where before it was a

650
00:32:52,830 --> 00:32:59,250
bit flaky it's now actually getting

651
00:32:55,140 --> 00:33:02,280
quite good and we also see that the

652
00:32:59,250 --> 00:33:04,350
impairments that or after you negotiated

653
00:33:02,280 --> 00:33:06,750
ecn there are still some impairments but

654
00:33:04,350 --> 00:33:08,840
this the level of impairments there is

655
00:33:06,750 --> 00:33:12,120
staying quite static over time

656
00:33:08,840 --> 00:33:15,449
and then another quite interesting thing

657
00:33:12,120 --> 00:33:17,280
that we did is we looked at hosts that

658
00:33:15,450 --> 00:33:20,160
showed easy and pal dependency and we

659
00:33:17,280 --> 00:33:23,520
applied geo analysis on them on them via

660
00:33:20,160 --> 00:33:25,200
GRI P and then what we saw is at the

661
00:33:23,520 --> 00:33:28,500
three countries that show it's most easy

662
00:33:25,200 --> 00:33:32,180
and PAH dependency that's China South

663
00:33:28,500 --> 00:33:32,180
Korea or North Korea and South Korea

664
00:33:32,480 --> 00:33:37,200
basically are the three countries that

665
00:33:35,100 --> 00:33:40,230
apply the heaviest internet censorship

666
00:33:37,200 --> 00:33:42,570
or of which we know that they apply very

667
00:33:40,230 --> 00:33:48,420
heavy Internet censorship at the TCP

668
00:33:42,570 --> 00:33:50,189
level so this comes to show that if you

669
00:33:48,420 --> 00:33:54,630
try to break the Internet you actually

670
00:33:50,190 --> 00:33:56,160
break the internet the number the

671
00:33:54,630 --> 00:33:58,080
numbers are actually quite staggering so

672
00:33:56,160 --> 00:34:00,360
if you look at China for example I see

673
00:33:58,080 --> 00:34:03,750
that but one in 500 hosts show up a

674
00:34:00,360 --> 00:34:06,689
dependency and for the US this is less

675
00:34:03,750 --> 00:34:09,679
than one in 10,000 and we think the

676
00:34:06,690 --> 00:34:11,730
reason that this happens is because

677
00:34:09,679 --> 00:34:14,159
firewalls like the Great Firewall are

678
00:34:11,730 --> 00:34:16,260
probably very heterogeneous

679
00:34:14,159 --> 00:34:18,810
installations so depending on which

680
00:34:16,260 --> 00:34:21,899
sensor network censor ship box you hit

681
00:34:18,810 --> 00:34:23,850
you get easy N or you don't get it and

682
00:34:21,899 --> 00:34:28,020
you can also see here and the light

683
00:34:23,850 --> 00:34:30,569
purple lines show how stable the PAS

684
00:34:28,020 --> 00:34:32,699
dependency is over time and you see that

685
00:34:30,570 --> 00:34:34,500
it's actually not stable at all so it's

686
00:34:32,699 --> 00:34:35,969
really based on what we think it's

687
00:34:34,500 --> 00:34:42,418
really based on like which box you hit

688
00:34:35,969 --> 00:34:45,480
and yeah so in conclusion we see that

689
00:34:42,418 --> 00:34:47,819
easy on brokenness is a good indicator

690
00:34:45,480 --> 00:34:50,668
for path impairments at level three and

691
00:34:47,820 --> 00:34:53,540
four this is because ecn uses both core

692
00:34:50,668 --> 00:34:56,790
code points in the TCP and IP headers

693
00:34:53,540 --> 00:35:02,270
and we see a strong correlation with ecn

694
00:34:56,790 --> 00:35:06,120
pal dependency and purposeful censorship

695
00:35:02,270 --> 00:35:08,070
we also see that TCP faust open stays

696
00:35:06,120 --> 00:35:10,440
very niche and that practically only

697
00:35:08,070 --> 00:35:12,450
googles it Google uses it and thats

698
00:35:10,440 --> 00:35:15,960
impairments are mainly access network

699
00:35:12,450 --> 00:35:18,120
linked and then for DHCP we know that

700
00:35:15,960 --> 00:35:20,310
it's widely bleached but we also know

701
00:35:18,120 --> 00:35:24,960
now that using it is not a connectivity

702
00:35:20,310 --> 00:35:27,240
risk so if you want to learn more about

703
00:35:24,960 --> 00:35:30,210
this you can visit this on pod spider

704
00:35:27,240 --> 00:35:31,680
net you can also focus from github or if

705
00:35:30,210 --> 00:35:33,930
you just want to run your own awesome

706
00:35:31,680 --> 00:35:39,020
measurements you can just apt install

707
00:35:33,930 --> 00:35:39,020
path file and you can go thank you

708
00:35:42,950 --> 00:35:53,370
every questions we have questions

709
00:35:48,900 --> 00:35:55,620
excellent I'll watch my team inning I

710
00:35:53,370 --> 00:35:57,569
just wanted to say great talk and thank

711
00:35:55,620 --> 00:36:02,160
you for doing this it would be nice to

712
00:35:57,570 --> 00:36:04,140
see how this evolves over time well we

713
00:36:02,160 --> 00:36:07,230
actually the plan is that with this

714
00:36:04,140 --> 00:36:08,690
cloud system we have we want to it's not

715
00:36:07,230 --> 00:36:13,620
running at the moment because of

716
00:36:08,690 --> 00:36:21,630
logistical reasons is it oh that's his

717
00:36:13,620 --> 00:36:23,580
fault because Brian is lazy after my

718
00:36:21,630 --> 00:36:26,210
thesis actually voluntarily spent half a

719
00:36:23,580 --> 00:36:32,970
day setting it up again and find it oh

720
00:36:26,210 --> 00:36:47,130
it runs so we have we just didn't

721
00:36:32,970 --> 00:36:49,850
analyze the data you should say this in

722
00:36:47,130 --> 00:36:52,910
the microphone so it's no comment

723
00:36:49,850 --> 00:36:55,529
[Laughter]

724
00:36:52,910 --> 00:36:57,359
so once we get this back up and running

725
00:36:55,530 --> 00:37:00,330
the idea behind this setup is that it

726
00:36:57,360 --> 00:37:02,010
actually just keeps running so your

727
00:37:00,330 --> 00:37:03,900
measurements start automatically and

728
00:37:02,010 --> 00:37:06,930
your analysis starts automatically and

729
00:37:03,900 --> 00:37:09,480
we have a web front-end that will be

730
00:37:06,930 --> 00:37:11,190
public or is public so the idea is that

731
00:37:09,480 --> 00:37:13,370
this is a continuous thing so you can

732
00:37:11,190 --> 00:37:15,090
really see how this evolves over time

733
00:37:13,370 --> 00:37:18,270
yeah so

734
00:37:15,090 --> 00:37:20,400
and I saw some indication that between

735
00:37:18,270 --> 00:37:23,130
your the first runs and the second runs

736
00:37:20,400 --> 00:37:24,900
in your experiments you can a baseline

737
00:37:23,130 --> 00:37:26,310
failure rate since they're going up -

738
00:37:24,900 --> 00:37:30,900
have you any understanding of what

739
00:37:26,310 --> 00:37:32,520
that's depending on even for without do

740
00:37:30,900 --> 00:37:35,820
you remember on which light or which

741
00:37:32,520 --> 00:37:40,830
being at the table for like the Sen for

742
00:37:35,820 --> 00:37:42,420
example you let's look at this one so

743
00:37:40,830 --> 00:37:43,529
you see that like five three four you

744
00:37:42,420 --> 00:37:44,700
still have I don't know what's a

745
00:37:43,530 --> 00:37:47,220
significant number but you still have

746
00:37:44,700 --> 00:37:50,189
its grow going from one point five to

747
00:37:47,220 --> 00:37:52,859
one point eight in D so we run these

748
00:37:50,190 --> 00:37:56,360
measurements against the Alexa top

749
00:37:52,860 --> 00:37:59,610
million or a derivative thereof yeah and

750
00:37:56,360 --> 00:38:00,960
our assumption is that there's just a

751
00:37:59,610 --> 00:38:06,870
lot of crap in the tail of that list

752
00:38:00,960 --> 00:38:12,990
okay okay yes we should focus a bit on

753
00:38:06,870 --> 00:38:14,520
the ipv6 so yeah for ipv6 we see that

754
00:38:12,990 --> 00:38:17,069
there's actually quite a significant

755
00:38:14,520 --> 00:38:19,650
increase Minh because in 2016 June 2016

756
00:38:17,070 --> 00:38:22,650
we had eleven percent failures and in

757
00:38:19,650 --> 00:38:26,220
January 2017 it was only four and and

758
00:38:22,650 --> 00:38:28,970
you have way yeah so yeah four times D

759
00:38:26,220 --> 00:38:28,970
yes

760
00:38:51,869 --> 00:38:55,210
those of you who spend way too much time

761
00:38:53,890 --> 00:38:58,868
on active measures won't remember in

762
00:38:55,210 --> 00:39:00,220
January 2017 Alexa decided that the top

763
00:38:58,869 --> 00:39:01,480
million websites list was a piece of

764
00:39:00,220 --> 00:39:06,040
intellectual property that I'd like to

765
00:39:01,480 --> 00:39:07,540
monetize and basically the idea was you

766
00:39:06,040 --> 00:39:08,920
wanted to run something against the top

767
00:39:07,540 --> 00:39:11,940
million you should pay them about two

768
00:39:08,920 --> 00:39:14,590
thousand USD per run and there was a

769
00:39:11,940 --> 00:39:16,869
chunk of about three weeks when we ran

770
00:39:14,590 --> 00:39:19,840
this test between not having an Alexa

771
00:39:16,869 --> 00:39:21,630
list that we could that we knew that we

772
00:39:19,840 --> 00:39:24,190
could legally do something with and

773
00:39:21,630 --> 00:39:25,720
Cisco opening the umbrella top million

774
00:39:24,190 --> 00:39:28,210
domains list which has kind of replaced

775
00:39:25,720 --> 00:39:30,730
Alexa for for these sort of things so

776
00:39:28,210 --> 00:39:32,980
that January 2017 run runs a list that

777
00:39:30,730 --> 00:39:36,220
we cobbled together ourselves from other

778
00:39:32,980 --> 00:39:38,200
public sources that was meant to replace

779
00:39:36,220 --> 00:39:40,240
the Alexa top million list so there is

780
00:39:38,200 --> 00:39:41,770
in a couple of these cases there were

781
00:39:40,240 --> 00:39:43,868
not actually comparing apples and

782
00:39:41,770 --> 00:39:45,009
oranges we're comparing or not actually

783
00:39:43,869 --> 00:39:49,720
premiering apples and apples we're

784
00:39:45,010 --> 00:39:52,030
comparing apples and plums maybe they're

785
00:39:49,720 --> 00:39:53,529
related though the trees look about the

786
00:39:52,030 --> 00:39:55,270
same but there are some differences

787
00:39:53,530 --> 00:40:00,550
there that that can can change the

788
00:39:55,270 --> 00:40:02,650
coverage a little bit Thank You Steven

789
00:40:00,550 --> 00:40:05,619
strides ripe ncc following precisely on

790
00:40:02,650 --> 00:40:07,000
that point the last time I checked alike

791
00:40:05,619 --> 00:40:08,619
so we're still generating the twelve

792
00:40:07,000 --> 00:40:10,570
million if you have the magic URL you

793
00:40:08,619 --> 00:40:13,990
can go at it they just I guess reserve

794
00:40:10,570 --> 00:40:15,880
the right to stop that the magic URL the

795
00:40:13,990 --> 00:40:26,649
URL was actually also down for a week or

796
00:40:15,880 --> 00:40:28,830
two tree okay oh I see okay any other

797
00:40:26,650 --> 00:40:28,830
questions

798
00:40:29,250 --> 00:40:35,590
yeah I want it I just wanted to thank

799
00:40:32,859 --> 00:40:38,069
you all again for doing for doing this

800
00:40:35,590 --> 00:40:40,540
work about things that I worry about

801
00:40:38,070 --> 00:40:44,770
we're having the conversation in a

802
00:40:40,540 --> 00:40:50,130
couple of ITF working groups which will

803
00:40:44,770 --> 00:40:50,130
be hopefully closing on this week about

804
00:40:50,220 --> 00:40:55,240
opening up our ability to do more

805
00:40:52,540 --> 00:40:56,980
experiments with ecn and so we're gonna

806
00:40:55,240 --> 00:40:58,959
be like I said we're gonna this is

807
00:40:56,980 --> 00:41:01,540
interesting to us now and I think it

808
00:40:58,960 --> 00:41:02,830
will be more interesting as we start you

809
00:41:01,540 --> 00:41:04,540
know experiment you know come

810
00:41:02,830 --> 00:41:09,009
with experiment after experiment with

811
00:41:04,540 --> 00:41:11,650
this so I say I really appreciate you

812
00:41:09,010 --> 00:41:13,270
all doing this work you know I I applaud

813
00:41:11,650 --> 00:41:16,630
good work but I really like good work

814
00:41:13,270 --> 00:41:19,810
that makes my life easier which this

815
00:41:16,630 --> 00:41:22,290
does I think court thanks the other

816
00:41:19,810 --> 00:41:22,290
thank you

817
00:41:40,620 --> 00:41:52,120
next while Sylvester's getting set up

818
00:41:48,610 --> 00:41:53,680
can I just say that if you haven't

819
00:41:52,120 --> 00:41:57,880
registered for this workshop and you

820
00:41:53,680 --> 00:42:00,730
would like some lunch please register go

821
00:41:57,880 --> 00:42:13,810
to I our tf2 org slash nrw and follow

822
00:42:00,730 --> 00:42:17,530
the links next talk is take your own

823
00:42:13,810 --> 00:42:20,680
share of the pie and this is Sylvester

824
00:42:17,530 --> 00:42:23,470
is a senior researcher at Ericsson

825
00:42:20,680 --> 00:42:25,540
research Budapest he received an MSC and

826
00:42:23,470 --> 00:42:27,459
electrical engineering from Budapest

827
00:42:25,540 --> 00:42:28,680
University of Technology and and

828
00:42:27,460 --> 00:42:31,330
economics

829
00:42:28,680 --> 00:42:35,109
his main area of interest is traffic

830
00:42:31,330 --> 00:42:37,540
management including control of resource

831
00:42:35,110 --> 00:42:42,570
sharing network cooperation scheduling

832
00:42:37,540 --> 00:42:42,570
and dimensioning so thank you so mr.

833
00:42:43,680 --> 00:42:49,960
okay can you hear me yeah yes okay so

834
00:42:47,320 --> 00:42:52,900
joint work with Laurent University of

835
00:42:49,960 --> 00:42:55,270
Budapest and I am the presenter day they

836
00:42:52,900 --> 00:42:57,970
couldn't make so what is our goal with

837
00:42:55,270 --> 00:43:00,250
pv pi we would like to create an amalgam

838
00:42:57,970 --> 00:43:04,330
which is simple to implement only drops

839
00:43:00,250 --> 00:43:05,680
or marks upon arrival to queues and we

840
00:43:04,330 --> 00:43:07,450
would like to implement simple and

841
00:43:05,680 --> 00:43:09,250
scalable so sharing policies building on

842
00:43:07,450 --> 00:43:11,410
their per packet value concept we be

843
00:43:09,250 --> 00:43:13,420
published before but I will I will give

844
00:43:11,410 --> 00:43:15,490
an introduction to that and we would

845
00:43:13,420 --> 00:43:18,310
also like to keep dog at queuing delay

846
00:43:15,490 --> 00:43:20,410
building on the pike um so it's it's in

847
00:43:18,310 --> 00:43:25,930
fact a combination of the per packet

848
00:43:20,410 --> 00:43:27,819
value framework and the PI a QM so what

849
00:43:25,930 --> 00:43:28,960
what is a perfect value framework it's a

850
00:43:27,820 --> 00:43:31,960
resource sharing framework which allows

851
00:43:28,960 --> 00:43:34,450
a wide variety of detailed and flexible

852
00:43:31,960 --> 00:43:36,340
policies it enforces these policies

853
00:43:34,450 --> 00:43:38,890
under all were possible for traffic

854
00:43:36,340 --> 00:43:41,020
combinations and scales are given with

855
00:43:38,890 --> 00:43:43,089
the number of the flows so it's it's

856
00:43:41,020 --> 00:43:44,890
defines resource sharing policies for

857
00:43:43,090 --> 00:43:46,450
all situations by so you put it back

858
00:43:44,890 --> 00:43:48,460
it's value functions it's it's done for

859
00:43:46,450 --> 00:43:50,379
example a policy node and then it

860
00:43:48,460 --> 00:43:51,940
proposes a packet marker at the edge of

861
00:43:50,380 --> 00:43:53,920
the network which masks

862
00:43:51,940 --> 00:43:56,230
get value on each packet based on these

863
00:43:53,920 --> 00:43:57,820
throughput value functions belonging to

864
00:43:56,230 --> 00:44:00,790
that flow so that's that's at the edge

865
00:43:57,820 --> 00:44:02,530
and within the network resource needs

866
00:44:00,790 --> 00:44:05,860
only need to maximize the total

867
00:44:02,530 --> 00:44:07,870
transmitted value they don't this this

868
00:44:05,860 --> 00:44:09,550
results in implementing the policies we

869
00:44:07,870 --> 00:44:12,100
don't need for any flow over and so you

870
00:44:09,550 --> 00:44:14,290
don't need to know about these packets

871
00:44:12,100 --> 00:44:20,049
which to which flow they belong or which

872
00:44:14,290 --> 00:44:22,360
is the policy of that packet so it's

873
00:44:20,050 --> 00:44:24,130
more than every packet expresses the

874
00:44:22,360 --> 00:44:26,440
gain of the operator and the packet is

875
00:44:24,130 --> 00:44:29,020
delivered and it's relative implement in

876
00:44:26,440 --> 00:44:34,720
importance on the packet in value per

877
00:44:29,020 --> 00:44:36,640
bits and again every source node aims to

878
00:44:34,720 --> 00:44:39,459
maximize the transmitted that packet

879
00:44:36,640 --> 00:44:42,129
value so how to do that we'll be

880
00:44:39,460 --> 00:44:44,410
detailing later and then there is a

881
00:44:42,130 --> 00:44:47,650
congestion threshold value in this value

882
00:44:44,410 --> 00:44:49,270
space below that value in an ideal

883
00:44:47,650 --> 00:44:51,130
system below that value all packets

884
00:44:49,270 --> 00:44:53,170
should be robbed above the Tropic it

885
00:44:51,130 --> 00:44:55,120
should be transmitted and this this

886
00:44:53,170 --> 00:44:57,370
value results from the combination of

887
00:44:55,120 --> 00:44:59,290
available capacity amount for fir

888
00:44:57,370 --> 00:45:02,770
traffic and the packet value composition

889
00:44:59,290 --> 00:45:04,660
of that of the traffic and it's actually

890
00:45:02,770 --> 00:45:08,920
a pretty good descriptor of what happens

891
00:45:04,660 --> 00:45:10,359
in our system and this complements

892
00:45:08,920 --> 00:45:13,540
end-to-end condition control we will

893
00:45:10,360 --> 00:45:15,220
show that it enforces Furness only low

894
00:45:13,540 --> 00:45:17,710
controlled loss has to be provided by

895
00:45:15,220 --> 00:45:19,930
the intent and condition control and and

896
00:45:17,710 --> 00:45:21,670
only to avoid that packet problem so if

897
00:45:19,930 --> 00:45:23,169
you have a single bottle net or if you

898
00:45:21,670 --> 00:45:24,390
have a network where that that packet

899
00:45:23,170 --> 00:45:27,160
program cannot happen

900
00:45:24,390 --> 00:45:28,540
you can even live without condition

901
00:45:27,160 --> 00:45:30,730
control of course it's it's a question

902
00:45:28,540 --> 00:45:34,270
what happens to your application then

903
00:45:30,730 --> 00:45:36,340
and with this even incompatible

904
00:45:34,270 --> 00:45:40,330
condition controls can coexist in a

905
00:45:36,340 --> 00:45:43,960
network so what are these you put packet

906
00:45:40,330 --> 00:45:45,790
value functions this is actually

907
00:45:43,960 --> 00:45:48,100
derivative of the utility function and

908
00:45:45,790 --> 00:45:50,830
it defines the desired throughput of a

909
00:45:48,100 --> 00:45:53,740
flow of a clause for all conditions

910
00:45:50,830 --> 00:45:55,630
rational values so what what is an

911
00:45:53,740 --> 00:45:59,040
example for that we have three classes

912
00:45:55,630 --> 00:46:01,690
here gold silver and background so and

913
00:45:59,040 --> 00:46:03,940
the horizontal lines are conditioned

914
00:46:01,690 --> 00:46:05,590
rational values so in the most congested

915
00:46:03,940 --> 00:46:09,550
case which is the highest one

916
00:46:05,590 --> 00:46:11,500
- all value we say that a silver flow

917
00:46:09,550 --> 00:46:13,030
should get four times the throughput of

918
00:46:11,500 --> 00:46:14,500
a background flow and the gold flow

919
00:46:13,030 --> 00:46:17,800
should get two times the throughput of a

920
00:46:14,500 --> 00:46:20,650
silver flow but we can we can set sweep

921
00:46:17,800 --> 00:46:22,660
with limits so for example we say if a

922
00:46:20,650 --> 00:46:25,390
background flow reaches 100 kilobits per

923
00:46:22,660 --> 00:46:28,120
second then this this way things should

924
00:46:25,390 --> 00:46:29,980
change and for example if silver flow

925
00:46:28,120 --> 00:46:31,839
reaches 1 megabit per second then this

926
00:46:29,980 --> 00:46:33,820
rating should change again sir in this

927
00:46:31,840 --> 00:46:36,100
other congestion threshold value when

928
00:46:33,820 --> 00:46:39,270
the system is less congested we say that

929
00:46:36,100 --> 00:46:41,830
the beggar on flow should get 100k

930
00:46:39,270 --> 00:46:43,330
silver flow should get one megabit per

931
00:46:41,830 --> 00:46:48,759
second and the gold should get the rest

932
00:46:43,330 --> 00:46:50,950
and and after that after Gold gets early

933
00:46:48,760 --> 00:46:53,410
for mag we change the weights between

934
00:46:50,950 --> 00:46:56,379
backgrounds even gold from four to two

935
00:46:53,410 --> 00:46:59,020
to ten to four and again this is the

936
00:46:56,380 --> 00:47:02,140
throughput value function this is only

937
00:46:59,020 --> 00:47:04,690
known at the packet marker and from down

938
00:47:02,140 --> 00:47:07,359
was a packet walk marker these policies

939
00:47:04,690 --> 00:47:09,160
are communicated by packet marking only

940
00:47:07,360 --> 00:47:11,470
and the resource not don't have to know

941
00:47:09,160 --> 00:47:13,779
anything about these policies about the

942
00:47:11,470 --> 00:47:17,140
number of flows only have to read these

943
00:47:13,780 --> 00:47:19,750
packet values so how does a packet

944
00:47:17,140 --> 00:47:22,180
marker look like requirement is that if

945
00:47:19,750 --> 00:47:24,400
if all packets below a condition of

946
00:47:22,180 --> 00:47:25,509
threshold value grow up in the

947
00:47:24,400 --> 00:47:27,610
throughput of the remaining package

948
00:47:25,510 --> 00:47:30,490
shall be as defined by the tvf at this

949
00:47:27,610 --> 00:47:33,760
threshold and it's very simple to to

950
00:47:30,490 --> 00:47:36,359
imagine a simple just quantize the

951
00:47:33,760 --> 00:47:40,090
function makes token buckets with the

952
00:47:36,360 --> 00:47:42,610
packet values and the lengths of the

953
00:47:40,090 --> 00:47:44,290
supid region and choose the token bucket

954
00:47:42,610 --> 00:47:46,650
with the highest PB where there are

955
00:47:44,290 --> 00:47:46,650
enough tokens

956
00:47:47,070 --> 00:47:52,600
a simple example for pocket marking this

957
00:47:50,350 --> 00:47:56,470
is a very simple tvf or the quantized

958
00:47:52,600 --> 00:47:58,750
with four levels and we have two sources

959
00:47:56,470 --> 00:48:01,439
one is to money per second other six

960
00:47:58,750 --> 00:48:07,120
minutes per seconds so you can see that

961
00:48:01,440 --> 00:48:10,810
green is about 200k green plus blue is

962
00:48:07,120 --> 00:48:14,640
about one Meg plus yellow is about four

963
00:48:10,810 --> 00:48:18,130
mag and plus red is about fourteen Meg

964
00:48:14,640 --> 00:48:18,850
so the two McFlurry will only have

965
00:48:18,130 --> 00:48:21,100
yellow

966
00:48:18,850 --> 00:48:23,650
blue and green packets so this is this

967
00:48:21,100 --> 00:48:28,750
is time here why the other flow will

968
00:48:23,650 --> 00:48:33,730
have yellow and red also but if you

969
00:48:28,750 --> 00:48:35,950
filter for the for the filter out the

970
00:48:33,730 --> 00:48:39,570
yellow and red packets then the speed of

971
00:48:35,950 --> 00:48:42,160
both those remain one Maggi per second

972
00:48:39,570 --> 00:48:44,080
this is this is again completely

973
00:48:42,160 --> 00:48:46,450
unresponsive flows and it's quite

974
00:48:44,080 --> 00:48:50,319
trivial so because the marking rate of

975
00:48:46,450 --> 00:48:53,080
the blue plus green is 100 per second of

976
00:48:50,320 --> 00:48:55,030
course if you have TCP and you have you

977
00:48:53,080 --> 00:48:57,779
filter out these packets TCP will adapt

978
00:48:55,030 --> 00:49:00,010
and there will be only a few incoming

979
00:48:57,780 --> 00:49:03,990
yellow packets which will be immediately

980
00:49:00,010 --> 00:49:03,990
dropped in this congestion situation

981
00:49:06,240 --> 00:49:11,589
okay so as I said the task of the

982
00:49:09,910 --> 00:49:13,569
resource nodes within the network is to

983
00:49:11,590 --> 00:49:15,820
maximize the total transmitted value

984
00:49:13,570 --> 00:49:16,960
said the simplest of whom is to always

985
00:49:15,820 --> 00:49:18,340
serve the packets with the highest

986
00:49:16,960 --> 00:49:20,200
packet value first which is not

987
00:49:18,340 --> 00:49:21,850
practical because you want to keep

988
00:49:20,200 --> 00:49:25,750
ordering within flows at least

989
00:49:21,850 --> 00:49:27,819
so the second simplest in in concept

990
00:49:25,750 --> 00:49:30,070
organ is a five-four implementation and

991
00:49:27,820 --> 00:49:31,480
then when the queue becomes full drop

992
00:49:30,070 --> 00:49:35,890
the packet with the smallest packet

993
00:49:31,480 --> 00:49:38,020
value first but still meet queue

994
00:49:35,890 --> 00:49:40,660
dropping might not always be possible

995
00:49:38,020 --> 00:49:42,070
see you have to have salt free you have

996
00:49:40,660 --> 00:49:43,930
to be able to find and drop these

997
00:49:42,070 --> 00:49:45,370
packets so we want it to have a simpler

998
00:49:43,930 --> 00:49:50,379
argument and that's that's when we

999
00:49:45,370 --> 00:49:52,960
thought of PI so what is pi doing is

1000
00:49:50,380 --> 00:49:55,840
basically having a controller having at

1001
00:49:52,960 --> 00:49:58,690
all ciarán queuing delay and the target

1002
00:49:55,840 --> 00:50:00,160
queuing delay and using a controller to

1003
00:49:58,690 --> 00:50:02,080
control a drop probability for the

1004
00:50:00,160 --> 00:50:05,319
incoming packets for each incoming

1005
00:50:02,080 --> 00:50:07,840
packet random number is generated and if

1006
00:50:05,320 --> 00:50:09,990
it's if it is smaller than the drop

1007
00:50:07,840 --> 00:50:14,740
ability then that packet is dropped and

1008
00:50:09,990 --> 00:50:17,220
thereby it maintains the target get

1009
00:50:14,740 --> 00:50:19,839
delay and the given queue length it's

1010
00:50:17,220 --> 00:50:21,490
it's quite well published in the

1011
00:50:19,840 --> 00:50:26,770
literature there are improvements to it

1012
00:50:21,490 --> 00:50:30,399
as well so how we can translate party to

1013
00:50:26,770 --> 00:50:32,500
the per packet value concept what we do

1014
00:50:30,400 --> 00:50:35,230
is that for each incoming packet

1015
00:50:32,500 --> 00:50:37,630
we maintain an empirical cumulative

1016
00:50:35,230 --> 00:50:39,820
distribution function so we we basically

1017
00:50:37,630 --> 00:50:42,340
make for example histogram out of the

1018
00:50:39,820 --> 00:50:44,190
incoming packets we run the PI machinery

1019
00:50:42,340 --> 00:50:47,440
we calculate the dropping probability

1020
00:50:44,190 --> 00:50:49,540
basically the same way as spiders but

1021
00:50:47,440 --> 00:50:52,090
instead of of applying it directly and

1022
00:50:49,540 --> 00:50:55,359
independently of the packet value we

1023
00:50:52,090 --> 00:50:56,800
take that value in the e CDF and update

1024
00:50:55,359 --> 00:50:59,740
the condition threshold filter

1025
00:50:56,800 --> 00:51:02,680
accordingly so if the packets value is

1026
00:50:59,740 --> 00:51:05,229
larger than or equal to that filter then

1027
00:51:02,680 --> 00:51:08,980
we put that packet to the buffer

1028
00:51:05,230 --> 00:51:12,070
otherwise we drop it and this is this is

1029
00:51:08,980 --> 00:51:13,869
in our implementation it's a very simple

1030
00:51:12,070 --> 00:51:18,119
and first step in in implementing the

1031
00:51:13,869 --> 00:51:20,590
CCDF it's we only implemented for the PI

1032
00:51:18,119 --> 00:51:22,869
controlling to avoid 32 milliseconds in

1033
00:51:20,590 --> 00:51:26,430
our simulations and then we drop it and

1034
00:51:22,869 --> 00:51:31,060
and we have seen some kind of like

1035
00:51:26,430 --> 00:51:33,250
oscillations in this CTV's so I will I

1036
00:51:31,060 --> 00:51:36,759
will show that and we actually had

1037
00:51:33,250 --> 00:51:39,130
sometimes has to have have had to

1038
00:51:36,760 --> 00:51:41,800
increase the timing window for

1039
00:51:39,130 --> 00:51:44,380
collecting this this EC DF because there

1040
00:51:41,800 --> 00:51:47,349
weren't enough data so this is this part

1041
00:51:44,380 --> 00:51:50,950
when we we translate the probabilities

1042
00:51:47,349 --> 00:51:55,290
to filter values it's definitely a point

1043
00:51:50,950 --> 00:51:55,290
to improve and to get further ideas on

1044
00:52:00,500 --> 00:52:06,710
so we implemented this argument in an ax

1045
00:52:04,609 --> 00:52:11,930
simulator we used an truck simulator

1046
00:52:06,710 --> 00:52:15,140
cradle to run a line of cubic TCP

1047
00:52:11,930 --> 00:52:17,569
implementation which shows update videos

1048
00:52:15,140 --> 00:52:19,970
to basically PI paper the first 32

1049
00:52:17,570 --> 00:52:22,310
milliseconds we had battlenet rates

1050
00:52:19,970 --> 00:52:25,220
ranging from 10 to 100 megabits per

1051
00:52:22,310 --> 00:52:27,259
second target delay is 40 and 20

1052
00:52:25,220 --> 00:52:29,359
milliseconds I think we used tranny only

1053
00:52:27,260 --> 00:52:31,340
because we wanted to compare to to the

1054
00:52:29,359 --> 00:52:34,819
PI paper which we used as a reference

1055
00:52:31,340 --> 00:52:36,500
and we had a propagation delay again 40

1056
00:52:34,820 --> 00:52:39,220
100 millisecond the second values again

1057
00:52:36,500 --> 00:52:46,070
to be able to compare to the PI paper

1058
00:52:39,220 --> 00:52:49,129
and we have TCP users they generated one

1059
00:52:46,070 --> 00:52:52,550
or five TCP connections per flow so flow

1060
00:52:49,130 --> 00:52:54,980
where we apply sweepit value function so

1061
00:52:52,550 --> 00:52:57,530
the flow has policies so if in case the

1062
00:52:54,980 --> 00:52:59,480
user had five TCP flows these were

1063
00:52:57,530 --> 00:53:01,430
handled together even the packet marker

1064
00:52:59,480 --> 00:53:03,460
didn't differentiate with with them we

1065
00:53:01,430 --> 00:53:05,868
used five cc's TCP flows because

1066
00:53:03,460 --> 00:53:07,849
sometimes a single TCP flow wasn't

1067
00:53:05,869 --> 00:53:10,040
aggressive enough or the drop of a

1068
00:53:07,849 --> 00:53:11,750
single packet was was too high and the

1069
00:53:10,040 --> 00:53:16,040
resource sharing wasn't as as we

1070
00:53:11,750 --> 00:53:17,720
intended and UDP traffic is completely

1071
00:53:16,040 --> 00:53:20,270
non congestion control and high speed

1072
00:53:17,720 --> 00:53:22,939
usually it's something like 60% of the

1073
00:53:20,270 --> 00:53:24,560
bottleneck capacity so if we have for

1074
00:53:22,940 --> 00:53:26,690
example free UDP flavors as in

1075
00:53:24,560 --> 00:53:29,359
simulations we have they could already

1076
00:53:26,690 --> 00:53:30,800
completely over harm the TCP flows if we

1077
00:53:29,359 --> 00:53:36,560
wouldn't have any kind of resource

1078
00:53:30,800 --> 00:53:40,310
sharing control solution so this is the

1079
00:53:36,560 --> 00:53:44,150
simple simulation case we have only gold

1080
00:53:40,310 --> 00:53:46,339
and silver TCP sources five TCP

1081
00:53:44,150 --> 00:53:49,400
connections per flow and we changed the

1082
00:53:46,339 --> 00:53:53,240
number of flows from one one one gold

1083
00:53:49,400 --> 00:53:55,339
one silver 2 2 to 4 4 and 8 8 and and

1084
00:53:53,240 --> 00:53:57,200
using flow calculus and knowing the

1085
00:53:55,339 --> 00:53:58,880
truth put value functions is possible to

1086
00:53:57,200 --> 00:54:01,279
calculate the desired resource sharing

1087
00:53:58,880 --> 00:54:02,780
so what what is what we defined so if

1088
00:54:01,280 --> 00:54:08,000
you know we have this number of sources

1089
00:54:02,780 --> 00:54:10,490
this T V Fe DVF's and this capacity then

1090
00:54:08,000 --> 00:54:14,390
it's simple math to calculate these

1091
00:54:10,490 --> 00:54:17,149
desired shares and once you can see

1092
00:54:14,390 --> 00:54:19,879
if we have not too many users there are

1093
00:54:17,150 --> 00:54:21,619
some deviations from the from desire

1094
00:54:19,880 --> 00:54:25,579
chairs but as the number of sources

1095
00:54:21,619 --> 00:54:27,920
increases the the actual share got by

1096
00:54:25,579 --> 00:54:35,769
the users is very close to be to be

1097
00:54:27,920 --> 00:54:38,510
desired and this is mainly because we

1098
00:54:35,769 --> 00:54:42,109
for for the one one user okay so this is

1099
00:54:38,510 --> 00:54:45,890
this is the packet value filter versus

1100
00:54:42,109 --> 00:54:47,839
the the time so what you can see here is

1101
00:54:45,890 --> 00:54:51,230
that in many cases when we had only one

1102
00:54:47,839 --> 00:54:53,480
one users we we didn't actually have to

1103
00:54:51,230 --> 00:54:56,059
put any packet losses because there was

1104
00:54:53,480 --> 00:54:58,130
a burst of packet loss CCP it took time

1105
00:54:56,059 --> 00:55:00,019
for the TCP flows especially the gold

1106
00:54:58,130 --> 00:55:03,349
TCP flows to again reach its desired

1107
00:55:00,019 --> 00:55:06,049
chair and and and during that time we

1108
00:55:03,349 --> 00:55:09,109
didn't have any any chance to do

1109
00:55:06,049 --> 00:55:11,960
anything and as the number of flows

1110
00:55:09,109 --> 00:55:14,029
increases we have more chances to to

1111
00:55:11,960 --> 00:55:17,660
drop the right packet there by TCP

1112
00:55:14,029 --> 00:55:19,579
adapted to the dry stupid so again the

1113
00:55:17,660 --> 00:55:21,920
throughput results so this this was the

1114
00:55:19,579 --> 00:55:23,990
region when when it took time for the

1115
00:55:21,920 --> 00:55:30,380
gold TCP flows they actually reach again

1116
00:55:23,990 --> 00:55:33,140
the desired chair I also bought to the

1117
00:55:30,380 --> 00:55:34,910
queue length here for this to compare to

1118
00:55:33,140 --> 00:55:37,129
the pride result so this was the desired

1119
00:55:34,910 --> 00:55:39,470
key lengths and you can see that when we

1120
00:55:37,130 --> 00:55:42,109
increased the number of sources we

1121
00:55:39,470 --> 00:55:45,558
increased at 30 60 or 90 milliseconds

1122
00:55:42,109 --> 00:55:49,069
there was a spike in in queuing delay

1123
00:55:45,559 --> 00:55:52,369
but otherwise it it was like around the

1124
00:55:49,069 --> 00:55:54,288
queuing delay pretty pretty well and at

1125
00:55:52,369 --> 00:55:55,910
the end I will compare it to the actual

1126
00:55:54,289 --> 00:55:58,640
PI implementation it's very similar to

1127
00:55:55,910 --> 00:56:01,549
PI pi also has this overshot larger or

1128
00:55:58,640 --> 00:56:04,250
smaller if you want to to be for example

1129
00:56:01,549 --> 00:56:06,349
always below this queuing delay and then

1130
00:56:04,250 --> 00:56:10,730
you need some kind of different organs

1131
00:56:06,349 --> 00:56:12,710
it was in in in the PI target I think it

1132
00:56:10,730 --> 00:56:15,579
was mainly keeping this target but going

1133
00:56:12,710 --> 00:56:15,579
above it once

1134
00:56:19,060 --> 00:56:24,190
okay next set of simulation results is

1135
00:56:21,670 --> 00:56:27,780
with non congestion control UDP traffic

1136
00:56:24,190 --> 00:56:31,540
so the green flows here are UDP flows

1137
00:56:27,780 --> 00:56:37,780
which can completely over harm the the

1138
00:56:31,540 --> 00:56:40,360
system we have three of them and then at

1139
00:56:37,780 --> 00:56:43,810
30 millisecond we we start having TCP

1140
00:56:40,360 --> 00:56:48,640
flows increase them from 1 1 to 2 2 & 4

1141
00:56:43,810 --> 00:56:53,640
4 and and what you can see is that again

1142
00:56:48,640 --> 00:56:56,319
if we have not too many TCP flows then

1143
00:56:53,640 --> 00:56:58,540
we are somewhat away from the desired

1144
00:56:56,320 --> 00:57:00,820
sure but pretty close to them and as we

1145
00:56:58,540 --> 00:57:04,029
increase the number of flows the flow is

1146
00:57:00,820 --> 00:57:07,410
get about the desire and also UDP gets

1147
00:57:04,030 --> 00:57:12,370
smaller so you just expected so

1148
00:57:07,410 --> 00:57:14,230
elaborating on this I mean what happens

1149
00:57:12,370 --> 00:57:16,120
for example if we use PI in this case if

1150
00:57:14,230 --> 00:57:19,510
we use Phi in this case all packets all

1151
00:57:16,120 --> 00:57:21,670
of with equal probability so what will

1152
00:57:19,510 --> 00:57:24,430
likely happen is that if you have like

1153
00:57:21,670 --> 00:57:26,290
10% or even even higher probability of

1154
00:57:24,430 --> 00:57:29,680
dropping TCP flows TCP flows get

1155
00:57:26,290 --> 00:57:31,990
basically no throughput by why the UDP

1156
00:57:29,680 --> 00:57:34,299
flows get get all of the capacity and

1157
00:57:31,990 --> 00:57:38,080
here just by looking at the packet

1158
00:57:34,300 --> 00:57:45,060
values and getting the statistics you

1159
00:57:38,080 --> 00:57:47,440
can achieve a very very similar system

1160
00:57:45,060 --> 00:57:50,470
but the implementation complexity is

1161
00:57:47,440 --> 00:57:53,830
very similar to that of Pi but you can

1162
00:57:50,470 --> 00:57:56,370
you can stop misbehaving flows from gap

1163
00:57:53,830 --> 00:57:56,370
being too much

1164
00:58:00,990 --> 00:58:06,009
one more simulation results with dynamic

1165
00:58:03,670 --> 00:58:11,020
bottlenecks in this case V we had I

1166
00:58:06,010 --> 00:58:13,060
think yeah one one TCP flows one silver

1167
00:58:11,020 --> 00:58:15,250
and one gold and we changed the capacity

1168
00:58:13,060 --> 00:58:18,759
of the system we changed from 10 max 250

1169
00:58:15,250 --> 00:58:20,410
ml to 100 Meg back 250 back to 10 we

1170
00:58:18,760 --> 00:58:24,870
wanted to see what's the transient

1171
00:58:20,410 --> 00:58:27,339
behavior of the system and again

1172
00:58:24,870 --> 00:58:29,440
transients especially ramping up

1173
00:58:27,340 --> 00:58:31,840
transients takes some time but the

1174
00:58:29,440 --> 00:58:34,440
system can realize the desired we saw

1175
00:58:31,840 --> 00:58:34,440
sharing pretty

1176
00:58:34,740 --> 00:58:46,270
and and in the final results I am

1177
00:58:40,559 --> 00:58:48,730
presenting we wanted to compare it to

1178
00:58:46,270 --> 00:58:52,180
the actual PI resource sharing so this

1179
00:58:48,730 --> 00:58:54,940
scenario is as close to to the scenario

1180
00:58:52,180 --> 00:58:57,700
in the PI paper as s as possible so we

1181
00:58:54,940 --> 00:59:03,819
have a 10 megabit per second bottleneck

1182
00:58:57,700 --> 00:59:05,799
5 TCP flows to UDP flows and the target

1183
00:59:03,819 --> 00:59:08,140
delay under on tip time is is like in

1184
00:59:05,799 --> 00:59:10,270
the PI paper and we actually in the

1185
00:59:08,140 --> 00:59:13,569
paper we have a we have another

1186
00:59:10,270 --> 00:59:15,490
situation results where we we didn't

1187
00:59:13,569 --> 00:59:17,710
reach the desired B so sharing as well

1188
00:59:15,490 --> 00:59:20,410
as here so what we did there is we

1189
00:59:17,710 --> 00:59:22,029
increase the ECD of window again a cdf

1190
00:59:20,410 --> 00:59:24,038
window is how long you collect

1191
00:59:22,029 --> 00:59:26,799
statistics about your packets to

1192
00:59:24,039 --> 00:59:30,130
translate your dropping probability to

1193
00:59:26,799 --> 00:59:32,410
condition threshold value so we had to

1194
00:59:30,130 --> 00:59:34,839
increase that to actually reach this

1195
00:59:32,410 --> 00:59:37,538
nice desired resource sharing here and

1196
00:59:34,839 --> 00:59:39,759
we also have to increase the number of

1197
00:59:37,539 --> 00:59:41,920
CCP connections per flow but if you take

1198
00:59:39,760 --> 00:59:44,589
there at the values in the PI paper it

1199
00:59:41,920 --> 00:59:47,230
was the to two crosses get about the

1200
00:59:44,589 --> 00:59:48,730
same capacity why we suspect there

1201
00:59:47,230 --> 00:59:51,039
weren't throughput values in the PI

1202
00:59:48,730 --> 00:59:53,260
paper but what we suspect because of the

1203
00:59:51,039 --> 00:59:55,569
equal dropping probability TCP flow is

1204
00:59:53,260 --> 00:59:56,859
there ever completely overhand and it's

1205
00:59:55,569 --> 00:59:59,230
even with the default it's not

1206
00:59:56,859 --> 01:00:00,788
completely over hand here and if you

1207
00:59:59,230 --> 01:00:03,039
choose some of the parameters you can

1208
01:00:00,789 --> 01:00:11,770
again approach the resource sharing

1209
01:00:03,039 --> 01:00:14,020
quite well so and and this is the queue

1210
01:00:11,770 --> 01:00:16,119
length of the to Agra and this one is

1211
01:00:14,020 --> 01:00:19,000
from the PI paper this is from our paper

1212
01:00:16,119 --> 01:00:22,210
so we have a slightly larger overshot

1213
01:00:19,000 --> 01:00:26,640
here and after transients it keeps the

1214
01:00:22,210 --> 01:00:26,640
DQ ranks very similarly

1215
01:00:30,130 --> 01:00:34,539
so in summary we created a PvP algorithm

1216
01:00:32,829 --> 01:00:36,759
which can govern its own sharing by

1217
01:00:34,539 --> 01:00:40,089
combining the pie and third packet value

1218
01:00:36,759 --> 01:00:41,829
concept drop ability is calculated by PI

1219
01:00:40,089 --> 01:00:44,499
and is translated to congestion

1220
01:00:41,829 --> 01:00:47,739
threshold value filter in in the PPV

1221
01:00:44,499 --> 01:00:49,660
concept and this results a much more

1222
01:00:47,739 --> 01:00:51,579
practical resource not implementation of

1223
01:00:49,660 --> 01:00:53,558
in this concept because the previous

1224
01:00:51,579 --> 01:00:56,950
implementation had to drop mid Q which

1225
01:00:53,559 --> 01:00:58,329
is often not possible and using a

1226
01:00:56,950 --> 01:01:00,220
necessary simulations we have showed

1227
01:00:58,329 --> 01:01:03,569
that it can realize it is OD so sharing

1228
01:01:00,220 --> 01:01:06,700
and keep their target queuing delay of

1229
01:01:03,569 --> 01:01:10,239
course we have some further work to do

1230
01:01:06,700 --> 01:01:14,499
we need further simplification actually

1231
01:01:10,239 --> 01:01:16,479
keeping the the EC DF can be a still

1232
01:01:14,499 --> 01:01:18,339
quite costly especially for high speed

1233
01:01:16,479 --> 01:01:19,660
links of course there are the options

1234
01:01:18,339 --> 01:01:22,119
but we we have to look into these

1235
01:01:19,660 --> 01:01:24,279
options and also the the filter crash

1236
01:01:22,119 --> 01:01:26,289
horse has to be stabilized by by also

1237
01:01:24,279 --> 01:01:30,249
improving transient behavior it's pretty

1238
01:01:26,289 --> 01:01:32,799
ok right now if you have a few number of

1239
01:01:30,249 --> 01:01:35,140
high speed flowers this filter can can

1240
01:01:32,799 --> 01:01:37,450
be switched on and off fairly often or

1241
01:01:35,140 --> 01:01:40,589
if you have many UDP flows there can be

1242
01:01:37,450 --> 01:01:43,538
problems with it of course pie itself is

1243
01:01:40,589 --> 01:01:45,849
tuned for TCP flows so it's not

1244
01:01:43,539 --> 01:01:49,059
surprised that it's not not behaving

1245
01:01:45,849 --> 01:01:50,799
like perfectly for UDP flows on the

1246
01:01:49,059 --> 01:01:52,690
other hand it's it's actually somewhat

1247
01:01:50,799 --> 01:01:54,640
surprising that it's working that valve

1248
01:01:52,690 --> 01:02:00,609
it with the UDP non congestion control

1249
01:01:54,640 --> 01:02:01,629
flows ok and that concludes my

1250
01:02:00,609 --> 01:02:08,229
presentations

1251
01:02:01,630 --> 01:02:09,519
open for questions no questions yeah you

1252
01:02:08,229 --> 01:02:11,890
actually mentioned my question already

1253
01:02:09,519 --> 01:02:15,459
on the last on the last slide I was

1254
01:02:11,890 --> 01:02:17,440
wondering how much computational

1255
01:02:15,460 --> 01:02:20,910
complexity and state you actually need

1256
01:02:17,440 --> 01:02:23,920
for the inverse CDF and how you maintain

1257
01:02:20,910 --> 01:02:26,078
whatever the last window of values of

1258
01:02:23,920 --> 01:02:28,690
measurement values you have how do you

1259
01:02:26,079 --> 01:02:30,130
implement this in practice we have or up

1260
01:02:28,690 --> 01:02:32,140
to which speeds could you would you

1261
01:02:30,130 --> 01:02:34,920
assume that you can maintain this this

1262
01:02:32,140 --> 01:02:34,920
just curious

1263
01:02:36,690 --> 01:02:42,060
I I don't have a song wrong assumption

1264
01:02:39,390 --> 01:02:43,620
I'm not quite the notation guy in the

1265
01:02:42,060 --> 01:02:47,340
simulator of course it's you can do

1266
01:02:43,620 --> 01:02:48,930
whatever you want and when it comes to

1267
01:02:47,340 --> 01:02:50,610
practical implementations we are

1268
01:02:48,930 --> 01:02:52,259
thinking about actually practical

1269
01:02:50,610 --> 01:02:54,150
implementations are can't really going

1270
01:02:52,260 --> 01:02:56,010
to into many details of course you can

1271
01:02:54,150 --> 01:02:57,750
you can always maintain a histogram and

1272
01:02:56,010 --> 01:03:00,660
erase that histogram from time to time

1273
01:02:57,750 --> 01:03:04,020
you can quantize the value space or use

1274
01:03:00,660 --> 01:03:06,540
smaller very specific we use the single

1275
01:03:04,020 --> 01:03:09,690
byte value space here for the per packet

1276
01:03:06,540 --> 01:03:11,700
value so it's not like amazing not not

1277
01:03:09,690 --> 01:03:13,530
like a huge value space but we are

1278
01:03:11,700 --> 01:03:16,200
actually if you want to implement this

1279
01:03:13,530 --> 01:03:18,030
concept like at the brightest then you

1280
01:03:16,200 --> 01:03:26,240
might want to use two octet Santi and

1281
01:03:18,030 --> 01:03:30,030
having like two oak that's like 60 no no

1282
01:03:26,240 --> 01:03:32,729
again this was per class no this is per

1283
01:03:30,030 --> 01:03:34,440
bottle Mac so again I mean the thing

1284
01:03:32,730 --> 01:03:35,670
with the concept is that add the

1285
01:03:34,440 --> 01:03:37,560
resource node you don't know about

1286
01:03:35,670 --> 01:03:39,810
classes you don't know about flows you

1287
01:03:37,560 --> 01:03:42,720
only know about know about packet values

1288
01:03:39,810 --> 01:03:46,320
so you need a singly CDF per resource

1289
01:03:42,720 --> 01:03:48,000
node so it's it's it's probably fine

1290
01:03:46,320 --> 01:03:49,590
it's I mean the whole thing with the

1291
01:03:48,000 --> 01:03:51,030
concept is the scale was with the number

1292
01:03:49,590 --> 01:03:52,320
of flows because you don't know about

1293
01:03:51,030 --> 01:04:04,740
the number of flows at over at the

1294
01:03:52,320 --> 01:04:06,090
bottom like all right if let's say my

1295
01:04:04,740 --> 01:04:08,220
pockets belong to the economic class

1296
01:04:06,090 --> 01:04:10,200
with the gold one right and then most

1297
01:04:08,220 --> 01:04:12,350
preferred to be dropped my pockets will

1298
01:04:10,200 --> 01:04:16,140
drop from the flow because of this

1299
01:04:12,350 --> 01:04:18,210
mechanism it does set the spy on stickam

1300
01:04:16,140 --> 01:04:19,890
account VH the flow for example I assume

1301
01:04:18,210 --> 01:04:22,980
if my flow packets are constantly

1302
01:04:19,890 --> 01:04:25,859
dropped their value will start

1303
01:04:22,980 --> 01:04:31,140
increasing sometimes else my session

1304
01:04:25,860 --> 01:04:33,210
will be reached or will be impaired I

1305
01:04:31,140 --> 01:04:35,250
mean the the thing is in the pocket

1306
01:04:33,210 --> 01:04:37,200
marking so if you're if you're if your

1307
01:04:35,250 --> 01:04:39,510
throw is responsive and your your

1308
01:04:37,200 --> 01:04:41,399
packets are completely and constantly

1309
01:04:39,510 --> 01:04:44,250
dropped then your flow rate will be

1310
01:04:41,400 --> 01:04:46,800
likely below your your fair share rate

1311
01:04:44,250 --> 01:04:49,320
and then the packet marking dogyum we

1312
01:04:46,800 --> 01:04:50,480
make make sure that your all your

1313
01:04:49,320 --> 01:04:51,830
packets has value

1314
01:04:50,480 --> 01:04:53,750
higher than the condition threshold

1315
01:04:51,830 --> 01:04:55,850
value which means that none of your

1316
01:04:53,750 --> 01:04:59,960
packets will be dropped until you are

1317
01:04:55,850 --> 01:05:02,060
above your fair share I mean it's it's

1318
01:04:59,960 --> 01:05:03,410
compensated based by packet marking so

1319
01:05:02,060 --> 01:05:05,000
let's say your fair share is hundred

1320
01:05:03,410 --> 01:05:09,560
magnet the second condition threshold

1321
01:05:05,000 --> 01:05:12,530
value is hundred and then SS if you are

1322
01:05:09,560 --> 01:05:14,150
transmitting with 99.9 again I'm talking

1323
01:05:12,530 --> 01:05:16,100
about to complete the ideal system but

1324
01:05:14,150 --> 01:05:22,580
then all your packets will have value

1325
01:05:16,100 --> 01:05:30,170
higher than hundred any other questions

1326
01:05:22,580 --> 01:05:31,940
I wanted to take I want to like you know

1327
01:05:30,170 --> 01:05:34,580
some place we have this this quote that

1328
01:05:31,940 --> 01:05:40,460
you know to every to every problem there

1329
01:05:34,580 --> 01:05:45,020
is a solution that is obvious simple and

1330
01:05:40,460 --> 01:05:46,310
always wrong and when I was when I was

1331
01:05:45,020 --> 01:05:47,870
looking at your paper where it's like

1332
01:05:46,310 --> 01:05:49,100
you know well we have this tool we have

1333
01:05:47,870 --> 01:05:51,259
this other tool we should put them

1334
01:05:49,100 --> 01:05:52,910
together and I was really worried that

1335
01:05:51,260 --> 01:05:54,380
you were gonna trip over the you know

1336
01:05:52,910 --> 01:05:55,759
this is obviously the right thing to do

1337
01:05:54,380 --> 01:05:57,620
it's simple and it's going to be

1338
01:05:55,760 --> 01:06:01,370
obviously wrong I'm really glad that it

1339
01:05:57,620 --> 01:06:10,759
turned out as well as it did but thank

1340
01:06:01,370 --> 01:06:13,580
you so much thank you so this takes us

1341
01:06:10,760 --> 01:06:18,760
to the demo part of our of our

1342
01:06:13,580 --> 01:06:24,130
presentation and I will hand over the

1343
01:06:18,760 --> 01:06:24,130
technology to the nice people from need

1344
01:07:07,070 --> 01:07:12,120
so hello everyone my name is Felix Van

1345
01:07:10,350 --> 01:07:14,730
ronk I'm from the University of Applied

1346
01:07:12,120 --> 01:07:19,220
Science Mensa and I would like to

1347
01:07:14,730 --> 01:07:22,350
introduce you to the NEET meet Firefox

1348
01:07:19,220 --> 01:07:27,600
demo where we show way how to browse the

1349
01:07:22,350 --> 01:07:29,100
web in a neat way so first of all what's

1350
01:07:27,600 --> 01:07:30,839
the NEET library the neat libraries use

1351
01:07:29,100 --> 01:07:34,049
a library for network communication

1352
01:07:30,840 --> 01:07:36,570
which means you have a non-blocking and

1353
01:07:34,050 --> 01:07:39,990
call that based concept and unified API

1354
01:07:36,570 --> 01:07:44,450
for all network protocols so you can use

1355
01:07:39,990 --> 01:07:48,149
TCP UDP SCTP setp in kernel and userland

1356
01:07:44,450 --> 01:07:50,240
in the same way no different new

1357
01:07:48,150 --> 01:07:52,740
difference in how you use the API and

1358
01:07:50,240 --> 01:07:57,270
the neat library runs on Linux FreeBSD

1359
01:07:52,740 --> 01:07:59,240
NetBSD and Mac OS and it's lip UB base

1360
01:07:57,270 --> 01:08:02,430
and you were interested in the project

1361
01:07:59,240 --> 01:08:07,109
visit me project org there are some more

1362
01:08:02,430 --> 01:08:12,720
information about the library so what's

1363
01:08:07,110 --> 01:08:15,480
the demo oops oh it's this slide the

1364
01:08:12,720 --> 01:08:18,660
Neve Murray is between the application

1365
01:08:15,480 --> 01:08:22,649
and the the network protocols like UDP

1366
01:08:18,660 --> 01:08:25,410
TCP SCTP and other protocols like web

1367
01:08:22,649 --> 01:08:28,170
RTC we just added web RTC support and we

1368
01:08:25,410 --> 01:08:30,660
have Forks now working on web RTC in the

1369
01:08:28,170 --> 01:08:36,140
athan so we will present tomorrow demo

1370
01:08:30,660 --> 01:08:38,490
with rod with web RTC data channels and

1371
01:08:36,140 --> 01:08:44,820
needless between the application and the

1372
01:08:38,490 --> 01:08:46,920
protocols so how does the setup look

1373
01:08:44,819 --> 01:08:49,049
like we have on the left hand side we

1374
01:08:46,920 --> 01:08:52,290
have the client we called it need Forks

1375
01:08:49,050 --> 01:08:54,540
because it's Firefox of a need and the

1376
01:08:52,290 --> 01:08:59,600
client is connected wire to 10 megabit

1377
01:08:54,540 --> 01:09:02,609
Ethernet connections to two routers and

1378
01:08:59,600 --> 01:09:05,280
we called the routers heavy blue box I

1379
01:09:02,609 --> 01:09:08,970
will explain why we call them have

1380
01:09:05,279 --> 01:09:11,059
people works later and here we have two

1381
01:09:08,970 --> 01:09:13,369
more 10 megabit Ethernet connections

1382
01:09:11,059 --> 01:09:17,690
which are connected to the server the

1383
01:09:13,368 --> 01:09:21,679
server runs tht TBD and all these four

1384
01:09:17,689 --> 01:09:24,769
networks have 11 different subnets so

1385
01:09:21,679 --> 01:09:31,190
this subnet is routed by this brother to

1386
01:09:24,770 --> 01:09:34,730
the other one so two different paths the

1387
01:09:31,189 --> 01:09:38,439
need Forks is Firefox using need and we

1388
01:09:34,729 --> 01:09:41,808
only support HTTP over TCP and our SCTP

1389
01:09:38,439 --> 01:09:45,038
SCTP means multihoming so we can use

1390
01:09:41,809 --> 01:09:47,329
several paths which are available and

1391
01:09:45,038 --> 01:09:51,408
firefox over need runs on linux and

1392
01:09:47,328 --> 01:09:54,469
freebsd and it is possible to use to be

1393
01:09:51,408 --> 01:09:56,900
used on mac OS - but it's not running

1394
01:09:54,469 --> 01:10:00,619
that stable and now a demo we are using

1395
01:09:56,900 --> 01:10:05,539
FreeBSD 11 and as I explained earlier to

1396
01:10:00,619 --> 01:10:07,339
network interfaces the non need

1397
01:10:05,539 --> 01:10:09,409
components heavy blue box

1398
01:10:07,340 --> 01:10:12,369
it's a router between a server and the

1399
01:10:09,409 --> 01:10:15,289
client it has dummynet running with the

1400
01:10:12,369 --> 01:10:18,199
custom-made web GUI and we are able to

1401
01:10:15,289 --> 01:10:22,579
filter TCP UDP and SCTP on both paths

1402
01:10:18,199 --> 01:10:25,940
also based on FreeBSD the server is a

1403
01:10:22,579 --> 01:10:28,940
modified version of THC TBD supporting

1404
01:10:25,940 --> 01:10:32,719
TCP and SDP also running previously 11

1405
01:10:28,940 --> 01:10:38,058
stable also to network interfaces the

1406
01:10:32,719 --> 01:10:40,820
set up is located here and we will show

1407
01:10:38,059 --> 01:10:44,809
file download them over HTTP - we are

1408
01:10:40,820 --> 01:10:49,030
HTTP once running with TCP and once this

1409
01:10:44,809 --> 01:10:52,190
SCTP and the need library will check ok

1410
01:10:49,030 --> 01:10:54,619
which network protocols are available on

1411
01:10:52,190 --> 01:10:58,989
the path for example testing TCP and

1412
01:10:54,619 --> 01:11:01,280
SCDP and will try to use SCTP if

1413
01:10:58,989 --> 01:11:03,650
available because SCTP offers

1414
01:11:01,280 --> 01:11:06,769
multihoming and it should be 2 times

1415
01:11:03,650 --> 01:11:09,888
faster and if the net library discovers

1416
01:11:06,770 --> 01:11:12,409
ok we can't get up connection with

1417
01:11:09,889 --> 01:11:15,520
st-pierre there will be an automatic

1418
01:11:12,409 --> 01:11:15,519
fallback to TCP

1419
01:11:18,010 --> 01:11:24,010
set up again here's the client which is

1420
01:11:21,850 --> 01:11:26,950
this machine where the presentation is

1421
01:11:24,010 --> 01:11:30,460
running on and this is the happy blue

1422
01:11:26,950 --> 01:11:33,519
box stack and on the bottom you have

1423
01:11:30,460 --> 01:11:37,930
Cisco switch between the laptop which is

1424
01:11:33,520 --> 01:11:41,140
not connected today because it's not

1425
01:11:37,930 --> 01:11:43,750
usable to always switch the project of

1426
01:11:41,140 --> 01:11:47,910
intuitive machines there's the happy

1427
01:11:43,750 --> 01:11:51,730
blue box router and here we have the

1428
01:11:47,910 --> 01:11:53,980
network server which is this little box

1429
01:11:51,730 --> 01:12:05,889
this is the happy blue box tag this is

1430
01:11:53,980 --> 01:12:10,360
the client I hope this is gonna work

1431
01:12:05,890 --> 01:12:13,330
with this resolution so this is therapy

1432
01:12:10,360 --> 01:12:17,099
blue box web interface and currently we

1433
01:12:13,330 --> 01:12:27,130
allow TCP UDP and SCTP on all paths and

1434
01:12:17,100 --> 01:12:30,070
we will now block SCTP and switch to the

1435
01:12:27,130 --> 01:12:41,020
VirtualBox machine where we have need

1436
01:12:30,070 --> 01:12:43,360
Forks running so there's over our HTTP

1437
01:12:41,020 --> 01:12:46,239
over need and if we check the connection

1438
01:12:43,360 --> 01:12:49,360
it says ok this website has been

1439
01:12:46,239 --> 01:12:52,629
requested by this IP address and it is

1440
01:12:49,360 --> 01:12:59,070
using TCP and if we start a file

1441
01:12:52,630 --> 01:13:03,550
download as expected

1442
01:12:59,070 --> 01:13:08,820
1.1 megabyte per second which is roughly

1443
01:13:03,550 --> 01:13:14,320
10 megabits and it takes some time I

1444
01:13:08,820 --> 01:13:18,099
will stop it here so we keep the browser

1445
01:13:14,320 --> 01:13:20,950
open so nothing will change on the on

1446
01:13:18,100 --> 01:13:29,040
the client side we go over to the heavy

1447
01:13:20,950 --> 01:13:30,750
blue box and allow TCP SCTP and the

1448
01:13:29,040 --> 01:13:32,640
to the box machine again I've not

1449
01:13:30,750 --> 01:13:34,590
restart the browser just rerun the

1450
01:13:32,640 --> 01:13:41,160
connection test since now we're using a

1451
01:13:34,590 --> 01:13:45,180
CD B and if we start off i download same

1452
01:13:41,160 --> 01:13:48,240
file again we see it's using two paths

1453
01:13:45,180 --> 01:13:51,440
and we're reaching roughly the double

1454
01:13:48,240 --> 01:13:55,880
amount of speed so it's using SCTP

1455
01:13:51,440 --> 01:13:55,879
loitering over to network interfaces

1456
01:13:56,780 --> 01:14:11,940
this was our demo I hope we have

1457
01:14:08,700 --> 01:14:14,940
questions besides mine and I will go

1458
01:14:11,940 --> 01:14:23,820
last I'm jumping in for Maria here what

1459
01:14:14,940 --> 01:14:33,120
why didn't it run by D for the yv6 I've

1460
01:14:23,820 --> 01:14:36,210
not configured the ipv6 addresses no no

1461
01:14:33,120 --> 01:14:38,040
what you see you see the serial cable

1462
01:14:36,210 --> 01:14:40,020
when I just start at the demo we have to

1463
01:14:38,040 --> 01:14:42,750
fight through some corrupted so I had to

1464
01:14:40,020 --> 01:14:47,760
set up the system again and next time I

1465
01:14:42,750 --> 01:14:49,200
will be here with ipv6 ipv6 only and in

1466
01:14:47,760 --> 01:15:07,140
a nice part of that was that you didn't

1467
01:14:49,200 --> 01:15:13,620
blame it on Brian questions cmts is a

1468
01:15:07,140 --> 01:15:15,930
plain HTTP it's you ask you for the

1469
01:15:13,620 --> 01:15:18,630
modified version or we are I know the

1470
01:15:15,930 --> 01:15:21,840
for CTP there's the concurrent transfer

1471
01:15:18,630 --> 01:15:24,360
yes it is okay so you have to enable you

1472
01:15:21,840 --> 01:15:28,590
have to set these sis control option a

1473
01:15:24,360 --> 01:15:32,599
previously to enable the loitering thank

1474
01:15:28,590 --> 01:15:32,600
you others

1475
01:15:37,019 --> 01:15:42,159
yeah come work besides the proof of

1476
01:15:40,269 --> 01:15:43,929
concept what else what other

1477
01:15:42,159 --> 01:15:45,759
applications couldn't be possibly be

1478
01:15:43,929 --> 01:15:52,449
done is that how could other users use

1479
01:15:45,760 --> 01:15:54,869
this in neat general need in general we

1480
01:15:52,449 --> 01:16:00,159
have some other demo applications like

1481
01:15:54,869 --> 01:16:03,429
client app command-line tools and we are

1482
01:16:00,159 --> 01:16:09,699
currently working on as always that web

1483
01:16:03,429 --> 01:16:11,139
RTC so and we are trying to bring up

1484
01:16:09,699 --> 01:16:14,829
some other demos where we show the

1485
01:16:11,139 --> 01:16:18,729
general purpose general usage of the

1486
01:16:14,829 --> 01:16:23,558
need API we have for example a web

1487
01:16:18,729 --> 01:16:24,519
server which is supporting SCTP TCP web

1488
01:16:23,559 --> 01:16:27,309
RTC

1489
01:16:24,519 --> 01:16:36,789
HTTP / web RTC we're having some

1490
01:16:27,309 --> 01:16:38,469
concepts but in the motivation for that

1491
01:16:36,789 --> 01:16:39,818
is to get rid of the middle boxes I'm

1492
01:16:38,469 --> 01:16:43,629
trying to see where you're coming from

1493
01:16:39,819 --> 01:16:45,729
with this work because to get the you

1494
01:16:43,629 --> 01:16:47,289
know to do more tests and evolve and I

1495
01:16:45,729 --> 01:16:49,389
think Paul Hoffman for Nike and is doing

1496
01:16:47,289 --> 01:16:50,919
some studies on a volitional stack on

1497
01:16:49,389 --> 01:16:52,659
the network so I'm just trying to

1498
01:16:50,919 --> 01:16:56,318
understand the real motivation behind it

1499
01:16:52,659 --> 01:16:59,799
because behind the knee project to get a

1500
01:16:56,319 --> 01:17:01,629
new API to get rid of the socket API and

1501
01:16:59,800 --> 01:17:03,189
sort of a unified API for network

1502
01:17:01,629 --> 01:17:05,469
communication where you can seamlessly

1503
01:17:03,189 --> 01:17:07,869
integrate new network protocols like

1504
01:17:05,469 --> 01:17:10,239
maybe in the future quick or something

1505
01:17:07,869 --> 01:17:11,589
else and you don't have the I don't the

1506
01:17:10,239 --> 01:17:15,699
application that developers don't have

1507
01:17:11,589 --> 01:17:16,929
to learn a new way to to communicate

1508
01:17:15,699 --> 01:17:18,280
with the network depending on the

1509
01:17:16,929 --> 01:17:22,119
network protocol this was the main

1510
01:17:18,280 --> 01:17:24,478
motivation and need offers many typical

1511
01:17:22,119 --> 01:17:28,148
Network tasks like DNS resolution

1512
01:17:24,479 --> 01:17:29,859
buffering and happy eyeballing so

1513
01:17:28,149 --> 01:17:32,019
testing which network protocol is

1514
01:17:29,859 --> 01:17:34,269
available when we try to communicate

1515
01:17:32,019 --> 01:17:36,879
need will try all the different

1516
01:17:34,269 --> 01:17:39,789
combinations and you have a policy

1517
01:17:36,879 --> 01:17:44,619
system where you simply say okay I want

1518
01:17:39,789 --> 01:17:48,728
a secure message oriented communication

1519
01:17:44,619 --> 01:17:50,080
need do your best and then it comes up

1520
01:17:48,729 --> 01:17:52,930
with a

1521
01:17:50,080 --> 01:17:56,290
we have established connection and yeah

1522
01:17:52,930 --> 01:17:58,990
choose the best protocol for you so if I

1523
01:17:56,290 --> 01:18:00,810
was to either then your your explanation

1524
01:17:58,990 --> 01:18:02,860
of the motivation is of course correct

1525
01:18:00,810 --> 01:18:06,280
the if I was going to talk about the

1526
01:18:02,860 --> 01:18:07,570
meta motivation how you you know how you

1527
01:18:06,280 --> 01:18:12,790
end up in a place like this in the fur

1528
01:18:07,570 --> 01:18:14,549
in the in the first place so we've had

1529
01:18:12,790 --> 01:18:17,890
this problem with coming up with

1530
01:18:14,550 --> 01:18:18,600
deployable new transport protocols for a

1531
01:18:17,890 --> 01:18:23,200
while

1532
01:18:18,600 --> 01:18:24,520
and I I've actually got a picture that

1533
01:18:23,200 --> 01:18:28,870
I'm using in another presentation this

1534
01:18:24,520 --> 01:18:31,810
week of two to two feet with sneakers on

1535
01:18:28,870 --> 01:18:33,550
and the laces are tied together but you

1536
01:18:31,810 --> 01:18:35,500
know this is the oh we couldn't possibly

1537
01:18:33,550 --> 01:18:38,380
change our operating system kernel

1538
01:18:35,500 --> 01:18:40,480
because the the fire me if I walls don't

1539
01:18:38,380 --> 01:18:42,520
understand the protocols so we couldn't

1540
01:18:40,480 --> 01:18:44,440
possibly change our firewalls because

1541
01:18:42,520 --> 01:18:46,150
why would we do that since nobody's

1542
01:18:44,440 --> 01:18:48,940
implemented the new transfer protocols

1543
01:18:46,150 --> 01:18:50,410
lather rinse repeat for what 15 or 20

1544
01:18:48,940 --> 01:18:54,269
years

1545
01:18:50,410 --> 01:18:57,610
so we toured a working group called taps

1546
01:18:54,270 --> 01:18:59,260
to try to you know and so well like you

1547
01:18:57,610 --> 01:19:01,599
know we were to start chewing on this is

1548
01:18:59,260 --> 01:19:04,300
a number of levels one of them was well

1549
01:19:01,600 --> 01:19:05,830
you know get the stuff out of the kernel

1550
01:19:04,300 --> 01:19:09,250
space so you know now you're in user

1551
01:19:05,830 --> 01:19:11,890
land so so that was there was one thing

1552
01:19:09,250 --> 01:19:14,500
but but yeah you know the other thing

1553
01:19:11,890 --> 01:19:16,990
was well the applications you know they

1554
01:19:14,500 --> 01:19:19,450
could come up in a request sed PE but

1555
01:19:16,990 --> 01:19:21,790
they don't you know they come up and

1556
01:19:19,450 --> 01:19:24,450
request TCP and that's what they request

1557
01:19:21,790 --> 01:19:26,830
so that's what they get and that's why

1558
01:19:24,450 --> 01:19:29,590
nothing is interesting so that you know

1559
01:19:26,830 --> 01:19:31,540
the the the the the way we were treating

1560
01:19:29,590 --> 01:19:33,460
this problem at that point was to come

1561
01:19:31,540 --> 01:19:36,820
up and say you know what can we do to

1562
01:19:33,460 --> 01:19:39,780
absolutely your abstract transport so

1563
01:19:36,820 --> 01:19:42,910
that you say well you know I wrote this

1564
01:19:39,780 --> 01:19:44,019
with a certain set of transport

1565
01:19:42,910 --> 01:19:46,990
characteristics in mind

1566
01:19:44,020 --> 01:19:50,410
TCP fulfills them but that's not to say

1567
01:19:46,990 --> 01:19:52,420
that other protocols couldn't so that I

1568
01:19:50,410 --> 01:19:56,860
could write my application against that

1569
01:19:52,420 --> 01:19:58,960
abstraction and then good things will

1570
01:19:56,860 --> 01:20:00,670
happen when you're able to jack up the

1571
01:19:58,960 --> 01:20:02,290
protocol stack and run a new protocol

1572
01:20:00,670 --> 01:20:04,270
protocol Android

1573
01:20:02,290 --> 01:20:06,100
that the things will you know as you as

1574
01:20:04,270 --> 01:20:09,280
you guys showed with this and you know

1575
01:20:06,100 --> 01:20:11,380
they what he did with it turning SCTP on

1576
01:20:09,280 --> 01:20:13,450
and having that be preferred that is

1577
01:20:11,380 --> 01:20:15,190
what you know the transport community as

1578
01:20:13,450 --> 01:20:16,540
I understand it it's been hoping for it

1579
01:20:15,190 --> 01:20:19,599
for like 25 years

1580
01:20:16,540 --> 01:20:22,780
so the taps working group that we

1581
01:20:19,600 --> 01:20:24,520
chartered Aaron it's around here

1582
01:20:22,780 --> 01:20:28,330
someplace for three or four years ago

1583
01:20:24,520 --> 01:20:30,040
I'm trying to remember but that working

1584
01:20:28,330 --> 01:20:33,970
group in the IETF was chartered to come

1585
01:20:30,040 --> 01:20:36,550
up with kind of the descriptions of ways

1586
01:20:33,970 --> 01:20:38,890
that people use transport and how that

1587
01:20:36,550 --> 01:20:40,180
maps on to existing transport protocols

1588
01:20:38,890 --> 01:20:44,800
you know you're kind of working back

1589
01:20:40,180 --> 01:20:47,890
from that and this this work is closely

1590
01:20:44,800 --> 01:20:51,220
tied to the temps working group in the

1591
01:20:47,890 --> 01:20:56,290
IETF but like I say that this is a this

1592
01:20:51,220 --> 01:20:58,000
is a I think this is thrilling to me and

1593
01:20:56,290 --> 01:21:01,360
I'm not the most thrilled person about

1594
01:20:58,000 --> 01:21:05,100
it so really really they say a really

1595
01:21:01,360 --> 01:21:07,809
pleased to see where this is going

1596
01:21:05,100 --> 01:21:12,040
that said I got a couple questions for

1597
01:21:07,810 --> 01:21:15,160
you guys so I guess you know the the

1598
01:21:12,040 --> 01:21:16,660
biggest the biggest one for me was when

1599
01:21:15,160 --> 01:21:19,180
I was looking at the paper I was kind of

1600
01:21:16,660 --> 01:21:20,830
assuming that the policy manager was

1601
01:21:19,180 --> 01:21:24,100
going to be the most interesting and

1602
01:21:20,830 --> 01:21:26,650
novel part of this and the paper didn't

1603
01:21:24,100 --> 01:21:28,990
really discuss that the policy manager

1604
01:21:26,650 --> 01:21:30,820
much that I saw and I was curious if

1605
01:21:28,990 --> 01:21:33,610
what you all had been thinking about

1606
01:21:30,820 --> 01:21:35,880
that and and if you had any thoughts

1607
01:21:33,610 --> 01:21:40,900
that you were able to share about that

1608
01:21:35,880 --> 01:21:43,480
can you repeat the question yeah so okay

1609
01:21:40,900 --> 01:21:45,580
so the short form of the question is I

1610
01:21:43,480 --> 01:21:47,740
come up and I say I want I want

1611
01:21:45,580 --> 01:21:51,580
something it does this and this and this

1612
01:21:47,740 --> 01:21:54,099
and I have let's say in a happy world

1613
01:21:51,580 --> 01:21:54,840
six transport protocols that could do

1614
01:21:54,100 --> 01:21:57,670
that

1615
01:21:54,840 --> 01:22:00,010
how do you how does the policy manager

1616
01:21:57,670 --> 01:22:02,530
make that decision about like one of the

1617
01:22:00,010 --> 01:22:04,360
tries or what it tries first and and

1618
01:22:02,530 --> 01:22:06,009
those those kinds of things and I

1619
01:22:04,360 --> 01:22:07,809
recognize that this may not be something

1620
01:22:06,010 --> 01:22:09,790
that you were prepared to talk about now

1621
01:22:07,810 --> 01:22:11,050
because it wasn't really part of the

1622
01:22:09,790 --> 01:22:13,090
paper and stuff like that and that would

1623
01:22:11,050 --> 01:22:15,720
be that would be a fine answer but they

1624
01:22:13,090 --> 01:22:15,720
say I'm just curious

1625
01:22:16,169 --> 01:22:23,409
there are several ways to specify which

1626
01:22:19,559 --> 01:22:27,699
network protocol or which appliqu which

1627
01:22:23,409 --> 01:22:30,219
traffic you prefer for example you can

1628
01:22:27,699 --> 01:22:32,499
be very precise saying okay I only want

1629
01:22:30,219 --> 01:22:36,400
to allow TCP and SCTP which we did in

1630
01:22:32,499 --> 01:22:40,329
this demo and you can add preference so

1631
01:22:36,400 --> 01:22:41,079
you say ok I prefer a CDP but if setp is

1632
01:22:40,329 --> 01:22:44,709
not available

1633
01:22:41,079 --> 01:22:47,860
try TCP so and this is very specific way

1634
01:22:44,709 --> 01:22:49,630
and which otherwise you can say ok the

1635
01:22:47,860 --> 01:22:52,869
policy manager I want to create a

1636
01:22:49,630 --> 01:22:56,499
connection to Spencer and I want to be

1637
01:22:52,869 --> 01:23:00,280
message oriented then the policy manager

1638
01:22:56,499 --> 01:23:03,010
has these policies trying to build yeah

1639
01:23:00,280 --> 01:23:08,079
to choose some suitable protocols and

1640
01:23:03,010 --> 01:23:12,459
the policy manager also remembers well

1641
01:23:08,079 --> 01:23:14,829
ok so we we have a history yes so we we

1642
01:23:12,459 --> 01:23:17,380
have who can make a clue saying ok last

1643
01:23:14,829 --> 01:23:21,130
time or last ten times we talk to

1644
01:23:17,380 --> 01:23:24,249
Spencer we use TCP and SCDP was not

1645
01:23:21,130 --> 01:23:27,669
available and all for example ipv6 was

1646
01:23:24,249 --> 01:23:29,949
not available only TCP / IP v4 and this

1647
01:23:27,669 --> 01:23:31,659
is how the policy manager works need it

1648
01:23:29,949 --> 01:23:33,999
is possible to run it without the policy

1649
01:23:31,659 --> 01:23:37,268
manager also so if you don't want to run

1650
01:23:33,999 --> 01:23:39,519
the policy manager just leave it and run

1651
01:23:37,269 --> 01:23:41,559
it without it is possible but the policy

1652
01:23:39,519 --> 01:23:45,010
manager gives you huge benefit yeah yeah

1653
01:23:41,559 --> 01:23:46,389
like I said I don't think that that's a

1654
01:23:45,010 --> 01:23:49,630
solve problem that you guys are just

1655
01:23:46,389 --> 01:23:51,849
doing a demo on so I'm very interested

1656
01:23:49,630 --> 01:23:54,519
in kind of catching up with you on where

1657
01:23:51,849 --> 01:23:59,139
you are now and and very interested in

1658
01:23:54,519 --> 01:24:01,209
their work in the future so mr. Kouri do

1659
01:23:59,139 --> 01:24:06,099
you have a thought so gory as a

1660
01:24:01,209 --> 01:24:07,688
contributor to people here and another

1661
01:24:06,099 --> 01:24:10,719
thing about policy measure which were

1662
01:24:07,689 --> 01:24:12,880
working on the hackathon now is feeding

1663
01:24:10,719 --> 01:24:14,260
other sources into the policy might just

1664
01:24:12,880 --> 01:24:15,999
so that instead of just be able to use a

1665
01:24:14,260 --> 01:24:17,889
transport you can say I want high

1666
01:24:15,999 --> 01:24:20,438
throughput and then you maybe get

1667
01:24:17,889 --> 01:24:21,880
signaling from working interior for

1668
01:24:20,439 --> 01:24:24,669
provisioning domains and discover that

1669
01:24:21,880 --> 01:24:26,469
one particular interface supports high

1670
01:24:24,669 --> 01:24:27,729
throughput and then you can try and work

1671
01:24:26,469 --> 01:24:29,469
out with your history information which

1672
01:24:27,729 --> 01:24:32,650
transport protocols work

1673
01:24:29,469 --> 01:24:34,330
does that interface actually support the

1674
01:24:32,650 --> 01:24:36,339
transport protocol you want to use and

1675
01:24:34,330 --> 01:24:38,800
the space becomes a little bit wider

1676
01:24:36,340 --> 01:24:41,680
than we previously had the API is much

1677
01:24:38,800 --> 01:24:44,350
much higher a lot of this is kind of in

1678
01:24:41,680 --> 01:24:45,910
the future once we built a system that

1679
01:24:44,350 --> 01:24:47,980
can be flexibly enough to do this we can

1680
01:24:45,910 --> 01:24:49,360
inject information into it and I think

1681
01:24:47,980 --> 01:24:51,580
this is the way to solve things like

1682
01:24:49,360 --> 01:24:53,259
path MTU discovery of the huge meta

1683
01:24:51,580 --> 01:24:55,600
heterogeneity we see around the network

1684
01:24:53,260 --> 01:24:57,969
how we do it well maybe there's multiple

1685
01:24:55,600 --> 01:25:00,280
ways I just thought how it kind of odd

1686
01:24:57,969 --> 01:25:03,430
that all did I mention that's kind of I

1687
01:25:00,280 --> 01:25:05,920
think useful yeah I got you know started

1688
01:25:03,430 --> 01:25:08,020
speaking only for myself for whatever

1689
01:25:05,920 --> 01:25:10,449
that me whatever that matter means right

1690
01:25:08,020 --> 01:25:13,090
now that's speaking only for myself you

1691
01:25:10,449 --> 01:25:14,559
know it's like I think you know this is

1692
01:25:13,090 --> 01:25:17,920
beautiful what we're looking at now is

1693
01:25:14,560 --> 01:25:20,980
beautiful and oh let's say multipath is

1694
01:25:17,920 --> 01:25:23,440
beautiful and so when you take this and

1695
01:25:20,980 --> 01:25:25,440
multipath and I'm trying to like I say

1696
01:25:23,440 --> 01:25:27,820
I'm trying to understand how that works

1697
01:25:25,440 --> 01:25:31,239
when you start when you start having

1698
01:25:27,820 --> 01:25:34,090
more than in equals two of the different

1699
01:25:31,239 --> 01:25:37,360
ways to that you could get someplace

1700
01:25:34,090 --> 01:25:39,100
that might work and might have different

1701
01:25:37,360 --> 01:25:41,920
characteristics and stuff like that you

1702
01:25:39,100 --> 01:25:45,040
know if n was six at each one of these

1703
01:25:41,920 --> 01:25:47,530
levels with is that so is that a good

1704
01:25:45,040 --> 01:25:50,769
thing or a bad thing so but think yeah

1705
01:25:47,530 --> 01:25:53,800
but thank you okay I can mention that on

1706
01:25:50,770 --> 01:25:56,020
the ICC RG meeting on Monday I will

1707
01:25:53,800 --> 01:26:00,239
present some more that contains some

1708
01:25:56,020 --> 01:26:00,239
information on the policy system

1709
01:26:00,630 --> 01:26:07,719
excellent excellent thank you just a

1710
01:26:06,219 --> 01:26:09,460
quick follow-up on correspond so this is

1711
01:26:07,719 --> 01:26:11,800
a kind of policy spider that you're then

1712
01:26:09,460 --> 01:26:15,880
taking in multiple things from a trapeze

1713
01:26:11,800 --> 01:26:17,949
but my question was actually so this

1714
01:26:15,880 --> 01:26:20,469
with the memory and so forth is all good

1715
01:26:17,949 --> 01:26:22,419
these are right now fixed nodes that are

1716
01:26:20,469 --> 01:26:23,980
connected by Ethernet to some networks

1717
01:26:22,420 --> 01:26:25,390
obviously whatever you are doing is

1718
01:26:23,980 --> 01:26:27,820
going to change rapidly the moment you

1719
01:26:25,390 --> 01:26:30,850
have mobile nodes that are seeing new

1720
01:26:27,820 --> 01:26:32,199
areas widely different networking

1721
01:26:30,850 --> 01:26:33,640
environments

1722
01:26:32,199 --> 01:26:35,769
depending on where they are whom they

1723
01:26:33,640 --> 01:26:39,219
connect to else is connected and so

1724
01:26:35,770 --> 01:26:41,380
forth so any I don't know if any work

1725
01:26:39,219 --> 01:26:43,710
any works along those lines in the

1726
01:26:41,380 --> 01:26:43,710
making

1727
01:26:45,050 --> 01:26:53,599
just just to get out so maybe you can

1728
01:26:49,590 --> 01:26:53,599
bring up the picture of the architecture

1729
01:26:53,659 --> 01:27:01,888
to say a bit more say bit more about how

1730
01:26:56,789 --> 01:27:03,749
the policy system works so you have the

1731
01:27:01,889 --> 01:27:06,629
the policy manager so when the

1732
01:27:03,749 --> 01:27:08,820
application makes its request it goes

1733
01:27:06,629 --> 01:27:12,119
into the policy manager that first makes

1734
01:27:08,820 --> 01:27:14,459
a translation from some high-level if I

1735
01:27:12,119 --> 01:27:16,499
ask for low latency for instance you

1736
01:27:14,459 --> 01:27:18,719
have some you have a policy information

1737
01:27:16,499 --> 01:27:21,599
base that can map this to what it means

1738
01:27:18,719 --> 01:27:23,610
in terms of protocols then there is a

1739
01:27:21,599 --> 01:27:25,559
characteristics information base and

1740
01:27:23,610 --> 01:27:28,499
this is the port that has the dynamic

1741
01:27:25,559 --> 01:27:30,239
information about the network so this is

1742
01:27:28,499 --> 01:27:33,179
what mentioned Gori also mentioned can

1743
01:27:30,239 --> 01:27:35,098
be populated by different sources so in

1744
01:27:33,179 --> 01:27:36,510
pairs example for instance for them for

1745
01:27:35,099 --> 01:27:40,199
the mobile network it will have

1746
01:27:36,510 --> 01:27:42,260
information gathered from the modems of

1747
01:27:40,199 --> 01:27:45,089
the mobile network on the current

1748
01:27:42,260 --> 01:27:46,769
connection technology and measurements

1749
01:27:45,090 --> 01:27:49,499
that you have so this you can feed by

1750
01:27:46,769 --> 01:27:52,309
different sources so the policy manager

1751
01:27:49,499 --> 01:27:55,139
can also use that information to select

1752
01:27:52,309 --> 01:27:58,169
and rank the different transport options

1753
01:27:55,139 --> 01:28:00,780
and then it creates a list or transport

1754
01:27:58,169 --> 01:28:03,570
protocols with kind of a way to reach

1755
01:28:00,780 --> 01:28:05,759
one or a preference and that is what is

1756
01:28:03,570 --> 01:28:07,860
sent into the happy eyeballs module and

1757
01:28:05,760 --> 01:28:11,280
happy eyeballs is then the mechanism

1758
01:28:07,860 --> 01:28:15,239
that will try these protocols with some

1759
01:28:11,280 --> 01:28:16,679
time lag on them depending on on the

1760
01:28:15,239 --> 01:28:19,499
ranking values that they have received

1761
01:28:16,679 --> 01:28:22,610
from the policy system and as part of

1762
01:28:19,499 --> 01:28:24,719
the happy eyeballs module when you get

1763
01:28:22,610 --> 01:28:26,249
knowledge about if this connection

1764
01:28:24,719 --> 01:28:28,709
worked or not that as Felix was

1765
01:28:26,249 --> 01:28:30,300
mentioning then this is also cached back

1766
01:28:28,709 --> 01:28:32,610
into one component of the

1767
01:28:30,300 --> 01:28:34,349
characteristics information base so the

1768
01:28:32,610 --> 01:28:37,139
happy eyeballs is is one of the sources

1769
01:28:34,349 --> 01:28:39,050
for the zip but other sources can also

1770
01:28:37,139 --> 01:28:42,239
populate that with the dynamic

1771
01:28:39,050 --> 01:28:45,300
information so I think we will also talk

1772
01:28:42,239 --> 01:28:47,699
about these issues in the tab session in

1773
01:28:45,300 --> 01:28:50,879
in the coming excellent excellent

1774
01:28:47,699 --> 01:28:52,919
I you know just like I said just for me

1775
01:28:50,879 --> 01:28:54,470
if I'm remembering correctly I think

1776
01:28:52,919 --> 01:28:56,360
taps was the first

1777
01:28:54,470 --> 01:29:00,170
working group I chartered as a new ID

1778
01:28:56,360 --> 01:29:01,740
and so I'm really thrilled that it would

1779
01:29:00,170 --> 01:29:03,310
turn out to be the right thing to do

1780
01:29:01,740 --> 01:29:05,240
[Music]

1781
01:29:03,310 --> 01:29:07,070
there are a lot of things that they DS

1782
01:29:05,240 --> 01:29:08,450
make decisions that ladies make that you

1783
01:29:07,070 --> 01:29:09,559
know you don't know you don't ever know

1784
01:29:08,450 --> 01:29:12,050
if it was the right thing to do or not

1785
01:29:09,560 --> 01:29:14,240
but you know if this one's looking

1786
01:29:12,050 --> 01:29:17,830
better as we go so thank you all very

1787
01:29:14,240 --> 01:29:22,460
much for that - anything else that we

1788
01:29:17,830 --> 01:29:24,530
needed to talk about in here in that

1789
01:29:22,460 --> 01:29:35,210
case I will hand the microphone back to

1790
01:29:24,530 --> 01:29:36,800
York so we are in the in the luxurious

1791
01:29:35,210 --> 01:29:38,720
position of it that the talks usually

1792
01:29:36,800 --> 01:29:40,670
run shorter rather than longer so that

1793
01:29:38,720 --> 01:29:43,730
we have again 15 minutes extra break

1794
01:29:40,670 --> 01:29:47,600
time for talking to each other which is

1795
01:29:43,730 --> 01:29:49,280
not bad it is so unusual for transport

1796
01:29:47,600 --> 01:29:53,380
people do not talk too much don't you

1797
01:29:49,280 --> 01:29:53,380
say it's unusual for academics to

1798
01:29:54,460 --> 01:30:01,760
diagram intersection I think we're doing

1799
01:29:57,530 --> 01:30:03,950
so we have some set up tables behind you

1800
01:30:01,760 --> 01:30:05,630
and then there is across the hallway

1801
01:30:03,950 --> 01:30:07,099
slightly to the right a room where is

1802
01:30:05,630 --> 01:30:08,630
there where there will be waiting a hot

1803
01:30:07,100 --> 01:30:11,150
lunch buffet I hope it will be waiting

1804
01:30:08,630 --> 01:30:12,950
right now we already EE for one but

1805
01:30:11,150 --> 01:30:14,480
usually people are setting up early so

1806
01:30:12,950 --> 01:30:17,179
you can stay around here you don't have

1807
01:30:14,480 --> 01:30:19,370
to get lost in the hotel maze and just

1808
01:30:17,180 --> 01:30:21,560
have lunch around here we'll reconvene

1809
01:30:19,370 --> 01:30:25,599
at 2 o'clock but then it's for the third

1810
01:30:21,560 --> 01:30:25,600
session enjoy thank you

