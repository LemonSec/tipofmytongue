1
00:04:06,930 --> 00:04:15,629
and next is that there is going to be a

2
00:04:13,469 --> 00:04:18,089
good bit of photography during the set

3
00:04:15,629 --> 00:04:20,639
this session because of the prizes and

4
00:04:18,089 --> 00:04:22,289
if you have a concern to not be

5
00:04:20,639 --> 00:04:24,660
photographed we have a policy that you

6
00:04:22,289 --> 00:04:27,930
can inform the photographer please don't

7
00:04:24,660 --> 00:04:29,310
include me in a photograph so that's one

8
00:04:27,930 --> 00:04:32,789
of the things that I wanted to also

9
00:04:29,310 --> 00:04:40,169
mention here okay

10
00:04:32,789 --> 00:04:41,610
so that's all the policy and I'm going

11
00:04:40,169 --> 00:04:45,419
to give a little bit more extended

12
00:04:41,610 --> 00:04:47,250
update because with the long panel and

13
00:04:45,419 --> 00:04:50,430
so on I volunteered not to give an

14
00:04:47,250 --> 00:04:52,199
update during the plenary last night in

15
00:04:50,430 --> 00:04:54,810
case you were wondering it's not that we

16
00:04:52,199 --> 00:04:56,610
don't exist or that we were dissolute

17
00:04:54,810 --> 00:05:01,800
it's that we actually tried to give some

18
00:04:56,610 --> 00:05:03,660
time back and there we can have a little

19
00:05:01,800 --> 00:05:06,360
open mic session if you have some

20
00:05:03,660 --> 00:05:10,440
questions about the IRT F as well before

21
00:05:06,360 --> 00:05:13,830
we start the prizes and then at the end

22
00:05:10,440 --> 00:05:17,219
one of the discussion topics at the

23
00:05:13,830 --> 00:05:20,039
current ITF is the idea of having some

24
00:05:17,220 --> 00:05:21,960
sort of lightning talk session that

25
00:05:20,039 --> 00:05:25,289
would be like the kinds of lightning

26
00:05:21,960 --> 00:05:27,090
talks or these sometimes with other

27
00:05:25,289 --> 00:05:29,580
names that that take place at research

28
00:05:27,090 --> 00:05:31,948
meetings and it would be actually IETF

29
00:05:29,580 --> 00:05:34,800
and IR TF lightning talks mixed up

30
00:05:31,949 --> 00:05:37,169
together possibly in an evening if we

31
00:05:34,800 --> 00:05:38,520
don't get bits and bytes back so be

32
00:05:37,169 --> 00:05:41,130
thinking about that you can always

33
00:05:38,520 --> 00:05:43,380
comment on that in the ITF discuss list

34
00:05:41,130 --> 00:05:48,750
but we are interested in your opinion on

35
00:05:43,380 --> 00:05:50,460
that topic I'll introduce the a and RP

36
00:05:48,750 --> 00:05:52,139
speakers when we get to them but we have

37
00:05:50,460 --> 00:05:57,229
very good speakers this is the last of

38
00:05:52,139 --> 00:06:00,210
the 2017 awardees this time okay so in

39
00:05:57,229 --> 00:06:01,500
overview as you as you know because

40
00:06:00,210 --> 00:06:06,330
you're here

41
00:06:01,500 --> 00:06:10,289
the IRT every focuses on the kinds of

42
00:06:06,330 --> 00:06:12,719
tests that are not standards engineering

43
00:06:10,289 --> 00:06:15,570
basically but that seem important to the

44
00:06:12,720 --> 00:06:18,450
IETF and to the Internet community to be

45
00:06:15,570 --> 00:06:20,370
tackled by people we tend to work on

46
00:06:18,450 --> 00:06:20,729
Applied Research we wouldn't were not

47
00:06:20,370 --> 00:06:22,289
sold

48
00:06:20,729 --> 00:06:25,110
likely to have a theoretical program

49
00:06:22,289 --> 00:06:28,289
here although I suppose we could

50
00:06:25,110 --> 00:06:29,729
we're organized into para a parallel to

51
00:06:28,289 --> 00:06:32,188
the working groups called research

52
00:06:29,729 --> 00:06:34,289
groups as you know and there is an

53
00:06:32,189 --> 00:06:36,870
internet research steering group which

54
00:06:34,289 --> 00:06:38,430
is all of the research group chairs and

55
00:06:36,870 --> 00:06:41,129
some at-large members and I'll introduce

56
00:06:38,430 --> 00:06:44,279
them but that's the basic picture of the

57
00:06:41,129 --> 00:06:46,729
IRT F and it's been around as long as

58
00:06:44,279 --> 00:06:49,979
the IETF has been around with different

59
00:06:46,729 --> 00:06:52,680
organizational relationships our current

60
00:06:49,979 --> 00:06:57,149
relationship is a close tie to the IAB

61
00:06:52,680 --> 00:06:58,740
actually so I thought people might be

62
00:06:57,149 --> 00:07:01,409
curious about some of the differences

63
00:06:58,740 --> 00:07:03,120
because many of you go to our Gees but

64
00:07:01,409 --> 00:07:05,839
may not have really thought about the

65
00:07:03,120 --> 00:07:08,699
way in our G is organized differently

66
00:07:05,839 --> 00:07:11,039
the most important thing is that where

67
00:07:08,699 --> 00:07:13,409
we have freedom to be very creative in

68
00:07:11,039 --> 00:07:15,349
how the work is done so the goal is to

69
00:07:13,409 --> 00:07:17,129
have extremely impactful work

70
00:07:15,349 --> 00:07:19,139
potentially work that will eventually

71
00:07:17,129 --> 00:07:21,960
solve a hard problem that we'd like a

72
00:07:19,139 --> 00:07:24,860
standard for or solve a hard problem

73
00:07:21,960 --> 00:07:27,599
that standards folks need help with but

74
00:07:24,860 --> 00:07:31,379
there's no requirement to have a strict

75
00:07:27,599 --> 00:07:33,360
process so we could the groups can meet

76
00:07:31,379 --> 00:07:35,669
they happen to meet at ITF quite a lot

77
00:07:33,360 --> 00:07:40,099
but they can have meetings co-located

78
00:07:35,669 --> 00:07:43,549
with other other organizations they can

79
00:07:40,099 --> 00:07:46,020
have the lengths of meetings they need

80
00:07:43,550 --> 00:07:48,870
we have had in the past had closed

81
00:07:46,020 --> 00:07:50,459
research groups we have none now I would

82
00:07:48,870 --> 00:07:52,349
have to think really hard before we

83
00:07:50,459 --> 00:07:55,199
would charter a closed research group

84
00:07:52,349 --> 00:07:57,569
but sin and since all the research

85
00:07:55,199 --> 00:08:00,120
groups are open the one caveat about

86
00:07:57,569 --> 00:08:02,159
meeting anywhere wherever is that

87
00:08:00,120 --> 00:08:04,139
they're held to the same process as the

88
00:08:02,159 --> 00:08:06,089
ITF of announcing where those meetings

89
00:08:04,139 --> 00:08:09,389
will be with enough time for people to

90
00:08:06,089 --> 00:08:13,050
participate if they want to similarly

91
00:08:09,389 --> 00:08:15,389
the output of of working groups is RFC's

92
00:08:13,050 --> 00:08:17,069
but the out group or the working groups

93
00:08:15,389 --> 00:08:19,589
does not a research group does not have

94
00:08:17,069 --> 00:08:21,749
to be RFC's it could just be code it

95
00:08:19,589 --> 00:08:25,020
could be a hackathon it could be a

96
00:08:21,749 --> 00:08:28,259
series of publications in a journal it

97
00:08:25,020 --> 00:08:30,568
could be an agenda that's used for for

98
00:08:28,259 --> 00:08:33,390
another body you know for a scholarly

99
00:08:30,569 --> 00:08:34,510
body it could be a project of other

100
00:08:33,390 --> 00:08:37,659
sorts and all of that

101
00:08:34,510 --> 00:08:39,460
is cool so if you come to a research

102
00:08:37,659 --> 00:08:41,380
group meeting and they look like they're

103
00:08:39,460 --> 00:08:44,140
doing kind of ITF process they don't

104
00:08:41,380 --> 00:08:46,030
have to be and feel free to suggest if

105
00:08:44,140 --> 00:08:48,670
you have a good idea for how to pursue

106
00:08:46,030 --> 00:08:51,880
their mission well some other methods

107
00:08:48,670 --> 00:08:54,790
we're very cool with experimenting being

108
00:08:51,880 --> 00:08:56,830
creative we want to get a great mix of

109
00:08:54,790 --> 00:08:58,780
people and a great mix of activity and

110
00:08:56,830 --> 00:09:03,010
we don't need to be bound by publishing

111
00:08:58,780 --> 00:09:05,050
RFC's and then definitively research

112
00:09:03,010 --> 00:09:08,920
groups do not produce standards track

113
00:09:05,050 --> 00:09:10,900
documents so that is one of the

114
00:09:08,920 --> 00:09:12,520
agreements that we have that we are

115
00:09:10,900 --> 00:09:17,890
parallel body that does not produce

116
00:09:12,520 --> 00:09:19,750
standards some groups aim to to do their

117
00:09:17,890 --> 00:09:22,510
work well enough to solve some hard

118
00:09:19,750 --> 00:09:25,750
problems and then transition to creating

119
00:09:22,510 --> 00:09:28,770
a working group most recently disruption

120
00:09:25,750 --> 00:09:31,210
tolerant networking has done that and

121
00:09:28,770 --> 00:09:32,740
this is this is certainly one of the

122
00:09:31,210 --> 00:09:35,020
modes that we like but we would not be

123
00:09:32,740 --> 00:09:37,560
publishing standards track we would be

124
00:09:35,020 --> 00:09:40,510
publishing informational experimental or

125
00:09:37,560 --> 00:09:43,180
open source or whatever up to the time

126
00:09:40,510 --> 00:09:45,550
that there's a transition to IETF and

127
00:09:43,180 --> 00:09:48,969
then the other thing is that some groups

128
00:09:45,550 --> 00:09:52,060
do perform roles there are of service to

129
00:09:48,970 --> 00:09:54,190
the standards track so one of the key

130
00:09:52,060 --> 00:09:57,310
examples of that is that the cipher G

131
00:09:54,190 --> 00:09:59,200
produces does crypto reviews that are

132
00:09:57,310 --> 00:10:01,719
sometimes extremely important and

133
00:09:59,200 --> 00:10:06,490
normatively required for documents in

134
00:10:01,720 --> 00:10:10,090
the ITF and that is done with with very

135
00:10:06,490 --> 00:10:15,910
close ad sponsorship so that is another

136
00:10:10,090 --> 00:10:17,530
model and if anyone has a question as

137
00:10:15,910 --> 00:10:24,730
we're going along I'm also happy to

138
00:10:17,530 --> 00:10:27,100
answer questions okay so it would be

139
00:10:24,730 --> 00:10:29,500
nice for people to get as an to get very

140
00:10:27,100 --> 00:10:31,690
involved we're very open we have a

141
00:10:29,500 --> 00:10:33,370
discussed list that's quiet and an

142
00:10:31,690 --> 00:10:35,140
announced list the analysis is very

143
00:10:33,370 --> 00:10:38,010
quiet you can subscribe to it and just

144
00:10:35,140 --> 00:10:41,050
get information about new groups and

145
00:10:38,010 --> 00:10:43,319
reviews of new charters and and the

146
00:10:41,050 --> 00:10:43,319
prizes

147
00:10:45,320 --> 00:10:52,000
the research mailing lists and all the

148
00:10:48,949 --> 00:10:55,069
wiki links can be found on IRT F dot org

149
00:10:52,000 --> 00:10:58,160
and we are restructuring that page

150
00:10:55,070 --> 00:11:01,790
you'll see some changes my email

151
00:10:58,160 --> 00:11:05,870
officially I RTF chair IR s G is

152
00:11:01,790 --> 00:11:07,610
available I didn't get enough time to

153
00:11:05,870 --> 00:11:09,380
put in the picture where the cats are

154
00:11:07,610 --> 00:11:11,509
not just looking at the TV they're

155
00:11:09,380 --> 00:11:13,430
actually typing because that's actually

156
00:11:11,509 --> 00:11:15,670
what we're looking for but you can start

157
00:11:13,430 --> 00:11:19,250
out by reading the way they are

158
00:11:15,670 --> 00:11:21,349
those are my cats they're they're

159
00:11:19,250 --> 00:11:27,139
at-large members of the IRS G in the

160
00:11:21,350 --> 00:11:28,699
spirit yeah Oh somebody me out this is

161
00:11:27,139 --> 00:11:32,829
where the picture of the Taiping cats

162
00:11:28,699 --> 00:11:35,300
will be later so how do you how do

163
00:11:32,829 --> 00:11:36,829
research groups originate you may wonder

164
00:11:35,300 --> 00:11:38,449
about that too

165
00:11:36,829 --> 00:11:41,750
and some of them have been around a long

166
00:11:38,449 --> 00:11:44,569
time so their origins are lost in time

167
00:11:41,750 --> 00:11:47,509
perhaps I'm going to start requiring

168
00:11:44,569 --> 00:11:49,040
research group chairs to know who all

169
00:11:47,509 --> 00:11:51,560
where the chair is going back to the

170
00:11:49,040 --> 00:11:53,990
beginning because we some groups have

171
00:11:51,560 --> 00:11:56,750
really different feelings and structures

172
00:11:53,990 --> 00:11:59,089
now but but it would be good for them to

173
00:11:56,750 --> 00:12:02,930
actually have a sense of their past as

174
00:11:59,089 --> 00:12:04,100
well as their future but the main thing

175
00:12:02,930 --> 00:12:06,979
about research groups is that they

176
00:12:04,100 --> 00:12:09,470
originate more more freely than the ITF

177
00:12:06,980 --> 00:12:11,870
groups do we are very interested in

178
00:12:09,470 --> 00:12:13,430
making sure we don't block something new

179
00:12:11,870 --> 00:12:15,589
that could be important that probably

180
00:12:13,430 --> 00:12:21,380
don't appreciate it if I we I mean me

181
00:12:15,589 --> 00:12:23,480
and the IRS G but it also you so so it

182
00:12:21,380 --> 00:12:25,189
turns out that you can propose a group

183
00:12:23,480 --> 00:12:27,199
and with some tweaking to make sure that

184
00:12:25,190 --> 00:12:29,870
it has a sensible Charter and that the

185
00:12:27,199 --> 00:12:32,329
that it has a mission and it has some

186
00:12:29,870 --> 00:12:35,240
you know vision of what it should be

187
00:12:32,329 --> 00:12:37,609
doing it can run for three meetings in a

188
00:12:35,240 --> 00:12:40,939
datas a proposed research group before

189
00:12:37,610 --> 00:12:44,600
being considered for for a more

190
00:12:40,939 --> 00:12:49,579
long-term gig and we have two of those

191
00:12:44,600 --> 00:12:51,290
right now so the and the way that we do

192
00:12:49,579 --> 00:12:54,589
the evaluation is they get to three

193
00:12:51,290 --> 00:12:56,660
meetings and then the chair has a kind

194
00:12:54,589 --> 00:12:58,699
of review with the with the with the

195
00:12:56,660 --> 00:12:59,010
chairs of those groups to talk about how

196
00:12:58,699 --> 00:13:03,000
things

197
00:12:59,010 --> 00:13:05,910
of gone but also we will start to have

198
00:13:03,000 --> 00:13:08,430
some more some more requests for a

199
00:13:05,910 --> 00:13:12,540
review by the community and by the IRS J

200
00:13:08,430 --> 00:13:14,910
there so here's the set every of

201
00:13:12,540 --> 00:13:17,880
research groups and I'm happy to tell

202
00:13:14,910 --> 00:13:21,630
you that last meeting everybody met this

203
00:13:17,880 --> 00:13:24,420
meeting everybody but the decentralized

204
00:13:21,630 --> 00:13:27,600
internet group met and they met

205
00:13:24,420 --> 00:13:29,670
informally so I they were actually not

206
00:13:27,600 --> 00:13:31,230
yet counting as having had one of their

207
00:13:29,670 --> 00:13:35,160
meetings but we won't we don't do that

208
00:13:31,230 --> 00:13:39,060
for too long and you can see what they

209
00:13:35,160 --> 00:13:42,180
are they have a wide range of topics I'm

210
00:13:39,060 --> 00:13:45,150
actually quite interested in soliciting

211
00:13:42,180 --> 00:13:46,589
a privacy research group and if you have

212
00:13:45,150 --> 00:13:47,910
an interest in that you should talk to

213
00:13:46,590 --> 00:13:50,760
me

214
00:13:47,910 --> 00:13:53,069
we still have human several of these

215
00:13:50,760 --> 00:13:56,040
groups still have to meet ahead of us

216
00:13:53,070 --> 00:13:58,080
and I don't have the schedule right in

217
00:13:56,040 --> 00:14:00,000
my head but if any of the chairs would

218
00:13:58,080 --> 00:14:02,700
like to pitch their working group at the

219
00:14:00,000 --> 00:14:05,970
mic for the rest of the meeting I beat

220
00:14:02,700 --> 00:14:07,890
you could you certainly can do that h h

221
00:14:05,970 --> 00:14:12,620
RPC every would you like to come up and

222
00:14:07,890 --> 00:14:15,270
say word their meeting Friday morning

223
00:14:12,620 --> 00:14:17,820
who else is still to me they apologize

224
00:14:15,270 --> 00:14:20,460
for not memorizing okay so pan RG maybe

225
00:14:17,820 --> 00:14:21,750
you'd like to mention pan proposed

226
00:14:20,460 --> 00:14:25,830
research group maybe you'd like to

227
00:14:21,750 --> 00:14:30,450
mention your your plans as well is there

228
00:14:25,830 --> 00:14:32,670
one more still to meet okay this is

229
00:14:30,450 --> 00:14:35,010
totally embarrassing but at the HRP C

230
00:14:32,670 --> 00:14:37,380
I'll be giving an analysis of treatment

231
00:14:35,010 --> 00:14:39,720
of law policy and politics in the

232
00:14:37,380 --> 00:14:41,610
history of the RFC's with a special

233
00:14:39,720 --> 00:14:42,930
emphasis on the first decade when there

234
00:14:41,610 --> 00:14:46,470
was a great deal of discussion about

235
00:14:42,930 --> 00:14:48,959
these issues and that and you want to

236
00:14:46,470 --> 00:14:50,160
say your name is Sandra Bremen yes so

237
00:14:48,960 --> 00:14:51,420
that should be a really great session

238
00:14:50,160 --> 00:14:53,699
and over you want to say a little more

239
00:14:51,420 --> 00:14:55,439
about HIPC I'm Avril Torre I'm one of

240
00:14:53,700 --> 00:14:57,450
the co-chairs the group that Sandra's

241
00:14:55,440 --> 00:14:59,580
gonna speak at so she already said the

242
00:14:57,450 --> 00:15:01,770
good stuff but you know another thing

243
00:14:59,580 --> 00:15:05,550
though about the group is we just got

244
00:15:01,770 --> 00:15:07,770
one RFC out and it's going to be time to

245
00:15:05,550 --> 00:15:09,750
sort of look at okay we've got some

246
00:15:07,770 --> 00:15:11,550
other things that are in the works but

247
00:15:09,750 --> 00:15:12,540
how do we continue so it's a great time

248
00:15:11,550 --> 00:15:15,930
to get involved

249
00:15:12,540 --> 00:15:16,819
in terms of how we continue okay good

250
00:15:15,930 --> 00:15:19,620
good

251
00:15:16,820 --> 00:15:21,990
Matt yeah Matt Ford I just had a

252
00:15:19,620 --> 00:15:22,980
question about the dinner gee I was kind

253
00:15:21,990 --> 00:15:24,840
of looking forward to going to their

254
00:15:22,980 --> 00:15:27,330
meeting on Monday morning it seems like

255
00:15:24,840 --> 00:15:30,990
it's been quite an active group while

256
00:15:27,330 --> 00:15:32,430
it's been meeting informally before can

257
00:15:30,990 --> 00:15:34,980
you say anything but why that that

258
00:15:32,430 --> 00:15:37,020
meeting was canceled because I I think I

259
00:15:34,980 --> 00:15:38,490
heard something about the presenters

260
00:15:37,020 --> 00:15:41,460
were a remote but that doesn't seem like

261
00:15:38,490 --> 00:15:42,960
a strong reason to cancel the meeting so

262
00:15:41,460 --> 00:15:44,070
Melinda do you want to say something

263
00:15:42,960 --> 00:15:51,150
about that we have one of the chairs

264
00:15:44,070 --> 00:15:53,190
here yeah we actually did did have a

265
00:15:51,150 --> 00:15:55,410
problem with attendance by people who

266
00:15:53,190 --> 00:15:57,330
were doing active work we're still

267
00:15:55,410 --> 00:15:59,610
serving in start-up mode and we just

268
00:15:57,330 --> 00:16:04,530
were having problems getting enough

269
00:15:59,610 --> 00:16:05,910
active participation so so so yeah we

270
00:16:04,530 --> 00:16:07,530
are going to be we're talking about

271
00:16:05,910 --> 00:16:09,270
doing an interim in conjunction with nd

272
00:16:07,530 --> 00:16:10,560
SS and of course we'll be meeting in

273
00:16:09,270 --> 00:16:13,170
London but we thought it was a better

274
00:16:10,560 --> 00:16:21,150
idea to not meet rather than have a bad

275
00:16:13,170 --> 00:16:26,520
meeting okay and um we have had very

276
00:16:21,150 --> 00:16:30,870
good meetings of the group so far and I

277
00:16:26,520 --> 00:16:33,540
will put out a report with my

278
00:16:30,870 --> 00:16:35,100
observations about the groups on the

279
00:16:33,540 --> 00:16:37,439
discuss list that's something that I

280
00:16:35,100 --> 00:16:40,230
need to gather by their cadence for um

281
00:16:37,440 --> 00:16:43,140
Brian was say something about the pan

282
00:16:40,230 --> 00:16:46,530
proposed research group as well path

283
00:16:43,140 --> 00:16:48,240
aware networking say we're gonna have

284
00:16:46,530 --> 00:16:50,240
our second meeting of the paths or

285
00:16:48,240 --> 00:16:52,890
networking Reaper post research group

286
00:16:50,240 --> 00:16:57,180
right after lunch actually I think we

287
00:16:52,890 --> 00:16:59,460
might be in here I'm not sure so the 30

288
00:16:57,180 --> 00:17:02,130
second elevator pitch is we're looking

289
00:16:59,460 --> 00:17:03,540
at it's it's kind of a it's kind of a

290
00:17:02,130 --> 00:17:06,329
fuzzy sort of architecture sort of thing

291
00:17:03,540 --> 00:17:10,319
it's like what what could we do in a

292
00:17:06,329 --> 00:17:12,569
world in which the end points have a

293
00:17:10,319 --> 00:17:14,730
more active participation this election

294
00:17:12,569 --> 00:17:16,950
that passeth or traffic takes and this

295
00:17:14,730 --> 00:17:18,240
came out of a an observation about a lot

296
00:17:16,950 --> 00:17:19,880
of sort of disconnected work that's

297
00:17:18,240 --> 00:17:22,050
happening in this space and the IETF

298
00:17:19,880 --> 00:17:25,370
sort of things like IV music segment

299
00:17:22,050 --> 00:17:27,349
routing things like pvd's

300
00:17:25,369 --> 00:17:29,570
multipath transport protocols work on

301
00:17:27,349 --> 00:17:31,100
these how all of these fit together

302
00:17:29,570 --> 00:17:33,649
and what can we do with this stuff so

303
00:17:31,100 --> 00:17:35,360
we're trying to figure out we're drawing

304
00:17:33,650 --> 00:17:36,520
a box around what it is we want to do

305
00:17:35,360 --> 00:17:38,510
and we're still trying to figure out

306
00:17:36,520 --> 00:17:40,730
about interest in the room in this

307
00:17:38,510 --> 00:17:42,260
community is this correct as an IRF

308
00:17:40,730 --> 00:17:43,220
research group is there are there other

309
00:17:42,260 --> 00:17:48,430
things that we should be doing in this

310
00:17:43,220 --> 00:17:51,800
space we're doing a partial review of

311
00:17:48,430 --> 00:17:53,330
sort of the whole story early in the

312
00:17:51,800 --> 00:17:56,210
group because we had an unfortunate

313
00:17:53,330 --> 00:17:58,159
conflict with the ideas Boff

314
00:17:56,210 --> 00:17:59,960
in Prague our first time saurons like

315
00:17:58,160 --> 00:18:01,130
okay for those of you who didn't come to

316
00:17:59,960 --> 00:18:05,420
the first meeting here's what we're

317
00:18:01,130 --> 00:18:08,240
trying to do and a few presentations

318
00:18:05,420 --> 00:18:09,770
where we're sort of diving deep on what

319
00:18:08,240 --> 00:18:13,040
we see is research into mechanisms for

320
00:18:09,770 --> 00:18:14,570
realizing path awareness in the Internet

321
00:18:13,040 --> 00:18:16,460
so some of these are things that people

322
00:18:14,570 --> 00:18:18,559
know about work that's been done in the

323
00:18:16,460 --> 00:18:20,929
IETF already such as Alto so getting

324
00:18:18,559 --> 00:18:22,399
path properties down to down to

325
00:18:20,929 --> 00:18:25,460
endpoints and some of this is sort of

326
00:18:22,400 --> 00:18:28,700
bluer sky stuff so please come by

327
00:18:25,460 --> 00:18:30,440
that'll be the other first afternoon

328
00:18:28,700 --> 00:18:33,679
slot Thanks

329
00:18:30,440 --> 00:18:35,690
thank you yes do go by to attend so I

330
00:18:33,679 --> 00:18:38,360
want to also say something since we have

331
00:18:35,690 --> 00:18:42,110
a good number of research groups I do

332
00:18:38,360 --> 00:18:44,719
participate in these scheduling rounds

333
00:18:42,110 --> 00:18:47,300
for the meeting it's difficult to

334
00:18:44,720 --> 00:18:50,780
completely deconflict anything at the

335
00:18:47,300 --> 00:18:53,000
ITF these days and we want to work on

336
00:18:50,780 --> 00:18:56,030
that one thing that I hope to do is move

337
00:18:53,000 --> 00:18:58,550
this slot into a lunchtime so that we

338
00:18:56,030 --> 00:19:01,428
can make sure that since we always have

339
00:18:58,550 --> 00:19:03,649
some a lot of interest in the in the

340
00:19:01,429 --> 00:19:05,210
prize when their presentations we

341
00:19:03,650 --> 00:19:08,540
actually have some ability to not

342
00:19:05,210 --> 00:19:10,730
conflict with people for that and in

343
00:19:08,540 --> 00:19:13,990
general I think we're just at the same

344
00:19:10,730 --> 00:19:18,850
mercy of of time like everybody else but

345
00:19:13,990 --> 00:19:23,480
the the groups cover you know span from

346
00:19:18,850 --> 00:19:25,699
there I don't want to call other things

347
00:19:23,480 --> 00:19:27,830
out too much but but there's lots going

348
00:19:25,700 --> 00:19:30,530
on we also have recently talked about

349
00:19:27,830 --> 00:19:32,360
having documents which are in two

350
00:19:30,530 --> 00:19:35,320
different groups because network coding

351
00:19:32,360 --> 00:19:37,669
and IC and RG have interesting

352
00:19:35,320 --> 00:19:39,678
interaction between

353
00:19:37,670 --> 00:19:41,150
between their work where they can

354
00:19:39,679 --> 00:19:44,179
support each other so we may have

355
00:19:41,150 --> 00:19:46,370
parallel work going on that is is really

356
00:19:44,179 --> 00:19:48,140
co-sponsored by two groups and we don't

357
00:19:46,370 --> 00:19:49,879
need to have it owned by one group we

358
00:19:48,140 --> 00:19:53,809
actually have the freedom to do that as

359
00:19:49,880 --> 00:19:57,850
well so if you have any questions about

360
00:19:53,809 --> 00:19:57,850
other things I'm happy to entertain them

361
00:19:58,600 --> 00:20:06,260
okay you could see the membership so the

362
00:20:02,240 --> 00:20:08,360
chairs are our members of the IRS G if

363
00:20:06,260 --> 00:20:09,740
you go if you write to the IRS G mailing

364
00:20:08,360 --> 00:20:12,020
list you'll get all these people and

365
00:20:09,740 --> 00:20:14,270
then we have some at-large members as

366
00:20:12,020 --> 00:20:16,730
well who especially helped to tie us

367
00:20:14,270 --> 00:20:18,790
back to for example the transport area

368
00:20:16,730 --> 00:20:21,830
spencer is one of our at large because

369
00:20:18,790 --> 00:20:28,070
transport and an IRC have a lot of

370
00:20:21,830 --> 00:20:30,168
relationship okay so people we're going

371
00:20:28,070 --> 00:20:32,480
to have the 2a and our P meetings and I

372
00:20:30,169 --> 00:20:35,650
thought I'd make sure that we know as a

373
00:20:32,480 --> 00:20:38,960
group while presentations what those are

374
00:20:35,650 --> 00:20:41,179
essentially it's a best paper prize for

375
00:20:38,960 --> 00:20:42,890
all possible published papers and

376
00:20:41,179 --> 00:20:45,140
applied networking and I like to say

377
00:20:42,890 --> 00:20:47,210
security too because we have an interest

378
00:20:45,140 --> 00:20:51,169
in security applied security topics and

379
00:20:47,210 --> 00:20:53,090
you'll see we have had a number lots so

380
00:20:51,169 --> 00:20:55,220
they are four previously published

381
00:20:53,090 --> 00:20:56,689
papers we're not very strict about the

382
00:20:55,220 --> 00:20:59,750
deadline but it should be the last

383
00:20:56,690 --> 00:21:02,059
couple of years and somebody numb or

384
00:20:59,750 --> 00:21:05,179
either nominates their own paper and

385
00:21:02,059 --> 00:21:07,370
themselves or a paper and a speaker and

386
00:21:05,179 --> 00:21:10,640
the speaker is specifically nominated in

387
00:21:07,370 --> 00:21:13,100
order to come and give a presentation we

388
00:21:10,640 --> 00:21:16,100
select six awardees for the year at the

389
00:21:13,100 --> 00:21:18,500
beginning before the year but we

390
00:21:16,100 --> 00:21:21,320
announced them two at a time and the

391
00:21:18,500 --> 00:21:23,990
prize winners receive some money which

392
00:21:21,320 --> 00:21:27,350
has gone up for next year and also a

393
00:21:23,990 --> 00:21:29,870
trip to speak here and we actually have

394
00:21:27,350 --> 00:21:31,668
the resources to offer if they request

395
00:21:29,870 --> 00:21:33,260
it to come back for a follow-up if

396
00:21:31,669 --> 00:21:35,330
they've made lots of good ties and would

397
00:21:33,260 --> 00:21:35,929
like to follow up and spend more time at

398
00:21:35,330 --> 00:21:40,520
the IETF

399
00:21:35,929 --> 00:21:43,160
and I RTF and the origin story is that

400
00:21:40,520 --> 00:21:45,110
Loras had a stroke of genius and created

401
00:21:43,160 --> 00:21:46,790
this and it's a very good way for us to

402
00:21:45,110 --> 00:21:50,090
connect I believe that's right Erin that

403
00:21:46,790 --> 00:21:51,559
was Lars and it was um it's a very good

404
00:21:50,090 --> 00:21:53,539
way for us to connect

405
00:21:51,559 --> 00:21:57,168
in the larger research community and the

406
00:21:53,539 --> 00:22:01,100
IRT F and bring people that are not

407
00:21:57,169 --> 00:22:03,919
always here to the to talk with us the

408
00:22:01,100 --> 00:22:06,860
Internet Society funds it primarily but

409
00:22:03,919 --> 00:22:08,480
there are some sponsors as well and you

410
00:22:06,860 --> 00:22:10,519
might be a sponsor if you think you

411
00:22:08,480 --> 00:22:11,960
could it's not a large amount but we

412
00:22:10,519 --> 00:22:15,049
certainly would love that you can talk

413
00:22:11,960 --> 00:22:17,299
to Isaac about that and thank you to

414
00:22:15,049 --> 00:22:19,480
Comcast for being a current sponsor as

415
00:22:17,299 --> 00:22:22,610
well as thank you to Isaac

416
00:22:19,480 --> 00:22:26,029
the process starts with a yearly call

417
00:22:22,610 --> 00:22:27,769
for papers I hope you all saw it because

418
00:22:26,029 --> 00:22:29,440
I tried we tried to get it everywhere

419
00:22:27,769 --> 00:22:33,139
and if we didn't we need to do better

420
00:22:29,440 --> 00:22:35,470
and it completed on November 5th we

421
00:22:33,139 --> 00:22:40,340
actually got our largest number ever

422
00:22:35,470 --> 00:22:43,220
almost 60 submissions and very good ones

423
00:22:40,340 --> 00:22:45,619
at to boot which in my estimation I'm

424
00:22:43,220 --> 00:22:47,690
not the only reviewer obviously we have

425
00:22:45,619 --> 00:22:51,590
a peer reviewing committee that is from

426
00:22:47,690 --> 00:22:53,749
academics and from industry and you can

427
00:22:51,590 --> 00:22:55,340
check on the link there if you want to

428
00:22:53,749 --> 00:22:57,679
see more about the call for papers

429
00:22:55,340 --> 00:23:00,259
original call who's on the program

430
00:22:57,679 --> 00:23:02,809
committee things like that and then

431
00:23:00,259 --> 00:23:04,639
before the end of the year we will be

432
00:23:02,809 --> 00:23:07,119
actually before the the middle of

433
00:23:04,639 --> 00:23:09,889
December we will be selecting all six

434
00:23:07,119 --> 00:23:12,110
and then start to announce the ones for

435
00:23:09,889 --> 00:23:13,820
2018 so that is how that actually

436
00:23:12,110 --> 00:23:15,860
happens that's where they come from

437
00:23:13,820 --> 00:23:19,220
that's where Roland and Paul came from

438
00:23:15,860 --> 00:23:21,559
from last year's group so there's also

439
00:23:19,220 --> 00:23:24,409
the confusion because we have to A&R

440
00:23:21,559 --> 00:23:26,240
things and people sometimes say but did

441
00:23:24,409 --> 00:23:28,009
you mean the W are the P whether the

442
00:23:26,240 --> 00:23:30,230
difference between those so it seemed

443
00:23:28,009 --> 00:23:33,259
reasonable to deconflict that for you

444
00:23:30,230 --> 00:23:37,639
today they both have an annual call a

445
00:23:33,259 --> 00:23:41,539
and RP calls for nominees a and our W

446
00:23:37,639 --> 00:23:43,248
calls for papers and our W gives a prize

447
00:23:41,539 --> 00:23:45,710
for an already published paper

448
00:23:43,249 --> 00:23:50,509
I'm sorry PC I'm doing it myself wrong

449
00:23:45,710 --> 00:23:53,860
and ANR W gathers new papers new

450
00:23:50,509 --> 00:23:56,960
submissions they're workshop submissions

451
00:23:53,860 --> 00:23:59,899
the prize those two presentations at

452
00:23:56,960 --> 00:24:01,970
each ITF the workshop does presentations

453
00:23:59,899 --> 00:24:05,389
at a workshop co-located with a summer

454
00:24:01,970 --> 00:24:07,219
ITF we've chosen the program chairs

455
00:24:05,389 --> 00:24:10,879
for the a and RW there's a steering

456
00:24:07,219 --> 00:24:16,279
committee for that including Lars and

457
00:24:10,879 --> 00:24:18,949
and Colin Perkins and myself and Sharon

458
00:24:16,279 --> 00:24:21,559
Goldberg who many of you know and Dave

459
00:24:18,950 --> 00:24:24,019
Chavez so you may not know are the the

460
00:24:21,559 --> 00:24:25,999
co-chairs of the PC and there will be

461
00:24:24,019 --> 00:24:29,149
more information soon about the rest of

462
00:24:25,999 --> 00:24:33,440
that okay so hopefully you're no longer

463
00:24:29,149 --> 00:24:37,758
confused and you might want to follow us

464
00:24:33,440 --> 00:24:39,679
at at in Retta fo which is our twitter

465
00:24:37,759 --> 00:24:43,519
handle and we also have a facebook page

466
00:24:39,679 --> 00:24:45,169
and you will notice that roland is in

467
00:24:43,519 --> 00:24:47,749
this picture because he has been that an

468
00:24:45,169 --> 00:24:49,039
awardee before but it was a great sort

469
00:24:47,749 --> 00:24:50,989
of triumphant picture to attract

470
00:24:49,039 --> 00:24:53,179
people's attention and i tribute to this

471
00:24:50,989 --> 00:24:55,999
picture the large increase in the

472
00:24:53,179 --> 00:24:57,769
submissions so thank you to the people

473
00:24:55,999 --> 00:25:01,309
in that picture and thank you too Olaf

474
00:24:57,769 --> 00:25:02,989
for taking such a good picture okay so

475
00:25:01,309 --> 00:25:06,320
if there are any other questions we're

476
00:25:02,989 --> 00:25:15,229
in a quick open mic for IRT f r or RG

477
00:25:06,320 --> 00:25:17,629
questions hi Falk so some of you may

478
00:25:15,229 --> 00:25:21,820
recognize me as the host of the Pecha

479
00:25:17,629 --> 00:25:24,889
Kucha which is actually tonight and I

480
00:25:21,820 --> 00:25:29,329
but I'm here because there's an idea

481
00:25:24,889 --> 00:25:31,820
under discussion to take the the

482
00:25:29,329 --> 00:25:33,079
lightning talk idea that has been for a

483
00:25:31,820 --> 00:25:35,779
Pecha Kucha has been kind of a fun thing

484
00:25:33,079 --> 00:25:39,889
and trying to actually make it available

485
00:25:35,779 --> 00:25:42,529
for people to present new ideas so more

486
00:25:39,889 --> 00:25:44,689
of a serious lightning talk session so

487
00:25:42,529 --> 00:25:46,159
I'm sort of at the center of a small

488
00:25:44,690 --> 00:25:49,309
group that's doing some brainstorming on

489
00:25:46,159 --> 00:25:51,079
this so just to be clear we're talking

490
00:25:49,309 --> 00:25:53,539
about doing a lightning talk session at

491
00:25:51,079 --> 00:25:54,678
the IETF sometime during the week that's

492
00:25:53,539 --> 00:25:58,399
not going to conflict with working

493
00:25:54,679 --> 00:26:00,739
groups or research groups and if you

494
00:25:58,399 --> 00:26:01,939
have ideas as or opinions as to whether

495
00:26:00,739 --> 00:26:04,940
you think that's a good idea or not

496
00:26:01,940 --> 00:26:07,909
or if it's something that you've got

497
00:26:04,940 --> 00:26:10,459
some ideas on people who might be

498
00:26:07,909 --> 00:26:13,219
interested in participating part of the

499
00:26:10,459 --> 00:26:15,559
goal of this is to do things like

500
00:26:13,219 --> 00:26:17,690
advertise barb offs advertise

501
00:26:15,559 --> 00:26:19,280
interesting research that's going on but

502
00:26:17,690 --> 00:26:22,070
you know this is sort of like a zero

503
00:26:19,280 --> 00:26:23,780
to to slide slots so it's intended to be

504
00:26:22,070 --> 00:26:27,139
very fast the kind of thing that they're

505
00:26:23,780 --> 00:26:29,540
doing in dispatch but to a broader and

506
00:26:27,140 --> 00:26:33,050
more general audience so I would love to

507
00:26:29,540 --> 00:26:34,550
see researchers come and throw up a

508
00:26:33,050 --> 00:26:35,840
couple of slides on stuff that they

509
00:26:34,550 --> 00:26:37,610
think that they're doing and so I think

510
00:26:35,840 --> 00:26:40,280
this is kind of a natural fit to the a

511
00:26:37,610 --> 00:26:41,750
and our PA and our W discussion and

512
00:26:40,280 --> 00:26:43,330
hopefully some stuff that will come out

513
00:26:41,750 --> 00:26:47,630
of this will lead to new research groups

514
00:26:43,330 --> 00:26:49,939
thank you yeah and so um Aaron and

515
00:26:47,630 --> 00:26:52,550
Aliyah are two of the key players there

516
00:26:49,940 --> 00:26:55,820
and the IRS G will take an interest in

517
00:26:52,550 --> 00:26:57,620
this as well so so definitely we're

518
00:26:55,820 --> 00:27:02,330
we're going we're supporting this idea

519
00:26:57,620 --> 00:27:07,070
we think it's a good one okay so I'm

520
00:27:02,330 --> 00:27:10,850
going to introduce our first an RP Prize

521
00:27:07,070 --> 00:27:12,470
winner although not I'll introduce you

522
00:27:10,850 --> 00:27:14,780
briefly because you introduce yourself

523
00:27:12,470 --> 00:27:16,790
and your slides as well but Paul

524
00:27:14,780 --> 00:27:20,870
Emmerich is from the Technische

525
00:27:16,790 --> 00:27:23,990
universität münchen in Germany and he's

526
00:27:20,870 --> 00:27:26,149
going to present Mugen which is a really

527
00:27:23,990 --> 00:27:32,180
interesting high speed packet generator

528
00:27:26,150 --> 00:27:35,950
and I will hand you the dongle now let's

529
00:27:32,180 --> 00:27:35,950
see you need just the

530
00:27:41,610 --> 00:27:45,439
and you'll have to stand in the pink box

531
00:27:54,270 --> 00:28:00,270
okay great let's please welcome Paul

532
00:28:00,500 --> 00:28:09,100
[Applause]

533
00:28:05,970 --> 00:28:13,660
okay yeah thank you for the introduction

534
00:28:09,100 --> 00:28:16,090
and yeah I'm here to talk about my

535
00:28:13,660 --> 00:28:18,340
package generate emulsion and I will

536
00:28:16,090 --> 00:28:21,610
just start with a rough introduction Who

537
00:28:18,340 --> 00:28:24,399
I am where I come from and then I will

538
00:28:21,610 --> 00:28:26,649
go over a few aspects of Mugen I I won't

539
00:28:24,400 --> 00:28:28,630
bore you with any details about the

540
00:28:26,650 --> 00:28:32,140
implementation or performance evaluation

541
00:28:28,630 --> 00:28:34,660
or how we built it I will instead just

542
00:28:32,140 --> 00:28:36,610
show a few key points and show an

543
00:28:34,660 --> 00:28:38,679
example about how you can use it because

544
00:28:36,610 --> 00:28:42,550
in the end this was about applied

545
00:28:38,679 --> 00:28:44,559
networking research which often somehow

546
00:28:42,550 --> 00:28:46,419
includes a packet generator and what I

547
00:28:44,559 --> 00:28:48,100
really want to show how to use it and

548
00:28:46,420 --> 00:28:49,929
how it's different from what you might

549
00:28:48,100 --> 00:28:51,520
be used to when you are used to

550
00:28:49,929 --> 00:28:54,490
different package generators beat'em

551
00:28:51,520 --> 00:28:56,200
hardware or software so me I'm a PhD

552
00:28:54,490 --> 00:28:58,750
student at Technical University of

553
00:28:56,200 --> 00:29:00,670
Munich and it's at a German name on the

554
00:28:58,750 --> 00:29:03,840
side before because when we wrote that

555
00:29:00,670 --> 00:29:05,980
paper we had the company policy that

556
00:29:03,840 --> 00:29:07,990
university-wide policy that we were not

557
00:29:05,980 --> 00:29:09,520
allowed to translate the name to English

558
00:29:07,990 --> 00:29:12,280
which leads to these awkward moments

559
00:29:09,520 --> 00:29:14,290
people trying to translate it to just

560
00:29:12,280 --> 00:29:16,450
pronounce that name and we luckily

561
00:29:14,290 --> 00:29:18,309
changed that I think two years ago and

562
00:29:16,450 --> 00:29:20,290
since then I'm allowed to say Technical

563
00:29:18,309 --> 00:29:23,740
University of Munich which is so much

564
00:29:20,290 --> 00:29:27,309
easier to pronounce for others and while

565
00:29:23,740 --> 00:29:30,070
I've been there since 2014 and I start

566
00:29:27,309 --> 00:29:33,639
as a PhD student and I'm hopefully

567
00:29:30,070 --> 00:29:38,169
finishing soon ish I have to like write

568
00:29:33,640 --> 00:29:40,540
a thesis and so on and this yeah I plan

569
00:29:38,170 --> 00:29:43,750
to finish next year sometime I said that

570
00:29:40,540 --> 00:29:46,300
last year as well but yeah and my thesis

571
00:29:43,750 --> 00:29:48,610
will be about testing different network

572
00:29:46,300 --> 00:29:52,629
devices where our network devices can

573
00:29:48,610 --> 00:29:54,699
refer to a typical classical hardware

574
00:29:52,630 --> 00:29:56,320
black box you sent in packets outer does

575
00:29:54,700 --> 00:29:58,179
something you get packets back but does

576
00:29:56,320 --> 00:30:01,419
it the right thing how faster this this

577
00:29:58,179 --> 00:30:03,790
is kind of boring compared to a complex

578
00:30:01,420 --> 00:30:05,710
software system where can investigate a

579
00:30:03,790 --> 00:30:07,059
lot of different effects in depth and

580
00:30:05,710 --> 00:30:07,630
where the performance is not always

581
00:30:07,059 --> 00:30:10,629
clear

582
00:30:07,630 --> 00:30:13,870
the bottlenecks are and so on and to do

583
00:30:10,630 --> 00:30:15,850
this i well i kind of started this work

584
00:30:13,870 --> 00:30:17,799
on moonshine or the idea when I did my

585
00:30:15,850 --> 00:30:20,530
masters Jesus where I had people look at

586
00:30:17,799 --> 00:30:22,929
performance of open V switch and virtual

587
00:30:20,530 --> 00:30:25,690
switches and cloud environments and I

588
00:30:22,929 --> 00:30:27,730
just realized there wasn't a really good

589
00:30:25,690 --> 00:30:29,620
software package generator that you

590
00:30:27,730 --> 00:30:31,419
could just use and that did all the

591
00:30:29,620 --> 00:30:33,340
things I wanted to and in the end I

592
00:30:31,419 --> 00:30:35,260
always ended up modifying some code of

593
00:30:33,340 --> 00:30:37,629
some software package generator to get

594
00:30:35,260 --> 00:30:40,120
it to do the things I wanted to was kind

595
00:30:37,630 --> 00:30:43,260
of annoying and so I went with this idea

596
00:30:40,120 --> 00:30:47,830
of building a package generator to start

597
00:30:43,260 --> 00:30:49,390
to really get even to really be able to

598
00:30:47,830 --> 00:30:51,070
do what I wanted to do I had to build

599
00:30:49,390 --> 00:30:53,230
this first and now it seems to have

600
00:30:51,070 --> 00:30:54,460
consumed almost everything about the

601
00:30:53,230 --> 00:30:58,860
teasers and it's mostly about a package

602
00:30:54,460 --> 00:31:01,659
generator now so where do I work at

603
00:30:58,860 --> 00:31:04,240
buttress the context that this work is

604
00:31:01,659 --> 00:31:07,210
being done in this is the networking

605
00:31:04,240 --> 00:31:09,309
group the thematics faculty a Technical

606
00:31:07,210 --> 00:31:13,390
University of Munich we are a relatively

607
00:31:09,309 --> 00:31:17,799
large group of about 20 people plus some

608
00:31:13,390 --> 00:31:20,049
external guys and we do a broad range of

609
00:31:17,799 --> 00:31:24,760
network research topics that ranges from

610
00:31:20,049 --> 00:31:26,470
everything from your usual traffic

611
00:31:24,760 --> 00:31:30,309
measurement and analysis where we look

612
00:31:26,470 --> 00:31:32,230
at look at traffic look at we have a

613
00:31:30,309 --> 00:31:34,240
mirror portrait our internet uplink

614
00:31:32,230 --> 00:31:36,490
where we look for animalist here we do

615
00:31:34,240 --> 00:31:40,000
internet byte scans we do everything we

616
00:31:36,490 --> 00:31:42,039
have our own autonomous system for just

617
00:31:40,000 --> 00:31:44,860
for research stuff and for doing

618
00:31:42,039 --> 00:31:46,990
internet scans then we do of course all

619
00:31:44,860 --> 00:31:50,379
your hotbar things from software-defined

620
00:31:46,990 --> 00:31:53,049
networking and yeah Internet of Things

621
00:31:50,380 --> 00:31:55,240
and the usual we do a lot of security

622
00:31:53,049 --> 00:31:59,280
and privacy research as well and

623
00:31:55,240 --> 00:32:01,539
peer-to-peer networks and of course the

624
00:31:59,280 --> 00:32:04,750
performance analysis and modeling part

625
00:32:01,539 --> 00:32:07,929
where I'm at this is this is really the

626
00:32:04,750 --> 00:32:10,929
subgroup that I'm working in and what

627
00:32:07,929 --> 00:32:12,340
are we doing there it's well the main

628
00:32:10,929 --> 00:32:14,350
research question or the main question

629
00:32:12,340 --> 00:32:16,570
that we have is that packet processing

630
00:32:14,350 --> 00:32:18,370
becomes more and more complex networks

631
00:32:16,570 --> 00:32:21,059
become more and more complex it's no

632
00:32:18,370 --> 00:32:23,939
longer just a few simple

633
00:32:21,059 --> 00:32:26,220
that switch allowed your packets there

634
00:32:23,940 --> 00:32:28,440
are more software components in there

635
00:32:26,220 --> 00:32:29,789
there's important passwords from

636
00:32:28,440 --> 00:32:33,539
software-defined network to network

637
00:32:29,789 --> 00:32:35,789
function virtualization and even even

638
00:32:33,539 --> 00:32:37,440
when this is done in hardware it's often

639
00:32:35,789 --> 00:32:39,299
a software component to it and it's

640
00:32:37,440 --> 00:32:41,399
often even done in software nowadays

641
00:32:39,299 --> 00:32:44,490
instead of in hardware just just last

642
00:32:41,399 --> 00:32:50,029
year we had a project in the 5g area

643
00:32:44,490 --> 00:32:52,769
where we worked was a big company who

644
00:32:50,029 --> 00:32:54,059
were interested in in doing some

645
00:32:52,769 --> 00:32:56,220
performance research of software

646
00:32:54,059 --> 00:32:58,019
components in the 5g back and where a

647
00:32:56,220 --> 00:32:59,789
lot of stuff is being virtualized a

648
00:32:58,019 --> 00:33:02,190
virtualized network functions doesn't

649
00:32:59,789 --> 00:33:04,649
need to be chained together it's quite

650
00:33:02,190 --> 00:33:06,480
unclear how the how it impacts the

651
00:33:04,649 --> 00:33:08,668
performance if you have different things

652
00:33:06,480 --> 00:33:10,289
competing for the same resources if you

653
00:33:08,669 --> 00:33:11,789
have different configurations that then

654
00:33:10,289 --> 00:33:14,039
run in software that can compete for

655
00:33:11,789 --> 00:33:16,710
hotter sources from bandwidth to cache

656
00:33:14,039 --> 00:33:19,110
to memory to whatever and so the

657
00:33:16,710 --> 00:33:20,820
research questions are from the simple

658
00:33:19,110 --> 00:33:22,559
thing what are the important performance

659
00:33:20,820 --> 00:33:25,470
metrics sure offer performance metrics

660
00:33:22,559 --> 00:33:27,389
you can just go to let's say of C 2544

661
00:33:25,470 --> 00:33:31,429
defines measure these things on your box

662
00:33:27,389 --> 00:33:33,899
but it doesn't really work well for a

663
00:33:31,429 --> 00:33:36,240
for a software device compared to a hot

664
00:33:33,899 --> 00:33:38,998
drivers yeah it's 20 years old and was

665
00:33:36,240 --> 00:33:40,740
designed for hardware devices there of

666
00:33:38,999 --> 00:33:42,240
course new standard things and the

667
00:33:40,740 --> 00:33:43,559
benchmarking methodology working group

668
00:33:42,240 --> 00:33:47,549
is also meeting today that will be an

669
00:33:43,559 --> 00:33:49,379
interesting session yeah then how do you

670
00:33:47,549 --> 00:33:52,139
measure things in a realistic scenario

671
00:33:49,379 --> 00:33:54,480
what is even a realistic scenario do you

672
00:33:52,139 --> 00:33:56,758
just send some packets for packets do

673
00:33:54,480 --> 00:33:58,470
you send it's particularly interesting

674
00:33:56,759 --> 00:34:02,159
when you benchmark stuff like firewalls

675
00:33:58,470 --> 00:34:04,889
where you might want to simulate some

676
00:34:02,159 --> 00:34:07,409
complex denial of service attack or

677
00:34:04,889 --> 00:34:10,409
anything it can quickly get very very

678
00:34:07,409 --> 00:34:12,389
complicated and another big topic that

679
00:34:10,409 --> 00:34:14,970
we are working on is how do you make a

680
00:34:12,389 --> 00:34:18,000
measurement reproducible if you if you

681
00:34:14,969 --> 00:34:20,598
run this one thing once with your home

682
00:34:18,000 --> 00:34:24,020
built package generator and and you are

683
00:34:20,599 --> 00:34:26,490
testing your own home brew solution this

684
00:34:24,020 --> 00:34:28,230
really and how do you ensure that

685
00:34:26,489 --> 00:34:30,569
someone else can reproduce or such or

686
00:34:28,230 --> 00:34:32,790
even the you yourself can reproduce your

687
00:34:30,569 --> 00:34:34,168
sites in one year because you might not

688
00:34:32,790 --> 00:34:34,550
have that server or that hardware any

689
00:34:34,168 --> 00:34:36,529
longer

690
00:34:34,550 --> 00:34:37,970
not that specific software version which

691
00:34:36,530 --> 00:34:40,580
might not want any longer because you

692
00:34:37,969 --> 00:34:44,480
upgraded a system how do you keep that

693
00:34:40,580 --> 00:34:46,759
stuff manageable and of course how can

694
00:34:44,480 --> 00:34:49,940
you predict performance as models how do

695
00:34:46,760 --> 00:34:51,320
you can can if you are planning a

696
00:34:49,940 --> 00:34:52,909
network and you want to know how much

697
00:34:51,320 --> 00:34:55,610
harder how much softer to buy what

698
00:34:52,909 --> 00:34:58,250
hardware to buy how can you do that how

699
00:34:55,610 --> 00:34:59,960
can you kind of get a model for the for

700
00:34:58,250 --> 00:35:01,790
the behavior for the performance and

701
00:34:59,960 --> 00:35:04,580
kind of predict what you need to buy

702
00:35:01,790 --> 00:35:08,240
what you need to plan instead of just

703
00:35:04,580 --> 00:35:10,819
adjusting after the fact so and this is

704
00:35:08,240 --> 00:35:12,879
what unblocking lists we are lucky to

705
00:35:10,820 --> 00:35:18,410
have this big wreck of test service

706
00:35:12,880 --> 00:35:20,720
which has a lot of 10g ports and some 43

707
00:35:18,410 --> 00:35:25,399
ports it's quite diverse hardware from

708
00:35:20,720 --> 00:35:29,270
low end power saving for CPUs to big

709
00:35:25,400 --> 00:35:31,790
Numa nodes with 40 cores and so on from

710
00:35:29,270 --> 00:35:33,770
small portable service that we can

711
00:35:31,790 --> 00:35:37,040
direct somewhere to show off in a demo

712
00:35:33,770 --> 00:35:41,000
to these big boxes and also as the

713
00:35:37,040 --> 00:35:43,100
inspection in Sdn router and one one key

714
00:35:41,000 --> 00:35:45,620
thing here that really makes work work

715
00:35:43,100 --> 00:35:47,839
easier is that it's fully automated test

716
00:35:45,620 --> 00:35:50,330
workflow that means if I want to run a

717
00:35:47,840 --> 00:35:52,760
network experiment on and benchmark

718
00:35:50,330 --> 00:35:54,950
something I really write a script that

719
00:35:52,760 --> 00:35:57,800
defines everything that starts starts

720
00:35:54,950 --> 00:35:59,240
from I want to use this this and that

721
00:35:57,800 --> 00:36:00,740
server I want to configure the switch

722
00:35:59,240 --> 00:36:03,410
that way or I know that they are

723
00:36:00,740 --> 00:36:05,899
directly connected and then there's a

724
00:36:03,410 --> 00:36:07,759
management note that allocates the

725
00:36:05,900 --> 00:36:10,670
service exclusively for me so I'm sure

726
00:36:07,760 --> 00:36:14,360
that only I'm using it and only my tests

727
00:36:10,670 --> 00:36:16,160
is currently running on it and then this

728
00:36:14,360 --> 00:36:18,620
test script completely boots the server

729
00:36:16,160 --> 00:36:20,060
from scratch this means there's no fixed

730
00:36:18,620 --> 00:36:21,970
installed operating system that might

731
00:36:20,060 --> 00:36:24,320
break and Mike might challenge

732
00:36:21,970 --> 00:36:26,750
reproducibility because you don't get

733
00:36:24,320 --> 00:36:28,910
the same system again and that we do a

734
00:36:26,750 --> 00:36:31,340
pixie boot of a network and just deploy

735
00:36:28,910 --> 00:36:33,080
the notes as we need them and we can get

736
00:36:31,340 --> 00:36:35,120
the same operating system again and

737
00:36:33,080 --> 00:36:37,040
again if we can just reproduce the exact

738
00:36:35,120 --> 00:36:40,910
same software setup again and again and

739
00:36:37,040 --> 00:36:43,490
then collect some data and aggregate the

740
00:36:40,910 --> 00:36:45,410
data and already has some basic stuff

741
00:36:43,490 --> 00:36:47,120
puts them in a Drupada notebook and so

742
00:36:45,410 --> 00:36:48,109
we can start running analysis of the

743
00:36:47,120 --> 00:36:50,529
data on top of that

744
00:36:48,109 --> 00:36:53,209
this is really nice especially was the

745
00:36:50,529 --> 00:36:55,880
knife Buddha have a big collection of

746
00:36:53,209 --> 00:36:58,190
operating systems and kernel versions so

747
00:36:55,880 --> 00:37:00,109
if I want to run a test how to see how

748
00:36:58,190 --> 00:37:02,509
different kernel versions evolved and

749
00:37:00,109 --> 00:37:04,009
then I want to maybe afterwards I think

750
00:37:02,509 --> 00:37:05,719
oh this might be another good metric

751
00:37:04,009 --> 00:37:07,339
then I can just boot the whole thing

752
00:37:05,719 --> 00:37:09,650
again and run the test on the old thing

753
00:37:07,339 --> 00:37:11,209
again stead of having to cope with

754
00:37:09,650 --> 00:37:15,650
downgrading an operating system or

755
00:37:11,209 --> 00:37:17,118
anything so let's get to the main part

756
00:37:15,650 --> 00:37:20,029
of the talk earlier this was just a

757
00:37:17,119 --> 00:37:22,309
longer introduction is this about packet

758
00:37:20,029 --> 00:37:25,249
generators so this is a big packet

759
00:37:22,309 --> 00:37:26,989
generator which you might have seen or

760
00:37:25,249 --> 00:37:28,939
anything there are a few problems with

761
00:37:26,989 --> 00:37:31,339
these big hearty boxes first of all they

762
00:37:28,940 --> 00:37:35,989
are big second they are quite expensive

763
00:37:31,339 --> 00:37:39,049
and as I've heard some some nice guy

764
00:37:35,989 --> 00:37:41,119
from intellects painted like this so the

765
00:37:39,049 --> 00:37:43,819
problem is them shipping around extra

766
00:37:41,119 --> 00:37:46,160
boxes doesn't scale this is I think true

767
00:37:43,819 --> 00:37:48,349
because often if you have multiple labs

768
00:37:46,160 --> 00:37:50,660
and you don't have a package owner for

769
00:37:48,349 --> 00:37:51,859
each of them then or you might want some

770
00:37:50,660 --> 00:37:54,828
hardware features that are not available

771
00:37:51,859 --> 00:37:57,799
and the end people often go back to this

772
00:37:54,829 --> 00:37:59,690
fancy commodity Hardware here of you

773
00:37:57,799 --> 00:38:02,839
know minotaur carts they are quite cheap

774
00:37:59,690 --> 00:38:04,069
comparatively they readily available you

775
00:38:02,839 --> 00:38:06,288
can just tuck them in your server and

776
00:38:04,069 --> 00:38:07,849
use them but then you run into a lot of

777
00:38:06,289 --> 00:38:09,680
problems because of course there's a

778
00:38:07,849 --> 00:38:13,999
reason why these big Hardware generators

779
00:38:09,680 --> 00:38:16,160
are so expensive and they are very

780
00:38:13,999 --> 00:38:17,479
reliable and precise at what they do

781
00:38:16,160 --> 00:38:19,670
whereas if you use a software package

782
00:38:17,479 --> 00:38:21,979
generator it's typically it might be

783
00:38:19,670 --> 00:38:25,099
slow it might be imprecise it might be

784
00:38:21,979 --> 00:38:26,629
unreliable it might just give a

785
00:38:25,099 --> 00:38:30,049
different result every time you run it

786
00:38:26,630 --> 00:38:31,670
and this is the problem that I'm really

787
00:38:30,049 --> 00:38:33,410
trying to solve here I'm trying to

788
00:38:31,670 --> 00:38:35,449
combine the advantages of both software

789
00:38:33,410 --> 00:38:37,759
and package on our software and hardware

790
00:38:35,449 --> 00:38:39,349
package generators that is software

791
00:38:37,759 --> 00:38:41,869
typically cheap and flexible and

792
00:38:39,349 --> 00:38:45,739
hardware typically very precise and

793
00:38:41,869 --> 00:38:47,329
accurate and so the five main design

794
00:38:45,739 --> 00:38:48,949
goals that I had when building this

795
00:38:47,329 --> 00:38:52,609
first of all it had to be fast obviously

796
00:38:48,949 --> 00:38:54,619
so and this is building on top of the

797
00:38:52,609 --> 00:38:56,390
DPD cave framework which was nowadays a

798
00:38:54,619 --> 00:38:58,999
Linux Foundation project which was just

799
00:38:56,390 --> 00:39:01,500
a set of a collection of drivers

800
00:38:58,999 --> 00:39:04,950
optimized drivers current bypass drivers

801
00:39:01,500 --> 00:39:07,500
- for network cards and some utility

802
00:39:04,950 --> 00:39:10,529
stuff for whatever you typically need

803
00:39:07,500 --> 00:39:15,330
when building a network app and then on

804
00:39:10,530 --> 00:39:17,820
top of this I built an nice API to build

805
00:39:15,330 --> 00:39:19,740
packet generators and everything I built

806
00:39:17,820 --> 00:39:21,960
about us was always explicitly this

807
00:39:19,740 --> 00:39:25,109
multi code multi-threading in mind every

808
00:39:21,960 --> 00:39:27,120
we if you will show a few examples of

809
00:39:25,110 --> 00:39:29,970
how a typical moongeun script looks like

810
00:39:27,120 --> 00:39:32,220
it's always at its core it's always

811
00:39:29,970 --> 00:39:33,959
explicit multi-threading and explicit

812
00:39:32,220 --> 00:39:36,959
multi-core because that is really the

813
00:39:33,960 --> 00:39:39,570
only way to scale to higher speeds sure

814
00:39:36,960 --> 00:39:41,460
a single 10g link you can fill that up

815
00:39:39,570 --> 00:39:43,500
those minimum size packets meaning

816
00:39:41,460 --> 00:39:45,840
around 50 million packets per second was

817
00:39:43,500 --> 00:39:47,940
a single GPU core is not too hard as

818
00:39:45,840 --> 00:39:50,840
long as you're not doing too complicated

819
00:39:47,940 --> 00:39:53,430
things but as soon as you go beyond that

820
00:39:50,840 --> 00:39:55,320
you need to be able to run multiple

821
00:39:53,430 --> 00:39:57,480
multiple threads at the same time

822
00:39:55,320 --> 00:39:58,920
luckily modern network cards make this

823
00:39:57,480 --> 00:40:00,480
really easy because they offer this

824
00:39:58,920 --> 00:40:03,630
multi queue interface and they are

825
00:40:00,480 --> 00:40:05,730
natively doing doing a multi-threaded

826
00:40:03,630 --> 00:40:07,470
approach in hardware so the software on

827
00:40:05,730 --> 00:40:10,770
top of it really fits quite nicely with

828
00:40:07,470 --> 00:40:13,200
the hardware and I wanted to be flexible

829
00:40:10,770 --> 00:40:15,270
because from my experience when I used

830
00:40:13,200 --> 00:40:17,580
packet generators I always in the end I

831
00:40:15,270 --> 00:40:20,009
always ended up modifying modifying the

832
00:40:17,580 --> 00:40:21,840
code at some place and doing doing

833
00:40:20,010 --> 00:40:23,970
something because I've wanted this view

834
00:40:21,840 --> 00:40:25,650
at protocol and then it didn't support

835
00:40:23,970 --> 00:40:27,569
this real protocol or just just one

836
00:40:25,650 --> 00:40:29,040
simple example I had this requirement

837
00:40:27,570 --> 00:40:31,230
I wanted to generate different flows

838
00:40:29,040 --> 00:40:33,480
only at layer 2 level meaning I wanted

839
00:40:31,230 --> 00:40:34,950
to modify just the MAC addresses and the

840
00:40:33,480 --> 00:40:37,620
package generator we were using at that

841
00:40:34,950 --> 00:40:40,169
time didn't support it so the source

842
00:40:37,620 --> 00:40:43,410
code and changed it and patched it and

843
00:40:40,170 --> 00:40:45,660
so on and the changed in itit was okay

844
00:40:43,410 --> 00:40:48,210
I had to modify the source code of for

845
00:40:45,660 --> 00:40:50,279
package generators now so this doesn't

846
00:40:48,210 --> 00:40:53,070
all these configuration languages they

847
00:40:50,280 --> 00:40:56,100
didn't seem to to scale really so what I

848
00:40:53,070 --> 00:40:58,260
did was I for moonshine I give full

849
00:40:56,100 --> 00:41:00,420
control of the main application to the

850
00:40:58,260 --> 00:41:02,820
user meaning that if you use moon during

851
00:41:00,420 --> 00:41:04,590
the core idea is really that you write

852
00:41:02,820 --> 00:41:06,780
the code for the main transmit loop

853
00:41:04,590 --> 00:41:09,210
yourself meaning every single packet you

854
00:41:06,780 --> 00:41:10,890
send out goes through your code and gets

855
00:41:09,210 --> 00:41:12,990
executed in real time for that packet

856
00:41:10,890 --> 00:41:14,720
and for that we are using the scripting

857
00:41:12,990 --> 00:41:16,430
language Lua which was

858
00:41:14,720 --> 00:41:19,368
has a very very nice just-in-time

859
00:41:16,430 --> 00:41:21,440
compiler that allows us to really run

860
00:41:19,369 --> 00:41:23,630
custom script code for each and every

861
00:41:21,440 --> 00:41:25,670
single packet because it really come it

862
00:41:23,630 --> 00:41:27,410
really integrates very well with lower

863
00:41:25,670 --> 00:41:29,720
level things and you can get direct

864
00:41:27,410 --> 00:41:31,339
access to the packet memory without

865
00:41:29,720 --> 00:41:33,589
pesky things like bound checks or

866
00:41:31,340 --> 00:41:35,869
anything that just be careful when you

867
00:41:33,590 --> 00:41:38,090
write your tests then another another

868
00:41:35,869 --> 00:41:39,560
thing that was traditionally very very

869
00:41:38,090 --> 00:41:44,510
challenging for software package

870
00:41:39,560 --> 00:41:47,330
generators is time stamping meaning that

871
00:41:44,510 --> 00:41:50,599
you want to maybe do maybe people often

872
00:41:47,330 --> 00:41:52,340
only evaluate there a few if you read

873
00:41:50,599 --> 00:41:54,890
some academic papers about a great new

874
00:41:52,340 --> 00:41:56,960
whatever out or whatever switch they

875
00:41:54,890 --> 00:41:58,368
often only give you okay this is the

876
00:41:56,960 --> 00:42:00,200
number and throughput that many with

877
00:41:58,369 --> 00:42:02,780
this million packets per second or even

878
00:42:00,200 --> 00:42:05,060
though this bandwidth which is typically

879
00:42:02,780 --> 00:42:06,710
the software devices I was selected by

880
00:42:05,060 --> 00:42:09,890
packets per second or not by bandwidth

881
00:42:06,710 --> 00:42:11,930
but you rarely see latency because it

882
00:42:09,890 --> 00:42:13,279
was just so hard to measure as a

883
00:42:11,930 --> 00:42:15,230
software package generator and

884
00:42:13,280 --> 00:42:17,800
especially in academia people who only

885
00:42:15,230 --> 00:42:20,690
have these big expensive hardware boxes

886
00:42:17,800 --> 00:42:23,300
so I really wanted to change that and of

887
00:42:20,690 --> 00:42:25,730
course turns out time stamping doing it

888
00:42:23,300 --> 00:42:28,190
precisely in software is a challenging

889
00:42:25,730 --> 00:42:30,670
problem but if you read the data sheets

890
00:42:28,190 --> 00:42:33,050
of your typical commodity next carefully

891
00:42:30,670 --> 00:42:34,880
you can find some tricks how you can

892
00:42:33,050 --> 00:42:39,050
convince the hardware two times ten

893
00:42:34,880 --> 00:42:41,150
packets basically the the the hardware

894
00:42:39,050 --> 00:42:43,760
often has support for the PTP time

895
00:42:41,150 --> 00:42:45,470
synchronization protocol which needs to

896
00:42:43,760 --> 00:42:47,839
support hardware time stamping in order

897
00:42:45,470 --> 00:42:49,368
to work properly and if you then craft

898
00:42:47,839 --> 00:42:50,990
packets and took the hardware a little

899
00:42:49,369 --> 00:42:52,490
bit better to drive a little bit then

900
00:42:50,990 --> 00:42:55,160
you can get their hardware to time stamp

901
00:42:52,490 --> 00:42:57,500
almost arbitrarily packets and this gets

902
00:42:55,160 --> 00:42:59,960
really nice result and really nice

903
00:42:57,500 --> 00:43:01,760
insight into software or hardware boxes

904
00:42:59,960 --> 00:43:04,670
that just weren't possible with software

905
00:43:01,760 --> 00:43:08,210
time stamping another thing that it's

906
00:43:04,670 --> 00:43:10,369
quite quite an interesting thing and was

907
00:43:08,210 --> 00:43:12,910
more more important than I initially

908
00:43:10,369 --> 00:43:14,930
thought was doing rate control meaning

909
00:43:12,910 --> 00:43:17,390
controlling the traffic pattern data

910
00:43:14,930 --> 00:43:19,399
center that is to get between packets

911
00:43:17,390 --> 00:43:21,440
like if you want to send one million

912
00:43:19,400 --> 00:43:25,040
packets per second there I can send a

913
00:43:21,440 --> 00:43:27,080
thousand packets sleep for some time for

914
00:43:25,040 --> 00:43:28,490
like a millisecond sent another thousand

915
00:43:27,080 --> 00:43:29,869
packets sleep for one more minute

916
00:43:28,490 --> 00:43:31,910
then you get at a million packets per

917
00:43:29,869 --> 00:43:34,130
second but I can also sleep between each

918
00:43:31,910 --> 00:43:36,529
packet for one microsecond or I can do a

919
00:43:34,130 --> 00:43:38,570
fancy Poisson process or any more

920
00:43:36,530 --> 00:43:40,520
complex pattern and this turned out to

921
00:43:38,570 --> 00:43:42,560
be hugely important when investigating

922
00:43:40,520 --> 00:43:45,500
software systems and an aspect that's

923
00:43:42,560 --> 00:43:46,640
unfortunately often ignored and then of

924
00:43:45,500 --> 00:43:49,310
course I wanted to make it open source

925
00:43:46,640 --> 00:43:51,259
because what's the point if only I'm

926
00:43:49,310 --> 00:43:53,330
using it I wanted to make it really easy

927
00:43:51,260 --> 00:43:56,600
to use and freely available you can

928
00:43:53,330 --> 00:44:01,759
check it out on github and what I'm now

929
00:43:56,600 --> 00:44:06,350
going to show you is just just only only

930
00:44:01,760 --> 00:44:08,780
a few well measurements and and a few

931
00:44:06,350 --> 00:44:10,430
sites basically and I don't want to bore

932
00:44:08,780 --> 00:44:13,610
you with the details you can go to the

933
00:44:10,430 --> 00:44:15,859
paper citations down there if you want

934
00:44:13,610 --> 00:44:19,220
the Goya implemented in details but I

935
00:44:15,860 --> 00:44:22,400
really want to show some some well

936
00:44:19,220 --> 00:44:24,230
examples of how to use it how the user

937
00:44:22,400 --> 00:44:25,940
is and why a few things are important

938
00:44:24,230 --> 00:44:28,490
and this is this traffic patterns this

939
00:44:25,940 --> 00:44:30,290
is really a point that I really like

940
00:44:28,490 --> 00:44:31,819
because it was just so much more

941
00:44:30,290 --> 00:44:33,259
important than I initially thought and

942
00:44:31,820 --> 00:44:34,880
it's so often just ignore what people

943
00:44:33,260 --> 00:44:36,619
just send a burst of packets and say oh

944
00:44:34,880 --> 00:44:41,619
the average rate is fine let's call it

945
00:44:36,619 --> 00:44:45,980
today okay so this is kind of kind of

946
00:44:41,619 --> 00:44:48,290
big confusing graph but it's actually

947
00:44:45,980 --> 00:44:50,180
really easy this is a really simple test

948
00:44:48,290 --> 00:44:51,950
set up what I did here was I took two

949
00:44:50,180 --> 00:44:54,200
servers connected them with two 10g

950
00:44:51,950 --> 00:44:55,730
links and one mooned run on one of them

951
00:44:54,200 --> 00:44:58,460
and different package generators but

952
00:44:55,730 --> 00:44:59,540
that's a different paper and open

953
00:44:58,460 --> 00:45:01,790
research on the other one and just

954
00:44:59,540 --> 00:45:03,890
forward packages open research no fancy

955
00:45:01,790 --> 00:45:05,930
packet modification nothing no fancy

956
00:45:03,890 --> 00:45:07,910
open V switch configuration just send

957
00:45:05,930 --> 00:45:09,799
take package from one part and send him

958
00:45:07,910 --> 00:45:11,569
out on the other using the normal open

959
00:45:09,800 --> 00:45:13,580
research kernel module I think okay

960
00:45:11,570 --> 00:45:15,980
there's a really boring test but if you

961
00:45:13,580 --> 00:45:19,310
dig down into even such a simple

962
00:45:15,980 --> 00:45:21,290
software software forward in case it

963
00:45:19,310 --> 00:45:23,330
really shows you what kind of complexity

964
00:45:21,290 --> 00:45:26,990
is hidden behind the seemingly simple

965
00:45:23,330 --> 00:45:28,819
example so this graph shows the x-axis

966
00:45:26,990 --> 00:45:30,229
is the offered load meaning I'm

967
00:45:28,820 --> 00:45:32,270
increasing load in this case was

968
00:45:30,230 --> 00:45:34,040
restricted to one flow the forwarding

969
00:45:32,270 --> 00:45:36,440
device was restricted to one CPU core

970
00:45:34,040 --> 00:45:39,200
because if you go motocross Numa than

971
00:45:36,440 --> 00:45:41,330
this opens oh and you can so the

972
00:45:39,200 --> 00:45:42,290
simplest possible thing and I configured

973
00:45:41,330 --> 00:45:45,319
Mundra to

974
00:45:42,290 --> 00:45:47,150
use different different burst sizes the

975
00:45:45,320 --> 00:45:49,130
default I just generated conservatory

976
00:45:47,150 --> 00:45:52,640
traffic meaning a constant gap between

977
00:45:49,130 --> 00:45:54,080
the packets and this is the baseline of

978
00:45:52,640 --> 00:45:55,850
this measurement meaning a hundred

979
00:45:54,080 --> 00:45:58,190
percent and the measure thing here is

980
00:45:55,850 --> 00:45:59,720
the latency relative to that case so

981
00:45:58,190 --> 00:46:01,760
what you would expect if you run your

982
00:45:59,720 --> 00:46:03,740
packet generators a few times on the

983
00:46:01,760 --> 00:46:05,450
same case you would expect the device

984
00:46:03,740 --> 00:46:07,160
under test to show the same latency

985
00:46:05,450 --> 00:46:09,740
response because why would it be

986
00:46:07,160 --> 00:46:12,500
different and especially you would

987
00:46:09,740 --> 00:46:14,120
expect to get the same latency result if

988
00:46:12,500 --> 00:46:16,070
using different packet generators if you

989
00:46:14,120 --> 00:46:17,600
don't change your device on a test but

990
00:46:16,070 --> 00:46:19,310
what we did in the past we had different

991
00:46:17,600 --> 00:46:21,140
package owner doesn't got completely

992
00:46:19,310 --> 00:46:22,730
different results for the latency of

993
00:46:21,140 --> 00:46:25,220
this the same device and a test to be

994
00:46:22,730 --> 00:46:28,100
investigated estrada and this graph is

995
00:46:25,220 --> 00:46:31,040
what I'm varying here was the different

996
00:46:28,100 --> 00:46:32,990
graphs in that diagram here is just the

997
00:46:31,040 --> 00:46:35,390
burst size meaning the baseline one

998
00:46:32,990 --> 00:46:37,790
packet sleep for some time one packet

999
00:46:35,390 --> 00:46:39,290
and so on and then four packet sixteen

1000
00:46:37,790 --> 00:46:41,540
packets are the two packets and so on

1001
00:46:39,290 --> 00:46:43,700
and see how the latency relatively to

1002
00:46:41,540 --> 00:46:46,759
the base case changes and as you can see

1003
00:46:43,700 --> 00:46:49,339
even with something as a burst set of 4

1004
00:46:46,760 --> 00:46:50,900
or 16 you can quickly get a relative

1005
00:46:49,340 --> 00:46:52,610
latency that differs by a hundred

1006
00:46:50,900 --> 00:46:54,470
percent or so so you just get a

1007
00:46:52,610 --> 00:46:58,340
completely different result just by

1008
00:46:54,470 --> 00:47:00,680
changing how the packets are spaced on

1009
00:46:58,340 --> 00:47:02,210
the wire without even going into

1010
00:47:00,680 --> 00:47:04,370
anything from the content of the packets

1011
00:47:02,210 --> 00:47:07,940
just just changing the that's one thing

1012
00:47:04,370 --> 00:47:10,490
and the the problem is why I'm showing

1013
00:47:07,940 --> 00:47:12,580
this is that people often sent bursts as

1014
00:47:10,490 --> 00:47:14,750
the default case because it turns out

1015
00:47:12,580 --> 00:47:18,259
packages software package generators are

1016
00:47:14,750 --> 00:47:20,360
only really fast in if you have a knife

1017
00:47:18,260 --> 00:47:22,010
implementation if you send out bursts

1018
00:47:20,360 --> 00:47:24,440
because all these frameworks are always

1019
00:47:22,010 --> 00:47:27,170
optimized to do burst packet processing

1020
00:47:24,440 --> 00:47:29,570
or batching or vector or whatever you

1021
00:47:27,170 --> 00:47:31,250
want to call it all of it is optimized

1022
00:47:29,570 --> 00:47:35,390
for this and so the typical default

1023
00:47:31,250 --> 00:47:37,100
burst sizes are between 16 and 256 for

1024
00:47:35,390 --> 00:47:39,290
software package generators as you can

1025
00:47:37,100 --> 00:47:41,029
see here is a really bad idea if you do

1026
00:47:39,290 --> 00:47:42,590
latency or if you want latency

1027
00:47:41,030 --> 00:47:44,210
measurements it doesn't matter so much

1028
00:47:42,590 --> 00:47:45,800
for the maximum achievable throughput

1029
00:47:44,210 --> 00:47:49,190
that was around 2 million packets for

1030
00:47:45,800 --> 00:47:50,600
all these configurations and now it's it

1031
00:47:49,190 --> 00:47:52,400
was really tricky to get different

1032
00:47:50,600 --> 00:47:53,900
packages we have another paper on this

1033
00:47:52,400 --> 00:47:55,680
where we compared a lot of different

1034
00:47:53,900 --> 00:47:58,050
software package generators on how

1035
00:47:55,680 --> 00:48:00,359
you can generate what we configure them

1036
00:47:58,050 --> 00:48:04,380
to do at first turned out to be very

1037
00:48:00,359 --> 00:48:06,660
hard to even get them to send to even

1038
00:48:04,380 --> 00:48:08,550
try to send CBR traffic some claim to

1039
00:48:06,660 --> 00:48:32,910
send CBR traffic but then have some

1040
00:48:08,550 --> 00:48:34,530
optimizing oh sorry thank you this quiz

1041
00:48:32,910 --> 00:48:38,509
will have sound from the other room so

1042
00:48:34,530 --> 00:48:41,460
yes I'm the closest to it though I think

1043
00:48:38,510 --> 00:48:43,980
ok I'll just talk louder or closer to

1044
00:48:41,460 --> 00:48:45,390
the microphone so it was really annoying

1045
00:48:43,980 --> 00:48:47,940
to even get these packaged generators to

1046
00:48:45,390 --> 00:48:49,650
do what we wanted them and even then

1047
00:48:47,940 --> 00:48:51,000
there were some optimization what you

1048
00:48:49,650 --> 00:48:53,190
will sometimes in there sometimes

1049
00:48:51,000 --> 00:48:55,140
there's a kernel component that then

1050
00:48:53,190 --> 00:48:57,480
batch them together well to make it

1051
00:48:55,140 --> 00:49:00,540
faster but that was not very helpful and

1052
00:48:57,480 --> 00:49:03,750
then they lied to you and even even when

1053
00:49:00,540 --> 00:49:05,099
we managed to configure it it they still

1054
00:49:03,750 --> 00:49:06,930
send out births because it turns out

1055
00:49:05,099 --> 00:49:08,520
it's really hard to send an individual

1056
00:49:06,930 --> 00:49:11,819
packet to a network cart it's just not

1057
00:49:08,520 --> 00:49:13,740
what they are designed to do and in

1058
00:49:11,819 --> 00:49:15,750
mundo and this is better but there's not

1059
00:49:13,740 --> 00:49:18,359
a detail I'm going to bore you about a

1060
00:49:15,750 --> 00:49:20,940
12 page paper about it what that one

1061
00:49:18,359 --> 00:49:22,529
reviewer just got us incredibly boring

1062
00:49:20,940 --> 00:49:29,579
to get through but I guess it's

1063
00:49:22,530 --> 00:49:31,440
important so thank you for that ok why

1064
00:49:29,579 --> 00:49:34,700
is this even different well one reason

1065
00:49:31,440 --> 00:49:37,170
is the CBR traffic is not a good case so

1066
00:49:34,700 --> 00:49:39,359
typically it's not a realistic case the

1067
00:49:37,170 --> 00:49:42,869
Internet traffic is not CBR traffic but

1068
00:49:39,359 --> 00:49:45,058
like people people test the CBR traffic

1069
00:49:42,869 --> 00:49:48,809
because if you look at for example the

1070
00:49:45,059 --> 00:49:51,089
old RC 25:44 it calls for CBR traffic by

1071
00:49:48,809 --> 00:49:53,490
default and people just follow that 90 I

1072
00:49:51,089 --> 00:49:55,470
mean the ass he even says you can test

1073
00:49:53,490 --> 00:49:57,180
other traffic pattern afterwards but the

1074
00:49:55,470 --> 00:50:00,660
default is CBR and people are just like

1075
00:49:57,180 --> 00:50:03,930
oh well let's just do CBR and it's good

1076
00:50:00,660 --> 00:50:06,118
enough so this graph shows the same

1077
00:50:03,930 --> 00:50:08,759
measurement as the sto site before it's

1078
00:50:06,119 --> 00:50:12,250
basically the baseline was

1079
00:50:08,760 --> 00:50:14,560
plotting the latency for the CBR case

1080
00:50:12,250 --> 00:50:16,270
and it looks really weird at first it's

1081
00:50:14,560 --> 00:50:18,670
okay it seems to be increasing and

1082
00:50:16,270 --> 00:50:20,710
there's one weird spike the spike is

1083
00:50:18,670 --> 00:50:22,810
completely reproducible across different

1084
00:50:20,710 --> 00:50:24,790
systems different things and right

1085
00:50:22,810 --> 00:50:26,320
before overload it drops completely in

1086
00:50:24,790 --> 00:50:28,240
the latency latency gets better

1087
00:50:26,320 --> 00:50:29,320
this is also completely reproducible you

1088
00:50:28,240 --> 00:50:30,640
can see there are more measure plane

1089
00:50:29,320 --> 00:50:32,200
points in there because when I first

1090
00:50:30,640 --> 00:50:34,240
thought about like well it can't be too

1091
00:50:32,200 --> 00:50:36,730
and me to measure maybe the slightly

1092
00:50:34,240 --> 00:50:38,979
different but it just reliably drops

1093
00:50:36,730 --> 00:50:42,310
there I also have a paper about that but

1094
00:50:38,980 --> 00:50:44,859
it's also another deep dive into the

1095
00:50:42,310 --> 00:50:46,540
details of how the Linux kernel and the

1096
00:50:44,859 --> 00:50:49,540
driver works basically there are two

1097
00:50:46,540 --> 00:50:50,650
things that are trying to well one is

1098
00:50:49,540 --> 00:50:52,810
trying to prevent the system from

1099
00:50:50,650 --> 00:50:54,609
locking up from interrupted terms that's

1100
00:50:52,810 --> 00:50:56,320
the Linux poly mode Nappi which just

1101
00:50:54,609 --> 00:50:58,180
switches to some fancy poly mode and

1102
00:50:56,320 --> 00:50:59,680
just pulls a network out and disable

1103
00:50:58,180 --> 00:51:01,000
interrupts and then there's the

1104
00:50:59,680 --> 00:51:02,200
interrupt sorting rate which is

1105
00:51:01,000 --> 00:51:05,170
typically found on all these drivers

1106
00:51:02,200 --> 00:51:06,700
that tries to save power and then you

1107
00:51:05,170 --> 00:51:08,970
and goes into power saving that's a

1108
00:51:06,700 --> 00:51:11,410
whole other can of worms to open so

1109
00:51:08,970 --> 00:51:14,250
basically you're going to say here

1110
00:51:11,410 --> 00:51:16,480
Paul's having kind of okay kind of works

1111
00:51:14,250 --> 00:51:18,220
also hard to measure because by default

1112
00:51:16,480 --> 00:51:20,260
the new yorks can you find in most

1113
00:51:18,220 --> 00:51:22,240
distributions doesn't report the CPU

1114
00:51:20,260 --> 00:51:24,640
time consumed per interrupter can be at

1115
00:51:22,240 --> 00:51:26,500
100% CPU load but each top reports you

1116
00:51:24,640 --> 00:51:28,420
are at 10% because it doesn't account

1117
00:51:26,500 --> 00:51:30,640
interrupt time properly unless you set

1118
00:51:28,420 --> 00:51:32,710
your cue time accounting flag while

1119
00:51:30,640 --> 00:51:35,848
compiling the kernel or directly with

1120
00:51:32,710 --> 00:51:39,160
the CPU performance counters and this is

1121
00:51:35,849 --> 00:51:41,710
completely different piped off so now

1122
00:51:39,160 --> 00:51:44,290
this kind of looks weird and the reason

1123
00:51:41,710 --> 00:51:45,760
why it looks weird as really that that

1124
00:51:44,290 --> 00:51:47,650
these algorithms that try to estimate

1125
00:51:45,760 --> 00:51:49,420
the rate and so on they don't play well

1126
00:51:47,650 --> 00:51:51,369
with CBR traffic they kind of get

1127
00:51:49,420 --> 00:51:54,220
confused and there are a few state

1128
00:51:51,369 --> 00:51:56,680
machines if you get them and where they

1129
00:51:54,220 --> 00:51:59,020
keep switching between two states all

1130
00:51:56,680 --> 00:52:01,569
the time because they they get slightly

1131
00:51:59,020 --> 00:52:02,980
confused by the CBR traffic then I don't

1132
00:52:01,570 --> 00:52:05,410
know exactly what happens but you get

1133
00:52:02,980 --> 00:52:07,810
these vertices so let's use a Poisson

1134
00:52:05,410 --> 00:52:09,730
process instead and that just looks much

1135
00:52:07,810 --> 00:52:12,849
smoother and the site is much more what

1136
00:52:09,730 --> 00:52:14,170
you would expect and the only thing I'm

1137
00:52:12,849 --> 00:52:15,910
changing between these two measurements

1138
00:52:14,170 --> 00:52:19,119
is again the time between packets in

1139
00:52:15,910 --> 00:52:20,770
this case from CBR to Poisson and much

1140
00:52:19,119 --> 00:52:22,180
more reasonable result and if you look

1141
00:52:20,770 --> 00:52:24,369
at River traffic

1142
00:52:22,180 --> 00:52:26,589
of course you all know that really old

1143
00:52:24,369 --> 00:52:29,079
sitcom paper about how you shouldn't

1144
00:52:26,589 --> 00:52:30,880
model your internet traffic with episode

1145
00:52:29,079 --> 00:52:32,079
process but that's only really true for

1146
00:52:30,880 --> 00:52:33,640
a larger time scale if you're running

1147
00:52:32,079 --> 00:52:35,740
your test of a few minutes or whatever

1148
00:52:33,640 --> 00:52:37,240
then you can use a Poisson process to

1149
00:52:35,740 --> 00:52:38,979
reasonably approximate what wheel

1150
00:52:37,240 --> 00:52:44,078
traffic looks like and then you get

1151
00:52:38,980 --> 00:52:46,390
these nice nice smooth results and more

1152
00:52:44,079 --> 00:52:49,510
in more realistic scenario which is also

1153
00:52:46,390 --> 00:52:51,220
what this is about so what does a

1154
00:52:49,510 --> 00:52:53,500
latency measurement of look like if you

1155
00:52:51,220 --> 00:52:56,618
want to if you now installed Mundra and

1156
00:52:53,500 --> 00:52:58,299
you want to drill down into into really

1157
00:52:56,619 --> 00:53:01,089
one measurement you get these nice

1158
00:52:58,299 --> 00:53:03,220
histograms which are just some way to

1159
00:53:01,089 --> 00:53:05,558
represent how the latency is distributed

1160
00:53:03,220 --> 00:53:07,118
and typically for many cases you want to

1161
00:53:05,559 --> 00:53:10,720
see the F instead but a histogram is

1162
00:53:07,119 --> 00:53:12,279
well easier to see visually so what you

1163
00:53:10,720 --> 00:53:14,109
can see here these are just measurements

1164
00:53:12,279 --> 00:53:16,930
of a few systems the first one is a

1165
00:53:14,109 --> 00:53:18,069
software for water running directly on

1166
00:53:16,930 --> 00:53:20,078
the machine you can clearly see there

1167
00:53:18,069 --> 00:53:21,819
some interrupt sorting going on so you

1168
00:53:20,079 --> 00:53:23,859
get this uniform distribution kind of

1169
00:53:21,819 --> 00:53:25,690
neat and the second one there's a

1170
00:53:23,859 --> 00:53:27,220
virtual machine and the virtual switch

1171
00:53:25,690 --> 00:53:30,910
and everything involved then you get

1172
00:53:27,220 --> 00:53:32,770
this long chain distribution and I

1173
00:53:30,910 --> 00:53:34,509
actually cut it off yet actually long

1174
00:53:32,770 --> 00:53:36,190
tail and there are some worst cases it's

1175
00:53:34,510 --> 00:53:39,599
also an interesting thing to measure

1176
00:53:36,190 --> 00:53:42,670
there are just just if you look at the

1177
00:53:39,599 --> 00:53:44,799
99.99% Isle of some latency measurement

1178
00:53:42,670 --> 00:53:47,049
and then you see some horrible results

1179
00:53:44,799 --> 00:53:48,849
there if you if you are benchmarking a

1180
00:53:47,049 --> 00:53:52,240
virtual machine or anything this can

1181
00:53:48,849 --> 00:53:55,150
also be a big problem and it's also

1182
00:53:52,240 --> 00:53:56,770
another thing where you can get probably

1183
00:53:55,150 --> 00:53:59,980
a whole PhD on how this happens why it

1184
00:53:56,770 --> 00:54:02,589
happens how to measure it and a hacker

1185
00:53:59,980 --> 00:54:04,599
box this is just something to show how

1186
00:54:02,589 --> 00:54:07,750
precise this really is because if you

1187
00:54:04,599 --> 00:54:09,640
note the x-axis and microseconds and

1188
00:54:07,750 --> 00:54:12,190
only goes up to 3.5 microseconds

1189
00:54:09,640 --> 00:54:13,868
typically saying the position of the

1190
00:54:12,190 --> 00:54:16,390
moon jaein Hardware time stamping apart

1191
00:54:13,869 --> 00:54:18,730
is typically plus minus and plus minus

1192
00:54:16,390 --> 00:54:20,740
12 nanoseconds it was quite good for

1193
00:54:18,730 --> 00:54:22,329
most things that typically you get

1194
00:54:20,740 --> 00:54:24,879
typically agencies of the hardware box

1195
00:54:22,329 --> 00:54:27,039
its new range of a microsecond or maybe

1196
00:54:24,880 --> 00:54:29,349
500 nanoseconds to a few microseconds a

1197
00:54:27,039 --> 00:54:31,329
software box around ten microseconds if

1198
00:54:29,349 --> 00:54:34,270
it's good and a hundred if it's doing

1199
00:54:31,329 --> 00:54:35,980
some power saving stuff and you can see

1200
00:54:34,270 --> 00:54:39,970
here's a nice by modelers to

1201
00:54:35,980 --> 00:54:41,830
fusion and this is just an example where

1202
00:54:39,970 --> 00:54:43,569
if you want to break it down to one

1203
00:54:41,830 --> 00:54:44,799
value your latency or anything it

1204
00:54:43,570 --> 00:54:45,970
doesn't really work because what's the

1205
00:54:44,800 --> 00:54:47,440
average of this what's the meaning of

1206
00:54:45,970 --> 00:54:49,830
the average of this is really nothing

1207
00:54:47,440 --> 00:54:52,900
so really meaning of the median of this

1208
00:54:49,830 --> 00:54:55,900
it has to clearly distinct past in the

1209
00:54:52,900 --> 00:54:58,330
hardware in this case it was it was an

1210
00:54:55,900 --> 00:55:00,190
output part that was used by multiple

1211
00:54:58,330 --> 00:55:01,750
input parts and they are just two cases

1212
00:55:00,190 --> 00:55:03,160
are that goes to the cut through pass if

1213
00:55:01,750 --> 00:55:04,960
there's no packet being queued from the

1214
00:55:03,160 --> 00:55:06,399
other port or as a packet being Cureton

1215
00:55:04,960 --> 00:55:08,470
so it gets queued for a short time then

1216
00:55:06,400 --> 00:55:13,570
goes to the other one also have a paper

1217
00:55:08,470 --> 00:55:15,609
about that stuff and then I want to show

1218
00:55:13,570 --> 00:55:17,470
you how to use it and there's just the

1219
00:55:15,609 --> 00:55:20,470
only boring architecture slide basically

1220
00:55:17,470 --> 00:55:22,480
Mundra and sits on top of DP DK + TB DK

1221
00:55:20,470 --> 00:55:23,980
is it's on top of the network card and

1222
00:55:22,480 --> 00:55:26,740
the network card offers multiple queues

1223
00:55:23,980 --> 00:55:28,869
and at the top you have your users what

1224
00:55:26,740 --> 00:55:31,660
we call a user script that is your user

1225
00:55:28,869 --> 00:55:33,700
controlled your script you write the

1226
00:55:31,660 --> 00:55:35,618
whole script and yes there's a lot of

1227
00:55:33,700 --> 00:55:37,149
boilerplate and the idea is kind of you

1228
00:55:35,619 --> 00:55:39,330
copy/paste one of the example scripts

1229
00:55:37,150 --> 00:55:41,770
modified to suit your needs

1230
00:55:39,330 --> 00:55:44,200
documentation might suck at some parts

1231
00:55:41,770 --> 00:55:47,560
but it's just your typical open source

1232
00:55:44,200 --> 00:55:49,240
project really if you look at the

1233
00:55:47,560 --> 00:55:51,130
example scripts and if you look at your

1234
00:55:49,240 --> 00:55:52,899
basic example script that generates

1235
00:55:51,130 --> 00:55:55,420
different UDP flows and to report

1236
00:55:52,900 --> 00:55:58,570
suicides you should quickly get an idea

1237
00:55:55,420 --> 00:56:01,390
of how to modify it for your needs or

1238
00:55:58,570 --> 00:56:02,800
how to add multiple things and the way

1239
00:56:01,390 --> 00:56:05,529
we do multi-threading as we spawn

1240
00:56:02,800 --> 00:56:06,850
completely independent virtual virtual

1241
00:56:05,530 --> 00:56:08,980
machines virtual machines in the sense

1242
00:56:06,850 --> 00:56:11,040
of a language implementation virtual

1243
00:56:08,980 --> 00:56:13,990
machine for a just-in-time compiler and

1244
00:56:11,040 --> 00:56:16,900
that is really they are really

1245
00:56:13,990 --> 00:56:17,859
completely independent and there are

1246
00:56:16,900 --> 00:56:20,530
nice

1247
00:56:17,859 --> 00:56:23,380
api's that allow you to talk between

1248
00:56:20,530 --> 00:56:25,119
these these independent sets but the

1249
00:56:23,380 --> 00:56:27,190
main ideas are shared nothing approach

1250
00:56:25,119 --> 00:56:28,869
because in the end what you want to

1251
00:56:27,190 --> 00:56:31,390
generate as multiple flows and they are

1252
00:56:28,869 --> 00:56:32,710
often independent from each other or you

1253
00:56:31,390 --> 00:56:34,569
can break them down into a few

1254
00:56:32,710 --> 00:56:37,560
independent chunks and that makes it

1255
00:56:34,570 --> 00:56:39,640
really really high-performance and

1256
00:56:37,560 --> 00:56:43,330
really have to look at the examples to

1257
00:56:39,640 --> 00:56:46,150
get an idea of what I mean by this so

1258
00:56:43,330 --> 00:56:47,170
and I don't know so a quick example I

1259
00:56:46,150 --> 00:56:48,280
don't know how much time I've left

1260
00:56:47,170 --> 00:56:50,320
there's no clock

1261
00:56:48,280 --> 00:56:53,620
how much time I got left oh I'm sorry

1262
00:56:50,320 --> 00:56:57,940
youyou can continue for another ten

1263
00:56:53,620 --> 00:57:00,880
minutes okay great this seems perfect so

1264
00:56:57,940 --> 00:57:03,190
okay I'm gonna show this example and in

1265
00:57:00,880 --> 00:57:04,750
this case I'm this example is based on

1266
00:57:03,190 --> 00:57:06,490
our vehicle an example this is also

1267
00:57:04,750 --> 00:57:07,990
something we wanted to test the exam and

1268
00:57:06,490 --> 00:57:10,060
then the packet generators almost I

1269
00:57:07,990 --> 00:57:13,899
don't know that protocol and well but

1270
00:57:10,060 --> 00:57:16,360
luck for you and so the the first thing

1271
00:57:13,900 --> 00:57:19,870
that you can do is you can dynamically

1272
00:57:16,360 --> 00:57:22,120
general define a a complex stack of

1273
00:57:19,870 --> 00:57:24,250
headers and really these are just ahead

1274
00:57:22,120 --> 00:57:25,750
us moongeun is still a low-level package

1275
00:57:24,250 --> 00:57:27,460
generate another traffic generator

1276
00:57:25,750 --> 00:57:29,260
meaning there's no protocol logic behind

1277
00:57:27,460 --> 00:57:31,720
it you're just sending out packets and

1278
00:57:29,260 --> 00:57:34,150
protocol logic is like absolute minimum

1279
00:57:31,720 --> 00:57:36,730
like we implement up and LACP and

1280
00:57:34,150 --> 00:57:39,430
whatever you you expect for basic

1281
00:57:36,730 --> 00:57:41,140
functionality and there's like the

1282
00:57:39,430 --> 00:57:42,790
hashing algorithm to get the sauce pot

1283
00:57:41,140 --> 00:57:44,529
of the explan and so on and to check

1284
00:57:42,790 --> 00:57:47,350
some check some stuff and check some of

1285
00:57:44,530 --> 00:57:49,270
loading but it's not a traffic generator

1286
00:57:47,350 --> 00:57:51,960
can't build a tcp stream from it you

1287
00:57:49,270 --> 00:57:54,670
just can build packets but it's meant to

1288
00:57:51,960 --> 00:57:57,610
benchmark some devices on there on the

1289
00:57:54,670 --> 00:57:59,620
lowest level and what you can do here is

1290
00:57:57,610 --> 00:58:03,580
you can stack together arbitrary had us

1291
00:57:59,620 --> 00:58:05,740
and like in this case it's we explained

1292
00:58:03,580 --> 00:58:07,960
running over ipv4 and in the we expand

1293
00:58:05,740 --> 00:58:10,089
that a VLAN tag is another frame with

1294
00:58:07,960 --> 00:58:11,890
another ipv4 header and UDP oh by the

1295
00:58:10,090 --> 00:58:14,560
way everything we have is also a PBX

1296
00:58:11,890 --> 00:58:17,560
capable because the guy who wrote the

1297
00:58:14,560 --> 00:58:20,080
what the protocol stack stuff he really

1298
00:58:17,560 --> 00:58:23,890
likes ipv6 and so all the examples also

1299
00:58:20,080 --> 00:58:27,150
do ipv6 yeah and once you have that

1300
00:58:23,890 --> 00:58:29,589
thing it gets just-in-time compiled and

1301
00:58:27,150 --> 00:58:31,660
the next thing you do is you create a

1302
00:58:29,590 --> 00:58:34,870
memory pool with a packet archetype

1303
00:58:31,660 --> 00:58:36,730
meaning this is just some some basic

1304
00:58:34,870 --> 00:58:38,529
packet this is quite memory pool this is

1305
00:58:36,730 --> 00:58:41,470
just Maps if you know duplicate and you

1306
00:58:38,530 --> 00:58:45,070
will see how this maps to the PDK stuff

1307
00:58:41,470 --> 00:58:47,709
and then you fill each of your packets

1308
00:58:45,070 --> 00:58:49,360
with the archetype this means you cast a

1309
00:58:47,710 --> 00:58:50,770
two of the exelon stack that's initially

1310
00:58:49,360 --> 00:58:54,090
an empty packet you tell it okay i

1311
00:58:50,770 --> 00:58:56,440
wanted to be a V exam stack packet and

1312
00:58:54,090 --> 00:58:58,300
then you can call this metric fill

1313
00:58:56,440 --> 00:59:01,410
method which was very slow but you only

1314
00:58:58,300 --> 00:59:04,059
do this once and this has nice

1315
00:59:01,410 --> 00:59:06,069
satis basically for all the headaches

1316
00:59:04,059 --> 00:59:07,660
you have in your stack with the names

1317
00:59:06,069 --> 00:59:09,700
that you defined before and you can do

1318
00:59:07,660 --> 00:59:13,118
stuff like lookup and MAC address here

1319
00:59:09,700 --> 00:59:14,799
and you can basically set such things

1320
00:59:13,119 --> 00:59:16,150
and then you can tell it to calculate

1321
00:59:14,799 --> 00:59:17,619
the check sums and the scheduler

1322
00:59:16,150 --> 00:59:18,759
checksum is again a magic message that

1323
00:59:17,619 --> 00:59:22,960
goes through the whole stack and now

1324
00:59:18,759 --> 00:59:24,880
stat okay there is this checksum and to

1325
00:59:22,960 --> 00:59:27,099
calculate that or I just see the example

1326
00:59:24,880 --> 00:59:28,779
just does it for one thing but that does

1327
00:59:27,099 --> 00:59:30,490
it for all the things in your header

1328
00:59:28,779 --> 00:59:33,970
because I think I'm using a floating

1329
00:59:30,490 --> 00:59:35,709
here okay now this is basically the

1330
00:59:33,970 --> 00:59:37,598
initialization I defined my stack I

1331
00:59:35,710 --> 00:59:38,829
defined what I wanted to look like and

1332
00:59:37,599 --> 00:59:40,450
then there are some boilerplate code

1333
00:59:38,829 --> 00:59:44,349
like commands and argument handling and

1334
00:59:40,450 --> 00:59:46,029
and whatever and then the next thing is

1335
00:59:44,349 --> 00:59:49,180
you write the actual transmit loop

1336
00:59:46,029 --> 00:59:50,380
meaning you ID the core of the of your

1337
00:59:49,180 --> 00:59:53,200
transferred loop of your package

1338
00:59:50,380 --> 00:59:55,119
generate a test script and this is this

1339
00:59:53,200 --> 00:59:57,009
is so completely different from other

1340
00:59:55,119 --> 00:59:59,440
package generators because in the end

1341
00:59:57,009 --> 01:00:01,779
it's it's not really a package generator

1342
00:59:59,440 --> 01:00:03,220
per se it's a it's a framework for

1343
01:00:01,779 --> 01:00:04,960
writing package generators and you write

1344
01:00:03,220 --> 01:00:07,859
your own one based on one of the

1345
01:00:04,960 --> 01:00:11,529
examples and a lot of boilerplate code

1346
01:00:07,859 --> 01:00:14,769
so what you do here you allocate some

1347
01:00:11,529 --> 01:00:16,839
buffer array in this case it's default

1348
01:00:14,769 --> 01:00:19,899
back size and yes this example sends out

1349
01:00:16,839 --> 01:00:21,130
bursts unless we configure that's well

1350
01:00:19,900 --> 01:00:23,920
you have to can't go into the details

1351
01:00:21,130 --> 01:00:25,269
about how the right control works then

1352
01:00:23,920 --> 01:00:27,099
you are the actual main loop that just

1353
01:00:25,269 --> 01:00:29,379
checks is the process still running

1354
01:00:27,099 --> 01:00:32,640
meaning that someone press control sees

1355
01:00:29,380 --> 01:00:35,589
and sick term or another task stop it

1356
01:00:32,640 --> 01:00:37,390
then we tell it okay nice we want some

1357
01:00:35,589 --> 01:00:38,558
packets on our memory pool and we just

1358
01:00:37,390 --> 01:00:40,989
get the packets with the packet

1359
01:00:38,559 --> 01:00:43,029
archetype that we previously filled we

1360
01:00:40,989 --> 01:00:45,400
iterate over these packets and again

1361
01:00:43,029 --> 01:00:47,950
cast them to the to detect that was

1362
01:00:45,400 --> 01:00:49,420
previously jet compiled this cast

1363
01:00:47,950 --> 01:00:51,730
operation is a completely free operation

1364
01:00:49,420 --> 01:00:53,799
there's no cyclist behind you it's just

1365
01:00:51,730 --> 01:00:55,539
the equivalent of a seat cast and it

1366
01:00:53,799 --> 01:00:56,920
doesn't do anything besides tell the

1367
01:00:55,539 --> 01:00:58,989
compiler okay I want to use these

1368
01:00:56,920 --> 01:01:01,150
offsets for my packet and then I can

1369
01:00:58,989 --> 01:01:03,940
just access these packets at the right

1370
01:01:01,150 --> 01:01:06,609
offset gets compiled down to a few

1371
01:01:03,940 --> 01:01:08,140
assembly instructions and I can do fancy

1372
01:01:06,609 --> 01:01:10,509
things like in this case I want to

1373
01:01:08,140 --> 01:01:12,759
randomize my destination port I can just

1374
01:01:10,509 --> 01:01:14,619
call master random or whatever here

1375
01:01:12,759 --> 01:01:15,070
whatever arbitrarily complex processing

1376
01:01:14,619 --> 01:01:16,750
you need

1377
01:01:15,070 --> 01:01:20,260
for your thing and you can of course

1378
01:01:16,750 --> 01:01:22,210
access other fields here and then you

1379
01:01:20,260 --> 01:01:23,950
set some offloading flex and you sent

1380
01:01:22,210 --> 01:01:24,400
take you to tell the queue to send out

1381
01:01:23,950 --> 01:01:26,919
the Buffs

1382
01:01:24,400 --> 01:01:28,900
and this is the whole main loop and this

1383
01:01:26,920 --> 01:01:30,250
is also runs typically on an independent

1384
01:01:28,900 --> 01:01:32,290
thing and you could start multiple

1385
01:01:30,250 --> 01:01:34,000
threads running this and if you look at

1386
01:01:32,290 --> 01:01:39,009
the examples that is really what they

1387
01:01:34,000 --> 01:01:40,600
are doing now let's say you don't want

1388
01:01:39,010 --> 01:01:42,130
to write a script because there's this

1389
01:01:40,600 --> 01:01:45,100
recent development that we are working

1390
01:01:42,130 --> 01:01:46,870
on is to really provide an actual packet

1391
01:01:45,100 --> 01:01:49,600
generator for our packet generator

1392
01:01:46,870 --> 01:01:51,609
meaning a set of predefined scripts that

1393
01:01:49,600 --> 01:01:53,380
have extensive command-line arguments

1394
01:01:51,610 --> 01:01:56,350
and a sense of config files because it

1395
01:01:53,380 --> 01:01:57,820
turns out not everyone likes like

1396
01:01:56,350 --> 01:01:59,830
writing script but everyone likes

1397
01:01:57,820 --> 01:02:01,810
writing scripts in the Lua scripting

1398
01:01:59,830 --> 01:02:04,240
language there I've talked to two people

1399
01:02:01,810 --> 01:02:06,279
from some companies they were like

1400
01:02:04,240 --> 01:02:07,810
basically oh but our test engineers they

1401
01:02:06,280 --> 01:02:09,280
are not programmers they can just click

1402
01:02:07,810 --> 01:02:12,490
on the X jeogori and click the start

1403
01:02:09,280 --> 01:02:16,780
button we can't use this okay so let's

1404
01:02:12,490 --> 01:02:18,729
make it somewhat easier in this case we

1405
01:02:16,780 --> 01:02:20,800
did at a config file to it there's some

1406
01:02:18,730 --> 01:02:22,450
new work still work-in-progress might be

1407
01:02:20,800 --> 01:02:26,350
completely buggy not completely buggy

1408
01:02:22,450 --> 01:02:29,169
but might contain box so and in this

1409
01:02:26,350 --> 01:02:31,569
config file we just define defined flows

1410
01:02:29,170 --> 01:02:33,190
to give to flow a name and we tell that

1411
01:02:31,570 --> 01:02:34,360
the packet type the few predefined

1412
01:02:33,190 --> 01:02:37,240
packet types otherwise you can use the

1413
01:02:34,360 --> 01:02:39,430
magic magic protocol stack saying again

1414
01:02:37,240 --> 01:02:41,560
and then this is basically the same

1415
01:02:39,430 --> 01:02:43,000
syntax just with a few syntactic sugar

1416
01:02:41,560 --> 01:02:44,170
things you need to tell it if it's a MAC

1417
01:02:43,000 --> 01:02:46,120
address you'd need to tell it if it's

1418
01:02:44,170 --> 01:02:48,190
nappy address and then you can define

1419
01:02:46,120 --> 01:02:51,190
things like dangerous or random or

1420
01:02:48,190 --> 01:02:56,050
angels which then get basically well not

1421
01:02:51,190 --> 01:02:57,610
compiled to code but they basically it's

1422
01:02:56,050 --> 01:02:59,620
efficient in the end it works there's a

1423
01:02:57,610 --> 01:03:01,750
lot of anonymous functions and magic in

1424
01:02:59,620 --> 01:03:03,819
this case there's your typical sin flat

1425
01:03:01,750 --> 01:03:06,550
example please don't copy paste and run

1426
01:03:03,820 --> 01:03:12,040
it because that ipv6 address is one of

1427
01:03:06,550 --> 01:03:15,700
my test servers and then once you have

1428
01:03:12,040 --> 01:03:17,470
these pretty of these flows you can few

1429
01:03:15,700 --> 01:03:19,779
predefined slow so I can define your own

1430
01:03:17,470 --> 01:03:22,899
one then you can under moonshine simple

1431
01:03:19,780 --> 01:03:25,210
interface type in start and the name of

1432
01:03:22,900 --> 01:03:26,710
your flow on which device to send on

1433
01:03:25,210 --> 01:03:28,820
which device you want to receive if you

1434
01:03:26,710 --> 01:03:30,380
want to just see counters for how much

1435
01:03:28,820 --> 01:03:32,540
stuff is getting back and then you can

1436
01:03:30,380 --> 01:03:34,280
set a few parameters like the packet

1437
01:03:32,540 --> 01:03:35,870
rate like if you want to use poor

1438
01:03:34,280 --> 01:03:38,150
software control if you want to use

1439
01:03:35,870 --> 01:03:40,069
whatever how many threats you want to

1440
01:03:38,150 --> 01:03:42,050
use bypassing the same device multiple

1441
01:03:40,070 --> 01:03:43,790
times you can combine different flows

1442
01:03:42,050 --> 01:03:46,970
you can set time limits for individual

1443
01:03:43,790 --> 01:03:50,660
flows and so on and you get then power

1444
01:03:46,970 --> 01:03:52,730
flow packet counters and yeah what you

1445
01:03:50,660 --> 01:03:54,440
also can do here which is often quite

1446
01:03:52,730 --> 01:03:56,240
annoying to debug something like this

1447
01:03:54,440 --> 01:03:57,650
because in the end you want to know what

1448
01:03:56,240 --> 01:03:59,689
it's actually sending out and then you

1449
01:03:57,650 --> 01:04:01,910
might end up using TCP dump on your

1450
01:03:59,690 --> 01:04:03,860
destination device or dumping methods

1451
01:04:01,910 --> 01:04:06,080
here's like a simply debugging interface

1452
01:04:03,860 --> 01:04:08,060
that can show you okay given this config

1453
01:04:06,080 --> 01:04:09,680
file in this configuration the packets

1454
01:04:08,060 --> 01:04:11,540
that I'm going to send out would look

1455
01:04:09,680 --> 01:04:13,609
like this here's an example of five

1456
01:04:11,540 --> 01:04:15,890
packets and these are the fields that

1457
01:04:13,610 --> 01:04:18,950
are being randomized or modified and

1458
01:04:15,890 --> 01:04:20,810
this is work in progress in particular I

1459
01:04:18,950 --> 01:04:22,819
know that I just recently broke the

1460
01:04:20,810 --> 01:04:26,120
Poisson process for the traffic

1461
01:04:22,820 --> 01:04:28,790
generation so yeah working on this will

1462
01:04:26,120 --> 01:04:33,500
get it fixed by next week somehow work

1463
01:04:28,790 --> 01:04:35,300
on update the duplicate no idea okay and

1464
01:04:33,500 --> 01:04:38,270
one last thing I want to show us how

1465
01:04:35,300 --> 01:04:39,950
others using using moongeun just so that

1466
01:04:38,270 --> 01:04:42,830
you might get an idea what have other

1467
01:04:39,950 --> 01:04:45,379
successfully done with it and how this

1468
01:04:42,830 --> 01:04:47,360
might be useful for for you or how this

1469
01:04:45,380 --> 01:04:49,730
might work and a few things I want to

1470
01:04:47,360 --> 01:04:53,780
pick out across the high profile

1471
01:04:49,730 --> 01:04:59,030
applications and in particular I want to

1472
01:04:53,780 --> 01:05:01,370
point out the the DNS DDoS resilience

1473
01:04:59,030 --> 01:05:05,000
tests and was just recently presented at

1474
01:05:01,370 --> 01:05:06,319
web 74 and they they contributed some

1475
01:05:05,000 --> 01:05:08,360
DNS logic to moongeun

1476
01:05:06,320 --> 01:05:10,580
as of course not a 14s implementation

1477
01:05:08,360 --> 01:05:12,530
but some boilerplate code to get DNS

1478
01:05:10,580 --> 01:05:14,600
queries and to randomize DNS queries in

1479
01:05:12,530 --> 01:05:16,250
an efficient and relatively simple way

1480
01:05:14,600 --> 01:05:18,650
the site I couldn't share the actual

1481
01:05:16,250 --> 01:05:20,270
code for the for the DDoS attacks for

1482
01:05:18,650 --> 01:05:24,140
legal reasons which apparently something

1483
01:05:20,270 --> 01:05:26,030
about Hacket rules and France also but

1484
01:05:24,140 --> 01:05:28,879
they contributed in escort and it should

1485
01:05:26,030 --> 01:05:32,740
be relatively simple to build some DNS

1486
01:05:28,880 --> 01:05:34,970
DDoS testing device based on top of that

1487
01:05:32,740 --> 01:05:37,189
so this is interesting because it uses

1488
01:05:34,970 --> 01:05:38,720
the complex protocol six and then the

1489
01:05:37,190 --> 01:05:40,270
last thing I want to point out this is

1490
01:05:38,720 --> 01:05:42,709
really interesting because they actually

1491
01:05:40,270 --> 01:05:44,990
used mundial how it was in

1492
01:05:42,710 --> 01:05:47,540
tended to be used most people just use

1493
01:05:44,990 --> 01:05:49,850
my standard example script which sends

1494
01:05:47,540 --> 01:05:51,680
out randomized to DP packets and say ok

1495
01:05:49,850 --> 01:05:53,060
it gets me the number of flows are type

1496
01:05:51,680 --> 01:05:56,359
in there and it gets me a latency that's

1497
01:05:53,060 --> 01:05:58,250
good enough and they maybe change one

1498
01:05:56,360 --> 01:05:59,990
line in the code but these guys and the

1499
01:05:58,250 --> 01:06:02,450
European a few project they really built

1500
01:05:59,990 --> 01:06:04,700
a nice test harness around Mondrian but

1501
01:06:02,450 --> 01:06:06,020
they actually use multi support multiple

1502
01:06:04,700 --> 01:06:08,109
different package generators and moon

1503
01:06:06,020 --> 01:06:11,270
Jonas one of them was one of the first

1504
01:06:08,110 --> 01:06:18,110
and I really like this because they

1505
01:06:11,270 --> 01:06:22,550
actually use their if you want to

1506
01:06:18,110 --> 01:06:26,600
alternate a more complex test also

1507
01:06:22,550 --> 01:06:29,180
picked over to the dust before switch

1508
01:06:26,600 --> 01:06:30,920
because they contributed the hardware

1509
01:06:29,180 --> 01:06:33,890
timestamp occurred for the into the 40

1510
01:06:30,920 --> 01:06:35,510
gigabit mix that was kind of annoying

1511
01:06:33,890 --> 01:06:39,069
work and I haven't done it I was just

1512
01:06:35,510 --> 01:06:39,070
right about to get into a Phineas

1513
01:06:41,000 --> 01:07:15,570
yeah so I hope you on which actually

1514
01:07:12,480 --> 01:07:18,900
very nice work and I'm pleasantly

1515
01:07:15,570 --> 01:07:20,850
surprised in packet generation the

1516
01:07:18,900 --> 01:07:23,850
package generation so far has been an

1517
01:07:20,850 --> 01:07:26,040
issue and the main of the expensive guys

1518
01:07:23,850 --> 01:07:28,680
and seeing an implementation is in VP

1519
01:07:26,040 --> 01:07:30,480
decay we know solves many of the

1520
01:07:28,680 --> 01:07:36,390
problems in especially up to a 10 gig

1521
01:07:30,480 --> 01:07:40,020
space so thank you for the work so I'll

1522
01:07:36,390 --> 01:07:42,000
ask a question um would it make sense to

1523
01:07:40,020 --> 01:07:45,330
come to one of our hackathons and

1524
01:07:42,000 --> 01:07:49,609
generate test traffic on the fly for

1525
01:07:45,330 --> 01:07:49,609
various people doing testing of their

1526
01:07:50,570 --> 01:08:03,990
any we need you next time I should have

1527
01:08:01,770 --> 01:08:08,009
thought of this but let's let's get you

1528
01:08:03,990 --> 01:08:11,279
there in London okay good yeah another

1529
01:08:08,010 --> 01:08:17,850
question yes thank you hi Paul

1530
01:08:11,280 --> 01:08:24,630
great talk as always al Morton closer

1531
01:08:17,850 --> 01:08:26,759
like yeah how's that you mentioned the

1532
01:08:24,630 --> 01:08:30,540
comparisons between packet generators

1533
01:08:26,759 --> 01:08:33,540
and the sensitivities of the devices

1534
01:08:30,540 --> 01:08:36,180
that are being tested like OVS and VPP

1535
01:08:33,540 --> 01:08:46,200
and so forth we've seen some of that in

1536
01:08:36,180 --> 01:08:49,529
in OPN fe testing anyway what would you

1537
01:08:46,200 --> 01:08:51,660
say to a specification that calibrated

1538
01:08:49,529 --> 01:08:53,549
the generators in other words like

1539
01:08:51,660 --> 01:08:58,470
policing kind of like policing the

1540
01:08:53,549 --> 01:09:00,000
police would would I mean I'm beginning

1541
01:08:58,470 --> 01:09:02,640
to think because of the sensitivities

1542
01:09:00,000 --> 01:09:04,529
we've we've seen and you've seen that

1543
01:09:02,640 --> 01:09:06,540
that might be a valuable spec to pursue

1544
01:09:04,529 --> 01:09:09,060
what's your thoughts that's an

1545
01:09:06,540 --> 01:09:11,160
interesting idea a subset I have some

1546
01:09:09,060 --> 01:09:15,330
condos I believe I have a few graphs

1547
01:09:11,160 --> 01:09:16,799
here like this is just 4 million packets

1548
01:09:15,330 --> 01:09:19,170
per second and a few software package

1549
01:09:16,799 --> 01:09:20,670
generators and how they even even

1550
01:09:19,170 --> 01:09:22,560
moonshine when configured to use pure

1551
01:09:20,670 --> 01:09:26,430
software doesn't quite hit this target

1552
01:09:22,560 --> 01:09:28,799
which is 250 nanoseconds but some

1553
01:09:26,430 --> 01:09:30,359
significant diverse and package on

1554
01:09:28,799 --> 01:09:31,620
duplicate is not not visible here but

1555
01:09:30,359 --> 01:09:33,089
they're huge outliers and they're

1556
01:09:31,620 --> 01:09:36,509
because the printer statistics in the

1557
01:09:33,089 --> 01:09:38,189
same certains a really bad idea and I'm

1558
01:09:36,509 --> 01:09:41,370
just wondering how such a specification

1559
01:09:38,189 --> 01:09:44,669
might look like the the paper we did

1560
01:09:41,370 --> 01:09:47,160
it's unfortunately now 1/2 years or so

1561
01:09:44,670 --> 01:09:48,839
it doesn't include Cisco TX packet

1562
01:09:47,160 --> 01:09:53,339
generator which would have been a really

1563
01:09:48,839 --> 01:09:55,590
interesting addition and this what looks

1564
01:09:53,339 --> 01:10:00,900
like was a different package generator

1565
01:09:55,590 --> 01:10:04,200
different control methods so what we did

1566
01:10:00,900 --> 01:10:08,030
was we used an FPGA for that to just

1567
01:10:04,200 --> 01:10:11,400
really precisely measure how to how they

1568
01:10:08,030 --> 01:10:15,990
interpret cap actually behaves and that

1569
01:10:11,400 --> 01:10:17,929
was it was quite challenging so any

1570
01:10:15,990 --> 01:10:19,860
thoughts on how you would specify that

1571
01:10:17,930 --> 01:10:23,250
I'm sorry say again

1572
01:10:19,860 --> 01:10:24,839
any thoughts on you what metric you

1573
01:10:23,250 --> 01:10:27,030
would look for how you can break it down

1574
01:10:24,840 --> 01:10:28,620
to a single number I mean what the yes

1575
01:10:27,030 --> 01:10:31,679
the means crowd error but it's I believe

1576
01:10:28,620 --> 01:10:34,050
not a very good metric because yeah well

1577
01:10:31,680 --> 01:10:36,260
I mean if you have a target and it's as

1578
01:10:34,050 --> 01:10:38,370
stark as comparing those two slides

1579
01:10:36,260 --> 01:10:40,440
maybe maybe just looking at the

1580
01:10:38,370 --> 01:10:42,599
distributions says all but that but I

1581
01:10:40,440 --> 01:10:47,490
think the bottom line is we need to

1582
01:10:42,600 --> 01:10:51,930
learn from really everyone's work that

1583
01:10:47,490 --> 01:10:53,910
CBR streams aren't really realistic yes

1584
01:10:51,930 --> 01:10:55,890
we should we should have different

1585
01:10:53,910 --> 01:10:56,160
specifications in the benchmarking that

1586
01:10:55,890 --> 01:11:00,240
we're

1587
01:10:56,160 --> 01:11:01,559
do and then we need to ask the question

1588
01:11:00,240 --> 01:11:03,300
across different generators how

1589
01:11:01,560 --> 01:11:04,890
accurately are they producing the

1590
01:11:03,300 --> 01:11:06,780
streams that we desire so we have a

1591
01:11:04,890 --> 01:11:08,550
template and it ends up being the thing

1592
01:11:06,780 --> 01:11:10,740
that we compare against yep I think

1593
01:11:08,550 --> 01:11:12,450
that's that's this person's actually

1594
01:11:10,740 --> 01:11:14,070
easier to generate because easier to

1595
01:11:12,450 --> 01:11:17,250
scale up to process new processor

1596
01:11:14,070 --> 01:11:21,540
process and CBR try to motivate edits

1597
01:11:17,250 --> 01:11:22,560
can't do it can't do it reasonably so I

1598
01:11:21,540 --> 01:11:27,540
hope to see you this afternoon

1599
01:11:22,560 --> 01:11:29,670
Thanks yes thank you very much and that

1600
01:11:27,540 --> 01:11:32,250
sounds like a very good hallway further

1601
01:11:29,670 --> 01:11:34,410
conversation in a hallway we have our

1602
01:11:32,250 --> 01:11:36,590
next speaker momentarily we're just

1603
01:11:34,410 --> 01:11:56,160
switch shifting so thank you Paul and

1604
01:11:36,590 --> 01:12:01,410
we'll see you at the next idea okay okay

1605
01:11:56,160 --> 01:12:06,480
so our second speaker is I've been

1606
01:12:01,410 --> 01:12:10,559
practicing no is rolling round race fake

1607
01:12:06,480 --> 01:12:14,370
day from you twin that vente and surf

1608
01:12:10,560 --> 01:12:17,010
net he'll say it better but and he has

1609
01:12:14,370 --> 01:12:18,690
been as a speaker here before and thank

1610
01:12:17,010 --> 01:12:22,320
you for being here and I think you'll

1611
01:12:18,690 --> 01:12:23,910
enjoy this talk - Thank You Allison so

1612
01:12:22,320 --> 01:12:25,590
it's actually pronounced lowland fungi

1613
01:12:23,910 --> 01:12:29,340
swag day but I'm not going to torture

1614
01:12:25,590 --> 01:12:31,800
people and force them to do that so my

1615
01:12:29,340 --> 01:12:34,110
talk today is going to be about the use

1616
01:12:31,800 --> 01:12:37,110
of elliptic curve cryptography in DNS

1617
01:12:34,110 --> 01:12:40,860
SEC which is what the paper that was

1618
01:12:37,110 --> 01:12:42,120
that got da NRP was actually about and

1619
01:12:40,860 --> 01:12:44,460
I'm going to go into a little bit more

1620
01:12:42,120 --> 01:12:48,120
detail about some follow-up work that we

1621
01:12:44,460 --> 01:12:49,260
did after writing that paper and also

1622
01:12:48,120 --> 01:12:51,330
going to go into some detail about

1623
01:12:49,260 --> 01:12:53,910
adoption of these cryptographic

1624
01:12:51,330 --> 01:12:55,830
algorithms in B in a sec and since Paul

1625
01:12:53,910 --> 01:12:58,710
did a really nice introduction of

1626
01:12:55,830 --> 01:13:02,940
himself I decided to add one slide about

1627
01:12:58,710 --> 01:13:05,099
myself because I made that step and

1628
01:13:02,940 --> 01:13:08,428
actually wrote the thesis

1629
01:13:05,099 --> 01:13:18,269
and if and defended it on June 28 this

1630
01:13:08,429 --> 01:13:20,639
year and this is thank you this is me

1631
01:13:18,269 --> 01:13:22,050
surrounded by my committee you may

1632
01:13:20,639 --> 01:13:23,999
recognize some of the people in that

1633
01:13:22,050 --> 01:13:30,300
committee some of them are here in the

1634
01:13:23,999 --> 01:13:32,280
room so no pressure no pressure but I'm

1635
01:13:30,300 --> 01:13:35,099
gonna go into the the meat of the

1636
01:13:32,280 --> 01:13:36,478
presentation now and I'm not going to

1637
01:13:35,099 --> 01:13:37,800
repeat all of the earlier research we

1638
01:13:36,479 --> 01:13:40,820
did there are some pointers on the

1639
01:13:37,800 --> 01:13:44,429
slices slides are actually up on the

1640
01:13:40,820 --> 01:13:46,590
material site for this this meeting and

1641
01:13:44,429 --> 01:13:48,149
at the end there is a set of references

1642
01:13:46,590 --> 01:13:49,590
to all the papers I'm referring to so if

1643
01:13:48,149 --> 01:13:54,510
you want to look to us up you can look

1644
01:13:49,590 --> 01:13:57,300
us up offline so in earlier research we

1645
01:13:54,510 --> 01:13:59,129
looked at issues with DNS sex

1646
01:13:57,300 --> 01:14:00,809
specifically and there are two things

1647
01:13:59,129 --> 01:14:04,019
that we focus on which were technical

1648
01:14:00,809 --> 01:14:05,550
issues and the first was that if you

1649
01:14:04,019 --> 01:14:07,590
start deploying the in a sec you may

1650
01:14:05,550 --> 01:14:09,749
encounter packet fragmentation and this

1651
01:14:07,590 --> 01:14:12,239
can cause issues and an earlier work we

1652
01:14:09,749 --> 01:14:13,949
actually saw that up to 10% of resolvers

1653
01:14:12,239 --> 01:14:16,648
on the internet have issues receiving

1654
01:14:13,949 --> 01:14:18,570
fragmented responses which causes delays

1655
01:14:16,649 --> 01:14:20,459
or in a worst case scenario actually

1656
01:14:18,570 --> 01:14:22,079
causes them to be unable to resolve

1657
01:14:20,459 --> 01:14:25,469
certain domain names that are DNA sex

1658
01:14:22,079 --> 01:14:29,129
and the other issue of course is that

1659
01:14:25,469 --> 01:14:30,719
because packets are a lot larger DNS a

1660
01:14:29,129 --> 01:14:32,789
can easily be abused for denial of

1661
01:14:30,719 --> 01:14:34,439
service attacks and it in the past few

1662
01:14:32,789 --> 01:14:37,079
years it has actually been abused for

1663
01:14:34,439 --> 01:14:40,139
that purpose and there have been reports

1664
01:14:37,079 --> 01:14:42,929
about that in the media now all of these

1665
01:14:40,139 --> 01:14:44,369
issues are linked to the fact that DNS

1666
01:14:42,929 --> 01:14:46,229
egg makes your response size a lot

1667
01:14:44,369 --> 01:14:50,070
bigger because it includes signatures

1668
01:14:46,229 --> 01:14:51,719
and keys in the DNS packets and in an

1669
01:14:50,070 --> 01:14:53,969
earlier paper we actually argued that

1670
01:14:51,719 --> 01:14:56,669
the root cause of all of these problems

1671
01:14:53,969 --> 01:14:58,590
might be that RSA was chosen as default

1672
01:14:56,669 --> 01:15:00,749
cipher for a DNS SEC because if you

1673
01:14:58,590 --> 01:15:03,059
think about it if you use RSA 1024 bit

1674
01:15:00,749 --> 01:15:06,780
or 2048 bit and every signature adds

1675
01:15:03,059 --> 01:15:09,209
hundreds of bytes to your packet and and

1676
01:15:06,780 --> 01:15:11,280
that quickly inflates packet sizes so

1677
01:15:09,209 --> 01:15:12,659
this made us wonder it can't be do

1678
01:15:11,280 --> 01:15:17,459
anything better can we use for instance

1679
01:15:12,659 --> 01:15:18,000
ECC so elliptic curve cryptography run

1680
01:15:17,459 --> 01:15:22,080
from

1681
01:15:18,000 --> 01:15:23,670
with asymmetric crypto achieves the same

1682
01:15:22,080 --> 01:15:25,410
goals as RSA so it's public key

1683
01:15:23,670 --> 01:15:27,750
cryptography you can do signatures with

1684
01:15:25,410 --> 01:15:29,580
it but the nice thing about ECC is that

1685
01:15:27,750 --> 01:15:32,670
the both the keys and the signatures are

1686
01:15:29,580 --> 01:15:33,750
much smaller than they are for RSA while

1687
01:15:32,670 --> 01:15:36,710
they offer greater cryptographic

1688
01:15:33,750 --> 01:15:39,540
strength and to give you an example a

1689
01:15:36,710 --> 01:15:42,150
typical kiss is used for elliptic curve

1690
01:15:39,540 --> 01:15:46,200
cryptography is using a torrent 56 bit

1691
01:15:42,150 --> 01:15:48,360
group that gives you a 512 bit key and

1692
01:15:46,200 --> 01:15:51,030
signature in indiana ii that's four

1693
01:15:48,360 --> 01:15:52,380
times smaller than for instance RSA 2048

1694
01:15:51,030 --> 01:15:56,160
so that's attractive because it makes

1695
01:15:52,380 --> 01:15:58,320
your package much smaller so why

1696
01:15:56,160 --> 01:16:02,309
wouldn't we switch to ECC immediately

1697
01:15:58,320 --> 01:16:04,860
for DNS SEC well to quote our essays RFC

1698
01:16:02,310 --> 01:16:06,720
605 which is the RFC that actually

1699
01:16:04,860 --> 01:16:09,179
standardizes the use of the elliptic

1700
01:16:06,720 --> 01:16:12,120
curve digital signature algorithm in DNS

1701
01:16:09,180 --> 01:16:13,770
SEC validating RSA signatures is

1702
01:16:12,120 --> 01:16:16,410
significantly faster than validating

1703
01:16:13,770 --> 01:16:18,660
ECDSA signatures about five times faster

1704
01:16:16,410 --> 01:16:22,790
in some implementations it's kind of a

1705
01:16:18,660 --> 01:16:25,860
weird way of saying ECDSA is slower and

1706
01:16:22,790 --> 01:16:29,150
this potentially means that if we switch

1707
01:16:25,860 --> 01:16:31,589
all of our signing for DNS SEC over to

1708
01:16:29,150 --> 01:16:33,240
ECC that we're pushing problems to the

1709
01:16:31,590 --> 01:16:35,760
edge of the network right because

1710
01:16:33,240 --> 01:16:37,889
validators are the machines that do all

1711
01:16:35,760 --> 01:16:39,660
this nasty work for you of doing a full

1712
01:16:37,890 --> 01:16:41,100
dns resolution and they all have to

1713
01:16:39,660 --> 01:16:42,960
validate these signatures and we might

1714
01:16:41,100 --> 01:16:45,840
be increasing their load significantly

1715
01:16:42,960 --> 01:16:49,950
if we start using these cryptographic

1716
01:16:45,840 --> 01:16:52,560
algorithms and actually this is five

1717
01:16:49,950 --> 01:16:55,950
times faster which you should actually

1718
01:16:52,560 --> 01:16:58,650
read as five times slower is a bit

1719
01:16:55,950 --> 01:17:01,889
optimistic so we did some benchmarking

1720
01:16:58,650 --> 01:17:04,559
and it's it's way worse than this so the

1721
01:17:01,890 --> 01:17:08,340
goal of the study in this paper was if

1722
01:17:04,560 --> 01:17:10,710
we switch DNS sick from using RSA to

1723
01:17:08,340 --> 01:17:13,560
using ECC how does that impact

1724
01:17:10,710 --> 01:17:15,840
validating DNS resolvers right so rather

1725
01:17:13,560 --> 01:17:17,820
than recommend to everyone well these

1726
01:17:15,840 --> 01:17:20,070
easy say ECC signatures are much smaller

1727
01:17:17,820 --> 01:17:21,870
it's really nice to switch to them let's

1728
01:17:20,070 --> 01:17:24,929
work out if we're not introducing a new

1729
01:17:21,870 --> 01:17:26,809
problem by giving this recommendation

1730
01:17:24,930 --> 01:17:29,989
and that was the purpose of this study

1731
01:17:26,810 --> 01:17:34,280
so how do we go about doing this

1732
01:17:29,989 --> 01:17:37,009
we decided to do a measurement study and

1733
01:17:34,280 --> 01:17:38,630
some modeling for this and our method

1734
01:17:37,010 --> 01:17:41,119
I'm gonna describe our methodology in

1735
01:17:38,630 --> 01:17:42,710
the next couple of slides and we started

1736
01:17:41,119 --> 01:17:44,480
out from the premise that we want that

1737
01:17:42,710 --> 01:17:46,100
we had this intuition that if we knew

1738
01:17:44,480 --> 01:17:48,049
the number of outgoing queries from

1739
01:17:46,100 --> 01:17:49,909
resolver so that's not incoming queries

1740
01:17:48,050 --> 01:17:51,619
for clients that's the queries the

1741
01:17:49,909 --> 01:17:54,500
resolver sends to authoritative name

1742
01:17:51,619 --> 01:17:56,179
servers on the internet that we might be

1743
01:17:54,500 --> 01:17:58,429
able to predict the number of signatures

1744
01:17:56,179 --> 01:18:00,710
validations that it has to perform given

1745
01:17:58,429 --> 01:18:02,929
that load right and that was our premise

1746
01:18:00,710 --> 01:18:05,600
and I'm gonna get I'm gonna talk you to

1747
01:18:02,929 --> 01:18:08,119
four factors that influence the number

1748
01:18:05,600 --> 01:18:10,489
of signature validations that a resolver

1749
01:18:08,119 --> 01:18:13,580
will have to perform now the first

1750
01:18:10,489 --> 01:18:15,799
factor is that for every query that a

1751
01:18:13,580 --> 01:18:18,139
dns resolver sends to an authoritative

1752
01:18:15,800 --> 01:18:20,480
nameserver on the internet it will not

1753
01:18:18,139 --> 01:18:22,100
always get a response right so the

1754
01:18:20,480 --> 01:18:25,549
number of responses that come back are

1755
01:18:22,100 --> 01:18:28,159
somehow a factor in this the second

1756
01:18:25,550 --> 01:18:32,270
thing is that because dns a is far from

1757
01:18:28,159 --> 01:18:33,559
universally deployed not every response

1758
01:18:32,270 --> 01:18:35,270
that you get back from an authoritative

1759
01:18:33,560 --> 01:18:37,429
nameserver all can contain signatures

1760
01:18:35,270 --> 01:18:39,199
right so you won't have to validate

1761
01:18:37,429 --> 01:18:43,159
signatures for every response that you

1762
01:18:39,199 --> 01:18:45,259
get back the third factor is the number

1763
01:18:43,159 --> 01:18:48,460
of signatures in the response that

1764
01:18:45,260 --> 01:18:51,920
contains signatures right because while

1765
01:18:48,460 --> 01:18:54,020
you might expect a response to contain a

1766
01:18:51,920 --> 01:18:56,659
single signature for the record that you

1767
01:18:54,020 --> 01:18:58,670
requested actually we observe that on

1768
01:18:56,659 --> 01:19:00,259
average every response that contains

1769
01:18:58,670 --> 01:19:03,650
signatures has somewhere in the order of

1770
01:19:00,260 --> 01:19:05,540
between 2.4 and 2.5 signatures per

1771
01:19:03,650 --> 01:19:06,559
response that has signatures that's

1772
01:19:05,540 --> 01:19:08,449
because there are signatures in the

1773
01:19:06,560 --> 01:19:10,550
additional section there might be extra

1774
01:19:08,449 --> 01:19:13,940
records in there that require signatures

1775
01:19:10,550 --> 01:19:15,710
so this intuition doesn't hold there are

1776
01:19:13,940 --> 01:19:19,059
more signatures in a response than just

1777
01:19:15,710 --> 01:19:22,159
for the record that you requested

1778
01:19:19,060 --> 01:19:23,869
finally your resolver may not have to

1779
01:19:22,159 --> 01:19:25,730
validate each in every signature in that

1780
01:19:23,869 --> 01:19:27,949
response either because it's already

1781
01:19:25,730 --> 01:19:29,750
validated one and it's cached it or

1782
01:19:27,949 --> 01:19:32,150
because it's in the authority or

1783
01:19:29,750 --> 01:19:34,100
additional section and it decides not to

1784
01:19:32,150 --> 01:19:38,059
validate those right it doesn't have to

1785
01:19:34,100 --> 01:19:40,040
validate those and another reason for

1786
01:19:38,060 --> 01:19:41,900
why it might not validate signatures is

1787
01:19:40,040 --> 01:19:42,420
because it doesn't have a full chain of

1788
01:19:41,900 --> 01:19:44,099
trust

1789
01:19:42,420 --> 01:19:47,190
the way up to the root so it might not

1790
01:19:44,100 --> 01:19:48,300
be able to validate that particular

1791
01:19:47,190 --> 01:19:51,660
signature and it's not going to bother

1792
01:19:48,300 --> 01:19:53,820
to spend the CPU cycles on it right and

1793
01:19:51,660 --> 01:19:55,320
to remind you again we do not measure

1794
01:19:53,820 --> 01:19:56,670
the number of queries from clients

1795
01:19:55,320 --> 01:19:58,139
because that very strongly between

1796
01:19:56,670 --> 01:20:01,020
resolvers we wanted to build a model

1797
01:19:58,140 --> 01:20:03,960
that we can apply to any resolver

1798
01:20:01,020 --> 01:20:05,610
regardless of its client population and

1799
01:20:03,960 --> 01:20:07,290
if I'm not gonna go into detail in the

1800
01:20:05,610 --> 01:20:09,509
presentation but in the paper you will

1801
01:20:07,290 --> 01:20:11,880
see that the model is actually a little

1802
01:20:09,510 --> 01:20:14,699
bit less accurate for resolvers that

1803
01:20:11,880 --> 01:20:15,900
have a small client population but those

1804
01:20:14,699 --> 01:20:18,059
are the resolver that we really don't

1805
01:20:15,900 --> 01:20:19,830
have to worry about as much because they

1806
01:20:18,060 --> 01:20:21,360
will be validating far fewer signatures

1807
01:20:19,830 --> 01:20:26,820
because they're processing far fewer

1808
01:20:21,360 --> 01:20:28,980
queries right so how did we measure this

1809
01:20:26,820 --> 01:20:31,769
this picture shows you our measurement

1810
01:20:28,980 --> 01:20:33,540
setup and on the left hand side you see

1811
01:20:31,770 --> 01:20:35,670
clients which is typically you with your

1812
01:20:33,540 --> 01:20:37,280
laptop unless you're an idiot like me

1813
01:20:35,670 --> 01:20:41,100
that runs the resolver on their laptop

1814
01:20:37,280 --> 01:20:43,080
and then what we did was we captured

1815
01:20:41,100 --> 01:20:45,780
traffic that was going to production DNS

1816
01:20:43,080 --> 01:20:48,510
resolvers and then we forward this

1817
01:20:45,780 --> 01:20:50,219
traffic to an instrumented DNS resolver

1818
01:20:48,510 --> 01:20:51,600
so we're sending a copy of the exact

1819
01:20:50,219 --> 01:20:53,370
query traffic that goes to a production

1820
01:20:51,600 --> 01:20:55,860
resolver to one that we instrument and

1821
01:20:53,370 --> 01:20:58,530
then we measure certain factors on that

1822
01:20:55,860 --> 01:21:00,599
so to make sure that our instrument the

1823
01:20:58,530 --> 01:21:02,880
resolver is actually performing in a

1824
01:21:00,600 --> 01:21:04,469
normal way we measure the number of

1825
01:21:02,880 --> 01:21:06,150
queries from clients in the number of

1826
01:21:04,469 --> 01:21:07,949
responses sent back to clients which you

1827
01:21:06,150 --> 01:21:09,599
see on the left hand side marked as QC

1828
01:21:07,949 --> 01:21:10,980
and RC and compare that to the

1829
01:21:09,600 --> 01:21:12,449
production resolver right just to make

1830
01:21:10,980 --> 01:21:14,218
sure that we are observing the same

1831
01:21:12,449 --> 01:21:16,080
thing right because if we instrument

1832
01:21:14,219 --> 01:21:17,580
resolved when we break it and it and it

1833
01:21:16,080 --> 01:21:20,250
doesn't respond to clients as it should

1834
01:21:17,580 --> 01:21:22,440
that would be a mess right and there's

1835
01:21:20,250 --> 01:21:24,000
some some stuff in the paper about the

1836
01:21:22,440 --> 01:21:26,460
ethics of this because of course we're

1837
01:21:24,000 --> 01:21:27,989
sending people's traffic to an

1838
01:21:26,460 --> 01:21:29,370
instrument to resolve rennie we don't

1839
01:21:27,989 --> 01:21:32,820
want to violate their privacy so he took

1840
01:21:29,370 --> 01:21:35,250
some measures for that on the instrument

1841
01:21:32,820 --> 01:21:37,679
instrumental resolver we measure on the

1842
01:21:35,250 --> 01:21:39,179
alcohol in link towards the Internet so

1843
01:21:37,679 --> 01:21:40,530
where the resolver talks to a third

1844
01:21:39,179 --> 01:21:42,090
dative name servers the number of

1845
01:21:40,530 --> 01:21:44,160
queries it sends so all of these factors

1846
01:21:42,090 --> 01:21:46,500
that I talked about in the previous set

1847
01:21:44,160 --> 01:21:47,699
of slides and the numbers of signatures

1848
01:21:46,500 --> 01:21:49,080
that it validates and for that we

1849
01:21:47,699 --> 01:21:50,879
actually had to alter the code of the

1850
01:21:49,080 --> 01:21:52,500
resolver right because this is not

1851
01:21:50,880 --> 01:21:54,489
something that most resolver

1852
01:21:52,500 --> 01:21:57,429
implementations typically

1853
01:21:54,489 --> 01:21:59,678
keep statistics for so in this case we

1854
01:21:57,429 --> 01:22:05,349
modified bind and unbound to record this

1855
01:21:59,679 --> 01:22:07,389
number of validated signatures if we

1856
01:22:05,349 --> 01:22:08,590
then look at all of these four factors

1857
01:22:07,389 --> 01:22:10,900
that I described in the methodology

1858
01:22:08,590 --> 01:22:15,130
slide and you plot those as a scatter

1859
01:22:10,900 --> 01:22:16,659
plot and then you see from top left to

1860
01:22:15,130 --> 01:22:18,999
bottom right all of the four factors so

1861
01:22:16,659 --> 01:22:20,650
a shows you the number of queries on the

1862
01:22:18,999 --> 01:22:23,679
x-axis number of responses that come

1863
01:22:20,650 --> 01:22:26,650
back on the y-axis B shows you the

1864
01:22:23,679 --> 01:22:28,769
number of responses on X verses number

1865
01:22:26,650 --> 01:22:32,768
of responses containing signatures on Y

1866
01:22:28,769 --> 01:22:35,139
C shows you number of response a number

1867
01:22:32,769 --> 01:22:37,119
of signatures per response and D is a

1868
01:22:35,139 --> 01:22:39,699
number of signatures that are actually

1869
01:22:37,119 --> 01:22:43,480
validated or fraction of signatures

1870
01:22:39,699 --> 01:22:45,070
that's actually getting validated now if

1871
01:22:43,480 --> 01:22:46,480
you look at these graphs then your

1872
01:22:45,070 --> 01:22:48,119
intuition might be that you could model

1873
01:22:46,480 --> 01:22:50,619
this with a linear model although

1874
01:22:48,119 --> 01:22:53,139
especially graph B has a lot of noise in

1875
01:22:50,619 --> 01:22:54,219
it but as it turns out graph B is not

1876
01:22:53,139 --> 01:22:56,920
the one that we want to worry about

1877
01:22:54,219 --> 01:22:58,119
which is the number of responses that

1878
01:22:56,920 --> 01:22:59,499
contain signatures because we're

1879
01:22:58,119 --> 01:23:01,869
actually going to use that later on in

1880
01:22:59,499 --> 01:23:06,219
the model so there the accuracy is not

1881
01:23:01,869 --> 01:23:07,539
an issue for the other ones we tried if

1882
01:23:06,219 --> 01:23:11,070
we can approximate this with a linear

1883
01:23:07,539 --> 01:23:13,360
model and it turns out that we can so

1884
01:23:11,070 --> 01:23:16,058
I'm not going to talk you through all of

1885
01:23:13,360 --> 01:23:19,289
this but we came the details are in the

1886
01:23:16,059 --> 01:23:21,550
paper but we created a simple set of

1887
01:23:19,289 --> 01:23:23,920
linear equations that you can then

1888
01:23:21,550 --> 01:23:26,619
combine to make a model for validating

1889
01:23:23,920 --> 01:23:28,269
resolver and it has four important

1890
01:23:26,619 --> 01:23:29,860
parameters so the first one is the

1891
01:23:28,269 --> 01:23:31,329
average number of responses per query

1892
01:23:29,860 --> 01:23:33,130
and this is something that you need to

1893
01:23:31,329 --> 01:23:35,380
measure on an operating resolver to

1894
01:23:33,130 --> 01:23:36,400
actually populate the model so these are

1895
01:23:35,380 --> 01:23:40,570
parameters that you would need to

1896
01:23:36,400 --> 01:23:44,230
measure the fraction of responses with

1897
01:23:40,570 --> 01:23:46,749
signatures and the average number of

1898
01:23:44,230 --> 01:23:50,230
signatures per response and the fraction

1899
01:23:46,749 --> 01:23:54,858
of signatures that is validated oh is

1900
01:23:50,230 --> 01:23:58,188
the mic broken again oh dear better Oh

1901
01:23:54,859 --> 01:24:03,169
okay I'll try to eat the mic and

1902
01:23:58,189 --> 01:24:05,329
somebody suggested yesterday okay so of

1903
01:24:03,169 --> 01:24:06,858
course if you make such a model you need

1904
01:24:05,329 --> 01:24:09,379
to validate if it works so we validate

1905
01:24:06,859 --> 01:24:11,510
or we said we set out four criteria that

1906
01:24:09,379 --> 01:24:12,979
we use to validate this model now the

1907
01:24:11,510 --> 01:24:14,659
first one is that we wanted to make sure

1908
01:24:12,979 --> 01:24:16,760
that the model works for different DNS

1909
01:24:14,659 --> 01:24:20,239
resolver implementation so we tested it

1910
01:24:16,760 --> 01:24:21,859
for unbound and bind and actually I had

1911
01:24:20,239 --> 01:24:23,898
a student do some tests with para deenis

1912
01:24:21,859 --> 01:24:26,599
as well which at the time they were

1913
01:24:23,899 --> 01:24:28,159
implementing validation in their

1914
01:24:26,599 --> 01:24:29,449
resolver and fertility wasn't stable

1915
01:24:28,159 --> 01:24:31,188
enough and the same is true for not

1916
01:24:29,449 --> 01:24:33,138
resolver which was then still under

1917
01:24:31,189 --> 01:24:34,879
development but in principle you could

1918
01:24:33,139 --> 01:24:37,579
apply to those two and we did some tests

1919
01:24:34,879 --> 01:24:39,129
with it now the second thing we wanted

1920
01:24:37,579 --> 01:24:42,228
to validate is whether the model has

1921
01:24:39,129 --> 01:24:44,179
stable properties over time and actually

1922
01:24:42,229 --> 01:24:46,849
like I said only alpha s which is the

1923
01:24:44,179 --> 01:24:49,219
number of the fraction of responding

1924
01:24:46,849 --> 01:24:51,109
responses that contain signatures can

1925
01:24:49,219 --> 01:24:52,909
vary significantly over time because we

1926
01:24:51,109 --> 01:24:54,320
varied this parameter to do to make

1927
01:24:52,909 --> 01:24:56,329
predictions right so we don't really

1928
01:24:54,320 --> 01:24:58,429
care if that's stable over time but the

1929
01:24:56,329 --> 01:24:59,898
other factor should be more or less

1930
01:24:58,429 --> 01:25:01,669
stable over time so we measured over a

1931
01:24:59,899 --> 01:25:04,849
five month period and didn't see major

1932
01:25:01,669 --> 01:25:10,010
changes in in these two in the rest of

1933
01:25:04,849 --> 01:25:11,239
the parameters of the model we also

1934
01:25:10,010 --> 01:25:12,679
wanted to make sure that this model

1935
01:25:11,239 --> 01:25:14,869
works for different client populations

1936
01:25:12,679 --> 01:25:17,599
so we use traffic from four sources to

1937
01:25:14,869 --> 01:25:18,768
test the model we used so I work for

1938
01:25:17,599 --> 01:25:20,659
certain international research in

1939
01:25:18,769 --> 01:25:23,030
education network in the Netherlands so

1940
01:25:20,659 --> 01:25:25,219
we used traffic to three of our

1941
01:25:23,030 --> 01:25:28,429
production resolvers but we also use

1942
01:25:25,219 --> 01:25:31,489
traffic to one of the resolvers for my

1943
01:25:28,429 --> 01:25:34,249
University and in addition to this

1944
01:25:31,489 --> 01:25:38,419
because we realized that we may not have

1945
01:25:34,249 --> 01:25:40,728
typical resolvers because we have

1946
01:25:38,419 --> 01:25:43,010
certain client populations we also did

1947
01:25:40,729 --> 01:25:45,409
some worst case estimations that are in

1948
01:25:43,010 --> 01:25:47,809
the paper where we take sort of worst

1949
01:25:45,409 --> 01:25:52,579
case estimates for all of the parameters

1950
01:25:47,809 --> 01:25:53,929
of the model and finally we checked if

1951
01:25:52,579 --> 01:25:56,239
the model is actually a good predictor

1952
01:25:53,929 --> 01:25:58,070
of empirically observed data so what we

1953
01:25:56,239 --> 01:25:59,449
did was we populated the model make

1954
01:25:58,070 --> 01:26:00,919
predictions of what we thought the

1955
01:25:59,449 --> 01:26:02,388
number of signatures that we need to

1956
01:26:00,919 --> 01:26:04,068
validate was going to be and then

1957
01:26:02,389 --> 01:26:06,769
compare that to what we saw in actual

1958
01:26:04,069 --> 01:26:08,099
practice and again the details for that

1959
01:26:06,769 --> 01:26:09,539
are in the paper

1960
01:26:08,099 --> 01:26:14,099
but we did some statistical

1961
01:26:09,539 --> 01:26:15,539
goodness-of-fit tests for that now the

1962
01:26:14,099 --> 01:26:17,249
next thing that we have to do is now

1963
01:26:15,539 --> 01:26:19,469
that we are we have a model for

1964
01:26:17,249 --> 01:26:22,199
predicting the number of signature

1965
01:26:19,469 --> 01:26:24,539
validations that are required we of

1966
01:26:22,199 --> 01:26:26,669
course need to know how ECC performs

1967
01:26:24,539 --> 01:26:29,249
right and although there are some

1968
01:26:26,669 --> 01:26:32,909
benchmarks publicly available that we

1969
01:26:29,249 --> 01:26:34,139
used in in in an earlier paper we wanted

1970
01:26:32,909 --> 01:26:36,209
to make sure that we had up-to-date

1971
01:26:34,139 --> 01:26:38,760
benchmarks so we took five

1972
01:26:36,209 --> 01:26:40,379
implementations of elliptic curve

1973
01:26:38,760 --> 01:26:42,749
cryptography and benchmarked those on

1974
01:26:40,379 --> 01:26:45,809
them on a modern CPU we took three

1975
01:26:42,749 --> 01:26:48,478
versions of OpenSSL one that we consider

1976
01:26:45,809 --> 01:26:50,280
legacy so you'll see that in in older

1977
01:26:48,479 --> 01:26:52,469
distributions one that we considered

1978
01:26:50,280 --> 01:26:55,199
long term support because it's in in all

1979
01:26:52,469 --> 01:26:56,789
of the long term support versions of for

1980
01:26:55,199 --> 01:26:58,648
instance the major Linux distributions

1981
01:26:56,789 --> 01:27:00,179
and one that we considered at the time

1982
01:26:58,649 --> 01:27:02,280
to be new and optimized and it's

1983
01:27:00,179 --> 01:27:07,709
actually moved moving into long term

1984
01:27:02,280 --> 01:27:12,539
support now and that had optimized

1985
01:27:07,709 --> 01:27:14,099
implementations of ECDSA P 256 so that

1986
01:27:12,539 --> 01:27:16,739
is the algorithm that we expect will be

1987
01:27:14,099 --> 01:27:21,389
used the most in DNS SEC at this point

1988
01:27:16,739 --> 01:27:26,699
in time and actually there is now open

1989
01:27:21,389 --> 01:27:29,010
SSL 1.1 at zero which does not perform

1990
01:27:26,699 --> 01:27:30,509
that differently from 102 so this is

1991
01:27:29,010 --> 01:27:34,499
actually still a good set of benchmarks

1992
01:27:30,510 --> 01:27:36,599
to use today then we looked at the newer

1993
01:27:34,499 --> 01:27:37,949
elliptic curve algorithms edie two four

1994
01:27:36,599 --> 01:27:39,510
five one nine and eighty four four eight

1995
01:27:37,949 --> 01:27:41,969
which have only recently been

1996
01:27:39,510 --> 01:27:43,409
standardized for use in DNS SEC and

1997
01:27:41,969 --> 01:27:44,999
there again we took optimize the

1998
01:27:43,409 --> 01:27:48,688
implementations of these two algorithms

1999
01:27:44,999 --> 01:27:50,639
because the the reference implementation

2000
01:27:48,689 --> 01:27:52,649
of those don't perform very well

2001
01:27:50,639 --> 01:27:54,749
so we took optimized versions there and

2002
01:27:52,649 --> 01:27:56,969
then what we did was we did a hundred

2003
01:27:54,749 --> 01:27:58,648
tests of running the algorithm for 10

2004
01:27:56,969 --> 01:28:00,510
seconds and then measuring how many

2005
01:27:58,649 --> 01:28:03,419
signature validations it will perform in

2006
01:28:00,510 --> 01:28:05,340
that period and the details of the

2007
01:28:03,419 --> 01:28:10,590
benchmarks are in the paper to give you

2008
01:28:05,340 --> 01:28:13,109
some idea so EC T is AP two five six is

2009
01:28:10,590 --> 01:28:15,059
an order of magnitude slower than RSA

2010
01:28:13,109 --> 01:28:16,800
1024 and why is that a good comparison

2011
01:28:15,059 --> 01:28:18,239
because we're you could argue that we're

2012
01:28:16,800 --> 01:28:21,320
comparing apples and oranges right

2013
01:28:18,239 --> 01:28:23,150
because ECDSA P two five six

2014
01:28:21,320 --> 01:28:24,410
cryptographically is much stronger than

2015
01:28:23,150 --> 01:28:25,910
RSA 1024

2016
01:28:24,410 --> 01:28:27,650
but I would argue that you need to make

2017
01:28:25,910 --> 01:28:29,120
this comparison because most of the

2018
01:28:27,650 --> 01:28:31,519
signatures that you see in the NSTIC

2019
01:28:29,120 --> 01:28:34,040
today are are signatures with zone

2020
01:28:31,520 --> 01:28:35,690
signing keys that are 1024 bits whether

2021
01:28:34,040 --> 01:28:39,490
that makes sense in terms of security or

2022
01:28:35,690 --> 01:28:43,580
not you can debate but that's the case

2023
01:28:39,490 --> 01:28:45,559
and then if you take ECDSA p3 84 which

2024
01:28:43,580 --> 01:28:46,970
is pretty perfectly even stronger and

2025
01:28:45,560 --> 01:28:49,040
you compare that to something like RSA

2026
01:28:46,970 --> 01:28:50,270
2048 you'll see again that there is an

2027
01:28:49,040 --> 01:28:51,950
order of magnitude performance

2028
01:28:50,270 --> 01:28:58,000
difference so this is way more than the

2029
01:28:51,950 --> 01:29:02,300
five times that is quoted in the RFC

2030
01:28:58,000 --> 01:29:05,840
even 8255 four nine which is way faster

2031
01:29:02,300 --> 01:29:09,170
than the ECDSA algorithms in terms of

2032
01:29:05,840 --> 01:29:10,520
implementation that is still almost up

2033
01:29:09,170 --> 01:29:13,430
to an order of magnitude slower than

2034
01:29:10,520 --> 01:29:16,130
ours a 1024 and only four if you compare

2035
01:29:13,430 --> 01:29:19,730
to RSA 2048 do we get into the same sort

2036
01:29:16,130 --> 01:29:22,670
of order of magnitude as is quoted in

2037
01:29:19,730 --> 01:29:25,040
the RFC right so some key benchmarks

2038
01:29:22,670 --> 01:29:27,080
because you're going to see these in the

2039
01:29:25,040 --> 01:29:28,960
graphs that I'll be showing you a little

2040
01:29:27,080 --> 01:29:31,490
bit of further along in the presentation

2041
01:29:28,960 --> 01:29:34,070
you see five implementations on the

2042
01:29:31,490 --> 01:29:36,170
left-hand side the specific elliptic

2043
01:29:34,070 --> 01:29:37,820
curves that we did the test for and then

2044
01:29:36,170 --> 01:29:39,710
the performance in the number in terms

2045
01:29:37,820 --> 01:29:41,299
of the number of signature foundations

2046
01:29:39,710 --> 01:29:43,790
that you can perform with that algorithm

2047
01:29:41,300 --> 01:29:46,520
per second on the CPU side is at the

2048
01:29:43,790 --> 01:29:48,320
bottom right this is not the top end TPU

2049
01:29:46,520 --> 01:29:50,630
but it would be a common CPU that you

2050
01:29:48,320 --> 01:29:52,549
would encounter in server architecture

2051
01:29:50,630 --> 01:29:53,870
so this is typically something that

2052
01:29:52,550 --> 01:29:56,290
people have in their data center right

2053
01:29:53,870 --> 01:29:58,460
we have data centers full of this stuff

2054
01:29:56,290 --> 01:30:03,320
unless you're really rich in your Google

2055
01:29:58,460 --> 01:30:04,640
you have these and why did we pick these

2056
01:30:03,320 --> 01:30:05,660
particular benchmarks because you're

2057
01:30:04,640 --> 01:30:07,220
going to see them in the graphs that

2058
01:30:05,660 --> 01:30:10,490
I'll be showing you in the next couple

2059
01:30:07,220 --> 01:30:12,140
of slides so we picked ECDSA P 3 and a 4

2060
01:30:10,490 --> 01:30:15,830
because this was a worst case scenario

2061
01:30:12,140 --> 01:30:18,080
right this is the slowest of all of the

2062
01:30:15,830 --> 01:30:21,230
algorithms that we benchmarked and it is

2063
01:30:18,080 --> 01:30:22,639
the strongest broadly supported cipher

2064
01:30:21,230 --> 01:30:24,949
what do I mean by that

2065
01:30:22,639 --> 01:30:27,830
you could say that 84 for parade at the

2066
01:30:24,949 --> 01:30:30,049
bottom of the slide is stronger in terms

2067
01:30:27,830 --> 01:30:32,510
of cryptography but it's not widely

2068
01:30:30,050 --> 01:30:34,040
available in implementation so few

2069
01:30:32,510 --> 01:30:36,619
people are going to use it so that's why

2070
01:30:34,040 --> 01:30:41,360
we took p3 before as sort of a benchmark

2071
01:30:36,619 --> 01:30:44,119
to compare against then B to 5/6 on

2072
01:30:41,360 --> 01:30:46,009
opening cell 101 we took that for as

2073
01:30:44,119 --> 01:30:49,610
long-term support version of the most

2074
01:30:46,010 --> 01:30:51,949
likely use cipher the one or two

2075
01:30:49,610 --> 01:30:54,170
implementation of p2 five six as you can

2076
01:30:51,949 --> 01:30:56,540
see that is almost three times as fast

2077
01:30:54,170 --> 01:30:58,580
because of the optimizations in there

2078
01:30:56,540 --> 01:31:01,969
and this is to show you what an

2079
01:30:58,580 --> 01:31:04,130
optimized version of ECC can do and then

2080
01:31:01,969 --> 01:31:08,750
finally newer algorithms which

2081
01:31:04,130 --> 01:31:12,290
outperform the older ones by why 8255

2082
01:31:08,750 --> 01:31:13,639
one-niners is again another one and a

2083
01:31:12,290 --> 01:31:15,290
half times faster than the most

2084
01:31:13,639 --> 01:31:17,510
optimized version of b2 five six

2085
01:31:15,290 --> 01:31:19,159
although I've actually seen a paper

2086
01:31:17,510 --> 01:31:23,920
recently that claims that they can make

2087
01:31:19,159 --> 01:31:29,150
d2 five six almost as fast as a b24 509

2088
01:31:23,920 --> 01:31:31,690
right so let's go back to our original

2089
01:31:29,150 --> 01:31:33,920
question which was what is the impact on

2090
01:31:31,690 --> 01:31:38,599
validating DNS resolvers right because

2091
01:31:33,920 --> 01:31:41,810
that's why we started this so we use our

2092
01:31:38,600 --> 01:31:45,080
model to evaluate or to estimate future

2093
01:31:41,810 --> 01:31:46,699
performance right and we took we look at

2094
01:31:45,080 --> 01:31:49,159
two scenarios so the first scenario is

2095
01:31:46,699 --> 01:31:51,769
what if we take currently in a six-point

2096
01:31:49,159 --> 01:31:54,379
Minh and we switch all of those domains

2097
01:31:51,770 --> 01:31:56,360
over to ECC overnight so everything

2098
01:31:54,380 --> 01:31:58,580
that's now signed with RSA or DSA or

2099
01:31:56,360 --> 01:32:03,170
whatever you use we all switch that to

2100
01:31:58,580 --> 01:32:04,280
ECC is that an issue well based on the

2101
01:32:03,170 --> 01:32:08,239
measurements that we did on our

2102
01:32:04,280 --> 01:32:11,300
resolvers we argued that you need about

2103
01:32:08,239 --> 01:32:13,070
150 signature validations per second for

2104
01:32:11,300 --> 01:32:14,719
busy resolver give us a resolver

2105
01:32:13,070 --> 01:32:18,199
processing around 20,000 queries from

2106
01:32:14,719 --> 01:32:19,820
clients per second so this was a busy

2107
01:32:18,199 --> 01:32:22,129
resolver and that's not a problem

2108
01:32:19,820 --> 01:32:24,409
and even if we take the model and we put

2109
01:32:22,130 --> 01:32:27,469
in the worst case numbers we still don't

2110
01:32:24,409 --> 01:32:31,369
go above the worst case scenario which

2111
01:32:27,469 --> 01:32:34,170
is using P 384 so that's

2112
01:32:31,369 --> 01:32:37,920
but what if everybody deployed the NSA

2113
01:32:34,170 --> 01:32:40,139
and if they used ECC right so right now

2114
01:32:37,920 --> 01:32:41,939
Dena's employment is worth roughly three

2115
01:32:40,139 --> 01:32:42,749
three and a half percent of all domains

2116
01:32:41,939 --> 01:32:45,570
on the Internet

2117
01:32:42,749 --> 01:32:47,938
what if a hundred percent of those were

2118
01:32:45,570 --> 01:32:49,139
to deploy the NSA and they all use ECC

2119
01:32:47,939 --> 01:32:52,679
to sign what does that do to your

2120
01:32:49,139 --> 01:32:54,869
resolver so the second scenario that we

2121
01:32:52,679 --> 01:32:56,459
evaluated is a popular domains

2122
01:32:54,869 --> 01:32:59,670
first-growth to a hundred percent

2123
01:32:56,459 --> 01:33:03,389
domestic deployment and everyone use ECC

2124
01:32:59,670 --> 01:33:05,789
now what do I mean by popular by popular

2125
01:33:03,389 --> 01:33:08,070
I mean that the domains for we for which

2126
01:33:05,789 --> 01:33:11,340
the resolver sends the most queries to

2127
01:33:08,070 --> 01:33:15,449
the internet if that switch is to ECC

2128
01:33:11,340 --> 01:33:18,900
first right and so we here at block the

2129
01:33:15,449 --> 01:33:20,879
query popularity for queries that the

2130
01:33:18,900 --> 01:33:23,459
resolver sends to authoritative name

2131
01:33:20,880 --> 01:33:25,889
servers and this shows you this is a

2132
01:33:23,459 --> 01:33:28,469
classic so you can see that the axes are

2133
01:33:25,889 --> 01:33:30,119
log log and this is a classic internet

2134
01:33:28,469 --> 01:33:33,329
distribution it's commonly referred to

2135
01:33:30,119 --> 01:33:35,188
as sip for longtail or burrito or 80/20

2136
01:33:33,329 --> 01:33:39,978
doesn't really matter but basically what

2137
01:33:35,189 --> 01:33:44,459
it means is that the most popular query

2138
01:33:39,979 --> 01:33:45,780
but is by far responsible for the

2139
01:33:44,459 --> 01:33:50,159
highest number of queries sent out to

2140
01:33:45,780 --> 01:33:53,550
the internet so let's look at some

2141
01:33:50,159 --> 01:33:56,959
results so these are the really nice

2142
01:33:53,550 --> 01:34:02,189
graphs that my student cooked up he's a

2143
01:33:56,959 --> 01:34:04,389
MATLAB wizard and what you can see in

2144
01:34:02,189 --> 01:34:07,219
this graph on

2145
01:34:04,389 --> 01:34:08,800
this access and we can debate what you

2146
01:34:07,219 --> 01:34:14,600
call it accent but I would say it's the

2147
01:34:08,800 --> 01:34:16,219
y-axis you see the NSF deployment and as

2148
01:34:14,600 --> 01:34:19,610
you may remember I said that we will be

2149
01:34:16,219 --> 01:34:22,040
varying the average number of responses

2150
01:34:19,610 --> 01:34:25,070
with signatures to simulate the innocent

2151
01:34:22,040 --> 01:34:28,340
enjoyment right so what we did was

2152
01:34:25,070 --> 01:34:30,949
calculate based on the distribution for

2153
01:34:28,340 --> 01:34:34,460
popularity we modeled what if we go from

2154
01:34:30,949 --> 01:34:37,820
left to right in that distribution how

2155
01:34:34,460 --> 01:34:39,230
many queries with how many responsible

2156
01:34:37,820 --> 01:34:41,059
signatures would that result in and

2157
01:34:39,230 --> 01:34:44,509
that's what we model on that axis so

2158
01:34:41,060 --> 01:34:45,949
from 0 to 100% DMS a component on the

2159
01:34:44,510 --> 01:34:48,020
x-axis you see the number of outgoing

2160
01:34:45,949 --> 01:34:50,030
queries and actually the maximum number

2161
01:34:48,020 --> 01:34:52,130
of outgoing critters we observe observed

2162
01:34:50,030 --> 01:34:55,849
on the busiest resolver was some 1800

2163
01:34:52,130 --> 01:34:59,960
Curie's per second and then you see a

2164
01:34:55,850 --> 01:35:02,150
gray plague in in the graph which is the

2165
01:34:59,960 --> 01:35:05,570
maximum number of signatures that we can

2166
01:35:02,150 --> 01:35:09,769
validate for HDCP 384 on a single CPU

2167
01:35:05,570 --> 01:35:11,630
code the takeaway from this is that

2168
01:35:09,770 --> 01:35:14,840
there's ample room for growth in the NSA

2169
01:35:11,630 --> 01:35:16,670
deployment and outgoing query load right

2170
01:35:14,840 --> 01:35:21,020
so we can go up to a hundred percent in

2171
01:35:16,670 --> 01:35:22,550
a sec deployment using DSA P 384 and the

2172
01:35:21,020 --> 01:35:24,800
number of outgoing queries from that

2173
01:35:22,550 --> 01:35:26,600
resolver could still double and unbound

2174
01:35:24,800 --> 01:35:29,000
would still be able to validate those

2175
01:35:26,600 --> 01:35:30,590
signatures on a single CPU core right

2176
01:35:29,000 --> 01:35:33,199
and so this is a conservative estimate

2177
01:35:30,590 --> 01:35:35,300
if you run a really busy resolver you're

2178
01:35:33,199 --> 01:35:36,769
working at an ISP you typically don't

2179
01:35:35,300 --> 01:35:39,530
have a single core assigned to that

2180
01:35:36,770 --> 01:35:41,330
resolver so this is something that is

2181
01:35:39,530 --> 01:35:43,219
easily within the realm of the possible

2182
01:35:41,330 --> 01:35:46,190
that's a great result we can we can take

2183
01:35:43,219 --> 01:35:49,280
the worst case algorithm and unmount

2184
01:35:46,190 --> 01:35:50,839
we'll still be able to cope with it so

2185
01:35:49,280 --> 01:35:53,840
what does this picture look like for

2186
01:35:50,840 --> 01:35:56,060
bind I apologize because the title of

2187
01:35:53,840 --> 01:36:01,940
the slide is somehow God but this is

2188
01:35:56,060 --> 01:36:03,620
binding and for bind we observe

2189
01:36:01,940 --> 01:36:04,370
something a little bit different there

2190
01:36:03,620 --> 01:36:07,040
might be a

2191
01:36:04,370 --> 01:36:10,099
no problem for p3 84 because as it turns

2192
01:36:07,040 --> 01:36:12,980
out bind validate up to two and a half

2193
01:36:10,100 --> 01:36:18,350
times the number of signatures for the

2194
01:36:12,980 --> 01:36:21,110
same query load that unbound us was

2195
01:36:18,350 --> 01:36:24,980
interesting okay

2196
01:36:21,110 --> 01:36:27,019
and there are there have been

2197
01:36:24,980 --> 01:36:29,120
suggestions for reasons why that might

2198
01:36:27,020 --> 01:36:32,120
be because by it might be trying to

2199
01:36:29,120 --> 01:36:34,280
chase if it gets negative responses it

2200
01:36:32,120 --> 01:36:36,769
might be trying to chase more chase up

2201
01:36:34,280 --> 01:36:38,360
other Thursday's name surface it really

2202
01:36:36,770 --> 01:36:39,470
tries very hard to get the response and

2203
01:36:38,360 --> 01:36:41,630
if I be validating more signatures

2204
01:36:39,470 --> 01:36:43,340
because of that but we actually didn't

2205
01:36:41,630 --> 01:36:48,140
investigate in detail white was the case

2206
01:36:43,340 --> 01:36:49,790
we just we just took this as a given but

2207
01:36:48,140 --> 01:36:55,190
what you can then see is if we look at

2208
01:36:49,790 --> 01:36:57,380
the the situation for the ECAC ECDSA P

2209
01:36:55,190 --> 01:36:58,849
256 long-term support version which is

2210
01:36:57,380 --> 01:37:01,910
actually the one that we expect people

2211
01:36:58,850 --> 01:37:03,980
to use if they sign then you see that

2212
01:37:01,910 --> 01:37:06,139
even their bind has ample room for

2213
01:37:03,980 --> 01:37:09,950
growth so the green line that intersects

2214
01:37:06,140 --> 01:37:11,900
the the red slope intersects it way

2215
01:37:09,950 --> 01:37:12,950
beyond the number of queries that we

2216
01:37:11,900 --> 01:37:15,440
would need to be able to validate

2217
01:37:12,950 --> 01:37:19,429
signatures for on our busiest resolver

2218
01:37:15,440 --> 01:37:20,509
today and the same is true if if for

2219
01:37:19,430 --> 01:37:22,070
instance you want to go for something

2220
01:37:20,510 --> 01:37:24,560
really strong and you don't even go for

2221
01:37:22,070 --> 01:37:27,259
P 384 you go for the newer curve 84 for

2222
01:37:24,560 --> 01:37:31,160
8 that outperforms even the long term

2223
01:37:27,260 --> 01:37:32,930
support version of B 2 5 6 so the

2224
01:37:31,160 --> 01:37:34,849
takeaway from this is in most cases by

2225
01:37:32,930 --> 01:37:39,260
the coab but there are slight words for

2226
01:37:34,850 --> 01:37:40,580
P 384 now after the original paper we

2227
01:37:39,260 --> 01:37:41,930
did some additional benchmarks because

2228
01:37:40,580 --> 01:37:44,570
you could argue that we did our

2229
01:37:41,930 --> 01:37:46,250
benchmark and Intel x86 some of the

2230
01:37:44,570 --> 01:37:48,980
optimizations that have been implemented

2231
01:37:46,250 --> 01:37:51,320
are only available for x86 architectures

2232
01:37:48,980 --> 01:37:53,780
so what about other architectures what

2233
01:37:51,320 --> 01:37:55,259
if I have a home router and I want to do

2234
01:37:53,780 --> 01:37:58,469
dns accreditation

2235
01:37:55,260 --> 01:37:59,730
was it going to call so we did a student

2236
01:37:58,469 --> 01:38:01,139
protocol actually had student two

2237
01:37:59,730 --> 01:38:03,480
students working on this where we did

2238
01:38:01,139 --> 01:38:05,460
benchmarks on arm CPUs and on MIPS it

2239
01:38:03,480 --> 01:38:06,900
views because we would we think that

2240
01:38:05,460 --> 01:38:08,989
these are representative of what you

2241
01:38:06,900 --> 01:38:11,579
would find in a typical home router

2242
01:38:08,989 --> 01:38:13,320
now the key I'm not going to go through

2243
01:38:11,579 --> 01:38:14,969
all the details of those benchmarks but

2244
01:38:13,320 --> 01:38:18,090
the the key takeaways there is that

2245
01:38:14,969 --> 01:38:22,789
performance is low but it is more than

2246
01:38:18,090 --> 01:38:25,739
sufficient for home scenarios and that

2247
01:38:22,789 --> 01:38:28,380
interestingly ECDSA may sometimes be

2248
01:38:25,739 --> 01:38:30,539
faster than EDD si because there are

2249
01:38:28,380 --> 01:38:34,400
already some optimized versions of ECDSA

2250
01:38:30,539 --> 01:38:37,789
available for for instance arm C peers

2251
01:38:34,400 --> 01:38:39,539
that outperform the stock EDD si

2252
01:38:37,789 --> 01:38:43,889
implementations that are available for

2253
01:38:39,539 --> 01:38:47,159
that we did an N equals 1 home router

2254
01:38:43,889 --> 01:38:49,789
experiment so this is take with heap of

2255
01:38:47,159 --> 01:38:51,989
salt right this is not representative

2256
01:38:49,789 --> 01:38:53,670
but it's an interesting experiment to

2257
01:38:51,989 --> 01:38:55,888
run and one of my students really wanted

2258
01:38:53,670 --> 01:38:57,360
to do this and and I mean he got extra

2259
01:38:55,889 --> 01:38:59,099
bonus points for the fact that he got

2260
01:38:57,360 --> 01:39:01,679
informed consent from his roommate

2261
01:38:59,099 --> 01:39:04,019
before he did the experiment alright so

2262
01:39:01,679 --> 01:39:05,699
and I didn't even have to increase it

2263
01:39:04,019 --> 01:39:08,000
because he it turned out he had an

2264
01:39:05,699 --> 01:39:13,169
ethics course going on at the same time

2265
01:39:08,000 --> 01:39:16,019
and there are two takeaways for this

2266
01:39:13,170 --> 01:39:18,719
shows you 24 hours of queries to the

2267
01:39:16,019 --> 01:39:22,980
resolver that they run in their student

2268
01:39:18,719 --> 01:39:25,969
dorm which he equipped with unbound and

2269
01:39:22,980 --> 01:39:28,468
then instrumented and then measured and

2270
01:39:25,969 --> 01:39:29,969
the there are two takeaways from this

2271
01:39:28,469 --> 01:39:31,889
and the first one is a little bit

2272
01:39:29,969 --> 01:39:33,570
serious in the sense that with 10

2273
01:39:31,889 --> 01:39:36,570
concurrent users so he did this during a

2274
01:39:33,570 --> 01:39:38,759
party so there were lots of people in

2275
01:39:36,570 --> 01:39:40,650
the house and with 10 concurrent users

2276
01:39:38,760 --> 01:39:44,670
to query load peaked at around 60 per

2277
01:39:40,650 --> 01:39:46,589
second from client right now he also

2278
01:39:44,670 --> 01:39:48,040
measured cache performance on on his

2279
01:39:46,590 --> 01:39:51,010
resolver and the cache performance

2280
01:39:48,040 --> 01:39:53,320
OSHA's right because there are too few

2281
01:39:51,010 --> 01:39:55,750
users to make good use of the cache so

2282
01:39:53,320 --> 01:39:58,960
actually only about 10 20 % of his

2283
01:39:55,750 --> 01:40:01,720
queries computers could be received

2284
01:39:58,960 --> 01:40:04,120
responses from the cache so I said well

2285
01:40:01,720 --> 01:40:06,070
let's go for the worst case the cache

2286
01:40:04,120 --> 01:40:08,710
doesn't do anything and the resolver has

2287
01:40:06,070 --> 01:40:10,809
to validate everything and then you see

2288
01:40:08,710 --> 01:40:13,360
that if you if you would run this on a

2289
01:40:10,810 --> 01:40:14,560
mid CPU and we take some of the

2290
01:40:13,360 --> 01:40:15,880
benchmarks that they confirm that the

2291
01:40:14,560 --> 01:40:17,650
resolver would actually start to

2292
01:40:15,880 --> 01:40:19,920
struggle because these home devices

2293
01:40:17,650 --> 01:40:22,929
typically have only a single CPU core

2294
01:40:19,920 --> 01:40:25,270
and that CPU core would be swamped with

2295
01:40:22,930 --> 01:40:28,720
signature validations at peak load so

2296
01:40:25,270 --> 01:40:31,810
there's maybe some work there but this

2297
01:40:28,720 --> 01:40:34,030
is actually only if we have 100% DNS SEC

2298
01:40:31,810 --> 01:40:36,970
deployment which today we don't have so

2299
01:40:34,030 --> 01:40:39,309
I believe we can safely issue that by

2300
01:40:36,970 --> 01:40:40,780
the time if ever we reach 100% the in a

2301
01:40:39,310 --> 01:40:42,490
sec deployment these devices will be

2302
01:40:40,780 --> 01:40:44,380
fast enough and there will be optimized

2303
01:40:42,490 --> 01:40:46,450
implementations of the elliptic curve

2304
01:40:44,380 --> 01:40:48,520
algorithms now in the second takeaway

2305
01:40:46,450 --> 01:40:52,120
from this is that student parties are

2306
01:40:48,520 --> 01:40:55,060
not what they used to be because the

2307
01:40:52,120 --> 01:40:58,590
observer who the observant viewer will

2308
01:40:55,060 --> 01:41:04,270
see that the party stopped at one hand

2309
01:40:58,590 --> 01:41:07,870
there's a question is this a is this a

2310
01:41:04,270 --> 01:41:09,670
represent of student party where people

2311
01:41:07,870 --> 01:41:11,920
are browsing the web instead of getting

2312
01:41:09,670 --> 01:41:13,600
drunk yes these are Millennials that are

2313
01:41:11,920 --> 01:41:18,400
checking Facebook the whole time posting

2314
01:41:13,600 --> 01:41:20,830
selfies I mean yeah yeah yeah my my ex

2315
01:41:18,400 --> 01:41:24,210
see my student was really old him not to

2316
01:41:20,830 --> 01:41:26,380
look at the queries and of course he did

2317
01:41:24,210 --> 01:41:27,229
and then he thought I don't want to

2318
01:41:26,380 --> 01:41:32,119
notice about

2319
01:41:27,229 --> 01:41:34,190
and he gave up on it so I want to end

2320
01:41:32,119 --> 01:41:37,280
with some insight into adoption right

2321
01:41:34,190 --> 01:41:40,459
because I've written a couple of papers

2322
01:41:37,280 --> 01:41:42,619
on on use of ECC in Indiana SEC but

2323
01:41:40,459 --> 01:41:44,989
until 2015 there was virtually no

2324
01:41:42,619 --> 01:41:47,900
adoption of ECDSA signing schemes that

2325
01:41:44,989 --> 01:41:51,049
are standardized in RFC 665 and RFC 6605

2326
01:41:47,900 --> 01:41:53,360
dates back to 2012 so and actually the

2327
01:41:51,050 --> 01:41:54,590
first implementation in in bind and

2328
01:41:53,360 --> 01:41:56,780
unbound is a little bit older than that

2329
01:41:54,590 --> 01:41:59,659
right because about the right is one of

2330
01:41:56,780 --> 01:42:02,840
the authors of the RFC is also one of

2331
01:41:59,659 --> 01:42:04,820
the developers that implements unbound

2332
01:42:02,840 --> 01:42:10,159
so there was supporting unbound actually

2333
01:42:04,820 --> 01:42:12,139
before the RFC came up so in late 2015

2334
01:42:10,159 --> 01:42:14,719
CloudFlare actually was the first DNS

2335
01:42:12,139 --> 01:42:18,260
operator to adopt ECDSA signing at scale

2336
01:42:14,719 --> 01:42:19,849
right they rolled out their DNS ik as a

2337
01:42:18,260 --> 01:42:22,219
service thing and they said we're gonna

2338
01:42:19,849 --> 01:42:24,429
Oliver Guzman some said we're going to

2339
01:42:22,219 --> 01:42:26,929
be signing with ECDSA

2340
01:42:24,429 --> 01:42:30,860
so we want to know how has adoption

2341
01:42:26,929 --> 01:42:33,139
developed since then these grants are

2342
01:42:30,860 --> 01:42:35,209
for condo animal org and what they show

2343
01:42:33,139 --> 01:42:39,050
you is the period from the 1st of March

2344
01:42:35,209 --> 01:42:41,380
2015 until somewhere last week before I

2345
01:42:39,050 --> 01:42:43,760
go to the plane and what you can see

2346
01:42:41,380 --> 01:42:47,179
against the legend is a little bit hard

2347
01:42:43,760 --> 01:42:49,219
to read but I'm going to be pointing out

2348
01:42:47,179 --> 01:42:51,320
some things such as the the fact that

2349
01:42:49,219 --> 01:42:55,719
the majority of science to Maine's

2350
01:42:51,320 --> 01:42:59,329
income net and org still use RSA sha-1

2351
01:42:55,719 --> 01:43:02,889
that you change sha-1 is not considered

2352
01:42:59,329 --> 01:43:02,889
secure anymore for signature algorithm

2353
01:43:06,850 --> 01:43:11,360
this is the point in time where cloud

2354
01:43:09,200 --> 01:43:14,170
fair announces it to Universal DNS SEC

2355
01:43:11,360 --> 01:43:17,030
using ECDSA be two five six and as you

2356
01:43:14,170 --> 01:43:19,490
as I hope you can see there is an uptake

2357
01:43:17,030 --> 01:43:22,429
of ECDSA that starts from that point

2358
01:43:19,490 --> 01:43:27,410
onward right D the pink area at the top

2359
01:43:22,430 --> 01:43:29,300
of the graph starts growing slowly but

2360
01:43:27,410 --> 01:43:31,340
actually easy TSA adoption is now driven

2361
01:43:29,300 --> 01:43:35,750
completely by other operators that are

2362
01:43:31,340 --> 01:43:38,150
adopting is on mass and as of I think

2363
01:43:35,750 --> 01:43:39,890
the beginning of this month ECDSA is the

2364
01:43:38,150 --> 01:43:43,000
second signing algorithm after our

2365
01:43:39,890 --> 01:43:46,790
shi-wan please people change that

2366
01:43:43,000 --> 01:43:48,620
replacing our say sha-256 as second

2367
01:43:46,790 --> 01:43:50,060
popular signing algorithms that's

2368
01:43:48,620 --> 01:43:53,019
actually good news this is getting

2369
01:43:50,060 --> 01:43:56,510
adopted pretty quickly in combinatorial

2370
01:43:53,020 --> 01:43:58,010
if we look at the end to the two T of

2371
01:43:56,510 --> 01:44:01,580
these that have the largest number of

2372
01:43:58,010 --> 01:44:03,620
science which is not an L not to see the

2373
01:44:01,580 --> 01:44:07,070
picture is a little bit different as you

2374
01:44:03,620 --> 01:44:09,140
can see that adoption of ECDSA

2375
01:44:07,070 --> 01:44:10,849
me to five six is still quite low it's

2376
01:44:09,140 --> 01:44:13,910
only a fraction of the total number of

2377
01:44:10,850 --> 01:44:15,980
signed domain but one takeaway here is

2378
01:44:13,910 --> 01:44:18,460
that especially Delta C is doing really

2379
01:44:15,980 --> 01:44:22,219
well right no RSA sha-1 it's all our

2380
01:44:18,460 --> 01:44:26,090
sha-256 or kudos that actually makes way

2381
01:44:22,220 --> 01:44:27,950
more sense and they're actually going to

2382
01:44:26,090 --> 01:44:31,610
switch to signature algorithm for their

2383
01:44:27,950 --> 01:44:35,420
TLD to our sha-256 as well and at the

2384
01:44:31,610 --> 01:44:37,309
end of this month it does now also for a

2385
01:44:35,420 --> 01:44:40,550
lesser say sha-1 then

2386
01:44:37,310 --> 01:44:41,500
in common and org but also only a little

2387
01:44:40,550 --> 01:44:44,120
bit of ECDSA

2388
01:44:41,500 --> 01:44:46,820
so to take away is the early large-scale

2389
01:44:44,120 --> 01:44:48,710
adopters of DNS SEC take longer to get a

2390
01:44:46,820 --> 01:44:51,019
significant share of SEC sentiment it's

2391
01:44:48,710 --> 01:44:53,270
not surprising but it also means that

2392
01:44:51,020 --> 01:44:54,980
replacing signature algorithms will take

2393
01:44:53,270 --> 01:44:58,699
time also because replacing signature

2394
01:44:54,980 --> 01:45:00,549
algorithm is actually difficult if we

2395
01:44:58,699 --> 01:45:02,660
look at the Alexa top 1 million

2396
01:45:00,550 --> 01:45:06,230
completely different graph also quite

2397
01:45:02,660 --> 01:45:08,840
interesting here you can see again that

2398
01:45:06,230 --> 01:45:13,160
there's quite a bit of adoption of AC

2399
01:45:08,840 --> 01:45:14,989
they say P two five six twenty two

2400
01:45:13,160 --> 01:45:17,150
percent of the electorate of a million

2401
01:45:14,989 --> 01:45:20,509
signed domains in about 1.7 percent of

2402
01:45:17,150 --> 01:45:22,280
them are signed UCC BSA and 61 percent

2403
01:45:20,510 --> 01:45:23,930
of those use cloud fair so there's

2404
01:45:22,280 --> 01:45:26,300
actually also quite a significant number

2405
01:45:23,930 --> 01:45:27,500
that are not using cloud forest are

2406
01:45:26,300 --> 01:45:30,440
using another operator that's

2407
01:45:27,500 --> 01:45:35,330
interesting right so I get to my

2408
01:45:30,440 --> 01:45:37,400
conclusions the first main takeaway from

2409
01:45:35,330 --> 01:45:39,949
the paper and from this talk is that ECC

2410
01:45:37,400 --> 01:45:44,000
is sufficiently performant for use in

2411
01:45:39,949 --> 01:45:45,290
DNS a right we can easily validate the

2412
01:45:44,000 --> 01:45:47,150
number of signatures that we would need

2413
01:45:45,290 --> 01:45:49,699
to validate if everybody deployed the

2414
01:45:47,150 --> 01:45:53,150
intersect with ECC on a single CPU core

2415
01:45:49,699 --> 01:45:55,179
and still have room to spare so my

2416
01:45:53,150 --> 01:45:57,710
recommendation is going to be that

2417
01:45:55,180 --> 01:46:00,410
operators should switch to ECDSA for

2418
01:45:57,710 --> 01:46:00,980
signing if you haven't deployed in a sec

2419
01:46:00,410 --> 01:46:03,290
yet

2420
01:46:00,980 --> 01:46:07,129
don't bother deploy are say please go

2421
01:46:03,290 --> 01:46:08,750
for ECC algorithms straight away because

2422
01:46:07,130 --> 01:46:10,160
it gives you all of the benefits of ACC

2423
01:46:08,750 --> 01:46:13,460
which is smaller than expected which

2424
01:46:10,160 --> 01:46:14,809
means no fragmentation we show that in

2425
01:46:13,460 --> 01:46:18,650
an earlier paper fragmentation is

2426
01:46:14,810 --> 01:46:20,060
polygons and much less amplification and

2427
01:46:18,650 --> 01:46:20,610
if you combine that with some of the

2428
01:46:20,060 --> 01:46:22,500
newer

2429
01:46:20,610 --> 01:46:24,089
- taco amplification attacks then

2430
01:46:22,500 --> 01:46:26,780
switching the combination of switching

2431
01:46:24,090 --> 01:46:29,580
to ECC and deploying those

2432
01:46:26,780 --> 01:46:31,170
countermeasures will actually make your

2433
01:46:29,580 --> 01:46:34,350
domain unattractive to abuse in

2434
01:46:31,170 --> 01:46:36,270
amplification attacks finally resolver

2435
01:46:34,350 --> 01:46:38,909
operators may want to look at deploying

2436
01:46:36,270 --> 01:46:41,909
newer optimized crypto libraries to have

2437
01:46:38,909 --> 01:46:43,589
some CPU to spare you can do this even

2438
01:46:41,909 --> 01:46:46,710
with long term support versions of the

2439
01:46:43,590 --> 01:46:48,510
software but if you want to save on CPU

2440
01:46:46,710 --> 01:46:51,239
cycles you might want to deploy newer

2441
01:46:48,510 --> 01:46:52,619
libraries and finally as I showed you in

2442
01:46:51,239 --> 01:46:56,309
the last couple of slides adoption is

2443
01:46:52,619 --> 01:46:57,989
slowly taking off and with that I get to

2444
01:46:56,310 --> 01:47:00,270
the end I would like to thank my

2445
01:46:57,989 --> 01:47:01,769
students who who helped me with this so

2446
01:47:00,270 --> 01:47:06,449
as Casper hacker man who just started

2447
01:47:01,770 --> 01:47:09,380
his PhD in Albert in Denmark Bruce and

2448
01:47:06,449 --> 01:47:12,330
JJ who helped with the arm and MIPS

2449
01:47:09,380 --> 01:47:14,400
benchmarks the data for the adoption was

2450
01:47:12,330 --> 01:47:15,960
supplied by the open Intel project have

2451
01:47:14,400 --> 01:47:17,670
a look at the URL if you're interested

2452
01:47:15,960 --> 01:47:19,230
and the references to the papers as I

2453
01:47:17,670 --> 01:47:27,960
said are included in the video - fools

2454
01:47:19,230 --> 01:47:30,349
laughing thank you for your time any

2455
01:47:27,960 --> 01:47:30,350
questions

2456
01:47:35,050 --> 01:47:43,090
I'm screwed I'm from NIST so we we have

2457
01:47:39,860 --> 01:47:50,509
been working on bgp SEC implementations

2458
01:47:43,090 --> 01:47:53,960
which also uses ECDSA P 256 and mr.

2459
01:47:50,510 --> 01:47:57,140
together with the SBIR contract the

2460
01:47:53,960 --> 01:48:00,410
company's name is an entire technique so

2461
01:47:57,140 --> 01:48:02,900
we have as together we have developed a

2462
01:48:00,410 --> 01:48:07,550
high-performance implementation of BGP

2463
01:48:02,900 --> 01:48:09,920
SEC and in that we we did I mean it was

2464
01:48:07,550 --> 01:48:12,890
mainly our SBIR contractor entire

2465
01:48:09,920 --> 01:48:15,440
technique and his name is mammoth it

2466
01:48:12,890 --> 01:48:17,770
earlier so excellent work you should

2467
01:48:15,440 --> 01:48:22,849
look at that we presented that paper at

2468
01:48:17,770 --> 01:48:25,040
Nanak 69 in February this year it will

2469
01:48:22,850 --> 01:48:27,050
say BGP SiC high-performance BGP

2470
01:48:25,040 --> 01:48:29,570
simplement asian but it has a lot of

2471
01:48:27,050 --> 01:48:33,230
measurement details about ECDSA

2472
01:48:29,570 --> 01:48:35,630
performance and we used it we compared

2473
01:48:33,230 --> 01:48:38,030
it with the open SSL one dot one dot

2474
01:48:35,630 --> 01:48:40,969
zero and significant I mean several

2475
01:48:38,030 --> 01:48:43,670
several I mean significant

2476
01:48:40,969 --> 01:48:45,800
multiplication factor improvement of

2477
01:48:43,670 --> 01:48:48,800
this high performance implementation

2478
01:48:45,800 --> 01:48:51,920
compared to open SSL one dot one dot

2479
01:48:48,800 --> 01:49:04,489
zero so I'd be happy to give you the

2480
01:48:51,920 --> 01:49:08,140
pointer to that paper thank you and

2481
01:49:04,489 --> 01:49:08,139
thanks to nice response

2482
01:49:09,030 --> 01:49:19,440
and it stopped charging people money for

2483
01:49:12,120 --> 01:49:21,440
for using the mystic so there's actually

2484
01:49:19,440 --> 01:49:25,410
some discussion about that in the paper

2485
01:49:21,440 --> 01:49:27,629
and in the paper we argue that even if

2486
01:49:25,410 --> 01:49:29,880
you go for a worst-case scenario so

2487
01:49:27,630 --> 01:49:32,580
where we we take away all of the

2488
01:49:29,880 --> 01:49:34,230
measurements and we just model we assume

2489
01:49:32,580 --> 01:49:40,830
that the model is is accurate enough to

2490
01:49:34,230 --> 01:49:42,750
put in worst case parameters you it's

2491
01:49:40,830 --> 01:49:44,130
arguable whether or everybody has the

2492
01:49:42,750 --> 01:49:45,870
cpu's that can deal with this right but

2493
01:49:44,130 --> 01:49:47,460
that's an assumption and that's an

2494
01:49:45,870 --> 01:49:49,260
assumption that we cannot prove or

2495
01:49:47,460 --> 01:49:53,730
disprove but even if you put in worst

2496
01:49:49,260 --> 01:49:54,900
case data then with the way the DNS

2497
01:49:53,730 --> 01:50:00,179
currently looks

2498
01:49:54,900 --> 01:50:03,990
I am confident enough to say that our

2499
01:50:00,180 --> 01:50:07,470
resolvers would be able to handle the

2500
01:50:03,990 --> 01:50:09,420
signature validations however if

2501
01:50:07,470 --> 01:50:11,190
suddenly the new TT of these become

2502
01:50:09,420 --> 01:50:14,340
wildly popular and we see a

2503
01:50:11,190 --> 01:50:15,990
fragmentation in the namespace then this

2504
01:50:14,340 --> 01:50:18,840
picture might change because that might

2505
01:50:15,990 --> 01:50:20,099
blow up the number of cache misses which

2506
01:50:18,840 --> 01:50:22,530
might blow up the number of signatures

2507
01:50:20,100 --> 01:50:25,920
validations and then we are in unknown

2508
01:50:22,530 --> 01:50:28,019
territory but it doesn't seem like the

2509
01:50:25,920 --> 01:50:29,910
new GT of these are that wildly popular

2510
01:50:28,020 --> 01:50:31,680
so I'm not too worried about that yet

2511
01:50:29,910 --> 01:50:33,150
but there are and these are actually

2512
01:50:31,680 --> 01:50:37,560
discussed in the paper so there are some

2513
01:50:33,150 --> 01:50:38,519
situations where our assertion that we

2514
01:50:37,560 --> 01:50:40,950
can deal with these signature

2515
01:50:38,520 --> 01:50:42,780
validations where they might not hold

2516
01:50:40,950 --> 01:50:44,190
and this is one of those situations the

2517
01:50:42,780 --> 01:50:52,230
other one which is also discussed in the

2518
01:50:44,190 --> 01:50:55,129
paper is about what do they do can I

2519
01:50:52,230 --> 01:50:55,129
just reopen that

2520
01:50:57,740 --> 01:51:02,639
one of the other things that we

2521
01:51:00,080 --> 01:51:04,769
discussed in the paper is a denial of

2522
01:51:02,640 --> 01:51:08,250
service attack where you try to cause

2523
01:51:04,770 --> 01:51:10,140
cpu starvation by forcing signature

2524
01:51:08,250 --> 01:51:12,510
validations and this is actually

2525
01:51:10,140 --> 01:51:14,990
something that was that whoever's men

2526
01:51:12,510 --> 01:51:18,120
who was 10 still at Comcast brought up

2527
01:51:14,990 --> 01:51:22,860
and we have seen verified this so that's

2528
01:51:18,120 --> 01:51:25,080
also in the paper and what we did was we

2529
01:51:22,860 --> 01:51:27,380
first resolved it to do lots of ECDSA

2530
01:51:25,080 --> 01:51:30,000
signature validations by making them

2531
01:51:27,380 --> 01:51:31,920
verify signatures for CloudFlare sort of

2532
01:51:30,000 --> 01:51:35,250
black LifeSpring that gives you a fresh

2533
01:51:31,920 --> 01:51:40,130
signature for every NX domain that can

2534
01:51:35,250 --> 01:51:42,210
kill by it easily unbanned survives so

2535
01:51:40,130 --> 01:51:44,370
there is an issue there but we also

2536
01:51:42,210 --> 01:51:45,960
sketch an idea of how you could solve

2537
01:51:44,370 --> 01:51:48,809
the same resolver implementations by

2538
01:51:45,960 --> 01:51:50,340
doing some form of rate limiting and and

2539
01:51:48,810 --> 01:51:52,770
I know I've discussed this with Valtor

2540
01:51:50,340 --> 01:51:54,090
from analogue labs who thought it might

2541
01:51:52,770 --> 01:51:55,590
be feasible to do that I don't know

2542
01:51:54,090 --> 01:51:55,890
whether he has had time to implant it

2543
01:51:55,590 --> 01:51:59,540
yet

2544
01:51:55,890 --> 01:51:59,540
does that answer your question ok

2545
01:51:59,600 --> 01:52:05,310
they're different

2546
01:52:01,940 --> 01:52:08,490
dear defendant congratulations with your

2547
01:52:05,310 --> 01:52:14,630
work but I still want to reflect on some

2548
01:52:08,490 --> 01:52:18,750
of your results well you made some

2549
01:52:14,630 --> 01:52:23,400
analysis of the you made some analysis

2550
01:52:18,750 --> 01:52:29,160
of the number of signatures validations

2551
01:52:23,400 --> 01:52:31,290
done by bound and and and bind can you

2552
01:52:29,160 --> 01:52:33,090
also continue this kind of work or

2553
01:52:31,290 --> 01:52:38,340
reflect on this work and say something

2554
01:52:33,090 --> 01:52:42,390
about what is the ideal if I could build

2555
01:52:38,340 --> 01:52:45,420
a platonic or ideal resolver what are

2556
01:52:42,390 --> 01:52:47,880
the number of signatures I have to fill

2557
01:52:45,420 --> 01:52:52,050
a date to come up with an answer

2558
01:52:47,880 --> 01:52:53,730
ok it's not the measurements actually

2559
01:52:52,050 --> 01:52:56,130
but it's more than theoretical approach

2560
01:52:53,730 --> 01:52:58,620
and that can give maybe some guidance to

2561
01:52:56,130 --> 01:53:00,720
the sovereignty fellow yeah learned

2562
01:52:58,620 --> 01:53:03,559
opponent thank you for your kind words

2563
01:53:00,720 --> 01:53:03,560
an interesting question

2564
01:53:05,900 --> 01:53:12,530
but seriously this idea of designing a

2565
01:53:09,980 --> 01:53:14,480
platonic resolver I like that I really

2566
01:53:12,530 --> 01:53:16,480
like the term so I'm gonna have to steal

2567
01:53:14,480 --> 01:53:20,360
that from you and use it somewhere

2568
01:53:16,480 --> 01:53:22,730
that's actually interesting because as

2569
01:53:20,360 --> 01:53:24,380
the papers States there's a huge

2570
01:53:22,730 --> 01:53:25,639
difference between bind and unbound but

2571
01:53:24,380 --> 01:53:27,730
there are many factors that play a role

2572
01:53:25,640 --> 01:53:30,950
in that right a platonic reserve a

2573
01:53:27,730 --> 01:53:33,049
resolver what would you need to specify

2574
01:53:30,950 --> 01:53:36,920
requirements what that does does that

2575
01:53:33,050 --> 01:53:37,810
give you does that work the hardest to

2576
01:53:36,920 --> 01:53:42,650
get you an answer

2577
01:53:37,810 --> 01:53:45,050
does that find some middle ground

2578
01:53:42,650 --> 01:53:47,660
between spending time finding something

2579
01:53:45,050 --> 01:53:48,740
and then deciding it can be found those

2580
01:53:47,660 --> 01:53:50,000
are questions that would need to be

2581
01:53:48,740 --> 01:53:54,050
answered but I think that's interesting

2582
01:53:50,000 --> 01:53:57,130
research and so we have a PhD student in

2583
01:53:54,050 --> 01:53:59,570
our lab who's working on resolver things

2584
01:53:57,130 --> 01:54:02,120
and this is yet another idea to put in

2585
01:53:59,570 --> 01:54:05,540
his head indeed we can make explicit

2586
01:54:02,120 --> 01:54:10,309
decisions ya know and I think that this

2587
01:54:05,540 --> 01:54:12,380
is a greed so there's actually in my

2588
01:54:10,310 --> 01:54:14,810
opinion far too little research on what

2589
01:54:12,380 --> 01:54:16,460
is the optimal resolver and for instance

2590
01:54:14,810 --> 01:54:17,780
we can talk about caching strategies we

2591
01:54:16,460 --> 01:54:19,790
can talk about time spent finding

2592
01:54:17,780 --> 01:54:20,960
responses so I think that yes I agree

2593
01:54:19,790 --> 01:54:22,670
with you there is interesting research

2594
01:54:20,960 --> 01:54:30,160
to be done there thank you thank you

2595
01:54:22,670 --> 01:54:33,230
very much bilham Taub internet loves so

2596
01:54:30,160 --> 01:54:36,830
very nice work in very interesting

2597
01:54:33,230 --> 01:54:40,190
definitely quality work and it's very

2598
01:54:36,830 --> 01:54:42,769
important to find the right measurement

2599
01:54:40,190 --> 01:54:47,500
metrics so I think it's very nice that

2600
01:54:42,770 --> 01:54:51,650
you identify those factors but however

2601
01:54:47,500 --> 01:54:55,970
there are some factors which are under

2602
01:54:51,650 --> 01:55:00,440
exposed in now a current scientific work

2603
01:54:55,970 --> 01:55:04,700
and you know there's this single factor

2604
01:55:00,440 --> 01:55:06,290
which is of paramount importance and I

2605
01:55:04,700 --> 01:55:09,590
think you know what I'm talking about

2606
01:55:06,290 --> 01:55:13,519
and you know it has driven many

2607
01:55:09,590 --> 01:55:16,530
scientists to do madness

2608
01:55:13,520 --> 01:55:20,490
it's it's a difficult beast to kept here

2609
01:55:16,530 --> 01:55:23,580
I recognized it so I don't expect that

2610
01:55:20,490 --> 01:55:28,800
you did attempt but have have you looked

2611
01:55:23,580 --> 01:55:32,070
into the galley Maori factory so that's

2612
01:55:28,800 --> 01:55:34,080
that's a really good question and and

2613
01:55:32,070 --> 01:55:38,190
and yes it did nearly drive me insane

2614
01:55:34,080 --> 01:55:40,080
but I have a backup slide on that so we

2615
01:55:38,190 --> 01:55:42,120
actually we actually measured the

2616
01:55:40,080 --> 01:55:44,360
legality as you can see in a graph here

2617
01:55:42,120 --> 01:55:47,010
we measured the galley more free factor

2618
01:55:44,360 --> 01:55:51,059
and and I'll talk you through what you

2619
01:55:47,010 --> 01:55:52,920
see in the in the graph here so what we

2620
01:55:51,060 --> 01:55:56,070
did was we measured the calamari factor

2621
01:55:52,920 --> 01:56:01,410
in micromo fries for queries per second

2622
01:55:56,070 --> 01:56:02,969
leading to ECC validation well I think

2623
01:56:01,410 --> 01:56:15,300
that vellum already said this everybody

2624
01:56:02,970 --> 01:56:17,010
knows this factor and so we you see the

2625
01:56:15,300 --> 01:56:20,610
initial ramp down right which is what

2626
01:56:17,010 --> 01:56:23,670
you would expect to see typically in a

2627
01:56:20,610 --> 01:56:25,110
galley more free distribution and then

2628
01:56:23,670 --> 01:56:27,330
some normal noise but then there is this

2629
01:56:25,110 --> 01:56:28,920
weird peak an unexpected rise around

2630
01:56:27,330 --> 01:56:32,700
four and twenty five queries per second

2631
01:56:28,920 --> 01:56:34,770
which we can't explain right so and and

2632
01:56:32,700 --> 01:56:37,410
that has puzzled us for for for the past

2633
01:56:34,770 --> 01:56:39,420
year and a half and if you know what

2634
01:56:37,410 --> 01:56:41,460
causes that I I would I would like to I

2635
01:56:39,420 --> 01:56:44,210
would like to know right so and we see

2636
01:56:41,460 --> 01:56:47,370
this for unbound and for bind and and

2637
01:56:44,210 --> 01:56:50,990
there's also the suspicious absence of

2638
01:56:47,370 --> 01:56:52,890
noise beyond 450 queries per second so

2639
01:56:50,990 --> 01:56:55,980
help us yeah

2640
01:56:52,890 --> 01:57:01,460
so there are quantum factors actually

2641
01:56:55,980 --> 01:57:04,980
that influence the micro mafia a second

2642
01:57:01,460 --> 01:57:09,110
so it's actually a different measurement

2643
01:57:04,980 --> 01:57:12,089
unit every time right so it could be

2644
01:57:09,110 --> 01:57:16,410
electrical variation from satellite

2645
01:57:12,090 --> 01:57:20,580
deborah's or the static from nylon and

2646
01:57:16,410 --> 01:57:22,970
we're but I suspect that this will be

2647
01:57:20,580 --> 01:57:22,970
the

2648
01:57:23,280 --> 01:57:32,880
micro mischeif assignments okay sure but

2649
01:57:30,420 --> 01:57:35,940
anyway I'm very impressed impressed that

2650
01:57:32,880 --> 01:57:40,260
you managed to capture this so it's

2651
01:57:35,940 --> 01:57:43,500
definitely it surprised me that that

2652
01:57:40,260 --> 01:57:46,410
someone would win twice the network

2653
01:57:43,500 --> 01:57:49,980
research applied into a research price

2654
01:57:46,410 --> 01:57:52,260
but now I understand validation thank

2655
01:57:49,980 --> 01:57:56,580
thank you

2656
01:57:52,260 --> 01:57:58,350
I concerned that the audience is

2657
01:57:56,580 --> 01:58:03,480
wondering if they've gone out of their

2658
01:57:58,350 --> 01:58:06,390
minds about this so we should explain

2659
01:58:03,480 --> 01:58:08,400
that Willam has been challenged and now

2660
01:58:06,390 --> 01:58:10,860
he's taken rolling into a challenge to

2661
01:58:08,400 --> 01:58:13,980
to use the word galimov free at three

2662
01:58:10,860 --> 01:58:16,380
mic lines and this was a very successful

2663
01:58:13,980 --> 01:58:19,320
version of that as well as a you know a

2664
01:58:16,380 --> 01:58:22,380
deep deep enlightenment of an important

2665
01:58:19,320 --> 01:58:25,440
scientific factor it's good micro factor

2666
01:58:22,380 --> 01:58:30,360
and and now and I think I am our our

2667
01:58:25,440 --> 01:58:31,830
ploy to surprise you work so let's go

2668
01:58:30,360 --> 01:58:35,639
back to the serious questions in this

2669
01:58:31,830 --> 01:58:37,200
case unless matter once he asked me a

2670
01:58:35,640 --> 01:58:42,450
question about the galley morph refactor

2671
01:58:37,200 --> 01:58:44,190
a map Ford not within all net labs can

2672
01:58:42,450 --> 01:58:50,570
you go back to your ECC adoption slide

2673
01:58:44,190 --> 01:58:52,830
yeah which one keep going that one no

2674
01:58:50,570 --> 01:58:57,920
yeah maybe it was the one you said yeah

2675
01:58:52,830 --> 01:58:59,910
why not so anyway that'll do ah sorry

2676
01:58:57,920 --> 01:59:02,910
see I'm trying to understand this

2677
01:58:59,910 --> 01:59:06,150
because it looks like there was a lot of

2678
01:59:02,910 --> 01:59:07,530
growth around this time last year and

2679
01:59:06,150 --> 01:59:09,900
then it's peanuts actually been pretty

2680
01:59:07,530 --> 01:59:11,910
flat in terms of ECC adoption since then

2681
01:59:09,900 --> 01:59:15,360
do you have any reflections on yes I do

2682
01:59:11,910 --> 01:59:17,820
so so let me see if the pointer on this

2683
01:59:15,360 --> 01:59:21,179
works what you're referring to is is

2684
01:59:17,820 --> 01:59:23,969
here where there is especially in the

2685
01:59:21,180 --> 01:59:25,680
door gets very steep this is a fact we

2686
01:59:23,969 --> 01:59:29,340
actually in looked at that in detail

2687
01:59:25,680 --> 01:59:32,610
what happened there and this is one

2688
01:59:29,340 --> 01:59:35,070
operator in particular who who was using

2689
01:59:32,610 --> 01:59:37,320
RSA sha-256 before

2690
01:59:35,070 --> 01:59:41,580
and they decided on their own and to

2691
01:59:37,320 --> 01:59:43,170
switch to a CDC ECDSA b25 six for all

2692
01:59:41,580 --> 01:59:45,210
the right reasons because they wanted to

2693
01:59:43,170 --> 01:59:46,650
reduce their packet sizes they wanted to

2694
01:59:45,210 --> 01:59:51,450
increase the security of their signature

2695
01:59:46,650 --> 01:59:53,040
algorithms I think I I'm trying to

2696
01:59:51,450 --> 01:59:54,389
struggle on to him remember the name I

2697
01:59:53,040 --> 01:59:55,860
was domain name shop it's a Norwegian

2698
01:59:54,390 --> 01:59:57,210
company and I can mention their name

2699
01:59:55,860 --> 02:00:00,960
because I had some email communication

2700
01:59:57,210 --> 02:00:02,940
with them and they they did this it's

2701
02:00:00,960 --> 02:00:04,650
actually not been flat it's kind of hard

2702
02:00:02,940 --> 02:00:05,940
to see in the in the graphs here if you

2703
02:00:04,650 --> 02:00:08,900
if you look at the slice you can zoom in

2704
02:00:05,940 --> 02:00:13,200
a little so there is still some adoption

2705
02:00:08,900 --> 02:00:16,070
and and it's still increasing slowly but

2706
02:00:13,200 --> 02:00:18,599
the the large peak was when this one

2707
02:00:16,070 --> 02:00:20,370
organization decided to switch and then

2708
02:00:18,600 --> 02:00:22,470
later on there's a smaller bump that you

2709
02:00:20,370 --> 02:00:23,910
see if you zoom a little bit into the in

2710
02:00:22,470 --> 02:00:25,980
on the graph there's another small bump

2711
02:00:23,910 --> 02:00:27,420
which is another algorithm rollover and

2712
02:00:25,980 --> 02:00:29,040
actually I brought these people because

2713
02:00:27,420 --> 02:00:30,690
I'm monitored they're all current all

2714
02:00:29,040 --> 02:00:33,510
over they did it completely correctly

2715
02:00:30,690 --> 02:00:36,030
right so those of you familiar with the

2716
02:00:33,510 --> 02:00:38,670
NSX will know that this is difficult to

2717
02:00:36,030 --> 02:00:40,860
give a little bit of idea to the people

2718
02:00:38,670 --> 02:00:42,810
that are less familiar and algorithm

2719
02:00:40,860 --> 02:00:45,210
rollover requires you to take very

2720
02:00:42,810 --> 02:00:47,040
specific steps which is to introduce new

2721
02:00:45,210 --> 02:00:49,440
signatures first before you introduce a

2722
02:00:47,040 --> 02:00:51,000
new key because DNS SEC actually has

2723
02:00:49,440 --> 02:00:52,589
this provision that if something is

2724
02:00:51,000 --> 02:00:54,590
signed with a certain algorithm so if a

2725
02:00:52,590 --> 02:00:57,090
key for a certain algorithm exists

2726
02:00:54,590 --> 02:00:58,740
signatures for that algorithm must also

2727
02:00:57,090 --> 02:01:01,350
exist because otherwise you'd be able to

2728
02:00:58,740 --> 02:01:03,719
perform downgrade attacks and most

2729
02:01:01,350 --> 02:01:05,340
resolver implementations take that quite

2730
02:01:03,720 --> 02:01:07,500
strictly so if you don't follow those

2731
02:01:05,340 --> 02:01:10,760
steps in an algorithm below for your

2732
02:01:07,500 --> 02:01:12,990
domain goes into goes bogus and

2733
02:01:10,760 --> 02:01:16,860
resolvers will actually refuse to

2734
02:01:12,990 --> 02:01:20,280
validate it so they did this correctly

2735
02:01:16,860 --> 02:01:22,500
and I think that was the first example

2736
02:01:20,280 --> 02:01:25,160
at scale of switching to a different

2737
02:01:22,500 --> 02:01:27,690
algorithm that was done successfully

2738
02:01:25,160 --> 02:01:32,190
because we've seen algorithm rollovers

2739
02:01:27,690 --> 02:01:34,259
for T days and cctlds in the past and

2740
02:01:32,190 --> 02:01:38,070
almost all of them have had some hitch

2741
02:01:34,260 --> 02:01:40,890
where they for instance introduced the

2742
02:01:38,070 --> 02:01:42,330
key at the wrong time or made another

2743
02:01:40,890 --> 02:01:44,550
mistake introduced at the S at the wrong

2744
02:01:42,330 --> 02:01:45,300
time so this really is something that

2745
02:01:44,550 --> 02:01:48,219
needs attention

2746
02:01:45,300 --> 02:01:50,170
and to finish off of that there is

2747
02:01:48,219 --> 02:01:52,389
as I said the Swedish registry is going

2748
02:01:50,170 --> 02:01:56,199
to switch from using our session one to

2749
02:01:52,389 --> 02:01:59,860
RSA sha-256 for Delta C and will

2750
02:01:56,199 --> 02:02:01,150
actually be measuring that I started

2751
02:01:59,860 --> 02:02:03,039
this other project called root canary

2752
02:02:01,150 --> 02:02:07,690
which we presented at the Met party

2753
02:02:03,039 --> 02:02:08,829
meeting earlier this week and this the

2754
02:02:07,690 --> 02:02:10,749
Suites actually came to us and said can

2755
02:02:08,829 --> 02:02:11,739
you measure our algorithm below for

2756
02:02:10,749 --> 02:02:13,539
because we're kind of scared that

2757
02:02:11,739 --> 02:02:15,098
something might go wrong so we're we're

2758
02:02:13,539 --> 02:02:17,050
actually gonna measure that and see how

2759
02:02:15,099 --> 02:02:19,059
that works in practice so we get a much

2760
02:02:17,050 --> 02:02:20,800
more detailed measurement and we have

2761
02:02:19,059 --> 02:02:25,059
for this particular instance where we

2762
02:02:20,800 --> 02:02:28,869
only have a granularity or of one-day

2763
02:02:25,059 --> 02:02:31,239
intervals well thank you very much this

2764
02:02:28,869 --> 02:02:32,829
is great work and congratulations on

2765
02:02:31,239 --> 02:02:33,940
winning this prize the second time I

2766
02:02:32,829 --> 02:02:35,558
should say that Roland's now been

2767
02:02:33,940 --> 02:02:37,119
invited to join the selection committee

2768
02:02:35,559 --> 02:02:38,429
for the AARP so no good deed goes

2769
02:02:37,119 --> 02:02:44,049
unpunished

2770
02:02:38,429 --> 02:02:49,869
thank you any other questions okay thank

2771
02:02:44,050 --> 02:02:52,449
you for your time thanks everybody I

2772
02:02:49,869 --> 02:02:55,900
think we should end on this high note

2773
02:02:52,449 --> 02:02:58,419
and so you know please feel free to

2774
02:02:55,900 --> 02:03:01,119
cluster up here and ask any questions or

2775
02:02:58,420 --> 02:03:04,090
get involved further and oh I wanted to

2776
02:03:01,119 --> 02:03:07,659
show you the cat who was working so let

2777
02:03:04,090 --> 02:03:09,940
me quickly do that and then well and on

2778
02:03:07,659 --> 02:03:12,159
that note but does anyone else have any

2779
02:03:09,940 --> 02:03:14,369
questions of a general nature before we

2780
02:03:12,159 --> 02:03:14,369
go

2781
02:03:20,130 --> 02:03:29,070
gee when you're trying to do things you

2782
02:03:23,409 --> 02:03:29,070
can't all right

2783
02:03:39,349 --> 02:03:47,119
okay so go out and write papers the way

2784
02:03:42,889 --> 02:03:52,130
this cat owl does and and send them here

2785
02:03:47,119 --> 02:03:54,110
and participate in I RTF thank you so

2786
02:03:52,130 --> 02:03:56,119
we'll give everybody back some time I

2787
02:03:54,110 --> 02:03:58,969
think we have to do a presentation of

2788
02:03:56,119 --> 02:04:02,299
certificates which we don't have to do

2789
02:03:58,969 --> 02:04:05,000
in front of everybody all up do we have

2790
02:04:02,300 --> 02:04:05,900
certificates to present to oh we oh

2791
02:04:05,000 --> 02:04:09,469
sorry

2792
02:04:05,900 --> 02:04:10,909
yes so we we were going to actually if

2793
02:04:09,469 --> 02:04:13,340
you want to stay and work in here you

2794
02:04:10,909 --> 02:04:16,549
can see the the honor the presentation

2795
02:04:13,340 --> 02:04:21,110
of the Prize certificates and the

2796
02:04:16,550 --> 02:04:23,780
photographing of same but thanks very

2797
02:04:21,110 --> 02:04:27,369
much for for being with us we're really

2798
02:04:23,780 --> 02:04:27,369
very good session

