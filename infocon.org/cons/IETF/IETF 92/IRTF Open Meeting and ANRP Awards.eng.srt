1
00:02:59,810 --> 00:03:02,709
can you hear me<font color="#E5E5E5"> okay</font>

2
00:03:36,790 --> 00:03:41,298
if you're<font color="#E5E5E5"> here</font><font color="#CCCCCC"> for the I RTF open</font>

3
00:03:39,319 --> 00:03:43,670
meeting you're in the right room if

4
00:03:41,299 --> 00:03:45,230
you're here for<font color="#CCCCCC"> something else or you</font>

5
00:03:43,670 --> 00:03:46,849
want to<font color="#E5E5E5"> read your email you're welcome</font>

6
00:03:45,230 --> 00:03:48,310
to do that<font color="#E5E5E5"> but if you here for something</font>

7
00:03:46,849 --> 00:03:50,988
else you're probably in the wrong room

8
00:03:48,310 --> 00:03:55,519
the observant amongst you will notice

9
00:03:50,989 --> 00:03:58,370
that<font color="#CCCCCC"> I am NOT Lars eggert I am Matt</font><font color="#E5E5E5"> Ford</font>

10
00:03:55,519 --> 00:04:00,530
I'm with the<font color="#CCCCCC"> Internet Society and mostly</font>

11
00:03:58,370 --> 00:04:02,959
here to introduce our speaker for this

12
00:04:00,530 --> 00:04:05,950
session who is our applied networking

13
00:04:02,959 --> 00:04:09,470
research<font color="#CCCCCC"> Prize winner at this I ETF and</font>

14
00:04:05,950 --> 00:04:11,959
that is<font color="#E5E5E5"> Aaron game bro Jacobson who's</font>

15
00:04:09,470 --> 00:04:13,609
going<font color="#E5E5E5"> to talk about who won the award</font>

16
00:04:11,959 --> 00:04:15,109
for designing and evaluating and NFV

17
00:04:13,609 --> 00:04:17,630
control plane he's going to tell you a

18
00:04:15,109 --> 00:04:18,440
lot more<font color="#E5E5E5"> about that but maybe we could</font>

19
00:04:17,630 --> 00:04:20,810
just<font color="#E5E5E5"> have a round of applause to</font>

20
00:04:18,440 --> 00:04:29,660
congratulate Aaron on winning his AARP

21
00:04:20,810 --> 00:04:30,410
award I think Aaron you're gonna you're

22
00:04:29,660 --> 00:04:32,960
going to present<font color="#E5E5E5"> and then we'll take</font>

23
00:04:30,410 --> 00:04:34,370
<font color="#CCCCCC">some</font><font color="#E5E5E5"> often time afterwards for Q&A if</font>

24
00:04:32,960 --> 00:04:35,690
you want to save up your questions and I

25
00:04:34,370 --> 00:04:37,340
guess if you have clarifying questions

26
00:04:35,690 --> 00:04:39,530
you can you can dive in with those but

27
00:04:37,340 --> 00:04:42,260
otherwise we'll save save questions for

28
00:04:39,530 --> 00:04:44,869
after errands talk and I'll moderate the

29
00:04:42,260 --> 00:04:46,849
discussion<font color="#CCCCCC"> thanks yep something's not</font>

30
00:04:44,870 --> 00:04:48,979
clear certainly feel free<font color="#E5E5E5"> to step up to</font>

31
00:04:46,849 --> 00:04:51,229
the mic and interrupt me so thanks so

32
00:04:48,979 --> 00:04:52,310
much for that introduction I hope you'll

33
00:04:51,229 --> 00:04:54,800
find what I'm talking about<font color="#E5E5E5"> today</font>

34
00:04:52,310 --> 00:04:56,750
interesting so<font color="#E5E5E5"> what we've done is we've</font>

35
00:04:54,800 --> 00:04:58,130
we've done some research to take the

36
00:04:56,750 --> 00:05:00,289
principles that<font color="#E5E5E5"> we have in</font>

37
00:04:58,130 --> 00:05:02,419
software-defined networking and extend

38
00:05:00,289 --> 00:05:03,860
those principles to network functions or

39
00:05:02,419 --> 00:05:06,590
middle boxes that are running<font color="#E5E5E5"> in our</font>

40
00:05:03,860 --> 00:05:08,630
network in order to allow operators of

41
00:05:06,590 --> 00:05:11,388
networks to better satisfy a number of

42
00:05:08,630 --> 00:05:12,800
different goals so for those of you who

43
00:05:11,389 --> 00:05:14,539
aren't familiar with network functions

44
00:05:12,800 --> 00:05:16,220
or middleboxes the basic idea behind

45
00:05:14,539 --> 00:05:19,300
them is that they're going<font color="#E5E5E5"> to perform</font>

46
00:05:16,220 --> 00:05:21,949
some sort of sophisticated analysis of

47
00:05:19,300 --> 00:05:24,590
traffic or flows as it passes through

48
00:05:21,949 --> 00:05:26,180
this device in the network and typically

49
00:05:24,590 --> 00:05:28,669
it's going to take some stateful actions

50
00:05:26,180 --> 00:05:30,229
on that traffic so good examples that

51
00:05:28,669 --> 00:05:32,870
commonly exists things like when

52
00:05:30,229 --> 00:05:35,840
optimizers caching proxies intrusion

53
00:05:32,870 --> 00:05:38,060
prevention systems and we're seeing two

54
00:05:35,840 --> 00:05:40,520
shifts in the way these network

55
00:05:38,060 --> 00:05:42,289
functions are being deployed today the

56
00:05:40,520 --> 00:05:44,210
<font color="#E5E5E5">first of these is network functions</font>

57
00:05:42,289 --> 00:05:47,330
virtualization and the basic idea behind

58
00:05:44,210 --> 00:05:49,130
this is that we want<font color="#E5E5E5"> to take dedicated</font>

59
00:05:47,330 --> 00:05:49,919
<font color="#CCCCCC">Hardware appliances that are deployed</font>

60
00:05:49,130 --> 00:05:51,930
today

61
00:05:49,920 --> 00:05:53,100
and replace them with virtual machines

62
00:05:51,930 --> 00:05:55,260
that are providing the same

63
00:05:53,100 --> 00:05:57,120
functionality but allows us to run the

64
00:05:55,260 --> 00:05:58,920
network functions on top of generic

65
00:05:57,120 --> 00:06:01,260
compute resources so<font color="#E5E5E5"> we no longer need</font>

66
00:05:58,920 --> 00:06:03,330
customized<font color="#E5E5E5"> hardware the benefit of this</font>

67
00:06:01,260 --> 00:06:05,880
is that we can dynamically allocate

68
00:06:03,330 --> 00:06:07,650
instances of network functions as we

69
00:06:05,880 --> 00:06:10,190
need more capacity in<font color="#E5E5E5"> our network or as</font>

70
00:06:07,650 --> 00:06:12,599
we need to introduce<font color="#E5E5E5"> new functionality</font>

71
00:06:10,190 --> 00:06:15,140
the other trend that's reshaping the way

72
00:06:12,600 --> 00:06:17,490
network functions are deployed is

73
00:06:15,140 --> 00:06:19,200
software-defined networking software

74
00:06:17,490 --> 00:06:21,660
defined networking gives us the ability

75
00:06:19,200 --> 00:06:23,820
to flexibly re route traffic between

76
00:06:21,660 --> 00:06:25,290
these network functions as we create

77
00:06:23,820 --> 00:06:27,390
them or as the needs in our<font color="#E5E5E5"> network of</font>

78
00:06:25,290 --> 00:06:29,690
all and so together what these two

79
00:06:27,390 --> 00:06:32,190
trends give us is they give us a way to

80
00:06:29,690 --> 00:06:33,900
dynamically reallocate we're in our

81
00:06:32,190 --> 00:06:35,670
network we're processing certain traffic

82
00:06:33,900 --> 00:06:38,669
and what processing is happening to that

83
00:06:35,670 --> 00:06:40,740
traffic and as a result that<font color="#E5E5E5"> can enable</font>

84
00:06:38,670 --> 00:06:43,470
a variety of interesting service

85
00:06:40,740 --> 00:06:46,710
abstractions and capabilities for our

86
00:06:43,470 --> 00:06:48,480
<font color="#E5E5E5">middleboxes so one such example is we</font>

87
00:06:46,710 --> 00:06:50,580
could build a system that elastically

88
00:06:48,480 --> 00:06:53,250
scales network functions as<font color="#CCCCCC"> the demand</font>

89
00:06:50,580 --> 00:06:55,560
<font color="#E5E5E5">and our network changes over time so we</font>

90
00:06:53,250 --> 00:06:57,540
start off here with a single instance of

91
00:06:55,560 --> 00:06:59,070
<font color="#E5E5E5">an intrusion detection system and we</font>

92
00:06:57,540 --> 00:07:00,870
want to<font color="#E5E5E5"> make sure that this intrusion</font>

93
00:06:59,070 --> 00:07:02,940
detection system is going<font color="#E5E5E5"> to always be</font>

94
00:07:00,870 --> 00:07:05,250
satisfying some sort<font color="#E5E5E5"> of performance SLA</font>

95
00:07:02,940 --> 00:07:07,380
perhaps we have an SLA that says the

96
00:07:05,250 --> 00:07:10,620
packet<font color="#CCCCCC"> loss that we experience has to be</font>

97
00:07:07,380 --> 00:07:12,210
less than some percentage so as the load

98
00:07:10,620 --> 00:07:14,490
in our network increases will start to

99
00:07:12,210 --> 00:07:16,710
overload this initial instance that we

100
00:07:14,490 --> 00:07:18,900
have that's going to start to create SLA

101
00:07:16,710 --> 00:07:21,510
problems and so we need to add another

102
00:07:18,900 --> 00:07:24,120
instance which NFV makes it easy to do

103
00:07:21,510 --> 00:07:25,650
this and with Sdn then we can rear out

104
00:07:24,120 --> 00:07:28,140
some of the traffic from our original

105
00:07:25,650 --> 00:07:30,419
instance to the second instance and now

106
00:07:28,140 --> 00:07:31,919
that<font color="#E5E5E5"> gives us the ability to shed load</font>

107
00:07:30,420 --> 00:07:35,610
from that original instance and now

108
00:07:31,920 --> 00:07:37,170
satisfy our SLA<font color="#E5E5E5"> okay so now the second</font>

109
00:07:35,610 --> 00:07:39,120
thing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that at some point the load</font><font color="#E5E5E5"> in</font>

110
00:07:37,170 --> 00:07:40,680
our network may go<font color="#E5E5E5"> back down and so just</font>

111
00:07:39,120 --> 00:07:44,130
<font color="#E5E5E5">as</font><font color="#CCCCCC"> we scaled out we want to be able to</font>

112
00:07:40,680 --> 00:07:45,360
scale back in so at some<font color="#CCCCCC"> point we want</font>

113
00:07:44,130 --> 00:07:46,950
to be able to destroy the second

114
00:07:45,360 --> 00:07:48,740
<font color="#E5E5E5">instance because it's no longer needed</font>

115
00:07:46,950 --> 00:07:51,000
and we route traffic back<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> first</font>

116
00:07:48,740 --> 00:07:52,760
now<font color="#E5E5E5"> the problem here</font><font color="#CCCCCC"> is that while we're</font>

117
00:07:51,000 --> 00:07:56,430
doing this scaling in and scaling out

118
00:07:52,760 --> 00:07:59,280
it's important that we accurately

119
00:07:56,430 --> 00:08:01,440
monitor the traffic and have our<font color="#E5E5E5"> IDs</font>

120
00:07:59,280 --> 00:08:02,369
function as we expect it to to<font color="#CCCCCC"> actually</font>

121
00:08:01,440 --> 00:08:04,440
detect malicious

122
00:08:02,370 --> 00:08:05,880
tax<font color="#CCCCCC"> in our network the thing is it turns</font>

123
00:08:04,440 --> 00:08:07,919
out in order to do all three of these

124
00:08:05,880 --> 00:08:09,960
together we<font color="#CCCCCC"> actually need more than what</font>

125
00:08:07,919 --> 00:08:14,310
we can<font color="#E5E5E5"> just get with this concept of NFP</font>

126
00:08:09,960 --> 00:08:16,198
and this concept of SDN and so with<font color="#E5E5E5"> only</font>

127
00:08:14,310 --> 00:08:18,330
these two abstractions today we can't

128
00:08:16,199 --> 00:08:20,790
quite realize these scenarios like

129
00:08:18,330 --> 00:08:23,400
elastic NF scaling or some sort of high

130
00:08:20,790 --> 00:08:25,229
availability situation so to understand

131
00:08:23,400 --> 00:08:27,090
a bit more exactly what we're missing

132
00:08:25,229 --> 00:08:29,130
and what else we need let's take<font color="#E5E5E5"> a look</font>

133
00:08:27,090 --> 00:08:30,479
at<font color="#E5E5E5"> this scenario in a bit more depth so</font>

134
00:08:29,130 --> 00:08:32,189
again we're going<font color="#E5E5E5"> to assume</font><font color="#CCCCCC"> that we</font>

135
00:08:30,479 --> 00:08:33,750
start off with a single instance of the

136
00:08:32,190 --> 00:08:34,919
ids and here<font color="#E5E5E5"> i'm going to look at</font>

137
00:08:33,750 --> 00:08:36,539
traffic at a little bit finer

138
00:08:34,919 --> 00:08:39,029
granularity<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> assume that</font><font color="#E5E5E5"> we</font>

139
00:08:36,539 --> 00:08:41,039
know specific flows these could be TCP

140
00:08:39,029 --> 00:08:42,870
flows it could be a set of traffic from

141
00:08:41,039 --> 00:08:45,990
a<font color="#E5E5E5"> group of hosts but some notion of flow</font>

142
00:08:42,870 --> 00:08:48,270
through this network so as we see

143
00:08:45,990 --> 00:08:49,500
traffic from these flows this intrusion

144
00:08:48,270 --> 00:08:51,600
detection system<font color="#E5E5E5"> is going to establish</font>

145
00:08:49,500 --> 00:08:53,270
<font color="#E5E5E5">some state related to those could be</font>

146
00:08:51,600 --> 00:08:56,070
things about connection endpoints

147
00:08:53,270 --> 00:08:58,439
potential information about what we've

148
00:08:56,070 --> 00:09:01,350
seen in<font color="#CCCCCC"> the payloads so far a variety of</font>

149
00:08:58,440 --> 00:09:02,670
<font color="#E5E5E5">different pieces of information so now</font>

150
00:09:01,350 --> 00:09:04,500
when we start to hit an overload

151
00:09:02,670 --> 00:09:06,270
situation as the rate of these flows

152
00:09:04,500 --> 00:09:08,970
increase we again can launch another

153
00:09:06,270 --> 00:09:10,949
instance but<font color="#E5E5E5"> the question</font><font color="#CCCCCC"> becomes what</font>

154
00:09:08,970 --> 00:09:12,570
exact set of traffic<font color="#E5E5E5"> are we going to</font>

155
00:09:10,950 --> 00:09:16,110
<font color="#E5E5E5">talk about rerouting in this particular</font>

156
00:09:12,570 --> 00:09:18,060
<font color="#E5E5E5">case so one option is</font><font color="#CCCCCC"> that we could only</font>

157
00:09:16,110 --> 00:09:19,860
rear out new flows that are coming into

158
00:09:18,060 --> 00:09:21,719
our network such that if we<font color="#CCCCCC"> have some</font>

159
00:09:19,860 --> 00:09:23,940
green flow that comes in<font color="#E5E5E5"> we'll send it</font>

160
00:09:21,720 --> 00:09:26,610
to this second IDs instance that we just

161
00:09:23,940 --> 00:09:28,860
created it'll establish some state and

162
00:09:26,610 --> 00:09:31,620
properly analyze this traffic and this

163
00:09:28,860 --> 00:09:34,440
<font color="#E5E5E5">is great from a cost perspective we</font>

164
00:09:31,620 --> 00:09:35,940
clearly needed this extra instance but

165
00:09:34,440 --> 00:09:38,490
<font color="#E5E5E5">this isn't going to help us satisfy our</font>

166
00:09:35,940 --> 00:09:40,440
SLA we still have all that extra traffic

167
00:09:38,490 --> 00:09:42,300
from the<font color="#E5E5E5"> red and the blue flow going</font>

168
00:09:40,440 --> 00:09:44,339
through our<font color="#E5E5E5"> first instance we're still</font>

169
00:09:42,300 --> 00:09:45,990
starting to experience packet loss so

170
00:09:44,339 --> 00:09:47,670
this isn't going to work the other

171
00:09:45,990 --> 00:09:49,380
challenge that we face is that there

172
00:09:47,670 --> 00:09:51,089
could be information at each of these

173
00:09:49,380 --> 00:09:53,189
IDS's that we need<font color="#E5E5E5"> to collectively</font>

174
00:09:51,089 --> 00:09:55,200
combine in some way so maybe<font color="#E5E5E5"> we're</font>

175
00:09:53,190 --> 00:09:56,400
trying to do port scan detection all<font color="#CCCCCC"> of</font>

176
00:09:55,200 --> 00:09:58,170
these flows are going to a particular

177
00:09:56,400 --> 00:10:00,390
hosts and if we<font color="#E5E5E5"> don't aggregate</font>

178
00:09:58,170 --> 00:10:02,310
information about connection counts

179
00:10:00,390 --> 00:10:04,080
between both instances it's going to

180
00:10:02,310 --> 00:10:06,239
<font color="#CCCCCC">take us longer to detect that scan so</font>

181
00:10:04,080 --> 00:10:09,930
it's unclear<font color="#CCCCCC"> of accuracy will be</font>

182
00:10:06,240 --> 00:10:11,880
affected in<font color="#E5E5E5"> this situation also okay so</font>

183
00:10:09,930 --> 00:10:14,439
we need<font color="#E5E5E5"> to get some traffic off of this</font>

184
00:10:11,880 --> 00:10:16,300
original instance so we'll pick<font color="#CCCCCC"> one</font>

185
00:10:14,440 --> 00:10:18,430
<font color="#E5E5E5">flos let's say the blue flow and go</font>

186
00:10:16,300 --> 00:10:20,140
ahead<font color="#CCCCCC"> and rewrite it now the problem is</font>

187
00:10:18,430 --> 00:10:21,969
that while we've rerouted this flow

188
00:10:20,140 --> 00:10:23,949
we've run into a situation where we've

189
00:10:21,970 --> 00:10:25,780
left it state behind and so<font color="#CCCCCC"> now the</font>

190
00:10:23,950 --> 00:10:27,520
state that we need to<font color="#CCCCCC"> continue to</font>

191
00:10:25,780 --> 00:10:29,680
analyze this traffic and detect any

192
00:10:27,520 --> 00:10:31,480
attacks that might be in it is now only

193
00:10:29,680 --> 00:10:32,770
available at our old instance and not

194
00:10:31,480 --> 00:10:34,480
available the new place<font color="#E5E5E5"> where this</font>

195
00:10:32,770 --> 00:10:37,420
traffic is going<font color="#E5E5E5"> to so we're not going</font>

196
00:10:34,480 --> 00:10:38,890
<font color="#E5E5E5">to reach our accuracy goal at some point</font>

197
00:10:37,420 --> 00:10:40,209
eventually this blue flow will<font color="#E5E5E5"> die out</font>

198
00:10:38,890 --> 00:10:42,490
<font color="#E5E5E5">of the network the load in our network</font>

199
00:10:40,210 --> 00:10:44,200
will go back down and so from a cost

200
00:10:42,490 --> 00:10:45,970
perspective we want to ideally be able

201
00:10:44,200 --> 00:10:47,140
to destroy the second instance the

202
00:10:45,970 --> 00:10:49,300
problem is<font color="#E5E5E5"> when do we go about doing</font>

203
00:10:47,140 --> 00:10:50,650
<font color="#E5E5E5">that if we destroy it</font><font color="#CCCCCC"> immediately we run</font>

204
00:10:49,300 --> 00:10:52,150
into<font color="#CCCCCC"> the same problem where we get rid</font>

205
00:10:50,650 --> 00:10:53,829
<font color="#E5E5E5">of state that we need it we no longer</font>

206
00:10:52,150 --> 00:10:56,140
we'll be able to properly analyze the

207
00:10:53,830 --> 00:10:58,600
green flow if instead we wait for this

208
00:10:56,140 --> 00:11:00,850
green flow to die off now we're going to

209
00:10:58,600 --> 00:11:02,860
run into a situation where we need to

210
00:11:00,850 --> 00:11:04,900
wait<font color="#CCCCCC"> for a potentially unbounded amount</font>

211
00:11:02,860 --> 00:11:06,580
of time before we can destroy this so in

212
00:11:04,900 --> 00:11:08,590
traffic traces we've looked at from our

213
00:11:06,580 --> 00:11:09,970
campus<font color="#CCCCCC"> network this may mean for 25</font>

214
00:11:08,590 --> 00:11:13,360
minutes we're going<font color="#E5E5E5"> to continue to run</font>

215
00:11:09,970 --> 00:11:14,980
this instance maybe longer so that means

216
00:11:13,360 --> 00:11:16,180
we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> satisfy our SLA is and</font>

217
00:11:14,980 --> 00:11:17,950
accuracy but from a cost perspective

218
00:11:16,180 --> 00:11:21,219
we're<font color="#E5E5E5"> spending a lot of extra</font><font color="#CCCCCC"> money we</font>

219
00:11:17,950 --> 00:11:22,750
don't need<font color="#E5E5E5"> to so what exactly do we need</font>

220
00:11:21,220 --> 00:11:25,120
that if we want<font color="#E5E5E5"> to get these three goals</font>

221
00:11:22,750 --> 00:11:27,580
what's missing from just<font color="#CCCCCC"> an FB and sdn</font>

222
00:11:25,120 --> 00:11:29,500
well one thing is<font color="#E5E5E5"> that we need some way</font>

223
00:11:27,580 --> 00:11:31,360
to manage the internal state that these

224
00:11:29,500 --> 00:11:33,070
network functions are maintaining and so

225
00:11:31,360 --> 00:11:34,900
we need to be able to move it copy it

226
00:11:33,070 --> 00:11:36,280
<font color="#CCCCCC">and in some cases share it between</font>

227
00:11:34,900 --> 00:11:38,920
different instances<font color="#CCCCCC"> of a network</font>

228
00:11:36,280 --> 00:11:40,600
function second of all as we're

229
00:11:38,920 --> 00:11:42,160
transferring this state<font color="#E5E5E5"> around we want</font>

230
00:11:40,600 --> 00:11:44,020
to make sure<font color="#E5E5E5"> that we're not compromising</font>

231
00:11:42,160 --> 00:11:45,400
the accuracy of our<font color="#E5E5E5"> network function so</font>

232
00:11:44,020 --> 00:11:46,689
there<font color="#E5E5E5"> are certain guarantees we need to</font>

233
00:11:45,400 --> 00:11:48,520
have on how the state transfers

234
00:11:46,690 --> 00:11:50,290
happening such that we don't lose

235
00:11:48,520 --> 00:11:52,060
updates to this state we<font color="#E5E5E5"> don't</font>

236
00:11:50,290 --> 00:11:53,800
potentially have packets that aren't

237
00:11:52,060 --> 00:11:55,449
processed and maybe even in some cases

238
00:11:53,800 --> 00:11:58,000
<font color="#E5E5E5">we need to make sure we process the</font>

239
00:11:55,450 --> 00:11:59,589
packets in a particular order now these

240
00:11:58,000 --> 00:12:01,180
same requirements apply not only to the

241
00:11:59,589 --> 00:12:03,130
<font color="#E5E5E5">elastic scaling scenario that I talked</font>

242
00:12:01,180 --> 00:12:06,189
about but to other interesting scenarios

243
00:12:03,130 --> 00:12:07,630
like transparent failover or potentially

244
00:12:06,190 --> 00:12:10,390
if we want to<font color="#E5E5E5"> do something</font><font color="#CCCCCC"> like in-place</font>

245
00:12:07,630 --> 00:12:12,850
upgrades so I<font color="#E5E5E5"> hope I've convinced you</font>

246
00:12:10,390 --> 00:12:14,080
that we need something<font color="#E5E5E5"> new here and</font><font color="#CCCCCC"> some</font>

247
00:12:12,850 --> 00:12:15,790
for the rest<font color="#E5E5E5"> of the talk and i'll talk</font>

248
00:12:14,080 --> 00:12:17,350
<font color="#E5E5E5">about what are the challenges in doing</font>

249
00:12:15,790 --> 00:12:19,000
this and meeting those requirements i

250
00:12:17,350 --> 00:12:21,070
just talked about<font color="#CCCCCC"> i'll</font><font color="#E5E5E5"> talk about then</font>

251
00:12:19,000 --> 00:12:22,570
our architecture that we've developed in

252
00:12:21,070 --> 00:12:24,430
order<font color="#E5E5E5"> to meet those requirements and</font>

253
00:12:22,570 --> 00:12:26,260
address those challenges and lastly I'll

254
00:12:24,430 --> 00:12:27,520
close with some preliminary evaluation

255
00:12:26,260 --> 00:12:30,580
results

256
00:12:27,520 --> 00:12:32,800
so there's three<font color="#E5E5E5"> main challenges that we</font>

257
00:12:30,580 --> 00:12:34,390
face in meeting the requirements of

258
00:12:32,800 --> 00:12:36,670
being able<font color="#E5E5E5"> to move state and to do in a</font>

259
00:12:34,390 --> 00:12:38,199
way that's safe the first of<font color="#E5E5E5"> these is</font>

260
00:12:36,670 --> 00:12:40,689
that<font color="#CCCCCC"> there's a lot of different</font><font color="#E5E5E5"> network</font>

261
00:12:38,200 --> 00:12:43,120
functions out there everything from<font color="#CCCCCC"> wine</font>

262
00:12:40,690 --> 00:12:44,320
optimizers to<font color="#CCCCCC"> cashing proxies to</font><font color="#E5E5E5"> when</font>

263
00:12:43,120 --> 00:12:45,820
you start to talk about cellular

264
00:12:44,320 --> 00:12:48,520
networks things in the evolved packet

265
00:12:45,820 --> 00:12:50,110
core and we want to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that we're</font>

266
00:12:48,520 --> 00:12:51,579
minimizing the number of changes we need

267
00:12:50,110 --> 00:12:53,200
to make to these and that we can

268
00:12:51,580 --> 00:12:55,270
accommodate a lot of<font color="#CCCCCC"> different network</font>

269
00:12:53,200 --> 00:12:57,370
function architectures within this

270
00:12:55,270 --> 00:13:00,310
broader system that we're proposing to

271
00:12:57,370 --> 00:13:01,780
<font color="#E5E5E5">develop</font><font color="#CCCCCC"> the second issue is that there's</font>

272
00:13:00,310 --> 00:13:03,369
lots<font color="#E5E5E5"> of</font><font color="#CCCCCC"> things going</font><font color="#E5E5E5"> on in the network</font>

273
00:13:01,780 --> 00:13:05,079
here we're thinking about<font color="#CCCCCC"> moving</font><font color="#E5E5E5"> state</font>

274
00:13:03,370 --> 00:13:06,580
there's updates that are happening to

275
00:13:05,080 --> 00:13:08,200
that state there's packets that are

276
00:13:06,580 --> 00:13:10,030
still flowing through<font color="#CCCCCC"> our network and we</font>

277
00:13:08,200 --> 00:13:11,560
want to be<font color="#E5E5E5"> making forwarding updates so</font>

278
00:13:10,030 --> 00:13:12,910
how do<font color="#E5E5E5"> we avoid problematic race</font>

279
00:13:11,560 --> 00:13:14,699
conditions between all of these

280
00:13:12,910 --> 00:13:16,839
different things<font color="#E5E5E5"> that are going on</font>

281
00:13:14,700 --> 00:13:19,180
lastly it's important that whatever

282
00:13:16,840 --> 00:13:21,670
we're doing to move state around<font color="#E5E5E5"> doesn't</font>

283
00:13:19,180 --> 00:13:23,530
have a lot of memory overhead cpu or and

284
00:13:21,670 --> 00:13:24,819
doesn't<font color="#E5E5E5"> take a lot of time especially if</font>

285
00:13:23,530 --> 00:13:25,900
we're talking<font color="#E5E5E5"> about moving state in</font>

286
00:13:24,820 --> 00:13:27,730
scenarios where we're trying<font color="#E5E5E5"> to do</font>

287
00:13:25,900 --> 00:13:29,620
scaling we're ready in an overloaded

288
00:13:27,730 --> 00:13:31,270
situation so we don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> impose a</font>

289
00:13:29,620 --> 00:13:35,410
lot more load<font color="#E5E5E5"> onto what's already</font>

290
00:13:31,270 --> 00:13:37,660
overloaded<font color="#CCCCCC"> okay so what could</font><font color="#E5E5E5"> we use</font>

291
00:13:35,410 --> 00:13:39,610
well one thing<font color="#CCCCCC"> is we</font><font color="#E5E5E5"> could say why not</font>

292
00:13:37,660 --> 00:13:41,890
<font color="#E5E5E5">use Virtual Machine snapshots we already</font>

293
00:13:39,610 --> 00:13:43,480
have virtual machines that our network

294
00:13:41,890 --> 00:13:45,250
functions are running on we know really

295
00:13:43,480 --> 00:13:47,560
well how to snapshot virtual machines

296
00:13:45,250 --> 00:13:49,630
and clone them efficiently the problem

297
00:13:47,560 --> 00:13:51,040
is we can use this to do<font color="#CCCCCC"> scale-up</font><font color="#E5E5E5"> this</font>

298
00:13:49,630 --> 00:13:52,810
will<font color="#E5E5E5"> give us a copy of the state we need</font>

299
00:13:51,040 --> 00:13:54,339
for both of these red and blue flows and

300
00:13:52,810 --> 00:13:56,349
we can move the blue flow and we'll have

301
00:13:54,340 --> 00:13:58,330
at state the problem<font color="#CCCCCC"> is when we</font><font color="#E5E5E5"> run into</font>

302
00:13:56,350 --> 00:14:00,880
that scale down scenario we have no way

303
00:13:58,330 --> 00:14:04,300
to come recombine<font color="#CCCCCC"> to VM images</font><font color="#E5E5E5"> into one</font>

304
00:14:00,880 --> 00:14:05,740
so<font color="#E5E5E5"> that's not going to work out another</font>

305
00:14:04,300 --> 00:14:07,449
solution that exists out there is a

306
00:14:05,740 --> 00:14:09,580
<font color="#E5E5E5">system that came out of IBM Research</font>

307
00:14:07,450 --> 00:14:11,770
it's called split merge the basic<font color="#E5E5E5"> idea</font>

308
00:14:09,580 --> 00:14:15,220
of split merge is that you use shared

309
00:14:11,770 --> 00:14:17,350
library in order<font color="#CCCCCC"> to access and update</font>

310
00:14:15,220 --> 00:14:19,210
and excuse me<font color="#CCCCCC"> in</font><font color="#E5E5E5"> order to access and</font>

311
00:14:17,350 --> 00:14:21,700
create<font color="#E5E5E5"> state internally so you basically</font>

312
00:14:19,210 --> 00:14:23,710
replace all memory allocation calls with

313
00:14:21,700 --> 00:14:24,970
calls to their library functions the

314
00:14:23,710 --> 00:14:26,560
problem is<font color="#CCCCCC"> that they're targeting a very</font>

315
00:14:24,970 --> 00:14:28,330
specific scenario which is elastic

316
00:14:26,560 --> 00:14:31,930
scaling so it's<font color="#E5E5E5"> not clear their solution</font>

317
00:14:28,330 --> 00:14:33,730
will work in other scenarios and also in

318
00:14:31,930 --> 00:14:35,410
their system they don't<font color="#E5E5E5"> provide any of</font>

319
00:14:33,730 --> 00:14:37,870
these safety guarantees that'll ensure

320
00:14:35,410 --> 00:14:39,420
that we don't lose important updates and

321
00:14:37,870 --> 00:14:41,880
that packets aren't reorder

322
00:14:39,420 --> 00:14:44,490
in cases where<font color="#E5E5E5"> that can affect</font><font color="#CCCCCC"> the</font>

323
00:14:41,880 --> 00:14:47,760
accuracy of<font color="#E5E5E5"> our network function so this</font>

324
00:14:44,490 --> 00:14:49,380
brings me<font color="#CCCCCC"> to our solution open</font><font color="#E5E5E5"> NF open</font>

325
00:14:47,760 --> 00:14:51,810
and apps architecture is very similar to

326
00:14:49,380 --> 00:14:53,430
what you'll see in SD n so we have this

327
00:14:51,810 --> 00:14:55,709
logically centralized open and<font color="#CCCCCC"> f</font>

328
00:14:53,430 --> 00:14:57,900
controller and on<font color="#E5E5E5"> top of this will run</font>

329
00:14:55,710 --> 00:14:59,520
scenario specific control applications

330
00:14:57,900 --> 00:15:01,860
so one control application may be

331
00:14:59,520 --> 00:15:03,900
implementing this elastic NF scaling

332
00:15:01,860 --> 00:15:06,510
example that I talked<font color="#CCCCCC"> about and it'll</font>

333
00:15:03,900 --> 00:15:09,209
issue operations to move copy or share

334
00:15:06,510 --> 00:15:10,590
state as<font color="#CCCCCC"> it needs to underneath this</font>

335
00:15:09,210 --> 00:15:12,240
controller then we'll<font color="#E5E5E5"> have the network</font>

336
00:15:10,590 --> 00:15:14,250
functions themselves and they were going

337
00:15:12,240 --> 00:15:16,320
<font color="#CCCCCC">to conform to some sort of southbound</font>

338
00:15:14,250 --> 00:15:18,510
<font color="#E5E5E5">API</font><font color="#CCCCCC"> that we've developed such that we</font>

339
00:15:16,320 --> 00:15:21,480
can<font color="#E5E5E5"> accurately export an import state</font>

340
00:15:18,510 --> 00:15:23,490
from these different instances so when a

341
00:15:21,480 --> 00:15:25,170
control application issues in operation

342
00:15:23,490 --> 00:15:27,060
a module within the controller will

343
00:15:25,170 --> 00:15:28,829
translate that into a series of the

344
00:15:27,060 --> 00:15:30,989
southbound API calls to do our state

345
00:15:28,830 --> 00:15:32,790
transfer and once state has<font color="#CCCCCC"> been</font>

346
00:15:30,990 --> 00:15:34,650
successfully transferred we can then

347
00:15:32,790 --> 00:15:36,329
communicate with an existing<font color="#E5E5E5"> forwarding</font>

348
00:15:34,650 --> 00:15:37,860
module to tell it to<font color="#CCCCCC"> update the</font>

349
00:15:36,330 --> 00:15:39,750
forwarding state in our switch and rear

350
00:15:37,860 --> 00:15:41,490
out our traffic so I'm gonna talk a

351
00:15:39,750 --> 00:15:43,850
little bit about the the southbound part

352
00:15:41,490 --> 00:15:46,460
first and then<font color="#E5E5E5"> I'll go into how we</font>

353
00:15:43,850 --> 00:15:48,720
implement these higher level functions

354
00:15:46,460 --> 00:15:50,040
so I said there's a lot of different

355
00:15:48,720 --> 00:15:52,140
<font color="#E5E5E5">network functions out there and</font>

356
00:15:50,040 --> 00:15:53,939
obviously depending on what they do they

357
00:15:52,140 --> 00:15:55,830
<font color="#E5E5E5">maintain very different internal state</font>

358
00:15:53,940 --> 00:15:57,240
the state and a caching proxy looks

359
00:15:55,830 --> 00:15:58,680
different than the state in a nutrition

360
00:15:57,240 --> 00:16:00,210
detection system which looks different

361
00:15:58,680 --> 00:16:01,800
than the state in something like a

362
00:16:00,210 --> 00:16:03,990
<font color="#E5E5E5">really simple firewall or network</font>

363
00:16:01,800 --> 00:16:05,579
address translator but it turns out

364
00:16:03,990 --> 00:16:06,870
despite the fact that they share

365
00:16:05,580 --> 00:16:08,820
different state the way they go about

366
00:16:06,870 --> 00:16:11,550
creating and updating this state is

367
00:16:08,820 --> 00:16:13,290
common and that<font color="#E5E5E5"> they think about state</font>

368
00:16:11,550 --> 00:16:15,449
in terms of either being associated with

369
00:16:13,290 --> 00:16:18,240
<font color="#E5E5E5">an individual flow or multiple different</font>

370
00:16:15,450 --> 00:16:19,500
flows so to give you an example let's

371
00:16:18,240 --> 00:16:21,480
<font color="#E5E5E5">take a look at the state for an</font>

372
00:16:19,500 --> 00:16:23,970
intrusion detection system specifically

373
00:16:21,480 --> 00:16:26,850
the bro intrusion detection system which

374
00:16:23,970 --> 00:16:29,550
is an open source IDs that's existed for

375
00:16:26,850 --> 00:16:31,680
many years so here<font color="#E5E5E5"> we have for every</font>

376
00:16:29,550 --> 00:16:33,660
<font color="#E5E5E5">single TCP connection a couple</font><font color="#CCCCCC"> different</font>

377
00:16:31,680 --> 00:16:35,699
objects<font color="#E5E5E5"> a connection object and protocol</font>

378
00:16:33,660 --> 00:16:37,140
specific analyzer objects and we're

379
00:16:35,700 --> 00:16:40,050
going<font color="#E5E5E5"> to organize these in some sort of</font>

380
00:16:37,140 --> 00:16:42,720
a hash table likewise we have state that

381
00:16:40,050 --> 00:16:44,520
is maintained /<font color="#E5E5E5"> host so for every host</font>

382
00:16:42,720 --> 00:16:45,900
we're going to<font color="#E5E5E5"> maintain a count of how</font>

383
00:16:44,520 --> 00:16:47,699
many different<font color="#E5E5E5"> connections have been</font>

384
00:16:45,900 --> 00:16:50,069
established<font color="#CCCCCC"> or</font><font color="#E5E5E5"> attempted to be</font>

385
00:16:47,700 --> 00:16:51,840
<font color="#E5E5E5">established with that host likewise we</font>

386
00:16:50,070 --> 00:16:52,889
may have some state that's updated for

387
00:16:51,840 --> 00:16:55,109
every<font color="#E5E5E5"> single packet we</font>

388
00:16:52,889 --> 00:16:57,059
process and something<font color="#CCCCCC"> like statistics</font>

389
00:16:55,109 --> 00:16:59,689
applies to all the different<font color="#CCCCCC"> flows that</font>

390
00:16:57,059 --> 00:17:02,339
this network functions responsible for

391
00:16:59,689 --> 00:17:04,529
so we<font color="#E5E5E5"> can use this taxonomy to develop a</font>

392
00:17:02,339 --> 00:17:06,329
relatively simple API that allows<font color="#E5E5E5"> us to</font>

393
00:17:04,529 --> 00:17:09,029
get put and delete state from these

394
00:17:06,329 --> 00:17:11,789
network functions on this flow basis so

395
00:17:09,029 --> 00:17:13,349
these functions first of all except what

396
00:17:11,789 --> 00:17:16,408
kind<font color="#E5E5E5"> of scope of state are we interested</font>

397
00:17:13,349 --> 00:17:19,079
in and a filter<font color="#E5E5E5"> that defines a flow</font>

398
00:17:16,409 --> 00:17:21,120
space for what types of flows what set

399
00:17:19,079 --> 00:17:22,918
of flows were interested<font color="#E5E5E5"> in then we</font>

400
00:17:21,119 --> 00:17:25,469
modify the network functions to

401
00:17:22,919 --> 00:17:27,689
accommodate this operation it can take

402
00:17:25,470 --> 00:17:30,269
its internal<font color="#E5E5E5"> state apply this filter to</font>

403
00:17:27,689 --> 00:17:32,370
it and any state that matches will<font color="#CCCCCC"> be</font>

404
00:17:30,269 --> 00:17:33,809
sent to the controller likewise<font color="#CCCCCC"> if the</font>

405
00:17:32,370 --> 00:17:35,850
controller wants to provide some state

406
00:17:33,809 --> 00:17:37,260
to be integrated<font color="#CCCCCC"> into the middle box the</font>

407
00:17:35,850 --> 00:17:39,059
middle box can take the state and

408
00:17:37,260 --> 00:17:41,908
integrate<font color="#CCCCCC"> it into its existing</font>

409
00:17:39,059 --> 00:17:44,250
structures so this relatively simple API

410
00:17:41,909 --> 00:17:46,230
means that we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to expose or</font>

411
00:17:44,250 --> 00:17:48,389
change how the network function is

412
00:17:46,230 --> 00:17:49,740
organizing its state internally and it

413
00:17:48,389 --> 00:17:51,418
provides an intuitive way for us to

414
00:17:49,740 --> 00:17:53,850
reason about what state were interested

415
00:17:51,419 --> 00:17:56,039
<font color="#E5E5E5">in so now that</font><font color="#CCCCCC"> we have these</font>

416
00:17:53,850 --> 00:17:59,129
capabilities from network functions now

417
00:17:56,039 --> 00:18:01,019
we can go about using these for<font color="#CCCCCC"> our to</font>

418
00:17:59,130 --> 00:18:03,480
realize the operations that<font color="#E5E5E5"> our control</font>

419
00:18:01,019 --> 00:18:05,340
applications issue so let's say our

420
00:18:03,480 --> 00:18:08,100
control application wants to move all

421
00:18:05,340 --> 00:18:10,649
HTTP<font color="#CCCCCC"> traffic from being analyzed from</font>

422
00:18:08,100 --> 00:18:12,600
the first instance of an IDs to a new

423
00:18:10,649 --> 00:18:13,559
second instance that we've<font color="#E5E5E5"> created so</font>

424
00:18:12,600 --> 00:18:15,750
we're going to tell it that we want<font color="#CCCCCC"> to</font>

425
00:18:13,559 --> 00:18:16,889
move all traffic that's on port 80 the

426
00:18:15,750 --> 00:18:18,960
first thing that's going<font color="#E5E5E5"> to do is ask</font>

427
00:18:16,889 --> 00:18:21,479
the middle box for any<font color="#E5E5E5"> state that it has</font>

428
00:18:18,960 --> 00:18:23,480
<font color="#E5E5E5">related to http flows and that states</font>

429
00:18:21,480 --> 00:18:26,639
going<font color="#E5E5E5"> to be provided to our controller</font>

430
00:18:23,480 --> 00:18:28,350
next we'll go ahead and flush<font color="#CCCCCC"> this state</font>

431
00:18:26,639 --> 00:18:30,600
from our<font color="#E5E5E5"> first instance because we don't</font>

432
00:18:28,350 --> 00:18:32,668
need<font color="#E5E5E5"> it there anymore and we'll put the</font>

433
00:18:30,600 --> 00:18:34,139
state to our second instance now that

434
00:18:32,669 --> 00:18:36,149
the state's been moved we can finally go

435
00:18:34,139 --> 00:18:38,668
ahead and update our forwarding such

436
00:18:36,149 --> 00:18:41,370
that we can resume analyzing our HTTP

437
00:18:38,669 --> 00:18:43,169
traffic at the second instance we have

438
00:18:41,370 --> 00:18:44,879
<font color="#E5E5E5">similar capabilities to be able to copy</font>

439
00:18:43,169 --> 00:18:46,289
and share<font color="#CCCCCC"> state I won't go into</font><font color="#E5E5E5"> the</font>

440
00:18:44,880 --> 00:18:47,909
details<font color="#E5E5E5"> of that here but I'm happy to</font>

441
00:18:46,289 --> 00:18:51,450
answer questions about<font color="#E5E5E5"> that if you have</font>

442
00:18:47,909 --> 00:18:52,980
them later on ok so we've addressed this

443
00:18:51,450 --> 00:18:54,899
first challenge now how do<font color="#E5E5E5"> we deal with</font>

444
00:18:52,980 --> 00:18:57,750
all these race conditions and providing

445
00:18:54,899 --> 00:18:59,639
important safety guarantees so one

446
00:18:57,750 --> 00:19:01,320
problem that<font color="#E5E5E5"> can occur in the</font><font color="#CCCCCC"> move</font>

447
00:18:59,639 --> 00:19:04,229
operation i just showed is that we can

448
00:19:01,320 --> 00:19:06,750
lose packets or lose updates to state as

449
00:19:04,230 --> 00:19:08,210
a result<font color="#CCCCCC"> of packets arriving while</font>

450
00:19:06,750 --> 00:19:10,560
we're<font color="#E5E5E5"> trying to do this state transfer</font>

451
00:19:08,210 --> 00:19:11,820
so<font color="#E5E5E5"> I'm going to assume here that we're</font>

452
00:19:10,560 --> 00:19:14,040
<font color="#CCCCCC">running the bro intrusion detection</font>

453
00:19:11,820 --> 00:19:16,290
system and<font color="#CCCCCC"> it's running a script that</font>

454
00:19:14,040 --> 00:19:18,180
<font color="#E5E5E5">computes a hash of the payloads of all</font>

455
00:19:16,290 --> 00:19:20,010
the packets for a given connection and

456
00:19:18,180 --> 00:19:21,840
compares<font color="#CCCCCC"> that hash against a database of</font>

457
00:19:20,010 --> 00:19:25,260
known malware this is a standard script

458
00:19:21,840 --> 00:19:27,000
that comes with this IDs<font color="#E5E5E5"> so we'll go</font>

459
00:19:25,260 --> 00:19:29,460
again have two different flows red flow

460
00:19:27,000 --> 00:19:32,580
in a blue flow so when packets come in

461
00:19:29,460 --> 00:19:34,200
the ids is going to say<font color="#CCCCCC"> ok what hash</font>

462
00:19:32,580 --> 00:19:36,750
what's the hash of this packet and added

463
00:19:34,200 --> 00:19:38,370
<font color="#CCCCCC">to a rolling hash that it's computing so</font>

464
00:19:36,750 --> 00:19:40,290
now<font color="#E5E5E5"> at some point I say well I want</font><font color="#CCCCCC"> to</font>

465
00:19:38,370 --> 00:19:42,270
<font color="#E5E5E5">move the red flow so I'm going</font><font color="#CCCCCC"> to go</font>

466
00:19:40,290 --> 00:19:44,340
<font color="#CCCCCC">ahead and</font><font color="#E5E5E5"> do my state transfer like I</font>

467
00:19:42,270 --> 00:19:45,870
did before but<font color="#E5E5E5"> before I had a chance to</font>

468
00:19:44,340 --> 00:19:48,270
update my forwarding<font color="#E5E5E5"> state another</font>

469
00:19:45,870 --> 00:19:50,399
<font color="#E5E5E5">packet comes in for this red flow so now</font>

470
00:19:48,270 --> 00:19:51,870
this packet comes in and the intrusion

471
00:19:50,400 --> 00:19:53,280
detection system says why don't have any

472
00:19:51,870 --> 00:19:54,659
state for the red flow this must be<font color="#CCCCCC"> a</font>

473
00:19:53,280 --> 00:19:57,330
new flow so it's going<font color="#E5E5E5"> to go ahead and</font>

474
00:19:54,660 --> 00:19:58,800
establish some new state now at<font color="#E5E5E5"> some</font>

475
00:19:57,330 --> 00:20:00,990
point our forwarding updates going to

476
00:19:58,800 --> 00:20:03,480
take effect and now our<font color="#E5E5E5"> third packet is</font>

477
00:20:00,990 --> 00:20:05,850
going to come in and now when we try to

478
00:20:03,480 --> 00:20:08,040
compute a hash over this third packet

479
00:20:05,850 --> 00:20:10,560
now we only have the<font color="#E5E5E5"> first two packets</font>

480
00:20:08,040 --> 00:20:12,360
and so the hash that<font color="#E5E5E5"> we're excuse me the</font>

481
00:20:10,560 --> 00:20:14,250
first and the third packet so now this

482
00:20:12,360 --> 00:20:15,719
hash that we compute is going to be

483
00:20:14,250 --> 00:20:17,310
<font color="#E5E5E5">incorrect and we're not actually going</font>

484
00:20:15,720 --> 00:20:20,580
to<font color="#E5E5E5"> detect that there's some malware in</font>

485
00:20:17,310 --> 00:20:23,220
this flow so what we want<font color="#E5E5E5"> is we want a</font>

486
00:20:20,580 --> 00:20:24,750
guarantee<font color="#E5E5E5"> that these state operations</font>

487
00:20:23,220 --> 00:20:27,180
are lost free we want to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that</font>

488
00:20:24,750 --> 00:20:29,580
we're not<font color="#E5E5E5"> losing any packets and that</font>

489
00:20:27,180 --> 00:20:31,590
all packets are being processed that

490
00:20:29,580 --> 00:20:34,980
that have passed<font color="#E5E5E5"> through our network at</font>

491
00:20:31,590 --> 00:20:36,540
this point<font color="#E5E5E5"> in time so split merge also</font>

492
00:20:34,980 --> 00:20:38,430
provides a limited form of this loss

493
00:20:36,540 --> 00:20:39,780
freeness but it turns out a key thing

494
00:20:38,430 --> 00:20:41,880
they don't deal with is the fact that

495
00:20:39,780 --> 00:20:43,590
packets may already be in<font color="#E5E5E5"> transit to a</font>

496
00:20:41,880 --> 00:20:45,180
network function at the time we start

497
00:20:43,590 --> 00:20:47,010
the state transfer so while they can

498
00:20:45,180 --> 00:20:48,420
<font color="#E5E5E5">buffer packets at the switch they're</font>

499
00:20:47,010 --> 00:20:49,830
ignoring the fact that packets may have

500
00:20:48,420 --> 00:20:51,480
already<font color="#E5E5E5"> passed through this switch so</font>

501
00:20:49,830 --> 00:20:54,060
this doesn't quite give us the<font color="#E5E5E5"> lost</font>

502
00:20:51,480 --> 00:20:55,260
freeness that we want so how do we<font color="#E5E5E5"> go</font>

503
00:20:54,060 --> 00:20:56,760
<font color="#CCCCCC">about doing</font><font color="#E5E5E5"> this well we're going to</font>

504
00:20:55,260 --> 00:20:58,470
<font color="#E5E5E5">enhance the capabilities that the</font>

505
00:20:56,760 --> 00:21:00,420
network functions provide for us just<font color="#E5E5E5"> a</font>

506
00:20:58,470 --> 00:21:03,030
<font color="#CCCCCC">little bit we're going</font><font color="#E5E5E5"> to add an event</font>

507
00:21:00,420 --> 00:21:05,040
mechanism such that when some set of

508
00:21:03,030 --> 00:21:07,470
packets come into this network function

509
00:21:05,040 --> 00:21:09,870
we<font color="#CCCCCC"> can say do any</font><font color="#E5E5E5"> of these packets match</font>

510
00:21:07,470 --> 00:21:11,580
a filter and if they do we can send an

511
00:21:09,870 --> 00:21:13,620
event to the controller that says hey I

512
00:21:11,580 --> 00:21:15,970
was about to process this packet it was

513
00:21:13,620 --> 00:21:17,379
going to update<font color="#E5E5E5"> or it may have been</font>

514
00:21:15,970 --> 00:21:19,450
to update<font color="#E5E5E5"> some state that you're trying</font>

515
00:21:17,380 --> 00:21:20,980
<font color="#E5E5E5">to move we can then tell the network</font>

516
00:21:19,450 --> 00:21:23,350
function to either go ahead and process

517
00:21:20,980 --> 00:21:25,210
that packet buffer<font color="#E5E5E5"> for processing later</font>

518
00:21:23,350 --> 00:21:27,790
on or<font color="#E5E5E5"> simply throw it away and not</font>

519
00:21:25,210 --> 00:21:29,530
process it any further and to add this

520
00:21:27,790 --> 00:21:31,690
capability we just need to modify the

521
00:21:29,530 --> 00:21:33,760
main packet receive function within<font color="#CCCCCC"> a</font>

522
00:21:31,690 --> 00:21:35,350
<font color="#E5E5E5">middle box out of code that add a little</font>

523
00:21:33,760 --> 00:21:37,150
<font color="#CCCCCC">bit of code that</font><font color="#E5E5E5"> checks should I be</font>

524
00:21:35,350 --> 00:21:40,300
raising an event or not fairly<font color="#E5E5E5"> simple</font>

525
00:21:37,150 --> 00:21:43,000
change<font color="#CCCCCC"> okay so how do we</font><font color="#E5E5E5"> use this now to</font>

526
00:21:40,300 --> 00:21:44,470
get this loss free<font color="#E5E5E5"> property well well</font>

527
00:21:43,000 --> 00:21:46,900
first thing we'll do before we start

528
00:21:44,470 --> 00:21:48,760
transferring any state is that<font color="#CCCCCC"> we're</font>

529
00:21:46,900 --> 00:21:50,260
going<font color="#E5E5E5"> to enable events on our first</font>

530
00:21:48,760 --> 00:21:53,410
instance we're going to say whenever you

531
00:21:50,260 --> 00:21:55,330
get a packet that matches this red flow

532
00:21:53,410 --> 00:21:56,980
space that we're talking<font color="#CCCCCC"> about I want</font><font color="#E5E5E5"> to</font>

533
00:21:55,330 --> 00:21:59,350
<font color="#E5E5E5">know about that and you should not</font>

534
00:21:56,980 --> 00:22:00,910
process that packet further so now we

535
00:21:59,350 --> 00:22:02,649
can go ahead<font color="#E5E5E5"> and</font><font color="#CCCCCC"> start to transfer our</font>

536
00:22:00,910 --> 00:22:04,810
state from our<font color="#E5E5E5"> first instance to our</font>

537
00:22:02,650 --> 00:22:06,550
second and if a packet comes in in the

538
00:22:04,810 --> 00:22:08,350
middle<font color="#CCCCCC"> of the state transfer will go</font>

539
00:22:06,550 --> 00:22:10,060
ahead and construct an event and send

540
00:22:08,350 --> 00:22:13,030
that an event<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the controller where</font>

541
00:22:10,060 --> 00:22:15,940
<font color="#CCCCCC">we'll be buffered temporarily after we</font>

542
00:22:13,030 --> 00:22:17,740
finish after then we can finish our

543
00:22:15,940 --> 00:22:19,720
state transfer and after the state

544
00:22:17,740 --> 00:22:21,700
transfers done now we can<font color="#E5E5E5"> let this</font>

545
00:22:19,720 --> 00:22:24,280
packet that was buffer to the controller

546
00:22:21,700 --> 00:22:26,590
be processed<font color="#E5E5E5"> by our second instance so</font>

547
00:22:24,280 --> 00:22:29,290
now we make our forwarding update and

548
00:22:26,590 --> 00:22:30,820
when<font color="#E5E5E5"> the third packet comes in it turns</font>

549
00:22:29,290 --> 00:22:32,500
out that we've seen all packets for the

550
00:22:30,820 --> 00:22:34,540
flow they've all reflected in the state

551
00:22:32,500 --> 00:22:35,680
we can compute our correct hash and now

552
00:22:34,540 --> 00:22:38,649
we can detect that there's now we're

553
00:22:35,680 --> 00:22:39,940
here now there's<font color="#E5E5E5"> another potential</font>

554
00:22:38,650 --> 00:22:41,770
problem we were running<font color="#CCCCCC"> to which</font><font color="#E5E5E5"> is</font>

555
00:22:39,940 --> 00:22:43,570
reordering and in fact adding this loss

556
00:22:41,770 --> 00:22:45,250
free mechanism can<font color="#E5E5E5"> actually introduce</font>

557
00:22:43,570 --> 00:22:47,470
reordering that may not be possible

558
00:22:45,250 --> 00:22:49,630
otherwise and this could be problematic

559
00:22:47,470 --> 00:22:51,190
in the case of a script<font color="#CCCCCC"> that comes with</font>

560
00:22:49,630 --> 00:22:52,960
bro that looks for weird activity looks

561
00:22:51,190 --> 00:22:54,340
for things like did you get a syn packet

562
00:22:52,960 --> 00:22:57,190
after you've already got in a data

563
00:22:54,340 --> 00:23:00,220
packet so let's go<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to this fifth</font>

564
00:22:57,190 --> 00:23:01,840
step from the last slide where we were

565
00:23:00,220 --> 00:23:03,460
flushing the packets that were buffer to

566
00:23:01,840 --> 00:23:04,419
the controller so we'll flush these and

567
00:23:03,460 --> 00:23:07,090
then we'll go ahead<font color="#CCCCCC"> and make our</font>

568
00:23:04,420 --> 00:23:08,950
forwarding update so now we make our

569
00:23:07,090 --> 00:23:11,560
forwarding update but<font color="#E5E5E5"> before that update</font>

570
00:23:08,950 --> 00:23:13,270
takes effect another packet comes in so

571
00:23:11,560 --> 00:23:15,280
that packet comes in it goes to our

572
00:23:13,270 --> 00:23:17,320
<font color="#E5E5E5">third instance our third instance sighs</font>

573
00:23:15,280 --> 00:23:19,120
well I or excuse<font color="#CCCCCC"> me our first instance</font>

574
00:23:17,320 --> 00:23:20,409
says I've events enabled so I'm going<font color="#CCCCCC"> to</font>

575
00:23:19,120 --> 00:23:22,120
<font color="#E5E5E5">send this third back to the controller</font>

576
00:23:20,410 --> 00:23:23,440
the controller will say I've already

577
00:23:22,120 --> 00:23:25,060
flushed the buffer of events so I'll

578
00:23:23,440 --> 00:23:27,130
just go ahead and pass this directly to

579
00:23:25,060 --> 00:23:29,840
the switch and directly<font color="#E5E5E5"> to my second</font>

580
00:23:27,130 --> 00:23:31,429
instance but<font color="#E5E5E5"> before this packet</font>

581
00:23:29,840 --> 00:23:33,199
is that second instance our forwarding

582
00:23:31,429 --> 00:23:34,580
updates already taken effect so it's

583
00:23:33,200 --> 00:23:36,500
possible another packet comes into the

584
00:23:34,580 --> 00:23:38,120
switch<font color="#CCCCCC"> that packet gets forwarded to the</font>

585
00:23:36,500 --> 00:23:39,380
second instance and now arrives before

586
00:23:38,120 --> 00:23:41,479
we've gone through<font color="#CCCCCC"> this whole sequence</font>

587
00:23:39,380 --> 00:23:43,840
of forwarding along this third packet so

588
00:23:41,480 --> 00:23:46,850
now we have reordering that's happening

589
00:23:43,840 --> 00:23:48,649
so what we need in some cases is we need

590
00:23:46,850 --> 00:23:50,539
a guarantee that<font color="#CCCCCC"> our move operation is</font>

591
00:23:48,650 --> 00:23:52,520
order preserving which says that all

592
00:23:50,539 --> 00:23:54,379
packets are processed in<font color="#CCCCCC"> the same order</font>

593
00:23:52,520 --> 00:24:00,139
that they arrived at<font color="#CCCCCC"> the switch and that</font>

594
00:23:54,380 --> 00:24:02,659
updates to state happen in that order so

595
00:24:00,140 --> 00:24:05,750
how do we<font color="#E5E5E5"> go</font><font color="#CCCCCC"> about realizing this how am</font>

596
00:24:02,659 --> 00:24:07,309
i doing on time<font color="#CCCCCC"> okay let me actually I'm</font>

597
00:24:05,750 --> 00:24:09,409
<font color="#E5E5E5">going to skip through this because it's</font>

598
00:24:07,309 --> 00:24:12,500
kind of complex and we can come back to

599
00:24:09,409 --> 00:24:17,960
<font color="#E5E5E5">it later if people have questions okay</font>

600
00:24:12,500 --> 00:24:18,919
so third challenge issue of overhead how

601
00:24:17,960 --> 00:24:21,830
do we<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure that we're not</font>

602
00:24:18,919 --> 00:24:24,080
introducing a lot of memory CPU and

603
00:24:21,830 --> 00:24:26,510
other overhead in actually providing

604
00:24:24,080 --> 00:24:28,850
these operations well so the thing is

605
00:24:26,510 --> 00:24:30,830
<font color="#CCCCCC">that we're given applications some</font>

606
00:24:28,850 --> 00:24:33,230
choices the first choice that we're

607
00:24:30,830 --> 00:24:35,360
<font color="#CCCCCC">giving them is what sort of state do</font><font color="#E5E5E5"> you</font>

608
00:24:33,230 --> 00:24:36,710
want to move if you're only moving HTTP

609
00:24:35,360 --> 00:24:38,928
flows you only need to move<font color="#CCCCCC"> state</font>

610
00:24:36,710 --> 00:24:40,399
relating to those HTTP flows if you're

611
00:24:38,929 --> 00:24:42,020
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> create a middle box that's</font>

612
00:24:40,399 --> 00:24:44,570
highly available so<font color="#CCCCCC"> you're snapshotting</font>

613
00:24:42,020 --> 00:24:46,429
state you may say<font color="#CCCCCC"> I only</font><font color="#E5E5E5"> care that if</font>

614
00:24:44,570 --> 00:24:47,840
something<font color="#E5E5E5"> fails that a certain set of</font>

615
00:24:46,429 --> 00:24:49,809
flows continue to be processed<font color="#E5E5E5"> correctly</font>

616
00:24:47,840 --> 00:24:52,610
so now you only<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> grab that state</font>

617
00:24:49,809 --> 00:24:53,928
the other option is that you<font color="#E5E5E5"> can decide</font>

618
00:24:52,610 --> 00:24:56,209
whether<font color="#E5E5E5"> or not you need these guarantees</font>

619
00:24:53,929 --> 00:24:58,309
so the example that I was<font color="#E5E5E5"> going through</font>

620
00:24:56,210 --> 00:25:01,220
this intrusion detection system was off

621
00:24:58,309 --> 00:25:03,440
path that's what makes it an IDs versus

622
00:25:01,220 --> 00:25:05,630
an intrusion prevention system so

623
00:25:03,440 --> 00:25:07,730
because this<font color="#E5E5E5"> IDs is off path if packets</font>

624
00:25:05,630 --> 00:25:09,710
get if packets get dropped on their way

625
00:25:07,730 --> 00:25:11,570
<font color="#E5E5E5">to the IDs there's no way to get those</font>

626
00:25:09,710 --> 00:25:13,940
retransmitted the idea is getting a copy

627
00:25:11,570 --> 00:25:15,529
of traffic however in the case of an IPS

628
00:25:13,940 --> 00:25:17,809
if a packet gets dropped on its way to

629
00:25:15,529 --> 00:25:19,549
the IPS that<font color="#E5E5E5"> IPS is in the middle</font><font color="#CCCCCC"> of a</font>

630
00:25:17,809 --> 00:25:21,139
connection which means normal TCP

631
00:25:19,549 --> 00:25:22,490
mechanisms will recover<font color="#E5E5E5"> from that loss</font>

632
00:25:21,140 --> 00:25:24,409
and that IPS they'll have another

633
00:25:22,490 --> 00:25:25,880
<font color="#E5E5E5">opportunity to see that packet so in</font>

634
00:25:24,409 --> 00:25:28,070
that case we<font color="#CCCCCC"> don't need this loss free</font>

635
00:25:25,880 --> 00:25:29,990
property and so by giving control

636
00:25:28,070 --> 00:25:31,850
applications the flexibility to choose

637
00:25:29,990 --> 00:25:34,480
what they want they have some control

638
00:25:31,850 --> 00:25:37,820
over how much overhead they experience

639
00:25:34,480 --> 00:25:39,679
<font color="#E5E5E5">okay so going back to our three goals we</font>

640
00:25:37,820 --> 00:25:41,418
wanted to get SLA s we wanted to<font color="#E5E5E5"> make</font>

641
00:25:39,679 --> 00:25:42,680
sure that<font color="#CCCCCC"> we could do it at low cost we</font>

642
00:25:41,419 --> 00:25:43,970
want to make<font color="#CCCCCC"> sure that our network</font>

643
00:25:42,680 --> 00:25:46,430
functions<font color="#E5E5E5"> are happening who are</font>

644
00:25:43,970 --> 00:25:49,520
operating<font color="#E5E5E5"> accurately and analyzing</font>

645
00:25:46,430 --> 00:25:51,560
traffic correctly so we've addressed

646
00:25:49,520 --> 00:25:53,660
this issue of diversity by making<font color="#CCCCCC"> sure</font>

647
00:25:51,560 --> 00:25:55,639
that our changes that we make to<font color="#E5E5E5"> import</font>

648
00:25:53,660 --> 00:25:57,950
an export state are simple and we have a

649
00:25:55,640 --> 00:26:00,440
simple events mechanism we deal with

650
00:25:57,950 --> 00:26:02,240
race conditions by adding this<font color="#E5E5E5"> events</font>

651
00:26:00,440 --> 00:26:05,540
mechanism and by having lockstep

652
00:26:02,240 --> 00:26:07,700
forwarding updates and lastly we address

653
00:26:05,540 --> 00:26:09,350
this overhead issue by<font color="#E5E5E5"> making sure that</font>

654
00:26:07,700 --> 00:26:11,570
applications have the flexibility<font color="#CCCCCC"> to</font>

655
00:26:09,350 --> 00:26:13,750
choose what set of state and what

656
00:26:11,570 --> 00:26:16,070
guarantees they want on those operations

657
00:26:13,750 --> 00:26:19,550
so we've implemented the open and<font color="#E5E5E5"> F</font>

658
00:26:16,070 --> 00:26:21,770
architecture the controller itself is

659
00:26:19,550 --> 00:26:24,110
implemented as<font color="#E5E5E5"> a module running atop the</font>

660
00:26:21,770 --> 00:26:26,629
floodlight SDN controller and we've also

661
00:26:24,110 --> 00:26:28,760
implemented a communication library that

662
00:26:26,630 --> 00:26:31,160
can be linked into network functions in

663
00:26:28,760 --> 00:26:33,200
order to communicate between the

664
00:26:31,160 --> 00:26:35,570
controller and the network functions

665
00:26:33,200 --> 00:26:37,730
themselves we've modified<font color="#CCCCCC"> for different</font>

666
00:26:35,570 --> 00:26:40,070
network functions so far to conform to

667
00:26:37,730 --> 00:26:43,910
our southbound<font color="#E5E5E5"> API and provide events</font>

668
00:26:40,070 --> 00:26:45,800
and export<font color="#CCCCCC"> State so this is the bro</font>

669
00:26:43,910 --> 00:26:48,440
intrusion detection system we've

670
00:26:45,800 --> 00:26:51,080
modified iptables squid caching proxy

671
00:26:48,440 --> 00:26:53,420
and also<font color="#CCCCCC"> pratts which is</font><font color="#E5E5E5"> a asset</font>

672
00:26:51,080 --> 00:26:57,080
detection and monitoring system that's

673
00:26:53,420 --> 00:27:00,230
used in<font color="#E5E5E5"> our</font><font color="#CCCCCC"> University</font><font color="#E5E5E5"> Network so how</font>

674
00:26:57,080 --> 00:27:01,820
well does open an<font color="#E5E5E5"> F perform and does it</font>

675
00:27:00,230 --> 00:27:04,310
actually give us the benefits we wanted

676
00:27:01,820 --> 00:27:06,530
so we're going<font color="#E5E5E5"> to take a situation here</font>

677
00:27:04,310 --> 00:27:08,149
where we have<font color="#CCCCCC"> a trace of traffic from</font>

678
00:27:06,530 --> 00:27:10,280
our campus network that<font color="#E5E5E5"> we're replaying</font>

679
00:27:08,150 --> 00:27:12,560
at a rate of<font color="#E5E5E5"> 10,000 packets per second</font>

680
00:27:10,280 --> 00:27:14,210
<font color="#E5E5E5">and we're going</font><font color="#CCCCCC"> to start</font><font color="#E5E5E5"> with one</font>

681
00:27:12,560 --> 00:27:16,490
instance of the<font color="#CCCCCC"> boro intrusion detection</font>

682
00:27:14,210 --> 00:27:19,610
system 180 seconds into the experiment

683
00:27:16,490 --> 00:27:22,820
we say move all HTTP flows to be

684
00:27:19,610 --> 00:27:24,590
processed<font color="#CCCCCC"> by a new instance 180 seconds</font>

685
00:27:22,820 --> 00:27:27,020
later we're going<font color="#E5E5E5"> to move any active</font>

686
00:27:24,590 --> 00:27:29,600
HTTP flows at that time back<font color="#CCCCCC"> to the</font>

687
00:27:27,020 --> 00:27:31,490
original instance so in order to

688
00:27:29,600 --> 00:27:35,090
<font color="#CCCCCC">actually do the transfer of state that</font>

689
00:27:31,490 --> 00:27:38,150
we need takes 260 milliseconds and so

690
00:27:35,090 --> 00:27:39,949
that's quick doesn't<font color="#E5E5E5"> take very long we</font>

691
00:27:38,150 --> 00:27:41,390
also looked at is this accurate have we

692
00:27:39,950 --> 00:27:43,430
maintained the accuracy of the network

693
00:27:41,390 --> 00:27:45,770
function so we compared what happened if

694
00:27:43,430 --> 00:27:48,080
we let all of<font color="#CCCCCC"> the traffic be analyzed</font><font color="#E5E5E5"> by</font>

695
00:27:45,770 --> 00:27:50,270
one IDs and didn't do these moving back

696
00:27:48,080 --> 00:27:52,399
and forth operations versus what happens

697
00:27:50,270 --> 00:27:54,110
what is the output of the<font color="#E5E5E5"> IDS if we do</font>

698
00:27:52,400 --> 00:27:56,390
this scale out and scale

699
00:27:54,110 --> 00:27:58,219
back in turns out<font color="#E5E5E5"> the log entries are</font>

700
00:27:56,390 --> 00:27:59,780
equivalent if we had used this<font color="#E5E5E5"> VM</font>

701
00:27:58,220 --> 00:28:01,340
replication that I talked about<font color="#CCCCCC"> earlier</font>

702
00:27:59,780 --> 00:28:02,960
there would be entries missing from our

703
00:28:01,340 --> 00:28:05,000
log because<font color="#CCCCCC"> when we do this scale in</font>

704
00:28:02,960 --> 00:28:08,299
operation we have no way to combine to

705
00:28:05,000 --> 00:28:11,780
vm snapshots together lastly there's

706
00:28:08,299 --> 00:28:13,940
this issue of cost so how quickly were

707
00:28:11,780 --> 00:28:15,710
we able to<font color="#E5E5E5"> scale in we were able to</font>

708
00:28:13,940 --> 00:28:18,740
scale in as long<font color="#E5E5E5"> as it took us to move</font>

709
00:28:15,710 --> 00:28:21,860
the state back which again<font color="#CCCCCC"> was about 260</font>

710
00:28:18,740 --> 00:28:23,450
milliseconds if we had used waited for

711
00:28:21,860 --> 00:28:25,490
flows to diox-- the flows in<font color="#E5E5E5"> this</font>

712
00:28:23,450 --> 00:28:28,309
particular trace lasted more than 25

713
00:28:25,490 --> 00:28:31,010
minutes and so we would have<font color="#E5E5E5"> needed to</font>

714
00:28:28,309 --> 00:28:33,230
<font color="#E5E5E5">unnecessarily continue to run the second</font>

715
00:28:31,010 --> 00:28:34,730
instance of the<font color="#CCCCCC"> IDS until those flows</font>

716
00:28:33,230 --> 00:28:36,020
had finished so that would have been a

717
00:28:34,730 --> 00:28:39,470
<font color="#E5E5E5">lot of extra</font><font color="#CCCCCC"> costs that we would have</font>

718
00:28:36,020 --> 00:28:41,960
<font color="#E5E5E5">been paying so i said this move takes</font>

719
00:28:39,470 --> 00:28:43,130
260 milliseconds how does what we're

720
00:28:41,960 --> 00:28:44,929
doing it the network functions

721
00:28:43,130 --> 00:28:46,820
contribute to that so we can look at how

722
00:28:44,929 --> 00:28:48,290
long these<font color="#CCCCCC"> gat and port operations take</font>

723
00:28:46,820 --> 00:28:50,299
on<font color="#CCCCCC"> our network functions and we did this</font>

724
00:28:48,290 --> 00:28:52,639
for three of the thing network functions

725
00:28:50,299 --> 00:28:55,490
that we modify and it turns out that the

726
00:28:52,640 --> 00:28:57,020
cost to serialize in DC I state is most

727
00:28:55,490 --> 00:28:59,090
of the time that we spent in these

728
00:28:57,020 --> 00:29:00,980
network functions so potentially there's

729
00:28:59,090 --> 00:29:03,350
some definite improvement opportunities

730
00:29:00,980 --> 00:29:04,610
there if we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> do a better job with how</font>

731
00:29:03,350 --> 00:29:06,500
we go about serializing and

732
00:29:04,610 --> 00:29:08,689
<font color="#CCCCCC">deserializing we may</font><font color="#E5E5E5"> be able to improve</font>

733
00:29:06,500 --> 00:29:11,240
the efficiency there the other thing<font color="#CCCCCC"> is</font>

734
00:29:08,690 --> 00:29:13,070
that<font color="#E5E5E5"> it takes longer as the state in the</font>

735
00:29:11,240 --> 00:29:15,590
<font color="#E5E5E5">network function is more complex so</font>

736
00:29:13,070 --> 00:29:17,780
iptables has very little<font color="#E5E5E5"> state for every</font>

737
00:29:15,590 --> 00:29:19,760
flow because it only does simple rules

738
00:29:17,780 --> 00:29:22,280
like is this<font color="#E5E5E5"> TCP connection in the</font>

739
00:29:19,760 --> 00:29:24,080
established state or not contrast that

740
00:29:22,280 --> 00:29:25,760
with the bro intrusion detection system

741
00:29:24,080 --> 00:29:27,889
which needs to<font color="#E5E5E5"> know a lot</font><font color="#CCCCCC"> of information</font>

742
00:29:25,760 --> 00:29:29,510
<font color="#CCCCCC">about the flows that it's analyzing so</font>

743
00:29:27,890 --> 00:29:31,549
it states much more complex and as a

744
00:29:29,510 --> 00:29:35,210
result it takes several times longer to

745
00:29:31,549 --> 00:29:37,100
actually go about transferring it<font color="#CCCCCC"> ok so</font>

746
00:29:35,210 --> 00:29:38,780
we have<font color="#E5E5E5"> these low-level operations but</font>

747
00:29:37,100 --> 00:29:40,580
how about the<font color="#CCCCCC"> high</font><font color="#E5E5E5"> level operations and</font>

748
00:29:38,780 --> 00:29:41,780
out of the guarantees impact the time

749
00:29:40,580 --> 00:29:43,939
that it<font color="#E5E5E5"> takes us to do these move</font>

750
00:29:41,780 --> 00:29:45,710
operations so here we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> assume</font>

751
00:29:43,940 --> 00:29:48,470
<font color="#CCCCCC">that we're running the asset the preds</font>

752
00:29:45,710 --> 00:29:50,540
asset detection system we're again using

753
00:29:48,470 --> 00:29:52,960
<font color="#CCCCCC">the same trace of traffic at a slightly</font>

754
00:29:50,540 --> 00:29:55,730
lower rate<font color="#CCCCCC"> 5000 packets per second and</font>

755
00:29:52,960 --> 00:29:57,380
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to move the state for 500</font>

756
00:29:55,730 --> 00:30:00,169
flows that are active at a given point

757
00:29:57,380 --> 00:30:01,549
in time so if we look at how long<font color="#E5E5E5"> it</font>

758
00:30:00,169 --> 00:30:03,890
<font color="#E5E5E5">takes for this move operation to</font>

759
00:30:01,549 --> 00:30:05,120
complete we<font color="#E5E5E5"> can look at first of all</font>

760
00:30:03,890 --> 00:30:07,010
what happens if we don't provide<font color="#CCCCCC"> any</font>

761
00:30:05,120 --> 00:30:07,840
<font color="#E5E5E5">guarantees if we don't provide any</font>

762
00:30:07,010 --> 00:30:09,730
guarantees

763
00:30:07,840 --> 00:30:12,100
then we're talking about 190

764
00:30:09,730 --> 00:30:14,230
milliseconds to do<font color="#E5E5E5"> this operation we can</font>

765
00:30:12,100 --> 00:30:16,389
do some parallelization of our guests

766
00:30:14,230 --> 00:30:18,250
and our puts<font color="#E5E5E5"> that were issuing in order</font>

767
00:30:16,390 --> 00:30:21,640
to speed things up a little bit so now

768
00:30:18,250 --> 00:30:24,630
we can cut that down<font color="#E5E5E5"> almost in half not</font>

769
00:30:21,640 --> 00:30:27,190
quite half to about 130 milliseconds

770
00:30:24,630 --> 00:30:29,440
great now the<font color="#CCCCCC"> problem here is that we're</font>

771
00:30:27,190 --> 00:30:31,299
losing packets as a<font color="#CCCCCC"> result of</font><font color="#E5E5E5"> this so</font>

772
00:30:29,440 --> 00:30:33,400
without<font color="#CCCCCC"> any guarantees on loss freeness</font>

773
00:30:31,299 --> 00:30:36,370
or order preservation even in<font color="#E5E5E5"> the best</font>

774
00:30:33,400 --> 00:30:38,470
case we're losing 462 packets so we add

775
00:30:36,370 --> 00:30:40,178
in our loss freeness guarantee now our

776
00:30:38,470 --> 00:30:41,649
move operation takes longer takes about

777
00:30:40,179 --> 00:30:43,960
twice as long but we're not<font color="#CCCCCC"> going to</font>

778
00:30:41,649 --> 00:30:45,520
lose<font color="#CCCCCC"> any packets however we do pay an</font>

779
00:30:43,960 --> 00:30:46,990
overhead penalty so there's these

780
00:30:45,520 --> 00:30:48,789
buffering of packets that are happening

781
00:30:46,990 --> 00:30:51,279
in<font color="#E5E5E5"> the controller while we're waiting</font>

782
00:30:48,789 --> 00:30:53,770
<font color="#CCCCCC">for the state transfer to finish and so</font>

783
00:30:51,279 --> 00:30:57,429
there's 881 packets that end up<font color="#CCCCCC"> being</font>

784
00:30:53,770 --> 00:31:00,668
buffered and they experience about 120

785
00:30:57,429 --> 00:31:03,429
milliseconds extra latency on average as

786
00:31:00,669 --> 00:31:07,120
a result but never higher than about 150

787
00:31:03,429 --> 00:31:08,770
millisecond penalty if we add in this

788
00:31:07,120 --> 00:31:10,299
order preserving requirement we again

789
00:31:08,770 --> 00:31:12,340
see another increase in the amount of

790
00:31:10,299 --> 00:31:14,440
time<font color="#CCCCCC"> it takes but</font><font color="#E5E5E5"> we don't see a</font>

791
00:31:12,340 --> 00:31:16,120
significant<font color="#E5E5E5"> increase in the amount of</font>

792
00:31:14,440 --> 00:31:17,950
<font color="#E5E5E5">overhead that we're imposing on packets</font>

793
00:31:16,120 --> 00:31:20,110
although there are more packets that

794
00:31:17,950 --> 00:31:23,350
were imposing this overhead on so here

795
00:31:20,110 --> 00:31:25,990
with this order preserving operation we

796
00:31:23,350 --> 00:31:27,760
end up buffering<font color="#CCCCCC"> 883 83 packets of the</font>

797
00:31:25,990 --> 00:31:29,320
controller and<font color="#E5E5E5"> also I didn't talk about</font>

798
00:31:27,760 --> 00:31:31,120
<font color="#E5E5E5">this but there's another approximately a</font>

799
00:31:29,320 --> 00:31:32,710
thousand packets that we buffer at our

800
00:31:31,120 --> 00:31:34,719
<font color="#CCCCCC">Center second network function before</font>

801
00:31:32,710 --> 00:31:36,520
they're processed so the overall

802
00:31:34,720 --> 00:31:38,919
takeaway here is that these operations

803
00:31:36,520 --> 00:31:40,720
are reasonably efficient but the

804
00:31:38,919 --> 00:31:42,549
guarantees that we want<font color="#E5E5E5"> to offer in some</font>

805
00:31:40,720 --> 00:31:44,110
cases do come at a cost and<font color="#E5E5E5"> so it's</font>

806
00:31:42,549 --> 00:31:46,059
important for control applications to

807
00:31:44,110 --> 00:31:49,090
have that flexibility to decide whether

808
00:31:46,059 --> 00:31:50,860
<font color="#E5E5E5">or not they need these guarantees so</font>

809
00:31:49,090 --> 00:31:53,168
where are<font color="#E5E5E5"> we going from here what's the</font>

810
00:31:50,860 --> 00:31:54,428
next steps for open enough well the

811
00:31:53,169 --> 00:31:55,960
<font color="#CCCCCC">first thing is that there's a lot</font>

812
00:31:54,429 --> 00:31:57,159
there's there's buffering that was

813
00:31:55,960 --> 00:31:58,690
<font color="#E5E5E5">happening in the</font><font color="#CCCCCC"> lost</font><font color="#E5E5E5"> freenas case</font>

814
00:31:57,159 --> 00:31:59,980
there's<font color="#E5E5E5"> even more buffering that's</font>

815
00:31:58,690 --> 00:32:01,840
happening in the order preserving case

816
00:31:59,980 --> 00:32:03,010
and so the question is how can reduce

817
00:32:01,840 --> 00:32:05,049
this amount of<font color="#E5E5E5"> buffering that's</font>

818
00:32:03,010 --> 00:32:06,850
happening in an effort to<font color="#CCCCCC"> reduce the</font>

819
00:32:05,049 --> 00:32:08,799
number of packets that receive extra

820
00:32:06,850 --> 00:32:12,100
overhead and in order to reduce the

821
00:32:08,799 --> 00:32:14,200
memory usage of our system so one thing

822
00:32:12,100 --> 00:32:16,330
<font color="#CCCCCC">that we can do is rather than pausing</font>

823
00:32:14,200 --> 00:32:18,070
traffic and immediately saying before

824
00:32:16,330 --> 00:32:19,720
this state transfer starts I want you to

825
00:32:18,070 --> 00:32:21,580
start raising events we can allow the

826
00:32:19,720 --> 00:32:23,170
network function to continue to process

827
00:32:21,580 --> 00:32:26,050
<font color="#CCCCCC">cuts</font><font color="#E5E5E5"> and then any packets that are</font>

828
00:32:23,170 --> 00:32:27,910
processed we essentially reprocess those

829
00:32:26,050 --> 00:32:31,540
packets at our second instance to bring

830
00:32:27,910 --> 00:32:34,090
its state up to speed similar to what

831
00:32:31,540 --> 00:32:35,710
virtual machines do when they take when

832
00:32:34,090 --> 00:32:37,629
they're<font color="#E5E5E5"> doing migration where they'll</font>

833
00:32:35,710 --> 00:32:39,160
take a snapshot and then replay updates

834
00:32:37,630 --> 00:32:40,960
to memory later on to bring<font color="#E5E5E5"> that</font>

835
00:32:39,160 --> 00:32:44,050
snapshot up to speed before finishing

836
00:32:40,960 --> 00:32:45,280
<font color="#E5E5E5">the final migration the</font><font color="#CCCCCC"> second</font><font color="#E5E5E5"> thing</font>

837
00:32:44,050 --> 00:32:47,200
that<font color="#E5E5E5"> we can do is</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to improve the</font>

838
00:32:45,280 --> 00:32:49,090
scalability of this system so right now

839
00:32:47,200 --> 00:32:50,500
all these packets<font color="#E5E5E5"> and oh the state is</font>

840
00:32:49,090 --> 00:32:51,879
going<font color="#E5E5E5"> through the controller which means</font>

841
00:32:50,500 --> 00:32:53,920
there's a limit to<font color="#CCCCCC"> how many operations</font>

842
00:32:51,880 --> 00:32:55,450
we can<font color="#E5E5E5"> handle simultaneously out the</font>

843
00:32:53,920 --> 00:32:56,620
controller but it turns out the

844
00:32:55,450 --> 00:32:58,240
controller doesn't have to be involved

845
00:32:56,620 --> 00:33:00,610
<font color="#E5E5E5">we can actually</font><font color="#CCCCCC"> use a peer-to-peer</font>

846
00:32:58,240 --> 00:33:02,740
mechanism to transfer state directly

847
00:33:00,610 --> 00:33:04,270
between instances of a network function

848
00:33:02,740 --> 00:33:07,690
and still get all the same safety

849
00:33:04,270 --> 00:33:09,280
guarantees that<font color="#E5E5E5"> we want lastly I said we</font>

850
00:33:07,690 --> 00:33:10,450
need<font color="#CCCCCC"> to modify the network functions and</font>

851
00:33:09,280 --> 00:33:11,950
obviously there's a<font color="#CCCCCC"> lot of network</font>

852
00:33:10,450 --> 00:33:14,770
functions out there so how do we make

853
00:33:11,950 --> 00:33:16,930
this<font color="#E5E5E5"> task easier to do well where you</font>

854
00:33:14,770 --> 00:33:20,020
can<font color="#CCCCCC"> use some techniques from program</font>

855
00:33:16,930 --> 00:33:22,210
analysis in order to analyze the network

856
00:33:20,020 --> 00:33:24,040
function code and automatically figure

857
00:33:22,210 --> 00:33:26,440
out what state is this maintaining and

858
00:33:24,040 --> 00:33:28,060
what state do we need<font color="#E5E5E5"> to actually export</font>

859
00:33:26,440 --> 00:33:31,450
from this network functions as we have

860
00:33:28,060 --> 00:33:33,820
some ongoing work in that area so in

861
00:33:31,450 --> 00:33:35,890
conclusion<font color="#CCCCCC"> I hope I've convinced you</font>

862
00:33:33,820 --> 00:33:38,169
that we need something<font color="#E5E5E5"> more than just an</font>

863
00:33:35,890 --> 00:33:40,090
FV and Sdn in order to be able to

864
00:33:38,170 --> 00:33:42,480
realize rich scenarios we want to

865
00:33:40,090 --> 00:33:44,409
dynamically reallocate packet processing

866
00:33:42,480 --> 00:33:46,930
particular we need the ability to

867
00:33:44,410 --> 00:33:48,430
quickly move copy or share network

868
00:33:46,930 --> 00:33:51,310
function state and do it<font color="#E5E5E5"> in a way that's</font>

869
00:33:48,430 --> 00:33:53,770
also safe and we've achieved this with

870
00:33:51,310 --> 00:33:55,300
open enough if you want to learn<font color="#CCCCCC"> more or</font>

871
00:33:53,770 --> 00:33:56,920
if you want to try out the code for open

872
00:33:55,300 --> 00:34:00,970
and<font color="#E5E5E5"> F I encourage you to visit our</font>

873
00:33:56,920 --> 00:34:02,260
website<font color="#CCCCCC"> open an FCS wisc.edu with that I</font>

874
00:34:00,970 --> 00:34:05,520
thank you for listening and<font color="#E5E5E5"> I'll be</font>

875
00:34:02,260 --> 00:34:05,520
happy<font color="#CCCCCC"> to answer any questions you have</font>

876
00:34:08,699 --> 00:34:12,989
thanks<font color="#E5E5E5"> Aaron air are there any questions</font>

877
00:34:15,870 --> 00:34:22,659
yeah<font color="#E5E5E5"> kevin faulk</font><font color="#CCCCCC"> carnegie mellon so one</font>

878
00:34:19,810 --> 00:34:24,759
question is the things you talked about

879
00:34:22,659 --> 00:34:27,370
look like they're all cases of / flow

880
00:34:24,760 --> 00:34:28,870
stadia to move so if you're doing

881
00:34:27,370 --> 00:34:30,100
something<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> you mentioned at the</font>

882
00:34:28,870 --> 00:34:32,139
beginning there's things that could be

883
00:34:30,100 --> 00:34:35,170
<font color="#E5E5E5">not / flow state it could be pretty</font>

884
00:34:32,139 --> 00:34:37,420
large so for example is this a chunk<font color="#E5E5E5"> of</font>

885
00:34:35,170 --> 00:34:39,520
malware that I've seen before<font color="#E5E5E5"> as opposed</font>

886
00:34:37,420 --> 00:34:42,159
to does this packet have these bits set

887
00:34:39,520 --> 00:34:44,230
so you didn't I don't<font color="#E5E5E5"> think you had the</font>

888
00:34:42,159 --> 00:34:46,480
graph that actually shows kind of the

889
00:34:44,230 --> 00:34:49,420
size on the x-axis and the impact on the

890
00:34:46,480 --> 00:34:51,070
y-axis other you had examples so what

891
00:34:49,420 --> 00:34:53,190
does<font color="#CCCCCC"> that</font><font color="#E5E5E5"> look like do you have</font><font color="#CCCCCC"> that or</font>

892
00:34:51,070 --> 00:34:55,780
so I<font color="#CCCCCC"> I guess I</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have an exact graph</font>

893
00:34:53,190 --> 00:34:58,330
the best I can show you the<font color="#CCCCCC"> best I can</font>

894
00:34:55,780 --> 00:34:59,890
put up here<font color="#E5E5E5"> is sort of this which says</font>

895
00:34:58,330 --> 00:35:01,779
here's how how much you're talking about

896
00:34:59,890 --> 00:35:03,520
so in the case of iptables<font color="#CCCCCC"> I can give</font>

897
00:35:01,780 --> 00:35:06,670
<font color="#CCCCCC">you an idea</font><font color="#E5E5E5"> that the state for a single</font>

898
00:35:03,520 --> 00:35:09,340
flow is less than a kilobyte in the case

899
00:35:06,670 --> 00:35:11,020
of bro we're talking about a hundred or

900
00:35:09,340 --> 00:35:12,970
two hundred kilobytes of state for flow

901
00:35:11,020 --> 00:35:16,150
so it<font color="#E5E5E5"> is it is reasonably small that's</font>

902
00:35:12,970 --> 00:35:19,270
true and so one thing<font color="#CCCCCC"> you can do is is</font>

903
00:35:16,150 --> 00:35:21,280
is to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to start to proactively</font>

904
00:35:19,270 --> 00:35:23,590
copy some of the state and our replay

905
00:35:21,280 --> 00:35:25,330
events that's future<font color="#E5E5E5"> work would enable</font>

906
00:35:23,590 --> 00:35:26,800
that the other thing i want to touch on

907
00:35:25,330 --> 00:35:28,299
that you mentioned is this idea that

908
00:35:26,800 --> 00:35:30,280
everything<font color="#CCCCCC"> i was assuming here was /</font>

909
00:35:28,300 --> 00:35:32,200
flow so a good example of multi flow

910
00:35:30,280 --> 00:35:34,540
state would be objects in a cache and

911
00:35:32,200 --> 00:35:36,009
you may say well there's there's cash

912
00:35:34,540 --> 00:35:38,440
sharing protocols out there or we can

913
00:35:36,010 --> 00:35:40,240
just go ahead<font color="#E5E5E5"> and and not worry about it</font>

914
00:35:38,440 --> 00:35:41,410
because<font color="#E5E5E5"> it'll just get recast right and</font>

915
00:35:40,240 --> 00:35:43,060
so that may be a trade-off you're

916
00:35:41,410 --> 00:35:45,100
willing to make in some cases as you may

917
00:35:43,060 --> 00:35:47,500
say it's not critical that I copy this

918
00:35:45,100 --> 00:35:49,210
state so I'm<font color="#CCCCCC"> not</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to bother but in</font>

919
00:35:47,500 --> 00:35:50,560
some cases if you're actively serving a

920
00:35:49,210 --> 00:35:52,540
connection and<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> saying here's an</font>

921
00:35:50,560 --> 00:35:54,190
object i'm serving to this client if<font color="#E5E5E5"> you</font>

922
00:35:52,540 --> 00:35:55,720
move that connection in<font color="#CCCCCC"> the middle of</font>

923
00:35:54,190 --> 00:35:57,130
serving that object then you definitely

924
00:35:55,720 --> 00:36:00,549
have to<font color="#E5E5E5"> go about copying that object</font>

925
00:35:57,130 --> 00:36:02,920
over well or take the<font color="#CCCCCC"> cache hit later i</font>

926
00:36:00,550 --> 00:36:04,660
suppose right<font color="#CCCCCC"> i mean</font><font color="#E5E5E5"> there's some it</font>

927
00:36:02,920 --> 00:36:06,220
depends on the semantics you want to you

928
00:36:04,660 --> 00:36:07,660
will know exactly it's<font color="#E5E5E5"> it's very</font>

929
00:36:06,220 --> 00:36:09,250
dependent say so<font color="#CCCCCC"> i guess there's another</font>

930
00:36:07,660 --> 00:36:11,109
kind of question related to that which

931
00:36:09,250 --> 00:36:13,270
is<font color="#CCCCCC"> probably bigger than just</font><font color="#E5E5E5"> your</font>

932
00:36:11,110 --> 00:36:15,700
project but so if i have<font color="#CCCCCC"> a cascade of</font>

933
00:36:13,270 --> 00:36:17,500
three or four<font color="#CCCCCC"> of these functions</font><font color="#E5E5E5"> and one</font>

934
00:36:15,700 --> 00:36:19,598
of them Rob's the packets in some way

935
00:36:17,500 --> 00:36:21,789
such that reclassification of the prior

936
00:36:19,599 --> 00:36:23,819
uplink thing needs to<font color="#E5E5E5"> be done but now</font>

937
00:36:21,789 --> 00:36:26,890
<font color="#E5E5E5">you've migrated one to some other place</font>

938
00:36:23,819 --> 00:36:29,229
what kind of situations could I get

939
00:36:26,890 --> 00:36:31,390
myself in with respect to do that in

940
00:36:29,229 --> 00:36:33,279
this era scheduling something or other

941
00:36:31,390 --> 00:36:34,749
you do to deal with that yeah so we've

942
00:36:33,279 --> 00:36:36,430
so we've thought a little<font color="#E5E5E5"> bit about sort</font>

943
00:36:34,749 --> 00:36:38,169
of<font color="#E5E5E5"> the chaining scenario where you have</font>

944
00:36:36,430 --> 00:36:41,618
many<font color="#E5E5E5"> of these network functions that</font>

945
00:36:38,170 --> 00:36:43,569
you're passing through so I think we

946
00:36:41,619 --> 00:36:45,519
think that<font color="#E5E5E5"> in many</font><font color="#CCCCCC"> cases you can sort of</font>

947
00:36:43,569 --> 00:36:47,259
if you have a chain you<font color="#E5E5E5"> can sort of my</font>

948
00:36:45,519 --> 00:36:48,549
great for one middle box in the chain at

949
00:36:47,259 --> 00:36:51,609
a time and you end<font color="#CCCCCC"> up</font><font color="#E5E5E5"> doing some</font>

950
00:36:48,549 --> 00:36:53,349
temporary redirection in that case<font color="#CCCCCC"> you</font>

951
00:36:51,609 --> 00:36:54,869
can<font color="#E5E5E5"> certainly do better scheduling if</font>

952
00:36:53,349 --> 00:36:56,950
you look at the<font color="#E5E5E5"> entire chain at a time</font>

953
00:36:54,869 --> 00:36:58,630
we<font color="#E5E5E5"> need to give some</font><font color="#CCCCCC"> thought yet as to</font>

954
00:36:56,950 --> 00:36:59,950
how<font color="#E5E5E5"> we sort of extend our safety</font>

955
00:36:58,630 --> 00:37:02,950
guarantees to guarantee them across

956
00:36:59,950 --> 00:37:05,259
multiple network functions no I the last

957
00:37:02,950 --> 00:37:07,029
comment was related to you said about

958
00:37:05,259 --> 00:37:10,539
<font color="#CCCCCC">chain moving</font><font color="#E5E5E5"> the state ahead of time or</font>

959
00:37:07,029 --> 00:37:12,930
<font color="#E5E5E5">something or program analysis but seems</font>

960
00:37:10,539 --> 00:37:16,390
to me that something along the lines of

961
00:37:12,930 --> 00:37:17,828
some<font color="#E5E5E5"> distributed almost like distributed</font>

962
00:37:16,390 --> 00:37:20,348
shared memory or something<font color="#CCCCCC"> where where</font>

963
00:37:17,829 --> 00:37:23,559
you can look at page accesses if you're

964
00:37:20,349 --> 00:37:28,289
willing<font color="#CCCCCC"> to eat some of that page fault</font>

965
00:37:23,559 --> 00:37:28,289
time might<font color="#CCCCCC"> be relevant there</font><font color="#E5E5E5"> thanks</font>

966
00:37:33,329 --> 00:37:41,069
I execrable of Nokia actually I just

967
00:37:36,359 --> 00:37:43,499
<font color="#CCCCCC">have one comment that's in some cases</font>

968
00:37:41,069 --> 00:37:45,329
you can fix this problem just with<font color="#CCCCCC"> the</font>

969
00:37:43,499 --> 00:37:49,109
controller and they're moving this state

970
00:37:45,329 --> 00:37:52,469
because you speak into the mic please

971
00:37:49,109 --> 00:37:55,288
and if you have a pro if you have the

972
00:37:52,469 --> 00:37:57,719
subscriber which which was registered in

973
00:37:55,289 --> 00:37:59,489
<font color="#E5E5E5">the</font><font color="#CCCCCC"> same network element you can just</font>

974
00:37:57,719 --> 00:38:01,890
<font color="#E5E5E5">move with him because he must be aware</font>

975
00:37:59,489 --> 00:38:05,579
<font color="#E5E5E5">that he now might registration to the</font>

976
00:38:01,890 --> 00:38:08,549
different network government so in some

977
00:38:05,579 --> 00:38:11,249
<font color="#CCCCCC">cases you only application</font><font color="#E5E5E5"> itself can</font>

978
00:38:08,549 --> 00:38:13,529
move this state and can inform other

979
00:38:11,249 --> 00:38:16,078
elements that's now the subscriber I

980
00:38:13,529 --> 00:38:20,099
move the state from this unit from<font color="#CCCCCC"> that</font>

981
00:38:16,079 --> 00:38:22,109
unit so I mean it's in some up for<font color="#CCCCCC"> some</font>

982
00:38:20,099 --> 00:38:24,660
application you<font color="#CCCCCC"> can change</font><font color="#E5E5E5"> the state</font>

983
00:38:22,109 --> 00:38:26,489
with<font color="#CCCCCC"> the controller but for some cases</font>

984
00:38:24,660 --> 00:38:29,819
<font color="#CCCCCC">you can do it only with the application</font>

985
00:38:26,489 --> 00:38:33,029
level so application itself must decide

986
00:38:29,819 --> 00:38:35,640
how to correctly move the state that's

987
00:38:33,029 --> 00:38:37,829
true so I agree that<font color="#E5E5E5"> there's certainly</font>

988
00:38:35,640 --> 00:38:39,598
there's some information you<font color="#E5E5E5"> need to</font>

989
00:38:37,829 --> 00:38:41,039
know about<font color="#E5E5E5"> the network functions to go</font>

990
00:38:39,599 --> 00:38:42,809
to know how you're going to go<font color="#E5E5E5"> about</font>

991
00:38:41,039 --> 00:38:45,119
writing these applications and that's

992
00:38:42,809 --> 00:38:46,709
something that we<font color="#E5E5E5"> haven't yet done a</font>

993
00:38:45,119 --> 00:38:48,690
good job of capturing we're hoping<font color="#CCCCCC"> that</font>

994
00:38:46,709 --> 00:38:51,538
ideally some of our program analysis

995
00:38:48,690 --> 00:38:52,799
could give you a simplified model of how

996
00:38:51,539 --> 00:38:54,779
this network function works or

997
00:38:52,799 --> 00:38:56,579
potentially give you<font color="#E5E5E5"> recommendations on</font>

998
00:38:54,779 --> 00:38:58,170
ears which are hues which you should

999
00:38:56,579 --> 00:38:59,809
have your control application do and if

1000
00:38:58,170 --> 00:39:01,979
<font color="#CCCCCC">you have it do this you'll get this</font>

1001
00:38:59,809 --> 00:39:03,420
equivalency level of output if you have

1002
00:39:01,979 --> 00:39:05,430
it do something<font color="#E5E5E5"> else instead you'll get</font>

1003
00:39:03,420 --> 00:39:06,390
this equivalency level of output so some

1004
00:39:05,430 --> 00:39:08,279
interesting questions about how you

1005
00:39:06,390 --> 00:39:09,828
communicate that with someone<font color="#E5E5E5"> who's</font>

1006
00:39:08,279 --> 00:39:12,979
trying to<font color="#E5E5E5"> write a control application</font>

1007
00:39:09,829 --> 00:39:12,979
thank you

1008
00:39:21,430 --> 00:39:28,969
<font color="#E5E5E5">okay so for the state move monster</font>

1009
00:39:26,630 --> 00:39:31,279
what's the condition to check that move

1010
00:39:28,969 --> 00:39:34,099
so is that dynamic warm oh it's

1011
00:39:31,279 --> 00:39:36,349
aesthetically can be good or so

1012
00:39:34,099 --> 00:39:37,609
interesting about that<font color="#E5E5E5"> that's really up</font>

1013
00:39:36,349 --> 00:39:39,289
to the control applications how they

1014
00:39:37,609 --> 00:39:40,670
want<font color="#E5E5E5"> to do it so your control</font>

1015
00:39:39,289 --> 00:39:43,160
application in<font color="#CCCCCC"> the scaling scenario</font>

1016
00:39:40,670 --> 00:39:44,930
could be maybe<font color="#E5E5E5"> it's monitoring CPU and</font>

1017
00:39:43,160 --> 00:39:47,118
it says I'm<font color="#E5E5E5"> going to monitor CPU and</font>

1018
00:39:44,930 --> 00:39:48,919
then I'm going<font color="#E5E5E5"> to do some sort of</font>

1019
00:39:47,119 --> 00:39:51,200
measurements of what are my elephant

1020
00:39:48,920 --> 00:39:53,150
flows to figure out exactly what sort<font color="#CCCCCC"> of</font>

1021
00:39:51,200 --> 00:39:55,029
flows I want to move from one box to

1022
00:39:53,150 --> 00:39:57,440
another so that's completely flexible

1023
00:39:55,029 --> 00:40:00,979
and you could<font color="#E5E5E5"> implement whatever you</font>

1024
00:39:57,440 --> 00:40:03,529
wanted there right so and because I

1025
00:40:00,979 --> 00:40:05,538
assume<font color="#CCCCCC"> that when you move something from</font>

1026
00:40:03,529 --> 00:40:07,700
one place to another place it'll also

1027
00:40:05,539 --> 00:40:09,380
cost you something like been with<font color="#CCCCCC"> us or</font>

1028
00:40:07,700 --> 00:40:13,129
<font color="#E5E5E5">something like that so initially you</font>

1029
00:40:09,380 --> 00:40:15,619
want to move<font color="#E5E5E5"> because you want</font><font color="#CCCCCC"> to meet</font>

1030
00:40:13,130 --> 00:40:17,749
the sa way but<font color="#E5E5E5"> right now when you move</font>

1031
00:40:15,619 --> 00:40:20,809
actually you are like a spanning like

1032
00:40:17,749 --> 00:40:24,109
some bandwidth cuz that you know make

1033
00:40:20,809 --> 00:40:26,089
<font color="#CCCCCC">the</font><font color="#E5E5E5"> problem like even worse and then I</font>

1034
00:40:24,109 --> 00:40:28,999
believe he'll you know from<font color="#E5E5E5"> the</font>

1035
00:40:26,089 --> 00:40:32,328
presentation it's not quite clear<font color="#E5E5E5"> to me</font>

1036
00:40:28,999 --> 00:40:34,939
and<font color="#E5E5E5"> also this moving thing you know you</font>

1037
00:40:32,329 --> 00:40:37,339
can<font color="#E5E5E5"> legally solve the essay way a</font>

1038
00:40:34,940 --> 00:40:39,739
problem so it's true<font color="#E5E5E5"> that there are</font>

1039
00:40:37,339 --> 00:40:40,910
there are<font color="#E5E5E5"> other SLA s not only I guess I</font>

1040
00:40:39,739 --> 00:40:42,259
was referring to as a lace for the

1041
00:40:40,910 --> 00:40:43,399
<font color="#E5E5E5">network function itself but you're</font><font color="#CCCCCC"> right</font>

1042
00:40:42,259 --> 00:40:45,950
that what you're doing<font color="#CCCCCC"> in the network</font>

1043
00:40:43,400 --> 00:40:47,599
can certainly have an impact and so one

1044
00:40:45,950 --> 00:40:49,218
way to do<font color="#CCCCCC"> that is to be</font><font color="#E5E5E5"> a little bit</font>

1045
00:40:47,599 --> 00:40:52,249
more proactive and say<font color="#CCCCCC"> alright we're</font>

1046
00:40:49,219 --> 00:40:54,920
<font color="#E5E5E5">getting close to violating an SLA and so</font>

1047
00:40:52,249 --> 00:40:56,749
we want<font color="#E5E5E5"> to recognize that we better</font>

1048
00:40:54,920 --> 00:40:58,849
start this migration now otherwise we're

1049
00:40:56,749 --> 00:41:01,009
for sure going to violate the SLA s that

1050
00:40:58,849 --> 00:41:02,059
we have but<font color="#E5E5E5"> yeah I agree there's there's</font>

1051
00:41:01,009 --> 00:41:03,349
some interesting questions there and

1052
00:41:02,059 --> 00:41:05,960
that's one of the<font color="#E5E5E5"> reasons we also want</font>

1053
00:41:03,349 --> 00:41:07,519
to look at how can we reduce the<font color="#CCCCCC"> amount</font>

1054
00:41:05,960 --> 00:41:09,109
of state that we're transferring and so

1055
00:41:07,519 --> 00:41:12,078
some of our program analysis is trying

1056
00:41:09,109 --> 00:41:13,489
to understand rather than exporting all

1057
00:41:12,079 --> 00:41:15,499
of the state that the network function

1058
00:41:13,489 --> 00:41:17,180
is maintaining can we figure<font color="#E5E5E5"> out what</font>

1059
00:41:15,499 --> 00:41:19,549
state was updated since the last time

1060
00:41:17,180 --> 00:41:22,788
maybe we create a snapshot in a failover

1061
00:41:19,549 --> 00:41:25,190
situation or can we figure out<font color="#E5E5E5"> maybe</font>

1062
00:41:22,789 --> 00:41:26,599
some state affects the packets that are

1063
00:41:25,190 --> 00:41:29,059
output but are not by<font color="#CCCCCC"> our network</font>

1064
00:41:26,599 --> 00:41:31,339
function and other state affects the log

1065
00:41:29,059 --> 00:41:32,779
and maybe we say you<font color="#E5E5E5"> know in something</font>

1066
00:41:31,339 --> 00:41:34,220
like a caching proxy we're not really

1067
00:41:32,779 --> 00:41:35,570
concerned about the accuracy of the

1068
00:41:34,220 --> 00:41:37,640
so we're not<font color="#E5E5E5"> going to bother to move</font>

1069
00:41:35,570 --> 00:41:39,500
that state and so you may be able<font color="#E5E5E5"> to</font>

1070
00:41:37,640 --> 00:41:43,190
limit what state you move in exchange

1071
00:41:39,500 --> 00:41:44,630
for a relaxed notion of the behavior of

1072
00:41:43,190 --> 00:41:46,190
your<font color="#E5E5E5"> network function and</font><font color="#CCCCCC"> how much it</font>

1073
00:41:44,630 --> 00:41:51,560
compares to what would you would have

1074
00:41:46,190 --> 00:41:54,770
gotten if you didn't<font color="#E5E5E5"> move at all diallo</font>

1075
00:41:51,560 --> 00:41:56,570
past and phone again first of all is

1076
00:41:54,770 --> 00:42:00,770
that you are mentioning continuously

1077
00:41:56,570 --> 00:42:02,119
middleboxes and well we are working with

1078
00:42:00,770 --> 00:42:04,250
natural functions that are related

1079
00:42:02,119 --> 00:42:06,140
purely to the data playing I<font color="#CCCCCC"> mean</font>

1080
00:42:04,250 --> 00:42:09,290
<font color="#CCCCCC">writing</font><font color="#E5E5E5"> functions</font><font color="#CCCCCC"> and forwarding</font>

1081
00:42:06,140 --> 00:42:11,629
functions in general how do you see

1082
00:42:09,290 --> 00:42:15,500
these kind of framework applied in that

1083
00:42:11,630 --> 00:42:17,270
in that environment so it's an excellent

1084
00:42:15,500 --> 00:42:19,820
question I haven't<font color="#CCCCCC"> really thought about</font>

1085
00:42:17,270 --> 00:42:21,590
it in terms of control plane devices

1086
00:42:19,820 --> 00:42:26,869
I've<font color="#E5E5E5"> only really thought about in terms</font>

1087
00:42:21,590 --> 00:42:28,070
of data playing devices I think I think

1088
00:42:26,869 --> 00:42:29,660
there's probably a different problem

1089
00:42:28,070 --> 00:42:31,340
there and<font color="#E5E5E5"> potentially a simpler solution</font>

1090
00:42:29,660 --> 00:42:34,580
when you start to talk<font color="#E5E5E5"> about things that</font>

1091
00:42:31,340 --> 00:42:36,410
the control plane sort of the<font color="#CCCCCC"> thing that</font>

1092
00:42:34,580 --> 00:42:37,910
<font color="#E5E5E5">comes most mind is is work that's being</font>

1093
00:42:36,410 --> 00:42:40,190
done in the<font color="#E5E5E5"> distributed SDN controller</font>

1094
00:42:37,910 --> 00:42:42,470
case where there<font color="#CCCCCC"> you're SDN controller</font>

1095
00:42:40,190 --> 00:42:44,599
is your control plane and so there

1096
00:42:42,470 --> 00:42:46,700
you're concerned about moving state but

1097
00:42:44,599 --> 00:42:48,050
you don't<font color="#E5E5E5"> have packets necessarily that</font>

1098
00:42:46,700 --> 00:42:50,240
<font color="#E5E5E5">are going through this controller and so</font>

1099
00:42:48,050 --> 00:42:52,310
you<font color="#CCCCCC"> don't have that challenge to deal</font>

1100
00:42:50,240 --> 00:42:54,560
with yeah no I<font color="#CCCCCC"> mean I mean I'm thinking</font>

1101
00:42:52,310 --> 00:42:55,970
<font color="#CCCCCC">about the when you're</font><font color="#E5E5E5"> going to make it</font>

1102
00:42:54,560 --> 00:42:57,859
you're moving the function is it

1103
00:42:55,970 --> 00:43:01,848
performance / penalties and<font color="#CCCCCC"> D and the</font>

1104
00:42:57,859 --> 00:43:03,859
kind<font color="#E5E5E5"> of I mean I see a value in this for</font>

1105
00:43:01,849 --> 00:43:06,050
the air for the data pulling functions

1106
00:43:03,859 --> 00:43:08,000
but the other hand<font color="#CCCCCC"> is precisely the</font>

1107
00:43:06,050 --> 00:43:10,450
penalties that you will occur in the kc

1108
00:43:08,000 --> 00:43:12,830
to apply a<font color="#E5E5E5"> a former framework like this</font>

1109
00:43:10,450 --> 00:43:15,230
something that I was thinking whether

1110
00:43:12,830 --> 00:43:17,900
whether in the case for<font color="#E5E5E5"> example where we</font>

1111
00:43:15,230 --> 00:43:21,290
have<font color="#CCCCCC"> a project on visualizing</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> hunger</font>

1112
00:43:17,900 --> 00:43:24,109
others mm-hmm whether that we could

1113
00:43:21,290 --> 00:43:27,890
apply these in Sun in some environments

1114
00:43:24,109 --> 00:43:29,029
just and I was curious<font color="#E5E5E5"> if sure yes so I</font>

1115
00:43:27,890 --> 00:43:30,980
think<font color="#CCCCCC"> you could I think one challenge</font>

1116
00:43:29,030 --> 00:43:32,720
that you<font color="#CCCCCC"> certainly face is sort of where</font>

1117
00:43:30,980 --> 00:43:34,580
is this going to which is sort of a

1118
00:43:32,720 --> 00:43:36,859
standard nfe challenge you know to

1119
00:43:34,580 --> 00:43:38,299
migrate in<font color="#E5E5E5"> an ass across the entire</font>

1120
00:43:36,859 --> 00:43:40,098
continental United States versus to

1121
00:43:38,300 --> 00:43:42,020
migrate it between something in a metro

1122
00:43:40,099 --> 00:43:43,970
area is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a really different</font>

1123
00:43:42,020 --> 00:43:46,119
situation and one is probably feasible

1124
00:43:43,970 --> 00:43:48,730
the other is some kind of state that

1125
00:43:46,119 --> 00:43:51,700
to preserve as well but anyway secondly

1126
00:43:48,730 --> 00:43:54,369
if I've understood well because<font color="#CCCCCC"> AC</font><font color="#E5E5E5"> is</font>

1127
00:43:51,700 --> 00:43:57,269
just to share my vibe um to see what I

1128
00:43:54,369 --> 00:44:00,880
do share it as well as I see this<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a</font>

1129
00:43:57,269 --> 00:44:02,649
similarity between these and this some

1130
00:44:00,880 --> 00:44:04,450
time<font color="#E5E5E5"> ago I remember when in</font>

1131
00:44:02,650 --> 00:44:08,829
object-oriented programming there's a

1132
00:44:04,450 --> 00:44:11,230
object persistence frameworks I think

1133
00:44:08,829 --> 00:44:12,700
this this is a clear connection right so

1134
00:44:11,230 --> 00:44:15,400
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> very much connected with this</font>

1135
00:44:12,700 --> 00:44:16,779
yes we haven't we haven't necessarily

1136
00:44:15,400 --> 00:44:18,549
look specifically at that body of

1137
00:44:16,779 --> 00:44:19,960
<font color="#E5E5E5">research although</font><font color="#CCCCCC"> we have started to</font>

1138
00:44:18,549 --> 00:44:21,880
look at it actually as we're<font color="#CCCCCC"> doing some</font>

1139
00:44:19,960 --> 00:44:23,740
this program analysis because there's

1140
00:44:21,880 --> 00:44:25,660
all sorts of things<font color="#CCCCCC"> to figure out what</font>

1141
00:44:23,740 --> 00:44:27,758
objects exist beyond the processing of a

1142
00:44:25,660 --> 00:44:29,529
single packet and what objects are only

1143
00:44:27,759 --> 00:44:32,259
used during the<font color="#E5E5E5"> processing of that one</font>

1144
00:44:29,529 --> 00:44:34,119
packet at this middle box and so I think

1145
00:44:32,259 --> 00:44:36,369
there is<font color="#E5E5E5"> definitely a broader body of</font>

1146
00:44:34,119 --> 00:44:38,970
work<font color="#E5E5E5"> there that's worth considering</font>

1147
00:44:36,369 --> 00:44:41,559
because there are some researchers have

1148
00:44:38,970 --> 00:44:43,990
<font color="#E5E5E5">been talking with that they are starting</font>

1149
00:44:41,559 --> 00:44:46,089
<font color="#CCCCCC">to think precisely on a network</font>

1150
00:44:43,990 --> 00:44:48,339
programming paradigm that is object

1151
00:44:46,089 --> 00:44:49,960
oriented and<font color="#E5E5E5"> thereby precisely one of</font>

1152
00:44:48,339 --> 00:44:52,180
the properties that<font color="#CCCCCC"> they were</font><font color="#E5E5E5"> thinking</font>

1153
00:44:49,960 --> 00:44:53,710
about was about persistence and this

1154
00:44:52,180 --> 00:44:55,808
kind of replicability this is something

1155
00:44:53,710 --> 00:44:59,200
that<font color="#E5E5E5"> it was taking note because probably</font>

1156
00:44:55,809 --> 00:45:00,489
will and finally it's about that you

1157
00:44:59,200 --> 00:45:02,230
were mentioning here a control

1158
00:45:00,489 --> 00:45:03,970
application the control playing this is

1159
00:45:02,230 --> 00:45:07,809
something that<font color="#CCCCCC"> your</font><font color="#E5E5E5"> start thinking about</font>

1160
00:45:03,970 --> 00:45:09,069
well<font color="#E5E5E5"> you take the</font><font color="#CCCCCC"> d sdn architecture you</font>

1161
00:45:07,809 --> 00:45:12,700
have the end of your key texture and

1162
00:45:09,069 --> 00:45:14,470
well we have having some problems in

1163
00:45:12,700 --> 00:45:16,149
match in them and then there<font color="#E5E5E5"> is a third</font>

1164
00:45:14,470 --> 00:45:19,058
dimension because this is an<font color="#CCCCCC"> additional</font>

1165
00:45:16,150 --> 00:45:23,200
dimension right right so well we have

1166
00:45:19,059 --> 00:45:25,539
three<font color="#E5E5E5"> access now how we put them in</font>

1167
00:45:23,200 --> 00:45:26,739
space I mean I won't on application that

1168
00:45:25,539 --> 00:45:29,710
is<font color="#E5E5E5"> running according to as the end</font>

1169
00:45:26,739 --> 00:45:32,230
principles that can be can apply any of

1170
00:45:29,710 --> 00:45:34,599
the orchestration and now we want<font color="#CCCCCC"> to</font>

1171
00:45:32,230 --> 00:45:39,900
replicate it how do you see these are

1172
00:45:34,599 --> 00:45:39,900
these all the whole thing matching and

1173
00:45:40,049 --> 00:45:46,569
so I think<font color="#E5E5E5"> I think certainly some of</font>

1174
00:45:43,869 --> 00:45:48,489
what this controller is doing could be

1175
00:45:46,569 --> 00:45:51,249
part of another controller that's

1176
00:45:48,489 --> 00:45:54,940
already doing something sdn or the nfe

1177
00:45:51,249 --> 00:45:57,189
orchestration things in the network but

1178
00:45:54,940 --> 00:45:58,450
it's not<font color="#E5E5E5"> it's unclear how tightly you</font>

1179
00:45:57,190 --> 00:45:59,530
can integrate those because they're each

1180
00:45:58,450 --> 00:46:01,779
solving us that they're each

1181
00:45:59,530 --> 00:46:03,520
solving a slightly different problem and

1182
00:46:01,780 --> 00:46:06,430
so I think there's just<font color="#E5E5E5"> going to be need</font>

1183
00:46:03,520 --> 00:46:07,690
need<font color="#CCCCCC"> to be some interfaces there for the</font>

1184
00:46:06,430 --> 00:46:09,790
same reason that when you're talking

1185
00:46:07,690 --> 00:46:12,220
about NFV orchestration you may have an

1186
00:46:09,790 --> 00:46:13,720
interface into your system that's going

1187
00:46:12,220 --> 00:46:15,250
to worry about launching the VMS

1188
00:46:13,720 --> 00:46:16,660
themselves and figuring out<font color="#E5E5E5"> where</font>

1189
00:46:15,250 --> 00:46:17,620
they're going<font color="#E5E5E5"> to go and then a system</font>

1190
00:46:16,660 --> 00:46:19,870
that's going to worry<font color="#E5E5E5"> about okay now</font>

1191
00:46:17,620 --> 00:46:21,700
what nfm is I'm actually putting on this

1192
00:46:19,870 --> 00:46:24,370
so even there that<font color="#CCCCCC"> could be split</font><font color="#E5E5E5"> into</font>

1193
00:46:21,700 --> 00:46:26,169
multiple controllers potentially so it's

1194
00:46:24,370 --> 00:46:27,700
sort of at one point do we end up with

1195
00:46:26,170 --> 00:46:30,670
<font color="#E5E5E5">too many controllers running around the</font>

1196
00:46:27,700 --> 00:46:33,549
network and I<font color="#E5E5E5"> expectable we are rapidly</font>

1197
00:46:30,670 --> 00:46:35,290
approaching that well it's rather the

1198
00:46:33,550 --> 00:46:37,270
<font color="#CCCCCC">central</font><font color="#E5E5E5"> control dude you end up with</font>

1199
00:46:35,290 --> 00:46:39,160
<font color="#E5E5E5">three four five centralized control is</font>

1200
00:46:37,270 --> 00:46:41,080
<font color="#CCCCCC">no this isn't it is going to be a</font>

1201
00:46:39,160 --> 00:46:43,149
<font color="#E5E5E5">problem for us operators to to share</font>

1202
00:46:41,080 --> 00:46:47,529
make a decision but it's not interesting

1203
00:46:43,150 --> 00:46:51,790
anyway there<font color="#E5E5E5"> are other questions for</font>

1204
00:46:47,530 --> 00:46:53,320
Aaron I did<font color="#E5E5E5"> have one I'm wondering it's</font>

1205
00:46:51,790 --> 00:46:54,880
it trivial to sort of bound the amount

1206
00:46:53,320 --> 00:46:58,630
of buffer space you need in the

1207
00:46:54,880 --> 00:46:59,920
controller or is that so we did you kind

1208
00:46:58,630 --> 00:47:03,250
<font color="#E5E5E5">of bound the number of flows you can</font>

1209
00:46:59,920 --> 00:47:05,320
migrate to stop that yeah there's a

1210
00:47:03,250 --> 00:47:07,480
couple different things you can do so in

1211
00:47:05,320 --> 00:47:09,250
theory it's reasonably predictable you

1212
00:47:07,480 --> 00:47:10,720
know how long you know how much on

1213
00:47:09,250 --> 00:47:11,890
average how big state is and we can

1214
00:47:10,720 --> 00:47:13,750
predict how long it's going to take to

1215
00:47:11,890 --> 00:47:15,520
transfer that but<font color="#E5E5E5"> you're right they</font>

1216
00:47:13,750 --> 00:47:16,870
there's this trade-off of the more state

1217
00:47:15,520 --> 00:47:18,850
you're transferring the longer it<font color="#CCCCCC"> takes</font>

1218
00:47:16,870 --> 00:47:20,290
the more buffering you need to do so one

1219
00:47:18,850 --> 00:47:22,330
way to do that<font color="#CCCCCC"> is that you say</font><font color="#E5E5E5"> all right</font>

1220
00:47:20,290 --> 00:47:23,650
I'm going<font color="#E5E5E5"> to move these flows in pieces</font>

1221
00:47:22,330 --> 00:47:25,509
and i'm going<font color="#E5E5E5"> to move</font><font color="#CCCCCC"> ten flows at a</font>

1222
00:47:23,650 --> 00:47:26,860
time after<font color="#E5E5E5"> i've moved those ten flows</font>

1223
00:47:25,510 --> 00:47:29,080
then<font color="#CCCCCC"> i can</font><font color="#E5E5E5"> move on and move the next</font>

1224
00:47:26,860 --> 00:47:31,270
<font color="#E5E5E5">time flows the challenge you run into</font>

1225
00:47:29,080 --> 00:47:33,700
there is that now that<font color="#CCCCCC"> you're breaking</font>

1226
00:47:31,270 --> 00:47:35,380
flows smaller your forwarding entries in

1227
00:47:33,700 --> 00:47:38,560
your switch need to be broken<font color="#CCCCCC"> down that</font>

1228
00:47:35,380 --> 00:47:41,050
much smaller which may be<font color="#CCCCCC"> okay may not</font>

1229
00:47:38,560 --> 00:47:42,670
be<font color="#E5E5E5"> okay but yeah buffering a certain</font>

1230
00:47:41,050 --> 00:47:43,990
leonitia big challenge with<font color="#E5E5E5"> this</font>

1231
00:47:42,670 --> 00:47:45,490
framework and something we still don't

1232
00:47:43,990 --> 00:47:50,919
have a great answer to how to go about

1233
00:47:45,490 --> 00:47:52,270
reducing that all right well<font color="#CCCCCC"> if there</font>

1234
00:47:50,920 --> 00:47:55,950
are<font color="#E5E5E5"> no</font><font color="#CCCCCC"> more questions then I think we're</font>

1235
00:47:52,270 --> 00:47:55,950
<font color="#CCCCCC">done so thanks Aaron thank you</font>

1236
00:47:57,330 --> 00:48:03,029
can whoever's got<font color="#CCCCCC"> the blue sheets bring</font>

1237
00:48:00,400 --> 00:48:03,030
them up here<font color="#CCCCCC"> please</font>

1238
00:48:59,140 --> 00:49:01,799
sure

1239
00:49:32,530 --> 00:49:35,430
check

1240
00:49:35,559 --> 00:49:40,949
I get<font color="#E5E5E5"> one without</font>

1241
00:49:51,680 --> 00:49:54,430
thank you

1242
00:50:22,870 --> 00:50:29,109
when to comport the slides pretty well

1243
00:50:25,610 --> 00:50:29,110
all right<font color="#E5E5E5"> given the</font><font color="#CCCCCC"> time</font>

1244
00:50:44,859 --> 00:50:46,920
you

