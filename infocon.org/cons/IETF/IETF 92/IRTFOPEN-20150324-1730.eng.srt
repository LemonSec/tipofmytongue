1
00:00:04,570 --> 00:00:06,600
Oh

2
00:01:09,190 --> 00:01:12,670
you hear<font color="#E5E5E5"> me ok</font>

3
00:01:46,540 --> 00:01:51,080
if you're<font color="#E5E5E5"> here</font><font color="#CCCCCC"> for the I RTF open</font>

4
00:01:49,070 --> 00:01:53,419
meeting you're in the right room if

5
00:01:51,080 --> 00:01:55,100
<font color="#CCCCCC">you're here for</font><font color="#E5E5E5"> something else or you</font>

6
00:01:53,420 --> 00:01:56,840
want to<font color="#E5E5E5"> read you email you're welcome to</font>

7
00:01:55,100 --> 00:01:59,059
do that if you give her something else

8
00:01:56,840 --> 00:02:01,040
you're probably in the wrong room the

9
00:01:59,060 --> 00:02:05,690
observant amongst you will notice that<font color="#CCCCCC"> I</font>

10
00:02:01,040 --> 00:02:08,179
am NOT<font color="#CCCCCC"> Lars eggert I am Matt</font><font color="#E5E5E5"> Ford I'm</font>

11
00:02:05,690 --> 00:02:10,340
with the<font color="#CCCCCC"> Internet Society and mostly</font>

12
00:02:08,179 --> 00:02:12,770
here to introduce our speaker for this

13
00:02:10,340 --> 00:02:15,760
session<font color="#E5E5E5"> who is our applied networking</font>

14
00:02:12,770 --> 00:02:19,310
research<font color="#CCCCCC"> Prize winner at this I ETF and</font>

15
00:02:15,760 --> 00:02:21,799
that is Aaron<font color="#E5E5E5"> gambar Jacobson who's</font>

16
00:02:19,310 --> 00:02:23,989
going<font color="#E5E5E5"> to talk about who won the award</font>

17
00:02:21,800 --> 00:02:25,130
for designing and evaluating nfe control

18
00:02:23,989 --> 00:02:27,650
plane he's going to tell you a lot more

19
00:02:25,130 --> 00:02:29,120
<font color="#E5E5E5">about that but maybe we could just have</font>

20
00:02:27,650 --> 00:02:38,660
a round of applause to congratulate

21
00:02:29,120 --> 00:02:39,650
Aaron on winning his<font color="#CCCCCC"> AARP</font><font color="#E5E5E5"> award I think</font>

22
00:02:38,660 --> 00:02:41,420
Aaron you're gonna you're going to

23
00:02:39,650 --> 00:02:43,160
present and then<font color="#E5E5E5"> we'll take</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> often</font>

24
00:02:41,420 --> 00:02:44,420
time afterwards for Q&A if you want to

25
00:02:43,160 --> 00:02:45,769
save up your questions<font color="#E5E5E5"> and I guess if</font>

26
00:02:44,420 --> 00:02:47,390
you have clarifying questions you can

27
00:02:45,769 --> 00:02:49,580
you can dive in with those but otherwise

28
00:02:47,390 --> 00:02:52,040
we'll save save questions for after

29
00:02:49,580 --> 00:02:54,650
errands talk and I'll moderate the

30
00:02:52,040 --> 00:02:56,630
discussion<font color="#CCCCCC"> Thanks yep something is not</font>

31
00:02:54,650 --> 00:02:58,790
clear certainly feel free to step up to

32
00:02:56,630 --> 00:03:01,010
the mic can interrupt me so thanks<font color="#CCCCCC"> so</font>

33
00:02:58,790 --> 00:03:02,090
much for that introduction I hope you'll

34
00:03:01,010 --> 00:03:04,578
find what I'm talking<font color="#CCCCCC"> about today</font>

35
00:03:02,090 --> 00:03:06,530
interesting so<font color="#CCCCCC"> what we've done is we've</font>

36
00:03:04,579 --> 00:03:07,940
we've done some research to take the

37
00:03:06,530 --> 00:03:10,070
principles<font color="#E5E5E5"> that we have in</font>

38
00:03:07,940 --> 00:03:12,170
software-defined networking and extend

39
00:03:10,070 --> 00:03:13,670
those principles to network functions or

40
00:03:12,170 --> 00:03:16,369
middle boxes that are<font color="#E5E5E5"> running in our</font>

41
00:03:13,670 --> 00:03:18,410
network in order to allow operators of

42
00:03:16,370 --> 00:03:21,170
networks to better satisfy<font color="#CCCCCC"> a number of</font>

43
00:03:18,410 --> 00:03:22,609
different goals so for those of you who

44
00:03:21,170 --> 00:03:24,350
aren't familiar with network functions

45
00:03:22,609 --> 00:03:26,000
or middleboxes the basic idea behind

46
00:03:24,350 --> 00:03:29,079
them is that they're going<font color="#E5E5E5"> to perform</font>

47
00:03:26,000 --> 00:03:31,730
some sort of sophisticated analysis of

48
00:03:29,079 --> 00:03:34,280
traffic or flows as it passes through

49
00:03:31,730 --> 00:03:35,959
this device in the network and typically

50
00:03:34,280 --> 00:03:38,480
<font color="#E5E5E5">it's going to take some stateful actions</font>

51
00:03:35,959 --> 00:03:40,010
on that traffic so good examples that

52
00:03:38,480 --> 00:03:42,649
commonly exists things like when

53
00:03:40,010 --> 00:03:45,649
optimizers caching proxies intrusion

54
00:03:42,650 --> 00:03:48,319
prevention systems and we're seeing two

55
00:03:45,650 --> 00:03:50,660
ships in the way these network functions

56
00:03:48,319 --> 00:03:52,069
are being deployed today the<font color="#E5E5E5"> first of</font>

57
00:03:50,660 --> 00:03:53,989
these is network functions

58
00:03:52,069 --> 00:03:57,108
virtualization and the basic idea behind

59
00:03:53,989 --> 00:03:58,940
this is that we want<font color="#E5E5E5"> to take dedicated</font>

60
00:03:57,109 --> 00:03:59,760
<font color="#CCCCCC">Hardware appliances that are deployed</font>

61
00:03:58,940 --> 00:04:01,709
today

62
00:03:59,760 --> 00:04:02,879
and replace them with virtual machines

63
00:04:01,709 --> 00:04:05,069
that are providing the same

64
00:04:02,879 --> 00:04:06,899
functionality but allows us to run the

65
00:04:05,069 --> 00:04:08,700
network functions on top of generic

66
00:04:06,900 --> 00:04:11,040
compute resources so<font color="#E5E5E5"> we no longer need</font>

67
00:04:08,700 --> 00:04:13,140
customized<font color="#E5E5E5"> hardware the benefit of this</font>

68
00:04:11,040 --> 00:04:15,659
is that we can dynamically allocate

69
00:04:13,140 --> 00:04:17,430
instances of network functions as we

70
00:04:15,659 --> 00:04:19,969
need more capacity in<font color="#E5E5E5"> our network or as</font>

71
00:04:17,430 --> 00:04:22,380
we need to introduce new functionality

72
00:04:19,970 --> 00:04:24,979
the other trend that's reshaping the way

73
00:04:22,380 --> 00:04:27,270
network functions are deployed is

74
00:04:24,979 --> 00:04:29,010
software-defined networking software

75
00:04:27,270 --> 00:04:31,440
defined networking gives us the ability

76
00:04:29,010 --> 00:04:33,599
to flexibly re route traffic between

77
00:04:31,440 --> 00:04:35,100
these network functions as we create

78
00:04:33,600 --> 00:04:37,139
them or as the needs in our<font color="#E5E5E5"> network of</font>

79
00:04:35,100 --> 00:04:39,440
all and so together what these two

80
00:04:37,139 --> 00:04:41,940
trends give us is they give us a way to

81
00:04:39,440 --> 00:04:43,830
dynamically reallocate we're in our

82
00:04:41,940 --> 00:04:45,419
network reprocessing certain traffic and

83
00:04:43,830 --> 00:04:48,419
what processing is happening to that

84
00:04:45,419 --> 00:04:50,460
traffic and as a result that<font color="#CCCCCC"> can enable</font>

85
00:04:48,419 --> 00:04:53,219
a variety of interesting service

86
00:04:50,460 --> 00:04:56,430
abstractions and capabilities for our

87
00:04:53,220 --> 00:04:58,229
<font color="#E5E5E5">middleboxes so one such example is we</font>

88
00:04:56,430 --> 00:05:00,449
could build a system that elastically

89
00:04:58,229 --> 00:05:02,940
scales network functions as the<font color="#CCCCCC"> demand</font>

90
00:05:00,449 --> 00:05:05,250
and our network changes over time so we

91
00:05:02,940 --> 00:05:07,199
start<font color="#CCCCCC"> off</font><font color="#E5E5E5"> here with a single instance of</font>

92
00:05:05,250 --> 00:05:08,699
an intrusion detection system and we

93
00:05:07,199 --> 00:05:10,500
want to<font color="#E5E5E5"> make sure that this intrusion</font>

94
00:05:08,699 --> 00:05:12,510
detection system is going<font color="#E5E5E5"> to always be</font>

95
00:05:10,500 --> 00:05:14,760
satisfying some sort<font color="#E5E5E5"> of performance SLE</font>

96
00:05:12,510 --> 00:05:16,800
perhaps we have an SLA that says the

97
00:05:14,760 --> 00:05:19,889
packet<font color="#CCCCCC"> loss that we experience has to be</font>

98
00:05:16,800 --> 00:05:21,449
less than some percentage so as the load

99
00:05:19,889 --> 00:05:23,669
in our network increases will start to

100
00:05:21,449 --> 00:05:25,770
overload this initial instance we have

101
00:05:23,669 --> 00:05:27,870
that's going<font color="#E5E5E5"> to start to create SLA</font>

102
00:05:25,770 --> 00:05:30,359
problems and so we need to add another

103
00:05:27,870 --> 00:05:32,910
instance which NFV makes it easy to do

104
00:05:30,360 --> 00:05:34,440
this and with Sdn then we can rear out

105
00:05:32,910 --> 00:05:36,900
some of the traffic from our original

106
00:05:34,440 --> 00:05:39,180
instance to this second instance and now

107
00:05:36,900 --> 00:05:40,710
that<font color="#E5E5E5"> gives us the ability to shed load</font>

108
00:05:39,180 --> 00:05:44,370
from that original instance and now

109
00:05:40,710 --> 00:05:45,930
satisfy our SLA<font color="#E5E5E5"> okay so now the second</font>

110
00:05:44,370 --> 00:05:47,880
<font color="#CCCCCC">thing is that</font><font color="#E5E5E5"> at some point the load in</font>

111
00:05:45,930 --> 00:05:49,470
our network may go back down and so just

112
00:05:47,880 --> 00:05:52,889
<font color="#E5E5E5">as we scale down we want</font><font color="#CCCCCC"> to be able to</font>

113
00:05:49,470 --> 00:05:54,150
scale back in so at some<font color="#CCCCCC"> point we want</font>

114
00:05:52,889 --> 00:05:55,710
to be able to destroy the second

115
00:05:54,150 --> 00:05:57,500
instance because it's no longer<font color="#E5E5E5"> needed</font>

116
00:05:55,710 --> 00:05:59,760
and we route traffic back<font color="#CCCCCC"> to the first</font>

117
00:05:57,500 --> 00:06:01,520
now the<font color="#CCCCCC"> problem here</font><font color="#E5E5E5"> is that while we're</font>

118
00:05:59,760 --> 00:06:05,219
doing this scaling in and scaling out

119
00:06:01,520 --> 00:06:08,039
it's important that we accurately

120
00:06:05,220 --> 00:06:10,229
monitor the traffic and have our<font color="#E5E5E5"> IDs</font>

121
00:06:08,039 --> 00:06:11,830
function as we expect it to to<font color="#CCCCCC"> actually</font>

122
00:06:10,229 --> 00:06:13,900
detect malicious attacks on<font color="#E5E5E5"> our network</font>

123
00:06:11,830 --> 00:06:15,700
the thing is it turns out in order<font color="#E5E5E5"> to do</font>

124
00:06:13,900 --> 00:06:17,620
all three of these together<font color="#E5E5E5"> we actually</font>

125
00:06:15,700 --> 00:06:19,810
<font color="#CCCCCC">need more than what we can</font><font color="#E5E5E5"> just get with</font>

126
00:06:17,620 --> 00:06:23,560
<font color="#E5E5E5">this concept of NFP and this concept of</font>

127
00:06:19,810 --> 00:06:25,240
SDN and so with only<font color="#E5E5E5"> these two</font>

128
00:06:23,560 --> 00:06:27,970
abstractions today we can't quite

129
00:06:25,240 --> 00:06:29,560
realize these scenarios like elastic NF

130
00:06:27,970 --> 00:06:32,170
scaling or some sort of high

131
00:06:29,560 --> 00:06:34,000
availability situation so to understand

132
00:06:32,170 --> 00:06:35,860
a bit more exactly what we're missing

133
00:06:34,000 --> 00:06:37,900
and what else we need let's<font color="#E5E5E5"> take a look</font>

134
00:06:35,860 --> 00:06:39,280
at<font color="#E5E5E5"> this scenario in a bit more depth so</font>

135
00:06:37,900 --> 00:06:40,960
again we're<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> assume that we</font>

136
00:06:39,280 --> 00:06:42,520
start off with a single instance of the

137
00:06:40,960 --> 00:06:43,690
ids and here<font color="#E5E5E5"> i'm going to look at</font>

138
00:06:42,520 --> 00:06:45,340
traffic at a little bit finer

139
00:06:43,690 --> 00:06:47,830
granularity<font color="#E5E5E5"> i'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> assume that we</font>

140
00:06:45,340 --> 00:06:49,810
know specific flows these could be TCP

141
00:06:47,830 --> 00:06:51,640
flows it could be a set of traffic from

142
00:06:49,810 --> 00:06:54,760
a<font color="#E5E5E5"> group of house but some notion of flow</font>

143
00:06:51,640 --> 00:06:57,039
through this network so as we see

144
00:06:54,760 --> 00:06:58,300
traffic from these flows this intrusion

145
00:06:57,040 --> 00:07:00,370
detection system<font color="#E5E5E5"> is going to establish</font>

146
00:06:58,300 --> 00:07:02,040
<font color="#E5E5E5">some state related to those could be</font>

147
00:07:00,370 --> 00:07:04,840
things about connection endpoints

148
00:07:02,040 --> 00:07:07,210
potential information about what we've

149
00:07:04,840 --> 00:07:10,150
seen in<font color="#E5E5E5"> the payloads so far a variety of</font>

150
00:07:07,210 --> 00:07:11,469
<font color="#E5E5E5">different pieces of information so now</font>

151
00:07:10,150 --> 00:07:13,299
when we start to hit an overload

152
00:07:11,470 --> 00:07:15,040
situation as the rate of these flows

153
00:07:13,300 --> 00:07:17,740
increase we again can launch another

154
00:07:15,040 --> 00:07:19,720
instance but the question<font color="#CCCCCC"> becomes what</font>

155
00:07:17,740 --> 00:07:21,340
exact set of traffic<font color="#E5E5E5"> are we going to</font>

156
00:07:19,720 --> 00:07:24,880
<font color="#E5E5E5">talk about rerouting in this particular</font>

157
00:07:21,340 --> 00:07:26,830
<font color="#E5E5E5">case so one option is</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> could only</font>

158
00:07:24,880 --> 00:07:28,630
rear out new flows that are coming into

159
00:07:26,830 --> 00:07:30,520
our network such that if we<font color="#CCCCCC"> have some</font>

160
00:07:28,630 --> 00:07:32,710
green flow that comes in<font color="#E5E5E5"> we'll send</font><font color="#CCCCCC"> it</font>

161
00:07:30,520 --> 00:07:35,409
to this second IDs instance that we just

162
00:07:32,710 --> 00:07:37,630
created it'll establish some state and

163
00:07:35,410 --> 00:07:40,390
properly analyze this traffic and this

164
00:07:37,630 --> 00:07:43,270
<font color="#E5E5E5">is great from a cost perspective we</font>

165
00:07:40,390 --> 00:07:44,680
clearly needed this extra instance but

166
00:07:43,270 --> 00:07:47,289
this isn't<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to help us satisfy our</font>

167
00:07:44,680 --> 00:07:49,240
SLA we still have all that extra traffic

168
00:07:47,290 --> 00:07:51,070
from the<font color="#E5E5E5"> red and the blue flow going</font>

169
00:07:49,240 --> 00:07:53,110
through our first instance we're still

170
00:07:51,070 --> 00:07:54,760
starting to experience packet loss so

171
00:07:53,110 --> 00:07:56,470
this isn't going to work the other

172
00:07:54,760 --> 00:07:58,150
challenge that we face is that there

173
00:07:56,470 --> 00:07:59,860
could be information at each of these

174
00:07:58,150 --> 00:08:01,960
IDS's that we need to<font color="#E5E5E5"> collectively</font>

175
00:07:59,860 --> 00:08:03,520
combine in some way so maybe<font color="#E5E5E5"> we're</font>

176
00:08:01,960 --> 00:08:05,169
trying to do port scan detection all

177
00:08:03,520 --> 00:08:06,940
these flows are going to a particular

178
00:08:05,170 --> 00:08:09,160
hosts and if<font color="#E5E5E5"> we don't aggregate</font>

179
00:08:06,940 --> 00:08:11,080
information about connection counts

180
00:08:09,160 --> 00:08:12,880
between both instances it's going to

181
00:08:11,080 --> 00:08:15,010
<font color="#E5E5E5">take us longer to detect that scan so</font>

182
00:08:12,880 --> 00:08:18,730
it's unclear<font color="#CCCCCC"> of accuracy will be</font>

183
00:08:15,010 --> 00:08:20,650
affected in this<font color="#E5E5E5"> situation also okay so</font>

184
00:08:18,730 --> 00:08:23,170
we need<font color="#E5E5E5"> to get some traffic off of this</font>

185
00:08:20,650 --> 00:08:24,580
original instance so we'll pick<font color="#CCCCCC"> one of</font>

186
00:08:23,170 --> 00:08:26,800
the floats let's say the blue flow

187
00:08:24,580 --> 00:08:28,628
and go ahead<font color="#E5E5E5"> and rewrite it now the</font>

188
00:08:26,800 --> 00:08:30,699
problem<font color="#E5E5E5"> is that well we've rerouted this</font>

189
00:08:28,629 --> 00:08:32,740
flow we've run into a situation where we

190
00:08:30,699 --> 00:08:34,570
<font color="#E5E5E5">left at state behind and so now the</font>

191
00:08:32,740 --> 00:08:36,310
state that<font color="#E5E5E5"> we need to continue to</font>

192
00:08:34,570 --> 00:08:38,440
analyze this traffic and detect any

193
00:08:36,309 --> 00:08:40,268
attacks that might be in it is now only

194
00:08:38,440 --> 00:08:41,560
available at our old instance and not

195
00:08:40,269 --> 00:08:43,269
available the new place where this

196
00:08:41,559 --> 00:08:46,209
traffic is going<font color="#E5E5E5"> to so we're not going</font>

197
00:08:43,269 --> 00:08:47,829
<font color="#CCCCCC">to reach our accuracy goal at some point</font>

198
00:08:46,209 --> 00:08:49,209
eventually this blue flow will die<font color="#CCCCCC"> Oh to</font>

199
00:08:47,829 --> 00:08:51,250
the<font color="#CCCCCC"> network the load</font><font color="#E5E5E5"> in our network will</font>

200
00:08:49,209 --> 00:08:52,989
go back down and so from a cost

201
00:08:51,250 --> 00:08:54,760
perspective we want to ideally be able

202
00:08:52,990 --> 00:08:55,930
to destroy the second<font color="#E5E5E5"> instance the</font>

203
00:08:54,760 --> 00:08:58,089
problem is when do we go about doing

204
00:08:55,930 --> 00:08:59,410
<font color="#E5E5E5">that if we destroy it immediately we run</font>

205
00:08:58,089 --> 00:09:00,940
<font color="#E5E5E5">into the same problem where we get rid</font>

206
00:08:59,410 --> 00:09:02,620
<font color="#E5E5E5">of state that we need it we no longer</font>

207
00:09:00,940 --> 00:09:04,930
we'll be able to properly analyze the

208
00:09:02,620 --> 00:09:07,390
green flow if instead we wait for this

209
00:09:04,930 --> 00:09:09,609
green flow to die off now we're going to

210
00:09:07,390 --> 00:09:11,620
<font color="#E5E5E5">run into a situation where we need to</font>

211
00:09:09,610 --> 00:09:13,690
wait<font color="#CCCCCC"> for a potentially unbounded amount</font>

212
00:09:11,620 --> 00:09:15,370
of time before we can destroy this so in

213
00:09:13,690 --> 00:09:17,350
traffic traces we've looked at from our

214
00:09:15,370 --> 00:09:18,760
campus<font color="#CCCCCC"> network this may mean for 25</font>

215
00:09:17,350 --> 00:09:22,149
minutes we're going<font color="#E5E5E5"> to continue to run</font>

216
00:09:18,760 --> 00:09:23,740
this instance maybe longer so that means

217
00:09:22,149 --> 00:09:24,940
we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> satisfy our SLA is and</font>

218
00:09:23,740 --> 00:09:26,709
accuracy but from a cost perspective

219
00:09:24,940 --> 00:09:29,980
we're spending<font color="#CCCCCC"> a lot of extra money</font><font color="#E5E5E5"> we</font>

220
00:09:26,709 --> 00:09:31,510
don't need to so what exactly do we need

221
00:09:29,980 --> 00:09:33,880
that if we want<font color="#E5E5E5"> to get these three goals</font>

222
00:09:31,510 --> 00:09:36,339
what's missing from just<font color="#E5E5E5"> an MP and sdn</font>

223
00:09:33,880 --> 00:09:38,260
well one thing is<font color="#E5E5E5"> that we need some way</font>

224
00:09:36,339 --> 00:09:40,120
to manage the internal state that these

225
00:09:38,260 --> 00:09:41,829
network functions are maintaining and so

226
00:09:40,120 --> 00:09:43,660
we need to be able to move it copy it

227
00:09:41,829 --> 00:09:45,069
<font color="#CCCCCC">and in some cases share it between</font>

228
00:09:43,660 --> 00:09:47,709
different instances<font color="#CCCCCC"> of a network</font>

229
00:09:45,070 --> 00:09:49,360
function second of all as we're

230
00:09:47,709 --> 00:09:50,949
transferring<font color="#E5E5E5"> this state around we want</font>

231
00:09:49,360 --> 00:09:52,779
to make sure<font color="#E5E5E5"> that we're not compromising</font>

232
00:09:50,949 --> 00:09:54,189
the accuracy of our<font color="#CCCCCC"> network function so</font>

233
00:09:52,779 --> 00:09:55,510
there<font color="#E5E5E5"> are certain guarantees we need to</font>

234
00:09:54,190 --> 00:09:57,310
have on how the state transfer is

235
00:09:55,510 --> 00:09:59,050
happening such that we don't lose

236
00:09:57,310 --> 00:10:00,670
updates to this state we<font color="#E5E5E5"> don't</font>

237
00:09:59,050 --> 00:10:02,769
potentially have packets that are

238
00:10:00,670 --> 00:10:04,240
processed and maybe even in some<font color="#CCCCCC"> cases</font>

239
00:10:02,769 --> 00:10:06,760
we need to make sure we process the

240
00:10:04,240 --> 00:10:08,380
packets in a particular order now these

241
00:10:06,760 --> 00:10:09,970
same requirements apply not only to the

242
00:10:08,380 --> 00:10:11,920
<font color="#E5E5E5">elastic scaling scenario that I talked</font>

243
00:10:09,970 --> 00:10:14,980
about but to other interesting scenarios

244
00:10:11,920 --> 00:10:16,420
like transparent failover or potentially

245
00:10:14,980 --> 00:10:19,180
if we want<font color="#E5E5E5"> to do something</font><font color="#CCCCCC"> like in-place</font>

246
00:10:16,420 --> 00:10:21,610
upgrades so I<font color="#E5E5E5"> hope I've convinced you</font>

247
00:10:19,180 --> 00:10:22,870
that we need something<font color="#E5E5E5"> new here and some</font>

248
00:10:21,610 --> 00:10:24,579
for the rest of the talk<font color="#E5E5E5"> I might talk</font>

249
00:10:22,870 --> 00:10:26,110
<font color="#E5E5E5">about what are the challenges in doing</font>

250
00:10:24,579 --> 00:10:27,790
this and meeting those requirements i

251
00:10:26,110 --> 00:10:29,829
just talked about<font color="#CCCCCC"> i'll talk</font><font color="#E5E5E5"> about then</font>

252
00:10:27,790 --> 00:10:31,329
our architecture that we've<font color="#E5E5E5"> developed in</font>

253
00:10:29,829 --> 00:10:33,219
<font color="#E5E5E5">order to meet those requirements and</font>

254
00:10:31,329 --> 00:10:35,050
address those challenges and lastly I'll

255
00:10:33,220 --> 00:10:37,089
close with some preliminary evaluation

256
00:10:35,050 --> 00:10:39,370
results so

257
00:10:37,089 --> 00:10:41,559
there's three main challenges that we

258
00:10:39,370 --> 00:10:43,180
face in meeting the requirements of

259
00:10:41,559 --> 00:10:45,459
being able<font color="#E5E5E5"> to move state and to do in a</font>

260
00:10:43,180 --> 00:10:46,959
way that's safe the first<font color="#E5E5E5"> of these is</font>

261
00:10:45,459 --> 00:10:49,479
that<font color="#CCCCCC"> there's a lot of different</font><font color="#E5E5E5"> network</font>

262
00:10:46,959 --> 00:10:51,910
functions out there everything from<font color="#CCCCCC"> when</font>

263
00:10:49,480 --> 00:10:53,079
optimizers de<font color="#E5E5E5"> cashing proxies</font><font color="#CCCCCC"> to when</font>

264
00:10:51,910 --> 00:10:54,579
you start to talk about cellular

265
00:10:53,079 --> 00:10:57,309
networks things in the evolved packet

266
00:10:54,579 --> 00:10:58,899
core and we want to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that we're</font>

267
00:10:57,309 --> 00:11:00,339
minimizing the number of changes we need

268
00:10:58,899 --> 00:11:01,990
to make to these and that we can

269
00:11:00,339 --> 00:11:04,029
accommodate a lot of different<font color="#CCCCCC"> network</font>

270
00:11:01,990 --> 00:11:06,160
function architectures within this

271
00:11:04,029 --> 00:11:09,129
broader system that we're proposing to

272
00:11:06,160 --> 00:11:10,509
<font color="#E5E5E5">develop</font><font color="#CCCCCC"> the second issue is not there's</font>

273
00:11:09,129 --> 00:11:12,069
lots of things<font color="#E5E5E5"> going on in the network</font>

274
00:11:10,509 --> 00:11:13,779
here we're thinking about<font color="#CCCCCC"> moving</font><font color="#E5E5E5"> state</font>

275
00:11:12,069 --> 00:11:15,279
there's updates that are happening to

276
00:11:13,779 --> 00:11:16,809
that state there's packets that are

277
00:11:15,279 --> 00:11:18,639
still flowing through<font color="#CCCCCC"> our network and we</font>

278
00:11:16,809 --> 00:11:20,110
want to be<font color="#E5E5E5"> making forwarding updates so</font>

279
00:11:18,639 --> 00:11:21,430
how do<font color="#E5E5E5"> we avoid problematic race</font>

280
00:11:20,110 --> 00:11:23,249
conditions between all of these

281
00:11:21,430 --> 00:11:25,359
different things<font color="#E5E5E5"> that are going on</font>

282
00:11:23,249 --> 00:11:27,519
lastly it's important that whatever

283
00:11:25,360 --> 00:11:30,160
we're doing to move state around<font color="#E5E5E5"> doesn't</font>

284
00:11:27,519 --> 00:11:32,019
<font color="#E5E5E5">have a lot of memory overhead cpu or and</font>

285
00:11:30,160 --> 00:11:33,279
doesn't<font color="#E5E5E5"> take a lot of time especially if</font>

286
00:11:32,019 --> 00:11:34,360
we're talking<font color="#E5E5E5"> about moving state in</font>

287
00:11:33,279 --> 00:11:36,100
scenarios where we're<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to do</font>

288
00:11:34,360 --> 00:11:37,959
scaling we're ready in an overloaded

289
00:11:36,100 --> 00:11:39,579
situation so we don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to impose a</font>

290
00:11:37,959 --> 00:11:43,689
lot more load<font color="#E5E5E5"> onto what's already</font>

291
00:11:39,579 --> 00:11:45,939
overloaded<font color="#CCCCCC"> okay so what could we</font><font color="#E5E5E5"> use</font>

292
00:11:43,689 --> 00:11:47,829
well one thing<font color="#CCCCCC"> is we</font><font color="#E5E5E5"> could say why not</font>

293
00:11:45,939 --> 00:11:50,110
use<font color="#E5E5E5"> virtual machine snapshots we already</font>

294
00:11:47,829 --> 00:11:51,699
have virtual machines that our network

295
00:11:50,110 --> 00:11:53,470
functions are running on we know really

296
00:11:51,699 --> 00:11:55,779
well how to snapshot virtual machines

297
00:11:53,470 --> 00:11:57,850
and clone them efficiently the problem

298
00:11:55,779 --> 00:11:59,259
is we can use this to do<font color="#CCCCCC"> scale-up</font><font color="#E5E5E5"> this</font>

299
00:11:57,850 --> 00:12:01,029
will<font color="#E5E5E5"> give us a copy of the state we need</font>

300
00:11:59,259 --> 00:12:02,559
for both of these red and blue flows and

301
00:12:01,029 --> 00:12:04,569
we can move<font color="#E5E5E5"> the blue flow and we'll have</font>

302
00:12:02,559 --> 00:12:06,550
at state the<font color="#CCCCCC"> problem is when we</font><font color="#E5E5E5"> run into</font>

303
00:12:04,569 --> 00:12:09,099
that scale down scenario we have no way

304
00:12:06,550 --> 00:12:12,519
to can recombine<font color="#E5E5E5"> to vm images into one</font>

305
00:12:09,100 --> 00:12:13,959
so<font color="#E5E5E5"> that's not going to work out another</font>

306
00:12:12,519 --> 00:12:15,670
solution that exists out there is a

307
00:12:13,959 --> 00:12:17,800
<font color="#E5E5E5">system that came out of IBM</font><font color="#CCCCCC"> Research</font>

308
00:12:15,670 --> 00:12:19,990
it's called split merge the basic<font color="#E5E5E5"> idea</font>

309
00:12:17,800 --> 00:12:23,439
of split merge is that you use shared

310
00:12:19,990 --> 00:12:25,569
library in order to access<font color="#E5E5E5"> and update</font>

311
00:12:23,439 --> 00:12:27,429
<font color="#E5E5E5">and excuse me in order to access and</font>

312
00:12:25,569 --> 00:12:29,889
create<font color="#E5E5E5"> state internally so you basically</font>

313
00:12:27,429 --> 00:12:31,929
replace all memory allocation calls with

314
00:12:29,889 --> 00:12:33,189
calls to their library functions the

315
00:12:31,929 --> 00:12:34,779
problem is<font color="#CCCCCC"> that they're targeting a very</font>

316
00:12:33,189 --> 00:12:36,550
specific scenario which is elastic

317
00:12:34,779 --> 00:12:40,179
scaling so it's not clear their solution

318
00:12:36,550 --> 00:12:41,949
will work in other scenarios and also in

319
00:12:40,179 --> 00:12:43,629
their system they don't<font color="#E5E5E5"> provide any of</font>

320
00:12:41,949 --> 00:12:46,089
these safety guarantees that'll ensure

321
00:12:43,629 --> 00:12:48,670
that we don't lose important updates and

322
00:12:46,089 --> 00:12:50,899
that packets aren't reordered in<font color="#E5E5E5"> cases</font>

323
00:12:48,670 --> 00:12:53,118
<font color="#E5E5E5">where that can affect</font><font color="#CCCCCC"> the accuracy of</font>

324
00:12:50,899 --> 00:12:56,240
network function so this brings me to

325
00:12:53,119 --> 00:12:57,800
<font color="#CCCCCC">our solution open it up open and apps</font>

326
00:12:56,240 --> 00:13:00,050
architecture is very similar to what

327
00:12:57,800 --> 00:13:01,639
you'll see in SD on so we have this

328
00:13:00,050 --> 00:13:03,949
logically centralized open<font color="#CCCCCC"> and f</font>

329
00:13:01,639 --> 00:13:06,110
controller and on top<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> will run</font>

330
00:13:03,949 --> 00:13:07,758
<font color="#E5E5E5">scenario specific control applications</font>

331
00:13:06,110 --> 00:13:10,069
so one control application may be

332
00:13:07,759 --> 00:13:12,050
implementing this elastic and<font color="#E5E5E5"> f scaling</font>

333
00:13:10,069 --> 00:13:14,748
example that<font color="#E5E5E5"> I talked about and it'll</font>

334
00:13:12,050 --> 00:13:17,420
<font color="#E5E5E5">issue operations to move copy or share</font>

335
00:13:14,749 --> 00:13:18,829
state as it<font color="#CCCCCC"> needs to underneath this</font>

336
00:13:17,420 --> 00:13:20,449
controller then we'll<font color="#E5E5E5"> have the network</font>

337
00:13:18,829 --> 00:13:22,489
functions themselves and they were going

338
00:13:20,449 --> 00:13:24,529
<font color="#CCCCCC">to conform to some sort of southbound</font>

339
00:13:22,490 --> 00:13:26,720
API<font color="#CCCCCC"> that we've</font><font color="#E5E5E5"> developed such that we</font>

340
00:13:24,529 --> 00:13:29,689
can<font color="#E5E5E5"> accurately export an import state</font>

341
00:13:26,720 --> 00:13:31,730
from these different instances so when a

342
00:13:29,689 --> 00:13:33,379
control application issues in operation

343
00:13:31,730 --> 00:13:35,269
a module within the controller will

344
00:13:33,379 --> 00:13:37,069
translate that into a series of the

345
00:13:35,269 --> 00:13:39,230
southbound<font color="#E5E5E5"> API calls to do our state</font>

346
00:13:37,069 --> 00:13:40,998
transfer and once state has<font color="#CCCCCC"> been</font>

347
00:13:39,230 --> 00:13:42,860
successfully transferred we can then

348
00:13:40,999 --> 00:13:44,540
communicate with an existing<font color="#E5E5E5"> forwarding</font>

349
00:13:42,860 --> 00:13:45,800
module to tell it to<font color="#CCCCCC"> update the</font>

350
00:13:44,540 --> 00:13:47,959
forwarding state in our switch and

351
00:13:45,800 --> 00:13:49,699
rewrite our traffic so I'm gonna<font color="#E5E5E5"> talk a</font>

352
00:13:47,959 --> 00:13:52,059
little bit about the the southbound part

353
00:13:49,699 --> 00:13:54,699
first and then I'll go into how we

354
00:13:52,059 --> 00:13:56,929
implement these higher level functions

355
00:13:54,699 --> 00:13:58,279
so I said there's a lot of different

356
00:13:56,929 --> 00:14:00,319
<font color="#E5E5E5">network functions out there and</font>

357
00:13:58,279 --> 00:14:02,149
obviously depending on what they do they

358
00:14:00,319 --> 00:14:04,040
<font color="#E5E5E5">maintain very different internal state</font>

359
00:14:02,149 --> 00:14:05,360
the state<font color="#CCCCCC"> and a caching proxy looks</font>

360
00:14:04,040 --> 00:14:06,889
different than the state in an intrusion

361
00:14:05,360 --> 00:14:08,420
detection system which looks different

362
00:14:06,889 --> 00:14:10,009
than the state in something like a

363
00:14:08,420 --> 00:14:12,170
really<font color="#E5E5E5"> simple firewall or network</font>

364
00:14:10,009 --> 00:14:13,759
address translator but<font color="#E5E5E5"> it turns out</font>

365
00:14:12,170 --> 00:14:15,079
despite the fact that they share

366
00:14:13,759 --> 00:14:17,029
different state the way they go about

367
00:14:15,079 --> 00:14:19,729
creating and updating this state is

368
00:14:17,029 --> 00:14:21,499
common and that<font color="#E5E5E5"> they think</font><font color="#CCCCCC"> about state</font>

369
00:14:19,730 --> 00:14:23,689
in terms of either being associated with

370
00:14:21,499 --> 00:14:26,480
an individual flow or multiple different

371
00:14:23,689 --> 00:14:27,740
flows so to give you an example let's

372
00:14:26,480 --> 00:14:29,689
<font color="#E5E5E5">take a look at the state for an</font>

373
00:14:27,740 --> 00:14:32,209
intrusion detection system specifically

374
00:14:29,689 --> 00:14:35,059
the bro intrusion detection system which

375
00:14:32,209 --> 00:14:37,790
is an open source IDs that's existed for

376
00:14:35,059 --> 00:14:39,889
many years so here<font color="#E5E5E5"> we have for every</font>

377
00:14:37,790 --> 00:14:41,899
<font color="#E5E5E5">single TCP connection a couple</font><font color="#CCCCCC"> different</font>

378
00:14:39,889 --> 00:14:43,910
objects<font color="#E5E5E5"> a connection object and protocol</font>

379
00:14:41,899 --> 00:14:45,350
specific analyzer objects and we're

380
00:14:43,910 --> 00:14:48,259
going to organize these in some sort of

381
00:14:45,350 --> 00:14:50,959
a hash table likewise we have state that

382
00:14:48,259 --> 00:14:52,759
is maintained /<font color="#E5E5E5"> host so for every host</font>

383
00:14:50,959 --> 00:14:54,109
we're going to<font color="#E5E5E5"> maintain a count of how</font>

384
00:14:52,759 --> 00:14:55,910
many<font color="#E5E5E5"> different connections have been</font>

385
00:14:54,110 --> 00:14:58,279
established<font color="#CCCCCC"> or</font><font color="#E5E5E5"> attempted to be</font>

386
00:14:55,910 --> 00:15:00,079
established<font color="#CCCCCC"> with that host likewise we</font>

387
00:14:58,279 --> 00:15:01,610
may have some state that's updated for

388
00:15:00,079 --> 00:15:04,040
every<font color="#E5E5E5"> single packet we process and</font>

389
00:15:01,610 --> 00:15:04,460
something<font color="#CCCCCC"> like statistics applies to all</font>

390
00:15:04,040 --> 00:15:06,670
the<font color="#E5E5E5"> different</font>

391
00:15:04,460 --> 00:15:09,440
flows that thus network functions

392
00:15:06,670 --> 00:15:11,329
responsible for so we<font color="#E5E5E5"> can use this</font>

393
00:15:09,440 --> 00:15:13,790
taxonomy to develop a relatively simple

394
00:15:11,330 --> 00:15:15,440
API that allows us<font color="#CCCCCC"> to get put and delete</font>

395
00:15:13,790 --> 00:15:18,500
state from these network functions on

396
00:15:15,440 --> 00:15:20,750
this flow basis so these functions first

397
00:15:18,500 --> 00:15:23,420
of all except what kind<font color="#E5E5E5"> of scope of</font>

398
00:15:20,750 --> 00:15:25,970
state are<font color="#E5E5E5"> we interested in and a filter</font>

399
00:15:23,420 --> 00:15:27,740
that<font color="#E5E5E5"> defines a flow space for what types</font>

400
00:15:25,970 --> 00:15:30,410
of flows one set of flows were

401
00:15:27,740 --> 00:15:32,630
interested in then we modify the network

402
00:15:30,410 --> 00:15:35,209
functions to accommodate this operation

403
00:15:32,630 --> 00:15:36,890
it can take<font color="#E5E5E5"> its internal state apply</font>

404
00:15:35,210 --> 00:15:39,380
this filter to it and any state that

405
00:15:36,890 --> 00:15:41,270
matches will<font color="#CCCCCC"> be sent to the controller</font>

406
00:15:39,380 --> 00:15:43,070
likewise<font color="#CCCCCC"> if the controller wants to</font>

407
00:15:41,270 --> 00:15:44,900
provide some state to be<font color="#E5E5E5"> integrated into</font>

408
00:15:43,070 --> 00:15:46,790
the middle box the middle box can take

409
00:15:44,900 --> 00:15:49,370
this state and integrate it<font color="#E5E5E5"> into its</font>

410
00:15:46,790 --> 00:15:51,469
existing structures so this relatively

411
00:15:49,370 --> 00:15:53,750
simple API means that we<font color="#E5E5E5"> don't have to</font>

412
00:15:51,470 --> 00:15:55,370
expose or change how the network

413
00:15:53,750 --> 00:15:57,320
function is organizing its state

414
00:15:55,370 --> 00:15:59,060
internally and it provides an intuitive

415
00:15:57,320 --> 00:16:01,430
way for us to reason about what state

416
00:15:59,060 --> 00:16:03,319
were interested<font color="#E5E5E5"> in so now that</font><font color="#CCCCCC"> we have</font>

417
00:16:01,430 --> 00:16:05,719
these capabilities from network

418
00:16:03,320 --> 00:16:08,480
functions now we can go about using

419
00:16:05,720 --> 00:16:11,060
these for<font color="#CCCCCC"> our to realize the operations</font>

420
00:16:08,480 --> 00:16:12,770
that our control applications issue so

421
00:16:11,060 --> 00:16:15,560
let's<font color="#E5E5E5"> say our control application wants</font>

422
00:16:12,770 --> 00:16:17,510
to move all HTTP traffic from being

423
00:16:15,560 --> 00:16:19,790
analyzed from the first instance<font color="#E5E5E5"> of an</font>

424
00:16:17,510 --> 00:16:21,319
IDs to<font color="#E5E5E5"> a new second instance that we've</font>

425
00:16:19,790 --> 00:16:22,819
<font color="#E5E5E5">created so we're going to tell it that</font>

426
00:16:21,320 --> 00:16:24,620
we<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to move all traffic that's on</font>

427
00:16:22,820 --> 00:16:26,600
port 80 the first thing that's going<font color="#CCCCCC"> to</font>

428
00:16:24,620 --> 00:16:29,030
do is ask the middle box for any state

429
00:16:26,600 --> 00:16:30,590
that<font color="#E5E5E5"> it has related</font><font color="#CCCCCC"> to http flows and</font>

430
00:16:29,030 --> 00:16:34,430
that<font color="#E5E5E5"> states going to be provided to our</font>

431
00:16:30,590 --> 00:16:35,990
controller next we'll go ahead and flush

432
00:16:34,430 --> 00:16:37,489
this state from<font color="#E5E5E5"> our first instance</font>

433
00:16:35,990 --> 00:16:39,650
because we don't need it there anymore

434
00:16:37,490 --> 00:16:41,600
and we'll put this state to our second

435
00:16:39,650 --> 00:16:43,189
instance now that the state's been moved

436
00:16:41,600 --> 00:16:45,260
we can finally go ahead and update our

437
00:16:43,190 --> 00:16:48,260
forwarding such that we can resume

438
00:16:45,260 --> 00:16:50,930
analyzing our HTTP traffic at the second

439
00:16:48,260 --> 00:16:52,790
instance we have<font color="#E5E5E5"> similar capabilities to</font>

440
00:16:50,930 --> 00:16:54,199
be able to copy and share<font color="#CCCCCC"> state I won't</font>

441
00:16:52,790 --> 00:16:55,910
go<font color="#CCCCCC"> into the details</font><font color="#E5E5E5"> of that here but I'm</font>

442
00:16:54,200 --> 00:16:59,210
<font color="#E5E5E5">happy to answer questions about that if</font>

443
00:16:55,910 --> 00:17:00,740
you have them<font color="#CCCCCC"> later on ok so we've</font>

444
00:16:59,210 --> 00:17:01,730
addressed this first challenge now how

445
00:17:00,740 --> 00:17:03,800
do we deal with all these race

446
00:17:01,730 --> 00:17:06,380
conditions and providing important

447
00:17:03,800 --> 00:17:08,750
safety guarantees so one problem that

448
00:17:06,380 --> 00:17:10,430
<font color="#E5E5E5">can occur in the move operation i just</font>

449
00:17:08,750 --> 00:17:13,400
showed is that we can lose packets or

450
00:17:10,430 --> 00:17:15,290
lose updates to state as a result<font color="#CCCCCC"> of</font>

451
00:17:13,400 --> 00:17:16,809
packets arriving while we're trying to

452
00:17:15,290 --> 00:17:18,789
<font color="#E5E5E5">do this state transfer</font>

453
00:17:16,809 --> 00:17:20,019
so<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to assume here that we're</font>

454
00:17:18,789 --> 00:17:22,240
<font color="#CCCCCC">running the bro intrusion detection</font>

455
00:17:20,019 --> 00:17:24,519
system and<font color="#E5E5E5"> it's running a script that</font>

456
00:17:22,240 --> 00:17:26,649
<font color="#E5E5E5">computes a hash of the payloads of all</font>

457
00:17:24,519 --> 00:17:28,240
the packets for a given connection and

458
00:17:26,648 --> 00:17:30,070
compares<font color="#CCCCCC"> that hash against</font><font color="#E5E5E5"> a database of</font>

459
00:17:28,240 --> 00:17:33,490
known malware this is a standard script

460
00:17:30,070 --> 00:17:35,200
that comes with this IDs<font color="#E5E5E5"> so we'll go</font>

461
00:17:33,490 --> 00:17:37,690
again have two different flows red flow

462
00:17:35,200 --> 00:17:40,809
in a blue flow so when packets come in

463
00:17:37,690 --> 00:17:42,519
the<font color="#CCCCCC"> IDS is going to say ok</font><font color="#E5E5E5"> what half</font>

464
00:17:40,809 --> 00:17:44,980
what's the hash of this packet matted to

465
00:17:42,519 --> 00:17:46,629
a rolling hash that it's computing so

466
00:17:44,980 --> 00:17:48,519
now<font color="#E5E5E5"> at some point I say well I want</font><font color="#CCCCCC"> to</font>

467
00:17:46,629 --> 00:17:50,469
move the red flow so I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go</font>

468
00:17:48,519 --> 00:17:52,570
<font color="#CCCCCC">ahead and do my state transfer like I</font>

469
00:17:50,470 --> 00:17:54,070
did before but before<font color="#CCCCCC"> I had a chance to</font>

470
00:17:52,570 --> 00:17:56,499
update my forwarding<font color="#E5E5E5"> state another</font>

471
00:17:54,070 --> 00:17:58,600
<font color="#E5E5E5">packet comes in for this red flow so now</font>

472
00:17:56,499 --> 00:18:00,100
this packet comes in and the intrusion

473
00:17:58,600 --> 00:18:01,509
detection system says why don't have any

474
00:18:00,100 --> 00:18:02,799
state for<font color="#CCCCCC"> the red flow this must be a</font>

475
00:18:01,509 --> 00:18:05,529
new flow so it's going<font color="#E5E5E5"> to go ahead and</font>

476
00:18:02,799 --> 00:18:07,179
<font color="#E5E5E5">establish some new state now at some</font>

477
00:18:05,529 --> 00:18:09,309
point our boarding updates going to take

478
00:18:07,179 --> 00:18:11,679
effect and now our<font color="#E5E5E5"> third packets going</font>

479
00:18:09,309 --> 00:18:14,049
to come in and now when we try to

480
00:18:11,679 --> 00:18:16,269
compute a hash over this third packet

481
00:18:14,049 --> 00:18:18,759
now we only have<font color="#E5E5E5"> the first two packets</font>

482
00:18:16,269 --> 00:18:20,590
and so the hash that<font color="#E5E5E5"> will excuse me the</font>

483
00:18:18,759 --> 00:18:22,480
<font color="#E5E5E5">first and the third packet so now this</font>

484
00:18:20,590 --> 00:18:23,949
hash that<font color="#E5E5E5"> we compute is going to be</font>

485
00:18:22,480 --> 00:18:25,539
<font color="#CCCCCC">incorrect and we're not actually going</font>

486
00:18:23,950 --> 00:18:28,740
to detect that there's some malware in

487
00:18:25,539 --> 00:18:31,419
this flow so what we want as we want a

488
00:18:28,740 --> 00:18:32,980
guarantee that<font color="#E5E5E5"> these state operations</font>

489
00:18:31,419 --> 00:18:35,409
are lost free we want to<font color="#E5E5E5"> make sure that</font>

490
00:18:32,980 --> 00:18:37,809
we're<font color="#CCCCCC"> not losing any packets and that</font>

491
00:18:35,409 --> 00:18:39,850
all packets are being processed that

492
00:18:37,809 --> 00:18:43,269
that have passed<font color="#E5E5E5"> through our network at</font>

493
00:18:39,850 --> 00:18:44,830
this<font color="#E5E5E5"> point in</font><font color="#CCCCCC"> time so split merge also</font>

494
00:18:43,269 --> 00:18:46,720
provides a limited form of this loss

495
00:18:44,830 --> 00:18:48,070
freeness but it turns out a key thing

496
00:18:46,720 --> 00:18:50,169
they don't deal with is the fact that

497
00:18:48,070 --> 00:18:51,850
packets may already be in<font color="#E5E5E5"> transit to a</font>

498
00:18:50,169 --> 00:18:53,470
network function at the time we start

499
00:18:51,850 --> 00:18:55,299
the state transfer so while they can

500
00:18:53,470 --> 00:18:56,679
<font color="#E5E5E5">buffer packets at the switch they're</font>

501
00:18:55,299 --> 00:18:58,119
ignoring the fact that packets may have

502
00:18:56,679 --> 00:18:59,740
<font color="#E5E5E5">already passed through this switch so</font>

503
00:18:58,119 --> 00:19:02,289
this doesn't quite give us the<font color="#E5E5E5"> lost</font>

504
00:18:59,740 --> 00:19:03,490
<font color="#CCCCCC">freeness that we want so how do we</font><font color="#E5E5E5"> go</font>

505
00:19:02,289 --> 00:19:04,990
<font color="#CCCCCC">about doing this well we're</font><font color="#E5E5E5"> going to</font>

506
00:19:03,490 --> 00:19:06,669
enhance the capabilities that the

507
00:19:04,990 --> 00:19:08,649
network functions provide for us<font color="#E5E5E5"> just a</font>

508
00:19:06,669 --> 00:19:11,259
<font color="#CCCCCC">little bit we're going</font><font color="#E5E5E5"> to add an event</font>

509
00:19:08,649 --> 00:19:13,268
mechanism such that when some set of

510
00:19:11,259 --> 00:19:15,669
packets come into this network function

511
00:19:13,269 --> 00:19:18,100
we can<font color="#E5E5E5"> say do any of these packets match</font>

512
00:19:15,669 --> 00:19:19,809
a filter and if they do we can send an

513
00:19:18,100 --> 00:19:21,850
event to the controller that says hey I

514
00:19:19,809 --> 00:19:23,559
was about to process this packet it was

515
00:19:21,850 --> 00:19:25,480
going to update<font color="#E5E5E5"> or it may have been</font>

516
00:19:23,559 --> 00:19:27,549
about to update some state that<font color="#E5E5E5"> you're</font>

517
00:19:25,480 --> 00:19:29,019
<font color="#E5E5E5">trying to move we can then tell the</font>

518
00:19:27,549 --> 00:19:29,530
network function to either go ahead and

519
00:19:29,019 --> 00:19:32,170
process

520
00:19:29,530 --> 00:19:33,940
packet buffer<font color="#E5E5E5"> for processing later on or</font>

521
00:19:32,170 --> 00:19:36,250
simply<font color="#E5E5E5"> throw it away and not process it</font>

522
00:19:33,940 --> 00:19:38,710
any further and to add this capability

523
00:19:36,250 --> 00:19:40,300
we just need to modify the main packet

524
00:19:38,710 --> 00:19:42,310
receive function within the<font color="#E5E5E5"> middle box</font>

525
00:19:40,300 --> 00:19:43,990
out of code<font color="#CCCCCC"> that add a</font><font color="#E5E5E5"> little bit of</font>

526
00:19:42,310 --> 00:19:47,320
code that<font color="#E5E5E5"> checks should I be raising an</font>

527
00:19:43,990 --> 00:19:49,240
event or not fairly simple change<font color="#CCCCCC"> okay</font>

528
00:19:47,320 --> 00:19:51,700
so how do we<font color="#E5E5E5"> use this now to get this</font>

529
00:19:49,240 --> 00:19:53,190
loss free<font color="#E5E5E5"> property well well first thing</font>

530
00:19:51,700 --> 00:19:55,540
we'll do before we start transferring

531
00:19:53,190 --> 00:19:57,910
any state is<font color="#CCCCCC"> that we're going to enable</font>

532
00:19:55,540 --> 00:19:59,440
events on our first instance we're going

533
00:19:57,910 --> 00:20:02,290
to say whenever you get a packet that

534
00:19:59,440 --> 00:20:03,910
matches this red flow space that we're

535
00:20:02,290 --> 00:20:06,159
talking<font color="#E5E5E5"> about I want to know about that</font>

536
00:20:03,910 --> 00:20:08,440
<font color="#CCCCCC">and you should not process that packet</font>

537
00:20:06,160 --> 00:20:10,150
further so now we can<font color="#E5E5E5"> go ahead and</font><font color="#CCCCCC"> start</font>

538
00:20:08,440 --> 00:20:12,460
to transfer our state from<font color="#E5E5E5"> our first</font>

539
00:20:10,150 --> 00:20:13,660
instance to our second and if a packet

540
00:20:12,460 --> 00:20:15,700
comes in in the<font color="#E5E5E5"> middle of the state</font>

541
00:20:13,660 --> 00:20:17,200
transfer will go ahead and construct an

542
00:20:15,700 --> 00:20:18,760
event and send that an<font color="#CCCCCC"> event to the</font>

543
00:20:17,200 --> 00:20:23,230
controller where<font color="#E5E5E5"> we'll be buffered</font>

544
00:20:18,760 --> 00:20:25,090
temporarily after we finish after then

545
00:20:23,230 --> 00:20:27,310
we can finish our state transfer and

546
00:20:25,090 --> 00:20:29,500
after the state transfer is done now we

547
00:20:27,310 --> 00:20:30,909
can let this packet that was buffer to

548
00:20:29,500 --> 00:20:34,000
the controller be processed<font color="#E5E5E5"> by our</font>

549
00:20:30,910 --> 00:20:36,010
second instance so now we make our

550
00:20:34,000 --> 00:20:38,020
forwarding update and when<font color="#E5E5E5"> the third</font>

551
00:20:36,010 --> 00:20:39,610
packet comes in it turns out that we've

552
00:20:38,020 --> 00:20:41,350
seen all packets for the flow they've

553
00:20:39,610 --> 00:20:43,030
all reflected in the state we can

554
00:20:41,350 --> 00:20:45,209
compute our correct hash and now we can

555
00:20:43,030 --> 00:20:47,350
detect that there's now we're here now

556
00:20:45,210 --> 00:20:49,210
there's another<font color="#E5E5E5"> potential problem we run</font>

557
00:20:47,350 --> 00:20:50,889
into which is reordering and in fact

558
00:20:49,210 --> 00:20:53,170
adding this loss free mechanism can

559
00:20:50,890 --> 00:20:55,420
<font color="#E5E5E5">actually introduce reordering that may</font>

560
00:20:53,170 --> 00:20:57,400
not be possible otherwise and this could

561
00:20:55,420 --> 00:20:58,750
be problematic in the case of a script

562
00:20:57,400 --> 00:21:00,400
that<font color="#E5E5E5"> comes with bro that looks for weird</font>

563
00:20:58,750 --> 00:21:02,140
activity looks for things like did you

564
00:21:00,400 --> 00:21:04,960
get a syn packet after you've already

565
00:21:02,140 --> 00:21:07,060
got in a data packet so let's go<font color="#E5E5E5"> back to</font>

566
00:21:04,960 --> 00:21:09,610
<font color="#E5E5E5">this fifth step from the last slide</font>

567
00:21:07,060 --> 00:21:10,990
where we were flushing the packets that

568
00:21:09,610 --> 00:21:12,429
were buffer to the controller so we'll

569
00:21:10,990 --> 00:21:15,010
flush these and then we'll go ahead and

570
00:21:12,430 --> 00:21:16,660
<font color="#E5E5E5">make our forwarding update so now we</font>

571
00:21:15,010 --> 00:21:18,460
make our forwarding update but<font color="#E5E5E5"> before</font>

572
00:21:16,660 --> 00:21:21,250
that update takes effect another packet

573
00:21:18,460 --> 00:21:23,260
comes in so that packet comes in it goes

574
00:21:21,250 --> 00:21:25,060
to our<font color="#E5E5E5"> third instance our third instance</font>

575
00:21:23,260 --> 00:21:27,160
as well I've<font color="#E5E5E5"> excuse me our first</font>

576
00:21:25,060 --> 00:21:28,270
instance says I've events enabled so I'm

577
00:21:27,160 --> 00:21:30,190
<font color="#E5E5E5">going to send this third back to the</font>

578
00:21:28,270 --> 00:21:31,570
controller the controller will say I've

579
00:21:30,190 --> 00:21:32,620
already flushed the buffer offense so

580
00:21:31,570 --> 00:21:34,629
I'll just go ahead and pass this

581
00:21:32,620 --> 00:21:37,419
directly to the switch and directly<font color="#CCCCCC"> to</font>

582
00:21:34,630 --> 00:21:39,160
my second instance but<font color="#E5E5E5"> before this</font>

583
00:21:37,420 --> 00:21:40,750
packet reaches<font color="#E5E5E5"> that second instance are</font>

584
00:21:39,160 --> 00:21:42,580
forwarding updates already taken effect

585
00:21:40,750 --> 00:21:44,620
so it's possible another packet comes

586
00:21:42,580 --> 00:21:45,970
the switch<font color="#CCCCCC"> that packet gets forwarded to</font>

587
00:21:44,620 --> 00:21:47,289
the second instance and now arrives

588
00:21:45,970 --> 00:21:48,970
before we've gone through this<font color="#E5E5E5"> whole</font>

589
00:21:47,289 --> 00:21:50,830
sequence of forwarding along this third

590
00:21:48,970 --> 00:21:54,399
packet so now we have reordering that's

591
00:21:50,830 --> 00:21:56,110
happening so what we need in some cases

592
00:21:54,399 --> 00:21:58,268
is we need a guarantee<font color="#E5E5E5"> that our move</font>

593
00:21:56,110 --> 00:22:00,039
operation is order preserving which says

594
00:21:58,269 --> 00:22:01,570
that all packets are processed<font color="#E5E5E5"> in the</font>

595
00:22:00,039 --> 00:22:04,149
<font color="#E5E5E5">same order that they arrived at the</font>

596
00:22:01,570 --> 00:22:09,480
<font color="#E5E5E5">switch and that updates to state happen</font>

597
00:22:04,149 --> 00:22:11,668
in that order so how do we<font color="#CCCCCC"> go about</font>

598
00:22:09,480 --> 00:22:14,350
realizing this how am i doing on time

599
00:22:11,669 --> 00:22:16,269
<font color="#CCCCCC">okay let me actually I'm going</font><font color="#E5E5E5"> to skip</font>

600
00:22:14,350 --> 00:22:17,769
through this because it's kind<font color="#CCCCCC"> of</font>

601
00:22:16,269 --> 00:22:21,940
complex and we can come back to<font color="#E5E5E5"> it later</font>

602
00:22:17,769 --> 00:22:26,350
if people have questions<font color="#E5E5E5"> okay so third</font>

603
00:22:21,940 --> 00:22:28,029
challenge issue of overhead how do we

604
00:22:26,350 --> 00:22:31,330
make sure<font color="#CCCCCC"> that we're not introducing a</font>

605
00:22:28,029 --> 00:22:34,090
lot of memory CPU and other overhead in

606
00:22:31,330 --> 00:22:35,649
actually providing these operations well

607
00:22:34,090 --> 00:22:38,439
so the thing is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're given</font>

608
00:22:35,649 --> 00:22:40,600
applications some choices the first

609
00:22:38,440 --> 00:22:42,039
choice that we're giving<font color="#E5E5E5"> them is what</font>

610
00:22:40,600 --> 00:22:44,199
sort of state do<font color="#E5E5E5"> you want to move if</font>

611
00:22:42,039 --> 00:22:45,580
you're only moving HTTP flows you only

612
00:22:44,200 --> 00:22:47,799
need to move<font color="#CCCCCC"> state relating to those</font>

613
00:22:45,580 --> 00:22:49,600
HTTP flows if you're trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> create a</font>

614
00:22:47,799 --> 00:22:51,730
middle box that's highly available so

615
00:22:49,600 --> 00:22:54,010
<font color="#CCCCCC">you're snapshotting state you may say I</font>

616
00:22:51,730 --> 00:22:55,570
only<font color="#E5E5E5"> care that if something fails that a</font>

617
00:22:54,010 --> 00:22:57,070
<font color="#E5E5E5">certain set of flows continue to be</font>

618
00:22:55,570 --> 00:22:59,678
<font color="#E5E5E5">processed correctly so now you only</font><font color="#CCCCCC"> need</font>

619
00:22:57,070 --> 00:23:01,418
to<font color="#E5E5E5"> grab that state the other option is</font>

620
00:22:59,679 --> 00:23:03,669
that<font color="#CCCCCC"> you can decide whether</font><font color="#E5E5E5"> or not you</font>

621
00:23:01,419 --> 00:23:05,289
need<font color="#E5E5E5"> these guarantees so the example</font>

622
00:23:03,669 --> 00:23:07,450
that I was<font color="#E5E5E5"> going through this intrusion</font>

623
00:23:05,289 --> 00:23:09,970
detection system was off path that's

624
00:23:07,450 --> 00:23:12,580
what makes it an IDs versus an intrusion

625
00:23:09,970 --> 00:23:15,130
prevention system so because this<font color="#E5E5E5"> IDs is</font>

626
00:23:12,580 --> 00:23:17,199
off path if packets get if packets<font color="#E5E5E5"> get</font>

627
00:23:15,130 --> 00:23:18,760
dropped on their way<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> IDs there's</font>

628
00:23:17,200 --> 00:23:20,409
no way to get those retransmitted the

629
00:23:18,760 --> 00:23:22,450
idea<font color="#CCCCCC"> is getting a copy of traffic</font>

630
00:23:20,409 --> 00:23:23,860
however in the case of an IPS if a

631
00:23:22,450 --> 00:23:25,990
packet gets dropped on its way to the

632
00:23:23,860 --> 00:23:27,729
IPS<font color="#CCCCCC"> that IPS is in the middle of a</font>

633
00:23:25,990 --> 00:23:29,320
connection which means normal TCP

634
00:23:27,730 --> 00:23:30,850
mechanisms will recover<font color="#E5E5E5"> from that loss</font>

635
00:23:29,320 --> 00:23:32,590
and that IPS I'll have another

636
00:23:30,850 --> 00:23:34,059
opportunity to see that packet so in

637
00:23:32,590 --> 00:23:36,279
that case we<font color="#E5E5E5"> don't need this loss free</font>

638
00:23:34,059 --> 00:23:38,168
<font color="#CCCCCC">property and so by giving control</font>

639
00:23:36,279 --> 00:23:40,029
applications the flexibility to choose

640
00:23:38,169 --> 00:23:42,720
what they want they have some control

641
00:23:40,029 --> 00:23:46,029
over how much overhead they experience

642
00:23:42,720 --> 00:23:47,919
<font color="#CCCCCC">okay so going</font><font color="#E5E5E5"> back to our three goals we</font>

643
00:23:46,029 --> 00:23:49,659
wanted<font color="#E5E5E5"> to get SLA s we wanted to make</font>

644
00:23:47,919 --> 00:23:50,770
sure that<font color="#CCCCCC"> we could do it</font><font color="#E5E5E5"> at low cost we</font>

645
00:23:49,659 --> 00:23:52,929
want to make<font color="#CCCCCC"> sure that our network</font>

646
00:23:50,770 --> 00:23:55,590
functions are happening we're operating

647
00:23:52,929 --> 00:23:58,390
accurately and analyzing traffic

648
00:23:55,590 --> 00:24:00,280
so we've addressed this issue of

649
00:23:58,390 --> 00:24:01,990
diversity by making<font color="#CCCCCC"> sure that</font><font color="#E5E5E5"> our</font>

650
00:24:00,280 --> 00:24:03,879
changes that we make<font color="#CCCCCC"> to import and</font>

651
00:24:01,990 --> 00:24:06,190
export state are simple and we have a

652
00:24:03,880 --> 00:24:08,680
simple events mechanism we deal with

653
00:24:06,190 --> 00:24:10,480
race conditions by adding this events

654
00:24:08,680 --> 00:24:13,750
mechanism and by having lockstep

655
00:24:10,480 --> 00:24:15,940
forwarding updates and lastly we address

656
00:24:13,750 --> 00:24:17,470
this overhead issue by<font color="#E5E5E5"> making sure that</font>

657
00:24:15,940 --> 00:24:19,810
applications have the flexibility to

658
00:24:17,470 --> 00:24:21,990
<font color="#E5E5E5">choose what set of state and what</font>

659
00:24:19,810 --> 00:24:24,310
guarantees they want on those operations

660
00:24:21,990 --> 00:24:27,760
so we've implemented the open<font color="#CCCCCC"> enough</font>

661
00:24:24,310 --> 00:24:29,830
architecture the controller itself is

662
00:24:27,760 --> 00:24:32,170
implemented<font color="#E5E5E5"> as a module running atop of</font>

663
00:24:29,830 --> 00:24:34,600
the floodlight SDN controller and we've

664
00:24:32,170 --> 00:24:36,370
also implemented a communication library

665
00:24:34,600 --> 00:24:37,980
that can be linked<font color="#E5E5E5"> into network</font>

666
00:24:36,370 --> 00:24:41,080
functions in order to communicate

667
00:24:37,980 --> 00:24:43,540
between the controller and the network

668
00:24:41,080 --> 00:24:45,189
functions themselves we've modified<font color="#CCCCCC"> four</font>

669
00:24:43,540 --> 00:24:47,560
different network functions so far to

670
00:24:45,190 --> 00:24:50,740
conform to our southbound<font color="#CCCCCC"> API and</font>

671
00:24:47,560 --> 00:24:53,290
provide events and export<font color="#CCCCCC"> State so this</font>

672
00:24:50,740 --> 00:24:56,620
is<font color="#E5E5E5"> the bro intrusion detection system</font>

673
00:24:53,290 --> 00:24:59,290
we've modified iptables squid caching

674
00:24:56,620 --> 00:25:01,659
proxy and also<font color="#CCCCCC"> pratts which is</font><font color="#E5E5E5"> a asset</font>

675
00:24:59,290 --> 00:25:05,170
detection and monitoring system that's

676
00:25:01,660 --> 00:25:08,290
used in<font color="#E5E5E5"> our</font><font color="#CCCCCC"> University</font><font color="#E5E5E5"> Network so how</font>

677
00:25:05,170 --> 00:25:09,760
well does open an<font color="#E5E5E5"> F perform and doesn't</font>

678
00:25:08,290 --> 00:25:12,190
actually give us the benefits we wanted

679
00:25:09,760 --> 00:25:14,350
so we're going to take a<font color="#CCCCCC"> situation here</font>

680
00:25:12,190 --> 00:25:15,940
where we have<font color="#CCCCCC"> a trace of traffic from</font>

681
00:25:14,350 --> 00:25:18,010
our campus network that we're replaying

682
00:25:15,940 --> 00:25:20,200
at a rate of<font color="#CCCCCC"> 10,000</font><font color="#E5E5E5"> packets per second</font>

683
00:25:18,010 --> 00:25:21,820
and we're<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> start with one</font>

684
00:25:20,200 --> 00:25:24,070
instance of the<font color="#CCCCCC"> boro intrusion detection</font>

685
00:25:21,820 --> 00:25:27,040
system 180 seconds into the experiment

686
00:25:24,070 --> 00:25:30,189
we say move all HTTP flows to be

687
00:25:27,040 --> 00:25:31,930
<font color="#E5E5E5">processed by a new instance 180 seconds</font>

688
00:25:30,190 --> 00:25:34,300
later we're going<font color="#E5E5E5"> to move any active</font>

689
00:25:31,930 --> 00:25:36,880
HTTP foes at that time back<font color="#CCCCCC"> to the</font>

690
00:25:34,300 --> 00:25:38,770
original instance so in order to

691
00:25:36,880 --> 00:25:42,370
<font color="#CCCCCC">actually do the transfer of state that</font>

692
00:25:38,770 --> 00:25:45,430
we need takes 260 milliseconds and so

693
00:25:42,370 --> 00:25:47,229
that's quick doesn't take<font color="#E5E5E5"> very long we</font>

694
00:25:45,430 --> 00:25:48,670
also looked at is this accurate have we

695
00:25:47,230 --> 00:25:50,710
maintain the accuracy of the network

696
00:25:48,670 --> 00:25:52,960
function so we compared what happened if

697
00:25:50,710 --> 00:25:55,360
we let all of<font color="#CCCCCC"> the traffic be analyzed by</font>

698
00:25:52,960 --> 00:25:57,550
<font color="#E5E5E5">one IDs and didn't do these moving back</font>

699
00:25:55,360 --> 00:25:59,679
and forth operations versus what happens

700
00:25:57,550 --> 00:26:02,680
what is the output of<font color="#E5E5E5"> the IDS if we do</font>

701
00:25:59,680 --> 00:26:04,780
this scale out and scale back in turns

702
00:26:02,680 --> 00:26:06,250
out<font color="#E5E5E5"> the log entries are equivalent if we</font>

703
00:26:04,780 --> 00:26:07,600
had used this<font color="#E5E5E5"> VM replication that I</font>

704
00:26:06,250 --> 00:26:08,740
talked about<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> there would be</font>

705
00:26:07,600 --> 00:26:10,209
entries missing from our

706
00:26:08,740 --> 00:26:12,250
because when we do this scale in

707
00:26:10,210 --> 00:26:15,580
operation we have no way to combine to

708
00:26:12,250 --> 00:26:19,030
vm snapshots together lastly there's

709
00:26:15,580 --> 00:26:21,159
this issue of cost so how quickly were

710
00:26:19,030 --> 00:26:22,990
we able<font color="#E5E5E5"> to scale in we were able to</font>

711
00:26:21,160 --> 00:26:26,020
<font color="#E5E5E5">scale in as long as it took us to move</font>

712
00:26:22,990 --> 00:26:29,140
the state back which<font color="#CCCCCC"> again was about 260</font>

713
00:26:26,020 --> 00:26:30,670
milliseconds if we had used waited for

714
00:26:29,140 --> 00:26:32,740
flows to<font color="#CCCCCC"> diox-- the flows in this</font>

715
00:26:30,670 --> 00:26:35,580
particular trace lasted more than 25

716
00:26:32,740 --> 00:26:38,260
minutes and so we would have<font color="#E5E5E5"> needed to</font>

717
00:26:35,580 --> 00:26:40,240
<font color="#E5E5E5">unnecessarily continue to run the second</font>

718
00:26:38,260 --> 00:26:41,890
instance of the ideas until those

719
00:26:40,240 --> 00:26:43,210
clothes had finished so that would have

720
00:26:41,890 --> 00:26:46,450
been a<font color="#E5E5E5"> lot of extra</font><font color="#CCCCCC"> cost that we would</font>

721
00:26:43,210 --> 00:26:49,090
<font color="#E5E5E5">have been paying so i said this move</font>

722
00:26:46,450 --> 00:26:50,380
takes 260 milliseconds how does what

723
00:26:49,090 --> 00:26:52,209
we're doing it the network functions

724
00:26:50,380 --> 00:26:54,070
contribute to that so we can look at how

725
00:26:52,210 --> 00:26:55,540
long these get and port operations<font color="#E5E5E5"> take</font>

726
00:26:54,070 --> 00:26:57,580
on our<font color="#E5E5E5"> network functions and we did this</font>

727
00:26:55,540 --> 00:26:59,920
for three of the thing network functions

728
00:26:57,580 --> 00:27:01,870
that we modify and it turns out that the

729
00:26:59,920 --> 00:27:04,090
cost to serialize in deserialize state

730
00:27:01,870 --> 00:27:06,010
is most of the time that we spent in

731
00:27:04,090 --> 00:27:08,260
these network functions so potential

732
00:27:06,010 --> 00:27:10,600
<font color="#CCCCCC">Urso definite improvement opportunities</font>

733
00:27:08,260 --> 00:27:11,890
there if we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> do a better job with how</font>

734
00:27:10,600 --> 00:27:13,780
we go about serializing and

735
00:27:11,890 --> 00:27:15,970
<font color="#CCCCCC">deserializing we may</font><font color="#E5E5E5"> be able to improve</font>

736
00:27:13,780 --> 00:27:18,520
the efficiency there the other thing<font color="#CCCCCC"> is</font>

737
00:27:15,970 --> 00:27:20,320
that<font color="#E5E5E5"> it takes longer as the state in the</font>

738
00:27:18,520 --> 00:27:22,840
<font color="#E5E5E5">network function is more complex so</font>

739
00:27:20,320 --> 00:27:25,059
<font color="#CCCCCC">iptables has very little</font><font color="#E5E5E5"> state for every</font>

740
00:27:22,840 --> 00:27:27,129
flow because it only does simple rules

741
00:27:25,059 --> 00:27:29,559
like is this<font color="#CCCCCC"> TCP connection the</font>

742
00:27:27,130 --> 00:27:31,360
established state or not contrast that

743
00:27:29,559 --> 00:27:33,040
with the bro intrusion detection system

744
00:27:31,360 --> 00:27:35,169
which needs<font color="#E5E5E5"> to know a lot</font><font color="#CCCCCC"> of information</font>

745
00:27:33,040 --> 00:27:36,760
<font color="#CCCCCC">about the flows that it's analyzing so</font>

746
00:27:35,170 --> 00:27:38,800
it states much more complex and as a

747
00:27:36,760 --> 00:27:41,980
result it takes several times longer to

748
00:27:38,800 --> 00:27:44,139
<font color="#E5E5E5">actually go about transferring it</font><font color="#CCCCCC"> okay</font>

749
00:27:41,980 --> 00:27:45,550
so we<font color="#CCCCCC"> have these</font><font color="#E5E5E5"> low-level operations</font>

750
00:27:44,140 --> 00:27:47,650
but how about<font color="#E5E5E5"> the high level operations</font>

751
00:27:45,550 --> 00:27:49,059
and out of the guarantees impact the

752
00:27:47,650 --> 00:27:51,100
time that it<font color="#E5E5E5"> takes us to do these move</font>

753
00:27:49,059 --> 00:27:52,990
operations so here we're<font color="#E5E5E5"> going to assume</font>

754
00:27:51,100 --> 00:27:55,750
<font color="#CCCCCC">that we're running the asset the preds</font>

755
00:27:52,990 --> 00:27:57,820
asset detection system we're again using

756
00:27:55,750 --> 00:28:00,179
<font color="#CCCCCC">the same trace of traffic at a slightly</font>

757
00:27:57,820 --> 00:28:03,010
lower rate<font color="#CCCCCC"> 5000 packets per second and</font>

758
00:28:00,179 --> 00:28:04,690
we're<font color="#CCCCCC"> going to move the state for 500</font>

759
00:28:03,010 --> 00:28:07,420
flows that are active at a given point

760
00:28:04,690 --> 00:28:08,800
in time so if we<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at how long it</font>

761
00:28:07,420 --> 00:28:11,170
<font color="#E5E5E5">takes for this move operation to</font>

762
00:28:08,800 --> 00:28:12,370
complete we can<font color="#CCCCCC"> look at first</font><font color="#E5E5E5"> of all</font>

763
00:28:11,170 --> 00:28:14,260
what happens if we don't<font color="#E5E5E5"> provide any</font>

764
00:28:12,370 --> 00:28:16,989
guarantees if we don't provide<font color="#E5E5E5"> any</font>

765
00:28:14,260 --> 00:28:19,360
guarantees then we're talking about 190

766
00:28:16,990 --> 00:28:21,490
milliseconds to do this operation we can

767
00:28:19,360 --> 00:28:21,909
do some parallelization of our guests

768
00:28:21,490 --> 00:28:23,800
and our

769
00:28:21,910 --> 00:28:25,570
what's that<font color="#E5E5E5"> we're issuing in order to</font>

770
00:28:23,800 --> 00:28:28,899
speed things up a little<font color="#E5E5E5"> bit so now we</font>

771
00:28:25,570 --> 00:28:31,919
<font color="#E5E5E5">can cut that down almost in half not</font>

772
00:28:28,900 --> 00:28:34,480
quite half to about 130 milliseconds

773
00:28:31,920 --> 00:28:36,730
great now the<font color="#CCCCCC"> problem here is that we're</font>

774
00:28:34,480 --> 00:28:38,560
losing packets as a<font color="#E5E5E5"> result of this so</font>

775
00:28:36,730 --> 00:28:40,690
without any guarantees on Las freeness

776
00:28:38,560 --> 00:28:43,629
or order preservation even in<font color="#E5E5E5"> the best</font>

777
00:28:40,690 --> 00:28:45,730
case we're losing 462 packets so we add

778
00:28:43,630 --> 00:28:47,440
in our loss freeness guarantee now our

779
00:28:45,730 --> 00:28:48,940
move operation takes longer takes about

780
00:28:47,440 --> 00:28:51,250
twice as long but we're not<font color="#CCCCCC"> going to</font>

781
00:28:48,940 --> 00:28:52,810
lose<font color="#CCCCCC"> any packets however we do pay an</font>

782
00:28:51,250 --> 00:28:54,250
overhead penalty so there's these

783
00:28:52,810 --> 00:28:56,050
buffering of packets that are happening

784
00:28:54,250 --> 00:28:58,570
at the controller while we're waiting

785
00:28:56,050 --> 00:29:00,850
<font color="#CCCCCC">for the state transfer to finish and so</font>

786
00:28:58,570 --> 00:29:04,720
there's 881 packets that end up being

787
00:29:00,850 --> 00:29:07,929
<font color="#E5E5E5">buffered and they experience about 120</font>

788
00:29:04,720 --> 00:29:10,690
milliseconds extra latency on average as

789
00:29:07,930 --> 00:29:14,410
a result but never higher than about 150

790
00:29:10,690 --> 00:29:16,060
millisecond penalty if we add in this

791
00:29:14,410 --> 00:29:17,590
order preserving requirement we again

792
00:29:16,060 --> 00:29:19,600
see another increase in the amount of

793
00:29:17,590 --> 00:29:21,669
time<font color="#CCCCCC"> it takes but</font><font color="#E5E5E5"> we don't see a</font>

794
00:29:19,600 --> 00:29:23,379
significant<font color="#CCCCCC"> increase in the amount of</font>

795
00:29:21,670 --> 00:29:25,180
<font color="#E5E5E5">overhead that we're imposing on packets</font>

796
00:29:23,380 --> 00:29:27,340
although there are more packets that

797
00:29:25,180 --> 00:29:30,100
we're imposing this overhead on so here

798
00:29:27,340 --> 00:29:33,189
with this board of preserving operation

799
00:29:30,100 --> 00:29:34,870
we end up buffering 883 83 packets<font color="#CCCCCC"> at</font>

800
00:29:33,190 --> 00:29:35,830
the controller and also I didn't<font color="#E5E5E5"> talk</font>

801
00:29:34,870 --> 00:29:37,810
about<font color="#E5E5E5"> this but there's another</font>

802
00:29:35,830 --> 00:29:39,220
approximately a thousand packets that we

803
00:29:37,810 --> 00:29:41,889
buffer at our<font color="#CCCCCC"> Center second network</font>

804
00:29:39,220 --> 00:29:43,210
function before they're processed so the

805
00:29:41,890 --> 00:29:45,520
overall takeaway here is that these

806
00:29:43,210 --> 00:29:47,770
operations are reasonably efficient but

807
00:29:45,520 --> 00:29:49,810
the guarantees that we want<font color="#E5E5E5"> to offer in</font>

808
00:29:47,770 --> 00:29:51,370
some cases do come at a cost<font color="#E5E5E5"> and so it's</font>

809
00:29:49,810 --> 00:29:53,320
important for control applications to

810
00:29:51,370 --> 00:29:56,290
have that flexibility to decide whether

811
00:29:53,320 --> 00:29:58,030
<font color="#E5E5E5">or not they need these guarantees so</font>

812
00:29:56,290 --> 00:30:00,340
where are<font color="#E5E5E5"> we going from here what's the</font>

813
00:29:58,030 --> 00:30:01,600
next steps for open enough well the

814
00:30:00,340 --> 00:30:03,159
<font color="#CCCCCC">first thing is that there's a lot</font>

815
00:30:01,600 --> 00:30:04,360
there's there's buffering that was

816
00:30:03,160 --> 00:30:05,890
<font color="#CCCCCC">happening in</font><font color="#E5E5E5"> the Los</font><font color="#CCCCCC"> trina's case</font>

817
00:30:04,360 --> 00:30:07,179
there's<font color="#E5E5E5"> even more buffering that's</font>

818
00:30:05,890 --> 00:30:09,070
happening in the order preserving case

819
00:30:07,180 --> 00:30:10,240
and so the question is how can reduce

820
00:30:09,070 --> 00:30:12,250
<font color="#E5E5E5">this amount of buffering that's</font>

821
00:30:10,240 --> 00:30:14,050
happening in an effort to reduce<font color="#E5E5E5"> the</font>

822
00:30:12,250 --> 00:30:16,030
number of packets that receive extra

823
00:30:14,050 --> 00:30:19,330
overhead and in<font color="#E5E5E5"> order to reduce the</font>

824
00:30:16,030 --> 00:30:21,399
memory usage of our system so one thing

825
00:30:19,330 --> 00:30:23,530
<font color="#CCCCCC">that we can do is rather than pausing</font>

826
00:30:21,400 --> 00:30:25,270
traffic and immediately saying before

827
00:30:23,530 --> 00:30:26,950
this state transfer starts I want you to

828
00:30:25,270 --> 00:30:28,389
start raising events we can allow the

829
00:30:26,950 --> 00:30:30,370
network function to continue to process

830
00:30:28,390 --> 00:30:33,250
packets and then any packets that are

831
00:30:30,370 --> 00:30:35,110
processed we essentially reprocess those

832
00:30:33,250 --> 00:30:35,860
packets at our second instance to bring

833
00:30:35,110 --> 00:30:39,189
its<font color="#E5E5E5"> state</font>

834
00:30:35,860 --> 00:30:41,439
up to speed similar to what virtual

835
00:30:39,190 --> 00:30:43,090
machines do when they take when they're

836
00:30:41,440 --> 00:30:45,010
doing migration where they'll take a

837
00:30:43,090 --> 00:30:46,570
snapshot and then replay updates to

838
00:30:45,010 --> 00:30:48,429
memory later on to<font color="#E5E5E5"> bring that snapshot</font>

839
00:30:46,570 --> 00:30:51,549
up to speed before finishing<font color="#E5E5E5"> the final</font>

840
00:30:48,429 --> 00:30:52,960
migration<font color="#E5E5E5"> the second thing that we can</font>

841
00:30:51,549 --> 00:30:54,850
do is either improve the scalability of

842
00:30:52,960 --> 00:30:56,140
this system so right now all these

843
00:30:54,850 --> 00:30:57,490
packets and oh the state is going

844
00:30:56,140 --> 00:30:58,870
<font color="#E5E5E5">through the controller which means</font>

845
00:30:57,490 --> 00:31:00,790
there's a limit to<font color="#E5E5E5"> how many operations</font>

846
00:30:58,870 --> 00:31:02,229
we can<font color="#E5E5E5"> handle simultaneous of the</font>

847
00:31:00,790 --> 00:31:03,549
controller but it turns out the

848
00:31:02,230 --> 00:31:04,960
controller doesn't have to be<font color="#E5E5E5"> involved</font>

849
00:31:03,549 --> 00:31:07,240
we can actually<font color="#CCCCCC"> use a peer-to-peer</font>

850
00:31:04,960 --> 00:31:09,370
mechanism to transfer state directly

851
00:31:07,240 --> 00:31:10,809
between instances of a network function

852
00:31:09,370 --> 00:31:14,110
and still get all the same safety

853
00:31:10,809 --> 00:31:15,610
guarantees that we want lastly I said we

854
00:31:14,110 --> 00:31:16,719
need<font color="#E5E5E5"> to modify the network functions and</font>

855
00:31:15,610 --> 00:31:18,189
obviously there's a lot<font color="#CCCCCC"> of network</font>

856
00:31:16,720 --> 00:31:21,010
functions out there so how do<font color="#E5E5E5"> we make</font>

857
00:31:18,190 --> 00:31:23,380
this<font color="#E5E5E5"> task easier to do well where we can</font>

858
00:31:21,010 --> 00:31:26,320
use<font color="#CCCCCC"> some techniques from Berman</font><font color="#E5E5E5"> alisis</font>

859
00:31:23,380 --> 00:31:28,660
in order to analyze the network function

860
00:31:26,320 --> 00:31:30,939
code and automatically figure out what

861
00:31:28,660 --> 00:31:32,679
state is this maintaining and what state

862
00:31:30,940 --> 00:31:34,120
do we need<font color="#E5E5E5"> to actually export from this</font>

863
00:31:32,679 --> 00:31:37,390
network functions as we have some

864
00:31:34,120 --> 00:31:39,760
ongoing work in that area so in

865
00:31:37,390 --> 00:31:41,830
<font color="#CCCCCC">conclusion I hope I've convinced you</font>

866
00:31:39,760 --> 00:31:44,110
that we need<font color="#E5E5E5"> something more than just an</font>

867
00:31:41,830 --> 00:31:46,000
FB and sdn in order<font color="#E5E5E5"> to be able to</font>

868
00:31:44,110 --> 00:31:48,418
realize rich scenarios we want to

869
00:31:46,000 --> 00:31:50,350
dynamically reallocate packet processing

870
00:31:48,419 --> 00:31:52,870
particular we need the ability to

871
00:31:50,350 --> 00:31:54,370
quickly move copy or share network

872
00:31:52,870 --> 00:31:57,250
function state and do it in<font color="#E5E5E5"> a way that's</font>

873
00:31:54,370 --> 00:31:59,678
also safe and we've achieved this with

874
00:31:57,250 --> 00:32:01,240
open enough if you want to learn<font color="#CCCCCC"> more or</font>

875
00:31:59,679 --> 00:32:02,830
if you want to<font color="#E5E5E5"> try out the code for open</font>

876
00:32:01,240 --> 00:32:06,910
an app i encourage you to visit<font color="#E5E5E5"> our</font>

877
00:32:02,830 --> 00:32:08,199
<font color="#CCCCCC">website open an FCS wisc.edu with that I</font>

878
00:32:06,910 --> 00:32:11,429
thank you for<font color="#E5E5E5"> listening and I'll be</font>

879
00:32:08,200 --> 00:32:11,429
happy<font color="#E5E5E5"> to answer any</font><font color="#CCCCCC"> questions you have</font>

880
00:32:14,640 --> 00:32:19,169
thanks<font color="#CCCCCC"> Aaron error are there any</font>

881
00:32:16,750 --> 00:32:19,169
<font color="#CCCCCC">questions</font>

882
00:32:22,179 --> 00:32:28,600
yeah kevin faulk<font color="#CCCCCC"> Carnegie Mellon so one</font>

883
00:32:25,749 --> 00:32:30,700
question is the things you talked about

884
00:32:28,600 --> 00:32:33,309
look like they're all cases of / flow

885
00:32:30,700 --> 00:32:34,809
stadia to move so if you're doing

886
00:32:33,309 --> 00:32:36,158
something I<font color="#CCCCCC"> think you mentioned at the</font>

887
00:32:34,809 --> 00:32:38,110
beginning there's things that could<font color="#CCCCCC"> be</font>

888
00:32:36,159 --> 00:32:41,139
not perfil a state that could be pretty

889
00:32:38,110 --> 00:32:43,389
large so for example is this a chunk<font color="#E5E5E5"> of</font>

890
00:32:41,139 --> 00:32:45,490
malware that I've seen<font color="#E5E5E5"> before as opposed</font>

891
00:32:43,389 --> 00:32:48,129
to does this packet have these bit set

892
00:32:45,490 --> 00:32:50,200
so you didn't I don't think<font color="#CCCCCC"> you had the</font>

893
00:32:48,129 --> 00:32:52,418
graph that actually shows kind of the

894
00:32:50,200 --> 00:32:55,360
size on the x-axis and the impact<font color="#E5E5E5"> on the</font>

895
00:32:52,419 --> 00:32:57,009
y-axis other you had examples so what

896
00:32:55,360 --> 00:32:59,129
does<font color="#CCCCCC"> that look like do you have that or</font>

897
00:32:57,009 --> 00:33:01,720
so<font color="#E5E5E5"> I guess I don't</font><font color="#CCCCCC"> have an exact graph</font>

898
00:32:59,129 --> 00:33:04,299
the best<font color="#E5E5E5"> I can show you the</font><font color="#CCCCCC"> best</font><font color="#E5E5E5"> I can</font>

899
00:33:01,720 --> 00:33:06,369
put up<font color="#E5E5E5"> here is sort of this which says</font>

900
00:33:04,299 --> 00:33:07,990
here's how how much done that so in the

901
00:33:06,369 --> 00:33:10,840
<font color="#CCCCCC">case of iptables I can give you an idea</font>

902
00:33:07,990 --> 00:33:13,179
<font color="#E5E5E5">that the state for a single flow is less</font>

903
00:33:10,840 --> 00:33:15,428
than a kilobyte in the case of bro we're

904
00:33:13,179 --> 00:33:17,710
talking about a hundred or two hundred

905
00:33:15,429 --> 00:33:20,200
kilobytes of state for flow so it is<font color="#E5E5E5"> it</font>

906
00:33:17,710 --> 00:33:24,009
is reasonably small that's<font color="#E5E5E5"> true and so</font>

907
00:33:20,200 --> 00:33:26,019
one thing you can do is is is to<font color="#CCCCCC"> be able</font>

908
00:33:24,009 --> 00:33:28,509
<font color="#E5E5E5">to start to proactively copy some of the</font>

909
00:33:26,019 --> 00:33:30,580
state<font color="#E5E5E5"> and our replay events that's</font>

910
00:33:28,509 --> 00:33:31,539
future<font color="#E5E5E5"> work would enable that the other</font>

911
00:33:30,580 --> 00:33:33,340
thing i want to touch on that you

912
00:33:31,539 --> 00:33:35,350
mentioned is this idea that everything<font color="#CCCCCC"> i</font>

913
00:33:33,340 --> 00:33:36,789
was assuming here was / flow so a good

914
00:33:35,350 --> 00:33:38,730
example of multi flow state would be

915
00:33:36,789 --> 00:33:41,200
objects in a cache and you may say well

916
00:33:38,730 --> 00:33:42,549
there's there's cash sharing protocols

917
00:33:41,200 --> 00:33:44,769
out there or we can just go<font color="#CCCCCC"> ahead and</font>

918
00:33:42,549 --> 00:33:46,658
and not worry about it because<font color="#E5E5E5"> it'll</font>

919
00:33:44,769 --> 00:33:47,919
just get recast right and so that may be

920
00:33:46,659 --> 00:33:49,899
a trade-off you're willing to make in

921
00:33:47,919 --> 00:33:52,090
some cases as you may say it's not

922
00:33:49,899 --> 00:33:54,039
critical that<font color="#E5E5E5"> I copy this state so I'm</font>

923
00:33:52,090 --> 00:33:55,720
<font color="#E5E5E5">not going to bother but in some cases if</font>

924
00:33:54,039 --> 00:33:57,100
you're actively serving a connection and

925
00:33:55,720 --> 00:33:58,960
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> saying here's an object i'm</font>

926
00:33:57,100 --> 00:34:00,549
serving to this client if you<font color="#CCCCCC"> move that</font>

927
00:33:58,960 --> 00:34:02,049
connection in the<font color="#E5E5E5"> middle of serving that</font>

928
00:34:00,549 --> 00:34:04,600
object then you definitely have<font color="#CCCCCC"> to go</font>

929
00:34:02,049 --> 00:34:07,210
about copying that object over well or

930
00:34:04,600 --> 00:34:09,429
take the cash it later<font color="#CCCCCC"> i suppose right</font><font color="#E5E5E5"> i</font>

931
00:34:07,210 --> 00:34:10,839
mean<font color="#E5E5E5"> there's some it depends on the</font>

932
00:34:09,429 --> 00:34:13,030
semantics you want to you want<font color="#E5E5E5"> to</font>

933
00:34:10,839 --> 00:34:14,440
exactly it's it's<font color="#CCCCCC"> very dependent so i</font>

934
00:34:13,030 --> 00:34:16,450
guess there's another kind of<font color="#E5E5E5"> question</font>

935
00:34:14,440 --> 00:34:17,280
<font color="#E5E5E5">related to that which</font><font color="#CCCCCC"> is probably bigger</font>

936
00:34:16,449 --> 00:34:20,009
than<font color="#E5E5E5"> just your</font>

937
00:34:17,280 --> 00:34:22,380
but so find a cascade of three or four

938
00:34:20,010 --> 00:34:23,940
<font color="#CCCCCC">of these</font><font color="#E5E5E5"> functions and one of them Rob's</font>

939
00:34:22,380 --> 00:34:26,010
the packets in some ways such that

940
00:34:23,940 --> 00:34:27,960
reclassification of the prior uplink

941
00:34:26,010 --> 00:34:30,720
thing needs to<font color="#E5E5E5"> be done but now you've</font>

942
00:34:27,960 --> 00:34:33,360
migrated one to some other place what

943
00:34:30,719 --> 00:34:35,520
kind<font color="#E5E5E5"> of situations could I get myself in</font>

944
00:34:33,360 --> 00:34:37,830
with respect to do that in this era

945
00:34:35,520 --> 00:34:39,540
scheduling<font color="#E5E5E5"> something or other you do to</font>

946
00:34:37,830 --> 00:34:41,100
deal with that yeah so we've so we've

947
00:34:39,540 --> 00:34:43,050
thought a little<font color="#E5E5E5"> bit about sort of the</font>

948
00:34:41,100 --> 00:34:44,219
<font color="#E5E5E5">chaining scenario where you have many of</font>

949
00:34:43,050 --> 00:34:47,790
these network functions that you're

950
00:34:44,219 --> 00:34:49,799
passing through so I<font color="#CCCCCC"> think we think that</font>

951
00:34:47,790 --> 00:34:51,630
<font color="#E5E5E5">in many</font><font color="#CCCCCC"> cases you can sort of if you</font>

952
00:34:49,800 --> 00:34:53,130
have a chain you<font color="#E5E5E5"> can sort of my great</font>

953
00:34:51,630 --> 00:34:54,659
for one<font color="#E5E5E5"> middle box in the chain at a</font>

954
00:34:53,130 --> 00:34:57,540
time and you are doing some temporary

955
00:34:54,659 --> 00:34:59,220
redirection in that case<font color="#CCCCCC"> you can</font>

956
00:34:57,540 --> 00:35:01,560
<font color="#E5E5E5">certainly do better scheduling if you</font>

957
00:34:59,220 --> 00:35:02,759
look at the<font color="#E5E5E5"> entire chain at a time we</font>

958
00:35:01,560 --> 00:35:04,350
need<font color="#CCCCCC"> to give some thought yet as to how</font>

959
00:35:02,760 --> 00:35:05,880
<font color="#E5E5E5">we sort of extend our safety guaranteed</font>

960
00:35:04,350 --> 00:35:08,880
to guarantee them across multiple

961
00:35:05,880 --> 00:35:11,070
network functions<font color="#CCCCCC"> yeah the last comment</font>

962
00:35:08,880 --> 00:35:12,510
was related to you said about chain

963
00:35:11,070 --> 00:35:14,760
moving the state ahead of time<font color="#CCCCCC"> or</font>

964
00:35:12,510 --> 00:35:17,070
something our program analysis move

965
00:35:14,760 --> 00:35:20,940
seems to me that something along the

966
00:35:17,070 --> 00:35:21,900
lines of some distributed almost

967
00:35:20,940 --> 00:35:23,400
like<font color="#E5E5E5"> a tribute to shared memory or</font>

968
00:35:21,900 --> 00:35:26,400
something<font color="#E5E5E5"> where where you can look at</font>

969
00:35:23,400 --> 00:35:29,040
page accesses if you're willing to eat

970
00:35:26,400 --> 00:35:32,960
some of that page fault time might be

971
00:35:29,040 --> 00:35:32,960
relative<font color="#E5E5E5"> thanks</font>

972
00:35:38,010 --> 00:35:46,290
I execrable of Lanka I just have one

973
00:35:41,640 --> 00:35:48,210
comment that's in some cases you can't

974
00:35:46,290 --> 00:35:50,040
fix this problem just with<font color="#CCCCCC"> the</font>

975
00:35:48,210 --> 00:35:55,530
controller and they're<font color="#E5E5E5"> moving the state</font>

976
00:35:50,040 --> 00:35:57,180
because you speak into the mic please if

977
00:35:55,530 --> 00:36:00,210
you have a problem if you have the

978
00:35:57,180 --> 00:36:02,580
subscribers which was registered in the

979
00:36:00,210 --> 00:36:04,980
<font color="#CCCCCC">Sun network element you can just move</font>

980
00:36:02,580 --> 00:36:07,470
with him because he must be<font color="#E5E5E5"> aware as you</font>

981
00:36:04,980 --> 00:36:11,280
know<font color="#CCCCCC"> made registration</font><font color="#E5E5E5"> two different</font>

982
00:36:07,470 --> 00:36:13,950
that requirement so in some cases<font color="#E5E5E5"> only</font>

983
00:36:11,280 --> 00:36:16,740
<font color="#E5E5E5">application itself can move the state</font>

984
00:36:13,950 --> 00:36:19,589
and coming from<font color="#E5E5E5"> other elements</font><font color="#CCCCCC"> that's</font>

985
00:36:16,740 --> 00:36:22,620
now the<font color="#E5E5E5"> SUBSCRIBE all I move the state</font>

986
00:36:19,590 --> 00:36:25,770
from<font color="#E5E5E5"> this unit from da sein so I mean</font>

987
00:36:22,620 --> 00:36:27,480
it's in some up for<font color="#CCCCCC"> some application you</font>

988
00:36:25,770 --> 00:36:30,270
can change the state with the control

989
00:36:27,480 --> 00:36:31,650
but for some<font color="#E5E5E5"> cases you can do it only</font>

990
00:36:30,270 --> 00:36:34,740
with the application level so

991
00:36:31,650 --> 00:36:38,160
application itself must decide how to

992
00:36:34,740 --> 00:36:40,350
correctly move the state that's true sir

993
00:36:38,160 --> 00:36:42,509
so I agree that<font color="#E5E5E5"> there's certainly</font>

994
00:36:40,350 --> 00:36:44,580
there's some information you<font color="#E5E5E5"> need to</font>

995
00:36:42,510 --> 00:36:45,690
know<font color="#CCCCCC"> about the network functions go to</font>

996
00:36:44,580 --> 00:36:47,490
know how you're going to go about

997
00:36:45,690 --> 00:36:49,800
writing these applications and that's

998
00:36:47,490 --> 00:36:51,390
something that we<font color="#E5E5E5"> haven't yet done a</font>

999
00:36:49,800 --> 00:36:53,340
good job of capturing we're hoping<font color="#CCCCCC"> that</font>

1000
00:36:51,390 --> 00:36:56,220
ideally some of our program analysis

1001
00:36:53,340 --> 00:36:57,510
could give you a simplified model of how

1002
00:36:56,220 --> 00:36:59,459
this network function works or

1003
00:36:57,510 --> 00:37:01,260
potentially give you<font color="#E5E5E5"> recommendations on</font>

1004
00:36:59,460 --> 00:37:02,850
ears which are huge which you should

1005
00:37:01,260 --> 00:37:04,490
have your control application do and if

1006
00:37:02,850 --> 00:37:06,660
<font color="#CCCCCC">you have it do this</font><font color="#E5E5E5"> you'll get this</font>

1007
00:37:04,490 --> 00:37:08,069
equivalency level of output if you have

1008
00:37:06,660 --> 00:37:10,080
it do something<font color="#E5E5E5"> else instead you'll get</font>

1009
00:37:08,070 --> 00:37:11,070
this equivalency level of output so some

1010
00:37:10,080 --> 00:37:12,990
interesting questions about how you

1011
00:37:11,070 --> 00:37:14,510
communicate that with someone who's

1012
00:37:12,990 --> 00:37:17,629
trying<font color="#E5E5E5"> to write a control application</font>

1013
00:37:14,510 --> 00:37:17,630
thank you

1014
00:37:26,640 --> 00:37:34,600
so for the state move one sir what's<font color="#E5E5E5"> the</font>

1015
00:37:32,110 --> 00:37:37,510
condition to<font color="#E5E5E5"> check that hole so is that</font>

1016
00:37:34,600 --> 00:37:40,720
I have 10<font color="#E5E5E5"> it's aesthetically complete</font>

1017
00:37:37,510 --> 00:37:42,070
good or so interesting about that<font color="#E5E5E5"> that's</font>

1018
00:37:40,720 --> 00:37:44,020
really up to the control applications

1019
00:37:42,070 --> 00:37:45,370
how they want<font color="#E5E5E5"> to do it so your control</font>

1020
00:37:44,020 --> 00:37:47,860
application and the scaling scenario

1021
00:37:45,370 --> 00:37:49,660
could be maybe it's monitoring CPU and

1022
00:37:47,860 --> 00:37:51,820
it says I'm<font color="#E5E5E5"> going to monitor CPU and</font>

1023
00:37:49,660 --> 00:37:53,589
then I'm going<font color="#E5E5E5"> to do some sort of</font>

1024
00:37:51,820 --> 00:37:55,930
measurements of what are my elephant

1025
00:37:53,590 --> 00:37:57,850
flows to figure out exactly what set of

1026
00:37:55,930 --> 00:37:59,700
flows I want to move from one box to

1027
00:37:57,850 --> 00:38:02,140
another so that's completely flexible

1028
00:37:59,700 --> 00:38:05,649
and you could<font color="#E5E5E5"> implement whatever you</font>

1029
00:38:02,140 --> 00:38:08,200
want it there right so and because I

1030
00:38:05,650 --> 00:38:10,210
assume that when you move something from

1031
00:38:08,200 --> 00:38:12,220
one place to another place if you also

1032
00:38:10,210 --> 00:38:14,470
cost you something like been<font color="#CCCCCC"> with us</font>

1033
00:38:12,220 --> 00:38:18,160
awesome blog there so initially<font color="#E5E5E5"> you want</font>

1034
00:38:14,470 --> 00:38:20,319
to move because<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to meet the</font>

1035
00:38:18,160 --> 00:38:22,420
<font color="#CCCCCC">essay way but right</font><font color="#E5E5E5"> now when you move</font>

1036
00:38:20,320 --> 00:38:25,750
actually you are like a spending like

1037
00:38:22,420 --> 00:38:28,810
some bandwidth cuz I you know make<font color="#CCCCCC"> the</font>

1038
00:38:25,750 --> 00:38:30,760
problem<font color="#E5E5E5"> like even worse and then I</font>

1039
00:38:28,810 --> 00:38:33,670
believe he'll you know<font color="#E5E5E5"> from the</font>

1040
00:38:30,760 --> 00:38:37,000
<font color="#E5E5E5">presentation it's not quite clear to me</font>

1041
00:38:33,670 --> 00:38:41,260
and<font color="#E5E5E5"> also this moving thing you know you</font>

1042
00:38:37,000 --> 00:38:42,610
can<font color="#E5E5E5"> really solve</font><font color="#CCCCCC"> the SAO a problem so</font>

1043
00:38:41,260 --> 00:38:44,800
it's true<font color="#E5E5E5"> that there are there</font><font color="#CCCCCC"> are other</font>

1044
00:38:42,610 --> 00:38:46,120
SLA s not only<font color="#E5E5E5"> I guess I was referring</font>

1045
00:38:44,800 --> 00:38:47,410
to as a lace for the<font color="#E5E5E5"> network function</font>

1046
00:38:46,120 --> 00:38:49,180
itself but you're<font color="#CCCCCC"> right that what you're</font>

1047
00:38:47,410 --> 00:38:51,399
<font color="#CCCCCC">doing in the network can certainly have</font>

1048
00:38:49,180 --> 00:38:53,109
an impact and so one way to do that<font color="#E5E5E5"> is</font>

1049
00:38:51,400 --> 00:38:54,460
to be<font color="#E5E5E5"> a little bit more proactive and</font>

1050
00:38:53,110 --> 00:38:57,760
say<font color="#CCCCCC"> alright we're</font><font color="#E5E5E5"> getting close to</font>

1051
00:38:54,460 --> 00:39:00,100
violating an SLA and so we want<font color="#E5E5E5"> to</font>

1052
00:38:57,760 --> 00:39:01,630
recognize that<font color="#E5E5E5"> we better start this</font>

1053
00:39:00,100 --> 00:39:03,779
migration now otherwise we're for sure

1054
00:39:01,630 --> 00:39:05,800
going to<font color="#E5E5E5"> violate the SLA s that we have</font>

1055
00:39:03,780 --> 00:39:06,880
but yeah I agree there's there's some

1056
00:39:05,800 --> 00:39:08,200
interesting questions there and that's

1057
00:39:06,880 --> 00:39:11,020
one of the<font color="#E5E5E5"> reasons we also want to look</font>

1058
00:39:08,200 --> 00:39:12,460
at how can we reduce<font color="#E5E5E5"> the amount of state</font>

1059
00:39:11,020 --> 00:39:13,870
that we're transferring and so some of

1060
00:39:12,460 --> 00:39:16,930
our program analysis is trying to

1061
00:39:13,870 --> 00:39:18,279
understand rather than exporting all of

1062
00:39:16,930 --> 00:39:20,410
the state that<font color="#E5E5E5"> the network function is</font>

1063
00:39:18,280 --> 00:39:22,780
maintaining can we figure<font color="#E5E5E5"> out what state</font>

1064
00:39:20,410 --> 00:39:24,220
was updated since the last time maybe we

1065
00:39:22,780 --> 00:39:27,430
create a snapshot in a failover

1066
00:39:24,220 --> 00:39:29,890
situation or can we figure<font color="#CCCCCC"> out maybe</font>

1067
00:39:27,430 --> 00:39:31,299
some state affects the packets that are

1068
00:39:29,890 --> 00:39:33,730
output but are not by<font color="#CCCCCC"> our network</font>

1069
00:39:31,300 --> 00:39:36,010
function and other state affects the log

1070
00:39:33,730 --> 00:39:37,450
and maybe we say you<font color="#E5E5E5"> know in something</font>

1071
00:39:36,010 --> 00:39:39,010
like a caching proxy we're not really

1072
00:39:37,450 --> 00:39:39,759
concerned about the accuracy of the log

1073
00:39:39,010 --> 00:39:42,100
so we're not

1074
00:39:39,760 --> 00:39:44,200
remove that state and so you may be able

1075
00:39:42,100 --> 00:39:47,890
to<font color="#E5E5E5"> limit what state you move in exchange</font>

1076
00:39:44,200 --> 00:39:49,299
for a relaxed notion of the behavior of

1077
00:39:47,890 --> 00:39:50,890
your<font color="#E5E5E5"> network function and how much it</font>

1078
00:39:49,300 --> 00:39:55,960
compares to what would you would have

1079
00:39:50,890 --> 00:39:59,470
gotten if you didn't move at all the

1080
00:39:55,960 --> 00:40:01,240
whole opus<font color="#E5E5E5"> funny good first of all is</font>

1081
00:39:59,470 --> 00:40:05,470
that you are mentioning continuously

1082
00:40:01,240 --> 00:40:07,479
middleboxes and well we are working with

1083
00:40:05,470 --> 00:40:10,180
netta<font color="#CCCCCC"> French that</font><font color="#E5E5E5"> are related purely to</font>

1084
00:40:07,480 --> 00:40:13,360
the beta playing a mean rotten functions

1085
00:40:10,180 --> 00:40:15,250
and forwarding functions in general how

1086
00:40:13,360 --> 00:40:19,870
do you see these kind of framework

1087
00:40:15,250 --> 00:40:21,610
applied in that the environment so it's

1088
00:40:19,870 --> 00:40:23,770
an excellent question I haven't really

1089
00:40:21,610 --> 00:40:25,810
<font color="#E5E5E5">thought</font><font color="#CCCCCC"> about it in terms of control</font>

1090
00:40:23,770 --> 00:40:29,520
plane devices I've<font color="#E5E5E5"> only really thought</font>

1091
00:40:25,810 --> 00:40:32,230
about in terms of data playing devices I

1092
00:40:29,520 --> 00:40:33,759
think<font color="#E5E5E5"> I think there's probably a</font>

1093
00:40:32,230 --> 00:40:35,350
different problem there and<font color="#E5E5E5"> potentially</font>

1094
00:40:33,760 --> 00:40:37,770
a simpler solution when you start to

1095
00:40:35,350 --> 00:40:40,000
talk about<font color="#E5E5E5"> things that the control plane</font>

1096
00:40:37,770 --> 00:40:41,530
sort of the<font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> comes most mind</font>

1097
00:40:40,000 --> 00:40:43,660
is work that's being done in the

1098
00:40:41,530 --> 00:40:45,460
<font color="#E5E5E5">distributed SDN controller case where</font>

1099
00:40:43,660 --> 00:40:47,319
there<font color="#CCCCCC"> you're SDN controller is your</font>

1100
00:40:45,460 --> 00:40:49,390
control plane and so there you're

1101
00:40:47,320 --> 00:40:51,520
concerned about moving state but you

1102
00:40:49,390 --> 00:40:53,049
<font color="#E5E5E5">don't have packets necessarily that are</font>

1103
00:40:51,520 --> 00:40:55,960
going through this controller and so you

1104
00:40:53,050 --> 00:40:58,050
<font color="#CCCCCC">don't have that challenge to do it yeah</font>

1105
00:40:55,960 --> 00:41:00,460
no I<font color="#CCCCCC"> mean I mean I'm thinking about the</font>

1106
00:40:58,050 --> 00:41:02,530
make it you're moving the function is

1107
00:41:00,460 --> 00:41:06,670
performance / penalties and<font color="#E5E5E5"> B and</font><font color="#CCCCCC"> they</font>

1108
00:41:02,530 --> 00:41:09,250
kind<font color="#E5E5E5"> of I mean</font><font color="#CCCCCC"> icml in this for the air</font>

1109
00:41:06,670 --> 00:41:11,140
for the<font color="#E5E5E5"> data playing functions of the</font>

1110
00:41:09,250 --> 00:41:12,820
other hand<font color="#E5E5E5"> is precisely the penalties</font>

1111
00:41:11,140 --> 00:41:14,970
that you will occur in the quesadilla

1112
00:41:12,820 --> 00:41:17,380
player a former framework like<font color="#E5E5E5"> this</font>

1113
00:41:14,970 --> 00:41:20,410
something that I was thinking whether

1114
00:41:17,380 --> 00:41:22,720
whether<font color="#E5E5E5"> in the case for example we have</font>

1115
00:41:20,410 --> 00:41:26,109
a project on visualizing the others

1116
00:41:22,720 --> 00:41:29,430
mm-hmm whether that's we could apply

1117
00:41:26,110 --> 00:41:32,470
these in science only environment<font color="#E5E5E5"> just</font>

1118
00:41:29,430 --> 00:41:33,430
and I was<font color="#E5E5E5"> curious if sure yeah sorry I</font>

1119
00:41:32,470 --> 00:41:35,379
think<font color="#CCCCCC"> you could I think one challenge</font>

1120
00:41:33,430 --> 00:41:37,000
that<font color="#E5E5E5"> you certainly face is sort of where</font>

1121
00:41:35,380 --> 00:41:38,980
is this going to which is sort of

1122
00:41:37,000 --> 00:41:41,110
standard<font color="#E5E5E5"> NFP challenge you know to</font>

1123
00:41:38,980 --> 00:41:42,550
migrate in an across the<font color="#CCCCCC"> entire</font>

1124
00:41:41,110 --> 00:41:44,350
continental United States versus to

1125
00:41:42,550 --> 00:41:46,270
migrate it between<font color="#E5E5E5"> something in a metro</font>

1126
00:41:44,350 --> 00:41:48,160
area is going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> a really different</font>

1127
00:41:46,270 --> 00:41:49,690
situation and one is probably feasible

1128
00:41:48,160 --> 00:41:50,080
the other is no this is some kind of

1129
00:41:49,690 --> 00:41:51,870
state

1130
00:41:50,080 --> 00:41:54,549
you have to preserve as one<font color="#CCCCCC"> other right</font>

1131
00:41:51,870 --> 00:41:57,670
<font color="#CCCCCC">second if I've understood well because</font>

1132
00:41:54,550 --> 00:42:00,010
they see a<font color="#E5E5E5"> BCS to share my my view and</font>

1133
00:41:57,670 --> 00:42:03,130
to see whether you share it as well as I

1134
00:42:00,010 --> 00:42:05,500
see<font color="#E5E5E5"> this</font><font color="#CCCCCC"> as a similarity between these</font>

1135
00:42:03,130 --> 00:42:07,570
and these are the some time ago I

1136
00:42:05,500 --> 00:42:10,560
remember when in<font color="#CCCCCC"> object-oriented</font>

1137
00:42:07,570 --> 00:42:14,200
programming<font color="#E5E5E5"> is a object persistence</font>

1138
00:42:10,560 --> 00:42:16,090
framework I think this this is a clear

1139
00:42:14,200 --> 00:42:19,270
connection right so this is very<font color="#E5E5E5"> much</font>

1140
00:42:16,090 --> 00:42:20,320
connected with<font color="#E5E5E5"> this yes we haven't we</font>

1141
00:42:19,270 --> 00:42:22,060
haven't necessarily looked specifically

1142
00:42:20,320 --> 00:42:23,560
at that body<font color="#E5E5E5"> of research although we</font>

1143
00:42:22,060 --> 00:42:25,029
have<font color="#E5E5E5"> started</font><font color="#CCCCCC"> to look at it actually as</font>

1144
00:42:23,560 --> 00:42:26,860
we're doing<font color="#E5E5E5"> some this program analysis</font>

1145
00:42:25,030 --> 00:42:29,170
because there's all sorts of<font color="#CCCCCC"> things to</font>

1146
00:42:26,860 --> 00:42:30,790
<font color="#CCCCCC">figure out what objects exist beyond the</font>

1147
00:42:29,170 --> 00:42:32,800
processing of a single packet and what

1148
00:42:30,790 --> 00:42:34,570
objects are only used during<font color="#CCCCCC"> the</font>

1149
00:42:32,800 --> 00:42:37,030
processing of that one packet at this

1150
00:42:34,570 --> 00:42:39,010
middle box and so I think there<font color="#CCCCCC"> is</font>

1151
00:42:37,030 --> 00:42:41,830
definitely a broader body of work there

1152
00:42:39,010 --> 00:42:44,470
that's worth considering because there

1153
00:42:41,830 --> 00:42:46,210
are some researchers have been checking

1154
00:42:44,470 --> 00:42:48,640
with that they are starting<font color="#CCCCCC"> to think</font>

1155
00:42:46,210 --> 00:42:51,010
precisely on a network programming

1156
00:42:48,640 --> 00:42:53,140
paradigm that is object oriented and

1157
00:42:51,010 --> 00:42:54,790
they are precisely<font color="#E5E5E5"> one of the properties</font>

1158
00:42:53,140 --> 00:42:56,950
<font color="#CCCCCC">that they</font><font color="#E5E5E5"> were thinking</font><font color="#CCCCCC"> about what about</font>

1159
00:42:54,790 --> 00:42:58,690
persistence and this kind of rubric

1160
00:42:56,950 --> 00:43:00,569
ability<font color="#CCCCCC"> this is something that it was</font>

1161
00:42:58,690 --> 00:43:03,490
taking<font color="#E5E5E5"> note because probably</font><font color="#CCCCCC"> will and</font>

1162
00:43:00,570 --> 00:43:05,230
finally it's about that you were

1163
00:43:03,490 --> 00:43:06,609
mentioning here a control application

1164
00:43:05,230 --> 00:43:09,460
the culture playing this is something

1165
00:43:06,610 --> 00:43:11,350
that<font color="#E5E5E5"> your start thinking about well did</font>

1166
00:43:09,460 --> 00:43:13,240
you take care of<font color="#E5E5E5"> the dsdna architecture</font>

1167
00:43:11,350 --> 00:43:16,839
you have<font color="#E5E5E5"> the end of your collection and</font>

1168
00:43:13,240 --> 00:43:18,609
well we have having some problems in

1169
00:43:16,840 --> 00:43:20,020
match in them and that there<font color="#E5E5E5"> is a third</font>

1170
00:43:18,610 --> 00:43:23,230
dimension because this is an additional

1171
00:43:20,020 --> 00:43:27,340
<font color="#E5E5E5">dimension right right so well we have</font>

1172
00:43:23,230 --> 00:43:29,680
three<font color="#E5E5E5"> access now how we put them in</font>

1173
00:43:27,340 --> 00:43:30,910
space I mean I won't on application that

1174
00:43:29,680 --> 00:43:33,879
is running<font color="#E5E5E5"> according to as the end</font>

1175
00:43:30,910 --> 00:43:36,370
principles that can be can apply any of

1176
00:43:33,880 --> 00:43:38,740
the orchestration and now we want<font color="#CCCCCC"> to</font>

1177
00:43:36,370 --> 00:43:44,040
replicate it how do<font color="#E5E5E5"> you see these are</font>

1178
00:43:38,740 --> 00:43:44,040
these all the whole thing marching and

1179
00:43:44,190 --> 00:43:50,740
so I think<font color="#E5E5E5"> I think certainly some of</font>

1180
00:43:48,010 --> 00:43:52,630
what this controller is doing could be

1181
00:43:50,740 --> 00:43:55,390
part of another controller that's

1182
00:43:52,630 --> 00:43:59,050
already doing<font color="#E5E5E5"> some the</font><font color="#CCCCCC"> sdn or the</font><font color="#E5E5E5"> nfe</font>

1183
00:43:55,390 --> 00:44:01,330
orchestration things in the network but

1184
00:43:59,050 --> 00:44:02,620
<font color="#E5E5E5">it's not it's unclear how tightly you</font>

1185
00:44:01,330 --> 00:44:03,680
can integrate those because they're each

1186
00:44:02,620 --> 00:44:05,930
solving us that there is

1187
00:44:03,680 --> 00:44:07,549
solving a slightly different problem and

1188
00:44:05,930 --> 00:44:10,578
so I think there's<font color="#E5E5E5"> just going to be me</font>

1189
00:44:07,550 --> 00:44:11,869
need to<font color="#CCCCCC"> be some interfaces there for the</font>

1190
00:44:10,579 --> 00:44:13,609
same reason that when you're talking

1191
00:44:11,869 --> 00:44:16,339
about NF the orchestration you may have

1192
00:44:13,609 --> 00:44:17,869
an interface into your system that's

1193
00:44:16,339 --> 00:44:19,400
going to worry about launching the VMS

1194
00:44:17,869 --> 00:44:20,809
themselves and figuring out<font color="#E5E5E5"> where</font>

1195
00:44:19,400 --> 00:44:21,800
they're going<font color="#E5E5E5"> to go and then a system</font>

1196
00:44:20,809 --> 00:44:24,020
that's going to worry<font color="#E5E5E5"> about okay now</font>

1197
00:44:21,800 --> 00:44:25,849
what nfm is<font color="#E5E5E5"> I'm actually putting on this</font>

1198
00:44:24,020 --> 00:44:28,550
so even there<font color="#CCCCCC"> that could be split</font><font color="#E5E5E5"> into</font>

1199
00:44:25,849 --> 00:44:30,319
multiple controllers potentially so it's

1200
00:44:28,550 --> 00:44:31,849
sort of at<font color="#E5E5E5"> one point do we end up with</font>

1201
00:44:30,319 --> 00:44:34,819
<font color="#E5E5E5">too many controllers running around the</font>

1202
00:44:31,849 --> 00:44:36,319
network and I expectable we are rapidly

1203
00:44:34,819 --> 00:44:38,119
approaching that<font color="#CCCCCC"> and it's a break</font><font color="#E5E5E5"> a run</font>

1204
00:44:36,319 --> 00:44:39,980
problem but rather the center eyes

1205
00:44:38,119 --> 00:44:41,750
controlled you<font color="#CCCCCC"> do end up</font><font color="#E5E5E5"> with three four</font>

1206
00:44:39,980 --> 00:44:43,309
five centralized control rights can be

1207
00:44:41,750 --> 00:44:45,589
no this<font color="#E5E5E5"> isn't it</font><font color="#CCCCCC"> isn't going</font><font color="#E5E5E5"> to be a</font>

1208
00:44:43,309 --> 00:44:49,510
problem<font color="#E5E5E5"> for us operators to check make a</font>

1209
00:44:45,589 --> 00:44:49,509
decision but it's not<font color="#E5E5E5"> interesting anyway</font>

1210
00:44:49,930 --> 00:44:56,118
there any other<font color="#CCCCCC"> questions for</font><font color="#E5E5E5"> Aaron I</font>

1211
00:44:52,490 --> 00:44:57,589
did<font color="#E5E5E5"> have one</font><font color="#CCCCCC"> um I'm wondering</font><font color="#E5E5E5"> it's it</font>

1212
00:44:56,119 --> 00:44:59,559
trivial to sort of bound the amount of

1213
00:44:57,589 --> 00:45:03,230
buffer space you need in the controller

1214
00:44:59,559 --> 00:45:06,109
or is that so we<font color="#E5E5E5"> do kind</font><font color="#CCCCCC"> of bound the</font>

1215
00:45:03,230 --> 00:45:07,730
number of flows you can migrate to stop

1216
00:45:06,109 --> 00:45:10,430
that yes there's a couple different

1217
00:45:07,730 --> 00:45:12,200
things you can do so in theory it's

1218
00:45:10,430 --> 00:45:14,118
reasonably predictable you know how long

1219
00:45:12,200 --> 00:45:15,379
you know how much on average how big

1220
00:45:14,119 --> 00:45:17,420
state is and we can predict how long

1221
00:45:15,380 --> 00:45:18,770
it's going to take to transfer that but

1222
00:45:17,420 --> 00:45:20,299
you're<font color="#E5E5E5"> right they there's this trade-off</font>

1223
00:45:18,770 --> 00:45:21,890
of the more state you're transferring

1224
00:45:20,299 --> 00:45:23,599
the longer it<font color="#CCCCCC"> takes the more buffering</font>

1225
00:45:21,890 --> 00:45:24,920
you need to do so one way to do<font color="#CCCCCC"> that is</font>

1226
00:45:23,599 --> 00:45:26,960
that you say all<font color="#E5E5E5"> right I'm going to move</font>

1227
00:45:24,920 --> 00:45:28,760
these flows in pieces and i'm<font color="#E5E5E5"> going to</font>

1228
00:45:26,960 --> 00:45:30,530
move<font color="#CCCCCC"> ten flows at a time after i've</font>

1229
00:45:28,760 --> 00:45:32,540
moved<font color="#E5E5E5"> those ten flows then</font><font color="#CCCCCC"> i can</font><font color="#E5E5E5"> move on</font>

1230
00:45:30,530 --> 00:45:34,579
and<font color="#E5E5E5"> move the next time flows the</font>

1231
00:45:32,540 --> 00:45:36,558
challenge you run into there is that now

1232
00:45:34,579 --> 00:45:38,660
that you're breaking flows smaller your

1233
00:45:36,559 --> 00:45:40,240
forwarding entries in your switch need

1234
00:45:38,660 --> 00:45:44,299
to be broken<font color="#CCCCCC"> down that much smaller</font>

1235
00:45:40,240 --> 00:45:46,430
which may be<font color="#CCCCCC"> okay may</font><font color="#E5E5E5"> not be okay but</font>

1236
00:45:44,299 --> 00:45:47,780
yeah buffering is certainly initial

1237
00:45:46,430 --> 00:45:49,368
enjoyed this framework and something we

1238
00:45:47,780 --> 00:45:54,890
still don't have a great answer to how

1239
00:45:49,369 --> 00:45:56,030
to go about reducing<font color="#E5E5E5"> that all right well</font>

1240
00:45:54,890 --> 00:45:57,980
if there<font color="#CCCCCC"> are no more</font><font color="#E5E5E5"> questions than I</font>

1241
00:45:56,030 --> 00:46:00,130
think we're<font color="#CCCCCC"> done so thanks Aaron thank</font>

1242
00:45:57,980 --> 00:46:00,130
you

1243
00:46:01,519 --> 00:46:07,220
can whoever's got<font color="#CCCCCC"> the blue sheets bring</font>

1244
00:46:04,559 --> 00:46:07,220
them up here<font color="#CCCCCC"> please</font>

1245
00:46:16,960 --> 00:46:19,020
you

1246
00:47:02,930 --> 00:47:05,930
sure

1247
00:47:24,480 --> 00:47:26,540
you

1248
00:47:33,329 --> 00:47:35,390
you

