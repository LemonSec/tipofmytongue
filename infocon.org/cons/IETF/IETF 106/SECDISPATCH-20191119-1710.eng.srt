1
00:00:05,640 --> 00:00:17,130
you must have liked that so I've

2
00:00:07,649 --> 00:00:26,249
uninstall spyware Oh they've marked me

3
00:00:17,130 --> 00:00:28,668
as untrusted hey maybe maybe Amy just

4
00:00:26,249 --> 00:00:28,668
doesn't care

5
00:00:32,900 --> 00:00:35,989
[Music]

6
00:01:06,500 --> 00:01:44,310
maybe over here so you can please take

7
00:01:42,630 --> 00:01:48,350
your seats everyone this is sec dispatch

8
00:01:44,310 --> 00:01:48,350
we're in dispatch some stuff securely

9
00:01:49,070 --> 00:01:52,860
you may notice that there's some

10
00:01:51,240 --> 00:01:54,179
different faces on the stage here

11
00:01:52,860 --> 00:01:55,860
Kathleen was unfortunately unable to

12
00:01:54,180 --> 00:01:58,200
make it so Nancy is filling in her place

13
00:01:55,860 --> 00:02:00,149
and we have one brand new co-chair

14
00:01:58,200 --> 00:02:04,289
Francesca pollen beneath can we have a

15
00:02:00,149 --> 00:02:07,799
round of applause for her please all

16
00:02:04,289 --> 00:02:10,199
right so note well is the same as usual

17
00:02:07,799 --> 00:02:12,810
please note it well including your

18
00:02:10,199 --> 00:02:16,200
obligations with regard to a PR and

19
00:02:12,810 --> 00:02:17,970
disclosures as a reminder this is our

20
00:02:16,200 --> 00:02:19,069
process we are not here to adopt

21
00:02:17,970 --> 00:02:20,689
documents if you're not here

22
00:02:19,069 --> 00:02:22,369
even really to develop technologies we

23
00:02:20,689 --> 00:02:25,879
are here to figure out where work goes

24
00:02:22,370 --> 00:02:28,010
so should it be done in an existing

25
00:02:25,879 --> 00:02:29,810
working group dispatched to AV

26
00:02:28,010 --> 00:02:31,159
sponsorship or you know should we not

27
00:02:29,810 --> 00:02:32,959
work on this at all we have this range

28
00:02:31,159 --> 00:02:35,030
of possible outcomes so keep those in

29
00:02:32,959 --> 00:02:36,739
mind our goal for each of the

30
00:02:35,030 --> 00:02:39,500
presentations today is going to be to

31
00:02:36,739 --> 00:02:41,269
come to one of these conclusions so as

32
00:02:39,500 --> 00:02:42,950
you're watching the presentations think

33
00:02:41,269 --> 00:02:45,709
about which of these conclusions might

34
00:02:42,950 --> 00:02:48,230
be appropriate here's our agenda for the

35
00:02:45,709 --> 00:02:50,959
day we're in the first slot right now we

36
00:02:48,230 --> 00:02:53,569
have five topics looking for dispatch we

37
00:02:50,959 --> 00:02:55,700
have a bit of an overflow slot because

38
00:02:53,569 --> 00:02:59,089
we are a little short on time I've been

39
00:02:55,700 --> 00:03:00,379
I think has opted out so we have one

40
00:02:59,090 --> 00:03:03,169
there Brian Campbell who didn't have a

41
00:03:00,379 --> 00:03:04,909
draft so we got put an overflow and is

42
00:03:03,169 --> 00:03:07,159
kind of looking for interest there so

43
00:03:04,909 --> 00:03:32,988
any agenda bashes before we launch into

44
00:03:07,159 --> 00:03:35,840
this agenda all right dr. Paula okay

45
00:03:32,989 --> 00:03:38,870
everybody welcome to sec dispatch I'm

46
00:03:35,840 --> 00:03:41,180
max Farah I work with Kaiba labs and I'm

47
00:03:38,870 --> 00:03:43,669
going to present them about addressing

48
00:03:41,180 --> 00:03:46,459
public key algorithms uncertainties with

49
00:03:43,669 --> 00:03:47,989
composite crypto this work has started a

50
00:03:46,459 --> 00:03:50,720
couple of years ago is in collaboration

51
00:03:47,989 --> 00:03:52,759
with other companies I can trust in

52
00:03:50,720 --> 00:03:57,699
trust other cards Cisco Systems I Zahra

53
00:03:52,759 --> 00:04:00,708
and desert so what is the problem here

54
00:03:57,699 --> 00:04:02,930
well you know with announcement about

55
00:04:00,709 --> 00:04:06,139
quantum computing and lots of investment

56
00:04:02,930 --> 00:04:08,840
in this technology we leaving it here of

57
00:04:06,139 --> 00:04:11,359
uncertainty specifically in cryptography

58
00:04:08,840 --> 00:04:14,209
we suffer a problem where algorithm that

59
00:04:11,359 --> 00:04:16,219
we use today might fall apart right but

60
00:04:14,209 --> 00:04:17,810
this is a very uncertain period we don't

61
00:04:16,219 --> 00:04:19,459
know if that happens and we don't know

62
00:04:17,810 --> 00:04:23,270
if that is for example schemes are

63
00:04:19,459 --> 00:04:25,639
strong enough so possible workaround

64
00:04:23,270 --> 00:04:28,609
would be to use hybrid solutions where

65
00:04:25,639 --> 00:04:30,560
you have multiple algorithms that can be

66
00:04:28,610 --> 00:04:32,930
used together to secure some data like

67
00:04:30,560 --> 00:04:35,240
certificates

68
00:04:32,930 --> 00:04:36,770
some minutes and some initial

69
00:04:35,240 --> 00:04:39,759
experiments for the Poynting some

70
00:04:36,770 --> 00:04:43,330
quantum resistant algorithm have been

71
00:04:39,759 --> 00:04:48,259
published I sent an email before in

72
00:04:43,330 --> 00:04:51,680
dispatch meaning list so just keep in

73
00:04:48,259 --> 00:04:54,410
mind this these results is not for all

74
00:04:51,680 --> 00:04:57,560
the algorithms these are algorithm that

75
00:04:54,410 --> 00:05:00,650
have quantum keys that are relatively

76
00:04:57,560 --> 00:05:03,400
small but still it seems that the

77
00:05:00,650 --> 00:05:09,469
situation might not be dead that tragic

78
00:05:03,400 --> 00:05:11,630
so why we are here well I work in in

79
00:05:09,470 --> 00:05:14,000
cable and we use a lot of certificates

80
00:05:11,630 --> 00:05:16,729
for many different things and it's use

81
00:05:14,000 --> 00:05:18,199
is going to be just increase with the

82
00:05:16,729 --> 00:05:22,550
new platform that we're going to deploy

83
00:05:18,199 --> 00:05:25,039
for a 10 gig and one of the questions

84
00:05:22,550 --> 00:05:27,940
that we're facing today is is it

85
00:05:25,039 --> 00:05:30,169
possible to protect our infrastructure

86
00:05:27,940 --> 00:05:34,870
infrastructure in a transition period

87
00:05:30,169 --> 00:05:38,090
right so what applying what could be

88
00:05:34,870 --> 00:05:39,139
could be said as the further algorithm

89
00:05:38,090 --> 00:05:41,869
agility

90
00:05:39,139 --> 00:05:45,710
so are your peaky eyes going to be

91
00:05:41,870 --> 00:05:47,479
secure in next 20 years or 30 so we have

92
00:05:45,710 --> 00:05:50,690
this problem we have to protect

93
00:05:47,479 --> 00:05:52,580
ourselves in a transition period in with

94
00:05:50,690 --> 00:05:55,159
that's full of uncertainty right

95
00:05:52,580 --> 00:05:58,039
there are cool currently different

96
00:05:55,159 --> 00:06:00,680
solutions for this and we're going to go

97
00:05:58,039 --> 00:06:02,889
through through them these solutions

98
00:06:00,680 --> 00:06:06,349
being discussed on in the ministers and

99
00:06:02,889 --> 00:06:08,449
some consideration are useful to make so

100
00:06:06,349 --> 00:06:11,180
multi-chain so using using multiple

101
00:06:08,449 --> 00:06:13,520
certificates using extensions in

102
00:06:11,180 --> 00:06:17,389
certificates to carry additional keys

103
00:06:13,520 --> 00:06:20,448
and signatures or using composite crypto

104
00:06:17,389 --> 00:06:23,780
the one that we work on with all these

105
00:06:20,449 --> 00:06:26,539
other companies all these are have some

106
00:06:23,780 --> 00:06:28,760
merits and some drawbacks and let's go

107
00:06:26,539 --> 00:06:31,130
through them so using multiple

108
00:06:28,760 --> 00:06:33,590
certificates seems a very easy solution

109
00:06:31,130 --> 00:06:35,949
great for negotiated protocol I can

110
00:06:33,590 --> 00:06:39,619
select which one of the certificates

111
00:06:35,949 --> 00:06:41,419
traditional one or post point one I send

112
00:06:39,620 --> 00:06:43,099
to the client depending on these

113
00:06:41,419 --> 00:06:45,409
capabilities so I don't have to transfer

114
00:06:43,099 --> 00:06:46,128
the keys all the time right and this is

115
00:06:45,409 --> 00:06:48,259
a

116
00:06:46,129 --> 00:06:50,899
problem because these keys are big and

117
00:06:48,259 --> 00:06:54,469
if you put in certificates then for

118
00:06:50,899 --> 00:06:56,479
example for TLS this the the amount of

119
00:06:54,469 --> 00:06:59,089
data in the first flight will require

120
00:06:56,479 --> 00:07:01,789
multiple round trips but in this case

121
00:06:59,089 --> 00:07:04,419
you can design your protocols and the

122
00:07:01,789 --> 00:07:08,659
decide where to transfer these big keys

123
00:07:04,419 --> 00:07:10,099
waste it down they downsize well now you

124
00:07:08,659 --> 00:07:11,360
have multiple certificates so if you

125
00:07:10,099 --> 00:07:13,878
want to protect the same data you have

126
00:07:11,360 --> 00:07:17,479
to change the protocol to allow for

127
00:07:13,879 --> 00:07:19,249
multiple signatures to be used and for

128
00:07:17,479 --> 00:07:21,649
non negotiated protocol might be a

129
00:07:19,249 --> 00:07:24,259
little bit harder you know the example

130
00:07:21,649 --> 00:07:26,809
the user example for as mine where you

131
00:07:24,259 --> 00:07:30,559
don't know if the client supports or not

132
00:07:26,809 --> 00:07:33,080
the new algorithms and however the other

133
00:07:30,559 --> 00:07:35,169
problem would be you know when you have

134
00:07:33,080 --> 00:07:38,419
multiple certificate you apply multiple

135
00:07:35,169 --> 00:07:40,219
to the same data how to link these

136
00:07:38,419 --> 00:07:42,438
identities in multiple certificates

137
00:07:40,219 --> 00:07:45,079
especially if your PC is distributed

138
00:07:42,439 --> 00:07:47,239
might be a problem and definitely

139
00:07:45,079 --> 00:07:51,949
complicates that the operation size of

140
00:07:47,239 --> 00:07:54,828
PK is a second solution I was adopted by

141
00:07:51,949 --> 00:07:57,169
ITU and uses extensions in the

142
00:07:54,829 --> 00:08:01,129
certificate I was also discussed here

143
00:07:57,169 --> 00:08:03,049
names and basically what they do they

144
00:08:01,129 --> 00:08:06,319
use an extension to put additional

145
00:08:03,050 --> 00:08:08,689
public keys and or signatures so that

146
00:08:06,319 --> 00:08:11,179
the certificate is backward compatible

147
00:08:08,689 --> 00:08:12,619
there's no critical tension so it can be

148
00:08:11,179 --> 00:08:16,159
ignored by clients that don't know how

149
00:08:12,619 --> 00:08:18,889
to process it however is very backward

150
00:08:16,159 --> 00:08:20,599
compatible so clients don't even know

151
00:08:18,889 --> 00:08:23,469
that they are missing something so it

152
00:08:20,599 --> 00:08:26,748
could be a false sense of security

153
00:08:23,469 --> 00:08:29,419
requires change to to the protocols to

154
00:08:26,749 --> 00:08:32,209
validate multiple signatures and of

155
00:08:29,419 --> 00:08:35,179
course in this case the problem of

156
00:08:32,208 --> 00:08:37,039
transferring the keys is present because

157
00:08:35,179 --> 00:08:39,500
the large keys are tied to the

158
00:08:37,039 --> 00:08:41,870
traditional ones so you cannot separate

159
00:08:39,500 --> 00:08:43,399
them probably it is something that can

160
00:08:41,870 --> 00:08:47,420
be done there but it would complicate a

161
00:08:43,399 --> 00:08:50,600
lot the schema and so a third solution

162
00:08:47,420 --> 00:08:53,449
is the one that we've been working on in

163
00:08:50,600 --> 00:08:55,069
the past couple of years actually and we

164
00:08:53,449 --> 00:08:57,229
try to leverage the beauty the beauty

165
00:08:55,069 --> 00:08:59,430
mechanism for a greater agility that is

166
00:08:57,230 --> 00:09:02,930
in certificates and all pica-x

167
00:08:59,430 --> 00:09:05,790
data structures and how we do that so we

168
00:09:02,930 --> 00:09:09,000
define a new public key algorithm so a

169
00:09:05,790 --> 00:09:12,449
new ID define the encoding encoding

170
00:09:09,000 --> 00:09:15,420
rules and processing rules so the trick

171
00:09:12,450 --> 00:09:16,950
here is that instead of using a data

172
00:09:15,420 --> 00:09:19,170
strategy the data structure that

173
00:09:16,950 --> 00:09:21,750
contains the generic key and then we say

174
00:09:19,170 --> 00:09:23,910
now this is a sequence of generic data

175
00:09:21,750 --> 00:09:26,760
structures and this case allows you to

176
00:09:23,910 --> 00:09:30,810
extend the use of public keys and

177
00:09:26,760 --> 00:09:33,530
signatures in all the pkx data

178
00:09:30,810 --> 00:09:35,699
structures I said before and and

179
00:09:33,530 --> 00:09:37,860
therefore provides compatibility with

180
00:09:35,700 --> 00:09:39,690
existing certificate processing rule in

181
00:09:37,860 --> 00:09:41,400
the sense that one composite key

182
00:09:39,690 --> 00:09:43,680
generates one composite signature and

183
00:09:41,400 --> 00:09:47,910
this buys well with protocols for

184
00:09:43,680 --> 00:09:51,270
example what are the pros of this

185
00:09:47,910 --> 00:09:52,800
solution well you can drop in any of the

186
00:09:51,270 --> 00:09:55,650
algorithm that I already defined so you

187
00:09:52,800 --> 00:09:58,469
can imagine a composite key using RSA

188
00:09:55,650 --> 00:10:00,230
you see the SI n a post quantum and you

189
00:09:58,470 --> 00:10:02,790
have different classes of devices that

190
00:10:00,230 --> 00:10:06,240
will use the different algorithms they

191
00:10:02,790 --> 00:10:08,699
support for example can be extended to

192
00:10:06,240 --> 00:10:12,320
combine not only just two but three or

193
00:10:08,700 --> 00:10:15,540
four depending on what you use cases and

194
00:10:12,320 --> 00:10:17,550
it's not just related to quantum think

195
00:10:15,540 --> 00:10:19,620
about this as a tool that can be used

196
00:10:17,550 --> 00:10:21,780
anytime you have this type of

197
00:10:19,620 --> 00:10:24,120
uncertainty you don't know if how much

198
00:10:21,780 --> 00:10:25,790
you can rely on the old algorithm you

199
00:10:24,120 --> 00:10:28,950
don't know if the new algorithms are

200
00:10:25,790 --> 00:10:35,160
ready for you so you can try to combine

201
00:10:28,950 --> 00:10:37,890
them and of course by using one

202
00:10:35,160 --> 00:10:40,290
signature one public key setter is

203
00:10:37,890 --> 00:10:42,510
compatible with also revocation

204
00:10:40,290 --> 00:10:44,640
information so you can do OCSP you can

205
00:10:42,510 --> 00:10:46,939
do CR else you don't have to define

206
00:10:44,640 --> 00:10:49,980
anything else

207
00:10:46,940 --> 00:10:51,570
the downside backward compatibility

208
00:10:49,980 --> 00:10:55,050
requires the support of a new algorithm

209
00:10:51,570 --> 00:10:56,370
identifier this is not new we do that

210
00:10:55,050 --> 00:10:59,069
all the time when we deploy a new

211
00:10:56,370 --> 00:11:02,520
algorithm so it actually goes into the

212
00:10:59,070 --> 00:11:05,820
PKI operations very well the downside

213
00:11:02,520 --> 00:11:07,380
here is the large keys are sent every

214
00:11:05,820 --> 00:11:09,750
time because they are part of the

215
00:11:07,380 --> 00:11:11,779
certificate so you cannot really excite

216
00:11:09,750 --> 00:11:15,470
them from there

217
00:11:11,779 --> 00:11:18,230
one note that the ITU just published or

218
00:11:15,470 --> 00:11:22,220
was was published on the meaning is the

219
00:11:18,230 --> 00:11:25,430
X 5x by 10 this that use a similar

220
00:11:22,220 --> 00:11:28,309
approach so we hope that if some work

221
00:11:25,430 --> 00:11:29,899
has been will be adopted we can try to

222
00:11:28,309 --> 00:11:32,449
limit the in competitive

223
00:11:29,899 --> 00:11:35,629
incompatibilities there I hope that we

224
00:11:32,449 --> 00:11:37,729
can do a good job so what's the current

225
00:11:35,629 --> 00:11:40,189
status of the discussion of course

226
00:11:37,730 --> 00:11:43,339
messages have been a same thing with

227
00:11:40,189 --> 00:11:46,339
many different lists dispatch lamps and

228
00:11:43,339 --> 00:11:49,339
pica-x to try to gather some some

229
00:11:46,339 --> 00:11:53,449
feedback of course mix the reaction as

230
00:11:49,339 --> 00:11:56,360
usual so however one of the things that

231
00:11:53,449 --> 00:11:58,878
came out fairly clearly is that this is

232
00:11:56,360 --> 00:12:01,670
a problem that needs to be solved many

233
00:11:58,879 --> 00:12:03,769
people noticed that because of the time

234
00:12:01,670 --> 00:12:06,649
frame that we're looking into the sooner

235
00:12:03,769 --> 00:12:07,550
we start to work on this is better logic

236
00:12:06,649 --> 00:12:09,499
I providers

237
00:12:07,550 --> 00:12:11,149
I work in an industry where we leverage

238
00:12:09,499 --> 00:12:14,629
a lot of certificates in the billions

239
00:12:11,149 --> 00:12:15,290
and other suppose like desert and others

240
00:12:14,629 --> 00:12:16,970
VSPs

241
00:12:15,290 --> 00:12:19,399
they actually want to work on this

242
00:12:16,970 --> 00:12:21,610
because they want to be able to have at

243
00:12:19,399 --> 00:12:25,309
least one solution that they can deploy

244
00:12:21,610 --> 00:12:29,209
other proposal may emerge that that more

245
00:12:25,309 --> 00:12:30,800
towards let's reinvent the wheel I'm not

246
00:12:29,209 --> 00:12:32,719
saying it's not possible it's always

247
00:12:30,800 --> 00:12:35,180
possible I would like to have one

248
00:12:32,720 --> 00:12:38,149
solution that is easy like the one that

249
00:12:35,180 --> 00:12:42,079
we propose right away and then we can

250
00:12:38,149 --> 00:12:45,430
look and how we can optimize ok we can

251
00:12:42,079 --> 00:12:48,019
have more optimized solutions in space

252
00:12:45,430 --> 00:12:51,500
largely we not heard from the sales

253
00:12:48,019 --> 00:12:53,240
community about around this idea mostly

254
00:12:51,500 --> 00:12:55,670
because we didn't engage with the

255
00:12:53,240 --> 00:12:59,329
community but if you guys want to start

256
00:12:55,670 --> 00:13:01,939
engaging and telling us what what you

257
00:12:59,329 --> 00:13:03,709
think of course we are aware of the fact

258
00:13:01,939 --> 00:13:06,829
that the large large key is and the

259
00:13:03,709 --> 00:13:10,489
problem for for performances here

260
00:13:06,829 --> 00:13:12,589
however and this could be one one tool

261
00:13:10,490 --> 00:13:18,220
that doesn't require many changes in

262
00:13:12,589 --> 00:13:20,809
protocols today so I mean ok conclusions

263
00:13:18,220 --> 00:13:24,290
does mean discussion is a problem that

264
00:13:20,809 --> 00:13:25,819
is we should try to solve within that

265
00:13:24,290 --> 00:13:28,520
composite crypto is

266
00:13:25,820 --> 00:13:32,230
a possible tool not the only one but one

267
00:13:28,520 --> 00:13:35,829
simple tool that we can standardize and

268
00:13:32,230 --> 00:13:38,000
we have to two IDs one is for the

269
00:13:35,830 --> 00:13:39,680
problem statement and overview of the

270
00:13:38,000 --> 00:13:43,760
solution space and the other is the

271
00:13:39,680 --> 00:13:46,400
solution that we try to propose question

272
00:13:43,760 --> 00:13:48,080
yeah well I question

273
00:13:46,400 --> 00:13:52,280
are we in the discussion phase now

274
00:13:48,080 --> 00:13:54,950
Richard so I can't speak for other

275
00:13:52,280 --> 00:13:56,630
applications but it's a little hard to

276
00:13:54,950 --> 00:14:00,230
understand how this brings a lot of

277
00:13:56,630 --> 00:14:03,880
value to at least like the web PGI story

278
00:14:00,230 --> 00:14:06,200
and the reason for that is that on

279
00:14:03,880 --> 00:14:09,710
basically we have two choices

280
00:14:06,200 --> 00:14:11,690
so somet right right imagine you have

281
00:14:09,710 --> 00:14:13,330
like a situation where we are now we

282
00:14:11,690 --> 00:14:16,040
know there's not a valid upon a computer

283
00:14:13,330 --> 00:14:17,510
and then someday that we evolve a common

284
00:14:16,040 --> 00:14:20,480
computer perhaps and we're trying to get

285
00:14:17,510 --> 00:14:24,650
past that transition point and so on now

286
00:14:20,480 --> 00:14:27,050
we can either accept like non

287
00:14:24,650 --> 00:14:29,090
compositing signatures or we cannot that

288
00:14:27,050 --> 00:14:31,670
is that standard or assisted insurers

289
00:14:29,090 --> 00:14:34,880
and easy signatures or we cannot if we

290
00:14:31,670 --> 00:14:36,620
if we do then the vast majority of

291
00:14:34,880 --> 00:14:38,510
servers in the world will only have

292
00:14:36,620 --> 00:14:40,270
those signatures and when there's a

293
00:14:38,510 --> 00:14:42,260
chronic computer what we squirt

294
00:14:40,270 --> 00:14:43,760
conversely if we don't then we're

295
00:14:42,260 --> 00:14:45,740
basically forcing everybody in the world

296
00:14:43,760 --> 00:14:48,980
to get Capas integers which doesn't seem

297
00:14:45,740 --> 00:14:50,210
super likely and so as a contract achill

298
00:14:48,980 --> 00:14:53,090
matter I don't see how to like use this

299
00:14:50,210 --> 00:14:55,970
in like a web PKI environment um so it's

300
00:14:53,090 --> 00:14:57,320
like not like I'm tal I said like

301
00:14:55,970 --> 00:14:58,880
telecine used everywhere so like that

302
00:14:57,320 --> 00:14:59,960
I'm sort of some cos environments was

303
00:14:58,880 --> 00:15:03,130
useful but it's like hard understand

304
00:14:59,960 --> 00:15:03,130
like in the web environment this works

305
00:15:03,520 --> 00:15:08,420
there's been some experimentation in the

306
00:15:05,930 --> 00:15:10,520
TLS web context with hybrid key

307
00:15:08,420 --> 00:15:11,569
exchanges could you maybe and make sure

308
00:15:10,520 --> 00:15:12,920
you Benjamin has some things to say

309
00:15:11,570 --> 00:15:14,300
about this as well yeah concern that

310
00:15:12,920 --> 00:15:15,530
situation would be helpful right so as

311
00:15:14,300 --> 00:15:17,359
you say jealous husband working at

312
00:15:15,530 --> 00:15:19,160
hybrid key exchanges on the avange the

313
00:15:17,360 --> 00:15:21,560
hyper key exchange right is that it's is

314
00:15:19,160 --> 00:15:23,360
it it doesn't require the client

315
00:15:21,560 --> 00:15:26,390
enforcing anything it's just like mutual

316
00:15:23,360 --> 00:15:27,860
negotiation and it is that its defense

317
00:15:26,390 --> 00:15:31,730
now against quantum computers in the

318
00:15:27,860 --> 00:15:33,290
future um but like like the general my

319
00:15:31,730 --> 00:15:36,320
general concern about about anything

320
00:15:33,290 --> 00:15:38,420
along these lines is is that in order

321
00:15:36,320 --> 00:15:39,680
for it to work properly in like

322
00:15:38,420 --> 00:15:41,389
real-time environments

323
00:15:39,680 --> 00:15:43,579
you have to actually enforce it's a

324
00:15:41,389 --> 00:15:45,079
requirement that post constants are all

325
00:15:43,579 --> 00:15:48,019
time so the whole thing falls apart and

326
00:15:45,079 --> 00:15:51,109
so like I don't see anybody doing that

327
00:15:48,019 --> 00:15:52,730
like I'm in the mass environments now in

328
00:15:51,110 --> 00:15:54,110
non real-time environments like not

329
00:15:52,730 --> 00:15:56,360
saying it's not reasonable put it like a

330
00:15:54,110 --> 00:15:58,610
real high environments like a well I

331
00:15:56,360 --> 00:16:02,050
respectfully disagree with you I think

332
00:15:58,610 --> 00:16:05,119
that this solution is very important for

333
00:16:02,050 --> 00:16:07,878
specifically protecting keys that may be

334
00:16:05,119 --> 00:16:10,550
pulled remove to factorization so not

335
00:16:07,879 --> 00:16:13,519
not so much the server sides but you

336
00:16:10,550 --> 00:16:17,329
think about CAS route the route CAS that

337
00:16:13,519 --> 00:16:20,660
we need to protect so by by using this

338
00:16:17,329 --> 00:16:22,758
this approach usually you can be

339
00:16:20,660 --> 00:16:26,089
verifying this type of algorithm is a

340
00:16:22,759 --> 00:16:28,160
lot easier than signing so with software

341
00:16:26,089 --> 00:16:30,829
updates you can actually verify and

342
00:16:28,160 --> 00:16:33,889
protect the chain I don't think there's

343
00:16:30,829 --> 00:16:35,540
gonna be that much of impact or you

344
00:16:33,889 --> 00:16:38,540
could think about solution where you

345
00:16:35,540 --> 00:16:41,269
deploy CAS level type of multi algorithm

346
00:16:38,540 --> 00:16:42,618
and and entity just using the the crypto

347
00:16:41,269 --> 00:16:44,929
that you want to use at that time

348
00:16:42,619 --> 00:16:47,839
because at that point you can is easy to

349
00:16:44,929 --> 00:16:50,389
revoke one CA and whenever the the

350
00:16:47,839 --> 00:16:52,639
algorithms aren't gonna be broken and

351
00:16:50,389 --> 00:16:54,620
you know that you can actually if you

352
00:16:52,639 --> 00:16:56,059
want to revoke a CA and then spin up

353
00:16:54,620 --> 00:16:59,720
anyone I think I misunderstood my

354
00:16:56,059 --> 00:17:03,189
ecosystem point which is yeah which is

355
00:16:59,720 --> 00:17:05,959
that either the browser accepts

356
00:17:03,189 --> 00:17:11,779
classical only injured or does not and

357
00:17:05,959 --> 00:17:13,850
if either yes supports a new I'm seeing

358
00:17:11,779 --> 00:17:15,859
it signing algorithm or not no no it's

359
00:17:13,849 --> 00:17:17,990
the same situation that we have if you

360
00:17:15,859 --> 00:17:22,369
support RSA or you know no it's not

361
00:17:17,990 --> 00:17:23,990
because sitting here is that someday in

362
00:17:22,369 --> 00:17:26,119
the future all classical algorithms are

363
00:17:23,990 --> 00:17:27,529
broken and now I cannot trust any

364
00:17:26,119 --> 00:17:30,350
signature make a nice neutral a the

365
00:17:27,529 --> 00:17:32,419
classical algorithm and so now the date

366
00:17:30,350 --> 00:17:33,678
so like if you want me to flip that

367
00:17:32,419 --> 00:17:35,210
switch or you want me to turn off all

368
00:17:33,679 --> 00:17:37,039
class of algorithms and I haven't

369
00:17:35,210 --> 00:17:39,140
already preceded the environment with

370
00:17:37,039 --> 00:17:40,970
everybody having non class of integers

371
00:17:39,140 --> 00:17:42,169
and I just destroyed the web which is

372
00:17:40,970 --> 00:17:44,990
exactly what happened we try to search

373
00:17:42,169 --> 00:17:46,580
over Mashal one - ah - and so and so so

374
00:17:44,990 --> 00:17:48,350
in order to actually make this work or

375
00:17:46,580 --> 00:17:50,029
we have to do is we have to go forward

376
00:17:48,350 --> 00:17:51,709
by requiring everybody to have post

377
00:17:50,029 --> 00:17:52,400
quantum signatures on every certificate

378
00:17:51,710 --> 00:17:55,130
or

379
00:17:52,400 --> 00:17:56,900
and then only once that is done then are

380
00:17:55,130 --> 00:17:59,179
we like well we're gonna stop trusting

381
00:17:56,900 --> 00:18:01,070
classical always integers and so I don't

382
00:17:59,179 --> 00:18:02,480
see like I don't see us doing that I

383
00:18:01,070 --> 00:18:03,740
don't see in the be ours requiring that

384
00:18:02,480 --> 00:18:05,659
and therefore like I'm saying back

385
00:18:03,740 --> 00:18:08,120
partners right so I think the point is

386
00:18:05,659 --> 00:18:10,730
taken the in real time situations like

387
00:18:08,120 --> 00:18:12,709
the web this is there are challenges

388
00:18:10,730 --> 00:18:14,539
that might so this might be more

389
00:18:12,710 --> 00:18:16,250
suitable to things like software update

390
00:18:14,539 --> 00:18:17,179
or yes absolutely yeah I'm just

391
00:18:16,250 --> 00:18:18,980
understanding answer the question that

392
00:18:17,179 --> 00:18:20,960
tell us I think that for software update

393
00:18:18,980 --> 00:18:21,650
clutch applications like this this kind

394
00:18:20,960 --> 00:18:23,570
of thing make sense

395
00:18:21,650 --> 00:18:25,880
um although I do wonder in those cases

396
00:18:23,570 --> 00:18:27,830
why bother with hybrid why not just use

397
00:18:25,880 --> 00:18:29,899
basically why not use hashing interest

398
00:18:27,830 --> 00:18:33,080
which you all grier find you so we have

399
00:18:29,899 --> 00:18:37,610
two minutes left line is closed after

400
00:18:33,080 --> 00:18:41,000
deke after Sean so please be brief David

401
00:18:37,610 --> 00:18:42,229
Benjamin so similar to the like also on

402
00:18:41,000 --> 00:18:45,289
the telus side of things when we were

403
00:18:42,230 --> 00:18:46,940
doing the the there was some talk of the

404
00:18:45,289 --> 00:18:48,020
hybrid key exchange stuff and I think

405
00:18:46,940 --> 00:18:49,610
one of the things that came up was how

406
00:18:48,020 --> 00:18:51,889
to do the encoding do you add this like

407
00:18:49,610 --> 00:18:54,049
generic Combinator thing or you just

408
00:18:51,890 --> 00:18:56,779
allocate code points for some pairs and

409
00:18:54,049 --> 00:18:58,639
move on with life and the preference I

410
00:18:56,779 --> 00:19:00,380
well my preference at least was

411
00:18:58,640 --> 00:19:02,210
overwhelmingly for it just allocate some

412
00:19:00,380 --> 00:19:03,440
code points for pairs or triples or

413
00:19:02,210 --> 00:19:05,990
whatever you want and move on with life

414
00:19:03,440 --> 00:19:07,789
and I think this is in the wrong

415
00:19:05,990 --> 00:19:09,799
direction here where if you want to do a

416
00:19:07,789 --> 00:19:11,750
hybrid thing building these combinators

417
00:19:09,799 --> 00:19:13,309
and saying oh if you have subsets and

418
00:19:11,750 --> 00:19:14,750
it's okay and all this stuff just adds

419
00:19:13,309 --> 00:19:17,299
like a whole lot of complexity which

420
00:19:14,750 --> 00:19:19,039
bleeds throughout the entire system we

421
00:19:17,299 --> 00:19:20,629
went through a lot of trouble until s13

422
00:19:19,039 --> 00:19:23,360
to simplify the signature algorithm

423
00:19:20,630 --> 00:19:25,370
negotiation and it's not clear to me

424
00:19:23,360 --> 00:19:27,918
this generality actually gives you any

425
00:19:25,370 --> 00:19:29,629
it does anything useful for you because

426
00:19:27,919 --> 00:19:34,370
at the end of the day if you're if

427
00:19:29,630 --> 00:19:36,049
you're trying to if you if your goal is

428
00:19:34,370 --> 00:19:38,178
to do something where like a client that

429
00:19:36,049 --> 00:19:40,250
doesn't understand C can still accept an

430
00:19:38,179 --> 00:19:42,559
ABC like only understands a and B will

431
00:19:40,250 --> 00:19:44,330
still accept an ABC signature like it's

432
00:19:42,559 --> 00:19:46,668
going to go up to some trust anchor and

433
00:19:44,330 --> 00:19:48,918
if that if the clients like either the

434
00:19:46,669 --> 00:19:51,260
client if the client has an ABC root in

435
00:19:48,919 --> 00:19:53,899
its trust anchor set if the I could but

436
00:19:51,260 --> 00:19:56,779
if the client trusts an ABC trust anchor

437
00:19:53,899 --> 00:20:01,030
like presumably it knows what C is so

438
00:19:56,779 --> 00:20:03,559
that scenario seems kind of bizarre and

439
00:20:01,030 --> 00:20:05,120
the cost of all of this stuff is that we

440
00:20:03,559 --> 00:20:06,050
need to like be able to express the

441
00:20:05,120 --> 00:20:09,949
Combinator isn't

442
00:20:06,050 --> 00:20:11,570
like the the verifiers need this like

443
00:20:09,950 --> 00:20:13,310
complicated matching thing as you know

444
00:20:11,570 --> 00:20:14,450
in the slides we have to move the policy

445
00:20:13,310 --> 00:20:16,280
into the crypto libraries which is

446
00:20:14,450 --> 00:20:17,570
actually the wrong direction because the

447
00:20:16,280 --> 00:20:18,980
crypto libraries are fairly low-level

448
00:20:17,570 --> 00:20:23,200
and don't really know what's being used

449
00:20:18,980 --> 00:20:26,330
like I don't see the benefit of this

450
00:20:23,200 --> 00:20:28,600
read carefully the draft I think that it

451
00:20:26,330 --> 00:20:30,860
will answer most of your questions

452
00:20:28,600 --> 00:20:33,139
pushing in the crypto library actually I

453
00:20:30,860 --> 00:20:36,439
think is a very good idea in a sense

454
00:20:33,140 --> 00:20:38,720
that operationally wise for PK eyes

455
00:20:36,440 --> 00:20:41,180
you're talking about TLS but we I'm

456
00:20:38,720 --> 00:20:43,220
correcting my PKI I need to protect my

457
00:20:41,180 --> 00:20:45,740
clients and I need to protect my

458
00:20:43,220 --> 00:20:47,600
infrastructure so my consideration for

459
00:20:45,740 --> 00:20:49,610
now is I need to protect against

460
00:20:47,600 --> 00:20:52,070
factorization all this consideration for

461
00:20:49,610 --> 00:20:55,159
TLS they are very important and they

462
00:20:52,070 --> 00:20:56,840
have their place I think that there

463
00:20:55,160 --> 00:20:58,670
might be some other solution that we can

464
00:20:56,840 --> 00:21:01,370
come up with that are optimized for

465
00:20:58,670 --> 00:21:03,350
these use cases like for TLS for example

466
00:21:01,370 --> 00:21:06,860
specific algorithms like some

467
00:21:03,350 --> 00:21:09,649
experiments I'd try to do I think we

468
00:21:06,860 --> 00:21:12,530
should have a generic solution doesn't

469
00:21:09,650 --> 00:21:16,160
complicate the operation of actually for

470
00:21:12,530 --> 00:21:18,440
application layer is easier compared to

471
00:21:16,160 --> 00:21:22,460
multiple certificates or multiple keys

472
00:21:18,440 --> 00:21:26,480
as I show before protocols don't need to

473
00:21:22,460 --> 00:21:28,940
be changed this could be a tool that you

474
00:21:26,480 --> 00:21:31,100
can deploy whenever other tools are not

475
00:21:28,940 --> 00:21:33,560
available or don't fit your use case

476
00:21:31,100 --> 00:21:35,959
because it's very generic so you can

477
00:21:33,560 --> 00:21:38,210
deploy it easily other optimized

478
00:21:35,960 --> 00:21:41,780
solution that would address the problem

479
00:21:38,210 --> 00:21:44,180
that you that you mentioned for TLS of

480
00:21:41,780 --> 00:21:47,000
course it's possible and it's part of

481
00:21:44,180 --> 00:21:50,410
the proposal here let's try to work on a

482
00:21:47,000 --> 00:21:53,570
solution composite crypto could be one

483
00:21:50,410 --> 00:21:55,610
others can be come out from above for

484
00:21:53,570 --> 00:21:57,439
example or for a workgroup or other

485
00:21:55,610 --> 00:21:59,929
things but it's a problem that we need

486
00:21:57,440 --> 00:22:02,810
to address okay I'm gonna cut it right

487
00:21:59,930 --> 00:22:05,900
here because we're more than close to

488
00:22:02,810 --> 00:22:09,020
three minutes over so I think this work

489
00:22:05,900 --> 00:22:10,850
seems to be more appropriate to lamps so

490
00:22:09,020 --> 00:22:13,600
max I suggest you keep this lamp

491
00:22:10,850 --> 00:22:13,600
senseless here

492
00:22:16,390 --> 00:22:22,390
and if you sent light back the lamps

493
00:22:18,220 --> 00:22:23,980
with back legs okay yeah I think we've

494
00:22:22,390 --> 00:22:26,230
gone through this with some other stuff

495
00:22:23,980 --> 00:22:27,760
in the past where lamps wasn't sure if

496
00:22:26,230 --> 00:22:29,409
other folks if there was a broader

497
00:22:27,760 --> 00:22:32,260
applicability and they've bumped it up

498
00:22:29,409 --> 00:22:33,669
this Petrus I don't seem scoped to that

499
00:22:32,260 --> 00:22:35,620
and I think that the conclusion we have

500
00:22:33,669 --> 00:22:37,480
here based on the comments from the

501
00:22:35,620 --> 00:22:40,418
floor is that this doesn't it's not

502
00:22:37,480 --> 00:22:43,149
really appropriate to you know broader

503
00:22:40,419 --> 00:22:44,919
situations like TLS I'm so Supriya to

504
00:22:43,149 --> 00:22:48,428
consider in that narrow scope does that

505
00:22:44,919 --> 00:22:49,690
seem like generally okay two people will

506
00:22:48,429 --> 00:22:51,190
confirm this I'll tell you what let's

507
00:22:49,690 --> 00:22:55,360
not have further discussion we will

508
00:22:51,190 --> 00:22:56,710
confirm this on the list the draft

509
00:22:55,360 --> 00:23:00,039
resolution to be confirmed on the list

510
00:22:56,710 --> 00:23:13,059
is to dispatch this two lamps thank you

511
00:23:00,039 --> 00:23:16,539
well max you're the next presenter okay

512
00:23:13,059 --> 00:23:18,760
I'm max steel with CableLabs so this is

513
00:23:16,539 --> 00:23:20,200
another another presentation about the

514
00:23:18,760 --> 00:23:24,580
cost of relocation information delivery

515
00:23:20,200 --> 00:23:28,299
for public infrastructure where do we

516
00:23:24,580 --> 00:23:30,220
where do we come from so one important

517
00:23:28,299 --> 00:23:31,720
step in my reading certificates is check

518
00:23:30,220 --> 00:23:33,940
for the availability of replication

519
00:23:31,720 --> 00:23:35,769
information so if there's compromised or

520
00:23:33,940 --> 00:23:41,279
something that you shouldn't trust and

521
00:23:35,769 --> 00:23:43,659
it simply period now the deployment of

522
00:23:41,279 --> 00:23:47,039
infrastructure comes with some prices

523
00:23:43,659 --> 00:23:50,710
attached to it mostly because OCSP

524
00:23:47,039 --> 00:23:52,690
doesn't scale for very large PK eyes and

525
00:23:50,710 --> 00:23:56,409
costs are directly proportional to the

526
00:23:52,690 --> 00:23:57,970
size of the certificate population and

527
00:23:56,409 --> 00:24:00,100
you know we worked in the past with

528
00:23:57,970 --> 00:24:02,019
different techniques to try to optimize

529
00:24:00,100 --> 00:24:04,049
the deployment of a CSP responder

530
00:24:02,019 --> 00:24:06,340
especially for high frequency

531
00:24:04,049 --> 00:24:09,610
environments where we pre computed

532
00:24:06,340 --> 00:24:12,189
responses and we deploy and deliver

533
00:24:09,610 --> 00:24:14,709
their responses with through CD ends and

534
00:24:12,190 --> 00:24:18,010
I want to write three considerations

535
00:24:14,710 --> 00:24:21,039
that that sparked this this work and the

536
00:24:18,010 --> 00:24:22,570
first one is the larger the PK I said

537
00:24:21,039 --> 00:24:24,490
before large apki they higher the cost

538
00:24:22,570 --> 00:24:27,668
of providing good difficulty for section

539
00:24:24,490 --> 00:24:30,340
is in general at best practices today we

540
00:24:27,669 --> 00:24:37,480
preside a once posed for assertive

541
00:24:30,340 --> 00:24:39,760
that is in period and in particular what

542
00:24:37,480 --> 00:24:41,770
we notice is that what we sign over and

543
00:24:39,760 --> 00:24:43,660
over again is here there's no

544
00:24:41,770 --> 00:24:45,730
replication information the only

545
00:24:43,660 --> 00:24:48,520
difference is the serial number but it's

546
00:24:45,730 --> 00:24:50,740
the same type of signature and think

547
00:24:48,520 --> 00:24:52,720
about the situation for CSP large CSP is

548
00:24:50,740 --> 00:24:55,470
where they manage hundreds of thousands

549
00:24:52,720 --> 00:24:58,630
of different CAS each of which can have

550
00:24:55,470 --> 00:25:01,600
millions of certificates especially when

551
00:24:58,630 --> 00:25:05,860
we when we think about one of the last

552
00:25:01,600 --> 00:25:08,709
consideration can we do something to

553
00:25:05,860 --> 00:25:10,629
optimize for the most common case where

554
00:25:08,710 --> 00:25:12,070
the certificate is valid so there's no

555
00:25:10,630 --> 00:25:14,710
additional information that we actually

556
00:25:12,070 --> 00:25:18,010
want to provide the second consideration

557
00:25:14,710 --> 00:25:20,110
is about when you ask the status of

558
00:25:18,010 --> 00:25:21,970
certificate usually what you really want

559
00:25:20,110 --> 00:25:24,570
to know is this certificate they all

560
00:25:21,970 --> 00:25:28,090
chain is valid to something that I trust

561
00:25:24,570 --> 00:25:29,950
can we limit the number of needed round

562
00:25:28,090 --> 00:25:32,199
trips so some discussion went on the

563
00:25:29,950 --> 00:25:34,060
meaningless about this and you know some

564
00:25:32,200 --> 00:25:37,690
people pointed out that the OCSP since

565
00:25:34,060 --> 00:25:40,240
the 2560 allows the responder to attach

566
00:25:37,690 --> 00:25:42,730
multiple responses even if the client

567
00:25:40,240 --> 00:25:47,980
doesn't ask for multiple for multiple

568
00:25:42,730 --> 00:25:51,730
requests but this is never been used to

569
00:25:47,980 --> 00:25:55,960
convey and this the full saddle of the

570
00:25:51,730 --> 00:25:58,060
chain because of I think some some trust

571
00:25:55,960 --> 00:26:00,070
issues that we're going to to look into

572
00:25:58,060 --> 00:26:01,840
a little later but one of the point that

573
00:26:00,070 --> 00:26:04,030
I've tried to make is that maybe we can

574
00:26:01,840 --> 00:26:06,669
do something to provide the full chain

575
00:26:04,030 --> 00:26:08,260
information to the client in such a way

576
00:26:06,670 --> 00:26:11,320
that the client can really trust that

577
00:26:08,260 --> 00:26:14,410
information this the third and last

578
00:26:11,320 --> 00:26:16,570
consideration is that in the AEF we

579
00:26:14,410 --> 00:26:20,290
focus on you know the internet PGI where

580
00:26:16,570 --> 00:26:22,120
the trust model uses mostly certificate

581
00:26:20,290 --> 00:26:25,120
on server side and other techniques to

582
00:26:22,120 --> 00:26:28,169
authenticate the client side but you

583
00:26:25,120 --> 00:26:30,850
know recently we've seen the born of new

584
00:26:28,170 --> 00:26:32,830
environments for example IOT is but

585
00:26:30,850 --> 00:26:37,510
industrial and the industry that I work

586
00:26:32,830 --> 00:26:40,620
with cable where we have huge big eyes

587
00:26:37,510 --> 00:26:42,420
or PK eyes tend to grow in size

588
00:26:40,620 --> 00:26:44,639
and in this in this environment sky

589
00:26:42,420 --> 00:26:46,760
insider vocation is even more costly and

590
00:26:44,640 --> 00:26:50,580
can drive up the cost of certificates

591
00:26:46,760 --> 00:26:51,780
now what how do we address the

592
00:26:50,580 --> 00:26:56,790
distribution of location information

593
00:26:51,780 --> 00:26:58,800
today mostly through CR ELLs or OCSP and

594
00:26:56,790 --> 00:27:00,980
other proprietary metals but I'm not

595
00:26:58,800 --> 00:27:04,860
going through that because this would be

596
00:27:00,980 --> 00:27:06,960
infinite so how do we do with CR else

597
00:27:04,860 --> 00:27:09,840
well er else is a list of authenticated

598
00:27:06,960 --> 00:27:13,200
and serial numbers that's signed by the

599
00:27:09,840 --> 00:27:15,480
CA or delegated a CA and says that these

600
00:27:13,200 --> 00:27:16,740
certificates should not be trusted

601
00:27:15,480 --> 00:27:19,320
anymore for different reasons and

602
00:27:16,740 --> 00:27:20,910
there's a sentience for that the program

603
00:27:19,320 --> 00:27:23,730
is CR else and this is why we actually

604
00:27:20,910 --> 00:27:26,550
shift mostly towards P is that the size

605
00:27:23,730 --> 00:27:30,270
of the CRL is fairly unpredictable tend

606
00:27:26,550 --> 00:27:32,490
to grow beyond acceptable sizes and you

607
00:27:30,270 --> 00:27:35,160
know it grows with replication event and

608
00:27:32,490 --> 00:27:37,920
shrinks with exploration events so it's

609
00:27:35,160 --> 00:27:40,530
very unpredictable it was not it on the

610
00:27:37,920 --> 00:27:43,710
main list that we can use the issuer

611
00:27:40,530 --> 00:27:46,860
distribution point to to bound the worst

612
00:27:43,710 --> 00:27:51,000
case scenario however this is a study

613
00:27:46,860 --> 00:27:53,580
partition as we noticed so maybe you

614
00:27:51,000 --> 00:27:59,550
know some approach to ranges could fix

615
00:27:53,580 --> 00:28:02,189
this problem so others be responses we

616
00:27:59,550 --> 00:28:05,309
have to calculate every single SSP

617
00:28:02,190 --> 00:28:07,530
response there's a problem in conveying

618
00:28:05,309 --> 00:28:10,260
the full chain here because you know CSP

619
00:28:07,530 --> 00:28:13,530
response today could be signed by the CA

620
00:28:10,260 --> 00:28:14,550
and if you try to say that CA says this

621
00:28:13,530 --> 00:28:16,830
certificate is not revoked

622
00:28:14,550 --> 00:28:18,510
I'm not revoke and my parentsí is not

623
00:28:16,830 --> 00:28:21,830
revoke probably is not the great trust

624
00:28:18,510 --> 00:28:25,559
model but we could potentially attach

625
00:28:21,830 --> 00:28:27,600
SSP responses signed by by a responder

626
00:28:25,559 --> 00:28:31,350
wrapped in the chain and so limiting the

627
00:28:27,600 --> 00:28:34,020
round trips just to give you an example

628
00:28:31,350 --> 00:28:37,649
of the proposal the proposal here is to

629
00:28:34,020 --> 00:28:39,720
do range queries in in a PTI this is a

630
00:28:37,650 --> 00:28:42,000
extreme example by an API that you have

631
00:28:39,720 --> 00:28:44,910
11.5 million certificates and only

632
00:28:42,000 --> 00:28:47,250
3-year vacations you know with doing

633
00:28:44,910 --> 00:28:51,630
range queries you have to sign the three

634
00:28:47,250 --> 00:28:54,300
different certification plus they

635
00:28:51,630 --> 00:28:57,120
intermediate between them so with two

636
00:28:54,300 --> 00:29:01,169
x+ 1 signatures you can provide the same

637
00:28:57,120 --> 00:29:02,879
information then instead of signing 11.5

638
00:29:01,170 --> 00:29:06,260
million certificates it's an extremely

639
00:29:02,880 --> 00:29:06,260
simple but this is the type of

640
00:29:07,220 --> 00:29:13,710
optimization that we're looking for so a

641
00:29:11,100 --> 00:29:15,899
discussion on the list there's been

642
00:29:13,710 --> 00:29:19,560
agreement that we have these limitations

643
00:29:15,900 --> 00:29:23,880
today there's no really way to go around

644
00:29:19,560 --> 00:29:25,830
that we have a mixed approach to do the

645
00:29:23,880 --> 00:29:28,260
propose right not not everybody agrees

646
00:29:25,830 --> 00:29:30,030
on the proposals and this is perfectly

647
00:29:28,260 --> 00:29:32,400
fine we're looking to spark the

648
00:29:30,030 --> 00:29:37,770
discussion and maybe to see if there's

649
00:29:32,400 --> 00:29:40,230
some work a bit can be done there - -

650
00:29:37,770 --> 00:29:43,320
less comments some requests for some

651
00:29:40,230 --> 00:29:45,960
figures how can we save in costs right

652
00:29:43,320 --> 00:29:47,820
probably the real dollar costs will be

653
00:29:45,960 --> 00:29:49,680
difficult to provide because this is

654
00:29:47,820 --> 00:29:52,679
usually secret sauce but we can provide

655
00:29:49,680 --> 00:29:54,630
the ratio of revolt against population

656
00:29:52,680 --> 00:29:59,130
because this this solution actually

657
00:29:54,630 --> 00:30:00,870
changing changes one property they the

658
00:29:59,130 --> 00:30:03,210
costs are not related to the Pope active

659
00:30:00,870 --> 00:30:07,290
population in this case but I related to

660
00:30:03,210 --> 00:30:09,540
the revoked entries in the population so

661
00:30:07,290 --> 00:30:12,840
far we received very strong feedback

662
00:30:09,540 --> 00:30:15,030
from major csps did you cert and

663
00:30:12,840 --> 00:30:17,000
committed to say well we really like we

664
00:30:15,030 --> 00:30:20,460
really think that we should work on this

665
00:30:17,000 --> 00:30:22,770
we like the idea but and we will deploy

666
00:30:20,460 --> 00:30:25,820
the area in our industry as well we

667
00:30:22,770 --> 00:30:28,440
really need to find a practical solution

668
00:30:25,820 --> 00:30:30,899
okay so the kickoff discussion here and

669
00:30:28,440 --> 00:30:31,650
again keep this focused on this dispatch

670
00:30:30,900 --> 00:30:33,420
outcomes

671
00:30:31,650 --> 00:30:35,880
I think the chairs would propose that

672
00:30:33,420 --> 00:30:37,200
this piece of work looks about like this

673
00:30:35,880 --> 00:30:38,670
the right size for something like a

674
00:30:37,200 --> 00:30:40,740
small focused working group that seems

675
00:30:38,670 --> 00:30:42,480
not not like something that fits as an

676
00:30:40,740 --> 00:30:44,550
existing working group and probably too

677
00:30:42,480 --> 00:30:46,890
big to be something ad sponsored um so

678
00:30:44,550 --> 00:30:49,830
that's that's our initial proposal with

679
00:30:46,890 --> 00:30:50,880
that please discuss sure it's a little

680
00:30:49,830 --> 00:30:53,520
part of the discussion metric any

681
00:30:50,880 --> 00:30:54,780
protocol engineering because like it

682
00:30:53,520 --> 00:30:56,070
seems that is really obvious solution

683
00:30:54,780 --> 00:30:57,990
this problem doesn't require much

684
00:30:56,070 --> 00:31:01,980
protocol engineering which is do merkel

685
00:30:57,990 --> 00:31:03,480
signatures myrtle trees and then you

686
00:31:01,980 --> 00:31:05,070
would like have you basically no one's

687
00:31:03,480 --> 00:31:06,600
integer and then solution and then and

688
00:31:05,070 --> 00:31:07,480
all you need ISM is that way to panel

689
00:31:06,600 --> 00:31:10,320
that so

690
00:31:07,480 --> 00:31:15,610
I'm not gonna need working group um um

691
00:31:10,320 --> 00:31:16,720
but um so I guess III liked it I liked

692
00:31:15,610 --> 00:31:18,010
the season where evidence is actually

693
00:31:16,720 --> 00:31:21,269
for her problem before like spam for

694
00:31:18,010 --> 00:31:23,710
working before it well yeah yeah just

695
00:31:21,269 --> 00:31:25,269
queue up the rest of the folks you might

696
00:31:23,710 --> 00:31:27,490
comments on this the important question

697
00:31:25,269 --> 00:31:29,470
here is is there work to do and if so is

698
00:31:27,490 --> 00:31:31,240
it right I guess I get right so I think

699
00:31:29,470 --> 00:31:32,230
before I would sign on for the work to

700
00:31:31,240 --> 00:31:33,549
do I get to see some evidence that

701
00:31:32,230 --> 00:31:35,019
actually was a computational cost this

702
00:31:33,549 --> 00:31:37,658
seems like actually a pretty low cost

703
00:31:35,019 --> 00:31:38,740
based on I knew how CAS operate so I'm a

704
00:31:37,659 --> 00:31:41,340
little surprised that this is considered

705
00:31:38,740 --> 00:31:41,340
to be a big deal

706
00:31:45,330 --> 00:31:53,019
filmmaker I this is I support this work

707
00:31:49,690 --> 00:31:57,070
and I actually proposed this exact

708
00:31:53,019 --> 00:32:00,580
solution in 98 when we had the issuing

709
00:31:57,070 --> 00:32:06,039
patent distribution point patent dispute

710
00:32:00,580 --> 00:32:09,100
issue to respond to worker yes lambda

711
00:32:06,039 --> 00:32:10,350
the Macaulay revocation trees or coastal

712
00:32:09,100 --> 00:32:15,908
revocation trees

713
00:32:10,350 --> 00:32:18,969
another approach I'm not sure I think

714
00:32:15,909 --> 00:32:19,960
we'd have to consider which one but the

715
00:32:18,970 --> 00:32:22,299
other thing that you might want to

716
00:32:19,960 --> 00:32:26,799
consider is the work that I did with Rob

717
00:32:22,299 --> 00:32:30,460
straddling which was on crl compression

718
00:32:26,799 --> 00:32:33,429
you can actually compress CR ELLs and if

719
00:32:30,460 --> 00:32:37,679
we're going to change the format maybe

720
00:32:33,429 --> 00:32:40,179
what we should do is to do one change

721
00:32:37,679 --> 00:32:41,980
and so that might be worth thinking as

722
00:32:40,179 --> 00:32:43,870
well if we're going to do it I think the

723
00:32:41,980 --> 00:32:51,519
natural place to dispatch it to would be

724
00:32:43,870 --> 00:32:53,139
lamps you're ammonium Qualcomm I'm at

725
00:32:51,519 --> 00:32:55,929
since you're coming from cable labs I'll

726
00:32:53,139 --> 00:32:57,760
mention what we did for ATSC which is

727
00:32:55,929 --> 00:32:59,919
the over-the-air television broadcast

728
00:32:57,760 --> 00:33:02,080
and it's commonly used in North America

729
00:32:59,919 --> 00:33:07,000
and other countries we actually used

730
00:33:02,080 --> 00:33:09,269
OCSP as is but we staple the OCSP with

731
00:33:07,000 --> 00:33:12,639
possible responses to brought to

732
00:33:09,269 --> 00:33:15,299
specifically broadcast emissions so if

733
00:33:12,639 --> 00:33:18,428
you're interested in for instance of

734
00:33:15,299 --> 00:33:20,350
channel a you set your tuner on channel

735
00:33:18,429 --> 00:33:23,019
a the client only received

736
00:33:20,350 --> 00:33:24,820
only receives the OCSP responses that

737
00:33:23,019 --> 00:33:26,830
are related to the certificates

738
00:33:24,820 --> 00:33:29,799
associate with channel B if you want

739
00:33:26,830 --> 00:33:32,769
channel B sir - responses you go to tune

740
00:33:29,799 --> 00:33:36,370
to channel B we were able to use OCSP as

741
00:33:32,769 --> 00:33:39,669
is just use it in the staple in the way

742
00:33:36,370 --> 00:33:42,158
was intended to be for OCSP stapling I

743
00:33:39,669 --> 00:33:45,519
think I don't think that you necessarily

744
00:33:42,159 --> 00:33:47,169
have to change OCSP for that I think

745
00:33:45,519 --> 00:33:49,570
it's more a question of how do you

746
00:33:47,169 --> 00:33:51,519
actually narrow the amount of responses

747
00:33:49,570 --> 00:33:53,408
that the client is actually interested

748
00:33:51,519 --> 00:33:55,720
in and allow the client to discover

749
00:33:53,409 --> 00:34:01,480
places to obtain those responses rather

750
00:33:55,720 --> 00:34:03,990
than coming up with new signalling all

751
00:34:01,480 --> 00:34:07,330
right Sean Leonard Penang go Inc so

752
00:34:03,990 --> 00:34:09,280
having read this I do support this work

753
00:34:07,330 --> 00:34:13,119
and I think bless your heart for trying

754
00:34:09,280 --> 00:34:15,159
to continue to improve OCSP multiple

755
00:34:13,119 --> 00:34:17,139
times I guess and coming back to ITF for

756
00:34:15,159 --> 00:34:19,210
for this kind of work what I think is

757
00:34:17,139 --> 00:34:23,290
different and is very valuable is for

758
00:34:19,210 --> 00:34:25,270
those who are skeptical of this work to

759
00:34:23,290 --> 00:34:27,668
be convinced otherwise is to see the

760
00:34:25,270 --> 00:34:31,540
data right in practice the telemetry of

761
00:34:27,668 --> 00:34:34,810
how much time resources energy whatever

762
00:34:31,540 --> 00:34:36,339
round trips can be saved from you know

763
00:34:34,810 --> 00:34:38,918
the different techniques that are being

764
00:34:36,339 --> 00:34:42,219
proposed especially whether its web PK

765
00:34:38,918 --> 00:34:42,848
or other PKI deployments you know that

766
00:34:42,219 --> 00:34:45,310
that will help

767
00:34:42,849 --> 00:34:47,740
I think motivate a lot more support for

768
00:34:45,310 --> 00:34:49,569
different use cases and different kinds

769
00:34:47,739 --> 00:34:51,879
of data structures so I'd love to see

770
00:34:49,569 --> 00:34:54,219
that data you know from what we've seen

771
00:34:51,879 --> 00:34:57,250
in the field from what other from what

772
00:34:54,219 --> 00:35:00,970
practicing providers can give as part of

773
00:34:57,250 --> 00:35:07,150
this work yeah we have like less than 90

774
00:35:00,970 --> 00:35:10,868
seconds so be quick we work at authority

775
00:35:07,150 --> 00:35:12,730
and we make some IOT system also and we

776
00:35:10,869 --> 00:35:15,730
really want to kind of investigate

777
00:35:12,730 --> 00:35:17,950
concerns like we did he wanted kind

778
00:35:15,730 --> 00:35:20,380
system because like current to chef is

779
00:35:17,950 --> 00:35:23,560
not Scarab righto and we having very big

780
00:35:20,380 --> 00:35:29,829
problem so I really support that one

781
00:35:23,560 --> 00:35:32,470
it's that just next Nick Sullivan

782
00:35:29,829 --> 00:35:34,330
CloudFlare we cash a lot of the webs

783
00:35:32,470 --> 00:35:37,149
OCSP responses

784
00:35:34,330 --> 00:35:39,270
I don't see a need for this this work

785
00:35:37,150 --> 00:35:43,120
I'd like to see more data to justify

786
00:35:39,270 --> 00:35:48,130
doing work like this i OCSP seems to be

787
00:35:43,120 --> 00:35:49,299
working fine Daniel Kahn Gilmore I'm

788
00:35:48,130 --> 00:35:51,040
curious to know whether you thought

789
00:35:49,300 --> 00:35:53,440
about how this interacts with OCSP

790
00:35:51,040 --> 00:35:56,980
stapling are you expecting to ship the

791
00:35:53,440 --> 00:35:59,260
range in the stapled region during the

792
00:35:56,980 --> 00:36:00,430
TLS handshake and if so what does the

793
00:35:59,260 --> 00:36:02,020
client going to do who doesn't

794
00:36:00,430 --> 00:36:03,490
understand this when they see a range

795
00:36:02,020 --> 00:36:05,200
are they're gonna is it going to break

796
00:36:03,490 --> 00:36:06,580
the stapling I'm not sure you need to

797
00:36:05,200 --> 00:36:09,009
answer that question right now since you

798
00:36:06,580 --> 00:36:10,930
have negative 60 seconds but it seems

799
00:36:09,010 --> 00:36:13,360
like a potentially problematic situation

800
00:36:10,930 --> 00:36:16,060
this is potential work for a work group

801
00:36:13,360 --> 00:36:18,960
or you know collaborating on finding

802
00:36:16,060 --> 00:36:21,310
solution so yeah I think it sounds like

803
00:36:18,960 --> 00:36:22,960
nobody objected at least to this idea

804
00:36:21,310 --> 00:36:24,520
that if if we're gonna do any work here

805
00:36:22,960 --> 00:36:25,810
then it should be in a new small working

806
00:36:24,520 --> 00:36:27,160
group I think we can have some

807
00:36:25,810 --> 00:36:30,670
discussion almost to confirm that

808
00:36:27,160 --> 00:36:32,589
there's energy to do work here at all so

809
00:36:30,670 --> 00:36:34,600
thanks max I'm gonna call it Nick

810
00:36:32,590 --> 00:36:36,610
Sullivan next if you that's alright

811
00:36:34,600 --> 00:36:38,049
we've had a last-minute agenda - propose

812
00:36:36,610 --> 00:36:41,050
to the chairs directly I'm just gonna

813
00:36:38,050 --> 00:36:42,730
swap the next two proposals so we're

814
00:36:41,050 --> 00:36:49,750
gonna do a nick and then Justin that's

815
00:36:42,730 --> 00:36:51,610
alright okay yeah the conclusion on that

816
00:36:49,750 --> 00:36:52,990
last one is that if we're gonna do

817
00:36:51,610 --> 00:36:54,460
anything it's going to be new working

818
00:36:52,990 --> 00:36:56,140
group material and we're gonna confirm

819
00:36:54,460 --> 00:36:57,190
whether there's to be a new working

820
00:36:56,140 --> 00:37:00,490
group on the mailing list

821
00:36:57,190 --> 00:37:02,020
please Roman and I would add there was

822
00:37:00,490 --> 00:37:03,819
interested kind of additional evidence

823
00:37:02,020 --> 00:37:07,270
if it could be provided to help with the

824
00:37:03,820 --> 00:37:10,240
discussion yeah thank you okay so

825
00:37:07,270 --> 00:37:14,160
privacy posts this is a technology that

826
00:37:10,240 --> 00:37:17,890
was presented previously at perigee and

827
00:37:14,160 --> 00:37:21,129
I'm gonna go into what it is and what

828
00:37:17,890 --> 00:37:22,870
the interest is in it so it privacy pass

829
00:37:21,130 --> 00:37:26,220
is a lightweight zero knowledge protocol

830
00:37:22,870 --> 00:37:28,779
for the web the motivation here is

831
00:37:26,220 --> 00:37:31,500
wouldn't it be nice to have some online

832
00:37:28,780 --> 00:37:34,600
equivalent to cache something like

833
00:37:31,500 --> 00:37:37,300
talking to one service and being issued

834
00:37:34,600 --> 00:37:40,480
some sort of credit that you could spend

835
00:37:37,300 --> 00:37:44,200
at another service or such that it's

836
00:37:40,480 --> 00:37:47,089
unlikeable but the person who issued the

837
00:37:44,200 --> 00:37:49,308
credit to you is unable to know

838
00:37:47,089 --> 00:37:51,019
where you spent it and this would be

839
00:37:49,309 --> 00:37:52,249
something that be nice to have and to

840
00:37:51,019 --> 00:37:54,680
work an internet scale there's a

841
00:37:52,249 --> 00:37:57,410
specific problem that this solved for us

842
00:37:54,680 --> 00:38:00,169
and I'm gonna go into this so I'm just

843
00:37:57,410 --> 00:38:02,649
some sort of physical motivation here to

844
00:38:00,170 --> 00:38:05,359
to how this could potentially work

845
00:38:02,650 --> 00:38:08,960
imagine having an envelope writing

846
00:38:05,359 --> 00:38:10,640
serial number on it adding a piece of

847
00:38:08,960 --> 00:38:14,269
carbon paper in there sealing it up and

848
00:38:10,640 --> 00:38:17,989
sending it to an issuer that would sign

849
00:38:14,269 --> 00:38:20,149
the envelope with saying this is legal

850
00:38:17,989 --> 00:38:22,729
tender without knowing what the serial

851
00:38:20,150 --> 00:38:24,289
number is you'd open it up and then you

852
00:38:22,729 --> 00:38:26,118
have legal tender that you could spend

853
00:38:24,289 --> 00:38:27,859
somewhere else so the issuer does not

854
00:38:26,119 --> 00:38:29,989
know the serial number and it's

855
00:38:27,859 --> 00:38:33,348
something that you could use use

856
00:38:29,989 --> 00:38:35,680
somewhere else so privacy pass is

857
00:38:33,349 --> 00:38:38,119
essentially the digital version of this

858
00:38:35,680 --> 00:38:41,180
this idea has been around since the 80s

859
00:38:38,119 --> 00:38:45,559
but this is something that we found more

860
00:38:41,180 --> 00:38:48,319
recently have updated to use I guess

861
00:38:45,559 --> 00:38:50,359
more efficient cryptography this is a

862
00:38:48,319 --> 00:38:53,569
paper from pets that was published by

863
00:38:50,359 --> 00:38:55,308
myself and a couple co-authors the

864
00:38:53,569 --> 00:38:56,989
solution here

865
00:38:55,309 --> 00:39:00,469
or the problem space here was for

866
00:38:56,989 --> 00:39:04,390
solving CAPTCHAs specifically solving

867
00:39:00,469 --> 00:39:07,729
CAPTCHAs on multiple different websites

868
00:39:04,390 --> 00:39:09,440
so that your experience of solving

869
00:39:07,729 --> 00:39:12,288
CAPTCHAs is is that you see fewer

870
00:39:09,440 --> 00:39:13,910
CAPTCHAs so you can imagine if there's a

871
00:39:12,289 --> 00:39:16,579
hundred different websites they all have

872
00:39:13,910 --> 00:39:18,379
the same CAPTCHA provider and if you

873
00:39:16,579 --> 00:39:20,029
solve a CAPTCHA on one website you get a

874
00:39:18,380 --> 00:39:22,309
cookie that proves that you solve that

875
00:39:20,029 --> 00:39:24,140
CAPTCHA this cookie is not transferable

876
00:39:22,309 --> 00:39:27,950
from one website to the other without

877
00:39:24,140 --> 00:39:30,739
leaking your identity so what would be

878
00:39:27,950 --> 00:39:32,868
nice is to be able to get some anonymous

879
00:39:30,739 --> 00:39:34,309
proof that you solve this CAPTCHA and be

880
00:39:32,869 --> 00:39:36,259
able to redeem it to bypass another

881
00:39:34,309 --> 00:39:39,920
CAPTCHA so this is this is the flow then

882
00:39:36,259 --> 00:39:43,819
this is how Club privacy pass works so

883
00:39:39,920 --> 00:39:45,650
you take a token you blind it up you

884
00:39:43,819 --> 00:39:48,769
issue you send it to the capture

885
00:39:45,650 --> 00:39:50,869
provider they sign the blinded token

886
00:39:48,769 --> 00:39:52,578
send it back to you and then the next

887
00:39:50,869 --> 00:39:55,369
time that you encounter a CAPTCHA you

888
00:39:52,579 --> 00:39:58,099
unblind the token and you send it to the

889
00:39:55,369 --> 00:40:00,800
capture provider and it's able to verify

890
00:39:58,099 --> 00:40:03,800
that this was a valid token but not

891
00:40:00,800 --> 00:40:06,620
know which site it was that issued it or

892
00:40:03,800 --> 00:40:08,270
who the issuer was and so there's two

893
00:40:06,620 --> 00:40:08,950
constructions underneath that make this

894
00:40:08,270 --> 00:40:11,660
possible

895
00:40:08,950 --> 00:40:15,500
blinded RSA this is the original ecash

896
00:40:11,660 --> 00:40:18,140
scheme this has the feature that it the

897
00:40:15,500 --> 00:40:20,870
these tokens are publicly verifiable so

898
00:40:18,140 --> 00:40:23,420
one party can issue and any party can

899
00:40:20,870 --> 00:40:27,830
verify the version that we came up with

900
00:40:23,420 --> 00:40:30,560
for privacy pass is called vo PRF this

901
00:40:27,830 --> 00:40:32,930
is some this this is actually currently

902
00:40:30,560 --> 00:40:34,460
being looked at at the C FRG that's been

903
00:40:32,930 --> 00:40:35,359
adopted as a working group item to

904
00:40:34,460 --> 00:40:37,700
define how this works

905
00:40:35,360 --> 00:40:40,670
it's a oblivious pseudo-random function

906
00:40:37,700 --> 00:40:43,490
with verifiability essentially the only

907
00:40:40,670 --> 00:40:44,930
difference with blinded RSA is that it

908
00:40:43,490 --> 00:40:48,169
uses the looked at curves it's more

909
00:40:44,930 --> 00:40:50,089
efficient and it's verifiable by only

910
00:40:48,170 --> 00:40:53,570
the issuer which is a slight constraint

911
00:40:50,090 --> 00:40:56,330
that gets you the performance now

912
00:40:53,570 --> 00:40:59,420
privacy pass itself has running code we

913
00:40:56,330 --> 00:41:02,090
have the codes open source it's oh I

914
00:40:59,420 --> 00:41:03,680
have one mint okay great um so this is

915
00:41:02,090 --> 00:41:06,410
there's a firefox in chrome extension

916
00:41:03,680 --> 00:41:08,779
this is actively used by over a hundred

917
00:41:06,410 --> 00:41:12,740
and one hundred and thirty thousand

918
00:41:08,780 --> 00:41:14,120
people per day per week half a million

919
00:41:12,740 --> 00:41:16,549
redemptions or so this numbers probably

920
00:41:14,120 --> 00:41:18,799
gone up quite quite a bit and we

921
00:41:16,550 --> 00:41:20,930
recently released a new version and so

922
00:41:18,800 --> 00:41:23,240
the reason I'm coming here is this

923
00:41:20,930 --> 00:41:25,040
technology seems to be useful more

924
00:41:23,240 --> 00:41:27,259
generally and there's been a number of

925
00:41:25,040 --> 00:41:32,450
different applications to this that have

926
00:41:27,260 --> 00:41:34,040
popped up specifically with within the

927
00:41:32,450 --> 00:41:36,680
brave router browser doing ad

928
00:41:34,040 --> 00:41:38,779
confirmations the privacy sandbox

929
00:41:36,680 --> 00:41:42,220
proposal from chromium is interested in

930
00:41:38,780 --> 00:41:44,000
using this specific technology there's

931
00:41:42,220 --> 00:41:48,020
Facebook's also proposed something

932
00:41:44,000 --> 00:41:50,690
similar and the Tahoe L AFS project has

933
00:41:48,020 --> 00:41:54,800
has committed to using basically the

934
00:41:50,690 --> 00:41:58,970
exact same construction so the idea here

935
00:41:54,800 --> 00:42:01,310
is that we would standardize this and go

936
00:41:58,970 --> 00:42:04,730
forward and it would be useful in

937
00:42:01,310 --> 00:42:07,190
multiple view of these applications okay

938
00:42:04,730 --> 00:42:09,730
so I know I'm sort of a little bit over

939
00:42:07,190 --> 00:42:12,340
or not okay

940
00:42:09,730 --> 00:42:14,200
okay great um so I'm almost done here um

941
00:42:12,340 --> 00:42:16,540
so what does the scope of work to be

942
00:42:14,200 --> 00:42:19,299
done what am I asking well

943
00:42:16,540 --> 00:42:22,090
defining the basic privacy protocol in

944
00:42:19,300 --> 00:42:24,400
terms of HTTP headers how do you

945
00:42:22,090 --> 00:42:26,740
integrate the crypto and if there's

946
00:42:24,400 --> 00:42:29,470
specific features to the use cases

947
00:42:26,740 --> 00:42:32,350
listed can we support those and so

948
00:42:29,470 --> 00:42:35,140
perhaps this is a mini working group

949
00:42:32,350 --> 00:42:36,880
sized amount of work maybe a full

950
00:42:35,140 --> 00:42:38,560
working group sized amount of work it's

951
00:42:36,880 --> 00:42:40,840
not clear this is why we're here at

952
00:42:38,560 --> 00:42:42,730
dispatch if we were to do a working

953
00:42:40,840 --> 00:42:46,420
group there's this is sort of the

954
00:42:42,730 --> 00:42:49,390
proposed charter essentially tokens are

955
00:42:46,420 --> 00:42:51,940
we shooting groups these groups form an

956
00:42:49,390 --> 00:42:55,629
anonymity set any issue token can be

957
00:42:51,940 --> 00:42:58,060
confirmed to be part of a group and can

958
00:42:55,630 --> 00:42:59,740
be submitted to be verified and the

959
00:42:58,060 --> 00:43:03,490
verifier can only prove that this was

960
00:42:59,740 --> 00:43:07,959
one of the tokens of the group not link

961
00:43:03,490 --> 00:43:09,399
it to the specific issuance and so what

962
00:43:07,960 --> 00:43:11,020
we'd like to do and what is defined in

963
00:43:09,400 --> 00:43:12,760
this in this draft which is posted on

964
00:43:11,020 --> 00:43:14,830
the list is to specify protocol that

965
00:43:12,760 --> 00:43:17,680
provides this mechanism with the

966
00:43:14,830 --> 00:43:20,710
security properties and how to use this

967
00:43:17,680 --> 00:43:23,440
in an HTTP client server setting it's

968
00:43:20,710 --> 00:43:25,360
not a goal to build an interoperable

969
00:43:23,440 --> 00:43:27,360
federated system with multiple token

970
00:43:25,360 --> 00:43:30,940
issuers this is a basic protocol and

971
00:43:27,360 --> 00:43:32,620
there is one additional request to

972
00:43:30,940 --> 00:43:37,690
define a way to embed a small amount of

973
00:43:32,620 --> 00:43:43,990
metadata say one bit into the token so

974
00:43:37,690 --> 00:43:45,430
with that our students so I remember

975
00:43:43,990 --> 00:43:47,950
talking to you about this and one of the

976
00:43:45,430 --> 00:43:49,990
differences is the fact that the

977
00:43:47,950 --> 00:43:53,049
original proposal could be verified

978
00:43:49,990 --> 00:43:55,240
offline and this can't right that's

979
00:43:53,050 --> 00:43:57,460
correct so I was wondering whether that

980
00:43:55,240 --> 00:43:59,830
could be brought is there a is there an

981
00:43:57,460 --> 00:44:01,960
like a way to bring that back I've got

982
00:43:59,830 --> 00:44:03,670
use cases which this would be perfect

983
00:44:01,960 --> 00:44:06,550
for but offline verification would be

984
00:44:03,670 --> 00:44:08,650
really really useful yeah I I believe

985
00:44:06,550 --> 00:44:13,420
that should be in scope having a

986
00:44:08,650 --> 00:44:15,430
publicly verifiable and a online issuer

987
00:44:13,420 --> 00:44:18,130
verifiable version I think those those

988
00:44:15,430 --> 00:44:20,109
are two very solid use cases and we've

989
00:44:18,130 --> 00:44:21,550
had requests of both perfect thank you

990
00:44:20,110 --> 00:44:23,160
state your name for the minute sorry

991
00:44:21,550 --> 00:44:25,420
late for wants one

992
00:44:23,160 --> 00:44:29,500
Eric rola thanks for bringing this is

993
00:44:25,420 --> 00:44:30,910
cool stuff um I think you know I think

994
00:44:29,500 --> 00:44:32,080
you're right to think of me working for

995
00:44:30,910 --> 00:44:33,520
the right thing there's enough there's

996
00:44:32,080 --> 00:44:36,400
enough stuff here that probably it can't

997
00:44:33,520 --> 00:44:41,310
just be like like an HTTP extension I

998
00:44:36,400 --> 00:44:46,090
agree with Leif it would be good to have

999
00:44:41,310 --> 00:44:48,340
offline use cases part of the as part of

1000
00:44:46,090 --> 00:44:49,390
those part of the the Charter um which I

1001
00:44:48,340 --> 00:44:52,600
think actually brings us to the point

1002
00:44:49,390 --> 00:44:54,700
about were the majority in this as like

1003
00:44:52,600 --> 00:44:59,589
I'm certainly I assume he's not using

1004
00:44:54,700 --> 00:45:02,080
his performance and and and precise yeah

1005
00:44:59,590 --> 00:45:04,480
RSA there was the reason we searched

1006
00:45:02,080 --> 00:45:05,890
from RSA to vo prfs was performance and

1007
00:45:04,480 --> 00:45:08,260
the fact that we didn't need offline

1008
00:45:05,890 --> 00:45:10,210
right I I don't see why you wouldn't be

1009
00:45:08,260 --> 00:45:13,330
like support both right well so he wants

1010
00:45:10,210 --> 00:45:17,530
to do BLS um what's the trick lighting

1011
00:45:13,330 --> 00:45:21,819
um so um I think the I would I would

1012
00:45:17,530 --> 00:45:24,040
caution against BLS until until sure yet

1013
00:45:21,820 --> 00:45:25,450
I didn't foresee FRG but again so I

1014
00:45:24,040 --> 00:45:28,240
guess the question the question I do

1015
00:45:25,450 --> 00:45:29,950
have is is there any new crypto

1016
00:45:28,240 --> 00:45:31,870
engineering here that we're gonna need

1017
00:45:29,950 --> 00:45:33,240
to run trip for CFR G my understanding

1018
00:45:31,870 --> 00:45:36,630
is V up here ups are already being done

1019
00:45:33,240 --> 00:45:39,299
and that we understand how to do the

1020
00:45:36,630 --> 00:45:41,440
there one or two bits of metadata with

1021
00:45:39,300 --> 00:45:42,520
scheme without having to like and then a

1022
00:45:41,440 --> 00:45:45,280
bunch of these are knowledge proofs and

1023
00:45:42,520 --> 00:45:48,070
stuff like that right yeah so the hope

1024
00:45:45,280 --> 00:45:50,950
is that this would run in parallel with

1025
00:45:48,070 --> 00:45:52,900
the CF RG process for the OPR F's and if

1026
00:45:50,950 --> 00:45:55,779
there was a requirement for public

1027
00:45:52,900 --> 00:45:59,560
verifiability then maybe a new work item

1028
00:45:55,780 --> 00:46:02,950
to to bring Charmian and blinded RSA in

1029
00:45:59,560 --> 00:46:11,620
2 CFR g could be useful so this seems

1030
00:46:02,950 --> 00:46:14,049
like quite appropriate is interesting i

1031
00:46:11,620 --> 00:46:15,609
think including in the charter the

1032
00:46:14,050 --> 00:46:18,670
ability to have further extensions like

1033
00:46:15,610 --> 00:46:21,760
that private metadata additional bits of

1034
00:46:18,670 --> 00:46:23,350
data would be useful I think there is

1035
00:46:21,760 --> 00:46:25,870
still crypto work to be done we had a

1036
00:46:23,350 --> 00:46:27,790
scheme for they like private metadata

1037
00:46:25,870 --> 00:46:29,710
but there was an issue with that that

1038
00:46:27,790 --> 00:46:33,220
you were able to discover whether or not

1039
00:46:29,710 --> 00:46:34,990
two users had the same bit there and I

1040
00:46:33,220 --> 00:46:36,910
think we probably want to get more

1041
00:46:34,990 --> 00:46:38,470
is both from CFR G and like people

1042
00:46:36,910 --> 00:46:41,200
looking at these protocols specifically

1043
00:46:38,470 --> 00:46:48,910
before we call anything working and not

1044
00:46:41,200 --> 00:46:51,098
needing work Tomica C let's make Matt

1045
00:46:48,910 --> 00:46:54,129
Miller the last commenter please sorry

1046
00:46:51,099 --> 00:46:57,130
mark quickly um I just want to express

1047
00:46:54,130 --> 00:46:59,410
that I like your sponsor use cases for

1048
00:46:57,130 --> 00:47:02,320
this work as you showed um a couple

1049
00:46:59,410 --> 00:47:03,759
slides ago so I'm interested in where I

1050
00:47:02,320 --> 00:47:08,320
could like to see him move forward and I

1051
00:47:03,760 --> 00:47:10,599
hope that was that Iran Sheva I support

1052
00:47:08,320 --> 00:47:16,000
this group I think it's well was the

1053
00:47:10,599 --> 00:47:18,599
working group in a in of itself I am

1054
00:47:16,000 --> 00:47:21,849
worried about the working group were

1055
00:47:18,599 --> 00:47:25,390
caught in it is that interoperability is

1056
00:47:21,849 --> 00:47:26,680
out of scope so I urge you to find the

1057
00:47:25,390 --> 00:47:30,940
areas where you do require

1058
00:47:26,680 --> 00:47:32,919
interoperability yeah that's a good

1059
00:47:30,940 --> 00:47:34,240
that's a good point maybe maybe it's

1060
00:47:32,920 --> 00:47:37,240
just a federation that's out of scope

1061
00:47:34,240 --> 00:47:41,379
but interoperability is in scope that's

1062
00:47:37,240 --> 00:47:44,169
a very good comment echoing for Coby

1063
00:47:41,380 --> 00:47:46,119
gherkin I support this work I'd like to

1064
00:47:44,170 --> 00:47:47,440
see this point signature based protocol

1065
00:47:46,119 --> 00:47:53,859
moving forward would be willing to

1066
00:47:47,440 --> 00:47:55,570
participate in a working group just from

1067
00:47:53,859 --> 00:47:57,240
an HTTP perspective I think a separate

1068
00:47:55,570 --> 00:48:00,160
group is probably the right answer here

1069
00:47:57,240 --> 00:48:01,359
there's enough meaty stuff to do but

1070
00:48:00,160 --> 00:48:03,580
please coordinate because I think

1071
00:48:01,359 --> 00:48:05,589
there's things like cache interactions

1072
00:48:03,580 --> 00:48:12,190
and you know intermediary interactions

1073
00:48:05,589 --> 00:48:13,180
you want to take care of thanks mark

1074
00:48:12,190 --> 00:48:16,780
noting him could you please state your

1075
00:48:13,180 --> 00:48:17,240
name for the record my name is Richard

1076
00:48:16,780 --> 00:48:19,589
barn

1077
00:48:17,240 --> 00:48:21,479
or mark Nottingham I'm not sure right

1078
00:48:19,589 --> 00:48:22,349
because we're bad at estimating time up

1079
00:48:21,480 --> 00:48:25,800
here I'm gonna go ahead and let our

1080
00:48:22,349 --> 00:48:28,650
remote speaker go hi this is Roger

1081
00:48:25,800 --> 00:48:31,650
notify mutation machine I support this

1082
00:48:28,650 --> 00:48:33,750
one we already have interrupts with the

1083
00:48:31,650 --> 00:48:36,569
existing implementation compiler and

1084
00:48:33,750 --> 00:48:40,859
we'd like to see go forward in the

1085
00:48:36,569 --> 00:48:43,560
working group thank you thank you yeah

1086
00:48:40,859 --> 00:48:46,560
so that's that's a clarified clarifying

1087
00:48:43,560 --> 00:48:47,790
point on the in drop point of view the

1088
00:48:46,560 --> 00:48:50,520
recent release that we did is

1089
00:48:47,790 --> 00:48:53,609
interoperable with multiple CAPTCHA

1090
00:48:50,520 --> 00:48:55,109
providers rather than just CloudFlare

1091
00:48:53,609 --> 00:48:59,480
and the closer extension so it's one

1092
00:48:55,109 --> 00:49:01,890
extension multiple providers but the

1093
00:48:59,480 --> 00:49:04,560
mechanism for federate Federation is is

1094
00:49:01,890 --> 00:49:06,390
not in scope cool all right so it sounds

1095
00:49:04,560 --> 00:49:07,980
like there's I think you're probably

1096
00:49:06,390 --> 00:49:09,828
about right this is about micro working

1097
00:49:07,980 --> 00:49:11,880
group size and it sounds like there's

1098
00:49:09,829 --> 00:49:14,339
several expressions of interest from the

1099
00:49:11,880 --> 00:49:18,030
floor so I think let's work workshops

1100
00:49:14,339 --> 00:49:19,589
the Charter on the list and eighties

1101
00:49:18,030 --> 00:49:22,910
willing we can probably just charter

1102
00:49:19,589 --> 00:49:25,859
this directly without further Bafa tude

1103
00:49:22,910 --> 00:49:31,890
a chair so that chairs the mic please or

1104
00:49:25,859 --> 00:49:33,420
a decent mic please continue yeah Roman

1105
00:49:31,890 --> 00:49:35,400
do you so continue talking the list for

1106
00:49:33,420 --> 00:49:38,220
architects is great I think we want to

1107
00:49:35,400 --> 00:49:39,630
buff it but let's put some let's put the

1108
00:49:38,220 --> 00:49:41,848
text in the list let's chat cut a little

1109
00:49:39,630 --> 00:49:43,230
more and we'll make some some plans

1110
00:49:41,849 --> 00:49:46,260
since that what we're talking about is

1111
00:49:43,230 --> 00:49:47,089
three four months from now okay okay

1112
00:49:46,260 --> 00:49:51,680
thank you

1113
00:49:47,089 --> 00:49:51,680
all right Justin you're up

1114
00:50:00,300 --> 00:50:03,429
[Music]

1115
00:50:05,280 --> 00:50:11,200
all right so for any of you who are at

1116
00:50:08,410 --> 00:50:13,509
dispatch yesterday and saw the same

1117
00:50:11,200 --> 00:50:19,270
presentation this is the slightly slower

1118
00:50:13,510 --> 00:50:21,670
version of it slightly yes

1119
00:50:19,270 --> 00:50:25,960
I'm running it probably about 2/3

1120
00:50:21,670 --> 00:50:28,450
Eckerd's right now so anyway I wanted to

1121
00:50:25,960 --> 00:50:30,550
talk about HTTP signing specifically

1122
00:50:28,450 --> 00:50:33,569
what I'm talking about is a message

1123
00:50:30,550 --> 00:50:37,210
level signature over an HTTP request and

1124
00:50:33,569 --> 00:50:39,250
that's a signature that would cover some

1125
00:50:37,210 --> 00:50:41,290
subset of the headers the body other

1126
00:50:39,250 --> 00:50:44,290
requests I learned elements like the URL

1127
00:50:41,290 --> 00:50:46,839
and verb and all of that other stuff and

1128
00:50:44,290 --> 00:50:48,670
in particular we're interested in

1129
00:50:46,839 --> 00:50:51,190
talking about detached signatures and

1130
00:50:48,670 --> 00:50:55,510
not encapsulated signatures more on that

1131
00:50:51,190 --> 00:50:57,339
in just a bit the reason that there's a

1132
00:50:55,510 --> 00:50:59,559
lot of people out there interested in

1133
00:50:57,339 --> 00:51:01,509
solving this is pretty varied as it

1134
00:50:59,559 --> 00:51:03,910
turns out people have been approaching

1135
00:51:01,510 --> 00:51:06,069
this in order to prove possession of a

1136
00:51:03,910 --> 00:51:09,009
specific key there are security

1137
00:51:06,069 --> 00:51:11,349
protocols extensions to OAuth and and

1138
00:51:09,010 --> 00:51:13,240
the like that are you know you want to

1139
00:51:11,349 --> 00:51:16,960
have some way to say that I have a

1140
00:51:13,240 --> 00:51:18,279
particular application level key you

1141
00:51:16,960 --> 00:51:20,500
want to be able to authenticate a piece

1142
00:51:18,280 --> 00:51:23,559
of software which is a slightly

1143
00:51:20,500 --> 00:51:26,319
different but related problem to keep

1144
00:51:23,559 --> 00:51:29,230
roofing possession you want to have

1145
00:51:26,319 --> 00:51:32,490
sometimes message level integrity this

1146
00:51:29,230 --> 00:51:35,829
goes beyond the TLS transport layer

1147
00:51:32,490 --> 00:51:38,439
integrity and also

1148
00:51:35,829 --> 00:51:41,530
non-repudiation and audit kind of you

1149
00:51:38,440 --> 00:51:44,440
know I've got a signature over the

1150
00:51:41,530 --> 00:51:48,190
request itself that might last in logs

1151
00:51:44,440 --> 00:51:50,049
and things you know going forward so the

1152
00:51:48,190 --> 00:51:51,700
reason that this is a hard problem and

1153
00:51:50,049 --> 00:51:54,790
we don't already have something built in

1154
00:51:51,700 --> 00:51:56,859
is actually not the signature part the

1155
00:51:54,790 --> 00:52:03,369
reason that this is hard is because of

1156
00:51:56,859 --> 00:52:05,640
HTTP HTTP gets transformed and you know

1157
00:52:03,369 --> 00:52:08,290
terminated and repo and parsed and

1158
00:52:05,640 --> 00:52:10,598
reconstituted and replayed all over the

1159
00:52:08,290 --> 00:52:13,990
place it's designed to be able to do

1160
00:52:10,599 --> 00:52:17,310
that and we kind of expect it to be able

1161
00:52:13,990 --> 00:52:21,040
to do that in our systems today

1162
00:52:17,310 --> 00:52:24,220
however we we don't want to just

1163
00:52:21,040 --> 00:52:28,090
encapsulate the entire HTTP message to

1164
00:52:24,220 --> 00:52:30,759
prevent it from being modified because

1165
00:52:28,090 --> 00:52:33,640
we want our terminating proxies to be

1166
00:52:30,760 --> 00:52:35,440
able to look at something and parse it

1167
00:52:33,640 --> 00:52:37,990
and figure out and then hand that back

1168
00:52:35,440 --> 00:52:39,880
to our back-end systems and add in their

1169
00:52:37,990 --> 00:52:40,180
own headers and all sorts of stuff like

1170
00:52:39,880 --> 00:52:42,580
that

1171
00:52:40,180 --> 00:52:47,649
we need to have those kinds of

1172
00:52:42,580 --> 00:52:50,100
capabilities in our apps today and it's

1173
00:52:47,650 --> 00:52:53,109
really really common especially with

1174
00:52:50,100 --> 00:52:55,540
things at the application level to parse

1175
00:52:53,109 --> 00:52:57,609
and re serialize stuff so things like

1176
00:52:55,540 --> 00:53:01,180
query parameters tend to get handed down

1177
00:52:57,609 --> 00:53:05,460
at the application layer as a map of

1178
00:53:01,180 --> 00:53:08,350
some type and not as the query string

1179
00:53:05,460 --> 00:53:10,390
things like a JSON body is gonna be

1180
00:53:08,350 --> 00:53:14,890
handed to you as an object and not as

1181
00:53:10,390 --> 00:53:16,980
the series of bits of the JSON the HTTP

1182
00:53:14,890 --> 00:53:19,629
message entity payload itself right

1183
00:53:16,980 --> 00:53:22,000
parsing and re serialization is really

1184
00:53:19,630 --> 00:53:25,330
really super common all of this makes

1185
00:53:22,000 --> 00:53:27,580
signing any of that really really really

1186
00:53:25,330 --> 00:53:29,500
difficult you inevitably need to have

1187
00:53:27,580 --> 00:53:31,359
some type of canonicalization and

1188
00:53:29,500 --> 00:53:35,710
normalization process in order to make

1189
00:53:31,359 --> 00:53:37,240
this thing work so first question why

1190
00:53:35,710 --> 00:53:40,030
aren't we solving this using other

1191
00:53:37,240 --> 00:53:43,540
existing technologies so why can't we

1192
00:53:40,030 --> 00:53:46,750
just use TLS for everything well TLS

1193
00:53:43,540 --> 00:53:50,320
stops at the TLS terminator thus the

1194
00:53:46,750 --> 00:53:52,869
name and in a lot of cases in a lot of

1195
00:53:50,320 --> 00:53:55,390
applications you need both the integrity

1196
00:53:52,869 --> 00:53:58,270
protection and the key proofing to go

1197
00:53:55,390 --> 00:53:59,830
beyond the TLS terminator additionally

1198
00:53:58,270 --> 00:54:02,710
there are a lot of applications where

1199
00:53:59,830 --> 00:54:06,190
mutual TLS doesn't really fly anything

1200
00:54:02,710 --> 00:54:08,050
that's being generated inside of a web

1201
00:54:06,190 --> 00:54:10,230
browser so in in s.p.a or something like

1202
00:54:08,050 --> 00:54:13,570
that doing M TLS from inside there

1203
00:54:10,230 --> 00:54:15,850
really doesn't work it it is a horrible

1204
00:54:13,570 --> 00:54:17,230
user experience people get prompted for

1205
00:54:15,850 --> 00:54:19,600
personal certificates because of

1206
00:54:17,230 --> 00:54:21,700
assumptions that we have made on the

1207
00:54:19,600 --> 00:54:24,040
Internet about what a certificate in a

1208
00:54:21,700 --> 00:54:25,779
browser means and stands for that don't

1209
00:54:24,040 --> 00:54:28,680
really map to the way that we'd like to

1210
00:54:25,780 --> 00:54:31,540
potentially use the technology all right

1211
00:54:28,680 --> 00:54:33,339
what about s HTTP this got brought up I

1212
00:54:31,540 --> 00:54:36,700
believe is on dispatch list not on sec

1213
00:54:33,340 --> 00:54:41,350
dispatcher I forget but there's and no I

1214
00:54:36,700 --> 00:54:46,990
don't mean HTTPS I mean s HTTP this is

1215
00:54:41,350 --> 00:54:49,390
an old RFC that wraps up HTTP in a in an

1216
00:54:46,990 --> 00:54:51,459
encapsulated message and it duplicates

1217
00:54:49,390 --> 00:54:53,740
and hides a bunch of HTTP functionality

1218
00:54:51,460 --> 00:54:55,390
in order to do the encapsulation but the

1219
00:54:53,740 --> 00:54:56,459
biggest problem is that it exists but

1220
00:54:55,390 --> 00:55:00,879
nobody's ever heard of it

1221
00:54:56,460 --> 00:55:04,030
great yes sometimes a correction here I

1222
00:55:00,880 --> 00:55:05,980
think that as HTTP was raised as an

1223
00:55:04,030 --> 00:55:07,720
example of how this is being done in the

1224
00:55:05,980 --> 00:55:10,359
past and perhaps there were some lessons

1225
00:55:07,720 --> 00:55:12,399
to be learned from it not to say just

1226
00:55:10,359 --> 00:55:17,020
use this HTTP because there's an RFC

1227
00:55:12,400 --> 00:55:21,760
right and I did not in intend to imply

1228
00:55:17,020 --> 00:55:23,230
that that was what was claimed and which

1229
00:55:21,760 --> 00:55:25,930
is a good thing because we shouldn't

1230
00:55:23,230 --> 00:55:27,730
just use that s HTTP for lots of reasons

1231
00:55:25,930 --> 00:55:29,980
not the least of which is that it's an

1232
00:55:27,730 --> 00:55:31,690
encapsulation protocol

1233
00:55:29,980 --> 00:55:36,040
are we taking questions in the middle

1234
00:55:31,690 --> 00:55:39,340
here or should we tell Phil that okay

1235
00:55:36,040 --> 00:55:41,440
awesome thank you all right so what

1236
00:55:39,340 --> 00:55:43,540
about using Jose a lot of people love

1237
00:55:41,440 --> 00:55:46,480
this for lots of things the thing about

1238
00:55:43,540 --> 00:55:49,180
Jose is that it's really really good at

1239
00:55:46,480 --> 00:55:50,859
signing its payload that it carries

1240
00:55:49,180 --> 00:55:53,080
along with it and again if you're doing

1241
00:55:50,859 --> 00:55:55,569
some type of detached signature you need

1242
00:55:53,080 --> 00:55:58,029
a way to get that payload into the Jose

1243
00:55:55,570 --> 00:55:59,820
world and then get it back out so that

1244
00:55:58,030 --> 00:56:04,270
you can carry the signature along it's

1245
00:55:59,820 --> 00:56:06,700
not really not really set up to do this

1246
00:56:04,270 --> 00:56:09,160
kind of thing and if we were to

1247
00:56:06,700 --> 00:56:11,919
encapsulate all of the HTTP stuff so put

1248
00:56:09,160 --> 00:56:14,259
the the verbs and the actions and the

1249
00:56:11,920 --> 00:56:16,420
URLs and queries and everything inside a

1250
00:56:14,260 --> 00:56:18,609
Jose object and just stuff that inside

1251
00:56:16,420 --> 00:56:22,180
of an HTTP request you end up with soap

1252
00:56:18,609 --> 00:56:23,910
with curly braces and let's really not

1253
00:56:22,180 --> 00:56:28,899
go there all right

1254
00:56:23,910 --> 00:56:30,460
so looking around there and the reason I

1255
00:56:28,900 --> 00:56:35,080
wanted to bring this into sec dispatch

1256
00:56:30,460 --> 00:56:37,390
is that there are at least five options

1257
00:56:35,080 --> 00:56:40,119
out there there are actually now seven

1258
00:56:37,390 --> 00:56:41,290
thanks to Annabel publishing two more

1259
00:56:40,119 --> 00:56:44,290
this week but

1260
00:56:41,290 --> 00:56:45,940
be fair that's a it's those are a remix

1261
00:56:44,290 --> 00:56:49,090
of one of the ones up here so I didn't

1262
00:56:45,940 --> 00:56:51,250
update the slides and I am personally

1263
00:56:49,090 --> 00:56:53,070
responsible for two of these which are

1264
00:56:51,250 --> 00:57:00,160
different from each other because

1265
00:56:53,070 --> 00:57:01,780
reasons and all of these exist today and

1266
00:57:00,160 --> 00:57:05,350
are incompatible with each other and

1267
00:57:01,780 --> 00:57:08,350
solve slightly different slices of the

1268
00:57:05,350 --> 00:57:11,770
overall problem so cabbage signatures

1269
00:57:08,350 --> 00:57:13,480
which is probably one of the yes so

1270
00:57:11,770 --> 00:57:16,750
Mountain Thompson I can add at least two

1271
00:57:13,480 --> 00:57:19,110
more to that list yeah I'm sure that's I

1272
00:57:16,750 --> 00:57:22,660
said I said at least there's there's all

1273
00:57:19,110 --> 00:57:24,370
people have been hashing this in

1274
00:57:22,660 --> 00:57:27,040
different ways so and I should add these

1275
00:57:24,370 --> 00:57:29,730
are specifically the detached non

1276
00:57:27,040 --> 00:57:32,860
encapsulated versions if you want to go

1277
00:57:29,730 --> 00:57:35,770
encapsulated mess signed HTTP request

1278
00:57:32,860 --> 00:57:37,330
there's it's like you you can't throw a

1279
00:57:35,770 --> 00:57:40,810
dead rat around here without running

1280
00:57:37,330 --> 00:57:42,700
into one there's a lot so I'm talking

1281
00:57:40,810 --> 00:57:45,160
about specifically detached stuff here

1282
00:57:42,700 --> 00:57:48,029
Cavett signatures are probably one of

1283
00:57:45,160 --> 00:57:51,370
the most widely used ones out there

1284
00:57:48,030 --> 00:57:54,940
they're a little bit limited about what

1285
00:57:51,370 --> 00:57:58,569
they can canonicalize and sign but kind

1286
00:57:54,940 --> 00:58:00,400
of works one of the the worst things

1287
00:57:58,570 --> 00:58:03,550
about this particular draft though is

1288
00:58:00,400 --> 00:58:07,240
that it is entirely detached from the

1289
00:58:03,550 --> 00:58:09,520
IETF process it is in ID that people

1290
00:58:07,240 --> 00:58:11,740
outside the IETF have been working on

1291
00:58:09,520 --> 00:58:16,300
and updating and changing more on that

1292
00:58:11,740 --> 00:58:18,129
in a moment and it's just kind of there

1293
00:58:16,300 --> 00:58:20,470
but people are using it

1294
00:58:18,130 --> 00:58:21,700
Oh auth depop and OAuth pop which yes

1295
00:58:20,470 --> 00:58:23,290
those are two completely different

1296
00:58:21,700 --> 00:58:26,439
things

1297
00:58:23,290 --> 00:58:27,970
they and as you can see they attack

1298
00:58:26,440 --> 00:58:31,050
different parts of the problem deep hop

1299
00:58:27,970 --> 00:58:34,480
is all about key proof of possession

1300
00:58:31,050 --> 00:58:39,120
whereas auth pop is about token

1301
00:58:34,480 --> 00:58:42,160
presentation and a message integrity

1302
00:58:39,120 --> 00:58:44,020
component with a key proof of that

1303
00:58:42,160 --> 00:58:47,890
presentation that kind of comes along

1304
00:58:44,020 --> 00:58:49,720
for the ride and that is that latter one

1305
00:58:47,890 --> 00:58:51,970
is also an expired working group draft

1306
00:58:49,720 --> 00:58:55,310
because you know it never really kind of

1307
00:58:51,970 --> 00:58:59,009
caught on the new XYZ project

1308
00:58:55,310 --> 00:59:00,840
that I've been working on which we

1309
00:58:59,010 --> 00:59:03,930
talked about the TX off off the other

1310
00:59:00,840 --> 00:59:06,930
day all that that does is it signs the

1311
00:59:03,930 --> 00:59:09,960
body it doesn't touch anything else so

1312
00:59:06,930 --> 00:59:11,970
that is extremely limited but it has its

1313
00:59:09,960 --> 00:59:14,730
uses as well and then there's the

1314
00:59:11,970 --> 00:59:17,520
proprietary ad of AWS v4 which predates

1315
00:59:14,730 --> 00:59:21,780
pretty much all of these which has its

1316
00:59:17,520 --> 00:59:24,930
own really really major limitations even

1317
00:59:21,780 --> 00:59:27,840
though it manages to cover a lot of the

1318
00:59:24,930 --> 00:59:31,129
columns here its major limitations is

1319
00:59:27,840 --> 00:59:33,960
that it's very tightly fit to AWS is

1320
00:59:31,130 --> 00:59:35,640
keying infrastructure with its key

1321
00:59:33,960 --> 00:59:37,290
derivation functions and stuff like that

1322
00:59:35,640 --> 00:59:40,859
that you have to do in order to make

1323
00:59:37,290 --> 00:59:45,509
this work right yes less than a minute

1324
00:59:40,860 --> 00:59:47,130
okay well so the cabbage signature

1325
00:59:45,510 --> 00:59:50,070
drafter that I mentioned before started

1326
00:59:47,130 --> 00:59:52,020
way back in 2013 as an individual draft

1327
00:59:50,070 --> 00:59:55,590
it got picked up by a bunch of people

1328
00:59:52,020 --> 00:59:57,690
and then earlier this year including a

1329
00:59:55,590 --> 01:00:00,660
couple of financial groups and earlier

1330
00:59:57,690 --> 01:00:02,760
this year the editors of that draft made

1331
01:00:00,660 --> 01:00:06,470
a bunch of edits which included the text

1332
01:00:02,760 --> 01:00:09,360
do not use this draft and that freaked

1333
01:00:06,470 --> 01:00:12,299
everybody out that was depending on this

1334
01:00:09,360 --> 01:00:14,280
and there was a scramble to peg against

1335
01:00:12,300 --> 01:00:15,750
a particular version and then there's

1336
01:00:14,280 --> 01:00:17,850
been more updates and stuff like that

1337
01:00:15,750 --> 01:00:20,400
and all of this kind of led me to

1338
01:00:17,850 --> 01:00:21,930
realize that you know enough people are

1339
01:00:20,400 --> 01:00:23,490
using this stuff enough people are

1340
01:00:21,930 --> 01:00:26,339
trying to reinvent this stuff I think

1341
01:00:23,490 --> 01:00:28,919
it's time that we brought this into the

1342
01:00:26,340 --> 01:00:31,860
fold and make this a real thing that

1343
01:00:28,920 --> 01:00:34,020
people can depend on for you know

1344
01:00:31,860 --> 01:00:36,120
stability and all of the iti process and

1345
01:00:34,020 --> 01:00:37,980
whatnot so where do we go from here I

1346
01:00:36,120 --> 01:00:39,180
don't actually know should we combine

1347
01:00:37,980 --> 01:00:40,980
all of these drafts in all of these

1348
01:00:39,180 --> 01:00:43,740
different use cases should we find a

1349
01:00:40,980 --> 01:00:45,270
working group where this makes sense we

1350
01:00:43,740 --> 01:00:47,640
talked about potentially targeting this

1351
01:00:45,270 --> 01:00:49,620
at the HTTP working group at the

1352
01:00:47,640 --> 01:00:51,750
dispatch thing should we start a new

1353
01:00:49,620 --> 01:00:55,380
working group to do just this one thing

1354
01:00:51,750 --> 01:00:57,570
I don't actually know so with that we'll

1355
01:00:55,380 --> 01:01:00,090
do comments and questions so what about

1356
01:00:57,570 --> 01:01:03,690
bringing these to http working group

1357
01:01:00,090 --> 01:01:07,060
mark maybe you want to yeah does mark

1358
01:01:03,690 --> 01:01:11,960
want to jump the queue for that maybe

1359
01:01:07,060 --> 01:01:14,090
and and also keep these short mark them

1360
01:01:11,960 --> 01:01:15,320
so this has been I think as I mentioned

1361
01:01:14,090 --> 01:01:17,030
before this has been an item that the

1362
01:01:15,320 --> 01:01:18,290
working group has HTP working group has

1363
01:01:17,030 --> 01:01:20,240
been had its eyes on for a while

1364
01:01:18,290 --> 01:01:21,980
especially cabbage but other things and

1365
01:01:20,240 --> 01:01:23,509
the confusion in this space is one

1366
01:01:21,980 --> 01:01:26,300
reason we've been a little bit resident

1367
01:01:23,510 --> 01:01:28,010
to start work from what you're saying

1368
01:01:26,300 --> 01:01:30,140
and obviously you're more engaged in

1369
01:01:28,010 --> 01:01:31,310
those communities than we've been it

1370
01:01:30,140 --> 01:01:33,020
sounds like it might be time to start

1371
01:01:31,310 --> 01:01:36,230
some work so I would support some work

1372
01:01:33,020 --> 01:01:39,020
in this area as you kind of alluded to

1373
01:01:36,230 --> 01:01:40,340
yeah I think this the the three

1374
01:01:39,020 --> 01:01:41,720
different groups of folks who need to be

1375
01:01:40,340 --> 01:01:43,370
involved here one is the users of

1376
01:01:41,720 --> 01:01:45,109
potential users of this technology

1377
01:01:43,370 --> 01:01:47,299
another is the security folks of course

1378
01:01:45,110 --> 01:01:49,280
another is the HP community to make sure

1379
01:01:47,300 --> 01:01:51,110
that it's being integrated into the

1380
01:01:49,280 --> 01:01:52,910
protocol well and as you mentioned

1381
01:01:51,110 --> 01:01:54,830
that's kind of the the tricky part of

1382
01:01:52,910 --> 01:01:56,270
all of this right so I had a quick chat

1383
01:01:54,830 --> 01:01:57,830
with my co-chair just now and I think

1384
01:01:56,270 --> 01:02:00,830
we'd be happy to consider a call for

1385
01:01:57,830 --> 01:02:02,060
adoption if you're interested if if you

1386
01:02:00,830 --> 01:02:04,610
want to dispatch the south where that's

1387
01:02:02,060 --> 01:02:06,020
fine too but I'd one West that you ADEs

1388
01:02:04,610 --> 01:02:06,950
talk to our ID so we can do some

1389
01:02:06,020 --> 01:02:08,420
coordination and figure out the best

1390
01:02:06,950 --> 01:02:10,520
place for it to land if that's gonna

1391
01:02:08,420 --> 01:02:12,320
happen yes I would I would consider this

1392
01:02:10,520 --> 01:02:14,600
in scope of our Charter that that

1393
01:02:12,320 --> 01:02:16,700
honestly would be fantastic we'll figure

1394
01:02:14,600 --> 01:02:18,860
it out with the ADEs when I initially

1395
01:02:16,700 --> 01:02:21,529
brought this up with with the SEC ADEs

1396
01:02:18,860 --> 01:02:23,540
the the thought was that this really is

1397
01:02:21,530 --> 01:02:25,000
on the line between the two areas and we

1398
01:02:23,540 --> 01:02:30,100
do need people from both sides

1399
01:02:25,000 --> 01:02:32,750
yeah but yes thank you I feel them Baker

1400
01:02:30,100 --> 01:02:35,569
actually I was gonna say that I don't

1401
01:02:32,750 --> 01:02:39,230
seem to be online I think it's and your

1402
01:02:35,570 --> 01:02:42,460
work is gonna be entirely HTTP okay I

1403
01:02:39,230 --> 01:02:45,770
act I it wasn't just Eric who try to do

1404
01:02:42,460 --> 01:02:50,330
this stuff back in the day I did it as

1405
01:02:45,770 --> 01:02:51,140
well but I catch relation is actually

1406
01:02:50,330 --> 01:02:53,960
the way to go

1407
01:02:51,140 --> 01:02:56,390
you're on to lose here you can

1408
01:02:53,960 --> 01:02:59,630
optimization always loses otoscope thank

1409
01:02:56,390 --> 01:03:02,240
you may be a silly question

1410
01:02:59,630 --> 01:03:05,480
iran chef have you actually talked to

1411
01:03:02,240 --> 01:03:08,419
the cabbage authors yes and they asked

1412
01:03:05,480 --> 01:03:11,540
me to present this yeah so I talked to

1413
01:03:08,420 --> 01:03:14,840
my nurse morning specifically about this

1414
01:03:11,540 --> 01:03:19,310
and he is keen on getting this targeted

1415
01:03:14,840 --> 01:03:22,850
to an actual place now so here we are

1416
01:03:19,310 --> 01:03:24,860
so we're cutting the line here I spoke

1417
01:03:22,850 --> 01:03:28,250
to cabbage about this one probably five

1418
01:03:24,860 --> 01:03:30,770
years ago now and he was quite keen to

1419
01:03:28,250 --> 01:03:32,480
have it go here but wasn't really able

1420
01:03:30,770 --> 01:03:34,130
to invest the effort required to get it

1421
01:03:32,480 --> 01:03:36,170
over the line I learnt that someone's

1422
01:03:34,130 --> 01:03:38,330
willing to do that this is really tricky

1423
01:03:36,170 --> 01:03:42,890
from an integration perspective though

1424
01:03:38,330 --> 01:03:46,130
and I caution that you know comments

1425
01:03:42,890 --> 01:03:48,080
like pH B's just now are quite valid and

1426
01:03:46,130 --> 01:03:50,630
I think that we we have to think about

1427
01:03:48,080 --> 01:03:53,509
that in this context very carefully I

1428
01:03:50,630 --> 01:03:55,040
realize that people are using this but

1429
01:03:53,510 --> 01:03:57,530
though there's there's attention is that

1430
01:03:55,040 --> 01:04:00,200
this creates between end points and

1431
01:03:57,530 --> 01:04:02,120
intermediaries and and protocol actors

1432
01:04:00,200 --> 01:04:04,089
within HTTP that make it look very

1433
01:04:02,120 --> 01:04:06,650
tricky Oh

1434
01:04:04,090 --> 01:04:08,930
my suggestion would be that the primary

1435
01:04:06,650 --> 01:04:11,270
venue for this one would be the HTTP

1436
01:04:08,930 --> 01:04:14,149
side of things and we were bringing in

1437
01:04:11,270 --> 01:04:16,250
expertise the the crypto expertise that

1438
01:04:14,150 --> 01:04:18,740
you need in order to do something like

1439
01:04:16,250 --> 01:04:20,180
this is a little sophisticated so we

1440
01:04:18,740 --> 01:04:23,000
will definitely need some help there but

1441
01:04:20,180 --> 01:04:24,440
it's still fairly basic stuff but the

1442
01:04:23,000 --> 01:04:25,940
tricky part is getting in the protocol

1443
01:04:24,440 --> 01:04:28,990
so I would get encouraged there we go

1444
01:04:25,940 --> 01:04:31,940
there yeah I'm absolutely with you

1445
01:04:28,990 --> 01:04:35,299
Annabel Bachman Amazon a couple of quick

1446
01:04:31,940 --> 01:04:37,820
points first of all you know since we've

1447
01:04:35,300 --> 01:04:40,250
been operating signature version four as

1448
01:04:37,820 --> 01:04:43,190
our main request authentication

1449
01:04:40,250 --> 01:04:47,110
mechanism for years now we can attest to

1450
01:04:43,190 --> 01:04:50,960
the viability of a detached signature

1451
01:04:47,110 --> 01:04:54,050
protocol at scale across a wide variety

1452
01:04:50,960 --> 01:04:57,800
of services with a wide variety of API

1453
01:04:54,050 --> 01:05:01,970
formats we encapsulation is not the only

1454
01:04:57,800 --> 01:05:05,060
way that this can be done in addition to

1455
01:05:01,970 --> 01:05:10,279
that Justin mentioned me putting forward

1456
01:05:05,060 --> 01:05:13,009
two other drafts what I've done is taken

1457
01:05:10,280 --> 01:05:16,100
the expired draft that Justin wrote the

1458
01:05:13,010 --> 01:05:19,460
OAuth pop spec and split it out into two

1459
01:05:16,100 --> 01:05:23,319
different layers pulling the HTTP

1460
01:05:19,460 --> 01:05:27,230
message signing pieces out into its own

1461
01:05:23,320 --> 01:05:30,170
piece independent from all of the OAuth

1462
01:05:27,230 --> 01:05:31,580
specific details of how you attach them

1463
01:05:30,170 --> 01:05:32,839
how you put that message into the

1464
01:05:31,580 --> 01:05:34,848
request what do you

1465
01:05:32,839 --> 01:05:36,890
to sign whatnot I really think that's

1466
01:05:34,849 --> 01:05:41,239
that kind of layered approach is the

1467
01:05:36,890 --> 01:05:43,609
right strategy here the all of the work

1468
01:05:41,239 --> 01:05:46,849
related specifically to signing elements

1469
01:05:43,609 --> 01:05:50,839
of an HTTP message that belongs in HTTP

1470
01:05:46,849 --> 01:05:53,410
how you apply that in specific context

1471
01:05:50,839 --> 01:05:56,479
for example to do proof of possession

1472
01:05:53,410 --> 01:05:58,339
for OS is something that the OAuth

1473
01:05:56,479 --> 01:06:00,979
working group can handle and other

1474
01:05:58,339 --> 01:06:03,410
working groups can can leverage that

1475
01:06:00,979 --> 01:06:06,200
that signing work as well as as

1476
01:06:03,410 --> 01:06:07,578
appropriate to their use case yeah I

1477
01:06:06,200 --> 01:06:10,879
agree everything that we've had so far

1478
01:06:07,579 --> 01:06:12,140
has been very packed together I think we

1479
01:06:10,880 --> 01:06:14,630
might see multiple drafts out of this

1480
01:06:12,140 --> 01:06:18,979
and I'd be happy to put forward the

1481
01:06:14,630 --> 01:06:21,469
message signing draft in HTTP working

1482
01:06:18,979 --> 01:06:23,328
group submitted there and hold depend on

1483
01:06:21,469 --> 01:06:25,910
that if if we need people to pick that

1484
01:06:23,329 --> 01:06:29,719
work up okay so it seems pretty clear

1485
01:06:25,910 --> 01:06:32,328
that this is going to HTTP so we can I

1486
01:06:29,719 --> 01:06:34,729
mean move on yeah pending pending

1487
01:06:32,329 --> 01:06:36,349
coordination with chairs it seems like

1488
01:06:34,729 --> 01:06:38,749
this is probably going to be an age to

1489
01:06:36,349 --> 01:06:57,829
be work item that sounds fair

1490
01:06:38,749 --> 01:07:01,249
okay cool thank you this worked out that

1491
01:06:57,829 --> 01:07:04,729
I will present has been planned for a

1492
01:07:01,249 --> 01:07:06,738
researching group I rkf research group

1493
01:07:04,729 --> 01:07:09,618
that unfortunately has not been charted

1494
01:07:06,739 --> 01:07:12,769
so I'm here to ask for feedback whether

1495
01:07:09,619 --> 01:07:19,219
it is research or engineering or if you

1496
01:07:12,769 --> 01:07:22,038
have suggestions where to go so the

1497
01:07:19,219 --> 01:07:24,589
background of this work is the concept

1498
01:07:22,039 --> 01:07:30,259
of systems as has been defined by the

1499
01:07:24,589 --> 01:07:33,499
ITF so the past incidents have proven

1500
01:07:30,259 --> 01:07:35,329
that systems can no longer be considered

1501
01:07:33,499 --> 01:07:37,009
secure we have fallen abilities at all

1502
01:07:35,329 --> 01:07:39,349
layers starting with spectrum Eltham

1503
01:07:37,009 --> 01:07:42,349
from hardware and then going up to upper

1504
01:07:39,349 --> 01:07:43,789
layers so vulnerabilities do exist in

1505
01:07:42,349 --> 01:07:45,650
these systems and it is question of

1506
01:07:43,789 --> 01:07:46,770
matter and time and resources to exploit

1507
01:07:45,650 --> 01:07:50,940
this

1508
01:07:46,770 --> 01:07:55,470
this varner abilities system complexity

1509
01:07:50,940 --> 01:07:58,020
is not no longer manageable all of these

1510
01:07:55,470 --> 01:07:59,970
vulnerabilities they are packed in one

1511
01:07:58,020 --> 01:08:02,250
module that is reused by someone else

1512
01:07:59,970 --> 01:08:05,370
you purchase hardware designs integrated

1513
01:08:02,250 --> 01:08:07,530
into your design so it is this this

1514
01:08:05,370 --> 01:08:11,569
concept of having or improving the

1515
01:08:07,530 --> 01:08:14,760
security of a system is somehow outdated

1516
01:08:11,570 --> 01:08:17,690
moreover we are focusing on the area of

1517
01:08:14,760 --> 01:08:21,210
critical infrastructures where

1518
01:08:17,689 --> 01:08:23,819
monocultures are developing so operators

1519
01:08:21,210 --> 01:08:26,279
have incentives to have just one single

1520
01:08:23,819 --> 01:08:29,009
hardware design to operate one single

1521
01:08:26,279 --> 01:08:31,950
firmware and have one single software

1522
01:08:29,010 --> 01:08:33,990
and hundreds of thousands or tens of

1523
01:08:31,950 --> 01:08:41,700
thousands of devices thing about smart

1524
01:08:33,990 --> 01:08:43,559
meters and so on in RFC 3550 2 it is

1525
01:08:41,700 --> 01:08:45,300
stated that protecting against an attack

1526
01:08:43,560 --> 01:08:46,890
when one of the end systems has been

1527
01:08:45,300 --> 01:08:50,910
compromised is extraordinarily difficult

1528
01:08:46,890 --> 01:08:53,100
and we have asked ourselves what doesn't

1529
01:08:50,910 --> 01:08:56,220
mean what what does compromise mean in

1530
01:08:53,100 --> 01:08:59,000
this context so it is obvious this isn't

1531
01:08:56,220 --> 01:09:01,560
required statement it is it is very

1532
01:08:59,000 --> 01:09:03,510
important to have this chain of trust

1533
01:09:01,560 --> 01:09:06,780
between systems because otherwise we

1534
01:09:03,510 --> 01:09:09,690
can't do anything but the systems are

1535
01:09:06,779 --> 01:09:12,679
vulnerable that's a fact so and malware

1536
01:09:09,689 --> 01:09:15,750
intends to exploit these vulnerabilities

1537
01:09:12,680 --> 01:09:18,330
we need some solutions we need to better

1538
01:09:15,750 --> 01:09:21,620
than than saying we give up whenever one

1539
01:09:18,330 --> 01:09:24,899
system in this chain of 1000 systems is

1540
01:09:21,620 --> 01:09:28,439
infected so we need to isolate we need

1541
01:09:24,899 --> 01:09:31,920
to contain all of these devices as an

1542
01:09:28,439 --> 01:09:34,319
example and and the challenge here is

1543
01:09:31,920 --> 01:09:37,700
that these devices are low cost that

1544
01:09:34,319 --> 01:09:39,660
we're talking about and they have

1545
01:09:37,700 --> 01:09:43,050
adversaries have physical access to

1546
01:09:39,660 --> 01:09:46,710
these devices electrical vehicle

1547
01:09:43,050 --> 01:09:49,050
charging stations now are updated to 350

1548
01:09:46,710 --> 01:09:52,160
kilowatts which corresponds to more than

1549
01:09:49,050 --> 01:09:54,840
500 households of energy consumption and

1550
01:09:52,160 --> 01:09:58,170
it's a matter of loosening some screws

1551
01:09:54,840 --> 01:10:00,370
and accessing the device to compromise

1552
01:09:58,170 --> 01:10:03,920
it

1553
01:10:00,370 --> 01:10:10,790
good in parallel security protocols are

1554
01:10:03,920 --> 01:10:13,489
deployed at large scale now and in the

1555
01:10:10,790 --> 01:10:19,550
lowest line you have a a reference that

1556
01:10:13,489 --> 01:10:21,830
points out that this security might also

1557
01:10:19,550 --> 01:10:24,970
create a platform for malware to

1558
01:10:21,830 --> 01:10:26,960
propagate and do subliminal channels and

1559
01:10:24,970 --> 01:10:28,790
secret communications or hidden

1560
01:10:26,960 --> 01:10:31,370
communications which might be very

1561
01:10:28,790 --> 01:10:35,360
difficult to detect so what we've done

1562
01:10:31,370 --> 01:10:37,670
here is just to implement the command

1563
01:10:35,360 --> 01:10:39,620
and control structure for botnets using

1564
01:10:37,670 --> 01:10:41,300
Bitcoin in the blockchain and the

1565
01:10:39,620 --> 01:10:45,349
signature being bedded some-some

1566
01:10:41,300 --> 01:10:50,600
commands that were then taken and and

1567
01:10:45,350 --> 01:10:52,520
adopted by clients good the motivation

1568
01:10:50,600 --> 01:10:54,500
of this work is that malware has

1569
01:10:52,520 --> 01:10:56,030
incentives to communicate we want to

1570
01:10:54,500 --> 01:10:59,510
discover this communication between

1571
01:10:56,030 --> 01:11:01,790
malware in instances the more

1572
01:10:59,510 --> 01:11:04,460
communication we argue the more

1573
01:11:01,790 --> 01:11:06,890
important it is and and the more the

1574
01:11:04,460 --> 01:11:09,739
higher the threat that is malware can

1575
01:11:06,890 --> 01:11:12,920
can cause in overall in the larger

1576
01:11:09,739 --> 01:11:15,290
system the challenges are high because

1577
01:11:12,920 --> 01:11:18,500
malware has started recently so can't

1578
01:11:15,290 --> 01:11:20,810
while mother variants already monitor

1579
01:11:18,500 --> 01:11:23,960
the traffic's the benign traffic on the

1580
01:11:20,810 --> 01:11:26,060
network and try to to obfuscate within

1581
01:11:23,960 --> 01:11:31,430
this traffic to use the same protocols

1582
01:11:26,060 --> 01:11:34,600
to encrypt data and so on and so on what

1583
01:11:31,430 --> 01:11:36,800
we propose is to complement existing

1584
01:11:34,600 --> 01:11:41,000
security measures that is we do not want

1585
01:11:36,800 --> 01:11:43,670
to say we replace them but we want to -

1586
01:11:41,000 --> 01:11:46,239
to provide additional means of security

1587
01:11:43,670 --> 01:11:49,280
as a proactive measures we want to

1588
01:11:46,239 --> 01:11:52,339
inhibit malware communication by design

1589
01:11:49,280 --> 01:11:55,429
meaning we have shown in signatures of

1590
01:11:52,340 --> 01:11:58,910
the bot chain it is possible to in to

1591
01:11:55,430 --> 01:12:01,489
include command and control structures

1592
01:11:58,910 --> 01:12:06,320
how is it with other protocols that is

1593
01:12:01,489 --> 01:12:07,820
to evaluate the potential of hidden

1594
01:12:06,320 --> 01:12:10,210
communication in these protocols that

1595
01:12:07,820 --> 01:12:13,409
are used in critical infrastructures and

1596
01:12:10,210 --> 01:12:17,280
but my talk now is about reactive man

1597
01:12:13,409 --> 01:12:20,129
and that's a draft also about we want to

1598
01:12:17,280 --> 01:12:23,730
detect this hidden communication and

1599
01:12:20,130 --> 01:12:26,670
what we did is and the question research

1600
01:12:23,730 --> 01:12:28,559
question is here can we detect and

1601
01:12:26,670 --> 01:12:30,840
capture malware behavior in these

1602
01:12:28,560 --> 01:12:34,080
networks what we did was to design a

1603
01:12:30,840 --> 01:12:36,810
generic malware lifecycle model which

1604
01:12:34,080 --> 01:12:42,690
basically captures the behavior of known

1605
01:12:36,810 --> 01:12:47,820
malware variant in the wild and if you

1606
01:12:42,690 --> 01:12:51,388
look carefully this diagram here mean

1607
01:12:47,820 --> 01:12:55,679
equals the concept of compromised in the

1608
01:12:51,389 --> 01:12:58,050
current IDF security concept so what

1609
01:12:55,679 --> 01:13:00,750
does compromised really mean does it

1610
01:12:58,050 --> 01:13:02,940
mean we have infections does it mean we

1611
01:13:00,750 --> 01:13:05,730
have gained access to system does it

1612
01:13:02,940 --> 01:13:08,428
mean we have control over the system so

1613
01:13:05,730 --> 01:13:11,009
it is much finer granularity and we

1614
01:13:08,429 --> 01:13:14,639
believe that and and the essence is that

1615
01:13:11,010 --> 01:13:17,550
we have various states and these states

1616
01:13:14,639 --> 01:13:19,620
are subject to communication to change

1617
01:13:17,550 --> 01:13:22,260
so we have transitions between these

1618
01:13:19,620 --> 01:13:24,809
states that you see cyclic one we have

1619
01:13:22,260 --> 01:13:26,580
scans that also originate traffic we

1620
01:13:24,810 --> 01:13:30,510
want to capture this traffic as a

1621
01:13:26,580 --> 01:13:32,309
monitoring part and to infer on the

1622
01:13:30,510 --> 01:13:35,550
existence of malware to detect anomalies

1623
01:13:32,310 --> 01:13:39,120
in the network two minutes thank you

1624
01:13:35,550 --> 01:13:43,310
I'll do fine good so and now the

1625
01:13:39,120 --> 01:13:48,210
question is how can we use this

1626
01:13:43,310 --> 01:13:52,620
lifecycle model to improve the security

1627
01:13:48,210 --> 01:13:54,120
of systems as a future research question

1628
01:13:52,620 --> 01:13:57,090
we discussed it before in a society

1629
01:13:54,120 --> 01:14:00,269
meeting and the conclusion was it's

1630
01:13:57,090 --> 01:14:04,320
challenging it's very challenging so can

1631
01:14:00,270 --> 01:14:06,989
we quantify can we define metrics to

1632
01:14:04,320 --> 01:14:10,349
quantify the behavior and and the

1633
01:14:06,989 --> 01:14:14,790
support for subliminal channels within

1634
01:14:10,350 --> 01:14:18,179
existing security protocols good as an

1635
01:14:14,790 --> 01:14:19,650
Outlook so this generic malware life

1636
01:14:18,179 --> 01:14:22,830
cycle is something that we perceive

1637
01:14:19,650 --> 01:14:27,820
could help to improve future evolution

1638
01:14:22,830 --> 01:14:30,100
of security to give an additional

1639
01:14:27,820 --> 01:14:32,880
potential and and additional security

1640
01:14:30,100 --> 01:14:37,030
for in particular for critical in stress

1641
01:14:32,880 --> 01:14:39,970
infrastructures now the question is is

1642
01:14:37,030 --> 01:14:42,429
this the home for this work is it IRT F

1643
01:14:39,970 --> 01:14:44,830
is it IETF are there specific groups

1644
01:14:42,430 --> 01:14:47,440
where this fits in we have a funded

1645
01:14:44,830 --> 01:14:48,940
research project now that combines

1646
01:14:47,440 --> 01:14:51,669
various stakeholders so we have a

1647
01:14:48,940 --> 01:14:54,250
ministry we have two utilities or three

1648
01:14:51,670 --> 01:14:57,480
research institutions and antivirus

1649
01:14:54,250 --> 01:15:01,600
company that all team up together to

1650
01:14:57,480 --> 01:15:04,809
research on the challenges in the can't

1651
01:15:01,600 --> 01:15:07,960
evict infrastructure we start at a very

1652
01:15:04,810 --> 01:15:11,350
low level if you know how the current

1653
01:15:07,960 --> 01:15:14,890
state of electrical vehicle charging is

1654
01:15:11,350 --> 01:15:18,310
with respect to security but we hope to

1655
01:15:14,890 --> 01:15:21,400
get some good results and yes we believe

1656
01:15:18,310 --> 01:15:24,400
that the results are of relevance and if

1657
01:15:21,400 --> 01:15:27,549
there is any feedback and any any any

1658
01:15:24,400 --> 01:15:36,940
opinion where this should go to I'll be

1659
01:15:27,550 --> 01:15:39,970
happy to get feedback hello okay so it's

1660
01:15:36,940 --> 01:15:42,280
not clear to me exactly what you're

1661
01:15:39,970 --> 01:15:46,260
trying to propose I'm not sure that the

1662
01:15:42,280 --> 01:15:49,360
generic working on malware is

1663
01:15:46,260 --> 01:15:51,040
appropriate for the IETF there are

1664
01:15:49,360 --> 01:15:53,500
nuggets in here that talk about

1665
01:15:51,040 --> 01:15:55,930
proactive measurements rates and

1666
01:15:53,500 --> 01:16:00,820
protocols perhaps that could go into

1667
01:15:55,930 --> 01:16:03,750
like the map RG as they've done so in in

1668
01:16:00,820 --> 01:16:06,490
this session for example there was a

1669
01:16:03,750 --> 01:16:10,020
presentations on different measurements

1670
01:16:06,490 --> 01:16:13,269
for detection of anomalies if you will

1671
01:16:10,020 --> 01:16:15,460
but as a whole I guess I'm kind of

1672
01:16:13,270 --> 01:16:18,820
struggling to figure out how to dispatch

1673
01:16:15,460 --> 01:16:23,290
because it's somewhat broad so with that

1674
01:16:18,820 --> 01:16:25,330
I'm gonna do the quick discussion before

1675
01:16:23,290 --> 01:16:30,040
we figure out how to help provide

1676
01:16:25,330 --> 01:16:31,960
guidance good so right it is also about

1677
01:16:30,040 --> 01:16:34,600
measurements it is about anomaly

1678
01:16:31,960 --> 01:16:36,930
detection mainly because the challenge

1679
01:16:34,600 --> 01:16:39,640
will not be the measurement itself but

1680
01:16:36,930 --> 01:16:40,550
that the focus will be the anomaly

1681
01:16:39,640 --> 01:16:43,030
detection of

1682
01:16:40,550 --> 01:16:47,059
of these anomalies in encrypted traffic

1683
01:16:43,030 --> 01:16:50,840
finally so it is it spans several areas

1684
01:16:47,059 --> 01:16:54,800
that are yeah so so let's have our our

1685
01:16:50,840 --> 01:16:56,179
ad comment hi Roman didn't you I was

1686
01:16:54,800 --> 01:16:59,360
just hoping can you talk a little bit

1687
01:16:56,179 --> 01:17:02,210
more about that first bullet no I'm

1688
01:16:59,360 --> 01:17:03,530
that's lie it was so can you talk a

1689
01:17:02,210 --> 01:17:05,119
little bit more about the specifics of

1690
01:17:03,530 --> 01:17:09,769
that lifecycle model there and how you

1691
01:17:05,119 --> 01:17:12,259
see that manifesting in ITF work this

1692
01:17:09,770 --> 01:17:14,900
lifecycle model is supposed to be mapped

1693
01:17:12,260 --> 01:17:23,540
to the security model that we have in

1694
01:17:14,900 --> 01:17:26,480
RFC 3550 - so about a compromised point

1695
01:17:23,540 --> 01:17:30,699
here right now we when when do we

1696
01:17:26,480 --> 01:17:34,400
consider a system being compromised is

1697
01:17:30,699 --> 01:17:36,919
it so when do we stop can't ITF

1698
01:17:34,400 --> 01:17:39,079
activities basically if you take it this

1699
01:17:36,920 --> 01:17:41,989
way saying that the system has been

1700
01:17:39,079 --> 01:17:45,409
compromised so it is extremely extremely

1701
01:17:41,989 --> 01:17:47,388
difficult to defend against we believe

1702
01:17:45,409 --> 01:17:49,129
that we can do better by adding

1703
01:17:47,389 --> 01:17:53,239
additional functionality to do all of

1704
01:17:49,130 --> 01:17:55,099
these mechanisms so it's a source of

1705
01:17:53,239 --> 01:17:58,250
resilience thing we're talking it is a

1706
01:17:55,099 --> 01:18:00,139
resilience yeah resilience it is it is

1707
01:17:58,250 --> 01:18:03,590
an additional feature is this supposed

1708
01:18:00,139 --> 01:18:05,540
to be a monitoring device that monitors

1709
01:18:03,590 --> 01:18:08,540
a critical infrastructure the packet

1710
01:18:05,540 --> 01:18:11,510
packet level traces so this is related

1711
01:18:08,540 --> 01:18:13,579
to measurements then but it is related

1712
01:18:11,510 --> 01:18:15,980
also how can we process all of this data

1713
01:18:13,579 --> 01:18:18,769
it will be in no enormous amount of data

1714
01:18:15,980 --> 01:18:21,079
all of this data and it is about finally

1715
01:18:18,770 --> 01:18:24,579
about malware behavior how does malware

1716
01:18:21,079 --> 01:18:24,579
behave how can I

1717
01:18:26,329 --> 01:18:30,920
all of these transitions are

1718
01:18:27,980 --> 01:18:33,980
characterized by specific features so

1719
01:18:30,920 --> 01:18:36,559
for instance triggering a scan or a

1720
01:18:33,980 --> 01:18:38,480
discovery might cause a lot of traffic

1721
01:18:36,559 --> 01:18:40,880
my cause less traffic

1722
01:18:38,480 --> 01:18:43,699
depending on the topple and on the on

1723
01:18:40,880 --> 01:18:46,639
the kind of activity whether I trigger a

1724
01:18:43,699 --> 01:18:49,669
blind scan a trigger topological scan or

1725
01:18:46,639 --> 01:18:52,829
a passive scan or a control message will

1726
01:18:49,670 --> 01:18:54,840
be small and I have no quorum

1727
01:18:52,829 --> 01:18:57,058
I have a causal dependence between a

1728
01:18:54,840 --> 01:18:59,849
message arriving at the malware and an

1729
01:18:57,059 --> 01:19:01,409
affected instance and causing an attack

1730
01:18:59,849 --> 01:19:04,320
but I have no temper or not

1731
01:19:01,409 --> 01:19:06,119
chronological dependence so I do not

1732
01:19:04,320 --> 01:19:08,130
know I have received a message in the

1733
01:19:06,119 --> 01:19:10,440
past and in the future it will trigger

1734
01:19:08,130 --> 01:19:11,869
an action okay I'm gonna cut the line at

1735
01:19:10,440 --> 01:19:14,848
URI

1736
01:19:11,869 --> 01:19:17,579
cool so and there's some interesting

1737
01:19:14,849 --> 01:19:19,230
stuff in here as we discussed previously

1738
01:19:17,579 --> 01:19:21,630
I think that the focuses of little

1739
01:19:19,230 --> 01:19:22,829
channels kind of destruction we die TF

1740
01:19:21,630 --> 01:19:23,940
decide if two kind of caught through

1741
01:19:22,829 --> 01:19:25,969
they decided not to like really make an

1742
01:19:23,940 --> 01:19:27,808
effort to release subliminal channels in

1743
01:19:25,969 --> 01:19:29,250
current protocols and there's like an

1744
01:19:27,809 --> 01:19:30,630
enormous amount of like literature on

1745
01:19:29,250 --> 01:19:35,579
that like probably he's not worth the

1746
01:19:30,630 --> 01:19:38,010
capitulating so uh by certainly like you

1747
01:19:35,579 --> 01:19:38,849
know malware's real thin um but I do

1748
01:19:38,010 --> 01:19:41,489
have a suggestion for you

1749
01:19:38,849 --> 01:19:43,829
which is there's currently a I ABO

1750
01:19:41,489 --> 01:19:45,178
Graham I think it's called Model T so

1751
01:19:43,829 --> 01:19:48,299
they're calling it about looking at the

1752
01:19:45,179 --> 01:19:49,699
threat model for for the ITF and

1753
01:19:48,300 --> 01:19:53,070
discussing potentially we're visiting

1754
01:19:49,699 --> 01:19:55,829
3552 on since this isn't really a

1755
01:19:53,070 --> 01:19:57,808
protocol specification um but his work a

1756
01:19:55,829 --> 01:19:59,759
threat model on about on malware I was

1757
01:19:57,809 --> 01:20:01,199
just that you take it there um I don't

1758
01:19:59,760 --> 01:20:03,179
know Steven Farrell's in the room he's

1759
01:20:01,199 --> 01:20:07,610
leading that program but in any case

1760
01:20:03,179 --> 01:20:13,139
it's not hard to find okay thank you

1761
01:20:07,610 --> 01:20:15,780
yeah I just wonder about why you think

1762
01:20:13,139 --> 01:20:19,409
there's value there's value in forming a

1763
01:20:15,780 --> 01:20:21,570
malware lifecycle model when a lot of a

1764
01:20:19,409 --> 01:20:24,449
lot of network equipment today already

1765
01:20:21,570 --> 01:20:26,719
come equipped with uh with the with

1766
01:20:24,449 --> 01:20:29,549
intrusion detection systems based on

1767
01:20:26,719 --> 01:20:32,790
adaptive technology such as machine on

1768
01:20:29,550 --> 01:20:34,349
board machine learning engines and jury

1769
01:20:32,790 --> 01:20:37,230
money I'm Qualcomm I know my company I

1770
01:20:34,349 --> 01:20:39,449
all makes access point processors with

1771
01:20:37,230 --> 01:20:41,280
uh with onboard machine learning engines

1772
01:20:39,449 --> 01:20:41,759
I wouldn't really try to solve this

1773
01:20:41,280 --> 01:20:44,040
problem

1774
01:20:41,760 --> 01:20:46,349
y'all forming a life cycle model more

1775
01:20:44,040 --> 01:20:48,329
than I would actually try to train an

1776
01:20:46,349 --> 01:20:50,880
engine based on traffic characteristics

1777
01:20:48,329 --> 01:20:52,679
that I expect to be normal within the

1778
01:20:50,880 --> 01:20:54,630
private network so why do you think this

1779
01:20:52,679 --> 01:20:56,550
is a better approach versus something

1780
01:20:54,630 --> 01:20:58,380
more adaptive this is a better approach

1781
01:20:56,550 --> 01:21:01,440
because we have a finer granularity on

1782
01:20:58,380 --> 01:21:03,530
these attacks we can detect when we want

1783
01:21:01,440 --> 01:21:05,870
to amplitude

1784
01:21:03,530 --> 01:21:09,110
detect when a specific malware is in a

1785
01:21:05,870 --> 01:21:11,950
specific stage of its evolution so we

1786
01:21:09,110 --> 01:21:14,839
want it's it's what ideas are doing

1787
01:21:11,950 --> 01:21:17,990
however most ideas are still pattern

1788
01:21:14,840 --> 01:21:20,330
based they're trying now to do machine

1789
01:21:17,990 --> 01:21:22,820
learn based that's what we do too but

1790
01:21:20,330 --> 01:21:25,850
however this disk granularity having

1791
01:21:22,820 --> 01:21:28,370
intelligence that adds on on specific

1792
01:21:25,850 --> 01:21:31,340
tasks and activities of a malware in

1793
01:21:28,370 --> 01:21:33,380
critical infrastructures and we have

1794
01:21:31,340 --> 01:21:36,260
also architecture I didn't mention this

1795
01:21:33,380 --> 01:21:38,350
but we have architectural topics there

1796
01:21:36,260 --> 01:21:41,360
to isolate and part of this architecture

1797
01:21:38,350 --> 01:21:42,890
part of the subsystems from the rest of

1798
01:21:41,360 --> 01:21:44,660
the systems trying to maintain the

1799
01:21:42,890 --> 01:21:48,260
functionality of the rest of the system

1800
01:21:44,660 --> 01:21:51,470
so it is a kind of resilience yeah yeah

1801
01:21:48,260 --> 01:21:53,540
I mean I would say that I would say it's

1802
01:21:51,470 --> 01:21:56,060
hard to measure success of an approach

1803
01:21:53,540 --> 01:21:58,670
like this if you if you cannot say well

1804
01:21:56,060 --> 01:22:03,290
I can easily deploy this model and keep

1805
01:21:58,670 --> 01:22:06,170
the false alarm we got to wrap this up

1806
01:22:03,290 --> 01:22:07,760
in quick last comment just a

1807
01:22:06,170 --> 01:22:09,950
clarification to a point that echo is

1808
01:22:07,760 --> 01:22:11,780
making Model T is not yet a program

1809
01:22:09,950 --> 01:22:13,580
there's a mailing list and some active

1810
01:22:11,780 --> 01:22:14,690
discussion and certainly if you talk to

1811
01:22:13,580 --> 01:22:16,460
Steven he'd be happy to add you to

1812
01:22:14,690 --> 01:22:18,530
mailing list and you can during that

1813
01:22:16,460 --> 01:22:20,600
discussion but if you're scrambling to

1814
01:22:18,530 --> 01:22:22,550
go to the iba website and go where is

1815
01:22:20,600 --> 01:22:25,850
this program there's nothing here that's

1816
01:22:22,550 --> 01:22:28,460
why okay thank you yeah I think you the

1817
01:22:25,850 --> 01:22:30,590
chair has been talking back charities I

1818
01:22:28,460 --> 01:22:32,450
think that's probably the best next step

1819
01:22:30,590 --> 01:22:34,250
for you to talk those Model T folks all

1820
01:22:32,450 --> 01:22:44,540
right thanks and finally Brian Campbell

1821
01:22:34,250 --> 01:22:47,870
we got five minutes left for you to chat

1822
01:22:44,540 --> 01:22:54,610
to talk to the IAB Model T proposed

1823
01:22:47,870 --> 01:22:54,610
program it's the threat model evolution

1824
01:22:59,010 --> 01:23:02,830
all right try to do this in a few

1825
01:23:01,330 --> 01:23:05,170
minutes I want to talk about conveying

1826
01:23:02,830 --> 01:23:07,389
clients certificate information a lot of

1827
01:23:05,170 --> 01:23:12,510
words here from TLS terminating reverse

1828
01:23:07,389 --> 01:23:12,510
proxies to back in HTTP applications

1829
01:23:12,750 --> 01:23:19,989
quick kind of overview of the problem

1830
01:23:15,489 --> 01:23:22,509
statement is that in a lot of HT a HTTP

1831
01:23:19,989 --> 01:23:25,928
application deployments oftentimes TOS

1832
01:23:22,510 --> 01:23:27,219
is is terminated by some reverse proxy

1833
01:23:25,929 --> 01:23:29,380
that sits in front of the actual

1834
01:23:27,219 --> 01:23:30,909
application somewhere this is true in a

1835
01:23:29,380 --> 01:23:32,830
lot of different architectures in the

1836
01:23:30,909 --> 01:23:35,589
kind of old-fashioned sort of interior

1837
01:23:32,830 --> 01:23:38,019
reverse proxy and back in origin server

1838
01:23:35,590 --> 01:23:39,820
architecture it's true now with things

1839
01:23:38,020 --> 01:23:41,469
like you see with CD and as the service

1840
01:23:39,820 --> 01:23:44,500
type offerings or application load

1841
01:23:41,469 --> 01:23:46,210
balancing type offering services and you

1842
01:23:44,500 --> 01:23:47,889
also seen it even in micro service type

1843
01:23:46,210 --> 01:23:50,320
deployments where you have this sidecar

1844
01:23:47,889 --> 01:23:52,420
proxy pattern so even though things are

1845
01:23:50,320 --> 01:23:54,309
changing this this it's a recurring

1846
01:23:52,420 --> 01:23:57,250
pattern of TLS has terminated somewhere

1847
01:23:54,310 --> 01:24:00,219
up front and the the backend application

1848
01:23:57,250 --> 01:24:02,739
isn't isn't talking to us with the

1849
01:24:00,219 --> 01:24:07,810
clients but but terminated by this other

1850
01:24:02,739 --> 01:24:09,909
component but and TLS client certificate

1851
01:24:07,810 --> 01:24:11,920
authentication is in fact sometimes used

1852
01:24:09,909 --> 01:24:14,199
and a lot of times when it's use the

1853
01:24:11,920 --> 01:24:15,400
actual application in the backend needs

1854
01:24:14,199 --> 01:24:17,440
to know something about the certificate

1855
01:24:15,400 --> 01:24:19,540
make authorizations decisions to bind

1856
01:24:17,440 --> 01:24:21,669
tokens to or whatever it needs to know

1857
01:24:19,540 --> 01:24:23,080
more than just was the connection

1858
01:24:21,670 --> 01:24:24,580
successfully established or not and

1859
01:24:23,080 --> 01:24:26,889
these access to the actual content of

1860
01:24:24,580 --> 01:24:28,900
their certificate and in the absence of

1861
01:24:26,889 --> 01:24:30,849
some standardized method of conveying

1862
01:24:28,900 --> 01:24:32,710
the client certificate information from

1863
01:24:30,849 --> 01:24:34,540
the proxy to the back-end different

1864
01:24:32,710 --> 01:24:36,159
implement implementations have done this

1865
01:24:34,540 --> 01:24:39,340
differently or in some cases haven't

1866
01:24:36,159 --> 01:24:40,869
done it at all I want to give a quick

1867
01:24:39,340 --> 01:24:43,840
idea I know there's a lot of words here

1868
01:24:40,869 --> 01:24:46,750
of how I got here in front of dispatch

1869
01:24:43,840 --> 01:24:48,699
in the OAuth working group where I spent

1870
01:24:46,750 --> 01:24:50,710
a lot of time there's a draft about

1871
01:24:48,699 --> 01:24:52,989
doing mutual TLS for client

1872
01:24:50,710 --> 01:24:59,050
authentication and binding access tokens

1873
01:24:52,989 --> 01:25:00,759
and in an unrelated discussion the draft

1874
01:24:59,050 --> 01:25:04,900
came up as we were talking about some

1875
01:25:00,760 --> 01:25:08,080
other things and one working list group

1876
01:25:04,900 --> 01:25:09,619
participant basically said that this

1877
01:25:08,080 --> 01:25:11,030
some sort of

1878
01:25:09,619 --> 01:25:14,360
protocol for conveying this information

1879
01:25:11,030 --> 01:25:17,900
should have been defined by the MTL s

1880
01:25:14,360 --> 01:25:20,719
document I took that kind of hard but

1881
01:25:17,900 --> 01:25:22,280
luckily Ben stepped in and said that it

1882
01:25:20,719 --> 01:25:23,630
was seemed like it was something a

1883
01:25:22,280 --> 01:25:24,739
little more general and probably would

1884
01:25:23,630 --> 01:25:27,230
have been defined in a more general

1885
01:25:24,739 --> 01:25:30,709
fashion and not specific to here feeling

1886
01:25:27,230 --> 01:25:32,150
a little bit better about less insulted

1887
01:25:30,710 --> 01:25:34,150
by that I agreed with them and said it

1888
01:25:32,150 --> 01:25:36,440
would be nice if such a thing existed

1889
01:25:34,150 --> 01:25:38,690
but it definitely you know has a wider

1890
01:25:36,440 --> 01:25:41,480
applicability than just some narrow Roth

1891
01:25:38,690 --> 01:25:44,138
profile this stuff a couple other people

1892
01:25:41,480 --> 01:25:46,129
piled on saying they also agree and

1893
01:25:44,139 --> 01:25:49,610
specifically said would it be possible

1894
01:25:46,130 --> 01:25:51,920
to get this pushed off the HD HTTP or

1895
01:25:49,610 --> 01:25:53,150
the TLS working group would be more

1896
01:25:51,920 --> 01:25:54,409
appropriate there but it would be

1897
01:25:53,150 --> 01:25:59,030
helpful to have something like that

1898
01:25:54,409 --> 01:26:00,530
thank you said that Ben and said you

1899
01:25:59,030 --> 01:26:02,330
know somebody has to write a draft this

1900
01:26:00,530 --> 01:26:05,599
was right before the draft deadline and

1901
01:26:02,330 --> 01:26:07,369
said barring that howdy heart hot RFC or

1902
01:26:05,599 --> 01:26:10,310
sec dispatch might be a way to take this

1903
01:26:07,369 --> 01:26:13,040
I wouldn't be here in time for hot RFC

1904
01:26:10,310 --> 01:26:14,929
so I landed here in front of you all and

1905
01:26:13,040 --> 01:26:16,820
I did do some conceptually similar work

1906
01:26:14,929 --> 01:26:19,130
awhile back around token binding which

1907
01:26:16,820 --> 01:26:20,659
is kind of died out for different

1908
01:26:19,130 --> 01:26:22,489
reasons but did some things really

1909
01:26:20,659 --> 01:26:23,809
similarly and thought that maybe some of

1910
01:26:22,489 --> 01:26:27,190
the concepts that were applied in that

1911
01:26:23,810 --> 01:26:29,210
draft could be applied here and

1912
01:26:27,190 --> 01:26:30,860
basically this is sort of a simple

1913
01:26:29,210 --> 01:26:34,429
proposal for how to do this which would

1914
01:26:30,860 --> 01:26:37,339
be and which could potentially enable

1915
01:26:34,429 --> 01:26:38,750
sort of turnkey simple and interoperable

1916
01:26:37,340 --> 01:26:41,480
integration for conveying this

1917
01:26:38,750 --> 01:26:43,909
information between independently

1918
01:26:41,480 --> 01:26:45,799
developed components or services which

1919
01:26:43,909 --> 01:26:49,009
would largely just be the you know

1920
01:26:45,800 --> 01:26:51,349
normal HTTP connection between a client

1921
01:26:49,010 --> 01:26:54,619
and a server that's the reverse proxy

1922
01:26:51,349 --> 01:26:57,830
proxy terminating TLS that proxy

1923
01:26:54,619 --> 01:26:59,509
sanitizes relative headers and passes

1924
01:26:57,830 --> 01:27:01,670
the client certificate information back

1925
01:26:59,510 --> 01:27:04,389
to the back-end application as a new

1926
01:27:01,670 --> 01:27:07,940
header with a defined name and encoding

1927
01:27:04,389 --> 01:27:09,889
this is sort of all that's needed to

1928
01:27:07,940 --> 01:27:11,330
solve this problem for different

1929
01:27:09,889 --> 01:27:13,880
components to speak to each other in

1930
01:27:11,330 --> 01:27:16,699
different ways and that would be sort of

1931
01:27:13,880 --> 01:27:18,170
the I guess the the proposed solution to

1932
01:27:16,699 --> 01:27:19,730
this is to develop some kind of draft

1933
01:27:18,170 --> 01:27:21,619
that just defines that header name as

1934
01:27:19,730 --> 01:27:23,330
well as the encoding sort of

1935
01:27:21,619 --> 01:27:25,009
certificates and the rule

1936
01:27:23,330 --> 01:27:27,470
around header sanitization to keep

1937
01:27:25,010 --> 01:27:30,590
things secure and not injectable from

1938
01:27:27,470 --> 01:27:31,970
the front end clients having said that I

1939
01:27:30,590 --> 01:27:34,490
wonder if maybe the ship has already

1940
01:27:31,970 --> 01:27:35,780
sailed there's lots of disparate

1941
01:27:34,490 --> 01:27:38,059
solutions out there already

1942
01:27:35,780 --> 01:27:39,980
and they're all doing it in slightly

1943
01:27:38,060 --> 01:27:42,050
different ways exposing or as

1944
01:27:39,980 --> 01:27:43,639
configuration options different ways to

1945
01:27:42,050 --> 01:27:45,500
pass different parts of the certificate

1946
01:27:43,640 --> 01:27:48,080
and it's not clear that you know

1947
01:27:45,500 --> 01:27:50,180
retroactive adoption of a late standard

1948
01:27:48,080 --> 01:27:53,630
like this would actually happen and

1949
01:27:50,180 --> 01:27:56,660
while I stumbled over the words and said

1950
01:27:53,630 --> 01:27:58,850
it quickly I try to present one simple

1951
01:27:56,660 --> 01:28:00,920
prospective solution to this I actually

1952
01:27:58,850 --> 01:28:04,310
think the consensus here might be might

1953
01:28:00,920 --> 01:28:06,440
prove really difficult to achieve the

1954
01:28:04,310 --> 01:28:08,690
thread that started this discussion on

1955
01:28:06,440 --> 01:28:09,919
the OAuth fed after even after the

1956
01:28:08,690 --> 01:28:12,650
mention I might come here and talk about

1957
01:28:09,920 --> 01:28:16,900
it degenerated into a lot of really

1958
01:28:12,650 --> 01:28:19,070
strong opinions and even even some

1959
01:28:16,900 --> 01:28:20,690
borderline personal attacks and

1960
01:28:19,070 --> 01:28:25,340
questions of people's motives which was

1961
01:28:20,690 --> 01:28:30,769
fun I when discussing a tie a TF 99 that

1962
01:28:25,340 --> 01:28:32,180
particular draft around token binding so

1963
01:28:30,770 --> 01:28:34,850
it's hard there's other ways to do it

1964
01:28:32,180 --> 01:28:36,460
there's the forwarded extension I don't

1965
01:28:34,850 --> 01:28:38,900
know

1966
01:28:36,460 --> 01:28:40,730
thanks for your time I don't know if

1967
01:28:38,900 --> 01:28:42,679
this is something we want to dispatch or

1968
01:28:40,730 --> 01:28:45,049
not or where the relevant work would be

1969
01:28:42,680 --> 01:28:47,210
done but sorry we don't have time for

1970
01:28:45,050 --> 01:28:48,410
discussion here to answer your question

1971
01:28:47,210 --> 01:28:50,360
we are not going to dispatch this

1972
01:28:48,410 --> 01:28:51,889
because we don't have draft look forward

1973
01:28:50,360 --> 01:28:53,509
to get sick getting some discussion on

1974
01:28:51,890 --> 01:28:57,680
the list and we can hopefully get this

1975
01:28:53,510 --> 01:28:59,330
discussion thank you I know it was a

1976
01:28:57,680 --> 01:29:00,920
time constraint thing would it make

1977
01:28:59,330 --> 01:29:03,590
sense then at this point to write

1978
01:29:00,920 --> 01:29:05,480
something up and and work it through

1979
01:29:03,590 --> 01:29:07,700
dispatch for discussion yeah I think you

1980
01:29:05,480 --> 01:29:08,990
if you get a draft going you can post it

1981
01:29:07,700 --> 01:29:10,700
on the psycho specialist and we can have

1982
01:29:08,990 --> 01:29:13,059
some discussion there as to what make

1983
01:29:10,700 --> 01:29:14,990
what might make sense alright so Roman

1984
01:29:13,060 --> 01:29:17,900
yeah I would just wanted to kind of

1985
01:29:14,990 --> 01:29:19,610
remind meta we can use the sec dispatch

1986
01:29:17,900 --> 01:29:21,500
mailing lists all the time to talk and

1987
01:29:19,610 --> 01:29:23,210
have proposals and ya know we can make

1988
01:29:21,500 --> 01:29:25,640
we can help with dispatching there all

1989
01:29:23,210 --> 01:29:27,230
year round by all means we don't need to

1990
01:29:25,640 --> 01:29:29,870
isolate our activity to these meetings

1991
01:29:27,230 --> 01:29:32,089
we can even have a virtual enter virtual

1992
01:29:29,870 --> 01:29:34,490
meetings to dispatch things in between

1993
01:29:32,090 --> 01:29:36,770
physical meetings so let's get that

1994
01:29:34,490 --> 01:29:37,130
energy going if you are interested in

1995
01:29:36,770 --> 01:29:39,020
this stuff

1996
01:29:37,130 --> 01:29:41,750
please chat with Brian so just to

1997
01:29:39,020 --> 01:29:44,840
quickly recap our outcomes today with

1998
01:29:41,750 --> 01:29:46,460
Max's first proposal on post quantum

1999
01:29:44,840 --> 01:29:48,739
combination signatures I think the

2000
01:29:46,460 --> 01:29:50,150
feeling here was that if this is gonna

2001
01:29:48,739 --> 01:29:52,339
get this work is gonna get done we're

2002
01:29:50,150 --> 01:29:53,960
gonna dispatch it so lamps that's to be

2003
01:29:52,340 --> 01:29:55,750
discussed and confirmed on the list will

2004
01:29:53,960 --> 01:29:58,340
the chairs will start a thread on that

2005
01:29:55,750 --> 01:30:00,949
for max the second one about OCSP

2006
01:29:58,340 --> 01:30:02,690
revisions again I think the feeling was

2007
01:30:00,949 --> 01:30:04,370
if there's going to be work this should

2008
01:30:02,690 --> 01:30:06,559
be in a new working group there's enough

2009
01:30:04,370 --> 01:30:08,480
work there's a merit that it if there's

2010
01:30:06,560 --> 01:30:10,250
energy to do that work so we're gonna

2011
01:30:08,480 --> 01:30:12,320
confirm that and see if there's data to

2012
01:30:10,250 --> 01:30:14,090
support the need for this back on the

2013
01:30:12,320 --> 01:30:17,509
mailing list and again curiously start

2014
01:30:14,090 --> 01:30:18,800
yeah for privacy test um there was

2015
01:30:17,510 --> 01:30:20,120
pretty good energy in the room seems

2016
01:30:18,800 --> 01:30:23,719
like there's probably energy for a

2017
01:30:20,120 --> 01:30:26,000
working group the little hat well we'll

2018
01:30:23,719 --> 01:30:27,469
see let's see so we're gonna we're gonna

2019
01:30:26,000 --> 01:30:29,540
hash out charter text in the list and

2020
01:30:27,469 --> 01:30:32,270
each adsr going to advise on what

2021
01:30:29,540 --> 01:30:35,449
process we will follow to decide whether

2022
01:30:32,270 --> 01:30:37,429
to form to form working group or not and

2023
01:30:35,449 --> 01:30:39,110
if privacy passed once a mailing list we

2024
01:30:37,429 --> 01:30:42,710
can also make a mailing list fair enough

2025
01:30:39,110 --> 01:30:44,659
all right the HTTP signing stuff has

2026
01:30:42,710 --> 01:30:47,060
been dispatched to the HTTP working

2027
01:30:44,659 --> 01:30:49,309
group and the malware lifecycle work to

2028
01:30:47,060 --> 01:30:51,710
Model T over at the IAB so we have

2029
01:30:49,310 --> 01:30:53,960
successfully spread our influence over

2030
01:30:51,710 --> 01:30:56,360
multiple areas and the IAB good job SEC

2031
01:30:53,960 --> 01:30:59,659
dispatch and finally if you're

2032
01:30:56,360 --> 01:31:01,940
interested in the work those presented

2033
01:30:59,659 --> 01:31:03,739
last by Brian please talk to Brian so

2034
01:31:01,940 --> 01:31:06,040
that is suck dispatch thank you for your

2035
01:31:03,739 --> 01:31:06,040
time today

2036
01:31:07,630 --> 01:31:10,729
[Music]

2037
01:31:28,580 --> 01:31:38,690
blue sheets where is the second blue

2038
01:31:36,420 --> 01:31:38,690
sheet

2039
01:31:42,900 --> 01:31:45,990
[Music]

