1
00:00:49,149 --> 00:00:55,450
okay so it's ten o'clock so let's get we

2
00:00:52,970 --> 00:00:57,879
need a minute taker and a jabber scribe

3
00:00:55,450 --> 00:01:02,570
we have a job or thank you Joe for

4
00:00:57,880 --> 00:01:04,840
volunteering so early minute taker major

5
00:01:02,570 --> 00:01:07,159
decisions we don't need a blow-by-blow

6
00:01:04,840 --> 00:01:09,560
everyone who's sitting in the back we

7
00:01:07,159 --> 00:01:13,520
got plenty of room up here so come on up

8
00:01:09,560 --> 00:01:16,340
feel like I - you two have gone I feel

9
00:01:13,520 --> 00:01:17,658
like we picked on somebody else last

10
00:01:16,340 --> 00:01:20,719
time so I don't know I'll pick on the

11
00:01:17,659 --> 00:01:23,209
same person this time anybody anybody

12
00:01:20,719 --> 00:01:24,708
wanted a famous anybody

13
00:01:23,209 --> 00:01:44,659
we can't start unless we get a minute

14
00:01:24,709 --> 00:01:51,200
taker awkward silence minutes anyone

15
00:01:44,659 --> 00:01:52,789
take minutes anybody anybody that'd be

16
00:01:51,200 --> 00:01:54,679
excellent a bad job is better than no

17
00:01:52,789 --> 00:01:57,770
job that's that's Felix thank you very

18
00:01:54,679 --> 00:02:01,759
much Felix I appreciate it I got a

19
00:01:57,770 --> 00:02:03,859
banana if you want one yeah it's mostly

20
00:02:01,759 --> 00:02:05,840
just the actions you don't need to like

21
00:02:03,859 --> 00:02:07,130
play-by-play what the discussion was of

22
00:02:05,840 --> 00:02:10,550
people we really need that we can get

23
00:02:07,130 --> 00:02:16,950
that back from the cording so welcome

24
00:02:10,550 --> 00:02:20,160
MLS ITF 106 I'm Sean I'm Nick hello

25
00:02:16,950 --> 00:02:23,790
and katrell is not here but he might be

26
00:02:20,160 --> 00:02:25,590
remotely and Brendan's in the Medeco all

27
00:02:23,790 --> 00:02:26,940
right so this is the note well it's

28
00:02:25,590 --> 00:02:29,420
Friday morning you should have seen this

29
00:02:26,940 --> 00:02:33,510
a lot unless you only came for today

30
00:02:29,420 --> 00:02:34,708
basically you know behave what you say

31
00:02:33,510 --> 00:02:36,480
if the microphone is going to be

32
00:02:34,709 --> 00:02:39,060
recorded if you're aware of IPR you need

33
00:02:36,480 --> 00:02:40,200
to disclose it that kind of stuff you

34
00:02:39,060 --> 00:02:42,720
can click on the links to get more

35
00:02:40,200 --> 00:02:43,349
detailed information pretty

36
00:02:42,720 --> 00:02:46,859
straightforward

37
00:02:43,349 --> 00:02:48,359
are we so we got a minute taker we got a

38
00:02:46,860 --> 00:02:51,299
jabber scribe the blue sheets are going

39
00:02:48,360 --> 00:02:52,680
around so that's please sign those when

40
00:02:51,299 --> 00:02:54,930
you get to the microphone please make

41
00:02:52,680 --> 00:02:58,110
sure to state your name and let's keep

42
00:02:54,930 --> 00:03:00,989
it professional at the mic our agenda is

43
00:02:58,110 --> 00:03:03,810
you know progress since the last interim

44
00:03:00,989 --> 00:03:04,980
open issues and future items we do

45
00:03:03,810 --> 00:03:07,470
actually have a fair number of slides

46
00:03:04,980 --> 00:03:08,700
though it's only two presentations so I

47
00:03:07,470 --> 00:03:11,359
guess we're going to start off with

48
00:03:08,700 --> 00:03:11,359
Richard

49
00:03:25,090 --> 00:03:37,550
check tested he's a little silly being

50
00:03:35,240 --> 00:03:41,810
up here on literally on a pedestal in

51
00:03:37,550 --> 00:03:44,030
front of this crap so what I was going

52
00:03:41,810 --> 00:03:45,350
to cover is kind of some changes we've

53
00:03:44,030 --> 00:03:46,220
made since the last interim so this is

54
00:03:45,350 --> 00:03:48,950
going to be the stuff that went into

55
00:03:46,220 --> 00:03:51,410
Draft o8 which have been stuff we were

56
00:03:48,950 --> 00:03:53,049
largely discussing off and on before

57
00:03:51,410 --> 00:03:55,549
then but this is kind of your

58
00:03:53,050 --> 00:04:02,080
notification that has landed and last

59
00:03:55,550 --> 00:04:02,080
chance to complain about it there are

60
00:04:06,040 --> 00:04:17,170
kind of bad is a kind of an

61
00:04:08,900 --> 00:04:21,769
understatement is that color alright

62
00:04:17,170 --> 00:04:25,400
alright well that's that is the only

63
00:04:21,769 --> 00:04:27,920
transitions only for transition so if

64
00:04:25,400 --> 00:04:43,039
the chairs want to take a three minute

65
00:04:27,920 --> 00:04:45,290
break I can change the soon yeah okay do

66
00:04:43,040 --> 00:04:53,800
we want to open up the set of issues

67
00:04:45,290 --> 00:04:53,800
just to just just open up github and

68
00:04:58,630 --> 00:05:04,250
okay so we're gonna just load up get up

69
00:05:01,340 --> 00:05:06,200
right now and give some folks just a

70
00:05:04,250 --> 00:05:09,110
high-level overview of what issues are

71
00:05:06,200 --> 00:05:11,710
open and these are things we'll be

72
00:05:09,110 --> 00:05:11,710
addressing later

73
00:05:21,590 --> 00:05:36,539
he looks in sticky notes okay so we have

74
00:05:27,240 --> 00:05:51,450
16 open issues 66 closed some of these

75
00:05:36,540 --> 00:05:53,930
are very old this is just on a protocol

76
00:05:51,450 --> 00:05:53,930
document

77
00:06:08,860 --> 00:06:18,560
here are the 11 issues that are open on

78
00:06:11,750 --> 00:06:20,180
the architecture document the hope is

79
00:06:18,560 --> 00:06:23,210
that some of these will be resolved

80
00:06:20,180 --> 00:06:25,330
pretty quickly they've been around for a

81
00:06:23,210 --> 00:06:25,330
while

82
00:06:32,870 --> 00:06:38,080
thank you doctor if I blink so I can

83
00:06:35,870 --> 00:06:38,080
download

84
00:06:43,240 --> 00:06:48,610
richard has used two sharpies drawn

85
00:06:45,560 --> 00:06:48,610
white paper this time

86
00:07:00,910 --> 00:07:03,970
[Music]

87
00:07:23,980 --> 00:07:27,019
[Music]

88
00:07:27,420 --> 00:07:56,620
- - OH - a woman all right apologies for

89
00:07:51,640 --> 00:08:01,419
too much innovation there the game went

90
00:07:56,620 --> 00:08:03,400
too far so yeah so section 1 is stuff

91
00:08:01,420 --> 00:08:06,280
that went into draft oh wait section 2

92
00:08:03,400 --> 00:08:07,539
is going to be things I screwed up in

93
00:08:06,280 --> 00:08:09,159
draft oh wait that I discovered on the

94
00:08:07,540 --> 00:08:11,020
plane on the way over here and then

95
00:08:09,160 --> 00:08:15,040
we'll have some future you look and

96
00:08:11,020 --> 00:08:18,430
stuff so the major the one like big

97
00:08:15,040 --> 00:08:20,890
change to dwarf all other changes this

98
00:08:18,430 --> 00:08:21,940
proposal commits stuff I think we've

99
00:08:20,890 --> 00:08:23,080
been talking about this for a full

100
00:08:21,940 --> 00:08:25,000
meeting cycle we had a bunch of

101
00:08:23,080 --> 00:08:26,800
discussion at the interim about this but

102
00:08:25,000 --> 00:08:29,680
the the basic idea is that instead of

103
00:08:26,800 --> 00:08:32,950
having ads updates removes each initiate

104
00:08:29,680 --> 00:08:35,320
a new epoch now we have these proposals

105
00:08:32,950 --> 00:08:37,900
which get sent out to the group to

106
00:08:35,320 --> 00:08:38,950
propose a change but the change doesn't

107
00:08:37,900 --> 00:08:42,069
actually get in to put it into effect

108
00:08:38,950 --> 00:08:43,870
until someone sends a commit message so

109
00:08:42,070 --> 00:08:45,910
you can basically lazily add people or

110
00:08:43,870 --> 00:08:48,280
lazily update people and then they are

111
00:08:45,910 --> 00:08:50,589
not actually added or updated or removed

112
00:08:48,280 --> 00:08:53,560
until someone sends a commit um the idea

113
00:08:50,590 --> 00:08:56,020
is to amortize the costs of the updates

114
00:08:53,560 --> 00:08:57,880
in groups that are quiescent so you only

115
00:08:56,020 --> 00:08:59,110
have to send commit messages when you're

116
00:08:57,880 --> 00:09:01,540
actually going to do something with the

117
00:08:59,110 --> 00:09:03,040
group so if if you know there's there's

118
00:09:01,540 --> 00:09:06,849
a requirement in there that if you have

119
00:09:03,040 --> 00:09:08,800
seen some proposals come in Oh while

120
00:09:06,850 --> 00:09:10,900
you've been quiescent and then you're

121
00:09:08,800 --> 00:09:12,520
going to send a message you need to send

122
00:09:10,900 --> 00:09:14,110
a commit before you send a message so

123
00:09:12,520 --> 00:09:16,060
that when active only any actual

124
00:09:14,110 --> 00:09:19,270
activity occurs within the group all

125
00:09:16,060 --> 00:09:20,920
those proposals get committed and put

126
00:09:19,270 --> 00:09:23,710
into effect before there's an actual

127
00:09:20,920 --> 00:09:25,479
encryption this obviously can be made to

128
00:09:23,710 --> 00:09:27,340
revert back to the previous scheme if

129
00:09:25,480 --> 00:09:29,890
you always send to commit alongside of

130
00:09:27,340 --> 00:09:33,100
proposals so it just adds the additional

131
00:09:29,890 --> 00:09:35,140
flexibility you know usual one layer of

132
00:09:33,100 --> 00:09:36,700
an extra layer of indirection adds that

133
00:09:35,140 --> 00:09:38,770
flexibility so that

134
00:09:36,700 --> 00:09:41,140
you can amortize cost in groups that are

135
00:09:38,770 --> 00:09:43,449
maybe lower activity Raphael you have

136
00:09:41,140 --> 00:09:44,710
anything you want to add on on this

137
00:09:43,450 --> 00:09:50,650
because this has been one of your

138
00:09:44,710 --> 00:09:52,540
favorite things yeah so this was fairly

139
00:09:50,650 --> 00:09:57,310
fairly invasive change in document terms

140
00:09:52,540 --> 00:09:59,530
but I think is mostly mostly works um

141
00:09:57,310 --> 00:10:00,849
you know implementation is just starting

142
00:09:59,530 --> 00:10:03,250
to kind of verify everything holds

143
00:10:00,850 --> 00:10:05,470
together we found a couple of you know

144
00:10:03,250 --> 00:10:07,330
technical knits in in how it holds

145
00:10:05,470 --> 00:10:10,330
together but I think that's overall the

146
00:10:07,330 --> 00:10:13,840
the the message now one thing for for

147
00:10:10,330 --> 00:10:16,330
people to keep in mind is that proposals

148
00:10:13,840 --> 00:10:18,460
that are not committed cause the tree to

149
00:10:16,330 --> 00:10:20,380
degrade so here we've we've updated

150
00:10:18,460 --> 00:10:23,050
we've updated two leaves and added some

151
00:10:20,380 --> 00:10:24,760
one in in the second leaf and they

152
00:10:23,050 --> 00:10:27,400
degrade the tree in the sense that's

153
00:10:24,760 --> 00:10:29,350
these these X doubt nodes they cause

154
00:10:27,400 --> 00:10:31,420
these X doubt nodes to be blank so when

155
00:10:29,350 --> 00:10:33,130
you when you do a change to a leaf all

156
00:10:31,420 --> 00:10:36,819
the proposals right now change the leaf

157
00:10:33,130 --> 00:10:38,110
and blank the path above that leaf and

158
00:10:36,820 --> 00:10:39,550
what that means is that when the next

159
00:10:38,110 --> 00:10:42,400
person updates they'll have to encrypt

160
00:10:39,550 --> 00:10:44,650
individually to a bunch of to the the

161
00:10:42,400 --> 00:10:46,420
leaf nodes that have been added or

162
00:10:44,650 --> 00:10:47,680
updated so you don't get the benefit of

163
00:10:46,420 --> 00:10:49,270
having the tree there you don't get the

164
00:10:47,680 --> 00:10:51,430
the performance benefit because all of

165
00:10:49,270 --> 00:10:52,840
these nodes are blank in the middle as a

166
00:10:51,430 --> 00:10:56,050
result of proposals that haven't been

167
00:10:52,840 --> 00:10:57,700
committed when you rebuild is when you

168
00:10:56,050 --> 00:11:00,280
do commit so here we've had the the

169
00:10:57,700 --> 00:11:02,440
first left most node do a commit which

170
00:11:00,280 --> 00:11:05,110
has repopulated those nodes on its path

171
00:11:02,440 --> 00:11:06,190
to the root so you know there's there's

172
00:11:05,110 --> 00:11:12,040
this trade-off here between the

173
00:11:06,190 --> 00:11:13,900
amortization and you know things it when

174
00:11:12,040 --> 00:11:20,620
you impose the cost and the cost of the

175
00:11:13,900 --> 00:11:23,680
thing when you finally do it yeah so

176
00:11:20,620 --> 00:11:27,700
there's no way so when you say there's

177
00:11:23,680 --> 00:11:28,989
no way to reject a proposal right so one

178
00:11:27,700 --> 00:11:31,930
of the areas where we should probably

179
00:11:28,990 --> 00:11:33,490
start where we need more clarity as a

180
00:11:31,930 --> 00:11:39,880
follow-on to the technical changes is

181
00:11:33,490 --> 00:11:41,410
exactly what the policy is around what

182
00:11:39,880 --> 00:11:43,689
the policy considerations are for when

183
00:11:41,410 --> 00:11:46,300
what how proposals are accepted or

184
00:11:43,690 --> 00:11:48,040
rejected so right now in technical terms

185
00:11:46,300 --> 00:11:50,199
it is up to the sender of the commit

186
00:11:48,040 --> 00:11:53,650
message to decide what proposals

187
00:11:50,200 --> 00:12:03,070
go into that commitment so you can I can

188
00:11:53,650 --> 00:12:10,959
subset them yes and huh so what happens

189
00:12:03,070 --> 00:12:13,930
and what happens if if I propose one two

190
00:12:10,960 --> 00:12:16,510
three and four and then someone commits

191
00:12:13,930 --> 00:12:17,650
four three two and one in the opposite

192
00:12:16,510 --> 00:12:19,870
order

193
00:12:17,650 --> 00:12:21,670
so the proposals themselves aren't

194
00:12:19,870 --> 00:12:23,500
proposal to not ordered until they are

195
00:12:21,670 --> 00:12:27,150
committed so the committee also decides

196
00:12:23,500 --> 00:12:27,150
the order in which proposals are applied

197
00:12:29,040 --> 00:12:35,050
so what this does is it takes of what

198
00:12:32,170 --> 00:12:36,760
we're previously like distribute

199
00:12:35,050 --> 00:12:39,310
ordering problems that would have to be

200
00:12:36,760 --> 00:12:41,560
enforced on the group and makes the

201
00:12:39,310 --> 00:12:43,930
commit or the arbiter of sharing things

202
00:12:41,560 --> 00:12:45,250
so I mean I guess it's it's been a long

203
00:12:43,930 --> 00:12:47,469
time since I've like looked at this in a

204
00:12:45,250 --> 00:12:52,540
detail but are you have you convinced

205
00:12:47,470 --> 00:12:56,680
yourself that that works in the in that

206
00:12:52,540 --> 00:12:58,260
it used to in the um I guess I guess or

207
00:12:56,680 --> 00:13:00,880
cheeky tree cam this is less serious

208
00:12:58,260 --> 00:13:02,650
he's drinking a lot simultaneous updates

209
00:13:00,880 --> 00:13:03,939
like without the premise of Cree camp

210
00:13:02,650 --> 00:13:05,530
right but some things the tree home

211
00:13:03,940 --> 00:13:09,220
could not be sequenced that way it'll be

212
00:13:05,530 --> 00:13:11,079
not simultaneous and so I just tricky in

213
00:13:09,220 --> 00:13:12,700
principle allows simultaneous up you

214
00:13:11,080 --> 00:13:14,770
know I understand I'm just I'm just

215
00:13:12,700 --> 00:13:16,810
trying to make sure like that that my

216
00:13:14,770 --> 00:13:19,630
memory the situation was at some some

217
00:13:16,810 --> 00:13:21,969
things some things could not be see some

218
00:13:19,630 --> 00:13:23,230
things depend on other things and some

219
00:13:21,970 --> 00:13:26,890
what they spend another updates right

220
00:13:23,230 --> 00:13:30,490
and and so how do those so so part of

221
00:13:26,890 --> 00:13:32,680
part of what we what it took to make the

222
00:13:30,490 --> 00:13:35,080
proposals thing make the ordering

223
00:13:32,680 --> 00:13:37,510
independence work is that an update now

224
00:13:35,080 --> 00:13:39,370
is not is more limited than an update in

225
00:13:37,510 --> 00:13:43,060
the prior sense so an update does not

226
00:13:39,370 --> 00:13:48,150
get you pcs an update plus someone else

227
00:13:43,060 --> 00:13:49,930
committing gets you pcs okay so the

228
00:13:48,150 --> 00:13:53,140
semantics have changed a little bit in

229
00:13:49,930 --> 00:13:54,969
addition to the ordering things okay I'm

230
00:13:53,140 --> 00:13:58,360
paying for the slit this seems come the

231
00:13:54,970 --> 00:14:02,890
seems all like oh so you're saying that

232
00:13:58,360 --> 00:14:03,920
if if if you're so if I offer one two

233
00:14:02,890 --> 00:14:06,470
three and four

234
00:14:03,920 --> 00:14:07,550
then you pick up two three and four and

235
00:14:06,470 --> 00:14:10,579
I'm like what the hell happened to one

236
00:14:07,550 --> 00:14:11,870
then I can just commit one exactly and

237
00:14:10,579 --> 00:14:13,779
if you really want things to happen in a

238
00:14:11,870 --> 00:14:15,889
certain way you can commit them yourself

239
00:14:13,779 --> 00:14:26,300
why would you not want things to happen

240
00:14:15,889 --> 00:14:28,670
a certain way I mean so because it

241
00:14:26,300 --> 00:14:32,359
doesn't matter in that sense so what

242
00:14:28,670 --> 00:14:35,630
changes now is that you can group the

243
00:14:32,360 --> 00:14:38,630
proposals by category meaning you first

244
00:14:35,630 --> 00:14:41,570
deal with you removes because what that

245
00:14:38,630 --> 00:14:45,230
does it only blanks the leaf and the

246
00:14:41,570 --> 00:14:47,089
direct path for a certain member and so

247
00:14:45,230 --> 00:14:49,310
that destroys the tree to some extent

248
00:14:47,089 --> 00:14:51,440
and then once you've done that you I

249
00:14:49,310 --> 00:14:55,399
don't remember you do the ads and then

250
00:14:51,440 --> 00:14:58,880
the updates or new updates in in removes

251
00:14:55,399 --> 00:15:00,769
and then adds well at the end of the day

252
00:14:58,880 --> 00:15:03,350
so what you do with the updates you only

253
00:15:00,769 --> 00:15:05,060
really now change the leaf node you

254
00:15:03,350 --> 00:15:06,949
don't do the direct path anymore so it

255
00:15:05,060 --> 00:15:09,109
doesn't have any effect on anybody else

256
00:15:06,949 --> 00:15:12,709
when you're trying to leave and and for

257
00:15:09,110 --> 00:15:15,050
deletes you just delete stuff the leaf

258
00:15:12,709 --> 00:15:16,969
and then whatever is above it and the

259
00:15:15,050 --> 00:15:19,189
same is for add and really only the

260
00:15:16,970 --> 00:15:22,519
commit is going to change any of the

261
00:15:19,190 --> 00:15:25,420
intermediary nodes okay but now I have

262
00:15:22,519 --> 00:15:27,760
it's a question which is say that I

263
00:15:25,420 --> 00:15:30,979
proposed one two three and four and

264
00:15:27,760 --> 00:15:36,319
Raffaele commits two and four and Colin

265
00:15:30,980 --> 00:15:39,170
chemist three and four so proposals are

266
00:15:36,320 --> 00:15:41,810
all are each proposals premise on a

267
00:15:39,170 --> 00:15:44,510
given epoch so they couldn't starting no

268
00:15:41,810 --> 00:15:46,239
I understand them I get I guess my so so

269
00:15:44,510 --> 00:15:49,189
what happens yeah I mean how do you know

270
00:15:46,240 --> 00:15:50,899
anybody can commit right it's part of

271
00:15:49,190 --> 00:15:52,910
your thesis right yeah and so what if

272
00:15:50,899 --> 00:15:54,440
two people try to commit there's a one

273
00:15:52,910 --> 00:15:56,600
wasn't the race there was the commits

274
00:15:54,440 --> 00:15:57,920
have the same ordering criterion as we

275
00:15:56,600 --> 00:16:00,290
had before so before we had this

276
00:15:57,920 --> 00:16:02,449
proposal this criterion that any group

277
00:16:00,290 --> 00:16:03,920
operation any change to the group had to

278
00:16:02,449 --> 00:16:06,760
be sequenced so they've got linear

279
00:16:03,920 --> 00:16:08,630
history here we have the same same

280
00:16:06,760 --> 00:16:12,170
requirement but it applies only to

281
00:16:08,630 --> 00:16:17,209
commit great so so why would someone

282
00:16:12,170 --> 00:16:19,219
else commit or not commit so you

283
00:16:17,209 --> 00:16:24,939
commit because you're required to before

284
00:16:19,220 --> 00:16:24,939
you send a message okay so all right

285
00:16:27,730 --> 00:16:31,999
yeah that answers it so you you're not

286
00:16:30,379 --> 00:16:34,759
allowed to send an application message

287
00:16:31,999 --> 00:16:37,639
if there are some pending proposals you

288
00:16:34,759 --> 00:16:39,920
have to commit first and so the whole

289
00:16:37,639 --> 00:16:41,720
idea here is that you don't have to do

290
00:16:39,920 --> 00:16:44,089
it immediately if there's nothing going

291
00:16:41,720 --> 00:16:46,279
on in the group so you can sort of pay

292
00:16:44,089 --> 00:16:48,740
the cost later the whole thing was

293
00:16:46,279 --> 00:16:51,619
driven by the problem that we had a

294
00:16:48,740 --> 00:16:53,660
bottleneck whenever in a multi-device

295
00:16:51,619 --> 00:16:56,149
scenario somebody would add a device to

296
00:16:53,660 --> 00:16:57,920
their account and all of a sudden they

297
00:16:56,149 --> 00:17:01,160
would have to do crypto in hundreds of

298
00:16:57,920 --> 00:17:03,050
groups most of which are effectively

299
00:17:01,160 --> 00:17:05,029
dead because people created them at some

300
00:17:03,050 --> 00:17:07,129
point and then they never use them again

301
00:17:05,029 --> 00:17:10,549
so it seemed very expensive to do some

302
00:17:07,130 --> 00:17:13,459
crypto in those groups so with this

303
00:17:10,549 --> 00:17:16,189
proposal commit scheme you can decide to

304
00:17:13,459 --> 00:17:18,230
do it later or not do it at all that's

305
00:17:16,189 --> 00:17:19,699
then up to the application to decide I

306
00:17:18,230 --> 00:17:20,929
mean this seems like a very worthy

307
00:17:19,699 --> 00:17:23,059
objective I'm just trying to make sure

308
00:17:20,929 --> 00:17:24,620
it works you know I mean like I

309
00:17:23,059 --> 00:17:26,270
understand we're talking about and it

310
00:17:24,619 --> 00:17:28,369
seems like extremely like a really good

311
00:17:26,270 --> 00:17:29,418
idea to try to make that work um and I

312
00:17:28,369 --> 00:17:30,620
was just trying to make sure like I

313
00:17:29,419 --> 00:17:31,100
understand this updates of why it would

314
00:17:30,620 --> 00:17:32,989
work or not work

315
00:17:31,100 --> 00:17:35,418
yeah the minimum is you have to commit

316
00:17:32,990 --> 00:17:36,860
before you send messages I think there's

317
00:17:35,419 --> 00:17:38,659
probably going to be advantages to

318
00:17:36,860 --> 00:17:41,270
scheduling commits at an application

319
00:17:38,659 --> 00:17:42,980
layer for example when you add someone

320
00:17:41,270 --> 00:17:44,450
you probably want them to update and

321
00:17:42,980 --> 00:17:45,950
commit that update so that their paths

322
00:17:44,450 --> 00:17:52,399
the route gets populated and you have a

323
00:17:45,950 --> 00:17:54,320
fuller tree yeah Kevin from Google so

324
00:17:52,399 --> 00:17:57,529
this may have an auth assala G if you

325
00:17:54,320 --> 00:17:59,120
have receipts so if somebody sends a

326
00:17:57,529 --> 00:18:01,070
message and that proposal at the same

327
00:17:59,120 --> 00:18:03,860
time then ever and the group will try to

328
00:18:01,070 --> 00:18:04,939
receipt that message and so we get

329
00:18:03,860 --> 00:18:07,129
everyone trying to commit the same

330
00:18:04,940 --> 00:18:09,230
repulse at the same time I'm not

331
00:18:07,130 --> 00:18:10,520
entirely sure to solve this here but it

332
00:18:09,230 --> 00:18:11,750
could this could be required for

333
00:18:10,520 --> 00:18:13,010
instance if sterling tries to remove

334
00:18:11,750 --> 00:18:15,399
themselves and set a message or

335
00:18:13,010 --> 00:18:15,399
something like that

336
00:18:15,909 --> 00:18:21,080
sorry qu state again what you think the

337
00:18:18,710 --> 00:18:22,429
challenges if like everyone tries to

338
00:18:21,080 --> 00:18:23,990
commit the propose at the same time

339
00:18:22,429 --> 00:18:28,490
could generate a ton of commits at the

340
00:18:23,990 --> 00:18:31,070
same time so it's hard to see yeah so

341
00:18:28,490 --> 00:18:33,600
there's and there's gonna be an inherent

342
00:18:31,070 --> 00:18:36,870
contention issue with this protocol just

343
00:18:33,600 --> 00:18:38,550
because we have common group state and

344
00:18:36,870 --> 00:18:41,000
so those contentions are gonna have to

345
00:18:38,550 --> 00:18:44,159
get resolved by the application somehow

346
00:18:41,000 --> 00:18:47,190
whether that's at commit time or before

347
00:18:44,160 --> 00:18:49,650
we before this PR we had that for any

348
00:18:47,190 --> 00:18:52,200
change you made to the group so yeah I

349
00:18:49,650 --> 00:18:53,280
think there's there's more work to be

350
00:18:52,200 --> 00:18:56,460
done in terms of figuring out how the

351
00:18:53,280 --> 00:18:58,170
scenarios with applications yeah and you

352
00:18:56,460 --> 00:19:00,810
know read receipts in multi packaging

353
00:18:58,170 --> 00:19:02,700
especially yeah Nick ordering is

354
00:19:00,810 --> 00:19:06,360
generally a problem you haven't solved

355
00:19:02,700 --> 00:19:07,560
yet yeah and I think part of the the

356
00:19:06,360 --> 00:19:10,110
part of the reason this seemed appealing

357
00:19:07,560 --> 00:19:12,690
is because it punts the ordering to more

358
00:19:10,110 --> 00:19:14,520
infrequent events yeah yeah it solves a

359
00:19:12,690 --> 00:19:18,390
lot of problems this is an odd pathology

360
00:19:14,520 --> 00:19:20,190
that we essentially found we all come

361
00:19:18,390 --> 00:19:22,830
out from Lebanon I have a clarifying

362
00:19:20,190 --> 00:19:25,650
question is if the committer is the

363
00:19:22,830 --> 00:19:27,840
arbiter like the ordering is

364
00:19:25,650 --> 00:19:29,280
communicated through commit messages to

365
00:19:27,840 --> 00:19:30,270
other nodes is that correct that's

366
00:19:29,280 --> 00:19:35,370
correct

367
00:19:30,270 --> 00:19:38,000
so like how are like the like the

368
00:19:35,370 --> 00:19:39,929
proposal proposals are committed in

369
00:19:38,000 --> 00:19:42,480
communicated to other nodes in like

370
00:19:39,930 --> 00:19:44,910
another another form of message also

371
00:19:42,480 --> 00:19:48,320
correct yes so the presumption here is

372
00:19:44,910 --> 00:19:50,580
that the members of the group have

373
00:19:48,320 --> 00:19:53,189
received the proposals being committed

374
00:19:50,580 --> 00:19:54,960
and cash Evan okay and then the the

375
00:19:53,190 --> 00:19:59,010
commit includes kind of indexes into

376
00:19:54,960 --> 00:20:01,080
that cash okay and also like another

377
00:19:59,010 --> 00:20:02,820
comment about like ordering like the

378
00:20:01,080 --> 00:20:06,419
ordering problem I think it will still

379
00:20:02,820 --> 00:20:13,080
happen for the the ordering of the

380
00:20:06,420 --> 00:20:15,980
commits so I think this proposal in

381
00:20:13,080 --> 00:20:19,199
commit solves the ordering of the

382
00:20:15,980 --> 00:20:21,840
proposals but I think there's still the

383
00:20:19,200 --> 00:20:24,300
problem of ordering the commits between

384
00:20:21,840 --> 00:20:26,010
the other nodes yeah so no matter what

385
00:20:24,300 --> 00:20:28,770
we do here we're gonna have a problem

386
00:20:26,010 --> 00:20:31,920
either of ordering or of dealing with

387
00:20:28,770 --> 00:20:35,310
forked histories okay thank you yeah and

388
00:20:31,920 --> 00:20:37,200
we have a little bit of we touch briefly

389
00:20:35,310 --> 00:20:38,700
on forked histories in a little bit but

390
00:20:37,200 --> 00:20:40,970
that's generally generally we assume

391
00:20:38,700 --> 00:20:44,000
that things are kept pretty linear okay

392
00:20:40,970 --> 00:20:45,620
so you know not hearing any any like

393
00:20:44,000 --> 00:20:50,510
dramatic pain we're going to keep this

394
00:20:45,620 --> 00:20:52,850
in not gonna plan to revert that PR so

395
00:20:50,510 --> 00:20:57,770
there's a couple of nice implications

396
00:20:52,850 --> 00:20:59,570
fall out of that so one of the cool

397
00:20:57,770 --> 00:21:01,129
implications that falls out of proposals

398
00:20:59,570 --> 00:21:04,908
is that with proposals you can have

399
00:21:01,130 --> 00:21:08,750
multiple new clients added to a group in

400
00:21:04,909 --> 00:21:10,760
the same epoch which is one level a

401
00:21:08,750 --> 00:21:12,620
little challenging because you know

402
00:21:10,760 --> 00:21:13,640
before we each time you added someone

403
00:21:12,620 --> 00:21:15,649
you had to send them a welcome message

404
00:21:13,640 --> 00:21:18,320
so adding multiple people sounds like

405
00:21:15,650 --> 00:21:21,110
more work but because you're initiating

406
00:21:18,320 --> 00:21:23,059
all these people into the same epic that

407
00:21:21,110 --> 00:21:25,580
means now you can send them all pretty

408
00:21:23,059 --> 00:21:27,649
much the same thing there's like one

409
00:21:25,580 --> 00:21:29,840
secret that varies this path secret that

410
00:21:27,650 --> 00:21:30,860
varies per node but everything else that

411
00:21:29,840 --> 00:21:32,809
you're going to tell them about the

412
00:21:30,860 --> 00:21:35,600
group is going to be the same and so you

413
00:21:32,809 --> 00:21:37,129
can just send one thing encrypted under

414
00:21:35,600 --> 00:21:38,840
a common key the big thing is this group

415
00:21:37,130 --> 00:21:40,370
info that's gonna be the you know it's

416
00:21:38,840 --> 00:21:42,620
gonna have size on the scale of the the

417
00:21:40,370 --> 00:21:45,678
order the size of the group and then you

418
00:21:42,620 --> 00:21:47,809
send what we called a key package to

419
00:21:45,679 --> 00:21:51,289
each individual that client that's

420
00:21:47,809 --> 00:21:56,750
joined that lets them decrypt the the

421
00:21:51,289 --> 00:21:57,860
big encrypted thing so that that in

422
00:21:56,750 --> 00:22:00,530
itself is just kind of a nice little

423
00:21:57,860 --> 00:22:03,139
optimization but I think is is makes

424
00:22:00,530 --> 00:22:05,299
this extra nice is that we had had

425
00:22:03,140 --> 00:22:08,600
before the separation between welcome

426
00:22:05,299 --> 00:22:10,879
message which add a single individual

427
00:22:08,600 --> 00:22:13,070
new participants of the group and in it

428
00:22:10,880 --> 00:22:14,510
messages where you would add multiple

429
00:22:13,070 --> 00:22:15,500
people to the group all at once to

430
00:22:14,510 --> 00:22:18,289
initialize your group

431
00:22:15,500 --> 00:22:19,850
I think what's nice about about this

432
00:22:18,289 --> 00:22:21,950
framework is that now this looks very

433
00:22:19,850 --> 00:22:24,889
much because this is designed to be sent

434
00:22:21,950 --> 00:22:26,299
to multiple people at once you have now

435
00:22:24,890 --> 00:22:27,919
made something that can be used both as

436
00:22:26,299 --> 00:22:29,570
a welcome message to welcome new members

437
00:22:27,919 --> 00:22:31,340
to a running group and something that

438
00:22:29,570 --> 00:22:33,549
can be used to welcome the initial set

439
00:22:31,340 --> 00:22:36,049
of participants to the group so there's

440
00:22:33,549 --> 00:22:37,879
much cleaner group creation algorithm in

441
00:22:36,049 --> 00:22:39,770
the document where you the creator makes

442
00:22:37,880 --> 00:22:42,440
a one member group of a very specific

443
00:22:39,770 --> 00:22:46,220
form we've defined all the initial

444
00:22:42,440 --> 00:22:48,650
parameters the Creator then sends its

445
00:22:46,220 --> 00:22:50,390
effectively sends itself the add

446
00:22:48,650 --> 00:22:52,399
proposals to add the initial set of

447
00:22:50,390 --> 00:22:54,530
participants now obviously this can be

448
00:22:52,399 --> 00:22:54,770
done virtually an optimized doze and

449
00:22:54,530 --> 00:22:57,410
it's

450
00:22:54,770 --> 00:22:59,780
visibles the external world it but then

451
00:22:57,410 --> 00:23:01,760
commits that which is I think exactly

452
00:22:59,780 --> 00:23:03,020
the same computation entails exactly the

453
00:23:01,760 --> 00:23:05,450
same computations we were doing within

454
00:23:03,020 --> 00:23:08,110
it before but can be expressed more

455
00:23:05,450 --> 00:23:10,340
cleanly with this proposals language

456
00:23:08,110 --> 00:23:12,320
so once the sent once the creator has

457
00:23:10,340 --> 00:23:15,050
done has done those additions it can it

458
00:23:12,320 --> 00:23:17,389
gets out a new state for itself and a

459
00:23:15,050 --> 00:23:19,310
welcome message that it can send to all

460
00:23:17,390 --> 00:23:20,510
the new members at once it's the same

461
00:23:19,310 --> 00:23:23,200
message goes to everybody and they

462
00:23:20,510 --> 00:23:25,250
select the key packages belongs to them

463
00:23:23,200 --> 00:23:26,840
so we've added a little bit of

464
00:23:25,250 --> 00:23:28,370
complexity here with this this kind of

465
00:23:26,840 --> 00:23:31,340
two-stage encryption but I think it's

466
00:23:28,370 --> 00:23:32,540
it's a net win in terms of complexity

467
00:23:31,340 --> 00:23:34,639
because we've eliminated

468
00:23:32,540 --> 00:23:36,440
we've gone from India in it and welcomed

469
00:23:34,640 --> 00:23:38,920
and down to one single thing and we've

470
00:23:36,440 --> 00:23:41,180
cleaned up the the creation stage any

471
00:23:38,920 --> 00:23:45,760
questions comments about about this

472
00:23:41,180 --> 00:23:48,770
approach ok

473
00:23:45,760 --> 00:23:53,450
like I said considering its kind of last

474
00:23:48,770 --> 00:23:55,970
call for complaints another kind of neat

475
00:23:53,450 --> 00:23:57,910
implication about proposals and and

476
00:23:55,970 --> 00:24:01,970
Kevin your comment about self remove

477
00:23:57,910 --> 00:24:04,250
reminds me that's another thing so

478
00:24:01,970 --> 00:24:05,680
before any change to the group had to be

479
00:24:04,250 --> 00:24:08,000
proposed from inside of the group

480
00:24:05,680 --> 00:24:09,920
because a change to the group came

481
00:24:08,000 --> 00:24:11,570
within you know in case of updating

482
00:24:09,920 --> 00:24:13,790
remove who caused encryption of new

483
00:24:11,570 --> 00:24:16,610
entropy to the group and we didn't want

484
00:24:13,790 --> 00:24:19,370
to allow that from outside but right now

485
00:24:16,610 --> 00:24:21,050
proposals the stuff that goes in

486
00:24:19,370 --> 00:24:23,330
proposals that an ad proposal just says

487
00:24:21,050 --> 00:24:24,560
add this user is client init key I'm

488
00:24:23,330 --> 00:24:26,210
just provides the client in Turkey

489
00:24:24,560 --> 00:24:27,530
there's no secret I change to the group

490
00:24:26,210 --> 00:24:29,990
you don't do anything secret with the

491
00:24:27,530 --> 00:24:31,370
group and so you send to commit so this

492
00:24:29,990 --> 00:24:34,040
means that people outside of the group

493
00:24:31,370 --> 00:24:36,830
are now capable of generating proposals

494
00:24:34,040 --> 00:24:43,340
that the group can can evaluate and

495
00:24:36,830 --> 00:24:44,990
decide whether to accept or not and the

496
00:24:43,340 --> 00:24:48,590
only question here is is how do you

497
00:24:44,990 --> 00:24:51,260
verify it and the what landed in the in

498
00:24:48,590 --> 00:24:53,780
the document is that we signal how you

499
00:24:51,260 --> 00:24:56,629
verify it by the the signer ID which is

500
00:24:53,780 --> 00:24:59,180
in most cases and index into the group

501
00:24:56,630 --> 00:25:01,880
but we've reserved this chunk of very

502
00:24:59,180 --> 00:25:04,820
large numbers to address these special

503
00:25:01,880 --> 00:25:07,100
cases so is there any reason to use this

504
00:25:04,820 --> 00:25:08,689
special numbers I'm Calvin Berlin from

505
00:25:07,100 --> 00:25:10,669
Google he's a special

506
00:25:08,690 --> 00:25:12,640
others rather than just indicating via

507
00:25:10,670 --> 00:25:16,700
like I feel there's something that I'm

508
00:25:12,640 --> 00:25:18,980
doing something for not in the group no

509
00:25:16,700 --> 00:25:21,230
reason except you know compactness and

510
00:25:18,980 --> 00:25:22,580
syntax if you had a separate field that

511
00:25:21,230 --> 00:25:25,820
would it would be there and it would

512
00:25:22,580 --> 00:25:27,830
cost you a few more bites but I don't

513
00:25:25,820 --> 00:25:30,560
think it's probably a huge consideration

514
00:25:27,830 --> 00:25:32,360
if you wanted to Jenna poppy artists to

515
00:25:30,560 --> 00:25:36,260
tease out this signaling I think we

516
00:25:32,360 --> 00:25:41,000
could probably do that yeah so I don't

517
00:25:36,260 --> 00:25:42,710
so I understood fffff etc that I get I

518
00:25:41,000 --> 00:25:45,680
don't quite understand this that

519
00:25:42,710 --> 00:25:47,420
preconfigured once yeah so the

520
00:25:45,680 --> 00:25:49,940
pre-configure ones the assumption is so

521
00:25:47,420 --> 00:25:51,680
that's designed for for like you have an

522
00:25:49,940 --> 00:25:55,120
application where there's some server

523
00:25:51,680 --> 00:25:57,200
and control and the the the clients are

524
00:25:55,120 --> 00:25:59,479
configured somehow out of bands and no

525
00:25:57,200 --> 00:26:01,340
to trust that server right and so the

526
00:25:59,480 --> 00:26:04,850
idea is that you have some table of you

527
00:26:01,340 --> 00:26:06,530
know 0 to 255 elements that map's sender

528
00:26:04,850 --> 00:26:08,360
IDs to the public user used to verify

529
00:26:06,530 --> 00:26:09,770
okay so I can't believe I'm fighting

530
00:26:08,360 --> 00:26:10,939
this but that if you're gonna make a

531
00:26:09,770 --> 00:26:16,520
range for this let's pick a picker

532
00:26:10,940 --> 00:26:18,830
you've got a lot of space we just make a

533
00:26:16,520 --> 00:26:22,670
generalize the sender identifier and we

534
00:26:18,830 --> 00:26:24,110
have to either have also be fine I'm

535
00:26:22,670 --> 00:26:26,150
just saying like they you know yeah like

536
00:26:24,110 --> 00:26:27,379
you know you got you got to 32 bits

537
00:26:26,150 --> 00:26:28,760
you're like you're gonna hear me really

538
00:26:27,380 --> 00:26:32,480
sad when you want to under fifty seven

539
00:26:28,760 --> 00:26:35,510
and you're like well what the hell 5,000

540
00:26:32,480 --> 00:26:37,040
or something I mean maybe you're

541
00:26:35,510 --> 00:26:38,980
pressing more pessimistic about the size

542
00:26:37,040 --> 00:26:40,970
of the groups we're gonna have here with

543
00:26:38,980 --> 00:26:44,510
we're not gonna be able to fit half of

544
00:26:40,970 --> 00:26:45,890
the world's population okay so I see

545
00:26:44,510 --> 00:26:48,260
your friend is back at me your point is

546
00:26:45,890 --> 00:26:49,610
we're gonna have like to 232 like the

547
00:26:48,260 --> 00:26:52,100
real problem is we got treated here too

548
00:26:49,610 --> 00:26:53,510
- like you know - these 5,000 and that's

549
00:26:52,100 --> 00:26:56,870
a little and that green sound we have

550
00:26:53,510 --> 00:26:59,300
another like 30,000 trees yeah that's

551
00:26:56,870 --> 00:27:01,510
like I'm very futures bigger than the

552
00:26:59,300 --> 00:27:01,510
past

553
00:27:01,540 --> 00:27:06,200
[Laughter]

554
00:27:03,970 --> 00:27:07,190
yes I think I would tell you I sense a

555
00:27:06,200 --> 00:27:08,270
little proposal to clean up the

556
00:27:07,190 --> 00:27:10,220
signaling a little bit I think we'd

557
00:27:08,270 --> 00:27:12,620
probably want to have kind of kind of

558
00:27:10,220 --> 00:27:16,120
abstract there kind of signer type so we

559
00:27:12,620 --> 00:27:20,000
have we would have within the group

560
00:27:16,120 --> 00:27:21,800
external like you know externally

561
00:27:20,000 --> 00:27:25,490
configured sign basically servers and

562
00:27:21,800 --> 00:27:28,790
then the joiner itself for this user

563
00:27:25,490 --> 00:27:30,860
initiated ad case now I mentioned this

564
00:27:28,790 --> 00:27:32,629
gets a yeah so this means I like the

565
00:27:30,860 --> 00:27:34,100
server can just sign as though it's

566
00:27:32,630 --> 00:27:35,480
beneath the client needs to know some

567
00:27:34,100 --> 00:27:37,510
sort of identity supposed to work and

568
00:27:35,480 --> 00:27:39,530
sign as well yeah that's the assumption

569
00:27:37,510 --> 00:27:40,790
yeah like I said the assumptions the

570
00:27:39,530 --> 00:27:42,680
clients are configured with some table

571
00:27:40,790 --> 00:27:45,770
that maps from these IDs to the public

572
00:27:42,680 --> 00:27:49,340
keys you used to verify yep oh now the

573
00:27:45,770 --> 00:27:50,900
bottom call out here mentions this gives

574
00:27:49,340 --> 00:27:52,399
us server it almost gives us survey

575
00:27:50,900 --> 00:27:53,420
initiated at this obviously gives it

576
00:27:52,400 --> 00:27:54,740
servi initiated remove because they

577
00:27:53,420 --> 00:27:56,240
serve it just proposes that our move

578
00:27:54,740 --> 00:27:58,700
into the group

579
00:27:56,240 --> 00:28:00,710
it doesn't quite give a server initiated

580
00:27:58,700 --> 00:28:02,440
add so it gives us the server's ability

581
00:28:00,710 --> 00:28:04,280
to propose the add that will then be

582
00:28:02,440 --> 00:28:08,540
realized when someone in the group

583
00:28:04,280 --> 00:28:11,060
commits but in that interim the so that

584
00:28:08,540 --> 00:28:13,190
that that means because of this commit

585
00:28:11,060 --> 00:28:17,270
before send requirement that means that

586
00:28:13,190 --> 00:28:18,670
the new joiner will get any messages

587
00:28:17,270 --> 00:28:21,350
that are sent by existing participants

588
00:28:18,670 --> 00:28:23,750
before you know once they send them but

589
00:28:21,350 --> 00:28:26,959
the the new joiner can't immediately

590
00:28:23,750 --> 00:28:28,970
sends to the group so there's a missing

591
00:28:26,960 --> 00:28:30,890
send to group thing which I think Rafael

592
00:28:28,970 --> 00:28:31,910
is going to talk about in his slides

593
00:28:30,890 --> 00:28:34,370
later we kind of treated that as a

594
00:28:31,910 --> 00:28:37,940
separate sent a group from outside

595
00:28:34,370 --> 00:28:39,949
function how to do as a follow-on so

596
00:28:37,940 --> 00:28:44,390
yeah great so action item it's a Calvin

597
00:28:39,950 --> 00:28:45,350
here to propose the update there there

598
00:28:44,390 --> 00:28:46,850
was some concern that the in terms

599
00:28:45,350 --> 00:28:47,810
analysis getting away a little bit from

600
00:28:46,850 --> 00:28:49,600
the proposals stuff

601
00:28:47,810 --> 00:28:54,020
there's some concern at the interim

602
00:28:49,600 --> 00:28:56,149
about downgrade protection so Brendan

603
00:28:54,020 --> 00:28:57,440
had proposed that we simplify the client

604
00:28:56,150 --> 00:28:59,470
in turkey struts by having to be

605
00:28:57,440 --> 00:29:01,940
specific to a version and a cipher suite

606
00:28:59,470 --> 00:29:04,670
now the the the working model here is

607
00:29:01,940 --> 00:29:06,680
that client init keys are stored by some

608
00:29:04,670 --> 00:29:08,090
server and they're provided to a client

609
00:29:06,680 --> 00:29:10,340
when it wants to initiate a group and so

610
00:29:08,090 --> 00:29:13,040
there's this downgrade worry that you

611
00:29:10,340 --> 00:29:14,780
know if Rafael's client supports two

612
00:29:13,040 --> 00:29:17,299
really crappy legacy suites and two

613
00:29:14,780 --> 00:29:20,210
really awesome new Suites he'll

614
00:29:17,299 --> 00:29:22,489
provision for client Inuk keys and the

615
00:29:20,210 --> 00:29:25,279
server can choose to send me the old

616
00:29:22,489 --> 00:29:27,200
crappy legacy suites and prevent me from

617
00:29:25,279 --> 00:29:29,690
having a conversation with him using the

618
00:29:27,200 --> 00:29:32,629
new Suites so to address that we added

619
00:29:29,690 --> 00:29:33,919
extensions to client init keys this is

620
00:29:32,629 --> 00:29:35,600
something we kind of seemed like we

621
00:29:33,919 --> 00:29:37,039
needed anyway we're kind of following

622
00:29:35,600 --> 00:29:39,889
the TLS pattern here by having a client

623
00:29:37,039 --> 00:29:41,450
Keys Express what versions they support

624
00:29:39,889 --> 00:29:44,389
of the protocol and what cipher suites

625
00:29:41,450 --> 00:29:45,350
they support so the key that's in the

626
00:29:44,389 --> 00:29:47,539
client into key is still going to be

627
00:29:45,350 --> 00:29:49,340
specific to a cipher suite but the idea

628
00:29:47,539 --> 00:29:50,840
is that when you are creating a group

629
00:29:49,340 --> 00:29:54,678
you download a bunch of client init keys

630
00:29:50,840 --> 00:29:55,908
you see what what Suites you got and you

631
00:29:54,679 --> 00:29:57,919
can look at these supported cipher

632
00:29:55,909 --> 00:30:00,169
Suites right and verify that you know

633
00:29:57,919 --> 00:30:05,480
what you got was was the best thing that

634
00:30:00,169 --> 00:30:11,869
was supported I think I'm maybe I'm

635
00:30:05,480 --> 00:30:13,369
misunderstanding this design so the

636
00:30:11,869 --> 00:30:16,488
client each client idiot keys gonna

637
00:30:13,369 --> 00:30:18,109
duplicate all this information yes it

638
00:30:16,489 --> 00:30:21,529
duplicates the support information David

639
00:30:18,109 --> 00:30:23,178
Benjamin and mouse I mean why not just

640
00:30:21,529 --> 00:30:30,529
have one bond ball that has everything

641
00:30:23,179 --> 00:30:33,799
in it Brendan is on the Mike Brenda's in

642
00:30:30,529 --> 00:30:35,149
the in the media echo I think he had

643
00:30:33,799 --> 00:30:36,499
proposed this change I'm forgetting

644
00:30:35,149 --> 00:30:38,869
exactly what the rationale was beyond

645
00:30:36,499 --> 00:30:42,590
just streamlining the objects family he

646
00:30:38,869 --> 00:30:45,470
remembers I think the idea is that you

647
00:30:42,590 --> 00:30:48,470
can rotate them if you put everything

648
00:30:45,470 --> 00:30:50,269
into one key and you have to throw away

649
00:30:48,470 --> 00:30:52,369
all the cipher suites even if you

650
00:30:50,269 --> 00:30:56,029
haven't consumed them in order to get

651
00:30:52,369 --> 00:31:00,799
fresh client init keys it's doable but

652
00:30:56,029 --> 00:31:02,509
it's it's voice not sure Impostors in

653
00:31:00,799 --> 00:31:03,158
that but I'm happy to take a look think

654
00:31:02,509 --> 00:31:08,720
about it later

655
00:31:03,159 --> 00:31:11,059
so I guess are so I think one me is the

656
00:31:08,720 --> 00:31:14,330
ideal I'm supposed to what what so I'm

657
00:31:11,059 --> 00:31:16,309
supposed to UM but the way I'm consume

658
00:31:14,330 --> 00:31:17,960
this thing is like that I take the thing

659
00:31:16,309 --> 00:31:19,158
and then I like negotiate the best

660
00:31:17,960 --> 00:31:24,549
version and then I pull the key out

661
00:31:19,159 --> 00:31:28,879
right so what happens if what happens if

662
00:31:24,549 --> 00:31:30,800
MLS version you know MLS version one on

663
00:31:28,879 --> 00:31:32,840
the DA support post quantum

664
00:31:30,800 --> 00:31:34,850
and most version two does and I want

665
00:31:32,840 --> 00:31:36,050
post quantum so I pull it so I happen to

666
00:31:34,850 --> 00:31:37,429
hit the client and it key that doesn't

667
00:31:36,050 --> 00:31:38,629
that has X two five five nine nine but

668
00:31:37,430 --> 00:31:40,700
not post quantum in it and now I versed

669
00:31:38,630 --> 00:31:42,610
negotiate and now like I look at the key

670
00:31:40,700 --> 00:31:45,200
and I'm like oops

671
00:31:42,610 --> 00:31:46,879
you're saying is potential conflict

672
00:31:45,200 --> 00:31:49,370
between the versions in Psych recession

673
00:31:46,880 --> 00:31:50,900
negotiations yeah whereas what was it

674
00:31:49,370 --> 00:31:52,100
was he had a little bundle then you

675
00:31:50,900 --> 00:31:54,740
could just sequential ordering one at a

676
00:31:52,100 --> 00:31:56,090
time in each and each each each decision

677
00:31:54,740 --> 00:31:59,150
you make narrows down the Romanian

678
00:31:56,090 --> 00:32:00,409
sessions so Brendan McMillan and the

679
00:31:59,150 --> 00:32:03,230
jabber says because there's a lot of

680
00:32:00,410 --> 00:32:05,330
keys then it'll be a big CI k imagine

681
00:32:03,230 --> 00:32:07,970
supporting ECC and RSA even if you use

682
00:32:05,330 --> 00:32:14,750
ECC you can always have to send RSA and

683
00:32:07,970 --> 00:32:15,650
everybody would have to store it yeah

684
00:32:14,750 --> 00:32:21,050
maybe

685
00:32:15,650 --> 00:32:22,910
okay I'll take I think you but if you

686
00:32:21,050 --> 00:32:25,790
need I think if the problem is you now

687
00:32:22,910 --> 00:32:27,560
need to explain how you now know explain

688
00:32:25,790 --> 00:32:28,850
how the negotiation works and why

689
00:32:27,560 --> 00:32:30,020
doesn't that prevent why isn't that a

690
00:32:28,850 --> 00:32:31,490
lot down great so in this particular

691
00:32:30,020 --> 00:32:33,830
matter in the case that just indicated

692
00:32:31,490 --> 00:32:35,300
right where um we have we have version

693
00:32:33,830 --> 00:32:36,649
one which only supports classical and

694
00:32:35,300 --> 00:32:39,919
version two which supports post quantum

695
00:32:36,650 --> 00:32:42,590
and classical right and so um and so the

696
00:32:39,920 --> 00:32:45,890
version negotiation is fine um but did

697
00:32:42,590 --> 00:32:47,570
but then the the server removes the so

698
00:32:45,890 --> 00:32:50,090
they both says front one and two and

699
00:32:47,570 --> 00:32:51,830
there's a there's two there's two CIA's

700
00:32:50,090 --> 00:32:53,360
one of which says one of the boys say

701
00:32:51,830 --> 00:32:55,310
one and two and one has it one has to

702
00:32:53,360 --> 00:32:58,219
$5.99 the other one has to have you know

703
00:32:55,310 --> 00:33:00,710
two 5 and X you know psych right and um

704
00:32:58,220 --> 00:33:01,760
and what I do is I remove the second one

705
00:33:00,710 --> 00:33:03,260
and so now I've forced you

706
00:33:01,760 --> 00:33:05,600
here I have four through natira posture

707
00:33:03,260 --> 00:33:07,070
what's one possibility or I forced you

708
00:33:05,600 --> 00:33:10,100
into I've still forced you back down a

709
00:33:07,070 --> 00:33:11,899
fascicle the classical right so so I so

710
00:33:10,100 --> 00:33:13,790
I'm not entirely sure that so depending

711
00:33:11,900 --> 00:33:15,050
on how you define this so I'm not sure

712
00:33:13,790 --> 00:33:16,129
the first unless for the error posture

713
00:33:15,050 --> 00:33:18,800
is acceptable and the second one is

714
00:33:16,130 --> 00:33:20,570
seems like it's downgrade so um so I

715
00:33:18,800 --> 00:33:21,950
think you have to think the first step

716
00:33:20,570 --> 00:33:23,960
is to write down what the algorithm

717
00:33:21,950 --> 00:33:25,490
you're supposed to execute is like that

718
00:33:23,960 --> 00:33:26,990
sounded like a downgrade attack in which

719
00:33:25,490 --> 00:33:31,880
case an error seems like the right

720
00:33:26,990 --> 00:33:34,220
outcome I mean maybe I mean I guess are

721
00:33:31,880 --> 00:33:35,630
the semantics that I mean but then

722
00:33:34,220 --> 00:33:37,430
you're placing into strong semantics and

723
00:33:35,630 --> 00:33:40,460
requiring all the CIA CA case you never

724
00:33:37,430 --> 00:33:42,440
got lost that's the posture you're

725
00:33:40,460 --> 00:33:44,300
saying CI case can never get lost that's

726
00:33:42,440 --> 00:33:48,380
the posture like that

727
00:33:44,300 --> 00:33:49,730
no subsetting is an attack I think that

728
00:33:48,380 --> 00:33:53,090
would be the implication is algorithm

729
00:33:49,730 --> 00:33:54,560
yeah okay I'm not quite which n yeah I

730
00:33:53,090 --> 00:33:55,850
agree has interesting operations I'm not

731
00:33:54,560 --> 00:33:57,800
quite sure what the resources being

732
00:33:55,850 --> 00:33:59,209
conserved here is because it seems like

733
00:33:57,800 --> 00:34:04,159
I stopped to download all the CI kids

734
00:33:59,210 --> 00:34:05,480
anyway maybe we should add that the term

735
00:34:04,160 --> 00:34:08,000
downgrade protection is a little

736
00:34:05,480 --> 00:34:10,670
ambitious here this sort of helps to

737
00:34:08,000 --> 00:34:13,400
detect you know potential downgrade it

738
00:34:10,670 --> 00:34:23,990
doesn't guarantee that no downgrade can

739
00:34:13,400 --> 00:34:26,210
never occur Calvin so the set of support

740
00:34:23,989 --> 00:34:28,969
cipher suites and versions is more of a

741
00:34:26,210 --> 00:34:31,220
property of the client not really the

742
00:34:28,969 --> 00:34:33,230
property of the key so it's odd to see

743
00:34:31,219 --> 00:34:34,759
like they're supported cipher Suites be

744
00:34:33,230 --> 00:34:37,370
included in every single client in a key

745
00:34:34,760 --> 00:34:39,860
you get from that from that client would

746
00:34:37,370 --> 00:34:42,380
it make more sense to perhaps specify

747
00:34:39,860 --> 00:34:44,630
that you can specify your support

748
00:34:42,380 --> 00:34:46,310
versions for this to the client and key

749
00:34:44,630 --> 00:34:48,860
server and then you can just create what

750
00:34:46,310 --> 00:34:50,570
versions the client supports yeah we

751
00:34:48,860 --> 00:34:53,090
could we could split this out into a

752
00:34:50,570 --> 00:34:56,810
separate information element effectively

753
00:34:53,090 --> 00:34:58,730
yeah like it would have to be have to be

754
00:34:56,810 --> 00:35:05,350
signed by the client clearly so that

755
00:34:58,730 --> 00:35:09,100
it's authentic yeah yeah I think the I

756
00:35:05,350 --> 00:35:11,420
the idea here was we we had kind of had

757
00:35:09,100 --> 00:35:14,810
there's existing operational practice

758
00:35:11,420 --> 00:35:18,530
around managing these init keys you know

759
00:35:14,810 --> 00:35:21,759
and so this using the inner key as the

760
00:35:18,530 --> 00:35:25,210
struts to hold this stuff avoided

761
00:35:21,760 --> 00:35:27,830
creating another thing to manage mmm-hmm

762
00:35:25,210 --> 00:35:30,830
but if it's big enough problem we can we

763
00:35:27,830 --> 00:35:32,240
can obviously they add a new struct yeah

764
00:35:30,830 --> 00:35:34,549
I thought I agree that it's a little

765
00:35:32,240 --> 00:35:36,950
awkward Jim you didn't hear it's also

766
00:35:34,550 --> 00:35:38,990
awkward to see a required extension that

767
00:35:36,950 --> 00:35:41,529
like my otherwise we'll just put in the

768
00:35:38,990 --> 00:35:44,529
main message then why happy extension

769
00:35:41,530 --> 00:35:44,530
yeah

770
00:35:45,010 --> 00:35:51,260
don't have real strong feelings about

771
00:35:47,030 --> 00:35:53,270
that I think my feeling here is we so

772
00:35:51,260 --> 00:35:54,470
this this expiration thing is an example

773
00:35:53,270 --> 00:35:56,450
I think the feeling was we're going to

774
00:35:54,470 --> 00:35:58,709
have a need for things that are optional

775
00:35:56,450 --> 00:36:01,680
and and so many for extensibility

776
00:35:58,710 --> 00:36:04,410
here and so these are things that are

777
00:36:01,680 --> 00:36:07,319
extensions in TLS and so might as well

778
00:36:04,410 --> 00:36:09,779
exercise the the extensibility mechanism

779
00:36:07,320 --> 00:36:12,630
that we're going to need anyway sounds

780
00:36:09,780 --> 00:36:15,000
good yeah yeah so since I mentioned

781
00:36:12,630 --> 00:36:17,940
expiration right another thing you could

782
00:36:15,000 --> 00:36:20,369
do - it's a kind of Tetris point is if

783
00:36:17,940 --> 00:36:22,770
you've got a client that supports you

784
00:36:20,369 --> 00:36:26,369
know crappy sweets and they upgrade to

785
00:36:22,770 --> 00:36:28,259
support awesome sweets and publish new

786
00:36:26,369 --> 00:36:30,869
client init keys one thing the server

787
00:36:28,260 --> 00:36:33,750
could do is just ignore the new ones and

788
00:36:30,869 --> 00:36:35,820
keep around the old ones and give

789
00:36:33,750 --> 00:36:37,830
everyone the old keys and only enforce

790
00:36:35,820 --> 00:36:40,710
force you to only use the legacy Suites

791
00:36:37,830 --> 00:36:42,270
so you know in addition to other

792
00:36:40,710 --> 00:36:43,770
concerns about rotating engineering

793
00:36:42,270 --> 00:36:46,740
freshness and rotate inclined into keys

794
00:36:43,770 --> 00:36:50,369
on this expiration is just like super

795
00:36:46,740 --> 00:36:52,200
simple UN 32 or UN 64 a second since

796
00:36:50,369 --> 00:36:54,900
that box sort of things specify expiry

797
00:36:52,200 --> 00:36:58,020
so I think actually what Rafael said was

798
00:36:54,900 --> 00:37:00,720
like pretty important hum which is like

799
00:36:58,020 --> 00:37:02,310
defining what this is supposed to do we

800
00:37:00,720 --> 00:37:04,080
really helpful I mean so if you recall

801
00:37:02,310 --> 00:37:05,700
like we spent quite a while in TLS and

802
00:37:04,080 --> 00:37:07,440
there's like an enormous appendix that

803
00:37:05,700 --> 00:37:08,460
it's like allegedly tells you what let's

804
00:37:07,440 --> 00:37:10,650
the security here and his ETL are

805
00:37:08,460 --> 00:37:11,910
supposed to be and so seems like maybe

806
00:37:10,650 --> 00:37:13,920
we should start by defining let's you're

807
00:37:11,910 --> 00:37:17,160
gonna this are supposed to be and then

808
00:37:13,920 --> 00:37:19,410
we'll know if it achieves not yeah and

809
00:37:17,160 --> 00:37:22,410
since produce is not here I will propose

810
00:37:19,410 --> 00:37:23,580
that he write that section um sure if

811
00:37:22,410 --> 00:37:24,299
you want to assign me to that I'll try

812
00:37:23,580 --> 00:37:26,220
to give it a shot

813
00:37:24,300 --> 00:37:28,260
okay great thanks Nadine you just

814
00:37:26,220 --> 00:37:33,810
proposed already I propose produce right

815
00:37:28,260 --> 00:37:35,580
oh I seem fantastic like I'm happen

816
00:37:33,810 --> 00:37:36,690
happy if you think I should have happy

817
00:37:35,580 --> 00:37:40,410
to give it a shot I don't think a party

818
00:37:36,690 --> 00:37:41,940
best person I since since you're

819
00:37:40,410 --> 00:37:44,129
thinking about it now like if you wanted

820
00:37:41,940 --> 00:37:46,530
to jot down like a list of properties

821
00:37:44,130 --> 00:37:48,599
that that you think sounds like about

822
00:37:46,530 --> 00:37:51,119
the right pop set and you know we could

823
00:37:48,599 --> 00:37:52,200
we could iterate on that that would be

824
00:37:51,119 --> 00:37:53,820
helpful if you could send that's yeah I

825
00:37:52,200 --> 00:37:55,470
I could do that if you don't mind it

826
00:37:53,820 --> 00:37:57,839
just to keep down my list if you don't

827
00:37:55,470 --> 00:38:00,839
mind assigning me they get a bishop can

828
00:37:57,839 --> 00:38:02,910
chairs shares some combination shares

829
00:38:00,839 --> 00:38:04,920
and no takers make sure that we get our

830
00:38:02,910 --> 00:38:06,960
answer that okay thanks

831
00:38:04,920 --> 00:38:11,010
cool all right so that's extensibility

832
00:38:06,960 --> 00:38:12,660
what next okay so we landed a whole

833
00:38:11,010 --> 00:38:16,559
bunch of things last week

834
00:38:12,660 --> 00:38:18,089
published a draft what Monday and we had

835
00:38:16,559 --> 00:38:20,280
some trouble with the draft tracker

836
00:38:18,089 --> 00:38:22,170
deadline and on the flight over here I

837
00:38:20,280 --> 00:38:25,920
tried to implement it and I came across

838
00:38:22,170 --> 00:38:29,039
some bugs well this was actually just an

839
00:38:25,920 --> 00:38:31,380
improvement so one of the things in the

840
00:38:29,039 --> 00:38:34,170
version of the welcomes in draft eight

841
00:38:31,380 --> 00:38:36,720
since we have this separated encryption

842
00:38:34,170 --> 00:38:39,150
thing the keys that were used to encrypt

843
00:38:36,720 --> 00:38:41,339
the group info were just generated by

844
00:38:39,150 --> 00:38:43,799
the the sender of it

845
00:38:41,339 --> 00:38:45,328
which was kind of unfortunate in terms

846
00:38:43,799 --> 00:38:46,859
in the in that it requires the sender

847
00:38:45,329 --> 00:38:48,180
did you have fresh entropy and you're

848
00:38:46,859 --> 00:38:50,788
assuming that the key generation goes

849
00:38:48,180 --> 00:38:52,980
okay it occurred to me that because we

850
00:38:50,789 --> 00:38:55,500
are in an epoch already we can just ktf

851
00:38:52,980 --> 00:38:57,299
more stuff off the epic secret and use

852
00:38:55,500 --> 00:38:58,940
that for encrypting welcome messages it

853
00:38:57,299 --> 00:39:02,880
keeps things a little bit more chromatic

854
00:38:58,940 --> 00:39:04,559
the other thing is in the handshake

855
00:39:02,880 --> 00:39:06,270
messages in the commit messages we have

856
00:39:04,559 --> 00:39:08,880
this confirmation we've had it in group

857
00:39:06,270 --> 00:39:10,770
operations before which members of

858
00:39:08,880 --> 00:39:12,450
existing members of a group used to

859
00:39:10,770 --> 00:39:15,660
confirm they've all arrived at the same

860
00:39:12,450 --> 00:39:18,058
state as a result of processing this

861
00:39:15,660 --> 00:39:20,368
group operation or commit message this

862
00:39:18,059 --> 00:39:23,640
is analogous to the finished Mac in TLS

863
00:39:20,369 --> 00:39:27,450
that confirms the to two and saw the

864
00:39:23,640 --> 00:39:29,670
same transcript that it it turns out we

865
00:39:27,450 --> 00:39:33,029
have all the material in the Welcome

866
00:39:29,670 --> 00:39:34,410
message that a that the new joiner would

867
00:39:33,029 --> 00:39:38,490
need to be able to compute that

868
00:39:34,410 --> 00:39:39,660
confirmation so we might as well as my

869
00:39:38,490 --> 00:39:42,319
thinking here as he might as well throw

870
00:39:39,660 --> 00:39:45,240
it in the welcome message so that the

871
00:39:42,319 --> 00:39:46,829
recipient the new joiner after it's you

872
00:39:45,240 --> 00:39:48,990
know imported all this stuff and vera

873
00:39:46,829 --> 00:39:51,480
and done some of the key derivations

874
00:39:48,990 --> 00:39:53,368
can verify that it has arrived at the

875
00:39:51,480 --> 00:39:54,420
same state as at least the sender of the

876
00:39:53,369 --> 00:39:56,250
message you won't know that it's the

877
00:39:54,420 --> 00:39:59,400
same state as the rest of the group but

878
00:39:56,250 --> 00:40:01,170
it will get kind of a an internal

879
00:39:59,400 --> 00:40:02,640
consistency check on it that it is

880
00:40:01,170 --> 00:40:04,260
correctly processed the welcome message

881
00:40:02,640 --> 00:40:05,759
so I don't think we really get any

882
00:40:04,260 --> 00:40:08,910
meaningful security properties out of

883
00:40:05,760 --> 00:40:12,150
this but it seems like a useful you know

884
00:40:08,910 --> 00:40:14,190
sanity check probably you know a way of

885
00:40:12,150 --> 00:40:18,690
way of avoiding bugs in implementation

886
00:40:14,190 --> 00:40:20,520
with with fairly low cost so there's a

887
00:40:18,690 --> 00:40:23,279
PR for this I think it's fairly small

888
00:40:20,520 --> 00:40:25,550
change kind of inclined to land it as as

889
00:40:23,279 --> 00:40:26,870
a way to make things

890
00:40:25,550 --> 00:40:30,950
little bit more internally and a little

891
00:40:26,870 --> 00:40:35,839
bit more rigid says minor stuff

892
00:40:30,950 --> 00:40:38,330
no comments the other thing is proposal

893
00:40:35,840 --> 00:40:41,630
IDs as in draft eight don't actually

894
00:40:38,330 --> 00:40:44,450
work so as we just said before the

895
00:40:41,630 --> 00:40:47,480
commits we have have to have pointers to

896
00:40:44,450 --> 00:40:48,950
which proposals they're implementing one

897
00:40:47,480 --> 00:40:51,800
of the changes we made in the proposals

898
00:40:48,950 --> 00:40:54,620
PR fairly late in the game was to make

899
00:40:51,800 --> 00:40:58,160
the proposed the the hash and proposal

900
00:40:54,620 --> 00:41:01,940
ID the hash of the MLS plain text that

901
00:40:58,160 --> 00:41:03,980
contains the proposal and then I landed

902
00:41:01,940 --> 00:41:06,290
a PR after that that an enabled MLS

903
00:41:03,980 --> 00:41:08,120
plain text contain multiple proposals so

904
00:41:06,290 --> 00:41:10,460
now we have this ambiguity of which of

905
00:41:08,120 --> 00:41:11,930
these proposals does this refer to this

906
00:41:10,460 --> 00:41:14,240
is kind of an instance of a slightly

907
00:41:11,930 --> 00:41:17,629
more general problem so so Calvin and

908
00:41:14,240 --> 00:41:19,370
Nomad pointed this out that we we have

909
00:41:17,630 --> 00:41:22,010
right now this packing of multiple

910
00:41:19,370 --> 00:41:25,640
proposals and it commits into a single

911
00:41:22,010 --> 00:41:26,870
MLS plain text which introduces this

912
00:41:25,640 --> 00:41:31,310
ambiguity about how you refer to

913
00:41:26,870 --> 00:41:33,049
proposals and you know it introduces a

914
00:41:31,310 --> 00:41:38,320
little bit of complexity into the the

915
00:41:33,050 --> 00:41:40,880
processing and key selection etc so

916
00:41:38,320 --> 00:41:43,550
there's there's kind of general question

917
00:41:40,880 --> 00:41:46,250
of like how do we pack things in some

918
00:41:43,550 --> 00:41:49,640
MLS plain texts so the trade-off here is

919
00:41:46,250 --> 00:41:52,070
on the one hand if we pack stuff in as

920
00:41:49,640 --> 00:41:54,500
we do as as we kind of do now is you

921
00:41:52,070 --> 00:41:56,240
could do slightly more generically then

922
00:41:54,500 --> 00:41:57,560
you can use a single signature operation

923
00:41:56,240 --> 00:42:00,080
to cover a bunch of stuff so if I'm

924
00:41:57,560 --> 00:42:02,930
adding 20 new people to the group and

925
00:42:00,080 --> 00:42:05,000
sending five messages alongside them I

926
00:42:02,930 --> 00:42:07,759
can sign all of that stuff together at

927
00:42:05,000 --> 00:42:10,780
once and not have to do 25 signatures so

928
00:42:07,760 --> 00:42:15,380
that's you know some computation savings

929
00:42:10,780 --> 00:42:18,800
but on the other hand if I do all that

930
00:42:15,380 --> 00:42:20,090
packing then my unpacking code gets a

931
00:42:18,800 --> 00:42:22,580
lot more complex and we have this

932
00:42:20,090 --> 00:42:26,740
question that was raised that I think it

933
00:42:22,580 --> 00:42:28,490
matter ace one wants me about whether we

934
00:42:26,740 --> 00:42:30,229
well if you're going to do key

935
00:42:28,490 --> 00:42:32,509
separation you have to you know change

936
00:42:30,230 --> 00:42:34,730
which key is based on what is encrypted

937
00:42:32,510 --> 00:42:36,380
in the message whether it's a handshake

938
00:42:34,730 --> 00:42:39,500
message like a commit our proposal or

939
00:42:36,380 --> 00:42:41,300
whether it's application content

940
00:42:39,500 --> 00:42:43,070
if you're not going to do that key

941
00:42:41,300 --> 00:42:44,390
switching then you have this question of

942
00:42:43,070 --> 00:42:47,750
whether you've lost something in terms

943
00:42:44,390 --> 00:42:49,098
of key separation so wanted to open this

944
00:42:47,750 --> 00:42:50,680
question up actually for discussion as

945
00:42:49,099 --> 00:42:53,270
people whether have other people have

946
00:42:50,680 --> 00:42:55,690
feelings about which of these should be

947
00:42:53,270 --> 00:42:59,420
a priority in terms of you know

948
00:42:55,690 --> 00:43:02,180
advertising signatures or maintaining a

949
00:42:59,420 --> 00:43:04,550
stronger key separation obviously the

950
00:43:02,180 --> 00:43:07,700
kind of simplest with simplest solution

951
00:43:04,550 --> 00:43:09,260
with highest you know easy a clearance

952
00:43:07,700 --> 00:43:11,419
key separation would be this this middle

953
00:43:09,260 --> 00:43:14,180
proposal where each MLS plain text

954
00:43:11,420 --> 00:43:16,790
contains exactly one thing it either

955
00:43:14,180 --> 00:43:19,819
contains a single application message a

956
00:43:16,790 --> 00:43:21,560
single proposal or a single commit so

957
00:43:19,820 --> 00:43:23,300
you have a clear semantics for what each

958
00:43:21,560 --> 00:43:26,180
and well as plain text is and you have a

959
00:43:23,300 --> 00:43:27,560
you know that kind of unit there but

960
00:43:26,180 --> 00:43:28,910
that means you have to do a separate

961
00:43:27,560 --> 00:43:30,200
signature for each of those which you

962
00:43:28,910 --> 00:43:32,540
don't if you do this kind of packing

963
00:43:30,200 --> 00:43:42,890
thing so like people have thoughts on

964
00:43:32,540 --> 00:43:44,180
trade-offs here all right Calvin I see

965
00:43:42,890 --> 00:43:48,080
you kind of gesturing

966
00:43:44,180 --> 00:43:49,759
I guess slightly leaning towards just

967
00:43:48,080 --> 00:43:51,980
the simple solution just one entry for

968
00:43:49,760 --> 00:43:54,589
everything because I will just keep it

969
00:43:51,980 --> 00:43:56,089
simple I cannot really show the

970
00:43:54,589 --> 00:43:57,500
implication of using separate keys are

971
00:43:56,089 --> 00:43:59,570
for a different but same key for a

972
00:43:57,500 --> 00:44:01,609
signature for four different plain text

973
00:43:59,570 --> 00:44:04,339
feels weird yeah

974
00:44:01,609 --> 00:44:06,819
slight slight thing I like generic

975
00:44:04,339 --> 00:44:10,520
framing also it looks sort of nice I

976
00:44:06,820 --> 00:44:12,560
don't everything in either way yeah I

977
00:44:10,520 --> 00:44:16,190
think I agree that the current frame was

978
00:44:12,560 --> 00:44:17,869
that Jonathan yeah okay basically like I

979
00:44:16,190 --> 00:44:19,580
don't really have a game either way like

980
00:44:17,869 --> 00:44:22,160
one entry seems slightly nicer because

981
00:44:19,580 --> 00:44:24,290
it keeps the code simple and you don't

982
00:44:22,160 --> 00:44:25,640
actually know how much like I don't have

983
00:44:24,290 --> 00:44:30,109
a good idea how much does he get your

984
00:44:25,640 --> 00:44:31,970
actually costs on those claims yeah III

985
00:44:30,109 --> 00:44:34,009
agree that the current proposed the

986
00:44:31,970 --> 00:44:37,490
current solution is kind of pessimal in

987
00:44:34,010 --> 00:44:41,060
that it is like neither clear nor nor

988
00:44:37,490 --> 00:44:42,560
simple so I think unless people

989
00:44:41,060 --> 00:44:44,000
objections those people are worried

990
00:44:42,560 --> 00:44:45,470
about doing bazillions of signatures I

991
00:44:44,000 --> 00:44:47,960
think I kind of agree with Calvin that

992
00:44:45,470 --> 00:44:50,299
the single single entry one is going to

993
00:44:47,960 --> 00:44:51,920
be simpler to reason about and we can do

994
00:44:50,300 --> 00:44:53,360
that for now and if it gets to be a

995
00:44:51,920 --> 00:44:55,910
computational burden later we can

996
00:44:53,360 --> 00:44:58,010
look into optimizing that you know

997
00:44:55,910 --> 00:45:01,730
generally seem plausible to people

998
00:44:58,010 --> 00:45:03,440
seeing a couple nods yeah okay all right

999
00:45:01,730 --> 00:45:06,260
cool

1000
00:45:03,440 --> 00:45:08,180
another thing I tried to slip in right

1001
00:45:06,260 --> 00:45:09,560
before the deadline I thought I was

1002
00:45:08,180 --> 00:45:12,950
gonna get agreement for my co-authors

1003
00:45:09,560 --> 00:45:14,150
and it turns out we didn't agree was

1004
00:45:12,950 --> 00:45:17,240
this question of making epochs

1005
00:45:14,150 --> 00:45:19,010
unpredictable so right now and the epic

1006
00:45:17,240 --> 00:45:20,629
which identifies you know all your

1007
00:45:19,010 --> 00:45:24,110
crypto state in MLS

1008
00:45:20,630 --> 00:45:26,990
yeah epic is just a counter you know you

1009
00:45:24,110 --> 00:45:29,330
started epoch 0 the next a POC is 1 the

1010
00:45:26,990 --> 00:45:31,160
next step after that is 2 and you go

1011
00:45:29,330 --> 00:45:32,779
straight forward and you have to have

1012
00:45:31,160 --> 00:45:34,609
linear history as a result because you

1013
00:45:32,780 --> 00:45:36,770
have no way to refer if no way to

1014
00:45:34,610 --> 00:45:38,200
identify to a different Forks if you

1015
00:45:36,770 --> 00:45:40,490
have them

1016
00:45:38,200 --> 00:45:43,730
this forking property it turns out is

1017
00:45:40,490 --> 00:45:45,350
important for some applications so this

1018
00:45:43,730 --> 00:45:49,190
the matrix protocol which has been

1019
00:45:45,350 --> 00:45:50,779
looking at integrating MLS is operates

1020
00:45:49,190 --> 00:45:53,240
in a fairly highly decentralized mode

1021
00:45:50,780 --> 00:45:54,560
and so they have common Forks and merges

1022
00:45:53,240 --> 00:45:55,819
of history I'm not proposing to adjust

1023
00:45:54,560 --> 00:45:58,850
the merge question which is much more

1024
00:45:55,820 --> 00:46:00,710
complicated but fork the only barriers

1025
00:45:58,850 --> 00:46:03,500
are doing the fork half of that now is

1026
00:46:00,710 --> 00:46:05,630
this epic question so the idea here

1027
00:46:03,500 --> 00:46:07,970
would be to just make the epic something

1028
00:46:05,630 --> 00:46:10,220
unpredictable so it still needs to be a

1029
00:46:07,970 --> 00:46:12,950
unique identifier for for the the state

1030
00:46:10,220 --> 00:46:15,680
of the group over time but instead of

1031
00:46:12,950 --> 00:46:17,480
assuring that by having a linear counter

1032
00:46:15,680 --> 00:46:19,759
we would assure it you know sort of

1033
00:46:17,480 --> 00:46:21,440
stochastically I mean generate some you

1034
00:46:19,760 --> 00:46:24,980
derive some value off the key schedule

1035
00:46:21,440 --> 00:46:28,730
that would become your become the

1036
00:46:24,980 --> 00:46:30,830
identifier for the app hoc Raffaele you

1037
00:46:28,730 --> 00:46:33,160
want I think you had the concerns about

1038
00:46:30,830 --> 00:46:33,160
this

1039
00:46:41,319 --> 00:46:45,770
yeah I did have some concerns I wasn't

1040
00:46:43,910 --> 00:46:49,058
quite sure if the server could actually

1041
00:46:45,770 --> 00:46:53,509
do its job of enforcing the ordering of

1042
00:46:49,059 --> 00:46:55,940
commit messages I don't have a strong

1043
00:46:53,510 --> 00:47:00,109
argument right now and this might just

1044
00:46:55,940 --> 00:47:04,220
work but I to be honest I have to think

1045
00:47:00,109 --> 00:47:06,020
about it some more okay and so to be

1046
00:47:04,220 --> 00:47:06,589
clear about why I think that's not a

1047
00:47:06,020 --> 00:47:08,480
problem

1048
00:47:06,589 --> 00:47:11,390
um the rule the server needs to commit

1049
00:47:08,480 --> 00:47:13,579
to enforce is that there are no two

1050
00:47:11,390 --> 00:47:14,808
commits on the same so if the server is

1051
00:47:13,579 --> 00:47:18,109
going to enforce linear history we're

1052
00:47:14,809 --> 00:47:19,369
not tolerate Forks then what the server

1053
00:47:18,109 --> 00:47:24,740
needs to enforce is there are no two

1054
00:47:19,369 --> 00:47:26,650
commits on the same epoch and the the

1055
00:47:24,740 --> 00:47:29,390
outside of the envelope of the mmo's

1056
00:47:26,650 --> 00:47:31,670
ciphertext will state what the epi' what

1057
00:47:29,390 --> 00:47:33,200
epoch this is premise taun and so the

1058
00:47:31,670 --> 00:47:34,819
server can see even if that's a random

1059
00:47:33,200 --> 00:47:43,359
Epoque there are no two that are

1060
00:47:34,819 --> 00:47:43,359
identical so I think the Jonathon like

1061
00:47:43,690 --> 00:47:50,089
so I think the more yeah well I I seems

1062
00:47:47,630 --> 00:47:51,589
to me that like it's pretty likely you

1063
00:47:50,089 --> 00:47:54,380
could still maintain that still do that

1064
00:47:51,589 --> 00:47:55,369
John John Clinic's I mean with only 32

1065
00:47:54,380 --> 00:47:56,569
bits you will get collisions

1066
00:47:55,369 --> 00:48:00,020
occasionally do you have a procedure for

1067
00:47:56,569 --> 00:48:02,509
that well so that's kind of the question

1068
00:48:00,020 --> 00:48:05,900
I've Illustrated 32 bits here you could

1069
00:48:02,510 --> 00:48:07,760
obviously make them 32 bytes I think

1070
00:48:05,900 --> 00:48:09,170
immediately after I posted this Brendan

1071
00:48:07,760 --> 00:48:14,359
and it submitted a comment on the Tiaras

1072
00:48:09,170 --> 00:48:16,299
like stop truncating hashes so I I'm

1073
00:48:14,359 --> 00:48:18,770
inclined to truncate a little bit here

1074
00:48:16,299 --> 00:48:20,720
just because this is gonna be send in

1075
00:48:18,770 --> 00:48:23,569
every message and it seems kind of blow

1076
00:48:20,720 --> 00:48:26,359
to you to send a 32 by - in every

1077
00:48:23,569 --> 00:48:28,520
message but I agree that we do need to

1078
00:48:26,359 --> 00:48:30,529
have have it be large enough to so make

1079
00:48:28,520 --> 00:48:32,569
collisions pretty rare I'm not super

1080
00:48:30,529 --> 00:48:36,890
worried about collisions because the

1081
00:48:32,569 --> 00:48:39,230
space of collisions is not every epoch

1082
00:48:36,890 --> 00:48:41,629
ever I think in practice you're going to

1083
00:48:39,230 --> 00:48:43,970
be worried about collisions in the the

1084
00:48:41,630 --> 00:48:45,890
set of states that clients have around

1085
00:48:43,970 --> 00:48:50,328
you're going to want to delete State for

1086
00:48:45,890 --> 00:48:52,129
forward secrecy and so clients might

1087
00:48:50,329 --> 00:48:53,480
have a handful of states around in cash

1088
00:48:52,130 --> 00:48:53,990
and it's only if you have a collision in

1089
00:48:53,480 --> 00:48:55,910
that

1090
00:48:53,990 --> 00:48:58,160
you know recent history that there's an

1091
00:48:55,910 --> 00:49:00,279
issue so like maybe it's not that big an

1092
00:48:58,160 --> 00:49:00,279
issue

1093
00:49:02,780 --> 00:49:07,069
[Music]

1094
00:49:04,099 --> 00:49:09,470
Jonathan moon cobbler if you did have a

1095
00:49:07,069 --> 00:49:12,770
collision of two blocks they were very

1096
00:49:09,470 --> 00:49:14,480
close to each other is there some way

1097
00:49:12,770 --> 00:49:16,309
you expects clients to be able to

1098
00:49:14,480 --> 00:49:21,589
recover or is just like the whole group

1099
00:49:16,309 --> 00:49:23,690
burned haven't gotten there yet I think

1100
00:49:21,589 --> 00:49:25,308
that would actually be pretty bad yeah

1101
00:49:23,690 --> 00:49:28,369
and that's why I was also concerned

1102
00:49:25,309 --> 00:49:32,809
about the collision thing because you if

1103
00:49:28,369 --> 00:49:35,030
you derive this epic ID from the key

1104
00:49:32,809 --> 00:49:38,599
schedule unless you get some new

1105
00:49:35,030 --> 00:49:40,250
freshness in two key schedules then it

1106
00:49:38,599 --> 00:49:42,170
is a problem I mean you could detect

1107
00:49:40,250 --> 00:49:44,089
that on the client side as you generate

1108
00:49:42,170 --> 00:49:46,369
the new app book you could see oh this

1109
00:49:44,089 --> 00:49:51,140
looks like the old one I better do a new

1110
00:49:46,369 --> 00:49:53,119
commit I mean you could just add

1111
00:49:51,140 --> 00:49:58,098
freshness like when you commit you have

1112
00:49:53,119 --> 00:50:01,000
to insert a nonce in to kick nhk lyrics

1113
00:49:58,099 --> 00:50:06,650
tracks and the news eh KDF expander like

1114
00:50:01,000 --> 00:50:08,540
generate your batch of comments yeah now

1115
00:50:06,650 --> 00:50:10,490
that I said I think you always have some

1116
00:50:08,540 --> 00:50:12,710
new freshness in a commit message anyway

1117
00:50:10,490 --> 00:50:20,359
because at the very least you do an

1118
00:50:12,710 --> 00:50:23,150
update of your own leave key message and

1119
00:50:20,359 --> 00:50:25,279
I mean do we also need to worry about if

1120
00:50:23,150 --> 00:50:28,460
you've got fresh is coming in too we

1121
00:50:25,280 --> 00:50:32,470
need to worry about some malicious group

1122
00:50:28,460 --> 00:50:35,089
member searching for very quickly

1123
00:50:32,470 --> 00:50:37,578
through through the first two bit key

1124
00:50:35,089 --> 00:50:39,558
space and saying here's another commit

1125
00:50:37,579 --> 00:50:42,530
that has the same ash and trying to fork

1126
00:50:39,559 --> 00:50:44,059
the state without anyone noticing that

1127
00:50:42,530 --> 00:50:47,720
the state has been forked because they

1128
00:50:44,059 --> 00:50:50,599
both have the same sort of a server

1129
00:50:47,720 --> 00:50:54,799
should catch that I mean the server

1130
00:50:50,599 --> 00:50:57,230
should see that there is a collision so

1131
00:50:54,799 --> 00:51:00,410
we must decentralized apps here

1132
00:50:57,230 --> 00:51:04,329
supporting decentralized apps okay then

1133
00:51:00,410 --> 00:51:04,328
I don't know how that would work yeah

1134
00:51:06,020 --> 00:51:09,500
so this fair question I think I'm not

1135
00:51:08,300 --> 00:51:12,710
too worried about people trying to

1136
00:51:09,500 --> 00:51:14,119
effectively reverse the epic ID any kind

1137
00:51:12,710 --> 00:51:17,240
of brute force to achieve specific

1138
00:51:14,119 --> 00:51:19,490
values because each each attempts at one

1139
00:51:17,240 --> 00:51:22,569
of those or requires several public key

1140
00:51:19,490 --> 00:51:26,390
operations so it's it's fairly expensive

1141
00:51:22,569 --> 00:51:29,359
to generate a fresh guess at an epic ID

1142
00:51:26,390 --> 00:51:30,730
if it's if it's generated like this so

1143
00:51:29,359 --> 00:51:33,589
you just you just have to worry about

1144
00:51:30,730 --> 00:51:36,500
the entire state being destroyed by

1145
00:51:33,589 --> 00:51:39,710
somebody finding one by accident yeah I

1146
00:51:36,500 --> 00:51:41,809
think so which I mean it seems like if

1147
00:51:39,710 --> 00:51:49,160
you use enough bits it can be

1148
00:51:41,809 --> 00:51:52,309
extraordinary so I think we can probably

1149
00:51:49,160 --> 00:51:54,920
continue to go a couple rounds on this

1150
00:51:52,309 --> 00:51:56,750
on the list on this but I think I'm that

1151
00:51:54,920 --> 00:51:59,089
inclined to take the risk and you know

1152
00:51:56,750 --> 00:52:00,230
we can have some discussion about how to

1153
00:51:59,089 --> 00:52:03,290
write down the security properties

1154
00:52:00,230 --> 00:52:07,720
around this on the list

1155
00:52:03,290 --> 00:52:07,720
alright so Raphael I think you're up now

1156
00:52:22,480 --> 00:52:28,099
yeah I wanted to give a brief overview

1157
00:52:24,980 --> 00:52:31,280
of the open questions we still have

1158
00:52:28,099 --> 00:52:35,930
after draft eight that we have to

1159
00:52:31,280 --> 00:52:40,010
address in the next weeks and months and

1160
00:52:35,930 --> 00:52:47,328
there is a so this three of them that

1161
00:52:40,010 --> 00:52:52,069
are really worth looking into so the

1162
00:52:47,329 --> 00:52:54,589
first one is a relatively big one and so

1163
00:52:52,069 --> 00:52:58,579
this is an extension to tree cam that

1164
00:52:54,589 --> 00:53:03,109
has been proposed by a number of people

1165
00:52:58,579 --> 00:53:05,420
row Alessandro Evgeny and Yanis and I

1166
00:53:03,109 --> 00:53:07,400
published a paper if you click on that

1167
00:53:05,420 --> 00:53:10,549
URL once the slides are published you

1168
00:53:07,400 --> 00:53:12,260
can read the whole paper so I'm not

1169
00:53:10,549 --> 00:53:14,630
intimately familiar with how it works

1170
00:53:12,260 --> 00:53:15,859
exactly and so what you're about to see

1171
00:53:14,630 --> 00:53:19,630
is probably just a gross

1172
00:53:15,859 --> 00:53:19,630
oversimplification of how it works

1173
00:53:23,029 --> 00:53:31,440
so the assumption is that the threat

1174
00:53:29,789 --> 00:53:33,299
model that is being considered for

1175
00:53:31,440 --> 00:53:35,910
archery chemists lightly different from

1176
00:53:33,299 --> 00:53:37,859
the one from tree chem so there is

1177
00:53:35,910 --> 00:53:41,129
nothing new to see here this is

1178
00:53:37,859 --> 00:53:42,660
essentially what tree chem is addressing

1179
00:53:41,130 --> 00:53:46,170
in terms of threat modeling so if you

1180
00:53:42,660 --> 00:53:50,160
assume that Alice gets compromised at

1181
00:53:46,170 --> 00:53:54,059
some point by having all of her local

1182
00:53:50,160 --> 00:53:57,420
state being copied to the attacker

1183
00:53:54,059 --> 00:54:01,019
essentially the attacker can impersonate

1184
00:53:57,420 --> 00:54:04,490
Alice up until the point that Alice does

1185
00:54:01,019 --> 00:54:06,569
an update and therefore successfully

1186
00:54:04,490 --> 00:54:09,779
evicts the attacker if the attacker

1187
00:54:06,569 --> 00:54:13,710
doesn't have any access to and storage

1188
00:54:09,779 --> 00:54:18,150
anymore Alice will have introduced some

1189
00:54:13,710 --> 00:54:21,119
freshness with the update and that

1190
00:54:18,150 --> 00:54:23,789
excludes the attacker from being part of

1191
00:54:21,119 --> 00:54:27,150
the group and so this is what we call

1192
00:54:23,789 --> 00:54:29,240
post compromised security and before the

1193
00:54:27,150 --> 00:54:33,269
point of the attack we have forward

1194
00:54:29,240 --> 00:54:36,990
security and that simply means that the

1195
00:54:33,269 --> 00:54:39,538
attacker cannot get their hands on key

1196
00:54:36,990 --> 00:54:43,140
material that would be useful to decrypt

1197
00:54:39,539 --> 00:54:51,420
things that were sent before the time of

1198
00:54:43,140 --> 00:54:54,058
the attack so in our tree cam the threat

1199
00:54:51,420 --> 00:54:56,549
model is a little larger in the sense

1200
00:54:54,059 --> 00:54:59,579
that the assumption is that an attacker

1201
00:54:56,549 --> 00:55:03,569
can potentially compromise more than one

1202
00:54:59,579 --> 00:55:07,500
member since in M&S everything is about

1203
00:55:03,569 --> 00:55:11,549
a group it makes sense to think about

1204
00:55:07,500 --> 00:55:13,170
these more complex models as well so if

1205
00:55:11,549 --> 00:55:14,880
we have the same scenario in the

1206
00:55:13,170 --> 00:55:20,549
beginning where Alice gets compromised

1207
00:55:14,880 --> 00:55:22,769
at first and later she's going to send

1208
00:55:20,549 --> 00:55:25,470
the same update but at a much later

1209
00:55:22,769 --> 00:55:27,660
point in time Bob which is an arbitrary

1210
00:55:25,470 --> 00:55:32,330
other member in the group gets

1211
00:55:27,660 --> 00:55:36,240
compromised as well so

1212
00:55:32,330 --> 00:55:38,850
in the worst case scenario where we

1213
00:55:36,240 --> 00:55:40,919
would assume that bob has been a passive

1214
00:55:38,850 --> 00:55:43,100
member meaning that bob has been

1215
00:55:40,920 --> 00:55:47,480
consuming messages sent to the group but

1216
00:55:43,100 --> 00:55:53,000
has never issued any update on his own

1217
00:55:47,480 --> 00:55:56,370
in that particular case compromising Bob

1218
00:55:53,000 --> 00:55:59,310
will dramatically increase the size of

1219
00:55:56,370 --> 00:56:01,560
the window of compromise and so the

1220
00:55:59,310 --> 00:56:06,270
reason for that is that when alice

1221
00:56:01,560 --> 00:56:09,450
issues an update she's going to cam some

1222
00:56:06,270 --> 00:56:12,990
secret to one of the nodes in Bob's

1223
00:56:09,450 --> 00:56:17,430
direct path in the worst case their

1224
00:56:12,990 --> 00:56:21,120
siblings and then she's going to commit

1225
00:56:17,430 --> 00:56:23,370
to Bob directly and if bob has not

1226
00:56:21,120 --> 00:56:26,549
issued an update in in all that time

1227
00:56:23,370 --> 00:56:30,980
that means that the Bob still has the

1228
00:56:26,550 --> 00:56:37,430
keys stored locally in his local storage

1229
00:56:30,980 --> 00:56:39,900
to decrypt that CEM to update from Alice

1230
00:56:37,430 --> 00:56:44,220
so that means that when Bob gets

1231
00:56:39,900 --> 00:56:48,390
compromised we can sort of recover the

1232
00:56:44,220 --> 00:56:51,240
freshness that L is introduced and since

1233
00:56:48,390 --> 00:56:53,580
the attacker had everything before Alice

1234
00:56:51,240 --> 00:56:56,009
introduced that freshness the attacker

1235
00:56:53,580 --> 00:56:59,130
now has absolutely everything from the

1236
00:56:56,010 --> 00:57:02,430
point where Alice got compromised to the

1237
00:56:59,130 --> 00:57:04,410
point where Bob gets compromised so this

1238
00:57:02,430 --> 00:57:05,910
looks pretty dramatic but I wanna

1239
00:57:04,410 --> 00:57:07,859
emphasize that this is the absolute

1240
00:57:05,910 --> 00:57:11,160
worst case and this is not a not

1241
00:57:07,860 --> 00:57:14,610
guaranteed to work all the time so even

1242
00:57:11,160 --> 00:57:18,660
if Bob doesn't update if Alice and Bob

1243
00:57:14,610 --> 00:57:22,380
are are sufficiently far away from each

1244
00:57:18,660 --> 00:57:24,839
other in in the binary tree then it's

1245
00:57:22,380 --> 00:57:26,280
very likely that those values will have

1246
00:57:24,840 --> 00:57:31,100
been overwritten by somebody else's

1247
00:57:26,280 --> 00:57:35,100
update this is just to illustrate how

1248
00:57:31,100 --> 00:57:38,279
compromising to separate members can

1249
00:57:35,100 --> 00:57:41,839
give you more than just the sum of those

1250
00:57:38,280 --> 00:57:41,840
two windows of compromised

1251
00:57:43,569 --> 00:57:48,710
so yeah this is what I already said

1252
00:57:46,910 --> 00:57:49,970
actually and these are the the

1253
00:57:48,710 --> 00:57:52,609
ingredients for the worst case scenario

1254
00:57:49,970 --> 00:57:54,578
basically Alice and Bob are siblings are

1255
00:57:52,609 --> 00:57:59,210
very close to each other and the tree

1256
00:57:54,579 --> 00:58:03,440
Alice gets compromised very early on Bob

1257
00:57:59,210 --> 00:58:06,020
is a passive member and only gets

1258
00:58:03,440 --> 00:58:07,910
compromised towards the the end of the

1259
00:58:06,020 --> 00:58:10,819
lifetime of the group or at the very

1260
00:58:07,910 --> 00:58:15,049
least at a much later point of time so

1261
00:58:10,819 --> 00:58:16,609
this leads to a scenario where at the

1262
00:58:15,050 --> 00:58:19,940
very least the confidentiality of the

1263
00:58:16,609 --> 00:58:22,460
group is broken and so there's been some

1264
00:58:19,940 --> 00:58:24,740
dispute whether this is now forward

1265
00:58:22,460 --> 00:58:28,369
secrecy or post compromised security

1266
00:58:24,740 --> 00:58:32,419
that is broken I've heard the term peace

1267
00:58:28,369 --> 00:58:34,520
EFS post compromised forward secrecy it

1268
00:58:32,420 --> 00:58:37,630
actually doesn't matter what we call it

1269
00:58:34,520 --> 00:58:42,740
and the confidentiality is broken for

1270
00:58:37,630 --> 00:58:47,210
quite a bit if if we run into this worst

1271
00:58:42,740 --> 00:58:50,410
case on average the window of compromise

1272
00:58:47,210 --> 00:58:53,000
gets a little bigger if you consider the

1273
00:58:50,410 --> 00:58:56,540
attacker to be able to attack more than

1274
00:58:53,000 --> 00:59:00,260
one member but it doesn't dramatically

1275
00:58:56,540 --> 00:59:03,069
increase necessarily and also it's very

1276
00:59:00,260 --> 00:59:06,140
important is the assumption here that

1277
00:59:03,069 --> 00:59:07,849
Bob is a passive member normally Bob

1278
00:59:06,140 --> 00:59:12,308
should not be a passive member everybody

1279
00:59:07,849 --> 00:59:15,470
should issue updates once in a while in

1280
00:59:12,309 --> 00:59:18,049
small groups that works really well the

1281
00:59:15,470 --> 00:59:19,939
problem is in really large groups if

1282
00:59:18,049 --> 00:59:22,250
everybody say you have a group of ten

1283
00:59:19,940 --> 00:59:24,680
thousand members if everybody issues an

1284
00:59:22,250 --> 00:59:26,859
update once a day that's a lot of

1285
00:59:24,680 --> 00:59:29,328
updates to process for other members

1286
00:59:26,859 --> 00:59:30,740
it's just some crypto to do in the

1287
00:59:29,329 --> 00:59:36,049
background it doesn't give you anything

1288
00:59:30,740 --> 00:59:38,089
other than security properties so the

1289
00:59:36,049 --> 00:59:43,460
the assumption here is that in larger

1290
00:59:38,089 --> 00:59:46,130
groups it might just be the case that

1291
00:59:43,460 --> 00:59:49,790
applications decide not to issue as many

1292
00:59:46,130 --> 00:59:53,450
updates anymore since it's not mandated

1293
00:59:49,790 --> 00:59:55,099
to issue updates regularly with MLS it's

1294
00:59:53,450 --> 00:59:56,779
up to the application to decide when to

1295
00:59:55,099 --> 01:00:00,980
issue them

1296
00:59:56,780 --> 01:00:03,530
and what people tend to go for whatever

1297
01:00:00,980 --> 01:00:06,349
is cheapest in terms of computation and

1298
01:00:03,530 --> 01:00:11,750
effort and payload so the assumption is

1299
01:00:06,349 --> 01:00:12,560
they won't be a place all the time so

1300
01:00:11,750 --> 01:00:15,319
mm-hmm

1301
01:00:12,560 --> 01:00:17,509
how does archery cam work the idea

1302
01:00:15,319 --> 01:00:20,509
behind is that we can do diffie-hellman

1303
01:00:17,510 --> 01:00:26,510
with some deltas that scheme I think is

1304
01:00:20,510 --> 01:00:30,520
called upk II so imagine that Alice has

1305
01:00:26,510 --> 01:00:34,790
a key pair a secret and a public one and

1306
01:00:30,520 --> 01:00:38,660
now Bob chooses a delta and encrypts

1307
01:00:34,790 --> 01:00:43,630
this Delta under the public key of Alice

1308
01:00:38,660 --> 01:00:45,890
and sends it to Alice what Bob can I do

1309
01:00:43,630 --> 01:00:50,260
with you PKE it's some sort of

1310
01:00:45,890 --> 01:00:55,220
homomorphic property where Bob can

1311
01:00:50,260 --> 01:00:57,859
calculate a new public key that is

1312
01:00:55,220 --> 01:01:01,939
essentially the the secret key plus the

1313
01:00:57,859 --> 01:01:04,460
Delta and advertise that without needing

1314
01:01:01,940 --> 01:01:12,530
any response from Alice and Alice can do

1315
01:01:04,460 --> 01:01:16,220
the same on her side so in practice what

1316
01:01:12,530 --> 01:01:20,060
that means so this is a tree where the

1317
01:01:16,220 --> 01:01:23,169
rightmost leaf does an update and the

1318
01:01:20,060 --> 01:01:27,140
green you can see the color as well so

1319
01:01:23,170 --> 01:01:28,940
the the green plus is here just indicate

1320
01:01:27,140 --> 01:01:32,868
that there is some new freshness on the

1321
01:01:28,940 --> 01:01:36,200
direct path all the way to the root and

1322
01:01:32,869 --> 01:01:38,089
and that's how it is today with MLS with

1323
01:01:36,200 --> 01:01:43,250
our tree can we get some additional

1324
01:01:38,089 --> 01:01:46,940
freshness on the co path on which is the

1325
01:01:43,250 --> 01:01:49,400
the siblings of the direct path nodes so

1326
01:01:46,940 --> 01:01:52,040
you have the blue pluses here that now

1327
01:01:49,400 --> 01:01:55,520
also get some freshness so and this is

1328
01:01:52,040 --> 01:01:58,819
important because these are the nodes

1329
01:01:55,520 --> 01:02:01,160
that the the the green freshness is

1330
01:01:58,819 --> 01:02:03,020
being kem to so as a passive member if

1331
01:02:01,160 --> 01:02:04,819
you consume that you're going to throw

1332
01:02:03,020 --> 01:02:07,420
away whatever old values you had in

1333
01:02:04,819 --> 01:02:07,420
there before

1334
01:02:09,650 --> 01:02:16,260
so try to come up with a list of pros

1335
01:02:12,180 --> 01:02:19,220
and cons obviously it does make sense to

1336
01:02:16,260 --> 01:02:24,930
think about an extended threat model

1337
01:02:19,220 --> 01:02:27,649
because we talk about groups things are

1338
01:02:24,930 --> 01:02:30,540
being improved if members are passive

1339
01:02:27,650 --> 01:02:32,819
but we also need to be very clear that

1340
01:02:30,540 --> 01:02:34,290
this is not an incentive for members to

1341
01:02:32,819 --> 01:02:37,290
be passive because if you're passive you

1342
01:02:34,290 --> 01:02:39,900
still don't have any pcs if you get

1343
01:02:37,290 --> 01:02:43,050
compromised so you still should do

1344
01:02:39,900 --> 01:02:46,380
updates this doesn't avoid that scenario

1345
01:02:43,050 --> 01:02:48,390
at all it comes with a little overhead

1346
01:02:46,380 --> 01:02:53,369
that seems to harbor but it's still an

1347
01:02:48,390 --> 01:02:55,319
overhead and so last night the question

1348
01:02:53,369 --> 01:02:57,510
was brought up how this compares to

1349
01:02:55,319 --> 01:03:01,170
other messaging protocols actually and

1350
01:02:57,510 --> 01:03:06,150
it's kind of hard to compare because we

1351
01:03:01,170 --> 01:03:07,770
we think in terms of groups now and and

1352
01:03:06,150 --> 01:03:09,390
there aren't that many other protocols

1353
01:03:07,770 --> 01:03:11,849
that take care of groups so send your

1354
01:03:09,390 --> 01:03:13,529
keys for example it doesn't even compare

1355
01:03:11,849 --> 01:03:16,020
because Center Keys doesn't have any

1356
01:03:13,530 --> 01:03:17,760
sort of post compromised security if you

1357
01:03:16,020 --> 01:03:21,390
get compromised as a member with Center

1358
01:03:17,760 --> 01:03:24,680
Keys then you are not going to recover

1359
01:03:21,390 --> 01:03:27,118
from that at all actually

1360
01:03:24,680 --> 01:03:29,848
until you start generating some new

1361
01:03:27,119 --> 01:03:32,099
freshness which normally you only do

1362
01:03:29,849 --> 01:03:33,990
when somebody got evicted from the group

1363
01:03:32,099 --> 01:03:40,230
so that might be a long time or never

1364
01:03:33,990 --> 01:03:42,240
actually and with pairwise encryption

1365
01:03:40,230 --> 01:03:46,440
like with playing signal protocol for

1366
01:03:42,240 --> 01:03:48,598
example again there is no notion of

1367
01:03:46,440 --> 01:03:52,290
groups so groups are done in a way that

1368
01:03:48,599 --> 01:03:53,730
you have this n minus 1 legs between you

1369
01:03:52,290 --> 01:03:56,369
and the rest of the groups and these

1370
01:03:53,730 --> 01:03:59,839
sessions these individual sessions are

1371
01:03:56,369 --> 01:04:03,990
not cryptographically correlated at all

1372
01:03:59,839 --> 01:04:08,400
so if you attack several members in a

1373
01:04:03,990 --> 01:04:10,740
group then you cannot immediately

1374
01:04:08,400 --> 01:04:14,300
combine these windows of compromise

1375
01:04:10,740 --> 01:04:17,339
because things are completely distinct

1376
01:04:14,300 --> 01:04:20,849
however it might be the case that these

1377
01:04:17,339 --> 01:04:22,650
one-to-one connections are also passive

1378
01:04:20,849 --> 01:04:24,539
so signal gives you first come

1379
01:04:22,650 --> 01:04:28,349
security if you dude if you Hammond

1380
01:04:24,539 --> 01:04:30,269
ratcheting on these sessions but if you

1381
01:04:28,349 --> 01:04:33,720
mention that two members are part of the

1382
01:04:30,269 --> 01:04:37,558
same group and but don't exchange

1383
01:04:33,720 --> 01:04:38,970
anything between each other ever it

1384
01:04:37,559 --> 01:04:43,710
could very well be that one of them is

1385
01:04:38,970 --> 01:04:45,689
absolutely passive if they're not

1386
01:04:43,710 --> 01:04:50,460
connected otherwise and exchanged

1387
01:04:45,690 --> 01:04:54,059
messages so this might still work very

1388
01:04:50,460 --> 01:04:56,009
well in signal groups as well so bottom

1389
01:04:54,059 --> 01:04:58,410
line is it's hard to compare and it's

1390
01:04:56,009 --> 01:05:02,579
it's not better or worse than others um

1391
01:04:58,410 --> 01:05:07,170
it just works differently so on the list

1392
01:05:02,579 --> 01:05:09,779
of cons that one's a little longer so

1393
01:05:07,170 --> 01:05:12,150
first of all you pke is not standard

1394
01:05:09,779 --> 01:05:14,960
cryptography so we are talking about the

1395
01:05:12,150 --> 01:05:18,509
multiplication of two private keys here

1396
01:05:14,960 --> 01:05:22,279
so this is something relatively new that

1397
01:05:18,509 --> 01:05:25,170
has not been studied in academia a lot

1398
01:05:22,279 --> 01:05:27,180
it's not nothing complicated it's it's

1399
01:05:25,170 --> 01:05:30,569
not very hard to analyze either but it's

1400
01:05:27,180 --> 01:05:33,118
it's new so if you're wondering whether

1401
01:05:30,569 --> 01:05:35,519
it's a mustache here some people have

1402
01:05:33,119 --> 01:05:37,140
out all this hipster crypto because it's

1403
01:05:35,519 --> 01:05:41,339
new and hip but we don't know if it's

1404
01:05:37,140 --> 01:05:45,569
fit for purpose and in the particular

1405
01:05:41,339 --> 01:05:47,160
case of curve 25 519 there are some

1406
01:05:45,569 --> 01:05:48,839
concerns about the security level

1407
01:05:47,160 --> 01:05:51,390
because private keys are clamped and

1408
01:05:48,839 --> 01:05:52,950
then you would count them before you

1409
01:05:51,390 --> 01:05:55,230
multiply them and then the question is

1410
01:05:52,950 --> 01:05:58,669
what you your security level is

1411
01:05:55,230 --> 01:06:00,480
afterwards and a very practical

1412
01:05:58,670 --> 01:06:01,980
consideration is that none of the

1413
01:06:00,480 --> 01:06:05,789
standard crypto libraries would support

1414
01:06:01,980 --> 01:06:08,160
this so you would have to essentially

1415
01:06:05,789 --> 01:06:10,920
roll your own in addition to whatever

1416
01:06:08,160 --> 01:06:12,808
crypto library you're using so it's

1417
01:06:10,920 --> 01:06:15,119
especially bad with web crypto because

1418
01:06:12,809 --> 01:06:15,630
then you don't have any support

1419
01:06:15,119 --> 01:06:17,039
whatsoever

1420
01:06:15,630 --> 01:06:18,890
I don't I'm not even sure you can

1421
01:06:17,039 --> 01:06:24,119
manipulate private keys with web crypto

1422
01:06:18,890 --> 01:06:26,989
easily so in for an idea of standard

1423
01:06:24,119 --> 01:06:29,519
this is quite a concern actually that

1424
01:06:26,989 --> 01:06:32,930
it's not quite clear to implementers

1425
01:06:29,519 --> 01:06:32,930
have what you do here

1426
01:06:34,240 --> 01:06:37,629
and I mentioned that already there is an

1427
01:06:36,310 --> 01:06:43,560
increase in the payload it seems

1428
01:06:37,630 --> 01:06:45,700
terrible but it's still an increase so

1429
01:06:43,560 --> 01:06:46,900
this is still an open question there's

1430
01:06:45,700 --> 01:06:51,430
been quite a bit of discussion on the

1431
01:06:46,900 --> 01:06:54,100
mailing list and the the practical

1432
01:06:51,430 --> 01:06:57,279
problem here is simply time so if this

1433
01:06:54,100 --> 01:07:00,220
is something we want to adopt this is

1434
01:06:57,280 --> 01:07:01,810
going to be an issue timewise and by

1435
01:07:00,220 --> 01:07:04,200
time you mean working through getting

1436
01:07:01,810 --> 01:07:06,720
the analysis and getting it into the

1437
01:07:04,200 --> 01:07:11,140
libraries and stuff okay exactly yes

1438
01:07:06,720 --> 01:07:12,910
Richard you had something yeah I was

1439
01:07:11,140 --> 01:07:15,580
just going to inject my analysis and

1440
01:07:12,910 --> 01:07:17,529
opinion here I think you're pros and

1441
01:07:15,580 --> 01:07:19,360
cons list about right I'm not sure this

1442
01:07:17,530 --> 01:07:20,650
would result in increased payload size I

1443
01:07:19,360 --> 01:07:22,000
think you could you made you to be able

1444
01:07:20,650 --> 01:07:24,490
to get away with deriving some extra

1445
01:07:22,000 --> 01:07:28,150
stuff and folding that in but again that

1446
01:07:24,490 --> 01:07:30,640
would require more analysis my general

1447
01:07:28,150 --> 01:07:33,640
inclination here is to punt on this for

1448
01:07:30,640 --> 01:07:36,819
now and not add it to the spec probably

1449
01:07:33,640 --> 01:07:38,618
in in in the initial version we do I

1450
01:07:36,820 --> 01:07:42,460
think this might be doable as an

1451
01:07:38,619 --> 01:07:44,080
extension or as a v1 I'm thinking about

1452
01:07:42,460 --> 01:07:45,700
some of the extensions made the tea laws

1453
01:07:44,080 --> 01:07:47,020
between proposed since he lost one not

1454
01:07:45,700 --> 01:07:48,009
three to kind of update the key schedule

1455
01:07:47,020 --> 01:07:50,500
with new stuff I think you could

1456
01:07:48,010 --> 01:07:54,280
envision this as an analogous extension

1457
01:07:50,500 --> 01:07:56,680
to MLS if you know once we finish the

1458
01:07:54,280 --> 01:07:59,350
initial version and assuming the the

1459
01:07:56,680 --> 01:08:03,100
relevant you know prerequisites firm up

1460
01:07:59,350 --> 01:08:04,600
I'm I think I am I think the the the

1461
01:08:03,100 --> 01:08:06,910
hipster crypto aspect of this is

1462
01:08:04,600 --> 01:08:08,920
concerning for me like I don't think we

1463
01:08:06,910 --> 01:08:12,129
have a firm enough grasp on what this

1464
01:08:08,920 --> 01:08:13,840
update operation entails and what the

1465
01:08:12,130 --> 01:08:16,810
bounds are on its usability especially

1466
01:08:13,840 --> 01:08:20,200
in the in the curve t 509 incur four

1467
01:08:16,810 --> 01:08:22,029
four eight case I'm pleased that the the

1468
01:08:20,200 --> 01:08:24,759
proposers here haven't actually worked

1469
01:08:22,029 --> 01:08:26,290
out how did it do it like when we first

1470
01:08:24,759 --> 01:08:27,910
look at this it wasn't clear that it was

1471
01:08:26,290 --> 01:08:29,589
even possible to do updating like this

1472
01:08:27,910 --> 01:08:33,759
on on two five five one nine and four

1473
01:08:29,589 --> 01:08:35,979
four eight we have Nelson as and proof

1474
01:08:33,759 --> 01:08:40,120
that it is in fact possible with a

1475
01:08:35,979 --> 01:08:42,759
couple of caveats but I don't feel like

1476
01:08:40,120 --> 01:08:44,649
we have a strong enough understanding of

1477
01:08:42,759 --> 01:08:46,060
what the implications of that are to be

1478
01:08:44,649 --> 01:08:47,960
comfortable adding this to the spec so

1479
01:08:46,060 --> 01:08:56,150
so my proposal is we cut basically

1480
01:08:47,960 --> 01:09:00,140
to punt on this for now okay any other

1481
01:08:56,149 --> 01:09:02,238
questions just to conclude I like I I do

1482
01:09:00,140 --> 01:09:05,480
think that the it what it provides is

1483
01:09:02,238 --> 01:09:07,759
valuable I think the increase for PC FS

1484
01:09:05,479 --> 01:09:09,528
as its called it is a valuable extra

1485
01:09:07,759 --> 01:09:11,930
property but I don't think it's one we

1486
01:09:09,529 --> 01:09:15,410
can't live without I feel comfortable

1487
01:09:11,930 --> 01:09:17,750
punting yeah I tend to agree with that I

1488
01:09:15,410 --> 01:09:20,059
mean it's not like MLS is catastrophic

1489
01:09:17,750 --> 01:09:23,479
ly bad without that it's so very good

1490
01:09:20,060 --> 01:09:27,380
but um this would make it a little

1491
01:09:23,479 --> 01:09:29,179
better we just have to be very careful

1492
01:09:27,380 --> 01:09:31,850
not to introduce any new risks because

1493
01:09:29,180 --> 01:09:33,710
of the new crypto I mean so the idea is

1494
01:09:31,850 --> 01:09:35,900
it like if this is good and better and

1495
01:09:33,710 --> 01:09:38,660
we could get it in v2 right with the

1496
01:09:35,899 --> 01:09:40,670
idea be that we would kick all this

1497
01:09:38,660 --> 01:09:42,469
other process off to get this reviewed

1498
01:09:40,670 --> 01:09:44,029
and put in other libraries to get ready

1499
01:09:42,469 --> 01:09:48,020
to use for v2 or do you think it would

1500
01:09:44,029 --> 01:09:50,060
just kind of stop no I mean that could

1501
01:09:48,020 --> 01:09:57,340
be ongoing work okay depends on how

1502
01:09:50,060 --> 01:10:07,130
dedicated people are any other questions

1503
01:09:57,340 --> 01:10:09,590
comments so I'm gonna jump to another

1504
01:10:07,130 --> 01:10:12,770
subject this one's going to be very

1505
01:10:09,590 --> 01:10:14,120
brief we talked about that in the past

1506
01:10:12,770 --> 01:10:16,700
and I just wanted to give you a little

1507
01:10:14,120 --> 01:10:18,530
overview of where we stand which is

1508
01:10:16,700 --> 01:10:23,450
pretty much still in the same place as

1509
01:10:18,530 --> 01:10:25,130
last time so when you add a new member

1510
01:10:23,450 --> 01:10:30,920
to a group whether that is actually a

1511
01:10:25,130 --> 01:10:33,050
new user or a new client you have to

1512
01:10:30,920 --> 01:10:34,880
transfer some state some of it is secret

1513
01:10:33,050 --> 01:10:39,770
and and that goes into the Welcome

1514
01:10:34,880 --> 01:10:42,260
message and some of it is the the public

1515
01:10:39,770 --> 01:10:44,060
keys in the tree which are not

1516
01:10:42,260 --> 01:10:48,830
particularly secret because they're

1517
01:10:44,060 --> 01:10:50,870
public keys and finally also the the

1518
01:10:48,830 --> 01:10:54,640
roster meaning the the list of members

1519
01:10:50,870 --> 01:10:57,250
in a group so we have

1520
01:10:54,640 --> 01:10:59,110
ways of doing it fundamentally one is

1521
01:10:57,250 --> 01:11:01,750
the one that is in the protocol right

1522
01:10:59,110 --> 01:11:04,349
now and that is client to client meaning

1523
01:11:01,750 --> 01:11:07,390
everything goes into the welcome message

1524
01:11:04,350 --> 01:11:10,660
it's enter an encrypted so it's secure

1525
01:11:07,390 --> 01:11:14,050
and private you cannot really look into

1526
01:11:10,660 --> 01:11:15,370
it the problem is it doesn't scare very

1527
01:11:14,050 --> 01:11:19,090
well so if you have a very large group

1528
01:11:15,370 --> 01:11:23,500
you get a huge welcome message and also

1529
01:11:19,090 --> 01:11:26,620
if you are a member of many groups and

1530
01:11:23,500 --> 01:11:29,200
then you add a device then you need to

1531
01:11:26,620 --> 01:11:31,809
transfer the state for those many groups

1532
01:11:29,200 --> 01:11:38,019
to the new device so this is also a

1533
01:11:31,810 --> 01:11:39,880
scalability problem so very early on one

1534
01:11:38,020 --> 01:11:44,130
of the intuitions was that we need the

1535
01:11:39,880 --> 01:11:44,130
server to assist with that somehow and

1536
01:11:45,420 --> 01:11:51,280
one way of doing it of course is to

1537
01:11:47,980 --> 01:11:55,419
store the public keys of the tree on the

1538
01:11:51,280 --> 01:11:57,759
server and also to store the the roster

1539
01:11:55,420 --> 01:12:01,360
on the server meaning who was a member

1540
01:11:57,760 --> 01:12:04,060
of the group so the public keys of the

1541
01:12:01,360 --> 01:12:07,540
trees probably not too bad is it just

1542
01:12:04,060 --> 01:12:09,040
public user and say a lot such I mean

1543
01:12:07,540 --> 01:12:11,860
they don't really help identifying

1544
01:12:09,040 --> 01:12:14,410
people etc they could maybe be used for

1545
01:12:11,860 --> 01:12:15,880
some more elaborate attacks having the

1546
01:12:14,410 --> 01:12:17,860
roster on the server is not great on the

1547
01:12:15,880 --> 01:12:20,860
other hand it's a privacy concern so

1548
01:12:17,860 --> 01:12:25,620
this is obviously the the worst solution

1549
01:12:20,860 --> 01:12:28,089
in terms of privacy and so ever since

1550
01:12:25,620 --> 01:12:32,260
the idea was born that maybe we can

1551
01:12:28,090 --> 01:12:34,090
encrypt this stuff as well and so this

1552
01:12:32,260 --> 01:12:36,520
is something where you want to look into

1553
01:12:34,090 --> 01:12:38,710
in the next weeks and months because we

1554
01:12:36,520 --> 01:12:41,890
don't have a very good proposal for that

1555
01:12:38,710 --> 01:12:45,370
yet so we are talking about metadata

1556
01:12:41,890 --> 01:12:48,310
encryption so if it doesn't have all the

1557
01:12:45,370 --> 01:12:52,320
security properties that we apply to

1558
01:12:48,310 --> 01:12:52,320
messages for example that might be fine

1559
01:12:53,070 --> 01:12:58,780
but but we need some good initial

1560
01:12:56,650 --> 01:13:02,379
proposal so this is still an open

1561
01:12:58,780 --> 01:13:03,910
question as such so I guess you're being

1562
01:13:02,380 --> 01:13:06,250
really nice I'll try to make this a

1563
01:13:03,910 --> 01:13:08,860
little more pointed is there anybody

1564
01:13:06,250 --> 01:13:18,790
that wants to stand up and talk first

1565
01:13:08,860 --> 01:13:19,750
doing client-to-client for this because

1566
01:13:18,790 --> 01:13:21,430
i mean it works well in small

1567
01:13:19,750 --> 01:13:24,750
environments but some of the environment

1568
01:13:21,430 --> 01:13:29,440
we're talking about are like 10,000 so

1569
01:13:24,750 --> 01:13:31,150
this is Richard wood I'm standing up

1570
01:13:29,440 --> 01:13:34,000
because the you know logistically

1571
01:13:31,150 --> 01:13:36,940
simplest and what I think probably

1572
01:13:34,000 --> 01:13:40,540
merits running to ground is whether

1573
01:13:36,940 --> 01:13:41,860
there's with the recent so especially

1574
01:13:40,540 --> 01:13:44,040
with the recent simplifications to

1575
01:13:41,860 --> 01:13:48,160
welcome message where you're sending one

1576
01:13:44,040 --> 01:13:50,980
large thing to welcome everybody I'm not

1577
01:13:48,160 --> 01:13:53,530
sure that seems pretty close to like the

1578
01:13:50,980 --> 01:13:56,679
theoretical lower bound on how much data

1579
01:13:53,530 --> 01:13:57,759
you'd have to send so I I'm fine to

1580
01:13:56,680 --> 01:13:59,230
investigating some alternative

1581
01:13:57,760 --> 01:14:02,020
strategies here but I wonder if there's

1582
01:13:59,230 --> 01:14:04,240
there's actually much to be gained here

1583
01:14:02,020 --> 01:14:06,550
well I'm hoping that we can go from

1584
01:14:04,240 --> 01:14:07,990
three to at least two because I think D

1585
01:14:06,550 --> 01:14:09,790
is just I think two is like a

1586
01:14:07,990 --> 01:14:11,469
non-starter so if anybody wants to get

1587
01:14:09,790 --> 01:14:14,350
up and start talking about that one well

1588
01:14:11,470 --> 01:14:17,260
they don't get interesting let's call

1589
01:14:14,350 --> 01:14:18,550
them one one use case that was pretty

1590
01:14:17,260 --> 01:14:20,260
useful transferring states Windows

1591
01:14:18,550 --> 01:14:22,690
client loses a stay and sort of starts

1592
01:14:20,260 --> 01:14:24,340
failing to decrypt stuff and so get that

1593
01:14:22,690 --> 01:14:26,290
like the current solution just remove an

1594
01:14:24,340 --> 01:14:27,700
ad that feels kinda like you could just

1595
01:14:26,290 --> 01:14:31,690
get the state back somehow better it

1596
01:14:27,700 --> 01:14:33,460
would be nice yeah I mean you just

1597
01:14:31,690 --> 01:14:38,019
address another problem actually I'm

1598
01:14:33,460 --> 01:14:39,460
kind of losing states so at the very

1599
01:14:38,020 --> 01:14:41,950
least they'd they have to get the state

1600
01:14:39,460 --> 01:14:43,870
back yeah yeah so I think maybe that

1601
01:14:41,950 --> 01:14:46,269
revised my previous remarks I think

1602
01:14:43,870 --> 01:14:48,010
maybe this is not exactly the right

1603
01:14:46,270 --> 01:14:50,980
access to slice this on like you're

1604
01:14:48,010 --> 01:14:52,870
gonna have to have the initiating or

1605
01:14:50,980 --> 01:14:55,780
you're gonna have clients upload

1606
01:14:52,870 --> 01:14:57,880
something that this you know that the

1607
01:14:55,780 --> 01:15:00,610
server holds on to and redistributes I

1608
01:14:57,880 --> 01:15:02,050
think so we should I think the question

1609
01:15:00,610 --> 01:15:03,610
we need to investigate here is like what

1610
01:15:02,050 --> 01:15:04,870
does the client need to update and under

1611
01:15:03,610 --> 01:15:06,730
what circumstances and what the server

1612
01:15:04,870 --> 01:15:08,110
needs all wants you I think that kind of

1613
01:15:06,730 --> 01:15:10,660
covers all three of these cases and we

1614
01:15:08,110 --> 01:15:11,500
can answer those questions so yeah yeah

1615
01:15:10,660 --> 01:15:13,720
I mean that's correct I mean

1616
01:15:11,500 --> 01:15:15,610
transferring means the kind is uploading

1617
01:15:13,720 --> 01:15:16,960
it to a server most likely because we're

1618
01:15:15,610 --> 01:15:19,599
not in a peer-to-peer scenario

1619
01:15:16,960 --> 01:15:20,690
necessarily and and then another client

1620
01:15:19,600 --> 01:15:23,750
downloading it

1621
01:15:20,690 --> 01:15:25,250
so the the idea for services is that the

1622
01:15:23,750 --> 01:15:28,370
uploading still happens but it happens

1623
01:15:25,250 --> 01:15:31,130
ahead of time alongside other messages

1624
01:15:28,370 --> 01:15:32,830
so that when we're in the scenario where

1625
01:15:31,130 --> 01:15:36,980
a client needs to download everything

1626
01:15:32,830 --> 01:15:38,450
that clan can do that without having to

1627
01:15:36,980 --> 01:15:45,410
wait for another client to upload

1628
01:15:38,450 --> 01:15:49,040
something first all right

1629
01:15:45,410 --> 01:15:53,599
no further questions Richard already

1630
01:15:49,040 --> 01:15:56,180
mentioned it earlier on this has been a

1631
01:15:53,600 --> 01:15:58,940
long-standing idea to send things to a

1632
01:15:56,180 --> 01:16:00,500
group from an external party so the

1633
01:15:58,940 --> 01:16:01,940
external party the assumption here of

1634
01:16:00,500 --> 01:16:06,470
course is that that party doesn't have

1635
01:16:01,940 --> 01:16:09,169
access to any of the group secrets yet

1636
01:16:06,470 --> 01:16:13,450
can still encrypt in a way that only

1637
01:16:09,170 --> 01:16:13,450
members of the group can then decrypt it

1638
01:16:15,370 --> 01:16:19,580
so there are some different use cases

1639
01:16:17,450 --> 01:16:22,490
for that just to motivate the idea as

1640
01:16:19,580 --> 01:16:25,250
such for example the server can encrypt

1641
01:16:22,490 --> 01:16:28,780
things like status messages that are

1642
01:16:25,250 --> 01:16:32,840
application specific to the group and

1643
01:16:28,780 --> 01:16:35,719
that way those messages don't have to

1644
01:16:32,840 --> 01:16:38,000
stay on the server unencrypted until

1645
01:16:35,720 --> 01:16:39,830
they're consumed so in that case it's

1646
01:16:38,000 --> 01:16:43,400
more like meta data protection

1647
01:16:39,830 --> 01:16:45,470
essentially another use case that I

1648
01:16:43,400 --> 01:16:47,420
think is going to be very important and

1649
01:16:45,470 --> 01:16:49,670
that is when external users are being

1650
01:16:47,420 --> 01:16:52,760
invited to the group Richard mentioned

1651
01:16:49,670 --> 01:16:55,000
it already that this might be a proposal

1652
01:16:52,760 --> 01:16:58,730
from the server for example and that

1653
01:16:55,000 --> 01:17:00,980
proposal has not yet been committed yet

1654
01:16:58,730 --> 01:17:03,320
the invitation is already sent out so

1655
01:17:00,980 --> 01:17:06,410
the the new user or the new client

1656
01:17:03,320 --> 01:17:08,660
thinks that there will soon be part of

1657
01:17:06,410 --> 01:17:10,309
the group they don't have they don't

1658
01:17:08,660 --> 01:17:12,050
receive any messages because there's no

1659
01:17:10,310 --> 01:17:13,580
activity in the group but maybe they

1660
01:17:12,050 --> 01:17:16,520
would like to send some messages already

1661
01:17:13,580 --> 01:17:19,910
and then they could do that with that

1662
01:17:16,520 --> 01:17:24,290
mechanism yeah there's a question so

1663
01:17:19,910 --> 01:17:27,500
there's Calvin just two things here if

1664
01:17:24,290 --> 01:17:29,210
two users so one of those cases here is

1665
01:17:27,500 --> 01:17:31,400
the for external user hasn't yet joined

1666
01:17:29,210 --> 01:17:34,320
the group he also has the group so this

1667
01:17:31,400 --> 01:17:35,879
is means they can send and receive

1668
01:17:34,320 --> 01:17:38,309
commits but they won't PLC received

1669
01:17:35,880 --> 01:17:40,860
messages from another user in the same

1670
01:17:38,310 --> 01:17:42,210
state as another user who hasn't yet

1671
01:17:40,860 --> 01:17:44,009
joined the group so if two people try to

1672
01:17:42,210 --> 01:17:45,450
join the group they're not quite added

1673
01:17:44,010 --> 01:17:47,970
yet and they both send messages the

1674
01:17:45,450 --> 01:17:51,050
okiya each other's messages uh yeah

1675
01:17:47,970 --> 01:17:53,910
that's a very good poncho and secondly

1676
01:17:51,050 --> 01:17:55,770
if a user is proposed to be removed but

1677
01:17:53,910 --> 01:17:58,500
hasn't been removed yet they'll be like

1678
01:17:55,770 --> 01:18:00,270
get these messages as well sorry can you

1679
01:17:58,500 --> 01:18:01,740
repeat that last one if the users been

1680
01:18:00,270 --> 01:18:03,690
proposed to be removed but that remove

1681
01:18:01,740 --> 01:18:04,950
hasn't been committed yet they'll be

1682
01:18:03,690 --> 01:18:07,530
able to get these external messages as

1683
01:18:04,950 --> 01:18:09,179
well because this if these extra users

1684
01:18:07,530 --> 01:18:14,610
not gonna commit the remove before

1685
01:18:09,180 --> 01:18:21,330
sending a message yeah I think so I

1686
01:18:14,610 --> 01:18:23,910
think the user would still get those but

1687
01:18:21,330 --> 01:18:26,130
I mean the user doesn't appear as being

1688
01:18:23,910 --> 01:18:30,210
removed yet at least to the external

1689
01:18:26,130 --> 01:18:31,620
user yes so I mean maybe know what you

1690
01:18:30,210 --> 01:18:33,480
want but at least it would be

1691
01:18:31,620 --> 01:18:38,309
transparent yeah but it's a very good

1692
01:18:33,480 --> 01:18:44,120
point yeah we can obviously come up with

1693
01:18:38,310 --> 01:18:52,490
some more rules around that this is a

1694
01:18:44,120 --> 01:18:54,840
relatively simple approach for now and

1695
01:18:52,490 --> 01:18:58,679
another use case would be handshake

1696
01:18:54,840 --> 01:19:02,430
messages so when the server does a

1697
01:18:58,680 --> 01:19:04,800
proposal for an add or remove we can

1698
01:19:02,430 --> 01:19:07,370
simply also just encrypt that to the

1699
01:19:04,800 --> 01:19:09,720
group again this is in the context of

1700
01:19:07,370 --> 01:19:16,380
protecting that that metadata

1701
01:19:09,720 --> 01:19:19,710
essentially and then of course we are

1702
01:19:16,380 --> 01:19:22,010
depended at the fact that whether or not

1703
01:19:19,710 --> 01:19:24,570
a commit will be consumed or accepted

1704
01:19:22,010 --> 01:19:27,000
sorry whether proposals will make it

1705
01:19:24,570 --> 01:19:28,679
into the the commit that will depend on

1706
01:19:27,000 --> 01:19:31,610
the particular policy that the

1707
01:19:28,680 --> 01:19:31,610
application will apply

1708
01:19:35,500 --> 01:19:41,500
so in practical terms this is certainly

1709
01:19:38,440 --> 01:19:46,120
not the final version but just to give

1710
01:19:41,500 --> 01:19:49,540
you an idea in the key schedule we can

1711
01:19:46,120 --> 01:19:52,660
simply derive a secret sent from outside

1712
01:19:49,540 --> 01:19:56,860
secret and we can take that secret to

1713
01:19:52,660 --> 01:20:01,800
generate or to derive a key pair and

1714
01:19:56,860 --> 01:20:04,599
then we can just use HQ ke with that so

1715
01:20:01,800 --> 01:20:10,660
on the last struct we have an ephemeral

1716
01:20:04,600 --> 01:20:13,300
hpk public key that is used and then the

1717
01:20:10,660 --> 01:20:16,930
message is simply just encrypted as an h

1718
01:20:13,300 --> 01:20:20,080
PK ciphertext so note that there is no

1719
01:20:16,930 --> 01:20:24,220
authentication here so this is a an open

1720
01:20:20,080 --> 01:20:25,840
question as well whether or in what way

1721
01:20:24,220 --> 01:20:28,270
we want this to be authenticated because

1722
01:20:25,840 --> 01:20:30,640
obviously if a member of the group

1723
01:20:28,270 --> 01:20:37,090
receives that they don't know who who

1724
01:20:30,640 --> 01:20:40,150
sent it it could be anyone so yeah that

1725
01:20:37,090 --> 01:20:42,340
is an open question if it is an external

1726
01:20:40,150 --> 01:20:45,009
user for example that is about to become

1727
01:20:42,340 --> 01:20:47,290
a real member then we actually have some

1728
01:20:45,010 --> 01:20:49,420
identity key material that we could use

1729
01:20:47,290 --> 01:20:54,580
for a signature if it is something that

1730
01:20:49,420 --> 01:20:56,470
it's sent by the server then we might

1731
01:20:54,580 --> 01:20:59,559
not have that because the server is not

1732
01:20:56,470 --> 01:21:03,010
signing stuff so the most general case

1733
01:20:59,560 --> 01:21:06,490
here for me would be to say this should

1734
01:21:03,010 --> 01:21:11,470
be some sort of more proprietary format

1735
01:21:06,490 --> 01:21:14,849
inside the cipher text richer bars again

1736
01:21:11,470 --> 01:21:18,580
so I think the first chunk of this is

1737
01:21:14,850 --> 01:21:20,410
totally sensible I think yes so the

1738
01:21:18,580 --> 01:21:21,460
first two chunks deriving something

1739
01:21:20,410 --> 01:21:25,450
that's the key scheduling then deriving

1740
01:21:21,460 --> 01:21:28,090
keep her off that obvious I think you

1741
01:21:25,450 --> 01:21:30,880
have actually two authentication

1742
01:21:28,090 --> 01:21:32,680
problems not just one you have the

1743
01:21:30,880 --> 01:21:33,730
problem of authenticating who is sending

1744
01:21:32,680 --> 01:21:35,260
to the group but you also have the

1745
01:21:33,730 --> 01:21:38,769
authentic the problem authenticating

1746
01:21:35,260 --> 01:21:42,220
whether a key belongs to a group for the

1747
01:21:38,770 --> 01:21:45,010
sender now I think that's probably not

1748
01:21:42,220 --> 01:21:46,600
an issue that we're gonna solve in the

1749
01:21:45,010 --> 01:21:49,030
protocol I think that's probably

1750
01:21:46,600 --> 01:21:52,090
something to cover in the architecture

1751
01:21:49,030 --> 01:21:53,860
that's yeah basically is an additional

1752
01:21:52,090 --> 01:21:55,270
function of the authentication services

1753
01:21:53,860 --> 01:21:57,969
we call deposited an authentication

1754
01:21:55,270 --> 01:22:01,570
service that vouches for bindings

1755
01:21:57,969 --> 01:22:04,980
between user identities and public keys

1756
01:22:01,570 --> 01:22:07,808
I think what is needed to make this

1757
01:22:04,980 --> 01:22:09,159
really hold together is an additional

1758
01:22:07,809 --> 01:22:11,500
function on that identification service

1759
01:22:09,159 --> 01:22:15,308
to vouch for bindings between group

1760
01:22:11,500 --> 01:22:17,829
identities and public keys so I think we

1761
01:22:15,309 --> 01:22:21,520
just need to describe that in order to

1762
01:22:17,829 --> 01:22:25,480
have that full story there as far as the

1763
01:22:21,520 --> 01:22:28,900
sender authentication I my inclination

1764
01:22:25,480 --> 01:22:31,869
here would be to reuse the MLS plaintext

1765
01:22:28,900 --> 01:22:34,449
structure and so you would have a signed

1766
01:22:31,869 --> 01:22:36,839
message with same sort of contents of

1767
01:22:34,449 --> 01:22:45,339
your application messages or proposals

1768
01:22:36,840 --> 01:22:46,960
and basically treat this as I think if

1769
01:22:45,340 --> 01:22:49,659
you do that all you really have to do is

1770
01:22:46,960 --> 01:22:51,550
provide a credential alongside that in

1771
01:22:49,659 --> 01:22:54,909
the wrapping so you'd have kind of an

1772
01:22:51,550 --> 01:22:56,020
alternative MLS ciphertext thing so

1773
01:22:54,909 --> 01:22:58,539
right now I'm lost I protect I'm

1774
01:22:56,020 --> 01:23:00,550
symmetric encrypted MLS plaintext so

1775
01:22:58,539 --> 01:23:02,949
you'd have like MLS a symmetric cipher

1776
01:23:00,550 --> 01:23:04,869
text or something like that where you

1777
01:23:02,949 --> 01:23:07,089
would have as you have here the hbk a

1778
01:23:04,869 --> 01:23:10,360
cipher text but probably also the

1779
01:23:07,090 --> 01:23:12,489
credential that goes with that and so

1780
01:23:10,360 --> 01:23:14,710
that you can so that the members of the

1781
01:23:12,489 --> 01:23:17,320
group can verify from whom this message

1782
01:23:14,710 --> 01:23:20,130
was sent right yeah so to address the

1783
01:23:17,320 --> 01:23:22,389
two things you said with the

1784
01:23:20,130 --> 01:23:24,460
authentication of the group towards the

1785
01:23:22,389 --> 01:23:26,469
external sender that's a very

1786
01:23:24,460 --> 01:23:28,599
interesting question and we have to see

1787
01:23:26,469 --> 01:23:30,099
what what sort of guarantees we can give

1788
01:23:28,599 --> 01:23:32,199
there because obviously the external

1789
01:23:30,099 --> 01:23:34,150
party doesn't know anything about the

1790
01:23:32,199 --> 01:23:36,159
group and we'll get that from a party

1791
01:23:34,150 --> 01:23:40,480
that is mostly untrusted probably the

1792
01:23:36,159 --> 01:23:43,449
server so we have to see what meaningful

1793
01:23:40,480 --> 01:23:45,280
guarantees we can have that are

1794
01:23:43,449 --> 01:23:46,900
immediately applicable and not only in

1795
01:23:45,280 --> 01:23:49,630
hindsight once a member has actually

1796
01:23:46,900 --> 01:23:52,629
drawn the group because that mattress be

1797
01:23:49,630 --> 01:23:53,920
too light and the other one regarding

1798
01:23:52,630 --> 01:23:54,599
the signature yeah I thought about that

1799
01:23:53,920 --> 01:23:57,250
as well

1800
01:23:54,599 --> 01:23:59,409
so obviously we don't want to have the

1801
01:23:57,250 --> 01:24:01,449
signature out in the clear we want to

1802
01:23:59,409 --> 01:24:04,358
that should be part of some ciphertext

1803
01:24:01,449 --> 01:24:05,978
or insert some ciphertext the other

1804
01:24:04,359 --> 01:24:08,679
thing is that the signature might just

1805
01:24:05,979 --> 01:24:11,829
be optional simply because there there

1806
01:24:08,679 --> 01:24:13,709
are scenarios were you don't want that

1807
01:24:11,829 --> 01:24:16,438
because your server doesn't sign stuff

1808
01:24:13,709 --> 01:24:23,769
we could make that mandatory of course

1809
01:24:16,439 --> 01:24:27,039
but so in that case what I'm concerned

1810
01:24:23,769 --> 01:24:30,099
about in the case of when you say server

1811
01:24:27,039 --> 01:24:33,099
doesn't sign stuff is when the group

1812
01:24:30,099 --> 01:24:35,769
receives a proposal to say add someone

1813
01:24:33,099 --> 01:24:38,439
that purports to be from the server how

1814
01:24:35,769 --> 01:24:41,949
do they verify that they should accept

1815
01:24:38,439 --> 01:24:46,809
that proposal yeah I mean that is an

1816
01:24:41,949 --> 01:24:49,799
open question how you generally deal

1817
01:24:46,809 --> 01:24:53,649
with proposals coming from the server

1818
01:24:49,799 --> 01:24:55,599
they could be signed but I mean the

1819
01:24:53,649 --> 01:24:59,319
signing key lives on the server as well

1820
01:24:55,599 --> 01:25:01,809
so um I agree with you that that it

1821
01:24:59,319 --> 01:25:04,779
doesn't sound good but when things are

1822
01:25:01,809 --> 01:25:08,769
not signed particularly in the contexts

1823
01:25:04,779 --> 01:25:11,229
of an remove so let me ask maybe ask the

1824
01:25:08,769 --> 01:25:13,679
question a little differently um do you

1825
01:25:11,229 --> 01:25:17,079
think that requiring servers to sign

1826
01:25:13,679 --> 01:25:18,789
proposals into the group would cause

1827
01:25:17,079 --> 01:25:20,799
operational problems or deployment

1828
01:25:18,789 --> 01:25:22,898
problems or do you think we might just

1829
01:25:20,799 --> 01:25:23,859
not quite get the properties you would

1830
01:25:22,899 --> 01:25:25,359
expect out of it

1831
01:25:23,859 --> 01:25:27,309
no no it's only for practical reasons

1832
01:25:25,359 --> 01:25:31,239
but I mean you might be right maybe we

1833
01:25:27,309 --> 01:25:34,089
should just enforce that it's not so

1834
01:25:31,239 --> 01:25:35,768
complicated to generate some key

1835
01:25:34,089 --> 01:25:37,449
material the only thing is that we need

1836
01:25:35,769 --> 01:25:40,749
to make sure that clients actually trust

1837
01:25:37,449 --> 01:25:42,848
that so we run into the typical

1838
01:25:40,749 --> 01:25:44,559
certificate problems there yeah I

1839
01:25:42,849 --> 01:25:46,079
actually think this cleans up the

1840
01:25:44,559 --> 01:25:50,619
problem that Calvin noted with the

1841
01:25:46,079 --> 01:25:52,089
current hacky system of signaling you

1842
01:25:50,619 --> 01:25:53,949
know reserving some code points and

1843
01:25:52,089 --> 01:25:57,010
signaling external stuff that way

1844
01:25:53,949 --> 01:26:00,339
because if the message from outside

1845
01:25:57,010 --> 01:26:02,979
contains a credential and is signed now

1846
01:26:00,339 --> 01:26:05,979
you don't have to pre configure all of

1847
01:26:02,979 --> 01:26:08,859
the public keys into the clients you can

1848
01:26:05,979 --> 01:26:11,619
configure some identity authorities key

1849
01:26:08,859 --> 01:26:14,289
and configure the clients to trust

1850
01:26:11,619 --> 01:26:14,950
servers the certificates issued by that

1851
01:26:14,289 --> 01:26:17,700
I don't need

1852
01:26:14,950 --> 01:26:24,700
so it makes the signaling a lot cleaner

1853
01:26:17,700 --> 01:26:26,830
it's probably the way to go you know but

1854
01:26:24,700 --> 01:26:27,580
those modifications I think this is a

1855
01:26:26,830 --> 01:26:33,040
good thing to do

1856
01:26:27,580 --> 01:26:34,240
oh yeah I know and one thing I think

1857
01:26:33,040 --> 01:26:37,000
Benjamin mentioned it last night

1858
01:26:34,240 --> 01:26:39,040
regarding the derivation of the key pair

1859
01:26:37,000 --> 01:26:43,390
potentially we could derive more than

1860
01:26:39,040 --> 01:26:45,960
one key pair for a given netbook I'm not

1861
01:26:43,390 --> 01:26:50,020
entirely sure what that solves but um

1862
01:26:45,960 --> 01:26:52,840
it's definitely a possibility and in the

1863
01:26:50,020 --> 01:26:58,120
same way we do it with the exporter for

1864
01:26:52,840 --> 01:27:02,820
the key schedule yeah I think that was

1865
01:26:58,120 --> 01:27:02,820
the last slide any more questions

1866
01:27:04,140 --> 01:27:11,280
thank you I have one more question are

1867
01:27:08,020 --> 01:27:15,300
you are you gonna make a PR for this I

1868
01:27:11,280 --> 01:27:15,300
knew you're gonna ask us of course

1869
01:27:28,690 --> 01:27:39,370
I am Benjamin BER douche Oh can I get a

1870
01:27:32,680 --> 01:27:42,820
line here yeah so this is a couple more

1871
01:27:39,370 --> 01:27:46,870
future issues that Benjamin and I have

1872
01:27:42,820 --> 01:27:50,280
been noodling on with so gonna try and

1873
01:27:46,870 --> 01:27:55,150
outline issues here maybe there's like a

1874
01:27:50,280 --> 01:27:56,790
expand fill screen yeah that one it's

1875
01:27:55,150 --> 01:28:00,280
the opposite of what I expected

1876
01:27:56,790 --> 01:28:02,440
so a couple of things that we have some

1877
01:28:00,280 --> 01:28:04,450
of which we've got pr's on can try and

1878
01:28:02,440 --> 01:28:06,820
outline the proposals and get any

1879
01:28:04,450 --> 01:28:09,099
feedback on solutions here so first

1880
01:28:06,820 --> 01:28:10,389
thing is this MLS exporter thing those

1881
01:28:09,100 --> 01:28:12,310
of you who have worked with TLS in the

1882
01:28:10,390 --> 01:28:13,930
past know that it has an exporter

1883
01:28:12,310 --> 01:28:18,460
function so you can export keys out of

1884
01:28:13,930 --> 01:28:20,290
it and layer things on top I think you

1885
01:28:18,460 --> 01:28:22,630
know the core of MLS is really the key

1886
01:28:20,290 --> 01:28:24,460
exchange we have a way of framing and

1887
01:28:22,630 --> 01:28:25,990
sending application data messages but I

1888
01:28:24,460 --> 01:28:27,790
think it was always been pretty well

1889
01:28:25,990 --> 01:28:29,320
understood that in a lot of cases you're

1890
01:28:27,790 --> 01:28:33,060
going to want to export keys and use

1891
01:28:29,320 --> 01:28:37,480
them for some non MLS applications so

1892
01:28:33,060 --> 01:28:39,220
all this says is much like in TLS you

1893
01:28:37,480 --> 01:28:40,690
take your epic secret there's an

1894
01:28:39,220 --> 01:28:42,430
epilogue secret at the top of this chain

1895
01:28:40,690 --> 01:28:43,870
here and in addition to directing your

1896
01:28:42,430 --> 01:28:46,390
application secrets your confirmation

1897
01:28:43,870 --> 01:28:49,769
mat key you derive an exporter secret

1898
01:28:46,390 --> 01:28:51,070
that you're going to use for exporting

1899
01:28:49,770 --> 01:28:53,710
yeah

1900
01:28:51,070 --> 01:28:55,540
similar can this this PR is basically

1901
01:28:53,710 --> 01:28:58,090
just a copy and paste from TLS so it's

1902
01:28:55,540 --> 01:28:59,380
same you export your root exporter

1903
01:28:58,090 --> 01:29:00,580
secret and then you explore specific

1904
01:28:59,380 --> 01:29:02,440
secrets off of it

1905
01:29:00,580 --> 01:29:08,559
Thank You Jonathan I was waiting for you

1906
01:29:02,440 --> 01:29:12,820
to get up Jonathan Norland CloudFlare so

1907
01:29:08,560 --> 01:29:16,330
if you want to have exporter secrets and

1908
01:29:12,820 --> 01:29:19,450
also to be in line with RFC 50:56

1909
01:29:16,330 --> 01:29:22,750
which says if you have exported secrets

1910
01:29:19,450 --> 01:29:24,610
you must have imports secrets then you

1911
01:29:22,750 --> 01:29:27,610
should also have imports secrets I have

1912
01:29:24,610 --> 01:29:31,570
that in a couple slides so stay close to

1913
01:29:27,610 --> 01:29:32,650
the mic so that's the exporter stuff

1914
01:29:31,570 --> 01:29:34,410
it's probably just gonna be pretty

1915
01:29:32,650 --> 01:29:38,290
straightforward copy-paste from TLS

1916
01:29:34,410 --> 01:29:41,230
that'll probably Lane pretty soon any

1917
01:29:38,290 --> 01:29:42,340
other comments on exporters anyone who

1918
01:29:41,230 --> 01:29:44,469
loves exporters

1919
01:29:42,340 --> 01:29:45,550
I think this is critical yeah that's

1920
01:29:44,470 --> 01:29:49,480
that's more like it

1921
01:29:45,550 --> 01:29:51,130
okay good so we're gonna do this so this

1922
01:29:49,480 --> 01:29:53,200
is a little bit more complicated um

1923
01:29:51,130 --> 01:29:54,880
this and this kind of gets the security

1924
01:29:53,200 --> 01:29:58,240
properties we get out of the protocol so

1925
01:29:54,880 --> 01:30:00,550
um Karthik bhargavan and and Benjamin

1926
01:29:58,240 --> 01:30:01,809
produce have been looking at you know

1927
01:30:00,550 --> 01:30:03,660
developing proofs of the security

1928
01:30:01,810 --> 01:30:08,860
properties of this overall protocol and

1929
01:30:03,660 --> 01:30:11,290
one of the questions is what assurances

1930
01:30:08,860 --> 01:30:16,030
does a new member of the group get when

1931
01:30:11,290 --> 01:30:18,160
he joins right now the new member all

1932
01:30:16,030 --> 01:30:21,190
the new member gets when he joins is a

1933
01:30:18,160 --> 01:30:23,730
welcome message signed by the person who

1934
01:30:21,190 --> 01:30:26,049
is adding him to the group that says

1935
01:30:23,730 --> 01:30:29,200
behold here is the state of the group

1936
01:30:26,050 --> 01:30:32,020
and there's credentials in the leaves of

1937
01:30:29,200 --> 01:30:34,630
the tree that that adder provides that

1938
01:30:32,020 --> 01:30:37,540
say who occupies each of those leaves in

1939
01:30:34,630 --> 01:30:40,300
the tree but there's no signatures to

1940
01:30:37,540 --> 01:30:43,660
say that the corresponding hbk he public

1941
01:30:40,300 --> 01:30:46,090
keys actually belong to those users or

1942
01:30:43,660 --> 01:30:48,519
that any of the intermediate keys in the

1943
01:30:46,090 --> 01:30:49,030
tree belong to the users below them in

1944
01:30:48,520 --> 01:30:52,960
the tree

1945
01:30:49,030 --> 01:30:54,759
so whoever adds you to a group can

1946
01:30:52,960 --> 01:30:56,740
completely lie to you about who is in

1947
01:30:54,760 --> 01:31:02,560
the group and you have no way to check

1948
01:30:56,740 --> 01:31:05,740
that that you've been lied to so the in

1949
01:31:02,560 --> 01:31:09,520
order to counter this you need to have

1950
01:31:05,740 --> 01:31:11,110
some assurance that the keys and the

1951
01:31:09,520 --> 01:31:12,850
tree actually follow this tree

1952
01:31:11,110 --> 01:31:15,490
invariants that we've been talking about

1953
01:31:12,850 --> 01:31:17,860
that the private key for a node in the

1954
01:31:15,490 --> 01:31:21,040
tree is known only to the nodes below it

1955
01:31:17,860 --> 01:31:22,780
and the approach that the Benjamin and

1956
01:31:21,040 --> 01:31:25,150
Karthik have come up with is to have add

1957
01:31:22,780 --> 01:31:28,480
some signatures to the tree so the idea

1958
01:31:25,150 --> 01:31:31,089
is that whenever you do an update let's

1959
01:31:28,480 --> 01:31:34,450
say I've got some figures here whenever

1960
01:31:31,090 --> 01:31:35,950
you do an update you sign the nodes that

1961
01:31:34,450 --> 01:31:38,349
you're updating in the tree so when

1962
01:31:35,950 --> 01:31:40,599
you're updating you always provide new

1963
01:31:38,350 --> 01:31:43,420
values for the nodes above you in the

1964
01:31:40,600 --> 01:31:46,270
tree so the proposal here is basically

1965
01:31:43,420 --> 01:31:49,720
to augment that update and the resulting

1966
01:31:46,270 --> 01:31:51,310
tree data structures to have those

1967
01:31:49,720 --> 01:31:54,070
signatures over the nodes you are

1968
01:31:51,310 --> 01:31:55,270
updating um so there's a couple ways you

1969
01:31:54,070 --> 01:31:55,780
can imagine going about doing this this

1970
01:31:55,270 --> 01:31:58,780
is a

1971
01:31:55,780 --> 01:32:01,599
you know this presentation the heist I

1972
01:31:58,780 --> 01:32:04,330
presume a tree so here we are presenting

1973
01:32:01,600 --> 01:32:06,250
a six member group where the members are

1974
01:32:04,330 --> 01:32:08,860
in the leaves and everyone has updated

1975
01:32:06,250 --> 01:32:11,500
in left-to-right order so you can see a

1976
01:32:08,860 --> 01:32:13,509
updated and reset all those things on

1977
01:32:11,500 --> 01:32:15,580
its direct path and be updated and over

1978
01:32:13,510 --> 01:32:17,860
wrote that parent node etc all the way

1979
01:32:15,580 --> 01:32:20,470
to the right so this is how it works now

1980
01:32:17,860 --> 01:32:22,780
we we don't have any any signatures here

1981
01:32:20,470 --> 01:32:25,000
these are just public keys in these

1982
01:32:22,780 --> 01:32:27,400
nodes so one way you could go about

1983
01:32:25,000 --> 01:32:29,290
implementing this is I should have used

1984
01:32:27,400 --> 01:32:31,120
colors or letters or something on these

1985
01:32:29,290 --> 01:32:38,860
but one way you could implement this is

1986
01:32:31,120 --> 01:32:41,170
to attach signatures to each node so I

1987
01:32:38,860 --> 01:32:43,210
guess the way to interpret this is that

1988
01:32:41,170 --> 01:32:45,700
the the gold circle on each of these

1989
01:32:43,210 --> 01:32:47,830
means that the there's a signature there

1990
01:32:45,700 --> 01:32:51,519
over the public key in the node by the

1991
01:32:47,830 --> 01:32:55,720
letter holder so D double prime there is

1992
01:32:51,520 --> 01:32:58,830
signed by D so everything was signed by

1993
01:32:55,720 --> 01:33:03,970
the last member that changed that node

1994
01:32:58,830 --> 01:33:07,150
so option number one carry the reassign

1995
01:33:03,970 --> 01:33:09,790
the node every time you change it option

1996
01:33:07,150 --> 01:33:12,040
number two is kind of syntactically

1997
01:33:09,790 --> 01:33:13,720
different the idea here is when you

1998
01:33:12,040 --> 01:33:17,950
issue an update you update your leaf

1999
01:33:13,720 --> 01:33:22,150
with a list of the nodes you changed and

2000
01:33:17,950 --> 01:33:25,540
you sign that leaf so your you know D

2001
01:33:22,150 --> 01:33:27,309
when they updated they updated nodes D D

2002
01:33:25,540 --> 01:33:28,960
prime D double Prime and D triple prime

2003
01:33:27,310 --> 01:33:31,300
now you notice that the triple prime

2004
01:33:28,960 --> 01:33:33,100
which was at the root got overwritten so

2005
01:33:31,300 --> 01:33:35,410
that's kind of a useless hash on that

2006
01:33:33,100 --> 01:33:37,060
will never get used to verify but you in

2007
01:33:35,410 --> 01:33:40,840
case your algorithm here is when you're

2008
01:33:37,060 --> 01:33:43,000
checking whether a given node is valid

2009
01:33:40,840 --> 01:33:45,220
instead of Tec verifying a signature on

2010
01:33:43,000 --> 01:33:47,560
that node by one of its children you

2011
01:33:45,220 --> 01:33:50,350
check that it is in the signed lists of

2012
01:33:47,560 --> 01:33:51,940
one of its children it's the same

2013
01:33:50,350 --> 01:33:53,710
cryptographic assurances out of this

2014
01:33:51,940 --> 01:33:55,990
it's just a direct signature on the node

2015
01:33:53,710 --> 01:33:57,250
versus a signature over a list including

2016
01:33:55,990 --> 01:34:01,570
the node it's kind of a manifest

2017
01:33:57,250 --> 01:34:05,410
approach the idea of doing that is that

2018
01:34:01,570 --> 01:34:07,150
you trade off message size for signing

2019
01:34:05,410 --> 01:34:08,719
operations so if you're going to sign

2020
01:34:07,150 --> 01:34:10,219
all the nodes

2021
01:34:08,719 --> 01:34:14,119
means whenever you do an update in

2022
01:34:10,219 --> 01:34:15,979
addition to doing log tree operation d-h

2023
01:34:14,119 --> 01:34:18,380
operations yes if you log signatures as

2024
01:34:15,979 --> 01:34:20,510
well but you know the benefit is that

2025
01:34:18,380 --> 01:34:23,869
you only have a signature per node in

2026
01:34:20,510 --> 01:34:25,849
the tree lot to keep track of if you do

2027
01:34:23,869 --> 01:34:27,589
the signature on leaves thing you only

2028
01:34:25,849 --> 01:34:29,929
have one signature you just sign the

2029
01:34:27,590 --> 01:34:32,269
leaf but then you have to carry around

2030
01:34:29,929 --> 01:34:34,489
in log in hash values yeah Jonathan

2031
01:34:32,269 --> 01:34:36,409
likes yeah I think I don't understand

2032
01:34:34,489 --> 01:34:37,789
the threat model because it seems like

2033
01:34:36,409 --> 01:34:40,070
if the person adding you to the group is

2034
01:34:37,789 --> 01:34:42,380
malicious what stops them from basically

2035
01:34:40,070 --> 01:34:43,940
impersonating the entire group you know

2036
01:34:42,380 --> 01:34:45,530
its Annabelle M for murder attack

2037
01:34:43,940 --> 01:34:48,228
everybody you're talking to is actually

2038
01:34:45,530 --> 01:34:49,639
the attacker so we have some protection

2039
01:34:48,229 --> 01:34:51,349
against that in that we have and I'll

2040
01:34:49,639 --> 01:34:53,840
presume an authentication service that

2041
01:34:51,349 --> 01:34:56,239
provides credentials so there there is

2042
01:34:53,840 --> 01:34:59,780
at base some presumption that you know I

2043
01:34:56,239 --> 01:35:02,150
can't omit I can't imitate Jonathan at

2044
01:34:59,780 --> 01:35:03,349
gmail.com because there's an

2045
01:35:02,150 --> 01:35:09,530
authentication service the blocks emerge

2046
01:35:03,349 --> 01:35:12,739
from doing that Jonathan modie and cloud

2047
01:35:09,530 --> 01:35:15,139
play could you do something fancy with

2048
01:35:12,739 --> 01:35:18,018
batch signatures such that you only have

2049
01:35:15,139 --> 01:35:27,289
to do one signature to cover all of the

2050
01:35:18,019 --> 01:35:29,539
notes in your path yes you may be able

2051
01:35:27,289 --> 01:35:33,829
to do something like even simpler and

2052
01:35:29,539 --> 01:35:37,400
more murkily not Merkle more bloom

2053
01:35:33,829 --> 01:35:39,978
filter e so then instead of having log n

2054
01:35:37,400 --> 01:35:42,499
log n individual hash values you could

2055
01:35:39,979 --> 01:35:44,090
have a smaller bloom filter and check

2056
01:35:42,499 --> 01:35:46,369
inclusion in that bloom filter for the

2057
01:35:44,090 --> 01:35:51,079
the nodes above it so yeah you could

2058
01:35:46,369 --> 01:35:53,659
potentially optimize downsize I was

2059
01:35:51,079 --> 01:35:55,549
trying to optimize for number of signals

2060
01:35:53,659 --> 01:35:57,888
because if you could get yourself down

2061
01:35:55,550 --> 01:36:00,619
to one signing option rocks from one

2062
01:35:57,889 --> 01:36:03,889
then obviously that would be the

2063
01:36:00,619 --> 01:36:06,978
benefits option two and option one yeah

2064
01:36:03,889 --> 01:36:08,690
so if you've got suggestions for

2065
01:36:06,979 --> 01:36:10,789
algorithms to do that's a that could be

2066
01:36:08,690 --> 01:36:13,940
employed there I think kind of going

2067
01:36:10,789 --> 01:36:17,119
back to Rafael's presentation we're keen

2068
01:36:13,940 --> 01:36:18,619
to avoid exotic crypto here but if

2069
01:36:17,119 --> 01:36:19,460
there's some stuff that works more or

2070
01:36:18,619 --> 01:36:22,130
less off-the-shelf

2071
01:36:19,460 --> 01:36:22,369
I agree that seems like it could you

2072
01:36:22,130 --> 01:36:28,639
know

2073
01:36:22,369 --> 01:36:29,809
cut through the trade-offs here so I

2074
01:36:28,639 --> 01:36:32,330
mean again this is one of these cases

2075
01:36:29,810 --> 01:36:35,000
where we've got a computation message

2076
01:36:32,330 --> 01:36:39,349
size trade-off I think my bias here is

2077
01:36:35,000 --> 01:36:41,449
probably two by two to do the one

2078
01:36:39,349 --> 01:36:43,340
signature option and just carry the

2079
01:36:41,449 --> 01:36:46,699
hashes around because it seems slightly

2080
01:36:43,340 --> 01:36:48,050
simpler but looking at other

2081
01:36:46,699 --> 01:36:55,219
implementers here to see if what they

2082
01:36:48,050 --> 01:36:58,099
think would be easier to do yeah just

2083
01:36:55,219 --> 01:37:00,760
add my two cents to that I think what's

2084
01:36:58,099 --> 01:37:03,860
important here is that conceptually this

2085
01:37:00,760 --> 01:37:06,739
is a very important addition to the

2086
01:37:03,860 --> 01:37:09,259
whole thing because MLS is one of the

2087
01:37:06,739 --> 01:37:12,799
few protocols I may be the only one that

2088
01:37:09,260 --> 01:37:13,420
caters about groups this makes a lot of

2089
01:37:12,800 --> 01:37:16,040
sense

2090
01:37:13,420 --> 01:37:17,960
because with one-to-one protocols you

2091
01:37:16,040 --> 01:37:19,820
don't have a concept of a group you

2092
01:37:17,960 --> 01:37:21,469
don't really know who is in the group

2093
01:37:19,820 --> 01:37:23,630
you only know it when you individually

2094
01:37:21,469 --> 01:37:24,949
encrypt it to what you think are the

2095
01:37:23,630 --> 01:37:26,300
recipients but you never have any

2096
01:37:24,949 --> 01:37:29,299
guarantee that when you receive a

2097
01:37:26,300 --> 01:37:32,480
message who the sender of that message

2098
01:37:29,300 --> 01:37:34,699
you know as thinking is in the group so

2099
01:37:32,480 --> 01:37:38,900
this conceptually makes a lot of sense

2100
01:37:34,699 --> 01:37:41,059
to do that addition for MLS I'm but I'm

2101
01:37:38,900 --> 01:37:43,969
equally worried about the the overhead

2102
01:37:41,060 --> 01:37:46,909
here so it would be interesting if we

2103
01:37:43,969 --> 01:37:48,889
can make it even smaller but if anything

2104
01:37:46,909 --> 01:37:52,098
I tend to agree with you that we should

2105
01:37:48,889 --> 01:37:56,050
go with one signature and more hashes

2106
01:37:52,099 --> 01:38:00,920
because I think signatures are not

2107
01:37:56,050 --> 01:38:02,239
pretty if you have a lot of them covered

2108
01:38:00,920 --> 01:38:06,320
any thoughts here this is another

2109
01:38:02,239 --> 01:38:07,610
implementer whatever but I think Rafael

2110
01:38:06,320 --> 01:38:09,590
to take your I think your key point here

2111
01:38:07,610 --> 01:38:11,449
is that option three is not the way to

2112
01:38:09,590 --> 01:38:14,480
go we should we should in fact address

2113
01:38:11,449 --> 01:38:20,210
this risk in the most efficient way we

2114
01:38:14,480 --> 01:38:22,309
can okay alright so I think the author's

2115
01:38:20,210 --> 01:38:24,679
can plan on doing I think number two

2116
01:38:22,310 --> 01:38:28,639
here I'm you sign the leaf and you just

2117
01:38:24,679 --> 01:38:31,219
hash hash the the nodes above and due to

2118
01:38:28,639 --> 01:38:33,050
inclusion checks Jonathan it be blood

2119
01:38:31,219 --> 01:38:36,269
here if you got some some idea strategy

2120
01:38:33,050 --> 01:38:39,449
to better okay

2121
01:38:36,269 --> 01:38:41,969
that issue this Benjamin added to the

2122
01:38:39,449 --> 01:38:44,669
deck and it was totally new to me so I'm

2123
01:38:41,969 --> 01:38:49,860
gonna like kind of wing this so right

2124
01:38:44,670 --> 01:38:52,730
now all of our all of our injection of

2125
01:38:49,860 --> 01:38:55,199
fresh entropy is via these HP ke things

2126
01:38:52,730 --> 01:38:57,659
one could imagine at post quantum world

2127
01:38:55,199 --> 01:39:00,268
where you want to inject some external

2128
01:38:57,659 --> 01:39:01,860
entropy into the key schedule so here's

2129
01:39:00,269 --> 01:39:07,679
where we're getting to your importer

2130
01:39:01,860 --> 01:39:10,440
stuff Jonathan um so it appears this is

2131
01:39:07,679 --> 01:39:11,670
a I haven't even went to the floor

2132
01:39:10,440 --> 01:39:12,960
request for this so if here's the

2133
01:39:11,670 --> 01:39:16,050
proposal here is to be able to add some

2134
01:39:12,960 --> 01:39:18,300
additional entropy some pre shared key

2135
01:39:16,050 --> 01:39:21,119
that is that the group is established

2136
01:39:18,300 --> 01:39:25,380
using some out of van protocol to

2137
01:39:21,119 --> 01:39:28,739
enhance the secrecy of the handshake if

2138
01:39:25,380 --> 01:39:31,289
if we have less confidence in the the D

2139
01:39:28,739 --> 01:39:36,030
H or kemper motives that are being used

2140
01:39:31,289 --> 01:39:38,219
for the HP ke distribution so yeah it

2141
01:39:36,030 --> 01:39:40,530
sounds like yeah so he's all about

2142
01:39:38,219 --> 01:39:43,860
defining a new group operation that

2143
01:39:40,530 --> 01:39:45,929
would in is that says take this PSK that

2144
01:39:43,860 --> 01:39:49,380
I've identified and injected into the

2145
01:39:45,929 --> 01:39:51,239
key schedule so I probably would be

2146
01:39:49,380 --> 01:39:52,590
analogous to a commit message and that

2147
01:39:51,239 --> 01:39:55,909
it would advance the Epoque because

2148
01:39:52,590 --> 01:39:59,159
you'd be advanced in the key schedule

2149
01:39:55,909 --> 01:40:02,400
but instead of sending new entropy to

2150
01:39:59,159 --> 01:40:04,499
the group in the form of you know a

2151
01:40:02,400 --> 01:40:07,949
bunch of HP ke stuff that updates the

2152
01:40:04,499 --> 01:40:11,130
tree you would just send things by this

2153
01:40:07,949 --> 01:40:15,150
PSK in input that is externally

2154
01:40:11,130 --> 01:40:17,010
negotiated somehow and yeah I cited

2155
01:40:15,150 --> 01:40:19,039
Jonathan's draft here Jonathan you have

2156
01:40:17,010 --> 01:40:21,929
any thoughts on this general approach

2157
01:40:19,039 --> 01:40:23,550
whether this whether there's things we

2158
01:40:21,929 --> 01:40:25,079
could copy and paste from CLS which is

2159
01:40:23,550 --> 01:40:31,019
my favorite way of doing protocol

2160
01:40:25,079 --> 01:40:33,289
engineering um no I obviously I think

2161
01:40:31,019 --> 01:40:36,869
this looks good

2162
01:40:33,289 --> 01:40:45,018
some some thought needs to be given to

2163
01:40:36,869 --> 01:40:47,460
checking whether you actually say in the

2164
01:40:45,019 --> 01:40:49,139
extend key schedule draft there's two

2165
01:40:47,460 --> 01:40:49,650
different ways of injecting secrets and

2166
01:40:49,139 --> 01:40:52,080
then

2167
01:40:49,650 --> 01:40:54,629
not the same so I'd need to spend some

2168
01:40:52,080 --> 01:40:57,900
time thinking about which one you want

2169
01:40:54,630 --> 01:40:59,160
here and which one you have here yeah do

2170
01:40:57,900 --> 01:41:02,129
you think it might be better to think of

2171
01:40:59,160 --> 01:41:03,599
this as like a generic entropy importer

2172
01:41:02,130 --> 01:41:07,200
kind of in the cells that he proposed

2173
01:41:03,600 --> 01:41:11,090
for TLS as opposed to specifically a PSK

2174
01:41:07,200 --> 01:41:15,450
authentication sort of thing yeah so

2175
01:41:11,090 --> 01:41:16,680
because what you're in the tier last

2176
01:41:15,450 --> 01:41:21,599
thing at least you're not actually

2177
01:41:16,680 --> 01:41:24,360
trying to get PSK necessarily or you

2178
01:41:21,600 --> 01:41:27,060
might be trying to layer MLS on top of

2179
01:41:24,360 --> 01:41:29,630
some other pro Scot so like if I was

2180
01:41:27,060 --> 01:41:35,220
running MLS over the top of

2181
01:41:29,630 --> 01:41:37,590
point-to-point TLS for some reason I I

2182
01:41:35,220 --> 01:41:42,660
you know trying to come up standing on

2183
01:41:37,590 --> 01:41:46,560
one foot I I think you all you need some

2184
01:41:42,660 --> 01:41:50,430
way of injecting pre shared key but also

2185
01:41:46,560 --> 01:41:53,220
some like agreed-upon context and that

2186
01:41:50,430 --> 01:41:55,620
would be a channel binding and yeah I'd

2187
01:41:53,220 --> 01:41:57,240
have to think about it oh so you're

2188
01:41:55,620 --> 01:41:58,860
thinking that if we had a generic

2189
01:41:57,240 --> 01:42:01,710
importer mechanism that could be used

2190
01:41:58,860 --> 01:42:05,130
for injecting PSK like stuff as well as

2191
01:42:01,710 --> 01:42:08,070
injecting binding information yeah so

2192
01:42:05,130 --> 01:42:09,780
you need some web you need a way of

2193
01:42:08,070 --> 01:42:12,179
adding public information that you're

2194
01:42:09,780 --> 01:42:16,200
committing to and secret information

2195
01:42:12,180 --> 01:42:17,670
that you're agreeing upon okay oh yeah

2196
01:42:16,200 --> 01:42:20,300
okay so it sounds like a little bit more

2197
01:42:17,670 --> 01:42:22,560
discussion of motivations is in order so

2198
01:42:20,300 --> 01:42:23,640
I'll get Benjamin to send some emails of

2199
01:42:22,560 --> 01:42:26,970
the lists and get some discussion

2200
01:42:23,640 --> 01:42:28,320
started I don't really interesting but

2201
01:42:26,970 --> 01:42:30,300
this is trying to get to in sounds like

2202
01:42:28,320 --> 01:42:31,740
but I think this importer approach is

2203
01:42:30,300 --> 01:42:37,110
probably the way to go

2204
01:42:31,740 --> 01:42:42,300
learning from the TLS experience let's

2205
01:42:37,110 --> 01:42:43,710
see is this yeah so one of the things

2206
01:42:42,300 --> 01:42:47,700
we've been discussing for a little while

2207
01:42:43,710 --> 01:42:50,430
is how to deal with that are there's

2208
01:42:47,700 --> 01:42:52,019
been a bit of a gap in our forward

2209
01:42:50,430 --> 01:42:54,270
secrecy story in our post compromised

2210
01:42:52,020 --> 01:42:55,980
security story and that we assume we

2211
01:42:54,270 --> 01:42:58,470
there's no mechanism right now for doing

2212
01:42:55,980 --> 01:43:00,599
any rotation of the signing keys that

2213
01:42:58,470 --> 01:43:02,970
are used to identify participants

2214
01:43:00,600 --> 01:43:05,100
so if a notice if a client is

2215
01:43:02,970 --> 01:43:06,300
compromised and they get really all of

2216
01:43:05,100 --> 01:43:09,450
the secrets that are in there including

2217
01:43:06,300 --> 01:43:11,700
all of the D H keys and all the signing

2218
01:43:09,450 --> 01:43:13,980
keys we have no way to recover from that

2219
01:43:11,700 --> 01:43:18,210
because there's no way to rotate signing

2220
01:43:13,980 --> 01:43:20,040
keys right now so there's an e going to

2221
01:43:18,210 --> 01:43:21,690
be a need for a signature key rotation I

2222
01:43:20,040 --> 01:43:23,220
think Owen sent something else of the

2223
01:43:21,690 --> 01:43:25,259
list on this starting of that

2224
01:43:23,220 --> 01:43:28,110
conversation I think it's a first step

2225
01:43:25,260 --> 01:43:30,510
toward that is replacing the current

2226
01:43:28,110 --> 01:43:34,429
unsigned data in the leaves of the tree

2227
01:43:30,510 --> 01:43:36,480
with client in it keys that's nice for

2228
01:43:34,430 --> 01:43:37,500
from one perspective because it kind of

2229
01:43:36,480 --> 01:43:38,669
solves the problem we were just

2230
01:43:37,500 --> 01:43:41,580
discussing about where to put the

2231
01:43:38,670 --> 01:43:43,890
signatures on over the parent nodes in

2232
01:43:41,580 --> 01:43:45,930
the tree so client and accuser signs so

2233
01:43:43,890 --> 01:43:47,340
and kleinen turkeys have extensions now

2234
01:43:45,930 --> 01:43:49,290
so you can just make an extension that

2235
01:43:47,340 --> 01:43:53,970
says you're my parent nodes and now you

2236
01:43:49,290 --> 01:43:55,620
have the tree signing done it this also

2237
01:43:53,970 --> 01:43:57,780
kind of opens the door to doing

2238
01:43:55,620 --> 01:44:00,320
signature key rotation because now when

2239
01:43:57,780 --> 01:44:03,870
you do an update instead of just saying

2240
01:44:00,320 --> 01:44:06,780
here's a fresh D H public key you would

2241
01:44:03,870 --> 01:44:08,220
probably we're probably the implication

2242
01:44:06,780 --> 01:44:13,110
is probably that you provide a fresh

2243
01:44:08,220 --> 01:44:15,900
client init key that it has a new D H

2244
01:44:13,110 --> 01:44:19,410
key potentially a new signing key and

2245
01:44:15,900 --> 01:44:20,790
other information yeah yeah yeah that's

2246
01:44:19,410 --> 01:44:22,349
an interesting idea I just wonder how

2247
01:44:20,790 --> 01:44:24,570
that's going to work with what we

2248
01:44:22,350 --> 01:44:26,280
discussed 10 minutes ago with signing

2249
01:44:24,570 --> 01:44:28,410
the intermediate leaves if you rotate

2250
01:44:26,280 --> 01:44:29,639
the signature keys because the signature

2251
01:44:28,410 --> 01:44:33,030
of the intermediate Lea is there going

2252
01:44:29,640 --> 01:44:36,000
to be potentially old so it's it's not

2253
01:44:33,030 --> 01:44:37,620
clear how you keep those keys around -

2254
01:44:36,000 --> 01:44:39,390
in order to verify the signatures there

2255
01:44:37,620 --> 01:44:42,030
yeah I think there's some booking giving

2256
01:44:39,390 --> 01:44:44,910
I'm not tremendously worried about old

2257
01:44:42,030 --> 01:44:47,070
stuff and so old stuff hanging around is

2258
01:44:44,910 --> 01:44:50,160
inherent in the the single signature

2259
01:44:47,070 --> 01:44:52,019
variant here right so so B double Prime

2260
01:44:50,160 --> 01:44:53,250
and B triple prime no longer appear in

2261
01:44:52,020 --> 01:44:55,320
the tree they're stale

2262
01:44:53,250 --> 01:44:56,940
they've been overwritten so this

2263
01:44:55,320 --> 01:45:00,840
approach inherently keeps some old stuff

2264
01:44:56,940 --> 01:45:03,750
around it's kind of the cost but I don't

2265
01:45:00,840 --> 01:45:07,470
think that undermines the the security

2266
01:45:03,750 --> 01:45:08,640
the protocol well I mean at the end of

2267
01:45:07,470 --> 01:45:11,010
the day you need to be able to verify

2268
01:45:08,640 --> 01:45:12,990
signature so if you have rotating

2269
01:45:11,010 --> 01:45:14,239
signature keys you also need to keep

2270
01:45:12,990 --> 01:45:18,519
around the Ottawa

2271
01:45:14,239 --> 01:45:18,519
in order to verify old signatures

2272
01:45:20,710 --> 01:45:24,530
possibly I think we need to whiteboard a

2273
01:45:23,150 --> 01:45:27,860
little bit to understand precisely we're

2274
01:45:24,530 --> 01:45:32,780
talking about me yeah so this this is

2275
01:45:27,860 --> 01:45:35,929
more of a announcement of intent I think

2276
01:45:32,780 --> 01:45:37,639
the tree signing stuff indicates there's

2277
01:45:35,930 --> 01:45:40,219
a need for sign stuff in the leaves of

2278
01:45:37,640 --> 01:45:42,410
the tree client any keys are signed and

2279
01:45:40,219 --> 01:45:45,110
they give us an opening to rotating

2280
01:45:42,410 --> 01:45:47,180
signing keys in the future because you

2281
01:45:45,110 --> 01:45:48,980
know you could envision having an update

2282
01:45:47,180 --> 01:45:51,110
where you replace not only the D H key

2283
01:45:48,980 --> 01:45:52,400
but also the signing key and as long as

2284
01:45:51,110 --> 01:45:54,530
that's been recertified by the

2285
01:45:52,400 --> 01:45:56,299
authentication service you're okay

2286
01:45:54,530 --> 01:45:58,190
you're the saint you can verify it's the

2287
01:45:56,300 --> 01:46:02,270
same user so this is very preliminary

2288
01:45:58,190 --> 01:46:05,599
stuff keep an eye out in the future this

2289
01:46:02,270 --> 01:46:07,940
is more of a highlight so looking at

2290
01:46:05,600 --> 01:46:09,230
implementers in the room this is

2291
01:46:07,940 --> 01:46:10,699
something we discussed the interim it

2292
01:46:09,230 --> 01:46:13,309
would be good to get a little bit more

2293
01:46:10,699 --> 01:46:15,469
motion on this so I put on the lists I

2294
01:46:13,310 --> 01:46:18,469
was able to extract some some data from

2295
01:46:15,469 --> 01:46:19,820
WebEx teams about how groups are

2296
01:46:18,469 --> 01:46:21,380
actually used and one of the questions

2297
01:46:19,820 --> 01:46:23,480
we've had about this protocol is like

2298
01:46:21,380 --> 01:46:25,130
how does it what is the overhead look

2299
01:46:23,480 --> 01:46:27,620
like once the costs look like in the

2300
01:46:25,130 --> 01:46:28,910
context of actual groups you know like

2301
01:46:27,620 --> 01:46:30,980
what is the distribution of sizes of

2302
01:46:28,910 --> 01:46:33,920
groups how often do people join them

2303
01:46:30,980 --> 01:46:34,968
leave so what I've done in the WebEx

2304
01:46:33,920 --> 01:46:37,280
teams context because that's what I

2305
01:46:34,969 --> 01:46:39,860
happen to have access to is I've gotten

2306
01:46:37,280 --> 01:46:41,480
some ways to generate I've called it an

2307
01:46:39,860 --> 01:46:43,370
ik data here because it's only what I as

2308
01:46:41,480 --> 01:46:45,440
a user of the system can see so it's a

2309
01:46:43,370 --> 01:46:48,260
little bit special it's not global

2310
01:46:45,440 --> 01:46:50,480
across the system but I've gotten a way

2311
01:46:48,260 --> 01:46:52,370
to extract these kind of this is what

2312
01:46:50,480 --> 01:46:55,360
I'm called a transcript of the group's

2313
01:46:52,370 --> 01:46:57,739
lifetime so it's a bunch of events add

2314
01:46:55,360 --> 01:46:59,690
remove message events with an indication

2315
01:46:57,739 --> 01:47:03,589
of who in the group did it you know by

2316
01:46:59,690 --> 01:47:05,299
index no no identifying information but

2317
01:47:03,590 --> 01:47:07,280
who in the group did it and kind of how

2318
01:47:05,300 --> 01:47:09,680
often that occurred and that seems like

2319
01:47:07,280 --> 01:47:11,840
it's a useful input to running basically

2320
01:47:09,680 --> 01:47:14,449
a simulator of Emma what MLS would have

2321
01:47:11,840 --> 01:47:16,010
to do here and so you can simulate all

2322
01:47:14,449 --> 01:47:19,000
the crypto operations that the various

2323
01:47:16,010 --> 01:47:21,290
participants in the group we need to do

2324
01:47:19,000 --> 01:47:22,850
so they good there's a question here I

2325
01:47:21,290 --> 01:47:24,440
think it would be useful to get some of

2326
01:47:22,850 --> 01:47:26,150
this to build confidence in the protocol

2327
01:47:24,440 --> 01:47:27,559
to do some of the simulation and answer

2328
01:47:26,150 --> 01:47:29,089
questions like

2329
01:47:27,560 --> 01:47:30,920
what is the impact of different doing

2330
01:47:29,090 --> 01:47:34,010
commits at different times I'm a few

2331
01:47:30,920 --> 01:47:35,780
like for example always update on when

2332
01:47:34,010 --> 01:47:40,400
when you're first added how full does

2333
01:47:35,780 --> 01:47:42,550
that keep the tree sparsity look like so

2334
01:47:40,400 --> 01:47:45,200
this is kind of an invitation to

2335
01:47:42,550 --> 01:47:47,270
researchers and other operators of

2336
01:47:45,200 --> 01:47:49,220
messaging services to say you know can

2337
01:47:47,270 --> 01:47:51,170
we get some more data here and would

2338
01:47:49,220 --> 01:47:53,210
anyone like to volunteer it's like run

2339
01:47:51,170 --> 01:47:54,830
some simulations and and do some data

2340
01:47:53,210 --> 01:47:57,470
analysis because I think that would be

2341
01:47:54,830 --> 01:48:00,320
useful in terms of building confidence

2342
01:47:57,470 --> 01:48:02,300
in this protocol so like I don't know if

2343
01:48:00,320 --> 01:48:04,250
the Google folks or or wire folks have

2344
01:48:02,300 --> 01:48:05,960
any ability to get this data or share

2345
01:48:04,250 --> 01:48:09,260
this data but this is kind of the it

2346
01:48:05,960 --> 01:48:11,270
seems like a very highly abstracted form

2347
01:48:09,260 --> 01:48:14,030
which maybe extractable but is also

2348
01:48:11,270 --> 01:48:17,570
useful for evaluating the protocol so

2349
01:48:14,030 --> 01:48:21,469
call them Google um could try get it no

2350
01:48:17,570 --> 01:48:24,620
guarantees depends on the privacy and

2351
01:48:21,470 --> 01:48:26,180
how we can apps I think you know ad said

2352
01:48:24,620 --> 01:48:27,530
last time you try to get some data but

2353
01:48:26,180 --> 01:48:31,540
it hasn't come to do with it so have to

2354
01:48:27,530 --> 01:48:31,540
check with him to see where it's at

2355
01:48:31,640 --> 01:48:39,050
Felix Honda Facebook I used to work on

2356
01:48:36,650 --> 01:48:41,299
messaging if you want to send me an

2357
01:48:39,050 --> 01:48:45,590
email I can definitely forward it to the

2358
01:48:41,300 --> 01:48:48,290
right folks but I it's probably unlikely

2359
01:48:45,590 --> 01:48:52,910
that we'll be able to share this do you

2360
01:48:48,290 --> 01:48:54,650
think is so is there maybe a more

2361
01:48:52,910 --> 01:48:58,430
limited form that would have a more

2362
01:48:54,650 --> 01:48:59,240
likelihood of success that is a good

2363
01:48:58,430 --> 01:49:02,540
question

2364
01:48:59,240 --> 01:49:03,679
I can I can investigate yeah as far as

2365
01:49:02,540 --> 01:49:05,630
you can envision like just getting

2366
01:49:03,680 --> 01:49:08,150
summary statistics like the distribution

2367
01:49:05,630 --> 01:49:11,810
of group sizes or the you know inter

2368
01:49:08,150 --> 01:49:14,290
arrival rate of ads and these yeah yeah

2369
01:49:11,810 --> 01:49:16,580
so I'll send you an email as a follow-up

2370
01:49:14,290 --> 01:49:20,690
all right and I think that's the last

2371
01:49:16,580 --> 01:49:22,340
thing I had yes Lesley all right so the

2372
01:49:20,690 --> 01:49:25,849
other exciting news is we're having yet

2373
01:49:22,340 --> 01:49:29,060
another interim in January we're gonna

2374
01:49:25,850 --> 01:49:33,230
do it on the 11th and 12th in New York

2375
01:49:29,060 --> 01:49:35,630
City I get that right right after we

2376
01:49:33,230 --> 01:49:37,719
lower crypto on so basically we will get

2377
01:49:35,630 --> 01:49:40,100
all the implementers and a lot of the

2378
01:49:37,720 --> 01:49:41,550
academic community in the same place I

2379
01:49:40,100 --> 01:49:46,400
will submit

2380
01:49:41,550 --> 01:49:49,140
the interim request for been shortly

2381
01:49:46,400 --> 01:49:51,799
beyond that be on the lookout for stuff

2382
01:49:49,140 --> 01:49:55,080
on the mailing lists thank you very much

2383
01:49:51,800 --> 01:50:09,060
thanks for getting done ten minutes

2384
01:49:55,080 --> 01:50:11,960
early if somebody has the blue sheets we

2385
01:50:09,060 --> 01:50:11,960
would like to collect them

2386
01:50:55,840 --> 01:51:00,730
another trick

