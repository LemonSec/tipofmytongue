1
00:00:09,080 --> 00:00:12,189
[Music]

2
00:01:18,670 --> 00:01:21,739
[Music]

3
00:02:06,430 --> 00:02:09,499
[Music]

4
00:02:27,989 --> 00:02:38,370
hello everyone so I guess we can get

5
00:02:34,270 --> 00:02:44,680
started this is a interior working group

6
00:02:38,370 --> 00:02:46,810
like if 106 and not well as usual as you

7
00:02:44,680 --> 00:02:49,239
know we have to comply this an official

8
00:02:46,810 --> 00:02:51,190
I Triple E meeting so if you're not

9
00:02:49,239 --> 00:02:53,260
familiar please take a look at it we

10
00:02:51,190 --> 00:02:55,239
have few references there but it's

11
00:02:53,260 --> 00:02:58,120
pretty much about this closing any

12
00:02:55,239 --> 00:03:07,630
knowledge of intellectual property that

13
00:02:58,120 --> 00:03:10,540
you could have about that okay I'm just

14
00:03:07,630 --> 00:03:13,780
going to speak closer to the mic so not

15
00:03:10,540 --> 00:03:16,870
well if you're aware of any patent

16
00:03:13,780 --> 00:03:19,750
related to any of the topics we are

17
00:03:16,870 --> 00:03:22,750
going to discuss here please mention it

18
00:03:19,750 --> 00:03:25,870
and if you have doubts about the node

19
00:03:22,750 --> 00:03:27,970
well you have references here as a

20
00:03:25,870 --> 00:03:30,820
reminder the minutes are taking blue

21
00:03:27,970 --> 00:03:31,510
sheets are going around the meeting is

22
00:03:30,820 --> 00:03:35,590
being recorded

23
00:03:31,510 --> 00:03:37,750
your presence is locked and described

24
00:03:35,590 --> 00:03:38,470
please contribute online minutes to

25
00:03:37,750 --> 00:03:41,590
etherpad

26
00:03:38,470 --> 00:03:44,580
do we have someone that can help us take

27
00:03:41,590 --> 00:03:47,920
the minutes on the etherpad

28
00:03:44,580 --> 00:03:51,989
please it's a very light meeting today

29
00:03:47,920 --> 00:03:57,730
so if anyone can help us with that

30
00:03:51,989 --> 00:04:00,299
it'll be appreciated oh thanks to her so

31
00:03:57,730 --> 00:04:00,298
thank you very much

32
00:04:01,440 --> 00:04:10,180
how about Jabbar can someone take care

33
00:04:04,900 --> 00:04:12,780
of Jabbar relating the questions anyone

34
00:04:10,180 --> 00:04:19,780
thank you very much

35
00:04:12,780 --> 00:04:23,770
perfect so we're good to go so agenda as

36
00:04:19,779 --> 00:04:26,320
I said as a pretty light this time the

37
00:04:23,770 --> 00:04:28,479
usual bashing of the agenda we're going

38
00:04:26,320 --> 00:04:30,099
to have a presentation from Tommy about

39
00:04:28,479 --> 00:04:33,039
this covering provision the main names

40
00:04:30,099 --> 00:04:35,979
they turn and updates on that the SoCs

41
00:04:33,039 --> 00:04:38,849
protocol Vlad will be presenting

42
00:04:35,979 --> 00:04:40,539
remotely problem I

43
00:04:38,849 --> 00:04:42,909
interfaces by vendor specific

44
00:04:40,539 --> 00:04:47,110
identifiers Manoj we are skipping that

45
00:04:42,910 --> 00:04:50,880
one in fact and it's our v6 network

46
00:04:47,110 --> 00:04:53,970
programming Pablo is going to present

47
00:04:50,880 --> 00:04:56,710
does anybody have any questions or

48
00:04:53,970 --> 00:05:00,370
comments on the agenda okay good

49
00:04:56,710 --> 00:05:03,219
so this status update the discovering

50
00:05:00,370 --> 00:05:05,979
provisioning domains names and data it's

51
00:05:03,220 --> 00:05:07,660
in iesg evaluation but in fact we're

52
00:05:05,979 --> 00:05:09,690
going to have a presentation in this

53
00:05:07,660 --> 00:05:13,539
meeting to discuss the topic in detail

54
00:05:09,690 --> 00:05:16,090
so you can ask Tommy directly for in

55
00:05:13,539 --> 00:05:17,710
updates for the IP fragmentation

56
00:05:16,090 --> 00:05:20,950
considered fragile

57
00:05:17,710 --> 00:05:23,409
it's an RFC editor q apparently those

58
00:05:20,950 --> 00:05:25,570
two sir reference you should but that

59
00:05:23,409 --> 00:05:28,860
should be good to go soon and the

60
00:05:25,570 --> 00:05:35,020
generic EVP encapsulation it's in iesg

61
00:05:28,860 --> 00:05:38,099
about evaluation right now okay so if

62
00:05:35,020 --> 00:05:38,099
there are no questions

63
00:05:52,699 --> 00:06:12,930
so the next line is Tommy good afternoon

64
00:06:10,499 --> 00:06:15,810
everyone I'm Tommy and I'll be

65
00:06:12,930 --> 00:06:18,870
presenting our update on the

66
00:06:15,810 --> 00:06:20,789
provisioning domain document so this has

67
00:06:18,870 --> 00:06:22,919
already gone through last call but I we

68
00:06:20,789 --> 00:06:24,210
have done some changes during the last

69
00:06:22,919 --> 00:06:27,960
call review so I wanted to make sure

70
00:06:24,210 --> 00:06:31,258
that everyone was aware of that all

71
00:06:27,960 --> 00:06:34,650
right so last call was concluded our

72
00:06:31,259 --> 00:06:36,810
Shepherd Eric line did a lot of good

73
00:06:34,650 --> 00:06:38,758
review catching some nits in there so we

74
00:06:36,810 --> 00:06:41,810
really appreciate that thank you to him

75
00:06:38,759 --> 00:06:44,189
for that we've done several refinements

76
00:06:41,810 --> 00:06:47,219
during that process so we're now on

77
00:06:44,189 --> 00:06:49,349
version o 8 so we jumped a couple as we

78
00:06:47,219 --> 00:06:52,889
fixed typos and stuff so I think it's in

79
00:06:49,349 --> 00:06:55,039
pretty good shape at this point first I

80
00:06:52,889 --> 00:06:58,860
want to highlight a couple of the minor

81
00:06:55,039 --> 00:07:02,310
changes that we did these are a little

82
00:06:58,860 --> 00:07:03,300
bit more than editorial but I believe

83
00:07:02,310 --> 00:07:04,740
they're still in the spirit of things

84
00:07:03,300 --> 00:07:08,550
that we intended all along they were

85
00:07:04,740 --> 00:07:12,629
just not explicitly stated first we

86
00:07:08,550 --> 00:07:15,029
clarified that the multihoming that we

87
00:07:12,629 --> 00:07:17,250
are offering with having multiple

88
00:07:15,029 --> 00:07:20,939
provisioning domains is only available

89
00:07:17,250 --> 00:07:23,129
to the PVD where clients this should

90
00:07:20,939 --> 00:07:24,629
have essentially no impact on legacy

91
00:07:23,129 --> 00:07:28,830
clients and they will not be aware of

92
00:07:24,629 --> 00:07:33,389
this multihoming setup we also clarified

93
00:07:28,830 --> 00:07:36,029
that the RA messages are intended to go

94
00:07:33,389 --> 00:07:38,039
separately to PVD aware hosts and non

95
00:07:36,029 --> 00:07:41,389
PVD aware hosts when that's the case

96
00:07:38,039 --> 00:07:45,500
they should be using different llas

97
00:07:41,389 --> 00:07:49,620
so that these are easily separable and

98
00:07:45,500 --> 00:07:51,659
lastly we updated some of the text in

99
00:07:49,620 --> 00:07:53,789
the Ayana considerations to be a bit

100
00:07:51,659 --> 00:07:55,289
more formal for our registration of the

101
00:07:53,789 --> 00:07:57,659
well-known

102
00:07:55,289 --> 00:08:02,580
URI format for accessing the extended

103
00:07:57,659 --> 00:08:04,188
PVD information so that kind of brings

104
00:08:02,580 --> 00:08:07,198
those things up to speed

105
00:08:04,189 --> 00:08:09,419
there is the one bit that we talked

106
00:08:07,199 --> 00:08:10,949
about last time that was one of I think

107
00:08:09,419 --> 00:08:12,808
the more open questions that we were

108
00:08:10,949 --> 00:08:15,330
still trying to work over when we

109
00:08:12,809 --> 00:08:17,819
presented this in Montreal we had three

110
00:08:15,330 --> 00:08:22,609
different options for how we're gonna

111
00:08:17,819 --> 00:08:27,599
try to align the dhcpv6 information with

112
00:08:22,610 --> 00:08:29,459
the PVD information during the process

113
00:08:27,599 --> 00:08:30,839
of getting the review we kind of landed

114
00:08:29,459 --> 00:08:32,429
on something that's slightly different

115
00:08:30,839 --> 00:08:35,698
from what we presented there so I did

116
00:08:32,429 --> 00:08:37,019
want to explain it to everyone here make

117
00:08:35,698 --> 00:08:39,899
sure that we all believe is the right

118
00:08:37,019 --> 00:08:43,979
thing since this is kind of you know

119
00:08:39,899 --> 00:08:45,720
during last call post last call so the

120
00:08:43,979 --> 00:08:48,360
key thing here is that we have separate

121
00:08:45,720 --> 00:08:51,240
recommendations about stateless versus

122
00:08:48,360 --> 00:08:53,819
stateful dhcpv6 elements so the

123
00:08:51,240 --> 00:08:56,970
stateless elements dns info other things

124
00:08:53,819 --> 00:08:59,449
like that are associated with the pvd's

125
00:08:56,970 --> 00:09:02,310
that were received on the same interface

126
00:08:59,449 --> 00:09:05,250
that have the o flag set in the RA and

127
00:09:02,310 --> 00:09:08,040
the stateful elements are associated

128
00:09:05,250 --> 00:09:13,740
with the PVD that has the in flag set in

129
00:09:08,040 --> 00:09:17,939
the RA where the PIO includes the dhcpv6

130
00:09:13,740 --> 00:09:20,220
I na and so we're trying that match

131
00:09:17,940 --> 00:09:23,370
there and for any cases in which there

132
00:09:20,220 --> 00:09:27,120
isn't a match the dhcpv6 elements are

133
00:09:23,370 --> 00:09:29,819
associated with the implicit PVD on that

134
00:09:27,120 --> 00:09:32,100
interface so we think this is kind of

135
00:09:29,819 --> 00:09:35,160
the most sane way of arranging

136
00:09:32,100 --> 00:09:36,690
everything again this is not something

137
00:09:35,160 --> 00:09:38,370
that we imagine is going to be a huge

138
00:09:36,690 --> 00:09:40,740
use case of transmitting this

139
00:09:38,370 --> 00:09:43,019
information it's more to ensure that if

140
00:09:40,740 --> 00:09:44,610
this information is received by the

141
00:09:43,019 --> 00:09:46,709
network that the clients have something

142
00:09:44,610 --> 00:09:49,410
sensible to do with how they interpret

143
00:09:46,709 --> 00:09:51,479
and associate the data so if you have

144
00:09:49,410 --> 00:09:54,170
any comments or concerns on that please

145
00:09:51,480 --> 00:09:54,170
do let us know

146
00:09:54,769 --> 00:09:58,699
that's about it that's what changed in

147
00:09:56,389 --> 00:10:01,809
the last couple updates so again thank

148
00:09:58,699 --> 00:10:04,488
you for all your input so right now it's

149
00:10:01,809 --> 00:10:06,649
needs to go through ASG review IETF last

150
00:10:04,489 --> 00:10:08,600
call I think it see an ad evaluation I

151
00:10:06,649 --> 00:10:10,779
wonder if stress can give an update on

152
00:10:08,600 --> 00:10:10,779
that

153
00:10:10,839 --> 00:10:21,559
there's interior aid easement so yes I

154
00:10:17,629 --> 00:10:23,059
finished my ID eval I was telling Eric I

155
00:10:21,559 --> 00:10:25,238
just didn't have a chance to write it up

156
00:10:23,059 --> 00:10:28,189
like it's how I finished it last week oh

157
00:10:25,239 --> 00:10:29,809
there's like another draft ahead of this

158
00:10:28,189 --> 00:10:31,790
in the queue which I haven't written up

159
00:10:29,809 --> 00:10:33,499
so I wanted to get it out before the

160
00:10:31,790 --> 00:10:35,748
meeting so I say like hey you guys are

161
00:10:33,499 --> 00:10:37,579
like taking a long time but I didn't so

162
00:10:35,749 --> 00:10:39,589
I'll try to get it out as soon as

163
00:10:37,579 --> 00:10:42,019
possible okay so sometime in the next

164
00:10:39,589 --> 00:10:43,759
couple weeks I would say like if you

165
00:10:42,019 --> 00:10:45,559
don't get it by next Friday like

166
00:10:43,759 --> 00:10:48,100
something is seriously wrong okay I take

167
00:10:45,559 --> 00:10:51,199
for my health appreciate it so much

168
00:10:48,100 --> 00:10:53,089
all right and then just the other aspect

169
00:10:51,199 --> 00:10:55,549
of this is now that this has been a

170
00:10:53,089 --> 00:10:57,709
fairly mature document we have done

171
00:10:55,549 --> 00:11:00,529
previous hackathon work with this we've

172
00:10:57,709 --> 00:11:01,459
done interrupts testing previously but

173
00:11:00,529 --> 00:11:04,480
of course you know a couple of the

174
00:11:01,459 --> 00:11:07,638
details have changed since then so

175
00:11:04,480 --> 00:11:10,639
anyone who is interested in working on

176
00:11:07,639 --> 00:11:15,049
this personally I'm working on this for

177
00:11:10,639 --> 00:11:16,579
our Apple client side but anyone who has

178
00:11:15,049 --> 00:11:18,980
a deployment that's interested in adding

179
00:11:16,579 --> 00:11:20,748
this support in and doing work at a

180
00:11:18,980 --> 00:11:22,790
hackathon in the upcoming times please

181
00:11:20,749 --> 00:11:25,279
do reach out to the authors and we would

182
00:11:22,790 --> 00:11:26,559
be happy to work on that with you and

183
00:11:25,279 --> 00:11:30,009
that's it

184
00:11:26,559 --> 00:11:36,889
any questions all right thank you all

185
00:11:30,009 --> 00:11:43,600
thank you thanks Tony

186
00:11:36,889 --> 00:11:43,600
so next in line is Vlad

187
00:11:52,260 --> 00:11:55,740
here he comes

188
00:12:00,269 --> 00:12:06,730
alright hi this so I'm gonna talk about

189
00:12:03,519 --> 00:12:11,790
well what we've been doing with Sox v6

190
00:12:06,730 --> 00:12:16,540
so nice tie please this new aircraft is

191
00:12:11,790 --> 00:12:19,120
rather light so we've got we've got a

192
00:12:16,540 --> 00:12:22,120
mechanism whereby the proxy can provide

193
00:12:19,120 --> 00:12:26,790
the DNS service to its clients and we've

194
00:12:22,120 --> 00:12:30,070
also added some an option that can that

195
00:12:26,790 --> 00:12:30,730
makes the proxy do happy eyeballs on the

196
00:12:30,070 --> 00:12:36,250
client's behalf

197
00:12:30,730 --> 00:12:38,410
so I said please so it was kind of

198
00:12:36,250 --> 00:12:44,019
obvious that tions needed dns life

199
00:12:38,410 --> 00:12:48,969
features non Sox aware apps had to do KN

200
00:12:44,019 --> 00:12:51,010
quad-a queries somehow and in the case

201
00:12:48,970 --> 00:12:54,160
of happy eyeballs those queries had to

202
00:12:51,010 --> 00:12:59,040
be done separately now during the last

203
00:12:54,160 --> 00:13:02,680
ITF someone's benchmarks just said that

204
00:12:59,040 --> 00:13:06,099
Sox clients should also be able to do

205
00:13:02,680 --> 00:13:09,399
yes and I and currently you need to do

206
00:13:06,100 --> 00:13:12,850
txt queries for that and of course there

207
00:13:09,399 --> 00:13:14,950
are some other DNS use cases that are

208
00:13:12,850 --> 00:13:17,620
cropping up for example service binding

209
00:13:14,950 --> 00:13:20,740
is on the horizon who knows if it will

210
00:13:17,620 --> 00:13:22,149
get centralized and come to think of it

211
00:13:20,740 --> 00:13:25,329
who knows what else we'll get

212
00:13:22,149 --> 00:13:28,899
standardized and what other future use

213
00:13:25,329 --> 00:13:35,410
cases there will be for DNS so next

214
00:13:28,899 --> 00:13:40,240
slide up until draft of seven we used to

215
00:13:35,410 --> 00:13:42,910
have individual options for DNS like

216
00:13:40,240 --> 00:13:48,390
functionality so you could do a and

217
00:13:42,910 --> 00:13:51,579
quality queries and also PTR queries the

218
00:13:48,390 --> 00:13:53,500
what was dangerous about this is that we

219
00:13:51,579 --> 00:13:57,189
were basically duplicating the NS

220
00:13:53,500 --> 00:13:59,440
functionality and as new use cases and

221
00:13:57,190 --> 00:14:02,079
if news kept these cases keep cropping

222
00:13:59,440 --> 00:14:03,310
up then we're going to have to keep up

223
00:14:02,079 --> 00:14:06,370
with them and

224
00:14:03,310 --> 00:14:11,768
yeah basically follow whatever the DNS

225
00:14:06,370 --> 00:14:14,500
folks are doing now obviously the

226
00:14:11,769 --> 00:14:19,360
alternative is to have the client used

227
00:14:14,500 --> 00:14:22,240
the act actually use DNS however of

228
00:14:19,360 --> 00:14:25,350
course it can do a DNS of Sox but it's

229
00:14:22,240 --> 00:14:28,569
hard for the proxy to convey it policies

230
00:14:25,350 --> 00:14:31,540
what IP is it what resolver ip's it has

231
00:14:28,569 --> 00:14:36,099
to use whether to do plaintext DNS or

232
00:14:31,540 --> 00:14:38,980
DNS over TLS or DNS over HTTP DNS over

233
00:14:36,100 --> 00:14:41,319
TLS or a over HTTP might be associated

234
00:14:38,980 --> 00:14:43,509
with some credentials and first you

235
00:14:41,319 --> 00:14:46,000
might have to give those credentials to

236
00:14:43,509 --> 00:14:49,209
the client and in case of DNS over TLS

237
00:14:46,000 --> 00:14:53,350
those credentials are actually private

238
00:14:49,209 --> 00:14:55,180
keys so that's not going to work and the

239
00:14:53,350 --> 00:14:58,329
alternative that we went for was to

240
00:14:55,180 --> 00:15:14,670
provide the DNS proxy so next slide

241
00:14:58,329 --> 00:15:14,670
please so now why shouldn't the proxy

242
00:15:17,670 --> 00:15:28,300
proxy on for 50 feet next well for

243
00:15:24,970 --> 00:15:31,620
example if we're using it towards the

244
00:15:28,300 --> 00:15:35,680
DNS proxy gonna be confused which

245
00:15:31,620 --> 00:15:39,240
circuits for which store circuit which

246
00:15:35,680 --> 00:15:39,239
starts a key does the query pertain to

247
00:15:39,269 --> 00:15:47,079
so if we have only one DNS proxy which

248
00:15:42,550 --> 00:15:50,620
lacks any kind of any kind of context

249
00:15:47,079 --> 00:15:54,849
related to the rate we're gonna leak all

250
00:15:50,620 --> 00:15:58,509
of those DNS queries over the wrong

251
00:15:54,850 --> 00:16:00,519
relay and if the client is trying to

252
00:15:58,509 --> 00:16:03,100
access something that is backed by Syria

253
00:16:00,519 --> 00:16:11,319
and the use of the CDN is going to be

254
00:16:03,100 --> 00:16:14,380
very suboptimal so the way we propose

255
00:16:11,319 --> 00:16:16,170
doing it is that can simply make a

256
00:16:14,380 --> 00:16:39,189
connect request

257
00:16:16,170 --> 00:16:43,719
0.0.0.0 on 50c on it so why are we doing

258
00:16:39,190 --> 00:16:45,670
TCP by default well sucks and UDP is

259
00:16:43,720 --> 00:16:48,100
kind of hard for clients to implement I

260
00:16:45,670 --> 00:16:51,459
mean of course it could be done over UDP

261
00:16:48,100 --> 00:16:55,839
but by default it's over TCP the

262
00:16:51,460 --> 00:17:00,880
implementation was very trivial so we

263
00:16:55,839 --> 00:17:06,390
simply install DNS mask and translated 0

264
00:17:00,880 --> 00:17:09,459
dot 0 dot 0 to 50 3 to 120 7.20 that 0.1

265
00:17:06,390 --> 00:17:10,650
that's it that's no more nothing more to

266
00:17:09,459 --> 00:17:16,209
say about it

267
00:17:10,650 --> 00:17:22,209
next slide please so I'm gonna give you

268
00:17:16,209 --> 00:17:23,050
a quick and somewhat strum and primer on

269
00:17:22,209 --> 00:17:25,679
happy eyeballs

270
00:17:23,050 --> 00:17:29,050
so basically resolve and connect to

271
00:17:25,679 --> 00:17:31,450
server using both ipv4 and ipv6 you do

272
00:17:29,050 --> 00:17:35,770
that in parallel and keep only one of

273
00:17:31,450 --> 00:17:39,130
the connections this sensibly offers

274
00:17:35,770 --> 00:17:40,809
failover from my p v6 to ipv4 so if a

275
00:17:39,130 --> 00:17:45,790
server does have a

276
00:17:40,809 --> 00:17:48,399
quad-a entry but but the ipv6 endpoint

277
00:17:45,790 --> 00:17:50,649
isn't responding then the ipv4 endpoint

278
00:17:48,400 --> 00:17:53,470
is gonna be used instead and of course

279
00:17:50,650 --> 00:17:55,000
if one of the endpoints is faster that

280
00:17:53,470 --> 00:17:59,920
and the client is gonna have better

281
00:17:55,000 --> 00:18:03,250
responsiveness now clients have all of

282
00:17:59,920 --> 00:18:04,809
the currently have all of the required

283
00:18:03,250 --> 00:18:06,840
features to implement happy eyeballs

284
00:18:04,809 --> 00:18:11,710
locally so we've got the NS we've got

285
00:18:06,840 --> 00:18:15,250
functionality so so it's not going to be

286
00:18:11,710 --> 00:18:20,280
a leap to implement the happy eyeballs

287
00:18:15,250 --> 00:18:27,460
mechanism so for socks next slide please

288
00:18:20,280 --> 00:18:29,450
now there might be some some cases in

289
00:18:27,460 --> 00:18:31,459
which the

290
00:18:29,450 --> 00:18:33,649
in which it's appropriate for the proxy

291
00:18:31,459 --> 00:18:35,690
to perform the happy eyeballs mechanism

292
00:18:33,649 --> 00:18:37,579
rather than our client so let's say we

293
00:18:35,690 --> 00:18:38,599
have higher RTT between the client and

294
00:18:37,579 --> 00:18:41,739
the proxies

295
00:18:38,599 --> 00:18:45,529
the proxy or the client and the proxies

296
00:18:41,739 --> 00:18:48,369
vantage point so happy eyeballs is gonna

297
00:18:45,529 --> 00:18:54,349
work like this first the client Rizal

298
00:18:48,369 --> 00:18:56,718
sends out two DNS requests and one for a

299
00:18:54,349 --> 00:18:59,149
and one for qua date and it gets back

300
00:18:56,719 --> 00:19:01,879
the response one RTT later and then it

301
00:18:59,149 --> 00:19:05,268
issues to connect requests one for ipv4

302
00:19:01,879 --> 00:19:09,908
and one for ipv6 one of them fails for

303
00:19:05,269 --> 00:19:09,909
some reason and the one that succeeds

304
00:19:10,149 --> 00:19:15,829
and sub generating a success reply from

305
00:19:12,919 --> 00:19:22,249
the proxy and then the client can talk

306
00:19:15,829 --> 00:19:27,109
to the server next slide now obviously

307
00:19:22,249 --> 00:19:30,379
we're kind of wasting on ITT here so Sox

308
00:19:27,109 --> 00:19:34,699
also allows you to use domain names in

309
00:19:30,379 --> 00:19:36,529
the request so if the proxy can do happy

310
00:19:34,700 --> 00:19:40,459
I have also done the client needs only

311
00:19:36,529 --> 00:19:46,759
issue a connect request and then and

312
00:19:40,459 --> 00:19:48,139
then the another proxy sends out tries

313
00:19:46,759 --> 00:19:52,269
to establish multiple connections in

314
00:19:48,139 --> 00:19:55,579
parallel and whichever of those succeeds

315
00:19:52,269 --> 00:19:59,659
ends up it ends up hooking the client

316
00:19:55,579 --> 00:20:04,969
with this is obviously faster we shave

317
00:19:59,659 --> 00:20:10,909
roughly one client to proxy RTT so next

318
00:20:04,969 --> 00:20:12,679
slide the way we do it the way we

319
00:20:10,909 --> 00:20:15,079
currently do it is straightforward so we

320
00:20:12,679 --> 00:20:18,499
have an option with no knobs that

321
00:20:15,079 --> 00:20:22,369
basically tells the proxy to do happy

322
00:20:18,499 --> 00:20:23,809
eyeballs at the very minimum drop the

323
00:20:22,369 --> 00:20:29,918
functionality that the proxy has to

324
00:20:23,809 --> 00:20:29,918
implement is failover from ipv6 to ipv4

325
00:20:31,239 --> 00:20:37,549
the the option semantics are the usual

326
00:20:35,029 --> 00:20:40,729
semantics used by source options so if

327
00:20:37,549 --> 00:20:42,820
the if the proxy has no idea what to do

328
00:20:40,729 --> 00:20:44,469
with the option I mean it

329
00:20:42,820 --> 00:20:46,689
it doesn't implement happy apples it

330
00:20:44,469 --> 00:20:49,599
simply ignores the option and doesn't

331
00:20:46,690 --> 00:20:51,609
echo it back otherwise the client knows

332
00:20:49,599 --> 00:20:54,039
that the server the proxy attempted

333
00:20:51,609 --> 00:20:56,408
happy eyeballs now of course there's a

334
00:20:54,039 --> 00:20:59,709
caveat to using happy eyeballs nearly

335
00:20:56,409 --> 00:21:01,690
willing so if we use happy eyeballs and

336
00:20:59,709 --> 00:21:06,699
TFO we're going to have a lot more

337
00:21:01,690 --> 00:21:09,249
replays than expected so TFO TFO does

338
00:21:06,699 --> 00:21:11,529
stipulate that replays can occur but

339
00:21:09,249 --> 00:21:14,259
that's supposed to be a rare occurrence

340
00:21:11,529 --> 00:21:17,789
now with happy eyeballs and TFO there

341
00:21:14,259 --> 00:21:21,599
are going to be a lot a lot of replays

342
00:21:17,789 --> 00:21:28,419
and that's about it for me

343
00:21:21,599 --> 00:21:33,158
thank you very much any questions there

344
00:21:28,419 --> 00:21:35,289
are questions Ben Schwartz so first of

345
00:21:33,159 --> 00:21:36,579
all I just want to say thanks for thanks

346
00:21:35,289 --> 00:21:38,799
for doing all the work here this this

347
00:21:36,579 --> 00:21:42,129
draft has improved in every iteration I

348
00:21:38,799 --> 00:21:44,190
think it's I think it's really getting

349
00:21:42,129 --> 00:21:49,119
very good thank you

350
00:21:44,190 --> 00:21:51,429
the I do I do have wonder about the the

351
00:21:49,119 --> 00:21:57,009
happy eyeballs behavior here I'm

352
00:21:51,429 --> 00:21:58,989
confused because in socks5 it seems like

353
00:21:57,009 --> 00:22:01,149
a proxy could already do this so do you

354
00:21:58,989 --> 00:22:03,129
think that a proxy do you believe that

355
00:22:01,149 --> 00:22:06,908
in Sox 5 the proxy actually already

356
00:22:03,129 --> 00:22:12,129
could be doing happy eyeballs I think it

357
00:22:06,909 --> 00:22:15,789
could so the RFC was written 20 years

358
00:22:12,129 --> 00:22:19,809
ago and it doesn't say anything about

359
00:22:15,789 --> 00:22:21,669
happy eyeballs yeah so that's that's my

360
00:22:19,809 --> 00:22:24,099
feeling as well so my conclusion from

361
00:22:21,669 --> 00:22:25,749
your description here is that in a sense

362
00:22:24,099 --> 00:22:29,668
what you've really done is implemented

363
00:22:25,749 --> 00:22:29,669
an option to disable happy eyeballs

364
00:22:30,659 --> 00:22:36,069
that's how I think about it so one of my

365
00:22:33,879 --> 00:22:38,738
questions is if you disable happy

366
00:22:36,069 --> 00:22:43,678
eyeballs it is there any reason to

367
00:22:38,739 --> 00:22:43,679
disable happy eyeballs other than TFO

368
00:22:44,879 --> 00:22:49,359
the proxy already knows whether TFO is

369
00:22:47,559 --> 00:22:51,908
going to be used separately from this so

370
00:22:49,359 --> 00:22:54,780
if TFO is not employed - is there a

371
00:22:51,909 --> 00:22:59,100
reason to not do happy eyeballs

372
00:22:54,780 --> 00:23:01,920
I don't really think so I mean there's

373
00:22:59,100 --> 00:23:06,270
no aside from port knocking there's no

374
00:23:01,920 --> 00:23:08,100
protocol just attempting to connect and

375
00:23:06,270 --> 00:23:13,350
then saying nothing means anything of

376
00:23:08,100 --> 00:23:14,909
value so probably not so to me that

377
00:23:13,350 --> 00:23:18,000
suggests that maybe we don't need this

378
00:23:14,910 --> 00:23:19,980
signal and that maybe this this decision

379
00:23:18,000 --> 00:23:23,670
could be implicit for example maybe you

380
00:23:19,980 --> 00:23:25,680
could say that the that the proxy just

381
00:23:23,670 --> 00:23:29,190
should do happy eyeballs unless it's in

382
00:23:25,680 --> 00:23:33,660
TFO in which case it should do the

383
00:23:29,190 --> 00:23:40,380
something like the the retry all right

384
00:23:33,660 --> 00:23:42,750
okay Tommy Pauline Apple so yes again

385
00:23:40,380 --> 00:23:44,760
echoing Ben thank you for doing updates

386
00:23:42,750 --> 00:23:48,330
on this and this is good discussion I

387
00:23:44,760 --> 00:23:49,950
think going back to those diagrams you

388
00:23:48,330 --> 00:23:52,050
had talking about the different

389
00:23:49,950 --> 00:23:53,550
approaches for how you use happy

390
00:23:52,050 --> 00:23:55,770
eyeballs essentially is it on the client

391
00:23:53,550 --> 00:23:58,500
or it's on the proxy totally agree that

392
00:23:55,770 --> 00:24:00,870
most of the time it makes sense for this

393
00:23:58,500 --> 00:24:03,450
all to be on the proxy and that's how we

394
00:24:00,870 --> 00:24:05,610
see it used generally today I mean there

395
00:24:03,450 --> 00:24:06,810
are going to be some cases in which the

396
00:24:05,610 --> 00:24:11,610
client does it but those are going to be

397
00:24:06,810 --> 00:24:14,419
fairly rare I agree with Ben that the

398
00:24:11,610 --> 00:24:17,340
explicit signal here is likely not

399
00:24:14,420 --> 00:24:20,210
needed I think discussion in the text

400
00:24:17,340 --> 00:24:24,570
referring to happy eyeballs is important

401
00:24:20,210 --> 00:24:27,750
saying that the proxy should use this

402
00:24:24,570 --> 00:24:30,560
mechanism when it is not a TFO

403
00:24:27,750 --> 00:24:33,870
connection I think would be valuable

404
00:24:30,560 --> 00:24:35,550
because that actually you know allows it

405
00:24:33,870 --> 00:24:37,469
gives more incentive for the clients to

406
00:24:35,550 --> 00:24:40,830
not try to second-guess it on their own

407
00:24:37,470 --> 00:24:43,830
a little indicating that you know if you

408
00:24:40,830 --> 00:24:47,300
do have TFO in play this is a concern

409
00:24:43,830 --> 00:24:50,840
and in general proxies should not do

410
00:24:47,300 --> 00:24:55,710
anything more than failover racing

411
00:24:50,840 --> 00:25:00,169
between addresses I mean even failover

412
00:24:55,710 --> 00:25:03,830
could be problematic so that's maybe the

413
00:25:00,170 --> 00:25:06,210
ball game all the way back to the client

414
00:25:03,830 --> 00:25:07,510
well fail all the way back to the client

415
00:25:06,210 --> 00:25:10,630
and let them do it well

416
00:25:07,510 --> 00:25:13,840
or not because you just don't own the

417
00:25:10,630 --> 00:25:16,660
second option the second collection TfL

418
00:25:13,840 --> 00:25:19,590
well I mean if the client is providing a

419
00:25:16,660 --> 00:25:22,660
domain name as part of the request then

420
00:25:19,590 --> 00:25:26,500
and let's say that the proxy is biased

421
00:25:22,660 --> 00:25:28,960
towards using ipv6 the proxy sends out a

422
00:25:26,500 --> 00:25:33,130
TFO scene and let's say that the return

423
00:25:28,960 --> 00:25:36,000
path doesn't work and so then the client

424
00:25:33,130 --> 00:25:38,740
the client is left with a with a

425
00:25:36,000 --> 00:25:44,710
connection that isn't working the proxy

426
00:25:38,740 --> 00:25:46,690
says hey that stuff didn't work right

427
00:25:44,710 --> 00:25:53,260
and so at that point if you did receive

428
00:25:46,690 --> 00:25:57,550
an ipv4 address you could simply do a

429
00:25:53,260 --> 00:26:00,070
normal TCP connection without TFO to the

430
00:25:57,550 --> 00:26:03,580
core address and send the early data as

431
00:26:00,070 --> 00:26:05,020
non early data and that would still look

432
00:26:03,580 --> 00:26:08,679
the same to the client it will just have

433
00:26:05,020 --> 00:26:15,610
a bit of extra overhead yes but that

434
00:26:08,680 --> 00:26:17,110
would also be a replay okay yeah yeah

435
00:26:15,610 --> 00:26:26,050
all right so then I guess fell all the

436
00:26:17,110 --> 00:26:27,429
way back to the client so to tell me

437
00:26:26,050 --> 00:26:29,139
that filling all the way back to the

438
00:26:27,430 --> 00:26:30,760
client is is difficult here because if

439
00:26:29,140 --> 00:26:37,530
the client just reissues the same

440
00:26:30,760 --> 00:26:37,530
connect to the same domain name it will

441
00:26:37,590 --> 00:26:42,220
been a ton less the proxy is actually

442
00:26:40,330 --> 00:26:47,169
stateful remembers this you know

443
00:26:42,220 --> 00:26:50,220
remembers to blacklist this unless the

444
00:26:47,170 --> 00:26:53,260
proxy remembers to blacklist v6 for that

445
00:26:50,220 --> 00:26:55,060
for that host the proxy will just do the

446
00:26:53,260 --> 00:26:56,470
same thing again if the proxy is

447
00:26:55,060 --> 00:27:00,720
stateless that the client and the client

448
00:26:56,470 --> 00:27:00,720
reissues the same request

449
00:27:01,320 --> 00:27:05,919
right I mean so one thing actually maybe

450
00:27:04,600 --> 00:27:07,810
this is some text we should add on the

451
00:27:05,920 --> 00:27:12,040
TfL case because one thing to note is

452
00:27:07,810 --> 00:27:15,220
that TFO only sends early data when you

453
00:27:12,040 --> 00:27:17,920
do have a valid cookie for the server so

454
00:27:15,220 --> 00:27:19,850
you must have gotten it at some point by

455
00:27:17,920 --> 00:27:23,700
talking to the server previously

456
00:27:19,850 --> 00:27:25,168
yeah for TFO yeah so in that case it

457
00:27:23,700 --> 00:27:27,929
means you actually have previously

458
00:27:25,169 --> 00:27:29,549
established v6 connectivity to this host

459
00:27:27,929 --> 00:27:32,340
before and so now if you essentially get

460
00:27:29,549 --> 00:27:36,720
an impairment later on maybe we should

461
00:27:32,340 --> 00:27:38,549
just be very clear that we shouldn't we

462
00:27:36,720 --> 00:27:39,899
must have state about this server

463
00:27:38,549 --> 00:27:41,158
because that's where the TfL cookies are

464
00:27:39,899 --> 00:27:43,320
stored maybe we should just flush that

465
00:27:41,159 --> 00:27:47,370
state if we realize that connections are

466
00:27:43,320 --> 00:27:50,720
failing to it that that situation seems

467
00:27:47,370 --> 00:27:50,719
rare enough that a replay is okay

468
00:27:51,659 --> 00:27:57,029
Jonathan X I was gonna say sort of

469
00:27:54,870 --> 00:27:59,100
somewhat fortuitous delivery after

470
00:27:57,029 --> 00:28:02,130
producing there's a lot of state related

471
00:27:59,100 --> 00:28:03,899
to happy eyeballs and I think we need to

472
00:28:02,130 --> 00:28:05,399
at least analyze whether there are

473
00:28:03,899 --> 00:28:06,989
privacy implications for this we want to

474
00:28:05,399 --> 00:28:08,879
make sure that I think we want to make

475
00:28:06,990 --> 00:28:11,429
sure that this state isn't shared across

476
00:28:08,880 --> 00:28:13,110
various users of the proxy but as you

477
00:28:11,429 --> 00:28:15,029
know each user of the proxy has their

478
00:28:13,110 --> 00:28:17,639
own state or you could find out what

479
00:28:15,029 --> 00:28:20,639
other people using the socks proxy are

480
00:28:17,639 --> 00:28:34,469
connecting to which would be bad all

481
00:28:20,639 --> 00:28:39,479
right yeah I think the only state that's

482
00:28:34,470 --> 00:28:43,350
shared by clients is are the TFO cookies

483
00:28:39,480 --> 00:28:46,429
so those are poor so those are per per

484
00:28:43,350 --> 00:28:50,719
server rather than per client there was

485
00:28:46,429 --> 00:28:54,600
nothing there's any other shared State

486
00:28:50,720 --> 00:28:56,460
Tommy Polly again one one thing to note

487
00:28:54,600 --> 00:28:59,610
though actually with regards to this TFO

488
00:28:56,460 --> 00:29:02,309
conversation if the client can detect

489
00:28:59,610 --> 00:29:03,889
essentially if TFO was successful

490
00:29:02,309 --> 00:29:06,720
because they got a really fast

491
00:29:03,889 --> 00:29:09,269
connection back they will actually know

492
00:29:06,720 --> 00:29:11,250
if someone had previously connected to

493
00:29:09,269 --> 00:29:14,100
that particular address or to that

494
00:29:11,250 --> 00:29:17,159
server so do we have privacy

495
00:29:14,100 --> 00:29:19,168
considerations that mentioned that yeah

496
00:29:17,159 --> 00:29:22,820
I should I should probably mention yep I

497
00:29:19,169 --> 00:29:22,820
didn't matter it should be in there yeah

498
00:29:23,510 --> 00:29:28,379
yeah thanks

499
00:29:25,350 --> 00:29:30,178
suresh krisshnan so just to put Gauri on

500
00:29:28,380 --> 00:29:32,110
the spot again and I kind of keep

501
00:29:30,179 --> 00:29:34,809
harping on this but

502
00:29:32,110 --> 00:29:37,449
that does TS vwg needs something

503
00:29:34,809 --> 00:29:39,490
specific from this one because I always

504
00:29:37,450 --> 00:29:45,070
like feel uncomfortable just doing this

505
00:29:39,490 --> 00:29:46,600
year so should we keep sending you know

506
00:29:45,070 --> 00:29:52,658
it's every meeting or how do you want to

507
00:29:46,600 --> 00:29:53,230
do this hi Cory Ferris do I want more

508
00:29:52,659 --> 00:29:58,630
work

509
00:29:53,230 --> 00:30:01,840
wow what a question and I think we

510
00:29:58,630 --> 00:30:04,269
probably would appreciate a presentation

511
00:30:01,840 --> 00:30:06,549
in TS pwg in our wonderfully packed

512
00:30:04,269 --> 00:30:09,940
agenda we can make some space if it

513
00:30:06,549 --> 00:30:11,168
tells us about the transport related

514
00:30:09,940 --> 00:30:13,149
topics I think that would actually be a

515
00:30:11,169 --> 00:30:14,409
really good thing this is maturing so it

516
00:30:13,149 --> 00:30:17,529
would be good just to get a presentation

517
00:30:14,409 --> 00:30:21,340
start and do that would you be up for

518
00:30:17,529 --> 00:30:25,029
doing a talk in TS vwg all right I think

519
00:30:21,340 --> 00:30:26,830
so yes so in Vancouver he talked to the

520
00:30:25,029 --> 00:30:28,990
chairs a little bit ahead so we can make

521
00:30:26,830 --> 00:30:30,939
sure the content isn't a repeat of this

522
00:30:28,990 --> 00:30:32,559
but he's just focused on the transport

523
00:30:30,940 --> 00:30:42,570
stuff and you'll get good feedback I'm

524
00:30:32,559 --> 00:30:55,389
sure thank you great thank you very much

525
00:30:42,570 --> 00:30:58,889
thanks Vlad great job the next in line

526
00:30:55,389 --> 00:30:58,889
is Pablo

527
00:31:23,750 --> 00:31:30,240
Graf nom this is public americium and

528
00:31:26,370 --> 00:31:33,389
I'm going to present on the ethernet an

529
00:31:30,240 --> 00:31:35,040
acceleration that we are pursuing in

530
00:31:33,390 --> 00:31:38,460
draft idea of a spring as our v6 and

531
00:31:35,040 --> 00:31:40,620
we're programming so the use case is

532
00:31:38,460 --> 00:31:42,660
pretty simple in hobby six we have a

533
00:31:40,620 --> 00:31:44,459
customer that is sending a packet you

534
00:31:42,660 --> 00:31:46,980
get it arrives to the service provider

535
00:31:44,460 --> 00:31:49,620
network and ingress P is that's going to

536
00:31:46,980 --> 00:31:51,480
encapsulate this packet into an ipv6

537
00:31:49,620 --> 00:31:52,620
header with an extensional header that

538
00:31:51,480 --> 00:31:54,960
is going to be the segment routing

539
00:31:52,620 --> 00:31:57,270
header slope you know this packet from

540
00:31:54,960 --> 00:32:00,179
the customer it can be either an ipv4

541
00:31:57,270 --> 00:32:03,240
packet an FP v6 packet or an Ethernet

542
00:32:00,179 --> 00:32:05,790
frame and so what we are just doing here

543
00:32:03,240 --> 00:32:07,650
is allocating a new next to their value

544
00:32:05,790 --> 00:32:12,210
in case that we all have an Ethernet

545
00:32:07,650 --> 00:32:14,429
frame so in previous revisions of this

546
00:32:12,210 --> 00:32:17,850
draft where we were using is the ipv6 no

547
00:32:14,429 --> 00:32:19,260
next header Bali 59 but during the last

548
00:32:17,850 --> 00:32:21,780
eight if in Montreal there was some

549
00:32:19,260 --> 00:32:23,700
discussion about it and consensus from

550
00:32:21,780 --> 00:32:26,820
the six month spring was actually to

551
00:32:23,700 --> 00:32:29,070
allocate a new code point for it and so

552
00:32:26,820 --> 00:32:32,418
we had some discussions on which code

553
00:32:29,070 --> 00:32:36,990
point follow kt20 class for either in it

554
00:32:32,419 --> 00:32:39,030
and that's it so that the processing for

555
00:32:36,990 --> 00:32:40,919
Internet is that is specified in the

556
00:32:39,030 --> 00:32:42,240
draft is just at the preamble and the

557
00:32:40,919 --> 00:32:45,230
frame check sequence are going to be a

558
00:32:42,240 --> 00:32:47,730
stripped off when we are just doing the

559
00:32:45,230 --> 00:32:48,840
inverse encapsulation and they're going

560
00:32:47,730 --> 00:32:54,179
to be placed back when we did a

561
00:32:48,840 --> 00:32:56,850
decapsulation and just for you to know

562
00:32:54,179 --> 00:33:00,360
the draft idea was spring sorry six and

563
00:32:56,850 --> 00:33:02,189
roaming it's actually requesting working

564
00:33:00,360 --> 00:33:03,750
group last call but in the meantime

565
00:33:02,190 --> 00:33:06,990
given that we have several

566
00:33:03,750 --> 00:33:08,970
implementations and deployments we are

567
00:33:06,990 --> 00:33:13,610
requesting the early allocation for this

568
00:33:08,970 --> 00:33:16,650
value so that's it any question

569
00:33:13,610 --> 00:33:19,500
yeah suresh krisshnan so the reason I

570
00:33:16,650 --> 00:33:20,970
wanted like the services folks to

571
00:33:19,500 --> 00:33:23,130
compress in tears there's like a

572
00:33:20,970 --> 00:33:25,350
protocol number allocation requests

573
00:33:23,130 --> 00:33:26,580
coming in as an early allocation so I

574
00:33:25,350 --> 00:33:27,789
just wanted the internet area to be

575
00:33:26,580 --> 00:33:30,699
aware of it

576
00:33:27,789 --> 00:33:32,619
it's not that we are under severe

577
00:33:30,700 --> 00:33:37,029
scarcity in the protocol number space

578
00:33:32,619 --> 00:33:41,350
and I really want them to not use 59

579
00:33:37,029 --> 00:33:43,239
known exceda to do this so I'm inclined

580
00:33:41,350 --> 00:33:44,769
to grant it so that that's kind of why I

581
00:33:43,239 --> 00:33:50,200
just wanted everybody to be aware that

582
00:33:44,769 --> 00:33:51,759
this is gonna happen I'll ask my

583
00:33:50,200 --> 00:33:55,269
question err client I'll ask my question

584
00:33:51,759 --> 00:33:57,879
that I asked you privately I mean I have

585
00:33:55,269 --> 00:34:01,509
not been following the never programming

586
00:33:57,879 --> 00:34:05,049
stuff but is there a reason that 3378

587
00:34:01,509 --> 00:34:08,109
III IP can't be used for your next

588
00:34:05,049 --> 00:34:11,049
header value so first we are we do not

589
00:34:08,109 --> 00:34:12,609
have the their IP header in between the

590
00:34:11,049 --> 00:34:15,069
segment writing Heather and a u.s.

591
00:34:12,609 --> 00:34:18,549
Ethernet frame and second we are not

592
00:34:15,069 --> 00:34:20,230
following the procedures from a draft in

593
00:34:18,549 --> 00:34:22,540
essence based on segment routing we are

594
00:34:20,230 --> 00:34:24,429
going to do when we are going to be

595
00:34:22,540 --> 00:34:26,259
capsulated either on a frame we are

596
00:34:24,429 --> 00:34:27,129
going to do some processing on different

597
00:34:26,260 --> 00:34:30,730
kind of flu cups

598
00:34:27,129 --> 00:34:32,469
based on segment routing so we are not

599
00:34:30,730 --> 00:34:39,010
following a dealer and is our IP

600
00:34:32,469 --> 00:34:40,868
processing at Cisco Systems so also one

601
00:34:39,010 --> 00:34:44,200
of the reason is this is an l2 VPN case

602
00:34:40,869 --> 00:34:46,059
and today for l2 VPN encapsulation for a

603
00:34:44,199 --> 00:34:48,928
frame and then I'm Phyllis label packets

604
00:34:46,059 --> 00:34:54,669
frame goes directly cannot here Oh

605
00:34:48,929 --> 00:34:56,710
common our Cisco Systems load for you so

606
00:34:54,668 --> 00:34:58,720
in MPLS case as well we have al to VPN

607
00:34:56,710 --> 00:35:00,970
we encapsulate incoming frame into

608
00:34:58,720 --> 00:35:03,669
labels start directly there's no shame

609
00:35:00,970 --> 00:35:04,990
layer for ether I over IP I think we

610
00:35:03,670 --> 00:35:07,720
want you to keep the similar for a

611
00:35:04,990 --> 00:35:09,939
service-based l2 VPN where we have an

612
00:35:07,720 --> 00:35:11,680
ipv6 header and SH address table set and

613
00:35:09,940 --> 00:35:13,240
I'll to frame directly we don't don't

614
00:35:11,680 --> 00:35:15,069
want to have any other shim layer in

615
00:35:13,240 --> 00:35:17,890
between which is a Ethernet IP I think

616
00:35:15,069 --> 00:35:19,509
you are suggesting plus plus we we have

617
00:35:17,890 --> 00:35:23,950
to be fully compliant if we were to do

618
00:35:19,510 --> 00:35:26,500
that a different Ethernet IP spec the

619
00:35:23,950 --> 00:35:28,839
ether IP drafts at 3378 defines the next

620
00:35:26,500 --> 00:35:32,079
header value for say everything after

621
00:35:28,839 --> 00:35:36,460
this is Ethernet that's not my

622
00:35:32,079 --> 00:35:38,170
understanding yes but we need to have to

623
00:35:36,460 --> 00:35:40,599
either net our IP header which we do not

624
00:35:38,170 --> 00:35:41,680
have and then it defines how we do that

625
00:35:40,599 --> 00:35:43,059
the us processing

626
00:35:41,680 --> 00:35:45,700
which is not the same oh there's no

627
00:35:43,059 --> 00:35:47,829
ethernet header note the Ethernet header

628
00:35:45,700 --> 00:35:52,960
they learn another YP header the four

629
00:35:47,829 --> 00:35:55,150
bytes of either or net or IP IP v6

630
00:35:52,960 --> 00:35:57,069
header then Ethernet IP header and then

631
00:35:55,150 --> 00:35:59,410
undone frame so this is assume they are

632
00:35:57,069 --> 00:36:01,900
we talking like vs. in MPLS you have

633
00:35:59,410 --> 00:36:04,770
label stack yeah I think we need a

634
00:36:01,900 --> 00:36:07,839
picture there yeah

635
00:36:04,770 --> 00:36:13,329
thank you that's been verified sorry my

636
00:36:07,839 --> 00:36:15,190
hope okay and one more comment as

637
00:36:13,329 --> 00:36:17,500
published at the deployments which are

638
00:36:15,190 --> 00:36:19,240
actually in progress is we are asking

639
00:36:17,500 --> 00:36:20,290
for actually also an early allocation of

640
00:36:19,240 --> 00:36:22,149
a code point that will have the

641
00:36:20,290 --> 00:36:34,930
deployment switch are about to deploy a

642
00:36:22,150 --> 00:36:39,910
dissolution right now thank you thanks

643
00:36:34,930 --> 00:36:44,470
Pablo okay so if there are any more

644
00:36:39,910 --> 00:36:52,808
questions that's it for this time thank

645
00:36:44,470 --> 00:36:55,509
you very much to everyone efficiency

646
00:36:52,809 --> 00:36:59,230
efficiency do you guys have the blue

647
00:36:55,510 --> 00:37:03,839
sheets somewhere that I can get them

648
00:36:59,230 --> 00:37:03,839
back blue sheets

