1
00:00:07,280 --> 00:00:13,320
yeah right and just put everybody and

2
00:00:11,190 --> 00:00:16,439
input any in this movie but we can

3
00:00:13,320 --> 00:00:17,520
actually talk to that I but it's going

4
00:00:16,440 --> 00:00:20,130
to be like less than five minutes

5
00:00:17,520 --> 00:00:22,550
because we have tons of oh I was telling

6
00:00:20,130 --> 00:00:28,049
her next time sure that's what reality's

7
00:00:22,550 --> 00:00:35,430
tutorial style presentations so people

8
00:00:28,050 --> 00:00:37,800
more time that's fine it's two hours

9
00:00:35,430 --> 00:00:40,740
great one hour it's great cuz we go to

10
00:00:37,800 --> 00:00:42,540
look at to two hours the traps and

11
00:00:40,740 --> 00:00:52,650
everything the last hour to longer

12
00:00:42,540 --> 00:00:54,450
presentation or energies actually I

13
00:00:52,650 --> 00:00:55,860
would like it to be all the same because

14
00:00:54,450 --> 00:00:59,960
I don't want to lose people but I think

15
00:00:55,860 --> 00:01:02,370
we need three hours so it's not enough I

16
00:00:59,960 --> 00:01:04,379
think like that my path you know they

17
00:01:02,370 --> 00:01:05,339
had more in two sessions and so we

18
00:01:04,379 --> 00:01:13,439
shouldn't have that two back-to-back

19
00:01:05,339 --> 00:01:17,399
sessions we're going to start because we

20
00:01:13,439 --> 00:01:19,710
have a really really packed agenda this

21
00:01:17,399 --> 00:01:23,210
is a coin computer in the network a

22
00:01:19,710 --> 00:01:23,210
proposed research group Oh

23
00:01:25,109 --> 00:01:33,359
I mean Schuler Jeffrey huh and I'm a

24
00:01:31,049 --> 00:01:35,490
little sympathy and again we have a

25
00:01:33,359 --> 00:01:37,859
really packed agenda thank you for

26
00:01:35,490 --> 00:01:40,798
everybody who stayed over on the Friday

27
00:01:37,859 --> 00:01:44,880
of the IETF where everybody is extremely

28
00:01:40,799 --> 00:01:47,100
exhausted tired and maybe you know I

29
00:01:44,880 --> 00:01:52,649
hope we give you some energy with this

30
00:01:47,100 --> 00:01:54,689
new topic this is probably you've seen

31
00:01:52,649 --> 00:01:58,079
it already this is the note well about

32
00:01:54,689 --> 00:02:00,208
IPR and the fact also that we have to be

33
00:01:58,079 --> 00:02:03,240
nice to one another I think the ITF is

34
00:02:00,209 --> 00:02:05,189
working extremely hard to make these

35
00:02:03,240 --> 00:02:08,310
meetings a safe place for people to

36
00:02:05,189 --> 00:02:13,409
express their opinions and express their

37
00:02:08,310 --> 00:02:15,930
especially technical opinions this is

38
00:02:13,409 --> 00:02:17,760
the goal of the RER TF I think it's

39
00:02:15,930 --> 00:02:18,360
important I think it's important to

40
00:02:17,760 --> 00:02:20,609
stress

41
00:02:18,360 --> 00:02:23,400
at every meeting that we are not doing

42
00:02:20,610 --> 00:02:25,620
standards we are doing research we are

43
00:02:23,400 --> 00:02:27,720
fostering research we are fostering the

44
00:02:25,620 --> 00:02:29,940
development of research communities in

45
00:02:27,720 --> 00:02:32,850
this case about this idea of

46
00:02:29,940 --> 00:02:34,650
distributing computing and storage and

47
00:02:32,850 --> 00:02:37,920
decision-making throughout the network

48
00:02:34,650 --> 00:02:39,360
and again we are never going to do a

49
00:02:37,920 --> 00:02:41,100
standard here but we're going to have a

50
00:02:39,360 --> 00:02:47,040
lot of information and potentially

51
00:02:41,100 --> 00:02:51,269
experimental RFC's so again it's what I

52
00:02:47,040 --> 00:02:53,750
said we want to foster the research we

53
00:02:51,270 --> 00:02:57,360
want to do look at architectures

54
00:02:53,750 --> 00:03:00,360
protocols and real-world case and like I

55
00:02:57,360 --> 00:03:02,970
said earlier this week we have as the

56
00:03:00,360 --> 00:03:06,030
chair is a little bit of the three the

57
00:03:02,970 --> 00:03:08,160
three things I'm an architecture eves

58
00:03:06,030 --> 00:03:10,380
dozen architecture and protocols and

59
00:03:08,160 --> 00:03:14,280
obviously Jeffrey becomes he comes from

60
00:03:10,380 --> 00:03:17,519
industry has a lot of real world

61
00:03:14,280 --> 00:03:21,510
use cases and stuff so this is our

62
00:03:17,520 --> 00:03:23,430
agenda it's extremely tight and I am

63
00:03:21,510 --> 00:03:25,530
very very sorry to all the presenters

64
00:03:23,430 --> 00:03:28,650
who got their presentations squeezed

65
00:03:25,530 --> 00:03:30,600
because of time and we promise that in

66
00:03:28,650 --> 00:03:33,330
Vancouver we're going to ask for more

67
00:03:30,600 --> 00:03:35,850
time so that as a research group we have

68
00:03:33,330 --> 00:03:38,370
more time also to dwell into the

69
00:03:35,850 --> 00:03:41,310
research aspects that a lot of time need

70
00:03:38,370 --> 00:03:43,500
a little bit more details so I'm very

71
00:03:41,310 --> 00:03:45,360
again I'm very sorry we had two hours

72
00:03:43,500 --> 00:03:46,500
and I should have asked for more or we

73
00:03:45,360 --> 00:03:48,300
should have asked for more but we're

74
00:03:46,500 --> 00:03:51,150
going to change that

75
00:03:48,300 --> 00:03:52,709
we have and again following some

76
00:03:51,150 --> 00:03:54,930
discussion that we had at the interim

77
00:03:52,709 --> 00:03:58,050
that this is not just about drafts and

78
00:03:54,930 --> 00:04:01,590
drafts presentation so we decided to cut

79
00:03:58,050 --> 00:04:02,820
to do two sets of presentations what we

80
00:04:01,590 --> 00:04:06,360
call the research and the research

81
00:04:02,820 --> 00:04:10,950
update presentations and then all the

82
00:04:06,360 --> 00:04:15,269
the drafts presentation after if anybody

83
00:04:10,950 --> 00:04:18,180
has comments about the agenda okay so

84
00:04:15,269 --> 00:04:23,490
we're going to do this as a as a group

85
00:04:18,180 --> 00:04:26,100
here and you can sure we were invited

86
00:04:23,490 --> 00:04:28,470
into the IAB earlier this week on

87
00:04:26,100 --> 00:04:31,560
Colin's request to give them an update

88
00:04:28,470 --> 00:04:35,580
on how we're doing as a

89
00:04:31,560 --> 00:04:38,730
research group and as a result Mauritius

90
00:04:35,580 --> 00:04:40,950
a gave a terrific presentation and we

91
00:04:38,730 --> 00:04:43,530
got lots of feedback from the IAB we've

92
00:04:40,950 --> 00:04:48,000
been around now for a year so we've had

93
00:04:43,530 --> 00:04:49,109
three this is our third IETF and even

94
00:04:48,000 --> 00:04:51,630
before that there were some side

95
00:04:49,110 --> 00:04:53,340
meetings and so forth but we thought

96
00:04:51,630 --> 00:04:54,930
we'd share with you the feedback that we

97
00:04:53,340 --> 00:04:56,520
received for those of you on the mailing

98
00:04:54,930 --> 00:04:59,130
list you've seen the really detailed

99
00:04:56,520 --> 00:05:03,270
comments that came back and in here on

100
00:04:59,130 --> 00:05:06,510
this slide are the main comments and the

101
00:05:03,270 --> 00:05:10,549
biggest comment that we got almost from

102
00:05:06,510 --> 00:05:14,159
the get-go was have you and should you

103
00:05:10,550 --> 00:05:16,400
give greater consideration to issues

104
00:05:14,160 --> 00:05:20,040
around security and privacy and Trust

105
00:05:16,400 --> 00:05:23,359
given that we are approaching one a new

106
00:05:20,040 --> 00:05:25,229
architecture into a more distributed

107
00:05:23,360 --> 00:05:29,280
context within which we're doing this

108
00:05:25,229 --> 00:05:30,870
work and so we got comments like you

109
00:05:29,280 --> 00:05:33,000
know to make this work relevant you have

110
00:05:30,870 --> 00:05:34,380
to focus there more as well as consider

111
00:05:33,000 --> 00:05:35,820
threat models and so forth which is a

112
00:05:34,380 --> 00:05:38,400
little hard because we're we're still

113
00:05:35,820 --> 00:05:45,390
pretty embryonic in our lifecycle as a

114
00:05:38,400 --> 00:05:47,219
group no okay I can keep going we

115
00:05:45,390 --> 00:05:49,740
decided to do this a bit panel to panel

116
00:05:47,220 --> 00:05:54,180
style but okay so let's change the panel

117
00:05:49,740 --> 00:05:59,340
person I saw I think I saw yes I made

118
00:05:54,180 --> 00:06:00,919
the presentation and we got a lot of

119
00:05:59,340 --> 00:06:03,210
comments but they were all in the same

120
00:06:00,919 --> 00:06:05,400
the same direction of security which is

121
00:06:03,210 --> 00:06:06,960
huge but at the same time I think which

122
00:06:05,400 --> 00:06:08,940
is good for this group and again thank

123
00:06:06,960 --> 00:06:10,440
you for all of you guys who participate

124
00:06:08,940 --> 00:06:12,600
in last year we didn't get anybody who

125
00:06:10,440 --> 00:06:14,370
said this is like a stupid idea and it

126
00:06:12,600 --> 00:06:16,169
should never come to the IRT f so you

127
00:06:14,370 --> 00:06:18,930
know at least at this point we were very

128
00:06:16,169 --> 00:06:22,349
happy I think however it is a call to

129
00:06:18,930 --> 00:06:25,320
action to the whole group and to

130
00:06:22,350 --> 00:06:29,280
everybody who presented papers or

131
00:06:25,320 --> 00:06:32,760
presented who did some drafts and even

132
00:06:29,280 --> 00:06:35,820
for some of our hackathon participants

133
00:06:32,760 --> 00:06:39,690
and I see them around here is just maybe

134
00:06:35,820 --> 00:06:42,659
revisit what we've been doing while

135
00:06:39,690 --> 00:06:45,389
having the security point of view inside

136
00:06:42,659 --> 00:06:47,819
I don't think or

137
00:06:45,389 --> 00:06:49,979
could correct me if you disagree but I

138
00:06:47,819 --> 00:06:52,050
don't think it means to change anything

139
00:06:49,979 --> 00:06:54,900
now or I don't think it means to change

140
00:06:52,050 --> 00:06:58,020
things in a very different way it just

141
00:06:54,900 --> 00:06:59,638
means that you know when you i'll get

142
00:06:58,020 --> 00:07:01,859
the point of packet filtering for

143
00:06:59,639 --> 00:07:05,219
example if I do packet filtering on

144
00:07:01,860 --> 00:07:06,930
metadata what is that metadata it's in

145
00:07:05,219 --> 00:07:09,620
an encrypted system what does it mean

146
00:07:06,930 --> 00:07:12,270
what do I want to expose to the

147
00:07:09,620 --> 00:07:14,849
filtering or to the inside processing

148
00:07:12,270 --> 00:07:19,609
just maybe rethink all of this with this

149
00:07:14,849 --> 00:07:22,139
security and this privacy aspect in mind

150
00:07:19,610 --> 00:07:24,840
this said there's a lot of us who work

151
00:07:22,139 --> 00:07:26,969
in industrial networks or things related

152
00:07:24,840 --> 00:07:29,179
to industry where this may not be as

153
00:07:26,969 --> 00:07:31,860
important but I will give it back to

154
00:07:29,180 --> 00:07:36,300
because in edge discovery that could be

155
00:07:31,860 --> 00:07:38,879
some issue I'm f by the way in French 7

156
00:07:36,300 --> 00:07:42,419
Eve are the same person in any case it's

157
00:07:38,879 --> 00:07:44,400
ok the the other things I wanted to tell

158
00:07:42,419 --> 00:07:47,008
you about are some of the other things

159
00:07:44,400 --> 00:07:50,039
that seem to resonate with the IAB the

160
00:07:47,009 --> 00:07:52,770
first of which was that as we start to

161
00:07:50,039 --> 00:07:55,139
talk about this trend towards edge

162
00:07:52,770 --> 00:07:57,930
computing and we talked about what's the

163
00:07:55,139 --> 00:08:00,870
relevance to the IETF for example there

164
00:07:57,930 --> 00:08:02,550
was some excitement saying yes please

165
00:08:00,870 --> 00:08:04,349
one way to differentiate ourselves from

166
00:08:02,550 --> 00:08:06,599
all the other efforts out there is to

167
00:08:04,349 --> 00:08:07,949
tie it back to what's going on in the

168
00:08:06,599 --> 00:08:10,650
internet what's going on in the

169
00:08:07,949 --> 00:08:13,379
standards and the protocols that are so

170
00:08:10,650 --> 00:08:15,568
typically developed here and actually

171
00:08:13,379 --> 00:08:18,930
after we talk to them it made me think

172
00:08:15,569 --> 00:08:20,669
of some kind of imagery for it as the

173
00:08:18,930 --> 00:08:22,680
same that's right now or actually has

174
00:08:20,669 --> 00:08:24,060
been doing IETF for so long so I don't

175
00:08:22,680 --> 00:08:26,819
really remember when I started coming

176
00:08:24,060 --> 00:08:28,050
but it was more like some kind of you

177
00:08:26,819 --> 00:08:29,669
know it was more like a telephone

178
00:08:28,050 --> 00:08:31,620
network in the way that you had these

179
00:08:29,669 --> 00:08:34,399
routers that were very closed and they

180
00:08:31,620 --> 00:08:36,810
were connected by more or less big

181
00:08:34,399 --> 00:08:39,479
connectivity network you know networks

182
00:08:36,809 --> 00:08:41,609
and cables and stuff and I was thinking

183
00:08:39,479 --> 00:08:43,140
after we had the IAB that what we're

184
00:08:41,610 --> 00:08:46,079
doing right now is more taking like a

185
00:08:43,140 --> 00:08:48,449
computer board breaking it in pieces

186
00:08:46,079 --> 00:08:50,670
throw the pieces around and connect them

187
00:08:48,449 --> 00:08:52,949
and then figure out how we can make that

188
00:08:50,670 --> 00:08:54,810
computer board work in a distributed and

189
00:08:52,949 --> 00:08:59,089
we're talking - but no actually I have

190
00:08:54,810 --> 00:08:59,089
my timer we still have one minute

191
00:08:59,750 --> 00:09:05,640
okay so I'm going to summarize which is

192
00:09:03,200 --> 00:09:07,380
the other things besides security

193
00:09:05,640 --> 00:09:13,530
privacy and Trust we've got one minute

194
00:09:07,380 --> 00:09:15,180
is that we of course as ietf goers come

195
00:09:13,530 --> 00:09:17,220
from the networking perspective we

196
00:09:15,180 --> 00:09:19,410
should go out of our way to recruit

197
00:09:17,220 --> 00:09:22,500
those who might be coming from these

198
00:09:19,410 --> 00:09:25,410
other perspectives like computing like

199
00:09:22,500 --> 00:09:27,300
storage to add to our point of view and

200
00:09:25,410 --> 00:09:29,550
that we were given some very specific

201
00:09:27,300 --> 00:09:34,250
examples of places where we could get

202
00:09:29,550 --> 00:09:36,329
some guidance including the 5g slicing

203
00:09:34,250 --> 00:09:37,800
context where you know what have the

204
00:09:36,330 --> 00:09:40,200
telcos done with regards to security

205
00:09:37,800 --> 00:09:41,910
when you're looking at these slices of

206
00:09:40,200 --> 00:09:44,370
quality of service streams and so forth

207
00:09:41,910 --> 00:09:46,140
and additionally the the attendant

208
00:09:44,370 --> 00:09:47,520
question that we always get which is or

209
00:09:46,140 --> 00:09:49,770
in that we've raised as a community

210
00:09:47,520 --> 00:09:51,510
around are we going to be using the same

211
00:09:49,770 --> 00:09:53,250
kinds of AP is that the data centers are

212
00:09:51,510 --> 00:09:55,350
using in order to gain access to

213
00:09:53,250 --> 00:09:57,930
resources and I don't know if there's a

214
00:09:55,350 --> 00:09:59,610
a B members in this room right now but I

215
00:09:57,930 --> 00:10:01,829
would like to thank them for their

216
00:09:59,610 --> 00:10:03,780
comments and for the time they took to

217
00:10:01,830 --> 00:10:05,910
allow us to talk it we were supposed to

218
00:10:03,780 --> 00:10:09,030
have 15 minutes and we ended up talking

219
00:10:05,910 --> 00:10:12,480
for 45 and that sold my fault so we have

220
00:10:09,030 --> 00:10:15,360
7 seconds and so if you want the details

221
00:10:12,480 --> 00:10:18,320
there's also a detailed set of comments

222
00:10:15,360 --> 00:10:18,320
on the mailing list

223
00:10:19,310 --> 00:10:30,560
run away phone you're actually on hold

224
00:10:27,150 --> 00:10:30,560
and this is the music in the background

225
00:10:32,690 --> 00:10:38,130
[Music]

226
00:10:35,210 --> 00:10:39,960
so hackathon summary you want to talk

227
00:10:38,130 --> 00:10:41,670
about it ok so people know where the

228
00:10:39,960 --> 00:10:47,910
hackathon please raise your hands I see

229
00:10:41,670 --> 00:10:49,229
a few around we had a hackathon on I'm

230
00:10:47,910 --> 00:10:52,910
talking too much anyway we have a

231
00:10:49,230 --> 00:10:55,770
hackathon on Saturday and Sunday and

232
00:10:52,910 --> 00:10:58,920
we're still embryonic and what we want

233
00:10:55,770 --> 00:11:00,720
to do with this so we did mainly some

234
00:10:58,920 --> 00:11:02,579
stuff to familiarize ourselves with data

235
00:11:00,720 --> 00:11:04,530
plain programming but we were so lucky

236
00:11:02,580 --> 00:11:07,020
we ended up getting a bunch of people

237
00:11:04,530 --> 00:11:11,130
who actually had projects and we did

238
00:11:07,020 --> 00:11:12,720
that the first idea was to continue what

239
00:11:11,130 --> 00:11:14,639
we had started the Montreal Impact

240
00:11:12,720 --> 00:11:17,009
filtering but then we had again

241
00:11:14,639 --> 00:11:19,290
incredible people came with projects and

242
00:11:17,009 --> 00:11:22,529
the idea that we have and we're going to

243
00:11:19,290 --> 00:11:25,199
discuss it in the in an interim that we

244
00:11:22,529 --> 00:11:29,639
plan to do later actually how to maybe

245
00:11:25,199 --> 00:11:33,420
have a common project and your Eve and

246
00:11:29,639 --> 00:11:34,800
not have and Eva started to actually put

247
00:11:33,420 --> 00:11:37,589
some words into this so we're going to

248
00:11:34,800 --> 00:11:40,560
share that to the list so this is people

249
00:11:37,589 --> 00:11:42,420
working we had obviously the tutorials

250
00:11:40,560 --> 00:11:45,779
for people who didn't know what they

251
00:11:42,420 --> 00:11:47,459
were doing we had actually Michelle

252
00:11:45,779 --> 00:11:50,970
who's going to present later who did

253
00:11:47,459 --> 00:11:53,369
service function chaining monitoring we

254
00:11:50,970 --> 00:11:56,279
had actually the people we had actually

255
00:11:53,370 --> 00:11:58,230
two people from the Singapore community

256
00:11:56,279 --> 00:12:00,990
which was fantastic and one of them did

257
00:11:58,230 --> 00:12:03,720
the packet filtering for critical events

258
00:12:00,990 --> 00:12:07,439
and he did it in about half a day and we

259
00:12:03,720 --> 00:12:09,720
had some problems with BGP wrote origins

260
00:12:07,439 --> 00:12:11,790
validation and actually that was good

261
00:12:09,720 --> 00:12:14,610
because it showed us a limitation of the

262
00:12:11,790 --> 00:12:16,800
language we're using p4 they pivoted to

263
00:12:14,610 --> 00:12:19,259
a new project but it also showed us that

264
00:12:16,800 --> 00:12:20,939
the ID that we have in that is going to

265
00:12:19,259 --> 00:12:22,949
be probably expressed by other people in

266
00:12:20,939 --> 00:12:27,000
the presentation that you want to use

267
00:12:22,949 --> 00:12:30,769
the very fast switches to do line speed

268
00:12:27,000 --> 00:12:33,389
stuff and when you have something more

269
00:12:30,769 --> 00:12:35,819
important or more consistent you want to

270
00:12:33,389 --> 00:12:38,040
send it to another type of processor so

271
00:12:35,819 --> 00:12:41,189
it just confirmed a little bit what we

272
00:12:38,040 --> 00:12:43,230
wanted to do and the team was all these

273
00:12:41,189 --> 00:12:46,529
people and those who have a star we're

274
00:12:43,230 --> 00:12:49,259
the first participant and the hackathon

275
00:12:46,529 --> 00:12:51,180
and the good thing about this is there's

276
00:12:49,259 --> 00:12:52,740
actually another set of about seven or

277
00:12:51,180 --> 00:12:54,809
eight people who participated in

278
00:12:52,740 --> 00:12:56,569
Montreal and they were not here but I

279
00:12:54,809 --> 00:12:59,550
know a bunch of them want to come to

280
00:12:56,569 --> 00:13:04,979
Vancouver and that's why we want to have

281
00:12:59,550 --> 00:13:07,170
a maybe a more important project so that

282
00:13:04,980 --> 00:13:12,149
now that we have a very good community

283
00:13:07,170 --> 00:13:14,430
around this we can actually move on with

284
00:13:12,149 --> 00:13:16,199
a real project and also I will tell you

285
00:13:14,430 --> 00:13:18,029
that I think it was very good for us to

286
00:13:16,199 --> 00:13:20,160
have the hackathon because it also

287
00:13:18,029 --> 00:13:23,449
allows us to recruit people that may be

288
00:13:20,160 --> 00:13:23,449
interested in the work of the group

289
00:13:24,529 --> 00:13:28,610
quick drafts update so we've got

290
00:13:26,720 --> 00:13:30,019
actually a total of eight these are the

291
00:13:28,610 --> 00:13:31,850
first four we've got them listed in

292
00:13:30,019 --> 00:13:34,339
chronological order you're gonna be

293
00:13:31,850 --> 00:13:36,310
hearing today the first three that are

294
00:13:34,339 --> 00:13:41,449
listed are ones that were not updated

295
00:13:36,310 --> 00:13:42,859
and the the bottom one also is not going

296
00:13:41,449 --> 00:13:46,339
to have representation today it was

297
00:13:42,860 --> 00:13:48,829
presented last time but they in their

298
00:13:46,339 --> 00:13:51,529
work they updated their section on

299
00:13:48,829 --> 00:13:54,410
application packaging and programming

300
00:13:51,529 --> 00:13:57,649
frameworks for decomposing at run time

301
00:13:54,410 --> 00:13:58,879
and they were interestingly also cited

302
00:13:57,649 --> 00:14:01,160
that one of the outcomes that they're

303
00:13:58,879 --> 00:14:04,249
hoping from their draft is just

304
00:14:01,160 --> 00:14:07,219
basically a research roadmap the how do

305
00:14:04,249 --> 00:14:10,730
we go forward okay these are four others

306
00:14:07,220 --> 00:14:12,620
that we have and although we will be

307
00:14:10,730 --> 00:14:18,290
hearing from the industrial use case

308
00:14:12,620 --> 00:14:19,970
they updated their their draft the in

309
00:14:18,290 --> 00:14:22,339
the security considerations area and

310
00:14:19,970 --> 00:14:24,889
also with for traffic filters we are

311
00:14:22,339 --> 00:14:28,189
going to hear from them today for the

312
00:14:24,889 --> 00:14:31,160
Transfer Protocol issues and we are also

313
00:14:28,189 --> 00:14:33,559
hearing from the other two so we will

314
00:14:31,160 --> 00:14:35,540
wait till later in the session some

315
00:14:33,559 --> 00:14:38,209
points to to note the fact that we've

316
00:14:35,540 --> 00:14:39,860
got eight internet drops actually stood

317
00:14:38,209 --> 00:14:41,268
us pretty well with the IAB that there

318
00:14:39,860 --> 00:14:43,430
are people interested in this topic and

319
00:14:41,269 --> 00:14:46,430
it's our intention that if we get

320
00:14:43,430 --> 00:14:48,920
progressed from a proposed RG to an

321
00:14:46,430 --> 00:14:50,870
actual RG that we will look at the most

322
00:14:48,920 --> 00:14:53,180
mature of these try to advance a couple

323
00:14:50,870 --> 00:14:54,860
of these to be taken in it begin the

324
00:14:53,180 --> 00:14:56,689
process of taking these in officially

325
00:14:54,860 --> 00:14:59,059
into the working group the research

326
00:14:56,689 --> 00:15:00,589
group so we'll wait to give you the

327
00:14:59,059 --> 00:15:03,649
outcome of whether we were blessed or

328
00:15:00,589 --> 00:15:09,110
not officially and then start down this

329
00:15:03,649 --> 00:15:10,730
path of a ID and corporation okay so we

330
00:15:09,110 --> 00:15:13,970
can start with presentations without

331
00:15:10,730 --> 00:15:16,040
further delay and actually this is the

332
00:15:13,970 --> 00:15:19,069
same advice we gave in Montreal is

333
00:15:16,040 --> 00:15:20,929
actually when you present scan you it it

334
00:15:19,069 --> 00:15:22,969
fits it clearly in your slide it's great

335
00:15:20,929 --> 00:15:25,249
if it's not well maybe just highlight

336
00:15:22,970 --> 00:15:26,809
how you relate to this chart to our

337
00:15:25,249 --> 00:15:29,420
Charter and to the cloud to edge

338
00:15:26,809 --> 00:15:32,050
continuum and the first presentation is

339
00:15:29,420 --> 00:15:32,050
York

340
00:15:38,740 --> 00:15:41,889
[Music]

341
00:15:55,579 --> 00:16:02,790
great yeah thanks so I just realized

342
00:16:00,749 --> 00:16:05,730
that I'm doubly wrong here first of all

343
00:16:02,790 --> 00:16:08,399
I'm not in the foot this is not in the

344
00:16:05,730 --> 00:16:10,350
focus of this research group apparently

345
00:16:08,399 --> 00:16:13,499
it's not core to edge is probably edge

346
00:16:10,350 --> 00:16:15,660
or falling off the edge and then I don't

347
00:16:13,499 --> 00:16:18,959
have anything on privacy security and

348
00:16:15,660 --> 00:16:20,579
Trust so maybe this is yet to come

349
00:16:18,959 --> 00:16:23,609
still I want to talk about two different

350
00:16:20,579 --> 00:16:25,638
bits in this this is research you can

351
00:16:23,610 --> 00:16:27,899
actually expand your research okay I

352
00:16:25,639 --> 00:16:29,999
want to talk about two different bits in

353
00:16:27,899 --> 00:16:33,749
this talk first of all I want to give a

354
00:16:29,999 --> 00:16:36,269
brief idea of two kinds of little

355
00:16:33,749 --> 00:16:38,189
systems that we built for network

356
00:16:36,269 --> 00:16:41,790
computing and then I want to relate this

357
00:16:38,189 --> 00:16:44,629
hooray including specific slides to this

358
00:16:41,790 --> 00:16:47,250
to several aspects that relate to an

359
00:16:44,629 --> 00:16:50,670
edge computing and not occurring in

360
00:16:47,250 --> 00:16:54,360
network computing so quick context so

361
00:16:50,670 --> 00:16:55,769
this is about IOT on the one hand so

362
00:16:54,360 --> 00:16:58,769
this means that we are not looking at

363
00:16:55,769 --> 00:17:01,170
generic VMs or rec servers that have

364
00:16:58,769 --> 00:17:02,790
arbitrary compute capabilities but we

365
00:17:01,170 --> 00:17:05,280
are looking at specific devices that

366
00:17:02,790 --> 00:17:07,980
have certain capabilities that others

367
00:17:05,280 --> 00:17:10,168
might not have which also means that

368
00:17:07,980 --> 00:17:12,089
they are usually harder to scale so you

369
00:17:10,169 --> 00:17:13,980
just can't put up there's no point in

370
00:17:12,089 --> 00:17:15,379
putting up two hundred or a thousand

371
00:17:13,980 --> 00:17:17,309
temperature sensors next to each other

372
00:17:15,380 --> 00:17:20,429
when you're also talking about mobile

373
00:17:17,309 --> 00:17:22,589
users which means that we don't do

374
00:17:20,429 --> 00:17:24,360
orchestration according to RT T

375
00:17:22,589 --> 00:17:25,619
minimization or over a global load

376
00:17:24,359 --> 00:17:29,070
balancing but there is a certain

377
00:17:25,619 --> 00:17:30,870
locality relevant here so if I'm trying

378
00:17:29,070 --> 00:17:32,460
to control temperature in this room

379
00:17:30,870 --> 00:17:34,260
luckily this morning it doesn't seem to

380
00:17:32,460 --> 00:17:38,220
be necessary because the system seems to

381
00:17:34,260 --> 00:17:39,899
be working then I want to interact with

382
00:17:38,220 --> 00:17:41,250
what's around me not with something

383
00:17:39,899 --> 00:17:44,789
that's at the other end of the city or

384
00:17:41,250 --> 00:17:46,230
in a different room and thirdly we are

385
00:17:44,789 --> 00:17:47,160
looking at relatively fine grain

386
00:17:46,230 --> 00:17:50,970
function of decom

387
00:17:47,160 --> 00:17:52,980
position and in 40 if I'm coughing a bit

388
00:17:50,970 --> 00:17:54,570
this is the impact of this air

389
00:17:52,980 --> 00:17:58,920
conditioners I'm sorry for this is this

390
00:17:54,570 --> 00:18:01,740
hurts your ears once in a while so we

391
00:17:58,920 --> 00:18:03,870
have two models of code provisioning

392
00:18:01,740 --> 00:18:06,330
fundamentally that you could take apart

393
00:18:03,870 --> 00:18:09,149
one as cloud driven which is what USA

394
00:18:06,330 --> 00:18:11,129
alluded to earlier where this is more

395
00:18:09,150 --> 00:18:12,960
the CDN model where application service

396
00:18:11,130 --> 00:18:16,230
providers offer a quote in a centralized

397
00:18:12,960 --> 00:18:19,710
manner to instantiate this on in the

398
00:18:16,230 --> 00:18:21,780
edge in other network elements and so on

399
00:18:19,710 --> 00:18:25,110
and we can but we can also look at the

400
00:18:21,780 --> 00:18:26,730
user driven organization where code

401
00:18:25,110 --> 00:18:28,800
actually comes from the US and by this I

402
00:18:26,730 --> 00:18:31,620
don't mean a user invoking a certain

403
00:18:28,800 --> 00:18:34,710
function from an app but actually

404
00:18:31,620 --> 00:18:37,050
defining or programming the environment

405
00:18:34,710 --> 00:18:40,290
programming the world around them with

406
00:18:37,050 --> 00:18:42,330
respect to function what this usually

407
00:18:40,290 --> 00:18:43,800
looks like is that you have your mobile

408
00:18:42,330 --> 00:18:46,439
phone as your preferred device or

409
00:18:43,800 --> 00:18:48,000
something else and look around what but

410
00:18:46,440 --> 00:18:51,780
what kind of devices you can possibly

411
00:18:48,000 --> 00:18:53,670
find figure out which of these you are

412
00:18:51,780 --> 00:18:55,290
currently interested in for the app you

413
00:18:53,670 --> 00:18:56,430
are trying to realize for the function

414
00:18:55,290 --> 00:18:59,970
you are trying to execute like

415
00:18:56,430 --> 00:19:03,120
temperature control and compose them

416
00:18:59,970 --> 00:19:05,580
make use of them as you see fit and this

417
00:19:03,120 --> 00:19:06,959
can be done either by calling functions

418
00:19:05,580 --> 00:19:11,360
that are already available on those

419
00:19:06,960 --> 00:19:13,440
devices or by instantiating code on

420
00:19:11,360 --> 00:19:16,620
uncensor devices that are then supposed

421
00:19:13,440 --> 00:19:20,370
to do to carry out the task on your

422
00:19:16,620 --> 00:19:22,830
behalf so we like mobile code so I have

423
00:19:20,370 --> 00:19:24,570
two examples and that follow these that

424
00:19:22,830 --> 00:19:27,360
follow this idea one is a lure based

425
00:19:24,570 --> 00:19:29,189
mobile code execution environment and

426
00:19:27,360 --> 00:19:33,810
the second one is a trigger action

427
00:19:29,190 --> 00:19:36,060
framework leveraging ble beacons both

428
00:19:33,810 --> 00:19:37,590
are client driven in that whatever is

429
00:19:36,060 --> 00:19:39,720
being programmed comes from the user

430
00:19:37,590 --> 00:19:41,429
device comes from the users we don't

431
00:19:39,720 --> 00:19:44,100
interact with monster things but we

432
00:19:41,430 --> 00:19:45,870
interact with ESP 32 microcontrollers

433
00:19:44,100 --> 00:19:50,090
that are sufficiently lightweight cheap

434
00:19:45,870 --> 00:19:52,709
and can be they are plentiful and we use

435
00:19:50,090 --> 00:19:54,899
we don't use network infrastructure at

436
00:19:52,710 --> 00:19:56,730
large but we restrict ourselves at

437
00:19:54,900 --> 00:19:59,820
present due to this earlier mention

438
00:19:56,730 --> 00:20:00,690
mobility case to broadcast networks with

439
00:19:59,820 --> 00:20:02,070
strictly local

440
00:20:00,690 --> 00:20:06,260
service discovery so we are using

441
00:20:02,070 --> 00:20:10,260
beaconing in both cases to find things

442
00:20:06,260 --> 00:20:12,379
let me quickly start with number one

443
00:20:10,260 --> 00:20:15,170
so this Luo based more a coordinate

444
00:20:12,380 --> 00:20:17,580
execution environment you can see this

445
00:20:15,170 --> 00:20:19,830
monster picture there there is a small

446
00:20:17,580 --> 00:20:22,379
note that looks like an a smartphone

447
00:20:19,830 --> 00:20:24,149
moving along a portrait line from the

448
00:20:22,380 --> 00:20:26,160
left to the right and it's that the

449
00:20:24,150 --> 00:20:30,030
fundamental idea is that it's going to

450
00:20:26,160 --> 00:20:32,310
pick up signals from devices around it

451
00:20:30,030 --> 00:20:33,810
including their capabilities and then

452
00:20:32,310 --> 00:20:35,730
makes use of the devices that are

453
00:20:33,810 --> 00:20:38,639
currently in reach if a device goes out

454
00:20:35,730 --> 00:20:40,860
of reach and another one comes in it's

455
00:20:38,640 --> 00:20:42,900
going to adjust leaving all services

456
00:20:40,860 --> 00:20:43,590
behind instantiating functions on new

457
00:20:42,900 --> 00:20:45,450
devices

458
00:20:43,590 --> 00:20:46,800
there could be an internet back-end but

459
00:20:45,450 --> 00:20:51,720
we are not going to talk about that

460
00:20:46,800 --> 00:20:53,520
today these individual notes that the

461
00:20:51,720 --> 00:20:54,630
mobile device interacts with have a

462
00:20:53,520 --> 00:20:55,770
certain architecture I've already

463
00:20:54,630 --> 00:20:58,320
mentioned that this is an ESP

464
00:20:55,770 --> 00:21:00,600
microcontroller so this thing runs at

465
00:20:58,320 --> 00:21:02,460
the bottom and ESP then we have an

466
00:21:00,600 --> 00:21:04,980
arthouse on top of that on top of this

467
00:21:02,460 --> 00:21:06,690
again we have a bunch of C based drivers

468
00:21:04,980 --> 00:21:10,290
bindings to the newer language and then

469
00:21:06,690 --> 00:21:12,930
our execution framework that gives us

470
00:21:10,290 --> 00:21:15,840
the blue box on the left-hand side and

471
00:21:12,930 --> 00:21:18,420
that provides drivers to interface to

472
00:21:15,840 --> 00:21:20,790
actuators and to sensors turning on

473
00:21:18,420 --> 00:21:23,790
lights measuring temperature as simple

474
00:21:20,790 --> 00:21:25,530
examples has interfaces to local storage

475
00:21:23,790 --> 00:21:28,670
and has interfaces to network and so

476
00:21:25,530 --> 00:21:31,680
that these things can talk to each other

477
00:21:28,670 --> 00:21:34,230
so fundamentally this is we are using

478
00:21:31,680 --> 00:21:36,750
Lua process VMs days they offer a

479
00:21:34,230 --> 00:21:40,110
generic code execution platforms we send

480
00:21:36,750 --> 00:21:42,090
our Lua scripts strings attached with

481
00:21:40,110 --> 00:21:44,219
metadata of what kind of resources they

482
00:21:42,090 --> 00:21:46,139
are going to require and so that the

483
00:21:44,220 --> 00:21:48,210
device can actually make a sensible

484
00:21:46,140 --> 00:21:49,650
decision whether it can sensibly execute

485
00:21:48,210 --> 00:21:53,790
that code and whether it has all the

486
00:21:49,650 --> 00:21:55,800
necessary resources this generic

487
00:21:53,790 --> 00:21:58,830
mechanism gets combined with specific

488
00:21:55,800 --> 00:22:01,290
sensing and actuation hardware which are

489
00:21:58,830 --> 00:22:04,590
defined as user or device specific

490
00:22:01,290 --> 00:22:07,920
capabilities so that our mobile devices

491
00:22:04,590 --> 00:22:08,970
can sense which devices and their

492
00:22:07,920 --> 00:22:13,380
surroundings which would actually be

493
00:22:08,970 --> 00:22:14,669
contacting the function properties in

494
00:22:13,380 --> 00:22:19,710
the sense of functions

495
00:22:14,669 --> 00:22:21,659
executed inside the network are made

496
00:22:19,710 --> 00:22:23,519
available via Bluetooth beacon where the

497
00:22:21,659 --> 00:22:27,629
notes describe what kind of features

498
00:22:23,519 --> 00:22:30,570
they can offer and they also provide

499
00:22:27,629 --> 00:22:34,129
wonderful information specifically Wi-Fi

500
00:22:30,570 --> 00:22:37,230
SSID to connect to for the mobile device

501
00:22:34,129 --> 00:22:39,498
function executional and also mobile

502
00:22:37,230 --> 00:22:43,559
device then essentially goes off picks

503
00:22:39,499 --> 00:22:47,100
one or more nodes that it would like to

504
00:22:43,559 --> 00:22:49,678
talk to and transfers the mobile code

505
00:22:47,100 --> 00:22:50,850
the mobile the node itself can then

506
00:22:49,679 --> 00:22:52,830
decide whether it has the necessary

507
00:22:50,850 --> 00:22:55,769
capabilities and it has enough resource

508
00:22:52,830 --> 00:22:56,999
in terms of compute power available at

509
00:22:55,769 --> 00:23:00,259
the moment and can either decide to

510
00:22:56,999 --> 00:23:02,789
refuse execution or accept that script

511
00:23:00,259 --> 00:23:04,919
the instantiation then happens on the

512
00:23:02,789 --> 00:23:06,690
executing node and at some point the

513
00:23:04,919 --> 00:23:07,889
mobile can collect the results we

514
00:23:06,690 --> 00:23:10,679
support two different modes of operation

515
00:23:07,889 --> 00:23:12,840
one can be one short interactions

516
00:23:10,679 --> 00:23:15,419
fetching data the other one can be

517
00:23:12,840 --> 00:23:17,070
instantiation of code that runs in the

518
00:23:15,419 --> 00:23:21,629
background and for example triggers

519
00:23:17,070 --> 00:23:24,178
updates every K seconds so this whole

520
00:23:21,629 --> 00:23:26,340
thing looks like then two-stage process

521
00:23:24,179 --> 00:23:28,799
but on the one hand we have a script

522
00:23:26,340 --> 00:23:31,019
collection and distribution networking

523
00:23:28,799 --> 00:23:33,629
interface that put scripts into a local

524
00:23:31,019 --> 00:23:35,220
@q the weather from which the runtime

525
00:23:33,629 --> 00:23:36,899
environment picks what they can execute

526
00:23:35,220 --> 00:23:38,340
next providing some kind of

527
00:23:36,899 --> 00:23:45,090
serialization but there's also some

528
00:23:38,340 --> 00:23:48,658
degree of parallelism supported no not

529
00:23:45,090 --> 00:23:51,059
too bad and so we try we built this

530
00:23:48,659 --> 00:23:54,210
tried this out got roughly the idea that

531
00:23:51,059 --> 00:23:57,658
usually at least with the fairly poorly

532
00:23:54,210 --> 00:23:59,429
optimized Wi-Fi connectivity the slowest

533
00:23:57,659 --> 00:24:01,679
part at the moment is actually discovery

534
00:23:59,429 --> 00:24:03,509
and code instantiation that gets a bit

535
00:24:01,679 --> 00:24:06,509
better if you run much if you transfer

536
00:24:03,509 --> 00:24:08,850
multiple scripts in one run and but the

537
00:24:06,509 --> 00:24:12,989
entire thing is sufficiently lightweight

538
00:24:08,850 --> 00:24:14,668
that we figured by by extrapolation that

539
00:24:12,989 --> 00:24:16,169
a single of these little micro

540
00:24:14,669 --> 00:24:20,239
controllers can support something like a

541
00:24:16,169 --> 00:24:23,099
hundred user devices um the second part

542
00:24:20,239 --> 00:24:27,220
so this was point-to-point communication

543
00:24:23,099 --> 00:24:29,500
mobile node talks to an individual in

544
00:24:27,220 --> 00:24:31,510
structure node and then offload

545
00:24:29,500 --> 00:24:34,299
something and then programs then one by

546
00:24:31,510 --> 00:24:36,400
one the second part is a more bus based

547
00:24:34,299 --> 00:24:39,039
approach where we essentially have built

548
00:24:36,400 --> 00:24:41,890
distributed if this then that trigger

549
00:24:39,039 --> 00:24:44,890
action framework on the left hand side

550
00:24:41,890 --> 00:24:47,100
you see trigger drivers which

551
00:24:44,890 --> 00:24:49,780
essentially can consider to be sensors

552
00:24:47,100 --> 00:24:52,990
Hardware sensors that generate signals

553
00:24:49,780 --> 00:24:55,480
whenever a certain reading temperature

554
00:24:52,990 --> 00:24:58,570
whatever on the right hand side we have

555
00:24:55,480 --> 00:25:00,789
extra action drivers which are the

556
00:24:58,570 --> 00:25:04,418
equivalent of doing something and in the

557
00:25:00,789 --> 00:25:05,950
middle we have two blocks one is about

558
00:25:04,419 --> 00:25:08,799
something like a boolean circuit that

559
00:25:05,950 --> 00:25:12,190
can express sophisticated if this then

560
00:25:08,799 --> 00:25:14,080
that logic saying okay if if a certain

561
00:25:12,190 --> 00:25:16,539
set of conditions are met I want to have

562
00:25:14,080 --> 00:25:18,970
a certain thing to be executed and then

563
00:25:16,539 --> 00:25:21,940
we have a separate matching of what a

564
00:25:18,970 --> 00:25:24,070
specific output to which devices or to

565
00:25:21,940 --> 00:25:28,330
which actuators this output should be

566
00:25:24,070 --> 00:25:31,330
forwarded that's roughly the the overall

567
00:25:28,330 --> 00:25:34,240
architecture in terms of the which gives

568
00:25:31,330 --> 00:25:37,149
us a similar in terms of the network

569
00:25:34,240 --> 00:25:40,480
compute we have essentially distributed

570
00:25:37,150 --> 00:25:43,559
triggers and actions we have our code is

571
00:25:40,480 --> 00:25:45,760
the program logic that we distribute

572
00:25:43,559 --> 00:25:48,610
function properties events are

573
00:25:45,760 --> 00:25:52,299
essentially global uni unique Device

574
00:25:48,610 --> 00:25:55,600
Identifier us and then instance IDs to

575
00:25:52,299 --> 00:25:57,789
refer to specific instances as well as

576
00:25:55,600 --> 00:25:59,379
definition IDs to provide more complex

577
00:25:57,789 --> 00:26:02,970
functions so we can actually provide

578
00:25:59,380 --> 00:26:02,970
some abstraction in terms of programming

579
00:26:03,150 --> 00:26:08,679
we utilize ble beacons as a bus system

580
00:26:06,909 --> 00:26:11,049
so this is actually essentially used for

581
00:26:08,679 --> 00:26:12,730
everything we use this to discover

582
00:26:11,049 --> 00:26:14,679
nearby divide nearby devices and their

583
00:26:12,730 --> 00:26:18,429
capabilities to learn about what

584
00:26:14,679 --> 00:26:22,510
features they can do um to spread rules

585
00:26:18,429 --> 00:26:25,090
and all these little programs and then

586
00:26:22,510 --> 00:26:28,330
once those up to spread and load it to

587
00:26:25,090 --> 00:26:29,830
also execute the respective triggers and

588
00:26:28,330 --> 00:26:31,510
have the triggers flow across the

589
00:26:29,830 --> 00:26:33,668
network so this comes back to my mama zo

590
00:26:31,510 --> 00:26:35,230
says mentioning breaking up a board of a

591
00:26:33,669 --> 00:26:37,330
computer and having things flow back

592
00:26:35,230 --> 00:26:39,110
back and forth between the individual

593
00:26:37,330 --> 00:26:42,620
bits and pieces

594
00:26:39,110 --> 00:26:44,360
some extent this is a bit on the extreme

595
00:26:42,620 --> 00:26:46,340
savvy because we only move computation

596
00:26:44,360 --> 00:26:48,439
no data at all everything that the only

597
00:26:46,340 --> 00:26:52,279
thing that gets moved is individual

598
00:26:48,440 --> 00:26:53,990
trigger signals there are a bunch of

599
00:26:52,279 --> 00:26:55,519
protocol messages they are sufficiently

600
00:26:53,990 --> 00:26:57,140
squeezed so that they can be and

601
00:26:55,519 --> 00:26:59,269
efficiently represented to the so that

602
00:26:57,140 --> 00:27:01,429
they can fit into Bluetooth low-energy

603
00:26:59,269 --> 00:27:04,130
beacons I'm not going to go through

604
00:27:01,429 --> 00:27:08,750
those in detail in the end you get

605
00:27:04,130 --> 00:27:10,909
something like an model where you have a

606
00:27:08,750 --> 00:27:12,470
bunch of sensors in the environment you

607
00:27:10,909 --> 00:27:15,580
can have multiple mobile nodes that are

608
00:27:12,470 --> 00:27:18,399
running around they interact with these

609
00:27:15,580 --> 00:27:21,620
find out which capabilities they have

610
00:27:18,399 --> 00:27:23,239
can then spread triggers rules and

611
00:27:21,620 --> 00:27:25,428
actions and these little programs and

612
00:27:23,240 --> 00:27:27,830
thereby actually connect those entities

613
00:27:25,429 --> 00:27:29,870
together and then go away and these

614
00:27:27,830 --> 00:27:31,070
things can talk content can continue

615
00:27:29,870 --> 00:27:37,699
talking to each other

616
00:27:31,070 --> 00:27:40,629
em self orchestrating then then in the

617
00:27:37,700 --> 00:27:43,600
end according to what the Mobile's

618
00:27:40,630 --> 00:27:46,429
devices could program them to do and

619
00:27:43,600 --> 00:27:48,399
there are many interesting little issues

620
00:27:46,429 --> 00:27:50,539
here in terms of how do you deal with

621
00:27:48,399 --> 00:27:52,100
conflicting rules what do you do if you

622
00:27:50,539 --> 00:27:53,658
have 20 different users in parallel and

623
00:27:52,100 --> 00:27:55,549
they might wanna they want to do this

624
00:27:53,659 --> 00:27:59,090
fairness issues to be discussed and so

625
00:27:55,549 --> 00:28:00,918
on so we are currently exploring and the

626
00:27:59,090 --> 00:28:03,110
the basic invocation principles these

627
00:28:00,919 --> 00:28:05,539
other systems and operations issues are

628
00:28:03,110 --> 00:28:06,949
on our are on our to-do list but not all

629
00:28:05,539 --> 00:28:07,940
of them have obviously been solved at

630
00:28:06,950 --> 00:28:09,980
that stage but we have running

631
00:28:07,940 --> 00:28:14,240
prototypes for this as well again on an

632
00:28:09,980 --> 00:28:15,799
ESP 32 so putting this briefly into the

633
00:28:14,240 --> 00:28:17,090
context of the working group and I'm

634
00:28:15,799 --> 00:28:19,429
going to skip through most of the

635
00:28:17,090 --> 00:28:22,250
remaining slides in the interest of time

636
00:28:19,429 --> 00:28:24,320
but I want to this is also something one

637
00:28:22,250 --> 00:28:28,210
can easily read up in the end originally

638
00:28:24,320 --> 00:28:28,210
I had five minutes more so forgive me

639
00:28:28,960 --> 00:28:34,190
our take is that we have roughly five

640
00:28:31,490 --> 00:28:36,080
steps when it comes to a network compute

641
00:28:34,190 --> 00:28:37,700
operations what we need to define what

642
00:28:36,080 --> 00:28:39,500
kind of functions we have what kind of

643
00:28:37,700 --> 00:28:41,899
properties there so that they have so

644
00:28:39,500 --> 00:28:44,269
that they become identifiable next we

645
00:28:41,899 --> 00:28:46,189
need to be able to discover those beers

646
00:28:44,269 --> 00:28:47,960
in a local environment as we showed or

647
00:28:46,190 --> 00:28:50,840
in a network environment using any

648
00:28:47,960 --> 00:28:52,429
casting or whatever so this is this is

649
00:28:50,840 --> 00:28:55,340
where we have our little instance

650
00:28:52,429 --> 00:28:58,129
of functions called G and next to next

651
00:28:55,340 --> 00:29:00,080
to discovery and then an Orchestrator a

652
00:28:58,129 --> 00:29:01,279
client or whoever I would be responsible

653
00:29:00,080 --> 00:29:04,428
for picking which of these functions

654
00:29:01,279 --> 00:29:05,840
should be executing a particular program

655
00:29:04,429 --> 00:29:09,230
or a particular workflow at a given

656
00:29:05,840 --> 00:29:11,178
point in time and then if we have

657
00:29:09,230 --> 00:29:13,789
multiple of these they need to be

658
00:29:11,179 --> 00:29:15,679
orchestrated and linked up and then in

659
00:29:13,789 --> 00:29:19,940
the end we have an execution step in

660
00:29:15,679 --> 00:29:21,470
which those different code needs to be

661
00:29:19,940 --> 00:29:27,649
transferred execution flow needs to be

662
00:29:21,470 --> 00:29:30,200
transferred and so on I have individual

663
00:29:27,649 --> 00:29:32,658
ones for each of these different steps

664
00:29:30,200 --> 00:29:34,730
for the two examples we will probably

665
00:29:32,659 --> 00:29:37,240
fold some of this into our architecture

666
00:29:34,730 --> 00:29:41,480
draft or something similar in the end

667
00:29:37,240 --> 00:29:43,220
let me conclude this um short

668
00:29:41,480 --> 00:29:45,230
presentation with so this was an example

669
00:29:43,220 --> 00:29:48,409
for in network computing for broadcast

670
00:29:45,230 --> 00:29:50,269
networks of course discovery and things

671
00:29:48,409 --> 00:29:52,759
like this can also be extended to go

672
00:29:50,269 --> 00:29:55,369
beyond simple broadcast effects this

673
00:29:52,759 --> 00:29:57,320
gives a gave us a good starting point to

674
00:29:55,369 --> 00:29:59,389
build stuff that works purely locally

675
00:29:57,320 --> 00:30:01,129
but that is of course not restricted to

676
00:29:59,389 --> 00:30:03,019
this there are two interesting metal

677
00:30:01,129 --> 00:30:05,809
aspects I want to rise one interesting

678
00:30:03,019 --> 00:30:08,389
bit that's worthwhile looking at in

679
00:30:05,809 --> 00:30:10,009
future workers in and especially in the

680
00:30:08,389 --> 00:30:11,479
second case but also in the first one we

681
00:30:10,009 --> 00:30:12,830
pushed control explicitly into the

682
00:30:11,480 --> 00:30:14,809
network and then the user can go away

683
00:30:12,830 --> 00:30:17,119
and at the let work autonomously act as

684
00:30:14,809 --> 00:30:19,490
a computer and do what it is supposed

685
00:30:17,119 --> 00:30:22,459
what we would want it to do and which

686
00:30:19,490 --> 00:30:24,499
probably comes closer to running a demon

687
00:30:22,460 --> 00:30:26,360
process or some some background thing in

688
00:30:24,499 --> 00:30:29,389
the end that of course brings all kinds

689
00:30:26,360 --> 00:30:30,709
of operations and management issues that

690
00:30:29,389 --> 00:30:33,439
would need to be considered in the

691
00:30:30,710 --> 00:30:36,710
future and then we have a similar

692
00:30:33,440 --> 00:30:38,600
question that the IOT folks when it

693
00:30:36,710 --> 00:30:40,909
comes to data semantics have been

694
00:30:38,600 --> 00:30:43,459
discussing at length that we also need

695
00:30:40,909 --> 00:30:47,029
to figure out how to describe semantics

696
00:30:43,460 --> 00:30:50,299
of api's with signatures and and the

697
00:30:47,029 --> 00:30:52,399
like in order to allow this

698
00:30:50,299 --> 00:30:56,299
composability across different functions

699
00:30:52,399 --> 00:30:58,928
inside the network and that's it we have

700
00:30:56,299 --> 00:30:58,929
time for one question

701
00:30:59,409 --> 00:31:05,299
lucky me Eric not Marc so any thoughts

702
00:31:02,240 --> 00:31:06,169
on how you name the different objects of

703
00:31:05,299 --> 00:31:08,809
the inputs to your

704
00:31:06,169 --> 00:31:11,149
triggers only your actions right others

705
00:31:08,809 --> 00:31:14,359
name related to the environment relative

706
00:31:11,149 --> 00:31:16,639
to particular device and in in in these

707
00:31:14,359 --> 00:31:20,779
cases the moment we distribute our own

708
00:31:16,639 --> 00:31:21,350
scripts you don't you get an implicit

709
00:31:20,779 --> 00:31:23,480
name

710
00:31:21,350 --> 00:31:25,070
I mean roping something on on a given

711
00:31:23,480 --> 00:31:27,289
note so this is their this capability

712
00:31:25,070 --> 00:31:28,700
driven I'm not naming functions I'm

713
00:31:27,289 --> 00:31:30,230
looking for device so this is

714
00:31:28,700 --> 00:31:31,489
essentially attribute based addressing

715
00:31:30,230 --> 00:31:34,129
that we are doing here so you're asking

716
00:31:31,489 --> 00:31:35,929
about the temperature the temperature is

717
00:31:34,129 --> 00:31:37,580
something that you're looking at not the

718
00:31:35,929 --> 00:31:41,659
temperature in that device or the

719
00:31:37,580 --> 00:31:47,210
temperature in Singapore right given

720
00:31:41,659 --> 00:31:49,519
that we have e in the in the specific

721
00:31:47,210 --> 00:31:51,769
temperature in the specific trigger

722
00:31:49,519 --> 00:31:53,749
action case we have a class of

723
00:31:51,769 --> 00:31:56,629
temperature drivers so they have a

724
00:31:53,749 --> 00:32:00,710
common identifier they all provide the

725
00:31:56,629 --> 00:32:03,139
same kind of data object as an output so

726
00:32:00,710 --> 00:32:05,330
you would essentially find which devices

727
00:32:03,139 --> 00:32:08,209
offer this kind of a sense this this

728
00:32:05,330 --> 00:32:10,158
kind of a feature by comparing this this

729
00:32:08,210 --> 00:32:12,710
is right now in this specific case it's

730
00:32:10,159 --> 00:32:16,279
numeric IDs simply because we need to be

731
00:32:12,710 --> 00:32:18,080
concise and our ble beacons don't give

732
00:32:16,279 --> 00:32:19,700
enough space for having longer names in

733
00:32:18,080 --> 00:32:25,210
other cases you might want to do

734
00:32:19,700 --> 00:32:28,229
different things thank you very much

735
00:32:25,210 --> 00:32:28,229
[Music]

736
00:32:36,159 --> 00:32:54,739
next one is Alex good morning I'm

737
00:32:51,379 --> 00:32:56,649
Alessandra bossy and with Mary Jo we

738
00:32:54,739 --> 00:32:59,480
started some work for vertical

739
00:32:56,649 --> 00:33:01,820
agriculture and agriculture food at zero

740
00:32:59,480 --> 00:33:03,889
and basically how to develop reference

741
00:33:01,820 --> 00:33:06,158
architecture I mean for forties field

742
00:33:03,889 --> 00:33:09,109
now first of all I mean I've been

743
00:33:06,159 --> 00:33:11,659
working on IOT for twelve years since

744
00:33:09,109 --> 00:33:14,389
2007 and one of the main problems I

745
00:33:11,659 --> 00:33:17,210
always found is a to agree on what IOT

746
00:33:14,389 --> 00:33:19,189
is quite sure even in this room I mean

747
00:33:17,210 --> 00:33:19,940
if everybody sells down writing their

748
00:33:19,190 --> 00:33:22,009
definition of

749
00:33:19,940 --> 00:33:24,970
forty I mean we probably be some a

750
00:33:22,009 --> 00:33:29,419
strong disagreement but not alignment

751
00:33:24,970 --> 00:33:31,570
IOT is related to real objects so there

752
00:33:29,419 --> 00:33:34,000
is a reality there is something physical

753
00:33:31,570 --> 00:33:36,620
which in the case is a physical entity

754
00:33:34,000 --> 00:33:38,450
tears physical entity must have a

755
00:33:36,620 --> 00:33:42,229
digital twin let's call it digital

756
00:33:38,450 --> 00:33:44,059
entity virtual entity whatever how to go

757
00:33:42,230 --> 00:33:46,009
from the physical to the digital world I

758
00:33:44,059 --> 00:33:48,019
mean there must be some device and his

759
00:33:46,009 --> 00:33:50,659
device I mean must be had some sensors

760
00:33:48,019 --> 00:33:52,309
and some actuator I mean that meant some

761
00:33:50,659 --> 00:33:55,340
computation I mean there is able to

762
00:33:52,309 --> 00:33:57,440
extract some of the properties of the

763
00:33:55,340 --> 00:34:01,490
physical object towards the digital twin

764
00:33:57,440 --> 00:34:04,100
and the human user or whichever kind of

765
00:34:01,490 --> 00:34:06,740
user even a digital one I mean basically

766
00:34:04,100 --> 00:34:08,540
what experiences is augmented entity

767
00:34:06,740 --> 00:34:11,418
which is basically made by the real and

768
00:34:08,540 --> 00:34:12,980
the virtual one through services which

769
00:34:11,418 --> 00:34:14,779
are actually sitting on resources

770
00:34:12,980 --> 00:34:17,449
resource or both hardware and software

771
00:34:14,780 --> 00:34:20,149
and this resource server may can be on

772
00:34:17,449 --> 00:34:23,839
device itself can be in the cloud can be

773
00:34:20,149 --> 00:34:25,969
anywhere now I don't want to convert to

774
00:34:23,839 --> 00:34:32,149
my religion of IOT what I'm telling you

775
00:34:25,969 --> 00:34:33,770
is that what I'm starting from and for

776
00:34:32,149 --> 00:34:36,609
written reference architectures should

777
00:34:33,770 --> 00:34:39,230
be easier but just just to make sure

778
00:34:36,609 --> 00:34:41,000
reference architecture is basically a

779
00:34:39,230 --> 00:34:42,800
reference for building compliant IOT

780
00:34:41,000 --> 00:34:45,168
architecture is a blueprint basically

781
00:34:42,800 --> 00:34:46,579
and in in a reference architecture there

782
00:34:45,168 --> 00:34:49,250
are views and perspectives I mean

783
00:34:46,579 --> 00:34:51,669
performance security scalability and so

784
00:34:49,250 --> 00:34:54,859
on and so forth then all these different

785
00:34:51,668 --> 00:34:56,960
views I mean needs to basically be put

786
00:34:54,859 --> 00:34:59,119
together in order to find something

787
00:34:56,960 --> 00:35:02,800
which is basically the local optimum I

788
00:34:59,119 --> 00:35:05,810
mean for for being a real architecture

789
00:35:02,800 --> 00:35:07,760
in this case fusion and the perspectives

790
00:35:05,810 --> 00:35:09,470
are used by the definition and the

791
00:35:07,760 --> 00:35:11,060
standard definition of them and let's

792
00:35:09,470 --> 00:35:12,950
not go further because otherwise I mean

793
00:35:11,060 --> 00:35:15,339
ten minutes will be spent just on on

794
00:35:12,950 --> 00:35:17,990
definitions

795
00:35:15,339 --> 00:35:21,109
why we were looking at agriculture in

796
00:35:17,990 --> 00:35:24,649
the first place agriculture is I

797
00:35:21,109 --> 00:35:26,299
wouldn't say a very laid down domain but

798
00:35:24,650 --> 00:35:28,609
for sure is not the most modern one and

799
00:35:26,300 --> 00:35:30,920
that is huge amount of improvement I

800
00:35:28,609 --> 00:35:32,029
mean they can be done when you really go

801
00:35:30,920 --> 00:35:33,380
in the field I mean and you're working

802
00:35:32,030 --> 00:35:34,940
with people

803
00:35:33,380 --> 00:35:37,369
there I mean you can see sometimes I

804
00:35:34,940 --> 00:35:40,400
mean processes and even there the

805
00:35:37,369 --> 00:35:42,589
computing I mean is really belonging to

806
00:35:40,400 --> 00:35:44,930
the last century necessity enthusiast

807
00:35:42,589 --> 00:35:46,788
you know in Europe in Canada in the u.s.

808
00:35:44,930 --> 00:35:49,069
I mean so not to mention other places in

809
00:35:46,789 --> 00:35:54,559
the warrior at least less the less

810
00:35:49,069 --> 00:35:56,058
developed than in Europe of course I

811
00:35:54,559 --> 00:35:57,920
mean there is lots of advantages I mean

812
00:35:56,059 --> 00:36:01,789
in terms of productions in terms of

813
00:35:57,920 --> 00:36:04,490
management of partners in terms of

814
00:36:01,789 --> 00:36:06,579
sustainability also with respect of

815
00:36:04,490 --> 00:36:10,788
using a folder using of pesticides

816
00:36:06,579 --> 00:36:12,920
chemicals product I mean and to produce

817
00:36:10,789 --> 00:36:17,029
fresh products all year round which are

818
00:36:12,920 --> 00:36:23,240
more or less in good Ameena for

819
00:36:17,029 --> 00:36:26,900
following the the seasons the case study

820
00:36:23,240 --> 00:36:29,029
I mean that we use with a company from

821
00:36:26,900 --> 00:36:30,440
overall cause no farming and the use

822
00:36:29,029 --> 00:36:32,390
scale is basically a strawberry

823
00:36:30,440 --> 00:36:34,279
production so basically we try to

824
00:36:32,390 --> 00:36:40,250
develop a Minty's reference architecture

825
00:36:34,279 --> 00:36:43,430
for their specific specific needs now a

826
00:36:40,250 --> 00:36:44,960
UT in general has nine challenges again

827
00:36:43,430 --> 00:36:46,940
there can be more than Belleza can be

828
00:36:44,960 --> 00:36:48,769
discussed but this is where do I start

829
00:36:46,940 --> 00:36:50,630
from these nine challenge of a

830
00:36:48,769 --> 00:36:53,930
miniaturization which is more more than

831
00:36:50,630 --> 00:36:55,579
more a harsh environments devices are

832
00:36:53,930 --> 00:36:57,589
out there so I mean you know you cannot

833
00:36:55,579 --> 00:36:59,809
control them I mean with with humidity

834
00:36:57,589 --> 00:37:02,210
with temperature with chemicals and so

835
00:36:59,809 --> 00:37:03,109
on communication I don't have to explain

836
00:37:02,210 --> 00:37:05,500
here what it is

837
00:37:03,109 --> 00:37:08,240
cells are properties which is basically

838
00:37:05,500 --> 00:37:10,099
autonomic properties or or artificial

839
00:37:08,240 --> 00:37:13,129
intelligence and so on

840
00:37:10,099 --> 00:37:15,640
identification again is something I'll

841
00:37:13,130 --> 00:37:18,200
have to explain really here security

842
00:37:15,640 --> 00:37:20,118
again packaging which is basically how

843
00:37:18,200 --> 00:37:22,069
to put devices into non-standard

844
00:37:20,119 --> 00:37:25,269
material that can be food I mean there

845
00:37:22,069 --> 00:37:28,038
can be a metal they can be whatever

846
00:37:25,269 --> 00:37:29,899
energy considerably most of these

847
00:37:28,039 --> 00:37:33,109
devices I mean our battery base or how

848
00:37:29,900 --> 00:37:37,309
do you develop are almost zero entropy

849
00:37:33,109 --> 00:37:38,720
systems and quality because of course I

850
00:37:37,309 --> 00:37:40,430
mean you don't want devices are giving

851
00:37:38,720 --> 00:37:43,848
like which have a result I mean all the

852
00:37:40,430 --> 00:37:46,370
time and you need to have some sort of

853
00:37:43,849 --> 00:37:48,920
security I mean that the

854
00:37:46,370 --> 00:37:54,890
device Amin is projecting something good

855
00:37:48,920 --> 00:37:56,510
now related to agriculture Amin we can

856
00:37:54,890 --> 00:37:57,770
discuss about this number is more or

857
00:37:56,510 --> 00:37:59,780
less but clearly I'm in harsh

858
00:37:57,770 --> 00:38:01,970
environments is very important because

859
00:37:59,780 --> 00:38:03,350
if you put sensors I mean in in a field

860
00:38:01,970 --> 00:38:06,169
I mean you don't really know I mean what

861
00:38:03,350 --> 00:38:08,140
what's gonna happen their communication

862
00:38:06,170 --> 00:38:10,760
self properties are all important I mean

863
00:38:08,140 --> 00:38:13,270
as well as packaging because for sure is

864
00:38:10,760 --> 00:38:16,670
a non-standard place where to put a

865
00:38:13,270 --> 00:38:19,070
computational device other things are

866
00:38:16,670 --> 00:38:20,240
less important like miniaturization you

867
00:38:19,070 --> 00:38:21,350
know if you ever feel the mean is not

868
00:38:20,240 --> 00:38:25,790
important if you're talking about

869
00:38:21,350 --> 00:38:27,920
millimeters or nanometers and also

870
00:38:25,790 --> 00:38:30,470
related to energy I mean and and

871
00:38:27,920 --> 00:38:34,180
identification I mean to this list of a

872
00:38:30,470 --> 00:38:34,180
problem I mean related to all the fields

873
00:38:40,450 --> 00:38:47,299
very sorry so centralized versus edge I

874
00:38:44,660 --> 00:38:49,279
mean clearly you know agricultural field

875
00:38:47,300 --> 00:38:52,070
I mean we need some sort of edge

876
00:38:49,280 --> 00:38:55,250
architecture and if you need a direction

877
00:38:52,070 --> 00:38:57,890
I mean we need to have computation at

878
00:38:55,250 --> 00:39:00,350
the edge or computation like within the

879
00:38:57,890 --> 00:39:01,970
network now for doing that we need some

880
00:39:00,350 --> 00:39:04,520
specific hardware which is needs to be

881
00:39:01,970 --> 00:39:07,370
programmable instead of all this stuff

882
00:39:04,520 --> 00:39:10,040
you read there so data filtering content

883
00:39:07,370 --> 00:39:12,230
based routing we can use p4 languages

884
00:39:10,040 --> 00:39:14,360
and the hackathon and you know they

885
00:39:12,230 --> 00:39:18,140
should do at least some data analysis

886
00:39:14,360 --> 00:39:19,820
and some messages now if you put

887
00:39:18,140 --> 00:39:21,350
basically intelligence in the network so

888
00:39:19,820 --> 00:39:23,810
we're talking about network enabled

889
00:39:21,350 --> 00:39:25,250
artificial intelligence that's why I was

890
00:39:23,810 --> 00:39:28,910
a clear division intelligence if you

891
00:39:25,250 --> 00:39:30,410
consider it as calculation of

892
00:39:28,910 --> 00:39:31,910
probability of something happening or

893
00:39:30,410 --> 00:39:34,629
not happening according to parameters

894
00:39:31,910 --> 00:39:36,680
and coming in from from an input

895
00:39:34,630 --> 00:39:38,450
basically that's what agriculture needs

896
00:39:36,680 --> 00:39:40,720
right you have a bunch of parameters and

897
00:39:38,450 --> 00:39:43,460
you have to predict how things are going

898
00:39:40,720 --> 00:39:46,029
what happened here across something

899
00:39:43,460 --> 00:39:48,530
wrong okay now this is the architecture

900
00:39:46,030 --> 00:39:50,090
which basically is divided in four

901
00:39:48,530 --> 00:39:52,550
different layers one is market driven

902
00:39:50,090 --> 00:39:54,800
decision layer basically deciding how to

903
00:39:52,550 --> 00:39:57,440
push or to slow down I mean the

904
00:39:54,800 --> 00:39:58,740
production of some products in this case

905
00:39:57,440 --> 00:40:01,020
strawberries at

906
00:39:58,740 --> 00:40:04,319
I mean and we will see a little bit

907
00:40:01,020 --> 00:40:06,210
later on next slide and this is

908
00:40:04,320 --> 00:40:07,400
basically the core work for forties

909
00:40:06,210 --> 00:40:09,630
working group because that's where

910
00:40:07,400 --> 00:40:11,610
filtering and processing is going

911
00:40:09,630 --> 00:40:13,650
through in the network production layer

912
00:40:11,610 --> 00:40:15,360
when basically it's monitoring what is

913
00:40:13,650 --> 00:40:17,280
happening in the field and then local

914
00:40:15,360 --> 00:40:19,650
decision layer because some of the

915
00:40:17,280 --> 00:40:21,390
devices I mean according to visual

916
00:40:19,650 --> 00:40:23,100
analysis on and so forth

917
00:40:21,390 --> 00:40:25,490
are able to take some decisions I mean

918
00:40:23,100 --> 00:40:28,589
with respect to what is need to be done

919
00:40:25,490 --> 00:40:31,109
now , distributed its layer very quickly

920
00:40:28,590 --> 00:40:33,450
I mean this is the part I mean which is

921
00:40:31,110 --> 00:40:35,369
more relevant to this working group and

922
00:40:33,450 --> 00:40:37,080
is basically the power one detail

923
00:40:35,369 --> 00:40:39,510
metadata are actually filtered I mean in

924
00:40:37,080 --> 00:40:40,860
the network according to their

925
00:40:39,510 --> 00:40:42,840
importance according if there are errors

926
00:40:40,860 --> 00:40:45,210
a cordials of things which which are not

927
00:40:42,840 --> 00:40:47,160
basically fulfilling I mean what what is

928
00:40:45,210 --> 00:40:48,210
expected so you can have local nodes you

929
00:40:47,160 --> 00:40:50,220
can have remote nodes which are

930
00:40:48,210 --> 00:40:53,040
connected either a wired or wireless way

931
00:40:50,220 --> 00:40:56,129
that is really not important but it is

932
00:40:53,040 --> 00:40:58,230
filtering a happened I mean at network

933
00:40:56,130 --> 00:40:59,730
level and then I mean issues I mean can

934
00:40:58,230 --> 00:41:00,960
be brought up I mean to the cloud I mean

935
00:40:59,730 --> 00:41:03,420
it's are important or they can be

936
00:41:00,960 --> 00:41:05,520
resolved I mean on on the spot if it's

937
00:41:03,420 --> 00:41:06,869
really something a minor like a little

938
00:41:05,520 --> 00:41:11,040
bit more water or a little bit more

939
00:41:06,869 --> 00:41:12,750
light next steps basically we plan to

940
00:41:11,040 --> 00:41:17,550
formalize these in a draft I mean before

941
00:41:12,750 --> 00:41:20,010
Vancouver and thank you for rushing it

942
00:41:17,550 --> 00:41:24,990
there we have time for one question if

943
00:41:20,010 --> 00:41:26,730
somebody has one question and for I know

944
00:41:24,990 --> 00:41:29,879
that for the people who are doing

945
00:41:26,730 --> 00:41:32,490
Claussen oh there's a question is this

946
00:41:29,880 --> 00:41:35,990
yes Jeff has a question oh no I was just

947
00:41:32,490 --> 00:41:35,990
getting ready for my presentation sorry

948
00:41:36,560 --> 00:41:44,310
the two we lost you

949
00:41:40,980 --> 00:41:47,010
oh I said I was just coming on to get

950
00:41:44,310 --> 00:41:50,130
ready for my presentation okay great

951
00:41:47,010 --> 00:41:52,320
thank you so if there's no more question

952
00:41:50,130 --> 00:41:57,240
yes we are going to go to Jeff's

953
00:41:52,320 --> 00:42:00,359
presentation do you advance the slides

954
00:41:57,240 --> 00:42:03,750
for me or do I have a button here that

955
00:42:00,359 --> 00:42:05,069
will advance him yes I have your slide

956
00:42:03,750 --> 00:42:08,960
so I'm going to just I'm just going to

957
00:42:05,070 --> 00:42:11,240
put them now okay hold on

958
00:42:08,960 --> 00:42:13,550
I have problems with my timer so my

959
00:42:11,240 --> 00:42:16,879
timer Steve keeps playing Inspector

960
00:42:13,550 --> 00:42:18,109
Morse team and it shouldn't be okay

961
00:42:16,880 --> 00:42:20,180
while you're getting those up I'll

962
00:42:18,109 --> 00:42:23,089
introduce myself I'm Jeff Hill fern

963
00:42:20,180 --> 00:42:26,240
I'm with Nova flow we talked to you last

964
00:42:23,089 --> 00:42:30,080
year about our match action pipeline we

965
00:42:26,240 --> 00:42:32,689
produce a very high performance you know

966
00:42:30,080 --> 00:42:37,040
six terabit switches that are fully

967
00:42:32,690 --> 00:42:39,040
programmable p4 before runtime so this

968
00:42:37,040 --> 00:42:43,759
year we're going to talk about

969
00:42:39,040 --> 00:42:45,680
implementing those I run the application

970
00:42:43,760 --> 00:42:48,109
group where we take the technology and

971
00:42:45,680 --> 00:42:50,419
move it into solutions so this is kind

972
00:42:48,109 --> 00:42:52,040
of an Applied Research Group we always

973
00:42:50,420 --> 00:42:53,359
have a client in the middle and what I'm

974
00:42:52,040 --> 00:42:55,869
going to talk about is one of those

975
00:42:53,359 --> 00:42:58,160
projects that we just did with a major

976
00:42:55,869 --> 00:43:02,030
service provider where we brought

977
00:42:58,160 --> 00:43:05,859
telemetry in so am i capable of

978
00:43:02,030 --> 00:43:05,859
advancing the slides or do I ask you

979
00:43:07,240 --> 00:43:13,790
okay yeah next next slide so they gave

980
00:43:12,560 --> 00:43:16,460
you a real quick overview we'll go

981
00:43:13,790 --> 00:43:18,170
through these first slides very fast one

982
00:43:16,460 --> 00:43:21,740
we talked about a new use case it's

983
00:43:18,170 --> 00:43:26,630
going to be with int telemetry out there

984
00:43:21,740 --> 00:43:30,229
this is a very huge deal in the in the

985
00:43:26,630 --> 00:43:32,150
programmable pipeline world where each

986
00:43:30,230 --> 00:43:35,710
packet starts to carry the metadata

987
00:43:32,150 --> 00:43:39,500
about what it's doing and provides

988
00:43:35,710 --> 00:43:40,940
completely new opportunities for how you

989
00:43:39,500 --> 00:43:43,150
know intelligence that you gather in the

990
00:43:40,940 --> 00:43:45,530
network how you run the network you know

991
00:43:43,150 --> 00:43:49,330
compute you can do in the network in our

992
00:43:45,530 --> 00:43:52,160
case we're going to go against a

993
00:43:49,330 --> 00:43:53,630
requirement of how do we how do we

994
00:43:52,160 --> 00:43:55,759
figure out a latency which is kind of

995
00:43:53,630 --> 00:43:57,440
just the very basic thing but in this

996
00:43:55,760 --> 00:43:59,359
case you're going to ask how do we do it

997
00:43:57,440 --> 00:44:01,220
against passive tools you know how do we

998
00:43:59,359 --> 00:44:04,098
do it against things that aren't int

999
00:44:01,220 --> 00:44:06,109
capable out there I'm gonna introduce

1000
00:44:04,099 --> 00:44:08,140
the environment we had we're going to

1001
00:44:06,109 --> 00:44:11,150
talk about the tyranny of int date data

1002
00:44:08,140 --> 00:44:12,410
it's not as great as it sounds it comes

1003
00:44:11,150 --> 00:44:15,920
with a high price we'll talk about that

1004
00:44:12,410 --> 00:44:20,480
and then some strategy some actual ways

1005
00:44:15,920 --> 00:44:22,200
to deal with that so next slide so

1006
00:44:20,480 --> 00:44:24,660
whenever whenever you

1007
00:44:22,200 --> 00:44:25,740
about telemetry you're going to get a

1008
00:44:24,660 --> 00:44:28,290
slide like this you're going to see

1009
00:44:25,740 --> 00:44:30,419
pictures like this which is packages are

1010
00:44:28,290 --> 00:44:32,460
moving through the network and every hop

1011
00:44:30,420 --> 00:44:34,470
they get data pushed into them that

1012
00:44:32,460 --> 00:44:36,810
talks about the telemetry in there and

1013
00:44:34,470 --> 00:44:38,310
at the end the telemetry data gets

1014
00:44:36,810 --> 00:44:40,589
popped off and sent off to an engine

1015
00:44:38,310 --> 00:44:41,790
looks great but this is a forklift

1016
00:44:40,589 --> 00:44:43,799
upgrade

1017
00:44:41,790 --> 00:44:46,109
the carriers can't do this you know

1018
00:44:43,800 --> 00:44:47,970
they've got hundreds of millions of

1019
00:44:46,109 --> 00:44:49,259
dollars billions of dollars of

1020
00:44:47,970 --> 00:44:51,390
infrastructure out there they just can't

1021
00:44:49,260 --> 00:44:54,900
change it all at one time so the

1022
00:44:51,390 --> 00:44:57,480
question is how do we get telemetry you

1023
00:44:54,900 --> 00:45:00,200
know in in kind of a incremental

1024
00:44:57,480 --> 00:45:02,940
approach next slide please

1025
00:45:00,200 --> 00:45:06,689
so another another really quick way of

1026
00:45:02,940 --> 00:45:10,349
looking at this just to bring anybody in

1027
00:45:06,690 --> 00:45:11,820
that hasn't worked with it in int as a

1028
00:45:10,349 --> 00:45:13,859
packet moves through you get a new

1029
00:45:11,820 --> 00:45:15,329
header and in this case it's talking

1030
00:45:13,859 --> 00:45:18,240
about going through switch one switch to

1031
00:45:15,329 --> 00:45:20,760
switch three and each one of those data

1032
00:45:18,240 --> 00:45:21,899
gets pushed into that head or latency is

1033
00:45:20,760 --> 00:45:23,640
one of the things you can get but you

1034
00:45:21,900 --> 00:45:27,869
can pull anything off the devices that

1035
00:45:23,640 --> 00:45:30,509
can work on this the interesting thing

1036
00:45:27,869 --> 00:45:33,869
here is that every participant is a

1037
00:45:30,510 --> 00:45:36,660
capable int device so it has to be

1038
00:45:33,869 --> 00:45:39,380
up-to-date on the stuff next slide so

1039
00:45:36,660 --> 00:45:42,060
art our question is what could we do to

1040
00:45:39,380 --> 00:45:44,010
deal with things that aren't capable you

1041
00:45:42,060 --> 00:45:47,609
know now we have a passive device that

1042
00:45:44,010 --> 00:45:49,859
is an INT ready big problem out there in

1043
00:45:47,609 --> 00:45:53,220
telcos they have billions of dollars

1044
00:45:49,859 --> 00:45:54,540
over in these security tools firewalls

1045
00:45:53,220 --> 00:45:55,859
are the ones you'd know the most but

1046
00:45:54,540 --> 00:45:58,079
there's all kinds of security tools out

1047
00:45:55,859 --> 00:46:00,390
there so you know if you if you have a

1048
00:45:58,079 --> 00:46:01,950
terabit date of data coming in you

1049
00:46:00,390 --> 00:46:04,020
probably have half a million dollars

1050
00:46:01,950 --> 00:46:05,220
where the security devices out there so

1051
00:46:04,020 --> 00:46:07,230
very simple question is what's the

1052
00:46:05,220 --> 00:46:10,109
latency through these how how well are

1053
00:46:07,230 --> 00:46:13,079
these things operating nobody knows yeah

1054
00:46:10,109 --> 00:46:16,500
it's it's tough so what we've done is

1055
00:46:13,079 --> 00:46:18,470
said oK we've got a new technology but

1056
00:46:16,500 --> 00:46:21,150
you know in int but we have an old

1057
00:46:18,470 --> 00:46:24,060
technology in these firewalls out there

1058
00:46:21,150 --> 00:46:25,950
so let's put a wrapper around it at the

1059
00:46:24,060 --> 00:46:28,109
you know as the stuff comes as the data

1060
00:46:25,950 --> 00:46:29,460
comes into an overflow switch we created

1061
00:46:28,109 --> 00:46:31,348
a little private domain where I

1062
00:46:29,460 --> 00:46:33,270
load-balanced out to these firewalls and

1063
00:46:31,349 --> 00:46:35,790
then bring it back but as we're doing

1064
00:46:33,270 --> 00:46:39,030
this I'm going to add

1065
00:46:35,790 --> 00:46:40,380
I'm going to add the int data the

1066
00:46:39,030 --> 00:46:41,940
telemetry data but we're going to do it

1067
00:46:40,380 --> 00:46:45,030
in two switch we're going to actually

1068
00:46:41,940 --> 00:46:47,670
capture the latency of these tools out

1069
00:46:45,030 --> 00:46:50,280
there but they'll never participate in

1070
00:46:47,670 --> 00:46:53,960
that and I think this is a the general

1071
00:46:50,280 --> 00:46:58,549
case of this is how can you start using

1072
00:46:53,960 --> 00:47:02,880
the telemetry and think of surrounding

1073
00:46:58,549 --> 00:47:06,180
now devices that are dumb that can't add

1074
00:47:02,880 --> 00:47:08,520
telemetry themselves but the switches on

1075
00:47:06,180 --> 00:47:12,379
either side or the PCs on your side that

1076
00:47:08,520 --> 00:47:15,660
can pack things into them so next slide

1077
00:47:12,380 --> 00:47:17,309
so in our case what we're doing here

1078
00:47:15,660 --> 00:47:19,920
some detail you can look at it out there

1079
00:47:17,309 --> 00:47:22,319
but basically as the packet comes in to

1080
00:47:19,920 --> 00:47:24,869
the switch the the bottom center is a

1081
00:47:22,319 --> 00:47:27,690
switch down there where it says packet

1082
00:47:24,869 --> 00:47:30,480
broker service we put a tag on and wait

1083
00:47:27,690 --> 00:47:33,569
and I put a timestamp on then I send it

1084
00:47:30,480 --> 00:47:35,849
out to the tool farm and all all that

1085
00:47:33,569 --> 00:47:39,210
for the net or paloalto have to do is

1086
00:47:35,849 --> 00:47:41,910
not croak because it has a new tag it

1087
00:47:39,210 --> 00:47:44,609
just has to be able to to process the

1088
00:47:41,910 --> 00:47:46,859
packet to its normal stuff and have you

1089
00:47:44,609 --> 00:47:49,799
know have that hit or pass through it as

1090
00:47:46,859 --> 00:47:53,940
it comes back I timestamp it again and

1091
00:47:49,799 --> 00:47:56,970
then we do the standard you know int

1092
00:47:53,940 --> 00:48:00,630
stuff I pop it off send it out to an

1093
00:47:56,970 --> 00:48:06,000
analytics light Lake and the packet

1094
00:48:00,630 --> 00:48:08,700
moves on as as normal now this is I've

1095
00:48:06,000 --> 00:48:10,650
gathered the data out there I can tell

1096
00:48:08,700 --> 00:48:13,640
you exactly how much latency that

1097
00:48:10,650 --> 00:48:17,549
firewall has caused and any time of day

1098
00:48:13,640 --> 00:48:20,609
but the tool has it hasn't had to adapt

1099
00:48:17,549 --> 00:48:23,430
at all so again I think it's a very very

1100
00:48:20,609 --> 00:48:27,630
good general principle so let's look at

1101
00:48:23,430 --> 00:48:29,399
what Jeff to me to meant okay so let's

1102
00:48:27,630 --> 00:48:33,540
look at the downside real quickly next

1103
00:48:29,400 --> 00:48:36,240
next slide you know the interesting

1104
00:48:33,540 --> 00:48:38,069
thing here is the data comes so quick

1105
00:48:36,240 --> 00:48:40,109
you know we're talking about terabit

1106
00:48:38,069 --> 00:48:42,480
solutions we get millions and millions

1107
00:48:40,109 --> 00:48:47,848
packets so you have to reduce it quickly

1108
00:48:42,480 --> 00:48:49,500
next slide on that and what it says on

1109
00:48:47,849 --> 00:48:51,240
the on the left hand side

1110
00:48:49,500 --> 00:48:52,980
is there's actually you can start to

1111
00:48:51,240 --> 00:48:56,700
come up with an algorithm where you

1112
00:48:52,980 --> 00:49:00,510
weigh the cost of gathering stuff from a

1113
00:48:56,700 --> 00:49:02,850
packet and versus the value of that and

1114
00:49:00,510 --> 00:49:04,530
you balance those out so that you know

1115
00:49:02,850 --> 00:49:06,870
you don't gather every observations you

1116
00:49:04,530 --> 00:49:08,670
don't put billions of records in your

1117
00:49:06,870 --> 00:49:11,040
database you stretch them out and you

1118
00:49:08,670 --> 00:49:17,090
and you gather the value across that and

1119
00:49:11,040 --> 00:49:20,070
that allows you to now you do very

1120
00:49:17,090 --> 00:49:23,070
profitable are very you know impactful

1121
00:49:20,070 --> 00:49:26,760
things but you know keep the cost of

1122
00:49:23,070 --> 00:49:29,100
that down it's a last slide and here's

1123
00:49:26,760 --> 00:49:31,200
you know just real world stuff working

1124
00:49:29,100 --> 00:49:32,640
on there you know we have a have a tool

1125
00:49:31,200 --> 00:49:35,180
farm we're driving a terabyte of data

1126
00:49:32,640 --> 00:49:36,990
through here I have three different

1127
00:49:35,180 --> 00:49:39,390
environments one where we just did a

1128
00:49:36,990 --> 00:49:42,299
loopback to show there's no latency the

1129
00:49:39,390 --> 00:49:44,839
next one where we have a tool farm or we

1130
00:49:42,300 --> 00:49:47,280
have a tool that has a minimum set of

1131
00:49:44,840 --> 00:49:49,110
security filters going on it and then

1132
00:49:47,280 --> 00:49:52,530
one has a full and you can see the

1133
00:49:49,110 --> 00:49:55,050
latency pop up on that and none of that

1134
00:49:52,530 --> 00:49:56,670
data is being collected actually over on

1135
00:49:55,050 --> 00:50:00,660
the farm it's being collected in the

1136
00:49:56,670 --> 00:50:02,070
network and you know value-add so we

1137
00:50:00,660 --> 00:50:04,020
think it fits very well with you know

1138
00:50:02,070 --> 00:50:08,550
how do you put how do you add computer

1139
00:50:04,020 --> 00:50:12,630
to the network so sorry well when there

1140
00:50:08,550 --> 00:50:14,160
is so fast it's fine like I said next

1141
00:50:12,630 --> 00:50:17,190
time we're going to have more time we

1142
00:50:14,160 --> 00:50:21,029
have one time for one question Tom

1143
00:50:17,190 --> 00:50:23,220
Mizrahi so thanks for this talk I wanted

1144
00:50:21,030 --> 00:50:26,550
to ask regarding you mentioned time

1145
00:50:23,220 --> 00:50:28,890
stamps a few times and obviously you

1146
00:50:26,550 --> 00:50:30,870
need accurate timing here so usually the

1147
00:50:28,890 --> 00:50:33,569
timer or clock is going to be

1148
00:50:30,870 --> 00:50:35,370
implemented in hardware and on the other

1149
00:50:33,570 --> 00:50:39,690
hand we know that it's often the case

1150
00:50:35,370 --> 00:50:42,000
that in these protocols like IOM int

1151
00:50:39,690 --> 00:50:44,790
each of them uses a different time stamp

1152
00:50:42,000 --> 00:50:46,350
format so I wonder to what extent do you

1153
00:50:44,790 --> 00:50:48,990
think is it possible to have a

1154
00:50:46,350 --> 00:50:50,850
completely programmable data plane or

1155
00:50:48,990 --> 00:50:53,310
you want the time stamp formats to be

1156
00:50:50,850 --> 00:50:56,069
programmable but on the other hand you

1157
00:50:53,310 --> 00:50:57,960
want you want very accurate timing yeah

1158
00:50:56,070 --> 00:51:01,800
so a great great question thank you to

1159
00:50:57,960 --> 00:51:02,970
every question the in this case you have

1160
00:51:01,800 --> 00:51:06,569
to look at

1161
00:51:02,970 --> 00:51:10,049
the latency being added by the firewall

1162
00:51:06,569 --> 00:51:12,569
which is huge and so the difference

1163
00:51:10,050 --> 00:51:15,750
between a software timestamp you know

1164
00:51:12,569 --> 00:51:17,670
coming out of a standard switch we're

1165
00:51:15,750 --> 00:51:20,640
honest Ruffino switch and a hardware

1166
00:51:17,670 --> 00:51:22,740
timestamp coming out of 1588 those

1167
00:51:20,640 --> 00:51:24,299
values you know we're not looking at

1168
00:51:22,740 --> 00:51:26,729
that level of detail that we need here

1169
00:51:24,300 --> 00:51:28,530
so the soft you know the the software

1170
00:51:26,730 --> 00:51:31,740
timestamp coming right off the trophy no

1171
00:51:28,530 --> 00:51:34,170
is more than fine it is two or three

1172
00:51:31,740 --> 00:51:36,720
orders of magnitude finer you know

1173
00:51:34,170 --> 00:51:38,460
accuracy then then we need to measure

1174
00:51:36,720 --> 00:51:41,129
the latency you can have other

1175
00:51:38,460 --> 00:51:42,660
situations where you need so if you're

1176
00:51:41,130 --> 00:51:45,270
doing them if you're doing the time

1177
00:51:42,660 --> 00:51:48,299
stamping and broadcast you need that

1178
00:51:45,270 --> 00:51:50,190
1588 you're down to frame by frame you

1179
00:51:48,300 --> 00:51:53,339
know it's tough but in this application

1180
00:51:50,190 --> 00:51:55,290
the built in the hardware time you know

1181
00:51:53,339 --> 00:51:59,190
time stamp on the trophy no chip is more

1182
00:51:55,290 --> 00:52:01,829
than fine does that even squish yeah

1183
00:51:59,190 --> 00:52:04,230
thank you take that thank you very much

1184
00:52:01,829 --> 00:52:05,579
Jeff and again we're very happy that we

1185
00:52:04,230 --> 00:52:08,300
have you guys in this group because you

1186
00:52:05,579 --> 00:52:11,069
bring the the real world into the

1187
00:52:08,300 --> 00:52:20,420
discussion thank you so much oh you're

1188
00:52:11,069 --> 00:52:20,420
welcome to next is Michelle

1189
00:52:29,310 --> 00:52:34,920
and Michelle was actually was not

1190
00:52:33,360 --> 00:52:37,560
planned before Saturday which shows that

1191
00:52:34,920 --> 00:52:42,960
hackathons work because we essentially

1192
00:52:37,560 --> 00:52:44,970
connected at the hackathon okay good

1193
00:52:42,960 --> 00:52:47,220
morning everyone my name is Misha bonfim

1194
00:52:44,970 --> 00:52:50,100
I'm a plea Deacon did at federal

1195
00:52:47,220 --> 00:52:53,069
university of pernambuco and I'm here

1196
00:52:50,100 --> 00:52:56,520
today to to present two practive

1197
00:52:53,070 --> 00:53:00,030
lamentation in before they made SF

1198
00:52:56,520 --> 00:53:02,550
Simone and it aims to provide an

1199
00:53:00,030 --> 00:53:05,490
efficient and scalable monetary system

1200
00:53:02,550 --> 00:53:09,750
for natural flows in SFC enabled omics

1201
00:53:05,490 --> 00:53:12,990
so let's start by defining what is s SFC

1202
00:53:09,750 --> 00:53:15,180
and as I've seen in search function

1203
00:53:12,990 --> 00:53:19,140
chaining and it is a mechanism that

1204
00:53:15,180 --> 00:53:22,460
allows another set of network service

1205
00:53:19,140 --> 00:53:25,890
functions connect to each other and form

1206
00:53:22,460 --> 00:53:28,680
into a network service through different

1207
00:53:25,890 --> 00:53:32,190
data centers ones and applications of

1208
00:53:28,680 --> 00:53:35,250
providers and there was it worth mention

1209
00:53:32,190 --> 00:53:38,310
that sfc is considered a key enabler for

1210
00:53:35,250 --> 00:53:43,380
network function visualization so it is

1211
00:53:38,310 --> 00:53:45,560
a haughty research topic one in this

1212
00:53:43,380 --> 00:53:51,180
work you attack the problem of how to

1213
00:53:45,560 --> 00:53:53,759
provide monetary test for SF C's in a

1214
00:53:51,180 --> 00:53:57,299
scalable and efficient manner

1215
00:53:53,760 --> 00:54:00,420
so taking this into consideration for

1216
00:53:57,300 --> 00:54:02,790
SFC purpose we argued that a monetary

1217
00:54:00,420 --> 00:54:04,740
test should take into account all

1218
00:54:02,790 --> 00:54:07,040
transmitted packets at the same time

1219
00:54:04,740 --> 00:54:11,790
that keeps memory and processing

1220
00:54:07,040 --> 00:54:14,640
receptor levels so we proposed the SF

1221
00:54:11,790 --> 00:54:17,130
Symone an efficiently scaleable

1222
00:54:14,640 --> 00:54:19,200
monitoring solution to quit keep track

1223
00:54:17,130 --> 00:54:23,940
network flows in SF sea level domains

1224
00:54:19,200 --> 00:54:26,339
and to achieve its goals it implements a

1225
00:54:23,940 --> 00:54:29,220
pipeline of probably two data structures

1226
00:54:26,340 --> 00:54:31,410
to keep it to keep track only the large

1227
00:54:29,220 --> 00:54:34,259
flows directly inside the network

1228
00:54:31,410 --> 00:54:40,230
switches and thus reducing both of

1229
00:54:34,260 --> 00:54:43,230
layers and signaling over accelerate so

1230
00:54:40,230 --> 00:54:46,950
we proposed it the Assumption as a new

1231
00:54:43,230 --> 00:54:48,600
every company so we recommend that it

1232
00:54:46,950 --> 00:54:50,819
should be positioned between the

1233
00:54:48,600 --> 00:54:55,350
classifier and the surfs function for

1234
00:54:50,820 --> 00:54:57,630
order in order to be possible to process

1235
00:54:55,350 --> 00:55:03,690
old encapsulated packets before they are

1236
00:54:57,630 --> 00:55:05,910
forwarded to the next component this

1237
00:55:03,690 --> 00:55:08,280
figure illustrate the subsequent

1238
00:55:05,910 --> 00:55:10,350
processing pipeline basically it it

1239
00:55:08,280 --> 00:55:12,540
works with three types of probably

1240
00:55:10,350 --> 00:55:15,630
static structures but of course I'm not

1241
00:55:12,540 --> 00:55:18,570
yet deeper because in the interest of

1242
00:55:15,630 --> 00:55:22,320
time but what I would like to highlight

1243
00:55:18,570 --> 00:55:25,470
two of them the first one is a count

1244
00:55:22,320 --> 00:55:27,990
means cap that is responsible for the

1245
00:55:25,470 --> 00:55:31,950
detection and filtering of large flows

1246
00:55:27,990 --> 00:55:34,080
for this it use it solves the

1247
00:55:31,950 --> 00:55:38,700
approximate heavy-hitters problem and

1248
00:55:34,080 --> 00:55:42,720
the other structure is invertible blue

1249
00:55:38,700 --> 00:55:45,540
lookup table that it is responsible for

1250
00:55:42,720 --> 00:55:50,250
keep track the flow records of these

1251
00:55:45,540 --> 00:55:53,279
future at large rooms continuing I think

1252
00:55:50,250 --> 00:55:57,690
that this is the the best slide of this

1253
00:55:53,280 --> 00:56:01,400
presentation we have implemented as have

1254
00:55:57,690 --> 00:56:06,800
some prototype as a proof of concept and

1255
00:56:01,400 --> 00:56:11,160
basically it it comprised two elements

1256
00:56:06,800 --> 00:56:15,570
and as I've said switch and and unless

1257
00:56:11,160 --> 00:56:17,430
of second roller and regarding the SFC

1258
00:56:15,570 --> 00:56:24,180
switch that we highlight in the right

1259
00:56:17,430 --> 00:56:27,868
side here in the figure the subsidy is

1260
00:56:24,180 --> 00:56:30,690
basically a before program and it is it

1261
00:56:27,869 --> 00:56:35,580
is in charge of the SFC data plane for

1262
00:56:30,690 --> 00:56:41,190
this we created before reader for the

1263
00:56:35,580 --> 00:56:42,840
network subsea reader that or nsh it's

1264
00:56:41,190 --> 00:56:47,630
worth mention that in SH er is

1265
00:56:42,840 --> 00:56:50,520
responsible for as used by SFC for

1266
00:56:47,630 --> 00:56:54,859
interconnect the the network service

1267
00:56:50,520 --> 00:56:54,859
functions is encapsulation protocol

1268
00:56:55,470 --> 00:57:01,330
besides we implemented two of the main

1269
00:56:58,600 --> 00:57:03,339
SFC components the classifier and a

1270
00:57:01,330 --> 00:57:06,100
subscription forward and for this we

1271
00:57:03,340 --> 00:57:09,040
have used it before tables as you can

1272
00:57:06,100 --> 00:57:11,490
see in the figure and of course we

1273
00:57:09,040 --> 00:57:15,340
provide a self-similar reference

1274
00:57:11,490 --> 00:57:18,939
implementation and for this we have used

1275
00:57:15,340 --> 00:57:22,860
it before register to implement all the

1276
00:57:18,940 --> 00:57:22,860
probability structures that they use

1277
00:57:25,200 --> 00:57:30,879
moreover we also extend the behavioral

1278
00:57:28,720 --> 00:57:36,040
model in the before compiler code in

1279
00:57:30,880 --> 00:57:39,360
order to support more hash functions in

1280
00:57:36,040 --> 00:57:42,640
order to the solution works properly and

1281
00:57:39,360 --> 00:57:46,570
finally we have the system controller

1282
00:57:42,640 --> 00:57:48,279
that we implemented in Python and it

1283
00:57:46,570 --> 00:57:54,400
used it before a hard time to interact

1284
00:57:48,280 --> 00:57:57,910
with other SF C's switches and it

1285
00:57:54,400 --> 00:58:02,980
basically it has too many functions the

1286
00:57:57,910 --> 00:58:05,290
first one it is responsible for creating

1287
00:58:02,980 --> 00:58:08,500
an a removing a subsist on the

1288
00:58:05,290 --> 00:58:11,380
underlying infrastructure and the second

1289
00:58:08,500 --> 00:58:14,800
one it is responsible for keeping track

1290
00:58:11,380 --> 00:58:18,850
the flow records by periodically

1291
00:58:14,800 --> 00:58:23,740
collecting statistical information from

1292
00:58:18,850 --> 00:58:30,600
the abilities the look-up tables from

1293
00:58:23,740 --> 00:58:32,830
our SFC switches so to conclude the

1294
00:58:30,600 --> 00:58:35,410
exceptional source code is available on

1295
00:58:32,830 --> 00:58:38,790
github so anyone can download it and

1296
00:58:35,410 --> 00:58:42,250
reproduce the experiments and that's it

1297
00:58:38,790 --> 00:58:43,720
thank you if you have time I'm open to

1298
00:58:42,250 --> 00:58:47,200
questions thank you

1299
00:58:43,720 --> 00:58:48,939
great question okay I might miss out

1300
00:58:47,200 --> 00:58:50,339
your name please uh uh Hassan from

1301
00:58:48,940 --> 00:58:53,530
future way

1302
00:58:50,340 --> 00:58:56,080
III see you have a components which

1303
00:58:53,530 --> 00:58:59,260
actually to detect the large flow but I

1304
00:58:56,080 --> 00:59:02,410
I'm not sure I see any slides talk about

1305
00:58:59,260 --> 00:59:04,210
what you are monitoring what how do you

1306
00:59:02,410 --> 00:59:06,618
get yeah what what data you are

1307
00:59:04,210 --> 00:59:09,440
collecting and what we are monitoring

1308
00:59:06,619 --> 00:59:13,960
monitoring for those large flows yeah

1309
00:59:09,440 --> 00:59:17,900
basically there's some to keep track

1310
00:59:13,960 --> 00:59:21,890
each as a subsea and basically we

1311
00:59:17,900 --> 00:59:27,170
consider only the 10% of the traffic

1312
00:59:21,890 --> 00:59:29,900
that is considered large but are you

1313
00:59:27,170 --> 00:59:32,809
asking if I I perform some experiment

1314
00:59:29,900 --> 00:59:36,650
with a real data set or no I don't know

1315
00:59:32,809 --> 00:59:38,690
if you understand your question all the

1316
00:59:36,650 --> 00:59:41,509
problem you solve is to detect some

1317
00:59:38,690 --> 00:59:44,539
large flows or you also want to have

1318
00:59:41,509 --> 00:59:47,420
some other performance monitoring I'm

1319
00:59:44,539 --> 00:59:50,559
not sure I see those information I just

1320
00:59:47,420 --> 00:59:55,400
want to keep track large flows because

1321
00:59:50,559 --> 01:00:00,859
the veins of this work is to run in a

1322
00:59:55,400 --> 01:00:03,589
real-time so we want to reduce as much

1323
01:00:00,859 --> 01:00:06,759
as we can the probability structures so

1324
01:00:03,589 --> 01:00:10,160
we have to work with the minimal data

1325
01:00:06,759 --> 01:00:13,789
you know okay so so I see clean another

1326
01:00:10,160 --> 01:00:15,710
I feature a drop to be submit to the

1327
01:00:13,789 --> 01:00:18,619
other working group are we talking about

1328
01:00:15,710 --> 01:00:21,160
actually you can i download you some

1329
01:00:18,619 --> 01:00:24,890
architecture extra data structure like

1330
01:00:21,160 --> 01:00:27,890
sketch to detects the elephant flows and

1331
01:00:24,890 --> 01:00:30,650
you can apply the some function like see

1332
01:00:27,890 --> 01:00:33,348
int in the previous talk to actually

1333
01:00:30,650 --> 01:00:36,079
monitor the performance of this a large

1334
01:00:33,349 --> 01:00:38,720
flows so that makes our the function

1335
01:00:36,079 --> 01:00:41,089
that is the more reach if you want to

1336
01:00:38,720 --> 01:00:46,459
see okay because detection big flows

1337
01:00:41,089 --> 01:00:50,150
yeah dirk did you have another question

1338
01:00:46,460 --> 01:01:00,549
as well okay okay thank you very much

1339
01:00:50,150 --> 01:01:02,630
thank you so we're done with the

1340
01:01:00,549 --> 01:01:05,319
presentations and now Derek is going to

1341
01:01:02,630 --> 01:01:09,130
do like some kind of a mix between the

1342
01:01:05,319 --> 01:01:09,130
research and the draft

1343
01:01:09,400 --> 01:01:14,150
thank you and could some of you taking

1344
01:01:12,079 --> 01:01:18,589
notes at the end of my thank you very

1345
01:01:14,150 --> 01:01:19,800
much okay this is not this an update of

1346
01:01:18,589 --> 01:01:22,799
the

1347
01:01:19,800 --> 01:01:26,850
directions for coin draft that we say

1348
01:01:22,800 --> 01:01:30,770
York but ya got and demo I came in and

1349
01:01:26,850 --> 01:01:38,009
myself submitted before Montreal um

1350
01:01:30,770 --> 01:01:45,690
so quick can you make a full swing box

1351
01:01:38,010 --> 01:01:49,080
thank you thank you so quick reminder so

1352
01:01:45,690 --> 01:01:52,410
this draft is discussing so what we

1353
01:01:49,080 --> 01:01:54,990
think in never come computing or in

1354
01:01:52,410 --> 01:01:58,830
network really means in say coin

1355
01:01:54,990 --> 01:02:00,509
research discussions and explores like

1356
01:01:58,830 --> 01:02:03,930
different options and compares them a

1357
01:02:00,510 --> 01:02:07,550
little bit also looks a bit at you know

1358
01:02:03,930 --> 01:02:11,960
different interesting forms of computing

1359
01:02:07,550 --> 01:02:15,150
so you're kept at an example earlier and

1360
01:02:11,960 --> 01:02:17,790
yeah tries to create some basis for a

1361
01:02:15,150 --> 01:02:22,560
discussion so what what coin could or

1362
01:02:17,790 --> 01:02:24,720
should should look at so there is lots

1363
01:02:22,560 --> 01:02:28,259
of computing in the network today so we

1364
01:02:24,720 --> 01:02:30,209
we heard a few examples again just

1365
01:02:28,260 --> 01:02:33,980
before us so things like smart NICs web

1366
01:02:30,210 --> 01:02:37,050
server CD ends various cloud platforms

1367
01:02:33,980 --> 01:02:39,870
quite often when we say H computing this

1368
01:02:37,050 --> 01:02:41,520
is typically what you typically mean is

1369
01:02:39,870 --> 01:02:45,210
extending that the cloud computing

1370
01:02:41,520 --> 01:02:47,730
concepts so manage infrastructure to

1371
01:02:45,210 --> 01:02:51,030
specific hosts at the edge so co-located

1372
01:02:47,730 --> 01:02:54,330
to base stations for example so we think

1373
01:02:51,030 --> 01:02:58,080
that so these approaches are applied

1374
01:02:54,330 --> 01:03:00,270
more or less today and probably don't

1375
01:02:58,080 --> 01:03:02,160
need that much coin research anymore

1376
01:03:00,270 --> 01:03:06,810
when there's lots of engineering work

1377
01:03:02,160 --> 01:03:11,910
going on in the IT ITF which is great so

1378
01:03:06,810 --> 01:03:15,830
one example is mobile or multi axis at

1379
01:03:11,910 --> 01:03:19,140
computing which is essentially managing

1380
01:03:15,830 --> 01:03:22,910
infrastructure say in the access network

1381
01:03:19,140 --> 01:03:28,589
for example for running virtual machines

1382
01:03:22,910 --> 01:03:32,839
in in attack or deployment so this is

1383
01:03:28,590 --> 01:03:34,849
say say a system where you can yeah

1384
01:03:32,839 --> 01:03:37,160
in contractual agreement install

1385
01:03:34,849 --> 01:03:40,519
something like like a process or a

1386
01:03:37,160 --> 01:03:41,420
virtual machine that it does something

1387
01:03:40,519 --> 01:03:43,279
with the traffic

1388
01:03:41,420 --> 01:03:45,950
let's put like this and that could

1389
01:03:43,279 --> 01:03:50,930
provide enhancements to for certain

1390
01:03:45,950 --> 01:03:53,089
applications for example so this is a

1391
01:03:50,930 --> 01:03:56,359
probably rather static environment that

1392
01:03:53,089 --> 01:03:58,339
could be now a view may be used as a say

1393
01:03:56,359 --> 01:04:00,019
execution environment or something but

1394
01:03:58,339 --> 01:04:03,799
that's not something that we are I think

1395
01:04:00,019 --> 01:04:06,919
we think there and the interesting

1396
01:04:03,799 --> 01:04:08,749
research questions are if you look at

1397
01:04:06,920 --> 01:04:10,910
the other side of the spectrum there's

1398
01:04:08,749 --> 01:04:14,680
all kinds of super relevant super

1399
01:04:10,910 --> 01:04:16,190
successful deployment of application

1400
01:04:14,680 --> 01:04:19,430
layer

1401
01:04:16,190 --> 01:04:23,359
streaming and data processing frameworks

1402
01:04:19,430 --> 01:04:27,890
typically for the cloud so these are in

1403
01:04:23,359 --> 01:04:30,529
general application layer solutions that

1404
01:04:27,890 --> 01:04:34,788
in case of fling for example allow you

1405
01:04:30,529 --> 01:04:37,759
to arrange processing steps in a pipe

1406
01:04:34,789 --> 01:04:42,440
for example that you can program provide

1407
01:04:37,759 --> 01:04:44,479
scalability for that and so on these

1408
01:04:42,440 --> 01:04:47,450
systems are really nice they run well in

1409
01:04:44,479 --> 01:04:51,558
the cloud but because they run as

1410
01:04:47,450 --> 01:04:55,430
overlay they cannot take advantage say

1411
01:04:51,559 --> 01:04:57,369
of the network that well so don't have

1412
01:04:55,430 --> 01:05:00,259
the full visibility it's a bit like

1413
01:04:57,369 --> 01:05:04,069
connecting functions through yeah

1414
01:05:00,259 --> 01:05:05,450
virtual pipes they operate on their

1415
01:05:04,069 --> 01:05:07,759
different namespaces so the application

1416
01:05:05,450 --> 01:05:10,009
layer namespace you often need

1417
01:05:07,759 --> 01:05:13,630
additional steps to map this to the

1418
01:05:10,009 --> 01:05:16,249
network security was mentioned earlier

1419
01:05:13,630 --> 01:05:18,950
is in these cases often centralized

1420
01:05:16,249 --> 01:05:24,229
because they are designed to work in the

1421
01:05:18,950 --> 01:05:27,259
cloud for example so the draft kind of

1422
01:05:24,229 --> 01:05:29,779
discusses these these different say

1423
01:05:27,259 --> 01:05:35,119
perspectives and tries to formulate a

1424
01:05:29,779 --> 01:05:37,430
notion of computing Network that basic

1425
01:05:35,119 --> 01:05:38,900
could provide a system that allows you

1426
01:05:37,430 --> 01:05:42,348
to do something useful for applications

1427
01:05:38,900 --> 01:05:44,779
like for frameworks like flink but with

1428
01:05:42,349 --> 01:05:46,609
a deeper integration into the network

1429
01:05:44,779 --> 01:05:50,049
and so that's

1430
01:05:46,609 --> 01:05:53,989
the one we think one of the interesting

1431
01:05:50,049 --> 01:05:58,910
research options in this environment -

1432
01:05:53,989 --> 01:06:02,079
to look at how we can integrate our yeah

1433
01:05:58,910 --> 01:06:06,078
can can marry these different words so

1434
01:06:02,079 --> 01:06:08,359
useful functions for applications and

1435
01:06:06,079 --> 01:06:10,849
the the networking support to make this

1436
01:06:08,359 --> 01:06:14,119
run really well in different network

1437
01:06:10,849 --> 01:06:17,450
environments and then look at what you

1438
01:06:14,119 --> 01:06:20,230
can gain in terms of optimization in

1439
01:06:17,450 --> 01:06:24,769
these cases

1440
01:06:20,230 --> 01:06:31,609
okay so quickly to the to the updates

1441
01:06:24,769 --> 01:06:35,089
that we include in the latest version so

1442
01:06:31,609 --> 01:06:38,259
there is a discussion about training -

1443
01:06:35,089 --> 01:06:42,430
we just heard about monitoring for that

1444
01:06:38,259 --> 01:06:45,769
so the training has been designed to

1445
01:06:42,430 --> 01:06:49,460
chain functions in in the telco cloud so

1446
01:06:45,769 --> 01:06:55,058
the it's called Gao LAN so things that

1447
01:06:49,460 --> 01:06:58,180
you know process data I was a certain

1448
01:06:55,059 --> 01:07:00,739
flows in it with a certain trust model

1449
01:06:58,180 --> 01:07:03,410
we had a description earlier and we got

1450
01:07:00,739 --> 01:07:08,779
some some some comments with I think

1451
01:07:03,410 --> 01:07:12,170
four useful extensions so in general a

1452
01:07:08,779 --> 01:07:16,160
function training is it's about flow a

1453
01:07:12,170 --> 01:07:20,210
packet steering and typically

1454
01:07:16,160 --> 01:07:23,149
encapsulate spec it's so they can arrive

1455
01:07:20,210 --> 01:07:27,559
at the right service function forward

1456
01:07:23,150 --> 01:07:31,809
for example I think just right now just

1457
01:07:27,559 --> 01:07:36,430
in November few colleagues published our

1458
01:07:31,809 --> 01:07:39,769
cat6 17-7 which is an extension I

1459
01:07:36,430 --> 01:07:43,910
proposed an optional extension to the

1460
01:07:39,769 --> 01:07:46,160
SFC framework that is using a one layer

1461
01:07:43,910 --> 01:07:49,999
of indirection so it's using a named

1462
01:07:46,160 --> 01:07:53,899
based scheme for Mia for naming the

1463
01:07:49,999 --> 01:07:55,160
functions and then describe how this

1464
01:07:53,900 --> 01:07:58,610
could be mapped to lower layer

1465
01:07:55,160 --> 01:08:02,420
identifiers so has a bit of ICN

1466
01:07:58,610 --> 01:08:05,750
spirit in it and it also specifies how

1467
01:08:02,420 --> 01:08:07,880
you can describe how you can specify

1468
01:08:05,750 --> 01:08:11,120
hop-by-hop transport between pairs of

1469
01:08:07,880 --> 01:08:15,170
SFC notes so there could be settings

1470
01:08:11,120 --> 01:08:17,059
where sex and 1 pair uses HCP another

1471
01:08:15,170 --> 01:08:19,250
one use another protocol so yeah that

1472
01:08:17,060 --> 01:08:20,839
you could actually use that system to

1473
01:08:19,250 --> 01:08:24,290
construct compute graphs between

1474
01:08:20,839 --> 01:08:26,080
application layer functions because so

1475
01:08:24,290 --> 01:08:28,850
this does a little bit more than just

1476
01:08:26,080 --> 01:08:31,790
enabling that the IP packet robotics so

1477
01:08:28,850 --> 01:08:34,490
there's a bit a bigger idea be ambient

1478
01:08:31,790 --> 01:08:37,430
behind it and so you could say it could

1479
01:08:34,490 --> 01:08:41,769
perhaps be used for some of the

1480
01:08:37,430 --> 01:08:45,380
applications we have in mind here

1481
01:08:41,770 --> 01:08:51,109
we also added some some additional text

1482
01:08:45,380 --> 01:08:53,569
on NBC so as you see as a platform so we

1483
01:08:51,109 --> 01:08:56,930
had one comment that it could be

1484
01:08:53,569 --> 01:09:01,130
interesting to yeah just look at so the

1485
01:08:56,930 --> 01:09:03,890
combination of multi axis edge computing

1486
01:09:01,130 --> 01:09:06,589
and network slicing not so much

1487
01:09:03,890 --> 01:09:09,130
something but we want to do work in but

1488
01:09:06,589 --> 01:09:11,930
just as an example when you think about

1489
01:09:09,130 --> 01:09:15,100
something like in a short service

1490
01:09:11,930 --> 01:09:20,089
quality that you may want to establish

1491
01:09:15,100 --> 01:09:23,240
in a disability computing scenario so

1492
01:09:20,089 --> 01:09:28,910
that you so network slicing could

1493
01:09:23,240 --> 01:09:31,429
provide you some kind of cue s enabled

1494
01:09:28,910 --> 01:09:32,630
forwarding and that could be something

1495
01:09:31,430 --> 01:09:34,490
to think about

1496
01:09:32,630 --> 01:09:38,450
what could that actually mean for

1497
01:09:34,490 --> 01:09:41,599
computing in the network and then

1498
01:09:38,450 --> 01:09:45,710
finally we included one example about a

1499
01:09:41,600 --> 01:09:48,920
system that we so my co-authors here and

1500
01:09:45,710 --> 01:09:53,029
I am just build and wrote about this

1501
01:09:48,920 --> 01:09:56,090
here and so I'm gonna explain this in a

1502
01:09:53,029 --> 01:09:58,240
few slides now and so we could be caught

1503
01:09:56,090 --> 01:10:01,010
this compute first networking

1504
01:09:58,240 --> 01:10:03,530
distributed computing meets meets ICN so

1505
01:10:01,010 --> 01:10:06,320
that's the it's a coin system if you

1506
01:10:03,530 --> 01:10:10,610
want that is implemented with

1507
01:10:06,320 --> 01:10:12,299
information centric networking and so

1508
01:10:10,610 --> 01:10:15,239
the idea is that

1509
01:10:12,300 --> 01:10:18,119
wanted you know treat computing as a

1510
01:10:15,239 --> 01:10:21,058
first class citizen in a system and make

1511
01:10:18,119 --> 01:10:23,159
it possible to reason about network

1512
01:10:21,059 --> 01:10:27,000
computation so I have a system where you

1513
01:10:23,159 --> 01:10:31,650
can you know scale out so function so if

1514
01:10:27,000 --> 01:10:33,210
like for example you have say function

1515
01:10:31,650 --> 01:10:36,360
there is yeah

1516
01:10:33,210 --> 01:10:38,550
popular or needed a lot you create

1517
01:10:36,360 --> 01:10:40,558
several instances where the system takes

1518
01:10:38,550 --> 01:10:44,369
care of that automatically has on a

1519
01:10:40,559 --> 01:10:49,800
security model so that you have things

1520
01:10:44,369 --> 01:10:53,308
like conventionality authentication so

1521
01:10:49,800 --> 01:10:56,940
of nodes and functions has a notion of

1522
01:10:53,309 --> 01:11:00,510
reliability congestion control operation

1523
01:10:56,940 --> 01:11:03,119
and failsafe and should be useful for

1524
01:11:00,510 --> 01:11:05,130
application developers so that you in

1525
01:11:03,119 --> 01:11:08,940
the spirit of what I mentioned earlier

1526
01:11:05,130 --> 01:11:10,650
was fling and then and so on and so this

1527
01:11:08,940 --> 01:11:13,199
is not just about you know controlling

1528
01:11:10,650 --> 01:11:16,619
packet forwarding select through tunnels

1529
01:11:13,199 --> 01:11:19,230
or maybe routing updates and so on and

1530
01:11:16,619 --> 01:11:23,130
this was really about distributed

1531
01:11:19,230 --> 01:11:24,718
computing so operating on a slightly

1532
01:11:23,130 --> 01:11:30,210
higher layer of abstraction if you want

1533
01:11:24,719 --> 01:11:34,190
and so just briefly the concept so you

1534
01:11:30,210 --> 01:11:37,559
can assume you have a you know set of

1535
01:11:34,190 --> 01:11:41,388
nodes so execution environments in the

1536
01:11:37,559 --> 01:11:44,130
network they are named with some scheme

1537
01:11:41,389 --> 01:11:45,659
ideally we want them to support

1538
01:11:44,130 --> 01:11:48,840
different types of execution

1539
01:11:45,659 --> 01:11:51,449
environments so in the prototype we

1540
01:11:48,840 --> 01:11:53,159
developed we had just one but in

1541
01:11:51,449 --> 01:11:55,169
principle to be possible to leverage you

1542
01:11:53,159 --> 01:11:57,299
know different capabilities so have a

1543
01:11:55,170 --> 01:12:00,920
support it use and select the

1544
01:11:57,300 --> 01:12:04,139
appropriate ones for a specific function

1545
01:12:00,920 --> 01:12:06,210
so nodes could be part of you know

1546
01:12:04,139 --> 01:12:08,699
different distribute application context

1547
01:12:06,210 --> 01:12:11,790
so they they could offer the resources

1548
01:12:08,699 --> 01:12:14,869
to this route application a and P and

1549
01:12:11,790 --> 01:12:20,219
maybe I would try to pick between those

1550
01:12:14,869 --> 01:12:22,969
and so in that in a disabled application

1551
01:12:20,219 --> 01:12:25,830
system we assume that we are able to

1552
01:12:22,969 --> 01:12:29,400
instantiate invoke

1553
01:12:25,830 --> 01:12:31,550
engines on that platforms and then we

1554
01:12:29,400 --> 01:12:35,009
distinguish between different types of

1555
01:12:31,550 --> 01:12:38,760
functions or resources so stateless

1556
01:12:35,010 --> 01:12:41,700
functions like the merger but enable

1557
01:12:38,760 --> 01:12:45,960
idempotent operation stake as actors so

1558
01:12:41,700 --> 01:12:49,400
that something that keeps state and also

1559
01:12:45,960 --> 01:12:52,080
data so kind of what the decision how to

1560
01:12:49,400 --> 01:12:58,110
you know lay out the the graph we also

1561
01:12:52,080 --> 01:13:01,019
consider where data resides and so the

1562
01:12:58,110 --> 01:13:02,580
application semantics and so some some

1563
01:13:01,020 --> 01:13:09,150
resource allocation strategies then

1564
01:13:02,580 --> 01:13:11,730
dynamically influence the decisions so

1565
01:13:09,150 --> 01:13:16,290
where certain functions are going to be

1566
01:13:11,730 --> 01:13:19,019
instantiated and so there's a there's an

1567
01:13:16,290 --> 01:13:21,870
remote method invocation protocol that

1568
01:13:19,020 --> 01:13:25,650
allows us to implement the function

1569
01:13:21,870 --> 01:13:29,160
execution you know transfer parameters

1570
01:13:25,650 --> 01:13:31,830
transfer results back and so on and it's

1571
01:13:29,160 --> 01:13:34,769
it doesn't make any assumptions on so

1572
01:13:31,830 --> 01:13:35,970
how complex those functions are so it

1573
01:13:34,770 --> 01:13:39,210
could be really small ones but maybe

1574
01:13:35,970 --> 01:13:41,610
also more complex operations and one

1575
01:13:39,210 --> 01:13:44,190
function can also you know of course

1576
01:13:41,610 --> 01:13:48,660
dynamically trigger invoking other

1577
01:13:44,190 --> 01:13:51,030
functions somewhere else and so in

1578
01:13:48,660 --> 01:13:52,590
system like that you have to manage

1579
01:13:51,030 --> 01:13:55,830
information like where are the functions

1580
01:13:52,590 --> 01:13:58,620
so how are the resources utilized or

1581
01:13:55,830 --> 01:14:03,140
loaded overloaded how is the current

1582
01:13:58,620 --> 01:14:06,750
dynamic I'm a key observed performance

1583
01:14:03,140 --> 01:14:11,430
what may be additional resources become

1584
01:14:06,750 --> 01:14:13,560
available and so we did a system that

1585
01:14:11,430 --> 01:14:17,340
kind of maintains this information in a

1586
01:14:13,560 --> 01:14:21,090
disabled at a-- structure and so we are

1587
01:14:17,340 --> 01:14:26,660
using a system of trying to you know

1588
01:14:21,090 --> 01:14:30,780
like yeah forward or decide on like

1589
01:14:26,660 --> 01:14:34,420
function invocation on say next hop so

1590
01:14:30,780 --> 01:14:37,210
on or nay but neighborhoods dynamically

1591
01:14:34,420 --> 01:14:39,610
so trying to put this into our coin

1592
01:14:37,210 --> 01:14:42,760
discussion here so the coin elements

1593
01:14:39,610 --> 01:14:45,940
that we use in that system and so we are

1594
01:14:42,760 --> 01:14:47,410
managing resource availability and so

1595
01:14:45,940 --> 01:14:50,440
load information and disseminate that

1596
01:14:47,410 --> 01:14:55,599
and so we are using this debilitated

1597
01:14:50,440 --> 01:14:59,110
actress for that so Sierra T's and these

1598
01:14:55,600 --> 01:15:00,910
are shared by the nodes that take take

1599
01:14:59,110 --> 01:15:05,320
part in the distribute application

1600
01:15:00,910 --> 01:15:10,360
context we have a transport and remote

1601
01:15:05,320 --> 01:15:12,519
method invocation model that is using a

1602
01:15:10,360 --> 01:15:15,490
system called rice or remote method

1603
01:15:12,520 --> 01:15:20,860
invocation in ICN another piece of work

1604
01:15:15,490 --> 01:15:23,490
we we did earlier for deciding

1605
01:15:20,860 --> 01:15:27,820
dynamically so was a maybe late binding

1606
01:15:23,490 --> 01:15:32,260
concept where where a function is

1607
01:15:27,820 --> 01:15:35,400
actually going to be executed we use ICN

1608
01:15:32,260 --> 01:15:38,740
forwarding hints in this system the

1609
01:15:35,400 --> 01:15:43,839
programming and execution environment

1610
01:15:38,740 --> 01:15:46,719
here is Python so again as I mentioned

1611
01:15:43,840 --> 01:15:48,550
before the system itself is general

1612
01:15:46,720 --> 01:15:51,660
enough that it wouldn't have to be just

1613
01:15:48,550 --> 01:15:55,450
Pisan but we used it in the system and

1614
01:15:51,660 --> 01:16:00,300
in terms of categories for computing we

1615
01:15:55,450 --> 01:16:03,220
distinguish functions actors data and

1616
01:16:00,300 --> 01:16:05,590
the naming of a function or that's

1617
01:16:03,220 --> 01:16:07,960
that's done by ICN naming we have a

1618
01:16:05,590 --> 01:16:09,700
certain scheme that I am NOT going to

1619
01:16:07,960 --> 01:16:17,080
discuss now but you can look it up in

1620
01:16:09,700 --> 01:16:19,660
the paper so there is something like a

1621
01:16:17,080 --> 01:16:22,600
task scheduler that you need to

1622
01:16:19,660 --> 01:16:29,410
understand the nature of the program and

1623
01:16:22,600 --> 01:16:32,320
then basically yeah analyze the the

1624
01:16:29,410 --> 01:16:35,050
resource description and then make

1625
01:16:32,320 --> 01:16:39,389
decisions like where certain functions

1626
01:16:35,050 --> 01:16:43,810
would be allocated and and executed and

1627
01:16:39,390 --> 01:16:47,290
so this is a bit of terminology that we

1628
01:16:43,810 --> 01:16:52,720
are using so a program that's the set of

1629
01:16:47,290 --> 01:16:55,150
mutations requested by user so and you

1630
01:16:52,720 --> 01:16:57,160
know describing this because I thought

1631
01:16:55,150 --> 01:17:00,190
it could be interesting to you know I

1632
01:16:57,160 --> 01:17:02,530
have some kind of terminology just for

1633
01:17:00,190 --> 01:17:04,000
comparison how we deal with you know

1634
01:17:02,530 --> 01:17:07,269
certain concepts in this particular

1635
01:17:04,000 --> 01:17:08,980
system a program instead instance that's

1636
01:17:07,270 --> 01:17:14,410
the instance of the program that we are

1637
01:17:08,980 --> 01:17:16,780
currently executing function we use that

1638
01:17:14,410 --> 01:17:18,970
word for describing a specific piece of

1639
01:17:16,780 --> 01:17:22,840
computation that can be invoked as part

1640
01:17:18,970 --> 01:17:27,390
of a program so data that is what we

1641
01:17:22,840 --> 01:17:32,200
mean by function inputs and the outputs

1642
01:17:27,390 --> 01:17:35,080
we have a concept of futures so in the

1643
01:17:32,200 --> 01:17:37,720
program when we describe function

1644
01:17:35,080 --> 01:17:41,740
execution we get back a handle that

1645
01:17:37,720 --> 01:17:46,480
later allow allows us to to retrieve the

1646
01:17:41,740 --> 01:17:49,030
extra computation result and so worker

1647
01:17:46,480 --> 01:17:51,820
we use that term for specifying the

1648
01:17:49,030 --> 01:17:56,290
exact locus of a function or actor in a

1649
01:17:51,820 --> 01:18:00,040
particular program instance and here so

1650
01:17:56,290 --> 01:18:05,440
here's an example of a distributed

1651
01:18:00,040 --> 01:18:07,690
application or program that we define in

1652
01:18:05,440 --> 01:18:10,690
in Python so this is a regular Python

1653
01:18:07,690 --> 01:18:14,139
code and so we you know edit these

1654
01:18:10,690 --> 01:18:18,219
decorators that allow us to describe

1655
01:18:14,140 --> 01:18:21,210
what type of you know remote function we

1656
01:18:18,220 --> 01:18:26,650
are we are talking about so like a

1657
01:18:21,210 --> 01:18:28,870
transparent financial a transparent

1658
01:18:26,650 --> 01:18:32,799
function or opaque function and ACTRA

1659
01:18:28,870 --> 01:18:35,620
and so we are programming this in the

1660
01:18:32,800 --> 01:18:37,300
system all the nodes that participate in

1661
01:18:35,620 --> 01:18:41,920
one program insulin needs need to have

1662
01:18:37,300 --> 01:18:43,740
that program and then well as a as any

1663
01:18:41,920 --> 01:18:48,250
other program in a turing-complete

1664
01:18:43,740 --> 01:18:48,700
system we cannot predict what function

1665
01:18:48,250 --> 01:18:50,980
will be called

1666
01:18:48,700 --> 01:18:56,260
at what time so this is an dynamically

1667
01:18:50,980 --> 01:18:58,900
decided and so the then the nodes

1668
01:18:56,260 --> 01:19:00,970
basically share this computation graph

1669
01:18:58,900 --> 01:19:04,629
so it is known where

1670
01:19:00,970 --> 01:19:07,990
data resides and so what is the training

1671
01:19:04,630 --> 01:19:10,510
of the function and so on and this graph

1672
01:19:07,990 --> 01:19:13,929
is constantly updated so in this

1673
01:19:10,510 --> 01:19:16,900
distributed data structure and was

1674
01:19:13,930 --> 01:19:19,930
non-conflicting merge operations so it

1675
01:19:16,900 --> 01:19:22,410
could be that for example here this

1676
01:19:19,930 --> 01:19:29,440
function called extract extract features

1677
01:19:22,410 --> 01:19:31,750
is allocated on note 1 by say in one

1678
01:19:29,440 --> 01:19:34,150
branch of the program another branch may

1679
01:19:31,750 --> 01:19:36,490
locate it at node 2 and so these

1680
01:19:34,150 --> 01:19:39,280
information these decisions are shared

1681
01:19:36,490 --> 01:19:43,540
in this year DT and then could be merged

1682
01:19:39,280 --> 01:19:46,599
with this non-conflicting set merge

1683
01:19:43,540 --> 01:19:51,610
operation so that we kind of consolidate

1684
01:19:46,600 --> 01:19:55,320
this this compute graph each node has

1685
01:19:51,610 --> 01:19:59,049
something like we call task scheduler so

1686
01:19:55,320 --> 01:20:02,710
that dynamically makes a decision so

1687
01:19:59,050 --> 01:20:04,980
when I I see in my program analysis ok I

1688
01:20:02,710 --> 01:20:08,170
have to execute this function now next

1689
01:20:04,980 --> 01:20:10,870
that makes the decision where this

1690
01:20:08,170 --> 01:20:12,790
should actually be executed so it's

1691
01:20:10,870 --> 01:20:14,860
possible that the function was quite

1692
01:20:12,790 --> 01:20:18,340
likely has already been allocated when

1693
01:20:14,860 --> 01:20:22,570
in sense on node and the system has

1694
01:20:18,340 --> 01:20:25,270
information for this could be say in the

1695
01:20:22,570 --> 01:20:29,110
forwarding information base or somewhere

1696
01:20:25,270 --> 01:20:33,450
else here we are using these IC and

1697
01:20:29,110 --> 01:20:37,420
forwarding hints to to steer the request

1698
01:20:33,450 --> 01:20:39,880
so that we may be know specifically so

1699
01:20:37,420 --> 01:20:45,280
know exactly 2 minutes

1700
01:20:39,880 --> 01:20:46,810
so that we when we know say the identity

1701
01:20:45,280 --> 01:20:48,670
of a node for example where that

1702
01:20:46,810 --> 01:20:50,410
function is we can kind of provide that

1703
01:20:48,670 --> 01:20:52,930
additional information if we don't know

1704
01:20:50,410 --> 01:20:56,920
it then IC and forwarding could take

1705
01:20:52,930 --> 01:21:02,350
care of that ok let me skip this

1706
01:20:56,920 --> 01:21:04,840
in this example know the system here is

1707
01:21:02,350 --> 01:21:05,890
that we developed is a distributed

1708
01:21:04,840 --> 01:21:09,160
computation framework for

1709
01:21:05,890 --> 01:21:11,200
general-purpose computation and has this

1710
01:21:09,160 --> 01:21:14,659
disability data structure to to maintain

1711
01:21:11,200 --> 01:21:16,639
this compute graph between the nodes

1712
01:21:14,659 --> 01:21:19,909
we are have you have some contact

1713
01:21:16,639 --> 01:21:25,760
concept of transport in our my so thanks

1714
01:21:19,909 --> 01:21:29,478
to the ICN bassist here and check out

1715
01:21:25,760 --> 01:21:33,880
the the paper and the source code that's

1716
01:21:29,479 --> 01:21:37,249
available here had that link and so

1717
01:21:33,880 --> 01:21:38,869
looking forward we want to you know

1718
01:21:37,249 --> 01:21:41,179
enable more decentralized decision

1719
01:21:38,869 --> 01:21:44,509
making in that system so consider more

1720
01:21:41,179 --> 01:21:46,340
dynamic network and platform load maybe

1721
01:21:44,510 --> 01:21:50,539
think about what as I mentioned earlier

1722
01:21:46,340 --> 01:21:52,400
what qsr could actually mean here and so

1723
01:21:50,539 --> 01:21:54,559
have a soft side approach where we can

1724
01:21:52,400 --> 01:21:57,129
really would use the cone nation and

1725
01:21:54,559 --> 01:22:00,289
instead keeping load so we have certain

1726
01:21:57,130 --> 01:22:03,439
mechanisms in ICM that could help us

1727
01:22:00,289 --> 01:22:06,139
maybe to leverage say features of the

1728
01:22:03,439 --> 01:22:11,300
network system directly and make this

1729
01:22:06,139 --> 01:22:14,150
quite elegant so coming back to the coin

1730
01:22:11,300 --> 01:22:16,849
direction draft so when we talk about

1731
01:22:14,150 --> 01:22:18,110
computing in the network so this is

1732
01:22:16,849 --> 01:22:20,269
clearly just more than forwarding

1733
01:22:18,110 --> 01:22:23,209
packets to notes so that happened to you

1734
01:22:20,269 --> 01:22:25,099
know live on the ends or processes or to

1735
01:22:23,209 --> 01:22:26,989
host VMs or processes so this can be

1736
01:22:25,099 --> 01:22:29,659
done today so what I think it's really

1737
01:22:26,989 --> 01:22:32,058
interesting and has lots of potential is

1738
01:22:29,659 --> 01:22:34,308
really embracing the idea of supporting

1739
01:22:32,059 --> 01:22:36,409
disability computing by trying to

1740
01:22:34,309 --> 01:22:38,329
leverage the concepts and mechanism that

1741
01:22:36,409 --> 01:22:41,329
we know from from networking and try to

1742
01:22:38,329 --> 01:22:45,739
build a better combined system so better

1743
01:22:41,329 --> 01:22:48,799
than just building better pipes for the

1744
01:22:45,739 --> 01:22:51,339
draft so we want to document more

1745
01:22:48,800 --> 01:22:53,300
relevant and representative use cases

1746
01:22:51,340 --> 01:22:54,919
somebody mentioned with me second

1747
01:22:53,300 --> 01:22:57,800
routing I think that it's a nice

1748
01:22:54,919 --> 01:22:59,329
addition and so we see this as a

1749
01:22:57,800 --> 01:23:01,130
contribution that should help the

1750
01:22:59,329 --> 01:23:04,039
discussion in the group so we try to

1751
01:23:01,130 --> 01:23:07,729
maybe come up with terminology and a

1752
01:23:04,039 --> 01:23:10,579
taxonomy and that could be helpful so

1753
01:23:07,729 --> 01:23:11,959
the goal is not so much to prescribe the

1754
01:23:10,579 --> 01:23:14,688
best or one way to do it

1755
01:23:11,959 --> 01:23:18,219
but really to help us better understand

1756
01:23:14,689 --> 01:23:23,690
the problem thank you great thank you

1757
01:23:18,219 --> 01:23:25,910
any questions yeah so

1758
01:23:23,690 --> 01:23:28,250
assume you were where the chair of the

1759
01:23:25,910 --> 01:23:31,099
DI energy working group on which basis

1760
01:23:28,250 --> 01:23:34,489
what you reject this type of work in di

1761
01:23:31,100 --> 01:23:35,870
energy you know to me it looks all very

1762
01:23:34,489 --> 01:23:37,759
similar and I have a very hard time

1763
01:23:35,870 --> 01:23:39,500
coming up with a clear distinction

1764
01:23:37,760 --> 01:23:42,530
between what's proposed for a coin and

1765
01:23:39,500 --> 01:23:44,510
di energy so I really don't don't get

1766
01:23:42,530 --> 01:23:48,440
the question can you kind of rephrase

1767
01:23:44,510 --> 01:23:50,270
that but I'm saying that I have a hard

1768
01:23:48,440 --> 01:23:52,580
time figuring out in these proposals

1769
01:23:50,270 --> 01:23:54,410
which are all find very interesting to

1770
01:23:52,580 --> 01:23:56,590
see why they couldn't happen in DI

1771
01:23:54,410 --> 01:23:59,389
energy ah because this is about

1772
01:23:56,590 --> 01:24:02,600
computing in the network it is to be a

1773
01:23:59,390 --> 01:24:05,600
computing platform systems like this

1774
01:24:02,600 --> 01:24:08,480
could potentially use this implies

1775
01:24:05,600 --> 01:24:11,660
infrastructure for a certain input for

1776
01:24:08,480 --> 01:24:14,299
infrastructure services may be key value

1777
01:24:11,660 --> 01:24:15,949
stores or something but the focus here

1778
01:24:14,300 --> 01:24:17,900
is really to them the disability

1779
01:24:15,949 --> 01:24:20,570
computing so you're saying that the our

1780
01:24:17,900 --> 01:24:23,360
energy would only you know want to take

1781
01:24:20,570 --> 01:24:25,400
on maybe smaller building blocks and not

1782
01:24:23,360 --> 01:24:28,900
all because these all look like very

1783
01:24:25,400 --> 01:24:32,089
much distributed applications right so

1784
01:24:28,900 --> 01:24:33,530
I'm not sure to to into which level you

1785
01:24:32,090 --> 01:24:35,780
want to constrain the are energy and

1786
01:24:33,530 --> 01:24:37,699
then it's it's it's really hard to

1787
01:24:35,780 --> 01:24:41,259
figure out from these are just examples

1788
01:24:37,699 --> 01:24:44,509
all given right right but the energy is

1789
01:24:41,260 --> 01:24:47,270
really about decentralizing Internet

1790
01:24:44,510 --> 01:24:53,500
infrastructure so a naming systems for

1791
01:24:47,270 --> 01:24:57,800
example might potentially around routing

1792
01:24:53,500 --> 01:25:01,520
that's what a PKI for example this is

1793
01:24:57,800 --> 01:25:04,430
really about distributing computation so

1794
01:25:01,520 --> 01:25:06,290
yeah but I mean the the distributor

1795
01:25:04,430 --> 01:25:08,330
might in in front what do you call

1796
01:25:06,290 --> 01:25:10,550
Internet infrastructure right what is

1797
01:25:08,330 --> 01:25:12,010
not going to be in fact into a future

1798
01:25:10,550 --> 01:25:16,610
Internet infrastructure here right so

1799
01:25:12,010 --> 01:25:19,310
it's right so yeah well I think I mean

1800
01:25:16,610 --> 01:25:21,679
III think a clear delineation or so in a

1801
01:25:19,310 --> 01:25:23,719
description would help very much can I

1802
01:25:21,680 --> 01:25:26,540
have a second point organic any answer

1803
01:25:23,719 --> 01:25:29,600
we have we have a lot of things

1804
01:25:26,540 --> 01:25:32,660
please Colin Colin Perkins come if I can

1805
01:25:29,600 --> 01:25:36,710
just follow up on this I mean the there

1806
01:25:32,660 --> 01:25:37,550
is clearly to some extent overlap

1807
01:25:36,710 --> 01:25:39,380
between

1808
01:25:37,550 --> 01:25:42,170
the work happening in this group that

1809
01:25:39,380 --> 01:25:44,570
the naming decentralization work and

1810
01:25:42,170 --> 01:25:47,510
energy and some of the working on in the

1811
01:25:44,570 --> 01:25:50,058
icy energy I don't see that as a problem

1812
01:25:47,510 --> 01:25:52,579
there's no requirement in the IRT F the

1813
01:25:50,059 --> 01:25:54,800
groups are completely distinct and don't

1814
01:25:52,579 --> 01:25:57,409
to at least some extent overlap their

1815
01:25:54,800 --> 01:25:59,300
work so I think the focus is a

1816
01:25:57,409 --> 01:26:04,000
sufficiently difference that this is

1817
01:25:59,300 --> 01:26:04,000
yeah small overlaps we have a fight

1818
01:26:04,329 --> 01:26:10,009
just just quick note so from the the

1819
01:26:07,940 --> 01:26:11,839
focus of what these are about right so

1820
01:26:10,010 --> 01:26:14,030
the the distributed application

1821
01:26:11,840 --> 01:26:15,800
infrastructure itself or so to me that's

1822
01:26:14,030 --> 01:26:17,809
kind of a given right so the interesting

1823
01:26:15,800 --> 01:26:19,909
parts are really what what I would like

1824
01:26:17,809 --> 01:26:23,630
to see coming out are the numeric

1825
01:26:19,909 --> 01:26:26,509
analysis of you know how the network you

1826
01:26:23,630 --> 01:26:27,829
know the latency the throughput the you

1827
01:26:26,510 --> 01:26:29,780
know the distribution how it's done

1828
01:26:27,829 --> 01:26:31,579
right so the the performance

1829
01:26:29,780 --> 01:26:34,070
investigation right so that we also have

1830
01:26:31,579 --> 01:26:35,269
an understanding of what what the

1831
01:26:34,070 --> 01:26:37,308
network should look like in the future

1832
01:26:35,270 --> 01:26:39,349
so that these distributed applications

1833
01:26:37,309 --> 01:26:41,090
run best or what performance we can

1834
01:26:39,349 --> 01:26:42,290
expect with certain type of networks

1835
01:26:41,090 --> 01:26:44,630
right and we would welcome your

1836
01:26:42,290 --> 01:26:47,900
contribution if you want to do it no I

1837
01:26:44,630 --> 01:26:49,369
mean I'm saying that is this is what I

1838
01:26:47,900 --> 01:26:50,629
would like to see from the working group

1839
01:26:49,369 --> 01:26:53,449
doesn't necessarily mean I have the

1840
01:26:50,630 --> 01:26:55,159
cyclists to do it myself or even the you

1841
01:26:53,449 --> 01:26:59,530
know the background right so I mean this

1842
01:26:55,159 --> 01:27:01,579
is this research I didn't put up the

1843
01:26:59,530 --> 01:27:02,840
evaluation results he actually so please

1844
01:27:01,579 --> 01:27:05,329
look it up in the paper we have some

1845
01:27:02,840 --> 01:27:07,520
limited performance evaluation in that

1846
01:27:05,329 --> 01:27:09,710
paper I mentioned yeah we need to move

1847
01:27:07,520 --> 01:27:12,170
on to the next question I think the next

1848
01:27:09,710 --> 01:27:18,710
is Nico okay it's me

1849
01:27:12,170 --> 01:27:20,540
so it's Nick nice thank you for the

1850
01:27:18,710 --> 01:27:23,540
presentation sometimes when we write

1851
01:27:20,540 --> 01:27:25,099
generic architecture it's very difficult

1852
01:27:23,540 --> 01:27:27,170
to see the actual actually in generic

1853
01:27:25,099 --> 01:27:30,380
and maybe some time we have one use case

1854
01:27:27,170 --> 01:27:32,179
in mine and I think if you knowledge

1855
01:27:30,380 --> 01:27:33,800
detector in speaking about distributing

1856
01:27:32,179 --> 01:27:35,599
computing that's a Ravens use case for

1857
01:27:33,800 --> 01:27:39,079
quantum and the committed quantum

1858
01:27:35,599 --> 01:27:40,309
computers and that's maybe to forward in

1859
01:27:39,079 --> 01:27:41,960
the future I'm not sure to what extent

1860
01:27:40,309 --> 01:27:44,090
it is relevant to your left

1861
01:27:41,960 --> 01:27:46,429
I haven't read read your draft but that

1862
01:27:44,090 --> 01:27:48,199
may be just another use case you may

1863
01:27:46,429 --> 01:27:49,670
want to consider to see it what extent

1864
01:27:48,199 --> 01:27:51,119
is at stake to be generic I'm not sure

1865
01:27:49,670 --> 01:27:54,419
if it's relevant or not

1866
01:27:51,119 --> 01:27:56,219
22 okay thanks mention that kind of very

1867
01:27:54,419 --> 01:27:58,139
futuristic use case that maybe eleventh

1868
01:27:56,219 --> 01:28:00,809
to attack all your architecture against

1869
01:27:58,139 --> 01:28:02,789
thanks I'd love to talk later to you and

1870
01:28:00,809 --> 01:28:06,499
that's maybe if you have some time let's

1871
01:28:02,789 --> 01:28:06,499
talk after the meeting okay I can stay

1872
01:28:06,709 --> 01:28:12,510
down from China Mobile thank you for the

1873
01:28:09,269 --> 01:28:14,519
presentation is very helpful just a very

1874
01:28:12,510 --> 01:28:17,689
clarification question um do you

1875
01:28:14,519 --> 01:28:20,729
distinguish computing in network and

1876
01:28:17,689 --> 01:28:23,699
programming in network I mean in terms

1877
01:28:20,729 --> 01:28:26,789
of your methodology so good question

1878
01:28:23,699 --> 01:28:29,999
right so I we had to in the previous

1879
01:28:26,789 --> 01:28:31,800
version I mean things like if you

1880
01:28:29,999 --> 01:28:35,070
referring to a programmable data plane

1881
01:28:31,800 --> 01:28:39,090
or these kind of things well this could

1882
01:28:35,070 --> 01:28:43,590
be a means for an enabling computing in

1883
01:28:39,090 --> 01:28:48,239
the network in some way so that that's

1884
01:28:43,590 --> 01:28:51,329
the way how we describe it so sorry that

1885
01:28:48,239 --> 01:28:54,959
that means like research on p4 for

1886
01:28:51,329 --> 01:29:01,199
example will be also a I'm considered

1887
01:28:54,959 --> 01:29:03,599
scope in this research group well I

1888
01:29:01,199 --> 01:29:08,938
think I mean we had seen some computing

1889
01:29:03,599 --> 01:29:11,939
in the network say developments that

1890
01:29:08,939 --> 01:29:15,780
that used p4 or use problem with a

1891
01:29:11,939 --> 01:29:20,189
terrain in general and I think that they

1892
01:29:15,780 --> 01:29:25,469
are useful so the question is a little

1893
01:29:20,189 --> 01:29:30,030
bit how can you you know use these

1894
01:29:25,469 --> 01:29:32,039
systems to do something say we are

1895
01:29:30,030 --> 01:29:34,199
helpful for application developers or I

1896
01:29:32,039 --> 01:29:36,719
am sort of quite often what we have seen

1897
01:29:34,199 --> 01:29:39,148
is like point solutions that so

1898
01:29:36,719 --> 01:29:41,340
demonstrate the merits so that you can

1899
01:29:39,149 --> 01:29:44,039
speed up say this ability consensus

1900
01:29:41,340 --> 01:29:46,289
protocols and so on and so we think

1901
01:29:44,039 --> 01:29:49,978
maybe the research challenge is also how

1902
01:29:46,289 --> 01:29:55,860
to leverage these cool mechanisms for

1903
01:29:49,979 --> 01:29:57,599
you idea to design say coin platforms

1904
01:29:55,860 --> 01:29:59,999
that could be useful for different types

1905
01:29:57,599 --> 01:30:01,889
of applications have maybe something

1906
01:29:59,999 --> 01:30:04,500
like transport and security in mind so

1907
01:30:01,889 --> 01:30:07,050
this is I guess so how these

1908
01:30:04,500 --> 01:30:08,220
once could be used can I jump in just

1909
01:30:07,050 --> 01:30:12,240
for a second they were on I'm a

1910
01:30:08,220 --> 01:30:14,550
co-author of the paper here um there are

1911
01:30:12,240 --> 01:30:16,050
aspects of p4 which are relevant aspects

1912
01:30:14,550 --> 01:30:17,970
that are not so if the research is how

1913
01:30:16,050 --> 01:30:20,220
do I build a better p4 compiler I think

1914
01:30:17,970 --> 01:30:22,590
the answer is no right if the answer is

1915
01:30:20,220 --> 01:30:25,020
how do I build a better tkm base switch

1916
01:30:22,590 --> 01:30:27,300
to run p4 and I think the answer is no

1917
01:30:25,020 --> 01:30:30,030
on the other hand if the question is

1918
01:30:27,300 --> 01:30:36,030
what types of computations can i express

1919
01:30:30,030 --> 01:30:38,160
in p4 on on network style hardware

1920
01:30:36,030 --> 01:30:40,759
that's very relevant so I'll point you

1921
01:30:38,160 --> 01:30:44,639
to a paper at hot Nets just a week ago

1922
01:30:40,760 --> 01:30:48,270
by Noah and some other folks that

1923
01:30:44,640 --> 01:30:52,860
basically demonstrate just exactly what

1924
01:30:48,270 --> 01:30:56,370
kind of neural network our computations

1925
01:30:52,860 --> 01:30:59,099
could be done and be expressed in p4 on

1926
01:30:56,370 --> 01:31:01,110
a p4 style in that were computing

1927
01:30:59,100 --> 01:31:02,910
element right so they have a very nice

1928
01:31:01,110 --> 01:31:04,410
investigation of what are the what are

1929
01:31:02,910 --> 01:31:06,300
the possible things you could do and

1930
01:31:04,410 --> 01:31:08,490
what the limitations are that's very

1931
01:31:06,300 --> 01:31:12,300
relevant I would think from our point of

1932
01:31:08,490 --> 01:31:14,010
view we go to the next last question

1933
01:31:12,300 --> 01:31:15,570
because we're run now we're running out

1934
01:31:14,010 --> 01:31:19,040
of time we're yeah yeah I don't I'm but

1935
01:31:15,570 --> 01:31:22,349
now we're just a quick so first of all

1936
01:31:19,040 --> 01:31:26,250
your name please sorry Tim Wattenberg so

1937
01:31:22,350 --> 01:31:27,900
I like those roadmap drafts in addition

1938
01:31:26,250 --> 01:31:30,020
to agendas so thank you very much for

1939
01:31:27,900 --> 01:31:32,460
writing this and I think it's useful

1940
01:31:30,020 --> 01:31:34,890
second is just a meta comment I saw that

1941
01:31:32,460 --> 01:31:36,720
you're intending status experimental and

1942
01:31:34,890 --> 01:31:40,140
I know

1943
01:31:36,720 --> 01:31:43,290
so besides RFC 2026 there's also a

1944
01:31:40,140 --> 01:31:46,110
document put up by the iesg for the

1945
01:31:43,290 --> 01:31:48,150
definition of or why when to choose

1946
01:31:46,110 --> 01:31:51,900
experimental and when informational oh

1947
01:31:48,150 --> 01:31:54,330
yeah okay so all right so maybe go for

1948
01:31:51,900 --> 01:31:57,139
informational that's all yeah we should

1949
01:31:54,330 --> 01:31:59,370
have been the case okay thank you okay

1950
01:31:57,140 --> 01:32:01,980
we have a we have a cop we have a

1951
01:31:59,370 --> 01:32:03,330
question from the chair um we were just

1952
01:32:01,980 --> 01:32:05,910
curious about whether you are

1953
01:32:03,330 --> 01:32:07,800
considering bringing your POC into like

1954
01:32:05,910 --> 01:32:11,070
the hackathon or something have you

1955
01:32:07,800 --> 01:32:14,250
thought about that right so I think

1956
01:32:11,070 --> 01:32:15,900
let's I mean it we're discussing

1957
01:32:14,250 --> 01:32:17,860
different hackathon activities also in

1958
01:32:15,900 --> 01:32:22,230
the IC energy I think

1959
01:32:17,860 --> 01:32:22,230
should perhaps plan this one for next

1960
01:32:22,650 --> 01:32:36,849
okay thank you the Nexus clubs okay

1961
01:32:34,540 --> 01:32:39,130
thanks hi my name is Klaus and I'm

1962
01:32:36,850 --> 01:32:42,010
presenting a draft on transport issues

1963
01:32:39,130 --> 01:32:45,210
for coin so this is joint work with I

1964
01:32:42,010 --> 01:32:51,040
could sir he presented our last draft on

1965
01:32:45,210 --> 01:32:53,710
industrial use cases in Montreal yeah

1966
01:32:51,040 --> 01:32:56,050
okay so if we are looking at the

1967
01:32:53,710 --> 01:32:57,699
transport layer this is the typical

1968
01:32:56,050 --> 01:33:00,699
notion that we have in the ITF on the

1969
01:32:57,699 --> 01:33:02,799
transport layer so it's all computation

1970
01:33:00,699 --> 01:33:04,540
and all modify especially modifying

1971
01:33:02,800 --> 01:33:06,850
application payload is done at the

1972
01:33:04,540 --> 01:33:10,090
network endpoints so in the core network

1973
01:33:06,850 --> 01:33:14,260
we typically should not deal with

1974
01:33:10,090 --> 01:33:16,150
transport protocols themselves but if we

1975
01:33:14,260 --> 01:33:20,260
are introducing now computing in the

1976
01:33:16,150 --> 01:33:23,469
network and I'm in this case referring a

1977
01:33:20,260 --> 01:33:26,260
bit more to the edge cloud cases of

1978
01:33:23,469 --> 01:33:29,170
course when you ask how is the transport

1979
01:33:26,260 --> 01:33:32,320
layered and present there I guess you

1980
01:33:29,170 --> 01:33:35,080
will have something then like n times

1981
01:33:32,320 --> 01:33:37,690
and to end connections between the let's

1982
01:33:35,080 --> 01:33:39,940
say the sender or the initiator and then

1983
01:33:37,690 --> 01:33:43,509
the intermediate compute point so this

1984
01:33:39,940 --> 01:33:47,980
is actually a quite simple case but if

1985
01:33:43,510 --> 01:33:50,889
you refer to the more let's say p4 style

1986
01:33:47,980 --> 01:33:53,349
programmable data planes I guess you

1987
01:33:50,889 --> 01:33:57,909
will not have a transport endpoint in

1988
01:33:53,350 --> 01:33:59,739
your p4 switch and if you think on use

1989
01:33:57,909 --> 01:34:01,589
cases that are discussed he and the

1990
01:33:59,739 --> 01:34:05,099
research group and that we have already

1991
01:34:01,590 --> 01:34:07,869
presented or that other people think of

1992
01:34:05,100 --> 01:34:10,510
several interesting transport layer

1993
01:34:07,869 --> 01:34:11,949
issues come up and this is what we want

1994
01:34:10,510 --> 01:34:13,119
to do with this draft we want to raise

1995
01:34:11,949 --> 01:34:15,610
the discussion on this

1996
01:34:13,119 --> 01:34:17,530
we thought about already suggesting some

1997
01:34:15,610 --> 01:34:20,049
solutions but we wanted to first discuss

1998
01:34:17,530 --> 01:34:22,659
this with the research group and of

1999
01:34:20,050 --> 01:34:26,290
course inviting everyone towards this

2000
01:34:22,659 --> 01:34:28,659
discussion for providing yeah

2001
01:34:26,290 --> 01:34:30,639
interesting input in order to think

2002
01:34:28,659 --> 01:34:31,780
about how can we do that so what you see

2003
01:34:30,639 --> 01:34:34,690
in this picture here is

2004
01:34:31,780 --> 01:34:38,320
how we think of if you do if you do have

2005
01:34:34,690 --> 01:34:42,549
programmable data planes and you do a

2006
01:34:38,320 --> 01:34:44,710
bit more than just a bit of traffic

2007
01:34:42,550 --> 01:34:46,170
engineering with your program with a top

2008
01:34:44,710 --> 01:34:48,280
lane but if you're really doing

2009
01:34:46,170 --> 01:34:52,120
computations and sometimes a bit more

2010
01:34:48,280 --> 01:34:55,860
heavy computations on your payload how

2011
01:34:52,120 --> 01:34:59,530
do you see that on the transport layer

2012
01:34:55,860 --> 01:35:02,049
so what I called here is not n x + 2 n

2013
01:34:59,530 --> 01:35:04,420
connection but some new notion we think

2014
01:35:02,050 --> 01:35:07,510
of is like from end to intermediate to

2015
01:35:04,420 --> 01:35:09,580
intermediate to end point where you have

2016
01:35:07,510 --> 01:35:14,410
an awareness on the transport layer of

2017
01:35:09,580 --> 01:35:18,820
these intermediate compute points so I

2018
01:35:14,410 --> 01:35:22,750
refer to this as n - I - I - to end okay

2019
01:35:18,820 --> 01:35:27,400
so there is no simple solution to handle

2020
01:35:22,750 --> 01:35:29,230
the transport layer issues in the

2021
01:35:27,400 --> 01:35:30,879
typical internet architecture so that's

2022
01:35:29,230 --> 01:35:33,099
why we wanted to raise the discussion

2023
01:35:30,880 --> 01:35:34,930
and the points that we want to address

2024
01:35:33,100 --> 01:35:36,730
in this first version of the graph is of

2025
01:35:34,930 --> 01:35:38,440
course first addressing how do we

2026
01:35:36,730 --> 01:35:40,509
address this intermediate points how do

2027
01:35:38,440 --> 01:35:42,250
you say I want to have this computation

2028
01:35:40,510 --> 01:35:45,130
there and there how do we address that

2029
01:35:42,250 --> 01:35:47,860
how about the flow granularity so on

2030
01:35:45,130 --> 01:35:50,230
which basis do you do this processing is

2031
01:35:47,860 --> 01:35:53,679
it on a packet basis is on a flow basis

2032
01:35:50,230 --> 01:35:56,440
or message basis how do you authenticate

2033
01:35:53,680 --> 01:35:58,500
maybe the computations how to deal with

2034
01:35:56,440 --> 01:36:01,179
security that's also what the IAB

2035
01:35:58,500 --> 01:36:03,130
addressed or said should be heavily

2036
01:36:01,180 --> 01:36:05,350
addressed and some other transport

2037
01:36:03,130 --> 01:36:07,210
features that are where the problems are

2038
01:36:05,350 --> 01:36:12,040
similar than the first ones that I just

2039
01:36:07,210 --> 01:36:14,560
mentioned okay so addressing who or how

2040
01:36:12,040 --> 01:36:17,680
do you address these compute points or

2041
01:36:14,560 --> 01:36:20,560
these yeah intermediate nodes you can

2042
01:36:17,680 --> 01:36:22,750
typically do that by IP addresses and

2043
01:36:20,560 --> 01:36:26,530
ports of course so do you address than

2044
01:36:22,750 --> 01:36:28,750
your programmable data plane like that

2045
01:36:26,530 --> 01:36:31,030
or do you just want to say I want to

2046
01:36:28,750 --> 01:36:33,340
have this kind of computation on the

2047
01:36:31,030 --> 01:36:35,259
data path I'm not so much interested in

2048
01:36:33,340 --> 01:36:38,290
where doing where I do it so it's a bit

2049
01:36:35,260 --> 01:36:41,140
like more ICN style or do I want to have

2050
01:36:38,290 --> 01:36:44,140
more location-based addressing do you

2051
01:36:41,140 --> 01:36:45,429
want to have it more in a loose

2052
01:36:44,140 --> 01:36:47,530
addressing star

2053
01:36:45,429 --> 01:36:50,260
that you are not really taking care of

2054
01:36:47,530 --> 01:36:53,860
in which switch it happens or do you

2055
01:36:50,260 --> 01:36:57,909
want to give a strict sequence of where

2056
01:36:53,860 --> 01:36:59,820
which computation should happen is it

2057
01:36:57,909 --> 01:37:03,250
just a unicast communication

2058
01:36:59,820 --> 01:37:05,380
point-to-point or can it also be done in

2059
01:37:03,250 --> 01:37:10,480
a multicast fashion or in a convergecast

2060
01:37:05,380 --> 01:37:13,150
fashion this is very generic here but

2061
01:37:10,480 --> 01:37:14,919
there are much more problems that can

2062
01:37:13,150 --> 01:37:19,900
arise then if you really want to do

2063
01:37:14,920 --> 01:37:22,239
examples ok regarding flow granularity

2064
01:37:19,900 --> 01:37:24,070
so when you had spring up there was that

2065
01:37:22,239 --> 01:37:26,500
the same issues are being addressed in

2066
01:37:24,070 --> 01:37:28,000
yeah that's why I put this point us in

2067
01:37:26,500 --> 01:37:29,980
of course there are other research

2068
01:37:28,000 --> 01:37:32,560
groups or working groups that address

2069
01:37:29,980 --> 01:37:34,839
several issues and of course we put

2070
01:37:32,560 --> 01:37:39,159
these pointers in to get into discussion

2071
01:37:34,840 --> 01:37:40,989
with them flow granularity so how about

2072
01:37:39,159 --> 01:37:43,780
the processing granularity do you do

2073
01:37:40,989 --> 01:37:45,820
just do it on a packet basis where you

2074
01:37:43,780 --> 01:37:48,489
probably have only a low state

2075
01:37:45,820 --> 01:37:51,190
requirements or do you do it on a more

2076
01:37:48,489 --> 01:37:54,190
message basis so for example we just

2077
01:37:51,190 --> 01:37:57,580
published a paper on doing an image very

2078
01:37:54,190 --> 01:37:59,710
very simple image analysis in a p4

2079
01:37:57,580 --> 01:38:05,800
switch where you find a certain pattern

2080
01:37:59,710 --> 01:38:08,140
in a in a in a MPEG stream so there it's

2081
01:38:05,800 --> 01:38:09,850
not just working that you look on

2082
01:38:08,140 --> 01:38:11,500
individual packets so you have to keep

2083
01:38:09,850 --> 01:38:15,580
state between the packets so it's a lot

2084
01:38:11,500 --> 01:38:17,770
more like a message based analysis or do

2085
01:38:15,580 --> 01:38:19,690
you do another less so on a stream so

2086
01:38:17,770 --> 01:38:22,480
there it really depends on the

2087
01:38:19,690 --> 01:38:26,259
application use case how much state you

2088
01:38:22,480 --> 01:38:29,019
need and in order how to reserve the

2089
01:38:26,260 --> 01:38:30,550
buffers and and so forth for that and

2090
01:38:29,020 --> 01:38:34,090
that's for us also a transport layer

2091
01:38:30,550 --> 01:38:37,239
issue another problem is authentication

2092
01:38:34,090 --> 01:38:39,940
so probably you want to know as an

2093
01:38:37,239 --> 01:38:42,428
endpoint who touched your payload and

2094
01:38:39,940 --> 01:38:46,150
who did which computer who did a certain

2095
01:38:42,429 --> 01:38:47,800
computation so what was changed who made

2096
01:38:46,150 --> 01:38:49,330
the changes maybe how can you

2097
01:38:47,800 --> 01:38:52,510
synchronize the states among these

2098
01:38:49,330 --> 01:38:55,269
changes so there is some in our notion

2099
01:38:52,510 --> 01:38:57,360
also that's also an issue for the

2100
01:38:55,270 --> 01:39:00,770
transport layer to sync these changes

2101
01:38:57,360 --> 01:39:03,449
among the different intermediate No

2102
01:39:00,770 --> 01:39:05,880
okay there are also the East working

2103
01:39:03,449 --> 01:39:09,059
group may have some input or some

2104
01:39:05,880 --> 01:39:11,820
relevant work for this

2105
01:39:09,060 --> 01:39:14,909
another thing is of course security so

2106
01:39:11,820 --> 01:39:20,280
the trend is going towards fully

2107
01:39:14,909 --> 01:39:22,710
encrypted traffic even in in headers so

2108
01:39:20,280 --> 01:39:26,210
how should an intermediate node work or

2109
01:39:22,710 --> 01:39:28,800
do computations on encrypted payload

2110
01:39:26,210 --> 01:39:31,409
that's also a transport layer issue in

2111
01:39:28,800 --> 01:39:33,690
Maya Kay in my opinion that you enable

2112
01:39:31,409 --> 01:39:34,199
that or that you provide solutions for

2113
01:39:33,690 --> 01:39:37,409
that

2114
01:39:34,199 --> 01:39:39,570
so probable solutions could be

2115
01:39:37,409 --> 01:39:42,570
decryption indeed intermediate nodes but

2116
01:39:39,570 --> 01:39:44,159
then you can ask what is the the

2117
01:39:42,570 --> 01:39:46,019
encryption good for maybe you have

2118
01:39:44,159 --> 01:39:49,679
option headers where just that payload

2119
01:39:46,020 --> 01:39:51,659
that is used for computation make it may

2120
01:39:49,679 --> 01:39:54,239
be decrypted with special session keys

2121
01:39:51,659 --> 01:39:56,369
and so forth or homomorphic encryption

2122
01:39:54,239 --> 01:39:59,638
but i guess nobody wants to have that on

2123
01:39:56,369 --> 01:40:02,369
a p4 data plane today yeah but the

2124
01:39:59,639 --> 01:40:03,869
people at the quantum computer control

2125
01:40:02,369 --> 01:40:05,670
networking we're actually talking about

2126
01:40:03,869 --> 01:40:07,440
it so if those things were quantum

2127
01:40:05,670 --> 01:40:09,480
computer it would work if we are looking

2128
01:40:07,440 --> 01:40:14,190
that much in the future then I guess

2129
01:40:09,480 --> 01:40:17,449
this could be an option yeah then

2130
01:40:14,190 --> 01:40:19,500
another question is how about

2131
01:40:17,449 --> 01:40:22,730
retransmission so for example in this

2132
01:40:19,500 --> 01:40:26,420
case we have a scenario where certain

2133
01:40:22,730 --> 01:40:28,888
computations have been done on packets

2134
01:40:26,420 --> 01:40:35,250
and in the lower part of the figure you

2135
01:40:28,889 --> 01:40:37,110
see so in this when the packets when the

2136
01:40:35,250 --> 01:40:38,940
packet passes here these switches then

2137
01:40:37,110 --> 01:40:42,030
these computations have been done on the

2138
01:40:38,940 --> 01:40:45,360
packet and then probably the packet is

2139
01:40:42,030 --> 01:40:47,009
lost so how about who is responsible for

2140
01:40:45,360 --> 01:40:49,710
doing the retransmission and what

2141
01:40:47,010 --> 01:40:52,829
happens with the state that is in the

2142
01:40:49,710 --> 01:40:54,929
switches that is relevant on this packet

2143
01:40:52,829 --> 01:40:58,889
so if the packet is retransmitted have

2144
01:40:54,929 --> 01:41:02,190
these computations have they must they

2145
01:40:58,889 --> 01:41:06,150
be done again and maybe has the state

2146
01:41:02,190 --> 01:41:08,549
must that be revoked so that's really

2147
01:41:06,150 --> 01:41:11,159
getting difficult then for certain use

2148
01:41:08,550 --> 01:41:13,650
cases if you count statistics or the

2149
01:41:11,159 --> 01:41:16,900
state is relevant on how many packets

2150
01:41:13,650 --> 01:41:18,369
so I guess we do not want to have the

2151
01:41:16,900 --> 01:41:20,768
notion of a transaction that is

2152
01:41:18,369 --> 01:41:25,119
revocable regarding the state in the

2153
01:41:20,769 --> 01:41:27,369
switches on that okay

2154
01:41:25,119 --> 01:41:30,159
similar questions raised when you look

2155
01:41:27,369 --> 01:41:32,110
into congestion control for control and

2156
01:41:30,159 --> 01:41:35,409
so forth so these are all questions who

2157
01:41:32,110 --> 01:41:37,119
is actually in charge of doing something

2158
01:41:35,409 --> 01:41:39,070
when something goes wrong or when

2159
01:41:37,119 --> 01:41:41,230
certain things happen in the network

2160
01:41:39,070 --> 01:41:43,239
because we do not have the complexity

2161
01:41:41,230 --> 01:41:45,400
only at the endpoints but there may be

2162
01:41:43,239 --> 01:41:48,509
several intermediate points that do

2163
01:41:45,400 --> 01:41:50,619
computations and changes on the payload

2164
01:41:48,510 --> 01:41:52,739
the thing is there is no simple solution

2165
01:41:50,619 --> 01:41:55,119
there are different features that

2166
01:41:52,739 --> 01:41:58,239
heavily depend on the use cases you want

2167
01:41:55,119 --> 01:42:00,159
to realize and so forth so that's why we

2168
01:41:58,239 --> 01:42:01,659
wanted to raise the discussion so these

2169
01:42:00,159 --> 01:42:03,369
are the typical use cases that have been

2170
01:42:01,659 --> 01:42:07,989
discussed in the working group already

2171
01:42:03,369 --> 01:42:10,119
so data center computing stuff in the

2172
01:42:07,989 --> 01:42:12,098
network we've suggested industrial

2173
01:42:10,119 --> 01:42:14,829
networks and of course you can think of

2174
01:42:12,099 --> 01:42:17,019
the general Internet of doing things and

2175
01:42:14,829 --> 01:42:18,610
you see every use case have different

2176
01:42:17,019 --> 01:42:21,190
requirements and need different

2177
01:42:18,610 --> 01:42:24,639
transport features here so the idea of

2178
01:42:21,190 --> 01:42:28,690
the draft is since there is no one saw

2179
01:42:24,639 --> 01:42:30,849
one solution fits all thing that we

2180
01:42:28,690 --> 01:42:32,589
raise the discussion that we get also

2181
01:42:30,849 --> 01:42:34,269
additional feedback by others what could

2182
01:42:32,590 --> 01:42:37,900
be interesting and that we then think of

2183
01:42:34,269 --> 01:42:40,119
okay do we need new transport protocols

2184
01:42:37,900 --> 01:42:42,969
I don't know do we just have to extend

2185
01:42:40,119 --> 01:42:46,000
them put some options in them how can we

2186
01:42:42,969 --> 01:42:48,789
support these things and yeah I'm happy

2187
01:42:46,000 --> 01:42:52,900
to have a nice discussion on this thank

2188
01:42:48,789 --> 01:42:57,369
you so obviously there's questions Colin

2189
01:42:52,900 --> 01:42:59,440
Perkins as an individual so slightly

2190
01:42:57,369 --> 01:43:01,119
frivolously I'm being amused watching

2191
01:42:59,440 --> 01:43:03,280
people googling the ACE working group

2192
01:43:01,119 --> 01:43:12,369
and finding the Asian captive elephants

2193
01:43:03,280 --> 01:43:14,380
group I I think I mean you're talking

2194
01:43:12,369 --> 01:43:16,030
about how a different application

2195
01:43:14,380 --> 01:43:17,829
scenarios in different use cases

2196
01:43:16,030 --> 01:43:20,320
yeah the transport and and I certainly

2197
01:43:17,829 --> 01:43:23,469
agree that this is that this makes sense

2198
01:43:20,320 --> 01:43:25,539
I think the computation model you're

2199
01:43:23,469 --> 01:43:27,329
using on the intermediate nodes also

2200
01:43:25,539 --> 01:43:29,219
affects the transport

2201
01:43:27,329 --> 01:43:31,829
the more item potent you can make it for

2202
01:43:29,219 --> 01:43:33,510
example the less state you keep in the

2203
01:43:31,829 --> 01:43:35,880
network the easier some of the returns

2204
01:43:33,510 --> 01:43:39,499
of questions clearly get and phonetic

2205
01:43:35,880 --> 01:43:41,999
that so I think there's a clear

2206
01:43:39,499 --> 01:43:43,650
correlation between the computation

2207
01:43:41,999 --> 01:43:44,940
model and needs of the transports and

2208
01:43:43,650 --> 01:43:46,768
they should be discussed together and

2209
01:43:44,940 --> 01:43:51,268
the pregnant programming model mm-hmm I

2210
01:43:46,769 --> 01:43:53,489
fully agree yes and then Dirk and then

2211
01:43:51,269 --> 01:43:55,590
yeah go yeah just to follow up on that

2212
01:43:53,489 --> 01:43:58,379
right so you started with saying if we

2213
01:43:55,590 --> 01:44:00,090
have p4 then we may not be able to have

2214
01:43:58,380 --> 01:44:02,219
the classical transport stack right so I

2215
01:44:00,090 --> 01:44:06,449
think the starting point to me would be

2216
01:44:02,219 --> 01:44:08,639
to classify the you know type of in

2217
01:44:06,449 --> 01:44:10,259
network compute options that we see now

2218
01:44:08,639 --> 01:44:11,999
or in the future that are more

2219
01:44:10,260 --> 01:44:14,010
constrained and what could we do on them

2220
01:44:11,999 --> 01:44:15,360
anyhow right so what is the compute that

2221
01:44:14,010 --> 01:44:17,539
could be done that's a starting point

2222
01:44:15,360 --> 01:44:19,469
that's the motivation to me and I think

2223
01:44:17,539 --> 01:44:21,300
there was all of these you know

2224
01:44:19,469 --> 01:44:22,889
follow-ups on the transport I understand

2225
01:44:21,300 --> 01:44:24,300
that right but without a clear

2226
01:44:22,889 --> 01:44:25,769
understanding what could be computed

2227
01:44:24,300 --> 01:44:28,139
it's very hard to figure out which of

2228
01:44:25,769 --> 01:44:30,420
all these subsets of possible transport

2229
01:44:28,139 --> 01:44:31,920
and session layer features we would need

2230
01:44:30,420 --> 01:44:34,860
for them so you know please have that

2231
01:44:31,920 --> 01:44:40,260
part up front yeah since we are working

2232
01:44:34,860 --> 01:44:42,960
on several examples and and and problems

2233
01:44:40,260 --> 01:44:45,119
on this we actually ran into these

2234
01:44:42,960 --> 01:44:47,610
transport issues so we have several

2235
01:44:45,119 --> 01:44:51,570
things that we did under transport that

2236
01:44:47,610 --> 01:44:53,759
that we did with p4 and it always comes

2237
01:44:51,570 --> 01:44:55,889
up then okay what happens then and then

2238
01:44:53,760 --> 01:44:58,579
and this is actually nothing that should

2239
01:44:55,889 --> 01:45:02,039
be solved by p4 or the programming model

2240
01:44:58,579 --> 01:45:04,380
but yeah I agree that maybe the research

2241
01:45:02,039 --> 01:45:09,929
group should also look into more the

2242
01:45:04,380 --> 01:45:14,039
programming model here there and I'm not

2243
01:45:09,929 --> 01:45:16,590
I think was it a Colin or somebody else

2244
01:45:14,039 --> 01:45:18,119
or Denis I was it was Dave right so the

2245
01:45:16,590 --> 01:45:20,219
it's really the the degree of

2246
01:45:18,119 --> 01:45:22,259
constraints right so in the IOT space

2247
01:45:20,219 --> 01:45:24,300
there were you know RFC is coming up as

2248
01:45:22,260 --> 01:45:26,579
certain constraints on the amount of

2249
01:45:24,300 --> 01:45:28,530
memory and CPU cycles and you know to

2250
01:45:26,579 --> 01:45:30,599
the extent that we can qualify this

2251
01:45:28,530 --> 01:45:32,820
constraint for the notes that we look

2252
01:45:30,599 --> 01:45:34,610
into and then basically say what we can

2253
01:45:32,820 --> 01:45:36,690
do for compute within those constraints

2254
01:45:34,610 --> 01:45:38,369
having that as the starting point and

2255
01:45:36,690 --> 01:45:40,049
then we can look into these transport

2256
01:45:38,369 --> 01:45:40,610
issues required for each of these these

2257
01:45:40,050 --> 01:45:44,389
classes I

2258
01:45:40,610 --> 01:45:47,690
think okay

2259
01:45:44,389 --> 01:45:49,850
Derk and then and then Diego and then

2260
01:45:47,690 --> 01:45:50,710
Dave and then we're not taking any more

2261
01:45:49,850 --> 01:45:54,080
questions

2262
01:45:50,710 --> 01:45:58,330
yeah I'm the Kucha thanks really useful

2263
01:45:54,080 --> 01:46:02,239
discussion of these transfer questions

2264
01:45:58,330 --> 01:46:03,980
just one question do you assume so is

2265
01:46:02,239 --> 01:46:07,790
the the basic computing model that you

2266
01:46:03,980 --> 01:46:10,428
assume that packets flow from one node

2267
01:46:07,790 --> 01:46:13,670
to the other and then some modification

2268
01:46:10,429 --> 01:46:16,040
happens on the yes I really refer to on

2269
01:46:13,670 --> 01:46:18,679
past computation so I do not refer to

2270
01:46:16,040 --> 01:46:22,909
the edge compute models or things like

2271
01:46:18,679 --> 01:46:25,659
that okay so I really refer to

2272
01:46:22,909 --> 01:46:28,339
programmable switches and so forth okay

2273
01:46:25,659 --> 01:46:30,559
so that that could be useful for the for

2274
01:46:28,340 --> 01:46:32,900
the group to distinguish these different

2275
01:46:30,560 --> 01:46:37,520
models and have a good understanding and

2276
01:46:32,900 --> 01:46:40,099
just quickly I think you nicely pointed

2277
01:46:37,520 --> 01:46:44,360
to these even its timing issues for

2278
01:46:40,100 --> 01:46:46,730
example in transport and so I mean what

2279
01:46:44,360 --> 01:46:48,259
we ran into earlier is I mean there are

2280
01:46:46,730 --> 01:46:50,150
released different time scales so you

2281
01:46:48,260 --> 01:46:52,310
know processing or application times

2282
01:46:50,150 --> 01:46:54,199
that's where this the the network in our

2283
01:46:52,310 --> 01:46:57,409
time out and we transmission time time

2284
01:46:54,199 --> 01:46:59,659
time scales so I don't want to sell

2285
01:46:57,409 --> 01:47:02,119
anything but so we have a discussion and

2286
01:46:59,659 --> 01:47:03,820
in IC n based solution in this rice work

2287
01:47:02,119 --> 01:47:11,239
I mentioned so that could be of interest

2288
01:47:03,820 --> 01:47:13,099
okay okay one of the things in the

2289
01:47:11,239 --> 01:47:15,080
discussion between totalus and U is

2290
01:47:13,100 --> 01:47:17,179
precisely that this is one of the I

2291
01:47:15,080 --> 01:47:20,800
guess one of the main challenges we have

2292
01:47:17,179 --> 01:47:24,139
here is precisely making converge H

2293
01:47:20,800 --> 01:47:25,639
patterns and let's say general internet

2294
01:47:24,139 --> 01:47:28,310
patterns and it is something that is a

2295
01:47:25,639 --> 01:47:29,600
real real challenge I would say is one

2296
01:47:28,310 --> 01:47:32,090
of the first things we had to the rest

2297
01:47:29,600 --> 01:47:34,909
because we have here two universes yeah

2298
01:47:32,090 --> 01:47:36,500
that are talking in de Parfum that I was

2299
01:47:34,909 --> 01:47:38,179
getting a list where you were talking

2300
01:47:36,500 --> 01:47:40,219
precisely on security and all the like

2301
01:47:38,179 --> 01:47:42,020
first of all don't believe that quantum

2302
01:47:40,219 --> 01:47:45,770
quantum key distribution at least is not

2303
01:47:42,020 --> 01:47:47,510
so far I can tell you we we are running

2304
01:47:45,770 --> 01:47:49,969
I mean we're running some some pilot

2305
01:47:47,510 --> 01:47:51,830
saying in production network so so we

2306
01:47:49,969 --> 01:47:54,289
could play with this at least with the

2307
01:47:51,830 --> 01:47:57,739
keys not with the rest and perform

2308
01:47:54,289 --> 01:47:59,480
something that there are a couple of

2309
01:47:57,739 --> 01:48:03,409
additional technologies that could be

2310
01:47:59,480 --> 01:48:05,959
worth trying here when is when it can

2311
01:48:03,409 --> 01:48:08,320
was a multi context crypto when it was

2312
01:48:05,960 --> 01:48:11,300
when the kitchen I know that has being

2313
01:48:08,320 --> 01:48:13,340
banned I mean for very good reasons when

2314
01:48:11,300 --> 01:48:16,579
it comes it's a challenge for privacy

2315
01:48:13,340 --> 01:48:21,500
etc in general exchanges in this context

2316
01:48:16,579 --> 01:48:23,599
could have some some play some role to

2317
01:48:21,500 --> 01:48:27,079
play and second and second is something

2318
01:48:23,599 --> 01:48:29,840
when you mention about authentication

2319
01:48:27,079 --> 01:48:32,929
how do I have to look at the ace I have

2320
01:48:29,840 --> 01:48:34,309
not but see in the in SSC we were

2321
01:48:32,929 --> 01:48:37,900
working in something that is called

2322
01:48:34,309 --> 01:48:40,309
proof of transits okay that is

2323
01:48:37,900 --> 01:48:43,549
computationally very simple I would say

2324
01:48:40,309 --> 01:48:45,619
it's doable using before I'll send it

2325
01:48:43,550 --> 01:48:47,329
but just to make the announcement I'll

2326
01:48:45,619 --> 01:48:48,980
share it on the on the list and we can

2327
01:48:47,329 --> 01:48:50,780
talk about this I think in particular

2328
01:48:48,980 --> 01:48:52,759
this blue of transits app application

2329
01:48:50,780 --> 01:48:55,699
could be interesting okay I'm very much

2330
01:48:52,760 --> 01:48:57,280
connected to yeah so regarding the

2331
01:48:55,699 --> 01:49:00,259
second point you mentioned with the

2332
01:48:57,280 --> 01:49:02,000
secure multi-party computation so we do

2333
01:49:00,260 --> 01:49:04,099
also a lot of work in that not in this

2334
01:49:02,000 --> 01:49:07,489
rearm but these are really

2335
01:49:04,099 --> 01:49:10,730
computationally heavy so this is nothing

2336
01:49:07,489 --> 01:49:13,759
I would see today in in a switch so no a

2337
01:49:10,730 --> 01:49:16,308
but I mean there is a well we made some

2338
01:49:13,760 --> 01:49:18,440
time ago a paper that was precisely

2339
01:49:16,309 --> 01:49:20,300
dealing with the idea that you have a

2340
01:49:18,440 --> 01:49:23,570
holy similarly proposed transit this

2341
01:49:20,300 --> 01:49:25,639
accumulated accumulate calculation sorry

2342
01:49:23,570 --> 01:49:27,860
can we can we move this conversation of

2343
01:49:25,639 --> 01:49:31,340
offline because we have still two

2344
01:49:27,860 --> 01:49:33,409
presentations quick comment Dave yeah

2345
01:49:31,340 --> 01:49:34,570
pretty quick so after I read this I

2346
01:49:33,409 --> 01:49:36,710
reached a very different conclusion

2347
01:49:34,570 --> 01:49:38,900
which is that if you have to consider

2348
01:49:36,710 --> 01:49:41,480
all of these issues all over again in

2349
01:49:38,900 --> 01:49:43,820
this slightly changed context we may be

2350
01:49:41,480 --> 01:49:46,129
completely missing the boat in the sense

2351
01:49:43,820 --> 01:49:48,289
that maybe we don't want to have a

2352
01:49:46,130 --> 01:49:50,329
transport layer with an identifiable

2353
01:49:48,289 --> 01:49:53,599
transport protocol for these con for

2354
01:49:50,329 --> 01:49:56,210
these things so I would sort of maybe

2355
01:49:53,599 --> 01:49:58,309
add in here the possible thing that we

2356
01:49:56,210 --> 01:50:00,829
may be exploring a gigantic rabbit

2357
01:49:58,309 --> 01:50:02,599
warren that if we pop up a level and say

2358
01:50:00,829 --> 01:50:05,710
what do we actually need for a

2359
01:50:02,599 --> 01:50:07,760
distributed computation to run on these

2360
01:50:05,710 --> 01:50:10,460
on a given

2361
01:50:07,760 --> 01:50:12,890
underlie underlying topology without

2362
01:50:10,460 --> 01:50:14,900
abstracting out transport separately

2363
01:50:12,890 --> 01:50:16,400
from the computation we may wind up with

2364
01:50:14,900 --> 01:50:18,290
something dramatically simpler and

2365
01:50:16,400 --> 01:50:20,480
dramatically more powerful that's

2366
01:50:18,290 --> 01:50:22,460
actually one of the reasons why we just

2367
01:50:20,480 --> 01:50:24,860
submitted this issue draft and not

2368
01:50:22,460 --> 01:50:26,720
suggested certain solutions because I

2369
01:50:24,860 --> 01:50:29,170
also got a fear oh my god

2370
01:50:26,720 --> 01:50:31,880
which box of the Pandora do we open now

2371
01:50:29,170 --> 01:50:34,580
but we wanted to raise the issues and

2372
01:50:31,880 --> 01:50:36,500
see the discussion so I'm happy to

2373
01:50:34,580 --> 01:50:38,870
discuss this further thank you very much

2374
01:50:36,500 --> 01:50:41,330
so for the last two presentations we're

2375
01:50:38,870 --> 01:50:44,210
really running out of time so please do

2376
01:50:41,330 --> 01:50:47,000
five minutes to state what your problem

2377
01:50:44,210 --> 01:50:49,040
is what your solution is and we'll recap

2378
01:50:47,000 --> 01:50:52,760
we'll regroup it either at an interim

2379
01:50:49,040 --> 01:50:58,660
meeting or at in Vancouver I'm sorry to

2380
01:50:52,760 --> 01:50:58,660
to be the timer here but time is time

2381
01:51:03,700 --> 01:51:08,599
everyone pony from China Mobile and I'll

2382
01:51:06,530 --> 01:51:10,849
give the introduce about the comments of

2383
01:51:08,600 --> 01:51:16,460
computing in network so the draft has

2384
01:51:10,850 --> 01:51:18,950
been updated have been updated to a

2385
01:51:16,460 --> 01:51:21,020
certain version and in the older

2386
01:51:18,950 --> 01:51:23,870
versions we proposed the requirements

2387
01:51:21,020 --> 01:51:27,320
which are new architecture precision and

2388
01:51:23,870 --> 01:51:32,120
embitters intelligence the media change

2389
01:51:27,320 --> 01:51:36,849
from last version who gave more comments

2390
01:51:32,120 --> 01:51:39,230
have been crated and categorized them to

2391
01:51:36,850 --> 01:51:42,680
performance function and the management

2392
01:51:39,230 --> 01:51:46,780
so this this these are other comments we

2393
01:51:42,680 --> 01:51:49,489
cracked it in this version and

2394
01:51:46,780 --> 01:51:51,739
performance you can mod become

2395
01:51:49,489 --> 01:51:55,309
requirement what is written C and the

2396
01:51:51,739 --> 01:51:58,610
reliability which depends on the service

2397
01:51:55,310 --> 01:52:02,210
demand the delay can be divided into in

2398
01:51:58,610 --> 01:52:04,910
time and to on time which corresponding

2399
01:52:02,210 --> 01:52:07,640
to low linsday and the deterministic TV

2400
01:52:04,910 --> 01:52:10,910
latency for example for the industrial

2401
01:52:07,640 --> 01:52:14,120
internet it may need deterministic

2402
01:52:10,910 --> 01:52:17,480
latency and such as the motion control

2403
01:52:14,120 --> 01:52:19,910
and for the consumer internet it may

2404
01:52:17,480 --> 01:52:21,098
need loading say for the gaming and

2405
01:52:19,910 --> 01:52:25,090
video

2406
01:52:21,099 --> 01:52:27,159
video and the reliability includes the

2407
01:52:25,090 --> 01:52:29,909
transmission pass and packet loss rate

2408
01:52:27,159 --> 01:52:34,138
and we can give some existing

2409
01:52:29,909 --> 01:52:37,989
technologies to solve those problems and

2410
01:52:34,139 --> 01:52:40,869
the performance - comment - is in high

2411
01:52:37,989 --> 01:52:43,299
concurrency it is because a number of

2412
01:52:40,869 --> 01:52:47,049
computing nodes increase and we made

2413
01:52:43,300 --> 01:52:51,190
this trip notice some computing and

2414
01:52:47,050 --> 01:52:54,219
other algorithms to different nodes so

2415
01:52:51,190 --> 01:52:57,269
there may be a lot of parallel computing

2416
01:52:54,219 --> 01:52:59,290
between nodes with trend of

2417
01:52:57,270 --> 01:53:01,929
interconnection of everything in the

2418
01:52:59,290 --> 01:53:04,599
future and it will bring a great

2419
01:53:01,929 --> 01:53:07,570
challenge to the network connection and

2420
01:53:04,599 --> 01:53:10,679
the performance to come three is

2421
01:53:07,570 --> 01:53:13,630
security it's not mean the traditional

2422
01:53:10,679 --> 01:53:17,199
security about the data or the network

2423
01:53:13,630 --> 01:53:19,900
it's just because multi domain networks

2424
01:53:17,199 --> 01:53:21,879
may not only be able to communicate who

2425
01:53:19,900 --> 01:53:25,030
ate it with each other as they may need

2426
01:53:21,880 --> 01:53:28,389
to be analyzed analyzed with each other

2427
01:53:25,030 --> 01:53:31,599
such as the protocols for example

2428
01:53:28,389 --> 01:53:33,909
operators network make code tip and go

2429
01:53:31,599 --> 01:53:38,590
deeply into the vertical industrial

2430
01:53:33,909 --> 01:53:41,879
internet in a user site to provide a

2431
01:53:38,590 --> 01:53:45,699
better network service so may bring some

2432
01:53:41,880 --> 01:53:51,310
convenience problems with his operators

2433
01:53:45,699 --> 01:53:53,769
network and the users network and going

2434
01:53:51,310 --> 01:53:56,020
through the function requirement the one

2435
01:53:53,770 --> 01:54:00,159
is computing about scheduling his

2436
01:53:56,020 --> 01:54:03,159
meaning to say and dynamic computing

2437
01:54:00,159 --> 01:54:06,219
power matching is carry out not only

2438
01:54:03,159 --> 01:54:08,829
based on the network status but also

2439
01:54:06,219 --> 01:54:13,030
need to consider computing resource to

2440
01:54:08,829 --> 01:54:16,690
achieve optimal user experience and the

2441
01:54:13,030 --> 01:54:21,190
computer resource information can be

2442
01:54:16,690 --> 01:54:24,070
exposed to it are each other and to is

2443
01:54:21,190 --> 01:54:25,178
function based addressing it means the

2444
01:54:24,070 --> 01:54:28,540
application

2445
01:54:25,179 --> 01:54:32,290
and components deconstructed on the

2446
01:54:28,540 --> 01:54:35,830
server-side and distributed to to the

2447
01:54:32,290 --> 01:54:38,380
cloud platform so the Krait only needs

2448
01:54:35,830 --> 01:54:41,140
to consider about the computing

2449
01:54:38,380 --> 01:54:46,600
functions self but not where the

2450
01:54:41,140 --> 01:54:50,409
computing happening and such as server

2451
01:54:46,600 --> 01:54:54,989
virtual machine as well and there's a

2452
01:54:50,409 --> 01:54:59,339
third requirement of function is network

2453
01:54:54,989 --> 01:55:07,000
okay it's also a very important

2454
01:54:59,340 --> 01:55:09,280
requirement so the kind of requirements

2455
01:55:07,000 --> 01:55:11,830
are the management one is course demon

2456
01:55:09,280 --> 01:55:14,980
management it's true the guarantee is a

2457
01:55:11,830 --> 01:55:17,320
untoned network management to meet the

2458
01:55:14,980 --> 01:55:20,290
needs of different network table not

2459
01:55:17,320 --> 01:55:22,210
table and the performance function which

2460
01:55:20,290 --> 01:55:26,019
invokes course toe and network

2461
01:55:22,210 --> 01:55:29,199
management and this is simple management

2462
01:55:26,020 --> 01:55:32,830
it doesn't mean that we just need a few

2463
01:55:29,199 --> 01:55:35,860
functions to management it is because

2464
01:55:32,830 --> 01:55:39,519
scheduling and cooperation among the

2465
01:55:35,860 --> 01:55:42,339
different networking month operators and

2466
01:55:39,520 --> 01:55:47,199
users are very complex problems so we

2467
01:55:42,340 --> 01:55:50,020
need an effective management system so

2468
01:55:47,199 --> 01:55:53,669
that's all the requirements created in

2469
01:55:50,020 --> 01:55:56,469
this version and next steps one is more

2470
01:55:53,670 --> 01:55:58,929
analysis about the requirements proper

2471
01:55:56,469 --> 01:56:01,510
definition according to different

2472
01:55:58,929 --> 01:56:05,800
scenarios should be done and we also

2473
01:56:01,510 --> 01:56:09,940
work on more discussion on the fly or

2474
01:56:05,800 --> 01:56:11,350
the mailing list that's all thank you

2475
01:56:09,940 --> 01:56:12,940
we don't have time for questions so

2476
01:56:11,350 --> 01:56:19,300
we'll move everything on the list thank

2477
01:56:12,940 --> 01:56:21,610
you okay so

2478
01:56:19,300 --> 01:56:27,159
next we are busily part of the asada

2479
01:56:21,610 --> 01:56:29,739
meeting called CFM happened yesterday

2480
01:56:27,159 --> 01:56:33,579
yesterday morning I know the name is

2481
01:56:29,739 --> 01:56:37,150
kind of confusing there some reasons

2482
01:56:33,579 --> 01:56:43,389
behind it and I believe we are close to

2483
01:56:37,150 --> 01:56:47,379
Soviet after discussion this week so

2484
01:56:43,389 --> 01:56:53,940
basically it's chasing the computer

2485
01:56:47,380 --> 01:56:56,920
education the other said low use case I

2486
01:56:53,940 --> 01:57:00,730
introduced inside the meeting so it is

2487
01:56:56,920 --> 01:57:04,780
the one edge cloud-based the condition

2488
01:57:00,730 --> 01:57:07,388
of AR so basically your mobile your your

2489
01:57:04,780 --> 01:57:10,650
mobile you AR app on your mobile phone

2490
01:57:07,389 --> 01:57:13,840
will send the image or stream of images

2491
01:57:10,650 --> 01:57:16,150
to the edge and then the result of a

2492
01:57:13,840 --> 01:57:19,360
result of the conditioning will come

2493
01:57:16,150 --> 01:57:21,400
back to your mobile phone so face

2494
01:57:19,360 --> 01:57:25,299
recognition is kind of lightweight and

2495
01:57:21,400 --> 01:57:27,839
simple but object and the emotion motion

2496
01:57:25,300 --> 01:57:30,969
recognition can be difficult

2497
01:57:27,840 --> 01:57:36,219
okay so this first slide is really what

2498
01:57:30,969 --> 01:57:40,270
I want to elevate so basically yeah the

2499
01:57:36,219 --> 01:57:43,059
idea comes from that the service to

2500
01:57:40,270 --> 01:57:45,610
service characteristics in the education

2501
01:57:43,059 --> 01:57:47,889
when the service equivalents so there

2502
01:57:45,610 --> 01:57:50,019
will be hundreds of nodes provide the

2503
01:57:47,889 --> 01:57:53,920
equivalent service to cloud to ACTU

2504
01:57:50,020 --> 01:57:55,559
clients and due to the edge is kind of

2505
01:57:53,920 --> 01:58:00,730
limited have a limited resource

2506
01:57:55,559 --> 01:58:03,630
typically the number from 410 server ten

2507
01:58:00,730 --> 01:58:06,549
number ten servers and also the edges

2508
01:58:03,630 --> 01:58:09,389
less reliable than cloud it cannot be

2509
01:58:06,550 --> 01:58:11,710
scaled out scale out so this kind of

2510
01:58:09,389 --> 01:58:15,190
dynamics means

2511
01:58:11,710 --> 01:58:18,010
so the which one is optimal service

2512
01:58:15,190 --> 01:58:22,259
instance to the specific country client

2513
01:58:18,010 --> 01:58:26,320
or specific users it can be a dynamic

2514
01:58:22,260 --> 01:58:30,290
subject to a pregnancy or load Network

2515
01:58:26,320 --> 01:58:32,509
condition etc so it's easy to

2516
01:58:30,290 --> 01:58:35,750
use any cards to address the service

2517
01:58:32,510 --> 01:58:38,630
equivalents but can we make more dynamic

2518
01:58:35,750 --> 01:58:41,270
to adapt to the condition and a second

2519
01:58:38,630 --> 01:58:46,480
condition means the network condition

2520
01:58:41,270 --> 01:58:50,330
and the service condition so Jeffrey

2521
01:58:46,480 --> 01:58:52,459
this is like definition of a challenges

2522
01:58:50,330 --> 01:58:54,650
and another research project what

2523
01:58:52,460 --> 01:58:56,390
happened at the meeting I think this is

2524
01:58:54,650 --> 01:58:58,490
what we would like to know and also I

2525
01:58:56,390 --> 01:59:02,120
have a question there is already in this

2526
01:58:58,490 --> 01:59:03,860
group a a draft on a are at the edge and

2527
01:59:02,120 --> 01:59:05,390
cloud and I would like really to know

2528
01:59:03,860 --> 01:59:07,540
what's the difference yeah

2529
01:59:05,390 --> 01:59:10,340
I will come to that so basically this

2530
01:59:07,540 --> 01:59:12,290
proposed he is trying to leverage any

2531
01:59:10,340 --> 01:59:15,410
cost the entities along the routine

2532
01:59:12,290 --> 01:59:19,790
parts select path the path selecting not

2533
01:59:15,410 --> 01:59:22,460
how the the emphasis on the applications

2534
01:59:19,790 --> 01:59:25,090
use case so there are two challenges

2535
01:59:22,460 --> 01:59:27,920
when is the flow affinity because you

2536
01:59:25,090 --> 01:59:29,990
you should be avoided to loot different

2537
01:59:27,920 --> 01:59:32,840
effects to the of the same flow to

2538
01:59:29,990 --> 01:59:35,330
different service instance this can be

2539
01:59:32,840 --> 01:59:38,180
easily solved if you you able to

2540
01:59:35,330 --> 01:59:39,920
establish a flow table right but

2541
01:59:38,180 --> 01:59:41,810
different can I just ask a clarifying

2542
01:59:39,920 --> 01:59:44,360
question so you're not considering

2543
01:59:41,810 --> 01:59:46,370
hot-hot redundancy here where you want

2544
01:59:44,360 --> 01:59:49,519
every packet of the flow to be routed to

2545
01:59:46,370 --> 01:59:55,760
multiple service instances if you have a

2546
01:59:49,520 --> 01:59:59,900
hot hot high reliability system yeah for

2547
01:59:55,760 --> 02:00:03,260
lavinia tears yeah we so this kind of

2548
01:59:59,900 --> 02:00:09,230
hub spot depends how quickly it will get

2549
02:00:03,260 --> 02:00:13,460
too hot gets hot right so if so for one

2550
02:00:09,230 --> 02:00:16,339
specific a fellow say it's a from the

2551
02:00:13,460 --> 02:00:18,380
this loop solution panel builds it will

2552
02:00:16,340 --> 02:00:20,960
now stop that because it to a break the

2553
02:00:18,380 --> 02:00:24,410
service if we switch that to another one

2554
02:00:20,960 --> 02:00:26,240
did you could you conclude with what

2555
02:00:24,410 --> 02:00:27,800
happened at the site meeting we can

2556
02:00:26,240 --> 02:00:35,540
discuss this at the interim or later

2557
02:00:27,800 --> 02:00:37,430
okay yeah so then several as to

2558
02:00:35,540 --> 02:00:41,840
implementation I introduced to one years

2559
02:00:37,430 --> 02:00:42,630
based on BGP by my company and is a

2560
02:00:41,840 --> 02:00:45,780
contra plane

2561
02:00:42,630 --> 02:00:48,530
basically it's associated to to address

2562
02:00:45,780 --> 02:00:51,900
when any hostages and the one unicast

2563
02:00:48,530 --> 02:00:56,000
adjust to win to every service instance

2564
02:00:51,900 --> 02:00:58,769
so there are banding procedures and

2565
02:00:56,000 --> 02:01:02,270
protocol concept and some preliminary

2566
02:00:58,770 --> 02:01:05,580
tests introduced and also the other

2567
02:01:02,270 --> 02:01:08,100
presentation from rich using also their

2568
02:01:05,580 --> 02:01:10,230
leverage in the costs in context of a

2569
02:01:08,100 --> 02:01:13,350
subsea and V but they are using was

2570
02:01:10,230 --> 02:01:15,089
appears now and this a kind of summary

2571
02:01:13,350 --> 02:01:17,580
so basically the emphasis is on the

2572
02:01:15,090 --> 02:01:19,800
dynamic in the past probably I will call

2573
02:01:17,580 --> 02:01:24,929
it CF and Lancaster to differentiate

2574
02:01:19,800 --> 02:01:27,210
this from CF CF and a seein okay also

2575
02:01:24,929 --> 02:01:30,060
these two similar a few questions

2576
02:01:27,210 --> 02:01:33,330
unanswered sample which is the service

2577
02:01:30,060 --> 02:01:37,050
and is the service replacement in the

2578
02:01:33,330 --> 02:01:40,350
scope but the answer is that the main

2579
02:01:37,050 --> 02:01:43,730
emphasis is on the path selection

2580
02:01:40,350 --> 02:01:46,320
selection not not exactly those service

2581
02:01:43,730 --> 02:01:49,468
placement although that's part of the

2582
02:01:46,320 --> 02:01:52,199
photo solution also what question was

2583
02:01:49,469 --> 02:01:55,590
raised about the relationship with this

2584
02:01:52,199 --> 02:01:58,349
conifer research group and so this

2585
02:01:55,590 --> 02:02:00,900
plantation was mentioned and also one of

2586
02:01:58,350 --> 02:02:03,330
the status and meeting chair emphasized

2587
02:02:00,900 --> 02:02:09,509
that they will focus on the routing

2588
02:02:03,330 --> 02:02:13,679
automation yeah there's been confusion

2589
02:02:09,510 --> 02:02:15,900
because this work uses a macron MC FN

2590
02:02:13,679 --> 02:02:18,090
that has a very different meaning in

2591
02:02:15,900 --> 02:02:20,730
this research group and we are working

2592
02:02:18,090 --> 02:02:25,830
on finding semantics that will make sure

2593
02:02:20,730 --> 02:02:27,388
that we all understand what is what so

2594
02:02:25,830 --> 02:02:30,300
we're out of time

2595
02:02:27,389 --> 02:02:33,060
I think I thank you very much we had

2596
02:02:30,300 --> 02:02:35,400
eight also eight people on on the line

2597
02:02:33,060 --> 02:02:37,560
at one point there are 72 people here at

2598
02:02:35,400 --> 02:02:39,839
work also if people haven't signed the

2599
02:02:37,560 --> 02:02:42,630
blue sheet please come thank you so very

2600
02:02:39,840 --> 02:02:44,270
much for again staying over on Friday we

2601
02:02:42,630 --> 02:02:47,520
plan to have an interim meeting

2602
02:02:44,270 --> 02:02:49,770
virtually sometimes in February that's

2603
02:02:47,520 --> 02:02:51,000
going to go on on the list again if you

2604
02:02:49,770 --> 02:02:53,070
haven't signed the blue sheets or

2605
02:02:51,000 --> 02:02:56,090
haven't subscribed to the least the list

2606
02:02:53,070 --> 02:02:58,490
do it and I would like to thank

2607
02:02:56,090 --> 02:03:01,310
all of you and also obviously my two

2608
02:02:58,490 --> 02:03:02,420
co-chairs and you know where the we call

2609
02:03:01,310 --> 02:03:05,780
ourselves a gem i'ts

2610
02:03:02,420 --> 02:03:07,430
and i hope we have a long and Maurizio's

2611
02:03:05,780 --> 02:03:41,360
a so and I hope we'll have a long life

2612
02:03:07,430 --> 02:03:43,630
thank you three hours that's nothing I

2613
02:03:41,360 --> 02:03:43,630
mean

