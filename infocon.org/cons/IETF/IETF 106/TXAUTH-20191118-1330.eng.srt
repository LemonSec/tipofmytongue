1
00:00:04,700 --> 00:00:15,620
39 times but perfect timing I got here

2
00:00:11,450 --> 00:00:28,300
got to sleep yeah some of the sleep you

3
00:00:15,620 --> 00:00:28,299
were doing yeah were you on that plate

4
00:00:28,359 --> 00:01:18,560
yeah we're on that one I was on is that

5
00:01:17,210 --> 00:01:27,619
the blue sheet in front of you

6
00:01:18,560 --> 00:01:39,350
yep is it moving around so now it is

7
00:01:27,619 --> 00:01:50,649
time now it's time reinitialize he

8
00:01:39,350 --> 00:01:50,649
signed on one there's two of them okay

9
00:01:52,260 --> 00:02:15,220
okay so this is here we can stop who's

10
00:01:57,940 --> 00:02:17,860
here okay okay I'm gonna start the TX

11
00:02:15,220 --> 00:02:19,270
Bob session we've got a big agenda so

12
00:02:17,860 --> 00:02:25,110
we're gonna get moving through some

13
00:02:19,270 --> 00:02:31,260
things the obligatory note well and

14
00:02:25,110 --> 00:02:31,260
let's see if I hear is this hard Oh

15
00:02:36,150 --> 00:02:41,019
is this better

16
00:02:38,160 --> 00:02:44,320
okay or would you rather I just shouted

17
00:02:41,019 --> 00:02:57,820
okay we're gonna get rolling the Katori

18
00:02:44,320 --> 00:03:05,530
note well here's our agenda there we go

19
00:02:57,820 --> 00:03:22,609
yeah sort of fits onto their bottom

20
00:03:05,530 --> 00:03:25,679
right which one Wow

21
00:03:22,610 --> 00:03:25,679
[Music]

22
00:03:27,959 --> 00:03:31,420
and he thought feedback so we've got our

23
00:03:30,700 --> 00:03:34,480
note-taker

24
00:03:31,420 --> 00:03:35,048
tony nataline volunteered for that thank

25
00:03:34,480 --> 00:03:43,450
you Tony

26
00:03:35,049 --> 00:03:50,620
oh well it's it's an ether pad Mike Mike

27
00:03:43,450 --> 00:03:56,530
would you like to help Tony okay any

28
00:03:50,620 --> 00:04:00,720
feedback on the agenda if not I'm going

29
00:03:56,530 --> 00:04:03,540
to turn it over to let's see

30
00:04:00,720 --> 00:04:04,950
yeah there we go okay oh I bet if I push

31
00:04:03,540 --> 00:04:09,810
the right button it would have gone

32
00:04:04,950 --> 00:04:12,810
right there okay so good afternoon

33
00:04:09,810 --> 00:04:15,360
welcome everybody my colleague dick Hart

34
00:04:12,810 --> 00:04:21,110
forgot to mention that he is take heart

35
00:04:15,360 --> 00:04:24,870
and I'm your own chef and this is the T

36
00:04:21,110 --> 00:04:29,160
transactional authorization both a

37
00:04:24,870 --> 00:04:32,040
little bit of background and some

38
00:04:29,160 --> 00:04:35,790
settings towards what we would like to

39
00:04:32,040 --> 00:04:38,730
achieve here today so we have a number

40
00:04:35,790 --> 00:04:43,410
of proposals with some connections

41
00:04:38,730 --> 00:04:49,250
between them that either extend all to

42
00:04:43,410 --> 00:04:49,250
some degree we do the old Stu protocol

43
00:04:50,000 --> 00:04:57,750
we ended up having this buff meeting

44
00:04:54,390 --> 00:05:02,789
this buff by definition is not working

45
00:04:57,750 --> 00:05:07,020
group forming however we might as a

46
00:05:02,790 --> 00:05:09,360
group decide that this is worthy of a

47
00:05:07,020 --> 00:05:11,340
working group and then we will move

48
00:05:09,360 --> 00:05:13,590
forward in that direction

49
00:05:11,340 --> 00:05:16,409
but not today we don't have a draft

50
00:05:13,590 --> 00:05:24,450
charter we're not planning on doing any

51
00:05:16,410 --> 00:05:28,010
humps the main goal for today is to see

52
00:05:24,450 --> 00:05:33,300
if we have commonality in the room on

53
00:05:28,010 --> 00:05:36,930
what the problem is so if we if it turns

54
00:05:33,300 --> 00:05:39,900
out that we have through it that we have

55
00:05:36,930 --> 00:05:43,860
three worthy proposals but they're

56
00:05:39,900 --> 00:05:50,909
completely unrelated and there's no no

57
00:05:43,860 --> 00:05:54,360
no connection no one direction that

58
00:05:50,910 --> 00:05:59,700
would serve as a basis for a working

59
00:05:54,360 --> 00:06:02,669
group we will not continue in this form

60
00:05:59,700 --> 00:06:05,880
format and each of the proposals will

61
00:06:02,669 --> 00:06:10,140
will need to find its own way if we do

62
00:06:05,880 --> 00:06:14,370
see that there is a problem statement

63
00:06:10,140 --> 00:06:18,960
there is understanding and concerns us

64
00:06:14,370 --> 00:06:24,380
about a set of problems in the oath to

65
00:06:18,960 --> 00:06:27,799
protocol and note that I'm saying a

66
00:06:24,380 --> 00:06:30,630
problem statement rather than this

67
00:06:27,800 --> 00:06:33,120
technical solution if we do have

68
00:06:30,630 --> 00:06:37,500
commonality around this problem

69
00:06:33,120 --> 00:06:42,240
statement then there are several ways we

70
00:06:37,500 --> 00:06:45,090
can deal with it and I could come up

71
00:06:42,240 --> 00:06:49,310
with with four for now so we could

72
00:06:45,090 --> 00:06:52,530
decide to form a new working group

73
00:06:49,310 --> 00:06:56,400
around transactional authorization

74
00:06:52,530 --> 00:07:00,090
or we could say this is like the same

75
00:06:56,400 --> 00:07:03,210
audience a US has been doing it for a

76
00:07:00,090 --> 00:07:06,000
while we this can go back to the earth

77
00:07:03,210 --> 00:07:10,109
working group or maybe someone could

78
00:07:06,000 --> 00:07:13,440
come up with a non ITF a group that's

79
00:07:10,110 --> 00:07:17,370
interested in in carrying this work on

80
00:07:13,440 --> 00:07:20,850
or maybe there's simply no interest in

81
00:07:17,370 --> 00:07:23,490
any case which even though you will see

82
00:07:20,850 --> 00:07:26,340
presentations about technical solutions

83
00:07:23,490 --> 00:07:29,760
our main focus as a group for today is

84
00:07:26,340 --> 00:07:34,820
on the problem statement on the use

85
00:07:29,760 --> 00:07:39,030
cases and we would like to understand

86
00:07:34,820 --> 00:07:43,290
whether this or each of their proposals

87
00:07:39,030 --> 00:07:48,119
is a potential extension to us to

88
00:07:43,290 --> 00:07:51,480
whether this makes sense as a standalone

89
00:07:48,120 --> 00:07:56,120
non backward compatible protocol so this

90
00:07:51,480 --> 00:08:02,700
will be part of the considerations that

91
00:07:56,120 --> 00:08:05,550
we will go through as we the area

92
00:08:02,700 --> 00:08:08,870
directors in the community work through

93
00:08:05,550 --> 00:08:13,340
this decision were to take this work

94
00:08:08,870 --> 00:08:13,340
questions comments before we continue

95
00:08:13,880 --> 00:08:23,150
all right okay Justin

96
00:08:32,059 --> 00:08:45,779
stairs are lame alright alright hi

97
00:08:42,299 --> 00:08:49,620
everybody and so this is about some of

98
00:08:45,779 --> 00:08:51,570
the limitations of both too but within

99
00:08:49,620 --> 00:08:53,310
us with a particular focus for the kinds

100
00:08:51,570 --> 00:08:55,589
of things that are being addressed by

101
00:08:53,310 --> 00:08:58,500
all of the various extensions and

102
00:08:55,589 --> 00:09:01,050
applications and stuff of a wall - now

103
00:08:58,500 --> 00:09:02,700
this has been something that's a topic

104
00:09:01,050 --> 00:09:04,140
near my heart for a while to the point

105
00:09:02,700 --> 00:09:05,850
that I actually gave an entire

106
00:09:04,140 --> 00:09:10,080
presentation on everything that's wrong

107
00:09:05,850 --> 00:09:12,360
with oauth2 at identify in 2018 which is

108
00:09:10,080 --> 00:09:14,550
where a lot of my thinking in this space

109
00:09:12,360 --> 00:09:15,870
kind of kicked off that's on YouTube you

110
00:09:14,550 --> 00:09:18,240
can go look that up I'm not gonna go

111
00:09:15,870 --> 00:09:21,150
over it here but basically the world

112
00:09:18,240 --> 00:09:25,380
that we're in right now is that I ought

113
00:09:21,150 --> 00:09:28,140
to started out as two nice simple rfcs

114
00:09:25,380 --> 00:09:30,600
they had one job they actually did it

115
00:09:28,140 --> 00:09:33,870
pretty well but that's not what the

116
00:09:30,600 --> 00:09:35,880
OAuth world looks like today arguably in

117
00:09:33,870 --> 00:09:38,160
order to make a good Roth deployment

118
00:09:35,880 --> 00:09:40,080
that fits your use cases you've got to

119
00:09:38,160 --> 00:09:42,360
know how to navigate this pile and

120
00:09:40,080 --> 00:09:44,130
figure out like oh you know am I gonna

121
00:09:42,360 --> 00:09:46,230
need device slows am I gonna need jots

122
00:09:44,130 --> 00:09:48,360
if I'm gonna be doing shots there's like

123
00:09:46,230 --> 00:09:49,709
three different job ECP's that I need to

124
00:09:48,360 --> 00:09:51,660
understand and figure out how they fit

125
00:09:49,709 --> 00:09:54,359
together to do what I'm supposed to be

126
00:09:51,660 --> 00:09:55,860
doing here all of that is stuff you have

127
00:09:54,360 --> 00:09:57,600
to understand before you write the

128
00:09:55,860 --> 00:10:02,339
application which is the part that you

129
00:09:57,600 --> 00:10:03,779
actually care about and so there's

130
00:10:02,339 --> 00:10:05,550
there's a lot of issues just with the

131
00:10:03,779 --> 00:10:07,800
growing complexity of the OAuth world a

132
00:10:05,550 --> 00:10:10,979
lot of problems with the OAuth protocol

133
00:10:07,800 --> 00:10:14,310
come from its overuse of the front

134
00:10:10,980 --> 00:10:15,900
channel as a communication mechanism now

135
00:10:14,310 --> 00:10:17,459
the front channel is one of OS greatest

136
00:10:15,900 --> 00:10:18,870
innovations in that it allows a user to

137
00:10:17,459 --> 00:10:21,420
be present and the Browse is really

138
00:10:18,870 --> 00:10:23,850
flexible but it's terrible from a

139
00:10:21,420 --> 00:10:25,290
security perspective and there's a lot

140
00:10:23,850 --> 00:10:27,089
of limitations on what you can put

141
00:10:25,290 --> 00:10:28,469
through the browser this wouldn't be a

142
00:10:27,089 --> 00:10:30,540
problem except that OAuth puts

143
00:10:28,470 --> 00:10:33,780
absolutely everything through the front

144
00:10:30,540 --> 00:10:35,689
channel and especially there's the

145
00:10:33,780 --> 00:10:38,069
problem with if you're doing one of

146
00:10:35,690 --> 00:10:40,890
interactive flows so off code

147
00:10:38,070 --> 00:10:42,960
or implicit then you have to start

148
00:10:40,890 --> 00:10:45,689
everything in the front channel before

149
00:10:42,960 --> 00:10:47,820
you can do anything else so oh all kind

150
00:10:45,690 --> 00:10:49,770
of routes you down that one space

151
00:10:47,820 --> 00:10:50,940
specifically this is enough of a problem

152
00:10:49,770 --> 00:10:53,250
in the OAuth world that we've got a

153
00:10:50,940 --> 00:10:55,200
whole suite of specification some of

154
00:10:53,250 --> 00:10:57,060
them conflicting with each other too

155
00:10:55,200 --> 00:10:58,260
with that tell you how to deal with

156
00:10:57,060 --> 00:11:00,810
everything that's in the front channel

157
00:10:58,260 --> 00:11:04,770
right and some of these still work some

158
00:11:00,810 --> 00:11:07,170
of them don't and then we've got options

159
00:11:04,770 --> 00:11:09,420
in the OAuth protocol that we now

160
00:11:07,170 --> 00:11:10,469
realize are really not that good of an

161
00:11:09,420 --> 00:11:12,360
idea anymore

162
00:11:10,470 --> 00:11:14,430
seemed like a good optimization at the

163
00:11:12,360 --> 00:11:15,570
time to have an implicit flow that did

164
00:11:14,430 --> 00:11:17,370
everything through the front channel

165
00:11:15,570 --> 00:11:21,900
we're realizing today that there are

166
00:11:17,370 --> 00:11:23,520
some very strong limitations to that the

167
00:11:21,900 --> 00:11:25,680
biggest drawback being people see this

168
00:11:23,520 --> 00:11:27,900
and see oh it's therefore it must be

169
00:11:25,680 --> 00:11:29,670
secure and I can just go use it and not

170
00:11:27,900 --> 00:11:32,420
have to understand anything else in that

171
00:11:29,670 --> 00:11:37,380
pile which has caused very real-world

172
00:11:32,420 --> 00:11:39,300
exploits Roth is limited around a single

173
00:11:37,380 --> 00:11:41,040
resource owner it is a delegation

174
00:11:39,300 --> 00:11:42,630
protocol that assumes that the person

175
00:11:41,040 --> 00:11:44,329
using the application is the person that

176
00:11:42,630 --> 00:11:46,680
says it's okay to use the application

177
00:11:44,330 --> 00:11:49,890
user managed access gave us a way to

178
00:11:46,680 --> 00:11:53,459
talk about a secondary requesting party

179
00:11:49,890 --> 00:11:54,990
but it is enough of a separate protocol

180
00:11:53,460 --> 00:11:57,360
even though it's built on top of OAuth 2

181
00:11:54,990 --> 00:11:59,160
that you don't actually collapse back

182
00:11:57,360 --> 00:12:01,050
into the single user use cases o auth

183
00:11:59,160 --> 00:12:03,329
cleanly we tried to do that when we were

184
00:12:01,050 --> 00:12:05,040
writing OMA to couldn't quite get all

185
00:12:03,330 --> 00:12:08,490
the way there because of limitations and

186
00:12:05,040 --> 00:12:10,860
how a lot is structured uh auth was

187
00:12:08,490 --> 00:12:12,420
built and defined in a static world

188
00:12:10,860 --> 00:12:14,760
where you knew the clients that were

189
00:12:12,420 --> 00:12:16,530
talking to the resource overs that were

190
00:12:14,760 --> 00:12:17,790
talking to the api's and by the way we

191
00:12:16,530 --> 00:12:19,949
assumed that everything was all going to

192
00:12:17,790 --> 00:12:22,290
be web servers probably but mobile might

193
00:12:19,950 --> 00:12:24,600
be a thing someday right it's a very

194
00:12:22,290 --> 00:12:26,579
very different world here and we've

195
00:12:24,600 --> 00:12:28,380
started to address that in the off space

196
00:12:26,580 --> 00:12:29,760
with dynamic client registration and

197
00:12:28,380 --> 00:12:32,310
service discovery and all of this other

198
00:12:29,760 --> 00:12:35,330
stuff but there's a lot of cases such as

199
00:12:32,310 --> 00:12:37,709
ephemeral single page applications and

200
00:12:35,330 --> 00:12:39,180
ephemeral native clients that this

201
00:12:37,710 --> 00:12:40,680
doesn't really fit for and we're

202
00:12:39,180 --> 00:12:43,349
starting to see cases where we've got

203
00:12:40,680 --> 00:12:45,689
ephemeral resource servers that OS

204
00:12:43,350 --> 00:12:49,290
models really don't have a good mapping

205
00:12:45,690 --> 00:12:51,000
for so even the ways that we've tried to

206
00:12:49,290 --> 00:12:51,819
expand OAuth doesn't quite reach all the

207
00:12:51,000 --> 00:12:53,770
way there

208
00:12:51,820 --> 00:12:55,210
there's all of the different issues of

209
00:12:53,770 --> 00:12:56,319
token presentation if you come to the

210
00:12:55,210 --> 00:12:58,510
OAuth meetings this week we're gonna be

211
00:12:56,320 --> 00:12:59,680
talking about pop and deep hop there's

212
00:12:58,510 --> 00:13:02,500
been a lot of work that was done on

213
00:12:59,680 --> 00:13:04,390
token binding that didn't really work as

214
00:13:02,500 --> 00:13:06,520
well as you know some people got really

215
00:13:04,390 --> 00:13:09,310
excited about it but it turned out to

216
00:13:06,520 --> 00:13:13,449
not really be good for everybody

217
00:13:09,310 --> 00:13:15,910
scopes are an absolute mess they're one

218
00:13:13,450 --> 00:13:18,010
of the really good ideas in OAuth 2

219
00:13:15,910 --> 00:13:20,829
allowing people to say these are the

220
00:13:18,010 --> 00:13:22,569
slices of my API that I'm gonna get be

221
00:13:20,830 --> 00:13:25,150
able to give you but people look at it

222
00:13:22,570 --> 00:13:28,510
as just kind of a and all-you-can-eat

223
00:13:25,150 --> 00:13:30,040
buffet because scopes can mean lots and

224
00:13:28,510 --> 00:13:31,240
lots of different things there's lots of

225
00:13:30,040 --> 00:13:34,180
different dimensions and we're gonna be

226
00:13:31,240 --> 00:13:36,310
talking about rich authorization

227
00:13:34,180 --> 00:13:40,810
requests which allow us to add some

228
00:13:36,310 --> 00:13:42,579
structure to that but there's more than

229
00:13:40,810 --> 00:13:44,229
one way to talk about that all right

230
00:13:42,580 --> 00:13:46,240
we've got a resource indicator we've got

231
00:13:44,230 --> 00:13:47,880
an audience parameter from if you go

232
00:13:46,240 --> 00:13:50,320
back to the to the pop token drafts

233
00:13:47,880 --> 00:13:51,280
we've got the claims parameter from OID

234
00:13:50,320 --> 00:13:53,530
see we've got the new bridge

235
00:13:51,280 --> 00:13:56,530
authorizations requests all of these are

236
00:13:53,530 --> 00:13:58,089
kind of talking about the same type of

237
00:13:56,530 --> 00:14:00,310
thing where it's like this is the kind

238
00:13:58,090 --> 00:14:02,290
of thing that I want to get and they

239
00:14:00,310 --> 00:14:03,520
they don't all play together very nicely

240
00:14:02,290 --> 00:14:05,860
this is something that we're actually

241
00:14:03,520 --> 00:14:07,630
actively struggling with in the rich

242
00:14:05,860 --> 00:14:09,730
authorizations requests draft right now

243
00:14:07,630 --> 00:14:11,590
and how does this new structure relate

244
00:14:09,730 --> 00:14:13,330
to the existing structure of resource

245
00:14:11,590 --> 00:14:14,830
parameter and scopes it doesn't even

246
00:14:13,330 --> 00:14:16,540
talk about audience and claims in that

247
00:14:14,830 --> 00:14:18,880
draft yet we probably will have to at

248
00:14:16,540 --> 00:14:21,010
some point because what we're finding in

249
00:14:18,880 --> 00:14:24,700
the OAuth world is this massive Venn

250
00:14:21,010 --> 00:14:26,350
diagram of extensions that like trying

251
00:14:24,700 --> 00:14:29,110
to figure out okay when you see the word

252
00:14:26,350 --> 00:14:31,810
the the letters aud together is this the

253
00:14:29,110 --> 00:14:34,480
audience field of a jot or is it the

254
00:14:31,810 --> 00:14:36,640
audience designator of a pop token

255
00:14:34,480 --> 00:14:41,020
request or is it the resource servers

256
00:14:36,640 --> 00:14:44,170
identifier and if you're using a aged

257
00:14:41,020 --> 00:14:46,150
authorization request then you now

258
00:14:44,170 --> 00:14:47,610
suddenly have a namespace collision

259
00:14:46,150 --> 00:14:50,110
issue where he didn't have one before

260
00:14:47,610 --> 00:14:52,780
which we ran into that with the the

261
00:14:50,110 --> 00:14:56,200
introspection response draft trying to

262
00:14:52,780 --> 00:14:57,670
register a bunch of stuff because really

263
00:14:56,200 --> 00:15:01,150
we're basically getting to a point right

264
00:14:57,670 --> 00:15:02,469
now where oo auth does its job very well

265
00:15:01,150 --> 00:15:04,380
and it's not going anywhere

266
00:15:02,470 --> 00:15:07,500
but

267
00:15:04,380 --> 00:15:09,630
we are seeing the cracks around places

268
00:15:07,500 --> 00:15:11,310
where it's it doesn't it was never

269
00:15:09,630 --> 00:15:13,080
intended to do a particular job and it

270
00:15:11,310 --> 00:15:14,550
doesn't do those bits very well we're

271
00:15:13,080 --> 00:15:23,000
trying to patch them over with a lot of

272
00:15:14,550 --> 00:15:25,589
different things Thanks

273
00:15:23,000 --> 00:15:27,500
so it in the agenda here we've got a

274
00:15:25,590 --> 00:15:30,420
number of background pieces around

275
00:15:27,500 --> 00:15:32,100
current issues new issues Torsten if you

276
00:15:30,420 --> 00:15:33,900
want to come on up here somebody have

277
00:15:32,100 --> 00:15:37,650
any questions on you want to come up

278
00:15:33,900 --> 00:15:39,810
please thank you earn to ask Justin on

279
00:15:37,650 --> 00:15:41,430
what he's talked about here we'll have a

280
00:15:39,810 --> 00:15:42,810
bunch other time for discussion later on

281
00:15:41,430 --> 00:15:44,790
us yeah I'm gonna be back up at least

282
00:15:42,810 --> 00:15:47,160
two more times on the stage so there's

283
00:15:44,790 --> 00:15:52,410
plenty of time to yell at me and there

284
00:15:47,160 --> 00:15:54,120
stairs at the end of the stage hi hi so

285
00:15:52,410 --> 00:15:55,829
this is I'm just checking so what you're

286
00:15:54,120 --> 00:15:57,570
saying is we're fielding clarifying

287
00:15:55,830 --> 00:15:59,370
questions now only but we're gonna have

288
00:15:57,570 --> 00:16:01,230
some time to chat after this background

289
00:15:59,370 --> 00:16:04,610
stuff is done yes thank you for

290
00:16:01,230 --> 00:16:04,610
clarifying my clarification

291
00:16:21,570 --> 00:16:27,310
yes I've got all my slides in one deck

292
00:16:24,310 --> 00:16:31,989
and I then dynamically decide where I

293
00:16:27,310 --> 00:16:35,500
cut off right okay hi everybody I'm

294
00:16:31,990 --> 00:16:37,899
claustrophobia so calm and I was asked

295
00:16:35,500 --> 00:16:44,290
to contribute to this discussion as well

296
00:16:37,899 --> 00:16:47,560
the perspective I'm taking is I would

297
00:16:44,290 --> 00:16:52,959
like to talk about requirements that I

298
00:16:47,560 --> 00:16:56,709
see in the space I am working in which

299
00:16:52,959 --> 00:16:59,739
is more around using or for would say

300
00:16:56,709 --> 00:17:02,319
more security sensitive api's in the

301
00:16:59,740 --> 00:17:06,150
space of open banking the financial

302
00:17:02,320 --> 00:17:08,290
industry strong identity attestation

303
00:17:06,150 --> 00:17:12,780
qualified electronic signatures a

304
00:17:08,290 --> 00:17:15,309
healthy government what I've seen is a

305
00:17:12,780 --> 00:17:18,520
common set of requirements that

306
00:17:15,309 --> 00:17:23,199
ooofff does not really fulfill today

307
00:17:18,520 --> 00:17:25,030
quite well that could be solved in

308
00:17:23,199 --> 00:17:30,250
different ways we're going to talk about

309
00:17:25,030 --> 00:17:32,740
that later on the use cases I'm

310
00:17:30,250 --> 00:17:34,600
presenting are based on my work in that

311
00:17:32,740 --> 00:17:37,809
in the financial industry so yes I've

312
00:17:34,600 --> 00:17:40,659
come built an open banking ecosystem but

313
00:17:37,809 --> 00:17:42,250
I also helped a bank in the context of

314
00:17:40,660 --> 00:17:45,400
the payment service directive to and the

315
00:17:42,250 --> 00:17:50,230
European Union to build or off based

316
00:17:45,400 --> 00:17:53,200
api's and did some work in the cloud

317
00:17:50,230 --> 00:17:54,700
signature area where we helped or where

318
00:17:53,200 --> 00:17:57,520
I'll have the clock signature consortium

319
00:17:54,700 --> 00:17:59,440
to adopt ooofff and also had them some

320
00:17:57,520 --> 00:18:01,929
discussions with people in a health and

321
00:17:59,440 --> 00:18:06,120
eat government space to just make sure

322
00:18:01,929 --> 00:18:10,320
that my hypothesis work for them as well

323
00:18:06,120 --> 00:18:12,939
alright let me give you an example first

324
00:18:10,320 --> 00:18:18,730
who here in the room doesn't know what

325
00:18:12,940 --> 00:18:25,870
PSD 2 means PSD to pay

326
00:18:18,730 --> 00:18:28,179
served what it means okay the people

327
00:18:25,870 --> 00:18:33,790
here in the room that know what test2

328
00:18:28,179 --> 00:18:38,169
stands for please raise your hand oh I

329
00:18:33,790 --> 00:18:40,120
knew I knew that would came up all right

330
00:18:38,169 --> 00:18:42,280
so the payment service directive - is a

331
00:18:40,120 --> 00:18:45,100
regulation in the European Union that

332
00:18:42,280 --> 00:18:48,668
our forces all banks all financial

333
00:18:45,100 --> 00:18:51,370
institutions to open up ap is to let

334
00:18:48,669 --> 00:18:54,400
third party access account information

335
00:18:51,370 --> 00:18:57,939
and initiate payments and there are some

336
00:18:54,400 --> 00:19:00,760
very interesting requirements that the

337
00:18:57,940 --> 00:19:04,510
legislation and the require the related

338
00:19:00,760 --> 00:19:07,990
technical requirements oblige the banks

339
00:19:04,510 --> 00:19:10,830
are and the TPP's arm to fulfill one of

340
00:19:07,990 --> 00:19:13,360
them is that for example for a payment

341
00:19:10,830 --> 00:19:16,360
initiation area shape a credit transfer

342
00:19:13,360 --> 00:19:20,260
for example the user needs to consent to

343
00:19:16,360 --> 00:19:21,850
the individual request and not only it

344
00:19:20,260 --> 00:19:24,970
needs to a consent to the individual

345
00:19:21,850 --> 00:19:28,959
request the solution also needs to make

346
00:19:24,970 --> 00:19:31,750
sure that the lincoln between the

347
00:19:28,960 --> 00:19:34,059
consent that the user has given and the

348
00:19:31,750 --> 00:19:36,880
execute note that payment is really

349
00:19:34,059 --> 00:19:39,250
strong so in the end the user needs to

350
00:19:36,880 --> 00:19:41,350
really consent to the amounts the P and

351
00:19:39,250 --> 00:19:44,650
so on and all this data all need to be

352
00:19:41,350 --> 00:19:47,830
carried through and to be enforced at

353
00:19:44,650 --> 00:19:50,559
the resource server this is really huge

354
00:19:47,830 --> 00:19:52,449
because in the in the past we just said

355
00:19:50,559 --> 00:19:57,280
something like oh please give me access

356
00:19:52,450 --> 00:19:58,799
to your profile data that's no longer

357
00:19:57,280 --> 00:20:01,389
sufficient for these kind of use cases

358
00:19:58,799 --> 00:20:05,860
so what we typically see is a structure

359
00:20:01,390 --> 00:20:10,440
like this in such a transaction the

360
00:20:05,860 --> 00:20:13,149
client needs to ask to get consent to

361
00:20:10,440 --> 00:20:16,750
send money from a certain account to

362
00:20:13,150 --> 00:20:18,820
another account and this authorization

363
00:20:16,750 --> 00:20:21,429
data object also contains the amount of

364
00:20:18,820 --> 00:20:23,830
the currency from a technical

365
00:20:21,429 --> 00:20:26,410
perspective that means the a/s needs to

366
00:20:23,830 --> 00:20:29,860
render a really dynamic user consent

367
00:20:26,410 --> 00:20:32,630
screen so no longer static strings and

368
00:20:29,860 --> 00:20:35,570
just a string replacement for that

369
00:20:32,630 --> 00:20:37,490
static string value and you need to also

370
00:20:35,570 --> 00:20:41,659
carry that through with the access token

371
00:20:37,490 --> 00:20:45,290
and in the end this is becoming the

372
00:20:41,660 --> 00:20:47,660
scope in a more conceptual sense of the

373
00:20:45,290 --> 00:20:53,360
access token and it's also transactional

374
00:20:47,660 --> 00:20:56,600
because the TPPA may only execute that

375
00:20:53,360 --> 00:20:59,360
payment once that's I think it's obvious

376
00:20:56,600 --> 00:21:02,810
and there are all marked samples I mean

377
00:20:59,360 --> 00:21:03,770
it could do it twice right access to

378
00:21:02,810 --> 00:21:06,350
account information

379
00:21:03,770 --> 00:21:09,050
it says similar use case but a bit

380
00:21:06,350 --> 00:21:12,320
difference here the client really needs

381
00:21:09,050 --> 00:21:15,100
to request what concrete actions it

382
00:21:12,320 --> 00:21:18,500
wants to execute on what kind of

383
00:21:15,100 --> 00:21:21,290
resources in that case those are the

384
00:21:18,500 --> 00:21:24,230
different account numbers and the client

385
00:21:21,290 --> 00:21:27,020
for example might ask for get just get

386
00:21:24,230 --> 00:21:29,330
access for the balance for that account

387
00:21:27,020 --> 00:21:31,460
numbers but also to get access to the

388
00:21:29,330 --> 00:21:33,949
transactions that could for example be

389
00:21:31,460 --> 00:21:38,000
and request by a personal financial

390
00:21:33,950 --> 00:21:40,370
finance management software and it also

391
00:21:38,000 --> 00:21:47,330
contains information about how long that

392
00:21:40,370 --> 00:21:49,969
permission should be valid the third

393
00:21:47,330 --> 00:21:52,879
example it's in the arena of qualified

394
00:21:49,970 --> 00:21:54,830
electronic signatures in the European

395
00:21:52,880 --> 00:21:57,680
Union there is a I believe a lot of

396
00:21:54,830 --> 00:21:59,330
regulations and directives and one of

397
00:21:57,680 --> 00:22:02,750
those directives is called a Ida's and

398
00:21:59,330 --> 00:22:05,659
the iris makes defines a kind of

399
00:22:02,750 --> 00:22:10,040
electronic signature that is equivalent

400
00:22:05,660 --> 00:22:12,860
to a written signature so one can honor

401
00:22:10,040 --> 00:22:16,310
on a smartphone or a computer create a

402
00:22:12,860 --> 00:22:20,000
signature that's legally binding clearly

403
00:22:16,310 --> 00:22:22,460
there are really strong security

404
00:22:20,000 --> 00:22:24,400
requirements around that and when it

405
00:22:22,460 --> 00:22:27,830
comes to authorization of such a process

406
00:22:24,400 --> 00:22:30,770
the user needs to authorize several

407
00:22:27,830 --> 00:22:35,270
things first of all what's a certificate

408
00:22:30,770 --> 00:22:36,980
being used to create that signature what

409
00:22:35,270 --> 00:22:39,290
documents are being signed and you

410
00:22:36,980 --> 00:22:40,790
typically need to have you typically

411
00:22:39,290 --> 00:22:42,830
have an hash of the author of the

412
00:22:40,790 --> 00:22:44,780
document and not the document itself for

413
00:22:42,830 --> 00:22:46,370
privacy reasons and you also need to

414
00:22:44,780 --> 00:22:49,100
explain to the user

415
00:22:46,370 --> 00:22:52,520
what documents are going to be signed

416
00:22:49,100 --> 00:22:59,110
based on that confirmation and there are

417
00:22:52,520 --> 00:23:03,020
other more technical data and to sum up

418
00:22:59,110 --> 00:23:05,199
there's an example that looks really

419
00:23:03,020 --> 00:23:09,710
really familiar which is open ID Connect

420
00:23:05,200 --> 00:23:13,340
also open ID Connect has really specific

421
00:23:09,710 --> 00:23:16,820
requirements to OAuth when it comes to

422
00:23:13,340 --> 00:23:18,620
really privacy by design because then

423
00:23:16,820 --> 00:23:22,490
instead of using a scope value and

424
00:23:18,620 --> 00:23:25,280
default claim set the application really

425
00:23:22,490 --> 00:23:27,679
needs to list all the claims that it

426
00:23:25,280 --> 00:23:30,110
wants to obtain from the user and the

427
00:23:27,679 --> 00:23:32,059
a/s needs to show all those claims to

428
00:23:30,110 --> 00:23:34,490
the user and the access token needs to

429
00:23:32,059 --> 00:23:36,770
carry through to the areso so those are

430
00:23:34,490 --> 00:23:39,350
the client claims that the user

431
00:23:36,770 --> 00:23:42,889
contended with and sometimes it's also

432
00:23:39,350 --> 00:23:45,559
required to define some values that must

433
00:23:42,890 --> 00:23:47,030
be fulfilled by this written claims here

434
00:23:45,559 --> 00:23:52,610
in that example we have the family name

435
00:23:47,030 --> 00:23:55,340
which is required to be Myer well what

436
00:23:52,610 --> 00:23:58,610
all what do what have those use cases in

437
00:23:55,340 --> 00:24:01,610
common first of all the privileges the

438
00:23:58,610 --> 00:24:04,879
client asks for are very very narrowly

439
00:24:01,610 --> 00:24:08,240
the defined and that's typically because

440
00:24:04,880 --> 00:24:11,140
of the law or the regulation and this

441
00:24:08,240 --> 00:24:13,790
narrow defined scope must be enforced

442
00:24:11,140 --> 00:24:16,130
why the resource server so the resource

443
00:24:13,790 --> 00:24:18,440
server needs to know what the user

444
00:24:16,130 --> 00:24:21,980
consented with what the client asked for

445
00:24:18,440 --> 00:24:24,670
and clearly because they are so narrowly

446
00:24:21,980 --> 00:24:28,130
defined they are fine-grained and

447
00:24:24,670 --> 00:24:30,440
structured which also makes them more

448
00:24:28,130 --> 00:24:33,530
voluminous then a scope value a

449
00:24:30,440 --> 00:24:35,240
traditional scope value and yes there

450
00:24:33,530 --> 00:24:37,190
are all transaction values we have seen

451
00:24:35,240 --> 00:24:40,580
some examples there are account numbers

452
00:24:37,190 --> 00:24:42,650
there are user names potentially there

453
00:24:40,580 --> 00:24:45,919
are hashes and so on this all needs to

454
00:24:42,650 --> 00:24:48,830
be carried in the authorization process

455
00:24:45,920 --> 00:24:51,200
and those data can be PII which means

456
00:24:48,830 --> 00:24:53,178
that confidentiality when those data are

457
00:24:51,200 --> 00:24:55,880
being in transit from duty from the

458
00:24:53,179 --> 00:24:58,600
client to the a s that's an important

459
00:24:55,880 --> 00:25:01,179
requirement and more all

460
00:24:58,600 --> 00:25:07,769
the integrity and authenticity of those

461
00:25:01,179 --> 00:25:11,019
data is a key requirement as well so

462
00:25:07,769 --> 00:25:12,639
what are the challenges when it comes to

463
00:25:11,019 --> 00:25:14,529
implementing these kind of use cases

464
00:25:12,639 --> 00:25:17,168
we've all evolved I've split that into

465
00:25:14,529 --> 00:25:19,720
two aspects because my proposals also is

466
00:25:17,169 --> 00:25:21,159
also split in two different drafts first

467
00:25:19,720 --> 00:25:24,100
of all we have to prove a problem of the

468
00:25:21,159 --> 00:25:26,230
transport how is this data sent from the

469
00:25:24,100 --> 00:25:28,080
client to the authorization server I

470
00:25:26,230 --> 00:25:31,480
mean Justin already made that point

471
00:25:28,080 --> 00:25:33,820
nearly anything that's really important

472
00:25:31,480 --> 00:25:36,999
is sent through the front channel today

473
00:25:33,820 --> 00:25:39,939
and it's sent so in an unprotected

474
00:25:36,999 --> 00:25:41,769
fashion meaning there is no integrity

475
00:25:39,940 --> 00:25:44,109
protection there is no authenticity

476
00:25:41,769 --> 00:25:47,080
protection and there is no way to ensure

477
00:25:44,109 --> 00:25:50,320
confidentiality yes there is a draft

478
00:25:47,080 --> 00:25:52,090
addressing that it's called char Justin

479
00:25:50,320 --> 00:25:54,749
I think you already mentioned that so

480
00:25:52,090 --> 00:25:58,988
you can sign and encrypt those requests

481
00:25:54,749 --> 00:26:01,450
which makes a request URL even longer so

482
00:25:58,989 --> 00:26:04,179
we have a real reliability robustness

483
00:26:01,450 --> 00:26:07,989
problem here when it comes to conveying

484
00:26:04,179 --> 00:26:11,470
such amounts of data between the client

485
00:26:07,989 --> 00:26:13,419
and the authorization server and we have

486
00:26:11,470 --> 00:26:17,049
a problem with the representation I mean

487
00:26:13,419 --> 00:26:19,659
I could more agree with with Justin's

488
00:26:17,049 --> 00:26:23,049
assessment right so the scope is just

489
00:26:19,659 --> 00:26:25,929
not sufficient because scope was made

490
00:26:23,049 --> 00:26:29,049
for really simple static things just ask

491
00:26:25,929 --> 00:26:31,149
for read access to a profile and not for

492
00:26:29,049 --> 00:26:33,249
doing transaction specific things

493
00:26:31,149 --> 00:26:35,859
there is no there's no structure in the

494
00:26:33,249 --> 00:26:37,450
scope all we were able to agree on was

495
00:26:35,859 --> 00:26:40,269
at the limit or between scope values

496
00:26:37,450 --> 00:26:42,639
that's it so it's fine for simple use

497
00:26:40,269 --> 00:26:44,259
cases in my personal experience it

498
00:26:42,639 --> 00:26:45,939
doesn't help if there are multiple

499
00:26:44,259 --> 00:26:47,739
resource servers that you want to

500
00:26:45,940 --> 00:26:49,359
specify scope values for because you

501
00:26:47,739 --> 00:26:51,159
can't really determine the assignment of

502
00:26:49,359 --> 00:26:53,408
the scope values to the resource servers

503
00:26:51,159 --> 00:26:57,249
which makes all the introspection really

504
00:26:53,409 --> 00:27:01,359
really hard and a scope value could also

505
00:26:57,249 --> 00:27:03,549
be ambiguous so in the same way as done

506
00:27:01,359 --> 00:27:05,619
previously and in the past by the C++

507
00:27:03,549 --> 00:27:08,619
report you can just tell me what's wrong

508
00:27:05,619 --> 00:27:12,299
with that scope or how you would read

509
00:27:08,619 --> 00:27:17,879
that scope open ID email read

510
00:27:12,299 --> 00:27:30,599
what's the meaning anyone have an

511
00:27:17,879 --> 00:27:32,158
opinion really I mean the first to scope

512
00:27:30,599 --> 00:27:35,339
values also taken from the open ad

513
00:27:32,159 --> 00:27:36,779
connect core specification and the

514
00:27:35,339 --> 00:27:39,749
second the third would make sense if

515
00:27:36,779 --> 00:27:42,599
you're running an email system right so

516
00:27:39,749 --> 00:27:44,190
what I did just just to echo from the

517
00:27:42,599 --> 00:27:47,009
floor here is the argument was that

518
00:27:44,190 --> 00:27:48,539
whoever defined that API didn't

519
00:27:47,009 --> 00:27:50,309
understand scopes I would argue that

520
00:27:48,539 --> 00:27:52,649
which is what I think Torsen is saying

521
00:27:50,309 --> 00:27:54,859
you have to api's where they did

522
00:27:52,649 --> 00:27:58,589
understand scopes perfectly fine and

523
00:27:54,859 --> 00:28:01,049
they step on each other which so go back

524
00:27:58,589 --> 00:28:04,649
to the five dimensional Venn diagram in

525
00:28:01,049 --> 00:28:06,389
my last presentation that's really the

526
00:28:04,649 --> 00:28:10,609
kind of space that we're looking at here

527
00:28:06,389 --> 00:28:13,708
where is no longer about protecting one

528
00:28:10,609 --> 00:28:18,539
specific API with one specific

529
00:28:13,709 --> 00:28:20,219
authorization server and yeah that

530
00:28:18,539 --> 00:28:22,769
example thank you for pointing that out

531
00:28:20,219 --> 00:28:24,299
the problem I have is I never worked in

532
00:28:22,769 --> 00:28:26,879
an environment where an a has only

533
00:28:24,299 --> 00:28:28,139
protected a single resource I ever have

534
00:28:26,879 --> 00:28:30,329
been working in environments where

535
00:28:28,139 --> 00:28:33,079
single areas protected multiple resource

536
00:28:30,329 --> 00:28:36,059
service so I ever had problems with that

537
00:28:33,079 --> 00:28:37,739
structure so we used Scout values for

538
00:28:36,059 --> 00:28:39,928
just determine what resource over is is

539
00:28:37,739 --> 00:28:43,259
access being asked for but thank you for

540
00:28:39,929 --> 00:28:50,450
the clarification all right do I have a

541
00:28:43,259 --> 00:28:50,450
bit more two minutes or victory or okay

542
00:28:50,899 --> 00:29:01,139
okay um I would like to before we come

543
00:28:58,049 --> 00:29:02,519
to two potential solutions I would give

544
00:29:01,139 --> 00:29:07,019
you what like to give you an as in

545
00:29:02,519 --> 00:29:09,059
impression that the problem statement

546
00:29:07,019 --> 00:29:11,879
suggests an Isis raised or really

547
00:29:09,059 --> 00:29:15,329
relevant and I will do so by showing you

548
00:29:11,879 --> 00:29:17,908
that people try to work with Olaf's

549
00:29:15,329 --> 00:29:22,200
limitation by implementing their own

550
00:29:17,909 --> 00:29:23,700
stuff right so just a selection if you

551
00:29:22,200 --> 00:29:28,019
want to know more

552
00:29:23,700 --> 00:29:31,340
happy to present so there are two

553
00:29:28,019 --> 00:29:34,230
classes of workarounds the one class is

554
00:29:31,340 --> 00:29:36,689
well let's invent a new parameter and

555
00:29:34,230 --> 00:29:39,389
put something additional that we could

556
00:29:36,690 --> 00:29:42,720
not convey in the scope in that

557
00:29:39,389 --> 00:29:45,209
parameter the the most prominent example

558
00:29:42,720 --> 00:29:47,159
is open ID connect because it invented

559
00:29:45,210 --> 00:29:50,269
the climbs parameter to convey a

560
00:29:47,159 --> 00:29:54,179
fine-grained list of claims with

561
00:29:50,269 --> 00:29:57,480
additional requirements which works well

562
00:29:54,179 --> 00:29:58,830
and protection that the transport can be

563
00:29:57,480 --> 00:30:00,929
ensured using signed and encrypted

564
00:29:58,830 --> 00:30:03,330
request objects so that's one option

565
00:30:00,929 --> 00:30:05,100
and then there is another example that I

566
00:30:03,330 --> 00:30:07,199
included it here in my and my slide deck

567
00:30:05,100 --> 00:30:09,750
and this is one of the api's that have

568
00:30:07,200 --> 00:30:11,340
been invented in this piece t2 space in

569
00:30:09,750 --> 00:30:13,440
in Europe and because everybody's

570
00:30:11,340 --> 00:30:16,320
talking about UK making on the link

571
00:30:13,440 --> 00:30:18,720
group I took the Polish API and the

572
00:30:16,320 --> 00:30:23,428
Polish API uses an additional parameter

573
00:30:18,720 --> 00:30:27,889
unit called scope details so in addition

574
00:30:23,429 --> 00:30:30,570
to the scope that you can see oops there

575
00:30:27,889 --> 00:30:34,379
it also have a has a scope details

576
00:30:30,570 --> 00:30:36,629
object that in JSON JSON format provides

577
00:30:34,380 --> 00:30:39,919
more information a lot more information

578
00:30:36,630 --> 00:30:44,250
about the payment initiation request and

579
00:30:39,919 --> 00:30:48,000
since those guys know that this data

580
00:30:44,250 --> 00:30:49,620
would potentially blow up the URL they

581
00:30:48,000 --> 00:30:50,570
don't send the authorization request

582
00:30:49,620 --> 00:30:53,219
through the browser

583
00:30:50,570 --> 00:30:58,590
they sent the authorization request in a

584
00:30:53,220 --> 00:31:00,450
post request directly to the a s from an

585
00:30:58,590 --> 00:31:03,080
interoperability perspective that's a

586
00:31:00,450 --> 00:31:08,010
nightmare but they solved the problem

587
00:31:03,080 --> 00:31:10,799
right and there's another pattern that

588
00:31:08,010 --> 00:31:12,000
one can observe in in that space and

589
00:31:10,799 --> 00:31:15,120
it's being used by a lot of those

590
00:31:12,000 --> 00:31:16,559
initiative which is instead of passing

591
00:31:15,120 --> 00:31:19,379
all the data in the authorization

592
00:31:16,559 --> 00:31:21,870
request you set up a resource that

593
00:31:19,380 --> 00:31:24,500
contains the data and just refer to that

594
00:31:21,870 --> 00:31:26,729
resource and as I don't know who talked

595
00:31:24,500 --> 00:31:29,460
talked about that I think it was Brian

596
00:31:26,730 --> 00:31:31,049
it's always about sending by value or

597
00:31:29,460 --> 00:31:33,090
sending by reference right that could be

598
00:31:31,049 --> 00:31:36,658
happy the heading about those those two

599
00:31:33,090 --> 00:31:38,090
slides so in those cases and you see

600
00:31:36,659 --> 00:31:41,130
that on there on the right

601
00:31:38,090 --> 00:31:43,020
the client first creates a resource that

602
00:31:41,130 --> 00:31:45,059
contains all the data that are relevant

603
00:31:43,020 --> 00:31:47,309
for the authorization transaction it

604
00:31:45,059 --> 00:31:49,740
gets an ID and then for example conveys

605
00:31:47,309 --> 00:31:51,870
that ID in the authorization request

606
00:31:49,740 --> 00:31:54,470
either as a part of the scope value or

607
00:31:51,870 --> 00:31:59,100
for example as a part of the claim so

608
00:31:54,470 --> 00:32:00,990
the problems exist Solutions exists the

609
00:31:59,100 --> 00:32:03,230
problem is can we find a generic

610
00:32:00,990 --> 00:32:03,230
solution

611
00:32:18,350 --> 00:32:22,889
all right so previously I talked about

612
00:32:21,270 --> 00:32:24,870
the things that we've done to try to

613
00:32:22,890 --> 00:32:27,179
extend to auth and now I'm going to talk

614
00:32:24,870 --> 00:32:31,908
about the things that o is proving very

615
00:32:27,179 --> 00:32:35,940
difficult to extend our really address

616
00:32:31,909 --> 00:32:38,190
so first off all of these form

617
00:32:35,940 --> 00:32:41,549
parameters like we are posting form

618
00:32:38,190 --> 00:32:43,950
parameters we are sending things as form

619
00:32:41,549 --> 00:32:46,139
parameters in URLs and stuff like that

620
00:32:43,950 --> 00:32:50,250
that is drastically limiting our ability

621
00:32:46,140 --> 00:32:51,840
for data description and you know the

622
00:32:50,250 --> 00:32:55,140
parse ability of all of this other stuff

623
00:32:51,840 --> 00:32:56,908
and it's even leading to really weird

624
00:32:55,140 --> 00:33:02,159
esoteric questions like what happens

625
00:32:56,909 --> 00:33:04,230
when I repeat a parameter which RFC 670

626
00:33:02,159 --> 00:33:06,030
49 says I'm not supposed to do but it's

627
00:33:04,230 --> 00:33:08,940
silent on what extensions means so

628
00:33:06,030 --> 00:33:10,470
extensions do that and then there's the

629
00:33:08,940 --> 00:33:11,730
question of okay so now I need to do

630
00:33:10,470 --> 00:33:14,100
that and put that into a JSON object

631
00:33:11,730 --> 00:33:16,530
because I'm doing jar and I can't have

632
00:33:14,100 --> 00:33:20,070
repeated keys and this all just kind of

633
00:33:16,530 --> 00:33:22,950
gets weird real fast so I would really

634
00:33:20,070 --> 00:33:24,780
like to see an actual data language used

635
00:33:22,950 --> 00:33:27,059
throughout OAuth and use consistently

636
00:33:24,780 --> 00:33:28,280
consistently with consistent data models

637
00:33:27,059 --> 00:33:31,379
all right

638
00:33:28,280 --> 00:33:33,750
this is really the big driving thing

639
00:33:31,380 --> 00:33:36,809
that I have that I would like to see us

640
00:33:33,750 --> 00:33:37,980
do with future work we've got so many

641
00:33:36,809 --> 00:33:40,350
different extensions that are

642
00:33:37,980 --> 00:33:42,390
reinventing the same concepts you know

643
00:33:40,350 --> 00:33:43,980
Torsten showed we didn't coordinate our

644
00:33:42,390 --> 00:33:45,840
presentations this is really just this

645
00:33:43,980 --> 00:33:47,700
Universal of a problem people are

646
00:33:45,840 --> 00:33:49,889
reinventing intent lodging patterns

647
00:33:47,700 --> 00:33:51,450
people are reinventing scope description

648
00:33:49,890 --> 00:33:53,339
languages people are

649
00:33:51,450 --> 00:33:55,649
you know they keep reinventing these

650
00:33:53,339 --> 00:33:57,389
kinds of things like so for example you

651
00:33:55,649 --> 00:34:00,389
know the device flow and Seba both have

652
00:33:57,389 --> 00:34:02,369
a form of intent lodging like you make a

653
00:34:00,389 --> 00:34:04,708
back back-channel call and then you go

654
00:34:02,369 --> 00:34:06,418
do something else and then eventually an

655
00:34:04,709 --> 00:34:08,159
access token happens you know pushed

656
00:34:06,419 --> 00:34:09,599
authorization requests and uma kind of

657
00:34:08,159 --> 00:34:12,569
do something similar but in different

658
00:34:09,599 --> 00:34:14,339
ways and all of those are ultimately

659
00:34:12,569 --> 00:34:15,839
incompatible with each other I already

660
00:34:14,339 --> 00:34:19,168
talked about the resource audience

661
00:34:15,839 --> 00:34:20,909
problem before and then we've got all of

662
00:34:19,168 --> 00:34:24,989
the key proofing mechanisms that are out

663
00:34:20,909 --> 00:34:27,329
there there's also the issue that of'

664
00:34:24,989 --> 00:34:30,299
was really designed in a very different

665
00:34:27,329 --> 00:34:33,809
kind of world you know what this server

666
00:34:30,299 --> 00:34:35,518
mean anymore it used to mean an actual

667
00:34:33,809 --> 00:34:39,809
physical computer sitting on a shelf

668
00:34:35,518 --> 00:34:41,729
somewhere and that's not the case in in

669
00:34:39,809 --> 00:34:43,260
today's computing systems I mean it

670
00:34:41,730 --> 00:34:46,619
could be a lambda function that's

671
00:34:43,260 --> 00:34:50,569
totally stateless it's a very very

672
00:34:46,619 --> 00:34:53,010
different world and has sort of baked in

673
00:34:50,569 --> 00:34:56,429
limitations and assumptions about what

674
00:34:53,010 --> 00:34:59,700
it means to be a participant in this

675
00:34:56,429 --> 00:35:02,369
ecosystem now fundamentally the OAuth

676
00:34:59,700 --> 00:35:04,319
protocol is a delegation protocol in

677
00:35:02,369 --> 00:35:05,609
spite of it being named an authorization

678
00:35:04,319 --> 00:35:07,259
protocol it's fundamentally about

679
00:35:05,609 --> 00:35:08,700
getting somebody who has a right of

680
00:35:07,259 --> 00:35:10,769
access to say it's okay for a piece of

681
00:35:08,700 --> 00:35:12,390
software to act on their behalf and it

682
00:35:10,769 --> 00:35:14,098
does this by very brilliantly getting

683
00:35:12,390 --> 00:35:15,509
the user involved the end user who's

684
00:35:14,099 --> 00:35:17,789
using that software involved at the

685
00:35:15,509 --> 00:35:19,140
right time in the process but OAuth

686
00:35:17,789 --> 00:35:20,819
assumes that that always happens with

687
00:35:19,140 --> 00:35:23,400
the web browser and people aren't always

688
00:35:20,819 --> 00:35:25,470
interacting with systems these days in a

689
00:35:23,400 --> 00:35:27,450
web browser to the point where we've had

690
00:35:25,470 --> 00:35:30,269
a bunch of different efforts try to do

691
00:35:27,450 --> 00:35:33,470
app to app authentication trying to

692
00:35:30,269 --> 00:35:36,299
squeeze that into OAuth we see people

693
00:35:33,470 --> 00:35:39,118
bastardizing the resource owner password

694
00:35:36,299 --> 00:35:41,490
flow in order to cram other credentials

695
00:35:39,119 --> 00:35:43,200
into the back-channel in order to not

696
00:35:41,490 --> 00:35:44,729
have to pop a web browser or maybe they

697
00:35:43,200 --> 00:35:49,769
can't pop a web browser for any number

698
00:35:44,730 --> 00:35:51,119
of reasons and I kind of realized when

699
00:35:49,769 --> 00:35:53,368
looking at all of these different things

700
00:35:51,119 --> 00:35:55,740
that a lot of our different grant types

701
00:35:53,369 --> 00:35:57,180
are pretty much about the kind of

702
00:35:55,740 --> 00:36:00,240
interaction you can do with the user

703
00:35:57,180 --> 00:36:01,828
I mean arguably it's about the the mode

704
00:36:00,240 --> 00:36:04,049
of the client and things like that but

705
00:36:01,829 --> 00:36:06,089
all of that really has

706
00:36:04,049 --> 00:36:07,529
effect on how you can interact with the

707
00:36:06,089 --> 00:36:08,759
user can I pop a web browser can I

708
00:36:07,529 --> 00:36:11,759
prompt for a password

709
00:36:08,759 --> 00:36:14,400
can I display a code on the screen what

710
00:36:11,759 --> 00:36:17,699
can I do to interact and we put them all

711
00:36:14,400 --> 00:36:19,859
as grant types because that was the key

712
00:36:17,699 --> 00:36:23,130
extension point that OAuth 2 gave us so

713
00:36:19,859 --> 00:36:24,029
that's where we extended it now since

714
00:36:23,130 --> 00:36:25,979
we're talking about web based

715
00:36:24,029 --> 00:36:27,209
interaction how do you even get the user

716
00:36:25,979 --> 00:36:28,618
there we've got a few different ways to

717
00:36:27,209 --> 00:36:30,629
get them there we've got a few different

718
00:36:28,619 --> 00:36:32,429
ways to get them back and we're already

719
00:36:30,630 --> 00:36:34,349
seeing use cases where we want to be

720
00:36:32,429 --> 00:36:36,209
able to mix and match these two so I

721
00:36:34,349 --> 00:36:38,160
want to be able to send the user

722
00:36:36,209 --> 00:36:40,319
directly to a URL I don't want to have

723
00:36:38,160 --> 00:36:42,719
them type anything but I have to pull I

724
00:36:40,319 --> 00:36:45,900
can't I can't get a callback response in

725
00:36:42,719 --> 00:36:48,449
the front channel right or maybe maybe I

726
00:36:45,900 --> 00:36:50,160
can display them a code but I can get a

727
00:36:48,449 --> 00:36:52,199
callback in

728
00:36:50,160 --> 00:36:53,129
today if you compare the auth code flow

729
00:36:52,199 --> 00:36:54,569
and the device code flow these are

730
00:36:53,130 --> 00:36:56,219
strongly tied to each other because

731
00:36:54,569 --> 00:36:59,038
they're strongly tied again to that

732
00:36:56,219 --> 00:37:01,859
grant that authorization grant concept

733
00:36:59,039 --> 00:37:04,949
which always felt kind of funny in the

734
00:37:01,859 --> 00:37:06,719
OAuth world but what if I wanted to talk

735
00:37:04,949 --> 00:37:09,089
directly to a native app you know I'm

736
00:37:06,719 --> 00:37:11,309
making a payment and I want my banks

737
00:37:09,089 --> 00:37:13,709
native application to show up on my

738
00:37:11,309 --> 00:37:15,719
device they're both there what if I'm

739
00:37:13,709 --> 00:37:17,129
gonna be doing did calm and I've got a

740
00:37:15,719 --> 00:37:19,619
wallet that something wants to talk to

741
00:37:17,130 --> 00:37:21,269
you what if it's not the current user

742
00:37:19,619 --> 00:37:23,039
that needs to do the authorization and I

743
00:37:21,269 --> 00:37:25,439
need to go get somebody else involved in

744
00:37:23,039 --> 00:37:26,910
this process or what if I wanted to do

745
00:37:25,439 --> 00:37:29,428
some sort of challenge response system

746
00:37:26,910 --> 00:37:31,709
all of this can be kind of grafted into

747
00:37:29,429 --> 00:37:33,989
the OAuth world but it's a bad fit it's

748
00:37:31,709 --> 00:37:35,609
it's really not meant to do this kind of

749
00:37:33,989 --> 00:37:37,890
thing auth is meant around there being

750
00:37:35,609 --> 00:37:40,679
one user with the web browser who is

751
00:37:37,890 --> 00:37:43,589
sent somewhere and comes back and then

752
00:37:40,679 --> 00:37:45,259
again who is the user right sometimes

753
00:37:43,589 --> 00:37:48,209
the client already knows who the user is

754
00:37:45,259 --> 00:37:50,279
sometimes the client has had the user

755
00:37:48,209 --> 00:37:52,919
login they've maybe are using something

756
00:37:50,279 --> 00:37:54,349
like uh verifiable credentials too that

757
00:37:52,920 --> 00:37:56,279
they can actually prove who the user is

758
00:37:54,349 --> 00:37:59,069
without getting the user directly

759
00:37:56,279 --> 00:38:02,339
involved again it doesn't give us a good

760
00:37:59,069 --> 00:38:05,759
way to do that in the wild what I have

761
00:38:02,339 --> 00:38:08,699
seen done though is people using the

762
00:38:05,759 --> 00:38:11,039
token exchange extension grant to OAuth

763
00:38:08,699 --> 00:38:13,709
and then when that fails and they need

764
00:38:11,039 --> 00:38:15,500
to then and then they sometimes need to

765
00:38:13,709 --> 00:38:18,230
get the user involved then

766
00:38:15,500 --> 00:38:19,670
they will they will drop back to the

767
00:38:18,230 --> 00:38:21,440
authorization code flow or something

768
00:38:19,670 --> 00:38:22,880
like that what if I've already got an

769
00:38:21,440 --> 00:38:24,470
access token and I want to trade that

770
00:38:22,880 --> 00:38:26,360
for something else again token exchange

771
00:38:24,470 --> 00:38:27,859
gets as part of the way there but what

772
00:38:26,360 --> 00:38:30,140
if I want to do step-up authentication

773
00:38:27,860 --> 00:38:32,450
based on existing access token there's

774
00:38:30,140 --> 00:38:35,089
the way that ooofff works with its front

775
00:38:32,450 --> 00:38:36,649
channel first interactive flows is not a

776
00:38:35,090 --> 00:38:38,870
good fit for these kinds of use cases

777
00:38:36,650 --> 00:38:41,090
that people are very commonly wanting to

778
00:38:38,870 --> 00:38:42,290
do these days and if I've seen this

779
00:38:41,090 --> 00:38:45,560
combination of these are in client

780
00:38:42,290 --> 00:38:47,870
before then I want to be able to you

781
00:38:45,560 --> 00:38:49,430
know give them a more clean pass through

782
00:38:47,870 --> 00:38:51,080
the system I don't want to have to open

783
00:38:49,430 --> 00:38:52,520
up a web browser and send the user there

784
00:38:51,080 --> 00:38:54,100
and send them back just to figure out

785
00:38:52,520 --> 00:38:56,390
something that I already know right

786
00:38:54,100 --> 00:38:58,910
there are trust models where this makes

787
00:38:56,390 --> 00:39:01,779
a lot of sense

788
00:38:58,910 --> 00:39:03,609
did you already covered all of that

789
00:39:01,780 --> 00:39:07,460
Annabelle's going to be talking about

790
00:39:03,610 --> 00:39:08,870
cases where you have a user and you just

791
00:39:07,460 --> 00:39:11,060
need them interacting you're not even

792
00:39:08,870 --> 00:39:12,680
necessarily getting an access token o

793
00:39:11,060 --> 00:39:14,330
auth is all about an access token

794
00:39:12,680 --> 00:39:17,390
because but because it has this really

795
00:39:14,330 --> 00:39:18,860
rich user interaction capability you

796
00:39:17,390 --> 00:39:20,930
know people are using bits and pieces of

797
00:39:18,860 --> 00:39:23,630
it to do different things and I also

798
00:39:20,930 --> 00:39:25,609
think that there is a lot that's being

799
00:39:23,630 --> 00:39:27,470
done especially in the IOT space where

800
00:39:25,610 --> 00:39:29,870
you're introducing key pairs between

801
00:39:27,470 --> 00:39:31,850
different pieces of software but we're

802
00:39:29,870 --> 00:39:34,339
using these authorization protocols to

803
00:39:31,850 --> 00:39:36,440
do that type of introduction it's not a

804
00:39:34,340 --> 00:39:41,180
good fit it's not what a walk was meant

805
00:39:36,440 --> 00:39:43,520
to do but it's it's so close it's like

806
00:39:41,180 --> 00:39:46,640
right next door to what oh f does write

807
00:39:43,520 --> 00:39:48,470
a femoral clients are a really really

808
00:39:46,640 --> 00:39:50,569
big thing these days you've got an S PA

809
00:39:48,470 --> 00:39:52,069
that spins up it exists for the entire

810
00:39:50,570 --> 00:39:52,790
time that the user is there and then

811
00:39:52,070 --> 00:39:55,550
just goes away

812
00:39:52,790 --> 00:39:57,110
oh off to said that oh these are

813
00:39:55,550 --> 00:39:58,970
obviously public clients because we

814
00:39:57,110 --> 00:40:01,070
can't pre provision a shared secret we

815
00:39:58,970 --> 00:40:03,319
can't have a client secret in them but

816
00:40:01,070 --> 00:40:04,820
we have keying technologies today with

817
00:40:03,320 --> 00:40:06,470
web crypto and all of that where we

818
00:40:04,820 --> 00:40:08,930
could have an ephemeral key pair that

819
00:40:06,470 --> 00:40:11,299
protects that instance for that session

820
00:40:08,930 --> 00:40:13,430
but oh it doesn't have a good place to

821
00:40:11,300 --> 00:40:15,650
do that we're seeing some progress in D

822
00:40:13,430 --> 00:40:17,779
pop but that's really being grafted into

823
00:40:15,650 --> 00:40:20,270
an OAuth world that has a lot of

824
00:40:17,780 --> 00:40:22,790
different assumptions right we need to

825
00:40:20,270 --> 00:40:24,410
be able to bridge these trust models

826
00:40:22,790 --> 00:40:27,140
where we have ephemeral things and where

827
00:40:24,410 --> 00:40:28,848
we've got sort of long-standing policies

828
00:40:27,140 --> 00:40:31,368
of like any instance of this class

829
00:40:28,849 --> 00:40:35,440
can do the following things sort of the

830
00:40:31,369 --> 00:40:39,170
more traditional Roth deployment models

831
00:40:35,440 --> 00:40:43,099
Roth what not much longer

832
00:40:39,170 --> 00:40:45,470
yeah not much longer so Olaf is a very

833
00:40:43,099 --> 00:40:49,549
very client every system we hang

834
00:40:45,470 --> 00:40:52,609
everything off the client my idea for

835
00:40:49,549 --> 00:40:55,069
positing this entire this entire boffin

836
00:40:52,609 --> 00:40:56,930
all of this was what if we made the

837
00:40:55,069 --> 00:40:58,910
transaction of going and getting the

838
00:40:56,930 --> 00:41:00,618
authorization delegation the actual

839
00:40:58,910 --> 00:41:02,538
thing that we're AFI against and hang

840
00:41:00,619 --> 00:41:04,880
all of our information and all of our

841
00:41:02,539 --> 00:41:08,049
decisions based off of that what I do

842
00:41:04,880 --> 00:41:10,130
not want out of this work personally

843
00:41:08,049 --> 00:41:11,839
people have said that this sounds a lot

844
00:41:10,130 --> 00:41:16,549
like we're doing soap for OAuth please

845
00:41:11,839 --> 00:41:19,160
no no it wasn't Tony Tony wants ws-trust

846
00:41:16,549 --> 00:41:21,349
ro off and he's already doing that I

847
00:41:19,160 --> 00:41:23,328
don't want that either but you know

848
00:41:21,349 --> 00:41:27,140
that's that's beside the point

849
00:41:23,329 --> 00:41:29,119
no I don't think that this needs to be

850
00:41:27,140 --> 00:41:30,739
trans you know transport agnostic I

851
00:41:29,119 --> 00:41:32,479
think we need to embrace HTTP this is

852
00:41:30,739 --> 00:41:34,039
the world that it's in I don't think

853
00:41:32,479 --> 00:41:35,930
that this also needs to be strictly

854
00:41:34,039 --> 00:41:37,700
backwards compatible if we're going to

855
00:41:35,930 --> 00:41:38,180
be solving this right and more on that

856
00:41:37,700 --> 00:41:41,890
later

857
00:41:38,180 --> 00:41:41,890
and I think that's the end of this deck

858
00:41:47,079 --> 00:41:55,400
hi this is Hank I am very happy that I'm

859
00:41:53,450 --> 00:41:59,419
here because I don't know why I'm here

860
00:41:55,400 --> 00:42:01,969
it's just coincidence and 70% you said I

861
00:41:59,420 --> 00:42:03,920
have a violent agreement with I have

862
00:42:01,969 --> 00:42:06,499
never seen a more concise presentation

863
00:42:03,920 --> 00:42:09,920
of my problem with all of this than this

864
00:42:06,499 --> 00:42:12,049
year thank you very much also I think

865
00:42:09,920 --> 00:42:13,700
you would always have to keep in mind

866
00:42:12,049 --> 00:42:15,890
this should not be soap I think it

867
00:42:13,700 --> 00:42:18,169
should be on the read topic of it

868
00:42:15,890 --> 00:42:19,578
so you remember not to miss we read

869
00:42:18,170 --> 00:42:21,739
iterate the mistakes there and I'm

870
00:42:19,579 --> 00:42:24,380
pretty sure you're not trying to

871
00:42:21,739 --> 00:42:25,880
recreate the so penis and the form in

872
00:42:24,380 --> 00:42:29,210
front of your mouth forget when you see

873
00:42:25,880 --> 00:42:31,219
soap and and that is excellent also I

874
00:42:29,210 --> 00:42:33,529
think when you say HTTP you mean collab

875
00:42:31,219 --> 00:42:35,390
also in extensions automatically and

876
00:42:33,529 --> 00:42:38,180
this is the only thing I'm unclear about

877
00:42:35,390 --> 00:42:41,359
so this is my question

878
00:42:38,180 --> 00:42:42,078
all right Justin Richard just to respond

879
00:42:41,359 --> 00:42:44,359
to that

880
00:42:42,079 --> 00:42:47,690
what I really mean is that if we were to

881
00:42:44,359 --> 00:42:49,520
take an approach with whatever comes out

882
00:42:47,690 --> 00:42:52,549
of here the same way that we did with

883
00:42:49,520 --> 00:42:55,609
OAuth and ace in that we have something

884
00:42:52,549 --> 00:42:58,099
that is very strongly tied to HTTP and

885
00:42:55,609 --> 00:43:00,109
then gets very cleanly translated to

886
00:42:58,099 --> 00:43:00,799
locate alive and stuff like that I am

887
00:43:00,109 --> 00:43:02,359
fine with that

888
00:43:00,799 --> 00:43:05,180
okay what I don't want is something that

889
00:43:02,359 --> 00:43:06,920
is like oh you could put it on email or

890
00:43:05,180 --> 00:43:07,970
you could have this being a text message

891
00:43:06,920 --> 00:43:09,829
or whatever because it's all

892
00:43:07,970 --> 00:43:11,779
self-contained and it ignores all of its

893
00:43:09,829 --> 00:43:14,000
transport layer stuff okay that's what I

894
00:43:11,779 --> 00:43:16,400
don't want yeah but if you can translate

895
00:43:14,000 --> 00:43:18,500
it cleanly the concepts and constructs

896
00:43:16,400 --> 00:43:20,359
from one side to another and you say you

897
00:43:18,500 --> 00:43:22,190
know this is an HTTP header versus a

898
00:43:20,359 --> 00:43:26,180
co-op option or whatever they're called

899
00:43:22,190 --> 00:43:27,680
then then yeah that's great okay agree

900
00:43:26,180 --> 00:43:30,740
thank you you still have a question or

901
00:43:27,680 --> 00:43:32,359
did he preemptively answer it I would

902
00:43:30,740 --> 00:43:34,970
have a follow-up question oh that is

903
00:43:32,359 --> 00:43:36,288
fine or can just go away no no no yes

904
00:43:34,970 --> 00:43:39,250
you started to say you had a question

905
00:43:36,289 --> 00:43:43,430
and then yeah Justin kicked in yeah I

906
00:43:39,250 --> 00:43:47,029
have to think oh yeah lifecycle and

907
00:43:43,430 --> 00:43:48,828
semantics of totin yes also the strong

908
00:43:47,029 --> 00:43:51,109
user binding and then everything else

909
00:43:48,829 --> 00:43:53,329
demarcation line please well define

910
00:43:51,109 --> 00:43:55,009
scopes will define application of life

911
00:43:53,329 --> 00:43:55,640
cycles wherever it goes that would be

912
00:43:55,010 --> 00:43:58,279
very nice

913
00:43:55,640 --> 00:43:59,868
and basically you said that but I want

914
00:43:58,279 --> 00:44:02,529
to reinforce that it was that a question

915
00:43:59,869 --> 00:44:06,260
or a request that's an okay okay

916
00:44:02,529 --> 00:44:10,190
Anabelle all yours okay hi my name is

917
00:44:06,260 --> 00:44:12,710
Annabel Beckman from Amazon reporting or

918
00:44:10,190 --> 00:44:15,680
talking about some non authorization use

919
00:44:12,710 --> 00:44:18,740
cases I see for a lot of what we're

920
00:44:15,680 --> 00:44:22,279
talking about here so to start with

921
00:44:18,740 --> 00:44:26,089
let's just there we have let's just walk

922
00:44:22,279 --> 00:44:28,069
through some scenarios that I've been

923
00:44:26,089 --> 00:44:30,710
thinking about don't know if anybody

924
00:44:28,069 --> 00:44:33,950
else listen to audiobooks I do a lot

925
00:44:30,710 --> 00:44:39,410
through my echo I have encountered this

926
00:44:33,950 --> 00:44:43,129
experience in the past I asked asked the

927
00:44:39,410 --> 00:44:44,930
the echo to buy a book so I can have her

928
00:44:43,130 --> 00:44:47,089
play it and I get this kind of an error

929
00:44:44,930 --> 00:44:51,500
message unable to complete this purchase

930
00:44:47,089 --> 00:44:51,990
and there's a lot of authorization

931
00:44:51,500 --> 00:44:53,730
related

932
00:44:51,990 --> 00:44:57,290
reasons that this might be the case but

933
00:44:53,730 --> 00:45:00,210
there are also these other other

934
00:44:57,290 --> 00:45:02,400
problems that may be behind this error

935
00:45:00,210 --> 00:45:04,980
message my credit card could be expired

936
00:45:02,400 --> 00:45:06,930
maybe there's an insufficient balance of

937
00:45:04,980 --> 00:45:08,850
funds on my account or some other

938
00:45:06,930 --> 00:45:11,250
problem that needs to be corrected that

939
00:45:08,850 --> 00:45:14,220
I can't correct through the voice

940
00:45:11,250 --> 00:45:15,840
interface of the echo and so I have to

941
00:45:14,220 --> 00:45:18,689
go to the app or I have to go to my

942
00:45:15,840 --> 00:45:21,150
laptop and open up the browser go to

943
00:45:18,690 --> 00:45:21,660
Amazon and fix up something on my

944
00:45:21,150 --> 00:45:23,760
account

945
00:45:21,660 --> 00:45:26,609
there's some process that needs to

946
00:45:23,760 --> 00:45:31,110
happen outside of the current context

947
00:45:26,610 --> 00:45:33,960
I'm in in order to to resolve this she

948
00:45:31,110 --> 00:45:35,760
has another one I don't know how many of

949
00:45:33,960 --> 00:45:39,060
you are familiar with Amazon's dash

950
00:45:35,760 --> 00:45:43,860
replenishment service but it's a service

951
00:45:39,060 --> 00:45:47,000
that lets connected devices order things

952
00:45:43,860 --> 00:45:49,220
like ink or pet food or whatever

953
00:45:47,000 --> 00:45:52,140
automatically when you know when they

954
00:45:49,220 --> 00:45:56,129
romantically replenish things when when

955
00:45:52,140 --> 00:45:58,230
the device runs out of them the way this

956
00:45:56,130 --> 00:46:00,570
works is the device at some point in

957
00:45:58,230 --> 00:46:03,869
here we have a printer says hey Amazon -

958
00:46:00,570 --> 00:46:05,609
I'm out of ink and ideally the

959
00:46:03,869 --> 00:46:07,500
replenishment service says okay great

960
00:46:05,609 --> 00:46:09,750
we'll place an order in this case

961
00:46:07,500 --> 00:46:13,980
sometimes hey we can't do that for some

962
00:46:09,750 --> 00:46:18,859
reason just as a couple of examples of

963
00:46:13,980 --> 00:46:21,720
why that might happen maybe the the the

964
00:46:18,859 --> 00:46:24,480
customer has not actually can properly

965
00:46:21,720 --> 00:46:27,959
configured the system to say what kind

966
00:46:24,480 --> 00:46:29,369
of ink they want maybe the kind of ink

967
00:46:27,960 --> 00:46:33,690
that they selected is no longer

968
00:46:29,369 --> 00:46:36,210
available so again here we have a case

969
00:46:33,690 --> 00:46:39,240
where the end user at some point needs

970
00:46:36,210 --> 00:46:42,180
to go to some other context where they

971
00:46:39,240 --> 00:46:46,669
can fix up this aspect of their account

972
00:46:42,180 --> 00:46:50,250
in order to to unblock this process and

973
00:46:46,670 --> 00:46:54,690
here's here's another scenario last one

974
00:46:50,250 --> 00:46:57,330
of these Amazon Web Services has a

975
00:46:54,690 --> 00:47:00,000
simple email service it it does what it

976
00:46:57,330 --> 00:47:05,380
says on the tin in this scenario we have

977
00:47:00,000 --> 00:47:09,400
the back end of a some customer service

978
00:47:05,380 --> 00:47:11,580
service calling AWS SES to send some

979
00:47:09,400 --> 00:47:15,790
email message and for some reason that

980
00:47:11,580 --> 00:47:18,279
request fails maybe it's failed because

981
00:47:15,790 --> 00:47:20,460
the customer actually needs to go

982
00:47:18,280 --> 00:47:23,290
through the domain ownership

983
00:47:20,460 --> 00:47:26,770
verification process just to prove to

984
00:47:23,290 --> 00:47:29,890
SES that yes I really do own Annabel

985
00:47:26,770 --> 00:47:33,220
Bachman calm so we you should be allowed

986
00:47:29,890 --> 00:47:36,339
to send email through that domain or

987
00:47:33,220 --> 00:47:39,040
maybe the customer has paused sending on

988
00:47:36,340 --> 00:47:40,480
their account and needs to unpause it or

989
00:47:39,040 --> 00:47:42,790
maybe they've exceeded their quota or

990
00:47:40,480 --> 00:47:46,080
any number of other potentially non

991
00:47:42,790 --> 00:47:49,420
directly authorization related reasons

992
00:47:46,080 --> 00:47:52,090
so there's a there's a common connection

993
00:47:49,420 --> 00:47:55,030
through all of these and that is that

994
00:47:52,090 --> 00:47:58,810
the customer the end user is operating

995
00:47:55,030 --> 00:48:01,150
in this context a but the problem and

996
00:47:58,810 --> 00:48:04,299
the resolution is over here in context B

997
00:48:01,150 --> 00:48:09,040
and we need to get them from one context

998
00:48:04,300 --> 00:48:11,260
to another somehow yeah essentially you

999
00:48:09,040 --> 00:48:14,050
know summarize how do we direct the end

1000
00:48:11,260 --> 00:48:16,030
user to another context and back again

1001
00:48:14,050 --> 00:48:19,590
potentially in the middle of an

1002
00:48:16,030 --> 00:48:22,090
arbitrary process this is the problem

1003
00:48:19,590 --> 00:48:24,160
that's present in all three of the

1004
00:48:22,090 --> 00:48:28,240
scenarios I just went through it's also

1005
00:48:24,160 --> 00:48:32,080
the problem that underlies the you know

1006
00:48:28,240 --> 00:48:36,149
authorization tasks that ooofff

1007
00:48:32,080 --> 00:48:39,610
is is designed to serve you know

1008
00:48:36,150 --> 00:48:42,160
authorization or delegation as Justin

1009
00:48:39,610 --> 00:48:43,840
posited that it that it really is it's

1010
00:48:42,160 --> 00:48:46,750
really just a special case of this

1011
00:48:43,840 --> 00:48:49,600
problem we're operating in context a we

1012
00:48:46,750 --> 00:48:52,090
need to get the end user to context B to

1013
00:48:49,600 --> 00:48:57,430
go through some process and then return

1014
00:48:52,090 --> 00:48:59,380
back so a couple of interesting

1015
00:48:57,430 --> 00:49:00,960
challenges that I want to bring

1016
00:48:59,380 --> 00:49:03,250
attention to to this problem before

1017
00:49:00,960 --> 00:49:07,420
handing it off to start talking about

1018
00:49:03,250 --> 00:49:09,550
possible solutions Justin mentioned

1019
00:49:07,420 --> 00:49:11,980
front Channel versus back channel

1020
00:49:09,550 --> 00:49:15,430
concept comes up that a lot when we talk

1021
00:49:11,980 --> 00:49:17,200
about this but there's actually

1022
00:49:15,430 --> 00:49:19,299
potentially a lot of different channels

1023
00:49:17,200 --> 00:49:20,919
involved and I said three or four

1024
00:49:19,300 --> 00:49:22,210
that may not actually be all of them but

1025
00:49:20,920 --> 00:49:23,740
those were the ones I could think of

1026
00:49:22,210 --> 00:49:27,610
when I was putting these slides together

1027
00:49:23,740 --> 00:49:30,790
so those are the ones Holden first of

1028
00:49:27,610 --> 00:49:34,420
all there's whatever channel the the end

1029
00:49:30,790 --> 00:49:38,170
user has between it and the the source

1030
00:49:34,420 --> 00:49:40,150
context for example the Alexa voice

1031
00:49:38,170 --> 00:49:42,670
interface you know that's that's the

1032
00:49:40,150 --> 00:49:48,160
channel that I'm operating over when I'm

1033
00:49:42,670 --> 00:49:50,290
interacting with that device another

1034
00:49:48,160 --> 00:49:52,420
channel is the channel between that

1035
00:49:50,290 --> 00:49:56,440
source context and the context where the

1036
00:49:52,420 --> 00:49:58,480
problem occurs so for example well in

1037
00:49:56,440 --> 00:50:01,510
the Alexa case that might be pretty

1038
00:49:58,480 --> 00:50:04,390
simple in the sense that it's the API

1039
00:50:01,510 --> 00:50:07,750
calls being made from one Amazon

1040
00:50:04,390 --> 00:50:09,040
internal service to another in another

1041
00:50:07,750 --> 00:50:10,990
case it may be a little bit more

1042
00:50:09,040 --> 00:50:15,610
complicated than that for example it

1043
00:50:10,990 --> 00:50:22,299
could be the customers back-end service

1044
00:50:15,610 --> 00:50:24,250
making API calls to an AWS service and

1045
00:50:22,300 --> 00:50:27,160
then we have the end-user notification

1046
00:50:24,250 --> 00:50:30,760
channel that is how is the end-user

1047
00:50:27,160 --> 00:50:36,089
being told to proceed or being directed

1048
00:50:30,760 --> 00:50:38,890
to to proceed to to fix this problem in

1049
00:50:36,090 --> 00:50:42,180
sort of traditional you know the OAuth

1050
00:50:38,890 --> 00:50:45,009
world that is you know expected to be

1051
00:50:42,180 --> 00:50:47,640
the end user through their web browser

1052
00:50:45,010 --> 00:50:53,050
being directed to an authorization

1053
00:50:47,640 --> 00:50:54,279
endpoint in the broader context that

1054
00:50:53,050 --> 00:50:55,330
channel could actually take a lot of

1055
00:50:54,280 --> 00:50:59,980
different forms it might initiate

1056
00:50:55,330 --> 00:51:03,990
through an email or a text message it

1057
00:50:59,980 --> 00:51:06,520
might actually be over the the same

1058
00:51:03,990 --> 00:51:11,169
context or the same channel as the first

1059
00:51:06,520 --> 00:51:14,590
one it might not it might be initiated

1060
00:51:11,170 --> 00:51:17,020
by the source context or it could be

1061
00:51:14,590 --> 00:51:22,390
initiated by the problem context which

1062
00:51:17,020 --> 00:51:27,100
is to say the the the email could be

1063
00:51:22,390 --> 00:51:30,370
coming from the OAuth client or it could

1064
00:51:27,100 --> 00:51:33,370
be coming from the authorization service

1065
00:51:30,370 --> 00:51:36,020
server to put it in in OAuth terms

1066
00:51:33,370 --> 00:51:40,160
and then finally we have the the channel

1067
00:51:36,020 --> 00:51:44,630
between the end user and the the

1068
00:51:40,160 --> 00:51:46,399
resolution context again if we put in

1069
00:51:44,630 --> 00:51:48,830
OAuth terms this is the between the end

1070
00:51:46,400 --> 00:51:51,100
user and the authorization endpoint you

1071
00:51:48,830 --> 00:51:55,279
know where they're going to sign in and

1072
00:51:51,100 --> 00:51:59,990
consent or not that's yet another

1073
00:51:55,280 --> 00:52:00,920
another channel here and then the other

1074
00:51:59,990 --> 00:52:05,990
challenge I do you want to bring

1075
00:52:00,920 --> 00:52:07,550
attention to is that traditionally with

1076
00:52:05,990 --> 00:52:10,850
OAuth we think of this happening within

1077
00:52:07,550 --> 00:52:12,260
an interactive and user session but

1078
00:52:10,850 --> 00:52:15,350
there's no guarantee that that's

1079
00:52:12,260 --> 00:52:17,360
actually the case problem the problems

1080
00:52:15,350 --> 00:52:23,210
may be identified through non

1081
00:52:17,360 --> 00:52:25,340
interactive scenarios for example if the

1082
00:52:23,210 --> 00:52:26,810
in the interactive scenario did so those

1083
00:52:25,340 --> 00:52:28,820
are easy for us to think about it's you

1084
00:52:26,810 --> 00:52:30,560
know every OAuth scenario that people

1085
00:52:28,820 --> 00:52:33,680
tend to throw out there the non or

1086
00:52:30,560 --> 00:52:35,750
interactive scenarios an example that I

1087
00:52:33,680 --> 00:52:37,549
just presented was a printer detecting

1088
00:52:35,750 --> 00:52:41,810
it's low on ink you know I'm not

1089
00:52:37,550 --> 00:52:44,300
interacting with the printer app you

1090
00:52:41,810 --> 00:52:46,430
know it identifying that and then

1091
00:52:44,300 --> 00:52:48,680
telling it to go order ink that's yeah

1092
00:52:46,430 --> 00:52:51,350
that's something - printers figuring out

1093
00:52:48,680 --> 00:52:53,569
you know in the process of potentially

1094
00:52:51,350 --> 00:52:55,220
of printing something that I I told it

1095
00:52:53,570 --> 00:52:56,720
to print or maybe you know long after

1096
00:52:55,220 --> 00:53:00,020
the fact who knows I don't know how they

1097
00:52:56,720 --> 00:53:02,359
build those things the point is that

1098
00:53:00,020 --> 00:53:03,800
there's no interactive context immediate

1099
00:53:02,360 --> 00:53:05,450
where where the end user can be

1100
00:53:03,800 --> 00:53:07,790
immediately you know punted to some

1101
00:53:05,450 --> 00:53:11,390
other you know to the to a website or

1102
00:53:07,790 --> 00:53:13,940
something to resolve this so I think

1103
00:53:11,390 --> 00:53:18,080
that's the end of my slides yep

1104
00:53:13,940 --> 00:53:21,640
so yeah that's yeah

1105
00:53:18,080 --> 00:53:24,259
we've we have a number of these kinds of

1106
00:53:21,640 --> 00:53:27,279
non authorization scenarios where we

1107
00:53:24,260 --> 00:53:29,890
need to do this context switch and

1108
00:53:27,280 --> 00:53:32,440
particularly as we talk about a

1109
00:53:29,890 --> 00:53:34,759
transactional authorization some of the

1110
00:53:32,440 --> 00:53:38,120
solutions that Justin's going to present

1111
00:53:34,760 --> 00:53:39,920
there seems to be a natural overlap

1112
00:53:38,120 --> 00:53:42,560
between what it's doing and what we need

1113
00:53:39,920 --> 00:53:45,440
to do for these scenarios so I'd

1114
00:53:42,560 --> 00:53:46,430
encourage us to think broadly about this

1115
00:53:45,440 --> 00:53:50,500
problem space

1116
00:53:46,430 --> 00:53:50,500
any clarifying questions for Annabelle

1117
00:54:11,289 --> 00:54:18,010
okay Anna back

1118
00:54:14,059 --> 00:54:21,349
so what go ahead

1119
00:54:18,010 --> 00:54:24,380
her your owns comments focus on sort of

1120
00:54:21,349 --> 00:54:27,829
what how it's supplying it how its

1121
00:54:24,380 --> 00:54:29,359
solving it as opposed to how its solving

1122
00:54:27,829 --> 00:54:33,589
the problems or rather than the details

1123
00:54:29,359 --> 00:54:35,299
right right yeah exactly so these slide

1124
00:54:33,589 --> 00:54:37,308
deck that is available as part of the

1125
00:54:35,299 --> 00:54:38,900
materials has a lot of technical detail

1126
00:54:37,309 --> 00:54:41,380
which I'm not going to go in be going

1127
00:54:38,900 --> 00:54:43,789
into a lot of really deep depth in today

1128
00:54:41,380 --> 00:54:46,279
but I wanted to talk about the XYZ

1129
00:54:43,789 --> 00:54:48,950
project which I started almost a year

1130
00:54:46,279 --> 00:54:50,990
ago now and it was my attempt to

1131
00:54:48,950 --> 00:54:52,339
basically take a step back from all of

1132
00:54:50,990 --> 00:54:54,020
these different things that we were

1133
00:54:52,339 --> 00:54:59,569
doing in off too and see what it looks

1134
00:54:54,020 --> 00:55:01,940
like to not use oauth2

1135
00:54:59,569 --> 00:55:03,680
itself as the basis for these solutions

1136
00:55:01,940 --> 00:55:09,770
I think I hit the wrong button there oh

1137
00:55:03,680 --> 00:55:11,359
well anyway so the thing to keep in mind

1138
00:55:09,770 --> 00:55:13,130
for all of this is what I'm presenting

1139
00:55:11,359 --> 00:55:14,930
unlike what

1140
00:55:13,130 --> 00:55:17,510
Torsten is going to be talking about and

1141
00:55:14,930 --> 00:55:20,149
has talked about this is not intended to

1142
00:55:17,510 --> 00:55:21,140
be a compatible osu extension the reason

1143
00:55:20,150 --> 00:55:23,450
for that is that there are a lot of

1144
00:55:21,140 --> 00:55:25,339
assumptions that OAuth 2 makes that if

1145
00:55:23,450 --> 00:55:26,930
you step away from those assumptions it

1146
00:55:25,339 --> 00:55:29,299
turns out things start to get a lot

1147
00:55:26,930 --> 00:55:30,828
cleaner really really quickly and I

1148
00:55:29,299 --> 00:55:32,750
wanted to run this down and see what

1149
00:55:30,829 --> 00:55:34,670
this looks like details of this project

1150
00:55:32,750 --> 00:55:36,589
are on the website althought X Y Z we

1151
00:55:34,670 --> 00:55:38,390
have Java and JavaScript implementations

1152
00:55:36,589 --> 00:55:39,859
at this point that interoperate with

1153
00:55:38,390 --> 00:55:43,750
each other which is pretty cool and no I

1154
00:55:39,859 --> 00:55:46,578
didn't write both of them myself so

1155
00:55:43,750 --> 00:55:49,970
anyway I mean this is the the shopping

1156
00:55:46,579 --> 00:55:52,579
list that I was talking about before we

1157
00:55:49,970 --> 00:55:54,980
have a lot of knowledge over the last

1158
00:55:52,579 --> 00:55:56,900
decade about what works and what doesn't

1159
00:55:54,980 --> 00:56:00,740
and how the world has changed

1160
00:55:56,900 --> 00:56:02,990
and this isn't just a blue sky exercise

1161
00:56:00,740 --> 00:56:04,759
of oh if we were inventing this in a

1162
00:56:02,990 --> 00:56:06,410
vacuum today what would it look like I

1163
00:56:04,760 --> 00:56:07,820
mean we really need to pay attention to

1164
00:56:06,410 --> 00:56:11,060
what works in OAuth to you because it is

1165
00:56:07,820 --> 00:56:13,160
an incredibly successful and incredibly

1166
00:56:11,060 --> 00:56:14,240
widely used protocol which is not going

1167
00:56:13,160 --> 00:56:16,670
away anytime soon

1168
00:56:14,240 --> 00:56:19,390
so anyway like I said it's on oh I

1169
00:56:16,670 --> 00:56:21,410
thought X Y Z you can follow along there

1170
00:56:19,390 --> 00:56:23,720
everything in this protocol is all about

1171
00:56:21,410 --> 00:56:25,910
the transaction I came up with or I

1172
00:56:23,720 --> 00:56:28,250
realized that in Oh F everything is

1173
00:56:25,910 --> 00:56:29,870
already transactional so this is cutting

1174
00:56:28,250 --> 00:56:32,720
off the titles if somebody can click on

1175
00:56:29,870 --> 00:56:36,549
the Chromebook or something in order to

1176
00:56:32,720 --> 00:56:36,549
make that top line go away

1177
00:56:36,850 --> 00:56:42,020
yeah I'm not yeah I don't okay I don't

1178
00:56:41,030 --> 00:56:46,280
know what I did there

1179
00:56:42,020 --> 00:56:48,380
whoops okay so I'm only gonna push this

1180
00:56:46,280 --> 00:56:49,910
button from now on all right Oh auth has

1181
00:56:48,380 --> 00:56:52,010
really always been a transactional

1182
00:56:49,910 --> 00:56:55,250
protocol but we've kind of pretended

1183
00:56:52,010 --> 00:56:57,050
that it hasn't been and we've kind of

1184
00:56:55,250 --> 00:56:59,570
hung everything off of the client in

1185
00:56:57,050 --> 00:57:00,710
terms of what it can do and what tokens

1186
00:56:59,570 --> 00:57:03,830
have been issued and all this other

1187
00:57:00,710 --> 00:57:08,750
stuff I came up with idea of making the

1188
00:57:03,830 --> 00:57:11,630
transaction its own thing and this is

1189
00:57:08,750 --> 00:57:13,820
evidenced by the intent registration or

1190
00:57:11,630 --> 00:57:16,100
intent lodging pattern that Torsten and

1191
00:57:13,820 --> 00:57:17,750
I have both brought up before a lot of

1192
00:57:16,100 --> 00:57:20,270
people have tried to solve this inside

1193
00:57:17,750 --> 00:57:23,150
of a auth - which means you've got to

1194
00:57:20,270 --> 00:57:24,590
invent a few extra things I decided to

1195
00:57:23,150 --> 00:57:26,060
take a look what would it be like if we

1196
00:57:24,590 --> 00:57:28,040
had a protocol that was built around

1197
00:57:26,060 --> 00:57:29,840
that from the start all right so the

1198
00:57:28,040 --> 00:57:31,970
client starts the AAS it talks to one

1199
00:57:29,840 --> 00:57:33,880
URL and says a bunch of stuff that it

1200
00:57:31,970 --> 00:57:36,890
wants to do in this transaction

1201
00:57:33,880 --> 00:57:38,810
resources again this is JSON so we

1202
00:57:36,890 --> 00:57:42,200
already out of the box have a way to say

1203
00:57:38,810 --> 00:57:43,700
we've got a rich expression of the kind

1204
00:57:42,200 --> 00:57:45,350
of thing that I want to do and I can

1205
00:57:43,700 --> 00:57:48,560
give you a list of them you know if I

1206
00:57:45,350 --> 00:57:50,150
want to do multiple things here I want

1207
00:57:48,560 --> 00:57:51,799
to be able to bind keys to things we

1208
00:57:50,150 --> 00:57:56,390
need to be able to get beyond just

1209
00:57:51,800 --> 00:57:58,010
client secrets we need to have sort of

1210
00:57:56,390 --> 00:57:59,720
asymmetrical and potentially also

1211
00:57:58,010 --> 00:58:03,230
symmetrical I'm on the fence about that

1212
00:57:59,720 --> 00:58:05,720
key bindings for client identification

1213
00:58:03,230 --> 00:58:09,350
and authentication so how can I prove

1214
00:58:05,720 --> 00:58:10,759
that to you every time the client sends

1215
00:58:09,350 --> 00:58:12,830
a key to the server

1216
00:58:10,760 --> 00:58:14,990
or an identifier of Akitas server has to

1217
00:58:12,830 --> 00:58:16,759
prove possession of it maybe it's going

1218
00:58:14,990 --> 00:58:18,290
to sign the body and throw that an extra

1219
00:58:16,760 --> 00:58:19,760
header maybe it's gonna use the D pop

1220
00:58:18,290 --> 00:58:22,190
thing maybe it's gonna use cabbage

1221
00:58:19,760 --> 00:58:25,970
signatures maybe it's gonna use em TLS

1222
00:58:22,190 --> 00:58:27,800
however that works but in all of those

1223
00:58:25,970 --> 00:58:29,419
cases the client says here's the key

1224
00:58:27,800 --> 00:58:32,330
that represents me and I can prove that

1225
00:58:29,420 --> 00:58:33,530
I have it right now

1226
00:58:32,330 --> 00:58:35,569
the kinds of things that I want to show

1227
00:58:33,530 --> 00:58:36,890
the user on the consent screen we need

1228
00:58:35,570 --> 00:58:40,130
to have a place to put those I put those

1229
00:58:36,890 --> 00:58:42,200
in the display field here but I also

1230
00:58:40,130 --> 00:58:43,940
need I also have an opportunity because

1231
00:58:42,200 --> 00:58:45,589
I'm posting this in the back-channel to

1232
00:58:43,940 --> 00:58:47,660
tell you what I already know about the

1233
00:58:45,590 --> 00:58:49,220
user maybe I've got an assertion that

1234
00:58:47,660 --> 00:58:51,740
I've gotten from you previously maybe

1235
00:58:49,220 --> 00:58:52,939
I've got something a verifiable

1236
00:58:51,740 --> 00:58:55,129
credential from a wallet that's

1237
00:58:52,940 --> 00:58:56,390
installed on a side application you know

1238
00:58:55,130 --> 00:58:58,730
there's a lot of stuff that I could tell

1239
00:58:56,390 --> 00:59:01,549
you about the user in a lot of OAuth use

1240
00:58:58,730 --> 00:59:04,760
cases today that can help das make that

1241
00:59:01,550 --> 00:59:06,970
decision I can also tell you dynamically

1242
00:59:04,760 --> 00:59:10,250
how I am able to interact with the user

1243
00:59:06,970 --> 00:59:12,799
so I can take an arbitrary redirect URL

1244
00:59:10,250 --> 00:59:15,620
I can display a code and I can also

1245
00:59:12,800 --> 00:59:17,090
receive a callback URL like all of those

1246
00:59:15,620 --> 00:59:19,819
are different dimensions that I can

1247
00:59:17,090 --> 00:59:22,030
communicate at the same time now the a s

1248
00:59:19,820 --> 00:59:24,710
processes all of those bits of that

1249
00:59:22,030 --> 00:59:26,480
transactional request maybe it figures

1250
00:59:24,710 --> 00:59:29,000
out from that we can already issue a

1251
00:59:26,480 --> 00:59:30,590
token because maybe this key represents

1252
00:59:29,000 --> 00:59:32,000
a trusted client for that particular set

1253
00:59:30,590 --> 00:59:33,380
of resources hey guess what we just

1254
00:59:32,000 --> 00:59:34,700
invented the client credentials grant

1255
00:59:33,380 --> 00:59:36,650
without having a different grant type

1256
00:59:34,700 --> 00:59:38,419
right or maybe I can give you enough

1257
00:59:36,650 --> 00:59:40,070
information about the user like a

1258
00:59:38,420 --> 00:59:42,380
credential challenge or something like

1259
00:59:40,070 --> 00:59:45,020
that but that's enough for you to to log

1260
00:59:42,380 --> 00:59:46,280
them in and grant access and hey we just

1261
00:59:45,020 --> 00:59:48,710
invented the resource owner password

1262
00:59:46,280 --> 00:59:50,720
grant without actually binding directly

1263
00:59:48,710 --> 00:59:54,230
to that or using a different grant type

1264
00:59:50,720 --> 00:59:55,700
right but in a lot of cases and this is

1265
00:59:54,230 --> 00:59:57,710
again one of them one of the beauties of

1266
00:59:55,700 --> 00:59:59,060
all of two is the auth server says you

1267
00:59:57,710 --> 01:00:01,490
know I want to be able to talk to the

1268
00:59:59,060 --> 01:00:04,310
user well this is where X Y Z really

1269
01:00:01,490 --> 01:00:05,600
starts to come into its own because you

1270
01:00:04,310 --> 01:00:07,340
know if we're in a traditional Roth

1271
01:00:05,600 --> 01:00:09,350
world we would have already had to send

1272
01:00:07,340 --> 01:00:10,820
the user over to the a s in order for

1273
01:00:09,350 --> 01:00:13,040
the a s to decide it doesn't have to

1274
01:00:10,820 --> 01:00:14,570
talk to the user at this point the a s

1275
01:00:13,040 --> 01:00:17,390
can figure out like yes I need you to

1276
01:00:14,570 --> 01:00:20,450
talk to the user so to do that go to

1277
01:00:17,390 --> 01:00:22,069
this URL and the client goes to that URL

1278
01:00:20,450 --> 01:00:24,350
it doesn't add any

1279
01:00:22,070 --> 01:00:25,760
- it doesn't add client IDs it doesn't

1280
01:00:24,350 --> 01:00:27,980
add scopes it doesn't do any of that

1281
01:00:25,760 --> 01:00:29,690
because it doesn't have to this

1282
01:00:27,980 --> 01:00:31,810
interaction URL can be generated

1283
01:00:29,690 --> 01:00:34,700
specifically for this transaction and

1284
01:00:31,810 --> 01:00:38,360
the client just goes to it we've already

1285
01:00:34,700 --> 01:00:39,919
cut out a huge swath of issues that

1286
01:00:38,360 --> 01:00:42,440
OAuth 2 has in the front channel today

1287
01:00:39,920 --> 01:00:44,210
without having to add extra stuff it's

1288
01:00:42,440 --> 01:00:45,800
just built around that so we look up the

1289
01:00:44,210 --> 01:00:48,880
transaction the user does all of their

1290
01:00:45,800 --> 01:00:52,460
normal user stuff and we calculate a

1291
01:00:48,880 --> 01:00:54,980
hash to protect our callback that's

1292
01:00:52,460 --> 01:00:56,660
based on a nonce that the client sent in

1293
01:00:54,980 --> 01:00:58,550
the front Channel announced that the

1294
01:00:56,660 --> 01:01:01,730
server sent in its response and this

1295
01:00:58,550 --> 01:01:05,990
thing called the interaction handle yes

1296
01:01:01,730 --> 01:01:08,030
I'm if you watch until a little more

1297
01:01:05,990 --> 01:01:09,979
than we need but I was gonna maybe go

1298
01:01:08,030 --> 01:01:11,780
back to the interaction model are you

1299
01:01:09,980 --> 01:01:15,770
envisioning that there's ways of doing

1300
01:01:11,780 --> 01:01:17,300
it that are non-web yeah are some of the

1301
01:01:15,770 --> 01:01:20,270
other comments of what other people were

1302
01:01:17,300 --> 01:01:21,980
yes acerra lee a redirect because yeah

1303
01:01:20,270 --> 01:01:24,230
that's that's later on may not be in a

1304
01:01:21,980 --> 01:01:25,610
browser yeah absolutely okay yeah I was

1305
01:01:24,230 --> 01:01:27,380
gonna go I was gonna go through the web

1306
01:01:25,610 --> 01:01:29,540
case first because that's the most okay

1307
01:01:27,380 --> 01:01:32,330
oo-aah fee okay and then yeah I've I've

1308
01:01:29,540 --> 01:01:37,100
got more i've got like 30 72 slides or

1309
01:01:32,330 --> 01:01:38,690
something so anyway the whole idea of

1310
01:01:37,100 --> 01:01:40,490
this hash is that it connects the three

1311
01:01:38,690 --> 01:01:42,140
parts of the front channel triangle so

1312
01:01:40,490 --> 01:01:43,879
the clients request the service response

1313
01:01:42,140 --> 01:01:46,279
and this front channel responds all

1314
01:01:43,880 --> 01:01:49,190
together in a relatively simple to

1315
01:01:46,280 --> 01:01:50,960
calculate cryptographic protection you

1316
01:01:49,190 --> 01:01:52,850
know you don't need something as complex

1317
01:01:50,960 --> 01:01:56,240
and structured as jws in order to just

1318
01:01:52,850 --> 01:01:57,290
tie these things together alright so the

1319
01:01:56,240 --> 01:02:00,799
client goes and continues the

1320
01:01:57,290 --> 01:02:02,420
transaction it's got the a transaction

1321
01:02:00,800 --> 01:02:03,950
continuation handle that it can use and

1322
01:02:02,420 --> 01:02:05,510
it also has this interaction handle that

1323
01:02:03,950 --> 01:02:09,410
it got from the back channel and the

1324
01:02:05,510 --> 01:02:11,270
front channel and then in this call the

1325
01:02:09,410 --> 01:02:13,069
client has to prove possession of its

1326
01:02:11,270 --> 01:02:14,420
key the same key that it used to start

1327
01:02:13,070 --> 01:02:17,390
the transaction has to present that

1328
01:02:14,420 --> 01:02:18,950
again that proof again and the auth

1329
01:02:17,390 --> 01:02:20,750
server needs to check that and that

1330
01:02:18,950 --> 01:02:22,430
allows us to even with an ephemeral

1331
01:02:20,750 --> 01:02:24,440
client that just made up its keys the

1332
01:02:22,430 --> 01:02:26,359
first time it ever turned on and ever

1333
01:02:24,440 --> 01:02:28,250
talked to this alt server you can still

1334
01:02:26,360 --> 01:02:30,080
protect that to make sure that it's not

1335
01:02:28,250 --> 01:02:31,700
hijacked all unlike an OAuth public

1336
01:02:30,080 --> 01:02:33,470
client so in other words we're getting a

1337
01:02:31,700 --> 01:02:35,299
lot of the benefits of pixie yes I know

1338
01:02:33,470 --> 01:02:35,839
this is not the same model as pixie but

1339
01:02:35,300 --> 01:02:38,960
there's a

1340
01:02:35,840 --> 01:02:40,340
a lot of overlap in this and if the auth

1341
01:02:38,960 --> 01:02:42,110
server says everything's all good you

1342
01:02:40,340 --> 01:02:44,390
get an access token we don't need to go

1343
01:02:42,110 --> 01:02:47,240
into those I'm going to very very

1344
01:02:44,390 --> 01:02:49,730
quickly skim through this the the

1345
01:02:47,240 --> 01:02:51,979
handles part of X Y Z is one of the more

1346
01:02:49,730 --> 01:02:54,200
confusing aspects to explain I'd be

1347
01:02:51,980 --> 01:02:55,880
happy to go into detail after the TLDR

1348
01:02:54,200 --> 01:02:58,910
version is that all of those sections

1349
01:02:55,880 --> 01:03:00,620
that I sent to the auth server the all

1350
01:02:58,910 --> 01:03:03,140
server can say you know what next time

1351
01:03:00,620 --> 01:03:05,029
that you talk to me you particular

1352
01:03:03,140 --> 01:03:06,620
client instance the next time you talk

1353
01:03:05,030 --> 01:03:09,200
to me instead of sending me that JSON

1354
01:03:06,620 --> 01:03:10,940
object send me this string and I'll

1355
01:03:09,200 --> 01:03:13,220
remember that it represents that JSON

1356
01:03:10,940 --> 01:03:15,890
object you could do that out-of-band

1357
01:03:13,220 --> 01:03:18,080
with a static registration page and more

1358
01:03:15,890 --> 01:03:19,700
on that later though so you start a new

1359
01:03:18,080 --> 01:03:21,350
transaction instead of sending the JSON

1360
01:03:19,700 --> 01:03:23,450
objects you just send the strings and

1361
01:03:21,350 --> 01:03:25,700
the client still has to prove possession

1362
01:03:23,450 --> 01:03:26,899
of all of the reference keys even if

1363
01:03:25,700 --> 01:03:28,189
it's not sending the public key directly

1364
01:03:26,900 --> 01:03:30,830
if it's sending the public key by

1365
01:03:28,190 --> 01:03:33,260
reference then you just you still have

1366
01:03:30,830 --> 01:03:35,180
to prove possession of it an access

1367
01:03:33,260 --> 01:03:36,560
token could come back with the

1368
01:03:35,180 --> 01:03:39,290
transaction handle because that allows

1369
01:03:36,560 --> 01:03:40,790
us to refresh in other words this gives

1370
01:03:39,290 --> 01:03:42,620
us refresh tokens without having to have

1371
01:03:40,790 --> 01:03:44,210
refresh tokens because what is a refresh

1372
01:03:42,620 --> 01:03:45,980
token except a way to continue a

1373
01:03:44,210 --> 01:03:49,610
previously authorized transaction that

1374
01:03:45,980 --> 01:03:50,810
the users already done right so one of

1375
01:03:49,610 --> 01:03:52,940
the things I hope you guys are seeing is

1376
01:03:50,810 --> 01:03:55,850
that these are all concepts that I

1377
01:03:52,940 --> 01:03:57,890
didn't invent in this project but by

1378
01:03:55,850 --> 01:04:01,220
taking sort of a different slice of

1379
01:03:57,890 --> 01:04:02,629
things it drastically simplifies how

1380
01:04:01,220 --> 01:04:04,069
everything fits together and makes it a

1381
01:04:02,630 --> 01:04:05,780
lot more consistent with each other

1382
01:04:04,070 --> 01:04:08,300
without oversimplifying it

1383
01:04:05,780 --> 01:04:10,130
same thing with we can get back to

1384
01:04:08,300 --> 01:04:12,050
simple scope strings which are very

1385
01:04:10,130 --> 01:04:13,850
useful for developers if you have a very

1386
01:04:12,050 --> 01:04:17,060
small well-defined API the difference

1387
01:04:13,850 --> 01:04:19,370
here is that each of those strings is

1388
01:04:17,060 --> 01:04:22,910
defined to expand to one of these

1389
01:04:19,370 --> 01:04:24,080
objects like its it is a handle to one

1390
01:04:22,910 --> 01:04:25,730
of these objects just like those other

1391
01:04:24,080 --> 01:04:27,890
handles I said instead of sending

1392
01:04:25,730 --> 01:04:30,110
instead of sending this objects and this

1393
01:04:27,890 --> 01:04:32,690
string scopes turn into the exact same

1394
01:04:30,110 --> 01:04:33,920
construct which already gives us the

1395
01:04:32,690 --> 01:04:35,450
type of combinatorics that were

1396
01:04:33,920 --> 01:04:38,720
struggling with and rich authorization

1397
01:04:35,450 --> 01:04:40,370
requests today it's built in now to

1398
01:04:38,720 --> 01:04:42,259
dick's question other ways to interact

1399
01:04:40,370 --> 01:04:44,060
with things say I've got a user code

1400
01:04:42,260 --> 01:04:46,940
this one's pretty simple I send you back

1401
01:04:44,060 --> 01:04:48,440
a relatively static URL in a user code

1402
01:04:46,940 --> 01:04:49,369
you trip that out to the user that go

1403
01:04:48,440 --> 01:04:51,799
with a secondary to

1404
01:04:49,369 --> 01:04:53,450
punch that in interact now you're

1405
01:04:51,799 --> 01:04:55,640
looking up the transaction based on the

1406
01:04:53,450 --> 01:04:58,368
user code instead of the instead of the

1407
01:04:55,640 --> 01:05:00,499
URL because the URL is static so we

1408
01:04:58,369 --> 01:05:02,029
can't add randomness there but we've got

1409
01:05:00,499 --> 01:05:03,799
this user code we can look up what

1410
01:05:02,029 --> 01:05:04,579
transaction we're we're working on and

1411
01:05:03,799 --> 01:05:06,969
go from there

1412
01:05:04,579 --> 01:05:10,400
this is incidentally how people tend to

1413
01:05:06,969 --> 01:05:13,130
build the device flow today you know all

1414
01:05:10,400 --> 01:05:14,509
servers meanwhile we've got a polling

1415
01:05:13,130 --> 01:05:16,099
mechanism with that transaction

1416
01:05:14,509 --> 01:05:17,809
continuation handle there's a waiting

1417
01:05:16,099 --> 01:05:18,890
mechanism you can rotate the transaction

1418
01:05:17,809 --> 01:05:21,049
handle every time you use it for

1419
01:05:18,890 --> 01:05:22,969
security if you want to do a combined

1420
01:05:21,049 --> 01:05:24,890
URL well I realize that you don't

1421
01:05:22,969 --> 01:05:26,809
actually need to do the OAuth device

1422
01:05:24,890 --> 01:05:29,479
flow combined URL because we have a way

1423
01:05:26,809 --> 01:05:31,999
to say here's a an arbitrary URL that

1424
01:05:29,479 --> 01:05:33,788
you can go to I can redirect you to an

1425
01:05:31,999 --> 01:05:35,868
arbitrary URL I just can't get you back

1426
01:05:33,789 --> 01:05:37,700
right so that's why it's important to

1427
01:05:35,869 --> 01:05:40,369
split these two so I can now send the

1428
01:05:37,700 --> 01:05:43,069
user to an arbitrary URL and meanwhile

1429
01:05:40,369 --> 01:05:45,190
I'm polling now I also think that

1430
01:05:43,069 --> 01:05:47,930
there's a huge opportunity for us here

1431
01:05:45,190 --> 01:05:50,049
to expand this one of the clients that

1432
01:05:47,930 --> 01:05:54,109
I'm working with is using did comm

1433
01:05:50,049 --> 01:05:55,519
messages to talk between agents and back

1434
01:05:54,109 --> 01:05:57,288
channel fabric servers and stuff like

1435
01:05:55,519 --> 01:05:59,269
that if the auth server can send me a

1436
01:05:57,289 --> 01:06:01,819
did comm message that I can hand over to

1437
01:05:59,269 --> 01:06:05,269
my local wallet for processing that

1438
01:06:01,819 --> 01:06:06,950
might let me bypass most of the user

1439
01:06:05,269 --> 01:06:08,839
interactions stuff because I can just

1440
01:06:06,950 --> 01:06:11,328
answer those questions directly using

1441
01:06:08,839 --> 01:06:16,420
the fabric or maybe I want to do a web

1442
01:06:11,329 --> 01:06:19,430
event actually do this with web

1443
01:06:16,420 --> 01:06:22,999
authenticate of web often and native

1444
01:06:19,430 --> 01:06:25,339
phyto api's are almost there so I think

1445
01:06:22,999 --> 01:06:26,598
that the technology to support this is

1446
01:06:25,339 --> 01:06:28,430
moving there we should have a space to

1447
01:06:26,599 --> 01:06:29,930
be able to do this kind of thing give me

1448
01:06:28,430 --> 01:06:32,868
a challenge I will sign the challenge

1449
01:06:29,930 --> 01:06:34,669
and hand it back right identity I think

1450
01:06:32,869 --> 01:06:36,799
we can stack that on just like we did

1451
01:06:34,670 --> 01:06:38,150
with Open ID Connect errands actually

1452
01:06:36,799 --> 01:06:39,619
got Aaron Park he's got a great blog

1453
01:06:38,150 --> 01:06:41,329
post about that just go read that I'm

1454
01:06:39,619 --> 01:06:43,309
not gonna get into it I think we can

1455
01:06:41,329 --> 01:06:45,380
bind tokens in the same way that we're

1456
01:06:43,309 --> 01:06:46,700
doing keep wrote key proofing with all

1457
01:06:45,380 --> 01:06:49,309
of the regular client key proofing

1458
01:06:46,700 --> 01:06:50,390
during the transaction process discovery

1459
01:06:49,309 --> 01:06:52,670
is an interesting thing because the

1460
01:06:50,390 --> 01:06:53,598
client only needs that transaction URL

1461
01:06:52,670 --> 01:06:55,670
to kick off the whole thing

1462
01:06:53,599 --> 01:06:57,200
unlike oh where you at least need the

1463
01:06:55,670 --> 01:06:58,819
authorization endpoint and the token

1464
01:06:57,200 --> 01:07:02,029
endpoint and you need those two tied

1465
01:06:58,819 --> 01:07:03,890
together somehow we've seen real world

1466
01:07:02,030 --> 01:07:05,180
based on those getting split up from

1467
01:07:03,890 --> 01:07:08,109
each other

1468
01:07:05,180 --> 01:07:10,129
with XYZ because the interaction URL is

1469
01:07:08,110 --> 01:07:12,590
generated and returned directly to the

1470
01:07:10,130 --> 01:07:14,270
client from the transaction endpoint you

1471
01:07:12,590 --> 01:07:16,160
really only need one URL to kick the

1472
01:07:14,270 --> 01:07:17,210
whole thing off if you need more than

1473
01:07:16,160 --> 01:07:18,620
that

1474
01:07:17,210 --> 01:07:21,290
Jorge Fletcher and I have been talking

1475
01:07:18,620 --> 01:07:23,450
about a way for the client to signal

1476
01:07:21,290 --> 01:07:25,550
these are a bunch of additional things

1477
01:07:23,450 --> 01:07:27,560
that I can do and the server kind of

1478
01:07:25,550 --> 01:07:29,180
picks from that list and says you know

1479
01:07:27,560 --> 01:07:30,830
all right so here's here's what you get

1480
01:07:29,180 --> 01:07:34,100
to use in the course of this transaction

1481
01:07:30,830 --> 01:07:36,170
when you're talking to me so it's a very

1482
01:07:34,100 --> 01:07:37,880
simple like one round-trip way to

1483
01:07:36,170 --> 01:07:39,650
effectively do a discovery and

1484
01:07:37,880 --> 01:07:41,870
registration built into the transaction

1485
01:07:39,650 --> 01:07:45,170
protocol without adding additional stuff

1486
01:07:41,870 --> 01:07:49,069
on top of it these concepts I think map

1487
01:07:45,170 --> 01:07:51,080
pretty decently to oauth2 there's a lot

1488
01:07:49,070 --> 01:07:53,330
of familiar stuff here it's just sliced

1489
01:07:51,080 --> 01:07:56,390
up in a different way so all the key

1490
01:07:53,330 --> 01:07:59,120
possession that we're doing with XYZ it

1491
01:07:56,390 --> 01:08:01,160
Maps and in some cases takes directly

1492
01:07:59,120 --> 01:08:03,200
from existing technologies my

1493
01:08:01,160 --> 01:08:06,790
implementation does the deep op header

1494
01:08:03,200 --> 01:08:09,379
signature thing as one of its options

1495
01:08:06,790 --> 01:08:09,860
and I've already gone over most of that

1496
01:08:09,380 --> 01:08:13,580
kind of stuff

1497
01:08:09,860 --> 01:08:15,890
so today you tell an OAuth client

1498
01:08:13,580 --> 01:08:17,540
developer here's a bunch of strings that

1499
01:08:15,890 --> 01:08:20,299
you put into your configuration in these

1500
01:08:17,540 --> 01:08:22,549
specific spaces we're really and send a

1501
01:08:20,299 --> 01:08:24,200
json a-- or send a form post we're

1502
01:08:22,549 --> 01:08:25,910
really sending telling them the same

1503
01:08:24,200 --> 01:08:27,710
things we need to keep this simple for

1504
01:08:25,910 --> 01:08:29,389
client developers more than anything

1505
01:08:27,710 --> 01:08:32,270
so we're saying here's a bunch of

1506
01:08:29,390 --> 01:08:34,940
arbitrary strings that you put into this

1507
01:08:32,270 --> 01:08:38,049
JSON object and post it over to the

1508
01:08:34,939 --> 01:08:40,219
thing to start the transaction process

1509
01:08:38,049 --> 01:08:42,680
there's a whole lot of pros and cons to

1510
01:08:40,220 --> 01:08:45,560
this approach you know like I said I've

1511
01:08:42,680 --> 01:08:47,359
built it out in Java somebody else has

1512
01:08:45,560 --> 01:08:49,160
built it out of JavaScript they actually

1513
01:08:47,359 --> 01:08:52,400
work together which i think is a is a

1514
01:08:49,160 --> 01:08:56,778
good first sign and I think there's a

1515
01:08:52,399 --> 01:08:58,639
lot that we can do here you could kind

1516
01:08:56,779 --> 01:09:00,980
of make something that looks like XYZ

1517
01:08:58,640 --> 01:09:03,350
buy cobbling together a bunch of

1518
01:09:00,979 --> 01:09:05,929
existing extensions and proposed

1519
01:09:03,350 --> 01:09:09,020
extensions and that's you know that's

1520
01:09:05,930 --> 01:09:10,700
not surprising but what you get with the

1521
01:09:09,020 --> 01:09:15,290
XYZ approach is something that is

1522
01:09:10,700 --> 01:09:18,080
internally consistent and is much more

1523
01:09:15,290 --> 01:09:20,720
sort of simple and intentionally

1524
01:09:18,080 --> 01:09:46,370
designed and to end right so what I'm

1525
01:09:20,720 --> 01:09:50,120
asking let's go build OAuth 3 how shall

1526
01:09:46,370 --> 01:09:52,430
I start while you are making up your

1527
01:09:50,120 --> 01:09:57,110
mind whether we should start working on

1528
01:09:52,430 --> 01:10:01,730
over three I'm gonna talk about baby

1529
01:09:57,110 --> 01:10:04,219
steps I would say so instead of the new

1530
01:10:01,730 --> 01:10:07,129
disruptive solution I've been working

1531
01:10:04,220 --> 01:10:11,270
with disappeared of some members of this

1532
01:10:07,130 --> 01:10:15,830
community on solutions that are built on

1533
01:10:11,270 --> 01:10:25,400
top of OAuth 2 to solve the problem to

1534
01:10:15,830 --> 01:10:27,580
some extent I would like to ya know with

1535
01:10:25,400 --> 01:10:31,009
the clicker I can also present them

1536
01:10:27,580 --> 01:10:39,680
alright I think there's something wrong

1537
01:10:31,010 --> 01:10:41,320
with the presentation no I did not I

1538
01:10:39,680 --> 01:10:43,790
[Music]

1539
01:10:41,320 --> 01:10:48,200
know you need to be challenged then you

1540
01:10:43,790 --> 01:10:52,400
make it right thank you very much ok I'm

1541
01:10:48,200 --> 01:10:55,090
gonna present two drafts the first one

1542
01:10:52,400 --> 01:10:58,820
is called pushed authorization requests

1543
01:10:55,090 --> 01:11:02,330
one could say that's an attempt to have

1544
01:10:58,820 --> 01:11:05,540
that first initial magical request that

1545
01:11:02,330 --> 01:11:07,790
Justin just talked about back porta 2 of

1546
01:11:05,540 --> 01:11:10,670
2 and it's basically also in

1547
01:11:07,790 --> 01:11:12,580
reintroduction of the token Eric the

1548
01:11:10,670 --> 01:11:18,590
request token request that we already

1549
01:11:12,580 --> 01:11:20,480
we're familiar with and O of 1 so um the

1550
01:11:18,590 --> 01:11:22,040
pushed authorization request is based on

1551
01:11:20,480 --> 01:11:24,620
work that we have done at the open ID

1552
01:11:22,040 --> 01:11:26,540
foundation it's an individual draft and

1553
01:11:24,620 --> 01:11:28,580
although it's an individual draft it has

1554
01:11:26,540 --> 01:11:32,810
five authors which

1555
01:11:28,580 --> 01:11:35,360
Brian NASA Kimora Dave Tong from the

1556
01:11:32,810 --> 01:11:41,000
fabric working group Philip spoken and

1557
01:11:35,360 --> 01:11:43,910
myself the draft basically extends or

1558
01:11:41,000 --> 01:11:47,410
compliments jar the jet protected

1559
01:11:43,910 --> 01:11:51,230
authorization request by allowing to

1560
01:11:47,410 --> 01:11:53,750
push the authorization payload to the

1561
01:11:51,230 --> 01:11:55,759
authorization server in advanced in a

1562
01:11:53,750 --> 01:11:58,970
back-channel communication so now in the

1563
01:11:55,760 --> 01:12:02,510
same way as the arm what's the name of

1564
01:11:58,970 --> 01:12:04,250
the end point in the XYZ thank you in

1565
01:12:02,510 --> 01:12:07,220
the same way as a transaction endpoint

1566
01:12:04,250 --> 01:12:08,720
is used to initialize a transaction then

1567
01:12:07,220 --> 01:12:12,140
you push the authorization request

1568
01:12:08,720 --> 01:12:14,930
endpoint is used to upload all the data

1569
01:12:12,140 --> 01:12:17,480
of the authorization request and then

1570
01:12:14,930 --> 01:12:20,480
the client gets back something that's

1571
01:12:17,480 --> 01:12:24,349
sent in the front channel since we do

1572
01:12:20,480 --> 01:12:26,830
want to provide to provide a solution

1573
01:12:24,350 --> 01:12:29,960
within the Oh of existing oauth2 world

1574
01:12:26,830 --> 01:12:32,720
we are not returning and the redirect

1575
01:12:29,960 --> 01:12:35,750
you Maya because the redirect URI is the

1576
01:12:32,720 --> 01:12:38,540
authorization endpoint so you see we're

1577
01:12:35,750 --> 01:12:40,940
trying to get as far as we could within

1578
01:12:38,540 --> 01:12:43,600
or off to that oh where as Justin's

1579
01:12:40,940 --> 01:12:46,370
proposal is something that's really

1580
01:12:43,600 --> 01:12:48,530
completely new but without all the

1581
01:12:46,370 --> 01:12:50,780
legend see that we have in an O of to

1582
01:12:48,530 --> 01:12:53,889
base solution alright so how does it

1583
01:12:50,780 --> 01:12:55,400
look like I mean basically it's really

1584
01:12:53,890 --> 01:12:59,060
that simple

1585
01:12:55,400 --> 01:13:02,269
a traditional OAuth request is made up

1586
01:12:59,060 --> 01:13:05,030
several over your I query parameters so

1587
01:13:02,270 --> 01:13:08,240
you just send a get request to the old

1588
01:13:05,030 --> 01:13:11,870
authorization endpoint now imagine if

1589
01:13:08,240 --> 01:13:13,780
you just put the same parameters in a

1590
01:13:11,870 --> 01:13:17,720
post request Wow

1591
01:13:13,780 --> 01:13:21,559
that's simple right but it gives you a

1592
01:13:17,720 --> 01:13:23,300
lot because first of all you don't have

1593
01:13:21,560 --> 01:13:26,600
a size limitation you just sent that

1594
01:13:23,300 --> 01:13:30,160
stuff back ends to back-end server to

1595
01:13:26,600 --> 01:13:34,550
server to the authorization server end

1596
01:13:30,160 --> 01:13:34,950
you can authenticate the client and send

1597
01:13:34,550 --> 01:13:36,960
that

1598
01:13:34,950 --> 01:13:38,700
I have really been missing an oauth2

1599
01:13:36,960 --> 01:13:42,870
because when the authorization request

1600
01:13:38,700 --> 01:13:45,269
hits the a s the a s summer can identify

1601
01:13:42,870 --> 01:13:47,340
the client but it can't be sure that

1602
01:13:45,270 --> 01:13:50,610
it's really declined it's talking to up

1603
01:13:47,340 --> 01:13:52,650
to the client tries to redeem the code

1604
01:13:50,610 --> 01:13:54,990
at the token end point so now we change

1605
01:13:52,650 --> 01:13:56,730
that and that also dramatically changed

1606
01:13:54,990 --> 01:14:01,370
the trust model in the security model so

1607
01:13:56,730 --> 01:14:01,370
with the introduction of power we can

1608
01:14:01,760 --> 01:14:07,410
omit some of the security measures that

1609
01:14:04,650 --> 01:14:09,030
we right now require clients to use in a

1610
01:14:07,410 --> 01:14:11,070
security BCP well that's that's

1611
01:14:09,030 --> 01:14:14,280
sometimes some some way to go all right

1612
01:14:11,070 --> 01:14:15,990
so we simply push that data to the

1613
01:14:14,280 --> 01:14:20,150
pushed authorization request and get

1614
01:14:15,990 --> 01:14:24,300
back a request UI and that's where we

1615
01:14:20,150 --> 01:14:26,370
then start to use shower because char

1616
01:14:24,300 --> 01:14:30,060
has a mode where the client can use a

1617
01:14:26,370 --> 01:14:32,099
request your I to point to some plot

1618
01:14:30,060 --> 01:14:36,150
that contains the authorization request

1619
01:14:32,100 --> 01:14:37,650
data and that's it we just modify the

1620
01:14:36,150 --> 01:14:40,139
authorization request through the phone

1621
01:14:37,650 --> 01:14:40,769
channel to use that request UI so it's

1622
01:14:40,140 --> 01:14:42,750
really simple

1623
01:14:40,770 --> 01:14:44,640
you just take the data send it to the

1624
01:14:42,750 --> 01:14:47,550
backend get to request your I and send

1625
01:14:44,640 --> 01:14:51,570
it in the front channel and this request

1626
01:14:47,550 --> 01:14:54,030
URI does not need to really expose the

1627
01:14:51,570 --> 01:14:57,030
authorization data because in the end

1628
01:14:54,030 --> 01:14:58,920
it's only the a s that needs access to

1629
01:14:57,030 --> 01:15:01,349
have access to that data so we could

1630
01:14:58,920 --> 01:15:03,270
have used an opaque handle instead but

1631
01:15:01,350 --> 01:15:08,520
since we wanted to be compatible to jar

1632
01:15:03,270 --> 01:15:11,610
we use a request UI there's the second

1633
01:15:08,520 --> 01:15:14,820
mode which allows the client instead of

1634
01:15:11,610 --> 01:15:17,549
sending all the individual parameters to

1635
01:15:14,820 --> 01:15:22,590
send a signed request object in the post

1636
01:15:17,550 --> 01:15:23,760
body and this is for example a mode that

1637
01:15:22,590 --> 01:15:26,280
you can use if you want to implement

1638
01:15:23,760 --> 01:15:28,560
non-repudiation with application level

1639
01:15:26,280 --> 01:15:30,900
signatures so it nicely fits into here

1640
01:15:28,560 --> 01:15:33,000
what you get is also request your eye

1641
01:15:30,900 --> 01:15:37,740
so the difference just lays in the value

1642
01:15:33,000 --> 01:15:39,600
you push the data to the a s or the

1643
01:15:37,740 --> 01:15:41,790
authorization request itself looks

1644
01:15:39,600 --> 01:15:44,100
always the same it just takes to request

1645
01:15:41,790 --> 01:15:47,049
your I so you see it's it's somehow

1646
01:15:44,100 --> 01:15:48,729
similar to what XYZ does here

1647
01:15:47,049 --> 01:15:51,309
just the client knows there is a request

1648
01:15:48,729 --> 01:15:55,079
to I parameter that I need to add to

1649
01:15:51,309 --> 01:15:59,909
that authorization request your I and

1650
01:15:55,079 --> 01:16:03,699
the advantages are from my perspective

1651
01:15:59,909 --> 01:16:06,489
really significant because since we can

1652
01:16:03,699 --> 01:16:08,489
use Transport Security now we've got

1653
01:16:06,489 --> 01:16:12,369
integrity protection and authenticity

1654
01:16:08,489 --> 01:16:15,489
more or less free of charge and we got

1655
01:16:12,369 --> 01:16:17,829
client authentication which means in the

1656
01:16:15,489 --> 01:16:20,199
front end process the AAS already knows

1657
01:16:17,829 --> 01:16:24,039
yes I'm talking to the legitimate client

1658
01:16:20,199 --> 01:16:25,749
and the AAS can really early refused to

1659
01:16:24,039 --> 01:16:26,949
talk to any client that's not really

1660
01:16:25,749 --> 01:16:28,659
legitimate and cannot really

1661
01:16:26,949 --> 01:16:32,558
authenticate or is not authorized for

1662
01:16:28,659 --> 01:16:37,089
certain scope for example and the

1663
01:16:32,559 --> 01:16:39,249
migration path is that simple since the

1664
01:16:37,089 --> 01:16:42,129
same parameter even in the same encoding

1665
01:16:39,249 --> 01:16:46,059
are put in the post body instead of the

1666
01:16:42,129 --> 01:16:49,629
URI or quest your I and there are some

1667
01:16:46,059 --> 01:16:54,449
other interesting properties of that of

1668
01:16:49,629 --> 01:16:56,889
that new draft for example we do not

1669
01:16:54,449 --> 01:17:00,249
need to set up redirect your eyes in

1670
01:16:56,889 --> 01:17:02,079
advance because now since we can

1671
01:17:00,249 --> 01:17:04,059
authenticate the confidential client we

1672
01:17:02,079 --> 01:17:05,978
can register redirect your eyes on the

1673
01:17:04,059 --> 01:17:09,339
fly which again gives us the capability

1674
01:17:05,979 --> 01:17:12,159
to put some state into that or and

1675
01:17:09,339 --> 01:17:15,699
that's that's very interesting for open

1676
01:17:12,159 --> 01:17:17,499
banking and other other schemes we have

1677
01:17:15,699 --> 01:17:19,688
a central authority where the client

1678
01:17:17,499 --> 01:17:22,568
registers but and there are multiple a

1679
01:17:19,689 --> 01:17:25,179
SS that the client wants to talk to so

1680
01:17:22,569 --> 01:17:27,459
the client can dynamically register

1681
01:17:25,179 --> 01:17:29,049
redirect URI for the different a SS but

1682
01:17:27,459 --> 01:17:30,789
use the same credential set that were

1683
01:17:29,049 --> 01:17:32,949
externally managed so there's a lot of

1684
01:17:30,789 --> 01:17:38,289
potential in this really really small

1685
01:17:32,949 --> 01:17:41,558
extension and Daniel Fett believes that

1686
01:17:38,289 --> 01:17:43,449
is also resistant against mix-up and

1687
01:17:41,559 --> 01:17:45,159
that I think what's the attack you

1688
01:17:43,449 --> 01:17:47,829
referred to when you said there are

1689
01:17:45,159 --> 01:17:49,749
attacks that can be launched because we

1690
01:17:47,829 --> 01:17:51,429
have two different endpoints in that

1691
01:17:49,749 --> 01:17:54,188
case since we are authenticating the

1692
01:17:51,429 --> 01:17:57,900
client in the first step we still have

1693
01:17:54,189 --> 01:18:00,659
to analysis and analysis analyze that

1694
01:17:57,900 --> 01:18:04,909
but we are pretty pretty confident that

1695
01:18:00,659 --> 01:18:11,070
also mix-up goes away all right

1696
01:18:04,909 --> 01:18:25,379
Mars do you want to ask for clarifying

1697
01:18:11,070 --> 01:18:29,309
questions or should I go on okay Ludwig

1698
01:18:25,380 --> 01:18:32,730
sites one question would you present it

1699
01:18:29,310 --> 01:18:35,159
there with the posts for authorization

1700
01:18:32,730 --> 01:18:37,949
and power for token and point this looks

1701
01:18:35,159 --> 01:18:43,650
a lot like we're we're doing already in

1702
01:18:37,949 --> 01:18:46,589
case have you looked at the ACE draft if

1703
01:18:43,650 --> 01:18:51,299
you were for me to go into what trough I

1704
01:18:46,590 --> 01:18:58,620
should look I will do so okay yeah thank

1705
01:18:51,300 --> 01:19:00,929
you okay next topic so send since we now

1706
01:18:58,620 --> 01:19:02,969
have to survey the proposal for the

1707
01:19:00,929 --> 01:19:05,790
transport issues let's take into how do

1708
01:19:02,969 --> 01:19:10,110
we convey the rich authorization data in

1709
01:19:05,790 --> 01:19:12,360
Oh F 2 dot oh there's another draft

1710
01:19:10,110 --> 01:19:14,400
which is called draft rich authorization

1711
01:19:12,360 --> 01:19:18,239
request drawer that I brought together

1712
01:19:14,400 --> 01:19:23,969
with Ryan and Justin and it introduces a

1713
01:19:18,239 --> 01:19:26,190
new parameter to OAuth 2 which is used

1714
01:19:23,969 --> 01:19:28,920
to carry fine-grained authorization data

1715
01:19:26,190 --> 01:19:32,190
in as what Jason in the authorization

1716
01:19:28,920 --> 01:19:35,580
request and it can be used in addition

1717
01:19:32,190 --> 01:19:39,960
or as a replacement for the scope

1718
01:19:35,580 --> 01:19:41,850
parameter as Justin pointed out there is

1719
01:19:39,960 --> 01:19:45,989
some text about around combining those

1720
01:19:41,850 --> 01:19:50,730
which is not as simple as it as it seems

1721
01:19:45,989 --> 01:19:52,889
to be on first sight and also would like

1722
01:19:50,730 --> 01:19:54,419
to point out that the resources I think

1723
01:19:52,890 --> 01:19:56,760
it's a resources parameter in exercise

1724
01:19:54,420 --> 01:19:59,820
we the resources parameter more or less

1725
01:19:56,760 --> 01:20:01,620
uses the same structure as the

1726
01:19:59,820 --> 01:20:03,840
authorization details or to be more

1727
01:20:01,620 --> 01:20:06,210
precise authorization we modified

1728
01:20:03,840 --> 01:20:09,739
authorization details to use the same

1729
01:20:06,210 --> 01:20:09,739
structure as XYZ it does

1730
01:20:11,630 --> 01:20:16,280
does it look like I mean that's

1731
01:20:14,260 --> 01:20:20,090
intentionally the same example that I

1732
01:20:16,280 --> 01:20:21,830
gave in my earlier presentation so it's

1733
01:20:20,090 --> 01:20:24,080
a payment and on the left hand side you

1734
01:20:21,830 --> 01:20:28,639
can see the example on the right hand

1735
01:20:24,080 --> 01:20:31,040
side it's in the end in our area of JSON

1736
01:20:28,639 --> 01:20:32,870
objects and every of those JSON objects

1737
01:20:31,040 --> 01:20:34,790
contains the data that are specific to a

1738
01:20:32,870 --> 01:20:37,909
certain set of permissions or a certain

1739
01:20:34,790 --> 01:20:41,239
API right so the example here is the

1740
01:20:37,909 --> 01:20:45,710
payment initiation request for payment

1741
01:20:41,239 --> 01:20:48,559
initiation and there are some small

1742
01:20:45,710 --> 01:20:51,110
extensions to my to my example first of

1743
01:20:48,560 --> 01:20:54,679
all every of those apps are objects in

1744
01:20:51,110 --> 01:20:58,719
the array has a type field so it's

1745
01:20:54,679 --> 01:21:02,510
possible to have different structures in

1746
01:20:58,719 --> 01:21:06,230
different authorization objects tailored

1747
01:21:02,510 --> 01:21:07,909
to the needs of different api's that's

1748
01:21:06,230 --> 01:21:09,230
basically what we want to achieve so we

1749
01:21:07,909 --> 01:21:10,879
want to have a we don't want to have a

1750
01:21:09,230 --> 01:21:13,940
structure that is one-size-fits-all

1751
01:21:10,880 --> 01:21:17,389
because it just doesn't work as you have

1752
01:21:13,940 --> 01:21:19,099
seen identity assurance electronic

1753
01:21:17,389 --> 01:21:21,199
signatures account information they all

1754
01:21:19,100 --> 01:21:24,350
have completely different structures and

1755
01:21:21,199 --> 01:21:26,989
we want to have a support that API

1756
01:21:24,350 --> 01:21:29,060
providers can define the structure of

1757
01:21:26,989 --> 01:21:32,750
the authorization details and clients

1758
01:21:29,060 --> 01:21:35,090
can use that to really express their

1759
01:21:32,750 --> 01:21:37,400
requirements their expectations and what

1760
01:21:35,090 --> 01:21:41,120
they want to get in terms of permissions

1761
01:21:37,400 --> 01:21:44,299
using that structure even though we have

1762
01:21:41,120 --> 01:21:46,550
defined some basic common elements in

1763
01:21:44,300 --> 01:21:50,090
the Doda structure one of them is the

1764
01:21:46,550 --> 01:21:52,639
locations you can see that as a third

1765
01:21:50,090 --> 01:21:55,870
field in that example and the locations

1766
01:21:52,639 --> 01:21:58,429
should be used to assign that particular

1767
01:21:55,870 --> 01:22:01,610
authorization object to certain resource

1768
01:21:58,429 --> 01:22:03,670
server and that's that's a problem I I

1769
01:22:01,610 --> 01:22:08,659
want to solve for a long time in OAuth

1770
01:22:03,670 --> 01:22:10,250
because now you can assign the request

1771
01:22:08,659 --> 01:22:13,070
for permission to a certain resource

1772
01:22:10,250 --> 01:22:16,100
server which gives the ability to later

1773
01:22:13,070 --> 01:22:18,679
on filter the authorization details

1774
01:22:16,100 --> 01:22:20,239
objects and that you're assigned to an

1775
01:22:18,679 --> 01:22:22,190
access token or an introspection

1776
01:22:20,239 --> 01:22:25,070
response based on the location you want

1777
01:22:22,190 --> 01:22:26,900
to use the access token at

1778
01:22:25,070 --> 01:22:30,380
and it also gives you the ability to

1779
01:22:26,900 --> 01:22:32,540
request similarly structured but

1780
01:22:30,380 --> 01:22:35,150
different permission on different

1781
01:22:32,540 --> 01:22:38,390
resource so just imagine you want to get

1782
01:22:35,150 --> 01:22:40,070
access to a file server on different you

1783
01:22:38,390 --> 01:22:41,240
want to get access to files on different

1784
01:22:40,070 --> 01:22:43,190
file servers you can use different

1785
01:22:41,240 --> 01:22:44,870
locations the same structure and the

1786
01:22:43,190 --> 01:22:47,799
author is in days authorization details

1787
01:22:44,870 --> 01:22:50,780
object but different data obviously and

1788
01:22:47,800 --> 01:22:52,670
we have further common elements that you

1789
01:22:50,780 --> 01:22:56,469
will see when you take a look into the

1790
01:22:52,670 --> 01:22:57,700
draft and that's the way it can be used

1791
01:22:56,470 --> 01:23:00,710
[Music]

1792
01:22:57,700 --> 01:23:03,349
basically you can add the authorization

1793
01:23:00,710 --> 01:23:06,920
details as a URI request parameter and

1794
01:23:03,350 --> 01:23:08,900
clearly you can also use power to send

1795
01:23:06,920 --> 01:23:11,060
that request parameter in the front

1796
01:23:08,900 --> 01:23:12,980
channel to the authorization server but

1797
01:23:11,060 --> 01:23:16,580
you can also add the authorization

1798
01:23:12,980 --> 01:23:18,250
details to the request object in the end

1799
01:23:16,580 --> 01:23:21,590
you can basically use authorization

1800
01:23:18,250 --> 01:23:27,500
details in any place where you use the

1801
01:23:21,590 --> 01:23:31,790
scope parameter today and I think the

1802
01:23:27,500 --> 01:23:35,480
tricky part in the end is not how to

1803
01:23:31,790 --> 01:23:40,280
represent rich authorization data the

1804
01:23:35,480 --> 01:23:43,400
challenge for a SS is to really accept

1805
01:23:40,280 --> 01:23:45,740
that author it that user context a user

1806
01:23:43,400 --> 01:23:49,309
content is more complex and needs to be

1807
01:23:45,740 --> 01:23:51,620
more sophisticated in the kind of use

1808
01:23:49,310 --> 01:23:54,950
cases I described in my first

1809
01:23:51,620 --> 01:23:56,690
presentation if you have variable

1810
01:23:54,950 --> 01:24:00,260
dynamic data in the authorization

1811
01:23:56,690 --> 01:24:01,940
request then the a s also needs to be

1812
01:24:00,260 --> 01:24:03,530
able to show that in the user content

1813
01:24:01,940 --> 01:24:05,750
and the user content is a bit more is

1814
01:24:03,530 --> 01:24:09,080
more complex than just asking for access

1815
01:24:05,750 --> 01:24:10,670
for certain static stuff right so that's

1816
01:24:09,080 --> 01:24:12,440
that's in the end the real challenge for

1817
01:24:10,670 --> 01:24:15,440
implement it's not that the JSON

1818
01:24:12,440 --> 01:24:17,450
structure so the a s uses the data type

1819
01:24:15,440 --> 01:24:19,070
of the object and the content in the

1820
01:24:17,450 --> 01:24:22,160
authorization data to render the content

1821
01:24:19,070 --> 01:24:24,259
and then conveys the authorization

1822
01:24:22,160 --> 01:24:25,730
details through to the RS in access

1823
01:24:24,260 --> 01:24:31,010
token and top interest spectral

1824
01:24:25,730 --> 01:24:32,990
responses I also assume that during the

1825
01:24:31,010 --> 01:24:35,690
course of the user consent the user for

1826
01:24:32,990 --> 01:24:37,490
example can select some value that are

1827
01:24:35,690 --> 01:24:38,839
relevant for entered the transaction as

1828
01:24:37,490 --> 01:24:41,570
well so for example if

1829
01:24:38,840 --> 01:24:46,580
want to issue a credit transfer the

1830
01:24:41,570 --> 01:24:48,769
client just might specify the credit or

1831
01:24:46,580 --> 01:24:50,179
account and the user Indian selects a

1832
01:24:48,770 --> 01:24:51,590
debit or account and you also have to

1833
01:24:50,179 --> 01:24:54,260
convert it through all the way through

1834
01:24:51,590 --> 01:24:55,940
to the RS plus all the claims that the

1835
01:24:54,260 --> 01:24:59,170
resource server needs to really end the

1836
01:24:55,940 --> 01:24:59,169
end to perform the transaction

1837
01:24:59,590 --> 01:25:03,290
authorization the authorization detailed

1838
01:25:01,760 --> 01:25:05,840
goes together with the resource

1839
01:25:03,290 --> 01:25:08,269
parameter invented or proposed in the

1840
01:25:05,840 --> 01:25:11,989
resource indicators draft meaning that

1841
01:25:08,270 --> 01:25:13,730
if the client indicates the resource

1842
01:25:11,989 --> 01:25:16,820
server in the authorization details

1843
01:25:13,730 --> 01:25:18,830
object in the authorization request the

1844
01:25:16,820 --> 01:25:21,380
resource parameter can be used in a

1845
01:25:18,830 --> 01:25:23,780
token request to indicate where the

1846
01:25:21,380 --> 01:25:26,360
access token shall be used at and then

1847
01:25:23,780 --> 01:25:28,280
das can filter down the authorization

1848
01:25:26,360 --> 01:25:31,009
details that it assigns to the access

1849
01:25:28,280 --> 01:25:34,610
token and this this in the end gives the

1850
01:25:31,010 --> 01:25:37,310
ability to really create RS specific

1851
01:25:34,610 --> 01:25:41,330
access tokens that are audience

1852
01:25:37,310 --> 01:25:47,630
restricted and we so far lacked that

1853
01:25:41,330 --> 01:25:52,580
capability in a war so a bit of

1854
01:25:47,630 --> 01:25:55,369
advertisement I think it's a versatile

1855
01:25:52,580 --> 01:25:58,280
and and and also type safe approach so

1856
01:25:55,369 --> 01:26:02,480
what we came up with is a proposal where

1857
01:25:58,280 --> 01:26:05,150
the the way authorization data are being

1858
01:26:02,480 --> 01:26:08,989
represented can be tailored to the needs

1859
01:26:05,150 --> 01:26:10,759
of a certain resource over or API we

1860
01:26:08,989 --> 01:26:12,348
don't want to have a one-size-fits-all

1861
01:26:10,760 --> 01:26:15,260
solution because we don't believe that

1862
01:26:12,349 --> 01:26:16,849
that really it's going to work even

1863
01:26:15,260 --> 01:26:19,520
though we have defined some common data

1864
01:26:16,849 --> 01:26:24,199
elements that can be used to address

1865
01:26:19,520 --> 01:26:27,590
common use cases and I especially like

1866
01:26:24,199 --> 01:26:29,540
the capability to really assign the

1867
01:26:27,590 --> 01:26:31,400
authorization data to certain resource

1868
01:26:29,540 --> 01:26:40,760
service and immense resource specific

1869
01:26:31,400 --> 01:26:42,320
access to all right that's it okay let's

1870
01:26:40,760 --> 01:26:48,860
see a second

1871
01:26:42,320 --> 01:26:52,240
the director so now we're into some

1872
01:26:48,860 --> 01:26:55,370
discussion I'm gonna start off with

1873
01:26:52,240 --> 01:26:57,050
we've had a bunch of presentations from

1874
01:26:55,370 --> 01:27:00,019
people saying we think there's a problem

1875
01:26:57,050 --> 01:27:02,410
here here's concerns we have with OAuth

1876
01:27:00,020 --> 01:27:04,730
here's some new things we'd like to do

1877
01:27:02,410 --> 01:27:07,010
I'd like to hear if there's people that

1878
01:27:04,730 --> 01:27:08,389
disagree with that or you know have

1879
01:27:07,010 --> 01:27:10,250
concerns around that and think you know

1880
01:27:08,390 --> 01:27:15,410
we don't really have a problem here so

1881
01:27:10,250 --> 01:27:17,170
we can balance out our viewpoints mr.

1882
01:27:15,410 --> 01:27:21,280
Jones

1883
01:27:17,170 --> 01:27:23,420
surprised Tony's not right up there

1884
01:27:21,280 --> 01:27:26,780
Tony's not helpful we've already

1885
01:27:23,420 --> 01:27:28,580
ascertained that this is Mike Jones from

1886
01:27:26,780 --> 01:27:34,309
Microsoft

1887
01:27:28,580 --> 01:27:36,970
I don't debate the premise that Olaf has

1888
01:27:34,310 --> 01:27:41,660
become a large set of specifications

1889
01:27:36,970 --> 01:27:45,380
whose combinatorial usage has gotten to

1890
01:27:41,660 --> 01:27:48,980
be more difficult as people try to

1891
01:27:45,380 --> 01:27:52,300
determine what subset D is under which

1892
01:27:48,980 --> 01:27:56,179
conditions the fact that we're redoing a

1893
01:27:52,300 --> 01:28:00,020
security BCP and doing a browser based

1894
01:27:56,180 --> 01:28:04,610
apps BCP is indicative of the need for

1895
01:28:00,020 --> 01:28:08,150
guidance to people for what use cases

1896
01:28:04,610 --> 01:28:14,139
are solved by which combinations in

1897
01:28:08,150 --> 01:28:19,370
today's security and identity climate

1898
01:28:14,140 --> 01:28:25,820
that said o auth 2 is one of the most

1899
01:28:19,370 --> 01:28:27,890
successful ITF protocols in the identity

1900
01:28:25,820 --> 01:28:30,530
and authorization space arguably

1901
01:28:27,890 --> 01:28:36,470
possibly the most successful

1902
01:28:30,530 --> 01:28:39,290
and it's my cents not as an engineer

1903
01:28:36,470 --> 01:28:43,390
today but as a businessperson

1904
01:28:39,290 --> 01:28:49,480
which is a hat I sometimes also wear

1905
01:28:43,390 --> 01:28:55,580
that if we go through the exercise of

1906
01:28:49,480 --> 01:28:58,190
creating an OAuth 3 without absolutely

1907
01:28:55,580 --> 01:29:01,360
compelling motivation for doing so

1908
01:28:58,190 --> 01:29:04,509
we are splintering the deployment

1909
01:29:01,360 --> 01:29:09,049
landscape in a way that's probably

1910
01:29:04,510 --> 01:29:11,930
unhelpful to all and to the extent that

1911
01:29:09,050 --> 01:29:15,490
we can solve the problems that are being

1912
01:29:11,930 --> 01:29:19,460
enumerated as Torsten started to do

1913
01:29:15,490 --> 01:29:23,300
using OAuth 2 possibly with extensions

1914
01:29:19,460 --> 01:29:25,760
we know how to write extensions we know

1915
01:29:23,300 --> 01:29:29,270
how to write BCPs specifying what

1916
01:29:25,760 --> 01:29:32,180
combination of both protocols solved

1917
01:29:29,270 --> 01:29:35,450
problems and I would advocate that we

1918
01:29:32,180 --> 01:29:41,630
stay there I'll make one other

1919
01:29:35,450 --> 01:29:42,580
observation Oh auth was designed as my

1920
01:29:41,630 --> 01:29:45,350
authorization

1921
01:29:42,580 --> 01:29:48,050
so I sorry I should have clarified a

1922
01:29:45,350 --> 01:29:49,880
little more of my question we'll have a

1923
01:29:48,050 --> 01:29:52,820
discussion as to which approach you want

1924
01:29:49,880 --> 01:29:54,560
to take the question is is there descent

1925
01:29:52,820 --> 01:29:56,330
whether there's a problem there's a

1926
01:29:54,560 --> 01:29:57,620
number of there's two different

1927
01:29:56,330 --> 01:29:59,240
approaches that have been presented or

1928
01:29:57,620 --> 01:30:04,910
on how to solve them but do you not

1929
01:29:59,240 --> 01:30:10,910
think there's a problem I think the

1930
01:30:04,910 --> 01:30:17,120
problem is solvable by writing BCPs so

1931
01:30:10,910 --> 01:30:19,010
you agree there's a problem not to the

1932
01:30:17,120 --> 01:30:24,019
extent that was presented on the screen

1933
01:30:19,010 --> 01:30:26,870
or on the stage now by okay you want to

1934
01:30:24,020 --> 01:30:31,070
clarify that a little more which pieces

1935
01:30:26,870 --> 01:30:34,550
do you disagree with sure the fact that

1936
01:30:31,070 --> 01:30:38,929
Justin was able to put up a slide with

1937
01:30:34,550 --> 01:30:43,530
20 protocol labels on it is not in and

1938
01:30:38,930 --> 01:30:45,930
of itself in indicative of their being

1939
01:30:43,530 --> 01:30:48,870
a problem that's necessary to solve in

1940
01:30:45,930 --> 01:30:50,940
fact it may be indicative of we have

1941
01:30:48,870 --> 01:30:58,530
mostly already solved the problems that

1942
01:30:50,940 --> 01:31:00,960
have arisen okay so you I'd agree with

1943
01:30:58,530 --> 01:31:02,700
that that if if the if there's specks

1944
01:31:00,960 --> 01:31:04,830
covering the problems and well those

1945
01:31:02,700 --> 01:31:06,420
have been solved which is why I tried to

1946
01:31:04,830 --> 01:31:08,580
break the agenda into what are the

1947
01:31:06,420 --> 01:31:11,010
issues that we've solved versus what are

1948
01:31:08,580 --> 01:31:14,790
new issues do you not agree that there's

1949
01:31:11,010 --> 01:31:17,610
new issues uh there are always going to

1950
01:31:14,790 --> 01:31:21,090
be new issues that's not unique to the

1951
01:31:17,610 --> 01:31:22,740
circumstance where we are now I'd like

1952
01:31:21,090 --> 01:31:27,170
to make one other comment and then I'll

1953
01:31:22,740 --> 01:31:28,280
defer to the next person

1954
01:31:27,170 --> 01:31:31,860
[Music]

1955
01:31:28,280 --> 01:31:34,740
Olaf was designed as an authorization

1956
01:31:31,860 --> 01:31:37,920
protocol one of the first things that we

1957
01:31:34,740 --> 01:31:43,440
had to do as a community was also create

1958
01:31:37,920 --> 01:31:47,280
an authentication profile of oweth to

1959
01:31:43,440 --> 01:31:50,549
enable people to log in called Open ID

1960
01:31:47,280 --> 01:31:53,790
Connect if we would go down an OAuth

1961
01:31:50,550 --> 01:31:55,590
three route we would have to do the same

1962
01:31:53,790 --> 01:32:00,570
thing again or we would be in a

1963
01:31:55,590 --> 01:32:02,700
bifurcated world where authorization

1964
01:32:00,570 --> 01:32:05,219
sometimes happened with a new protocol

1965
01:32:02,700 --> 01:32:07,650
but if dedication happens with an

1966
01:32:05,220 --> 01:32:11,190
existing one I don't see the acquittal

1967
01:32:07,650 --> 01:32:14,129
of it an ID to of an ID token anywhere

1968
01:32:11,190 --> 01:32:16,469
in the proposals I realize I'm ahead of

1969
01:32:14,130 --> 01:32:18,990
the discussion but your Thank You

1970
01:32:16,470 --> 01:32:25,040
session but Justin did have ID token in

1971
01:32:18,990 --> 01:32:28,920
his his proposal so Roman do you want to

1972
01:32:25,040 --> 01:32:31,350
it's Roman I just wanted to kind of jump

1973
01:32:28,920 --> 01:32:33,480
in the line to talk about facilitating

1974
01:32:31,350 --> 01:32:36,120
if we could just split the conversation

1975
01:32:33,480 --> 01:32:37,889
between there are problems voiced and

1976
01:32:36,120 --> 01:32:39,809
kind of providing do we agree if they're

1977
01:32:37,890 --> 01:32:42,420
that those are problems then there are

1978
01:32:39,810 --> 01:32:44,070
potentially many ways to solve those

1979
01:32:42,420 --> 01:32:45,540
problems and we can have that as a

1980
01:32:44,070 --> 01:32:47,429
separate conversation but if we can help

1981
01:32:45,540 --> 01:32:48,990
decompose that you know that can help me

1982
01:32:47,430 --> 01:32:51,690
cuz help us make some progress here

1983
01:32:48,990 --> 01:32:53,179
thank you for saying better what I was

1984
01:32:51,690 --> 01:32:55,820
trying to say earlier

1985
01:32:53,180 --> 01:32:57,380
go ahead Tony Tony Gadlin I'd have been

1986
01:32:55,820 --> 01:32:59,750
disappointed if you hadn't come to know

1987
01:32:57,380 --> 01:33:01,340
my words I appreciate sure I agree that

1988
01:32:59,750 --> 01:33:02,930
this problem but I'm not sure how

1989
01:33:01,340 --> 01:33:06,310
prevalent those problems are whether

1990
01:33:02,930 --> 01:33:09,800
these are you know the last the last

1991
01:33:06,310 --> 01:33:11,240
five percent or whether they're ninety

1992
01:33:09,800 --> 01:33:13,280
five but I doubt there than 95 percent

1993
01:33:11,240 --> 01:33:15,679
case but they may be the five percent

1994
01:33:13,280 --> 01:33:17,480
case and I'm not sure that the approach

1995
01:33:15,680 --> 01:33:19,730
right so I'm not that's all I'm gonna

1996
01:33:17,480 --> 01:33:21,650
say because the approaches are we'll get

1997
01:33:19,730 --> 01:33:25,160
into later but I don't believe that

1998
01:33:21,650 --> 01:33:30,070
they're that prevalent out there that

1999
01:33:25,160 --> 01:33:30,070
they would that they need to be fixed

2000
01:33:32,260 --> 01:33:37,040
John Bradley yubico I would agree that

2001
01:33:34,970 --> 01:33:40,100
their problems but that's a sign of

2002
01:33:37,040 --> 01:33:47,000
success if nobody uses the protocol

2003
01:33:40,100 --> 01:33:49,550
there's no demand and no problems so yes

2004
01:33:47,000 --> 01:33:51,590
we have to continue I I think we need to

2005
01:33:49,550 --> 01:33:54,170
probably move on to the next step of

2006
01:33:51,590 --> 01:34:01,040
figuring out what that path path or

2007
01:33:54,170 --> 01:34:13,160
paths are any other comments on whether

2008
01:34:01,040 --> 01:34:19,910
there's a problem or not you've already

2009
01:34:13,160 --> 01:34:20,990
had your shot but all the people to

2010
01:34:19,910 --> 01:34:24,190
think there isn't really that much

2011
01:34:20,990 --> 01:34:30,559
there's too much ado about nothing here

2012
01:34:24,190 --> 01:34:31,940
if you could hum and the people to think

2013
01:34:30,560 --> 01:34:33,890
that there's some real problems here

2014
01:34:31,940 --> 01:34:44,000
that need to be solved that aren't well

2015
01:34:33,890 --> 01:34:44,500
solved now hum all those that didn't hum

2016
01:34:44,000 --> 01:34:44,590
hum

2017
01:34:44,500 --> 01:34:47,609
[Laughter]

2018
01:34:44,590 --> 01:34:47,609
[Music]

2019
01:34:57,800 --> 01:35:03,300
so I think we heard quite clearly that

2020
01:35:01,200 --> 01:35:08,730
people believe there is a problem there

2021
01:35:03,300 --> 01:35:10,710
was a loud a minority as well but most

2022
01:35:08,730 --> 01:35:14,219
people did agree that there is a problem

2023
01:35:10,710 --> 01:35:19,280
we need to deal with make sure to

2024
01:35:14,220 --> 01:35:19,280
accurately capture that Tony thank you

2025
01:35:21,260 --> 01:35:28,800
okay next would be what's the right

2026
01:35:26,100 --> 01:35:30,920
approach there's you know Torsen was

2027
01:35:28,800 --> 01:35:35,460
proposing things that are extensions

2028
01:35:30,920 --> 01:35:37,530
justin's sort of proposing let's burn it

2029
01:35:35,460 --> 01:35:38,880
all down and if we do then we can clean

2030
01:35:37,530 --> 01:35:41,090
up a whole bunch of stuff and something

2031
01:35:38,880 --> 01:35:47,100
much simpler that I paraphrase that

2032
01:35:41,090 --> 01:35:54,450
appropriately ok do when I get views on

2033
01:35:47,100 --> 01:35:57,050
that yeah so non Justin yeah we've heard

2034
01:35:54,450 --> 01:35:59,970
your view no I don't think you have okay

2035
01:35:57,050 --> 01:36:02,660
because what I'm gonna say is I

2036
01:35:59,970 --> 01:36:04,770
genuinely think we should do both I

2037
01:36:02,660 --> 01:36:05,820
don't think I ought to use going away

2038
01:36:04,770 --> 01:36:07,770
anytime soon

2039
01:36:05,820 --> 01:36:09,660
it is wildly successful it is very

2040
01:36:07,770 --> 01:36:11,760
widely deployed I think we should keep

2041
01:36:09,660 --> 01:36:14,010
patching the holes in the brick wall as

2042
01:36:11,760 --> 01:36:15,960
we find them and I think that while

2043
01:36:14,010 --> 01:36:18,840
we're doing that we should be building

2044
01:36:15,960 --> 01:36:20,760
the next system I don't think they are

2045
01:36:18,840 --> 01:36:22,950
mutually exclusive and I don't think

2046
01:36:20,760 --> 01:36:24,210
that putting our energies into both of

2047
01:36:22,950 --> 01:36:27,360
them is going to be detrimental to

2048
01:36:24,210 --> 01:36:29,730
either okay that's it but don't go it

2049
01:36:27,360 --> 01:36:32,639
because I'm confused then if we're

2050
01:36:29,730 --> 01:36:36,269
solving the same problem by extending Oh

2051
01:36:32,640 --> 01:36:42,420
a two and building Oh a three what do we

2052
01:36:36,270 --> 01:36:45,690
tell somebody to use so Tony said they

2053
01:36:42,420 --> 01:36:48,570
can use whatever they want and I had

2054
01:36:45,690 --> 01:36:52,230
agreed with Tony sorry that was hard to

2055
01:36:48,570 --> 01:36:53,960
say stop clocks and what but no

2056
01:36:52,230 --> 01:36:57,959
seriously

2057
01:36:53,960 --> 01:37:00,110
seriously I think that oh oo 3 if we

2058
01:36:57,960 --> 01:37:02,190
decide to start that isn't going to be

2059
01:37:00,110 --> 01:37:04,710
gelled and done for the average

2060
01:37:02,190 --> 01:37:06,480
developer for a while yet there's going

2061
01:37:04,710 --> 01:37:08,820
to be transition just as there was from

2062
01:37:06,480 --> 01:37:11,040
Roth one to OAuth 2 just as there was

2063
01:37:08,820 --> 01:37:14,309
from open ID to to open ID connect just

2064
01:37:11,040 --> 01:37:18,330
as there is from ipv4 to ipv6 but

2065
01:37:14,310 --> 01:37:21,210
hopefully not that long but anytime you

2066
01:37:18,330 --> 01:37:23,519
have a new version of something that

2067
01:37:21,210 --> 01:37:25,620
adds new capabilities that cleans up

2068
01:37:23,520 --> 01:37:27,780
existing issues there are going to be

2069
01:37:25,620 --> 01:37:28,950
people still using the legacy thing for

2070
01:37:27,780 --> 01:37:31,500
quite some time there are people

2071
01:37:28,950 --> 01:37:33,870
deploying brand-new sam'l systems today

2072
01:37:31,500 --> 01:37:35,370
where I would argue that generally does

2073
01:37:33,870 --> 01:37:37,290
not actually make much sense from a

2074
01:37:35,370 --> 01:37:39,840
protocol perspective right there are

2075
01:37:37,290 --> 01:37:43,710
better systems out there but people can

2076
01:37:39,840 --> 01:37:47,670
still use them and I think that if you

2077
01:37:43,710 --> 01:37:51,170
are building out something today that o

2078
01:37:47,670 --> 01:37:54,750
auth to with its extensions works for

2079
01:37:51,170 --> 01:37:56,820
use that sure but I think there's a lot

2080
01:37:54,750 --> 01:38:00,690
of stuff that it that doesn't address

2081
01:37:56,820 --> 01:38:02,460
and to Mike's previous point on

2082
01:38:00,690 --> 01:38:05,790
fragmentation all of these extensions

2083
01:38:02,460 --> 01:38:10,220
are in fact fragmenting the OAuth 2

2084
01:38:05,790 --> 01:38:10,220
world yeah ok

2085
01:38:10,940 --> 01:38:17,639
Annabel Backman Amazon um this is sort

2086
01:38:14,430 --> 01:38:20,610
of just a observation of something I

2087
01:38:17,640 --> 01:38:26,910
think we should think about as we debate

2088
01:38:20,610 --> 01:38:29,670
this to make this decision the people

2089
01:38:26,910 --> 01:38:34,470
who are building applications using

2090
01:38:29,670 --> 01:38:37,050
OAuth and using OAuth 2 or 3 whatever we

2091
01:38:34,470 --> 01:38:40,470
end up coming up with are not the people

2092
01:38:37,050 --> 01:38:42,330
in this room generally speaking and so

2093
01:38:40,470 --> 01:38:47,340
to the extent that we can make things

2094
01:38:42,330 --> 01:38:49,200
make the right path the easy path for

2095
01:38:47,340 --> 01:38:51,960
them to follow you know that is that is

2096
01:38:49,200 --> 01:38:54,330
a good thing because they will people

2097
01:38:51,960 --> 01:38:56,910
like to follow the easy path right they

2098
01:38:54,330 --> 01:38:58,980
will follow the the you know simple

2099
01:38:56,910 --> 01:39:02,460
clear path that's in front of them today

2100
01:38:58,980 --> 01:39:05,070
with OAuth the simple clear path is

2101
01:39:02,460 --> 01:39:06,599
rarely the actual secure path for their

2102
01:39:05,070 --> 01:39:09,808
use case

2103
01:39:06,599 --> 01:39:11,369
even with BCPs and everything you can

2104
01:39:09,809 --> 01:39:14,039
try and guide people to the right path

2105
01:39:11,369 --> 01:39:16,949
but unless it's clear and obvious they

2106
01:39:14,039 --> 01:39:19,170
are generally not going to take it one

2107
01:39:16,949 --> 01:39:23,219
of the advantages I see behind something

2108
01:39:19,170 --> 01:39:26,250
like XYZ is there's a lot of opportunity

2109
01:39:23,219 --> 01:39:30,409
there to make the simple easy path the

2110
01:39:26,250 --> 01:39:30,409
secure right path to follow

2111
01:39:31,670 --> 01:39:38,369
Tony nedelin I tend to agree to doing

2112
01:39:35,579 --> 01:39:40,710
both is probably the right answer I

2113
01:39:38,369 --> 01:39:42,210
think there's people that need to

2114
01:39:40,710 --> 01:39:43,800
continue on with OAuth 2 the

2115
01:39:42,210 --> 01:39:45,510
infrastructure has been based upon it

2116
01:39:43,800 --> 01:39:47,219
and they need to solve certain cases so

2117
01:39:45,510 --> 01:39:49,139
the extensions that are that we're

2118
01:39:47,219 --> 01:39:50,760
developing today need to go forward and

2119
01:39:49,139 --> 01:39:53,400
this group needs to continue that work

2120
01:39:50,760 --> 01:39:55,920
but at the same time you know it's been

2121
01:39:53,400 --> 01:39:58,920
pointed out that there are you know

2122
01:39:55,920 --> 01:40:01,380
these these areas that need to need

2123
01:39:58,920 --> 01:40:03,360
attention and it's gotten so complex

2124
01:40:01,380 --> 01:40:05,730
that no one can understand all the

2125
01:40:03,360 --> 01:40:07,650
pieces put together I mean it's gonna

2126
01:40:05,730 --> 01:40:10,199
take a while to get a cohesive

2127
01:40:07,650 --> 01:40:11,670
specification to the simple to the

2128
01:40:10,199 --> 01:40:13,489
simplicity point that people can

2129
01:40:11,670 --> 01:40:15,570
understand it so it's not going to be

2130
01:40:13,489 --> 01:40:16,980
tomorrow that this thing will come out

2131
01:40:15,570 --> 01:40:19,440
it's going to be a couple years down the

2132
01:40:16,980 --> 01:40:21,360
road when it comes out and people you

2133
01:40:19,440 --> 01:40:25,799
know need to continue on today they just

2134
01:40:21,360 --> 01:40:30,179
can't stop in their tracks totally

2135
01:40:25,800 --> 01:40:33,360
understood I also support the position

2136
01:40:30,179 --> 01:40:36,869
to work on both in parallel I think X Y

2137
01:40:33,360 --> 01:40:39,449
Z what X Y Z gives us is a is an

2138
01:40:36,869 --> 01:40:42,360
orientation right where we could go when

2139
01:40:39,449 --> 01:40:45,419
we just get rid of all the legend see so

2140
01:40:42,360 --> 01:40:46,619
starting a clean slate approach and with

2141
01:40:45,420 --> 01:40:48,929
all the experience we have in the

2142
01:40:46,619 --> 01:40:52,469
community or we could be what could we

2143
01:40:48,929 --> 01:40:56,519
achieve + and that's for raw power our

2144
01:40:52,469 --> 01:41:01,280
we came back port things from oh of X Y

2145
01:40:56,519 --> 01:41:05,059
Z or 3 to what we now call off - that oh

2146
01:41:01,280 --> 01:41:08,190
that's my position as an engineer I

2147
01:41:05,059 --> 01:41:12,210
think that the really difficult part is

2148
01:41:08,190 --> 01:41:14,460
the message into the market and we

2149
01:41:12,210 --> 01:41:16,739
should really be clear about that what

2150
01:41:14,460 --> 01:41:19,440
our recommendation is for developers

2151
01:41:16,739 --> 01:41:21,570
right now and whether for example X Y Z

2152
01:41:19,440 --> 01:41:25,650
is mature enough

2153
01:41:21,570 --> 01:41:28,559
to go with it in a project and there's

2154
01:41:25,650 --> 01:41:33,509
another aspect even if we continue to

2155
01:41:28,560 --> 01:41:37,080
work on extending enhancing optimizing

2156
01:41:33,510 --> 01:41:42,630
oauth2 I think we also need to reflect

2157
01:41:37,080 --> 01:41:45,920
all of to refactor clean up whatever I

2158
01:41:42,630 --> 01:41:51,570
mean let's face it with the security BCP

2159
01:41:45,920 --> 01:41:53,670
we remove 2 grands and have some other

2160
01:41:51,570 --> 01:41:55,790
guidance right we modify the code to go

2161
01:41:53,670 --> 01:41:57,960
with pixie alone and so on so

2162
01:41:55,790 --> 01:42:01,019
potentially we should talk about whether

2163
01:41:57,960 --> 01:42:06,000
it's time for updating or off - in some

2164
01:42:01,020 --> 01:42:08,400
ways call it o of 2.1 something right -

2165
01:42:06,000 --> 01:42:12,690
also simplify what we have today just

2166
01:42:08,400 --> 01:42:17,370
saying use that no longer use that just

2167
01:42:12,690 --> 01:42:19,830
as an idea so Roman sign the blue sheet

2168
01:42:17,370 --> 01:42:20,480
I see it wandering around floating in

2169
01:42:19,830 --> 01:42:24,719
the air

2170
01:42:20,480 --> 01:42:29,159
thank you a year on Scheffer as an

2171
01:42:24,719 --> 01:42:32,159
individual the IPC community went

2172
01:42:29,159 --> 01:42:34,860
through a similar exercise when

2173
01:42:32,159 --> 01:42:37,860
transitioning from ike version 1 to X

2174
01:42:34,860 --> 01:42:44,929
version 2.x version 1 was showing its

2175
01:42:37,860 --> 01:42:44,929
age it was getting very messy not as

2176
01:42:45,710 --> 01:42:51,060
extended beyond beyond its capabilities

2177
01:42:48,239 --> 01:42:55,259
as I'm saying

2178
01:42:51,060 --> 01:42:58,080
Oh still being extended but at some

2179
01:42:55,260 --> 01:43:01,050
point it became clear that there needs

2180
01:42:58,080 --> 01:43:06,929
to be a new version and in fact a

2181
01:43:01,050 --> 01:43:11,460
question - is a complete overhaul of a

2182
01:43:06,929 --> 01:43:15,600
question 1 I question 1 systems are

2183
01:43:11,460 --> 01:43:20,250
still very much out there and I think

2184
01:43:15,600 --> 01:43:23,400
it's been 10 years so there will be a

2185
01:43:20,250 --> 01:43:25,440
very long transition period and of

2186
01:43:23,400 --> 01:43:29,730
course the more successful the protocol

2187
01:43:25,440 --> 01:43:33,900
the longer the transition period what

2188
01:43:29,730 --> 01:43:41,330
I'm so I'm worried about

2189
01:43:33,900 --> 01:43:46,620
two things here first multiple like

2190
01:43:41,330 --> 01:43:52,080
parallel work on on two protocols should

2191
01:43:46,620 --> 01:43:54,570
be limited so a 2.1 in the three done by

2192
01:43:52,080 --> 01:43:58,170
the same community at the same time is

2193
01:43:54,570 --> 01:43:59,790
not a great idea and maybe PCBs are

2194
01:43:58,170 --> 01:44:03,540
actually sufficient

2195
01:43:59,790 --> 01:44:09,120
yes base appease an Indian indication

2196
01:44:03,540 --> 01:44:12,810
that something is sick with a unwell

2197
01:44:09,120 --> 01:44:15,809
with the base protocol but still doing

2198
01:44:12,810 --> 01:44:18,719
even a minor version is a very large

2199
01:44:15,810 --> 01:44:22,020
effort and you could easily get into

2200
01:44:18,719 --> 01:44:25,860
conflicts between now three protocol

2201
01:44:22,020 --> 01:44:29,640
versions and the second thing is of

2202
01:44:25,860 --> 01:44:35,989
course future creep on hearing feature

2203
01:44:29,640 --> 01:44:40,500
creep already when I'm listening to this

2204
01:44:35,989 --> 01:44:43,919
so again as a community I think we will

2205
01:44:40,500 --> 01:44:49,110
need to give up some of the more obscure

2206
01:44:43,920 --> 01:44:56,429
use cases in order to really really

2207
01:44:49,110 --> 01:44:58,440
specify is few paths as possible so it's

2208
01:44:56,429 --> 01:45:01,170
very hard to measure simplicity and

2209
01:44:58,440 --> 01:45:04,980
usually simplicity's is being used just

2210
01:45:01,170 --> 01:45:08,940
to kill the the options and the features

2211
01:45:04,980 --> 01:45:12,330
that you don't like but still if

2212
01:45:08,940 --> 01:45:16,049
simplicity is a value in this proposal

2213
01:45:12,330 --> 01:45:24,510
let's let's focus on set simplicity from

2214
01:45:16,050 --> 01:45:28,650
day one thank you FileMaker so folks

2215
01:45:24,510 --> 01:45:31,400
seem to be thinking in terms of adding

2216
01:45:28,650 --> 01:45:35,879
features as a way to improve protocols I

2217
01:45:31,400 --> 01:45:40,860
often see taking them out as being the

2218
01:45:35,880 --> 01:45:43,679
improvement and in particular it as a

2219
01:45:40,860 --> 01:45:46,519
pro specifications been out there it

2220
01:45:43,679 --> 01:45:48,680
accumulates barnacles

2221
01:45:46,520 --> 01:45:50,810
eventually the number of barnacles out

2222
01:45:48,680 --> 01:45:56,330
there is just too much for people to

2223
01:45:50,810 --> 01:45:58,870
really implement and so I don't see that

2224
01:45:56,330 --> 01:46:04,850
there's any real conflict between

2225
01:45:58,870 --> 01:46:07,220
extending because and reducing and if

2226
01:46:04,850 --> 01:46:10,850
you reduce you want to do that reduction

2227
01:46:07,220 --> 01:46:13,010
all in one go and not in a series of

2228
01:46:10,850 --> 01:46:15,230
individual pieces because you know if

2229
01:46:13,010 --> 01:46:18,710
you deprecated individual functions then

2230
01:46:15,230 --> 01:46:20,599
it'll never happen if the only way you

2231
01:46:18,710 --> 01:46:23,060
can really signal we're getting rid of

2232
01:46:20,600 --> 01:46:26,510
the old stuff is if you have a major

2233
01:46:23,060 --> 01:46:29,060
revision but that major revision doesn't

2234
01:46:26,510 --> 01:46:34,790
need to be a complete change of syntax

2235
01:46:29,060 --> 01:46:36,440
like HP 1.12 - ATP - yeah it doesn't

2236
01:46:34,790 --> 01:46:40,370
need to be that radical and doesn't need

2237
01:46:36,440 --> 01:46:47,179
to be a complete discontinuity unless

2238
01:46:40,370 --> 01:46:51,290
you want it to be hi I'm Erin perky from

2239
01:46:47,180 --> 01:46:53,300
octo my job is literally flying around

2240
01:46:51,290 --> 01:46:55,340
teaching people about OAuth so I have a

2241
01:46:53,300 --> 01:46:57,500
lot of I've seen a lot of people

2242
01:46:55,340 --> 01:46:58,940
struggling with understanding why we are

2243
01:46:57,500 --> 01:47:01,220
like at the point where we're at with

2244
01:46:58,940 --> 01:47:05,269
this today which is a lot of jumbled

2245
01:47:01,220 --> 01:47:08,120
specs a lot to read or some kind of

2246
01:47:05,270 --> 01:47:11,360
stole my Thunder there with the 2.1 but

2247
01:47:08,120 --> 01:47:14,120
my idea what that was basically let's

2248
01:47:11,360 --> 01:47:16,429
capture what we do have today in what

2249
01:47:14,120 --> 01:47:17,960
works you know off which is you know

2250
01:47:16,430 --> 01:47:19,700
sending this core we've added a bunch

2251
01:47:17,960 --> 01:47:22,610
we've removed things through the various

2252
01:47:19,700 --> 01:47:25,099
extension tube ECP's kind of capture

2253
01:47:22,610 --> 01:47:26,509
that as like here's what actually here

2254
01:47:25,100 --> 01:47:29,630
is the simplest version of what does

2255
01:47:26,510 --> 01:47:31,340
work today with the grants the

2256
01:47:29,630 --> 01:47:34,250
extensions that that are well deployed

2257
01:47:31,340 --> 01:47:36,770
you're removing things that are not good

2258
01:47:34,250 --> 01:47:40,430
you are no longer necessary and giving

2259
01:47:36,770 --> 01:47:42,860
that its own name that that you know the

2260
01:47:40,430 --> 01:47:46,070
intent there is to give people a simple

2261
01:47:42,860 --> 01:47:47,389
path of reading you know starting with

2262
01:47:46,070 --> 01:47:49,400
one document instead of trying to

2263
01:47:47,390 --> 01:47:54,350
navigate their way through a pile of 20

2264
01:47:49,400 --> 01:47:55,849
and I think that is sort of the how I

2265
01:47:54,350 --> 01:47:57,760
would want to approach the sort of

2266
01:47:55,850 --> 01:48:00,410
cleaning up of what we have right now

2267
01:47:57,760 --> 01:48:03,440
and at the same time like Justin was say

2268
01:48:00,410 --> 01:48:05,000
I do think that I'm a sort of rethinking

2269
01:48:03,440 --> 01:48:06,290
from the ground up is not a terrible

2270
01:48:05,000 --> 01:48:12,230
idea and I do think it's still worth

2271
01:48:06,290 --> 01:48:14,150
pursuing in parallel but that's I mainly

2272
01:48:12,230 --> 01:48:16,129
want to just get get this point out

2273
01:48:14,150 --> 01:48:17,780
about lets you know clarify and solidify

2274
01:48:16,130 --> 01:48:19,790
what we do have right now that does work

2275
01:48:17,780 --> 01:48:21,469
because it because there is enough there

2276
01:48:19,790 --> 01:48:30,890
that has changed enough from what we've

2277
01:48:21,470 --> 01:48:33,320
started 10 years ago Brian Campbell with

2278
01:48:30,890 --> 01:48:36,200
pain I sort of wanted to agree with

2279
01:48:33,320 --> 01:48:37,759
Aaron in the sense that there are a lot

2280
01:48:36,200 --> 01:48:39,349
of different documents out there it can

2281
01:48:37,760 --> 01:48:41,960
be very intimidating and confusing to

2282
01:48:39,350 --> 01:48:43,580
come to I also think there's on flip

2283
01:48:41,960 --> 01:48:45,320
side of it there's a lot of value to the

2284
01:48:43,580 --> 01:48:49,660
different composability of the documents

2285
01:48:45,320 --> 01:48:49,660
you can assemble things for your needs

2286
01:48:50,620 --> 01:48:56,990
sorry-sorry better I'm taller than air

2287
01:48:55,270 --> 01:48:58,820
no offense

2288
01:48:56,990 --> 01:49:00,170
there's a lot of there is a valuable

2289
01:48:58,820 --> 01:49:01,790
side of the number of documents as well

2290
01:49:00,170 --> 01:49:03,710
which is that there's composability

2291
01:49:01,790 --> 01:49:05,540
there and different needs and

2292
01:49:03,710 --> 01:49:07,400
deployments can compose those in ways

2293
01:49:05,540 --> 01:49:08,540
that make sense for their needs and

2294
01:49:07,400 --> 01:49:11,469
we're seeing a lot of that both in

2295
01:49:08,540 --> 01:49:13,640
individual deployments and in like

2296
01:49:11,470 --> 01:49:15,230
larger consortiums and other working

2297
01:49:13,640 --> 01:49:22,280
groups that are doing profiles of this

2298
01:49:15,230 --> 01:49:25,099
stuff to do it I I guess I have some

2299
01:49:22,280 --> 01:49:26,900
concern that that going for a full

2300
01:49:25,100 --> 01:49:29,990
rewrite and OAuth 3 whatever it might be

2301
01:49:26,900 --> 01:49:32,210
called would create a lot of confusion

2302
01:49:29,990 --> 01:49:33,530
in the marketplace and when I say

2303
01:49:32,210 --> 01:49:36,740
marketplace I mean everything from

2304
01:49:33,530 --> 01:49:38,570
individual developers to vendors to spec

2305
01:49:36,740 --> 01:49:40,519
authors like the whole ecosystem and

2306
01:49:38,570 --> 01:49:42,500
while we can talk about doing things in

2307
01:49:40,520 --> 01:49:45,230
parallel there there is a limited amount

2308
01:49:42,500 --> 01:49:48,050
of time and attention and resources

2309
01:49:45,230 --> 01:49:49,610
available amongst all of us I know I

2310
01:49:48,050 --> 01:49:51,140
have a hard time just reading and

2311
01:49:49,610 --> 01:49:52,280
keeping up with the number of specs that

2312
01:49:51,140 --> 01:49:54,590
are in the few working groups that I

2313
01:49:52,280 --> 01:49:57,500
participate in trying to be involved

2314
01:49:54,590 --> 01:50:00,080
with and and give proper attention to a

2315
01:49:57,500 --> 01:50:01,070
complete rewrite is daunting I'm not

2316
01:50:00,080 --> 01:50:05,870
sure I would have the time and I'm not

2317
01:50:01,070 --> 01:50:09,049
sure there's really the the appetite and

2318
01:50:05,870 --> 01:50:11,930
the energy to to apply to both of those

2319
01:50:09,050 --> 01:50:14,120
things and then I think that likely

2320
01:50:11,930 --> 01:50:16,400
another document at this point

2321
01:50:14,120 --> 01:50:19,250
would even if it's an OAuth 3 would just

2322
01:50:16,400 --> 01:50:21,230
exacerbate that confusion about which

2323
01:50:19,250 --> 01:50:23,510
pieces of this do I use then it's not

2324
01:50:21,230 --> 01:50:25,820
which of the OAuth 2 pieces do I compose

2325
01:50:23,510 --> 01:50:27,470
together but do I use which of those or

2326
01:50:25,820 --> 01:50:29,980
do I use this new thing and do I wait

2327
01:50:27,470 --> 01:50:35,960
for that do i how do they interact so I

2328
01:50:29,980 --> 01:50:40,790
the old xkdc comic comes to mind it's a

2329
01:50:35,960 --> 01:50:43,880
few smiles but so I I guess I just I

2330
01:50:40,790 --> 01:50:46,730
want to be careful in in how quickly we

2331
01:50:43,880 --> 01:50:47,750
we jump to taking on to work and realize

2332
01:50:46,730 --> 01:50:49,879
that there's an impact on the

2333
01:50:47,750 --> 01:50:51,680
marketplace is wide and I think we

2334
01:50:49,880 --> 01:50:54,020
should be be considered of that before

2335
01:50:51,680 --> 01:50:57,260
we jump into it and well it's often

2336
01:50:54,020 --> 01:50:58,940
times appealing to do new work to set

2337
01:50:57,260 --> 01:51:01,300
out and solve all the known problems we

2338
01:50:58,940 --> 01:51:03,950
saw we know about in the last protocol

2339
01:51:01,300 --> 01:51:05,960
it sounds interesting and it sounds fun

2340
01:51:03,950 --> 01:51:08,780
it's challenging it's new but it's a lot

2341
01:51:05,960 --> 01:51:10,850
harder to start over correct all the

2342
01:51:08,780 --> 01:51:12,769
problems that you know about and not

2343
01:51:10,850 --> 01:51:15,050
introduce new problems then it then it

2344
01:51:12,770 --> 01:51:18,650
often seems like as you go out at first

2345
01:51:15,050 --> 01:51:20,660
block flash it's quite a bit more

2346
01:51:18,650 --> 01:51:24,530
time-consuming more challenging than you

2347
01:51:20,660 --> 01:51:26,090
might expect and we would we would need

2348
01:51:24,530 --> 01:51:28,309
a lot of a lot of attention a lot of

2349
01:51:26,090 --> 01:51:29,870
work on it that I don't know we're in a

2350
01:51:28,310 --> 01:51:33,200
position to really put forth and

2351
01:51:29,870 --> 01:51:34,460
maintain and do the other work and I'm

2352
01:51:33,200 --> 01:51:40,160
sort of rambling at this point but I

2353
01:51:34,460 --> 01:51:43,810
think the point maybe it's clear now

2354
01:51:40,160 --> 01:51:46,309
Hannes adding on top of what Brian said

2355
01:51:43,810 --> 01:51:47,860
some of you who complain about the

2356
01:51:46,310 --> 01:51:49,940
number of documents have actually

2357
01:51:47,860 --> 01:51:53,900
contributed is written those documents

2358
01:51:49,940 --> 01:51:55,059
and exactly in that document split as if

2359
01:51:53,900 --> 01:51:58,309
it exists today

2360
01:51:55,060 --> 01:52:01,420
preferring smaller and more document

2361
01:51:58,310 --> 01:52:04,790
than bigger documents that have several

2362
01:52:01,420 --> 01:52:07,220
different things in there at that time

2363
01:52:04,790 --> 01:52:09,200
claim for improved readability and for

2364
01:52:07,220 --> 01:52:11,510
the modularity that Prime was talking

2365
01:52:09,200 --> 01:52:13,820
about so I feel the feel it's a little

2366
01:52:11,510 --> 01:52:15,500
cynical to now say oh we have all these

2367
01:52:13,820 --> 01:52:18,559
documents and who should read all of

2368
01:52:15,500 --> 01:52:21,140
them adding more documents just helping

2369
01:52:18,560 --> 01:52:23,900
developers to read the existing stuff

2370
01:52:21,140 --> 01:52:25,730
more easily so I would next time we have

2371
01:52:23,900 --> 01:52:28,190
any discussion and some of you comes

2372
01:52:25,730 --> 01:52:31,009
along and proposes another document

2373
01:52:28,190 --> 01:52:33,620
please keep that in mind and I have no

2374
01:52:31,010 --> 01:52:35,810
doubts that even if we start another

2375
01:52:33,620 --> 01:52:39,380
effort there will be as many documents

2376
01:52:35,810 --> 01:52:41,179
as we have today because this is how

2377
01:52:39,380 --> 01:52:42,949
where we came from you know us all along

2378
01:52:41,179 --> 01:52:44,510
because the previous solution was so

2379
01:52:42,949 --> 01:52:47,750
complicated so difficult to understand

2380
01:52:44,510 --> 01:52:50,150
and here are we now a few years later so

2381
01:52:47,750 --> 01:52:53,690
I think this is just an age of of the

2382
01:52:50,150 --> 01:52:55,309
way how successful protocols are evolved

2383
01:52:53,690 --> 01:52:56,719
over time people want to use them in

2384
01:52:55,310 --> 01:52:59,840
environments which were not initially

2385
01:52:56,719 --> 01:53:02,390
envisioned almost it's the definition of

2386
01:52:59,840 --> 01:53:03,860
a widely successful protocol and then

2387
01:53:02,390 --> 01:53:06,170
you obviously stretch the boundaries a

2388
01:53:03,860 --> 01:53:08,599
little bit and sometimes you may need to

2389
01:53:06,170 --> 01:53:11,420
ask yourself is always really the right

2390
01:53:08,600 --> 01:53:13,100
thing for the given problem at hand and

2391
01:53:11,420 --> 01:53:15,800
do you really need to stretch it that

2392
01:53:13,100 --> 01:53:19,190
far or would it be better to use

2393
01:53:15,800 --> 01:53:22,190
something entirely different honest

2394
01:53:19,190 --> 01:53:24,409
before you go away you want to could you

2395
01:53:22,190 --> 01:53:29,089
go back to the mic walk back I got the

2396
01:53:24,409 --> 01:53:30,889
question for you if we were to do both

2397
01:53:29,090 --> 01:53:32,600
pieces of work do you think that they

2398
01:53:30,890 --> 01:53:34,670
would it would work well to keep them in

2399
01:53:32,600 --> 01:53:35,989
the same existing working group or do

2400
01:53:34,670 --> 01:53:37,909
you think it would be good to have a

2401
01:53:35,989 --> 01:53:40,339
separate working group asking you as

2402
01:53:37,909 --> 01:53:42,320
chair of the co-chair of the OAuth group

2403
01:53:40,340 --> 01:53:47,390
I have no opinion about then leaving

2404
01:53:42,320 --> 01:53:49,159
totally to the 80s to decide that so you

2405
01:53:47,390 --> 01:53:59,239
take the fifth you you probably don't

2406
01:53:49,159 --> 01:54:01,699
even know what that means but so as the

2407
01:53:59,239 --> 01:54:04,129
ad of cloth I mean I have talked with

2408
01:54:01,699 --> 01:54:05,870
the chairs kind of extensively on what

2409
01:54:04,130 --> 01:54:06,830
happens if we do it both ways and we

2410
01:54:05,870 --> 01:54:08,690
need to have a kind of a broader

2411
01:54:06,830 --> 01:54:10,969
conversation and one of the things that

2412
01:54:08,690 --> 01:54:12,530
in our conversations that came up is we

2413
01:54:10,969 --> 01:54:14,719
need to be a little more specific to

2414
01:54:12,530 --> 01:54:16,009
better understand you know what are the

2415
01:54:14,719 --> 01:54:17,210
new things we want to have and I think

2416
01:54:16,010 --> 01:54:19,250
the new emergent thing in this

2417
01:54:17,210 --> 01:54:21,890
conversation here is we would need to be

2418
01:54:19,250 --> 01:54:23,300
specific as to what gets back toward it

2419
01:54:21,890 --> 01:54:26,090
well it's not and we would need to be a

2420
01:54:23,300 --> 01:54:30,940
lot cleaner to kind of to read to really

2421
01:54:26,090 --> 01:54:33,699
reason about that song Ben

2422
01:54:30,940 --> 01:54:35,710
so Brian I know you said you're starting

2423
01:54:33,699 --> 01:54:37,839
a ramble at the end but maybe I could be

2424
01:54:35,710 --> 01:54:39,550
a little petty summary and say you're

2425
01:54:37,840 --> 01:54:45,070
worried about the second systems effect

2426
01:54:39,550 --> 01:54:46,900
Oh like the second system effect where

2427
01:54:45,070 --> 01:54:48,160
like you try and do the new version of

2428
01:54:46,900 --> 01:54:49,870
the thing and you get all the bells and

2429
01:54:48,160 --> 01:54:51,880
whistles and and try and do everything

2430
01:54:49,870 --> 01:54:54,580
and it's just too complicated and it

2431
01:54:51,880 --> 01:55:07,690
fails because it's over engineered Perl

2432
01:54:54,580 --> 01:55:09,880
6 I was rambling I'll try to be less

2433
01:55:07,690 --> 01:55:12,759
rambling now but yes to some extent but

2434
01:55:09,880 --> 01:55:15,190
more so have some concern about the

2435
01:55:12,760 --> 01:55:17,050
amount of just the amount of time and

2436
01:55:15,190 --> 01:55:19,030
attention available from participants in

2437
01:55:17,050 --> 01:55:22,030
this and other working groups and the

2438
01:55:19,030 --> 01:55:23,710
ability to you know really just devote

2439
01:55:22,030 --> 01:55:26,440
the kind of time that's necessary to

2440
01:55:23,710 --> 01:55:28,480
build a second system protocol from the

2441
01:55:26,440 --> 01:55:30,610
ground up what and maybe those problems

2442
01:55:28,480 --> 01:55:32,349
coming in try to be less round there

2443
01:55:30,610 --> 01:55:36,940
maybe just to summarize that we've had

2444
01:55:32,350 --> 01:55:38,650
sort of two main issues come up one is

2445
01:55:36,940 --> 01:55:41,500
the number of documents currently in

2446
01:55:38,650 --> 01:55:43,059
OAuth I think while a new protocol is

2447
01:55:41,500 --> 01:55:44,530
one way to try to deal with that we

2448
01:55:43,060 --> 01:55:46,719
could also consider doing some sort of

2449
01:55:44,530 --> 01:55:48,309
this document or some sort of BCP or

2450
01:55:46,719 --> 01:55:50,080
some sort of roadmap type document that

2451
01:55:48,310 --> 01:55:53,500
would be one way to work with that and

2452
01:55:50,080 --> 01:55:55,360
in terms of the problems with OAuth sort

2453
01:55:53,500 --> 01:55:56,650
of hitting the system limits hitting the

2454
01:55:55,360 --> 01:55:58,889
limits of the kinds of things we want to

2455
01:55:56,650 --> 01:56:01,210
do there were a few well articulated

2456
01:55:58,890 --> 01:56:02,350
shortcomings today and there may be

2457
01:56:01,210 --> 01:56:05,310
others but there are a couple or

2458
01:56:02,350 --> 01:56:07,360
articulated today and a couple of viable

2459
01:56:05,310 --> 01:56:09,969
extensions to solve those within the

2460
01:56:07,360 --> 01:56:12,210
framework of OAuth now and so I might be

2461
01:56:09,969 --> 01:56:14,920
a point that's the sort of the

2462
01:56:12,210 --> 01:56:18,489
incremental path that is pragmatic to

2463
01:56:14,920 --> 01:56:23,949
follow at this point yeah we need to cut

2464
01:56:18,489 --> 01:56:27,790
the line off after or be quick quick

2465
01:56:23,949 --> 01:56:32,949
quick Mike Jones Microsoft I I I will

2466
01:56:27,790 --> 01:56:35,860
say that that I do see lots of examples

2467
01:56:32,949 --> 01:56:38,320
of the community when they see a real

2468
01:56:35,860 --> 01:56:41,139
problem such as needing a signed

2469
01:56:38,320 --> 01:56:43,190
authorization request creating the

2470
01:56:41,140 --> 01:56:46,370
solution deploying it standard

2471
01:56:43,190 --> 01:56:49,160
it we need to finish a LOF jar but

2472
01:56:46,370 --> 01:56:51,230
that's you know nearly done but for

2473
01:56:49,160 --> 01:56:55,220
instance in the financial world the

2474
01:56:51,230 --> 01:56:58,370
financial api's in europe in japan and

2475
01:56:55,220 --> 01:57:01,450
some of the anze's countries are using

2476
01:56:58,370 --> 01:57:06,290
these extensions to OAuth successfully

2477
01:57:01,450 --> 01:57:10,910
second I will say that I completely

2478
01:57:06,290 --> 01:57:13,700
agree with Brian's concern that we all

2479
01:57:10,910 --> 01:57:16,309
have limited bandwidth specification

2480
01:57:13,700 --> 01:57:19,730
authors to the extent that we're trying

2481
01:57:16,310 --> 01:57:23,600
to do two or multiple major things at

2482
01:57:19,730 --> 01:57:28,700
once that are highly interrelated but

2483
01:57:23,600 --> 01:57:32,210
distinct we need many of the same people

2484
01:57:28,700 --> 01:57:36,530
to pay attention to both of them or we

2485
01:57:32,210 --> 01:57:40,030
will get a necessary drift and even

2486
01:57:36,530 --> 01:57:43,550
worse we will find the unnecessary

2487
01:57:40,030 --> 01:57:46,130
introduction of security gaps and

2488
01:57:43,550 --> 01:57:52,310
usability gaps because all the right

2489
01:57:46,130 --> 01:57:56,750
experts weren't reading them Annabel

2490
01:57:52,310 --> 01:57:57,950
Beckman Amazon so I think a lot of

2491
01:57:56,750 --> 01:58:00,100
attention has been brought to the fact

2492
01:57:57,950 --> 01:58:03,530
that there is a whole lot of different

2493
01:58:00,100 --> 01:58:06,050
related drafts or author related specs

2494
01:58:03,530 --> 01:58:08,179
and it's certainly true but there's so

2495
01:58:06,050 --> 01:58:13,760
fall into two different categories I

2496
01:58:08,180 --> 01:58:16,280
feel one is the category of additional

2497
01:58:13,760 --> 01:58:18,710
features for a specific use cases that

2498
01:58:16,280 --> 01:58:21,320
that people might need the other is the

2499
01:58:18,710 --> 01:58:23,060
category of stuff you need to do in

2500
01:58:21,320 --> 01:58:26,420
order for your secure deployment to

2501
01:58:23,060 --> 01:58:29,840
actually be secure and I think the big

2502
01:58:26,420 --> 01:58:32,120
problem today is that that latter

2503
01:58:29,840 --> 01:58:37,940
category that stack is pretty high it's

2504
01:58:32,120 --> 01:58:39,530
is a lot in there and anybody deploying

2505
01:58:37,940 --> 01:58:44,690
implementing deploying this stuff needs

2506
01:58:39,530 --> 01:58:47,210
to be familiar with all of that and some

2507
01:58:44,690 --> 01:58:49,879
of the the reason for that stack being

2508
01:58:47,210 --> 01:58:53,630
there is in part because of incorrect

2509
01:58:49,880 --> 01:58:55,040
assumptions that are made when it was

2510
01:58:53,630 --> 01:58:56,349
designed or assumptions that made sense

2511
01:58:55,040 --> 01:58:59,619
at the time but no longer

2512
01:58:56,349 --> 01:59:01,420
old animal yes all right I'm gonna cut

2513
01:58:59,619 --> 01:59:06,730
you off okay I need to ask some

2514
01:59:01,420 --> 01:59:08,829
questions before we end the time I guess

2515
01:59:06,730 --> 01:59:12,250
a key question and you know Brian's

2516
01:59:08,829 --> 01:59:16,000
brought that up iterated by reiterated

2517
01:59:12,250 --> 01:59:35,050
by Mike who all would spend time are in

2518
01:59:16,000 --> 01:59:41,590
a new ground up version hands okay one

2519
01:59:35,050 --> 01:59:47,739
hand from the Deborah room also okay my

2520
01:59:41,590 --> 01:59:54,280
hand was up to as a individual to play

2521
01:59:47,739 --> 01:59:59,138
here more play auctioneer here seven six

2522
01:59:54,280 --> 02:00:01,989
seven I mean that's hard right I

2523
01:59:59,139 --> 02:00:04,270
probably would but I I worry about

2524
02:00:01,989 --> 02:00:07,419
actually having the time to devote to it

2525
02:00:04,270 --> 02:00:09,070
in the cycle so yeah I'm sure more

2526
02:00:07,420 --> 02:00:10,960
people would if it was going just

2527
02:00:09,070 --> 02:00:12,280
because they had to but I'm guessing

2528
02:00:10,960 --> 02:00:16,750
that a bunch of people are saying I'd

2529
02:00:12,280 --> 02:00:18,150
rather not yeah go ahead

2530
02:00:16,750 --> 02:00:25,840
[Music]

2531
02:00:18,150 --> 02:00:28,030
yeah so III mean so we're at a time it's

2532
02:00:25,840 --> 02:00:30,960
obvious we need to keep talking so I

2533
02:00:28,030 --> 02:00:33,309
think the top-line things I heard is

2534
02:00:30,960 --> 02:00:35,800
there is a number of problems voiced

2535
02:00:33,310 --> 02:00:38,079
here there is a recognition that these

2536
02:00:35,800 --> 02:00:39,280
are problems and there's recognition we

2537
02:00:38,079 --> 02:00:42,130
need to talk about how we would solve

2538
02:00:39,280 --> 02:00:43,360
those problems we don't have we don't

2539
02:00:42,130 --> 02:00:45,489
appear to have kind of consensus here

2540
02:00:43,360 --> 02:00:47,380
for exactly how we would tackle them

2541
02:00:45,489 --> 02:00:48,848
there are a number of kind of presented

2542
02:00:47,380 --> 02:00:52,540
here in the mic line but they were a

2543
02:00:48,849 --> 02:00:53,860
couple I I think quite you they were

2544
02:00:52,540 --> 02:00:55,000
kind of concerns about you know there

2545
02:00:53,860 --> 02:00:56,949
are trade-offs with each one of those

2546
02:00:55,000 --> 02:00:59,380
approaches and I think next steps are to

2547
02:00:56,949 --> 02:01:01,030
you know I'm kind of tossing is that

2548
02:00:59,380 --> 02:01:03,550
this out there is I think we need to

2549
02:01:01,030 --> 02:01:04,960
continue talking on on how we would

2550
02:01:03,550 --> 02:01:07,739
execute some of this and that's the

2551
02:01:04,960 --> 02:01:07,739
future conversation

2552
02:01:10,119 --> 02:01:15,049
so question for the chair this is Justin

2553
02:01:13,280 --> 02:01:17,629
where should that conversation take

2554
02:01:15,050 --> 02:01:20,300
place because we did stand up the TX off

2555
02:01:17,629 --> 02:01:21,739
list ahead of this Boff to start things

2556
02:01:20,300 --> 02:01:24,079
off I know a lot of the people are

2557
02:01:21,739 --> 02:01:26,780
already on that list we do also have the

2558
02:01:24,079 --> 02:01:29,659
OAuth list which is gigantic so where

2559
02:01:26,780 --> 02:01:31,849
where should we have that given that

2560
02:01:29,659 --> 02:01:33,409
we're trying to talk about where to do

2561
02:01:31,849 --> 02:01:35,119
the work and we've started it here

2562
02:01:33,409 --> 02:01:37,098
potentially Cheops I would say that we

2563
02:01:35,119 --> 02:01:38,539
use TX author right now to to kind of

2564
02:01:37,099 --> 02:01:40,309
sort that out and we can make that clear

2565
02:01:38,539 --> 02:01:42,829
on the OAuth list and in the OAuth

2566
02:01:40,309 --> 02:01:44,149
meetings kind of as well so again what I

2567
02:01:42,829 --> 02:01:45,858
think we have consensus on we have a

2568
02:01:44,149 --> 02:01:47,209
problem what we don't have consensus on

2569
02:01:45,859 --> 02:01:52,219
is how to tackle that and we need

2570
02:01:47,209 --> 02:01:53,320
anything sort that out okay thank you

2571
02:01:52,219 --> 02:01:56,030
everybody

2572
02:01:53,320 --> 02:01:57,349
we'll continue discussion on the TX auth

2573
02:01:56,030 --> 02:01:59,268
we'll post that we're going to have that

2574
02:01:57,349 --> 02:02:01,309
discussion on the OAuth so people in the

2575
02:01:59,269 --> 02:02:03,999
OAuth group are familiar the discussion

2576
02:02:01,309 --> 02:02:03,999
happening on TX

