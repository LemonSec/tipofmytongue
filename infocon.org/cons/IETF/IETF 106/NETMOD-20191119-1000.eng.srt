1
00:00:13,650 --> 00:00:16,769
[Music]

2
00:00:33,739 --> 00:00:42,780
hi welcome to net mod our first session

3
00:00:38,970 --> 00:00:46,650
we have two sessions today I'm Lou

4
00:00:42,780 --> 00:00:50,220
burger we have Kent Watson who is remote

5
00:00:46,650 --> 00:00:52,920
at some point Joel the other co-chair I

6
00:00:50,220 --> 00:00:55,530
think he's going to show up hopefully he

7
00:00:52,920 --> 00:00:58,560
does Mahesh is gonna be sitting here

8
00:00:55,530 --> 00:01:01,560
with me helping out with the session and

9
00:00:58,560 --> 00:01:08,789
with jabber although I'm on jabber as

10
00:01:01,560 --> 00:01:12,810
well as usual we're using etherpad the

11
00:01:08,789 --> 00:01:16,829
URL I think is here no it's the URL is

12
00:01:12,810 --> 00:01:20,219
here please do join in and help with our

13
00:01:16,829 --> 00:01:23,520
collaborative note-taking it's very

14
00:01:20,219 --> 00:01:25,169
helpful to do that and it's also a good

15
00:01:23,520 --> 00:01:26,700
opportunity for anyone who speaks at the

16
00:01:25,170 --> 00:01:28,369
mic to make sure that their name is

17
00:01:26,700 --> 00:01:31,679
perfectly captured and their comments

18
00:01:28,369 --> 00:01:34,409
are accurately captured so please jump

19
00:01:31,679 --> 00:01:36,270
on this URL you can also find it off the

20
00:01:34,409 --> 00:01:40,399
tools page or off the data tracker page

21
00:01:36,270 --> 00:01:40,399
or off our agenda any number of places

22
00:01:40,969 --> 00:01:48,298
this is the IETF which means we have

23
00:01:45,319 --> 00:01:50,869
some rules governing what we do here and

24
00:01:48,299 --> 00:01:54,240
what said here and what makes it into

25
00:01:50,869 --> 00:01:56,399
our minutes and becomes part of our

26
00:01:54,240 --> 00:01:59,818
process basically anything you say in

27
00:01:56,399 --> 00:02:03,170
this room during this session is part of

28
00:01:59,819 --> 00:02:06,840
our permanent record we are using

29
00:02:03,170 --> 00:02:12,500
YouTube for video as well as recording

30
00:02:06,840 --> 00:02:12,500
audio and so please be aware of that

31
00:02:14,800 --> 00:02:19,930
the blue sheets are going around as I

32
00:02:17,320 --> 00:02:23,980
mentioned myself and Mahesh should be in

33
00:02:19,930 --> 00:02:25,630
a non je ne do see something show up in

34
00:02:23,980 --> 00:02:27,940
jabber and we don't take note of it feel

35
00:02:25,630 --> 00:02:33,010
free to come to the mic and to relay a

36
00:02:27,940 --> 00:02:34,329
question as you see it the agenda has

37
00:02:33,010 --> 00:02:38,049
changed a little bit I'll get into those

38
00:02:34,330 --> 00:02:39,790
details in a moment so we have two

39
00:02:38,050 --> 00:02:42,610
sessions the really important thing to

40
00:02:39,790 --> 00:02:45,400
note is we have a room change so this

41
00:02:42,610 --> 00:02:49,590
afternoon we are not in here why we're

42
00:02:45,400 --> 00:02:49,590
down here I don't know but just be aware

43
00:02:51,420 --> 00:02:58,929
on to document status so since the last

44
00:02:55,120 --> 00:03:01,060
meeting we do have one RFC I have to say

45
00:02:58,930 --> 00:03:02,740
when I saw that this was since the last

46
00:03:01,060 --> 00:03:04,330
meeting I thought there was some that

47
00:03:02,740 --> 00:03:06,300
there was a mistake because I felt like

48
00:03:04,330 --> 00:03:09,070
we were done with this a long time ago

49
00:03:06,300 --> 00:03:10,750
but it does sometimes take a long time

50
00:03:09,070 --> 00:03:12,390
from when we finished something in the

51
00:03:10,750 --> 00:03:16,630
working group do we actually have the

52
00:03:12,390 --> 00:03:19,899
RFC thanks to all who contributed to

53
00:03:16,630 --> 00:03:22,720
this it was an important piece of work

54
00:03:19,900 --> 00:03:27,280
of course I'm biased because I think

55
00:03:22,720 --> 00:03:32,050
it's useful we have two documents that

56
00:03:27,280 --> 00:03:35,440
have been submitted for publication I we

57
00:03:32,050 --> 00:03:39,459
I thought we were gonna have a update on

58
00:03:35,440 --> 00:03:40,990
that from the author's I think they

59
00:03:39,459 --> 00:03:44,490
decided they're just gonna speak at the

60
00:03:40,990 --> 00:03:47,500
mic and give us a brief update now

61
00:03:44,490 --> 00:03:49,709
Adrian I thought had volunteered to do

62
00:03:47,500 --> 00:03:52,110
it but I don't see him in the room

63
00:03:49,709 --> 00:03:54,100
Adrian are you in the room you're not

64
00:03:52,110 --> 00:04:05,650
Kent do you want to say anything about

65
00:03:54,100 --> 00:04:08,350
artwork folding yeah hi this quickly

66
00:04:05,650 --> 00:04:12,220
it's been in the IC for a little bit and

67
00:04:08,350 --> 00:04:17,079
the main thing right now is that Ben

68
00:04:12,220 --> 00:04:19,089
could review it again you want to do in

69
00:04:17,079 --> 00:04:20,500
sure it was actually about it process

70
00:04:19,089 --> 00:04:25,630
compliance Krypton would work on

71
00:04:20,500 --> 00:04:28,000
multiple platforms great thank you

72
00:04:25,630 --> 00:04:28,719
I'm gonna drop you off come back and Q

73
00:04:28,000 --> 00:04:32,560
if you want

74
00:04:28,720 --> 00:04:34,390
they did it for me so we also have yang

75
00:04:32,560 --> 00:04:35,590
get extension that's been that's going

76
00:04:34,390 --> 00:04:37,240
through processing I don't think is

77
00:04:35,590 --> 00:04:42,340
anything really that interesting to talk

78
00:04:37,240 --> 00:04:45,880
about the post last call we have a few

79
00:04:42,340 --> 00:04:48,489
documents the first is module tags that

80
00:04:45,880 --> 00:04:51,310
actually left the working group and then

81
00:04:48,490 --> 00:04:56,530
came back to the working group that was

82
00:04:51,310 --> 00:04:59,710
because it didn't have the State

83
00:04:56,530 --> 00:05:03,190
appendix the nmda related State appendix

84
00:04:59,710 --> 00:05:05,469
in it I believe that's been produced I

85
00:05:03,190 --> 00:05:06,940
should know that answer I am at least

86
00:05:05,470 --> 00:05:08,500
the contributor may be a co-author on

87
00:05:06,940 --> 00:05:10,930
that but really Chris Hobbs is driving

88
00:05:08,500 --> 00:05:12,580
that work but it came back to the

89
00:05:10,930 --> 00:05:14,640
working group it's been updated we

90
00:05:12,580 --> 00:05:18,520
expect to have a second last call on it

91
00:05:14,640 --> 00:05:19,930
next week we have a couple of documents

92
00:05:18,520 --> 00:05:21,880
that have been through last call they

93
00:05:19,930 --> 00:05:24,130
did get some comments that was a little

94
00:05:21,880 --> 00:05:25,780
bit of an extended last call we're gonna

95
00:05:24,130 --> 00:05:29,950
hear from Rob Wilton on that in a moment

96
00:05:25,780 --> 00:05:33,219
I clicked the wrong button let's see if

97
00:05:29,950 --> 00:05:35,140
this goes the right way okay one more

98
00:05:33,220 --> 00:05:39,810
document that's post last call is

99
00:05:35,140 --> 00:05:43,990
factory default we've had I think some

100
00:05:39,810 --> 00:05:47,590
discussion on that the last call is was

101
00:05:43,990 --> 00:05:50,020
ended on the 15th I don't believe the

102
00:05:47,590 --> 00:05:52,900
yang doctor review came in it was a sign

103
00:05:50,020 --> 00:05:57,669
but we're still waiting on that there is

104
00:05:52,900 --> 00:05:59,859
an IPR Poland and Pross going on we're

105
00:05:57,669 --> 00:06:02,310
missing one response at least there was

106
00:05:59,860 --> 00:06:05,380
when I wrote that on the slide and it

107
00:06:02,310 --> 00:06:09,040
that will of course block submission to

108
00:06:05,380 --> 00:06:12,159
the is G but we expect that to progress

109
00:06:09,040 --> 00:06:14,620
nicely and Kent who's the Shepherd is

110
00:06:12,160 --> 00:06:21,479
gonna wait until he gets the final

111
00:06:14,620 --> 00:06:24,340
revision before doing his his write-up

112
00:06:21,479 --> 00:06:26,050
not on the agenda that's interesting

113
00:06:24,340 --> 00:06:27,099
geolocation was not on the agenda when

114
00:06:26,050 --> 00:06:28,510
we put these slides together it's

115
00:06:27,100 --> 00:06:30,430
actually on the agenda now so that's

116
00:06:28,510 --> 00:06:34,000
incorrect but we have a couple of other

117
00:06:30,430 --> 00:06:39,130
slides a couple other documents that are

118
00:06:34,000 --> 00:06:42,340
not on the agenda nmda diff and the 69

119
00:06:39,130 --> 00:06:46,270
91 Biss is there anyone who would lie

120
00:06:42,340 --> 00:06:49,179
- OH alex is pointing out I think that

121
00:06:46,270 --> 00:06:54,870
he's now on the agenda and so the only

122
00:06:49,180 --> 00:06:58,690
one we have is 69 91 Biss I don't see

123
00:06:54,870 --> 00:07:03,100
the author on in here so I don't think

124
00:06:58,690 --> 00:07:05,500
we have anyone who can talk to it one of

125
00:07:03,100 --> 00:07:08,920
the entertaining things about this fist

126
00:07:05,500 --> 00:07:11,140
is I happen to be because of one of the

127
00:07:08,920 --> 00:07:12,940
geo document I happen to be looking at

128
00:07:11,140 --> 00:07:15,280
the reference for our definition of date

129
00:07:12,940 --> 00:07:17,770
and time and I realized that we're

130
00:07:15,280 --> 00:07:20,260
pointing to a definition that is several

131
00:07:17,770 --> 00:07:22,180
years out of date that came I believe it

132
00:07:20,260 --> 00:07:24,070
was from I don't remember who the

133
00:07:22,180 --> 00:07:26,050
standard was but if we reference in RFC

134
00:07:24,070 --> 00:07:28,180
that references and maybe an ITU

135
00:07:26,050 --> 00:07:31,030
standard that's literally three

136
00:07:28,180 --> 00:07:33,160
revisions out of date Joel made the nice

137
00:07:31,030 --> 00:07:35,169
stroke about you know at least we have

138
00:07:33,160 --> 00:07:37,960
stable time which is you know it's good

139
00:07:35,170 --> 00:07:39,520
to have a stable time but we probably

140
00:07:37,960 --> 00:07:42,760
should figure out how to update the

141
00:07:39,520 --> 00:07:47,580
reference as we move forward I'll

142
00:07:42,760 --> 00:07:51,430
mention that to your again the agenda is

143
00:07:47,580 --> 00:07:54,430
is pretty tight it says the first item

144
00:07:51,430 --> 00:07:57,250
came up we've added this schema

145
00:07:54,430 --> 00:08:00,040
comparison document that's noteworthy

146
00:07:57,250 --> 00:08:02,890
because is the last sort of building

147
00:08:00,040 --> 00:08:06,880
block that's necessary to satisfy all

148
00:08:02,890 --> 00:08:09,520
the requirements from the revision

149
00:08:06,880 --> 00:08:11,969
handling and the revision design team so

150
00:08:09,520 --> 00:08:14,169
they have a now have a complete set of

151
00:08:11,970 --> 00:08:15,760
documents covering the requirements

152
00:08:14,170 --> 00:08:17,970
we're going to spend a lot of time on

153
00:08:15,760 --> 00:08:23,610
that because that's a really important

154
00:08:17,970 --> 00:08:26,050
work item for the working group our

155
00:08:23,610 --> 00:08:28,690
second session we've also managed to

156
00:08:26,050 --> 00:08:30,910
fill up interesting font conversion here

157
00:08:28,690 --> 00:08:33,940
the the stuff at the top I guess must be

158
00:08:30,910 --> 00:08:37,330
more importantly splits larger here so

159
00:08:33,940 --> 00:08:39,340
we have updates on a couple of working

160
00:08:37,330 --> 00:08:41,680
group documents and then a couple of

161
00:08:39,340 --> 00:08:44,470
other documents which are individual

162
00:08:41,679 --> 00:08:47,699
contribution we've seen maybe it may

163
00:08:44,470 --> 00:08:50,830
have seen the list discussion related to

164
00:08:47,700 --> 00:08:52,300
ECA and the two different documents I

165
00:08:50,830 --> 00:08:54,460
think the authors have been working hard

166
00:08:52,300 --> 00:08:56,050
to figure out how they combine their

167
00:08:54,460 --> 00:08:57,850
work and I

168
00:08:56,050 --> 00:09:00,849
suspect it's a it's a merged

169
00:08:57,850 --> 00:09:06,010
contribution at this point but we'll

170
00:09:00,850 --> 00:09:08,320
hear that in the afternoon we have one

171
00:09:06,010 --> 00:09:10,600
liaison it's actually a communication

172
00:09:08,320 --> 00:09:12,370
that came in since the ITU that sorry

173
00:09:10,600 --> 00:09:14,529
since the IETF doesn't have a formal

174
00:09:12,370 --> 00:09:18,220
liaison relationship with that see let's

175
00:09:14,529 --> 00:09:21,519
I don't believe we have one and it's

176
00:09:18,220 --> 00:09:23,200
really just to be aware of what work

177
00:09:21,519 --> 00:09:25,899
they're doing so if you're interested

178
00:09:23,200 --> 00:09:28,360
please take a look at the link it is

179
00:09:25,899 --> 00:09:30,220
posted on the list it you won't find it

180
00:09:28,360 --> 00:09:32,620
in the liaison listing because we don't

181
00:09:30,220 --> 00:09:35,800
have that formal relationship so this is

182
00:09:32,620 --> 00:09:41,290
just a communication it it's interesting

183
00:09:35,800 --> 00:10:04,689
do take a look and with that we're gonna

184
00:09:41,290 --> 00:10:06,550
go over to rob okay so I try to give a

185
00:10:04,690 --> 00:10:09,550
very quick update on these two models

186
00:10:06,550 --> 00:10:11,560
they post working group in law school so

187
00:10:09,550 --> 00:10:13,149
first apologies I've been quite slow

188
00:10:11,560 --> 00:10:15,939
presses in the working room last call

189
00:10:13,149 --> 00:10:17,740
comments I was intended to over the last

190
00:10:15,940 --> 00:10:19,209
couple weeks but I wanted to get the

191
00:10:17,740 --> 00:10:21,610
final versioning draft out to try and

192
00:10:19,209 --> 00:10:23,529
get that work to progress a steady pace

193
00:10:21,610 --> 00:10:27,579
so that's why the sub interest draft

194
00:10:23,529 --> 00:10:29,470
updates haven't yet been finished the in

195
00:10:27,579 --> 00:10:31,660
taste extensions draft I've applied most

196
00:10:29,470 --> 00:10:33,220
as well asked or comments there are a

197
00:10:31,660 --> 00:10:35,079
few open issues waiting for confirmation

198
00:10:33,220 --> 00:10:37,029
from the people who submitted the issues

199
00:10:35,079 --> 00:10:38,890
I'm going to cover some of those today

200
00:10:37,029 --> 00:10:40,689
just in case anyone doesn't give any

201
00:10:38,890 --> 00:10:43,000
feedback but I'm not sure I believe you

202
00:10:40,690 --> 00:10:45,100
covered on this anyway and subbing taste

203
00:10:43,000 --> 00:10:46,930
draft are still in progress and so

204
00:10:45,100 --> 00:10:48,670
hopefully they should be completed

205
00:10:46,930 --> 00:10:52,089
fairly soon so to the next couple of

206
00:10:48,670 --> 00:10:56,040
weeks or four weeks a month and then

207
00:10:52,089 --> 00:10:58,600
we'll get those done so into the issues

208
00:10:56,040 --> 00:11:00,699
the one-on-ones as Romanies do we

209
00:10:58,600 --> 00:11:03,940
renamed the carry delay function so this

210
00:11:00,699 --> 00:11:07,300
is a feature that delays normally a

211
00:11:03,940 --> 00:11:09,590
hardware state change so that you can

212
00:11:07,300 --> 00:11:12,079
allow some other protection

213
00:11:09,590 --> 00:11:14,030
equipment to kick in or in the case in

214
00:11:12,080 --> 00:11:15,800
his face is coming up you can allow to

215
00:11:14,030 --> 00:11:18,079
stay relies before you start running

216
00:11:15,800 --> 00:11:19,939
traffic over that so this carry delays

217
00:11:18,080 --> 00:11:22,070
the name that we've used within Cisco

218
00:11:19,940 --> 00:11:24,560
the suggestion may be to change that

219
00:11:22,070 --> 00:11:26,030
name couple of possibilities is link

220
00:11:24,560 --> 00:11:28,579
flap suppression or state flap

221
00:11:26,030 --> 00:11:31,670
suppression I don't know if anyone has

222
00:11:28,580 --> 00:11:33,560
any comments on this or not so you

223
00:11:31,670 --> 00:11:37,130
nobody stands up I will continue try to

224
00:11:33,560 --> 00:11:38,900
progress on the list otherwise I am I'll

225
00:11:37,130 --> 00:11:40,340
either keep the same or change it

226
00:11:38,900 --> 00:11:46,430
there's no no he doesn't reek as

227
00:11:40,340 --> 00:11:49,040
particularly the the next issue is there

228
00:11:46,430 --> 00:11:50,900
was a proposal to add an in disguise

229
00:11:49,040 --> 00:11:54,620
overflow counter so this would be a

230
00:11:50,900 --> 00:11:56,840
subset of the in discards counter so

231
00:11:54,620 --> 00:11:58,820
I'll add that one and an in discards

232
00:11:56,840 --> 00:12:00,140
unknown end caps again that was

233
00:11:58,820 --> 00:12:03,050
discussed before so I'll add both of

234
00:12:00,140 --> 00:12:04,490
those counters in the definitions of

235
00:12:03,050 --> 00:12:06,859
what those would be I've been sent to

236
00:12:04,490 --> 00:12:09,650
the list there was also discussion about

237
00:12:06,860 --> 00:12:12,320
whether to add in packets and out

238
00:12:09,650 --> 00:12:14,569
packets counters so the way that the

239
00:12:12,320 --> 00:12:16,400
counters defined today is this split

240
00:12:14,570 --> 00:12:19,790
between unicast multicast and broadcast

241
00:12:16,400 --> 00:12:21,860
and the expectation is that packets that

242
00:12:19,790 --> 00:12:23,630
are okay well-formed and not dropped

243
00:12:21,860 --> 00:12:26,150
they fit into one of those three buckets

244
00:12:23,630 --> 00:12:28,070
the friends faces that don't have that

245
00:12:26,150 --> 00:12:30,170
split between those three it's not quite

246
00:12:28,070 --> 00:12:31,940
so useful it would have been nicer if

247
00:12:30,170 --> 00:12:34,729
they defined and in packets and out

248
00:12:31,940 --> 00:12:36,980
packets counters and then the broadcast

249
00:12:34,730 --> 00:12:38,810
and multicast were subsets of those but

250
00:12:36,980 --> 00:12:40,510
who said that I don't think this

251
00:12:38,810 --> 00:12:42,560
documents the right place to add those

252
00:12:40,510 --> 00:12:44,360
and I think further discussion will be

253
00:12:42,560 --> 00:12:46,459
required so the plan is not to do that

254
00:12:44,360 --> 00:12:49,900
now and if you go into a future revision

255
00:12:46,460 --> 00:12:49,900
or ITF interfaces if it was required

256
00:12:50,080 --> 00:13:00,880
many comments a Sealand of Cisco Systems

257
00:12:55,460 --> 00:13:05,570
isn't it if if you could if the client

258
00:13:00,880 --> 00:13:08,330
could derive those from a you know just

259
00:13:05,570 --> 00:13:11,530
adding them together yes isn't it isn't

260
00:13:08,330 --> 00:13:14,450
it that we don't add a counter that just

261
00:13:11,530 --> 00:13:15,770
if it's not but if it's different it

262
00:13:14,450 --> 00:13:18,110
depends on the definition whether

263
00:13:15,770 --> 00:13:20,870
they're needed or not I think the case

264
00:13:18,110 --> 00:13:22,370
where this came up the concern was for

265
00:13:20,870 --> 00:13:23,120
some interface types you may not know

266
00:13:22,370 --> 00:13:25,250
this split

267
00:13:23,120 --> 00:13:27,080
to unicast multicast broadcast so what

268
00:13:25,250 --> 00:13:30,470
which which bucket you put those in

269
00:13:27,080 --> 00:13:32,240
because it's gonna be misleading and I

270
00:13:30,470 --> 00:13:34,700
think it was maybe the policy models

271
00:13:32,240 --> 00:13:37,730
they wanted to refer back to this

272
00:13:34,700 --> 00:13:40,640
counter possibly and their concern was

273
00:13:37,730 --> 00:13:42,260
that doing the maths in XPath becomes

274
00:13:40,640 --> 00:13:44,180
sort of convoluted whereas you had a

275
00:13:42,260 --> 00:13:45,620
single counter that would be easier so

276
00:13:44,180 --> 00:13:46,900
there was justification as to why this

277
00:13:45,620 --> 00:13:49,220
could be used what I do agree that

278
00:13:46,900 --> 00:13:56,209
logically is equivalent to adding these

279
00:13:49,220 --> 00:13:59,060
three together I think the last issue

280
00:13:56,210 --> 00:14:01,550
and this came up in the last working

281
00:13:59,060 --> 00:14:03,260
group last call last ITF sorry and that

282
00:14:01,550 --> 00:14:04,670
was to change the name of l2 him to you

283
00:14:03,260 --> 00:14:07,900
that wasn't like surname and that's

284
00:14:04,670 --> 00:14:10,310
changed max frame size so effectively

285
00:14:07,900 --> 00:14:12,250
this is reporting the maximum size of

286
00:14:10,310 --> 00:14:15,109
frames that you can send and receive

287
00:14:12,250 --> 00:14:16,990
over the another physical interface but

288
00:14:15,110 --> 00:14:19,730
it could be a sub interface as well

289
00:14:16,990 --> 00:14:21,860
before the definition had a tweak to be

290
00:14:19,730 --> 00:14:24,529
fairly close in line to eight e 2.3

291
00:14:21,860 --> 00:14:27,709
there now some flexibilities to this

292
00:14:24,529 --> 00:14:29,240
size changing by four eight bytes to

293
00:14:27,709 --> 00:14:31,430
count for fact your video tags in the

294
00:14:29,240 --> 00:14:33,730
packet in the end I decided to actually

295
00:14:31,430 --> 00:14:36,140
take that out and make it more generic

296
00:14:33,730 --> 00:14:37,880
another change is to include the SES

297
00:14:36,140 --> 00:14:41,810
bytes that again we're excluded to try

298
00:14:37,880 --> 00:14:43,910
and make it more aligned with the some

299
00:14:41,810 --> 00:14:45,500
other counters that we have and then the

300
00:14:43,910 --> 00:14:48,500
last change was to increase its size

301
00:14:45,500 --> 00:14:50,630
from you in 16 to you at 32 with the aim

302
00:14:48,500 --> 00:14:52,700
of accommodating the Linux loop back in

303
00:14:50,630 --> 00:14:56,000
to you which is 65536

304
00:14:52,700 --> 00:14:57,320
so that's the new text I will get a

305
00:14:56,000 --> 00:15:00,820
Loutre II afterwards because he

306
00:14:57,320 --> 00:15:04,820
previously mentioned an interest in this

307
00:15:00,820 --> 00:15:06,320
yes so again that's on the list and if I

308
00:15:04,820 --> 00:15:10,190
don't hear back I assume that what I'm

309
00:15:06,320 --> 00:15:18,770
proposing is fine and that's last slide

310
00:15:10,190 --> 00:15:26,250
on these any questions Thanks I was just

311
00:15:18,770 --> 00:15:28,470
reading okay thanks okay except via blog

312
00:15:26,250 --> 00:15:45,060
[Music]

313
00:15:28,470 --> 00:15:49,550
oh hello blush thank y'all

314
00:15:45,060 --> 00:15:49,550
presenting instance data format which is

315
00:15:52,070 --> 00:16:03,350
next slide it's getting quite stable and

316
00:15:59,700 --> 00:16:06,090
I would like by now

317
00:16:03,350 --> 00:16:12,120
first of all I'm sorry for publishing

318
00:16:06,090 --> 00:16:19,200
the draft just yes before yesterday I

319
00:16:12,120 --> 00:16:22,710
think yeah concept is still the same we

320
00:16:19,200 --> 00:16:25,760
want a document data that will be

321
00:16:22,710 --> 00:16:29,340
available offline server capabilities

322
00:16:25,760 --> 00:16:32,250
reloading data a lot of use cases XML

323
00:16:29,340 --> 00:16:38,660
JSON encoding multiple new ones can be

324
00:16:32,250 --> 00:16:41,130
added add metadata for data set and

325
00:16:38,660 --> 00:16:43,530
content it will be similar to what you

326
00:16:41,130 --> 00:16:50,880
would get from a racket reply or get

327
00:16:43,530 --> 00:16:54,449
operation reply next please so what has

328
00:16:50,880 --> 00:16:57,510
changed since the last IDF first of all

329
00:16:54,450 --> 00:17:02,840
we had this entity tag and last modified

330
00:16:57,510 --> 00:17:05,609
time stamp which was from rest off and

331
00:17:02,840 --> 00:17:08,640
number of people thought it useful not

332
00:17:05,609 --> 00:17:10,469
other number of people thought that it's

333
00:17:08,640 --> 00:17:12,660
uncertain how it should be used it's

334
00:17:10,470 --> 00:17:15,210
tighter and quite rested on specific

335
00:17:12,660 --> 00:17:17,430
after the last IDF there was a email

336
00:17:15,210 --> 00:17:20,460
discussion on this and it was decided to

337
00:17:17,430 --> 00:17:23,460
remove it maybe later reintroduce if if

338
00:17:20,460 --> 00:17:23,970
there's a real need then just very

339
00:17:23,460 --> 00:17:27,900
lately

340
00:17:23,970 --> 00:17:30,270
and these suggestions I added this yet

341
00:17:27,900 --> 00:17:32,310
yeah instance data version so if the

342
00:17:30,270 --> 00:17:36,510
specification ever needs the wrapping a

343
00:17:32,310 --> 00:17:41,100
new version then we'll know that we move

344
00:17:36,510 --> 00:17:42,660
go from get version 1 to 2 or 1.1

345
00:17:41,100 --> 00:17:45,299
just that this specification is the

346
00:17:42,660 --> 00:17:49,860
first version of the instance data

347
00:17:45,299 --> 00:17:52,470
format then there was some discussion

348
00:17:49,860 --> 00:17:55,289
about the full inline schema

349
00:17:52,470 --> 00:18:00,750
specification method it is now made

350
00:17:55,289 --> 00:18:05,100
optional and just the days yesterday

351
00:18:00,750 --> 00:18:08,220
maybe and Andy at least came up that he

352
00:18:05,100 --> 00:18:10,678
thinks it's too flexible it's he wants

353
00:18:08,220 --> 00:18:16,289
just yank library but as a base but

354
00:18:10,679 --> 00:18:18,120
earlier I think to two IDs earlier there

355
00:18:16,289 --> 00:18:20,158
was a discussion on this way it was

356
00:18:18,120 --> 00:18:22,559
decided that we want a very flexible

357
00:18:20,159 --> 00:18:25,740
solution so it's not just yank library

358
00:18:22,559 --> 00:18:29,059
module format that can be used but any

359
00:18:25,740 --> 00:18:33,659
other format as well anyway now it's a

360
00:18:29,059 --> 00:18:35,668
optional based on a feature then I added

361
00:18:33,659 --> 00:18:37,620
the based on the last idea of

362
00:18:35,669 --> 00:18:39,510
discussions the simplified the online

363
00:18:37,620 --> 00:18:43,439
method where for each module you just

364
00:18:39,510 --> 00:18:46,440
have to specify a single string like in

365
00:18:43,440 --> 00:18:49,770
this example and we will come to an open

366
00:18:46,440 --> 00:18:57,080
issue at the end about the exact format

367
00:18:49,770 --> 00:18:59,820
of this string next please so and that

368
00:18:57,080 --> 00:19:04,049
Martin's proposal I added the wrapping

369
00:18:59,820 --> 00:19:07,950
container about around content schema so

370
00:19:04,049 --> 00:19:10,830
to grab the whole choice three methods

371
00:19:07,950 --> 00:19:15,000
in the container so cleanly separate

372
00:19:10,830 --> 00:19:17,480
them and rename some of the options the

373
00:19:15,000 --> 00:19:20,190
blue parts are the ones that changed

374
00:19:17,480 --> 00:19:22,799
simplified in line was added in line

375
00:19:20,190 --> 00:19:24,450
module and in my schema I think they

376
00:19:22,799 --> 00:19:27,360
were just called module and schema

377
00:19:24,450 --> 00:19:30,830
before and then we have a feature for in

378
00:19:27,360 --> 00:19:30,830
line itself next please

379
00:19:31,669 --> 00:19:38,820
there was a yang dr. review I updated

380
00:19:36,030 --> 00:19:42,690
the draft accordingly hopefully I didn't

381
00:19:38,820 --> 00:19:46,250
forget anything my English needs some

382
00:19:42,690 --> 00:19:49,350
updates as well security considerations

383
00:19:46,250 --> 00:19:51,870
so this is not a normal yang module

384
00:19:49,350 --> 00:19:55,050
because this is not intended to be

385
00:19:51,870 --> 00:19:57,649
accessed online basically

386
00:19:55,050 --> 00:20:00,210
it doesn't have any way it doesn't

387
00:19:57,650 --> 00:20:02,430
involve any way of modifying the server

388
00:20:00,210 --> 00:20:07,560
or the publishers behavior it's pure

389
00:20:02,430 --> 00:20:10,020
read-only you know in a sense and it's

390
00:20:07,560 --> 00:20:13,649
of its for files so file handling

391
00:20:10,020 --> 00:20:16,590
security should apply then this dot Ian

392
00:20:13,650 --> 00:20:22,830
for schema naming I'll come back to this

393
00:20:16,590 --> 00:20:25,649
in open issues and there was statement

394
00:20:22,830 --> 00:20:28,050
that I said that the yang what you

395
00:20:25,650 --> 00:20:29,730
revision for content defining yang

396
00:20:28,050 --> 00:20:33,450
modules should be mandatory because

397
00:20:29,730 --> 00:20:37,500
otherwise it modules can change between

398
00:20:33,450 --> 00:20:38,910
revisions greatly but it was commented

399
00:20:37,500 --> 00:20:41,520
that some modules might not have

400
00:20:38,910 --> 00:20:45,090
revision date at all so in that case

401
00:20:41,520 --> 00:20:47,580
it's we don't we can't have a revision

402
00:20:45,090 --> 00:20:52,530
date that was added

403
00:20:47,580 --> 00:20:56,340
next please and this is the example of

404
00:20:52,530 --> 00:20:58,440
how we look after all these changes so

405
00:20:56,340 --> 00:21:03,060
you see that the geared version one

406
00:20:58,440 --> 00:21:09,020
which is always one for this RFC M like

407
00:21:03,060 --> 00:21:12,780
we have it 1.1 fixed 1.1 4 7 yang yang

408
00:21:09,020 --> 00:21:18,470
7950 when we have here the simplified

409
00:21:12,780 --> 00:21:18,470
methods and next one please

410
00:21:18,710 --> 00:21:25,200
this is next

411
00:21:20,700 --> 00:21:30,690
maybe this yep we have one major open

412
00:21:25,200 --> 00:21:33,960
issue raised by Andy and Martin that in

413
00:21:30,690 --> 00:21:36,180
the draft I use the for a simplified

414
00:21:33,960 --> 00:21:38,160
inline method I use the format that is

415
00:21:36,180 --> 00:21:41,010
very similar to how we named yang

416
00:21:38,160 --> 00:21:43,560
modules for example IETF young library

417
00:21:41,010 --> 00:21:45,950
the module name the revision date if it

418
00:21:43,560 --> 00:21:48,950
exists but I think it would be existing

419
00:21:45,950 --> 00:21:52,170
99% of the case and and dot yang

420
00:21:48,950 --> 00:21:54,120
they said that we should not have dot

421
00:21:52,170 --> 00:21:58,440
the Angora dot Ian because it's not a

422
00:21:54,120 --> 00:22:02,459
file for me this is a simple short

423
00:21:58,440 --> 00:22:04,320
method but I could leave we could as now

424
00:22:02,460 --> 00:22:08,280
alternative just say ITF young library

425
00:22:04,320 --> 00:22:12,990
date and then not dot dot nothing

426
00:22:08,280 --> 00:22:16,740
to me that's somewhat unusual but yeah

427
00:22:12,990 --> 00:22:19,740
it's can be used or we could use a more

428
00:22:16,740 --> 00:22:22,170
complex solution where we have a list

429
00:22:19,740 --> 00:22:25,410
with two two leaves or module name and

430
00:22:22,170 --> 00:22:27,150
revision I don't want that because I was

431
00:22:25,410 --> 00:22:30,060
specifically asked to have a very simple

432
00:22:27,150 --> 00:22:32,700
and short solution so it's either one or

433
00:22:30,060 --> 00:22:38,129
two I can live with two if and the end

434
00:22:32,700 --> 00:22:40,650
and the Martin really wants that and I

435
00:22:38,130 --> 00:22:44,370
think I covered all the other open

436
00:22:40,650 --> 00:22:50,730
issues oh please and I hope it can go to

437
00:22:44,370 --> 00:22:52,709
work go past call now robot since this

438
00:22:50,730 --> 00:22:56,250
case just a quick comment on the module

439
00:22:52,710 --> 00:22:58,920
naming so with the young version work

440
00:22:56,250 --> 00:23:01,980
you're sorta better name young modules

441
00:22:58,920 --> 00:23:04,320
using the revision label as well I think

442
00:23:01,980 --> 00:23:05,910
I sent a comment to the list yesterday

443
00:23:04,320 --> 00:23:07,710
there might be nice to have slightly

444
00:23:05,910 --> 00:23:09,780
more flexible so it's not tighter has to

445
00:23:07,710 --> 00:23:12,900
be the date you could for example have a

446
00:23:09,780 --> 00:23:15,180
Yank Cimber and there's that or anything

447
00:23:12,900 --> 00:23:18,060
else an extra first of all I agree with

448
00:23:15,180 --> 00:23:21,500
you second I would rather make that

449
00:23:18,060 --> 00:23:27,659
abyss and not wait for the food revealed

450
00:23:21,500 --> 00:23:32,310
provisioning part dependent on this yes

451
00:23:27,660 --> 00:23:34,200
we can't really I don't know can if I

452
00:23:32,310 --> 00:23:36,889
can put in something later revision

453
00:23:34,200 --> 00:23:39,630
label may be used instead

454
00:23:36,890 --> 00:23:42,570
but that's rather uncertain at this

455
00:23:39,630 --> 00:23:45,030
point I don't care chair so if I put

456
00:23:42,570 --> 00:23:48,300
here sentence that instead of the data

457
00:23:45,030 --> 00:23:50,970
revision label which is undefined at

458
00:23:48,300 --> 00:23:54,690
this point can be used is that

459
00:23:50,970 --> 00:23:57,270
acceptable it's all state of personal

460
00:23:54,690 --> 00:24:00,570
preference I I would prefer that you

461
00:23:57,270 --> 00:24:02,340
define what can be done today and then

462
00:24:00,570 --> 00:24:05,460
if there's a new format that that'd be

463
00:24:02,340 --> 00:24:08,480
an update to this that's a personal

464
00:24:05,460 --> 00:24:12,240
preference it's not a chair statement

465
00:24:08,480 --> 00:24:14,070
okay so so I think you could possibly

466
00:24:12,240 --> 00:24:16,350
get away we just define it more loosely

467
00:24:14,070 --> 00:24:18,149
and sorry I think you define more

468
00:24:16,350 --> 00:24:20,370
loosely at it because again there's not

469
00:24:18,150 --> 00:24:21,090
a tight format it's gonna be defined I

470
00:24:20,370 --> 00:24:23,459
think

471
00:24:21,090 --> 00:24:27,720
necessarily matches or maybe does all

472
00:24:23,460 --> 00:24:31,080
right I want to say it here that if you

473
00:24:27,720 --> 00:24:33,299
have any kind of revision date revision

474
00:24:31,080 --> 00:24:36,090
label whatever available you must put it

475
00:24:33,299 --> 00:24:38,309
here so I want to force people to put

476
00:24:36,090 --> 00:24:44,178
their the some information about the

477
00:24:38,309 --> 00:24:44,178
revision okay a label could be used

478
00:24:46,159 --> 00:24:51,919
comment from jabber this is from Andy

479
00:24:48,899 --> 00:24:56,850
Biermann he says please just use yang

480
00:24:51,919 --> 00:25:00,840
not Yin is he happy with the second

481
00:24:56,850 --> 00:25:04,110
solution instead removing both dr. yang

482
00:25:00,840 --> 00:25:05,459
Gandhian answer that but he put in

483
00:25:04,110 --> 00:25:07,830
before you asked that question was

484
00:25:05,460 --> 00:25:12,299
number one is okay he didn't say okay

485
00:25:07,830 --> 00:25:14,399
the other one is bad so okay he just the

486
00:25:12,299 --> 00:25:19,860
answer number two is okay - from his

487
00:25:14,399 --> 00:25:24,928
perspective okay compromise stick with

488
00:25:19,860 --> 00:25:26,519
number one if he's okay with that yeah I

489
00:25:24,929 --> 00:25:28,820
think I think you know once you address

490
00:25:26,519 --> 00:25:31,590
what you believe are all the open issues

491
00:25:28,820 --> 00:25:33,619
explicitly say that and and say the

492
00:25:31,590 --> 00:25:36,689
author's think it's ready for last call

493
00:25:33,619 --> 00:25:43,220
we can go from there I can't speak for

494
00:25:36,690 --> 00:25:54,659
my co-chairs but I this is a minor issue

495
00:25:43,220 --> 00:25:57,029
buys this and okay interesting Kent I

496
00:25:54,659 --> 00:26:00,779
just saw this late Kent says he prefers

497
00:25:57,029 --> 00:26:03,840
number two with a contributor had on so

498
00:26:00,779 --> 00:26:08,340
I think we heard it from Andy one and

499
00:26:03,840 --> 00:26:11,340
two is okay and let's go with two

500
00:26:08,340 --> 00:26:17,070
because Martin might prefer to I think

501
00:26:11,340 --> 00:26:20,668
as well sounds like a good list

502
00:26:17,070 --> 00:26:23,220
discussion oh wait Martin did say he

503
00:26:20,669 --> 00:26:25,429
prefers to also so okay now let's go

504
00:26:23,220 --> 00:26:25,429
with two

505
00:26:30,059 --> 00:26:45,190
Rob Wilton it's gonna kick us off with

506
00:26:32,620 --> 00:26:57,850
the design team first design team okay

507
00:26:45,190 --> 00:27:13,600
so no wrong one that's yeah I screwed up

508
00:26:57,850 --> 00:27:15,158
in the upload that's it okay so I just

509
00:27:13,600 --> 00:27:18,789
an update Navy what the design team's

510
00:27:15,159 --> 00:27:20,679
been doing I just say overall summary of

511
00:27:18,789 --> 00:27:22,960
the solution space and then we've got

512
00:27:20,679 --> 00:27:25,240
individual drafts covering the various

513
00:27:22,960 --> 00:27:29,080
aspects of the solution there's being

514
00:27:25,240 --> 00:27:30,700
proposed here so in general terms what

515
00:27:29,080 --> 00:27:33,039
the design team sort covering I'm gonna

516
00:27:30,700 --> 00:27:34,539
give a quick update and bow is going to

517
00:27:33,039 --> 00:27:36,970
talk about the updates the revision

518
00:27:34,539 --> 00:27:39,150
modeling draft Joe's gonna be talking

519
00:27:36,970 --> 00:27:41,919
about updates to semantic versioning

520
00:27:39,150 --> 00:27:44,890
draft are big thin talk about yank

521
00:27:41,919 --> 00:27:47,260
packages Joe we're talking about the

522
00:27:44,890 --> 00:27:48,190
schema version selection draft wish I

523
00:27:47,260 --> 00:27:49,210
would have been doing that but he's not

524
00:27:48,190 --> 00:27:50,799
here

525
00:27:49,210 --> 00:27:53,020
and then I'm going to talk about the

526
00:27:50,799 --> 00:27:55,840
draft that I've and we published last

527
00:27:53,020 --> 00:27:58,210
week or I should move the weekend on

528
00:27:55,840 --> 00:27:59,500
schema comparison and then it may be to

529
00:27:58,210 --> 00:28:03,850
be sometime for the next steps

530
00:27:59,500 --> 00:28:05,559
discussion in the end so in terms of

531
00:28:03,850 --> 00:28:07,629
design and teen update and we've been

532
00:28:05,559 --> 00:28:11,110
meeting on a sort of semi regular weekly

533
00:28:07,630 --> 00:28:12,520
basis in scientific work has been done

534
00:28:11,110 --> 00:28:14,860
so I'd like to thank you to everyone

535
00:28:12,520 --> 00:28:17,049
who's been participating in that work

536
00:28:14,860 --> 00:28:19,740
there's lots of various people want our

537
00:28:17,049 --> 00:28:22,570
or another in terms of the main output

538
00:28:19,740 --> 00:28:23,770
the solution over you draft have been

539
00:28:22,570 --> 00:28:25,240
trivially updated that's not

540
00:28:23,770 --> 00:28:27,940
particularly interesting the shape of

541
00:28:25,240 --> 00:28:30,179
that hasn't changed there's been updates

542
00:28:27,940 --> 00:28:32,620
and some rating minor changes to the

543
00:28:30,179 --> 00:28:34,510
module revision handling draft that I

544
00:28:32,620 --> 00:28:36,969
will talk you through there's been quite

545
00:28:34,510 --> 00:28:38,289
significant updates to the Sebo draft

546
00:28:36,970 --> 00:28:40,360
the packages draft in the version

547
00:28:38,289 --> 00:28:42,520
selection drafts we'll talk through and

548
00:28:40,360 --> 00:28:43,120
then there's an early revision of these

549
00:28:42,520 --> 00:28:45,400
human

550
00:28:43,120 --> 00:28:46,809
heart and draught so to put this all in

551
00:28:45,400 --> 00:28:48,280
perspective I think we're at the stage

552
00:28:46,809 --> 00:28:51,520
where we're going to hopefully discuss

553
00:28:48,280 --> 00:28:53,770
whether this complete set could have

554
00:28:51,520 --> 00:28:55,809
working reproduction so that's what I'd

555
00:28:53,770 --> 00:28:58,440
like to keep in mind when we discussing

556
00:28:55,809 --> 00:28:58,440
these drafts please

557
00:28:58,750 --> 00:29:02,350
so covering the individual draft the

558
00:29:00,550 --> 00:29:05,200
requirements draft that Blokhin is

559
00:29:02,350 --> 00:29:07,840
stable has been no changes since ITF 105

560
00:29:05,200 --> 00:29:10,570
and none are anticipated so and that's

561
00:29:07,840 --> 00:29:12,550
just to sit in there at the moment again

562
00:29:10,570 --> 00:29:13,840
in terms of the solution overview the

563
00:29:12,550 --> 00:29:15,990
updates that I've been fairly trivial

564
00:29:13,840 --> 00:29:19,449
just updating the references to the

565
00:29:15,990 --> 00:29:20,800
fighter of solution drafts hasn't yet

566
00:29:19,450 --> 00:29:22,270
been updated with this scheme of

567
00:29:20,800 --> 00:29:24,760
comparison draft because that was too

568
00:29:22,270 --> 00:29:27,040
fresh but it's worth pointing out here

569
00:29:24,760 --> 00:29:29,650
that the the shape of the solution the

570
00:29:27,040 --> 00:29:33,210
component parts hasn't changed in scope

571
00:29:29,650 --> 00:29:35,860
or sighs so that's relatively minor a

572
00:29:33,210 --> 00:29:37,900
recap of what the overall solution space

573
00:29:35,860 --> 00:29:41,559
looks like so these are the five drafts

574
00:29:37,900 --> 00:29:44,410
the revision the updated yang module

575
00:29:41,559 --> 00:29:47,678
revision handling primarily that's about

576
00:29:44,410 --> 00:29:49,300
be able to notify when NBC changes have

577
00:29:47,679 --> 00:29:52,360
occurred throughout dates in the

578
00:29:49,300 --> 00:29:54,250
revision history it allows a revision

579
00:29:52,360 --> 00:29:56,860
label to be associated with a revision

580
00:29:54,250 --> 00:29:59,200
and that mechanism then used to put

581
00:29:56,860 --> 00:30:01,949
semantic version numbers in and it also

582
00:29:59,200 --> 00:30:07,300
allows a branch for revision history so

583
00:30:01,950 --> 00:30:10,150
RFC 791 a linear revision history of

584
00:30:07,300 --> 00:30:12,040
modules but but that I think was the

585
00:30:10,150 --> 00:30:14,950
intention the expectation that that was

586
00:30:12,040 --> 00:30:16,030
written so this clarifies have a branch

587
00:30:14,950 --> 00:30:18,400
revision history you want

588
00:30:16,030 --> 00:30:21,040
as I said adds provisional labels so and

589
00:30:18,400 --> 00:30:24,340
that sort of the core draft for updating

590
00:30:21,040 --> 00:30:26,399
young modules then overlaid on top of

591
00:30:24,340 --> 00:30:28,629
that is a somatic version number scheme

592
00:30:26,400 --> 00:30:31,690
and that allows the use of somatic

593
00:30:28,630 --> 00:30:33,550
version numbers for labeling or for

594
00:30:31,690 --> 00:30:37,270
version both modules and it's also used

595
00:30:33,550 --> 00:30:40,419
in package versioning as well the yang

596
00:30:37,270 --> 00:30:42,550
package is draft and talks about rather

597
00:30:40,420 --> 00:30:46,000
than doing versioning of single modules

598
00:30:42,550 --> 00:30:48,820
about sets of models modules together

599
00:30:46,000 --> 00:30:51,940
they represent a yang schema so it sort

600
00:30:48,820 --> 00:30:54,189
of uplift to work to be discussing

601
00:30:51,940 --> 00:30:56,650
larger units of work

602
00:30:54,190 --> 00:30:59,110
that then plays into the package version

603
00:30:56,650 --> 00:31:01,360
selection draft and that allows service

604
00:30:59,110 --> 00:31:03,399
to support different versions of the

605
00:31:01,360 --> 00:31:05,350
schemas and allow clients to choose

606
00:31:03,400 --> 00:31:08,800
which of those schemas to interact with

607
00:31:05,350 --> 00:31:11,110
advice very various mechanisms and then

608
00:31:08,800 --> 00:31:14,860
the final draft the one that I was

609
00:31:11,110 --> 00:31:16,570
posted on the weekend was the scheme of

610
00:31:14,860 --> 00:31:20,830
comparison touring draft so that

611
00:31:16,570 --> 00:31:24,879
explains how you can compare two modules

612
00:31:20,830 --> 00:31:26,320
or two gang schemas and yank packages to

613
00:31:24,880 --> 00:31:29,200
detect what the changes are between

614
00:31:26,320 --> 00:31:30,970
those and it defines some annotations to

615
00:31:29,200 --> 00:31:33,100
make that tooling work more efficiently

616
00:31:30,970 --> 00:31:34,870
so that's still an early draft there's

617
00:31:33,100 --> 00:31:36,850
still more work to work out exactly what

618
00:31:34,870 --> 00:31:38,679
things need to go into there but I think

619
00:31:36,850 --> 00:31:43,510
that the aim here is it shows you the

620
00:31:38,680 --> 00:31:44,410
shape of that solution and then this is

621
00:31:43,510 --> 00:31:46,180
sort of showing you what the

622
00:31:44,410 --> 00:31:48,850
dependencies are between the various

623
00:31:46,180 --> 00:31:50,740
module doing the various drafts you can

624
00:31:48,850 --> 00:31:53,949
see the module revision hanging one sits

625
00:31:50,740 --> 00:31:56,350
at the top and the package draft uses

626
00:31:53,950 --> 00:31:58,180
that the semantic versioning scheme is

627
00:31:56,350 --> 00:32:00,699
optional so if you're making use of it

628
00:31:58,180 --> 00:32:02,080
you have those dependencies the packaged

629
00:32:00,700 --> 00:32:03,970
version selection depends on the

630
00:32:02,080 --> 00:32:08,110
packaged version schema obviously so

631
00:32:03,970 --> 00:32:10,090
that's what they look like and then as I

632
00:32:08,110 --> 00:32:12,310
said so the potential next steps and the

633
00:32:10,090 --> 00:32:14,199
outcome of this is we've been working on

634
00:32:12,310 --> 00:32:18,730
this the design teams overall solution

635
00:32:14,200 --> 00:32:20,620
for quite a number of ITF cycles and I

636
00:32:18,730 --> 00:32:22,930
think with stage where we would like to

637
00:32:20,620 --> 00:32:25,540
know that the working group supports the

638
00:32:22,930 --> 00:32:27,160
direction we're going in so that's why I

639
00:32:25,540 --> 00:32:29,500
think we might be at the stage where

640
00:32:27,160 --> 00:32:30,760
working adoption of this set of draft to

641
00:32:29,500 --> 00:32:32,950
agree that this is the right direction

642
00:32:30,760 --> 00:32:34,120
would be a good discussion to have now

643
00:32:32,950 --> 00:32:36,730
I'm not suggesting you necessarily have

644
00:32:34,120 --> 00:32:38,020
this now hopefully this time after we've

645
00:32:36,730 --> 00:32:42,220
presented on the drafts to have that

646
00:32:38,020 --> 00:32:44,379
discussion when you said you know you're

647
00:32:42,220 --> 00:32:47,080
not sure about having it now what was it

648
00:32:44,380 --> 00:32:48,640
no well discussion about whether we

649
00:32:47,080 --> 00:32:50,230
think that ask you for work with

650
00:32:48,640 --> 00:32:51,940
adoption of these drafts the right thing

651
00:32:50,230 --> 00:32:54,370
to do is the next steps yeah I think

652
00:32:51,940 --> 00:32:58,210
that's a perfect question for sort of

653
00:32:54,370 --> 00:33:01,239
setting up the the next batch of slides

654
00:32:58,210 --> 00:33:04,690
okay and that we should ask this

655
00:33:01,240 --> 00:33:06,970
question at the end okay I think you are

656
00:33:04,690 --> 00:33:08,740
actually the UH

657
00:33:06,970 --> 00:33:10,390
and I don't know which if it's you or

658
00:33:08,740 --> 00:33:13,150
blog he's better present the last one

659
00:33:10,390 --> 00:33:15,460
this video should be me so please leave

660
00:33:13,150 --> 00:33:18,250
a couple of minutes you asked this again

661
00:33:15,460 --> 00:33:20,320
and working guru please pay attention to

662
00:33:18,250 --> 00:33:22,299
these with the expectation that we're

663
00:33:20,320 --> 00:33:23,830
gonna ask if the documents are ready for

664
00:33:22,299 --> 00:33:25,570
adoption

665
00:33:23,830 --> 00:33:26,949
now of course we always confirm things

666
00:33:25,570 --> 00:33:28,899
on the list and we're not making any

667
00:33:26,950 --> 00:33:33,100
final decisions but I think it's

668
00:33:28,900 --> 00:33:34,210
important feedback from today to sort of

669
00:33:33,100 --> 00:33:42,490
set that direction

670
00:33:34,210 --> 00:34:13,089
Thanks that's the last slot so now we're

671
00:33:42,490 --> 00:34:18,730
on to hello good morning

672
00:34:13,089 --> 00:34:22,750
like as just as Robert said that this

673
00:34:18,730 --> 00:34:32,139
dropped is the solution to the young

674
00:34:22,750 --> 00:34:36,520
model revision update so here is a young

675
00:34:32,139 --> 00:34:43,240
model revision update the main updates

676
00:34:36,520 --> 00:34:47,679
to the young 1.1 night 7950 the core

677
00:34:43,239 --> 00:34:52,509
enhancements to the young one 1.1 is

678
00:34:47,679 --> 00:34:56,400
that these updates explicitly said that

679
00:34:52,510 --> 00:35:03,180
long nonlinear module development is

680
00:34:56,400 --> 00:35:06,730
accepted and also since the it is run

681
00:35:03,180 --> 00:35:09,910
nonlinear and there could be like non

682
00:35:06,730 --> 00:35:14,310
backwards compatible changes in each

683
00:35:09,910 --> 00:35:18,569
revision so this document defines the

684
00:35:14,310 --> 00:35:20,290
number or discount or change revision

685
00:35:18,570 --> 00:35:24,370
extension to

686
00:35:20,290 --> 00:35:28,509
revision that that in each revision it

687
00:35:24,370 --> 00:35:35,220
must be specified if it's non backwards

688
00:35:28,510 --> 00:35:39,210
compatible changes and also this dropped

689
00:35:35,220 --> 00:35:44,109
defines that it must specify the

690
00:35:39,210 --> 00:35:44,850
revision label if it's it's a new

691
00:35:44,110 --> 00:35:49,090
revision

692
00:35:44,850 --> 00:35:51,940
although the revision date is added to

693
00:35:49,090 --> 00:35:57,760
specify that each revision revision

694
00:35:51,940 --> 00:36:01,150
label is also must to be added and also

695
00:35:57,760 --> 00:36:06,490
there are other updates like the

696
00:36:01,150 --> 00:36:12,330
revision date or derived used as an

697
00:36:06,490 --> 00:36:15,160
import this is the change to the

698
00:36:12,330 --> 00:36:18,430
previous one that import you either

699
00:36:15,160 --> 00:36:21,580
specify the revision date or it's

700
00:36:18,430 --> 00:36:28,870
optional but this one is given another

701
00:36:21,580 --> 00:36:31,870
option the other changes are like this

702
00:36:28,870 --> 00:36:35,290
drop to improve the young status no

703
00:36:31,870 --> 00:36:39,060
changes make the non backwards

704
00:36:35,290 --> 00:36:42,029
compatible is more clear and also this

705
00:36:39,060 --> 00:36:45,759
dropped also update the guidelines for

706
00:36:42,030 --> 00:36:50,440
updating your modules revisions so here

707
00:36:45,760 --> 00:36:55,930
is a recap and the Saints last meeting

708
00:36:50,440 --> 00:37:03,970
the major changes is the revision label

709
00:36:55,930 --> 00:37:08,770
that when use a revision label then it

710
00:37:03,970 --> 00:37:14,950
must takes a young-sam version fernette

711
00:37:08,770 --> 00:37:18,070
and the other major one is that each ITF

712
00:37:14,950 --> 00:37:21,129
module with a new revision must include

713
00:37:18,070 --> 00:37:23,830
a revision label that is confirms to

714
00:37:21,130 --> 00:37:28,710
young-sam worship so these are two major

715
00:37:23,830 --> 00:37:32,230
changes and the other minor changes is

716
00:37:28,710 --> 00:37:33,900
this dropped important revision identify

717
00:37:32,230 --> 00:37:38,280
when defining the young

718
00:37:33,900 --> 00:37:42,740
and the minor improvements to that the

719
00:37:38,280 --> 00:37:42,740
text and modules these are main changes

720
00:37:44,750 --> 00:37:50,310
just a quick clarification so and the

721
00:37:48,090 --> 00:37:51,990
review the revision label it's not

722
00:37:50,310 --> 00:37:53,970
compulsory you don't have to have one of

723
00:37:51,990 --> 00:37:55,439
those but it's saying if you do have an

724
00:37:53,970 --> 00:37:58,020
original label in there and it looks

725
00:37:55,440 --> 00:37:59,880
like a yanked similar number then it

726
00:37:58,020 --> 00:38:02,400
must be interpreted that way so to link

727
00:37:59,880 --> 00:38:03,870
an interpreter Yanks and the and clients

728
00:38:02,400 --> 00:38:05,670
can interpret that way so but it's still

729
00:38:03,870 --> 00:38:08,640
optional as to whether you include a

730
00:38:05,670 --> 00:38:11,100
revision label you'd be allowed to use

731
00:38:08,640 --> 00:38:12,660
revision dates on your own modules the

732
00:38:11,100 --> 00:38:15,980
same unite if modules they had to use

733
00:38:12,660 --> 00:38:19,440
revision levels okay so my understanding

734
00:38:15,980 --> 00:38:23,630
maybe is that revision labo is mandatory

735
00:38:19,440 --> 00:38:26,790
but actually it's not yeah

736
00:38:23,630 --> 00:38:28,440
for ITF modules we're saying it has to

737
00:38:26,790 --> 00:38:31,140
be original label it has to be used yang

738
00:38:28,440 --> 00:38:33,420
samba but in your if you had your own

739
00:38:31,140 --> 00:38:35,580
proprietary native young models you can

740
00:38:33,420 --> 00:38:38,040
use revision dates you wish to do so the

741
00:38:35,580 --> 00:38:41,549
men that provision beta is mandatory but

742
00:38:38,040 --> 00:38:44,670
the label is optional to add but if it's

743
00:38:41,550 --> 00:38:49,250
as a label then master confirms to the

744
00:38:44,670 --> 00:38:51,840
format of young-sam worship so write it

745
00:38:49,250 --> 00:38:53,790
it doesn't have to so again the original

746
00:38:51,840 --> 00:38:56,910
oppose doesn't have to be yang sander

747
00:38:53,790 --> 00:38:58,830
but he looks like yang sama it's

748
00:38:56,910 --> 00:39:02,279
interpreted that way so you couldn't

749
00:38:58,830 --> 00:39:03,840
have proprietary original label that

750
00:39:02,280 --> 00:39:09,180
looks like a yang sender actually has a

751
00:39:03,840 --> 00:39:12,600
different meaning okay thanks then this

752
00:39:09,180 --> 00:39:17,750
draft the opening issue to this drop it

753
00:39:12,600 --> 00:39:25,460
that disrupt tries to solve their

754
00:39:17,750 --> 00:39:28,700
potential 1979 fifties ambiguity of this

755
00:39:25,460 --> 00:39:34,530
like when implementing the young models

756
00:39:28,700 --> 00:39:37,589
that improvers in existing defining that

757
00:39:34,530 --> 00:39:41,010
important module revision is and bigger

758
00:39:37,590 --> 00:39:43,670
than choose the latest revision and in

759
00:39:41,010 --> 00:39:46,950
is dropped they proposed another

760
00:39:43,670 --> 00:39:47,579
different definition that if imported

761
00:39:46,950 --> 00:39:49,348
module

762
00:39:47,579 --> 00:39:53,579
revisionism because then choose a

763
00:39:49,349 --> 00:40:01,349
impotent version rather than use the

764
00:39:53,579 --> 00:40:03,479
latest one but it could otherwise when

765
00:40:01,349 --> 00:40:05,849
there is no implicit provision than

766
00:40:03,479 --> 00:40:09,299
resource to the lady is important

767
00:40:05,849 --> 00:40:12,420
abortion so the question to the working

768
00:40:09,299 --> 00:40:16,739
group is whether we fix and this module

769
00:40:12,420 --> 00:40:20,130
versioning dropped food or that could be

770
00:40:16,739 --> 00:40:24,890
and I think this is may not be young

771
00:40:20,130 --> 00:40:30,869
library routers right it could be like

772
00:40:24,890 --> 00:40:36,058
78 50s right I believe so this is a

773
00:40:30,869 --> 00:40:40,109
question to the working group so and the

774
00:40:36,059 --> 00:40:45,259
other open issue that this draft is

775
00:40:40,109 --> 00:40:47,969
still working on the the non backwards

776
00:40:45,259 --> 00:40:51,719
compatible changes and also the back

777
00:40:47,969 --> 00:40:56,089
what will be the backward changes added

778
00:40:51,719 --> 00:41:01,019
it more or less that because existing

779
00:40:56,089 --> 00:41:06,229
young 1.1 has defined a list of what is

780
00:41:01,019 --> 00:41:11,299
backward compatible changes but our

781
00:41:06,229 --> 00:41:17,279
draft is thinking we we may add more to

782
00:41:11,299 --> 00:41:19,079
to improve this definition so also we

783
00:41:17,279 --> 00:41:22,859
are thinking whether we give an

784
00:41:19,079 --> 00:41:27,529
exhausted list or we give some generic

785
00:41:22,859 --> 00:41:27,529
one that if the unless

786
00:41:27,950 --> 00:41:38,169
aníbal client then changes classifiers

787
00:41:30,740 --> 00:41:38,169
as NBC so here is all the distract

788
00:41:40,420 --> 00:41:47,800
questions just a clarifying comment Geo

789
00:41:43,610 --> 00:41:50,150
Clark Cisco on this as we discuss this

790
00:41:47,800 --> 00:41:53,320
polish in particular has come up with

791
00:41:50,150 --> 00:41:55,160
other things that potentially break

792
00:41:53,320 --> 00:41:57,740
backwards-compatibility or haven't been

793
00:41:55,160 --> 00:41:59,960
considered I honestly don't feel an

794
00:41:57,740 --> 00:42:02,240
exhaustive list as possible I think

795
00:41:59,960 --> 00:42:04,490
we'll always find some corner cases I

796
00:42:02,240 --> 00:42:07,129
think we should probably err on the side

797
00:42:04,490 --> 00:42:10,640
of non exhaustive with some kind of

798
00:42:07,130 --> 00:42:13,070
clarifying verbiage there to say we're

799
00:42:10,640 --> 00:42:15,799
trying to do the best thing we can for

800
00:42:13,070 --> 00:42:18,170
the client and if we aren't certain

801
00:42:15,800 --> 00:42:24,140
better to err on on saying something

802
00:42:18,170 --> 00:42:26,060
like NBC Nam backwards compatible so of

803
00:42:24,140 --> 00:42:32,600
these open issues which do you think

804
00:42:26,060 --> 00:42:34,580
need to be answered before adoption Rob

805
00:42:32,600 --> 00:42:36,799
Wilson Cisco neither of them I think we

806
00:42:34,580 --> 00:42:39,770
can adopt it and resolve these as part

807
00:42:36,800 --> 00:42:44,330
of the regular working group work on

808
00:42:39,770 --> 00:42:49,330
this document okay great thank you very

809
00:42:44,330 --> 00:42:49,330
much Joe I think you're up next

810
00:43:06,010 --> 00:43:11,840
all right

811
00:43:08,210 --> 00:43:14,720
that's me Joe Clark and this is the

812
00:43:11,840 --> 00:43:17,570
version of the yang Cimber work that the

813
00:43:14,720 --> 00:43:21,319
design team was doing that Bo alluded to

814
00:43:17,570 --> 00:43:25,730
so we had a little module dance here or

815
00:43:21,320 --> 00:43:30,170
draft dance we originally made module

816
00:43:25,730 --> 00:43:32,120
versioning the related to drop document

817
00:43:30,170 --> 00:43:33,890
then we had to go back so now Simba does

818
00:43:32,120 --> 00:43:36,350
stand alone but there have been some

819
00:43:33,890 --> 00:43:37,549
changes there also been some things that

820
00:43:36,350 --> 00:43:41,839
have stayed the same

821
00:43:37,550 --> 00:43:45,170
so in particular between 0 1 & 0 0 we

822
00:43:41,840 --> 00:43:48,080
have not changed the syntax and rules so

823
00:43:45,170 --> 00:43:50,270
the modified Cimber and I'll recap with

824
00:43:48,080 --> 00:43:53,090
an example here in a second that Rob

825
00:43:50,270 --> 00:43:57,160
described at a previous IETF I think 104

826
00:43:53,090 --> 00:44:01,930
or 103 even that has stayed the same

827
00:43:57,160 --> 00:44:03,160
the notion and the definition of NBC nan

828
00:44:01,930 --> 00:44:05,779
backwards-compatible

829
00:44:03,160 --> 00:44:10,490
backwards-compatible or BC and editorial

830
00:44:05,780 --> 00:44:13,280
changes stays the same we did officially

831
00:44:10,490 --> 00:44:16,910
or formally define editorial changes in

832
00:44:13,280 --> 00:44:19,490
the o1 draft and modules can still have

833
00:44:16,910 --> 00:44:23,089
a semantic version associated with them

834
00:44:19,490 --> 00:44:26,390
through the revision label and as Robin

835
00:44:23,090 --> 00:44:28,880
Bo we're talking about that if you using

836
00:44:26,390 --> 00:44:31,730
a revision label that looks like a

837
00:44:28,880 --> 00:44:33,740
silver or a yang symbol we'll look at

838
00:44:31,730 --> 00:44:37,270
what that format looks like in a second

839
00:44:33,740 --> 00:44:42,229
then tooling must treat that as a

840
00:44:37,270 --> 00:44:44,960
modified yang Cimber that's important

841
00:44:42,230 --> 00:44:47,180
with respect to vendors because a vendor

842
00:44:44,960 --> 00:44:49,460
version might look like a silver quite

843
00:44:47,180 --> 00:44:52,370
honestly so you have to consider that

844
00:44:49,460 --> 00:44:54,440
maybe you need to precede the the

845
00:44:52,370 --> 00:44:57,799
starting major version in a proprietary

846
00:44:54,440 --> 00:45:01,670
vendor string of being at Cisco use one

847
00:44:57,800 --> 00:45:05,810
of ours like 16.3 to looks like a silver

848
00:45:01,670 --> 00:45:09,560
but you might have to call it V 16.3 2

849
00:45:05,810 --> 00:45:13,130
to instruct the tooling that this should

850
00:45:09,560 --> 00:45:16,369
not obey the modified semver rules and

851
00:45:13,130 --> 00:45:21,410
these rules are here on the slide

852
00:45:16,369 --> 00:45:23,660
so we obey December 2.00 syntax and in

853
00:45:21,410 --> 00:45:27,379
fact one of the changes we made in ODOT

854
00:45:23,660 --> 00:45:29,720
one fully recognizes that syntax so we

855
00:45:27,380 --> 00:45:31,480
have a major version component a minor

856
00:45:29,720 --> 00:45:35,450
version component and a patch version

857
00:45:31,480 --> 00:45:38,420
component that's all 2.0 and then we add

858
00:45:35,450 --> 00:45:41,299
this M lowercase M or uppercase M

859
00:45:38,420 --> 00:45:44,089
modifier and you can see there that how

860
00:45:41,299 --> 00:45:49,130
those are applied and those are sticky

861
00:45:44,089 --> 00:45:52,490
once you add an M or a lowercase M or an

862
00:45:49,130 --> 00:45:56,630
uppercase M those are sticky and this

863
00:45:52,490 --> 00:45:59,419
allows us to tag our specific branches

864
00:45:56,630 --> 00:46:02,269
while we're using that the the yang

865
00:45:59,420 --> 00:46:05,089
module versioning rules in terms of that

866
00:46:02,269 --> 00:46:08,029
lineage that that we talked about in the

867
00:46:05,089 --> 00:46:10,730
last meeting well the one exception here

868
00:46:08,029 --> 00:46:12,769
is that beta or pre-release versions

869
00:46:10,730 --> 00:46:15,380
that is if the major version is a zero

870
00:46:12,769 --> 00:46:18,680
all bets are off as you're developing

871
00:46:15,380 --> 00:46:21,410
before a release an initial release you

872
00:46:18,680 --> 00:46:23,359
can continue to make backwards

873
00:46:21,410 --> 00:46:26,989
compatible and non backwards compatible

874
00:46:23,359 --> 00:46:29,680
changes you just use a zero for the to

875
00:46:26,989 --> 00:46:33,589
denote the major version number

876
00:46:29,680 --> 00:46:36,129
formatting aside this is an example this

877
00:46:33,589 --> 00:46:39,259
was previously presented I just

878
00:46:36,130 --> 00:46:42,230
egregiously stole this from one of Rob's

879
00:46:39,259 --> 00:46:45,980
previous presentations and you can see

880
00:46:42,230 --> 00:46:47,839
how the versions are applied the version

881
00:46:45,980 --> 00:46:51,200
numbers or components are applied a

882
00:46:47,839 --> 00:46:56,390
where NB C changes show up and then how

883
00:46:51,200 --> 00:46:59,328
the M and the M of the uppercase M and

884
00:46:56,390 --> 00:47:01,940
the lowercase M are applied and those

885
00:46:59,329 --> 00:47:05,599
again would be sticky within those sub

886
00:47:01,940 --> 00:47:13,460
branches like 1.1.1 M that would be

887
00:47:05,599 --> 00:47:17,329
sticky as 1.1.1 X keeps going on so

888
00:47:13,460 --> 00:47:19,519
what's new what has changed since 0/0 if

889
00:47:17,329 --> 00:47:22,069
you've read this and hopefully you have

890
00:47:19,519 --> 00:47:24,828
you've noticed that the when we use the

891
00:47:22,069 --> 00:47:27,480
word yang module in the zero zero

892
00:47:24,829 --> 00:47:31,499
revision we've changed it to yang art of

893
00:47:27,480 --> 00:47:34,559
I'll admit my embedded face Oris may not

894
00:47:31,499 --> 00:47:38,430
be the greatest artifacts tend to be

895
00:47:34,559 --> 00:47:40,380
used in some coding parlance within the

896
00:47:38,430 --> 00:47:42,779
industry and the reason we wanted to

897
00:47:40,380 --> 00:47:44,819
genera size this a little bit was to

898
00:47:42,779 --> 00:47:47,990
recognize that Simba's can be applied

899
00:47:44,819 --> 00:47:50,549
for other things and in particular yang

900
00:47:47,990 --> 00:47:53,640
packages which Rob we'll talk about in a

901
00:47:50,549 --> 00:47:56,099
few minutes we wanted that to also be

902
00:47:53,640 --> 00:47:59,190
able to be versioned with a yang semver

903
00:47:56,099 --> 00:48:02,369
so we changed where where module is

904
00:47:59,190 --> 00:48:06,150
needed like when we doing a import

905
00:48:02,369 --> 00:48:08,279
revision or derived that we still use

906
00:48:06,150 --> 00:48:12,119
the word module but in general we

907
00:48:08,279 --> 00:48:14,789
genericized module to be artifact the

908
00:48:12,119 --> 00:48:17,069
Cimber construct is no longer a an

909
00:48:14,789 --> 00:48:21,150
extension like a top-level extension

910
00:48:17,069 --> 00:48:24,119
whereby that is what you directly import

911
00:48:21,150 --> 00:48:25,499
from instead it is now a revision label

912
00:48:24,119 --> 00:48:27,809
and we'll take a look at kind of how

913
00:48:25,499 --> 00:48:31,589
that transitioned though you can still

914
00:48:27,809 --> 00:48:33,599
if you choose to import from a simmer

915
00:48:31,589 --> 00:48:35,788
you're still using you're just saying I

916
00:48:33,599 --> 00:48:39,059
want to refer to this particular

917
00:48:35,789 --> 00:48:44,579
revision of a yang module by the semver

918
00:48:39,059 --> 00:48:46,769
but the linear or lineage or the lineage

919
00:48:44,579 --> 00:48:49,579
import is still how things the tooling

920
00:48:46,769 --> 00:48:52,799
will resolve that since we're no longer

921
00:48:49,579 --> 00:48:57,210
updating the the the core tenant of Yang

922
00:48:52,799 --> 00:48:59,480
we pulled out the update 7950 we did add

923
00:48:57,210 --> 00:49:02,940
full support just just for completeness

924
00:48:59,480 --> 00:49:05,190
for the full Cimber 2.0 dato speckled

925
00:49:02,940 --> 00:49:07,440
i'll talk about that in a minute and we

926
00:49:05,190 --> 00:49:09,809
formally define the regular expression

927
00:49:07,440 --> 00:49:13,109
the type def for what a yang symbol

928
00:49:09,809 --> 00:49:14,970
looks like and we restated the rule that

929
00:49:13,109 --> 00:49:18,299
we talked about and Bo mentioned if

930
00:49:14,970 --> 00:49:20,819
something looks like a silver a yang

931
00:49:18,299 --> 00:49:23,460
some ver then tooling needs to treat it

932
00:49:20,819 --> 00:49:26,190
as such so those were the the main

933
00:49:23,460 --> 00:49:29,940
changes digging in just a little bit to

934
00:49:26,190 --> 00:49:32,940
some of them the old 0.0 had this

935
00:49:29,940 --> 00:49:35,670
top-level per revision it was a cember

936
00:49:32,940 --> 00:49:37,289
module version and and we were saying

937
00:49:35,670 --> 00:49:39,930
that that initially was how we were

938
00:49:37,289 --> 00:49:40,950
going to do the yang versioning and now

939
00:49:39,930 --> 00:49:43,259
we've moved on

940
00:49:40,950 --> 00:49:47,270
something that's based on the revision

941
00:49:43,260 --> 00:49:50,609
lineage and what we can optionally

942
00:49:47,270 --> 00:49:52,800
optionally label a revision with

943
00:49:50,609 --> 00:49:55,410
anything we want and this document

944
00:49:52,800 --> 00:49:58,320
defines the pattern for that yang silver

945
00:49:55,410 --> 00:50:00,509
and if something again looks like a yang

946
00:49:58,320 --> 00:50:04,800
Cimber then tooling has to treat it as

947
00:50:00,510 --> 00:50:06,660
such in terms of fulsome burr 2.0

948
00:50:04,800 --> 00:50:09,810
support the one thing we hadn't

949
00:50:06,660 --> 00:50:12,118
addressed previously is that cember 2.0

950
00:50:09,810 --> 00:50:15,890
offers this metadata for both

951
00:50:12,119 --> 00:50:18,300
pre-release and build and so we just

952
00:50:15,890 --> 00:50:20,790
expanded our regular expression to say

953
00:50:18,300 --> 00:50:22,740
we'll allow that if you want to have

954
00:50:20,790 --> 00:50:25,950
that as part of your version string but

955
00:50:22,740 --> 00:50:29,098
it has no applicability to the yang

956
00:50:25,950 --> 00:50:32,759
tooling so gang quill yang tooling will

957
00:50:29,099 --> 00:50:35,940
effectively ignore any of that build or

958
00:50:32,760 --> 00:50:38,250
pre-release metadata but we will allow

959
00:50:35,940 --> 00:50:41,460
it it will it will not break our type

960
00:50:38,250 --> 00:50:46,170
def definition and finally the type def

961
00:50:41,460 --> 00:50:53,849
definition itself so that is the reg reg

962
00:50:46,170 --> 00:50:55,410
X to look for a yang Cimber and I

963
00:50:53,849 --> 00:50:59,369
believe that's the last slide so

964
00:50:55,410 --> 00:51:03,170
questions on what we've done change kept

965
00:50:59,369 --> 00:51:03,170
the same with yang Cimber

966
00:51:10,730 --> 00:51:18,200
yeah Charles echo one question you you

967
00:51:14,720 --> 00:51:20,419
brought up the example of Cisco using I

968
00:51:18,200 --> 00:51:21,950
think version you know do you mind

969
00:51:20,420 --> 00:51:24,290
leaning into the my side we have

970
00:51:21,950 --> 00:51:26,118
background noise I hear you okay using

971
00:51:24,290 --> 00:51:27,770
software version numbers and their yang

972
00:51:26,119 --> 00:51:31,609
models that sort of look like some verb

973
00:51:27,770 --> 00:51:33,680
aren't just you guys probably put some

974
00:51:31,609 --> 00:51:35,420
thought into this how is that going to

975
00:51:33,680 --> 00:51:37,040
be thought about the negative

976
00:51:35,420 --> 00:51:40,960
ramifications that because those models

977
00:51:37,040 --> 00:51:44,390
aren't all going to be like renamed to

978
00:51:40,960 --> 00:51:46,550
two like a diversion like to add some

979
00:51:44,390 --> 00:51:47,720
string I mean those those yang models

980
00:51:46,550 --> 00:51:49,400
are out there and they're going to

981
00:51:47,720 --> 00:51:51,410
remain out there and being used for a

982
00:51:49,400 --> 00:51:53,840
long time right so what's going to

983
00:51:51,410 --> 00:51:54,460
happen I thought about that so fair

984
00:51:53,840 --> 00:51:59,420
point

985
00:51:54,460 --> 00:52:01,940
the let me go back to this so the the

986
00:51:59,420 --> 00:52:03,830
revision label that would have to be a

987
00:52:01,940 --> 00:52:05,420
new property that they would add anyway

988
00:52:03,830 --> 00:52:07,460
we're not saying they need to change the

989
00:52:05,420 --> 00:52:09,980
name of the module but if they wanted to

990
00:52:07,460 --> 00:52:12,530
adopt this the meaning if they wanted to

991
00:52:09,980 --> 00:52:16,640
adopt the whole lineage base a

992
00:52:12,530 --> 00:52:18,170
Providence based import and and non

993
00:52:16,640 --> 00:52:20,180
backwards compatible backwards

994
00:52:18,170 --> 00:52:22,070
compatible change everything we're

995
00:52:20,180 --> 00:52:25,850
presenting here essentially they would

996
00:52:22,070 --> 00:52:28,580
have to mark in their in their new

997
00:52:25,850 --> 00:52:30,500
revisions that this is this is the

998
00:52:28,580 --> 00:52:33,049
revision label that we're going to use

999
00:52:30,500 --> 00:52:36,140
and then they have to be aware that if

1000
00:52:33,050 --> 00:52:38,600
they were do like 16.3 dot - like I said

1001
00:52:36,140 --> 00:52:40,580
that and and they don't want users

1002
00:52:38,600 --> 00:52:42,680
because this is mainly for users to look

1003
00:52:40,580 --> 00:52:44,600
at this and say ah okay I understand

1004
00:52:42,680 --> 00:52:46,399
that that between this version and the

1005
00:52:44,600 --> 00:52:48,380
last there have been some non backwards

1006
00:52:46,400 --> 00:52:50,660
compatible changes that they would have

1007
00:52:48,380 --> 00:52:53,060
to use something that does not look like

1008
00:52:50,660 --> 00:52:55,790
a Cimber that doesn't match that regular

1009
00:52:53,060 --> 00:52:58,029
expression so if they don't want to

1010
00:52:55,790 --> 00:53:00,200
adopt this they have to do nothing

1011
00:52:58,030 --> 00:53:02,540
that's just bait you you're keying off

1012
00:53:00,200 --> 00:53:07,490
of this which you can okay great miss

1013
00:53:02,540 --> 00:53:08,900
thanks and so Rob Wilson Cisco yeah just

1014
00:53:07,490 --> 00:53:10,669
derived one clarification to that as

1015
00:53:08,900 --> 00:53:13,100
well so you could gain it's a Charles

1016
00:53:10,670 --> 00:53:16,790
you just put an X like an r3 but one

1017
00:53:13,100 --> 00:53:18,140
looks zero and yeah comes non-member so

1018
00:53:16,790 --> 00:53:20,090
you just anything that means that you

1019
00:53:18,140 --> 00:53:24,319
it's all for the street formats fine

1020
00:53:20,090 --> 00:53:26,810
thanks well I thank you Erickson I

1021
00:53:24,320 --> 00:53:30,640
my first idea would be that you have a

1022
00:53:26,810 --> 00:53:33,770
revision label called Eric's on : 3.1

1023
00:53:30,640 --> 00:53:39,400
Cisco - 16.3 yeah anything that would

1024
00:53:33,770 --> 00:53:43,580
break the Reg ups evaluation alright

1025
00:53:39,400 --> 00:53:45,500
thank you very much Roose just as a

1026
00:53:43,580 --> 00:53:48,520
heads up right now we are running ahead

1027
00:53:45,500 --> 00:53:50,960
which means folks who are in the second

1028
00:53:48,520 --> 00:53:53,690
session might be bumped up to this

1029
00:53:50,960 --> 00:53:55,700
session but you know sometimes we end up

1030
00:53:53,690 --> 00:53:57,620
running better the discussion continues

1031
00:53:55,700 --> 00:54:00,350
if we end up going back on schedule

1032
00:53:57,620 --> 00:54:12,850
but this doesn't heads up for those so

1033
00:54:00,350 --> 00:54:15,950
right now I think we have Rob so the

1034
00:54:12,850 --> 00:54:20,900
third of our drafts that were presenting

1035
00:54:15,950 --> 00:54:23,149
on yank packages see so I presented this

1036
00:54:20,900 --> 00:54:24,560
one at least once before I can even

1037
00:54:23,150 --> 00:54:25,940
overview what it is again just to remind

1038
00:54:24,560 --> 00:54:27,320
you what they look like and then I'm

1039
00:54:25,940 --> 00:54:28,790
going to talk about what we've changed

1040
00:54:27,320 --> 00:54:31,100
in here so this one's had more

1041
00:54:28,790 --> 00:54:33,200
significant updates in terms of the

1042
00:54:31,100 --> 00:54:35,509
details and more things added to it I

1043
00:54:33,200 --> 00:54:36,859
don't think the overall solutions

1044
00:54:35,510 --> 00:54:40,400
changed into the words tried to achieve

1045
00:54:36,860 --> 00:54:41,840
it's just more refinements so um what is

1046
00:54:40,400 --> 00:54:43,670
a yang package we know what a yang

1047
00:54:41,840 --> 00:54:46,340
module is so yang package is where you

1048
00:54:43,670 --> 00:54:49,940
take a set of yang modules together and

1049
00:54:46,340 --> 00:54:53,330
use them to define a schema so what a

1050
00:54:49,940 --> 00:54:56,780
device might currently report in the

1051
00:54:53,330 --> 00:54:58,670
yang library via module sets and things

1052
00:54:56,780 --> 00:55:00,350
you could also report on via yang

1053
00:54:58,670 --> 00:55:02,810
packages it could define the same thing

1054
00:55:00,350 --> 00:55:04,490
so so why do we do something new here

1055
00:55:02,810 --> 00:55:06,920
well there's two things we're trying to

1056
00:55:04,490 --> 00:55:09,439
do one is the ability to define these

1057
00:55:06,920 --> 00:55:12,260
things off the box so rather than being

1058
00:55:09,440 --> 00:55:15,110
tied to what the service returning both

1059
00:55:12,260 --> 00:55:16,790
put into an instance data file and use

1060
00:55:15,110 --> 00:55:18,830
those well you could still use yang

1061
00:55:16,790 --> 00:55:20,540
label to do that but the other key

1062
00:55:18,830 --> 00:55:23,480
change here is that the packages are

1063
00:55:20,540 --> 00:55:26,570
hierarchical so and the idea here is

1064
00:55:23,480 --> 00:55:28,520
that you can define packages and then

1065
00:55:26,570 --> 00:55:30,770
import those in the same way or include

1066
00:55:28,520 --> 00:55:32,570
them the same way and that you would

1067
00:55:30,770 --> 00:55:36,560
include modules and build up more

1068
00:55:32,570 --> 00:55:38,060
complex schema so an example is ITF

1069
00:55:36,560 --> 00:55:39,620
might define

1070
00:55:38,060 --> 00:55:41,270
a package for basic route of

1071
00:55:39,620 --> 00:55:43,580
functionality that defines some modules

1072
00:55:41,270 --> 00:55:47,000
and then they might find packages for LT

1073
00:55:43,580 --> 00:55:48,650
VPN or l3 VPN or routing package and

1074
00:55:47,000 --> 00:55:50,720
those packages would depend on those

1075
00:55:48,650 --> 00:55:55,670
base ones and you can effectively build

1076
00:55:50,720 --> 00:55:56,959
together more complex sets as I said

1077
00:55:55,670 --> 00:55:58,520
they're the in terms of the package

1078
00:55:56,960 --> 00:56:00,620
information it's available both on the

1079
00:55:58,520 --> 00:56:02,150
box and at the moment it's automating

1080
00:56:00,620 --> 00:56:04,100
the angle library I'll talk a bit more

1081
00:56:02,150 --> 00:56:06,710
about how it does that and it's also

1082
00:56:04,100 --> 00:56:10,160
available off the box one of the other

1083
00:56:06,710 --> 00:56:13,280
key changes come in here is to add check

1084
00:56:10,160 --> 00:56:16,040
sums for integrity checks both of the

1085
00:56:13,280 --> 00:56:18,230
modules and of the packages themselves

1086
00:56:16,040 --> 00:56:20,360
the idea here is that if you know what

1087
00:56:18,230 --> 00:56:22,940
the package is a design time from

1088
00:56:20,360 --> 00:56:24,650
ticular version then your client doesn't

1089
00:56:22,940 --> 00:56:26,240
need to download the full set of modules

1090
00:56:24,650 --> 00:56:28,340
or the full schema from the device and

1091
00:56:26,240 --> 00:56:31,069
and check whether it matches what you

1092
00:56:28,340 --> 00:56:32,930
what you need if you know that it's what

1093
00:56:31,070 --> 00:56:35,300
you expect the device to have you can

1094
00:56:32,930 --> 00:56:37,339
just check it has a package that is

1095
00:56:35,300 --> 00:56:38,930
either what you expect it to be or

1096
00:56:37,340 --> 00:56:41,210
backwards compatible with what you

1097
00:56:38,930 --> 00:56:43,580
expect it to be and avoid that sort of

1098
00:56:41,210 --> 00:56:45,440
more complicated and checking of the

1099
00:56:43,580 --> 00:56:47,710
schema so it sort of move some of the

1100
00:56:45,440 --> 00:56:50,510
work that you would naturally do and

1101
00:56:47,710 --> 00:56:54,710
design time definitely into the into an

1102
00:56:50,510 --> 00:56:58,430
option of doing our design time so the

1103
00:56:54,710 --> 00:56:59,840
problems that we're solving so we're

1104
00:56:58,430 --> 00:57:02,899
going to solve some of things we also

1105
00:56:59,840 --> 00:57:04,760
want to go to version more complete

1106
00:57:02,900 --> 00:57:06,740
schemas rather than version single

1107
00:57:04,760 --> 00:57:08,990
modules we want to go to version schemas

1108
00:57:06,740 --> 00:57:12,049
or set some modules together and one of

1109
00:57:08,990 --> 00:57:15,439
the main aims here is that today you

1110
00:57:12,050 --> 00:57:17,030
look at ITF or open config there's many

1111
00:57:15,440 --> 00:57:21,620
different yang modules for different

1112
00:57:17,030 --> 00:57:23,270
features and different protocols and

1113
00:57:21,620 --> 00:57:25,580
each of those can evolve separately

1114
00:57:23,270 --> 00:57:27,440
which means that vendors may choose to

1115
00:57:25,580 --> 00:57:29,930
implement different versions of those

1116
00:57:27,440 --> 00:57:32,810
models in might implement version two of

1117
00:57:29,930 --> 00:57:35,270
OSPF and version 1 of is-is-is is

1118
00:57:32,810 --> 00:57:38,000
another vendor might then implement

1119
00:57:35,270 --> 00:57:40,520
version 1 language all of OSPF in

1120
00:57:38,000 --> 00:57:42,410
version 2 of is is it becomes quite hard

1121
00:57:40,520 --> 00:57:45,620
to then get good interoperability

1122
00:57:42,410 --> 00:57:48,020
between clients and vendors if vendors

1123
00:57:45,620 --> 00:57:50,240
are each choosing quite discrete set of

1124
00:57:48,020 --> 00:57:51,410
modules they're implementing it's the

1125
00:57:50,240 --> 00:57:54,200
idea of yang packaging

1126
00:57:51,410 --> 00:57:56,379
is by combining those together into more

1127
00:57:54,200 --> 00:57:59,930
complex schema your the opportunity of

1128
00:57:56,380 --> 00:58:05,000
putting more linear development flow in

1129
00:57:59,930 --> 00:58:07,038
terms of how these things evolve other

1130
00:58:05,000 --> 00:58:09,500
things as I said that yang package is a

1131
00:58:07,039 --> 00:58:11,990
hierarchical scheme is managed through

1132
00:58:09,500 --> 00:58:14,240
might be made up of tens or hundreds of

1133
00:58:11,990 --> 00:58:15,828
modules managing these is a flat list it

1134
00:58:14,240 --> 00:58:17,089
becomes on wealthy it becomes hard for

1135
00:58:15,829 --> 00:58:18,740
you to understand the stuff that you

1136
00:58:17,089 --> 00:58:20,960
care about and what's what you don't

1137
00:58:18,740 --> 00:58:22,368
care about so again the idea with young

1138
00:58:20,960 --> 00:58:24,490
packages is that you move the

1139
00:58:22,369 --> 00:58:27,530
conformance up to a higher layer

1140
00:58:24,490 --> 00:58:32,450
structure and you can use that and check

1141
00:58:27,530 --> 00:58:33,920
that for example do you support ITF LTP

1142
00:58:32,450 --> 00:58:35,808
n and that's what you're coding your

1143
00:58:33,920 --> 00:58:38,510
client against and that your client to

1144
00:58:35,809 --> 00:58:40,819
expect and make your life easier in that

1145
00:58:38,510 --> 00:58:43,549
way for clients and the last one I

1146
00:58:40,819 --> 00:58:46,430
mentioned before was the the ability to

1147
00:58:43,549 --> 00:58:48,349
do or a second last one is to avoid

1148
00:58:46,430 --> 00:58:50,000
having to download these schemas on the

1149
00:58:48,349 --> 00:58:53,059
fly to rather having to connect every

1150
00:58:50,000 --> 00:58:54,890
device download the full set of and yang

1151
00:58:53,059 --> 00:58:56,450
will either assuming you know what it's

1152
00:58:54,890 --> 00:58:59,029
going to be doing or downloading a full

1153
00:58:56,450 --> 00:59:00,890
schema from yang library and then

1154
00:58:59,029 --> 00:59:02,390
checking it it matches what you want all

1155
00:59:00,890 --> 00:59:03,710
the features are implemented as you

1156
00:59:02,390 --> 00:59:04,308
expect all the deviations what you

1157
00:59:03,710 --> 00:59:07,579
expect

1158
00:59:04,309 --> 00:59:09,680
by having these schemas defined off the

1159
00:59:07,579 --> 00:59:12,710
box and available as instance data files

1160
00:59:09,680 --> 00:59:15,649
you can move that work off to be done

1161
00:59:12,710 --> 00:59:17,839
than once so when your client connects

1162
00:59:15,650 --> 00:59:20,660
the route or it says okay I'm expecting

1163
00:59:17,839 --> 00:59:22,940
this device to be running package that

1164
00:59:20,660 --> 00:59:24,859
no vendor at version 2.7 or whatever

1165
00:59:22,940 --> 00:59:26,779
happens to be and then you can check

1166
00:59:24,859 --> 00:59:29,750
that yes actually that device is running

1167
00:59:26,779 --> 00:59:31,279
a package 2.7 that you expect and that's

1168
00:59:29,750 --> 00:59:33,020
fine the scheme is consistent or maybe

1169
00:59:31,279 --> 00:59:34,940
it's running to your aides and it's

1170
00:59:33,020 --> 00:59:36,470
backwards compatible or 2 7 1 it's

1171
00:59:34,940 --> 00:59:39,859
backwards compatible either way it works

1172
00:59:36,470 --> 00:59:43,129
and then the last use of yank packages

1173
00:59:39,859 --> 00:59:45,529
is to give more flexibility in terms of

1174
00:59:43,130 --> 00:59:48,380
schema selection and the principle idea

1175
00:59:45,529 --> 00:59:50,150
here is that given that we're now

1176
00:59:48,380 --> 00:59:52,490
allowing non backwards compatible

1177
00:59:50,150 --> 00:59:55,640
changes in modules as soon as you allow

1178
00:59:52,490 --> 00:59:57,799
those and our service to be to using

1179
00:59:55,640 --> 00:59:58,940
those then you start to break clients

1180
00:59:57,799 --> 01:00:02,200
when you have those numbers collateral

1181
00:59:58,940 --> 01:00:04,400
changes and this gives you one method of

1182
01:00:02,200 --> 01:00:04,759
potentially supporting clients that you

1183
01:00:04,400 --> 01:00:07,880
could

1184
01:00:04,760 --> 01:00:09,920
bought our versions of the schema so you

1185
01:00:07,880 --> 01:00:11,390
don't break those clients and whereas

1186
01:00:09,920 --> 01:00:14,780
other clients could connect to the new

1187
01:00:11,390 --> 01:00:16,040
version schema so there's be Joe we talk

1188
01:00:14,780 --> 01:00:18,290
a bit more about the schema version

1189
01:00:16,040 --> 01:00:19,790
selection draft and what it achieves but

1190
01:00:18,290 --> 01:00:24,890
it's making use of Yank packages to

1191
01:00:19,790 --> 01:00:27,710
achieve that so an example here I've got

1192
01:00:24,890 --> 01:00:30,500
an example of ran riot of Network

1193
01:00:27,710 --> 01:00:33,950
instance a device package and here it's

1194
01:00:30,500 --> 01:00:35,450
listing in this package three modules

1195
01:00:33,950 --> 01:00:37,279
that it implements and a couple of

1196
01:00:35,450 --> 01:00:39,109
import only modules so that's listed in

1197
01:00:37,280 --> 01:00:41,540
that package definition and the

1198
01:00:39,110 --> 01:00:43,160
definition includes metadata about the

1199
01:00:41,540 --> 01:00:45,860
package like where'd you find the

1200
01:00:43,160 --> 01:00:48,440
package where you find the modules what

1201
01:00:45,860 --> 01:00:51,350
features are mandatory so what features

1202
01:00:48,440 --> 01:00:53,800
are you required to implement to say you

1203
01:00:51,350 --> 01:00:56,540
conformed to this package definition

1204
01:00:53,800 --> 01:00:57,950
it also can import packages there's not

1205
01:00:56,540 --> 01:01:01,310
shown in this example shown in the next

1206
01:00:57,950 --> 01:01:03,379
one and it when it implements modules in

1207
01:01:01,310 --> 01:01:06,080
implements specific versions or

1208
01:01:03,380 --> 01:01:08,920
revisions so the idea here is that a

1209
01:01:06,080 --> 01:01:12,110
package defines an exact schema so

1210
01:01:08,920 --> 01:01:15,770
whenever you download a package at a

1211
01:01:12,110 --> 01:01:18,830
particular version you know exactly what

1212
01:01:15,770 --> 01:01:20,300
every single data node looks like it's

1213
01:01:18,830 --> 01:01:23,930
the intention if you know what features

1214
01:01:20,300 --> 01:01:26,270
are enabled it allows import only

1215
01:01:23,930 --> 01:01:28,490
modules versions revisions and then the

1216
01:01:26,270 --> 01:01:30,830
things have been added here more

1217
01:01:28,490 --> 01:01:33,290
recently our check sums that allows you

1218
01:01:30,830 --> 01:01:34,790
to know without necessarily downloading

1219
01:01:33,290 --> 01:01:38,300
on the assets that you've got the

1220
01:01:34,790 --> 01:01:39,770
correct copy of them and also the other

1221
01:01:38,300 --> 01:01:41,960
thing that's been refined more recently

1222
01:01:39,770 --> 01:01:44,330
is more works been done on the import

1223
01:01:41,960 --> 01:01:46,460
conflict resolution and the basic

1224
01:01:44,330 --> 01:01:48,860
principle that's being applied here is

1225
01:01:46,460 --> 01:01:51,730
that you resolve any conflicts

1226
01:01:48,860 --> 01:01:54,200
explicitly so the conflicts might arise

1227
01:01:51,730 --> 01:01:56,390
when you're building up packages from

1228
01:01:54,200 --> 01:01:58,279
other sub packages and they are

1229
01:01:56,390 --> 01:02:00,170
implementing or importing different

1230
01:01:58,280 --> 01:02:02,120
versions of modules so when you get

1231
01:02:00,170 --> 01:02:05,090
those conflicts and the point that you

1232
01:02:02,120 --> 01:02:06,980
are when those occur by importing those

1233
01:02:05,090 --> 01:02:09,080
two two packages you have to resolve

1234
01:02:06,980 --> 01:02:10,790
explicit that you say I'm going to

1235
01:02:09,080 --> 01:02:14,860
choose to use this particular version of

1236
01:02:10,790 --> 01:02:14,860
the module so you resolve it in that way

1237
01:02:15,940 --> 01:02:20,349
second example here is a basic routing

1238
01:02:18,249 --> 01:02:22,209
package and that's just basically to

1239
01:02:20,349 --> 01:02:24,999
show how this works in terms of this

1240
01:02:22,210 --> 01:02:26,859
package the basic routing package has a

1241
01:02:24,999 --> 01:02:28,859
dependency that includes a particular

1242
01:02:26,859 --> 01:02:31,269
version that network network a device

1243
01:02:28,859 --> 01:02:33,400
package so all the modules that were

1244
01:02:31,269 --> 01:02:35,680
defined as part of that network device

1245
01:02:33,400 --> 01:02:37,990
package are effectively being used by

1246
01:02:35,680 --> 01:02:40,899
this and then it says which particular

1247
01:02:37,990 --> 01:02:42,999
module implements on top of that and it

1248
01:02:40,900 --> 01:02:46,420
lists more import only modules as well

1249
01:02:42,999 --> 01:02:48,640
that effectively uses so and this is the

1250
01:02:46,420 --> 01:02:50,829
case that if it was including multiple

1251
01:02:48,640 --> 01:02:52,930
packages and they happen to implement

1252
01:02:50,829 --> 01:02:55,960
different versions so if you for example

1253
01:02:52,930 --> 01:02:58,690
have a case where one of the package was

1254
01:02:55,960 --> 01:03:01,749
implementing BGP at version X and

1255
01:02:58,690 --> 01:03:04,599
another one was implementing BGP version

1256
01:03:01,749 --> 01:03:06,848
X plus one you say when you pull those

1257
01:03:04,599 --> 01:03:11,259
two in what does that combined package

1258
01:03:06,849 --> 01:03:13,539
effectively do what does it use and as

1259
01:03:11,259 --> 01:03:15,309
it says here any version conflict change

1260
01:03:13,539 --> 01:03:16,900
must be explicit result so you always

1261
01:03:15,309 --> 01:03:19,239
want to be very clear when you're

1262
01:03:16,900 --> 01:03:20,980
reading the package definition whether

1263
01:03:19,239 --> 01:03:23,109
or not you are implementing those

1264
01:03:20,980 --> 01:03:28,180
packages you pull them in faithfully or

1265
01:03:23,109 --> 01:03:30,369
whether there being any changed so now

1266
01:03:28,180 --> 01:03:33,519
going over the main changes and since oh

1267
01:03:30,369 --> 01:03:34,930
one there's been quite a lot so the ones

1268
01:03:33,519 --> 01:03:37,019
I've put with an asterisk down there the

1269
01:03:34,930 --> 01:03:39,489
ones I talked about in more detail so

1270
01:03:37,019 --> 01:03:41,769
some of the some of the train changes a

1271
01:03:39,489 --> 01:03:46,539
fairly and formulaic that the fact that

1272
01:03:41,769 --> 01:03:48,368
the work on yang module updates moved

1273
01:03:46,539 --> 01:03:50,589
from using semantic version numbers all

1274
01:03:48,369 --> 01:03:52,569
the times using revision labels and

1275
01:03:50,589 --> 01:03:55,650
semantic version numbers optionally

1276
01:03:52,569 --> 01:03:58,390
applies to packages as well so if you

1277
01:03:55,650 --> 01:03:59,950
your company wanted to use just revision

1278
01:03:58,390 --> 01:04:02,558
labels and didn't want to use yang

1279
01:03:59,950 --> 01:04:05,140
cember then it would use it can also

1280
01:04:02,559 --> 01:04:06,880
define packages using revision labels

1281
01:04:05,140 --> 01:04:09,400
with a similar versioning scheme in

1282
01:04:06,880 --> 01:04:13,239
terms of how the modular version so this

1283
01:04:09,400 --> 01:04:15,369
supports both as support for check sums

1284
01:04:13,239 --> 01:04:17,680
I'll talk about in a bit more detail as

1285
01:04:15,369 --> 01:04:19,390
support for locally scoped packages so

1286
01:04:17,680 --> 01:04:21,819
previously all the package definitions

1287
01:04:19,390 --> 01:04:23,589
were globally scoped available off the

1288
01:04:21,819 --> 01:04:26,079
box this defines packages that are

1289
01:04:23,589 --> 01:04:28,890
scoped to a single device I'll explain

1290
01:04:26,079 --> 01:04:30,720
why they required and why they

1291
01:04:28,890 --> 01:04:34,020
this improves the performance that I'll

1292
01:04:30,720 --> 01:04:35,790
talk through as well and the use of

1293
01:04:34,020 --> 01:04:39,930
packages as definitions of instance data

1294
01:04:35,790 --> 01:04:41,640
file schema so so again I'll talk to

1295
01:04:39,930 --> 01:04:44,730
this bit more detail but this isn't just

1296
01:04:41,640 --> 01:04:47,098
about using a package putting a package

1297
01:04:44,730 --> 01:04:49,560
in tune into an instance data file it's

1298
01:04:47,099 --> 01:04:51,839
using a yang package as the definition

1299
01:04:49,560 --> 01:04:53,190
of a schema for an yang instance data

1300
01:04:51,839 --> 01:04:55,380
file so once you've got things that

1301
01:04:53,190 --> 01:04:58,020
define schema that's one natural usage

1302
01:04:55,380 --> 01:05:01,050
of them and then finally there's been

1303
01:04:58,020 --> 01:05:03,599
quite a lot of minor changes and cleanup

1304
01:05:01,050 --> 01:05:05,700
to the models and the draft and sort of

1305
01:05:03,599 --> 01:05:10,830
reshaping it a bit so it's had very

1306
01:05:05,700 --> 01:05:13,680
significant work packaging module check

1307
01:05:10,830 --> 01:05:16,259
sums so this was a request that came in

1308
01:05:13,680 --> 01:05:18,180
to effectively have some way of knowing

1309
01:05:16,260 --> 01:05:21,300
that the yang modules that you're

1310
01:05:18,180 --> 01:05:24,359
referencing by URL or the packages

1311
01:05:21,300 --> 01:05:26,010
you're referencing value RL are actually

1312
01:05:24,359 --> 01:05:28,560
what you expect them to be so the

1313
01:05:26,010 --> 01:05:32,310
solution that we've added here is to use

1314
01:05:28,560 --> 01:05:35,160
a sha-256 hash of either the module or

1315
01:05:32,310 --> 01:05:37,109
the package definitions and to avoid you

1316
01:05:35,160 --> 01:05:38,970
having to download them each time so

1317
01:05:37,109 --> 01:05:41,190
these check sums are written into the

1318
01:05:38,970 --> 01:05:42,598
package definition files when you when

1319
01:05:41,190 --> 01:05:45,180
you reference a package you can

1320
01:05:42,599 --> 01:05:48,060
optionally include the sha-256 checksum

1321
01:05:45,180 --> 01:05:49,980
and and likewise with the modules again

1322
01:05:48,060 --> 01:05:52,380
when you provide a URL you can also

1323
01:05:49,980 --> 01:05:54,720
provide a checksum and so that means

1324
01:05:52,380 --> 01:05:57,890
that with you obviously if you've got

1325
01:05:54,720 --> 01:05:59,939
those things locally within your your

1326
01:05:57,890 --> 01:06:01,410
processor or server you may not need to

1327
01:05:59,940 --> 01:06:02,670
download these things again you can be

1328
01:06:01,410 --> 01:06:06,089
sure that they match what you expect

1329
01:06:02,670 --> 01:06:08,160
them to be in the case of modules the

1330
01:06:06,089 --> 01:06:10,230
checksum is calculated on the yang file

1331
01:06:08,160 --> 01:06:12,390
so effectively this means that it

1332
01:06:10,230 --> 01:06:14,910
includes whitespace changes and the

1333
01:06:12,390 --> 01:06:18,000
expectation here is that all instances

1334
01:06:14,910 --> 01:06:20,160
would match if you had a URL and you can

1335
01:06:18,000 --> 01:06:22,349
find it from various places and for

1336
01:06:20,160 --> 01:06:24,180
packages the checksum is calculated on

1337
01:06:22,349 --> 01:06:26,310
the yang instance data file so the same

1338
01:06:24,180 --> 01:06:28,109
thing and again that would include any

1339
01:06:26,310 --> 01:06:29,730
whitespace changes and it include the

1340
01:06:28,109 --> 01:06:32,430
metadata information at the top of that

1341
01:06:29,730 --> 01:06:34,770
package yes you actually have something

1342
01:06:32,430 --> 01:06:40,649
from jabber first okay so this is from

1343
01:06:34,770 --> 01:06:41,880
Martin is this meaning module checksum

1344
01:06:40,650 --> 01:06:49,710
because we don't trust the

1345
01:06:41,880 --> 01:06:52,380
revision date or label it's because we

1346
01:06:49,710 --> 01:06:55,500
don't trust the URL so in the package

1347
01:06:52,380 --> 01:06:56,670
definition you're providing a URL to

1348
01:06:55,500 --> 01:06:58,650
where you can go and find that package

1349
01:06:56,670 --> 01:07:00,570
and so you want to check what you

1350
01:06:58,650 --> 01:07:02,610
actually download from that URL max

1351
01:07:00,570 --> 01:07:04,740
where you expect it to be that's one of

1352
01:07:02,610 --> 01:07:07,530
the cases the other case that is useful

1353
01:07:04,740 --> 01:07:13,319
is that again when a device says I'm

1354
01:07:07,530 --> 01:07:15,240
using the package ITF at 2.00 that

1355
01:07:13,320 --> 01:07:17,550
actually is the checksum of that package

1356
01:07:15,240 --> 01:07:19,859
so when again is a client you say yes

1357
01:07:17,550 --> 01:07:21,810
it's what I expected to be and I can

1358
01:07:19,860 --> 01:07:26,490
check the integrity of that that's

1359
01:07:21,810 --> 01:07:30,180
opposed by the hood I wonder how stable

1360
01:07:26,490 --> 01:07:33,629
this module checksum checksum is because

1361
01:07:30,180 --> 01:07:36,870
modules are often extracted from our FCS

1362
01:07:33,630 --> 01:07:39,840
and different extracting tools just add

1363
01:07:36,870 --> 01:07:42,480
or remove different amount of white

1364
01:07:39,840 --> 01:07:47,220
white space so I think it would be

1365
01:07:42,480 --> 01:07:53,250
useful maybe to to to transform the end

1366
01:07:47,220 --> 01:07:55,319
module to some canonical white space and

1367
01:07:53,250 --> 01:07:59,430
then computer checksum because otherwise

1368
01:07:55,320 --> 01:08:01,290
it won't be reliable possibly and adds

1369
01:07:59,430 --> 01:08:03,569
complexity the one I was really hoping

1370
01:08:01,290 --> 01:08:06,210
to bind it to is the fact that this has

1371
01:08:03,570 --> 01:08:09,480
URLs at list where those modules could

1372
01:08:06,210 --> 01:08:11,220
be found so really is the key for me was

1373
01:08:09,480 --> 01:08:13,740
trying to bind that the files that are

1374
01:08:11,220 --> 01:08:15,660
downloaded from those URLs match the

1375
01:08:13,740 --> 01:08:23,460
checksum with them so whether that's

1376
01:08:15,660 --> 01:08:25,069
still required I don't know so next the

1377
01:08:23,460 --> 01:08:27,000
next change is the relationship between

1378
01:08:25,069 --> 01:08:30,450
packages and schema so talking about

1379
01:08:27,000 --> 01:08:31,830
local packages the the aim in terms of

1380
01:08:30,450 --> 01:08:34,170
what this works trying to do is for each

1381
01:08:31,830 --> 01:08:37,470
data score datastore schema to be fine

1382
01:08:34,170 --> 01:08:39,180
by one package so you have a one package

1383
01:08:37,470 --> 01:08:41,310
definition for that datastore schema

1384
01:08:39,180 --> 01:08:43,380
that makes it very easy for the device

1385
01:08:41,310 --> 01:08:47,130
to advertise for each of the data source

1386
01:08:43,380 --> 01:08:49,350
schema what the package is that defines

1387
01:08:47,130 --> 01:08:53,160
that schema and it's easy for clients to

1388
01:08:49,350 --> 01:08:55,100
know that off the box so an ideally like

1389
01:08:53,160 --> 01:08:57,170
just really to be useful you want names

1390
01:08:55,100 --> 01:08:59,300
to be available offline and you want it

1391
01:08:57,170 --> 01:09:00,800
really to be available design time but

1392
01:08:59,300 --> 01:09:04,220
there are cases where that becomes quite

1393
01:09:00,800 --> 01:09:06,770
tricky so one of the cases is that your

1394
01:09:04,220 --> 01:09:08,750
software itself might be made up of

1395
01:09:06,770 --> 01:09:10,609
different software components that could

1396
01:09:08,750 --> 01:09:13,100
be optionally installed and added or

1397
01:09:10,609 --> 01:09:15,410
removed and hence the packages that you

1398
01:09:13,100 --> 01:09:17,270
can generate on the device to represent

1399
01:09:15,410 --> 01:09:19,550
the combination of software components

1400
01:09:17,270 --> 01:09:21,920
that we install that point in time can

1401
01:09:19,550 --> 01:09:24,529
change and be more dynamic so in this

1402
01:09:21,920 --> 01:09:26,840
case you wouldn't expect to be able to

1403
01:09:24,529 --> 01:09:29,540
define offline packages for all of those

1404
01:09:26,840 --> 01:09:32,630
things it might be helpful to define a

1405
01:09:29,540 --> 01:09:35,420
local package that device that says okay

1406
01:09:32,630 --> 01:09:37,609
I'm installing these sub packages and

1407
01:09:35,420 --> 01:09:39,560
it's those sub packages that each are

1408
01:09:37,609 --> 01:09:41,240
available off the box and the local

1409
01:09:39,560 --> 01:09:42,920
package is just the top-level definition

1410
01:09:41,240 --> 01:09:46,849
to pull those all together and combine

1411
01:09:42,920 --> 01:09:48,410
them similarly if you apply software bug

1412
01:09:46,850 --> 01:09:50,570
fixes that change the scheme and that's

1413
01:09:48,410 --> 01:09:53,479
another case that we think where you

1414
01:09:50,569 --> 01:09:55,190
might deploy particularly an advertised

1415
01:09:53,479 --> 01:09:56,599
particular package for a given software

1416
01:09:55,190 --> 01:09:58,549
release and say this is the standard

1417
01:09:56,600 --> 01:10:00,290
version of software but if some bug

1418
01:09:58,550 --> 01:10:01,910
fixes have come along then the scheme

1419
01:10:00,290 --> 01:10:04,010
has been changed it doesn't no longer

1420
01:10:01,910 --> 01:10:05,990
quite reflects that what's been

1421
01:10:04,010 --> 01:10:08,120
advertised as the as the package with

1422
01:10:05,990 --> 01:10:11,000
that software and so you use a local

1423
01:10:08,120 --> 01:10:12,710
package to say actually it's that it's

1424
01:10:11,000 --> 01:10:14,270
the same as the package release of the

1425
01:10:12,710 --> 01:10:18,260
software but it's got these few changes

1426
01:10:14,270 --> 01:10:19,610
these two additions to that schema so we

1427
01:10:18,260 --> 01:10:21,260
have a couple of comments from jabber

1428
01:10:19,610 --> 01:10:27,559
really on the previous slide about

1429
01:10:21,260 --> 01:10:29,180
format you can suggest using XML as it

1430
01:10:27,560 --> 01:10:32,660
is lossless and he's saying that as a

1431
01:10:29,180 --> 01:10:35,750
contributor Martin is saying actually

1432
01:10:32,660 --> 01:10:41,450
the the new RFC text format non paged is

1433
01:10:35,750 --> 01:10:44,240
lossless for text lieu as Charis Walt

1434
01:10:41,450 --> 01:10:49,519
says whatever we decide should be in the

1435
01:10:44,240 --> 01:10:50,840
document yes and again I think well I

1436
01:10:49,520 --> 01:10:56,240
don't think they say she has to be sold

1437
01:10:50,840 --> 01:10:58,130
now before yes I think all these things

1438
01:10:56,240 --> 01:11:01,030
but yeah I'll take one board that makes

1439
01:10:58,130 --> 01:11:04,910
sense well I thank you Eric son in our

1440
01:11:01,030 --> 01:11:07,340
practice or it's only the question of

1441
01:11:04,910 --> 01:11:08,970
removing white space from the end of the

1442
01:11:07,340 --> 01:11:17,600
line which is a very simple

1443
01:11:08,970 --> 01:11:21,360
formation so we have one more from Ishod

1444
01:11:17,600 --> 01:11:24,030
art but RFC's are the aren't the only

1445
01:11:21,360 --> 01:11:26,059
source of yang if we care about it he

1446
01:11:24,030 --> 01:11:29,389
says it as I mean it reads is a

1447
01:11:26,060 --> 01:11:32,490
statement but there's a question mark so

1448
01:11:29,390 --> 01:11:34,770
I think that's true we want to make have

1449
01:11:32,490 --> 01:11:38,550
a solution that works no matter where

1450
01:11:34,770 --> 01:11:40,020
the module is defined yes that we can

1451
01:11:38,550 --> 01:11:42,810
compute the checks up in the same way

1452
01:11:40,020 --> 01:11:46,500
yep I want to be done in a simple way so

1453
01:11:42,810 --> 01:11:48,510
to be easy that you can to to get those

1454
01:11:46,500 --> 01:11:53,220
check sums but it really has to be

1455
01:11:48,510 --> 01:11:55,770
unambiguous whatever it is a great so I

1456
01:11:53,220 --> 01:11:57,570
think I've covered local packages I just

1457
01:11:55,770 --> 01:11:58,980
to get a notional I said to the end of

1458
01:11:57,570 --> 01:12:01,320
these in terms of the idea of local

1459
01:11:58,980 --> 01:12:03,269
packages the two key changes are that

1460
01:12:01,320 --> 01:12:05,280
the name of the package is no longer

1461
01:12:03,270 --> 01:12:07,410
global scope so everything in terms of

1462
01:12:05,280 --> 01:12:08,940
the other package definitions the idea

1463
01:12:07,410 --> 01:12:11,460
is that package name is effectively

1464
01:12:08,940 --> 01:12:14,219
globally scoped but here a local package

1465
01:12:11,460 --> 01:12:16,220
you the device could choose to define

1466
01:12:14,220 --> 01:12:18,960
its own name for that package that may

1467
01:12:16,220 --> 01:12:21,450
collide with that same package name on

1468
01:12:18,960 --> 01:12:23,340
another device effectively so that's one

1469
01:12:21,450 --> 01:12:24,870
change and the other one is the offline

1470
01:12:23,340 --> 01:12:26,610
definition may or may not be available

1471
01:12:24,870 --> 01:12:28,470
for the device may allow you to download

1472
01:12:26,610 --> 01:12:30,570
an instance data file containing an

1473
01:12:28,470 --> 01:12:32,730
offline definition perhaps but that's

1474
01:12:30,570 --> 01:12:35,040
not necessarily expected the idea really

1475
01:12:32,730 --> 01:12:36,900
is it's just a way of combining package

1476
01:12:35,040 --> 01:12:39,350
packages together at the top level if

1477
01:12:36,900 --> 01:12:39,349
required

1478
01:12:40,400 --> 01:12:46,650
so conformance improvements various

1479
01:12:44,820 --> 01:12:48,299
proofs we made one is that as I

1480
01:12:46,650 --> 01:12:51,000
mentioned earlier on that packages can

1481
01:12:48,300 --> 01:12:52,740
use revision labels or they can use sang

1482
01:12:51,000 --> 01:12:54,870
cember so that I think works quite

1483
01:12:52,740 --> 01:12:57,950
nicely and then there's been some more

1484
01:12:54,870 --> 01:13:00,900
explicit conformance in a few places

1485
01:12:57,950 --> 01:13:04,019
when package ii when a package

1486
01:13:00,900 --> 01:13:07,019
inclusions define both explicitly which

1487
01:13:04,020 --> 01:13:09,330
package version obviously you're

1488
01:13:07,020 --> 01:13:11,070
including but they also now state which

1489
01:13:09,330 --> 01:13:13,320
package versions they are replacing

1490
01:13:11,070 --> 01:13:16,040
explicitly so in that case where you're

1491
01:13:13,320 --> 01:13:19,920
combining two packages and you have to

1492
01:13:16,040 --> 01:13:21,390
choose two packages of the same version

1493
01:13:19,920 --> 01:13:22,440
through this sort of this dependency

1494
01:13:21,390 --> 01:13:24,390
tree you know

1495
01:13:22,440 --> 01:13:28,860
city state which ones you'll get getting

1496
01:13:24,390 --> 01:13:31,050
rid of whenever they collide and if one

1497
01:13:28,860 --> 01:13:34,380
of those included packages is modified

1498
01:13:31,050 --> 01:13:36,840
in an NBC way then you have a flag to

1499
01:13:34,380 --> 01:13:39,960
annotate that packaging point that is

1500
01:13:36,840 --> 01:13:42,120
included so the idea here is that when

1501
01:13:39,960 --> 01:13:43,560
you look at a package definition and you

1502
01:13:42,120 --> 01:13:46,050
look at all the packages that it

1503
01:13:43,560 --> 01:13:49,230
includes you should be able to know

1504
01:13:46,050 --> 01:13:51,540
whether or not the package faithfully

1505
01:13:49,230 --> 01:13:54,718
implements those included packages so if

1506
01:13:51,540 --> 01:13:57,480
you had a top-level vendor package that

1507
01:13:54,719 --> 01:13:59,390
included IHF routing a particular

1508
01:13:57,480 --> 01:14:01,830
version you'd have to clearly indicate

1509
01:13:59,390 --> 01:14:03,989
whether or not you faithfully implement

1510
01:14:01,830 --> 01:14:06,180
the ITF routing as defined by its

1511
01:14:03,989 --> 01:14:08,940
package definition or it's been modified

1512
01:14:06,180 --> 01:14:10,680
in an MVC way perhaps because you've got

1513
01:14:08,940 --> 01:14:12,210
some deviations or perhaps because

1514
01:14:10,680 --> 01:14:15,030
you've included some different versions

1515
01:14:12,210 --> 01:14:18,960
so the idea here is to try and make that

1516
01:14:15,030 --> 01:14:22,019
conformance easier for clients similarly

1517
01:14:18,960 --> 01:14:25,830
when you redefine the module inclusions

1518
01:14:22,020 --> 01:14:27,960
again the module revision you specify

1519
01:14:25,830 --> 01:14:30,510
which module revision you are either

1520
01:14:27,960 --> 01:14:33,719
implementing or import only and it also

1521
01:14:30,510 --> 01:14:35,460
specifies which revision or any

1522
01:14:33,719 --> 01:14:39,270
revisions of the module it's replacing

1523
01:14:35,460 --> 01:14:40,380
so the case where this is important we

1524
01:14:39,270 --> 01:14:42,420
had this sort of thing in the draft

1525
01:14:40,380 --> 01:14:44,219
before for the import only modules you

1526
01:14:42,420 --> 01:14:47,730
could say which ones you no longer

1527
01:14:44,219 --> 01:14:49,739
needed but now for the implemented

1528
01:14:47,730 --> 01:14:52,500
modules you can say I'm implementing

1529
01:14:49,739 --> 01:14:55,799
module version X and I'm also

1530
01:14:52,500 --> 01:14:57,960
effectively replacing other module

1531
01:14:55,800 --> 01:14:59,580
versions of Y so that that really

1532
01:14:57,960 --> 01:15:01,440
matters for like the import only case

1533
01:14:59,580 --> 01:15:03,120
where you want to say and they want to

1534
01:15:01,440 --> 01:15:07,589
have this dependency on an import only

1535
01:15:03,120 --> 01:15:13,260
module and so feedback on that would be

1536
01:15:07,590 --> 01:15:14,880
very useful on what we think packages is

1537
01:15:13,260 --> 01:15:16,350
schema definition for instance data

1538
01:15:14,880 --> 01:15:20,370
document so this also goes back a little

1539
01:15:16,350 --> 01:15:22,050
bit to what balázs was presenting on the

1540
01:15:20,370 --> 01:15:23,880
idea of packages is that they define a

1541
01:15:22,050 --> 01:15:25,880
yang schema so they're meant to be a

1542
01:15:23,880 --> 01:15:28,020
canonical representation of yang schema

1543
01:15:25,880 --> 01:15:30,810
instance data documents obviously have a

1544
01:15:28,020 --> 01:15:33,360
schemer associated with them packages I

1545
01:15:30,810 --> 01:15:35,489
think would be a good way of associating

1546
01:15:33,360 --> 01:15:36,969
a schema with an instance data document

1547
01:15:35,489 --> 01:15:39,250
the reason I think it's good

1548
01:15:36,970 --> 01:15:40,750
is because the idea is that these

1549
01:15:39,250 --> 01:15:44,590
package names are globally globally

1550
01:15:40,750 --> 01:15:46,390
scoped and I have revision numbers and

1551
01:15:44,590 --> 01:15:47,950
you have a checksum associated with them

1552
01:15:46,390 --> 01:15:50,170
so you need relatively little

1553
01:15:47,950 --> 01:15:51,519
information to guarantee that you get

1554
01:15:50,170 --> 01:15:55,690
the right schema and it's what you

1555
01:15:51,520 --> 01:15:57,970
expect it to be the one thing that needs

1556
01:15:55,690 --> 01:16:02,019
to be resolved with that though is sort

1557
01:15:57,970 --> 01:16:04,770
of like the bootstrap scenario so if you

1558
01:16:02,020 --> 01:16:07,300
say you're referencing up to a package

1559
01:16:04,770 --> 01:16:09,730
if you're saying the schema for your

1560
01:16:07,300 --> 01:16:12,460
particular instance data document refers

1561
01:16:09,730 --> 01:16:14,230
to a yang package well that yang package

1562
01:16:12,460 --> 01:16:16,780
itself is defined an instance data

1563
01:16:14,230 --> 01:16:19,000
document what does it use as its schema

1564
01:16:16,780 --> 01:16:21,700
is that something that it then has

1565
01:16:19,000 --> 01:16:23,650
another reference to a another package

1566
01:16:21,700 --> 01:16:25,950
or a module set or does it is just hard

1567
01:16:23,650 --> 01:16:28,719
coded that the instance data library

1568
01:16:25,950 --> 01:16:29,590
understands the instance data documents

1569
01:16:28,720 --> 01:16:31,270
Beast

1570
01:16:29,590 --> 01:16:33,640
to understand packages as a native

1571
01:16:31,270 --> 01:16:35,830
construct or not so that's one area I

1572
01:16:33,640 --> 01:16:37,810
think that needs a little bit of worker

1573
01:16:35,830 --> 01:16:44,769
refinement to make sure that doesn't get

1574
01:16:37,810 --> 01:16:47,740
too complicated so that covers the main

1575
01:16:44,770 --> 01:16:49,150
changes that we've made and then I'm

1576
01:16:47,740 --> 01:16:51,969
also going to cover sort of the open

1577
01:16:49,150 --> 01:16:53,290
issues and this isn't exhaustive there's

1578
01:16:51,970 --> 01:16:54,850
some minor things we're still discussing

1579
01:16:53,290 --> 01:16:58,420
but these are the ones I think are

1580
01:16:54,850 --> 01:17:00,120
particularly interesting and they'd most

1581
01:16:58,420 --> 01:17:04,210
interested in feedback on these things

1582
01:17:00,120 --> 01:17:06,460
so the first one is where the packages

1583
01:17:04,210 --> 01:17:08,500
should use a different structure for the

1584
01:17:06,460 --> 01:17:11,290
instance data file representation versus

1585
01:17:08,500 --> 01:17:15,250
what you get out of the device eg from

1586
01:17:11,290 --> 01:17:17,410
yang library or or similarly the current

1587
01:17:15,250 --> 01:17:20,350
approach is sort of try to optimize for

1588
01:17:17,410 --> 01:17:22,840
readability in the file and optimized to

1589
01:17:20,350 --> 01:17:25,960
minimize data transfer from the device

1590
01:17:22,840 --> 01:17:29,830
so to that effect the package

1591
01:17:25,960 --> 01:17:31,720
definitions are on the device reused the

1592
01:17:29,830 --> 01:17:34,120
module sets from the yang library so

1593
01:17:31,720 --> 01:17:36,460
rather than having affecting the same

1594
01:17:34,120 --> 01:17:39,849
equivalent information in a separate

1595
01:17:36,460 --> 01:17:41,530
tree for the Yang pakka geez they just

1596
01:17:39,850 --> 01:17:44,140
got references back to the angle library

1597
01:17:41,530 --> 01:17:45,790
module sets the idea here being that you

1598
01:17:44,140 --> 01:17:48,790
could potentially allow those same word

1599
01:17:45,790 --> 01:17:50,470
row sets to be used define to define the

1600
01:17:48,790 --> 01:17:52,300
young library schema and also you

1601
01:17:50,470 --> 01:17:56,350
packages so clients have the option

1602
01:17:52,300 --> 01:17:59,650
using both so that has some advantages

1603
01:17:56,350 --> 01:18:01,900
in terms of affected that minimizing the

1604
01:17:59,650 --> 01:18:03,879
data there's a disadvantage of doing

1605
01:18:01,900 --> 01:18:05,950
this though which is the sort of more

1606
01:18:03,880 --> 01:18:07,180
complexity in structures and the fact

1607
01:18:05,950 --> 01:18:09,280
that the structure is different differ

1608
01:18:07,180 --> 01:18:10,900
so one of the bits of feedback from

1609
01:18:09,280 --> 01:18:13,900
balázs was it'd be nice to use the same

1610
01:18:10,900 --> 01:18:15,460
structure for both and I think there's

1611
01:18:13,900 --> 01:18:17,080
obviously two ways you could do that one

1612
01:18:15,460 --> 01:18:19,240
is you could try and augment yang

1613
01:18:17,080 --> 01:18:21,850
library with the packages information

1614
01:18:19,240 --> 01:18:23,590
I'm not sure that that easily works and

1615
01:18:21,850 --> 01:18:25,390
I think it fundamentally the

1616
01:18:23,590 --> 01:18:28,000
hierarchical nature of yang packages I

1617
01:18:25,390 --> 01:18:30,310
think with them break the yang library I

1618
01:18:28,000 --> 01:18:31,810
don't think you can easily do that so I

1619
01:18:30,310 --> 01:18:34,270
think if we wanted to use the same

1620
01:18:31,810 --> 01:18:37,120
structure I would instead go for the

1621
01:18:34,270 --> 01:18:39,970
format is used in the instance data

1622
01:18:37,120 --> 01:18:42,130
document and use that on the devices as

1623
01:18:39,970 --> 01:18:45,550
well so you'd have more repetition of

1624
01:18:42,130 --> 01:18:47,280
this data in terms of of defining the

1625
01:18:45,550 --> 01:18:49,210
modules that comprise the packages

1626
01:18:47,280 --> 01:18:51,700
however I'm not sure that's really a

1627
01:18:49,210 --> 01:18:53,440
problem because the intentional yang

1628
01:18:51,700 --> 01:18:54,820
packaging is is that clients shouldn't

1629
01:18:53,440 --> 01:18:56,320
have to download this information is

1630
01:18:54,820 --> 01:18:58,780
there if they need it and they want it

1631
01:18:56,320 --> 01:19:00,490
but the idea here is that you're using

1632
01:18:58,780 --> 01:19:02,500
yang packages you know what they are off

1633
01:19:00,490 --> 01:19:04,090
the box and you avoid having to download

1634
01:19:02,500 --> 01:19:06,520
this information that's that's one of

1635
01:19:04,090 --> 01:19:09,190
the key aims here so the fact there is a

1636
01:19:06,520 --> 01:19:10,780
hypothetical duplication of that

1637
01:19:09,190 --> 01:19:16,059
operational data may not matter in

1638
01:19:10,780 --> 01:19:18,219
reality and so currently my I'm leaning

1639
01:19:16,060 --> 01:19:20,080
towards changing this but I think this

1640
01:19:18,220 --> 01:19:23,440
would be something again that is one of

1641
01:19:20,080 --> 01:19:25,000
those issues that we need to sort out it

1642
01:19:23,440 --> 01:19:26,500
doesn't have to be done again before the

1643
01:19:25,000 --> 01:19:27,430
working before it's doctored by the

1644
01:19:26,500 --> 01:19:29,050
working group it could be done

1645
01:19:27,430 --> 01:19:30,940
afterwards it's not a significant an

1646
01:19:29,050 --> 01:19:33,550
issue but it's something that needs to

1647
01:19:30,940 --> 01:19:35,940
be considered feedback on that is

1648
01:19:33,550 --> 01:19:35,940
welcome

1649
01:19:40,000 --> 01:19:43,810
another on this that that we've

1650
01:19:41,860 --> 01:19:46,719
considered talked about is the yang

1651
01:19:43,810 --> 01:19:50,710
library definition requires that module

1652
01:19:46,720 --> 01:19:54,160
name spaces be specified in terms of the

1653
01:19:50,710 --> 01:19:56,050
yang package definitions they allow the

1654
01:19:54,160 --> 01:19:58,480
module name space we specified if you

1655
01:19:56,050 --> 01:20:00,370
want to so in terms of the yang

1656
01:19:58,480 --> 01:20:01,839
structures being used it's it's included

1657
01:20:00,370 --> 01:20:05,019
there but it's optional rather than

1658
01:20:01,840 --> 01:20:08,500
mandatory and the idea here is I think

1659
01:20:05,020 --> 01:20:10,150
that that with the JSON encoding

1660
01:20:08,500 --> 01:20:11,980
effectively is almost moved to the point

1661
01:20:10,150 --> 01:20:15,700
that the module names are globally

1662
01:20:11,980 --> 01:20:17,860
unique anyway they identify the data of

1663
01:20:15,700 --> 01:20:19,960
the namespace so I'm not sure whether

1664
01:20:17,860 --> 01:20:23,230
the XML namespace is still that useful

1665
01:20:19,960 --> 01:20:25,660
anymore for these things so I think in

1666
01:20:23,230 --> 01:20:28,599
the module name the region label path

1667
01:20:25,660 --> 01:20:30,820
and checksum as effectively sufficient

1668
01:20:28,600 --> 01:20:32,680
and by path or II mean like the URIs but

1669
01:20:30,820 --> 01:20:34,630
you can fix these things from a

1670
01:20:32,680 --> 01:20:36,460
sufficient to go to identify to pull

1671
01:20:34,630 --> 01:20:37,930
these things down and if you need the

1672
01:20:36,460 --> 01:20:40,600
namespace you can get that out of the

1673
01:20:37,930 --> 01:20:42,340
module if you want it but at the moment

1674
01:20:40,600 --> 01:20:43,780
that proposes to keep the namespace

1675
01:20:42,340 --> 01:20:45,700
definition allow it to be specified for

1676
01:20:43,780 --> 01:20:49,630
people that want to but I'm not sure

1677
01:20:45,700 --> 01:20:50,019
it's actually needed again comments on

1678
01:20:49,630 --> 01:20:56,740
that

1679
01:20:50,020 --> 01:20:58,930
you sure welcome this one is so talking

1680
01:20:56,740 --> 01:21:01,059
about the checksum so I was explaining

1681
01:20:58,930 --> 01:21:03,700
how they're used so this question here

1682
01:21:01,060 --> 01:21:08,140
as in the examples in the draft I think

1683
01:21:03,700 --> 01:21:10,830
use the full sha-256 checksum which is

1684
01:21:08,140 --> 01:21:13,810
64 characters long I think that's right

1685
01:21:10,830 --> 01:21:16,330
so these are quite long and vabase in

1686
01:21:13,810 --> 01:21:17,860
the files so one thing I was thinking

1687
01:21:16,330 --> 01:21:20,140
about was rather than using the full

1688
01:21:17,860 --> 01:21:22,929
sha-256 checksum you could allow

1689
01:21:20,140 --> 01:21:25,660
prefixes to be specified in the same way

1690
01:21:22,930 --> 01:21:28,480
that gets allows you to use prefixes of

1691
01:21:25,660 --> 01:21:30,580
the sha-256 to identify the particular

1692
01:21:28,480 --> 01:21:33,809
commit hashes you could potentially do

1693
01:21:30,580 --> 01:21:36,850
the same thing for young packages the

1694
01:21:33,810 --> 01:21:39,220
downside with that is that in get it's

1695
01:21:36,850 --> 01:21:42,640
really just using the prefix to uniquely

1696
01:21:39,220 --> 01:21:47,170
identify a file it's not using it to

1697
01:21:42,640 --> 01:21:49,300
validate the integrity of that file so I

1698
01:21:47,170 --> 01:21:52,140
think if we're using prefixes we would

1699
01:21:49,300 --> 01:21:53,879
break that integrity check probably so

1700
01:21:52,140 --> 01:21:56,969
the proposal

1701
01:21:53,879 --> 01:21:59,608
is actually let's keep the full sha-256

1702
01:21:56,969 --> 01:22:01,829
checksums in the files rather than

1703
01:21:59,609 --> 01:22:04,109
allowing prefixes but again I'd be

1704
01:22:01,829 --> 01:22:13,619
interested in one has opinions going the

1705
01:22:04,109 --> 01:22:15,869
other way use of module tags so the

1706
01:22:13,619 --> 01:22:18,179
draft allows you to use module tags to

1707
01:22:15,869 --> 01:22:21,929
associate additional metadata with yang

1708
01:22:18,179 --> 01:22:25,829
packages it doesn't define any mechanism

1709
01:22:21,929 --> 01:22:28,229
to talk to the device to add or remove

1710
01:22:25,829 --> 01:22:30,539
or modify the tags associated with a

1711
01:22:28,229 --> 01:22:34,260
package solely the module tags draft

1712
01:22:30,539 --> 01:22:36,869
allows you to define tags within a

1713
01:22:34,260 --> 01:22:39,419
module definition and it also allows you

1714
01:22:36,869 --> 01:22:41,478
to update those tags associated with

1715
01:22:39,419 --> 01:22:44,280
modules on a particular device you can

1716
01:22:41,479 --> 01:22:46,889
dynamically modify them so the question

1717
01:22:44,280 --> 01:22:48,688
here is whether this work should be

1718
01:22:46,889 --> 01:22:50,909
added now should we add support for

1719
01:22:48,689 --> 01:22:53,729
doing adding removing and modifying

1720
01:22:50,909 --> 01:22:55,858
package tags to this draft or would it

1721
01:22:53,729 --> 01:22:58,829
be reasonable to defer that to future

1722
01:22:55,859 --> 01:23:00,300
work I'm not sure how displays I might

1723
01:22:58,829 --> 01:23:01,679
ask the author of the yang one of the

1724
01:23:00,300 --> 01:23:06,419
author's if he has any thoughts on this

1725
01:23:01,679 --> 01:23:08,459
I think it's a low priority feature so

1726
01:23:06,419 --> 01:23:10,439
it this is Liu Berger answering as

1727
01:23:08,459 --> 01:23:12,898
contributor I mean it's a low priority

1728
01:23:10,439 --> 01:23:14,939
feature so I would leave it towards the

1729
01:23:12,899 --> 01:23:16,199
end and if we decide that the group

1730
01:23:14,939 --> 01:23:18,629
besides that it's important enough

1731
01:23:16,199 --> 01:23:20,398
someone will will write some text and if

1732
01:23:18,629 --> 01:23:21,329
at the end there's no text I think that

1733
01:23:20,399 --> 01:23:23,609
that's our answer

1734
01:23:21,329 --> 01:23:30,590
it could always be done later yeah

1735
01:23:23,609 --> 01:23:33,329
sounds good to me packages for schema so

1736
01:23:30,590 --> 01:23:35,340
this is an interesting one the idea for

1737
01:23:33,329 --> 01:23:37,590
each package is it represents a schema

1738
01:23:35,340 --> 01:23:39,389
and it says here potentially incomplete

1739
01:23:37,590 --> 01:23:41,129
so am i that's one things I didn't

1740
01:23:39,389 --> 01:23:44,369
mention here is in terms of the yang

1741
01:23:41,129 --> 01:23:46,199
package definitions the schema that it's

1742
01:23:44,369 --> 01:23:48,478
representing doesn't have to be complete

1743
01:23:46,199 --> 01:23:51,780
it could represent an incomplete schema

1744
01:23:48,479 --> 01:23:53,820
so it represents say a set of modules

1745
01:23:51,780 --> 01:23:55,889
that they themselves have dependencies

1746
01:23:53,820 --> 01:23:58,018
on other modules aren't defined as part

1747
01:23:55,889 --> 01:23:59,639
of that package and there's a couple

1748
01:23:58,019 --> 01:24:02,219
reasons that those was incomplete

1749
01:23:59,639 --> 01:24:03,539
schemas are useful there useful in the

1750
01:24:02,219 --> 01:24:05,849
case that you might have a dependency on

1751
01:24:03,539 --> 01:24:07,620
maybe I Anna I have types where you

1752
01:24:05,849 --> 01:24:09,120
don't binding to a particular version

1753
01:24:07,620 --> 01:24:11,099
to leave it loose in the package

1754
01:24:09,120 --> 01:24:13,890
definition and then when the package has

1755
01:24:11,100 --> 01:24:16,320
been used it would specify exactly which

1756
01:24:13,890 --> 01:24:18,650
version it's using and again it's also

1757
01:24:16,320 --> 01:24:21,000
where we're defining things like

1758
01:24:18,650 --> 01:24:22,259
packages for a bug fix or something you

1759
01:24:21,000 --> 01:24:23,970
just want to include the modules that

1760
01:24:22,260 --> 01:24:25,230
been changed in that package you don't

1761
01:24:23,970 --> 01:24:27,270
have to include the whole scheme each

1762
01:24:25,230 --> 01:24:28,860
time so again that's an example where a

1763
01:24:27,270 --> 01:24:31,320
package might represent an incomplete

1764
01:24:28,860 --> 01:24:33,150
schema in the package definition it

1765
01:24:31,320 --> 01:24:34,259
would specify whether or not schema it

1766
01:24:33,150 --> 01:24:37,019
represents a complete scheme or an

1767
01:24:34,260 --> 01:24:39,740
incomplete schema but they actually

1768
01:24:37,020 --> 01:24:42,330
issue here is to do with nmda and

1769
01:24:39,740 --> 01:24:45,030
datastore so each data store defines its

1770
01:24:42,330 --> 01:24:46,980
own schema so as such each data store

1771
01:24:45,030 --> 01:24:49,380
would have its own yank package

1772
01:24:46,980 --> 01:24:50,790
definition they might be the same for

1773
01:24:49,380 --> 01:24:54,240
the same data sources or they could be

1774
01:24:50,790 --> 01:24:59,070
different but in the destination in our

1775
01:24:54,240 --> 01:25:01,290
c83 for to the nmda RC it sort of

1776
01:24:59,070 --> 01:25:03,059
implies the existence of an uber schema

1777
01:25:01,290 --> 01:25:05,550
that represents a common parent scheme

1778
01:25:03,060 --> 01:25:08,850
across all data stores what it actually

1779
01:25:05,550 --> 01:25:11,640
specifies is it says that the schema for

1780
01:25:08,850 --> 01:25:12,900
the operational state data store must be

1781
01:25:11,640 --> 01:25:15,240
a superset schema of all the

1782
01:25:12,900 --> 01:25:16,799
configuration data stores except you can

1783
01:25:15,240 --> 01:25:18,719
remove some things so you can't deviate

1784
01:25:16,800 --> 01:25:21,240
you can deviate remove things to take it

1785
01:25:18,720 --> 01:25:22,710
out you can turn features off but

1786
01:25:21,240 --> 01:25:24,030
otherwise you can't change the data

1787
01:25:22,710 --> 01:25:27,060
types you can't change the meaning of

1788
01:25:24,030 --> 01:25:29,280
notes so I think what that really means

1789
01:25:27,060 --> 01:25:32,250
is the existence of this uber schema on

1790
01:25:29,280 --> 01:25:34,769
a device where the schema for each data

1791
01:25:32,250 --> 01:25:36,630
store must be a subset of that schema so

1792
01:25:34,770 --> 01:25:38,840
it might have things missing you might

1793
01:25:36,630 --> 01:25:41,160
have features turned off nodes missing

1794
01:25:38,840 --> 01:25:43,380
and it might have deviations remove

1795
01:25:41,160 --> 01:25:46,110
nodes but otherwise everything else is

1796
01:25:43,380 --> 01:25:49,170
always a subset of this effect this uber

1797
01:25:46,110 --> 01:25:50,639
schema and this has come up as being

1798
01:25:49,170 --> 01:25:52,950
something that's potentially useful in

1799
01:25:50,640 --> 01:25:56,220
the versions of selection work rather

1800
01:25:52,950 --> 01:25:58,170
than trying to select sets of schemas

1801
01:25:56,220 --> 01:26:00,390
for the data stores it might be more

1802
01:25:58,170 --> 01:26:04,950
appropriate to try and select using

1803
01:26:00,390 --> 01:26:06,860
these uber schemas identify the schemas

1804
01:26:04,950 --> 01:26:08,940
across all these data stores rather than

1805
01:26:06,860 --> 01:26:10,230
individual ones so that's something that

1806
01:26:08,940 --> 01:26:14,160
we still sort of talking about of

1807
01:26:10,230 --> 01:26:16,500
looking at as well as the data tools and

1808
01:26:14,160 --> 01:26:18,870
advice the same sort idea applies to

1809
01:26:16,500 --> 01:26:21,480
these sort of schema families so if you

1810
01:26:18,870 --> 01:26:23,519
had a set of packages representing so

1811
01:26:21,480 --> 01:26:25,500
the ITF modules or open config modules

1812
01:26:23,520 --> 01:26:28,020
related modules the same principle

1813
01:26:25,500 --> 01:26:30,120
applies that for those schemas the

1814
01:26:28,020 --> 01:26:32,489
schema for the individual data stores

1815
01:26:30,120 --> 01:26:35,640
may differ but they still logically have

1816
01:26:32,489 --> 01:26:38,429
the same uber schema that represents all

1817
01:26:35,640 --> 01:26:41,670
the stuff in all of them at the top

1818
01:26:38,430 --> 01:26:43,770
level so again we think that these may

1819
01:26:41,670 --> 01:26:45,930
be useful to describe those things and

1820
01:26:43,770 --> 01:26:48,180
again it's really the packet the package

1821
01:26:45,930 --> 01:26:51,060
version selection draft that's driving

1822
01:26:48,180 --> 01:26:53,880
some of this discussion idea as to

1823
01:26:51,060 --> 01:26:56,880
whether these are useful one things add

1824
01:26:53,880 --> 01:26:58,560
is that this came up on the alias from

1825
01:26:56,880 --> 01:27:01,230
Andy that he was saying that it's quite

1826
01:26:58,560 --> 01:27:03,000
tricky for a client to know what the

1827
01:27:01,230 --> 01:27:05,250
schema is because the schema for each

1828
01:27:03,000 --> 01:27:07,440
data store is different so it is

1829
01:27:05,250 --> 01:27:09,540
potential an idea that maybe this Buber

1830
01:27:07,440 --> 01:27:11,849
schema that logically exists could also

1831
01:27:09,540 --> 01:27:14,430
be advertised in young library saying

1832
01:27:11,850 --> 01:27:16,980
that this is the schema that acts as the

1833
01:27:14,430 --> 01:27:18,570
schemer above all the other per

1834
01:27:16,980 --> 01:27:20,519
datastore schemas but you can calculate

1835
01:27:18,570 --> 01:27:22,650
it and you can you can generate it by

1836
01:27:20,520 --> 01:27:24,030
merging everything together so I think

1837
01:27:22,650 --> 01:27:27,450
there's a question whether whether that

1838
01:27:24,030 --> 01:27:30,450
would be useful as well and so that one

1839
01:27:27,450 --> 01:27:32,130
is still in his open discussion on what

1840
01:27:30,450 --> 01:27:33,720
we do those and I think it's really the

1841
01:27:32,130 --> 01:27:36,870
version selection draft that drives that

1842
01:27:33,720 --> 01:27:39,989
I think maybe it's my laughs hopefully

1843
01:27:36,870 --> 01:27:41,220
my last slide on this one and is once

1844
01:27:39,989 --> 01:27:43,860
you've got these packages one of the

1845
01:27:41,220 --> 01:27:46,500
principal aims is to try and add some

1846
01:27:43,860 --> 01:27:48,089
more conformity between what ITF

1847
01:27:46,500 --> 01:27:49,710
produces so rather than producing this

1848
01:27:48,090 --> 01:27:52,890
yang modules for inderal individual

1849
01:27:49,710 --> 01:27:54,540
features can ITF starts produce and sets

1850
01:27:52,890 --> 01:27:58,620
of yang modules that work together to

1851
01:27:54,540 --> 01:28:00,510
provide functions for particular

1852
01:27:58,620 --> 01:28:01,950
services and things not service though

1853
01:28:00,510 --> 01:28:05,880
yang modules but implementing those

1854
01:28:01,950 --> 01:28:07,710
services on devices so so I would like

1855
01:28:05,880 --> 01:28:09,210
the packages work gets adopted we also

1856
01:28:07,710 --> 01:28:10,770
want to then be thinking about can we

1857
01:28:09,210 --> 01:28:13,230
try and start defining what these things

1858
01:28:10,770 --> 01:28:15,120
look like does it work and can we come

1859
01:28:13,230 --> 01:28:16,230
up these definitions and then there's a

1860
01:28:15,120 --> 01:28:17,370
question of how do you manage those

1861
01:28:16,230 --> 01:28:19,320
packages

1862
01:28:17,370 --> 01:28:22,290
do we need some ion a registry for those

1863
01:28:19,320 --> 01:28:23,250
and the other side of that is I would

1864
01:28:22,290 --> 01:28:25,890
like this package of different

1865
01:28:23,250 --> 01:28:27,120
definitions to be globally unique so

1866
01:28:25,890 --> 01:28:29,790
again how do you manage that namespace

1867
01:28:27,120 --> 01:28:31,620
I'm hoping that simple registry of

1868
01:28:29,790 --> 01:28:33,739
prefixes on the package names is

1869
01:28:31,620 --> 01:28:35,809
sufficient rather than using

1870
01:28:33,739 --> 01:28:37,580
you are eyes that make them more for

1871
01:28:35,810 --> 01:28:40,130
base but against there's more thought

1872
01:28:37,580 --> 01:28:43,940
about this and how we do that and how

1873
01:28:40,130 --> 01:28:46,040
that works and questions and process and

1874
01:28:43,940 --> 01:28:48,200
things so this is just all early days

1875
01:28:46,040 --> 01:28:49,640
and this not really draw I think the

1876
01:28:48,200 --> 01:28:50,929
draft mentions the idea you need to do

1877
01:28:49,640 --> 01:28:52,820
this doesn't talk about the details but

1878
01:28:50,930 --> 01:28:54,770
again I don't think this is something

1879
01:28:52,820 --> 01:28:56,509
needs to be solved for working group

1880
01:28:54,770 --> 01:28:59,150
adoption it's just part of work as this

1881
01:28:56,510 --> 01:29:02,840
work evolves in the working group that's

1882
01:28:59,150 --> 01:29:04,219
my last slide on this part great any

1883
01:29:02,840 --> 01:29:06,410
other issues you think that should be

1884
01:29:04,219 --> 01:29:09,290
addressed before working group adoption

1885
01:29:06,410 --> 01:29:11,840
no I think I think they I think the

1886
01:29:09,290 --> 01:29:14,120
shape the document is describes well

1887
01:29:11,840 --> 01:29:15,620
what it's trying to achieve I think most

1888
01:29:14,120 --> 01:29:18,050
issues are really just working out the

1889
01:29:15,620 --> 01:29:19,309
details from my course you know I don't

1890
01:29:18,050 --> 01:29:22,750
think anything has to be resolved before

1891
01:29:19,310 --> 01:29:29,420
Dakshina great thank you

1892
01:29:22,750 --> 01:29:32,810
looks like we have a question I think

1893
01:29:29,420 --> 01:29:34,160
for not now packages right us were from

1894
01:29:32,810 --> 01:29:36,110
inclement part

1895
01:29:34,160 --> 01:29:37,639
do you mind we mean to the mic also say

1896
01:29:36,110 --> 01:29:41,000
your name please okay

1897
01:29:37,640 --> 01:29:43,670
whoa from Wahby and here is the question

1898
01:29:41,000 --> 01:29:45,410
for because I when I read this through

1899
01:29:43,670 --> 01:29:48,800
that young package I think for

1900
01:29:45,410 --> 01:29:52,010
implementing is quite useful but right

1901
01:29:48,800 --> 01:29:56,390
now I think like there's no standards to

1902
01:29:52,010 --> 01:29:59,450
define whether how how can we form a

1903
01:29:56,390 --> 01:30:03,140
young package for the uber package it

1904
01:29:59,450 --> 01:30:07,309
seems clear but we could like use only

1905
01:30:03,140 --> 01:30:10,430
two models to form a young package so so

1906
01:30:07,310 --> 01:30:13,130
right now there's no standards define in

1907
01:30:10,430 --> 01:30:16,520
the young package draft so so in that

1908
01:30:13,130 --> 01:30:20,420
way I still think that if that young

1909
01:30:16,520 --> 01:30:24,890
pack could get at more text to describe

1910
01:30:20,420 --> 01:30:27,920
how to like firm use for young package I

1911
01:30:24,890 --> 01:30:30,320
think that's useful Thanks okay I'm not

1912
01:30:27,920 --> 01:30:33,140
be added I think the idea here would be

1913
01:30:30,320 --> 01:30:35,420
that the I wouldn't want to define any

1914
01:30:33,140 --> 01:30:38,719
actual packages within the packages

1915
01:30:35,420 --> 01:30:41,420
draft has a couple examples but the idea

1916
01:30:38,719 --> 01:30:44,540
would be to have separate RCS to define

1917
01:30:41,420 --> 01:30:46,699
an ITF base package for what modules

1918
01:30:44,540 --> 01:30:51,050
would go into that and one for

1919
01:30:46,699 --> 01:30:53,389
who our eyes have rats and that sort of

1920
01:30:51,050 --> 01:30:57,500
thing so but I think yes I think I'll be

1921
01:30:53,390 --> 01:31:00,590
tricky to define those but hooked up one

1922
01:30:57,500 --> 01:31:05,239
idea maybe it might be useful in some

1923
01:31:00,590 --> 01:31:08,420
use cases to include a PGP signature of

1924
01:31:05,239 --> 01:31:10,928
the content so that it's somehow a sure

1925
01:31:08,420 --> 01:31:15,320
that it's the right packages that

1926
01:31:10,929 --> 01:31:19,270
somebody received so maybe as an

1927
01:31:15,320 --> 01:31:22,840
optional item it could be useful to add

1928
01:31:19,270 --> 01:31:25,940
some kind of let's say PGP signature to

1929
01:31:22,840 --> 01:31:28,100
say to sign the checksum so that it's

1930
01:31:25,940 --> 01:31:34,639
real the content that that's supposed to

1931
01:31:28,100 --> 01:31:37,310
be there okay all right well thanks for

1932
01:31:34,640 --> 01:31:39,969
putting us back on schedule and Joe I

1933
01:31:37,310 --> 01:31:39,969
believe Europe

1934
01:31:50,550 --> 01:31:55,030
and so Rama's like in five minutes of

1935
01:31:53,980 --> 01:31:58,480
your time okay

1936
01:31:55,030 --> 01:32:02,080
I'm not Rashad I'm Joe but this is his

1937
01:31:58,480 --> 01:32:04,480
work and he's online so here we go why

1938
01:32:02,080 --> 01:32:08,680
are we here what is the goal of yang

1939
01:32:04,480 --> 01:32:10,839
version selection specifically this is

1940
01:32:08,680 --> 01:32:13,360
about addressing this requirement from

1941
01:32:10,840 --> 01:32:17,880
the requirements draft we need to allow

1942
01:32:13,360 --> 01:32:21,489
for a way that existing clients have a

1943
01:32:17,880 --> 01:32:25,390
way of interacting with a yang driven

1944
01:32:21,489 --> 01:32:27,160
server that is is a way in which they

1945
01:32:25,390 --> 01:32:29,710
expect a way that's not going to break

1946
01:32:27,160 --> 01:32:31,900
those existing clients and we also need

1947
01:32:29,710 --> 01:32:34,840
a way to be able to distinguish now that

1948
01:32:31,900 --> 01:32:37,210
we've introducing yang packages we need

1949
01:32:34,840 --> 01:32:39,400
a way of being able to distinguish what

1950
01:32:37,210 --> 01:32:41,560
version of a package we may want to use

1951
01:32:39,400 --> 01:32:44,379
if a device happens to support multiple

1952
01:32:41,560 --> 01:32:46,930
packages what do we want that schema to

1953
01:32:44,380 --> 01:32:49,570
look like so these are the the goals

1954
01:32:46,930 --> 01:32:53,530
this is the wherefore of the version

1955
01:32:49,570 --> 01:32:56,259
selection draft in particular the

1956
01:32:53,530 --> 01:32:58,540
solution here will allow servers to do

1957
01:32:56,260 --> 01:33:01,840
these non backwards-compatible changes

1958
01:32:58,540 --> 01:33:04,180
and clients do not necessarily then have

1959
01:33:01,840 --> 01:33:06,719
to always track the latest and greatest

1960
01:33:04,180 --> 01:33:09,610
so for example a server could support

1961
01:33:06,719 --> 01:33:12,160
version two of a given package and

1962
01:33:09,610 --> 01:33:14,650
version one of a given package so the

1963
01:33:12,160 --> 01:33:17,500
clients that understand version 1 of

1964
01:33:14,650 --> 01:33:19,660
that package can select that that is the

1965
01:33:17,500 --> 01:33:21,700
version by which they want to interact

1966
01:33:19,660 --> 01:33:24,430
with that is the schema that they want

1967
01:33:21,700 --> 01:33:27,610
to see obviously then therefore this

1968
01:33:24,430 --> 01:33:30,370
makes use of the yang packages that Rob

1969
01:33:27,610 --> 01:33:32,710
just presented and we need to have a way

1970
01:33:30,370 --> 01:33:35,140
for the servers to advertise this

1971
01:33:32,710 --> 01:33:38,080
support what packages do they support at

1972
01:33:35,140 --> 01:33:39,940
what version do they support and we have

1973
01:33:38,080 --> 01:33:41,820
to be able to say this is the default

1974
01:33:39,940 --> 01:33:44,919
version and we'll talk a little bit

1975
01:33:41,820 --> 01:33:47,110
about how we're going to do that that's

1976
01:33:44,920 --> 01:33:48,969
one of the open items and then

1977
01:33:47,110 --> 01:33:51,580
additionally then how does the client

1978
01:33:48,969 --> 01:33:54,550
make that selection how does the client

1979
01:33:51,580 --> 01:33:56,860
say this is the package the schema I

1980
01:33:54,550 --> 01:33:59,560
want at the version I want so that's

1981
01:33:56,860 --> 01:34:02,139
what's laid laid out in this particular

1982
01:33:59,560 --> 01:34:05,950
draft

1983
01:34:02,140 --> 01:34:07,810
servers are not required this is

1984
01:34:05,950 --> 01:34:09,670
something that we debated quite a bit on

1985
01:34:07,810 --> 01:34:12,370
the working group servers are not

1986
01:34:09,670 --> 01:34:15,280
required to concurrently support clients

1987
01:34:12,370 --> 01:34:18,000
using different schema versions in

1988
01:34:15,280 --> 01:34:20,710
reality it may be very difficult for a

1989
01:34:18,000 --> 01:34:23,680
single server a given server to support

1990
01:34:20,710 --> 01:34:26,740
two major revisions of a given package

1991
01:34:23,680 --> 01:34:28,660
two major revisions of a given schema so

1992
01:34:26,740 --> 01:34:30,190
servers are not concurrently required to

1993
01:34:28,660 --> 01:34:32,590
support that but they need to

1994
01:34:30,190 --> 01:34:34,750
unambiguously indicate to the client

1995
01:34:32,590 --> 01:34:38,830
that they are unable to satisfy a

1996
01:34:34,750 --> 01:34:41,710
selection request if they aren't unable

1997
01:34:38,830 --> 01:34:45,070
to render or support both versions of a

1998
01:34:41,710 --> 01:34:47,080
given schema at once and servers

1999
01:34:45,070 --> 01:34:49,960
obviously are not required to support

2000
01:34:47,080 --> 01:34:52,780
every revision or version of a given

2001
01:34:49,960 --> 01:34:55,720
schema or given package so for example a

2002
01:34:52,780 --> 01:34:59,559
server or a packaged version 3.0 may

2003
01:34:55,720 --> 01:35:03,160
come out 3.00 for example but not all

2004
01:34:59,560 --> 01:35:05,170
servers need to support that and as well

2005
01:35:03,160 --> 01:35:10,510
if you've got a server that supports

2006
01:35:05,170 --> 01:35:12,910
version 2.0 and 1.0 there could be non

2007
01:35:10,510 --> 01:35:15,640
backwards compatible changes there that

2008
01:35:12,910 --> 01:35:17,710
the server can't reliably render and

2009
01:35:15,640 --> 01:35:20,080
there has to be some deviation to

2010
01:35:17,710 --> 01:35:24,280
indicate that for example we are not

2011
01:35:20,080 --> 01:35:26,500
going to support a node at string when

2012
01:35:24,280 --> 01:35:29,920
it used to be int we can't do both at

2013
01:35:26,500 --> 01:35:32,080
the same time so there that that onus is

2014
01:35:29,920 --> 01:35:34,090
not on the server to be able to somehow

2015
01:35:32,080 --> 01:35:36,720
magically do that but there has to be

2016
01:35:34,090 --> 01:35:40,210
ways of signaling that to the client

2017
01:35:36,720 --> 01:35:44,920
that this is a deviation this is how a

2018
01:35:40,210 --> 01:35:48,070
server is going to handle that changes

2019
01:35:44,920 --> 01:35:51,010
between zero zero zero and zero one in

2020
01:35:48,070 --> 01:35:54,400
zero zero we talked about a net cough

2021
01:35:51,010 --> 01:35:57,400
solution by whereby a client selects a

2022
01:35:54,400 --> 01:36:00,519
specific version of a schema by using a

2023
01:35:57,400 --> 01:36:01,570
different TCP port number and then we

2024
01:36:00,520 --> 01:36:03,700
thought about that and we thought well

2025
01:36:01,570 --> 01:36:06,250
that's going to really put proliferate

2026
01:36:03,700 --> 01:36:10,269
ports as we go and saying proliferate

2027
01:36:06,250 --> 01:36:12,550
ports a lot quickly is tough to do so we

2028
01:36:10,270 --> 01:36:13,930
we pulled that out and we picked an RPC

2029
01:36:12,550 --> 01:36:16,000
based approach

2030
01:36:13,930 --> 01:36:18,810
in order for Netcom clients to be able

2031
01:36:16,000 --> 01:36:21,910
to select a specific schema in

2032
01:36:18,810 --> 01:36:24,730
particular we initially started by

2033
01:36:21,910 --> 01:36:27,190
saying a client selects this particular

2034
01:36:24,730 --> 01:36:29,440
package at this particular version but

2035
01:36:27,190 --> 01:36:32,290
we then started saying and this led into

2036
01:36:29,440 --> 01:36:34,629
some of this uber schema talk or uber

2037
01:36:32,290 --> 01:36:37,000
package talk that Rob mentioned how does

2038
01:36:34,630 --> 01:36:39,160
a client string together multiples of

2039
01:36:37,000 --> 01:36:44,770
these packages so for example if they

2040
01:36:39,160 --> 01:36:47,110
have a l2 VPN package and an l3 v how do

2041
01:36:44,770 --> 01:36:50,170
they bring these together to come up

2042
01:36:47,110 --> 01:36:52,630
with a overall cohesive schema that that

2043
01:36:50,170 --> 01:36:54,850
client may care about so we added

2044
01:36:52,630 --> 01:36:56,950
support and still an open issue for

2045
01:36:54,850 --> 01:36:59,860
discussion we added support for being

2046
01:36:56,950 --> 01:37:04,179
able to select to multiple schemas and

2047
01:36:59,860 --> 01:37:06,450
as I mentioned on the Netcom side on the

2048
01:37:04,180 --> 01:37:09,610
Netcom side we changed the port

2049
01:37:06,450 --> 01:37:14,230
selection to an RPC to be able to say

2050
01:37:09,610 --> 01:37:14,830
these are the schemas that I want so

2051
01:37:14,230 --> 01:37:18,790
here we go

2052
01:37:14,830 --> 01:37:21,640
a version schema is associated with as

2053
01:37:18,790 --> 01:37:24,870
we talked about a it could be a semantic

2054
01:37:21,640 --> 01:37:28,960
version has a revision label but it is

2055
01:37:24,870 --> 01:37:32,470
associated to those yang packages and

2056
01:37:28,960 --> 01:37:36,070
within the pack or we have this this

2057
01:37:32,470 --> 01:37:39,550
notion of sets of schema that string

2058
01:37:36,070 --> 01:37:41,650
together to form one cohesive schema

2059
01:37:39,550 --> 01:37:44,860
that the client is interested in using

2060
01:37:41,650 --> 01:37:48,370
at specific versions of the the sub

2061
01:37:44,860 --> 01:37:51,219
packages within that we can do multiple

2062
01:37:48,370 --> 01:37:53,250
things here we can have the device as

2063
01:37:51,220 --> 01:37:55,840
Rob pointed out to find these local

2064
01:37:53,250 --> 01:38:00,070
packages that kind of create that

2065
01:37:55,840 --> 01:38:03,460
umbrella or group together multiple sub

2066
01:38:00,070 --> 01:38:07,380
packages to give an overall schema or we

2067
01:38:03,460 --> 01:38:09,880
can have the the vendor or device

2068
01:38:07,380 --> 01:38:12,820
manufacturer create packages offline

2069
01:38:09,880 --> 01:38:15,310
that again specify what schema are using

2070
01:38:12,820 --> 01:38:18,549
or we can leave it up to the user to be

2071
01:38:15,310 --> 01:38:22,690
able to say I want to select l2 VPN at

2072
01:38:18,550 --> 01:38:24,910
1.0 l3 VPN 2.0 but then we run into some

2073
01:38:22,690 --> 01:38:27,530
issues with how and Rob mentioned this

2074
01:38:24,910 --> 01:38:29,920
how do we resolve some of the

2075
01:38:27,530 --> 01:38:32,450
intentionally inherent conflicts between

2076
01:38:29,920 --> 01:38:34,070
different schema that might use or

2077
01:38:32,450 --> 01:38:36,230
different packages that might use

2078
01:38:34,070 --> 01:38:38,200
different modules or different modules

2079
01:38:36,230 --> 01:38:40,969
and different versions of those modules

2080
01:38:38,200 --> 01:38:44,179
but what we want to be able to do is

2081
01:38:40,970 --> 01:38:47,330
have a way of Netcom clients being able

2082
01:38:44,180 --> 01:38:49,700
to say this is the set of packages and

2083
01:38:47,330 --> 01:38:52,040
versions I want or the schema that I

2084
01:38:49,700 --> 01:38:54,470
want and the same for Netcom or sorry

2085
01:38:52,040 --> 01:38:57,950
with rest cough and with rest comp we

2086
01:38:54,470 --> 01:39:00,740
have a offshoot branch in which the

2087
01:38:57,950 --> 01:39:04,400
client will make a query to be able to

2088
01:39:00,740 --> 01:39:06,790
say this is the set of packages or this

2089
01:39:04,400 --> 01:39:10,219
is the schema at this particular version

2090
01:39:06,790 --> 01:39:13,820
that I'm interested in so different

2091
01:39:10,220 --> 01:39:14,240
route for rest kampf and the RPC for net

2092
01:39:13,820 --> 01:39:17,840
conf

2093
01:39:14,240 --> 01:39:20,559
this is the version selection the yang

2094
01:39:17,840 --> 01:39:23,630
tree output of that you can see how this

2095
01:39:20,560 --> 01:39:25,750
breaks down we'll go into a little bit

2096
01:39:23,630 --> 01:39:28,760
more details we look at examples

2097
01:39:25,750 --> 01:39:30,440
specifically of how the RPC works and

2098
01:39:28,760 --> 01:39:33,170
that's gonna lead us into some of the

2099
01:39:30,440 --> 01:39:36,950
open questions that the design team has

2100
01:39:33,170 --> 01:39:39,830
been having this is for example how a

2101
01:39:36,950 --> 01:39:44,179
server will advertise support for

2102
01:39:39,830 --> 01:39:46,519
specific packages at specific versions

2103
01:39:44,180 --> 01:39:49,940
so this happens during the capabilities

2104
01:39:46,520 --> 01:39:54,740
exchange so the server will say that I

2105
01:39:49,940 --> 01:39:57,799
have the capability for these sets of

2106
01:39:54,740 --> 01:40:00,830
packages so example ITF routing at a

2107
01:39:57,800 --> 01:40:03,830
specific version or two specific

2108
01:40:00,830 --> 01:40:06,769
versions a vendor and a vendor package

2109
01:40:03,830 --> 01:40:09,559
at two specific versions so this could

2110
01:40:06,770 --> 01:40:13,160
be these are the list of packages that I

2111
01:40:09,560 --> 01:40:16,940
support this is what you as a client can

2112
01:40:13,160 --> 01:40:18,950
request in terms of of being able to say

2113
01:40:16,940 --> 01:40:21,139
this is this is the selection that I

2114
01:40:18,950 --> 01:40:24,620
want to make for clients to understand

2115
01:40:21,140 --> 01:40:27,590
this capability so we have a comment

2116
01:40:24,620 --> 01:40:30,680
from Martin on Java why a different

2117
01:40:27,590 --> 01:40:33,640
mechanism for net conf and why not use

2118
01:40:30,680 --> 01:40:37,330
the same mechanism as for restaurants

2119
01:40:33,640 --> 01:40:41,119
why the the the different mechanism for

2120
01:40:37,330 --> 01:40:46,010
ruskin versus Netcom we with

2121
01:40:41,119 --> 01:40:48,679
well the rest comp we had the we had the

2122
01:40:46,010 --> 01:40:50,929
ability of doing a different URL we

2123
01:40:48,679 --> 01:40:52,159
thought the RPC we talked about a few

2124
01:40:50,929 --> 01:40:54,770
different things we thought the RPC

2125
01:40:52,159 --> 01:40:57,799
seemed more natural with respect to what

2126
01:40:54,770 --> 01:41:03,500
a net comp client would would expect to

2127
01:40:57,800 --> 01:41:06,560
do so that is why we again where that is

2128
01:41:03,500 --> 01:41:09,440
one of the things that we debated most

2129
01:41:06,560 --> 01:41:12,830
recently is what should we do we felt

2130
01:41:09,440 --> 01:41:14,869
that the port port change solution

2131
01:41:12,830 --> 01:41:16,670
wasn't scalable and we thought that this

2132
01:41:14,869 --> 01:41:18,469
would be a way of being able to do

2133
01:41:16,670 --> 01:41:20,440
something it's more of a handshake and

2134
01:41:18,469 --> 01:41:25,489
negotiation between client and server

2135
01:41:20,440 --> 01:41:28,400
where the the server could the server

2136
01:41:25,489 --> 01:41:33,230
could a Carnac that that is supported

2137
01:41:28,400 --> 01:41:36,440
for the specific client Maas angle

2138
01:41:33,230 --> 01:41:40,040
Ericsson I think advertising anything

2139
01:41:36,440 --> 01:41:42,799
more detailed than the ubirr schema with

2140
01:41:40,040 --> 01:41:45,110
a lot of complications and lot of how do

2141
01:41:42,800 --> 01:41:49,780
we support all variations of the support

2142
01:41:45,110 --> 01:41:52,429
schemas yeah and that's gonna we'll get

2143
01:41:49,780 --> 01:41:54,349
personally I agree with you and we're

2144
01:41:52,429 --> 01:41:57,679
gonna get to that in particular with the

2145
01:41:54,349 --> 01:42:00,760
open open questions in a minute here so

2146
01:41:57,679 --> 01:42:04,040
this is the example of the Netcom for PC

2147
01:42:00,760 --> 01:42:05,330
polish just kind of hinted it's

2148
01:42:04,040 --> 01:42:11,000
something that we're gonna get to in a

2149
01:42:05,330 --> 01:42:12,440
in a second here what happens here if in

2150
01:42:11,000 --> 01:42:15,170
this example maybe there wouldn't be

2151
01:42:12,440 --> 01:42:19,210
conflicts but what happens if the client

2152
01:42:15,170 --> 01:42:22,719
selects a set of packages or a set of

2153
01:42:19,210 --> 01:42:25,369
schema that inherently conflict

2154
01:42:22,719 --> 01:42:27,260
obviously you could just nak this and

2155
01:42:25,369 --> 01:42:30,949
instead of turning returning an okay you

2156
01:42:27,260 --> 01:42:34,610
could return an error replied to the the

2157
01:42:30,949 --> 01:42:39,440
RPC request but it might be better if

2158
01:42:34,610 --> 01:42:41,269
there was a way of having a single some

2159
01:42:39,440 --> 01:42:43,428
vetted probably the wrong word but a

2160
01:42:41,270 --> 01:42:46,909
single definition for the overall schema

2161
01:42:43,429 --> 01:42:51,139
that the client wants to use hmm so that

2162
01:42:46,909 --> 01:42:53,420
anima has a continuation on jabber so

2163
01:42:51,139 --> 01:42:54,739
Martin says config false data instead of

2164
01:42:53,420 --> 01:42:58,730
special for

2165
01:42:54,739 --> 01:43:00,410
protocol capability to which Rashad says

2166
01:42:58,730 --> 01:43:02,809
Martin do you mean to have a different

2167
01:43:00,410 --> 01:43:06,739
solution from what's currently in the

2168
01:43:02,810 --> 01:43:08,930
document and Martin responds saying why

2169
01:43:06,739 --> 01:43:11,780
not use config faults data instead of

2170
01:43:08,930 --> 01:43:14,690
special protocol capability I thought RC

2171
01:43:11,780 --> 01:43:24,009
was using a config fault tree perhaps

2172
01:43:14,690 --> 01:43:27,820
I'm mistaken perhaps I'm so I'm a little

2173
01:43:24,010 --> 01:43:30,469
confused at the at the question so

2174
01:43:27,820 --> 01:43:32,269
robertson cisco so i think that the

2175
01:43:30,469 --> 01:43:34,820
information of what you could choose

2176
01:43:32,270 --> 01:43:36,380
would be in config force for both neck

2177
01:43:34,820 --> 01:43:38,599
get from restaurants is foam in both

2178
01:43:36,380 --> 01:43:40,880
cases the reason we put it in for

2179
01:43:38,600 --> 01:43:42,530
capabilities exchange for neck confers

2180
01:43:40,880 --> 01:43:45,200
we thought that'd be easier for a client

2181
01:43:42,530 --> 01:43:47,210
when it connects to know what to vote

2182
01:43:45,200 --> 01:43:50,210
straight away and deburr to choose on

2183
01:43:47,210 --> 01:43:52,340
that initial RPC beginning i want to

2184
01:43:50,210 --> 01:43:53,810
choose the schema whereas in the

2185
01:43:52,340 --> 01:43:56,210
restaurant solution because it's done on

2186
01:43:53,810 --> 01:43:58,100
the path based thing effectively once

2187
01:43:56,210 --> 01:43:59,660
you get the data and then just choose

2188
01:43:58,100 --> 01:44:02,000
the right paths are things to do with

2189
01:43:59,660 --> 01:44:03,620
what point of time do you choose the

2190
01:44:02,000 --> 01:44:06,860
scheme you using and getting early

2191
01:44:03,620 --> 01:44:08,989
enough in the process yeah one of the

2192
01:44:06,860 --> 01:44:10,759
things we did discuss thanks robb one of

2193
01:44:08,989 --> 01:44:13,549
the things we did discuss was wind is

2194
01:44:10,760 --> 01:44:16,489
when when does the capabilities exchange

2195
01:44:13,550 --> 01:44:18,290
occur and could the client simply say in

2196
01:44:16,489 --> 01:44:21,589
its capabilities what it wanted to use

2197
01:44:18,290 --> 01:44:25,340
but the capabilities exchanged can occur

2198
01:44:21,590 --> 01:44:26,900
simultaneously so we wanted to it had to

2199
01:44:25,340 --> 01:44:29,300
happen early we had to have some way of

2200
01:44:26,900 --> 01:44:31,580
of having in the Netcom session this

2201
01:44:29,300 --> 01:44:34,250
happened early and and so that was the

2202
01:44:31,580 --> 01:44:36,050
other thing that we another reason why

2203
01:44:34,250 --> 01:44:39,920
we went forward on at least on the net

2204
01:44:36,050 --> 01:44:42,380
coincide with the RPC so I've asked

2205
01:44:39,920 --> 01:44:44,989
Martin if this is something he thinks

2206
01:44:42,380 --> 01:44:46,310
can be addressed after adoption or does

2207
01:44:44,989 --> 01:44:54,169
he think have to be addressed before

2208
01:44:46,310 --> 01:44:56,120
adoption so well here okay Martin says I

2209
01:44:54,170 --> 01:44:58,520
don't think that optimization is

2210
01:44:56,120 --> 01:44:59,630
necessary compare with hello versus yang

2211
01:44:58,520 --> 01:45:04,280
lip for modules

2212
01:44:59,630 --> 01:45:06,739
an additional RPC isn't a big deal so he

2213
01:45:04,280 --> 01:45:07,849
gave a technical answer to a process

2214
01:45:06,739 --> 01:45:13,610
question

2215
01:45:07,850 --> 01:45:16,850
so and he also says there are other

2216
01:45:13,610 --> 01:45:18,410
problems with this solution so martin

2217
01:45:16,850 --> 01:45:20,600
again is this something we can work out

2218
01:45:18,410 --> 01:45:22,849
after adoption or do you think it's

2219
01:45:20,600 --> 01:45:29,420
completely the wrong direction and we

2220
01:45:22,850 --> 01:45:31,640
need a reset here so he's not sure okay

2221
01:45:29,420 --> 01:45:34,760
well we'll go on because there are

2222
01:45:31,640 --> 01:45:37,490
certainly issues with with this that we

2223
01:45:34,760 --> 01:45:42,680
do need to we need to as a group work

2224
01:45:37,490 --> 01:45:44,870
out so this is we've already I've

2225
01:45:42,680 --> 01:45:46,640
already touched on a few of these and

2226
01:45:44,870 --> 01:45:48,590
and polish brought up the fact that when

2227
01:45:46,640 --> 01:45:51,230
you are arbitrarily allowed to chain

2228
01:45:48,590 --> 01:45:52,730
together schema the server may not be

2229
01:45:51,230 --> 01:45:55,910
able you know sorry sorry Dave I can't

2230
01:45:52,730 --> 01:45:58,700
let you do that so this the server main

2231
01:45:55,910 --> 01:46:00,860
a kit because the string together schema

2232
01:45:58,700 --> 01:46:04,460
that are selected don't really work

2233
01:46:00,860 --> 01:46:06,799
together they can't be simultaneously

2234
01:46:04,460 --> 01:46:08,690
supported by the device maybe another

2235
01:46:06,800 --> 01:46:12,080
client in another session has already

2236
01:46:08,690 --> 01:46:16,280
made their choice and the device can't

2237
01:46:12,080 --> 01:46:19,309
concurrently handle both versions say of

2238
01:46:16,280 --> 01:46:21,410
a particular package or you might be

2239
01:46:19,310 --> 01:46:23,060
trying to set change this on the fly

2240
01:46:21,410 --> 01:46:24,700
meaning you did it once at the beginning

2241
01:46:23,060 --> 01:46:28,280
of the session and now you're trying to

2242
01:46:24,700 --> 01:46:30,500
send an RPC again for a different schema

2243
01:46:28,280 --> 01:46:32,920
version and then the server can't

2244
01:46:30,500 --> 01:46:36,470
support that

2245
01:46:32,920 --> 01:46:39,140
here is a config example Rashad is very

2246
01:46:36,470 --> 01:46:42,140
meticulous and generating the full

2247
01:46:39,140 --> 01:46:44,960
example of the of the yang module within

2248
01:46:42,140 --> 01:46:47,840
the draft but let's get to the open item

2249
01:46:44,960 --> 01:46:49,760
since I think we are running behind do

2250
01:46:47,840 --> 01:46:51,770
we allow multiple schema sets to be

2251
01:46:49,760 --> 01:46:53,960
selected polish already mentioned

2252
01:46:51,770 --> 01:46:56,600
there's a problem with that it might be

2253
01:46:53,960 --> 01:46:59,810
better to say that we want to either

2254
01:46:56,600 --> 01:47:03,430
define this maybe at a config time where

2255
01:46:59,810 --> 01:47:06,650
the the client has to resolve those

2256
01:47:03,430 --> 01:47:08,840
those conflicts explicitly as Rob was

2257
01:47:06,650 --> 01:47:10,429
mentioning in his presentation or maybe

2258
01:47:08,840 --> 01:47:13,460
it's something where we have these uber

2259
01:47:10,430 --> 01:47:16,790
schema on the device and there is just

2260
01:47:13,460 --> 01:47:19,300
one or a set of schema that are

2261
01:47:16,790 --> 01:47:21,110
supported and maybe for example IETF

2262
01:47:19,300 --> 01:47:23,989
version one

2263
01:47:21,110 --> 01:47:26,780
IETF version two and that includes all

2264
01:47:23,989 --> 01:47:29,290
of the IETF modules and those are a

2265
01:47:26,780 --> 01:47:32,389
package I should say at a specific

2266
01:47:29,290 --> 01:47:34,909
revision and version that means the

2267
01:47:32,389 --> 01:47:36,770
conflicts are resolved it's clear what

2268
01:47:34,909 --> 01:47:39,469
the client would be getting in terms of

2269
01:47:36,770 --> 01:47:41,989
an overall schema and you don't have

2270
01:47:39,469 --> 01:47:43,690
this kind of frankensteining of putting

2271
01:47:41,989 --> 01:47:48,650
together different potentially

2272
01:47:43,690 --> 01:47:50,960
incompatible sets of packages in terms

2273
01:47:48,650 --> 01:47:53,089
of recommendations we've been I said

2274
01:47:50,960 --> 01:47:56,960
earlier myself personally I like the

2275
01:47:53,090 --> 01:47:59,480
kind of uber or or predefined schema

2276
01:47:56,960 --> 01:48:01,730
that is free of conflicts that we know

2277
01:47:59,480 --> 01:48:06,019
is going to work I don't know if we have

2278
01:48:01,730 --> 01:48:07,820
a design team consensus on that but oh

2279
01:48:06,020 --> 01:48:09,320
those are that is one of the things

2280
01:48:07,820 --> 01:48:11,750
we've been talking about very seriously

2281
01:48:09,320 --> 01:48:14,719
in some of the latest meetings i've been

2282
01:48:11,750 --> 01:48:18,949
a part of but that's an item for

2283
01:48:14,719 --> 01:48:23,119
discussion too we have Rob mentioned the

2284
01:48:18,949 --> 01:48:25,190
the datastore relationship we now have a

2285
01:48:23,119 --> 01:48:27,799
one to end relationship between the

2286
01:48:25,190 --> 01:48:31,669
datastore and the schema that it could

2287
01:48:27,800 --> 01:48:34,159
that could be defining it how do we

2288
01:48:31,670 --> 01:48:37,400
handle those conflicts this potentially

2289
01:48:34,159 --> 01:48:39,980
goes away if we use those local packages

2290
01:48:37,400 --> 01:48:42,138
that Rob talked about meaning I could on

2291
01:48:39,980 --> 01:48:44,330
the device say I wanted to find a

2292
01:48:42,139 --> 01:48:47,389
package config wise I want to define a

2293
01:48:44,330 --> 01:48:50,690
package that has these sub packages in

2294
01:48:47,389 --> 01:48:53,360
it and then I can specifically as part

2295
01:48:50,690 --> 01:48:56,059
of the config say this is how I handle

2296
01:48:53,360 --> 01:48:58,610
the potential conflicts between the

2297
01:48:56,060 --> 01:49:02,000
modules as Rob mentioned or the devices

2298
01:48:58,610 --> 01:49:06,349
just define a or the gangue servers yang

2299
01:49:02,000 --> 01:49:09,500
driven servers support a set of kind of

2300
01:49:06,350 --> 01:49:11,929
overarching or uber packages that define

2301
01:49:09,500 --> 01:49:14,420
their schema and that is at the level

2302
01:49:11,929 --> 01:49:19,730
that the client can select so we go back

2303
01:49:14,420 --> 01:49:22,130
to still a one-to-one relationship so

2304
01:49:19,730 --> 01:49:25,909
related do we need that superset schema

2305
01:49:22,130 --> 01:49:29,420
Rob mentioned the ITF open config native

2306
01:49:25,909 --> 01:49:31,519
vendor that is one way of resolving

2307
01:49:29,420 --> 01:49:33,170
these conflicts where the vendor pre

2308
01:49:31,520 --> 01:49:39,170
does it and says that we support

2309
01:49:33,170 --> 01:49:42,230
Oh a package called ITF 100 and we have

2310
01:49:39,170 --> 01:49:44,330
offline this yang instance data that

2311
01:49:42,230 --> 01:49:45,860
shows what that package is and the

2312
01:49:44,330 --> 01:49:49,519
client therefore knows what to expect

2313
01:49:45,860 --> 01:49:52,820
same thing with a 2.0 so that could

2314
01:49:49,520 --> 01:49:55,760
include sub packages around l2 VPN l3

2315
01:49:52,820 --> 01:49:57,530
VPN but the client selects from a

2316
01:49:55,760 --> 01:50:01,130
version selection standpoint that

2317
01:49:57,530 --> 01:50:06,349
overarching package that overarching

2318
01:50:01,130 --> 01:50:08,920
schema the other thing is how do we

2319
01:50:06,350 --> 01:50:11,240
indicate what is a default schema

2320
01:50:08,920 --> 01:50:13,670
inversion so default package I should

2321
01:50:11,240 --> 01:50:16,070
say one of the things we talked about

2322
01:50:13,670 --> 01:50:18,230
was having the semicolon notation and

2323
01:50:16,070 --> 01:50:20,480
just say semicolon default and say is

2324
01:50:18,230 --> 01:50:22,910
part of the capabilities exchange this

2325
01:50:20,480 --> 01:50:24,709
is the default if you don't do that RPC

2326
01:50:22,910 --> 01:50:27,260
if you don't do anything this is what

2327
01:50:24,710 --> 01:50:29,740
you'll get likewise something that we

2328
01:50:27,260 --> 01:50:33,740
need to discuss is what recommendations

2329
01:50:29,740 --> 01:50:36,800
might we want to give to implementers

2330
01:50:33,740 --> 01:50:39,050
that says how do I decide for clients

2331
01:50:36,800 --> 01:50:40,730
that don't know anything about this so

2332
01:50:39,050 --> 01:50:42,710
this is a client that understands

2333
01:50:40,730 --> 01:50:44,450
version selection and what they'll get

2334
01:50:42,710 --> 01:50:47,150
by default but what if a client doesn't

2335
01:50:44,450 --> 01:50:49,720
yet understand anything about this how

2336
01:50:47,150 --> 01:50:52,540
do we support that client we can give

2337
01:50:49,720 --> 01:50:54,740
recommendations that say the default

2338
01:50:52,540 --> 01:50:57,019
non-selected should be something that

2339
01:50:54,740 --> 01:51:00,050
maintains backwards compatibility let's

2340
01:50:57,020 --> 01:51:03,110
say so for example we could give that

2341
01:51:00,050 --> 01:51:05,450
recommendation but again we need to

2342
01:51:03,110 --> 01:51:07,400
discuss how we go about handling the

2343
01:51:05,450 --> 01:51:11,019
defaults how we go about handling

2344
01:51:07,400 --> 01:51:17,570
clients that do not make an explicit

2345
01:51:11,020 --> 01:51:23,450
selection at a time next steps we pass

2346
01:51:17,570 --> 01:51:25,910
it over to rob banks on the with before

2347
01:51:23,450 --> 01:51:30,050
it's RFC actually defines how to handle

2348
01:51:25,910 --> 01:51:38,990
defaults in the default capability you

2349
01:51:30,050 --> 01:51:40,910
could we could look at that Thanks okay

2350
01:51:38,990 --> 01:51:42,710
so I'm going to try and get through this

2351
01:51:40,910 --> 01:51:45,200
one this is new dress I can't rush it

2352
01:51:42,710 --> 01:51:48,050
too quickly but I do want to also try

2353
01:51:45,200 --> 01:51:51,050
and get to this so we do have an extra

2354
01:51:48,050 --> 01:51:52,970
10 minutes in the next session yeah so

2355
01:51:51,050 --> 01:51:55,640
you can start now and then we take the

2356
01:51:52,970 --> 01:51:58,070
adoption question at the beginning of

2357
01:51:55,640 --> 01:52:00,350
the next session I'm just concerned that

2358
01:51:58,070 --> 01:52:02,509
then we might lose people yeah and

2359
01:52:00,350 --> 01:52:03,650
actually my co-chair may not be able to

2360
01:52:02,510 --> 01:52:06,820
wake up because he stayed up late for

2361
01:52:03,650 --> 01:52:10,670
that cough yeah I'll try be quite okay

2362
01:52:06,820 --> 01:52:12,170
so this is the last last draft at the

2363
01:52:10,670 --> 01:52:15,230
set of five so this completes the

2364
01:52:12,170 --> 01:52:17,330
solution so what is yang skin comparison

2365
01:52:15,230 --> 01:52:20,690
so effectively this draft is defining

2366
01:52:17,330 --> 01:52:22,790
algorithms to compare yang modules and

2367
01:52:20,690 --> 01:52:24,889
yang schema to determine the scope of

2368
01:52:22,790 --> 01:52:27,140
changes between different arbitrary

2369
01:52:24,890 --> 01:52:28,580
revisions and versions so it's similar

2370
01:52:27,140 --> 01:52:32,060
to what we all have been talking about a

2371
01:52:28,580 --> 01:52:34,370
lot about updating and using Yang semver

2372
01:52:32,060 --> 01:52:36,530
as modules change with NBC changes and

2373
01:52:34,370 --> 01:52:38,330
backs compatible changes but the idea

2374
01:52:36,530 --> 01:52:40,820
here is to define the talling on how you

2375
01:52:38,330 --> 01:52:43,280
do that and the talling would work both

2376
01:52:40,820 --> 01:52:45,860
between modules that were within their

2377
01:52:43,280 --> 01:52:47,660
history but also if you have some sort

2378
01:52:45,860 --> 01:52:51,410
of branching occurring between modules

2379
01:52:47,660 --> 01:52:55,010
the ability to compare versions between

2380
01:52:51,410 --> 01:52:59,930
different branches so the reason that

2381
01:52:55,010 --> 01:53:02,360
this is important is because in in not

2382
01:52:59,930 --> 01:53:03,560
in all cases December solve all the

2383
01:53:02,360 --> 01:53:04,790
issues so there's some cases where

2384
01:53:03,560 --> 01:53:07,070
you've got a branched

2385
01:53:04,790 --> 01:53:09,740
revision and your client might be

2386
01:53:07,070 --> 01:53:11,660
updating from one branch version to

2387
01:53:09,740 --> 01:53:13,309
another and they can't use the same

2388
01:53:11,660 --> 01:53:15,290
we're also to define whether or not less

2389
01:53:13,310 --> 01:53:18,560
backwards-compatible changes so this is

2390
01:53:15,290 --> 01:53:21,170
talling to to do that in addition to

2391
01:53:18,560 --> 01:53:23,270
that we define some extensions optional

2392
01:53:21,170 --> 01:53:25,430
extensions to provide some more

2393
01:53:23,270 --> 01:53:27,920
annotations to when changes occur to

2394
01:53:25,430 --> 01:53:30,740
modules and in cases where it's

2395
01:53:27,920 --> 01:53:32,690
ambiguous so where your taurine cannot

2396
01:53:30,740 --> 01:53:34,760
determine whether or not a change is

2397
01:53:32,690 --> 01:53:36,799
backwards compatible or not then the

2398
01:53:34,760 --> 01:53:39,080
assumption will be will default to be an

2399
01:53:36,800 --> 01:53:41,300
NBC change unless you had an annotation

2400
01:53:39,080 --> 01:53:45,470
to say that it's an editorial change or

2401
01:53:41,300 --> 01:53:46,580
abouts compatible change this is a 0 0

2402
01:53:45,470 --> 01:53:48,350
revision

2403
01:53:46,580 --> 01:53:52,820
was written last week it was published

2404
01:53:48,350 --> 01:53:54,410
on on Saturday Sunday the in terms of

2405
01:53:52,820 --> 01:53:55,910
the actual solution this has been

2406
01:53:54,410 --> 01:53:57,889
discussed quite a long time is really

2407
01:53:55,910 --> 01:54:01,849
matter writing it down but this is a

2408
01:53:57,890 --> 01:54:02,480
relatively new draft so why do we want

2409
01:54:01,850 --> 01:54:04,640
this

2410
01:54:02,480 --> 01:54:06,650
well revision labels and yang semver

2411
01:54:04,640 --> 01:54:08,600
work in the mainline case so if you're

2412
01:54:06,650 --> 01:54:11,240
updating along a linear provision

2413
01:54:08,600 --> 01:54:12,470
history then it it works quite well but

2414
01:54:11,240 --> 01:54:14,960
in the case you get to where it's

2415
01:54:12,470 --> 01:54:16,640
branched it is not so useful you can't

2416
01:54:14,960 --> 01:54:20,120
you can't rely on just those similar

2417
01:54:16,640 --> 01:54:22,010
numbers second the reason this is useful

2418
01:54:20,120 --> 01:54:25,250
is in terms of actually getting the

2419
01:54:22,010 --> 01:54:28,160
right semver numbers or the labeling

2420
01:54:25,250 --> 01:54:29,720
modules with the correct NBC labels it's

2421
01:54:28,160 --> 01:54:30,950
useful you got tolling that can actually

2422
01:54:29,720 --> 01:54:33,020
identify those rather than relying on

2423
01:54:30,950 --> 01:54:36,080
humans doing it as humans generally get

2424
01:54:33,020 --> 01:54:38,990
it wrong the third reason this is useful

2425
01:54:36,080 --> 01:54:40,490
is that clients aren't impacted if the

2426
01:54:38,990 --> 01:54:43,040
scheme has changed in the bits that

2427
01:54:40,490 --> 01:54:44,960
they're not using so if for example is

2428
01:54:43,040 --> 01:54:46,610
an NBC change in a feature that you're

2429
01:54:44,960 --> 01:54:48,770
not using but you don't really care

2430
01:54:46,610 --> 01:54:50,480
about that and from your perspective

2431
01:54:48,770 --> 01:54:53,240
you're upgrading your software you're

2432
01:54:50,480 --> 01:54:53,959
not if you may see that change as

2433
01:54:53,240 --> 01:54:55,910
effectively and that

2434
01:54:53,960 --> 01:54:59,330
backwards-compatible change because the

2435
01:54:55,910 --> 01:55:01,250
NBC changes don't break you and then

2436
01:54:59,330 --> 01:55:03,140
finally be able to define these standard

2437
01:55:01,250 --> 01:55:05,330
annotations could help improve the

2438
01:55:03,140 --> 01:55:07,850
accuracy of these comparison tools so by

2439
01:55:05,330 --> 01:55:10,490
having defined in a in a standard it

2440
01:55:07,850 --> 01:55:14,750
means that any tools can work with those

2441
01:55:10,490 --> 01:55:17,210
same definitions in terms of the details

2442
01:55:14,750 --> 01:55:19,130
with a generic tree comparison algorithm

2443
01:55:17,210 --> 01:55:20,780
it's not particularly magical in what

2444
01:55:19,130 --> 01:55:22,790
it's doing it's just doing walking down

2445
01:55:20,780 --> 01:55:25,900
the trees the schema trees and comparing

2446
01:55:22,790 --> 01:55:28,340
them the comparison is performed via

2447
01:55:25,900 --> 01:55:29,450
identifiers rather than the ordering so

2448
01:55:28,340 --> 01:55:32,000
that's the difference from what's then

2449
01:55:29,450 --> 01:55:35,269
what's in 7950 this means that you're

2450
01:55:32,000 --> 01:55:37,760
allowed to reorder statements okay and

2451
01:55:35,270 --> 01:55:40,160
that's not a problem but it does have

2452
01:55:37,760 --> 01:55:42,260
and some other complexity so and so

2453
01:55:40,160 --> 01:55:44,150
that's one choice we've made there the

2454
01:55:42,260 --> 01:55:46,250
Arrogant can either work on the like a

2455
01:55:44,150 --> 01:55:47,990
yang package level of full schema tree

2456
01:55:46,250 --> 01:55:50,780
or it can work on individual yang

2457
01:55:47,990 --> 01:55:53,090
modules and in terms of the definition

2458
01:55:50,780 --> 01:55:55,009
of the argument for yang packages we've

2459
01:55:53,090 --> 01:55:56,570
just defined at a standard version that

2460
01:55:55,010 --> 01:55:58,760
sort of gives you the worst case

2461
01:55:56,570 --> 01:56:00,099
scenario and that's what's useful for

2462
01:55:58,760 --> 01:56:02,019
defining what version

2463
01:56:00,099 --> 01:56:04,059
you package would be are also defined

2464
01:56:02,019 --> 01:56:06,280
options to give a sort of filtered

2465
01:56:04,059 --> 01:56:07,559
version that is tuned to what clients

2466
01:56:06,280 --> 01:56:09,999
might like to see

2467
01:56:07,559 --> 01:56:12,429
and then extension statements I

2468
01:56:09,999 --> 01:56:13,780
mentioned so to refine the comparison

2469
01:56:12,429 --> 01:56:18,070
I'll talk about those in a minute and

2470
01:56:13,780 --> 01:56:19,509
give examples so the filtered version

2471
01:56:18,070 --> 01:56:22,239
for the full yang schema so this is

2472
01:56:19,510 --> 01:56:24,309
covering the case where as are saying it

2473
01:56:22,239 --> 01:56:26,169
tries to answer question from a client's

2474
01:56:24,309 --> 01:56:28,689
perspective is moving from one software

2475
01:56:26,169 --> 01:56:30,369
release to another is okay there might

2476
01:56:28,689 --> 01:56:32,800
be some number cause collateral changes

2477
01:56:30,369 --> 01:56:35,079
am I going to be affected by those so

2478
01:56:32,800 --> 01:56:36,760
the suggestion here is you could filter

2479
01:56:35,079 --> 01:56:39,219
out some of these aspects because they

2480
01:56:36,760 --> 01:56:41,679
probably are less interested for clients

2481
01:56:39,219 --> 01:56:42,999
so if groupings have been changed in

2482
01:56:41,679 --> 01:56:44,709
terms of the actual names of those

2483
01:56:42,999 --> 01:56:45,760
groupings will have moved around that

2484
01:56:44,709 --> 01:56:47,679
doesn't affect the scheme that's

2485
01:56:45,760 --> 01:56:49,780
constructed so probably clients won't

2486
01:56:47,679 --> 01:56:51,489
care very much if the module metadata

2487
01:56:49,780 --> 01:56:54,009
information has changed you product care

2488
01:56:51,489 --> 01:56:55,509
you can restrict the comparison to the

2489
01:56:54,010 --> 01:56:57,909
subset of features you actually care

2490
01:56:55,510 --> 01:57:00,699
about you using them you could restrict

2491
01:56:57,909 --> 01:57:01,869
this the the comparison to the subset

2492
01:57:00,699 --> 01:57:03,879
the schema that's being used by the

2493
01:57:01,869 --> 01:57:05,889
clients you could feed in some instance

2494
01:57:03,879 --> 01:57:07,780
data document that says this is the

2495
01:57:05,889 --> 01:57:10,300
configuration I use or you could feed in

2496
01:57:07,780 --> 01:57:13,300
some XPath saying this is the trees I'm

2497
01:57:10,300 --> 01:57:15,969
interested in so that the the results of

2498
01:57:13,300 --> 01:57:17,949
that comparison actually is tuned to

2499
01:57:15,969 --> 01:57:19,629
what you're interested in and finally

2500
01:57:17,949 --> 01:57:21,219
you could filter it out very toriel

2501
01:57:19,629 --> 01:57:23,409
changes one of the things that comes up

2502
01:57:21,219 --> 01:57:25,749
quite a lot is where we're fixing like

2503
01:57:23,409 --> 01:57:27,638
description States improving those the

2504
01:57:25,749 --> 01:57:30,309
taller will naturally flag those up as

2505
01:57:27,639 --> 01:57:32,469
an NBC change because it can't tell when

2506
01:57:30,309 --> 01:57:34,179
you change the description whether the

2507
01:57:32,469 --> 01:57:36,519
semantics of the node has changed or

2508
01:57:34,179 --> 01:57:39,309
whether it's just some sort of minor

2509
01:57:36,519 --> 01:57:42,459
cleanup of those descriptions as it

2510
01:57:39,309 --> 01:57:44,379
gives a more refined answer some

2511
01:57:42,459 --> 01:57:45,879
examples of how these things work these

2512
01:57:44,379 --> 01:57:49,809
annotations work so I've got an example

2513
01:57:45,879 --> 01:57:53,169
of fixing a description so I've gone

2514
01:57:49,809 --> 01:57:57,010
from revision 1 0 0 to 1 0 1 that's the

2515
01:57:53,169 --> 01:57:58,869
standard module versioning update rules

2516
01:57:57,010 --> 01:58:01,030
and the similar being used there and

2517
01:57:58,869 --> 01:58:03,759
then at the bottom in that container foo

2518
01:58:01,030 --> 01:58:05,259
you can see that I've added I've changed

2519
01:58:03,760 --> 01:58:07,510
the description from do some stuff with

2520
01:58:05,260 --> 01:58:10,539
misspell to fix that I did a full stop

2521
01:58:07,510 --> 01:58:12,729
and I've now labeled that that is an

2522
01:58:10,539 --> 01:58:13,969
editorial change I said which particular

2523
01:58:12,729 --> 01:58:15,829
revision that editorial

2524
01:58:13,969 --> 01:58:17,329
changes occurred in so this means that

2525
01:58:15,829 --> 01:58:19,489
comparison tool that's comparing those

2526
01:58:17,329 --> 01:58:20,869
two revisions can then know that this

2527
01:58:19,489 --> 01:58:22,789
actually this isn't a non backless

2528
01:58:20,869 --> 01:58:25,159
capacitor change their flag up by

2529
01:58:22,789 --> 01:58:30,228
default but actually it's not of

2530
01:58:25,159 --> 01:58:33,018
consequence another example so this a

2531
01:58:30,229 --> 01:58:35,449
different label is a different

2532
01:58:33,019 --> 01:58:37,460
annotation we the draft defines an

2533
01:58:35,449 --> 01:58:40,690
annotation for effectively be able to

2534
01:58:37,460 --> 01:58:43,760
rename a node so it's changed here from

2535
01:58:40,690 --> 01:58:46,249
food to bar this change has been done in

2536
01:58:43,760 --> 01:58:47,900
a non box compatible way so the multiple

2537
01:58:46,249 --> 01:58:52,249
versions gone from one zero zero two two

2538
01:58:47,900 --> 01:58:54,320
zero zero but you've got a label under

2539
01:58:52,249 --> 01:58:57,110
the new container bar to say that was

2540
01:58:54,320 --> 01:58:58,940
related back to food so when the talling

2541
01:58:57,110 --> 01:59:01,030
is doing the comparison of the two trees

2542
01:58:58,940 --> 01:59:03,348
first of all they would look for

2543
01:59:01,030 --> 01:59:05,389
container bar in the old module wouldn't

2544
01:59:03,349 --> 01:59:06,710
find it if then C's got renamed from foo

2545
01:59:05,389 --> 01:59:09,739
and do the comparison against the food

2546
01:59:06,710 --> 01:59:12,469
so it allows you to do smarter changes

2547
01:59:09,739 --> 01:59:14,509
Sparta comparisons whereas by default

2548
01:59:12,469 --> 01:59:17,329
otherwise you would flag it up as a

2549
01:59:14,510 --> 01:59:19,249
delete and a crate we haven't

2550
01:59:17,329 --> 01:59:20,840
necessarily figured out exactly what all

2551
01:59:19,249 --> 01:59:23,179
of these things should be in this stage

2552
01:59:20,840 --> 01:59:25,489
it's just these ideas of sorts things

2553
01:59:23,179 --> 01:59:27,769
you do yes cuz the intention it would

2554
01:59:25,489 --> 01:59:31,759
that be like a UNIX rename like move can

2555
01:59:27,769 --> 01:59:36,050
I move it from foo it or route 2 inside

2556
01:59:31,760 --> 01:59:37,429
a container and say renamed at the

2557
01:59:36,050 --> 01:59:39,650
moment the moments just defined in the

2558
01:59:37,429 --> 01:59:41,929
same place in the tree but yes it's

2559
01:59:39,650 --> 01:59:49,460
actually could be so yeah the way Chris

2560
01:59:41,929 --> 01:59:50,659
named Chris hubs so I think to clarify I

2561
01:59:49,460 --> 01:59:52,039
think that's a detail that we need to

2562
01:59:50,659 --> 01:59:53,598
work out and we need to work out what

2563
01:59:52,039 --> 01:59:59,360
these extra annotations should be which

2564
01:59:53,599 --> 02:00:00,979
ones are useful so the next steps so the

2565
01:59:59,360 --> 02:00:02,929
so one the question is this defines

2566
02:00:00,979 --> 02:00:05,030
various extensions to the module

2567
02:00:02,929 --> 02:00:07,579
versioning things it could be done in

2568
02:00:05,030 --> 02:00:09,110
the module versioning draft it--if young

2569
02:00:07,579 --> 02:00:10,849
revisions it's in a new module within

2570
02:00:09,110 --> 02:00:13,280
this draft so it's questionable where

2571
02:00:10,849 --> 02:00:15,159
that goes we need to work exactly what

2572
02:00:13,280 --> 02:00:17,360
those annotations are needed and useful

2573
02:00:15,159 --> 02:00:20,900
again I think that could be done after

2574
02:00:17,360 --> 02:00:22,518
work group adoption and there's one

2575
02:00:20,900 --> 02:00:24,558
question is do we need an annotation to

2576
02:00:22,519 --> 02:00:27,770
mark something as NBC at the moment only

2577
02:00:24,559 --> 02:00:29,450
defines its assumes NBC by default

2578
02:00:27,770 --> 02:00:30,770
it doesn't know and then adds

2579
02:00:29,450 --> 02:00:34,340
annotations to say it's either

2580
02:00:30,770 --> 02:00:35,780
backwards-compatible editorial and then

2581
02:00:34,340 --> 02:00:39,739
another question that's come up is the

2582
02:00:35,780 --> 02:00:42,830
revision renamed from label allows you

2583
02:00:39,739 --> 02:00:44,718
to rename it but doesn't specify exactly

2584
02:00:42,830 --> 02:00:46,400
when that's occurred and I think that's

2585
02:00:44,719 --> 02:00:49,010
probably sufficient but there are

2586
02:00:46,400 --> 02:00:51,769
scenarios of you to just swap the two

2587
02:00:49,010 --> 02:00:53,930
names of two containers or you rename

2588
02:00:51,770 --> 02:00:55,460
one and introduce a new container with

2589
02:00:53,930 --> 02:00:57,350
that same old label that you'd have

2590
02:00:55,460 --> 02:00:59,360
issue so some details to be worked out

2591
02:00:57,350 --> 02:01:02,180
there but I think these could also be

2592
02:00:59,360 --> 02:01:05,179
figured out after adoption great rights

2593
02:01:02,180 --> 02:01:06,800
yeah all right thank you we see that

2594
02:01:05,180 --> 02:01:09,080
people already streaming out because we

2595
02:01:06,800 --> 02:01:11,840
are out of time we're gonna take the

2596
02:01:09,080 --> 02:01:14,360
first ten minutes of the next session to

2597
02:01:11,840 --> 02:01:15,680
discuss adoption there has been some

2598
02:01:14,360 --> 02:01:17,120
interesting conversation are anything

2599
02:01:15,680 --> 02:01:18,830
place in jabber that wanted to be

2600
02:01:17,120 --> 02:01:21,500
channeled and we ran at a time so we're

2601
02:01:18,830 --> 02:01:25,660
gonna do that first ten minutes so

2602
02:01:21,500 --> 02:01:25,660
please come back thank you thank you oh

2603
02:01:28,150 --> 02:01:32,980
and remember we're in a different room

2604
02:01:51,640 --> 02:02:08,830
we've been around and one last round

