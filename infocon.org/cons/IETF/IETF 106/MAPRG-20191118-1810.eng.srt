1
00:01:00,030 --> 00:01:07,150
okay everybody please sit down I would

2
00:01:05,290 --> 00:01:08,950
like to start very quickly because we

3
00:01:07,150 --> 00:01:13,060
have only an hour today and we actually

4
00:01:08,950 --> 00:01:15,939
got a couple of nice talks and we have

5
00:01:13,060 --> 00:01:19,810
to make sure we keep ourself and time

6
00:01:15,939 --> 00:01:22,089
welcome to the MapReduce session

7
00:01:19,810 --> 00:01:24,220
I'm a equipment and unfortunately my

8
00:01:22,090 --> 00:01:29,020
co-chair Dave is not here today but

9
00:01:24,220 --> 00:01:33,580
hopefully he will be back next time we

10
00:01:29,020 --> 00:01:35,979
have an R IRT F session here but we also

11
00:01:33,580 --> 00:01:41,050
have a note well which is very similar

12
00:01:35,980 --> 00:01:44,920
to the IETF note well regarding property

13
00:01:41,050 --> 00:01:47,440
rights so please if you're not familiar

14
00:01:44,920 --> 00:01:52,540
with that make yourself with it but I

15
00:01:47,440 --> 00:01:55,060
would also like to point out the code of

16
00:01:52,540 --> 00:01:57,460
code of conduct and any kind of privacy

17
00:01:55,060 --> 00:02:00,520
related policies that we have in the

18
00:01:57,460 --> 00:02:04,479
IETF which of course also apply to this

19
00:02:00,520 --> 00:02:06,759
meeting and which is especially

20
00:02:04,479 --> 00:02:09,489
important when discussion get heated

21
00:02:06,760 --> 00:02:13,120
right everybody should maybe think about

22
00:02:09,489 --> 00:02:14,739
a second to use the right words to be

23
00:02:13,120 --> 00:02:15,940
friendly to each other which I don't

24
00:02:14,739 --> 00:02:17,680
think it's a problem usually have in

25
00:02:15,940 --> 00:02:22,030
this session but it's still good to

26
00:02:17,680 --> 00:02:24,189
remind yourself about it and then also

27
00:02:22,030 --> 00:02:27,670
another reminder that this is actually

28
00:02:24,189 --> 00:02:30,790
an RTF session here and not an IETF

29
00:02:27,670 --> 00:02:33,040
session so while it's nicely integrated

30
00:02:30,790 --> 00:02:35,079
and we get like a nice of exchange of

31
00:02:33,040 --> 00:02:38,380
people and I hope everybody is enjoying

32
00:02:35,080 --> 00:02:40,959
this from like in research and an

33
00:02:38,380 --> 00:02:42,280
engineering point of view the IRT

34
00:02:40,959 --> 00:02:43,840
working groups usually don't do

35
00:02:42,280 --> 00:02:48,129
standards right so that's important

36
00:02:43,840 --> 00:02:50,560
different in member G we mainly focus on

37
00:02:48,129 --> 00:02:52,540
I'm getting researchers in here to

38
00:02:50,560 --> 00:02:54,370
present the measurement results and I

39
00:02:52,540 --> 00:02:57,400
think this is very well received in the

40
00:02:54,370 --> 00:03:01,840
IETF as well and but like be aware that

41
00:02:57,400 --> 00:03:03,400
this is not the same okay that's the

42
00:03:01,840 --> 00:03:06,780
usual slides you will find inside stick

43
00:03:03,400 --> 00:03:09,310
if you need any of the pointers here and

44
00:03:06,780 --> 00:03:13,090
this is like we already have the last

45
00:03:09,310 --> 00:03:15,760
time so Dave and I would like to add

46
00:03:13,090 --> 00:03:17,560
another chair because as you can see if

47
00:03:15,760 --> 00:03:20,230
it's not here so getting a little more

48
00:03:17,560 --> 00:03:22,090
coverage would be nice but it's also a

49
00:03:20,230 --> 00:03:23,950
matter of outreach right so Dave and I

50
00:03:22,090 --> 00:03:25,480
do a lot of things where we try to

51
00:03:23,950 --> 00:03:27,129
contact people in the research community

52
00:03:25,480 --> 00:03:31,168
to get them here and present their work

53
00:03:27,129 --> 00:03:33,879
so having more help with that will like

54
00:03:31,169 --> 00:03:37,000
extend our outreach and maybe also get

55
00:03:33,879 --> 00:03:38,290
different angles in so ideally we are

56
00:03:37,000 --> 00:03:40,090
looking for somebody who is like

57
00:03:38,290 --> 00:03:42,638
well-established in academia and

58
00:03:40,090 --> 00:03:44,739
community and and has contacts there and

59
00:03:42,639 --> 00:03:47,379
is interested in engaging with people

60
00:03:44,739 --> 00:03:52,060
and bringing their work to the IETF or

61
00:03:47,379 --> 00:03:53,590
the IR gf we put up this call last time

62
00:03:52,060 --> 00:03:55,449
already and we got a couple of responses

63
00:03:53,590 --> 00:03:58,239
and like we from our side we're actually

64
00:03:55,449 --> 00:03:59,919
not very active about it so we didn't we

65
00:03:58,239 --> 00:04:01,449
didn't make any decision yet so you can

66
00:03:59,919 --> 00:04:06,400
still send us an email if you're

67
00:04:01,449 --> 00:04:08,040
interested in to help out and that's the

68
00:04:06,400 --> 00:04:11,560
point where we already get to our agenda

69
00:04:08,040 --> 00:04:13,150
and um if you have noticed or not there

70
00:04:11,560 --> 00:04:15,639
was like a last-minute agenda update

71
00:04:13,150 --> 00:04:17,560
that I did this morning so in the last

72
00:04:15,639 --> 00:04:19,599
couple of days I actually reached out to

73
00:04:17,560 --> 00:04:21,280
a couple of people and just asking them

74
00:04:19,599 --> 00:04:22,690
for deployment number four quick because

75
00:04:21,279 --> 00:04:23,948
that's a question I get very often you

76
00:04:22,690 --> 00:04:26,259
know how much quick is out there at the

77
00:04:23,949 --> 00:04:28,060
moment and I thought it this is a nice

78
00:04:26,259 --> 00:04:30,789
group to actually you know collect these

79
00:04:28,060 --> 00:04:33,370
numbers and present them to you so I

80
00:04:30,789 --> 00:04:35,199
have like four slides from four

81
00:04:33,370 --> 00:04:36,880
different companies giving me different

82
00:04:35,199 --> 00:04:39,880
kind of numbers and I will present them

83
00:04:36,880 --> 00:04:40,930
to you and and you know if you think

84
00:04:39,880 --> 00:04:42,370
there's something useful then maybe

85
00:04:40,930 --> 00:04:43,780
that's also something that like we as

86
00:04:42,370 --> 00:04:45,130
the chairs could could do more often in

87
00:04:43,780 --> 00:04:47,109
this group not only for quick but maybe

88
00:04:45,130 --> 00:04:48,409
also for other protocols just to get

89
00:04:47,110 --> 00:04:50,619
like an up-to-date number

90
00:04:48,410 --> 00:04:53,210
[Music]

91
00:04:50,619 --> 00:04:56,869
afterwards we have a presentation by a

92
00:04:53,210 --> 00:04:59,948
Nicholas about loss in sacrum networks

93
00:04:56,869 --> 00:05:02,779
and then we have three presentations

94
00:04:59,949 --> 00:05:05,029
from of papers which have been presented

95
00:05:02,779 --> 00:05:08,240
just like two weeks ago I believe at the

96
00:05:05,029 --> 00:05:11,360
IMC conference all really nice and good

97
00:05:08,240 --> 00:05:13,279
and exciting papers one author is he in

98
00:05:11,360 --> 00:05:14,929
person which is really great and the

99
00:05:13,279 --> 00:05:28,249
other two others will be joining us

100
00:05:14,929 --> 00:05:30,498
remotely okay so because we have four

101
00:05:28,249 --> 00:05:34,639
talks in only one hour time I will be

102
00:05:30,499 --> 00:05:37,309
very quickly here and so that's what I

103
00:05:34,639 --> 00:05:39,050
got in the last couple of days I got a

104
00:05:37,309 --> 00:05:41,599
number from YouTube which is kind of the

105
00:05:39,050 --> 00:05:44,809
number that we all might be aware of to

106
00:05:41,599 --> 00:05:49,429
some extent so quick had like within

107
00:05:44,809 --> 00:05:54,019
YouTube about 30 33 percent of the

108
00:05:49,429 --> 00:05:57,018
traffic was in December 2017 was a quick

109
00:05:54,019 --> 00:05:58,459
already which was published in a sukham

110
00:05:57,019 --> 00:06:00,649
paper and also presented in memory I

111
00:05:58,459 --> 00:06:02,360
think and the updated number is that

112
00:06:00,649 --> 00:06:05,149
there now about 50 percent of the u.s.

113
00:06:02,360 --> 00:06:07,939
traffic volume and this also aligns was

114
00:06:05,149 --> 00:06:13,309
about being 50% of the playout requests

115
00:06:07,939 --> 00:06:16,039
I got this information from Ian who I

116
00:06:13,309 --> 00:06:17,180
don't see at the moment but like if you

117
00:06:16,039 --> 00:06:22,869
want more information you can probably

118
00:06:17,180 --> 00:06:26,479
talk to him and then I talked to

119
00:06:22,869 --> 00:06:28,519
Facebook and they are rolling out quick

120
00:06:26,479 --> 00:06:32,269
on there between their own server and

121
00:06:28,519 --> 00:06:35,149
for their major applications so for

122
00:06:32,269 --> 00:06:37,099
their major application it's actually 80

123
00:06:35,149 --> 00:06:43,189
to 90 percent of the traffic is using

124
00:06:37,099 --> 00:06:48,709
quick and that's quick ITF quick version

125
00:06:43,189 --> 00:06:51,379
23 and the other 10 to 20 percent it's

126
00:06:48,709 --> 00:06:53,689
actually some some of them is fallback

127
00:06:51,379 --> 00:06:55,189
to TCP of course that some of them might

128
00:06:53,689 --> 00:06:57,019
be also connected to their role all

129
00:06:55,189 --> 00:06:59,259
strategies so like sometimes they don't

130
00:06:57,019 --> 00:07:02,839
use they decide to not use quick right

131
00:06:59,259 --> 00:07:05,860
but like that you know is basically

132
00:07:02,839 --> 00:07:05,860
their role or plan

133
00:07:08,540 --> 00:07:15,260
then I wanted some Marco's from Deutsche

134
00:07:11,900 --> 00:07:17,270
Telekom who's actually here and forget

135
00:07:15,260 --> 00:07:18,740
also the operators few so like what's on

136
00:07:17,270 --> 00:07:22,460
if you look passively on your network

137
00:07:18,740 --> 00:07:24,170
what's the number of quick you see so

138
00:07:22,460 --> 00:07:27,469
that's the number for any traffic that

139
00:07:24,170 --> 00:07:30,530
is VDP on port four four three which is

140
00:07:27,470 --> 00:07:33,530
assumed to be quick and what they see is

141
00:07:30,530 --> 00:07:35,659
about 10% of the in the fixed network

142
00:07:33,530 --> 00:07:38,299
here 10% of the downlink traffic is

143
00:07:35,660 --> 00:07:40,480
quick and about 4% of the uplink traffic

144
00:07:38,300 --> 00:07:44,380
in terms of traffic volume is quick and

145
00:07:40,480 --> 00:07:49,340
so he also presented a comparable number

146
00:07:44,380 --> 00:07:51,020
last year in T sweet Abbott you and you

147
00:07:49,340 --> 00:07:53,419
can see the number here and actually the

148
00:07:51,020 --> 00:07:55,130
the percentage went a little bit down so

149
00:07:53,420 --> 00:07:56,450
it used to be something eleven point

150
00:07:55,130 --> 00:07:58,460
something percent and now it's around

151
00:07:56,450 --> 00:07:59,960
ten which is a little bit surprising but

152
00:07:58,460 --> 00:08:01,340
you can also talk to mark about this

153
00:07:59,960 --> 00:08:06,469
Marcus about this if you want to stand

154
00:08:01,340 --> 00:08:10,609
up so people see your face yeah that's a

155
00:08:06,470 --> 00:08:14,000
guy and then I get some numbers from

156
00:08:10,610 --> 00:08:17,890
Akamai and because they support quick

157
00:08:14,000 --> 00:08:22,669
for their customers for certain products

158
00:08:17,890 --> 00:08:25,190
so not all of their products get the the

159
00:08:22,669 --> 00:08:27,349
possibility to use quick but most of the

160
00:08:25,190 --> 00:08:30,680
products that have actually large data

161
00:08:27,350 --> 00:08:33,620
audience can use quick and I can use

162
00:08:30,680 --> 00:08:35,510
quick kind of by default of course if

163
00:08:33,620 --> 00:08:37,490
the other end supports quick so this is

164
00:08:35,510 --> 00:08:38,689
only possible for Chrome because that's

165
00:08:37,490 --> 00:08:40,760
like kind of the only client that

166
00:08:38,690 --> 00:08:46,220
supports quick and it also depends a

167
00:08:40,760 --> 00:08:47,990
little bit on your gear location so so

168
00:08:46,220 --> 00:08:50,300
basically there they offer the

169
00:08:47,990 --> 00:08:52,550
possibility to use quick the next time

170
00:08:50,300 --> 00:08:55,069
you connect to the same service to a

171
00:08:52,550 --> 00:08:56,420
large set of client but then that

172
00:08:55,070 --> 00:08:58,250
doesn't mean that like all of these

173
00:08:56,420 --> 00:08:59,660
lines come back to you and actually use

174
00:08:58,250 --> 00:09:03,230
quick the next time they connect to you

175
00:08:59,660 --> 00:09:04,310
so for example in China is only about 20

176
00:09:03,230 --> 00:09:06,440
percent of the clients that would

177
00:09:04,310 --> 00:09:08,719
actually use quick because a lot of the

178
00:09:06,440 --> 00:09:12,080
clients that claim to be chrome are not

179
00:09:08,720 --> 00:09:15,230
and so they don't even speak quick in

180
00:09:12,080 --> 00:09:17,300
terms of traffic volume it's after all

181
00:09:15,230 --> 00:09:18,110
about like 1% of the total traffic

182
00:09:17,300 --> 00:09:20,269
volume

183
00:09:18,110 --> 00:09:23,300
and but that's also a lot as you see

184
00:09:20,269 --> 00:09:26,570
with the numbers here also interesting

185
00:09:23,300 --> 00:09:30,319
was that about 50% of the connections

186
00:09:26,570 --> 00:09:32,149
used and 0 GT so that's also Val used

187
00:09:30,320 --> 00:09:36,380
and very interesting do you want to add

188
00:09:32,149 --> 00:09:37,670
anything ego or also raise your hand so

189
00:09:36,380 --> 00:09:42,829
people see you and can ask your

190
00:09:37,670 --> 00:09:45,500
questions actually I have one more slide

191
00:09:42,829 --> 00:09:47,359
right so um he was a so kind to not only

192
00:09:45,500 --> 00:09:49,880
provide a number but also something over

193
00:09:47,360 --> 00:09:52,490
time and this is a tiny so you can look

194
00:09:49,880 --> 00:09:55,519
up the sides in the proceedings but this

195
00:09:52,490 --> 00:10:00,459
is kind of two minute samples about the

196
00:09:55,519 --> 00:10:03,019
amount of quick traffic you can see and

197
00:10:00,459 --> 00:10:05,750
split up by version or so that they

198
00:10:03,019 --> 00:10:08,329
support different versions in line with

199
00:10:05,750 --> 00:10:13,160
basically what Google is deploying right

200
00:10:08,329 --> 00:10:15,410
yep okay so that's just a very quick

201
00:10:13,160 --> 00:10:18,380
update that I squeezed in here and I

202
00:10:15,410 --> 00:10:20,240
hope you find it useful thank you

203
00:10:18,380 --> 00:10:21,140
everybody who provided the data also in

204
00:10:20,240 --> 00:10:23,329
a very short notice

205
00:10:21,140 --> 00:10:28,130
and if there are no questions we just

206
00:10:23,329 --> 00:10:29,930
move on you in showed up so index the

207
00:10:28,130 --> 00:10:36,230
guys for YouTube if you have other

208
00:10:29,930 --> 00:10:38,589
questions yes okay then we go to the

209
00:10:36,230 --> 00:10:38,589
next presentation

210
00:10:43,600 --> 00:10:46,739
[Music]

211
00:10:51,199 --> 00:10:57,319
everyone I know the timing is tight so I

212
00:10:55,220 --> 00:10:59,740
will go quickly over the slides and be

213
00:10:57,319 --> 00:11:02,899
available for any questions if you have

214
00:10:59,740 --> 00:11:05,360
so this is control Queens lots of people

215
00:11:02,899 --> 00:11:11,170
you have the names of the slides and my

216
00:11:05,360 --> 00:11:20,269
name is Nicholas we are focusing on

217
00:11:11,170 --> 00:11:22,279
losses one of the thing is on satellite

218
00:11:20,269 --> 00:11:24,829
systems the wife the satellite thing is

219
00:11:22,279 --> 00:11:27,230
actually lost free we don't have any

220
00:11:24,829 --> 00:11:29,089
losses usually except for specific parts

221
00:11:27,230 --> 00:11:32,689
of India where you have very heavy rains

222
00:11:29,089 --> 00:11:35,899
in specific bands however we wonder

223
00:11:32,689 --> 00:11:39,139
whether we have losses somewhere when

224
00:11:35,899 --> 00:11:41,810
you use our in accesses and why because

225
00:11:39,139 --> 00:11:43,220
we usually use TCP proxies not only for

226
00:11:41,810 --> 00:11:46,399
acceleration and these kind of things

227
00:11:43,220 --> 00:11:50,269
but more for splitting the reliability

228
00:11:46,399 --> 00:11:52,910
management so on the picture below you

229
00:11:50,269 --> 00:11:55,100
have somehow a multi gateway satellite

230
00:11:52,910 --> 00:11:57,469
system so we see that we are there are

231
00:11:55,100 --> 00:12:01,220
many places where we could actually lose

232
00:11:57,470 --> 00:12:04,790
packets and but to have a better view on

233
00:12:01,220 --> 00:12:08,949
that we just made simple experiments so

234
00:12:04,790 --> 00:12:12,649
we have several in Isaiah that school

235
00:12:08,949 --> 00:12:14,420
with Pico quick enabled and so we have

236
00:12:12,649 --> 00:12:15,980
just been using a public satellite

237
00:12:14,420 --> 00:12:21,649
access and they're learning quick

238
00:12:15,980 --> 00:12:23,300
packets we have seen so I have more data

239
00:12:21,649 --> 00:12:26,180
if you want to speak and I'll have time

240
00:12:23,300 --> 00:12:29,000
to go through it but we have done from G

241
00:12:26,180 --> 00:12:32,989
but at modeling and we ended up having

242
00:12:29,000 --> 00:12:35,809
almost two persons packet losses so I

243
00:12:32,990 --> 00:12:37,579
had to chat with GUI earlier and it

244
00:12:35,809 --> 00:12:39,410
helped me that on île access you don't

245
00:12:37,579 --> 00:12:41,809
have such losses so that may be how the

246
00:12:39,410 --> 00:12:43,850
operator is tuning doing from traffic

247
00:12:41,809 --> 00:12:45,649
shaping and that may be on the wireless

248
00:12:43,850 --> 00:12:48,620
things we have after the satellite

249
00:12:45,649 --> 00:12:51,920
terminal so to have more ideas on where

250
00:12:48,620 --> 00:12:54,680
the losses come from we have done

251
00:12:51,920 --> 00:12:56,339
another experiment using another type of

252
00:12:54,680 --> 00:12:59,279
satellite axis

253
00:12:56,339 --> 00:13:03,389
so this time we have been using Akamai

254
00:12:59,279 --> 00:13:06,779
servers with the the HF quick

255
00:13:03,389 --> 00:13:10,819
implementation we have used the loss

256
00:13:06,779 --> 00:13:15,059
intensification missiles on the draft

257
00:13:10,819 --> 00:13:21,149
proposed by Horan Akamai and for one we

258
00:13:15,059 --> 00:13:24,240
enter the rotor nests we are in our own

259
00:13:21,149 --> 00:13:28,309
company company Network where these very

260
00:13:24,240 --> 00:13:30,839
low losses and the 30 light here is

261
00:13:28,309 --> 00:13:33,209
satellite we operate so we have some

262
00:13:30,839 --> 00:13:35,730
bandwidth on it so when you were alone

263
00:13:33,209 --> 00:13:37,649
on the satellite at this moment on this

264
00:13:35,730 --> 00:13:40,999
part of the satellite you note that rich

265
00:13:37,649 --> 00:13:44,959
and basically we have three different

266
00:13:40,999 --> 00:13:49,920
points where we could make TCP dump

267
00:13:44,959 --> 00:13:51,959
measurements captures one is before such

268
00:13:49,920 --> 00:13:54,089
a gateway one is just wide after a

269
00:13:51,959 --> 00:13:57,268
satellite terminal and one is just

270
00:13:54,089 --> 00:13:59,009
before the end user again I don't have

271
00:13:57,269 --> 00:14:02,160
time to go through the details but what

272
00:13:59,009 --> 00:14:05,699
the useful tool enabled us to do is to

273
00:14:02,160 --> 00:14:09,719
show that basically green if end-to-end

274
00:14:05,699 --> 00:14:12,029
losses and purple is the Russ's we have

275
00:14:09,720 --> 00:14:14,399
up to these points so we know that from

276
00:14:12,029 --> 00:14:16,110
the pot point before the gateway we know

277
00:14:14,399 --> 00:14:19,680
that before we change satellite gateway

278
00:14:16,110 --> 00:14:23,160
we don't have losses and then if we look

279
00:14:19,680 --> 00:14:25,769
at the purple part here basically these

280
00:14:23,160 --> 00:14:27,809
are the losses we have that are

281
00:14:25,769 --> 00:14:30,360
happening at the gateway level of the

282
00:14:27,809 --> 00:14:32,370
satellite link we have from tools

283
00:14:30,360 --> 00:14:33,779
knowing that that doesn't come it wasn't

284
00:14:32,370 --> 00:14:36,209
raining that day so we know that the

285
00:14:33,779 --> 00:14:39,389
satellite was properly sized there

286
00:14:36,209 --> 00:14:41,790
wasn't losses on that part and then we

287
00:14:39,389 --> 00:14:44,129
have emulated 1% Wi-Fi losses and we

288
00:14:41,790 --> 00:14:47,219
could see again the losses between

289
00:14:44,129 --> 00:14:49,920
satellite terminal and the end user so

290
00:14:47,220 --> 00:14:52,829
to go back to our problem here the

291
00:14:49,920 --> 00:14:55,339
losses can actually happen before that

292
00:14:52,829 --> 00:14:57,839
like gateway we could we know from

293
00:14:55,339 --> 00:15:01,379
Gateway manufacturers increment traffic

294
00:14:57,839 --> 00:15:04,439
shapers so that is what we see here and

295
00:15:01,379 --> 00:15:09,240
then another measurement we did is what

296
00:15:04,439 --> 00:15:09,900
that was more from benchmark of my Wi-Fi

297
00:15:09,240 --> 00:15:14,250
access at home

298
00:15:09,900 --> 00:15:20,819
and I could measure one slightly less

299
00:15:14,250 --> 00:15:27,090
than one person dresses on in the on the

300
00:15:20,820 --> 00:15:29,760
wireless part so that is something I use

301
00:15:27,090 --> 00:15:31,590
at my place because satellite industry

302
00:15:29,760 --> 00:15:33,720
you have fun focuses on physical layer

303
00:15:31,590 --> 00:15:35,940
problems and why I explain to people

304
00:15:33,720 --> 00:15:38,940
that losing one packet out of out of

305
00:15:35,940 --> 00:15:40,890
thousand is a big problem for TCP I just

306
00:15:38,940 --> 00:15:42,870
made these measurements using the same

307
00:15:40,890 --> 00:15:45,840
real satellite where basically we have

308
00:15:42,870 --> 00:15:47,790
HTTP server and and you there we don't

309
00:15:45,840 --> 00:15:52,110
have any proxies and we just have these

310
00:15:47,790 --> 00:15:55,020
losses that are emulated and before

311
00:15:52,110 --> 00:15:57,390
after the ferry terminal and we can feed

312
00:15:55,020 --> 00:15:58,980
just if we take one point that if we do

313
00:15:57,390 --> 00:16:03,650
with one packet out of a minion the

314
00:15:58,980 --> 00:16:06,900
throughput electric divided by two so

315
00:16:03,650 --> 00:16:08,610
the main point of my talk is that we do

316
00:16:06,900 --> 00:16:12,090
actually have losses on satellite links

317
00:16:08,610 --> 00:16:14,430
a satellite access whether it is on the

318
00:16:12,090 --> 00:16:17,160
satellites part or on the ground segment

319
00:16:14,430 --> 00:16:18,989
or after satellite a me know if we are

320
00:16:17,160 --> 00:16:24,180
using quick that's a problem we will

321
00:16:18,990 --> 00:16:27,900
have to solve so at the moment we are

322
00:16:24,180 --> 00:16:30,510
looking at maybe to solve this issue

323
00:16:27,900 --> 00:16:33,420
we know that for short files quick is

324
00:16:30,510 --> 00:16:35,100
actually great with because we save the

325
00:16:33,420 --> 00:16:38,040
connection in Tabish meantime so that is

326
00:16:35,100 --> 00:16:40,260
awesome we foresaw theis we do the same

327
00:16:38,040 --> 00:16:42,870
with of proxies and we want to achieve

328
00:16:40,260 --> 00:16:45,810
the same gain with quick without boxes

329
00:16:42,870 --> 00:16:47,730
but for large files as well and for that

330
00:16:45,810 --> 00:16:49,410
we need to do some tunings so at the

331
00:16:47,730 --> 00:16:53,580
moment we are thinking that one solution

332
00:16:49,410 --> 00:16:55,490
could be using coding in quick then

333
00:16:53,580 --> 00:16:57,270
there are discussions on between

334
00:16:55,490 --> 00:16:59,700
interactions between this collision

335
00:16:57,270 --> 00:17:02,220
control in quick and and the coding we

336
00:16:59,700 --> 00:17:05,880
add so for that we have started the

337
00:17:02,220 --> 00:17:07,770
discussion documenting and networking

338
00:17:05,880 --> 00:17:10,920
with each group on the interactions and

339
00:17:07,770 --> 00:17:14,099
base current practices on how we can

340
00:17:10,920 --> 00:17:18,030
actually neglect or not packet that have

341
00:17:14,099 --> 00:17:21,839
been recovered by opening mechanism so

342
00:17:18,030 --> 00:17:23,520
and also to speak a bit more wider on

343
00:17:21,839 --> 00:17:26,938
all these topics that we have for

344
00:17:23,520 --> 00:17:30,600
and issues we have in quick with over hi

345
00:17:26,939 --> 00:17:33,510
bgp networks we have site meeting on

346
00:17:30,600 --> 00:17:36,000
wednesday afternoon the room is open for

347
00:17:33,510 --> 00:17:41,280
anyone who wants to show results discuss

348
00:17:36,000 --> 00:17:49,140
and collaborate with us on this thank

349
00:17:41,280 --> 00:17:51,690
you yeah thank you very much I think we

350
00:17:49,140 --> 00:17:54,300
have a little bit time for questions if

351
00:17:51,690 --> 00:17:56,400
people wanted ask something otherwise

352
00:17:54,300 --> 00:18:00,139
it's also good to move on because of

353
00:17:56,400 --> 00:18:00,140
time thank you okay thank you very much

354
00:18:04,130 --> 00:18:12,630
so next because Blake thank you being

355
00:18:07,230 --> 00:18:18,540
here and should be set up perfect hey

356
00:18:12,630 --> 00:18:19,950
thanks so I'm going to talk about some

357
00:18:18,540 --> 00:18:21,928
work that we've done recently about

358
00:18:19,950 --> 00:18:24,120
combining endpoint and network data and

359
00:18:21,929 --> 00:18:26,190
what we can do with that just a level

360
00:18:24,120 --> 00:18:27,719
set TLS fingerprinting real quick we

361
00:18:26,190 --> 00:18:29,910
have the client hello we take some

362
00:18:27,720 --> 00:18:34,230
features like the protocol version

363
00:18:29,910 --> 00:18:36,420
cipher suites extensions and we ideally

364
00:18:34,230 --> 00:18:38,850
want to map them to some you know

365
00:18:36,420 --> 00:18:42,120
responses of interest like the process

366
00:18:38,850 --> 00:18:45,240
named the sha-256 operating system

367
00:18:42,120 --> 00:18:47,520
version so this is the idea that kind of

368
00:18:45,240 --> 00:18:48,929
where we want to go with TLS fingerprint

369
00:18:47,520 --> 00:18:51,840
or what people typically want to do with

370
00:18:48,929 --> 00:18:56,550
TLS fingerprinting we created a couple

371
00:18:51,840 --> 00:18:58,830
of open-source tools that generally do

372
00:18:56,550 --> 00:19:02,730
network fingerprinting and some light

373
00:18:58,830 --> 00:19:04,919
analysis they're both on github one of

374
00:19:02,730 --> 00:19:06,809
them is see high speed one of them is

375
00:19:04,920 --> 00:19:11,280
Python where we do some experimental

376
00:19:06,809 --> 00:19:13,980
work okay so this is kind of the key

377
00:19:11,280 --> 00:19:17,399
component of the IMC work the network

378
00:19:13,980 --> 00:19:23,540
endpoint data fusion pipeline

379
00:19:17,400 --> 00:19:26,370
it is currently getting data from five

380
00:19:23,540 --> 00:19:28,860
geographically distinct enterprise

381
00:19:26,370 --> 00:19:32,040
networks so kind of scattered around the

382
00:19:28,860 --> 00:19:33,620
world so we get a good a good

383
00:19:32,040 --> 00:19:37,460
representation of different applications

384
00:19:33,620 --> 00:19:41,550
there are 24,000 users

385
00:19:37,460 --> 00:19:46,560
it is I guess one of the biases

386
00:19:41,550 --> 00:19:49,909
primarily opera mac OS and windows so

387
00:19:46,560 --> 00:19:53,909
these are instrumented managed endpoints

388
00:19:49,910 --> 00:19:59,400
there's some Linux but it's very small

389
00:19:53,910 --> 00:20:01,770
amount and yeah so basically we're

390
00:19:59,400 --> 00:20:03,990
monitoring those networks we're

391
00:20:01,770 --> 00:20:07,800
collecting kind of typical net flow

392
00:20:03,990 --> 00:20:09,690
information plus the the fingerprinting

393
00:20:07,800 --> 00:20:13,260
information so the TLS fingerprint there

394
00:20:09,690 --> 00:20:16,320
and then the managed end points are also

395
00:20:13,260 --> 00:20:20,100
exporting NetFlow like information

396
00:20:16,320 --> 00:20:22,800
through the any connect and vm VPN agent

397
00:20:20,100 --> 00:20:28,649
so that gives us again the network

398
00:20:22,800 --> 00:20:31,139
5-tuple plus the sha-256 hash of the

399
00:20:28,650 --> 00:20:33,060
process that created the connection

400
00:20:31,140 --> 00:20:37,200
process name and some operating system

401
00:20:33,060 --> 00:20:39,300
information and we collect all of that

402
00:20:37,200 --> 00:20:41,010
data continuously and then at the end of

403
00:20:39,300 --> 00:20:43,379
each day we run a Big Data job that

404
00:20:41,010 --> 00:20:46,020
merges based on the five tuples and the

405
00:20:43,380 --> 00:20:48,180
timestamps and then we end up with all

406
00:20:46,020 --> 00:20:50,730
of these kind of super flow records that

407
00:20:48,180 --> 00:20:52,260
have all of the network information that

408
00:20:50,730 --> 00:20:56,310
we need for fingerprinting plus all of

409
00:20:52,260 --> 00:20:59,670
the ground truth that we can use for you

410
00:20:56,310 --> 00:21:03,419
know generating the labels at that point

411
00:20:59,670 --> 00:21:05,430
I guess that the I should say that we

412
00:21:03,420 --> 00:21:07,560
kind of piggybacked off the current

413
00:21:05,430 --> 00:21:10,110
security monitoring infrastructure so

414
00:21:07,560 --> 00:21:12,450
they obviously need identifying

415
00:21:10,110 --> 00:21:14,850
information for our uses we don't need

416
00:21:12,450 --> 00:21:17,220
any of it so we just strip it all to

417
00:21:14,850 --> 00:21:18,449
avoid some of those issues and the last

418
00:21:17,220 --> 00:21:20,310
thing that I'll say about the data

419
00:21:18,450 --> 00:21:21,660
fusion pipeline is that you know

420
00:21:20,310 --> 00:21:25,020
throughout this talk it will be very

421
00:21:21,660 --> 00:21:28,650
specific to TLS but it is much more

422
00:21:25,020 --> 00:21:30,060
general than that so it's actually

423
00:21:28,650 --> 00:21:33,660
applicable to pretty much any any

424
00:21:30,060 --> 00:21:35,129
protocol so as soon as we define a new

425
00:21:33,660 --> 00:21:38,250
fingerprint generation module and

426
00:21:35,130 --> 00:21:39,810
Mercury the the data fusion pipeline can

427
00:21:38,250 --> 00:21:42,210
automatically pick up on that and start

428
00:21:39,810 --> 00:21:46,440
generating daily fingerprint databases

429
00:21:42,210 --> 00:21:49,170
for that protocol and then just kind of

430
00:21:46,440 --> 00:21:50,400
how we do that I mean it's pretty simple

431
00:21:49,170 --> 00:21:53,370
right so we get the thing

432
00:21:50,400 --> 00:21:54,930
databases for each day then we you know

433
00:21:53,370 --> 00:21:59,550
run job to merge them so we get the

434
00:21:54,930 --> 00:22:03,000
master database this is very very simple

435
00:21:59,550 --> 00:22:05,909
but kind of it really has a lot of nice

436
00:22:03,000 --> 00:22:07,830
advantages so in terms of performing and

437
00:22:05,910 --> 00:22:12,120
longitudinal measurement studies like

438
00:22:07,830 --> 00:22:16,110
having the TLS sessions in the form of

439
00:22:12,120 --> 00:22:18,570
these like daily databases it's very

440
00:22:16,110 --> 00:22:22,439
efficient to compute trends right so

441
00:22:18,570 --> 00:22:24,810
instead of looking at kind of terabytes

442
00:22:22,440 --> 00:22:27,990
of data it's like a megabyte per day of

443
00:22:24,810 --> 00:22:31,020
data that we can that we can look at and

444
00:22:27,990 --> 00:22:32,610
in terms of the the functional aspect of

445
00:22:31,020 --> 00:22:35,370
TLS fingerprinting it allows us to age

446
00:22:32,610 --> 00:22:37,290
out older data so data that we saw two

447
00:22:35,370 --> 00:22:39,300
years ago is probably not representative

448
00:22:37,290 --> 00:22:43,560
of you know TLS fingerprints that we

449
00:22:39,300 --> 00:22:46,860
would see today and the the actual

450
00:22:43,560 --> 00:22:49,520
fingerprint database is up on the github

451
00:22:46,860 --> 00:22:54,080
as well it's it's a slightly reduced

452
00:22:49,520 --> 00:22:59,730
database to avoid you know some issues

453
00:22:54,080 --> 00:23:01,620
privacy issues but it is updated I try

454
00:22:59,730 --> 00:23:04,470
to update it every Monday so I updated

455
00:23:01,620 --> 00:23:06,030
it right before they talk and I think

456
00:23:04,470 --> 00:23:09,930
that should continue for the foreseeable

457
00:23:06,030 --> 00:23:11,190
future and this is kind of the format of

458
00:23:09,930 --> 00:23:13,590
the database so there's a lot of

459
00:23:11,190 --> 00:23:19,350
information we represent the fingerprint

460
00:23:13,590 --> 00:23:21,300
as a string of parenthesis string we

461
00:23:19,350 --> 00:23:22,560
collect some metadata about the

462
00:23:21,300 --> 00:23:23,639
fingerprint like when is the first time

463
00:23:22,560 --> 00:23:27,360
we've seen it once the last time we've

464
00:23:23,640 --> 00:23:29,790
seen it we map all of the TLS parameters

465
00:23:27,360 --> 00:23:31,919
to the RFC's and report min and Max

466
00:23:29,790 --> 00:23:34,170
implementation date so we get kind of a

467
00:23:31,920 --> 00:23:36,780
sense of the age of the the parameters

468
00:23:34,170 --> 00:23:38,820
and the fingerprint some count

469
00:23:36,780 --> 00:23:41,340
information and then something we do a

470
00:23:38,820 --> 00:23:44,129
little bit differently than the previous

471
00:23:41,340 --> 00:23:46,020
TLS fingerprint databases we give a list

472
00:23:44,130 --> 00:23:50,240
of all of the processes that we've seen

473
00:23:46,020 --> 00:23:52,710
associated with TLS fingerprint which is

474
00:23:50,240 --> 00:23:54,750
probably a more realistic representation

475
00:23:52,710 --> 00:23:56,430
of what information a TLS fingerprint

476
00:23:54,750 --> 00:23:58,260
actually gives you and for each

477
00:23:56,430 --> 00:24:01,350
fingerprint in a list we give like the

478
00:23:58,260 --> 00:24:03,120
name the sha-256 and some destination

479
00:24:01,350 --> 00:24:04,050
information that we saw that process

480
00:24:03,120 --> 00:24:08,370
using that

481
00:24:04,050 --> 00:24:11,820
fingerprints during going - and some

482
00:24:08,370 --> 00:24:13,080
quick database statistics so we break up

483
00:24:11,820 --> 00:24:16,470
our fingerprints into three different

484
00:24:13,080 --> 00:24:18,030
sets so passive is where we don't have

485
00:24:16,470 --> 00:24:19,770
any endpoint information and so this is

486
00:24:18,030 --> 00:24:21,570
the majority of the sessions we see you

487
00:24:19,770 --> 00:24:24,420
know we don't we don't actually have

488
00:24:21,570 --> 00:24:27,060
endpoint information on all sessions but

489
00:24:24,420 --> 00:24:28,710
we can still map those those

490
00:24:27,060 --> 00:24:31,260
fingerprints to a list of destinations

491
00:24:28,710 --> 00:24:33,660
that they went to the the endpoint is

492
00:24:31,260 --> 00:24:36,620
the fuse data so those fingerprints that

493
00:24:33,660 --> 00:24:39,150
the list of processes the malware

494
00:24:36,620 --> 00:24:41,820
fingerprints we basically recreate the

495
00:24:39,150 --> 00:24:44,220
data fusion process with the artifacts

496
00:24:41,820 --> 00:24:48,120
of a malware analysis sandbox so we get

497
00:24:44,220 --> 00:24:51,060
the the process attribution there we

498
00:24:48,120 --> 00:24:54,379
have in total about 70,000 fingerprints

499
00:24:51,060 --> 00:24:56,550
from 46 billion sessions this is growing

500
00:24:54,380 --> 00:25:00,090
the rate at which it's growing is

501
00:24:56,550 --> 00:25:01,230
increasing as we deploy to more sites so

502
00:25:00,090 --> 00:25:02,370
I actually haven't checked it in a

503
00:25:01,230 --> 00:25:05,310
couple of weeks I think these numbers

504
00:25:02,370 --> 00:25:06,449
are significantly larger now the last

505
00:25:05,310 --> 00:25:09,270
time I did check we get about two

506
00:25:06,450 --> 00:25:12,720
billion new sessions per day and 200

507
00:25:09,270 --> 00:25:14,820
million of those are in point labeled in

508
00:25:12,720 --> 00:25:16,650
this kind of ongoing continuous database

509
00:25:14,820 --> 00:25:21,290
generation is obviously really important

510
00:25:16,650 --> 00:25:21,290
because see less fingerprints change

511
00:25:21,620 --> 00:25:27,030
just real quickly I this was very

512
00:25:25,050 --> 00:25:29,159
surprising to me very interesting so

513
00:25:27,030 --> 00:25:30,990
like what does a fingerprint give you if

514
00:25:29,160 --> 00:25:32,610
you go and look at presentations on TLS

515
00:25:30,990 --> 00:25:34,170
fingerprinting it seems like this like

516
00:25:32,610 --> 00:25:35,010
magic silver bullet that's gonna solve

517
00:25:34,170 --> 00:25:37,740
all your problems

518
00:25:35,010 --> 00:25:40,620
in reality it's a little trickier than

519
00:25:37,740 --> 00:25:43,290
that so for a given fingerprint we

520
00:25:40,620 --> 00:25:45,120
looked at the average number of you know

521
00:25:43,290 --> 00:25:46,230
processes that belong in each

522
00:25:45,120 --> 00:25:47,790
fingerprint and the average number of

523
00:25:46,230 --> 00:25:49,230
fingerprints that each process generates

524
00:25:47,790 --> 00:25:51,990
these are the mean and standard

525
00:25:49,230 --> 00:25:53,640
deviations of those so it's kind of

526
00:25:51,990 --> 00:25:55,560
broken up into categories - so Chrome

527
00:25:53,640 --> 00:25:58,890
and Firefox or browsers email is like

528
00:25:55,560 --> 00:26:01,470
Outlook etc you know for the typical

529
00:25:58,890 --> 00:26:04,860
browser fingerprint we see around 22

530
00:26:01,470 --> 00:26:07,890
unique processes and that's on the low

531
00:26:04,860 --> 00:26:10,080
end and then for other fingerprints they

532
00:26:07,890 --> 00:26:12,240
range from like 40 to 70 unique

533
00:26:10,080 --> 00:26:14,340
processes and these are processes that

534
00:26:12,240 --> 00:26:17,890
are using the standard libraries of the

535
00:26:14,340 --> 00:26:19,419
operating system or openness cell so

536
00:26:17,890 --> 00:26:21,850
err you know especially for those

537
00:26:19,420 --> 00:26:24,400
categories looking at you know just

538
00:26:21,850 --> 00:26:25,480
observing a fingerprint string or a TLS

539
00:26:24,400 --> 00:26:27,010
client hello

540
00:26:25,480 --> 00:26:29,290
you actually very little information

541
00:26:27,010 --> 00:26:31,590
about what actual process generated it

542
00:26:29,290 --> 00:26:35,770
so it's not this you know magic bullet

543
00:26:31,590 --> 00:26:37,659
and you know there's some things you can

544
00:26:35,770 --> 00:26:39,900
do around the incorporating the

545
00:26:37,660 --> 00:26:42,670
destination information that helps but

546
00:26:39,900 --> 00:26:46,750
you know that then you get into kind of

547
00:26:42,670 --> 00:26:48,820
like light machine learning okay so some

548
00:26:46,750 --> 00:26:50,320
of the longitudinal studies that we were

549
00:26:48,820 --> 00:26:53,620
able to do with the daily fingerprint

550
00:26:50,320 --> 00:26:54,879
databases this was actually when I first

551
00:26:53,620 --> 00:26:58,060
saw this this is what made me write that

552
00:26:54,880 --> 00:26:59,710
I am sea paper because it was really

553
00:26:58,060 --> 00:27:02,110
interesting to me so we had been

554
00:26:59,710 --> 00:27:05,070
monitoring TLS 1.3 adoption for a couple

555
00:27:02,110 --> 00:27:08,830
of years I think like everyone else and

556
00:27:05,070 --> 00:27:11,169
you know we expected that in August 2000

557
00:27:08,830 --> 00:27:13,659
18 when the RFC was actually published

558
00:27:11,170 --> 00:27:17,020
that we would see a huge uptick right

559
00:27:13,660 --> 00:27:19,630
that just kind of makes sense at least

560
00:27:17,020 --> 00:27:21,910
to me but but actually you know the

561
00:27:19,630 --> 00:27:25,180
months following the publication of the

562
00:27:21,910 --> 00:27:26,830
RFC we actually saw a decrease in TLS

563
00:27:25,180 --> 00:27:30,790
1.3 adoption which seemed kind of

564
00:27:26,830 --> 00:27:33,669
counterintuitive and then you know six

565
00:27:30,790 --> 00:27:36,580
months after that or so

566
00:27:33,670 --> 00:27:40,390
the support seemed to rise again and you

567
00:27:36,580 --> 00:27:43,300
know just looking at the raw measurement

568
00:27:40,390 --> 00:27:46,750
numbers it's kind of hard to explain why

569
00:27:43,300 --> 00:27:49,090
we saw these trends but when you're

570
00:27:46,750 --> 00:27:50,410
looking at the kind of the ground truth

571
00:27:49,090 --> 00:27:54,040
that we know which applications are

572
00:27:50,410 --> 00:27:57,790
using TLS both of those become obvious

573
00:27:54,040 --> 00:28:05,040
so first in terms of the increase that

574
00:27:57,790 --> 00:28:09,460
happened you know March 2019 Mac OS sir

575
00:28:05,040 --> 00:28:13,930
clarification you go George from a Pina

576
00:28:09,460 --> 00:28:15,640
can you go back one please so that's a

577
00:28:13,930 --> 00:28:19,690
closed set isn't it

578
00:28:15,640 --> 00:28:22,870
that's all things seem that are TLS what

579
00:28:19,690 --> 00:28:25,900
is the inter type yeah yeah yes so the

580
00:28:22,870 --> 00:28:29,649
variance in the set is not a reflection

581
00:28:25,900 --> 00:28:31,780
of increase or decrease in absolute

582
00:28:29,650 --> 00:28:36,910
sense it's the variance in

583
00:28:31,780 --> 00:28:44,110
the set yes that is correct and that's

584
00:28:36,910 --> 00:28:46,540
important so you know March 2019 Mike OS

585
00:28:44,110 --> 00:28:48,909
release TLS 1.3 as the the default

586
00:28:46,540 --> 00:28:50,399
system library and we saw this huge

587
00:28:48,910 --> 00:28:53,620
uptick in all these different categories

588
00:28:50,400 --> 00:28:55,690
using TLS 1.3 before that pretty much

589
00:28:53,620 --> 00:28:57,699
the only two applications that use TLS

590
00:28:55,690 --> 00:28:59,980
1.3 or Chrome and Firefox or chromium

591
00:28:57,700 --> 00:29:03,730
based browsers and Firefox and that was

592
00:28:59,980 --> 00:29:05,770
kind of it so we understand the uptick

593
00:29:03,730 --> 00:29:06,940
so the down tick was basically that

594
00:29:05,770 --> 00:29:09,760
first bullet point chrome and firefox

595
00:29:06,940 --> 00:29:13,150
were the only ones using TLS 1.3 for a

596
00:29:09,760 --> 00:29:18,580
really long time and this is a kind of a

597
00:29:13,150 --> 00:29:20,740
breakdown of the the percentage of

598
00:29:18,580 --> 00:29:22,899
applications that use TLS so each of

599
00:29:20,740 --> 00:29:25,410
those are different categories and what

600
00:29:22,900 --> 00:29:27,160
we see is that the overall percentage of

601
00:29:25,410 --> 00:29:28,900
applications that you see LS for

602
00:29:27,160 --> 00:29:31,630
browsers is actually decreasing over

603
00:29:28,900 --> 00:29:33,310
time and I think this is a good thing

604
00:29:31,630 --> 00:29:34,720
so most most other application

605
00:29:33,310 --> 00:29:36,310
categories about the applications

606
00:29:34,720 --> 00:29:37,690
instead of just calling out to their

607
00:29:36,310 --> 00:29:41,919
home using HTTP they're actually now

608
00:29:37,690 --> 00:29:43,690
using TLS which is obviously good the

609
00:29:41,920 --> 00:29:46,870
maybe not good thing is that they're

610
00:29:43,690 --> 00:29:48,460
typically using either standard OS

611
00:29:46,870 --> 00:29:50,679
libraries on Windows which would result

612
00:29:48,460 --> 00:29:52,390
in TLS 1.2 connections or they're using

613
00:29:50,680 --> 00:29:57,040
older versions of OpenSSL which we see a

614
00:29:52,390 --> 00:30:00,250
lot so you know that it's it's not that

615
00:29:57,040 --> 00:30:03,389
we see overall less TLS 1.3 we're just

616
00:30:00,250 --> 00:30:06,010
seeing a lot more TLS 1.2 you know the

617
00:30:03,390 --> 00:30:08,470
the percentage of TLS 1.3 is actually

618
00:30:06,010 --> 00:30:11,650
increasing or yeah the number of

619
00:30:08,470 --> 00:30:13,890
sessions for all sessions so the last

620
00:30:11,650 --> 00:30:16,180
thing real quick I'm going to talk about

621
00:30:13,890 --> 00:30:21,640
some of the trends that we saw malware

622
00:30:16,180 --> 00:30:23,260
with TLS fingerprinting and I think so

623
00:30:21,640 --> 00:30:26,790
TLS fingerprinting for malware

624
00:30:23,260 --> 00:30:33,430
identification has been a really popular

625
00:30:26,790 --> 00:30:35,680
subject we looked into this and straight

626
00:30:33,430 --> 00:30:38,680
forward TLS fingerprinting is maybe not

627
00:30:35,680 --> 00:30:42,600
the best solution to identify malware so

628
00:30:38,680 --> 00:30:45,760
there's a kind of an open source list of

629
00:30:42,600 --> 00:30:49,540
ja3 it's a TLS fingerprint form

630
00:30:45,760 --> 00:30:50,650
fingerprints it's a hash so to get it

631
00:30:49,540 --> 00:30:52,300
into our format we kind of had a

632
00:30:50,650 --> 00:30:53,380
reverse-engineer it and we failed it

633
00:30:52,300 --> 00:30:55,930
sound so we were only able to identify

634
00:30:53,380 --> 00:30:59,280
64 of the 67 that they listed at the

635
00:30:55,930 --> 00:31:01,870
time and to their credit they were very

636
00:30:59,280 --> 00:31:03,700
they're very explicit about saying you

637
00:31:01,870 --> 00:31:05,379
know we haven't evaluated false

638
00:31:03,700 --> 00:31:07,750
positives and there could be a lot of

639
00:31:05,380 --> 00:31:09,730
false positives from this list so when

640
00:31:07,750 --> 00:31:11,650
we looked at their lists 55 of the

641
00:31:09,730 --> 00:31:14,530
fingerprints were heavily used by benign

642
00:31:11,650 --> 00:31:16,320
software so if you were to use those as

643
00:31:14,530 --> 00:31:18,970
like a black list to identify not where

644
00:31:16,320 --> 00:31:22,060
you would have an unreasonable number of

645
00:31:18,970 --> 00:31:24,090
false positives the the remaining nine

646
00:31:22,060 --> 00:31:26,379
fingerprints when we looked into the

647
00:31:24,090 --> 00:31:28,659
database they were associated with older

648
00:31:26,380 --> 00:31:32,620
versions of Windows like Windows XP so

649
00:31:28,660 --> 00:31:37,300
they're really old or older versions

650
00:31:32,620 --> 00:31:42,209
like 0.9 of OpenSSL and and those may or

651
00:31:37,300 --> 00:31:44,950
may not be good indications of malware

652
00:31:42,210 --> 00:31:50,200
but yeah they're better than the the

653
00:31:44,950 --> 00:31:53,230
other 55 that definitely weren't and so

654
00:31:50,200 --> 00:31:56,680
this last slide is looking at malware's

655
00:31:53,230 --> 00:32:00,790
abuse of censorship circumvention tools

656
00:31:56,680 --> 00:32:04,810
so on the left and again the relative

657
00:32:00,790 --> 00:32:07,389
versus absolute and you know numbers

658
00:32:04,810 --> 00:32:09,760
come into play here looking at three

659
00:32:07,390 --> 00:32:11,950
popular tools tor ultrasurf and and

660
00:32:09,760 --> 00:32:13,210
psyphon and so the the absolute numbers

661
00:32:11,950 --> 00:32:14,770
of all of these tools increased

662
00:32:13,210 --> 00:32:16,840
dramatically over the past couple of

663
00:32:14,770 --> 00:32:20,040
years it's just you know similar to TLS

664
00:32:16,840 --> 00:32:23,350
1.3 malware is just using more TLS so it

665
00:32:20,040 --> 00:32:26,250
kind of looks like it's going down but

666
00:32:23,350 --> 00:32:30,820
consistently we've seen malware use

667
00:32:26,250 --> 00:32:32,800
abused tour and then relatively recently

668
00:32:30,820 --> 00:32:35,860
these other tools like ultra surf and

669
00:32:32,800 --> 00:32:38,590
psyphon which obviously have very

670
00:32:35,860 --> 00:32:42,100
important uses we've seen malware abuse

671
00:32:38,590 --> 00:32:43,720
those tools and then randomization is

672
00:32:42,100 --> 00:32:47,469
another kind of general strategy to

673
00:32:43,720 --> 00:32:50,410
evade censorship so I'm going to

674
00:32:47,470 --> 00:32:55,470
randomize my TLS parameters we saw

675
00:32:50,410 --> 00:32:58,150
malware start doing this in June of 2018

676
00:32:55,470 --> 00:32:58,960
the interesting thing the most obvious

677
00:32:58,150 --> 00:33:02,710
are

678
00:32:58,960 --> 00:33:05,590
the most common randomization strategy

679
00:33:02,710 --> 00:33:07,750
that they had was to randomize the

680
00:33:05,590 --> 00:33:09,310
cipher Suites so they don't touch

681
00:33:07,750 --> 00:33:11,100
anything else they just take the the

682
00:33:09,310 --> 00:33:16,240
cipher suites add some removed some

683
00:33:11,100 --> 00:33:18,370
changed the order again they did in a

684
00:33:16,240 --> 00:33:20,020
very naive way so with their

685
00:33:18,370 --> 00:33:25,060
randomization strategy they kept the

686
00:33:20,020 --> 00:33:28,710
same exact extension data and extension

687
00:33:25,060 --> 00:33:31,600
type so that was completely static and

688
00:33:28,710 --> 00:33:35,050
using the the fingerprint format we you

689
00:33:31,600 --> 00:33:37,120
know we can hold its its decomposable so

690
00:33:35,050 --> 00:33:40,030
we can only look at the extensions or

691
00:33:37,120 --> 00:33:41,979
the cipher suites with the version and

692
00:33:40,030 --> 00:33:47,680
so what we did was create a very simple

693
00:33:41,980 --> 00:33:51,130
rule where if I have if I have seen this

694
00:33:47,680 --> 00:33:54,010
you know extension static extension data

695
00:33:51,130 --> 00:33:55,240
before but I've never seen the cipher

696
00:33:54,010 --> 00:33:57,220
suites before kind of logged this

697
00:33:55,240 --> 00:34:02,080
fingerprint because it's interesting and

698
00:33:57,220 --> 00:34:04,630
in doing that we saw at the end about

699
00:34:02,080 --> 00:34:07,199
nine different extension patterns that

700
00:34:04,630 --> 00:34:10,570
were very common in TLS fingerprints

701
00:34:07,200 --> 00:34:14,280
with randomized Cyprus cipher suite

702
00:34:10,570 --> 00:34:16,690
strings and and they all map to the same

703
00:34:14,280 --> 00:34:20,350
variant of malware that's slipping my

704
00:34:16,690 --> 00:34:21,880
mind right now we saw this over time and

705
00:34:20,350 --> 00:34:23,440
and there's you know different ones that

706
00:34:21,880 --> 00:34:25,120
were more popular and all of the

707
00:34:23,440 --> 00:34:28,659
extension strings were kind of related

708
00:34:25,120 --> 00:34:35,650
to I think a specific version of open

709
00:34:28,659 --> 00:34:37,389
SSL yeah and that's it so I really think

710
00:34:35,650 --> 00:34:39,960
that I mean for the the measurement

711
00:34:37,389 --> 00:34:43,089
community having this endpoint network

712
00:34:39,960 --> 00:34:45,040
data and a kind of a continuous way to

713
00:34:43,090 --> 00:34:47,620
generate these fingerprint database is a

714
00:34:45,040 --> 00:34:50,469
really great way to do very efficient

715
00:34:47,620 --> 00:34:54,040
measurement studies over time from the

716
00:34:50,469 --> 00:34:55,299
TLS fingerprinting point of view having

717
00:34:54,040 --> 00:34:58,800
a database that isn't automatically

718
00:34:55,300 --> 00:35:06,190
updated provides very little value

719
00:34:58,800 --> 00:35:08,560
overall and to actually make a TLS

720
00:35:06,190 --> 00:35:10,240
fingerprinting system relying on things

721
00:35:08,560 --> 00:35:13,350
that are just available in the in the

722
00:35:10,240 --> 00:35:13,350
client hello like the

723
00:35:13,810 --> 00:35:19,670
cipher suites and protocol version is

724
00:35:16,670 --> 00:35:21,110
not really enough to give you a good

725
00:35:19,670 --> 00:35:22,460
solution you can't really solve the use

726
00:35:21,110 --> 00:35:26,780
cases that people say that they're

727
00:35:22,460 --> 00:35:28,310
trying to solve that's it thank you very

728
00:35:26,780 --> 00:35:29,840
much we actually don't have time for

729
00:35:28,310 --> 00:35:34,070
questions but we could still take one or

730
00:35:29,840 --> 00:35:37,160
two if you really wanted okay thank you

731
00:35:34,070 --> 00:35:38,480
I'll be around yeah talk to him okay go

732
00:35:37,160 --> 00:35:40,490
ahead

733
00:35:38,480 --> 00:35:43,490
that's a great analysis oblique tense a

734
00:35:40,490 --> 00:35:45,790
couple of questions on the analysis I've

735
00:35:43,490 --> 00:35:48,770
seen malware's typically lying is awry

736
00:35:45,790 --> 00:35:50,779
right so how is your prediction when

737
00:35:48,770 --> 00:35:54,590
malware's are lying about this and I

738
00:35:50,780 --> 00:35:56,960
value well and sorry I missed malice

739
00:35:54,590 --> 00:35:59,360
house email is typically lying about SN

740
00:35:56,960 --> 00:36:02,330
idealist the server name indicator in

741
00:35:59,360 --> 00:36:03,830
that goes they lie about that right they

742
00:36:02,330 --> 00:36:06,319
go to the ballot amendment they say they

743
00:36:03,830 --> 00:36:07,730
go into Google for example right so how

744
00:36:06,320 --> 00:36:10,250
does the prediction work in those case

745
00:36:07,730 --> 00:36:12,830
so like through domain front chain yeah

746
00:36:10,250 --> 00:36:15,920
so so the the actual TLS fingerprint

747
00:36:12,830 --> 00:36:17,720
string doesn't it strips the connection

748
00:36:15,920 --> 00:36:19,490
specific information so if the

749
00:36:17,720 --> 00:36:21,290
fingerprint is actually a good indicator

750
00:36:19,490 --> 00:36:23,720
for malware then you could use that

751
00:36:21,290 --> 00:36:26,450
because it doesn't depend on the SN I I

752
00:36:23,720 --> 00:36:30,129
think the the general takeaway from our

753
00:36:26,450 --> 00:36:31,960
results is that TLS fingerprinting

754
00:36:30,130 --> 00:36:34,640
without bringing in additional

755
00:36:31,960 --> 00:36:36,620
contextual information is not a good way

756
00:36:34,640 --> 00:36:39,650
to identify malware okay

757
00:36:36,620 --> 00:36:41,750
I can't hold this work with let's say

758
00:36:39,650 --> 00:36:43,760
TLS 1 or 3 RDS and I where I said I

759
00:36:41,750 --> 00:36:45,560
would get it encryption tit all that you

760
00:36:43,760 --> 00:36:47,630
get to see is Glide hello then would

761
00:36:45,560 --> 00:36:51,620
that be sufficient to identify the

762
00:36:47,630 --> 00:36:52,820
applications essentially I mean TLS one

763
00:36:51,620 --> 00:36:54,620
two three adds a lot of parameters and

764
00:36:52,820 --> 00:36:56,930
the different applications use them

765
00:36:54,620 --> 00:36:58,220
slightly different way so what all the

766
00:36:56,930 --> 00:37:00,919
other parameters other than the client

767
00:36:58,220 --> 00:37:02,540
hello are encrypted right so what what

768
00:37:00,920 --> 00:37:03,920
parameters are encrypted in the car I

769
00:37:02,540 --> 00:37:06,529
mean the client hello is in clear-text

770
00:37:03,920 --> 00:37:08,120
the server load all the other messy

771
00:37:06,530 --> 00:37:10,130
handshake message settings so all of

772
00:37:08,120 --> 00:37:17,880
this work relies strictly on the client

773
00:37:10,130 --> 00:37:21,150
hello okay yeah emotions

774
00:37:17,880 --> 00:37:23,580
Shapiro so bouzouki you combine data

775
00:37:21,150 --> 00:37:26,520
collected from the network and data from

776
00:37:23,580 --> 00:37:28,319
nos and you have a kind of engine you

777
00:37:26,520 --> 00:37:31,009
put it inside and you get a data base

778
00:37:28,320 --> 00:37:36,180
from it fingerprint database yeah and

779
00:37:31,010 --> 00:37:38,850
this tool is available completely so the

780
00:37:36,180 --> 00:37:41,339
that tool is not available right right

781
00:37:38,850 --> 00:37:44,460
now it's a bunch of Python smart jobs

782
00:37:41,340 --> 00:37:47,010
under that that's it at least yes the

783
00:37:44,460 --> 00:37:51,110
the datasets on Cisco / mercury and

784
00:37:47,010 --> 00:37:56,370
github okay thanks and career Edition

785
00:37:51,110 --> 00:37:58,470
thank you so now we switch over to DNS

786
00:37:56,370 --> 00:38:03,319
related topic and it will be more

787
00:37:58,470 --> 00:38:09,899
presentation so I hope kind is there yes

788
00:38:03,320 --> 00:38:12,780
perfect go ahead okay so this work is a

789
00:38:09,900 --> 00:38:13,800
collaboration with me rocky and like

790
00:38:12,780 --> 00:38:17,940
organ a bit check Case Western

791
00:38:13,800 --> 00:38:20,400
University myself at Akamai can you go

792
00:38:17,940 --> 00:38:23,160
to next slide okay

793
00:38:20,400 --> 00:38:30,320
first just a little background little

794
00:38:23,160 --> 00:38:32,960
quick actually on this page ECS is the

795
00:38:30,320 --> 00:38:52,530
studio record and the additional

796
00:38:32,960 --> 00:38:55,220
responses so the purpose of each two so

797
00:38:52,530 --> 00:38:57,750
if you look at that little bigger

798
00:38:55,220 --> 00:38:59,970
usually the topological information that

799
00:38:57,750 --> 00:39:04,590
England it's happening for cursor it

800
00:38:59,970 --> 00:39:07,040
always gives you is actually fix of the

801
00:39:04,590 --> 00:39:17,010
client itself originated

802
00:39:07,040 --> 00:39:20,580
so use this to tailor the response right

803
00:39:17,010 --> 00:39:23,370
and then the ETS response okay and

804
00:39:20,580 --> 00:39:25,980
you're fading in and out a little bit so

805
00:39:23,370 --> 00:39:28,410
if you can make sure you're close to

806
00:39:25,980 --> 00:39:31,349
your microphone that would be good okay

807
00:39:28,410 --> 00:39:34,529
I'll try to stay as close as possible

808
00:39:31,349 --> 00:39:36,299
the the DNS responses then from

809
00:39:34,529 --> 00:39:38,430
authoritative nameservers - recursive

810
00:39:36,299 --> 00:39:40,499
resolvers have a scope prefix length as

811
00:39:38,430 --> 00:39:42,779
well this is really a cache control it's

812
00:39:40,499 --> 00:39:45,209
it tells the recursive resolver - what

813
00:39:42,779 --> 00:39:47,160
prefix length they should they should

814
00:39:45,209 --> 00:39:49,529
honor this cache record so only clients

815
00:39:47,160 --> 00:39:51,058
covered by the client IP address - the

816
00:39:49,529 --> 00:39:55,999
scope prefix length should get the

817
00:39:51,059 --> 00:39:55,999
response - next slide please

818
00:39:56,359 --> 00:40:01,049
so there's two high-level implications

819
00:39:59,160 --> 00:40:02,819
the easiest one is a privacy

820
00:40:01,049 --> 00:40:05,160
implications right authoritative

821
00:40:02,819 --> 00:40:06,509
nameservers and for that matter anyone

822
00:40:05,160 --> 00:40:08,038
on the path between their cursor

823
00:40:06,509 --> 00:40:10,920
resolvers and authoritative nameservers

824
00:40:08,039 --> 00:40:13,920
now have information about the client is

825
00:40:10,920 --> 00:40:15,959
ready they didn't have that before the

826
00:40:13,920 --> 00:40:17,940
RFC specifically recommends that

827
00:40:15,959 --> 00:40:21,118
recursive resolver is limit the prefix

828
00:40:17,940 --> 00:40:24,119
length to 24 bits in ipv4 and 56 bits in

829
00:40:21,119 --> 00:40:27,029
IQ 6 to kind of reduce the impact of

830
00:40:24,119 --> 00:40:29,339
this privacy leakage also because

831
00:40:27,029 --> 00:40:31,170
recursive resolver sorry

832
00:40:29,339 --> 00:40:33,930
also because authoritative nameservers

833
00:40:31,170 --> 00:40:36,599
are not expected to universally need or

834
00:40:33,930 --> 00:40:39,149
support ECS recursive resolvers are

835
00:40:36,599 --> 00:40:41,430
recommended that they probe for support

836
00:40:39,150 --> 00:40:44,219
in authoritative name servers and then

837
00:40:41,430 --> 00:40:45,839
only send the client prefix to

838
00:40:44,219 --> 00:40:47,640
authoritative name servers that that are

839
00:40:45,839 --> 00:40:49,739
actually going to use it in order to

840
00:40:47,640 --> 00:40:53,308
reduce the potential a lot of privacy

841
00:40:49,739 --> 00:40:55,499
leakage the other implication is a

842
00:40:53,309 --> 00:40:57,839
security one this is on the other side

843
00:40:55,499 --> 00:41:01,618
this is on the CDN side so the easiest

844
00:40:57,839 --> 00:41:04,049
option gives a relatively easy way to

845
00:41:01,619 --> 00:41:05,309
scan an entire CD on platform right from

846
00:41:04,049 --> 00:41:08,130
a single vantage point you can just

847
00:41:05,309 --> 00:41:11,579
iterate through all of IP space sending

848
00:41:08,130 --> 00:41:13,369
ECS prefixes and get the entire entire

849
00:41:11,579 --> 00:41:16,049
network the entire stevens network right

850
00:41:13,369 --> 00:41:17,940
the some authoritative name servers and

851
00:41:16,049 --> 00:41:19,890
the cbons that run them have implemented

852
00:41:17,940 --> 00:41:22,019
white lists of recursive resolvers that

853
00:41:19,890 --> 00:41:24,089
they trust and they only do ECS with

854
00:41:22,019 --> 00:41:25,919
those recursive resolvers and that this

855
00:41:24,089 --> 00:41:27,479
trust is why a some out-of-band means

856
00:41:25,920 --> 00:41:28,829
it's not actually part of the ECS

857
00:41:27,479 --> 00:41:34,169
protocol

858
00:41:28,829 --> 00:41:35,699
next slide please so these were the

859
00:41:34,170 --> 00:41:38,999
goals of our study then we wanted to

860
00:41:35,699 --> 00:41:42,449
broadly look at the current behavior and

861
00:41:38,999 --> 00:41:43,129
recursive resolvers around ECS because

862
00:41:42,449 --> 00:41:45,380
of time

863
00:41:43,130 --> 00:41:48,589
restrictions though I'm only going to

864
00:41:45,380 --> 00:41:51,799
focus on the blue blue bullet points

865
00:41:48,589 --> 00:41:53,180
today for the other things I suggested

866
00:41:51,799 --> 00:41:55,880
please go read the paper as there's

867
00:41:53,180 --> 00:41:57,739
details on all these topics but today

868
00:41:55,880 --> 00:41:59,930
we're gonna talk about adherence to the

869
00:41:57,739 --> 00:42:02,930
ECS scope in cash four regressors

870
00:41:59,930 --> 00:42:04,578
Oliver's and then several deployment

871
00:42:02,930 --> 00:42:07,999
pitfalls that we observed along the way

872
00:42:04,579 --> 00:42:10,970
in our in our studies the datasets that

873
00:42:07,999 --> 00:42:12,979
we used for this are first logs from a

874
00:42:10,970 --> 00:42:14,359
major CDNs authoritative nameservers and

875
00:42:12,979 --> 00:42:16,578
in those logs we can see the IP

876
00:42:14,359 --> 00:42:18,828
addresses of worker sir resolvers that

877
00:42:16,579 --> 00:42:22,609
send the ECS option to the authoritative

878
00:42:18,829 --> 00:42:25,009
nameservers we also conducted a series

879
00:42:22,609 --> 00:42:27,979
of internet wide scans of all of ipv4

880
00:42:25,009 --> 00:42:32,269
space and in those scans we sent DNS

881
00:42:27,979 --> 00:42:34,819
queries for a domain under our control -

882
00:42:32,269 --> 00:42:36,950
every single IP address and what we find

883
00:42:34,819 --> 00:42:38,599
is either open recursive resolvers that

884
00:42:36,950 --> 00:42:40,430
send the EECS option on to our

885
00:42:38,599 --> 00:42:44,299
experimental authoritative nameserver

886
00:42:40,430 --> 00:42:46,848
or far more likely we find open

887
00:42:44,299 --> 00:42:48,710
forwarders that forward that geena's

888
00:42:46,849 --> 00:42:50,289
query on to recursive resolver that then

889
00:42:48,710 --> 00:42:52,279
sends it to our experimental

890
00:42:50,289 --> 00:42:54,349
authoritative nameserver with e CS

891
00:42:52,279 --> 00:42:56,059
option I say that's far more likely

892
00:42:54,349 --> 00:43:00,380
because past research has actually

893
00:42:56,059 --> 00:43:01,700
observed that most open responding DNS

894
00:43:00,380 --> 00:43:04,369
IP addresses on the Internet are

895
00:43:01,700 --> 00:43:05,989
actually some sort of home CPE device

896
00:43:04,369 --> 00:43:08,539
like a home Wi-Fi router or something

897
00:43:05,989 --> 00:43:10,369
that then forwards the DNS queries on to

898
00:43:08,539 --> 00:43:14,499
a recursive resolver such as the ISPs

899
00:43:10,369 --> 00:43:18,140
recursive resolving next slide please

900
00:43:14,499 --> 00:43:21,700
so our first result then and this is on

901
00:43:18,140 --> 00:43:25,940
honouring scope restriction on caching

902
00:43:21,700 --> 00:43:29,239
we we studied in the internet wide scan

903
00:43:25,940 --> 00:43:30,859
the caching behavior of 278 where we

904
00:43:29,239 --> 00:43:34,269
attempted to study the caching behavior

905
00:43:30,859 --> 00:43:36,558
of 278 non-google supporting ECS

906
00:43:34,269 --> 00:43:39,140
non-google ECS supporting recursive

907
00:43:36,559 --> 00:43:41,680
resolvers two things here first the

908
00:43:39,140 --> 00:43:45,410
notice the number 278 is pretty small

909
00:43:41,680 --> 00:43:47,799
the deployment of ECS today c appears to

910
00:43:45,410 --> 00:43:50,839
remain small based upon our data sets

911
00:43:47,799 --> 00:43:52,788
also we excluded Google because the

912
00:43:50,839 --> 00:43:56,150
number of Google IP addresses that we

913
00:43:52,789 --> 00:43:56,720
found is actually it its massive

914
00:43:56,150 --> 00:43:58,640
compared

915
00:43:56,720 --> 00:44:00,890
to 278 so it tends to skew our results

916
00:43:58,640 --> 00:44:04,850
everyone to focus on just the non Google

917
00:44:00,890 --> 00:44:07,670
IP addresses out of those 278 we were

918
00:44:04,850 --> 00:44:10,009
able to study the behavior of 202 of

919
00:44:07,670 --> 00:44:11,630
them using a variety of probing

920
00:44:10,010 --> 00:44:13,010
strategies and the behavior we're

921
00:44:11,630 --> 00:44:15,130
studying here is there caching behavior

922
00:44:13,010 --> 00:44:17,540
and the details of that are in the paper

923
00:44:15,130 --> 00:44:18,590
but the high-level point that I want to

924
00:44:17,540 --> 00:44:22,340
share on this slide is what's in red

925
00:44:18,590 --> 00:44:24,230
there out of those 202 we studied 102 of

926
00:44:22,340 --> 00:44:26,750
them actually didn't obey the scope

927
00:44:24,230 --> 00:44:28,130
caching restriction at all what they're

928
00:44:26,750 --> 00:44:30,530
doing essentially is they're sending the

929
00:44:28,130 --> 00:44:32,750
ECS option in their queries but they're

930
00:44:30,530 --> 00:44:34,160
ignoring the ECS option in response so

931
00:44:32,750 --> 00:44:37,370
they're not using it in their caching

932
00:44:34,160 --> 00:44:38,930
behavior at all this is at best

933
00:44:37,370 --> 00:44:42,259
misleading to the authoritative

934
00:44:38,930 --> 00:44:43,640
nameservers because they they get this

935
00:44:42,260 --> 00:44:45,530
information suggesting that they have

936
00:44:43,640 --> 00:44:47,859
greater control over the behavior of the

937
00:44:45,530 --> 00:44:51,280
server's resolver than they actually do

938
00:44:47,860 --> 00:44:51,280
next slide please

939
00:44:51,820 --> 00:44:58,850
so we also observed in the internet wide

940
00:44:55,940 --> 00:45:02,390
scans that some workers resolvers 33 in

941
00:44:58,850 --> 00:45:05,120
total when they sent the ECS option the

942
00:45:02,390 --> 00:45:08,930
prefix inside it was actually a nun

943
00:45:05,120 --> 00:45:11,270
routable IP address or IP prefix and in

944
00:45:08,930 --> 00:45:14,029
these cases it was the loopback address

945
00:45:11,270 --> 00:45:15,290
and this was a bit of a surprising

946
00:45:14,030 --> 00:45:16,910
observation to us and we wanted to

947
00:45:15,290 --> 00:45:18,380
answer the question could this be

948
00:45:16,910 --> 00:45:20,420
actually confusing to authoritative

949
00:45:18,380 --> 00:45:24,890
nameservers did you go to next slide

950
00:45:20,420 --> 00:45:27,380
list so to test just we ran the

951
00:45:24,890 --> 00:45:29,390
following experiment we sent five

952
00:45:27,380 --> 00:45:32,150
queries from our test machine in

953
00:45:29,390 --> 00:45:35,600
Cleveland Ohio to the authoritative name

954
00:45:32,150 --> 00:45:37,520
servers for youtube.com those five

955
00:45:35,600 --> 00:45:40,910
queries were all identical except that

956
00:45:37,520 --> 00:45:42,950
they varied in the ECS option in the

957
00:45:40,910 --> 00:45:45,440
first query there was no ACS option at

958
00:45:42,950 --> 00:45:47,660
all in the second query we sent the ucs

959
00:45:45,440 --> 00:45:50,360
option but the prefix was the test

960
00:45:47,660 --> 00:45:52,879
machines own IP address truncated to 24

961
00:45:50,360 --> 00:45:54,710
bits and then in the final three cases

962
00:45:52,880 --> 00:45:58,610
it was various forms of unreadable

963
00:45:54,710 --> 00:46:00,920
prefixes in the first two cases then we

964
00:45:58,610 --> 00:46:04,210
got location we got servers that's

965
00:46:00,920 --> 00:46:06,320
review tube comm in the location Chicago

966
00:46:04,210 --> 00:46:07,370
now you can see from the RT that's

967
00:46:06,320 --> 00:46:08,930
actually pretty close that's that's

968
00:46:07,370 --> 00:46:10,699
nearby to Cleveland right it gives a

969
00:46:08,930 --> 00:46:13,038
reasonable

970
00:46:10,699 --> 00:46:15,349
to the end-user however when we sent on

971
00:46:13,039 --> 00:46:17,930
routable UCS prefixes we seemingly got

972
00:46:15,349 --> 00:46:20,749
mapped to server's world over

973
00:46:17,930 --> 00:46:22,430
so obviously the the experience is going

974
00:46:20,749 --> 00:46:24,529
to suffer right the the Arctic is higher

975
00:46:22,430 --> 00:46:27,979
and your your content delivery will not

976
00:46:24,529 --> 00:46:29,809
be as effective so clearly they answer

977
00:46:27,979 --> 00:46:32,118
to our question is yes this can confuse

978
00:46:29,809 --> 00:46:33,799
some authoritative nameservers YouTube

979
00:46:32,119 --> 00:46:36,759
has one particular example here right

980
00:46:33,799 --> 00:46:40,130
could you go to the next slide please

981
00:46:36,759 --> 00:46:42,439
now the RFC has language in it that says

982
00:46:40,130 --> 00:46:44,449
that authoritative nameservers should at

983
00:46:42,439 --> 00:46:45,618
least treat unreadable addresses as

984
00:46:44,449 --> 00:46:48,969
equivalent to the recursive resolver

985
00:46:45,619 --> 00:46:53,989
zone identity that wasn't happening here

986
00:46:48,969 --> 00:46:56,509
one more side please so we actually

987
00:46:53,989 --> 00:46:58,309
suggest that maybe this language should

988
00:46:56,509 --> 00:47:02,289
be strengthened it should be changed

989
00:46:58,309 --> 00:47:05,059
from should to must but also because

990
00:47:02,289 --> 00:47:06,829
it's obviously you can control your own

991
00:47:05,059 --> 00:47:09,410
behavior more than you control control

992
00:47:06,829 --> 00:47:10,609
those you communicate with we also think

993
00:47:09,410 --> 00:47:11,930
there might be a need for language on

994
00:47:10,609 --> 00:47:14,420
the other side of the communication as

995
00:47:11,930 --> 00:47:16,689
well that recursive resolvers must send

996
00:47:14,420 --> 00:47:19,009
routable prefixes in the ECS option and

997
00:47:16,689 --> 00:47:21,709
if that's not possible then they should

998
00:47:19,009 --> 00:47:29,509
just not sing the ECS prefix at all or a

999
00:47:21,709 --> 00:47:32,448
dcs option at all next slide please next

1000
00:47:29,509 --> 00:47:35,089
topic was the impact of the source

1001
00:47:32,449 --> 00:47:37,939
prefix length so in the easiest option

1002
00:47:35,089 --> 00:47:39,828
you can send a prefix of any length you

1003
00:47:37,939 --> 00:47:42,140
want right if it's ipv4 you can send

1004
00:47:39,829 --> 00:47:46,309
from zero bits all the way up to 32 bits

1005
00:47:42,140 --> 00:47:48,199
if you so choose right and we set out to

1006
00:47:46,309 --> 00:47:50,839
actually determine what the impact of

1007
00:47:48,199 --> 00:47:53,390
varying that prefix length is on CD ends

1008
00:47:50,839 --> 00:47:56,630
to do this we picked two different CD

1009
00:47:53,390 --> 00:47:59,900
ends and then 800 random ripe Atlas

1010
00:47:56,630 --> 00:48:02,689
probes we then resolved CD and

1011
00:47:59,900 --> 00:48:06,109
accelerated host names for each of these

1012
00:48:02,689 --> 00:48:08,178
CD ends with the probes IP address to

1013
00:48:06,109 --> 00:48:11,900
truncate it to various prefix lengths in

1014
00:48:08,179 --> 00:48:13,130
the ECS option then from the right file

1015
00:48:11,900 --> 00:48:16,219
as probes themselves we actually

1016
00:48:13,130 --> 00:48:18,709
measured the TCP handshake RTT to those

1017
00:48:16,219 --> 00:48:22,719
to those IP addresses that were returned

1018
00:48:18,709 --> 00:48:22,719
by the CD ends next slide please

1019
00:48:23,600 --> 00:48:29,250
so these are two cumulative distribution

1020
00:48:26,850 --> 00:48:33,299
functions for the two CDNs CD + 1 and CD

1021
00:48:29,250 --> 00:48:36,840
+ 2 as you can see with CD + 1 if you

1022
00:48:33,300 --> 00:48:40,470
send anything less than 24 bits you get

1023
00:48:36,840 --> 00:48:42,270
a longer RTT so if you send less than 24

1024
00:48:40,470 --> 00:48:45,629
bits your actual round-trip time

1025
00:48:42,270 --> 00:48:47,220
increases with CD + 2 on the other hand

1026
00:48:45,630 --> 00:48:50,640
you seem to be able to send all the way

1027
00:48:47,220 --> 00:48:53,669
up to just 21 bits without your RTT

1028
00:48:50,640 --> 00:48:55,589
actually increasing so the answer of how

1029
00:48:53,670 --> 00:48:57,570
few bits can you send without impacting

1030
00:48:55,590 --> 00:48:59,790
performance for these two CD ends

1031
00:48:57,570 --> 00:49:01,520
appears to differ right next slide

1032
00:48:59,790 --> 00:49:04,980
please

1033
00:49:01,520 --> 00:49:06,780
on the upper bound on the number of bits

1034
00:49:04,980 --> 00:49:08,880
you should send the source prefix length

1035
00:49:06,780 --> 00:49:11,130
the RFC especially encourages for

1036
00:49:08,880 --> 00:49:14,820
privacy reasons not to send more than 24

1037
00:49:11,130 --> 00:49:16,920
bits for ipv4 right but we also just

1038
00:49:14,820 --> 00:49:18,930
observed that for at least one CDN and

1039
00:49:16,920 --> 00:49:21,210
probably more that's sending less than

1040
00:49:18,930 --> 00:49:23,040
24 bits actually negatively impact CDN

1041
00:49:21,210 --> 00:49:26,790
performance so it seems like there's the

1042
00:49:23,040 --> 00:49:28,980
the range of viable options is 124 bits

1043
00:49:26,790 --> 00:49:30,750
right the alternative for cursor

1044
00:49:28,980 --> 00:49:33,720
resolvers would be to keep some sort of

1045
00:49:30,750 --> 00:49:36,270
state on a per CDN or per authoritative

1046
00:49:33,720 --> 00:49:39,720
nameserver basis on how many bits they

1047
00:49:36,270 --> 00:49:41,490
should send and well obviously that

1048
00:49:39,720 --> 00:49:42,629
increases complexity and that's really

1049
00:49:41,490 --> 00:49:44,129
up to the recursive resolver whether

1050
00:49:42,630 --> 00:49:47,130
they were actually limited implement

1051
00:49:44,130 --> 00:49:48,210
that but if in a general case if you

1052
00:49:47,130 --> 00:49:51,660
want to send the same number pissed

1053
00:49:48,210 --> 00:49:53,900
everyone the answer is 24 bits next

1054
00:49:51,660 --> 00:49:53,899
slide please

1055
00:49:53,930 --> 00:50:00,270
okay this is our last topic then and

1056
00:49:57,630 --> 00:50:02,280
this is about hidden resolvers so one

1057
00:50:00,270 --> 00:50:04,380
more observation that we had from the

1058
00:50:02,280 --> 00:50:05,990
internet wide scan is that a number of

1059
00:50:04,380 --> 00:50:08,100
the queries that arrived at our

1060
00:50:05,990 --> 00:50:11,490
experimental authoritative nameserver

1061
00:50:08,100 --> 00:50:13,380
carried prefixes in the ECS option that

1062
00:50:11,490 --> 00:50:16,169
neither covered the recursive resolvers

1063
00:50:13,380 --> 00:50:18,510
IP address or the forwarders IP address

1064
00:50:16,170 --> 00:50:20,369
so they're from somewhere else something

1065
00:50:18,510 --> 00:50:24,180
else on the path in between the forward

1066
00:50:20,369 --> 00:50:26,940
and the recursive resolver right but

1067
00:50:24,180 --> 00:50:28,169
ultimately the authoritative monster was

1068
00:50:26,940 --> 00:50:32,490
going to use this

1069
00:50:28,170 --> 00:50:34,320
ECS prefix to do its topological map to

1070
00:50:32,490 --> 00:50:35,720
some edge server that will insert

1071
00:50:34,320 --> 00:50:37,490
content right

1072
00:50:35,720 --> 00:50:39,640
so the question then really becomes is

1073
00:50:37,490 --> 00:50:42,290
this hidden resolver prefix an

1074
00:50:39,640 --> 00:50:44,270
appropriate representative for the

1075
00:50:42,290 --> 00:50:47,710
forwarder the actual origin of this

1076
00:50:44,270 --> 00:50:50,330
query right next slide please

1077
00:50:47,710 --> 00:50:53,380
you can break this down to three

1078
00:50:50,330 --> 00:50:56,210
separate scenarios in our data set and

1079
00:50:53,380 --> 00:50:59,480
the first one is cases where ECS

1080
00:50:56,210 --> 00:51:01,760
actually is hurting the the mapping

1081
00:50:59,480 --> 00:51:03,619
between the forwarder and some edge

1082
00:51:01,760 --> 00:51:05,450
server and those are cases where the

1083
00:51:03,619 --> 00:51:07,849
hidden resolver prefix and the easiest

1084
00:51:05,450 --> 00:51:09,680
option is farther from the forwarder

1085
00:51:07,849 --> 00:51:10,820
than the recursive resolver so you would

1086
00:51:09,680 --> 00:51:13,098
have been better off actually not

1087
00:51:10,820 --> 00:51:15,710
sending ECS in those cases and that was

1088
00:51:13,099 --> 00:51:19,340
almost 8% of the cases in our internet

1089
00:51:15,710 --> 00:51:22,359
scan when you exclude one major public

1090
00:51:19,340 --> 00:51:24,859
resolver that tends to skew the results

1091
00:51:22,359 --> 00:51:26,420
there's another case though where ECS

1092
00:51:24,859 --> 00:51:27,470
doesn't actually help it doesn't hurt

1093
00:51:26,420 --> 00:51:30,290
but it doesn't help and those are

1094
00:51:27,470 --> 00:51:32,450
scenarios where the prefix in the ECS

1095
00:51:30,290 --> 00:51:33,980
option the hidden resolver is the same

1096
00:51:32,450 --> 00:51:35,450
distance from the floor door as the

1097
00:51:33,980 --> 00:51:37,670
recursive resolver so you went through

1098
00:51:35,450 --> 00:51:39,290
the complexity of adding ECS but you

1099
00:51:37,670 --> 00:51:41,599
actually didn't gain any benefit from

1100
00:51:39,290 --> 00:51:44,119
doing so and that was another 20% of the

1101
00:51:41,599 --> 00:51:45,770
cases in our test site and then at the

1102
00:51:44,119 --> 00:51:48,500
rest are of course scenarios where ECS

1103
00:51:45,770 --> 00:51:51,320
is actually helpful and that's about 73%

1104
00:51:48,500 --> 00:51:53,839
of the cases so that this result really

1105
00:51:51,320 --> 00:51:56,359
highlights that nearly supporting ecs

1106
00:51:53,839 --> 00:51:58,759
alone does not guarantee that you're

1107
00:51:56,359 --> 00:52:00,740
going to improve the end user experience

1108
00:51:58,760 --> 00:52:04,490
right it's very important to look at the

1109
00:52:00,740 --> 00:52:06,589
entire path from the the edge device

1110
00:52:04,490 --> 00:52:08,089
whatever the user is sitting in front of

1111
00:52:06,589 --> 00:52:09,560
all the way to the authoritative

1112
00:52:08,089 --> 00:52:10,730
nameserver and make sure that the proper

1113
00:52:09,560 --> 00:52:13,339
information is being propagated

1114
00:52:10,730 --> 00:52:15,160
throughout the entire path next slide

1115
00:52:13,339 --> 00:52:18,830
please

1116
00:52:15,160 --> 00:52:20,180
so I covered four topics here today but

1117
00:52:18,830 --> 00:52:22,040
there are many other observations

1118
00:52:20,180 --> 00:52:24,319
encourage you to please go check out the

1119
00:52:22,040 --> 00:52:26,990
paper for any other points that you'd be

1120
00:52:24,320 --> 00:52:30,490
interested in reading about and I have

1121
00:52:26,990 --> 00:52:33,169
time to take some questions I think

1122
00:52:30,490 --> 00:52:35,118
thank you very much we have actually no

1123
00:52:33,170 --> 00:52:37,400
time to take questions but like we will

1124
00:52:35,119 --> 00:52:41,440
run a few minutes over anyway so if you

1125
00:52:37,400 --> 00:52:43,700
have a burning question you can try now

1126
00:52:41,440 --> 00:52:45,380
otherwise I encourage you to read the

1127
00:52:43,700 --> 00:52:49,049
paper in contact they also fear for

1128
00:52:45,380 --> 00:52:56,219
other questions thank you very much

1129
00:52:49,049 --> 00:52:58,469
Thanks so the next presentation is again

1130
00:52:56,219 --> 00:52:59,789
remote and as I just said if people are

1131
00:52:58,469 --> 00:53:02,459
okay with that we would probably take a

1132
00:52:59,789 --> 00:53:05,359
few minutes go few minutes over to

1133
00:53:02,459 --> 00:53:12,029
running a little bit late sorry for that

1134
00:53:05,359 --> 00:53:20,399
Santiago I think basically going oh yeah

1135
00:53:12,029 --> 00:53:22,380
are you guys yes so so today I'll be

1136
00:53:20,399 --> 00:53:24,929
talking about characterizing data on

1137
00:53:22,380 --> 00:53:27,419
traffic patterns on the CDN and this is

1138
00:53:24,929 --> 00:53:28,969
a joint work with boot crush and words

1139
00:53:27,419 --> 00:53:33,058
from Akamai as well as my advisor

1140
00:53:28,969 --> 00:53:37,619
professor Aruna and yeah you could go on

1141
00:53:33,059 --> 00:53:41,759
the next slide so just to get right into

1142
00:53:37,619 --> 00:53:43,739
these this talk we observe that JSON

1143
00:53:41,759 --> 00:53:47,369
traffic is actually growing on Akamai

1144
00:53:43,739 --> 00:53:50,880
CDN so on the slide we see a figure that

1145
00:53:47,369 --> 00:53:52,679
shows the ratio of JSON requests to HTML

1146
00:53:50,880 --> 00:53:55,559
requests over a period that started

1147
00:53:52,679 --> 00:53:58,709
about three years ago and interestingly

1148
00:53:55,559 --> 00:54:01,259
we see that JSON is actually four times

1149
00:53:58,709 --> 00:54:03,779
more requested than HTML and optimized

1150
00:54:01,259 --> 00:54:05,369
CDN and this has been something that's

1151
00:54:03,779 --> 00:54:08,969
been growing over the observation period

1152
00:54:05,369 --> 00:54:13,199
it started at 1.5 X this ratio and it

1153
00:54:08,969 --> 00:54:15,599
towards the end it ended up at 4 X and

1154
00:54:13,199 --> 00:54:18,029
when we observe this and we decided to

1155
00:54:15,599 --> 00:54:19,889
dig a little bit more deeper to figure

1156
00:54:18,029 --> 00:54:22,139
out how JSON compares to other types of

1157
00:54:19,889 --> 00:54:23,759
content and we actually found that this

1158
00:54:22,139 --> 00:54:27,209
is this trend is not just happening for

1159
00:54:23,759 --> 00:54:28,859
HTML it's also happening for other types

1160
00:54:27,209 --> 00:54:31,198
of content so JSON is actually the

1161
00:54:28,859 --> 00:54:33,179
leading content type on Akamai CDN

1162
00:54:31,199 --> 00:54:37,380
except for video depending on how you

1163
00:54:33,179 --> 00:54:39,469
count video views and video hits so next

1164
00:54:37,380 --> 00:54:41,880
slide please

1165
00:54:39,469 --> 00:54:45,149
so it just has a brief background on

1166
00:54:41,880 --> 00:54:47,069
what is JSON content so JSON is just a

1167
00:54:45,149 --> 00:54:50,149
text-based data format with key value

1168
00:54:47,069 --> 00:54:53,419
pairs that's lightweight and structured

1169
00:54:50,149 --> 00:54:53,419
next slide please

1170
00:54:55,620 --> 00:55:02,490
so when we observe this we asked why why

1171
00:55:00,930 --> 00:55:05,279
should we even look at JSON what's

1172
00:55:02,490 --> 00:55:07,709
important about this and the truth is

1173
00:55:05,280 --> 00:55:10,430
that little is known about JSON content

1174
00:55:07,710 --> 00:55:12,330
delivery there's a lot of work on on

1175
00:55:10,430 --> 00:55:16,080
looking at other types of content

1176
00:55:12,330 --> 00:55:18,299
delivery on the on the web so a lot of

1177
00:55:16,080 --> 00:55:19,890
other works focus on optimizing for

1178
00:55:18,300 --> 00:55:26,460
browsing and median content

1179
00:55:19,890 --> 00:55:29,040
the media content and also a lot of work

1180
00:55:26,460 --> 00:55:30,900
looks at security aspects of these these

1181
00:55:29,040 --> 00:55:33,870
different types of content but when we

1182
00:55:30,900 --> 00:55:36,480
looked at work that focuses specifically

1183
00:55:33,870 --> 00:55:39,330
on JSON content we didn't really find a

1184
00:55:36,480 --> 00:55:43,410
lot of work on this specific content

1185
00:55:39,330 --> 00:55:46,230
delivery and and the question we had was

1186
00:55:43,410 --> 00:55:47,759
is this is JSON content delivery the

1187
00:55:46,230 --> 00:55:50,580
same as other types of content and do

1188
00:55:47,760 --> 00:55:53,880
the same optimizations apply for this

1189
00:55:50,580 --> 00:55:56,310
type of content so we seek to answer

1190
00:55:53,880 --> 00:55:58,460
these questions in this talk next slide

1191
00:55:56,310 --> 00:55:58,460
please

1192
00:55:59,690 --> 00:56:06,540
so what we do is we collect HTTP request

1193
00:56:03,660 --> 00:56:09,120
logs from Akamai site servers we use

1194
00:56:06,540 --> 00:56:12,150
specifically this Akamai's CDN network

1195
00:56:09,120 --> 00:56:15,600
as a vantage point to understand the

1196
00:56:12,150 --> 00:56:16,710
global pattern of JSON traffic and we

1197
00:56:15,600 --> 00:56:19,020
collect two data sets

1198
00:56:16,710 --> 00:56:22,320
I specifically collect a short term data

1199
00:56:19,020 --> 00:56:24,270
set that spends ten minutes of time but

1200
00:56:22,320 --> 00:56:27,570
it covers all of Alchemy's edge servers

1201
00:56:24,270 --> 00:56:31,170
and we collect a longer a data set which

1202
00:56:27,570 --> 00:56:34,470
ends 24 hours of time but it only covers

1203
00:56:31,170 --> 00:56:36,210
two of Akamai's data centers and we use

1204
00:56:34,470 --> 00:56:38,189
the short term data set to do network

1205
00:56:36,210 --> 00:56:40,800
wide coverage for overall

1206
00:56:38,190 --> 00:56:43,200
characterization of JSON traffic and we

1207
00:56:40,800 --> 00:56:46,140
use the longer term data set to do a

1208
00:56:43,200 --> 00:56:49,620
wider temporal coverage just to analyze

1209
00:56:46,140 --> 00:56:52,589
powder characterizations and just as a

1210
00:56:49,620 --> 00:56:54,810
clarification these data sets every time

1211
00:56:52,590 --> 00:56:58,770
a client makes the requests and it's an

1212
00:56:54,810 --> 00:57:01,650
Akamai edge server if HTTP requests then

1213
00:56:58,770 --> 00:57:03,450
the server know notes down information

1214
00:57:01,650 --> 00:57:06,270
about the request and this is the

1215
00:57:03,450 --> 00:57:08,600
information we use in our data set next

1216
00:57:06,270 --> 00:57:08,600
slide please

1217
00:57:09,900 --> 00:57:15,900
so to understand my data better we

1218
00:57:12,239 --> 00:57:20,309
develop a taxonomy and we specifically

1219
00:57:15,900 --> 00:57:23,009
look at three main aspects of a request

1220
00:57:20,309 --> 00:57:25,109
and response and we specifically look at

1221
00:57:23,009 --> 00:57:26,609
the source of the requests so we ask the

1222
00:57:25,109 --> 00:57:29,519
question where is the request coming

1223
00:57:26,609 --> 00:57:33,749
from we also look at the type of request

1224
00:57:29,519 --> 00:57:35,899
and also the type of response next slide

1225
00:57:33,749 --> 00:57:35,899
please

1226
00:57:37,219 --> 00:57:42,900
so I guess an interest of time will

1227
00:57:40,799 --> 00:57:45,420
specifically focus on four of these

1228
00:57:42,900 --> 00:57:48,269
aspects so for the source we'll look at

1229
00:57:45,420 --> 00:57:50,160
the device or the application that is

1230
00:57:48,269 --> 00:57:52,258
generating this request and we

1231
00:57:50,160 --> 00:57:57,420
specifically use the user agent field

1232
00:57:52,259 --> 00:57:59,430
and the HTTP request and we use user

1233
00:57:57,420 --> 00:58:00,989
agent databases and and other things

1234
00:57:59,430 --> 00:58:04,109
more details are in the paper of what we

1235
00:58:00,989 --> 00:58:06,479
do there to analyze the device and

1236
00:58:04,109 --> 00:58:08,459
application we also ask does this

1237
00:58:06,479 --> 00:58:10,319
request come from a human or is it

1238
00:58:08,459 --> 00:58:11,848
machine generated and when I when they

1239
00:58:10,319 --> 00:58:14,579
speak about human versus machine

1240
00:58:11,849 --> 00:58:17,789
generated I mean is this something that

1241
00:58:14,579 --> 00:58:19,979
a human click the button or performed an

1242
00:58:17,789 --> 00:58:22,769
action to generate the request or is

1243
00:58:19,979 --> 00:58:24,739
there a shame that just due to some

1244
00:58:22,769 --> 00:58:27,328
program is sending these requests and

1245
00:58:24,739 --> 00:58:30,420
this is pattern based analysis that

1246
00:58:27,329 --> 00:58:31,709
we'll go over later on in this talk we

1247
00:58:30,420 --> 00:58:33,209
also look at the type of requests

1248
00:58:31,709 --> 00:58:35,819
whether it's an upload or a download of

1249
00:58:33,209 --> 00:58:38,069
requests and we look at the HTT method

1250
00:58:35,819 --> 00:58:41,400
for this so it's a get method and we

1251
00:58:38,069 --> 00:58:43,739
consider this a download request but

1252
00:58:41,400 --> 00:58:45,709
it's a post put or any other sort of

1253
00:58:43,739 --> 00:58:47,910
method then it's an upload request and

1254
00:58:45,709 --> 00:58:50,788
lastly we look at the cache ability of

1255
00:58:47,910 --> 00:58:55,428
the rich ants of this JSON content using

1256
00:58:50,789 --> 00:58:55,429
CDN cash labels next slide please

1257
00:58:55,670 --> 00:59:00,329
so getting right into it the the first

1258
00:58:58,920 --> 00:59:03,329
question we have is what is the source

1259
00:59:00,329 --> 00:59:06,150
of this JSON traffic and we first look

1260
00:59:03,329 --> 00:59:09,749
at the devices that generate or that

1261
00:59:06,150 --> 00:59:13,349
request JSON content so first we find

1262
00:59:09,749 --> 00:59:15,959
that the majority of JSON requests come

1263
00:59:13,349 --> 00:59:18,929
from mobile and sparklin mobile

1264
00:59:15,959 --> 00:59:21,060
smartphones and embedded devices so we

1265
00:59:18,929 --> 00:59:23,340
find that about 64 percent

1266
00:59:21,060 --> 00:59:27,120
of content actually comes from these

1267
00:59:23,340 --> 00:59:29,820
types of devices and that's shown in the

1268
00:59:27,120 --> 00:59:32,250
figure on the screen so on the y-axis we

1269
00:59:29,820 --> 00:59:34,620
see different classes of devices and on

1270
00:59:32,250 --> 00:59:37,320
the x-axis we see the percentage of

1271
00:59:34,620 --> 00:59:39,180
requests that come from these classes of

1272
00:59:37,320 --> 00:59:42,630
devices and I'd like to also mention

1273
00:59:39,180 --> 00:59:46,410
that there is a bar that of the blue bar

1274
00:59:42,630 --> 00:59:49,020
the dark blue bar is unknown traffic and

1275
00:59:46,410 --> 00:59:53,310
it's unknown because it didn't contain a

1276
00:59:49,020 --> 00:59:57,540
user agent and the HTTP request or we

1277
00:59:53,310 --> 01:00:00,420
just couldn't classify the user agent in

1278
00:59:57,540 --> 01:00:03,350
our in our databases we also see that

1279
01:00:00,420 --> 01:00:06,990
88% of this JSON is non browser traffic

1280
01:00:03,350 --> 01:00:10,620
so it doesn't come from from a browser

1281
01:00:06,990 --> 01:00:13,740
and this is interesting because we

1282
01:00:10,620 --> 01:00:16,049
there's a lot of a research work on how

1283
01:00:13,740 --> 01:00:17,549
to optimize browsing traffic but we're

1284
01:00:16,050 --> 01:00:20,400
unsure if this applies to this type of

1285
01:00:17,550 --> 01:00:23,990
JSON content to the majority of the JSON

1286
01:00:20,400 --> 01:00:27,290
content next slide please

1287
01:00:23,990 --> 01:00:30,000
so the second question we asked is can

1288
01:00:27,290 --> 01:00:33,240
we identify if it's a human or machine

1289
01:00:30,000 --> 01:00:34,860
with the idea that if it's a it's a

1290
01:00:33,240 --> 01:00:38,250
human sending this request then the

1291
01:00:34,860 --> 01:00:42,530
response is probably really sensitive in

1292
01:00:38,250 --> 01:00:44,880
terms of human perceived performance

1293
01:00:42,530 --> 01:00:46,710
versus if it's a machine it may not be a

1294
01:00:44,880 --> 01:00:48,030
sensitive response it may just be data

1295
01:00:46,710 --> 01:00:51,090
that's being ferried back and forth

1296
01:00:48,030 --> 01:00:53,820
between machines so use autocorrelation

1297
01:00:51,090 --> 01:00:56,480
techniques which we which are further

1298
01:00:53,820 --> 01:00:59,520
described in the paper to identify

1299
01:00:56,480 --> 01:01:02,010
periodic JSON traffic and we actually

1300
01:00:59,520 --> 01:01:04,500
find that 6% of the JSON traffic we have

1301
01:01:02,010 --> 01:01:07,500
is requested periodic so these are

1302
01:01:04,500 --> 01:01:11,580
clients that are periodically sending a

1303
01:01:07,500 --> 01:01:14,970
request every X amount of seconds for

1304
01:01:11,580 --> 01:01:18,180
the same JSON content and on this on the

1305
01:01:14,970 --> 01:01:21,450
figure in the screen we have the percent

1306
01:01:18,180 --> 01:01:24,569
or we have the histogram of frequent

1307
01:01:21,450 --> 01:01:27,060
periods or most requested periods per

1308
01:01:24,570 --> 01:01:30,450
JSON object and we see that there are

1309
01:01:27,060 --> 01:01:32,880
spikes along standard periods so there

1310
01:01:30,450 --> 01:01:34,980
are spikes at the 30-second period their

1311
01:01:32,880 --> 01:01:36,450
spikes at the manipulate the

1312
01:01:34,980 --> 01:01:38,579
two or three and two and three minute

1313
01:01:36,450 --> 01:01:40,589
period and so on and when I mean by

1314
01:01:38,579 --> 01:01:44,250
standard periods at that is that they're

1315
01:01:40,589 --> 01:01:46,500
not random so they're not like there

1316
01:01:44,250 --> 01:01:50,940
aren't spikes at 16 seconds or at 59

1317
01:01:46,500 --> 01:01:54,920
seconds or or another off number these

1318
01:01:50,940 --> 01:01:59,160
are more or less pretty standard numbers

1319
01:01:54,920 --> 01:02:01,680
so using this insight that these

1320
01:01:59,160 --> 01:02:03,569
requests are requests that these objects

1321
01:02:01,680 --> 01:02:05,759
are requested frequently periodically

1322
01:02:03,570 --> 01:02:09,180
and they're also done requested at

1323
01:02:05,760 --> 01:02:10,829
standard periods we we identify this as

1324
01:02:09,180 --> 01:02:13,140
machine to machine traffic since it's

1325
01:02:10,829 --> 01:02:15,089
very difficult for a human to very

1326
01:02:13,140 --> 01:02:19,348
frequently make requests over prolonged

1327
01:02:15,089 --> 01:02:22,470
periods of time and to do so in standard

1328
01:02:19,349 --> 01:02:26,119
periods as well so when looking at this

1329
01:02:22,470 --> 01:02:28,470
machine to machine traffic we look at

1330
01:02:26,119 --> 01:02:30,329
well we want to understand more with but

1331
01:02:28,470 --> 01:02:33,029
it's doing and we see find that almost

1332
01:02:30,329 --> 01:02:35,220
80% of it is upload traffic so these are

1333
01:02:33,030 --> 01:02:38,930
requests that are actually sending data

1334
01:02:35,220 --> 01:02:42,390
to origin servers and we also find that

1335
01:02:38,930 --> 01:02:45,779
a large part of this traffic is

1336
01:02:42,390 --> 01:02:48,270
uncatchable so the caching optimizations

1337
01:02:45,780 --> 01:02:50,460
that CD ends and employee don't really

1338
01:02:48,270 --> 01:02:52,619
help this type of traffic or don't help

1339
01:02:50,460 --> 01:02:55,109
a large majority of this traffic so

1340
01:02:52,619 --> 01:02:57,300
instead we suggest that perhaps this

1341
01:02:55,109 --> 01:02:59,670
traffic can be prioritized since it's

1342
01:02:57,300 --> 01:03:01,770
machine to machine traffic where a human

1343
01:02:59,670 --> 01:03:04,859
is not awaiting response and we leave

1344
01:03:01,770 --> 01:03:07,680
this de prioritization decision to be

1345
01:03:04,859 --> 01:03:09,828
made up to network operators next slide

1346
01:03:07,680 --> 01:03:12,390
please

1347
01:03:09,829 --> 01:03:15,240
so then we ask the general question does

1348
01:03:12,390 --> 01:03:17,368
caching help all other traffic that is

1349
01:03:15,240 --> 01:03:19,500
not machine to machine traffic so we do

1350
01:03:17,369 --> 01:03:21,450
find that 80 almost 85 percent of

1351
01:03:19,500 --> 01:03:23,670
requests are download requests which

1352
01:03:21,450 --> 01:03:25,828
makes them ideal for caching since

1353
01:03:23,670 --> 01:03:27,930
they're not sending data to servers are

1354
01:03:25,829 --> 01:03:29,970
actually just receiving data however

1355
01:03:27,930 --> 01:03:31,770
when we look at this traffic we still

1356
01:03:29,970 --> 01:03:33,990
find that a large number of these

1357
01:03:31,770 --> 01:03:36,750
requests are uncatchable so fifty-five

1358
01:03:33,990 --> 01:03:39,839
percent are uncatchable and we want to

1359
01:03:36,750 --> 01:03:44,099
understand why so digging a little

1360
01:03:39,839 --> 01:03:48,110
deeper we see that 50 percent of all of

1361
01:03:44,099 --> 01:03:50,150
domains that do transmit JSON on the CDN

1362
01:03:48,110 --> 01:03:52,490
don't use any caching at all for their

1363
01:03:50,150 --> 01:03:58,100
JSON content so not one of their

1364
01:03:52,490 --> 01:04:02,419
requests are casual so we create a heat

1365
01:03:58,100 --> 01:04:04,339
map of domains we specifically bucket

1366
01:04:02,420 --> 01:04:05,720
domains into the domain industry that

1367
01:04:04,340 --> 01:04:07,220
they're in and this is seen on the

1368
01:04:05,720 --> 01:04:10,879
y-axis and the heat map on the screen

1369
01:04:07,220 --> 01:04:15,580
and likewise we plot the domain cache

1370
01:04:10,880 --> 01:04:15,580
ability on the x-axis next slide please

1371
01:04:15,610 --> 01:04:24,140
so interestingly two very different

1372
01:04:19,820 --> 01:04:26,540
types of of patterns emerge for these

1373
01:04:24,140 --> 01:04:28,250
domain industries we have one set of

1374
01:04:26,540 --> 01:04:29,990
domain industries that are almost

1375
01:04:28,250 --> 01:04:33,530
completely in cacheable so almost all of

1376
01:04:29,990 --> 01:04:36,080
them of the domains are 0% cacheable and

1377
01:04:33,530 --> 01:04:38,660
we also have another set of domains that

1378
01:04:36,080 --> 01:04:39,860
are almost completely casual domain

1379
01:04:38,660 --> 01:04:43,460
industries that are most completely

1380
01:04:39,860 --> 01:04:44,810
cashable Tom and when we look at the

1381
01:04:43,460 --> 01:04:46,810
domain industries that are uncountable

1382
01:04:44,810 --> 01:04:50,960
we see things like financial services

1383
01:04:46,810 --> 01:04:55,370
business economy and extremes so a lot

1384
01:04:50,960 --> 01:04:57,890
of these industries do carry a lot of

1385
01:04:55,370 --> 01:04:59,210
user personalized data or for the

1386
01:04:57,890 --> 01:05:01,850
streaming industries they're they're

1387
01:04:59,210 --> 01:05:03,620
more real-time data so we would expect

1388
01:05:01,850 --> 01:05:06,799
them to be uncatchable since they do

1389
01:05:03,620 --> 01:05:09,529
carry this user sensitive data that we

1390
01:05:06,800 --> 01:05:11,540
don't want to cache or they carry this

1391
01:05:09,530 --> 01:05:13,490
real-time data that's constantly

1392
01:05:11,540 --> 01:05:16,009
changing but likewise on the other side

1393
01:05:13,490 --> 01:05:17,990
we see industries that carry more static

1394
01:05:16,010 --> 01:05:21,440
content so things like entertainment and

1395
01:05:17,990 --> 01:05:25,149
news and media industries often just

1396
01:05:21,440 --> 01:05:28,880
deliver content that doesn't change so

1397
01:05:25,150 --> 01:05:31,550
we we ask ok since there's a lot of

1398
01:05:28,880 --> 01:05:34,190
domain industries that that don't

1399
01:05:31,550 --> 01:05:36,020
benefit from caching optimizations are

1400
01:05:34,190 --> 01:05:42,670
there any of their other optimizations

1401
01:05:36,020 --> 01:05:46,880
that can help and next slide please so

1402
01:05:42,670 --> 01:05:48,710
we look at ordering patterns we ask the

1403
01:05:46,880 --> 01:05:50,630
question perhaps we can leverage

1404
01:05:48,710 --> 01:05:53,150
information from ordering patterns

1405
01:05:50,630 --> 01:05:55,040
between JSON requests and its we

1406
01:05:53,150 --> 01:05:57,440
specifically look at JSON dependencies

1407
01:05:55,040 --> 01:05:59,930
as an avenue for optimization and what I

1408
01:05:57,440 --> 01:06:00,820
mean by a dependency is consider we have

1409
01:05:59,930 --> 01:06:04,060
JSON

1410
01:06:00,820 --> 01:06:06,760
decay and then object B is requested

1411
01:06:04,060 --> 01:06:08,350
next and then object C's requested after

1412
01:06:06,760 --> 01:06:10,630
that and these objects are always

1413
01:06:08,350 --> 01:06:14,620
requested in this type of order we

1414
01:06:10,630 --> 01:06:17,620
consider this to be a JSON dependency in

1415
01:06:14,620 --> 01:06:20,680
HTTP requests so the question we asked

1416
01:06:17,620 --> 01:06:23,440
is given a request for object a are we

1417
01:06:20,680 --> 01:06:26,560
able to predict that object B and C will

1418
01:06:23,440 --> 01:06:29,620
be predict will be requested after

1419
01:06:26,560 --> 01:06:31,840
object a so we performed this analysis

1420
01:06:29,620 --> 01:06:34,480
as well on clustered objects with

1421
01:06:31,840 --> 01:06:37,270
similar urls and an example is shown on

1422
01:06:34,480 --> 01:06:40,450
the side so if the URL has the same

1423
01:06:37,270 --> 01:06:43,420
structure but perhaps there's specific

1424
01:06:40,450 --> 01:06:47,410
information within the URL that it's

1425
01:06:43,420 --> 01:06:49,300
it's user specific or specific to the

1426
01:06:47,410 --> 01:06:52,240
request then we just cluster these types

1427
01:06:49,300 --> 01:06:55,660
of URLs and interestingly so we use an

1428
01:06:52,240 --> 01:06:58,330
Engram model to analyze these requests

1429
01:06:55,660 --> 01:07:00,040
transitions and we find that when

1430
01:06:58,330 --> 01:07:03,190
considering the top 10 predictions we do

1431
01:07:00,040 --> 01:07:06,490
get about a 90% accuracy using these

1432
01:07:03,190 --> 01:07:09,370
models so we conclude that actually

1433
01:07:06,490 --> 01:07:11,169
analyzing these ordering patterns would

1434
01:07:09,370 --> 01:07:13,900
be helpful for optimization for things

1435
01:07:11,170 --> 01:07:17,740
like prefetching or server push and so

1436
01:07:13,900 --> 01:07:19,870
on so yeah in conclusion we we see that

1437
01:07:17,740 --> 01:07:22,750
JSON is becoming a leading content type

1438
01:07:19,870 --> 01:07:25,660
on the web the majority is from mobile

1439
01:07:22,750 --> 01:07:28,570
and it's non browser non browsing

1440
01:07:25,660 --> 01:07:30,609
traffic and we do present to a veneer

1441
01:07:28,570 --> 01:07:33,730
optimization so one is to deprioritize

1442
01:07:30,610 --> 01:07:36,280
machines machine traffic and to look at

1443
01:07:33,730 --> 01:07:38,680
JSON ordering patterns so with that I'd

1444
01:07:36,280 --> 01:07:41,110
like to thank you guys and I'm not sure

1445
01:07:38,680 --> 01:07:42,160
if there's time for questions yes and

1446
01:07:41,110 --> 01:07:45,430
yeah good thank you very much for the

1447
01:07:42,160 --> 01:07:47,410
presentation we are already over time so

1448
01:07:45,430 --> 01:07:50,109
please just read the paper and contact

1449
01:07:47,410 --> 01:07:51,790
the authors directly thank you for

1450
01:07:50,110 --> 01:07:53,710
everybody who brought data presented

1451
01:07:51,790 --> 01:07:55,060
data especially for the remote speakers

1452
01:07:53,710 --> 01:07:58,540
because it's not the most convenient

1453
01:07:55,060 --> 01:07:59,799
time for them it's late here as well so

1454
01:07:58,540 --> 01:08:03,340
thank you everybody for staying a little

1455
01:07:59,800 --> 01:08:05,740
bit longer I know this was a little bit

1456
01:08:03,340 --> 01:08:07,720
squeezed but we actually had not it was

1457
01:08:05,740 --> 01:08:09,160
not easy to find any presentation so I'm

1458
01:08:07,720 --> 01:08:10,839
very happy that we got those from the

1459
01:08:09,160 --> 01:08:12,319
presentations in finally to get a nice

1460
01:08:10,840 --> 01:08:13,790
program

1461
01:08:12,320 --> 01:08:15,260
but next time you will have the longer

1462
01:08:13,790 --> 01:08:18,710
session again because we already have

1463
01:08:15,260 --> 01:08:22,390
some stuff queued up and therefore thank

1464
01:08:18,710 --> 01:08:22,390
you for today and see you next time

1465
01:08:22,880 --> 01:08:29,368
[Applause]

