1
00:00:38,650 --> 00:01:12,490
but you can post it to the list that

2
00:01:07,880 --> 00:01:12,490
would be great even posting reviews

3
00:01:17,890 --> 00:01:20,969
[Music]

4
00:01:23,619 --> 00:01:30,619
welcome to the web trans buff 106

5
00:01:28,179 --> 00:01:33,619
vehicle could take their seats that

6
00:01:30,619 --> 00:01:36,229
would be great as you may know the

7
00:01:33,619 --> 00:01:38,600
mailing list is web transported ITF org

8
00:01:36,229 --> 00:01:42,939
we'd encourage you to join we have a

9
00:01:38,600 --> 00:01:47,329
jabber room web trans at Java IETF org

10
00:01:42,939 --> 00:01:53,630
and the chairs are myself Bernardo boba

11
00:01:47,329 --> 00:01:56,109
and David Shanae Z Ganassi sorry dono

12
00:01:53,630 --> 00:01:58,908
well hopefully you've seen this before

13
00:01:56,109 --> 00:02:03,020
to reminder of IETF policies in effect

14
00:01:58,909 --> 00:02:06,319
on various topics the IDF's patent

15
00:02:03,020 --> 00:02:07,780
policy is set forth in BCP 79 please

16
00:02:06,319 --> 00:02:10,759
read it carefully

17
00:02:07,780 --> 00:02:13,310
as a reminder by participating the idea

18
00:02:10,758 --> 00:02:17,379
if you agree to follow ITF processes and

19
00:02:13,310 --> 00:02:21,799
policies in a bunch of other things here

20
00:02:17,379 --> 00:02:26,959
yeah and I also would like to highlight

21
00:02:21,799 --> 00:02:30,650
the code of conduct if you haven't read

22
00:02:26,959 --> 00:02:31,700
it the high order bit is be nice if you

23
00:02:30,650 --> 00:02:34,579
don't know what that means

24
00:02:31,700 --> 00:02:36,798
read it and we will be enforcing it but

25
00:02:34,579 --> 00:02:38,840
I don't expect it to be a problem and

26
00:02:36,799 --> 00:02:41,000
definitive information is in the

27
00:02:38,840 --> 00:02:49,190
documents listed below and other ITF

28
00:02:41,000 --> 00:02:50,840
BCPs okay so about the agenda a few

29
00:02:49,190 --> 00:02:52,670
things we've talked about the note well

30
00:02:50,840 --> 00:02:56,510
we should probably start distributing

31
00:02:52,670 --> 00:02:58,488
the blue sheets and get those going we'd

32
00:02:56,510 --> 00:03:02,510
also like to tell you how volunteers for

33
00:02:58,489 --> 00:03:05,420
note takers and jabber scribe do we have

34
00:03:02,510 --> 00:03:08,019
a volunteer for or volunteers for note

35
00:03:05,420 --> 00:03:08,018
takers ah

36
00:03:13,129 --> 00:03:19,720
Collin Jennings note-taker thank you do

37
00:03:16,069 --> 00:03:19,720
we have anybody else no takers

38
00:03:22,900 --> 00:03:31,220
okay how about a jabber scribe somebody

39
00:03:27,590 --> 00:03:33,970
please to join the jabber room okay

40
00:03:31,220 --> 00:03:33,970
thank you okay

41
00:03:34,669 --> 00:03:39,409
so on the agenda we'll be talking a

42
00:03:36,919 --> 00:03:41,870
little bit about the context of this

43
00:03:39,409 --> 00:03:43,730
Boff as well as bashing the agenda which

44
00:03:41,870 --> 00:03:45,829
is what we're doing right now we're

45
00:03:43,730 --> 00:03:48,828
going to start off with an overview of

46
00:03:45,829 --> 00:03:51,949
web transport which Victor will do we

47
00:03:48,829 --> 00:03:56,209
then have about 35 minutes for relevant

48
00:03:51,949 --> 00:03:57,500
drafts we have five of those and then

49
00:03:56,209 --> 00:04:01,129
we're going to have a general Q&A

50
00:03:57,500 --> 00:04:03,019
session of about 25 minutes the goal is

51
00:04:01,129 --> 00:04:04,940
for us to get through the presentations

52
00:04:03,019 --> 00:04:07,459
if we have time within each presentation

53
00:04:04,940 --> 00:04:10,489
will take clarifying questions but it is

54
00:04:07,459 --> 00:04:12,500
a little tight so we've have this big

55
00:04:10,489 --> 00:04:15,079
Q&A session at the end where we'll take

56
00:04:12,500 --> 00:04:17,358
any question relating to the bath and

57
00:04:15,079 --> 00:04:19,370
then we'll have a pointer to a charter

58
00:04:17,358 --> 00:04:21,228
discussion this is a non working group

59
00:04:19,370 --> 00:04:22,699
forming buff so we're not going to get

60
00:04:21,228 --> 00:04:24,169
into a detailed discussion of a charter

61
00:04:22,699 --> 00:04:25,969
but there is a charter discussion going

62
00:04:24,169 --> 00:04:28,700
on in the mailing list and then we'll

63
00:04:25,969 --> 00:04:30,440
have a wrap-up and summary so as I

64
00:04:28,700 --> 00:04:31,130
mentioned the time management is fairly

65
00:04:30,440 --> 00:04:33,650
tight

66
00:04:31,130 --> 00:04:35,240
we'll try to enforce enforce it and I

67
00:04:33,650 --> 00:04:37,400
will be giving roughly a two minute

68
00:04:35,240 --> 00:04:41,300
warning for presentations if we come

69
00:04:37,400 --> 00:04:44,060
close and also cutting the mic all right

70
00:04:41,300 --> 00:04:45,950
so a little bit of context as I

71
00:04:44,060 --> 00:04:49,100
mentioned this is a nonworking reforming

72
00:04:45,950 --> 00:04:52,610
buff the focus is on client-server

73
00:04:49,100 --> 00:04:54,710
protocols protocols only not api's we're

74
00:04:52,610 --> 00:04:57,740
assuming familiarity with some of the

75
00:04:54,710 --> 00:05:01,580
following RFC's the original RFC for

76
00:04:57,740 --> 00:05:03,110
WebSockets which was our c64 55 for

77
00:05:01,580 --> 00:05:05,719
those of you who remember it it uses the

78
00:05:03,110 --> 00:05:08,000
HTTP 1.1 upgrade mechanism to transition

79
00:05:05,720 --> 00:05:11,780
of TCP connection from HTTP to a

80
00:05:08,000 --> 00:05:13,820
WebSocket connection and then a RFC 8 4

81
00:05:11,780 --> 00:05:16,940
4 1 which is bootstrapping WebSockets

82
00:05:13,820 --> 00:05:20,510
from HTTP to which uses the HTTP connect

83
00:05:16,940 --> 00:05:22,670
to method as specified in RFC 7540 and

84
00:05:20,510 --> 00:05:25,070
that provides a tunnel on a single HTTP

85
00:05:22,670 --> 00:05:26,690
2 stream to carry data and it's

86
00:05:25,070 --> 00:05:29,060
multiplexed with other streams so that's

87
00:05:26,690 --> 00:05:31,219
the context that we're assuming here and

88
00:05:29,060 --> 00:05:33,230
the big question is what's next what do

89
00:05:31,220 --> 00:05:35,510
we do next after given those those two

90
00:05:33,230 --> 00:05:37,610
documents we'll hear a proposal for a

91
00:05:35,510 --> 00:05:39,770
Datagram transport that is only for

92
00:05:37,610 --> 00:05:41,090
background that was already presented in

93
00:05:39,770 --> 00:05:44,630
the quick worker Europe and most likely

94
00:05:41,090 --> 00:05:46,190
will be handled there so but it's useful

95
00:05:44,630 --> 00:05:48,200
to just get to know about it

96
00:05:46,190 --> 00:05:51,530
and then we're going to hear proposals

97
00:05:48,200 --> 00:05:53,870
in two categories one is a set of two

98
00:05:51,530 --> 00:05:55,640
proposals for extending HTTP connect

99
00:05:53,870 --> 00:05:58,160
method for HTTP 2 will hear two of those

100
00:05:55,640 --> 00:05:59,870
and then we'll hear proposals relating

101
00:05:58,160 --> 00:06:02,540
to something called the web transport

102
00:05:59,870 --> 00:06:03,800
protocol framework which includes

103
00:06:02,540 --> 00:06:05,570
support for unidirectional

104
00:06:03,800 --> 00:06:07,760
bi-directional streams unreliable

105
00:06:05,570 --> 00:06:10,190
transport of datagrams using the

106
00:06:07,760 --> 00:06:12,860
Datagram transport draft and then

107
00:06:10,190 --> 00:06:14,630
potential operation over HGB 3 and then

108
00:06:12,860 --> 00:06:16,580
just over quick and some fallback

109
00:06:14,630 --> 00:06:18,080
considerations so that's kind of framing

110
00:06:16,580 --> 00:06:22,010
what you're about to hear in the agenda

111
00:06:18,080 --> 00:06:25,580
today all right so I'm going to hand the

112
00:06:22,010 --> 00:06:28,330
mic over to Victor to do the overview of

113
00:06:25,580 --> 00:06:28,330
web transport

114
00:06:31,749 --> 00:06:37,370
good afternoon my name is Victor Vasily

115
00:06:35,360 --> 00:06:42,349
ephah I work for Google and quick team

116
00:06:37,370 --> 00:06:44,300
and I about to explain what roughly when

117
00:06:42,349 --> 00:06:48,498
transport is and what problem we're

118
00:06:44,300 --> 00:06:50,749
trying to solve here so the problem

119
00:06:48,499 --> 00:06:52,879
we're trying to solve is the problem of

120
00:06:50,749 --> 00:06:55,159
bi-directional communication on the web

121
00:06:52,879 --> 00:06:58,279
so there are many ways the websites can

122
00:06:55,159 --> 00:07:01,849
communicate the servers and many api's

123
00:06:58,279 --> 00:07:05,090
that accompany the bi-directional ones

124
00:07:01,849 --> 00:07:07,729
means that the messages can freely flow

125
00:07:05,090 --> 00:07:11,080
at any time in both ways so for instance

126
00:07:07,729 --> 00:07:13,639
the fetch API assumes request response

127
00:07:11,080 --> 00:07:17,000
and strictly enforces that and

128
00:07:13,639 --> 00:07:19,099
server-side events it seems that or web

129
00:07:17,000 --> 00:07:21,520
push are focused on server pushing to

130
00:07:19,099 --> 00:07:26,889
client but here we're talking about

131
00:07:21,520 --> 00:07:31,008
interactive sessions ah so the most the

132
00:07:26,889 --> 00:07:33,589
original way we did it is using an API

133
00:07:31,009 --> 00:07:35,919
and protocol called WebSocket which

134
00:07:33,589 --> 00:07:38,719
allows send messages in both directions

135
00:07:35,919 --> 00:07:42,549
then eventually somewhere along the way

136
00:07:38,719 --> 00:07:45,680
there was the rtcdatachannel which is

137
00:07:42,550 --> 00:07:47,779
has more transport flexibilities and web

138
00:07:45,680 --> 00:07:50,360
sockets because WebSocket this TCP base

139
00:07:47,779 --> 00:07:54,110
so it only allows you to do whatever TCP

140
00:07:50,360 --> 00:07:57,830
allows rtcdatachannel whereas our HTTP

141
00:07:54,110 --> 00:08:00,800
based so they allow you to do partial or

142
00:07:57,830 --> 00:08:03,378
unreliable and unordered messages but

143
00:08:00,800 --> 00:08:04,669
however are not solving our problem

144
00:08:03,379 --> 00:08:07,639
because they are designed for

145
00:08:04,669 --> 00:08:10,580
peer-to-peer use case so there is a gap

146
00:08:07,639 --> 00:08:14,050
for reliable button orders and we're

147
00:08:10,580 --> 00:08:18,710
unreliable and ordered messages

148
00:08:14,050 --> 00:08:22,129
communications that for client-server

149
00:08:18,710 --> 00:08:26,688
context and we intend to address that

150
00:08:22,129 --> 00:08:29,439
gap using web transport so what is web

151
00:08:26,689 --> 00:08:32,930
transport web transport it's roughly

152
00:08:29,439 --> 00:08:35,060
it's not one protocol because we found

153
00:08:32,929 --> 00:08:36,978
that there are multiple protocols that

154
00:08:35,059 --> 00:08:39,919
people would want to use depending on

155
00:08:36,979 --> 00:08:43,760
context but all those protocols and

156
00:08:39,919 --> 00:08:45,140
api's provide two main features one is

157
00:08:43,760 --> 00:08:47,660
that they allow you to send

158
00:08:45,140 --> 00:08:51,560
dreams and receive streams and streams

159
00:08:47,660 --> 00:08:53,350
are well there if you're familiar of

160
00:08:51,560 --> 00:08:56,930
quakes there are basically quick streams

161
00:08:53,350 --> 00:09:00,530
they are in a lot of ways similar to

162
00:08:56,930 --> 00:09:02,719
things like WebSocket messages or HTTP

163
00:09:00,530 --> 00:09:06,709
messages or a lot of other contexts and

164
00:09:02,720 --> 00:09:09,440
senses there are reliable at least two

165
00:09:06,710 --> 00:09:12,790
things a single stream and single stream

166
00:09:09,440 --> 00:09:16,550
were saved in the order they are

167
00:09:12,790 --> 00:09:18,469
arbitrary size so you can send as many

168
00:09:16,550 --> 00:09:23,359
data on a single stream as you want

169
00:09:18,470 --> 00:09:26,630
which is Atlas a property which is often

170
00:09:23,360 --> 00:09:29,870
desired but in a lot of cases we fail

171
00:09:26,630 --> 00:09:32,450
the chief to us okay and the extradition

172
00:09:29,870 --> 00:09:37,280
is set the streams are assumed to be

173
00:09:32,450 --> 00:09:39,230
independent ie a loss on packets of data

174
00:09:37,280 --> 00:09:41,360
on one stream does not block reading

175
00:09:39,230 --> 00:09:45,230
from I surf stream and they're assumed

176
00:09:41,360 --> 00:09:48,500
to be cancelable in the sense that if

177
00:09:45,230 --> 00:09:50,150
you close a stream you can stop we're

178
00:09:48,500 --> 00:09:51,710
transmitting all of the data that you've

179
00:09:50,150 --> 00:09:53,990
already committed to that stream

180
00:09:51,710 --> 00:09:57,260
the second feature provided by all web

181
00:09:53,990 --> 00:10:00,380
transport protocols or datagrams

182
00:09:57,260 --> 00:10:04,520
and data grants are roughly basically

183
00:10:00,380 --> 00:10:06,439
UDP they are assumed to be at most M psi

184
00:10:04,520 --> 00:10:09,710
stands they're assumed to be completely

185
00:10:06,440 --> 00:10:11,450
unreliable and I say when possible

186
00:10:09,710 --> 00:10:13,580
because we define some transports which

187
00:10:11,450 --> 00:10:17,540
do map on TCP you are that's often

188
00:10:13,580 --> 00:10:21,020
impossible so what makes us interesting

189
00:10:17,540 --> 00:10:24,380
is that the webparts the part where we

190
00:10:21,020 --> 00:10:26,810
expose web transport to basically

191
00:10:24,380 --> 00:10:30,830
arbitrary JavaScript code at Ranson user

192
00:10:26,810 --> 00:10:34,040
imposes us a lot of requirements and a

193
00:10:30,830 --> 00:10:36,230
lot of the work most of the work around

194
00:10:34,040 --> 00:10:38,810
those protocols is about satisfying the

195
00:10:36,230 --> 00:10:41,450
requirements so number one we need the

196
00:10:38,810 --> 00:10:43,729
encryption and authentication of TLS so

197
00:10:41,450 --> 00:10:45,680
that's fairly straightforward number two

198
00:10:43,730 --> 00:10:48,490
we need to make sure that there is a

199
00:10:45,680 --> 00:10:52,069
feedback based congestion control ie

200
00:10:48,490 --> 00:10:56,210
there unlike before all UDP sockets you

201
00:10:52,070 --> 00:10:58,070
cannot overload the network with poorly

202
00:10:56,210 --> 00:10:59,059
behaving clients because we have no

203
00:10:58,070 --> 00:11:01,039
guarantees about

204
00:10:59,059 --> 00:11:02,839
behavior there is a requirement and

205
00:11:01,039 --> 00:11:07,159
origin check and this is a very

206
00:11:02,839 --> 00:11:09,579
important because on the web you are

207
00:11:07,159 --> 00:11:11,929
assumed to enforce access through

208
00:11:09,579 --> 00:11:14,238
sending the origin of website which

209
00:11:11,929 --> 00:11:16,848
initiates as a connection

210
00:11:14,239 --> 00:11:19,339
there's also currencies web it's

211
00:11:16,849 --> 00:11:20,959
important for a quick transport

212
00:11:19,339 --> 00:11:23,719
connection to not be able to just

213
00:11:20,959 --> 00:11:26,299
pretend it's a regular quick socket or

214
00:11:23,719 --> 00:11:29,019
TCP socket or UDP socket so there's a

215
00:11:26,299 --> 00:11:32,539
defense against protocol attacks and

216
00:11:29,019 --> 00:11:34,729
they're lost in the interesting is that

217
00:11:32,539 --> 00:11:36,679
would have to integrate with things like

218
00:11:34,729 --> 00:11:41,049
content security policy so we want all

219
00:11:36,679 --> 00:11:44,389
resources to be identifiable using Kri

220
00:11:41,049 --> 00:11:47,358
so why do we want this there are roughly

221
00:11:44,389 --> 00:11:49,729
the original page is WebSocket for UDP a

222
00:11:47,359 --> 00:11:51,349
lot of people want well some things that

223
00:11:49,729 --> 00:11:55,069
works a lot like WebSocket they had

224
00:11:51,349 --> 00:11:59,119
simplicity of WebSocket but is not tied

225
00:11:55,069 --> 00:12:01,009
to TCP and for years we struggle to

226
00:11:59,119 --> 00:12:03,579
provide this because there was no really

227
00:12:01,009 --> 00:12:07,969
good way to provide with security

228
00:12:03,579 --> 00:12:08,809
properties but also provides and

229
00:12:07,969 --> 00:12:11,449
reliability

230
00:12:08,809 --> 00:12:13,309
and the other is WebSockets but without

231
00:12:11,449 --> 00:12:15,378
head-of-line blocking is like I have

232
00:12:13,309 --> 00:12:17,478
multiple independent streams of messages

233
00:12:15,379 --> 00:12:19,429
and I want them to be independent or

234
00:12:17,479 --> 00:12:22,129
we've reached out we've talked to a lot

235
00:12:19,429 --> 00:12:24,379
of people and we bill it a lot of them

236
00:12:22,129 --> 00:12:28,219
are interested there is wide range one

237
00:12:24,379 --> 00:12:30,949
of them is web game developers who are

238
00:12:28,219 --> 00:12:33,169
very interested in doing online

239
00:12:30,949 --> 00:12:36,289
multiplayer games it's a lot of

240
00:12:33,169 --> 00:12:38,359
interested for applications like remote

241
00:12:36,289 --> 00:12:40,699
desktop or cloud gaming where it's a

242
00:12:38,359 --> 00:12:42,889
wary user does something and it's a

243
00:12:40,699 --> 00:12:44,358
server and then you get picture back and

244
00:12:42,889 --> 00:12:46,159
it's very important for that to have

245
00:12:44,359 --> 00:12:49,009
little lag which is impossible

246
00:12:46,159 --> 00:12:50,959
impossible with TCP and web chat is an

247
00:12:49,009 --> 00:12:52,849
example of an application which is

248
00:12:50,959 --> 00:12:57,018
possible right now but would work much

249
00:12:52,849 --> 00:12:59,479
better if you have independence so we

250
00:12:57,019 --> 00:13:01,879
preserve roughly four transports

251
00:12:59,479 --> 00:13:04,189
proposed and they can be split across

252
00:13:01,879 --> 00:13:06,409
two axes first access is really simple

253
00:13:04,189 --> 00:13:09,319
it's whether it's based on quick or

254
00:13:06,409 --> 00:13:11,359
based on TCP and as well no quick is

255
00:13:09,319 --> 00:13:12,889
often blocked and network so we almost

256
00:13:11,359 --> 00:13:16,339
always need a TCP based

257
00:13:12,889 --> 00:13:19,309
back and the second axis and more

258
00:13:16,339 --> 00:13:22,399
interesting czar transports which

259
00:13:19,309 --> 00:13:24,108
provide dedicated very ross level

260
00:13:22,399 --> 00:13:25,549
connections and their higher level

261
00:13:24,109 --> 00:13:28,549
transport which provide pooled

262
00:13:25,549 --> 00:13:33,220
connections by pulling by using HTTP

263
00:13:28,549 --> 00:13:35,959
session polling so that access is a

264
00:13:33,220 --> 00:13:38,329
roughly exists because i've talked to

265
00:13:35,959 --> 00:13:40,878
many and users and there are roughly two

266
00:13:38,329 --> 00:13:43,579
cases well there are people who want far

267
00:13:40,879 --> 00:13:44,899
most fine-grained control over transport

268
00:13:43,579 --> 00:13:47,238
and sort of people who care about

269
00:13:44,899 --> 00:13:49,369
real-time or people who care about

270
00:13:47,239 --> 00:13:54,199
having as little dependences as possible

271
00:13:49,369 --> 00:13:56,239
and HTTP free transport is more optimal

272
00:13:54,199 --> 00:13:58,579
because one it allows you to cut all of

273
00:13:56,239 --> 00:14:01,730
the handshake latency all of the slow

274
00:13:58,579 --> 00:14:04,758
start latency and it in general intro

275
00:14:01,730 --> 00:14:11,239
has all the nice properties of HTTP like

276
00:14:04,759 --> 00:14:15,079
routing and naming and the second axis

277
00:14:11,239 --> 00:14:18,499
is quick versus tcp and we have roughly

278
00:14:15,079 --> 00:14:20,269
two proposals one is I've not written

279
00:14:18,499 --> 00:14:22,850
itself it's called fallback transport

280
00:14:20,269 --> 00:14:24,739
and the idea is that you can write some

281
00:14:22,850 --> 00:14:27,529
things that looks like quick connection

282
00:14:24,739 --> 00:14:29,569
but they send over WebSocket so it is

283
00:14:27,529 --> 00:14:31,850
completely pol available in JavaScript

284
00:14:29,569 --> 00:14:33,709
web developers would just be able to use

285
00:14:31,850 --> 00:14:37,220
it today because it's just based on

286
00:14:33,709 --> 00:14:39,049
existing way yes second for HTTP free is

287
00:14:37,220 --> 00:14:41,119
a most natural fault occurs HTTP two

288
00:14:39,049 --> 00:14:44,499
because they're intended to be

289
00:14:41,119 --> 00:14:48,559
semantically equivalent so that's

290
00:14:44,499 --> 00:14:50,259
basically it's a short summary of what

291
00:14:48,559 --> 00:14:57,199
we're going to talk about today and

292
00:14:50,259 --> 00:14:59,739
what's it proposed code before case yeah

293
00:14:57,199 --> 00:15:05,779
we have time for about two minutes of

294
00:14:59,739 --> 00:15:09,970
clarifying questions any clarifying

295
00:15:05,779 --> 00:15:09,970
questions so anything I've said so far

296
00:15:12,759 --> 00:15:16,820
colonies just

297
00:15:14,180 --> 00:15:17,959
real question you do you have a require

298
00:15:16,820 --> 00:15:19,730
on your requirement slide you have a

299
00:15:17,960 --> 00:15:21,740
requirement as well for into you

300
00:15:19,730 --> 00:15:24,080
discovery given the data grams or MTU

301
00:15:21,740 --> 00:15:26,990
sized cause that's a good question I

302
00:15:24,080 --> 00:15:29,180
need to clarify that but like basically

303
00:15:26,990 --> 00:15:31,190
like they're in API were required to

304
00:15:29,180 --> 00:15:33,229
give being able to give them to you but

305
00:15:31,190 --> 00:15:35,000
that's like more detailed and we're

306
00:15:33,230 --> 00:15:37,100
required to empty you to be maintained

307
00:15:35,000 --> 00:15:43,910
across calls for like HTTP when you

308
00:15:37,100 --> 00:15:45,470
proxy it Tommy Polly Apple so the

309
00:15:43,910 --> 00:15:47,089
question before you got to this slide

310
00:15:45,470 --> 00:15:48,320
that I would have asked is like okay how

311
00:15:47,089 --> 00:15:51,170
are we doing this fallback transport

312
00:15:48,320 --> 00:15:52,399
because TCP is not equivalent to quick

313
00:15:51,170 --> 00:15:55,160
because you're not gonna get the multi

314
00:15:52,399 --> 00:15:58,339
streaming so this makes sense so I

315
00:15:55,160 --> 00:16:00,230
clarifying question is you say it's

316
00:15:58,339 --> 00:16:02,180
based on WebSocket is what in what ways

317
00:16:00,230 --> 00:16:04,100
is it more than WebSocket and can we

318
00:16:02,180 --> 00:16:07,040
call it something like WebSocket

319
00:16:04,100 --> 00:16:08,990
transport patients

320
00:16:07,040 --> 00:16:11,209
it looks like quick so it has multiple

321
00:16:08,990 --> 00:16:13,040
strings where it's well suck it doesn't

322
00:16:11,209 --> 00:16:14,989
have multi-streaming it's one string but

323
00:16:13,040 --> 00:16:16,640
WebSocket has like message delineation

324
00:16:14,990 --> 00:16:18,770
and framing in it which is the key

325
00:16:16,640 --> 00:16:21,110
difference from just a TCP stream and so

326
00:16:18,770 --> 00:16:24,350
I assume you're just using those messy

327
00:16:21,110 --> 00:16:26,209
yeah in three my face exactly the string

328
00:16:24,350 --> 00:16:34,339
mission okay yeah maybe we should work

329
00:16:26,209 --> 00:16:35,630
on the name to be genetic so a number of

330
00:16:34,339 --> 00:16:38,000
the use case you had also have

331
00:16:35,630 --> 00:16:39,410
requirements on like low latency

332
00:16:38,000 --> 00:16:40,670
congestion control which would require

333
00:16:39,410 --> 00:16:42,709
something a different control then it's

334
00:16:40,670 --> 00:16:44,089
like the standard bulk transfer for

335
00:16:42,709 --> 00:16:47,750
quick has to be looked at that at all

336
00:16:44,089 --> 00:16:49,810
and how would that short answer is on

337
00:16:47,750 --> 00:16:54,050
server you can do whatever you want

338
00:16:49,810 --> 00:16:56,300
because well whatever you you'll tear

339
00:16:54,050 --> 00:16:58,400
your code you put your quic library

340
00:16:56,300 --> 00:17:01,279
allows you so you have controls as you

341
00:16:58,400 --> 00:17:02,600
do with TCP or UDP or anything you

342
00:17:01,279 --> 00:17:05,630
control your server II of control your

343
00:17:02,600 --> 00:17:09,980
operating system on client it is a more

344
00:17:05,630 --> 00:17:13,730
interesting topic and roughly oh we've

345
00:17:09,980 --> 00:17:15,890
dated yeah it's a very interesting topic

346
00:17:13,730 --> 00:17:17,480
we have an open issue and yet have

347
00:17:15,890 --> 00:17:18,819
you're welcome to it what we've

348
00:17:17,480 --> 00:17:21,140
discussed so far

349
00:17:18,819 --> 00:17:23,959
Erika scroller can just go back I think

350
00:17:21,140 --> 00:17:25,790
one slide or to the triad there you go

351
00:17:23,959 --> 00:17:27,740
fantastic sorry charge yeah this one

352
00:17:25,790 --> 00:17:34,668
right um so

353
00:17:27,740 --> 00:17:37,520
on as I on is it required that we

354
00:17:34,669 --> 00:17:39,260
standardize all these ah for fallback

355
00:17:37,520 --> 00:17:41,270
transfers it's not actually required

356
00:17:39,260 --> 00:17:42,770
with standardized it would be nice I

357
00:17:41,270 --> 00:17:44,510
mean I guess I guess so

358
00:17:42,770 --> 00:17:47,960
like supposing I'm of the opinion that

359
00:17:44,510 --> 00:17:49,840
like HDPE is everything and um then I

360
00:17:47,960 --> 00:17:52,070
don't need stuff on the right right yeah

361
00:17:49,840 --> 00:17:53,959
I'm not arguing to understand what that

362
00:17:52,070 --> 00:17:57,168
with brizl is the proposal of

363
00:17:53,960 --> 00:17:59,270
standardized the top ones required

364
00:17:57,169 --> 00:18:01,279
standardization basically uh okay so

365
00:17:59,270 --> 00:18:03,770
right wonder cry standardization below

366
00:18:01,279 --> 00:18:06,440
us we extend say IETF standard that

367
00:18:03,770 --> 00:18:09,320
requires the top left one requires

368
00:18:06,440 --> 00:18:12,289
basically cut point assignment and it

369
00:18:09,320 --> 00:18:14,809
requires some protocol which would be

370
00:18:12,289 --> 00:18:17,570
implement both by browsers and server so

371
00:18:14,809 --> 00:18:19,970
the standards would be really it's there

372
00:18:17,570 --> 00:18:22,158
to make sure we have arrived to

373
00:18:19,970 --> 00:18:23,210
something into a purple okay but some

374
00:18:22,159 --> 00:18:25,010
point the future would be interesting

375
00:18:23,210 --> 00:18:26,240
for me to understand why you think issue

376
00:18:25,010 --> 00:18:29,658
quick transport is needed but perhaps

377
00:18:26,240 --> 00:18:31,070
not now okay might I suggest bringing

378
00:18:29,659 --> 00:18:32,539
this question back after the

379
00:18:31,070 --> 00:18:36,639
presentation on quick transport which

380
00:18:32,539 --> 00:18:39,679
microclimate I have right at but yes I

381
00:18:36,640 --> 00:18:42,220
think we should cut the mic and go on to

382
00:18:39,679 --> 00:18:42,220
the next presentation

383
00:18:54,820 --> 00:18:57,909
[Music]

384
00:18:59,530 --> 00:19:04,309
all right that's better

385
00:19:01,690 --> 00:19:05,600
howdy so if anybody was in quick this

386
00:19:04,309 --> 00:19:06,770
morning you have seen all of these

387
00:19:05,600 --> 00:19:08,209
slides and we will make it very very

388
00:19:06,770 --> 00:19:11,450
fast so we can get on to the next one

389
00:19:08,210 --> 00:19:12,740
that you haven't already seen so in

390
00:19:11,450 --> 00:19:16,160
talking about an unreliable data

391
00:19:12,740 --> 00:19:18,530
extension too quick we're looking at

392
00:19:16,160 --> 00:19:20,000
kind of that bottom section of what

393
00:19:18,530 --> 00:19:22,250
happens when we need unreliable data

394
00:19:20,000 --> 00:19:24,260
transmission and we've got lots of

395
00:19:22,250 --> 00:19:25,840
applications that want to do reliable

396
00:19:24,260 --> 00:19:28,580
control streams and unreliable flows

397
00:19:25,840 --> 00:19:31,039
list of use cases here vectors list of

398
00:19:28,580 --> 00:19:32,928
use cases earlier there's a lot more I

399
00:19:31,039 --> 00:19:37,070
hope nobody's offended if they're not in

400
00:19:32,929 --> 00:19:42,110
that list right now so quick is giving

401
00:19:37,070 --> 00:19:44,840
you a opportunity that we are using for

402
00:19:42,110 --> 00:19:46,870
the extension mechanism with quick where

403
00:19:44,840 --> 00:19:50,330
we would like to be able to have our

404
00:19:46,870 --> 00:19:52,219
reliable or our reliable data be

405
00:19:50,330 --> 00:19:54,980
transmitted alongside are unreliable

406
00:19:52,220 --> 00:19:57,740
data and we'd like to take advantage of

407
00:19:54,980 --> 00:20:00,200
the congestion controller and all of the

408
00:19:57,740 --> 00:20:01,820
other things in quick like the ability

409
00:20:00,200 --> 00:20:03,740
to negotiate things via transport

410
00:20:01,820 --> 00:20:05,600
parameters the ability to have our

411
00:20:03,740 --> 00:20:07,700
unreliable data be act even if it's not

412
00:20:05,600 --> 00:20:09,408
retransmitted we'd like to use the

413
00:20:07,700 --> 00:20:11,539
handshake in the authentication context

414
00:20:09,409 --> 00:20:13,130
and you're also very very likely to

415
00:20:11,539 --> 00:20:14,059
already have a quick connection up

416
00:20:13,130 --> 00:20:17,059
especially if you're negotiating

417
00:20:14,059 --> 00:20:18,830
something so in the standard use case

418
00:20:17,059 --> 00:20:20,500
where you you bring up a control string

419
00:20:18,830 --> 00:20:22,580
you negotiate the use of some particular

420
00:20:20,500 --> 00:20:24,260
data channel that you're going to send

421
00:20:22,580 --> 00:20:25,939
and then you send unreliable data over

422
00:20:24,260 --> 00:20:28,908
that channel in this case instead of

423
00:20:25,940 --> 00:20:31,850
having to do another handshake to bring

424
00:20:28,909 --> 00:20:33,200
up that channel you simply open or not

425
00:20:31,850 --> 00:20:33,860
open but you simply start sending

426
00:20:33,200 --> 00:20:36,740
datagrams

427
00:20:33,860 --> 00:20:39,260
alongside your existing connection that

428
00:20:36,740 --> 00:20:40,820
has all your reliable data it looks like

429
00:20:39,260 --> 00:20:42,320
this it's a frame it's one of the more

430
00:20:40,820 --> 00:20:43,939
simple frames you could ever do you say

431
00:20:42,320 --> 00:20:47,240
it's a Datagram and then you put stuff

432
00:20:43,940 --> 00:20:49,850
in it it has a length that is optional

433
00:20:47,240 --> 00:20:51,200
if you'd like to have a link there you

434
00:20:49,850 --> 00:20:52,820
can pack it in with other frames in a

435
00:20:51,200 --> 00:20:54,650
packet if you don't have a length it

436
00:20:52,820 --> 00:20:55,939
extends to the end of the packet that's

437
00:20:54,650 --> 00:20:58,250
exceptionally useful if you are

438
00:20:55,940 --> 00:20:59,330
tunneling something over this and we

439
00:20:58,250 --> 00:21:00,919
negotiate it with the transport

440
00:20:59,330 --> 00:21:03,610
parameter that also helps give you hints

441
00:21:00,919 --> 00:21:05,990
as to things like MTU and how big your

442
00:21:03,610 --> 00:21:07,399
Datagram should be

443
00:21:05,990 --> 00:21:09,020
they're a felicity they are not

444
00:21:07,399 --> 00:21:10,399
retransmitted they do not contribute to

445
00:21:09,020 --> 00:21:11,720
flow control we got lots of really good

446
00:21:10,399 --> 00:21:13,699
feedback about this in quick this

447
00:21:11,720 --> 00:21:15,140
morning so we will have more discussions

448
00:21:13,700 --> 00:21:17,559
about that if you'd like to talk we'd

449
00:21:15,140 --> 00:21:19,880
love to chat there's no more flow ID

450
00:21:17,559 --> 00:21:23,330
although that is now in David's draft

451
00:21:19,880 --> 00:21:25,640
for h3 Datagram and one of the comments

452
00:21:23,330 --> 00:21:28,189
that comes up here is that many many

453
00:21:25,640 --> 00:21:30,740
many of the potential uses of datagrams

454
00:21:28,190 --> 00:21:33,440
have a very very similar concept of flow

455
00:21:30,740 --> 00:21:35,270
ID and people seem to be pretty split as

456
00:21:33,440 --> 00:21:37,399
to whether that's something that each

457
00:21:35,270 --> 00:21:39,980
application should define how that works

458
00:21:37,399 --> 00:21:41,090
or if you should have a common one since

459
00:21:39,980 --> 00:21:42,799
they all have it and you'd like to be

460
00:21:41,090 --> 00:21:46,459
able to run maybe more than one thing at

461
00:21:42,799 --> 00:21:50,480
the same time which is seems pretty

462
00:21:46,460 --> 00:21:51,740
sensible but we'll get there we've got a

463
00:21:50,480 --> 00:21:53,450
bunch of people who are supporting us

464
00:21:51,740 --> 00:21:54,860
right now and since we put these slides

465
00:21:53,450 --> 00:21:57,020
up we've got a couple more so that's

466
00:21:54,860 --> 00:21:58,370
even fun because it's not that hard to

467
00:21:57,020 --> 00:22:01,429
add support for a new frame types that

468
00:21:58,370 --> 00:22:04,789
you stick stuff in and we had some nice

469
00:22:01,429 --> 00:22:06,559
Interop during the hackathon so that

470
00:22:04,789 --> 00:22:08,149
brings us to the end of datagrams the

471
00:22:06,559 --> 00:22:10,190
idea here being that we will have a way

472
00:22:08,149 --> 00:22:12,979
within quick to send unreliable data

473
00:22:10,190 --> 00:22:14,059
that is multiplexed alongside reliable

474
00:22:12,980 --> 00:22:19,549
stuff which is kind of where web

475
00:22:14,059 --> 00:22:25,549
transport needs a building block any

476
00:22:19,549 --> 00:22:27,889
clarifying questions and to repeat a

477
00:22:25,549 --> 00:22:30,470
quick point since someone asked offline

478
00:22:27,890 --> 00:22:32,600
the current plan is for this extension

479
00:22:30,470 --> 00:22:34,549
to live in the quick working group we're

480
00:22:32,600 --> 00:22:36,860
just having kindly give this

481
00:22:34,549 --> 00:22:43,690
presentation to give people context that

482
00:22:36,860 --> 00:22:46,189
weren't here this morning it's a race

483
00:22:43,690 --> 00:22:49,789
tell me Paulie Apple so this is not a

484
00:22:46,190 --> 00:22:53,149
question really for you as much as for

485
00:22:49,789 --> 00:22:57,230
the use of web transport of this so

486
00:22:53,149 --> 00:23:00,139
we'll have a flow ID in the h3 layer but

487
00:22:57,230 --> 00:23:02,090
not necessarily in the raw quick layer

488
00:23:00,140 --> 00:23:03,620
will we be talking about that later

489
00:23:02,090 --> 00:23:04,939
about like is that one of the

490
00:23:03,620 --> 00:23:08,239
modifications that we'll have in quick

491
00:23:04,940 --> 00:23:10,010
transport well I think Victor will talk

492
00:23:08,240 --> 00:23:13,159
about the session ID in HD to b3

493
00:23:10,010 --> 00:23:14,629
transport okay and we'll also have a

494
00:23:13,159 --> 00:23:16,340
presentation on quick transport so

495
00:23:14,630 --> 00:23:18,800
hopefully that will cover so that will

496
00:23:16,340 --> 00:23:23,050
that should address like the use of

497
00:23:18,800 --> 00:23:26,090
Floyd easier I think so yeah

498
00:23:23,050 --> 00:23:28,210
Cory Fairhurst being very brief but I

499
00:23:26,090 --> 00:23:30,590
mean are we expected to multiplex

500
00:23:28,210 --> 00:23:33,310
different types of traffic together as

501
00:23:30,590 --> 00:23:35,959
in the web sockets and other traffic

502
00:23:33,310 --> 00:23:37,909
because I have concerns about the flock

503
00:23:35,960 --> 00:23:39,320
where the floor control might spin out

504
00:23:37,910 --> 00:23:41,480
in that direction and that might

505
00:23:39,320 --> 00:23:50,300
something for quick tilaka yes we should

506
00:23:41,480 --> 00:23:52,760
talk okay next all right we made it in

507
00:23:50,300 --> 00:23:54,350
under five minutes let's do it again so

508
00:23:52,760 --> 00:23:58,720
we've talked about this a little bit in

509
00:23:54,350 --> 00:24:02,169
the past in both TS vwg and in HTP phase

510
00:23:58,720 --> 00:24:07,430
but this is kind of the how do we do

511
00:24:02,170 --> 00:24:09,770
multiplexed byte streams over HB 2 so we

512
00:24:07,430 --> 00:24:11,960
want to have a generic way to transport

513
00:24:09,770 --> 00:24:14,690
on a single kind of on the wire

514
00:24:11,960 --> 00:24:16,250
transport connection secure multiplex

515
00:24:14,690 --> 00:24:18,380
byte streams that can be either

516
00:24:16,250 --> 00:24:19,730
unidirectional or bi-directional we'd

517
00:24:18,380 --> 00:24:21,380
like to have already done all the

518
00:24:19,730 --> 00:24:24,230
handshakes we need so that we have a low

519
00:24:21,380 --> 00:24:26,000
setup cost for new streams we'd like to

520
00:24:24,230 --> 00:24:28,400
be able to share a single congestion and

521
00:24:26,000 --> 00:24:32,360
recovery context for getting these

522
00:24:28,400 --> 00:24:33,860
reliable streams to the other side one

523
00:24:32,360 --> 00:24:35,959
of the use cases that comes up and will

524
00:24:33,860 --> 00:24:37,310
add to this list a little bit later is

525
00:24:35,960 --> 00:24:38,420
peer-to-peer communication if you're

526
00:24:37,310 --> 00:24:43,190
doing something like remote our pieces

527
00:24:38,420 --> 00:24:46,190
remote IPC or really any other time

528
00:24:43,190 --> 00:24:50,780
where you you need to have multiplexing

529
00:24:46,190 --> 00:24:52,820
of multiple streams of data where you'd

530
00:24:50,780 --> 00:24:55,040
like them to be bundled together as a

531
00:24:52,820 --> 00:24:55,970
group and we'd like to be able to do

532
00:24:55,040 --> 00:24:57,560
that while we share the underlying

533
00:24:55,970 --> 00:24:58,730
transport with existing infrastructure

534
00:24:57,560 --> 00:25:02,389
that actually like gets across the

535
00:24:58,730 --> 00:25:04,580
internet so HB 2 is a great candidate

536
00:25:02,390 --> 00:25:07,610
for this because it gives you a way to

537
00:25:04,580 --> 00:25:09,409
exchange and negotiate things it gives

538
00:25:07,610 --> 00:25:11,389
you multiple extremes it gives you that

539
00:25:09,410 --> 00:25:13,010
same shared recovery State it gives you

540
00:25:11,390 --> 00:25:15,200
flow control it gives you stream

541
00:25:13,010 --> 00:25:16,460
relationships and it also happens to

542
00:25:15,200 --> 00:25:19,280
work on the internet which is kind of a

543
00:25:16,460 --> 00:25:21,020
nice benefit and of course some of these

544
00:25:19,280 --> 00:25:22,910
properties and a lot of the you know

545
00:25:21,020 --> 00:25:25,790
fact that it's secure etc is coming from

546
00:25:22,910 --> 00:25:29,000
TLS and the reliability coming from TCP

547
00:25:25,790 --> 00:25:31,460
etc etc but the whole point is H to

548
00:25:29,000 --> 00:25:32,600
taken as a transport provides a lot of

549
00:25:31,460 --> 00:25:35,270
these functionalities

550
00:25:32,600 --> 00:25:36,830
aren't actually specific to hgp itself

551
00:25:35,270 --> 00:25:39,050
that have nothing to do with a

552
00:25:36,830 --> 00:25:43,070
particular request for a resource in a

553
00:25:39,050 --> 00:25:44,240
response to that so we've had a couple

554
00:25:43,070 --> 00:25:45,530
of different ways that we've solved this

555
00:25:44,240 --> 00:25:47,570
we've talked about adding new frame

556
00:25:45,530 --> 00:25:49,160
types the zero zero version of the draft

557
00:25:47,570 --> 00:25:52,370
actually added a new frame type which

558
00:25:49,160 --> 00:25:53,810
you could use bi-directionally based on

559
00:25:52,370 --> 00:25:56,659
some of the conversations that we had

560
00:25:53,810 --> 00:25:58,190
since then we moved on to extending the

561
00:25:56,660 --> 00:26:02,120
connect handshake

562
00:25:58,190 --> 00:26:03,650
so we basically use connect to connect

563
00:26:02,120 --> 00:26:06,739
through a remote endpoint to somebody

564
00:26:03,650 --> 00:26:09,890
else and then the WebSocket over H to

565
00:26:06,740 --> 00:26:11,740
RFC allows extending that connect to

566
00:26:09,890 --> 00:26:14,870
actually connect to a particular

567
00:26:11,740 --> 00:26:16,160
protocol token that's on the server and

568
00:26:14,870 --> 00:26:18,139
we can use the headers that go along

569
00:26:16,160 --> 00:26:20,180
with that connect request to add

570
00:26:18,140 --> 00:26:22,850
additional negotiation of like what are

571
00:26:20,180 --> 00:26:24,380
we going to be talking here and so we

572
00:26:22,850 --> 00:26:26,300
want to be able to do the same thing

573
00:26:24,380 --> 00:26:27,530
where we have traditional HTTP

574
00:26:26,300 --> 00:26:29,060
request/response streams on this

575
00:26:27,530 --> 00:26:30,740
connection and on the same connection

576
00:26:29,060 --> 00:26:33,950
I've already got to somebody I can say

577
00:26:30,740 --> 00:26:35,920
this other stream is for X and then we

578
00:26:33,950 --> 00:26:39,050
can talk X over that stream alongside

579
00:26:35,920 --> 00:26:41,900
and in some versions of this document

580
00:26:39,050 --> 00:26:45,950
we've had tunneling of messages or

581
00:26:41,900 --> 00:26:48,860
datagrams with additional framing or you

582
00:26:45,950 --> 00:26:50,240
can punt that out and treat it as a

583
00:26:48,860 --> 00:26:51,469
separate thing negotiated in a very

584
00:26:50,240 --> 00:26:52,820
similar manner which is what we've done

585
00:26:51,470 --> 00:26:56,210
in the latest versions of the draft to

586
00:26:52,820 --> 00:26:58,100
keep things a little more focused so

587
00:26:56,210 --> 00:27:01,160
basically extend to connect as it is

588
00:26:58,100 --> 00:27:02,990
today defines WebSocket and has a bunch

589
00:27:01,160 --> 00:27:05,240
of other headers that are very specific

590
00:27:02,990 --> 00:27:06,830
to WebSockets so pretty much what we're

591
00:27:05,240 --> 00:27:09,590
saying here is we'd like to define a new

592
00:27:06,830 --> 00:27:12,020
protocol value which is byte stream and

593
00:27:09,590 --> 00:27:13,550
say you don't really have to send all

594
00:27:12,020 --> 00:27:14,629
these WebSocket specific things because

595
00:27:13,550 --> 00:27:18,200
this is going to be generic not

596
00:27:14,630 --> 00:27:21,140
WebSockets so you can not do the parts

597
00:27:18,200 --> 00:27:24,140
that you previously had to do and so we

598
00:27:21,140 --> 00:27:26,600
say here if you specify byte stream you

599
00:27:24,140 --> 00:27:29,150
capital must have already negotiated

600
00:27:26,600 --> 00:27:31,159
some way of knowing what is going to be

601
00:27:29,150 --> 00:27:33,640
on that byte stream but the suggestion

602
00:27:31,160 --> 00:27:35,600
there is that you can specify your own

603
00:27:33,640 --> 00:27:37,010
protocol token there the same way

604
00:27:35,600 --> 00:27:38,780
WebSocket does to say this is what I'm

605
00:27:37,010 --> 00:27:39,770
going to be speaking over this stream

606
00:27:38,780 --> 00:27:41,360
which is where some of these other

607
00:27:39,770 --> 00:27:42,570
things that Victor is going to talk

608
00:27:41,360 --> 00:27:44,889
about come in

609
00:27:42,570 --> 00:27:47,439
so we talked about how we could do this

610
00:27:44,890 --> 00:27:49,030
for some remote IPC stuff this also is

611
00:27:47,440 --> 00:27:54,010
interesting when it comes to things like

612
00:27:49,030 --> 00:27:57,190
quick because HTP 3-over quick can fall

613
00:27:54,010 --> 00:27:59,500
back to HB 2 over TLS TCP so to victors

614
00:27:57,190 --> 00:28:02,620
question of what happens when quic is

615
00:27:59,500 --> 00:28:04,510
blocked what happens when you're not

616
00:28:02,620 --> 00:28:08,110
doing H 3 but you're actually just using

617
00:28:04,510 --> 00:28:10,000
quick the transport parts of quick and

618
00:28:08,110 --> 00:28:13,060
that's blocked and how do you get the

619
00:28:10,000 --> 00:28:15,790
equivalent thing over TCP so H 2 gives

620
00:28:13,060 --> 00:28:21,060
you a lot of the same things that quick

621
00:28:15,790 --> 00:28:23,500
the transport does can we use that

622
00:28:21,060 --> 00:28:25,690
alongside so the only thing that we're

623
00:28:23,500 --> 00:28:28,150
missing here is we defined a new setting

624
00:28:25,690 --> 00:28:31,210
that says we can now do this extended

625
00:28:28,150 --> 00:28:33,130
connect handshake bidirectionally the

626
00:28:31,210 --> 00:28:34,660
same way that quick can initiate a

627
00:28:33,130 --> 00:28:38,080
stream from either endpoint of the

628
00:28:34,660 --> 00:28:39,730
connection so in summary we go through

629
00:28:38,080 --> 00:28:40,840
we add some new protocol values we

630
00:28:39,730 --> 00:28:42,130
stripped down the extended connect

631
00:28:40,840 --> 00:28:45,100
handshake and we allow you to do it in

632
00:28:42,130 --> 00:28:47,100
two directions the key here where I

633
00:28:45,100 --> 00:28:50,139
think this fits into web transports is

634
00:28:47,100 --> 00:28:53,649
we're looking to multiplex multiple

635
00:28:50,140 --> 00:28:55,300
things over a single connection we need

636
00:28:53,650 --> 00:28:57,160
to have some mechanism for negotiating

637
00:28:55,300 --> 00:28:59,379
what the use is of that stream what are

638
00:28:57,160 --> 00:29:01,900
you going to be talking on this byte

639
00:28:59,380 --> 00:29:03,250
stream is minimally useful for the use

640
00:29:01,900 --> 00:29:04,690
cases that we happen to have where we

641
00:29:03,250 --> 00:29:05,710
already know what the other guy is going

642
00:29:04,690 --> 00:29:07,180
to be talking because we've already done

643
00:29:05,710 --> 00:29:08,140
that out of hand

644
00:29:07,180 --> 00:29:09,340
but if you're doing this in a more

645
00:29:08,140 --> 00:29:12,130
generic way you'd really like to be able

646
00:29:09,340 --> 00:29:14,470
to negotiate that and we need to be able

647
00:29:12,130 --> 00:29:15,250
to do this by directionally which means

648
00:29:14,470 --> 00:29:17,080
we need to be able to traverse

649
00:29:15,250 --> 00:29:20,140
intermediaries in both directions so you

650
00:29:17,080 --> 00:29:21,970
need some way to when the traditional

651
00:29:20,140 --> 00:29:23,350
server is saying I'd like to open a

652
00:29:21,970 --> 00:29:25,510
stream to a client you need some way to

653
00:29:23,350 --> 00:29:28,000
know which potential client do you want

654
00:29:25,510 --> 00:29:28,990
that to go to and it'd be real nice if

655
00:29:28,000 --> 00:29:31,450
this could be extended to support

656
00:29:28,990 --> 00:29:34,420
unreliable unreliable delivery and

657
00:29:31,450 --> 00:29:36,340
datagrams although unreliable delivery

658
00:29:34,420 --> 00:29:38,560
when you're running over tos and tcp is

659
00:29:36,340 --> 00:29:41,740
a little bit harder but at the very

660
00:29:38,560 --> 00:29:43,270
least datagrams and messages are very

661
00:29:41,740 --> 00:29:47,920
useful concepts that we're looking for

662
00:29:43,270 --> 00:29:50,910
out of this general space can any

663
00:29:47,920 --> 00:29:50,910
clarifying questions

664
00:29:52,530 --> 00:30:03,299
yeah just repair tipping on Facebook I

665
00:30:04,830 --> 00:30:13,000
am curious why we're thinking it's okay

666
00:30:09,070 --> 00:30:16,389
to not say what the protocol is that

667
00:30:13,000 --> 00:30:19,450
we're tunneling it's just a string and

668
00:30:16,390 --> 00:30:21,580
it could definitely be very useful and

669
00:30:19,450 --> 00:30:23,830
and if this is a crazy question you know

670
00:30:21,580 --> 00:30:27,340
just say crazy we'll talk about it later

671
00:30:23,830 --> 00:30:29,379
but in the past when I worked on load

672
00:30:27,340 --> 00:30:31,809
balancers knowing what kind of thing was

673
00:30:29,380 --> 00:30:34,630
tunneling could allow it to do de

674
00:30:31,809 --> 00:30:36,850
multiplexing and/or reordering in ways

675
00:30:34,630 --> 00:30:41,080
that were very helpful so the lack of

676
00:30:36,850 --> 00:30:43,719
that could be interesting anyway god

677
00:30:41,080 --> 00:30:46,389
thinks that would be totally reasonable

678
00:30:43,720 --> 00:30:48,520
to put in there this is a legacy because

679
00:30:46,390 --> 00:30:51,640
the use case that we were actually

680
00:30:48,520 --> 00:30:53,020
shipped for this does not need that

681
00:30:51,640 --> 00:30:54,100
because it's already negotiate out of

682
00:30:53,020 --> 00:30:56,139
bin and there's only one particular

683
00:30:54,100 --> 00:30:57,309
value there so for us it's a useless

684
00:30:56,140 --> 00:31:00,100
token because we're not picking between

685
00:30:57,309 --> 00:31:03,610
anything but to use this more

686
00:31:00,100 --> 00:31:06,990
generically I think we do okay I think

687
00:31:03,610 --> 00:31:06,990
we'll move to the next presentation

688
00:31:14,420 --> 00:31:17,569
[Music]

689
00:31:20,630 --> 00:31:27,170
[Music]

690
00:31:30,270 --> 00:31:36,010
hello everyone

691
00:31:32,520 --> 00:31:40,510
next though I will present HTTP

692
00:31:36,010 --> 00:31:43,330
extension for messages case LM and from

693
00:31:40,510 --> 00:31:48,700
Facebook and we already published listen

694
00:31:43,330 --> 00:31:51,129
this internet draft so different from

695
00:31:48,700 --> 00:31:54,059
web browsing message will require by

696
00:31:51,130 --> 00:31:56,799
Direction communication so basically

697
00:31:54,059 --> 00:32:00,280
client need to send a message to server

698
00:31:56,799 --> 00:32:02,650
and I get a little knowledge and server

699
00:32:00,280 --> 00:32:05,320
sometimes also needed to send a request

700
00:32:02,650 --> 00:32:10,870
down to a client and get a little spot

701
00:32:05,320 --> 00:32:12,580
so we are not on the first one to build

702
00:32:10,870 --> 00:32:16,239
a list by direction communication

703
00:32:12,580 --> 00:32:20,500
solution on top of HTTP last many

704
00:32:16,240 --> 00:32:24,100
existing solution we categorize layer to

705
00:32:20,500 --> 00:32:27,669
two major groups so first ones Street

706
00:32:24,100 --> 00:32:30,159
internally second wines server push in

707
00:32:27,669 --> 00:32:32,440
the next I were talking about why they

708
00:32:30,160 --> 00:32:37,179
are not good enough for messenger use

709
00:32:32,440 --> 00:32:40,570
case when we said say string tunneling

710
00:32:37,179 --> 00:32:44,230
so basically client established actually

711
00:32:40,570 --> 00:32:47,710
DB stream to server after lap the string

712
00:32:44,230 --> 00:32:51,299
is used as a tunnel based on the way of

713
00:32:47,710 --> 00:32:56,559
the user usually string less many

714
00:32:51,299 --> 00:32:58,900
solution many internet standard ones

715
00:32:56,559 --> 00:33:02,500
lawn pooling another one to web socket

716
00:32:58,900 --> 00:33:05,590
and third ones aggregate just talking

717
00:33:02,500 --> 00:33:09,490
about changing strings in Manteca to

718
00:33:05,590 --> 00:33:13,000
byte stream so once this is done already

719
00:33:09,490 --> 00:33:17,650
server can initiate a communication took

720
00:33:13,000 --> 00:33:20,679
talk line fearlessly no so I wanted to

721
00:33:17,650 --> 00:33:24,370
point it's worthwhile to point out this

722
00:33:20,679 --> 00:33:26,550
is a string it's used as law socket so

723
00:33:24,370 --> 00:33:28,820
basically we are used actually

724
00:33:26,550 --> 00:33:32,610
the product application protocol as

725
00:33:28,820 --> 00:33:36,300
transport protocol here that means

726
00:33:32,610 --> 00:33:39,889
client server has to speak some product

727
00:33:36,300 --> 00:33:43,290
application product Ovilus tunnel

728
00:33:39,890 --> 00:33:45,720
so let's element even for listen this

729
00:33:43,290 --> 00:33:48,899
kind of approach so first one it

730
00:33:45,720 --> 00:33:51,000
introduces extra complexity so basically

731
00:33:48,900 --> 00:33:54,030
the data needed to go through multiple

732
00:33:51,000 --> 00:33:55,490
multiple layers of dreaming for example

733
00:33:54,030 --> 00:33:58,310
you have to go to application layer

734
00:33:55,490 --> 00:34:02,040
WebSocket earlier and that julia and

735
00:33:58,310 --> 00:34:04,290
they will be at an article head on top

736
00:34:02,040 --> 00:34:09,418
of it and make it a less efficient on a

737
00:34:04,290 --> 00:34:12,719
wire this is lab we forced the web

738
00:34:09,418 --> 00:34:17,100
developer to this endless um protocol on

739
00:34:12,719 --> 00:34:20,520
top of just lister no more important

740
00:34:17,100 --> 00:34:24,899
actually by sending all message within

741
00:34:20,520 --> 00:34:27,000
one single string we actually defeated

742
00:34:24,899 --> 00:34:30,029
many optimization introduced at the back

743
00:34:27,000 --> 00:34:32,070
actually db2 and that should easily for

744
00:34:30,030 --> 00:34:35,280
example if we send the all a message on

745
00:34:32,070 --> 00:34:37,890
one string we reintroduce the head of

746
00:34:35,280 --> 00:34:42,000
line blocking in HTTP slickest

747
00:34:37,889 --> 00:34:45,210
and also because we send all that all a

748
00:34:42,000 --> 00:34:48,179
message your state of rain so we bypass

749
00:34:45,210 --> 00:34:50,790
a header compression scene so we only

750
00:34:48,179 --> 00:34:54,750
have one screen now and of course we

751
00:34:50,790 --> 00:34:56,460
basilar stream prioritization and the

752
00:34:54,750 --> 00:34:58,830
sun control message if for example go

753
00:34:56,460 --> 00:35:01,800
away is becomes less effective because

754
00:34:58,830 --> 00:35:05,759
there's no clear boundary with one

755
00:35:01,800 --> 00:35:10,920
string so then the natural question what

756
00:35:05,760 --> 00:35:13,980
about actually be to push server push so

757
00:35:10,920 --> 00:35:16,560
solar push it's optimal best ever

758
00:35:13,980 --> 00:35:19,230
optimization to regular content degree

759
00:35:16,560 --> 00:35:21,720
for latency from server to client so

760
00:35:19,230 --> 00:35:24,600
let's take a look at how it works

761
00:35:21,720 --> 00:35:27,240
together so we assume there's a social

762
00:35:24,600 --> 00:35:30,120
data stream it's already established

763
00:35:27,240 --> 00:35:32,209
flan client the proxy and the server now

764
00:35:30,120 --> 00:35:37,130
server wanted to send a message to

765
00:35:32,210 --> 00:35:39,470
client either we believe furnaces

766
00:35:37,130 --> 00:35:42,500
open a social stream and descended onto

767
00:35:39,470 --> 00:35:46,160
planned because this is the best ever

768
00:35:42,500 --> 00:35:48,920
and this message you may are made may

769
00:35:46,160 --> 00:35:52,520
not make Trula claimed and it's not a

770
00:35:48,920 --> 00:35:55,430
reliable communication for messenger so

771
00:35:52,520 --> 00:35:59,960
listen lack of a chronology making it

772
00:35:55,430 --> 00:36:02,419
unsuitable for our use case so what do

773
00:35:59,960 --> 00:36:05,540
we do what do we do in the proposal it's

774
00:36:02,420 --> 00:36:08,240
a way make a socialist dream more

775
00:36:05,540 --> 00:36:12,170
generic we caught Lord Hill Street in

776
00:36:08,240 --> 00:36:14,479
English upped as its name implies this

777
00:36:12,170 --> 00:36:17,690
string is owning used for loading

778
00:36:14,480 --> 00:36:21,920
purpose we also introduced a new frame

779
00:36:17,690 --> 00:36:25,000
call extended header it's very similar

780
00:36:21,920 --> 00:36:28,640
to regular actually DP had actually

781
00:36:25,000 --> 00:36:32,660
headers let only into difference once

782
00:36:28,640 --> 00:36:35,480
this header can be sent by disappear to

783
00:36:32,660 --> 00:36:38,509
open the extend to the street and it

784
00:36:35,480 --> 00:36:40,520
also needed to open street for loading

785
00:36:38,510 --> 00:36:41,530
purpose so let's take a look at how it

786
00:36:40,520 --> 00:36:44,140
works

787
00:36:41,530 --> 00:36:48,490
assume the loading screens already

788
00:36:44,140 --> 00:36:52,629
established server lender can initiate

789
00:36:48,490 --> 00:36:56,390
extend astray by send out a extend ahead

790
00:36:52,630 --> 00:36:58,310
proxy will be useless as referred Lorien

791
00:36:56,390 --> 00:37:00,850
stream to make a lot initiation and

792
00:36:58,310 --> 00:37:03,950
finally the way be loaded to the server

793
00:37:00,850 --> 00:37:06,589
then we get a response below server so

794
00:37:03,950 --> 00:37:09,759
server can do this too so basically he

795
00:37:06,590 --> 00:37:12,200
opened a open extended string with

796
00:37:09,760 --> 00:37:14,450
extend header and a get a response from

797
00:37:12,200 --> 00:37:17,120
client with Lisa by deduction

798
00:37:14,450 --> 00:37:24,379
communication we can use actually db2

799
00:37:17,120 --> 00:37:28,910
for messages use case so here it's more

800
00:37:24,380 --> 00:37:32,480
since about the hallway Hollis can use

801
00:37:28,910 --> 00:37:34,850
the to traverse media media's so let's

802
00:37:32,480 --> 00:37:36,980
assume we already have this lot in a lot

803
00:37:34,850 --> 00:37:39,529
instant ready from client one declined

804
00:37:36,980 --> 00:37:40,850
to and the info server wanna send a

805
00:37:39,530 --> 00:37:43,090
message to climb the wall

806
00:37:40,850 --> 00:37:47,610
he just need to refer this Lord history

807
00:37:43,090 --> 00:37:49,940
he can do this one for kleiner too

808
00:37:47,610 --> 00:37:52,260
and we also can use this worm for

809
00:37:49,940 --> 00:37:56,940
basically lists also can use the for

810
00:37:52,260 --> 00:38:00,630
grouping streets let's assume we have

811
00:37:56,940 --> 00:38:02,790
this lot history and all the extension

812
00:38:00,630 --> 00:38:07,650
string reversed when is lot in stream we

813
00:38:02,790 --> 00:38:10,380
go to sever one and the server to so

814
00:38:07,650 --> 00:38:12,480
cool party so we don't need all that

815
00:38:10,380 --> 00:38:18,180
extended string don't need to carry

816
00:38:12,480 --> 00:38:21,720
about any headers for loading purpose so

817
00:38:18,180 --> 00:38:25,080
mostly close to work with with us it's a

818
00:38:21,720 --> 00:38:27,899
web transport of a tree and need only be

819
00:38:25,080 --> 00:38:30,420
presented by difficulty next here I want

820
00:38:27,900 --> 00:38:35,340
to give a head-to-head a comparison

821
00:38:30,420 --> 00:38:38,550
between our extension and over website

822
00:38:35,340 --> 00:38:40,410
web transport over street so firstly

823
00:38:38,550 --> 00:38:43,500
it's a lot in stream versus web a

824
00:38:40,410 --> 00:38:46,980
transporter session so they are very

825
00:38:43,500 --> 00:38:51,240
similar and posses used for loading

826
00:38:46,980 --> 00:38:54,840
purpose and post use data dependence

827
00:38:51,240 --> 00:38:58,439
trees extended stream vs. web trans went

828
00:38:54,840 --> 00:39:00,750
web transport stream this is a fairly

829
00:38:58,440 --> 00:39:04,320
similar they can create by either pier

830
00:39:00,750 --> 00:39:06,900
and less Lord it's really depending on

831
00:39:04,320 --> 00:39:10,200
Laura string or session ID it cannot

832
00:39:06,900 --> 00:39:12,780
have independent loaded but we have some

833
00:39:10,200 --> 00:39:16,830
fundamental difference it's how do we

834
00:39:12,780 --> 00:39:19,740
model message the data exchange between

835
00:39:16,830 --> 00:39:22,770
client and server our proposal is to try

836
00:39:19,740 --> 00:39:25,379
to model the data exchanged as actually

837
00:39:22,770 --> 00:39:27,600
be message so basically when I say

838
00:39:25,380 --> 00:39:32,370
actually massively it's a structured

839
00:39:27,600 --> 00:39:36,720
metadata across data in web which is

840
00:39:32,370 --> 00:39:39,540
virtually persuade the model data as by

841
00:39:36,720 --> 00:39:42,509
a string of bytes so we believe actually

842
00:39:39,540 --> 00:39:44,880
be message it's a better obstruction and

843
00:39:42,510 --> 00:39:48,200
it's a really broad building block and

844
00:39:44,880 --> 00:39:53,280
it's more friendly for end-users

845
00:39:48,200 --> 00:39:55,730
okay I will stop here and clarifying

846
00:39:53,280 --> 00:39:55,730
questions

847
00:39:58,390 --> 00:40:11,859
I repair to pay on just I'm gonna ask us

848
00:40:10,420 --> 00:40:16,210
to make sure we're all on the same page

849
00:40:11,860 --> 00:40:19,030
that a quick description of this could

850
00:40:16,210 --> 00:40:20,860
be that we are saying that we have a

851
00:40:19,030 --> 00:40:23,200
bunch of HTTP messages and we want to

852
00:40:20,860 --> 00:40:26,380
make sure that they are all routed to

853
00:40:23,200 --> 00:40:26,980
the same final destination correct

854
00:40:26,380 --> 00:40:30,330
mm-hmm

855
00:40:26,980 --> 00:40:30,330
okay thank you very much

856
00:40:31,840 --> 00:40:37,480
relaying for Chris lemons do I correctly

857
00:40:34,650 --> 00:40:39,490
understand that every proxy between the

858
00:40:37,480 --> 00:40:43,060
client and server must support these

859
00:40:39,490 --> 00:40:45,490
extended streams for them to operate yes

860
00:40:43,060 --> 00:40:52,900
it's neither to be what are you

861
00:40:45,490 --> 00:41:12,270
end-to-end yes okay we'll go to the next

862
00:40:52,900 --> 00:41:12,270
presentation thank you well again

863
00:41:13,630 --> 00:41:22,750
now that I've outlined before what what

864
00:41:20,320 --> 00:41:25,090
what transfer is and now that's I want

865
00:41:22,750 --> 00:41:27,130
to go over to particular protocols

866
00:41:25,090 --> 00:41:29,140
proposed and one of them is called quick

867
00:41:27,130 --> 00:41:32,370
transport in our escalation free

868
00:41:29,140 --> 00:41:35,680
transport so quick transport is

869
00:41:32,370 --> 00:41:39,250
basically it's IDs it's like WebSocket

870
00:41:35,680 --> 00:41:43,240
but for quick and unlike WebSockets the

871
00:41:39,250 --> 00:41:46,720
design principle where I've adopted was

872
00:41:43,240 --> 00:41:49,959
we're going to take quick and extend it

873
00:41:46,720 --> 00:41:52,509
as minimal as possible that is we will

874
00:41:49,960 --> 00:41:54,490
not add features and make it as easy to

875
00:41:52,510 --> 00:41:57,010
implement and understand for people who

876
00:41:54,490 --> 00:41:58,899
already know what quickest so what are

877
00:41:57,010 --> 00:42:01,210
the extensions that we do have to add

878
00:41:58,900 --> 00:42:04,660
and turns out there are basically three

879
00:42:01,210 --> 00:42:07,510
things you need to add for quick to to

880
00:42:04,660 --> 00:42:09,879
allow your JavaScript to initiate quick

881
00:42:07,510 --> 00:42:12,400
connections wellness you need to make

882
00:42:09,880 --> 00:42:14,620
sure that the connections

883
00:42:12,400 --> 00:42:17,470
Shadid from the web do not appear like

884
00:42:14,620 --> 00:42:20,259
regular connections and we use a TL TL

885
00:42:17,470 --> 00:42:22,509
SLBM mechanism forces with the finding

886
00:42:20,260 --> 00:42:25,480
KL p and values to make sure that it's

887
00:42:22,510 --> 00:42:28,270
WQ as opposed to for example H free

888
00:42:25,480 --> 00:42:31,150
which is HTTP free value and the browser

889
00:42:28,270 --> 00:42:34,150
enforces that the second is that the

890
00:42:31,150 --> 00:42:36,420
client the server has to know what was

891
00:42:34,150 --> 00:42:40,870
the origin of the webpage which

892
00:42:36,420 --> 00:42:43,570
initiated the connection and in order to

893
00:42:40,870 --> 00:42:45,549
do this we have a dedicated stream which

894
00:42:43,570 --> 00:42:47,500
would call client indication which I'll

895
00:42:45,550 --> 00:42:49,120
go out there the surge is we need to

896
00:42:47,500 --> 00:42:52,240
your eye since this is not a treaty

897
00:42:49,120 --> 00:42:54,819
viewing it knew your ice cream so client

898
00:42:52,240 --> 00:42:58,180
indication is just how we tell what the

899
00:42:54,820 --> 00:43:01,870
origin is it is a simple key value

900
00:42:58,180 --> 00:43:04,960
couple of that sentence from two we

901
00:43:01,870 --> 00:43:07,569
define only two keys one its origin in

902
00:43:04,960 --> 00:43:10,810
which you specify origin code it as

903
00:43:07,570 --> 00:43:14,050
defines itself see the second is a path

904
00:43:10,810 --> 00:43:15,880
and the path I mentioned the URL so the

905
00:43:14,050 --> 00:43:20,140
quick transport has very simple your eye

906
00:43:15,880 --> 00:43:23,170
Seema it's a you have the hostname

907
00:43:20,140 --> 00:43:25,359
hostname is what you connect to in it's

908
00:43:23,170 --> 00:43:26,830
sent as a part of as an eyes that's how

909
00:43:25,360 --> 00:43:29,170
the server knows what's the hostname is

910
00:43:26,830 --> 00:43:31,150
you have support number two which you

911
00:43:29,170 --> 00:43:33,310
connect and there is a path in the query

912
00:43:31,150 --> 00:43:36,430
component which are all sent as a part

913
00:43:33,310 --> 00:43:36,820
of that string to its well it's that

914
00:43:36,430 --> 00:43:40,390
simple

915
00:43:36,820 --> 00:43:43,810
oh okay so here is a worked example of

916
00:43:40,390 --> 00:43:46,060
everything that happens example.com

917
00:43:43,810 --> 00:43:47,890
tries to connect to server to test to

918
00:43:46,060 --> 00:43:51,009
import 50 cells and using the your I

919
00:43:47,890 --> 00:43:53,410
specify there as a browser sends clan

920
00:43:51,010 --> 00:43:56,800
hello and make sure say L p.m. is that

921
00:43:53,410 --> 00:43:59,080
week you the server replies with LT and

922
00:43:56,800 --> 00:44:03,010
W it which points a browser knows that's

923
00:43:59,080 --> 00:44:04,900
a server in fact wants to talk to a web

924
00:44:03,010 --> 00:44:10,150
client as opposed to just random quick

925
00:44:04,900 --> 00:44:11,680
client on step four or the browser now

926
00:44:10,150 --> 00:44:13,690
can sense the origin and the path

927
00:44:11,680 --> 00:44:16,779
component and it senses in the stream

928
00:44:13,690 --> 00:44:18,790
after which the browser basically can

929
00:44:16,780 --> 00:44:21,420
allow the client to send whatever client

930
00:44:18,790 --> 00:44:24,520
data wants whatever data client once

931
00:44:21,420 --> 00:44:25,380
it's f5 the class the server receives

932
00:44:24,520 --> 00:44:27,150
the origin it's

933
00:44:25,380 --> 00:44:29,160
which has two options either to accept

934
00:44:27,150 --> 00:44:32,160
the origin or to just tear down the

935
00:44:29,160 --> 00:44:35,029
connection appropriate error code after

936
00:44:32,160 --> 00:44:37,529
this handshake happened the connection

937
00:44:35,030 --> 00:44:39,810
basically is not different from regular

938
00:44:37,530 --> 00:44:42,300
quick connection you can open quick

939
00:44:39,810 --> 00:44:44,460
streams and they are directly mapped to

940
00:44:42,300 --> 00:44:47,550
the streams you have and you can send

941
00:44:44,460 --> 00:44:50,040
data grams and the data grams are just

942
00:44:47,550 --> 00:44:52,020
like sick glasses serve the client can

943
00:44:50,040 --> 00:44:55,890
call send Datagram and whatever client

944
00:44:52,020 --> 00:44:57,780
sends a sense there so that is overview

945
00:44:55,890 --> 00:45:03,109
at this entirety of quick transport

946
00:44:57,780 --> 00:45:06,200
protocol HTTP free transport is

947
00:45:03,110 --> 00:45:09,630
approximately that simple except here

948
00:45:06,200 --> 00:45:11,879
it's a since it's over HTTP free the

949
00:45:09,630 --> 00:45:14,220
problems like your eye and origin or so

950
00:45:11,880 --> 00:45:16,650
for us because we can send origin using

951
00:45:14,220 --> 00:45:19,080
headers and we send your own headers and

952
00:45:16,650 --> 00:45:21,990
we can just use HTTP URI so what HTTP

953
00:45:19,080 --> 00:45:26,250
free transport is is it gives you

954
00:45:21,990 --> 00:45:28,020
effectively illogical or some things

955
00:45:26,250 --> 00:45:30,120
that looks like a quick connection ie

956
00:45:28,020 --> 00:45:32,100
it's a collection of streams where you

957
00:45:30,120 --> 00:45:34,430
can send and receive strings in both

958
00:45:32,100 --> 00:45:37,350
direction and you can send data grams

959
00:45:34,430 --> 00:45:38,669
but it's inside the existing HTTP free

960
00:45:37,350 --> 00:45:41,549
connection which is your favorite

961
00:45:38,670 --> 00:45:46,170
connection and they check a single

962
00:45:41,550 --> 00:45:48,480
session can be a single HTTP free

963
00:45:46,170 --> 00:45:50,640
connection can have as many HTTP free

964
00:45:48,480 --> 00:45:53,070
session as the server allows because

965
00:45:50,640 --> 00:45:55,980
they're all multiplex so the way you do

966
00:45:53,070 --> 00:45:57,450
establish that connection it's very

967
00:45:55,980 --> 00:46:00,450
similar to the concept of the routing

968
00:45:57,450 --> 00:46:04,049
stream in the previous proposal is that

969
00:46:00,450 --> 00:46:06,149
you use extended connect to send the

970
00:46:04,050 --> 00:46:08,220
request to establish the session if the

971
00:46:06,150 --> 00:46:10,520
server accepts it gives you an ID which

972
00:46:08,220 --> 00:46:15,270
is uniquely scoped to that connection

973
00:46:10,520 --> 00:46:18,480
and once you have that ID you can create

974
00:46:15,270 --> 00:46:20,670
streams on both sides by using a special

975
00:46:18,480 --> 00:46:23,550
I define in the draft I define a special

976
00:46:20,670 --> 00:46:26,880
frame and you say this belongs to an

977
00:46:23,550 --> 00:46:31,920
HTTP free transport this is the idea of

978
00:46:26,880 --> 00:46:35,300
that transport and the rest of the

979
00:46:31,920 --> 00:46:39,210
stream or the rest of the Datagram is

980
00:46:35,300 --> 00:46:42,900
whatever the application wants

981
00:46:39,210 --> 00:46:44,550
I know that is written currently as a

982
00:46:42,900 --> 00:46:46,859
proposal that's nothing fly any higher

983
00:46:44,550 --> 00:46:49,770
level semantics like headers or anything

984
00:46:46,859 --> 00:46:55,440
you using ATP so it's mostly using HTTP

985
00:46:49,770 --> 00:46:57,509
as a channel so I similarly to quick

986
00:46:55,440 --> 00:47:00,060
transport I have two worked example for

987
00:46:57,510 --> 00:47:03,839
this it's like you this time you use an

988
00:47:00,060 --> 00:47:06,299
HTTP URL and it sends a connect request

989
00:47:03,839 --> 00:47:08,339
with predefined parameters it's also

990
00:47:06,300 --> 00:47:10,849
used since its uses extended connect it

991
00:47:08,339 --> 00:47:13,940
also this times a custom protocol header

992
00:47:10,849 --> 00:47:17,660
and for everything else

993
00:47:13,940 --> 00:47:24,990
III user suggesting HTTP mechanisms oh

994
00:47:17,660 --> 00:47:26,549
so that's basically it yeah so we can

995
00:47:24,990 --> 00:47:28,618
take some clarifying questions on

996
00:47:26,550 --> 00:47:30,390
Victor's two presentations quick

997
00:47:28,619 --> 00:47:33,180
transport and htv-3 transport and then

998
00:47:30,390 --> 00:47:35,450
we can go into the general Q&A so any

999
00:47:33,180 --> 00:47:44,520
clarifying questions relating to the two

1000
00:47:35,450 --> 00:47:47,220
presentations Victor just gave I look

1001
00:47:44,520 --> 00:47:50,940
spotty CloudFlare so I was reading the

1002
00:47:47,220 --> 00:47:52,890
specification for HTTP 3 transport and

1003
00:47:50,940 --> 00:47:56,490
as you got here you say that you require

1004
00:47:52,890 --> 00:47:58,049
the extended connect method yeah I just

1005
00:47:56,490 --> 00:48:02,790
wanted to double check my understanding

1006
00:47:58,050 --> 00:48:05,760
in the h2 that is enabled via a h2

1007
00:48:02,790 --> 00:48:08,400
setting but in h3 this is done by a a

1008
00:48:05,760 --> 00:48:10,380
quick transport parameter ah I think

1009
00:48:08,400 --> 00:48:12,810
that's the way I've written the right it

1010
00:48:10,380 --> 00:48:15,390
was written because I wanted to make

1011
00:48:12,810 --> 00:48:18,660
sure that around the time you enable it

1012
00:48:15,390 --> 00:48:21,420
you also enable server initiated by

1013
00:48:18,660 --> 00:48:23,339
directional streams because HTTP by

1014
00:48:21,420 --> 00:48:26,940
default requires you to set that flow

1015
00:48:23,339 --> 00:48:29,369
control to zero and disable it that is

1016
00:48:26,940 --> 00:48:31,560
might not have been a good decision it's

1017
00:48:29,369 --> 00:48:32,970
a details that we need to sort out

1018
00:48:31,560 --> 00:48:36,270
that's one of the it's also we doing it

1019
00:48:32,970 --> 00:48:38,160
to sort out but yeah it can be made

1020
00:48:36,270 --> 00:48:41,009
identical to how it's an able to make

1021
00:48:38,160 --> 00:48:43,740
gtp to let's go I just I just wanted to

1022
00:48:41,010 --> 00:48:46,500
check my understanding because what what

1023
00:48:43,740 --> 00:48:49,649
that is is completely allowed like you

1024
00:48:46,500 --> 00:48:53,070
don't need to have only a setting as a

1025
00:48:49,650 --> 00:48:54,780
way to do modifications to the protocol

1026
00:48:53,070 --> 00:48:56,160
it's something that's bitten you so yeah

1027
00:48:54,780 --> 00:48:57,990
let's definitely discuss that in the

1028
00:48:56,160 --> 00:49:00,990
future yes definitely

1029
00:48:57,990 --> 00:49:02,490
well something I should I'm not sure I

1030
00:49:00,990 --> 00:49:04,140
might have opened an issue about they

1031
00:49:02,490 --> 00:49:09,740
don't get hep if not which would happen

1032
00:49:04,140 --> 00:49:13,170
let them discuss no tell me Polly Apple

1033
00:49:09,740 --> 00:49:15,299
so HD transport makes sense can we go

1034
00:49:13,170 --> 00:49:17,520
back to the quick one yeah

1035
00:49:15,300 --> 00:49:23,280
so yeah let's look the your eye one

1036
00:49:17,520 --> 00:49:26,490
that's the next one that's fun so could

1037
00:49:23,280 --> 00:49:28,490
you clarify a bit like what we're

1038
00:49:26,490 --> 00:49:34,080
thinking like for the interpretation of

1039
00:49:28,490 --> 00:49:36,810
like the path in this case it is the

1040
00:49:34,080 --> 00:49:38,670
path meaning what was the like what do

1041
00:49:36,810 --> 00:49:41,490
you imagine it's the passes whatever

1042
00:49:38,670 --> 00:49:44,940
semantics application signs to it it's

1043
00:49:41,490 --> 00:49:47,640
so the URL is like the Europe we could

1044
00:49:44,940 --> 00:49:49,500
define a schema without a path but we've

1045
00:49:47,640 --> 00:49:50,790
talked with people who try to use it and

1046
00:49:49,500 --> 00:49:52,350
they said it would be like really

1047
00:49:50,790 --> 00:49:54,240
convenient for them to have some

1048
00:49:52,350 --> 00:49:57,150
indication on handshake levels that they

1049
00:49:54,240 --> 00:49:59,910
can use right it just feels like like

1050
00:49:57,150 --> 00:50:01,980
the if re-ride namespaces we have its

1051
00:49:59,910 --> 00:50:06,230
quick transport it's pretty open-ended

1052
00:50:01,980 --> 00:50:08,400
and it feels I could be good to specify

1053
00:50:06,230 --> 00:50:10,320
what it means beyond just kind of like a

1054
00:50:08,400 --> 00:50:11,580
black hole of what I'm gonna get is if

1055
00:50:10,320 --> 00:50:13,230
I'm connecting to a generic server I

1056
00:50:11,580 --> 00:50:16,500
would like to have some kind of an

1057
00:50:13,230 --> 00:50:18,600
understanding of what this is being well

1058
00:50:16,500 --> 00:50:20,580
so the problem I was trying to solve

1059
00:50:18,600 --> 00:50:23,460
with path in particular is so when you

1060
00:50:20,580 --> 00:50:25,890
establish quick yes quick you could use

1061
00:50:23,460 --> 00:50:26,790
a LPN to multiplex multiple applications

1062
00:50:25,890 --> 00:50:30,089
on a single server

1063
00:50:26,790 --> 00:50:33,750
sure but since here we use LPN for our

1064
00:50:30,090 --> 00:50:35,970
security purposes we need we need it to

1065
00:50:33,750 --> 00:50:38,460
provide some replacement matter so the

1066
00:50:35,970 --> 00:50:40,319
net really like it could be kind of like

1067
00:50:38,460 --> 00:50:42,180
the interior application and that's the

1068
00:50:40,320 --> 00:50:44,220
thing that you're indicating but maybe

1069
00:50:42,180 --> 00:50:47,100
spilling that out that that is how this

1070
00:50:44,220 --> 00:50:48,149
is to be used would help because looking

1071
00:50:47,100 --> 00:50:50,819
at this if you're coming out from

1072
00:50:48,150 --> 00:50:53,550
another perspective like is this path at

1073
00:50:50,820 --> 00:50:54,960
all related to a normal HTTP URI path is

1074
00:50:53,550 --> 00:50:55,830
this the location of a resource that

1075
00:50:54,960 --> 00:50:57,210
you're trying to access it or the

1076
00:50:55,830 --> 00:50:59,330
protocol you're trying to use and those

1077
00:50:57,210 --> 00:51:03,090
are very different things

1078
00:50:59,330 --> 00:51:04,770
Tommy could I ask you to please send

1079
00:51:03,090 --> 00:51:06,390
that to the list or following Shawna get

1080
00:51:04,770 --> 00:51:16,579
up just to make sure you don't get up

1081
00:51:06,390 --> 00:51:21,118
awesome Thank You Rebecca pound with my

1082
00:51:16,579 --> 00:51:24,210
pasts using or being associated with

1083
00:51:21,119 --> 00:51:25,769
some of the creation of WebSockets I can

1084
00:51:24,210 --> 00:51:29,279
say that the lack of multiplexing there

1085
00:51:25,769 --> 00:51:31,140
really sucked and it resulted in a slow

1086
00:51:29,279 --> 00:51:32,700
deployment landscape and it also

1087
00:51:31,140 --> 00:51:34,618
resulted in a bunch of interesting

1088
00:51:32,700 --> 00:51:37,379
restrictions from the JavaScript and the

1089
00:51:34,619 --> 00:51:39,990
browser API surface because of security

1090
00:51:37,380 --> 00:51:41,819
and das restrictions or concerns

1091
00:51:39,990 --> 00:51:44,640
especially about you know killing

1092
00:51:41,819 --> 00:51:47,970
virgins so my question is have we

1093
00:51:44,640 --> 00:51:50,220
forgotten this pain and do we think we

1094
00:51:47,970 --> 00:51:53,490
have a solution to it here so that URI

1095
00:51:50,220 --> 00:51:55,529
for instance makes me very afraid if

1096
00:51:53,490 --> 00:51:58,078
we're gonna offer that a level of

1097
00:51:55,529 --> 00:52:01,019
flexibility from the JavaScript surface

1098
00:51:58,079 --> 00:52:05,670
because of denial of service and similar

1099
00:52:01,019 --> 00:52:08,729
concerns the similar API surface from h2

1100
00:52:05,670 --> 00:52:10,680
or h3 leaves me much less scared because

1101
00:52:08,730 --> 00:52:13,829
we're offering a very different threat

1102
00:52:10,680 --> 00:52:15,419
model via those things so another way to

1103
00:52:13,829 --> 00:52:17,910
say all this is like what threat models

1104
00:52:15,420 --> 00:52:24,750
are we considering with the exposure of

1105
00:52:17,910 --> 00:52:26,368
the circuits here Thanks yeah actually

1106
00:52:24,750 --> 00:52:31,859
that might be good to file as an issue

1107
00:52:26,369 --> 00:52:33,990
as well thank you yes like uh if you

1108
00:52:31,859 --> 00:52:36,269
have any specific threats in minds you

1109
00:52:33,990 --> 00:52:37,769
want to discuss please do indicates if I

1110
00:52:36,269 --> 00:52:40,109
will make sure sending emails for

1111
00:52:37,769 --> 00:52:44,250
mailing list because we do need to think

1112
00:52:40,109 --> 00:52:46,200
so it's those staff gentle just a quick

1113
00:52:44,250 --> 00:52:47,880
clarifying question I'm curious what the

1114
00:52:46,200 --> 00:52:51,118
status of talking to the web folks about

1115
00:52:47,880 --> 00:52:53,250
adding IP Isis oh ok so the status to

1116
00:52:51,119 --> 00:52:56,099
this well folks there is an API Trav's

1117
00:52:53,250 --> 00:52:59,430
as is currently being incubated in EE

1118
00:52:56,099 --> 00:53:02,069
ICG we at some point intend to advance

1119
00:52:59,430 --> 00:53:04,879
its first w3c tracks but currently we're

1120
00:53:02,069 --> 00:53:08,430
not ready it's related to our

1121
00:53:04,880 --> 00:53:11,220
implementation effort so far is we have

1122
00:53:08,430 --> 00:53:13,589
been working on quick transport and we

1123
00:53:11,220 --> 00:53:16,049
have the protocol code is already

1124
00:53:13,589 --> 00:53:18,150
implemented so there is a like simple

1125
00:53:16,049 --> 00:53:21,359
toy server which will

1126
00:53:18,150 --> 00:53:23,039
go streams back if you ask loans the API

1127
00:53:21,359 --> 00:53:25,700
surface there's a little bit more

1128
00:53:23,039 --> 00:53:29,059
integration but with hope to have it

1129
00:53:25,700 --> 00:53:31,649
demo prototype people can play with

1130
00:53:29,059 --> 00:53:33,720
eventually we're HTTP free transport

1131
00:53:31,650 --> 00:53:37,799
we're a little bit less ahead mostly

1132
00:53:33,720 --> 00:53:40,558
because I want to get there to try to

1133
00:53:37,799 --> 00:53:44,369
unify the semantics of H free transport

1134
00:53:40,559 --> 00:53:46,079
with other h2 based proposals and to

1135
00:53:44,369 --> 00:53:48,029
understand what actually should happen

1136
00:53:46,079 --> 00:53:55,980
there and at that point we would see how

1137
00:53:48,029 --> 00:53:59,250
we go around to implementing that Bishop

1138
00:53:55,980 --> 00:54:03,539
Akamai couple observations particularly

1139
00:53:59,250 --> 00:54:05,960
around the URL here since this is going

1140
00:54:03,539 --> 00:54:08,099
for parody with WebSockets and

1141
00:54:05,960 --> 00:54:10,289
WebSockets is target of a particular

1142
00:54:08,099 --> 00:54:14,190
resource and not at the origin as a

1143
00:54:10,289 --> 00:54:16,230
whole so if you want to have a similar

1144
00:54:14,190 --> 00:54:19,260
API you have to have a resource but this

1145
00:54:16,230 --> 00:54:23,010
actually inverts an order that you get

1146
00:54:19,260 --> 00:54:26,069
in regular HTTP because the HTTP and the

1147
00:54:23,010 --> 00:54:27,720
client says I want this resource and I

1148
00:54:26,069 --> 00:54:30,299
would like to do WebSockets with it and

1149
00:54:27,720 --> 00:54:35,308
the server gives it a thumbs up thumbs

1150
00:54:30,299 --> 00:54:37,230
down on that order of requests here you

1151
00:54:35,309 --> 00:54:39,599
go to the server and say I would like to

1152
00:54:37,230 --> 00:54:41,640
do WebSockets with you server gives a

1153
00:54:39,599 --> 00:54:43,970
thumbs-up or thumbs-down and then the

1154
00:54:41,640 --> 00:54:48,390
client tells that what resource it wants

1155
00:54:43,970 --> 00:54:50,788
which you've now if nothing else you're

1156
00:54:48,390 --> 00:54:52,618
disclosing at the connect time that

1157
00:54:50,789 --> 00:54:55,500
there is something on the server who

1158
00:54:52,619 --> 00:54:59,309
accept a WebSocket connection which

1159
00:54:55,500 --> 00:55:01,200
might be a probing concern but I don't

1160
00:54:59,309 --> 00:55:04,020
know I don't know how that impacts the

1161
00:55:01,200 --> 00:55:08,430
security surface but it seems like you

1162
00:55:04,020 --> 00:55:10,710
really you're losing the ability for the

1163
00:55:08,430 --> 00:55:12,660
server to look at the whole request at

1164
00:55:10,710 --> 00:55:14,250
once before it makes a decision and

1165
00:55:12,660 --> 00:55:17,308
you're separating it into two separate

1166
00:55:14,250 --> 00:55:22,380
decisions I mean what do you mean before

1167
00:55:17,309 --> 00:55:24,720
making a decision so well with HCP the

1168
00:55:22,380 --> 00:55:27,000
server the server can see both so

1169
00:55:24,720 --> 00:55:31,470
decision to disclose this with supports

1170
00:55:27,000 --> 00:55:32,220
with yes Bert yes yeah and this is large

1171
00:55:31,470 --> 00:55:34,770
really

1172
00:55:32,220 --> 00:55:36,450
yes so when I said it's like WebSockets

1173
00:55:34,770 --> 00:55:38,759
there were lots of things which we try

1174
00:55:36,450 --> 00:55:42,058
to not copy from WebSockets mostly

1175
00:55:38,760 --> 00:55:44,790
because we tried to go for minimalism

1176
00:55:42,059 --> 00:55:46,770
like for instance WebSockets despite not

1177
00:55:44,790 --> 00:55:49,170
being said in RFC will automatically

1178
00:55:46,770 --> 00:55:59,160
send you cookies and we don't do that

1179
00:55:49,170 --> 00:56:04,559
just because Mike same question please

1180
00:55:59,160 --> 00:56:08,240
on issue Tommy again so kind of bouncing

1181
00:56:04,559 --> 00:56:12,089
off what Mike was saying here that

1182
00:56:08,240 --> 00:56:14,729
inversion of semantics has implications

1183
00:56:12,089 --> 00:56:17,670
on the fallback if your fallback is to

1184
00:56:14,730 --> 00:56:19,770
WebSockets because now you essentially

1185
00:56:17,670 --> 00:56:21,059
have different guarantees and you're

1186
00:56:19,770 --> 00:56:22,799
accessing different things because

1187
00:56:21,059 --> 00:56:25,500
WebSocket does allow you to specify

1188
00:56:22,799 --> 00:56:28,079
something off of a particular HTTP path

1189
00:56:25,500 --> 00:56:29,520
and this doesn't let you do that and so

1190
00:56:28,079 --> 00:56:30,780
they're really not equivalent for

1191
00:56:29,520 --> 00:56:37,890
fallback so we should figure out a way

1192
00:56:30,780 --> 00:56:39,599
to reconcile that ah understood I'm sure

1193
00:56:37,890 --> 00:56:42,868
it's in the draft which I have not read

1194
00:56:39,599 --> 00:56:44,400
I'm sorry but when the server accepts

1195
00:56:42,869 --> 00:56:46,530
the origin can you go and do a little

1196
00:56:44,400 --> 00:56:49,650
more detail on how it does that ah it

1197
00:56:46,530 --> 00:56:52,049
accepts the origin by accepting the

1198
00:56:49,650 --> 00:56:54,450
stream it reads the data from stream

1199
00:56:52,049 --> 00:56:56,339
until it reads the data and finishes

1200
00:56:54,450 --> 00:56:59,549
reading the data it will not process any

1201
00:56:56,339 --> 00:57:02,308
data and as soon as processes the data

1202
00:56:59,549 --> 00:57:06,650
it has option to send either connection

1203
00:57:02,309 --> 00:57:10,680
flows or to hand it off to application

1204
00:57:06,650 --> 00:57:16,890
okay so acceptance is really not killing

1205
00:57:10,680 --> 00:57:19,500
it oh okay so I'm the reason we did not

1206
00:57:16,890 --> 00:57:22,740
add an explicit okay is because

1207
00:57:19,500 --> 00:57:24,599
otherwise you would get a round-trip

1208
00:57:22,740 --> 00:57:28,140
penalty because you would have to wait

1209
00:57:24,599 --> 00:57:29,880
for acknowledgement from server ah so

1210
00:57:28,140 --> 00:57:34,618
that would add an extra round trip to

1211
00:57:29,880 --> 00:57:36,540
the entire handshake um we're now going

1212
00:57:34,619 --> 00:57:39,270
to move into the general Q&A no you can

1213
00:57:36,540 --> 00:57:40,609
come back in which you can ask any

1214
00:57:39,270 --> 00:57:42,690
question you want

1215
00:57:40,609 --> 00:57:44,910
clarifying questions other questions

1216
00:57:42,690 --> 00:57:48,850
it's kind of open mic

1217
00:57:44,910 --> 00:57:50,319
roughly 15 minutes in sweat Google on

1218
00:57:48,850 --> 00:57:51,910
this particularly sure I think this is

1219
00:57:50,320 --> 00:57:53,170
an interesting topic I had one detailed

1220
00:57:51,910 --> 00:57:55,540
question is there reason and quick not

1221
00:57:53,170 --> 00:57:57,250
to put this in as transport params and

1222
00:57:55,540 --> 00:57:59,560
then you don't have to use stream to and

1223
00:57:57,250 --> 00:58:02,380
then by the time the handshake completes

1224
00:57:59,560 --> 00:58:03,940
you know that it works just seems like

1225
00:58:02,380 --> 00:58:05,710
it's a transactional I mean that's a

1226
00:58:03,940 --> 00:58:07,960
very quick sort of thing to do anyway

1227
00:58:05,710 --> 00:58:10,000
he always a reason but oh that was

1228
00:58:07,960 --> 00:58:11,350
actually the original design but it

1229
00:58:10,000 --> 00:58:13,330
turns out the main the problem with

1230
00:58:11,350 --> 00:58:17,259
Jasper and since the clan transplants

1231
00:58:13,330 --> 00:58:21,160
are not encrypted and we want privacy

1232
00:58:17,260 --> 00:58:22,240
for both of those so this gets back I

1233
00:58:21,160 --> 00:58:24,069
think the question I was asking earlier

1234
00:58:22,240 --> 00:58:25,569
which is I don't quite understand what

1235
00:58:24,070 --> 00:58:27,340
the rationale is for Transport suppose

1236
00:58:25,570 --> 00:58:30,160
atv-3 should be three transport

1237
00:58:27,340 --> 00:58:32,530
I understand it's like less clunky but

1238
00:58:30,160 --> 00:58:35,920
um having one thing is less clunky than

1239
00:58:32,530 --> 00:58:38,410
having two things so can someone likes

1240
00:58:35,920 --> 00:58:39,880
me at bay is there a tactical weight way

1241
00:58:38,410 --> 00:58:41,020
which is dramatically better or is it me

1242
00:58:39,880 --> 00:58:45,100
really like I don't want to absorb all

1243
00:58:41,020 --> 00:58:48,250
the HTTP machinery so the feedback we

1244
00:58:45,100 --> 00:58:50,710
heard by some developers to the W went

1245
00:58:48,250 --> 00:58:53,230
to the w3c API was that they wanted

1246
00:58:50,710 --> 00:58:55,210
something very very lightweight on that

1247
00:58:53,230 --> 00:58:56,560
like especially for game developers on

1248
00:58:55,210 --> 00:58:59,950
that game server so they could have

1249
00:58:56,560 --> 00:59:01,779
their web server for the game where you

1250
00:58:59,950 --> 00:59:04,689
do HTTP and then when you connect to

1251
00:59:01,780 --> 00:59:07,120
that you can go up to the Mike or get in

1252
00:59:04,690 --> 00:59:09,370
line to answer to comment on that victor

1253
00:59:07,120 --> 00:59:11,790
okay well we can debate that better but

1254
00:59:09,370 --> 00:59:15,190
I stratum is extraordinary unpersuasive

1255
00:59:11,790 --> 00:59:17,050
other reason is notably when you pull

1256
00:59:15,190 --> 00:59:18,960
saying so you now end up in the

1257
00:59:17,050 --> 00:59:22,780
situation where all of your connections

1258
00:59:18,960 --> 00:59:24,790
you're an HTTP free connection and each

1259
00:59:22,780 --> 00:59:27,580
deeper connection is shared between

1260
00:59:24,790 --> 00:59:29,770
multiple entities which are across

1261
00:59:27,580 --> 00:59:32,529
security boundary for each other so for

1262
00:59:29,770 --> 00:59:34,450
example I can't add method like give me

1263
00:59:32,530 --> 00:59:36,550
the stats for this connection because

1264
00:59:34,450 --> 00:59:38,560
that will reveal information I can't

1265
00:59:36,550 --> 00:59:40,240
even do things like give me the idea of

1266
00:59:38,560 --> 00:59:42,930
the stream because that was reveal

1267
00:59:40,240 --> 00:59:45,189
information about other traffic which is

1268
00:59:42,930 --> 00:59:47,680
privilege boundary separated by this

1269
00:59:45,190 --> 00:59:50,860
that's one of the problems we ran into

1270
00:59:47,680 --> 00:59:51,819
as well or synchronous Rho that sounds

1271
00:59:50,860 --> 00:59:55,260
like entirely problem your

1272
00:59:51,820 --> 00:59:55,260
implementation not a problem

1273
00:59:55,530 --> 01:00:01,900
the like this

1274
00:59:58,090 --> 01:00:03,040
we'll put wire protocols so like if you

1275
01:00:01,900 --> 01:00:04,240
want if you want to separate if you want

1276
01:00:03,040 --> 01:00:06,100
to separate different different trust

1277
01:00:04,240 --> 01:00:09,910
domains across their different important

1278
01:00:06,100 --> 01:00:11,950
different are questions you can like we

1279
01:00:09,910 --> 01:00:13,569
can take that this doesn't popular yet

1280
01:00:11,950 --> 01:00:20,620
where do this group but like like the

1281
01:00:13,570 --> 01:00:23,020
Tweedy non Thompson one of the problems

1282
01:00:20,620 --> 01:00:25,779
that we've identified here this week

1283
01:00:23,020 --> 01:00:28,720
into talking about this is how these

1284
01:00:25,780 --> 01:00:31,450
things are identified and so one of the

1285
01:00:28,720 --> 01:00:32,890
one of the kind of core problems with

1286
01:00:31,450 --> 01:00:34,810
WebSockets was the way that it

1287
01:00:32,890 --> 01:00:36,759
ultimately ended up integrating with

1288
01:00:34,810 --> 01:00:38,590
Fitch because that defines how it

1289
01:00:36,760 --> 01:00:40,770
integrates with things like CSP and all

1290
01:00:38,590 --> 01:00:45,310
the other sort of web tech stuffs and

1291
01:00:40,770 --> 01:00:49,240
while WebSockets ostensibly has its own

1292
01:00:45,310 --> 01:00:51,340
your ice cream in practice we decided to

1293
01:00:49,240 --> 01:00:54,129
effectively arrays that when it came to

1294
01:00:51,340 --> 01:00:55,720
talking about things like connect source

1295
01:00:54,130 --> 01:00:58,960
and all those sorts of other mechanisms

1296
01:00:55,720 --> 01:01:00,669
so understanding how this fits into that

1297
01:00:58,960 --> 01:01:02,830
ecosystem is going to be a critical part

1298
01:01:00,670 --> 01:01:05,470
of this work I don't think it's gonna

1299
01:01:02,830 --> 01:01:07,029
happen here as much but we're gonna have

1300
01:01:05,470 --> 01:01:08,410
to be aware of it and you're gonna have

1301
01:01:07,030 --> 01:01:11,950
to coordinate color closely on these

1302
01:01:08,410 --> 01:01:13,799
things so I just wanted to point that

1303
01:01:11,950 --> 01:01:17,290
out I don't think that stops us from

1304
01:01:13,800 --> 01:01:18,880
starting work like this but I did get

1305
01:01:17,290 --> 01:01:20,740
from a sense from the previous

1306
01:01:18,880 --> 01:01:23,530
conversation that that's gonna interact

1307
01:01:20,740 --> 01:01:25,180
with quick transport in particular ok

1308
01:01:23,530 --> 01:01:27,610
can you file an issue for that martin i

1309
01:01:25,180 --> 01:01:30,940
I will do something I've been typing it

1310
01:01:27,610 --> 01:01:32,860
up as soon as we speak the other thing

1311
01:01:30,940 --> 01:01:35,770
that concerns me here is that this or

1312
01:01:32,860 --> 01:01:38,370
can I answer that before just one quick

1313
01:01:35,770 --> 01:01:40,420
point is that like you say I think that

1314
01:01:38,370 --> 01:01:43,839
they're getting to really to the bottom

1315
01:01:40,420 --> 01:01:46,150
of this will be a w3c question what we

1316
01:01:43,840 --> 01:01:48,730
really need to get right is the

1317
01:01:46,150 --> 01:01:51,790
interface between what we're building at

1318
01:01:48,730 --> 01:01:54,280
the ITF and the w3c the current

1319
01:01:51,790 --> 01:01:56,500
interface is a URI maybe that's good

1320
01:01:54,280 --> 01:01:57,670
enough maybe not and so that if it's not

1321
01:01:56,500 --> 01:01:59,350
that's clearly what we need to get to

1322
01:01:57,670 --> 01:02:01,270
the bottom of but if we say that are you

1323
01:01:59,350 --> 01:02:03,339
are if we have an intuition that the URL

1324
01:02:01,270 --> 01:02:05,680
is good enough but we need to get right

1325
01:02:03,340 --> 01:02:07,000
what the URI means then that's a really

1326
01:02:05,680 --> 01:02:08,770
conversation but we need to have it at

1327
01:02:07,000 --> 01:02:11,020
there with VC just to make sure we

1328
01:02:08,770 --> 01:02:12,940
define the scope of this bar

1329
01:02:11,020 --> 01:02:14,920
as opposed to what would happen in the

1330
01:02:12,940 --> 01:02:16,390
in the webbing addition to up at the

1331
01:02:14,920 --> 01:02:18,640
roof you see I was gonna expand further

1332
01:02:16,390 --> 01:02:20,770
on that because I think Roberto's point

1333
01:02:18,640 --> 01:02:22,299
earlier about multiplexing and quick

1334
01:02:20,770 --> 01:02:23,860
transport is one that we're going to

1335
01:02:22,300 --> 01:02:24,990
have to deal with and that has

1336
01:02:23,860 --> 01:02:28,150
implications here

1337
01:02:24,990 --> 01:02:29,529
Victor's points are valid we've got to

1338
01:02:28,150 --> 01:02:32,020
work through that particular chord Meyer

1339
01:02:29,530 --> 01:02:33,250
and there are security related decisions

1340
01:02:32,020 --> 01:02:35,230
that we need to be making and some of

1341
01:02:33,250 --> 01:02:38,350
those security related decisions will

1342
01:02:35,230 --> 01:02:40,930
need to be made here when we when we

1343
01:02:38,350 --> 01:02:43,060
make them and then like this is just

1344
01:02:40,930 --> 01:02:44,080
complicated unfortunately and there's no

1345
01:02:43,060 --> 01:02:45,700
other way around it we're gonna have to

1346
01:02:44,080 --> 01:02:47,319
deal with the fact that the w3c is there

1347
01:02:45,700 --> 01:02:49,118
we're gonna have to also coordinate with

1348
01:02:47,320 --> 01:02:51,340
what working group in order to get the

1349
01:02:49,119 --> 01:02:53,920
fiction pitch integration going so this

1350
01:02:51,340 --> 01:02:55,810
is I'm just trying to give people an

1351
01:02:53,920 --> 01:02:59,050
impression for the scope of the work

1352
01:02:55,810 --> 01:03:02,340
here so that we understand where all the

1353
01:02:59,050 --> 01:03:02,340
different pieces have to fit together

1354
01:03:04,440 --> 01:03:09,520
repair toupee on illness lead off with a

1355
01:03:07,000 --> 01:03:11,230
comment that I don't want anybody to

1356
01:03:09,520 --> 01:03:14,830
take any of these questions as a lack of

1357
01:03:11,230 --> 01:03:16,450
enthusiasm the whole reason I'm asking

1358
01:03:14,830 --> 01:03:21,600
these questions is because I really want

1359
01:03:16,450 --> 01:03:23,830
to see this succeed so here goes

1360
01:03:21,600 --> 01:03:25,720
WebSockets was really really painful I

1361
01:03:23,830 --> 01:03:27,040
said this before WebSockets was really

1362
01:03:25,720 --> 01:03:29,230
really painful and a lot of that pain

1363
01:03:27,040 --> 01:03:30,970
came because the group of people who

1364
01:03:29,230 --> 01:03:32,740
came together to ask for the

1365
01:03:30,970 --> 01:03:34,390
requirements didn't understand the

1366
01:03:32,740 --> 01:03:36,700
requirements they thought they were

1367
01:03:34,390 --> 01:03:38,080
asking for something simple right but

1368
01:03:36,700 --> 01:03:41,350
simple to write and simple to operate

1369
01:03:38,080 --> 01:03:43,660
are completely different things right

1370
01:03:41,350 --> 01:03:45,850
and if anybody is thinking that they

1371
01:03:43,660 --> 01:03:47,410
want something simple to write you need

1372
01:03:45,850 --> 01:03:49,839
to disabuse them of that notion as

1373
01:03:47,410 --> 01:03:53,080
nicely as possible because they really

1374
01:03:49,840 --> 01:03:57,820
want is simple to operate now WebSockets

1375
01:03:53,080 --> 01:03:59,350
was not that there are practical

1376
01:03:57,820 --> 01:04:02,140
considerations that we must all deal

1377
01:03:59,350 --> 01:04:05,080
with like server restarts redirecting to

1378
01:04:02,140 --> 01:04:09,279
other places etc etc that really

1379
01:04:05,080 --> 01:04:10,990
suggests that we we should consider the

1380
01:04:09,280 --> 01:04:14,950
protocols that deal with multiplexing

1381
01:04:10,990 --> 01:04:16,779
today are the ones that have dealt with

1382
01:04:14,950 --> 01:04:19,000
most of those practical considerations

1383
01:04:16,780 --> 01:04:22,480
and I strongly suggest that we ignore

1384
01:04:19,000 --> 01:04:24,430
anything but those protocols

1385
01:04:22,480 --> 01:04:26,620
whether it's HTTP or something else

1386
01:04:24,430 --> 01:04:28,240
really care but those practical

1387
01:04:26,620 --> 01:04:37,060
considerations should dominate thanks

1388
01:04:28,240 --> 01:04:38,439
guys I travel Google same questions that

1389
01:04:37,060 --> 01:04:42,250
I'm going to ask here are indicative

1390
01:04:38,440 --> 01:04:45,040
enthusiasm I think one of the things

1391
01:04:42,250 --> 01:04:47,320
that like so I mean yeah to reiterate

1392
01:04:45,040 --> 01:04:49,410
getting the interface right here is

1393
01:04:47,320 --> 01:04:54,520
crucial at the beginning of this effort

1394
01:04:49,410 --> 01:04:55,779
I am not really sure I am primarily look

1395
01:04:54,520 --> 01:04:57,009
at this from the ietf side of things I'm

1396
01:04:55,780 --> 01:04:59,560
not sure if the state of these

1397
01:04:57,010 --> 01:05:02,190
interfaces in what WG I'm not sure the

1398
01:04:59,560 --> 01:05:04,540
state of these interfaces in in w3c I

1399
01:05:02,190 --> 01:05:06,070
don't know how fluid they are or if this

1400
01:05:04,540 --> 01:05:07,750
is basically the w3c coming to us saying

1401
01:05:06,070 --> 01:05:09,910
hey we have this interface please give

1402
01:05:07,750 --> 01:05:14,620
us an implementation of this one of the

1403
01:05:09,910 --> 01:05:16,870
things - what it has no w3c status at

1404
01:05:14,620 --> 01:05:21,279
all okay that makes this both easier and

1405
01:05:16,870 --> 01:05:22,990
harder it makes it easier because we

1406
01:05:21,280 --> 01:05:26,830
don't we're not in a situation where we

1407
01:05:22,990 --> 01:05:29,049
have to provide a service that has been

1408
01:05:26,830 --> 01:05:31,150
already specified in a way that's wrong

1409
01:05:29,050 --> 01:05:32,740
for implementation it makes it a lot

1410
01:05:31,150 --> 01:05:34,690
harder in that we're gonna have to have

1411
01:05:32,740 --> 01:05:37,120
some sort of process in this working

1412
01:05:34,690 --> 01:05:39,430
group that is a tighter loop than the

1413
01:05:37,120 --> 01:05:40,990
process then any process that I am aware

1414
01:05:39,430 --> 01:05:42,490
of that's ever run between the dye ETF

1415
01:05:40,990 --> 01:05:45,040
in the w3c and it's crucial we get that

1416
01:05:42,490 --> 01:05:47,109
right and I'm not sure how to make sure

1417
01:05:45,040 --> 01:05:52,060
that happens other than just make David

1418
01:05:47,110 --> 01:05:53,380
go to both so to talk to that you know

1419
01:05:52,060 --> 01:05:54,790
one of the things that's important to

1420
01:05:53,380 --> 01:05:58,990
understand it's protocols lasts a lot

1421
01:05:54,790 --> 01:06:00,340
longer than api's yep and you know there

1422
01:05:58,990 --> 01:06:02,229
are there are problems in both the

1423
01:06:00,340 --> 01:06:05,200
WebSocket protocol and in the websocket

1424
01:06:02,230 --> 01:06:07,150
api but I think we're envisaging that

1425
01:06:05,200 --> 01:06:10,600
the feedback loop would go primarily

1426
01:06:07,150 --> 01:06:12,520
from IETF to w3c and a lot of the

1427
01:06:10,600 --> 01:06:16,600
questions you're asking would be

1428
01:06:12,520 --> 01:06:18,880
answered here rather than you know

1429
01:06:16,600 --> 01:06:20,500
creating this endless loop or or a need

1430
01:06:18,880 --> 01:06:25,830
for lots of liaisons and stuff like that

1431
01:06:20,500 --> 01:06:27,790
and all that - that that the I've

1432
01:06:25,830 --> 01:06:30,370
recognising several people in the room

1433
01:06:27,790 --> 01:06:35,020
here who were also at tea packs the w3c

1434
01:06:30,370 --> 01:06:37,089
in-person meeting last month so I'm very

1435
01:06:35,020 --> 01:06:38,770
optimistic that there's gonna be enough

1436
01:06:37,090 --> 01:06:41,740
cross-pollination that we can have this

1437
01:06:38,770 --> 01:06:44,800
type feedback loop and I see our liaison

1438
01:06:41,740 --> 01:06:51,459
to the w3c getting up so that's if you

1439
01:06:44,800 --> 01:06:54,130
don't mind letting mark jump in so yeah

1440
01:06:51,460 --> 01:06:58,600
mark Nottingham speaking as liaison from

1441
01:06:54,130 --> 01:07:00,220
the ITF the w3c this is being discussed

1442
01:06:58,600 --> 01:07:01,630
in the w3c it's being proposed there it

1443
01:07:00,220 --> 01:07:03,189
does not have any official status but I

1444
01:07:01,630 --> 01:07:04,660
would without putting words in their

1445
01:07:03,190 --> 01:07:08,260
mouths to say that from what I've seen

1446
01:07:04,660 --> 01:07:10,089
the w3c is pretty keen about this so I

1447
01:07:08,260 --> 01:07:12,280
would not take that lack of statuses as

1448
01:07:10,090 --> 01:07:13,900
indicative of lack of interest I think

1449
01:07:12,280 --> 01:07:14,860
they they probably want to make it

1450
01:07:13,900 --> 01:07:18,040
happen and they're waiting for us to

1451
01:07:14,860 --> 01:07:20,710
some degree so if we want this to happen

1452
01:07:18,040 --> 01:07:24,370
we shouldn't get it on that we can make

1453
01:07:20,710 --> 01:07:26,110
the liaison work yeah thanks and - in a

1454
01:07:24,370 --> 01:07:29,200
way I think we've already started the

1455
01:07:26,110 --> 01:07:31,060
feedback loop because we've been at the

1456
01:07:29,200 --> 01:07:32,980
w3c it's been presented there and then

1457
01:07:31,060 --> 01:07:34,060
they're saying okay their same not

1458
01:07:32,980 --> 01:07:35,440
putting were soon enough but from the

1459
01:07:34,060 --> 01:07:37,930
conversations I had there people are

1460
01:07:35,440 --> 01:07:39,670
saying hello let's do this and then okay

1461
01:07:37,930 --> 01:07:44,470
we turned around okay let's have a Boff

1462
01:07:39,670 --> 01:07:46,780
I would suggest um in any future working

1463
01:07:44,470 --> 01:07:49,120
group forming working group formation

1464
01:07:46,780 --> 01:07:50,650
around this work that that liaison

1465
01:07:49,120 --> 01:07:51,700
relationship you made an explicit part

1466
01:07:50,650 --> 01:07:53,080
of the process of the working group

1467
01:07:51,700 --> 01:07:54,609
whether that be as simple as hey you

1468
01:07:53,080 --> 01:07:56,259
know at each meeting we're gonna have a

1469
01:07:54,610 --> 01:07:59,620
readout of the liaison just to make sure

1470
01:07:56,260 --> 01:08:03,130
that the health of that is yes and that

1471
01:07:59,620 --> 01:08:04,779
is in our draft Charter which we will

1472
01:08:03,130 --> 01:08:08,700
touch on a little bit okay end of this

1473
01:08:04,780 --> 01:08:10,120
session um I have one other comment I

1474
01:08:08,700 --> 01:08:11,680
look around

1475
01:08:10,120 --> 01:08:13,630
Bernard's observation because I think

1476
01:08:11,680 --> 01:08:15,669
both of these are true protocols lost a

1477
01:08:13,630 --> 01:08:17,440
lot longer than api's and api's lasts a

1478
01:08:15,670 --> 01:08:19,510
lot longer than protocols right like so

1479
01:08:17,439 --> 01:08:21,460
it kind of depends on the the

1480
01:08:19,510 --> 01:08:23,410
environment that you're in one of the

1481
01:08:21,460 --> 01:08:25,330
things that I am seeing is bubbling up

1482
01:08:23,410 --> 01:08:28,180
into the API of this is something that

1483
01:08:25,330 --> 01:08:30,189
looks like a stack specification right

1484
01:08:28,180 --> 01:08:32,520
like so it's the same thing as a LPN is

1485
01:08:30,189 --> 01:08:35,529
being used slash abuse for and quick

1486
01:08:32,520 --> 01:08:37,540
it's like now we're talking about

1487
01:08:35,529 --> 01:08:40,420
further up the stack so it's like you

1488
01:08:37,540 --> 01:08:43,660
have like you know h3 you know web

1489
01:08:40,420 --> 01:08:47,140
transport h3 quick web transport h2 tcp

1490
01:08:43,660 --> 01:08:47,620
web transport quick this is a recurring

1491
01:08:47,140 --> 01:08:49,510
pad

1492
01:08:47,620 --> 01:08:51,689
and it seems like we as the ietf

1493
01:08:49,510 --> 01:08:55,060
probably need to get that right once

1494
01:08:51,689 --> 01:08:56,229
because doing it a whole bunch of

1495
01:08:55,060 --> 01:08:58,090
different ways and a whole bunch of

1496
01:08:56,229 --> 01:09:00,939
different places and then baking bad

1497
01:08:58,090 --> 01:09:03,250
into the interface into the API seems

1498
01:09:00,939 --> 01:09:05,019
like a way to make mistakes that will

1499
01:09:03,250 --> 01:09:07,120
hurt us for a long time I don't know

1500
01:09:05,020 --> 01:09:09,670
what the answer is ovens they get a time

1501
01:09:07,120 --> 01:09:11,080
machine and go to taps yesterday you

1502
01:09:09,670 --> 01:09:12,730
probably don't want something as heavy

1503
01:09:11,080 --> 01:09:14,319
wait is that entire architecture but

1504
01:09:12,729 --> 01:09:15,729
there's a lot of thinking in the taps

1505
01:09:14,319 --> 01:09:20,979
architecture document that might be

1506
01:09:15,729 --> 01:09:24,459
informative to that discussion Lukas

1507
01:09:20,979 --> 01:09:26,559
party with a observation based on some

1508
01:09:24,460 --> 01:09:28,600
of the earlier discussion around the TCP

1509
01:09:26,560 --> 01:09:31,120
fallback stuff that we agreed probably

1510
01:09:28,600 --> 01:09:35,620
needs some work but looking at that some

1511
01:09:31,120 --> 01:09:39,309
of the other talks around quite broad

1512
01:09:35,620 --> 01:09:41,620
extension of h2 or h3 and how that

1513
01:09:39,310 --> 01:09:46,330
interacts with something like HP alt

1514
01:09:41,620 --> 01:09:48,430
service in terms of detecting well claim

1515
01:09:46,330 --> 01:09:51,430
of being fully authoritative for that

1516
01:09:48,430 --> 01:09:54,010
service and the alternative failing to

1517
01:09:51,430 --> 01:09:56,460
provide the extension capabilities and

1518
01:09:54,010 --> 01:09:58,780
how we might signal that and

1519
01:09:56,460 --> 01:10:01,360
characterize the fallback behavior and

1520
01:09:58,780 --> 01:10:04,179
how those things work I don't know if

1521
01:10:01,360 --> 01:10:06,790
anyone has an answer or how we get that

1522
01:10:04,180 --> 01:10:10,630
but it's something I think we might want

1523
01:10:06,790 --> 01:10:16,060
to think about you know my answer to

1524
01:10:10,630 --> 01:10:17,440
those file an issue piece but yeah

1525
01:10:16,060 --> 01:10:18,400
thanks for saying that this is a really

1526
01:10:17,440 --> 01:10:22,150
interesting point that we do need to

1527
01:10:18,400 --> 01:10:24,639
keep track of Erik Kinnear from Apple I

1528
01:10:22,150 --> 01:10:26,320
do want to reiterate that we are excited

1529
01:10:24,640 --> 01:10:27,610
to work on some of this stuff and I

1530
01:10:26,320 --> 01:10:30,370
think we've already started some of the

1531
01:10:27,610 --> 01:10:33,460
conversations but we've seen from the

1532
01:10:30,370 --> 01:10:35,110
conversations here that there's a lot of

1533
01:10:33,460 --> 01:10:38,230
overlap in terms of what people's needs

1534
01:10:35,110 --> 01:10:40,000
are and we've already started conversing

1535
01:10:38,230 --> 01:10:41,980
with some of the other presenters about

1536
01:10:40,000 --> 01:10:45,540
how we could kind of combine those down

1537
01:10:41,980 --> 01:10:45,540
into something that works for everybody

1538
01:10:48,430 --> 01:10:50,300
Cullen

1539
01:10:49,130 --> 01:10:52,280
I've been involved with another effort

1540
01:10:50,300 --> 01:10:53,620
that had a high overlap with w3c s

1541
01:10:52,280 --> 01:10:56,239
several other people in this room a

1542
01:10:53,620 --> 01:10:58,699
serious mistake that I think we made on

1543
01:10:56,239 --> 01:11:02,540
that in our liaisons and setting up with

1544
01:10:58,699 --> 01:11:05,059
w3c is we did not come to agreement of

1545
01:11:02,540 --> 01:11:07,370
whether the w3c could remove from our

1546
01:11:05,060 --> 01:11:09,350
specifications things which the IETF

1547
01:11:07,370 --> 01:11:11,420
felt worse critical security features

1548
01:11:09,350 --> 01:11:14,510
with absolutely no consideration or

1549
01:11:11,420 --> 01:11:16,489
discussion with the ITF and I would

1550
01:11:14,510 --> 01:11:18,710
really oppose us moving forward on joint

1551
01:11:16,489 --> 01:11:21,290
work with the w3c without having that

1552
01:11:18,710 --> 01:11:26,030
very clear between us at the w3c before

1553
01:11:21,290 --> 01:11:28,070
it where I started just a question : are

1554
01:11:26,030 --> 01:11:31,489
there any particular security things

1555
01:11:28,070 --> 01:11:38,389
that you're majorly concerned about in

1556
01:11:31,489 --> 01:11:39,739
this um no I no not at all I just want

1557
01:11:38,389 --> 01:11:41,600
to be clear on how we do that and I

1558
01:11:39,739 --> 01:11:43,190
suspect that we it will be clear to

1559
01:11:41,600 --> 01:11:44,659
everyone what are the security things we

1560
01:11:43,190 --> 01:11:46,610
would care about but I don't see big

1561
01:11:44,659 --> 01:11:52,929
debate on that I just need to be clear

1562
01:11:46,610 --> 01:11:57,739
on yeah I mean I think on the topic of

1563
01:11:52,929 --> 01:11:59,989
33c ITF trying work I'm not sure either

1564
01:11:57,739 --> 01:12:02,178
of those two either the two most recent

1565
01:11:59,989 --> 01:12:04,699
protocol / API code development efforts

1566
01:12:02,179 --> 01:12:06,739
like sort of worked out super well like

1567
01:12:04,699 --> 01:12:09,559
what exactly the kind of a cluster and I

1568
01:12:06,739 --> 01:12:11,299
think we're kisi I guess you know TVD

1569
01:12:09,560 --> 01:12:16,280
but it's like 27 years old so like

1570
01:12:11,300 --> 01:12:22,360
probably not like the based winner but

1571
01:12:16,280 --> 01:12:25,880
push yeah fair enough so yeah I think

1572
01:12:22,360 --> 01:12:27,080
maybe some some thought is required some

1573
01:12:25,880 --> 01:12:30,050
way I have not yet figured out to

1574
01:12:27,080 --> 01:12:31,670
improve that situation because like I

1575
01:12:30,050 --> 01:12:34,070
think like you know you end up with pace

1576
01:12:31,670 --> 01:12:36,170
the seems like 70 percent of personal

1577
01:12:34,070 --> 01:12:37,670
overlap in the same rooms but then at

1578
01:12:36,170 --> 01:12:40,400
least at least um

1579
01:12:37,670 --> 01:12:42,260
I think with I mean you know obviously

1580
01:12:40,400 --> 01:12:44,360
I'm more of an ITF person than advocacy

1581
01:12:42,260 --> 01:12:46,429
person but I felt like you know that as

1582
01:12:44,360 --> 01:12:47,690
things got more finished enthusiasm on

1583
01:12:46,429 --> 01:12:48,860
the ITF side for going to everything you

1584
01:12:47,690 --> 01:12:51,230
see an intern gauging kind of started to

1585
01:12:48,860 --> 01:12:52,280
wane and all those efforts and and then

1586
01:12:51,230 --> 01:12:53,480
he's try to go a lot more disjunction

1587
01:12:52,280 --> 01:12:55,159
between the two between the tissue

1588
01:12:53,480 --> 01:12:58,509
groups so I think we should address

1589
01:12:55,159 --> 01:12:58,509
about it didn't have that property

1590
01:13:01,790 --> 01:13:10,100
any any other general QA okay so the

1591
01:13:08,420 --> 01:13:11,810
next item is just a pointer to the

1592
01:13:10,100 --> 01:13:14,030
Charter discussion this isn't a working

1593
01:13:11,810 --> 01:13:19,490
group forming buff so we're not going to

1594
01:13:14,030 --> 01:13:21,050
get into it in a lot of detail but there

1595
01:13:19,490 --> 01:13:22,760
has been an ongoing discussion on the

1596
01:13:21,050 --> 01:13:25,820
Charter on the mailing list and there is

1597
01:13:22,760 --> 01:13:29,600
a draft charter available on github it's

1598
01:13:25,820 --> 01:13:32,059
in David's repo so if you have opinions

1599
01:13:29,600 --> 01:13:34,520
on a potential charter you can of course

1600
01:13:32,060 --> 01:13:37,010
post to the web transported ITF mailing

1601
01:13:34,520 --> 01:13:39,950
list or you can go to the repo and file

1602
01:13:37,010 --> 01:13:41,540
issues and potential PRS so I'm just

1603
01:13:39,950 --> 01:13:42,800
going to show you where we are kind of

1604
01:13:41,540 --> 01:13:44,060
on the Charter but since this is in the

1605
01:13:42,800 --> 01:13:47,240
working group forming bow if we can't

1606
01:13:44,060 --> 01:13:48,830
get into it too much but just trying to

1607
01:13:47,240 --> 01:13:50,870
whet your appetite so you can express

1608
01:13:48,830 --> 01:13:55,420
your opinions I'm on the mailing list or

1609
01:13:50,870 --> 01:13:58,280
in there the repo so the basic idea is

1610
01:13:55,420 --> 01:14:00,980
to focus on client-server protocols or

1611
01:13:58,280 --> 01:14:03,080
protocol extensions that relate to the

1612
01:14:00,980 --> 01:14:06,589
development of this w3c web Transport

1613
01:14:03,080 --> 01:14:07,970
API and to provide support for reliable

1614
01:14:06,590 --> 01:14:10,160
bi-directional and you directional

1615
01:14:07,970 --> 01:14:13,400
communications plus the datagrams that

1616
01:14:10,160 --> 01:14:14,480
we talked about in in origin checks and

1617
01:14:13,400 --> 01:14:16,639
there are three variants that are

1618
01:14:14,480 --> 01:14:18,139
described here protocol running over

1619
01:14:16,640 --> 01:14:20,150
quick which is the quick transport that

1620
01:14:18,140 --> 01:14:23,060
Victor talked about the one running over

1621
01:14:20,150 --> 01:14:28,160
HTTP 3 which is the HTTP 3 transport and

1622
01:14:23,060 --> 01:14:29,780
then the fallback protocols and then we

1623
01:14:28,160 --> 01:14:31,599
do have some language about security

1624
01:14:29,780 --> 01:14:33,980
issues from the above scenarios

1625
01:14:31,600 --> 01:14:35,810
basically relating back to the design of

1626
01:14:33,980 --> 01:14:39,620
WebSockets so we don't introduce some

1627
01:14:35,810 --> 01:14:42,680
new security issues and/or new ones

1628
01:14:39,620 --> 01:14:45,110
don't don't reintroduce the old ones and

1629
01:14:42,680 --> 01:14:46,940
they'll create new ones and then there's

1630
01:14:45,110 --> 01:14:50,750
stuff about the coordination with the

1631
01:14:46,940 --> 01:14:52,730
w3c and on our side to develop an

1632
01:14:50,750 --> 01:14:56,390
overview document that's sort of what

1633
01:14:52,730 --> 01:14:57,740
what Victor talked about although from

1634
01:14:56,390 --> 01:15:00,020
the comments here we might want to also

1635
01:14:57,740 --> 01:15:02,840
talk about operating kind of concerns as

1636
01:15:00,020 --> 01:15:06,080
well in there and then get feedback to

1637
01:15:02,840 --> 01:15:08,660
try to have the best possible match and

1638
01:15:06,080 --> 01:15:10,330
as eckers said there have been a lot of

1639
01:15:08,660 --> 01:15:11,500
issues with that so

1640
01:15:10,330 --> 01:15:13,210
you want to be a little bit more

1641
01:15:11,500 --> 01:15:14,860
specific about how it's supposed to work

1642
01:15:13,210 --> 01:15:18,310
and then there's coordination with other

1643
01:15:14,860 --> 01:15:19,540
groups in the IDF and then the

1644
01:15:18,310 --> 01:15:21,730
milestones which are kind of vague and

1645
01:15:19,540 --> 01:15:23,280
probably not worth talking about here

1646
01:15:21,730 --> 01:15:25,480
although you're happy to comment on them

1647
01:15:23,280 --> 01:15:28,110
so that's the current state of the

1648
01:15:25,480 --> 01:15:30,790
Charter proposal and please if you have

1649
01:15:28,110 --> 01:15:33,309
guidance for us go to mailing lists or

1650
01:15:30,790 --> 01:15:39,610
and/or that github repo and let us know

1651
01:15:33,310 --> 01:15:41,650
what you think okay yeah there any

1652
01:15:39,610 --> 01:15:46,750
little clarifying things go ahead and

1653
01:15:41,650 --> 01:15:48,580
enjoy Mia Kulemin so at one point that

1654
01:15:46,750 --> 01:15:50,440
I'm trying to understand from a be point

1655
01:15:48,580 --> 01:15:52,600
of view from Transport Eddie point of

1656
01:15:50,440 --> 01:15:54,879
view is like what's actually

1657
01:15:52,600 --> 01:15:57,070
implications for quick here because

1658
01:15:54,880 --> 01:15:58,930
initially the proposal was like very

1659
01:15:57,070 --> 01:16:01,299
very quick focus you were proposing

1660
01:15:58,930 --> 01:16:02,980
quick extensions and stuff and then the

1661
01:16:01,300 --> 01:16:06,580
proposal changed very very drastically

1662
01:16:02,980 --> 01:16:08,139
over the last week basically and like

1663
01:16:06,580 --> 01:16:09,490
this looks very much what was presented

1664
01:16:08,140 --> 01:16:11,470
to me today looks very much like you're

1665
01:16:09,490 --> 01:16:14,769
only using quick but there's actually no

1666
01:16:11,470 --> 01:16:18,040
implications on quick itself yes as far

1667
01:16:14,770 --> 01:16:20,740
as we know this is a use of the quick

1668
01:16:18,040 --> 01:16:23,920
Transfer Protocol this doesn't have any

1669
01:16:20,740 --> 01:16:25,870
requirements on well I guess the only

1670
01:16:23,920 --> 01:16:28,930
one that I see is we would need the

1671
01:16:25,870 --> 01:16:31,180
Datagram extension as part of quick but

1672
01:16:28,930 --> 01:16:32,530
we don't we're not levying any

1673
01:16:31,180 --> 01:16:34,450
requirements on the quick working group

1674
01:16:32,530 --> 01:16:36,160
as far as we know or on the HTTP working

1675
01:16:34,450 --> 01:16:38,110
group though don't be probably

1676
01:16:36,160 --> 01:16:40,180
conversations there but I don't think

1677
01:16:38,110 --> 01:16:46,690
we're changing those protocols we're

1678
01:16:40,180 --> 01:16:49,930
just using Lourdes Nottingham what

1679
01:16:46,690 --> 01:16:52,480
timing yes this is mostly a transport

1680
01:16:49,930 --> 01:16:54,010
show but you are using HTTP so just as I

1681
01:16:52,480 --> 01:16:55,629
say in many places keep an eye on things

1682
01:16:54,010 --> 01:16:57,940
for example I noticed a new pseudo

1683
01:16:55,630 --> 01:16:59,320
header go by there and that's a fairly

1684
01:16:57,940 --> 01:17:00,460
controversial thing and we need to have

1685
01:16:59,320 --> 01:17:02,259
a discussion about whether that's a good

1686
01:17:00,460 --> 01:17:03,490
idea or not because I see

1687
01:17:02,260 --> 01:17:06,640
implementations starting to use pseudo

1688
01:17:03,490 --> 01:17:10,269
headers and that goes to very nasty

1689
01:17:06,640 --> 01:17:13,450
places very quickly and - yeah

1690
01:17:10,270 --> 01:17:15,730
absolutely and as stated in the Charter

1691
01:17:13,450 --> 01:17:18,070
for any standards action would be

1692
01:17:15,730 --> 01:17:20,080
discussed on the HTTP mailing list as

1693
01:17:18,070 --> 01:17:22,650
well and so especially something like

1694
01:17:20,080 --> 01:17:26,340
this we would bring their beak

1695
01:17:22,650 --> 01:17:29,719
as you say that's where they're all the

1696
01:17:26,340 --> 01:17:29,720
experts are and nor they have opinions

1697
01:17:30,440 --> 01:17:39,059
do we have any clarifying questions on

1698
01:17:33,570 --> 01:17:44,259
that charter any chance I could get you

1699
01:17:39,060 --> 01:17:47,470
to change the name because it bites

1700
01:17:44,260 --> 01:17:47,470
[Music]

1701
01:17:49,160 --> 01:17:52,639
specifically it's neither transport nor

1702
01:17:51,300 --> 01:18:03,360
does it have anything to do with the web

1703
01:17:52,640 --> 01:18:06,600
so so the the Web API from the w3c pass

1704
01:18:03,360 --> 01:18:10,740
all to do with the web no it doesn't but

1705
01:18:06,600 --> 01:18:12,420
a browser API sure you could call it the

1706
01:18:10,740 --> 01:18:18,480
browser transport protocol and I'd be

1707
01:18:12,420 --> 01:18:19,680
perfectly fine to find that this is the

1708
01:18:18,480 --> 01:18:23,540
first time this week Rory and I have

1709
01:18:19,680 --> 01:18:26,130
agreed this is not a good name let's I

1710
01:18:23,540 --> 01:18:28,170
wouldn't call a bike shed on the name

1711
01:18:26,130 --> 01:18:31,560
age charter clarifying question so let's

1712
01:18:28,170 --> 01:18:50,660
not go down this path more comment than

1713
01:18:31,560 --> 01:18:52,980
a question so we're not going to like

1714
01:18:50,660 --> 01:18:55,080
because the working group is not forming

1715
01:18:52,980 --> 01:18:57,360
we're not gonna make any binding calls

1716
01:18:55,080 --> 01:18:59,280
but we would like to have some so that

1717
01:18:57,360 --> 01:19:01,230
first two will be Hobbes the throne will

1718
01:18:59,280 --> 01:19:03,599
be a show of hands just to gauge

1719
01:19:01,230 --> 01:19:06,599
interest and to see if we think that

1720
01:19:03,600 --> 01:19:10,170
this proposal is well-defined enough to

1721
01:19:06,600 --> 01:19:12,420
warrant chartering soon and or if how

1722
01:19:10,170 --> 01:19:15,960
much change is required before then

1723
01:19:12,420 --> 01:19:16,920
because from where I'm sitting it sounds

1724
01:19:15,960 --> 01:19:19,500
like they're interested there is

1725
01:19:16,920 --> 01:19:22,170
interest from the community so we're

1726
01:19:19,500 --> 01:19:24,060
gonna go with these questions so first

1727
01:19:22,170 --> 01:19:25,080
one is is the web transport problem

1728
01:19:24,060 --> 01:19:29,690
statement clear

1729
01:19:25,080 --> 01:19:33,930
well scoped solvable and useful to solve

1730
01:19:29,690 --> 01:19:36,419
I would like to ask for a hum in first I

1731
01:19:33,930 --> 01:19:37,739
will ask if yet you think yes

1732
01:19:36,420 --> 01:19:43,650
and then I will ask you to hum if you

1733
01:19:37,739 --> 01:19:49,049
think no does anyone want to argue is

1734
01:19:43,650 --> 01:19:51,870
this hum well understood yes okay so if

1735
01:19:49,050 --> 01:19:58,320
you think yes to the question number one

1736
01:19:51,870 --> 01:20:09,660
please hum now if you think

1737
01:19:58,320 --> 01:20:16,410
no please hum now didn't hear much can

1738
01:20:09,660 --> 01:20:20,400
you guys call that for the minutes my

1739
01:20:16,410 --> 01:20:25,980
general take was I heard from yes

1740
01:20:20,400 --> 01:20:33,030
if someone know would you please kind of

1741
01:20:25,980 --> 01:20:34,259
just stay why you think know which one

1742
01:20:33,030 --> 01:20:35,130
of these points do you think is not

1743
01:20:34,260 --> 01:20:42,420
necessarily true

1744
01:20:35,130 --> 01:20:43,949
I say yes maybe yes yes and I'm

1745
01:20:42,420 --> 01:20:45,870
concerned about the maybe for well

1746
01:20:43,949 --> 01:20:46,620
scoped in particular I think we might

1747
01:20:45,870 --> 01:20:48,290
want to broaden the scope

1748
01:20:46,620 --> 01:20:51,090
ever-so-slightly

1749
01:20:48,290 --> 01:20:52,860
can can you like specifically add

1750
01:20:51,090 --> 01:20:54,540
details and send this to the list as

1751
01:20:52,860 --> 01:20:56,309
were absolutely and I intend to have

1752
01:20:54,540 --> 01:20:58,199
conversations before the happens as well

1753
01:20:56,310 --> 01:21:01,679
awesome thanks so I think for the

1754
01:20:58,199 --> 01:21:06,540
minutes mainly were being at a yes on

1755
01:21:01,679 --> 01:21:11,160
this one also just relaying two yeses on

1756
01:21:06,540 --> 01:21:13,230
jabber thank you okay the second

1757
01:21:11,160 --> 01:21:16,469
question are the web transport

1758
01:21:13,230 --> 01:21:20,190
deliverables so there were the over

1759
01:21:16,469 --> 01:21:23,400
overview so as in the overview document

1760
01:21:20,190 --> 01:21:24,570
the quick transport protocol the HTTP 3

1761
01:21:23,400 --> 01:21:26,509
transport protocol and the fallback

1762
01:21:24,570 --> 01:21:30,380
transport are those deliverables

1763
01:21:26,510 --> 01:21:33,810
well-defined and well understood yes Ted

1764
01:21:30,380 --> 01:21:35,429
Ted Hardy what you want us to do if we

1765
01:21:33,810 --> 01:21:43,110
think only some of them are well-defined

1766
01:21:35,429 --> 01:21:44,170
and well understood on both times so let

1767
01:21:43,110 --> 01:21:46,690
if you

1768
01:21:44,170 --> 01:21:49,719
the maybe did if you think that's the

1769
01:21:46,690 --> 01:21:50,769
case how can you say which ones you

1770
01:21:49,719 --> 01:21:54,280
think and then maybe we can kind of

1771
01:21:50,770 --> 01:21:55,840
split this hum up so once again ten

1772
01:21:54,280 --> 01:21:59,830
Hardy speaking just as an individual I

1773
01:21:55,840 --> 01:22:01,449
think the relationship between web

1774
01:21:59,830 --> 01:22:03,429
Transport quick transport and fallback

1775
01:22:01,449 --> 01:22:05,620
transport needs some fleshing out and

1776
01:22:03,429 --> 01:22:07,420
and perhaps a substantial amount of it

1777
01:22:05,620 --> 01:22:09,610
before we can say that it's well defined

1778
01:22:07,420 --> 01:22:11,500
and well understood because it's

1779
01:22:09,610 --> 01:22:14,440
expected to go into deployment where

1780
01:22:11,500 --> 01:22:17,050
there's a relationship among them that

1781
01:22:14,440 --> 01:22:19,719
may be variable and the suitability of

1782
01:22:17,050 --> 01:22:21,760
the the fallback transport in particular

1783
01:22:19,719 --> 01:22:22,989
may be variable and I thought you you

1784
01:22:21,760 --> 01:22:24,790
heard a little bit of that when people

1785
01:22:22,989 --> 01:22:28,059
were talking about when you would fall

1786
01:22:24,790 --> 01:22:30,969
back to two standard web sockets and

1787
01:22:28,060 --> 01:22:33,310
what your security properties were when

1788
01:22:30,969 --> 01:22:35,980
you were falling back could be different

1789
01:22:33,310 --> 01:22:37,750
from the security properties of what you

1790
01:22:35,980 --> 01:22:41,500
got if you didn't have to fall back and

1791
01:22:37,750 --> 01:22:44,440
I think there's some some chance here

1792
01:22:41,500 --> 01:22:46,239
that we can get to deliverables which

1793
01:22:44,440 --> 01:22:48,428
are well-defined and well understood and

1794
01:22:46,239 --> 01:22:52,178
so I'm not particularly fast about

1795
01:22:48,429 --> 01:22:54,100
saying the once you write a charter and

1796
01:22:52,179 --> 01:22:55,270
start doing the work you won't be able

1797
01:22:54,100 --> 01:22:56,980
to get there I think you probably will

1798
01:22:55,270 --> 01:22:58,780
but I'm a little bit concerned about

1799
01:22:56,980 --> 01:23:01,690
saying we're already there

1800
01:22:58,780 --> 01:23:03,280
at Ed stay there if we were to instead

1801
01:23:01,690 --> 01:23:06,309
say are they well-defined and one

1802
01:23:03,280 --> 01:23:08,259
understood now we were too safe

1803
01:23:06,310 --> 01:23:09,940
are they well-defined enough to charter

1804
01:23:08,260 --> 01:23:12,550
a working group to make sure those are

1805
01:23:09,940 --> 01:23:14,830
well-defined would would that be a

1806
01:23:12,550 --> 01:23:16,330
better question would that help or would

1807
01:23:14,830 --> 01:23:17,830
that make things worse I think I'm gonna

1808
01:23:16,330 --> 01:23:21,760
defer to the rest of the line to answer

1809
01:23:17,830 --> 01:23:24,429
that if this is definitely a clarifying

1810
01:23:21,760 --> 01:23:26,710
question um I understood this a

1811
01:23:24,429 --> 01:23:28,510
nonworking forming Boff and you were

1812
01:23:26,710 --> 01:23:29,710
asking before me we referring questions

1813
01:23:28,510 --> 01:23:33,130
so I'm looking what sense this is not a

1814
01:23:29,710 --> 01:23:35,770
working frame buff at this moment but in

1815
01:23:33,130 --> 01:23:37,300
the sense is what we would have working

1816
01:23:35,770 --> 01:23:39,190
for and what be different yeah I think I

1817
01:23:37,300 --> 01:23:40,989
think the question here is to get a

1818
01:23:39,190 --> 01:23:42,900
sense of the room on what portions of

1819
01:23:40,989 --> 01:23:45,610
this Charter need a lot more work or

1820
01:23:42,900 --> 01:23:49,000
what portions of the work items need

1821
01:23:45,610 --> 01:23:51,429
more work to be to be clarified so if

1822
01:23:49,000 --> 01:23:53,050
you can speak to that ekor like what

1823
01:23:51,429 --> 01:23:54,660
portion of this do you think are less

1824
01:23:53,050 --> 01:23:57,100
well defined or less well understood

1825
01:23:54,660 --> 01:23:58,030
sure but then you're like taking hums so

1826
01:23:57,100 --> 01:23:59,920
like again am I

1827
01:23:58,030 --> 01:24:01,630
like to understand where's the a defense

1828
01:23:59,920 --> 01:24:02,770
we're not at the home yet because we're

1829
01:24:01,630 --> 01:24:04,179
trying to know but you've got home in

1830
01:24:02,770 --> 01:24:07,929
the first one here it's hit on the

1831
01:24:04,179 --> 01:24:09,070
second one so like so once again I'm

1832
01:24:07,929 --> 01:24:11,770
like in what ways what was this

1833
01:24:09,070 --> 01:24:14,409
different from working for me about so

1834
01:24:11,770 --> 01:24:17,679
the are responsible ad berry is coming

1835
01:24:14,409 --> 01:24:20,949
up to the mic this is Barry

1836
01:24:17,679 --> 01:24:24,219
I don't think we went through charter

1837
01:24:20,949 --> 01:24:25,900
bashing significantly they I they wanted

1838
01:24:24,219 --> 01:24:27,909
to show the Charter to give you an idea

1839
01:24:25,900 --> 01:24:32,530
of what they're looking at but the

1840
01:24:27,909 --> 01:24:36,039
question here on number two is not is

1841
01:24:32,530 --> 01:24:38,559
the Charter we're proposing to the right

1842
01:24:36,039 --> 01:24:40,480
thing it's these things that we talked

1843
01:24:38,559 --> 01:24:42,789
about in these presentations do you

1844
01:24:40,480 --> 01:24:45,190
understand them are they well-defined is

1845
01:24:42,789 --> 01:24:47,980
the technology we're trying to discuss

1846
01:24:45,190 --> 01:24:49,869
well defined and well understood yeah

1847
01:24:47,980 --> 01:24:52,239
and if not what specifically what

1848
01:24:49,869 --> 01:24:55,329
portions are no okay but is like one

1849
01:24:52,239 --> 01:24:58,419
possible outcome of this that the next

1850
01:24:55,329 --> 01:25:00,429
thing we see is a draft Charter and a

1851
01:24:58,420 --> 01:25:05,039
proposal to form the working group with

1852
01:25:00,429 --> 01:25:06,760
no subsequent boss not without some

1853
01:25:05,039 --> 01:25:09,009
addressing the comments that we're

1854
01:25:06,760 --> 01:25:10,630
hearing here exact that would depend on

1855
01:25:09,010 --> 01:25:12,219
what the discussion on the mailing list

1856
01:25:10,630 --> 01:25:14,800
how the discussion on the mailing list

1857
01:25:12,219 --> 01:25:16,360
goes it may be that after a bit of

1858
01:25:14,800 --> 01:25:17,920
discussion on the mailing list people

1859
01:25:16,360 --> 01:25:20,889
decide that we're ready to start

1860
01:25:17,920 --> 01:25:22,840
chartering a working group that's not

1861
01:25:20,889 --> 01:25:25,739
the goal of this buff but it could be a

1862
01:25:22,840 --> 01:25:28,300
result of the mailing list discussion I

1863
01:25:25,739 --> 01:25:29,829
don't we have this we have chartered

1864
01:25:28,300 --> 01:25:33,280
many working groups without having

1865
01:25:29,829 --> 01:25:35,860
another buff to to do that yeah I grew

1866
01:25:33,280 --> 01:25:37,869
that but um we don't this offline but

1867
01:25:35,860 --> 01:25:40,119
like like part of the signaling of it's

1868
01:25:37,869 --> 01:25:41,199
not working before you bought is the

1869
01:25:40,119 --> 01:25:43,179
ascent to which people are expected to

1870
01:25:41,199 --> 01:25:46,808
come and expected at Waverley in in the

1871
01:25:43,179 --> 01:25:48,639
beating and so like if what you do is

1872
01:25:46,809 --> 01:25:49,750
you run this and you like ask the home

1873
01:25:48,639 --> 01:25:52,059
questions and you're like this is

1874
01:25:49,750 --> 01:25:53,590
awesome and then you like work so hard

1875
01:25:52,059 --> 01:25:55,000
in the list and you ask for information

1876
01:25:53,590 --> 01:25:57,329
that isn't working referring buff and

1877
01:25:55,000 --> 01:26:02,079
it's disingenuous it's not alright

1878
01:25:57,329 --> 01:26:03,400
thanks almost out of time so if we can

1879
01:26:02,079 --> 01:26:08,559
sure what no I want to throw other

1880
01:26:03,400 --> 01:26:11,049
questions as well I'm

1881
01:26:08,560 --> 01:26:12,430
I'm on I'm not I'm unhappy that it was

1882
01:26:11,050 --> 01:26:14,020
advertised and I'm working for him Botha

1883
01:26:12,430 --> 01:26:17,460
and now he's up and that the operators

1884
01:26:14,020 --> 01:26:19,990
but working for him boss on so okay Eric

1885
01:26:17,460 --> 01:26:22,390
please let other people in line keep

1886
01:26:19,990 --> 01:26:23,710
going you'll spend like three minutes at

1887
01:26:22,390 --> 01:26:25,540
the line and we have four minutes left

1888
01:26:23,710 --> 01:26:26,440
and one two three four five six seven

1889
01:26:25,540 --> 01:26:33,280
people in line please

1890
01:26:26,440 --> 01:26:35,139
sorry I will talk later do me a cool

1891
01:26:33,280 --> 01:26:37,900
event so my question might imply that

1892
01:26:35,140 --> 01:26:40,120
I'm a note to the second question but

1893
01:26:37,900 --> 01:26:41,710
are you talking about if the general you

1894
01:26:40,120 --> 01:26:43,960
know having these milestones without

1895
01:26:41,710 --> 01:26:46,540
like taking what was presented today is

1896
01:26:43,960 --> 01:26:48,820
starting point or are you thinking about

1897
01:26:46,540 --> 01:26:50,769
what was proposed today is clear and

1898
01:26:48,820 --> 01:26:52,420
well scope you could what at least what

1899
01:26:50,770 --> 01:26:54,270
I understood from my clan is that there

1900
01:26:52,420 --> 01:26:56,740
are a lot of things that need to

1901
01:26:54,270 --> 01:27:00,160
potentially change or are very unclear

1902
01:26:56,740 --> 01:27:01,809
so the proposal itself is not

1903
01:27:00,160 --> 01:27:03,430
well-defined for me but this could be

1904
01:27:01,810 --> 01:27:05,110
yeah can you be more specific please

1905
01:27:03,430 --> 01:27:07,630
that's what we're trying to get here

1906
01:27:05,110 --> 01:27:10,389
which portions of this Arden or did you

1907
01:27:07,630 --> 01:27:11,620
not understand so I mean like what you

1908
01:27:10,390 --> 01:27:13,210
presented today is also a little bit

1909
01:27:11,620 --> 01:27:15,970
more high-level than what's in the

1910
01:27:13,210 --> 01:27:17,860
crafts right so what you presented today

1911
01:27:15,970 --> 01:27:19,900
it makes sense to me but like all the

1912
01:27:17,860 --> 01:27:21,099
details in the draft like or not all of

1913
01:27:19,900 --> 01:27:22,690
them but a lot of the details in the

1914
01:27:21,100 --> 01:27:29,890
draft needs much more discussion I think

1915
01:27:22,690 --> 01:27:31,929
I think this is a very big question and

1916
01:27:29,890 --> 01:27:33,400
I'm kind of surprised that HTTP to

1917
01:27:31,930 --> 01:27:36,190
transport is not on the list

1918
01:27:33,400 --> 01:27:37,570
but like I have my main question this

1919
01:27:36,190 --> 01:27:42,370
house this question is different from

1920
01:27:37,570 --> 01:27:44,559
the first one well it's I think a

1921
01:27:42,370 --> 01:27:47,380
question of really trying to elicit what

1922
01:27:44,560 --> 01:27:49,630
needs more work or what is less defined

1923
01:27:47,380 --> 01:27:51,850
you know given the group feedback what

1924
01:27:49,630 --> 01:27:56,290
what they feel you know needs to be

1925
01:27:51,850 --> 01:27:58,090
worked on a little bit more alright yeah

1926
01:27:56,290 --> 01:28:01,380
because it sounds like those questions

1927
01:27:58,090 --> 01:28:04,300
not really ready for the time because

1928
01:28:01,380 --> 01:28:07,000
we're getting feedback then the second

1929
01:28:04,300 --> 01:28:08,710
question is - it's not the question

1930
01:28:07,000 --> 01:28:11,080
itself is not well defined so we're not

1931
01:28:08,710 --> 01:28:13,330
in it takes a second all right Tommy

1932
01:28:11,080 --> 01:28:15,160
Polly Apple so I think that's the right

1933
01:28:13,330 --> 01:28:16,059
decision and beyond that I mean

1934
01:28:15,160 --> 01:28:19,240
specifically because we're saying

1935
01:28:16,060 --> 01:28:20,800
deliverables here I think that if you

1936
01:28:19,240 --> 01:28:22,340
were to look at a charter with these

1937
01:28:20,800 --> 01:28:25,520
deliverables these are not the

1938
01:28:22,340 --> 01:28:27,050
I granularity for deliverables it's a

1939
01:28:25,520 --> 01:28:29,300
bit putting the cart before the horse of

1940
01:28:27,050 --> 01:28:31,280
this is one way of solving the problem

1941
01:28:29,300 --> 01:28:32,750
but we should state that we should solve

1942
01:28:31,280 --> 01:28:34,369
these problems that not say we will

1943
01:28:32,750 --> 01:28:36,050
create that quick transport and the

1944
01:28:34,369 --> 01:28:38,059
fallback transport that is a solution

1945
01:28:36,050 --> 01:28:40,159
but as we've discussed we need to talk

1946
01:28:38,060 --> 01:28:42,380
about that and any charter should give

1947
01:28:40,159 --> 01:28:46,388
room for a flexible solution to does not

1948
01:28:42,380 --> 01:28:48,650
preconceived the answer Thank You

1949
01:28:46,389 --> 01:28:50,210
Dominic similarly I mean

1950
01:28:48,650 --> 01:28:52,219
deckers point earlier that it's not

1951
01:28:50,210 --> 01:28:53,630
clear that quick you know there should

1952
01:28:52,219 --> 01:28:56,420
be separate quick transport age to be

1953
01:28:53,630 --> 01:28:58,040
three transports I think that should be

1954
01:28:56,420 --> 01:28:59,389
a decision made by the working group not

1955
01:28:58,040 --> 01:29:00,889
by the Charter whether those should you

1956
01:28:59,389 --> 01:29:02,449
have one protocol or two Thanks all

1957
01:29:00,889 --> 01:29:03,860
right we're cutting the mic line for

1958
01:29:02,449 --> 01:29:05,629
anyone that's not in line right now and

1959
01:29:03,860 --> 01:29:09,110
keys be very brief we're almost out of

1960
01:29:05,630 --> 01:29:11,300
time are we proceeding with hums Chris

1961
01:29:09,110 --> 01:29:13,219
lemon suggests let's home about what

1962
01:29:11,300 --> 01:29:16,909
needs more work instead of humming about

1963
01:29:13,219 --> 01:29:18,739
the whole list for adoption so we're not

1964
01:29:16,909 --> 01:29:20,629
going to have those hums today as shown

1965
01:29:18,739 --> 01:29:21,110
by the previous conversations yeah not

1966
01:29:20,630 --> 01:29:25,159
until tonight

1967
01:29:21,110 --> 01:29:26,690
I hummed against the first one I what I

1968
01:29:25,159 --> 01:29:28,219
learned here may be convinced that

1969
01:29:26,690 --> 01:29:30,619
there's a bunch of things that we we

1970
01:29:28,219 --> 01:29:33,440
need to work on refining to list those

1971
01:29:30,619 --> 01:29:34,580
things as I see them right now what what

1972
01:29:33,440 --> 01:29:37,428
are the problems were trying to solve

1973
01:29:34,580 --> 01:29:40,639
concretely we got close to that but not

1974
01:29:37,429 --> 01:29:42,139
quite the nature of the relationship

1975
01:29:40,639 --> 01:29:43,250
between the the two standards

1976
01:29:42,139 --> 01:29:44,480
organizations is going to be

1977
01:29:43,250 --> 01:29:47,599
particularly difficult and that needs to

1978
01:29:44,480 --> 01:29:48,888
be mapped out very clearly and the way

1979
01:29:47,599 --> 01:29:52,130
in which these things are going to be

1980
01:29:48,889 --> 01:29:53,510
identified and managed was was also very

1981
01:29:52,130 --> 01:29:55,159
unclear I think some of the drafts that

1982
01:29:53,510 --> 01:29:57,790
we're presenting on are extraordinarily

1983
01:29:55,159 --> 01:30:03,530
unclear on those things as well

1984
01:29:57,790 --> 01:30:05,630
I Brian Trammell basically what Martin

1985
01:30:03,530 --> 01:30:08,210
said I would say I would say that you

1986
01:30:05,630 --> 01:30:09,980
know when this Charter comes back for

1987
01:30:08,210 --> 01:30:13,610
another Boff or you know discussion

1988
01:30:09,980 --> 01:30:16,400
between um it should emphasize a bit

1989
01:30:13,610 --> 01:30:17,690
more the overview and maybe say hey

1990
01:30:16,400 --> 01:30:19,070
there will also be some transport

1991
01:30:17,690 --> 01:30:20,598
documents one for binding because I'm

1992
01:30:19,070 --> 01:30:21,920
not sure the split here is correct I'm

1993
01:30:20,599 --> 01:30:23,420
not sure that all of these are necessary

1994
01:30:21,920 --> 01:30:26,929
I'm not like the relationship among them

1995
01:30:23,420 --> 01:30:29,389
for security is mmm-hmm and it's like

1996
01:30:26,929 --> 01:30:30,650
yeah it's it's it's one proposal there

1997
01:30:29,389 --> 01:30:32,090
are alternate things to do in this space

1998
01:30:30,650 --> 01:30:34,070
there alternate ways to manage the stack

1999
01:30:32,090 --> 01:30:36,260
I would focus first on getting something

2000
01:30:34,070 --> 01:30:37,489
chartered it gets the overview outs

2001
01:30:36,260 --> 01:30:39,349
that everybody understand what's going

2002
01:30:37,489 --> 01:30:42,159
on cuz otherwise they'd the interests do

2003
01:30:39,349 --> 01:30:42,159
thing is gonna be tricky

2004
01:30:43,659 --> 01:30:47,449
mark Nottingham yeah I'd agree with what

2005
01:30:46,130 --> 01:30:51,469
Brian just said see I can't agree with

2006
01:30:47,449 --> 01:30:53,719
you it's okay I think we could we need

2007
01:30:51,469 --> 01:30:55,159
to over communicate here my concern

2008
01:30:53,719 --> 01:30:56,510
around this is mostly around how

2009
01:30:55,159 --> 01:30:59,480
complicated it is and how many moving

2010
01:30:56,510 --> 01:31:01,159
parts there are we have a history of

2011
01:30:59,480 --> 01:31:02,900
over designing things and over

2012
01:31:01,159 --> 01:31:04,429
engineering things and you think we'd

2013
01:31:02,900 --> 01:31:07,820
eventually learn from that but somehow

2014
01:31:04,429 --> 01:31:09,590
we never do so let's define the problem

2015
01:31:07,820 --> 01:31:11,329
set let's figure out how this is an

2016
01:31:09,590 --> 01:31:13,280
evolution for WebSockets rather than

2017
01:31:11,329 --> 01:31:16,190
maybe a brand new thing and take it from

2018
01:31:13,280 --> 01:31:17,509
there alright so quick show of hands so

2019
01:31:16,190 --> 01:31:20,719
we're not gonna take names but just to

2020
01:31:17,510 --> 01:31:24,199
get a sense in this space and what we've

2021
01:31:20,719 --> 01:31:27,110
discussed if you are interested in like

2022
01:31:24,199 --> 01:31:34,388
reviewing these documents please raise

2023
01:31:27,110 --> 01:31:38,210
your hand now I'm I'd say like two dozen

2024
01:31:34,389 --> 01:31:38,599
hands I'm seeing for the minutes okay

2025
01:31:38,210 --> 01:31:41,869
thank you

2026
01:31:38,599 --> 01:31:43,730
so to wrap up because we're out of time

2027
01:31:41,869 --> 01:31:45,829
I'm getting a sense that people

2028
01:31:43,730 --> 01:31:47,299
understand the general problem statement

2029
01:31:45,829 --> 01:31:49,639
to the general space that we're working

2030
01:31:47,300 --> 01:31:51,920
in I'm also getting that there is

2031
01:31:49,639 --> 01:31:55,789
interest from the community in working

2032
01:31:51,920 --> 01:31:59,090
on these problems however we are not

2033
01:31:55,789 --> 01:32:01,639
ready we're going to need to make or put

2034
01:31:59,090 --> 01:32:04,219
more energy into the Charter because the

2035
01:32:01,639 --> 01:32:05,989
current one is too specific and those

2036
01:32:04,219 --> 01:32:08,000
specific items are not necessarily the

2037
01:32:05,989 --> 01:32:09,558
right ones but it really sounds like we

2038
01:32:08,000 --> 01:32:12,230
have energy to go in this general

2039
01:32:09,559 --> 01:32:17,780
direction and very if you have any

2040
01:32:12,230 --> 01:32:19,489
closing comments I do because I was also

2041
01:32:17,780 --> 01:32:21,079
involved in making this a nonworking

2042
01:32:19,489 --> 01:32:23,150
conforming buff I think the discussion

2043
01:32:21,079 --> 01:32:24,799
right now just like Kufa that was maybe

2044
01:32:23,150 --> 01:32:26,509
the right decision and I would really

2045
01:32:24,800 --> 01:32:28,579
encourage you to put not only more work

2046
01:32:26,510 --> 01:32:30,440
in the Charter but put more work in the

2047
01:32:28,579 --> 01:32:33,110
extra proposal you are making here for

2048
01:32:30,440 --> 01:32:33,949
sanitization that was part of what I was

2049
01:32:33,110 --> 01:32:36,860
going to say so

2050
01:32:33,949 --> 01:32:38,449
I don't have to say that part so the

2051
01:32:36,860 --> 01:32:40,549
part I do want to do is quickly who

2052
01:32:38,449 --> 01:32:43,669
raise your hand if you are on the web

2053
01:32:40,550 --> 01:32:45,320
trans mailing list right now and put

2054
01:32:43,670 --> 01:32:47,710
your hands down raise your hand if you

2055
01:32:45,320 --> 01:32:49,070
are going to join after this meeting

2056
01:32:47,710 --> 01:32:52,730
okay

2057
01:32:49,070 --> 01:32:54,830
and we got somewhere so yes focus on on

2058
01:32:52,730 --> 01:32:57,019
refining number one and getting that

2059
01:32:54,830 --> 01:32:59,809
right on the mailing list before you

2060
01:32:57,020 --> 01:33:01,850
think about redrafting charter awesome

2061
01:32:59,810 --> 01:33:05,440
we will see you all on the list very

2062
01:33:01,850 --> 01:33:05,440
soon thank you for coming everyone

2063
01:33:29,970 --> 01:33:32,030
you

