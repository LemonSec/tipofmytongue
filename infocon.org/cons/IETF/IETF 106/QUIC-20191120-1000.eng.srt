1
00:00:15,309 --> 00:00:25,369
okay let's get started this is quick and

2
00:00:22,630 --> 00:00:27,349
this is our sessions second session for

3
00:00:25,370 --> 00:00:29,150
the week if someone come in the back

4
00:00:27,350 --> 00:00:32,660
door could possibly close it that it'd

5
00:00:29,150 --> 00:00:37,960
be really appreciated thank you or we

6
00:00:32,659 --> 00:00:42,410
can get the next person to close it okay

7
00:00:37,960 --> 00:00:46,130
this is the note well good morning by

8
00:00:42,410 --> 00:00:47,480
the way this is the note well hopefully

9
00:00:46,130 --> 00:00:49,460
you're all familiar with it if you're

10
00:00:47,480 --> 00:00:51,680
not you can find it using your favorite

11
00:00:49,460 --> 00:00:53,540
search engine by searching for ietf note

12
00:00:51,680 --> 00:00:54,860
well it's the terms under which we

13
00:00:53,540 --> 00:00:56,780
participate regarding things like

14
00:00:54,860 --> 00:00:58,700
intellectual property but also regarding

15
00:00:56,780 --> 00:01:00,530
things like our behavior in the room and

16
00:00:58,700 --> 00:01:03,710
on the mailing lists and in the hallways

17
00:01:00,530 --> 00:01:05,509
and other ietf uShip places so please

18
00:01:03,710 --> 00:01:07,610
take a look please learn more about it

19
00:01:05,509 --> 00:01:09,770
if you have any questions we'd love to

20
00:01:07,610 --> 00:01:13,009
chat with you either myself Lara's when

21
00:01:09,770 --> 00:01:17,240
he's here he sends his regards or other

22
00:01:13,009 --> 00:01:19,670
ITF leadership blue sheets are

23
00:01:17,240 --> 00:01:21,949
circulating one on each side please sign

24
00:01:19,670 --> 00:01:25,899
those as they combine can we have some

25
00:01:21,950 --> 00:01:28,670
volunteers or a volunteer for scribing

26
00:01:25,899 --> 00:01:31,539
two hours for which you will be

27
00:01:28,670 --> 00:01:31,539
eternally thanked

28
00:01:36,350 --> 00:01:43,109
it's amazing how quiet the room can

29
00:01:38,729 --> 00:01:46,700
become I won't ask Ted Hardy because

30
00:01:43,109 --> 00:01:46,699
he's done so much service in the past

31
00:01:52,219 --> 00:02:00,030
are you volunteering Ted your service to

32
00:01:55,979 --> 00:02:02,689
the community is is above and beyond

33
00:02:00,030 --> 00:02:02,689
thank you

34
00:02:03,349 --> 00:02:08,340
Thank You Ted can are you gonna use the

35
00:02:06,090 --> 00:02:10,259
ether pad Ted or the Google Doc ether

36
00:02:08,340 --> 00:02:12,629
pad if folks could help Ted out on the

37
00:02:10,258 --> 00:02:14,849
ether pad if you're not actually helping

38
00:02:12,629 --> 00:02:16,890
Ted out maybe refrain from getting on to

39
00:02:14,849 --> 00:02:18,238
it because it doesn't like lots of

40
00:02:16,890 --> 00:02:21,779
people at the same time that would be

41
00:02:18,239 --> 00:02:23,610
appreciated can someone volunteer to

42
00:02:21,780 --> 00:02:32,400
jabber scribe is significantly easier to

43
00:02:23,610 --> 00:02:34,170
ask Thank You dkg once again we're not

44
00:02:32,400 --> 00:02:36,569
entirely sure the bridge from jabber to

45
00:02:34,170 --> 00:02:42,138
slack is working so please bias towards

46
00:02:36,569 --> 00:02:44,638
jabber agenda bashing our agenda today

47
00:02:42,139 --> 00:02:48,150
we're gonna continue discussion of the

48
00:02:44,639 --> 00:02:50,160
issues I think we're in a place where we

49
00:02:48,150 --> 00:02:57,410
can discuss just the HTTP and recovery

50
00:02:50,160 --> 00:02:57,410
issues today we have Becker interrupts

51
00:02:59,630 --> 00:03:03,780
yeah we have one remaining transport

52
00:03:02,010 --> 00:03:06,660
issue slash pull request that we didn't

53
00:03:03,780 --> 00:03:08,010
process yesterday I heard one remaining

54
00:03:06,660 --> 00:03:10,918
transport issue and then I heard a lot

55
00:03:08,010 --> 00:03:12,239
of ekor huh can you that we didn't part

56
00:03:10,919 --> 00:03:15,989
that we didn't process yesterday which

57
00:03:12,239 --> 00:03:22,709
one pull request three one two oh okay

58
00:03:15,989 --> 00:03:25,380
I start with I wanted Rudy tag : J's I

59
00:03:22,709 --> 00:03:27,599
would it be possible to add in agenda

60
00:03:25,380 --> 00:03:30,720
bash the swapping of datagrams and

61
00:03:27,599 --> 00:03:32,040
version negotiation they do to some

62
00:03:30,720 --> 00:03:35,849
people tried to sneak to a different

63
00:03:32,040 --> 00:03:37,500
meeting well first of all we're not sure

64
00:03:35,849 --> 00:03:38,910
when that's going to start it depends on

65
00:03:37,500 --> 00:03:39,690
when how much the issue discussion

66
00:03:38,910 --> 00:03:41,879
totally understand

67
00:03:39,690 --> 00:03:43,470
and we've already agenda bash yesterday

68
00:03:41,879 --> 00:03:48,250
that getting version negotiation before

69
00:03:43,470 --> 00:03:49,600
the other two was important so Mike

70
00:03:48,250 --> 00:03:51,400
and still remains is there reason not

71
00:03:49,600 --> 00:03:53,470
time fie it was just a question yes you

72
00:03:51,400 --> 00:03:58,620
know any objection to that I think

73
00:03:53,470 --> 00:03:58,620
that'd be fine I think well time okay

74
00:04:04,860 --> 00:04:09,310
any other agenda bash sorry I didn't

75
00:04:07,510 --> 00:04:11,380
even finish the agenda so we had

76
00:04:09,310 --> 00:04:13,420
finished talking about issues including

77
00:04:11,380 --> 00:04:14,890
that talk about extension documents

78
00:04:13,420 --> 00:04:16,479
apparently talk about datagrams first

79
00:04:14,890 --> 00:04:18,640
then verse negotiation then load

80
00:04:16,480 --> 00:04:22,300
balancers we end up with planning any

81
00:04:18,640 --> 00:04:24,159
other agenda bashing Provine sorry yeah

82
00:04:22,300 --> 00:04:26,410
the acoustics in this room are horrific

83
00:04:24,160 --> 00:04:28,740
so everyone needs to speak very close to

84
00:04:26,410 --> 00:04:31,270
the mic and very distinctly praveen

85
00:04:28,740 --> 00:04:33,760
agenda I think like the planning

86
00:04:31,270 --> 00:04:36,159
discussion should be moved up front one

87
00:04:33,760 --> 00:04:38,860
of the discussion with implementers has

88
00:04:36,160 --> 00:04:40,210
been a request for like a quiet period

89
00:04:38,860 --> 00:04:41,950
where we could get some deployment

90
00:04:40,210 --> 00:04:44,799
experience so I think planning moving it

91
00:04:41,950 --> 00:04:51,880
upfront would be very useful any

92
00:04:44,800 --> 00:04:54,250
objection to that okay Jonah if you

93
00:04:51,880 --> 00:05:02,650
could I take a couple of minutes to talk

94
00:04:54,250 --> 00:05:04,900
about the quick intrapreneur as time

95
00:05:02,650 --> 00:05:07,210
permits sorry can we put that at the end

96
00:05:04,900 --> 00:05:19,419
desires time permits that's fine with me

97
00:05:07,210 --> 00:05:20,739
okay okay any other agenda bashing okay

98
00:05:19,419 --> 00:05:27,159
that's probably the most lively agenda

99
00:05:20,740 --> 00:05:32,490
bash we've had ever so let's execute on

100
00:05:27,160 --> 00:05:35,020
that planning we're going to talk about

101
00:05:32,490 --> 00:05:37,720
extensions and other documents later on

102
00:05:35,020 --> 00:05:39,609
today and so Lara's and I and the area

103
00:05:37,720 --> 00:05:41,440
directors have been having a number of

104
00:05:39,610 --> 00:05:44,740
chats about how we're gonna go into the

105
00:05:41,440 --> 00:05:46,450
next phase of this work as as we've

106
00:05:44,740 --> 00:05:50,169
discussed we currently have a co-op for

107
00:05:46,450 --> 00:05:51,640
consensus on getting the recovery and

108
00:05:50,169 --> 00:05:54,280
HTTP documents into the late stage

109
00:05:51,640 --> 00:05:55,900
process we are as you can see winnowing

110
00:05:54,280 --> 00:05:58,539
down the issues lists on all of the

111
00:05:55,900 --> 00:06:00,549
drafts so there are very few left and

112
00:05:58,539 --> 00:06:01,870
the anticipation as we've discussed and

113
00:06:00,550 --> 00:06:04,570
tried to Telegraph number of

114
00:06:01,870 --> 00:06:07,360
times is that the drafts are going to

115
00:06:04,570 --> 00:06:10,840
settle down from a technical standpoint

116
00:06:07,360 --> 00:06:13,210
of the bits on the wire but we will

117
00:06:10,840 --> 00:06:16,479
enter a period where we think we

118
00:06:13,210 --> 00:06:18,700
understand yes mr. chair sue B does I

119
00:06:16,480 --> 00:06:19,870
think it is Winston or Thursday I'm

120
00:06:18,700 --> 00:06:22,680
sorry I can't hear you

121
00:06:19,870 --> 00:06:29,710
today's Winston or Thursday your site

122
00:06:22,680 --> 00:06:40,990
thank you for that if only every issue

123
00:06:29,710 --> 00:06:42,370
were so easy to solve this is what I get

124
00:06:40,990 --> 00:06:51,610
for chairing more than one working group

125
00:06:42,370 --> 00:06:55,240
and reusing slides right so good morning

126
00:06:51,610 --> 00:06:58,000
I will point out I've only had one

127
00:06:55,240 --> 00:07:01,840
coffee this morning and for someone

128
00:06:58,000 --> 00:07:03,520
where I'm from that's not any at all so

129
00:07:01,840 --> 00:07:06,219
we're hoping that the drafts will settle

130
00:07:03,520 --> 00:07:08,710
down from a technical standpoint we also

131
00:07:06,220 --> 00:07:12,100
anticipate the editors taking that time

132
00:07:08,710 --> 00:07:13,150
to do some fairly substantial reworking

133
00:07:12,100 --> 00:07:14,740
of the documents from an editorial

134
00:07:13,150 --> 00:07:16,840
standpoint to make sure they're

135
00:07:14,740 --> 00:07:18,430
communicating clearly not changing the

136
00:07:16,840 --> 00:07:21,250
technical content but changing how it's

137
00:07:18,430 --> 00:07:22,360
presented so that it is readable and and

138
00:07:21,250 --> 00:07:24,610
usable by people who haven't

139
00:07:22,360 --> 00:07:26,920
participated in this process at the same

140
00:07:24,610 --> 00:07:28,270
time we feel that implementers are going

141
00:07:26,920 --> 00:07:29,830
to need some time to digest everything

142
00:07:28,270 --> 00:07:31,960
that's happened to work on their

143
00:07:29,830 --> 00:07:34,240
implementations to do interrupt work and

144
00:07:31,960 --> 00:07:35,770
also to get some deployment experience

145
00:07:34,240 --> 00:07:39,340
that's something that people want to see

146
00:07:35,770 --> 00:07:41,020
very much before we ship the RFC's to

147
00:07:39,340 --> 00:07:44,409
make sure that this thing actually works

148
00:07:41,020 --> 00:07:47,080
in the wild and so the tentative plan

149
00:07:44,410 --> 00:07:48,640
going forward is is that once we get the

150
00:07:47,080 --> 00:07:52,479
documents into a good shape and we close

151
00:07:48,640 --> 00:07:54,520
these issues we'll go to a working group

152
00:07:52,480 --> 00:07:58,000
last call hopefully before the end of

153
00:07:54,520 --> 00:07:59,289
the year and and as a way to notify the

154
00:07:58,000 --> 00:08:01,960
greater community that we think were

155
00:07:59,290 --> 00:08:03,820
technically done however we're not going

156
00:08:01,960 --> 00:08:05,859
to request them to become our FCS for

157
00:08:03,820 --> 00:08:08,200
some time after that and and very

158
00:08:05,860 --> 00:08:09,970
roughly speaking that's something like

159
00:08:08,200 --> 00:08:12,099
the middle of next year because we want

160
00:08:09,970 --> 00:08:14,870
to get that experience give the editors

161
00:08:12,100 --> 00:08:19,940
a chance to work in the documents a bit

162
00:08:14,870 --> 00:08:21,890
to get deployment experience so it may

163
00:08:19,940 --> 00:08:25,120
not be our last working group last call

164
00:08:21,890 --> 00:08:28,400
on these and I know that that that

165
00:08:25,120 --> 00:08:30,920
dissonance is is harsh for some but but

166
00:08:28,400 --> 00:08:36,110
it is a what we think will be our

167
00:08:30,920 --> 00:08:37,970
working group last call because of that

168
00:08:36,110 --> 00:08:39,260
we're gonna have some capacity in the

169
00:08:37,970 --> 00:08:41,600
working group for discussing other

170
00:08:39,260 --> 00:08:44,319
things and so we're talking about how we

171
00:08:41,600 --> 00:08:47,630
can start the discussion of extensions

172
00:08:44,320 --> 00:08:50,120
to quit v1 and whether we start the

173
00:08:47,630 --> 00:08:52,640
discussion of any potential quick v2 and

174
00:08:50,120 --> 00:08:55,160
also discussion of new application

175
00:08:52,640 --> 00:08:56,960
bindings to quick and in discussion

176
00:08:55,160 --> 00:09:00,410
amongst the chairs and the area

177
00:08:56,960 --> 00:09:02,450
directors we think that the best

178
00:09:00,410 --> 00:09:05,449
approach is for this working group to

179
00:09:02,450 --> 00:09:07,580
start discussing extensions in a limited

180
00:09:05,450 --> 00:09:09,470
way we don't want to have a flood of

181
00:09:07,580 --> 00:09:12,290
them come at us all at once but to start

182
00:09:09,470 --> 00:09:13,550
a few discussions and and and and that's

183
00:09:12,290 --> 00:09:14,630
why we're starting to have things like

184
00:09:13,550 --> 00:09:17,900
discussion of load balancers and

185
00:09:14,630 --> 00:09:20,740
datagrams verse negotiation is is is the

186
00:09:17,900 --> 00:09:22,760
third one I want to talk about there and

187
00:09:20,740 --> 00:09:23,990
at the same time you know there are

188
00:09:22,760 --> 00:09:26,510
other folks who want to do new

189
00:09:23,990 --> 00:09:28,520
applications on top of quick and and our

190
00:09:26,510 --> 00:09:30,740
bias is to not do those in this working

191
00:09:28,520 --> 00:09:32,720
group but instead to talk about new

192
00:09:30,740 --> 00:09:35,330
venues for those or reusing existing

193
00:09:32,720 --> 00:09:37,640
venues so for example there's AB off I

194
00:09:35,330 --> 00:09:40,070
think later today about web transport

195
00:09:37,640 --> 00:09:42,530
and that's a potentially working group

196
00:09:40,070 --> 00:09:45,440
forming buff I believe no not quite yet

197
00:09:42,530 --> 00:09:48,079
but one may appear afterwards at some

198
00:09:45,440 --> 00:09:50,600
point and but but we wouldn't want to do

199
00:09:48,080 --> 00:09:53,600
that work in this working group for is

200
00:09:50,600 --> 00:09:56,960
the important thing to convey so I think

201
00:09:53,600 --> 00:09:59,660
that's where we're at we have an interim

202
00:09:56,960 --> 00:10:02,900
scheduled in Zurich the anticipation is

203
00:09:59,660 --> 00:10:04,699
is that there's an intervention or

204
00:10:02,900 --> 00:10:07,010
experience hopefully on those working

205
00:10:04,700 --> 00:10:08,270
group last call documents we'll have

206
00:10:07,010 --> 00:10:10,370
some discussion of any remaining issues

207
00:10:08,270 --> 00:10:13,610
that we need to but we'll also have some

208
00:10:10,370 --> 00:10:16,580
time to talk about these extensions any

209
00:10:13,610 --> 00:10:19,760
any discussion of this Christian yeah I

210
00:10:16,580 --> 00:10:22,150
mean I like the idea of stabilizing the

211
00:10:19,760 --> 00:10:26,140
protocol before publishing the RFC and

212
00:10:22,150 --> 00:10:28,110
having some time to test and verify

213
00:10:26,140 --> 00:10:32,100
however

214
00:10:28,110 --> 00:10:33,900
if you delay pushing the document for

215
00:10:32,100 --> 00:10:38,010
publication at the same time you're also

216
00:10:33,900 --> 00:10:42,600
pushing the IDF review pushing the idea

217
00:10:38,010 --> 00:10:46,040
of review yes I mean that so basically

218
00:10:42,600 --> 00:10:49,770
if you're not doing the ietf last call

219
00:10:46,040 --> 00:10:51,660
you are not getting the feedback from

220
00:10:49,770 --> 00:10:55,020
people who are actually in the working

221
00:10:51,660 --> 00:10:58,020
group and so that creates an uncertainty

222
00:10:55,020 --> 00:11:00,600
about the duration of its own ITF last

223
00:10:58,020 --> 00:11:02,970
call later on and I'm a bit concerned

224
00:11:00,600 --> 00:11:06,780
about that and I'd like to find a way to

225
00:11:02,970 --> 00:11:08,520
mitigate that okay I think that's a

226
00:11:06,780 --> 00:11:09,630
reasonable concern to have I'd be

227
00:11:08,520 --> 00:11:15,180
interested hear what other people think

228
00:11:09,630 --> 00:11:18,360
about it pravin I do like the idea of

229
00:11:15,180 --> 00:11:20,550
going to a sort of semi-formal working

230
00:11:18,360 --> 00:11:22,830
group last call so I think that's a good

231
00:11:20,550 --> 00:11:25,410
idea what I would like is something more

232
00:11:22,830 --> 00:11:26,910
concrete in terms of a draft number that

233
00:11:25,410 --> 00:11:28,140
we are targeting to close of the

234
00:11:26,910 --> 00:11:29,969
remaining issues such that

235
00:11:28,140 --> 00:11:31,380
implementations can deploy and stabilize

236
00:11:29,970 --> 00:11:32,910
on it I think working group coming out

237
00:11:31,380 --> 00:11:35,610
and saying something formal would be

238
00:11:32,910 --> 00:11:37,260
useful instead of having a vague date

239
00:11:35,610 --> 00:11:39,150
waste deadline like target a particular

240
00:11:37,260 --> 00:11:40,590
draft where we say hey we're gonna

241
00:11:39,150 --> 00:11:42,060
freeze this for a little while so that

242
00:11:40,590 --> 00:11:46,230
people can deploy I think that would be

243
00:11:42,060 --> 00:11:47,579
very very useful and regarding IETF

244
00:11:46,230 --> 00:11:48,780
process I think that can go on in

245
00:11:47,580 --> 00:11:50,760
parallel like if you find any major

246
00:11:48,780 --> 00:11:53,310
issues from deployment we can come back

247
00:11:50,760 --> 00:11:55,110
and like fix those but I think like

248
00:11:53,310 --> 00:11:58,369
having a very stable draft formally

249
00:11:55,110 --> 00:11:58,370
declared would be very very useful

250
00:11:59,690 --> 00:12:05,040
the saman Thompson I think based on the

251
00:12:03,060 --> 00:12:06,869
issue list that we have in front of us

252
00:12:05,040 --> 00:12:09,689
and the discussion that we had here

253
00:12:06,870 --> 00:12:10,980
earlier this week the next version of

254
00:12:09,690 --> 00:12:14,370
the draft might be that one that

255
00:12:10,980 --> 00:12:16,230
prevents looking for I'm not 100%

256
00:12:14,370 --> 00:12:18,570
confident about that but I think we

257
00:12:16,230 --> 00:12:21,260
should certainly try to make that the

258
00:12:18,570 --> 00:12:25,260
case we have a long time between now and

259
00:12:21,260 --> 00:12:26,640
the interim meeting and I think the

260
00:12:25,260 --> 00:12:29,520
editors are pretty firmly committed to

261
00:12:26,640 --> 00:12:30,870
nailing all of those issues most of them

262
00:12:29,520 --> 00:12:32,939
have pull requests against them already

263
00:12:30,870 --> 00:12:35,310
so I think we're we're in pretty good

264
00:12:32,940 --> 00:12:37,920
shape for that one as for Christians

265
00:12:35,310 --> 00:12:41,939
concern I think we have a fairly simple

266
00:12:37,920 --> 00:12:44,429
answer to that one the ITF review is

267
00:12:41,939 --> 00:12:49,379
largely based on Directorate reviewing

268
00:12:44,429 --> 00:12:52,108
in the modern day and so simply going to

269
00:12:49,379 --> 00:12:54,720
each of the directorates now and asking

270
00:12:52,109 --> 00:12:56,429
for review which is a practice that most

271
00:12:54,720 --> 00:12:59,999
of the directorates already support for

272
00:12:56,429 --> 00:13:04,019
various things is sufficient and will

273
00:12:59,999 --> 00:13:05,759
get us some wider review and I would I

274
00:13:04,019 --> 00:13:08,249
would say that the the steps that I

275
00:13:05,759 --> 00:13:10,979
would like to see happen we finish the

276
00:13:08,249 --> 00:13:14,039
next draft we do a working group last

277
00:13:10,979 --> 00:13:16,649
call on that and then after that

278
00:13:14,039 --> 00:13:18,419
finishes the chairs talk to the various

279
00:13:16,649 --> 00:13:20,639
directorates and ask for those reviews

280
00:13:18,419 --> 00:13:23,459
to happen and that will happen during

281
00:13:20,639 --> 00:13:26,129
our idle period and we can deal with the

282
00:13:23,459 --> 00:13:27,839
issues as they come in but I suspect

283
00:13:26,129 --> 00:13:31,709
what's going to happen there is that we

284
00:13:27,839 --> 00:13:33,299
will have 25 and then a 26 will contain

285
00:13:31,709 --> 00:13:36,169
a whole bunch of editorial changes based

286
00:13:33,299 --> 00:13:39,629
on review and working good last call and

287
00:13:36,169 --> 00:13:42,389
feedback and 27 will be Directorate

288
00:13:39,629 --> 00:13:44,699
feedback and then we'll sit on that but

289
00:13:42,389 --> 00:13:46,109
25 and 27 should be functionally

290
00:13:44,699 --> 00:13:47,758
identical if we're if we're changing

291
00:13:46,109 --> 00:13:50,369
something there then that's a pretty

292
00:13:47,759 --> 00:13:52,409
high-energy event that's maybe

293
00:13:50,369 --> 00:13:53,699
optimistic but that's the that's the

294
00:13:52,409 --> 00:14:01,379
sort of thing that I would like to see

295
00:13:53,699 --> 00:14:03,449
happen yeah but I mean at the same time

296
00:14:01,379 --> 00:14:06,049
you cannot expect to have review for a

297
00:14:03,449 --> 00:14:09,118
bunch of directorates and change nothing

298
00:14:06,049 --> 00:14:10,649
so it may will be that there is some

299
00:14:09,119 --> 00:14:14,639
substantial change when you don't know

300
00:14:10,649 --> 00:14:16,409
that sorry Brian before you speak can

301
00:14:14,639 --> 00:14:22,199
you raise the microphone I think it

302
00:14:16,409 --> 00:14:24,329
would benefit everyone thank you hi

303
00:14:22,199 --> 00:14:26,459
Brian Trammell yeah I basically came up

304
00:14:24,329 --> 00:14:28,049
here to see what Martin said I'll expand

305
00:14:26,459 --> 00:14:30,118
on that very slightly there's even a

306
00:14:28,049 --> 00:14:32,608
button in the data tracker no I think to

307
00:14:30,119 --> 00:14:33,929
request director review review from a

308
00:14:32,609 --> 00:14:35,959
director up on a certain thing there is

309
00:14:33,929 --> 00:14:39,598
yeah so I mean you just click the button

310
00:14:35,959 --> 00:14:41,309
if there's further like I think that

311
00:14:39,599 --> 00:14:42,839
gets us exactly what we want if there is

312
00:14:41,309 --> 00:14:44,399
further lake-like

313
00:14:42,839 --> 00:14:47,220
discomfort that maybe the entire

314
00:14:44,399 --> 00:14:48,569
community like if there are there are

315
00:14:47,220 --> 00:14:50,129
like whole areas that aren't in this

316
00:14:48,569 --> 00:14:51,779
room so like maybe there are people only

317
00:14:50,129 --> 00:14:54,869
won't write a review I know that we do

318
00:14:51,779 --> 00:14:55,200
not generally use IETF at IETF dot org

319
00:14:54,869 --> 00:14:56,400
for

320
00:14:55,200 --> 00:14:57,690
Nicolle discussion but there is a

321
00:14:56,400 --> 00:15:00,540
mailing list that we can say hi by the

322
00:14:57,690 --> 00:15:04,080
way you know maybe you've heard we're

323
00:15:00,540 --> 00:15:06,719
like replacing TCP with TCP - um sorry

324
00:15:04,080 --> 00:15:08,940
yeah yeah it's like last call coming up

325
00:15:06,720 --> 00:15:10,320
great like so last call preview can we

326
00:15:08,940 --> 00:15:11,940
actually send that to last call at IETF

327
00:15:10,320 --> 00:15:15,000
that org I mean we can also send it to

328
00:15:11,940 --> 00:15:16,440
ya I mean yes it's like almost last call

329
00:15:15,000 --> 00:15:18,120
that's like you know preview of last

330
00:15:16,440 --> 00:15:21,060
call please start reading the document

331
00:15:18,120 --> 00:15:23,010
now it's big and important yeah so I

332
00:15:21,060 --> 00:15:24,540
mean like we have we have like I think

333
00:15:23,010 --> 00:15:27,840
we have a lot of options here to

334
00:15:24,540 --> 00:15:29,310
pipeline this and I think what like what

335
00:15:27,840 --> 00:15:30,570
I'm hearing is that everyone here is

336
00:15:29,310 --> 00:15:33,050
interested in pipelining it and I think

337
00:15:30,570 --> 00:15:35,580
that's a good idea

338
00:15:33,050 --> 00:15:36,839
hi this is Sean Turner just driving the

339
00:15:35,580 --> 00:15:38,880
point home we've kind of had some

340
00:15:36,840 --> 00:15:40,740
running code we did with TLS 1.3 I don't

341
00:15:38,880 --> 00:15:43,590
know that we did it perfectly but you

342
00:15:40,740 --> 00:15:45,810
can tell the ADEs the ADEs talk you can

343
00:15:43,590 --> 00:15:47,550
request the early reviews you can send

344
00:15:45,810 --> 00:15:49,770
the messages to everybody you can

345
00:15:47,550 --> 00:15:50,160
Twitter it you can be like look this is

346
00:15:49,770 --> 00:15:51,810
coming

347
00:15:50,160 --> 00:15:53,550
if you want your chance here's the

348
00:15:51,810 --> 00:15:54,900
github repo knock yourself out

349
00:15:53,550 --> 00:15:57,420
I mean there are ways that we can do

350
00:15:54,900 --> 00:15:59,430
this I do not think we should try to get

351
00:15:57,420 --> 00:16:00,689
it top try to let the arts you go early

352
00:15:59,430 --> 00:16:01,979
because we're gonna end up changing it

353
00:16:00,690 --> 00:16:05,010
anyway so we know that right there's

354
00:16:01,980 --> 00:16:06,840
like an N DSS conference in January so

355
00:16:05,010 --> 00:16:10,460
like stuff can pop up so my theory is

356
00:16:06,840 --> 00:16:10,460
just do your plan

357
00:16:11,670 --> 00:16:15,120
where's - what Sean said do you know -

358
00:16:13,560 --> 00:16:16,469
do other things and people will still

359
00:16:15,120 --> 00:16:21,240
show up at the last minute so you don't

360
00:16:16,470 --> 00:16:24,060
like it the I think that running code as

361
00:16:21,240 --> 00:16:27,000
well I think this generally seems like a

362
00:16:24,060 --> 00:16:28,109
solid plan um the I'm probably the

363
00:16:27,000 --> 00:16:29,490
person who thinks that calling it last

364
00:16:28,110 --> 00:16:33,530
call when we know it's like not the last

365
00:16:29,490 --> 00:16:38,760
call is pretty silly um but you know

366
00:16:33,530 --> 00:16:40,589
what it's not a bike shed thanks David

367
00:16:38,760 --> 00:16:42,630
um and the reasons that a bike shed is

368
00:16:40,590 --> 00:16:44,550
that often there's a presumption we do

369
00:16:42,630 --> 00:16:46,350
or last call that if issues not raised

370
00:16:44,550 --> 00:16:48,569
in the last call then they're out of

371
00:16:46,350 --> 00:16:52,560
order when they're raised later and um

372
00:16:48,570 --> 00:16:54,870
and so on the I think praveen's entirely

373
00:16:52,560 --> 00:16:56,040
right that it's good to have a last call

374
00:16:54,870 --> 00:16:57,780
let's try to flush out as many of these

375
00:16:56,040 --> 00:17:00,180
as we can and like they'll spend

376
00:16:57,780 --> 00:17:01,620
sometime sometime you know doing um you

377
00:17:00,180 --> 00:17:03,239
know doing testing and doing some errant

378
00:17:01,620 --> 00:17:04,530
ation and that will know that turn up

379
00:17:03,240 --> 00:17:06,220
some things about the change and those

380
00:17:04,530 --> 00:17:08,470
issues will obviously be in order but

381
00:17:06,220 --> 00:17:09,850
what also needs to be an order is upon

382
00:17:08,470 --> 00:17:11,260
reflection having looked at this longer

383
00:17:09,849 --> 00:17:12,669
not from data but from looking this

384
00:17:11,260 --> 00:17:14,020
longer there are things which are not

385
00:17:12,670 --> 00:17:15,760
good we can start changing them

386
00:17:14,020 --> 00:17:17,050
my point is those are still in order at

387
00:17:15,760 --> 00:17:17,920
that point in the process where they

388
00:17:17,050 --> 00:17:20,079
would not be in order

389
00:17:17,920 --> 00:17:21,190
ordinarily if like you were sitting

390
00:17:20,079 --> 00:17:23,079
there working group for two years with

391
00:17:21,190 --> 00:17:24,250
the last call and like you aged it like

392
00:17:23,079 --> 00:17:26,199
it ITF I was called people think you

393
00:17:24,250 --> 00:17:27,339
were a jerk and so I'm just that dust

394
00:17:26,200 --> 00:17:28,600
but that's the reason that's the reason

395
00:17:27,339 --> 00:17:36,550
you're hearing resistance from the last

396
00:17:28,600 --> 00:17:38,320
call david's Kazi google just want to

397
00:17:36,550 --> 00:17:40,480
quickly say this is a good plan i like

398
00:17:38,320 --> 00:17:43,600
it especially from our implementation

399
00:17:40,480 --> 00:17:45,580
side of things it the past couple years

400
00:17:43,600 --> 00:17:47,409
have really felt like running after a

401
00:17:45,580 --> 00:17:49,570
moving target because we're like we have

402
00:17:47,410 --> 00:17:51,340
quick oh they changed the header format

403
00:17:49,570 --> 00:17:54,010
all right run change that oh they change

404
00:17:51,340 --> 00:17:56,709
this and it's we're almost there now

405
00:17:54,010 --> 00:17:58,990
and so this quiet period is gonna allow

406
00:17:56,710 --> 00:18:02,320
us to actually catch the target and

407
00:17:58,990 --> 00:18:03,520
actually put it in production and get

408
00:18:02,320 --> 00:18:05,139
numbers that we'll share with the group

409
00:18:03,520 --> 00:18:07,800
so I think this is a great button

410
00:18:05,140 --> 00:18:07,800
that'll be great

411
00:18:08,220 --> 00:18:13,420
Jenna and got a clarification question

412
00:18:10,860 --> 00:18:15,310
I'll be talking about last call for all

413
00:18:13,420 --> 00:18:17,680
the documents I would talk about some of

414
00:18:15,310 --> 00:18:19,000
them but once again you're reading my

415
00:18:17,680 --> 00:18:22,480
mind I was going to bring up when you

416
00:18:19,000 --> 00:18:24,160
when the cue drained I in place it in

417
00:18:22,480 --> 00:18:26,200
these discussions I think that

418
00:18:24,160 --> 00:18:27,880
everyone's assuming I I think but I want

419
00:18:26,200 --> 00:18:29,440
to confirm is that we're gonna do all

420
00:18:27,880 --> 00:18:36,220
four documents at the same time I really

421
00:18:29,440 --> 00:18:38,230
all five documents at the same time I do

422
00:18:36,220 --> 00:18:41,860
you dispute that I think that's all

423
00:18:38,230 --> 00:18:44,110
right okay I just want to I just want to

424
00:18:41,860 --> 00:18:45,490
point out that we've not yet moved it

425
00:18:44,110 --> 00:18:47,620
just in terms of process we've not even

426
00:18:45,490 --> 00:18:51,310
move those ones HTP and recovery

427
00:18:47,620 --> 00:18:53,979
documents to the late-stage process but

428
00:18:51,310 --> 00:18:55,000
sure and and and that's something we're

429
00:18:53,980 --> 00:18:56,320
gonna talk about briefly today but

430
00:18:55,000 --> 00:18:59,410
there's already a call for consensus up

431
00:18:56,320 --> 00:19:01,179
for that and of course that that's an

432
00:18:59,410 --> 00:19:04,450
internal process it's an external facing

433
00:19:01,180 --> 00:19:05,680
process so the other documents we

434
00:19:04,450 --> 00:19:08,170
haven't talked about very much at all or

435
00:19:05,680 --> 00:19:09,250
the ops and management documents we do

436
00:19:08,170 --> 00:19:11,500
need to start talking about those more

437
00:19:09,250 --> 00:19:13,210
yeah so mutton told some was going to

438
00:19:11,500 --> 00:19:15,070
talk about those two specifically this

439
00:19:13,210 --> 00:19:17,290
quiet period will allow them to catch up

440
00:19:15,070 --> 00:19:19,080
as well because there's like like those

441
00:19:17,290 --> 00:19:21,330
people implementing

442
00:19:19,080 --> 00:19:23,010
chasing the moving target has been

443
00:19:21,330 --> 00:19:24,809
difficult for those documents and I

444
00:19:23,010 --> 00:19:27,270
think it's probably a good idea to to

445
00:19:24,809 --> 00:19:29,460
allow that to sell it might be then that

446
00:19:27,270 --> 00:19:31,168
we can publish all seven documents at

447
00:19:29,460 --> 00:19:38,580
the same time which would be a really

448
00:19:31,169 --> 00:19:42,330
nice thing to be able to do so we all

449
00:19:38,580 --> 00:19:45,449
understand the plan the plan will meet

450
00:19:42,330 --> 00:19:48,779
battle and we'll have some fun yes

451
00:19:45,450 --> 00:19:49,890
planning is important one of the

452
00:19:48,779 --> 00:19:51,600
important takeaways that people should

453
00:19:49,890 --> 00:19:54,149
have here is is that if you do think you

454
00:19:51,600 --> 00:19:56,158
have an extension that's generic not

455
00:19:54,149 --> 00:20:00,479
specific to an application you'd like to

456
00:19:56,159 --> 00:20:01,279
propose for quick write a draft bring to

457
00:20:00,480 --> 00:20:04,559
our attention

458
00:20:01,279 --> 00:20:06,659
we'll reserve time for it if it sees

459
00:20:04,559 --> 00:20:08,070
some discussion on the list we'll think

460
00:20:06,659 --> 00:20:09,929
about whether we want to adopt it and

461
00:20:08,070 --> 00:20:12,928
then we're going to start that mechanism

462
00:20:09,929 --> 00:20:15,450
going but this working group will we

463
00:20:12,929 --> 00:20:18,059
think be the locus of that and one thing

464
00:20:15,450 --> 00:20:20,190
I should mention I'll put a meal email

465
00:20:18,059 --> 00:20:22,350
on the list shortly if we do do that and

466
00:20:20,190 --> 00:20:23,760
I think this is from talking the area

467
00:20:22,350 --> 00:20:25,199
directors the direction we want to go in

468
00:20:23,760 --> 00:20:27,840
we're going to need to make a charter

469
00:20:25,200 --> 00:20:30,360
change our charter currently says thou

470
00:20:27,840 --> 00:20:30,959
shalt not work on a datagram extension

471
00:20:30,360 --> 00:20:33,928
woops

472
00:20:30,960 --> 00:20:36,120
so we need a slight chart okay that's

473
00:20:33,929 --> 00:20:38,700
not them that's me

474
00:20:36,120 --> 00:20:40,500
we'll need a slight Charter change to

475
00:20:38,700 --> 00:20:43,020
enable us to work on on those extensions

476
00:20:40,500 --> 00:20:44,279
we'll put a proposal out for comment the

477
00:20:43,020 --> 00:20:45,779
area directors will change the Charter

478
00:20:44,279 --> 00:20:48,450
do that do whatever they need to do and

479
00:20:45,779 --> 00:20:49,679
we'll move forward there are other parts

480
00:20:48,450 --> 00:20:50,820
of the Charter we can change but we're

481
00:20:49,679 --> 00:20:55,649
not gonna think we're gonna try and do

482
00:20:50,820 --> 00:21:00,629
that quite yet so let's talk about

483
00:20:55,649 --> 00:21:02,789
issues occur you said there was one

484
00:21:00,630 --> 00:21:04,799
remaining issue from Transport what if

485
00:21:02,789 --> 00:21:08,190
she never was that um I can talk to that

486
00:21:04,799 --> 00:21:12,770
one okay so as the author of the PR for

487
00:21:08,190 --> 00:21:13,919
it so the sorry what's the issue number

488
00:21:12,770 --> 00:21:17,360
sorry

489
00:21:13,919 --> 00:21:17,360
Iker says thirty one twenty

490
00:21:22,769 --> 00:21:35,169
okay alright so this is the PR and I

491
00:21:25,929 --> 00:21:39,309
guess the issue is thirty fourteen okay

492
00:21:35,169 --> 00:21:42,159
so let me summarize this so first thanks

493
00:21:39,309 --> 00:21:46,539
Kazuo for finding this issue in short

494
00:21:42,159 --> 00:21:49,059
most packets in quick are encrypted and

495
00:21:46,539 --> 00:21:52,899
in particular their integrity protected

496
00:21:49,059 --> 00:21:54,549
and what this kind of a slight side

497
00:21:52,899 --> 00:21:56,408
effect so the crypto but what it also

498
00:21:54,549 --> 00:21:58,510
means is that if you get a random bit

499
00:21:56,409 --> 00:22:00,070
flip on the network it's the same as an

500
00:21:58,510 --> 00:22:03,970
attack but we detect it and we drop the

501
00:22:00,070 --> 00:22:06,730
packet one exception though is retry

502
00:22:03,970 --> 00:22:11,380
packets those on Mike initial don't have

503
00:22:06,730 --> 00:22:14,110
any kind of protection and if the retry

504
00:22:11,380 --> 00:22:16,570
token gets a bit flip on it we don't

505
00:22:14,110 --> 00:22:21,928
notice especially if the UDP checksum is

506
00:22:16,570 --> 00:22:25,570
disabled that's particularly bad if that

507
00:22:21,929 --> 00:22:29,380
because if the retry token is invalid

508
00:22:25,570 --> 00:22:31,059
the server will reply with a second

509
00:22:29,380 --> 00:22:33,490
retry and according to the spec the

510
00:22:31,059 --> 00:22:35,230
client must not like do that dance the

511
00:22:33,490 --> 00:22:38,860
second time so then the connection is

512
00:22:35,230 --> 00:22:42,090
dead in the water so the quick and

513
00:22:38,860 --> 00:22:47,080
simple fix that we agreed to in

514
00:22:42,090 --> 00:22:49,750
cupertino was to add an integrity tag at

515
00:22:47,080 --> 00:22:51,699
the end so if there's any kind of error

516
00:22:49,750 --> 00:22:58,169
on that we detected and we drop the

517
00:22:51,700 --> 00:23:01,710
packet then if you switch over to my PR

518
00:22:58,169 --> 00:23:06,760
the proposal is to do exactly that

519
00:23:01,710 --> 00:23:09,130
it also has a slight thing where it uses

520
00:23:06,760 --> 00:23:12,580
a pseudo header similar to how TCP

521
00:23:09,130 --> 00:23:14,500
computes its checksum so that some

522
00:23:12,580 --> 00:23:16,480
fields don't need to be sent over the

523
00:23:14,500 --> 00:23:18,820
wire anymore they're just added as part

524
00:23:16,480 --> 00:23:21,909
of the checksum and in particular the

525
00:23:18,820 --> 00:23:25,870
original destination connection ID and

526
00:23:21,909 --> 00:23:27,490
that's really all there is to it that a1

527
00:23:25,870 --> 00:23:31,149
one more last point was we were

528
00:23:27,490 --> 00:23:34,539
wondering what hash algorithm or slash

529
00:23:31,149 --> 00:23:35,820
checksum to use here and in order to not

530
00:23:34,539 --> 00:23:38,400
add any dependency

531
00:23:35,820 --> 00:23:40,770
on the protocol we decided to use GMAC

532
00:23:38,400 --> 00:23:43,410
cuz everyone already has an Aes GCM

533
00:23:40,770 --> 00:23:44,220
implementation for initial packets so

534
00:23:43,410 --> 00:23:48,750
yep

535
00:23:44,220 --> 00:23:54,200
right there perfect we just reuse a a

536
00:23:48,750 --> 00:23:57,030
das GCM 128 the key was initially zero

537
00:23:54,200 --> 00:23:58,590
but I could rightfully pointed out that

538
00:23:57,030 --> 00:24:00,780
it might be nicer to have one that

539
00:23:58,590 --> 00:24:02,639
changes and then a Martin Thompson had

540
00:24:00,780 --> 00:24:07,020
the good idea to just reuse the initial

541
00:24:02,640 --> 00:24:12,810
salt from okay well then get in line to

542
00:24:07,020 --> 00:24:14,639
say that and so we use that key so that

543
00:24:12,810 --> 00:24:16,740
way it's the same for all the time the

544
00:24:14,640 --> 00:24:18,660
nonce is just zero there's no plain Tex

545
00:24:16,740 --> 00:24:20,220
and this gives us and the associate data

546
00:24:18,660 --> 00:24:22,950
is this entire pseudo header and that

547
00:24:20,220 --> 00:24:28,680
gives us a checksum and that really

548
00:24:22,950 --> 00:24:30,000
authoress to it right so um I guess two

549
00:24:28,680 --> 00:24:32,370
points plus listed there for the first

550
00:24:30,000 --> 00:24:33,600
point first on quick graphically which I

551
00:24:32,370 --> 00:24:35,159
mean I know this is a fine point we

552
00:24:33,600 --> 00:24:36,750
shouldn't use the initial assault as the

553
00:24:35,160 --> 00:24:37,590
key we should take the right we should

554
00:24:36,750 --> 00:24:39,870
Katie has something off the initial

555
00:24:37,590 --> 00:24:42,990
assault I understand like this is not

556
00:24:39,870 --> 00:24:44,969
like like I'm going hands vigorously

557
00:24:42,990 --> 00:24:46,800
about like how is it really secure

558
00:24:44,970 --> 00:24:49,680
anyway but um nevertheless a good

559
00:24:46,800 --> 00:24:51,750
practice on the more substantive a

560
00:24:49,680 --> 00:24:54,900
acetal nodding so that's fine that's it

561
00:24:51,750 --> 00:25:00,060
cause it it's a constant any case on the

562
00:24:54,900 --> 00:25:02,550
on the issue that I think that Dave and

563
00:25:00,060 --> 00:25:03,720
I were forth on is whether any of this

564
00:25:02,550 --> 00:25:05,280
material should be encrypted in

565
00:25:03,720 --> 00:25:12,420
particular the retried token be

566
00:25:05,280 --> 00:25:14,310
encrypted and so as I I think I think my

567
00:25:12,420 --> 00:25:16,440
claim is that encrypting it has the nice

568
00:25:14,310 --> 00:25:17,669
property that like two centuries there

569
00:25:16,440 --> 00:25:19,590
is any structure each I took in France

570
00:25:17,670 --> 00:25:21,390
ossification um Martin's

571
00:25:19,590 --> 00:25:24,510
counter-argument I believe is that

572
00:25:21,390 --> 00:25:25,530
recall was that on wait what so I think

573
00:25:24,510 --> 00:25:26,850
they're two arguments while you might

574
00:25:25,530 --> 00:25:28,590
want there's one or why you might not

575
00:25:26,850 --> 00:25:30,810
want to do it which is it costs the cost

576
00:25:28,590 --> 00:25:31,860
in AES or operation or two for the GCM

577
00:25:30,810 --> 00:25:36,240
computation further for the AAS

578
00:25:31,860 --> 00:25:38,790
computation on the the martin counters i

579
00:25:36,240 --> 00:25:40,700
believe with this will be a fixed fixed

580
00:25:38,790 --> 00:25:43,230
mask so you can just X or the fixed mask

581
00:25:40,700 --> 00:25:44,190
which and so this is there's no

582
00:25:43,230 --> 00:25:48,270
performance there's no performance

583
00:25:44,190 --> 00:25:49,710
consequence really the I have two ways

584
00:25:48,270 --> 00:25:51,360
there are two the most

585
00:25:49,710 --> 00:25:52,679
there's some benefit um um because it

586
00:25:51,360 --> 00:25:54,240
means it means it's quite a bit more

587
00:25:52,679 --> 00:25:56,490
work for like for someone doesn't in the

588
00:25:54,240 --> 00:26:00,450
draft to see the structure of data on

589
00:25:56,490 --> 00:26:01,770
the on because all you're getting

590
00:26:00,450 --> 00:26:05,250
because you're getting X or something

591
00:26:01,770 --> 00:26:07,620
unknown on now I where I was going to

592
00:26:05,250 --> 00:26:11,130
say is um there's actually two ways you

593
00:26:07,620 --> 00:26:12,239
go here one way it all three ways one

594
00:26:11,130 --> 00:26:14,669
way is the current thing we recycle it

595
00:26:12,240 --> 00:26:16,440
at all the second way is the fixed AES

596
00:26:14,669 --> 00:26:18,210
key with a fixed mask which turns into

597
00:26:16,440 --> 00:26:19,529
fixed masks so you can on which has

598
00:26:18,210 --> 00:26:21,360
additional advantage by the way that it

599
00:26:19,529 --> 00:26:22,559
means you don't like redo it means you

600
00:26:21,360 --> 00:26:23,610
can use exactly the same computations

601
00:26:22,559 --> 00:26:26,970
you ordinarily would do for backup

602
00:26:23,610 --> 00:26:30,570
reduction on the on one more thing

603
00:26:26,970 --> 00:26:32,390
that's worth adding is that if you were

604
00:26:30,570 --> 00:26:34,770
willing to accept the AES operation um

605
00:26:32,390 --> 00:26:35,460
then you could use either disconnection

606
00:26:34,770 --> 00:26:36,480
IDs the nonce

607
00:26:35,460 --> 00:26:40,799
I mean you would not have a face mask

608
00:26:36,480 --> 00:26:43,020
anymore sorry you could use either of

609
00:26:40,799 --> 00:26:44,908
these connection IDs as a nonce and then

610
00:26:43,020 --> 00:26:46,950
you would not have on you'll not have

611
00:26:44,909 --> 00:26:50,149
the fixed on computation but you also

612
00:26:46,950 --> 00:26:50,149
have a better off occasion offense

613
00:26:50,210 --> 00:26:59,669
so it's can Aussie Google a lot of these

614
00:26:55,830 --> 00:27:02,039
I get that you have really good

615
00:26:59,669 --> 00:27:04,320
instincts about cryptography and that QE

616
00:27:02,039 --> 00:27:06,690
use is bad and a big red flag that

617
00:27:04,320 --> 00:27:08,629
should just make your knee twitch but

618
00:27:06,690 --> 00:27:11,419
when the key is public in the spec

619
00:27:08,630 --> 00:27:15,299
implications are a lot less interesting

620
00:27:11,419 --> 00:27:17,899
and therefore like this really becomes a

621
00:27:15,299 --> 00:27:21,389
beauty contest I in my personal opinion

622
00:27:17,899 --> 00:27:23,330
the thing you're trying to encrypt is

623
00:27:21,390 --> 00:27:26,700
the retry token which the server

624
00:27:23,330 --> 00:27:31,529
encrypts with an actual key that is not

625
00:27:26,700 --> 00:27:33,270
public so maybe we just need to say that

626
00:27:31,529 --> 00:27:37,110
the shark of structure should not be

627
00:27:33,270 --> 00:27:40,320
visible we already say that the retry

628
00:27:37,110 --> 00:27:45,539
token must be distinguishable from a new

629
00:27:40,320 --> 00:27:48,809
token for example the there are we could

630
00:27:45,539 --> 00:27:51,120
have built this similar to initial

631
00:27:48,809 --> 00:27:53,820
meaning that you do in HK DF based on

632
00:27:51,120 --> 00:27:56,149
the connection IDs and that's is better

633
00:27:53,820 --> 00:28:00,450
for ossification

634
00:27:56,149 --> 00:28:02,639
Nick banks was scared of that because he

635
00:28:00,450 --> 00:28:03,419
thinks that we'll have really bad

636
00:28:02,639 --> 00:28:07,039
performance

637
00:28:03,419 --> 00:28:10,919
Beck's on his box that sends the retry

638
00:28:07,039 --> 00:28:13,109
as Google I don't think we care much but

639
00:28:10,919 --> 00:28:17,219
that's a reasonable thing at the end of

640
00:28:13,109 --> 00:28:18,599
the day ossification of Paulo bites that

641
00:28:17,219 --> 00:28:21,599
are already encrypted is not something I

642
00:28:18,599 --> 00:28:24,089
worry about so from my perspective this

643
00:28:21,599 --> 00:28:25,918
is a bike shed we really need the token

644
00:28:24,089 --> 00:28:28,379
sorry we really need the integrators

645
00:28:25,919 --> 00:28:29,759
check at the end but what we use for the

646
00:28:28,379 --> 00:28:31,708
key and if we put the token is a

647
00:28:29,759 --> 00:28:33,389
complete bike shed I'm totally in favor

648
00:28:31,709 --> 00:28:38,909
of flipping a coin and being done with

649
00:28:33,389 --> 00:28:40,949
this and I'm gonna cut the queue Praveen

650
00:28:38,909 --> 00:28:44,190
I just had a clarification question so

651
00:28:40,950 --> 00:28:45,779
UDP checksum is only man optional for

652
00:28:44,190 --> 00:28:47,909
ipv4 because it's protected by the

653
00:28:45,779 --> 00:28:50,249
activity for checksum on ipv6 it's

654
00:28:47,909 --> 00:28:51,899
mandatory so my question was are we

655
00:28:50,249 --> 00:28:53,909
trying to get protection for the packet

656
00:28:51,899 --> 00:28:55,289
beyond what is provided by the IP or UDP

657
00:28:53,909 --> 00:29:00,450
checksum here I'm just trying to

658
00:28:55,289 --> 00:29:03,599
understand why we need to do this there

659
00:29:00,450 --> 00:29:06,839
it's crazy you as a client application

660
00:29:03,599 --> 00:29:09,570
you do not know what IP version your

661
00:29:06,839 --> 00:29:12,599
packet Walker over even if the socket

662
00:29:09,570 --> 00:29:15,059
you're using is ipv4 ipv6 you could have

663
00:29:12,599 --> 00:29:17,779
a nat64 in the network there are a bunch

664
00:29:15,059 --> 00:29:22,549
of NAT sticks force today or if they see

665
00:29:17,779 --> 00:29:27,209
an ipv6 packet with a checks party time

666
00:29:22,549 --> 00:29:30,959
with a checksum they will rewrite it to

667
00:29:27,209 --> 00:29:32,789
v4 and clear the checksum so there are

668
00:29:30,959 --> 00:29:34,289
cases where like you will not get it and

669
00:29:32,789 --> 00:29:36,658
you have zero control over that from the

670
00:29:34,289 --> 00:29:43,619
application so I think there's really a

671
00:29:36,659 --> 00:29:49,799
use here on our court on that I just

672
00:29:43,619 --> 00:29:53,699
wanted to clarify I just wanted to

673
00:29:49,799 --> 00:29:56,009
clarify on slash respond to point David

674
00:29:53,700 --> 00:29:57,989
just made it Jeff one very common way

675
00:29:56,009 --> 00:30:02,219
you can start tokens like this is to

676
00:29:57,989 --> 00:30:04,649
have a header which to the my header I

677
00:30:02,219 --> 00:30:06,450
was indicate sure thank you but unique

678
00:30:04,649 --> 00:30:07,918
is the key or the token version followed

679
00:30:06,450 --> 00:30:09,899
by a followed by separate text so it's

680
00:30:07,919 --> 00:30:13,139
true if the cipher text itself is white

681
00:30:09,899 --> 00:30:15,708
is it just random but often there's a

682
00:30:13,139 --> 00:30:15,708
header which is not

683
00:30:16,510 --> 00:30:21,310
chris was just commenting on something

684
00:30:18,160 --> 00:30:22,750
earlier particularly what David was

685
00:30:21,310 --> 00:30:25,690
saying with respect to the key being

686
00:30:22,750 --> 00:30:27,610
public and what Eckert was trying to

687
00:30:25,690 --> 00:30:28,660
encourage us to do earlier domain

688
00:30:27,610 --> 00:30:30,100
separation is a good thing for

689
00:30:28,660 --> 00:30:37,690
graphically speaking we should derive a

690
00:30:30,100 --> 00:30:38,110
key from this pixel and use it let's do

691
00:30:37,690 --> 00:30:39,340
that

692
00:30:38,110 --> 00:30:41,620
[Music]

693
00:30:39,340 --> 00:30:43,720
whether or not it's encrypted I don't

694
00:30:41,620 --> 00:30:50,350
have a strong preference on that so

695
00:30:43,720 --> 00:30:51,430
maybe that's the bike shed so mum

696
00:30:50,350 --> 00:30:53,620
Thompson I wanted to ask the question

697
00:30:51,430 --> 00:30:56,650
whether anyone thought this was critical

698
00:30:53,620 --> 00:30:58,239
in some way I don't I don't see any

699
00:30:56,650 --> 00:31:00,070
indication that people think that this

700
00:30:58,240 --> 00:31:01,570
is this is a hole worth dying on it's

701
00:31:00,070 --> 00:31:03,010
just that we have a preference from some

702
00:31:01,570 --> 00:31:06,100
people not to have it encrypted and

703
00:31:03,010 --> 00:31:09,400
preference from others that it be

704
00:31:06,100 --> 00:31:11,260
encrypted um one of the the key

705
00:31:09,400 --> 00:31:13,660
observations here is that we don't want

706
00:31:11,260 --> 00:31:15,280
to run HK DF and we don't want to

707
00:31:13,660 --> 00:31:17,560
install the different AES key because

708
00:31:15,280 --> 00:31:21,129
both of those operations are expensive

709
00:31:17,560 --> 00:31:24,220
enough to show up in the test and Nick

710
00:31:21,130 --> 00:31:27,310
had some pretty good numbers on what a

711
00:31:24,220 --> 00:31:30,430
cost to send retries with the full HK DF

712
00:31:27,310 --> 00:31:33,159
plus a yes key installation all those

713
00:31:30,430 --> 00:31:35,170
sorts of things so I think we have

714
00:31:33,160 --> 00:31:37,420
agreement on that but ecers point about

715
00:31:35,170 --> 00:31:40,540
the three points in the spectrum that

716
00:31:37,420 --> 00:31:42,910
we're discussing is I think probably

717
00:31:40,540 --> 00:31:46,060
what we need to look at and that is just

718
00:31:42,910 --> 00:31:49,600
the integrity tag the fixed key

719
00:31:46,060 --> 00:31:51,429
encryption with the way that just just

720
00:31:49,600 --> 00:31:54,010
adding encryption in in the way that

721
00:31:51,430 --> 00:31:57,790
Davis described and the third option

722
00:31:54,010 --> 00:31:59,560
being used something from the original

723
00:31:57,790 --> 00:32:00,820
message for instance the destination

724
00:31:59,560 --> 00:32:05,020
connection ID the first eight bytes

725
00:32:00,820 --> 00:32:08,909
there off for instance as the as a nonce

726
00:32:05,020 --> 00:32:11,860
so that you get a different output

727
00:32:08,910 --> 00:32:16,450
depending a different mask for the token

728
00:32:11,860 --> 00:32:18,520
and so I think if we I suggest that we

729
00:32:16,450 --> 00:32:20,500
just do a beauty contest on those and

730
00:32:18,520 --> 00:32:22,120
see what people think because I don't

731
00:32:20,500 --> 00:32:26,250
think anyone's particularly concerned

732
00:32:22,120 --> 00:32:26,250
about one versus the other here

733
00:32:26,520 --> 00:32:29,760
oh yeah that's that's a that's a good

734
00:32:28,470 --> 00:32:30,990
question does everyone think they

735
00:32:29,760 --> 00:32:34,200
understand the three options so it's

736
00:32:30,990 --> 00:32:37,050
basically no encryption encryption with

737
00:32:34,200 --> 00:32:38,790
a with a fixed nonce or encryption with

738
00:32:37,050 --> 00:32:45,419
a varying nonce based on the destination

739
00:32:38,790 --> 00:32:49,550
connection ID everyone who seems to be

740
00:32:45,420 --> 00:32:49,550
engaged in this discussion understands

741
00:32:49,970 --> 00:32:56,700
colloquy regarding other three options

742
00:32:52,770 --> 00:32:59,250
that Martin Thomson mention I think

743
00:32:56,700 --> 00:33:02,340
between the first two options and the

744
00:32:59,250 --> 00:33:06,059
preference would be to go for just doing

745
00:33:02,340 --> 00:33:10,620
GMAC compared to a doing X or the reason

746
00:33:06,059 --> 00:33:15,660
is that I mean endpoints can retain a

747
00:33:10,620 --> 00:33:17,699
pre-generated X okay for one inch of

748
00:33:15,660 --> 00:33:20,490
salt but if we are going to have

749
00:33:17,700 --> 00:33:23,550
multiple salt based on the versions then

750
00:33:20,490 --> 00:33:27,000
it becomes increasingly difficult to pre

751
00:33:23,550 --> 00:33:30,419
generate all the xor patterns for each

752
00:33:27,000 --> 00:33:32,250
draft therefore i regarding the first

753
00:33:30,420 --> 00:33:34,980
options i think the first one mixed

754
00:33:32,250 --> 00:33:36,300
losses so so martin the the queue is

755
00:33:34,980 --> 00:33:38,100
closed okay this is a clarification

756
00:33:36,300 --> 00:33:40,169
question because i realized that from

757
00:33:38,100 --> 00:33:42,928
empties discussion I don't understand so

758
00:33:40,170 --> 00:33:45,480
you you did comment about Nick banks

759
00:33:42,929 --> 00:33:47,429
having these legitimate objections to

760
00:33:45,480 --> 00:33:49,320
encryption and then you presented two

761
00:33:47,429 --> 00:33:51,140
options that were encrypted and I'm

762
00:33:49,320 --> 00:33:55,580
confused

763
00:33:51,140 --> 00:33:59,840
so the the the thesis here is that the

764
00:33:55,580 --> 00:34:04,919
that the costs involved in Nick's

765
00:33:59,840 --> 00:34:07,199
experiments yes the cost involved in

766
00:34:04,920 --> 00:34:08,790
those experiments was largely to due to

767
00:34:07,200 --> 00:34:11,190
the fact that you have to run H KDF a

768
00:34:08,790 --> 00:34:14,429
very a number of times in order to get

769
00:34:11,190 --> 00:34:16,679
the keys and you have to install the AES

770
00:34:14,429 --> 00:34:17,700
case whether when when you get a new AES

771
00:34:16,679 --> 00:34:19,710
key you have to run a number of

772
00:34:17,699 --> 00:34:22,710
operations in order to get it in the

773
00:34:19,710 --> 00:34:24,899
state that you can use it and so those

774
00:34:22,710 --> 00:34:29,340
costs tend to dominate in these things

775
00:34:24,899 --> 00:34:34,529
but the thesis is that running the AAS

776
00:34:29,340 --> 00:34:37,649
operation to XOR those bits is very very

777
00:34:34,530 --> 00:34:40,240
cheap and when you're talking about

778
00:34:37,649 --> 00:34:41,618
using AES GCM it's basically

779
00:34:40,239 --> 00:34:43,449
cost nothing because you have to touch

780
00:34:41,619 --> 00:34:45,580
those bits anyway to get the cheap GMAC

781
00:34:43,449 --> 00:34:48,129
and so that's the thesis that were

782
00:34:45,580 --> 00:34:52,960
operating on here you know there is a

783
00:34:48,129 --> 00:34:54,460
cost but I would suggest that it's very

784
00:34:52,960 --> 00:34:58,990
hard to measure that because of the way

785
00:34:54,460 --> 00:35:01,330
that this all works so Janna do you have

786
00:34:58,990 --> 00:35:03,879
a question of clarification or a point

787
00:35:01,330 --> 00:35:07,270
of clarification question as long as

788
00:35:03,880 --> 00:35:08,800
it's a question it is a question this is

789
00:35:07,270 --> 00:35:10,330
just piggybacking on exactly this

790
00:35:08,800 --> 00:35:13,270
conversation because I was confused as

791
00:35:10,330 --> 00:35:16,900
well we had agreed to something in

792
00:35:13,270 --> 00:35:20,730
Cupertino does this effectively mean

793
00:35:16,900 --> 00:35:25,300
that the agreement remains the same okay

794
00:35:20,730 --> 00:35:28,990
so it sounds like this isn't quite ready

795
00:35:25,300 --> 00:35:30,790
to go do you think it'll be her useful

796
00:35:28,990 --> 00:35:33,069
to have a hum to distinguish between

797
00:35:30,790 --> 00:35:35,200
those three I thought you did or already

798
00:35:33,070 --> 00:35:38,080
understood that yes I want to understand

799
00:35:35,200 --> 00:35:41,740
from this this room yes I pay your C

800
00:35:38,080 --> 00:35:43,779
because this could drag on if we take

801
00:35:41,740 --> 00:35:45,069
this to the list because it's one of

802
00:35:43,780 --> 00:35:46,119
those ones where it doesn't really

803
00:35:45,070 --> 00:35:48,190
matter but we could

804
00:35:46,119 --> 00:35:50,770
yeah it's gossip forever right but we're

805
00:35:48,190 --> 00:35:52,270
not going to close it today so any

806
00:35:50,770 --> 00:35:53,080
chance we could have a home on those

807
00:35:52,270 --> 00:35:58,060
that's where I'm going

808
00:35:53,080 --> 00:36:00,640
yes thank you we're gonna hum we have

809
00:35:58,060 --> 00:36:03,520
three options the first is no encryption

810
00:36:00,640 --> 00:36:05,650
the second is encryption with a static

811
00:36:03,520 --> 00:36:06,970
nonce and the third is encryption with a

812
00:36:05,650 --> 00:36:15,010
nonce dependent upon the destination

813
00:36:06,970 --> 00:36:16,868
connection ID correct so hum for all

814
00:36:15,010 --> 00:36:21,070
three if you don't care or come for none

815
00:36:16,869 --> 00:36:22,810
can can ask clarification question so

816
00:36:21,070 --> 00:36:25,800
the first is the status quo is that

817
00:36:22,810 --> 00:36:30,759
correct and the second oh as first isn't

818
00:36:25,800 --> 00:36:36,720
quite basically what we do for initial

819
00:36:30,760 --> 00:36:38,070
encryption right okay

820
00:36:36,720 --> 00:36:40,950
this is actually making worry about this

821
00:36:38,070 --> 00:36:43,260
home a little bit the first was in the

822
00:36:40,950 --> 00:36:45,600
pr2 all these fix the problem because

823
00:36:43,260 --> 00:36:47,250
you all have found the point one the

824
00:36:45,600 --> 00:36:48,240
different there's different like colors

825
00:36:47,250 --> 00:36:51,660
I'm like fixing work as you all have

826
00:36:48,240 --> 00:36:52,979
found the first of us in the PR which is

827
00:36:51,660 --> 00:36:56,190
to say just integrity check

828
00:36:52,980 --> 00:36:59,130
nothing is encrypted the second is that

829
00:36:56,190 --> 00:37:00,540
an integrity check plus things are

830
00:36:59,130 --> 00:37:02,820
encrypted but with this completely fixed

831
00:37:00,540 --> 00:37:05,279
key so that basically the basically the

832
00:37:02,820 --> 00:37:06,270
encryption is the same the same plain

833
00:37:05,280 --> 00:37:10,890
text will be encrypted the same way

834
00:37:06,270 --> 00:37:12,750
every time the third option is on the

835
00:37:10,890 --> 00:37:13,950
third option is an integrity check plus

836
00:37:12,750 --> 00:37:15,720
a form of encryption and so that you

837
00:37:13,950 --> 00:37:17,850
will with system with a fixed key but

838
00:37:15,720 --> 00:37:18,660
with a diversifying nonce so that the

839
00:37:17,850 --> 00:37:20,310
same plane is will be encrypted

840
00:37:18,660 --> 00:37:26,520
differently each time there was that

841
00:37:20,310 --> 00:37:29,040
those are the three options it's just a

842
00:37:26,520 --> 00:37:32,820
process suggestion I have the impression

843
00:37:29,040 --> 00:37:37,160
that the second option is kind of really

844
00:37:32,820 --> 00:37:40,050
weird so I would like to be first her on

845
00:37:37,160 --> 00:37:42,210
eliminating the second option because he

846
00:37:40,050 --> 00:37:51,300
doesn't bring anything in sorry what was

847
00:37:42,210 --> 00:37:52,980
that I first suggested it but then my

848
00:37:51,300 --> 00:37:54,120
rows with a nonce thing I decided I

849
00:37:52,980 --> 00:37:57,660
decided like the third option better

850
00:37:54,120 --> 00:37:59,609
stuff so then the options are no

851
00:37:57,660 --> 00:38:01,470
encryption or encryption with a nonce

852
00:37:59,610 --> 00:38:02,210
based upon the destination connection I

853
00:38:01,470 --> 00:38:04,259
do

854
00:38:02,210 --> 00:38:05,820
maybe we skip the hum on the second one

855
00:38:04,260 --> 00:38:07,200
let's talk about the first and then turn

856
00:38:05,820 --> 00:38:09,330
that in the last so let's let's let's

857
00:38:07,200 --> 00:38:12,480
try that unless they won't feel

858
00:38:09,330 --> 00:38:14,009
struggling otherwise no okay has anyone

859
00:38:12,480 --> 00:38:20,760
contacted the Secretariat about the

860
00:38:14,010 --> 00:38:23,250
lights okay I like to see you so if you

861
00:38:20,760 --> 00:38:30,240
believe we should have no encryption

862
00:38:23,250 --> 00:38:31,680
please hum now and if you believe we

863
00:38:30,240 --> 00:38:33,299
should have encryption with a nonce

864
00:38:31,680 --> 00:38:39,210
based upon the destination connection ID

865
00:38:33,300 --> 00:38:41,310
please come now it's about even the

866
00:38:39,210 --> 00:38:42,630
second one was maybe slightly louder but

867
00:38:41,310 --> 00:38:44,340
I think that was due to maybe one person

868
00:38:42,630 --> 00:38:47,670
who's really good at this

869
00:38:44,340 --> 00:38:50,520
this is DK GG i prescribed reporting -

870
00:38:47,670 --> 00:38:58,580
hums for no and

871
00:38:50,520 --> 00:39:04,170
and one hum for the encryption okay so

872
00:38:58,580 --> 00:39:05,279
this is this is does does I guess I'd be

873
00:39:04,170 --> 00:39:06,690
interested to hear if anyone believes

874
00:39:05,280 --> 00:39:08,100
that it's great there's a critical

875
00:39:06,690 --> 00:39:10,080
distinction here whether you know we

876
00:39:08,100 --> 00:39:11,790
need to faceplant on this for a

877
00:39:10,080 --> 00:39:14,279
technical reason or this is just a

878
00:39:11,790 --> 00:39:17,790
beauty contest yeah

879
00:39:14,280 --> 00:39:19,410
so Jenna and God I'm gonna suggest maybe

880
00:39:17,790 --> 00:39:21,720
just asking the room of people can live

881
00:39:19,410 --> 00:39:23,100
with either solution and have skin Ozzie

882
00:39:21,720 --> 00:39:25,560
actually decide based on whatever

883
00:39:23,100 --> 00:39:29,490
feedback he gets on the PR and move

884
00:39:25,560 --> 00:39:31,350
forward but he's written the PR Martin

885
00:39:29,490 --> 00:39:32,939
wants to cause we've we've said this in

886
00:39:31,350 --> 00:39:35,400
several ways now it's a beauty contest

887
00:39:32,940 --> 00:39:37,230
echo said it's different colors but you

888
00:39:35,400 --> 00:39:39,060
didn't use the work by would bite

889
00:39:37,230 --> 00:39:43,080
but I'm suggesting that this is a bike

890
00:39:39,060 --> 00:39:45,810
 and that we move on that's what I

891
00:39:43,080 --> 00:39:47,970
do so our tactical difference is

892
00:39:45,810 --> 00:39:49,080
difference value like I mean it's just a

893
00:39:47,970 --> 00:39:50,459
matter of what how you judge those but

894
00:39:49,080 --> 00:39:52,830
basically there's a question of do you

895
00:39:50,460 --> 00:39:54,990
judge put the performance cost of the

896
00:39:52,830 --> 00:39:56,910
EES versus the somewhat improved cost of

897
00:39:54,990 --> 00:39:57,779
the obfuscation of of the aggression

898
00:39:56,910 --> 00:40:00,868
that's like that's what you're but

899
00:39:57,780 --> 00:40:02,100
George okay the cue is still cut I'm not

900
00:40:00,869 --> 00:40:03,780
really wanting to spend much more time

901
00:40:02,100 --> 00:40:06,000
on this right so you have something

902
00:40:03,780 --> 00:40:08,850
short Ian I I had a suggestion that

903
00:40:06,000 --> 00:40:10,710
originally the reason we went for the

904
00:40:08,850 --> 00:40:12,240
first option at least the interim was

905
00:40:10,710 --> 00:40:14,220
due to Nick's bank's feedback about the

906
00:40:12,240 --> 00:40:16,049
CPU cost can we get some feedback on

907
00:40:14,220 --> 00:40:18,240
whether like this is actually a blocker

908
00:40:16,050 --> 00:40:23,700
for deploying quick or just like kind of

909
00:40:18,240 --> 00:40:24,959
painful or something yeah I mean Praveen

910
00:40:23,700 --> 00:40:27,180
the best person I can think of

911
00:40:24,960 --> 00:40:29,010
channeling it but but if otherwise I

912
00:40:27,180 --> 00:40:31,350
don't really care but I'm trying to you

913
00:40:29,010 --> 00:40:33,690
know but can you answer that I think

914
00:40:31,350 --> 00:40:35,580
like deployment ways yeah if crypto will

915
00:40:33,690 --> 00:40:36,750
add cost right so the question here is

916
00:40:35,580 --> 00:40:38,970
if you're only looking for integrity

917
00:40:36,750 --> 00:40:41,670
check play then it seems overkill to me

918
00:40:38,970 --> 00:40:44,189
to like go crypto so I have a strong

919
00:40:41,670 --> 00:40:45,840
preference for the Nugget option sorry I

920
00:40:44,190 --> 00:40:49,830
have a strong preference for the no

921
00:40:45,840 --> 00:40:51,660
crypto finalcut oh that's very hard to

922
00:40:49,830 --> 00:40:53,190
tell because it will need to be deployed

923
00:40:51,660 --> 00:40:55,440
and measured right so the only I rough

924
00:40:53,190 --> 00:40:56,820
measurements okay so you do have a

925
00:40:55,440 --> 00:40:59,340
strong preference that's actually good

926
00:40:56,820 --> 00:41:00,390
to hear if we just say no crypto is

927
00:40:59,340 --> 00:41:02,750
anybody gonna lie down on the right

928
00:41:00,390 --> 00:41:02,750
about that

929
00:41:05,860 --> 00:41:13,360
sorry no encryption yeah yeah so Martin

930
00:41:11,690 --> 00:41:16,220
Thompson that that assertion is based on

931
00:41:13,360 --> 00:41:17,870
an assumption that this is expensive and

932
00:41:16,220 --> 00:41:19,899
we don't have those numbers Nick

933
00:41:17,870 --> 00:41:23,060
produced numbers for the other thing

934
00:41:19,900 --> 00:41:27,610
which was definitely much more expensive

935
00:41:23,060 --> 00:41:30,799
but I don't think we we can say based on

936
00:41:27,610 --> 00:41:34,430
just a yes crypto is more expensive when

937
00:41:30,800 --> 00:41:36,560
we were running G hash so running AES

938
00:41:34,430 --> 00:41:38,299
alongside that may not cost anything

939
00:41:36,560 --> 00:41:41,120
noticeable I don't I don't know what

940
00:41:38,300 --> 00:41:44,540
what the cost would be let's take the

941
00:41:41,120 --> 00:41:46,100
discussion of the issue then okay I can

942
00:41:44,540 --> 00:41:47,300
at least bond her to write up the things

943
00:41:46,100 --> 00:41:49,730
that people can see them from them in

944
00:41:47,300 --> 00:41:51,800
case anybody's confused okay yeah I mean

945
00:41:49,730 --> 00:41:53,690
if we are strictly speaking about the

946
00:41:51,800 --> 00:41:56,240
norms and not to be computing the key

947
00:41:53,690 --> 00:41:59,800
then my number says that you can do that

948
00:41:56,240 --> 00:42:01,879
at something like 28 a second on on CPU

949
00:41:59,800 --> 00:42:03,470
like okay

950
00:42:01,880 --> 00:42:05,390
so I keep on saying let's move on and

951
00:42:03,470 --> 00:42:08,299
yet the my client still keeps on fizzle

952
00:42:05,390 --> 00:42:11,900
sorry process question as owner of the

953
00:42:08,300 --> 00:42:13,790
issue and writer of the PR what I'm

954
00:42:11,900 --> 00:42:15,080
really my opinion is on this is

955
00:42:13,790 --> 00:42:17,509
irrelevant what I'm getting from the

956
00:42:15,080 --> 00:42:19,279
room is that some people assume that

957
00:42:17,510 --> 00:42:20,630
it's one is better because they think

958
00:42:19,280 --> 00:42:21,680
something is cheap some people assume

959
00:42:20,630 --> 00:42:23,780
that the other is better because they

960
00:42:21,680 --> 00:42:27,080
think something is expensive no one's

961
00:42:23,780 --> 00:42:29,420
willing to like lay down the road and

962
00:42:27,080 --> 00:42:32,210
kicking and screaming on this if we take

963
00:42:29,420 --> 00:42:34,160
it to the list people will take their

964
00:42:32,210 --> 00:42:37,060
keep giving more arguments and more

965
00:42:34,160 --> 00:42:39,799
opinions and a willl a go on and on I

966
00:42:37,060 --> 00:42:42,680
think that I would really prefer for

967
00:42:39,800 --> 00:42:46,130
this to be a coin toss here and now so

968
00:42:42,680 --> 00:42:48,230
then I can we can versus PR and I can

969
00:42:46,130 --> 00:42:51,620
move on with my life if someone actually

970
00:42:48,230 --> 00:42:53,480
runs those numbers and has further input

971
00:42:51,620 --> 00:42:55,850
down the line to the working group

972
00:42:53,480 --> 00:42:57,590
that's that can ward things and that can

973
00:42:55,850 --> 00:42:59,660
ward changes to just about anything in

974
00:42:57,590 --> 00:43:01,280
the protocol but for now in our current

975
00:42:59,660 --> 00:43:03,319
knowledge in our current state let's do

976
00:43:01,280 --> 00:43:05,090
a coin flip so we can move on so so

977
00:43:03,320 --> 00:43:07,100
here's the thing about coin flips we did

978
00:43:05,090 --> 00:43:09,380
four and http2 and if I remember

979
00:43:07,100 --> 00:43:10,640
correctly two of them didn't turn out so

980
00:43:09,380 --> 00:43:13,400
well in the long run

981
00:43:10,640 --> 00:43:15,660
those are pretty regular odds for them

982
00:43:13,400 --> 00:43:18,490
the odds

983
00:43:15,660 --> 00:43:20,740
but so what I'm saying is the only thing

984
00:43:18,490 --> 00:43:23,769
that could make us make a informed

985
00:43:20,740 --> 00:43:25,479
decision is some new data and what can

986
00:43:23,769 --> 00:43:27,729
we open this if and when some people

987
00:43:25,480 --> 00:43:29,170
cope with do data but I have a very

988
00:43:27,730 --> 00:43:31,720
strong intuition that people will come

989
00:43:29,170 --> 00:43:34,119
up with a pinion z-- not data so so

990
00:43:31,720 --> 00:43:36,578
David let me ask you this as the author

991
00:43:34,119 --> 00:43:38,200
the PR have you heard anything in the

992
00:43:36,579 --> 00:43:43,390
room today that will make you change

993
00:43:38,200 --> 00:43:48,069
that PR not yet but if the coin falls on

994
00:43:43,390 --> 00:43:49,690
that side I can change the PR okay the

995
00:43:48,069 --> 00:43:55,990
editor is do you still believe that this

996
00:43:49,690 --> 00:43:57,000
is proposed already you just wouldn't

997
00:43:55,990 --> 00:44:01,558
flip a coin

998
00:43:57,000 --> 00:44:01,559
we haven't flipped a coin yet for quick

999
00:44:05,190 --> 00:44:12,279
um if you look at the list on the PR

1000
00:44:08,920 --> 00:44:14,289
there's a bunch of approvals at the same

1001
00:44:12,279 --> 00:44:18,460
time there's been a discussion that just

1002
00:44:14,289 --> 00:44:20,349
happened here and this is exactly coin

1003
00:44:18,460 --> 00:44:22,569
flip territory I don't think that you're

1004
00:44:20,349 --> 00:44:24,190
gonna find resolution there yes it is

1005
00:44:22,569 --> 00:44:26,890
propose already based on what we had

1006
00:44:24,190 --> 00:44:29,200
earlier and now this is there's more

1007
00:44:26,890 --> 00:44:30,730
discussion now that's causing people to

1008
00:44:29,200 --> 00:44:32,710
maybe think that we could do something

1009
00:44:30,730 --> 00:44:34,119
slightly different but it was proposed

1010
00:44:32,710 --> 00:44:37,450
already we can always open it again

1011
00:44:34,119 --> 00:44:40,660
later as David says if we have data but

1012
00:44:37,450 --> 00:44:43,419
at this point we are speculating so I'm

1013
00:44:40,660 --> 00:44:44,618
saying that we should either merge it as

1014
00:44:43,420 --> 00:44:46,329
it is or do a coin flip

1015
00:44:44,619 --> 00:44:48,009
but either way so I should finish it I'm

1016
00:44:46,329 --> 00:44:49,599
sure I didn't get that I'm sorry I'm

1017
00:44:48,009 --> 00:44:52,960
saying that we should merge it as it is

1018
00:44:49,599 --> 00:44:55,289
or do a coin flip and decide which way

1019
00:44:52,960 --> 00:44:55,289
we are going

1020
00:44:59,550 --> 00:45:04,750
if Mark isn't gonna stop me I'll come

1021
00:45:02,410 --> 00:45:06,220
here repair toupee own you just need

1022
00:45:04,750 --> 00:45:07,540
upset the speakers aren't as loud up

1023
00:45:06,220 --> 00:45:11,200
here so I can't hear a lot of what

1024
00:45:07,540 --> 00:45:12,670
you're saying we did a hum for what

1025
00:45:11,200 --> 00:45:14,319
people like

1026
00:45:12,670 --> 00:45:15,580
we can also discriminate a little more

1027
00:45:14,320 --> 00:45:18,760
by doing a hum for what people don't

1028
00:45:15,580 --> 00:45:19,630
like if you care I perfectly fine with

1029
00:45:18,760 --> 00:45:22,060
the coin flip myself

1030
00:45:19,630 --> 00:45:23,740
well the question that I want to ask is

1031
00:45:22,060 --> 00:45:26,259
is that this is proposal ready we can do

1032
00:45:23,740 --> 00:45:30,669
a call for consensus on this in the next

1033
00:45:26,260 --> 00:45:34,840
batch this is already so this had a call

1034
00:45:30,670 --> 00:45:37,240
for consensus and Ecker raised a point

1035
00:45:34,840 --> 00:45:41,110
on that saying we're saying what I said

1036
00:45:37,240 --> 00:45:44,229
in the rules is the one that he am so

1037
00:45:41,110 --> 00:45:49,060
Acker has any of this change of mind all

1038
00:45:44,230 --> 00:45:53,050
right Mike Bishop if I can offer a

1039
00:45:49,060 --> 00:45:56,529
suggestion as a previous comment noted

1040
00:45:53,050 --> 00:45:58,660
the distinction between these two one

1041
00:45:56,530 --> 00:46:01,060
clearly offers a little bit of benefit

1042
00:45:58,660 --> 00:46:04,720
and there's question about what the cost

1043
00:46:01,060 --> 00:46:06,940
is would anyone volunteer to get the

1044
00:46:04,720 --> 00:46:10,859
didn't get the data on the cost and see

1045
00:46:06,940 --> 00:46:13,630
if there actually is a difference okay

1046
00:46:10,859 --> 00:46:17,560
so if we accept Christians data that

1047
00:46:13,630 --> 00:46:27,730
this can be done at what 20 gigs three

1048
00:46:17,560 --> 00:46:32,020
gigs a second that seems it's very

1049
00:46:27,730 --> 00:46:34,690
simple I mean if we do a regular AES

1050
00:46:32,020 --> 00:46:37,480
encryption on packets we have a

1051
00:46:34,690 --> 00:46:39,340
different nonce for every packet and on

1052
00:46:37,480 --> 00:46:43,750
the measurement we weren't at our 20

1053
00:46:39,340 --> 00:46:52,540
gigs on the CPU in the window stack so

1054
00:46:43,750 --> 00:46:54,400
that's I think we should move on pravin

1055
00:46:52,540 --> 00:46:56,080
one more one last comment like this is

1056
00:46:54,400 --> 00:46:57,880
like a DOS attack scenario right so

1057
00:46:56,080 --> 00:47:00,220
we're talking about system already under

1058
00:46:57,880 --> 00:47:01,690
stress so any solution that puts even

1059
00:47:00,220 --> 00:47:06,839
more burden on the system in generate

1060
00:47:01,690 --> 00:47:06,840
the retry is I think like not ideal okay

1061
00:47:07,299 --> 00:47:10,759
let's take it back to discussion I don't

1062
00:47:09,799 --> 00:47:16,579
think we're gonna make any more progress

1063
00:47:10,760 --> 00:47:18,140
right now thank you

1064
00:47:16,579 --> 00:47:23,660
yeah our scribe is reminding us to say

1065
00:47:18,140 --> 00:47:27,470
our names when we're speaking so let's

1066
00:47:23,660 --> 00:47:35,450
move on to the other documents let's

1067
00:47:27,470 --> 00:47:39,589
start with recovery I think so recovery

1068
00:47:35,450 --> 00:47:40,970
editors we have six open issues are

1069
00:47:39,589 --> 00:47:42,440
there any that you need to get some

1070
00:47:40,970 --> 00:47:50,959
input from the working group on and you

1071
00:47:42,440 --> 00:47:56,319
want to discuss yes definitely the

1072
00:47:50,960 --> 00:48:02,029
second one and possibly the third I

1073
00:47:56,319 --> 00:48:04,369
think there's the - I won I have a

1074
00:48:02,029 --> 00:48:07,119
highlight at the end that I think is the

1075
00:48:04,369 --> 00:48:09,230
question at least I want guidance on

1076
00:48:07,119 --> 00:48:11,589
this actually mostly comes down to

1077
00:48:09,230 --> 00:48:13,819
pseudocode oh yeah for the working group

1078
00:48:11,589 --> 00:48:15,799
proposed PR attempts to include a

1079
00:48:13,819 --> 00:48:18,440
mechanism to limit Steven to increase

1080
00:48:15,799 --> 00:48:21,619
during slow start we're not pacing by

1081
00:48:18,440 --> 00:48:23,059
itself this does not actually fully

1082
00:48:21,619 --> 00:48:26,839
guarantee the must that we have in

1083
00:48:23,059 --> 00:48:28,579
another normative section my opinion is

1084
00:48:26,839 --> 00:48:30,828
I would rather not add pseudocode for

1085
00:48:28,579 --> 00:48:33,470
cases that we don't recommend we say you

1086
00:48:30,829 --> 00:48:36,049
should pace packets if possible and you

1087
00:48:33,470 --> 00:48:40,220
may not and if you do not then you need

1088
00:48:36,049 --> 00:48:43,900
to limit bursts but if people would like

1089
00:48:40,220 --> 00:48:46,788
pseudo code for maze as well as shoulds

1090
00:48:43,900 --> 00:48:48,829
then we need to kind of revisit that and

1091
00:48:46,789 --> 00:48:50,660
expand the pseudocode quite

1092
00:48:48,829 --> 00:48:51,980
substantially so this is not actually a

1093
00:48:50,660 --> 00:48:54,410
normative issue but I'd like some

1094
00:48:51,980 --> 00:48:56,000
guidelines on like what is the

1095
00:48:54,410 --> 00:48:57,470
expectation of the pseudocode doesn't

1096
00:48:56,000 --> 00:48:59,900
need to like cover all the things you

1097
00:48:57,470 --> 00:49:03,848
may do for example there's no texture no

1098
00:48:59,900 --> 00:49:06,170
pseudocode right now around detecting

1099
00:49:03,849 --> 00:49:08,480
packet reordering and increasing the

1100
00:49:06,170 --> 00:49:11,150
pakery ordering threshold as a result of

1101
00:49:08,480 --> 00:49:13,539
every rank and that's another one that I

1102
00:49:11,150 --> 00:49:17,779
can see adding but it's fairly complex

1103
00:49:13,539 --> 00:49:20,530
and so it's a fair bit of work yeah

1104
00:49:17,779 --> 00:49:22,240
sorry ian's what Google said that

1105
00:49:20,530 --> 00:49:23,890
but I'd like some guidelines here is

1106
00:49:22,240 --> 00:49:25,540
really what I'm asking for not only

1107
00:49:23,890 --> 00:49:31,060
about this PR but about going forward

1108
00:49:25,540 --> 00:49:40,870
and I think we'll hear from vidi next go

1109
00:49:31,060 --> 00:49:47,380
ahead oh we lost her actually did we

1110
00:49:40,870 --> 00:49:47,799
lose me that go no okay we'll wait to

1111
00:49:47,380 --> 00:49:57,190
hear back

1112
00:49:47,800 --> 00:50:01,240
so ah fantastic know me deco we seem to

1113
00:49:57,190 --> 00:50:04,470
be having some troubles go ahead John

1114
00:50:01,240 --> 00:50:04,470
alright let's try one more time

1115
00:50:09,570 --> 00:50:18,370
no that's not good go ahead Jenna Jenna

1116
00:50:15,280 --> 00:50:21,130
younger so I'll make just a couple of

1117
00:50:18,370 --> 00:50:23,290
notes the pseudo-code

1118
00:50:21,130 --> 00:50:25,270
lives in the appendix that's by design

1119
00:50:23,290 --> 00:50:26,710
the reason it's in the appendix is

1120
00:50:25,270 --> 00:50:29,770
because it doesn't have any normative

1121
00:50:26,710 --> 00:50:31,660
status the text is normative the

1122
00:50:29,770 --> 00:50:34,420
pseudocode is merely a guidance to

1123
00:50:31,660 --> 00:50:38,230
implementers about how to implement the

1124
00:50:34,420 --> 00:50:40,210
text that's already in the draft and to

1125
00:50:38,230 --> 00:50:41,830
the extent that we want to add stuff or

1126
00:50:40,210 --> 00:50:46,390
not add stuff there that's really up to

1127
00:50:41,830 --> 00:50:48,910
us it's all guidance in there anyways so

1128
00:50:46,390 --> 00:50:52,359
if there is an implementer who's asking

1129
00:50:48,910 --> 00:50:54,850
for how to do this which happens to be

1130
00:50:52,360 --> 00:50:56,920
the case I don't see any reason to not

1131
00:50:54,850 --> 00:50:58,509
add it at the same time I don't have a

1132
00:50:56,920 --> 00:51:02,620
strong opinion on this I personally am

1133
00:50:58,510 --> 00:51:06,160
of the opinion that we should be we

1134
00:51:02,620 --> 00:51:08,880
should be pacing but that's my personal

1135
00:51:06,160 --> 00:51:11,230
opinion not the working groups okay

1136
00:51:08,880 --> 00:51:13,240
today I'm going to try one more time and

1137
00:51:11,230 --> 00:51:15,160
if this time doesn't work why don't you

1138
00:51:13,240 --> 00:51:23,490
give your input through jabber and we'll

1139
00:51:15,160 --> 00:51:26,420
jabber relay it to the room now

1140
00:51:23,490 --> 00:51:31,410
Oh Jabbar please Vinnie sorry about that

1141
00:51:26,420 --> 00:51:35,010
go ahead Eric Kinnear so I think it does

1142
00:51:31,410 --> 00:51:37,920
say that we should be pacing and so it

1143
00:51:35,010 --> 00:51:39,510
feels as though we should have a copy of

1144
00:51:37,920 --> 00:51:41,579
the pseudocode which is kind of the main

1145
00:51:39,510 --> 00:51:45,690
like this is what you are expected to do

1146
00:51:41,579 --> 00:51:46,890
and to John's point if there is an

1147
00:51:45,690 --> 00:51:48,329
implementation or a group of

1148
00:51:46,890 --> 00:51:49,920
implementations where we know that

1149
00:51:48,329 --> 00:51:51,750
there's kind of another branch that can

1150
00:51:49,920 --> 00:51:53,940
be taken in terms of what the

1151
00:51:51,750 --> 00:51:55,700
implementation is doing it seems fine to

1152
00:51:53,940 --> 00:51:58,200
have a section in the pseudocode for

1153
00:51:55,700 --> 00:52:00,210
here is kind of the alternative but I

1154
00:51:58,200 --> 00:52:03,419
would suggest that that be a separate

1155
00:52:00,210 --> 00:52:06,270
section so that there is a clean copy of

1156
00:52:03,420 --> 00:52:07,829
and I yes but basically there should be

1157
00:52:06,270 --> 00:52:09,030
a clean copy of the pseudocode for if

1158
00:52:07,829 --> 00:52:10,170
you are an implementer and you just read

1159
00:52:09,030 --> 00:52:13,170
through the pseudocode and you do that

1160
00:52:10,170 --> 00:52:15,329
thing you're following the main

1161
00:52:13,170 --> 00:52:16,680
recommendations of the draft and where

1162
00:52:15,329 --> 00:52:18,119
we have a place in the draft like this

1163
00:52:16,680 --> 00:52:19,410
where we've kind of said if you aren't

1164
00:52:18,119 --> 00:52:21,390
following the main recommendations you

1165
00:52:19,410 --> 00:52:22,770
must do this other stuff it seems fine

1166
00:52:21,390 --> 00:52:26,240
to have pseudocode for that but it'd be

1167
00:52:22,770 --> 00:52:26,240
nice to have that have a distinction

1168
00:52:29,960 --> 00:52:34,260
gori gori fair has look at a good thing

1169
00:52:32,819 --> 00:52:34,980
at the back cuz I would agree with what

1170
00:52:34,260 --> 00:52:37,470
we just said

1171
00:52:34,980 --> 00:52:39,660
and in this case we have 496 always some

1172
00:52:37,470 --> 00:52:42,029
pseudocode it for another protocol to

1173
00:52:39,660 --> 00:52:44,220
kind of build on anyway so let's keep

1174
00:52:42,030 --> 00:52:46,170
the main path really clean on the

1175
00:52:44,220 --> 00:52:47,970
shoulds and if you want to do the must

1176
00:52:46,170 --> 00:52:49,440
other and that's fine but there is

1177
00:52:47,970 --> 00:52:57,450
already a reference to how to do it on

1178
00:52:49,440 --> 00:52:58,770
this one alright Andrew McGregor

1179
00:52:57,450 --> 00:53:00,058
I kind of agree what people are saying

1180
00:52:58,770 --> 00:53:03,240
about the pseudocode but we should keep

1181
00:53:00,059 --> 00:53:07,980
this documentation because it's entirely

1182
00:53:03,240 --> 00:53:09,779
possible that an implementation may have

1183
00:53:07,980 --> 00:53:11,400
spacing support that isn't always

1184
00:53:09,780 --> 00:53:13,680
functional and then need to know what's

1185
00:53:11,400 --> 00:53:16,640
do what to do in we need to know what to

1186
00:53:13,680 --> 00:53:16,640
do when it's not working

1187
00:53:17,150 --> 00:53:25,570
repair to pay on Google

1188
00:53:19,380 --> 00:53:30,910
this seems editorial sorry yeah yeah

1189
00:53:25,570 --> 00:53:38,170
old habits die hard no longer at Google

1190
00:53:30,910 --> 00:53:42,549
thank you very much Daniel Kahn Gilmore

1191
00:53:38,170 --> 00:53:43,720
relating for video as Jonathan said the

1192
00:53:42,550 --> 00:53:44,950
pseudocode is a reference for

1193
00:53:43,720 --> 00:53:47,020
implementations which don't implement

1194
00:53:44,950 --> 00:53:48,399
pacing this would provide completeness

1195
00:53:47,020 --> 00:53:51,180
to the pseudocode for increasing

1196
00:53:48,400 --> 00:53:51,180
congestion windows

1197
00:53:52,020 --> 00:53:58,030
okay so editors does that give you the

1198
00:53:54,340 --> 00:54:00,340
input that you need it sounds like

1199
00:53:58,030 --> 00:54:09,220
there's general support for having

1200
00:54:00,340 --> 00:54:12,520
something here I think we can figure

1201
00:54:09,220 --> 00:54:14,709
this out this is again like I said it

1202
00:54:12,520 --> 00:54:16,120
doesn't have a normative effect so I

1203
00:54:14,710 --> 00:54:17,500
don't see any reason why the working

1204
00:54:16,120 --> 00:54:19,810
group really Mesa spend a lot of time on

1205
00:54:17,500 --> 00:54:21,340
this but it was valuable to hear input

1206
00:54:19,810 --> 00:54:25,690
about what people think this should so

1207
00:54:21,340 --> 00:54:28,840
good should reflect it's clear to me

1208
00:54:25,690 --> 00:54:31,090
that the working group is split and not

1209
00:54:28,840 --> 00:54:32,770
so different away as Jenna and I so yeah

1210
00:54:31,090 --> 00:54:33,850
I think I think this is useful like we

1211
00:54:32,770 --> 00:54:35,380
can keep going

1212
00:54:33,850 --> 00:54:37,060
pravin did want to note that there were

1213
00:54:35,380 --> 00:54:39,850
a few issues that didn't get a design

1214
00:54:37,060 --> 00:54:41,080
tag yet because we are in this limbo

1215
00:54:39,850 --> 00:54:42,880
where I'm not really sure we're in the

1216
00:54:41,080 --> 00:54:44,460
late stage process and I haven't tagged

1217
00:54:42,880 --> 00:54:46,240
thing is designed so you might want to

1218
00:54:44,460 --> 00:54:47,470
go through and see if there are things

1219
00:54:46,240 --> 00:54:49,060
that aren't tagged it with either

1220
00:54:47,470 --> 00:54:52,299
editorial or design that also might

1221
00:54:49,060 --> 00:54:53,799
deserve discussion and if anyone knows

1222
00:54:52,300 --> 00:54:58,120
where my badges then that'd be cool

1223
00:54:53,800 --> 00:55:02,220
thanks my name is Ian's but maybe you

1224
00:54:58,120 --> 00:55:02,220
could filter on not editorial instead of

1225
00:55:12,770 --> 00:55:22,230
any others you want to discuss editors

1226
00:55:14,970 --> 00:55:24,839
or anyone else just for context I think

1227
00:55:22,230 --> 00:55:25,890
we have about let's call it 20 minutes

1228
00:55:24,839 --> 00:55:30,319
before we need to start the other

1229
00:55:25,890 --> 00:55:30,319
discussions so for this end for HTTP a

1230
00:55:30,980 --> 00:55:36,390
couple of issues here you can see those

1231
00:55:33,630 --> 00:55:39,180
ones right there which make out of C 69

1232
00:55:36,390 --> 00:55:43,288
28 normative and can be make a

1233
00:55:39,180 --> 00:55:45,000
nominative reference to 80 85 this is

1234
00:55:43,289 --> 00:55:46,799
worth noting because we are changing

1235
00:55:45,000 --> 00:55:48,660
something or there's a proposal to

1236
00:55:46,799 --> 00:55:51,030
change something here that we had agreed

1237
00:55:48,660 --> 00:55:52,379
upon earlier to not do we had agreed

1238
00:55:51,030 --> 00:55:54,690
earlier in this working group that we

1239
00:55:52,380 --> 00:55:57,960
wouldn't have normative reference to two

1240
00:55:54,690 --> 00:56:00,329
normative references to TCP RFC's for

1241
00:55:57,960 --> 00:56:03,539
the mechanisms that we use here however

1242
00:56:00,329 --> 00:56:06,869
Gauri has noted that in his review that

1243
00:56:03,539 --> 00:56:09,359
we don't have any strong basis outside

1244
00:56:06,869 --> 00:56:14,069
of these references for some constants

1245
00:56:09,359 --> 00:56:16,740
that we use for example we use the 69 28

1246
00:56:14,069 --> 00:56:20,099
value of initial initial window of 10

1247
00:56:16,740 --> 00:56:23,669
the basis for that is our fc-69 28 which

1248
00:56:20,099 --> 00:56:27,720
is a tcp RFC similarly we use reordering

1249
00:56:23,670 --> 00:56:30,690
threshold of 3 that is again I can't

1250
00:56:27,720 --> 00:56:33,720
remember which one that is so that's one

1251
00:56:30,690 --> 00:56:35,160
issue that's the first one 30 to 45 so

1252
00:56:33,720 --> 00:56:38,419
there's a there's a suggestion and a

1253
00:56:35,160 --> 00:56:41,819
proposal in a PR there now to make that

1254
00:56:38,420 --> 00:56:45,720
RFC normative it seems completely

1255
00:56:41,819 --> 00:56:46,950
reasonable the argument is that 6 928

1256
00:56:45,720 --> 00:56:49,649
even though it was written written for

1257
00:56:46,950 --> 00:56:53,460
TCP the only discussion there is about

1258
00:56:49,650 --> 00:56:55,410
the size of the initial window and to

1259
00:56:53,460 --> 00:56:57,510
the extent that the size of the initial

1260
00:56:55,410 --> 00:56:59,490
window matters it doesn't matter what

1261
00:56:57,510 --> 00:57:02,130
the protocol any uses it's about a

1262
00:56:59,490 --> 00:57:04,410
network load so we should be able to use

1263
00:57:02,130 --> 00:57:08,279
that RFC directly and use that as the

1264
00:57:04,410 --> 00:57:10,950
basis for making our decision I won't

1265
00:57:08,279 --> 00:57:14,930
talk about 80-85 as well but I let it

1266
00:57:10,950 --> 00:57:14,930
finish 6 9 20 at first

1267
00:57:17,640 --> 00:57:20,730
so you know I guess the question is does

1268
00:57:19,319 --> 00:57:24,210
anybody does that cause anyone heartburn

1269
00:57:20,730 --> 00:57:27,059
uh yeah I I'm motivated making that

1270
00:57:24,210 --> 00:57:29,759
normative it is exp status but I think

1271
00:57:27,059 --> 00:57:32,269
it's a useful document to be normative

1272
00:57:29,759 --> 00:57:32,269
for this one

1273
00:57:33,440 --> 00:57:38,130
so there's actually so that raises an

1274
00:57:36,509 --> 00:57:39,599
interesting issue which we may have to

1275
00:57:38,130 --> 00:57:42,799
deal with later on which is that this is

1276
00:57:39,599 --> 00:57:44,940
a standards track document and 69 28 is

1277
00:57:42,799 --> 00:57:48,890
well it's a standard strack document but

1278
00:57:44,940 --> 00:57:53,420
it's experimental so we'll be putting a

1279
00:57:48,890 --> 00:57:56,430
dependency on that maybe that's alright

1280
00:57:53,420 --> 00:57:58,019
I'm happy to figure it out later on if

1281
00:57:56,430 --> 00:58:01,499
folks have concerns about that get to

1282
00:57:58,019 --> 00:58:03,299
the key to the mic 1 Martin Duke I don't

1283
00:58:01,499 --> 00:58:05,759
understand what's the difference between

1284
00:58:03,299 --> 00:58:07,829
having a normative references you 9:28

1285
00:58:05,759 --> 00:58:10,079
or just saying the initial window must

1286
00:58:07,829 --> 00:58:11,720
or should whatever be 3 in the quick

1287
00:58:10,079 --> 00:58:20,069
document just saying the reason why is

1288
00:58:11,720 --> 00:58:21,899
over here if you care well okay that's

1289
00:58:20,069 --> 00:58:24,538
interesting but then is quick

1290
00:58:21,900 --> 00:58:26,099
experimental status and and how are you

1291
00:58:24,539 --> 00:58:27,450
going to justify this choice I mean

1292
00:58:26,099 --> 00:58:28,950
someone's already done this made this

1293
00:58:27,450 --> 00:58:34,769
choice if you make it normative then

1294
00:58:28,950 --> 00:58:37,368
that choice is okay for me here's the

1295
00:58:34,769 --> 00:58:37,368
microphone please

1296
00:58:39,109 --> 00:58:46,589
yeah that seems like a great solution

1297
00:58:42,269 --> 00:58:49,470
right um I mean I thought I was that

1298
00:58:46,589 --> 00:58:51,359
soon as a great solution um you know the

1299
00:58:49,470 --> 00:58:54,569
the purpose of the text is to explain

1300
00:58:51,359 --> 00:58:55,680
what the Hector doing and like pointing

1301
00:58:54,569 --> 00:58:57,839
their document explains if it's not a

1302
00:58:55,680 --> 00:58:59,368
normative reference it's like it's just

1303
00:58:57,839 --> 00:59:00,779
like citing a paper you say we said it

1304
00:58:59,369 --> 00:59:08,609
this value and go read this paper to

1305
00:59:00,779 --> 00:59:10,890
find out why so so Cory is it your is it

1306
00:59:08,609 --> 00:59:14,279
your contention that we should not have

1307
00:59:10,890 --> 00:59:15,690
the normative so I mean I like how the

1308
00:59:14,279 --> 00:59:17,369
documents are arranged I think is is

1309
00:59:15,690 --> 00:59:18,630
secondary like the question is should

1310
00:59:17,369 --> 00:59:23,930
the should we have a normative reference

1311
00:59:18,630 --> 00:59:23,930
on what the initial window is or not

1312
00:59:24,380 --> 00:59:29,720
I think we should and I think that's

1313
00:59:27,680 --> 00:59:31,848
what I would advocate here if the ad

1314
00:59:29,720 --> 00:59:33,709
finally decides it's a downdraft that

1315
00:59:31,849 --> 00:59:35,779
they don't want to put up with then they

1316
00:59:33,710 --> 00:59:37,160
can take it back but I think we should

1317
00:59:35,779 --> 00:59:39,229
have it as a normative that reference

1318
00:59:37,160 --> 00:59:46,069
because it is the basis on which this

1319
00:59:39,229 --> 00:59:48,019
decision is being made but I don't think

1320
00:59:46,069 --> 00:59:49,549
that's most people's understanding with

1321
00:59:48,019 --> 00:59:51,558
it we take the pacing requirement that

1322
00:59:49,549 --> 00:59:53,660
goes with it and if that pace and

1323
00:59:51,559 --> 00:59:55,880
requirements removed then this document

1324
00:59:53,660 --> 00:59:57,348
could be changed or you're saying just

1325
00:59:55,880 --> 00:59:59,329
going to dependently do the experiment

1326
00:59:57,349 --> 01:00:14,989
you clear that as an experiment going to

1327
00:59:59,329 --> 01:00:16,519
do here I mean so what normal

1328
01:00:14,989 --> 01:00:18,499
requirement means is you have to

1329
01:00:16,519 --> 01:00:19,788
understand in order to understand the

1330
01:00:18,499 --> 01:00:22,939
specification you're reading you have to

1331
01:00:19,789 --> 01:00:23,900
read the other thing and but what I'm

1332
01:00:22,940 --> 01:00:26,180
not gonna agree anything right now

1333
01:00:23,900 --> 01:00:27,349
because the I understand the

1334
01:00:26,180 --> 01:00:30,190
specification perfectly well it's got a

1335
01:00:27,349 --> 01:00:32,869
number in it the numbers there the the

1336
01:00:30,190 --> 01:00:34,460
an informational reference means that

1337
01:00:32,869 --> 01:00:35,779
you may want to read this in order to

1338
01:00:34,460 --> 01:00:37,999
understand but background or other

1339
01:00:35,779 --> 01:00:39,440
information but I don't like the number

1340
01:00:37,999 --> 01:00:41,390
sufficient to put the specification and

1341
01:00:39,440 --> 01:00:43,940
so like like if you look like like any

1342
01:00:41,390 --> 01:00:46,249
random like like crypto like bit using

1343
01:00:43,940 --> 01:00:48,140
thing it's like for like references but

1344
01:00:46,249 --> 01:00:50,180
like paper isn't like in like trying to

1345
01:00:48,140 --> 01:00:50,450
plate SNP and use this security in those

1346
01:00:50,180 --> 01:00:52,399
things

1347
01:00:50,450 --> 01:00:53,660
and they're all and like I'm like he's

1348
01:00:52,400 --> 01:00:56,210
very hard understand that the technical

1349
01:00:53,660 --> 01:00:57,799
choices we've made like like like in and

1350
01:00:56,210 --> 01:00:59,359
you know in these protocols that are

1351
01:00:57,799 --> 01:01:00,680
reading those papers but you don't need

1352
01:00:59,359 --> 01:01:02,630
to and that's why they're informative

1353
01:01:00,680 --> 01:01:04,879
references and it's the same and so they

1354
01:01:02,630 --> 01:01:06,859
said to which the reason that you recent

1355
01:01:04,880 --> 01:01:08,269
is this is the background for this

1356
01:01:06,859 --> 01:01:11,690
number is chosen as informative

1357
01:01:08,269 --> 01:01:15,410
reference okay I see lots of nodding

1358
01:01:11,690 --> 01:01:18,499
heads so let's keep it brief I don't

1359
01:01:15,410 --> 01:01:21,490
want to spend too much time on this gory

1360
01:01:18,499 --> 01:01:23,589
one last word and yeah

1361
01:01:21,490 --> 01:01:28,720
like no we should figure out what we

1362
01:01:23,590 --> 01:01:31,330
want to do yeah yeah yeah let's take

1363
01:01:28,720 --> 01:01:34,060
this offline I think but we've heard

1364
01:01:31,330 --> 01:01:41,970
from a bunch of people editors any

1365
01:01:34,060 --> 01:01:46,590
others on recovery so there's a similar

1366
01:01:41,970 --> 01:01:53,350
slightly different but question on 80 85

1367
01:01:46,590 --> 01:01:56,230
so 80 85 is the UDP guidelines RFC I

1368
01:01:53,350 --> 01:01:58,990
can't remember the exact title but it's

1369
01:01:56,230 --> 01:02:01,570
basically about Europe eBay's protocols

1370
01:01:58,990 --> 01:02:05,680
and they're specifically targeting the

1371
01:02:01,570 --> 01:02:07,240
conditional control behavior the

1372
01:02:05,680 --> 01:02:09,850
question here was should we have a

1373
01:02:07,240 --> 01:02:12,459
normative reference to that RFC in

1374
01:02:09,850 --> 01:02:14,710
recovery draft given that we talked

1375
01:02:12,460 --> 01:02:17,860
about congestion control but we also do

1376
01:02:14,710 --> 01:02:24,310
allow but does the does the issue that

1377
01:02:17,860 --> 01:02:27,520
was raised so yeah so there's a PR that

1378
01:02:24,310 --> 01:02:31,690
there's a PR that that fixes this but it

1379
01:02:27,520 --> 01:02:33,880
also has changes 80-85 to nominator now

1380
01:02:31,690 --> 01:02:35,230
this is not a tcp RFC so this doesn't go

1381
01:02:33,880 --> 01:02:42,160
against anything we've agreed on in the

1382
01:02:35,230 --> 01:02:44,080
past I think this is reasonable I also

1383
01:02:42,160 --> 01:02:46,390
think this is reasonable although if we

1384
01:02:44,080 --> 01:02:47,799
if our position is that we just don't

1385
01:02:46,390 --> 01:02:49,390
want normative references in this doc

1386
01:02:47,800 --> 01:02:51,220
then obviously we shouldn't do this but

1387
01:02:49,390 --> 01:02:54,299
I think this is a much more reasonable

1388
01:02:51,220 --> 01:02:55,810
choice for every

1389
01:02:54,300 --> 01:02:58,900
any comment on that

1390
01:02:55,810 --> 01:02:59,410
yeah so sometimes I'm I think the PR is

1391
01:02:58,900 --> 01:03:02,109
fine

1392
01:02:59,410 --> 01:03:04,450
this issue was sadly worded we don't

1393
01:03:02,109 --> 01:03:05,710
take normative references unless we have

1394
01:03:04,450 --> 01:03:08,439
a reason to take a normative reference

1395
01:03:05,710 --> 01:03:09,880
the bug that we had in here was that we

1396
01:03:08,440 --> 01:03:12,609
had a specification that defined a

1397
01:03:09,880 --> 01:03:17,020
congestion control algorithm that did

1398
01:03:12,609 --> 01:03:19,509
not that was optional effectively but

1399
01:03:17,020 --> 01:03:22,900
did we did not have a requirement to say

1400
01:03:19,510 --> 01:03:25,030
that if you do quick you need to have

1401
01:03:22,900 --> 01:03:27,160
some form of congestion control

1402
01:03:25,030 --> 01:03:29,350
mechanism and that is what 80-85

1403
01:03:27,160 --> 01:03:31,089
provides for us and that is what we're

1404
01:03:29,350 --> 01:03:33,569
depending on it for and this PR fixes

1405
01:03:31,090 --> 01:03:33,570
their problem

1406
01:03:38,250 --> 01:03:52,119
anything else editors if people have

1407
01:03:50,350 --> 01:03:55,080
time now right now if they care about

1408
01:03:52,119 --> 01:03:58,330
the hen handshake deadlock prevention

1409
01:03:55,080 --> 01:04:00,790
stuff I would request that they take a

1410
01:03:58,330 --> 01:04:02,710
look at 31 61 and the attached PR and

1411
01:04:00,790 --> 01:04:04,600
give me feedback as to whether I should

1412
01:04:02,710 --> 01:04:05,859
just close it with no action or not but

1413
01:04:04,600 --> 01:04:08,080
we don't need to discuss it now

1414
01:04:05,859 --> 01:04:09,310
but I asked for a review just cuz I

1415
01:04:08,080 --> 01:04:11,380
think only three people or two people

1416
01:04:09,310 --> 01:04:14,259
have looked at it and then the other

1417
01:04:11,380 --> 01:04:16,750
issue is I think Praveen had one or two

1418
01:04:14,260 --> 01:04:20,260
issues that is there anything critically

1419
01:04:16,750 --> 01:04:23,200
do you want to discuss Praveen yeah

1420
01:04:20,260 --> 01:04:24,880
billion I I just opened few recently so

1421
01:04:23,200 --> 01:04:26,939
I would request the editors to review

1422
01:04:24,880 --> 01:04:29,140
them and there are other folks as well

1423
01:04:26,940 --> 01:04:31,390
there's at least seems to be one safety

1424
01:04:29,140 --> 01:04:33,430
should that I found in the AB Limited

1425
01:04:31,390 --> 01:04:36,990
case and there is two deviations from

1426
01:04:33,430 --> 01:04:47,290
TCP calculations for a certain time so

1427
01:04:36,990 --> 01:04:50,529
we should reconcile those okay so same

1428
01:04:47,290 --> 01:04:56,200
question for HTTP what issues do we want

1429
01:04:50,530 --> 01:04:58,690
to discuss so probably the most thorny

1430
01:04:56,200 --> 01:05:02,439
one we already discussed we've got a

1431
01:04:58,690 --> 01:05:05,590
couple that are assigned some with

1432
01:05:02,440 --> 01:05:07,180
outstanding PRS so I think the main one

1433
01:05:05,590 --> 01:05:13,380
that I'd like to see working group

1434
01:05:07,180 --> 01:05:13,379
feedback on today is 30 to 65

1435
01:05:14,080 --> 01:05:21,819
so this one is notable and that it's

1436
01:05:18,280 --> 01:05:27,840
requesting something that is kind of new

1437
01:05:21,820 --> 01:05:31,210
to HTTP and kind of not so basically in

1438
01:05:27,840 --> 01:05:33,070
each one you have headers before the

1439
01:05:31,210 --> 01:05:34,510
body you have trailers after the body

1440
01:05:33,070 --> 01:05:36,940
and if you're doing chunks you have

1441
01:05:34,510 --> 01:05:39,730
chunk extensions trying to sort out

1442
01:05:36,940 --> 01:05:41,950
which are their own thing in h2 we don't

1443
01:05:39,730 --> 01:05:44,380
have chunky extensions but you can send

1444
01:05:41,950 --> 01:05:47,470
headers you can send trailers this is a

1445
01:05:44,380 --> 01:05:47,980
request that we remove the restriction

1446
01:05:47,470 --> 01:05:50,319
that there

1447
01:05:47,980 --> 01:05:52,600
only be trailers after the body and say

1448
01:05:50,320 --> 01:05:55,000
that you can send trailers at any point

1449
01:05:52,600 --> 01:05:57,400
after the body has started and they're

1450
01:05:55,000 --> 01:06:01,780
all just trailers they can arrive any

1451
01:05:57,400 --> 01:06:04,390
time that's a little bit of a change I

1452
01:06:01,780 --> 01:06:05,859
don't think it's breaking anything I

1453
01:06:04,390 --> 01:06:07,690
don't think it's required by our Charter

1454
01:06:05,859 --> 01:06:11,259
so I just like to get feedback about

1455
01:06:07,690 --> 01:06:15,400
whether we want that or not because you

1456
01:06:11,260 --> 01:06:18,940
have the whole guy thing this proposal

1457
01:06:15,400 --> 01:06:21,900
by itself is a sensible thing though I

1458
01:06:18,940 --> 01:06:24,640
wonder if the quick working group is

1459
01:06:21,900 --> 01:06:27,310
expected next decision so I think it

1460
01:06:24,640 --> 01:06:30,100
might actually be a good idea to raise

1461
01:06:27,310 --> 01:06:32,590
this topic as an HTTP working group

1462
01:06:30,100 --> 01:06:41,400
issue and then discuss this as an

1463
01:06:32,590 --> 01:06:44,980
extension to http 2 and HTTP 3 so with

1464
01:06:41,400 --> 01:06:47,109
various chair hats on I think we do need

1465
01:06:44,980 --> 01:06:48,250
to go and at least highlight this in the

1466
01:06:47,109 --> 01:06:49,869
HP working group and make sure that

1467
01:06:48,250 --> 01:06:53,170
there's comfort there there are folks

1468
01:06:49,869 --> 01:06:56,410
like Julian who aren't following this as

1469
01:06:53,170 --> 01:06:58,600
closely over there I have a personal

1470
01:06:56,410 --> 01:07:02,259
response but I'll let the queue drain go

1471
01:06:58,600 --> 01:07:03,910
ahead that's her McManus on its face

1472
01:07:02,260 --> 01:07:05,920
this is perfectly reasonable this was

1473
01:07:03,910 --> 01:07:08,589
perfectly reasonable also in each one

1474
01:07:05,920 --> 01:07:11,080
and as I recall we didn't add a hook for

1475
01:07:08,590 --> 01:07:12,940
it into h2 because it was never used

1476
01:07:11,080 --> 01:07:15,100
and given the no-one's clamoring for it

1477
01:07:12,940 --> 01:07:16,990
this time I can you speak up just a tiny

1478
01:07:15,100 --> 01:07:18,400
bit and given that there's no strong use

1479
01:07:16,990 --> 01:07:25,660
case presented here I think we ought to

1480
01:07:18,400 --> 01:07:27,580
really let that decision ride so so

1481
01:07:25,660 --> 01:07:30,190
Mountain Thomson we more or less signed

1482
01:07:27,580 --> 01:07:32,680
on with the contract of porting the h2

1483
01:07:30,190 --> 01:07:35,200
cymatics across which were very clear

1484
01:07:32,680 --> 01:07:41,529
about where trailers can appear this is

1485
01:07:35,200 --> 01:07:43,299
kind of cool idea though so but I I

1486
01:07:41,530 --> 01:07:44,290
think that the request here needs to

1487
01:07:43,300 --> 01:07:50,170
come from the air should he be working

1488
01:07:44,290 --> 01:07:52,450
heard Luke's party I'm just reading this

1489
01:07:50,170 --> 01:07:56,680
description I wasn't sure if Roy's

1490
01:07:52,450 --> 01:07:59,140
request put in scope any idea of this

1491
01:07:56,680 --> 01:08:01,109
kind of behavior for server push or they

1492
01:07:59,140 --> 01:08:03,810
pushed response

1493
01:08:01,110 --> 01:08:05,760
push request from server to client so I

1494
01:08:03,810 --> 01:08:10,290
think there is something to keep in mind

1495
01:08:05,760 --> 01:08:14,310
and I might do that so how would that

1496
01:08:10,290 --> 01:08:19,050
affect push is is the feature request

1497
01:08:14,310 --> 01:08:22,800
here applicable to pushed requests ie

1498
01:08:19,050 --> 01:08:28,560
is only capability to add trailers to

1499
01:08:22,800 --> 01:08:31,680
pushed requests so if the answer's no

1500
01:08:28,560 --> 01:08:34,320
then that's a constraint of this which

1501
01:08:31,680 --> 01:08:40,770
is already there but should be kept in

1502
01:08:34,319 --> 01:08:43,349
mind ok um mr. Roy fielding to answer

1503
01:08:40,770 --> 01:08:47,810
that Lucas's question I I'm not aware of

1504
01:08:43,350 --> 01:08:50,280
any tie to push I would say responses I

1505
01:08:47,810 --> 01:08:52,320
don't think it's requests be close to

1506
01:08:50,279 --> 01:08:54,779
the mic place on the I don't think

1507
01:08:52,319 --> 01:08:57,660
there's any place I'm not aware of any

1508
01:08:54,779 --> 01:09:00,719
connection to push responses that would

1509
01:08:57,660 --> 01:09:02,189
require a trailer but then I would I

1510
01:09:00,720 --> 01:09:05,100
don't have all that much experience

1511
01:09:02,189 --> 01:09:10,469
using push responses that lasts for more

1512
01:09:05,100 --> 01:09:12,150
than a single frame in this I wanted I

1513
01:09:10,470 --> 01:09:16,050
wanted to came with Micra for it to

1514
01:09:12,149 --> 01:09:19,259
point out that when we discussed HTTP to

1515
01:09:16,050 --> 01:09:20,730
a lot of emphasis was made is that we do

1516
01:09:19,260 --> 01:09:23,430
all these things in the next version of

1517
01:09:20,729 --> 01:09:25,620
hb2 as soon as this working group

1518
01:09:23,430 --> 01:09:27,600
started folks said well we're not going

1519
01:09:25,620 --> 01:09:28,439
to do another working group hp-2 so

1520
01:09:27,600 --> 01:09:33,080
guess what

1521
01:09:28,439 --> 01:09:36,719
quic is a CPU version 2 and if we do not

1522
01:09:33,080 --> 01:09:40,319
act responsibly when we have needs

1523
01:09:36,720 --> 01:09:42,480
within the protocol just because of the

1524
01:09:40,319 --> 01:09:46,309
chartering discussion the Charter must

1525
01:09:42,479 --> 01:09:48,629
change because it's taking over a

1526
01:09:46,310 --> 01:09:52,200
protocol that's very important to the

1527
01:09:48,630 --> 01:09:55,740
internet and we can't have continuing

1528
01:09:52,200 --> 01:10:00,090
7-year blocks of time that cannot adjust

1529
01:09:55,740 --> 01:10:01,530
the basic protocol because the working

1530
01:10:00,090 --> 01:10:06,210
group that's working on the next version

1531
01:10:01,530 --> 01:10:07,679
it doesn't want to address changes that

1532
01:10:06,210 --> 01:10:10,170
might have come up for the previous

1533
01:10:07,680 --> 01:10:12,390
version ok I just don't so if you have a

1534
01:10:10,170 --> 01:10:14,910
proposal for a charter change well I

1535
01:10:12,390 --> 01:10:16,500
mean my right my suggestion

1536
01:10:14,910 --> 01:10:18,150
is that this is within the scope of the

1537
01:10:16,500 --> 01:10:19,650
Charter because it refers to http

1538
01:10:18,150 --> 01:10:22,589
semantics I don't think anyone's

1539
01:10:19,650 --> 01:10:27,450
disputing that it on charter scope right

1540
01:10:22,590 --> 01:10:31,860
now so so keep your powder dry I'm gonna

1541
01:10:27,450 --> 01:10:40,139
cut the cue but go ahead David skin Ozzy

1542
01:10:31,860 --> 01:10:42,719
Google Chrome if there was a use for

1543
01:10:40,140 --> 01:10:48,150
this someone would have built it as an

1544
01:10:42,720 --> 01:10:51,270
extension to HTTP too often like when

1545
01:10:48,150 --> 01:10:53,009
there is a use case for something people

1546
01:10:51,270 --> 01:10:54,870
build it so that I get that that's not

1547
01:10:53,010 --> 01:10:56,310
entirely true come because sometimes the

1548
01:10:54,870 --> 01:10:58,559
people who build it or not the same

1549
01:10:56,310 --> 01:11:00,450
people who write the stacks but very

1550
01:10:58,560 --> 01:11:02,490
often you'll hear at them clamoring that

1551
01:11:00,450 --> 01:11:04,080
they want a new feature and especially

1552
01:11:02,490 --> 01:11:07,170
when a feature can be trivially

1553
01:11:04,080 --> 01:11:09,660
implemented as an extension there would

1554
01:11:07,170 --> 01:11:12,410
have been some movement there I would

1555
01:11:09,660 --> 01:11:17,099
much rather see this as an extension and

1556
01:11:12,410 --> 01:11:20,670
if look like we've been doing with like

1557
01:11:17,100 --> 01:11:22,260
gos 1:3 and htv-3 popular extensions get

1558
01:11:20,670 --> 01:11:25,800
ported into the next version of the

1559
01:11:22,260 --> 01:11:28,790
protocol this is not a population of h2

1560
01:11:25,800 --> 01:11:31,410
that warrants putting into h3 so I would

1561
01:11:28,790 --> 01:11:33,210
and on top of that this would require

1562
01:11:31,410 --> 01:11:35,639
some work which I'd rather not have to

1563
01:11:33,210 --> 01:11:37,290
do so I strongly encourage this to

1564
01:11:35,640 --> 01:11:39,870
become an extension and if it gets

1565
01:11:37,290 --> 01:11:45,000
widely used then we can add it to the

1566
01:11:39,870 --> 01:11:45,630
next revision Victor the keys cut Martin

1567
01:11:45,000 --> 01:11:48,540
Duke

1568
01:11:45,630 --> 01:11:53,580
I have no technical opinion this at all

1569
01:11:48,540 --> 01:11:55,920
but I think if we are going to mess with

1570
01:11:53,580 --> 01:11:57,330
hb2 in ways they're not immediately

1571
01:11:55,920 --> 01:11:58,710
germane to quick I think we should you

1572
01:11:57,330 --> 01:11:59,820
have DHT to be working group give us

1573
01:11:58,710 --> 01:12:02,490
guidance and as long as it doesn't

1574
01:11:59,820 --> 01:12:04,019
influence the the schedule we can try to

1575
01:12:02,490 --> 01:12:05,940
bring it in and that's kind of it Mike's

1576
01:12:04,020 --> 01:12:07,350
prerogative and I'd rather not waste

1577
01:12:05,940 --> 01:12:08,879
more time discussing the technical

1578
01:12:07,350 --> 01:12:10,470
merits of that in this forum with people

1579
01:12:08,880 --> 01:12:11,580
who don't know what they're well people

1580
01:12:10,470 --> 01:12:12,060
like me who don't know what they're

1581
01:12:11,580 --> 01:12:17,460
talking about

1582
01:12:12,060 --> 01:12:18,750
Thanks so I think we're hearing you know

1583
01:12:17,460 --> 01:12:20,850
that the impetus for this has to come

1584
01:12:18,750 --> 01:12:23,100
from the HTTP working group and I think

1585
01:12:20,850 --> 01:12:26,820
from from a charter standpoint you know

1586
01:12:23,100 --> 01:12:28,679
we're chartered I think to allow the

1587
01:12:26,820 --> 01:12:32,190
semantics of HTTP to

1588
01:12:28,679 --> 01:12:33,659
that's been a problematic phrase in the

1589
01:12:32,190 --> 01:12:35,669
Charter for a while because really the

1590
01:12:33,659 --> 01:12:38,519
semantics of http/2 are driven by the

1591
01:12:35,670 --> 01:12:40,409
generic semantics of HTTP and so this is

1592
01:12:38,520 --> 01:12:42,960
probably an HTTP core issue if those

1593
01:12:40,409 --> 01:12:45,420
semantics are excuse me clarified in

1594
01:12:42,960 --> 01:12:48,330
HTTP core we can choose to bubble those

1595
01:12:45,420 --> 01:12:50,250
into HTTP three and that would be the

1596
01:12:48,330 --> 01:12:52,230
path I think that would be most sensible

1597
01:12:50,250 --> 01:12:54,630
for this I think personally I agree with

1598
01:12:52,230 --> 01:12:57,000
Martin this is this is pretty cool I

1599
01:12:54,630 --> 01:12:58,230
think a lot of people can imagine use

1600
01:12:57,000 --> 01:13:00,420
cases for this if we're commonly

1601
01:12:58,230 --> 01:13:02,940
available what I like about it is that

1602
01:13:00,420 --> 01:13:04,739
it's backwards compatible with existing

1603
01:13:02,940 --> 01:13:06,059
api's you know it's there's one thing

1604
01:13:04,739 --> 01:13:08,428
about the wire serialization and

1605
01:13:06,060 --> 01:13:11,100
decoding the frames and everything but

1606
01:13:08,429 --> 01:13:12,989
there's another thing about how do I

1607
01:13:11,100 --> 01:13:15,360
bubble this up to applications and if my

1608
01:13:12,989 --> 01:13:17,218
API doesn't support having trailers in

1609
01:13:15,360 --> 01:13:18,839
the middle I can just collect them and

1610
01:13:17,219 --> 01:13:20,850
then make them available at the end if

1611
01:13:18,840 --> 01:13:23,100
the trailer supports normal trailers the

1612
01:13:20,850 --> 01:13:25,409
API supports normal trailers so I think

1613
01:13:23,100 --> 01:13:27,420
it's deployable but let's have the

1614
01:13:25,409 --> 01:13:29,549
discussion in the HT working group Roy

1615
01:13:27,420 --> 01:13:31,380
maybe perhaps you could open an issue on

1616
01:13:29,550 --> 01:13:35,360
core and we can discuss it even tomorrow

1617
01:13:31,380 --> 01:13:44,400
and then see where that goes make sense

1618
01:13:35,360 --> 01:13:47,639
okay sorry an issue in yes an issue in

1619
01:13:44,400 --> 01:13:49,139
core place HTTP core thank you

1620
01:13:47,640 --> 01:13:50,370
I assume that's what you mean by the

1621
01:13:49,140 --> 01:13:53,969
other group we're not gonna blow third

1622
01:13:50,370 --> 01:13:55,769
group into this all right okay good like

1623
01:13:53,969 --> 01:13:59,070
any other HTTP issues you want to

1624
01:13:55,770 --> 01:14:01,320
discuss now I think most of the others

1625
01:13:59,070 --> 01:14:03,179
have pending resolutions or at least

1626
01:14:01,320 --> 01:14:06,030
assignments so if you have an issue

1627
01:14:03,179 --> 01:14:08,150
assigned to you please make progress on

1628
01:14:06,030 --> 01:14:10,679
that PR I would appreciate it and

1629
01:14:08,150 --> 01:14:12,269
otherwise I think we might be better

1630
01:14:10,679 --> 01:14:14,640
served by giving the other presentations

1631
01:14:12,270 --> 01:14:16,320
so I didn't catch that we might be

1632
01:14:14,640 --> 01:14:19,230
better served by the other presentations

1633
01:14:16,320 --> 01:14:21,659
okay so one more thing before we go to

1634
01:14:19,230 --> 01:14:24,629
those we have an open call for consensus

1635
01:14:21,659 --> 01:14:27,269
on taking the recovery and HP documents

1636
01:14:24,630 --> 01:14:28,650
to the late-stage process from talking

1637
01:14:27,270 --> 01:14:30,659
to folks I think we're pretty much ready

1638
01:14:28,650 --> 01:14:32,280
to do that believe that open a little

1639
01:14:30,659 --> 01:14:34,080
bit longer for any other further

1640
01:14:32,280 --> 01:14:35,849
feedback on the mailing list and then

1641
01:14:34,080 --> 01:14:40,550
we'll we'll make the transition for

1642
01:14:35,850 --> 01:14:40,550
those okay

1643
01:14:44,570 --> 01:14:51,410
so what ordering did we decide upon we

1644
01:14:47,580 --> 01:14:51,410
decided on pun datagrams first

1645
01:15:00,820 --> 01:15:12,490
sorry um it's not gonna do you any good

1646
01:15:05,010 --> 01:15:16,530
sorry yeah one moment I'm not gonna put

1647
01:15:12,490 --> 01:15:16,530
random USB things in my laptop nice try

1648
01:15:16,660 --> 01:15:19,800
[Music]

1649
01:15:22,140 --> 01:15:30,760
go ahead Eric all right we're gonna try

1650
01:15:29,140 --> 01:15:32,230
to keep this decently short because it's

1651
01:15:30,760 --> 01:15:34,660
fairly straightforward and we've got a

1652
01:15:32,230 --> 01:15:35,709
lot of other good stuff to do so I'm

1653
01:15:34,660 --> 01:15:37,870
gonna try to get through all the slides

1654
01:15:35,710 --> 01:15:39,580
and then we'll talk a little bit at the

1655
01:15:37,870 --> 01:15:42,250
end of that so we've talked about this

1656
01:15:39,580 --> 01:15:44,200
before and we've had some side meetings

1657
01:15:42,250 --> 01:15:47,230
and other things in which many of you

1658
01:15:44,200 --> 01:15:48,550
have engaged so thank you for that but

1659
01:15:47,230 --> 01:15:53,110
I'm Eric Kinnear in the middle of this

1660
01:15:48,550 --> 01:15:54,340
slide and let's talk datagrams so in

1661
01:15:53,110 --> 01:15:55,389
some of the side meetings and the other

1662
01:15:54,340 --> 01:15:58,240
conversations that we've been having

1663
01:15:55,390 --> 01:15:59,800
we've learned a very long list of use

1664
01:15:58,240 --> 01:16:02,019
cases where people think that they would

1665
01:15:59,800 --> 01:16:04,450
like to use datagrams to support

1666
01:16:02,020 --> 01:16:05,980
unreliable data transmission and I put a

1667
01:16:04,450 --> 01:16:09,070
couple on this slide but there's really

1668
01:16:05,980 --> 01:16:10,870
way more and really the the thing that

1669
01:16:09,070 --> 01:16:13,059
seems to shine and come out from all

1670
01:16:10,870 --> 01:16:15,160
these are our applications that would

1671
01:16:13,060 --> 01:16:17,850
like to have a reliable control stream

1672
01:16:15,160 --> 01:16:21,910
or some sort of negotiation and and

1673
01:16:17,850 --> 01:16:23,500
reliable transmission of information

1674
01:16:21,910 --> 01:16:25,630
between the two endpoints to coordinate

1675
01:16:23,500 --> 01:16:30,220
some other transmission which can then

1676
01:16:25,630 --> 01:16:32,410
be unreliable we also notice here that

1677
01:16:30,220 --> 01:16:36,880
quick provides functionality beyond what

1678
01:16:32,410 --> 01:16:38,620
you just get over DTLS and UDP a lot of

1679
01:16:36,880 --> 01:16:41,800
that being the multiplexing of these

1680
01:16:38,620 --> 01:16:43,180
streams and the last reason we really

1681
01:16:41,800 --> 01:16:44,410
wanted to do this was because it's a

1682
01:16:43,180 --> 01:16:46,030
very straightforward extension that

1683
01:16:44,410 --> 01:16:47,830
makes sure that we can kind of grease

1684
01:16:46,030 --> 01:16:51,090
and use the extension mechanism and make

1685
01:16:47,830 --> 01:16:54,160
sure that it's working next slide please

1686
01:16:51,090 --> 01:16:57,220
so we want datagrams in quick as opposed

1687
01:16:54,160 --> 01:16:58,450
to just dt OS or somewhere else because

1688
01:16:57,220 --> 01:17:00,580
we want to be able to share that same

1689
01:16:58,450 --> 01:17:01,929
handshake and authentication context

1690
01:17:00,580 --> 01:17:02,980
that you're using for your reliable

1691
01:17:01,930 --> 01:17:04,510
stream data in your existing

1692
01:17:02,980 --> 01:17:08,889
communication with some other endpoint

1693
01:17:04,510 --> 01:17:11,740
for unreliable data as well along with

1694
01:17:08,890 --> 01:17:14,620
using that handshake etc etc comes with

1695
01:17:11,740 --> 01:17:17,380
the fact that quick generally is

1696
01:17:14,620 --> 01:17:19,750
going to work pretty well for that for

1697
01:17:17,380 --> 01:17:22,570
example DTLS retransmits handshake

1698
01:17:19,750 --> 01:17:24,370
packets on a fixed timer and quick is

1699
01:17:22,570 --> 01:17:26,460
going to be using the full mechanisms of

1700
01:17:24,370 --> 01:17:28,599
quick to get packets to the other side

1701
01:17:26,460 --> 01:17:30,490
and there's also a bunch of other quick

1702
01:17:28,600 --> 01:17:31,720
features that are really nice so things

1703
01:17:30,490 --> 01:17:34,059
like transport parameters and the

1704
01:17:31,720 --> 01:17:35,950
ability to negotiate things upfront

1705
01:17:34,060 --> 01:17:38,290
having acknowledgments of this Datagram

1706
01:17:35,950 --> 01:17:39,760
data so even if it's not retransmitted

1707
01:17:38,290 --> 01:17:41,380
you can tell whether or not it got there

1708
01:17:39,760 --> 01:17:45,070
and potentially adjust your sending rate

1709
01:17:41,380 --> 01:17:47,230
or or make other choices based on that

1710
01:17:45,070 --> 01:17:48,460
information and you can also multiplex

1711
01:17:47,230 --> 01:17:52,150
additional content over the same

1712
01:17:48,460 --> 01:17:55,240
transport so you have the ability to sit

1713
01:17:52,150 --> 01:17:57,730
there and and have your control stream

1714
01:17:55,240 --> 01:18:00,340
have some other content going and bring

1715
01:17:57,730 --> 01:18:02,830
up multiple different streams worth of

1716
01:18:00,340 --> 01:18:06,310
data one of which is this unreliable

1717
01:18:02,830 --> 01:18:07,900
Datagram next please the design has

1718
01:18:06,310 --> 01:18:09,280
simplified greatly since we first

1719
01:18:07,900 --> 01:18:12,879
started talking about it so thank you

1720
01:18:09,280 --> 01:18:15,730
all for your feedback there's now two

1721
01:18:12,880 --> 01:18:17,560
frame identifiers and it's really just

1722
01:18:15,730 --> 01:18:18,669
the the last bit there determines

1723
01:18:17,560 --> 01:18:20,710
whether or not there's a length field

1724
01:18:18,670 --> 01:18:22,420
present so if there's a link field

1725
01:18:20,710 --> 01:18:24,610
present to you have a Datagram frame

1726
01:18:22,420 --> 01:18:26,640
followed by the length of that Datagram

1727
01:18:24,610 --> 01:18:29,170
frame and then whatever data you want

1728
01:18:26,640 --> 01:18:30,760
and if it's not present then it extends

1729
01:18:29,170 --> 01:18:32,710
to the end of the packet so you can skip

1730
01:18:30,760 --> 01:18:34,660
that extra overhead for those of us who

1731
01:18:32,710 --> 01:18:36,250
are super concerned about overhead which

1732
01:18:34,660 --> 01:18:37,330
starts to actually matter when you start

1733
01:18:36,250 --> 01:18:37,840
talking about tunneling and doing some

1734
01:18:37,330 --> 01:18:40,540
other things

1735
01:18:37,840 --> 01:18:42,160
it's a negotiated via the max Datagram

1736
01:18:40,540 --> 01:18:43,630
frame size transport parameter which

1737
01:18:42,160 --> 01:18:48,360
helps a lot when you're looking at

1738
01:18:43,630 --> 01:18:50,830
things like PLP MTU D next slide please

1739
01:18:48,360 --> 01:18:52,089
so in terms of the details that we've

1740
01:18:50,830 --> 01:18:53,470
hammered out since we started talking

1741
01:18:52,090 --> 01:18:55,060
about this Datagram frames are act

1742
01:18:53,470 --> 01:18:58,060
eliciting they are not retransmitted

1743
01:18:55,060 --> 01:19:00,100
ping is the same way but in at least our

1744
01:18:58,060 --> 01:19:01,540
implementation we discovered we'd made

1745
01:19:00,100 --> 01:19:03,670
some interesting assumptions about what

1746
01:19:01,540 --> 01:19:05,560
a Calissa ting meant in terms of

1747
01:19:03,670 --> 01:19:07,030
recovery and congestion control so we

1748
01:19:05,560 --> 01:19:08,770
need to make sure that we have the

1749
01:19:07,030 --> 01:19:10,540
distinction between frames that are not

1750
01:19:08,770 --> 01:19:12,820
retransmitted and frames that are

1751
01:19:10,540 --> 01:19:16,269
separately from frames that are act

1752
01:19:12,820 --> 01:19:18,759
versus not they also do not contribute

1753
01:19:16,270 --> 01:19:21,130
to flow control limits however they are

1754
01:19:18,760 --> 01:19:22,690
congestion controlled so you've got your

1755
01:19:21,130 --> 01:19:25,000
congestion control getting your pipe of

1756
01:19:22,690 --> 01:19:27,280
data to the other side of your

1757
01:19:25,000 --> 01:19:28,489
connection but there is no sane way to

1758
01:19:27,280 --> 01:19:31,429
do flow control here so

1759
01:19:28,489 --> 01:19:32,570
we took that out flow IDs are also gone

1760
01:19:31,429 --> 01:19:34,969
thank you for your lovely feedback

1761
01:19:32,570 --> 01:19:36,380
however they didn't go super far david

1762
01:19:34,969 --> 01:19:39,559
has written up a draft that adds flow

1763
01:19:36,380 --> 01:19:41,119
IDs into the HT p3 datagrams which can

1764
01:19:39,559 --> 01:19:44,389
live on top of this so it's pretty much

1765
01:19:41,119 --> 01:19:47,239
exactly the same but it solves a lot of

1766
01:19:44,389 --> 01:19:50,179
thief low ID questions so please take a

1767
01:19:47,239 --> 01:19:52,159
look at that document and go there and

1768
01:19:50,179 --> 01:19:54,349
the other thing that's noted in here is

1769
01:19:52,159 --> 01:19:56,179
that max Datagram frame size can be

1770
01:19:54,349 --> 01:19:59,590
stored and used in gr rtt requests

1771
01:19:56,179 --> 01:19:59,590
etcetera etcetera next slide please

1772
01:19:59,710 --> 01:20:03,530
we were really really happy to see that

1773
01:20:02,119 --> 01:20:05,210
at the hackathon we actually got some

1774
01:20:03,530 --> 01:20:06,920
inter up on here and there are several

1775
01:20:05,210 --> 01:20:08,150
more implementations even since I wrote

1776
01:20:06,920 --> 01:20:09,469
the slide that I know I've been looking

1777
01:20:08,150 --> 01:20:12,289
at adding Datagram support because it

1778
01:20:09,469 --> 01:20:13,909
should be pretty quick but we've got

1779
01:20:12,289 --> 01:20:16,369
several that that are already doing it

1780
01:20:13,909 --> 01:20:18,558
and also thank you folks for the

1781
01:20:16,369 --> 01:20:19,999
Wireshark toast sector tea screenshot oh

1782
01:20:18,559 --> 01:20:21,440
that's pretty fun you have a little data

1783
01:20:19,999 --> 01:20:26,210
gram thing and then there's a blob that

1784
01:20:21,440 --> 01:20:28,159
currently says quack so yeah so it so

1785
01:20:26,210 --> 01:20:30,349
far the feedback from from implementers

1786
01:20:28,159 --> 01:20:33,049
has been that it's not super difficult

1787
01:20:30,349 --> 01:20:34,369
to add support for this frame type there

1788
01:20:33,050 --> 01:20:36,440
have been some really good discussions

1789
01:20:34,369 --> 01:20:37,730
around API and how you let an

1790
01:20:36,440 --> 01:20:42,348
application know that something was

1791
01:20:37,730 --> 01:20:43,610
probably lost or certainly act so those

1792
01:20:42,349 --> 01:20:45,019
are good things to keep in mind but

1793
01:20:43,610 --> 01:20:47,018
don't actually affect the on the wire

1794
01:20:45,019 --> 01:20:49,820
bits at all next slide please

1795
01:20:47,019 --> 01:20:52,010
so that brings us to the end of our

1796
01:20:49,820 --> 01:20:54,799
hopefully short set of slides so

1797
01:20:52,010 --> 01:20:56,510
thoughts feelings and the other thing we

1798
01:20:54,800 --> 01:20:57,949
were looking for this time was to

1799
01:20:56,510 --> 01:21:00,440
potentially talk about a call for

1800
01:20:57,949 --> 01:21:02,570
adoption sure so so just to be clear

1801
01:21:00,440 --> 01:21:05,030
you're suggesting and call for adoption

1802
01:21:02,570 --> 01:21:07,190
just for the quick diagram document not

1803
01:21:05,030 --> 01:21:08,659
the HTTP three bonding correct right

1804
01:21:07,190 --> 01:21:10,308
there's an interesting question there

1805
01:21:08,659 --> 01:21:12,469
that when we do get to the HTTP binding

1806
01:21:10,309 --> 01:21:14,119
whether that's done here or in the HTTP

1807
01:21:12,469 --> 01:21:16,550
working group because our intention has

1808
01:21:14,119 --> 01:21:21,199
been to hand off h3 to them after we're

1809
01:21:16,550 --> 01:21:23,659
done exactly yeah Mike Mike Bishop this

1810
01:21:21,199 --> 01:21:26,089
is not a question directly on datagrams

1811
01:21:23,659 --> 01:21:29,799
but something that datagrams brings up I

1812
01:21:26,090 --> 01:21:32,690
noticed that you reserved two adjacent

1813
01:21:29,800 --> 01:21:35,960
frame types so that you could embed a

1814
01:21:32,690 --> 01:21:40,009
flag and the type just like the the

1815
01:21:35,960 --> 01:21:42,440
inspect frames do do our new reservation

1816
01:21:40,010 --> 01:21:49,700
policies that require random assignment

1817
01:21:42,440 --> 01:21:51,889
for that good question I think we just

1818
01:21:49,700 --> 01:21:54,590
changed the registration policies for

1819
01:21:51,890 --> 01:21:57,410
well okay we own we discussed in

1820
01:21:54,590 --> 01:21:59,690
cupertino and we have a PR and part of

1821
01:21:57,410 --> 01:22:02,750
the guidance and that is that I Anna is

1822
01:21:59,690 --> 01:22:05,030
that we randomly allocate that's not are

1823
01:22:02,750 --> 01:22:07,010
you allowed to randomly allocate to

1824
01:22:05,030 --> 01:22:09,139
adjacent points under the current text

1825
01:22:07,010 --> 01:22:13,610
or a block of registration facts in

1826
01:22:09,140 --> 01:22:16,730
language around that as someone who's

1827
01:22:13,610 --> 01:22:18,380
worked with Martin on that PR it doesn't

1828
01:22:16,730 --> 01:22:19,759
quite say that so we should just add

1829
01:22:18,380 --> 01:22:22,040
text to allow it because that makes a

1830
01:22:19,760 --> 01:22:24,710
whole lot of sense if you're right I

1831
01:22:22,040 --> 01:22:27,769
think was next victor was silly of

1832
01:22:24,710 --> 01:22:30,500
google we use data chrome frame

1833
01:22:27,770 --> 01:22:32,210
currently in production so I fully

1834
01:22:30,500 --> 01:22:34,420
support working group taking on such

1835
01:22:32,210 --> 01:22:34,420
work

1836
01:22:36,100 --> 01:22:48,490
Roberta pay on Facebook I'm certain that

1837
01:22:45,950 --> 01:22:51,679
we're gonna adopt this pretty much and

1838
01:22:48,490 --> 01:22:54,410
that's a little scary for me because I

1839
01:22:51,680 --> 01:22:56,390
worry about the fact that it's going to

1840
01:22:54,410 --> 01:22:59,389
be interesting at proxies especially

1841
01:22:56,390 --> 01:23:01,220
without flow control so I think there's

1842
01:22:59,390 --> 01:23:04,550
a lot of hidden problems here that we've

1843
01:23:01,220 --> 01:23:05,930
suffered through in the past again I'm

1844
01:23:04,550 --> 01:23:07,220
sure we're going to adopt this and I bet

1845
01:23:05,930 --> 01:23:08,330
people are going to figure this out

1846
01:23:07,220 --> 01:23:09,440
which I guess is a good thing because

1847
01:23:08,330 --> 01:23:11,330
then we can replace it with something

1848
01:23:09,440 --> 01:23:12,799
better but it might be a good idea to at

1849
01:23:11,330 --> 01:23:15,050
least put some text in about the fact

1850
01:23:12,800 --> 01:23:20,390
that intermediaries with no flow control

1851
01:23:15,050 --> 01:23:22,310
is a recipe for fun so folks folks the

1852
01:23:20,390 --> 01:23:24,920
q1 thing that I'd like to hear about is

1853
01:23:22,310 --> 01:23:26,540
timing in terms of whether you think

1854
01:23:24,920 --> 01:23:29,330
it's important to adopt this now or

1855
01:23:26,540 --> 01:23:31,130
whether it's important to wait if you

1856
01:23:29,330 --> 01:23:32,390
think we should adopt it yeah crystal

1857
01:23:31,130 --> 01:23:34,910
and I think we should adopt it's good

1858
01:23:32,390 --> 01:23:36,230
work I've no opinion on timing I guess

1859
01:23:34,910 --> 01:23:37,840
that's for other people who care more

1860
01:23:36,230 --> 01:23:39,440
about this I just want to say that

1861
01:23:37,840 --> 01:23:41,150
they're interesting security

1862
01:23:39,440 --> 01:23:43,790
implications that come from this

1863
01:23:41,150 --> 01:23:45,490
particular extension as a Waterdown

1864
01:23:43,790 --> 01:23:48,170
example of something that might go wrong

1865
01:23:45,490 --> 01:23:50,269
imagine an application is using a

1866
01:23:48,170 --> 01:23:52,670
Datagram frame to send a very secret

1867
01:23:50,270 --> 01:23:54,980
specific sensitive message like fire the

1868
01:23:52,670 --> 01:23:56,360
missile and you have an attacker who's

1869
01:23:54,980 --> 01:23:57,740
like randomly dropping back

1870
01:23:56,360 --> 01:23:59,330
it's um waiting to see whether or not

1871
01:23:57,740 --> 01:24:01,580
things are retransmitted the fact that

1872
01:23:59,330 --> 01:24:05,180
these are not retransmitted leaks a bit

1873
01:24:01,580 --> 01:24:07,640
of information and like how that affects

1874
01:24:05,180 --> 01:24:10,030
you know quick security posture is sort

1875
01:24:07,640 --> 01:24:12,320
of not clear I've been talking with

1876
01:24:10,030 --> 01:24:15,980
Kenny Patterson about this particular

1877
01:24:12,320 --> 01:24:17,809
issue don't know if it's a big deal but

1878
01:24:15,980 --> 01:24:19,400
like something to keep in mind and maybe

1879
01:24:17,810 --> 01:24:28,190
birthday acknowledgement at some point

1880
01:24:19,400 --> 01:24:31,070
in the draft but ya know send it to be

1881
01:24:28,190 --> 01:24:35,210
transmitted but quickly jump in as a

1882
01:24:31,070 --> 01:24:37,280
author of the document Chris would you

1883
01:24:35,210 --> 01:24:38,930
be willing to file an issue discussing

1884
01:24:37,280 --> 01:24:40,370
this problem against our github please

1885
01:24:38,930 --> 01:24:44,000
yeah of course

1886
01:24:40,370 --> 01:24:46,820
okay I'm going to close the queue very

1887
01:24:44,000 --> 01:24:49,400
soon I think Moses and I think this is

1888
01:24:46,820 --> 01:24:52,460
important work to do now especially

1889
01:24:49,400 --> 01:24:54,650
because I think it's gonna surface

1890
01:24:52,460 --> 01:24:57,950
things that need to be fixed in other

1891
01:24:54,650 --> 01:24:59,509
drafts especially recovery presumably a

1892
01:24:57,950 --> 01:25:02,000
big user of this will be media

1893
01:24:59,510 --> 01:25:04,190
applications and flow control and

1894
01:25:02,000 --> 01:25:06,710
congestion control sections of recovery

1895
01:25:04,190 --> 01:25:08,509
and even this draft are they need a lot

1896
01:25:06,710 --> 01:25:10,190
of work you know there are a lot of

1897
01:25:08,510 --> 01:25:12,830
conflicting and country things and and

1898
01:25:10,190 --> 01:25:14,389
and it needs to go broader than just

1899
01:25:12,830 --> 01:25:16,490
this group there's other groups in other

1900
01:25:14,390 --> 01:25:18,320
areas that need to weigh in on this too

1901
01:25:16,490 --> 01:25:24,620
so I think it needs to be done now

1902
01:25:18,320 --> 01:25:26,980
sooner than later Martin Duke f5 um very

1903
01:25:24,620 --> 01:25:30,920
exciting and I think are important work

1904
01:25:26,980 --> 01:25:34,040
my only concern is bandwidth I think

1905
01:25:30,920 --> 01:25:35,750
there are a few what we're starting to

1906
01:25:34,040 --> 01:25:38,180
punt things into extensions that we

1907
01:25:35,750 --> 01:25:40,610
really really need soon after v1 ships

1908
01:25:38,180 --> 01:25:42,950
to make quick work properly like version

1909
01:25:40,610 --> 01:25:47,120
greasing like maybe this version

1910
01:25:42,950 --> 01:25:48,349
Association thing etc and I think we can

1911
01:25:47,120 --> 01:25:50,450
probably walk into a gum at the same

1912
01:25:48,350 --> 01:25:51,770
time but I would like to I think there's

1913
01:25:50,450 --> 01:25:54,019
a lot of key resources that need to

1914
01:25:51,770 --> 01:25:56,470
commit to support to work through all

1915
01:25:54,020 --> 01:25:56,470
these things simultaneously

1916
01:26:00,959 --> 01:26:09,269
hi Colin Perkins I think as a minimal

1917
01:26:07,259 --> 01:26:10,889
Datagram extension this is a very

1918
01:26:09,269 --> 01:26:14,699
reasonable thing and I think we should

1919
01:26:10,889 --> 01:26:16,739
adopt it before we finalize it I would

1920
01:26:14,699 --> 01:26:17,879
be interested to see how people are

1921
01:26:16,739 --> 01:26:19,409
using datagrams

1922
01:26:17,879 --> 01:26:22,949
and what people are building on top of

1923
01:26:19,409 --> 01:26:25,169
it we may find that a slightly less

1924
01:26:22,949 --> 01:26:27,388
minimal Datagram extension turns out to

1925
01:26:25,169 --> 01:26:30,599
be a more appropriate design once we

1926
01:26:27,389 --> 01:26:32,539
have a little more experience flow IDs

1927
01:26:30,599 --> 01:26:35,009
being the obvious thing in that space

1928
01:26:32,539 --> 01:26:37,499
thank you the queues closed after Jana

1929
01:26:35,009 --> 01:26:39,419
and yes you can clearly build one on top

1930
01:26:37,499 --> 01:26:41,639
of the other if everyone is using a flow

1931
01:26:39,419 --> 01:26:43,259
ID if it turns out that everyone using

1932
01:26:41,639 --> 01:26:44,489
datagrams wants a flow ID we should

1933
01:26:43,259 --> 01:26:49,949
probably just build this into the

1934
01:26:44,489 --> 01:26:51,659
Datagram Lucas pardhu I support adoption

1935
01:26:49,949 --> 01:26:53,879
of this document I think that although

1936
01:26:51,659 --> 01:26:55,978
the design of the frame itself is fairly

1937
01:26:53,879 --> 01:26:58,229
simple as many issues in terms of how we

1938
01:26:55,979 --> 01:27:01,439
use this thing and that having a venue

1939
01:26:58,229 --> 01:27:03,479
to to bring in people to discuss those

1940
01:27:01,439 --> 01:27:07,739
and actually capture that information is

1941
01:27:03,479 --> 01:27:08,999
really important yeah I think we should

1942
01:27:07,739 --> 01:27:10,648
drop this now I don't think there's any

1943
01:27:08,999 --> 01:27:12,059
reason to wait and I appreciate all the

1944
01:27:10,649 --> 01:27:13,139
simplifications that have got to do it

1945
01:27:12,059 --> 01:27:14,819
because that makes it much clearer to

1946
01:27:13,139 --> 01:27:16,349
reason about and gives me a lot more

1947
01:27:14,819 --> 01:27:19,529
confidence that they're not gonna screw

1948
01:27:16,349 --> 01:27:24,119
this up and who are you sorry that was

1949
01:27:19,529 --> 01:27:26,939
Ian thank you I am Brian we are we are

1950
01:27:24,119 --> 01:27:28,679
both from Google although entirely

1951
01:27:26,939 --> 01:27:30,659
different parts of the company uh yeah

1952
01:27:28,679 --> 01:27:32,249
actually I basically came up to say what

1953
01:27:30,659 --> 01:27:38,188
Mo's ed and then what Ian said and then

1954
01:27:32,249 --> 01:27:39,929
what Lucas said so do it do it now gen-i

1955
01:27:38,189 --> 01:27:42,869
and god I support adoption of this

1956
01:27:39,929 --> 01:27:45,869
document but I'll it is it is a bit of a

1957
01:27:42,869 --> 01:27:47,879
fur gun like Roberto says but I think

1958
01:27:45,869 --> 01:27:51,209
it's an obvious foot gun we all knew

1959
01:27:47,879 --> 01:27:52,589
this was coming that said I will I will

1960
01:27:51,209 --> 01:27:54,898
say this one point which is that I think

1961
01:27:52,589 --> 01:27:56,279
this is useful in other way people are

1962
01:27:54,899 --> 01:27:58,859
already implementing it so we actually

1963
01:27:56,279 --> 01:28:01,019
get to exercise the extension mechanism

1964
01:27:58,859 --> 01:28:02,789
and I think that's super useful that we

1965
01:28:01,019 --> 01:28:04,319
don't need to prioritize this because

1966
01:28:02,789 --> 01:28:07,079
the functions here aren't critical I

1967
01:28:04,319 --> 01:28:09,389
think Martin Duke was right that we have

1968
01:28:07,079 --> 01:28:10,619
other things but this one is useful

1969
01:28:09,389 --> 01:28:14,000
because it actually allows us to

1970
01:28:10,619 --> 01:28:16,740
implement an exercise that

1971
01:28:14,000 --> 01:28:17,430
okay I think that's all good input thank

1972
01:28:16,740 --> 01:28:19,800
you very much Eric

1973
01:28:17,430 --> 01:28:22,410
I'll talk to Lars we'll talk to our

1974
01:28:19,800 --> 01:28:23,700
directors and we'll likely see a call

1975
01:28:22,410 --> 01:28:25,139
for adoption soon but we do need to

1976
01:28:23,700 --> 01:28:32,400
consider the Charter aspect to this

1977
01:28:25,140 --> 01:28:34,790
as discussed thank you next up where

1978
01:28:32,400 --> 01:28:34,790
were we

1979
01:28:35,210 --> 01:29:09,120
version ago she ation good morning

1980
01:29:01,140 --> 01:29:11,190
everyone my name is David skinned Ozzy I

1981
01:29:09,120 --> 01:29:13,790
work at Google and I'm here to talk

1982
01:29:11,190 --> 01:29:18,000
about quick version negotiation so this

1983
01:29:13,790 --> 01:29:20,450
draft is joint work by our horse calling

1984
01:29:18,000 --> 01:29:23,280
myself next slide please

1985
01:29:20,450 --> 01:29:25,349
so first point wait a minute what are we

1986
01:29:23,280 --> 01:29:31,200
talking about doesn't quick already have

1987
01:29:25,350 --> 01:29:33,630
first negotiation so the yes to some

1988
01:29:31,200 --> 01:29:36,269
extent the quicken variants define a

1989
01:29:33,630 --> 01:29:37,770
version negotiation packet it uses

1990
01:29:36,270 --> 01:29:41,700
version zero and it sends a bunch of

1991
01:29:37,770 --> 01:29:43,950
versions in quick v1 so the quick

1992
01:29:41,700 --> 01:29:45,929
transport draft it says if you receive

1993
01:29:43,950 --> 01:29:48,030
one of those to fail the connection

1994
01:29:45,930 --> 01:29:50,310
report back up to the application that

1995
01:29:48,030 --> 01:29:51,870
quick is broken we cannot use quick

1996
01:29:50,310 --> 01:29:56,040
because the server doesn't support this

1997
01:29:51,870 --> 01:29:57,809
version that's fine when all were the

1998
01:29:56,040 --> 01:30:00,030
only version in the world is version 1

1999
01:29:57,810 --> 01:30:00,890
because if the server doesn't support it

2000
01:30:00,030 --> 01:30:04,860
then you're dead in the water

2001
01:30:00,890 --> 01:30:07,530
but what if another version were to come

2002
01:30:04,860 --> 01:30:09,570
about the client could in theory just

2003
01:30:07,530 --> 01:30:12,360
get that back and reconnect with that

2004
01:30:09,570 --> 01:30:15,269
version if it supports it - problem if

2005
01:30:12,360 --> 01:30:17,009
you just do that in AV you could expose

2006
01:30:15,270 --> 01:30:20,760
yourself to a downgrade attack what if

2007
01:30:17,010 --> 01:30:23,580
an attacker sent that packet and because

2008
01:30:20,760 --> 01:30:25,350
the client supports version 1 and 2 and

2009
01:30:23,580 --> 01:30:27,019
it turns out that one is no longer safe

2010
01:30:25,350 --> 01:30:28,730
because we found a really bad bug in

2011
01:30:27,020 --> 01:30:30,290
we don't want an attacker to force you

2012
01:30:28,730 --> 01:30:33,469
to use one even though both the client

2013
01:30:30,290 --> 01:30:38,000
and service support - that's the main

2014
01:30:33,470 --> 01:30:40,700
thing another point is the whole main

2015
01:30:38,000 --> 01:30:44,060
premise of quicks existence in the first

2016
01:30:40,700 --> 01:30:47,360
place is to be fast

2017
01:30:44,060 --> 01:30:50,030
- like allow us to actually send the

2018
01:30:47,360 --> 01:30:53,120
request to the server in a few hour

2019
01:30:50,030 --> 01:30:56,269
around trips as possible so spending a

2020
01:30:53,120 --> 01:30:58,880
round trip is a deal-breaker especially

2021
01:30:56,270 --> 01:31:02,000
for browsers so if we were for example

2022
01:30:58,880 --> 01:31:05,120
to say like we have quick v1 and then

2023
01:31:02,000 --> 01:31:06,920
quick v2 comes around some of the

2024
01:31:05,120 --> 01:31:08,570
servers will support one and some of

2025
01:31:06,920 --> 01:31:11,840
them will support one and - the browser

2026
01:31:08,570 --> 01:31:13,549
can't just go to - and then in the case

2027
01:31:11,840 --> 01:31:15,080
where some servers don't support it

2028
01:31:13,550 --> 01:31:17,060
spend a road trip - then go to one

2029
01:31:15,080 --> 01:31:19,400
that's too expensive and that's a

2030
01:31:17,060 --> 01:31:21,940
complete deal-breaker so what do we do

2031
01:31:19,400 --> 01:31:28,040
next slide please

2032
01:31:21,940 --> 01:31:29,179
so if going back a year but I know we've

2033
01:31:28,040 --> 01:31:32,210
been doing this for too long I don't

2034
01:31:29,180 --> 01:31:34,970
remember when we did what at some point

2035
01:31:32,210 --> 01:31:38,600
we had this as part of the spec the

2036
01:31:34,970 --> 01:31:41,840
original transport parameters code had

2037
01:31:38,600 --> 01:31:44,030
support for downward prevention and the

2038
01:31:41,840 --> 01:31:45,650
way it worked is the server would just

2039
01:31:44,030 --> 01:31:48,590
send all its versions and the client

2040
01:31:45,650 --> 01:31:49,849
would say wait a minute I or originally

2041
01:31:48,590 --> 01:31:51,680
sent you this version and now you're

2042
01:31:49,850 --> 01:31:53,270
telling me that we switch to something

2043
01:31:51,680 --> 01:31:54,020
else but you support it the first one in

2044
01:31:53,270 --> 01:31:55,910
the first place

2045
01:31:54,020 --> 01:31:59,960
what the hell that must be an attack

2046
01:31:55,910 --> 01:32:03,080
abort but someone at the time I've

2047
01:31:59,960 --> 01:32:05,690
forgotten who pointed out that if you

2048
01:32:03,080 --> 01:32:07,160
have multiple servers as in you talk to

2049
01:32:05,690 --> 01:32:09,559
a first one it tells you now I don't

2050
01:32:07,160 --> 01:32:11,150
support this version negotiation you try

2051
01:32:09,560 --> 01:32:13,520
again and you land on a different server

2052
01:32:11,150 --> 01:32:15,080
because you got load-balanced and they

2053
01:32:13,520 --> 01:32:17,720
don't have the exact same set of

2054
01:32:15,080 --> 01:32:19,400
versions then you can end up in a

2055
01:32:17,720 --> 01:32:20,810
situation where for the client it looks

2056
01:32:19,400 --> 01:32:22,400
like a downgrade attack when in reality

2057
01:32:20,810 --> 01:32:24,110
you just hit two different servers that

2058
01:32:22,400 --> 01:32:25,670
are both equally trusted and both have

2059
01:32:24,110 --> 01:32:29,269
the private keys for the TLS sir

2060
01:32:25,670 --> 01:32:31,070
so that's bad both in the multi CDN case

2061
01:32:29,270 --> 01:32:33,950
but also if you're just in your own

2062
01:32:31,070 --> 01:32:35,809
network in currently deploying your

2063
01:32:33,950 --> 01:32:37,820
software and so there'll be a period of

2064
01:32:35,810 --> 01:32:40,260
time where the new version is hit here

2065
01:32:37,820 --> 01:32:42,059
but not there so

2066
01:32:40,260 --> 01:32:45,150
at the time we were starting to argue

2067
01:32:42,060 --> 01:32:46,980
about how to fix this and as with all

2068
01:32:45,150 --> 01:32:48,330
the problems that are a lot of the

2069
01:32:46,980 --> 01:32:50,700
problems that aren't blocking for quick

2070
01:32:48,330 --> 01:32:52,530
view on we said okay blunt this out we

2071
01:32:50,700 --> 01:32:54,450
don't need it we want to focus on

2072
01:32:52,530 --> 01:32:57,059
getting quick view on in we can always

2073
01:32:54,450 --> 01:33:01,139
build this as an extension later this is

2074
01:32:57,060 --> 01:33:03,450
that extension it comes with two main

2075
01:33:01,140 --> 01:33:07,590
goals solving the downgrade prevention

2076
01:33:03,450 --> 01:33:09,630
problem but also this spending an RTT

2077
01:33:07,590 --> 01:33:13,620
problem it allows us to deploy quick v2

2078
01:33:09,630 --> 01:33:16,650
on the Internet in a way that both the

2079
01:33:13,620 --> 01:33:18,450
client and server use it without the

2080
01:33:16,650 --> 01:33:21,200
deal breaking spend of an RTT

2081
01:33:18,450 --> 01:33:21,200
next slide please

2082
01:33:22,040 --> 01:33:27,090
in order to do that we this draft

2083
01:33:24,750 --> 01:33:30,690
introduces a concept which is compatible

2084
01:33:27,090 --> 01:33:33,030
versions the idea there being that if

2085
01:33:30,690 --> 01:33:34,860
quickly two ends up looking very much

2086
01:33:33,030 --> 01:33:37,610
like quick view on let's say for example

2087
01:33:34,860 --> 01:33:42,780
a quick v2 is quick v1 plus the Datagram

2088
01:33:37,610 --> 01:33:45,989
frame that wouldn't change much for HTTP

2089
01:33:42,780 --> 01:33:47,969
3 so you could say these versions are

2090
01:33:45,989 --> 01:33:50,669
very similar would be great if we didn't

2091
01:33:47,970 --> 01:33:54,030
spend the RTT so we define compatible

2092
01:33:50,670 --> 01:33:55,680
versions as when the server receives the

2093
01:33:54,030 --> 01:33:57,210
client floors flight so in quick view 1

2094
01:33:55,680 --> 01:34:00,570
that's the initial containing the client

2095
01:33:57,210 --> 01:34:03,480
hello if it can understand that and map

2096
01:34:00,570 --> 01:34:05,820
that to a v2 or version B as I put it

2097
01:34:03,480 --> 01:34:10,559
here first flight then they're

2098
01:34:05,820 --> 01:34:12,000
compatible so they make mechanism is the

2099
01:34:10,560 --> 01:34:13,890
client sends the first flight of the

2100
01:34:12,000 --> 01:34:16,800
version it thinks that is most likely to

2101
01:34:13,890 --> 01:34:19,650
be supported so for example if v2 just

2102
01:34:16,800 --> 01:34:21,750
came out that would be v1 and the server

2103
01:34:19,650 --> 01:34:23,700
and the client says oh by the way I also

2104
01:34:21,750 --> 01:34:26,250
support me to which I know is compatible

2105
01:34:23,700 --> 01:34:28,320
with you want and then the server says

2106
01:34:26,250 --> 01:34:31,170
oh I support that too let me convert

2107
01:34:28,320 --> 01:34:35,489
your initial to whatever a first flight

2108
01:34:31,170 --> 01:34:37,320
in is in v2 and run with that so then

2109
01:34:35,489 --> 01:34:40,769
you the initial that the server responds

2110
01:34:37,320 --> 01:34:43,110
with is now a v2 initial pretty simple

2111
01:34:40,770 --> 01:34:45,090
we just need to make sure that we don't

2112
01:34:43,110 --> 01:34:46,910
allow downgrade attacks or foot guns

2113
01:34:45,090 --> 01:34:50,160
next slide please

2114
01:34:46,910 --> 01:34:51,450
so how do we do this and as with most

2115
01:34:50,160 --> 01:34:52,780
extensions

2116
01:34:51,450 --> 01:34:55,450
it's a transport parameter

2117
01:34:52,780 --> 01:34:57,509
so the transport parameter contains

2118
01:34:55,450 --> 01:35:01,269
different things on client and server on

2119
01:34:57,510 --> 01:35:03,730
the client Ted do you want me to go

2120
01:35:01,270 --> 01:35:07,390
through the slides or is it for now I

2121
01:35:03,730 --> 01:35:10,780
have a question at the end okay so the

2122
01:35:07,390 --> 01:35:12,490
just return on the client contains a few

2123
01:35:10,780 --> 01:35:14,889
things the first one is the currently

2124
01:35:12,490 --> 01:35:16,780
attempted version so that's redundant

2125
01:35:14,890 --> 01:35:18,880
from the version that is in the long

2126
01:35:16,780 --> 01:35:20,500
headers of that initial but what it

2127
01:35:18,880 --> 01:35:22,420
means is that version lands in the TRC

2128
01:35:20,500 --> 01:35:25,480
schedule and if we've learned anything

2129
01:35:22,420 --> 01:35:27,790
from the history of TLS is that if

2130
01:35:25,480 --> 01:35:29,440
things are not in the key schedule then

2131
01:35:27,790 --> 01:35:31,360
you can end up with some really funky

2132
01:35:29,440 --> 01:35:33,429
attacks where someone swaps it and you

2133
01:35:31,360 --> 01:35:35,349
don't realize it so we put that in there

2134
01:35:33,430 --> 01:35:36,700
that way it prevents an attack where

2135
01:35:35,350 --> 01:35:40,060
your attacker is just swapping over that

2136
01:35:36,700 --> 01:35:42,370
version you also add your previously

2137
01:35:40,060 --> 01:35:44,470
attempted version meaning if I tried a

2138
01:35:42,370 --> 01:35:47,349
got a version negotiation and tried B

2139
01:35:44,470 --> 01:35:49,150
when I'm trying be the I'll say here

2140
01:35:47,350 --> 01:35:52,150
that oh I tried a originally by the way

2141
01:35:49,150 --> 01:35:53,950
and I send a copy of this verse

2142
01:35:52,150 --> 01:35:56,410
negotiation packet I got from the server

2143
01:35:53,950 --> 01:35:57,490
and just a payload which is just a list

2144
01:35:56,410 --> 01:36:00,809
of versions that were in the version

2145
01:35:57,490 --> 01:36:04,510
negotiation packet so the idea there is

2146
01:36:00,810 --> 01:36:07,840
on the server when you get that you can

2147
01:36:04,510 --> 01:36:10,180
check if that you if in response this

2148
01:36:07,840 --> 01:36:12,790
previously attempted version you could

2149
01:36:10,180 --> 01:36:14,980
have potentially sent this VN packet and

2150
01:36:12,790 --> 01:36:16,930
the client sends one last thing which is

2151
01:36:14,980 --> 01:36:19,900
the list of compatible versions that the

2152
01:36:16,930 --> 01:36:22,110
server could in in-band switch to if it

2153
01:36:19,900 --> 01:36:25,299
supported them next slide please

2154
01:36:22,110 --> 01:36:26,920
from the service perspective the first

2155
01:36:25,300 --> 01:36:28,570
thing is the negotiated version so

2156
01:36:26,920 --> 01:36:30,970
similar that's also the version that's

2157
01:36:28,570 --> 01:36:33,219
going to be on long headers but that way

2158
01:36:30,970 --> 01:36:36,670
we landed in the key schedule and then

2159
01:36:33,220 --> 01:36:39,520
the supported versions list so the idea

2160
01:36:36,670 --> 01:36:41,650
there is if there are incompatible

2161
01:36:39,520 --> 01:36:43,960
version in particular especially let's

2162
01:36:41,650 --> 01:36:45,429
see version 3 is not compatible you can

2163
01:36:43,960 --> 01:36:47,620
tell the client hey by the way for next

2164
01:36:45,430 --> 01:36:51,070
time I support this so the client can

2165
01:36:47,620 --> 01:36:52,599
cache that if it wants the same way

2166
01:36:51,070 --> 01:36:56,889
today we cache things based on all

2167
01:36:52,600 --> 01:36:59,470
service for example next slide so how

2168
01:36:56,890 --> 01:37:01,450
does this work for downgrade if the

2169
01:36:59,470 --> 01:37:04,430
attacker is tampering with the version

2170
01:37:01,450 --> 01:37:06,290
in the long headers though

2171
01:37:04,430 --> 01:37:08,600
the first part in the transport prior

2172
01:37:06,290 --> 01:37:12,470
won't match so the TRC schedule will

2173
01:37:08,600 --> 01:37:14,120
fall over and the way quick is defined

2174
01:37:12,470 --> 01:37:15,860
you have a bunch of versions in a bunch

2175
01:37:14,120 --> 01:37:17,540
of long headers but the first one you

2176
01:37:15,860 --> 01:37:18,980
get is what you establish on that

2177
01:37:17,540 --> 01:37:20,870
connection so if it changes after that

2178
01:37:18,980 --> 01:37:23,299
you drop them on the floor so you have

2179
01:37:20,870 --> 01:37:25,340
that strong map in here and then if an

2180
01:37:23,300 --> 01:37:28,010
attacker forges a virgin negotiation

2181
01:37:25,340 --> 01:37:30,260
packet so it's a clarification yes you

2182
01:37:28,010 --> 01:37:33,230
have a client and server have to check

2183
01:37:30,260 --> 01:37:35,420
these things match you know in order for

2184
01:37:33,230 --> 01:37:36,769
things to fall over it's not just a not

2185
01:37:35,420 --> 01:37:40,010
just that the handshake pulls over

2186
01:37:36,770 --> 01:37:42,260
automatically sorry that is what I meant

2187
01:37:40,010 --> 01:37:44,030
the server like both sides upon

2188
01:37:42,260 --> 01:37:49,880
receiving stuff need to make sure that

2189
01:37:44,030 --> 01:37:52,490
they match agreed and so if an attacker

2190
01:37:49,880 --> 01:37:54,830
forges this a great one the list of

2191
01:37:52,490 --> 01:37:56,900
things like because those are there it

2192
01:37:54,830 --> 01:37:59,600
can say wait the server can say wait a

2193
01:37:56,900 --> 01:38:01,040
minute I would have never sent you this

2194
01:37:59,600 --> 01:38:02,750
the end packet because I know all my

2195
01:38:01,040 --> 01:38:05,620
servers support this version that's bad

2196
01:38:02,750 --> 01:38:08,330
and if the server deployment has

2197
01:38:05,620 --> 01:38:09,769
different banks where knows like over

2198
01:38:08,330 --> 01:38:11,870
here I support one and two and over here

2199
01:38:09,770 --> 01:38:13,160
I only support one then I can say yeah

2200
01:38:11,870 --> 01:38:15,290
it's possible that I sent you over

2201
01:38:13,160 --> 01:38:17,599
negotiation for just one cuz I know I

2202
01:38:15,290 --> 01:38:19,640
own some servers that do that and also

2203
01:38:17,600 --> 01:38:22,700
if you're in the multi CDN use case if

2204
01:38:19,640 --> 01:38:24,940
you know what the other CDN versions you

2205
01:38:22,700 --> 01:38:30,349
can do that here next slide

2206
01:38:24,940 --> 01:38:31,969
quick question Mike bishop if somebody

2207
01:38:30,350 --> 01:38:33,860
tampered with the version isn't that

2208
01:38:31,970 --> 01:38:37,670
part of the ad the packet would just

2209
01:38:33,860 --> 01:38:43,969
felt worse yeah Bondish initial packets

2210
01:38:37,670 --> 01:38:46,330
the initial backers can be rewritten all

2211
01:38:43,970 --> 01:38:50,020
right so the mechanism is pretty simple

2212
01:38:46,330 --> 01:38:52,700
the draft tries to describe that the

2213
01:38:50,020 --> 01:38:54,590
draft originally only did compatible

2214
01:38:52,700 --> 01:38:56,420
versions and kind of a few weeks ago

2215
01:38:54,590 --> 01:38:58,760
before the deadline we kind of rushed in

2216
01:38:56,420 --> 01:39:01,460
to add the downgrade prevention and so

2217
01:38:58,760 --> 01:39:03,830
it makes the draft really clunky to read

2218
01:39:01,460 --> 01:39:05,600
so that's on me I think we need to work

2219
01:39:03,830 --> 01:39:07,880
a lot on the framing and refactor it to

2220
01:39:05,600 --> 01:39:11,840
make it a lot more sensical but I think

2221
01:39:07,880 --> 01:39:14,450
the mekka mechanism is correct so what

2222
01:39:11,840 --> 01:39:16,370
if folks think especially there are

2223
01:39:14,450 --> 01:39:17,929
cases like the ossification work that

2224
01:39:16,370 --> 01:39:19,909
Kazuo proposed

2225
01:39:17,929 --> 01:39:21,469
that might require version negotiation

2226
01:39:19,909 --> 01:39:23,000
so I think it would be nice to have this

2227
01:39:21,469 --> 01:39:25,070
in the working group it to progress it

2228
01:39:23,000 --> 01:39:27,260
okay I can see a lot of people want to

2229
01:39:25,070 --> 01:39:30,440
talk about this we have about five

2230
01:39:27,260 --> 01:39:33,260
minutes so I would suggest that we focus

2231
01:39:30,440 --> 01:39:35,049
on is this an area that the working

2232
01:39:33,260 --> 01:39:37,310
group thinks it needs an extension in is

2233
01:39:35,050 --> 01:39:39,320
this a reasonable starting point for

2234
01:39:37,310 --> 01:39:41,780
that extension knowing that it can

2235
01:39:39,320 --> 01:39:44,179
change and do we need to do it now or do

2236
01:39:41,780 --> 01:39:46,099
we need to wait and questions of

2237
01:39:44,179 --> 01:39:48,290
clarification if you need them to answer

2238
01:39:46,100 --> 01:39:50,840
the previous questions please go Ted

2239
01:39:48,290 --> 01:39:52,219
10:30 my clarification question actually

2240
01:39:50,840 --> 01:39:54,469
relates to the discussion we had

2241
01:39:52,219 --> 01:39:57,199
yesterday with a LPN we can't hear you

2242
01:39:54,469 --> 01:39:58,969
Ted okay I wanted to ask the

2243
01:39:57,199 --> 01:40:00,610
relationship between this and the

2244
01:39:58,969 --> 01:40:03,770
discussion we had yesterday about

2245
01:40:00,610 --> 01:40:06,679
potentially using a LPN with full-stack

2246
01:40:03,770 --> 01:40:10,130
as opposed to just the particular

2247
01:40:06,679 --> 01:40:12,170
application layer if we do a LPN with

2248
01:40:10,130 --> 01:40:19,640
full-stack does that obviate the use of

2249
01:40:12,170 --> 01:40:22,219
this okay thank you so to basically this

2250
01:40:19,640 --> 01:40:27,230
version negotiation mechanism is for the

2251
01:40:22,219 --> 01:40:29,630
transport layer and if you don't speak

2252
01:40:27,230 --> 01:40:31,428
this you don't understand the client

2253
01:40:29,630 --> 01:40:32,989
version at the transfer layer you won't

2254
01:40:31,429 --> 01:40:37,250
be able to parse the LPN so there's

2255
01:40:32,989 --> 01:40:41,690
still a need for this repair to pay own

2256
01:40:37,250 --> 01:40:44,360
I did not see a clear discussion of what

2257
01:40:41,690 --> 01:40:46,040
happens in the zero RTT case with us and

2258
01:40:44,360 --> 01:40:49,880
zero are ITT being the thing that is now

2259
01:40:46,040 --> 01:40:51,620
fun and providing a lot of value I think

2260
01:40:49,880 --> 01:40:56,239
that would be great to answer Marc's

2261
01:40:51,620 --> 01:40:58,699
things the first answer is yes and to

2262
01:40:56,239 --> 01:41:01,129
give a ten second answers your TT is a

2263
01:40:58,699 --> 01:41:02,900
perversion specific concept so if you

2264
01:41:01,130 --> 01:41:04,610
don't understand that version there but

2265
01:41:02,900 --> 01:41:06,530
that is a good point we need to add more

2266
01:41:04,610 --> 01:41:08,059
text if you do four compatible versions

2267
01:41:06,530 --> 01:41:10,340
there's going to be work to figure that

2268
01:41:08,060 --> 01:41:12,260
out if we do not figure that out it will

2269
01:41:10,340 --> 01:41:13,640
be difficult to upgrade because you will

2270
01:41:12,260 --> 01:41:18,350
suffer performance penalties that you

2271
01:41:13,640 --> 01:41:19,909
wouldn't otherwise good point cattle

2272
01:41:18,350 --> 01:41:21,920
Hawks thank you hope presenting in the

2273
01:41:19,909 --> 01:41:24,049
draft I think this is an important work

2274
01:41:21,920 --> 01:41:25,780
on the other hand I wonder if there's

2275
01:41:24,050 --> 01:41:30,960
immediate need for this to be adopted

2276
01:41:25,780 --> 01:41:33,179
due to two reasons one is that for

2277
01:41:30,960 --> 01:41:37,410
something like datagrams can be

2278
01:41:33,180 --> 01:41:38,880
negotiated using a future and my decided

2279
01:41:37,410 --> 01:41:42,630
that we only need a version number

2280
01:41:38,880 --> 01:41:44,700
change when the pockets the critics

2281
01:41:42,630 --> 01:41:47,730
putter pockets that's being exchanged

2282
01:41:44,700 --> 01:41:49,320
during the handshake changes the second

2283
01:41:47,730 --> 01:41:53,330
reason is that for something like

2284
01:41:49,320 --> 01:41:56,400
version something like version aliasing

2285
01:41:53,330 --> 01:41:58,860
we need a different kind of downgrade

2286
01:41:56,400 --> 01:42:02,490
protection for example the proposal that

2287
01:41:58,860 --> 01:42:04,740
we had using a new token frame was to

2288
01:42:02,490 --> 01:42:08,519
use the value of the token to see if a

2289
01:42:04,740 --> 01:42:11,400
down gray should be prevented so this

2290
01:42:08,520 --> 01:42:14,160
one doesn't address the old cases where

2291
01:42:11,400 --> 01:42:16,860
downgrade should be prevented so that's

2292
01:42:14,160 --> 01:42:20,840
one of the reasons I kind of wonder if

2293
01:42:16,860 --> 01:42:23,910
we can park this until we have a

2294
01:42:20,840 --> 01:42:25,650
something and do we have a new quick

2295
01:42:23,910 --> 01:42:28,410
version that actually uses a different

2296
01:42:25,650 --> 01:42:30,799
country chimerism I'm gonna close the

2297
01:42:28,410 --> 01:42:32,700
queue after Roy and Martin do better up

2298
01:42:30,800 --> 01:42:33,960
not in Thompson I think we need an

2299
01:42:32,700 --> 01:42:37,650
answer to this one before we start

2300
01:42:33,960 --> 01:42:39,300
working on the version 2 I somewhat

2301
01:42:37,650 --> 01:42:43,410
disagree with Kazuo though I recognize

2302
01:42:39,300 --> 01:42:44,940
the points of valid this document needs

2303
01:42:43,410 --> 01:42:47,040
a lot of editorial work I provided that

2304
01:42:44,940 --> 01:42:49,830
feedback I think there's different ways

2305
01:42:47,040 --> 01:42:51,420
to spell it but the basic framework of

2306
01:42:49,830 --> 01:42:54,870
what David described which is to have

2307
01:42:51,420 --> 01:42:57,480
the incompatible and compatible upgrades

2308
01:42:54,870 --> 01:42:59,910
is quite valuable and so I think we

2309
01:42:57,480 --> 01:43:01,200
should adopt it now and treat it like

2310
01:42:59,910 --> 01:43:03,690
the other extensions I don't think we

2311
01:43:01,200 --> 01:43:05,910
need to block quickly one on this being

2312
01:43:03,690 --> 01:43:07,710
complete but I do think we need to be

2313
01:43:05,910 --> 01:43:12,300
working on this so that we have a story

2314
01:43:07,710 --> 01:43:16,860
for when we do have quick v2 and we have

2315
01:43:12,300 --> 01:43:17,960
a design it's good enough take it well

2316
01:43:16,860 --> 01:43:20,910
this makes in the right place for us

2317
01:43:17,960 --> 01:43:23,220
Eric rajala I'm one of the authors I

2318
01:43:20,910 --> 01:43:24,180
think we've traded out this I frankly

2319
01:43:23,220 --> 01:43:25,590
have some misgivings are at the

2320
01:43:24,180 --> 01:43:27,720
incompatible negotiation but we can

2321
01:43:25,590 --> 01:43:29,490
fight that out in the working group but

2322
01:43:27,720 --> 01:43:31,320
I think like having that like like

2323
01:43:29,490 --> 01:43:33,120
having a good item to sort to work on

2324
01:43:31,320 --> 01:43:34,740
negotiation I think like we should do

2325
01:43:33,120 --> 01:43:40,860
and we can figure out the details later

2326
01:43:34,740 --> 01:43:42,510
or this is good a good video start you

2327
01:43:40,860 --> 01:43:44,130
but Google yes I also think we should

2328
01:43:42,510 --> 01:43:45,630
adopt this though if if it turns out

2329
01:43:44,130 --> 01:43:47,310
that you know due to the editorial work

2330
01:43:45,630 --> 01:43:48,929
it's easier to do so sometime between

2331
01:43:47,310 --> 01:43:51,179
now and the next ITF in a few months

2332
01:43:48,929 --> 01:43:52,590
that's that's fine but I think sometime

2333
01:43:51,179 --> 01:43:54,810
in the next you know three to six months

2334
01:43:52,590 --> 01:44:00,239
we should be doing this in this working

2335
01:43:54,810 --> 01:44:03,210
group Roy fielding Adobe I I'd like to

2336
01:44:00,239 --> 01:44:06,718
get a little bit back to the HTTP 1.1 or

2337
01:44:03,210 --> 01:44:10,800
1 versioning scheme that has the ability

2338
01:44:06,719 --> 01:44:15,540
to send optimistically minor version

2339
01:44:10,800 --> 01:44:17,639
changes that are compatible so is there

2340
01:44:15,540 --> 01:44:21,030
a way to do that in this scheme and

2341
01:44:17,639 --> 01:44:25,170
other than that I would also approve

2342
01:44:21,030 --> 01:44:27,780
adopting so just a ten-second answer so

2343
01:44:25,170 --> 01:44:29,340
currently quick track at the transport

2344
01:44:27,780 --> 01:44:31,800
layer doesn't have a concept of minor

2345
01:44:29,340 --> 01:44:34,409
versions but maybe the compatible

2346
01:44:31,800 --> 01:44:37,530
versions is that so we'd have to maybe

2347
01:44:34,409 --> 01:44:40,110
that's there's a mapping layer the let's

2348
01:44:37,530 --> 01:44:40,920
take it offline bring that to this

2349
01:44:40,110 --> 01:44:44,250
because I think that's an interesting

2350
01:44:40,920 --> 01:44:46,679
point okay thank you very much David

2351
01:44:44,250 --> 01:44:48,060
we'll where we're going from here I'll

2352
01:44:46,679 --> 01:44:50,880
chat with Lars we'll check with the aero

2353
01:44:48,060 --> 01:44:52,110
directors it's definitely on the list

2354
01:44:50,880 --> 01:44:55,409
Thanks

2355
01:44:52,110 --> 01:44:56,880
thank you come on

2356
01:44:55,409 --> 01:44:59,790
morning everybody home martin duke one

2357
01:44:56,880 --> 01:45:01,230
of these your suspects just to see how

2358
01:44:59,790 --> 01:45:03,619
much didn't you talk about it can I see

2359
01:45:01,230 --> 01:45:08,218
a show of hands who's read the draft

2360
01:45:03,619 --> 01:45:11,610
okay about half the two thirds good next

2361
01:45:08,219 --> 01:45:15,630
slide so this is a about a lot of things

2362
01:45:11,610 --> 01:45:19,199
but it is mostly about allowing servers

2363
01:45:15,630 --> 01:45:22,639
and load balancers owned or implemented

2364
01:45:19,199 --> 01:45:24,659
by different entities to work together

2365
01:45:22,639 --> 01:45:26,340
basically you want load balancers to

2366
01:45:24,659 --> 01:45:27,599
work off connection ID rather than four

2367
01:45:26,340 --> 01:45:30,000
tuples that you don't break not

2368
01:45:27,600 --> 01:45:33,989
rebinding resilience and so on

2369
01:45:30,000 --> 01:45:35,310
and so the ideally for a low state load

2370
01:45:33,989 --> 01:45:37,559
balancer the connection idea should

2371
01:45:35,310 --> 01:45:39,600
contain the server ID mapping and so

2372
01:45:37,560 --> 01:45:41,100
this is just basically proposing several

2373
01:45:39,600 --> 01:45:43,139
standardized methods of encoding the

2374
01:45:41,100 --> 01:45:45,719
server ID mapping in the connection ID

2375
01:45:43,139 --> 01:45:48,389
so that the load balancer can understand

2376
01:45:45,719 --> 01:45:49,889
a packet and or understand the routing

2377
01:45:48,389 --> 01:45:52,679
of a pack get to the correct server next

2378
01:45:49,889 --> 01:45:55,769
slide okay this is

2379
01:45:52,679 --> 01:45:58,969
turned out to be a useful vehicle for

2380
01:45:55,769 --> 01:46:02,849
several other problems for instance

2381
01:45:58,969 --> 01:46:05,099
there's interest in having essentially

2382
01:46:02,849 --> 01:46:06,630
the quick equivalent of sink the offload

2383
01:46:05,099 --> 01:46:10,439
which is which I've decided to call

2384
01:46:06,630 --> 01:46:11,969
retry services so there Nick banks I'd

2385
01:46:10,439 --> 01:46:13,709
co-author akin for the scheme on how to

2386
01:46:11,969 --> 01:46:18,150
do that so that's also in the draft and

2387
01:46:13,709 --> 01:46:20,130
then also there is interest in eventual

2388
01:46:18,150 --> 01:46:22,949
Hardware crypto offload for quick and

2389
01:46:20,130 --> 01:46:24,599
after some conversation of Intel I was

2390
01:46:22,949 --> 01:46:26,459
certainly convinced that that that would

2391
01:46:24,599 --> 01:46:29,219
very much benefit from somehow encoding

2392
01:46:26,459 --> 01:46:30,510
the length of the CID inside the CID and

2393
01:46:29,219 --> 01:46:32,219
so if you are trying to use those

2394
01:46:30,510 --> 01:46:34,979
services to provide standard way to do

2395
01:46:32,219 --> 01:46:36,840
so so we can use ones you know a fixed

2396
01:46:34,979 --> 01:46:39,139
number of chips that to solve that

2397
01:46:36,840 --> 01:46:42,059
problem next slide please

2398
01:46:39,139 --> 01:46:44,699
so basically you know the the underlying

2399
01:46:42,059 --> 01:46:47,070
value the value statement and quick is

2400
01:46:44,699 --> 01:46:48,989
that if middleboxes try to mess with the

2401
01:46:47,070 --> 01:46:51,239
connection it kills the connection and

2402
01:46:48,989 --> 01:46:53,098
this is amending that that attitude to

2403
01:46:51,239 --> 01:46:55,759
instead say that the server must

2404
01:46:53,099 --> 01:46:57,659
explicitly consent this sort of

2405
01:46:55,760 --> 01:47:02,849
quote-unquote contribution that the

2406
01:46:57,659 --> 01:47:04,469
middle box is making next slide this is

2407
01:47:02,849 --> 01:47:05,909
fairly clear from the draft but I do

2408
01:47:04,469 --> 01:47:07,619
want to highlight this point and a lot

2409
01:47:05,909 --> 01:47:09,119
of conversations about security it's a

2410
01:47:07,619 --> 01:47:11,999
very much a binary thing where something

2411
01:47:09,119 --> 01:47:14,780
is secure or it is not the point of a

2412
01:47:11,999 --> 01:47:18,239
lot of these server ID and coding

2413
01:47:14,780 --> 01:47:20,369
algorithms is to is to hide the fact

2414
01:47:18,239 --> 01:47:21,928
that a connection that two connection

2415
01:47:20,369 --> 01:47:25,369
IDs that belong to the same connection

2416
01:47:21,929 --> 01:47:28,110
are going to the same server however

2417
01:47:25,369 --> 01:47:30,209
this mechanism has limited ability to

2418
01:47:28,110 --> 01:47:31,739
solve that problem in this extreme when

2419
01:47:30,209 --> 01:47:34,019
you one client connected to your server

2420
01:47:31,739 --> 01:47:37,259
pool you are linkable no matter what the

2421
01:47:34,019 --> 01:47:41,729
C IDs do next slide conversely if you

2422
01:47:37,260 --> 01:47:44,070
have approaching infinity clients per

2423
01:47:41,729 --> 01:47:46,050
server then you're about as on linkable

2424
01:47:44,070 --> 01:47:49,228
you could be regardless of how clumsy

2425
01:47:46,050 --> 01:47:54,030
your scheme is next slide

2426
01:47:49,229 --> 01:47:56,400
let's get next slide okay so the first

2427
01:47:54,030 --> 01:47:58,438
part of this draft is basically just

2428
01:47:56,400 --> 01:48:00,780
providing some common configuration and

2429
01:47:58,439 --> 01:48:03,570
what to do given that configuration that

2430
01:48:00,780 --> 01:48:06,200
is it's describing some algorithms there

2431
01:48:03,570 --> 01:48:08,929
are basically three bits to this

2432
01:48:06,200 --> 01:48:10,849
one is one is what method you're using

2433
01:48:08,930 --> 01:48:13,160
to encode the original that's the issue

2434
01:48:10,850 --> 01:48:16,850
connection ID in a retry token to allow

2435
01:48:13,160 --> 01:48:18,260
these retry services a second thing is

2436
01:48:16,850 --> 01:48:19,730
whether or not using the CID length

2437
01:48:18,260 --> 01:48:21,440
encoding and then the third thing is

2438
01:48:19,730 --> 01:48:24,860
what algorithm you're using to encode

2439
01:48:21,440 --> 01:48:26,960
the server ID in the connection ID next

2440
01:48:24,860 --> 01:48:30,559
slide and then there's more stuff there

2441
01:48:26,960 --> 01:48:35,300
for that's parameter specific to each of

2442
01:48:30,560 --> 01:48:36,920
those algorithms now so again the first

2443
01:48:35,300 --> 01:48:38,150
part of this configuration then the

2444
01:48:36,920 --> 01:48:41,000
second part is well how does the

2445
01:48:38,150 --> 01:48:43,129
configuration get around the draft

2446
01:48:41,000 --> 01:48:44,900
definitely enables you to go ahead and

2447
01:48:43,130 --> 01:48:46,270
use whatever existing config

2448
01:48:44,900 --> 01:48:49,219
distribution infrastructure you have

2449
01:48:46,270 --> 01:48:51,280
that is probably encouraged however for

2450
01:48:49,220 --> 01:48:55,490
people who don't have that there is a

2451
01:48:51,280 --> 01:48:57,710
very simple in-band protocol it is the

2452
01:48:55,490 --> 01:48:59,719
overriding design principles or one to

2453
01:48:57,710 --> 01:49:01,550
be very simple and two to look sort of

2454
01:48:59,720 --> 01:49:02,960
like quick because the one thing can

2455
01:49:01,550 --> 01:49:04,460
guarantee about a path we've seen a

2456
01:49:02,960 --> 01:49:08,810
little balancer and the pic server is

2457
01:49:04,460 --> 01:49:12,170
that it it bits quick next slide I've

2458
01:49:08,810 --> 01:49:15,140
gotten robust and diverse feedback about

2459
01:49:12,170 --> 01:49:19,580
that in configuration and you can see

2460
01:49:15,140 --> 01:49:21,770
some of it I have no particular love for

2461
01:49:19,580 --> 01:49:23,390
what I wrote down there and if the

2462
01:49:21,770 --> 01:49:25,040
working group as a whole kind of gave me

2463
01:49:23,390 --> 01:49:27,410
a solid message to go with one of these

2464
01:49:25,040 --> 01:49:29,240
three one of these four options I would

2465
01:49:27,410 --> 01:49:31,639
be happy to do so with two caveats

2466
01:49:29,240 --> 01:49:36,410
number one find something needs to be

2467
01:49:31,640 --> 01:49:37,490
used this number one and number two I do

2468
01:49:36,410 --> 01:49:41,059
want to talk a little bit of putting in

2469
01:49:37,490 --> 01:49:43,070
a different draft so there is of course

2470
01:49:41,060 --> 01:49:45,590
the general problem of proxy to server

2471
01:49:43,070 --> 01:49:48,559
communication in TCP we have the proxy

2472
01:49:45,590 --> 01:49:52,760
protocol that does not work in quick for

2473
01:49:48,560 --> 01:49:56,990
a variety of reasons there's some desire

2474
01:49:52,760 --> 01:49:59,090
to maybe find a solution for quick and I

2475
01:49:56,990 --> 01:50:00,320
would be happy to have this fall in with

2476
01:49:59,090 --> 01:50:04,490
that effort but that effort does not

2477
01:50:00,320 --> 01:50:08,710
currently exist next slide some other

2478
01:50:04,490 --> 01:50:10,880
discussion points so one thing is one

2479
01:50:08,710 --> 01:50:12,920
unfortunate property of all of us is

2480
01:50:10,880 --> 01:50:15,140
that server infrastructures are deciding

2481
01:50:12,920 --> 01:50:17,240
whether or not clients are linkable when

2482
01:50:15,140 --> 01:50:19,160
fundamentally that is something that

2483
01:50:17,240 --> 01:50:20,570
affects the client most of all and

2484
01:50:19,160 --> 01:50:24,019
would be great to have a way to

2485
01:50:20,570 --> 01:50:25,460
communicate somehow with clients how

2486
01:50:24,020 --> 01:50:27,020
linkable they would be if they attempted

2487
01:50:25,460 --> 01:50:29,030
to migrate and then clients could make

2488
01:50:27,020 --> 01:50:32,540
the decision as to whether they wanted

2489
01:50:29,030 --> 01:50:33,710
to go ahead migrators tear down the

2490
01:50:32,540 --> 01:50:35,210
connection start over the whole new

2491
01:50:33,710 --> 01:50:37,100
connection should they change IP address

2492
01:50:35,210 --> 01:50:38,810
so you could do something good transport

2493
01:50:37,100 --> 01:50:42,620
foreigner particularly if something like

2494
01:50:38,810 --> 01:50:44,390
quick OB was was a you know a standard a

2495
01:50:42,620 --> 01:50:47,780
reference point on what was a Lincoln

2496
01:50:44,390 --> 01:50:50,660
Bowl what was not so I would appreciate

2497
01:50:47,780 --> 01:50:53,630
feedback on that and maybe there should

2498
01:50:50,660 --> 01:50:56,389
be a quick extension second issue retry

2499
01:50:53,630 --> 01:50:58,400
services are they are course version

2500
01:50:56,390 --> 01:51:00,410
specific because retry packets are

2501
01:50:58,400 --> 01:51:02,719
version specific all the other stuff is

2502
01:51:00,410 --> 01:51:04,550
based on connection ID connection ID is

2503
01:51:02,720 --> 01:51:05,780
part of the invariance - a link field

2504
01:51:04,550 --> 01:51:07,880
which probably will not have a problem

2505
01:51:05,780 --> 01:51:09,259
so do we really want to have things that

2506
01:51:07,880 --> 01:51:11,120
are quick version specific and not

2507
01:51:09,260 --> 01:51:13,340
version specific in same draft if we rev

2508
01:51:11,120 --> 01:51:18,140
quick that might just be an editorial

2509
01:51:13,340 --> 01:51:19,220
pain without waiting deep into the

2510
01:51:18,140 --> 01:51:21,620
algorithms for people who weren't

2511
01:51:19,220 --> 01:51:23,240
reading it there are some some of these

2512
01:51:21,620 --> 01:51:25,610
methods involve encryption and some of

2513
01:51:23,240 --> 01:51:27,440
them don't there's one that is sort of

2514
01:51:25,610 --> 01:51:28,940
an obfuscation algorithm that attempts

2515
01:51:27,440 --> 01:51:33,589
to do some mathematical operations to

2516
01:51:28,940 --> 01:51:36,200
make the server ID less obvious a lot of

2517
01:51:33,590 --> 01:51:38,270
people will say I've heard from a lot of

2518
01:51:36,200 --> 01:51:40,490
people that that don't see that it's

2519
01:51:38,270 --> 01:51:42,470
clear that that's cheaper than just

2520
01:51:40,490 --> 01:51:43,580
doing crypto on the other hand I've

2521
01:51:42,470 --> 01:51:45,560
heard some pushback from others that

2522
01:51:43,580 --> 01:51:49,519
that they would really I see didn't see

2523
01:51:45,560 --> 01:51:51,290
a an option like this and this okay this

2524
01:51:49,520 --> 01:51:52,700
actually kind of moves on to the second

2525
01:51:51,290 --> 01:51:53,960
point which is I think we've struggled a

2526
01:51:52,700 --> 01:51:56,990
little bit to get really robust

2527
01:51:53,960 --> 01:51:59,870
engagement with a lot of the low state

2528
01:51:56,990 --> 01:52:02,840
load balancer vendors particularly in

2529
01:51:59,870 --> 01:52:04,880
the cloud environment Nick my co-author

2530
01:52:02,840 --> 01:52:07,520
has talked a little bit with the Azure

2531
01:52:04,880 --> 01:52:10,490
people and and frankly a lot of it is

2532
01:52:07,520 --> 01:52:12,440
what one obstacles to get through the

2533
01:52:10,490 --> 01:52:13,940
initial reaction of this sounds like a

2534
01:52:12,440 --> 01:52:16,490
pain can you change quick so we don't

2535
01:52:13,940 --> 01:52:20,509
have to do anything which is probably

2536
01:52:16,490 --> 01:52:21,889
not a realistic view of things so um you

2537
01:52:20,510 --> 01:52:23,870
know really it's what are people will

2538
01:52:21,890 --> 01:52:25,400
you know this this room is essentially

2539
01:52:23,870 --> 01:52:28,280
the community of pic server implementer

2540
01:52:25,400 --> 01:52:30,589
so obviously your feedback is quite

2541
01:52:28,280 --> 01:52:32,420
important it'd really be nice to do I'm

2542
01:52:30,590 --> 01:52:34,560
still trying to work to try to

2543
01:52:32,420 --> 01:52:37,890
feedback from the other end of this of

2544
01:52:34,560 --> 01:52:39,150
this communication to answer some of the

2545
01:52:37,890 --> 01:52:42,110
questions like the third one I have on

2546
01:52:39,150 --> 01:52:44,700
this slide next please

2547
01:52:42,110 --> 01:52:47,370
so I would like to move for adoption

2548
01:52:44,700 --> 01:52:50,700
there were a few fairly minor issues

2549
01:52:47,370 --> 01:52:53,190
that are open on my private github but

2550
01:52:50,700 --> 01:52:54,840
ultimately I don't make move forward on

2551
01:52:53,190 --> 01:52:58,790
these on these larger questions without

2552
01:52:54,840 --> 01:53:00,480
larger broader working group input and

2553
01:52:58,790 --> 01:53:01,830
these algorithms are not that

2554
01:53:00,480 --> 01:53:03,809
complicated I've already played with

2555
01:53:01,830 --> 01:53:05,880
implementing them that was at most you

2556
01:53:03,810 --> 01:53:07,530
know hundred lines of code to do one of

2557
01:53:05,880 --> 01:53:08,970
these algorithms if we really nice to

2558
01:53:07,530 --> 01:53:10,440
start interrupting with them I would

2559
01:53:08,970 --> 01:53:12,330
hope to maybe do that as soon as

2560
01:53:10,440 --> 01:53:13,889
Vancouver and definitely there's some

2561
01:53:12,330 --> 01:53:16,730
there's an opportunity for somebody to

2562
01:53:13,890 --> 01:53:19,830
help help me set that up and define that

2563
01:53:16,730 --> 01:53:21,450
yeah and that's it okay Thank You Martin

2564
01:53:19,830 --> 01:53:23,700
so again we only have a few minutes to

2565
01:53:21,450 --> 01:53:25,679
discuss I'd like people to focus on is

2566
01:53:23,700 --> 01:53:27,870
this appropriate for this working group

2567
01:53:25,680 --> 01:53:29,910
is this the right time is this the right

2568
01:53:27,870 --> 01:53:32,160
starting point and especially I've heard

2569
01:53:29,910 --> 01:53:33,599
a question of whether it's appropriate

2570
01:53:32,160 --> 01:53:34,620
to do this in the quick working group or

2571
01:53:33,600 --> 01:53:36,960
elsewhere so if you can speak to that

2572
01:53:34,620 --> 01:53:39,809
that'd be interesting please go to some

2573
01:53:36,960 --> 01:53:41,460
on Thompson viewpoints

2574
01:53:39,810 --> 01:53:43,290
I like the model I like the way you're

2575
01:53:41,460 --> 01:53:45,900
framing this I don't like the protocol

2576
01:53:43,290 --> 01:53:49,050
but we can talk about that I'd probably

2577
01:53:45,900 --> 01:53:50,820
like to see that separated I don't want

2578
01:53:49,050 --> 01:53:52,590
to see any ghetto crypto in any of the

2579
01:53:50,820 --> 01:53:57,509
things we produce here I would prefer

2580
01:53:52,590 --> 01:54:01,050
that we have where time limited let's

2581
01:53:57,510 --> 01:54:03,210
move on so I'd like us to look pretty

2582
01:54:01,050 --> 01:54:05,610
seriously that sort of thing one of the

2583
01:54:03,210 --> 01:54:07,290
things this looks a lot like is the sort

2584
01:54:05,610 --> 01:54:09,809
of work that happens in the in the ops

2585
01:54:07,290 --> 01:54:11,490
area in this organization and I predict

2586
01:54:09,810 --> 01:54:13,680
that we'll have some young people

2587
01:54:11,490 --> 01:54:16,889
looking at this one I don't know how you

2588
01:54:13,680 --> 01:54:18,900
want to manage that but expressing these

2589
01:54:16,890 --> 01:54:21,600
as yang models is something that I I

2590
01:54:18,900 --> 01:54:24,960
suspect will happen whether you like it

2591
01:54:21,600 --> 01:54:26,790
or not I'm open to using it yang model

2592
01:54:24,960 --> 01:54:29,220
to express the configuration

2593
01:54:26,790 --> 01:54:30,990
I actually cracked open the RFC for that

2594
01:54:29,220 --> 01:54:32,430
and solves 172 pages and then thought

2595
01:54:30,990 --> 01:54:36,780
maybe I could get someone to do you hang

2596
01:54:32,430 --> 01:54:38,460
a lot of for a fee yes I don't think it

2597
01:54:36,780 --> 01:54:40,110
matters how it's spelled so much as that

2598
01:54:38,460 --> 01:54:41,340
what the contents of the model are so

2599
01:54:40,110 --> 01:54:42,420
let's concentrate on getting the models

2600
01:54:41,340 --> 01:54:43,950
right and then we can talk about how to

2601
01:54:42,420 --> 01:54:46,320
how to spell it okay let's not go too

2602
01:54:43,950 --> 01:54:49,710
deep keep the comments brief please

2603
01:54:46,320 --> 01:54:51,809
pretty Praveen I think the graph is

2604
01:54:49,710 --> 01:54:53,250
great especially like the fact that we

2605
01:54:51,810 --> 01:54:55,080
are giving options that are

2606
01:54:53,250 --> 01:54:56,220
incrementally deployable instead of

2607
01:54:55,080 --> 01:54:58,140
going to like a really expensive

2608
01:54:56,220 --> 01:55:00,660
solution it provides multiple solutions

2609
01:54:58,140 --> 01:55:02,280
on the way there and I think this

2610
01:55:00,660 --> 01:55:03,840
extension of the three we talked about

2611
01:55:02,280 --> 01:55:05,400
is the most important because it

2612
01:55:03,840 --> 01:55:07,020
directly affects quick wave and

2613
01:55:05,400 --> 01:55:08,969
deployment and like data centers in the

2614
01:55:07,020 --> 01:55:10,440
cloud so in terms of adoption I think

2615
01:55:08,970 --> 01:55:12,360
it's the most important and they're

2616
01:55:10,440 --> 01:55:14,940
already talking with like third party

2617
01:55:12,360 --> 01:55:18,410
load balancers about this so I think

2618
01:55:14,940 --> 01:55:18,410
it's very timely and very very important

2619
01:55:19,820 --> 01:55:24,630
make a livin so I think Martin mostly

2620
01:55:22,650 --> 01:55:26,099
said what I what I wanted to say I think

2621
01:55:24,630 --> 01:55:28,590
it's it's good that you put like the

2622
01:55:26,100 --> 01:55:29,880
different parts apart and like as much

2623
01:55:28,590 --> 01:55:31,560
as I would get because he's belong

2624
01:55:29,880 --> 01:55:33,690
together I think it's like easier to rip

2625
01:55:31,560 --> 01:55:35,520
them apart I'm especially uneasy about

2626
01:55:33,690 --> 01:55:39,089
like defining a completely new protocol

2627
01:55:35,520 --> 01:55:40,650
here for configuration I think what

2628
01:55:39,090 --> 01:55:42,600
could be in scope here is like the

2629
01:55:40,650 --> 01:55:45,420
configuration it solved the yang model

2630
01:55:42,600 --> 01:55:46,920
and the algorithms for sure because we

2631
01:55:45,420 --> 01:55:48,420
have an open issue on that one in the

2632
01:55:46,920 --> 01:55:49,800
manageability Draft and I don't care if

2633
01:55:48,420 --> 01:55:51,210
it's in that draft or if it's separate

2634
01:55:49,800 --> 01:55:53,760
draft but I think it's very much in

2635
01:55:51,210 --> 01:55:55,770
scope and I just wanted to add that

2636
01:55:53,760 --> 01:55:57,720
there is ongoing efforts about proxying

2637
01:55:55,770 --> 01:55:59,340
in general so that could could fit and

2638
01:55:57,720 --> 01:56:01,740
we're moving on and we probably will

2639
01:55:59,340 --> 01:56:03,660
propose some more work at the next

2640
01:56:01,740 --> 01:56:07,070
meeting so that's that's in process and

2641
01:56:03,660 --> 01:56:07,070
we should sync up a little bit more

2642
01:56:07,080 --> 01:56:11,370
tell me poly Apple yeah so we should

2643
01:56:09,870 --> 01:56:13,650
adopt it we should adopt it now and I

2644
01:56:11,370 --> 01:56:16,110
agree that we should split out that

2645
01:56:13,650 --> 01:56:18,120
other work but the protocol work for the

2646
01:56:16,110 --> 01:56:19,500
protocol work yeah you leave the

2647
01:56:18,120 --> 01:56:21,599
definition of the quick bits here I

2648
01:56:19,500 --> 01:56:23,130
think that's all you should do and kind

2649
01:56:21,600 --> 01:56:27,600
of find them maybe another home for that

2650
01:56:23,130 --> 01:56:29,520
part Eric Kinnear keeping things quick

2651
01:56:27,600 --> 01:56:31,890
what tommy said but I'd also like to say

2652
01:56:29,520 --> 01:56:35,580
yes we should also adopt this because we

2653
01:56:31,890 --> 01:56:38,640
as people trying to deploy things at

2654
01:56:35,580 --> 01:56:40,410
scale on the server side it will be very

2655
01:56:38,640 --> 01:56:41,880
helpful to have guidance in this area

2656
01:56:40,410 --> 01:56:44,849
and I think that's going to be

2657
01:56:41,880 --> 01:56:46,950
instrumental in in making a quick that

2658
01:56:44,850 --> 01:56:52,770
that many people can deploy as opposed

2659
01:56:46,950 --> 01:56:55,559
to a few people can deploy equations

2660
01:56:52,770 --> 01:56:58,260
gave Verizon media Yahoo eeveelutions

2661
01:56:55,560 --> 01:57:00,000
gave Verizon media Yahoo EdgeCast very

2662
01:56:58,260 --> 01:57:02,550
close to the microphone please

2663
01:57:00,000 --> 01:57:05,040
so I think this is great work thank you

2664
01:57:02,550 --> 01:57:08,520
really fantastic to actually define

2665
01:57:05,040 --> 01:57:10,470
every way of doing it we absolutely

2666
01:57:08,520 --> 01:57:11,670
should adopt this we this is one of

2667
01:57:10,470 --> 01:57:14,490
those things that's missing from being

2668
01:57:11,670 --> 01:57:16,140
able to actually go large-scale deploy I

2669
01:57:14,490 --> 01:57:18,320
agree that the protocol actually

2670
01:57:16,140 --> 01:57:21,600
probably should be split out because

2671
01:57:18,320 --> 01:57:23,460
some of us will just want to express

2672
01:57:21,600 --> 01:57:25,470
this as yang's some people want to

2673
01:57:23,460 --> 01:57:27,690
express this as JSON other people want

2674
01:57:25,470 --> 01:57:29,340
to do in band different people and they

2675
01:57:27,690 --> 01:57:32,490
do different things but ultimately I

2676
01:57:29,340 --> 01:57:34,290
hate to use there was an example but how

2677
01:57:32,490 --> 01:57:36,630
we exchange the bits this day and age

2678
01:57:34,290 --> 01:57:40,470
really doesn't matter for configuration

2679
01:57:36,630 --> 01:57:41,760
so just define a semantics and everybody

2680
01:57:40,470 --> 01:57:45,390
else will figure out how to encode it

2681
01:57:41,760 --> 01:57:48,210
but the actual algorithms that's what's

2682
01:57:45,390 --> 01:57:50,010
more critical and that requires Interop

2683
01:57:48,210 --> 01:57:52,140
and that's that's awesome what you've

2684
01:57:50,010 --> 01:57:53,850
done so absolutely we should adopt us

2685
01:57:52,140 --> 01:58:13,890
thank you

2686
01:57:53,850 --> 01:58:15,150
one more remote should be adopted okay

2687
01:58:13,890 --> 01:58:16,740
that's what I heard

2688
01:58:15,150 --> 01:58:20,190
Roberto I think you'll have the last

2689
01:58:16,740 --> 01:58:23,070
word what the last four people said

2690
01:58:20,190 --> 01:58:26,309
sorry what the last four people said

2691
01:58:23,070 --> 01:58:27,929
thank you um so I think from what I'm

2692
01:58:26,310 --> 01:58:30,210
hearing we should expect a revised draft

2693
01:58:27,930 --> 01:58:34,680
from you that's pared down perhaps does

2694
01:58:30,210 --> 01:58:35,940
that make sense yes I would still I've

2695
01:58:34,680 --> 01:58:37,610
been decide shows obviously available

2696
01:58:35,940 --> 01:58:40,349
there's a number of contentious issues

2697
01:58:37,610 --> 01:58:44,900
well a contentious is not the right word

2698
01:58:40,350 --> 01:58:46,980
I've got I've gotten no uniform rec

2699
01:58:44,900 --> 01:58:48,509
feedback on a lot of these issues so I

2700
01:58:46,980 --> 01:58:49,799
encourage some of that because I might

2701
01:58:48,510 --> 01:58:51,300
even pare it down more but and that's

2702
01:58:49,800 --> 01:58:52,560
what we don't need the issues to all be

2703
01:58:51,300 --> 01:58:54,210
solved to adopt that we just need to

2704
01:58:52,560 --> 01:58:56,400
have a good starting point in the web

2705
01:58:54,210 --> 01:58:58,920
scope and from what I heard people have

2706
01:58:56,400 --> 01:59:01,469
concerns about the the protocol portion

2707
01:58:58,920 --> 01:59:02,940
of it yes impair that out focus on the

2708
01:59:01,470 --> 01:59:04,650
model and then go from there

2709
01:59:02,940 --> 01:59:06,450
okay and do some coordination with ops

2710
01:59:04,650 --> 01:59:09,210
do some coordination elsewhere we'll

2711
01:59:06,450 --> 01:59:12,090
figure it out okay all right great thank

2712
01:59:09,210 --> 01:59:13,440
you so one more thing I think we've got

2713
01:59:12,090 --> 01:59:14,230
one minute left John did you want to

2714
01:59:13,440 --> 01:59:22,700
speak briefly

2715
01:59:14,230 --> 01:59:28,339
thank you I have slides during clothes

2716
01:59:22,700 --> 01:59:35,750
the mic sorry I have you have slides up

2717
01:59:28,340 --> 01:59:37,580
there on the thing if we have time if we

2718
01:59:35,750 --> 01:59:41,990
don't have time it's fine I don't have

2719
01:59:37,580 --> 01:59:43,640
them all right well the if while you're

2720
01:59:41,990 --> 01:59:44,090
pulling this up I'll talk about very

2721
01:59:43,640 --> 01:59:45,860
quickly

2722
01:59:44,090 --> 01:59:48,380
Martin's Eamonn and I have been working

2723
01:59:45,860 --> 01:59:51,440
on a quick Interop runner that basically

2724
01:59:48,380 --> 01:59:54,200
automates interrupts testing among

2725
01:59:51,440 --> 01:59:58,190
various implementations we introduced

2726
01:59:54,200 --> 02:00:00,380
this at the interim and we had a couple

2727
01:59:58,190 --> 02:00:02,690
of implementations playing at the inn at

2728
02:00:00,380 --> 02:00:04,280
that time and now we have a larger

2729
02:00:02,690 --> 02:00:05,599
number of implementations I can't

2730
02:00:04,280 --> 02:00:07,340
remember how many we have at last con

2731
02:00:05,600 --> 02:00:09,530
over six or seven implementations are

2732
02:00:07,340 --> 02:00:13,490
now in the interrupt runner and they're

2733
02:00:09,530 --> 02:00:16,009
all working with various tests we have I

2734
02:00:13,490 --> 02:00:18,620
think managed to get most of the tests

2735
02:00:16,010 --> 02:00:21,980
that currently are part of the interim

2736
02:00:18,620 --> 02:00:23,420
suite in the Runner the value of using

2737
02:00:21,980 --> 02:00:24,769
this runner is obviously that you

2738
02:00:23,420 --> 02:00:26,750
automate all tests and people are

2739
02:00:24,770 --> 02:00:29,000
exporting their implementation so you

2740
02:00:26,750 --> 02:00:31,190
can run against anybody's implementation

2741
02:00:29,000 --> 02:00:33,050
at any point in time that you want it

2742
02:00:31,190 --> 02:00:34,820
generally it's logs it generates various

2743
02:00:33,050 --> 02:00:37,910
things that you can look at for

2744
02:00:34,820 --> 02:00:40,130
debugging purposes and we encourage

2745
02:00:37,910 --> 02:00:42,019
those who haven't yet put their

2746
02:00:40,130 --> 02:00:45,680
implementations into the runner to

2747
02:00:42,020 --> 02:00:47,510
please go ahead and do so that's about

2748
02:00:45,680 --> 02:00:52,400
it I was going to show a chart that it

2749
02:00:47,510 --> 02:00:54,530
produces the matrix but that's yeah and

2750
02:00:52,400 --> 02:00:57,230
there's a if you have any questions

2751
02:00:54,530 --> 02:00:59,420
about it please write to me or to Martin

2752
02:00:57,230 --> 02:01:02,379
there's also a slack channel that you

2753
02:00:59,420 --> 02:01:05,930
can join what's the slack channel a

2754
02:01:02,380 --> 02:01:10,150
quick Network sim I think it's called

2755
02:01:05,930 --> 02:01:11,420
okay yeah quick - Nicole - then great

2756
02:01:10,150 --> 02:01:13,879
thank you

2757
02:01:11,420 --> 02:01:15,860
I think that's all we have so we'll

2758
02:01:13,880 --> 02:01:18,020
close the meeting hopefully we'll see a

2759
02:01:15,860 --> 02:01:21,280
bunch of you in Zurich or if not there

2760
02:01:18,020 --> 02:01:21,280
in Vancouver thank you very much

2761
02:01:22,520 --> 02:01:24,580
you

2762
02:01:38,330 --> 02:01:40,390
you

