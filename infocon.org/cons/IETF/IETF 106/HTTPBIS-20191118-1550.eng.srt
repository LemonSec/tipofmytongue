1
00:00:06,310 --> 00:00:13,070
okay folks

2
00:00:08,660 --> 00:00:15,620
just turn 350 this is HTTP if you're not

3
00:00:13,070 --> 00:00:21,380
here for HTTP you don't have to go home

4
00:00:15,620 --> 00:00:23,659
but you probably shouldn't stay here if

5
00:00:21,380 --> 00:00:25,099
if someone coming in or going out could

6
00:00:23,660 --> 00:00:29,060
close the doors back there that'll be

7
00:00:25,100 --> 00:00:44,360
immensely helpful in sweat thank you or

8
00:00:29,060 --> 00:00:45,530
or ekor yeah and what if we could keep

9
00:00:44,360 --> 00:00:53,000
the doors closed that would be even

10
00:00:45,530 --> 00:00:59,360
better okay all right so this is the

11
00:00:53,000 --> 00:01:02,210
HTTP working group oops we for those who

12
00:00:59,360 --> 00:01:06,200
didn't catch it we had a we now have a

13
00:01:02,210 --> 00:01:08,240
logo for the work that we do here we

14
00:01:06,200 --> 00:01:12,380
also have some badges and stickers to

15
00:01:08,240 --> 00:01:13,669
handouts if folks are interested there's

16
00:01:12,380 --> 00:01:15,440
a couple there's a couple on the blue

17
00:01:13,670 --> 00:01:17,869
sheet we have more in the background I

18
00:01:15,440 --> 00:01:20,270
will be handing those out afterwards if

19
00:01:17,869 --> 00:01:21,709
folks are interested if you're having a

20
00:01:20,270 --> 00:01:24,679
side conversation it'd probably better

21
00:01:21,709 --> 00:01:26,000
to do that out in the hallway if you're

22
00:01:24,679 --> 00:01:31,069
having a side conversation I'd probably

23
00:01:26,000 --> 00:01:36,349
better thank you so and and by the way

24
00:01:31,069 --> 00:01:38,989
these are these logos are open the

25
00:01:36,349 --> 00:01:43,250
source is freely available on the github

26
00:01:38,989 --> 00:01:44,270
repo so this is the note well hopefully

27
00:01:43,250 --> 00:01:45,800
you're familiar with this if you're not

28
00:01:44,270 --> 00:01:48,890
these are the terms under which we

29
00:01:45,800 --> 00:01:50,149
participate in the ITF this is important

30
00:01:48,890 --> 00:01:52,369
not only for things like intellectual

31
00:01:50,149 --> 00:01:54,050
property and copyright but also things

32
00:01:52,369 --> 00:01:55,910
like the anti harassment procedures the

33
00:01:54,050 --> 00:01:58,069
code of conduct how we treat each other

34
00:01:55,910 --> 00:01:59,630
which we do take seriously if you have

35
00:01:58,069 --> 00:02:01,009
any issues around this or any questions

36
00:01:59,630 --> 00:02:03,380
you're more than welcome to talk to

37
00:02:01,009 --> 00:02:04,879
Tommy or myself we also have other folks

38
00:02:03,380 --> 00:02:05,479
the idea for a designated to help out

39
00:02:04,879 --> 00:02:07,700
with these issues

40
00:02:05,479 --> 00:02:09,470
so please do inquire if you have any

41
00:02:07,700 --> 00:02:11,330
questions and you can always find this

42
00:02:09,470 --> 00:02:15,760
by going to your favorite web search

43
00:02:11,330 --> 00:02:15,760
engine and searching for ia TF note well

44
00:02:19,570 --> 00:02:23,100
so blue sheets are circulating please

45
00:02:21,880 --> 00:02:25,180
fill is that when they come around

46
00:02:23,100 --> 00:02:26,410
scribes do we have any volunteers for

47
00:02:25,180 --> 00:02:28,660
scribes in the room

48
00:02:26,410 --> 00:02:31,810
Lucas party was even standing up to

49
00:02:28,660 --> 00:02:36,910
signify that he's going to know okay

50
00:02:31,810 --> 00:02:38,710
he submarines do we have any volunteers

51
00:02:36,910 --> 00:02:43,450
describe the session ah thank you very

52
00:02:38,710 --> 00:02:44,590
much uh anyone willing to help out um so

53
00:02:43,450 --> 00:02:46,089
if you could either do that on the

54
00:02:44,590 --> 00:02:48,370
etherpad that's in the minutes or on a

55
00:02:46,090 --> 00:02:51,430
Google Doc and share it with folks in

56
00:02:48,370 --> 00:02:57,010
the room that'd be great thank you

57
00:02:51,430 --> 00:03:00,670
agenda bashing so we have two sessions

58
00:02:57,010 --> 00:03:02,470
this week today we're going to take a

59
00:03:00,670 --> 00:03:04,630
brief a couple minute straight of items

60
00:03:02,470 --> 00:03:06,970
to go over we're gonna have hopefully a

61
00:03:04,630 --> 00:03:10,240
pretty significant discussion of a

62
00:03:06,970 --> 00:03:11,500
proposal for priorities in http/2 with

63
00:03:10,240 --> 00:03:14,440
the idea that that would also be useful

64
00:03:11,500 --> 00:03:16,090
for the htv-3 efforts hopefully them

65
00:03:14,440 --> 00:03:18,730
come to some sort of a sense of the room

66
00:03:16,090 --> 00:03:21,430
for that then we're gonna spend a good

67
00:03:18,730 --> 00:03:23,950
amount of time on core the core specs as

68
00:03:21,430 --> 00:03:25,060
we've done for a number of meetings

69
00:03:23,950 --> 00:03:26,350
we're gonna go over some of the issues

70
00:03:25,060 --> 00:03:29,500
that the editors would like some

71
00:03:26,350 --> 00:03:31,299
feedback on and then finally uh we have

72
00:03:29,500 --> 00:03:33,790
10 minutes reserved for discussion of a

73
00:03:31,300 --> 00:03:36,940
proposal for rate limiting headers and

74
00:03:33,790 --> 00:03:38,350
that's remote presentation then on

75
00:03:36,940 --> 00:03:40,720
Thursday we'll talk about the extension

76
00:03:38,350 --> 00:03:41,920
draft for foremost the meeting then we

77
00:03:40,720 --> 00:03:43,359
have a discussion of compression

78
00:03:41,920 --> 00:03:47,049
dictionaries a proposal for a new draft

79
00:03:43,360 --> 00:03:53,140
there did that signify something or is

80
00:03:47,050 --> 00:03:55,630
it just a okay any agenda bashing no

81
00:03:53,140 --> 00:03:59,859
bashing of the agenda okay so let's go

82
00:03:55,630 --> 00:04:01,090
ahead so first of all a few related

83
00:03:59,860 --> 00:04:06,840
meetings since we're early in the week

84
00:04:01,090 --> 00:04:09,160
that folks might be interested in sorry

85
00:04:06,840 --> 00:04:10,510
that would be lovely thank you unless

86
00:04:09,160 --> 00:04:11,680
one closer the doors would like to close

87
00:04:10,510 --> 00:04:15,310
the doors that'd be great

88
00:04:11,680 --> 00:04:17,079
thank you so as you might might know the

89
00:04:15,310 --> 00:04:19,238
quick working group is working on HTTP

90
00:04:17,079 --> 00:04:20,529
three once they finish that they're

91
00:04:19,238 --> 00:04:23,200
going to hand it off to us for

92
00:04:20,529 --> 00:04:25,659
maintenance and further development but

93
00:04:23,200 --> 00:04:28,688
that's on Tuesday and Thursday SEC

94
00:04:25,660 --> 00:04:30,519
dispatch there is a proposal

95
00:04:28,689 --> 00:04:32,169
being discussed or something that's been

96
00:04:30,519 --> 00:04:33,849
actually on our radar for quite some

97
00:04:32,169 --> 00:04:36,399
time being discussed around HTTP

98
00:04:33,849 --> 00:04:37,748
requests signing that was mentioned in

99
00:04:36,399 --> 00:04:39,039
the dispatch this morning but the the

100
00:04:37,749 --> 00:04:41,079
media discussion that's going to happen

101
00:04:39,039 --> 00:04:43,089
on sexist insect dispatch on Tuesday

102
00:04:41,079 --> 00:04:44,739
there's also discussion of securing

103
00:04:43,089 --> 00:04:46,329
proxy to back in communications why do

104
00:04:44,739 --> 00:04:54,128
those doors stay up and Wow

105
00:04:46,329 --> 00:04:56,379
okay Martin well that's not great either

106
00:04:54,129 --> 00:04:59,889
really is it it was turned off

107
00:04:56,379 --> 00:05:02,019
Martin Thompson just a question why is

108
00:04:59,889 --> 00:05:04,959
the request signing stuff not happening

109
00:05:02,019 --> 00:05:08,199
here is this is that's a great question

110
00:05:04,959 --> 00:05:09,429
and I brought that up certainly like I

111
00:05:08,199 --> 00:05:12,039
said it's been on a radar it's been our

112
00:05:09,429 --> 00:05:13,508
list of drafts we're tracking the

113
00:05:12,039 --> 00:05:15,039
proponents for whatever reason took it

114
00:05:13,509 --> 00:05:17,229
to dispatch and then they had a

115
00:05:15,039 --> 00:05:18,818
discussion with SEC dispatch that

116
00:05:17,229 --> 00:05:20,258
doesn't mean it's not happening here it

117
00:05:18,819 --> 00:05:21,369
just means that the initial discussion

118
00:05:20,259 --> 00:05:23,679
has happens to be happening over there

119
00:05:21,369 --> 00:05:26,169
we equally could have had the initial

120
00:05:23,679 --> 00:05:28,089
discussion I think ya know just that's

121
00:05:26,169 --> 00:05:30,039
how the corner work because we have had

122
00:05:28,089 --> 00:05:31,329
that discussion here I think I know and

123
00:05:30,039 --> 00:05:32,438
that's I want to make sure that that's

124
00:05:31,329 --> 00:05:34,029
one of the reasons we have this slide is

125
00:05:32,439 --> 00:05:35,919
to make sure folks here understand that

126
00:05:34,029 --> 00:05:38,259
going to sex check dispatch this time

127
00:05:35,919 --> 00:05:39,878
around is probably a good idea so you

128
00:05:38,259 --> 00:05:41,079
know to my mind there are three

129
00:05:39,879 --> 00:05:44,019
communities involved in that discussion

130
00:05:41,079 --> 00:05:46,179
there's HTTP implementers and the HTTP

131
00:05:44,019 --> 00:05:47,469
folks in this room there's the people

132
00:05:46,179 --> 00:05:49,299
who actually want to use it for their

133
00:05:47,469 --> 00:05:50,889
applications and then there's the

134
00:05:49,300 --> 00:05:52,449
security community at the ITF as well

135
00:05:50,889 --> 00:05:57,789
and so we need we need input from all

136
00:05:52,449 --> 00:06:01,179
three microchip I'll add one more to

137
00:05:57,789 --> 00:06:04,628
this list that DNS ARP has adopted the

138
00:06:01,179 --> 00:06:06,818
it should be s service draft so please

139
00:06:04,629 --> 00:06:07,389
plan to come to that thank you thank you

140
00:06:06,819 --> 00:06:10,089
for the reminder

141
00:06:07,389 --> 00:06:11,829
there's also web or trans the first

142
00:06:10,089 --> 00:06:15,839
session because the second one conflicts

143
00:06:11,829 --> 00:06:15,839
with the other extreme s session okay

144
00:06:15,999 --> 00:06:21,639
actually if you could send a reminder to

145
00:06:18,129 --> 00:06:23,909
the list that'd be ideal web trans is on

146
00:06:21,639 --> 00:06:25,539
Wednesday and that's discussing

147
00:06:23,909 --> 00:06:27,998
something that kind of looks like

148
00:06:25,539 --> 00:06:29,050
WebSockets over quicken HTTP 3 I know

149
00:06:27,999 --> 00:06:32,679
that a lot of folks there are more

150
00:06:29,050 --> 00:06:34,089
inches from WebSockets W pack is also on

151
00:06:32,679 --> 00:06:35,109
Wednesday that's web packaging which has

152
00:06:34,089 --> 00:06:35,589
been discussed a little bit here from

153
00:06:35,110 --> 00:06:38,889
time to time

154
00:06:35,589 --> 00:06:40,719
and finally mops is a new working group

155
00:06:38,889 --> 00:06:42,010
on Thursday morning and that's media

156
00:06:40,719 --> 00:06:44,080
operations and

157
00:06:42,010 --> 00:06:46,840
that means video and these days video

158
00:06:44,080 --> 00:06:48,190
often means HTTP so encourage people to

159
00:06:46,840 --> 00:06:50,409
pop into that and see what it looks like

160
00:06:48,190 --> 00:06:56,170
any other related meetings that people

161
00:06:50,410 --> 00:06:58,300
want to note for HTTP folks okay so one

162
00:06:56,170 --> 00:07:00,520
more administrative item some of you may

163
00:06:58,300 --> 00:07:03,250
have noticed that there are only two of

164
00:07:00,520 --> 00:07:05,760
us up here at the table Pat Patrick

165
00:07:03,250 --> 00:07:08,260
McManus has achieved escape velocity and

166
00:07:05,760 --> 00:07:11,490
no longer is chairing the HDTV working

167
00:07:08,260 --> 00:07:11,490
group so we congratulate him on that

168
00:07:11,640 --> 00:07:20,130
thank thank him for his service take

169
00:07:15,760 --> 00:07:22,719
take take that however you like and as a

170
00:07:20,130 --> 00:07:24,790
to denote our appreciation of the

171
00:07:22,720 --> 00:07:26,560
service we've gotten a small gift that

172
00:07:24,790 --> 00:07:32,500
we hope you'll enjoy Patrick you want to

173
00:07:26,560 --> 00:07:37,570
come on up or yes well we'll meet you

174
00:07:32,500 --> 00:07:39,190
halfway so this is a apparently a glass

175
00:07:37,570 --> 00:07:44,250
and the only glass that is specifically

176
00:07:39,190 --> 00:07:44,250
designed for drinking Irish whisky yes

177
00:07:45,120 --> 00:07:57,690
we hope so gifts can be donations too

178
00:07:58,530 --> 00:08:05,890
okay so that leaves us let's just get

179
00:08:02,080 --> 00:08:07,539
that off the screen that leaves us with

180
00:08:05,890 --> 00:08:10,090
our discussion of the priorities

181
00:08:07,540 --> 00:08:13,630
proposals so just to catch folks up

182
00:08:10,090 --> 00:08:14,979
there was a discussion starting in the

183
00:08:13,630 --> 00:08:17,590
quick working group about the design of

184
00:08:14,980 --> 00:08:20,200
the priorities mechanism they then came

185
00:08:17,590 --> 00:08:22,299
to us the HTTP working group and some of

186
00:08:20,200 --> 00:08:23,710
us wearing different hats and said do we

187
00:08:22,300 --> 00:08:25,750
really you know the Charter of quick

188
00:08:23,710 --> 00:08:27,669
says that hb3 will have everything that

189
00:08:25,750 --> 00:08:29,380
HTTP - hasn't it we really mean that for

190
00:08:27,670 --> 00:08:30,790
priorities and we came to an agreement

191
00:08:29,380 --> 00:08:32,380
between the working groups that no we're

192
00:08:30,790 --> 00:08:35,110
not going to force your hand on that you

193
00:08:32,380 --> 00:08:36,789
can ship htv-3 without compatible HTTP -

194
00:08:35,110 --> 00:08:39,130
priorities and so the immediate

195
00:08:36,789 --> 00:08:40,510
discussion afterwards was well what

196
00:08:39,130 --> 00:08:41,979
would a replacement mechanism for

197
00:08:40,510 --> 00:08:43,270
signaling priorities from the client to

198
00:08:41,979 --> 00:08:45,790
the server look like

199
00:08:43,270 --> 00:08:47,199
we formed a design team and these folks

200
00:08:45,790 --> 00:08:50,709
are now reporting back to us with what

201
00:08:47,200 --> 00:08:53,380
their recommendation is yes thanks I

202
00:08:50,710 --> 00:08:55,540
mean this is Robin Marx Robin has some

203
00:08:53,380 --> 00:08:58,029
nice simulation slides towards

204
00:08:55,540 --> 00:09:01,209
I'm gonna have him talk through but next

205
00:08:58,029 --> 00:09:02,439
slide so these are the design team goals

206
00:09:01,209 --> 00:09:04,569
at least that I wrote down when I

207
00:09:02,440 --> 00:09:06,310
emailed folks on the design team I don't

208
00:09:04,570 --> 00:09:07,570
actually know that these are exactly the

209
00:09:06,310 --> 00:09:09,279
correct goals but I summarized these

210
00:09:07,570 --> 00:09:11,310
from the chairs at the time hopefully I

211
00:09:09,279 --> 00:09:16,600
synthesized them sufficiently correctly

212
00:09:11,310 --> 00:09:18,040
and so I just kind of pulled this up for

213
00:09:16,600 --> 00:09:19,899
my email the other day but determine a

214
00:09:18,040 --> 00:09:22,540
solution for HP three to have some

215
00:09:19,899 --> 00:09:24,209
client-to-server mechanism priority

216
00:09:22,540 --> 00:09:27,130
hinting mechanism that it can ship with

217
00:09:24,209 --> 00:09:28,779
so other things that we can work on a

218
00:09:27,130 --> 00:09:32,319
mechanism for each two priorities

219
00:09:28,779 --> 00:09:33,880
obviously a mechanism to indicate what

220
00:09:32,319 --> 00:09:36,630
type of priority hinting is being used

221
00:09:33,880 --> 00:09:39,250
so for example a negotiation mechanism

222
00:09:36,630 --> 00:09:40,269
something that is non minimal so at you

223
00:09:39,250 --> 00:09:42,250
know has to have this feature set that

224
00:09:40,269 --> 00:09:43,990
we think we need and of course we want

225
00:09:42,250 --> 00:09:46,750
to be able to back port it to takes you

226
00:09:43,990 --> 00:09:48,790
and ideally we want to not ship

227
00:09:46,750 --> 00:09:50,290
something that we kind of are not sure

228
00:09:48,790 --> 00:09:53,319
of we don't want something that's

229
00:09:50,290 --> 00:09:55,480
unproven and introduces too much risk I

230
00:09:53,319 --> 00:10:03,610
don't want to do kind of what we did

231
00:09:55,480 --> 00:10:05,440
with h2 all over again next slide yeah

232
00:10:03,610 --> 00:10:07,810
so what why do we need something new

233
00:10:05,440 --> 00:10:09,760
it's basically because hb20 is a bit too

234
00:10:07,810 --> 00:10:11,589
flexible for its own good so you can

235
00:10:09,760 --> 00:10:13,350
build this whole complex dependency tree

236
00:10:11,589 --> 00:10:15,190
that you see in the top right side and

237
00:10:13,350 --> 00:10:18,699
depending on the shape of the tree the

238
00:10:15,190 --> 00:10:20,260
bandwidth gets distributed if you have a

239
00:10:18,699 --> 00:10:22,000
flexible system nobody is going to agree

240
00:10:20,260 --> 00:10:24,790
on how to actually use it you can see

241
00:10:22,000 --> 00:10:26,769
that very nicely to implement is they

242
00:10:24,790 --> 00:10:28,899
they do it quite differently

243
00:10:26,769 --> 00:10:30,940
only Firefox initially using the full

244
00:10:28,899 --> 00:10:33,279
complexity of the system at least when

245
00:10:30,940 --> 00:10:35,529
in the browsers there's another point is

246
00:10:33,279 --> 00:10:38,230
that all browsers just use one scheme

247
00:10:35,529 --> 00:10:39,880
for all the web pages so it's one size

248
00:10:38,230 --> 00:10:41,589
fits all this is going to work really

249
00:10:39,880 --> 00:10:42,459
well for some pages but really badly for

250
00:10:41,589 --> 00:10:45,490
others as well

251
00:10:42,459 --> 00:10:46,630
next slide so given this this

252
00:10:45,490 --> 00:10:49,120
flexibility and these different

253
00:10:46,630 --> 00:10:51,880
approaches we were interested in which

254
00:10:49,120 --> 00:10:53,920
actually works best in practice next

255
00:10:51,880 --> 00:10:56,319
slide these are results from a paper

256
00:10:53,920 --> 00:10:59,110
from two years ago on HP 2 and we found

257
00:10:56,319 --> 00:11:01,120
priorities mainly impact larger pages in

258
00:10:59,110 --> 00:11:03,130
our use case that was over one megabyte

259
00:11:01,120 --> 00:11:05,410
we found that Chrome's approach is

260
00:11:03,130 --> 00:11:08,170
actually quite good this is the the

261
00:11:05,410 --> 00:11:09,390
black line on the slide chromed us

262
00:11:08,170 --> 00:11:11,430
everything sequentially

263
00:11:09,390 --> 00:11:13,260
so it downloads a resource in full

264
00:11:11,430 --> 00:11:15,510
before going to the next one in most

265
00:11:13,260 --> 00:11:17,069
cases so that's quite good for the web

266
00:11:15,510 --> 00:11:18,959
browsing his case the opposite end

267
00:11:17,070 --> 00:11:20,670
affair round-robin where you injure leaf

268
00:11:18,959 --> 00:11:23,010
bandwidth between everything fairly is

269
00:11:20,670 --> 00:11:25,649
the worst case this is kind of ironic

270
00:11:23,010 --> 00:11:29,069
because that's also the default in HTTP

271
00:11:25,649 --> 00:11:31,529
2 so for example the the old edge

272
00:11:29,070 --> 00:11:34,890
browser did not specify priorities and

273
00:11:31,529 --> 00:11:37,410
always fell back to the default always

274
00:11:34,890 --> 00:11:39,060
getting the worst case we also found

275
00:11:37,410 --> 00:11:41,579
some other implementation bugs related

276
00:11:39,060 --> 00:11:45,779
to the complexity of the hb2 system in

277
00:11:41,579 --> 00:11:47,609
that so next slide please so now for a

278
00:11:45,779 --> 00:11:49,339
quick and sp3 there were a lot of people

279
00:11:47,610 --> 00:11:54,360
that said maybe we can simplify this

280
00:11:49,339 --> 00:11:56,399
over several proposals proposed on how

281
00:11:54,360 --> 00:11:57,870
to do that there was a question from the

282
00:11:56,399 --> 00:11:59,339
quick working group is how well are

283
00:11:57,870 --> 00:12:01,589
these proposals gonna function in

284
00:11:59,339 --> 00:12:03,269
practice before we decide to adopt him

285
00:12:01,589 --> 00:12:04,890
so we decided to revisit that these are

286
00:12:03,269 --> 00:12:06,360
results from earlier this year we

287
00:12:04,890 --> 00:12:09,480
implemented all of this again but this

288
00:12:06,360 --> 00:12:10,920
time it's free and quick we did all the

289
00:12:09,480 --> 00:12:13,230
browser schemes and then also the new

290
00:12:10,920 --> 00:12:15,060
proposals down towards the bottom and

291
00:12:13,230 --> 00:12:17,220
you can see in this visualization it's

292
00:12:15,060 --> 00:12:19,260
it's a simple concept but it can get

293
00:12:17,220 --> 00:12:22,140
quite complex and all the flexibility

294
00:12:19,260 --> 00:12:24,120
and variants that you get in this kind

295
00:12:22,140 --> 00:12:27,930
of a system so the results from that are

296
00:12:24,120 --> 00:12:29,670
on the next slide we again confirmed

297
00:12:27,930 --> 00:12:31,890
round robin is absolutely worst so we

298
00:12:29,670 --> 00:12:33,560
took that as a baseline here so all the

299
00:12:31,890 --> 00:12:36,630
numbers here are actually the

300
00:12:33,560 --> 00:12:38,910
multiplicative improvement on the round

301
00:12:36,630 --> 00:12:41,699
robin that you can get you see on there

302
00:12:38,910 --> 00:12:43,380
on the left that chrome is the best

303
00:12:41,699 --> 00:12:46,140
performing if you look at the whole

304
00:12:43,380 --> 00:12:47,399
webpage so all the resources but now if

305
00:12:46,140 --> 00:12:49,170
you look at subsections what we've

306
00:12:47,399 --> 00:12:51,000
called you the above-the-fold resources

307
00:12:49,170 --> 00:12:52,769
or more aptly actually the critical

308
00:12:51,000 --> 00:12:54,750
resources that the things that you

309
00:12:52,769 --> 00:12:56,370
really need to load to get a first page

310
00:12:54,750 --> 00:12:58,589
view for example like that you can

311
00:12:56,370 --> 00:13:00,779
actually do better than chrome with even

312
00:12:58,589 --> 00:13:04,740
simpler schemes the ones towards the

313
00:13:00,779 --> 00:13:06,870
bottom another important result was that

314
00:13:04,740 --> 00:13:10,079
if you the server-side reprioritization

315
00:13:06,870 --> 00:13:12,089
is very powerful so again if you have

316
00:13:10,079 --> 00:13:13,529
the same scheme for all pages some pages

317
00:13:12,089 --> 00:13:15,540
are going to have miss prioritize

318
00:13:13,529 --> 00:13:17,610
resources it's very useful if you on the

319
00:13:15,540 --> 00:13:18,779
server side can say this resource is

320
00:13:17,610 --> 00:13:21,329
actually more important than the browser

321
00:13:18,779 --> 00:13:23,250
thinks it is the problem with h2 is if

322
00:13:21,329 --> 00:13:25,079
you have all these different trees

323
00:13:23,250 --> 00:13:26,550
it's difficult to know how to adjust a

324
00:13:25,079 --> 00:13:28,319
priority in that tree for each browser

325
00:13:26,550 --> 00:13:31,050
you could do some kind of user agent

326
00:13:28,319 --> 00:13:32,550
sniffing but that's hacky at best in

327
00:13:31,050 --> 00:13:34,229
practice what companies as CloudFlare

328
00:13:32,550 --> 00:13:36,149
I've been doing is simply ignoring what

329
00:13:34,230 --> 00:13:38,339
the browser tells them and overriding

330
00:13:36,149 --> 00:13:40,199
everything in the server side which kind

331
00:13:38,339 --> 00:13:42,389
of announced the whole use for the

332
00:13:40,199 --> 00:13:43,949
prioritization system so the new thing

333
00:13:42,389 --> 00:13:46,589
we need to come up with really needs to

334
00:13:43,949 --> 00:13:48,959
support service re prioritization the

335
00:13:46,589 --> 00:13:50,730
final thing is that again use we can go

336
00:13:48,959 --> 00:13:54,029
to a very simple ski some people have

337
00:13:50,730 --> 00:13:56,160
been floating simple FIFO and and called

338
00:13:54,029 --> 00:13:58,050
quits but I still think we need a lot of

339
00:13:56,160 --> 00:13:59,759
flexibility there again you will have

340
00:13:58,050 --> 00:14:02,008
some web sites that really function

341
00:13:59,759 --> 00:14:03,120
quite badly on a very simple scheme and

342
00:14:02,009 --> 00:14:05,329
then there's also the issue from

343
00:14:03,120 --> 00:14:08,279
head-of-line blocking removal and quick

344
00:14:05,329 --> 00:14:10,050
so if you do everything fully

345
00:14:08,279 --> 00:14:12,540
sequentially you will always still have

346
00:14:10,050 --> 00:14:14,790
just one stream on the wire and then the

347
00:14:12,540 --> 00:14:16,560
head of one walking isn't gonna do any

348
00:14:14,790 --> 00:14:18,599
benefits so you get a really weird

349
00:14:16,560 --> 00:14:20,449
situation where for lossy networks

350
00:14:18,600 --> 00:14:23,189
round-robin actually becomes better than

351
00:14:20,449 --> 00:14:25,378
than FIFO which is the opposite of what

352
00:14:23,189 --> 00:14:27,420
you get on normal networks better

353
00:14:25,379 --> 00:14:29,089
networks so you need some flexibility in

354
00:14:27,420 --> 00:14:32,128
the system to adapt to those use cases

355
00:14:29,089 --> 00:14:34,559
those are the main results and Ian and

356
00:14:32,129 --> 00:14:37,110
his team and did some actual tests in

357
00:14:34,559 --> 00:14:41,850
wild recently to confirm or deny this

358
00:14:37,110 --> 00:14:46,079
and he's gonna propose then that thanks

359
00:14:41,850 --> 00:14:48,779
Robin alright next slide yes so we've

360
00:14:46,079 --> 00:14:49,888
been ever since this design team started

361
00:14:48,779 --> 00:14:51,990
one of the first things I started doing

362
00:14:49,889 --> 00:14:53,339
was asking other people to write code

363
00:14:51,990 --> 00:14:55,189
because really I don't write that much

364
00:14:53,339 --> 00:14:59,610
code anymore it's sad but true

365
00:14:55,189 --> 00:15:02,069
and I convinced a co-worker to both fix

366
00:14:59,610 --> 00:15:03,809
our existing h2 scheme on our server

367
00:15:02,069 --> 00:15:06,240
side it turns out I had variety of those

368
00:15:03,809 --> 00:15:09,360
which caused it to not actually perform

369
00:15:06,240 --> 00:15:12,180
as intended for Chrome Luc's implement

370
00:15:09,360 --> 00:15:14,189
FIFO and LIFO actually it turns out LIFO

371
00:15:12,180 --> 00:15:22,410
was already implemented don't ask why it

372
00:15:14,189 --> 00:15:24,059
just was yeah yeah yeah it's just a

373
00:15:22,410 --> 00:15:26,399
pre-existing condition that sort of

374
00:15:24,059 --> 00:15:29,100
thing we also added round-robin we did

375
00:15:26,399 --> 00:15:30,509
not have support for that but since you

376
00:15:29,100 --> 00:15:32,610
know people want to understand like

377
00:15:30,509 --> 00:15:34,529
exactly what the h2 default looked like

378
00:15:32,610 --> 00:15:37,380
in real-world pages we wanted to get

379
00:15:34,529 --> 00:15:39,839
some data on that and to go back

380
00:15:37,380 --> 00:15:41,670
gee quick currently uses speedy it

381
00:15:39,839 --> 00:15:43,140
always has and never bothered to move

382
00:15:41,670 --> 00:15:45,120
over to 82 priorities because it never

383
00:15:43,140 --> 00:15:47,760
really was worth the hassle and speedy

384
00:15:45,120 --> 00:15:49,589
seem to perform fine so that's kind of

385
00:15:47,760 --> 00:15:50,810
the default in most these tests although

386
00:15:49,589 --> 00:15:53,910
a few of them you'll see we actually

387
00:15:50,810 --> 00:15:55,380
compared as the baseline versus h2 and

388
00:15:53,910 --> 00:15:56,760
the baseline versus speedy separately

389
00:15:55,380 --> 00:15:59,610
just to kind of give you better

390
00:15:56,760 --> 00:16:02,250
statistics on the metrics oh yes and

391
00:15:59,610 --> 00:16:04,589
FIFO is lowest stream ID first not the

392
00:16:02,250 --> 00:16:06,899
first request is received so it's it's a

393
00:16:04,589 --> 00:16:09,029
request order not receipt order so in

394
00:16:06,899 --> 00:16:15,209
case there's a redirect on the on the

395
00:16:09,029 --> 00:16:17,570
request next slide great so for YouTube

396
00:16:15,209 --> 00:16:20,609
quality of experience really only one

397
00:16:17,570 --> 00:16:24,209
scheme was statistically significantly

398
00:16:20,610 --> 00:16:25,410
worse than the default of speedy and

399
00:16:24,209 --> 00:16:27,089
that was LIFO and that's not that

400
00:16:25,410 --> 00:16:29,100
surprising because when you start

401
00:16:27,089 --> 00:16:30,690
getting behind on a video playback you

402
00:16:29,100 --> 00:16:32,339
get more and more behind because the

403
00:16:30,690 --> 00:16:34,459
newer requests could put in front of the

404
00:16:32,339 --> 00:16:37,320
older requests and nothing ever finishes

405
00:16:34,459 --> 00:16:40,349
the degradation is quite significant I

406
00:16:37,320 --> 00:16:42,270
kind of put a 3% in two points six

407
00:16:40,350 --> 00:16:43,680
percent is is huge

408
00:16:42,270 --> 00:16:47,250
we wouldn't launch an experiment that

409
00:16:43,680 --> 00:16:49,380
made something like 0.3 percent worse so

410
00:16:47,250 --> 00:16:52,890
this is like not quite catastrophic but

411
00:16:49,380 --> 00:16:54,810
very bad like this is completely

412
00:16:52,890 --> 00:16:57,000
unacceptable bad so just to give you an

413
00:16:54,810 --> 00:16:58,439
idea you can really mess this up if you

414
00:16:57,000 --> 00:17:00,450
get things really really sideways

415
00:16:58,440 --> 00:17:02,850
obviously like those fairly sideways but

416
00:17:00,450 --> 00:17:06,089
nonetheless it's worth playing up next

417
00:17:02,850 --> 00:17:07,530
time actually some of the most

418
00:17:06,089 --> 00:17:10,198
interesting data comes from the flywheel

419
00:17:07,530 --> 00:17:11,730
data compression proxy and chrome one of

420
00:17:10,199 --> 00:17:13,829
the reasons it's interesting is there's

421
00:17:11,730 --> 00:17:15,240
actually a high degree of request

422
00:17:13,829 --> 00:17:16,500
multiplexing and they're commonly a

423
00:17:15,240 --> 00:17:17,970
large number of requests that are

424
00:17:16,500 --> 00:17:20,309
simultaneously active on the same

425
00:17:17,970 --> 00:17:23,640
connection which is not always true for

426
00:17:20,309 --> 00:17:25,949
all of our use cases it's only for HTTP

427
00:17:23,640 --> 00:17:28,530
unfortunately it's not for HTTP so that

428
00:17:25,949 --> 00:17:30,210
obviously limits the use cases a lot and

429
00:17:28,530 --> 00:17:32,970
the summary of the results essentially

430
00:17:30,210 --> 00:17:34,500
are Chrome's use of h2 is better than

431
00:17:32,970 --> 00:17:36,870
speedy which is better than all the

432
00:17:34,500 --> 00:17:38,790
other schemes and if we go to the next

433
00:17:36,870 --> 00:17:45,959
slide the improvements range from 0.4%

434
00:17:38,790 --> 00:17:49,230
to 1.7 so green means each 2 is faster

435
00:17:45,960 --> 00:17:52,109
so just just as a metric so

436
00:17:49,230 --> 00:17:55,649
basically each to on is faster than

437
00:17:52,109 --> 00:17:57,389
every other scheme here even speedy

438
00:17:55,649 --> 00:17:59,248
which is it's only slightly faster then

439
00:17:57,389 --> 00:18:02,219
and it's statistically significantly

440
00:17:59,249 --> 00:18:04,259
faster than any 5th percentile for all

441
00:18:02,220 --> 00:18:05,730
of these so that's good because this is

442
00:18:04,259 --> 00:18:09,029
Chrome's default scheme so someone at

443
00:18:05,730 --> 00:18:11,279
Chrome got something right at least

444
00:18:09,029 --> 00:18:13,710
relative to the obvious options you know

445
00:18:11,279 --> 00:18:15,960
I I think that's that's that's great to

446
00:18:13,710 --> 00:18:17,759
hear and this is actually good enough

447
00:18:15,960 --> 00:18:19,379
that you know we we would actually

448
00:18:17,759 --> 00:18:21,090
consider switching over our default from

449
00:18:19,379 --> 00:18:22,859
the current speedy approach the h2 ones

450
00:18:21,090 --> 00:18:24,689
even you know temporarily as we

451
00:18:22,859 --> 00:18:26,279
transition because it it appears that

452
00:18:24,690 --> 00:18:28,230
this is pretty good evidence and they

453
00:18:26,279 --> 00:18:29,639
actually turns out that we have some

454
00:18:28,230 --> 00:18:31,230
other metrics research and such that

455
00:18:29,639 --> 00:18:32,639
kind of back out that this is a slightly

456
00:18:31,230 --> 00:18:37,259
better direction to move in all the

457
00:18:32,639 --> 00:18:38,879
other options but like next slide so if

458
00:18:37,259 --> 00:18:39,960
you compare relative to speedy as the

459
00:18:38,879 --> 00:18:42,449
baseline which is kind of how I

460
00:18:39,960 --> 00:18:43,769
originally set up these experiments the

461
00:18:42,450 --> 00:18:46,259
results are less statistically

462
00:18:43,769 --> 00:18:48,239
significant but as you can see you know

463
00:18:46,259 --> 00:18:51,059
there's still kind of an indication that

464
00:18:48,239 --> 00:18:54,210
h2 is is better these are the same

465
00:18:51,059 --> 00:18:55,590
metrics it's just the statistical

466
00:18:54,210 --> 00:18:57,570
analysis was done two different ways to

467
00:18:55,590 --> 00:18:58,619
make it a little bit more interesting

468
00:18:57,570 --> 00:19:02,970
it'll kind of give you some

469
00:18:58,619 --> 00:19:05,428
understanding next slide amp or

470
00:19:02,970 --> 00:19:09,869
accelerated mobile pages everyone loves

471
00:19:05,429 --> 00:19:10,980
this I know so this actually has

472
00:19:09,869 --> 00:19:13,350
slightly different performance

473
00:19:10,980 --> 00:19:15,690
properties as you'll see and in this

474
00:19:13,350 --> 00:19:18,269
case speedy which is round robin within

475
00:19:15,690 --> 00:19:21,239
bucket is better than chrome h2 FIFO

476
00:19:18,269 --> 00:19:23,879
LIFO around Rothman and the reason for

477
00:19:21,239 --> 00:19:26,519
that my understanding is that amp

478
00:19:23,879 --> 00:19:28,259
actually has a lot less like kind of

479
00:19:26,519 --> 00:19:29,759
dependency like this resource depends on

480
00:19:28,259 --> 00:19:32,460
this resource depends on this resource

481
00:19:29,759 --> 00:19:34,320
it's much more designed to be non end of

482
00:19:32,460 --> 00:19:37,049
line blocking and kind of inherently so

483
00:19:34,320 --> 00:19:40,019
there's a much simpler resource to fancy

484
00:19:37,049 --> 00:19:42,359
tree next slide

485
00:19:40,019 --> 00:19:44,190
even so yeah the the parameter

486
00:19:42,359 --> 00:19:46,259
improvement is is quite large at least

487
00:19:44,190 --> 00:19:48,779
by our standards you know you're getting

488
00:19:46,259 --> 00:19:50,759
close to two one percent a performance

489
00:19:48,779 --> 00:19:53,940
improvement versus priority of the other

490
00:19:50,759 --> 00:19:55,830
schemes so one thing that is also worth

491
00:19:53,940 --> 00:19:59,789
noting here is many vanilla suits that

492
00:19:55,830 --> 00:20:01,678
suggested just using like FIFO is fine I

493
00:19:59,789 --> 00:20:03,460
think this data at least presents that

494
00:20:01,679 --> 00:20:07,210
you can do a lot better than five

495
00:20:03,460 --> 00:20:09,730
without something overly complex and so

496
00:20:07,210 --> 00:20:11,500
you know my intuition is we should try

497
00:20:09,730 --> 00:20:13,419
to do something because you know this is

498
00:20:11,500 --> 00:20:19,090
not really that hard to to get better

499
00:20:13,419 --> 00:20:21,399
than 500 excellent so the new design

500
00:20:19,090 --> 00:20:25,059
needs to be simpler than h2 it needs to

501
00:20:21,399 --> 00:20:27,340
work for both HP - an HTTP 3 ideally

502
00:20:25,059 --> 00:20:29,379
would allow for expressing both the

503
00:20:27,340 --> 00:20:31,149
chrome h2 scheme and the speedy schemes

504
00:20:29,380 --> 00:20:32,460
in some way shape or form those are

505
00:20:31,149 --> 00:20:35,739
relatively simple schemes that seem

506
00:20:32,460 --> 00:20:37,649
plausible for different use cases should

507
00:20:35,740 --> 00:20:41,890
allow for server-side reprioritization

508
00:20:37,649 --> 00:20:45,010
as marvin mentioned the existing h2 tree

509
00:20:41,890 --> 00:20:46,570
system makes that quite challenging and

510
00:20:45,010 --> 00:20:50,320
it should not use round robin as the

511
00:20:46,570 --> 00:20:52,750
default so the there's a current draft

512
00:20:50,320 --> 00:20:55,389
at they are called that is under Kazuo

513
00:20:52,750 --> 00:20:58,690
his name and is written else if I'd

514
00:20:55,390 --> 00:21:00,429
Lucas and it includes a scheme like this

515
00:20:58,690 --> 00:21:03,370
but I'm also going to go over some

516
00:21:00,429 --> 00:21:05,890
updated design details that we have -

517
00:21:03,370 --> 00:21:06,219
one the design team met on Saturday or

518
00:21:05,890 --> 00:21:10,149
Sunday

519
00:21:06,220 --> 00:21:13,270
Mike Mike Bishop I think it might also

520
00:21:10,149 --> 00:21:16,389
be worth calling people's attention to

521
00:21:13,270 --> 00:21:19,510
when we say the chrome h2 scheme that

522
00:21:16,390 --> 00:21:22,899
isn't the full tree it is a linked list

523
00:21:19,510 --> 00:21:25,210
ordered first by priority bucket and

524
00:21:22,899 --> 00:21:27,850
second by a request order yes is

525
00:21:25,210 --> 00:21:32,470
equivalent to essentially a speedy

526
00:21:27,850 --> 00:21:35,199
parties but we're quite not round-robin

527
00:21:32,470 --> 00:21:37,090
but instead in request order we're

528
00:21:35,200 --> 00:21:42,789
extremely idea orders that's exactly

529
00:21:37,090 --> 00:21:45,189
right thanks next slide so this is an

530
00:21:42,789 --> 00:21:46,450
update to the draft an updated version

531
00:21:45,190 --> 00:21:50,409
of the draft that's around a few weeks

532
00:21:46,450 --> 00:21:51,880
ago a lot of the details here are

533
00:21:50,409 --> 00:21:53,380
actually extraordinarily similar just

534
00:21:51,880 --> 00:21:56,500
copy pasted from the draft because a lot

535
00:21:53,380 --> 00:21:58,539
of the concepts are the same but the one

536
00:21:56,500 --> 00:22:01,210
major design detail is kind of changed

537
00:21:58,539 --> 00:22:02,890
which is a move from an indent header to

538
00:22:01,210 --> 00:22:05,440
one that's more focused on the two use

539
00:22:02,890 --> 00:22:06,549
cases that we think we we care about so

540
00:22:05,440 --> 00:22:08,260
when we try to talk through that and

541
00:22:06,549 --> 00:22:10,149
other working your sorry design team

542
00:22:08,260 --> 00:22:14,590
members can help me if there's confusion

543
00:22:10,149 --> 00:22:17,500
next slide so one of the goals here is

544
00:22:14,590 --> 00:22:19,240
to have a somewhat extensible scheme

545
00:22:17,500 --> 00:22:20,650
we want to have a core functionality

546
00:22:19,240 --> 00:22:22,120
that's actually useful and we can prove

547
00:22:20,650 --> 00:22:24,670
as useful but if we want to add another

548
00:22:22,120 --> 00:22:27,129
feature to this scheme we don't want to

549
00:22:24,670 --> 00:22:28,870
have to ship an entirely new scheme and

550
00:22:27,130 --> 00:22:31,120
then then we want to have a way of like

551
00:22:28,870 --> 00:22:33,399
expressing this new thing so the idea

552
00:22:31,120 --> 00:22:34,750
here is to use key value pairs currently

553
00:22:33,400 --> 00:22:37,090
that's specified using structured

554
00:22:34,750 --> 00:22:39,160
headers there might be other ways to do

555
00:22:37,090 --> 00:22:42,100
it but you know it seems like a

556
00:22:39,160 --> 00:22:44,620
perfectly plausible approach there's two

557
00:22:42,100 --> 00:22:47,139
fields urgency and progressive sir

558
00:22:44,620 --> 00:22:48,879
agency is a number between minus 1 and 6

559
00:22:47,140 --> 00:22:50,740
right now it's basically 8 urgency

560
00:22:48,880 --> 00:22:53,050
levels to indicate these are like the

561
00:22:50,740 --> 00:22:55,120
equivalent of the speedy buckets and

562
00:22:53,050 --> 00:22:57,280
progressive is a you know 0 or 1

563
00:22:55,120 --> 00:22:58,629
basically a boolean to say either I want

564
00:22:57,280 --> 00:23:00,280
this approximately round-robin

565
00:22:58,630 --> 00:23:03,610
or I want this you know sequentially in

566
00:23:00,280 --> 00:23:06,129
order and that that helps you indicate

567
00:23:03,610 --> 00:23:07,810
that a resource is indicated it's only

568
00:23:06,130 --> 00:23:09,070
useful why call or nothing so there are

569
00:23:07,810 --> 00:23:11,409
a lot of resources that just can't be

570
00:23:09,070 --> 00:23:13,090
rendered progressively and that's why

571
00:23:11,410 --> 00:23:14,260
it's called progressive although other

572
00:23:13,090 --> 00:23:15,970
people have said maybe you should be

573
00:23:14,260 --> 00:23:21,700
called concurrency and other things

574
00:23:15,970 --> 00:23:23,590
that's another time next slide there's a

575
00:23:21,700 --> 00:23:25,840
lot of interesting semantics here part

576
00:23:23,590 --> 00:23:27,550
of the reason for kind of describing so

577
00:23:25,840 --> 00:23:30,520
amount of semantics to associate with

578
00:23:27,550 --> 00:23:33,250
these priority levels is to say ok if

579
00:23:30,520 --> 00:23:34,570
you see a request that's party 3 or

580
00:23:33,250 --> 00:23:37,120
something that that means something and

581
00:23:34,570 --> 00:23:38,919
that means the browser you know has some

582
00:23:37,120 --> 00:23:40,629
meaning attached to this and ideally

583
00:23:38,920 --> 00:23:42,940
that would allow different browsers to

584
00:23:40,630 --> 00:23:45,130
come closer in how they're using the

585
00:23:42,940 --> 00:23:47,470
parties and avoid the situation we have

586
00:23:45,130 --> 00:23:49,420
with HTTP 2 priorities where as Robin

587
00:23:47,470 --> 00:23:51,280
presented all the roses are using things

588
00:23:49,420 --> 00:23:53,080
totally differently and you can't really

589
00:23:51,280 --> 00:23:56,070
derive any meaning from a given priority

590
00:23:53,080 --> 00:23:59,139
level it's just completely arbitrary

591
00:23:56,070 --> 00:24:01,750
so this ideally will allow servers to

592
00:23:59,140 --> 00:24:04,090
effectively prepare those things because

593
00:24:01,750 --> 00:24:05,230
if everything's just as I said if it's

594
00:24:04,090 --> 00:24:07,659
all relative then there are a lot of

595
00:24:05,230 --> 00:24:09,580
different ways of using the tree as well

596
00:24:07,660 --> 00:24:11,590
as gifts people some advice on like what

597
00:24:09,580 --> 00:24:12,850
these things mean and how to use them so

598
00:24:11,590 --> 00:24:16,530
it's a little bit easier for application

599
00:24:12,850 --> 00:24:16,530
developers next slide

600
00:24:17,110 --> 00:24:20,320
so we talked a little bit about two key

601
00:24:18,970 --> 00:24:23,050
use cases before but I want to outline

602
00:24:20,320 --> 00:24:24,820
them a little bit more detail one is the

603
00:24:23,050 --> 00:24:26,200
client to server over a multiplex to

604
00:24:24,820 --> 00:24:29,320
HTTP connection

605
00:24:26,200 --> 00:24:30,940
so that's HP 2 or HP 3 so it's pretty

606
00:24:29,320 --> 00:24:33,909
clear that we understand that use case

607
00:24:30,940 --> 00:24:35,620
this is exactly what h2 parties did and

608
00:24:33,910 --> 00:24:37,540
this is this is something we have a lot

609
00:24:35,620 --> 00:24:39,729
of data for and I think we we know how

610
00:24:37,540 --> 00:24:42,310
to ship and we know how what the

611
00:24:39,730 --> 00:24:45,190
performance properties of it are the

612
00:24:42,310 --> 00:24:47,860
other one is I think Roberto described

613
00:24:45,190 --> 00:24:49,030
it as within the server where the server

614
00:24:47,860 --> 00:24:51,399
is kind of the entire serving

615
00:24:49,030 --> 00:24:52,870
infrastructure and that's the situation

616
00:24:51,400 --> 00:24:55,780
where an origin or an application

617
00:24:52,870 --> 00:24:57,429
front-end wants to change the the party

618
00:24:55,780 --> 00:24:59,110
as it when it arrives with the proxy or

619
00:24:57,430 --> 00:25:01,570
maybe the proxy does itself woman change

620
00:24:59,110 --> 00:25:03,850
the party but somewhere inside the like

621
00:25:01,570 --> 00:25:05,560
serving infrastructure you've decided ah

622
00:25:03,850 --> 00:25:07,240
the clients beside that this is the

623
00:25:05,560 --> 00:25:08,800
party but I think like it should be

624
00:25:07,240 --> 00:25:10,900
slightly higher than the other images

625
00:25:08,800 --> 00:25:14,770
are slightly lower and so I'm going to

626
00:25:10,900 --> 00:25:16,990
adjust it slightly the whole goal though

627
00:25:14,770 --> 00:25:18,730
here is in both cases we're trying to

628
00:25:16,990 --> 00:25:20,980
provide hints to the thing that

629
00:25:18,730 --> 00:25:22,240
scheduling resources to allow it to

630
00:25:20,980 --> 00:25:24,850
schedule those resources more

631
00:25:22,240 --> 00:25:26,410
effectively and more effectively like

632
00:25:24,850 --> 00:25:28,659
usually did the amount of bandwidth or

633
00:25:26,410 --> 00:25:30,610
the resource ordering or the in you know

634
00:25:28,660 --> 00:25:32,290
in the case of HTTP 1.1 it might even be

635
00:25:30,610 --> 00:25:34,449
the available connections because we

636
00:25:32,290 --> 00:25:40,450
have six connections available next

637
00:25:34,450 --> 00:25:42,420
slide so the proposal here is to

638
00:25:40,450 --> 00:25:45,370
actually use headers and as an API

639
00:25:42,420 --> 00:25:49,540
because they're the standard are the

640
00:25:45,370 --> 00:25:51,280
universal API for HTTP applications

641
00:25:49,540 --> 00:25:54,310
could also have a specific API you know

642
00:25:51,280 --> 00:25:55,750
it I know a lot of native applications

643
00:25:54,310 --> 00:25:58,360
like to actually like Burnett for

644
00:25:55,750 --> 00:25:59,410
example has a way to expose parties but

645
00:25:58,360 --> 00:26:00,669
that's a little bit out of scope for the

646
00:25:59,410 --> 00:26:04,450
design team that's kind of per

647
00:26:00,670 --> 00:26:07,480
application however there are a lot of

648
00:26:04,450 --> 00:26:08,860
challenges with headers and end and it's

649
00:26:07,480 --> 00:26:10,450
not really clear that the the working

650
00:26:08,860 --> 00:26:13,479
group wants to deal with those right now

651
00:26:10,450 --> 00:26:16,210
at this moment and we also need a frame

652
00:26:13,480 --> 00:26:19,690
for reprioritization anyway so the

653
00:26:16,210 --> 00:26:21,400
proposed solution is to have the client

654
00:26:19,690 --> 00:26:23,500
basically consume the header convert it

655
00:26:21,400 --> 00:26:25,780
into a frame on the wire and then on the

656
00:26:23,500 --> 00:26:27,010
other end if it needs to it can convert

657
00:26:25,780 --> 00:26:30,850
it back into a kind of whatever

658
00:26:27,010 --> 00:26:34,960
representation at once so this is fairly

659
00:26:30,850 --> 00:26:38,760
flexible but it also allows existing API

660
00:26:34,960 --> 00:26:46,180
is to sorry

661
00:26:38,760 --> 00:26:47,590
okay I'll just keep going okay so

662
00:26:46,180 --> 00:26:49,090
there's some open questions here one is

663
00:26:47,590 --> 00:26:50,429
should this what type of Heather should

664
00:26:49,090 --> 00:26:53,080
this be should this be a pseudo header

665
00:26:50,430 --> 00:26:55,570
and can and should this be exposed to

666
00:26:53,080 --> 00:26:59,320
the Web API so this is actually a

667
00:26:55,570 --> 00:27:01,600
question I was gonna look at mark

668
00:26:59,320 --> 00:27:03,610
Nottingham for there's some question as

669
00:27:01,600 --> 00:27:06,490
to whether this is kind of more in the

670
00:27:03,610 --> 00:27:08,740
purview of the w3c or is this is in the

671
00:27:06,490 --> 00:27:14,280
purview of the IETF but it's something

672
00:27:08,740 --> 00:27:14,280
worth thinking about next slide

673
00:27:15,400 --> 00:27:19,000
so the wiring coding goals the initial

674
00:27:17,620 --> 00:27:21,580
priority frame needs to be delivered

675
00:27:19,000 --> 00:27:22,810
prior to the headers frame so it's key

676
00:27:21,580 --> 00:27:25,120
that there is actually an initial

677
00:27:22,810 --> 00:27:27,010
priority and we know what it is the

678
00:27:25,120 --> 00:27:29,229
client should send the first request

679
00:27:27,010 --> 00:27:30,460
with the initial priorities so we

680
00:27:29,230 --> 00:27:33,070
shouldn't have to wait for the settings

681
00:27:30,460 --> 00:27:34,360
there's definitely a possibility that it

682
00:27:33,070 --> 00:27:36,669
does not have settings when it first

683
00:27:34,360 --> 00:27:38,620
sends its first request and we need to

684
00:27:36,670 --> 00:27:39,700
allow reprioritization everyone in the

685
00:27:38,620 --> 00:27:42,030
working group kind of agreed that that

686
00:27:39,700 --> 00:27:44,950
was a use case that need to be allowed

687
00:27:42,030 --> 00:27:47,139
and it was it was some way used today

688
00:27:44,950 --> 00:27:48,400
and that hopefully browsers and other

689
00:27:47,140 --> 00:27:53,800
applications would use it more in the

690
00:27:48,400 --> 00:27:55,960
future next slide so the new proposed

691
00:27:53,800 --> 00:27:59,260
frame and this is actually taken out of

692
00:27:55,960 --> 00:28:01,240
the existing draft is essentially that

693
00:27:59,260 --> 00:28:04,030
it's a stream ID and a priority field

694
00:28:01,240 --> 00:28:05,620
which is a string it's only saying the

695
00:28:04,030 --> 00:28:07,810
control stream because of HTTP two

696
00:28:05,620 --> 00:28:09,219
extensions it seems like we have some

697
00:28:07,810 --> 00:28:11,950
reason it results from greasing that

698
00:28:09,220 --> 00:28:13,510
kind of confirmed that probably only on

699
00:28:11,950 --> 00:28:15,610
stream zero can we really send this

700
00:28:13,510 --> 00:28:17,590
dream this for a new frame and have it

701
00:28:15,610 --> 00:28:19,810
have it work effectively

702
00:28:17,590 --> 00:28:21,730
it must be sent immediately preceding

703
00:28:19,810 --> 00:28:23,350
the corresponding headers to make the

704
00:28:21,730 --> 00:28:26,380
parsing machinery a little bit easier

705
00:28:23,350 --> 00:28:27,310
and reprioritization is also on the

706
00:28:26,380 --> 00:28:29,110
control screen so that's pretty

707
00:28:27,310 --> 00:28:31,060
straightforward so there's one

708
00:28:29,110 --> 00:28:32,649
awkwardness here which is this situation

709
00:28:31,060 --> 00:28:34,300
where I'm making a request on the

710
00:28:32,650 --> 00:28:37,150
request dream and right before it I have

711
00:28:34,300 --> 00:28:39,550
to serialize this new frame it's

712
00:28:37,150 --> 00:28:41,050
unfortunate that just due to how hb2 is

713
00:28:39,550 --> 00:28:43,030
specified we don't think we can get away

714
00:28:41,050 --> 00:28:44,460
with doing it any other way

715
00:28:43,030 --> 00:28:46,540
I mean if other people have especially

716
00:28:44,460 --> 00:28:48,280
deployment data that shows otherwise I'm

717
00:28:46,540 --> 00:28:50,830
sure we could we could decide to change

718
00:28:48,280 --> 00:28:54,070
this design next slide

719
00:28:50,830 --> 00:28:57,889
okay so this is a little bit more

720
00:28:54,070 --> 00:28:59,720
straightforward this is fairly you know

721
00:28:57,890 --> 00:29:03,440
there's an ID to indicate whether it's

722
00:28:59,720 --> 00:29:05,020
the push ID or the stream ID at least

723
00:29:03,440 --> 00:29:06,920
when it's not on the request stream

724
00:29:05,020 --> 00:29:08,240
sorry when it's on the control stream

725
00:29:06,920 --> 00:29:09,830
when it's on the request stream

726
00:29:08,240 --> 00:29:12,890
obviously that indicates what stream ID

727
00:29:09,830 --> 00:29:14,600
it is and you know in this case we

728
00:29:12,890 --> 00:29:16,010
actually send the party frame on the

729
00:29:14,600 --> 00:29:18,469
request stream first and then on the

730
00:29:16,010 --> 00:29:19,760
control stream later and I had little

731
00:29:18,470 --> 00:29:24,290
brackets around there just and kind of

732
00:29:19,760 --> 00:29:27,650
indicate that that's optional this next

733
00:29:24,290 --> 00:29:29,480
plane so let's talk to about the proxy

734
00:29:27,650 --> 00:29:32,180
to origin case or the kind of within

735
00:29:29,480 --> 00:29:34,340
server case a little bit the tenant

736
00:29:32,180 --> 00:29:36,290
proposal is that a priority header can

737
00:29:34,340 --> 00:29:38,090
be sent to the proxy indicates the

738
00:29:36,290 --> 00:29:39,740
birdie on the previous hop so whatever

739
00:29:38,090 --> 00:29:42,199
the client indicated the priority was in

740
00:29:39,740 --> 00:29:45,260
the in the frame and it can also be sent

741
00:29:42,200 --> 00:29:47,030
as a response to say actually I would

742
00:29:45,260 --> 00:29:50,240
like to override the party that the

743
00:29:47,030 --> 00:29:52,690
client originally specified we have an

744
00:29:50,240 --> 00:29:55,610
example deployment that's written up by

745
00:29:52,690 --> 00:29:56,990
CloudFlare there's also a shin number 57

746
00:29:55,610 --> 00:29:59,240
where Mike and others kind of discuss

747
00:29:56,990 --> 00:30:03,430
how this this might work and in the

748
00:29:59,240 --> 00:30:03,430
properties of it next slide

749
00:30:04,490 --> 00:30:09,530
negotiation with settings this is also

750
00:30:06,080 --> 00:30:11,000
in the draft currently so the key use

751
00:30:09,530 --> 00:30:13,639
cases we definitely want to capture are

752
00:30:11,000 --> 00:30:17,120
the client saying I do not support HP to

753
00:30:13,640 --> 00:30:19,430
parties so if you know don't don't use

754
00:30:17,120 --> 00:30:21,350
the default ordering don't don't use

755
00:30:19,430 --> 00:30:23,450
round robin so on and so forth so that's

756
00:30:21,350 --> 00:30:26,240
a critical use case and that was in a

757
00:30:23,450 --> 00:30:28,970
previous draft that Lucas and Brad put

758
00:30:26,240 --> 00:30:30,560
out I think at the last idea the other

759
00:30:28,970 --> 00:30:32,150
thing we'd like is the server couldn't

760
00:30:30,560 --> 00:30:35,360
express what information it wants from

761
00:30:32,150 --> 00:30:36,950
the client so the obvious thing right

762
00:30:35,360 --> 00:30:38,990
now and the thing two things that are in

763
00:30:36,950 --> 00:30:40,790
the raft right now or HT tree and

764
00:30:38,990 --> 00:30:42,470
urgency which might be renamed to

765
00:30:40,790 --> 00:30:45,470
extensible and it's basically a way of

766
00:30:42,470 --> 00:30:47,300
saying you know I would actually like HP

767
00:30:45,470 --> 00:30:49,580
to peruse style priorities if you can

768
00:30:47,300 --> 00:30:50,930
give them to me or I would actually like

769
00:30:49,580 --> 00:30:54,949
this new frame that's defined in an

770
00:30:50,930 --> 00:30:57,680
extension so we're actually kind of

771
00:30:54,950 --> 00:30:59,420
doing a somewhat odd negotiation scheme

772
00:30:57,680 --> 00:31:01,250
it turned out that negotiating anything

773
00:30:59,420 --> 00:31:02,510
with settings is is a little bit awkward

774
00:31:01,250 --> 00:31:04,310
because you're not really sure whose

775
00:31:02,510 --> 00:31:06,620
settings are going to be received

776
00:31:04,310 --> 00:31:09,470
first and you can't rely on ordering and

777
00:31:06,620 --> 00:31:11,169
so we ended up having a neat bit value

778
00:31:09,470 --> 00:31:13,730
which indicates the priority scheme and

779
00:31:11,170 --> 00:31:16,870
the server expresses kind of the order

780
00:31:13,730 --> 00:31:20,390
of priority schemes it's it prefers and

781
00:31:16,870 --> 00:31:23,090
you know the client basically chooses

782
00:31:20,390 --> 00:31:25,130
the first one that it supports there's a

783
00:31:23,090 --> 00:31:27,560
few other ways of of making this work

784
00:31:25,130 --> 00:31:30,170
but I think something with that shape is

785
00:31:27,560 --> 00:31:34,060
probably where we'll end up with next

786
00:31:30,170 --> 00:31:34,060
slide keep going

787
00:31:35,330 --> 00:31:39,189
some small issues are still to be

788
00:31:37,040 --> 00:31:41,149
decided should urgently start at one

789
00:31:39,190 --> 00:31:43,730
this might be kind of confusing to

790
00:31:41,150 --> 00:31:45,830
developers there's also the question of

791
00:31:43,730 --> 00:31:48,740
should the lowest priority actually be

792
00:31:45,830 --> 00:31:50,090
the most urgent or should the highest

793
00:31:48,740 --> 00:31:51,860
priority be the most urgent again this

794
00:31:50,090 --> 00:31:53,000
is one of those like developer API sort

795
00:31:51,860 --> 00:31:54,590
of things if we actually think we're

796
00:31:53,000 --> 00:31:56,560
going to expose this to people we

797
00:31:54,590 --> 00:31:59,840
probably should expose them be like

798
00:31:56,560 --> 00:32:03,950
easiest surface possible or did the

799
00:31:59,840 --> 00:32:10,459
encoding next slide Roberto is painting

800
00:32:03,950 --> 00:32:14,060
a bike shed all right awesome

801
00:32:10,460 --> 00:32:16,190
I like sheds as much as anyone all right

802
00:32:14,060 --> 00:32:18,200
so if we review the the core goals and

803
00:32:16,190 --> 00:32:19,670
at least the bullet points you know when

804
00:32:18,200 --> 00:32:21,650
I went back through and this is sort of

805
00:32:19,670 --> 00:32:23,660
unintentional it seems like we hit kind

806
00:32:21,650 --> 00:32:25,880
of the core goals that were outlined at

807
00:32:23,660 --> 00:32:31,070
the beginning and covered the core use

808
00:32:25,880 --> 00:32:32,420
cases and I don't think I think we are

809
00:32:31,070 --> 00:32:34,850
quite confident at least based on the

810
00:32:32,420 --> 00:32:36,830
experimental and simulation data that

811
00:32:34,850 --> 00:32:38,449
the scheme that we're outlining here

812
00:32:36,830 --> 00:32:41,659
actually will work and actually will

813
00:32:38,450 --> 00:32:45,010
perform well so next slide I think we're

814
00:32:41,660 --> 00:32:45,010
done okay

815
00:32:45,190 --> 00:32:51,110
yeah so clarifying question comment

816
00:32:48,080 --> 00:32:53,540
where were you at I was waiting for

817
00:32:51,110 --> 00:32:57,199
directions so okay go ahead

818
00:32:53,540 --> 00:32:59,440
um if you go back to slide I'm gonna be

819
00:32:57,200 --> 00:33:02,690
jumping all over the place here I'm good

820
00:32:59,440 --> 00:33:05,240
yep I think there's only three here

821
00:33:02,690 --> 00:33:07,070
because back porting and indicating that

822
00:33:05,240 --> 00:33:08,750
you're not using HTTP or --'tis kind of

823
00:33:07,070 --> 00:33:12,290
imply the same thing right

824
00:33:08,750 --> 00:33:15,860
yeah I thought I'd like this a whole lot

825
00:33:12,290 --> 00:33:17,810
more than I did in the end unfortunately

826
00:33:15,860 --> 00:33:20,209
I'm having real

827
00:33:17,810 --> 00:33:21,800
trouble sort of reconciling this this

828
00:33:20,210 --> 00:33:23,540
notion that you you had which I quite

829
00:33:21,800 --> 00:33:26,570
like the idea that you using the API of

830
00:33:23,540 --> 00:33:28,899
header fields to express priorities and

831
00:33:26,570 --> 00:33:31,730
then you start talking about frames and

832
00:33:28,900 --> 00:33:34,180
the ordering of those frames relative to

833
00:33:31,730 --> 00:33:38,390
the request center and um you lost me

834
00:33:34,180 --> 00:33:41,870
Zoe um I had some of the same thoughts

835
00:33:38,390 --> 00:33:44,630
and I personally I think I'd like us to

836
00:33:41,870 --> 00:33:46,280
focus today on the general approach in

837
00:33:44,630 --> 00:33:47,750
terms of the expressiveness of the

838
00:33:46,280 --> 00:33:49,190
priority is knowing that the bits on the

839
00:33:47,750 --> 00:33:51,710
wire are probably gonna need some

840
00:33:49,190 --> 00:33:54,500
iteration sure but I wanted to go back

841
00:33:51,710 --> 00:33:56,330
to the requirements that led to those

842
00:33:54,500 --> 00:33:58,340
conclusions more than anything else and

843
00:33:56,330 --> 00:34:00,320
you had a slide there that basically

844
00:33:58,340 --> 00:34:03,500
said that you have to have the

845
00:34:00,320 --> 00:34:06,710
priorities before the first bits of the

846
00:34:03,500 --> 00:34:09,400
headers frame lands on the wire yes I

847
00:34:06,710 --> 00:34:12,230
think to make phones back I'm not

848
00:34:09,400 --> 00:34:13,700
convinced that's true particularly if

849
00:34:12,230 --> 00:34:17,960
you start if you accept the fact that

850
00:34:13,699 --> 00:34:19,909
the that a header a an urgency header

851
00:34:17,960 --> 00:34:22,790
field whatever you want to call it I

852
00:34:19,909 --> 00:34:24,830
forget what it was is the API in which

853
00:34:22,790 --> 00:34:25,909
you expressed that piece you think about

854
00:34:24,830 --> 00:34:29,569
those cases where people are streaming

855
00:34:25,909 --> 00:34:31,310
header fields in to the stack in a

856
00:34:29,570 --> 00:34:33,560
stream in the important stuff the the

857
00:34:31,310 --> 00:34:35,870
pseudo header fields and then a block of

858
00:34:33,560 --> 00:34:37,400
the other ones and those might go out on

859
00:34:35,870 --> 00:34:39,949
the wire before you actually have access

860
00:34:37,400 --> 00:34:42,050
to the information that allows you to

861
00:34:39,949 --> 00:34:45,139
prioritize these things so do we have

862
00:34:42,050 --> 00:34:48,350
any information that supports I can tell

863
00:34:45,139 --> 00:34:50,299
you exactly why we that stipulation is

864
00:34:48,350 --> 00:34:52,489
in there and you can decide whether

865
00:34:50,300 --> 00:34:55,580
that's a good way and the reason why is

866
00:34:52,489 --> 00:34:58,640
because if you want to allow several

867
00:34:55,580 --> 00:35:00,290
different priorities and you're sending

868
00:34:58,640 --> 00:35:02,330
it back to an origin application front

869
00:35:00,290 --> 00:35:03,920
end or whatever you need to be able to

870
00:35:02,330 --> 00:35:05,930
put that somewhere in the original

871
00:35:03,920 --> 00:35:07,250
indication or don't need to but it makes

872
00:35:05,930 --> 00:35:09,440
it a lot easier if you're able to put it

873
00:35:07,250 --> 00:35:10,820
in a header in the original request back

874
00:35:09,440 --> 00:35:12,530
to the origin and if you can't then you

875
00:35:10,820 --> 00:35:14,780
need another piece of metadata that says

876
00:35:12,530 --> 00:35:16,850
like this is the party information that

877
00:35:14,780 --> 00:35:19,190
that was on that request and so having

878
00:35:16,850 --> 00:35:22,549
it before you're forwarding it back just

879
00:35:19,190 --> 00:35:24,230
makes the process a lot simpler so it's

880
00:35:22,550 --> 00:35:26,120
less a local scheduling decision and

881
00:35:24,230 --> 00:35:28,580
more of a if you want to inform the

882
00:35:26,120 --> 00:35:30,350
backend of what the client said it makes

883
00:35:28,580 --> 00:35:32,140
life a lot easier and that's why that

884
00:35:30,350 --> 00:35:33,890
was

885
00:35:32,140 --> 00:35:36,140
I'm not sure I'm finding that

886
00:35:33,890 --> 00:35:38,390
particularly convincing but I'll so

887
00:35:36,140 --> 00:35:40,788
Martin before you go and and for you and

888
00:35:38,390 --> 00:35:42,140
everyone else in the line you know my

889
00:35:40,789 --> 00:35:43,730
understanding where we're at is is that

890
00:35:42,140 --> 00:35:45,769
the design team is trying to make a

891
00:35:43,730 --> 00:35:47,180
recommendation the next step the working

892
00:35:45,769 --> 00:35:49,578
groups decide whether or not wants to do

893
00:35:47,180 --> 00:35:51,230
a call for adoption on the draft knowing

894
00:35:49,579 --> 00:35:53,240
that we don't we're not going to rubber

895
00:35:51,230 --> 00:35:54,710
stamp it we need to talk about it do you

896
00:35:53,240 --> 00:35:57,788
think that it's ready for that or do you

897
00:35:54,710 --> 00:36:01,099
think the design team needs more time I

898
00:35:57,789 --> 00:36:03,019
I wanted to work through some of these

899
00:36:01,099 --> 00:36:05,809
issues before we talked about that but I

900
00:36:03,019 --> 00:36:08,808
think based on my reading of it before

901
00:36:05,809 --> 00:36:11,779
and that was I admit superficial because

902
00:36:08,809 --> 00:36:13,220
when presented it I realized a number of

903
00:36:11,779 --> 00:36:17,059
mismatches between my understanding of

904
00:36:13,220 --> 00:36:19,098
what was written down and oh it's also

905
00:36:17,059 --> 00:36:20,480
changed apparently it's I mean this is

906
00:36:19,099 --> 00:36:21,710
yeah it's an this is an updated version

907
00:36:20,480 --> 00:36:23,269
some of the things they're taking

908
00:36:21,710 --> 00:36:25,069
directly from the draft some of the

909
00:36:23,269 --> 00:36:27,589
things are notably changed but once with

910
00:36:25,069 --> 00:36:29,690
oh that's fun once we've chased a few of

911
00:36:27,589 --> 00:36:31,880
these things to ground I don't see us

912
00:36:29,690 --> 00:36:34,130
doing anything other than what these

913
00:36:31,880 --> 00:36:36,619
fine folks have produced because it's I

914
00:36:34,130 --> 00:36:38,930
think it is approximately the right

915
00:36:36,619 --> 00:36:40,789
thing to do it's just that I want to

916
00:36:38,930 --> 00:36:43,519
make sure that what we what we're taking

917
00:36:40,789 --> 00:36:45,140
is reason properly we've got 60 minutes

918
00:36:43,519 --> 00:36:46,368
so it may be that we adopt something

919
00:36:45,140 --> 00:36:47,900
then immediately spool for design team

920
00:36:46,369 --> 00:36:49,339
that works just for the worst issues

921
00:36:47,900 --> 00:36:55,460
yeah yeah I think that's the right way

922
00:36:49,339 --> 00:36:58,549
to do it yeah Mike Bishop I will note

923
00:36:55,460 --> 00:37:01,160
that when you're discussing hetero

924
00:36:58,549 --> 00:37:03,259
versus frame if you want to allow

925
00:37:01,160 --> 00:37:08,509
reprioritization you have to have a

926
00:37:03,259 --> 00:37:11,349
frame you could also have okay martin

927
00:37:08,509 --> 00:37:11,349
says that's not true

928
00:37:12,069 --> 00:37:17,089
okay martin can come back to that but

929
00:37:14,509 --> 00:37:19,579
assuming with the premise that you have

930
00:37:17,089 --> 00:37:22,190
to have a frame anyway then we started

931
00:37:19,579 --> 00:37:25,190
talking about if you want to use a

932
00:37:22,190 --> 00:37:27,499
header to set the initial one is that in

933
00:37:25,190 --> 00:37:31,460
to end is it hop-by-hop can priorities

934
00:37:27,499 --> 00:37:33,919
change hop-by-hop and given that h2 and

935
00:37:31,460 --> 00:37:36,829
currently h3 no longer have the concept

936
00:37:33,920 --> 00:37:40,039
of hop-by-hop headers then expressing

937
00:37:36,829 --> 00:37:42,489
what you want on this hop versus what

938
00:37:40,039 --> 00:37:45,230
the client asked for in the last hop

939
00:37:42,489 --> 00:37:47,780
gets kind of dicey if you

940
00:37:45,230 --> 00:37:50,090
an end-to-end header and trying to mix

941
00:37:47,780 --> 00:37:52,220
semantics of different connections in

942
00:37:50,090 --> 00:37:55,310
there so what we wound up with in our

943
00:37:52,220 --> 00:37:57,470
discussion yesterday was we use headers

944
00:37:55,310 --> 00:38:00,200
anywhere that we are talking about a

945
00:37:57,470 --> 00:38:06,020
different hop and we use the frame to

946
00:38:00,200 --> 00:38:08,149
talk about this hop of the whole

947
00:38:06,020 --> 00:38:10,910
progestin but not just sit so it's

948
00:38:08,150 --> 00:38:14,990
basically the client sending a frame to

949
00:38:10,910 --> 00:38:17,960
indicate how that should be prioritized

950
00:38:14,990 --> 00:38:19,879
while using a header to communicate that

951
00:38:17,960 --> 00:38:23,860
information from the proxy to origin and

952
00:38:19,880 --> 00:38:26,570
from the origin to the proxy to the

953
00:38:23,860 --> 00:38:28,760
powers in signal how it should

954
00:38:26,570 --> 00:38:35,630
prioritize based on the information

955
00:38:28,760 --> 00:38:36,950
that's the server has such gentle I

956
00:38:35,630 --> 00:38:38,900
really enjoyed the data that you

957
00:38:36,950 --> 00:38:39,859
collected it seems like you got seven

958
00:38:38,900 --> 00:38:42,410
different priority levels from

959
00:38:39,860 --> 00:38:43,910
understanding it correctly you've run it

960
00:38:42,410 --> 00:38:44,750
a bunch but against a bunch of different

961
00:38:43,910 --> 00:38:46,100
websites there's kind of a couple

962
00:38:44,750 --> 00:38:48,860
percentage difference between different

963
00:38:46,100 --> 00:38:50,810
approaches I guess like as a website

964
00:38:48,860 --> 00:38:52,520
developer I would want to be like well

965
00:38:50,810 --> 00:38:53,840
for websites that have these particular

966
00:38:52,520 --> 00:38:56,780
characteristics we use this priority

967
00:38:53,840 --> 00:38:58,370
scheme and these other websites we use

968
00:38:56,780 --> 00:38:59,450
this particular card scheme I'm curious

969
00:38:58,370 --> 00:39:01,490
if you've got any recommendation so

970
00:38:59,450 --> 00:39:04,310
knowing you that or if you plan on doing

971
00:39:01,490 --> 00:39:06,229
anything like that actually I think the

972
00:39:04,310 --> 00:39:07,549
some of the text in the draft is

973
00:39:06,230 --> 00:39:09,230
actually like not a bad recommendation

974
00:39:07,550 --> 00:39:12,230
because you guys talked about some of

975
00:39:09,230 --> 00:39:13,880
the issues about like whether resources

976
00:39:12,230 --> 00:39:15,440
can be loaded progressively and whether

977
00:39:13,880 --> 00:39:17,630
they depend on each other and so on and

978
00:39:15,440 --> 00:39:19,730
so forth I don't think that's the

979
00:39:17,630 --> 00:39:22,190
end-all be-all and actually I think some

980
00:39:19,730 --> 00:39:23,390
of the the the post link by a cloud

981
00:39:22,190 --> 00:39:25,220
flare is actually good about that as

982
00:39:23,390 --> 00:39:27,859
well but I think I think the answer is

983
00:39:25,220 --> 00:39:28,819
either as a browser a browser needs to

984
00:39:27,860 --> 00:39:30,350
be slightly more intelligent about

985
00:39:28,820 --> 00:39:32,120
exactly understanding what fancy

986
00:39:30,350 --> 00:39:33,500
structure it's trying to load is or the

987
00:39:32,120 --> 00:39:36,200
website needs to help the browser and

988
00:39:33,500 --> 00:39:37,820
say like I think you're missing firing

989
00:39:36,200 --> 00:39:39,710
the dependency tree I know that's a hard

990
00:39:37,820 --> 00:39:41,180
answer yeah I guess I'm imagining like

991
00:39:39,710 --> 00:39:42,290
if my website has a lots and lots of

992
00:39:41,180 --> 00:39:45,500
resources if I should be using

993
00:39:42,290 --> 00:39:46,759
priorities system 6 for example then if

994
00:39:45,500 --> 00:39:48,290
that could be automatic then that would

995
00:39:46,760 --> 00:39:52,150
make the whole thing feel simpler to me

996
00:39:48,290 --> 00:39:52,150
but yeah yeah thanks

997
00:39:53,420 --> 00:39:59,780
Roy fielding I in your presentation I

998
00:39:57,440 --> 00:40:02,780
didn't see any reference to those

999
00:39:59,780 --> 00:40:05,570
messages that I sent earlier about using

1000
00:40:02,780 --> 00:40:08,210
ditches just a header field and I feel

1001
00:40:05,570 --> 00:40:09,830
at this point that while I appreciate a

1002
00:40:08,210 --> 00:40:12,920
lot of the the work that's gone into it

1003
00:40:09,830 --> 00:40:14,540
we're really on the cusp of a changing

1004
00:40:12,920 --> 00:40:16,910
document and not not something that's

1005
00:40:14,540 --> 00:40:19,310
ready for any sort of notion of

1006
00:40:16,910 --> 00:40:22,009
consensus even amongst the the design

1007
00:40:19,310 --> 00:40:25,400
group so I think that the work should

1008
00:40:22,010 --> 00:40:30,550
continue and and find the right path I'm

1009
00:40:25,400 --> 00:40:33,470
not really interested in a lot of the

1010
00:40:30,550 --> 00:40:35,840
complexity that's inherent in in the in

1011
00:40:33,470 --> 00:40:37,970
the scheme right now in the sense that

1012
00:40:35,840 --> 00:40:39,800
you've got a lot of talk about frames

1013
00:40:37,970 --> 00:40:42,109
and prioritizations and using different

1014
00:40:39,800 --> 00:40:43,670
things which you know from my

1015
00:40:42,110 --> 00:40:47,300
perspective I don't need any of that I

1016
00:40:43,670 --> 00:40:52,730
just need a header field so I would like

1017
00:40:47,300 --> 00:40:55,330
to get us back to the point where we're

1018
00:40:52,730 --> 00:40:58,010
you know we have discussions in in the

1019
00:40:55,330 --> 00:40:59,240
design group or whatever or we shift out

1020
00:40:58,010 --> 00:41:01,670
of the design group we should actually

1021
00:40:59,240 --> 00:41:04,910
be thinking about all of the complexity

1022
00:41:01,670 --> 00:41:06,320
of HTTP not just Chrome's interests not

1023
00:41:04,910 --> 00:41:09,109
just one browsers interest or a

1024
00:41:06,320 --> 00:41:12,560
different browsers interests I mean the

1025
00:41:09,110 --> 00:41:16,100
idea here is that we have to adapt the

1026
00:41:12,560 --> 00:41:18,740
complex the the rate at which the

1027
00:41:16,100 --> 00:41:20,330
protocol is processing the requests to

1028
00:41:18,740 --> 00:41:24,379
all of the different applications that

1029
00:41:20,330 --> 00:41:27,140
might use HTTP the one size all doesn't

1030
00:41:24,380 --> 00:41:30,200
work in that perspective doesn't work

1031
00:41:27,140 --> 00:41:33,920
and so I would prefer that we spend more

1032
00:41:30,200 --> 00:41:36,890
time introducing flexibility to the

1033
00:41:33,920 --> 00:41:39,320
priorities as opposed to trying to shift

1034
00:41:36,890 --> 00:41:48,670
them into the simple simple repetition

1035
00:41:39,320 --> 00:41:51,590
of age toothed browsers monotone Tsin I

1036
00:41:48,670 --> 00:41:55,760
find myself agreeing with Roy for other

1037
00:41:51,590 --> 00:41:57,560
reasons that I think equally valid when

1038
00:41:55,760 --> 00:42:00,200
I ask the question about the the

1039
00:41:57,560 --> 00:42:02,660
ordering of these things I didn't

1040
00:42:00,200 --> 00:42:04,549
realize that that was masking the bigger

1041
00:42:02,660 --> 00:42:07,098
issue of how this meant and how this

1042
00:42:04,550 --> 00:42:11,059
managers hop by hop or end-to-end

1043
00:42:07,099 --> 00:42:12,979
in this this whole thing and in the

1044
00:42:11,059 --> 00:42:16,640
earlier iterations of the draft proposal

1045
00:42:12,979 --> 00:42:18,078
that this is evolved from there was a

1046
00:42:16,640 --> 00:42:19,368
very simple notion that you would set a

1047
00:42:18,079 --> 00:42:20,749
head of field and maybe the head of

1048
00:42:19,369 --> 00:42:23,150
field would be changed by intermediaries

1049
00:42:20,749 --> 00:42:25,218
along the path as they applied their

1050
00:42:23,150 --> 00:42:27,529
knowledge of what the situation was and

1051
00:42:25,219 --> 00:42:30,890
then it would come back with different

1052
00:42:27,529 --> 00:42:32,539
values again such that the origin server

1053
00:42:30,890 --> 00:42:35,930
could have some sort of input into that

1054
00:42:32,539 --> 00:42:37,969
process and now we've got this notion

1055
00:42:35,930 --> 00:42:39,529
that well you have that process going on

1056
00:42:37,969 --> 00:42:42,680
and at the same time you have something

1057
00:42:39,529 --> 00:42:45,650
where individual steps in that chain

1058
00:42:42,680 --> 00:42:48,589
would make statements about the next hop

1059
00:42:45,650 --> 00:42:51,380
in that chain that's me sounds like a

1060
00:42:48,589 --> 00:42:54,529
far more complex situation to be to be

1061
00:42:51,380 --> 00:42:56,989
in and I don't know that that's really

1062
00:42:54,529 --> 00:42:58,869
all that helpful do you have any

1063
00:42:56,989 --> 00:43:01,249
information to suggest that this is

1064
00:42:58,869 --> 00:43:03,529
absolutely necessary because its

1065
00:43:01,249 --> 00:43:06,618
complexity and it's a sort of complexity

1066
00:43:03,529 --> 00:43:09,079
that I thought that we kind of decided

1067
00:43:06,619 --> 00:43:11,180
we didn't need I can give you my

1068
00:43:09,079 --> 00:43:13,279
thoughts I'm not sure I mean at the end

1069
00:43:11,180 --> 00:43:14,749
of the day I think we kept coming back

1070
00:43:13,279 --> 00:43:16,400
to the idea that there was a lot of

1071
00:43:14,749 --> 00:43:20,709
interest in actually having a hop-by-hop

1072
00:43:16,400 --> 00:43:20,709
header and that doesn't exist

1073
00:43:22,759 --> 00:43:28,190
so I mean interest or or evidence that

1074
00:43:25,969 --> 00:43:33,819
this is useful well I think we have on a

1075
00:43:28,190 --> 00:43:39,769
hop by hop feature is really useful so I

1076
00:43:33,819 --> 00:43:41,029
don't think that's really is that what

1077
00:43:39,769 --> 00:43:43,160
we're talking about whether these things

1078
00:43:41,029 --> 00:43:45,049
whether the signaling that we have and

1079
00:43:43,160 --> 00:43:48,170
the extra information that's carried in

1080
00:43:45,049 --> 00:43:49,459
the signal as input to prioritization

1081
00:43:48,170 --> 00:43:53,059
decisions that are made at various

1082
00:43:49,459 --> 00:43:55,759
points in the in the network is useful

1083
00:43:53,059 --> 00:43:57,589
for performance this is a performance

1084
00:43:55,759 --> 00:44:01,099
enhancement thing yes do you have

1085
00:43:57,589 --> 00:44:03,319
evidence that the hop by hop signal in

1086
00:44:01,099 --> 00:44:07,099
addition to an end-to-end style signal

1087
00:44:03,319 --> 00:44:09,739
is valuable for performance I think I

1088
00:44:07,099 --> 00:44:11,690
saw that there was evidence that so we

1089
00:44:09,739 --> 00:44:14,709
have every signal as I have signal is

1090
00:44:11,690 --> 00:44:18,109
useful and we have evidence that the

1091
00:44:14,709 --> 00:44:19,999
kind of origin to proxy signal is useful

1092
00:44:18,109 --> 00:44:20,509
we actually have no events right now

1093
00:44:19,999 --> 00:44:22,040
that the

1094
00:44:20,510 --> 00:44:27,290
and in signal is useful because no one's

1095
00:44:22,040 --> 00:44:29,029
ever done it but we just talked about

1096
00:44:27,290 --> 00:44:37,070
having an IP I that the head of field

1097
00:44:29,030 --> 00:44:39,830
was sufficient okay long as he did we're

1098
00:44:37,070 --> 00:44:41,800
gonna close so I think I was coming up

1099
00:44:39,830 --> 00:44:45,470
here to address exactly these things

1100
00:44:41,800 --> 00:44:52,070
hope we'll see if I succeed this Roberto

1101
00:44:45,470 --> 00:44:54,740
by the way so one of the observations

1102
00:44:52,070 --> 00:44:56,990
one was that in many many deployments it

1103
00:44:54,740 --> 00:44:59,450
seems that the thing that's terminating

1104
00:44:56,990 --> 00:45:02,810
a multiplexed connection whether that be

1105
00:44:59,450 --> 00:45:05,810
a client for you p1 one stuff trying to

1106
00:45:02,810 --> 00:45:09,950
do multiplexing or a reverse proxy that

1107
00:45:05,810 --> 00:45:14,600
is terminating h2 or h3 connection the

1108
00:45:09,950 --> 00:45:17,000
server that is being sorry the server

1109
00:45:14,600 --> 00:45:19,279
that is receiving the requests is very

1110
00:45:17,000 --> 00:45:21,380
often an HTTP one one server regardless

1111
00:45:19,280 --> 00:45:24,170
of how the client connection is actually

1112
00:45:21,380 --> 00:45:26,030
terminated and so we need a mechanism of

1113
00:45:24,170 --> 00:45:29,180
specifying to the thing that is

1114
00:45:26,030 --> 00:45:32,060
terminating the multiplexing how it

1115
00:45:29,180 --> 00:45:33,770
should do something right and if you

1116
00:45:32,060 --> 00:45:35,420
have an HTTP one-one client is pretty

1117
00:45:33,770 --> 00:45:37,369
obvious that the only thing you can do a

1118
00:45:35,420 --> 00:45:38,690
sorry an h2 b11 server it's pretty

1119
00:45:37,369 --> 00:45:41,930
obvious the only thing you can do is put

1120
00:45:38,690 --> 00:45:49,310
a header in there unless you're gonna do

1121
00:45:41,930 --> 00:45:51,319
an HTTP 1.2 I know so it seems like

1122
00:45:49,310 --> 00:45:53,420
that's a pretty foregone conclusion then

1123
00:45:51,320 --> 00:45:56,180
the next question you have is do you

1124
00:45:53,420 --> 00:45:58,580
strip it or don't you strip it right and

1125
00:45:56,180 --> 00:46:00,919
if you don't strip it then you have all

1126
00:45:58,580 --> 00:46:03,650
kinds of additional complexity around

1127
00:46:00,920 --> 00:46:05,990
caching that gets really interesting and

1128
00:46:03,650 --> 00:46:09,470
fun clearly we could invent a new

1129
00:46:05,990 --> 00:46:10,939
category of headers but then we'd have

1130
00:46:09,470 --> 00:46:15,290
to deal with the backwards compatibility

1131
00:46:10,940 --> 00:46:18,980
of current deployments the thing that

1132
00:46:15,290 --> 00:46:21,380
was mentioned in the design team there

1133
00:46:18,980 --> 00:46:22,820
was hey you know even if it does screw

1134
00:46:21,380 --> 00:46:24,980
with caching a bit at least it's not a

1135
00:46:22,820 --> 00:46:27,350
correctness problem it's going to be an

1136
00:46:24,980 --> 00:46:28,850
optimality problem so it is possible to

1137
00:46:27,350 --> 00:46:31,368
do that and the system shouldn't fall

1138
00:46:28,850 --> 00:46:33,440
over and do anything really terrible on

1139
00:46:31,369 --> 00:46:34,470
the other end on from sending from the

1140
00:46:33,440 --> 00:46:36,510
client side

1141
00:46:34,470 --> 00:46:38,040
right the observation was that many

1142
00:46:36,510 --> 00:46:42,000
implementations are composed of

1143
00:46:38,040 --> 00:46:44,520
different libraries together and it was

1144
00:46:42,000 --> 00:46:46,020
not obvious that there was any one API

1145
00:46:44,520 --> 00:46:47,160
that you could specify that's going to

1146
00:46:46,020 --> 00:46:48,509
go all the way to the part of the

1147
00:46:47,160 --> 00:46:50,279
implementation that actually has to do

1148
00:46:48,510 --> 00:46:52,680
the multiplexing which was the reason

1149
00:46:50,280 --> 00:46:55,800
for saying you know ultimately the one

1150
00:46:52,680 --> 00:46:57,390
thing that is HDPE gosh darn it is

1151
00:46:55,800 --> 00:46:59,430
there's headers and then there's other

1152
00:46:57,390 --> 00:47:00,868
stuff right so headers is the way to

1153
00:46:59,430 --> 00:47:02,730
talk to the thing that's actually doing

1154
00:47:00,869 --> 00:47:06,560
the serialization and the multiplexing I

1155
00:47:02,730 --> 00:47:12,990
see Roy laughing anyway it's sadly true

1156
00:47:06,560 --> 00:47:13,980
like HTTP man so you know if we decide

1157
00:47:12,990 --> 00:47:17,640
to make that end-to-end

1158
00:47:13,980 --> 00:47:19,670
I mean okay fine but then the question

1159
00:47:17,640 --> 00:47:22,049
but then you have to do a disambiguation

1160
00:47:19,670 --> 00:47:24,780
because you are trying to target a

1161
00:47:22,050 --> 00:47:27,900
specific hop when you are a client

1162
00:47:24,780 --> 00:47:29,220
trying to do signals prioritization so

1163
00:47:27,900 --> 00:47:30,720
either you have to make rules for

1164
00:47:29,220 --> 00:47:32,790
stripping or you have to make rules for

1165
00:47:30,720 --> 00:47:38,490
mutation all right

1166
00:47:32,790 --> 00:47:42,329
anyway there you go guys mic mic line

1167
00:47:38,490 --> 00:47:44,578
was closed already thank you I just

1168
00:47:42,329 --> 00:47:46,680
wanted to point out of that we are

1169
00:47:44,579 --> 00:47:50,040
mostly discussing about how we convey

1170
00:47:46,680 --> 00:47:52,169
the signal instead of the semantics that

1171
00:47:50,040 --> 00:47:55,650
we have so maybe a path forward would be

1172
00:47:52,170 --> 00:48:00,380
to talk about to see if we have a course

1173
00:47:55,650 --> 00:48:08,130
or something other semantics of exam

1174
00:48:00,380 --> 00:48:12,780
maybe talk further about well my claim

1175
00:48:08,130 --> 00:48:14,819
is closed that's right okay so it's

1176
00:48:12,780 --> 00:48:17,670
pretty clear that we don't have

1177
00:48:14,819 --> 00:48:21,150
consensus on the solution and there's

1178
00:48:17,670 --> 00:48:22,619
still a lot to discuss in my mind the

1179
00:48:21,150 --> 00:48:26,609
question is where should the discussion

1180
00:48:22,619 --> 00:48:28,770
happen and how I don't yeah just my

1181
00:48:26,609 --> 00:48:30,900
perspective I am a little concerned that

1182
00:48:28,770 --> 00:48:32,339
I see things like we're you know the

1183
00:48:30,900 --> 00:48:34,440
design team comes to consensus the

1184
00:48:32,339 --> 00:48:36,180
design team is closing issues but it's

1185
00:48:34,440 --> 00:48:39,329
not incorporating into our community and

1186
00:48:36,180 --> 00:48:41,460
so I'd rather have these things done in

1187
00:48:39,329 --> 00:48:44,040
public spaces so we can get the input

1188
00:48:41,460 --> 00:48:46,410
from the entire community and so I'm

1189
00:48:44,040 --> 00:48:47,759
thinking maybe we should hum to say do

1190
00:48:46,410 --> 00:48:48,270
we do we want to adopt this as a

1191
00:48:47,760 --> 00:48:49,770
starting

1192
00:48:48,270 --> 00:48:51,750
knowing that it's not going to be the

1193
00:48:49,770 --> 00:48:54,600
endpoint or do we want to give the

1194
00:48:51,750 --> 00:48:58,140
design team more time to fight yeah and

1195
00:48:54,600 --> 00:49:01,890
I think one question just if anyone on

1196
00:48:58,140 --> 00:49:03,810
the design team thinks that having more

1197
00:49:01,890 --> 00:49:06,930
time as just a design team would be like

1198
00:49:03,810 --> 00:49:09,480
very important or change the output of

1199
00:49:06,930 --> 00:49:11,940
this that would be good to know but it

1200
00:49:09,480 --> 00:49:13,560
seems my impression is that the design

1201
00:49:11,940 --> 00:49:14,970
team you know has what they have and

1202
00:49:13,560 --> 00:49:16,860
they think that's a good spot and it's

1203
00:49:14,970 --> 00:49:19,799
probably most useful to have that come

1204
00:49:16,860 --> 00:49:23,780
into the larger group now so is that I

1205
00:49:19,800 --> 00:49:23,780
say I see nodding so that seems to be

1206
00:49:30,680 --> 00:49:34,370
okay we can hum well we're gonna do a

1207
00:49:32,790 --> 00:49:37,200
call for an option that's the next step

1208
00:49:34,370 --> 00:49:38,490
does anybody think that it does anyone

1209
00:49:37,200 --> 00:49:42,000
stand and say that no we shouldn't do a

1210
00:49:38,490 --> 00:49:49,229
call for an option yet Thompson stands

1211
00:49:42,000 --> 00:49:51,630
up I mean this issue of whether this is

1212
00:49:49,230 --> 00:49:54,270
a hop-by-hop or into any signal is kind

1213
00:49:51,630 --> 00:49:56,520
of fundamental and we need to resolve it

1214
00:49:54,270 --> 00:49:59,250
now sure we can we can say that we're

1215
00:49:56,520 --> 00:50:00,420
going to adopt something and then decide

1216
00:49:59,250 --> 00:50:01,770
to do something completely different to

1217
00:50:00,420 --> 00:50:06,120
what's being proposed in that in that

1218
00:50:01,770 --> 00:50:09,509
document but I don't see why we have to

1219
00:50:06,120 --> 00:50:13,370
I think we should probably just resolve

1220
00:50:09,510 --> 00:50:15,510
the issue before we adopt this thing

1221
00:50:13,370 --> 00:50:18,290
since it proposes something

1222
00:50:15,510 --> 00:50:23,550
why are you gaining adoption on that

1223
00:50:18,290 --> 00:50:25,170
it's fundamental sure so it's also a I

1224
00:50:23,550 --> 00:50:26,850
think as has been already pointed out by

1225
00:50:25,170 --> 00:50:28,560
Kazu her like there are two parts to

1226
00:50:26,850 --> 00:50:31,410
this there's what we want to communicate

1227
00:50:28,560 --> 00:50:34,380
of essentially this the seven levels

1228
00:50:31,410 --> 00:50:37,830
plus the progressive bit and if we think

1229
00:50:34,380 --> 00:50:39,420
essentially we could adopt that part and

1230
00:50:37,830 --> 00:50:41,370
say we're not sure about the

1231
00:50:39,420 --> 00:50:43,200
communication scheme for it but we

1232
00:50:41,370 --> 00:50:46,350
believe that that is the right thing to

1233
00:50:43,200 --> 00:50:48,689
communicate however it is done yeah I

1234
00:50:46,350 --> 00:50:51,060
think that's less contentious I think I

1235
00:50:48,690 --> 00:50:52,470
don't care about that sort of things as

1236
00:50:51,060 --> 00:50:54,770
much nearly as much as I care about the

1237
00:50:52,470 --> 00:50:57,029
the fundamental question of whether this

1238
00:50:54,770 --> 00:50:58,170
what it is that we're prioritizing and

1239
00:50:57,030 --> 00:51:00,510
if we can't agree on what it is we're

1240
00:50:58,170 --> 00:51:02,040
prioritizing I don't know where we're

1241
00:51:00,510 --> 00:51:03,300
going so

1242
00:51:02,040 --> 00:51:05,820
and I don't think we know where we're

1243
00:51:03,300 --> 00:51:07,140
going yet but if you look at the history

1244
00:51:05,820 --> 00:51:09,180
of documents we've adopted and what

1245
00:51:07,140 --> 00:51:12,120
comes out the other end there's often a

1246
00:51:09,180 --> 00:51:13,890
remarkable difference and you know the

1247
00:51:12,120 --> 00:51:16,170
higher orbit here is is the way HTP

1248
00:51:13,890 --> 00:51:17,930
working group is working on this now and

1249
00:51:16,170 --> 00:51:20,370
I think that's the question at hand I

1250
00:51:17,930 --> 00:51:22,620
had a question for Martin about how

1251
00:51:20,370 --> 00:51:25,799
we've been discussing this particular

1252
00:51:22,620 --> 00:51:27,690
question for four months I'm not it I

1253
00:51:25,800 --> 00:51:29,160
don't like maybe you have some magic way

1254
00:51:27,690 --> 00:51:35,070
to resolve it quickly but I think it's

1255
00:51:29,160 --> 00:51:37,529
it's hard yes I'm not debating the fact

1256
00:51:35,070 --> 00:51:39,870
that the question is a difficult one I'm

1257
00:51:37,530 --> 00:51:41,480
just thinking about we're spending our

1258
00:51:39,870 --> 00:51:43,380
time debating whether to adopt something

1259
00:51:41,480 --> 00:51:46,590
where we should be spending that time

1260
00:51:43,380 --> 00:51:48,930
debating the question to be clear we're

1261
00:51:46,590 --> 00:51:50,190
out of time for this I'm good so so

1262
00:51:48,930 --> 00:51:51,720
that's why we're talking about it done

1263
00:51:50,190 --> 00:51:53,060
or not yeah we're talking about next

1264
00:51:51,720 --> 00:51:56,520
steps

1265
00:51:53,060 --> 00:52:01,020
yeah so I think we'll do a call for

1266
00:51:56,520 --> 00:52:03,930
adoption on the list before we we go to

1267
00:52:01,020 --> 00:52:05,400
the next item you know if we adopt

1268
00:52:03,930 --> 00:52:08,069
something we'll have list discussion

1269
00:52:05,400 --> 00:52:10,020
we'll have issues the next opportunity

1270
00:52:08,070 --> 00:52:12,000
to discuss this face-to-face for this

1271
00:52:10,020 --> 00:52:16,740
working group is going to be in

1272
00:52:12,000 --> 00:52:18,090
Vancouver is this urgent and and and

1273
00:52:16,740 --> 00:52:24,060
topical enough for folks will they'd

1274
00:52:18,090 --> 00:52:26,340
consider an interim meeting I see some

1275
00:52:24,060 --> 00:52:30,650
nods there's an obvious opportunity for

1276
00:52:26,340 --> 00:52:32,700
doing that so Thomson are you suggesting

1277
00:52:30,650 --> 00:52:36,300
collocation with the quick interim

1278
00:52:32,700 --> 00:52:38,520
Cheers right that that seems far more

1279
00:52:36,300 --> 00:52:41,490
tractable than any other thing about the

1280
00:52:38,520 --> 00:52:44,550
implied by well we're not a force yeah

1281
00:52:41,490 --> 00:52:45,930
so comments I I I'm gonna be the quick

1282
00:52:44,550 --> 00:52:47,400
interim I suspect a large number of the

1283
00:52:45,930 --> 00:52:49,440
people involved in this discussion will

1284
00:52:47,400 --> 00:52:52,140
be at the quick interim so maybe that's

1285
00:52:49,440 --> 00:52:53,730
not such a bad thing I do we make sure

1286
00:52:52,140 --> 00:52:56,790
that we don't we're not sidelining

1287
00:52:53,730 --> 00:53:00,000
anyone who might might not otherwise be

1288
00:52:56,790 --> 00:53:01,560
at that meeting so if anyone is inclined

1289
00:53:00,000 --> 00:53:03,300
not to go to that meeting anyway but

1290
00:53:01,560 --> 00:53:05,580
would be very interested in this topic I

1291
00:53:03,300 --> 00:53:07,440
think probably a good idea to talk to

1292
00:53:05,580 --> 00:53:08,910
the chairs well the really nice part of

1293
00:53:07,440 --> 00:53:11,070
that is is that Julian and Roy are gonna

1294
00:53:08,910 --> 00:53:13,830
be in the area at the time as well right

1295
00:53:11,070 --> 00:53:17,300
so it's already a clarifying question

1296
00:53:13,830 --> 00:53:17,299
about your proposal to co-locate

1297
00:53:19,680 --> 00:53:27,069
as a potential host of the quick interim

1298
00:53:23,470 --> 00:53:29,500
meeting the person who reserved the

1299
00:53:27,070 --> 00:53:32,490
rooms for example what we have reserved

1300
00:53:29,500 --> 00:53:35,800
now is currently split up for

1301
00:53:32,490 --> 00:53:39,549
essentially speaking the Interop and

1302
00:53:35,800 --> 00:53:43,030
then a few days of the quick standards

1303
00:53:39,550 --> 00:53:45,940
meeting if you are planning to add two

1304
00:53:43,030 --> 00:53:48,760
days to do that on the beginning or end

1305
00:53:45,940 --> 00:53:50,500
I am not at all confident at this point

1306
00:53:48,760 --> 00:53:54,910
that we have those rooms available if

1307
00:53:50,500 --> 00:53:56,740
you want to replace the interrupts with

1308
00:53:54,910 --> 00:53:58,859
a different standards meeting or run

1309
00:53:56,740 --> 00:54:01,270
them in parallel that seems very

1310
00:53:58,860 --> 00:54:02,830
different and I'm a little concerned I

1311
00:54:01,270 --> 00:54:04,330
was thinking about something else but I

1312
00:54:02,830 --> 00:54:05,710
was not assuming any availability in

1313
00:54:04,330 --> 00:54:07,810
your parts but we can take this up so

1314
00:54:05,710 --> 00:54:10,000
thank you very much sure you're off the

1315
00:54:07,810 --> 00:54:12,250
hook yes all right well we'll have more

1316
00:54:10,000 --> 00:54:13,240
discussions about this thank you very

1317
00:54:12,250 --> 00:54:16,500
much and thank you to Ian for the

1318
00:54:13,240 --> 00:54:16,500
presentation that was very helpful so

1319
00:54:18,900 --> 00:54:37,900
now we have HTTP core Roy do you want to

1320
00:54:23,380 --> 00:54:42,250
present this one okay so Rory fielding

1321
00:54:37,900 --> 00:54:45,640
and editing this the HP one the X

1322
00:54:42,250 --> 00:54:48,940
documents with Julian and Mark next

1323
00:54:45,640 --> 00:54:51,100
slide okay so everyone probably knows we

1324
00:54:48,940 --> 00:54:53,710
have the latest version of drafts or a

1325
00:54:51,100 --> 00:54:58,330
draft zero six these are links to them

1326
00:54:53,710 --> 00:55:01,030
it's like and there's also two sets of

1327
00:54:58,330 --> 00:55:02,529
gifts out there that you can look at the

1328
00:55:01,030 --> 00:55:03,340
first set are just the differences since

1329
00:55:02,530 --> 00:55:06,730
the last version

1330
00:55:03,340 --> 00:55:08,680
and the second set are all of the

1331
00:55:06,730 --> 00:55:11,410
wording changes that we've made since

1332
00:55:08,680 --> 00:55:14,500
the RFC's we organized so that you can

1333
00:55:11,410 --> 00:55:15,819
just see the the word gifts and that can

1334
00:55:14,500 --> 00:55:17,860
be very useful if you're only interested

1335
00:55:15,820 --> 00:55:19,510
in things that we screwed up then that's

1336
00:55:17,860 --> 00:55:22,630
what you want to look at if you want to

1337
00:55:19,510 --> 00:55:23,740
see how we've reorganized everything

1338
00:55:22,630 --> 00:55:28,240
then you want to look at the whole

1339
00:55:23,740 --> 00:55:29,348
github history vast majority of our work

1340
00:55:28,240 --> 00:55:30,970
so far

1341
00:55:29,349 --> 00:55:33,339
has been trying to fit the rights

1342
00:55:30,970 --> 00:55:35,319
paragraphs in the right locations and

1343
00:55:33,339 --> 00:55:38,319
then making minor changes in the

1344
00:55:35,319 --> 00:55:39,579
paragraphs after that so you'll see it's

1345
00:55:38,319 --> 00:55:40,900
much easier if you if you're just

1346
00:55:39,579 --> 00:55:44,309
interested in what the protocol changes

1347
00:55:40,900 --> 00:55:48,819
are look at the franc and RFC dips

1348
00:55:44,309 --> 00:55:51,009
thanks slide since since Montreal we

1349
00:55:48,819 --> 00:55:52,720
closed a list of issues I'm not going to

1350
00:55:51,009 --> 00:55:58,779
go through them but they're all up there

1351
00:55:52,720 --> 00:56:01,450
on the on github next slide and there's

1352
00:55:58,779 --> 00:56:04,450
two we've also been tracking their rata

1353
00:56:01,450 --> 00:56:06,160
status julian has has kept detailed

1354
00:56:04,450 --> 00:56:11,470
tracker while they're at a post against

1355
00:56:06,160 --> 00:56:15,098
the 70 to 3x RFC's and we only have two

1356
00:56:11,470 --> 00:56:18,519
left to fix in the drafts those issues

1357
00:56:15,099 --> 00:56:20,680
163 and 53 and I'm not sure if we can

1358
00:56:18,519 --> 00:56:25,808
talk about them later or not but there

1359
00:56:20,680 --> 00:56:32,859
there can and next slide so what are the

1360
00:56:25,809 --> 00:56:34,479
issues to discuss now work okay so if

1361
00:56:32,859 --> 00:56:40,749
you go to the HP core issues list and

1362
00:56:34,479 --> 00:56:42,999
make it here we use the label discuss to

1363
00:56:40,749 --> 00:56:44,589
look at things that we think need

1364
00:56:42,999 --> 00:56:47,919
discussion from them in the working

1365
00:56:44,589 --> 00:56:49,930
group for each me and we only have a few

1366
00:56:47,920 --> 00:56:52,059
this time actually I think I've marked

1367
00:56:49,930 --> 00:56:52,779
more but then we we resolved a few down

1368
00:56:52,059 --> 00:57:02,079
the road

1369
00:56:52,779 --> 00:57:04,739
sorry how's that so first off number 258

1370
00:57:02,079 --> 00:57:08,019
Titan language run delete request bodies

1371
00:57:04,739 --> 00:57:09,849
so we had another issue to tighten the

1372
00:57:08,019 --> 00:57:12,129
language or and get request bodies which

1373
00:57:09,849 --> 00:57:15,039
was you know they're still folks who

1374
00:57:12,130 --> 00:57:17,289
think because HTTP at the generic

1375
00:57:15,039 --> 00:57:19,210
framing layer allows any requests to

1376
00:57:17,289 --> 00:57:20,829
have a body that it's okay to put a

1377
00:57:19,210 --> 00:57:22,989
request on a get when in fact that

1378
00:57:20,829 --> 00:57:25,210
breaks a lot of things and so we

1379
00:57:22,989 --> 00:57:26,979
introduced a requirement there to guide

1380
00:57:25,210 --> 00:57:30,160
people away from that design decision

1381
00:57:26,979 --> 00:57:31,718
ever so gently a little less gently the

1382
00:57:30,160 --> 00:57:33,249
last time I guess really we tried to do

1383
00:57:31,719 --> 00:57:36,279
it last time and we were but you subtle

1384
00:57:33,249 --> 00:57:39,009
so we were all this time third edition

1385
00:57:36,279 --> 00:57:40,779
of being to several yes and at the time

1386
00:57:39,009 --> 00:57:42,279
one of the one of the questions that

1387
00:57:40,779 --> 00:57:43,180
came up was well delete isn't pretty

1388
00:57:42,279 --> 00:57:45,309
much in the same

1389
00:57:43,180 --> 00:57:50,049
a place why don't we say the same thing

1390
00:57:45,309 --> 00:57:51,250
for it and in reality there are two

1391
00:57:50,050 --> 00:57:53,109
different approaches we could take here

1392
00:57:51,250 --> 00:57:55,569
one is is to let delete follow the path

1393
00:57:53,109 --> 00:57:58,410
of get which is it was never defined to

1394
00:57:55,569 --> 00:58:00,520
have a request body therefore you know

1395
00:57:58,410 --> 00:58:04,808
interoperability dragons be there don't

1396
00:58:00,520 --> 00:58:06,670
put one there or it would take the path

1397
00:58:04,809 --> 00:58:09,369
of options which is there's a request

1398
00:58:06,670 --> 00:58:10,390
body that could occur on this but we

1399
00:58:09,369 --> 00:58:13,300
don't really know what it means that's

1400
00:58:10,390 --> 00:58:18,098
up to the resource or something else to

1401
00:58:13,300 --> 00:58:19,750
define the semantics self about covers

1402
00:58:18,099 --> 00:58:22,390
it doesn't and options of course the

1403
00:58:19,750 --> 00:58:24,730
request body is used more often than

1404
00:58:22,390 --> 00:58:26,440
lots of other places yeah maybe you

1405
00:58:24,730 --> 00:58:27,730
scroll down a little bit yeah and so

1406
00:58:26,440 --> 00:58:31,960
Julian opened this he wanted this

1407
00:58:27,730 --> 00:58:36,579
consider them separately so there's some

1408
00:58:31,960 --> 00:58:38,619
discussion here and and Everett points

1409
00:58:36,579 --> 00:58:41,890
out yes the intent of delete is just

1410
00:58:38,619 --> 00:58:43,390
ability to target resource and so the

1411
00:58:41,890 --> 00:58:46,690
question is what would a request body

1412
00:58:43,390 --> 00:58:48,460
mean and especially for generic software

1413
00:58:46,690 --> 00:58:50,200
that didn't understand a particular

1414
00:58:48,460 --> 00:58:52,420
request body format what would that do

1415
00:58:50,200 --> 00:58:59,379
and would it break any existing uses of

1416
00:58:52,420 --> 00:59:06,609
delete and so I think he is proposing we

1417
00:58:59,380 --> 00:59:08,109
take the get path for delete Julian not

1418
00:59:06,609 --> 00:59:10,630
in this one but later points out that

1419
00:59:08,109 --> 00:59:14,410
there are people who are using delete

1420
00:59:10,630 --> 00:59:17,760
bodies this is Julian online and do you

1421
00:59:14,410 --> 00:59:17,759
want us to press the magic button Julian

1422
00:59:22,700 --> 00:59:26,839
and sixteen hours ago he gave an example

1423
00:59:27,710 --> 00:59:47,670
aha hello we can hear you sure yes I

1424
00:59:44,130 --> 01:00:17,279
think it's more like options and I've

1425
00:59:47,670 --> 01:00:18,900
seen lots of people actually so Roy you

1426
01:00:17,279 --> 01:00:21,150
you responded here do you want to

1427
01:00:18,900 --> 01:00:22,529
summarize what you said well I I think

1428
01:00:21,150 --> 01:00:25,319
it's always been forbidden from the

1429
01:00:22,529 --> 01:00:28,619
sense that semantics that's I mean I

1430
01:00:25,319 --> 01:00:31,470
realized that you can read it in a in a

1431
01:00:28,619 --> 01:00:35,009
way that by not actually actually

1432
01:00:31,470 --> 01:00:38,848
demanding that we've not send it that we

1433
01:00:35,009 --> 01:00:41,880
are allowing it but it had exact say the

1434
01:00:38,849 --> 01:00:44,160
same exact text was used as the for the

1435
01:00:41,880 --> 01:00:46,259
method get' for the same reason and we

1436
01:00:44,160 --> 01:00:48,299
just didn't want parsers to change to

1437
01:00:46,259 --> 01:00:50,009
not read the body because if you don't

1438
01:00:48,299 --> 01:00:53,038
if you don't try to read the body then

1439
01:00:50,009 --> 01:00:55,619
you're creating a security hole so we

1440
01:00:53,039 --> 01:00:58,170
put that language in to be vague in the

1441
01:00:55,619 --> 01:00:59,970
way it is because we don't want the

1442
01:00:58,170 --> 01:01:03,059
semantics to be effective even if you

1443
01:00:59,970 --> 01:01:04,910
put something in the body so you're not

1444
01:01:03,059 --> 01:01:08,279
supposed to do anything in the body

1445
01:01:04,910 --> 01:01:10,859
period even if you send it you're not

1446
01:01:08,279 --> 01:01:12,869
allowed to do anything with it that's

1447
01:01:10,859 --> 01:01:14,489
that's the intent so I know what I'm

1448
01:01:12,869 --> 01:01:15,900
absolutely certain what the intent is

1449
01:01:14,489 --> 01:01:21,029
because I lived through that nightmare

1450
01:01:15,900 --> 01:01:23,940
several times and I agree that some

1451
01:01:21,029 --> 01:01:26,759
people have taken liberty of stretching

1452
01:01:23,940 --> 01:01:29,759
what's there into whatever their latest

1453
01:01:26,759 --> 01:01:32,279
application is but they've always done

1454
01:01:29,759 --> 01:01:34,740
it in particularly stupid way so I'm I

1455
01:01:32,279 --> 01:01:36,599
don't care if we break those

1456
01:01:34,740 --> 01:01:37,979
just you know they obviously look like

1457
01:01:36,599 --> 01:01:40,560
they're looking to be broken there's

1458
01:01:37,980 --> 01:01:42,300
already servers they do not interoperate

1459
01:01:40,560 --> 01:01:44,910
with and the point of the protocol to

1460
01:01:42,300 --> 01:01:47,250
define what is interoperable not what is

1461
01:01:44,910 --> 01:01:48,629
what everyone does in the interoperable

1462
01:01:47,250 --> 01:01:53,250
on the internet not on little private

1463
01:01:48,630 --> 01:01:56,760
networks or our servers yet I have to

1464
01:01:53,250 --> 01:02:05,130
strongly disagree because I mean we

1465
01:01:56,760 --> 01:02:07,080
don't say what semantics well a post is

1466
01:02:05,130 --> 01:02:08,640
specifically specifically divined as

1467
01:02:07,080 --> 01:02:16,380
look in the payload to find out what it

1468
01:02:08,640 --> 01:02:21,540
is yes so but you can't say that we have

1469
01:02:16,380 --> 01:02:27,270
some post and then claim that putting

1470
01:02:21,540 --> 01:02:29,580
something into bed because I think we

1471
01:02:27,270 --> 01:02:33,050
had an interesting discussion about

1472
01:02:29,580 --> 01:02:37,680
whether and it immediately is allowed to

1473
01:02:33,050 --> 01:02:40,170
what the payload on a delete request and

1474
01:02:37,680 --> 01:02:43,169
I think it would be good to get to the

1475
01:02:40,170 --> 01:02:45,630
bottom of this first because I don't eat

1476
01:02:43,170 --> 01:02:47,820
this a spool I mean that's up that

1477
01:02:45,630 --> 01:02:50,520
better implies that intermediaries can

1478
01:02:47,820 --> 01:02:53,700
essentially drop any request body except

1479
01:02:50,520 --> 01:02:56,700
for maybe post and that is certainly not

1480
01:02:53,700 --> 01:03:00,960
true so I think that's something we need

1481
01:02:56,700 --> 01:03:02,910
to come to consensus about first and

1482
01:03:00,960 --> 01:03:06,540
then get back to the question about

1483
01:03:02,910 --> 01:03:10,348
whether I mean if I have a client at the

1484
01:03:06,540 --> 01:03:13,670
server and every month my API that I

1485
01:03:10,349 --> 01:03:18,589
implement and I can be sure that

1486
01:03:13,670 --> 01:03:29,089
informing immediately I just don't see

1487
01:03:18,589 --> 01:03:34,080
why so Julian the difference is that

1488
01:03:29,089 --> 01:03:36,470
software that either drops errors on a

1489
01:03:34,080 --> 01:03:39,779
post payload requests payload or

1490
01:03:36,470 --> 01:03:41,730
software that doesn't make it available

1491
01:03:39,780 --> 01:03:44,070
to the application would be considered

1492
01:03:41,730 --> 01:03:48,180
broken I think by anyone but software

1493
01:03:44,070 --> 01:03:51,119
that either rejects or a delete request

1494
01:03:48,180 --> 01:03:52,980
a payload or doesn't make it available

1495
01:03:51,119 --> 01:03:55,950
the application I suspect is quite

1496
01:03:52,980 --> 01:03:57,960
common and I'm thinking about web

1497
01:03:55,950 --> 01:04:00,419
application firewalls I'm thinking about

1498
01:03:57,960 --> 01:04:02,040
various api's and various servers and

1499
01:04:00,420 --> 01:04:03,839
very live various libraries that

1500
01:04:02,040 --> 01:04:05,730
implement HTTP on the server side as

1501
01:04:03,839 --> 01:04:09,750
well as intermediaries and see DNS and

1502
01:04:05,730 --> 01:04:12,270
proxies so does anyone here have an

1503
01:04:09,750 --> 01:04:15,510
opinion on this we have why are aligned

1504
01:04:12,270 --> 01:04:17,040
and Julian is not but I understand

1505
01:04:15,510 --> 01:04:19,650
Julian's position absolutely I am

1506
01:04:17,040 --> 01:04:21,480
slanted so it's I I understand where

1507
01:04:19,650 --> 01:04:30,359
he's trying her and why he'd want that

1508
01:04:21,480 --> 01:04:34,730
preference clarify which conditions and

1509
01:04:30,359 --> 01:04:38,880
we can eat the payload and not follow it

1510
01:04:34,730 --> 01:04:40,650
because I'd like to understand why the

1511
01:04:38,880 --> 01:04:42,869
need is different from for instance

1512
01:04:40,650 --> 01:04:49,200
patch or a little message to be

1513
01:04:42,869 --> 01:04:51,359
different well the only problem is that

1514
01:04:49,200 --> 01:04:55,290
is there's no actual requirement that a

1515
01:04:51,359 --> 01:04:57,480
gateway forward a request but that seems

1516
01:04:55,290 --> 01:05:04,259
to be a packing respect because that's

1517
01:04:57,480 --> 01:05:09,119
essentially yeah so we have some

1518
01:05:04,260 --> 01:05:11,520
comments in the room Thompson are we

1519
01:05:09,119 --> 01:05:13,530
talking about preserving the use cases

1520
01:05:11,520 --> 01:05:16,079
that these people use these bodies for

1521
01:05:13,530 --> 01:05:17,760
or are we talking about simply

1522
01:05:16,079 --> 01:05:21,630
maintaining backward compatibility

1523
01:05:17,760 --> 01:05:24,740
through some sort of adherence to the

1524
01:05:21,630 --> 01:05:27,900
spirit of previous specifications

1525
01:05:24,740 --> 01:05:31,169
because I'm inclined to say that you

1526
01:05:27,900 --> 01:05:33,240
know every every server I've seen drops

1527
01:05:31,170 --> 01:05:36,780
delete bodies or doesn't pass them

1528
01:05:33,240 --> 01:05:40,470
through and so in terms of

1529
01:05:36,780 --> 01:05:45,170
interoperability the request body on

1530
01:05:40,470 --> 01:05:45,169
undelete is pretty damn close to useless

1531
01:05:48,890 --> 01:05:54,720
yeah

1532
01:05:50,220 --> 01:05:57,270
even there but it's going to depend on

1533
01:05:54,720 --> 01:06:00,089
the software you're running and so I'm

1534
01:05:57,270 --> 01:06:01,600
kind of okay with what Roy and Mark had

1535
01:06:00,089 --> 01:06:03,190
proposed on it on this one

1536
01:06:01,600 --> 01:06:06,100
if you want to preserve the use case

1537
01:06:03,190 --> 01:06:09,400
then you have header fields I think

1538
01:06:06,100 --> 01:06:11,200
there's also a question of if we I mean

1539
01:06:09,400 --> 01:06:14,260
are these people who are doing these use

1540
01:06:11,200 --> 01:06:15,819
cases they're not necessarily gonna

1541
01:06:14,260 --> 01:06:17,800
change because we write something in the

1542
01:06:15,820 --> 01:06:22,240
court document and this is more about

1543
01:06:17,800 --> 01:06:23,020
guiding new implementations or people

1544
01:06:22,240 --> 01:06:24,549
who are trying to do something in

1545
01:06:23,020 --> 01:06:26,410
standard interoperable way and those

1546
01:06:24,550 --> 01:06:28,900
clearly are interpreting things in a

1547
01:06:26,410 --> 01:06:30,879
non-standard way right so my point is

1548
01:06:28,900 --> 01:06:34,270
that if we're defining what it means to

1549
01:06:30,880 --> 01:06:36,070
interoperate then clearly sending no

1550
01:06:34,270 --> 01:06:39,160
delete body is the way that you do that

1551
01:06:36,070 --> 01:06:40,750
and depending on a being there and

1552
01:06:39,160 --> 01:06:42,879
remaining there is not necessarily

1553
01:06:40,750 --> 01:06:45,430
something that would be advisable now of

1554
01:06:42,880 --> 01:06:48,100
course people who do these things and

1555
01:06:45,430 --> 01:06:51,250
will continue to successfully put bodies

1556
01:06:48,100 --> 01:06:54,520
on delete messages are of course free to

1557
01:06:51,250 --> 01:06:56,890
do so but it won't be following doing

1558
01:06:54,520 --> 01:06:59,370
specifications anymore I think that's

1559
01:06:56,890 --> 01:06:59,370
okay

1560
01:07:02,980 --> 01:07:10,360
oh I agree if Juliana so sorry did you

1561
01:07:06,160 --> 01:07:13,990
wanna jump in Gillian I think if we make

1562
01:07:10,360 --> 01:07:16,660
a normative change it's not something

1563
01:07:13,990 --> 01:07:20,740
that in my mind is clearly allowed right

1564
01:07:16,660 --> 01:07:25,890
now we need to have a very and I haven't

1565
01:07:20,740 --> 01:07:29,740
heard that yet and if the reason is that

1566
01:07:25,890 --> 01:07:31,779
intermediary is actually I think you

1567
01:07:29,740 --> 01:07:35,109
need a separate issue to clarify that I

1568
01:07:31,780 --> 01:07:38,230
don't think they are and that also

1569
01:07:35,110 --> 01:07:42,430
affects the whole extensibility story of

1570
01:07:38,230 --> 01:07:44,560
HTTP so if there's any doubt about

1571
01:07:42,430 --> 01:07:46,270
whether intermediaries are allowed to

1572
01:07:44,560 --> 01:07:48,670
drop the crest bodies on methods they

1573
01:07:46,270 --> 01:07:50,259
don't know we need to clarify that and

1574
01:07:48,670 --> 01:07:52,720
that's much more important than this

1575
01:07:50,260 --> 01:07:54,580
issue Julian that's not what's being

1576
01:07:52,720 --> 01:07:56,560
asserted it's not that they're dropping

1577
01:07:54,580 --> 01:07:58,600
bodies on things that they don't know

1578
01:07:56,560 --> 01:08:00,759
it's they're dropping or not in making

1579
01:07:58,600 --> 01:08:02,440
available or rejecting bodies on things

1580
01:08:00,760 --> 01:08:05,700
that they do think they know because

1581
01:08:02,440 --> 01:08:05,700
they have defined semantics

1582
01:08:07,770 --> 01:08:11,550
substantial I just yeah I feel like

1583
01:08:10,050 --> 01:08:13,200
there's a dangerous thing

1584
01:08:11,550 --> 01:08:15,270
if we start disallowing bodies

1585
01:08:13,200 --> 01:08:17,040
everywhere I mean I've written with apps

1586
01:08:15,270 --> 01:08:18,600
I've you know I'm sure I'm gonna get in

1587
01:08:17,040 --> 01:08:20,670
trouble for Spiegel here I've put bodies

1588
01:08:18,600 --> 01:08:22,980
and get requests and I love doing so one

1589
01:08:20,670 --> 01:08:24,480
of the reasons is that semantically if

1590
01:08:22,979 --> 01:08:26,370
what I'm doing is requesting something I

1591
01:08:24,479 --> 01:08:28,439
don't want to just push all of my push

1592
01:08:26,370 --> 01:08:30,120
bodies uh sorry I don't want to make

1593
01:08:28,439 --> 01:08:33,269
every request that contains a body end

1594
01:08:30,120 --> 01:08:36,450
up saying saying post on it I think that

1595
01:08:33,270 --> 01:08:42,060
means that all of the other HTTP methods

1596
01:08:36,450 --> 01:08:43,649
become pointless so yeah I thought it's

1597
01:08:42,060 --> 01:08:45,839
worth I think that it's still worth

1598
01:08:43,649 --> 01:08:46,740
having bodies on get requests on delete

1599
01:08:45,839 --> 01:08:48,839
requests and so on

1600
01:08:46,740 --> 01:08:51,089
insofar as those requests and matching

1601
01:08:48,839 --> 01:08:54,390
the semantics that are meant by getting

1602
01:08:51,089 --> 01:08:56,910
delete but but you realize that that's

1603
01:08:54,390 --> 01:08:58,799
not HTTP anymore you're not getting any

1604
01:08:56,910 --> 01:09:01,528
value out of the ecosystem there yeah

1605
01:08:58,799 --> 01:09:05,100
the right the problem that you run into

1606
01:09:01,529 --> 01:09:09,000
is that there's something there is TCP

1607
01:09:05,100 --> 01:09:11,190
or SS or TLS connections and then on top

1608
01:09:09,000 --> 01:09:12,660
of that is HTTP and the only thing that

1609
01:09:11,189 --> 01:09:14,910
differentiates the two are the set of

1610
01:09:12,660 --> 01:09:19,318
agreements we've made to restrict and

1611
01:09:14,910 --> 01:09:21,809
what we send so I understand G are what

1612
01:09:19,319 --> 01:09:23,460
I really want as a search method but I

1613
01:09:21,810 --> 01:09:25,290
can't define a new method alts I'll just

1614
01:09:23,460 --> 01:09:27,240
send get instead and I'll send stuff in

1615
01:09:25,290 --> 01:09:29,580
the body there's a reason we didn't

1616
01:09:27,240 --> 01:09:33,000
allow that in the first place it's to

1617
01:09:29,580 --> 01:09:35,790
make the URLs valuable and linkable

1618
01:09:33,000 --> 01:09:38,549
across the web that's why it was there

1619
01:09:35,790 --> 01:09:43,259
so as much as I appreciate that use case

1620
01:09:38,549 --> 01:09:45,630
I deliberately killed it okay yeah it's

1621
01:09:43,259 --> 01:09:47,819
it's not it's not and feel free to blame

1622
01:09:45,630 --> 01:09:49,470
me for that or timber timbres Lee or

1623
01:09:47,819 --> 01:09:52,830
anyone else Tim it Tim actually had

1624
01:09:49,470 --> 01:09:54,089
separate methods but we have talked

1625
01:09:52,830 --> 01:09:56,190
about bringing search back that's yeah

1626
01:09:54,089 --> 01:09:59,160
searches searches a different method is

1627
01:09:56,190 --> 01:10:00,740
it just it's not the sense that you have

1628
01:09:59,160 --> 01:10:03,570
a good reason for I know

1629
01:10:00,740 --> 01:10:05,790
there are other good reasons to not

1630
01:10:03,570 --> 01:10:08,160
allow it so I get I don't think it's

1631
01:10:05,790 --> 01:10:11,460
worth is arguing about it here but it's

1632
01:10:08,160 --> 01:10:15,480
not argument and one point I'd like to

1633
01:10:11,460 --> 01:10:17,430
bring up to that is if we do you know if

1634
01:10:15,480 --> 01:10:19,259
you did want to specify that yes you can

1635
01:10:17,430 --> 01:10:20,760
have the body in there I think we we do

1636
01:10:19,260 --> 01:10:22,650
need a good explanation

1637
01:10:20,760 --> 01:10:24,210
of how we understand the semantics to

1638
01:10:22,650 --> 01:10:26,790
make it interoperable I think that's the

1639
01:10:24,210 --> 01:10:28,860
part of the bar that you it can't really

1640
01:10:26,790 --> 01:10:30,840
satisfy because these are all nonsense

1641
01:10:28,860 --> 01:10:32,610
you use cases yeah I mean that's that I

1642
01:10:30,840 --> 01:10:34,260
I guess I just don't want all of my

1643
01:10:32,610 --> 01:10:35,820
requests to be post requests like if

1644
01:10:34,260 --> 01:10:37,920
that's the part that we go down for

1645
01:10:35,820 --> 01:10:41,280
anything that's not that's not generic I

1646
01:10:37,920 --> 01:10:42,630
sorry anything then that's what we have

1647
01:10:41,280 --> 01:10:45,179
and I think that's it sounds like that's

1648
01:10:42,630 --> 01:10:47,520
your vision of what HP is not at all not

1649
01:10:45,180 --> 01:10:50,310
at all the our intent here is to make

1650
01:10:47,520 --> 01:10:52,320
sure that we define very carefully and

1651
01:10:50,310 --> 01:10:54,090
very clearly what the semantics of a

1652
01:10:52,320 --> 01:10:56,009
body and requests are for all the

1653
01:10:54,090 --> 01:11:04,950
methods we do to find and that's a

1654
01:10:56,010 --> 01:11:07,080
case-by-case thing so it seems like yeah

1655
01:11:04,950 --> 01:11:09,120
it seems like we should kind of wrap

1656
01:11:07,080 --> 01:11:11,970
this up we have some disagreement among

1657
01:11:09,120 --> 01:11:14,250
the editors but I think it'd be good to

1658
01:11:11,970 --> 01:11:15,570
get a good sense of the room of what the

1659
01:11:14,250 --> 01:11:19,410
working group wants to do on this we've

1660
01:11:15,570 --> 01:11:21,000
had some comments but not a ton so I

1661
01:11:19,410 --> 01:11:27,690
think you'd be perfect to take a hum on

1662
01:11:21,000 --> 01:11:32,100
this yes okay so essentially the two

1663
01:11:27,690 --> 01:11:34,259
options are do we allow you guys going

1664
01:11:32,100 --> 01:11:38,460
out to be able to home from yeah very

1665
01:11:34,260 --> 01:11:42,810
good all right so they're gonna be two

1666
01:11:38,460 --> 01:11:46,320
different options first is that we do

1667
01:11:42,810 --> 01:11:47,580
not allow bodies on delete or

1668
01:11:46,320 --> 01:11:48,929
essentially save the client should not

1669
01:11:47,580 --> 01:11:52,410
send this we have it essentially

1670
01:11:48,930 --> 01:11:54,390
conformed to to get format and then the

1671
01:11:52,410 --> 01:11:56,040
other option is that we have it conform

1672
01:11:54,390 --> 01:11:59,130
more to something like options and you

1673
01:11:56,040 --> 01:11:59,790
can have a body in there so if you

1674
01:11:59,130 --> 01:12:04,070
prefer that

1675
01:11:59,790 --> 01:12:07,490
delete stays like get please hum now

1676
01:12:04,070 --> 01:12:07,490
wait wait wait

1677
01:12:07,580 --> 01:12:14,820
sorry you said space not yet that's

1678
01:12:10,590 --> 01:12:17,070
that's not cool because you know making

1679
01:12:14,820 --> 01:12:22,019
a change here so it's not staying like

1680
01:12:17,070 --> 01:12:25,730
it would be change yes yes yes should

1681
01:12:22,020 --> 01:12:28,610
delete be specified to behave like it

1682
01:12:25,730 --> 01:12:30,320
okay so if you would like

1683
01:12:28,610 --> 01:12:38,240
to lead to be specified to behave like

1684
01:12:30,320 --> 01:12:39,769
it please Tom now okay and if you would

1685
01:12:38,240 --> 01:12:43,540
like it to not behave like it but to be

1686
01:12:39,770 --> 01:12:46,850
able to have a body please hum now

1687
01:12:43,540 --> 01:12:52,940
and Julian I assume you're humming for

1688
01:12:46,850 --> 01:12:55,580
that but okay so I think within the room

1689
01:12:52,940 --> 01:12:57,679
here the consensus seems pretty strong

1690
01:12:55,580 --> 01:12:59,150
in favor of having it behave like get

1691
01:12:57,680 --> 01:13:02,360
and so I think that's what we'll go

1692
01:12:59,150 --> 01:13:03,410
ahead with now and yes we're adding that

1693
01:13:02,360 --> 01:13:05,599
into the github thing

1694
01:13:03,410 --> 01:13:07,790
thank you everyone so so just for the

1695
01:13:05,600 --> 01:13:10,190
record we had one hum for in favorite

1696
01:13:07,790 --> 01:13:12,730
bodies from the jabber room yeah okay

1697
01:13:10,190 --> 01:13:12,730
that's good to know

1698
01:13:12,910 --> 01:13:29,780
and we'll confirm that on the list as

1699
01:13:15,590 --> 01:13:35,890
well how do I go back now can't see it I

1700
01:13:29,780 --> 01:13:35,889
can't what okay I'll just do this

1701
01:13:40,090 --> 01:13:51,430
control panel all right

1702
01:13:46,510 --> 01:13:54,360
next up our old friend updating stored

1703
01:13:51,430 --> 01:13:58,200
headers sorry

1704
01:13:54,360 --> 01:14:00,910
our old friend updating stored headers

1705
01:13:58,200 --> 01:14:03,790
so we've had a fairly long-running

1706
01:14:00,910 --> 01:14:07,269
discussion here of what to do about

1707
01:14:03,790 --> 01:14:10,110
updating stored headers in a cache so

1708
01:14:07,270 --> 01:14:12,460
when a 304 comes in and has new headers

1709
01:14:10,110 --> 01:14:14,200
the current specification says that you

1710
01:14:12,460 --> 01:14:16,450
update the stored copy with the new

1711
01:14:14,200 --> 01:14:18,790
headers and it turns out that that is

1712
01:14:16,450 --> 01:14:20,679
not always done consistently by

1713
01:14:18,790 --> 01:14:23,970
implementations a few implementations

1714
01:14:20,680 --> 01:14:26,560
don't do it at all which is to bug but

1715
01:14:23,970 --> 01:14:28,870
especially the browser's omit some

1716
01:14:26,560 --> 01:14:30,880
headers from the update and we've been

1717
01:14:28,870 --> 01:14:34,620
going through a discussion of why that

1718
01:14:30,880 --> 01:14:37,320
is and then what the right design is and

1719
01:14:34,620 --> 01:14:40,480
you can see it's been a fairly long

1720
01:14:37,320 --> 01:14:42,009
discussion I wrote some tests to figure

1721
01:14:40,480 --> 01:14:47,580
out what people actually did we got

1722
01:14:42,010 --> 01:14:47,580
gathered some date on that and I think

1723
01:14:48,930 --> 01:14:55,300
this is the most recent proposal oh and

1724
01:14:52,120 --> 01:14:59,860
there was a comment an hour ago which is

1725
01:14:55,300 --> 01:15:02,350
to replace the third paragraph and of

1726
01:14:59,860 --> 01:15:04,599
course that's contextual thanks mark I

1727
01:15:02,350 --> 01:15:07,870
think we're talking about this proposal

1728
01:15:04,600 --> 01:15:09,160
here where we say something like due to

1729
01:15:07,870 --> 01:15:10,599
their semantics updating some header

1730
01:15:09,160 --> 01:15:12,610
fields can result in the cached estate

1731
01:15:10,600 --> 01:15:13,930
becoming consistent invalid depending on

1732
01:15:12,610 --> 01:15:15,549
how it is implemented for example

1733
01:15:13,930 --> 01:15:17,620
updating content location might make a

1734
01:15:15,550 --> 01:15:19,210
cache response incorrect we're updating

1735
01:15:17,620 --> 01:15:20,890
content range of might might be

1736
01:15:19,210 --> 01:15:21,430
unrealistic after partial responses have

1737
01:15:20,890 --> 01:15:23,410
been combined

1738
01:15:21,430 --> 01:15:24,820
likewise changing the value of a header

1739
01:15:23,410 --> 01:15:26,500
field might have external effects that

1740
01:15:24,820 --> 01:15:28,360
the cache cannot account for for example

1741
01:15:26,500 --> 01:15:29,650
a user agent cached or as a pre render

1742
01:15:28,360 --> 01:15:32,019
artifact instead of the raw bytes of an

1743
01:15:29,650 --> 01:15:33,370
HTTP response changing the content post

1744
01:15:32,020 --> 01:15:40,000
factor is not possible and possibly

1745
01:15:33,370 --> 01:15:44,530
dangerous and so I think would it go No

1746
01:15:40,000 --> 01:15:46,420
thank you thank you in these limited

1747
01:15:44,530 --> 01:15:48,400
situations a cache may omit the headers

1748
01:15:46,420 --> 01:15:49,989
listed below from updates servers should

1749
01:15:48,400 --> 01:15:51,670
not send updated values for these

1750
01:15:49,989 --> 01:15:53,230
headers in a 3 or 4 response if the news

1751
01:15:51,670 --> 01:15:54,370
items are critical to interpret the

1752
01:15:53,230 --> 01:15:58,690
cached response whether they should

1753
01:15:54,370 --> 01:16:00,380
generate a full 2-xx response and so I

1754
01:15:58,690 --> 01:16:01,849
went on to say I'm

1755
01:16:00,380 --> 01:16:04,610
only comfortable with this approach the

1756
01:16:01,850 --> 01:16:07,130
list is limited and relatively static I

1757
01:16:04,610 --> 01:16:09,589
did as much digging as I could through

1758
01:16:07,130 --> 01:16:11,900
the the browser revision histories and

1759
01:16:09,590 --> 01:16:14,300
discussions and I think that there was a

1760
01:16:11,900 --> 01:16:18,080
lot of cargo cult thing around old 26 16

1761
01:16:14,300 --> 01:16:19,700
and even 26 28 68 language around cache

1762
01:16:18,080 --> 01:16:21,920
updates where people misunderstood it

1763
01:16:19,700 --> 01:16:24,019
and then applied it unevenly and as a

1764
01:16:21,920 --> 01:16:26,450
result a lot of headers are exempted

1765
01:16:24,020 --> 01:16:28,670
from updates that don't need to be and I

1766
01:16:26,450 --> 01:16:30,470
in the cases I talked about before work

1767
01:16:28,670 --> 01:16:32,240
with content ranging content type and

1768
01:16:30,470 --> 01:16:33,320
things like that I completely understand

1769
01:16:32,240 --> 01:16:34,929
why the browsers want to exempt those

1770
01:16:33,320 --> 01:16:37,040
headers but there are other headers like

1771
01:16:34,930 --> 01:16:38,500
everything starting with X content is

1772
01:16:37,040 --> 01:16:41,150
exempted which doesn't really make sense

1773
01:16:38,500 --> 01:16:44,720
or content - and I think that's because

1774
01:16:41,150 --> 01:16:46,519
they thought that those indicated what

1775
01:16:44,720 --> 01:16:49,070
entity headers were of course we removed

1776
01:16:46,520 --> 01:16:52,970
entity headers from Biss that that's not

1777
01:16:49,070 --> 01:16:54,410
a concept in HTTP anymore and so it's

1778
01:16:52,970 --> 01:16:57,800
really just talking about what the right

1779
01:16:54,410 --> 01:17:00,260
list of headers are to include in this

1780
01:16:57,800 --> 01:17:01,970
exemption and so I wanted to flag this

1781
01:17:00,260 --> 01:17:04,040
for discussion to see if folks are on

1782
01:17:01,970 --> 01:17:05,780
board with this general approach and if

1783
01:17:04,040 --> 01:17:09,260
so if we can get a little progress on

1784
01:17:05,780 --> 01:17:10,730
the list of headers to exempt setcookie

1785
01:17:09,260 --> 01:17:19,010
and set cookie to a really interesting -

1786
01:17:10,730 --> 01:17:19,309
by the way Martin you stretching your

1787
01:17:19,010 --> 01:17:22,550
legs

1788
01:17:19,310 --> 01:17:25,100
no I wanted to talk to Andy first madame

1789
01:17:22,550 --> 01:17:26,140
Thomson I might be able to help with

1790
01:17:25,100 --> 01:17:29,180
setcookie

1791
01:17:26,140 --> 01:17:32,840
is it because what's happening is that

1792
01:17:29,180 --> 01:17:35,870
the cookies are being taken off as the

1793
01:17:32,840 --> 01:17:38,510
response comes in and acted upon at that

1794
01:17:35,870 --> 01:17:39,620
point and then there's no expectation

1795
01:17:38,510 --> 01:17:41,900
that cookies will divert will be

1796
01:17:39,620 --> 01:17:44,000
available to cache responses right and

1797
01:17:41,900 --> 01:17:46,429
this is this is an artifact of having a

1798
01:17:44,000 --> 01:17:49,040
deeply integrated stack rather than one

1799
01:17:46,430 --> 01:17:50,330
that is strictly layered right so I

1800
01:17:49,040 --> 01:17:54,320
don't know that that's strictly a

1801
01:17:50,330 --> 01:17:57,080
problem it's just an interesting side

1802
01:17:54,320 --> 01:17:58,610
effect of the way this works is that the

1803
01:17:57,080 --> 01:17:59,840
browser's effectively acting as an

1804
01:17:58,610 --> 01:18:01,250
intermediary that's stripping off

1805
01:17:59,840 --> 01:18:04,550
cookies because it's already dealt with

1806
01:18:01,250 --> 01:18:08,210
them and when things request things from

1807
01:18:04,550 --> 01:18:09,410
the cache they don't care about cookies

1808
01:18:08,210 --> 01:18:11,360
because we know that none of those

1809
01:18:09,410 --> 01:18:13,220
things care about course it's taken as a

1810
01:18:11,360 --> 01:18:14,330
processing instruction almost right

1811
01:18:13,220 --> 01:18:17,180
right

1812
01:18:14,330 --> 01:18:19,670
and that is fairly consistent with the

1813
01:18:17,180 --> 01:18:21,410
sort of way that cookie works in the

1814
01:18:19,670 --> 01:18:24,110
sense that it applies at the time that

1815
01:18:21,410 --> 01:18:25,910
it arrives not not sort of any any time

1816
01:18:24,110 --> 01:18:27,530
thereafter it's not attached I think it

1817
01:18:25,910 --> 01:18:29,150
is but when you start thinking about

1818
01:18:27,530 --> 01:18:30,769
things like service worker and and

1819
01:18:29,150 --> 01:18:34,000
somebody more advanced things people do

1820
01:18:30,770 --> 01:18:36,260
with fetch things change I know and

1821
01:18:34,000 --> 01:18:39,010
service workers always make me nervous

1822
01:18:36,260 --> 01:18:42,020
when I start to think about these

1823
01:18:39,010 --> 01:18:43,130
there's any good answers here but that

1824
01:18:42,020 --> 01:18:45,170
may be the model that we're applying

1825
01:18:43,130 --> 01:18:47,390
here that's all what I found interesting

1826
01:18:45,170 --> 01:18:48,830
is is that you know one could maybe make

1827
01:18:47,390 --> 01:18:50,540
a safety or admit that it's not safe to

1828
01:18:48,830 --> 01:18:52,640
cash that cookies because you know then

1829
01:18:50,540 --> 01:18:54,560
they get reused but as you can see a lot

1830
01:18:52,640 --> 01:18:58,790
of intermediary caches do cache them so

1831
01:18:54,560 --> 01:19:00,320
that doesn't really you know hold hello

1832
01:18:58,790 --> 01:19:04,790
yeah after that changed in the last set

1833
01:19:00,320 --> 01:19:07,670
of tests here there's a little weird

1834
01:19:04,790 --> 01:19:11,900
yeah I'd agree with Martin it's most

1835
01:19:07,670 --> 01:19:13,370
likely there they're causing an alert

1836
01:19:11,900 --> 01:19:15,349
trigger on as they're being processed

1837
01:19:13,370 --> 01:19:17,930
right they're probably still in the in

1838
01:19:15,350 --> 01:19:21,200
the cached presentation that it's just

1839
01:19:17,930 --> 01:19:27,200
not no I didn't know if we store that or

1840
01:19:21,200 --> 01:19:29,750
not but we probably do yeah yeah but

1841
01:19:27,200 --> 01:19:31,340
putting aside the exact headers the

1842
01:19:29,750 --> 01:19:33,110
overall approach is this is this a

1843
01:19:31,340 --> 01:19:34,820
reasonable way to go do you think yeah

1844
01:19:33,110 --> 01:19:36,769
you got a deal with the world as you as

1845
01:19:34,820 --> 01:19:40,580
you find it this is kind of what we

1846
01:19:36,770 --> 01:19:42,650
would do anything yeah I will have a

1847
01:19:40,580 --> 01:19:45,730
look at our implementation to make sure

1848
01:19:42,650 --> 01:19:49,460
that this is okay

1849
01:19:45,730 --> 01:19:53,120
obviously blanket prefixes are not great

1850
01:19:49,460 --> 01:19:55,940
we'd rather not have that sure yeah I'm

1851
01:19:53,120 --> 01:19:57,140
sure we can fix it okay so what I might

1852
01:19:55,940 --> 01:19:59,210
do is the next step then is to put

1853
01:19:57,140 --> 01:20:02,060
together a PR with a very conservative

1854
01:19:59,210 --> 01:20:03,800
list and then we'll you know talk about

1855
01:20:02,060 --> 01:20:06,050
the additions one by one we need to loop

1856
01:20:03,800 --> 01:20:11,120
in Ottawa need to loop in you know folks

1857
01:20:06,050 --> 01:20:12,530
on the browser side so all right thank

1858
01:20:11,120 --> 01:20:15,340
you

1859
01:20:12,530 --> 01:20:15,340
where did I go

1860
01:20:36,000 --> 01:20:50,710
next up oh come on

1861
01:20:38,890 --> 01:20:56,670
okay Julian um this is issue 163 which

1862
01:20:50,710 --> 01:21:12,510
is a red ID 52:36 I'll open that up oh

1863
01:20:56,670 --> 01:21:12,510
dear oh come on yeah

1864
01:21:31,260 --> 01:21:48,210
right and so I think there was a thread

1865
01:21:40,179 --> 01:21:52,989
which involved Roy this red Roy no I

1866
01:21:48,210 --> 01:21:56,980
let's page Roy back in I think it was

1867
01:21:52,989 --> 01:22:16,030
you could be wrong I don't know the

1868
01:21:56,980 --> 01:22:18,879
discussion in with Roy yeah not exactly

1869
01:22:16,030 --> 01:22:23,500
sure I did just brief you're looking at

1870
01:22:18,880 --> 01:22:29,320
the correct text it's not correct so in

1871
01:22:23,500 --> 01:22:33,159
the sense that if you have if you have a

1872
01:22:29,320 --> 01:22:36,639
validator that's based on content md5

1873
01:22:33,159 --> 01:22:38,949
for example or a hash of the content it

1874
01:22:36,639 --> 01:22:41,079
is going to be the same validator no

1875
01:22:38,949 --> 01:22:44,138
matter how many different media types

1876
01:22:41,079 --> 01:22:46,179
you have for that representation so you

1877
01:22:44,139 --> 01:22:48,639
may have multiple yeah you may have the

1878
01:22:46,179 --> 01:22:50,489
same image for example in different

1879
01:22:48,639 --> 01:22:52,570
media types based upon what which

1880
01:22:50,489 --> 01:22:55,348
particular browser accepts what

1881
01:22:52,570 --> 01:22:57,670
particular media types um like that

1882
01:22:55,349 --> 01:22:58,929
which actually represent the same number

1883
01:22:57,670 --> 01:23:02,559
of bits it's just that one browser

1884
01:22:58,929 --> 01:23:05,610
called it X experimental image and last

1885
01:23:02,559 --> 01:23:08,320
one and a more recent one calls it

1886
01:23:05,610 --> 01:23:11,199
application image whatever first just

1887
01:23:08,320 --> 01:23:13,179
purely because of versioning so the

1888
01:23:11,199 --> 01:23:16,808
exact same content exact same bits that

1889
01:23:13,179 --> 01:23:18,119
have the exact same validator and that's

1890
01:23:16,809 --> 01:23:22,659
perfectly normal

1891
01:23:18,119 --> 01:23:26,348
okay so make sure there's nothing else

1892
01:23:22,659 --> 01:23:28,839
in the thread that many times and today

1893
01:23:26,349 --> 01:23:30,219
I learned something I didn't realize

1894
01:23:28,840 --> 01:23:34,260
that the validator only applied

1895
01:23:30,219 --> 01:23:38,469
specifically to the contents of the body

1896
01:23:34,260 --> 01:23:39,760
if that's not clear can we make it more

1897
01:23:38,469 --> 01:23:44,860
clear

1898
01:23:39,760 --> 01:23:47,440
I thought it was clear no if I don't

1899
01:23:44,860 --> 01:23:52,450
know I died we did certainly put a note

1900
01:23:47,440 --> 01:23:54,309
in the in this that in this issue that

1901
01:23:52,450 --> 01:23:56,470
we should check it to see if it's good

1902
01:23:54,310 --> 01:23:59,500
yeah I mean last I recall it was pretty

1903
01:23:56,470 --> 01:24:02,770
clear but you know pretty much all the

1904
01:23:59,500 --> 01:24:03,940
mistakes sir yeah we clear to me this is

1905
01:24:02,770 --> 01:24:09,550
the problem that it's in your head but

1906
01:24:03,940 --> 01:24:10,960
it might not know I'll check as well but

1907
01:24:09,550 --> 01:24:14,590
I think this is this is a fine

1908
01:24:10,960 --> 01:24:18,100
resolution to that right I need

1909
01:24:14,590 --> 01:24:20,470
rewording it's a little it wasn't

1910
01:24:18,100 --> 01:24:23,200
entirely clear to me what what it was

1911
01:24:20,470 --> 01:24:34,270
trying to say so this might be helpful

1912
01:24:23,200 --> 01:24:36,160
to I think this is why I said we can

1913
01:24:34,270 --> 01:24:37,810
close this with no action I think yeah I

1914
01:24:36,160 --> 01:24:39,340
think we can I think we closed it with

1915
01:24:37,810 --> 01:24:41,680
no action other than maybe the editorial

1916
01:24:39,340 --> 01:24:45,280
suggestion I'll take a look take another

1917
01:24:41,680 --> 01:24:47,340
squeeze at making that clear okay thank

1918
01:24:45,280 --> 01:24:47,340
you

1919
01:24:50,160 --> 01:24:54,660
sure editorial is fine yeah

1920
01:24:54,780 --> 01:25:03,820
our old old friend 128 quoted

1921
01:24:57,730 --> 01:25:08,559
cache-control directives so I did some

1922
01:25:03,820 --> 01:25:10,830
testing again and found that different

1923
01:25:08,560 --> 01:25:12,850
implementations handled quoting of

1924
01:25:10,830 --> 01:25:20,440
cache-control director was pretty wildly

1925
01:25:12,850 --> 01:25:24,780
differently and I suggested that how's

1926
01:25:20,440 --> 01:25:28,990
that okay they should give us two mics

1927
01:25:24,780 --> 01:25:30,309
but then oh nevermind but you're not

1928
01:25:28,990 --> 01:25:38,710
using them like to tell me to use the

1929
01:25:30,310 --> 01:25:40,870
mic and we had a

1930
01:25:38,710 --> 01:25:42,700
long back and forth about this and I

1931
01:25:40,870 --> 01:25:45,099
think yeah it's a very long beckons with

1932
01:25:42,700 --> 01:25:49,080
about this this is another area where

1933
01:25:45,100 --> 01:25:49,080
Julian I don't quite see eye to eye I

1934
01:25:50,190 --> 01:25:55,410
think there's a proposal no there's not

1935
01:26:00,360 --> 01:26:03,660
now there is

1936
01:26:17,429 --> 01:26:22,030
can we resolve this with nothing must

1937
01:26:19,629 --> 01:26:26,760
not generate and should accept quota

1938
01:26:22,030 --> 01:26:26,759
cache control parameters Julian

1939
01:26:28,559 --> 01:26:36,610
well I my question there is is that why

1940
01:26:32,590 --> 01:26:38,199
do we need to change the why is it much

1941
01:26:36,610 --> 01:26:40,209
much what is the compelling reason for

1942
01:26:38,199 --> 01:26:43,419
it I don't see these other these

1943
01:26:40,209 --> 01:26:45,369
applications breaking unquote they don't

1944
01:26:43,419 --> 01:26:46,719
pay attention to quoted values which can

1945
01:26:45,369 --> 01:26:51,639
break people's expectations about

1946
01:26:46,719 --> 01:26:53,469
caching and there's a lot of them yeah I

1947
01:26:51,639 --> 01:26:55,360
you know we found a bug in Apache 2

1948
01:26:53,469 --> 01:26:57,699
which is totally cool like I came this

1949
01:26:55,360 --> 01:26:59,438
close to getting it committed and then I

1950
01:26:57,699 --> 01:27:01,659
didn't oh that's not been committed yet

1951
01:26:59,439 --> 01:27:03,369
no it hasn't been committed yet so it's

1952
01:27:01,659 --> 01:27:06,669
it's there it's proposed it's ready to

1953
01:27:03,369 --> 01:27:20,709
go we just need to give it plus ones ok

1954
01:27:06,669 --> 01:27:28,840
I think Lex well I just I I don't think

1955
01:27:20,709 --> 01:27:29,979
we have put it because it's been open

1956
01:27:28,840 --> 01:27:42,550
for a long time and we haven't made

1957
01:27:29,979 --> 01:27:45,340
progress on the issue so one way it

1958
01:27:42,550 --> 01:27:49,209
would be not to do it I think that

1959
01:27:45,340 --> 01:27:52,449
should be the default in the spec not to

1960
01:27:49,209 --> 01:27:54,099
change things you don't have very broad

1961
01:27:52,449 --> 01:27:55,589
consensus that something needs to be

1962
01:27:54,099 --> 01:27:58,510
changed

1963
01:27:55,590 --> 01:28:02,349
tell me what more data you need I will

1964
01:27:58,510 --> 01:28:04,269
collect it well we had that discussion I

1965
01:28:02,349 --> 01:28:06,280
think with Matt's trying to figure out

1966
01:28:04,269 --> 01:28:08,769
why their father actually preached

1967
01:28:06,280 --> 01:28:13,539
things that way and not the other way

1968
01:28:08,769 --> 01:28:18,639
and we didn't get reply to the to the

1969
01:28:13,539 --> 01:28:26,409
actual question so the underlying

1970
01:28:18,639 --> 01:28:29,349
question conforming to the tweet these

1971
01:28:26,409 --> 01:28:30,129
things currently as suggested by the

1972
01:28:29,349 --> 01:28:32,790
spec

1973
01:28:30,130 --> 01:28:36,670
why did you do this and why don't fix it

1974
01:28:32,790 --> 01:28:38,110
and I think my question right and my

1975
01:28:36,670 --> 01:28:47,610
position is is that for whatever reason

1976
01:28:38,110 --> 01:28:50,200
over the last 30 years almost no sorry

1977
01:28:47,610 --> 01:28:55,299
you're talking about the changes that we

1978
01:28:50,200 --> 01:28:57,580
made five years ago where we simplified

1979
01:28:55,300 --> 01:29:01,660
the grammar to allow talk and quoted

1980
01:28:57,580 --> 01:29:05,380
screen everywhere that's different from

1981
01:29:01,660 --> 01:29:11,800
2616 right so maybe we made a mistake

1982
01:29:05,380 --> 01:29:19,680
then but 26:16 allowed both - it just

1983
01:29:11,800 --> 01:29:19,680
did a different way right well

1984
01:29:25,740 --> 01:29:30,250
we failed to communicate we and our

1985
01:29:28,570 --> 01:29:33,700
predecessors although that includes Roy

1986
01:29:30,250 --> 01:29:35,830
so I failed to communicate well enough

1987
01:29:33,700 --> 01:29:39,130
to implementers to implement this

1988
01:29:35,830 --> 01:29:42,160
correctly and the implementations don't

1989
01:29:39,130 --> 01:29:45,370
behave well in this with this kind of

1990
01:29:42,160 --> 01:29:47,110
input and as I understand it

1991
01:29:45,370 --> 01:29:49,240
especially the client implementations

1992
01:29:47,110 --> 01:29:51,219
don't want to change the way they behave

1993
01:29:49,240 --> 01:29:54,190
regarding this because to them it's all

1994
01:29:51,220 --> 01:29:57,250
risk and no reward they are compatible

1995
01:29:54,190 --> 01:29:58,900
with the web as its deployed why would

1996
01:29:57,250 --> 01:30:00,130
they change their code just to align

1997
01:29:58,900 --> 01:30:02,410
with the specification that was never

1998
01:30:00,130 --> 01:30:04,090
implemented and so to me the most

1999
01:30:02,410 --> 01:30:06,430
obvious thing to do is to change the

2000
01:30:04,090 --> 01:30:22,210
specification to match the reality of

2001
01:30:06,430 --> 01:30:26,380
the internet how they manage to keep a

2002
01:30:22,210 --> 01:30:32,350
certain feels and then not to do the

2003
01:30:26,380 --> 01:30:35,020
remaining 2% so I'm pretty sure that for

2004
01:30:32,350 --> 01:30:37,660
any puzzle that you can show me that

2005
01:30:35,020 --> 01:30:41,020
it's extension parameters correctly and

2006
01:30:37,660 --> 01:30:44,019
does not treat the predefined characters

2007
01:30:41,020 --> 01:30:46,690
as sort defined around

2008
01:30:44,020 --> 01:30:47,400
as defined by the legislature did these

2009
01:30:46,690 --> 01:30:51,129
specs

2010
01:30:47,400 --> 01:30:53,440
it's either intentional or a buck and if

2011
01:30:51,130 --> 01:30:55,900
it's intentional I'd like to understand

2012
01:30:53,440 --> 01:31:01,830
why they did that and if it's a BAC I'd

2013
01:30:55,900 --> 01:31:04,660
like to fix that have them fix them and

2014
01:31:01,830 --> 01:31:08,519
we are talking about three main clients

2015
01:31:04,660 --> 01:31:14,260
right now or didn't only tool with HP

2016
01:31:08,520 --> 01:31:18,520
103 sorry so can we time bound it

2017
01:31:14,260 --> 01:31:30,370
somehow so we can get this you know

2018
01:31:18,520 --> 01:32:02,680
they're by January would be at this

2019
01:31:30,370 --> 01:32:04,290
point yeah that fix will definitely be

2020
01:32:02,680 --> 01:32:06,520
committed at some point regardless

2021
01:32:04,290 --> 01:32:09,750
because we're actually parsing it twice

2022
01:32:06,520 --> 01:32:13,210
two different ways and that's just bad

2023
01:32:09,750 --> 01:32:15,100
sure all right well if we can get

2024
01:32:13,210 --> 01:32:18,220
alignment with you know at least a

2025
01:32:15,100 --> 01:32:19,390
couple of parlors which you know really

2026
01:32:18,220 --> 01:32:22,630
we're talking about cash implementations

2027
01:32:19,390 --> 01:32:24,610
here so browsers and intermediaries and

2028
01:32:22,630 --> 01:32:27,520
CD ends so if we get a few more online

2029
01:32:24,610 --> 01:32:29,559
that's great so but maybe we should just

2030
01:32:27,520 --> 01:32:31,030
open a few bugs and see if we make

2031
01:32:29,560 --> 01:32:32,950
progress in a few months at least some

2032
01:32:31,030 --> 01:32:35,670
indication that they would address them

2033
01:32:32,950 --> 01:32:42,760
and if not then we'll revisit the issue

2034
01:32:35,670 --> 01:32:45,460
yeah okay can you go thank you

2035
01:32:42,760 --> 01:32:47,740
all right that's the last one we had

2036
01:32:45,460 --> 01:32:48,970
marked as discussed let's take a quick

2037
01:32:47,740 --> 01:32:51,099
look at the issues list to make sure we

2038
01:32:48,970 --> 01:32:59,770
haven't missed anything

2039
01:32:51,099 --> 01:33:04,690
um filter outs so barring editorial

2040
01:32:59,770 --> 01:33:06,280
issues we have 44 issues open Roy and

2041
01:33:04,690 --> 01:33:13,000
Julian just yell if you see one that you

2042
01:33:06,280 --> 01:33:14,409
think we need to talk about now a lot of

2043
01:33:13,000 --> 01:33:15,940
these are relatively straightforward or

2044
01:33:14,409 --> 01:33:21,638
we have proposals for them that we just

2045
01:33:15,940 --> 01:33:24,150
need to refine a little bit so do we

2046
01:33:21,639 --> 01:33:27,489
want to talk about this one

2047
01:33:24,150 --> 01:33:29,170
all right okay I'll open a couple of

2048
01:33:27,489 --> 01:33:31,480
windows and then we'll I I thought that

2049
01:33:29,170 --> 01:33:33,540
was I think well we have a proposal for

2050
01:33:31,480 --> 01:33:33,540
that

2051
01:33:34,730 --> 01:33:42,699
[Music]

2052
01:33:37,139 --> 01:33:46,260
all right the this the the question

2053
01:33:42,699 --> 01:33:49,570
about is is there a specific separator

2054
01:33:46,260 --> 01:33:55,810
so what are you talking about yeah get

2055
01:33:49,570 --> 01:34:03,030
rid of some of these right and I think

2056
01:33:55,810 --> 01:34:03,030
the proposal was roughly this

2057
01:34:05,710 --> 01:34:13,210
and then we we talked about whether this

2058
01:34:08,020 --> 01:34:15,640
is you know a must or not yeah I mean

2059
01:34:13,210 --> 01:34:17,050
I'll back ultimately this is exact

2060
01:34:15,640 --> 01:34:21,580
separator used when combining header

2061
01:34:17,050 --> 01:34:25,750
fields it's issue 148 ultimately we

2062
01:34:21,580 --> 01:34:28,840
talked about what we could change the

2063
01:34:25,750 --> 01:34:30,280
RFC to make it look more clear or what

2064
01:34:28,840 --> 01:34:33,700
we could change that would make it

2065
01:34:30,280 --> 01:34:38,590
consistent for all all applications and

2066
01:34:33,700 --> 01:34:44,880
I believe mark proposed a requirement is

2067
01:34:38,590 --> 01:34:44,880
this should or must must not no sorry no

2068
01:34:45,780 --> 01:34:49,179
may combine without changing the

2069
01:34:47,800 --> 01:34:51,250
semantics of the message by appending

2070
01:34:49,180 --> 01:34:52,360
each subsequent value after stripping

2071
01:34:51,250 --> 01:34:53,980
the surrounding interviews to the

2072
01:34:52,360 --> 01:34:55,929
combined field value in order separated

2073
01:34:53,980 --> 01:35:00,549
by comma SP all right and we've never

2074
01:34:55,930 --> 01:35:03,310
actually said anything about what's is

2075
01:35:00,550 --> 01:35:04,870
it should be just a comma or a comment a

2076
01:35:03,310 --> 01:35:08,260
space or a comma in the amount of white

2077
01:35:04,870 --> 01:35:11,590
space and we just didn't care in the

2078
01:35:08,260 --> 01:35:13,720
past I I still don't care so if anyone

2079
01:35:11,590 --> 01:35:16,120
cares this would be a good time to let

2080
01:35:13,720 --> 01:35:17,740
us know I think that the concern is I

2081
01:35:16,120 --> 01:35:19,059
understand it well I don't wants to have

2082
01:35:17,740 --> 01:35:21,429
one way to do it so that he gets

2083
01:35:19,060 --> 01:35:23,290
consistency between implementations I

2084
01:35:21,430 --> 01:35:25,150
think the concern is driven that in

2085
01:35:23,290 --> 01:35:28,840
pathological cases when you have hetero

2086
01:35:25,150 --> 01:35:30,309
combination and space is is semantically

2087
01:35:28,840 --> 01:35:32,500
significant for example you're doing

2088
01:35:30,310 --> 01:35:33,930
things like signatures then it would be

2089
01:35:32,500 --> 01:35:36,460
good to have one way to do this

2090
01:35:33,930 --> 01:35:38,890
especially if your signature algorithm

2091
01:35:36,460 --> 01:35:42,460
is combine all instances of this header

2092
01:35:38,890 --> 01:35:45,460
and then sign that or you know do

2093
01:35:42,460 --> 01:35:45,780
integrity on that you need one way to do

2094
01:35:45,460 --> 01:35:48,760
it

2095
01:35:45,780 --> 01:35:52,710
yes presumably they'd be specified in

2096
01:35:48,760 --> 01:35:52,710
the signature algorithm itself sure

2097
01:35:57,650 --> 01:36:08,809
does anyone else care about this my my

2098
01:36:04,219 --> 01:36:11,449
trial issue my issue would be any

2099
01:36:08,810 --> 01:36:13,040
additional requirement here would imply

2100
01:36:11,449 --> 01:36:16,299
that everyone who doesn't do that is

2101
01:36:13,040 --> 01:36:18,590
somehow broken and I don't think that

2102
01:36:16,300 --> 01:36:21,199
anything any implications out there

2103
01:36:18,590 --> 01:36:23,690
actually care in terms of you know

2104
01:36:21,199 --> 01:36:27,409
whether they state comma their one space

2105
01:36:23,690 --> 01:36:29,839
or commas no space or common five spaces

2106
01:36:27,409 --> 01:36:31,610
the reason for that is is frequently

2107
01:36:29,840 --> 01:36:33,110
when you're combining header fields and

2108
01:36:31,610 --> 01:36:34,759
they're right next to each other you

2109
01:36:33,110 --> 01:36:38,389
might want just white space everything

2110
01:36:34,760 --> 01:36:41,270
between the two for so that you don't

2111
01:36:38,389 --> 01:36:45,130
have to recopy in a memory but that's a

2112
01:36:41,270 --> 01:36:48,830
really implementation specific concern

2113
01:36:45,130 --> 01:36:51,290
relaying for Chris lemons I care that we

2114
01:36:48,830 --> 01:36:54,889
have precisely one way to do it I don't

2115
01:36:51,290 --> 01:36:56,239
care which way that is okay I mean my

2116
01:36:54,889 --> 01:36:59,150
impression is is that the vast majority

2117
01:36:56,239 --> 01:37:00,799
implementations do do comma space but

2118
01:36:59,150 --> 01:37:02,059
you know and maybe I think it was

2119
01:37:00,800 --> 01:37:03,590
discussed before maybe one thing we

2120
01:37:02,060 --> 01:37:06,139
could do is not put it as part of a

2121
01:37:03,590 --> 01:37:07,880
requirement it's a may but it's still

2122
01:37:06,139 --> 01:37:10,090
requirement language but say the

2123
01:37:07,880 --> 01:37:11,840
canonical way to do this is X you know

2124
01:37:10,090 --> 01:37:13,400
divorce it from that requirement

2125
01:37:11,840 --> 01:37:15,889
language a little bit right absolutely

2126
01:37:13,400 --> 01:37:18,679
if you can give people a hand rather

2127
01:37:15,889 --> 01:37:21,940
than a requirement that's fine too okay

2128
01:37:18,679 --> 01:37:21,940
well we'll figure that out there

2129
01:37:22,869 --> 01:37:33,259
anything else

2130
01:37:24,560 --> 01:37:34,969
oh I'm mark this needs data because I

2131
01:37:33,260 --> 01:37:36,380
think we left this in a previous meeting

2132
01:37:34,969 --> 01:37:38,389
saying we wanted to get a little data

2133
01:37:36,380 --> 01:37:40,190
about what's out there but just to

2134
01:37:38,389 --> 01:37:42,170
remind folks we had this this issue of

2135
01:37:40,190 --> 01:37:43,669
you know header field names are defined

2136
01:37:42,170 --> 01:37:46,849
as tokens and that's actually an

2137
01:37:43,670 --> 01:37:48,290
extremely fulness of syntax and so the

2138
01:37:46,849 --> 01:37:51,230
suggestion was maybe we can cut it down

2139
01:37:48,290 --> 01:37:52,969
a little bit and I think folks latched

2140
01:37:51,230 --> 01:37:55,339
onto that initially because they thought

2141
01:37:52,969 --> 01:37:57,560
okay if we can constrain the syntax of

2142
01:37:55,340 --> 01:37:59,960
field names then that has potentially

2143
01:37:57,560 --> 01:38:01,310
some security benefits when you have

2144
01:37:59,960 --> 01:38:02,929
strange characters and field names and

2145
01:38:01,310 --> 01:38:04,929
then they're put into things like the

2146
01:38:02,929 --> 01:38:07,099
environment or you know other places

2147
01:38:04,929 --> 01:38:09,730
that can have surprising and sometimes

2148
01:38:07,099 --> 01:38:09,730
dangerous effects

2149
01:38:09,830 --> 01:38:16,130
and then I think we got cold feet on

2150
01:38:13,220 --> 01:38:18,500
that a little bit in that folks felt

2151
01:38:16,130 --> 01:38:20,210
that if we constrain the syntax in any

2152
01:38:18,500 --> 01:38:26,240
significant way we could be breaking

2153
01:38:20,210 --> 01:38:27,860
deployed applications yeah we talked

2154
01:38:26,240 --> 01:38:30,019
about this in Bangkok concerns about

2155
01:38:27,860 --> 01:38:37,400
compatibility we're considering an

2156
01:38:30,020 --> 01:38:39,590
impact on a case by case --is and then

2157
01:38:37,400 --> 01:38:44,240
yeah that's Willie said what H a proxy

2158
01:38:39,590 --> 01:38:47,410
accepts we discussed it twice in nine

2159
01:38:44,240 --> 01:38:50,330
cup now we haven't been there twice okay

2160
01:38:47,410 --> 01:38:52,070
and then in 104 still seeking data for

2161
01:38:50,330 --> 01:38:53,900
characters used in the world looking at

2162
01:38:52,070 --> 01:38:55,549
the HP archive so I took an action I

2163
01:38:53,900 --> 01:38:57,349
think to do that we have any further

2164
01:38:55,550 --> 01:38:59,930
thoughts about that I just want to keep

2165
01:38:57,350 --> 01:39:02,090
that on people's minds if we do discover

2166
01:38:59,930 --> 01:39:05,960
that you know in the wild these meta

2167
01:39:02,090 --> 01:39:07,070
characters or they're not delimiter s

2168
01:39:05,960 --> 01:39:09,800
because the owners are accepted from

2169
01:39:07,070 --> 01:39:13,519
token but the non-ascii not non letter

2170
01:39:09,800 --> 01:39:15,410
non digit and common you know tokens are

2171
01:39:13,520 --> 01:39:17,720
used are we comfortable getting rid of

2172
01:39:15,410 --> 01:39:21,470
those or at least cautioning against

2173
01:39:17,720 --> 01:39:27,380
them perhaps any thoughts

2174
01:39:21,470 --> 01:39:29,210
I for one unhappy to eliminate them just

2175
01:39:27,380 --> 01:39:32,570
because we already have to do it in the

2176
01:39:29,210 --> 01:39:33,860
backend for security reasons right and

2177
01:39:32,570 --> 01:39:35,450
if we could get that pushed all the way

2178
01:39:33,860 --> 01:39:37,670
up to the registry so that you can't

2179
01:39:35,450 --> 01:39:40,570
register them all or you have to have an

2180
01:39:37,670 --> 01:39:42,830
exceptional whatever that'd be good okay

2181
01:39:40,570 --> 01:39:44,000
I'll do that work then I actually have

2182
01:39:42,830 --> 01:39:47,330
to do that work for something else right

2183
01:39:44,000 --> 01:39:49,640
now so I can put two things together no

2184
01:39:47,330 --> 01:39:56,180
that's fine that's fine I think I think

2185
01:39:49,640 --> 01:39:58,160
we're done so I'm just stepping back I

2186
01:39:56,180 --> 01:40:01,220
think Roy and Julian and I are planning

2187
01:39:58,160 --> 01:40:04,360
to get together around the quick interim

2188
01:40:01,220 --> 01:40:06,590
in early February or late January and

2189
01:40:04,360 --> 01:40:07,700
work on the drafts for a few days and

2190
01:40:06,590 --> 01:40:10,100
try and turn out some of these issues

2191
01:40:07,700 --> 01:40:13,760
and especially editorial stuff we did a

2192
01:40:10,100 --> 01:40:15,200
similar thing during HTV bists and that

2193
01:40:13,760 --> 01:40:16,820
was quite productive so we're hoping

2194
01:40:15,200 --> 01:40:18,580
that that'll get us the point where this

2195
01:40:16,820 --> 01:40:20,750
issues list is much much smaller and

2196
01:40:18,580 --> 01:40:22,519
we'll have some drafts review in the

2197
01:40:20,750 --> 01:40:23,539
working group and maybe around Vancouver

2198
01:40:22,520 --> 01:40:25,940
so I

2199
01:40:23,539 --> 01:40:28,929
he's starting to think about when do we

2200
01:40:25,940 --> 01:40:34,089
do last call that that's my thinking

2201
01:40:28,929 --> 01:40:37,760
yeah I'd like to have all of the the

2202
01:40:34,090 --> 01:40:39,889
substantive text basically in there by

2203
01:40:37,760 --> 01:40:43,400
the time we finish our meeting and then

2204
01:40:39,889 --> 01:40:45,260
we start rolling the process towards you

2205
01:40:43,400 --> 01:40:49,129
know working group review and then last

2206
01:40:45,260 --> 01:40:50,360
call and yeah I do suspect that we're

2207
01:40:49,130 --> 01:40:52,309
gonna once we get all the stuff we know

2208
01:40:50,360 --> 01:40:53,659
about now we're gonna step back and look

2209
01:40:52,309 --> 01:40:55,730
at the documents and say oh we missed

2210
01:40:53,659 --> 01:40:57,379
that - no we need to think about that so

2211
01:40:55,730 --> 01:41:02,509
there there might be a couple of more

2212
01:40:57,380 --> 01:41:08,840
phases but the last thing I wanted to

2213
01:41:02,510 --> 01:41:14,869
talk about was the the the issue about a

2214
01:41:08,840 --> 01:41:17,989
cheap HTTPS and quick the authority you

2215
01:41:14,869 --> 01:41:19,579
can run with the numbers oh yes what is

2216
01:41:17,989 --> 01:41:23,000
that issue sorry was there a jabber

2217
01:41:19,579 --> 01:41:27,500
comment yeah relaying for Roberto Polly

2218
01:41:23,000 --> 01:41:35,630
he wants to quickly discuss issue 99

2219
01:41:27,500 --> 01:41:38,260
scope of retry after okay that was the

2220
01:41:35,630 --> 01:41:41,860
one that you were with the comment

2221
01:41:38,260 --> 01:41:47,929
anybody have feedback on that thread

2222
01:41:41,860 --> 01:41:49,670
yeah let's get that up I think my

2223
01:41:47,929 --> 01:41:51,349
personal feedback and I think I put it

2224
01:41:49,670 --> 01:41:53,960
in there is is that yeah we can't really

2225
01:41:51,349 --> 01:41:56,210
retro actively define a scope for the

2226
01:41:53,960 --> 01:41:57,590
header in a meaningful way that if you

2227
01:41:56,210 --> 01:42:00,260
wanted to find one that's tightly scoped

2228
01:41:57,590 --> 01:42:01,639
it's probably best as a new header it is

2229
01:42:00,260 --> 01:42:02,599
defined as something that's vague and so

2230
01:42:01,639 --> 01:42:05,480
it's gonna be used in a lot of different

2231
01:42:02,599 --> 01:42:08,599
ways where it is used and so narrowing

2232
01:42:05,480 --> 01:42:10,400
it down is probably problematic unless

2233
01:42:08,599 --> 01:42:14,800
it's for a specific use case that says

2234
01:42:10,400 --> 01:42:18,170
use the retry after header to do X so

2235
01:42:14,800 --> 01:42:21,320
some are not in Johnson I put a proposal

2236
01:42:18,170 --> 01:42:24,139
for what might work as text in here

2237
01:42:21,320 --> 01:42:27,920
which is essentially that you just

2238
01:42:24,139 --> 01:42:29,210
scroll past it there which is

2239
01:42:27,920 --> 01:42:30,679
essentially along the lines of what you

2240
01:42:29,210 --> 01:42:33,230
said recognizing the fact that you can't

2241
01:42:30,679 --> 01:42:35,960
really retroactive we go back and define

2242
01:42:33,230 --> 01:42:36,750
something here it basically says that

2243
01:42:35,960 --> 01:42:39,960
when

2244
01:42:36,750 --> 01:42:42,030
the server uses retry after it it it

2245
01:42:39,960 --> 01:42:46,020
applies to that request that it may

2246
01:42:42,030 --> 01:42:47,730
apply to other things and the client may

2247
01:42:46,020 --> 01:42:49,260
use other information to determine to

2248
01:42:47,730 --> 01:42:52,589
determine what other things that applies

2249
01:42:49,260 --> 01:42:55,830
to but otherwise it it's kind of on its

2250
01:42:52,590 --> 01:42:58,770
own and sort of suggests that heuristics

2251
01:42:55,830 --> 01:43:00,900
may be may be your best bet without the

2252
01:42:58,770 --> 01:43:03,930
presence of that other information for

2253
01:43:00,900 --> 01:43:05,790
instance if it's attached to a 503 often

2254
01:43:03,930 --> 01:43:08,100
that is something that means that the

2255
01:43:05,790 --> 01:43:10,650
server's overloaded or something along

2256
01:43:08,100 --> 01:43:12,060
those lines and you might want to treat

2257
01:43:10,650 --> 01:43:13,110
that as applying to all requests that

2258
01:43:12,060 --> 01:43:15,300
you might want to make to that server

2259
01:43:13,110 --> 01:43:16,410
but it doesn't explicitly say anything

2260
01:43:15,300 --> 01:43:18,930
like that it just says use your

2261
01:43:16,410 --> 01:43:21,120
heuristics or whatever information you

2262
01:43:18,930 --> 01:43:23,670
might get I don't know if you want to

2263
01:43:21,120 --> 01:43:25,620
consider incorporating that text or

2264
01:43:23,670 --> 01:43:26,970
something along those lines but I think

2265
01:43:25,620 --> 01:43:28,740
that's fine

2266
01:43:26,970 --> 01:43:30,540
I think we've known we've had this

2267
01:43:28,740 --> 01:43:32,820
scoping problem not just for this but

2268
01:43:30,540 --> 01:43:35,400
for a lot of our protocol artifacts for

2269
01:43:32,820 --> 01:43:36,990
a long time yeah what I would like to do

2270
01:43:35,400 --> 01:43:40,049
is probably put in the considerations

2271
01:43:36,990 --> 01:43:41,940
for new headers and status codes and

2272
01:43:40,050 --> 01:43:43,440
things think about scope very carefully

2273
01:43:41,940 --> 01:43:46,530
and give some examples so that we don't

2274
01:43:43,440 --> 01:43:50,099
dig further I think that might be a very

2275
01:43:46,530 --> 01:43:52,769
good thing to have in general do you

2276
01:43:50,100 --> 01:43:55,170
want another issue for that sure yeah

2277
01:43:52,770 --> 01:43:58,230
you know I've got another one for you

2278
01:43:55,170 --> 01:44:00,390
okay I'll let the editors decide whether

2279
01:43:58,230 --> 01:44:03,839
they want text along these lines but I

2280
01:44:00,390 --> 01:44:10,950
think this text is fine I mean ya feel

2281
01:44:03,840 --> 01:44:12,450
freedom rewarded and okay thanks umm so

2282
01:44:10,950 --> 01:44:13,940
the issue you were referring to Roy oh

2283
01:44:12,450 --> 01:44:16,290
sorry

2284
01:44:13,940 --> 01:44:18,679
Roberto says if you think it's worth

2285
01:44:16,290 --> 01:44:20,820
writing a draft on that I can try I

2286
01:44:18,680 --> 01:44:28,950
don't think it's necessary I think we

2287
01:44:20,820 --> 01:44:35,199
can take this text up is it open still I

2288
01:44:28,950 --> 01:44:36,820
didn't think we closed it yeah

2289
01:44:35,199 --> 01:44:39,129
oh yeah we open their implications of

2290
01:44:36,820 --> 01:44:43,090
establishing Authority ah you open the

2291
01:44:39,130 --> 01:44:45,250
new one oh did I all right

2292
01:44:43,090 --> 01:44:47,980
yeah you might if you want to discussion

2293
01:44:45,250 --> 01:44:51,280
go back to the one I for or from okay

2294
01:44:47,980 --> 01:44:54,730
yeah which is closed

2295
01:44:51,280 --> 01:44:56,230
yeah I went and thought about this and

2296
01:44:54,730 --> 01:44:57,910
then realized I needed to get stayed

2297
01:44:56,230 --> 01:45:01,389
again so it's probably good that we're

2298
01:44:57,910 --> 01:45:05,170
talking about this yeah so so what we're

2299
01:45:01,390 --> 01:45:08,230
working on right now literally in what I

2300
01:45:05,170 --> 01:45:09,730
was drafting I'm flight over and I read

2301
01:45:08,230 --> 01:45:14,879
it last night and it's not as good as I

2302
01:45:09,730 --> 01:45:19,799
wanted so I didn't submit it anyway the

2303
01:45:14,880 --> 01:45:23,140
the notion of authority in for HCP and

2304
01:45:19,800 --> 01:45:26,469
the notion of age what is an origin

2305
01:45:23,140 --> 01:45:29,320
server in HTTP is sort of in meshed in

2306
01:45:26,469 --> 01:45:35,020
the in the old way we think about the

2307
01:45:29,320 --> 01:45:37,509
Internet in terms of using TCP and HCP

2308
01:45:35,020 --> 01:45:39,100
you contact an origin server on a

2309
01:45:37,510 --> 01:45:42,310
certain port and that defines the

2310
01:45:39,100 --> 01:45:47,530
authority for four HUP four HUP s you

2311
01:45:42,310 --> 01:45:50,980
contact a TLS listening server on that

2312
01:45:47,530 --> 01:45:54,610
specific port using TCP and that defines

2313
01:45:50,980 --> 01:45:59,769
the authority for HTTP URLs but the

2314
01:45:54,610 --> 01:46:02,620
reality is there are lots there is a

2315
01:45:59,770 --> 01:46:06,850
specific way defining what the what the

2316
01:46:02,620 --> 01:46:12,489
authority is in sense that we define the

2317
01:46:06,850 --> 01:46:16,179
host of the of the origin server and the

2318
01:46:12,489 --> 01:46:22,449
port and this the scheme as defining the

2319
01:46:16,179 --> 01:46:26,920
authority for HTTP but then for TLS

2320
01:46:22,449 --> 01:46:29,410
based services what occurs is a a

2321
01:46:26,920 --> 01:46:33,940
certificate handshake which is

2322
01:46:29,410 --> 01:46:36,460
applicable for the host regardless of

2323
01:46:33,940 --> 01:46:41,769
what port it comes in because the port

2324
01:46:36,460 --> 01:46:43,270
is not a trusted interface and of course

2325
01:46:41,770 --> 01:46:45,360
Martin can explain this much better than

2326
01:46:43,270 --> 01:46:45,360
I can

2327
01:46:45,869 --> 01:46:51,780
anyway so what we're trying to do is

2328
01:46:48,679 --> 01:46:55,530
rewrite the definition of what the HTTP

2329
01:46:51,780 --> 01:46:59,309
authority is for HTTP so that it is

2330
01:46:55,530 --> 01:47:02,009
applicable to not only define which

2331
01:46:59,310 --> 01:47:07,310
server you're talking to but also allow

2332
01:47:02,010 --> 01:47:12,360
things like alternative services in h3s

2333
01:47:07,310 --> 01:47:15,570
use of quick to take over that authority

2334
01:47:12,360 --> 01:47:16,679
will be able to represent itself as the

2335
01:47:15,570 --> 01:47:20,250
authority even though they're not

2336
01:47:16,679 --> 01:47:22,699
talking tcp over the specific port so

2337
01:47:20,250 --> 01:47:26,610
it's it's basically redefining it as

2338
01:47:22,699 --> 01:47:28,190
here's what authority is means for HTTP

2339
01:47:26,610 --> 01:47:32,730
but here are these other ways in which

2340
01:47:28,190 --> 01:47:35,909
that is also accomplished not

2341
01:47:32,730 --> 01:47:38,699
deprecating any of the existing ones so

2342
01:47:35,909 --> 01:47:41,750
that's the goal hopefully I'll get

2343
01:47:38,699 --> 01:47:45,239
something finished tonight or tomorrow

2344
01:47:41,750 --> 01:47:47,159
and of course won't be ready for review

2345
01:47:45,239 --> 01:47:49,138
until this later in the quarter

2346
01:47:47,159 --> 01:47:53,190
but that's hungry working on right now

2347
01:47:49,139 --> 01:47:54,690
and if you have anything that you want

2348
01:47:53,190 --> 01:47:58,409
to be absolutely sure I include in that

2349
01:47:54,690 --> 01:48:02,909
feel free to add it to issue whatever

2350
01:47:58,409 --> 01:48:08,179
issue this is which one is it - 37 - 37

2351
01:48:02,909 --> 01:48:13,110
yeah okay take word time so thank you

2352
01:48:08,179 --> 01:48:18,599
wait one more presentation okay thank

2353
01:48:13,110 --> 01:48:27,530
you right thank you all so Roberto do

2354
01:48:18,599 --> 01:48:32,710
you want to press the magic button hello

2355
01:48:27,530 --> 01:48:35,858
yes we cannot is volume try

2356
01:48:32,710 --> 01:48:35,859
[Music]

2357
01:48:38,640 --> 01:48:41,869
[Music]

2358
01:49:40,280 --> 01:49:43,490
[Music]

2359
01:49:50,970 --> 01:49:54,029
[Music]

2360
01:50:07,860 --> 01:50:18,000
just express it in Delta seconds so it's

2361
01:50:11,260 --> 01:50:21,790
compatible with the retry after next so

2362
01:50:18,000 --> 01:50:25,930
this is the response header that you

2363
01:50:21,790 --> 01:50:29,850
will get in your response there is a

2364
01:50:25,930 --> 01:50:32,710
mandatory part with the number of total

2365
01:50:29,850 --> 01:50:36,490
units that you have got in a given time

2366
01:50:32,710 --> 01:50:40,510
frame that we named window their

2367
01:50:36,490 --> 01:50:43,900
remaining requests what units that you

2368
01:50:40,510 --> 01:50:48,160
have in your window and how long out

2369
01:50:43,900 --> 01:50:50,799
annual before the window expires and

2370
01:50:48,160 --> 01:50:54,949
then after

2371
01:50:50,800 --> 01:50:58,599
mother repart you can express up

2372
01:50:54,949 --> 01:51:03,678
optional parts with multiple quarters

2373
01:50:58,599 --> 01:51:07,280
for example in this case the first

2374
01:51:03,679 --> 01:51:11,239
optional part states that you have 10

2375
01:51:07,280 --> 01:51:15,289
units every 5 seconds the W stay stays

2376
01:51:11,239 --> 01:51:20,718
for window and then you are fully

2377
01:51:15,289 --> 01:51:24,380
limited to 80 units per minute the

2378
01:51:20,719 --> 01:51:28,329
specification support even comments in

2379
01:51:24,380 --> 01:51:34,849
our cloud part the nice thing is that

2380
01:51:28,329 --> 01:51:38,090
you can always ignore the optional parts

2381
01:51:34,849 --> 01:51:42,070
and limit the parser to the mandatory

2382
01:51:38,090 --> 01:51:43,989
part then we change when we are going to

2383
01:51:42,070 --> 01:51:51,699
[Music]

2384
01:51:43,989 --> 01:51:57,169
consume all the second policy parts

2385
01:51:51,699 --> 01:52:01,009
instead of having 10 6 & 3 you will get

2386
01:51:57,170 --> 01:52:04,369
the information about the second policy

2387
01:52:01,010 --> 01:52:08,119
so the response the mandatory part will

2388
01:52:04,369 --> 01:52:14,749
always contain the data from the policy

2389
01:52:08,119 --> 01:52:17,929
that is going to expire first next our

2390
01:52:14,749 --> 01:52:20,959
technical choices the first one is to

2391
01:52:17,929 --> 01:52:24,190
support only Delta seconds so you don't

2392
01:52:20,959 --> 01:52:27,769
have to take care of enthalpy skew and

2393
01:52:24,190 --> 01:52:32,150
adjustment issues just like they retry

2394
01:52:27,769 --> 01:52:35,659
after that the second syntax what is

2395
01:52:32,150 --> 01:52:39,348
expressed in units that may or may not

2396
01:52:35,659 --> 01:52:43,579
be requests so that you can support

2397
01:52:39,349 --> 01:52:47,449
multiple quota policies and you have

2398
01:52:43,579 --> 01:52:51,018
comments the semantics is quite flexible

2399
01:52:47,449 --> 01:52:54,739
you can express dynamic policies sliding

2400
01:52:51,019 --> 01:52:58,789
window and concurrency limits we do not

2401
01:52:54,739 --> 01:53:04,218
mention infrastructural concepts like

2402
01:52:58,789 --> 01:53:10,099
connection because connection HTTP to

2403
01:53:04,219 --> 01:53:13,959
our pre-cana are multiplexed so we melt

2404
01:53:10,099 --> 01:53:23,179
it to express just service information

2405
01:53:13,959 --> 01:53:27,438
just like HTTP next we have other issues

2406
01:53:23,179 --> 01:53:30,320
leading inputs well the first one we

2407
01:53:27,439 --> 01:53:35,239
have discussed above is related to the

2408
01:53:30,320 --> 01:53:39,438
reply after stuff so we want to meet to

2409
01:53:35,239 --> 01:53:43,848
the final tripping school we may want to

2410
01:53:39,439 --> 01:53:46,400
define header dependencies we might use

2411
01:53:43,849 --> 01:53:51,380
structured headers to define the

2412
01:53:46,400 --> 01:53:54,348
specification we may want to use an

2413
01:53:51,380 --> 01:53:58,820
upper bound for read limit result which

2414
01:53:54,349 --> 01:54:02,150
is Delta second and there have been some

2415
01:53:58,820 --> 01:54:05,409
discussion about Hannah names we can

2416
01:54:02,150 --> 01:54:12,768
postpone them once we adopted

2417
01:54:05,409 --> 01:54:15,199
specification next thanks I have to

2418
01:54:12,769 --> 01:54:25,610
thank a lot of people for the initial

2419
01:54:15,199 --> 01:54:30,969
contribution that is mark there is many

2420
01:54:25,610 --> 01:54:35,889
other guys and thanks to alex Martinez

2421
01:54:30,969 --> 01:54:43,539
listen here and they hunted me currently

2422
01:54:35,889 --> 01:54:43,539
and what questions I'm here for you

2423
01:54:48,369 --> 01:54:54,199
seems like this some of the things we're

2424
01:54:51,679 --> 01:54:56,300
talking about priorities share some

2425
01:54:54,199 --> 01:54:58,400
similar problems we're trying to express

2426
01:54:56,300 --> 01:55:01,699
a priority to somebody who will

2427
01:54:58,400 --> 01:55:05,869
hopefully take action to it and caching

2428
01:55:01,699 --> 01:55:10,249
becomes really interesting the boundary

2429
01:55:05,869 --> 01:55:13,249
by which we say where the implementation

2430
01:55:10,249 --> 01:55:15,889
of HTTP or or where that interaction

2431
01:55:13,249 --> 01:55:16,429
actually stops or begins is interesting

2432
01:55:15,889 --> 01:55:19,219
is

2433
01:55:16,429 --> 01:55:21,619
is the origin to the reverse proxy

2434
01:55:19,219 --> 01:55:22,880
considered in this case for instance I

2435
01:55:21,619 --> 01:55:24,709
think there are a lot of details that

2436
01:55:22,880 --> 01:55:31,780
are similar here that we probably need

2437
01:55:24,709 --> 01:55:37,489
to address in concept together yes I

2438
01:55:31,780 --> 01:55:45,039
agree generally we think that the

2439
01:55:37,489 --> 01:55:51,009
headers are applied by the origin server

2440
01:55:45,039 --> 01:55:54,679
the entity that knows the service limits

2441
01:55:51,010 --> 01:56:02,900
and knows the service status for the

2442
01:55:54,679 --> 01:56:10,130
baguette service and we find many

2443
01:56:02,900 --> 01:56:15,018
considerations on that it's interesting

2444
01:56:10,130 --> 01:56:19,550
if you can contribute and we are really

2445
01:56:15,019 --> 01:56:23,809
open to the discussion our our goal

2446
01:56:19,550 --> 01:56:27,050
actually is to put everything on a

2447
01:56:23,809 --> 01:56:31,219
common ground because this kind of

2448
01:56:27,050 --> 01:56:33,849
header can work only if they are the

2449
01:56:31,219 --> 01:56:37,610
semantics is standardized while

2450
01:56:33,849 --> 01:56:40,630
currently we have a high proliferation

2451
01:56:37,610 --> 01:56:44,239
of header and this means that clients

2452
01:56:40,630 --> 01:56:49,400
just ignore them because clients don't

2453
01:56:44,239 --> 01:56:52,218
know which odd header they with limit

2454
01:56:49,400 --> 01:56:55,098
headers that they can found I can't in

2455
01:56:52,219 --> 01:57:00,409
some environment there are 12 but client

2456
01:56:55,099 --> 01:57:04,610
just can iterate looking for 12 possible

2457
01:57:00,409 --> 01:57:09,039
between headers so there and one of my

2458
01:57:04,610 --> 01:57:11,839
concerns here is that rate limiting can

2459
01:57:09,039 --> 01:57:13,280
be twisted to be a form of denial of

2460
01:57:11,840 --> 01:57:17,030
service attack especially if your

2461
01:57:13,280 --> 01:57:20,329
combined with cache poisoning and being

2462
01:57:17,030 --> 01:57:24,110
under specified aware about where this

2463
01:57:20,329 --> 01:57:26,539
policy applies and who kills it or eats

2464
01:57:24,110 --> 01:57:28,280
it or what where it's not expressed

2465
01:57:26,539 --> 01:57:29,639
becomes a very important security

2466
01:57:28,280 --> 01:57:32,190
consideration

2467
01:57:29,640 --> 01:57:34,950
so I think that we can't afford to avoid

2468
01:57:32,190 --> 01:57:37,320
this if we would speck it thank you

2469
01:57:34,950 --> 01:57:41,070
I'm gonna close the queue and I'd ask

2470
01:57:37,320 --> 01:57:42,990
the remaining folks to be brief mum

2471
01:57:41,070 --> 01:57:44,490
Thompson I I hope that you were paying

2472
01:57:42,990 --> 01:57:48,590
attention to the discussion about scopes

2473
01:57:44,490 --> 01:57:50,700
previously Roberto not this Roberto yes

2474
01:57:48,590 --> 01:57:51,900
because I think that's that's a highly

2475
01:57:50,700 --> 01:57:54,269
applicable here this is one of those

2476
01:57:51,900 --> 01:57:56,820
cases where these things will apply

2477
01:57:54,270 --> 01:57:58,470
across different scopes and it may be

2478
01:57:56,820 --> 01:57:59,849
that you need a scope parameter and in

2479
01:57:58,470 --> 01:58:01,020
this I'm thinking about the case where

2480
01:57:59,850 --> 01:58:03,420
you have a forward proxy that applies

2481
01:58:01,020 --> 01:58:05,180
one rate limit and then you have back

2482
01:58:03,420 --> 01:58:08,880
end servers that are responsible for

2483
01:58:05,180 --> 01:58:10,350
parts of the space and each of them have

2484
01:58:08,880 --> 01:58:11,940
independent right limits and when you

2485
01:58:10,350 --> 01:58:14,340
get a response back you're gonna get

2486
01:58:11,940 --> 01:58:15,990
multiple right limits back and some of

2487
01:58:14,340 --> 01:58:19,260
them will apply across the entire server

2488
01:58:15,990 --> 01:58:20,910
some of them were quite fly across like

2489
01:58:19,260 --> 01:58:22,320
it's gonna get a little complicated to

2490
01:58:20,910 --> 01:58:23,130
work through all of those things but I

2491
01:58:22,320 --> 01:58:25,139
think it's workable

2492
01:58:23,130 --> 01:58:28,290
with a little bit more expressiveness in

2493
01:58:25,140 --> 01:58:30,870
in all this I am I do share some of

2494
01:58:28,290 --> 01:58:38,930
Roberto's concerns about the denial of

2495
01:58:30,870 --> 01:58:40,950
service thing relaying for Chris lemons

2496
01:58:38,930 --> 01:58:43,410
it's going to be important to think

2497
01:58:40,950 --> 01:58:45,480
about per hop considerations because in

2498
01:58:43,410 --> 01:58:47,099
some cases a proxy needs to communicate

2499
01:58:45,480 --> 01:58:49,290
to a client that a given request is out

2500
01:58:47,100 --> 01:58:51,450
of limit and in some cases a proxy might

2501
01:58:49,290 --> 01:58:53,780
wish to retry a request after the limit

2502
01:58:51,450 --> 01:58:57,389
has expired transparently to the client

2503
01:58:53,780 --> 01:58:59,610
and then relaying for Thomas Peterson is

2504
01:58:57,390 --> 01:59:01,590
there a reason why this spec isn't

2505
01:58:59,610 --> 01:59:03,599
making use of structured headers this

2506
01:59:01,590 --> 01:59:09,030
could apply to both the optional fields

2507
01:59:03,600 --> 01:59:12,090
and replace three headers with one okay

2508
01:59:09,030 --> 01:59:14,670
thank you so I had two quick questions

2509
01:59:12,090 --> 01:59:16,560
one for Roberto one for the room Roberto

2510
01:59:14,670 --> 01:59:18,390
there's a as you mentioned there are a

2511
01:59:16,560 --> 01:59:19,850
lot of folks who are doing this in the

2512
01:59:18,390 --> 01:59:22,830
wild especially for things like

2513
01:59:19,850 --> 01:59:24,150
http-based api's have you have you

2514
01:59:22,830 --> 01:59:26,010
engaged with those communities have you

2515
01:59:24,150 --> 01:59:36,900
had discussion with them about your

2516
01:59:26,010 --> 01:59:39,930
proposal at all yes the italian api co

2517
01:59:36,900 --> 01:59:42,978
system so we had to engage with service

2518
01:59:39,930 --> 01:59:46,420
providers to get

2519
01:59:42,979 --> 01:59:48,260
the implementation of those hazards

2520
01:59:46,420 --> 01:59:52,059
there are a couple of cloud providers

2521
01:59:48,260 --> 01:59:58,449
they are working on that there is the

2522
01:59:52,059 --> 01:59:58,449
co-editor that is from Chris Kael API

2523
01:59:58,809 --> 02:00:11,510
get away from Reddit and so it's we are

2524
02:00:05,079 --> 02:00:15,380
working actually for getting consensus

2525
02:00:11,510 --> 02:00:16,550
and get implementation thank you

2526
02:00:15,380 --> 02:00:20,650
and the other question I had for the

2527
02:00:16,550 --> 02:00:23,059
room is who has read this draft ends up

2528
02:00:20,650 --> 02:00:26,360
okay I'd say it's a smattering of the

2529
02:00:23,059 --> 02:00:27,979
room right okay I just it's Roy fielding

2530
02:00:26,360 --> 02:00:30,949
I wanted to add that it's almost

2531
02:00:27,979 --> 02:00:33,709
identical to what the kid hub API uses

2532
02:00:30,949 --> 02:00:35,530
already except to github version of

2533
02:00:33,709 --> 02:00:39,709
those same header fields is much simpler

2534
02:00:35,530 --> 02:00:42,079
okay all right I don't think we're ready

2535
02:00:39,709 --> 02:00:43,309
to do a hum or anything quite yet but

2536
02:00:42,079 --> 02:00:45,228
but this is something I think is

2537
02:00:43,309 --> 02:00:46,340
definitely on our radar what could

2538
02:00:45,229 --> 02:00:48,440
please continue to work on the draft

2539
02:00:46,340 --> 02:00:50,239
please continue to engage with the

2540
02:00:48,440 --> 02:00:52,879
working group and and we'll have more

2541
02:00:50,239 --> 02:00:56,419
discussion and we'll see what we said

2542
02:00:52,880 --> 02:00:58,999
next time okay

2543
02:00:56,420 --> 02:01:02,059
Thank You Roberta yes thank you very

2544
02:00:58,999 --> 02:01:03,170
much so I think we're done for today

2545
02:01:02,059 --> 02:01:08,260
thank you all very much

2546
02:01:03,170 --> 02:01:08,260
we'll see you all on Thursday thank you

