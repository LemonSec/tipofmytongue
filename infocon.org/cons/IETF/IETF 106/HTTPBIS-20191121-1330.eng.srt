1
00:00:06,620 --> 00:00:16,680
and could you possibly close those doors

2
00:00:09,510 --> 00:00:20,630
thank you so much they're very noisy

3
00:00:16,680 --> 00:00:20,630
crowd out there it's those 5g people

4
00:00:26,480 --> 00:00:36,210
thank you okay so I can talk through

5
00:00:34,769 --> 00:00:40,260
some these results again to them okay

6
00:00:36,210 --> 00:00:42,300
all right so this is HTTP this is the

7
00:00:40,260 --> 00:00:43,620
note well once again if you're not

8
00:00:42,300 --> 00:00:46,078
familiar with this you can find this by

9
00:00:43,620 --> 00:00:48,510
going to your preferred search engine on

10
00:00:46,079 --> 00:00:51,270
the internet and searching for ITF note

11
00:00:48,510 --> 00:00:52,559
well and it will tell you about our

12
00:00:51,270 --> 00:00:54,930
expectations regarding intellectual

13
00:00:52,559 --> 00:00:57,000
property and people's behavior and

14
00:00:54,930 --> 00:00:59,190
handling of things like harassment so

15
00:00:57,000 --> 00:01:01,170
please do be aware of this these are all

16
00:00:59,190 --> 00:01:07,320
policies which we do take seriously and

17
00:01:01,170 --> 00:01:09,150
apply the blue sheets are circulating

18
00:01:07,320 --> 00:01:10,639
did we get a volunteer prescribing we

19
00:01:09,150 --> 00:01:13,010
did not oh dear

20
00:01:10,640 --> 00:01:15,810
would anyone like to volunteer for

21
00:01:13,010 --> 00:01:19,680
note-taking as and then also have

22
00:01:15,810 --> 00:01:21,330
someone else on jabber scribing you can

23
00:01:19,680 --> 00:01:27,810
do jabber scribe we still need a scribe

24
00:01:21,330 --> 00:01:30,929
so note-taking please anyone we'll be

25
00:01:27,810 --> 00:01:32,280
going through the various extension

26
00:01:30,930 --> 00:01:35,460
drafts will be a lot of fun you didn't

27
00:01:32,280 --> 00:01:41,579
say no Oh Mike thank you you're you're

28
00:01:35,460 --> 00:01:45,990
you're a gentleman that's fine

29
00:01:41,579 --> 00:01:47,669
agenda bash so um I wanted to do a quick

30
00:01:45,990 --> 00:01:49,520
reprise of stuff that had happened in

31
00:01:47,670 --> 00:01:51,720
other groups if someone would be willing

32
00:01:49,520 --> 00:01:53,220
I'll talk briefly about what happened in

33
00:01:51,720 --> 00:01:54,270
sac dispatch because I was there if

34
00:01:53,220 --> 00:01:57,030
someone else could talk about what

35
00:01:54,270 --> 00:01:59,789
happened in DNS op regarding the new

36
00:01:57,030 --> 00:02:02,130
record type very briefly that would be

37
00:01:59,790 --> 00:02:04,950
really appreciated anybody wanted to do

38
00:02:02,130 --> 00:02:07,439
that I mean I can talk about you can

39
00:02:04,950 --> 00:02:09,149
talk about okay okay then we have a

40
00:02:07,439 --> 00:02:10,530
short update on what happened to

41
00:02:09,149 --> 00:02:13,050
continue to happen in the priorities

42
00:02:10,530 --> 00:02:14,430
discussion it's been the bulk of our

43
00:02:13,050 --> 00:02:17,190
time talking about our in-flight

44
00:02:14,430 --> 00:02:18,120
extension drafts and then we have a

45
00:02:17,190 --> 00:02:19,920
presentation

46
00:02:18,120 --> 00:02:21,780
proposal for new workaround compression

47
00:02:19,920 --> 00:02:24,510
dictionaries which we talked about

48
00:02:21,780 --> 00:02:26,400
before this is just a further step in

49
00:02:24,510 --> 00:02:27,750
that discussion and finally as time

50
00:02:26,400 --> 00:02:29,730
permits there's a proposal for a

51
00:02:27,750 --> 00:02:34,020
transport info header that we might get

52
00:02:29,730 --> 00:02:35,369
to any other agenda bession okay let's

53
00:02:34,020 --> 00:02:37,620
get right into it then

54
00:02:35,370 --> 00:02:40,860
so insect dispatch there were two

55
00:02:37,620 --> 00:02:44,849
interesting discussions one was

56
00:02:40,860 --> 00:02:47,819
regarding request signing we've had on

57
00:02:44,849 --> 00:02:50,819
our agenda rather on our watch list of

58
00:02:47,819 --> 00:02:53,579
things that were keep an eye on ahead of

59
00:02:50,819 --> 00:02:56,160
the draft cabbage request signing for

60
00:02:53,580 --> 00:02:58,350
some time HT a draft cabbage HTTP

61
00:02:56,160 --> 00:03:00,750
request signing I think and there was

62
00:02:58,350 --> 00:03:02,220
discussion insect dispatch I think the

63
00:03:00,750 --> 00:03:03,959
information we got there was that there

64
00:03:02,220 --> 00:03:05,400
is a fairly large community people with

65
00:03:03,959 --> 00:03:07,260
with requirements in this space and

66
00:03:05,400 --> 00:03:09,180
interest and there's some forward

67
00:03:07,260 --> 00:03:11,340
impetus and so the discussion there

68
00:03:09,180 --> 00:03:13,769
recommended that they bring that draft

69
00:03:11,340 --> 00:03:15,599
here so we can expect probably a revised

70
00:03:13,769 --> 00:03:17,040
draft to appear sometime soon and then

71
00:03:15,599 --> 00:03:19,590
we'll look at doing a call for adoption

72
00:03:17,040 --> 00:03:23,840
or talking about it more if need be the

73
00:03:19,590 --> 00:03:23,840
other discussion there was around

74
00:03:23,900 --> 00:03:29,250
identifying the credentials in a forward

75
00:03:27,120 --> 00:03:30,660
hop from a proxy and there wasn't any

76
00:03:29,250 --> 00:03:33,780
certainty around whether that was going

77
00:03:30,660 --> 00:03:35,549
to be at TLS layer or the HTTP layer but

78
00:03:33,780 --> 00:03:36,780
it did come up a little bit so just keep

79
00:03:35,549 --> 00:03:37,920
an eye on that today something might

80
00:03:36,780 --> 00:03:40,980
happen

81
00:03:37,920 --> 00:03:45,149
do you know stop all right so in DNS up

82
00:03:40,980 --> 00:03:49,200
we had a presentation from the team

83
00:03:45,150 --> 00:03:51,000
working on the HTTP service record or

84
00:03:49,200 --> 00:03:52,649
the service binding record or whatever

85
00:03:51,000 --> 00:03:55,829
it's going to be an ending up being

86
00:03:52,650 --> 00:03:57,720
called that document has been presented

87
00:03:55,829 --> 00:04:00,690
here but now it has been adopted in the

88
00:03:57,720 --> 00:04:03,359
DNS op group it seems to be progressing

89
00:04:00,690 --> 00:04:06,060
well there's good discussion on a lot of

90
00:04:03,359 --> 00:04:08,549
the details there there's going to be a

91
00:04:06,060 --> 00:04:10,380
bike shedding on the names so if people

92
00:04:08,549 --> 00:04:14,310
have particular opinions on that you can

93
00:04:10,380 --> 00:04:17,279
chime in on that list and it looks like

94
00:04:14,310 --> 00:04:21,209
that's going to be on track to kind of

95
00:04:17,279 --> 00:04:22,679
start finalizing that format and the

96
00:04:21,209 --> 00:04:24,660
trying to get it like an early

97
00:04:22,680 --> 00:04:27,330
allocation for some of the points there

98
00:04:24,660 --> 00:04:28,740
so if you I would encourage this group

99
00:04:27,330 --> 00:04:30,510
to look at the way it's going to be

100
00:04:28,740 --> 00:04:31,980
encoding ALP n values and other things

101
00:04:30,510 --> 00:04:34,140
make sure that is

102
00:04:31,980 --> 00:04:40,920
in line with what we expect because that

103
00:04:34,140 --> 00:04:46,229
may be being locked down around now okay

104
00:04:40,920 --> 00:04:48,780
relaying an agenda bash yo ah vice asks

105
00:04:46,230 --> 00:04:51,420
if the client hints can run a little bit

106
00:04:48,780 --> 00:04:53,880
early sure thanks thanks for that he

107
00:04:51,420 --> 00:04:55,500
asked about that earlier offline I think

108
00:04:53,880 --> 00:04:57,300
we'll do client hints first when we do

109
00:04:55,500 --> 00:04:58,290
the extensions and that should hopefully

110
00:04:57,300 --> 00:05:01,350
address his needs

111
00:04:58,290 --> 00:05:03,900
since he's remote thank you

112
00:05:01,350 --> 00:05:07,530
so priorities Ian are you going to cover

113
00:05:03,900 --> 00:05:16,229
that and did you send updated slides is

114
00:05:07,530 --> 00:05:24,780
it this one priorities did you send it

115
00:05:16,230 --> 00:05:32,010
as a pull request okay hold on a second

116
00:05:24,780 --> 00:05:35,520
oh yeah apple magic is now happening

117
00:05:32,010 --> 00:05:40,980
we'll see about I don't know how do I

118
00:05:35,520 --> 00:05:42,299
turn this thing one Oh on that thing so

119
00:05:40,980 --> 00:05:50,720
this is exciting I could have put

120
00:05:42,300 --> 00:05:56,910
anything in these all right

121
00:05:50,720 --> 00:05:58,350
no yeah excuse me well my computer's

122
00:05:56,910 --> 00:06:00,660
taken over by anyone in the room awesome

123
00:05:58,350 --> 00:06:02,580
yeah so we had some continued

124
00:06:00,660 --> 00:06:05,610
discussions and then lunch after the

125
00:06:02,580 --> 00:06:08,180
last priorities discussion that ended up

126
00:06:05,610 --> 00:06:11,190
I think being quite productive and then

127
00:06:08,180 --> 00:06:12,810
the authors and contributors the sign

128
00:06:11,190 --> 00:06:14,670
team kind of tried to make as many

129
00:06:12,810 --> 00:06:16,620
updates through the draft as possible

130
00:06:14,670 --> 00:06:18,120
and because you have kindly pushed out a

131
00:06:16,620 --> 00:06:23,700
date last night which we already got

132
00:06:18,120 --> 00:06:25,470
some good feedback on a slide it's the

133
00:06:23,700 --> 00:06:27,450
same scheme we discussed before we did a

134
00:06:25,470 --> 00:06:29,520
little bit of renaming we made a little

135
00:06:27,450 --> 00:06:30,870
bit tercer with the expectation that you

136
00:06:29,520 --> 00:06:33,020
don't actually need to spell out

137
00:06:30,870 --> 00:06:35,430
incremental and urgency or progressive

138
00:06:33,020 --> 00:06:36,900
to save bytes in the wire I think Martin

139
00:06:35,430 --> 00:06:39,600
Thomson has a suggestion we can make it

140
00:06:36,900 --> 00:06:43,429
Taurus you're still but you know that's

141
00:06:39,600 --> 00:06:43,430
for for later that's kind of a TTL issue

142
00:06:43,479 --> 00:06:49,779
but the overall skein has not changed

143
00:06:44,979 --> 00:06:51,580
since earlier in the week next slide so

144
00:06:49,779 --> 00:06:53,289
I think we the gold that I draft update

145
00:06:51,580 --> 00:06:57,008
really was trying to clarify this fact

146
00:06:53,289 --> 00:06:59,469
so there's one scheme it's the same

147
00:06:57,009 --> 00:07:02,469
format but there's two ways to convey it

148
00:06:59,469 --> 00:07:04,960
if you want and end you should use a

149
00:07:02,469 --> 00:07:06,669
header and if you want hop-by-hop you

150
00:07:04,960 --> 00:07:09,909
should use a frame and those are your

151
00:07:06,669 --> 00:07:11,948
two options if you headers are slightly

152
00:07:09,909 --> 00:07:15,159
more suited to initial prioritization

153
00:07:11,949 --> 00:07:20,229
they can Betty send by either side and

154
00:07:15,159 --> 00:07:21,520
they allow you to I think I lost some

155
00:07:20,229 --> 00:07:23,370
text on that one sorry it served it over

156
00:07:21,520 --> 00:07:25,589
I does not make sense just ignore that

157
00:07:23,370 --> 00:07:27,819
frames are designed for reprioritization

158
00:07:25,589 --> 00:07:30,550
they can only be sent by the client or

159
00:07:27,819 --> 00:07:32,289
the intermediary so for example in these

160
00:07:30,550 --> 00:07:34,270
case we discussed before where you want

161
00:07:32,289 --> 00:07:36,870
and then signal what the client priority

162
00:07:34,270 --> 00:07:39,460
is but only given hop you want to say

163
00:07:36,870 --> 00:07:41,169
like you know on this hop I want a

164
00:07:39,460 --> 00:07:43,779
different priority you can use a frame

165
00:07:41,169 --> 00:07:45,698
to reprioritize the request and this

166
00:07:43,779 --> 00:07:49,210
fits exactly with the end end versus hop

167
00:07:45,699 --> 00:07:50,499
by out this diction next slide so just

168
00:07:49,210 --> 00:07:52,120
to be clear when you say sent by Clara

169
00:07:50,499 --> 00:07:54,610
intermediary you mean sent by clients

170
00:07:52,120 --> 00:07:57,729
including as an intermediary yes just in

171
00:07:54,610 --> 00:07:59,919
that one direction yeah yeah cannot it

172
00:07:57,729 --> 00:08:01,959
cannot be sent corresponding to our

173
00:07:59,919 --> 00:08:03,128
response at least as the draft is

174
00:08:01,959 --> 00:08:06,550
currently written I'm not sure if that

175
00:08:03,129 --> 00:08:08,139
restriction needs to stay but I think no

176
00:08:06,550 --> 00:08:10,870
one's come up with a killer use case for

177
00:08:08,139 --> 00:08:14,919
it so I think we'll keep it well until

178
00:08:10,870 --> 00:08:17,499
someone does so we simplified the

179
00:08:14,919 --> 00:08:19,748
negotiation using settings the current

180
00:08:17,499 --> 00:08:22,449
goal this went back to the original goal

181
00:08:19,749 --> 00:08:25,479
of the draft that was at the last IETF

182
00:08:22,449 --> 00:08:27,810
which is if it's one HTTP two priorities

183
00:08:25,479 --> 00:08:29,770
are deprecated and urgency is supported

184
00:08:27,810 --> 00:08:32,078
therefore don't send those frames

185
00:08:29,770 --> 00:08:33,279
anymore that's pretty much all the

186
00:08:32,078 --> 00:08:35,649
functionality you're getting at this

187
00:08:33,279 --> 00:08:38,349
moment future values could be defined

188
00:08:35,649 --> 00:08:40,719
for the setting if we wanted to you know

189
00:08:38,349 --> 00:08:42,669
do other things with it but for now it's

190
00:08:40,719 --> 00:08:44,110
really just there to say like I support

191
00:08:42,669 --> 00:08:47,500
the new thing I don't support the old

192
00:08:44,110 --> 00:08:51,160
thing stop sending the old thing and it

193
00:08:47,500 --> 00:08:52,950
could be sent by either side and that's

194
00:08:51,160 --> 00:08:55,839
it

195
00:08:52,950 --> 00:08:58,000
so I think the plan going forward then

196
00:08:55,839 --> 00:09:01,600
is we can expect a revised draft in the

197
00:08:58,000 --> 00:09:03,459
very near future correct or is that is

198
00:09:01,600 --> 00:09:05,140
that it was revived bust last night

199
00:09:03,459 --> 00:09:07,899
right and so that's as far as you're

200
00:09:05,140 --> 00:09:08,920
concerned that's done that encompasses

201
00:09:07,899 --> 00:09:10,510
all the changes I've talked about

202
00:09:08,920 --> 00:09:12,189
they're in there and it's it clarifies a

203
00:09:10,510 --> 00:09:15,130
variety of issues I think it's not done

204
00:09:12,190 --> 00:09:16,810
I mean of course but yeah in terms of

205
00:09:15,130 --> 00:09:20,140
reflecting the state of the discussion

206
00:09:16,810 --> 00:09:22,420
to date yes I think at least the

207
00:09:20,140 --> 00:09:24,040
technical aspects yeah okay then I think

208
00:09:22,420 --> 00:09:26,829
the plan going forward is we do a call

209
00:09:24,040 --> 00:09:29,680
for adoption on that pretty much now

210
00:09:26,829 --> 00:09:32,109
yeah and once we adopt it we start the

211
00:09:29,680 --> 00:09:35,829
discussion on oh yeah that sounds good

212
00:09:32,110 --> 00:09:37,360
Martin Thompson I think kazoo who

213
00:09:35,829 --> 00:09:38,920
answered my questions about the

214
00:09:37,360 --> 00:09:41,980
structure of the they had a field

215
00:09:38,920 --> 00:09:43,599
reasonably well I think there remains a

216
00:09:41,980 --> 00:09:47,079
little bit of question about the frame

217
00:09:43,600 --> 00:09:49,420
and the value of that I raised that

218
00:09:47,079 --> 00:09:51,670
issue on the list I saw some feedback on

219
00:09:49,420 --> 00:09:53,469
that point but I don't think that should

220
00:09:51,670 --> 00:09:55,390
stop us from adopting this work I think

221
00:09:53,470 --> 00:10:00,430
that's enough of a separable piece that

222
00:09:55,390 --> 00:10:04,810
we can ex eyesore enhancers as needed to

223
00:10:00,430 --> 00:10:06,699
clarify learn if you could so is your

224
00:10:04,810 --> 00:10:08,410
concern about the frame just kind of the

225
00:10:06,699 --> 00:10:09,790
nature of the frame or is it more that

226
00:10:08,410 --> 00:10:11,589
they're just like two mechanisms to

227
00:10:09,790 --> 00:10:13,660
communicate the same thing so that there

228
00:10:11,589 --> 00:10:16,089
are two mechanisms that that exist here

229
00:10:13,660 --> 00:10:17,829
and we've kind of know a lot about the

230
00:10:16,089 --> 00:10:19,390
first one on robben point of the

231
00:10:17,829 --> 00:10:21,550
research that you did all those

232
00:10:19,390 --> 00:10:23,709
wonderful things but the other one we've

233
00:10:21,550 --> 00:10:27,550
had for the longest time and we never

234
00:10:23,709 --> 00:10:29,199
had any any anything to back that in the

235
00:10:27,550 --> 00:10:30,640
first place and we still don't have

236
00:10:29,199 --> 00:10:34,449
anything to back that and it's extra

237
00:10:30,640 --> 00:10:36,040
complexity so so I'm coming which which

238
00:10:34,449 --> 00:10:37,870
the second way where they're wanting to

239
00:10:36,040 --> 00:10:40,959
frame the wreath the idea that you might

240
00:10:37,870 --> 00:10:42,579
send a hop by hop signal

241
00:10:40,959 --> 00:10:44,319
sorry I'm gonna cut the cue we do not

242
00:10:42,579 --> 00:10:46,209
have a lot of time to discuss that's not

243
00:10:44,320 --> 00:10:47,620
I don't wanna I wanna I don't want to go

244
00:10:46,209 --> 00:10:50,018
to get this length but I want to say

245
00:10:47,620 --> 00:10:51,339
that there is there's a question about

246
00:10:50,019 --> 00:10:54,240
that one but I don't think it should

247
00:10:51,339 --> 00:10:54,240
stop us from adopting it

248
00:10:57,070 --> 00:11:04,420
mozilla i just wanted to mention that so

249
00:11:02,350 --> 00:11:06,130
using the word deprecated that usually

250
00:11:04,420 --> 00:11:08,139
means that the whole thing is still okay

251
00:11:06,130 --> 00:11:10,839
it's just not preferred whereas i think

252
00:11:08,139 --> 00:11:15,389
you want to say it's like obsoleted or

253
00:11:10,839 --> 00:11:18,220
something oh cool

254
00:11:15,389 --> 00:11:20,740
they think the text is clear about what

255
00:11:18,220 --> 00:11:23,709
that means but yeah more clarity maybe

256
00:11:20,740 --> 00:11:25,389
you did briefly please reppin ya roller

257
00:11:23,709 --> 00:11:26,920
marks I just want to clarify that we now

258
00:11:25,389 --> 00:11:28,600
also use the frame for the whole by hope

259
00:11:26,920 --> 00:11:30,910
semantics so it's no longer just for

260
00:11:28,600 --> 00:11:32,230
reprioritization it's also used for

261
00:11:30,910 --> 00:11:34,719
other things that we spent a long time

262
00:11:32,230 --> 00:11:35,889
discussing in the design team and if you

263
00:11:34,720 --> 00:11:38,649
remove the frame we would have to go

264
00:11:35,889 --> 00:11:42,069
back and figure out that which yes if

265
00:11:38,649 --> 00:11:43,690
anyone wants to do so agreed I want to

266
00:11:42,069 --> 00:11:45,219
stress that this is a proposal from a

267
00:11:43,690 --> 00:11:46,480
design team I know a lot of the folks

268
00:11:45,220 --> 00:11:48,670
who are very active were involved in

269
00:11:46,480 --> 00:11:50,079
that which is great but it doesn't mean

270
00:11:48,670 --> 00:11:51,550
there's any kind of consensus reflected

271
00:11:50,079 --> 00:11:53,800
in that and when we do a call for

272
00:11:51,550 --> 00:11:55,449
adoption that's a significant affine

273
00:11:53,800 --> 00:11:56,889
that the working group is working on

274
00:11:55,449 --> 00:11:58,180
this item now not necessarily that we

275
00:11:56,889 --> 00:12:00,069
have consensus on the contents of the

276
00:11:58,180 --> 00:12:01,180
document so that's the frame of one we

277
00:12:00,069 --> 00:12:03,939
should go into this of course we're

278
00:12:01,180 --> 00:12:05,380
gonna discuss the issues we talked

279
00:12:03,940 --> 00:12:07,839
before about the possibility of an

280
00:12:05,380 --> 00:12:09,279
interim meeting to hammer this out had I

281
00:12:07,839 --> 00:12:10,779
had a few hallway chats and we talked

282
00:12:09,279 --> 00:12:12,310
about that I don't know that that's

283
00:12:10,779 --> 00:12:14,410
gonna be necessary at this time and

284
00:12:12,310 --> 00:12:15,880
we've talked about if we do you know I

285
00:12:14,410 --> 00:12:18,219
think everyone once gets us up pretty

286
00:12:15,880 --> 00:12:21,310
quickly yes a quick and for other

287
00:12:18,220 --> 00:12:23,529
reasons but if we're talking that if we

288
00:12:21,310 --> 00:12:25,750
do need to have some sort of meeting we

289
00:12:23,529 --> 00:12:27,610
might try one or a series of virtual

290
00:12:25,750 --> 00:12:29,470
interims where we do this in the phone

291
00:12:27,610 --> 00:12:30,639
and I think we can maybe exploit the

292
00:12:29,470 --> 00:12:33,370
fact that a lot of these folks do know

293
00:12:30,639 --> 00:12:34,959
each other to try that out

294
00:12:33,370 --> 00:12:37,240
so if you have any feedback on that talk

295
00:12:34,959 --> 00:12:38,589
to Tommy myself but that's the plan

296
00:12:37,240 --> 00:12:41,800
going is is if it's needed that's

297
00:12:38,589 --> 00:12:46,060
probably what we will do all right thank

298
00:12:41,800 --> 00:12:47,439
you very much you so don't poke those

299
00:12:46,060 --> 00:12:51,369
tickets to Zurich if you do if this is

300
00:12:47,439 --> 00:12:53,230
all you're interested in okay my

301
00:12:51,370 --> 00:12:56,550
computer's still open for attack so I

302
00:12:53,230 --> 00:12:56,550
mean just yeah there we go

303
00:12:57,600 --> 00:13:05,199
next up extension drafts so we said we

304
00:13:02,050 --> 00:13:09,779
would go with yo first yo are you with

305
00:13:05,199 --> 00:13:09,779
us can you requests to be seen

306
00:13:10,080 --> 00:13:36,800
let's do it here paging your voice let's

307
00:13:27,960 --> 00:13:40,230
see if he's huh oh this computer is or

308
00:13:36,800 --> 00:13:45,990
maybe frozen although it's still

309
00:13:40,230 --> 00:13:49,800
reflecting video it is so has he

310
00:13:45,990 --> 00:13:50,850
requested yet or okay all right why

311
00:13:49,800 --> 00:13:57,270
don't we move to another one while he

312
00:13:50,850 --> 00:14:05,570
figures that out then so if we go to the

313
00:13:57,270 --> 00:14:07,400
listing let me just go straight down

314
00:14:05,570 --> 00:14:09,960
digest headers

315
00:14:07,400 --> 00:14:12,530
that's another remote presentation from

316
00:14:09,960 --> 00:14:16,170
Roberto Roberto are you with us

317
00:14:12,530 --> 00:14:35,010
sorry oh it's you oh okay sorry come

318
00:14:16,170 --> 00:14:38,610
join us the of will do you right after

319
00:14:35,010 --> 00:14:40,710
digest okay so I realize five minutes

320
00:14:38,610 --> 00:14:42,780
ago there's a slight slight ordering

321
00:14:40,710 --> 00:14:45,930
error in this so here's the slides

322
00:14:42,780 --> 00:14:47,579
finished way before they do so I fix out

323
00:14:45,930 --> 00:14:50,339
with the PR but I can just do this just

324
00:14:47,580 --> 00:14:53,160
to be aware of it so this is yeah I just

325
00:14:50,340 --> 00:14:57,270
had is which was called resource digest

326
00:14:53,160 --> 00:14:57,650
which used to be RFC 30 to 30 next slide

327
00:14:57,270 --> 00:15:00,750
please

328
00:14:57,650 --> 00:15:02,370
so just just a brief recap if you have

329
00:15:00,750 --> 00:15:06,540
not yet read the draft or forgotten it

330
00:15:02,370 --> 00:15:09,060
this is just a way to provide a hash on

331
00:15:06,540 --> 00:15:10,800
a request for a response header so I got

332
00:15:09,060 --> 00:15:13,140
this digest had a in there you would

333
00:15:10,800 --> 00:15:15,689
signal that I just algorithm that you're

334
00:15:13,140 --> 00:15:18,030
using and then the encoded digest output

335
00:15:15,690 --> 00:15:22,590
what that is is the application of that

336
00:15:18,030 --> 00:15:23,819
algorithm over a the representation say

337
00:15:22,590 --> 00:15:26,340
or some part of

338
00:15:23,820 --> 00:15:28,230
body of the or the payload of the

339
00:15:26,340 --> 00:15:31,470
request or response but the format of

340
00:15:28,230 --> 00:15:32,880
that thing is dependent upon the digest

341
00:15:31,470 --> 00:15:36,180
algorithm that you view so it's

342
00:15:32,880 --> 00:15:38,430
typically based 64 or some other thing

343
00:15:36,180 --> 00:15:40,099
just something to keep in mind as we go

344
00:15:38,430 --> 00:15:43,410
through next slide please

345
00:15:40,100 --> 00:15:48,180
so last time around when we presented in

346
00:15:43,410 --> 00:15:50,160
Montreal Roy asked for some use cases we

347
00:15:48,180 --> 00:15:53,640
haven't put them explicitly in the draft

348
00:15:50,160 --> 00:15:54,810
we've put in like broad ideas of how it

349
00:15:53,640 --> 00:15:56,790
could be used and that's something I'll

350
00:15:54,810 --> 00:15:58,020
come on to later but today as far as

351
00:15:56,790 --> 00:16:00,740
we're aware these are the kinds of

352
00:15:58,020 --> 00:16:03,689
things that are using digest mice

353
00:16:00,740 --> 00:16:05,580
signatures which is an issue that will

354
00:16:03,690 --> 00:16:09,260
it's all a little bit more and things

355
00:16:05,580 --> 00:16:13,470
like banking api's next slide please so

356
00:16:09,260 --> 00:16:14,939
we had drafted o0 and in since Montreal

357
00:16:13,470 --> 00:16:16,170
we've been working on some updates we

358
00:16:14,940 --> 00:16:17,880
had some open issues that we presented

359
00:16:16,170 --> 00:16:22,560
last time we've been trying to address

360
00:16:17,880 --> 00:16:23,640
those we not fix them all but we have

361
00:16:22,560 --> 00:16:27,510
this draft

362
00:16:23,640 --> 00:16:30,540
I took a stubborn editorial sweep before

363
00:16:27,510 --> 00:16:32,760
we cut draft oh one we're aware there's

364
00:16:30,540 --> 00:16:34,770
still some editorial issues we'd like to

365
00:16:32,760 --> 00:16:35,750
resolve the readability of the document

366
00:16:34,770 --> 00:16:38,970
could be improved

367
00:16:35,750 --> 00:16:40,830
so I really appreciate any feedback on

368
00:16:38,970 --> 00:16:44,970
that but if people don't want to take a

369
00:16:40,830 --> 00:16:47,640
full read of this document that's fine

370
00:16:44,970 --> 00:16:49,050
because it's difficult but if you've got

371
00:16:47,640 --> 00:16:50,819
an opinion on some of the issues we

372
00:16:49,050 --> 00:16:52,530
present I'd really appreciate feedback

373
00:16:50,820 --> 00:16:55,200
on that because we can resolve those and

374
00:16:52,530 --> 00:16:57,660
then then figure out how best to reword

375
00:16:55,200 --> 00:16:59,540
this document or make things better so I

376
00:16:57,660 --> 00:17:01,890
just wanted to deal with that first the

377
00:16:59,540 --> 00:17:04,319
steps of the changes we've made very

378
00:17:01,890 --> 00:17:06,810
quickly so one the first is clarifying

379
00:17:04,319 --> 00:17:08,879
state changing methods and the second

380
00:17:06,810 --> 00:17:11,579
was a reboot of the digest algorithm I

381
00:17:08,880 --> 00:17:13,890
on a table and then the third one was a

382
00:17:11,579 --> 00:17:16,619
consideration section effectively for

383
00:17:13,890 --> 00:17:18,750
the relationship between digest and s RI

384
00:17:16,619 --> 00:17:21,688
which stands for sub resource integrity

385
00:17:18,750 --> 00:17:23,910
this was opened by MA and basically

386
00:17:21,689 --> 00:17:28,020
during the Montreal thing I don't know

387
00:17:23,910 --> 00:17:30,630
if what we have there is everything we

388
00:17:28,020 --> 00:17:32,610
need but it is about the best I could do

389
00:17:30,630 --> 00:17:36,310
given the discussion and the information

390
00:17:32,610 --> 00:17:38,620
available next slide please

391
00:17:36,310 --> 00:17:40,600
so to go through these what does

392
00:17:38,620 --> 00:17:43,870
clarifying state changing methods mean

393
00:17:40,600 --> 00:17:45,909
at issue 853 and basically what we've

394
00:17:43,870 --> 00:17:49,270
said is post and patch requests convey

395
00:17:45,910 --> 00:17:52,360
actions not partial representations so a

396
00:17:49,270 --> 00:17:56,080
digest header on a post or patch request

397
00:17:52,360 --> 00:17:59,770
is calculated or computed over the

398
00:17:56,080 --> 00:18:02,169
representation data of the actions there

399
00:17:59,770 --> 00:18:03,940
and in response is it's called deleted

400
00:18:02,170 --> 00:18:06,100
on the selected representation of the

401
00:18:03,940 --> 00:18:08,020
referenced resource this might be the

402
00:18:06,100 --> 00:18:11,080
enclosed one or the selected

403
00:18:08,020 --> 00:18:13,240
representation for example in the case

404
00:18:11,080 --> 00:18:16,480
of no content what does any of that mean

405
00:18:13,240 --> 00:18:19,570
if you go to the next slide we have a

406
00:18:16,480 --> 00:18:23,050
post example so we're basing some stuff

407
00:18:19,570 --> 00:18:26,020
that some Jason and we we tell the civil

408
00:18:23,050 --> 00:18:28,899
what we would accept but we were posting

409
00:18:26,020 --> 00:18:32,280
this thing title a new title and that

410
00:18:28,900 --> 00:18:34,050
request sorry that I just had a is

411
00:18:32,280 --> 00:18:36,310
calculated on the enclosed

412
00:18:34,050 --> 00:18:38,230
representation of the request the

413
00:18:36,310 --> 00:18:42,010
response that comes back as a different

414
00:18:38,230 --> 00:18:43,840
ash because it's calculated on the

415
00:18:42,010 --> 00:18:47,020
enclosed representation in the response

416
00:18:43,840 --> 00:18:49,120
which is a completely different thing if

417
00:18:47,020 --> 00:18:52,330
you go to the next one this is patch

418
00:18:49,120 --> 00:18:54,909
this is very similar we're submitting a

419
00:18:52,330 --> 00:18:57,730
Jason patch which is RFC seven three

420
00:18:54,910 --> 00:19:02,160
nine six we want a similar kind of

421
00:18:57,730 --> 00:19:08,530
response but the thing we're sending is

422
00:19:02,160 --> 00:19:09,940
the same same payload as the post but

423
00:19:08,530 --> 00:19:12,550
we're given the instruction to patch

424
00:19:09,940 --> 00:19:15,070
document and therefore the response we

425
00:19:12,550 --> 00:19:19,270
get back in this case is different than

426
00:19:15,070 --> 00:19:23,280
both the patch document and the

427
00:19:19,270 --> 00:19:27,040
representation from the post example

428
00:19:23,280 --> 00:19:28,780
clarification julian Raschke says we

429
00:19:27,040 --> 00:19:31,030
should be clear that post and patch are

430
00:19:28,780 --> 00:19:36,280
not special cases this should be true

431
00:19:31,030 --> 00:19:39,610
for all methods that's that's good you

432
00:19:36,280 --> 00:19:42,430
beat me by two slides so if we go on to

433
00:19:39,610 --> 00:19:44,679
the final example here this is with the

434
00:19:42,430 --> 00:19:47,050
204 so what this is trying to show is

435
00:19:44,680 --> 00:19:49,660
it's exactly the same digest header as

436
00:19:47,050 --> 00:19:50,379
as the previous patch example in the

437
00:19:49,660 --> 00:19:52,779
wrist

438
00:19:50,380 --> 00:19:54,600
but we didn't have any payload we didn't

439
00:19:52,779 --> 00:19:56,980
need one so this is one of the

440
00:19:54,600 --> 00:19:59,889
advantages of digresses you can inside

441
00:19:56,980 --> 00:20:01,720
this thing so that said haven't gone to

442
00:19:59,890 --> 00:20:03,909
the FO given some examples for posting

443
00:20:01,720 --> 00:20:06,340
patch we gone to the next slide

444
00:20:03,909 --> 00:20:07,690
Julian said I don't think that we it

445
00:20:06,340 --> 00:20:09,070
would be a good idea to vary the

446
00:20:07,690 --> 00:20:11,200
semantics based on the request method

447
00:20:09,070 --> 00:20:14,470
and so we can't address this with some

448
00:20:11,200 --> 00:20:16,330
rewording but should we yeah and yeah

449
00:20:14,470 --> 00:20:17,380
this is Roberto's comment does it

450
00:20:16,330 --> 00:20:22,299
present

451
00:20:17,380 --> 00:20:25,270
I guess is it present on sorry methods

452
00:20:22,299 --> 00:20:27,370
exist today or maybe invented in the

453
00:20:25,270 --> 00:20:29,649
future convey a partial representation

454
00:20:27,370 --> 00:20:31,029
and if so the digest should always be

455
00:20:29,649 --> 00:20:33,668
competed on the complete representation

456
00:20:31,029 --> 00:20:34,630
that's probably some form of the text we

457
00:20:33,669 --> 00:20:39,520
might put in there

458
00:20:34,630 --> 00:20:40,750
so we we can come back to this but if

459
00:20:39,520 --> 00:20:47,620
you go to the next slide

460
00:20:40,750 --> 00:20:51,100
ha no next like the discussion doesn't

461
00:20:47,620 --> 00:20:53,439
end there as you all see so they changed

462
00:20:51,100 --> 00:20:57,459
to this is is really simple stuff we

463
00:20:53,440 --> 00:21:00,159
have basically as part of the changes in

464
00:20:57,460 --> 00:21:03,070
this document compared to the URF see

465
00:21:00,159 --> 00:21:04,779
that we're updating we want to obsolete

466
00:21:03,070 --> 00:21:06,639
or deprecated some algorithm so we just

467
00:21:04,779 --> 00:21:09,580
update the table to have a new column

468
00:21:06,640 --> 00:21:12,760
that can contain this status and we're

469
00:21:09,580 --> 00:21:14,799
deprecating md5 and obsoleting Sean

470
00:21:12,760 --> 00:21:19,240
adlet 32 this is something we actually

471
00:21:14,799 --> 00:21:24,299
considered when getting the document

472
00:21:19,240 --> 00:21:26,740
adopted and changing from the well

473
00:21:24,299 --> 00:21:28,418
anyway we didn't because Mark told us

474
00:21:26,740 --> 00:21:32,409
don't do that and then to try and

475
00:21:28,419 --> 00:21:34,570
address it as as part of 0 1 2 0 0 0 2 0

476
00:21:32,409 --> 00:21:35,919
1 update so that actually we could

477
00:21:34,570 --> 00:21:37,689
incorporate the feedback of the working

478
00:21:35,919 --> 00:21:40,390
group and all that stuff so that was

479
00:21:37,690 --> 00:21:41,260
fine we've done some of this stuff I

480
00:21:40,390 --> 00:21:44,020
think it's all pretty straightforward

481
00:21:41,260 --> 00:21:49,090
change 3 the next slide

482
00:21:44,020 --> 00:21:53,080
oh well you skip a slide

483
00:21:49,090 --> 00:21:56,199
okay well we'll go onto the open issues

484
00:21:53,080 --> 00:21:57,850
that we we need input on I can go

485
00:21:56,200 --> 00:21:59,679
through them all I don't know how we're

486
00:21:57,850 --> 00:22:01,299
doing at the time we probably don't need

487
00:21:59,679 --> 00:22:03,340
to discuss all of them today I just want

488
00:22:01,299 --> 00:22:07,030
to give people some awareness of the

489
00:22:03,340 --> 00:22:09,010
challenges were facing if you got any

490
00:22:07,030 --> 00:22:10,510
strong inspiration on helping us get to

491
00:22:09,010 --> 00:22:15,010
that answer it'd be fantastic

492
00:22:10,510 --> 00:22:18,910
so if you go to the next slide this is

493
00:22:15,010 --> 00:22:21,970
cash digest and cash validators you've

494
00:22:18,910 --> 00:22:23,560
got RC 3213 stating that the instance is

495
00:22:21,970 --> 00:22:25,600
specified by the request URI

496
00:22:23,560 --> 00:22:30,040
and any cash valid data contained in the

497
00:22:25,600 --> 00:22:34,780
message but we've updated digests to use

498
00:22:30,040 --> 00:22:36,760
the more recent ins in 7230 X so rather

499
00:22:34,780 --> 00:22:39,670
than cash validator we say just

500
00:22:36,760 --> 00:22:41,470
validator but how do validate to specify

501
00:22:39,670 --> 00:22:48,520
a resource and is specify their

502
00:22:41,470 --> 00:22:51,400
corrective mark so um you know listening

503
00:22:48,520 --> 00:22:52,690
to the issues you haven't here it seems

504
00:22:51,400 --> 00:22:55,750
to me that part of the mismatch here

505
00:22:52,690 --> 00:22:58,000
might be that this document is 32 30 was

506
00:22:55,750 --> 00:23:02,110
partly instant status work and that was

507
00:22:58,000 --> 00:23:04,420
based upon a terminology and and an

508
00:23:02,110 --> 00:23:06,969
architecture of HTTP that was very

509
00:23:04,420 --> 00:23:10,480
specific to instance digests and we did

510
00:23:06,970 --> 00:23:14,140
a lot of work in HP Biss to move further

511
00:23:10,480 --> 00:23:16,930
away from that and I'm wondering if Roy

512
00:23:14,140 --> 00:23:20,380
and and Julian and maybe myself but more

513
00:23:16,930 --> 00:23:22,600
Roy can help align the terminology in

514
00:23:20,380 --> 00:23:23,890
kearney HP this with what's happening

515
00:23:22,600 --> 00:23:25,929
here because I think that would resolve

516
00:23:23,890 --> 00:23:27,640
actually a lot of these issues does that

517
00:23:25,930 --> 00:23:29,260
make sense to you Roy because like for

518
00:23:27,640 --> 00:23:31,210
example here this seems like left

519
00:23:29,260 --> 00:23:34,390
selected representation it shouldn't be

520
00:23:31,210 --> 00:23:37,030
about the cache fellow there ah geez

521
00:23:34,390 --> 00:23:39,400
I mean it would it depends on what we

522
00:23:37,030 --> 00:23:41,290
were talking about so we're talking

523
00:23:39,400 --> 00:23:44,140
about what would be on the back end of

524
00:23:41,290 --> 00:23:46,629
the server that you're doing a cache or

525
00:23:44,140 --> 00:23:48,160
digest on the back end of what the

526
00:23:46,630 --> 00:23:50,020
selected representation is then yes you

527
00:23:48,160 --> 00:23:51,190
used like the representation if you're

528
00:23:50,020 --> 00:23:52,780
talking about what you're sending in the

529
00:23:51,190 --> 00:23:57,190
payload then you would talk about

530
00:23:52,780 --> 00:23:58,930
something else yeah I suspect that a lot

531
00:23:57,190 --> 00:24:02,740
of terminology you're looking for might

532
00:23:58,930 --> 00:24:05,800
already be buried in HTTP this and core

533
00:24:02,740 --> 00:24:07,660
okay and be clear that that's the the

534
00:24:05,800 --> 00:24:09,550
whole intention of this document update

535
00:24:07,660 --> 00:24:12,190
is to get us a line so people aren't

536
00:24:09,550 --> 00:24:15,040
questioning this and we can just get it

537
00:24:12,190 --> 00:24:16,780
and get it done and not need to revisit

538
00:24:15,040 --> 00:24:20,110
I think we need to help yeah

539
00:24:16,780 --> 00:24:25,090
so I'd be greatly appreciated yeah so

540
00:24:20,110 --> 00:24:27,100
next slide is using digestion signatures

541
00:24:25,090 --> 00:24:30,340
so one of the main uses for digests is

542
00:24:27,100 --> 00:24:33,399
with signatures we provide very minimal

543
00:24:30,340 --> 00:24:35,409
guidance saying that you know use some

544
00:24:33,400 --> 00:24:37,210
transport integrity signed data and

545
00:24:35,410 --> 00:24:39,130
metadata avoid the broken algorithms

546
00:24:37,210 --> 00:24:40,050
when you're generating the digest but

547
00:24:39,130 --> 00:24:43,000
that's it

548
00:24:40,050 --> 00:24:47,010
some people are saying maybe we we could

549
00:24:43,000 --> 00:24:49,930
provide further guidance on signatures

550
00:24:47,010 --> 00:24:53,770
especially related to representation

551
00:24:49,930 --> 00:24:56,830
metadata that effects the selected

552
00:24:53,770 --> 00:24:58,389
representation so what this means is if

553
00:24:56,830 --> 00:25:00,159
you're going to calculate a signature

554
00:24:58,390 --> 00:25:02,560
over some metadata fields to protect

555
00:25:00,160 --> 00:25:06,310
them you should and that includes the

556
00:25:02,560 --> 00:25:11,790
digest you should include the other

557
00:25:06,310 --> 00:25:14,620
headers that relate to that digest but I

558
00:25:11,790 --> 00:25:18,040
don't feel strongly on if we really need

559
00:25:14,620 --> 00:25:20,860
to do this in this document itself yeah

560
00:25:18,040 --> 00:25:22,180
none Thompson said that the signature

561
00:25:20,860 --> 00:25:23,409
works gonna be hard enough already and

562
00:25:22,180 --> 00:25:24,850
they're gonna have to grapple with all

563
00:25:23,410 --> 00:25:26,320
those problems content lengths by the

564
00:25:24,850 --> 00:25:28,719
way is a really bad example because

565
00:25:26,320 --> 00:25:31,450
that's typically included in the hash in

566
00:25:28,720 --> 00:25:36,900
other ways so you don't worry about

567
00:25:31,450 --> 00:25:38,770
thank you next slide please

568
00:25:36,900 --> 00:25:41,140
somebody asks could we add a threat

569
00:25:38,770 --> 00:25:43,300
model this might be in Jeffery I'm not

570
00:25:41,140 --> 00:25:44,560
sure is that useful should we put it in

571
00:25:43,300 --> 00:25:47,680
the ID we've got some kind of their

572
00:25:44,560 --> 00:25:50,889
texts on a PR somewhere so it's really

573
00:25:47,680 --> 00:25:53,530
just trying to understand can we just

574
00:25:50,890 --> 00:25:54,850
close it not needed or maybe the text

575
00:25:53,530 --> 00:25:56,350
designer issue we could move on to your

576
00:25:54,850 --> 00:25:59,590
PR and then put it out for review or

577
00:25:56,350 --> 00:26:01,120
consider some broader thing which is

578
00:25:59,590 --> 00:26:02,830
relate to the signatures which we just

579
00:26:01,120 --> 00:26:03,909
said we didn't want to do yeah on

580
00:26:02,830 --> 00:26:07,090
Thompson again this is going to be a

581
00:26:03,910 --> 00:26:09,220
little bit tricky to do there is sort of

582
00:26:07,090 --> 00:26:10,600
one level where you simply say that I

583
00:26:09,220 --> 00:26:12,580
want to make sure that this hasn't been

584
00:26:10,600 --> 00:26:13,810
modified in transit but if you start

585
00:26:12,580 --> 00:26:15,460
getting to the threat model proper then

586
00:26:13,810 --> 00:26:17,320
you have to worry about the signature

587
00:26:15,460 --> 00:26:19,900
and the and the downstream uses of all

588
00:26:17,320 --> 00:26:24,040
of this so I would prefer not to do

589
00:26:19,900 --> 00:26:25,780
anything on this particular one it's yes

590
00:26:24,040 --> 00:26:27,220
concentrate on building the building

591
00:26:25,780 --> 00:26:29,840
block and then we'll worry about how

592
00:26:27,220 --> 00:26:33,169
that's composed into various weapons

593
00:26:29,840 --> 00:26:34,309
later on okay thank you our next slide

594
00:26:33,169 --> 00:26:36,409
please

595
00:26:34,309 --> 00:26:37,879
this one is more of a stylistic thing I

596
00:26:36,409 --> 00:26:41,059
guess digests have an empty

597
00:26:37,880 --> 00:26:42,799
representation it sounds simple but you

598
00:26:41,059 --> 00:26:46,100
know we're trying to add some examples

599
00:26:42,799 --> 00:26:49,039
into this document like my lower them so

600
00:26:46,100 --> 00:26:50,840
who were to do that just because you've

601
00:26:49,039 --> 00:26:52,879
got an empty representation doesn't mean

602
00:26:50,840 --> 00:26:56,178
that the thing that sent on the wire is

603
00:26:52,880 --> 00:26:58,250
empty and that affects the digestive al

604
00:26:56,179 --> 00:27:01,279
you as is calculated so here's two

605
00:26:58,250 --> 00:27:04,100
examples that you know we were taking an

606
00:27:01,279 --> 00:27:06,169
empty string this is an empty string

607
00:27:04,100 --> 00:27:08,240
that's compressed with something and

608
00:27:06,169 --> 00:27:11,390
they come out as two different digests

609
00:27:08,240 --> 00:27:15,429
so that this can happen but should we

610
00:27:11,390 --> 00:27:18,740
basically create a I don't know the

611
00:27:15,429 --> 00:27:20,120
canonical and encoding of this thing

612
00:27:18,740 --> 00:27:23,090
that people can use when they're trying

613
00:27:20,120 --> 00:27:29,299
to figure this out or do we just don't

614
00:27:23,090 --> 00:27:32,449
care leave it Thompson again it is what

615
00:27:29,299 --> 00:27:35,320
it is if the selected representation or

616
00:27:32,450 --> 00:27:39,559
what representing rent owed better

617
00:27:35,320 --> 00:27:41,418
payload is is a certain number of bytes

618
00:27:39,559 --> 00:27:43,639
then it's a certain number of bytes and

619
00:27:41,419 --> 00:27:46,159
in the compressed case when you compress

620
00:27:43,640 --> 00:27:48,230
the empty string you get something so

621
00:27:46,159 --> 00:27:51,200
obviously that's otherwise you wouldn't

622
00:27:48,230 --> 00:27:53,270
have this problem so I don't think we

623
00:27:51,200 --> 00:27:54,380
need to worry about it okay I know that

624
00:27:53,270 --> 00:27:56,570
we have something in the in the mice

625
00:27:54,380 --> 00:28:00,490
draft that specifically addresses the

626
00:27:56,570 --> 00:28:03,080
empty case but that's because that has

627
00:28:00,490 --> 00:28:05,149
specific requirements around that yeah

628
00:28:03,080 --> 00:28:07,158
and I'm like I'm not super familiar with

629
00:28:05,149 --> 00:28:08,658
this issue if you go on there we do link

630
00:28:07,159 --> 00:28:10,970
to the discussion that happened between

631
00:28:08,659 --> 00:28:13,250
I think you jeffrey and david benjamin

632
00:28:10,970 --> 00:28:16,789
and some of those things so i think

633
00:28:13,250 --> 00:28:18,549
that's a different problem yeah yeah so

634
00:28:16,789 --> 00:28:23,210
next slide please

635
00:28:18,549 --> 00:28:24,529
the this is a fun one the RSC 3230 the

636
00:28:23,210 --> 00:28:27,679
one we're updating states are following

637
00:28:24,529 --> 00:28:29,450
and and we just import that text

638
00:28:27,679 --> 00:28:30,890
verbatim into the updates first so for

639
00:28:29,450 --> 00:28:33,919
some algorithms one or more parameters

640
00:28:30,890 --> 00:28:37,100
may be supplied here's an example of the

641
00:28:33,919 --> 00:28:40,299
digest algorithm and it says the BNF for

642
00:28:37,100 --> 00:28:42,949
parameter is as using blah but that

643
00:28:40,299 --> 00:28:43,809
document doesn't drive any example

644
00:28:42,950 --> 00:28:46,509
anywhere

645
00:28:43,809 --> 00:28:50,529
and the reference to the BNF there needs

646
00:28:46,509 --> 00:28:51,639
updating anyway so we should have

647
00:28:50,529 --> 00:28:53,259
something free to reference in court

648
00:28:51,639 --> 00:28:55,269
we've recently I think closed an issue

649
00:28:53,259 --> 00:28:58,029
on that okay that's cool

650
00:28:55,269 --> 00:29:01,690
next slide please there is no next slide

651
00:28:58,029 --> 00:29:08,200
Oh with them that's it

652
00:29:01,690 --> 00:29:10,059
Oh hold on yeah yeah thanks all right

653
00:29:08,200 --> 00:29:12,370
thank you very much keep it up

654
00:29:10,059 --> 00:29:14,110
I think this the spec I've seen a lot of

655
00:29:12,370 --> 00:29:16,449
activity the editors have been very busy

656
00:29:14,110 --> 00:29:17,559
it's great I think it's gonna get to a

657
00:29:16,450 --> 00:29:19,600
stage scene where it's gonna need what a

658
00:29:17,559 --> 00:29:21,070
review is I think people get engaged on

659
00:29:19,600 --> 00:29:24,100
the issues now wants to do a bit more

660
00:29:21,070 --> 00:29:27,490
editorial work we need better review

661
00:29:24,100 --> 00:29:30,789
from folks Jabar really I think Roberto

662
00:29:27,490 --> 00:29:33,460
Puli would like to jump the queue to

663
00:29:30,789 --> 00:29:35,320
speak if possible before you have

664
00:29:33,460 --> 00:29:37,720
presents if we can do it quickly we're

665
00:29:35,320 --> 00:29:39,009
running behind time I don't know how to

666
00:29:37,720 --> 00:29:40,210
do that on your just let them through

667
00:29:39,009 --> 00:29:41,440
them yeah you know if we're gonna get

668
00:29:40,210 --> 00:29:47,740
rid of you but we'll get you right back

669
00:29:41,440 --> 00:29:50,529
honest okay can you pick up

670
00:29:47,740 --> 00:29:51,940
can you oh yeah I try depressing again

671
00:29:50,529 --> 00:29:58,269
innit oh wait sorry okay

672
00:29:51,940 --> 00:30:11,279
Oh Roberto queue up again please it's

673
00:29:58,269 --> 00:30:11,279
all about latency Roberto okay

674
00:30:15,660 --> 00:30:32,820
give it a try then okay he won let's go

675
00:30:31,590 --> 00:30:49,860
ahead and let y'all talk about client

676
00:30:32,820 --> 00:30:53,700
Hansen and we can a few changes to the

677
00:30:49,860 --> 00:30:55,740
draft that has happened between 0-7

678
00:30:53,700 --> 00:31:00,120
which I think was published in back in

679
00:30:55,740 --> 00:31:02,820
March we clarified the define that the

680
00:31:00,120 --> 00:31:05,189
define header the response headers key

681
00:31:02,820 --> 00:31:07,860
references the key references with

682
00:31:05,190 --> 00:31:10,860
bangerang and replace the Aidan F

683
00:31:07,860 --> 00:31:14,760
pressured hundred none of that was

684
00:31:10,860 --> 00:31:18,750
particularly controversial as a result

685
00:31:14,760 --> 00:31:21,780
of feedback that we got at the ITF 105

686
00:31:18,750 --> 00:31:27,000
we remove the explicit except CH

687
00:31:21,780 --> 00:31:31,170
lifetime header and replaced it with

688
00:31:27,000 --> 00:31:39,860
implicit registration that is tied to

689
00:31:31,170 --> 00:31:42,990
the life of session cookies next slide

690
00:31:39,860 --> 00:31:48,260
another PR that has just landed

691
00:31:42,990 --> 00:31:52,820
as a result of feedback is to add the

692
00:31:48,260 --> 00:31:57,350
basic outline the bite-size cost of

693
00:31:52,820 --> 00:32:02,580
adding hints and therefore cautioning

694
00:31:57,350 --> 00:32:05,790
implementers as well as servers that you

695
00:32:02,580 --> 00:32:10,669
know hence have a cog and therefore they

696
00:32:05,790 --> 00:32:16,230
should be used in moderation next slide

697
00:32:10,670 --> 00:32:22,440
and we have a couple of and the key ours

698
00:32:16,230 --> 00:32:27,090
but I believe recruit to being done but

699
00:32:22,440 --> 00:32:29,330
I would love the group's opinion on them

700
00:32:27,090 --> 00:32:32,959
and what more is needed there

701
00:32:29,330 --> 00:32:39,730
one is detailed I mentioned of

702
00:32:32,960 --> 00:32:39,730
information exposure this is a PR that

703
00:32:40,900 --> 00:32:50,720
outlines exactly what categories of

704
00:32:47,450 --> 00:32:53,030
information can be exposed in client

705
00:32:50,720 --> 00:32:57,940
hints what categories of information

706
00:32:53,030 --> 00:33:01,310
must not be exposed as a client hint and

707
00:32:57,940 --> 00:33:03,320
define what implementers and feature

708
00:33:01,310 --> 00:33:05,750
that we'll be using this infrastructure

709
00:33:03,320 --> 00:33:12,649
and I shouldn't take into account when

710
00:33:05,750 --> 00:33:17,380
doing that um so I believe this is close

711
00:33:12,650 --> 00:33:22,100
to being done but I'd love opinions from

712
00:33:17,380 --> 00:33:24,680
from the group and particularly Martin

713
00:33:22,100 --> 00:33:27,199
Thompson I know like you've been active

714
00:33:24,680 --> 00:33:29,900
on this issue I'd love to know if there

715
00:33:27,200 --> 00:33:34,030
is anything else that needs to be done

716
00:33:29,900 --> 00:33:34,030
there so that we can wrap it up

717
00:33:34,190 --> 00:34:03,040
the discussion essentially we think that

718
00:34:13,179 --> 00:34:29,270
20 and you make sure that those headers

719
00:34:16,670 --> 00:34:34,150
be used and we are aware of the fact

720
00:34:29,270 --> 00:34:34,150
this prevents

721
00:34:38,719 --> 00:34:48,210
[Music]

722
00:34:40,840 --> 00:34:50,410
sorry got ya 1 Thomson yeah thanks

723
00:34:48,210 --> 00:34:53,320
thanks for summarizing that this is a

724
00:34:50,409 --> 00:34:56,290
difficult one and I I think it's

725
00:34:53,320 --> 00:34:58,420
probably I can probably try to explain

726
00:34:56,290 --> 00:35:02,259
where I'm at to up to on on the thinking

727
00:34:58,420 --> 00:35:04,240
here the sec prefix prevents sites from

728
00:35:02,260 --> 00:35:05,710
setting this value themselves only the

729
00:35:04,240 --> 00:35:07,569
browser can do it that's really the

730
00:35:05,710 --> 00:35:10,780
property that we're looking for and part

731
00:35:07,570 --> 00:35:13,030
of part of the the concern that we have

732
00:35:10,780 --> 00:35:14,380
is that if we allow sites to set

733
00:35:13,030 --> 00:35:18,310
arbitrary headers particularly in

734
00:35:14,380 --> 00:35:20,260
cross-origin requests then the server at

735
00:35:18,310 --> 00:35:22,420
the other end may be unprepared to

736
00:35:20,260 --> 00:35:26,230
receive those particular header fields

737
00:35:22,420 --> 00:35:28,110
it may do something that maybe we are

738
00:35:26,230 --> 00:35:30,400
uncomfortable with the consequences of

739
00:35:28,110 --> 00:35:34,600
it might be a security vulnerability who

740
00:35:30,400 --> 00:35:38,260
knows and that is coupled here with the

741
00:35:34,600 --> 00:35:40,210
desire to have these header fields

742
00:35:38,260 --> 00:35:44,050
available on the very first cross origin

743
00:35:40,210 --> 00:35:45,910
request made to any given origin is that

744
00:35:44,050 --> 00:35:47,200
a reasonable summary of where you're at

745
00:35:45,910 --> 00:35:50,589
so you were trying to load an image from

746
00:35:47,200 --> 00:35:52,180
a cross origin source and you want to

747
00:35:50,590 --> 00:35:54,670
make sure that they get for instance the

748
00:35:52,180 --> 00:35:59,589
DPR hint so that they can make the right

749
00:35:54,670 --> 00:36:02,490
choice of representation yes so we want

750
00:35:59,590 --> 00:36:05,800
to avoid pre flights as that would

751
00:36:02,490 --> 00:36:10,270
negate a lot of the performance benefits

752
00:36:05,800 --> 00:36:14,830
that this will the client hence will

753
00:36:10,270 --> 00:36:17,410
have as well as introduced a significant

754
00:36:14,830 --> 00:36:20,230
performance regression for hints that

755
00:36:17,410 --> 00:36:24,310
don't well performance such as user

756
00:36:20,230 --> 00:36:26,860
agent hit client hints right so um I

757
00:36:24,310 --> 00:36:28,740
guess this is a bit unfortunate but I've

758
00:36:26,860 --> 00:36:31,960
been having a bunch of discussions with

759
00:36:28,740 --> 00:36:34,410
Alabama Karen and and others about what

760
00:36:31,960 --> 00:36:36,790
it is that we do with origin policy

761
00:36:34,410 --> 00:36:39,279
other ways of signaling origin policy

762
00:36:36,790 --> 00:36:40,330
potentially using things like a flag and

763
00:36:39,280 --> 00:36:42,480
that in the taillights handshake that

764
00:36:40,330 --> 00:36:46,259
indicates that this service willing to

765
00:36:42,480 --> 00:36:48,820
willing to accept the consequences of

766
00:36:46,260 --> 00:36:52,690
dealing with things like the pre flights

767
00:36:48,820 --> 00:36:54,220
itself those are where I would prefer to

768
00:36:52,690 --> 00:36:56,650
put my effort

769
00:36:54,220 --> 00:37:01,060
into acknowledging the fact that if we

770
00:36:56,650 --> 00:37:03,160
allowed these header fields to go that

771
00:37:01,060 --> 00:37:04,779
means that currently we'd be in the

772
00:37:03,160 --> 00:37:08,799
situation of having to decide whether

773
00:37:04,780 --> 00:37:11,560
they're preflighted at for the ones that

774
00:37:08,800 --> 00:37:14,560
we have in here even though it might be

775
00:37:11,560 --> 00:37:17,080
just for a short time period of time

776
00:37:14,560 --> 00:37:19,299
because what I don't want to lose here

777
00:37:17,080 --> 00:37:21,819
is the utility that we get out of being

778
00:37:19,300 --> 00:37:23,860
able to have applications set them in

779
00:37:21,820 --> 00:37:25,620
those contexts where it is indeed

780
00:37:23,860 --> 00:37:28,600
valuable to have that information

781
00:37:25,620 --> 00:37:30,220
available to the server and through a

782
00:37:28,600 --> 00:37:32,680
couple of examples in the in the thread

783
00:37:30,220 --> 00:37:34,660
there and they're just strong man

784
00:37:32,680 --> 00:37:36,310
examples but I think that that having

785
00:37:34,660 --> 00:37:38,920
that capability is something that I

786
00:37:36,310 --> 00:37:40,810
would prefer to keep even if it means

787
00:37:38,920 --> 00:37:43,900
maybe in the short term having this

788
00:37:40,810 --> 00:37:46,750
exposure to the necessity of pre-flight

789
00:37:43,900 --> 00:37:50,380
until we have a better understanding of

790
00:37:46,750 --> 00:37:54,210
how this works I realized that's kind of

791
00:37:50,380 --> 00:37:56,170
springing on you love but that's all

792
00:37:54,210 --> 00:37:57,820
discussions I've had in the past week or

793
00:37:56,170 --> 00:37:59,530
to try to try to chase this particular

794
00:37:57,820 --> 00:38:00,210
problem down it's really quite a funny

795
00:37:59,530 --> 00:38:04,180
one

796
00:38:00,210 --> 00:38:08,740
okay do you have any specific cases in

797
00:38:04,180 --> 00:38:14,440
mind regarding the like user land based

798
00:38:08,740 --> 00:38:17,520
grant hints is there the example that I

799
00:38:14,440 --> 00:38:20,230
gave was the case where you have

800
00:38:17,520 --> 00:38:22,180
essentially a service worker that's pre

801
00:38:20,230 --> 00:38:24,070
loading content available for offline

802
00:38:22,180 --> 00:38:27,009
and it wants to be able to explicitly

803
00:38:24,070 --> 00:38:29,500
say that it wants the smaller or the

804
00:38:27,010 --> 00:38:31,270
saved data representations because it's

805
00:38:29,500 --> 00:38:34,420
worried about that the time that it's

806
00:38:31,270 --> 00:38:37,990
going to take or the amount of space is

807
00:38:34,420 --> 00:38:40,660
going to gonna need that sort of thing

808
00:38:37,990 --> 00:38:42,819
or maybe it wants to prepare for a

809
00:38:40,660 --> 00:38:44,620
situation where it's in a more limited

810
00:38:42,820 --> 00:38:46,360
context or maybe it wants to move that

811
00:38:44,620 --> 00:38:48,790
that data elsewhere and give it to a

812
00:38:46,360 --> 00:38:50,800
more constrained device I don't know but

813
00:38:48,790 --> 00:38:52,660
it has these constraints on on the data

814
00:38:50,800 --> 00:38:54,670
and it wants to express that and use the

815
00:38:52,660 --> 00:38:55,779
client hints and hit the cache in the

816
00:38:54,670 --> 00:38:59,590
right way and all those sorts of other

817
00:38:55,780 --> 00:39:01,180
wonderful things so that was the example

818
00:38:59,590 --> 00:39:03,220
I had I think I probably come up with

819
00:39:01,180 --> 00:39:07,299
some more of them if you really like but

820
00:39:03,220 --> 00:39:11,769
that was the example I had okay

821
00:39:07,299 --> 00:39:15,499
would a solution we're browser-based

822
00:39:11,769 --> 00:39:17,299
clients have a sack prefix and then new

823
00:39:15,499 --> 00:39:20,899
zealand-based client ends that are

824
00:39:17,299 --> 00:39:22,519
willing to take the preflight cost don't

825
00:39:20,900 --> 00:39:25,009
have the secretary fix but they have the

826
00:39:22,519 --> 00:39:29,379
same semantics with something like long

827
00:39:25,009 --> 00:39:31,519
those lines work and so that's one

828
00:39:29,380 --> 00:39:33,079
reluctant to do because that means that

829
00:39:31,519 --> 00:39:35,479
now you have two things that essentially

830
00:39:33,079 --> 00:39:36,619
mean the same thing but they're

831
00:39:35,479 --> 00:39:38,149
distinguished based on where they came

832
00:39:36,619 --> 00:39:42,170
from and we have to carry that baggage

833
00:39:38,150 --> 00:39:44,329
forever I I realized that this is

834
00:39:42,170 --> 00:39:46,940
unfortunate but I would I would rather

835
00:39:44,329 --> 00:39:48,799
try to solve the problem than have to

836
00:39:46,940 --> 00:39:51,440
have to deal with it in this in this

837
00:39:48,799 --> 00:39:54,190
kind of ugly way the sec prefix is kind

838
00:39:51,440 --> 00:39:56,569
of horrific and it's a blunt instrument

839
00:39:54,190 --> 00:40:08,299
unfortunately and that's what I'm trying

840
00:39:56,569 --> 00:40:15,799
to avoid okay thank you any more um yes

841
00:40:08,299 --> 00:40:20,059
so next slide is basically I would love

842
00:40:15,799 --> 00:40:28,249
to see that infrastructure draft move

843
00:40:20,059 --> 00:40:31,519
further along I am planning to ship user

844
00:40:28,249 --> 00:40:34,359
agent client hints in chromium very

845
00:40:31,519 --> 00:40:37,399
shortly based on the new infrastructure

846
00:40:34,359 --> 00:40:41,660
that's outlined in this draft as well as

847
00:40:37,400 --> 00:40:43,400
the feature policy really the

848
00:40:41,660 --> 00:40:49,788
infrastructure of cross-origin

849
00:40:43,400 --> 00:40:54,589
delegation um so I would love to see

850
00:40:49,789 --> 00:40:57,440
this move further not in Thompson if I

851
00:40:54,589 --> 00:40:59,089
might offer a potential out you don't

852
00:40:57,440 --> 00:41:01,819
actually define any clients client

853
00:40:59,089 --> 00:41:03,469
instant here and I confess I was unable

854
00:41:01,819 --> 00:41:05,989
to find any of them when I went looking

855
00:41:03,469 --> 00:41:08,209
the other day so you've done a great job

856
00:41:05,989 --> 00:41:11,140
of removing them they seem to have

857
00:41:08,209 --> 00:41:12,848
disappeared from the internet but we

858
00:41:11,140 --> 00:41:16,390
[Music]

859
00:41:12,849 --> 00:41:18,949
that means that we probably can not

860
00:41:16,390 --> 00:41:21,000
concentrate on whether the sec prefix is

861
00:41:18,949 --> 00:41:24,420
something that we use and simply say

862
00:41:21,000 --> 00:41:26,280
that we have to when you define a client

863
00:41:24,420 --> 00:41:28,590
hint you need to ensure that the server

864
00:41:26,280 --> 00:41:31,500
is not going to fall over as a result of

865
00:41:28,590 --> 00:41:33,690
receiving one of these things in the web

866
00:41:31,500 --> 00:41:35,099
context and we can be very lightweight

867
00:41:33,690 --> 00:41:37,440
about this because this is an

868
00:41:35,099 --> 00:41:40,470
infrastructure document and that makes

869
00:41:37,440 --> 00:41:42,630
this primarily a problem for the fetch

870
00:41:40,470 --> 00:41:45,450
back or whatever document ends up

871
00:41:42,630 --> 00:41:46,560
defining the individual hints I realize

872
00:41:45,450 --> 00:41:47,609
that's kind of kicking the can down the

873
00:41:46,560 --> 00:41:55,680
road but I think it might be kicking it

874
00:41:47,609 --> 00:41:57,930
exactly into the right location so do

875
00:41:55,680 --> 00:41:59,220
you have enough to make a modify the

876
00:41:57,930 --> 00:42:03,240
pull request to make a new pull request

877
00:41:59,220 --> 00:42:09,270
based on that to kind of scope that ah I

878
00:42:03,240 --> 00:42:13,589
believe so what for the for the sac PR

879
00:42:09,270 --> 00:42:15,859
and for the other one it looks like

880
00:42:13,590 --> 00:42:17,790
mainly the comments on there were

881
00:42:15,859 --> 00:42:22,380
seeming to be about the fact that we are

882
00:42:17,790 --> 00:42:25,670
adding kind of normative text in you

883
00:42:22,380 --> 00:42:27,720
should avoid these various

884
00:42:25,670 --> 00:42:29,640
fingerprinting surfaces without really

885
00:42:27,720 --> 00:42:31,290
giving you mechanisms to do that and so

886
00:42:29,640 --> 00:42:32,549
it seems like it's problematic to add

887
00:42:31,290 --> 00:42:34,710
normative text to tell you something

888
00:42:32,550 --> 00:42:36,869
that's under specified do we have

889
00:42:34,710 --> 00:42:42,660
comments here or do we know how to

890
00:42:36,869 --> 00:42:45,660
progress on this issue make sure we can

891
00:42:42,660 --> 00:42:48,480
wrap it up I reviewed it I was I was

892
00:42:45,660 --> 00:42:49,529
happy with the conclusion I I think if

893
00:42:48,480 --> 00:42:50,910
we're gonna publish this document we

894
00:42:49,530 --> 00:42:53,220
need to publish it and basically the

895
00:42:50,910 --> 00:42:54,629
current form that's hard from that to

896
00:42:53,220 --> 00:42:56,490
exist at the second thing do we want to

897
00:42:54,630 --> 00:43:00,270
because I mean ecers comments in here or

898
00:42:56,490 --> 00:43:02,279
saying I've talked about this one look

899
00:43:00,270 --> 00:43:04,380
will never be completely happy with this

900
00:43:02,280 --> 00:43:05,940
situation because we there's there's

901
00:43:04,380 --> 00:43:07,349
some fundamental agreement disagreements

902
00:43:05,940 --> 00:43:09,330
about policy but those are policy

903
00:43:07,349 --> 00:43:11,490
disagreements and no I don't think that

904
00:43:09,330 --> 00:43:11,970
disagreements about what's what's in the

905
00:43:11,490 --> 00:43:13,799
draft

906
00:43:11,970 --> 00:43:15,720
it's sounding to me of like you of you

907
00:43:13,800 --> 00:43:18,270
can produce in the new draft fairly soon

908
00:43:15,720 --> 00:43:20,910
and we can go to working group last call

909
00:43:18,270 --> 00:43:21,720
and see if we can make it stick yep okay

910
00:43:20,910 --> 00:43:24,240
thank you

911
00:43:21,720 --> 00:43:25,439
thank you so much thank you thank you so

912
00:43:24,240 --> 00:43:31,640
so not much further

913
00:43:25,440 --> 00:43:33,770
Papa Smurf do it you can do it thank you

914
00:43:31,640 --> 00:43:36,600
thanks

915
00:43:33,770 --> 00:43:41,040
okay what is next

916
00:43:36,600 --> 00:43:44,610
so that was digest and client hints

917
00:43:41,040 --> 00:43:48,990
using TLS 1 3 with h2 we've already sent

918
00:43:44,610 --> 00:43:54,120
that to the ESG I go ah

919
00:43:48,990 --> 00:44:00,270
Roberto you had a comment yeah can you

920
00:43:54,120 --> 00:44:05,299
hear me somewhat yes ok it was well

921
00:44:00,270 --> 00:44:09,780
about the discussion for about given

922
00:44:05,300 --> 00:44:13,320
given consideration young guidance in

923
00:44:09,780 --> 00:44:20,940
using digests with signatures all this

924
00:44:13,320 --> 00:44:24,740
digests draft started from me noting bad

925
00:44:20,940 --> 00:44:27,120
implementation of draft cabbage using

926
00:44:24,740 --> 00:44:31,939
digests in the wrong way for sending

927
00:44:27,120 --> 00:44:37,200
content so the first thing I did was to

928
00:44:31,940 --> 00:44:40,500
better define which fields should be

929
00:44:37,200 --> 00:44:42,899
signed together with digest with

930
00:44:40,500 --> 00:44:45,870
metadata should be signed together with

931
00:44:42,900 --> 00:44:49,290
digest and then started working and

932
00:44:45,870 --> 00:44:54,930
rewriting that I just had I think that

933
00:44:49,290 --> 00:44:58,110
it's worth when specifying the digests

934
00:44:54,930 --> 00:45:01,620
raft to give guidance about using digest

935
00:44:58,110 --> 00:45:05,000
with signatures because actually there

936
00:45:01,620 --> 00:45:08,100
is an issue by for the implementers

937
00:45:05,000 --> 00:45:13,320
about all the contest and all the the

938
00:45:08,100 --> 00:45:18,480
metadata that are part of the of the the

939
00:45:13,320 --> 00:45:21,920
essential to decode the epilogue because

940
00:45:18,480 --> 00:45:21,920
the payload is not the representation

941
00:45:22,010 --> 00:45:27,650
that that's it thank you problem

942
00:45:29,940 --> 00:45:35,010
okay so next up we have proxy status but

943
00:45:32,819 --> 00:45:38,040
I think it would be better to briefly

944
00:45:35,010 --> 00:45:39,390
talk about cash header first because

945
00:45:38,040 --> 00:45:42,359
there's some changes there that might

946
00:45:39,390 --> 00:45:44,339
have impact on proxy status if you look

947
00:45:42,359 --> 00:45:47,880
at the latest draft which I published

948
00:45:44,339 --> 00:45:51,328
pretty recently we talked last time

949
00:45:47,880 --> 00:45:52,890
about refactoring this because if you'll

950
00:45:51,329 --> 00:45:57,540
remember the previous approach was very

951
00:45:52,890 --> 00:45:59,490
much paving the cow path of the cash the

952
00:45:57,540 --> 00:46:02,520
X cash header and so it had the very

953
00:45:59,490 --> 00:46:04,560
familiar cache hit cache miss and all

954
00:46:02,520 --> 00:46:07,910
the other tags and and the feeling was

955
00:46:04,560 --> 00:46:10,380
that that wasn't terribly extensible and

956
00:46:07,910 --> 00:46:14,730
adaptable to changes in cache semantics

957
00:46:10,380 --> 00:46:17,160
and also if implementations are already

958
00:46:14,730 --> 00:46:19,980
implemented X cache they could just try

959
00:46:17,160 --> 00:46:21,240
and change the header name and or not

960
00:46:19,980 --> 00:46:23,460
make any changes to where their code

961
00:46:21,240 --> 00:46:24,689
actually calls this and maybe get the

962
00:46:23,460 --> 00:46:26,880
semantics wrong and so that was a bit of

963
00:46:24,690 --> 00:46:29,280
a moral hazard and so we decided to

964
00:46:26,880 --> 00:46:30,780
refactor it and I'd like folks to look

965
00:46:29,280 --> 00:46:33,599
when they have a chance maybe not right

966
00:46:30,780 --> 00:46:35,609
now at this reformulations

967
00:46:33,599 --> 00:46:40,109
and I think there are some examples down

968
00:46:35,609 --> 00:46:42,390
here and and I think this still needs

969
00:46:40,109 --> 00:46:44,759
some work I want to make sure that it's

970
00:46:42,390 --> 00:46:46,049
usable both for the implementations that

971
00:46:44,760 --> 00:46:47,460
are produced in the header as well as

972
00:46:46,050 --> 00:46:50,940
people consuming it to do things with it

973
00:46:47,460 --> 00:46:52,200
and I think we need to probably do at

974
00:46:50,940 --> 00:46:54,180
least one more revision for that latter

975
00:46:52,200 --> 00:46:55,259
class of people but one thing I want to

976
00:46:54,180 --> 00:46:57,419
highlight here is is that we made a

977
00:46:55,260 --> 00:46:59,040
pretty fundamental change last time

978
00:46:57,420 --> 00:47:00,780
there was a tag that kind of held the

979
00:46:59,040 --> 00:47:02,990
semantics of what happened and then

980
00:47:00,780 --> 00:47:05,160
there was a parameters on that that were

981
00:47:02,990 --> 00:47:08,220
identifying various parameters including

982
00:47:05,160 --> 00:47:10,109
the name of the node so what the name of

983
00:47:08,220 --> 00:47:12,450
the cache was that is claiming that this

984
00:47:10,109 --> 00:47:16,680
action has taken place we flipped that

985
00:47:12,450 --> 00:47:17,910
and the the primary token here that

986
00:47:16,680 --> 00:47:19,529
you're putting parameters on is the

987
00:47:17,910 --> 00:47:21,868
identity of the the party taking the

988
00:47:19,530 --> 00:47:24,510
action so in this case it's example

989
00:47:21,869 --> 00:47:26,970
cache and then you know here it's a

990
00:47:24,510 --> 00:47:28,950
fresh response and so forth and so on

991
00:47:26,970 --> 00:47:30,720
and so I wanted to highlight that to

992
00:47:28,950 --> 00:47:32,160
folks to make sure that we're

993
00:47:30,720 --> 00:47:34,319
comfortable with that because I think we

994
00:47:32,160 --> 00:47:38,190
should probably do the same thing in the

995
00:47:34,319 --> 00:47:41,000
proxy draft who's read the latest draft

996
00:47:38,190 --> 00:47:42,760
of this was put out a couple weeks ago

997
00:47:41,000 --> 00:47:43,930
okay

998
00:47:42,760 --> 00:47:45,580
few more people could read it and give

999
00:47:43,930 --> 00:47:48,129
feedback that would be really helpful I

1000
00:47:45,580 --> 00:47:49,779
don't think I'm not even sure they're

1001
00:47:48,130 --> 00:47:51,850
open issues in this one yet so there is

1002
00:47:49,780 --> 00:47:53,710
one issue open for me factor which is

1003
00:47:51,850 --> 00:47:55,600
using that is close by this commit um

1004
00:47:53,710 --> 00:47:57,100
where was it's just I'm not sure that

1005
00:47:55,600 --> 00:47:58,509
it's sticking yet I think we need to

1006
00:47:57,100 --> 00:48:00,910
continue to refine refactoring

1007
00:47:58,510 --> 00:48:02,320
I didn't that's why I didn't close it so

1008
00:48:00,910 --> 00:48:03,730
please take a look and review and I'm

1009
00:48:02,320 --> 00:48:04,990
gonna probably noodle on it a bit more

1010
00:48:03,730 --> 00:48:08,350
and we'll have another draft sometime

1011
00:48:04,990 --> 00:48:09,609
soon any comments on the cache draft we

1012
00:48:08,350 --> 00:48:11,770
aren't we changed the name by the way we

1013
00:48:09,610 --> 00:48:15,520
did close that issue its cache status

1014
00:48:11,770 --> 00:48:16,780
now there was a old pull request open

1015
00:48:15,520 --> 00:48:19,180
for that so maybe that should be cleaned

1016
00:48:16,780 --> 00:48:21,250
up I think I did let's under getting

1017
00:48:19,180 --> 00:48:23,770
caught Fleur you can also close my PR

1018
00:48:21,250 --> 00:48:26,010
about renaming other and there it is yes

1019
00:48:23,770 --> 00:48:31,110
thank you

1020
00:48:26,010 --> 00:48:33,460
okay and that takes us to proxy status

1021
00:48:31,110 --> 00:48:35,830
Peter and I have been working on this in

1022
00:48:33,460 --> 00:48:39,430
the background and having a chat we have

1023
00:48:35,830 --> 00:48:41,560
two issues left we haven't we did not

1024
00:48:39,430 --> 00:48:43,569
publish a new draft before this ITF

1025
00:48:41,560 --> 00:48:46,900
because we wanted to get to conclusion

1026
00:48:43,570 --> 00:48:48,490
on this first and assuming that we can

1027
00:48:46,900 --> 00:48:56,710
make the change we just talked about I

1028
00:48:48,490 --> 00:48:58,089
think this issue we went to a place

1029
00:48:56,710 --> 00:49:00,550
where we were talking about splitting

1030
00:48:58,090 --> 00:49:02,770
into two different headers proxy status

1031
00:49:00,550 --> 00:49:05,170
to reflect the the terminal you know

1032
00:49:02,770 --> 00:49:06,840
this is an error generated by a proxy

1033
00:49:05,170 --> 00:49:08,980
and then proxy info to capture

1034
00:49:06,840 --> 00:49:10,690
information that the proxies observed on

1035
00:49:08,980 --> 00:49:11,980
the way through and I think that if we

1036
00:49:10,690 --> 00:49:13,990
make that change that we made with cache

1037
00:49:11,980 --> 00:49:15,940
status we're not going to need to split

1038
00:49:13,990 --> 00:49:17,770
it up into I suspect we're to be able to

1039
00:49:15,940 --> 00:49:22,030
leave it within two one header which I

1040
00:49:17,770 --> 00:49:24,910
think makes everyone happy sorry is this

1041
00:49:22,030 --> 00:49:27,640
about this draft fish about cash oh

1042
00:49:24,910 --> 00:49:29,529
please go ahead Chris lemon says I've

1043
00:49:27,640 --> 00:49:32,200
read it I really like the reformulation

1044
00:49:29,530 --> 00:49:34,150
I don't see the extensible case in there

1045
00:49:32,200 --> 00:49:36,009
I'd like to see a place to put some data

1046
00:49:34,150 --> 00:49:38,500
about what kind of a hit it was for

1047
00:49:36,010 --> 00:49:41,530
example a hit on disk RAM or some other

1048
00:49:38,500 --> 00:49:43,420
place I'd like to see proxy status to

1049
00:49:41,530 --> 00:49:49,510
follow suit okay

1050
00:49:43,420 --> 00:49:51,790
that's good information thank you so if

1051
00:49:49,510 --> 00:49:54,370
if that's the case and we'll do that

1052
00:49:51,790 --> 00:49:56,020
refactoring again on this spec and then

1053
00:49:54,370 --> 00:49:58,470
hopefully we'll be able to close 8:21

1054
00:49:56,020 --> 00:49:58,470
without much

1055
00:49:58,680 --> 00:50:05,230
that leads us to 808 and there's a back

1056
00:50:03,790 --> 00:50:06,460
and forth here in piano field please

1057
00:50:05,230 --> 00:50:08,589
feel free to come to the mic to

1058
00:50:06,460 --> 00:50:10,270
represent your view we've been talking

1059
00:50:08,589 --> 00:50:13,210
the background a lot and then there's

1060
00:50:10,270 --> 00:50:16,450
there's attention here I think you know

1061
00:50:13,210 --> 00:50:18,400
one of the comments was that that being

1062
00:50:16,450 --> 00:50:20,470
able to identify requests errors and

1063
00:50:18,400 --> 00:50:24,160
different kinds of requests errors that

1064
00:50:20,470 --> 00:50:26,770
are currently identified by H to be

1065
00:50:24,160 --> 00:50:29,649
status codes you know whether it's

1066
00:50:26,770 --> 00:50:32,440
forbidden or URI too long or whatever is

1067
00:50:29,650 --> 00:50:34,599
useful to do here into a court here and

1068
00:50:32,440 --> 00:50:39,670
so we started to walk down a path where

1069
00:50:34,599 --> 00:50:43,270
we had a code for each of those states

1070
00:50:39,670 --> 00:50:47,770
and you can see I did a I started to do

1071
00:50:43,270 --> 00:50:52,930
this in the draft itself and so we have

1072
00:50:47,770 --> 00:50:55,480
all these new things associated with oh

1073
00:50:52,930 --> 00:50:57,669
sorry yeah here we go

1074
00:50:55,480 --> 00:51:02,099
all these new HTTP requests ones from

1075
00:50:57,670 --> 00:51:06,940
here down one code for each existing

1076
00:51:02,099 --> 00:51:07,710
HTTP status code and I'm not done with

1077
00:51:06,940 --> 00:51:11,200
that yet

1078
00:51:07,710 --> 00:51:12,780
so I'm having this givings about that I

1079
00:51:11,200 --> 00:51:14,649
don't want to represent theaters

1080
00:51:12,780 --> 00:51:16,450
position too much but I'm having

1081
00:51:14,650 --> 00:51:17,619
misgivings we aren't able to come to

1082
00:51:16,450 --> 00:51:18,490
agreement yet so we wanted to talk about

1083
00:51:17,619 --> 00:51:21,130
it briefly here

1084
00:51:18,490 --> 00:51:23,618
James crusing BBC so what are you gonna

1085
00:51:21,130 --> 00:51:26,799
do when another HTTP status code comes

1086
00:51:23,619 --> 00:51:28,450
along I think the idea is is that it

1087
00:51:26,799 --> 00:51:39,819
would be registered in both the status

1088
00:51:28,450 --> 00:51:41,040
code registry and here so do you wanna I

1089
00:51:39,819 --> 00:51:44,230
don't wanna

1090
00:51:41,040 --> 00:51:47,470
it might depend on that so I think this

1091
00:51:44,230 --> 00:51:51,549
was more of an issue in current state

1092
00:51:47,470 --> 00:51:54,368
when we have dedicated types that are a

1093
00:51:51,549 --> 00:51:58,990
primary object if we do the refactoring

1094
00:51:54,369 --> 00:52:03,150
and switch to the proxy name being the

1095
00:51:58,990 --> 00:52:06,549
primary identifier and switch this to us

1096
00:52:03,150 --> 00:52:08,319
to being key values right like status

1097
00:52:06,549 --> 00:52:10,540
and status price we don't we can just

1098
00:52:08,319 --> 00:52:12,730
piggyback okay on

1099
00:52:10,540 --> 00:52:14,680
an existing service kasam don't need to

1100
00:52:12,730 --> 00:52:18,970
read the find so I think then it's fine

1101
00:52:14,680 --> 00:52:20,230
okay so um that would I think we talked

1102
00:52:18,970 --> 00:52:24,370
about this briefly so that would take us

1103
00:52:20,230 --> 00:52:26,590
to a design where we originally had one

1104
00:52:24,370 --> 00:52:29,230
of these codes that was HTTP request

1105
00:52:26,590 --> 00:52:30,940
issue or whatever and then it had

1106
00:52:29,230 --> 00:52:33,820
additional parameters that convey the

1107
00:52:30,940 --> 00:52:35,350
status code and the status phrase so

1108
00:52:33,820 --> 00:52:36,400
that you can you can find out but you

1109
00:52:35,350 --> 00:52:39,339
know it's just look at the status code

1110
00:52:36,400 --> 00:52:40,870
of course I know one of your big

1111
00:52:39,340 --> 00:52:42,220
concerns was that if there's another

1112
00:52:40,870 --> 00:52:43,810
condition which isn't captured by a

1113
00:52:42,220 --> 00:52:46,089
status code yet you want to be able to

1114
00:52:43,810 --> 00:52:47,529
convey that as well but I think that's

1115
00:52:46,090 --> 00:52:49,000
probably just registering a new one of

1116
00:52:47,530 --> 00:52:50,620
these error

1117
00:52:49,000 --> 00:52:57,370
I forget what we call them but the proxy

1118
00:52:50,620 --> 00:52:58,930
they're our status things yeah okay so I

1119
00:52:57,370 --> 00:52:59,830
think we can kind of write that down and

1120
00:52:58,930 --> 00:53:00,819
see what it looks like it make sure

1121
00:52:59,830 --> 00:53:02,710
everybody's comfortable with it and then

1122
00:53:00,820 --> 00:53:04,750
before but it if we can solve these two

1123
00:53:02,710 --> 00:53:07,570
issues I think we're in agreement that

1124
00:53:04,750 --> 00:53:09,340
we're pretty much ready to go right it

1125
00:53:07,570 --> 00:53:11,350
will be good to read everything from the

1126
00:53:09,340 --> 00:53:15,880
room whether everybody's against you

1127
00:53:11,350 --> 00:53:20,410
know duplicating status codes you're

1128
00:53:15,880 --> 00:53:23,050
gonna run a hammer sure I mean this is I

1129
00:53:20,410 --> 00:53:24,750
guess there's anyone I mean does anyone

1130
00:53:23,050 --> 00:53:27,430
want to speak up for duplicating them

1131
00:53:24,750 --> 00:53:35,080
just so you can kind of hear a argument

1132
00:53:27,430 --> 00:53:37,180
in that favor or Roberto says I

1133
00:53:35,080 --> 00:53:39,670
commented on the issue the status

1134
00:53:37,180 --> 00:53:44,950
message eg bad requests may change in

1135
00:53:39,670 --> 00:53:50,080
time okay so the status message could

1136
00:53:44,950 --> 00:53:53,770
change but the code wouldn't okay all

1137
00:53:50,080 --> 00:53:55,630
right so mum Thompson I I think if

1138
00:53:53,770 --> 00:53:57,970
you're making requests then it makes

1139
00:53:55,630 --> 00:53:59,770
perfect sense to just record the status

1140
00:53:57,970 --> 00:54:01,750
code that you've got if that's all the

1141
00:53:59,770 --> 00:54:03,670
information that you have if there's

1142
00:54:01,750 --> 00:54:06,390
other error conditions that might be

1143
00:54:03,670 --> 00:54:08,440
generated then you have them other

1144
00:54:06,390 --> 00:54:11,230
values that you can have but I think

1145
00:54:08,440 --> 00:54:14,140
having a having I made a request and the

1146
00:54:11,230 --> 00:54:15,940
and the status was X as part of the

1147
00:54:14,140 --> 00:54:17,560
information that you provide which may

1148
00:54:15,940 --> 00:54:21,360
even be in addition to the other errors

1149
00:54:17,560 --> 00:54:23,730
that you might stick in there is much

1150
00:54:21,360 --> 00:54:26,500
cleaner

1151
00:54:23,730 --> 00:54:28,690
I'd saw the table of contents as it

1152
00:54:26,500 --> 00:54:29,980
scrolled down and just kept going and

1153
00:54:28,690 --> 00:54:32,470
going and going this is just

1154
00:54:29,980 --> 00:54:34,960
unmaintainable so let's let's just

1155
00:54:32,470 --> 00:54:36,848
pretend the status code so you see

1156
00:54:34,960 --> 00:54:37,990
you're arguing for just status code not

1157
00:54:36,849 --> 00:54:41,349
what we originally had of both the

1158
00:54:37,990 --> 00:54:42,759
status code and the other signals that

1159
00:54:41,349 --> 00:54:44,619
you need to provide it in addition to

1160
00:54:42,760 --> 00:54:46,780
that because of the processing that

1161
00:54:44,619 --> 00:54:49,180
happened locally by simply just have the

1162
00:54:46,780 --> 00:54:55,050
number but but just the number with you

1163
00:54:49,180 --> 00:54:55,049
as a value of as the parameter yeah good

1164
00:54:55,800 --> 00:55:03,609
do you want to take a home on that er

1165
00:54:58,240 --> 00:55:05,470
I'm happy to Peter's happy you happy we

1166
00:55:03,609 --> 00:55:09,420
have a waiver pad for it I think we have

1167
00:55:05,470 --> 00:55:09,419
call for it okay I'll note that in there

1168
00:55:10,260 --> 00:55:20,650
yes no no service in this place okay

1169
00:55:19,270 --> 00:55:24,579
good that takes us home thank you very

1170
00:55:20,650 --> 00:55:26,260
much that takes us unto variants I think

1171
00:55:24,579 --> 00:55:27,640
also again a very brief update here I

1172
00:55:26,260 --> 00:55:30,670
don't know that we have any oh we have

1173
00:55:27,640 --> 00:55:34,720
one open issue and variants I believe so

1174
00:55:30,670 --> 00:55:36,819
oh no we have a few that's right so in

1175
00:55:34,720 --> 00:55:39,910
the last of this set for a long time and

1176
00:55:36,819 --> 00:55:40,960
we weren't sure we we weren't getting a

1177
00:55:39,910 --> 00:55:43,000
lot of implementation experience

1178
00:55:40,960 --> 00:55:50,589
although we do see other specs depending

1179
00:55:43,000 --> 00:55:51,400
upon it the last time around I posited

1180
00:55:50,589 --> 00:55:52,810
that we might get a little more

1181
00:55:51,400 --> 00:55:54,550
engagement from folks if it also

1182
00:55:52,810 --> 00:55:56,470
addressed one of the most common cases

1183
00:55:54,550 --> 00:56:00,190
that isn't met by the very Keter today

1184
00:55:56,470 --> 00:56:02,169
which is cookie variance so I in the

1185
00:56:00,190 --> 00:56:04,119
last draft I sketched in what that might

1186
00:56:02,170 --> 00:56:06,160
look like I don't think it's seen a lot

1187
00:56:04,119 --> 00:56:08,859
of review who's read the latest draft of

1188
00:56:06,160 --> 00:56:11,529
variance yeah I don't think it's seen a

1189
00:56:08,859 --> 00:56:12,700
lot of review so if people could please

1190
00:56:11,530 --> 00:56:14,230
take a look at that that would be

1191
00:56:12,700 --> 00:56:16,540
fantastic

1192
00:56:14,230 --> 00:56:19,300
there are a couple of issues here which

1193
00:56:16,540 --> 00:56:20,890
i think are pretty manageable so my

1194
00:56:19,300 --> 00:56:22,569
anticipation is I want to play when I

1195
00:56:20,890 --> 00:56:24,460
have an old implementation of this that

1196
00:56:22,569 --> 00:56:25,930
I want to refresh make sure it works

1197
00:56:24,460 --> 00:56:28,329
properly make sure that the draft is

1198
00:56:25,930 --> 00:56:29,440
reasonable and then I'm thinking we

1199
00:56:28,329 --> 00:56:31,510
should probably publish this as

1200
00:56:29,440 --> 00:56:33,760
experimental and see how that goes

1201
00:56:31,510 --> 00:56:35,530
we did have some implement or interest

1202
00:56:33,760 --> 00:56:37,119
but for a lot of reasons it's not really

1203
00:56:35,530 --> 00:56:39,130
getting that and I don't

1204
00:56:37,119 --> 00:56:41,049
hang around too long I'd be interested

1205
00:56:39,130 --> 00:56:42,640
to hear if people feel differently about

1206
00:56:41,049 --> 00:56:43,960
it if they want to just keep it hang

1207
00:56:42,640 --> 00:56:45,940
grandma's draft or oh I have an

1208
00:56:43,960 --> 00:56:51,999
implementation or I'll do one honest or

1209
00:56:45,940 --> 00:56:54,579
whatever nan Thompson I realized this is

1210
00:56:51,999 --> 00:56:57,069
probably drawing too long about it but W

1211
00:56:54,579 --> 00:57:00,220
Peck work was more or less depending on

1212
00:56:57,069 --> 00:57:03,058
this one I know would it would it seems

1213
00:57:00,220 --> 00:57:05,169
like the outcome of that work would be -

1214
00:57:03,059 --> 00:57:07,960
ideally would be a standard track

1215
00:57:05,170 --> 00:57:09,789
document and having that standard take

1216
00:57:07,960 --> 00:57:12,009
document and not an experiment is a

1217
00:57:09,789 --> 00:57:14,289
little awkward I think we must we might

1218
00:57:12,009 --> 00:57:15,789
need to be prepared to revise this in a

1219
00:57:14,289 --> 00:57:17,980
fairly short timespan

1220
00:57:15,789 --> 00:57:20,529
if it gets more serious over that way

1221
00:57:17,980 --> 00:57:22,210
I'm that that's assuming about a whole

1222
00:57:20,529 --> 00:57:24,609
bunch of things that that haven't

1223
00:57:22,210 --> 00:57:26,579
happened yet of course I'm thinking that

1224
00:57:24,609 --> 00:57:28,690
publishing his experimental might

1225
00:57:26,579 --> 00:57:31,690
encourage the implementation I know that

1226
00:57:28,690 --> 00:57:33,249
sounds very hook based but if it need be

1227
00:57:31,690 --> 00:57:34,930
it can be flipped from experimental

1228
00:57:33,249 --> 00:57:37,868
distinguish track down the road with

1229
00:57:34,930 --> 00:57:40,118
some process stuff yeah yeah I'm just

1230
00:57:37,869 --> 00:57:42,549
highlighting that as a as a potential

1231
00:57:40,119 --> 00:57:47,589
problem sure no that that's very much in

1232
00:57:42,549 --> 00:57:49,779
my mind this is Jeffrey askin um in the

1233
00:57:47,589 --> 00:57:52,299
W Peck kind of experimental

1234
00:57:49,779 --> 00:57:54,759
implementations we are suffixing

1235
00:57:52,299 --> 00:57:57,099
variance with the draft number which

1236
00:57:54,759 --> 00:57:59,559
seems like a good way to proof kind of

1237
00:57:57,099 --> 00:58:02,829
the experiment if it gets published as

1238
00:57:59,559 --> 00:58:05,019
an experimental RFC and then needs

1239
00:58:02,829 --> 00:58:07,269
changes before it goes to standards

1240
00:58:05,019 --> 00:58:09,368
track is there we need to come up with a

1241
00:58:07,269 --> 00:58:11,140
migration plan for the kind of what

1242
00:58:09,369 --> 00:58:12,039
Evers whatever is released sure we'd

1243
00:58:11,140 --> 00:58:13,390
have to come up with different header

1244
00:58:12,039 --> 00:58:15,880
names if it needs changes yeah and

1245
00:58:13,390 --> 00:58:18,069
that's not terribly Pleasant yeah I mean

1246
00:58:15,880 --> 00:58:20,589
to be clear I'm perfectly fine parking

1247
00:58:18,069 --> 00:58:23,769
it for a while if that lines things up a

1248
00:58:20,589 --> 00:58:25,150
bit better I just want to make sure that

1249
00:58:23,769 --> 00:58:26,410
everybody is comfortable with a Marc

1250
00:58:25,150 --> 00:58:27,460
document for that long because if this

1251
00:58:26,410 --> 00:58:29,578
is the negging out there for a little

1252
00:58:27,460 --> 00:58:29,579
while

1253
00:58:35,609 --> 00:58:40,979
I couldn't live with that I think we can

1254
00:58:38,069 --> 00:58:45,660
we can keep it around internet Dras

1255
00:58:40,979 --> 00:58:47,640
don't expire do they should they expire

1256
00:58:45,660 --> 00:58:51,959
question I think it was in this very

1257
00:58:47,640 --> 00:58:54,259
room okay well I certainly I have issues

1258
00:58:51,959 --> 00:58:57,299
to address it has a dependency on core

1259
00:58:54,259 --> 00:59:00,299
so it's not gonna ship anytime soon

1260
00:58:57,299 --> 00:59:02,219
anyway I'll do a revision I'll do some

1261
00:59:00,299 --> 00:59:03,089
some prototype implementation to make

1262
00:59:02,219 --> 00:59:06,089
sure that everything still works

1263
00:59:03,089 --> 00:59:08,808
properly but I will there on the Shelf

1264
00:59:06,089 --> 00:59:11,099
after that and wait for feedback I think

1265
00:59:08,809 --> 00:59:14,519
and if there is implementation

1266
00:59:11,099 --> 00:59:17,039
experience from the packaging stuff I

1267
00:59:14,519 --> 00:59:18,508
mean that may provide enough basis to

1268
00:59:17,039 --> 00:59:21,809
make it not experimental by the time we

1269
00:59:18,509 --> 00:59:23,549
publish sure I mean personally I'm not

1270
00:59:21,809 --> 00:59:27,029
doing this for webpack sorry Jeffrey I

1271
00:59:23,549 --> 00:59:28,680
know that's a huge shock I'd like to see

1272
00:59:27,029 --> 00:59:30,539
this used in anger by caches I think it

1273
00:59:28,680 --> 00:59:32,009
makes them more powerful yeah

1274
00:59:30,539 --> 00:59:34,019
Mumtaz and I don't agree with that any

1275
00:59:32,009 --> 00:59:35,400
anything we might learn and we're

1276
00:59:34,019 --> 00:59:37,169
packaging would be helpful but I don't

1277
00:59:35,400 --> 00:59:39,390
think it's gonna be dispositive in any

1278
00:59:37,170 --> 00:59:41,549
of this because this is targeted at

1279
00:59:39,390 --> 00:59:43,769
intermediaries and if intermediaries

1280
00:59:41,549 --> 00:59:47,479
don't prove that they can use this then

1281
00:59:43,769 --> 00:59:49,439
we still don't know anything okay I

1282
00:59:47,479 --> 00:59:55,558
think that's all we need to really cover

1283
00:59:49,440 --> 00:59:57,930
them um PCB 306 yes we did get a comment

1284
00:59:55,559 --> 01:00:00,119
yes I got a comment yes I've had a chat

1285
00:59:57,930 --> 01:00:01,649
with fluffy and I think there's some

1286
01:00:00,119 --> 01:00:04,349
editorial finessing there that might

1287
01:00:01,650 --> 01:00:05,880
need to happen but and I need to take

1288
01:00:04,349 --> 01:00:08,339
another pass the draft as well because

1289
01:00:05,880 --> 01:00:11,729
we left it up indeed thank goodness

1290
01:00:08,339 --> 01:00:16,920
wise chairs indeed eventually he'll

1291
01:00:11,729 --> 01:00:18,930
start rolling yeah I did a fairly large

1292
01:00:16,920 --> 01:00:21,509
revision of this draft recently probably

1293
01:00:18,930 --> 01:00:24,598
bigger than I intended to and that's

1294
01:00:21,509 --> 01:00:29,719
based upon the feedback we got in the

1295
01:00:24,599 --> 01:00:31,949
process of putting RFC 7320 bits out

1296
01:00:29,719 --> 01:00:34,829
which is the revision of the URI

1297
01:00:31,949 --> 01:00:36,269
ownership stuff and the feedback we got

1298
01:00:34,829 --> 01:00:39,719
from the larger community and that was

1299
01:00:36,269 --> 01:00:41,609
that it's fine to state some principles

1300
01:00:39,719 --> 01:00:43,140
and states and practices and say this is

1301
01:00:41,609 --> 01:00:44,999
you know what happens if you do this and

1302
01:00:43,140 --> 01:00:47,700
this is why you probably don't want to

1303
01:00:44,999 --> 01:00:50,310
do this but using must sand must

1304
01:00:47,700 --> 01:00:52,560
not to convey that is a whole nother

1305
01:00:50,310 --> 01:00:54,299
level and it's not usually appropriate

1306
01:00:52,560 --> 01:00:57,060
for these kind of architectural

1307
01:00:54,300 --> 01:01:01,079
considerations and so I did a pretty big

1308
01:00:57,060 --> 01:01:03,150
pass to the document to remove a lot of

1309
01:01:01,079 --> 01:01:04,980
the what is probably going to be

1310
01:01:03,150 --> 01:01:07,220
considered inappropriate requirements

1311
01:01:04,980 --> 01:01:10,560
language tone it down and make it more

1312
01:01:07,220 --> 01:01:12,660
you know this is is why we do things the

1313
01:01:10,560 --> 01:01:14,640
way we do them in HTTP so it encouraged

1314
01:01:12,660 --> 01:01:15,930
people to review that I probably do want

1315
01:01:14,640 --> 01:01:17,819
to take one more editorial pass through

1316
01:01:15,930 --> 01:01:20,910
it and it still has this dependency upon

1317
01:01:17,820 --> 01:01:25,950
Gore yeah has anyone looked at the more

1318
01:01:20,910 --> 01:01:27,720
recent revisions of this anyone okay I

1319
01:01:25,950 --> 01:01:29,790
did take a look and it looked reasonable

1320
01:01:27,720 --> 01:01:31,410
but I think once we get the any

1321
01:01:29,790 --> 01:01:33,390
modifications from Fluffy's review in

1322
01:01:31,410 --> 01:01:34,950
there we should ask everyone to take a

1323
01:01:33,390 --> 01:01:36,750
look again well definitely need to do

1324
01:01:34,950 --> 01:01:38,970
another worker blast calmness and and

1325
01:01:36,750 --> 01:01:40,770
you know I after I did I had misgivings

1326
01:01:38,970 --> 01:01:42,509
about all these changes but as after I

1327
01:01:40,770 --> 01:01:44,910
did I looked and I was happy with the

1328
01:01:42,510 --> 01:01:46,369
documents resolved that's yeah I think

1329
01:01:44,910 --> 01:01:49,200
it's the right thing to do

1330
01:01:46,369 --> 01:01:51,510
random access is not our problem anymore

1331
01:01:49,200 --> 01:01:56,118
and it should be out the door as an

1332
01:01:51,510 --> 01:02:05,069
actual RFC very very soon it has

1333
01:01:56,119 --> 01:02:06,780
secondary certificates I think we're a

1334
01:02:05,069 --> 01:02:07,770
little ahead on time we had ten minutes

1335
01:02:06,780 --> 01:02:10,380
allocated for this but you can probably

1336
01:02:07,770 --> 01:02:13,140
do fifteen actually I don't think we'll

1337
01:02:10,380 --> 01:02:15,270
take that long so there's not a whole

1338
01:02:13,140 --> 01:02:18,089
lot that's happened in the document

1339
01:02:15,270 --> 01:02:20,490
itself last time around we finally came

1340
01:02:18,089 --> 01:02:24,540
to a compromise on what we want to do

1341
01:02:20,490 --> 01:02:26,270
for the DNS pieces and really the

1342
01:02:24,540 --> 01:02:29,640
outstanding piece right now is

1343
01:02:26,270 --> 01:02:31,259
implementations I'm aware of all of one

1344
01:02:29,640 --> 01:02:35,730
implementation of this and it's

1345
01:02:31,260 --> 01:02:40,520
server-side almight I have two other

1346
01:02:35,730 --> 01:02:43,140
possible interest in implementing that

1347
01:02:40,520 --> 01:02:46,560
don't have a specific timeline also

1348
01:02:43,140 --> 01:02:48,150
server-side only I'd really like to see

1349
01:02:46,560 --> 01:02:50,700
at least one client implementation

1350
01:02:48,150 --> 01:02:52,800
before we progress this anywhere and I

1351
01:02:50,700 --> 01:02:57,299
don't feel like we can responsibly do

1352
01:02:52,800 --> 01:02:58,950
that until someone does okay mom Thomson

1353
01:02:57,300 --> 01:03:01,410
I'd really like to be able to implement

1354
01:02:58,950 --> 01:03:04,560
this one but it has remained

1355
01:03:01,410 --> 01:03:06,600
below the the floor of various other

1356
01:03:04,560 --> 01:03:10,740
higher priority things for for a long

1357
01:03:06,600 --> 01:03:13,950
time I think like the variants work I'm

1358
01:03:10,740 --> 01:03:15,540
comfortable parking this one I don't

1359
01:03:13,950 --> 01:03:18,810
want to publish this one as experimental

1360
01:03:15,540 --> 01:03:20,850
I don't want to I don't to publish

1361
01:03:18,810 --> 01:03:23,390
anything that hasn't been tested in the

1362
01:03:20,850 --> 01:03:25,830
field in particularly in this area and

1363
01:03:23,390 --> 01:03:29,160
there's there's a number of things in

1364
01:03:25,830 --> 01:03:31,080
here that I think will require some care

1365
01:03:29,160 --> 01:03:33,960
in order to get right and we may want to

1366
01:03:31,080 --> 01:03:37,440
make some sort of minor tweaks as we as

1367
01:03:33,960 --> 01:03:40,410
we go through deployments so my

1368
01:03:37,440 --> 01:03:42,960
preference here is to just say okay fine

1369
01:03:40,410 --> 01:03:46,100
it sits there and it can sit there at

1370
01:03:42,960 --> 01:03:48,540
the bottom of this list for the next

1371
01:03:46,100 --> 01:03:52,500
three years if you really like we don't

1372
01:03:48,540 --> 01:03:56,790
have any open issues do we we have an

1373
01:03:52,500 --> 01:03:58,920
editorial issue and we need some we need

1374
01:03:56,790 --> 01:04:00,690
the text for the compromise we worked

1375
01:03:58,920 --> 01:04:03,150
out last time which is more or less do

1376
01:04:00,690 --> 01:04:06,540
what you would do anyway yeah yeah so I

1377
01:04:03,150 --> 01:04:08,130
I'm comfortable with that I'd want to

1378
01:04:06,540 --> 01:04:09,509
make sure that the rest of the working

1379
01:04:08,130 --> 01:04:11,100
group was comfortable as well because it

1380
01:04:09,510 --> 01:04:13,380
these things tend to be a bit of a

1381
01:04:11,100 --> 01:04:20,279
liability when they're hanging around so

1382
01:04:13,380 --> 01:04:22,020
we need to acknowledge that kyle nekritz

1383
01:04:20,280 --> 01:04:24,630
i think i might have mentioned this last

1384
01:04:22,020 --> 01:04:27,000
site if we have a like half completed

1385
01:04:24,630 --> 01:04:29,100
client and server implementation but um

1386
01:04:27,000 --> 01:04:32,400
yeah there hasn't really been any

1387
01:04:29,100 --> 01:04:35,819
movement on that in the past year so and

1388
01:04:32,400 --> 01:04:39,420
i'm not sure there's going to be any any

1389
01:04:35,820 --> 01:04:40,980
any time and then a very near future but

1390
01:04:39,420 --> 01:04:45,360
i have no problem with what the plan

1391
01:04:40,980 --> 01:04:47,820
Martin suggested from what we did get

1392
01:04:45,360 --> 01:04:54,390
done we didn't find any kind of real

1393
01:04:47,820 --> 01:04:56,700
issues in effect though yeah I think not

1394
01:04:54,390 --> 01:04:58,200
publishing and not killing is the sorry

1395
01:04:56,700 --> 01:05:00,660
Pat McManus I think not publishing in

1396
01:04:58,200 --> 01:05:04,290
killing is probably the right path here

1397
01:05:00,660 --> 01:05:06,230
I there are a number of use cases being

1398
01:05:04,290 --> 01:05:09,000
sort of explored on this but it's a

1399
01:05:06,230 --> 01:05:11,070
delicate thing to deploy even at a test

1400
01:05:09,000 --> 01:05:12,270
level so I certainly don't want to see

1401
01:05:11,070 --> 01:05:13,860
it deprecated so we have something to

1402
01:05:12,270 --> 01:05:14,970
work off of but yet publishing it

1403
01:05:13,860 --> 01:05:20,760
without the experiences

1404
01:05:14,970 --> 01:05:22,560
probably yeah and ego okay so it sounds

1405
01:05:20,760 --> 01:05:23,310
like keep on going and we'll just see

1406
01:05:22,560 --> 01:05:35,339
where it takes us

1407
01:05:23,310 --> 01:05:38,569
thank you yeah it's like okay expect CT

1408
01:05:35,339 --> 01:05:45,740
uh that's not see now isn't it

1409
01:05:38,569 --> 01:05:49,380
no what's happened to that one not yet

1410
01:05:45,740 --> 01:05:52,140
still in the RC editor Q I think it

1411
01:05:49,380 --> 01:05:52,470
didn't okay missus mr. F oh that makes

1412
01:05:52,140 --> 01:05:57,270
sense

1413
01:05:52,470 --> 01:06:01,828
I've got structured headers so we have

1414
01:05:57,270 --> 01:06:06,750
been chucking away at this our issues

1415
01:06:01,829 --> 01:06:08,910
list we're just doing some some I've

1416
01:06:06,750 --> 01:06:10,640
done an editorial pass through it and

1417
01:06:08,910 --> 01:06:13,560
there are a couple of knits left over

1418
01:06:10,640 --> 01:06:15,420
the only real discussion we have left is

1419
01:06:13,560 --> 01:06:18,810
around floats we still have a little bit

1420
01:06:15,420 --> 01:06:23,790
of discomfort around exactly what floats

1421
01:06:18,810 --> 01:06:25,619
are and especially since you know the on

1422
01:06:23,790 --> 01:06:26,640
wire representation and the model for

1423
01:06:25,619 --> 01:06:28,050
that is somewhat different from what

1424
01:06:26,640 --> 01:06:28,980
people are using implementations and

1425
01:06:28,050 --> 01:06:31,859
making sure we get those mappings

1426
01:06:28,980 --> 01:06:33,569
correct so that discussion continues I

1427
01:06:31,859 --> 01:06:34,859
don't know that it makes sense to go too

1428
01:06:33,569 --> 01:06:37,619
deep into that here

1429
01:06:34,859 --> 01:06:39,089
but we do have a pretty active

1430
01:06:37,619 --> 01:06:42,480
discussion there I think we're gonna

1431
01:06:39,089 --> 01:06:44,099
probably rename float to decimal it

1432
01:06:42,480 --> 01:06:45,720
seems to be that's that's the the sense

1433
01:06:44,099 --> 01:06:47,609
if folks have thoughts about that I'd

1434
01:06:45,720 --> 01:06:49,680
love to hear it

1435
01:06:47,609 --> 01:06:52,770
we do have multiple implementations we

1436
01:06:49,680 --> 01:06:55,259
have our test suite with almost 1500

1437
01:06:52,770 --> 01:06:57,030
tests in it now I recently got my

1438
01:06:55,260 --> 01:06:59,160
implementation doing both the pars again

1439
01:06:57,030 --> 01:07:02,849
serialization parts uh uh half of that

1440
01:06:59,160 --> 01:07:03,899
working which is great and I think it's

1441
01:07:02,849 --> 01:07:07,260
being implemented at least in the

1442
01:07:03,900 --> 01:07:11,970
civilization side in chrome by in income

1443
01:07:07,260 --> 01:07:14,430
so that's good Martin yeah yeah I'm

1444
01:07:11,970 --> 01:07:16,290
fully supportive of the move from float

1445
01:07:14,430 --> 01:07:19,049
to decimal I think dealing with floating

1446
01:07:16,290 --> 01:07:21,150
point numbers in here is has revealed a

1447
01:07:19,050 --> 01:07:22,530
whole lot of complexity that in

1448
01:07:21,150 --> 01:07:25,290
implementations that really isn't

1449
01:07:22,530 --> 01:07:27,180
warranted for this I had a question

1450
01:07:25,290 --> 01:07:28,700
though where we going to put the decimal

1451
01:07:27,180 --> 01:07:30,140
point well so to be clear

1452
01:07:28,700 --> 01:07:34,009
the current proposal is just to change

1453
01:07:30,140 --> 01:07:36,250
the name from float to decimal oh that's

1454
01:07:34,010 --> 01:07:38,990
terrible

1455
01:07:36,250 --> 01:07:41,390
we discussed this at the last meeting

1456
01:07:38,990 --> 01:07:45,200
and it seemed fairly clear that people

1457
01:07:41,390 --> 01:07:48,920
were happy with the effectively a fixed

1458
01:07:45,200 --> 01:07:51,890
point decimal right but what came up in

1459
01:07:48,920 --> 01:07:54,950
discussion was that that would result in

1460
01:07:51,890 --> 01:07:59,540
being unable to express certain types of

1461
01:07:54,950 --> 01:08:01,790
information such as for instance the

1462
01:07:59,540 --> 01:08:05,359
number of nanoseconds

1463
01:08:01,790 --> 01:08:08,930
since the UNIX epoch milliseconds would

1464
01:08:05,359 --> 01:08:13,270
be equally bad I think maybe maybe

1465
01:08:08,930 --> 01:08:15,770
there's microseconds I don't know but

1466
01:08:13,270 --> 01:08:17,028
that seemed to be the the thing that

1467
01:08:15,770 --> 01:08:18,140
motivated the change to go to a

1468
01:08:17,029 --> 01:08:21,080
floating-point number

1469
01:08:18,140 --> 01:08:22,489
I think that's a bad decision yeah

1470
01:08:21,080 --> 01:08:25,729
that's how I want I want to talk about

1471
01:08:22,488 --> 01:08:28,729
that a little bit I don't think that

1472
01:08:25,729 --> 01:08:31,429
that really happened that just sort of

1473
01:08:28,729 --> 01:08:33,259
happened and and Ryan it hit the rails

1474
01:08:31,430 --> 01:08:35,509
and and three people went off and

1475
01:08:33,259 --> 01:08:37,339
charged away with it and I'd like to

1476
01:08:35,509 --> 01:08:38,540
have a discussion about right well it's

1477
01:08:37,339 --> 01:08:39,830
also interesting because the the people

1478
01:08:38,540 --> 01:08:41,660
have been most active on this spec

1479
01:08:39,830 --> 01:08:43,370
aren't in the room here and don't

1480
01:08:41,660 --> 01:08:44,660
generally come here so we only know

1481
01:08:43,370 --> 01:08:47,238
where that to we have to be aware of

1482
01:08:44,660 --> 01:08:49,460
that yeah personally for me the high

1483
01:08:47,238 --> 01:08:51,830
order bit in this is that if we have a

1484
01:08:49,460 --> 01:08:54,710
flow to our decimal type or whatever it

1485
01:08:51,830 --> 01:08:56,330
needs to be able to represent what's in

1486
01:08:54,710 --> 01:08:59,480
carnage to be headers if we want to map

1487
01:08:56,330 --> 01:09:01,880
them to structured headers which is I

1488
01:08:59,479 --> 01:09:04,669
know not completely in scope for this

1489
01:09:01,880 --> 01:09:06,440
but it's an Intendant future and that

1490
01:09:04,670 --> 01:09:08,690
means mostly Q values I think I don't

1491
01:09:06,439 --> 01:09:11,149
know of any other big places where where

1492
01:09:08,689 --> 01:09:14,439
decimals are used in HTTP headers and

1493
01:09:11,149 --> 01:09:21,259
Royce getting up the correct thing so so

1494
01:09:14,439 --> 01:09:23,809
I'm getting them from Q values give

1495
01:09:21,259 --> 01:09:26,270
values Q values yeah so I'm not getting

1496
01:09:23,810 --> 01:09:29,330
from from that that we need a huge

1497
01:09:26,270 --> 01:09:31,130
dynamic range on these values which

1498
01:09:29,330 --> 01:09:35,769
suggests that we could go with something

1499
01:09:31,130 --> 01:09:38,480
a whole lot simpler but it seems like

1500
01:09:35,770 --> 01:09:40,759
the discussion that went on on the list

1501
01:09:38,479 --> 01:09:42,479
was quite quite firmly down the path of

1502
01:09:40,759 --> 01:09:49,979
well we need we need this bespoke

1503
01:09:42,479 --> 01:09:52,259
floating-point format Chris lemons asks

1504
01:09:49,979 --> 01:09:55,320
does anybody use more than two digits of

1505
01:09:52,259 --> 01:09:57,000
precision for Q values I think you guys

1506
01:09:55,320 --> 01:09:58,799
are specified as three if I remember

1507
01:09:57,000 --> 01:10:00,900
correctly right yeah this is Roy

1508
01:09:58,800 --> 01:10:07,830
fielding yes it's a three digit fixed

1509
01:10:00,900 --> 01:10:09,120
point so I guess I I guess the real

1510
01:10:07,830 --> 01:10:13,590
question here is if we're going to

1511
01:10:09,120 --> 01:10:15,599
express times as as numbers what are we

1512
01:10:13,590 --> 01:10:18,420
what do we think we might want to do in

1513
01:10:15,600 --> 01:10:20,100
the future about that and is that

1514
01:10:18,420 --> 01:10:22,560
sufficiently different to the use cases

1515
01:10:20,100 --> 01:10:25,020
we have for say Q values that we can

1516
01:10:22,560 --> 01:10:28,200
worry about that problem at that future

1517
01:10:25,020 --> 01:10:30,270
time right well so to be clear if we're

1518
01:10:28,200 --> 01:10:33,090
talking about back there two cases four

1519
01:10:30,270 --> 01:10:35,400
times one is backporting existing

1520
01:10:33,090 --> 01:10:37,440
time-based values in HTTP like the date

1521
01:10:35,400 --> 01:10:39,210
header yes modified nixing iris no those

1522
01:10:37,440 --> 01:10:40,860
are all at one second resolutions that

1523
01:10:39,210 --> 01:10:44,040
are all gonna be integers so that is

1524
01:10:40,860 --> 01:10:45,509
fine hazy until someday far far far in

1525
01:10:44,040 --> 01:10:48,269
the future because we've got 15 digits

1526
01:10:45,510 --> 01:10:50,820
to work with yep in integers in

1527
01:10:48,270 --> 01:10:53,910
structured and then there's if I want to

1528
01:10:50,820 --> 01:10:56,730
introduce a new field that has something

1529
01:10:53,910 --> 01:10:57,900
like millisecond time in it hey there's

1530
01:10:56,730 --> 01:10:59,190
a question of whether that's a good idea

1531
01:10:57,900 --> 01:11:01,559
which has always been a contentious

1532
01:10:59,190 --> 01:11:04,049
issue in HTTP assuming that it is a good

1533
01:11:01,560 --> 01:11:05,640
idea you don't have to start with

1534
01:11:04,050 --> 01:11:07,020
floating-point you could start with an

1535
01:11:05,640 --> 01:11:09,600
integer and say this is the integer

1536
01:11:07,020 --> 01:11:11,190
number oh you're making my arguments for

1537
01:11:09,600 --> 01:11:17,100
me thank you yep that's why I'm here

1538
01:11:11,190 --> 01:11:19,080
Martin Thompson so all right so I think

1539
01:11:17,100 --> 01:11:25,470
the proposal is to go to fixed point how

1540
01:11:19,080 --> 01:11:27,480
do people feel noted Chris lemon says I

1541
01:11:25,470 --> 01:11:29,400
observed that quite recently we defined

1542
01:11:27,480 --> 01:11:31,769
some high resolution times as integer

1543
01:11:29,400 --> 01:11:37,290
milliseconds see the cash status header

1544
01:11:31,770 --> 01:11:40,170
and he is +1 on fixed point and this

1545
01:11:37,290 --> 01:11:43,590
isn't going to be a fixed point at what

1546
01:11:40,170 --> 01:11:45,510
I think three three digits three or six

1547
01:11:43,590 --> 01:11:48,590
and we cannot listed him for three if we

1548
01:11:45,510 --> 01:11:48,590
want to make it backwards compatible

1549
01:11:49,940 --> 01:11:52,990
[Music]

1550
01:11:55,080 --> 01:11:59,350
so this has been contentious and I think

1551
01:11:57,489 --> 01:12:02,919
it brought we can make a proposal and

1552
01:11:59,350 --> 01:12:04,840
list it's gonna come up on last or on

1553
01:12:02,920 --> 01:12:07,270
the issue I'd like to get a better sense

1554
01:12:04,840 --> 01:12:09,180
of the room personally I think the

1555
01:12:07,270 --> 01:12:12,610
precise number of digits is a bike shed

1556
01:12:09,180 --> 01:12:14,650
agreed no I mean about it being becoming

1557
01:12:12,610 --> 01:12:16,809
a fixed point so could we get a sense of

1558
01:12:14,650 --> 01:12:18,790
the room yeah I think you might want to

1559
01:12:16,810 --> 01:12:22,560
want to do a Hammond on fixed point

1560
01:12:18,790 --> 01:12:22,560
first floating point on this one sure

1561
01:12:22,680 --> 01:12:30,219
all right so we're gonna take a home

1562
01:12:25,630 --> 01:12:32,800
we're gonna meet two options first we'll

1563
01:12:30,219 --> 01:12:35,969
ask if people would like to switch to

1564
01:12:32,800 --> 01:12:41,230
used fixed point for anything that is a

1565
01:12:35,969 --> 01:12:42,780
fractional number and then the second

1566
01:12:41,230 --> 01:12:46,089
question will be if you prefer to use

1567
01:12:42,780 --> 01:12:47,200
floating point as we do today and try to

1568
01:12:46,090 --> 01:12:49,960
figure out that world

1569
01:12:47,200 --> 01:12:57,130
alright so please hum now if you prefer

1570
01:12:49,960 --> 01:12:59,530
to switch to fixed point and please hum

1571
01:12:57,130 --> 01:13:04,270
now if you would prefer to use floating

1572
01:12:59,530 --> 01:13:05,950
point okay so for the minutes it was

1573
01:13:04,270 --> 01:13:09,010
stronger for fixed point there was some

1574
01:13:05,950 --> 01:13:10,360
humming for floating but if anyone who

1575
01:13:09,010 --> 01:13:12,250
hum for flooding will be willing to come

1576
01:13:10,360 --> 01:13:14,830
up and say why I thought it'd be really

1577
01:13:12,250 --> 01:13:21,130
good information mm-hmm this is not a

1578
01:13:14,830 --> 01:13:26,500
slam dunk obviously or on jabber thank

1579
01:13:21,130 --> 01:13:28,360
you for fixed for free yeah well the

1580
01:13:26,500 --> 01:13:29,620
home was for fixed but we're asking if

1581
01:13:28,360 --> 01:13:35,710
there's feedback as to why people hum

1582
01:13:29,620 --> 01:13:36,940
for Flair Chris observes it's worth

1583
01:13:35,710 --> 01:13:39,280
noting that the floating point

1584
01:13:36,940 --> 01:13:42,099
proponents are mostly out of the room

1585
01:13:39,280 --> 01:13:44,320
that's so for me I think I have an

1586
01:13:42,100 --> 01:13:46,150
action to go and engage with the other

1587
01:13:44,320 --> 01:13:48,219
people who aren't here and who have been

1588
01:13:46,150 --> 01:13:49,989
active on the spec as well as the

1589
01:13:48,219 --> 01:13:51,280
communities that have started to adopt

1590
01:13:49,989 --> 01:13:54,250
structured headers because there are

1591
01:13:51,280 --> 01:13:56,559
they are out there I don't think any of

1592
01:13:54,250 --> 01:13:58,420
them are using floating yet but I want

1593
01:13:56,560 --> 01:14:01,440
to double check and make sure that this

1594
01:13:58,420 --> 01:14:03,930
doesn't cause concern those communities

1595
01:14:01,440 --> 01:14:10,389
so

1596
01:14:03,930 --> 01:14:12,520
we'll see but from a interoperability

1597
01:14:10,390 --> 01:14:21,930
standpoint personally I feel better

1598
01:14:12,520 --> 01:14:24,400
about fixed repair to pay on Facebook a

1599
01:14:21,930 --> 01:14:25,360
lot of well there's a fair bit of

1600
01:14:24,400 --> 01:14:27,849
hardware out there that doesn't even

1601
01:14:25,360 --> 01:14:29,799
have floating-point units so it would

1602
01:14:27,850 --> 01:14:31,870
make floating-point even more

1603
01:14:29,800 --> 01:14:35,550
challenging it would get converted to

1604
01:14:31,870 --> 01:14:39,269
fixed point on most of those platforms

1605
01:14:35,550 --> 01:14:42,430
there is a really fun hardware

1606
01:14:39,270 --> 01:14:48,940
restriction for this so I in addition to

1607
01:14:42,430 --> 01:14:52,060
all the other stuff julian comments an

1608
01:14:48,940 --> 01:14:54,219
alternative solution would be to get rid

1609
01:14:52,060 --> 01:14:59,260
of it and define an extension later if

1610
01:14:54,220 --> 01:15:01,300
needed yeah I've thought of that I think

1611
01:14:59,260 --> 01:15:04,930
having it around for backporting things

1612
01:15:01,300 --> 01:15:07,450
like Q value makes it valuable and for

1613
01:15:04,930 --> 01:15:10,630
other a couple of other simple use cases

1614
01:15:07,450 --> 01:15:11,920
but I'm much more happy or I'm becoming

1615
01:15:10,630 --> 01:15:13,360
more happy without kind of a limited

1616
01:15:11,920 --> 01:15:15,850
value thing rather than making it so

1617
01:15:13,360 --> 01:15:17,799
flexible yeah I guess the argument

1618
01:15:15,850 --> 01:15:19,600
against doing something like that is

1619
01:15:17,800 --> 01:15:22,690
that this is fairly tightly coupled into

1620
01:15:19,600 --> 01:15:24,550
the into the numeric serialization and

1621
01:15:22,690 --> 01:15:27,460
parsing routines that that you have in

1622
01:15:24,550 --> 01:15:29,560
the spec and so having it integrated

1623
01:15:27,460 --> 01:15:32,680
into the spec makes it a lot easier to

1624
01:15:29,560 --> 01:15:34,630
be sure that people get that distinction

1625
01:15:32,680 --> 01:15:36,970
between the two of them correct whereas

1626
01:15:34,630 --> 01:15:38,800
in an extension we might have to think

1627
01:15:36,970 --> 01:15:40,900
about having a different flag to go at

1628
01:15:38,800 --> 01:15:42,190
the front of it in order to properly

1629
01:15:40,900 --> 01:15:43,420
distinguish it from other types of

1630
01:15:42,190 --> 01:15:45,460
fields and that sort of thing that's

1631
01:15:43,420 --> 01:15:46,840
actually a very good point yeah we we

1632
01:15:45,460 --> 01:15:50,290
are this is one of the few places works

1633
01:15:46,840 --> 01:15:52,540
where we're exploiting that yeah Julian

1634
01:15:50,290 --> 01:15:58,510
says Q value can be sent as four-digit

1635
01:15:52,540 --> 01:16:00,460
end of course it can but but it you know

1636
01:15:58,510 --> 01:16:01,450
so I have a separate draft which is not

1637
01:16:00,460 --> 01:16:03,460
in scope for this working group now

1638
01:16:01,450 --> 01:16:05,740
which is how do you back port existing

1639
01:16:03,460 --> 01:16:07,630
headers on to structured headers and a

1640
01:16:05,740 --> 01:16:09,550
lot of value a lot of headers use key

1641
01:16:07,630 --> 01:16:13,620
values would be nice to be able to not

1642
01:16:09,550 --> 01:16:13,620
require different serialization of them

1643
01:16:13,860 --> 01:16:18,250
gothics I'm wondering if it would

1644
01:16:16,570 --> 01:16:19,869
if the only use case for this is Q value

1645
01:16:18,250 --> 01:16:21,219
is I'm wondering if a much tighter drier

1646
01:16:19,869 --> 01:16:22,299
structure that can only represent values

1647
01:16:21,219 --> 01:16:23,800
between 0 & 1

1648
01:16:22,300 --> 01:16:25,329
rather than arbitrary floating point

1649
01:16:23,800 --> 01:16:28,300
would be it would be the right data type

1650
01:16:25,329 --> 01:16:32,500
here I'm seeing shaking heads and I'm

1651
01:16:28,300 --> 01:16:34,869
wondering why I think if we're gonna go

1652
01:16:32,500 --> 01:16:37,239
to the point of describing something

1653
01:16:34,869 --> 01:16:41,530
decimal you know saying okay well fixed

1654
01:16:37,239 --> 01:16:44,589
point decimal numbers that has utility

1655
01:16:41,530 --> 01:16:46,540
still without a lot of work and older

1656
01:16:44,590 --> 01:16:48,730
and again the interoperability profile

1657
01:16:46,540 --> 01:16:51,190
is still pretty tight so or just as

1658
01:16:48,730 --> 01:16:52,780
tight I want to check this HTH real

1659
01:16:51,190 --> 01:16:55,719
quick I think everything here is done

1660
01:16:52,780 --> 01:16:59,050
except for like oh yeah that was the

1661
01:16:55,719 --> 01:17:01,270
decimal thing yeah so uh please do have

1662
01:16:59,050 --> 01:17:03,010
a look at the spec Delta that issue I

1663
01:17:01,270 --> 01:17:04,329
think it's pretty much ready to go

1664
01:17:03,010 --> 01:17:05,710
we're gonna have a couple more editorial

1665
01:17:04,329 --> 01:17:07,299
passes through it just to make sure

1666
01:17:05,710 --> 01:17:09,690
because it's hyper important that this

1667
01:17:07,300 --> 01:17:12,699
one gets it right the first time out mhm

1668
01:17:09,690 --> 01:17:14,799
Julian says what Mark just said is

1669
01:17:12,699 --> 01:17:17,138
interesting as the goals for this spec

1670
01:17:14,800 --> 01:17:18,250
seem to change from time to time smiley

1671
01:17:17,139 --> 01:17:20,800
face

1672
01:17:18,250 --> 01:17:23,710
so is backporting existing header fields

1673
01:17:20,800 --> 01:17:26,790
now a goal as I said it's not a goal for

1674
01:17:23,710 --> 01:17:30,790
this spec but it is not terrier motive

1675
01:17:26,790 --> 01:17:32,889
for a document to come okay it's so

1676
01:17:30,790 --> 01:17:35,889
schedule wise when do you think we want

1677
01:17:32,889 --> 01:17:39,940
to go to I am I would love to get a

1678
01:17:35,889 --> 01:17:40,900
working group last call in 2019 okay the

1679
01:17:39,940 --> 01:17:43,629
clock is ticking

1680
01:17:40,900 --> 01:17:47,320
indeed it is especially since I have a

1681
01:17:43,630 --> 01:17:51,639
holiday scheduled rear took am I'll I'll

1682
01:17:47,320 --> 01:17:55,449
note that the priorities scuf wants to

1683
01:17:51,639 --> 01:17:57,400
depend on this so yay sooner yes that's

1684
01:17:55,449 --> 01:17:59,440
there are now a number of respects

1685
01:17:57,400 --> 01:18:04,059
queued up for this and so we're under a

1686
01:17:59,440 --> 01:18:13,949
certain amount of pressure okay client

1687
01:18:04,060 --> 01:18:17,139
hints where he discussed 66-65 Biss oh I

1688
01:18:13,949 --> 01:18:19,619
think I need to close their feet because

1689
01:18:17,139 --> 01:18:22,659
we said this is still Julian because

1690
01:18:19,619 --> 01:18:25,239
Julius Villa Julian because we said last

1691
01:18:22,659 --> 01:18:28,348
time that the URI type is not needed

1692
01:18:25,239 --> 01:18:29,928
because backporting was not a goal

1693
01:18:28,349 --> 01:18:31,670
that's not

1694
01:18:29,929 --> 01:18:33,590
we said that the yarra type was not

1695
01:18:31,670 --> 01:18:34,849
needed because we couldn't define it

1696
01:18:33,590 --> 01:18:40,699
with good a good interoperability

1697
01:18:34,849 --> 01:18:45,380
profile and now I'm waiting for Julian's

1698
01:18:40,699 --> 01:18:47,419
response we did close that issue

1699
01:18:45,380 --> 01:18:50,300
previously I don't really want to open

1700
01:18:47,420 --> 01:18:51,770
that one again you so sixty to

1701
01:18:50,300 --> 01:18:54,409
sixty-five this is still an open

1702
01:18:51,770 --> 01:18:55,670
document um we still have a number of

1703
01:18:54,409 --> 01:18:59,030
open issues on it I believe there we

1704
01:18:55,670 --> 01:19:00,230
have 1818 so I think we're gonna have a

1705
01:18:59,030 --> 01:19:01,969
chat with the editors again about that

1706
01:19:00,230 --> 01:19:03,259
and figure out yeah how we can move that

1707
01:19:01,969 --> 01:19:04,429
forward I don't think we have anything

1708
01:19:03,260 --> 01:19:06,739
to report at this meeting because there

1709
01:19:04,429 --> 01:19:08,690
hasn't been any activity but we need to

1710
01:19:06,739 --> 01:19:12,949
see a way to get that to conclusion

1711
01:19:08,690 --> 01:19:15,169
somehow any other comments on our open

1712
01:19:12,949 --> 01:19:21,409
extension drafts I think that covers

1713
01:19:15,170 --> 01:19:23,570
everything okay so we're doing pretty

1714
01:19:21,409 --> 01:19:40,699
well on time actually compression

1715
01:19:23,570 --> 01:19:43,460
dictionaries hi my name is Felix anta

1716
01:19:40,699 --> 01:19:45,440
and I've written a draft that talks

1717
01:19:43,460 --> 01:19:50,380
about the security properties of

1718
01:19:45,440 --> 01:19:50,379
compression with dictionaries next slide

1719
01:19:50,440 --> 01:19:59,210
so why am i standing up here why is this

1720
01:19:54,050 --> 01:20:04,040
interesting for HTTP piss compression is

1721
01:19:59,210 --> 01:20:11,000
a crucial feature of http low in may be

1722
01:20:04,040 --> 01:20:13,969
a controversial one as long as the web

1723
01:20:11,000 --> 01:20:16,400
is made out of text and particularly

1724
01:20:13,969 --> 01:20:20,449
JSON compression will continue to

1725
01:20:16,400 --> 01:20:27,559
provide a great deal of value and next

1726
01:20:20,449 --> 01:20:30,888
slide so in pursuing achieving the best

1727
01:20:27,560 --> 01:20:33,139
compression ratio the choice of

1728
01:20:30,889 --> 01:20:35,440
algorithm plays an important role but

1729
01:20:33,139 --> 01:20:38,360
once you've done that I believe that

1730
01:20:35,440 --> 01:20:42,589
compression dictionaries are the next

1731
01:20:38,360 --> 01:20:43,870
frontier and as you can see we've seen

1732
01:20:42,590 --> 01:20:47,230
pretty significant way

1733
01:20:43,870 --> 01:20:54,750
in deploying our own content coding at

1734
01:20:47,230 --> 01:20:54,750
Facebook next slide for those unfamiliar

1735
01:20:56,040 --> 01:21:02,560
for those unfamiliar dictionary based

1736
01:20:59,320 --> 01:21:04,719
compression is this technique where you

1737
01:21:02,560 --> 01:21:06,880
provide some external state to the

1738
01:21:04,720 --> 01:21:08,920
compressor and it can use that to

1739
01:21:06,880 --> 01:21:11,820
produce a more compact representation of

1740
01:21:08,920 --> 01:21:14,950
the message when we're talking about a

1741
01:21:11,820 --> 01:21:19,360
response body compression we're usually

1742
01:21:14,950 --> 01:21:22,210
talking about an LZ compressor so the

1743
01:21:19,360 --> 01:21:24,910
dictionary is basically content that you

1744
01:21:22,210 --> 01:21:26,950
can make string matches against so

1745
01:21:24,910 --> 01:21:28,870
rather than having to represent some

1746
01:21:26,950 --> 01:21:31,740
string in the compressed message you can

1747
01:21:28,870 --> 01:21:34,769
just omit a reference to the dictionary

1748
01:21:31,740 --> 01:21:38,710
there are other kinds of dictionary

1749
01:21:34,770 --> 01:21:41,670
based compression algorithms H pack and

1750
01:21:38,710 --> 01:21:47,620
Q pack are examples that may be familiar

1751
01:21:41,670 --> 01:21:51,400
next slide this technique does have

1752
01:21:47,620 --> 01:21:54,570
drawbacks and in particular the blocking

1753
01:21:51,400 --> 01:21:57,190
problem in previous attempts has been

1754
01:21:54,570 --> 01:22:01,740
concerns about introducing new security

1755
01:21:57,190 --> 01:22:04,780
vulnerabilities next slide

1756
01:22:01,740 --> 01:22:06,550
nonetheless I think this is something we

1757
01:22:04,780 --> 01:22:09,070
should do we should standardize and

1758
01:22:06,550 --> 01:22:11,590
deploy a dictionary based content coding

1759
01:22:09,070 --> 01:22:15,040
I hope to work with you all to do that

1760
01:22:11,590 --> 01:22:17,050
in the future but it's become clear that

1761
01:22:15,040 --> 01:22:19,690
first in order to do that we need to

1762
01:22:17,050 --> 01:22:26,320
better understand the security

1763
01:22:19,690 --> 01:22:28,660
properties of the domain X slide so I

1764
01:22:26,320 --> 01:22:31,719
have written a draft that attempts to do

1765
01:22:28,660 --> 01:22:34,090
that that involves a few different

1766
01:22:31,720 --> 01:22:36,790
things it starts by looking at

1767
01:22:34,090 --> 01:22:39,730
dictionary based compression as well as

1768
01:22:36,790 --> 01:22:42,340
the machinery and choices that surround

1769
01:22:39,730 --> 01:22:44,879
it that you have to make when you

1770
01:22:42,340 --> 01:22:51,370
integrate it into an internet protocol

1771
01:22:44,880 --> 01:22:54,100
it lists the security questions that

1772
01:22:51,370 --> 01:22:56,460
arise as a result of both that

1773
01:22:54,100 --> 01:22:57,800
compression and the surrounding

1774
01:22:56,460 --> 01:23:02,780
mechanisms

1775
01:22:57,800 --> 01:23:09,040
and finally it lists mitigations where

1776
01:23:02,780 --> 01:23:11,420
they're known so in investigating the

1777
01:23:09,040 --> 01:23:14,240
security properties in this domain I

1778
01:23:11,420 --> 01:23:19,280
think there are two categories that are

1779
01:23:14,240 --> 01:23:22,730
worth talking about next slide the first

1780
01:23:19,280 --> 01:23:26,900
is this existing class of attacks

1781
01:23:22,730 --> 01:23:30,500
against compression you know which is

1782
01:23:26,900 --> 01:23:33,799
the crime breach heist series in which

1783
01:23:30,500 --> 01:23:35,480
as an attacker if you can introduce data

1784
01:23:33,800 --> 01:23:38,630
under your control into the same

1785
01:23:35,480 --> 01:23:40,580
compression window as user secrets that

1786
01:23:38,630 --> 01:23:41,990
you're trying to discover when they're

1787
01:23:40,580 --> 01:23:45,019
compressed together you can look at the

1788
01:23:41,990 --> 01:23:47,150
size of the compressed message and use

1789
01:23:45,020 --> 01:23:55,100
that as a channel to extract information

1790
01:23:47,150 --> 01:23:57,530
about that secret next slide so this

1791
01:23:55,100 --> 01:23:59,930
attack applies just as well to

1792
01:23:57,530 --> 01:24:02,030
dictionary based compression which is a

1793
01:23:59,930 --> 01:24:04,850
concern and actually possibly even more

1794
01:24:02,030 --> 01:24:07,219
so because dictionary based compression

1795
01:24:04,850 --> 01:24:09,410
is precisely the process of taking two

1796
01:24:07,220 --> 01:24:12,230
different pieces of content and putting

1797
01:24:09,410 --> 01:24:15,230
them in the same compression window so

1798
01:24:12,230 --> 01:24:20,120
it potentially creates new avenues

1799
01:24:15,230 --> 01:24:22,700
towards mixing attacker and user data so

1800
01:24:20,120 --> 01:24:26,710
that requires careful consideration next

1801
01:24:22,700 --> 01:24:28,820
slide the other category

1802
01:24:26,710 --> 01:24:33,170
sort of broad category that's worth

1803
01:24:28,820 --> 01:24:35,599
talking about is the security questions

1804
01:24:33,170 --> 01:24:37,670
that arise from all of the other things

1805
01:24:35,600 --> 01:24:40,250
you need to do to do dictionary based

1806
01:24:37,670 --> 01:24:42,680
compression dictionaries are pieces of

1807
01:24:40,250 --> 01:24:45,980
state so somewhere you have to create

1808
01:24:42,680 --> 01:24:48,110
them you have to distribute them you

1809
01:24:45,980 --> 01:24:50,719
have to agree with your calendar party

1810
01:24:48,110 --> 01:24:53,480
which one you're going to use or if

1811
01:24:50,720 --> 01:24:55,550
you're going to use one at all then you

1812
01:24:53,480 --> 01:24:57,500
have to actually use it and eventually

1813
01:24:55,550 --> 01:24:59,900
at some point you want to learn whether

1814
01:24:57,500 --> 01:25:04,310
it's safe to delete it or whether you

1815
01:24:59,900 --> 01:25:06,950
still have to retain it and so the draft

1816
01:25:04,310 --> 01:25:09,250
looks at whether there are security

1817
01:25:06,950 --> 01:25:12,349
implications in those activities as well

1818
01:25:09,250 --> 01:25:17,370
next slide

1819
01:25:12,350 --> 01:25:21,230
so this is the list of kinds of attacks

1820
01:25:17,370 --> 01:25:24,120
that the document currently discusses I

1821
01:25:21,230 --> 01:25:26,120
tried to figure out how I could say more

1822
01:25:24,120 --> 01:25:28,889
meaningful things about these without

1823
01:25:26,120 --> 01:25:31,559
using vastly more than my allotted time

1824
01:25:28,889 --> 01:25:33,540
so instead I will just refer you to the

1825
01:25:31,560 --> 01:25:38,969
document which discusses them in some

1826
01:25:33,540 --> 01:25:42,480
detail next slide and so that leaves me

1827
01:25:38,969 --> 01:25:46,800
with the question is this work does this

1828
01:25:42,480 --> 01:25:49,559
work belong in HTTP this and if so what

1829
01:25:46,800 --> 01:25:55,110
is the path towards adoption from here

1830
01:25:49,560 --> 01:25:59,300
so thanks next slide I look forward to

1831
01:25:55,110 --> 01:26:01,409
hearing your thoughts questions comments

1832
01:25:59,300 --> 01:26:03,420
thank you very much

1833
01:26:01,409 --> 01:26:04,920
so for folks who have been here for a

1834
01:26:03,420 --> 01:26:06,690
while you know that we've had this

1835
01:26:04,920 --> 01:26:08,850
discussion in several ways over the

1836
01:26:06,690 --> 01:26:10,830
years there's a lot of folks interested

1837
01:26:08,850 --> 01:26:13,560
in you know doing dictionary based

1838
01:26:10,830 --> 01:26:15,179
compression in HTTP there was always

1839
01:26:13,560 --> 01:26:17,219
this roadblock of what are the security

1840
01:26:15,179 --> 01:26:20,310
properties of it and so thank you so

1841
01:26:17,219 --> 01:26:21,929
much for for doing such a fantastic job

1842
01:26:20,310 --> 01:26:23,699
and trying to write that down and

1843
01:26:21,929 --> 01:26:26,190
document that so we can continue that

1844
01:26:23,699 --> 01:26:27,960
discussion I don't know that we can come

1845
01:26:26,190 --> 01:26:29,669
to any answers today but I'd love to

1846
01:26:27,960 --> 01:26:31,679
hear what people are thinking you know

1847
01:26:29,670 --> 01:26:34,739
who we see if show henan who's read the

1848
01:26:31,679 --> 01:26:36,510
document so far okay so it's mattering

1849
01:26:34,739 --> 01:26:37,830
across the room I'm hoping we'll have

1850
01:26:36,510 --> 01:26:40,679
more people read it so we can continue

1851
01:26:37,830 --> 01:26:42,330
that discussion go ahead right so I was

1852
01:26:40,679 --> 01:26:45,090
interested in using it as well for a

1853
01:26:42,330 --> 01:26:48,449
different protocol but yeah sure great I

1854
01:26:45,090 --> 01:26:50,429
think it should be adopted yeah and so

1855
01:26:48,449 --> 01:26:52,799
one of the questions about the home for

1856
01:26:50,429 --> 01:26:54,719
this is I think it's motivated largely

1857
01:26:52,800 --> 01:26:56,840
by work that will happen in this group

1858
01:26:54,719 --> 01:26:59,969
but I did try to write the document

1859
01:26:56,840 --> 01:27:03,750
generically so it could apply to any

1860
01:26:59,969 --> 01:27:05,310
internet protocol so there might be a

1861
01:27:03,750 --> 01:27:07,530
question of at least coordination with

1862
01:27:05,310 --> 01:27:10,620
the security area there to see if they

1863
01:27:07,530 --> 01:27:12,630
want to take first pass at it or yeah we

1864
01:27:10,620 --> 01:27:13,830
can talk to where a director and talk to

1865
01:27:12,630 --> 01:27:16,440
the security area directors and see what

1866
01:27:13,830 --> 01:27:18,350
they think you didn't talk about this

1867
01:27:16,440 --> 01:27:20,388
that's act dispatch at any point did you

1868
01:27:18,350 --> 01:27:26,300
okay

1869
01:27:20,389 --> 01:27:27,709
any other thoughts for folks okay I see

1870
01:27:26,300 --> 01:27:29,419
thumbs up thank you again for doing that

1871
01:27:27,709 --> 01:27:31,459
and we'll have some background

1872
01:27:29,419 --> 01:27:33,289
discussions to figure out what the next

1873
01:27:31,459 --> 01:27:38,090
steps in that discussion are but thanks

1874
01:27:33,289 --> 01:27:40,429
again so I think we have we definitely

1875
01:27:38,090 --> 01:27:47,689
have time permitting we have one more

1876
01:27:40,429 --> 01:27:53,749
presentation scheduled James did you

1877
01:27:47,689 --> 01:27:56,030
want to talk to about the night anyway

1878
01:27:53,749 --> 01:27:57,709
extension things yeah thank you for

1879
01:27:56,030 --> 01:28:01,369
reminding me we'll do that after this we

1880
01:27:57,709 --> 01:28:04,519
do have time so I'm James Christian from

1881
01:28:01,369 --> 01:28:06,919
the BBC uh I would like to introduce a

1882
01:28:04,519 --> 01:28:11,300
new header to represent transport

1883
01:28:06,919 --> 01:28:15,050
information next slide please so

1884
01:28:11,300 --> 01:28:18,379
including various states like you know

1885
01:28:15,050 --> 01:28:21,739
at each of the connections RTT are the

1886
01:28:18,379 --> 01:28:24,439
sender's congestion window and I want to

1887
01:28:21,739 --> 01:28:26,079
do this for a couple of reasons it's for

1888
01:28:24,439 --> 01:28:29,629
clients that can't get this directly

1889
01:28:26,079 --> 01:28:32,239
particularly for JavaScript inside of

1890
01:28:29,629 --> 01:28:33,679
web browsers or perhaps revealing

1891
01:28:32,239 --> 01:28:38,360
information about the connectivity

1892
01:28:33,679 --> 01:28:42,349
between CDN and origin there is already

1893
01:28:38,360 --> 01:28:44,179
a w3 standard called net info but for a

1894
01:28:42,349 --> 01:28:47,389
bunch of reasons it doesn't expose a lot

1895
01:28:44,179 --> 01:28:49,849
of this information and it's not it's

1896
01:28:47,389 --> 01:28:52,579
not extensible we don't want to do this

1897
01:28:49,849 --> 01:28:56,239
exclusively for TCP we could do it for

1898
01:28:52,579 --> 01:28:59,449
quick or anything else and we also allow

1899
01:28:56,239 --> 01:29:02,089
for multiple samples so that are all

1900
01:28:59,449 --> 01:29:05,869
time and time based next slide please

1901
01:29:02,090 --> 01:29:08,780
a couple of examples here really quickly

1902
01:29:05,869 --> 01:29:10,629
if you don't understand what I'm saying

1903
01:29:08,780 --> 01:29:14,059
that's roughly what they're looking like

1904
01:29:10,629 --> 01:29:15,769
next slide there is a couple of issues

1905
01:29:14,059 --> 01:29:17,809
in a 0-0 draft that were already aware

1906
01:29:15,769 --> 01:29:21,169
of such as how to deal with connect

1907
01:29:17,809 --> 01:29:27,079
proxies a LPN might be problematic

1908
01:29:21,169 --> 01:29:29,449
because for non h2 or h2 and lower the

1909
01:29:27,079 --> 01:29:31,129
it's not clear it won't be clear to the

1910
01:29:29,449 --> 01:29:32,209
receiving and whether or not TLS is

1911
01:29:31,129 --> 01:29:34,040
being involved

1912
01:29:32,209 --> 01:29:38,080
our current represent a

1913
01:29:34,040 --> 01:29:41,150
of time is probably over-engineered

1914
01:29:38,080 --> 01:29:43,340
and there maybe it's not clear whether

1915
01:29:41,150 --> 01:29:46,280
or not we're being clear enough about

1916
01:29:43,340 --> 01:29:52,070
which fields are exhaustive or in

1917
01:29:46,280 --> 01:29:54,639
exhaustive are you aerial time I wonder

1918
01:29:52,070 --> 01:29:55,969
what you can't I'm pretty much done okay

1919
01:29:54,640 --> 01:29:58,220
thanks

1920
01:29:55,970 --> 01:30:00,260
in sweat Google I had two questions one

1921
01:29:58,220 --> 01:30:03,140
is whether you considered using this as

1922
01:30:00,260 --> 01:30:04,760
a request header as well because there

1923
01:30:03,140 --> 01:30:06,350
are use cases where you're an

1924
01:30:04,760 --> 01:30:08,540
intermediary going back to a back end

1925
01:30:06,350 --> 01:30:11,720
and you want to actually supply a

1926
01:30:08,540 --> 01:30:14,200
different response to the original

1927
01:30:11,720 --> 01:30:18,280
client based on the client properties

1928
01:30:14,200 --> 01:30:21,139
and at least that's a plausible use case

1929
01:30:18,280 --> 01:30:26,509
worth considering the other question of

1930
01:30:21,140 --> 01:30:30,050
course is trying to think of I mean this

1931
01:30:26,510 --> 01:30:31,910
is this is presumably the last hop right

1932
01:30:30,050 --> 01:30:33,230
so like you wouldn't want like if there

1933
01:30:31,910 --> 01:30:35,690
was an interview area you wouldn't want

1934
01:30:33,230 --> 01:30:38,419
the origin sending this back and then

1935
01:30:35,690 --> 01:30:40,759
having the intermediary proxy it like I

1936
01:30:38,420 --> 01:30:42,290
don't know that's all they also haven't

1937
01:30:40,760 --> 01:30:43,880
defined you know yeah well caching to

1938
01:30:42,290 --> 01:30:45,650
you but like let's like assume caching

1939
01:30:43,880 --> 01:30:47,360
isn't I just want to make sure like this

1940
01:30:45,650 --> 01:30:50,480
is kind of this is really only the very

1941
01:30:47,360 --> 01:30:51,620
like last hop of the or I don't know you

1942
01:30:50,480 --> 01:30:55,059
might want to figure out like what hop

1943
01:30:51,620 --> 01:30:55,059
it is I guess really is what I'm saying

1944
01:30:56,040 --> 01:31:03,200
[Laughter]

1945
01:30:59,410 --> 01:31:05,030
Chris lemons asks this information is

1946
01:31:03,200 --> 01:31:07,670
mostly information that the browser

1947
01:31:05,030 --> 01:31:09,800
already has access to right is this

1948
01:31:07,670 --> 01:31:11,780
motivated mostly as an end run around

1949
01:31:09,800 --> 01:31:14,810
the browser choosing not to provide this

1950
01:31:11,780 --> 01:31:18,019
information to the client ah

1951
01:31:14,810 --> 01:31:21,080
so going back to two of the motivations

1952
01:31:18,020 --> 01:31:24,950
the browser does have it but the api's

1953
01:31:21,080 --> 01:31:28,850
that are currently defined so the net

1954
01:31:24,950 --> 01:31:31,780
w3c net info doesn't expose all of the

1955
01:31:28,850 --> 01:31:36,130
values and it's more focused around

1956
01:31:31,780 --> 01:31:39,410
exposing some estimation of what the

1957
01:31:36,130 --> 01:31:41,150
bandwidth or connectivity for the thing

1958
01:31:39,410 --> 01:31:43,970
might be and I think there's some

1959
01:31:41,150 --> 01:31:46,490
privacy implications of exposing other

1960
01:31:43,970 --> 01:31:49,160
values like RTT and friends because it's

1961
01:31:46,490 --> 01:31:52,469
a basically figure print

1962
01:31:49,160 --> 01:31:55,519
okay and he and I do assume this header

1963
01:31:52,470 --> 01:32:04,110
would be listed in the connection header

1964
01:31:55,520 --> 01:32:05,460
untrue that doesn't help in h2 it's that

1965
01:32:04,110 --> 01:32:08,309
hard a clarifying question about what

1966
01:32:05,460 --> 01:32:10,770
API surface is you're planning to have

1967
01:32:08,310 --> 01:32:12,540
access to in particular I'm assuming

1968
01:32:10,770 --> 01:32:14,220
from the discussion so far that you

1969
01:32:12,540 --> 01:32:16,380
never plan to pass this out of the

1970
01:32:14,220 --> 01:32:18,270
browser as additional information into

1971
01:32:16,380 --> 01:32:19,950
something like an OS congestion

1972
01:32:18,270 --> 01:32:22,050
controller or something like that you're

1973
01:32:19,950 --> 01:32:23,490
just going to use this or the

1974
01:32:22,050 --> 01:32:25,500
information that browser needs for

1975
01:32:23,490 --> 01:32:27,150
making decisions it's not going any

1976
01:32:25,500 --> 01:32:31,080
lower is that right

1977
01:32:27,150 --> 01:32:32,820
no I don't think so you think it's not

1978
01:32:31,080 --> 01:32:34,680
right or you think it's not going any

1979
01:32:32,820 --> 01:32:38,040
lower I don't think it's going any lower

1980
01:32:34,680 --> 01:32:41,340
okay thank you on the client side at

1981
01:32:38,040 --> 01:32:43,830
least yeah my remarks this seems like a

1982
01:32:41,340 --> 01:32:45,780
very coarse crane signal you're getting

1983
01:32:43,830 --> 01:32:47,309
this response so you get a seventh

1984
01:32:45,780 --> 01:32:49,590
update every time we do a request which

1985
01:32:47,310 --> 01:32:54,150
seems not very useful

1986
01:32:49,590 --> 01:32:58,970
what okay so it's it's not completely

1987
01:32:54,150 --> 01:33:01,950
course the time value that we put in has

1988
01:32:58,970 --> 01:33:04,790
millisecond resolution however that

1989
01:33:01,950 --> 01:33:06,929
doesn't guarantee millisecond accuracy

1990
01:33:04,790 --> 01:33:08,220
although there's some questions and

1991
01:33:06,930 --> 01:33:11,670
concerns about whether or not that's the

1992
01:33:08,220 --> 01:33:14,760
right thing I mean did the rate at which

1993
01:33:11,670 --> 01:33:17,820
you get new values oh yeah yeah it's

1994
01:33:14,760 --> 01:33:22,230
it's it's coarse-grain right it's not

1995
01:33:17,820 --> 01:33:23,670
how useful can there be ah for some of

1996
01:33:22,230 --> 01:33:26,610
the use cases that we want to use it for

1997
01:33:23,670 --> 01:33:30,480
accurate or not useful enough can't give

1998
01:33:26,610 --> 01:33:32,460
an example such as controlling how much

1999
01:33:30,480 --> 01:33:33,150
data is being downloaded at a given

2000
01:33:32,460 --> 01:33:35,040
point in time

2001
01:33:33,150 --> 01:33:37,500
remember Seawind is just one of the

2002
01:33:35,040 --> 01:33:41,940
values and that we would also look at

2003
01:33:37,500 --> 01:33:48,110
using the rtt martyt var for example I'm

2004
01:33:41,940 --> 01:33:50,549
gonna let you of go next hey um so

2005
01:33:48,110 --> 01:33:54,450
regarding that info

2006
01:33:50,550 --> 01:33:58,380
it is currently as exposed the RTT and

2007
01:33:54,450 --> 01:34:01,510
downlink like in download speeds as the

2008
01:33:58,380 --> 01:34:04,750
client perceives them but that

2009
01:34:01,510 --> 01:34:10,150
is likely to be something that will go

2010
01:34:04,750 --> 01:34:12,310
away due to privacy considerations but

2011
01:34:10,150 --> 01:34:14,710
I'm not clear on the youths case here

2012
01:34:12,310 --> 01:34:16,570
are you aiming for the proud to use that

2013
01:34:14,710 --> 01:34:19,650
information or the client use that

2014
01:34:16,570 --> 01:34:22,509
information in order to optimize

2015
01:34:19,650 --> 01:34:25,690
something or is this something that will

2016
01:34:22,510 --> 01:34:29,920
be web exposed as a JavaScript API to

2017
01:34:25,690 --> 01:34:32,739
the actual application so JavaScript can

2018
01:34:29,920 --> 01:34:37,230
already see headers through fetch and

2019
01:34:32,739 --> 01:34:39,549
xhr right okay

2020
01:34:37,230 --> 01:34:42,580
script running in the browser can then

2021
01:34:39,550 --> 01:34:44,170
go look at those look at the results

2022
01:34:42,580 --> 01:34:47,050
that it gets back from the server and

2023
01:34:44,170 --> 01:34:50,050
then make decisions based off of that

2024
01:34:47,050 --> 01:34:52,960
such as optimization of what it's

2025
01:34:50,050 --> 01:34:55,300
downloading so if you see a huge

2026
01:34:52,960 --> 01:34:57,850
fluctuation in our TT for example you

2027
01:34:55,300 --> 01:34:59,020
see it go tenfold then you know you

2028
01:34:57,850 --> 01:35:04,710
should probably back off from

2029
01:34:59,020 --> 01:35:04,710
downloading the next thing in line okay

2030
01:35:05,010 --> 01:35:09,550
probably want to look at the privacy

2031
01:35:07,570 --> 01:35:11,590
implications of that oh yeah and the

2032
01:35:09,550 --> 01:35:13,690
other thing about this is that this is

2033
01:35:11,590 --> 01:35:16,660
the server will only reveal what it's

2034
01:35:13,690 --> 01:35:18,940
configured to reveal so if though if

2035
01:35:16,660 --> 01:35:20,650
there's a particular concern over one of

2036
01:35:18,940 --> 01:35:24,009
those values well then just don't

2037
01:35:20,650 --> 01:35:25,660
transmit it I'm going to cut the cue in

2038
01:35:24,010 --> 01:35:28,239
a moment so if you want to get it please

2039
01:35:25,660 --> 01:35:32,530
do it but go ahead all right Tommy

2040
01:35:28,239 --> 01:35:34,450
Paulie no hats so I would echo the

2041
01:35:32,530 --> 01:35:38,980
privacy concerned I mean this is not

2042
01:35:34,450 --> 01:35:40,660
surprising and I think I mean looking at

2043
01:35:38,980 --> 01:35:43,870
that I think it was a very serious thing

2044
01:35:40,660 --> 01:35:46,960
to think about and maybe it kind of

2045
01:35:43,870 --> 01:35:48,970
calls into question if this is exactly

2046
01:35:46,960 --> 01:35:51,550
the mechanism you want and maybe would

2047
01:35:48,970 --> 01:35:52,630
be good to like look at what is what is

2048
01:35:51,550 --> 01:35:54,430
really the problem we're trying to solve

2049
01:35:52,630 --> 01:35:55,750
and are there other ways of signaling we

2050
01:35:54,430 --> 01:35:58,000
can do to get that effect that's already

2051
01:35:55,750 --> 01:36:01,690
been brought up a little bit because for

2052
01:35:58,000 --> 01:36:03,280
example giving the RTT that RTT is going

2053
01:36:01,690 --> 01:36:06,460
to be an estimate based on previous

2054
01:36:03,280 --> 01:36:08,320
connectivity which particularly is not

2055
01:36:06,460 --> 01:36:09,760
going to be very rich at the beginning

2056
01:36:08,320 --> 01:36:11,500
of a set of connections and then later

2057
01:36:09,760 --> 01:36:12,760
on will indicate the past and not

2058
01:36:11,500 --> 01:36:13,160
necessarily what is going to be coming

2059
01:36:12,760 --> 01:36:16,250
up

2060
01:36:13,160 --> 01:36:18,800
hmmm perhaps what we could do and I'd

2061
01:36:16,250 --> 01:36:21,650
love to understand the use case more is

2062
01:36:18,800 --> 01:36:23,780
have indications from the server saying

2063
01:36:21,650 --> 01:36:25,700
hey it looks like I'm having trouble

2064
01:36:23,780 --> 01:36:28,910
getting stuff back to you at the rates I

2065
01:36:25,700 --> 01:36:30,740
would like to and if you as the client

2066
01:36:28,910 --> 01:36:33,080
are not adapting to that it's a hint

2067
01:36:30,740 --> 01:36:35,050
almost from the server to the client say

2068
01:36:33,080 --> 01:36:37,340
maybe you should back off or something

2069
01:36:35,050 --> 01:36:40,700
so if maybe find a way to make this

2070
01:36:37,340 --> 01:36:42,740
explicit rather than relying on lower

2071
01:36:40,700 --> 01:36:45,080
level measurements that may not really

2072
01:36:42,740 --> 01:36:48,620
map well onto the semantics of HTTP

2073
01:36:45,080 --> 01:36:51,620
would be more effective in this case we

2074
01:36:48,620 --> 01:36:53,059
can talk offline about that all right

2075
01:36:51,620 --> 01:36:55,610
yeah at Google I want to comment that

2076
01:36:53,060 --> 01:36:57,140
yet see when do you cannot actually get

2077
01:36:55,610 --> 01:36:58,610
obviously locally because it's the peers

2078
01:36:57,140 --> 01:36:59,990
congestion window so that didn't get

2079
01:36:58,610 --> 01:37:02,150
totally reasonable it's not just doing

2080
01:36:59,990 --> 01:37:04,429
an end run around the browser um I do

2081
01:37:02,150 --> 01:37:06,679
wonder I also be curious why you want to

2082
01:37:04,430 --> 01:37:10,010
standardize this is I think you can just

2083
01:37:06,680 --> 01:37:12,770
do this now and not standardize it so

2084
01:37:10,010 --> 01:37:14,630
that's because I've seen lots of

2085
01:37:12,770 --> 01:37:15,680
different implementations do this in

2086
01:37:14,630 --> 01:37:19,760
very different ways

2087
01:37:15,680 --> 01:37:21,650
that's all the cues cut go ahead um this

2088
01:37:19,760 --> 01:37:23,390
is just an observation this seems like

2089
01:37:21,650 --> 01:37:26,150
the kind of thing that would fit in well

2090
01:37:23,390 --> 01:37:29,150
with I'm sending headers any point

2091
01:37:26,150 --> 01:37:30,740
within a request for response so what do

2092
01:37:29,150 --> 01:37:34,250
you expect to be able to send multiple

2093
01:37:30,740 --> 01:37:37,160
of these response if that was

2094
01:37:34,250 --> 01:37:40,940
technically possible yeah assumes oh

2095
01:37:37,160 --> 01:37:44,240
yeah and on that note the the issue that

2096
01:37:40,940 --> 01:37:46,099
Roy created Piatra provided a link to

2097
01:37:44,240 --> 01:37:48,290
something called a metadata frame that

2098
01:37:46,100 --> 01:37:51,440
could also refer to the connection but

2099
01:37:48,290 --> 01:37:53,570
carry a header like that so you could

2100
01:37:51,440 --> 01:37:55,280
get connection level statistics rather

2101
01:37:53,570 --> 01:37:57,440
than just connection level statistics

2102
01:37:55,280 --> 01:38:05,240
related specifically to a request a

2103
01:37:57,440 --> 01:38:07,129
response right Chris lemon says it

2104
01:38:05,240 --> 01:38:09,500
sounds like the browser has explicitly

2105
01:38:07,130 --> 01:38:11,870
decided that this information isn't data

2106
01:38:09,500 --> 01:38:14,480
that it wants to provide an API to I'm

2107
01:38:11,870 --> 01:38:15,950
not sure an end-run around that decision

2108
01:38:14,480 --> 01:38:18,259
is advisable without fully understanding

2109
01:38:15,950 --> 01:38:20,679
the reason browsers are making that

2110
01:38:18,260 --> 01:38:20,680
decision

2111
01:38:24,949 --> 01:38:30,780
um Patrick so I mean I think some of

2112
01:38:28,829 --> 01:38:32,460
this stuff the browser isn't providing

2113
01:38:30,780 --> 01:38:33,780
but some of its also information that's

2114
01:38:32,460 --> 01:38:35,280
really only on the server that it's

2115
01:38:33,780 --> 01:38:38,969
sharing through this and that's your

2116
01:38:35,280 --> 01:38:41,449
interesting what's the relationship

2117
01:38:38,969 --> 01:38:44,820
between this and like server timings

2118
01:38:41,449 --> 01:38:46,710
sorry I'm not familiar with a a it's an

2119
01:38:44,820 --> 01:38:50,849
API to provide server timing information

2120
01:38:46,710 --> 01:38:54,599
not terribly unlike this so you might

2121
01:38:50,849 --> 01:38:56,550
look at that see wind is probably not

2122
01:38:54,599 --> 01:38:58,289
what you want that's gonna vary between

2123
01:38:56,550 --> 01:39:00,780
congestion control algorithms like how

2124
01:38:58,289 --> 01:39:02,280
to interpret that like that means maybe

2125
01:39:00,780 --> 01:39:03,659
a slightly different thing like in bbr

2126
01:39:02,280 --> 01:39:04,800
than it does in Reno and that kind of

2127
01:39:03,659 --> 01:39:06,659
thing you might be more interested in

2128
01:39:04,800 --> 01:39:08,369
delivery rate and that kind of thing is

2129
01:39:06,659 --> 01:39:10,499
a bandwidth metric might be much more

2130
01:39:08,369 --> 01:39:13,980
actionable and have a semantic value

2131
01:39:10,499 --> 01:39:16,440
rather than just a number and I had

2132
01:39:13,980 --> 01:39:18,690
another what I didn't read this back I'm

2133
01:39:16,440 --> 01:39:20,159
sorry so there's other values in there

2134
01:39:18,690 --> 01:39:23,009
that might be might be helpful for this

2135
01:39:20,159 --> 01:39:26,579
like we also include so all of the

2136
01:39:23,010 --> 01:39:29,249
fields were the exception of are the the

2137
01:39:26,579 --> 01:39:31,679
first the first value so the the name of

2138
01:39:29,249 --> 01:39:33,679
where this is coming from and the time

2139
01:39:31,679 --> 01:39:36,420
everything else is completely optional

2140
01:39:33,679 --> 01:39:38,249
and some of the other values include

2141
01:39:36,420 --> 01:39:41,099
what congestion control algorithms are

2142
01:39:38,249 --> 01:39:44,130
you using PBR using something else if

2143
01:39:41,099 --> 01:39:45,570
you have a look at most of the values

2144
01:39:44,130 --> 01:39:46,920
inside of one of these we've learned

2145
01:39:45,570 --> 01:39:49,349
like in HTTP is you want to concentrate

2146
01:39:46,920 --> 01:39:51,210
on the semantics rather than the the

2147
01:39:49,349 --> 01:39:52,949
really instance of that right so you

2148
01:39:51,210 --> 01:39:54,239
don't want to say it's PBR and it's

2149
01:39:52,949 --> 01:39:55,739
Seawind and you figure that I don't you

2150
01:39:54,239 --> 01:39:57,419
want that what's this what's the Mantic

2151
01:39:55,739 --> 01:39:59,610
of how much bandwidth do I have that's

2152
01:39:57,420 --> 01:40:01,050
like kind of the usual way what is TS

2153
01:39:59,610 --> 01:40:02,999
mean it's the timestamp but what is it

2154
01:40:01,050 --> 01:40:06,719
time sniffing ah that's supposed to be

2155
01:40:02,999 --> 01:40:09,989
UNIX epoch SEC milliseconds of what

2156
01:40:06,719 --> 01:40:16,409
what's the event of the time that those

2157
01:40:09,989 --> 01:40:18,239
values were sampled okay and just

2158
01:40:16,409 --> 01:40:22,409
selfishly you only need two digits

2159
01:40:18,239 --> 01:40:24,080
precision there I think it should be

2160
01:40:22,409 --> 01:40:26,519
three

2161
01:40:24,080 --> 01:40:28,710
all right so so so this was a

2162
01:40:26,520 --> 01:40:32,460
last-minute addition thank you very much

2163
01:40:28,710 --> 01:40:33,840
I think from what I'm hearing folks want

2164
01:40:32,460 --> 01:40:36,500
to understand more about your use cases

2165
01:40:33,840 --> 01:40:39,690
so maybe focus on that a little bit okay

2166
01:40:36,500 --> 01:40:42,540
mailing list sounds like the next step

2167
01:40:39,690 --> 01:40:45,599
thank you very much okay so one more our

2168
01:40:42,540 --> 01:40:48,630
last minute addition Roy wants to talk

2169
01:40:45,600 --> 01:40:52,100
about an issue that we opened on core as

2170
01:40:48,630 --> 01:40:52,100
a result of other discussions

2171
01:40:52,590 --> 01:41:01,740
it's 986 on extensions yeah I figured

2172
01:40:57,840 --> 01:41:05,400
that's where you'd want so this is the

2173
01:41:01,740 --> 01:41:08,309
idea of defining an extension to htv-2

2174
01:41:05,400 --> 01:41:12,059
and eventually quick that would allow us

2175
01:41:08,310 --> 01:41:17,550
to send metadata midstream in a request

2176
01:41:12,060 --> 01:41:19,170
to a response and so I describe what I

2177
01:41:17,550 --> 01:41:21,390
meant by that in the issue which I'll

2178
01:41:19,170 --> 01:41:24,960
skip ahead and and we look down below

2179
01:41:21,390 --> 01:41:26,760
use cases there's a number of different

2180
01:41:24,960 --> 01:41:29,910
things that we could use this for that I

2181
01:41:26,760 --> 01:41:32,490
just went through my list of history

2182
01:41:29,910 --> 01:41:34,440
stuff from over the years and progress

2183
01:41:32,490 --> 01:41:38,490
meter midstream timings like server

2184
01:41:34,440 --> 01:41:40,769
timing just like we just saw priority

2185
01:41:38,490 --> 01:41:42,330
updates like we're talking about in the

2186
01:41:40,770 --> 01:41:44,780
priority draft except we're doing a

2187
01:41:42,330 --> 01:41:46,769
different way in the priority draft

2188
01:41:44,780 --> 01:41:49,019
non-critical path metadata which is

2189
01:41:46,770 --> 01:41:50,820
basically it's metadata that you you

2190
01:41:49,020 --> 01:41:52,890
would like to send but you don't want to

2191
01:41:50,820 --> 01:41:55,469
set it in front of the body because you

2192
01:41:52,890 --> 01:41:57,720
don't want to you don't want the time we

2193
01:41:55,470 --> 01:41:59,130
don't want the user performance to

2194
01:41:57,720 --> 01:42:00,960
suffer because of all the metadata

2195
01:41:59,130 --> 01:42:04,860
you're sending in front so you send it

2196
01:42:00,960 --> 01:42:08,190
after you sent most of the body that's

2197
01:42:04,860 --> 01:42:09,480
very it was a critical problem with the

2198
01:42:08,190 --> 01:42:11,009
alternates header field when it was

2199
01:42:09,480 --> 01:42:16,139
defined for reactive content negotiation

2200
01:42:11,010 --> 01:42:19,350
it was just too big and it's also useful

2201
01:42:16,140 --> 01:42:21,660
things like link preload we'd send that

2202
01:42:19,350 --> 01:42:26,150
information after you figured out oh hey

2203
01:42:21,660 --> 01:42:28,290
this is the pattern like if you're using

2204
01:42:26,150 --> 01:42:33,750
algorithms to figure out what the client

2205
01:42:28,290 --> 01:42:35,760
is actually performing against your site

2206
01:42:33,750 --> 01:42:38,400
you can use those algorithms to

2207
01:42:35,760 --> 01:42:40,320
anticipate

2208
01:42:38,400 --> 01:42:42,179
you might want to push to the client or

2209
01:42:40,320 --> 01:42:45,150
what they might want to pull ahead of

2210
01:42:42,180 --> 01:42:46,830
time and these are our algorithms that

2211
01:42:45,150 --> 01:42:49,139
aren't necessarily going to complete

2212
01:42:46,830 --> 01:42:50,670
before you send the header fields so you

2213
01:42:49,140 --> 01:42:53,520
might want to send the result of that in

2214
01:42:50,670 --> 01:42:56,340
the in body things like that and long

2215
01:42:53,520 --> 01:42:59,070
pole things that aren't related to a

2216
01:42:56,340 --> 01:43:02,400
separate channel those are all use cases

2217
01:42:59,070 --> 01:43:04,679
so as it turns out we I I put this on

2218
01:43:02,400 --> 01:43:10,519
the list last night and Pyotr pointed

2219
01:43:04,680 --> 01:43:10,520
out a it's already been implemented well

2220
01:43:11,210 --> 01:43:19,260
no the other direction oh the other up

2221
01:43:14,160 --> 01:43:25,639
there is the one called down so in the

2222
01:43:19,260 --> 01:43:30,030
Envoy proxy there is apparently already

2223
01:43:25,640 --> 01:43:34,739
HTTP two extension called metadata using

2224
01:43:30,030 --> 01:43:38,070
the frame type 0 XD already which is

2225
01:43:34,739 --> 01:43:42,660
just a Google Doc about how to do this

2226
01:43:38,070 --> 01:43:48,480
exact same thing yes there just can't be

2227
01:43:42,660 --> 01:43:50,070
on it it's not but I won't be mean to

2228
01:43:48,480 --> 01:43:55,290
them because they just save me a lot of

2229
01:43:50,070 --> 01:43:57,870
work anyway this is almost exactly where

2230
01:43:55,290 --> 01:43:59,310
we want with the exception of you know

2231
01:43:57,870 --> 01:44:01,739
describing what it is what do you do

2232
01:43:59,310 --> 01:44:06,090
with this metadata when you receive it

2233
01:44:01,739 --> 01:44:10,110
so once we hopefully I'll get in touch

2234
01:44:06,090 --> 01:44:12,410
with the authors of this document and we

2235
01:44:10,110 --> 01:44:13,920
can put together a draft to define this

2236
01:44:12,410 --> 01:44:16,590
for real

2237
01:44:13,920 --> 01:44:19,140
might as well use that your 0 XD value

2238
01:44:16,590 --> 01:44:25,710
but you know what it's the next one

2239
01:44:19,140 --> 01:44:27,090
available anyways and we can put this

2240
01:44:25,710 --> 01:44:29,460
together as an internet draft and get it

2241
01:44:27,090 --> 01:44:33,300
done about two months and we're gonna

2242
01:44:29,460 --> 01:44:35,160
last call the next idea so Roy just one

2243
01:44:33,300 --> 01:44:38,040
clarification when I set up in an issue

2244
01:44:35,160 --> 01:44:39,300
I did mean encore oh you did yeah

2245
01:44:38,040 --> 01:44:41,340
because I think the important thing to

2246
01:44:39,300 --> 01:44:43,440
clarify is right now in core we say that

2247
01:44:41,340 --> 01:44:44,969
the the abstract model of HTTP is you

2248
01:44:43,440 --> 01:44:46,530
have headers and then you have body and

2249
01:44:44,969 --> 01:44:48,000
then you have trailers and we need a

2250
01:44:46,530 --> 01:44:49,550
clarification that trailers might come

2251
01:44:48,000 --> 01:44:52,760
early

2252
01:44:49,550 --> 01:44:53,240
it's already in the spec we should talk

2253
01:44:52,760 --> 01:44:56,330
about that

2254
01:44:53,240 --> 01:44:57,679
okay good hmm Ian sweat Google I'm

2255
01:44:56,330 --> 01:45:00,050
fairly sure I know the authors of this

2256
01:44:57,680 --> 01:45:01,760
extremely well also I think it turns out

2257
01:45:00,050 --> 01:45:05,720
that in our implementation we support

2258
01:45:01,760 --> 01:45:08,030
this already well in the in the moat if

2259
01:45:05,720 --> 01:45:09,800
we support trailers we support it I

2260
01:45:08,030 --> 01:45:11,240
think the people who implemented our hb2

2261
01:45:09,800 --> 01:45:12,350
implementation actually thought this was

2262
01:45:11,240 --> 01:45:14,900
allowed even though they thought it was

2263
01:45:12,350 --> 01:45:17,810
completely bizarre and then the last

2264
01:45:14,900 --> 01:45:19,700
thing was a they I would recommend we

2265
01:45:17,810 --> 01:45:23,210
call these Midler's because the bats are

2266
01:45:19,700 --> 01:45:25,160
so much fun that was what they were

2267
01:45:23,210 --> 01:45:26,540
introduced me as when this was talked

2268
01:45:25,160 --> 01:45:31,330
about a year ago internally when we're

2269
01:45:26,540 --> 01:45:31,330
like you can do this and I'm like please

2270
01:45:33,340 --> 01:45:42,170
so first a clarifying question Roberta

2271
01:45:36,050 --> 01:45:47,840
pan is this meant for HTTP to HTTPS GP

2272
01:45:42,170 --> 01:45:49,250
one this one is is HV two given the

2273
01:45:47,840 --> 01:45:52,100
progress they've made it I'm this this

2274
01:45:49,250 --> 01:45:55,280
particular issue is for h-e-b two

2275
01:45:52,100 --> 01:45:56,660
there's another one for quick which

2276
01:45:55,280 --> 01:45:59,740
doesn't have any of this discussion on

2277
01:45:56,660 --> 01:46:03,200
it but as referenced from this issue so

2278
01:45:59,740 --> 01:46:06,190
so it's but not for h1 because I tried

2279
01:46:03,200 --> 01:46:09,410
to do that in h1 and it's too painful I

2280
01:46:06,190 --> 01:46:13,460
and I'm very sad that we still don't

2281
01:46:09,410 --> 01:46:16,190
have chunky extensions but anyway there

2282
01:46:13,460 --> 01:46:17,870
are some very fun questions around the

2283
01:46:16,190 --> 01:46:19,040
semantics of some of these things that I

2284
01:46:17,870 --> 01:46:21,670
think are gonna take longer than two

2285
01:46:19,040 --> 01:46:24,860
months to answer like are these

2286
01:46:21,670 --> 01:46:26,720
placeholders within the entity body

2287
01:46:24,860 --> 01:46:30,769
that's being conveyed or whatever we

2288
01:46:26,720 --> 01:46:32,600
call these days do they when they are

2289
01:46:30,770 --> 01:46:33,920
forwarded do they have to be forwarded

2290
01:46:32,600 --> 01:46:35,450
do they have to be in the same location

2291
01:46:33,920 --> 01:46:38,390
when they are for it when we're doing

2292
01:46:35,450 --> 01:46:41,780
HTTP 3 or a quick version to this doing

2293
01:46:38,390 --> 01:46:44,060
partial reliability are these about the

2294
01:46:41,780 --> 01:46:46,820
stream or within this dream becomes a

2295
01:46:44,060 --> 01:46:48,020
really interesting fun question so these

2296
01:46:46,820 --> 01:46:49,429
are the things that I'm a little worried

2297
01:46:48,020 --> 01:46:51,530
about with with regards to this because

2298
01:46:49,430 --> 01:46:54,260
it could be fantastically under spective

2299
01:46:51,530 --> 01:46:57,769
we don't think about that so do you want

2300
01:46:54,260 --> 01:47:03,490
to be a co-editor do you want to co edit

2301
01:46:57,770 --> 01:47:03,490
it I can try but good luck

2302
01:47:03,780 --> 01:47:14,259
yeah Robin yeah Robin marks a same

2303
01:47:12,010 --> 01:47:15,790
question about hp3 and I want to say

2304
01:47:14,260 --> 01:47:18,430
that this looks very interesting in

2305
01:47:15,790 --> 01:47:20,500
terms of priority updates indeed I can

2306
01:47:18,430 --> 01:47:23,410
we were talking a bit about ranged

2307
01:47:20,500 --> 01:47:24,880
priority priority changes per range of

2308
01:47:23,410 --> 01:47:27,550
resources and the thing this could be

2309
01:47:24,880 --> 01:47:32,890
used to do you don't fly interesting

2310
01:47:27,550 --> 01:47:36,250
stuff Hawk lastly I think this is very

2311
01:47:32,890 --> 01:47:38,920
useful for service training traders mid

2312
01:47:36,250 --> 01:47:40,930
response on the other hand I actually

2313
01:47:38,920 --> 01:47:43,330
wonder if this would be useful for

2314
01:47:40,930 --> 01:47:46,360
sending priority updates will be calls

2315
01:47:43,330 --> 01:47:49,000
priority updates I expect it to be sent

2316
01:47:46,360 --> 01:47:51,160
after the client closes their quest and

2317
01:47:49,000 --> 01:47:53,050
it could arrive after the server has

2318
01:47:51,160 --> 01:47:54,580
completely sent a response so if we are

2319
01:47:53,050 --> 01:47:56,770
going to use that it means that the

2320
01:47:54,580 --> 01:48:00,010
server needs to retain the connection

2321
01:47:56,770 --> 01:48:05,260
assets dream state forever so I'm not

2322
01:48:00,010 --> 01:48:07,560
sure to be clear my intent for these is

2323
01:48:05,260 --> 01:48:11,560
is only form editor that can be dropped

2324
01:48:07,560 --> 01:48:15,520
silently so I'm sure the optional

2325
01:48:11,560 --> 01:48:18,040
metadata yeah mum times and I think

2326
01:48:15,520 --> 01:48:20,830
that's fine and priority would be would

2327
01:48:18,040 --> 01:48:22,750
fall into that class but I think because

2328
01:48:20,830 --> 01:48:24,190
always point in and particularly applies

2329
01:48:22,750 --> 01:48:26,050
to something like quick is if you put

2330
01:48:24,190 --> 01:48:27,879
this in the middle of the request stream

2331
01:48:26,050 --> 01:48:30,130
the request stream is long gone by the

2332
01:48:27,880 --> 01:48:32,200
time that you need to have that

2333
01:48:30,130 --> 01:48:35,740
information updated so it's not going to

2334
01:48:32,200 --> 01:48:38,679
be useful for priority I gotta play my

2335
01:48:35,740 --> 01:48:41,349
h2 because h2 of words the stream goes

2336
01:48:38,680 --> 01:48:45,580
away because the stream sort of store is

2337
01:48:41,350 --> 01:48:51,010
there but in in quick it wouldn't I got

2338
01:48:45,580 --> 01:48:56,080
to basically say camping a new frame

2339
01:48:51,010 --> 01:48:57,220
type and HVAC know is so there's gonna

2340
01:48:56,080 --> 01:49:00,190
be a different spelling of this I think

2341
01:48:57,220 --> 01:49:02,830
if we if we want to pursue this at least

2342
01:49:00,190 --> 01:49:04,990
that would be my preference I can see

2343
01:49:02,830 --> 01:49:06,670
how this had helped the decisions that

2344
01:49:04,990 --> 01:49:08,769
led to this are all rational and

2345
01:49:06,670 --> 01:49:10,000
perfectly reasonable but I think there's

2346
01:49:08,770 --> 01:49:12,730
a different spelling of this that would

2347
01:49:10,000 --> 01:49:14,050
be a little better particularly the the

2348
01:49:12,730 --> 01:49:15,940
compression thing I think we should be

2349
01:49:14,050 --> 01:49:17,949
compressing these because it

2350
01:49:15,940 --> 01:49:21,099
that will allow us to do some much more

2351
01:49:17,949 --> 01:49:22,419
powerful things I believe they don't did

2352
01:49:21,100 --> 01:49:25,560
not do that because it would interfere

2353
01:49:22,420 --> 01:49:28,780
with the the compression algorithm

2354
01:49:25,560 --> 01:49:31,360
possibly without either end knowing it

2355
01:49:28,780 --> 01:49:35,739
there's because this doesn't negotiate

2356
01:49:31,360 --> 01:49:40,120
the use of this frame type it means that

2357
01:49:35,739 --> 01:49:41,549
you cannot change the HP state but if

2358
01:49:40,120 --> 01:49:45,820
you negotiate it with the setting you

2359
01:49:41,550 --> 01:49:46,420
can and so that would be that would be

2360
01:49:45,820 --> 01:49:50,679
superior

2361
01:49:46,420 --> 01:49:54,790
I think Roberto points out that you can

2362
01:49:50,680 --> 01:49:56,730
still reference the the compression

2363
01:49:54,790 --> 01:50:04,390
state worth considering nh-2 at least

2364
01:49:56,730 --> 01:50:08,160
yeah julien asks should we talk about

2365
01:50:04,390 --> 01:50:12,040
assignment of frame type numbers I

2366
01:50:08,160 --> 01:50:14,980
believe Julian it's it's under I under

2367
01:50:12,040 --> 01:50:17,230
restricted to IETF review so basically

2368
01:50:14,980 --> 01:50:20,280
the the actual assignment would have to

2369
01:50:17,230 --> 01:50:23,199
be a completed document from the IETF

2370
01:50:20,280 --> 01:50:25,030
I'm just it's I mentioned that just

2371
01:50:23,199 --> 01:50:26,830
because I think it's kind of funny

2372
01:50:25,030 --> 01:50:29,530
whenever somebody just ignores the

2373
01:50:26,830 --> 01:50:31,300
actual process it goes ahead and assigns

2374
01:50:29,530 --> 01:50:33,940
the next unassigned standard number

2375
01:50:31,300 --> 01:50:35,920
because it happens all the time no

2376
01:50:33,940 --> 01:50:38,589
matter what the idea says it happens all

2377
01:50:35,920 --> 01:50:41,350
the time we should give away chocolate

2378
01:50:38,590 --> 01:50:47,949
that might help we should make them give

2379
01:50:41,350 --> 01:50:49,150
away chocolate mark Nottingham I don't

2380
01:50:47,949 --> 01:50:51,099
have strong feelings about how they

2381
01:50:49,150 --> 01:50:52,269
should be spelled on the wire I do think

2382
01:50:51,100 --> 01:50:54,790
it's interesting and I do think it's

2383
01:50:52,270 --> 01:50:58,350
useful but I look at the history of

2384
01:50:54,790 --> 01:51:02,969
trailers and the trail of trailers and

2385
01:50:58,350 --> 01:51:09,610
it's a Trail of Tears it is it is really

2386
01:51:02,969 --> 01:51:12,790
painful it is you know we I think we're

2387
01:51:09,610 --> 01:51:16,059
in core we are now just getting to the

2388
01:51:12,790 --> 01:51:19,239
point where we understand how trailers

2389
01:51:16,060 --> 01:51:20,800
work and have some recommendations of

2390
01:51:19,239 --> 01:51:22,929
how to make them really useful and

2391
01:51:20,800 --> 01:51:24,969
interoperable and implementation is

2392
01:51:22,930 --> 01:51:25,940
still really trailing I keep on doing

2393
01:51:24,969 --> 01:51:30,970
this

2394
01:51:25,940 --> 01:51:35,389
that was the Ted stop I'm not that good

2395
01:51:30,970 --> 01:51:37,520
I am really scared if we introduce a new

2396
01:51:35,390 --> 01:51:39,140
thing that is not like trailers it's

2397
01:51:37,520 --> 01:51:41,240
gonna destroy both the new thing and the

2398
01:51:39,140 --> 01:51:43,130
old thing because most developers aren't

2399
01:51:41,240 --> 01:51:44,809
going to get it and it's gonna get miss

2400
01:51:43,130 --> 01:51:45,980
implemented and it's not going to be

2401
01:51:44,810 --> 01:51:48,560
available in a backwards compatible

2402
01:51:45,980 --> 01:51:51,469
fashion so I'm fine if this is just

2403
01:51:48,560 --> 01:51:53,300
basically trailers that happen to arrive

2404
01:51:51,470 --> 01:51:54,470
early and as long as you can treat them

2405
01:51:53,300 --> 01:51:56,930
like that and they work within those

2406
01:51:54,470 --> 01:52:00,500
constraints that's I think pretty

2407
01:51:56,930 --> 01:52:03,260
tractable if it's some new extra thing

2408
01:52:00,500 --> 01:52:05,570
above on the model of the abstract model

2409
01:52:03,260 --> 01:52:08,500
the HD messaging I just think we're over

2410
01:52:05,570 --> 01:52:11,420
designing and it's gonna fail yeah I

2411
01:52:08,500 --> 01:52:12,680
agree with that I mean it's it's painful

2412
01:52:11,420 --> 01:52:15,800
enough to get to the point where we are

2413
01:52:12,680 --> 01:52:19,190
in draft zero six in in HP core which

2414
01:52:15,800 --> 01:52:21,410
does incorporate that for trailers and

2415
01:52:19,190 --> 01:52:25,940
so I would like to stick with that and

2416
01:52:21,410 --> 01:52:27,980
no further pachuco to Google it's worth

2417
01:52:25,940 --> 01:52:31,549
pointing out that this was originally

2418
01:52:27,980 --> 01:52:34,219
designed us basically internal home by

2419
01:52:31,550 --> 01:52:37,370
hob headers or trailers right whereas

2420
01:52:34,220 --> 01:52:38,810
I'm not sure if the case you're after is

2421
01:52:37,370 --> 01:52:41,450
end to end

2422
01:52:38,810 --> 01:52:43,250
trailers right yes and this is worth

2423
01:52:41,450 --> 01:52:45,740
pointing out like those have some

2424
01:52:43,250 --> 01:52:46,730
different properties yes one one of the

2425
01:52:45,740 --> 01:52:51,260
first things we would have to work

2426
01:52:46,730 --> 01:52:53,089
around has how how to self describe the

2427
01:52:51,260 --> 01:52:55,420
header fields that are sent such that

2428
01:52:53,090 --> 01:52:58,610
somewhere connection based and some are

2429
01:52:55,420 --> 01:53:02,540
Indian that's all that's but that's a

2430
01:52:58,610 --> 01:53:04,670
very old HTV problem yeah but is there

2431
01:53:02,540 --> 01:53:09,740
any reason not to use headers or like

2432
01:53:04,670 --> 01:53:11,330
note trailers for end-to-end do we need

2433
01:53:09,740 --> 01:53:13,940
new frame for end-to-end

2434
01:53:11,330 --> 01:53:16,040
trailers I don't think we would need a

2435
01:53:13,940 --> 01:53:19,969
new frame I think we just need to

2436
01:53:16,040 --> 01:53:32,210
identify which ones you want to drop

2437
01:53:19,970 --> 01:53:35,150
immediately on receipt no I'm saying for

2438
01:53:32,210 --> 01:53:37,790
end-to-end right it's one of the reasons

2439
01:53:35,150 --> 01:53:38,780
why it's it's defined currently in their

2440
01:53:37,790 --> 01:53:42,290
document as a

2441
01:53:38,780 --> 01:53:44,750
as a literal non-indexed header field so

2442
01:53:42,290 --> 01:53:49,850
it doesn't mess up the and we're cutting

2443
01:53:44,750 --> 01:53:52,910
the lines right for this Mike Bishop I

2444
01:53:49,850 --> 01:53:55,760
will I will say that I don't really have

2445
01:53:52,910 --> 01:53:58,610
a problem with trailers that arrive or

2446
01:53:55,760 --> 01:54:01,760
early I think the more challenging thing

2447
01:53:58,610 --> 01:54:04,130
is going to be the fact that you then

2448
01:54:01,760 --> 01:54:06,410
might also have trailers that arrive at

2449
01:54:04,130 --> 01:54:08,540
the normal time and what do you do with

2450
01:54:06,410 --> 01:54:10,280
more than one set of trailers or

2451
01:54:08,540 --> 01:54:14,440
potentially lots of sets of trailers

2452
01:54:10,280 --> 01:54:14,440
over the course of an issue be message

2453
01:54:14,650 --> 01:54:19,070
firstly I thought they did combine

2454
01:54:16,250 --> 01:54:19,490
that's the whole idea they just keep

2455
01:54:19,070 --> 01:54:22,599
going

2456
01:54:19,490 --> 01:54:25,550
there are trailers just one big set yeah

2457
01:54:22,600 --> 01:54:27,290
Lucas party I think how's it related to

2458
01:54:25,550 --> 01:54:28,880
that and and there's probably already an

2459
01:54:27,290 --> 01:54:30,500
answer to this but I really wonder how

2460
01:54:28,880 --> 01:54:34,150
this gets exposed to something like

2461
01:54:30,500 --> 01:54:37,040
fetch in in like if I don't know when

2462
01:54:34,150 --> 01:54:39,730
when that set will be bounded and

2463
01:54:37,040 --> 01:54:43,990
finished like how how much time do I

2464
01:54:39,730 --> 01:54:47,419
keep waiting to process a headers object

2465
01:54:43,990 --> 01:54:50,650
and the implications of that so I think

2466
01:54:47,420 --> 01:54:54,560
we should think about that while we

2467
01:54:50,650 --> 01:54:55,969
Transpac something that because user

2468
01:54:54,560 --> 01:55:02,120
agents are all the same but they have

2469
01:54:55,970 --> 01:55:05,540
different api's yeah I I agree with that

2470
01:55:02,120 --> 01:55:09,170
Lucas and that one of the reasons why we

2471
01:55:05,540 --> 01:55:11,210
were why we went through all of the

2472
01:55:09,170 --> 01:55:14,050
trailer specs moved into semantics and

2473
01:55:11,210 --> 01:55:17,810
and and just defined it the way we did

2474
01:55:14,050 --> 01:55:20,080
was to correspond to some of the

2475
01:55:17,810 --> 01:55:23,180
feedback that we got from Anna about

2476
01:55:20,080 --> 01:55:26,240
from fetch that he actually wanted it to

2477
01:55:23,180 --> 01:55:28,310
be in separate trailers separate

2478
01:55:26,240 --> 01:55:29,630
trailers from header fields so you have

2479
01:55:28,310 --> 01:55:30,920
you have header fields that you know up

2480
01:55:29,630 --> 01:55:33,890
front then you have trailer fields that

2481
01:55:30,920 --> 01:55:35,450
you don't know up front and to not mix

2482
01:55:33,890 --> 01:55:39,740
those two the way we had described

2483
01:55:35,450 --> 01:55:41,330
before for HB one and as painful as it

2484
01:55:39,740 --> 01:55:44,210
is to go back and just revisit that

2485
01:55:41,330 --> 01:55:46,460
decision the reality is the way he

2486
01:55:44,210 --> 01:55:50,810
described as it's easier for people to

2487
01:55:46,460 --> 01:55:52,160
implement now and less security issues

2488
01:55:50,810 --> 01:55:53,780
so we

2489
01:55:52,160 --> 01:55:57,740
actually went ahead and made that change

2490
01:55:53,780 --> 01:56:00,110
and I think hopefully the same way Anna

2491
01:55:57,740 --> 01:56:02,330
will look at this and and be able to

2492
01:56:00,110 --> 01:56:05,630
come up with a reasonable design or

2493
01:56:02,330 --> 01:56:07,970
someone to do that I'm certainly not

2494
01:56:05,630 --> 01:56:09,740
gonna try to design the browser side for

2495
01:56:07,970 --> 01:56:11,780
them okay

2496
01:56:09,740 --> 01:56:14,120
um I'd say the reason I ask is because

2497
01:56:11,780 --> 01:56:17,259
fetch isn't just within the browser

2498
01:56:14,120 --> 01:56:20,890
context but is used in in other places

2499
01:56:17,260 --> 01:56:25,880
it's it's you need the api's right I

2500
01:56:20,890 --> 01:56:28,100
know it's supposed to be cut but yeah if

2501
01:56:25,880 --> 01:56:31,460
there is not a demarcation of the end of

2502
01:56:28,100 --> 01:56:33,260
the body of sets of key values then in

2503
01:56:31,460 --> 01:56:34,580
the case where there are multiple header

2504
01:56:33,260 --> 01:56:38,720
values repeated they may be

2505
01:56:34,580 --> 01:56:41,410
misinterpreted so I think that there's a

2506
01:56:38,720 --> 01:56:43,940
problem there we have to resolve yeah

2507
01:56:41,410 --> 01:56:45,440
can we just ask show hands who's

2508
01:56:43,940 --> 01:56:49,280
interested in in this discussion in

2509
01:56:45,440 --> 01:56:50,870
general good portion of the room so when

2510
01:56:49,280 --> 01:56:52,460
you don't figure out a way to keep it

2511
01:56:50,870 --> 01:56:55,010
going I think the country yeah

2512
01:56:52,460 --> 01:56:57,680
and do we think this work but I think

2513
01:56:55,010 --> 01:56:59,480
Zoo we want an issue on core just to

2514
01:56:57,680 --> 01:57:01,250
clarify things I it's not where the work

2515
01:56:59,480 --> 01:57:03,410
is I want to check well I think we can

2516
01:57:01,250 --> 01:57:05,360
be more clear in core but yeah okay good

2517
01:57:03,410 --> 01:57:06,889
yeah and then in that but it would be an

2518
01:57:05,360 --> 01:57:12,769
H to an extension maybe niche three

2519
01:57:06,890 --> 01:57:14,780
extension blah blah yeah okay okay um I

2520
01:57:12,770 --> 01:57:18,260
think that's all we have I think so I

2521
01:57:14,780 --> 01:57:20,389
mean it sorry one thing I in when I was

2522
01:57:18,260 --> 01:57:21,980
up at the mic I used the phrase Trail of

2523
01:57:20,390 --> 01:57:24,470
Tears and I did that unintentionally

2524
01:57:21,980 --> 01:57:26,089
that is a historical event that I wasn't

2525
01:57:24,470 --> 01:57:29,180
trying to refer to and so all these for

2526
01:57:26,090 --> 01:57:31,580
any offence caused it was just the words

2527
01:57:29,180 --> 01:57:33,470
that came to mind at the moment I think

2528
01:57:31,580 --> 01:57:34,760
we're done for the moment yeah yeah

2529
01:57:33,470 --> 01:57:39,970
thanks everyone

2530
01:57:34,760 --> 01:57:39,970
okay we will see you in Vancouver

2531
01:57:56,050 --> 01:58:27,530
funny you are Friday before sir I'm just

2532
01:58:20,390 --> 01:58:29,420
sending up covered on right now if

2533
01:58:27,530 --> 01:58:31,690
anyone wants HTTP three stickers we have

2534
01:58:29,420 --> 01:58:31,690
plenty

2535
01:58:38,850 --> 01:58:40,910
you

