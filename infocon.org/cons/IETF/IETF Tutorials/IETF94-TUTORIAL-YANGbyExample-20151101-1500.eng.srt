1
00:00:11,870 --> 00:00:20,490
so<font color="#E5E5E5"> this event as we before some</font><font color="#CCCCCC"> yang and</font>

2
00:00:16,859 --> 00:00:22,439
<font color="#E5E5E5">Matt comes ready so the agenda is like</font>

3
00:00:20,490 --> 00:00:25,740
this we're going to<font color="#E5E5E5"> have two hours on</font>

4
00:00:22,439 --> 00:00:29,130
net<font color="#CCCCCC"> conf</font><font color="#E5E5E5"> and yang so this comes from the</font>

5
00:00:25,740 --> 00:00:31,409
yang model<font color="#CCCCCC"> Commission groove so we want</font>

6
00:00:29,130 --> 00:00:33,690
to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> years of trainings the first</font>

7
00:00:31,410 --> 00:00:35,880
time it's about<font color="#CCCCCC"> Yang and Matt</font><font color="#E5E5E5"> Kampf</font>

8
00:00:33,690 --> 00:00:38,040
<font color="#CCCCCC">there are things that we have you are</font>

9
00:00:35,880 --> 00:00:40,500
<font color="#E5E5E5">not covering here these are for future</font>

10
00:00:38,040 --> 00:00:43,070
use<font color="#E5E5E5"> future developments this is</font><font color="#CCCCCC"> rest</font>

11
00:00:40,500 --> 00:00:46,170
<font color="#CCCCCC">count and what if you</font><font color="#E5E5E5"> are a developer</font>

12
00:00:43,070 --> 00:00:48,500
<font color="#E5E5E5">using library</font><font color="#CCCCCC"> etc so it might</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> for</font>

13
00:00:46,170 --> 00:00:52,079
<font color="#CCCCCC">next time</font>

14
00:00:48,500 --> 00:00:56,039
the second part after<font color="#CCCCCC"> maybe a small</font>

15
00:00:52,079 --> 00:01:00,210
break<font color="#E5E5E5"> is how to use ping to compile your</font>

16
00:00:56,039 --> 00:01:02,550
<font color="#E5E5E5">yang models we still have some models</font>

17
00:01:00,210 --> 00:01:06,990
<font color="#E5E5E5">that are posted in ITF drivers don't</font>

18
00:01:02,550 --> 00:01:10,350
compile correctly<font color="#E5E5E5"> in January we're going</font>

19
00:01:06,990 --> 00:01:12,630
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have part of ID myths</font><font color="#CCCCCC"> we're going to</font>

20
00:01:10,350 --> 00:01:15,570
have the<font color="#CCCCCC"> p-n compilation that</font><font color="#E5E5E5"> will give</font>

21
00:01:12,630 --> 00:01:17,939
you<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the error messages</font><font color="#E5E5E5"> so that you</font>

22
00:01:15,570 --> 00:01:21,149
post a draft<font color="#E5E5E5"> without any compilation</font>

23
00:01:17,939 --> 00:01:22,798
<font color="#E5E5E5">errors in the meantime we have a website</font>

24
00:01:21,150 --> 00:01:29,250
that<font color="#E5E5E5"> I guess</font><font color="#CCCCCC"> you're going</font><font color="#E5E5E5"> to speak about</font>

25
00:01:22,799 --> 00:01:31,860
the yang validator<font color="#CCCCCC"> calm</font><font color="#E5E5E5"> and the last</font>

26
00:01:29,250 --> 00:01:35,159
party agenda is what<font color="#CCCCCC"> we've been having</font>

27
00:01:31,860 --> 00:01:36,930
the yang advice anything<font color="#E5E5E5"> session we're</font>

28
00:01:35,159 --> 00:01:39,479
going<font color="#E5E5E5"> to have the young doctors here if</font>

29
00:01:36,930 --> 00:01:41,430
you are<font color="#E5E5E5"> working on a yang data model and</font>

30
00:01:39,479 --> 00:01:43,140
you want to get some<font color="#CCCCCC"> advice not like</font>

31
00:01:41,430 --> 00:01:44,790
compilation errors<font color="#E5E5E5"> I mean this is not</font>

32
00:01:43,140 --> 00:01:48,329
<font color="#E5E5E5">the point but you can ask</font><font color="#CCCCCC"> question about</font>

33
00:01:44,790 --> 00:01:50,399
<font color="#E5E5E5">it as well like</font><font color="#CCCCCC"> design questions</font><font color="#E5E5E5"> then</font>

34
00:01:48,329 --> 00:01:52,529
come<font color="#CCCCCC"> with your yang model we're going to</font>

35
00:01:50,399 --> 00:01:54,360
<font color="#CCCCCC">have a list</font><font color="#E5E5E5"> of all the young models one</font>

36
00:01:52,530 --> 00:01:57,560
doctor will<font color="#CCCCCC"> be assigned</font><font color="#E5E5E5"> to you and you</font>

37
00:01:54,360 --> 00:02:00,140
will receive like free consulting

38
00:01:57,560 --> 00:02:03,000
otherwise you can go and pay later on

39
00:02:00,140 --> 00:02:07,860
and I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> that the nation like beers</font>

40
00:02:03,000 --> 00:02:10,889
<font color="#E5E5E5">are welcome</font><font color="#CCCCCC"> what else this</font><font color="#E5E5E5"> will be</font>

41
00:02:07,860 --> 00:02:13,620
<font color="#E5E5E5">recorded with me</font><font color="#CCCCCC"> take oh this should</font><font color="#E5E5E5"> be</font>

42
00:02:10,889 --> 00:02:16,379
<font color="#E5E5E5">on</font><font color="#CCCCCC"> youtube later</font><font color="#E5E5E5"> on</font>

43
00:02:13,620 --> 00:02:18,599
not the last part the next<font color="#E5E5E5"> sense there</font>

44
00:02:16,379 --> 00:02:22,349
is nothing to record there but net<font color="#CCCCCC"> Kampf</font>

45
00:02:18,599 --> 00:02:25,018
<font color="#E5E5E5">yang and the P hang part so please make</font>

46
00:02:22,349 --> 00:02:26,518
<font color="#E5E5E5">sure use</font><font color="#CCCCCC"> the mic</font><font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean we</font>

47
00:02:25,019 --> 00:02:33,739
need to<font color="#E5E5E5"> lose the questions and on</font>

48
00:02:26,519 --> 00:02:33,739
YouTube<font color="#E5E5E5"> and I think that's it and joy</font>

49
00:02:34,340 --> 00:02:40,980
<font color="#E5E5E5">okay so I'm not gonna use the full four</font>

50
00:02:39,090 --> 00:02:43,290
<font color="#CCCCCC">hours I'm</font><font color="#E5E5E5"> gonna use two hours or try to</font>

51
00:02:40,980 --> 00:02:45,720
<font color="#E5E5E5">use two hours so what I'm gonna try</font><font color="#CCCCCC"> to</font>

52
00:02:43,290 --> 00:02:47,970
do<font color="#E5E5E5"> here guys</font><font color="#CCCCCC"> and girls is</font><font color="#E5E5E5"> I have two</font>

53
00:02:45,720 --> 00:02:50,220
modules<font color="#E5E5E5"> that will go through</font><font color="#CCCCCC"> this is</font>

54
00:02:47,970 --> 00:02:52,470
<font color="#E5E5E5">newly created training material and the</font>

55
00:02:50,220 --> 00:02:55,260
intent<font color="#E5E5E5"> again from the yang coordination</font>

56
00:02:52,470 --> 00:02:57,959
team is to take it make it useful<font color="#E5E5E5"> and</font>

57
00:02:55,260 --> 00:03:00,149
make it<font color="#E5E5E5"> open so</font><font color="#CCCCCC"> anyone can</font><font color="#E5E5E5"> use it take</font>

58
00:02:57,959 --> 00:03:01,980
it and run with it<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is a trial</font>

59
00:03:00,150 --> 00:03:04,170
shot<font color="#CCCCCC"> you guys</font><font color="#E5E5E5"> are the test</font><font color="#CCCCCC"> audience</font>

60
00:03:01,980 --> 00:03:05,730
which means that for me to take anything

61
00:03:04,170 --> 00:03:08,518
out<font color="#E5E5E5"> of this is I need feedback</font>

62
00:03:05,730 --> 00:03:11,909
<font color="#CCCCCC">I need questions</font><font color="#E5E5E5"> I need raised hands and</font>

63
00:03:08,519 --> 00:03:13,530
whatever you can you know give me and of

64
00:03:11,909 --> 00:03:14,819
<font color="#E5E5E5">course it's a scary crowd some of the</font>

65
00:03:13,530 --> 00:03:16,829
people<font color="#E5E5E5"> that actually wrote the spec is</font>

66
00:03:14,819 --> 00:03:19,349
here which makes me a<font color="#CCCCCC"> little shaky and</font>

67
00:03:16,829 --> 00:03:22,620
I'm relieving<font color="#E5E5E5"> on them to help me to you</font>

68
00:03:19,349 --> 00:03:24,780
<font color="#E5E5E5">know fix any any inconsistencies so two</font>

69
00:03:22,620 --> 00:03:27,209
sections<font color="#E5E5E5"> they're roughly the same size</font>

70
00:03:24,780 --> 00:03:29,970
<font color="#CCCCCC">we're gonna start</font><font color="#E5E5E5"> with yang and this is</font>

71
00:03:27,209 --> 00:03:31,980
<font color="#E5E5E5">way the way we structure this the way we</font>

72
00:03:29,970 --> 00:03:35,389
<font color="#CCCCCC">want to do this</font><font color="#E5E5E5"> training material here</font>

73
00:03:31,980 --> 00:03:39,750
is along these lines<font color="#CCCCCC"> so we're gonna</font><font color="#E5E5E5"> use</font>

74
00:03:35,389 --> 00:03:42,989
an example<font color="#CCCCCC"> somewhat real-world example</font>

75
00:03:39,750 --> 00:03:45,810
<font color="#E5E5E5">and walk you through</font><font color="#CCCCCC"> the yang models</font>

76
00:03:42,989 --> 00:03:47,639
that we have<font color="#E5E5E5"> some of them some parts of</font>

77
00:03:45,810 --> 00:03:49,500
them<font color="#E5E5E5"> are actually standards track or</font>

78
00:03:47,639 --> 00:03:51,720
standards<font color="#CCCCCC"> some of them are drafts</font><font color="#E5E5E5"> so</font>

79
00:03:49,500 --> 00:03:53,879
<font color="#CCCCCC">we're gonna</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> this example to</font><font color="#E5E5E5"> walk you</font>

80
00:03:51,720 --> 00:03:55,560
through the features of yang<font color="#E5E5E5"> okay so</font>

81
00:03:53,879 --> 00:03:58,108
it's not<font color="#E5E5E5"> a I'm not gonna go through the</font>

82
00:03:55,560 --> 00:04:00,949
RFC or anything like that try to make it

83
00:03:58,109 --> 00:04:03,389
a little<font color="#E5E5E5"> bit more audience friendly and</font>

84
00:04:00,949 --> 00:04:05,340
hopefully when this is all done<font color="#CCCCCC"> you</font>

85
00:04:03,389 --> 00:04:07,230
should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to definitely</font><font color="#E5E5E5"> understand</font>

86
00:04:05,340 --> 00:04:09,299
yang<font color="#CCCCCC"> I understand the moving parts</font><font color="#E5E5E5"> of it</font>

87
00:04:07,230 --> 00:04:11,429
again there<font color="#E5E5E5"> will be a lot</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> to learn</font>

88
00:04:09,299 --> 00:04:14,329
after this tutorial by reading the

89
00:04:11,430 --> 00:04:16,829
specifications by<font color="#E5E5E5"> diving</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the actual</font>

90
00:04:14,329 --> 00:04:19,380
sea of yang models that we now have the

91
00:04:16,829 --> 00:04:21,060
ITF<font color="#E5E5E5"> and in other places</font><font color="#CCCCCC"> but you should</font>

92
00:04:19,380 --> 00:04:23,669
understand<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> identify and</font>

93
00:04:21,060 --> 00:04:25,080
describe the common elements and more

94
00:04:23,669 --> 00:04:26,539
importantly<font color="#CCCCCC"> perhaps you should be able</font>

95
00:04:25,080 --> 00:04:28,940
<font color="#E5E5E5">to take a look at a yang model</font>

96
00:04:26,540 --> 00:04:31,670
understand what valid configuration or

97
00:04:28,940 --> 00:04:35,240
valid instance data according to<font color="#E5E5E5"> that</font>

98
00:04:31,670 --> 00:04:37,820
yang model actually<font color="#CCCCCC"> is</font><font color="#E5E5E5"> because as you</font>

99
00:04:35,240 --> 00:04:40,250
<font color="#CCCCCC">guys may or may not</font><font color="#E5E5E5"> know I'm gonna say</font>

100
00:04:37,820 --> 00:04:41,810
now yang is a data modeling language

101
00:04:40,250 --> 00:04:43,790
<font color="#E5E5E5">this is one of</font><font color="#CCCCCC"> the things that we</font><font color="#E5E5E5"> keep</font>

102
00:04:41,810 --> 00:04:46,340
coming<font color="#E5E5E5"> back to with many audiences it's</font>

103
00:04:43,790 --> 00:04:48,710
a way of<font color="#E5E5E5"> describing in a schema style</font>

104
00:04:46,340 --> 00:04:50,869
<font color="#E5E5E5">what is the value space for valid</font>

105
00:04:48,710 --> 00:04:52,580
instance data<font color="#E5E5E5"> so it describes</font><font color="#CCCCCC"> what you</font>

106
00:04:50,870 --> 00:04:59,960
can do<font color="#E5E5E5"> not the actual instance data</font>

107
00:04:52,580 --> 00:05:03,340
itself<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> a couple of yang</font>

108
00:04:59,960 --> 00:05:07,909
models here<font color="#CCCCCC"> as you may know we are now</font>

109
00:05:03,340 --> 00:05:11,450
<font color="#E5E5E5">producing a steady stream of</font><font color="#CCCCCC"> RFC's that</font>

110
00:05:07,910 --> 00:05:13,010
includes<font color="#E5E5E5"> or has yang models in them some</font>

111
00:05:11,450 --> 00:05:15,080
<font color="#E5E5E5">of them have a single yang model some of</font>

112
00:05:13,010 --> 00:05:16,430
<font color="#CCCCCC">them have several so we're gonna</font><font color="#E5E5E5"> use</font>

113
00:05:15,080 --> 00:05:18,620
<font color="#CCCCCC">some of the ones that we believe are</font>

114
00:05:16,430 --> 00:05:21,770
going<font color="#E5E5E5"> to be core for anything network</font>

115
00:05:18,620 --> 00:05:24,440
related<font color="#E5E5E5"> going forward</font><font color="#CCCCCC"> so if there's</font><font color="#E5E5E5"> some</font>

116
00:05:21,770 --> 00:05:27,310
<font color="#E5E5E5">where</font><font color="#CCCCCC"> you want to start</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> yang</font><font color="#E5E5E5"> and most</font>

117
00:05:24,440 --> 00:05:30,110
of the<font color="#CCCCCC"> people</font><font color="#E5E5E5"> here are</font><font color="#CCCCCC"> network centric</font>

118
00:05:27,310 --> 00:05:32,540
<font color="#E5E5E5">the ones that I</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> start with</font><font color="#CCCCCC"> is the</font>

119
00:05:30,110 --> 00:05:34,220
IP interface management<font color="#E5E5E5"> and IP</font>

120
00:05:32,540 --> 00:05:35,780
management<font color="#CCCCCC"> that's a pretty obvious</font>

121
00:05:34,220 --> 00:05:37,700
starting<font color="#E5E5E5"> point for any kind of</font>

122
00:05:35,780 --> 00:05:39,320
<font color="#E5E5E5">understanding on</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> to apply this the</font>

123
00:05:37,700 --> 00:05:41,570
<font color="#E5E5E5">networking how do we define</font><font color="#CCCCCC"> what an</font>

124
00:05:39,320 --> 00:05:44,090
interface<font color="#CCCCCC"> actually is that was a fun</font>

125
00:05:41,570 --> 00:05:46,400
journey<font color="#E5E5E5"> to actually agree</font><font color="#CCCCCC"> on a way of</font>

126
00:05:44,090 --> 00:05:48,739
structuring interfaces<font color="#CCCCCC"> and how do</font><font color="#E5E5E5"> you</font>

127
00:05:46,400 --> 00:05:51,770
actually actually configure ipv4<font color="#E5E5E5"> and</font>

128
00:05:48,740 --> 00:05:54,530
ipv6<font color="#CCCCCC"> on this</font><font color="#E5E5E5"> structure and then we're</font>

129
00:05:51,770 --> 00:05:56,770
<font color="#E5E5E5">gonna</font><font color="#CCCCCC"> use some types and interface types</font>

130
00:05:54,530 --> 00:05:59,090
<font color="#E5E5E5">and we wanted to make it</font><font color="#CCCCCC"> a little</font>

131
00:05:56,770 --> 00:06:01,370
<font color="#E5E5E5">realistic so we're going to put it in an</font>

132
00:05:59,090 --> 00:06:04,310
MPLS context<font color="#E5E5E5"> there's a couple of</font>

133
00:06:01,370 --> 00:06:07,100
<font color="#CCCCCC">directions we randomly</font><font color="#E5E5E5"> picked the MPLS</font>

134
00:06:04,310 --> 00:06:11,000
static LSP model from the open config

135
00:06:07,100 --> 00:06:12,320
group<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> combination of these should</font>

136
00:06:11,000 --> 00:06:14,950
give us enough<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can actually</font>

137
00:06:12,320 --> 00:06:20,150
<font color="#E5E5E5">configure a reasonably realistic</font>

138
00:06:14,950 --> 00:06:23,630
environment and the environment<font color="#E5E5E5"> kind of</font>

139
00:06:20,150 --> 00:06:25,940
looks<font color="#CCCCCC"> like this we have three main tasks</font>

140
00:06:23,630 --> 00:06:28,159
that we use to drive you guys through

141
00:06:25,940 --> 00:06:30,830
these features<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> going to enable</font>

142
00:06:28,160 --> 00:06:32,210
<font color="#E5E5E5">some interfaces so take a look at what</font>

143
00:06:30,830 --> 00:06:34,280
are<font color="#E5E5E5"> the data structures</font><font color="#CCCCCC"> that you need to</font>

144
00:06:32,210 --> 00:06:36,890
understand in<font color="#CCCCCC"> order to enable interfaces</font>

145
00:06:34,280 --> 00:06:39,799
on<font color="#CCCCCC"> the routers</font><font color="#E5E5E5"> we're going to assign</font>

146
00:06:36,890 --> 00:06:40,400
ipv6 addresses to the<font color="#E5E5E5"> newly enabled</font>

147
00:06:39,800 --> 00:06:42,590
interface

148
00:06:40,400 --> 00:06:46,758
and then we are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to configure</font>

149
00:06:42,590 --> 00:06:49,219
static<font color="#E5E5E5"> MPLS LS</font><font color="#CCCCCC"> piece</font><font color="#E5E5E5"> okay that's the</font>

150
00:06:46,759 --> 00:06:50,720
entirety<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the journey hopefully along</font>

151
00:06:49,220 --> 00:06:53,120
this journey<font color="#E5E5E5"> you guys will have</font><font color="#CCCCCC"> a good</font>

152
00:06:50,720 --> 00:06:56,960
<font color="#E5E5E5">understanding then of the basic features</font>

153
00:06:53,120 --> 00:07:00,680
<font color="#E5E5E5">of the yang language so we're gonna</font>

154
00:06:56,960 --> 00:07:03,979
start off<font color="#CCCCCC"> by the first task</font><font color="#E5E5E5"> enabling the</font>

155
00:07:00,680 --> 00:07:05,360
interfaces<font color="#E5E5E5"> and of course</font><font color="#CCCCCC"> yang is a data</font>

156
00:07:03,979 --> 00:07:08,419
<font color="#E5E5E5">modeling language and don't worry we'll</font>

157
00:07:05,360 --> 00:07:09,410
get into<font color="#E5E5E5"> the curly braces real soon some</font>

158
00:07:08,419 --> 00:07:11,330
of the things<font color="#E5E5E5"> that we're going</font><font color="#CCCCCC"> to look</font>

159
00:07:09,410 --> 00:07:13,840
for here is of course structure right

160
00:07:11,330 --> 00:07:16,070
<font color="#E5E5E5">there's a structure</font><font color="#CCCCCC"> to the data model</font>

161
00:07:13,840 --> 00:07:20,630
<font color="#E5E5E5">there's a big difference</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> yang between</font>

162
00:07:16,070 --> 00:07:22,909
configuration and operational data we're

163
00:07:20,630 --> 00:07:25,159
going to look at<font color="#E5E5E5"> both</font><font color="#CCCCCC"> built-in meaning</font>

164
00:07:22,910 --> 00:07:27,229
that there are data types<font color="#CCCCCC"> that is part</font>

165
00:07:25,160 --> 00:07:30,650
of the<font color="#CCCCCC"> Yang language there are now also</font>

166
00:07:27,229 --> 00:07:32,659
<font color="#E5E5E5">a collection of ITF data types and we're</font>

167
00:07:30,650 --> 00:07:34,310
going<font color="#E5E5E5"> to look at how we customize or you</font>

168
00:07:32,660 --> 00:07:36,560
can actually<font color="#E5E5E5"> extend the data types</font><font color="#CCCCCC"> to</font>

169
00:07:34,310 --> 00:07:38,270
create your own<font color="#E5E5E5"> we're going to look at</font>

170
00:07:36,560 --> 00:07:40,729
conditional features which is a very

171
00:07:38,270 --> 00:07:42,620
powerful construct<font color="#E5E5E5"> we're going to look</font>

172
00:07:40,729 --> 00:07:44,719
at abstract identities which will make

173
00:07:42,620 --> 00:07:46,490
more sense later<font color="#CCCCCC"> and then we're</font><font color="#E5E5E5"> gonna</font>

174
00:07:44,720 --> 00:07:50,449
look at what may be<font color="#CCCCCC"> data based</font><font color="#E5E5E5"> people</font>

175
00:07:46,490 --> 00:07:54,139
would mention<font color="#E5E5E5"> to be foreign keys or in</font>

176
00:07:50,449 --> 00:07:55,490
this case<font color="#E5E5E5"> references to other</font><font color="#CCCCCC"> notes</font><font color="#E5E5E5"> so</font>

177
00:07:54,139 --> 00:07:58,699
those are the main<font color="#E5E5E5"> features</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're</font>

178
00:07:55,490 --> 00:08:00,289
<font color="#E5E5E5">gonna look at in this part and it's</font>

179
00:07:58,699 --> 00:08:02,720
<font color="#CCCCCC">useful to</font><font color="#E5E5E5"> start from the top</font>

180
00:08:00,289 --> 00:08:04,550
<font color="#E5E5E5">and look at a visual representation</font><font color="#CCCCCC"> of</font>

181
00:08:02,720 --> 00:08:07,449
<font color="#CCCCCC">the data</font><font color="#E5E5E5"> model</font><font color="#CCCCCC"> that we're looking</font><font color="#E5E5E5"> at so</font>

182
00:08:04,550 --> 00:08:09,979
in the ITF as I mentioned we took on the

183
00:08:07,449 --> 00:08:15,580
daunting task<font color="#E5E5E5"> of</font><font color="#CCCCCC"> seeing if we</font><font color="#E5E5E5"> can agree</font>

184
00:08:09,979 --> 00:08:17,810
<font color="#E5E5E5">on a one single model for interfaces</font>

185
00:08:15,580 --> 00:08:20,389
across all vendors<font color="#E5E5E5"> and across all</font>

186
00:08:17,810 --> 00:08:23,090
stakeholders and the visual<font color="#E5E5E5"> modeling of</font>

187
00:08:20,389 --> 00:08:25,099
this is<font color="#E5E5E5"> this there's two</font><font color="#CCCCCC"> data trees if</font>

188
00:08:23,090 --> 00:08:28,549
you like there's one data tree to the

189
00:08:25,099 --> 00:08:30,139
<font color="#CCCCCC">left</font><font color="#E5E5E5"> or actually in yang lingo we would</font>

190
00:08:28,550 --> 00:08:32,750
say<font color="#E5E5E5"> containers so there's two containers</font>

191
00:08:30,139 --> 00:08:36,740
<font color="#CCCCCC">in this data model one is called</font>

192
00:08:32,750 --> 00:08:39,320
interfaces it's actually a list and it's

193
00:08:36,740 --> 00:08:41,029
got a couple<font color="#E5E5E5"> of parameters a couple of</font>

194
00:08:39,320 --> 00:08:43,849
data points<font color="#CCCCCC"> to each member of the lists</font>

195
00:08:41,029 --> 00:08:46,550
<font color="#E5E5E5">it's keyed off a name it's got a type</font>

196
00:08:43,849 --> 00:08:48,650
<font color="#E5E5E5">it's got a boolean</font><font color="#CCCCCC"> that describes</font>

197
00:08:46,550 --> 00:08:51,800
whether it's enabled or<font color="#E5E5E5"> no and it's got</font>

198
00:08:48,650 --> 00:08:53,880
a way<font color="#CCCCCC"> of mentioning whether we're going</font>

199
00:08:51,800 --> 00:08:57,180
<font color="#E5E5E5">to enable traps for this interface</font>

200
00:08:53,880 --> 00:08:59,760
okay so<font color="#E5E5E5"> that's the readwrite part that's</font>

201
00:08:57,180 --> 00:09:01,650
<font color="#E5E5E5">what you can configure okay and then we</font>

202
00:08:59,760 --> 00:09:05,189
have to the<font color="#E5E5E5"> right side we have</font><font color="#CCCCCC"> a really</font>

203
00:09:01,650 --> 00:09:09,180
<font color="#E5E5E5">only part called interfaces state okay</font>

204
00:09:05,190 --> 00:09:10,950
they look<font color="#E5E5E5"> quite the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> in general</font>

205
00:09:09,180 --> 00:09:13,199
except<font color="#E5E5E5"> for a</font><font color="#CCCCCC"> couple of</font><font color="#E5E5E5"> things for</font>

206
00:09:10,950 --> 00:09:15,510
<font color="#CCCCCC">example</font><font color="#E5E5E5"> operational state like date and</font>

207
00:09:13,200 --> 00:09:17,970
time when did this interface change<font color="#E5E5E5"> last</font>

208
00:09:15,510 --> 00:09:19,560
<font color="#E5E5E5">if you guys for those of you who have a</font>

209
00:09:17,970 --> 00:09:21,930
<font color="#E5E5E5">background with me you will recognize</font>

210
00:09:19,560 --> 00:09:24,089
all these things we didn't reinvent much

211
00:09:21,930 --> 00:09:25,410
<font color="#E5E5E5">but we actually took most of the things</font>

212
00:09:24,090 --> 00:09:28,430
<font color="#E5E5E5">that we had learned from the</font><font color="#CCCCCC"> IAF nibs</font>

213
00:09:25,410 --> 00:09:30,780
<font color="#CCCCCC">and translate that</font><font color="#E5E5E5"> into useful yang</font><font color="#CCCCCC"> and</font>

214
00:09:28,430 --> 00:09:32,819
in order<font color="#E5E5E5"> for to support stacked</font>

215
00:09:30,780 --> 00:09:34,980
interfaces we needed<font color="#CCCCCC"> also to be able to</font>

216
00:09:32,820 --> 00:09:37,550
<font color="#E5E5E5">reference from an interface to another</font>

217
00:09:34,980 --> 00:09:40,440
and the reason why we split

218
00:09:37,550 --> 00:09:43,339
configuration and state was<font color="#CCCCCC"> that in many</font>

219
00:09:40,440 --> 00:09:45,870
systems<font color="#E5E5E5"> you can actually have available</font>

220
00:09:43,340 --> 00:09:48,480
interfaces that<font color="#CCCCCC"> are not</font><font color="#E5E5E5"> configured</font><font color="#CCCCCC"> a</font>

221
00:09:45,870 --> 00:09:50,580
newly inserted line cord might not

222
00:09:48,480 --> 00:09:52,920
necessarily<font color="#E5E5E5"> have configuration</font><font color="#CCCCCC"> but it's</font>

223
00:09:50,580 --> 00:09:55,620
<font color="#E5E5E5">around so it probably has operational</font>

224
00:09:52,920 --> 00:09:57,780
<font color="#CCCCCC">States</font><font color="#E5E5E5"> you may also have configured</font>

225
00:09:55,620 --> 00:09:59,760
interfaces that are<font color="#E5E5E5"> not physically</font>

226
00:09:57,780 --> 00:10:02,160
around many vendors allow for pre

227
00:09:59,760 --> 00:10:05,310
configurations you're able to set stuff

228
00:10:02,160 --> 00:10:07,199
up<font color="#E5E5E5"> in a while waiting for a line cord to</font>

229
00:10:05,310 --> 00:10:10,380
be slaughtered<font color="#CCCCCC"> in so we</font><font color="#E5E5E5"> needed these to</font>

230
00:10:07,200 --> 00:10:12,930
be separate<font color="#E5E5E5"> entities so one could live</font>

231
00:10:10,380 --> 00:10:15,510
<font color="#E5E5E5">without the other there we go</font><font color="#CCCCCC"> first</font>

232
00:10:12,930 --> 00:10:17,579
<font color="#E5E5E5">question</font><font color="#CCCCCC"> first risk and there are no</font>

233
00:10:15,510 --> 00:10:20,490
<font color="#E5E5E5">masks</font><font color="#CCCCCC"> um is my name so can</font><font color="#E5E5E5"> you comment</font>

234
00:10:17,580 --> 00:10:22,980
just shortly<font color="#E5E5E5"> for an operator how</font>

235
00:10:20,490 --> 00:10:26,280
<font color="#CCCCCC">familiar will be the interface</font><font color="#E5E5E5"> in the</font>

236
00:10:22,980 --> 00:10:31,760
interface model<font color="#CCCCCC"> in</font><font color="#E5E5E5"> young relative to the</font>

237
00:10:26,280 --> 00:10:35,010
interface in<font color="#E5E5E5"> mid to SNMP environment</font>

238
00:10:31,760 --> 00:10:38,189
about<font color="#E5E5E5"> almost</font><font color="#CCCCCC"> to play that back to you do</font>

239
00:10:35,010 --> 00:10:39,240
you<font color="#E5E5E5"> want to comment on that</font><font color="#CCCCCC"> no it's</font>

240
00:10:38,190 --> 00:10:41,010
actually<font color="#E5E5E5"> a question</font><font color="#CCCCCC"> about the</font>

241
00:10:39,240 --> 00:10:44,220
<font color="#CCCCCC">realisation because I can</font><font color="#E5E5E5"> comment a lot</font>

242
00:10:41,010 --> 00:10:46,500
about<font color="#E5E5E5"> history but what result is</font>

243
00:10:44,220 --> 00:10:47,970
actually<font color="#CCCCCC"> interesting probably</font><font color="#E5E5E5"> for your</font>

244
00:10:46,500 --> 00:10:52,230
<font color="#CCCCCC">chance</font><font color="#E5E5E5"> from an alternative point of view</font>

245
00:10:47,970 --> 00:10:54,480
how close we<font color="#CCCCCC"> are with interface model</font>

246
00:10:52,230 --> 00:10:57,060
that we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> familiar with okay I'm</font>

247
00:10:54,480 --> 00:10:59,100
looking<font color="#CCCCCC"> I'm sure</font><font color="#E5E5E5"> because I am so we</font>

248
00:10:57,060 --> 00:11:01,229
ended up reasonably close I guess it's a

249
00:10:59,100 --> 00:11:02,880
flat<font color="#E5E5E5"> list that's maybe</font><font color="#CCCCCC"> that's important</font>

250
00:11:01,230 --> 00:11:05,130
so there's no for example<font color="#CCCCCC"> there is no</font>

251
00:11:02,880 --> 00:11:07,860
containment<font color="#E5E5E5"> so there's no three</font>

252
00:11:05,130 --> 00:11:09,689
structure of interfaces so in terms of

253
00:11:07,860 --> 00:11:13,200
stacked interfaces or<font color="#CCCCCC"> later interfaces</font>

254
00:11:09,690 --> 00:11:14,760
that solved by the interface<font color="#E5E5E5"> state ref</font>

255
00:11:13,200 --> 00:11:16,440
rather than actually<font color="#CCCCCC"> using a</font><font color="#E5E5E5"> three</font>

256
00:11:14,760 --> 00:11:18,899
structure for it<font color="#E5E5E5"> so I'd say it's</font>

257
00:11:16,440 --> 00:11:20,220
reasonably<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> if you look at the</font>

258
00:11:18,899 --> 00:11:22,140
details again we<font color="#E5E5E5"> won't go through</font>

259
00:11:20,220 --> 00:11:25,320
<font color="#CCCCCC">everything there's also</font><font color="#E5E5E5"> nice mapping to</font>

260
00:11:22,140 --> 00:11:27,689
the<font color="#CCCCCC"> if' mid name</font><font color="#E5E5E5"> so there's</font><font color="#CCCCCC"> a way of</font>

261
00:11:25,320 --> 00:11:29,250
actually<font color="#CCCCCC"> figuring out based on the data</font>

262
00:11:27,690 --> 00:11:31,350
<font color="#E5E5E5">you get from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Netcom</font><font color="#CCCCCC"> 4's</font><font color="#E5E5E5"> conf</font>

263
00:11:29,250 --> 00:11:34,649
interface or the yang defined interfaces

264
00:11:31,350 --> 00:11:37,440
which me be interface<font color="#E5E5E5"> this actually</font>

265
00:11:34,649 --> 00:11:40,370
refers to kind of what you were asking

266
00:11:37,440 --> 00:11:40,370
<font color="#E5E5E5">thank you sir</font>

267
00:11:43,250 --> 00:11:48,060
and here's another<font color="#E5E5E5"> thing that's</font>

268
00:11:46,050 --> 00:11:50,279
important<font color="#E5E5E5"> we</font><font color="#CCCCCC"> threw out this presentation</font>

269
00:11:48,060 --> 00:11:51,300
<font color="#E5E5E5">this is kind of what I visually struggle</font>

270
00:11:50,279 --> 00:11:53,250
with a little bit so I'm<font color="#E5E5E5"> gonna try this</font>

271
00:11:51,300 --> 00:11:54,959
<font color="#E5E5E5">on you guys it's a big</font><font color="#CCCCCC"> difference</font>

272
00:11:53,250 --> 00:11:57,930
between when I<font color="#E5E5E5"> talk about model</font>

273
00:11:54,959 --> 00:12:00,540
structure and when I talk about<font color="#E5E5E5"> instance</font>

274
00:11:57,930 --> 00:12:02,640
data structure so the model would

275
00:12:00,540 --> 00:12:04,260
typically<font color="#E5E5E5"> be in</font><font color="#CCCCCC"> Yang and the instance</font>

276
00:12:02,640 --> 00:12:08,149
data would<font color="#CCCCCC"> be your actual configuration</font>

277
00:12:04,260 --> 00:12:10,740
<font color="#E5E5E5">or operational data</font><font color="#CCCCCC"> your counters right</font>

278
00:12:08,149 --> 00:12:12,600
so the interface<font color="#E5E5E5"> is list of course to</font>

279
00:12:10,740 --> 00:12:14,760
the left here<font color="#CCCCCC"> the</font><font color="#E5E5E5"> model says</font><font color="#CCCCCC"> that</font>

280
00:12:12,600 --> 00:12:16,860
there's a list of interfaces<font color="#E5E5E5"> they're</font>

281
00:12:14,760 --> 00:12:18,990
<font color="#E5E5E5">indexed off of the name of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> interface</font>

282
00:12:16,860 --> 00:12:20,970
<font color="#CCCCCC">I told you about the</font><font color="#E5E5E5"> other leaves but of</font>

283
00:12:18,990 --> 00:12:24,480
course in the instance data<font color="#E5E5E5"> you have a</font>

284
00:12:20,970 --> 00:12:29,459
<font color="#CCCCCC">number of instances according</font><font color="#E5E5E5"> to the</font>

285
00:12:24,480 --> 00:12:31,860
model<font color="#E5E5E5"> cleared okay there's a little sea</font>

286
00:12:29,459 --> 00:12:32,510
of<font color="#E5E5E5"> nodes so that seems to be seems to be</font>

287
00:12:31,860 --> 00:12:36,060
okay

288
00:12:32,510 --> 00:12:38,040
and well the<font color="#E5E5E5"> example here of course</font>

289
00:12:36,060 --> 00:12:40,380
shows that they might look the<font color="#CCCCCC"> same they</font>

290
00:12:38,040 --> 00:12:42,930
are<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> type they're enabled</font><font color="#CCCCCC"> of</font>

291
00:12:40,380 --> 00:12:45,360
this<font color="#E5E5E5"> guy's actually have to link down</font>

292
00:12:42,930 --> 00:12:48,510
<font color="#CCCCCC">trap enable that enable</font><font color="#E5E5E5"> false and their</font>

293
00:12:45,360 --> 00:12:49,080
names their keys are<font color="#CCCCCC"> easy eth0 eth1</font><font color="#E5E5E5"> or</font>

294
00:12:48,510 --> 00:12:51,209
<font color="#CCCCCC">eth3</font>

295
00:12:49,080 --> 00:12:57,089
so<font color="#CCCCCC"> there there are</font><font color="#E5E5E5"> differences</font><font color="#CCCCCC"> of course</font>

296
00:12:51,209 --> 00:12:59,180
<font color="#E5E5E5">between the the</font><font color="#CCCCCC"> list entries</font><font color="#E5E5E5"> okay here</font>

297
00:12:57,089 --> 00:13:03,810
we<font color="#CCCCCC"> go here's the first</font><font color="#E5E5E5"> glimpse of</font><font color="#CCCCCC"> yang</font>

298
00:12:59,180 --> 00:13:05,729
<font color="#E5E5E5">all yang files have a header and again</font>

299
00:13:03,810 --> 00:13:08,399
if you<font color="#E5E5E5"> guys have any background in memes</font>

300
00:13:05,730 --> 00:13:11,070
you will be surprised<font color="#E5E5E5"> about nothing here</font>

301
00:13:08,399 --> 00:13:13,980
<font color="#E5E5E5">right these are mostly</font><font color="#CCCCCC"> I will go</font><font color="#E5E5E5"> through</font>

302
00:13:11,070 --> 00:13:16,680
the details<font color="#CCCCCC"> informational stuffs you</font>

303
00:13:13,980 --> 00:13:19,529
have your organizational affiliation you

304
00:13:16,680 --> 00:13:21,239
<font color="#E5E5E5">have your contact information but things</font>

305
00:13:19,529 --> 00:13:22,830
to pay<font color="#E5E5E5"> attention to on the</font>

306
00:13:21,240 --> 00:13:25,410
top here is actually the module name

307
00:13:22,830 --> 00:13:29,430
this is<font color="#E5E5E5"> really a key feature</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> key thing</font>

308
00:13:25,410 --> 00:13:33,110
<font color="#CCCCCC">about</font><font color="#E5E5E5"> yang all modules have a name that</font>

309
00:13:29,430 --> 00:13:36,180
name for<font color="#E5E5E5"> good module writers need to be</font>

310
00:13:33,110 --> 00:13:37,770
globally unique so<font color="#E5E5E5"> you need to spend</font>

311
00:13:36,180 --> 00:13:40,859
<font color="#E5E5E5">some</font><font color="#CCCCCC"> time thinking about</font><font color="#E5E5E5"> the structure</font>

312
00:13:37,770 --> 00:13:43,620
<font color="#E5E5E5">of the module name now if you develop</font>

313
00:13:40,860 --> 00:13:45,420
yang modules in the scope of eitf you're

314
00:13:43,620 --> 00:13:48,810
good because<font color="#CCCCCC"> we actually suggest</font><font color="#E5E5E5"> a</font>

315
00:13:45,420 --> 00:13:51,569
structure and by prepending<font color="#E5E5E5"> IDF we</font>

316
00:13:48,810 --> 00:13:54,239
actually<font color="#E5E5E5"> okay we have some some freedom</font>

317
00:13:51,570 --> 00:13:55,920
<font color="#E5E5E5">of making sure that we don't</font><font color="#CCCCCC"> overrun</font>

318
00:13:54,240 --> 00:13:57,720
<font color="#E5E5E5">each other so the module name is</font>

319
00:13:55,920 --> 00:13:59,729
important and<font color="#E5E5E5"> also it ties into this</font>

320
00:13:57,720 --> 00:14:02,940
<font color="#E5E5E5">comes as a surprise for some people that</font>

321
00:13:59,730 --> 00:14:05,910
<font color="#CCCCCC">there's actually a formal mapping from</font>

322
00:14:02,940 --> 00:14:08,790
the module name<font color="#E5E5E5"> and the revision</font><font color="#CCCCCC"> we'll</font>

323
00:14:05,910 --> 00:14:11,310
get to that<font color="#E5E5E5"> to what</font><font color="#CCCCCC"> the file name</font><font color="#E5E5E5"> for</font>

324
00:14:08,790 --> 00:14:15,270
this yang module should look like<font color="#E5E5E5"> so a</font>

325
00:14:11,310 --> 00:14:17,640
file<font color="#E5E5E5"> a formally well specified mod yang</font>

326
00:14:15,270 --> 00:14:20,250
file<font color="#E5E5E5"> is supposed to be a concatenation</font>

327
00:14:17,640 --> 00:14:23,640
<font color="#CCCCCC">of the module name</font><font color="#E5E5E5"> ITF interfaces in</font>

328
00:14:20,250 --> 00:14:25,500
this case and the<font color="#E5E5E5"> revision okay so the</font>

329
00:14:23,640 --> 00:14:29,010
<font color="#CCCCCC">formally</font><font color="#E5E5E5"> correct file name for this guy</font>

330
00:14:25,500 --> 00:14:32,730
here would<font color="#E5E5E5"> be ITF interfaces at sign and</font>

331
00:14:29,010 --> 00:14:35,850
the<font color="#E5E5E5"> revision dot yang</font><font color="#CCCCCC"> okay this is new</font>

332
00:14:32,730 --> 00:14:38,250
this<font color="#CCCCCC"> helps quite a bit for tool makers</font>

333
00:14:35,850 --> 00:14:40,890
<font color="#E5E5E5">all they need to</font><font color="#CCCCCC"> know when looking</font><font color="#E5E5E5"> in</font>

334
00:14:38,250 --> 00:14:42,630
file systems<font color="#E5E5E5"> is the module name of the</font>

335
00:14:40,890 --> 00:14:44,760
<font color="#E5E5E5">module</font><font color="#CCCCCC"> ailing combined with the revision</font>

336
00:14:42,630 --> 00:14:46,740
<font color="#E5E5E5">and they can look in their paths or what</font>

337
00:14:44,760 --> 00:14:48,899
have they and understand this<font color="#CCCCCC"> is the</font>

338
00:14:46,740 --> 00:14:51,660
<font color="#E5E5E5">connection between the module and where</font>

339
00:14:48,899 --> 00:14:53,940
the physical manifestation of it is okay

340
00:14:51,660 --> 00:14:57,390
<font color="#E5E5E5">so that's important and the module name</font>

341
00:14:53,940 --> 00:15:00,720
<font color="#E5E5E5">will come</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> later we have a namespace</font>

342
00:14:57,390 --> 00:15:02,760
<font color="#E5E5E5">so net conf uses namespaces because</font>

343
00:15:00,720 --> 00:15:04,050
there's xml<font color="#E5E5E5"> encoding on</font><font color="#CCCCCC"> the wire so we</font>

344
00:15:02,760 --> 00:15:06,870
<font color="#E5E5E5">need to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that we can</font><font color="#CCCCCC"> actually</font>

345
00:15:04,050 --> 00:15:09,270
separate<font color="#E5E5E5"> datasets that might be</font>

346
00:15:06,870 --> 00:15:13,290
intertwined<font color="#E5E5E5"> or close to</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> other based</font>

347
00:15:09,270 --> 00:15:14,880
on which model<font color="#E5E5E5"> it comes from so you</font>

348
00:15:13,290 --> 00:15:17,699
declare your namespace that's supposed

349
00:15:14,880 --> 00:15:19,950
to<font color="#CCCCCC"> be a URI</font><font color="#E5E5E5"> so you can either take a URL</font>

350
00:15:17,700 --> 00:15:23,220
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you own yourself like a domain name</font>

351
00:15:19,950 --> 00:15:25,560
or HTTP or in this case again<font color="#E5E5E5"> if you're</font>

352
00:15:23,220 --> 00:15:28,050
with the ITF and produce these<font color="#CCCCCC"> things in</font>

353
00:15:25,560 --> 00:15:32,520
the scope of<font color="#E5E5E5"> the ITF we have a</font><font color="#CCCCCC"> Ayanna</font>

354
00:15:28,050 --> 00:15:34,589
registered namespace a URL<font color="#E5E5E5"> ITF yeah you</font>

355
00:15:32,520 --> 00:15:36,840
can see the path going there and

356
00:15:34,590 --> 00:15:39,780
you prepend the<font color="#E5E5E5"> module name these are</font>

357
00:15:36,840 --> 00:15:42,750
<font color="#CCCCCC">the things that our validating tools</font>

358
00:15:39,780 --> 00:15:45,569
keep running up against so<font color="#E5E5E5"> it actually</font>

359
00:15:42,750 --> 00:15:47,550
pays well off<font color="#E5E5E5"> especially if you develop</font>

360
00:15:45,570 --> 00:15:50,130
things inside the<font color="#E5E5E5"> ITF</font><font color="#CCCCCC"> that pay some</font>

361
00:15:47,550 --> 00:15:52,349
attention to<font color="#E5E5E5"> these things to</font><font color="#CCCCCC"> make sure</font>

362
00:15:50,130 --> 00:15:55,200
<font color="#CCCCCC">that they're actually</font><font color="#E5E5E5"> correct</font><font color="#CCCCCC"> because</font>

363
00:15:52,350 --> 00:15:57,480
that<font color="#E5E5E5"> helps you later down the line also</font>

364
00:15:55,200 --> 00:15:59,940
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of a an outcome of the fact</font><font color="#CCCCCC"> that we</font>

365
00:15:57,480 --> 00:16:01,890
have<font color="#E5E5E5"> xml bindings is a prefix you need a</font>

366
00:15:59,940 --> 00:16:04,920
prefix and<font color="#CCCCCC"> it will also come back when</font>

367
00:16:01,890 --> 00:16:07,620
we talk about<font color="#E5E5E5"> imports and includes so</font>

368
00:16:04,920 --> 00:16:09,689
you have to come<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> a prefix make</font>

369
00:16:07,620 --> 00:16:11,040
it short make it<font color="#E5E5E5"> make don't have to make</font>

370
00:16:09,690 --> 00:16:12,690
it interesting<font color="#E5E5E5"> but make</font><font color="#CCCCCC"> it short and</font>

371
00:16:11,040 --> 00:16:16,439
<font color="#E5E5E5">make it you know reasonably easy to</font>

372
00:16:12,690 --> 00:16:17,910
<font color="#CCCCCC">remember</font><font color="#E5E5E5"> and very importantly we have or</font>

373
00:16:16,440 --> 00:16:19,440
the<font color="#CCCCCC"> yang language and there's a lot</font><font color="#E5E5E5"> of</font>

374
00:16:17,910 --> 00:16:23,280
nice<font color="#CCCCCC"> things written about this in the</font>

375
00:16:19,440 --> 00:16:25,770
<font color="#CCCCCC">indy</font><font color="#E5E5E5"> RFC the revision statement is on a</font>

376
00:16:23,280 --> 00:16:29,550
date format and describes of course when

377
00:16:25,770 --> 00:16:31,319
this<font color="#E5E5E5"> yang file was published</font><font color="#CCCCCC"> whatever</font>

378
00:16:29,550 --> 00:16:33,479
<font color="#CCCCCC">that means</font><font color="#E5E5E5"> for us in the ITF it means</font>

379
00:16:31,320 --> 00:16:35,340
something<font color="#CCCCCC"> very specific for private</font>

380
00:16:33,480 --> 00:16:35,880
writers or for<font color="#E5E5E5"> for vendors it might mean</font>

381
00:16:35,340 --> 00:16:38,730
<font color="#E5E5E5">something else</font>

382
00:16:35,880 --> 00:16:41,520
but needs to be<font color="#E5E5E5"> in a date format and</font>

383
00:16:38,730 --> 00:16:44,100
again it uniquely identifies the version

384
00:16:41,520 --> 00:16:45,780
of the yang so we don't have<font color="#E5E5E5"> any other</font>

385
00:16:44,100 --> 00:16:48,570
<font color="#CCCCCC">types of versioning it's actually the</font>

386
00:16:45,780 --> 00:16:50,970
date format here and of course we

387
00:16:48,570 --> 00:16:52,550
realize<font color="#E5E5E5"> or understand or plan for the</font>

388
00:16:50,970 --> 00:16:55,680
fact that<font color="#E5E5E5"> there will be later</font>

389
00:16:52,550 --> 00:16:58,380
manifestations of<font color="#E5E5E5"> IETF interfaces that</font>

390
00:16:55,680 --> 00:17:00,329
<font color="#E5E5E5">will have new revision statements</font><font color="#CCCCCC"> okay</font>

391
00:16:58,380 --> 00:17:02,670
<font color="#E5E5E5">and there's something called</font><font color="#CCCCCC"> import by</font>

392
00:17:00,330 --> 00:17:04,079
revision<font color="#CCCCCC"> because of course</font><font color="#E5E5E5"> if you import</font>

393
00:17:02,670 --> 00:17:06,889
you want to be able<font color="#E5E5E5"> to import this</font>

394
00:17:04,079 --> 00:17:14,609
specific<font color="#E5E5E5"> version that you're looking for</font>

395
00:17:06,890 --> 00:17:16,260
<font color="#CCCCCC">ok so let's start from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> top I showed</font>

396
00:17:14,609 --> 00:17:20,280
you if you remember<font color="#E5E5E5"> that there were two</font>

397
00:17:16,260 --> 00:17:24,140
top containers in the<font color="#E5E5E5"> ITF interfaces</font>

398
00:17:20,280 --> 00:17:26,520
<font color="#E5E5E5">yang module this is</font><font color="#CCCCCC"> what the container</font>

399
00:17:24,140 --> 00:17:29,070
<font color="#CCCCCC">feature or the</font><font color="#E5E5E5"> container keyword looks</font>

400
00:17:26,520 --> 00:17:29,550
like it is<font color="#E5E5E5"> doing one thing and one thing</font>

401
00:17:29,070 --> 00:17:31,409
only

402
00:17:29,550 --> 00:17:32,669
it does containment<font color="#E5E5E5"> it's a way of</font>

403
00:17:31,410 --> 00:17:34,770
grouping things together

404
00:17:32,670 --> 00:17:37,350
it ends up of course in<font color="#E5E5E5"> your</font><font color="#CCCCCC"> tree path</font>

405
00:17:34,770 --> 00:17:40,350
but it has no<font color="#E5E5E5"> semantic value except for</font>

406
00:17:37,350 --> 00:17:42,560
that defines an<font color="#E5E5E5"> interior data node the</font>

407
00:17:40,350 --> 00:17:44,699
data<font color="#CCCCCC"> notes in the schema tree and</font>

408
00:17:42,560 --> 00:17:47,850
usually there's a list of child<font color="#E5E5E5"> nodes</font>

409
00:17:44,700 --> 00:17:49,830
<font color="#CCCCCC">and of course you have one or</font>

410
00:17:47,850 --> 00:17:54,678
many of those on the top of<font color="#E5E5E5"> your module</font>

411
00:17:49,830 --> 00:17:54,678
<font color="#E5E5E5">it's a it's a staple of yeah if you like</font>

412
00:17:55,160 --> 00:18:02,419
the next most common feature or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font>

413
00:17:59,190 --> 00:18:06,450
most common construct<font color="#E5E5E5"> is the list right</font>

414
00:18:02,419 --> 00:18:08,730
in this case<font color="#E5E5E5"> we have two lists we have a</font>

415
00:18:06,450 --> 00:18:12,210
list of interfaces<font color="#E5E5E5"> and I mentioned we</font>

416
00:18:08,730 --> 00:18:15,510
have a list of interfaces<font color="#E5E5E5"> state</font><font color="#CCCCCC"> okay so</font>

417
00:18:12,210 --> 00:18:18,559
two lists on<font color="#CCCCCC"> the top single argument</font>

418
00:18:15,510 --> 00:18:21,419
<font color="#E5E5E5">again it's the name of the list</font>

419
00:18:18,559 --> 00:18:23,450
<font color="#E5E5E5">represents a collection of entries</font><font color="#CCCCCC"> each</font>

420
00:18:21,419 --> 00:18:26,490
entry consists of one or<font color="#CCCCCC"> more</font><font color="#E5E5E5"> notes</font>

421
00:18:23,450 --> 00:18:28,950
<font color="#E5E5E5">nothing strange there's a couple of</font>

422
00:18:26,490 --> 00:18:31,020
<font color="#E5E5E5">things in yang that might treat people</font>

423
00:18:28,950 --> 00:18:33,960
up a<font color="#E5E5E5"> little bit is that there are two</font>

424
00:18:31,020 --> 00:18:35,809
types of<font color="#E5E5E5"> lists or they well well there's</font>

425
00:18:33,960 --> 00:18:38,250
two type of lists for this purpose right

426
00:18:35,809 --> 00:18:40,470
<font color="#E5E5E5">it's that</font><font color="#CCCCCC"> and I mentioned</font><font color="#E5E5E5"> this early on</font>

427
00:18:38,250 --> 00:18:42,809
that we make a streak difference between

428
00:18:40,470 --> 00:18:46,020
<font color="#E5E5E5">data sets that</font><font color="#CCCCCC"> are configurable</font><font color="#E5E5E5"> and data</font>

429
00:18:42,809 --> 00:18:48,299
sets that are operational data so by

430
00:18:46,020 --> 00:18:50,730
<font color="#E5E5E5">using the config falls constructor the</font>

431
00:18:48,299 --> 00:18:54,000
config<font color="#E5E5E5"> key</font><font color="#CCCCCC"> was a false argument</font><font color="#E5E5E5"> means</font>

432
00:18:50,730 --> 00:18:58,470
that all data in the interfaces<font color="#CCCCCC"> state is</font>

433
00:18:54,000 --> 00:19:00,480
immutable<font color="#CCCCCC"> it's read-only</font><font color="#E5E5E5"> okay so as I</font>

434
00:18:58,470 --> 00:19:03,200
<font color="#E5E5E5">said that represents the state of</font><font color="#CCCCCC"> the</font>

435
00:19:00,480 --> 00:19:07,350
interfaces<font color="#E5E5E5"> nothing you can do about that</font>

436
00:19:03,200 --> 00:19:11,090
all lists that are<font color="#E5E5E5"> configurable</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> yang</font>

437
00:19:07,350 --> 00:19:13,530
<font color="#E5E5E5">like the interfaces list must have a key</font>

438
00:19:11,090 --> 00:19:16,408
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is what I know some people are</font>

439
00:19:13,530 --> 00:19:19,649
tripped up on right so in this case<font color="#E5E5E5"> we</font>

440
00:19:16,409 --> 00:19:21,240
have a key called name right so the

441
00:19:19,650 --> 00:19:24,090
index into<font color="#E5E5E5"> the list the way to identify</font>

442
00:19:21,240 --> 00:19:27,140
list entries<font color="#E5E5E5"> is by the index or by the</font>

443
00:19:24,090 --> 00:19:27,139
key<font color="#E5E5E5"> name</font>

444
00:19:31,260 --> 00:19:35,640
this is<font color="#E5E5E5"> Kent</font><font color="#CCCCCC"> just a minor clarification</font>

445
00:19:33,600 --> 00:19:38,850
they go<font color="#E5E5E5"> the key is only</font><font color="#CCCCCC"> required for</font>

446
00:19:35,640 --> 00:19:42,880
config true<font color="#CCCCCC"> good</font><font color="#E5E5E5"> yeah okay</font><font color="#CCCCCC"> true wait</font>

447
00:19:38,850 --> 00:19:44,709
wait good one what

448
00:19:42,880 --> 00:19:47,110
just said was that we have two<font color="#E5E5E5"> types of</font>

449
00:19:44,710 --> 00:19:48,210
<font color="#E5E5E5">lists in this example we have a list of</font>

450
00:19:47,110 --> 00:19:50,620
things<font color="#E5E5E5"> that you can actually configure</font>

451
00:19:48,210 --> 00:19:53,680
<font color="#E5E5E5">interfaces we have a list of things that</font>

452
00:19:50,620 --> 00:19:55,090
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can't configure and even if and</font>

453
00:19:53,680 --> 00:19:58,360
<font color="#E5E5E5">maybe this is where I should update the</font>

454
00:19:55,090 --> 00:20:00,010
example there's a key statement here you

455
00:19:58,360 --> 00:20:03,449
can actually<font color="#E5E5E5"> remove this it's fine to</font>

456
00:20:00,010 --> 00:20:09,480
have config<font color="#CCCCCC"> false lists</font><font color="#E5E5E5"> with no keys</font>

457
00:20:03,450 --> 00:20:09,480
<font color="#CCCCCC">okay a little</font><font color="#E5E5E5"> bit of nodding that's good</font>

458
00:20:11,850 --> 00:20:17,860
<font color="#E5E5E5">lists entries are defined by leaves so</font>

459
00:20:15,880 --> 00:20:19,930
if you have a list interface<font color="#E5E5E5"> with a key</font>

460
00:20:17,860 --> 00:20:25,659
<font color="#E5E5E5">name then</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> course</font><font color="#E5E5E5"> expected to</font>

461
00:20:19,930 --> 00:20:28,600
have a leaf called name defined by an

462
00:20:25,660 --> 00:20:31,180
identifier<font color="#E5E5E5"> and</font><font color="#CCCCCC"> has a type</font><font color="#E5E5E5"> in this case</font>

463
00:20:28,600 --> 00:20:32,740
we have<font color="#E5E5E5"> this probably the most common</font>

464
00:20:31,180 --> 00:20:35,470
<font color="#E5E5E5">and the most simple one it's a type</font>

465
00:20:32,740 --> 00:20:37,630
string<font color="#CCCCCC"> when in</font><font color="#E5E5E5"> this case then</font><font color="#CCCCCC"> of course</font>

466
00:20:35,470 --> 00:20:40,690
the leaf name serves as the least key of

467
00:20:37,630 --> 00:20:45,610
type string good to have some editing

468
00:20:40,690 --> 00:20:47,860
<font color="#E5E5E5">advice on the screen</font><font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you look at</font>

469
00:20:45,610 --> 00:20:49,600
the model of course again<font color="#CCCCCC"> we describe</font>

470
00:20:47,860 --> 00:20:52,570
the fact that<font color="#CCCCCC"> interfaces a list as num</font>

471
00:20:49,600 --> 00:20:54,939
name<font color="#CCCCCC"> has members</font><font color="#E5E5E5"> identified by a string</font>

472
00:20:52,570 --> 00:20:56,980
called name<font color="#CCCCCC"> and of course an example</font>

473
00:20:54,940 --> 00:20:59,440
instance of this would be<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> would</font>

474
00:20:56,980 --> 00:21:10,570
have<font color="#E5E5E5"> interface list members called ETH</font><font color="#CCCCCC"> 0</font>

475
00:20:59,440 --> 00:21:14,500
<font color="#CCCCCC">ETH 1 ETH</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> ok as I mentioned string is</font>

476
00:21:10,570 --> 00:21:16,710
a very<font color="#E5E5E5"> very basic type of</font><font color="#CCCCCC"> course</font><font color="#E5E5E5"> the</font>

477
00:21:14,500 --> 00:21:16,710
<font color="#E5E5E5">yang</font>

478
00:21:28,139 --> 00:21:33,908
yang itself<font color="#E5E5E5"> the language</font><font color="#CCCCCC"> comes with a</font>

479
00:21:30,730 --> 00:21:37,210
set<font color="#CCCCCC"> of building datatypes not much new</font>

480
00:21:33,909 --> 00:21:39,129
here<font color="#CCCCCC"> we didn't invent much of course we</font>

481
00:21:37,210 --> 00:21:42,100
got quite a<font color="#E5E5E5"> bit of</font><font color="#CCCCCC"> input or feedback</font>

482
00:21:39,129 --> 00:21:44,199
actually<font color="#E5E5E5"> from of course from people with</font>

483
00:21:42,100 --> 00:21:45,730
a maybe background and of course normal

484
00:21:44,200 --> 00:21:47,139
programming language at first<font color="#E5E5E5"> so you</font>

485
00:21:45,730 --> 00:21:52,179
won't be too surprised we have a binary

486
00:21:47,139 --> 00:21:54,580
<font color="#E5E5E5">we have bits boolean decimal 64 we have</font>

487
00:21:52,179 --> 00:21:57,249
the common aims on sign - we have

488
00:21:54,580 --> 00:21:59,499
enumerations<font color="#CCCCCC"> I will pick out some of</font>

489
00:21:57,249 --> 00:22:02,919
<font color="#CCCCCC">these and actually</font><font color="#E5E5E5"> get to</font><font color="#CCCCCC"> them later in</font>

490
00:21:59,499 --> 00:22:04,659
the in the presentation<font color="#CCCCCC"> Union well</font>

491
00:22:02,919 --> 00:22:09,220
<font color="#E5E5E5">nothing nothing particularly strange</font>

492
00:22:04,659 --> 00:22:09,789
here<font color="#CCCCCC"> depending on</font><font color="#E5E5E5"> what type of type you</font>

493
00:22:09,220 --> 00:22:12,789
have

494
00:22:09,789 --> 00:22:14,379
there are also qualifiers if you like<font color="#E5E5E5"> so</font>

495
00:22:12,789 --> 00:22:16,809
things like pattern range and length

496
00:22:14,379 --> 00:22:19,928
that<font color="#CCCCCC"> you can use to restrict the value</font>

497
00:22:16,809 --> 00:22:24,129
space for particular<font color="#E5E5E5"> types so in this</font>

498
00:22:19,929 --> 00:22:26,230
case it's an<font color="#E5E5E5"> example of a string that</font>

499
00:22:24,129 --> 00:22:29,949
has<font color="#CCCCCC"> the length of</font><font color="#E5E5E5"> for the lexical length</font>

500
00:22:26,230 --> 00:22:32,830
of<font color="#CCCCCC"> four so for actual if you like</font>

501
00:22:29,950 --> 00:22:34,200
letters in the string with a particular

502
00:22:32,830 --> 00:22:36,639
pattern<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> regular expression</font>

503
00:22:34,200 --> 00:22:39,159
<font color="#CCCCCC">this is actually of course</font><font color="#E5E5E5"> then the core</font>

504
00:22:36,639 --> 00:22:41,860
of<font color="#E5E5E5"> most of the derived types like IP</font>

505
00:22:39,159 --> 00:22:45,129
address like ipv6<font color="#CCCCCC"> address and so forth</font>

506
00:22:41,860 --> 00:22:47,309
basically strings but with a<font color="#E5E5E5"> pattern to</font>

507
00:22:45,129 --> 00:22:47,309
them

508
00:22:54,280 --> 00:22:58,700
so in this case for<font color="#CCCCCC"> this interface</font><font color="#E5E5E5"> we</font>

509
00:22:57,800 --> 00:23:01,580
have<font color="#CCCCCC"> a leaf called</font>

510
00:22:58,700 --> 00:23:01,730
enabled<font color="#E5E5E5"> it's of type boolean oh there we</font>

511
00:23:01,580 --> 00:23:05,169
go

512
00:23:01,730 --> 00:23:07,400
<font color="#CCCCCC">on the previous slide yes then go back</font>

513
00:23:05,170 --> 00:23:09,110
so you specify the pattern for each

514
00:23:07,400 --> 00:23:15,140
<font color="#E5E5E5">character how do you how do you do that</font>

515
00:23:09,110 --> 00:23:17,209
yeah so so free so so in this case what

516
00:23:15,140 --> 00:23:18,560
this says is that<font color="#E5E5E5"> the value space of the</font>

517
00:23:17,210 --> 00:23:22,400
lexical space or the<font color="#E5E5E5"> length of the</font>

518
00:23:18,560 --> 00:23:25,129
string is between<font color="#CCCCCC"> zero to four and that</font>

519
00:23:22,400 --> 00:23:28,850
<font color="#E5E5E5">the pattern</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the actually instance</font>

520
00:23:25,130 --> 00:23:30,890
data needs<font color="#E5E5E5"> to match</font><font color="#CCCCCC"> it's this pattern</font><font color="#E5E5E5"> so</font>

521
00:23:28,850 --> 00:23:33,620
what this<font color="#E5E5E5"> says is that you know you you</font>

522
00:23:30,890 --> 00:23:37,190
<font color="#E5E5E5">guys are probably familiar with</font><font color="#CCCCCC"> red</font><font color="#E5E5E5"> X so</font>

523
00:23:33,620 --> 00:23:39,199
the members need to<font color="#E5E5E5"> be in</font><font color="#CCCCCC"> 0 to 9 82 F</font>

524
00:23:37,190 --> 00:23:42,760
for a<font color="#E5E5E5"> to F</font><font color="#CCCCCC"> right so it's</font><font color="#E5E5E5"> it's a very</font>

525
00:23:39,200 --> 00:23:53,720
<font color="#E5E5E5">crude maximum for length X</font>

526
00:23:42,760 --> 00:23:56,390
representation okay so for this

527
00:23:53,720 --> 00:23:59,180
<font color="#E5E5E5">interface we have</font><font color="#CCCCCC"> a leaf called</font><font color="#E5E5E5"> enabled</font>

528
00:23:56,390 --> 00:24:02,240
which of course describes the configured

529
00:23:59,180 --> 00:24:04,610
or desired state of this<font color="#E5E5E5"> interface is it</font>

530
00:24:02,240 --> 00:24:08,510
up<font color="#E5E5E5"> or down very simple</font>

531
00:24:04,610 --> 00:24:12,139
and both boolean also allows you to<font color="#E5E5E5"> put</font>

532
00:24:08,510 --> 00:24:15,610
<font color="#CCCCCC">a default</font><font color="#E5E5E5"> value so default is if you</font>

533
00:24:12,140 --> 00:24:19,040
don't do anything<font color="#E5E5E5"> and this leaf is</font>

534
00:24:15,610 --> 00:24:21,679
actually<font color="#E5E5E5"> instantiated</font><font color="#CCCCCC"> so if you create</font>

535
00:24:19,040 --> 00:24:24,139
<font color="#E5E5E5">this leaf but you don't provide a value</font>

536
00:24:21,680 --> 00:24:25,970
for enabled the system will<font color="#E5E5E5"> work off of</font>

537
00:24:24,140 --> 00:24:28,490
<font color="#CCCCCC">the assumption that it's going</font><font color="#E5E5E5"> to run as</font>

538
00:24:25,970 --> 00:24:32,260
<font color="#CCCCCC">true</font><font color="#E5E5E5"> so if you create an interface</font><font color="#CCCCCC"> it</font>

539
00:24:28,490 --> 00:24:35,360
will come up that's the effect of this

540
00:24:32,260 --> 00:24:37,460
and of<font color="#CCCCCC"> course an example again</font><font color="#E5E5E5"> this is</font>

541
00:24:35,360 --> 00:24:40,159
the model we've added the boolean leaf

542
00:24:37,460 --> 00:24:45,280
<font color="#CCCCCC">an instance could be then that well all</font>

543
00:24:40,160 --> 00:24:45,280
three<font color="#E5E5E5"> of these interfaces</font><font color="#CCCCCC"> are up okay</font>

544
00:24:48,220 --> 00:24:54,920
next<font color="#E5E5E5"> step I mentioned that we have a</font>

545
00:24:51,670 --> 00:24:57,260
leaf<font color="#E5E5E5"> called linked up down trap enable</font>

546
00:24:54,920 --> 00:24:58,670
that controls whether we send as an MP

547
00:24:57,260 --> 00:25:03,250
traps when something happens<font color="#E5E5E5"> to this</font>

548
00:24:58,670 --> 00:25:05,660
interface<font color="#E5E5E5"> this is of type enumeration</font>

549
00:25:03,250 --> 00:25:07,399
you will recognize this again<font color="#E5E5E5"> from most</font>

550
00:25:05,660 --> 00:25:09,619
programming languages in the world

551
00:25:07,399 --> 00:25:11,658
you define it by saying type enumeration

552
00:25:09,619 --> 00:25:13,580
and then you<font color="#E5E5E5"> enumerate the enums</font><font color="#CCCCCC"> here we</font>

553
00:25:11,659 --> 00:25:13,999
go another question<font color="#CCCCCC"> I'm just have one</font>

554
00:25:13,580 --> 00:25:17,149
question

555
00:25:13,999 --> 00:25:20,389
<font color="#CCCCCC">I'm pretty late but</font><font color="#E5E5E5"> the least interface</font>

556
00:25:17,149 --> 00:25:23,839
<font color="#E5E5E5">key equal name yes does it</font><font color="#CCCCCC"> mean that we</font>

557
00:25:20,389 --> 00:25:26,209
<font color="#CCCCCC">have a name</font><font color="#E5E5E5"> is for the least awful to</font>

558
00:25:23,839 --> 00:25:29,899
further interfaces<font color="#E5E5E5"> it's for the it's the</font>

559
00:25:26,210 --> 00:25:31,700
key for the interface members so yeah so

560
00:25:29,899 --> 00:25:33,439
all interfaces must<font color="#CCCCCC"> have a name</font><font color="#E5E5E5"> field</font>

561
00:25:31,700 --> 00:25:36,169
<font color="#E5E5E5">must be unique and that's how you</font>

562
00:25:33,440 --> 00:25:39,099
identify uniquely<font color="#CCCCCC"> identify one of</font><font color="#E5E5E5"> the</font>

563
00:25:36,169 --> 00:25:44,869
members<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thank you you're welcome</font>

564
00:25:39,099 --> 00:25:48,769
<font color="#CCCCCC">okay oh sure now it's</font><font color="#E5E5E5"> getting we're</font>

565
00:25:44,869 --> 00:25:52,849
getting you have here<font color="#CCCCCC"> linked up down</font>

566
00:25:48,769 --> 00:25:55,489
<font color="#E5E5E5">trap in the previous slide you have</font>

567
00:25:52,849 --> 00:25:59,658
enabled<font color="#E5E5E5"> and enabled is actually</font>

568
00:25:55,489 --> 00:26:02,239
configured enabled<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'm I can</font>

569
00:25:59,659 --> 00:26:06,710
configure<font color="#CCCCCC"> the interfaces enabled</font><font color="#E5E5E5"> at</font>

570
00:26:02,239 --> 00:26:08,479
least I think so<font color="#E5E5E5"> I'm and it might not</font>

571
00:26:06,710 --> 00:26:10,969
<font color="#E5E5E5">come</font><font color="#CCCCCC"> up because</font><font color="#E5E5E5"> the other side is not up</font>

572
00:26:08,479 --> 00:26:13,269
the laser is<font color="#CCCCCC"> not on</font><font color="#E5E5E5"> all kinds of reasons</font>

573
00:26:10,969 --> 00:26:16,309
<font color="#CCCCCC">this</font><font color="#E5E5E5"> trap</font><font color="#CCCCCC"> is probably for the</font>

574
00:26:13,269 --> 00:26:18,979
operational<font color="#E5E5E5"> uptown versus the configure</font>

575
00:26:16,309 --> 00:26:21,589
<font color="#E5E5E5">uptown man good points good point</font>

576
00:26:18,979 --> 00:26:24,080
did anybody catch that<font color="#E5E5E5"> okay so there is</font>

577
00:26:21,589 --> 00:26:27,408
difference between operational<font color="#CCCCCC"> uptown</font>

578
00:26:24,080 --> 00:26:29,149
and administratively<font color="#E5E5E5"> uptown okay you can</font>

579
00:26:27,409 --> 00:26:31,629
wish for uni face to be up<font color="#CCCCCC"> forever but</font>

580
00:26:29,149 --> 00:26:37,668
if there's no cabling<font color="#E5E5E5"> it won't come up</font>

581
00:26:31,629 --> 00:26:39,589
<font color="#E5E5E5">it's a good point thank you and it ties</font>

582
00:26:37,669 --> 00:26:41,960
right<font color="#E5E5E5"> into the SNMP definition so it</font>

583
00:26:39,589 --> 00:26:45,678
will will<font color="#CCCCCC"> piggyback on that</font><font color="#E5E5E5"> okay so two</font>

584
00:26:41,960 --> 00:26:49,219
members enabled and disabled not

585
00:26:45,679 --> 00:26:51,889
surprisingly there's an optional value

586
00:26:49,219 --> 00:26:54,859
to it so you<font color="#E5E5E5"> can say that</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> as</font>

587
00:26:51,889 --> 00:26:57,529
part of the Netcom protocol<font color="#CCCCCC"> we want to</font>

588
00:26:54,859 --> 00:27:05,029
assign a specific specific value to the

589
00:26:57,529 --> 00:27:06,440
enum<font color="#E5E5E5"> yep good yeah switch order on</font>

590
00:27:05,029 --> 00:27:08,119
graphic<font color="#E5E5E5"> that wasn't paying attention</font>

591
00:27:06,440 --> 00:27:11,210
<font color="#E5E5E5">when you explained yeah that was so I've</font>

592
00:27:08,119 --> 00:27:14,689
had a twice now actually yes I little

593
00:27:11,210 --> 00:27:16,099
you know no editorial things for myself

594
00:27:14,690 --> 00:27:19,849
<font color="#E5E5E5">there's just I should have probably gone</font>

595
00:27:16,099 --> 00:27:20,470
through<font color="#CCCCCC"> that before yeah I want it</font><font color="#E5E5E5"> to be</font>

596
00:27:19,849 --> 00:27:22,658
<font color="#CCCCCC">flick</font>

597
00:27:20,470 --> 00:27:28,840
<font color="#CCCCCC">I want the graphic to</font><font color="#E5E5E5"> go on the right on</font>

598
00:27:22,659 --> 00:27:30,880
<font color="#E5E5E5">the other</font><font color="#CCCCCC"> other way around I mean it's</font>

599
00:27:28,840 --> 00:27:32,889
it's it's<font color="#E5E5E5"> very confusing also to me I</font>

600
00:27:30,880 --> 00:27:39,280
should just<font color="#CCCCCC"> all directories go to the</font>

601
00:27:32,890 --> 00:27:42,669
right<font color="#E5E5E5"> don't they yeah okay defining new</font>

602
00:27:39,280 --> 00:27:46,570
types<font color="#E5E5E5"> so we have a keyword called type</font>

603
00:27:42,669 --> 00:27:48,460
<font color="#CCCCCC">def okay</font><font color="#E5E5E5"> in this case we</font><font color="#CCCCCC"> are doing</font><font color="#E5E5E5"> the</font>

604
00:27:46,570 --> 00:27:52,960
<font color="#E5E5E5">the right thing we're defining what</font>

605
00:27:48,460 --> 00:27:55,659
percent is we pick yun siding z28<font color="#CCCCCC"> and we</font>

606
00:27:52,960 --> 00:27:57,220
say it's a range between<font color="#E5E5E5"> 0 and 100 and</font>

607
00:27:55,659 --> 00:28:01,240
we put a very<font color="#E5E5E5"> descriptive description in</font>

608
00:27:57,220 --> 00:28:04,169
saying percentage so by<font color="#E5E5E5"> doing this in</font>

609
00:28:01,240 --> 00:28:07,860
scope of the same yang model<font color="#E5E5E5"> or module</font>

610
00:28:04,169 --> 00:28:10,690
<font color="#E5E5E5">namespace we can now use this as a type</font>

611
00:28:07,860 --> 00:28:13,809
so if we later<font color="#E5E5E5"> or in the same module</font>

612
00:28:10,690 --> 00:28:17,100
have a<font color="#CCCCCC"> leave code completed we can just</font>

613
00:28:13,809 --> 00:28:19,450
freely use<font color="#E5E5E5"> type percent very clever</font>

614
00:28:17,100 --> 00:28:22,030
there's a couple<font color="#E5E5E5"> of things</font><font color="#CCCCCC"> that are not</font>

615
00:28:19,450 --> 00:28:24,520
part of the yang language itself but

616
00:28:22,030 --> 00:28:26,379
things that<font color="#CCCCCC"> we do well in the ITF which</font>

617
00:28:24,520 --> 00:28:30,100
is types related to networking<font color="#E5E5E5"> so we</font>

618
00:28:26,380 --> 00:28:32,549
have in RFC 69 91 a lot of common yang

619
00:28:30,100 --> 00:28:35,469
<font color="#E5E5E5">data types both around ina but also</font>

620
00:28:32,549 --> 00:28:37,929
extensions of<font color="#CCCCCC"> yang that are more</font>

621
00:28:35,470 --> 00:28:40,179
generally applicable<font color="#E5E5E5"> and I'm gonna say</font>

622
00:28:37,929 --> 00:28:42,789
this<font color="#CCCCCC"> now and many</font><font color="#E5E5E5"> more times do not</font>

623
00:28:40,179 --> 00:28:46,360
<font color="#E5E5E5">invent your own types before</font><font color="#CCCCCC"> you have at</font>

624
00:28:42,789 --> 00:28:48,879
least looked through 69 91 and a couple

625
00:28:46,360 --> 00:28:50,469
of other<font color="#E5E5E5"> places over time I've seen too</font>

626
00:28:48,880 --> 00:28:53,380
many interpretations of MAC address

627
00:28:50,470 --> 00:28:55,690
domain name ipv6 address<font color="#E5E5E5"> we've done that</font>

628
00:28:53,380 --> 00:28:57,640
<font color="#E5E5E5">some of them was horrible but we've done</font>

629
00:28:55,690 --> 00:29:00,820
them in a way that we<font color="#E5E5E5"> think are stable</font>

630
00:28:57,640 --> 00:29:04,169
and useful so look at 69 91 before

631
00:29:00,820 --> 00:29:04,168
inventing your own<font color="#E5E5E5"> type def</font>

632
00:29:07,840 --> 00:29:13,090
you may have<font color="#E5E5E5"> noticed two slides ago that</font>

633
00:29:11,140 --> 00:29:16,210
there was a<font color="#E5E5E5"> little keyword that</font><font color="#CCCCCC"> I hadn't</font>

634
00:29:13,090 --> 00:29:19,510
mentioned before called<font color="#E5E5E5"> if feature this</font>

635
00:29:16,210 --> 00:29:21,580
<font color="#E5E5E5">is cool</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> we haven't</font><font color="#CCCCCC"> had</font><font color="#E5E5E5"> before the</font>

636
00:29:19,510 --> 00:29:25,750
feature statement actually<font color="#CCCCCC"> allow you</font><font color="#E5E5E5"> to</font>

637
00:29:21,580 --> 00:29:27,399
make parts of your model conditional so

638
00:29:25,750 --> 00:29:29,470
in<font color="#E5E5E5"> this case the leaf that I talked</font>

639
00:29:27,400 --> 00:29:32,980
about<font color="#E5E5E5"> with a long strange name linked up</font>

640
00:29:29,470 --> 00:29:36,309
down trap enable only applies if your

641
00:29:32,980 --> 00:29:40,419
<font color="#E5E5E5">box supports SNMP right but we don't</font>

642
00:29:36,309 --> 00:29:42,668
want different<font color="#CCCCCC"> models former models for</font>

643
00:29:40,419 --> 00:29:45,340
boxes<font color="#E5E5E5"> that support as an MP</font><font color="#CCCCCC"> and for</font>

644
00:29:42,669 --> 00:29:47,669
boxes that don't support as an MP<font color="#E5E5E5"> so we</font>

645
00:29:45,340 --> 00:29:51,039
have the feature statement in this<font color="#E5E5E5"> case</font>

646
00:29:47,669 --> 00:29:53,289
<font color="#E5E5E5">feature if nib means that here's an</font>

647
00:29:51,039 --> 00:29:56,590
optional switch for systems<font color="#CCCCCC"> that support</font>

648
00:29:53,289 --> 00:29:59,110
they've made this leaf applies so we

649
00:29:56,590 --> 00:30:01,149
have compared with the feature we<font color="#CCCCCC"> have</font>

650
00:29:59,110 --> 00:30:03,939
the if feature<font color="#E5E5E5"> so in this case for this</font>

651
00:30:01,149 --> 00:30:07,178
leaf<font color="#E5E5E5"> the if feature if maybe means that</font>

652
00:30:03,940 --> 00:30:11,140
if this box supports if<font color="#E5E5E5"> me</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> maebh's</font>

653
00:30:07,179 --> 00:30:13,330
this leaf will<font color="#CCCCCC"> be visible for books is</font>

654
00:30:11,140 --> 00:30:15,789
that<font color="#CCCCCC"> don't support I have</font><font color="#E5E5E5"> made you won't</font>

655
00:30:13,330 --> 00:30:19,510
even see it<font color="#E5E5E5"> but your data will be valid</font>

656
00:30:15,789 --> 00:30:22,240
according<font color="#E5E5E5"> to the to the to the model</font>

657
00:30:19,510 --> 00:30:25,390
without<font color="#E5E5E5"> that leaf okay so it's a</font>

658
00:30:22,240 --> 00:30:28,779
<font color="#E5E5E5">powerful way</font><font color="#CCCCCC"> of reducing friction among</font>

659
00:30:25,390 --> 00:30:31,720
editors of<font color="#E5E5E5"> a particular we can push many</font>

660
00:30:28,779 --> 00:30:33,549
of our discussions into the feature

661
00:30:31,720 --> 00:30:35,620
<font color="#E5E5E5">space if you like and</font><font color="#CCCCCC"> make it optional</font>

662
00:30:33,549 --> 00:30:38,970
<font color="#E5E5E5">not</font><font color="#CCCCCC"> a deviation</font><font color="#E5E5E5"> or anything like that</font>

663
00:30:35,620 --> 00:30:41,620
<font color="#E5E5E5">nothing negative just make it a feature</font>

664
00:30:38,970 --> 00:30:43,779
so he's featured<font color="#E5E5E5"> like hierarchical let's</font>

665
00:30:41,620 --> 00:30:46,510
say I'm<font color="#E5E5E5"> writing a young model for a new</font>

666
00:30:43,779 --> 00:30:48,179
<font color="#E5E5E5">protocol so where do I start with let's</font>

667
00:30:46,510 --> 00:30:50,230
say two separate functions<font color="#CCCCCC"> in that</font>

668
00:30:48,179 --> 00:30:52,570
<font color="#E5E5E5">within the function I may have a</font><font color="#CCCCCC"> number</font>

669
00:30:50,230 --> 00:30:55,029
<font color="#E5E5E5">of</font><font color="#CCCCCC"> capabilities yes so how do</font><font color="#E5E5E5"> I organize</font>

670
00:30:52,570 --> 00:30:56,710
that how do<font color="#CCCCCC"> i for the</font><font color="#E5E5E5"> top-level</font>

671
00:30:55,029 --> 00:30:58,720
functions<font color="#E5E5E5"> should</font><font color="#CCCCCC"> i say these</font><font color="#E5E5E5"> are the</font>

672
00:30:56,710 --> 00:31:00,850
<font color="#E5E5E5">couple</font><font color="#CCCCCC"> l</font><font color="#E5E5E5"> features now within the subset</font>

673
00:30:58,720 --> 00:31:04,029
of the<font color="#E5E5E5"> individual features within that</font>

674
00:31:00,850 --> 00:31:07,330
<font color="#CCCCCC">function can I link them</font><font color="#E5E5E5"> in other words</font>

675
00:31:04,029 --> 00:31:10,210
is<font color="#E5E5E5"> there like hierarchy there I'm gonna</font>

676
00:31:07,330 --> 00:31:12,129
glance over to<font color="#E5E5E5"> my fellow yang</font><font color="#CCCCCC"> peoplebut</font>

677
00:31:10,210 --> 00:31:14,620
and I'll start on<font color="#E5E5E5"> a response and</font><font color="#CCCCCC"> no</font>

678
00:31:12,130 --> 00:31:16,899
can't take it away<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> camp</font><font color="#CCCCCC"> so I</font>

679
00:31:14,620 --> 00:31:18,100
think if I understood<font color="#E5E5E5"> the question</font><font color="#CCCCCC"> you</font>

680
00:31:16,899 --> 00:31:19,629
could<font color="#E5E5E5"> have a top-level container with</font>

681
00:31:18,100 --> 00:31:21,280
one<font color="#E5E5E5"> if feature statement and then a</font>

682
00:31:19,630 --> 00:31:23,080
nested container with a

683
00:31:21,280 --> 00:31:26,160
from the<font color="#E5E5E5"> future statement so there be an</font>

684
00:31:23,080 --> 00:31:35,530
ending<font color="#E5E5E5"> yeah between</font><font color="#CCCCCC"> them okay</font>

685
00:31:26,160 --> 00:31:37,540
yes in<font color="#E5E5E5"> within an augment station</font>

686
00:31:35,530 --> 00:31:39,370
augments<font color="#CCCCCC"> the young</font><font color="#E5E5E5"> it could also have</font>

687
00:31:37,540 --> 00:31:41,950
<font color="#CCCCCC">any</font><font color="#E5E5E5"> features so this instead of leaf</font>

688
00:31:39,370 --> 00:31:43,600
this could be an augment<font color="#CCCCCC"> right so if you</font>

689
00:31:41,950 --> 00:31:44,710
place the<font color="#E5E5E5"> ax feature on the augment it</font>

690
00:31:43,600 --> 00:31:46,600
will be optional

691
00:31:44,710 --> 00:31:48,040
in the future<font color="#CCCCCC"> but I didn't see the</font>

692
00:31:46,600 --> 00:31:51,360
relation<font color="#CCCCCC"> as how you're trying</font><font color="#E5E5E5"> a</font>

693
00:31:48,040 --> 00:31:51,360
particular<font color="#E5E5E5"> feature do another feature</font>

694
00:31:51,660 --> 00:31:56,170
how did I go<font color="#CCCCCC"> through it</font><font color="#E5E5E5"> how did</font><font color="#CCCCCC"> I say</font>

695
00:31:53,980 --> 00:31:58,180
that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> particular feature is part</font><font color="#E5E5E5"> of</font>

696
00:31:56,170 --> 00:32:00,970
some other is tied to some other feature

697
00:31:58,180 --> 00:32:03,010
now this is a good question now<font color="#E5E5E5"> can't</font>

698
00:32:00,970 --> 00:32:06,220
let me ask this can you put an if

699
00:32:03,010 --> 00:32:08,440
feature under<font color="#E5E5E5"> the feature statement okay</font>

700
00:32:06,220 --> 00:32:10,510
<font color="#E5E5E5">now I try it so then I don't</font><font color="#CCCCCC"> know how to</font>

701
00:32:08,440 --> 00:32:12,910
do but you can now do boolean features

702
00:32:10,510 --> 00:32:14,290
so you could have an ending of them<font color="#E5E5E5"> that</font>

703
00:32:12,910 --> 00:32:16,900
was<font color="#E5E5E5"> easy to have the working group</font>

704
00:32:14,290 --> 00:32:19,629
co-chair in the room that's great is

705
00:32:16,900 --> 00:32:24,520
that<font color="#CCCCCC"> in yang 1:1 it is</font><font color="#E5E5E5"> okay so it's in</font>

706
00:32:19,630 --> 00:32:30,910
the soon<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be published yang 1:1</font><font color="#E5E5E5"> what</font>

707
00:32:24,520 --> 00:32:32,980
you're<font color="#E5E5E5"> asking for is</font><font color="#CCCCCC"> possibly</font><font color="#E5E5E5"> okay good</font>

708
00:32:30,910 --> 00:32:39,060
flow<font color="#CCCCCC"> of questions thank you keep coming</font>

709
00:32:32,980 --> 00:32:44,530
<font color="#CCCCCC">keep going</font><font color="#E5E5E5"> okay</font>

710
00:32:39,060 --> 00:32:47,110
abstract types<font color="#E5E5E5"> identity refs there are I</font>

711
00:32:44,530 --> 00:32:48,490
talked about<font color="#E5E5E5"> like two ways of the</font>

712
00:32:47,110 --> 00:32:51,240
numerating things of course<font color="#E5E5E5"> there's the</font>

713
00:32:48,490 --> 00:32:54,220
list and there's the<font color="#E5E5E5"> enum statement</font>

714
00:32:51,240 --> 00:32:57,550
there are<font color="#CCCCCC"> many occasions</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> we end up</font>

715
00:32:54,220 --> 00:33:00,370
<font color="#E5E5E5">having to enumerate something that we</font>

716
00:32:57,550 --> 00:33:04,960
know will<font color="#CCCCCC"> be heavily extended over time</font>

717
00:33:00,370 --> 00:33:06,969
and since we want yang modules to<font color="#CCCCCC"> be</font>

718
00:33:04,960 --> 00:33:09,730
fairly stable<font color="#E5E5E5"> ie</font>

719
00:33:06,970 --> 00:33:12,850
don't change too often in terms of a

720
00:33:09,730 --> 00:33:15,760
client developer let's say we can't

721
00:33:12,850 --> 00:33:16,389
really<font color="#CCCCCC"> use we can't really</font><font color="#E5E5E5"> easily extend</font>

722
00:33:15,760 --> 00:33:18,850
<font color="#E5E5E5">enums</font>

723
00:33:16,390 --> 00:33:20,320
that will change the value<font color="#E5E5E5"> space too</font>

724
00:33:18,850 --> 00:33:23,320
much for the client<font color="#CCCCCC"> developer</font><font color="#E5E5E5"> so we have</font>

725
00:33:20,320 --> 00:33:26,020
<font color="#E5E5E5">something called identities identities</font>

726
00:33:23,320 --> 00:33:28,870
in my mind of<font color="#E5E5E5"> the way I usually use them</font>

727
00:33:26,020 --> 00:33:31,720
is as an extensible<font color="#E5E5E5"> enum</font>

728
00:33:28,870 --> 00:33:33,149
so a good<font color="#CCCCCC"> example of this is what I'm</font>

729
00:33:31,720 --> 00:33:35,279
<font color="#CCCCCC">showing here</font>

730
00:33:33,149 --> 00:33:37,468
as you guys<font color="#E5E5E5"> may know</font><font color="#CCCCCC"> Ayane keeps track</font>

731
00:33:35,279 --> 00:33:39,570
<font color="#CCCCCC">of</font><font color="#E5E5E5"> all interface types or at least all</font>

732
00:33:37,469 --> 00:33:43,019
registered interface types it's a list

733
00:33:39,570 --> 00:33:45,509
of types<font color="#E5E5E5"> that changes at you know at all</font>

734
00:33:43,019 --> 00:33:47,460
<font color="#E5E5E5">times</font><font color="#CCCCCC"> it's a ever-expanding</font><font color="#E5E5E5"> amount of</font>

735
00:33:45,509 --> 00:33:50,549
strange types of interfaces<font color="#CCCCCC"> that we</font>

736
00:33:47,460 --> 00:33:54,029
invent<font color="#E5E5E5"> and use in the industry so of</font>

737
00:33:50,549 --> 00:33:55,559
course we would never submit a yang file

738
00:33:54,029 --> 00:33:57,119
that<font color="#E5E5E5"> actually tries to capture</font>

739
00:33:55,559 --> 00:33:59,519
<font color="#CCCCCC">everything that will ever</font><font color="#E5E5E5"> be defined we</font>

740
00:33:57,119 --> 00:34:05,009
would rather punt this and say<font color="#CCCCCC"> look an</font>

741
00:33:59,519 --> 00:34:10,460
interface type<font color="#E5E5E5"> is an identity and we use</font>

742
00:34:05,009 --> 00:34:10,460
what's called an identity<font color="#E5E5E5"> rate ref to</font>

743
00:34:10,699 --> 00:34:17,399
reference identities so by including<font color="#E5E5E5"> and</font>

744
00:34:15,418 --> 00:34:19,469
we'll get to the actual<font color="#E5E5E5"> imaginations of</font>

745
00:34:17,399 --> 00:34:23,629
inclusion<font color="#E5E5E5"> or how do you include things</font>

746
00:34:19,469 --> 00:34:27,388
and import things you make a list of

747
00:34:23,629 --> 00:34:30,960
interface types available<font color="#E5E5E5"> and therefore</font>

748
00:34:27,389 --> 00:34:34,260
the type<font color="#CCCCCC"> leave here can then</font><font color="#E5E5E5"> reference</font>

749
00:34:30,960 --> 00:34:36,418
those identities<font color="#CCCCCC"> okay and this allows us</font>

750
00:34:34,260 --> 00:34:38,760
<font color="#E5E5E5">to</font><font color="#CCCCCC"> actually expand</font><font color="#E5E5E5"> these identities</font>

751
00:34:36,418 --> 00:34:41,250
<font color="#E5E5E5">without upsetting the client developer</font>

752
00:34:38,760 --> 00:34:44,899
so it's not<font color="#E5E5E5"> actually changing the</font>

753
00:34:41,250 --> 00:34:48,210
<font color="#CCCCCC">structure but it's changing</font><font color="#E5E5E5"> the set of</font>

754
00:34:44,899 --> 00:34:52,020
identities over time so of<font color="#E5E5E5"> course</font><font color="#CCCCCC"> again</font>

755
00:34:48,210 --> 00:34:57,390
interface type in our interface example

756
00:34:52,020 --> 00:35:00,750
here is a perfect<font color="#CCCCCC"> example of that</font><font color="#E5E5E5"> did</font>

757
00:34:57,390 --> 00:35:07,049
that make sense<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of kind of</font><font color="#CCCCCC"> okay</font>

758
00:35:00,750 --> 00:35:09,660
I'll practice<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that slide so let's</font>

759
00:35:07,049 --> 00:35:13,079
take the leap<font color="#E5E5E5"> here's what we've done</font>

760
00:35:09,660 --> 00:35:15,029
this for<font color="#E5E5E5"> we have our</font><font color="#CCCCCC"> little network here</font>

761
00:35:13,079 --> 00:35:17,520
we have a management station<font color="#E5E5E5"> up top we</font>

762
00:35:15,029 --> 00:35:19,859
have two routers they have<font color="#CCCCCC"> eath zero</font>

763
00:35:17,520 --> 00:35:22,559
interfaces both of them<font color="#E5E5E5"> and we want to</font>

764
00:35:19,859 --> 00:35:25,049
assign them eventually ipv6 addresses

765
00:35:22,559 --> 00:35:27,119
but<font color="#E5E5E5"> our first task was to walk through</font>

766
00:35:25,049 --> 00:35:30,480
the interface model enough that we could

767
00:35:27,119 --> 00:35:32,400
actually bring<font color="#CCCCCC"> up the</font><font color="#E5E5E5"> interface so the</font>

768
00:35:30,480 --> 00:35:35,279
configuration<font color="#E5E5E5"> and the examples that we</font>

769
00:35:32,400 --> 00:35:36,720
<font color="#CCCCCC">have here is</font><font color="#E5E5E5"> actually the XML instance</font>

770
00:35:35,279 --> 00:35:39,000
data that you would typically<font color="#E5E5E5"> see a net</font>

771
00:35:36,720 --> 00:35:40,439
<font color="#CCCCCC">conf</font><font color="#E5E5E5"> this could look different</font><font color="#CCCCCC"> if you</font>

772
00:35:39,000 --> 00:35:43,650
have other protocols like<font color="#CCCCCC"> restaurant</font>

773
00:35:40,440 --> 00:35:46,109
<font color="#CCCCCC">with JSON but in XML this is then</font><font color="#E5E5E5"> what</font>

774
00:35:43,650 --> 00:35:46,950
you would send you would send interfaces

775
00:35:46,109 --> 00:35:49,140
interface

776
00:35:46,950 --> 00:35:51,990
and you would<font color="#E5E5E5"> provide a name because</font>

777
00:35:49,140 --> 00:35:55,529
it's a key<font color="#E5E5E5"> so it's mandatory</font><font color="#CCCCCC"> and you</font>

778
00:35:51,990 --> 00:35:56,959
would set the enable leaf to true you

779
00:35:55,530 --> 00:35:59,220
would send that<font color="#E5E5E5"> off</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the routers and</font>

780
00:35:56,960 --> 00:36:00,510
if they have interpreted<font color="#E5E5E5"> the yang</font>

781
00:35:59,220 --> 00:36:05,279
correctly which they have<font color="#E5E5E5"> in this case</font>

782
00:36:00,510 --> 00:36:08,880
they would bring up the interfaces any

783
00:36:05,280 --> 00:36:11,190
kind of<font color="#E5E5E5"> catch up questions this far</font>

784
00:36:08,880 --> 00:36:17,099
before we head into the operational

785
00:36:11,190 --> 00:36:19,140
<font color="#E5E5E5">state of things okay good so we're gonna</font>

786
00:36:17,099 --> 00:36:20,849
focus on<font color="#E5E5E5"> the if you</font><font color="#CCCCCC"> remember the right</font>

787
00:36:19,140 --> 00:36:23,430
side of<font color="#E5E5E5"> things are a little bit this</font><font color="#CCCCCC"> is</font>

788
00:36:20,849 --> 00:36:25,530
the<font color="#CCCCCC"> read-only</font><font color="#E5E5E5"> side that interfaces state</font>

789
00:36:23,430 --> 00:36:26,759
<font color="#E5E5E5">so in the read-only space there's a</font>

790
00:36:25,530 --> 00:36:31,440
couple<font color="#E5E5E5"> of things that are</font><font color="#CCCCCC"> that are</font>

791
00:36:26,760 --> 00:36:34,710
interesting<font color="#E5E5E5"> as I mentioned each entry in</font>

792
00:36:31,440 --> 00:36:36,809
<font color="#CCCCCC">the interfaces</font><font color="#E5E5E5"> state list represents the</font>

793
00:36:34,710 --> 00:36:38,970
state<font color="#CCCCCC"> of an interface which is sounds</font>

794
00:36:36,809 --> 00:36:40,559
easier than it is it represents<font color="#CCCCCC"> the</font>

795
00:36:38,970 --> 00:36:42,660
state<font color="#CCCCCC"> of an</font><font color="#E5E5E5"> interface that is actually</font>

796
00:36:40,559 --> 00:36:44,250
<font color="#CCCCCC">available to the</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> right whether it</font>

797
00:36:42,660 --> 00:36:49,259
has configuration or no it's something

798
00:36:44,250 --> 00:36:51,510
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> knows about and the</font>

799
00:36:49,260 --> 00:36:52,950
<font color="#E5E5E5">first one we have to take into</font>

800
00:36:51,510 --> 00:36:55,980
consideration<font color="#CCCCCC"> here because we make use</font>

801
00:36:52,950 --> 00:36:57,960
of it is imports so the example<font color="#CCCCCC"> here is</font>

802
00:36:55,980 --> 00:37:01,980
about imports<font color="#E5E5E5"> but I'll talk</font><font color="#CCCCCC"> briefly</font>

803
00:36:57,960 --> 00:37:05,960
about includes<font color="#CCCCCC"> to yang structures all</font>

804
00:37:01,980 --> 00:37:08,970
its data into modules and sub-modules<font color="#CCCCCC"> oh</font>

805
00:37:05,960 --> 00:37:12,540
just one question about the<font color="#CCCCCC"> states</font><font color="#E5E5E5"> yes</font>

806
00:37:08,970 --> 00:37:15,480
and<font color="#E5E5E5"> are they necessarily implemented or</font>

807
00:37:12,540 --> 00:37:19,980
for<font color="#CCCCCC"> example if one is</font><font color="#E5E5E5"> having the</font><font color="#CCCCCC"> color</font>

808
00:37:15,480 --> 00:37:21,420
the<font color="#E5E5E5"> color of the router blue red maybe</font>

809
00:37:19,980 --> 00:37:24,569
<font color="#CCCCCC">all their vendors don't want to</font>

810
00:37:21,420 --> 00:37:27,980
implement<font color="#E5E5E5"> that so can we</font><font color="#CCCCCC"> have optional</font>

811
00:37:24,569 --> 00:37:32,250
<font color="#CCCCCC">States or so in this case actually</font><font color="#E5E5E5"> the</font>

812
00:37:27,980 --> 00:37:33,809
<font color="#E5E5E5">interfaces state</font><font color="#CCCCCC"> tree is optional</font><font color="#E5E5E5"> so you</font>

813
00:37:32,250 --> 00:37:35,309
<font color="#E5E5E5">don't have to implement the interface</font><font color="#CCCCCC"> of</font>

814
00:37:33,809 --> 00:37:38,549
<font color="#E5E5E5">state tree but I think most</font><font color="#CCCCCC"> people would</font>

815
00:37:35,309 --> 00:37:39,660
<font color="#CCCCCC">be very surprised</font><font color="#E5E5E5"> if they found a device</font>

816
00:37:38,549 --> 00:37:41,849
that doesn't<font color="#E5E5E5"> want to talk</font><font color="#CCCCCC"> about the</font>

817
00:37:39,660 --> 00:37:45,960
interface<font color="#CCCCCC"> state but I</font><font color="#E5E5E5"> think yes it's</font>

818
00:37:41,849 --> 00:37:47,520
actually<font color="#CCCCCC"> optional you you may</font><font color="#E5E5E5"> have you</font>

819
00:37:45,960 --> 00:37:49,170
<font color="#E5E5E5">know your system might</font><font color="#CCCCCC"> be in a state</font>

820
00:37:47,520 --> 00:37:51,170
where<font color="#CCCCCC"> it where you</font><font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> any</font>

821
00:37:49,170 --> 00:37:54,170
interfaces so the list will be empty

822
00:37:51,170 --> 00:37:54,170
<font color="#E5E5E5">okay</font>

823
00:37:56,700 --> 00:38:04,058
okay so<font color="#E5E5E5"> yang</font><font color="#CCCCCC"> a core</font><font color="#E5E5E5"> concept is modules</font>

824
00:38:01,000 --> 00:38:06,250
<font color="#E5E5E5">right so in this case where we are now</font>

825
00:38:04,059 --> 00:38:09,309
we actually need a couple<font color="#E5E5E5"> of types from</font>

826
00:38:06,250 --> 00:38:11,470
<font color="#E5E5E5">the yang types module so we go ahead and</font>

827
00:38:09,309 --> 00:38:13,930
<font color="#CCCCCC">use this keyword</font><font color="#E5E5E5"> we use the import</font>

828
00:38:11,470 --> 00:38:16,538
keyword and then we use the module

829
00:38:13,930 --> 00:38:19,390
identifier<font color="#E5E5E5"> and this again is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> unique</font>

830
00:38:16,539 --> 00:38:21,789
way<font color="#CCCCCC"> of identifying what you're looking</font>

831
00:38:19,390 --> 00:38:23,770
for and it's<font color="#E5E5E5"> the module name right you</font>

832
00:38:21,789 --> 00:38:25,359
can also import by a revision and in

833
00:38:23,770 --> 00:38:26,680
that case you would<font color="#CCCCCC"> actually say using</font>

834
00:38:25,359 --> 00:38:29,440
<font color="#E5E5E5">the revision statement what revision</font>

835
00:38:26,680 --> 00:38:31,118
you're looking for but your tools<font color="#E5E5E5"> would</font>

836
00:38:29,440 --> 00:38:33,730
then go look for<font color="#E5E5E5"> in some sort of</font>

837
00:38:31,119 --> 00:38:36,069
<font color="#CCCCCC">catalogue</font><font color="#E5E5E5"> maybe the file system</font><font color="#CCCCCC"> maybe</font>

838
00:38:33,730 --> 00:38:40,150
some<font color="#E5E5E5"> other means of a module with that</font>

839
00:38:36,069 --> 00:38:42,430
name<font color="#E5E5E5"> and import makes the data</font>

840
00:38:40,150 --> 00:38:44,730
definition so basically the data tree

841
00:38:42,430 --> 00:38:47,828
that you have in that<font color="#CCCCCC"> module available</font>

842
00:38:44,730 --> 00:38:49,960
<font color="#E5E5E5">to your local module so typically if</font>

843
00:38:47,829 --> 00:38:52,240
again if you want any if you<font color="#E5E5E5"> need some</font>

844
00:38:49,960 --> 00:38:55,029
types or some groupings<font color="#E5E5E5"> and we'll get to</font>

845
00:38:52,240 --> 00:38:58,240
<font color="#CCCCCC">that this</font><font color="#E5E5E5"> is the exact</font><font color="#CCCCCC"> statement that</font>

846
00:38:55,029 --> 00:39:01,059
you would use<font color="#CCCCCC"> all right and you also</font>

847
00:38:58,240 --> 00:39:03,069
<font color="#E5E5E5">provide a prefix keyword because when</font>

848
00:39:01,059 --> 00:39:05,470
you then use the types from<font color="#E5E5E5"> this</font>

849
00:39:03,069 --> 00:39:07,599
<font color="#CCCCCC">imported module you need to prefix them</font>

850
00:39:05,470 --> 00:39:09,910
<font color="#E5E5E5">and I'll show you an example because</font><font color="#CCCCCC"> you</font>

851
00:39:07,599 --> 00:39:12,369
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to make sure</font><font color="#E5E5E5"> that you may have</font>

852
00:39:09,910 --> 00:39:14,140
<font color="#CCCCCC">types in your</font><font color="#E5E5E5"> local module that has the</font>

853
00:39:12,369 --> 00:39:16,779
same name<font color="#CCCCCC"> as the newly important ones</font><font color="#E5E5E5"> so</font>

854
00:39:14,140 --> 00:39:20,319
we use the namespace prefix<font color="#E5E5E5"> to</font>

855
00:39:16,779 --> 00:39:22,000
discriminate between the two there's

856
00:39:20,319 --> 00:39:24,700
also the include statement<font color="#CCCCCC"> not</font><font color="#E5E5E5"> part</font><font color="#CCCCCC"> of</font>

857
00:39:22,000 --> 00:39:26,559
the example<font color="#CCCCCC"> but none less important</font><font color="#E5E5E5"> it</font>

858
00:39:24,700 --> 00:39:28,899
used<font color="#E5E5E5"> to make content from a sub module</font>

859
00:39:26,559 --> 00:39:30,339
and a sub module is actually<font color="#CCCCCC"> a yang</font>

860
00:39:28,900 --> 00:39:31,630
module that you declare not to be a

861
00:39:30,339 --> 00:39:34,839
module<font color="#CCCCCC"> but</font><font color="#E5E5E5"> a sub module so it's a</font>

862
00:39:31,630 --> 00:39:38,020
specific<font color="#CCCCCC"> type of module called sub</font>

863
00:39:34,839 --> 00:39:41,470
module that belongs to<font color="#E5E5E5"> a specific module</font>

864
00:39:38,020 --> 00:39:44,049
<font color="#CCCCCC">it's more in my mind a way</font><font color="#E5E5E5"> of breaking</font>

865
00:39:41,470 --> 00:39:47,109
<font color="#E5E5E5">up very large yang modules into perhaps</font>

866
00:39:44,049 --> 00:39:48,700
smaller it's it's more it's more<font color="#E5E5E5"> likely</font>

867
00:39:47,109 --> 00:39:50,259
actually<font color="#E5E5E5"> include statement in</font><font color="#CCCCCC"> see for</font>

868
00:39:48,700 --> 00:39:52,569
example<font color="#E5E5E5"> it's a way of just breaking out</font>

869
00:39:50,260 --> 00:39:57,490
a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> information or a lot of text</font>

870
00:39:52,569 --> 00:40:00,940
<font color="#E5E5E5">into other other other files because you</font>

871
00:39:57,490 --> 00:40:02,828
can't really export<font color="#E5E5E5"> or that's not a way</font>

872
00:40:00,940 --> 00:40:04,359
of<font color="#CCCCCC"> importing things</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just by sucking</font>

873
00:40:02,829 --> 00:40:06,640
that data in so it's<font color="#E5E5E5"> not it's not</font>

874
00:40:04,359 --> 00:40:09,020
<font color="#E5E5E5">something</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> would use to for</font><font color="#CCCCCC"> example</font>

875
00:40:06,640 --> 00:40:12,410
get a hold of certain types

876
00:40:09,020 --> 00:40:19,690
it's just a way<font color="#E5E5E5"> of breaking your module</font>

877
00:40:12,410 --> 00:40:19,690
into many smaller parts<font color="#E5E5E5"> okay good</font>

878
00:40:21,820 --> 00:40:29,240
here's the example<font color="#CCCCCC"> import that</font><font color="#E5E5E5"> we use</font>

879
00:40:24,560 --> 00:40:31,640
<font color="#E5E5E5">okay we import ITF yang types here's</font>

880
00:40:29,240 --> 00:40:33,859
<font color="#CCCCCC">this snippet</font><font color="#E5E5E5"> from ITF yang types that</font>

881
00:40:31,640 --> 00:40:38,330
we're going to<font color="#E5E5E5"> use because we need date</font>

882
00:40:33,860 --> 00:40:40,580
and time for<font color="#CCCCCC"> the last change leaf</font><font color="#E5E5E5"> that</font>

883
00:40:38,330 --> 00:40:44,900
<font color="#E5E5E5">was in the interfaces state list as you</font>

884
00:40:40,580 --> 00:40:47,000
<font color="#CCCCCC">all remember we have a type def we</font>

885
00:40:44,900 --> 00:40:52,630
looked at that<font color="#CCCCCC"> before in the ITF yang</font>

886
00:40:47,000 --> 00:40:53,930
types<font color="#CCCCCC"> module</font><font color="#E5E5E5"> with a nice</font><font color="#CCCCCC"> reg X for ISO</font>

887
00:40:52,630 --> 00:40:56,690
date

888
00:40:53,930 --> 00:41:01,069
I think it's date and yeah date and time

889
00:40:56,690 --> 00:41:04,880
<font color="#E5E5E5">style data so by importing ITF yang</font>

890
00:41:01,070 --> 00:41:08,690
types and then calling out the type with

891
00:41:04,880 --> 00:41:14,690
the<font color="#E5E5E5"> yang namespace prefix we can now</font><font color="#CCCCCC"> use</font>

892
00:41:08,690 --> 00:41:17,300
the type<font color="#E5E5E5"> locally okay so more</font>

893
00:41:14,690 --> 00:41:20,750
<font color="#E5E5E5">specifically it looks like this our</font>

894
00:41:17,300 --> 00:41:22,670
instance data or the model is here<font color="#E5E5E5"> right</font>

895
00:41:20,750 --> 00:41:24,890
<font color="#E5E5E5">the instance data is eth0 has a</font>

896
00:41:22,670 --> 00:41:28,940
particular<font color="#CCCCCC"> date time</font><font color="#E5E5E5"> ETH one has one</font>

897
00:41:24,890 --> 00:41:32,270
more clerical error here<font color="#E5E5E5"> this is what</font>

898
00:41:28,940 --> 00:41:36,290
the<font color="#E5E5E5"> conformant value then to the regex</font>

899
00:41:32,270 --> 00:41:39,710
here looks<font color="#CCCCCC"> like so that's</font><font color="#E5E5E5"> a derived type</font>

900
00:41:36,290 --> 00:41:42,950
that we have important<font color="#E5E5E5"> okay so it's not</font>

901
00:41:39,710 --> 00:41:47,050
<font color="#E5E5E5">a base type yep I did</font>

902
00:41:42,950 --> 00:41:47,049
<font color="#CCCCCC">I know</font><font color="#E5E5E5"> that's why this is not marked up</font>

903
00:41:48,430 --> 00:41:59,569
keep<font color="#E5E5E5"> reminding me okay so I mentioned</font>

904
00:41:57,950 --> 00:42:01,399
<font color="#CCCCCC">also that</font><font color="#E5E5E5"> we have foreign keys they're</font>

905
00:41:59,570 --> 00:42:04,910
called leaf<font color="#CCCCCC"> rafts so it's a way of</font>

906
00:42:01,400 --> 00:42:06,290
referencing<font color="#CCCCCC"> another</font><font color="#E5E5E5"> leaf okay and what</font>

907
00:42:04,910 --> 00:42:09,710
it<font color="#CCCCCC"> actually means it's referencing</font>

908
00:42:06,290 --> 00:42:11,420
another<font color="#E5E5E5"> leaf instance</font><font color="#CCCCCC"> right so we use</font>

909
00:42:09,710 --> 00:42:13,580
leaf ref to do that and in our model

910
00:42:11,420 --> 00:42:15,800
<font color="#E5E5E5">here I mentioned that we want to support</font>

911
00:42:13,580 --> 00:42:19,310
stacked interfaces interfaces that sit

912
00:42:15,800 --> 00:42:22,940
on other<font color="#E5E5E5"> interfaces and in this case we</font>

913
00:42:19,310 --> 00:42:24,890
wanted as<font color="#E5E5E5"> mother error VLANs no it</font>

914
00:42:22,940 --> 00:42:26,450
actually correct<font color="#E5E5E5"> on the right side down</font>

915
00:42:24,890 --> 00:42:29,359
there in the instance<font color="#E5E5E5"> data you see that</font>

916
00:42:26,450 --> 00:42:33,319
<font color="#E5E5E5">an interface called VLAN</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> actually</font>

917
00:42:29,359 --> 00:42:36,560
<font color="#CCCCCC">have a higher layer interface entry</font>

918
00:42:33,319 --> 00:42:39,529
called<font color="#CCCCCC"> eth0</font><font color="#E5E5E5"> and if we look in the yang</font>

919
00:42:36,560 --> 00:42:41,540
model you can see<font color="#E5E5E5"> that the type def for</font>

920
00:42:39,530 --> 00:42:45,859
the interface<font color="#E5E5E5"> state ref is of type leaf</font>

921
00:42:41,540 --> 00:42:47,540
ref<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and the cool part here where a</font>

922
00:42:45,859 --> 00:42:51,380
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of interesting things</font><font color="#E5E5E5"> can happen is</font>

923
00:42:47,540 --> 00:42:54,470
in<font color="#E5E5E5"> the path statement yang</font><font color="#CCCCCC"> is inherently</font>

924
00:42:51,380 --> 00:42:57,829
<font color="#E5E5E5">tree based right you can always uniquely</font>

925
00:42:54,470 --> 00:43:01,098
identify nodes in a yang model or in an

926
00:42:57,829 --> 00:43:03,710
instance tree by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> paths okay</font>

927
00:43:01,099 --> 00:43:06,890
so in this case<font color="#E5E5E5"> we say that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> value of</font>

928
00:43:03,710 --> 00:43:10,550
the interface state graph must be a

929
00:43:06,890 --> 00:43:15,950
member<font color="#E5E5E5"> of the if' interface list</font><font color="#CCCCCC"> its</font>

930
00:43:10,550 --> 00:43:19,040
unique name what this does<font color="#E5E5E5"> which is</font>

931
00:43:15,950 --> 00:43:22,118
pretty cool<font color="#CCCCCC"> is that it it formally helps</font>

932
00:43:19,040 --> 00:43:26,420
you<font color="#E5E5E5"> to</font><font color="#CCCCCC"> avoid dangling pointers the only</font>

933
00:43:22,119 --> 00:43:29,839
actual valid value here is existing

934
00:43:26,420 --> 00:43:31,250
interfaces this does a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> cool</font>

935
00:43:29,839 --> 00:43:33,828
<font color="#CCCCCC">things</font><font color="#E5E5E5"> actually so in this case we're</font>

936
00:43:31,250 --> 00:43:35,660
actually talking about read-only but if

937
00:43:33,829 --> 00:43:37,880
you<font color="#CCCCCC"> think about what this</font><font color="#E5E5E5"> means to also</font>

938
00:43:35,660 --> 00:43:40,490
<font color="#CCCCCC">the readwrite is</font><font color="#E5E5E5"> that you can never for</font>

939
00:43:37,880 --> 00:43:43,250
example<font color="#CCCCCC"> reference</font><font color="#E5E5E5"> an AC an access</font>

940
00:43:40,490 --> 00:43:45,200
control<font color="#CCCCCC"> list that doesn't</font><font color="#E5E5E5"> exist which is</font>

941
00:43:43,250 --> 00:43:47,270
otherwise one<font color="#E5E5E5"> of the main reasons why</font>

942
00:43:45,200 --> 00:43:50,990
<font color="#CCCCCC">our network connectivity now and then</font>

943
00:43:47,270 --> 00:43:53,060
<font color="#E5E5E5">goes away</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> we can formally restrict</font>

944
00:43:50,990 --> 00:43:54,770
the value space<font color="#E5E5E5"> of a leaf to another</font>

945
00:43:53,060 --> 00:43:57,078
<font color="#CCCCCC">leaf</font><font color="#E5E5E5"> make sure that there are no</font>

946
00:43:54,770 --> 00:43:58,970
dangling pointers and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> reverse effect</font>

947
00:43:57,079 --> 00:44:01,010
of that<font color="#E5E5E5"> maybe I should have a visual for</font>

948
00:43:58,970 --> 00:44:03,950
this is that<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have an instance</font>

949
00:44:01,010 --> 00:44:07,040
<font color="#E5E5E5">that points to something</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you try to</font>

950
00:44:03,950 --> 00:44:09,220
remove<font color="#CCCCCC"> that something</font><font color="#E5E5E5"> a nicely well</font>

951
00:44:07,040 --> 00:44:11,300
<font color="#E5E5E5">behaved yang system will say you can't</font>

952
00:44:09,220 --> 00:44:13,279
because you have incoming pointers

953
00:44:11,300 --> 00:44:17,200
<font color="#E5E5E5">someone is referencing you and if you go</font>

954
00:44:13,280 --> 00:44:20,300
<font color="#CCCCCC">away the data set will be invalid</font>

955
00:44:17,200 --> 00:44:23,379
so getting leaf refs right can provide a

956
00:44:20,300 --> 00:44:26,420
lot of<font color="#E5E5E5"> nice tightness to your models and</font>

957
00:44:23,380 --> 00:44:29,359
help your your users<font color="#CCCCCC"> to avoid a lot of</font>

958
00:44:26,420 --> 00:44:30,619
mistakes<font color="#E5E5E5"> that were historically based on</font>

959
00:44:29,359 --> 00:44:32,270
the fact that we allowed for dangling

960
00:44:30,619 --> 00:44:37,960
pointers or references that didn't

961
00:44:32,270 --> 00:44:37,960
reference<font color="#E5E5E5"> anything in particular okay</font>

962
00:44:39,920 --> 00:44:46,290
so okay<font color="#CCCCCC"> so let's hit task</font><font color="#E5E5E5"> two now we</font>

963
00:44:44,760 --> 00:44:50,000
know<font color="#CCCCCC"> enough that we can actually</font><font color="#E5E5E5"> assign</font>

964
00:44:46,290 --> 00:44:53,130
an ipv6 address to the interface<font color="#E5E5E5"> the</font>

965
00:44:50,000 --> 00:44:55,080
interfaces module that<font color="#E5E5E5"> we looked at this</font>

966
00:44:53,130 --> 00:44:57,480
<font color="#E5E5E5">for didn't actually go so far as to</font>

967
00:44:55,080 --> 00:45:00,180
<font color="#CCCCCC">layer</font><font color="#E5E5E5"> three so it didn't actually define</font>

968
00:44:57,480 --> 00:45:04,950
<font color="#CCCCCC">the</font><font color="#E5E5E5"> data set needed for ipv4 or ipv6</font>

969
00:45:00,180 --> 00:45:08,549
addresses for this we<font color="#E5E5E5"> need ITF IP dot</font>

970
00:45:04,950 --> 00:45:11,490
yang and in this<font color="#E5E5E5"> IFI P dot yang we will</font>

971
00:45:08,550 --> 00:45:15,540
have a new set of model<font color="#E5E5E5"> we will look at</font>

972
00:45:11,490 --> 00:45:17,459
the ipv6 side of things all ipv6 per

973
00:45:15,540 --> 00:45:21,150
interface ipv6 configuration will

974
00:45:17,460 --> 00:45:23,730
consist of a<font color="#E5E5E5"> boolean leaf to say is ipv6</font>

975
00:45:21,150 --> 00:45:27,630
enabled<font color="#E5E5E5"> on this interface and it will</font>

976
00:45:23,730 --> 00:45:30,810
have a list<font color="#CCCCCC"> of ipv6</font><font color="#E5E5E5"> addresses and prefix</font>

977
00:45:27,630 --> 00:45:33,060
length combinations<font color="#E5E5E5"> okay you will</font>

978
00:45:30,810 --> 00:45:37,860
<font color="#E5E5E5">recognize this from typing things into</font>

979
00:45:33,060 --> 00:45:40,920
the CLI<font color="#E5E5E5"> and</font><font color="#CCCCCC"> what we're</font><font color="#E5E5E5"> gonna use</font><font color="#CCCCCC"> is a</font>

980
00:45:37,860 --> 00:45:42,930
<font color="#E5E5E5">very powerful feature called augment or</font>

981
00:45:40,920 --> 00:45:45,720
<font color="#E5E5E5">powerful keyword called augment augment</font>

982
00:45:42,930 --> 00:45:49,980
is a way for a module<font color="#E5E5E5"> to if you like</font>

983
00:45:45,720 --> 00:45:51,299
mount<font color="#E5E5E5"> itself into another module so bear</font>

984
00:45:49,980 --> 00:45:55,050
with me what we do here is that<font color="#CCCCCC"> we</font>

985
00:45:51,300 --> 00:45:57,930
import from<font color="#CCCCCC"> ITF IP</font><font color="#E5E5E5"> dot yang we import</font>

986
00:45:55,050 --> 00:46:00,620
ITF interfaces with<font color="#E5E5E5"> our prefix if</font><font color="#CCCCCC"> okay</font>

987
00:45:57,930 --> 00:46:03,480
so now we have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> data nodes from</font>

988
00:46:00,620 --> 00:46:06,180
interfaces<font color="#CCCCCC"> available and then</font><font color="#E5E5E5"> we say</font>

989
00:46:03,480 --> 00:46:09,780
<font color="#E5E5E5">using the magical incantation augment</font>

990
00:46:06,180 --> 00:46:11,940
and a path under interfaces interface so

991
00:46:09,780 --> 00:46:16,110
we're in the<font color="#E5E5E5"> readwrite section of the</font>

992
00:46:11,940 --> 00:46:18,960
interfaces module augment this and we

993
00:46:16,110 --> 00:46:20,940
provide a container<font color="#E5E5E5"> called ipv6 okay so</font>

994
00:46:18,960 --> 00:46:23,700
by doing this<font color="#E5E5E5"> we have suddenly kind of</font>

995
00:46:20,940 --> 00:46:26,190
mounted ourselves into the ITF

996
00:46:23,700 --> 00:46:30,140
interfaces<font color="#E5E5E5"> data set and added a</font>

997
00:46:26,190 --> 00:46:33,420
<font color="#E5E5E5">container ipv6 okay so this provides the</font>

998
00:46:30,140 --> 00:46:35,339
groundwork<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> actual configurable</font>

999
00:46:33,420 --> 00:46:38,310
through<font color="#E5E5E5"> with ipv6 and this allows the</font>

1000
00:46:35,340 --> 00:46:40,770
ITF<font color="#E5E5E5"> and other SDO is to write the the</font>

1001
00:46:38,310 --> 00:46:43,590
let's say the backbones<font color="#E5E5E5"> of what they do</font>

1002
00:46:40,770 --> 00:46:46,110
first and then have teams in<font color="#E5E5E5"> our case</font>

1003
00:46:43,590 --> 00:46:49,440
working<font color="#E5E5E5"> groups augment themselves into</font>

1004
00:46:46,110 --> 00:46:50,619
this that's the<font color="#CCCCCC"> machination s-- then</font>

1005
00:46:49,440 --> 00:46:52,599
starts<font color="#E5E5E5"> the actual work</font>

1006
00:46:50,619 --> 00:46:54,969
so there's a lot<font color="#CCCCCC"> of work going on in</font>

1007
00:46:52,599 --> 00:46:57,369
many working groups about how do we all

1008
00:46:54,969 --> 00:46:59,559
meant ourselves<font color="#CCCCCC"> efficiently and organize</font>

1009
00:46:57,369 --> 00:47:02,710
ourselves efficiently<font color="#CCCCCC"> around</font><font color="#E5E5E5"> each</font>

1010
00:46:59,559 --> 00:47:08,650
other's modules<font color="#E5E5E5"> okay but it's a very</font>

1011
00:47:02,710 --> 00:47:10,479
very powerful concept and the ipv6 model

1012
00:47:08,650 --> 00:47:12,849
and<font color="#E5E5E5"> this is a yeah this is the demo</font>

1013
00:47:10,479 --> 00:47:14,769
version<font color="#CCCCCC"> as I mentioned we have a leaf</font>

1014
00:47:12,849 --> 00:47:17,319
called enabled<font color="#E5E5E5"> it's a type boolean</font>

1015
00:47:14,769 --> 00:47:19,718
you've seen<font color="#E5E5E5"> that before default true we</font>

1016
00:47:17,319 --> 00:47:22,479
have a list<font color="#E5E5E5"> of addresses the key to the</font>

1017
00:47:19,719 --> 00:47:25,450
address is the actual IP address and we

1018
00:47:22,479 --> 00:47:28,749
reuse the ITF definition of an ipv6

1019
00:47:25,450 --> 00:47:30,729
address with no zone<font color="#E5E5E5"> to it because we</font>

1020
00:47:28,749 --> 00:47:32,890
use the prefix length which<font color="#CCCCCC"> is of type</font>

1021
00:47:30,729 --> 00:47:33,788
<font color="#CCCCCC">on sign into your eight with a</font>

1022
00:47:32,890 --> 00:47:36,009
particular<font color="#E5E5E5"> range</font>

1023
00:47:33,789 --> 00:47:38,890
<font color="#CCCCCC">here's another actual keyword that I</font>

1024
00:47:36,009 --> 00:47:41,619
haven't mentioned before mandatory true

1025
00:47:38,890 --> 00:47:43,569
of course all keys are<font color="#CCCCCC"> mandatory you can</font>

1026
00:47:41,619 --> 00:47:45,880
create<font color="#E5E5E5"> a list entry without having a key</font>

1027
00:47:43,569 --> 00:47:47,469
but this also<font color="#E5E5E5"> says that we won't</font><font color="#CCCCCC"> allow</font>

1028
00:47:45,880 --> 00:47:50,979
you to<font color="#E5E5E5"> create an entry in the address</font>

1029
00:47:47,469 --> 00:47:52,749
<font color="#E5E5E5">list without the prefix length so it's</font>

1030
00:47:50,979 --> 00:47:55,239
not a key but<font color="#CCCCCC"> it's mandatory</font>

1031
00:47:52,749 --> 00:48:02,979
so trying<font color="#CCCCCC"> to create it</font><font color="#E5E5E5"> without a prefix</font>

1032
00:47:55,239 --> 00:48:05,769
length will be an error so here's the

1033
00:48:02,979 --> 00:48:08,919
instance data<font color="#E5E5E5"> in XML so we now have two</font>

1034
00:48:05,769 --> 00:48:13,238
routers<font color="#E5E5E5"> so we have interfaces interface</font>

1035
00:48:08,920 --> 00:48:15,729
and we identify the name eth0<font color="#E5E5E5"> it's under</font>

1036
00:48:13,239 --> 00:48:17,410
a PVC ipv6 where there's actually new so

1037
00:48:15,729 --> 00:48:20,589
we need this interface to be<font color="#E5E5E5"> enabled</font>

1038
00:48:17,410 --> 00:48:21,969
we've added a made-up address and we

1039
00:48:20,589 --> 00:48:22,960
have a prefix length and you would<font color="#CCCCCC"> not</font>

1040
00:48:21,969 --> 00:48:24,009
be<font color="#E5E5E5"> surprised</font><font color="#CCCCCC"> to see that it looks</font>

1041
00:48:22,960 --> 00:48:28,749
<font color="#CCCCCC">exactly the same</font>

1042
00:48:24,009 --> 00:48:33,099
towards router<font color="#CCCCCC"> 2 oh</font><font color="#E5E5E5"> when you</font><font color="#CCCCCC"> say that</font>

1043
00:48:28,749 --> 00:48:36,279
the key is ipv6 address yes<font color="#E5E5E5"> and if</font>

1044
00:48:33,099 --> 00:48:38,950
someone put a leading<font color="#E5E5E5"> 0 in it in our</font><font color="#CCCCCC"> P</font>

1045
00:48:36,279 --> 00:48:41,289
<font color="#E5E5E5">v6 address this doesn't have the</font>

1046
00:48:38,950 --> 00:48:43,149
semantic knowledge that that<font color="#E5E5E5"> actually</font>

1047
00:48:41,289 --> 00:48:47,619
<font color="#E5E5E5">the same address and treat that as a</font>

1048
00:48:43,150 --> 00:48:52,950
different<font color="#CCCCCC"> key yes no yes</font><font color="#E5E5E5"> treat that as a</font>

1049
00:48:47,619 --> 00:48:55,269
<font color="#E5E5E5">different key</font><font color="#CCCCCC"> ok ah</font><font color="#E5E5E5"> perfect</font><font color="#CCCCCC"> thank you I</font>

1050
00:48:52,950 --> 00:48:57,779
have the full<font color="#E5E5E5"> support team here it's</font>

1051
00:48:55,269 --> 00:48:57,779
<font color="#E5E5E5">beautiful</font>

1052
00:48:58,400 --> 00:49:07,040
I<font color="#E5E5E5"> don't actually we have a concept which</font>

1053
00:49:04,520 --> 00:49:11,780
is<font color="#E5E5E5"> called the name again</font>

1054
00:49:07,040 --> 00:49:16,400
I forgot<font color="#CCCCCC"> make it up now every every data</font>

1055
00:49:11,780 --> 00:49:19,340
type has canonical kind of a canonical

1056
00:49:16,400 --> 00:49:22,340
form at the heart of the idea<font color="#E5E5E5"> that these</font>

1057
00:49:19,340 --> 00:49:25,790
comparisons like<font color="#CCCCCC"> for keys and also for</font>

1058
00:49:22,340 --> 00:49:28,460
<font color="#E5E5E5">its path expression evaluation you need</font>

1059
00:49:25,790 --> 00:49:32,240
to use the canonical form form for

1060
00:49:28,460 --> 00:49:35,300
comparing it so in the same<font color="#E5E5E5"> way</font><font color="#CCCCCC"> at RFC</font>

1061
00:49:32,240 --> 00:49:37,370
69 91<font color="#E5E5E5"> over the number we have a</font>

1062
00:49:35,300 --> 00:49:39,350
canonical<font color="#E5E5E5"> form</font><font color="#CCCCCC"> undefined for</font><font color="#E5E5E5"> ipv6</font>

1063
00:49:37,370 --> 00:49:42,380
<font color="#E5E5E5">addresses which is what you would expect</font>

1064
00:49:39,350 --> 00:49:43,940
<font color="#CCCCCC">it means no leading</font><font color="#E5E5E5"> zeros and so on so</font>

1065
00:49:42,380 --> 00:49:46,870
this<font color="#CCCCCC"> is what</font><font color="#E5E5E5"> you need tools for</font>

1066
00:49:43,940 --> 00:49:50,900
comparing<font color="#E5E5E5"> keys and so on so in this case</font>

1067
00:49:46,870 --> 00:49:52,370
this will be<font color="#E5E5E5"> the same key so an error so</font>

1068
00:49:50,900 --> 00:49:54,530
does that mean that<font color="#CCCCCC"> QED</font>

1069
00:49:52,370 --> 00:49:57,020
should provide the input in<font color="#CCCCCC"> canonical</font>

1070
00:49:54,530 --> 00:49:59,000
form<font color="#E5E5E5"> or does it mean</font><font color="#CCCCCC"> that the system</font>

1071
00:49:57,020 --> 00:50:01,430
should canonical I know the system<font color="#CCCCCC"> for</font>

1072
00:49:59,000 --> 00:50:03,830
<font color="#CCCCCC">manners when checking when checking is a</font>

1073
00:50:01,430 --> 00:50:06,859
<font color="#CCCCCC">keys it will use this canonical format</font>

1074
00:50:03,830 --> 00:50:11,120
so it will be factors you are<font color="#E5E5E5"> not</font>

1075
00:50:06,860 --> 00:50:14,480
allowed to<font color="#E5E5E5"> have different like</font><font color="#CCCCCC"> different</font>

1076
00:50:11,120 --> 00:50:20,620
IP<font color="#E5E5E5"> addresses</font><font color="#CCCCCC"> differing just in reading</font>

1077
00:50:14,480 --> 00:50:20,620
good<font color="#E5E5E5"> excellent</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> cool interesting</font>

1078
00:50:21,280 --> 00:50:29,110
there<font color="#CCCCCC"> you go</font>

1079
00:50:23,560 --> 00:50:29,110
yep so<font color="#CCCCCC"> ok hopefully</font><font color="#E5E5E5"> nothing particularly</font>

1080
00:50:30,250 --> 00:50:35,630
exciting here now of course the subtle

1081
00:50:33,020 --> 00:50:39,050
message in this slide is<font color="#CCCCCC"> that it would</font>

1082
00:50:35,630 --> 00:50:41,210
<font color="#E5E5E5">be cool if router one was from vendor</font><font color="#CCCCCC"> a</font>

1083
00:50:39,050 --> 00:50:44,120
and router<font color="#CCCCCC"> two was from vendor B right</font>

1084
00:50:41,210 --> 00:50:46,490
<font color="#CCCCCC">and you send the same payload</font><font color="#E5E5E5"> see now</font>

1085
00:50:44,120 --> 00:50:47,930
we're thinking<font color="#E5E5E5"> that is what we're trying</font>

1086
00:50:46,490 --> 00:50:49,850
<font color="#CCCCCC">to do here of course by providing</font>

1087
00:50:47,930 --> 00:50:54,020
<font color="#E5E5E5">because again all the</font><font color="#CCCCCC"> examples I have</font>

1088
00:50:49,850 --> 00:50:56,839
<font color="#E5E5E5">here is from ITF submitted yang modules</font>

1089
00:50:54,020 --> 00:50:58,700
that we<font color="#E5E5E5"> dearly hope that vendors and</font>

1090
00:50:56,840 --> 00:51:00,260
service<font color="#CCCCCC"> writers will pick up on because</font>

1091
00:50:58,700 --> 00:51:02,629
they<font color="#E5E5E5"> don't discriminate</font><font color="#CCCCCC"> it's the same</font>

1092
00:51:00,260 --> 00:51:04,160
data structure<font color="#CCCCCC"> but of course vendors can</font>

1093
00:51:02,630 --> 00:51:07,400
then go ahead<font color="#CCCCCC"> and use</font><font color="#E5E5E5"> powerful features</font>

1094
00:51:04,160 --> 00:51:09,379
like feature and augment and other

1095
00:51:07,400 --> 00:51:11,820
things to extend<font color="#E5E5E5"> things because of</font>

1096
00:51:09,380 --> 00:51:13,890
course vendors need to have some

1097
00:51:11,820 --> 00:51:16,980
thing you know<font color="#CCCCCC"> attached</font><font color="#E5E5E5"> to the address</font>

1098
00:51:13,890 --> 00:51:18,720
that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> makes their thing go</font><font color="#CCCCCC"> faster but</font>

1099
00:51:16,980 --> 00:51:20,130
so I<font color="#E5E5E5"> don't think vendors need to agree</font>

1100
00:51:18,720 --> 00:51:22,529
on the<font color="#E5E5E5"> interface name</font><font color="#CCCCCC"> though right</font>

1101
00:51:20,130 --> 00:51:24,210
<font color="#E5E5E5">that's true it's</font><font color="#CCCCCC"> nope it's on a</font><font color="#E5E5E5"> peg</font>

1102
00:51:22,530 --> 00:51:26,550
string as long as it's unique yeah

1103
00:51:24,210 --> 00:51:28,550
they're fine<font color="#E5E5E5"> my question would be what</font>

1104
00:51:26,550 --> 00:51:30,750
<font color="#E5E5E5">would be the expected behavior if I</font>

1105
00:51:28,550 --> 00:51:33,090
configure an ipv6 address with a

1106
00:51:30,750 --> 00:51:36,330
different prefix length<font color="#E5E5E5"> if there is a</font>

1107
00:51:33,090 --> 00:51:38,580
pre-existing ipv6 address<font color="#E5E5E5"> but with</font><font color="#CCCCCC"> a</font>

1108
00:51:36,330 --> 00:51:42,270
<font color="#CCCCCC">different way with a slash 128 and I</font>

1109
00:51:38,580 --> 00:51:44,250
wanted / 126<font color="#E5E5E5"> is the expected thing that</font>

1110
00:51:42,270 --> 00:51:47,730
to tell me that<font color="#E5E5E5"> the key</font><font color="#CCCCCC"> already exists</font>

1111
00:51:44,250 --> 00:51:53,760
or<font color="#E5E5E5"> is it overwritten</font><font color="#CCCCCC"> if so back to I'll</font>

1112
00:51:47,730 --> 00:51:56,640
start off the lexical value here will

1113
00:51:53,760 --> 00:51:58,980
then be canonicalized<font color="#CCCCCC"> and compared with</font>

1114
00:51:56,640 --> 00:52:00,900
<font color="#E5E5E5">the incoming or colliding or potentially</font>

1115
00:51:58,980 --> 00:52:04,320
colliding engine right<font color="#E5E5E5"> and if they match</font>

1116
00:52:00,900 --> 00:52:06,390
it's a no<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so it's a good question</font>

1117
00:52:04,320 --> 00:52:09,420
actually<font color="#CCCCCC"> because there's another</font><font color="#E5E5E5"> concept</font>

1118
00:52:06,390 --> 00:52:10,950
in<font color="#E5E5E5"> yang called unique it there's there</font>

1119
00:52:09,420 --> 00:52:13,050
<font color="#CCCCCC">are ways to describe</font><font color="#E5E5E5"> to say that look</font>

1120
00:52:10,950 --> 00:52:14,640
the IP address is key<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the</font>

1121
00:52:13,050 --> 00:52:16,980
<font color="#E5E5E5">combination of IP and prefix length</font>

1122
00:52:14,640 --> 00:52:19,290
needs to be<font color="#E5E5E5"> unique we don't have that</font>

1123
00:52:16,980 --> 00:52:21,330
here<font color="#CCCCCC"> so it</font><font color="#E5E5E5"> means that this is</font><font color="#CCCCCC"> the only</font>

1124
00:52:19,290 --> 00:52:23,220
thing<font color="#CCCCCC"> we're looking</font><font color="#E5E5E5"> at so if you try to</font>

1125
00:52:21,330 --> 00:52:25,049
have the same<font color="#E5E5E5"> ip address but with a</font>

1126
00:52:23,220 --> 00:52:27,439
shorter prefix length and<font color="#CCCCCC"> there</font>

1127
00:52:25,050 --> 00:52:39,380
canonically the same you would<font color="#E5E5E5"> be denied</font>

1128
00:52:27,440 --> 00:52:42,450
<font color="#CCCCCC">that would be a no-go so here's task</font><font color="#E5E5E5"> 3</font>

1129
00:52:39,380 --> 00:52:44,370
now that we have<font color="#CCCCCC"> enable interfaces we</font>

1130
00:52:42,450 --> 00:52:47,490
have ipv6<font color="#CCCCCC"> on them or now we're going</font><font color="#E5E5E5"> to</font>

1131
00:52:44,370 --> 00:52:50,520
<font color="#E5E5E5">configure</font><font color="#CCCCCC"> Ellis piece</font><font color="#E5E5E5"> so now</font><font color="#CCCCCC"> we're you</font>

1132
00:52:47,490 --> 00:52:53,279
go<font color="#E5E5E5"> okay I don't know if I should ask</font>

1133
00:52:50,520 --> 00:52:57,930
<font color="#E5E5E5">this question</font><font color="#CCCCCC"> thankfully I like the way</font>

1134
00:52:53,280 --> 00:52:59,550
you I just<font color="#E5E5E5"> wonder why if I were</font><font color="#CCCCCC"> to say</font>

1135
00:52:57,930 --> 00:53:04,230
and I don't<font color="#E5E5E5"> know v6 I'll say I didn't</font>

1136
00:52:59,550 --> 00:53:06,660
before 10.1.1.1<font color="#CCCCCC"> slash</font><font color="#E5E5E5"> 28 that's broken</font>

1137
00:53:04,230 --> 00:53:10,590
because the<font color="#CCCCCC"> dot one is not a valid</font>

1138
00:53:06,660 --> 00:53:13,259
siphoning<font color="#E5E5E5"> right is there a way</font><font color="#CCCCCC"> to say</font>

1139
00:53:10,590 --> 00:53:14,970
you can't do that or is that<font color="#E5E5E5"> up to the</font>

1140
00:53:13,260 --> 00:53:17,640
<font color="#CCCCCC">back-end system to say I'm</font><font color="#E5E5E5"> trying to</font>

1141
00:53:14,970 --> 00:53:20,910
configure<font color="#E5E5E5"> this it didn't make sense</font><font color="#CCCCCC"> King</font>

1142
00:53:17,640 --> 00:53:24,690
can I in yang<font color="#E5E5E5"> you know in my data model</font>

1143
00:53:20,910 --> 00:53:26,930
say<font color="#E5E5E5"> that's a meaningless thing</font><font color="#CCCCCC"> no so</font><font color="#E5E5E5"> he</font>

1144
00:53:24,690 --> 00:53:26,930
<font color="#E5E5E5">writes</font>

1145
00:53:28,059 --> 00:53:33,500
thanks for<font color="#E5E5E5"> the back</font><font color="#CCCCCC"> ok ok</font><font color="#E5E5E5"> yeah they say</font>

1146
00:53:31,480 --> 00:53:35,450
<font color="#E5E5E5">what you're poking at</font><font color="#CCCCCC"> and which</font><font color="#E5E5E5"> you're</font>

1147
00:53:33,500 --> 00:53:37,609
writing<font color="#E5E5E5"> is that there's a limit to the</font>

1148
00:53:35,450 --> 00:53:39,950
semantic checks that the language can

1149
00:53:37,609 --> 00:53:45,740
<font color="#E5E5E5">express some things we just have to be</font>

1150
00:53:39,950 --> 00:53:47,000
done<font color="#E5E5E5"> on the back end</font><font color="#CCCCCC"> ok so we want</font><font color="#E5E5E5"> to</font>

1151
00:53:45,740 --> 00:53:48,618
configure<font color="#E5E5E5"> a less piece and we just</font>

1152
00:53:47,000 --> 00:53:50,150
completed<font color="#CCCCCC"> the</font><font color="#E5E5E5"> team by the actual editor</font>

1153
00:53:48,619 --> 00:53:56,089
of the RFC here so that's perfect<font color="#E5E5E5"> now</font>

1154
00:53:50,150 --> 00:53:58,539
everybody's here<font color="#E5E5E5"> no pressure</font><font color="#CCCCCC"> just a</font>

1155
00:53:56,089 --> 00:54:00,950
brief<font color="#E5E5E5"> walkthrough this is an interesting</font>

1156
00:53:58,539 --> 00:54:03,220
RFC or an interesting interesting draft

1157
00:54:00,950 --> 00:54:05,720
<font color="#E5E5E5">an interesting yang module it is</font>

1158
00:54:03,220 --> 00:54:07,339
<font color="#CCCCCC">challengingly</font><font color="#E5E5E5"> large and it's very</font>

1159
00:54:05,720 --> 00:54:09,769
ambitious<font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> look at a very</font>

1160
00:54:07,339 --> 00:54:11,960
small subtree<font color="#E5E5E5"> so when I start at the top</font>

1161
00:54:09,769 --> 00:54:14,029
look at MPLS we care for<font color="#E5E5E5"> Ellis piece</font>

1162
00:54:11,960 --> 00:54:16,220
we're<font color="#E5E5E5"> gonna care for static</font><font color="#CCCCCC"> LSPs only</font>

1163
00:54:14,029 --> 00:54:19,789
I'm<font color="#E5E5E5"> gonna look at the label switched</font>

1164
00:54:16,220 --> 00:54:21,140
paths<font color="#E5E5E5"> part of this but</font><font color="#CCCCCC"> you'll recognize</font>

1165
00:54:19,789 --> 00:54:22,549
now that<font color="#CCCCCC"> we have a container on the top</font>

1166
00:54:21,140 --> 00:54:24,348
we have<font color="#E5E5E5"> a container in the container</font>

1167
00:54:22,549 --> 00:54:25,880
then<font color="#E5E5E5"> actually we have a companion in the</font>

1168
00:54:24,349 --> 00:54:29,180
container in the container here<font color="#E5E5E5"> called</font>

1169
00:54:25,880 --> 00:54:30,980
static Ellis<font color="#E5E5E5"> piece and this uses then</font>

1170
00:54:29,180 --> 00:54:33,019
the<font color="#CCCCCC"> keyword that</font><font color="#E5E5E5"> I mentioned before it</font>

1171
00:54:30,980 --> 00:54:35,329
<font color="#E5E5E5">use no I actually haven't sorry it uses</font>

1172
00:54:33,019 --> 00:54:36,709
<font color="#E5E5E5">the useless statement that we'll get to</font>

1173
00:54:35,329 --> 00:54:39,200
<font color="#CCCCCC">that on the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> slide but now you have</font>

1174
00:54:36,710 --> 00:54:41,000
a feel for or going to do so inside<font color="#CCCCCC"> of</font>

1175
00:54:39,200 --> 00:54:44,149
MPLS at<font color="#E5E5E5"> his</font><font color="#CCCCCC"> peace</font><font color="#E5E5E5"> start to get his piece</font>

1176
00:54:41,000 --> 00:54:46,009
you have label switched paths<font color="#CCCCCC"> a name in</font>

1177
00:54:44,150 --> 00:54:48,140
ingress and egress they all have next

1178
00:54:46,009 --> 00:54:52,089
stop incoming label or push label<font color="#CCCCCC"> ok</font>

1179
00:54:48,140 --> 00:54:52,089
that's the content<font color="#E5E5E5"> of the model that</font>

1180
00:54:53,109 --> 00:55:00,710
<font color="#CCCCCC">leads us</font><font color="#E5E5E5"> to groupings so groupings</font><font color="#CCCCCC"> or</font>

1181
00:54:57,200 --> 00:55:04,490
ways of assembling<font color="#E5E5E5"> data nodes into named</font>

1182
00:55:00,710 --> 00:55:05,900
<font color="#E5E5E5">sets that you can reuse so we talked a</font>

1183
00:55:04,490 --> 00:55:07,848
little bit about reuse before in terms

1184
00:55:05,900 --> 00:55:10,549
of type deaths<font color="#E5E5E5"> but they are type</font>

1185
00:55:07,849 --> 00:55:14,240
reusable types these are<font color="#CCCCCC"> reusable data</font>

1186
00:55:10,549 --> 00:55:16,038
sets or data node sets right so the way

1187
00:55:14,240 --> 00:55:17,660
you declare<font color="#CCCCCC"> a groupings or the</font><font color="#E5E5E5"> key word</font>

1188
00:55:16,039 --> 00:55:21,259
you<font color="#E5E5E5"> use is grouping and it's got a name</font>

1189
00:55:17,660 --> 00:55:24,379
<font color="#E5E5E5">in this</font><font color="#CCCCCC"> case this grouping consists of a</font>

1190
00:55:21,259 --> 00:55:26,089
list called label switched paths and you

1191
00:55:24,380 --> 00:55:28,369
have yes<font color="#E5E5E5"> you've already seen that is</font>

1192
00:55:26,089 --> 00:55:30,109
that both<font color="#E5E5E5"> the ingress and egress</font><font color="#CCCCCC"> will</font>

1193
00:55:28,369 --> 00:55:31,849
use the same data<font color="#E5E5E5"> structure so it's</font>

1194
00:55:30,109 --> 00:55:35,960
<font color="#CCCCCC">appropriate</font><font color="#E5E5E5"> to declare a grouping and</font>

1195
00:55:31,849 --> 00:55:38,240
then<font color="#E5E5E5"> reuse them</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> list we are a</font>

1196
00:55:35,960 --> 00:55:39,050
key name<font color="#CCCCCC"> leaf named</font><font color="#E5E5E5"> container ingress</font>

1197
00:55:38,240 --> 00:55:40,700
just

1198
00:55:39,050 --> 00:55:44,000
make it more interesting<font color="#CCCCCC"> this grouping</font>

1199
00:55:40,700 --> 00:55:46,129
<font color="#E5E5E5">actually uses other groupings this is</font>

1200
00:55:44,000 --> 00:55:50,600
where you start keeping context in your

1201
00:55:46,130 --> 00:55:53,090
<font color="#E5E5E5">head and this grouping uses a grouping</font>

1202
00:55:50,600 --> 00:55:54,830
<font color="#CCCCCC">called static LSP common well at a first</font>

1203
00:55:53,090 --> 00:55:56,660
glance at least this<font color="#E5E5E5"> grouping doesn't</font>

1204
00:55:54,830 --> 00:55:58,190
have additional groupings<font color="#E5E5E5"> or</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> of</font>

1205
00:55:56,660 --> 00:56:01,460
statements right so<font color="#CCCCCC"> this is the bottom</font>

1206
00:55:58,190 --> 00:56:03,410
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the the Leafs next</font><font color="#E5E5E5"> up incoming</font>

1207
00:56:01,460 --> 00:56:05,390
label and push label and by using the

1208
00:56:03,410 --> 00:56:07,490
container<font color="#E5E5E5"> on the left side with then</font>

1209
00:56:05,390 --> 00:56:10,040
they both use the<font color="#E5E5E5"> static LSP common we</font>

1210
00:56:07,490 --> 00:56:11,209
declare this thing right and the cool

1211
00:56:10,040 --> 00:56:13,360
thing<font color="#CCCCCC"> here of course is</font><font color="#E5E5E5"> that if you</font>

1212
00:56:11,210 --> 00:56:16,520
choose if you<font color="#CCCCCC"> choose to change</font><font color="#E5E5E5"> something</font>

1213
00:56:13,360 --> 00:56:19,580
<font color="#CCCCCC">in the grouping</font><font color="#E5E5E5"> you don't have to repeat</font>

1214
00:56:16,520 --> 00:56:21,290
yourself<font color="#E5E5E5"> because it it uses them but you</font>

1215
00:56:19,580 --> 00:56:23,569
also<font color="#E5E5E5"> have to be very</font><font color="#CCCCCC"> short</font><font color="#E5E5E5"> or not very</font>

1216
00:56:21,290 --> 00:56:25,430
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I reasonably sure that the</font>

1217
00:56:23,570 --> 00:56:28,040
<font color="#CCCCCC">places where you use</font><font color="#E5E5E5"> the grouping will</font>

1218
00:56:25,430 --> 00:56:31,180
always be kind<font color="#E5E5E5"> of the same so you don't</font>

1219
00:56:28,040 --> 00:56:31,180
<font color="#E5E5E5">have to break</font><font color="#CCCCCC"> up the groupings later</font>

1220
00:56:33,220 --> 00:56:40,549
<font color="#CCCCCC">okay so now we have the instance</font><font color="#E5E5E5"> data</font>

1221
00:56:37,310 --> 00:56:43,310
for the label switch<font color="#CCCCCC"> path and you will</font>

1222
00:56:40,550 --> 00:56:45,260
<font color="#CCCCCC">recognize the fact that</font><font color="#E5E5E5"> we have a list</font>

1223
00:56:43,310 --> 00:56:48,200
of label switched paths

1224
00:56:45,260 --> 00:56:50,840
LSP<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> we have an ingress incoming label</font>

1225
00:56:48,200 --> 00:56:59,180
of an<font color="#E5E5E5"> e a egress</font><font color="#CCCCCC"> next-hop same thing on</font>

1226
00:56:50,840 --> 00:57:02,570
<font color="#E5E5E5">route or to any questions because</font><font color="#CCCCCC"> that</font>

1227
00:56:59,180 --> 00:57:03,950
concludes<font color="#E5E5E5"> task 3 and we've now gone</font>

1228
00:57:02,570 --> 00:57:07,780
through<font color="#CCCCCC"> the absolute majority of the</font>

1229
00:57:03,950 --> 00:57:07,779
<font color="#E5E5E5">features in the</font><font color="#CCCCCC"> yang language</font>

1230
00:57:10,420 --> 00:57:20,810
so in summary<font color="#CCCCCC"> each one</font><font color="#E5E5E5"> of you should now</font>

1231
00:57:13,340 --> 00:57:23,000
<font color="#CCCCCC">be</font><font color="#E5E5E5"> able to do what we set</font><font color="#CCCCCC"> out to</font><font color="#E5E5E5"> do so</font>

1232
00:57:20,810 --> 00:57:24,200
we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> understand</font><font color="#E5E5E5"> like call you how</font>

1233
00:57:23,000 --> 00:57:25,460
do you<font color="#E5E5E5"> distinguish in your vendor</font>

1234
00:57:24,200 --> 00:57:29,600
specific<font color="#E5E5E5"> versus</font><font color="#CCCCCC"> a non where</font><font color="#E5E5E5"> this</font>

1235
00:57:25,460 --> 00:57:31,190
specific<font color="#E5E5E5"> no</font><font color="#CCCCCC"> so I'm actually one step</font>

1236
00:57:29,600 --> 00:57:34,460
below that I'm more<font color="#CCCCCC"> in the language</font>

1237
00:57:31,190 --> 00:57:36,410
<font color="#E5E5E5">level and there would of course be yang</font>

1238
00:57:34,460 --> 00:57:38,690
modules both from vendors and then from

1239
00:57:36,410 --> 00:57:41,629
others and in the language<font color="#CCCCCC"> there's no</font>

1240
00:57:38,690 --> 00:57:43,130
specific<font color="#CCCCCC"> way to say that</font><font color="#E5E5E5"> I'm from a</font>

1241
00:57:41,630 --> 00:57:44,600
standards organization<font color="#E5E5E5"> or I'm from a</font>

1242
00:57:43,130 --> 00:57:49,130
vendor or<font color="#E5E5E5"> I'm from an</font><font color="#CCCCCC"> open-source</font>

1243
00:57:44,600 --> 00:57:51,200
<font color="#E5E5E5">project well the namespace will uniquely</font>

1244
00:57:49,130 --> 00:57:53,100
identify kind<font color="#E5E5E5"> of who you</font><font color="#CCCCCC"> are but</font><font color="#E5E5E5"> it</font>

1245
00:57:51,200 --> 00:57:54,689
<font color="#E5E5E5">doesn't say much</font><font color="#CCCCCC"> about anything</font>

1246
00:57:53,100 --> 00:58:00,210
were you<font color="#E5E5E5"> thinking about you probably had</font>

1247
00:57:54,690 --> 00:58:01,730
another just<font color="#E5E5E5"> rain</font><font color="#CCCCCC"> dryness okay so I can</font>

1248
00:58:00,210 --> 00:58:04,680
admit models to add additional

1249
00:58:01,730 --> 00:58:06,690
<font color="#CCCCCC">functionality can</font><font color="#E5E5E5"> I sort of remove</font>

1250
00:58:04,680 --> 00:58:09,029
chunks as well like if my box doesn't

1251
00:58:06,690 --> 00:58:10,920
<font color="#E5E5E5">support sub interfaces can I say that's</font>

1252
00:58:09,030 --> 00:58:14,550
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that's defined break</font><font color="#E5E5E5"> don't do</font>

1253
00:58:10,920 --> 00:58:16,200
yes<font color="#E5E5E5"> but and I need some of the the more</font>

1254
00:58:14,550 --> 00:58:19,020
seasoned people<font color="#CCCCCC"> to maybe add color to</font>

1255
00:58:16,200 --> 00:58:21,600
this<font color="#E5E5E5"> we really wanted that</font><font color="#CCCCCC"> to be very</font>

1256
00:58:19,020 --> 00:58:23,970
hard and<font color="#E5E5E5"> actually associated with a</font>

1257
00:58:21,600 --> 00:58:26,730
little bit of shame<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we do want</font>

1258
00:58:23,970 --> 00:58:28,259
the ITF to write the minimal<font color="#E5E5E5"> set the</font>

1259
00:58:26,730 --> 00:58:30,750
useful set you know anything less than

1260
00:58:28,260 --> 00:58:32,430
that would<font color="#CCCCCC"> be bad</font><font color="#E5E5E5"> but there is a key</font>

1261
00:58:30,750 --> 00:58:34,140
word<font color="#CCCCCC"> that I don't</font><font color="#E5E5E5"> even going to mention</font>

1262
00:58:32,430 --> 00:58:35,930
here but I'll do<font color="#CCCCCC"> it now</font><font color="#E5E5E5"> verbally and</font>

1263
00:58:34,140 --> 00:58:38,339
we'll<font color="#E5E5E5"> edit that out called deviation</font>

1264
00:58:35,930 --> 00:58:40,230
that's<font color="#E5E5E5"> where you're secretly omit not so</font>

1265
00:58:38,340 --> 00:58:41,820
secretly<font color="#E5E5E5"> where you declaratively admit</font>

1266
00:58:40,230 --> 00:58:44,280
that<font color="#E5E5E5"> these are the parts of the</font><font color="#CCCCCC"> model</font>

1267
00:58:41,820 --> 00:58:46,620
that<font color="#CCCCCC"> I don't implement</font><font color="#E5E5E5"> we wanted that to</font>

1268
00:58:44,280 --> 00:58:50,130
<font color="#CCCCCC">be something you could explicitly call</font>

1269
00:58:46,620 --> 00:58:52,950
out so the<font color="#E5E5E5"> the consumer can see that</font>

1270
00:58:50,130 --> 00:58:56,300
<font color="#E5E5E5">this is you can't just sneak it out of</font>

1271
00:58:52,950 --> 00:58:59,069
there<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> the picture good question</font>

1272
00:58:56,300 --> 00:59:02,190
any other concluding yang questions

1273
00:58:59,070 --> 00:59:04,310
<font color="#E5E5E5">greedy there's always one</font><font color="#CCCCCC"> more question</font>

1274
00:59:02,190 --> 00:59:10,590
<font color="#CCCCCC">that guy</font>

1275
00:59:04,310 --> 00:59:13,549
so does feature mean here's a approved

1276
00:59:10,590 --> 00:59:15,720
or not<font color="#E5E5E5"> not approve but an okay deviation</font>

1277
00:59:13,550 --> 00:59:18,660
that's that's a mean way of saying it

1278
00:59:15,720 --> 00:59:21,089
yes<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> editors of</font><font color="#E5E5E5"> the specification</font>

1279
00:59:18,660 --> 00:59:23,460
said that you're fine<font color="#E5E5E5"> to not</font><font color="#CCCCCC"> have this</font>

1280
00:59:21,090 --> 00:59:26,250
<font color="#E5E5E5">it's okay can we just call deviation</font>

1281
00:59:23,460 --> 00:59:29,420
deviant<font color="#E5E5E5"> would be better</font><font color="#CCCCCC"> to late I think</font>

1282
00:59:26,250 --> 00:59:29,420
<font color="#E5E5E5">but yes</font>

1283
00:59:30,590 --> 00:59:36,840
you reference a state like enabled<font color="#E5E5E5"> or</font>

1284
00:59:34,080 --> 00:59:39,360
active or something like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> which</font>

1285
00:59:36,840 --> 00:59:41,190
<font color="#E5E5E5">is state but not the way</font><font color="#CCCCCC"> to put the</font>

1286
00:59:39,360 --> 00:59:43,380
system<font color="#CCCCCC"> into this state</font><font color="#E5E5E5"> right meaning</font>

1287
00:59:41,190 --> 00:59:45,990
<font color="#CCCCCC">that if I have a sequence of operations</font>

1288
00:59:43,380 --> 00:59:47,940
which are all<font color="#E5E5E5"> things into</font><font color="#CCCCCC"> Boonton</font><font color="#E5E5E5"> XML</font>

1289
00:59:45,990 --> 00:59:49,680
<font color="#E5E5E5">how do I describe that they are</font>

1290
00:59:47,940 --> 00:59:53,280
<font color="#E5E5E5">dependent on</font><font color="#CCCCCC"> one another and this should</font>

1291
00:59:49,680 --> 00:59:54,720
<font color="#E5E5E5">be all rolled back yeah so now we're</font>

1292
00:59:53,280 --> 00:59:56,070
getting<font color="#CCCCCC"> into the philosophical domain</font>

1293
00:59:54,720 --> 00:59:59,100
but it's really important also<font color="#CCCCCC"> when you</font>

1294
00:59:56,070 --> 01:00:00,960
design your yang so this there's there's

1295
00:59:59,100 --> 01:00:03,900
a<font color="#E5E5E5"> there's like</font><font color="#CCCCCC"> a meta model Yang and the</font>

1296
01:00:00,960 --> 01:00:06,020
meta model says that your configuration

1297
01:00:03,900 --> 01:00:09,200
can at<font color="#CCCCCC"> any time</font><font color="#E5E5E5"> be</font>

1298
01:00:06,020 --> 01:00:12,050
presented as a set of instance data<font color="#E5E5E5"> so</font>

1299
01:00:09,200 --> 01:00:14,710
the yang language doesn't<font color="#E5E5E5"> allow you to</font>

1300
01:00:12,050 --> 01:00:18,440
describe<font color="#CCCCCC"> ordering</font><font color="#E5E5E5"> in general</font>

1301
01:00:14,710 --> 01:00:21,400
it describes a schema on which you can

1302
01:00:18,440 --> 01:00:23,270
<font color="#CCCCCC">operate now if you think</font><font color="#E5E5E5"> about leaf revs</font>

1303
01:00:21,400 --> 01:00:25,460
<font color="#E5E5E5">there's actually little bit of ordering</font>

1304
01:00:23,270 --> 01:00:28,759
in there you have to create for example

1305
01:00:25,460 --> 01:00:30,410
<font color="#E5E5E5">the target of a leaf</font><font color="#CCCCCC"> Rev before you can</font>

1306
01:00:28,760 --> 01:00:31,790
<font color="#E5E5E5">actually reference it so there's a</font>

1307
01:00:30,410 --> 01:00:34,040
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit but it's still</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

1308
01:00:31,790 --> 01:00:39,110
declarative domain<font color="#E5E5E5"> not in the procedural</font>

1309
01:00:34,040 --> 01:00:41,150
domain so so you<font color="#E5E5E5"> know you know by</font>

1310
01:00:39,110 --> 01:00:43,430
identification I work for Cisco<font color="#E5E5E5"> and if</font>

1311
01:00:41,150 --> 01:00:46,910
you think about<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know my our CLI and</font>

1312
01:00:43,430 --> 01:00:48,200
others<font color="#E5E5E5"> CL</font><font color="#CCCCCC"> others realize some corners of</font>

1313
01:00:46,910 --> 01:00:52,399
them still have ordering<font color="#E5E5E5"> to them and</font>

1314
01:00:48,200 --> 01:00:54,890
that is<font color="#E5E5E5"> actually parts of why yang can</font>

1315
01:00:52,400 --> 01:00:56,480
be painful<font color="#E5E5E5"> because not only that you're</font>

1316
01:00:54,890 --> 01:00:58,250
supposed to<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> send arbitrarily</font>

1317
01:00:56,480 --> 01:01:00,050
large and complicated chunks of<font color="#E5E5E5"> data</font>

1318
01:00:58,250 --> 01:01:02,300
into this and say<font color="#E5E5E5"> I want to turn up a</font>

1319
01:01:00,050 --> 01:01:04,790
<font color="#E5E5E5">verb and turn down this ipv6 interface</font>

1320
01:01:02,300 --> 01:01:08,240
and create three new star<font color="#CCCCCC"> together space</font>

1321
01:01:04,790 --> 01:01:12,140
in one go<font color="#E5E5E5"> in one single operation</font><font color="#CCCCCC"> alt</font>

1322
01:01:08,240 --> 01:01:13,419
<font color="#E5E5E5">roll it back fully if if one does it</font>

1323
01:01:12,140 --> 01:01:16,060
work that's a tall order

1324
01:01:13,420 --> 01:01:18,200
well<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> what the vendors need</font>

1325
01:01:16,060 --> 01:01:20,630
challenges<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> it right</font>

1326
01:01:18,200 --> 01:01:22,700
<font color="#E5E5E5">it's not possible to express this</font>

1327
01:01:20,630 --> 01:01:24,080
<font color="#E5E5E5">transitional thing now - you know it's</font>

1328
01:01:22,700 --> 01:01:26,240
in the protocol domain<font color="#E5E5E5"> so it's rather</font>

1329
01:01:24,080 --> 01:01:28,490
how the protocol<font color="#E5E5E5"> so in that comfort will</font>

1330
01:01:26,240 --> 01:01:32,839
talk about in 30 seconds<font color="#E5E5E5"> there's a very</font>

1331
01:01:28,490 --> 01:01:36,439
strict way<font color="#E5E5E5"> of doing those</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> all</font>

1332
01:01:32,840 --> 01:01:40,910
<font color="#E5E5E5">right how am I on time but on perfectly</font>

1333
01:01:36,440 --> 01:01:41,410
<font color="#E5E5E5">on time that's great</font><font color="#CCCCCC"> okay I'm</font><font color="#E5E5E5"> going to</font>

1334
01:01:40,910 --> 01:01:44,009
switch

1335
01:01:41,410 --> 01:01:44,009
presentation

