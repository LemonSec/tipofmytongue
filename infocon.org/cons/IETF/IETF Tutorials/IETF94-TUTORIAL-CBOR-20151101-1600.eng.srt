1
00:04:44,280 --> 00:04:49,109
that's<font color="#E5E5E5"> okay</font>

2
00:05:04,580 --> 00:05:19,460
see poor<font color="#CCCCCC"> lightning tutorial</font><font color="#E5E5E5"> and cast</font>

3
00:05:11,190 --> 00:05:23,100
<font color="#CCCCCC">bowmen those slides at this point here</font>

4
00:05:19,460 --> 00:05:24,479
<font color="#CCCCCC">so it</font><font color="#E5E5E5"> somehow magically turned on you</font>

5
00:05:23,100 --> 00:05:27,980
don't know why<font color="#CCCCCC"> it did me for five</font>

6
00:05:24,480 --> 00:05:27,980
<font color="#E5E5E5">minutes but then it's about it</font>

7
00:05:31,320 --> 00:05:39,780
so in this lighting tutorial I want<font color="#CCCCCC"> to</font>

8
00:05:35,580 --> 00:05:43,409
<font color="#E5E5E5">cover three questions one</font><font color="#CCCCCC"> is what is C</font>

9
00:05:39,780 --> 00:05:46,679
ball and when might you<font color="#CCCCCC"> want it</font>

10
00:05:43,410 --> 00:05:52,320
second is how<font color="#CCCCCC"> does Brooke and the third</font>

11
00:05:46,680 --> 00:05:56,460
one how do you work<font color="#E5E5E5"> with it</font><font color="#CCCCCC"> so let's</font>

12
00:05:52,320 --> 00:05:59,909
talk about<font color="#E5E5E5"> Chiba and I'm going to steal</font>

13
00:05:56,460 --> 00:06:21,419
some slides from David Crockford here

14
00:05:59,910 --> 00:06:23,160
who was the inventor of Jason<font color="#E5E5E5"> so so 30</font>

15
00:06:21,419 --> 00:06:26,780
years<font color="#CCCCCC"> ago</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 40 years</font><font color="#E5E5E5"> ago we were</font><font color="#CCCCCC"> all</font>

16
00:06:23,160 --> 00:06:29,190
<font color="#E5E5E5">writing our COBOL programs and</font>

17
00:06:26,780 --> 00:06:33,380
generating data formats completely<font color="#E5E5E5"> at</font>

18
00:06:29,190 --> 00:06:36,930
<font color="#E5E5E5">Hogg then we started integrating around</font>

19
00:06:33,380 --> 00:06:40,050
<font color="#CCCCCC">databases and then finally XML came</font>

20
00:06:36,930 --> 00:06:42,740
along and we had<font color="#CCCCCC"> a</font><font color="#E5E5E5"> common data format</font>

21
00:06:40,050 --> 00:06:45,750
that we used for interchanging

22
00:06:42,740 --> 00:06:48,600
information<font color="#CCCCCC"> Excel is originally a</font>

23
00:06:45,750 --> 00:06:51,930
document farmer but it can be used for

24
00:06:48,600 --> 00:06:55,440
<font color="#E5E5E5">interchanging data it's just a little</font>

25
00:06:51,930 --> 00:06:59,030
bit remote from what you would<font color="#E5E5E5"> want to</font>

26
00:06:55,440 --> 00:07:01,440
<font color="#E5E5E5">use</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally people came came up with</font>

27
00:06:59,030 --> 00:07:05,489
interchange formats that<font color="#E5E5E5"> are actually</font>

28
00:07:01,440 --> 00:07:06,810
based<font color="#CCCCCC"> on how programming languages would</font>

29
00:07:05,490 --> 00:07:12,290
want to represent

30
00:07:06,810 --> 00:07:17,810
data and this<font color="#CCCCCC"> is the thing that</font><font color="#E5E5E5"> Jason</font>

31
00:07:12,290 --> 00:07:21,950
<font color="#CCCCCC">finally</font><font color="#E5E5E5"> became</font><font color="#CCCCCC"> the most used in sense of</font>

32
00:07:17,810 --> 00:07:26,100
so the JSON format finder changing data

33
00:07:21,950 --> 00:07:29,300
is the basis<font color="#CCCCCC"> for a lot of work</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> now</font>

34
00:07:26,100 --> 00:07:32,220
both<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> ITF and and</font><font color="#E5E5E5"> generally in the</font>

35
00:07:29,300 --> 00:07:37,140
application<font color="#E5E5E5"> interoperation</font>

36
00:07:32,220 --> 00:07:42,950
environment now in the<font color="#CCCCCC"> ietf of course we</font>

37
00:07:37,140 --> 00:07:46,610
do our data forms this way so there is

38
00:07:42,950 --> 00:07:51,780
something<font color="#CCCCCC"> called TV's type length</font><font color="#E5E5E5"> value</font>

39
00:07:46,610 --> 00:07:54,720
representation<font color="#CCCCCC"> and in our</font><font color="#E5E5E5"> RFC's we write</font>

40
00:07:51,780 --> 00:07:56,820
this down in box notation box notation

41
00:07:54,720 --> 00:08:02,130
because we have all these boxes with

42
00:07:56,820 --> 00:08:05,880
<font color="#E5E5E5">there is things in them okay</font><font color="#CCCCCC"> this may</font>

43
00:08:02,130 --> 00:08:08,159
<font color="#CCCCCC">seem a little bit</font><font color="#E5E5E5"> archaic to some people</font>

44
00:08:05,880 --> 00:08:11,070
but it has<font color="#E5E5E5"> served as well so I'm not</font>

45
00:08:08,160 --> 00:08:14,820
trying<font color="#CCCCCC"> to belittle this this actually</font>

46
00:08:11,070 --> 00:08:18,810
<font color="#E5E5E5">works reasonably</font><font color="#CCCCCC"> well the main problem</font>

47
00:08:14,820 --> 00:08:22,169
<font color="#E5E5E5">is that every single new protocol comes</font>

48
00:08:18,810 --> 00:08:23,880
up<font color="#E5E5E5"> with a new</font><font color="#CCCCCC"> TV</font><font color="#E5E5E5"> format</font><font color="#CCCCCC"> and you have to</font>

49
00:08:22,169 --> 00:08:26,310
write all<font color="#E5E5E5"> these particles</font><font color="#CCCCCC"> and these</font>

50
00:08:23,880 --> 00:08:29,250
particles<font color="#E5E5E5"> have</font><font color="#CCCCCC"> bands</font><font color="#E5E5E5"> and they</font><font color="#CCCCCC"> lead to</font>

51
00:08:26,310 --> 00:08:32,700
<font color="#E5E5E5">security</font><font color="#CCCCCC"> problems and so on</font><font color="#E5E5E5"> so maybe</font>

52
00:08:29,250 --> 00:08:37,740
it's<font color="#E5E5E5"> time</font><font color="#CCCCCC"> to move on and</font><font color="#E5E5E5"> the obvious</font>

53
00:08:32,700 --> 00:08:42,150
next<font color="#CCCCCC"> step is on</font><font color="#E5E5E5"> this slide</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

54
00:08:37,740 --> 00:08:49,980
how<font color="#E5E5E5"> are your typical XML document looks</font>

55
00:08:42,150 --> 00:08:52,290
like after a few iterations<font color="#E5E5E5"> and so you</font>

56
00:08:49,980 --> 00:08:55,110
want to specify this because this of

57
00:08:52,290 --> 00:08:57,990
<font color="#CCCCCC">course</font><font color="#E5E5E5"> no longer can can be reasonably</font>

58
00:08:55,110 --> 00:09:04,530
described so we have another thing

59
00:08:57,990 --> 00:09:08,670
<font color="#E5E5E5">called the XSL XML schema language</font><font color="#CCCCCC"> xst</font>

60
00:09:04,530 --> 00:09:10,709
and<font color="#E5E5E5"> for reasons unknown to mankind</font><font color="#CCCCCC"> the</font>

61
00:09:08,670 --> 00:09:13,410
<font color="#CCCCCC">people who invented this decided to</font>

62
00:09:10,710 --> 00:09:16,500
write this<font color="#CCCCCC"> down</font><font color="#E5E5E5"> in XML</font><font color="#CCCCCC"> so it is as</font>

63
00:09:13,410 --> 00:09:18,660
unreadable as the the XML<font color="#CCCCCC"> there is</font>

64
00:09:16,500 --> 00:09:19,730
something called<font color="#E5E5E5"> relax ng that helps a</font>

65
00:09:18,660 --> 00:09:22,040
little bit

66
00:09:19,730 --> 00:09:24,740
but yeah<font color="#E5E5E5"> generally application</font>

67
00:09:22,040 --> 00:09:27,740
programmers<font color="#CCCCCC"> and the to</font><font color="#E5E5E5"> fund of this you</font>

68
00:09:24,740 --> 00:09:30,019
can make<font color="#E5E5E5"> it work the Java</font><font color="#CCCCCC"> environment</font>

69
00:09:27,740 --> 00:09:33,080
helps you with<font color="#E5E5E5"> that a lot there are</font>

70
00:09:30,019 --> 00:09:36,860
tools out there<font color="#E5E5E5"> and so on and so</font><font color="#CCCCCC"> on but</font>

71
00:09:33,080 --> 00:09:39,950
<font color="#E5E5E5">we in the last</font><font color="#CCCCCC"> 10 years people have been</font>

72
00:09:36,860 --> 00:09:43,130
convert converging on the<font color="#E5E5E5"> JavaScript</font>

73
00:09:39,950 --> 00:09:46,970
object notation<font color="#CCCCCC"> JSON and</font><font color="#E5E5E5"> the idea for</font>

74
00:09:43,130 --> 00:09:53,480
<font color="#CCCCCC">jason was that it is minimal that</font><font color="#E5E5E5"> it is</font>

75
00:09:46,970 --> 00:09:56,300
<font color="#E5E5E5">text-based</font><font color="#CCCCCC"> and in order to stop all</font>

76
00:09:53,480 --> 00:09:57,560
these<font color="#E5E5E5"> discussions when you define in</font>

77
00:09:56,300 --> 00:09:59,599
<font color="#CCCCCC">your data format</font><font color="#E5E5E5"> then there are</font><font color="#CCCCCC"> two</font>

78
00:09:57,560 --> 00:10:02,180
<font color="#E5E5E5">million people who who can do that as</font>

79
00:09:59,600 --> 00:10:03,500
well<font color="#CCCCCC"> and they all have an idea how to do</font>

80
00:10:02,180 --> 00:10:05,899
this<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they want</font><font color="#CCCCCC"> to do it slightly</font>

81
00:10:03,500 --> 00:10:10,160
differently<font color="#CCCCCC"> from you</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> stop these</font>

82
00:10:05,899 --> 00:10:13,850
discussions they were<font color="#E5E5E5"> referred</font><font color="#CCCCCC"> I decided</font>

83
00:10:10,160 --> 00:10:15,560
<font color="#E5E5E5">to put this as a subset of JavaScript so</font>

84
00:10:13,850 --> 00:10:18,980
he took the object notation of

85
00:10:15,560 --> 00:10:21,829
JavaScript<font color="#E5E5E5"> and used that as the</font>

86
00:10:18,980 --> 00:10:25,190
interchange<font color="#CCCCCC"> form of course that helps</font>

87
00:10:21,829 --> 00:10:27,050
with acceptance in the JavaScript

88
00:10:25,190 --> 00:10:29,930
community because it's a very natural

89
00:10:27,050 --> 00:10:34,370
data format for<font color="#CCCCCC"> them and for everybody</font>

90
00:10:29,930 --> 00:10:37,579
else<font color="#CCCCCC"> it just means you don't get a turn</font>

91
00:10:34,370 --> 00:10:40,010
<font color="#E5E5E5">and say how about changing this comma</font>

92
00:10:37,579 --> 00:10:42,800
into a semicolon and and putting<font color="#CCCCCC"> it in a</font>

93
00:10:40,010 --> 00:10:48,640
<font color="#E5E5E5">space there</font><font color="#CCCCCC"> no it's all defined in</font>

94
00:10:42,800 --> 00:10:53,260
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> so this was a pretty</font><font color="#E5E5E5"> quick</font>

95
00:10:48,640 --> 00:10:57,410
<font color="#E5E5E5">standard to establish now</font><font color="#CCCCCC"> javascript has</font>

96
00:10:53,260 --> 00:11:03,189
<font color="#CCCCCC">a certain data model</font><font color="#E5E5E5"> and in</font><font color="#CCCCCC"> javascript</font>

97
00:10:57,410 --> 00:11:06,680
you have strings<font color="#E5E5E5"> x-rays numbers mullions</font>

98
00:11:03,190 --> 00:11:08,870
something that's called objects which in

99
00:11:06,680 --> 00:11:14,359
most other languages<font color="#E5E5E5"> are called</font>

100
00:11:08,870 --> 00:11:16,850
dictionaries or tables arrays and the

101
00:11:14,360 --> 00:11:20,510
Navajo<font color="#E5E5E5"> so that's the data model and</font>

102
00:11:16,850 --> 00:11:28,040
that's the underlying<font color="#E5E5E5"> model of behind</font>

103
00:11:20,510 --> 00:11:30,319
all<font color="#CCCCCC"> JSON data items so an array in Jason</font>

104
00:11:28,040 --> 00:11:31,709
might look like<font color="#E5E5E5"> this of course</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

105
00:11:30,320 --> 00:11:37,140
have<font color="#CCCCCC"> nested arrays</font>

106
00:11:31,710 --> 00:11:42,450
and so on and a table<font color="#E5E5E5"> are called object</font>

107
00:11:37,140 --> 00:11:47,550
in<font color="#CCCCCC"> return might look like this is</font>

108
00:11:42,450 --> 00:11:51,470
<font color="#E5E5E5">familiar with</font><font color="#CCCCCC"> Jason in this room</font><font color="#E5E5E5"> okay so</font>

109
00:11:47,550 --> 00:11:54,329
it's a pretty way known format<font color="#E5E5E5"> by now</font>

110
00:11:51,470 --> 00:11:56,700
these<font color="#E5E5E5"> things are called objects because</font>

111
00:11:54,330 --> 00:12:00,480
in JavaScript they are called<font color="#CCCCCC"> objects</font>

112
00:11:56,700 --> 00:12:03,690
<font color="#CCCCCC">also</font><font color="#E5E5E5"> for a computer scientist these are</font>

113
00:12:00,480 --> 00:12:07,490
really<font color="#CCCCCC"> maps and that's the term I going</font>

114
00:12:03,690 --> 00:12:10,860
to use in the next twenty minutes<font color="#CCCCCC"> now</font>

115
00:12:07,490 --> 00:12:14,070
<font color="#E5E5E5">the nice</font><font color="#CCCCCC"> thing about Jason is you don't</font>

116
00:12:10,860 --> 00:12:17,640
need schema information<font color="#E5E5E5"> for ingesting</font>

117
00:12:14,070 --> 00:12:20,100
this information<font color="#CCCCCC"> now you</font><font color="#E5E5E5"> just point a</font>

118
00:12:17,640 --> 00:12:24,000
generic<font color="#CCCCCC"> puzzle at the JSON document and</font>

119
00:12:20,100 --> 00:12:27,899
it gives you this structure with arrays

120
00:12:24,000 --> 00:12:30,440
<font color="#CCCCCC">Maps</font><font color="#E5E5E5"> strings and so on as a programming</font>

121
00:12:27,899 --> 00:12:34,110
<font color="#E5E5E5">language object and you can</font><font color="#CCCCCC"> start</font>

122
00:12:30,440 --> 00:12:35,610
working<font color="#E5E5E5"> from that right away the way and</font>

123
00:12:34,110 --> 00:12:37,230
most programming languages<font color="#CCCCCC"> have</font>

124
00:12:35,610 --> 00:12:40,260
something like<font color="#E5E5E5"> boolean types number</font>

125
00:12:37,230 --> 00:12:43,350
<font color="#CCCCCC">drive string types a special and Oliver</font>

126
00:12:40,260 --> 00:12:50,760
you some form of maps and and some form

127
00:12:43,350 --> 00:12:55,560
of<font color="#CCCCCC"> race</font><font color="#E5E5E5"> when you define a JSON object</font>

128
00:12:50,760 --> 00:12:58,490
then you<font color="#CCCCCC"> often will want to</font><font color="#E5E5E5"> use what</font><font color="#CCCCCC"> is</font>

129
00:12:55,560 --> 00:13:03,050
called<font color="#CCCCCC"> object from maps in Jason and</font>

130
00:12:58,490 --> 00:13:08,930
structures so you like the example here

131
00:13:03,050 --> 00:13:11,670
you use the names in the map<font color="#E5E5E5"> just as</font>

132
00:13:08,930 --> 00:13:13,380
indication what what<font color="#E5E5E5"> the thing on the</font>

133
00:13:11,670 --> 00:13:16,709
<font color="#E5E5E5">right</font><font color="#CCCCCC"> side of the colon actually means</font>

134
00:13:13,380 --> 00:13:20,339
<font color="#E5E5E5">so you say would and then you give a</font>

135
00:13:16,709 --> 00:13:23,520
number<font color="#E5E5E5"> that is to be interpreted as with</font>

136
00:13:20,339 --> 00:13:27,360
so this<font color="#E5E5E5"> is the typical way in which you</font>

137
00:13:23,520 --> 00:13:34,709
do<font color="#CCCCCC"> structured information in Jason but</font>

138
00:13:27,360 --> 00:13:37,649
you also can just use<font color="#E5E5E5"> arrays and define</font>

139
00:13:34,709 --> 00:13:41,359
the<font color="#CCCCCC"> meaning of a</font><font color="#E5E5E5"> position in the array</font>

140
00:13:37,649 --> 00:13:43,800
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that I would call record usage</font>

141
00:13:41,360 --> 00:13:45,690
now one of the nice<font color="#CCCCCC"> things about this is</font>

142
00:13:43,800 --> 00:13:49,370
<font color="#CCCCCC">that</font>

143
00:13:45,690 --> 00:13:54,900
various structure in this map<font color="#CCCCCC"> approach</font>

144
00:13:49,370 --> 00:13:59,610
<font color="#E5E5E5">you can just add new keys</font><font color="#CCCCCC"> buy new</font><font color="#E5E5E5"> items</font>

145
00:13:54,900 --> 00:14:02,819
by defining<font color="#E5E5E5"> new keys and generally Jason</font>

146
00:13:59,610 --> 00:14:06,090
consuming applications just<font color="#CCCCCC"> ignore what</font>

147
00:14:02,820 --> 00:14:09,630
they don't understand<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is a way</font>

148
00:14:06,090 --> 00:14:13,140
to<font color="#E5E5E5"> do evolution</font><font color="#CCCCCC"> if you want to put new</font>

149
00:14:09,630 --> 00:14:15,810
information<font color="#E5E5E5"> into a data format that</font>

150
00:14:13,140 --> 00:14:21,600
<font color="#E5E5E5">applications</font><font color="#CCCCCC"> already understand</font><font color="#E5E5E5"> you just</font>

151
00:14:15,810 --> 00:14:24,060
use new key names<font color="#E5E5E5"> and then yeah the old</font>

152
00:14:21,600 --> 00:14:25,530
applications will still work<font color="#E5E5E5"> but</font><font color="#CCCCCC"> of</font>

153
00:14:24,060 --> 00:14:27,540
course they won't understand<font color="#E5E5E5"> the new</font>

154
00:14:25,530 --> 00:14:32,420
<font color="#E5E5E5">information that they didn't know work</font>

155
00:14:27,540 --> 00:14:33,990
out okay<font color="#E5E5E5"> so this is Jason and Jason is</font>

156
00:14:32,420 --> 00:14:38,490
<font color="#CCCCCC">well-established</font>

157
00:14:33,990 --> 00:14:41,780
works<font color="#E5E5E5"> very well</font><font color="#CCCCCC"> but it does have its</font>

158
00:14:38,490 --> 00:14:43,710
limitations<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is particularly</font>

159
00:14:41,780 --> 00:14:46,709
interesting in the constrained space

160
00:14:43,710 --> 00:14:50,520
<font color="#E5E5E5">where we do Internet of Things types of</font>

161
00:14:46,710 --> 00:14:53,280
applications and the the<font color="#E5E5E5"> biggest problem</font>

162
00:14:50,520 --> 00:14:56,310
really is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Jason doesn't</font><font color="#CCCCCC"> have any</font>

163
00:14:53,280 --> 00:15:00,870
idea of<font color="#E5E5E5"> primary data of course not</font>

164
00:14:56,310 --> 00:15:02,540
because it's a text father<font color="#CCCCCC"> so you you</font>

165
00:15:00,870 --> 00:15:10,350
wouldn't<font color="#E5E5E5"> have an easy way</font><font color="#CCCCCC"> to put in</font>

166
00:15:02,540 --> 00:15:12,689
binary<font color="#E5E5E5"> data but also it's</font><font color="#CCCCCC"> really a</font>

167
00:15:10,350 --> 00:15:14,190
format<font color="#CCCCCC"> that originally was meant for a</font>

168
00:15:12,690 --> 00:15:16,590
programming<font color="#CCCCCC"> language not for data</font>

169
00:15:14,190 --> 00:15:19,830
interchange so for instance all numbers

170
00:15:16,590 --> 00:15:23,400
are in decimal and it is actually

171
00:15:19,830 --> 00:15:25,590
surprisingly<font color="#E5E5E5"> hard to convert between</font>

172
00:15:23,400 --> 00:15:27,990
decimal and binary representations of

173
00:15:25,590 --> 00:15:29,670
numbers<font color="#E5E5E5"> not for integers numbers that's</font>

174
00:15:27,990 --> 00:15:32,640
trivial<font color="#E5E5E5"> but for floating for examples</font>

175
00:15:29,670 --> 00:15:35,579
<font color="#E5E5E5">it's it's really an art that has taken</font>

176
00:15:32,640 --> 00:15:38,130
about<font color="#CCCCCC"> a quarter century</font><font color="#E5E5E5"> until fully</font>

177
00:15:35,580 --> 00:15:40,530
understood it when you implement

178
00:15:38,130 --> 00:15:45,150
<font color="#E5E5E5">something in</font><font color="#CCCCCC"> Jason</font><font color="#E5E5E5"> then you usually have</font>

179
00:15:40,530 --> 00:15:47,160
to do copying<font color="#E5E5E5"> because strings</font><font color="#CCCCCC"> use quotes</font>

180
00:15:45,150 --> 00:15:49,890
around them<font color="#E5E5E5"> and if there is a quarter in</font>

181
00:15:47,160 --> 00:15:54,240
a string you have<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> escaping and so</font>

182
00:15:49,890 --> 00:15:56,390
on<font color="#E5E5E5"> and well if you somehow do want to</font>

183
00:15:54,240 --> 00:15:59,400
<font color="#E5E5E5">use binary then you use something like</font>

184
00:15:56,390 --> 00:16:04,800
base64 encoding<font color="#E5E5E5"> and that also requires</font>

185
00:15:59,400 --> 00:16:09,680
<font color="#CCCCCC">captain Jason was deliberately designed</font>

186
00:16:04,800 --> 00:16:13,500
<font color="#E5E5E5">not to be extensible so Jason is Jason</font>

187
00:16:09,680 --> 00:16:16,890
<font color="#CCCCCC">if you do want to have some additional</font>

188
00:16:13,500 --> 00:16:19,640
representation types<font color="#E5E5E5"> beyond the seven</font>

189
00:16:16,890 --> 00:16:22,949
that I showed string<font color="#CCCCCC"> number and so on</font>

190
00:16:19,640 --> 00:16:25,650
<font color="#CCCCCC">the</font><font color="#E5E5E5"> only thing you can do is use</font>

191
00:16:22,950 --> 00:16:30,060
something<font color="#E5E5E5"> like the structure format that</font>

192
00:16:25,650 --> 00:16:34,170
I showed and say<font color="#E5E5E5"> date</font><font color="#CCCCCC"> : and then put in</font>

193
00:16:30,060 --> 00:16:36,390
the<font color="#CCCCCC"> a font</font><font color="#E5E5E5"> so you cannot add new types</font>

194
00:16:34,170 --> 00:16:41,339
at the<font color="#CCCCCC"> representation level you only can</font>

195
00:16:36,390 --> 00:16:43,980
add limit the<font color="#E5E5E5"> semantics</font><font color="#CCCCCC"> 11 finally at</font>

196
00:16:41,340 --> 00:16:46,920
the implementation<font color="#CCCCCC"> level</font><font color="#E5E5E5"> we know know</font>

197
00:16:43,980 --> 00:16:49,380
about interoperability<font color="#E5E5E5"> issues in Jason</font>

198
00:16:46,920 --> 00:16:51,920
<font color="#CCCCCC">there's a</font><font color="#E5E5E5"> whole RFC that tells you how</font>

199
00:16:49,380 --> 00:16:56,939
to use<font color="#E5E5E5"> Jason in a way that minimizes</font>

200
00:16:51,920 --> 00:17:01,280
probability issues and the ugly thing

201
00:16:56,940 --> 00:17:04,760
here is<font color="#CCCCCC"> that this reduces</font><font color="#E5E5E5"> the</font>

202
00:17:01,280 --> 00:17:10,109
<font color="#E5E5E5">accessibility</font><font color="#CCCCCC"> you have when when using</font>

203
00:17:04,760 --> 00:17:13,920
<font color="#E5E5E5">Jason so for a long time I have used</font>

204
00:17:10,109 --> 00:17:16,760
this slide<font color="#E5E5E5"> here in my talks about data</font>

205
00:17:13,920 --> 00:17:19,320
formats the<font color="#CCCCCC"> XO many people actually have</font>

206
00:17:16,760 --> 00:17:22,379
at<font color="#E5E5E5"> some</font><font color="#CCCCCC"> point you</font><font color="#E5E5E5"> find something called</font>

207
00:17:19,319 --> 00:17:26,369
<font color="#CCCCCC">XE which is</font><font color="#E5E5E5"> their efficient exam</font>

208
00:17:22,380 --> 00:17:29,250
interchange<font color="#CCCCCC"> binary format for sending</font>

209
00:17:26,369 --> 00:17:35,280
<font color="#CCCCCC">around XML data</font><font color="#E5E5E5"> and we just had</font><font color="#CCCCCC"> no idea</font>

210
00:17:29,250 --> 00:17:38,850
<font color="#CCCCCC">how</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> this in Jason</font><font color="#E5E5E5"> so over time</font>

211
00:17:35,280 --> 00:17:42,870
Jason is<font color="#E5E5E5"> no more than 20</font><font color="#CCCCCC"> years old a lot</font>

212
00:17:38,850 --> 00:17:47,730
<font color="#E5E5E5">of people have defined their own binary</font>

213
00:17:42,870 --> 00:17:52,530
Jason's<font color="#E5E5E5"> and one one of them is called</font>

214
00:17:47,730 --> 00:17:54,330
<font color="#CCCCCC">besom and that's actually</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> most cited</font>

215
00:17:52,530 --> 00:17:56,850
wonder if somebody<font color="#E5E5E5"> thinks about binary</font>

216
00:17:54,330 --> 00:17:58,800
<font color="#CCCCCC">jason it they are going</font><font color="#E5E5E5"> to say reason</font>

217
00:17:56,850 --> 00:18:00,659
just<font color="#CCCCCC"> because the abbreviation is</font><font color="#E5E5E5"> so</font>

218
00:17:58,800 --> 00:18:03,600
great<font color="#E5E5E5"> not because</font><font color="#CCCCCC"> the format is so</font><font color="#E5E5E5"> great</font>

219
00:18:00,660 --> 00:18:06,420
the format is really<font color="#E5E5E5"> not so great but</font>

220
00:18:03,600 --> 00:18:09,330
<font color="#CCCCCC">reason is not the only</font><font color="#E5E5E5"> one of those that</font>

221
00:18:06,420 --> 00:18:11,980
there are dozens<font color="#E5E5E5"> of them they have they</font>

222
00:18:09,330 --> 00:18:15,560
all have different

223
00:18:11,980 --> 00:18:18,020
objectives so they know<font color="#E5E5E5"> they're not just</font>

224
00:18:15,560 --> 00:18:20,510
<font color="#E5E5E5">trying to do a binary Jason but they</font>

225
00:18:18,020 --> 00:18:23,510
have specific<font color="#CCCCCC"> ideas in mind</font><font color="#E5E5E5"> so for</font>

226
00:18:20,510 --> 00:18:28,280
<font color="#E5E5E5">instance</font><font color="#CCCCCC"> riesen was designed for</font>

227
00:18:23,510 --> 00:18:32,600
<font color="#CCCCCC">specific databases</font><font color="#E5E5E5"> MongoDB and its main</font>

228
00:18:28,280 --> 00:18:35,200
design<font color="#E5E5E5"> features</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can update data</font>

229
00:18:32,600 --> 00:18:38,659
at rest<font color="#CCCCCC"> so when you have a</font><font color="#E5E5E5"> recent</font>

230
00:18:35,200 --> 00:18:40,850
representation in your database<font color="#CCCCCC"> you</font>

231
00:18:38,660 --> 00:18:43,160
might want to<font color="#E5E5E5"> increment a number in the</font>

232
00:18:40,850 --> 00:18:45,199
<font color="#E5E5E5">middle of that representation and that</font>

233
00:18:43,160 --> 00:18:47,330
<font color="#E5E5E5">for instance means</font><font color="#CCCCCC"> Beeson cannot really</font>

234
00:18:45,200 --> 00:18:49,670
use variable length<font color="#E5E5E5"> numbers it has</font><font color="#CCCCCC"> to</font>

235
00:18:47,330 --> 00:18:53,290
use fixed<font color="#E5E5E5"> names</font><font color="#CCCCCC"> where numbers</font><font color="#E5E5E5"> so there's</font>

236
00:18:49,670 --> 00:18:57,830
this<font color="#CCCCCC"> updating case</font><font color="#E5E5E5"> works so you see that</font>

237
00:18:53,290 --> 00:19:01,210
<font color="#E5E5E5">different requirements different</font><font color="#CCCCCC"> areas</font>

238
00:18:57,830 --> 00:19:06,770
<font color="#E5E5E5">of communication</font><font color="#CCCCCC"> lead to different</font>

239
00:19:01,210 --> 00:19:09,140
binary<font color="#CCCCCC"> Jace's</font><font color="#E5E5E5"> and like 20</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> them around</font>

240
00:19:06,770 --> 00:19:10,720
<font color="#E5E5E5">now actually interesting the most of</font>

241
00:19:09,140 --> 00:19:13,670
them actually<font color="#E5E5E5"> more complex to implement</font>

242
00:19:10,720 --> 00:19:16,100
<font color="#E5E5E5">then Jason you would expect</font><font color="#CCCCCC"> when you go</font>

243
00:19:13,670 --> 00:19:20,660
to binary there's it's much easier<font color="#CCCCCC"> to</font>

244
00:19:16,100 --> 00:19:21,980
convert between the binary interchange

245
00:19:20,660 --> 00:19:23,810
format and the<font color="#CCCCCC"> binary representation</font>

246
00:19:21,980 --> 00:19:27,160
within<font color="#E5E5E5"> the computer</font><font color="#CCCCCC"> but that's not the</font>

247
00:19:23,810 --> 00:19:31,129
case<font color="#E5E5E5"> this performance out from complex</font>

248
00:19:27,160 --> 00:19:33,380
so when we started<font color="#E5E5E5"> looking at data</font>

249
00:19:31,130 --> 00:19:34,670
interchange formats in the<font color="#E5E5E5"> constrained</font>

250
00:19:33,380 --> 00:19:38,930
space<font color="#E5E5E5"> where we might have a</font>

251
00:19:34,670 --> 00:19:43,220
<font color="#E5E5E5">microcontroller with something like 128</font>

252
00:19:38,930 --> 00:19:46,400
kilobytes of code<font color="#CCCCCC"> we were</font><font color="#E5E5E5"> thinking about</font>

253
00:19:43,220 --> 00:19:51,560
<font color="#E5E5E5">a way</font><font color="#CCCCCC"> to get this simpler</font><font color="#E5E5E5"> want you to</font>

254
00:19:46,400 --> 00:19:54,530
build<font color="#E5E5E5"> something simple and focus on</font>

255
00:19:51,560 --> 00:19:57,800
small code size and compact data size

256
00:19:54,530 --> 00:20:01,220
but in<font color="#E5E5E5"> this order the implementation</font><font color="#CCCCCC"> was</font>

257
00:19:57,800 --> 00:20:03,830
supposed to<font color="#E5E5E5"> be simple so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

258
00:20:01,220 --> 00:20:07,030
actually<font color="#E5E5E5"> implement it in a small number</font>

259
00:20:03,830 --> 00:20:10,310
<font color="#E5E5E5">of codes and and my C implementation is</font>

260
00:20:07,030 --> 00:20:15,500
822 bytes of code but kilobytes not

261
00:20:10,310 --> 00:20:17,600
megabytes of code on an arm so this<font color="#E5E5E5"> was</font>

262
00:20:15,500 --> 00:20:23,600
one of<font color="#E5E5E5"> the objectives here to be useful</font>

263
00:20:17,600 --> 00:20:26,030
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> IOT space so the data size was</font>

264
00:20:23,600 --> 00:20:29,360
supposed to<font color="#E5E5E5"> be come</font>

265
00:20:26,030 --> 00:20:32,720
but not with extensive bitch fiddling

266
00:20:29,360 --> 00:20:35,889
which would have increased the<font color="#E5E5E5"> code size</font>

267
00:20:32,720 --> 00:20:39,950
again<font color="#CCCCCC"> but</font><font color="#E5E5E5"> just with a</font><font color="#CCCCCC"> very natural</font>

268
00:20:35,890 --> 00:20:42,100
<font color="#E5E5E5">mapping between the internal</font>

269
00:20:39,950 --> 00:20:50,690
representation types and the interchange

270
00:20:42,100 --> 00:20:52,780
types so three<font color="#CCCCCC"> years</font><font color="#E5E5E5"> ago three</font><font color="#CCCCCC"> years ago</font>

271
00:20:50,690 --> 00:20:55,280
<font color="#E5E5E5">we actually started writing this up and</font>

272
00:20:52,780 --> 00:20:58,039
came up with<font color="#E5E5E5"> something which is called</font>

273
00:20:55,280 --> 00:21:02,809
concise binary object representation<font color="#E5E5E5"> how</font>

274
00:20:58,039 --> 00:21:05,179
did we get<font color="#E5E5E5"> this title well this is Jason</font>

275
00:21:02,809 --> 00:21:07,129
<font color="#CCCCCC">but it's not a notation</font><font color="#E5E5E5"> it's</font>

276
00:21:05,179 --> 00:21:10,190
representation<font color="#CCCCCC"> so it's object little</font>

277
00:21:07,130 --> 00:21:12,950
baby<font color="#E5E5E5"> and it's not</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> and the two</font>

278
00:21:10,190 --> 00:21:16,520
most important actually woods here<font color="#E5E5E5"> it's</font>

279
00:21:12,950 --> 00:21:21,559
<font color="#CCCCCC">comic-con</font><font color="#E5E5E5"> size it's meant</font><font color="#CCCCCC"> to be simple</font>

280
00:21:16,520 --> 00:21:26,059
<font color="#E5E5E5">and so on and it's binary so how do you</font>

281
00:21:21,559 --> 00:21:26,570
pronounce this<font color="#CCCCCC"> c ball and what is the C</font>

282
00:21:26,059 --> 00:21:32,149
ball

283
00:21:26,570 --> 00:21:35,899
maybe something<font color="#E5E5E5"> like this okay so after</font>

284
00:21:32,150 --> 00:21:44,659
we defined this<font color="#E5E5E5"> we can finally fill in</font>

285
00:21:35,900 --> 00:21:47,659
this field in<font color="#E5E5E5"> cable so more specifically</font>

286
00:21:44,659 --> 00:21:50,780
the design codes<font color="#E5E5E5"> were being able to</font>

287
00:21:47,659 --> 00:21:57,039
encode<font color="#E5E5E5"> all the data</font><font color="#CCCCCC"> that we actually</font><font color="#E5E5E5"> use</font>

288
00:21:50,780 --> 00:22:00,168
in IOT and<font color="#E5E5E5"> generally</font><font color="#CCCCCC"> IETF pottekkatt</font>

289
00:21:57,039 --> 00:22:03,020
make a compact implementation<font color="#E5E5E5"> possible</font>

290
00:22:00,169 --> 00:22:05,210
that's<font color="#E5E5E5"> the concise them being able to</font>

291
00:22:03,020 --> 00:22:08,330
pass without a schema description that

292
00:22:05,210 --> 00:22:10,010
the same thing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> with Jason and that's</font>

293
00:22:08,330 --> 00:22:13,129
<font color="#E5E5E5">very different for instance</font><font color="#CCCCCC"> from XE</font>

294
00:22:10,010 --> 00:22:16,520
<font color="#E5E5E5">which you usually would I want to use</font>

295
00:22:13,130 --> 00:22:20,570
together<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a steamer description to</font>

296
00:22:16,520 --> 00:22:24,230
get compact representation this

297
00:22:20,570 --> 00:22:25,820
<font color="#CCCCCC">compactness thing is secondary to</font>

298
00:22:24,230 --> 00:22:28,750
implementation compact<font color="#E5E5E5"> nestled</font>

299
00:22:25,820 --> 00:22:32,000
simplicity was more important<font color="#CCCCCC"> to us than</font>

300
00:22:28,750 --> 00:22:34,309
getting the last bit<font color="#E5E5E5"> of efficiency out</font>

301
00:22:32,000 --> 00:22:37,280
of<font color="#CCCCCC"> it</font>

302
00:22:34,309 --> 00:22:40,129
our main to target areas were

303
00:22:37,280 --> 00:22:44,180
constraint nodes those IOT things<font color="#CCCCCC"> light</font>

304
00:22:40,130 --> 00:22:46,340
switches<font color="#E5E5E5"> and high volume applications so</font>

305
00:22:44,180 --> 00:22:49,570
applications where you<font color="#E5E5E5"> don't really want</font>

306
00:22:46,340 --> 00:22:54,530
to throw a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> code complexity at</font>

307
00:22:49,570 --> 00:22:56,570
consuming or producing the data<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

308
00:22:54,530 --> 00:22:59,960
not<font color="#E5E5E5"> hdf5</font><font color="#CCCCCC"> or something like that it's not</font>

309
00:22:56,570 --> 00:23:03,260
not optimized for sending around

310
00:22:59,960 --> 00:23:05,390
<font color="#CCCCCC">terabyte</font><font color="#E5E5E5"> size</font><font color="#CCCCCC"> data bases</font><font color="#E5E5E5"> but still you</font>

311
00:23:03,260 --> 00:23:08,660
might have high<font color="#CCCCCC"> volume applications we</font>

312
00:23:05,390 --> 00:23:12,260
are<font color="#E5E5E5"> sending</font><font color="#CCCCCC"> around lots</font><font color="#E5E5E5"> of for instance</font>

313
00:23:08,660 --> 00:23:17,270
<font color="#E5E5E5">sensor measurements and you want to do</font>

314
00:23:12,260 --> 00:23:21,620
this in an efficient way<font color="#E5E5E5"> we wanted to</font>

315
00:23:17,270 --> 00:23:25,870
support<font color="#E5E5E5"> all</font><font color="#CCCCCC"> JSON data types</font><font color="#E5E5E5"> with a</font>

316
00:23:21,620 --> 00:23:28,969
defined conversion<font color="#CCCCCC"> to and from Jason</font><font color="#E5E5E5"> and</font>

317
00:23:25,870 --> 00:23:29,689
finally we wanted the former to be

318
00:23:28,970 --> 00:23:31,760
extensible

319
00:23:29,690 --> 00:23:34,160
<font color="#E5E5E5">so we are taking a different stance here</font>

320
00:23:31,760 --> 00:23:37,460
from<font color="#CCCCCC"> Jason which is Liberatore not</font>

321
00:23:34,160 --> 00:23:39,980
trying to be extensible<font color="#CCCCCC"> but we think</font>

322
00:23:37,460 --> 00:23:45,680
<font color="#E5E5E5">protocol evolution usually requires some</font>

323
00:23:39,980 --> 00:23:49,550
extensibility<font color="#E5E5E5"> so pretty much two years</font>

324
00:23:45,680 --> 00:23:54,830
<font color="#E5E5E5">ago we finally got in RFC out of that</font>

325
00:23:49,550 --> 00:23:57,590
and people since have actually started

326
00:23:54,830 --> 00:24:00,710
implementing that and there is<font color="#E5E5E5"> a website</font>

327
00:23:57,590 --> 00:24:03,139
called see what at i/o<font color="#E5E5E5"> that actually</font>

328
00:24:00,710 --> 00:24:09,860
collects information<font color="#E5E5E5"> about what's out</font>

329
00:24:03,140 --> 00:24:12,110
there<font color="#CCCCCC"> in the implementation space ok so</font>

330
00:24:09,860 --> 00:24:16,550
let's talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about how it</font>

331
00:24:12,110 --> 00:24:19,729
<font color="#E5E5E5">works</font><font color="#CCCCCC"> now if I I was telling you how</font>

332
00:24:16,550 --> 00:24:22,159
<font color="#E5E5E5">Jason works</font><font color="#CCCCCC"> I would probably</font><font color="#E5E5E5"> use this</font>

333
00:24:19,730 --> 00:24:26,390
wonderful racetrack<font color="#E5E5E5"> diagrams syntax</font>

334
00:24:22,160 --> 00:24:33,220
diagrams<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so on but of course</font><font color="#CCCCCC"> SIBO is</font>

335
00:24:26,390 --> 00:24:35,420
<font color="#E5E5E5">binary so</font><font color="#CCCCCC"> SIBO instance looks like this</font>

336
00:24:33,220 --> 00:24:38,000
again<font color="#E5E5E5"> the point was to have a binary</font>

337
00:24:35,420 --> 00:24:43,940
interchange<font color="#E5E5E5"> performer this by the way is</font>

338
00:24:38,000 --> 00:24:49,190
a table out of<font color="#E5E5E5"> RFC 70 49 that shows this</font>

339
00:24:43,940 --> 00:24:51,120
piece of data in<font color="#E5E5E5"> various formats we</font>

340
00:24:49,190 --> 00:24:53,880
actually now also have

341
00:24:51,120 --> 00:24:57,000
see<font color="#CCCCCC"> seven three one</font><font color="#E5E5E5"> in that</font><font color="#CCCCCC"> table which</font>

342
00:24:53,880 --> 00:24:59,490
is<font color="#E5E5E5"> interesting very early</font><font color="#CCCCCC"> hour</font><font color="#E5E5E5"> see that</font>

343
00:24:57,000 --> 00:25:04,130
get<font color="#E5E5E5"> but most of the things right more</font>

344
00:24:59,490 --> 00:25:07,490
<font color="#E5E5E5">more</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that what has come in between</font>

345
00:25:04,130 --> 00:25:13,400
<font color="#E5E5E5">anyway so this</font><font color="#CCCCCC"> is how things look like</font>

346
00:25:07,490 --> 00:25:17,190
<font color="#E5E5E5">now</font><font color="#CCCCCC"> if you look more closely</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> item</font>

347
00:25:13,400 --> 00:25:20,100
has an initial bite that<font color="#CCCCCC"> tells you</font><font color="#E5E5E5"> what</font>

348
00:25:17,190 --> 00:25:23,880
it is<font color="#E5E5E5"> and this initial bite is divided</font>

349
00:25:20,100 --> 00:25:26,909
into<font color="#CCCCCC"> a three bit field and a 5-bit field</font>

350
00:25:23,880 --> 00:25:30,150
<font color="#E5E5E5">so the three red field tells you which</font>

351
00:25:26,910 --> 00:25:34,530
<font color="#CCCCCC">of these eight major tribes</font><font color="#E5E5E5"> you are</font>

352
00:25:30,150 --> 00:25:37,260
having<font color="#E5E5E5"> and the other five bits tell you</font>

353
00:25:34,530 --> 00:25:39,360
something like length information or if

354
00:25:37,260 --> 00:25:44,240
it's<font color="#E5E5E5"> just an integer it might be the</font>

355
00:25:39,360 --> 00:25:47,570
integer so the<font color="#E5E5E5"> major types are unsigned</font>

356
00:25:44,240 --> 00:25:50,550
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> positive and negative</font><font color="#CCCCCC"> integers</font>

357
00:25:47,570 --> 00:25:53,520
<font color="#E5E5E5">byte strings</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the binary</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> I</font>

358
00:25:50,550 --> 00:26:04,320
<font color="#E5E5E5">was talking about</font><font color="#CCCCCC"> text strings and text</font>

359
00:25:53,520 --> 00:26:06,690
in 2015<font color="#E5E5E5"> means utf8 arrays yes that would</font>

360
00:26:04,320 --> 00:26:10,200
<font color="#E5E5E5">have been one</font><font color="#CCCCCC"> way of doing</font><font color="#E5E5E5"> things or we</font>

361
00:26:06,690 --> 00:26:12,870
decided we would have all positive and

362
00:26:10,200 --> 00:26:15,860
<font color="#E5E5E5">zero numbers in the unsigned major type</font>

363
00:26:12,870 --> 00:26:19,260
and all negative integers in the other

364
00:26:15,860 --> 00:26:20,969
if<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> protocol buffers they have</font>

365
00:26:19,260 --> 00:26:23,700
<font color="#E5E5E5">this interesting thing called zigzag</font>

366
00:26:20,970 --> 00:26:27,270
<font color="#E5E5E5">encoding and this is essentially a way</font>

367
00:26:23,700 --> 00:26:30,679
<font color="#CCCCCC">to do a zigzag</font><font color="#E5E5E5"> encoding without having</font>

368
00:26:27,270 --> 00:26:33,270
to<font color="#E5E5E5"> shift around the data so we put the</font>

369
00:26:30,679 --> 00:26:36,150
least significant bit of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> zigzag</font>

370
00:26:33,270 --> 00:26:42,990
encoding in through the<font color="#E5E5E5"> major type and</font>

371
00:26:36,150 --> 00:26:47,220
and the rest is in<font color="#E5E5E5"> the right of you</font><font color="#CCCCCC"> so</font>

372
00:26:42,990 --> 00:26:49,679
we have<font color="#E5E5E5"> arrays we have maps</font><font color="#CCCCCC"> you have</font>

373
00:26:47,220 --> 00:26:54,570
something called<font color="#E5E5E5"> tags I get to this in a</font>

374
00:26:49,679 --> 00:26:59,490
minute<font color="#E5E5E5"> and the simple types like</font><font color="#CCCCCC"> bullion</font>

375
00:26:54,570 --> 00:27:03,120
snow<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> floating point they so</font>

376
00:26:59,490 --> 00:27:04,489
this is<font color="#CCCCCC"> actually certified for floating</font>

377
00:27:03,120 --> 00:27:07,049
<font color="#E5E5E5">convicts</font>

378
00:27:04,489 --> 00:27:10,409
so what could we<font color="#E5E5E5"> do that worthy is</font><font color="#CCCCCC"> five</font>

379
00:27:07,049 --> 00:27:13,649
bits<font color="#CCCCCC"> if those five bits are available</font>

380
00:27:10,409 --> 00:27:17,519
between<font color="#CCCCCC"> zero and</font><font color="#E5E5E5"> 23 it's an immediate</font>

381
00:27:13,649 --> 00:27:20,340
<font color="#CCCCCC">value so for</font><font color="#E5E5E5"> instance encoding the</font>

382
00:27:17,519 --> 00:27:24,600
number<font color="#CCCCCC"> zero gives you a</font><font color="#E5E5E5"> badge with a</font>

383
00:27:20,340 --> 00:27:26,668
zero in the major type and<font color="#E5E5E5"> a zero in the</font>

384
00:27:24,600 --> 00:27:31,230
immediate value<font color="#E5E5E5"> and that's all you need</font>

385
00:27:26,669 --> 00:27:35,429
<font color="#CCCCCC">for that</font><font color="#E5E5E5"> and they use between 24 and 27</font>

386
00:27:31,230 --> 00:27:38,909
mean that a few more<font color="#E5E5E5"> bites follow one</font>

387
00:27:35,429 --> 00:27:41,789
<font color="#E5E5E5">two four and eight</font><font color="#CCCCCC"> there are some</font>

388
00:27:38,909 --> 00:27:45,090
reserved<font color="#E5E5E5"> they use and finally we have a</font>

389
00:27:41,789 --> 00:27:49,440
swinging mechanism where if you<font color="#E5E5E5"> don't</font>

390
00:27:45,090 --> 00:27:52,499
know how many<font color="#E5E5E5"> data you will have this</font>

391
00:27:49,440 --> 00:27:58,070
indicates there will be<font color="#CCCCCC"> terminator at</font>

392
00:27:52,499 --> 00:27:58,070
the end of the sequence of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> hardest</font>

393
00:28:00,919 --> 00:28:08,309
yeah<font color="#E5E5E5"> so so this the immediate value or</font>

394
00:28:05,369 --> 00:28:09,928
the one<font color="#CCCCCC"> two four and eight bytes value</font>

395
00:28:08,309 --> 00:28:13,619
<font color="#E5E5E5">that follow generates an unsigned</font>

396
00:28:09,929 --> 00:28:17,389
integer<font color="#E5E5E5"> and</font><font color="#CCCCCC"> for major type 0 and</font><font color="#E5E5E5"> 1 that</font>

397
00:28:13,619 --> 00:28:22,220
<font color="#CCCCCC">is the integer</font><font color="#E5E5E5"> either directly or in</font>

398
00:28:17,389 --> 00:28:26,668
<font color="#CCCCCC">one's complement for 7 this is</font>

399
00:28:22,220 --> 00:28:29,820
numeration<font color="#E5E5E5"> type for things like true</font>

400
00:28:26,669 --> 00:28:32,690
false null or undefined<font color="#CCCCCC"> or it might</font>

401
00:28:29,820 --> 00:28:34,259
actually be<font color="#CCCCCC"> the</font><font color="#E5E5E5"> actually certified for</font>

402
00:28:32,690 --> 00:28:37,850
<font color="#E5E5E5">representation of a floating-point</font>

403
00:28:34,259 --> 00:28:41,669
number 4 times 2 and<font color="#E5E5E5"> treats the length</font>

404
00:28:37,850 --> 00:28:44,209
<font color="#E5E5E5">four types</font><font color="#CCCCCC"> length in bytes</font><font color="#E5E5E5"> and four</font>

405
00:28:41,669 --> 00:28:48,029
times four<font color="#CCCCCC"> and five it's a count in</font>

406
00:28:44,210 --> 00:28:50,549
items<font color="#E5E5E5"> or I can have some apps or it</font>

407
00:28:48,029 --> 00:28:56,190
might be<font color="#CCCCCC"> a tag</font><font color="#E5E5E5"> value it's come come to</font>

408
00:28:50,549 --> 00:28:59,429
that in a minute<font color="#CCCCCC"> so the major type seven</font>

409
00:28:56,190 --> 00:29:02,279
is doing these false true now and<font color="#E5E5E5"> if</font>

410
00:28:59,429 --> 00:29:06,389
they use and we<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> Ino registry if</font>

411
00:29:02,279 --> 00:29:11,639
we ever need more of them so far we have

412
00:29:06,389 --> 00:29:14,969
and if we<font color="#CCCCCC"> are using the values for</font><font color="#E5E5E5"> two</font>

413
00:29:11,639 --> 00:29:16,080
bytes<font color="#CCCCCC"> for</font><font color="#E5E5E5"> bytes or</font><font color="#CCCCCC"> eight bytes actually</font>

414
00:29:14,970 --> 00:29:19,350
the

415
00:29:16,080 --> 00:29:25,730
<font color="#E5E5E5">where you in there is a half a single or</font>

416
00:29:19,350 --> 00:29:29,100
a double<font color="#CCCCCC"> floating point and finally tags</font>

417
00:29:25,730 --> 00:29:32,190
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> an interesting idea so how do we</font>

418
00:29:29,100 --> 00:29:34,519
<font color="#E5E5E5">make this format extensible</font><font color="#CCCCCC"> we defined</font>

419
00:29:32,190 --> 00:29:39,169
<font color="#E5E5E5">one major type which allows you to</font>

420
00:29:34,519 --> 00:29:43,440
<font color="#E5E5E5">associate a</font><font color="#CCCCCC"> number with a value and</font>

421
00:29:39,169 --> 00:29:45,510
those<font color="#E5E5E5"> numbers might</font><font color="#CCCCCC"> where these are</font>

422
00:29:43,440 --> 00:29:47,700
registered values and they tell you what

423
00:29:45,510 --> 00:29:51,389
what did value actually is so for

424
00:29:47,700 --> 00:29:54,210
<font color="#E5E5E5">instance number</font><font color="#CCCCCC"> zero means</font><font color="#E5E5E5"> the value</font><font color="#CCCCCC"> is</font>

425
00:29:51,389 --> 00:29:58,500
<font color="#E5E5E5">a</font><font color="#CCCCCC"> text string</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> structure</font>

426
00:29:54,210 --> 00:30:02,029
according to<font color="#CCCCCC"> ISO 8601</font><font color="#E5E5E5"> in the RFC 359</font>

427
00:29:58,500 --> 00:30:05,990
<font color="#CCCCCC">form 1 means this is a unix time number</font>

428
00:30:02,029 --> 00:30:09,299
relative<font color="#E5E5E5"> number of seconds relative to</font>

429
00:30:05,990 --> 00:30:13,169
1970<font color="#CCCCCC"> january</font><font color="#E5E5E5"> 1st there are big numbers</font>

430
00:30:09,299 --> 00:30:15,330
<font color="#E5E5E5">we have decimal fractions big floats and</font>

431
00:30:13,169 --> 00:30:19,320
a few other<font color="#CCCCCC"> things that not everybody</font>

432
00:30:15,330 --> 00:30:24,600
needs<font color="#CCCCCC"> but</font><font color="#E5E5E5"> that are useful</font><font color="#CCCCCC"> to have</font>

433
00:30:19,320 --> 00:30:29,070
predefined<font color="#CCCCCC"> if you need them</font><font color="#E5E5E5"> and anyone</font>

434
00:30:24,600 --> 00:30:31,949
<font color="#CCCCCC">can go ahead and register tag</font>

435
00:30:29,070 --> 00:30:35,158
the<font color="#E5E5E5"> good numbers</font><font color="#CCCCCC"> this hot numbers</font>

436
00:30:31,950 --> 00:30:39,779
require a<font color="#E5E5E5"> little bit higher level</font><font color="#CCCCCC"> of</font>

437
00:30:35,159 --> 00:30:42,260
effort<font color="#CCCCCC"> but we have enough tags that we</font>

438
00:30:39,779 --> 00:30:46,139
will be able to<font color="#CCCCCC"> register</font><font color="#E5E5E5"> a few of them</font>

439
00:30:42,260 --> 00:30:50,190
so the Perl community for instance<font color="#CCCCCC"> have</font>

440
00:30:46,139 --> 00:30:54,870
immediately<font color="#E5E5E5"> picked this up and done a</font>

441
00:30:50,190 --> 00:30:59,070
few tags for products specific things

442
00:30:54,870 --> 00:31:02,149
like<font color="#CCCCCC"> Perl reference you Express to two</font>

443
00:30:59,070 --> 00:31:05,250
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> nine</font><font color="#CCCCCC"> eight in binary</font><font color="#E5E5E5"> it's our V</font>

444
00:31:02,149 --> 00:31:07,428
reference value which is what people

445
00:31:05,250 --> 00:31:11,880
<font color="#CCCCCC">think is</font><font color="#E5E5E5"> exactly though I</font><font color="#CCCCCC"> think this tag</font>

446
00:31:07,429 --> 00:31:14,250
should<font color="#E5E5E5"> be so tanks can be defined for</font>

447
00:31:11,880 --> 00:31:17,730
specific applications<font color="#E5E5E5"> and we might want</font>

448
00:31:14,250 --> 00:31:21,539
<font color="#CCCCCC">to define a</font><font color="#E5E5E5"> few more of these more</font>

449
00:31:17,730 --> 00:31:25,649
general<font color="#CCCCCC"> purpose</font><font color="#E5E5E5"> tags here</font><font color="#CCCCCC"> so for</font>

450
00:31:21,539 --> 00:31:27,669
<font color="#E5E5E5">instance</font><font color="#CCCCCC"> ASM on object identifiers tank</font>

451
00:31:25,649 --> 00:31:31,719
<font color="#E5E5E5">arrays</font>

452
00:31:27,669 --> 00:31:33,899
like you have in JavaScript<font color="#CCCCCC"> these are</font>

453
00:31:31,720 --> 00:31:39,870
<font color="#E5E5E5">examples for</font><font color="#CCCCCC"> four things we might be</font>

454
00:31:33,899 --> 00:31:42,908
defining<font color="#E5E5E5"> as</font><font color="#CCCCCC"> generic types so this means</font>

455
00:31:39,870 --> 00:31:44,439
<font color="#CCCCCC">well</font><font color="#E5E5E5"> you probably have to</font><font color="#CCCCCC"> eat to digest</font>

456
00:31:42,909 --> 00:31:47,620
this slide here and<font color="#E5E5E5"> a little bit more</font>

457
00:31:44,440 --> 00:31:52,360
time or read the equivalent<font color="#E5E5E5"> cable in RFC</font>

458
00:31:47,620 --> 00:31:58,299
7 0 for 9<font color="#E5E5E5"> but 0 is represented as 0 and</font>

459
00:31:52,360 --> 00:32:01,600
1 as<font color="#CCCCCC"> 123 years</font><font color="#E5E5E5"> 16</font><font color="#CCCCCC"> 17 hex</font><font color="#E5E5E5"> in the 24 as 18</font>

460
00:31:58,299 --> 00:32:03,399
18 hex because<font color="#CCCCCC"> whether</font><font color="#E5E5E5"> 70 24 is the</font>

461
00:32:01,600 --> 00:32:06,250
<font color="#E5E5E5">first one that</font><font color="#CCCCCC"> doesn't fit into the</font>

462
00:32:03,399 --> 00:32:10,330
<font color="#E5E5E5">immediate value in the first</font><font color="#CCCCCC"> byte so we</font>

463
00:32:06,250 --> 00:32:14,590
use a one byte extension and<font color="#CCCCCC"> write be</font><font color="#E5E5E5"> 18</font>

464
00:32:10,330 --> 00:32:18,520
in there<font color="#E5E5E5"> and 100 is 1864 in a thousand s</font>

465
00:32:14,590 --> 00:32:20,260
19<font color="#CCCCCC"> or 3/8 and the million is this</font><font color="#E5E5E5"> it's</font>

466
00:32:18,520 --> 00:32:24,340
pretty straightforward<font color="#E5E5E5"> and it's very</font>

467
00:32:20,260 --> 00:32:27,549
cool<font color="#E5E5E5"> decode now at some</font><font color="#CCCCCC"> point we are</font>

468
00:32:24,340 --> 00:32:30,129
<font color="#CCCCCC">leaving the</font><font color="#E5E5E5"> 64 bit space and then we are</font>

469
00:32:27,549 --> 00:32:38,309
going<font color="#CCCCCC"> to big numbers</font><font color="#E5E5E5"> which actually</font>

470
00:32:30,130 --> 00:32:41,260
contain a check<font color="#CCCCCC"> C 2 means C is 6 6 x</font><font color="#E5E5E5"> 2</font>

471
00:32:38,309 --> 00:32:44,980
so it's a tag with a value 2 and<font color="#CCCCCC"> this is</font>

472
00:32:41,260 --> 00:32:49,480
<font color="#CCCCCC">the</font><font color="#E5E5E5"> ID string that represents that are</font>

473
00:32:44,980 --> 00:32:55,809
you these<font color="#E5E5E5"> are negative numbers floating</font>

474
00:32:49,480 --> 00:32:58,299
points<font color="#E5E5E5"> infinity nan</font><font color="#CCCCCC"> minus infinity these</font>

475
00:32:55,809 --> 00:33:01,870
are all defined in<font color="#E5E5E5"> our ability 75 for so</font>

476
00:32:58,299 --> 00:33:04,860
it's easy<font color="#CCCCCC"> to transport them in in</font><font color="#E5E5E5"> C ball</font>

477
00:33:01,870 --> 00:33:07,928
there's no way to write<font color="#E5E5E5"> them in JSON</font>

478
00:33:04,860 --> 00:33:14,168
<font color="#E5E5E5">false true and</font><font color="#CCCCCC"> now our with these simple</font>

479
00:33:07,929 --> 00:33:21,370
<font color="#E5E5E5">types and then we have hex strings text</font>

480
00:33:14,169 --> 00:33:23,260
strings and arrays and maps all<font color="#CCCCCC"> the</font>

481
00:33:21,370 --> 00:33:25,870
interesting thing about<font color="#E5E5E5"> maps is you can</font>

482
00:33:23,260 --> 00:33:30,090
use any data<font color="#E5E5E5"> type as</font><font color="#CCCCCC"> a map peanut not</font>

483
00:33:25,870 --> 00:33:31,539
like in<font color="#E5E5E5"> JSON where your own abstracts so</font>

484
00:33:30,090 --> 00:33:34,720
this is

485
00:33:31,539 --> 00:33:36,309
how it works<font color="#CCCCCC"> again I</font><font color="#E5E5E5"> could talk hours</font>

486
00:33:34,720 --> 00:33:38,739
about that but I<font color="#CCCCCC"> think it should be</font>

487
00:33:36,309 --> 00:33:40,779
obvious<font color="#CCCCCC"> there</font><font color="#E5E5E5"> really is not more to it</font>

488
00:33:38,739 --> 00:33:45,809
<font color="#E5E5E5">so you could implement it from those</font>

489
00:33:40,779 --> 00:33:47,950
three<font color="#E5E5E5"> flat so how do you work with it</font>

490
00:33:45,809 --> 00:33:48,700
first<font color="#E5E5E5"> of all if you</font><font color="#CCCCCC"> just want</font><font color="#E5E5E5"> to play</font>

491
00:33:47,950 --> 00:33:51,190
<font color="#CCCCCC">around with</font><font color="#E5E5E5"> it</font>

492
00:33:48,700 --> 00:33:55,450
there is a seaboard<font color="#E5E5E5"> playground called</font>

493
00:33:51,190 --> 00:34:00,460
<font color="#CCCCCC">seaboard</font><font color="#E5E5E5"> and E and this essentially is</font>

494
00:33:55,450 --> 00:34:03,159
<font color="#CCCCCC">two fields where you can either put in</font>

495
00:34:00,460 --> 00:34:06,609
something<font color="#CCCCCC"> that looks</font><font color="#E5E5E5"> like Jason are put</font>

496
00:34:03,159 --> 00:34:09,460
in<font color="#CCCCCC"> bites and press these conversion</font>

497
00:34:06,609 --> 00:34:12,369
arrows and<font color="#E5E5E5"> it will convert between one</font>

498
00:34:09,460 --> 00:34:15,280
or<font color="#CCCCCC"> the other representation</font><font color="#E5E5E5"> so this is</font>

499
00:34:12,369 --> 00:34:19,089
for<font color="#E5E5E5"> playing around now the thing here</font>

500
00:34:15,280 --> 00:34:21,879
<font color="#E5E5E5">looks like Jason</font><font color="#CCCCCC"> but it's not limited to</font>

501
00:34:19,089 --> 00:34:24,429
Jason<font color="#E5E5E5"> we have to find a diagnostic</font>

502
00:34:21,879 --> 00:34:27,368
notation for<font color="#CCCCCC"> seagull so we have a common</font>

503
00:34:24,429 --> 00:34:29,799
way of target<font color="#E5E5E5"> to talk about</font><font color="#CCCCCC"> CEO of</font>

504
00:34:27,369 --> 00:34:33,700
values in text form<font color="#CCCCCC"> so we can represent</font>

505
00:34:29,799 --> 00:34:36,190
binary strings and tags and so on<font color="#E5E5E5"> in</font>

506
00:34:33,699 --> 00:34:40,168
this diagnostic notation for what you

507
00:34:36,190 --> 00:34:42,668
<font color="#E5E5E5">find in section 6 of the RFC</font>

508
00:34:40,168 --> 00:34:44,078
<font color="#E5E5E5">okay if you want to</font><font color="#CCCCCC"> do more</font><font color="#E5E5E5"> than playing</font>

509
00:34:42,668 --> 00:34:47,078
around with you probably want an

510
00:34:44,079 --> 00:34:51,399
implementation<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> couple more</font>

511
00:34:47,079 --> 00:34:54,429
than 25 implementations right now or a

512
00:34:51,399 --> 00:34:58,029
couple<font color="#E5E5E5"> languages like JavaScript PHP</font>

513
00:34:54,429 --> 00:35:00,819
<font color="#E5E5E5">cool rust rust community has been</font>

514
00:34:58,030 --> 00:35:04,599
particularly emphatic and picking up to

515
00:35:00,819 --> 00:35:09,549
see what I have no<font color="#E5E5E5"> idea why</font><font color="#CCCCCC"> Lua</font><font color="#E5E5E5"> Python</font>

516
00:35:04,599 --> 00:35:15,430
movie Erlang and<font color="#CCCCCC"> Alexia</font><font color="#E5E5E5"> Haskell c-sharp</font>

517
00:35:09,549 --> 00:35:21,420
Java C C++ and<font color="#E5E5E5"> D any of your favorite</font>

518
00:35:15,430 --> 00:35:22,839
<font color="#CCCCCC">programming language that's</font><font color="#E5E5E5"> missing</font><font color="#CCCCCC"> ok</font>

519
00:35:21,420 --> 00:35:27,309
are we

520
00:35:22,839 --> 00:35:30,069
well<font color="#CCCCCC"> then Java</font><font color="#E5E5E5"> so if you if you need</font><font color="#CCCCCC"> it</font>

521
00:35:27,309 --> 00:35:32,700
on<font color="#E5E5E5"> the Java Virtual Machine you</font><font color="#CCCCCC"> use the</font>

522
00:35:30,069 --> 00:35:40,480
<font color="#E5E5E5">Java implementation</font><font color="#CCCCCC"> and just link it to</font>

523
00:35:32,700 --> 00:35:44,049
whatever you<font color="#E5E5E5"> need it's just</font><font color="#CCCCCC"> a one call</font>

524
00:35:40,480 --> 00:35:49,799
can't quite<font color="#E5E5E5"> see this but yeah go go to</font>

525
00:35:44,049 --> 00:35:49,799
that list<font color="#CCCCCC"> yeah somebody hasn't released</font>

526
00:35:50,400 --> 00:35:57,039
it's<font color="#E5E5E5"> probably going</font><font color="#CCCCCC"> to be one line in</font>

527
00:35:52,900 --> 00:36:00,309
this<font color="#E5E5E5"> first thing okay</font>

528
00:35:57,039 --> 00:36:02,470
<font color="#E5E5E5">so this is if you are</font><font color="#CCCCCC"> using it like JSON</font>

529
00:36:00,309 --> 00:36:08,170
<font color="#E5E5E5">that's really all you need to know</font>

530
00:36:02,470 --> 00:36:12,819
because<font color="#E5E5E5"> it will just</font><font color="#CCCCCC"> work now when</font><font color="#E5E5E5"> we</font>

531
00:36:08,170 --> 00:36:15,640
write text based specifications<font color="#CCCCCC"> we have</font>

532
00:36:12,819 --> 00:36:17,440
something<font color="#E5E5E5"> called a B and F that allows</font>

533
00:36:15,640 --> 00:36:22,509
us<font color="#E5E5E5"> to write in a slightly more</font><font color="#CCCCCC"> formal</font>

534
00:36:17,440 --> 00:36:25,750
<font color="#E5E5E5">way what</font><font color="#CCCCCC"> pieces of text I actually meant</font>

535
00:36:22,510 --> 00:36:28,539
here and actually<font color="#CCCCCC"> if you look</font><font color="#E5E5E5"> into the</font>

536
00:36:25,750 --> 00:36:37,180
history of the RFC's<font color="#E5E5E5"> the first RFC that</font>

537
00:36:28,539 --> 00:36:39,220
uses a form<font color="#E5E5E5"> of</font><font color="#CCCCCC"> BNF is</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> c 14 from 1969</font>

538
00:36:37,180 --> 00:36:41,769
<font color="#CCCCCC">i think so</font>

539
00:36:39,220 --> 00:36:44,169
that has a very<font color="#CCCCCC"> long history if we</font>

540
00:36:41,769 --> 00:36:47,558
always have<font color="#E5E5E5"> described text based</font>

541
00:36:44,170 --> 00:36:51,339
protocols using something like<font color="#E5E5E5"> Vienna so</font>

542
00:36:47,559 --> 00:36:56,289
we thought<font color="#E5E5E5"> is there</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> something like</font>

543
00:36:51,339 --> 00:36:58,240
<font color="#E5E5E5">like a</font><font color="#CCCCCC"> PMF</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> jason like data Mart's</font>

544
00:36:56,289 --> 00:37:00,720
<font color="#E5E5E5">and of course</font><font color="#CCCCCC"> there is a ton of</font>

545
00:36:58,240 --> 00:37:02,919
proposals how to do<font color="#CCCCCC"> scheme</font><font color="#E5E5E5"> our languages</font>

546
00:37:00,720 --> 00:37:04,930
<font color="#CCCCCC">franchise you could use one of those</font>

547
00:37:02,920 --> 00:37:07,900
<font color="#E5E5E5">email languages and it would also</font>

548
00:37:04,930 --> 00:37:12,250
probably do the<font color="#CCCCCC"> same thing but we try to</font>

549
00:37:07,900 --> 00:37:15,309
limit this<font color="#CCCCCC"> to essentially the</font><font color="#E5E5E5"> function</font>

550
00:37:12,250 --> 00:37:17,910
of a<font color="#E5E5E5"> B and F and we actually copied the</font>

551
00:37:15,309 --> 00:37:22,059
syntax of a B<font color="#CCCCCC"> and F that's relatively</font>

552
00:37:17,910 --> 00:37:24,129
similar<font color="#E5E5E5"> but the theory behind it is</font>

553
00:37:22,059 --> 00:37:26,380
<font color="#E5E5E5">really the theory behind</font><font color="#CCCCCC"> relax</font><font color="#E5E5E5"> ng so if</font>

554
00:37:24,130 --> 00:37:28,960
you know<font color="#E5E5E5"> what what</font><font color="#CCCCCC"> relax</font><font color="#E5E5E5"> angeas but you</font>

555
00:37:26,380 --> 00:37:31,599
will<font color="#E5E5E5"> feel at home very</font><font color="#CCCCCC"> quickly yes</font>

556
00:37:28,960 --> 00:37:34,630
<font color="#E5E5E5">another proposal called JSON content</font>

557
00:37:31,599 --> 00:37:37,269
words where we stole the rest<font color="#E5E5E5"> off of the</font>

558
00:37:34,630 --> 00:37:39,970
<font color="#E5E5E5">great ideas</font><font color="#CCCCCC"> very little</font><font color="#E5E5E5"> of this is</font>

559
00:37:37,269 --> 00:37:42,910
innovation but I think we have put it

560
00:37:39,970 --> 00:37:45,459
together quite nicely and we now have

561
00:37:42,910 --> 00:37:49,328
<font color="#E5E5E5">something called a seaboard data</font>

562
00:37:45,460 --> 00:37:52,599
definition language that has<font color="#E5E5E5"> been stable</font>

563
00:37:49,329 --> 00:37:54,130
for<font color="#CCCCCC"> a year or so we are still adding a</font>

564
00:37:52,599 --> 00:37:56,380
few<font color="#E5E5E5"> things</font><font color="#CCCCCC"> to it</font>

565
00:37:54,130 --> 00:37:58,119
where we learn from<font color="#E5E5E5"> from the actual</font>

566
00:37:56,380 --> 00:38:00,400
<font color="#E5E5E5">specification work going on in</font><font color="#CCCCCC"> city</font>

567
00:37:58,119 --> 00:38:06,690
<font color="#CCCCCC">ideas that we want to</font><font color="#E5E5E5"> make a few</font>

568
00:38:00,400 --> 00:38:10,900
additions there also is a tool<font color="#CCCCCC"> available</font>

569
00:38:06,690 --> 00:38:15,160
this tool is<font color="#CCCCCC"> user friendly but only to</font>

570
00:38:10,900 --> 00:38:17,380
the users<font color="#CCCCCC"> that it likes</font><font color="#E5E5E5"> so well at</font>

571
00:38:15,160 --> 00:38:21,609
sometimes is a<font color="#E5E5E5"> little bit verbose in its</font>

572
00:38:17,380 --> 00:38:25,809
<font color="#E5E5E5">around messages but the main use</font><font color="#CCCCCC"> of this</font>

573
00:38:21,609 --> 00:38:28,299
tool is either to generate an example

574
00:38:25,809 --> 00:38:30,069
instance so you<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> CTD a</font>

575
00:38:28,299 --> 00:38:33,009
specification it's just<font color="#E5E5E5"> going to</font>

576
00:38:30,069 --> 00:38:34,990
generate a<font color="#E5E5E5"> random instance that is</font>

577
00:38:33,009 --> 00:38:37,720
conforming to that<font color="#E5E5E5"> that can be very</font>

578
00:38:34,990 --> 00:38:40,479
<font color="#E5E5E5">enlightening there's something</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> a</font>

579
00:38:37,720 --> 00:38:43,450
B and F<font color="#CCCCCC"> gen</font><font color="#E5E5E5"> if you are writing a</font><font color="#CCCCCC"> B and F</font>

580
00:38:40,480 --> 00:38:46,630
<font color="#E5E5E5">that</font><font color="#CCCCCC"> does the same thing</font><font color="#E5E5E5"> all you have a</font>

581
00:38:43,450 --> 00:38:48,220
way<font color="#E5E5E5"> to check an instance against the</font>

582
00:38:46,630 --> 00:38:50,950
definition and that's<font color="#E5E5E5"> what we use for</font>

583
00:38:48,220 --> 00:38:53,730
<font color="#E5E5E5">writing specifications we want to know</font>

584
00:38:50,950 --> 00:38:59,348
whether the examples we have in the

585
00:38:53,730 --> 00:39:02,819
document are conforming so this is an

586
00:38:59,349 --> 00:39:06,069
example how a large part of<font color="#E5E5E5"> RFC</font>

587
00:39:02,819 --> 00:39:08,589
<font color="#E5E5E5">7071 would have looked inside here</font>

588
00:39:06,069 --> 00:39:10,750
<font color="#E5E5E5">that's actually a JSON spec but because</font>

589
00:39:08,589 --> 00:39:15,519
<font color="#CCCCCC">jason is a subset of seaboard</font><font color="#E5E5E5"> of course</font>

590
00:39:10,750 --> 00:39:18,789
CD<font color="#CCCCCC"> DHN can describe</font><font color="#E5E5E5"> JC</font><font color="#CCCCCC"> document</font><font color="#E5E5E5"> so a</font>

591
00:39:15,519 --> 00:39:22,029
<font color="#CCCCCC">replication object is a map</font><font color="#E5E5E5"> with two</font>

592
00:39:18,789 --> 00:39:24,789
keys application and<font color="#E5E5E5"> reference where</font>

593
00:39:22,029 --> 00:39:28,569
application is a text value<font color="#E5E5E5"> and reputa</font>

594
00:39:24,789 --> 00:39:31,930
is an array of zero or more<font color="#CCCCCC"> refuge on</font>

595
00:39:28,569 --> 00:39:34,029
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ref</font><font color="#E5E5E5"> Neutron is a map that</font><font color="#CCCCCC"> has a</font>

596
00:39:31,930 --> 00:39:37,538
<font color="#E5E5E5">rattle it resonates an assertion that</font>

597
00:39:34,029 --> 00:39:40,089
<font color="#CCCCCC">detects a writer</font><font color="#E5E5E5"> and it'll take a rating</font>

598
00:39:37,539 --> 00:39:42,759
which well<font color="#E5E5E5"> okay we took a little bit but</font>

599
00:39:40,089 --> 00:39:44,670
you here is a<font color="#E5E5E5"> float16 assuming that you</font>

600
00:39:42,759 --> 00:39:47,200
don't<font color="#E5E5E5"> need a lot of accuracy on that</font>

601
00:39:44,670 --> 00:39:50,019
<font color="#CCCCCC">rating and then</font><font color="#E5E5E5"> it has a number of</font>

602
00:39:47,200 --> 00:39:53,500
optional components confidence normal

603
00:39:50,019 --> 00:39:56,740
writing<font color="#E5E5E5"> synthesized integer</font><font color="#CCCCCC"> generator</font>

604
00:39:53,500 --> 00:39:59,920
<font color="#CCCCCC">design set</font><font color="#E5E5E5"> inspired expires is an</font>

605
00:39:56,740 --> 00:40:02,258
unsigned<font color="#CCCCCC"> integer and then</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> some</font>

606
00:39:59,920 --> 00:40:04,660
extensibility so you can go ahead<font color="#E5E5E5"> and</font>

607
00:40:02,259 --> 00:40:07,740
you find additional<font color="#E5E5E5"> entries for that</font>

608
00:40:04,660 --> 00:40:10,330
<font color="#E5E5E5">matter so</font><font color="#CCCCCC"> that</font>

609
00:40:07,740 --> 00:40:17,500
previous I don't know<font color="#CCCCCC"> five</font><font color="#E5E5E5"> pages out</font><font color="#CCCCCC"> of</font>

610
00:40:10,330 --> 00:40:20,290
that RFC<font color="#CCCCCC"> so that is the</font><font color="#E5E5E5"> retroactive</font><font color="#CCCCCC"> we</font>

611
00:40:17,500 --> 00:40:22,660
have looked at<font color="#CCCCCC"> 7071 as an</font><font color="#E5E5E5"> example of a</font>

612
00:40:20,290 --> 00:40:26,440
<font color="#CCCCCC">document that has a not</font><font color="#E5E5E5"> completely</font>

613
00:40:22,660 --> 00:40:29,950
trivial<font color="#CCCCCC"> jason representation and it</font>

614
00:40:26,440 --> 00:40:32,500
takes days<font color="#CCCCCC"> to read the</font><font color="#E5E5E5"> description and</font>

615
00:40:29,950 --> 00:40:37,120
it takes five minutes to understand this

616
00:40:32,500 --> 00:40:39,390
stuff<font color="#E5E5E5"> and for for new development</font><font color="#CCCCCC"> we</font>

617
00:40:37,120 --> 00:40:43,150
have<font color="#E5E5E5"> an example here which is grass</font>

618
00:40:39,390 --> 00:40:48,819
grass<font color="#E5E5E5"> is the generic autonomic signaling</font>

619
00:40:43,150 --> 00:40:52,150
protocol used in autonomic management of

620
00:40:48,820 --> 00:40:54,220
systems and the grass people<font color="#E5E5E5"> for once</font>

621
00:40:52,150 --> 00:40:56,560
have decided not to invent another<font color="#CCCCCC"> tier</font>

622
00:40:54,220 --> 00:40:58,240
<font color="#CCCCCC">V</font><font color="#E5E5E5"> for with this that would of course be</font>

623
00:40:56,560 --> 00:41:01,390
<font color="#CCCCCC">the natural thing do you find another</font>

624
00:40:58,240 --> 00:41:04,419
tier<font color="#E5E5E5"> V but they have decided to just use</font>

625
00:41:01,390 --> 00:41:09,430
<font color="#E5E5E5">C bar and so for instance</font><font color="#CCCCCC"> the grass</font>

626
00:41:04,420 --> 00:41:15,070
message is an array with three elements

627
00:41:09,430 --> 00:41:17,589
<font color="#CCCCCC">a message type</font><font color="#E5E5E5"> a session ID</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> zero or</font>

628
00:41:15,070 --> 00:41:19,450
more options<font color="#E5E5E5"> so actually it's not three</font>

629
00:41:17,590 --> 00:41:23,020
<font color="#E5E5E5">elements it's</font><font color="#CCCCCC"> two to any number of</font>

630
00:41:19,450 --> 00:41:27,220
elements<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> message</font><font color="#CCCCCC"> tribe is 123</font>

631
00:41:23,020 --> 00:41:32,050
the session ideas very you up to 16

632
00:41:27,220 --> 00:41:34,000
million and<font color="#E5E5E5"> options are defined like</font>

633
00:41:32,050 --> 00:41:36,690
<font color="#CCCCCC">this so waiting time option is one of</font>

634
00:41:34,000 --> 00:41:40,180
the<font color="#E5E5E5"> options that is actually in array</font>

635
00:41:36,690 --> 00:41:43,740
containing the<font color="#E5E5E5"> Oh waiting value and the</font>

636
00:41:40,180 --> 00:41:45,310
<font color="#E5E5E5">waiting time which is a number in</font>

637
00:41:43,740 --> 00:41:47,470
milliseconds so it's<font color="#E5E5E5"> pretty</font>

638
00:41:45,310 --> 00:41:51,790
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> it looks a lot like a B</font>

639
00:41:47,470 --> 00:41:53,890
and F but it's the square brackets of

640
00:41:51,790 --> 00:41:59,580
course don't<font color="#E5E5E5"> need optional here but they</font>

641
00:41:53,890 --> 00:41:59,580
mean<font color="#E5E5E5"> array as in Jason</font>

642
00:42:00,840 --> 00:42:05,700
<font color="#E5E5E5">okay last slide where do you go from</font>

643
00:42:03,400 --> 00:42:10,630
<font color="#CCCCCC">here well first of all you go to our c7</font>

644
00:42:05,700 --> 00:42:14,319
<font color="#CCCCCC">t-49</font><font color="#E5E5E5"> then maybe you go to see what dot</font>

645
00:42:10,630 --> 00:42:15,880
<font color="#CCCCCC">io you might want to subscribe to the</font>

646
00:42:14,320 --> 00:42:20,839
<font color="#CCCCCC">Siebel mailing list which is relatively</font>

647
00:42:15,880 --> 00:42:24,890
quiet<font color="#E5E5E5"> but maybe a good</font><font color="#CCCCCC"> way to</font>

648
00:42:20,839 --> 00:42:27,799
find people<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk to the</font><font color="#CCCCCC"> CDD a locum</font>

649
00:42:24,890 --> 00:42:32,569
<font color="#CCCCCC">it is not an RFC</font><font color="#E5E5E5"> yet because we still</font>

650
00:42:27,799 --> 00:42:36,489
wanted or to<font color="#E5E5E5"> learn from specification</font>

651
00:42:32,569 --> 00:42:39,469
efforts but<font color="#E5E5E5"> we expect</font><font color="#CCCCCC"> to move</font><font color="#E5E5E5"> it forward</font>

652
00:42:36,489 --> 00:42:42,670
<font color="#CCCCCC">to to a working group and then to</font>

653
00:42:39,469 --> 00:42:46,279
<font color="#CCCCCC">stannous fact of human next year and</font>

654
00:42:42,670 --> 00:42:48,279
finally<font color="#E5E5E5"> the edge' team has asked me for</font>

655
00:42:46,279 --> 00:42:51,170
all of<font color="#E5E5E5"> you to go to this place here and</font>

656
00:42:48,279 --> 00:43:00,849
tell us how good this<font color="#CCCCCC"> like in tutorial</font>

657
00:42:51,170 --> 00:43:00,849
<font color="#CCCCCC">ask</font><font color="#E5E5E5"> questions thank you</font>

