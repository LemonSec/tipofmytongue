1
00:00:22,640 --> 00:00:25,640
yesterday

2
00:00:50,559 --> 00:00:53,559
is

3
00:01:10,000 --> 00:01:13,000
is

4
00:01:35,360 --> 00:01:38,360
uh

5
00:01:54,079 --> 00:01:56,880
all righty

6
00:01:58,640 --> 00:02:01,200
let's mute that so we don't get an echo

7
00:02:01,200 --> 00:02:02,560
so

8
00:02:02,560 --> 00:02:03,840
this is gonna be the first time that

9
00:02:03,840 --> 00:02:06,240
we're trying the new me echo thing

10
00:02:06,240 --> 00:02:07,600
the way you're supposed to get in and

11
00:02:07,600 --> 00:02:10,000
out of the queue is using your phone so

12
00:02:10,000 --> 00:02:12,239
there is a qr code that you're supposed

13
00:02:12,239 --> 00:02:14,239
to scan up there

14
00:02:14,239 --> 00:02:15,040
yep

15
00:02:15,040 --> 00:02:16,400
so if you think you might want to get in

16
00:02:16,400 --> 00:02:18,239
the queue you should probably scan the

17
00:02:18,239 --> 00:02:22,080
qr code so you can do stuff

18
00:02:22,080 --> 00:02:23,360
also

19
00:02:23,360 --> 00:02:25,520
we have some set of people who are going

20
00:02:25,520 --> 00:02:27,840
to be presenting from here and some set

21
00:02:27,840 --> 00:02:30,080
of people who are virtual

22
00:02:30,080 --> 00:02:32,239
the first presentation is going to be

23
00:02:32,239 --> 00:02:34,840
jeff houston and he is

24
00:02:34,840 --> 00:02:38,239
virtual we also have justin and eric

25
00:02:38,239 --> 00:02:40,560
fink who i think are in person

26
00:02:40,560 --> 00:02:42,879
is there a justin and eric think

27
00:02:42,879 --> 00:02:45,280
anywhere

28
00:02:46,319 --> 00:02:47,519
not yet

29
00:02:47,519 --> 00:02:49,040
well they'll show up

30
00:02:49,040 --> 00:02:51,519
um ignis do we have an ignis we have an

31
00:02:51,519 --> 00:02:53,280
eggness

32
00:02:53,280 --> 00:02:57,120
do we have a lenny

33
00:02:58,080 --> 00:02:59,920
no linear

34
00:02:59,920 --> 00:03:01,040
oh

35
00:03:01,040 --> 00:03:03,120
remote okay

36
00:03:03,120 --> 00:03:07,599
villain i saw a villain and tony lee is

37
00:03:07,599 --> 00:03:09,920
remote or virtual

38
00:03:09,920 --> 00:03:12,000
already

39
00:03:12,000 --> 00:03:14,319
oh excellent

40
00:03:14,319 --> 00:03:16,159
so

41
00:03:16,159 --> 00:03:19,680
um i guess we will just jump into it

42
00:03:19,680 --> 00:03:23,680
um in case you're confused this is iepg

43
00:03:23,680 --> 00:03:25,680
we're not actually an ietf working group

44
00:03:25,680 --> 00:03:27,360
but we're somehow vaguely affiliated

45
00:03:27,360 --> 00:03:29,200
with the ietf

46
00:03:29,200 --> 00:03:30,560
and

47
00:03:30,560 --> 00:03:33,360
let's do this thing so

48
00:03:33,360 --> 00:03:37,120
i will start sharing jeff's slides

49
00:03:37,120 --> 00:03:39,200
and then

50
00:03:39,200 --> 00:03:42,879
welcome and then i will hand the slide

51
00:03:42,879 --> 00:03:45,120
shareability to you

52
00:03:45,120 --> 00:03:48,080
or you can just ask me to change them

53
00:03:48,080 --> 00:03:50,480
for you but

54
00:03:50,480 --> 00:03:52,560
i think you should now have the ability

55
00:03:52,560 --> 00:03:56,080
to change slides yourself

56
00:03:56,080 --> 00:03:57,599
and i will try and let you know if there

57
00:03:57,599 --> 00:03:59,360
are people in the queue as well or

58
00:03:59,360 --> 00:04:02,319
anything like that so

59
00:04:02,319 --> 00:04:05,680
thanks warren um oh there we go um this

60
00:04:05,680 --> 00:04:07,840
is one of two talks this morning about

61
00:04:07,840 --> 00:04:10,400
ipv6 fragmentation and extension header

62
00:04:10,400 --> 00:04:11,519
behaviors

63
00:04:11,519 --> 00:04:13,280
why because there are a number of drafts

64
00:04:13,280 --> 00:04:14,640
out there that seem to think they're

65
00:04:14,640 --> 00:04:15,920
useful

66
00:04:15,920 --> 00:04:18,000
they're probably wrong

67
00:04:18,000 --> 00:04:21,120
let's go find out um

68
00:04:21,120 --> 00:04:23,280
uh you know all this no point repeating

69
00:04:23,280 --> 00:04:24,160
it

70
00:04:24,160 --> 00:04:26,000
uh you know all that too no point

71
00:04:26,000 --> 00:04:28,479
repeating that um

72
00:04:28,479 --> 00:04:30,880
you know the only thing v6 really really

73
00:04:30,880 --> 00:04:32,960
changed if you get down to it was just

74
00:04:32,960 --> 00:04:35,360
taking the fragmentation controls and

75
00:04:35,360 --> 00:04:37,840
basically setting the don't fragment bit

76
00:04:37,840 --> 00:04:39,680
to a hard on

77
00:04:39,680 --> 00:04:41,919
so the only agent that can fragment a

78
00:04:41,919 --> 00:04:44,000
packet is actually the source

79
00:04:44,000 --> 00:04:45,440
there's a kind of a philosophical

80
00:04:45,440 --> 00:04:47,040
question about whether you should ever

81
00:04:47,040 --> 00:04:49,840
see tcp fragments at all because after

82
00:04:49,840 --> 00:04:51,280
all if the source knows that it's going

83
00:04:51,280 --> 00:04:53,520
to fragment the packet in tcp why

84
00:04:53,520 --> 00:04:55,600
doesn't it just change the mss and not

85
00:04:55,600 --> 00:04:57,120
fragment but that's a different

86
00:04:57,120 --> 00:04:59,040
conversation

87
00:04:59,040 --> 00:05:01,440
let's assume we're fragmenting because

88
00:05:01,440 --> 00:05:04,479
you know we can so that's now shoved

89
00:05:04,479 --> 00:05:06,479
into an extension header

90
00:05:06,479 --> 00:05:08,800
now the last time this was looked that

91
00:05:08,800 --> 00:05:12,720
hard uh is rfc 7872 and that work was

92
00:05:12,720 --> 00:05:17,360
done in 2014 and 2015. hi jen i can see

93
00:05:17,360 --> 00:05:19,840
you there somewhere um and these are the

94
00:05:19,840 --> 00:05:21,919
results that they publish now the way

95
00:05:21,919 --> 00:05:25,440
they did this was actually sending the

96
00:05:25,440 --> 00:05:27,919
packet to the server

97
00:05:27,919 --> 00:05:30,080
and manipulating the packet and seeing

98
00:05:30,080 --> 00:05:32,320
if the server actually responded

99
00:05:32,320 --> 00:05:35,120
and what they found for fragmentation fh

100
00:05:35,120 --> 00:05:38,800
512 was bad i might any time you see

101
00:05:38,800 --> 00:05:41,199
loss rates are between 28 to 50 percent

102
00:05:41,199 --> 00:05:42,960
you know you know it's bad

103
00:05:42,960 --> 00:05:44,400
uh but it's a little more than that

104
00:05:44,400 --> 00:05:47,120
because they also tried uh destination

105
00:05:47,120 --> 00:05:49,280
options extension header and the hop by

106
00:05:49,280 --> 00:05:52,240
hop options extension header using if i

107
00:05:52,240 --> 00:05:56,000
read that rfc correctly a pad 8 option

108
00:05:56,000 --> 00:05:58,960
and oddly enough destination options

109
00:05:58,960 --> 00:06:01,520
seem to fare better and hop by hop was a

110
00:06:01,520 --> 00:06:02,880
little bit worse

111
00:06:02,880 --> 00:06:05,440
so just remember those numbers okay

112
00:06:05,440 --> 00:06:07,680
you're going to be a test later so

113
00:06:07,680 --> 00:06:08,639
got it

114
00:06:08,639 --> 00:06:11,120
thumbs up cool you've remembered it well

115
00:06:11,120 --> 00:06:14,160
done as i said we will test later um

116
00:06:14,160 --> 00:06:16,639
that's really really bad by the way

117
00:06:16,639 --> 00:06:17,759
you can't fragment with the

118
00:06:17,759 --> 00:06:19,520
fragmentation rate that high you just

119
00:06:19,520 --> 00:06:21,199
can't

120
00:06:21,199 --> 00:06:23,280
and so why

121
00:06:23,280 --> 00:06:24,800
well

122
00:06:24,800 --> 00:06:26,720
firewalls don't like fragments this is

123
00:06:26,720 --> 00:06:28,160
true

124
00:06:28,160 --> 00:06:31,759
the whole thing about ipv6 path mtu

125
00:06:31,759 --> 00:06:33,440
is kinda broken

126
00:06:33,440 --> 00:06:36,479
because it relies on icmp v6

127
00:06:36,479 --> 00:06:38,720
which you actually can't authenticate

128
00:06:38,720 --> 00:06:40,720
some random router off the street sends

129
00:06:40,720 --> 00:06:44,000
you an icmp v6 packet too big actually

130
00:06:44,000 --> 00:06:46,080
means that all as it did is it saw the

131
00:06:46,080 --> 00:06:49,599
packet pass by god knows why

132
00:06:49,599 --> 00:06:51,440
and so anyone can send you these

133
00:06:51,440 --> 00:06:54,000
messages why should you believe them

134
00:06:54,000 --> 00:06:55,599
and the other part of this issue is

135
00:06:55,599 --> 00:06:57,680
extension header chains are

136
00:06:57,680 --> 00:06:58,960
supported

137
00:06:58,960 --> 00:07:02,479
variably okay so there's a problem here

138
00:07:02,479 --> 00:07:04,400
the extension header handling because it

139
00:07:04,400 --> 00:07:05,759
sits between

140
00:07:05,759 --> 00:07:07,919
the v6 header and the sort of upper

141
00:07:07,919 --> 00:07:10,560
level protocol the transport header also

142
00:07:10,560 --> 00:07:12,880
means that some transport protocol aware

143
00:07:12,880 --> 00:07:14,840
processors with those switches or

144
00:07:14,840 --> 00:07:17,360
whatever find

145
00:07:17,360 --> 00:07:19,759
the wrong data at the wrong offset you

146
00:07:19,759 --> 00:07:22,880
know but why is network middleware

147
00:07:22,880 --> 00:07:24,960
looking at the upper level protocol

148
00:07:24,960 --> 00:07:26,800
header

149
00:07:26,800 --> 00:07:28,160
good question

150
00:07:28,160 --> 00:07:31,520
because it does because they all do

151
00:07:31,520 --> 00:07:34,720
why well they're just curious right

152
00:07:34,720 --> 00:07:37,280
simple curiosity yes

153
00:07:37,280 --> 00:07:39,280
or something else uh nevertheless

154
00:07:39,280 --> 00:07:40,800
there's a whole bunch of these units

155
00:07:40,800 --> 00:07:43,120
that if they find something instead at

156
00:07:43,120 --> 00:07:44,560
the upper level protocol they just drop

157
00:07:44,560 --> 00:07:45,759
it

158
00:07:45,759 --> 00:07:47,199
so

159
00:07:47,199 --> 00:07:49,680
the issue about 78.72

160
00:07:49,680 --> 00:07:51,520
is that it's not where the traffic goes

161
00:07:51,520 --> 00:07:53,599
it's the other way

162
00:07:53,599 --> 00:07:55,759
when you send packets to servers you

163
00:07:55,759 --> 00:07:58,000
tend to send short request packets and

164
00:07:58,000 --> 00:07:59,759
the server sends you large answer

165
00:07:59,759 --> 00:08:02,160
packets and so it's not the user to the

166
00:08:02,160 --> 00:08:04,319
server that really matters what really

167
00:08:04,319 --> 00:08:06,400
matters is actually the back path or the

168
00:08:06,400 --> 00:08:10,000
other path from the server to the user

169
00:08:10,000 --> 00:08:12,080
now this is much harder to actually

170
00:08:12,080 --> 00:08:14,400
construct as an experiment because

171
00:08:14,400 --> 00:08:16,400
although someone might control the alexa

172
00:08:16,400 --> 00:08:18,960
top 1 million servers it ain't me

173
00:08:18,960 --> 00:08:20,479
and so trying to get the servers to

174
00:08:20,479 --> 00:08:23,120
behave in odd ways is actually more

175
00:08:23,120 --> 00:08:25,680
challenging than you think

176
00:08:25,680 --> 00:08:27,599
so what we did

177
00:08:27,599 --> 00:08:30,560
was actually try and take conventional

178
00:08:30,560 --> 00:08:33,360
servers dns and web

179
00:08:33,360 --> 00:08:36,320
and actually write a packet wrangler or

180
00:08:36,320 --> 00:08:39,360
to be more accurate a packet mangler

181
00:08:39,360 --> 00:08:41,519
that takes a conventional packet from a

182
00:08:41,519 --> 00:08:43,919
dns server or web server and actually

183
00:08:43,919 --> 00:08:45,519
fragment it

184
00:08:45,519 --> 00:08:47,519
and then send it onward to its

185
00:08:47,519 --> 00:08:51,040
destination as a client however right

186
00:08:51,040 --> 00:08:53,519
and to make this work of course

187
00:08:53,519 --> 00:08:55,279
um

188
00:08:55,279 --> 00:08:57,200
well actually we did it sorry i've got a

189
00:08:57,200 --> 00:08:58,800
lot of the slides the wrong way we did

190
00:08:58,800 --> 00:09:00,959
this in 2017

191
00:09:00,959 --> 00:09:03,760
and as you recall the 28 drop rate in

192
00:09:03,760 --> 00:09:07,680
78.72 when we did this in a

193
00:09:07,680 --> 00:09:10,399
v6 measurement platform that uses online

194
00:09:10,399 --> 00:09:12,880
ads in other words the text eyeballs

195
00:09:12,880 --> 00:09:15,200
small number of servers massive number

196
00:09:15,200 --> 00:09:16,800
of clients

197
00:09:16,800 --> 00:09:19,680
we found the fragmentation loss rate was

198
00:09:19,680 --> 00:09:23,120
marginally better 21 drop rate

199
00:09:23,120 --> 00:09:24,080
um

200
00:09:24,080 --> 00:09:26,720
fair enough

201
00:09:26,720 --> 00:09:30,000
fair enough um

202
00:09:30,320 --> 00:09:33,279
come back again last year

203
00:09:33,279 --> 00:09:36,399
reworked the same experiment but

204
00:09:36,399 --> 00:09:38,880
we kind of redid that pack at mangala a

205
00:09:38,880 --> 00:09:40,480
little bit

206
00:09:40,480 --> 00:09:42,399
the same kind of technique though we're

207
00:09:42,399 --> 00:09:44,640
sitting in the middle of the tcp session

208
00:09:44,640 --> 00:09:46,320
close to the server

209
00:09:46,320 --> 00:09:48,000
we shove all the outgoing packets

210
00:09:48,000 --> 00:09:50,640
through this dedicated middle box and

211
00:09:50,640 --> 00:09:53,200
we're inside a tcp session

212
00:09:53,200 --> 00:09:55,360
so we can detect

213
00:09:55,360 --> 00:09:58,320
if the client didn't receive the packet

214
00:09:58,320 --> 00:10:00,640
because the client won't hack it

215
00:10:00,640 --> 00:10:03,600
and so we detect a hung tcp session by

216
00:10:03,600 --> 00:10:05,440
the fact that the act just didn't happen

217
00:10:05,440 --> 00:10:07,519
and we can't proceed onwards

218
00:10:07,519 --> 00:10:09,360
uh the other thing we did were kind of

219
00:10:09,360 --> 00:10:10,800
curious

220
00:10:10,800 --> 00:10:13,920
is we were wondering if because we were

221
00:10:13,920 --> 00:10:16,560
using large initial fragments

222
00:10:16,560 --> 00:10:18,240
it was actually a subtly different

223
00:10:18,240 --> 00:10:20,160
problem because this is the first big

224
00:10:20,160 --> 00:10:22,000
packet sent from the server to the

225
00:10:22,000 --> 00:10:22,880
client

226
00:10:22,880 --> 00:10:24,880
and so we decided to test a range of

227
00:10:24,880 --> 00:10:27,760
initial fragment sizes between 12

228
00:10:27,760 --> 00:10:30,959
and 14 16 bytes varying them by strides

229
00:10:30,959 --> 00:10:33,760
of eight we perform this as an ongoing

230
00:10:33,760 --> 00:10:34,959
experiment

231
00:10:34,959 --> 00:10:37,440
um there's a slide about how this is not

232
00:10:37,440 --> 00:10:40,000
as easy as you think uh we're using lib

233
00:10:40,000 --> 00:10:42,399
pcap to actually snap and send packets

234
00:10:42,399 --> 00:10:44,800
this is great lid pcap has no buffer

235
00:10:44,800 --> 00:10:46,000
space

236
00:10:46,000 --> 00:10:48,320
and so the problem is you've got exactly

237
00:10:48,320 --> 00:10:50,560
one pack of time to get something done

238
00:10:50,560 --> 00:10:53,200
uh that doesn't work so we spend a lot

239
00:10:53,200 --> 00:10:55,120
of time writing shared memory systems

240
00:10:55,120 --> 00:10:57,839
that implement a ring buffer for both

241
00:10:57,839 --> 00:10:59,839
incoming and outgoing packets and

242
00:10:59,839 --> 00:11:01,920
actually did a v6 nap to make all this

243
00:11:01,920 --> 00:11:04,160
work the server is actually a normal old

244
00:11:04,160 --> 00:11:06,480
server uh the client we have no control

245
00:11:06,480 --> 00:11:08,880
over and the wrangler has all this muck

246
00:11:08,880 --> 00:11:11,120
inside to actually make it happen

247
00:11:11,120 --> 00:11:12,160
so

248
00:11:12,160 --> 00:11:15,279
what did we see now the blue line is the

249
00:11:15,279 --> 00:11:16,640
loss rate

250
00:11:16,640 --> 00:11:19,040
averaged for the world and it's no

251
00:11:19,040 --> 00:11:22,160
longer 28 it's no longer 21

252
00:11:22,160 --> 00:11:26,079
and up until you know a few days ago

253
00:11:26,079 --> 00:11:29,360
uh it's coming down again to around 7.5

254
00:11:29,360 --> 00:11:31,200
so apart from the fact we stuffed up the

255
00:11:31,200 --> 00:11:33,760
experiment over the new year um

256
00:11:33,760 --> 00:11:34,880
it's not

257
00:11:34,880 --> 00:11:38,480
bad it's not brilliant but it's 7.5

258
00:11:38,480 --> 00:11:40,480
it's certainly not bad

259
00:11:40,480 --> 00:11:42,399
the map is kind of interesting as to

260
00:11:42,399 --> 00:11:43,839
where this happens

261
00:11:43,839 --> 00:11:46,720
the green is good the red is super bad

262
00:11:46,720 --> 00:11:48,880
uh the white is there's not enough v6 to

263
00:11:48,880 --> 00:11:52,079
even measure at the time

264
00:11:52,160 --> 00:11:54,000
odd graph

265
00:11:54,000 --> 00:11:56,160
but if you think about it the folks who

266
00:11:56,160 --> 00:11:58,800
are doing super good like india

267
00:11:58,800 --> 00:12:00,639
are actually the more recent v6

268
00:12:00,639 --> 00:12:02,240
deployments

269
00:12:02,240 --> 00:12:04,560
so it seems to suggest

270
00:12:04,560 --> 00:12:06,800
that this fragmentation drop rate is

271
00:12:06,800 --> 00:12:08,160
network

272
00:12:08,160 --> 00:12:09,519
not host

273
00:12:09,519 --> 00:12:11,040
it's not the destination that's doing

274
00:12:11,040 --> 00:12:13,040
them now i'm just dropping it it's

275
00:12:13,040 --> 00:12:15,519
actually the network itself and the more

276
00:12:15,519 --> 00:12:17,920
recent deployments using whatever more

277
00:12:17,920 --> 00:12:19,760
recent equipment is out there

278
00:12:19,760 --> 00:12:21,920
tend to do a whole lot better

279
00:12:21,920 --> 00:12:24,560
than the initial deployments which are

280
00:12:24,560 --> 00:12:26,880
sort of more conservative like france

281
00:12:26,880 --> 00:12:29,519
for example um

282
00:12:29,519 --> 00:12:31,200
and i think even the american ones kind

283
00:12:31,200 --> 00:12:32,720
of mixed

284
00:12:32,720 --> 00:12:34,560
whereas you know

285
00:12:34,560 --> 00:12:37,120
like i said india and around the middle

286
00:12:37,120 --> 00:12:39,040
east a lot better in terms of percentage

287
00:12:39,040 --> 00:12:41,040
of drop rate

288
00:12:41,040 --> 00:12:42,000
okay

289
00:12:42,000 --> 00:12:43,839
big surprise

290
00:12:43,839 --> 00:12:47,120
this is the drop rate by packet size

291
00:12:47,120 --> 00:12:48,720
you know seven percent

292
00:12:48,720 --> 00:12:50,720
in this case nine percent nine percent

293
00:12:50,720 --> 00:12:52,720
blah blah blah blah blah as soon as you

294
00:12:52,720 --> 00:12:54,399
get to 1360

295
00:12:54,399 --> 00:12:57,120
it jumps up

296
00:12:58,160 --> 00:13:00,800
no idea why

297
00:13:00,800 --> 00:13:03,760
but larger initial fragments

298
00:13:03,760 --> 00:13:06,079
tend to be a lot worse

299
00:13:06,079 --> 00:13:07,440
a lot worse

300
00:13:07,440 --> 00:13:09,680
and i kind of broke this up by region in

301
00:13:09,680 --> 00:13:10,959
the americas

302
00:13:10,959 --> 00:13:13,279
it's there but less so in europe it's

303
00:13:13,279 --> 00:13:15,200
strongly there

304
00:13:15,200 --> 00:13:17,519
and in asia it's you know a definite

305
00:13:17,519 --> 00:13:18,959
signature

306
00:13:18,959 --> 00:13:21,519
why if you put the initial fragment size

307
00:13:21,519 --> 00:13:22,480
high

308
00:13:22,480 --> 00:13:26,399
is the drop rate dramatically higher

309
00:13:26,560 --> 00:13:28,480
um

310
00:13:28,480 --> 00:13:30,480
varies by provider

311
00:13:30,480 --> 00:13:32,959
if you're in telus in canada

312
00:13:32,959 --> 00:13:35,600
nothing nothing gets through it's a 95

313
00:13:35,600 --> 00:13:38,160
drop rate well done guys there is no

314
00:13:38,160 --> 00:13:40,560
such thing as a fragment in telus they

315
00:13:40,560 --> 00:13:43,600
just get dropped whereas barty um and

316
00:13:43,600 --> 00:13:45,760
don't forget that sort of anomaly is is

317
00:13:45,760 --> 00:13:48,639
us not them uh party airtel in india

318
00:13:48,639 --> 00:13:50,240
which is a massive deployment few

319
00:13:50,240 --> 00:13:52,720
hundred million users uh the drop rate's

320
00:13:52,720 --> 00:13:54,480
around four percent so

321
00:13:54,480 --> 00:13:56,480
they're doing a whole lot better

322
00:13:56,480 --> 00:13:58,320
than the world average i mean they're

323
00:13:58,320 --> 00:14:00,959
doing a whole lot better than most folks

324
00:14:00,959 --> 00:14:05,199
so again why is this happening um

325
00:14:05,199 --> 00:14:07,360
local security policies slow path

326
00:14:07,360 --> 00:14:09,279
processing you know you can read this as

327
00:14:09,279 --> 00:14:10,800
well as i can

328
00:14:10,800 --> 00:14:13,040
um

329
00:14:13,600 --> 00:14:15,760
is this fragmentation drop because we're

330
00:14:15,760 --> 00:14:18,160
fragmenting is because the extension

331
00:14:18,160 --> 00:14:20,160
header in the packet exists and it's

332
00:14:20,160 --> 00:14:22,560
dropping because of that so the first

333
00:14:22,560 --> 00:14:24,560
way we tried to answer this was actually

334
00:14:24,560 --> 00:14:27,199
bring up the null header

335
00:14:27,199 --> 00:14:28,880
i'm moving really quickly so i can see

336
00:14:28,880 --> 00:14:30,320
you at the microphone but i'm going to

337
00:14:30,320 --> 00:14:31,600
get through this and then you have your

338
00:14:31,600 --> 00:14:33,920
chance to speak so up to you but i will

339
00:14:33,920 --> 00:14:36,000
go very quickly

340
00:14:36,000 --> 00:14:38,000
this is the atomic header drop rate

341
00:14:38,000 --> 00:14:41,440
which is the null fragment

342
00:14:42,320 --> 00:14:44,800
it's in red and as you see

343
00:14:44,800 --> 00:14:47,600
there's a component of drop which is

344
00:14:47,600 --> 00:14:50,480
this is a fragment i don't like it

345
00:14:50,480 --> 00:14:52,000
and there's a component of drop that

346
00:14:52,000 --> 00:14:54,240
says you put in a fragment header even

347
00:14:54,240 --> 00:14:56,000
though it's not a functional fragment i

348
00:14:56,000 --> 00:14:57,279
don't like it

349
00:14:57,279 --> 00:14:59,199
and the atomic fragment drop rate

350
00:14:59,199 --> 00:15:01,920
certainly is high six percent but it's

351
00:15:01,920 --> 00:15:03,519
lower than the actual substantive

352
00:15:03,519 --> 00:15:05,199
fragment drop rate

353
00:15:05,199 --> 00:15:06,800
um

354
00:15:06,800 --> 00:15:09,760
it varies provided by provider uh in

355
00:15:09,760 --> 00:15:11,760
germany the atomic fragment drop rate's

356
00:15:11,760 --> 00:15:14,480
constant that's bizarre and higher than

357
00:15:14,480 --> 00:15:16,560
the normal fragment drop rate

358
00:15:16,560 --> 00:15:19,199
in italy it's almost non-existent

359
00:15:19,199 --> 00:15:21,279
whereas the fragment drop rate is high

360
00:15:21,279 --> 00:15:23,040
and in australia the fragment drop rate

361
00:15:23,040 --> 00:15:24,880
when we started measuring it is higher

362
00:15:24,880 --> 00:15:26,399
than normal fragments the atomic

363
00:15:26,399 --> 00:15:29,440
fragment drop rate's higher

364
00:15:29,920 --> 00:15:32,399
this shouldn't be happening you know why

365
00:15:32,399 --> 00:15:35,120
do all these providers have completely

366
00:15:35,120 --> 00:15:37,920
different if you will packet policies

367
00:15:37,920 --> 00:15:39,759
around the handling of fragmented

368
00:15:39,759 --> 00:15:42,480
packets between substantially fragmented

369
00:15:42,480 --> 00:15:44,320
there's data in all the fragments and

370
00:15:44,320 --> 00:15:46,399
atomic fragments yeah it's just ahead of

371
00:15:46,399 --> 00:15:49,199
filling up space

372
00:15:49,199 --> 00:15:50,880
didn't help did it

373
00:15:50,880 --> 00:15:52,639
we didn't really figure out whether this

374
00:15:52,639 --> 00:15:54,560
is a drop by fragmentation or drop by

375
00:15:54,560 --> 00:15:57,279
extension header so we thought okay

376
00:15:57,279 --> 00:15:58,399
okay

377
00:15:58,399 --> 00:16:00,959
we will mangle these packets to put in

378
00:16:00,959 --> 00:16:03,120
same as 78.72

379
00:16:03,120 --> 00:16:05,440
a pad 8

380
00:16:05,440 --> 00:16:07,040
extension header

381
00:16:07,040 --> 00:16:08,639
so we tried this

382
00:16:08,639 --> 00:16:11,519
firstly on the destination options

383
00:16:11,519 --> 00:16:12,560
um

384
00:16:12,560 --> 00:16:14,000
the part of the other reason why we

385
00:16:14,000 --> 00:16:16,480
chose the pad n or pad a destination

386
00:16:16,480 --> 00:16:17,360
option

387
00:16:17,360 --> 00:16:18,800
is that

388
00:16:18,800 --> 00:16:20,880
all the rest of the destination options

389
00:16:20,880 --> 00:16:23,519
look crazy weird crap

390
00:16:23,519 --> 00:16:25,360
and so this is the the few that's kind

391
00:16:25,360 --> 00:16:28,399
of in doesn't matter if it's there if

392
00:16:28,399 --> 00:16:31,360
the client actually gets the packet

393
00:16:31,360 --> 00:16:33,600
does nothing it's just padding

394
00:16:33,600 --> 00:16:34,320
so

395
00:16:34,320 --> 00:16:36,720
the network shouldn't give us stuff

396
00:16:36,720 --> 00:16:38,240
and the client who gets it shouldn't

397
00:16:38,240 --> 00:16:40,480
give us stuff so if anything's going to

398
00:16:40,480 --> 00:16:42,720
get through it's going to be a padding

399
00:16:42,720 --> 00:16:46,160
destination option yeah

400
00:16:46,160 --> 00:16:47,279
awesome

401
00:16:47,279 --> 00:16:50,560
awesome 94.5 drop rate

402
00:16:50,560 --> 00:16:51,839
i'm like

403
00:16:51,839 --> 00:16:54,320
you actually have to program that that

404
00:16:54,320 --> 00:16:56,639
doesn't happen by accident that happens

405
00:16:56,639 --> 00:16:58,639
because you've sat in your code and go

406
00:16:58,639 --> 00:17:02,079
i hate destination options

407
00:17:02,079 --> 00:17:03,920
and so it seems that almost every host

408
00:17:03,920 --> 00:17:06,079
and certainly because these days most of

409
00:17:06,079 --> 00:17:07,679
the eyeballs are sitting on mobile

410
00:17:07,679 --> 00:17:10,880
platforms mobile platform hosts

411
00:17:10,880 --> 00:17:13,199
have particular loathing

412
00:17:13,199 --> 00:17:15,119
of destination options

413
00:17:15,119 --> 00:17:16,559
whether they contain padding or

414
00:17:16,559 --> 00:17:19,839
presumably any other directive

415
00:17:19,839 --> 00:17:22,640
but it seems that it's it's

416
00:17:22,640 --> 00:17:24,880
it's just wow

417
00:17:24,880 --> 00:17:26,319
awesomely bad

418
00:17:26,319 --> 00:17:29,120
so we thought okay if that's the case

419
00:17:29,120 --> 00:17:31,679
let's mix this up a little bit and try

420
00:17:31,679 --> 00:17:33,200
hot by hop

421
00:17:33,200 --> 00:17:34,559
because

422
00:17:34,559 --> 00:17:36,880
you know maybe the network truly is

423
00:17:36,880 --> 00:17:39,600
being malicious so there is a padding

424
00:17:39,600 --> 00:17:41,919
hop by hop option yay

425
00:17:41,919 --> 00:17:44,640
pad 8 because we just chose eight so did

426
00:17:44,640 --> 00:17:47,280
78 72 seem like a good one

427
00:17:47,280 --> 00:17:50,080
um again this is null nothing should be

428
00:17:50,080 --> 00:17:51,120
happening

429
00:17:51,120 --> 00:17:52,720
so again

430
00:17:52,720 --> 00:17:54,240
the network should just let it through

431
00:17:54,240 --> 00:17:56,000
right

432
00:17:56,000 --> 00:17:58,000
wrong

433
00:17:58,000 --> 00:17:59,520
99.5

434
00:17:59,520 --> 00:18:02,640
again you you really have to work hard

435
00:18:02,640 --> 00:18:03,919
to do that

436
00:18:03,919 --> 00:18:06,799
you know if that was our objective

437
00:18:06,799 --> 00:18:08,720
some idiot would go no no no no i'd let

438
00:18:08,720 --> 00:18:10,640
it through but it seems like the entire

439
00:18:10,640 --> 00:18:12,840
v6 world says now we don't like this

440
00:18:12,840 --> 00:18:15,760
crap because i've never seen such a

441
00:18:15,760 --> 00:18:17,520
consistent response

442
00:18:17,520 --> 00:18:19,840
everyone drops hot by hot that's

443
00:18:19,840 --> 00:18:23,280
brilliant 99.5

444
00:18:23,280 --> 00:18:26,000
so the issue is over time the handling

445
00:18:26,000 --> 00:18:28,160
of fragment packets has gone from just

446
00:18:28,160 --> 00:18:31,919
unusually horribly toxicably bad to yeah

447
00:18:31,919 --> 00:18:33,440
pretty bad

448
00:18:33,440 --> 00:18:35,120
you're still bad

449
00:18:35,120 --> 00:18:36,080
um

450
00:18:36,080 --> 00:18:38,240
more recent deployments show so

451
00:18:38,240 --> 00:18:39,840
basically better handling of

452
00:18:39,840 --> 00:18:41,760
fragmentation header

453
00:18:41,760 --> 00:18:45,120
but hot by hop and extension headers

454
00:18:45,120 --> 00:18:46,880
ain't nothing happening in the public

455
00:18:46,880 --> 00:18:48,640
internet infrastructure

456
00:18:48,640 --> 00:18:49,440
so

457
00:18:49,440 --> 00:18:51,120
what lessons have we learned

458
00:18:51,120 --> 00:18:53,679
don't fragment don't rely on path mtu

459
00:18:53,679 --> 00:18:56,080
discovery and don't rely on extension

460
00:18:56,080 --> 00:18:57,039
headers

461
00:18:57,039 --> 00:18:58,480
and interestingly

462
00:18:58,480 --> 00:19:00,559
if you are going to fragment

463
00:19:00,559 --> 00:19:03,360
don't just give a big first packet and a

464
00:19:03,360 --> 00:19:05,679
you know a trailing tiny

465
00:19:05,679 --> 00:19:07,520
if you're going to fragment

466
00:19:07,520 --> 00:19:09,039
be decisive

467
00:19:09,039 --> 00:19:12,880
make your first packet small or smaller

468
00:19:12,880 --> 00:19:14,799
go down to 1280 bytes or something and

469
00:19:14,799 --> 00:19:17,760
shove the rest in the trailing fragment

470
00:19:17,760 --> 00:19:19,840
if you usually do just big packet small

471
00:19:19,840 --> 00:19:22,160
trailers you have a much higher chance

472
00:19:22,160 --> 00:19:23,840
of losing everything

473
00:19:23,840 --> 00:19:26,320
so pick your mss settings and tcp

474
00:19:26,320 --> 00:19:28,320
carefully if you're going to fragment

475
00:19:28,320 --> 00:19:29,760
keep it low

476
00:19:29,760 --> 00:19:32,720
keep it below 1400.

477
00:19:32,720 --> 00:19:34,160
it's a good idea

478
00:19:34,160 --> 00:19:36,080
the lessons learned on hot by hop

479
00:19:36,080 --> 00:19:38,000
extension headers and destination option

480
00:19:38,000 --> 00:19:40,640
extension headers uh that's easy

481
00:19:40,640 --> 00:19:42,880
don't

482
00:19:42,880 --> 00:19:44,640
and if you want to see the current

483
00:19:44,640 --> 00:19:47,760
numbers because this is working around

484
00:19:47,760 --> 00:19:50,240
about um i think we're doing about six

485
00:19:50,240 --> 00:19:52,160
to seven million samples a day across

486
00:19:52,160 --> 00:19:53,280
the planet

487
00:19:53,280 --> 00:19:55,679
um that qr code will take you to this

488
00:19:55,679 --> 00:19:59,280
url this url generates a daily report

489
00:19:59,280 --> 00:20:00,799
and it actually looks at the state of

490
00:20:00,799 --> 00:20:03,840
fragmentation headers all the time and i

491
00:20:03,840 --> 00:20:08,320
am done thank you back to you

492
00:20:09,360 --> 00:20:12,720
excellent is is it can you hear me jeff

493
00:20:12,720 --> 00:20:14,480
yes i can jared hi

494
00:20:14,480 --> 00:20:17,120
excellent yeah nice to see you um

495
00:20:17,120 --> 00:20:19,760
so uh

496
00:20:19,760 --> 00:20:21,200
you know you covered it a little bit in

497
00:20:21,200 --> 00:20:22,640
the end but i'm wondering how much of

498
00:20:22,640 --> 00:20:24,799
the v6 is because of the uh the mobile

499
00:20:24,799 --> 00:20:27,360
networks specifically a lot of the

500
00:20:27,360 --> 00:20:29,679
mobile networks actually uh they get

501
00:20:29,679 --> 00:20:32,080
tail circuits from different isps to

502
00:20:32,080 --> 00:20:33,919
backhaul to the towers or from different

503
00:20:33,919 --> 00:20:36,000
carriers to back all to the towers and

504
00:20:36,000 --> 00:20:38,480
often they have a they have an mtu on

505
00:20:38,480 --> 00:20:40,880
those links that's less than 1500 even

506
00:20:40,880 --> 00:20:44,159
internally for v4 let alone for v6

507
00:20:44,159 --> 00:20:46,400
and so you know the 1280 kind of you

508
00:20:46,400 --> 00:20:48,320
know seems to seems to potentially

509
00:20:48,320 --> 00:20:51,280
explain that but i'm curious if you have

510
00:20:51,280 --> 00:20:51,919
a

511
00:20:51,919 --> 00:20:54,799
further sub breakdown of you know if it

512
00:20:54,799 --> 00:20:57,360
came from the mobile carriers ip space

513
00:20:57,360 --> 00:20:59,760
uh you know from the isp or if it's just

514
00:20:59,760 --> 00:21:01,520
from their generic

515
00:21:01,520 --> 00:21:02,320
ip

516
00:21:02,320 --> 00:21:03,360
you know

517
00:21:03,360 --> 00:21:06,159
you know every country treats mobile

518
00:21:06,159 --> 00:21:07,360
differently

519
00:21:07,360 --> 00:21:09,919
there are folk like in my country

520
00:21:09,919 --> 00:21:12,880
uh that do mobile and wired all off the

521
00:21:12,880 --> 00:21:14,840
one address space all of one piece of

522
00:21:14,840 --> 00:21:17,120
infrastructure and quite frankly you

523
00:21:17,120 --> 00:21:19,280
can't tell if a mobile device is doing

524
00:21:19,280 --> 00:21:20,960
wi-fi tagging

525
00:21:20,960 --> 00:21:23,120
attachments into a home or if it's

526
00:21:23,120 --> 00:21:25,280
actually out there on the mobile network

527
00:21:25,280 --> 00:21:28,799
uh other countries are different

528
00:21:28,799 --> 00:21:31,600
the the basic observation is that these

529
00:21:31,600 --> 00:21:33,919
days the bulk of eyeballs are behind

530
00:21:33,919 --> 00:21:36,960
mobile platforms however they attach

531
00:21:36,960 --> 00:21:38,799
and that's just the reality of the world

532
00:21:38,799 --> 00:21:41,120
so in some ways making that distinction

533
00:21:41,120 --> 00:21:43,440
between what's wide and what's mobile

534
00:21:43,440 --> 00:21:45,039
it's getting less and less important

535
00:21:45,039 --> 00:21:47,200
when you realize that you know 90 of the

536
00:21:47,200 --> 00:21:50,720
users and probably 99 of the money is

537
00:21:50,720 --> 00:21:53,520
actually behind mobile devices

538
00:21:53,520 --> 00:21:55,120
what you're trying to do and i think

539
00:21:55,120 --> 00:21:57,440
you're right is to delineate the ways of

540
00:21:57,440 --> 00:21:58,480
attachment

541
00:21:58,480 --> 00:22:00,720
into talking about the radio networks as

542
00:22:00,720 --> 00:22:02,799
distinct from you know the wide feeder

543
00:22:02,799 --> 00:22:04,080
networks

544
00:22:04,080 --> 00:22:06,640
the system that i use in ads

545
00:22:06,640 --> 00:22:08,880
finds that difficult to detect in

546
00:22:08,880 --> 00:22:10,080
general

547
00:22:10,080 --> 00:22:11,840
now you could take the data that i've

548
00:22:11,840 --> 00:22:14,080
got here and apply specific knowledge to

549
00:22:14,080 --> 00:22:15,280
a carrier

550
00:22:15,280 --> 00:22:17,760
and kind of devise from that which is

551
00:22:17,760 --> 00:22:19,280
has which performance and you'd probably

552
00:22:19,280 --> 00:22:20,400
be right

553
00:22:20,400 --> 00:22:22,640
but from where i sit i find that very

554
00:22:22,640 --> 00:22:24,640
difficult to do but you know it's a good

555
00:22:24,640 --> 00:22:27,840
question thank you

556
00:22:30,000 --> 00:22:32,720
excellent thank you very much jeff

557
00:22:32,720 --> 00:22:34,799
and for anyone it's a pleasure thanks

558
00:22:34,799 --> 00:22:36,640
for anyone who tried the qr code that

559
00:22:36,640 --> 00:22:38,400
actually goes to

560
00:22:38,400 --> 00:22:40,880
v6 frags with an s on the end of it if

561
00:22:40,880 --> 00:22:43,679
you remove the s the url

562
00:22:43,679 --> 00:22:45,520
works apparently

563
00:22:45,520 --> 00:22:47,280
um

564
00:22:47,280 --> 00:22:50,159
no worries qr codes are complex

565
00:22:50,159 --> 00:22:51,679
um

566
00:22:51,679 --> 00:22:54,559
i don't understand how they work magic

567
00:22:54,559 --> 00:22:55,440
so

568
00:22:55,440 --> 00:22:56,400
we have

569
00:22:56,400 --> 00:22:57,760
eric

570
00:22:57,760 --> 00:22:59,679
or justin i'm not sure who's actually

571
00:22:59,679 --> 00:23:00,799
speaking

572
00:23:00,799 --> 00:23:02,960
and if you happen to remember what the

573
00:23:02,960 --> 00:23:03,760
name

574
00:23:03,760 --> 00:23:07,879
there we go that one

575
00:23:08,080 --> 00:23:11,520
and this is also going to be related to

576
00:23:11,520 --> 00:23:13,120
um

577
00:23:13,120 --> 00:23:15,360
i can do slides for you or you can do

578
00:23:15,360 --> 00:23:18,000
uh oh crap there's a clicker thing

579
00:23:18,000 --> 00:23:19,919
i don't know the clicker thing's gone

580
00:23:19,919 --> 00:23:22,960
i'll do the slides here okay

581
00:23:22,960 --> 00:23:25,360
or i can share it to you uh where are

582
00:23:25,360 --> 00:23:26,990
you where are you

583
00:23:26,990 --> 00:23:30,000
[Music]

584
00:23:30,000 --> 00:23:32,240
just we go

585
00:23:32,240 --> 00:23:34,559
um

586
00:23:35,760 --> 00:23:39,120
i don't see the request

587
00:23:39,760 --> 00:23:42,799
why is it not showing up

588
00:23:43,200 --> 00:23:46,200
yep

589
00:23:55,919 --> 00:23:57,840
uh i don't actually know how i change

590
00:23:57,840 --> 00:23:59,200
the slides view because i don't have a

591
00:23:59,200 --> 00:24:02,240
clicker when i see your slides

592
00:24:02,240 --> 00:24:03,520
no you're not allowed such at the

593
00:24:03,520 --> 00:24:05,919
computer they're very clear on that

594
00:24:05,919 --> 00:24:07,760
apparently left and right does it so

595
00:24:07,760 --> 00:24:10,240
never mind great

596
00:24:10,240 --> 00:24:13,960
is that not working

597
00:24:29,600 --> 00:24:32,959
use this in the meantime i

598
00:24:35,679 --> 00:24:38,000
technology is hard sorry folk

599
00:24:38,000 --> 00:24:39,919
it's better

600
00:24:39,919 --> 00:24:42,960
all right so hi everyone uh justin from

601
00:24:42,960 --> 00:24:46,400
julia and eric over there from cisco

602
00:24:46,400 --> 00:24:47,919
and

603
00:24:47,919 --> 00:24:50,559
today let me introduce you to james and

604
00:24:50,559 --> 00:24:52,960
i have to say that we are particularly

605
00:24:52,960 --> 00:24:54,640
proud of that name

606
00:24:54,640 --> 00:24:56,080
because obviously it opens the doors to

607
00:24:56,080 --> 00:24:57,440
a lot of fans

608
00:24:57,440 --> 00:25:01,240
but anyway uh

609
00:25:01,600 --> 00:25:05,600
um why did we come up with james um

610
00:25:05,600 --> 00:25:10,400
actually there is uh already rfc 7872

611
00:25:10,400 --> 00:25:12,840
which was mentioned in uh previous

612
00:25:12,840 --> 00:25:16,400
talk and actually we wanted to

613
00:25:16,400 --> 00:25:19,360
basically present new refreshed and more

614
00:25:19,360 --> 00:25:21,919
complete results

615
00:25:21,919 --> 00:25:24,000
and you probably heard in six men that

616
00:25:24,000 --> 00:25:26,080
there is a hot topic about hop by hub

617
00:25:26,080 --> 00:25:27,440
options and

618
00:25:27,440 --> 00:25:29,840
the question is are are they usable or

619
00:25:29,840 --> 00:25:32,960
reliable over the entire internet

620
00:25:32,960 --> 00:25:35,679
and specifically two drafts have

621
00:25:35,679 --> 00:25:37,919
recently been adopted

622
00:25:37,919 --> 00:25:38,720
one

623
00:25:38,720 --> 00:25:40,159
to define

624
00:25:40,159 --> 00:25:43,039
processing procedures for buy-ups

625
00:25:43,039 --> 00:25:45,440
and the other one is more about sending

626
00:25:45,440 --> 00:25:47,440
and processing

627
00:25:47,440 --> 00:25:49,919
all actual extension headers and define

628
00:25:49,919 --> 00:25:52,400
some limits on it so obviously the the

629
00:25:52,400 --> 00:25:55,520
goal is to make them more widely adapted

630
00:25:55,520 --> 00:25:57,600
and

631
00:25:57,600 --> 00:25:59,600
make them progress the way they are

632
00:25:59,600 --> 00:26:01,440
supposed to do

633
00:26:01,440 --> 00:26:03,039
so the question is what about other

634
00:26:03,039 --> 00:26:06,720
extension headers and that's where james

635
00:26:06,720 --> 00:26:10,200
enters the stage

636
00:26:14,240 --> 00:26:15,520
okay

637
00:26:15,520 --> 00:26:17,840
so this is an overview of the topology

638
00:26:17,840 --> 00:26:19,440
we have used

639
00:26:19,440 --> 00:26:21,760
we have vantage points

640
00:26:21,760 --> 00:26:23,520
in some parts of the world and as you

641
00:26:23,520 --> 00:26:25,360
can see we are still desperately

642
00:26:25,360 --> 00:26:28,880
searching for some vms uh in africa and

643
00:26:28,880 --> 00:26:30,559
somewhere in china or japan and

644
00:26:30,559 --> 00:26:32,960
somewhere in that zone

645
00:26:32,960 --> 00:26:34,799
so we have a lot of our vantage points

646
00:26:34,799 --> 00:26:35,840
in europe

647
00:26:35,840 --> 00:26:39,200
three uh in america north and one in

648
00:26:39,200 --> 00:26:42,240
south one in australia one in india and

649
00:26:42,240 --> 00:26:45,120
one in singapore

650
00:26:47,679 --> 00:26:50,080
and the methodology we have used uh no

651
00:26:50,080 --> 00:26:51,600
black magic here this is a trace root

652
00:26:51,600 --> 00:26:54,480
like technique even though this is uh

653
00:26:54,480 --> 00:26:56,880
or how in library but still trace would

654
00:26:56,880 --> 00:26:58,320
like

655
00:26:58,320 --> 00:27:01,200
and we just test each pair of vms in

656
00:27:01,200 --> 00:27:02,880
both directions

657
00:27:02,880 --> 00:27:04,880
and for each experiment you use udp and

658
00:27:04,880 --> 00:27:06,640
tcp because you never know what filter

659
00:27:06,640 --> 00:27:08,720
you can have an error for

660
00:27:08,720 --> 00:27:10,640
and for the experiments we have

661
00:27:10,640 --> 00:27:12,320
tested pop buy up and destination

662
00:27:12,320 --> 00:27:16,720
options and we vary the size from 8 to

663
00:27:16,720 --> 00:27:19,200
512

664
00:27:19,200 --> 00:27:21,279
we have also tested writing headers from

665
00:27:21,279 --> 00:27:23,520
type zero to six included

666
00:27:23,520 --> 00:27:26,000
we have tested fragment headers atomic

667
00:27:26,000 --> 00:27:28,000
both atomic and non-atomic we have

668
00:27:28,000 --> 00:27:30,080
tested authentication headers

669
00:27:30,080 --> 00:27:33,279
no next editor or with ethernet which is

670
00:27:33,279 --> 00:27:35,240
uh defined in rfc

671
00:27:35,240 --> 00:27:38,880
8986 which is i guess if i remember well

672
00:27:38,880 --> 00:27:40,240
something about

673
00:27:40,240 --> 00:27:42,320
segment rotate for ipv6 and network

674
00:27:42,320 --> 00:27:44,480
programmability

675
00:27:44,480 --> 00:27:46,159
and so for each experiment the traffic

676
00:27:46,159 --> 00:27:48,399
we send the prop link we send is smart

677
00:27:48,399 --> 00:27:50,720
as proposed in the draft here that you

678
00:27:50,720 --> 00:27:52,559
see in the slide so we have published

679
00:27:52,559 --> 00:27:55,520
this draft recently also

680
00:27:55,520 --> 00:27:58,399
and the idea is just to either insert an

681
00:27:58,399 --> 00:28:01,360
id or an address email or something in a

682
00:28:01,360 --> 00:28:03,600
payload somewhere in whatever layer

683
00:28:03,600 --> 00:28:05,279
allows to or

684
00:28:05,279 --> 00:28:07,039
easy technique that you know

685
00:28:07,039 --> 00:28:09,600
it's just to run a web server on the

686
00:28:09,600 --> 00:28:12,159
the address you are sending packets

687
00:28:12,159 --> 00:28:14,799
and uh just explain why you are sending

688
00:28:14,799 --> 00:28:17,360
such traffic

689
00:28:17,360 --> 00:28:18,240
and so

690
00:28:18,240 --> 00:28:19,440
with this

691
00:28:19,440 --> 00:28:20,880
you have

692
00:28:20,880 --> 00:28:23,120
a view we will see that later of each

693
00:28:23,120 --> 00:28:24,080
result

694
00:28:24,080 --> 00:28:26,240
uh so you can see that each

695
00:28:26,240 --> 00:28:28,960
routing editor sorry extension editor

696
00:28:28,960 --> 00:28:31,679
pass or don't pass

697
00:28:31,679 --> 00:28:34,720
and we also try to attribute the drop

698
00:28:34,720 --> 00:28:36,399
for responsibility

699
00:28:36,399 --> 00:28:39,440
for slipper hop and then obviously areas

700
00:28:39,440 --> 00:28:44,120
and that's where our programs come

701
00:28:44,720 --> 00:28:47,120
so problems first at top level because

702
00:28:47,120 --> 00:28:49,520
you have to probe as much as possible

703
00:28:49,520 --> 00:28:51,039
but still

704
00:28:51,039 --> 00:28:54,240
you have to respect networks so

705
00:28:54,240 --> 00:28:55,520
you don't have to introduce too much

706
00:28:55,520 --> 00:28:56,559
burden

707
00:28:56,559 --> 00:28:59,360
but why do we have to test uh a lot

708
00:28:59,360 --> 00:29:01,600
if you see the first illustration on top

709
00:29:01,600 --> 00:29:04,559
you see that the trace the third hop

710
00:29:04,559 --> 00:29:06,000
did not respond

711
00:29:06,000 --> 00:29:08,480
only the first and the second responded

712
00:29:08,480 --> 00:29:11,520
so you could say okay maybe the third

713
00:29:11,520 --> 00:29:14,240
hop is responsible for a drop

714
00:29:14,240 --> 00:29:16,480
or maybe it did just not respond and

715
00:29:16,480 --> 00:29:18,799
maybe this is the force or maybe it just

716
00:29:18,799 --> 00:29:20,799
not respond that's all it's the fifth

717
00:29:20,799 --> 00:29:22,480
that situates right it's responsible for

718
00:29:22,480 --> 00:29:23,760
the drop

719
00:29:23,760 --> 00:29:24,640
and so

720
00:29:24,640 --> 00:29:26,640
illustration on the bottom

721
00:29:26,640 --> 00:29:28,240
you run the same experiment a few

722
00:29:28,240 --> 00:29:30,720
seconds after and then hope surprise you

723
00:29:30,720 --> 00:29:33,600
see that the force up did respond

724
00:29:33,600 --> 00:29:36,559
so in that case you just can rule out

725
00:29:36,559 --> 00:29:38,960
the third cop from being responsible for

726
00:29:38,960 --> 00:29:41,279
the drop and so you're back to the same

727
00:29:41,279 --> 00:29:43,679
principle maybe if the fifth up is

728
00:29:43,679 --> 00:29:45,200
responsible for the drop or if you just

729
00:29:45,200 --> 00:29:47,279
not respond it's equation so if you run

730
00:29:47,279 --> 00:29:49,679
a lot of tests like that you can just

731
00:29:49,679 --> 00:29:52,159
correlate them and try to have that zone

732
00:29:52,159 --> 00:29:55,039
as much as smallest as possible

733
00:29:55,039 --> 00:29:57,120
and this is one of the challenge

734
00:29:57,120 --> 00:29:59,039
to attribute the drop

735
00:29:59,039 --> 00:30:01,279
to an as because you have to make that

736
00:30:01,279 --> 00:30:03,360
zone as small as possible and the best

737
00:30:03,360 --> 00:30:05,919
case obviously is one right

738
00:30:05,919 --> 00:30:08,559
it might never happen but anyway

739
00:30:08,559 --> 00:30:12,240
and you have also corner cases here

740
00:30:17,760 --> 00:30:19,919
an example is that

741
00:30:19,919 --> 00:30:22,320
the ingredients the s2 would be

742
00:30:22,320 --> 00:30:24,399
responsible for the drop but the address

743
00:30:24,399 --> 00:30:26,320
of this interface is to stick on the

744
00:30:26,320 --> 00:30:28,559
first yeah it was one way of using the

745
00:30:28,559 --> 00:30:31,600
drop through the first guest by

746
00:30:31,600 --> 00:30:33,600
or in the trade you could have

747
00:30:33,600 --> 00:30:37,039
identified for nothing

748
00:30:46,640 --> 00:30:49,640
because

749
00:30:50,920 --> 00:30:54,039
[Music]

750
00:30:58,159 --> 00:31:00,320
does anybody have any double a batteries

751
00:31:00,320 --> 00:31:02,000
these died as well

752
00:31:02,000 --> 00:31:05,840
i think i think the batteries died

753
00:31:08,720 --> 00:31:11,120
hello

754
00:31:12,480 --> 00:31:13,679
i'm alive

755
00:31:13,679 --> 00:31:15,279
so um

756
00:31:15,279 --> 00:31:17,519
second case i needed identified our

757
00:31:17,519 --> 00:31:20,240
unidentified s number before and after

758
00:31:20,240 --> 00:31:22,480
the hop so as i said you might have or

759
00:31:22,480 --> 00:31:24,240
might not have identified some yes

760
00:31:24,240 --> 00:31:26,640
number between uh before and after the

761
00:31:26,640 --> 00:31:27,840
wrapping question

762
00:31:27,840 --> 00:31:28,799
and so

763
00:31:28,799 --> 00:31:31,679
you might or might not identify your es

764
00:31:31,679 --> 00:31:32,880
here

765
00:31:32,880 --> 00:31:36,080
so the best case is that your interval

766
00:31:36,080 --> 00:31:38,159
spends only one es

767
00:31:38,159 --> 00:31:40,399
and problems come when your interval

768
00:31:40,399 --> 00:31:43,039
spans multiple so more than two two or

769
00:31:43,039 --> 00:31:45,039
more asm

770
00:31:45,039 --> 00:31:47,840
next slide please

771
00:31:52,159 --> 00:31:54,559
so for the results

772
00:31:54,559 --> 00:31:58,159
of biops options they are unreliable so

773
00:31:58,159 --> 00:32:00,080
we have the same uh

774
00:32:00,080 --> 00:32:02,880
we are agree with previous presentation

775
00:32:02,880 --> 00:32:05,200
the destination options obviously um

776
00:32:05,200 --> 00:32:09,279
size 8 and 16 they pass so they go true

777
00:32:09,279 --> 00:32:10,159
while

778
00:32:10,159 --> 00:32:14,559
once you reach 32 they become unreliable

779
00:32:14,559 --> 00:32:18,080
and so for a size 32

780
00:32:18,080 --> 00:32:19,679
93 percent

781
00:32:19,679 --> 00:32:22,559
was true so it's not that bad but it's

782
00:32:22,559 --> 00:32:24,159
still unrealable

783
00:32:24,159 --> 00:32:27,039
once you come to 64 it's half that part

784
00:32:27,039 --> 00:32:30,320
or 42 percent and it goes wrong with

785
00:32:30,320 --> 00:32:31,760
bigger sizes

786
00:32:31,760 --> 00:32:35,360
for the routine headers types 0 and 4

787
00:32:35,360 --> 00:32:37,200
they are unreliable

788
00:32:37,200 --> 00:32:39,279
again unreliable but

789
00:32:39,279 --> 00:32:40,240
still

790
00:32:40,240 --> 00:32:43,840
good so 81 percent and 69 percent pass

791
00:32:43,840 --> 00:32:46,799
but here type 0 is deprecated and type 4

792
00:32:46,799 --> 00:32:48,640
is segment rating so

793
00:32:48,640 --> 00:32:50,240
no big surprise here

794
00:32:50,240 --> 00:32:52,799
and types one two three four five and

795
00:32:52,799 --> 00:32:54,880
six sorry uh they go true

796
00:32:54,880 --> 00:32:56,799
for fragmentators

797
00:32:56,799 --> 00:32:59,919
atomic fragment adders are unreliable we

798
00:32:59,919 --> 00:33:03,360
have 70 percent that go through

799
00:33:03,360 --> 00:33:05,760
and for non-atomic fragmentators

800
00:33:05,760 --> 00:33:07,600
they all go through

801
00:33:07,600 --> 00:33:09,919
authentication headers no next editor or

802
00:33:09,919 --> 00:33:12,880
ethernet they go through

803
00:33:12,880 --> 00:33:15,519
and so that's the results part but we

804
00:33:15,519 --> 00:33:18,080
also try as i said to attribute drop for

805
00:33:18,080 --> 00:33:19,679
uh per aes

806
00:33:19,679 --> 00:33:21,200
and so this is still a work in progress

807
00:33:21,200 --> 00:33:22,880
so i won't go too much into details here

808
00:33:22,880 --> 00:33:25,120
and show results because they are still

809
00:33:25,120 --> 00:33:27,200
not that stable

810
00:33:27,200 --> 00:33:28,640
so you can you can have a look at the

811
00:33:28,640 --> 00:33:30,799
draft for more details

812
00:33:30,799 --> 00:33:33,600
next slide please

813
00:33:37,440 --> 00:33:39,440
about the next steps so we have set up

814
00:33:39,440 --> 00:33:41,600
an operator survey so if you are an

815
00:33:41,600 --> 00:33:44,080
operator uh and watching this

816
00:33:44,080 --> 00:33:45,760
please just have a look click on this

817
00:33:45,760 --> 00:33:48,080
and fill in the form that will greatly

818
00:33:48,080 --> 00:33:50,640
help us and we could correlate

819
00:33:50,640 --> 00:33:52,960
what we observed with your data and we

820
00:33:52,960 --> 00:33:53,760
keep

821
00:33:53,760 --> 00:33:56,000
privacy all right

822
00:33:56,000 --> 00:33:58,000
we also plan to extend the topology so

823
00:33:58,000 --> 00:34:00,880
as i said uh earlier we are trying to

824
00:34:00,880 --> 00:34:03,039
find some vm somewhere in china or

825
00:34:03,039 --> 00:34:04,320
africa

826
00:34:04,320 --> 00:34:07,760
and we also plan to use uh a probing to

827
00:34:07,760 --> 00:34:10,320
destinations we don't necessarily own so

828
00:34:10,320 --> 00:34:11,199
for instance

829
00:34:11,199 --> 00:34:13,440
based on bgp prefixes or our excerpt of

830
00:34:13,440 --> 00:34:14,800
domains

831
00:34:14,800 --> 00:34:16,560
and we also try to improve the drop

832
00:34:16,560 --> 00:34:18,800
responsibility attribution algorithm

833
00:34:18,800 --> 00:34:21,359
for super hop so reduce that interval as

834
00:34:21,359 --> 00:34:24,159
much as possible and then per es

835
00:34:24,159 --> 00:34:26,480
and one possibility here is to use vdr

836
00:34:26,480 --> 00:34:28,239
map i t

837
00:34:28,239 --> 00:34:30,399
especially for the case uh with the link

838
00:34:30,399 --> 00:34:32,879
between two asses

839
00:34:32,879 --> 00:34:35,520
next slide

840
00:34:35,520 --> 00:34:38,000
so thank you very much um

841
00:34:38,000 --> 00:34:39,440
feel free to have a look at this repo

842
00:34:39,440 --> 00:34:42,000
where we gather all scripts to generate

843
00:34:42,000 --> 00:34:45,918
props packets and uh results uh from

844
00:34:45,918 --> 00:34:48,159
james

845
00:34:48,159 --> 00:34:51,440
i guess i will take questions now

846
00:34:52,639 --> 00:34:54,800
hi oh it works

847
00:34:54,800 --> 00:34:57,119
really good information the most

848
00:34:57,119 --> 00:34:59,520
alarming to me was your last slide if

849
00:34:59,520 --> 00:35:01,119
you want to bring it up

850
00:35:01,119 --> 00:35:03,599
if i saw it right when it gets up to one

851
00:35:03,599 --> 00:35:05,839
i guess next to the last um

852
00:35:05,839 --> 00:35:09,200
12 at 128

853
00:35:09,200 --> 00:35:12,720
you're losing 95 percent

854
00:35:12,720 --> 00:35:14,880
and at 32

855
00:35:14,880 --> 00:35:16,400
basically you're getting through about

856
00:35:16,400 --> 00:35:18,480
that same amount do we know why that

857
00:35:18,480 --> 00:35:20,480
size makes such a big difference and is

858
00:35:20,480 --> 00:35:22,400
it a problem we can address

859
00:35:22,400 --> 00:35:24,400
so your

860
00:35:24,400 --> 00:35:27,839
for what extension error

861
00:35:28,640 --> 00:35:31,200
it says doh there i think if i'm if i'm

862
00:35:31,200 --> 00:35:33,599
reading your slide obviously it becomes

863
00:35:33,599 --> 00:35:34,640
uh

864
00:35:34,640 --> 00:35:35,599
bad

865
00:35:35,599 --> 00:35:38,480
um because probably routers have some

866
00:35:38,480 --> 00:35:40,640
predefined sizes

867
00:35:40,640 --> 00:35:43,280
and you are pushing layer four

868
00:35:43,280 --> 00:35:44,880
too far away

869
00:35:44,880 --> 00:35:47,760
so maybe there are is it is it an issue

870
00:35:47,760 --> 00:35:49,920
with asics chips or have we not drilled

871
00:35:49,920 --> 00:35:53,040
down are the routers logging this or

872
00:35:53,040 --> 00:35:54,480
i don't know how much detailed

873
00:35:54,480 --> 00:35:55,920
information you collected to come up

874
00:35:55,920 --> 00:35:58,240
with that but it's alarming yeah yeah

875
00:35:58,240 --> 00:35:59,200
but

876
00:35:59,200 --> 00:36:02,320
about details not that much because um

877
00:36:02,320 --> 00:36:03,920
all we have is

878
00:36:03,920 --> 00:36:06,560
the response from the rulers and so all

879
00:36:06,560 --> 00:36:08,560
we can do is

880
00:36:08,560 --> 00:36:10,640
assume something so

881
00:36:10,640 --> 00:36:13,040
i'll ask you know a leading question is

882
00:36:13,040 --> 00:36:14,400
is there going to be a follow-through to

883
00:36:14,400 --> 00:36:16,079
drill down to find out why and see if we

884
00:36:16,079 --> 00:36:18,000
can do anything yeah sure sure okay cool

885
00:36:18,000 --> 00:36:20,079
and then i'm happy okay thank you this

886
00:36:20,079 --> 00:36:21,760
is really good i mean i'll stick myself

887
00:36:21,760 --> 00:36:23,680
in the queue as well it seems a fair bit

888
00:36:23,680 --> 00:36:25,760
of this is likely stuff like

889
00:36:25,760 --> 00:36:27,200
where you only ship the first part of

890
00:36:27,200 --> 00:36:29,200
the packet to the forwarding engine

891
00:36:29,200 --> 00:36:31,599
like many routers do or we have a jeff

892
00:36:31,599 --> 00:36:33,119
who's interested yeah so it's my

893
00:36:33,119 --> 00:36:35,599
understanding anytime you've got

894
00:36:35,599 --> 00:36:38,880
ecmp or you try to launch

895
00:36:38,880 --> 00:36:40,880
you need to look at transport layer to

896
00:36:40,880 --> 00:36:42,960
create five double and this is where the

897
00:36:42,960 --> 00:36:44,640
difference comes in you cannot reach

898
00:36:44,640 --> 00:36:46,480
this information

899
00:36:46,480 --> 00:36:48,079
you have to option you don't launch

900
00:36:48,079 --> 00:36:50,800
arrow you drop and some do drop

901
00:36:50,800 --> 00:36:52,880
and we have a jeff haas in the queue go

902
00:36:52,880 --> 00:36:54,400
ahead jeff

903
00:36:54,400 --> 00:36:56,079
thank you warren can you hear me

904
00:36:56,079 --> 00:36:57,040
yep

905
00:36:57,040 --> 00:36:58,000
thank you

906
00:36:58,000 --> 00:36:59,520
so uh

907
00:36:59,520 --> 00:37:00,960
this is the point where we sort of wind

908
00:37:00,960 --> 00:37:02,880
back through multiple presentations on

909
00:37:02,880 --> 00:37:05,760
ipv6 that's been given over the years

910
00:37:05,760 --> 00:37:07,200
people's routers

911
00:37:07,200 --> 00:37:08,960
are built out of systems that have

912
00:37:08,960 --> 00:37:11,040
limited windows into the packet now for

913
00:37:11,040 --> 00:37:12,640
fast forwarding

914
00:37:12,640 --> 00:37:15,119
the problem that ipv6 has always had

915
00:37:15,119 --> 00:37:17,920
with its headers is basically a stack of

916
00:37:17,920 --> 00:37:20,000
tlvs of varying size it means you're

917
00:37:20,000 --> 00:37:22,000
asking something that's expected to do

918
00:37:22,000 --> 00:37:24,079
very fast work to throw windows around

919
00:37:24,079 --> 00:37:26,320
for fast look-ups in a

920
00:37:26,320 --> 00:37:28,240
rather unpredictable fashion

921
00:37:28,240 --> 00:37:30,560
and the consequences that

922
00:37:30,560 --> 00:37:33,280
many routers except for trivial patterns

923
00:37:33,280 --> 00:37:35,920
of known options simply don't bother to

924
00:37:35,920 --> 00:37:38,000
try to actually figure out what window

925
00:37:38,000 --> 00:37:39,440
it needs to get this information out of

926
00:37:39,440 --> 00:37:41,280
there such as the information that jeff

927
00:37:41,280 --> 00:37:43,839
tansura mentioned now as things move

928
00:37:43,839 --> 00:37:45,680
around and then you are limiting the

929
00:37:45,680 --> 00:37:47,760
options for the routers basically do a

930
00:37:47,760 --> 00:37:49,920
static template to look at the fields to

931
00:37:49,920 --> 00:37:51,599
do fast lookups

932
00:37:51,599 --> 00:37:52,720
so

933
00:37:52,720 --> 00:37:55,440
this is exactly the predictions that had

934
00:37:55,440 --> 00:37:57,200
been made years ago and are suffering

935
00:37:57,200 --> 00:38:01,319
from them thank you

936
00:38:04,800 --> 00:38:06,720
thank you very much thank you very much

937
00:38:06,720 --> 00:38:09,359
i think that this one worked nicely

938
00:38:09,359 --> 00:38:11,680
as a follow-on from the previous one

939
00:38:11,680 --> 00:38:13,599
and now we have something completely

940
00:38:13,599 --> 00:38:14,480
different

941
00:38:14,480 --> 00:38:16,240
which is ignis

942
00:38:16,240 --> 00:38:18,000
on what would happen to a wrap server if

943
00:38:18,000 --> 00:38:21,520
bgp sek was deployed end to end today

944
00:38:21,520 --> 00:38:25,359
and hopefully ignis can help

945
00:38:25,359 --> 00:38:29,119
me find his slide set

946
00:38:29,119 --> 00:38:33,480
yeah just which one is it called

947
00:38:35,200 --> 00:38:37,598
that one

948
00:38:38,480 --> 00:38:40,400
and

949
00:38:40,400 --> 00:38:43,440
does it have usbc

950
00:38:43,680 --> 00:38:45,440
that's the problem with it i've got a

951
00:38:45,440 --> 00:38:47,280
clicker but my machine doesn't have a

952
00:38:47,280 --> 00:38:48,720
usb port

953
00:38:48,720 --> 00:38:49,760
so

954
00:38:49,760 --> 00:38:51,359
you can push the button if you'd like on

955
00:38:51,359 --> 00:38:53,280
my laptop or

956
00:38:53,280 --> 00:38:55,520
or you can shop next well i will shout

957
00:38:55,520 --> 00:38:56,480
out

958
00:38:56,480 --> 00:38:58,079
hello there

959
00:38:58,079 --> 00:39:00,160
one sec does anybody have a usb a to

960
00:39:00,160 --> 00:39:02,240
usb-c converter

961
00:39:02,240 --> 00:39:03,680
handy

962
00:39:03,680 --> 00:39:05,200
that i would trust plugging into my

963
00:39:05,200 --> 00:39:07,920
laptop actually never mind

964
00:39:07,920 --> 00:39:10,640
never mind

965
00:39:12,720 --> 00:39:14,720
right uh one presentation on three

966
00:39:14,720 --> 00:39:19,040
titles uh it's uh some experiments and

967
00:39:19,040 --> 00:39:21,200
uh well experimentation with trying to

968
00:39:21,200 --> 00:39:23,920
implement bgp sec and see how that might

969
00:39:23,920 --> 00:39:25,119
perform

970
00:39:25,119 --> 00:39:28,320
the more or less real world and uh how

971
00:39:28,320 --> 00:39:29,119
the

972
00:39:29,119 --> 00:39:30,079
uh

973
00:39:30,079 --> 00:39:32,000
rosy and needle world of protocol

974
00:39:32,000 --> 00:39:34,240
engineering shatters around into the

975
00:39:34,240 --> 00:39:36,079
harsh reality of software and hardware

976
00:39:36,079 --> 00:39:37,280
engineering

977
00:39:37,280 --> 00:39:38,720
and also the third one and then

978
00:39:38,720 --> 00:39:41,680
specifically for yob uh which mentions

979
00:39:41,680 --> 00:39:43,680
the route server because otherwise he

980
00:39:43,680 --> 00:39:45,680
wouldn't pay attention to me

981
00:39:45,680 --> 00:39:47,359
uh so

982
00:39:47,359 --> 00:39:49,680
now i feel happy

983
00:39:49,680 --> 00:39:52,480
next slide please

984
00:39:54,640 --> 00:39:57,680
ah it's over here so bgp sec in theory

985
00:39:57,680 --> 00:40:00,880
uh that's a really simple uh idea we do

986
00:40:00,880 --> 00:40:03,200
some uh we add some cryptographical

987
00:40:03,200 --> 00:40:07,040
verification into the asp so uh

988
00:40:07,040 --> 00:40:09,280
sign of what we are

989
00:40:09,280 --> 00:40:11,839
advertising and verify what we receive

990
00:40:11,839 --> 00:40:13,440
from our neighbors

991
00:40:13,440 --> 00:40:15,440
uh signature is comprised of three

992
00:40:15,440 --> 00:40:17,599
elements the actual fragments of the

993
00:40:17,599 --> 00:40:20,480
path uh the identifier of uh the

994
00:40:20,480 --> 00:40:22,640
neighbor to whom we are sending out and

995
00:40:22,640 --> 00:40:25,200
the prefix itself well

996
00:40:25,200 --> 00:40:28,000
do some calculation and

997
00:40:28,000 --> 00:40:30,240
then do some other calculation to verify

998
00:40:30,240 --> 00:40:33,439
that next slide please

999
00:40:34,240 --> 00:40:37,200
if we if we'll try to characterize uh

1000
00:40:37,200 --> 00:40:39,680
the scalability parameters for that uh

1001
00:40:39,680 --> 00:40:41,440
there are multiple dimensions which are

1002
00:40:41,440 --> 00:40:45,119
relevant in uh real uh deployments so

1003
00:40:45,119 --> 00:40:47,040
amount of prefixes and the distribution

1004
00:40:47,040 --> 00:40:50,480
of prefixes to the as paths and there's

1005
00:40:50,480 --> 00:40:53,359
this space where things can be optimized

1006
00:40:53,359 --> 00:40:54,400
here

1007
00:40:54,400 --> 00:40:57,200
uh the what is called the fan out ratio

1008
00:40:57,200 --> 00:41:00,240
the amount of the same uh as part of

1009
00:41:00,240 --> 00:41:01,520
information signed as part of

1010
00:41:01,520 --> 00:41:03,760
information that you distribute to your

1011
00:41:03,760 --> 00:41:06,400
outgoing neighbors and how many of those

1012
00:41:06,400 --> 00:41:09,280
receive exactly the same as power

1013
00:41:09,280 --> 00:41:11,440
and there's also caching so if we look

1014
00:41:11,440 --> 00:41:14,079
at the practical uh bgp implementations

1015
00:41:14,079 --> 00:41:17,119
they they cache attributes in one or the

1016
00:41:17,119 --> 00:41:19,200
other way

1017
00:41:19,200 --> 00:41:21,359
as with bgp sec the size of the

1018
00:41:21,359 --> 00:41:24,400
attribute is slightly larger than uh

1019
00:41:24,400 --> 00:41:27,280
than for say other uh types of bgp

1020
00:41:27,280 --> 00:41:30,160
attributes therefore um we'd really like

1021
00:41:30,160 --> 00:41:32,839
to try to cache the things and

1022
00:41:32,839 --> 00:41:36,720
um let's see how uh bgp sec as the

1023
00:41:36,720 --> 00:41:38,640
protocol is friendly with that next

1024
00:41:38,640 --> 00:41:41,200
slide please

1025
00:41:41,359 --> 00:41:44,720
if we look at the platform specifics uh

1026
00:41:44,720 --> 00:41:46,480
so

1027
00:41:46,480 --> 00:41:49,520
in itf uh it's a spherical bgp which

1028
00:41:49,520 --> 00:41:52,400
runs in a vacuum but uh if we look into

1029
00:41:52,400 --> 00:41:55,440
the field it runs on specific platforms

1030
00:41:55,440 --> 00:41:59,119
and those platforms uh have uh specific

1031
00:41:59,119 --> 00:42:01,359
and a real world uh

1032
00:42:01,359 --> 00:42:03,520
say restrictions and limitations to the

1033
00:42:03,520 --> 00:42:07,119
performance and most the main one is

1034
00:42:07,119 --> 00:42:10,160
memory bandwidth and memory latency

1035
00:42:10,160 --> 00:42:13,599
while in theory you can have

1036
00:42:13,599 --> 00:42:15,040
a lot

1037
00:42:15,040 --> 00:42:18,640
in reality uh the latency limits uh what

1038
00:42:18,640 --> 00:42:21,440
practical amount of memory operations

1039
00:42:21,440 --> 00:42:23,599
you can achieve

1040
00:42:23,599 --> 00:42:25,760
and uh also looking into the

1041
00:42:25,760 --> 00:42:27,599
developments in the compute platform

1042
00:42:27,599 --> 00:42:30,000
processors themselves the scalar

1043
00:42:30,000 --> 00:42:33,920
processing performance is increasing

1044
00:42:33,920 --> 00:42:36,480
in a low single digit percent across the

1045
00:42:36,480 --> 00:42:37,920
generations

1046
00:42:37,920 --> 00:42:40,079
and the main increase in compute

1047
00:42:40,079 --> 00:42:42,640
performance is in making those

1048
00:42:42,640 --> 00:42:44,880
operations wider so single instruction

1049
00:42:44,880 --> 00:42:46,800
multiple data or in general

1050
00:42:46,800 --> 00:42:48,800
vectorization where you have one

1051
00:42:48,800 --> 00:42:50,640
instruction which operates on multiple

1052
00:42:50,640 --> 00:42:53,599
parallel streams of data

1053
00:42:53,599 --> 00:42:54,480
from a

1054
00:42:54,480 --> 00:42:57,040
cryptographical point of view signature

1055
00:42:57,040 --> 00:43:00,640
validation can be optimized uh in

1056
00:43:00,640 --> 00:43:03,599
certain environments like uh validating

1057
00:43:03,599 --> 00:43:05,599
the signatures which are generated from

1058
00:43:05,599 --> 00:43:09,359
the same private key might be optimized

1059
00:43:09,359 --> 00:43:11,599
to a level uh that's also more of a

1060
00:43:11,599 --> 00:43:13,359
domain of the software implementation

1061
00:43:13,359 --> 00:43:16,000
and less so of the protocol engineering

1062
00:43:16,000 --> 00:43:17,680
but that also

1063
00:43:17,680 --> 00:43:19,440
needs to be taken into the account and

1064
00:43:19,440 --> 00:43:21,680
the protocol should not

1065
00:43:21,680 --> 00:43:24,879
actively preclude that

1066
00:43:25,119 --> 00:43:28,560
and if we look into the developments of

1067
00:43:28,560 --> 00:43:33,040
the compute platforms as such uh

1068
00:43:33,920 --> 00:43:35,839
the increase in the possible compute

1069
00:43:35,839 --> 00:43:38,400
performance comes from

1070
00:43:38,400 --> 00:43:40,720
executing multiple parallel instructions

1071
00:43:40,720 --> 00:43:43,839
and having wider uh data paths so to say

1072
00:43:43,839 --> 00:43:45,280
an equivalent

1073
00:43:45,280 --> 00:43:47,920
uh or in uh well

1074
00:43:47,920 --> 00:43:49,119
in a more

1075
00:43:49,119 --> 00:43:51,520
more simpler form it's a with a wider

1076
00:43:51,520 --> 00:43:55,599
vectorization next slide please

1077
00:43:55,599 --> 00:43:58,800
so if we look in bgp second practice how

1078
00:43:58,800 --> 00:44:00,640
does that look from a data structure

1079
00:44:00,640 --> 00:44:02,319
perspective and how does that look from

1080
00:44:02,319 --> 00:44:04,560
avaya image perspective

1081
00:44:04,560 --> 00:44:07,680
from algorithms for hash so first thing

1082
00:44:07,680 --> 00:44:09,920
uh the long message that they has path

1083
00:44:09,920 --> 00:44:11,359
with the crypto all sorts of

1084
00:44:11,359 --> 00:44:14,720
cryptographical uh keys uh segments and

1085
00:44:14,720 --> 00:44:17,920
and other uh identifiers it's compressed

1086
00:44:17,920 --> 00:44:20,720
uh via sha two hash function into 32

1087
00:44:20,720 --> 00:44:23,599
bytes and then those 32 bytes are used

1088
00:44:23,599 --> 00:44:25,440
as an input into the signature

1089
00:44:25,440 --> 00:44:27,119
generation

1090
00:44:27,119 --> 00:44:30,319
both of these processors

1091
00:44:30,319 --> 00:44:31,760
they are

1092
00:44:31,760 --> 00:44:33,839
vectorizable so

1093
00:44:33,839 --> 00:44:35,599
themselves they don't have any

1094
00:44:35,599 --> 00:44:38,160
preclusion for making them in parallel

1095
00:44:38,160 --> 00:44:38,960
and

1096
00:44:38,960 --> 00:44:40,720
this is more of a domain of the software

1097
00:44:40,720 --> 00:44:42,160
engineering

1098
00:44:42,160 --> 00:44:44,000
characterization if we are talking about

1099
00:44:44,000 --> 00:44:46,160
the contemporary intel arm platforms has

1100
00:44:46,160 --> 00:44:48,240
been around for a decade

1101
00:44:48,240 --> 00:44:49,599
and

1102
00:44:49,599 --> 00:44:51,440
yes we still have problems in in the

1103
00:44:51,440 --> 00:44:53,920
industry overall um uh there are

1104
00:44:53,920 --> 00:44:55,760
problems of compilers there are problems

1105
00:44:55,760 --> 00:44:57,839
with uh overall

1106
00:44:57,839 --> 00:44:59,920
software engineering community awareness

1107
00:44:59,920 --> 00:45:01,440
to that uh

1108
00:45:01,440 --> 00:45:04,880
this is slowly but gradually improving

1109
00:45:04,880 --> 00:45:05,760
and

1110
00:45:05,760 --> 00:45:09,599
this is a basically a free tool that you

1111
00:45:09,599 --> 00:45:12,400
need to use

1112
00:45:12,480 --> 00:45:15,440
speaking of hashing that operates on

1113
00:45:15,440 --> 00:45:16,960
fixed blocks

1114
00:45:16,960 --> 00:45:19,920
so blocked by itself is atomic if you

1115
00:45:19,920 --> 00:45:22,560
compute the block uh you can continue

1116
00:45:22,560 --> 00:45:24,720
the next block starting from the same

1117
00:45:24,720 --> 00:45:26,800
intermediate state that you got

1118
00:45:26,800 --> 00:45:28,800
previously therefore this opens

1119
00:45:28,800 --> 00:45:31,760
opportunities for caching

1120
00:45:31,760 --> 00:45:34,319
hash calculation for certain data

1121
00:45:34,319 --> 00:45:36,480
uh signature calculation and

1122
00:45:36,480 --> 00:45:38,560
verification those are computationally

1123
00:45:38,560 --> 00:45:41,680
expensive but it doesn't touch memory

1124
00:45:41,680 --> 00:45:43,520
while you have to do more arithmetic

1125
00:45:43,520 --> 00:45:45,680
operations on on a large

1126
00:45:45,680 --> 00:45:47,440
integers

1127
00:45:47,440 --> 00:45:49,200
you can do that

1128
00:45:49,200 --> 00:45:52,319
mostly as your uh underlying platform

1129
00:45:52,319 --> 00:45:53,599
can allow

1130
00:45:53,599 --> 00:45:56,160
whereas for hashing you are limited by

1131
00:45:56,160 --> 00:45:59,040
the memory bandwidth and

1132
00:45:59,040 --> 00:46:00,880
there are certain ways that you can walk

1133
00:46:00,880 --> 00:46:03,680
around but uh

1134
00:46:03,680 --> 00:46:05,760
the general trend is that the longer

1135
00:46:05,760 --> 00:46:08,240
your as path get your the longer your

1136
00:46:08,240 --> 00:46:10,560
bgp sec path gets

1137
00:46:10,560 --> 00:46:12,240
the more time you will spend on

1138
00:46:12,240 --> 00:46:14,960
calculating the hash value than on

1139
00:46:14,960 --> 00:46:18,880
calculating or validating the signature

1140
00:46:18,880 --> 00:46:21,520
uh and this there's a small illustration

1141
00:46:21,520 --> 00:46:24,560
in the numbers uh so uh in the current

1142
00:46:24,560 --> 00:46:28,000
specification it's 100 bytes uh per

1143
00:46:28,000 --> 00:46:30,160
gps

1144
00:46:30,160 --> 00:46:33,920
but however there are some alarming uh

1145
00:46:33,920 --> 00:46:35,599
specifics here

1146
00:46:35,599 --> 00:46:38,560
uh the signature itself is the signature

1147
00:46:38,560 --> 00:46:42,000
block itself is built from two parts and

1148
00:46:42,000 --> 00:46:46,160
those parts are six and 94 bytes

1149
00:46:46,160 --> 00:46:48,960
and six is not the power of two and that

1150
00:46:48,960 --> 00:46:51,440
just falls into a direct conflict with

1151
00:46:51,440 --> 00:46:54,319
uh what the uh any practical

1152
00:46:54,319 --> 00:46:56,880
vectorization platform can support it's

1153
00:46:56,880 --> 00:47:00,000
either four or eight if you want to uh

1154
00:47:00,000 --> 00:47:03,119
squeeze in six there it's possible but

1155
00:47:03,119 --> 00:47:06,480
uh you will lose far more than you would

1156
00:47:06,480 --> 00:47:10,400
gain uh in in trying to vectorize that

1157
00:47:10,400 --> 00:47:13,119
next slide please

1158
00:47:13,359 --> 00:47:15,839
uh looking into how that works into into

1159
00:47:15,839 --> 00:47:17,599
the characterization and where the

1160
00:47:17,599 --> 00:47:19,760
saving can come

1161
00:47:19,760 --> 00:47:21,520
so uh

1162
00:47:21,520 --> 00:47:24,480
on the top horizontally you have the

1163
00:47:24,480 --> 00:47:26,400
incoming message for which the hash

1164
00:47:26,400 --> 00:47:28,800
needs to be calculated and bgp sec is

1165
00:47:28,800 --> 00:47:31,440
recursive uh you need to do that uh

1166
00:47:31,440 --> 00:47:34,559
validation for each and every uh

1167
00:47:34,559 --> 00:47:37,359
intermediate intermediate hop

1168
00:47:37,359 --> 00:47:40,000
therefore what you do if your platform

1169
00:47:40,000 --> 00:47:41,760
allows for a

1170
00:47:41,760 --> 00:47:44,559
gather efficient gather or or indexed

1171
00:47:44,559 --> 00:47:47,040
load operation you simply point out the

1172
00:47:47,040 --> 00:47:50,079
offsets from which to take uh the data

1173
00:47:50,079 --> 00:47:52,240
and then uh this is a middle middle

1174
00:47:52,240 --> 00:47:54,480
green part and the time flows from top

1175
00:47:54,480 --> 00:47:55,680
to bottom

1176
00:47:55,680 --> 00:47:56,480
uh

1177
00:47:56,480 --> 00:47:59,680
you uh calculate in parallel for example

1178
00:47:59,680 --> 00:48:01,920
for eight or sixteen lanes

1179
00:48:01,920 --> 00:48:05,040
uh that's one instruction and uh eight

1180
00:48:05,040 --> 00:48:08,400
or sixteen instances of separate data

1181
00:48:08,400 --> 00:48:11,040
within the latency of the longest block

1182
00:48:11,040 --> 00:48:13,760
you have a

1183
00:48:13,760 --> 00:48:17,920
multitude of uh bandwidth so uh it's a

1184
00:48:17,920 --> 00:48:19,440
little bit slower than the scalar

1185
00:48:19,440 --> 00:48:20,880
version because well you don't have

1186
00:48:20,880 --> 00:48:22,079
branching

1187
00:48:22,079 --> 00:48:24,240
some some uh implementations don't

1188
00:48:24,240 --> 00:48:26,640
support a rotation which is needed for

1189
00:48:26,640 --> 00:48:28,720
uh shattu therefore you need to

1190
00:48:28,720 --> 00:48:31,200
implement that yourself by multiple

1191
00:48:31,200 --> 00:48:33,040
shifts here and there and then combining

1192
00:48:33,040 --> 00:48:34,400
the result

1193
00:48:34,400 --> 00:48:36,880
uh overall it's it's around additional

1194
00:48:36,880 --> 00:48:40,640
20 percent of latency but this gives you

1195
00:48:40,640 --> 00:48:43,359
uh roughly 15 times the overall

1196
00:48:43,359 --> 00:48:45,200
throughput performance

1197
00:48:45,200 --> 00:48:48,880
therefore if your implementation allows

1198
00:48:48,880 --> 00:48:50,800
you can easily talk about the order of

1199
00:48:50,800 --> 00:48:53,119
magnitude speed up for signature

1200
00:48:53,119 --> 00:48:55,200
generation and

1201
00:48:55,200 --> 00:48:56,480
validation

1202
00:48:56,480 --> 00:48:59,359
and then the yellow part is is the

1203
00:48:59,359 --> 00:49:02,800
actual key generation or uh signing or

1204
00:49:02,800 --> 00:49:05,200
or validation path the same same rules

1205
00:49:05,200 --> 00:49:07,839
apply uh you have multiple entities

1206
00:49:07,839 --> 00:49:10,000
being processed in parallel

1207
00:49:10,000 --> 00:49:11,599
even if the key

1208
00:49:11,599 --> 00:49:13,280
actual key length is a little bit

1209
00:49:13,280 --> 00:49:15,280
different by a few bits oh this is this

1210
00:49:15,280 --> 00:49:17,040
is purely an implementation aspect of

1211
00:49:17,040 --> 00:49:19,280
how you can do that efficiently

1212
00:49:19,280 --> 00:49:22,480
so uh the outcome of this you can get

1213
00:49:22,480 --> 00:49:25,119
substantial increase in performance if

1214
00:49:25,119 --> 00:49:27,359
your data structures uh

1215
00:49:27,359 --> 00:49:31,520
allow for that next slide please

1216
00:49:31,520 --> 00:49:33,200
and here we are coming to the second

1217
00:49:33,200 --> 00:49:34,160
problem

1218
00:49:34,160 --> 00:49:37,599
of uh or second real life aspect of bgp

1219
00:49:37,599 --> 00:49:38,800
sec

1220
00:49:38,800 --> 00:49:40,960
on the top you see the wire image and in

1221
00:49:40,960 --> 00:49:44,480
bgp sec attribute uh first you have an

1222
00:49:44,480 --> 00:49:47,200
array of path elements then you have an

1223
00:49:47,200 --> 00:49:50,240
array of signatures where for uh the

1224
00:49:50,240 --> 00:49:52,880
specification itself asks for the hash

1225
00:49:52,880 --> 00:49:54,880
to be calculated in sequences so you

1226
00:49:54,880 --> 00:49:56,800
have path signature path signature path

1227
00:49:56,800 --> 00:50:00,319
signature and that means that

1228
00:50:00,319 --> 00:50:02,240
for for that incoming attribute which

1229
00:50:02,240 --> 00:50:04,480
you received you first need to copy it

1230
00:50:04,480 --> 00:50:06,240
around

1231
00:50:06,240 --> 00:50:07,040
then

1232
00:50:07,040 --> 00:50:09,680
calculate the hash and signature and

1233
00:50:09,680 --> 00:50:13,119
then copy it back again into the format

1234
00:50:13,119 --> 00:50:15,359
which will eventually will go on to the

1235
00:50:15,359 --> 00:50:16,800
buyer

1236
00:50:16,800 --> 00:50:17,760
uh

1237
00:50:17,760 --> 00:50:19,599
touching the memory and copying the

1238
00:50:19,599 --> 00:50:22,079
memory yes you you have caching system

1239
00:50:22,079 --> 00:50:24,319
uh you have uh

1240
00:50:24,319 --> 00:50:28,079
automatic automatic uh prefetch there

1241
00:50:28,079 --> 00:50:30,960
it works if your algorithm is friendly

1242
00:50:30,960 --> 00:50:33,520
to that but if you are reaching up more

1243
00:50:33,520 --> 00:50:35,599
than one or two cache line forward the

1244
00:50:35,599 --> 00:50:36,880
backward

1245
00:50:36,880 --> 00:50:39,599
uh in general this algorithm cannot cope

1246
00:50:39,599 --> 00:50:42,079
up with that and you

1247
00:50:42,079 --> 00:50:45,680
you start to lose uh latency

1248
00:50:45,680 --> 00:50:48,640
basically for nothing

1249
00:50:48,640 --> 00:50:51,760
uh signature generation and verification

1250
00:50:51,760 --> 00:50:53,359
well they are they are computationally

1251
00:50:53,359 --> 00:50:55,359
intensive but

1252
00:50:55,359 --> 00:50:57,599
overall that's not the main problem the

1253
00:50:57,599 --> 00:50:59,839
main problem is that in order to have

1254
00:50:59,839 --> 00:51:02,079
the hash over which which to sign and

1255
00:51:02,079 --> 00:51:04,400
and which to validate

1256
00:51:04,400 --> 00:51:06,640
you need to spend really excessive

1257
00:51:06,640 --> 00:51:10,000
amount of time just because protocol is

1258
00:51:10,000 --> 00:51:12,160
not necessary friendly

1259
00:51:12,160 --> 00:51:14,879
next slide please

1260
00:51:16,559 --> 00:51:19,280
the experiments so what what has been

1261
00:51:19,280 --> 00:51:22,000
experimented with uh let's take the

1262
00:51:22,000 --> 00:51:25,760
realistic real world distribution of uh

1263
00:51:25,760 --> 00:51:29,200
prefixes prefix to us path ratios

1264
00:51:29,200 --> 00:51:32,400
uh the fan out ratios um and and the

1265
00:51:32,400 --> 00:51:36,400
overall uh setup was that it's 24 hours

1266
00:51:36,400 --> 00:51:37,680
of

1267
00:51:37,680 --> 00:51:41,280
gdp updates taken from multiple public

1268
00:51:41,280 --> 00:51:42,720
sources

1269
00:51:42,720 --> 00:51:44,800
that is past

1270
00:51:44,800 --> 00:51:47,280
different uh asp

1271
00:51:47,280 --> 00:51:51,599
only as path attributes taken out

1272
00:51:51,599 --> 00:51:54,319
uh it's on the order of 75 000 different

1273
00:51:54,319 --> 00:51:57,280
ass the assumption is made that one is

1274
00:51:57,280 --> 00:52:00,160
equals one route therefore there's uh

1275
00:52:00,160 --> 00:52:02,079
one pair one pair of

1276
00:52:02,079 --> 00:52:03,760
keys generated

1277
00:52:03,760 --> 00:52:05,200
per ais

1278
00:52:05,200 --> 00:52:07,359
all that is precomputed in advance then

1279
00:52:07,359 --> 00:52:09,920
all is fed by rtr into the device under

1280
00:52:09,920 --> 00:52:12,559
the test uh then based on that incoming

1281
00:52:12,559 --> 00:52:16,160
data uh well bgp sessions are kind of

1282
00:52:16,160 --> 00:52:18,800
brought up and all of that is replayed

1283
00:52:18,800 --> 00:52:20,800
into the device under the test and

1284
00:52:20,800 --> 00:52:23,040
device under the test feeds everything

1285
00:52:23,040 --> 00:52:26,480
back with the fan out ratio of 90

1286
00:52:26,480 --> 00:52:30,000
uh to a receiver

1287
00:52:30,880 --> 00:52:33,599
the summary outcome of that it works

1288
00:52:33,599 --> 00:52:35,440
um

1289
00:52:35,440 --> 00:52:36,960
it actually takes

1290
00:52:36,960 --> 00:52:39,359
four specific particular implementation

1291
00:52:39,359 --> 00:52:40,800
in a particular environment on a

1292
00:52:40,800 --> 00:52:43,040
particular platform it took 34 minutes

1293
00:52:43,040 --> 00:52:45,599
for this to converge uh from the start

1294
00:52:45,599 --> 00:52:48,720
to the beginning from start to end

1295
00:52:48,720 --> 00:52:50,960
comparing that to the plane bgp without

1296
00:52:50,960 --> 00:52:54,000
bgp sec that's one minute 20 seconds

1297
00:52:54,000 --> 00:52:56,240
and uh

1298
00:52:56,240 --> 00:52:58,400
well

1299
00:52:58,400 --> 00:53:00,880
i think we can live in certain uh at

1300
00:53:00,880 --> 00:53:02,880
least in the beginning of of of

1301
00:53:02,880 --> 00:53:06,160
deployment or instead well

1302
00:53:06,160 --> 00:53:08,319
in certain engineered aspects of network

1303
00:53:08,319 --> 00:53:10,559
design we can live with half an hour of

1304
00:53:10,559 --> 00:53:12,480
the initial convergence if you don't

1305
00:53:12,480 --> 00:53:14,240
need to bootstrap the whole of a network

1306
00:53:14,240 --> 00:53:15,520
all the time

1307
00:53:15,520 --> 00:53:17,440
from the beginning

1308
00:53:17,440 --> 00:53:18,720
but

1309
00:53:18,720 --> 00:53:21,760
if we can do something better maybe

1310
00:53:21,760 --> 00:53:23,920
we could

1311
00:53:23,920 --> 00:53:26,720
next slide please

1312
00:53:27,119 --> 00:53:31,680
so if we try to look uh into into the

1313
00:53:31,680 --> 00:53:33,920
whole uh kind of the situation around

1314
00:53:33,920 --> 00:53:37,440
bgb sec so is is it really broken um

1315
00:53:37,440 --> 00:53:39,119
from a security point of view now

1316
00:53:39,119 --> 00:53:41,680
everything works fine

1317
00:53:41,680 --> 00:53:43,839
but

1318
00:53:44,160 --> 00:53:46,160
it's not very much

1319
00:53:46,160 --> 00:53:49,440
practically usable as it is today

1320
00:53:49,440 --> 00:53:52,319
and now two two main problems

1321
00:53:52,319 --> 00:53:55,440
uh if we are looking at the layout of

1322
00:53:55,440 --> 00:53:57,920
the data

1323
00:53:57,920 --> 00:54:02,800
vgp6 also signs uh the destination asm

1324
00:54:02,800 --> 00:54:06,160
for which we are advertising that prefix

1325
00:54:06,160 --> 00:54:08,160
the problem is that that

1326
00:54:08,160 --> 00:54:11,280
s number is in the very beginning of the

1327
00:54:11,280 --> 00:54:13,280
field over which the hash is being

1328
00:54:13,280 --> 00:54:14,960
calculated

1329
00:54:14,960 --> 00:54:17,040
that means that if we are

1330
00:54:17,040 --> 00:54:20,880
spreading out the same as path to say a

1331
00:54:20,880 --> 00:54:23,440
large number 100 as an example of of

1332
00:54:23,440 --> 00:54:25,119
neighbors we need to recalculate the

1333
00:54:25,119 --> 00:54:27,680
hash 100 times

1334
00:54:27,680 --> 00:54:30,480
if we move that field

1335
00:54:30,480 --> 00:54:32,240
for example to the end

1336
00:54:32,240 --> 00:54:34,160
that means that we can calculate it once

1337
00:54:34,160 --> 00:54:36,079
in pre-cash for

1338
00:54:36,079 --> 00:54:39,280
uh majority for for the majority of the

1339
00:54:39,280 --> 00:54:41,680
blocks and only recalculate one or two

1340
00:54:41,680 --> 00:54:43,200
remaining blocks

1341
00:54:43,200 --> 00:54:46,160
which also are changing with each

1342
00:54:46,160 --> 00:54:47,440
prefix

1343
00:54:47,440 --> 00:54:50,400
uh the longer the s path gets uh the the

1344
00:54:50,400 --> 00:54:53,280
higher the savings from that are

1345
00:54:53,280 --> 00:54:56,160
the second problematic aspect is

1346
00:54:56,160 --> 00:55:00,960
the actual wire image uh we have uh

1347
00:55:00,960 --> 00:55:03,839
data layout on the wire and data layout

1348
00:55:03,839 --> 00:55:06,559
that is being processed uh

1349
00:55:06,559 --> 00:55:07,680
really

1350
00:55:07,680 --> 00:55:10,079
incompatible and that means that you

1351
00:55:10,079 --> 00:55:12,319
need to receive something reshuffle do

1352
00:55:12,319 --> 00:55:14,480
the thing then reshuffle again and send

1353
00:55:14,480 --> 00:55:17,440
it out this can easily be avoided next

1354
00:55:17,440 --> 00:55:19,599
slide please

1355
00:55:19,599 --> 00:55:21,760
so what can we do about that

1356
00:55:21,760 --> 00:55:24,799
uh let's look at the reality bgp sec is

1357
00:55:24,799 --> 00:55:26,799
uh well at least at least the current

1358
00:55:26,799 --> 00:55:29,440
specification version zero

1359
00:55:29,440 --> 00:55:30,559
uh

1360
00:55:30,559 --> 00:55:32,720
it doesn't have real practical

1361
00:55:32,720 --> 00:55:34,319
deployments well there are some

1362
00:55:34,319 --> 00:55:36,000
experiments uh there are some

1363
00:55:36,000 --> 00:55:38,240
experimental implementations but there

1364
00:55:38,240 --> 00:55:39,920
are no uh

1365
00:55:39,920 --> 00:55:43,680
significant or substantial deployments

1366
00:55:43,680 --> 00:55:45,839
the protocol itself is versioned and it

1367
00:55:45,839 --> 00:55:49,200
has certain hooks for extensibility um

1368
00:55:49,200 --> 00:55:50,799
therefore

1369
00:55:50,799 --> 00:55:52,000
we

1370
00:55:52,000 --> 00:55:54,400
we practically can talk about trying to

1371
00:55:54,400 --> 00:55:57,040
extend or fix certain things

1372
00:55:57,040 --> 00:55:59,680
uh doing a new version

1373
00:55:59,680 --> 00:56:02,799
and then uh within bgp sec there is a

1374
00:56:02,799 --> 00:56:05,839
mechanism which allows for uh algorithm

1375
00:56:05,839 --> 00:56:07,520
change

1376
00:56:07,520 --> 00:56:09,599
the uh that mechanism right now

1377
00:56:09,599 --> 00:56:11,760
identifies only the algorithms

1378
00:56:11,760 --> 00:56:14,799
themselves so it's chat two and and

1379
00:56:14,799 --> 00:56:16,480
prime 256

1380
00:56:16,480 --> 00:56:18,640
it doesn't say anything about a format

1381
00:56:18,640 --> 00:56:20,640
over which it operates

1382
00:56:20,640 --> 00:56:22,960
one of the possible ways for

1383
00:56:22,960 --> 00:56:25,119
another version of bgp circuit would be

1384
00:56:25,119 --> 00:56:28,000
to extend this algorithm identifier to

1385
00:56:28,000 --> 00:56:31,280
cover the format over of the data

1386
00:56:31,280 --> 00:56:34,720
or which is being processed

1387
00:56:34,960 --> 00:56:36,480
and

1388
00:56:36,480 --> 00:56:38,240
whether that's the same meaning of the

1389
00:56:38,240 --> 00:56:41,280
identifier or separate that's i think an

1390
00:56:41,280 --> 00:56:44,960
open question for a discussion and also

1391
00:56:44,960 --> 00:56:47,440
uh the wire image

1392
00:56:47,440 --> 00:56:48,480
asks

1393
00:56:48,480 --> 00:56:52,559
for uh changes to make it uh simply

1394
00:56:52,559 --> 00:56:54,319
friendly to

1395
00:56:54,319 --> 00:56:56,880
the implementation

1396
00:56:56,880 --> 00:56:58,960
talking back about the experiments so

1397
00:56:58,960 --> 00:57:01,920
those 34 minutes if if these couple of

1398
00:57:01,920 --> 00:57:05,200
changes are implemented they uh converge

1399
00:57:05,200 --> 00:57:08,480
into something closer to four minutes

1400
00:57:08,480 --> 00:57:10,160
uh which is

1401
00:57:10,160 --> 00:57:12,400
probably a rather substantial uh

1402
00:57:12,400 --> 00:57:16,160
reduction in in the overall load

1403
00:57:16,160 --> 00:57:17,520
uh

1404
00:57:17,520 --> 00:57:20,240
next slide please

1405
00:57:20,720 --> 00:57:23,280
so that's a summary again uh that you

1406
00:57:23,280 --> 00:57:24,640
have uh

1407
00:57:24,640 --> 00:57:27,280
the hashing and the signature part uh

1408
00:57:27,280 --> 00:57:30,240
spread around over a set of different uh

1409
00:57:30,240 --> 00:57:32,799
elements which are scattered around

1410
00:57:32,799 --> 00:57:36,640
and uh that's not very friendly to the

1411
00:57:36,640 --> 00:57:39,440
implementation aspects

1412
00:57:39,440 --> 00:57:42,480
so next slide please

1413
00:57:43,359 --> 00:57:46,799
uh discussion do we care about this

1414
00:57:46,799 --> 00:57:49,599
and we should probably keep it short

1415
00:57:49,599 --> 00:57:52,400
okay so um kiriti

1416
00:57:52,400 --> 00:57:56,000
um i this is my first iepg meeting and i

1417
00:57:56,000 --> 00:57:58,640
came to listen to inyas so thank you it

1418
00:57:58,640 --> 00:58:01,920
was worth it um i want to pop up a level

1419
00:58:01,920 --> 00:58:04,000
um if you go to slide eight

1420
00:58:04,000 --> 00:58:05,839
um he talks about

1421
00:58:05,839 --> 00:58:08,480
um you know we should take the specifics

1422
00:58:08,480 --> 00:58:10,960
of the compute platform

1423
00:58:10,960 --> 00:58:13,200
um

1424
00:58:13,359 --> 00:58:14,319
one

1425
00:58:14,319 --> 00:58:15,599
two three

1426
00:58:15,599 --> 00:58:16,480
four

1427
00:58:16,480 --> 00:58:18,160
yeah it's down in the corner not on the

1428
00:58:18,160 --> 00:58:20,879
screen it's not

1429
00:58:21,520 --> 00:58:23,599
one more there we go now i can see him

1430
00:58:23,599 --> 00:58:24,480
so

1431
00:58:24,480 --> 00:58:26,160
um

1432
00:58:26,160 --> 00:58:28,720
take protocol engineering needs to take

1433
00:58:28,720 --> 00:58:30,640
software and hardware specifics into

1434
00:58:30,640 --> 00:58:32,640
account seriously i think there's

1435
00:58:32,640 --> 00:58:34,240
something we need to do

1436
00:58:34,240 --> 00:58:36,400
in the ietf not just here

1437
00:58:36,400 --> 00:58:39,440
we're talking about changes to mpls yes

1438
00:58:39,440 --> 00:58:41,280
and we need to do this but

1439
00:58:41,280 --> 00:58:43,680
the word specifics bothers me

1440
00:58:43,680 --> 00:58:45,200
i think there are principles for example

1441
00:58:45,200 --> 00:58:47,280
the last thing you said about take the

1442
00:58:47,280 --> 00:58:48,880
as number and put it at the end in front

1443
00:58:48,880 --> 00:58:50,799
of the beginning i have no clue what you

1444
00:58:50,799 --> 00:58:52,799
were talking about but that seems to be

1445
00:58:52,799 --> 00:58:54,559
a change that is independent of

1446
00:58:54,559 --> 00:58:56,000
specifics

1447
00:58:56,000 --> 00:58:58,400
and so we need to really

1448
00:58:58,400 --> 00:59:00,720
look at

1449
00:59:00,720 --> 00:59:03,359
how can we improve whether it's wire

1450
00:59:03,359 --> 00:59:04,880
rate i mean

1451
00:59:04,880 --> 00:59:09,119
wire formats or or um

1452
00:59:09,119 --> 00:59:11,760
processing in in the forwarding path we

1453
00:59:11,760 --> 00:59:14,559
need to look at higher level things and

1454
00:59:14,559 --> 00:59:16,720
say can we do this in a way

1455
00:59:16,720 --> 00:59:17,520
that

1456
00:59:17,520 --> 00:59:18,960
you know we are taking those into

1457
00:59:18,960 --> 00:59:21,280
account we can't say this works well on

1458
00:59:21,280 --> 00:59:23,920
this particular platform or works very

1459
00:59:23,920 --> 00:59:26,559
well on this broadcom chip

1460
00:59:26,559 --> 00:59:29,040
but i think we still need to do more

1461
00:59:29,040 --> 00:59:30,640
than we are doing today

1462
00:59:30,640 --> 00:59:33,200
in terms of oh this this looks like a

1463
00:59:33,200 --> 00:59:34,960
nice wire format

1464
00:59:34,960 --> 00:59:37,359
let's go with it and then we get 34

1465
00:59:37,359 --> 00:59:38,480
minutes of

1466
00:59:38,480 --> 00:59:39,760
yes

1467
00:59:39,760 --> 00:59:40,960
so

1468
00:59:40,960 --> 00:59:43,119
quickly this this is basically uh in a

1469
00:59:43,119 --> 00:59:45,839
context that vectorization is a

1470
00:59:45,839 --> 00:59:47,920
commodity functionality on the compute

1471
00:59:47,920 --> 00:59:50,319
platforms today has been for more or

1472
00:59:50,319 --> 00:59:51,280
less

1473
00:59:51,280 --> 00:59:54,960
plus decades uh take exact 86 take arm

1474
00:59:54,960 --> 00:59:56,640
take risk five those are the three

1475
00:59:56,640 --> 00:59:58,480
generic purpose platforms which are

1476
00:59:58,480 --> 01:00:00,480
relevant in the industry they all have

1477
01:00:00,480 --> 01:00:03,440
that in one of the other usable shape

1478
01:00:03,440 --> 01:00:06,160
or we'll have

1479
01:00:06,720 --> 01:00:08,160
and i'm cutting the mic line and if we

1480
01:00:08,160 --> 01:00:11,118
can keep the question short

1481
01:00:11,200 --> 01:00:13,599
job sniders lastly

1482
01:00:13,599 --> 01:00:17,040
you asked whether uh people care um

1483
01:00:17,040 --> 01:00:19,119
i would like to raise my hands

1484
01:00:19,119 --> 01:00:20,799
i think it is interesting that you

1485
01:00:20,799 --> 01:00:23,119
observe that from a security perspective

1486
01:00:23,119 --> 01:00:24,319
it's okay

1487
01:00:24,319 --> 01:00:25,760
and i think that stems from the fact

1488
01:00:25,760 --> 01:00:28,480
that there is not much to take away

1489
01:00:28,480 --> 01:00:30,079
it's the most minimal thing that we

1490
01:00:30,079 --> 01:00:32,319
could do at global skill signing prefix

1491
01:00:32,319 --> 01:00:34,240
path and target

1492
01:00:34,240 --> 01:00:36,559
the suggestions you make to reshuffle

1493
01:00:36,559 --> 01:00:38,000
the layouts

1494
01:00:38,000 --> 01:00:40,799
it's probably not too late

1495
01:00:40,799 --> 01:00:42,079
and there's another interesting

1496
01:00:42,079 --> 01:00:45,040
mitigating uh aspect of deployment in

1497
01:00:45,040 --> 01:00:46,799
the real world that might be

1498
01:00:46,799 --> 01:00:48,480
underappreciated

1499
01:00:48,480 --> 01:00:51,280
i suspect that beach pseg is used on bgp

1500
01:00:51,280 --> 01:00:52,640
sessions

1501
01:00:52,640 --> 01:00:54,559
that are most valuable that have the

1502
01:00:54,559 --> 01:00:56,960
highest local preference are shuffling

1503
01:00:56,960 --> 01:00:58,559
the most bits

1504
01:00:58,559 --> 01:01:01,040
over the wire and have the least btp

1505
01:01:01,040 --> 01:01:04,720
state if i look at my employer's network

1506
01:01:04,720 --> 01:01:07,440
the most important links have are not

1507
01:01:07,440 --> 01:01:08,960
the links towards

1508
01:01:08,960 --> 01:01:11,440
full tables

1509
01:01:11,440 --> 01:01:13,280
so from that perspective i am slightly

1510
01:01:13,280 --> 01:01:15,680
optimistic that there is a lot of value

1511
01:01:15,680 --> 01:01:16,559
in

1512
01:01:16,559 --> 01:01:19,119
working to deploy phpsec in its current

1513
01:01:19,119 --> 01:01:20,559
version

1514
01:01:20,559 --> 01:01:23,200
and in parallel work to optimize the

1515
01:01:23,200 --> 01:01:25,119
current version based on

1516
01:01:25,119 --> 01:01:26,640
research

1517
01:01:26,640 --> 01:01:28,960
as what you presented just now or other

1518
01:01:28,960 --> 01:01:31,440
operational observations

1519
01:01:31,440 --> 01:01:34,160
and that there is

1520
01:01:34,319 --> 01:01:36,880
some leeway in in how the deployment

1521
01:01:36,880 --> 01:01:39,839
actually happens so if i compare say

1522
01:01:39,839 --> 01:01:41,520
route origin validation i think most

1523
01:01:41,520 --> 01:01:43,599
values stemmed from the fact that

1524
01:01:43,599 --> 01:01:45,119
the core of the default three zones

1525
01:01:45,119 --> 01:01:48,000
started first the so-called tier ones

1526
01:01:48,000 --> 01:01:50,079
but i suspect hp6

1527
01:01:50,079 --> 01:01:52,960
value comes from deploying at the

1528
01:01:52,960 --> 01:01:54,559
fringes of the network

1529
01:01:54,559 --> 01:01:55,599
say

1530
01:01:55,599 --> 01:01:57,920
cash boxes embedded in to people's

1531
01:01:57,920 --> 01:01:59,760
network

1532
01:01:59,760 --> 01:02:03,119
but thank you for sharing this

1533
01:02:05,119 --> 01:02:07,200
and justin sierra so thanks for doing

1534
01:02:07,200 --> 01:02:09,920
the research it's very timely

1535
01:02:09,920 --> 01:02:12,960
so the situation is two weeks ago fcc

1536
01:02:12,960 --> 01:02:14,559
at least in the u.s realm asked us how

1537
01:02:14,559 --> 01:02:16,799
come you haven't deployed bgp yesterday

1538
01:02:16,799 --> 01:02:19,119
how come we are so insecure

1539
01:02:19,119 --> 01:02:20,799
probably people live in the us you have

1540
01:02:20,799 --> 01:02:22,960
seen two weeks ago fcc published

1541
01:02:22,960 --> 01:02:25,039
kind of requests for information about

1542
01:02:25,039 --> 01:02:26,640
bgp security

1543
01:02:26,640 --> 01:02:28,640
so when i go to

1544
01:02:28,640 --> 01:02:31,440
to him and ask where's bgp security he

1545
01:02:31,440 --> 01:02:33,359
says you need to buy new hardware even

1546
01:02:33,359 --> 01:02:35,760
so whatever i buy today brings at least

1547
01:02:35,760 --> 01:02:37,039
broad volvo

1548
01:02:37,039 --> 01:02:39,119
broadwell class intel right

1549
01:02:39,119 --> 01:02:40,240
so

1550
01:02:40,240 --> 01:02:42,319
i know every vendor has implemented live

1551
01:02:42,319 --> 01:02:44,880
beta code gdbgb security so whatever i

1552
01:02:44,880 --> 01:02:47,200
found it's not a secret it's basic

1553
01:02:47,200 --> 01:02:49,119
software engineering

1554
01:02:49,119 --> 01:02:50,640
can we

1555
01:02:50,640 --> 01:02:53,839
create some kind of design team here to

1556
01:02:53,839 --> 01:02:55,359
take this actually seriously bring him

1557
01:02:55,359 --> 01:02:57,280
back into implementation and get

1558
01:02:57,280 --> 01:02:58,880
something working

1559
01:02:58,880 --> 01:03:01,520
please don't leave this presentation

1560
01:03:01,520 --> 01:03:03,119
here bring it here

1561
01:03:03,119 --> 01:03:04,720
inside the ropes or

1562
01:03:04,720 --> 01:03:06,079
somewhere

1563
01:03:06,079 --> 01:03:09,520
so this is on the agenda for side drops

1564
01:03:09,520 --> 01:03:11,920
in a slightly different message probably

1565
01:03:11,920 --> 01:03:12,720
now

1566
01:03:12,720 --> 01:03:14,960
for practical deployment of bgp sec

1567
01:03:14,960 --> 01:03:17,599
there are two parts bgp set the protocol

1568
01:03:17,599 --> 01:03:19,520
and the under supporting infrastructure

1569
01:03:19,520 --> 01:03:21,359
of bgp sec

1570
01:03:21,359 --> 01:03:24,400
and uh the second problem is probably

1571
01:03:24,400 --> 01:03:26,400
harder

1572
01:03:26,400 --> 01:03:28,319
well at least

1573
01:03:28,319 --> 01:03:30,640
it seems now

1574
01:03:30,640 --> 01:03:33,440
right uh so it's not enough to have a

1575
01:03:33,440 --> 01:03:36,319
perfect protocol uh which is not

1576
01:03:36,319 --> 01:03:38,960
conflicting uh with with uh the platform

1577
01:03:38,960 --> 01:03:40,960
specifics you also need other things

1578
01:03:40,960 --> 01:03:43,359
around and yes there's quite a large

1579
01:03:43,359 --> 01:03:46,078
amount of work

1580
01:03:46,559 --> 01:03:48,559
we need to start yep somewhere but i

1581
01:03:48,559 --> 01:03:50,559
think we need to cut the mic for now and

1582
01:03:50,559 --> 01:03:51,839
we can maybe carry out the discussion

1583
01:03:51,839 --> 01:03:54,559
inside cool thank you very much just for

1584
01:03:54,559 --> 01:03:55,599
time

1585
01:03:55,599 --> 01:03:58,599
lenny

1586
01:04:02,160 --> 01:04:04,960
let me just find your slides

1587
01:04:04,960 --> 01:04:07,119
okay

1588
01:04:07,119 --> 01:04:10,640
this one promises to be entertaining

1589
01:04:10,640 --> 01:04:13,200
slides

1590
01:04:13,200 --> 01:04:15,839
here we go

1591
01:04:15,839 --> 01:04:18,640
share and i will grant you the ability

1592
01:04:18,640 --> 01:04:21,039
to change slides you have 10

1593
01:04:21,039 --> 01:04:23,920
minutes and we will start them

1594
01:04:23,920 --> 01:04:24,880
now

1595
01:04:24,880 --> 01:04:27,440
thank you

1596
01:04:27,440 --> 01:04:28,319
thank you

1597
01:04:28,319 --> 01:04:30,319
um

1598
01:04:30,319 --> 01:04:33,039
so i'm going to talk uh today about uh a

1599
01:04:33,039 --> 01:04:35,440
recent draft that we submitted uh on

1600
01:04:35,440 --> 01:04:38,319
regional internet blocking um we are

1601
01:04:38,319 --> 01:04:41,760
presenting this in the interior and plan

1602
01:04:41,760 --> 01:04:43,760
to uh

1603
01:04:43,760 --> 01:04:45,839
see if there's interest there to adopt

1604
01:04:45,839 --> 01:04:47,920
um

1605
01:04:47,920 --> 01:04:49,520
uh before we get started just a few uh

1606
01:04:49,520 --> 01:04:53,200
disclaimers um the the content

1607
01:04:53,200 --> 01:04:55,839
in this draft represents ideas solely of

1608
01:04:55,839 --> 01:04:57,039
the authors

1609
01:04:57,039 --> 01:04:58,480
and does not reflect any of the

1610
01:04:58,480 --> 01:04:59,760
positions

1611
01:04:59,760 --> 01:05:03,760
uh or views necessarily of any of our uh

1612
01:05:03,760 --> 01:05:05,119
affiliations

1613
01:05:05,119 --> 01:05:07,440
um likewise this kind of goes without

1614
01:05:07,440 --> 01:05:08,400
saying

1615
01:05:08,400 --> 01:05:10,160
uh for those familiar with iepf

1616
01:05:10,160 --> 01:05:12,880
processes but for those who aren't um

1617
01:05:12,880 --> 01:05:13,839
this is

1618
01:05:13,839 --> 01:05:15,760
an individual contribution and does not

1619
01:05:15,760 --> 01:05:18,640
represent ieff consensus

1620
01:05:18,640 --> 01:05:20,160
all right we got that out of the way now

1621
01:05:20,160 --> 01:05:22,799
for some of the fun um so the first

1622
01:05:22,799 --> 01:05:24,400
question is

1623
01:05:24,400 --> 01:05:25,680
you know a little bit of background and

1624
01:05:25,680 --> 01:05:27,599
motivation on why

1625
01:05:27,599 --> 01:05:31,039
uh we wrote this um this draft

1626
01:05:31,039 --> 01:05:32,240
um

1627
01:05:32,240 --> 01:05:34,319
in light of recent geopolitical events

1628
01:05:34,319 --> 01:05:35,359
um

1629
01:05:35,359 --> 01:05:37,119
there has been discussions in various

1630
01:05:37,119 --> 01:05:38,960
circles uh both technically and

1631
01:05:38,960 --> 01:05:41,440
non-technically politically um on the

1632
01:05:41,440 --> 01:05:43,680
concept of inter of blocking internet

1633
01:05:43,680 --> 01:05:48,240
connectivity uh for a region um

1634
01:05:48,240 --> 01:05:51,680
kind of the internet version of uh

1635
01:05:51,680 --> 01:05:53,599
economic sanctions or

1636
01:05:53,599 --> 01:05:55,359
connectivity

1637
01:05:55,359 --> 01:05:56,720
um so

1638
01:05:56,720 --> 01:05:59,119
what we wanted to do is to describe well

1639
01:05:59,119 --> 01:06:01,440
what would that look like um

1640
01:06:01,440 --> 01:06:04,480
what would be some of the ways in which

1641
01:06:04,480 --> 01:06:05,920
this kind of blocking could be

1642
01:06:05,920 --> 01:06:07,200
accomplished

1643
01:06:07,200 --> 01:06:10,240
and what are the implications um

1644
01:06:10,240 --> 01:06:11,520
positive negative what are the

1645
01:06:11,520 --> 01:06:15,599
advantages disadvantages what are the

1646
01:06:15,680 --> 01:06:16,960
potential

1647
01:06:16,960 --> 01:06:19,839
uh consequences um intended and uh

1648
01:06:19,839 --> 01:06:21,200
unintended

1649
01:06:21,200 --> 01:06:23,280
um the the the audience uh the target

1650
01:06:23,280 --> 01:06:25,119
audience for this document

1651
01:06:25,119 --> 01:06:28,160
uh is policymakers um as well as the

1652
01:06:28,160 --> 01:06:29,920
general public basically

1653
01:06:29,920 --> 01:06:31,039
everybody who's not in the room right

1654
01:06:31,039 --> 01:06:31,920
now

1655
01:06:31,920 --> 01:06:33,200
or

1656
01:06:33,200 --> 01:06:34,880
in this working group

1657
01:06:34,880 --> 01:06:38,160
but is interested in uh understanding

1658
01:06:38,160 --> 01:06:39,440
what we

1659
01:06:39,440 --> 01:06:41,599
who are in the room um kind of have as

1660
01:06:41,599 --> 01:06:44,880
common knowledge uh on the topic of uh

1661
01:06:44,880 --> 01:06:49,200
filtering blocking um and you know

1662
01:06:49,200 --> 01:06:50,799
what it would look like and the kinds of

1663
01:06:50,799 --> 01:06:52,240
considerations

1664
01:06:52,240 --> 01:06:53,200
uh

1665
01:06:53,200 --> 01:06:54,880
one should know about

1666
01:06:54,880 --> 01:06:57,200
um if one wanted to block connectivity

1667
01:06:57,200 --> 01:06:58,799
for a region

1668
01:06:58,799 --> 01:07:01,920
the idea here is that um policymakers do

1669
01:07:01,920 --> 01:07:03,359
depend on

1670
01:07:03,359 --> 01:07:06,880
good unbiased information um sober uh

1671
01:07:06,880 --> 01:07:09,599
clear technical uh information on you

1672
01:07:09,599 --> 01:07:12,160
know what is possible how it works and

1673
01:07:12,160 --> 01:07:15,200
would it actually do anything um

1674
01:07:15,200 --> 01:07:17,359
so that's kind of the idea behind this

1675
01:07:17,359 --> 01:07:20,960
um is to discuss you know the potential

1676
01:07:20,960 --> 01:07:24,000
intended or unintended consequences

1677
01:07:24,000 --> 01:07:26,400
in terms of what this document is not um

1678
01:07:26,400 --> 01:07:28,640
we are not advocating for or against any

1679
01:07:28,640 --> 01:07:31,760
particular policy uh or position um we

1680
01:07:31,760 --> 01:07:33,280
are not trying to inject political

1681
01:07:33,280 --> 01:07:35,599
opinion as to whether or not this is or

1682
01:07:35,599 --> 01:07:37,520
is not a good idea we're just trying to

1683
01:07:37,520 --> 01:07:38,400
really

1684
01:07:38,400 --> 01:07:40,480
you know report the news this is how it

1685
01:07:40,480 --> 01:07:42,559
would work um this is some of the things

1686
01:07:42,559 --> 01:07:44,960
it might do uh so that you know people

1687
01:07:44,960 --> 01:07:47,680
who do want to make it an opinion um on

1688
01:07:47,680 --> 01:07:49,119
these things could make uh you know

1689
01:07:49,119 --> 01:07:51,280
perhaps a better informed

1690
01:07:51,280 --> 01:07:53,200
opinion on the matter

1691
01:07:53,200 --> 01:07:54,799
um we're not

1692
01:07:54,799 --> 01:07:57,119
uh analyzing the ethics

1693
01:07:57,119 --> 01:07:59,119
of such an approach

1694
01:07:59,119 --> 01:08:00,559
uh we also

1695
01:08:00,559 --> 01:08:03,280
obviously there is a you know an ongoing

1696
01:08:03,280 --> 01:08:04,559
um

1697
01:08:04,559 --> 01:08:07,200
conflict right now that inspired uh the

1698
01:08:07,200 --> 01:08:09,200
writing of this draft but we would like

1699
01:08:09,200 --> 01:08:12,079
this to be generic enough that it is

1700
01:08:12,079 --> 01:08:14,319
applicable to more than just one episode

1701
01:08:14,319 --> 01:08:16,000
um this is probably not the last

1702
01:08:16,000 --> 01:08:17,520
conflict that's going to occur where

1703
01:08:17,520 --> 01:08:20,719
this topic might pop up um so hopefully

1704
01:08:20,719 --> 01:08:23,839
this could be useful um both now and in

1705
01:08:23,839 --> 01:08:25,279
the future

1706
01:08:25,279 --> 01:08:26,479
um

1707
01:08:26,479 --> 01:08:29,279
also uh

1708
01:08:29,279 --> 01:08:31,520
it's it's this is not meant to be a

1709
01:08:31,520 --> 01:08:33,920
blind a guide on how blocking works or

1710
01:08:33,920 --> 01:08:35,359
what is blocking

1711
01:08:35,359 --> 01:08:36,319
um

1712
01:08:36,319 --> 01:08:37,279
uh

1713
01:08:37,279 --> 01:08:40,238
or protection against security threats

1714
01:08:40,238 --> 01:08:41,839
um let's say that there was threats

1715
01:08:41,839 --> 01:08:44,479
coming out of a region uh and you need

1716
01:08:44,479 --> 01:08:46,238
to protect yourself from that region um

1717
01:08:46,238 --> 01:08:48,479
this is more of you know sanction

1718
01:08:48,479 --> 01:08:51,040
purposes um we're not trying to also

1719
01:08:51,040 --> 01:08:52,799
describe you know kind of a how-to guide

1720
01:08:52,799 --> 01:08:55,279
on weaponizing the internet um we have

1721
01:08:55,279 --> 01:08:57,679
we're not letting out any secrets um

1722
01:08:57,679 --> 01:09:00,158
this is uh pretty well-known approaches

1723
01:09:00,158 --> 01:09:01,359
and you'll see

1724
01:09:01,359 --> 01:09:03,279
um you know nothing groundbreaking here

1725
01:09:03,279 --> 01:09:05,040
these are these are pretty well known

1726
01:09:05,040 --> 01:09:06,960
approaches that operators use

1727
01:09:06,960 --> 01:09:10,880
um fairly commonly uh for for

1728
01:09:10,880 --> 01:09:12,799
legitimate blocking purposes

1729
01:09:12,799 --> 01:09:15,120
we also didn't go into a malicious

1730
01:09:15,120 --> 01:09:16,158
attack

1731
01:09:16,158 --> 01:09:18,479
approaches and kind of a survey of those

1732
01:09:18,479 --> 01:09:20,080
that's an interesting topic uh it's

1733
01:09:20,080 --> 01:09:22,640
probably you know worth worth discussion

1734
01:09:22,640 --> 01:09:25,198
um but uh you know that's such a broad

1735
01:09:25,198 --> 01:09:27,279
topic and it's outside the

1736
01:09:27,279 --> 01:09:28,158
uh

1737
01:09:28,158 --> 01:09:31,120
the the scope and the um expertise of

1738
01:09:31,120 --> 01:09:33,120
the authors so we um we left that

1739
01:09:33,120 --> 01:09:35,198
outside just over this document

1740
01:09:35,198 --> 01:09:36,399
all right so the meat of the document

1741
01:09:36,399 --> 01:09:38,799
what's actually in this document

1742
01:09:38,799 --> 01:09:39,759
um

1743
01:09:39,759 --> 01:09:41,520
we start at the physical layer and work

1744
01:09:41,520 --> 01:09:44,960
our way up um so um you know again

1745
01:09:44,960 --> 01:09:47,520
nothing groundbreaking here uh

1746
01:09:47,520 --> 01:09:48,640
you know what would happen if you

1747
01:09:48,640 --> 01:09:51,120
disconnected cables um uh and then we

1748
01:09:51,120 --> 01:09:53,600
move on to the routing control point um

1749
01:09:53,600 --> 01:09:55,679
what it would look like to deep hear

1750
01:09:55,679 --> 01:09:58,080
someone uh what we would be the results

1751
01:09:58,080 --> 01:10:00,000
of that um there's route token based on

1752
01:10:00,000 --> 01:10:03,440
prefix or asn um there's a data plane

1753
01:10:03,440 --> 01:10:05,040
filtering

1754
01:10:05,040 --> 01:10:07,600
go ip access control list

1755
01:10:07,600 --> 01:10:10,480
uh and then we looked at dns

1756
01:10:10,480 --> 01:10:12,480
you know what it would look like to uh

1757
01:10:12,480 --> 01:10:14,159
you know some

1758
01:10:14,159 --> 01:10:15,679
some approaches might be removing

1759
01:10:15,679 --> 01:10:19,360
delegations to plbs and other relevant

1760
01:10:19,360 --> 01:10:22,560
uh domains um also blocking resolution

1761
01:10:22,560 --> 01:10:24,560
requests that might be coming from a

1762
01:10:24,560 --> 01:10:28,080
resolving name server or um in hosts uh

1763
01:10:28,080 --> 01:10:30,640
that might be in a region

1764
01:10:30,640 --> 01:10:33,440
um the next area we examined was all

1765
01:10:33,440 --> 01:10:34,800
right that's inefficiency would this

1766
01:10:34,800 --> 01:10:36,640
actually work what would this do

1767
01:10:36,640 --> 01:10:39,360
um some of the intended and unintended

1768
01:10:39,360 --> 01:10:40,560
consequences

1769
01:10:40,560 --> 01:10:42,320
um so there's the obvious you know

1770
01:10:42,320 --> 01:10:44,800
blocking connectivity for a region

1771
01:10:44,800 --> 01:10:47,199
may be counterproductive to the aims of

1772
01:10:47,199 --> 01:10:48,719
a policymaker

1773
01:10:48,719 --> 01:10:51,520
um so you know perhaps a policymaker

1774
01:10:51,520 --> 01:10:53,520
might want messages to actually get in

1775
01:10:53,520 --> 01:10:55,600
and out of the region and blocking that

1776
01:10:55,600 --> 01:10:57,040
connectivity might

1777
01:10:57,040 --> 01:11:00,800
might prevent that um they may want uh

1778
01:11:00,800 --> 01:11:03,120
perhaps certain parties within a region

1779
01:11:03,120 --> 01:11:05,120
to be able to communicate freely um

1780
01:11:05,120 --> 01:11:07,760
because those uh say oppositional

1781
01:11:07,760 --> 01:11:10,320
parties might be sympathetic uh to the

1782
01:11:10,320 --> 01:11:13,280
views of the policymaker so again

1783
01:11:13,280 --> 01:11:16,000
you know might be some might be a reason

1784
01:11:16,000 --> 01:11:18,320
you know uh to be aware of that you know

1785
01:11:18,320 --> 01:11:20,320
this might not happen if uh if you do

1786
01:11:20,320 --> 01:11:21,840
block connectivity

1787
01:11:21,840 --> 01:11:23,440
um also it may

1788
01:11:23,440 --> 01:11:25,679
end up empowering um you know a party

1789
01:11:25,679 --> 01:11:27,600
that is you know the target of sanctions

1790
01:11:27,600 --> 01:11:29,840
allowing them to uh

1791
01:11:29,840 --> 01:11:32,239
that you know party to or regime to

1792
01:11:32,239 --> 01:11:34,400
perhaps consolidate their power by

1793
01:11:34,400 --> 01:11:37,199
um not being able to uh allow

1794
01:11:37,199 --> 01:11:39,360
um some of the information that we just

1795
01:11:39,360 --> 01:11:40,800
got mentioned to

1796
01:11:40,800 --> 01:11:44,800
to go in or out or within a region

1797
01:11:44,800 --> 01:11:46,080
uh the thing to keep in mind is a

1798
01:11:46,080 --> 01:11:49,360
network uh is a moral it does not uh

1799
01:11:49,360 --> 01:11:51,679
discriminate between uh it just transmit

1800
01:11:51,679 --> 01:11:53,920
fits whether they're good or bad uh

1801
01:11:53,920 --> 01:11:55,520
whether they comprise good or bad

1802
01:11:55,520 --> 01:11:57,360
messaging um

1803
01:11:57,360 --> 01:11:59,440
but the network just pushes them you

1804
01:11:59,440 --> 01:12:01,360
know from one place to another

1805
01:12:01,360 --> 01:12:03,679
um also uh

1806
01:12:03,679 --> 01:12:06,640
autonomous systems and prefixes are not

1807
01:12:06,640 --> 01:12:08,719
allocated based on geopolitical

1808
01:12:08,719 --> 01:12:11,199
boundaries um they're loosely

1809
01:12:11,199 --> 01:12:13,920
uh allocated uh on region

1810
01:12:13,920 --> 01:12:14,960
um

1811
01:12:14,960 --> 01:12:17,199
and there are registries uh about those

1812
01:12:17,199 --> 01:12:18,239
registers they are registered

1813
01:12:18,239 --> 01:12:20,400
information um and you know can be

1814
01:12:20,400 --> 01:12:22,719
fairly accurate um also things can

1815
01:12:22,719 --> 01:12:24,080
change uh

1816
01:12:24,080 --> 01:12:26,320
an entity that has assigned

1817
01:12:26,320 --> 01:12:30,159
a a resource like an asm or a prefix uh

1818
01:12:30,159 --> 01:12:32,239
that exists within one region while it

1819
01:12:32,239 --> 01:12:33,679
might move to another region will be

1820
01:12:33,679 --> 01:12:36,000
acquired by a multinational corporation

1821
01:12:36,000 --> 01:12:38,080
that you know multinational entity that

1822
01:12:38,080 --> 01:12:40,560
might start advertising uh that route or

1823
01:12:40,560 --> 01:12:43,040
that asm in a different region um so

1824
01:12:43,040 --> 01:12:44,800
it's really kind of difficult there's

1825
01:12:44,800 --> 01:12:48,719
tourist borders um when it comes to um

1826
01:12:48,719 --> 01:12:51,760
network um resource allocation

1827
01:12:51,760 --> 01:12:53,760
um also you know the internet is by

1828
01:12:53,760 --> 01:12:56,320
design decentralized um

1829
01:12:56,320 --> 01:12:58,400
and that makes it you know nearly

1830
01:12:58,400 --> 01:13:00,960
impossible to completely uh block a

1831
01:13:00,960 --> 01:13:02,560
region that's that's a feature not above

1832
01:13:02,560 --> 01:13:03,600
bug

1833
01:13:03,600 --> 01:13:07,600
of the system um but uh

1834
01:13:07,600 --> 01:13:09,280
you can put a good dent in in

1835
01:13:09,280 --> 01:13:11,520
connectivity and throughput um it's at

1836
01:13:11,520 --> 01:13:13,679
certain checkpoints

1837
01:13:13,679 --> 01:13:15,920
uh there has been some um you know prior

1838
01:13:15,920 --> 01:13:17,280
art in the area

1839
01:13:17,280 --> 01:13:19,360
rfc 7754

1840
01:13:19,360 --> 01:13:21,679
um talks about uh internet service

1841
01:13:21,679 --> 01:13:23,040
blocking and filtering but it's more

1842
01:13:23,040 --> 01:13:24,400
focused on

1843
01:13:24,400 --> 01:13:27,440
um application level uh and transport

1844
01:13:27,440 --> 01:13:30,320
than actual network infrastructure um

1845
01:13:30,320 --> 01:13:32,400
also the purposes are a bit different um

1846
01:13:32,400 --> 01:13:34,159
it's more like you know security

1847
01:13:34,159 --> 01:13:35,520
objectionability and business

1848
01:13:35,520 --> 01:13:37,679
arrangements uh and less so about

1849
01:13:37,679 --> 01:13:38,800
sanctioning

1850
01:13:38,800 --> 01:13:41,280
um but there are some overlapping themes

1851
01:13:41,280 --> 01:13:42,480
um

1852
01:13:42,480 --> 01:13:45,600
uh there's a draft in the pea rg working

1853
01:13:45,600 --> 01:13:47,840
group on censorship um and again this is

1854
01:13:47,840 --> 01:13:50,239
more focused on censorship by a regime

1855
01:13:50,239 --> 01:13:51,840
within their borders rather than

1856
01:13:51,840 --> 01:13:53,600
blocking their region

1857
01:13:53,600 --> 01:13:55,199
stuff coming out

1858
01:13:55,199 --> 01:13:59,719
for the purpose of sanctions um

1859
01:14:00,239 --> 01:14:01,120
sure

1860
01:14:01,120 --> 01:14:03,440
uh just finishing up um so

1861
01:14:03,440 --> 01:14:04,880
uh you know like i said we're gonna be

1862
01:14:04,880 --> 01:14:06,640
presenting this in interior uh looking

1863
01:14:06,640 --> 01:14:08,560
for adoption um you know first question

1864
01:14:08,560 --> 01:14:10,320
we'll ask is this document useful is

1865
01:14:10,320 --> 01:14:12,400
this interesting is it worth working on

1866
01:14:12,400 --> 01:14:15,120
um are there other things we missed um

1867
01:14:15,120 --> 01:14:16,880
uh you know the question of gcp versus

1868
01:14:16,880 --> 01:14:19,280
informational and um

1869
01:14:19,280 --> 01:14:21,840
review and comments um and you know if

1870
01:14:21,840 --> 01:14:24,320
you have produce to throw um shop at

1871
01:14:24,320 --> 01:14:27,320
interior

1872
01:14:28,800 --> 01:14:30,800
with that i'd be happy to answer any

1873
01:14:30,800 --> 01:14:32,719
questions if there is time available or

1874
01:14:32,719 --> 01:14:36,239
if there are any questions available

1875
01:14:38,239 --> 01:14:39,840
excellent i guess more questions will

1876
01:14:39,840 --> 01:14:41,840
happen in an

1877
01:14:41,840 --> 01:14:43,440
because i'm suspecting there will be

1878
01:14:43,440 --> 01:14:45,040
some

1879
01:14:45,040 --> 01:14:46,640
um

1880
01:14:46,640 --> 01:14:48,960
thank you very much honey

1881
01:14:48,960 --> 01:14:51,040
and yep

1882
01:14:51,040 --> 01:14:52,960
if you want one quick question make it

1883
01:14:52,960 --> 01:14:56,199
really short

1884
01:14:56,320 --> 01:14:57,360
uh

1885
01:14:57,360 --> 01:14:59,600
quite obviously

1886
01:14:59,600 --> 01:15:03,520
any idea of blocking

1887
01:15:03,920 --> 01:15:06,960
is in conflict with the ietf goal of

1888
01:15:06,960 --> 01:15:11,480
making the internet work better

1889
01:15:13,120 --> 01:15:15,199
figuring out

1890
01:15:15,199 --> 01:15:16,560
exactly

1891
01:15:16,560 --> 01:15:18,880
good information about the effects of

1892
01:15:18,880 --> 01:15:20,080
blocking

1893
01:15:20,080 --> 01:15:22,560
quite obviously makes a lot of sense in

1894
01:15:22,560 --> 01:15:24,880
this context

1895
01:15:24,880 --> 01:15:26,159
talking

1896
01:15:26,159 --> 01:15:29,040
about blocking

1897
01:15:29,040 --> 01:15:30,239
uh

1898
01:15:30,239 --> 01:15:32,080
however

1899
01:15:32,080 --> 01:15:35,600
can be can can trigger with certain

1900
01:15:35,600 --> 01:15:38,400
parties the idea that well okay they

1901
01:15:38,400 --> 01:15:40,000
should actually

1902
01:15:40,000 --> 01:15:41,440
uh

1903
01:15:41,440 --> 01:15:43,840
think about it and

1904
01:15:43,840 --> 01:15:47,280
myself i have noticed over the past

1905
01:15:47,280 --> 01:15:48,320
years

1906
01:15:48,320 --> 01:15:51,199
couple of events were parties were

1907
01:15:51,199 --> 01:15:53,520
starting to think about

1908
01:15:53,520 --> 01:15:56,960
sovereign internets

1909
01:15:57,520 --> 01:15:58,800
and

1910
01:15:58,800 --> 01:16:00,159
kind of

1911
01:16:00,159 --> 01:16:02,000
part of that

1912
01:16:02,000 --> 01:16:04,719
quite obvious he has been

1913
01:16:04,719 --> 01:16:07,840
motivated by preparing

1914
01:16:07,840 --> 01:16:11,120
against the threat of being blocked in

1915
01:16:11,120 --> 01:16:13,679
some way

1916
01:16:14,239 --> 01:16:16,159
and

1917
01:16:16,159 --> 01:16:18,840
regardless

1918
01:16:18,840 --> 01:16:22,719
whether a technical paper explains

1919
01:16:22,719 --> 01:16:27,120
in detail the bad effects of of blockage

1920
01:16:27,120 --> 01:16:28,400
and

1921
01:16:28,400 --> 01:16:30,560
in the end

1922
01:16:30,560 --> 01:16:32,719
uh

1923
01:16:32,719 --> 01:16:36,800
suggests that blockage should be avoided

1924
01:16:36,800 --> 01:16:40,239
the mere existence of such papers

1925
01:16:40,239 --> 01:16:42,640
can be used by parties who are

1926
01:16:42,640 --> 01:16:45,920
interested in segmenting

1927
01:16:45,920 --> 01:16:49,760
and well okay maybe uh reinforce their

1928
01:16:49,760 --> 01:16:52,800
empire of life

1929
01:16:53,600 --> 01:16:56,880
so one has to be extremely cautious when

1930
01:16:56,880 --> 01:16:59,280
doing such papers

1931
01:16:59,280 --> 01:17:02,560
uh to to figure out ways

1932
01:17:02,560 --> 01:17:04,080
and that

1933
01:17:04,080 --> 01:17:07,520
these ways need to be extremely clever

1934
01:17:07,520 --> 01:17:09,840
to avoid feeding

1935
01:17:09,840 --> 01:17:11,440
that evil

1936
01:17:11,440 --> 01:17:14,640
that evil track of arguments

1937
01:17:14,640 --> 01:17:17,040
thank you

1938
01:17:17,040 --> 01:17:18,000
thank you

1939
01:17:18,000 --> 01:17:21,360
um of all fair points and um

1940
01:17:21,360 --> 01:17:23,120
you know we're we're not trying again

1941
01:17:23,120 --> 01:17:24,719
we're not trying to say this is good or

1942
01:17:24,719 --> 01:17:25,920
this is bad

1943
01:17:25,920 --> 01:17:27,120
we're just trying to say this is what

1944
01:17:27,120 --> 01:17:29,040
would happen uh to the best of our

1945
01:17:29,040 --> 01:17:31,920
ability if one did this uh to let others

1946
01:17:31,920 --> 01:17:34,560
decide if this is good or bad and we

1947
01:17:34,560 --> 01:17:35,920
like i said i don't think we have any

1948
01:17:35,920 --> 01:17:38,400
trade secrets or network secrets here

1949
01:17:38,400 --> 01:17:40,000
um there's really nothing novel here

1950
01:17:40,000 --> 01:17:41,840
this is pretty pedestrian uh

1951
01:17:41,840 --> 01:17:43,840
descriptions of what is going on so i

1952
01:17:43,840 --> 01:17:45,520
don't think we'd be planting any ideas

1953
01:17:45,520 --> 01:17:47,120
in anybody's mind but

1954
01:17:47,120 --> 01:17:49,199
thank you for that feedback

1955
01:17:49,199 --> 01:17:50,800
thank you

1956
01:17:50,800 --> 01:17:52,960
okay and

1957
01:17:52,960 --> 01:17:54,320
yes

1958
01:17:54,320 --> 01:17:55,600
so

1959
01:17:55,600 --> 01:17:59,440
this presentation is about my efforts in

1960
01:17:59,440 --> 01:18:00,800
setting up a

1961
01:18:00,800 --> 01:18:02,080
useful

1962
01:18:02,080 --> 01:18:03,760
rpi beacon

1963
01:18:03,760 --> 01:18:06,000
useful for measuring

1964
01:18:06,000 --> 01:18:08,320
route origin validation

1965
01:18:08,320 --> 01:18:13,199
and also hopefully useful for you

1966
01:18:13,199 --> 01:18:16,080
i was searching on the internet for a

1967
01:18:16,080 --> 01:18:20,000
picture of a lighthouse or a beacon

1968
01:18:20,000 --> 01:18:23,360
that would lure ships towards it

1969
01:18:23,360 --> 01:18:27,280
and a vortex in front of it

1970
01:18:27,280 --> 01:18:29,760
and you can see that i found a picture

1971
01:18:29,760 --> 01:18:30,880
like that

1972
01:18:30,880 --> 01:18:33,040
and this is a picture of the

1973
01:18:33,040 --> 01:18:35,520
excellent rock album

1974
01:18:35,520 --> 01:18:38,000
the milestone ascendant

1975
01:18:38,000 --> 01:18:41,679
which also has a accompanying book

1976
01:18:41,679 --> 01:18:43,040
and

1977
01:18:43,040 --> 01:18:44,400
of the

1978
01:18:44,400 --> 01:18:47,760
sydney based rock artist duncan schmidt

1979
01:18:47,760 --> 01:18:50,080
by saying this i have his permission to

1980
01:18:50,080 --> 01:18:52,400
use this picture so thank you

1981
01:18:52,400 --> 01:18:55,639
next slide

1982
01:18:55,679 --> 01:18:56,880
so

1983
01:18:56,880 --> 01:18:59,120
i also

1984
01:18:59,120 --> 01:19:00,640
made a

1985
01:19:00,640 --> 01:19:03,600
good effort to get this presentation

1986
01:19:03,600 --> 01:19:07,120
here at the ipg i submitted

1987
01:19:07,120 --> 01:19:08,640
three times or so

1988
01:19:08,640 --> 01:19:09,840
i think

1989
01:19:09,840 --> 01:19:12,719
and because you know

1990
01:19:12,719 --> 01:19:14,320
i

1991
01:19:14,320 --> 01:19:16,960
had to set up our rpi beacon i will tell

1992
01:19:16,960 --> 01:19:18,239
you later why

1993
01:19:18,239 --> 01:19:21,440
but i'm not really an rpi expert because

1994
01:19:21,440 --> 01:19:23,199
i know that you all

1995
01:19:23,199 --> 01:19:26,320
are all rpki experts so that's a

1996
01:19:26,320 --> 01:19:28,400
really good audience

1997
01:19:28,400 --> 01:19:30,640
and i'm also a little bit nervous

1998
01:19:30,640 --> 01:19:31,760
because

1999
01:19:31,760 --> 01:19:35,040
you are all rpgi experts

2000
01:19:35,040 --> 01:19:38,320
uh but yeah i'm i'm hoping to make some

2001
01:19:38,320 --> 01:19:41,199
rpi beacon friends here that can help me

2002
01:19:41,199 --> 01:19:45,120
uh you know with this effort and tell me

2003
01:19:45,120 --> 01:19:47,840
if what i'm doing makes sense

2004
01:19:47,840 --> 01:19:50,400
and how to make it better and how to

2005
01:19:50,400 --> 01:19:52,400
make it more useful

2006
01:19:52,400 --> 01:19:53,520
and

2007
01:19:53,520 --> 01:19:56,320
yeah well i will tell you later but i

2008
01:19:56,320 --> 01:19:58,719
could also use some additional ipv4

2009
01:19:58,719 --> 01:20:01,280
resources for some specific

2010
01:20:01,280 --> 01:20:03,280
aspects of this beacon

2011
01:20:03,280 --> 01:20:05,840
next slide

2012
01:20:06,480 --> 01:20:09,280
so you here i do sometimes do dns

2013
01:20:09,280 --> 01:20:12,000
measurements here you see a picture

2014
01:20:12,000 --> 01:20:13,520
with me

2015
01:20:13,520 --> 01:20:16,080
at the taken at the internet measurement

2016
01:20:16,080 --> 01:20:18,960
conference in 2019

2017
01:20:18,960 --> 01:20:20,880
in amsterdam

2018
01:20:20,880 --> 01:20:24,800
we were awarded for a research paper on

2019
01:20:24,800 --> 01:20:27,679
the root case cable offer

2020
01:20:27,679 --> 01:20:29,520
and during that

2021
01:20:29,520 --> 01:20:32,719
conference there was just the hijack of

2022
01:20:32,719 --> 01:20:35,520
the ethereum wallet

2023
01:20:35,520 --> 01:20:38,800
and that was by a route hijack

2024
01:20:38,800 --> 01:20:41,800
but the authoritative surface of route

2025
01:20:41,800 --> 01:20:46,719
53 were hijacked and the resolvers

2026
01:20:46,719 --> 01:20:48,960
were not protected by router region

2027
01:20:48,960 --> 01:20:50,480
validation

2028
01:20:50,480 --> 01:20:52,480
so it was clear to

2029
01:20:52,480 --> 01:20:53,600
us that

2030
01:20:53,600 --> 01:20:56,000
it's important that we would do this

2031
01:20:56,000 --> 01:20:58,320
these measurements as well

2032
01:20:58,320 --> 01:21:00,400
and we learned at this conference that

2033
01:21:00,400 --> 01:21:03,440
there was a person called job schneider

2034
01:21:03,440 --> 01:21:05,679
we had the rpi beacon

2035
01:21:05,679 --> 01:21:08,960
and we spoke to him and asked him if he

2036
01:21:08,960 --> 01:21:12,320
could use his beacon to do this kind of

2037
01:21:12,320 --> 01:21:14,560
measurements and

2038
01:21:14,560 --> 01:21:16,800
europe allowed that and

2039
01:21:16,800 --> 01:21:19,040
thank you yup for that this was really

2040
01:21:19,040 --> 01:21:20,320
great

2041
01:21:20,320 --> 01:21:22,880
and we started to

2042
01:21:22,880 --> 01:21:24,800
do the measurements to measure the

2043
01:21:24,800 --> 01:21:27,520
uptake of router region validation of

2044
01:21:27,520 --> 01:21:29,600
dns resolvers

2045
01:21:29,600 --> 01:21:32,080
since 2020

2046
01:21:32,080 --> 01:21:36,239
but unfortunately the the beacon didn't

2047
01:21:36,239 --> 01:21:38,960
stay for a very long time or it stayed

2048
01:21:38,960 --> 01:21:40,880
for almost two years but we had to look

2049
01:21:40,880 --> 01:21:44,639
for another beacon so

2050
01:21:44,639 --> 01:21:47,840
yeah that's the reason for this effort

2051
01:21:47,840 --> 01:21:50,719
next slide please

2052
01:21:50,719 --> 01:21:53,199
and at the beacon at the time was the

2053
01:21:53,199 --> 01:21:55,199
ripe ncc

2054
01:21:55,199 --> 01:21:56,560
web test

2055
01:21:56,560 --> 01:21:59,840
it was the check my dns effort from the

2056
01:21:59,840 --> 01:22:02,159
dns org

2057
01:22:02,159 --> 01:22:03,679
our own

2058
01:22:03,679 --> 01:22:05,600
validation measurements

2059
01:22:05,600 --> 01:22:08,239
next slide

2060
01:22:08,960 --> 01:22:12,159
and the beacon was set up it had

2061
01:22:12,159 --> 01:22:14,800
enveloped prefixes announced from the

2062
01:22:14,800 --> 01:22:17,520
beacon and also valid prefixes for

2063
01:22:17,520 --> 01:22:19,600
refrence

2064
01:22:19,600 --> 01:22:22,159
next slide

2065
01:22:22,480 --> 01:22:23,520
so

2066
01:22:23,520 --> 01:22:26,080
the effects of this setup were a bit

2067
01:22:26,080 --> 01:22:28,320
like this

2068
01:22:28,320 --> 01:22:30,639
so if you would be on a

2069
01:22:30,639 --> 01:22:32,159
validating hop

2070
01:22:32,159 --> 01:22:35,199
then it you would not enter up at the

2071
01:22:35,199 --> 01:22:36,400
beacon

2072
01:22:36,400 --> 01:22:38,800
and also if you would have been if you

2073
01:22:38,800 --> 01:22:40,480
would be on a

2074
01:22:40,480 --> 01:22:43,679
infillet or not validating hall

2075
01:22:43,679 --> 01:22:46,560
but surrounding by validating hops

2076
01:22:46,560 --> 01:22:49,520
then you would also not end up

2077
01:22:49,520 --> 01:22:51,040
at the beacon

2078
01:22:51,040 --> 01:22:53,840
the next slide

2079
01:22:54,639 --> 01:22:55,679
so

2080
01:22:55,679 --> 01:22:57,280
this was

2081
01:22:57,280 --> 01:22:58,880
gave some

2082
01:22:58,880 --> 01:23:00,960
difficulties with doing the measurements

2083
01:23:00,960 --> 01:23:02,000
in that

2084
01:23:02,000 --> 01:23:04,239
it was timer based

2085
01:23:04,239 --> 01:23:06,400
now if you can reach the valid but you

2086
01:23:06,400 --> 01:23:08,400
cannot reach the invalid then you have

2087
01:23:08,400 --> 01:23:11,600
to wait for that time out

2088
01:23:11,600 --> 01:23:12,880
and also

2089
01:23:12,880 --> 01:23:15,199
about an original validation is to

2090
01:23:15,199 --> 01:23:16,719
prevent

2091
01:23:16,719 --> 01:23:18,639
wild hijacks

2092
01:23:18,639 --> 01:23:21,600
and so since the

2093
01:23:21,600 --> 01:23:24,320
invalid prefixes were not announced

2094
01:23:24,320 --> 01:23:26,800
anywhere else validly

2095
01:23:26,800 --> 01:23:29,760
you could ask yourself if it was a

2096
01:23:29,760 --> 01:23:32,000
yeah it looked like a realistic route

2097
01:23:32,000 --> 01:23:33,199
hijack

2098
01:23:33,199 --> 01:23:35,839
next slide

2099
01:23:36,639 --> 01:23:37,520
so

2100
01:23:37,520 --> 01:23:39,120
for the new beacon

2101
01:23:39,120 --> 01:23:42,080
we did it a little bit differently

2102
01:23:42,080 --> 01:23:43,120
we

2103
01:23:43,120 --> 01:23:46,080
announced a slash 23

2104
01:23:46,080 --> 01:23:47,760
less specific

2105
01:23:47,760 --> 01:23:49,440
from amazon

2106
01:23:49,440 --> 01:23:53,600
to be precise in a invalid slash 24

2107
01:23:53,600 --> 01:23:58,800
from that less specific from color glue

2108
01:23:58,960 --> 01:24:00,639
which is really convenient because you

2109
01:24:00,639 --> 01:24:03,040
don't have to wait for timeouts

2110
01:24:03,040 --> 01:24:06,960
and maybe it's also a bit more realistic

2111
01:24:06,960 --> 01:24:09,040
but maybe not maybe for the most

2112
01:24:09,040 --> 01:24:11,199
realistic situation

2113
01:24:11,199 --> 01:24:13,920
you would have two slash 24s

2114
01:24:13,920 --> 01:24:17,239
next slide

2115
01:24:17,760 --> 01:24:21,600
uh yeah so here you can see the uh

2116
01:24:21,600 --> 01:24:24,159
robot the route origin authorization for

2117
01:24:24,159 --> 01:24:25,440
the slash

2118
01:24:25,440 --> 01:24:27,360
23

2119
01:24:27,360 --> 01:24:29,920
and just for the record i also made one

2120
01:24:29,920 --> 01:24:32,480
for this list 24 but with

2121
01:24:32,480 --> 01:24:34,400
for a's and 0

2122
01:24:34,400 --> 01:24:36,400
to officially

2123
01:24:36,400 --> 01:24:38,560
say this is invalid

2124
01:24:38,560 --> 01:24:41,120
next slide

2125
01:24:42,480 --> 01:24:44,639
but you know it's still really hard to

2126
01:24:44,639 --> 01:24:47,440
determine which hop does the actual

2127
01:24:47,440 --> 01:24:49,120
validation

2128
01:24:49,120 --> 01:24:52,960
and uh it also has the peculiar very

2129
01:24:52,960 --> 01:24:55,120
validity

2130
01:24:55,120 --> 01:24:56,000
that

2131
01:24:56,000 --> 01:24:58,800
if if you are in a network that is

2132
01:24:58,800 --> 01:25:00,639
validating

2133
01:25:00,639 --> 01:25:03,600
this big you can might still reach the

2134
01:25:03,600 --> 01:25:05,679
invalids

2135
01:25:05,679 --> 01:25:09,520
and why is this next slide

2136
01:25:10,840 --> 01:25:12,639
because

2137
01:25:12,639 --> 01:25:14,960
on the path towards the less specific

2138
01:25:14,960 --> 01:25:17,360
the lighthouse should say you might bump

2139
01:25:17,360 --> 01:25:18,560
into

2140
01:25:18,560 --> 01:25:22,000
a non-validating hop which is luring you

2141
01:25:22,000 --> 01:25:26,960
into the vortex next slide

2142
01:25:26,960 --> 01:25:30,880
so taking the picture that i used before

2143
01:25:30,880 --> 01:25:33,600
it's all the the white things

2144
01:25:33,600 --> 01:25:36,480
close to the lighthouse are good

2145
01:25:36,480 --> 01:25:37,360
but

2146
01:25:37,360 --> 01:25:39,679
if you know if you're crossing

2147
01:25:39,679 --> 01:25:41,840
a non-validating hop

2148
01:25:41,840 --> 01:25:44,239
when you park towards the the lighthouse

2149
01:25:44,239 --> 01:25:45,199
then you

2150
01:25:45,199 --> 01:25:47,360
end up at the beacon

2151
01:25:47,360 --> 01:25:49,920
next slide

2152
01:25:52,800 --> 01:25:56,320
yeah well so all the apps that used the

2153
01:25:56,320 --> 01:25:57,840
earlier beacon

2154
01:25:57,840 --> 01:26:01,679
uh they are moved to uh the new beacon

2155
01:26:01,679 --> 01:26:02,719
uh

2156
01:26:02,719 --> 01:26:06,159
we so it was really cool uh easy to do

2157
01:26:06,159 --> 01:26:07,199
uh

2158
01:26:07,199 --> 01:26:10,239
rpi test for revolvers

2159
01:26:10,239 --> 01:26:12,480
because you just went to authoritative

2160
01:26:12,480 --> 01:26:13,600
surface

2161
01:26:13,600 --> 01:26:16,960
one has a zone that says the way

2162
01:26:16,960 --> 01:26:19,520
you you're protected at the affiliate

2163
01:26:19,520 --> 01:26:22,080
and one says no you're not protected at

2164
01:26:22,080 --> 01:26:24,080
the invalid

2165
01:26:24,080 --> 01:26:26,639
next slide

2166
01:26:27,840 --> 01:26:29,440
so at the

2167
01:26:29,440 --> 01:26:32,320
invalid beacon at

2168
01:26:32,320 --> 01:26:34,639
color clue i also

2169
01:26:34,639 --> 01:26:38,159
created a ripe atlas software probe

2170
01:26:38,159 --> 01:26:41,280
which uses the invalid resources

2171
01:26:41,280 --> 01:26:43,440
and has the command but on a valid

2172
01:26:43,440 --> 01:26:45,040
resource

2173
01:26:45,040 --> 01:26:48,000
so people using vipe atlas can use the

2174
01:26:48,000 --> 01:26:51,679
beacon as well next slide

2175
01:26:52,639 --> 01:26:55,520
the beacon is also at the end of ring if

2176
01:26:55,520 --> 01:26:57,600
you are only an unlocked ring and you're

2177
01:26:57,600 --> 01:27:00,000
a secure shell to the

2178
01:27:00,000 --> 01:27:02,800
enameled lobs

2179
01:27:02,800 --> 01:27:04,400
ring note

2180
01:27:04,400 --> 01:27:06,880
then you will see this text that you can

2181
01:27:06,880 --> 01:27:09,199
enter a

2182
01:27:09,199 --> 01:27:11,679
network namespace with the invalid

2183
01:27:11,679 --> 01:27:14,000
resources but with the command

2184
01:27:14,000 --> 01:27:18,800
enter invalid net ns next slides

2185
01:27:18,800 --> 01:27:22,080
and this is how it works you can see

2186
01:27:22,080 --> 01:27:23,040
so

2187
01:27:23,040 --> 01:27:26,000
if you secure shell there then initially

2188
01:27:26,000 --> 01:27:28,560
it just uses valid resources you can

2189
01:27:28,560 --> 01:27:31,520
ping the website of the itf

2190
01:27:31,520 --> 01:27:34,239
and after entering the invalid network

2191
01:27:34,239 --> 01:27:37,360
named namespace you cannot

2192
01:27:37,360 --> 01:27:39,679
but you can it still does work because

2193
01:27:39,679 --> 01:27:42,960
you can bring in laptops for example

2194
01:27:42,960 --> 01:27:46,199
next slide

2195
01:27:46,560 --> 01:27:48,480
so this can be used to

2196
01:27:48,480 --> 01:27:49,679
[Music]

2197
01:27:49,679 --> 01:27:51,760
measure other things as well

2198
01:27:51,760 --> 01:27:55,520
like for example authoritative servers

2199
01:27:55,520 --> 01:27:58,159
but the question is

2200
01:27:58,159 --> 01:28:01,520
should services be protected by about a

2201
01:28:01,520 --> 01:28:03,280
region validation

2202
01:28:03,280 --> 01:28:06,000
because they're not actually connecting

2203
01:28:06,000 --> 01:28:07,120
to

2204
01:28:07,120 --> 01:28:08,800
other

2205
01:28:08,800 --> 01:28:12,000
servers on the internet

2206
01:28:12,000 --> 01:28:15,239
next slide

2207
01:28:16,000 --> 01:28:18,639
so this is it

2208
01:28:18,639 --> 01:28:20,800
so does it make sense

2209
01:28:20,800 --> 01:28:24,239
is this a good way to do it

2210
01:28:24,639 --> 01:28:27,280
what to which you need to do it

2211
01:28:27,280 --> 01:28:30,880
and how can i make it better

2212
01:28:32,560 --> 01:28:35,120
so if there are any questions i'm in the

2213
01:28:35,120 --> 01:28:39,760
queue so i will 18 17 16 15 14 13 12.

2214
01:28:39,760 --> 01:28:41,040
there we go

2215
01:28:41,040 --> 01:28:42,880
um

2216
01:28:42,880 --> 01:28:43,150
so

2217
01:28:43,150 --> 01:28:44,320
[Music]

2218
01:28:44,320 --> 01:28:46,639
12. i think that's the one so this is a

2219
01:28:46,639 --> 01:28:49,280
good point if you go anywhere where you

2220
01:28:49,280 --> 01:28:50,800
know the net you pass through a

2221
01:28:50,800 --> 01:28:52,480
validating network which then takes you

2222
01:28:52,480 --> 01:28:54,719
to a non-validating network you still

2223
01:28:54,719 --> 01:28:56,960
end up at the bad place

2224
01:28:56,960 --> 01:28:57,920
but

2225
01:28:57,920 --> 01:28:59,600
maybe that's actually

2226
01:28:59,600 --> 01:29:02,320
the correct thing to be showing

2227
01:29:02,320 --> 01:29:03,600
because

2228
01:29:03,600 --> 01:29:05,040
like that's what would happen in the

2229
01:29:05,040 --> 01:29:07,440
real world so i don't know if the right

2230
01:29:07,440 --> 01:29:10,080
thing to answer is that you're protected

2231
01:29:10,080 --> 01:29:12,159
or not because the network you're using

2232
01:29:12,159 --> 01:29:14,639
happens to validation but you still end

2233
01:29:14,639 --> 01:29:16,719
up in a sad place so

2234
01:29:16,719 --> 01:29:18,000
i don't know the right thing is anyway

2235
01:29:18,000 --> 01:29:19,760
we have three minutes left so i will

2236
01:29:19,760 --> 01:29:22,080
help you

2237
01:29:22,080 --> 01:29:23,040
um

2238
01:29:23,040 --> 01:29:25,840
is this yeah it is on um

2239
01:29:25,840 --> 01:29:28,480
ben work online um

2240
01:29:28,480 --> 01:29:29,280
i

2241
01:29:29,280 --> 01:29:30,960
said that that's an important uh

2242
01:29:30,960 --> 01:29:32,880
observation and i think the reason it's

2243
01:29:32,880 --> 01:29:35,280
important is because

2244
01:29:35,280 --> 01:29:38,159
i i i was struggling for most of your

2245
01:29:38,159 --> 01:29:39,600
your talk to identify exactly what

2246
01:29:39,600 --> 01:29:40,880
you're trying to measure

2247
01:29:40,880 --> 01:29:43,120
um and if i understood correctly what

2248
01:29:43,120 --> 01:29:45,440
you're trying to understand is

2249
01:29:45,440 --> 01:29:46,159
the

2250
01:29:46,159 --> 01:29:48,239
extent to which

2251
01:29:48,239 --> 01:29:51,280
dns resolvers are susceptible to

2252
01:29:51,280 --> 01:29:54,159
following a route to a hijacked

2253
01:29:54,159 --> 01:29:56,080
authoritative dns server that's

2254
01:29:56,080 --> 01:29:57,199
fundamentally what you're trying to

2255
01:29:57,199 --> 01:30:00,480
measure initially yes okay so i think

2256
01:30:00,480 --> 01:30:03,199
that i think in order to work out what

2257
01:30:03,199 --> 01:30:05,360
you need in the way of a

2258
01:30:05,360 --> 01:30:07,440
beacon you need to be concentrating on

2259
01:30:07,440 --> 01:30:10,800
what the most likely attack against that

2260
01:30:10,800 --> 01:30:12,880
um traffic exchanges

2261
01:30:12,880 --> 01:30:15,199
and i don't think that it's a more

2262
01:30:15,199 --> 01:30:17,520
specific hijack i think in most cases

2263
01:30:17,520 --> 01:30:20,400
most people that are operating dns um

2264
01:30:20,400 --> 01:30:22,320
authoritative dns servers are already

2265
01:30:22,320 --> 01:30:26,800
announcing 20 forces for v4 in order to

2266
01:30:26,800 --> 01:30:29,520
you know in in order to to mitigate the

2267
01:30:29,520 --> 01:30:31,520
possibility of people being able to you

2268
01:30:31,520 --> 01:30:33,639
know sneak longer

2269
01:30:33,639 --> 01:30:36,239
non-rpki related announcements into the

2270
01:30:36,239 --> 01:30:38,560
routing table so i think the most likely

2271
01:30:38,560 --> 01:30:41,760
attack is someone spoofing the origin

2272
01:30:41,760 --> 01:30:43,199
and the

2273
01:30:43,199 --> 01:30:44,000
the

2274
01:30:44,000 --> 01:30:47,040
the difficult bit to affect to defend

2275
01:30:47,040 --> 01:30:49,120
against is the fact that you're then

2276
01:30:49,120 --> 01:30:51,760
relying on a s path

2277
01:30:51,760 --> 01:30:53,199
length

2278
01:30:53,199 --> 01:30:56,239
for selecting the the

2279
01:30:56,239 --> 01:30:58,560
the correct uh

2280
01:30:58,560 --> 01:31:01,600
the the correct destination um and that

2281
01:31:01,600 --> 01:31:03,040
will show a pattern that's similar to

2282
01:31:03,040 --> 01:31:04,880
the one in your in your map but will be

2283
01:31:04,880 --> 01:31:07,120
more pronounced you'll get more

2284
01:31:07,120 --> 01:31:09,679
resolvers going to the wrong

2285
01:31:09,679 --> 01:31:11,440
to the wrong destination

2286
01:31:11,440 --> 01:31:12,719
um

2287
01:31:12,719 --> 01:31:14,320
so that's that's that's what i would be

2288
01:31:14,320 --> 01:31:16,159
trying to mimic if i was you for that

2289
01:31:16,159 --> 01:31:18,560
measurement yeah

2290
01:31:18,560 --> 01:31:21,679
yeah it's it's uh it's indeed it's that

2291
01:31:21,679 --> 01:31:24,880
but it's also trying to identify which

2292
01:31:24,880 --> 01:31:29,159
hops are doing validation

2293
01:31:30,400 --> 01:31:32,480
if you're if the question or answer if

2294
01:31:32,480 --> 01:31:33,760
you if you're trying to tell the

2295
01:31:33,760 --> 01:31:35,199
operator of a

2296
01:31:35,199 --> 01:31:37,679
recursive dns server

2297
01:31:37,679 --> 01:31:40,239
are you likely to be seeing safe results

2298
01:31:40,239 --> 01:31:42,239
or not

2299
01:31:42,239 --> 01:31:44,320
i mean that's a binary question the the

2300
01:31:44,320 --> 01:31:46,960
why is interesting but it's not it's not

2301
01:31:46,960 --> 01:31:48,560
as important as the yes or the note

2302
01:31:48,560 --> 01:31:49,440
right

2303
01:31:49,440 --> 01:31:51,360
um the only other observation i had is

2304
01:31:51,360 --> 01:31:54,480
your your air zero rower is redundant

2305
01:31:54,480 --> 01:31:56,960
it's not doing anything otherwise yeah

2306
01:31:56,960 --> 01:32:00,639
it's just for administration

2307
01:32:01,440 --> 01:32:03,760
thank you and jeff you're up next and

2308
01:32:03,760 --> 01:32:06,480
let's keep it short

2309
01:32:07,920 --> 01:32:11,360
film there's still one more okay

2310
01:32:11,600 --> 01:32:13,679
i'm trying to unmute my audio thank you

2311
01:32:13,679 --> 01:32:16,159
the problem is villain that the more

2312
01:32:16,159 --> 01:32:18,239
transits deploy the harder it is to

2313
01:32:18,239 --> 01:32:19,679
reach your beacon

2314
01:32:19,679 --> 01:32:21,360
and if you have only one beacon that's

2315
01:32:21,360 --> 01:32:23,120
you kind of die

2316
01:32:23,120 --> 01:32:25,600
well before it sort of ceases to be

2317
01:32:25,600 --> 01:32:27,360
useful because

2318
01:32:27,360 --> 01:32:29,679
deployment in transit tends to make this

2319
01:32:29,679 --> 01:32:32,159
weird we started off in our work with

2320
01:32:32,159 --> 01:32:35,040
one beacon we increased it to four in

2321
01:32:35,040 --> 01:32:36,880
any cast and then we started to glom

2322
01:32:36,880 --> 01:32:38,400
onto cloud players

2323
01:32:38,400 --> 01:32:40,960
because in actual fact it really depends

2324
01:32:40,960 --> 01:32:43,520
on what you're trying to measure

2325
01:32:43,520 --> 01:32:44,800
and what you're trying to measure

2326
01:32:44,800 --> 01:32:48,880
depends on what you're trying to prove

2327
01:32:48,880 --> 01:32:51,679
oddly enough everyone must do without

2328
01:32:51,679 --> 01:32:54,800
origin validation is actually not that

2329
01:32:54,800 --> 01:32:56,159
useful

2330
01:32:56,159 --> 01:32:59,280
we can get 95 percent of the result if

2331
01:32:59,280 --> 01:33:01,600
let's say fixed transit networks do

2332
01:33:01,600 --> 01:33:04,880
validation and no one else does

2333
01:33:04,880 --> 01:33:07,600
because if paths go through a small

2334
01:33:07,600 --> 01:33:10,320
amount of the core and the core is doing

2335
01:33:10,320 --> 01:33:12,320
a validation dropping it actually

2336
01:33:12,320 --> 01:33:14,560
doesn't matter what the stubs do

2337
01:33:14,560 --> 01:33:18,639
and this interplay between deployment

2338
01:33:18,639 --> 01:33:19,920
right

2339
01:33:19,920 --> 01:33:22,400
and filtering this actually hasn't been

2340
01:33:22,400 --> 01:33:25,440
studied at all in the areas of rpki

2341
01:33:25,440 --> 01:33:27,679
we've adopted the mantra

2342
01:33:27,679 --> 01:33:30,880
of everyone must do it and that mantra

2343
01:33:30,880 --> 01:33:32,880
is meaningless

2344
01:33:32,880 --> 01:33:34,800
it creates a whole bunch of wasted

2345
01:33:34,800 --> 01:33:37,840
effort with only marginal return

2346
01:33:37,840 --> 01:33:40,800
if everybody else does rov filtering i

2347
01:33:40,800 --> 01:33:42,719
don't have to

2348
01:33:42,719 --> 01:33:44,480
and you can actually extrapolate that

2349
01:33:44,480 --> 01:33:46,560
statement outward what's the minimal

2350
01:33:46,560 --> 01:33:49,440
spanning set for rov filtering for the

2351
01:33:49,440 --> 01:33:51,679
maximal benefit

2352
01:33:51,679 --> 01:33:53,760
and that statement hasn't actually been

2353
01:33:53,760 --> 01:33:55,120
studied hard

2354
01:33:55,120 --> 01:33:57,679
the problem is in a nutshell

2355
01:33:57,679 --> 01:34:00,000
single beacons don't make much sense

2356
01:34:00,000 --> 01:34:01,120
anymore

2357
01:34:01,120 --> 01:34:03,040
because as we progressively deploy they

2358
01:34:03,040 --> 01:34:05,440
become progressively unreachable because

2359
01:34:05,440 --> 01:34:08,000
of transit not because of rop filtering

2360
01:34:08,000 --> 01:34:10,320
and so you really need to rethink

2361
01:34:10,320 --> 01:34:12,400
exactly how you do this to make the

2362
01:34:12,400 --> 01:34:14,480
beacon useful if you want to trace it

2363
01:34:14,480 --> 01:34:17,360
back to the source thank you

2364
01:34:17,360 --> 01:34:19,120
okay

2365
01:34:19,120 --> 01:34:21,120
thank you

2366
01:34:21,120 --> 01:34:23,040
great thank you very much

2367
01:34:23,040 --> 01:34:25,040
sorry we're out of time

2368
01:34:25,040 --> 01:34:27,760
last one on the agenda

2369
01:34:27,760 --> 01:34:30,400
is the center

2370
01:34:30,400 --> 01:34:33,520
tony and i will give you slide

2371
01:34:33,520 --> 01:34:34,800
privileges

2372
01:34:34,800 --> 01:34:37,280
let's make sure this works

2373
01:34:37,280 --> 01:34:40,800
can you change the slides

2374
01:34:41,920 --> 01:34:42,960
thank you

2375
01:34:42,960 --> 01:34:44,400
excellent

2376
01:34:44,400 --> 01:34:47,920
hi this uh talk is a footnote on cider

2377
01:34:47,920 --> 01:34:50,400
those of you who are of an age neighbors

2378
01:34:50,400 --> 01:34:52,880
call what we decided a long time ago

2379
01:34:52,880 --> 01:34:53,840
um

2380
01:34:53,840 --> 01:34:57,760
started talking about aggregation and

2381
01:34:57,760 --> 01:34:59,360
we started talking about doing

2382
01:34:59,360 --> 01:35:01,920
continental and regional aggregation

2383
01:35:01,920 --> 01:35:04,800
but nothing really happened

2384
01:35:04,800 --> 01:35:07,280
this talk is about talking bringing that

2385
01:35:07,280 --> 01:35:08,400
up again

2386
01:35:08,400 --> 01:35:11,199
not because i want people to start doing

2387
01:35:11,199 --> 01:35:12,560
it

2388
01:35:12,560 --> 01:35:15,199
but i wanted to document some thoughts

2389
01:35:15,199 --> 01:35:17,760
about how to do it before i end up

2390
01:35:17,760 --> 01:35:20,400
retiring

2391
01:35:22,880 --> 01:35:25,280
uh so what's changed since we started

2392
01:35:25,280 --> 01:35:27,119
doing cider

2393
01:35:27,119 --> 01:35:29,199
one thing that's surprising is we've

2394
01:35:29,199 --> 01:35:31,520
started leaking more specifics all over

2395
01:35:31,520 --> 01:35:33,760
the place for traffic engineering

2396
01:35:33,760 --> 01:35:37,119
and that's caused a great deal of noise

2397
01:35:37,119 --> 01:35:39,119
in the routing table it would be really

2398
01:35:39,119 --> 01:35:41,119
nice to clean these up

2399
01:35:41,119 --> 01:35:43,280
and it would be very effective to clean

2400
01:35:43,280 --> 01:35:46,239
these up at a distance because frankly

2401
01:35:46,239 --> 01:35:47,840
once you're at a distance

2402
01:35:47,840 --> 01:35:50,480
the more specifics don't add a whole lot

2403
01:35:50,480 --> 01:35:51,920
of value

2404
01:35:51,920 --> 01:35:54,719
frequently none

2405
01:35:54,719 --> 01:35:57,360
we have a new idea on how to think about

2406
01:35:57,360 --> 01:35:59,840
aggregation i wanted to write this down

2407
01:35:59,840 --> 01:36:01,679
before it gets lost

2408
01:36:01,679 --> 01:36:03,119
and

2409
01:36:03,119 --> 01:36:05,280
we talked a lot about proxy aggregation

2410
01:36:05,280 --> 01:36:06,639
long ago

2411
01:36:06,639 --> 01:36:08,480
i'm going to bring up another idea which

2412
01:36:08,480 --> 01:36:13,440
is doing unilateral remote aggregation

2413
01:36:14,639 --> 01:36:17,360
so in traditional aggregation we have a

2414
01:36:17,360 --> 01:36:20,000
isp he has a prefix p

2415
01:36:20,000 --> 01:36:21,760
and he filters out all the more

2416
01:36:21,760 --> 01:36:23,679
specifics and just

2417
01:36:23,679 --> 01:36:27,040
distributes p everywhere

2418
01:36:29,199 --> 01:36:32,239
what i'd like to talk about now is a new

2419
01:36:32,239 --> 01:36:36,880
concept an abstraction naming boundary

2420
01:36:36,880 --> 01:36:40,000
and and that's just the edge of the isp

2421
01:36:40,000 --> 01:36:41,679
where prefix p

2422
01:36:41,679 --> 01:36:44,239
exists

2423
01:36:46,400 --> 01:36:49,199
and another concept we want to call an

2424
01:36:49,199 --> 01:36:51,600
abstraction action boundary

2425
01:36:51,600 --> 01:36:53,760
and here i'd like to give full credit to

2426
01:36:53,760 --> 01:36:55,920
noel chiappa who came up with this idea

2427
01:36:55,920 --> 01:36:57,040
long ago

2428
01:36:57,040 --> 01:37:00,000
and it never got written down

2429
01:37:00,000 --> 01:37:02,639
the basic idea is that

2430
01:37:02,639 --> 01:37:05,600
you don't have to do aggregation

2431
01:37:05,600 --> 01:37:09,199
right at the same place where the prefix

2432
01:37:09,199 --> 01:37:11,040
actually exists

2433
01:37:11,040 --> 01:37:14,560
you could do it several hops away

2434
01:37:14,560 --> 01:37:16,080
and in this picture

2435
01:37:16,080 --> 01:37:18,880
you can see we're leaking more specifics

2436
01:37:18,880 --> 01:37:21,520
outside of the abstraction naming

2437
01:37:21,520 --> 01:37:22,639
boundary

2438
01:37:22,639 --> 01:37:24,639
and then actually taking action and

2439
01:37:24,639 --> 01:37:27,280
doing creating the abstraction farther

2440
01:37:27,280 --> 01:37:29,920
out at the edges of the opal

2441
01:37:29,920 --> 01:37:35,639
this could be one two three as hops away

2442
01:37:39,360 --> 01:37:42,239
what happens if you do this

2443
01:37:42,239 --> 01:37:45,520
well suppose ispa

2444
01:37:45,520 --> 01:37:48,719
is the owner of the abstraction

2445
01:37:48,719 --> 01:37:50,800
and he's

2446
01:37:50,800 --> 01:37:53,280
leaking more specifics all over

2447
01:37:53,280 --> 01:37:55,119
and ispb

2448
01:37:55,119 --> 01:37:57,199
now does remote

2449
01:37:57,199 --> 01:37:59,839
aggregation

2450
01:38:00,639 --> 01:38:02,560
well the traffic is going to follow the

2451
01:38:02,560 --> 01:38:04,800
more specifics

2452
01:38:04,800 --> 01:38:06,800
so ispb

2453
01:38:06,800 --> 01:38:08,880
suddenly is going to see a bit less

2454
01:38:08,880 --> 01:38:09,920
traffic

2455
01:38:09,920 --> 01:38:13,760
he's still advertising p

2456
01:38:14,000 --> 01:38:16,880
so ispa is still being served

2457
01:38:16,880 --> 01:38:18,639
but traffic is naturally going to flow

2458
01:38:18,639 --> 01:38:21,760
in the alternate directions

2459
01:38:24,639 --> 01:38:26,080
okay

2460
01:38:26,080 --> 01:38:27,520
if you do this

2461
01:38:27,520 --> 01:38:29,440
this is

2462
01:38:29,440 --> 01:38:31,840
not necessarily a horrible thing

2463
01:38:31,840 --> 01:38:35,920
not necessarily a good thing

2464
01:38:35,920 --> 01:38:38,800
where you do this inside of ispb

2465
01:38:38,800 --> 01:38:41,600
actually matters

2466
01:38:41,600 --> 01:38:44,080
does ispb care about the traffic

2467
01:38:44,080 --> 01:38:47,760
engineering that ispa is advertising

2468
01:38:47,760 --> 01:38:49,280
and it can

2469
01:38:49,280 --> 01:38:52,000
if it does it on ingress it gets rid of

2470
01:38:52,000 --> 01:38:54,239
some traffic it gets rid of some routes

2471
01:38:54,239 --> 01:38:56,080
that it's going to carry

2472
01:38:56,080 --> 01:39:00,000
if ispd does the aggregation on egress

2473
01:39:00,000 --> 01:39:01,920
they still get the traffic engineering

2474
01:39:01,920 --> 01:39:03,920
benefits but has a few more routes to

2475
01:39:03,920 --> 01:39:06,239
get right

2476
01:39:06,639 --> 01:39:09,679
so could we do this to higher levels of

2477
01:39:09,679 --> 01:39:12,679
aggregation

2478
01:39:14,639 --> 01:39:16,159
so we have a bunch of regional

2479
01:39:16,159 --> 01:39:18,880
aggregates the rars have nice prefix

2480
01:39:18,880 --> 01:39:19,840
blocks

2481
01:39:19,840 --> 01:39:22,159
slash 12s for example

2482
01:39:22,159 --> 01:39:26,159
and could we remotely aggregate these

2483
01:39:26,159 --> 01:39:28,000
and if we do that we

2484
01:39:28,000 --> 01:39:29,760
take out all of those annoying traffic

2485
01:39:29,760 --> 01:39:31,679
engineering more specifics

2486
01:39:31,679 --> 01:39:34,080
we take out organizations that only

2487
01:39:34,080 --> 01:39:37,760
exist within that rir's region

2488
01:39:37,760 --> 01:39:40,000
where is it we would put the abstraction

2489
01:39:40,000 --> 01:39:42,639
action boundary

2490
01:39:42,639 --> 01:39:44,080
and this is something you have to look

2491
01:39:44,080 --> 01:39:46,480
at in a case-by-case basis

2492
01:39:46,480 --> 01:39:48,639
if you put it too close to the actual

2493
01:39:48,639 --> 01:39:51,440
abstraction too close to the region

2494
01:39:51,440 --> 01:39:52,480
you're going to break traffic

2495
01:39:52,480 --> 01:39:55,119
engineering

2496
01:39:55,119 --> 01:39:57,600
and if you go too far away you're being

2497
01:39:57,600 --> 01:39:59,600
wasteful because more specifics are

2498
01:39:59,600 --> 01:40:02,080
transiting too far away

2499
01:40:02,080 --> 01:40:04,000
and this is a case where it'd be very

2500
01:40:04,000 --> 01:40:06,080
very useful to have a little more field

2501
01:40:06,080 --> 01:40:07,040
input

2502
01:40:07,040 --> 01:40:08,800
so i'll throw that question out to you

2503
01:40:08,800 --> 01:40:11,040
guys

2504
01:40:13,360 --> 01:40:15,600
just as a reminder

2505
01:40:15,600 --> 01:40:19,280
this is what our rir map looks like

2506
01:40:19,280 --> 01:40:21,199
you'll notice things don't quite

2507
01:40:21,199 --> 01:40:25,119
correspond to continental boundaries

2508
01:40:27,199 --> 01:40:29,199
if you wanted to

2509
01:40:29,199 --> 01:40:30,400
say

2510
01:40:30,400 --> 01:40:31,440
have a

2511
01:40:31,440 --> 01:40:32,639
remote

2512
01:40:32,639 --> 01:40:34,159
abstraction bound

2513
01:40:34,159 --> 01:40:37,520
abstraction action boundary around

2514
01:40:37,520 --> 01:40:38,560
ripe

2515
01:40:38,560 --> 01:40:40,960
you might draw this line here and this

2516
01:40:40,960 --> 01:40:43,119
is a little bit farther away

2517
01:40:43,119 --> 01:40:44,560
just so that gets the traffic

2518
01:40:44,560 --> 01:40:47,560
engineering

2519
01:40:50,800 --> 01:40:52,159
you could also do continental

2520
01:40:52,159 --> 01:40:54,080
aggregation and i'm going to pick on

2521
01:40:54,080 --> 01:40:55,760
jeff here

2522
01:40:55,760 --> 01:40:57,280
okay

2523
01:40:57,280 --> 01:41:00,239
um intercontinental links are relatively

2524
01:41:00,239 --> 01:41:01,520
rare

2525
01:41:01,520 --> 01:41:03,040
comparatively

2526
01:41:03,040 --> 01:41:05,360
and so we very much want to traffic

2527
01:41:05,360 --> 01:41:08,560
engineer those intercontinental links

2528
01:41:08,560 --> 01:41:11,280
but we do want to do

2529
01:41:11,280 --> 01:41:13,040
we could put an abstraction boundary

2530
01:41:13,040 --> 01:41:14,800
just on the other side of those

2531
01:41:14,800 --> 01:41:17,440
intercontinental links

2532
01:41:17,440 --> 01:41:18,960
we would also kind of like it if the

2533
01:41:18,960 --> 01:41:21,600
rirs would do continental addressing for

2534
01:41:21,600 --> 01:41:23,760
us

2535
01:41:25,600 --> 01:41:28,960
so you can imagine suppose we want to

2536
01:41:28,960 --> 01:41:31,600
throw an abstraction of australia

2537
01:41:31,600 --> 01:41:33,520
and we might put the abstraction action

2538
01:41:33,520 --> 01:41:36,960
boundary several hops past

2539
01:41:36,960 --> 01:41:39,679
the transoceanic links going to

2540
01:41:39,679 --> 01:41:42,320
australia

2541
01:41:45,360 --> 01:41:47,119
okay

2542
01:41:47,119 --> 01:41:50,159
um yes uh we know that there are some

2543
01:41:50,159 --> 01:41:52,639
rpi our pki issues

2544
01:41:52,639 --> 01:41:54,800
and we have to figure out how to do that

2545
01:41:54,800 --> 01:41:57,600
with aggregation

2546
01:41:57,679 --> 01:42:01,840
and that's something we have to work out

2547
01:42:04,880 --> 01:42:06,239
okay

2548
01:42:06,239 --> 01:42:08,320
so we'd love to hear what people think

2549
01:42:08,320 --> 01:42:10,880
about this and whether this is useful

2550
01:42:10,880 --> 01:42:12,239
and whether they're willing to try that

2551
01:42:12,239 --> 01:42:14,400
in the field

2552
01:42:14,400 --> 01:42:17,360
thank you any questions

2553
01:42:19,679 --> 01:42:23,440
yeah hi melini elkins uh inside products

2554
01:42:23,440 --> 01:42:25,920
okay so just one

2555
01:42:25,920 --> 01:42:29,040
anecdotal data point from somebody that

2556
01:42:29,040 --> 01:42:30,560
i'm working with

2557
01:42:30,560 --> 01:42:31,840
is a

2558
01:42:31,840 --> 01:42:35,199
large organization in the united states

2559
01:42:35,199 --> 01:42:39,040
that has a global presence with probably

2560
01:42:39,040 --> 01:42:39,920
people

2561
01:42:39,920 --> 01:42:41,600
i mean all over the world

2562
01:42:41,600 --> 01:42:44,080
and we were talking to a particular rir

2563
01:42:44,080 --> 01:42:45,600
and they said they would be willing to

2564
01:42:45,600 --> 01:42:46,719
give them

2565
01:42:46,719 --> 01:42:49,520
um address ranges for

2566
01:42:49,520 --> 01:42:51,440
uh globally

2567
01:42:51,440 --> 01:42:52,480
so

2568
01:42:52,480 --> 01:42:55,119
i i i mean i don't know how this fits

2569
01:42:55,119 --> 01:42:57,360
into your picture if it does or can you

2570
01:42:57,360 --> 01:42:58,800
comment

2571
01:42:58,800 --> 01:43:00,560
just just i mean i'm just i'm just

2572
01:43:00,560 --> 01:43:02,400
saying just one data point i'm just you

2573
01:43:02,400 --> 01:43:03,920
know just i'm just wondering how it fits

2574
01:43:03,920 --> 01:43:06,800
into your your picture here

2575
01:43:06,800 --> 01:43:09,600
it doesn't fit in um we know there are

2576
01:43:09,600 --> 01:43:12,239
lots of organizations with global span

2577
01:43:12,239 --> 01:43:14,320
that are injecting their prefixes from

2578
01:43:14,320 --> 01:43:16,320
many many points and those are not good

2579
01:43:16,320 --> 01:43:18,480
candidates for aggregation for obvious

2580
01:43:18,480 --> 01:43:20,879
reasons

2581
01:43:22,719 --> 01:43:26,719
hi tony it's jared uh i am curious

2582
01:43:26,719 --> 01:43:29,440
what you're trying to optimize here

2583
01:43:29,440 --> 01:43:31,840
are you trying to optimize the fib or

2584
01:43:31,840 --> 01:43:34,080
the rib

2585
01:43:34,080 --> 01:43:36,880
i'm trying to optimize both so call it

2586
01:43:36,880 --> 01:43:38,800
rib

2587
01:43:38,800 --> 01:43:41,119
okay

2588
01:43:41,600 --> 01:43:44,159
yeah because i i think there's i i think

2589
01:43:44,159 --> 01:43:45,840
it's very important to talk about the

2590
01:43:45,840 --> 01:43:47,600
two separately so

2591
01:43:47,600 --> 01:43:49,280
the the first thing is that you know

2592
01:43:49,280 --> 01:43:50,960
inside of

2593
01:43:50,960 --> 01:43:53,920
my employer today we actually have

2594
01:43:53,920 --> 01:43:56,159
uh a solution that we use to go and

2595
01:43:56,159 --> 01:43:58,000
ensure that we don't

2596
01:43:58,000 --> 01:44:00,000
uh you know that

2597
01:44:00,000 --> 01:44:02,639
traffic tends to be heavily regionalized

2598
01:44:02,639 --> 01:44:04,000
uh when you talk about a global

2599
01:44:04,000 --> 01:44:05,199
footprint

2600
01:44:05,199 --> 01:44:08,639
and so we don't have to we may receive

2601
01:44:08,639 --> 01:44:10,000
all the paths

2602
01:44:10,000 --> 01:44:12,080
in you know our ribbon but that doesn't

2603
01:44:12,080 --> 01:44:13,600
mean that we actually need to carry all

2604
01:44:13,600 --> 01:44:15,119
those uh

2605
01:44:15,119 --> 01:44:16,960
you know all those paths in the hardware

2606
01:44:16,960 --> 01:44:18,560
it's also possible that many of them

2607
01:44:18,560 --> 01:44:20,960
have the same next hop and so that we

2608
01:44:20,960 --> 01:44:22,960
can actually do localized you know

2609
01:44:22,960 --> 01:44:24,960
optimization i know a number of vendors

2610
01:44:24,960 --> 01:44:25,920
have done

2611
01:44:25,920 --> 01:44:28,000
uh you know either internally fib

2612
01:44:28,000 --> 01:44:30,480
compression work or otherwise to ensure

2613
01:44:30,480 --> 01:44:32,159
that you know

2614
01:44:32,159 --> 01:44:34,000
even though the rib may have more in it

2615
01:44:34,000 --> 01:44:35,760
the fib uh

2616
01:44:35,760 --> 01:44:38,080
you know actually can run a lot leaner

2617
01:44:38,080 --> 01:44:39,840
uh from that perspective so so there

2618
01:44:39,840 --> 01:44:41,600
have been many different you know both

2619
01:44:41,600 --> 01:44:43,440
software and hardware optimizations done

2620
01:44:43,440 --> 01:44:46,239
there i i think the the other thing just

2621
01:44:46,239 --> 01:44:48,560
kind of looking at this just generically

2622
01:44:48,560 --> 01:44:49,520
is

2623
01:44:49,520 --> 01:44:51,360
i think this makes a lot of sense in a

2624
01:44:51,360 --> 01:44:53,600
case where there's a lot of national

2625
01:44:53,600 --> 01:44:55,679
you know aggregators or international

2626
01:44:55,679 --> 01:44:57,920
aggregators but that's actually largely

2627
01:44:57,920 --> 01:44:59,679
not the case anymore

2628
01:44:59,679 --> 01:45:01,119
if you're actually looking at the

2629
01:45:01,119 --> 01:45:03,840
internet today and and jeff houston's

2630
01:45:03,840 --> 01:45:05,199
you know talked about this some in the

2631
01:45:05,199 --> 01:45:06,159
past

2632
01:45:06,159 --> 01:45:09,280
it's largely how do i get to the

2633
01:45:09,280 --> 01:45:11,520
largest n cloud

2634
01:45:11,520 --> 01:45:12,320
or

2635
01:45:12,320 --> 01:45:15,440
content providers within my region and

2636
01:45:15,440 --> 01:45:18,159
almost no other traffic uh you know

2637
01:45:18,159 --> 01:45:19,520
there's there's not a lot of long

2638
01:45:19,520 --> 01:45:20,880
distance traffic

2639
01:45:20,880 --> 01:45:22,800
uh you know in that regard anymore if

2640
01:45:22,800 --> 01:45:24,639
you look at what enterprises are doing

2641
01:45:24,639 --> 01:45:26,159
they're largely

2642
01:45:26,159 --> 01:45:28,239
integrating into one of the cloud

2643
01:45:28,239 --> 01:45:31,760
operators but uh and purchasing direct

2644
01:45:31,760 --> 01:45:33,840
interconnects for on-ramp off-ramp

2645
01:45:33,840 --> 01:45:35,119
activities

2646
01:45:35,119 --> 01:45:38,159
and so the need to do this

2647
01:45:38,159 --> 01:45:40,159
there's a very interesting question you

2648
01:45:40,159 --> 01:45:42,080
know around this is how much is this

2649
01:45:42,080 --> 01:45:45,440
actually really needed per se

2650
01:45:45,440 --> 01:45:46,880
and at the same time i also want to

2651
01:45:46,880 --> 01:45:49,040
comment is that i know my employer is

2652
01:45:49,040 --> 01:45:50,560
really bad about polluting the route

2653
01:45:50,560 --> 01:45:51,440
table

2654
01:45:51,440 --> 01:45:54,639
and we're trying to i'm working hard to

2655
01:45:54,639 --> 01:45:56,560
try and address that

2656
01:45:56,560 --> 01:45:58,560
um because

2657
01:45:58,560 --> 01:46:01,119
we largely had a lot of things globally

2658
01:46:01,119 --> 01:46:03,840
that were very unique discrete sites

2659
01:46:03,840 --> 01:46:07,199
and over time my long-term goal is to

2660
01:46:07,199 --> 01:46:09,280
continue to advertise out those local

2661
01:46:09,280 --> 01:46:11,520
more specific routes to ensure that we

2662
01:46:11,520 --> 01:46:12,800
attract the traffic in the right

2663
01:46:12,800 --> 01:46:14,000
locations

2664
01:46:14,000 --> 01:46:16,560
but globally not everybody needs to see

2665
01:46:16,560 --> 01:46:18,159
those routes and so we don't need to

2666
01:46:18,159 --> 01:46:20,239
advertise those all globally

2667
01:46:20,239 --> 01:46:22,320
which may end up with

2668
01:46:22,320 --> 01:46:25,520
much wider divergence in what a local

2669
01:46:25,520 --> 01:46:27,920
versus global table looks like

2670
01:46:27,920 --> 01:46:30,880
uh but that is heavily optimized around

2671
01:46:30,880 --> 01:46:32,480
the locations that need to get the

2672
01:46:32,480 --> 01:46:35,920
routes and so i think that this is

2673
01:46:35,920 --> 01:46:37,520
you know just looking at this at a high

2674
01:46:37,520 --> 01:46:38,639
level

2675
01:46:38,639 --> 01:46:41,520
i think the idea of where these

2676
01:46:41,520 --> 01:46:44,400
aggregation points are

2677
01:46:44,400 --> 01:46:46,639
is is very interesting because i think

2678
01:46:46,639 --> 01:46:48,080
they're not where

2679
01:46:48,080 --> 01:46:49,679
we would have thought they were you know

2680
01:46:49,679 --> 01:46:52,400
25 years ago

2681
01:46:52,400 --> 01:46:53,280
so

2682
01:46:53,280 --> 01:46:54,719
i don't know if you have any comments or

2683
01:46:54,719 --> 01:46:56,560
responses to that but i think

2684
01:46:56,560 --> 01:46:58,960
at least at minimum the fib optimization

2685
01:46:58,960 --> 01:47:02,159
seems an area of potential interest

2686
01:47:02,159 --> 01:47:05,199
uh yes fib optimization is of interest

2687
01:47:05,199 --> 01:47:06,960
we talked about that and some people

2688
01:47:06,960 --> 01:47:08,639
have implemented that

2689
01:47:08,639 --> 01:47:11,040
we still have lots of people who are

2690
01:47:11,040 --> 01:47:13,199
having scalability issues at the rib

2691
01:47:13,199 --> 01:47:15,600
level so i'm very much more interested

2692
01:47:15,600 --> 01:47:18,159
in trying to address that

2693
01:47:18,159 --> 01:47:19,920
yes i'm well aware that traffic is

2694
01:47:19,920 --> 01:47:23,600
orthogonal to routes that's fine i'm

2695
01:47:23,600 --> 01:47:27,040
still trying to optimize routes

2696
01:47:28,239 --> 01:47:29,600
rudiger

2697
01:47:29,600 --> 01:47:32,070
right hi tony

2698
01:47:32,070 --> 01:47:34,000
[Music]

2699
01:47:34,000 --> 01:47:36,560
simple question

2700
01:47:36,560 --> 01:47:38,880
are you

2701
01:47:38,880 --> 01:47:42,560
thinking about any cooperation

2702
01:47:42,560 --> 01:47:47,840
of the owners of address space or roots

2703
01:47:48,960 --> 01:47:50,639
well of course cooperation is always

2704
01:47:50,639 --> 01:47:51,840
welcome

2705
01:47:51,840 --> 01:47:54,239
if people want to be aggregated remotely

2706
01:47:54,239 --> 01:47:55,920
that would be a very interesting

2707
01:47:55,920 --> 01:47:57,840
proposal

2708
01:47:57,840 --> 01:48:00,080
uh

2709
01:48:00,080 --> 01:48:00,880
but

2710
01:48:00,880 --> 01:48:03,040
well okay in general you are not

2711
01:48:03,040 --> 01:48:06,400
expecting that as a basis for moving

2712
01:48:06,400 --> 01:48:08,320
forward

2713
01:48:08,320 --> 01:48:10,560
uh no i don't think that's a requirement

2714
01:48:10,560 --> 01:48:12,400
and i would be very interested in seeing

2715
01:48:12,400 --> 01:48:13,600
what happens

2716
01:48:13,600 --> 01:48:15,520
in the field experience both with and

2717
01:48:15,520 --> 01:48:18,560
without the cooperation

2718
01:48:18,560 --> 01:48:19,679
uh

2719
01:48:19,679 --> 01:48:22,080
kind of uh

2720
01:48:22,080 --> 01:48:25,760
with my simple mind i feel that

2721
01:48:25,760 --> 01:48:28,560
kind of without cooperation uh the

2722
01:48:28,560 --> 01:48:31,199
current existing universe does not

2723
01:48:31,199 --> 01:48:33,040
really

2724
01:48:33,040 --> 01:48:35,520
is not really expected to

2725
01:48:35,520 --> 01:48:37,679
get get a solution

2726
01:48:37,679 --> 01:48:40,239
uh in your direction

2727
01:48:40,239 --> 01:48:42,560
uh but uh

2728
01:48:42,560 --> 01:48:46,400
well okay you smart you you smart guy

2729
01:48:46,400 --> 01:48:50,000
uh might have ideas of uh what to do

2730
01:48:50,000 --> 01:48:52,880
actu well okay what what concepts to use

2731
01:48:52,880 --> 01:48:54,800
in signaling and so on

2732
01:48:54,800 --> 01:48:55,679
for

2733
01:48:55,679 --> 01:48:56,800
uh

2734
01:48:56,800 --> 01:48:59,600
getting getting cooperation information

2735
01:48:59,600 --> 01:49:02,000
into this

2736
01:49:02,000 --> 01:49:04,560
well again i don't think cooperation is

2737
01:49:04,560 --> 01:49:06,320
required i don't think you actually

2738
01:49:06,320 --> 01:49:08,000
break anything

2739
01:49:08,000 --> 01:49:09,920
if you don't have cooperation and you

2740
01:49:09,920 --> 01:49:12,719
just go off and do remote aggregation

2741
01:49:12,719 --> 01:49:14,480
as long as you're advertising the

2742
01:49:14,480 --> 01:49:16,800
aggregate you are continuing to provide

2743
01:49:16,800 --> 01:49:18,000
connectivity

2744
01:49:18,000 --> 01:49:20,719
um but you are shifting traffic away i

2745
01:49:20,719 --> 01:49:23,360
realized that alone could be

2746
01:49:23,360 --> 01:49:26,080
contractually a problem

2747
01:49:26,080 --> 01:49:28,800
so people should think about that but i

2748
01:49:28,800 --> 01:49:30,159
don't see that it actually breaks

2749
01:49:30,159 --> 01:49:32,559
anything

2750
01:49:37,040 --> 01:49:40,239
just consider maybe just a data point

2751
01:49:40,239 --> 01:49:42,239
at least my employer we already have a

2752
01:49:42,239 --> 01:49:44,719
service that's intermediate between

2753
01:49:44,719 --> 01:49:46,719
internal bgp speaker or external

2754
01:49:46,719 --> 01:49:48,800
appearing we already have the slurs that

2755
01:49:48,800 --> 01:49:50,480
does aggregation both externally and

2756
01:49:50,480 --> 01:49:51,840
internally so

2757
01:49:51,840 --> 01:49:54,159
pretty much what you are proposing here

2758
01:49:54,159 --> 01:49:56,480
it's already done donna i would think

2759
01:49:56,480 --> 01:49:57,360
that

2760
01:49:57,360 --> 01:50:01,360
you know other clouds do as well

2761
01:50:01,440 --> 01:50:02,880
that would be very interesting to look

2762
01:50:02,880 --> 01:50:05,040
at

2763
01:50:07,599 --> 01:50:10,320
excellent well thank you everyone i

2764
01:50:10,320 --> 01:50:12,560
think that this brings us to the end of

2765
01:50:12,560 --> 01:50:15,360
iepg and we actually still have 10

2766
01:50:15,360 --> 01:50:17,440
minutes left if i'd

2767
01:50:17,440 --> 01:50:18,800
planned time better we could have done

2768
01:50:18,800 --> 01:50:21,280
some more of willem's questions

2769
01:50:21,280 --> 01:50:22,800
but

2770
01:50:22,800 --> 01:50:25,199
we will almost definitely be meeting

2771
01:50:25,199 --> 01:50:27,040
again in philadelphia

2772
01:50:27,040 --> 01:50:28,480
assuming that we actually meet in

2773
01:50:28,480 --> 01:50:29,920
philadelphia

2774
01:50:29,920 --> 01:50:33,119
um so i'm trusting everybody will have

2775
01:50:33,119 --> 01:50:35,119
all sorts of exciting presentations for

2776
01:50:35,119 --> 01:50:36,560
us then

2777
01:50:36,560 --> 01:50:40,080
and enjoy

2778
01:50:40,080 --> 01:50:41,280
where are we

2779
01:50:41,280 --> 01:50:45,280
vienna enjoy vienna

2780
01:50:46,239 --> 01:50:49,638
thank you everyone

2781
01:50:58,080 --> 01:51:00,239
i don't know how now that i've yeah i

2782
01:51:00,239 --> 01:51:01,679
don't know where you stole this from

2783
01:51:01,679 --> 01:51:02,800
thank you

2784
01:51:02,800 --> 01:51:04,159
awesome

2785
01:51:04,159 --> 01:51:07,119
perfect thank you sir i don't know how i

2786
01:51:07,119 --> 01:51:10,080
logged tony out

2787
01:51:10,080 --> 01:51:12,559
wasn't me

2788
01:51:59,440 --> 01:52:01,119
would be nice if we could have but we

2789
01:52:01,119 --> 01:52:03,599
didn't really get our lives

2790
01:52:03,599 --> 01:52:06,599
okay

