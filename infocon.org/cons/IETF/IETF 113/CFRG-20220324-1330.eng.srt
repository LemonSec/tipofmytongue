1
00:00:26,640 --> 00:00:29,640
uh

2
00:00:46,320 --> 00:00:49,200
good afternoon

3
00:00:51,199 --> 00:00:53,520
i'm i'm very happy to

4
00:00:53,520 --> 00:00:56,320
open this first hybrid

5
00:00:56,320 --> 00:01:00,640
cfrg meeting in vienna

6
00:01:04,640 --> 00:01:06,479
so we do actually have quite a back

7
00:01:06,479 --> 00:01:09,920
agenda so uh

8
00:01:10,560 --> 00:01:14,240
i'll try to keep on top of it

9
00:01:15,119 --> 00:01:17,600
so i'm alexi melnikov my co-chairs nick

10
00:01:17,600 --> 00:01:19,680
sullivan and stanislav

11
00:01:19,680 --> 00:01:20,479
are

12
00:01:20,479 --> 00:01:23,520
remote this time

13
00:01:23,600 --> 00:01:27,640
um let's get started

14
00:01:37,040 --> 00:01:38,720
so as you probably know the session is

15
00:01:38,720 --> 00:01:41,759
being recorded we have

16
00:01:41,759 --> 00:01:43,119
minutes

17
00:01:43,119 --> 00:01:47,600
in code dmd i need a note taker

18
00:01:48,720 --> 00:01:50,799
can somebody please volunteer to be a

19
00:01:50,799 --> 00:01:54,040
note taker

20
00:02:08,560 --> 00:02:12,879
don't be shy don't stare at your laptops

21
00:02:13,120 --> 00:02:15,200
i'll help i'll help chris since i see he

22
00:02:15,200 --> 00:02:18,319
volunteered in the chat this is rich

23
00:02:18,319 --> 00:02:21,760
that would be perfect thank you

24
00:02:21,760 --> 00:02:22,840
if somebody else can

25
00:02:22,840 --> 00:02:24,640
[Music]

26
00:02:24,640 --> 00:02:26,800
just sort of be a backup

27
00:02:26,800 --> 00:02:30,720
and help out with uh notes taking

28
00:02:30,720 --> 00:02:33,040
um

29
00:02:33,280 --> 00:02:35,440
luckily we don't need to do blue sheets

30
00:02:35,440 --> 00:02:38,239
in the former paper form

31
00:02:38,239 --> 00:02:40,480
you logi logging into metacore whether

32
00:02:40,480 --> 00:02:42,080
it's metacore

33
00:02:42,080 --> 00:02:44,720
regular light

34
00:02:44,720 --> 00:02:46,800
will automatically add you to the blue

35
00:02:46,800 --> 00:02:49,800
sheets

36
00:02:51,040 --> 00:02:53,040
uh rich if you can mute yourself

37
00:02:53,040 --> 00:02:54,959
actually

38
00:02:54,959 --> 00:02:57,280
your keyboard is very loud

39
00:02:57,280 --> 00:02:59,360
yeah sorry about that

40
00:02:59,360 --> 00:03:01,120
um

41
00:03:01,120 --> 00:03:03,360
so uh

42
00:03:03,360 --> 00:03:04,720
irtf

43
00:03:04,720 --> 00:03:06,640
operates on the note well

44
00:03:06,640 --> 00:03:08,159
uh you should be familiar with this

45
00:03:08,159 --> 00:03:09,120
already

46
00:03:09,120 --> 00:03:11,040
if not this is the slides with relevant

47
00:03:11,040 --> 00:03:12,560
rfcs

48
00:03:12,560 --> 00:03:14,080
um

49
00:03:14,080 --> 00:03:17,360
but one of the main points is

50
00:03:17,360 --> 00:03:19,280
always be professional

51
00:03:19,280 --> 00:03:22,239
be nice to each other be respectful

52
00:03:22,239 --> 00:03:25,040
uh even if you disagree

53
00:03:25,040 --> 00:03:28,000
with the technical point

54
00:03:28,879 --> 00:03:30,959
and we are governed by good privacy and

55
00:03:30,959 --> 00:03:33,840
code of conduct

56
00:03:34,959 --> 00:03:38,480
as a quick reminder this is irtf

57
00:03:38,480 --> 00:03:40,799
research group so

58
00:03:40,799 --> 00:03:43,840
we do research here

59
00:03:43,840 --> 00:03:47,840
not standardization as such

60
00:03:50,480 --> 00:03:51,440
cool

61
00:03:51,440 --> 00:03:54,400
so uh and i will do a quick update on

62
00:03:54,400 --> 00:03:56,799
the document status we have quite a few

63
00:03:56,799 --> 00:03:59,760
documents in flight

64
00:03:59,760 --> 00:04:04,159
actually no um any agenda bashing first

65
00:04:09,439 --> 00:04:11,840
yeah um this is chris wood um

66
00:04:11,840 --> 00:04:14,319
notice the the software topic on the

67
00:04:14,319 --> 00:04:16,880
pseudocode and sort of specification uh

68
00:04:16,880 --> 00:04:18,798
discussion is first um

69
00:04:18,798 --> 00:04:20,160
i'd like to recommend given the highly

70
00:04:20,160 --> 00:04:22,079
technical nature of the agenda that that

71
00:04:22,079 --> 00:04:24,400
be moved to the end so we reserve time

72
00:04:24,400 --> 00:04:26,160
for

73
00:04:26,160 --> 00:04:28,960
those more important things um i i'm

74
00:04:28,960 --> 00:04:31,440
happy to just you know if we need to in

75
00:04:31,440 --> 00:04:32,720
the interest of time i can send an

76
00:04:32,720 --> 00:04:34,160
update to the mailing list to kick off

77
00:04:34,160 --> 00:04:36,080
discussion but i don't want to take away

78
00:04:36,080 --> 00:04:38,160
time from the more technical topics that

79
00:04:38,160 --> 00:04:40,639
could use airtime

80
00:04:40,639 --> 00:04:43,440
okay uh that's fine so you will want to

81
00:04:43,440 --> 00:04:46,080
start with key blinding then yeah great

82
00:04:46,080 --> 00:04:46,960
okay

83
00:04:46,960 --> 00:04:50,159
fine that sounds good

84
00:04:54,240 --> 00:04:57,280
right so my apologies for a small font

85
00:04:57,280 --> 00:04:59,520
we're trying to get

86
00:04:59,520 --> 00:05:03,759
trying to fit in all the documents in uh

87
00:05:03,759 --> 00:05:05,919
with the life expired but the the gist

88
00:05:05,919 --> 00:05:08,720
of it is we have one rfc published which

89
00:05:08,720 --> 00:05:13,639
is hp key rfc 9180

90
00:05:14,000 --> 00:05:17,840
we have one document in rfc rescue in

91
00:05:17,840 --> 00:05:21,680
misraff depend which is aspect 2

92
00:05:21,680 --> 00:05:24,400
which depends on

93
00:05:24,400 --> 00:05:27,520
hash to curve we and hashtag is already

94
00:05:27,520 --> 00:05:29,840
an rsg review so hopefully it shouldn't

95
00:05:29,840 --> 00:05:31,919
be a long um

96
00:05:31,919 --> 00:05:35,359
till it's approved as well

97
00:05:36,880 --> 00:05:39,360
we have quite a few active documents

98
00:05:39,360 --> 00:05:42,080
pretty much everything was updated

99
00:05:42,080 --> 00:05:43,120
draw

100
00:05:43,120 --> 00:05:46,240
vrf is waiting for the document shepard

101
00:05:46,240 --> 00:05:47,039
um

102
00:05:47,039 --> 00:05:49,759
kangaroo 12 is also waiting for chairs

103
00:05:49,759 --> 00:05:52,720
to review result of second

104
00:05:52,720 --> 00:05:54,800
research group last call i will get very

105
00:05:54,800 --> 00:05:57,199
few responses to this so

106
00:05:57,199 --> 00:05:59,360
if you haven't reviewed the document or

107
00:05:59,360 --> 00:06:01,120
confirmed whether you

108
00:06:01,120 --> 00:06:03,440
still think it's a good idea please send

109
00:06:03,440 --> 00:06:04,880
us a message

110
00:06:04,880 --> 00:06:08,319
or reply to the mailing list

111
00:06:13,759 --> 00:06:18,400
other not worthy thing is

112
00:06:19,680 --> 00:06:22,479
actually uh the cfrg um appearing

113
00:06:22,479 --> 00:06:25,840
friendly curves is while it's expired

114
00:06:25,840 --> 00:06:29,199
um there is another coeditor

115
00:06:29,199 --> 00:06:30,880
for the document and it's being worked

116
00:06:30,880 --> 00:06:32,319
on so hopefully it will be refreshed

117
00:06:32,319 --> 00:06:35,319
soon

118
00:06:36,960 --> 00:06:39,520
yes chris

119
00:06:39,680 --> 00:06:42,240
um what's the status of the uh restretto

120
00:06:42,240 --> 00:06:44,319
draft

121
00:06:44,319 --> 00:06:46,400
the the last time the

122
00:06:46,400 --> 00:06:47,919
state i do know it was updated to take

123
00:06:47,919 --> 00:06:49,599
into account the feedback from the

124
00:06:49,599 --> 00:06:51,599
crypto review panel review

125
00:06:51,599 --> 00:06:52,800
um

126
00:06:52,800 --> 00:06:55,199
so i'm wondering uh like

127
00:06:55,199 --> 00:06:57,680
what the next steps are um

128
00:06:57,680 --> 00:06:59,280
there are a number of documents that are

129
00:06:59,280 --> 00:07:01,440
building up dependencies on this and

130
00:07:01,440 --> 00:07:03,360
it'd be good to move that forward so i'm

131
00:07:03,360 --> 00:07:06,160
just curious what the next steps are

132
00:07:06,160 --> 00:07:08,160
uh yeah i suppose we we should review it

133
00:07:08,160 --> 00:07:10,319
with micro chairs but uh it sounds like

134
00:07:10,319 --> 00:07:12,080
you're

135
00:07:12,080 --> 00:07:13,759
you're suggesting that it should move to

136
00:07:13,759 --> 00:07:17,840
a research group last call soon

137
00:07:19,280 --> 00:07:20,960
yeah that's my understanding

138
00:07:20,960 --> 00:07:24,680
okay sounds good

139
00:07:32,080 --> 00:07:34,319
uh so

140
00:07:34,319 --> 00:07:37,039
the other thing is uh

141
00:07:37,039 --> 00:07:38,639
this is a

142
00:07:38,639 --> 00:07:41,039
our regular slide about crypto review

143
00:07:41,039 --> 00:07:43,120
panel that serves three purposes it

144
00:07:43,120 --> 00:07:44,479
helps

145
00:07:44,479 --> 00:07:47,039
cfrg itself security area independence

146
00:07:47,039 --> 00:07:51,280
stream edit stream to review

147
00:07:52,000 --> 00:07:55,360
crypto related documents

148
00:07:56,080 --> 00:07:57,599
we just

149
00:07:57,599 --> 00:08:00,639
we announced new

150
00:08:00,639 --> 00:08:03,120
round of membership

151
00:08:03,120 --> 00:08:06,720
in this uh lost atf

152
00:08:06,720 --> 00:08:08,720
um

153
00:08:08,720 --> 00:08:11,960
with discussion

154
00:08:12,240 --> 00:08:14,000
about um

155
00:08:14,000 --> 00:08:15,759
our past performances as well as

156
00:08:15,759 --> 00:08:18,000
availability of different people uh we

157
00:08:18,000 --> 00:08:21,280
basically capped everybody and added a

158
00:08:21,280 --> 00:08:22,960
couple of names

159
00:08:22,960 --> 00:08:27,070
veranda kumar and ludwig pereira

160
00:08:27,070 --> 00:08:29,440
[Music]

161
00:08:29,440 --> 00:08:31,039
i think that's it

162
00:08:31,039 --> 00:08:34,159
the other thing i actually

163
00:08:35,039 --> 00:08:37,120
just realized and

164
00:08:37,120 --> 00:08:39,519
i forgot to have a slide zone in case

165
00:08:39,519 --> 00:08:41,039
you haven't noticed we now have

166
00:08:41,039 --> 00:08:44,159
secretary thank you chris wood

167
00:08:44,159 --> 00:08:47,760
for being a secretary in helping

168
00:08:47,760 --> 00:08:50,640
organize us and help us uh with a

169
00:08:50,640 --> 00:08:52,480
website and

170
00:08:52,480 --> 00:08:55,519
github and background

171
00:08:55,519 --> 00:08:59,600
and now let's get started

172
00:09:00,240 --> 00:09:02,880
yesterday

173
00:09:03,920 --> 00:09:06,160
good afternoon i have a question on the

174
00:09:06,160 --> 00:09:09,440
crypto review panel um

175
00:09:09,440 --> 00:09:11,760
i noticed that sometimes a request is

176
00:09:11,760 --> 00:09:13,959
being made and then it takes an

177
00:09:13,959 --> 00:09:16,480
extremely long time to

178
00:09:16,480 --> 00:09:19,040
get the review done even though people

179
00:09:19,040 --> 00:09:20,720
really promised to do it in about a

180
00:09:20,720 --> 00:09:22,880
month and these are all people in the

181
00:09:22,880 --> 00:09:24,720
crypto panel who volunteered for this

182
00:09:24,720 --> 00:09:26,640
position so it's not just a random

183
00:09:26,640 --> 00:09:30,080
person of the audience right

184
00:09:30,320 --> 00:09:33,040
so so a particular case was last year of

185
00:09:33,040 --> 00:09:35,519
a document

186
00:09:35,519 --> 00:09:36,560
that i

187
00:09:36,560 --> 00:09:38,959
had reviewed already three times

188
00:09:38,959 --> 00:09:42,720
and it took more than four months to uh

189
00:09:42,720 --> 00:09:46,000
essentially get any feedback

190
00:09:46,399 --> 00:09:48,720
so are you still waiting for a view or

191
00:09:48,720 --> 00:09:50,720
are you just i'm not very still waiting

192
00:09:50,720 --> 00:09:53,120
for review but i think uh it's it's

193
00:09:53,120 --> 00:09:55,600
really

194
00:09:55,839 --> 00:09:57,360
yeah

195
00:09:57,360 --> 00:09:59,600
it's it's really hard to accept uh a

196
00:09:59,600 --> 00:10:01,680
four months delay of people who promise

197
00:10:01,680 --> 00:10:04,399
to do something in one month right

198
00:10:04,399 --> 00:10:06,640
right that's fair enough uh yeah i think

199
00:10:06,640 --> 00:10:09,360
uh lesson here is uh chairs really

200
00:10:09,360 --> 00:10:11,200
should be on top of this

201
00:10:11,200 --> 00:10:13,040
and make sure that

202
00:10:13,040 --> 00:10:15,920
if you cannot

203
00:10:15,920 --> 00:10:17,760
fulfill that we should should be able to

204
00:10:17,760 --> 00:10:20,720
find another reviewer

205
00:10:20,720 --> 00:10:23,040
chris

206
00:10:26,320 --> 00:10:28,560
okay

207
00:10:28,959 --> 00:10:31,959
christopher

208
00:10:32,079 --> 00:10:33,519
are you uh

209
00:10:33,519 --> 00:10:36,959
on crypto review panel or

210
00:10:37,920 --> 00:10:41,200
no i i i um i just wanted to

211
00:10:41,200 --> 00:10:42,399
like i had a follow-up question but

212
00:10:42,399 --> 00:10:43,839
there's someone in the queue before me

213
00:10:43,839 --> 00:10:47,320
and i don't want to jump

214
00:10:52,240 --> 00:10:53,279
um

215
00:10:53,279 --> 00:10:55,440
i'm curious how how many

216
00:10:55,440 --> 00:10:58,959
requests for reviews that um

217
00:10:58,959 --> 00:11:02,079
uh sorry about that i i i misattributed

218
00:11:02,079 --> 00:11:04,000
i looked at the name in the queue um

219
00:11:04,000 --> 00:11:05,600
i'll fix that in the notes

220
00:11:05,600 --> 00:11:07,200
um

221
00:11:07,200 --> 00:11:09,680
i uh i wonder how many requests for

222
00:11:09,680 --> 00:11:11,200
review the the

223
00:11:11,200 --> 00:11:13,600
the crypto review panel has at any given

224
00:11:13,600 --> 00:11:15,600
time i'm just curious

225
00:11:15,600 --> 00:11:17,600
uh it really varies sometimes there are

226
00:11:17,600 --> 00:11:19,120
a couple of months or three months in a

227
00:11:19,120 --> 00:11:20,800
row then there are none and then

228
00:11:20,800 --> 00:11:23,360
sometimes you get two or three in one

229
00:11:23,360 --> 00:11:25,120
month or even like

230
00:11:25,120 --> 00:11:27,120
twice as many

231
00:11:27,120 --> 00:11:30,240
i would say about two or three requests

232
00:11:30,240 --> 00:11:33,279
per month on average

233
00:11:38,320 --> 00:11:40,640
right

234
00:11:41,440 --> 00:11:43,839
okay

235
00:11:48,000 --> 00:11:49,519
yes renee

236
00:11:49,519 --> 00:11:52,480
um so sorry just one more question

237
00:11:52,480 --> 00:11:55,360
i i looked at some of the uh as we all

238
00:11:55,360 --> 00:11:59,839
know uh the crypto uh uh mailing list is

239
00:11:59,839 --> 00:12:01,680
only sporadically being used for

240
00:12:01,680 --> 00:12:03,920
technical discussion

241
00:12:03,920 --> 00:12:07,279
and i noticed that uh some documents

242
00:12:07,279 --> 00:12:10,560
apparently were ready to be uh

243
00:12:10,560 --> 00:12:14,000
to to proceed based on

244
00:12:14,000 --> 00:12:16,959
one crypto review panel review and it

245
00:12:16,959 --> 00:12:19,440
was absolutely a kind of a

246
00:12:19,440 --> 00:12:21,760
dead silence on the mainly mailing list

247
00:12:21,760 --> 00:12:23,920
and i i always thought that crypto

248
00:12:23,920 --> 00:12:25,279
review panel

249
00:12:25,279 --> 00:12:27,440
was not a substitute for the normal

250
00:12:27,440 --> 00:12:30,160
operation of the sea of rg so i'm just

251
00:12:30,160 --> 00:12:32,399
wondering whether cfg is kind of dead

252
00:12:32,399 --> 00:12:34,000
and the crypto review panel is doing

253
00:12:34,000 --> 00:12:37,279
something in background right

254
00:12:37,600 --> 00:12:40,320
no it's absolutely not substitute that's

255
00:12:40,320 --> 00:12:42,480
they should they are basically working

256
00:12:42,480 --> 00:12:44,399
the same with the director

257
00:12:44,399 --> 00:12:48,079
uh we should take offline any specific

258
00:12:48,079 --> 00:12:52,120
cases when you have concerns

259
00:12:53,040 --> 00:12:55,440
right with this uh

260
00:12:55,440 --> 00:12:57,279
chris wood

261
00:12:57,279 --> 00:12:59,760
keep landing on signature schemes i'm

262
00:12:59,760 --> 00:13:03,000
going to

263
00:13:07,680 --> 00:13:09,920
okay

264
00:13:10,880 --> 00:13:13,200
can you uh accept the request

265
00:13:13,200 --> 00:13:15,680
oh are you driving

266
00:13:15,680 --> 00:13:17,920
uh no hold on

267
00:13:17,920 --> 00:13:20,399
i can pass it to you

268
00:13:20,399 --> 00:13:22,079
that'd probably be easier

269
00:13:22,079 --> 00:13:23,040
uh

270
00:13:23,040 --> 00:13:24,639
hold on let me

271
00:13:24,639 --> 00:13:28,320
cancel the request and then i'll

272
00:13:29,120 --> 00:13:31,120
i should be able to just pass slide

273
00:13:31,120 --> 00:13:32,959
control

274
00:13:32,959 --> 00:13:35,120
okay oh oh awesome i know you could do

275
00:13:35,120 --> 00:13:37,200
that all right uh yeah thanks everyone

276
00:13:37,200 --> 00:13:39,360
um this is a presentation of a new draft

277
00:13:39,360 --> 00:13:41,760
um on this subject we call key blinding

278
00:13:41,760 --> 00:13:43,440
for signature schemes

279
00:13:43,440 --> 00:13:45,839
um joint work with uh frank denis and

280
00:13:45,839 --> 00:13:47,360
eating it

281
00:13:47,360 --> 00:13:49,839
and myself

282
00:13:50,079 --> 00:13:52,079
so for some context um

283
00:13:52,079 --> 00:13:54,480
consider this the setting where you have

284
00:13:54,480 --> 00:13:56,720
what we call a single proverb verifier

285
00:13:56,720 --> 00:13:58,639
where the prover wants to convince um

286
00:13:58,639 --> 00:14:02,800
the verifier of you know uh

287
00:14:02,800 --> 00:14:04,880
basically a signature over a message

288
00:14:04,880 --> 00:14:06,240
where the message is input on the

289
00:14:06,240 --> 00:14:08,000
left-hand side to the approver and the

290
00:14:08,000 --> 00:14:12,240
approver has a given key pair as input

291
00:14:12,800 --> 00:14:13,920
the approver

292
00:14:13,920 --> 00:14:16,240
runs some signing algorithm producing a

293
00:14:16,240 --> 00:14:18,880
signature and sends message public key

294
00:14:18,880 --> 00:14:20,800
and signature to the verifier

295
00:14:20,800 --> 00:14:22,880
the verifier checks

296
00:14:22,880 --> 00:14:24,639
this particular signature and outputs

297
00:14:24,639 --> 00:14:26,160
basically a bit as to whether or not

298
00:14:26,160 --> 00:14:28,720
it's valid

299
00:14:28,720 --> 00:14:30,399
in this particular setting

300
00:14:30,399 --> 00:14:31,440
uh

301
00:14:31,440 --> 00:14:34,160
we basically want that this uh this

302
00:14:34,160 --> 00:14:37,199
proof the signature is unforgivable

303
00:14:37,199 --> 00:14:39,440
meaning that if you're given a a

304
00:14:39,440 --> 00:14:41,040
a tuple of message public key and

305
00:14:41,040 --> 00:14:44,560
signature um it's the verifier will only

306
00:14:44,560 --> 00:14:47,120
conclude um uh that the signature is

307
00:14:47,120 --> 00:14:49,600
correct if it was produced by someone

308
00:14:49,600 --> 00:14:50,880
who actually has access to the

309
00:14:50,880 --> 00:14:53,040
corresponding secret key um with

310
00:14:53,040 --> 00:14:54,959
overwhelming probability

311
00:14:54,959 --> 00:14:56,399
um

312
00:14:56,399 --> 00:14:58,000
this is i mean this is just a basic

313
00:14:58,000 --> 00:15:00,800
digital signature scheme um but but

314
00:15:00,800 --> 00:15:03,199
there are scenarios wherein um you know

315
00:15:03,199 --> 00:15:04,639
the the

316
00:15:04,639 --> 00:15:07,680
you might not want the verifier um uh to

317
00:15:07,680 --> 00:15:10,560
learn information about sort of the the

318
00:15:10,560 --> 00:15:11,519
prover

319
00:15:11,519 --> 00:15:12,399
that

320
00:15:12,399 --> 00:15:14,240
produced the signature

321
00:15:14,240 --> 00:15:15,199
um

322
00:15:15,199 --> 00:15:17,279
or more specifically you might not want

323
00:15:17,279 --> 00:15:18,880
the verifier to learn

324
00:15:18,880 --> 00:15:21,120
um

325
00:15:21,199 --> 00:15:23,040
you know information about the the

326
00:15:23,040 --> 00:15:24,959
signers the proofer's long-term public

327
00:15:24,959 --> 00:15:27,519
key through either the the public he

328
00:15:27,519 --> 00:15:29,279
used to verify the message or the

329
00:15:29,279 --> 00:15:31,680
signature itself

330
00:15:31,680 --> 00:15:33,600
this particular

331
00:15:33,600 --> 00:15:35,680
property has a number of applications in

332
00:15:35,680 --> 00:15:37,920
practice right now for example tor's

333
00:15:37,920 --> 00:15:39,920
hidden service identity binding protocol

334
00:15:39,920 --> 00:15:42,399
uses this sort of construction

335
00:15:42,399 --> 00:15:44,000
um for

336
00:15:44,000 --> 00:15:46,160
like signing things in such a way that

337
00:15:46,160 --> 00:15:48,160
you can't link them back to

338
00:15:48,160 --> 00:15:51,120
the the original like service provider

339
00:15:51,120 --> 00:15:52,839
um that's also used in like

340
00:15:52,839 --> 00:15:55,839
cryptocurrencies for private airdrop

341
00:15:55,839 --> 00:15:57,600
um it's used in like bitcoin

342
00:15:57,600 --> 00:16:00,079
hierarchical um

343
00:16:00,079 --> 00:16:04,480
uh wallets too to minimize state and um

344
00:16:04,480 --> 00:16:06,320
recently uh we've

345
00:16:06,320 --> 00:16:09,199
found an application in privacy pass for

346
00:16:09,199 --> 00:16:10,880
a different type of issuance protocol

347
00:16:10,880 --> 00:16:13,440
that we called rate limiting

348
00:16:13,440 --> 00:16:15,199
so it does seem to be a sort of common

349
00:16:15,199 --> 00:16:16,320
uh

350
00:16:16,320 --> 00:16:18,399
common functionality and the purpose of

351
00:16:18,399 --> 00:16:21,040
this draft is to try to

352
00:16:21,040 --> 00:16:22,959
uh basically

353
00:16:22,959 --> 00:16:24,959
you know uh

354
00:16:24,959 --> 00:16:26,800
standardize it um

355
00:16:26,800 --> 00:16:28,800
uh and specify it so that we can have

356
00:16:28,800 --> 00:16:31,600
interoperable implementations of it

357
00:16:31,600 --> 00:16:32,480
um

358
00:16:32,480 --> 00:16:35,040
and to to to sort of explain what i mean

359
00:16:35,040 --> 00:16:37,600
by this i guess not revealing anything

360
00:16:37,600 --> 00:16:39,360
about the prover

361
00:16:39,360 --> 00:16:41,680
let's move on to a sort of alternate

362
00:16:41,680 --> 00:16:42,880
setting where you have multiple

363
00:16:42,880 --> 00:16:45,440
approvers now

364
00:16:45,440 --> 00:16:47,199
so you have on the left-hand side two

365
00:16:47,199 --> 00:16:50,160
provers brewer zero prover one each have

366
00:16:50,160 --> 00:16:53,839
their own uh unique key pair um

367
00:16:53,839 --> 00:16:55,600
and each are given the same input

368
00:16:55,600 --> 00:16:57,360
message to sign

369
00:16:57,360 --> 00:16:58,639
you have some

370
00:16:58,639 --> 00:17:00,480
party in between proven verifier which

371
00:17:00,480 --> 00:17:02,160
i'm gonna call mediator just for lack of

372
00:17:02,160 --> 00:17:04,559
a better technical term and you have the

373
00:17:04,559 --> 00:17:06,480
verifier as before

374
00:17:06,480 --> 00:17:08,079
in the setting

375
00:17:08,079 --> 00:17:09,599
both groupers are going to sign the

376
00:17:09,599 --> 00:17:11,199
message with their respective secret

377
00:17:11,199 --> 00:17:12,160
keys

378
00:17:12,160 --> 00:17:15,039
send their their triples over to the the

379
00:17:15,039 --> 00:17:17,039
mediator who is going to choose a random

380
00:17:17,039 --> 00:17:20,799
bit and then decide to forward on the

381
00:17:20,799 --> 00:17:23,119
triple from uh either proof or zero

382
00:17:23,119 --> 00:17:24,559
approver one based on that particular

383
00:17:24,559 --> 00:17:26,640
bit to the verifier and the verifier

384
00:17:26,640 --> 00:17:27,520
will

385
00:17:27,520 --> 00:17:29,360
run the verification algorithm and try

386
00:17:29,360 --> 00:17:32,720
to guess the bit um

387
00:17:32,720 --> 00:17:35,039
uh so we asked two questions um you know

388
00:17:35,039 --> 00:17:36,480
is this unforgivable

389
00:17:36,480 --> 00:17:38,799
uh in the in the traditional sense like

390
00:17:38,799 --> 00:17:40,480
uh that i described earlier if you're

391
00:17:40,480 --> 00:17:42,240
given you know this triple message

392
00:17:42,240 --> 00:17:44,400
public key signature can you verify uh

393
00:17:44,400 --> 00:17:47,039
or can you try to cheat the the verifier

394
00:17:47,039 --> 00:17:49,120
um and the answer is yes uh in

395
00:17:49,120 --> 00:17:50,480
particular because this is just a basic

396
00:17:50,480 --> 00:17:52,000
digital signature

397
00:17:52,000 --> 00:17:53,120
um

398
00:17:53,120 --> 00:17:54,640
but then when you look at the

399
00:17:54,640 --> 00:17:56,799
unlinkability um

400
00:17:56,799 --> 00:17:59,440
uh sort of property uh

401
00:17:59,440 --> 00:18:01,360
that does no that does not hold in this

402
00:18:01,360 --> 00:18:03,360
particular case um in particular because

403
00:18:03,360 --> 00:18:04,640
the verify you'll notice on the right

404
00:18:04,640 --> 00:18:07,120
hand side has as input the public keys

405
00:18:07,120 --> 00:18:09,440
of both river zero and proofer one so

406
00:18:09,440 --> 00:18:11,120
it's pretty trivial to check whether or

407
00:18:11,120 --> 00:18:13,039
not prover zero proofer one generated

408
00:18:13,039 --> 00:18:15,280
this particular signature by just

409
00:18:15,280 --> 00:18:17,120
looking at the public key or trying to

410
00:18:17,120 --> 00:18:18,080
verify

411
00:18:18,080 --> 00:18:20,480
the message signature under either one

412
00:18:20,480 --> 00:18:22,880
of the keys

413
00:18:22,880 --> 00:18:25,600
so what we want is for this

414
00:18:25,600 --> 00:18:28,400
the verifier to not be able to determine

415
00:18:28,400 --> 00:18:29,440
uh

416
00:18:29,440 --> 00:18:31,039
the bit b

417
00:18:31,039 --> 00:18:33,039
um with probability negligibly larger

418
00:18:33,039 --> 00:18:37,120
than half no better than a random guess

419
00:18:37,600 --> 00:18:40,000
and so this is where

420
00:18:40,000 --> 00:18:41,520
the sort of functional requirements come

421
00:18:41,520 --> 00:18:42,880
to play

422
00:18:42,880 --> 00:18:45,280
we want an unforgeable signature scheme

423
00:18:45,280 --> 00:18:46,240
with these

424
00:18:46,240 --> 00:18:48,080
sort of additional properties in

425
00:18:48,080 --> 00:18:50,559
particular that the the per message

426
00:18:50,559 --> 00:18:52,400
public keys that are used to sort of

427
00:18:52,400 --> 00:18:54,400
verify a message at the verifier are

428
00:18:54,400 --> 00:18:56,080
independently distributed from the

429
00:18:56,080 --> 00:18:58,880
long-term uh approver keys

430
00:18:58,880 --> 00:19:00,799
moreover that we want the signatures

431
00:19:00,799 --> 00:19:03,120
themselves that are produced to not leak

432
00:19:03,120 --> 00:19:05,039
any information about the long-term

433
00:19:05,039 --> 00:19:07,760
signing keys

434
00:19:08,400 --> 00:19:10,799
and sort of jointly this this captures

435
00:19:10,799 --> 00:19:12,480
this intuition notion uh or this

436
00:19:12,480 --> 00:19:14,240
intuitive notion of unlinkability that i

437
00:19:14,240 --> 00:19:16,160
was describing earlier

438
00:19:16,160 --> 00:19:18,000
and our proposed solution is a signature

439
00:19:18,000 --> 00:19:21,120
scheme with key blinding

440
00:19:22,880 --> 00:19:24,960
um functionally what this does is it

441
00:19:24,960 --> 00:19:26,880
extends an existing digital signature

442
00:19:26,880 --> 00:19:27,760
scheme with two additional

443
00:19:27,760 --> 00:19:29,760
functionalities one of which is

444
00:19:29,760 --> 00:19:32,080
a function for blinding and unblinding a

445
00:19:32,080 --> 00:19:33,679
public key

446
00:19:33,679 --> 00:19:36,960
so given a public key and a blinding key

447
00:19:36,960 --> 00:19:38,960
which in in the in the syntax of the

448
00:19:38,960 --> 00:19:41,360
object is just another private key

449
00:19:41,360 --> 00:19:43,280
um you can produce a blinded

450
00:19:43,280 --> 00:19:45,679
representation of that public key

451
00:19:45,679 --> 00:19:47,919
and then you can of course unblind it

452
00:19:47,919 --> 00:19:49,440
using the unblinded the original

453
00:19:49,440 --> 00:19:51,840
unblinded public key

454
00:19:51,840 --> 00:19:53,360
and we have this separate functionality

455
00:19:53,360 --> 00:19:56,400
which is called blank key sign

456
00:19:56,400 --> 00:19:58,880
we're open to name changes if it's

457
00:19:58,880 --> 00:20:01,520
helpful for clarity

458
00:20:01,520 --> 00:20:04,000
but the gist is that

459
00:20:04,000 --> 00:20:06,480
if you run blind key sign with a long

460
00:20:06,480 --> 00:20:10,320
term uh signing key and a blind key

461
00:20:10,320 --> 00:20:13,200
the output signature will be valid under

462
00:20:13,200 --> 00:20:17,600
the correspondingly blinded public key

463
00:20:17,600 --> 00:20:20,640
using the same blind so in this in this

464
00:20:20,640 --> 00:20:22,640
relation at the bottom we have that

465
00:20:22,640 --> 00:20:24,559
verifying trying to run the verification

466
00:20:24,559 --> 00:20:28,000
algorithm with the blinded public key

467
00:20:28,000 --> 00:20:31,200
over the message um using a signature

468
00:20:31,200 --> 00:20:33,280
output from blankie sign

469
00:20:33,280 --> 00:20:34,400
succeeds

470
00:20:34,400 --> 00:20:37,520
or is equal to one

471
00:20:38,559 --> 00:20:40,159
and that's the sort of

472
00:20:40,159 --> 00:20:41,919
requirement or

473
00:20:41,919 --> 00:20:44,880
functionality i guess

474
00:20:46,720 --> 00:20:48,960
so if you were then to plug this

475
00:20:48,960 --> 00:20:50,720
particular scheme back into the multiple

476
00:20:50,720 --> 00:20:52,559
prover scenario before

477
00:20:52,559 --> 00:20:53,919
um

478
00:20:53,919 --> 00:20:55,280
you notice that the

479
00:20:55,280 --> 00:20:57,360
the provers on the left are slightly

480
00:20:57,360 --> 00:20:59,440
different now they have the same inputs

481
00:20:59,440 --> 00:21:01,120
as before they have the same long term

482
00:21:01,120 --> 00:21:02,880
signing key pairs in the same input

483
00:21:02,880 --> 00:21:04,320
message

484
00:21:04,320 --> 00:21:06,159
but in actually producing a signature

485
00:21:06,159 --> 00:21:07,760
they both generate

486
00:21:07,760 --> 00:21:10,159
a random blinding key

487
00:21:10,159 --> 00:21:12,000
referred to as bk0 bk1 in this

488
00:21:12,000 --> 00:21:14,320
particular case and they run blind key

489
00:21:14,320 --> 00:21:15,919
sign

490
00:21:15,919 --> 00:21:18,720
with that particular binder key

491
00:21:18,720 --> 00:21:20,799
producing a signature and their triple

492
00:21:20,799 --> 00:21:23,520
that they send now

493
00:21:23,520 --> 00:21:25,360
to the mediator consists of the message

494
00:21:25,360 --> 00:21:26,480
signature

495
00:21:26,480 --> 00:21:29,520
and the blinding key

496
00:21:29,679 --> 00:21:31,760
the mediator will choose a bit just as

497
00:21:31,760 --> 00:21:33,120
it would before

498
00:21:33,120 --> 00:21:35,280
um and it will uh use that bit to

499
00:21:35,280 --> 00:21:37,360
determine which of the blinded public

500
00:21:37,360 --> 00:21:41,360
keys uh to gen sent to the verifier

501
00:21:41,360 --> 00:21:44,880
um so if the bit zero it blinds

502
00:21:44,880 --> 00:21:46,880
prover zero's public key

503
00:21:46,880 --> 00:21:49,440
with proof of zeros blind

504
00:21:49,440 --> 00:21:52,159
producing bk and sends that over to the

505
00:21:52,159 --> 00:21:54,799
verifier along with the signature

506
00:21:54,799 --> 00:21:57,280
produced by proof of zero

507
00:21:57,280 --> 00:21:59,600
and likewise for approver one

508
00:21:59,600 --> 00:22:00,880
um

509
00:22:00,880 --> 00:22:02,799
so if you look at the the two properties

510
00:22:02,799 --> 00:22:04,880
that we were uh targeting before

511
00:22:04,880 --> 00:22:08,640
unforgeability um uh has a sort of a

512
00:22:08,640 --> 00:22:10,880
signature scheme uh it still has this

513
00:22:10,880 --> 00:22:13,280
property that the the the signature

514
00:22:13,280 --> 00:22:15,600
itself um must have been produced by

515
00:22:15,600 --> 00:22:18,159
someone with the long-term private key

516
00:22:18,159 --> 00:22:22,559
um with overwhelming probability uh

517
00:22:22,559 --> 00:22:25,440
um and uh by virtue of satisfying the

518
00:22:25,440 --> 00:22:27,919
sort of functional requirements um

519
00:22:27,919 --> 00:22:29,600
it also now has this uh this

520
00:22:29,600 --> 00:22:31,919
unlinkability property that we want um

521
00:22:31,919 --> 00:22:34,720
in particular uh the the blinding key or

522
00:22:34,720 --> 00:22:37,200
the blinded public key bk

523
00:22:37,200 --> 00:22:38,840
is independent from

524
00:22:38,840 --> 00:22:42,320
both of the long-term public keys pk0

525
00:22:42,320 --> 00:22:44,880
and pk1 are the provers

526
00:22:44,880 --> 00:22:47,039
and like similarly the the signature

527
00:22:47,039 --> 00:22:49,120
itself is independent from the long-term

528
00:22:49,120 --> 00:22:51,120
signing keys

529
00:22:51,120 --> 00:22:52,000
so

530
00:22:52,000 --> 00:22:54,159
that the triple itself reveals nothing

531
00:22:54,159 --> 00:22:56,480
um about either proof of zero or

532
00:22:56,480 --> 00:22:59,360
approver one so it intuitively the the

533
00:22:59,360 --> 00:23:02,720
verifier cannot guess the bit with uh

534
00:23:02,720 --> 00:23:04,559
it cannot do better than a random guess

535
00:23:04,559 --> 00:23:06,880
at bit uh b

536
00:23:06,880 --> 00:23:10,559
um which is the property that we want

537
00:23:12,880 --> 00:23:13,840
that's effectively it for the

538
00:23:13,840 --> 00:23:16,320
functionality it's very simple

539
00:23:16,320 --> 00:23:19,440
the eddsa variant is

540
00:23:19,440 --> 00:23:21,120
in the draft

541
00:23:21,120 --> 00:23:25,120
building off of rc 032 um uh it only

542
00:23:25,120 --> 00:23:27,760
covers the pure edsa none of the context

543
00:23:27,760 --> 00:23:30,720
or prehashing variants or whatever um

544
00:23:30,720 --> 00:23:32,799
that's very straightforward it's often

545
00:23:32,799 --> 00:23:35,600
uh used as an offhand demonstration of

546
00:23:35,600 --> 00:23:38,400
the the concept in academic literature

547
00:23:38,400 --> 00:23:39,440
and whatnot

548
00:23:39,440 --> 00:23:41,760
um there also is an ecdsa variant in

549
00:23:41,760 --> 00:23:45,440
there as well um this is a bit um

550
00:23:45,440 --> 00:23:46,480
uh

551
00:23:46,480 --> 00:23:49,200
different um different in the sense that

552
00:23:49,200 --> 00:23:51,279
it's not doing the obvious thing i guess

553
00:23:51,279 --> 00:23:52,400
uh

554
00:23:52,400 --> 00:23:54,240
that that you would do for a key

555
00:23:54,240 --> 00:23:56,159
blinding um

556
00:23:56,159 --> 00:23:57,279
uh

557
00:23:57,279 --> 00:23:58,880
i can i can elaborate if people would

558
00:23:58,880 --> 00:24:01,520
like but um it's different enough that

559
00:24:01,520 --> 00:24:03,440
uh you know we're doing security

560
00:24:03,440 --> 00:24:04,960
analysis to determine whether or not it

561
00:24:04,960 --> 00:24:06,400
is indeed safe

562
00:24:06,400 --> 00:24:08,799
um but the the intuitive intuition is

563
00:24:08,799 --> 00:24:12,400
that it is it is um it is correct

564
00:24:12,400 --> 00:24:13,840
uh there are also a couple of

565
00:24:13,840 --> 00:24:15,919
implementations thanks to frank and

566
00:24:15,919 --> 00:24:18,240
myself um and other people are working

567
00:24:18,240 --> 00:24:20,960
on them as well

568
00:24:20,960 --> 00:24:22,799
it's fairly simple straightforward draft

569
00:24:22,799 --> 00:24:24,960
to implement and there are test factors

570
00:24:24,960 --> 00:24:26,240
available for those who would like to

571
00:24:26,240 --> 00:24:28,559
implement it

572
00:24:28,559 --> 00:24:30,400
and as i said the security analysis is

573
00:24:30,400 --> 00:24:32,480
underway we hope to make those results

574
00:24:32,480 --> 00:24:34,799
public as soon as they are done

575
00:24:34,799 --> 00:24:36,559
um to gain confidence in the the

576
00:24:36,559 --> 00:24:38,400
constructions um

577
00:24:38,400 --> 00:24:39,520
but uh

578
00:24:39,520 --> 00:24:43,360
um as i said the the eds eddsa one is um

579
00:24:43,360 --> 00:24:46,000
uh fairly straightforward intuitive um

580
00:24:46,000 --> 00:24:48,720
it's the ecdsa one that is the the more

581
00:24:48,720 --> 00:24:51,360
interesting variant

582
00:24:51,360 --> 00:24:54,480
um and with that um i guess uh i

583
00:24:54,480 --> 00:24:56,159
have two questions for the group um the

584
00:24:56,159 --> 00:24:58,000
first of which uh do folks find this to

585
00:24:58,000 --> 00:25:00,559
be a compelling use case um and problem

586
00:25:00,559 --> 00:25:02,720
worth uh working on uh and trying to

587
00:25:02,720 --> 00:25:04,720
solve with this particular this

588
00:25:04,720 --> 00:25:06,400
construction you know signature schemes

589
00:25:06,400 --> 00:25:08,640
we keep winding um and secondly are

590
00:25:08,640 --> 00:25:11,520
folks interested in adopting this as a

591
00:25:11,520 --> 00:25:13,200
an initial

592
00:25:13,200 --> 00:25:15,200
draft to

593
00:25:15,200 --> 00:25:17,200
to do exactly that

594
00:25:17,200 --> 00:25:19,760
and i will i will pause here

595
00:25:19,760 --> 00:25:22,879
for questions and i'll read the

596
00:25:26,840 --> 00:25:29,440
chat we have three minutes for quick

597
00:25:29,440 --> 00:25:32,080
questions if there are any

598
00:25:32,080 --> 00:25:32,370
um

599
00:25:32,370 --> 00:25:33,600
[Music]

600
00:25:33,600 --> 00:25:35,760
i think the question of adoption will

601
00:25:35,760 --> 00:25:38,799
probably discuss between chairs and

602
00:25:38,799 --> 00:25:42,760
might take it to the mailing list

603
00:25:43,440 --> 00:25:46,720
uh worked for me um if if folks um

604
00:25:46,720 --> 00:25:48,799
are interested in um

605
00:25:48,799 --> 00:25:51,600
you know more clarity on uh

606
00:25:51,600 --> 00:25:52,720
um

607
00:25:52,720 --> 00:25:55,440
anything um you know the

608
00:25:55,440 --> 00:25:56,480
the draft

609
00:25:56,480 --> 00:25:57,679
link the draft has a link to the

610
00:25:57,679 --> 00:25:59,520
repository where it's being developed

611
00:25:59,520 --> 00:26:00,960
um

612
00:26:00,960 --> 00:26:02,799
and uh of course we welcome any and all

613
00:26:02,799 --> 00:26:06,559
of your feedback um and contributions

614
00:26:06,559 --> 00:26:08,240
christopher are you

615
00:26:08,240 --> 00:26:11,559
on this topic

616
00:26:13,279 --> 00:26:14,720
uh my question i would like to

617
00:26:14,720 --> 00:26:16,960
understand a little bit um

618
00:26:16,960 --> 00:26:19,120
more about uh what changes you made to

619
00:26:19,120 --> 00:26:20,640
ecdsa

620
00:26:20,640 --> 00:26:22,320
or hashtag

621
00:26:22,320 --> 00:26:26,480
right so um the ecdsa variant uh the the

622
00:26:26,480 --> 00:26:28,640
the intuitive thing that you might do

623
00:26:28,640 --> 00:26:32,320
is uh given a like a private ecd ecdsa

624
00:26:32,320 --> 00:26:35,200
key um and a blinding key which is also

625
00:26:35,200 --> 00:26:38,880
a private key um you might uh like just

626
00:26:38,880 --> 00:26:40,960
multiply the two together and similarly

627
00:26:40,960 --> 00:26:42,799
you might multiply the like the public

628
00:26:42,799 --> 00:26:46,400
key by the corresponding blinding key um

629
00:26:46,400 --> 00:26:47,279
uh

630
00:26:47,279 --> 00:26:50,240
and ergo have a a blinded representation

631
00:26:50,240 --> 00:26:51,600
of both the private key as well as the

632
00:26:51,600 --> 00:26:52,720
public key

633
00:26:52,720 --> 00:26:55,919
unfortunately there's this um

634
00:26:56,320 --> 00:26:58,159
there's a body of work on related key

635
00:26:58,159 --> 00:26:59,440
attacks and how they can be used to

636
00:26:59,440 --> 00:27:00,880
produce forgeries

637
00:27:00,880 --> 00:27:02,880
for schnorr-like signatures as well as

638
00:27:02,880 --> 00:27:04,960
ecdsa

639
00:27:04,960 --> 00:27:07,279
and in particular this sort of naive uh

640
00:27:07,279 --> 00:27:08,880
way of

641
00:27:08,880 --> 00:27:11,840
blinding uh an ecdsa

642
00:27:11,840 --> 00:27:13,760
public and private key

643
00:27:13,760 --> 00:27:16,400
uh does lend itself to forgeries um i

644
00:27:16,400 --> 00:27:17,679
can point people to the relevant

645
00:27:17,679 --> 00:27:19,919
references if they're interested

646
00:27:19,919 --> 00:27:21,760
so the tweak we made was to basically

647
00:27:21,760 --> 00:27:23,440
rather than

648
00:27:23,440 --> 00:27:24,399
um

649
00:27:24,399 --> 00:27:26,480
uh

650
00:27:26,480 --> 00:27:28,240
maintain sort of the algebraic

651
00:27:28,240 --> 00:27:30,080
relationship between

652
00:27:30,080 --> 00:27:33,120
the the blinding key and its

653
00:27:33,120 --> 00:27:35,440
impact on the the

654
00:27:35,440 --> 00:27:38,480
i'm using the word blind

655
00:27:40,799 --> 00:27:43,039
um

656
00:27:43,440 --> 00:27:46,159
okay um the the trick was to

657
00:27:46,159 --> 00:27:47,679
uh rather than

658
00:27:47,679 --> 00:27:49,120
maintain the algebraic relationship

659
00:27:49,120 --> 00:27:51,840
between the the input blinding key and

660
00:27:51,840 --> 00:27:54,399
the output blinded public key

661
00:27:54,399 --> 00:27:58,320
uh to hash the input blinding key

662
00:27:58,320 --> 00:28:02,720
to a scalar to sort of blow away

663
00:28:03,840 --> 00:28:06,399
this this algebraic relationship and

664
00:28:06,399 --> 00:28:08,080
make it so that

665
00:28:08,080 --> 00:28:10,080
basically you need to produce

666
00:28:10,080 --> 00:28:12,399
a collision in this hash

667
00:28:12,399 --> 00:28:17,279
in order to produce a forgery um so the

668
00:28:17,279 --> 00:28:19,440
the construction does kind of depend on

669
00:28:19,440 --> 00:28:21,840
um uh security in the random oracle

670
00:28:21,840 --> 00:28:23,919
model uh intuitively

671
00:28:23,919 --> 00:28:28,159
um but that's effectively the gist i i

672
00:28:28,159 --> 00:28:30,159
i wish i had it written down in slides

673
00:28:30,159 --> 00:28:32,559
um but perhaps that that vocal

674
00:28:32,559 --> 00:28:34,320
description was not overly clear but

675
00:28:34,320 --> 00:28:36,480
chris i can i can send you pointers

676
00:28:36,480 --> 00:28:39,440
um uh to the the diff where it was

677
00:28:39,440 --> 00:28:43,240
included if that would be helpful

678
00:28:44,720 --> 00:28:47,200
okay so the unfortunately the queue is

679
00:28:47,200 --> 00:28:49,360
closed and we are a bit out of time on

680
00:28:49,360 --> 00:28:53,039
this topic so let's uh

681
00:28:53,760 --> 00:28:55,440
winning list

682
00:28:55,440 --> 00:28:56,799
okay

683
00:28:56,799 --> 00:28:59,039
right thank you uh

684
00:28:59,039 --> 00:29:02,240
steven you are next

685
00:29:03,440 --> 00:29:04,399
um

686
00:29:04,399 --> 00:29:07,600
do you want me to drive slides

687
00:29:07,919 --> 00:29:08,720
fine

688
00:29:08,720 --> 00:29:10,559
i'll do that

689
00:29:10,559 --> 00:29:13,840
somebody was very tall

690
00:29:14,640 --> 00:29:18,320
just hold on one second

691
00:29:24,559 --> 00:29:27,200
okay uh next slide hold on

692
00:29:27,200 --> 00:29:29,919
just one second

693
00:29:32,559 --> 00:29:34,720
okay

694
00:29:34,960 --> 00:29:37,760
great so um i see there was like a

695
00:29:37,760 --> 00:29:39,919
hundred people in the in the in the in

696
00:29:39,919 --> 00:29:41,600
the session so i hope to get some some

697
00:29:41,600 --> 00:29:43,039
feedback on this even if it's just kind

698
00:29:43,039 --> 00:29:44,960
of a sense of what people think so the

699
00:29:44,960 --> 00:29:46,799
lake working group is defining a

700
00:29:46,799 --> 00:29:48,720
protocol called ad hoc

701
00:29:48,720 --> 00:29:50,480
uh for authentication key establishment

702
00:29:50,480 --> 00:29:52,399
for small devices it's you know you can

703
00:29:52,399 --> 00:29:54,000
think of it kind of a bit like dls it

704
00:29:54,000 --> 00:29:56,080
does the same kind of thing

705
00:29:56,080 --> 00:29:56,960
but

706
00:29:56,960 --> 00:29:59,279
uh it's you know really tailored towards

707
00:29:59,279 --> 00:30:01,600
kind of small packet size few octets to

708
00:30:01,600 --> 00:30:02,640
be emitted

709
00:30:02,640 --> 00:30:03,760
and if you care about the requirements

710
00:30:03,760 --> 00:30:05,440
you can see them there

711
00:30:05,440 --> 00:30:07,120
so again like tls there's kind of a

712
00:30:07,120 --> 00:30:08,960
concept of cypher suites

713
00:30:08,960 --> 00:30:10,320
and in

714
00:30:10,320 --> 00:30:11,600
those kind of cypher suites there's a

715
00:30:11,600 --> 00:30:12,960
signature algorithm represented for

716
00:30:12,960 --> 00:30:15,840
authenticating one of the parties

717
00:30:15,840 --> 00:30:17,279
there are suites to find that above

718
00:30:17,279 --> 00:30:19,600
ecdsa and eddsa

719
00:30:19,600 --> 00:30:21,679
and that lake working group

720
00:30:21,679 --> 00:30:23,200
is trying to figure out how to do you

721
00:30:23,200 --> 00:30:25,919
know which which signature algorithms

722
00:30:25,919 --> 00:30:27,279
should be part of a mandatory to

723
00:30:27,279 --> 00:30:29,919
implement set of cypher suites

724
00:30:29,919 --> 00:30:32,240
and as always there's lots of argument

725
00:30:32,240 --> 00:30:33,679
in itf working groups about that but

726
00:30:33,679 --> 00:30:34,880
that's not what we want to talk about

727
00:30:34,880 --> 00:30:38,240
here so next slide

728
00:30:40,480 --> 00:30:43,360
so in this particular context um

729
00:30:43,360 --> 00:30:44,559
there's kind of an additional argument

730
00:30:44,559 --> 00:30:47,120
to the usual mti cypher switch selection

731
00:30:47,120 --> 00:30:48,320
argument

732
00:30:48,320 --> 00:30:49,360
issues

733
00:30:49,360 --> 00:30:51,520
um essentially where an adversary

734
00:30:51,520 --> 00:30:53,679
controls a provision device and can

735
00:30:53,679 --> 00:30:56,080
mount you know fault injection attacks

736
00:30:56,080 --> 00:30:58,159
and extract a signing key

737
00:30:58,159 --> 00:31:00,799
and for the kind of applications the ad

738
00:31:00,799 --> 00:31:02,880
hoc protocol is designed for

739
00:31:02,880 --> 00:31:04,880
that seems much more likely than for you

740
00:31:04,880 --> 00:31:07,200
know tls as used in in data centers or

741
00:31:07,200 --> 00:31:09,039
whatever and uh thanks to renee for

742
00:31:09,039 --> 00:31:10,399
bringing this up and there's a link

743
00:31:10,399 --> 00:31:11,679
there to the thread from the lake

744
00:31:11,679 --> 00:31:13,360
working group

745
00:31:13,360 --> 00:31:16,559
and the context is you know small

746
00:31:16,559 --> 00:31:18,320
relative relatively inexpensive

747
00:31:18,320 --> 00:31:20,960
commercial devices that are provisioned

748
00:31:20,960 --> 00:31:22,399
private key is probably not that well

749
00:31:22,399 --> 00:31:24,000
protected so if you open the device it

750
00:31:24,000 --> 00:31:25,440
won't be zeroed

751
00:31:25,440 --> 00:31:27,360
but hopefully you know you can't just

752
00:31:27,360 --> 00:31:29,519
connect to a uart and read the private

753
00:31:29,519 --> 00:31:30,840
key from the file

754
00:31:30,840 --> 00:31:33,679
system and private key extraction could

755
00:31:33,679 --> 00:31:35,679
be significant because then perhaps you

756
00:31:35,679 --> 00:31:37,039
could pretend to be a controller to some

757
00:31:37,039 --> 00:31:41,840
actuator and cause damage so next slide

758
00:31:42,080 --> 00:31:43,600
uh so

759
00:31:43,600 --> 00:31:45,519
i i know i know almost nothing about

760
00:31:45,519 --> 00:31:47,360
fault injection but i did find a few

761
00:31:47,360 --> 00:31:49,279
papers that were interesting

762
00:31:49,279 --> 00:31:52,000
um so the first one i thought was was

763
00:31:52,000 --> 00:31:53,760
actually pretty good for me because it

764
00:31:53,760 --> 00:31:55,279
actually explains how you can do fault

765
00:31:55,279 --> 00:31:57,200
injection via kind of a low voltage

766
00:31:57,200 --> 00:31:58,080
attack

767
00:31:58,080 --> 00:32:00,159
it's a little bit old but uh it's it's a

768
00:32:00,159 --> 00:32:02,159
really nice explanation of how these

769
00:32:02,159 --> 00:32:03,760
attacks can be kind of mounted in a

770
00:32:03,760 --> 00:32:05,279
realistic environment

771
00:32:05,279 --> 00:32:08,240
and it includes an example of

772
00:32:08,240 --> 00:32:10,559
it's not a novel attack on rsa signing

773
00:32:10,559 --> 00:32:12,559
but it's in that paper there it shows

774
00:32:12,559 --> 00:32:13,760
how such a

775
00:32:13,760 --> 00:32:15,840
such a fault injection attack on on on

776
00:32:15,840 --> 00:32:17,200
reading from memory

777
00:32:17,200 --> 00:32:19,200
can leak in rsa private key

778
00:32:19,200 --> 00:32:21,039
there's also another one

779
00:32:21,039 --> 00:32:23,440
uh about ecdsa from the similar time

780
00:32:23,440 --> 00:32:24,240
frame

781
00:32:24,240 --> 00:32:26,000
same kind of attack

782
00:32:26,000 --> 00:32:27,200
where you're you've got a fault

783
00:32:27,200 --> 00:32:29,679
injection on on kind of memory reads

784
00:32:29,679 --> 00:32:31,200
um although the second one is a

785
00:32:31,200 --> 00:32:33,360
simulation as opposed to a you know an

786
00:32:33,360 --> 00:32:34,880
actual demonstration

787
00:32:34,880 --> 00:32:36,880
but that's on ecdsa and then there's

788
00:32:36,880 --> 00:32:39,360
another one on eddsa which is in that

789
00:32:39,360 --> 00:32:41,760
case it's a power analysis attack

790
00:32:41,760 --> 00:32:44,320
rather than fault ejection

791
00:32:44,320 --> 00:32:45,600
so those are kind of useful papers and i

792
00:32:45,600 --> 00:32:48,960
think what they seem to show is that

793
00:32:48,960 --> 00:32:50,480
at some level

794
00:32:50,480 --> 00:32:52,320
all of the possible sensible options we

795
00:32:52,320 --> 00:32:54,159
have to choose from might be vulnerable

796
00:32:54,159 --> 00:32:56,480
to these kind of attacks in this kind of

797
00:32:56,480 --> 00:32:58,640
context for these kind of devices

798
00:32:58,640 --> 00:33:01,120
next slide

799
00:33:02,559 --> 00:33:03,840
so one of the points

800
00:33:03,840 --> 00:33:05,440
being raised that was raised in some of

801
00:33:05,440 --> 00:33:07,120
the discussion here

802
00:33:07,120 --> 00:33:09,600
is that you know eddisa is deterministic

803
00:33:09,600 --> 00:33:11,919
that might help the attacker as opposed

804
00:33:11,919 --> 00:33:14,320
to the randomness in ecdsa

805
00:33:14,320 --> 00:33:15,679
but of course you can have a bad random

806
00:33:15,679 --> 00:33:18,240
number generator as it's been seen

807
00:33:18,240 --> 00:33:20,399
and there have been some suggestions

808
00:33:20,399 --> 00:33:22,480
john matson has a

809
00:33:22,480 --> 00:33:24,880
suggestion for adding some noise or some

810
00:33:24,880 --> 00:33:27,120
more randomness into eddsa

811
00:33:27,120 --> 00:33:28,480
and again i i don't have a personal

812
00:33:28,480 --> 00:33:29,679
opinion on these

813
00:33:29,679 --> 00:33:31,840
just to to note that the these issues

814
00:33:31,840 --> 00:33:35,199
have come up so next slide

815
00:33:35,440 --> 00:33:37,279
so the ask is i think it boils down to

816
00:33:37,279 --> 00:33:39,679
two questions i mean we seem to have

817
00:33:39,679 --> 00:33:41,760
three kinds of signature algorithms

818
00:33:41,760 --> 00:33:44,000
we you know we may assuming a working

819
00:33:44,000 --> 00:33:45,200
group wants to pick a mandatory to

820
00:33:45,200 --> 00:33:46,559
implement cypher suite with a signature

821
00:33:46,559 --> 00:33:48,240
algorithm is there really much

822
00:33:48,240 --> 00:33:50,480
difference here between them in this

823
00:33:50,480 --> 00:33:53,039
specific kind of attack context

824
00:33:53,039 --> 00:33:53,840
so

825
00:33:53,840 --> 00:33:55,279
you know we could do it some help if

826
00:33:55,279 --> 00:33:58,000
that's the case or assertions that

827
00:33:58,000 --> 00:33:59,840
from from knowledgeable people that it's

828
00:33:59,840 --> 00:34:01,200
it's more or less the same or it's

829
00:34:01,200 --> 00:34:02,960
different for different ones

830
00:34:02,960 --> 00:34:04,159
um or

831
00:34:04,159 --> 00:34:06,080
could cfrg develop something that's uh

832
00:34:06,080 --> 00:34:07,440
usefully better

833
00:34:07,440 --> 00:34:10,079
in this attack context uh

834
00:34:10,079 --> 00:34:11,918
so for context i don't the lake working

835
00:34:11,918 --> 00:34:14,079
group has kind of currently

836
00:34:14,079 --> 00:34:16,079
you know picking their mti

837
00:34:16,079 --> 00:34:18,079
choices has kind of oscillated over the

838
00:34:18,079 --> 00:34:20,480
last number of months i think the

839
00:34:20,480 --> 00:34:21,679
current they currently they've landed on

840
00:34:21,679 --> 00:34:24,000
just saying just three two five six

841
00:34:24,000 --> 00:34:24,960
um

842
00:34:24,960 --> 00:34:26,480
they probably won't want to wait for an

843
00:34:26,480 --> 00:34:28,399
answer so it's not a it's not a question

844
00:34:28,399 --> 00:34:30,159
where uh

845
00:34:30,159 --> 00:34:31,599
we need the answer right now and are

846
00:34:31,599 --> 00:34:33,199
kind of waiting on it and assisting cfrt

847
00:34:33,199 --> 00:34:34,480
doof

848
00:34:34,480 --> 00:34:36,560
but i think it's a generic problem for

849
00:34:36,560 --> 00:34:38,719
particularly for this class device

850
00:34:38,719 --> 00:34:40,000
and again there was there was a thread

851
00:34:40,000 --> 00:34:42,239
on cfrg list that didn't really

852
00:34:42,239 --> 00:34:44,239
reach any any anything i thought was a

853
00:34:44,239 --> 00:34:46,639
clear kind of answer um hence this

854
00:34:46,639 --> 00:34:50,079
presentation so that slides

855
00:34:50,480 --> 00:34:53,040
so again just to summarize the

856
00:34:53,040 --> 00:34:54,879
attacker here controls the provision

857
00:34:54,879 --> 00:34:55,839
device

858
00:34:55,839 --> 00:34:57,200
is able to mount the fault ejection

859
00:34:57,200 --> 00:34:58,640
attacks let's say an extract designing

860
00:34:58,640 --> 00:35:00,000
key

861
00:35:00,000 --> 00:35:01,680
i described the kind of device and the

862
00:35:01,680 --> 00:35:03,520
two questions there are

863
00:35:03,520 --> 00:35:05,119
which of those are if any of them are

864
00:35:05,119 --> 00:35:06,960
kind of good to recommend as a manager

865
00:35:06,960 --> 00:35:09,119
to implement cypher suite and in that

866
00:35:09,119 --> 00:35:10,960
context and is there anything better

867
00:35:10,960 --> 00:35:13,200
that you could recommend

868
00:35:13,200 --> 00:35:17,160
and i hope to get some input

869
00:35:19,440 --> 00:35:22,720
does anybody know about this topic

870
00:35:27,760 --> 00:35:29,440
remain

871
00:35:29,440 --> 00:35:31,119
right

872
00:35:31,119 --> 00:35:33,680
quick remark so indeed i raised this

873
00:35:33,680 --> 00:35:36,079
topic at the lake working group um i

874
00:35:36,079 --> 00:35:38,960
think is usually the deep determinism in

875
00:35:38,960 --> 00:35:39,920
the

876
00:35:39,920 --> 00:35:41,599
generation

877
00:35:41,599 --> 00:35:42,320
so

878
00:35:42,320 --> 00:35:45,680
as as long as one can fix that this edd

879
00:35:45,680 --> 00:35:48,480
is a eddjj may be fine

880
00:35:48,480 --> 00:35:51,040
if one cannot fix it ec dsa already

881
00:35:51,040 --> 00:35:53,760
doesn't have uh this determinism

882
00:35:53,760 --> 00:35:58,040
as long as on this just rfc6979

883
00:35:58,079 --> 00:36:00,240
so i i think it's it can be easily

884
00:36:00,240 --> 00:36:03,440
solved but it has to be addressed if

885
00:36:03,440 --> 00:36:05,839
this is to use edd and otherwise the ecb

886
00:36:05,839 --> 00:36:08,640
davis p256 would be a viable option in

887
00:36:08,640 --> 00:36:09,839
my

888
00:36:09,839 --> 00:36:12,839
opinion

889
00:36:15,440 --> 00:36:17,200
so that that the audio chopped a bit

890
00:36:17,200 --> 00:36:18,320
there but i i think you were basically

891
00:36:18,320 --> 00:36:20,480
saying ecdsa is better

892
00:36:20,480 --> 00:36:22,079
um which then leaves me wondering about

893
00:36:22,079 --> 00:36:23,599
those other two papers that i referenced

894
00:36:23,599 --> 00:36:24,640
so

895
00:36:24,640 --> 00:36:28,880
actually um steve i i didn't say ecd is

896
00:36:28,880 --> 00:36:32,160
a better ecd is only ecdsa is only

897
00:36:32,160 --> 00:36:34,480
better because the noise generation is

898
00:36:34,480 --> 00:36:36,240
non-deterministic

899
00:36:36,240 --> 00:36:38,880
if edd is a would be

900
00:36:38,880 --> 00:36:42,240
specified in a non-deterministic way

901
00:36:42,240 --> 00:36:44,320
then the problem goes away as i

902
00:36:44,320 --> 00:36:46,960
identified

903
00:36:49,760 --> 00:36:53,200
so again that makes it clear

904
00:36:53,520 --> 00:36:55,119
so that leaves me wondering about the

905
00:36:55,119 --> 00:36:57,119
paper that i referenced that has a fault

906
00:36:57,119 --> 00:37:00,480
injection attack on ecdsa

907
00:37:06,160 --> 00:37:08,960
well the the whole side channel attack

908
00:37:08,960 --> 00:37:10,160
uh

909
00:37:10,160 --> 00:37:12,480
arena is quite large i have more than a

910
00:37:12,480 --> 00:37:15,040
thousand papers on this topic so uh

911
00:37:15,040 --> 00:37:17,520
obviously there are attacks on uh

912
00:37:17,520 --> 00:37:20,240
on all different variants but uh

913
00:37:20,240 --> 00:37:22,560
uh there are attacks that can easily be

914
00:37:22,560 --> 00:37:24,480
prevented that take advantage of

915
00:37:24,480 --> 00:37:27,520
deterministic behavior

916
00:37:27,520 --> 00:37:29,760
sure yeah i need to know what you're

917
00:37:29,760 --> 00:37:32,240
doing you cannot that's in that

918
00:37:32,240 --> 00:37:34,479
right

919
00:37:35,280 --> 00:37:37,440
right but again

920
00:37:37,440 --> 00:37:38,640
just you know from the point of view of

921
00:37:38,640 --> 00:37:41,520
trying to pick something

922
00:37:42,160 --> 00:37:44,000
if there are lots of you know if if

923
00:37:44,000 --> 00:37:44,880
we're talking about a manager to

924
00:37:44,880 --> 00:37:47,119
implement cypher suite we're asking

925
00:37:47,119 --> 00:37:49,280
everybody to implement it

926
00:37:49,280 --> 00:37:50,880
and

927
00:37:50,880 --> 00:37:53,359
if there are known attacks against all

928
00:37:53,359 --> 00:37:55,440
relevant signature schemes

929
00:37:55,440 --> 00:37:56,720
they happen to be different attacks but

930
00:37:56,720 --> 00:37:58,079
they're known

931
00:37:58,079 --> 00:38:00,160
in this context then it's not clear to

932
00:38:00,160 --> 00:38:03,200
me that one is better than the other

933
00:38:03,680 --> 00:38:05,440
i i i

934
00:38:05,440 --> 00:38:07,760
i think the problem of the problem is

935
00:38:07,760 --> 00:38:09,920
that lots of attacks are also recycled

936
00:38:09,920 --> 00:38:12,480
for example open ssl versions that are

937
00:38:12,480 --> 00:38:15,359
known to be broken and um

938
00:38:15,359 --> 00:38:16,800
you still need to be

939
00:38:16,800 --> 00:38:18,720
slightly competent in

940
00:38:18,720 --> 00:38:20,400
in terms of implementing signature

941
00:38:20,400 --> 00:38:22,800
schemes

942
00:38:26,079 --> 00:38:28,800
okay john

943
00:38:29,680 --> 00:38:31,760
thank you

944
00:38:31,760 --> 00:38:34,640
thanks steven for raising this uh

945
00:38:34,640 --> 00:38:37,280
discussion i think it's very helpful

946
00:38:37,280 --> 00:38:38,160
uh

947
00:38:38,160 --> 00:38:41,040
regarding two i think hillary summarized

948
00:38:41,040 --> 00:38:44,079
nicely on the list why we need

949
00:38:44,079 --> 00:38:46,480
three different alternatives purely

950
00:38:46,480 --> 00:38:49,280
random purely deterministic and a

951
00:38:49,280 --> 00:38:52,480
mixture of the two they all make sense

952
00:38:52,480 --> 00:38:53,599
in different

953
00:38:53,599 --> 00:38:55,280
settings

954
00:38:55,280 --> 00:39:00,560
uh i think we can do better and i think

955
00:39:00,560 --> 00:39:03,760
what maybe more a question to the chairs

956
00:39:03,760 --> 00:39:05,520
that should be discussed

957
00:39:05,520 --> 00:39:08,480
either here or on the list later but uh

958
00:39:08,480 --> 00:39:11,520
how do we progress with draft mats and

959
00:39:11,520 --> 00:39:12,839
was quite

960
00:39:12,839 --> 00:39:14,640
large uh

961
00:39:14,640 --> 00:39:17,440
support for adopting them during the

962
00:39:17,440 --> 00:39:19,359
adoption call there was a discussion

963
00:39:19,359 --> 00:39:20,640
about the

964
00:39:20,640 --> 00:39:22,880
potential alleged

965
00:39:22,880 --> 00:39:26,560
ipr on it do we have

966
00:39:26,560 --> 00:39:29,359
should we have a second uh

967
00:39:29,359 --> 00:39:33,040
call for adoption now when that is known

968
00:39:33,040 --> 00:39:35,520
stephen also said said on the mail that

969
00:39:35,520 --> 00:39:38,400
he might he could declare an ipr

970
00:39:38,400 --> 00:39:40,720
statement on the draft

971
00:39:40,720 --> 00:39:43,520
uh that would of course be used in court

972
00:39:43,520 --> 00:39:46,240
as stephen perel has analyzed this ipr

973
00:39:46,240 --> 00:39:49,359
and he he definitely thinks it applies

974
00:39:49,359 --> 00:39:51,440
so there's negative things but that also

975
00:39:51,440 --> 00:39:52,880
but it would

976
00:39:52,880 --> 00:39:56,160
raise to any implementers and users that

977
00:39:56,160 --> 00:39:57,839
they're there

978
00:39:57,839 --> 00:40:01,680
somebody has claimed or not ipr

979
00:40:01,680 --> 00:40:04,160
yeah sorry i i'm actually the

980
00:40:04,160 --> 00:40:05,839
responsible chair who dropped the ball

981
00:40:05,839 --> 00:40:08,960
on this i think yes we need to rerun the

982
00:40:08,960 --> 00:40:12,319
adoption call with ipr disclosure

983
00:40:12,319 --> 00:40:14,720
and just to just to clarify if i made a

984
00:40:14,720 --> 00:40:17,520
third party ipr disclosure it just says

985
00:40:17,520 --> 00:40:18,880
you're on notice that something exists

986
00:40:18,880 --> 00:40:22,640
it doesn't say i claim it is relevant

987
00:40:22,640 --> 00:40:25,280
i think uh the lawyer in court would say

988
00:40:25,280 --> 00:40:27,359
that anyway

989
00:40:27,359 --> 00:40:30,079
i agree with you in principle yeah that

990
00:40:30,079 --> 00:40:31,920
sounds great for the second adoption

991
00:40:31,920 --> 00:40:33,760
call

992
00:40:33,760 --> 00:40:36,240
okay yeah let's let's record this as an

993
00:40:36,240 --> 00:40:38,319
action item

994
00:40:38,319 --> 00:40:40,960
uh philip

995
00:40:40,960 --> 00:40:43,280
yeah i was just going to point out that

996
00:40:43,280 --> 00:40:44,800
since we're going to be doing thresh

997
00:40:44,800 --> 00:40:47,680
we've got the threshold signature work

998
00:40:47,680 --> 00:40:49,200
we're going to have things that look

999
00:40:49,200 --> 00:40:49,920
like

1000
00:40:49,920 --> 00:40:52,720
non-deterministic signatures as far as

1001
00:40:52,720 --> 00:40:55,599
the verifier is concerned anyway

1002
00:40:55,599 --> 00:40:57,920
uh in that

1003
00:40:57,920 --> 00:40:58,800
i

1004
00:40:58,800 --> 00:41:01,839
i never have never considered the idea

1005
00:41:01,839 --> 00:41:06,640
of relying on a signature value to be a

1006
00:41:06,640 --> 00:41:08,720
non-deterministic

1007
00:41:08,720 --> 00:41:10,880
uh function of the input

1008
00:41:10,880 --> 00:41:11,920
uh

1009
00:41:11,920 --> 00:41:15,920
in a protocol to be a sound move

1010
00:41:15,920 --> 00:41:18,400
um so i i think that we should

1011
00:41:18,400 --> 00:41:20,400
definitely allow for

1012
00:41:20,400 --> 00:41:22,000
some form of

1013
00:41:22,000 --> 00:41:26,000
signature with a deterministic component

1014
00:41:26,000 --> 00:41:29,359
i think it still makes sense to

1015
00:41:29,359 --> 00:41:31,839
require people to blind

1016
00:41:31,839 --> 00:41:33,520
the

1017
00:41:33,520 --> 00:41:34,560
input

1018
00:41:34,560 --> 00:41:37,920
blind the random number uh

1019
00:41:37,920 --> 00:41:40,400
in some deterministic way

1020
00:41:40,400 --> 00:41:43,200
and then apply the non-deterministic

1021
00:41:43,200 --> 00:41:45,440
input so we get as much robustness as

1022
00:41:45,440 --> 00:41:46,640
possible

1023
00:41:46,640 --> 00:41:49,200
um but

1024
00:41:49,200 --> 00:41:51,520
i think i think that we need that anyway

1025
00:41:51,520 --> 00:41:55,119
uh what i'm a little bit um

1026
00:41:55,119 --> 00:41:57,359
nonplussed about it

1027
00:41:57,359 --> 00:41:59,359
i've never understood why people want to

1028
00:41:59,359 --> 00:42:01,280
put signatures into key exchange

1029
00:42:01,280 --> 00:42:02,640
protocols

1030
00:42:02,640 --> 00:42:05,119
if you're doing a key exchange protocol

1031
00:42:05,119 --> 00:42:07,599
diffie-hellman does a key exchange

1032
00:42:07,599 --> 00:42:10,240
and you can build uh

1033
00:42:10,240 --> 00:42:13,119
robust systems on top of diffie-hellman

1034
00:42:13,119 --> 00:42:15,680
as the signal folk approved and they've

1035
00:42:15,680 --> 00:42:18,800
got a proof um

1036
00:42:18,800 --> 00:42:22,079
proof of correctness of that

1037
00:42:22,960 --> 00:42:24,960
i would just steer clear of anything to

1038
00:42:24,960 --> 00:42:26,960
do with signature

1039
00:42:26,960 --> 00:42:30,800
because if you sign something you create

1040
00:42:30,800 --> 00:42:34,800
a non-repudiable proof that somebody was

1041
00:42:34,800 --> 00:42:37,599
involved in that communication

1042
00:42:37,599 --> 00:42:38,960
and that's dropping a piece of

1043
00:42:38,960 --> 00:42:40,880
information that i simply don't want to

1044
00:42:40,880 --> 00:42:41,760
drop

1045
00:42:41,760 --> 00:42:45,280
unless there is a good reason to drop it

1046
00:42:45,280 --> 00:42:47,520
just a thought

1047
00:42:47,520 --> 00:42:51,800
all right thank you phillip part

1048
00:43:01,440 --> 00:43:03,359
uh bart you need to hit the unmute

1049
00:43:03,359 --> 00:43:05,200
button as well i guess

1050
00:43:05,200 --> 00:43:07,680
or request audio permission there you go

1051
00:43:07,680 --> 00:43:10,720
okay does it work okay yeah i heard

1052
00:43:10,720 --> 00:43:12,319
steve asked some questions and maybe i

1053
00:43:12,319 --> 00:43:14,079
can help by by simple clarification to

1054
00:43:14,079 --> 00:43:15,200
this so

1055
00:43:15,200 --> 00:43:17,839
in a differential power analysis attack

1056
00:43:17,839 --> 00:43:19,200
you need some secret information and

1057
00:43:19,200 --> 00:43:21,200
some variable data

1058
00:43:21,200 --> 00:43:23,200
and by actually making so this if you

1059
00:43:23,200 --> 00:43:25,520
can avoid that by the having using you

1060
00:43:25,520 --> 00:43:27,760
can avoid a dpa attack but there is

1061
00:43:27,760 --> 00:43:29,760
other attacks like simple power analysis

1062
00:43:29,760 --> 00:43:31,520
or fault attacks that are kind of

1063
00:43:31,520 --> 00:43:33,599
orthogonal to this and that are not

1064
00:43:33,599 --> 00:43:36,079
helped or not help or helped by having

1065
00:43:36,079 --> 00:43:38,800
variable data and so this may answer

1066
00:43:38,800 --> 00:43:40,720
your question that i don't think there

1067
00:43:40,720 --> 00:43:41,599
is

1068
00:43:41,599 --> 00:43:43,680
any signature scheme that is by itself

1069
00:43:43,680 --> 00:43:45,119
robust against any of these attacks you

1070
00:43:45,119 --> 00:43:46,000
always have to look at your

1071
00:43:46,000 --> 00:43:48,400
implementation but particularly having

1072
00:43:48,400 --> 00:43:50,319
deterministic

1073
00:43:50,319 --> 00:43:51,680
involvement the generation of the nulls

1074
00:43:51,680 --> 00:43:53,599
in a way that is not randomized you will

1075
00:43:53,599 --> 00:43:56,240
make dp attacks harder

1076
00:43:56,240 --> 00:43:58,960
i hope that helps

1077
00:43:58,960 --> 00:44:01,200
thanks yeah that does help all right

1078
00:44:01,200 --> 00:44:02,560
thank you

1079
00:44:02,560 --> 00:44:03,599
thumb

1080
00:44:03,599 --> 00:44:05,760
thumb

1081
00:44:07,760 --> 00:44:10,160
these kinds of attacks fault attacks

1082
00:44:10,160 --> 00:44:12,000
they don't they aren't just limited to

1083
00:44:12,000 --> 00:44:14,480
the crypto right they allow you to sort

1084
00:44:14,480 --> 00:44:15,200
of

1085
00:44:15,200 --> 00:44:17,119
in my understanding anyway skip

1086
00:44:17,119 --> 00:44:18,560
arbitrary

1087
00:44:18,560 --> 00:44:20,880
instructions that your target is is

1088
00:44:20,880 --> 00:44:23,119
doing so in the case of signature

1089
00:44:23,119 --> 00:44:25,119
verification they might also just skip

1090
00:44:25,119 --> 00:44:28,560
over the entire verify call altogether

1091
00:44:28,560 --> 00:44:30,800
they could also skip over a random

1092
00:44:30,800 --> 00:44:33,599
number generator so this is i think a

1093
00:44:33,599 --> 00:44:35,280
type of question that you should

1094
00:44:35,280 --> 00:44:37,359
consider wider than just what kind of

1095
00:44:37,359 --> 00:44:40,000
crypto do we use and how vulnerable is

1096
00:44:40,000 --> 00:44:42,400
that but also how do we structure our

1097
00:44:42,400 --> 00:44:44,240
implementation in the first place

1098
00:44:44,240 --> 00:44:45,599
because

1099
00:44:45,599 --> 00:44:48,160
if the crypto is not getting called it

1100
00:44:48,160 --> 00:44:50,560
will not really have mattered in the end

1101
00:44:50,560 --> 00:44:52,480
sure i i think that's entirely true it's

1102
00:44:52,480 --> 00:44:54,400
a little bit you know so i think the

1103
00:44:54,400 --> 00:44:56,400
the concern here is an adversary gets

1104
00:44:56,400 --> 00:44:58,079
control of a device and manages to

1105
00:44:58,079 --> 00:45:00,720
extract a private key yeah and then can

1106
00:45:00,720 --> 00:45:02,480
you do what he likes of it so

1107
00:45:02,480 --> 00:45:03,680
so it's a little bit different from that

1108
00:45:03,680 --> 00:45:05,680
i think but i i i absolutely agree what

1109
00:45:05,680 --> 00:45:07,919
you say

1110
00:45:09,520 --> 00:45:11,760
all right uh my apologies i probably i

1111
00:45:11,760 --> 00:45:13,760
not not going to pronounce it

1112
00:45:13,760 --> 00:45:17,640
correctly willing

1113
00:45:29,280 --> 00:45:31,040
uh so actually i just have a simple

1114
00:45:31,040 --> 00:45:33,200
question so what does mean you call it

1115
00:45:33,200 --> 00:45:35,040
mti signature

1116
00:45:35,040 --> 00:45:36,640
what is it mti

1117
00:45:36,640 --> 00:45:38,480
oh sure apologies for not explaining it

1118
00:45:38,480 --> 00:45:41,119
so the when ietf pro working groups are

1119
00:45:41,119 --> 00:45:43,040
developing protocols typically they

1120
00:45:43,040 --> 00:45:45,119
would like to specify a mandatory to

1121
00:45:45,119 --> 00:45:48,240
implement that's what mti stands for uh

1122
00:45:48,240 --> 00:45:50,480
set of options so that

1123
00:45:50,480 --> 00:45:53,040
you we increase interoperability because

1124
00:45:53,040 --> 00:45:54,960
we hope most all implementations will

1125
00:45:54,960 --> 00:45:56,000
include them

1126
00:45:56,000 --> 00:45:58,000
so the question here

1127
00:45:58,000 --> 00:45:59,599
is which one do we which of these

1128
00:45:59,599 --> 00:46:00,960
signature schemes would we like

1129
00:46:00,960 --> 00:46:03,920
everybody to implement

1130
00:46:05,920 --> 00:46:06,800
okay

1131
00:46:06,800 --> 00:46:09,760
yeah thank you very much

1132
00:46:09,760 --> 00:46:10,640
all right

1133
00:46:10,640 --> 00:46:14,079
thank you uh we have

1134
00:46:14,079 --> 00:46:16,400
one action item and you got some useful

1135
00:46:16,400 --> 00:46:18,000
feedback i think

1136
00:46:18,000 --> 00:46:19,040
sure

1137
00:46:19,040 --> 00:46:21,760
so i guess the action item is on john's

1138
00:46:21,760 --> 00:46:23,350
draft i guess um

1139
00:46:23,350 --> 00:46:24,560
[Music]

1140
00:46:24,560 --> 00:46:26,319
you know i think this i suspect the same

1141
00:46:26,319 --> 00:46:28,400
question might arise with ctls for if it

1142
00:46:28,400 --> 00:46:29,760
was deployed in similar environments

1143
00:46:29,760 --> 00:46:31,920
that lake isn't envisaging

1144
00:46:31,920 --> 00:46:33,520
um so

1145
00:46:33,520 --> 00:46:35,440
if the answer is as bart says that

1146
00:46:35,440 --> 00:46:37,680
there's different attacks but so there's

1147
00:46:37,680 --> 00:46:39,359
no real difference because you can mount

1148
00:46:39,359 --> 00:46:40,640
one attack or the other that it would be

1149
00:46:40,640 --> 00:46:42,720
great to kind of have a sense of that so

1150
00:46:42,720 --> 00:46:44,160
that we could feed that into itf working

1151
00:46:44,160 --> 00:46:45,440
groups

1152
00:46:45,440 --> 00:46:46,720
okay

1153
00:46:46,720 --> 00:46:49,440
i suggest uh interested party are

1154
00:46:49,440 --> 00:46:52,880
welcome to continue on cfrg mailing list

1155
00:46:52,880 --> 00:46:55,200
i can certainly try again

1156
00:46:55,200 --> 00:46:57,200
okay well uh

1157
00:46:57,200 --> 00:46:59,280
i think now that you kind of raise the

1158
00:46:59,280 --> 00:47:01,119
awareness of this maybe there might be

1159
00:47:01,119 --> 00:47:02,640
more uptake yeah hopefully your

1160
00:47:02,640 --> 00:47:04,560
presentation may have helped so uh i'll

1161
00:47:04,560 --> 00:47:06,400
i'll start a thread and and if you deal

1162
00:47:06,400 --> 00:47:08,240
with john's draft i guess that's that's

1163
00:47:08,240 --> 00:47:09,839
the two actions i suppose

1164
00:47:09,839 --> 00:47:13,920
okay great thank you sounds good

1165
00:47:14,160 --> 00:47:15,119
uh

1166
00:47:15,119 --> 00:47:19,119
next is chris patton

1167
00:47:19,359 --> 00:47:22,400
hold on just uh

1168
00:47:22,640 --> 00:47:25,839
yeah let me

1169
00:47:30,000 --> 00:47:32,240
okay

1170
00:47:35,760 --> 00:47:36,800
only my

1171
00:47:36,800 --> 00:47:39,440
second cfrg talk so i don't remember how

1172
00:47:39,440 --> 00:47:43,200
to run the sides slides

1173
00:47:46,400 --> 00:47:48,000
so you should have now control for

1174
00:47:48,000 --> 00:47:50,000
driving slides

1175
00:47:50,000 --> 00:47:52,800
okay let me test it out

1176
00:47:52,800 --> 00:47:55,440
hi everybody

1177
00:47:57,839 --> 00:47:59,119
uh

1178
00:47:59,119 --> 00:48:00,880
it's fun to be on the big screen once

1179
00:48:00,880 --> 00:48:02,079
again

1180
00:48:02,079 --> 00:48:03,359
okay

1181
00:48:03,359 --> 00:48:05,040
um all right so this is i wanted to give

1182
00:48:05,040 --> 00:48:07,680
a quick update on an individual draft

1183
00:48:07,680 --> 00:48:09,520
that i've been working on with uh

1184
00:48:09,520 --> 00:48:11,839
richard barnes and philip schiltmann

1185
00:48:11,839 --> 00:48:14,000
this is called verifiable distributed

1186
00:48:14,000 --> 00:48:15,680
aggregation functions and i'm going to

1187
00:48:15,680 --> 00:48:17,359
give a quick overview of this so if you

1188
00:48:17,359 --> 00:48:19,680
missed ietf112

1189
00:48:19,680 --> 00:48:21,280
don't worry about it you should have get

1190
00:48:21,280 --> 00:48:23,920
all the contacts that you need

1191
00:48:23,920 --> 00:48:25,920
speaking of context um

1192
00:48:25,920 --> 00:48:28,240
so what this is really about

1193
00:48:28,240 --> 00:48:31,359
uh we've recently formed a new ietf

1194
00:48:31,359 --> 00:48:33,520
working group called ppm which stands

1195
00:48:33,520 --> 00:48:35,680
for privacy preserving measurement that

1196
00:48:35,680 --> 00:48:38,000
group is meeting um tomorrow by the way

1197
00:48:38,000 --> 00:48:40,160
for anyone who's interested uh please

1198
00:48:40,160 --> 00:48:43,040
attend um and the goal of this uh

1199
00:48:43,040 --> 00:48:46,000
working group is to standardize uh

1200
00:48:46,000 --> 00:48:48,960
uh cryptographic techniques for uh what

1201
00:48:48,960 --> 00:48:51,040
we call privacy preserving measurement

1202
00:48:51,040 --> 00:48:54,400
um and uh and and we're thinking right

1203
00:48:54,400 --> 00:48:55,920
now we're mostly thinking in terms of

1204
00:48:55,920 --> 00:48:58,800
like uh multi-party computation

1205
00:48:58,800 --> 00:49:00,400
so uh

1206
00:49:00,400 --> 00:49:02,559
uh what this what private what ppm kind

1207
00:49:02,559 --> 00:49:05,200
of means is you have a bunch of users

1208
00:49:05,200 --> 00:49:06,559
and you want to

1209
00:49:06,559 --> 00:49:10,480
you're interested in um aggregate uh

1210
00:49:10,480 --> 00:49:12,720
uh aggregate statistics about these

1211
00:49:12,720 --> 00:49:14,880
users um but you don't want to see their

1212
00:49:14,880 --> 00:49:17,200
individual measurements in the clear um

1213
00:49:17,200 --> 00:49:18,640
and so you're going to run some sort you

1214
00:49:18,640 --> 00:49:20,079
want to run some sort of multi-party

1215
00:49:20,079 --> 00:49:22,400
computation to uh to make sure that you

1216
00:49:22,400 --> 00:49:24,559
don't um

1217
00:49:24,559 --> 00:49:26,240
so uh

1218
00:49:26,240 --> 00:49:28,720
yeah so right now we're uh we're working

1219
00:49:28,720 --> 00:49:31,680
on um a what we're calling

1220
00:49:31,680 --> 00:49:33,599
our first protocol and we're hoping that

1221
00:49:33,599 --> 00:49:35,839
it'll be adopted by uh by the group as

1222
00:49:35,839 --> 00:49:38,559
the first uh document um and what this

1223
00:49:38,559 --> 00:49:39,359
does

1224
00:49:39,359 --> 00:49:41,440
is um specify

1225
00:49:41,440 --> 00:49:43,520
the end to end verification and

1226
00:49:43,520 --> 00:49:47,520
aggregation of measurements over https

1227
00:49:47,520 --> 00:49:50,000
in this document the vdf document is

1228
00:49:50,000 --> 00:49:52,319
kind of the core cryptographic component

1229
00:49:52,319 --> 00:49:54,480
of the ppm protocol

1230
00:49:54,480 --> 00:49:57,440
so my objective for this talk is to

1231
00:49:57,440 --> 00:50:00,079
explain to you uh what this draft is

1232
00:50:00,079 --> 00:50:03,520
about and i also want to ask the cfrg if

1233
00:50:03,520 --> 00:50:05,680
this is a ready for adoption by the

1234
00:50:05,680 --> 00:50:08,240
working group

1235
00:50:08,960 --> 00:50:12,480
okay uh a quick overview of uh vdf so

1236
00:50:12,480 --> 00:50:13,920
um the

1237
00:50:13,920 --> 00:50:15,520
the main cryptographic technique we're

1238
00:50:15,520 --> 00:50:17,520
going to use is just simple secret

1239
00:50:17,520 --> 00:50:18,400
sharing

1240
00:50:18,400 --> 00:50:19,359
um

1241
00:50:19,359 --> 00:50:22,079
so the the way our architecture works is

1242
00:50:22,079 --> 00:50:23,839
you have a bunch of clients and they're

1243
00:50:23,839 --> 00:50:26,400
going to be sending um their

1244
00:50:26,400 --> 00:50:28,000
their uh secret shares of their

1245
00:50:28,000 --> 00:50:29,359
measurements to two different

1246
00:50:29,359 --> 00:50:31,440
aggregation servers or more aggregate

1247
00:50:31,440 --> 00:50:33,359
one or more uh two or more aggregation

1248
00:50:33,359 --> 00:50:34,880
servers i should say

1249
00:50:34,880 --> 00:50:37,839
um and then uh aggregates are collected

1250
00:50:37,839 --> 00:50:39,920
by another server another party called

1251
00:50:39,920 --> 00:50:41,440
the collector

1252
00:50:41,440 --> 00:50:44,720
and who who assembles the final result

1253
00:50:44,720 --> 00:50:46,640
so in this first step uh the the

1254
00:50:46,640 --> 00:50:48,319
starting step each client is going to

1255
00:50:48,319 --> 00:50:50,960
split its measurement into uh input

1256
00:50:50,960 --> 00:50:53,680
shares as we call them and sends one in

1257
00:50:53,680 --> 00:50:56,640
one input share to each aggregator

1258
00:50:56,640 --> 00:50:58,160
and then uh in the next step the

1259
00:50:58,160 --> 00:51:00,559
aggregate for each set of input shares

1260
00:51:00,559 --> 00:51:03,359
uh where the uh the aggregators are

1261
00:51:03,359 --> 00:51:06,800
gonna uh engage in in uh a multi-party

1262
00:51:06,800 --> 00:51:10,559
computation to basically uh

1263
00:51:10,559 --> 00:51:12,960
which has basically two goals this one

1264
00:51:12,960 --> 00:51:14,640
is uh to

1265
00:51:14,640 --> 00:51:15,760
um

1266
00:51:15,760 --> 00:51:19,200
one is to verify that the input shares

1267
00:51:19,200 --> 00:51:21,200
that they're getting correspond to a

1268
00:51:21,200 --> 00:51:22,559
valid measurement

1269
00:51:22,559 --> 00:51:25,200
um and the other is to

1270
00:51:25,200 --> 00:51:28,400
what uh basically prepare the input uh

1271
00:51:28,400 --> 00:51:30,720
for aggregation um

1272
00:51:30,720 --> 00:51:33,839
and i'll explain uh i'll uh yeah so i'll

1273
00:51:33,839 --> 00:51:35,440
get into that into a little in a little

1274
00:51:35,440 --> 00:51:36,400
bit

1275
00:51:36,400 --> 00:51:38,240
and then the last step so the

1276
00:51:38,240 --> 00:51:40,880
preparation step is kind of the core uh

1277
00:51:40,880 --> 00:51:43,599
meat of the protocol and then um

1278
00:51:43,599 --> 00:51:45,839
the the all they have to do after

1279
00:51:45,839 --> 00:51:48,079
they've done this step is um

1280
00:51:48,079 --> 00:51:52,079
is combine their output shares into um

1281
00:51:52,079 --> 00:51:55,200
aggregate shares locally and then um

1282
00:51:55,200 --> 00:51:57,359
send aggregate shares to the collector

1283
00:51:57,359 --> 00:52:00,240
and uh the collector uh

1284
00:52:00,240 --> 00:52:02,079
combines these aggregate shares to get

1285
00:52:02,079 --> 00:52:04,480
the final result so i'm going to give a

1286
00:52:04,480 --> 00:52:06,240
couple example protocols so hopefully

1287
00:52:06,240 --> 00:52:08,319
this this will be clear in a moment

1288
00:52:08,319 --> 00:52:09,520
um

1289
00:52:09,520 --> 00:52:12,000
the the spec currently has

1290
00:52:12,000 --> 00:52:13,599
uh uh

1291
00:52:13,599 --> 00:52:16,000
the goal of the spec right now is is to

1292
00:52:16,000 --> 00:52:18,640
actually specify two instantiations of

1293
00:52:18,640 --> 00:52:22,000
this of this uh of a vdf um and the

1294
00:52:22,000 --> 00:52:23,760
first one is prio which many people

1295
00:52:23,760 --> 00:52:26,720
might be familiar with uh uh it's it's

1296
00:52:26,720 --> 00:52:28,400
kind of been in the ether for a while

1297
00:52:28,400 --> 00:52:30,319
now um

1298
00:52:30,319 --> 00:52:32,240
and in this protocol it's very simple a

1299
00:52:32,240 --> 00:52:34,960
client is going to encode its uh its

1300
00:52:34,960 --> 00:52:38,319
measurement as a um as a as a as a

1301
00:52:38,319 --> 00:52:40,800
vector over some finite field

1302
00:52:40,800 --> 00:52:42,079
and um

1303
00:52:42,079 --> 00:52:44,160
uh it's going to it's going to split

1304
00:52:44,160 --> 00:52:45,839
that vector into secret shares and send

1305
00:52:45,839 --> 00:52:48,160
one uh one vector to each of the

1306
00:52:48,160 --> 00:52:49,359
aggregators

1307
00:52:49,359 --> 00:52:50,319
um

1308
00:52:50,319 --> 00:52:53,200
and then in the to prepare these uh to

1309
00:52:53,200 --> 00:52:54,800
prepare these uh

1310
00:52:54,800 --> 00:52:57,920
uh input shares for aggregation um

1311
00:52:57,920 --> 00:53:01,040
they're going to just make sure that uh

1312
00:53:01,040 --> 00:53:03,599
the the vectors that they have uh sum up

1313
00:53:03,599 --> 00:53:05,359
to a valid input without actually

1314
00:53:05,359 --> 00:53:08,480
learning what the input is um

1315
00:53:08,480 --> 00:53:11,200
and uh uh and then um all they have to

1316
00:53:11,200 --> 00:53:12,960
do in the aggregation step is sum up

1317
00:53:12,960 --> 00:53:15,839
their vectors um and then all the

1318
00:53:15,839 --> 00:53:17,599
collector has to do is sum up the

1319
00:53:17,599 --> 00:53:20,400
aggregate shares

1320
00:53:20,720 --> 00:53:22,000
uh

1321
00:53:22,000 --> 00:53:23,440
now there's another uh the other

1322
00:53:23,440 --> 00:53:25,760
protocol that the other uh

1323
00:53:25,760 --> 00:53:28,800
protocol that we want to specify is

1324
00:53:28,800 --> 00:53:29,680
called

1325
00:53:29,680 --> 00:53:31,920
it's called poplar so this is a this is

1326
00:53:31,920 --> 00:53:34,880
a another paper from the from the same

1327
00:53:34,880 --> 00:53:36,400
group of folks

1328
00:53:36,400 --> 00:53:39,200
now the problem that this solves is uh

1329
00:53:39,200 --> 00:53:41,040
is the heavy hitters problem and this is

1330
00:53:41,040 --> 00:53:43,200
where you have each of the clients

1331
00:53:43,200 --> 00:53:45,359
measurement is an nbit string and you

1332
00:53:45,359 --> 00:53:48,960
want to know uh which of these strings

1333
00:53:48,960 --> 00:53:51,520
occur at least some number of times so t

1334
00:53:51,520 --> 00:53:53,520
time so in our example here we have

1335
00:53:53,520 --> 00:53:56,480
three bit strings and uh only two of

1336
00:53:56,480 --> 00:53:59,359
those strings occur in that set more

1337
00:53:59,359 --> 00:54:01,520
than uh more than

1338
00:54:01,520 --> 00:54:03,599
at least two times

1339
00:54:03,599 --> 00:54:05,040
and the solution for this problem i

1340
00:54:05,040 --> 00:54:08,000
won't go too much into the detail um is

1341
00:54:08,000 --> 00:54:10,000
is called an incremental distributed

1342
00:54:10,000 --> 00:54:11,440
point function

1343
00:54:11,440 --> 00:54:13,119
and um

1344
00:54:13,119 --> 00:54:14,319
uh

1345
00:54:14,319 --> 00:54:15,680
uh

1346
00:54:15,680 --> 00:54:17,920
what this uh what this allows you to do

1347
00:54:17,920 --> 00:54:19,920
is kind of query

1348
00:54:19,920 --> 00:54:20,800
uh

1349
00:54:20,800 --> 00:54:21,599
your

1350
00:54:21,599 --> 00:54:23,920
so so clients are going to compute what

1351
00:54:23,920 --> 00:54:26,319
are called idpf shares from their input

1352
00:54:26,319 --> 00:54:28,160
and what this idpf share allows you to

1353
00:54:28,160 --> 00:54:28,960
do

1354
00:54:28,960 --> 00:54:31,680
is to uh kind of query

1355
00:54:31,680 --> 00:54:35,040
your uh the the input on like a on a

1356
00:54:35,040 --> 00:54:39,520
candidate prefix so you can ask um is

1357
00:54:39,520 --> 00:54:41,200
so if your input for example is zero one

1358
00:54:41,200 --> 00:54:43,200
one you can ask is zero prefix of the

1359
00:54:43,200 --> 00:54:45,599
string which it is or is one a prefix of

1360
00:54:45,599 --> 00:54:49,599
the string which is not etc um

1361
00:54:49,599 --> 00:54:51,280
and so

1362
00:54:51,280 --> 00:54:54,799
what uh after um kind of what the query

1363
00:54:54,799 --> 00:54:56,880
the result of the query on your idpf

1364
00:54:56,880 --> 00:54:59,760
share is a share of the of the this

1365
00:54:59,760 --> 00:55:02,000
answer like yes this is this is a prefix

1366
00:55:02,000 --> 00:55:04,799
no this is not a prefix um and what you

1367
00:55:04,799 --> 00:55:07,599
can do with that is aggregate them into

1368
00:55:07,599 --> 00:55:10,240
shares of hit counts so basically your

1369
00:55:10,240 --> 00:55:14,480
aggregate share uh is uh is uh the

1370
00:55:14,480 --> 00:55:17,599
is a secret share of the number of times

1371
00:55:17,599 --> 00:55:21,280
a candidate prefix occurred in the set

1372
00:55:21,280 --> 00:55:22,960
um yeah so

1373
00:55:22,960 --> 00:55:25,359
this this turns out to kind of nicely

1374
00:55:25,359 --> 00:55:28,480
fit the shape with a few minor tweaks so

1375
00:55:28,480 --> 00:55:29,920
in the sharding step the client

1376
00:55:29,920 --> 00:55:32,079
generates its idpf shares from its input

1377
00:55:32,079 --> 00:55:34,880
string and now in the preparation phase

1378
00:55:34,880 --> 00:55:36,480
we're going to do something

1379
00:55:36,480 --> 00:55:38,000
a little bit more complicated we're

1380
00:55:38,000 --> 00:55:39,599
going to

1381
00:55:39,599 --> 00:55:42,400
we're going to evaluate our idps shares

1382
00:55:42,400 --> 00:55:45,040
on a set of candidate prefixes but then

1383
00:55:45,040 --> 00:55:48,000
we need to verify that the output is

1384
00:55:48,000 --> 00:55:50,079
well formed basically we should only

1385
00:55:50,079 --> 00:55:52,880
have the the each aggregation aggregator

1386
00:55:52,880 --> 00:55:55,200
should only have a share of a vector

1387
00:55:55,200 --> 00:55:57,119
where that is uh

1388
00:55:57,119 --> 00:55:58,880
that is where

1389
00:55:58,880 --> 00:56:01,119
you can only have one candidate prefix

1390
00:56:01,119 --> 00:56:03,200
um uh

1391
00:56:03,200 --> 00:56:06,400
for about like a given input so um

1392
00:56:06,400 --> 00:56:09,520
yeah so uh yeah i i i i think i'm

1393
00:56:09,520 --> 00:56:11,040
running out of running a little bit low

1394
00:56:11,040 --> 00:56:13,040
on time so i i won't get too much into

1395
00:56:13,040 --> 00:56:15,599
the to the weeds here um

1396
00:56:15,599 --> 00:56:19,040
okay so uh there's this uh idpf share

1397
00:56:19,040 --> 00:56:21,280
evaluation and then verification that

1398
00:56:21,280 --> 00:56:23,520
the output share that you get is is well

1399
00:56:23,520 --> 00:56:26,319
formed and then um in the aggregate

1400
00:56:26,319 --> 00:56:29,040
aggregation phase all you have to do is

1401
00:56:29,040 --> 00:56:32,240
uh sum your output shares into a share

1402
00:56:32,240 --> 00:56:34,640
of the hit counts and then you hand

1403
00:56:34,640 --> 00:56:37,040
those to the collector um

1404
00:56:37,040 --> 00:56:39,119
and so the way this is gonna help you

1405
00:56:39,119 --> 00:56:41,680
solve like find the heavy hitters is

1406
00:56:41,680 --> 00:56:43,359
you're gonna run this the collector is

1407
00:56:43,359 --> 00:56:45,520
going to run this protocol basically

1408
00:56:45,520 --> 00:56:48,480
prepare aggregate unshard uh several

1409
00:56:48,480 --> 00:56:50,640
times uh with several different sets of

1410
00:56:50,640 --> 00:56:53,359
candidate prefixes until it finds uh the

1411
00:56:53,359 --> 00:56:56,400
set of heavy hitters

1412
00:56:57,119 --> 00:56:59,200
okay um so

1413
00:56:59,200 --> 00:57:00,960
very quickly uh we've made a lot of

1414
00:57:00,960 --> 00:57:03,920
progress since iutf 112. uh

1415
00:57:03,920 --> 00:57:06,160
what we have uh today is basically a

1416
00:57:06,160 --> 00:57:08,960
complete special specification of prio

1417
00:57:08,960 --> 00:57:10,000
um

1418
00:57:10,000 --> 00:57:11,839
and a with including a reference

1419
00:57:11,839 --> 00:57:13,359
implementation that generates test

1420
00:57:13,359 --> 00:57:16,079
vectors and um we

1421
00:57:16,079 --> 00:57:18,079
have there's at least one implementation

1422
00:57:18,079 --> 00:57:20,640
of this that's that's uh pretty fast

1423
00:57:20,640 --> 00:57:22,400
um

1424
00:57:22,400 --> 00:57:25,599
um so the next things i think to do are

1425
00:57:25,599 --> 00:57:28,240
is the next the next chunk of work is to

1426
00:57:28,240 --> 00:57:30,319
complete the spec for poplar

1427
00:57:30,319 --> 00:57:33,280
there are a couple of uh implementations

1428
00:57:33,280 --> 00:57:35,680
of pieces of this um it's it's a little

1429
00:57:35,680 --> 00:57:38,480
bit more complicated um none of them

1430
00:57:38,480 --> 00:57:41,200
like interoperate yet so uh this is why

1431
00:57:41,200 --> 00:57:43,839
we want to uh to to have a spec in the

1432
00:57:43,839 --> 00:57:45,040
cfrg

1433
00:57:45,040 --> 00:57:46,319
um

1434
00:57:46,319 --> 00:57:47,359
especially because people want to

1435
00:57:47,359 --> 00:57:49,760
implement this um

1436
00:57:49,760 --> 00:57:52,480
uh the other things we need we were

1437
00:57:52,480 --> 00:57:54,400
working on security analysis

1438
00:57:54,400 --> 00:57:55,599
um

1439
00:57:55,599 --> 00:57:57,760
and uh we want and we'll need to flesh

1440
00:57:57,760 --> 00:58:00,160
out the security considerations um

1441
00:58:00,160 --> 00:58:01,440
and of course we're

1442
00:58:01,440 --> 00:58:04,960
the hope is that this you know drives uh

1443
00:58:04,960 --> 00:58:07,280
uh cryptograph cryptography researchers

1444
00:58:07,280 --> 00:58:08,480
towards

1445
00:58:08,480 --> 00:58:11,200
direct direct cryptography research

1446
00:58:11,200 --> 00:58:12,880
towards um

1447
00:58:12,880 --> 00:58:16,240
the design of vdfs that solve different

1448
00:58:16,240 --> 00:58:18,960
private data aggregation problems

1449
00:58:18,960 --> 00:58:19,839
um

1450
00:58:19,839 --> 00:58:22,720
yep and so there's some a few other open

1451
00:58:22,720 --> 00:58:24,319
issues but um

1452
00:58:24,319 --> 00:58:25,280
i think

1453
00:58:25,280 --> 00:58:28,240
uh i in my view this is i i've based on

1454
00:58:28,240 --> 00:58:30,319
what i've seen i'm kind of new to this

1455
00:58:30,319 --> 00:58:31,760
um

1456
00:58:31,760 --> 00:58:33,440
this i think this document is mature

1457
00:58:33,440 --> 00:58:34,720
enough to

1458
00:58:34,720 --> 00:58:36,640
to start working on it in the working

1459
00:58:36,640 --> 00:58:39,119
group i'm curious to know if people are

1460
00:58:39,119 --> 00:58:41,440
interested and what would be the next

1461
00:58:41,440 --> 00:58:43,680
step

1462
00:58:47,119 --> 00:58:50,760
comments questions

1463
00:58:57,599 --> 00:59:00,559
chris go ahead

1464
00:59:00,960 --> 00:59:01,920
uh yeah thanks chris for the

1465
00:59:01,920 --> 00:59:04,079
presentation um i'm i'm obviously

1466
00:59:04,079 --> 00:59:06,240
supportive of this uh the group adopting

1467
00:59:06,240 --> 00:59:08,400
this as a research group item well we're

1468
00:59:08,400 --> 00:59:11,200
in the purview of cfrg to work on um

1469
00:59:11,200 --> 00:59:13,520
bringing something like this

1470
00:59:13,520 --> 00:59:14,720
to the rest of the industry by

1471
00:59:14,720 --> 00:59:16,880
standardizing it i mean as chris said we

1472
00:59:16,880 --> 00:59:18,880
have a a

1473
00:59:18,880 --> 00:59:21,359
number of implementations already uh

1474
00:59:21,359 --> 00:59:23,760
it's prio especially has a lot of

1475
00:59:23,760 --> 00:59:26,480
experience in like running code so

1476
00:59:26,480 --> 00:59:27,359
um

1477
00:59:27,359 --> 00:59:29,839
this this seems like kind of a

1478
00:59:29,839 --> 00:59:31,920
an obvious candidate for adoption and i

1479
00:59:31,920 --> 00:59:33,760
would like to i would like to see that

1480
00:59:33,760 --> 00:59:35,839
up

1481
00:59:38,319 --> 00:59:40,799
stephen

1482
00:59:42,640 --> 00:59:45,280
i see yeah i similarly

1483
00:59:45,280 --> 00:59:47,680
like to see something that can support

1484
00:59:47,680 --> 00:59:50,880
ppm adopted and produced by cfrg

1485
00:59:50,880 --> 00:59:52,400
i think that's it's the right place to

1486
00:59:52,400 --> 00:59:55,359
kind of work on these functions

1487
00:59:56,240 --> 00:59:58,479
okay

1488
00:59:58,640 --> 01:00:00,640
cheers we'll talk to you

1489
01:00:00,640 --> 01:00:01,599
uh

1490
01:00:01,599 --> 01:00:04,240
christopher and uh

1491
01:00:04,240 --> 01:00:06,799
i think tentatively we're happy to do

1492
01:00:06,799 --> 01:00:09,280
adoption call but

1493
01:00:09,280 --> 01:00:10,480
we'll just double check between

1494
01:00:10,480 --> 01:00:12,240
ourselves

1495
01:00:12,240 --> 01:00:13,200
thank you

1496
01:00:13,200 --> 01:00:15,839
all right

1497
01:00:23,599 --> 01:00:26,839
okay a asgcm

1498
01:00:26,839 --> 01:00:30,240
exploit next

1499
01:00:38,240 --> 01:00:41,440
hey can you hear me

1500
01:00:41,440 --> 01:00:43,599
shall i share i'll share and pass to you

1501
01:00:43,599 --> 01:00:45,359
uh controls again

1502
01:00:45,359 --> 01:00:46,799
great thank you

1503
01:00:46,799 --> 01:00:49,119
all right

1504
01:00:49,359 --> 01:00:52,400
it's a new and exciting feature

1505
01:00:52,400 --> 01:00:55,280
oh hold on

1506
01:00:55,280 --> 01:00:57,839
what's happening

1507
01:00:59,440 --> 01:01:00,880
oh um

1508
01:01:00,880 --> 01:01:05,200
christopher you need to stop sharing

1509
01:01:06,559 --> 01:01:10,240
okay right thank you

1510
01:01:10,240 --> 01:01:13,240
um

1511
01:01:28,640 --> 01:01:31,118
okay

1512
01:01:37,680 --> 01:01:40,000
oh great i have the slight contrast

1513
01:01:40,000 --> 01:01:41,119
great

1514
01:01:41,119 --> 01:01:43,440
so um yes

1515
01:01:43,440 --> 01:01:46,160
thank you um this is about a rather

1516
01:01:46,160 --> 01:01:49,200
applied topic it's about an exploit of

1517
01:01:49,200 --> 01:01:51,760
aes gcm authentication deck for hidden

1518
01:01:51,760 --> 01:01:53,520
communications

1519
01:01:53,520 --> 01:01:56,160
it's a work that has been co-authored

1520
01:01:56,160 --> 01:01:58,720
with alexandre hartle who's on site and

1521
01:01:58,720 --> 01:02:00,559
some other colleagues from academia and

1522
01:02:00,559 --> 01:02:03,119
from industry

1523
01:02:03,119 --> 01:02:06,079
so next slide yeah

1524
01:02:06,079 --> 01:02:07,200
first

1525
01:02:07,200 --> 01:02:10,000
about hidden communication just uh very

1526
01:02:10,000 --> 01:02:12,079
very briefly so so malware it's about

1527
01:02:12,079 --> 01:02:13,839
malware communication hidden malware

1528
01:02:13,839 --> 01:02:14,799
communication and critical

1529
01:02:14,799 --> 01:02:16,960
infrastructures

1530
01:02:16,960 --> 01:02:18,079
initially

1531
01:02:18,079 --> 01:02:19,680
so malware needs

1532
01:02:19,680 --> 01:02:22,079
network communication to unleash its

1533
01:02:22,079 --> 01:02:23,680
destructive power

1534
01:02:23,680 --> 01:02:26,559
and initially malware used explicit

1535
01:02:26,559 --> 01:02:29,119
communications meaning

1536
01:02:29,119 --> 01:02:31,440
communications that use dedicated

1537
01:02:31,440 --> 01:02:34,319
messages on tcp udp etc

1538
01:02:34,319 --> 01:02:35,680
and

1539
01:02:35,680 --> 01:02:38,000
nowadays malware becomes increasingly

1540
01:02:38,000 --> 01:02:40,720
stealthy meaning it tries to hide within

1541
01:02:40,720 --> 01:02:42,480
existing legitimate benign

1542
01:02:42,480 --> 01:02:44,000
communications

1543
01:02:44,000 --> 01:02:46,160
in the example

1544
01:02:46,160 --> 01:02:48,720
below you have alice at the left bob at

1545
01:02:48,720 --> 01:02:51,119
the right they just exchanged some

1546
01:02:51,119 --> 01:02:53,119
benign ip datagrams

1547
01:02:53,119 --> 01:02:55,760
and and mallory somehow got access to an

1548
01:02:55,760 --> 01:02:58,640
asen on the path and is communicating

1549
01:02:58,640 --> 01:03:01,440
with eve just by exploiting some of the

1550
01:03:01,440 --> 01:03:04,240
unused fields or or less used fields

1551
01:03:04,240 --> 01:03:06,720
like ttl et cetera that are not that

1552
01:03:06,720 --> 01:03:08,799
apparent and and

1553
01:03:08,799 --> 01:03:12,480
so they misuse existing communications

1554
01:03:12,480 --> 01:03:13,280
um

1555
01:03:13,280 --> 01:03:15,520
can happen uh

1556
01:03:15,520 --> 01:03:18,480
rather as a covert channel so ipptl

1557
01:03:18,480 --> 01:03:20,079
flags options

1558
01:03:20,079 --> 01:03:22,160
inter-arrival times modulations or you

1559
01:03:22,160 --> 01:03:24,480
could use also some nonsense random

1560
01:03:24,480 --> 01:03:27,440
numbers etc

1561
01:03:28,559 --> 01:03:29,920
now if we have this critical

1562
01:03:29,920 --> 01:03:32,559
infrastructure and we want to harden

1563
01:03:32,559 --> 01:03:34,960
this uh infrastructure

1564
01:03:34,960 --> 01:03:36,319
um

1565
01:03:36,319 --> 01:03:38,079
we we need to assume that any system is

1566
01:03:38,079 --> 01:03:40,160
vulnerable that is the question is not

1567
01:03:40,160 --> 01:03:41,760
who discovers the

1568
01:03:41,760 --> 01:03:44,480
the question is not when or if a zero

1569
01:03:44,480 --> 01:03:46,720
day is discovered but who discovers this

1570
01:03:46,720 --> 01:03:49,919
vulnerability and when

1571
01:03:50,160 --> 01:03:51,119
what is

1572
01:03:51,119 --> 01:03:53,680
typically done in industries now to

1573
01:03:53,680 --> 01:03:54,720
protect

1574
01:03:54,720 --> 01:03:57,680
the key materials ck

1575
01:03:57,680 --> 01:04:00,400
using so-called ckmds crypto key

1576
01:04:00,400 --> 01:04:03,039
management devices so trusted platform

1577
01:04:03,039 --> 01:04:07,200
medius modules or smart cards that are

1578
01:04:07,200 --> 01:04:09,760
uncompromisable in so they protect the

1579
01:04:09,760 --> 01:04:12,000
key material physically and offers some

1580
01:04:12,000 --> 01:04:14,240
well known api so in the case of

1581
01:04:14,240 --> 01:04:17,599
compromise shown as a red so even if an

1582
01:04:17,599 --> 01:04:20,079
a iit device for instance a smart meter

1583
01:04:20,079 --> 01:04:21,920
is compromised

1584
01:04:21,920 --> 01:04:22,720
this

1585
01:04:22,720 --> 01:04:25,119
key material is cannot be leaked because

1586
01:04:25,119 --> 01:04:27,920
it is physically shielded meaning there

1587
01:04:27,920 --> 01:04:30,480
are just some well-known apis to encrypt

1588
01:04:30,480 --> 01:04:32,079
or decrypt

1589
01:04:32,079 --> 01:04:34,160
using these

1590
01:04:34,160 --> 01:04:35,440
keys

1591
01:04:35,440 --> 01:04:37,119
and this can be either a hardware module

1592
01:04:37,119 --> 01:04:38,880
or it can be networked as you see at the

1593
01:04:38,880 --> 01:04:41,119
right and the question that we ask

1594
01:04:41,119 --> 01:04:43,280
ourselves is can malware exploit

1595
01:04:43,280 --> 01:04:45,680
cryptography for hidden communication

1596
01:04:45,680 --> 01:04:48,640
and disheartened systems

1597
01:04:48,640 --> 01:04:51,599
and the answer is obviously yes

1598
01:04:51,599 --> 01:04:52,480
so

1599
01:04:52,480 --> 01:04:55,359
aesgcm i'm not going into details i just

1600
01:04:55,359 --> 01:04:57,680
want to outline so so we have some some

1601
01:04:57,680 --> 01:04:59,440
input parameters to the algorithms we

1602
01:04:59,440 --> 01:05:01,119
have an initialization vector we have

1603
01:05:01,119 --> 01:05:04,079
some plain text uh plain text uh message

1604
01:05:04,079 --> 01:05:05,359
blocks

1605
01:05:05,359 --> 01:05:07,520
uh the key material that is protected so

1606
01:05:07,520 --> 01:05:09,520
we don't

1607
01:05:09,520 --> 01:05:10,799
believe we can

1608
01:05:10,799 --> 01:05:12,400
change this

1609
01:05:12,400 --> 01:05:14,559
or we can

1610
01:05:14,559 --> 01:05:16,960
find any exploit related to it and we

1611
01:05:16,960 --> 01:05:18,880
have output parameters shown in red so

1612
01:05:18,880 --> 01:05:21,039
ciphertext blocks and the authentication

1613
01:05:21,039 --> 01:05:24,079
tag now concerning the initialization

1614
01:05:24,079 --> 01:05:26,079
vector there have been already some

1615
01:05:26,079 --> 01:05:28,160
discussions on the lists during the

1616
01:05:28,160 --> 01:05:31,280
definition of aes gcm and deployment

1617
01:05:31,280 --> 01:05:32,079
so

1618
01:05:32,079 --> 01:05:33,440
it was a discussion whether

1619
01:05:33,440 --> 01:05:35,200
initialization vectors should be chosen

1620
01:05:35,200 --> 01:05:37,920
randomly and the answer was no so a

1621
01:05:37,920 --> 01:05:38,799
clear

1622
01:05:38,799 --> 01:05:41,599
recommendation not to do so because in

1623
01:05:41,599 --> 01:05:44,079
particular of this this ability for

1624
01:05:44,079 --> 01:05:46,079
hidden communication

1625
01:05:46,079 --> 01:05:48,000
so it is recommended to use

1626
01:05:48,000 --> 01:05:50,079
deterministic counting initialization

1627
01:05:50,079 --> 01:05:52,559
vectors

1628
01:05:52,880 --> 01:05:55,039
when using such a ckmd the state keeping

1629
01:05:55,039 --> 01:05:56,720
is difficult this segment these are

1630
01:05:56,720 --> 01:05:58,480
typically

1631
01:05:58,480 --> 01:06:01,200
stateless devices meaning they just map

1632
01:06:01,200 --> 01:06:04,960
a specific a specific id and a specific

1633
01:06:04,960 --> 01:06:07,599
message to a specific key

1634
01:06:07,599 --> 01:06:10,640
so deterministic initialization vectors

1635
01:06:10,640 --> 01:06:12,240
should be likely managed by this

1636
01:06:12,240 --> 01:06:15,439
requesting device

1637
01:06:17,280 --> 01:06:19,440
if we now consider a legitimate device

1638
01:06:19,440 --> 01:06:21,359
communication in this context that we

1639
01:06:21,359 --> 01:06:22,799
have

1640
01:06:22,799 --> 01:06:25,200
analyzed we have uh

1641
01:06:25,200 --> 01:06:27,280
at the left a sender application that

1642
01:06:27,280 --> 01:06:29,920
uses a kind of security proxy that is a

1643
01:06:29,920 --> 01:06:32,319
center application a benign one just

1644
01:06:32,319 --> 01:06:35,119
wants to send some plain text p to

1645
01:06:35,119 --> 01:06:36,960
a secure to

1646
01:06:36,960 --> 01:06:40,079
a receiver application at the right

1647
01:06:40,079 --> 01:06:42,079
and on this behalf it uses a security

1648
01:06:42,079 --> 01:06:43,680
process consisting of

1649
01:06:43,680 --> 01:06:46,799
a sender and a sender ckmd

1650
01:06:46,799 --> 01:06:48,400
so if the sender is compromised

1651
01:06:48,400 --> 01:06:51,119
nevertheless in center ckmd protects the

1652
01:06:51,119 --> 01:06:52,559
key material

1653
01:06:52,559 --> 01:06:55,200
what it does so if the legitimate

1654
01:06:55,200 --> 01:06:57,280
message arrives at the sender it

1655
01:06:57,280 --> 01:07:00,559
computes a new initialization vector

1656
01:07:00,559 --> 01:07:02,160
sensor encrypt request is a plain

1657
01:07:02,160 --> 01:07:04,000
message initialization vectors to the

1658
01:07:04,000 --> 01:07:06,960
ckmd which encrypts a message and

1659
01:07:06,960 --> 01:07:09,839
gives back a cipher text and a

1660
01:07:09,839 --> 01:07:11,839
authentication tag which is then

1661
01:07:11,839 --> 01:07:14,559
transmitted to the receiver security

1662
01:07:14,559 --> 01:07:16,079
proxy

1663
01:07:16,079 --> 01:07:18,400
that decrypts all of this information so

1664
01:07:18,400 --> 01:07:19,359
passes

1665
01:07:19,359 --> 01:07:20,960
cipher initialization vector and

1666
01:07:20,960 --> 01:07:23,599
authentication tag to the receiver ckmd

1667
01:07:23,599 --> 01:07:25,839
however please note that this receiver

1668
01:07:25,839 --> 01:07:28,319
ckmd typically will refuse the

1669
01:07:28,319 --> 01:07:30,160
decryption if one of these three

1670
01:07:30,160 --> 01:07:32,160
parameters is faulty meaning if we have

1671
01:07:32,160 --> 01:07:33,680
a for the authentication that we will

1672
01:07:33,680 --> 01:07:35,520
not decrypt

1673
01:07:35,520 --> 01:07:38,640
and as a response we get a p

1674
01:07:38,640 --> 01:07:41,200
plain text again and the receiver proxy

1675
01:07:41,200 --> 01:07:42,640
then forwards this message to the

1676
01:07:42,640 --> 01:07:45,759
receiver application

1677
01:07:47,520 --> 01:07:50,400
what can we now do or two observations

1678
01:07:50,400 --> 01:07:52,400
firstly

1679
01:07:52,400 --> 01:07:55,359
so gcm works similar to stream ciphers

1680
01:07:55,359 --> 01:07:57,680
that is we can decrypt by encrypting

1681
01:07:57,680 --> 01:08:00,000
with the same initialization vector and

1682
01:08:00,000 --> 01:08:02,559
we can decrypt by circumventing the

1683
01:08:02,559 --> 01:08:03,920
authenticate

1684
01:08:03,920 --> 01:08:06,400
authenticity verification that's a

1685
01:08:06,400 --> 01:08:07,359
problem

1686
01:08:07,359 --> 01:08:10,799
common to other counter encryption modes

1687
01:08:10,799 --> 01:08:12,640
mapping this

1688
01:08:12,640 --> 01:08:13,680
generic

1689
01:08:13,680 --> 01:08:15,760
sequence diagram to an iot

1690
01:08:15,760 --> 01:08:17,839
infrastructure think of a smart metering

1691
01:08:17,839 --> 01:08:20,799
infrastructure for instance you have iot

1692
01:08:20,799 --> 01:08:22,000
devices that are potentially

1693
01:08:22,000 --> 01:08:25,198
compromisable so you have physical

1694
01:08:25,198 --> 01:08:27,520
access to these devices

1695
01:08:27,520 --> 01:08:29,040
they protect the keying material but

1696
01:08:29,040 --> 01:08:31,839
nevertheless firmware exploits zero days

1697
01:08:31,839 --> 01:08:34,000
etc can lead to these devices to become

1698
01:08:34,000 --> 01:08:36,319
compromised and we have not just one

1699
01:08:36,319 --> 01:08:38,158
device but we have tens of thousands of

1700
01:08:38,158 --> 01:08:40,080
such devices that

1701
01:08:40,080 --> 01:08:41,679
work together

1702
01:08:41,679 --> 01:08:43,439
these devices

1703
01:08:43,439 --> 01:08:44,560
are

1704
01:08:44,560 --> 01:08:46,479
concentrated so the traffic from this

1705
01:08:46,479 --> 01:08:49,040
device is concentrated and forwarded to

1706
01:08:49,040 --> 01:08:50,640
an edge server that is reachable from

1707
01:08:50,640 --> 01:08:52,560
the internet and therefore

1708
01:08:52,560 --> 01:08:55,120
might also be compromisable an idea is

1709
01:08:55,120 --> 01:08:57,520
just supervised or supervises the

1710
01:08:57,520 --> 01:08:59,600
communication to this edge server

1711
01:08:59,600 --> 01:09:02,080
and it is worth noting that

1712
01:09:02,080 --> 01:09:04,880
yeah passing any keys to this ids is not

1713
01:09:04,880 --> 01:09:08,399
advisable we know about solar winds

1714
01:09:08,399 --> 01:09:12,560
sunburst orion exploits so

1715
01:09:12,560 --> 01:09:14,238
giving keys to to

1716
01:09:14,238 --> 01:09:17,279
end and and administrative power to ids

1717
01:09:17,279 --> 01:09:19,198
this is not that

1718
01:09:19,198 --> 01:09:21,279
good design decision

1719
01:09:21,279 --> 01:09:23,520
finally this edge server then uses a

1720
01:09:23,520 --> 01:09:26,080
network ckmd server to pass the

1721
01:09:26,080 --> 01:09:27,759
encrypted data to it

1722
01:09:27,759 --> 01:09:28,960
and

1723
01:09:28,960 --> 01:09:30,799
then forwards the information to an

1724
01:09:30,799 --> 01:09:34,439
application server

1725
01:09:35,920 --> 01:09:38,640
what we want to do is to implement some

1726
01:09:38,640 --> 01:09:40,960
subliminal communication between

1727
01:09:40,960 --> 01:09:44,158
a smart meter and an edge server

1728
01:09:44,158 --> 01:09:46,479
without this information

1729
01:09:46,479 --> 01:09:48,399
being without this information exchange

1730
01:09:48,399 --> 01:09:50,719
being visible to the outside so we want

1731
01:09:50,719 --> 01:09:52,238
to exploit and in particular the

1732
01:09:52,238 --> 01:09:55,280
authentication tag has shown to be uh

1733
01:09:55,280 --> 01:09:57,040
available for this and want to

1734
01:09:57,040 --> 01:09:59,040
circumvent the ckmd authentic

1735
01:09:59,040 --> 01:10:01,280
authenticity verification in the

1736
01:10:01,280 --> 01:10:02,400
receiver

1737
01:10:02,400 --> 01:10:04,159
but please note that this communication

1738
01:10:04,159 --> 01:10:06,159
is bidirectional so we can use exactly

1739
01:10:06,159 --> 01:10:09,840
the same approach in both directions

1740
01:10:09,840 --> 01:10:11,840
and the solution is quite

1741
01:10:11,840 --> 01:10:13,840
straightforward so

1742
01:10:13,840 --> 01:10:15,440
subliminal sender is compromised

1743
01:10:15,440 --> 01:10:17,840
subliminal receiver so these security

1744
01:10:17,840 --> 01:10:19,679
proxies have been compromised they

1745
01:10:19,679 --> 01:10:21,120
cannot leak the key material but

1746
01:10:21,120 --> 01:10:23,280
nevertheless they can act

1747
01:10:23,280 --> 01:10:25,199
uh whenever a sender application or

1748
01:10:25,199 --> 01:10:28,080
central legitimate benign message that

1749
01:10:28,080 --> 01:10:30,480
is to be encrypted

1750
01:10:30,480 --> 01:10:32,640
the subliminal sender chooses an

1751
01:10:32,640 --> 01:10:35,360
initialization vector encrypts this

1752
01:10:35,360 --> 01:10:37,920
information and what it does is simply

1753
01:10:37,920 --> 01:10:40,719
replace part of the authentication tag

1754
01:10:40,719 --> 01:10:42,640
with the subliminal message to be sent

1755
01:10:42,640 --> 01:10:45,679
to the receiver and sends this message

1756
01:10:45,679 --> 01:10:47,840
together with the modified so the

1757
01:10:47,840 --> 01:10:50,400
subliminal authentication tag

1758
01:10:50,400 --> 01:10:52,640
to the subliminal receiver

1759
01:10:52,640 --> 01:10:55,600
the subliminal receiver

1760
01:10:55,600 --> 01:10:59,199
uses this stream cipher

1761
01:10:59,199 --> 01:11:00,480
property

1762
01:11:00,480 --> 01:11:02,719
it simply takes a

1763
01:11:02,719 --> 01:11:05,679
random string of length corresponding to

1764
01:11:05,679 --> 01:11:07,360
the cipher text

1765
01:11:07,360 --> 01:11:09,360
encrypts these

1766
01:11:09,360 --> 01:11:13,280
data using the initialization vector

1767
01:11:13,280 --> 01:11:16,080
and gets a cr so a

1768
01:11:16,080 --> 01:11:18,320
cipher text

1769
01:11:18,320 --> 01:11:21,360
of the random text and a tag that it

1770
01:11:21,360 --> 01:11:22,960
doesn't use

1771
01:11:22,960 --> 01:11:24,880
now unfortunately

1772
01:11:24,880 --> 01:11:26,719
by xoring

1773
01:11:26,719 --> 01:11:29,440
the random text and the ciphertext we

1774
01:11:29,440 --> 01:11:31,120
obtain the cipher

1775
01:11:31,120 --> 01:11:33,600
and by exploring the cipher with the

1776
01:11:33,600 --> 01:11:36,800
ciphertext we get the plain text so

1777
01:11:36,800 --> 01:11:38,960
subliminal receiver now using this

1778
01:11:38,960 --> 01:11:41,920
encrypt operation has access to the

1779
01:11:41,920 --> 01:11:43,360
plain text

1780
01:11:43,360 --> 01:11:44,640
it has

1781
01:11:44,640 --> 01:11:47,040
from the authentication text

1782
01:11:47,040 --> 01:11:48,480
it obtains

1783
01:11:48,480 --> 01:11:50,960
the subliminal message can take an

1784
01:11:50,960 --> 01:11:53,120
action a destructive action and for

1785
01:11:53,120 --> 01:11:54,800
what's the message the plain text to

1786
01:11:54,800 --> 01:11:56,640
receive replication so from an outer

1787
01:11:56,640 --> 01:11:59,360
world perspective that's absolutely

1788
01:11:59,360 --> 01:12:00,800
legitimate

1789
01:12:00,800 --> 01:12:03,040
the only issue is that this subliminal

1790
01:12:03,040 --> 01:12:05,199
information here needs to be somehow

1791
01:12:05,199 --> 01:12:07,840
hidden by the subliminal sender can we

1792
01:12:07,840 --> 01:12:10,960
do better yes of course

1793
01:12:10,960 --> 01:12:13,840
we can change the entire process just by

1794
01:12:13,840 --> 01:12:15,840
doing the entire exactly the same

1795
01:12:15,840 --> 01:12:17,120
process

1796
01:12:17,120 --> 01:12:17,920
and

1797
01:12:17,920 --> 01:12:20,719
this hidden information as is exod into

1798
01:12:20,719 --> 01:12:21,520
the

1799
01:12:21,520 --> 01:12:23,840
into the authentication tag that is

1800
01:12:23,840 --> 01:12:26,159
instead of replacing we xor it is the

1801
01:12:26,159 --> 01:12:29,280
authentication tag and get and get

1802
01:12:29,280 --> 01:12:32,000
encryption of our hidden information for

1803
01:12:32,000 --> 01:12:33,600
free

1804
01:12:33,600 --> 01:12:35,440
proceed process at the receiver is

1805
01:12:35,440 --> 01:12:37,760
absolutely the same one we get the plain

1806
01:12:37,760 --> 01:12:39,840
text but wait we do not have the

1807
01:12:39,840 --> 01:12:41,600
authentication tag we need the

1808
01:12:41,600 --> 01:12:43,199
authentication tag to extract the

1809
01:12:43,199 --> 01:12:45,280
subliminal information what do we do we

1810
01:12:45,280 --> 01:12:47,360
encrypt once more so we encrypt the

1811
01:12:47,360 --> 01:12:48,840
plain text

1812
01:12:48,840 --> 01:12:51,760
with the initialization vector get back

1813
01:12:51,760 --> 01:12:54,480
the authentication tag and then by uh

1814
01:12:54,480 --> 01:12:57,280
decoding and and also by by exploring

1815
01:12:57,280 --> 01:12:58,880
the authentication tag and the

1816
01:12:58,880 --> 01:13:00,880
subliminal tag we get the subliminal

1817
01:13:00,880 --> 01:13:02,000
message

1818
01:13:02,000 --> 01:13:03,120
that's it

1819
01:13:03,120 --> 01:13:05,520
so from an outer perspective without

1820
01:13:05,520 --> 01:13:07,120
having the key material it's almost

1821
01:13:07,120 --> 01:13:10,000
impossible to identify that something

1822
01:13:10,000 --> 01:13:12,480
has happened here

1823
01:13:12,480 --> 01:13:14,560
this exploit is agnostic to protocol

1824
01:13:14,560 --> 01:13:17,040
semantics can be used in any context and

1825
01:13:17,040 --> 01:13:18,800
cannot be destroyed by intermediate

1826
01:13:18,800 --> 01:13:20,719
nodes because otherwise the legitimate

1827
01:13:20,719 --> 01:13:23,440
authentication tag is destroyed

1828
01:13:23,440 --> 01:13:25,120
without leaking the

1829
01:13:25,120 --> 01:13:27,760
secret key to some some observers it's

1830
01:13:27,760 --> 01:13:31,120
impossible to identify that

1831
01:13:31,120 --> 01:13:33,360
the authentication tag is faulty

1832
01:13:33,360 --> 01:13:37,120
and the capacity is usually high because

1833
01:13:37,120 --> 01:13:38,960
message authentication codes are

1834
01:13:38,960 --> 01:13:40,880
typically transmitted frequently some

1835
01:13:40,880 --> 01:13:43,679
such reports or messages

1836
01:13:43,679 --> 01:13:45,679
moreover the location of the sender of

1837
01:13:45,679 --> 01:13:47,760
this hidden information can be anywhere

1838
01:13:47,760 --> 01:13:49,440
on the path where it can access the

1839
01:13:49,440 --> 01:13:51,520
authentication text so it needs not

1840
01:13:51,520 --> 01:13:54,000
necessarily be collocated with the

1841
01:13:54,000 --> 01:13:56,000
device

1842
01:13:56,000 --> 01:13:58,080
i'm getting short of time so

1843
01:13:58,080 --> 01:14:00,480
yes mitigations thank you you have

1844
01:14:00,480 --> 01:14:03,360
already standardized gcm siv so

1845
01:14:03,360 --> 01:14:05,920
synthetic initialization vector

1846
01:14:05,920 --> 01:14:08,480
which solves exactly the problem so it

1847
01:14:08,480 --> 01:14:09,920
is uh the

1848
01:14:09,920 --> 01:14:12,159
issue is that we have initialization

1849
01:14:12,159 --> 01:14:16,000
vectors that can be repeatedly used it's

1850
01:14:16,000 --> 01:14:17,679
clear that this is

1851
01:14:17,679 --> 01:14:19,520
this should not happen but it happens in

1852
01:14:19,520 --> 01:14:22,320
this setup

1853
01:14:23,199 --> 01:14:25,199
we can generate

1854
01:14:25,199 --> 01:14:28,880
ivs on the ckmd but this can lead to

1855
01:14:28,880 --> 01:14:32,400
ckmd originated subliminal channels

1856
01:14:32,400 --> 01:14:35,520
and we have a deployed

1857
01:14:35,520 --> 01:14:38,239
mass of of systems that need to be

1858
01:14:38,239 --> 01:14:40,239
maintained that is we could use distant

1859
01:14:40,239 --> 01:14:43,040
keys for each direction for what reverse

1860
01:14:43,040 --> 01:14:44,560
or we could

1861
01:14:44,560 --> 01:14:48,239
use the initialization vector

1862
01:14:48,800 --> 01:14:50,960
a segment a segmented set of

1863
01:14:50,960 --> 01:14:52,320
initialization vectors for each

1864
01:14:52,320 --> 01:14:53,600
direction

1865
01:14:53,600 --> 01:14:57,199
and i'm almost done so just uh combining

1866
01:14:57,199 --> 01:14:59,920
the ckmds with the gcm encryption can

1867
01:14:59,920 --> 01:15:02,480
show security shortcomings

1868
01:15:02,480 --> 01:15:03,600
and

1869
01:15:03,600 --> 01:15:04,880
yes

1870
01:15:04,880 --> 01:15:06,000
obviously

1871
01:15:06,000 --> 01:15:09,040
gcm siv is recommended or some some

1872
01:15:09,040 --> 01:15:10,400
remedies but

1873
01:15:10,400 --> 01:15:12,320
it's it's a general architectural

1874
01:15:12,320 --> 01:15:15,199
problem and uh yes one should consider

1875
01:15:15,199 --> 01:15:16,800
this opportunity

1876
01:15:16,800 --> 01:15:19,120
uh you have a link over here that leads

1877
01:15:19,120 --> 01:15:20,880
to the paper if you don't have access

1878
01:15:20,880 --> 01:15:23,040
please drop me a note and i'm happy to

1879
01:15:23,040 --> 01:15:25,120
send you a pre-published version

1880
01:15:25,120 --> 01:15:27,920
on the last slide you have some some

1881
01:15:27,920 --> 01:15:30,239
information on the project that we're

1882
01:15:30,239 --> 01:15:31,920
doing and this was a result of this

1883
01:15:31,920 --> 01:15:33,199
project so

1884
01:15:33,199 --> 01:15:34,960
yeah happy to take questions and thank

1885
01:15:34,960 --> 01:15:38,080
you for the opportunity to present

1886
01:15:38,080 --> 01:15:40,880
okay we are slightly behind on

1887
01:15:40,880 --> 01:15:42,560
uh i'm sorry

1888
01:15:42,560 --> 01:15:44,640
now it's all right uh

1889
01:15:44,640 --> 01:15:46,320
i i

1890
01:15:46,320 --> 01:15:48,640
locked the queue so uh two questions

1891
01:15:48,640 --> 01:15:50,320
jonathan first

1892
01:15:50,320 --> 01:15:52,320
jonathan hoyland's cloud player

1893
01:15:52,320 --> 01:15:54,719
uh one way you could potentially detect

1894
01:15:54,719 --> 01:15:56,080
this is in use

1895
01:15:56,080 --> 01:15:59,600
is surely by having some middleman

1896
01:15:59,600 --> 01:16:01,440
munge the uh

1897
01:16:01,440 --> 01:16:03,120
authentication tag right they just mess

1898
01:16:03,120 --> 01:16:04,159
it up

1899
01:16:04,159 --> 01:16:05,280
and the

1900
01:16:05,280 --> 01:16:06,960
the receiver should then reject the

1901
01:16:06,960 --> 01:16:09,280
message but it won't

1902
01:16:09,280 --> 01:16:12,159
yes sure there are many so for instance

1903
01:16:12,159 --> 01:16:14,080
you could also intercept here the

1904
01:16:14,080 --> 01:16:16,560
network communication yes uh by seeing

1905
01:16:16,560 --> 01:16:18,320
that you have two encrypt requests

1906
01:16:18,320 --> 01:16:20,719
instead of one you could identify that

1907
01:16:20,719 --> 01:16:23,120
something's happening or by logging this

1908
01:16:23,120 --> 01:16:25,280
receiver ckmd to see that you have a

1909
01:16:25,280 --> 01:16:26,960
mass of encrypt request instead of

1910
01:16:26,960 --> 01:16:29,360
decrypt so you should have a symmetry

1911
01:16:29,360 --> 01:16:32,960
ordinary uh by by default but uh so so

1912
01:16:32,960 --> 01:16:34,400
we have several counter measures they

1913
01:16:34,400 --> 01:16:37,679
are they are mentioned in the um

1914
01:16:37,679 --> 01:16:39,920
in the paper but thank you yes obviously

1915
01:16:39,920 --> 01:16:40,880
this is

1916
01:16:40,880 --> 01:16:41,920
there

1917
01:16:41,920 --> 01:16:43,920
there are some mechanisms but by default

1918
01:16:43,920 --> 01:16:46,840
so so today's system are rather bad at

1919
01:16:46,840 --> 01:16:49,600
this it's very cool thank you

1920
01:16:49,600 --> 01:16:51,840
thank you

1921
01:16:51,840 --> 01:16:52,880
scott

1922
01:16:52,880 --> 01:16:55,280
okay yes uh if i understand that you are

1923
01:16:55,280 --> 01:16:57,679
assuming the ascender and receiver uh

1924
01:16:57,679 --> 01:17:00,159
crypto engines are both compromised if

1925
01:17:00,159 --> 01:17:02,719
you assume that can't they replace the

1926
01:17:02,719 --> 01:17:04,320
the gcm algorithms with anything they

1927
01:17:04,320 --> 01:17:06,480
find convenient and use that as an

1928
01:17:06,480 --> 01:17:10,959
exploit why is it specific to gcm

1929
01:17:11,199 --> 01:17:13,199
they they could in theory uh replace

1930
01:17:13,199 --> 01:17:16,239
anything so so it was a uh

1931
01:17:16,239 --> 01:17:19,120
the topic was derived from a rather

1932
01:17:19,120 --> 01:17:20,480
applied project where we have an

1933
01:17:20,480 --> 01:17:23,120
existing system and there we have aes

1934
01:17:23,120 --> 01:17:26,320
gcm and yes in in theory you could

1935
01:17:26,320 --> 01:17:29,120
replace also some some messages you

1936
01:17:29,120 --> 01:17:30,400
could introduce some additional

1937
01:17:30,400 --> 01:17:33,600
information but we we try to stay with

1938
01:17:33,600 --> 01:17:34,560
the

1939
01:17:34,560 --> 01:17:35,760
minimum

1940
01:17:35,760 --> 01:17:38,800
of uh of exploit that is needed to

1941
01:17:38,800 --> 01:17:40,960
transfer information and in this case

1942
01:17:40,960 --> 01:17:42,239
just the authentication tag is

1943
01:17:42,239 --> 01:17:43,440
sufficient

1944
01:17:43,440 --> 01:17:45,280
and you have of obviously you have

1945
01:17:45,280 --> 01:17:47,520
external observers too that that could

1946
01:17:47,520 --> 01:17:49,440
intercept some some changes in

1947
01:17:49,440 --> 01:17:52,320
communications

1948
01:17:53,120 --> 01:17:55,280
all right

1949
01:17:55,280 --> 01:17:57,360
all right thank you um can you please

1950
01:17:57,360 --> 01:17:59,760
stop sharing slides

1951
01:17:59,760 --> 01:18:01,120
yes uh

1952
01:18:01,120 --> 01:18:02,880
okay thank you

1953
01:18:02,880 --> 01:18:04,900
right thank you very much

1954
01:18:04,900 --> 01:18:07,520
[Music]

1955
01:18:07,520 --> 01:18:12,480
next is dual prf construction nimrod

1956
01:18:20,719 --> 01:18:25,400
can everyone hear me and see the slides

1957
01:18:26,159 --> 01:18:28,960
oh okay fine hold on

1958
01:18:28,960 --> 01:18:31,280
uh did you

1959
01:18:31,280 --> 01:18:33,519
okay

1960
01:18:34,560 --> 01:18:37,800
i'll just

1961
01:18:41,520 --> 01:18:43,199
okay

1962
01:18:43,199 --> 01:18:45,199
all right uh can everyone hear me and

1963
01:18:45,199 --> 01:18:47,840
see the slides

1964
01:18:47,840 --> 01:18:48,719
yes

1965
01:18:48,719 --> 01:18:50,000
yeah all right

1966
01:18:50,000 --> 01:18:51,040
so hi

1967
01:18:51,040 --> 01:18:53,040
my name is nimrod aviram and i would

1968
01:18:53,040 --> 01:18:56,000
like to present a dual prf construction

1969
01:18:56,000 --> 01:18:57,920
this is joint work with uh benjamin

1970
01:18:57,920 --> 01:19:00,560
dowling ilan komargotsky kenny patterson

1971
01:19:00,560 --> 01:19:03,880
ayal hernandez

1972
01:19:04,320 --> 01:19:06,400
so in modern protocols we usually have

1973
01:19:06,400 --> 01:19:08,640
the client and server

1974
01:19:08,640 --> 01:19:10,719
agree on a shared cryptographic secret

1975
01:19:10,719 --> 01:19:13,440
along with other protocol parameters

1976
01:19:13,440 --> 01:19:16,080
and then we feed the shared secret

1977
01:19:16,080 --> 01:19:19,520
and the protocol transcript into a kdf a

1978
01:19:19,520 --> 01:19:22,400
key derivation function

1979
01:19:22,400 --> 01:19:24,880
to arrive at the pell session

1980
01:19:24,880 --> 01:19:26,880
shared secret and from that shared

1981
01:19:26,880 --> 01:19:28,000
secret

1982
01:19:28,000 --> 01:19:31,360
we derive symmetric keys

1983
01:19:32,320 --> 01:19:34,320
that key derivation function

1984
01:19:34,320 --> 01:19:37,360
should be uh total random that is

1985
01:19:37,360 --> 01:19:39,440
the output should be indistinguishable

1986
01:19:39,440 --> 01:19:42,159
from random when the key is uniformly

1987
01:19:42,159 --> 01:19:43,360
distributed

1988
01:19:43,360 --> 01:19:45,199
even for an attacker that fully controls

1989
01:19:45,199 --> 01:19:47,440
the transcript

1990
01:19:47,440 --> 01:19:48,640
so

1991
01:19:48,640 --> 01:19:50,560
we can use hmac

1992
01:19:50,560 --> 01:19:54,320
which is uh probably a prf under very

1993
01:19:54,320 --> 01:19:56,080
mild assumptions

1994
01:19:56,080 --> 01:19:58,480
and it would appear everything is well

1995
01:19:58,480 --> 01:19:58,910
and good

1996
01:19:58,910 --> 01:20:00,640
[Music]

1997
01:20:00,640 --> 01:20:02,159
however

1998
01:20:02,159 --> 01:20:06,239
in some cases we have more than one key

1999
01:20:06,239 --> 01:20:08,080
and

2000
01:20:08,080 --> 01:20:10,000
now we're asking uh what should we do

2001
01:20:10,000 --> 01:20:11,520
here

2002
01:20:11,520 --> 01:20:15,679
for example in uh tls 1.3 where we use

2003
01:20:15,679 --> 01:20:17,360
both diffie-hellman key exchange and

2004
01:20:17,360 --> 01:20:18,800
appreciate key

2005
01:20:18,800 --> 01:20:20,400
and this happens a lot for example in

2006
01:20:20,400 --> 01:20:24,320
resumption which is very widely used

2007
01:20:24,320 --> 01:20:27,040
in hybrid key exchange uh well we have

2008
01:20:27,040 --> 01:20:29,360
both a classical key exchange algorithm

2009
01:20:29,360 --> 01:20:32,560
and a post quantum one

2010
01:20:32,560 --> 01:20:33,840
and

2011
01:20:33,840 --> 01:20:35,679
in the signal double ratchet protocol

2012
01:20:35,679 --> 01:20:38,639
where we combine an existing shared

2013
01:20:38,639 --> 01:20:39,920
secret state

2014
01:20:39,920 --> 01:20:42,800
with new uh keying material that is

2015
01:20:42,800 --> 01:20:45,280
output of difficult

2016
01:20:45,280 --> 01:20:47,520
in all of these situations we use two

2017
01:20:47,520 --> 01:20:50,880
keys at least two keys

2018
01:20:51,760 --> 01:20:54,080
and the general approach for doing this

2019
01:20:54,080 --> 01:20:55,520
is uh

2020
01:20:55,520 --> 01:20:56,719
to

2021
01:20:56,719 --> 01:20:58,960
combine the two keys into a single

2022
01:20:58,960 --> 01:21:01,920
single unified key using a key combiner

2023
01:21:01,920 --> 01:21:04,080
function

2024
01:21:04,080 --> 01:21:05,360
and then

2025
01:21:05,360 --> 01:21:07,120
compute hmac

2026
01:21:07,120 --> 01:21:09,600
with that key of a say the protocol

2027
01:21:09,600 --> 01:21:12,000
transcript and have that be the output

2028
01:21:12,000 --> 01:21:15,280
of the entire kdf uh this is largely

2029
01:21:15,280 --> 01:21:17,920
done both in existing constructions and

2030
01:21:17,920 --> 01:21:20,560
in our proposal

2031
01:21:20,560 --> 01:21:22,800
and when we say that key combiner

2032
01:21:22,800 --> 01:21:25,280
function takes two keys uh we mean it

2033
01:21:25,280 --> 01:21:28,960
should be a dual prf that is the output

2034
01:21:28,960 --> 01:21:31,360
should be in this indistinguishable form

2035
01:21:31,360 --> 01:21:32,560
random

2036
01:21:32,560 --> 01:21:33,840
uh

2037
01:21:33,840 --> 01:21:36,480
when one key when it one key is

2038
01:21:36,480 --> 01:21:38,800
uniformly distributed and the other key

2039
01:21:38,800 --> 01:21:40,840
might be controlled by the

2040
01:21:40,840 --> 01:21:42,560
attacker and

2041
01:21:42,560 --> 01:21:44,639
this scenario is actually

2042
01:21:44,639 --> 01:21:46,560
realistic because

2043
01:21:46,560 --> 01:21:50,080
say in protocols an attacker can replay

2044
01:21:50,080 --> 01:21:52,800
a key share from a previous session and

2045
01:21:52,800 --> 01:21:55,360
attempt to learn that r key

2046
01:21:55,360 --> 01:21:57,600
while injecting new keying material from

2047
01:21:57,600 --> 01:21:59,520
the uh to the other key

2048
01:21:59,520 --> 01:22:00,719
and of course

2049
01:22:00,719 --> 01:22:02,719
we don't know which key the attacker

2050
01:22:02,719 --> 01:22:04,639
controls and which key the attacker

2051
01:22:04,639 --> 01:22:07,520
attempts to learn

2052
01:22:09,440 --> 01:22:13,199
uh so it's then natural to ask uh can we

2053
01:22:13,199 --> 01:22:16,560
use hmac as that key combiner function

2054
01:22:16,560 --> 01:22:19,360
and the answer seems to be no because

2055
01:22:19,360 --> 01:22:23,520
hmac is generally not a dual prf

2056
01:22:23,520 --> 01:22:26,159
to be fair it was never claimed or

2057
01:22:26,159 --> 01:22:28,400
designed to be a dual prf under any

2058
01:22:28,400 --> 01:22:29,840
assumption

2059
01:22:29,840 --> 01:22:32,000
and it's definitely not one

2060
01:22:32,000 --> 01:22:33,679
if the underlying hash function is not

2061
01:22:33,679 --> 01:22:37,159
collision resistant

2062
01:22:38,239 --> 01:22:40,639
that's where our proposed construction

2063
01:22:40,639 --> 01:22:42,000
comes in

2064
01:22:42,000 --> 01:22:43,840
uh so we have a construction for a dual

2065
01:22:43,840 --> 01:22:45,120
prf

2066
01:22:45,120 --> 01:22:47,120
uh the construction uses an underlying

2067
01:22:47,120 --> 01:22:50,480
hash function as a basic building block

2068
01:22:50,480 --> 01:22:53,040
uh the hash function can be say shadow

2069
01:22:53,040 --> 01:22:55,760
56 or any other standard hash function

2070
01:22:55,760 --> 01:22:57,360
it doesn't even have to be collision

2071
01:22:57,360 --> 01:22:59,760
resistant for the um

2072
01:22:59,760 --> 01:23:02,560
for the construction to be secure

2073
01:23:02,560 --> 01:23:04,080
the whole construction is fully

2074
01:23:04,080 --> 01:23:06,960
practical it only uses symmetric

2075
01:23:06,960 --> 01:23:08,719
cryptography and is overall cheap to

2076
01:23:08,719 --> 01:23:10,080
compute and we'll get to that in a

2077
01:23:10,080 --> 01:23:11,679
minute

2078
01:23:11,679 --> 01:23:14,320
uh it's especially cheap uh when we

2079
01:23:14,320 --> 01:23:17,120
compare it to asymmetric cryptography

2080
01:23:17,120 --> 01:23:17,840
so

2081
01:23:17,840 --> 01:23:19,760
if we want to use it in protocols which

2082
01:23:19,760 --> 01:23:21,280
we mostly do

2083
01:23:21,280 --> 01:23:22,800
the relative cost for including the

2084
01:23:22,800 --> 01:23:24,159
construction is

2085
01:23:24,159 --> 01:23:25,440
minimal

2086
01:23:25,440 --> 01:23:27,440
and we have a security proof

2087
01:23:27,440 --> 01:23:30,960
in our paper on e-print

2088
01:23:31,600 --> 01:23:34,480
how do we compute our construction

2089
01:23:34,480 --> 01:23:36,560
we take the first key

2090
01:23:36,560 --> 01:23:38,480
prepend some common reference string to

2091
01:23:38,480 --> 01:23:39,520
it

2092
01:23:39,520 --> 01:23:41,840
run that through the hash function

2093
01:23:41,840 --> 01:23:44,239
and use the output as the key

2094
01:23:44,239 --> 01:23:46,719
for hmac

2095
01:23:46,719 --> 01:23:48,800
then we take the second key

2096
01:23:48,800 --> 01:23:50,960
run it to a new fi through a new

2097
01:23:50,960 --> 01:23:52,320
function which i will describe in the

2098
01:23:52,320 --> 01:23:54,480
next slide and expanding injective

2099
01:23:54,480 --> 01:23:56,880
one-way function

2100
01:23:56,880 --> 01:23:59,520
we take the output uh prepend some

2101
01:23:59,520 --> 01:24:01,840
common reference link to it and use that

2102
01:24:01,840 --> 01:24:05,040
as the data input for hmac

2103
01:24:05,040 --> 01:24:06,880
then we do the same thing again with the

2104
01:24:06,880 --> 01:24:09,920
key roles swapped

2105
01:24:10,159 --> 01:24:14,638
we then take the two hmac outputs

2106
01:24:15,040 --> 01:24:16,800
x of them

2107
01:24:16,800 --> 01:24:18,880
run that through the hash function one

2108
01:24:18,880 --> 01:24:20,880
last time and this is the output of the

2109
01:24:20,880 --> 01:24:23,520
whole construction

2110
01:24:23,520 --> 01:24:26,960
note how everything here is uh symmetric

2111
01:24:26,960 --> 01:24:30,000
and uh standardized cryptography

2112
01:24:30,000 --> 01:24:32,239
except for the f function which i will

2113
01:24:32,239 --> 01:24:34,879
now describe

2114
01:24:37,280 --> 01:24:38,320
um

2115
01:24:38,320 --> 01:24:40,719
how do we compute uh

2116
01:24:40,719 --> 01:24:43,040
the expanding injective one-way function

2117
01:24:43,040 --> 01:24:45,040
f

2118
01:24:45,040 --> 01:24:48,159
we have a message m and we split it into

2119
01:24:48,159 --> 01:24:49,360
blocks

2120
01:24:49,360 --> 01:24:51,600
with the same size as the hash function

2121
01:24:51,600 --> 01:24:53,360
block size

2122
01:24:53,360 --> 01:24:55,920
then for each message block

2123
01:24:55,920 --> 01:24:58,159
we are running through the hash function

2124
01:24:58,159 --> 01:24:59,600
several times

2125
01:24:59,600 --> 01:25:01,840
each time while uh

2126
01:25:01,840 --> 01:25:06,719
first uh processing um an input block

2127
01:25:06,719 --> 01:25:10,320
uh of an appropriate index so we we

2128
01:25:10,320 --> 01:25:12,239
first prepared a full input block of

2129
01:25:12,239 --> 01:25:13,440
zeros

2130
01:25:13,440 --> 01:25:15,280
right and then the message and we run

2131
01:25:15,280 --> 01:25:16,480
that through the hash function and we

2132
01:25:16,480 --> 01:25:18,000
get the start

2133
01:25:18,000 --> 01:25:19,679
of the output

2134
01:25:19,679 --> 01:25:21,360
then we uh

2135
01:25:21,360 --> 01:25:22,800
do the same thing again but with the

2136
01:25:22,800 --> 01:25:24,480
whole block

2137
01:25:24,480 --> 01:25:26,960
of ones at the start run that to the

2138
01:25:26,960 --> 01:25:30,560
hash function and get the second uh

2139
01:25:30,560 --> 01:25:34,000
we get the continuation of the outputs

2140
01:25:34,000 --> 01:25:36,960
we concatenate the hash function results

2141
01:25:36,960 --> 01:25:39,520
uh of all of these computations and this

2142
01:25:39,520 --> 01:25:41,840
is the expanding function f

2143
01:25:41,840 --> 01:25:44,800
note that it is also symmetric and cheap

2144
01:25:44,800 --> 01:25:47,360
to compute

2145
01:25:47,520 --> 01:25:50,800
uh this in this diagram we we process

2146
01:25:50,800 --> 01:25:52,800
each block twice

2147
01:25:52,800 --> 01:25:55,199
but this is only for simplicity in

2148
01:25:55,199 --> 01:25:57,840
practice we propose our pros processing

2149
01:25:57,840 --> 01:26:00,960
each block three times

2150
01:26:01,120 --> 01:26:03,840
uh the amount of times we process each

2151
01:26:03,840 --> 01:26:04,800
block

2152
01:26:04,800 --> 01:26:06,639
is called the expansion factor and this

2153
01:26:06,639 --> 01:26:09,920
is the parameter of the construction

2154
01:26:09,920 --> 01:26:10,960
uh

2155
01:26:10,960 --> 01:26:12,800
and what why do we choose an expansion

2156
01:26:12,800 --> 01:26:14,239
factor of think

2157
01:26:14,239 --> 01:26:17,360
so what this uh expansion factor does is

2158
01:26:17,360 --> 01:26:19,760
it helps the function be injective

2159
01:26:19,760 --> 01:26:23,199
the more we expand the input the longer

2160
01:26:23,199 --> 01:26:25,360
the output and the higher the chance

2161
01:26:25,360 --> 01:26:29,040
that the function is injected

2162
01:26:29,040 --> 01:26:31,199
if we want to standardize and deploy a

2163
01:26:31,199 --> 01:26:32,639
new kdf

2164
01:26:32,639 --> 01:26:35,679
this has high potential forcification

2165
01:26:35,679 --> 01:26:38,080
that is once we deploy something into

2166
01:26:38,080 --> 01:26:40,000
the field it will be very hard to

2167
01:26:40,000 --> 01:26:44,080
upgrade and we're still dealing with uh

2168
01:26:44,080 --> 01:26:46,320
with these situations now

2169
01:26:46,320 --> 01:26:49,040
so we want to be conservative here uh so

2170
01:26:49,040 --> 01:26:51,520
we assumed that whatever hash function

2171
01:26:51,520 --> 01:26:52,800
we use

2172
01:26:52,800 --> 01:26:55,440
uh will eventually be as broken as md5

2173
01:26:55,440 --> 01:26:57,199
is broken today

2174
01:26:57,199 --> 01:26:59,360
so even with nd5 and coolant

2175
01:26:59,360 --> 01:27:01,840
cryptanalysis uh taking an expansion

2176
01:27:01,840 --> 01:27:04,159
factor of two is unbreakable to our

2177
01:27:04,159 --> 01:27:05,520
knowledge

2178
01:27:05,520 --> 01:27:08,560
and taking an expansion factor of 3

2179
01:27:08,560 --> 01:27:11,199
seems like a good security margin

2180
01:27:11,199 --> 01:27:13,920
we are also open to taking other values

2181
01:27:13,920 --> 01:27:17,040
for the expansion factor

2182
01:27:17,520 --> 01:27:20,560
uh we said the construction is fast um

2183
01:27:20,560 --> 01:27:22,800
it's much cheaper than asymmetric

2184
01:27:22,800 --> 01:27:24,400
cryptography again

2185
01:27:24,400 --> 01:27:26,719
it takes roughly seven microseconds to

2186
01:27:26,719 --> 01:27:29,120
combine two keys

2187
01:27:29,120 --> 01:27:32,480
uh comparing that with say hkdf

2188
01:27:32,480 --> 01:27:35,199
using concatenation uh

2189
01:27:35,199 --> 01:27:38,080
hkdf takes roughly one microsecond

2190
01:27:38,080 --> 01:27:40,239
so the overhead is roughly six

2191
01:27:40,239 --> 01:27:41,920
microseconds

2192
01:27:41,920 --> 01:27:43,600
and this is very cheap compared to

2193
01:27:43,600 --> 01:27:45,679
asymmetric cryptography

2194
01:27:45,679 --> 01:27:48,960
so even just doing diffie-hellman over

2195
01:27:48,960 --> 01:27:52,480
x255 19 with two exponentiation still

2196
01:27:52,480 --> 01:27:53,520
connection

2197
01:27:53,520 --> 01:27:56,000
each exponentiation takes roughly 45

2198
01:27:56,000 --> 01:27:58,480
microseconds so just the fieldman is

2199
01:27:58,480 --> 01:28:01,199
about 19 microseconds

2200
01:28:01,199 --> 01:28:02,080
uh

2201
01:28:02,080 --> 01:28:06,159
during ecdsa takes either 80 or 25 uh

2202
01:28:06,159 --> 01:28:07,520
microseconds

2203
01:28:07,520 --> 01:28:09,920
and if we want to also use entro that

2204
01:28:09,920 --> 01:28:12,320
would add some more

2205
01:28:12,320 --> 01:28:13,120
so

2206
01:28:13,120 --> 01:28:15,840
the largest overhead we came across uh

2207
01:28:15,840 --> 01:28:16,800
is

2208
01:28:16,800 --> 01:28:19,360
uh when doing only two different

2209
01:28:19,360 --> 01:28:20,960
expansion exponentiations and a

2210
01:28:20,960 --> 01:28:23,760
signature and even then the overhead is

2211
01:28:23,760 --> 01:28:25,679
only five percent

2212
01:28:25,679 --> 01:28:28,000
uh this is the largest overhead uh we

2213
01:28:28,000 --> 01:28:30,960
know of and the overhead is lower for

2214
01:28:30,960 --> 01:28:34,159
probably most other uh use cases

2215
01:28:34,159 --> 01:28:37,120
uh if uh some people find the overhead

2216
01:28:37,120 --> 01:28:39,199
unacceptable we can consider an

2217
01:28:39,199 --> 01:28:41,600
expansion factor of two which would

2218
01:28:41,600 --> 01:28:44,639
make the construction speedier

2219
01:28:44,639 --> 01:28:47,600
uh what do people use in practice

2220
01:28:47,600 --> 01:28:50,239
instead of dual prfs

2221
01:28:50,239 --> 01:28:53,600
uh so we've spoken of tls 1.3 in dp

2222
01:28:53,600 --> 01:28:55,600
hermann plus pre-shield key mode and of

2223
01:28:55,600 --> 01:28:58,719
signal which combine keys using hkdf

2224
01:28:58,719 --> 01:29:01,120
which is equivalent to hvac

2225
01:29:01,120 --> 01:29:03,679
this would implied we think of hmac as a

2226
01:29:03,679 --> 01:29:06,400
dual prf even though it is generally not

2227
01:29:06,400 --> 01:29:08,400
one

2228
01:29:08,400 --> 01:29:10,480
in hybrid key exchange where we combine

2229
01:29:10,480 --> 01:29:12,800
our classical and post quantum uh key

2230
01:29:12,800 --> 01:29:14,000
exchanges

2231
01:29:14,000 --> 01:29:14,880
uh

2232
01:29:14,880 --> 01:29:17,040
both in the itf work and in similar

2233
01:29:17,040 --> 01:29:19,600
proposals from etsy and east we actually

2234
01:29:19,600 --> 01:29:21,840
uh concatenate two keys and then feed

2235
01:29:21,840 --> 01:29:24,400
them to the kdf as usual

2236
01:29:24,400 --> 01:29:26,960
uh and even with only a single key

2237
01:29:26,960 --> 01:29:29,199
uh in tls 1.3 where we only use

2238
01:29:29,199 --> 01:29:30,560
diffie-hellman

2239
01:29:30,560 --> 01:29:33,280
uh that dpman output is actually passed

2240
01:29:33,280 --> 01:29:35,920
through the message input of hmac which

2241
01:29:35,920 --> 01:29:38,080
would again imply we treat hmac as a

2242
01:29:38,080 --> 01:29:39,679
dual prf

2243
01:29:39,679 --> 01:29:42,800
so we think uh standardizing a dual prf

2244
01:29:42,800 --> 01:29:43,920
would help

2245
01:29:43,920 --> 01:29:46,000
make protocols more robust

2246
01:29:46,000 --> 01:29:48,880
both when with multiple keys and also

2247
01:29:48,880 --> 01:29:50,560
with a single key

2248
01:29:50,560 --> 01:29:53,440
and we're asking uh we we would like to

2249
01:29:53,440 --> 01:29:54,880
write an internet draft and we are

2250
01:29:54,880 --> 01:29:57,360
asking all are people interested

2251
01:29:57,360 --> 01:29:58,800
thank you

2252
01:29:58,800 --> 01:30:02,080
i'm happy to take questions

2253
01:30:03,520 --> 01:30:07,840
yeah uh chris wood please go ahead

2254
01:30:07,840 --> 01:30:10,400
yeah thanks i have a two well one

2255
01:30:10,400 --> 01:30:12,239
question um

2256
01:30:12,239 --> 01:30:14,719
and then more of a comment um

2257
01:30:14,719 --> 01:30:16,719
uh the first of which is on the the the

2258
01:30:16,719 --> 01:30:19,679
claim that hmac or hpdf extract is not a

2259
01:30:19,679 --> 01:30:21,600
dual prf um

2260
01:30:21,600 --> 01:30:24,080
uh i'm not a cryptographer so i defer to

2261
01:30:24,080 --> 01:30:26,000
you experts to determine whether or not

2262
01:30:26,000 --> 01:30:27,520
that is or is not true

2263
01:30:27,520 --> 01:30:30,080
um but my concern is that um many of the

2264
01:30:30,080 --> 01:30:32,159
proofs that i've seen for tls 1.3 do

2265
01:30:32,159 --> 01:30:34,800
assume that hkdf extract is indeed a

2266
01:30:34,800 --> 01:30:36,719
dual prf

2267
01:30:36,719 --> 01:30:39,199
so i'm wondering if you can comment on

2268
01:30:39,199 --> 01:30:41,600
what the impact of this particular claim

2269
01:30:41,600 --> 01:30:44,400
is on existing security analyses for

2270
01:30:44,400 --> 01:30:47,120
protocols like tls 1.3

2271
01:30:47,120 --> 01:30:48,560
and in particular the key schedule of

2272
01:30:48,560 --> 01:30:50,400
tls 1.3

2273
01:30:50,400 --> 01:30:51,440
um

2274
01:30:51,440 --> 01:30:52,320
a

2275
01:30:52,320 --> 01:30:55,440
second comment is on the the the idea as

2276
01:30:55,440 --> 01:30:58,320
to whether or not to write a draft um

2277
01:30:58,320 --> 01:31:01,280
i think having something that

2278
01:31:01,280 --> 01:31:03,520
uh has like rigorously

2279
01:31:03,520 --> 01:31:06,000
proven dual prereq properties would be

2280
01:31:06,000 --> 01:31:08,960
nice however for applications like mls

2281
01:31:08,960 --> 01:31:10,960
um which require more than one key as

2282
01:31:10,960 --> 01:31:13,600
input it might be nice if

2283
01:31:13,600 --> 01:31:16,639
an nprf was the construction output on

2284
01:31:16,639 --> 01:31:18,239
the other end um

2285
01:31:18,239 --> 01:31:19,920
i know chris

2286
01:31:19,920 --> 01:31:21,199
um

2287
01:31:21,199 --> 01:31:23,040
forgetting his last name

2288
01:31:23,040 --> 01:31:23,470
um

2289
01:31:23,470 --> 01:31:25,040
[Music]

2290
01:31:25,040 --> 01:31:27,760
proposed for mls specifically

2291
01:31:27,760 --> 01:31:31,120
an nnprf construction i don't know i

2292
01:31:31,120 --> 01:31:32,800
don't recall what came of that whether

2293
01:31:32,800 --> 01:31:34,080
or not it turned into an internet draft

2294
01:31:34,080 --> 01:31:37,120
or there was a paper published or not

2295
01:31:37,120 --> 01:31:38,639
but i would like to see it perhaps

2296
01:31:38,639 --> 01:31:40,800
generalized beyond just two key or two

2297
01:31:40,800 --> 01:31:42,840
inputs

2298
01:31:42,840 --> 01:31:44,719
um

2299
01:31:44,719 --> 01:31:46,320
about the first question

2300
01:31:46,320 --> 01:31:48,159
thanks uh so i will start with the

2301
01:31:48,159 --> 01:31:49,920
second comment actually uh we can

2302
01:31:49,920 --> 01:31:53,440
accommodate uh however many keys uh

2303
01:31:53,440 --> 01:31:55,199
uh is needed

2304
01:31:55,199 --> 01:31:57,840
uh and we can do so efficiently

2305
01:31:57,840 --> 01:32:00,719
so we think we can help there as well

2306
01:32:00,719 --> 01:32:03,440
and uh as for existing analysis of the

2307
01:32:03,440 --> 01:32:04,960
7.3

2308
01:32:04,960 --> 01:32:07,140
i guess it's complicated

2309
01:32:07,140 --> 01:32:08,880
[Music]

2310
01:32:08,880 --> 01:32:13,440
a lot of analysis doesn't reduce to

2311
01:32:13,440 --> 01:32:16,159
to any specific assumption on the hash

2312
01:32:16,159 --> 01:32:18,480
function or on hmac but rather to

2313
01:32:18,480 --> 01:32:20,000
something which is kind of a toy

2314
01:32:20,000 --> 01:32:21,520
protocol

2315
01:32:21,520 --> 01:32:22,960
like the

2316
01:32:22,960 --> 01:32:26,000
prfodh assumption

2317
01:32:26,000 --> 01:32:28,320
um

2318
01:32:28,320 --> 01:32:30,560
well i i just uh i pulled up a paper

2319
01:32:30,560 --> 01:32:33,120
from um

2320
01:32:33,199 --> 01:32:37,519
who is it sorry scrolling about that

2321
01:32:37,679 --> 01:32:41,080
actually uh

2322
01:32:41,520 --> 01:32:43,360
i'm sorry sorry

2323
01:32:43,360 --> 01:32:44,719
yeah i think we're just running out of

2324
01:32:44,719 --> 01:32:47,360
time so uh i would say that we have a

2325
01:32:47,360 --> 01:32:49,679
good an extensive discussion of this on

2326
01:32:49,679 --> 01:32:51,600
our paper on eprint

2327
01:32:51,600 --> 01:32:53,760
and uh and we can take it to the list if

2328
01:32:53,760 --> 01:32:55,920
that's okay

2329
01:32:55,920 --> 01:32:58,400
uh sure i just wanted to just comment

2330
01:32:58,400 --> 01:33:00,639
briefly that like the they in various

2331
01:33:00,639 --> 01:33:02,320
proofs they do use this assumption to

2332
01:33:02,320 --> 01:33:04,480
bound um

2333
01:33:04,480 --> 01:33:05,840
uh

2334
01:33:05,840 --> 01:33:06,960
to make certain bounds on like

2335
01:33:06,960 --> 01:33:08,400
adversarial advantage and they're in

2336
01:33:08,400 --> 01:33:10,400
their their hops amongst various games

2337
01:33:10,400 --> 01:33:11,360
um

2338
01:33:11,360 --> 01:33:12,400
so

2339
01:33:12,400 --> 01:33:13,679
uh

2340
01:33:13,679 --> 01:33:15,360
it does seem it does seem relevant um

2341
01:33:15,360 --> 01:33:16,719
and i'll i'll take a look at the paper

2342
01:33:16,719 --> 01:33:18,400
we can try to find

2343
01:33:18,400 --> 01:33:20,320
yeah and and let's discuss this on a

2344
01:33:20,320 --> 01:33:22,480
list i'd be happy capitol

2345
01:33:22,480 --> 01:33:23,280
okay

2346
01:33:23,280 --> 01:33:26,320
quickly christopher

2347
01:33:28,400 --> 01:33:31,040
um my question is um

2348
01:33:31,040 --> 01:33:33,600
why uh i i was curious about like your

2349
01:33:33,600 --> 01:33:36,960
benchmarks this seems comparable like is

2350
01:33:36,960 --> 01:33:39,120
this is this comparable to what hkdf

2351
01:33:39,120 --> 01:33:40,159
does

2352
01:33:40,159 --> 01:33:43,280
um why compare it to

2353
01:33:43,280 --> 01:33:44,960
what's the value of comparing it to like

2354
01:33:44,960 --> 01:33:48,080
asymmetric crypto

2355
01:33:48,080 --> 01:33:51,360
so we're trying to argue that if we

2356
01:33:51,360 --> 01:33:54,000
uh add this to a protocol the

2357
01:33:54,000 --> 01:33:56,560
overhead is minimum

2358
01:33:56,560 --> 01:33:59,920
okay okay um because i okay okay so i

2359
01:33:59,920 --> 01:34:01,280
think um

2360
01:34:01,280 --> 01:34:03,520
i guess i guess the the comparison the

2361
01:34:03,520 --> 01:34:06,239
the one apples to apples comparison is

2362
01:34:06,239 --> 01:34:08,800
is hkdf right

2363
01:34:08,800 --> 01:34:11,360
so like yeah but probably fast hkdf

2364
01:34:11,360 --> 01:34:13,760
we're in good shape

2365
01:34:13,760 --> 01:34:15,440
yeah so it's

2366
01:34:15,440 --> 01:34:17,920
it's slower than hkdf but we think it

2367
01:34:17,920 --> 01:34:19,120
shouldn't

2368
01:34:19,120 --> 01:34:21,440
matter that much because uh we only do

2369
01:34:21,440 --> 01:34:24,320
it once say to process it yeah i totally

2370
01:34:24,320 --> 01:34:25,920
agree i don't i don't think it's the

2371
01:34:25,920 --> 01:34:27,360
overhead's insane but i'm just saying

2372
01:34:27,360 --> 01:34:30,480
that's the benchmark right

2373
01:34:30,719 --> 01:34:32,480
okay just just want to be clear thank

2374
01:34:32,480 --> 01:34:34,400
you very very very cool construction by

2375
01:34:34,400 --> 01:34:35,199
the way

2376
01:34:35,199 --> 01:34:37,120
oh thank you thank you

2377
01:34:37,120 --> 01:34:40,320
uh do we have time to from phillip

2378
01:34:40,320 --> 01:34:42,480
yes uh i closed the queue after philip

2379
01:34:42,480 --> 01:34:43,119
so

2380
01:34:43,119 --> 01:34:46,480
philip quickly yeah i i like this a lot

2381
01:34:46,480 --> 01:34:48,880
um there are some other things if we're

2382
01:34:48,880 --> 01:34:52,239
going to revisit uh hkdf

2383
01:34:52,239 --> 01:34:54,400
there were a few landmines that i came

2384
01:34:54,400 --> 01:34:55,840
across

2385
01:34:55,840 --> 01:34:57,679
uh when i was trying to use it in the

2386
01:34:57,679 --> 01:34:58,719
mesh

2387
01:34:58,719 --> 01:35:01,360
um some other thing some of the

2388
01:35:01,360 --> 01:35:03,679
assumptions that are reasonable to have

2389
01:35:03,679 --> 01:35:05,360
as a user

2390
01:35:05,360 --> 01:35:06,639
um

2391
01:35:06,639 --> 01:35:09,440
about what certain inputs

2392
01:35:09,440 --> 01:35:10,719
will do

2393
01:35:10,719 --> 01:35:12,960
are not actually true

2394
01:35:12,960 --> 01:35:15,679
and you know that that that just hit me

2395
01:35:15,679 --> 01:35:17,840
a few times uh

2396
01:35:17,840 --> 01:35:19,920
in a way there was surprise that should

2397
01:35:19,920 --> 01:35:21,840
be eliminated

2398
01:35:21,840 --> 01:35:23,679
the other point anime is

2399
01:35:23,679 --> 01:35:26,639
you you're looking at hmac

2400
01:35:26,639 --> 01:35:28,239
i think that that's the right thing to

2401
01:35:28,239 --> 01:35:31,520
use as far as timing is concerned

2402
01:35:31,520 --> 01:35:33,520
but if i was going to move

2403
01:35:33,520 --> 01:35:35,679
to a different key derivation function

2404
01:35:35,679 --> 01:35:38,159
at this point i would not want to use

2405
01:35:38,159 --> 01:35:40,639
hmac i'd want to use kmac

2406
01:35:40,639 --> 01:35:44,080
because you know hmac is a hack

2407
01:35:44,080 --> 01:35:46,400
trying to make a digest function that

2408
01:35:46,400 --> 01:35:48,560
wasn't designed to be a mac

2409
01:35:48,560 --> 01:35:49,600
do that

2410
01:35:49,600 --> 01:35:53,119
kmac is a construction

2411
01:35:53,119 --> 01:35:56,080
that is designed to be a mac in itself

2412
01:35:56,080 --> 01:35:58,800
and i i think it's a lot more principled

2413
01:35:58,800 --> 01:35:59,840
so

2414
01:35:59,840 --> 01:36:02,000
i think if we go to standards on this we

2415
01:36:02,000 --> 01:36:04,560
should definitely have kmac in there as

2416
01:36:04,560 --> 01:36:06,880
a recommended algorithm and i would like

2417
01:36:06,880 --> 01:36:10,719
to see the favored algorithm

2418
01:36:10,719 --> 01:36:12,639
all right uh thanks i'm not familiar

2419
01:36:12,639 --> 01:36:15,600
enough with the kmac to comment on this

2420
01:36:15,600 --> 01:36:18,480
and uh also a great hidf

2421
01:36:18,480 --> 01:36:20,880
yeah it's just using shah 3 in a

2422
01:36:20,880 --> 01:36:22,400
principled way to

2423
01:36:22,400 --> 01:36:23,679
do a mac

2424
01:36:23,679 --> 01:36:24,639
because it's

2425
01:36:24,639 --> 01:36:26,400
yeah it's

2426
01:36:26,400 --> 01:36:28,480
all right so and that is not always

2427
01:36:28,480 --> 01:36:29,679
advantageous

2428
01:36:29,679 --> 01:36:32,239
but uh i think we should discuss it uh

2429
01:36:32,239 --> 01:36:34,400
further on the list if you'd like i'd be

2430
01:36:34,400 --> 01:36:37,638
happy to

2431
01:36:38,560 --> 01:36:40,639
all right i guess that's it for me uh

2432
01:36:40,639 --> 01:36:41,600
thanks

2433
01:36:41,600 --> 01:36:43,679
all right thank you uh if you can stop

2434
01:36:43,679 --> 01:36:47,679
sharing slides that would be great

2435
01:36:50,239 --> 01:36:52,560
um how exactly

2436
01:36:52,560 --> 01:36:55,360
oh oh actually that might help

2437
01:36:55,360 --> 01:36:57,840
all right fine um

2438
01:36:57,840 --> 01:37:02,320
okay uh the next one is

2439
01:37:02,320 --> 01:37:05,440
the aegis aegis family of authenticated

2440
01:37:05,440 --> 01:37:07,360
encryption algorithms

2441
01:37:07,360 --> 01:37:10,960
okay let's do that

2442
01:37:17,760 --> 01:37:20,760
okay

2443
01:37:22,719 --> 01:37:23,600
um

2444
01:37:23,600 --> 01:37:26,560
shall i pass controls to you or do you

2445
01:37:26,560 --> 01:37:28,880
want me to drive i can do it away i can

2446
01:37:28,880 --> 01:37:31,119
do it myself okay

2447
01:37:31,119 --> 01:37:32,480
okay

2448
01:37:32,480 --> 01:37:35,839
let's okay

2449
01:37:39,119 --> 01:37:42,159
okay so i'll uh talk introduce the ages

2450
01:37:42,159 --> 01:37:44,860
fast authenticated encryption family

2451
01:37:44,860 --> 01:37:46,400
[Music]

2452
01:37:46,400 --> 01:37:48,400
there was an internet draft with first

2453
01:37:48,400 --> 01:37:50,239
version written last september there is

2454
01:37:50,239 --> 01:37:51,760
further support from google and also in

2455
01:37:51,760 --> 01:37:54,560
the team of the two designers of hs

2456
01:37:54,560 --> 01:37:56,800
hong kong and myself from university of

2457
01:37:56,800 --> 01:37:59,280
louisville

2458
01:37:59,600 --> 01:38:01,119
so it's a family authenticated

2459
01:38:01,119 --> 01:38:04,000
encryption algorithms is non-spaced

2460
01:38:04,000 --> 01:38:07,360
it's twice faster than aes gcm

2461
01:38:07,360 --> 01:38:10,239
so on the benchmarks we get to 0.287

2462
01:38:10,239 --> 01:38:12,800
cycles per byte

2463
01:38:12,800 --> 01:38:14,719
family offers a high security level and

2464
01:38:14,719 --> 01:38:16,400
there is already multiple

2465
01:38:16,400 --> 01:38:18,159
implementations available

2466
01:38:18,159 --> 01:38:22,480
including one in the linux kernel

2467
01:38:22,880 --> 01:38:24,320
a few things about the design i'll be

2468
01:38:24,320 --> 01:38:26,080
very brief and not go too much in boring

2469
01:38:26,080 --> 01:38:28,560
details the design was actually inspired

2470
01:38:28,560 --> 01:38:29,360
by

2471
01:38:29,360 --> 01:38:31,920
a pelican mac which is a mac designed by

2472
01:38:31,920 --> 01:38:34,719
the aes designers to be faster than aes

2473
01:38:34,719 --> 01:38:37,280
because for a mac you can be faster and

2474
01:38:37,280 --> 01:38:39,360
we then turn this into a stream cipher

2475
01:38:39,360 --> 01:38:41,679
which is actually also a lot faster than

2476
01:38:41,679 --> 01:38:42,800
the as

2477
01:38:42,800 --> 01:38:45,600
so we have a 128-bit key and iv and all

2478
01:38:45,600 --> 01:38:48,159
the words are here 128 bit but there is

2479
01:38:48,159 --> 01:38:51,679
a large state of 8 times 128 bits 1024

2480
01:38:51,679 --> 01:38:54,400
bits in edges 128 l

2481
01:38:54,400 --> 01:38:56,080
the scheme is very modular and easy to

2482
01:38:56,080 --> 01:38:58,639
analyze so you take your key and your iv

2483
01:38:58,639 --> 01:39:00,800
you do 10 steps of

2484
01:39:00,800 --> 01:39:03,199
each operation and then for every next

2485
01:39:03,199 --> 01:39:05,040
step you accept two message word you

2486
01:39:05,040 --> 01:39:06,639
produce two key stream words which you

2487
01:39:06,639 --> 01:39:08,560
add to the plain text and you output the

2488
01:39:08,560 --> 01:39:10,159
cipher text

2489
01:39:10,159 --> 01:39:11,440
at the end you add some linked

2490
01:39:11,440 --> 01:39:12,639
information

2491
01:39:12,639 --> 01:39:14,880
and then you do seven more steps and you

2492
01:39:14,880 --> 01:39:17,920
get the 128 bit mac value out so it's a

2493
01:39:17,920 --> 01:39:20,080
stream cipher with built in

2494
01:39:20,080 --> 01:39:22,880
mac generation so inside

2495
01:39:22,880 --> 01:39:25,199
the each is operation so there is eight

2496
01:39:25,199 --> 01:39:27,360
blocks and they're updated they all use

2497
01:39:27,360 --> 01:39:30,080
one round of aes

2498
01:39:30,080 --> 01:39:31,440
and they update as you can see in

2499
01:39:31,440 --> 01:39:33,760
parallel you see also the injection of

2500
01:39:33,760 --> 01:39:35,360
two message words and then to compute

2501
01:39:35,360 --> 01:39:37,040
the output

2502
01:39:37,040 --> 01:39:38,400
we take

2503
01:39:38,400 --> 01:39:40,480
for each of the outputs four message

2504
01:39:40,480 --> 01:39:41,679
words and then

2505
01:39:41,679 --> 01:39:43,600
two are added and two are end and then

2506
01:39:43,600 --> 01:39:45,920
added to the rest

2507
01:39:45,920 --> 01:39:47,679
so this is more or less how it works so

2508
01:39:47,679 --> 01:39:49,520
i think it can be described

2509
01:39:49,520 --> 01:39:51,360
in a very simple and

2510
01:39:51,360 --> 01:39:54,239
compact way

2511
01:39:54,239 --> 01:39:56,800
properties um we propose two variants

2512
01:39:56,800 --> 01:39:59,679
the 128 l variant has 128 with security

2513
01:39:59,679 --> 01:40:01,280
against confidence healthy attacks and

2514
01:40:01,280 --> 01:40:02,719
authentication

2515
01:40:02,719 --> 01:40:05,199
there is also a 256-bit version that

2516
01:40:05,199 --> 01:40:07,600
actually have has 268-bit security

2517
01:40:07,600 --> 01:40:09,360
against key search

2518
01:40:09,360 --> 01:40:12,159
and we decided to keep a 128 bit tags we

2519
01:40:12,159 --> 01:40:14,719
have 218 against forgery

2520
01:40:14,719 --> 01:40:17,119
for the smaller version we allow use of

2521
01:40:17,119 --> 01:40:19,920
248 messages per key which i want to

2522
01:40:19,920 --> 01:40:22,000
point out is much larger than what you

2523
01:40:22,000 --> 01:40:24,239
can get for the same security level

2524
01:40:24,239 --> 01:40:25,520
um

2525
01:40:25,520 --> 01:40:26,880
with

2526
01:40:26,880 --> 01:40:29,600
for example gcm or ocb

2527
01:40:29,600 --> 01:40:31,280
for the large version

2528
01:40:31,280 --> 01:40:32,880
lipsticks there is no restrictions or

2529
01:40:32,880 --> 01:40:35,360
number of messages in practice

2530
01:40:35,360 --> 01:40:36,719
but we want to point out that if you

2531
01:40:36,719 --> 01:40:38,719
would do to the 128 attempts you could

2532
01:40:38,719 --> 01:40:40,960
do an online forgery attack so you need

2533
01:40:40,960 --> 01:40:42,480
a huge number of interactions with the

2534
01:40:42,480 --> 01:40:45,760
verifier and then you could shorten um

2535
01:40:45,760 --> 01:40:47,360
key search but we decided this was not

2536
01:40:47,360 --> 01:40:51,440
really a problem a problem for security

2537
01:40:51,440 --> 01:40:54,159
security properties are that

2538
01:40:54,159 --> 01:40:56,960
unlike gcm it's key committing

2539
01:40:56,960 --> 01:40:59,040
and these actually stop search and key

2540
01:40:59,040 --> 01:41:00,480
partitioning attacks i don't have time

2541
01:41:00,480 --> 01:41:03,280
to go into detail

2542
01:41:03,280 --> 01:41:05,119
gcm also has some issues when you're

2543
01:41:05,119 --> 01:41:06,719
very nonsense you can may get some

2544
01:41:06,719 --> 01:41:08,800
security problems so this is not a

2545
01:41:08,800 --> 01:41:09,920
problem we recommend here to have

2546
01:41:09,920 --> 01:41:11,840
maximum size nozzles but they can be

2547
01:41:11,840 --> 01:41:12,960
shortened

2548
01:41:12,960 --> 01:41:15,040
what we don't achieve is resistant to

2549
01:41:15,040 --> 01:41:17,199
nones reuse we don't also achieve

2550
01:41:17,199 --> 01:41:18,960
resistance to

2551
01:41:18,960 --> 01:41:20,400
or you could be in trouble if you start

2552
01:41:20,400 --> 01:41:21,920
releasing plaintext before you check the

2553
01:41:21,920 --> 01:41:24,639
mac and we also didn't design the scheme

2554
01:41:24,639 --> 01:41:25,840
that's compactly committing could be

2555
01:41:25,840 --> 01:41:28,320
used for example for franking so these

2556
01:41:28,320 --> 01:41:30,080
last three properties are by design we

2557
01:41:30,080 --> 01:41:31,360
believe that if you want these

2558
01:41:31,360 --> 01:41:34,159
properties you have to do at least one

2559
01:41:34,159 --> 01:41:36,880
full block cipher encryption per 128 bit

2560
01:41:36,880 --> 01:41:38,960
and you can never be faster than the aes

2561
01:41:38,960 --> 01:41:40,639
itself

2562
01:41:40,639 --> 01:41:41,840
and also the same thing the franking

2563
01:41:41,840 --> 01:41:43,600
would require a larger attack which we

2564
01:41:43,600 --> 01:41:47,840
also didn't think was necessary

2565
01:41:48,159 --> 01:41:49,840
so there has been quite some independent

2566
01:41:49,840 --> 01:41:51,760
security evaluation each cipher was

2567
01:41:51,760 --> 01:41:53,360
designed nine years ago and was

2568
01:41:53,360 --> 01:41:55,600
submitted to the open cesar competition

2569
01:41:55,600 --> 01:41:57,760
there were close to 60 schemes and in

2570
01:41:57,760 --> 01:42:00,320
the end a handful of those were kept for

2571
01:42:00,320 --> 01:42:02,480
the final portfolio

2572
01:42:02,480 --> 01:42:05,040
including ages 128

2573
01:42:05,040 --> 01:42:07,119
there has been some independent analysis

2574
01:42:07,119 --> 01:42:09,840
by other teams there has been some

2575
01:42:09,840 --> 01:42:13,119
correlation analysis on his 256.

2576
01:42:13,119 --> 01:42:14,800
we are not concerned about these attacks

2577
01:42:14,800 --> 01:42:16,800
um of course theoretically it's below

2578
01:42:16,800 --> 01:42:20,960
256 but they require between 150 to 160

2579
01:42:20,960 --> 01:42:23,600
ciphertex blocks we're not concerned um

2580
01:42:23,600 --> 01:42:25,920
and i spoke to the people who did this

2581
01:42:25,920 --> 01:42:27,760
attack they don't see how to improve it

2582
01:42:27,760 --> 01:42:29,119
they don't they have done some attempts

2583
01:42:29,119 --> 01:42:30,719
in the in last year but they didn't get

2584
01:42:30,719 --> 01:42:32,159
much further than a small factor of two

2585
01:42:32,159 --> 01:42:33,520
or four

2586
01:42:33,520 --> 01:42:36,000
i'm also very impressing very recently

2587
01:42:36,000 --> 01:42:37,760
this this month actually and this week

2588
01:42:37,760 --> 01:42:40,560
at fse two attacks have

2589
01:42:40,560 --> 01:42:43,440
been published on aegis 128 is actually

2590
01:42:43,440 --> 01:42:45,119
not the version in the draft not in the

2591
01:42:45,119 --> 01:42:48,080
draft but because in the draft pf128l in

2592
01:42:48,080 --> 01:42:49,760
256

2593
01:42:49,760 --> 01:42:51,920
um and they break about five to of the

2594
01:42:51,920 --> 01:42:53,119
ten rounds

2595
01:42:53,119 --> 01:42:55,440
with a reasonable complexity

2596
01:42:55,440 --> 01:42:57,119
this is interesting because it shows

2597
01:42:57,119 --> 01:42:58,960
independent analysis so this is an

2598
01:42:58,960 --> 01:43:01,520
attack in which you vary the iv with

2599
01:43:01,520 --> 01:43:03,280
chosen iv attacks

2600
01:43:03,280 --> 01:43:04,800
but we also want to point out that if

2601
01:43:04,800 --> 01:43:06,639
you take four or five rounds out of ten

2602
01:43:06,639 --> 01:43:08,800
of aes there is also quite efficient

2603
01:43:08,800 --> 01:43:10,320
attacks so we think this is normal that

2604
01:43:10,320 --> 01:43:11,920
in the as base scheme

2605
01:43:11,920 --> 01:43:13,440
if you have only four or five rounds

2606
01:43:13,440 --> 01:43:15,119
that there is an efficient attack this

2607
01:43:15,119 --> 01:43:17,119
is not a reason at all for concern it

2608
01:43:17,119 --> 01:43:18,639
will be very hard to scale up those

2609
01:43:18,639 --> 01:43:21,840
attacks as for aes

2610
01:43:21,840 --> 01:43:23,520
and finally performance the scheme is

2611
01:43:23,520 --> 01:43:25,199
highly paralyzable online for encryption

2612
01:43:25,199 --> 01:43:27,199
and can make optimal use of the aes

2613
01:43:27,199 --> 01:43:28,320
instructions

2614
01:43:28,320 --> 01:43:30,239
i'll just show you some benchmark

2615
01:43:30,239 --> 01:43:32,000
numbers on the next slide

2616
01:43:32,000 --> 01:43:33,040
um

2617
01:43:33,040 --> 01:43:34,800
so intel skylake

2618
01:43:34,800 --> 01:43:37,119
as you see on the bottom

2619
01:43:37,119 --> 01:43:39,199
the speed goes up a lot this is cycles

2620
01:43:39,199 --> 01:43:41,360
per byte so the smaller the faster uh

2621
01:43:41,360 --> 01:43:44,400
once you go below one above 1k messages

2622
01:43:44,400 --> 01:43:46,080
i zoomed in

2623
01:43:46,080 --> 01:43:48,960
on the top and there you see that it's

2624
01:43:48,960 --> 01:43:52,080
about twice as fast as gcm it goes down

2625
01:43:52,080 --> 01:43:52,800
to

2626
01:43:52,800 --> 01:43:54,560
the number i promise you point to

2627
01:43:54,560 --> 01:43:55,679
something

2628
01:43:55,679 --> 01:43:59,280
to five cycles per byte we have

2629
01:43:59,280 --> 01:44:01,360
similar results um

2630
01:44:01,360 --> 01:44:03,679
for arm which i will skip and i conclude

2631
01:44:03,679 --> 01:44:05,360
here now

2632
01:44:05,360 --> 01:44:07,360
so saying that each is a very simple

2633
01:44:07,360 --> 01:44:10,719
design that is a variant for 128 bit

2634
01:44:10,719 --> 01:44:13,040
increasing bit security it's also easy

2635
01:44:13,040 --> 01:44:14,960
to analyze easy to implement and it

2636
01:44:14,960 --> 01:44:17,760
offers a very high security level the

2637
01:44:17,760 --> 01:44:19,520
design is targeted

2638
01:44:19,520 --> 01:44:21,199
for platform with aes support but would

2639
01:44:21,199 --> 01:44:22,880
also be implemented efficiently if there

2640
01:44:22,880 --> 01:44:25,199
is no such support and so there has been

2641
01:44:25,199 --> 01:44:26,800
quite some scrutiny

2642
01:44:26,800 --> 01:44:28,719
and so far all the attacks give us

2643
01:44:28,719 --> 01:44:31,119
confidence is really highly secure

2644
01:44:31,119 --> 01:44:35,000
cipher thank you very much

2645
01:44:36,560 --> 01:44:38,719
all right have any quick questions

2646
01:44:38,719 --> 01:44:41,719
comments

2647
01:44:48,239 --> 01:44:50,879
christopher

2648
01:44:51,840 --> 01:44:53,040
uh

2649
01:44:53,040 --> 01:44:54,159
uh no

2650
01:44:54,159 --> 01:44:55,040
no

2651
01:44:55,040 --> 01:44:57,119
question really i just wanted to say i

2652
01:44:57,119 --> 01:44:59,440
think aegis is a beautiful construction

2653
01:44:59,440 --> 01:45:01,040
and i would love to see it standardized

2654
01:45:01,040 --> 01:45:02,400
so i absolutely

2655
01:45:02,400 --> 01:45:04,400
support

2656
01:45:04,400 --> 01:45:08,799
the work uh cfrg working on a draft

2657
01:45:09,760 --> 01:45:11,840
thank you

2658
01:45:11,840 --> 01:45:14,719
okay armando

2659
01:45:14,719 --> 01:45:16,560
hello so

2660
01:45:16,560 --> 01:45:18,320
i i just want to know how does it

2661
01:45:18,320 --> 01:45:22,480
compare with other lightweight ciphers

2662
01:45:22,800 --> 01:45:24,800
well each is not exactly lightweight

2663
01:45:24,800 --> 01:45:26,400
it's a high speed design there is a nist

2664
01:45:26,400 --> 01:45:28,560
lightweight competition going on and we

2665
01:45:28,560 --> 01:45:29,920
didn't submit it there because we didn't

2666
01:45:29,920 --> 01:45:31,440
think it fitted there

2667
01:45:31,440 --> 01:45:32,880
it's really more like a high performance

2668
01:45:32,880 --> 01:45:34,000
design

2669
01:45:34,000 --> 01:45:35,440
and nist has announced that they will

2670
01:45:35,440 --> 01:45:37,119
complete the competition soon but there

2671
01:45:37,119 --> 01:45:39,040
is no results there

2672
01:45:39,040 --> 01:45:41,119
um so

2673
01:45:41,119 --> 01:45:42,639
i think in general it's definitely one

2674
01:45:42,639 --> 01:45:43,920
of the faster designs there have been

2675
01:45:43,920 --> 01:45:46,159
some more recent papers

2676
01:45:46,159 --> 01:45:48,320
trying to do further optimizations but i

2677
01:45:48,320 --> 01:45:50,639
think those would definitely need

2678
01:45:50,639 --> 01:45:52,800
another five to eight years of analysis

2679
01:45:52,800 --> 01:45:54,960
before they can be adopted

2680
01:45:54,960 --> 01:45:56,080
but there is

2681
01:45:56,080 --> 01:45:57,520
there is extensive benchmarking

2682
01:45:57,520 --> 01:45:58,639
available

2683
01:45:58,639 --> 01:46:00,000
i only showed you

2684
01:46:00,000 --> 01:46:01,600
some brief details

2685
01:46:01,600 --> 01:46:03,360
but it's clearly it's also faster than

2686
01:46:03,360 --> 01:46:04,960
ocb

2687
01:46:04,960 --> 01:46:06,560
and it's faster than any other cypher

2688
01:46:06,560 --> 01:46:09,280
that has this kind of scrutiny

2689
01:46:09,280 --> 01:46:12,920
okay thank you

2690
01:46:15,520 --> 01:46:17,360
um uh thanks for the presentation and

2691
01:46:17,360 --> 01:46:19,440
perhaps i missed it um but i'm wondering

2692
01:46:19,440 --> 01:46:21,440
if you can comment on the um sort of

2693
01:46:21,440 --> 01:46:23,119
non-story use properties of this

2694
01:46:23,119 --> 01:46:25,280
particular variant

2695
01:46:25,280 --> 01:46:28,239
so each is is vulnerable against noise

2696
01:46:28,239 --> 01:46:30,159
release by design um it's better than

2697
01:46:30,159 --> 01:46:32,719
gcm in gcm with one nonce you lose your

2698
01:46:32,719 --> 01:46:34,159
authentication key and you have a big

2699
01:46:34,159 --> 01:46:36,880
problem uh in aegis it's clear that

2700
01:46:36,880 --> 01:46:38,400
there is a paper that was actually in

2701
01:46:38,400 --> 01:46:39,920
our written design document the details

2702
01:46:39,920 --> 01:46:41,119
were not worked out but the paper has

2703
01:46:41,119 --> 01:46:42,880
shown is it needed 15

2704
01:46:42,880 --> 01:46:44,159
users of one month and then you can

2705
01:46:44,159 --> 01:46:46,560
recover the state now this is a design

2706
01:46:46,560 --> 01:46:48,719
decision we believe that if you want to

2707
01:46:48,719 --> 01:46:50,480
be resistant against this you need two

2708
01:46:50,480 --> 01:46:52,639
passes or you need lower performance we

2709
01:46:52,639 --> 01:46:53,520
don't think you can achieve this

2710
01:46:53,520 --> 01:46:55,840
performance for an on-to-use

2711
01:46:55,840 --> 01:46:57,520
scheme so we

2712
01:46:57,520 --> 01:46:58,960
warn inventors

2713
01:46:58,960 --> 01:47:00,719
implementers for this is also clearly

2714
01:47:00,719 --> 01:47:02,080
pointed out in the draft that you have

2715
01:47:02,080 --> 01:47:03,840
to be careful just as for

2716
01:47:03,840 --> 01:47:07,360
gcm that you don't reuse your nuts

2717
01:47:07,360 --> 01:47:09,040
and luckily the consequences are not as

2718
01:47:09,040 --> 01:47:11,440
bad as for gcm

2719
01:47:11,440 --> 01:47:14,239
okay thank you

2720
01:47:16,639 --> 01:47:19,040
but do you have any requests from

2721
01:47:19,040 --> 01:47:21,920
for cfrg is it for our information for

2722
01:47:21,920 --> 01:47:23,199
now or

2723
01:47:23,199 --> 01:47:25,440
do you want this to be adopted

2724
01:47:25,440 --> 01:47:27,360
i guess this is i guess we wanted to

2725
01:47:27,360 --> 01:47:28,639
introduce it at least because i'm not

2726
01:47:28,639 --> 01:47:30,080
sure it had been discussed before and i

2727
01:47:30,080 --> 01:47:32,000
think it's we seem to get some good

2728
01:47:32,000 --> 01:47:33,440
feedback we would like to get feedback

2729
01:47:33,440 --> 01:47:34,800
and of course if there is consideration

2730
01:47:34,800 --> 01:47:36,639
for adoption we definitely would support

2731
01:47:36,639 --> 01:47:40,960
that all right okay thank you

2732
01:47:46,880 --> 01:47:49,440
all right thank you very much let's

2733
01:47:49,440 --> 01:47:52,320
move on to the

2734
01:47:56,480 --> 01:47:58,718
oh

2735
01:48:03,199 --> 01:48:05,839
okay

2736
01:48:07,440 --> 01:48:08,880
then

2737
01:48:08,880 --> 01:48:11,840
okay hold on

2738
01:48:16,320 --> 01:48:20,159
i will just drive right yeah please

2739
01:48:20,639 --> 01:48:22,800
okay thank you uh

2740
01:48:22,800 --> 01:48:24,000
we're just

2741
01:48:24,000 --> 01:48:25,840
okay there we go

2742
01:48:25,840 --> 01:48:28,080
rock and roll uh uh i'm dan harkin so

2743
01:48:28,080 --> 01:48:30,239
this is a proposal for uh

2744
01:48:30,239 --> 01:48:32,320
making some uh changes to hpk or

2745
01:48:32,320 --> 01:48:35,040
additions to hpke so next slide please

2746
01:48:35,040 --> 01:48:38,159
us it was recently published as rfc 9180

2747
01:48:38,159 --> 01:48:39,360
and i saw i think it's a good time to

2748
01:48:39,360 --> 01:48:41,840
make this ask again uh the issue is that

2749
01:48:41,840 --> 01:48:44,320
hpk is is a really nice construct and i

2750
01:48:44,320 --> 01:48:45,679
like it a lot but it doesn't work for

2751
01:48:45,679 --> 01:48:48,320
some use cases for instance for devices

2752
01:48:48,320 --> 01:48:49,600
are operating in a constrained

2753
01:48:49,600 --> 01:48:51,760
environment uh the serialization and

2754
01:48:51,760 --> 01:48:55,360
deserialization for the uh nist keys is

2755
01:48:55,360 --> 01:48:57,280
over twice as long as it needs to be and

2756
01:48:57,280 --> 01:49:00,000
so i'm proposing that we could uh

2757
01:49:00,000 --> 01:49:02,480
address that by using the rfc 6090

2758
01:49:02,480 --> 01:49:04,480
compact output serialization

2759
01:49:04,480 --> 01:49:06,320
another issue that uh

2760
01:49:06,320 --> 01:49:08,560
i have with hpk is that it is it doesn't

2761
01:49:08,560 --> 01:49:10,239
work on lossy networks it assumes that

2762
01:49:10,239 --> 01:49:12,000
there is guaranteed and order delivery

2763
01:49:12,000 --> 01:49:13,599
of of all the packets that are being

2764
01:49:13,599 --> 01:49:16,880
used and uh that's because the sequence

2765
01:49:16,880 --> 01:49:18,960
counter that's being used with the the

2766
01:49:18,960 --> 01:49:20,880
aead cipher is completely inside of the

2767
01:49:20,880 --> 01:49:23,119
context then the the user has no ability

2768
01:49:23,119 --> 01:49:24,000
to

2769
01:49:24,000 --> 01:49:26,239
to know what the sequence number is or

2770
01:49:26,239 --> 01:49:27,440
to have any control over it so if

2771
01:49:27,440 --> 01:49:29,840
there's any uh packet loss or packer

2772
01:49:29,840 --> 01:49:31,520
reordering uh the center and receiver

2773
01:49:31,520 --> 01:49:32,560
get out of sync and everything just

2774
01:49:32,560 --> 01:49:33,760
falls apart

2775
01:49:33,760 --> 01:49:36,400
uh and since the internet does not

2776
01:49:36,400 --> 01:49:37,760
provide guaranteed or delivery of

2777
01:49:37,760 --> 01:49:39,119
packets i think that this is a problem

2778
01:49:39,119 --> 01:49:40,800
we should we should address so for the

2779
01:49:40,800 --> 01:49:42,400
first one it's pretty easy to we can

2780
01:49:42,400 --> 01:49:43,840
solve that by just assigning some new

2781
01:49:43,840 --> 01:49:46,719
chems that do a compact serialization uh

2782
01:49:46,719 --> 01:49:48,639
but for the second problem next slide

2783
01:49:48,639 --> 01:49:49,920
please

2784
01:49:49,920 --> 01:49:52,239
i have a couple of proposals one of them

2785
01:49:52,239 --> 01:49:53,840
is uh

2786
01:49:53,840 --> 01:49:56,560
we can use a deterministic aead and not

2787
01:49:56,560 --> 01:49:58,320
worry about the nonce if the the nonce

2788
01:49:58,320 --> 01:50:00,159
is causing problems then let's just use

2789
01:50:00,159 --> 01:50:01,199
something that doesn't care about a

2790
01:50:01,199 --> 01:50:05,119
nonce like uh siv uh now of course siv

2791
01:50:05,119 --> 01:50:07,199
has problems uh

2792
01:50:07,199 --> 01:50:09,920
uh regarding some of the security of of

2793
01:50:09,920 --> 01:50:12,320
the deterministic mode uh but you can

2794
01:50:12,320 --> 01:50:14,400
achieve semantic security with siv if

2795
01:50:14,400 --> 01:50:17,199
the plaintext carries enough probabilism

2796
01:50:17,199 --> 01:50:18,239
that the nonce normally would have

2797
01:50:18,239 --> 01:50:22,080
provided in a a normal aed scheme

2798
01:50:22,080 --> 01:50:24,400
so for certain situations where you can

2799
01:50:24,400 --> 01:50:25,760
have that guarantee i think a

2800
01:50:25,760 --> 01:50:28,159
deterministic ead mode of hpke would be

2801
01:50:28,159 --> 01:50:30,960
acceptable if not uh what we could do is

2802
01:50:30,960 --> 01:50:34,159
use a rolling replay window uh analogous

2803
01:50:34,159 --> 01:50:37,280
to what was done with ipsec and rfc 2401

2804
01:50:37,280 --> 01:50:40,800
where you've got a bitmap of received uh

2805
01:50:40,800 --> 01:50:43,199
received packets and that allows you to

2806
01:50:43,199 --> 01:50:46,320
receive them uh out of order and uh some

2807
01:50:46,320 --> 01:50:48,719
can get dropped uh packets that are way

2808
01:50:48,719 --> 01:50:50,719
too old will get thrown on the floor and

2809
01:50:50,719 --> 01:50:53,040
the the window

2810
01:50:53,040 --> 01:50:55,520
advances as you you uh you verify

2811
01:50:55,520 --> 01:50:57,280
receive packets

2812
01:50:57,280 --> 01:50:59,280
of course this requires access to the

2813
01:50:59,280 --> 01:51:01,199
sequence number the receiver has to know

2814
01:51:01,199 --> 01:51:02,719
what the sequence number is to determine

2815
01:51:02,719 --> 01:51:04,560
whether it's valid in the receive window

2816
01:51:04,560 --> 01:51:06,400
or not so that would require us to

2817
01:51:06,400 --> 01:51:09,599
export the uh four octet sequence number

2818
01:51:09,599 --> 01:51:11,760
uh into the ciphertext

2819
01:51:11,760 --> 01:51:13,920
uh this shouldn't be a problem because

2820
01:51:13,920 --> 01:51:15,280
uh that information would already be

2821
01:51:15,280 --> 01:51:16,719
down to any sort of attacker who can

2822
01:51:16,719 --> 01:51:17,760
count

2823
01:51:17,760 --> 01:51:19,440
and we're not going to be exporting the

2824
01:51:19,440 --> 01:51:21,119
uh the secret knots we're just going to

2825
01:51:21,119 --> 01:51:22,480
be exporting the four octet sequence

2826
01:51:22,480 --> 01:51:24,800
number that gets xored onto that thing

2827
01:51:24,800 --> 01:51:27,440
so next slide please

2828
01:51:27,440 --> 01:51:30,159
so what i'm asking for is uh

2829
01:51:30,159 --> 01:51:31,760
three things i want to add

2830
01:51:31,760 --> 01:51:33,920
new chems for the nist curves that do

2831
01:51:33,920 --> 01:51:35,679
compact serialization

2832
01:51:35,679 --> 01:51:37,920
i'd like to add support for aes siv as a

2833
01:51:37,920 --> 01:51:41,679
deterministic uh cipher mode in hpke and

2834
01:51:41,679 --> 01:51:44,480
for the situations where aes siv would

2835
01:51:44,480 --> 01:51:46,080
not be appropriate on velocity networks

2836
01:51:46,080 --> 01:51:48,480
i'd like to uh have a

2837
01:51:48,480 --> 01:51:50,719
defined way to use uh

2838
01:51:50,719 --> 01:51:54,159
a rfc 2401 style replay window to deal

2839
01:51:54,159 --> 01:51:57,520
with uh packet loss and reordering

2840
01:51:57,520 --> 01:51:59,599
next slide please

2841
01:51:59,599 --> 01:52:00,400
uh

2842
01:52:00,400 --> 01:52:03,040
i do have a draft it's in the 01 version

2843
01:52:03,040 --> 01:52:05,040
uh please take a look uh and i also have

2844
01:52:05,040 --> 01:52:06,800
running code if you want to take a look

2845
01:52:06,800 --> 01:52:10,000
at my github uh there's a hpke wrap it's

2846
01:52:10,000 --> 01:52:12,560
fully compliant with rsc2401 it handles

2847
01:52:12,560 --> 01:52:14,400
all of their test vectors

2848
01:52:14,400 --> 01:52:16,800
but i also added uh additional test

2849
01:52:16,800 --> 01:52:19,119
vectors to do compact representation

2850
01:52:19,119 --> 01:52:22,239
with uh new chems and uh authenticated

2851
01:52:22,239 --> 01:52:23,679
and deterministic authenticated

2852
01:52:23,679 --> 01:52:26,239
encryption with siv i just basically

2853
01:52:26,239 --> 01:52:27,119
stole

2854
01:52:27,119 --> 01:52:29,679
a couple of values from the the reserved

2855
01:52:29,679 --> 01:52:31,840
number space uh

2856
01:52:31,840 --> 01:52:32,880
but

2857
01:52:32,880 --> 01:52:34,400
hopefully that won't be a problem

2858
01:52:34,400 --> 01:52:36,000
uh so

2859
01:52:36,000 --> 01:52:38,000
please take a look uh next slide please

2860
01:52:38,000 --> 01:52:40,000
so we have running code and i hope uh we

2861
01:52:40,000 --> 01:52:42,400
can get rough consensus to

2862
01:52:42,400 --> 01:52:45,839
adopt this as a work item

2863
01:52:47,679 --> 01:52:50,480
okay stephen

2864
01:52:52,719 --> 01:52:55,199
all right see a couple of comments uh

2865
01:52:55,199 --> 01:52:58,880
one is there's with 9180

2866
01:52:58,880 --> 01:53:00,719
when i combine all the cams and kdfs and

2867
01:53:00,719 --> 01:53:03,440
so on i have 480 different combinations

2868
01:53:03,440 --> 01:53:04,639
of algorithm

2869
01:53:04,639 --> 01:53:05,520
so

2870
01:53:05,520 --> 01:53:07,920
there's already a lot however

2871
01:53:07,920 --> 01:53:10,239
these seem like reasonable changes

2872
01:53:10,239 --> 01:53:11,280
um

2873
01:53:11,280 --> 01:53:14,719
the other comment i have is

2874
01:53:15,199 --> 01:53:18,239
maybe hpk should be thought of as moving

2875
01:53:18,239 --> 01:53:20,960
from cfrg to an ietf context

2876
01:53:20,960 --> 01:53:22,639
because the

2877
01:53:22,639 --> 01:53:24,719
perhaps the part where we needed cfrg

2878
01:53:24,719 --> 01:53:27,840
expertise is in the past

2879
01:53:27,840 --> 01:53:30,159
and these kind of changes seem like more

2880
01:53:30,159 --> 01:53:32,400
engineering changes than

2881
01:53:32,400 --> 01:53:34,480
cfrg like changes i i'm not i wouldn't

2882
01:53:34,480 --> 01:53:36,320
be too focused on it but

2883
01:53:36,320 --> 01:53:37,679
just for you know things like you know

2884
01:53:37,679 --> 01:53:38,880
changing the

2885
01:53:38,880 --> 01:53:41,760
um the points representations

2886
01:53:41,760 --> 01:53:42,960
that's like a

2887
01:53:42,960 --> 01:53:45,440
yeah that shouldn't require you know so

2888
01:53:45,440 --> 01:53:47,280
you're saying dispatch me to sex

2889
01:53:47,280 --> 01:53:49,840
dispatch basically

2890
01:53:49,840 --> 01:53:51,760
no i'm not i'm not recommending that it

2891
01:53:51,760 --> 01:53:53,360
just occurs to me that that might start

2892
01:53:53,360 --> 01:53:55,360
to make sense because maybe the you know

2893
01:53:55,360 --> 01:53:57,520
maybe the cryptographic bits of this are

2894
01:53:57,520 --> 01:53:58,239
are

2895
01:53:58,239 --> 01:54:00,400
mostly done and it's more about kind of

2896
01:54:00,400 --> 01:54:02,239
engineering at this stage fair comment

2897
01:54:02,239 --> 01:54:03,440
um

2898
01:54:03,440 --> 01:54:04,960
and then i actually have one question is

2899
01:54:04,960 --> 01:54:06,320
so does your code now include the kind

2900
01:54:06,320 --> 01:54:09,040
of uh x2559

2901
01:54:09,040 --> 01:54:10,719
no okay so it's it's just the nitch

2902
01:54:10,719 --> 01:54:13,760
curves for now still yeah okay cool uh

2903
01:54:13,760 --> 01:54:16,880
well otherwise i

2904
01:54:16,960 --> 01:54:18,480
i'd be supportive of this happening i

2905
01:54:18,480 --> 01:54:20,480
i'd probably be a little bit happier if

2906
01:54:20,480 --> 01:54:21,840
it didn't happen

2907
01:54:21,840 --> 01:54:23,360
immediately uh

2908
01:54:23,360 --> 01:54:24,400
i don't know i don't know i have to

2909
01:54:24,400 --> 01:54:26,159
think about it

2910
01:54:26,159 --> 01:54:28,159
happening is doing it sometime yes maybe

2911
01:54:28,159 --> 01:54:30,080
here maybe elsewhere

2912
01:54:30,080 --> 01:54:31,040
okay

2913
01:54:31,040 --> 01:54:32,159
all right thank you

2914
01:54:32,159 --> 01:54:35,799
okay chris

2915
01:54:36,719 --> 01:54:38,560
uh yeah thanks dan um

2916
01:54:38,560 --> 01:54:40,480
uh i also think that these are perfectly

2917
01:54:40,480 --> 01:54:44,400
fine um additions um well the the

2918
01:54:44,400 --> 01:54:45,360
the chem

2919
01:54:45,360 --> 01:54:47,599
uh with the different uh

2920
01:54:47,599 --> 01:54:49,520
compressed format is a fine addition i'm

2921
01:54:49,520 --> 01:54:50,320
a little bit concerned about the

2922
01:54:50,320 --> 01:54:52,080
deterministic aad

2923
01:54:52,080 --> 01:54:53,440
and the implications it has on how you

2924
01:54:53,440 --> 01:54:54,480
use it

2925
01:54:54,480 --> 01:54:55,679
um

2926
01:54:55,679 --> 01:54:58,400
so i prefer uh well i i'm less less

2927
01:54:58,400 --> 01:54:59,920
supportive of that

2928
01:54:59,920 --> 01:55:00,880
um

2929
01:55:00,880 --> 01:55:03,840
but i guess as i met a comment this is

2930
01:55:03,840 --> 01:55:05,360
our question this is not directly to you

2931
01:55:05,360 --> 01:55:07,040
but more for the chairs i'm realizing

2932
01:55:07,040 --> 01:55:08,000
now that we don't really have

2933
01:55:08,000 --> 01:55:10,560
established any designated reviewers or

2934
01:55:10,560 --> 01:55:14,719
experts to review these ayanna registry

2935
01:55:14,719 --> 01:55:16,480
editions

2936
01:55:16,480 --> 01:55:19,119
the the registry policy for editing

2937
01:55:19,119 --> 01:55:21,440
anything any new chem aad or kdf is

2938
01:55:21,440 --> 01:55:23,920
specific specification required which

2939
01:55:23,920 --> 01:55:25,920
doesn't require this to be published or

2940
01:55:25,920 --> 01:55:27,360
adopted or anything it just requires a

2941
01:55:27,360 --> 01:55:29,760
document to exist and that approval from

2942
01:55:29,760 --> 01:55:32,639
um one of the experts uh

2943
01:55:32,639 --> 01:55:33,920
so

2944
01:55:33,920 --> 01:55:36,080
do we need to establish experts to

2945
01:55:36,080 --> 01:55:38,159
review these requests so that we can get

2946
01:55:38,159 --> 01:55:39,280
dan's

2947
01:55:39,280 --> 01:55:43,040
algorithms in the registry

2948
01:55:43,040 --> 01:55:46,719
so yeah typically what happens is ayanna

2949
01:55:46,719 --> 01:55:51,040
asks for experts on first request

2950
01:55:51,040 --> 01:55:52,000
so

2951
01:55:52,000 --> 01:55:53,920
i suppose that's kind of constitute the

2952
01:55:53,920 --> 01:55:57,520
first request so yeah

2953
01:55:58,639 --> 01:56:00,560
can you

2954
01:56:00,560 --> 01:56:02,719
email chair as a reminder to just double

2955
01:56:02,719 --> 01:56:04,639
check and investigate this

2956
01:56:04,639 --> 01:56:07,520
specific question okay sure sure

2957
01:56:07,520 --> 01:56:08,400
um

2958
01:56:08,400 --> 01:56:09,679
yeah

2959
01:56:09,679 --> 01:56:12,080
for example as well yeah but this would

2960
01:56:12,080 --> 01:56:13,599
be the specification that didn't would

2961
01:56:13,599 --> 01:56:14,880
be required right i mean the

2962
01:56:14,880 --> 01:56:16,239
specification required there has to be

2963
01:56:16,239 --> 01:56:17,920
some

2964
01:56:17,920 --> 01:56:20,239
published document yes

2965
01:56:20,239 --> 01:56:22,560
yes but it doesn't have to be it can be

2966
01:56:22,560 --> 01:56:24,800
like independent stream or

2967
01:56:24,800 --> 01:56:27,199
itf stream or

2968
01:56:27,199 --> 01:56:29,520
doesn't even have to be an rfc okay i

2969
01:56:29,520 --> 01:56:31,679
think

2970
01:56:34,480 --> 01:56:36,719
right richard i don't know which is

2971
01:56:36,719 --> 01:56:39,840
slightly more controversial but you know

2972
01:56:39,840 --> 01:56:43,440
some people tend to think that's okay

2973
01:56:43,440 --> 01:56:46,080
i'm well

2974
01:56:46,080 --> 01:56:47,920
well

2975
01:56:47,920 --> 01:56:49,840
if there is enough support to do this it

2976
01:56:49,840 --> 01:56:52,560
seems like it's a relatively simple and

2977
01:56:52,560 --> 01:56:55,520
smallish document so we should just

2978
01:56:55,520 --> 01:56:58,639
um already done like

2979
01:56:58,639 --> 01:57:00,880
you know extra lms extensions for

2980
01:57:00,880 --> 01:57:04,159
example i i think

2981
01:57:04,320 --> 01:57:07,360
without consulting with micro chairs

2982
01:57:07,360 --> 01:57:10,239
um i think the bar for uh reasonable

2983
01:57:10,239 --> 01:57:11,920
extensions is a bit

2984
01:57:11,920 --> 01:57:13,199
lower

2985
01:57:13,199 --> 01:57:14,560
okay so if there is enough interest

2986
01:57:14,560 --> 01:57:16,560
let's let's do that

2987
01:57:16,560 --> 01:57:17,599
um

2988
01:57:17,599 --> 01:57:19,520
christopher

2989
01:57:19,520 --> 01:57:20,800
yeah i just wanted to say that was

2990
01:57:20,800 --> 01:57:21,840
specifically why we went with

2991
01:57:21,840 --> 01:57:23,920
specification required for the policy so

2992
01:57:23,920 --> 01:57:25,280
that you don't have to go through the

2993
01:57:25,280 --> 01:57:27,599
whole process of publishing an rc just

2994
01:57:27,599 --> 01:57:29,040
to get something in the registry to make

2995
01:57:29,040 --> 01:57:32,719
it easy um to add new things

2996
01:57:34,639 --> 01:57:36,239
so less work overall for everyone but i

2997
01:57:36,239 --> 01:57:38,639
will i will email the chairs um and see

2998
01:57:38,639 --> 01:57:40,400
if we can get the designated experts set

2999
01:57:40,400 --> 01:57:41,040
up

3000
01:57:41,040 --> 01:57:42,719
okay

3001
01:57:42,719 --> 01:57:45,119
thank you

3002
01:57:46,320 --> 01:57:48,639
okay

3003
01:57:48,639 --> 01:57:51,440
said it um i think that's we had another

3004
01:57:51,440 --> 01:57:53,360
christopher in there didn't we

3005
01:57:53,360 --> 01:57:57,520
uh he just took himself off all right um

3006
01:57:57,520 --> 01:58:01,360
great we have three minutes left and

3007
01:58:01,360 --> 01:58:03,920
chris uh sacrificed one of his

3008
01:58:03,920 --> 01:58:05,760
presentations who basically used up all

3009
01:58:05,760 --> 01:58:07,760
of this time so i don't think

3010
01:58:07,760 --> 01:58:10,159
there is a point

3011
01:58:10,159 --> 01:58:11,760
unless you want to say a few words very

3012
01:58:11,760 --> 01:58:14,000
quickly

3013
01:58:14,000 --> 01:58:16,239
yeah thanks um uh

3014
01:58:16,239 --> 01:58:18,719
yeah there's definitely not time um

3015
01:58:18,719 --> 01:58:20,719
try to give it just a brief summary of

3016
01:58:20,719 --> 01:58:23,599
what i was going to talk about um

3017
01:58:23,599 --> 01:58:24,880
uh it was mostly going to be a

3018
01:58:24,880 --> 01:58:26,400
reflection on you know the documents

3019
01:58:26,400 --> 01:58:29,119
that the cfrg is producing right now um

3020
01:58:29,119 --> 01:58:31,040
and has produced in the past and their

3021
01:58:31,040 --> 01:58:34,080
sort of uh importance in the community

3022
01:58:34,080 --> 01:58:36,400
um in particular the itf community and

3023
01:58:36,400 --> 01:58:39,040
how they use cfrg specifications for

3024
01:58:39,040 --> 01:58:41,280
specifying protocols conducting security

3025
01:58:41,280 --> 01:58:42,800
analysis and whatnot

3026
01:58:42,800 --> 01:58:44,080
um

3027
01:58:44,080 --> 01:58:46,639
trying to point out that there are um

3028
01:58:46,639 --> 01:58:47,760
there's probably a number of ways in

3029
01:58:47,760 --> 01:58:50,320
which we can improve as a group um the

3030
01:58:50,320 --> 01:58:51,840
output of the documents in terms of

3031
01:58:51,840 --> 01:58:53,920
clarity consistency and uh and

3032
01:58:53,920 --> 01:58:55,280
correctness

3033
01:58:55,280 --> 01:58:58,800
um and it's kind of a plea uh for you

3034
01:58:58,800 --> 01:59:00,840
know people to

3035
01:59:00,840 --> 01:59:03,360
um for volunteers who are interested in

3036
01:59:03,360 --> 01:59:04,080
like

3037
01:59:04,080 --> 01:59:06,080
sort of the editorial production of

3038
01:59:06,080 --> 01:59:09,199
these documents to um

3039
01:59:09,199 --> 01:59:11,520
uh brainstorm things that can be done to

3040
01:59:11,520 --> 01:59:14,320
improve document quality be it with

3041
01:59:14,320 --> 01:59:16,239
respect to the pseudo code that's

3042
01:59:16,239 --> 01:59:18,000
produced

3043
01:59:18,000 --> 01:59:19,920
the terminology that's used in the

3044
01:59:19,920 --> 01:59:22,080
documents

3045
01:59:22,080 --> 01:59:24,000
you name it

3046
01:59:24,000 --> 01:59:24,960
and

3047
01:59:24,960 --> 01:59:25,760
up

3048
01:59:25,760 --> 01:59:27,840
won't go in the slides or anything but

3049
01:59:27,840 --> 01:59:30,159
i'll try to summarize uh and send a

3050
01:59:30,159 --> 01:59:32,400
message to the list um because i think

3051
01:59:32,400 --> 01:59:34,239
there's there's something we can be done

3052
01:59:34,239 --> 01:59:36,719
that can be done here um

3053
01:59:36,719 --> 01:59:37,760
and um

3054
01:59:37,760 --> 01:59:39,280
that's it

3055
01:59:39,280 --> 01:59:42,400
thank you thank you very much

3056
01:59:43,199 --> 01:59:44,560
all right and

3057
01:59:44,560 --> 01:59:45,760
with this

3058
01:59:45,760 --> 01:59:48,000
we have one minute left

3059
01:59:48,000 --> 01:59:49,679
which i give

3060
01:59:49,679 --> 01:59:51,280
back to you

3061
01:59:51,280 --> 01:59:54,159
thank you for coming

3062
01:59:54,320 --> 01:59:55,840
and uh

3063
01:59:55,840 --> 01:59:59,599
see you online and hopefully again

3064
01:59:59,599 --> 02:00:02,239
next time

3065
02:00:03,040 --> 02:00:04,880
at least hybrid

3066
02:00:04,880 --> 02:00:06,400
meeting maybe even

3067
02:00:06,400 --> 02:00:09,280
fully fledged one

3068
02:00:11,520 --> 02:00:14,920
thank you goodbye

3069
02:00:33,280 --> 02:00:36,280
uh

3070
02:00:49,520 --> 02:00:52,520
yes

3071
02:00:54,320 --> 02:00:57,320
yes

