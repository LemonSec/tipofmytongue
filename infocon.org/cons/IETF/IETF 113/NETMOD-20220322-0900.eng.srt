1
00:00:05,040 --> 00:00:05,920
normal

2
00:00:05,920 --> 00:00:09,280
like pre-covered ietf

3
00:00:09,280 --> 00:00:10,960
they're confusing hard time believing

4
00:00:10,960 --> 00:00:13,040
but then i think they're uh they're

5
00:00:13,040 --> 00:00:15,120
looking at the total attendance remote

6
00:00:15,120 --> 00:00:19,840
and so we're at the top of the hour

7
00:00:19,840 --> 00:00:23,680
okay so we click started

8
00:00:24,480 --> 00:00:26,960
we definitely have less people in the

9
00:00:26,960 --> 00:00:29,119
room physically and virtually than

10
00:00:29,119 --> 00:00:33,680
normal but uh welcome to netmod at ietf

11
00:00:33,680 --> 00:00:35,200
113.

12
00:00:35,200 --> 00:00:39,200
um you have the chairs myself lou berger

13
00:00:39,200 --> 00:00:42,320
uh kent watson and joel juggling and in

14
00:00:42,320 --> 00:00:45,120
the room we have charles eckel who's uh

15
00:00:45,120 --> 00:00:48,320
volunteered to help us out um uh it

16
00:00:48,320 --> 00:00:49,760
doesn't look like he's gonna have too

17
00:00:49,760 --> 00:00:52,559
many people in there to uh

18
00:00:52,559 --> 00:00:55,199
to manage but we appreciate the

19
00:00:55,199 --> 00:00:58,760
help very much

20
00:00:59,199 --> 00:01:03,120
as this is the ietf we have our notewell

21
00:01:03,120 --> 00:01:06,720
which talks about um our rules governing

22
00:01:06,720 --> 00:01:09,360
our participation in these meetings in

23
00:01:09,360 --> 00:01:12,479
our mail lists and uh in the physical

24
00:01:12,479 --> 00:01:14,880
and virtual uh hallways

25
00:01:14,880 --> 00:01:16,560
and if you're unfamiliar with it please

26
00:01:16,560 --> 00:01:20,560
take a look at the uh note well

27
00:01:20,880 --> 00:01:23,920
and uh similarly we also have a code of

28
00:01:23,920 --> 00:01:26,159
conduct that talks about how we should

29
00:01:26,159 --> 00:01:27,520
treat each other

30
00:01:27,520 --> 00:01:31,679
professionally and with respect

31
00:01:32,479 --> 00:01:34,799
on the administrative side

32
00:01:34,799 --> 00:01:36,240
we are using

33
00:01:36,240 --> 00:01:38,560
meat echo for q control there actually

34
00:01:38,560 --> 00:01:40,479
is a nice slide for those who are local

35
00:01:40,479 --> 00:01:42,720
who that talks about how to do that but

36
00:01:42,720 --> 00:01:45,119
we're in the second day now and all

37
00:01:45,119 --> 00:01:46,720
three or four of you are professionals

38
00:01:46,720 --> 00:01:49,680
at this point at the new meat echo tool

39
00:01:49,680 --> 00:01:52,479
um for the rest of us uh

40
00:01:52,479 --> 00:01:54,720
you're hearing this so you've made it uh

41
00:01:54,720 --> 00:01:55,680
welcome

42
00:01:55,680 --> 00:01:59,520
uh i've put the note-taking link in uh

43
00:01:59,520 --> 00:02:01,759
the chat also there's a nice button for

44
00:02:01,759 --> 00:02:04,479
meet echo to take you there please uh

45
00:02:04,479 --> 00:02:06,479
jump on to that

46
00:02:06,479 --> 00:02:07,200
the

47
00:02:07,200 --> 00:02:09,919
hedge dock the notes page and help

48
00:02:09,919 --> 00:02:11,599
ensure that we capture

49
00:02:11,599 --> 00:02:13,360
um any of the

50
00:02:13,360 --> 00:02:14,640
discussion in the meeting you don't have

51
00:02:14,640 --> 00:02:16,959
to capture all the presentation just the

52
00:02:16,959 --> 00:02:18,000
the

53
00:02:18,000 --> 00:02:20,160
discussions

54
00:02:20,160 --> 00:02:22,879
all material is posted and we're driving

55
00:02:22,879 --> 00:02:26,080
it from a presentation from that

56
00:02:26,080 --> 00:02:27,360
from the data tracker and from the

57
00:02:27,360 --> 00:02:28,319
material

58
00:02:28,319 --> 00:02:30,799
manager

59
00:02:32,400 --> 00:02:35,360
first up on our agenda is the important

60
00:02:35,360 --> 00:02:37,360
topic that we've been working about

61
00:02:37,360 --> 00:02:39,599
versioning and

62
00:02:39,599 --> 00:02:43,518
we've had two documents go through

63
00:02:43,840 --> 00:02:46,480
working group last call recently

64
00:02:46,480 --> 00:02:49,040
and we have another set of documents

65
00:02:49,040 --> 00:02:49,840
that

66
00:02:49,840 --> 00:02:51,840
we're hoping to last call soon but the

67
00:02:51,840 --> 00:02:53,040
authors tell us there's some issues to

68
00:02:53,040 --> 00:02:54,400
work through and that's what we'll be

69
00:02:54,400 --> 00:02:55,760
trying to do here

70
00:02:55,760 --> 00:02:57,200
um

71
00:02:57,200 --> 00:02:58,720
uh the

72
00:02:58,720 --> 00:03:01,760
uh if you look at the hedgehog

73
00:03:01,760 --> 00:03:04,319
you'll see that there's a version of a

74
00:03:04,319 --> 00:03:06,080
slightly modified version

75
00:03:06,080 --> 00:03:08,400
of the

76
00:03:08,400 --> 00:03:11,040
agenda in there and you'll see first up

77
00:03:11,040 --> 00:03:13,519
the overview is going to be covered by

78
00:03:13,519 --> 00:03:15,680
joe clark so that's the first dvd and

79
00:03:15,680 --> 00:03:17,360
then yang packages is going to be

80
00:03:17,360 --> 00:03:18,560
covered by

81
00:03:18,560 --> 00:03:21,760
uh by jean

82
00:03:22,480 --> 00:03:25,120
we have several

83
00:03:25,120 --> 00:03:26,720
non-chartered items as well and of

84
00:03:26,720 --> 00:03:27,680
course

85
00:03:27,680 --> 00:03:28,959
the the

86
00:03:28,959 --> 00:03:31,120
node tags which is the working group

87
00:03:31,120 --> 00:03:33,840
document

88
00:03:35,040 --> 00:03:36,720
since the last meeting

89
00:03:36,720 --> 00:03:38,159
we've had

90
00:03:38,159 --> 00:03:39,200
several

91
00:03:39,200 --> 00:03:41,360
rfcs published

92
00:03:41,360 --> 00:03:43,120
that's great after all that's why we're

93
00:03:43,120 --> 00:03:44,959
here is to get these documents through

94
00:03:44,959 --> 00:03:48,080
the process appreciate everyone who

95
00:03:48,080 --> 00:03:50,480
worked on it whether you were author

96
00:03:50,480 --> 00:03:53,439
contributor or just working group

97
00:03:53,439 --> 00:03:56,000
member who commented on it so thanks all

98
00:03:56,000 --> 00:03:57,439
um

99
00:03:57,439 --> 00:03:58,239
for

100
00:03:58,239 --> 00:03:59,840
getting us over the hurdle of getting

101
00:03:59,840 --> 00:04:03,439
those documents uh published

102
00:04:04,159 --> 00:04:06,239
we have uh

103
00:04:06,239 --> 00:04:08,959
two documents which are almost

104
00:04:08,959 --> 00:04:11,519
perpetually post last call waiting on a

105
00:04:11,519 --> 00:04:13,200
minor update

106
00:04:13,200 --> 00:04:16,238
uh and expired and i was gonna put the

107
00:04:16,238 --> 00:04:18,639
person the author on the spot i saw he

108
00:04:18,639 --> 00:04:20,478
was about to move

109
00:04:20,478 --> 00:04:22,240
uh maybe he wants to come to the mic and

110
00:04:22,240 --> 00:04:24,560
say something

111
00:04:24,560 --> 00:04:27,360
yes rob wilson cisco so yes i i had

112
00:04:27,360 --> 00:04:29,440
tried to find some a co-author to help

113
00:04:29,440 --> 00:04:31,520
with this um

114
00:04:31,520 --> 00:04:33,840
last late last year and that fell

115
00:04:33,840 --> 00:04:34,960
through and there's somebody else who's

116
00:04:34,960 --> 00:04:36,880
interested scott

117
00:04:36,880 --> 00:04:38,479
man um manson said he might be

118
00:04:38,479 --> 00:04:40,639
interested so i'll chase to see if and

119
00:04:40,639 --> 00:04:42,080
get him but i need i think having

120
00:04:42,080 --> 00:04:43,840
somebody else to help me on on finishing

121
00:04:43,840 --> 00:04:45,440
these would be helpful

122
00:04:45,440 --> 00:04:47,280
uh but otherwise i still want to get

123
00:04:47,280 --> 00:04:49,840
them completed it's just fun in the time

124
00:04:49,840 --> 00:04:51,280
all the other workload

125
00:04:51,280 --> 00:04:53,280
so apologies

126
00:04:53,280 --> 00:04:55,120
uh just occurred to me maybe reach out

127
00:04:55,120 --> 00:04:56,560
to don

128
00:04:56,560 --> 00:04:58,240
who commented on it earlier and see if

129
00:04:58,240 --> 00:04:59,600
he'll help you out because i know he's

130
00:04:59,600 --> 00:05:02,400
become more active in the idea

131
00:05:02,400 --> 00:05:04,560
don fedec

132
00:05:04,560 --> 00:05:08,240
try him us we can talk hopefully

133
00:05:08,240 --> 00:05:10,800
okay uh yeah we look forward to like

134
00:05:10,800 --> 00:05:13,759
getting that done uh they're very useful

135
00:05:13,759 --> 00:05:15,280
uh pieces of work and we don't want to

136
00:05:15,280 --> 00:05:17,199
lose that that went there all the effort

137
00:05:17,199 --> 00:05:18,880
that went into that

138
00:05:18,880 --> 00:05:23,120
um we have uh three others i mentioned

139
00:05:23,120 --> 00:05:26,000
the last two um that we have got mine's

140
00:05:26,000 --> 00:05:27,840
killed in the tower

141
00:05:27,840 --> 00:05:29,840
go ahead oh

142
00:05:29,840 --> 00:05:32,400
thank you all right

143
00:05:32,400 --> 00:05:36,440
scott do you want to say something

144
00:05:39,199 --> 00:05:41,039
scott

145
00:05:41,039 --> 00:05:43,759
we can't hear you

146
00:05:44,960 --> 00:05:46,160
here's some issues yesterday with this

147
00:05:46,160 --> 00:05:48,320
michael son

148
00:05:48,320 --> 00:05:50,880
i don't know there we go well we lost it

149
00:05:50,880 --> 00:05:52,720
all right not just for your information

150
00:05:52,720 --> 00:05:54,880
i never saw the mic button go the color

151
00:05:54,880 --> 00:05:56,720
it means that you you're unmuted so you

152
00:05:56,720 --> 00:05:58,880
were muted that whole time

153
00:05:58,880 --> 00:06:01,280
uh kent uh do you want to add anything

154
00:06:01,280 --> 00:06:04,800
about uh 69.91

155
00:06:04,800 --> 00:06:07,759
only that it completed your class call

156
00:06:07,759 --> 00:06:10,000
and it's i think it's on me now to do

157
00:06:10,000 --> 00:06:12,560
the uh shepherd write up and

158
00:06:12,560 --> 00:06:14,880
move through the process

159
00:06:14,880 --> 00:06:17,280
okay uh great yeah on the the other

160
00:06:17,280 --> 00:06:18,880
versioning documents

161
00:06:18,880 --> 00:06:22,080
um we did get some uh comments

162
00:06:22,080 --> 00:06:25,840
we i believe a new rev is is needed

163
00:06:25,840 --> 00:06:27,759
these documents will

164
00:06:27,759 --> 00:06:30,800
once they're complete we'll um

165
00:06:30,800 --> 00:06:33,199
we will hold them until the whole set is

166
00:06:33,199 --> 00:06:34,880
ready to go so there's other other

167
00:06:34,880 --> 00:06:36,240
documents that are on the agenda until

168
00:06:36,240 --> 00:06:38,639
they're ready uh once they're also

169
00:06:38,639 --> 00:06:40,880
passed working group last call we'll put

170
00:06:40,880 --> 00:06:43,280
them through the isg as a

171
00:06:43,280 --> 00:06:46,160
set so they can be processed as a set um

172
00:06:46,160 --> 00:06:49,280
that's uh

173
00:06:49,280 --> 00:06:50,639
that's our plan

174
00:06:50,639 --> 00:06:52,080
uh we have one document that was

175
00:06:52,080 --> 00:06:53,680
returned to the working group it's not

176
00:06:53,680 --> 00:06:57,360
on the agenda um it needs um uh it

177
00:06:57,360 --> 00:06:58,800
doesn't need a lot of work but it needs

178
00:06:58,800 --> 00:07:03,360
someone to pick this up uh to

179
00:07:03,360 --> 00:07:05,120
really close on it kent you're looking

180
00:07:05,120 --> 00:07:09,199
for a volunteer to help out there right

181
00:07:12,319 --> 00:07:14,720
uh volunteer for syslog

182
00:07:14,720 --> 00:07:16,639
yeah or do you think that's covered up

183
00:07:16,639 --> 00:07:18,800
yes

184
00:07:19,039 --> 00:07:20,880
if someone could help with that it's a

185
00:07:20,880 --> 00:07:22,720
it's a working group document it doesn't

186
00:07:22,720 --> 00:07:25,199
need to be the original authors um

187
00:07:25,199 --> 00:07:26,560
really all that needs to be done right

188
00:07:26,560 --> 00:07:28,400
now is to update the

189
00:07:28,400 --> 00:07:30,800
i think the examples uh i mean

190
00:07:30,800 --> 00:07:32,479
originally it was to go through the

191
00:07:32,479 --> 00:07:34,479
whole thing to make sure um you know

192
00:07:34,479 --> 00:07:36,880
what all the needed updates are but i

193
00:07:36,880 --> 00:07:40,080
think a quick review and i i feel like

194
00:07:40,080 --> 00:07:41,360
it's probably just a matter of updating

195
00:07:41,360 --> 00:07:42,960
the examples and then putting it back

196
00:07:42,960 --> 00:07:44,319
into the queue that's all we need

197
00:07:44,319 --> 00:07:46,319
someone to help us with that

198
00:07:46,319 --> 00:07:48,879
very easy

199
00:07:50,080 --> 00:07:52,879
all right well if anyone's willing um

200
00:07:52,879 --> 00:07:56,840
please contact the chairs or even better

201
00:07:56,840 --> 00:07:58,720
just uh uh

202
00:07:58,720 --> 00:07:59,520
um

203
00:07:59,520 --> 00:08:01,520
suggest changes on the list and then we

204
00:08:01,520 --> 00:08:04,160
can uh close this document out and bring

205
00:08:04,160 --> 00:08:06,720
it back to the ihg

206
00:08:06,720 --> 00:08:08,879
we've had no incoming uh

207
00:08:08,879 --> 00:08:11,199
liaisons or communications

208
00:08:11,199 --> 00:08:13,520
and um

209
00:08:13,520 --> 00:08:15,758
uh

210
00:08:16,160 --> 00:08:18,639
i think we all are well adept at working

211
00:08:18,639 --> 00:08:21,759
remote just a reminder though that we do

212
00:08:21,759 --> 00:08:22,800
um

213
00:08:22,800 --> 00:08:25,039
we can do formal

214
00:08:25,039 --> 00:08:27,280
interims and if you have a topic that

215
00:08:27,280 --> 00:08:29,120
you would like to request to be a formal

216
00:08:29,120 --> 00:08:32,399
interim just contact the chairs

217
00:08:32,399 --> 00:08:34,399
and with that

218
00:08:34,399 --> 00:08:36,880
we're ready to move on

219
00:08:36,880 --> 00:08:37,679
to

220
00:08:37,679 --> 00:08:38,640
uh

221
00:08:38,640 --> 00:08:41,519
the versioning update

222
00:08:50,959 --> 00:08:54,480
joe are you here you're here yeah

223
00:08:54,480 --> 00:08:56,480
i'm gonna pass slide control oh you're

224
00:08:56,480 --> 00:08:58,880
in the room

225
00:09:00,880 --> 00:09:03,279
even better

226
00:09:04,480 --> 00:09:06,000
hey joe

227
00:09:06,000 --> 00:09:08,080
uh charles do you want to take uh slide

228
00:09:08,080 --> 00:09:10,640
control or i'll send it to you

229
00:09:10,640 --> 00:09:14,080
is there a thing or you just okay

230
00:09:14,080 --> 00:09:16,160
i don't know if we don't have a clicker

231
00:09:16,160 --> 00:09:17,760
for you so you might need to tell me i

232
00:09:17,760 --> 00:09:19,839
can

233
00:09:19,839 --> 00:09:22,720
for future speakers the app

234
00:09:22,720 --> 00:09:25,519
uh lets you do that if you had the uh

235
00:09:25,519 --> 00:09:26,640
meet echo

236
00:09:26,640 --> 00:09:30,560
app but since you don't i gave it to uh

237
00:09:30,560 --> 00:09:32,800
cool

238
00:09:33,200 --> 00:09:34,560
this is uh

239
00:09:34,560 --> 00:09:36,160
even though on the agenda it says that

240
00:09:36,160 --> 00:09:38,000
this is going to be mainly on module

241
00:09:38,000 --> 00:09:41,279
versioning um and and yan would cover uh

242
00:09:41,279 --> 00:09:43,040
simver this is going to cover kind of an

243
00:09:43,040 --> 00:09:45,279
intro where we are as well as module

244
00:09:45,279 --> 00:09:48,000
versioning and simver uh i'm joe clark

245
00:09:48,000 --> 00:09:50,320
your host for this particular part of

246
00:09:50,320 --> 00:09:53,920
the program next slide please charles

247
00:09:53,920 --> 00:09:56,560
so that's me uh i it says rob will be

248
00:09:56,560 --> 00:09:58,160
presenting packages but jan will

249
00:09:58,160 --> 00:10:00,640
actually be presenting packages and in

250
00:10:00,640 --> 00:10:04,000
this deck we have some backup slides

251
00:10:04,000 --> 00:10:06,560
that cover kind of the wherefore uh some

252
00:10:06,560 --> 00:10:08,320
examples but we won't bore you with that

253
00:10:08,320 --> 00:10:10,480
we'll just focus on what has changed

254
00:10:10,480 --> 00:10:12,000
since 112.

255
00:10:12,000 --> 00:10:14,480
next slide please

256
00:10:14,480 --> 00:10:17,920
so just as a recap these are the five

257
00:10:17,920 --> 00:10:19,920
from the requirements doc these are the

258
00:10:19,920 --> 00:10:22,000
five

259
00:10:22,000 --> 00:10:24,720
drafts that we are going to come up with

260
00:10:24,720 --> 00:10:26,880
some of which have already happened and

261
00:10:26,880 --> 00:10:28,800
we'll be focusing on

262
00:10:28,800 --> 00:10:30,720
the

263
00:10:30,720 --> 00:10:32,640
semantic versioning and the module

264
00:10:32,640 --> 00:10:34,560
versioning and then as i mentioned yan

265
00:10:34,560 --> 00:10:37,200
will get into packages and the next set

266
00:10:37,200 --> 00:10:39,920
of work in the order um that we are

267
00:10:39,920 --> 00:10:41,760
going to look at it are the protocol

268
00:10:41,760 --> 00:10:44,720
operations so version selection uh is

269
00:10:44,720 --> 00:10:47,200
next and then the tooling around all of

270
00:10:47,200 --> 00:10:48,880
this uh the yang

271
00:10:48,880 --> 00:10:51,760
the related yang tooling um to process

272
00:10:51,760 --> 00:10:55,360
the uh the versions to uh look at uh

273
00:10:55,360 --> 00:10:58,320
like the lineage of these yang modules

274
00:10:58,320 --> 00:11:00,560
um all of our work is being tracked in

275
00:11:00,560 --> 00:11:04,959
git so we we kept the old design team um

276
00:11:04,959 --> 00:11:08,320
get repo we have issues there uh and uh

277
00:11:08,320 --> 00:11:11,040
next slide please

278
00:11:11,040 --> 00:11:14,399
we meet regularly every tuesday in fact

279
00:11:14,399 --> 00:11:16,079
today is a tuesday and we are going to

280
00:11:16,079 --> 00:11:18,160
have or at least attempt to have our

281
00:11:18,160 --> 00:11:21,760
meeting today um it is at 2 p.m or

282
00:11:21,760 --> 00:11:23,440
daylight savings time and we're kind of

283
00:11:23,440 --> 00:11:25,600
in this interesting bubble where the u.s

284
00:11:25,600 --> 00:11:26,880
switched and the rest of the world

285
00:11:26,880 --> 00:11:29,360
hasn't yet but generally it's around 9

286
00:11:29,360 --> 00:11:30,880
a.m eastern

287
00:11:30,880 --> 00:11:32,800
2 p.m in the uk

288
00:11:32,800 --> 00:11:34,720
we have a number of represent

289
00:11:34,720 --> 00:11:37,360
representatives that attend us

290
00:11:37,360 --> 00:11:40,720
consisting of operators various vendors

291
00:11:40,720 --> 00:11:42,640
where we discuss

292
00:11:42,640 --> 00:11:44,800
all of these five drafts and we've kind

293
00:11:44,800 --> 00:11:45,760
of been

294
00:11:45,760 --> 00:11:47,519
tackling them in the order that you saw

295
00:11:47,519 --> 00:11:49,839
on the previous slide these meetings are

296
00:11:49,839 --> 00:11:52,399
open to all we host them on webex the

297
00:11:52,399 --> 00:11:55,279
chairs set that up so by all means you

298
00:11:55,279 --> 00:11:58,000
are are free anyone is free out there

299
00:11:58,000 --> 00:11:59,760
uh i think most of the people in this

300
00:11:59,760 --> 00:12:02,079
room actually attend those meetings um

301
00:12:02,079 --> 00:12:04,000
but you're free to join and and help us

302
00:12:04,000 --> 00:12:06,240
with these discussions we bring back

303
00:12:06,240 --> 00:12:08,480
minutes and we bring back discussion

304
00:12:08,480 --> 00:12:10,880
points to the list

305
00:12:10,880 --> 00:12:12,959
jason stern has typically been doing

306
00:12:12,959 --> 00:12:14,320
that so you'll see

307
00:12:14,320 --> 00:12:17,519
updates uh on the netmod list as we

308
00:12:17,519 --> 00:12:18,959
discuss things

309
00:12:18,959 --> 00:12:21,360
next slide please

310
00:12:21,360 --> 00:12:24,639
so what have we been doing since 112.

311
00:12:24,639 --> 00:12:27,760
as lou mentioned we we got the module

312
00:12:27,760 --> 00:12:30,320
versioning and we got the simver drafts

313
00:12:30,320 --> 00:12:31,760
into last call

314
00:12:31,760 --> 00:12:33,680
and we'll talk about the comments we got

315
00:12:33,680 --> 00:12:35,600
on those in a bit

316
00:12:35,600 --> 00:12:37,360
so we've been focusing mainly on the

317
00:12:37,360 --> 00:12:39,839
packages on what

318
00:12:39,839 --> 00:12:41,600
what is the the kind of the where for

319
00:12:41,600 --> 00:12:44,720
the why of yang packages what does the

320
00:12:44,720 --> 00:12:46,720
structure of those look like we've

321
00:12:46,720 --> 00:12:48,959
explored uh different

322
00:12:48,959 --> 00:12:50,000
uh

323
00:12:50,000 --> 00:12:51,440
kind of different layouts or different

324
00:12:51,440 --> 00:12:53,519
architectures for that

325
00:12:53,519 --> 00:12:55,839
opening and closing some issues we've

326
00:12:55,839 --> 00:12:57,920
talked about different types of packages

327
00:12:57,920 --> 00:13:00,399
and yan will get into this idea of an

328
00:13:00,399 --> 00:13:02,720
api package versus an implementation

329
00:13:02,720 --> 00:13:05,600
package as well as what is the metadata

330
00:13:05,600 --> 00:13:06,560
around

331
00:13:06,560 --> 00:13:08,399
yang packages what does that look like

332
00:13:08,399 --> 00:13:10,399
and what are the use cases

333
00:13:10,399 --> 00:13:12,240
that led to as i mentioned a ton of

334
00:13:12,240 --> 00:13:14,240
issues and we've been working through

335
00:13:14,240 --> 00:13:15,120
them

336
00:13:15,120 --> 00:13:17,440
what's going to happen next as we'll see

337
00:13:17,440 --> 00:13:19,440
is we're going to focus back on the

338
00:13:19,440 --> 00:13:21,279
working group last call comments that

339
00:13:21,279 --> 00:13:23,920
we've received on the the two drafts

340
00:13:23,920 --> 00:13:24,959
already

341
00:13:24,959 --> 00:13:27,120
as well as continuing in in this

342
00:13:27,120 --> 00:13:28,720
packages work

343
00:13:28,720 --> 00:13:30,959
next slide please

344
00:13:30,959 --> 00:13:32,160
so

345
00:13:32,160 --> 00:13:34,320
module versioning so this was the the

346
00:13:34,320 --> 00:13:36,880
first draft and that leads in december

347
00:13:36,880 --> 00:13:38,639
uh we just closed working group last

348
00:13:38,639 --> 00:13:41,600
call um lou mentioned uh there will be a

349
00:13:41,600 --> 00:13:43,760
revision uh at least one revision of

350
00:13:43,760 --> 00:13:47,199
this draft uh jurgen italo and andy

351
00:13:47,199 --> 00:13:49,600
brought up issues we haven't had a

352
00:13:49,600 --> 00:13:52,320
chance yet on the the kind of the

353
00:13:52,320 --> 00:13:54,880
author's contributors call to go through

354
00:13:54,880 --> 00:13:56,480
all of these that's going to be kicked

355
00:13:56,480 --> 00:13:57,440
off

356
00:13:57,440 --> 00:13:59,760
probably today if we get some critical

357
00:13:59,760 --> 00:14:02,160
mass but certainly in the next few weeks

358
00:14:02,160 --> 00:14:04,240
we'll be discussing these issues and you

359
00:14:04,240 --> 00:14:06,000
see some of them there

360
00:14:06,000 --> 00:14:07,360
we had some

361
00:14:07,360 --> 00:14:09,600
contradictions in normative language

362
00:14:09,600 --> 00:14:11,600
around file names

363
00:14:11,600 --> 00:14:15,040
and ultimately we want to clarify and

364
00:14:15,040 --> 00:14:17,360
improve and discuss

365
00:14:17,360 --> 00:14:19,920
different ways or different complexities

366
00:14:19,920 --> 00:14:21,519
with the solution

367
00:14:21,519 --> 00:14:23,440
so that we're

368
00:14:23,440 --> 00:14:25,839
for the most part from a a consensus

369
00:14:25,839 --> 00:14:27,120
standpoint

370
00:14:27,120 --> 00:14:29,519
that we're comfortable with with what

371
00:14:29,519 --> 00:14:31,600
the yang versioning the module

372
00:14:31,600 --> 00:14:34,079
versioning solution presents and how it

373
00:14:34,079 --> 00:14:35,600
will be used

374
00:14:35,600 --> 00:14:37,519
uh next slide please

375
00:14:37,519 --> 00:14:39,199
joe before you go on

376
00:14:39,199 --> 00:14:40,959
i should have mentioned

377
00:14:40,959 --> 00:14:43,040
that

378
00:14:43,040 --> 00:14:44,720
uh based on the update we'll decide

379
00:14:44,720 --> 00:14:46,480
whether there needs to be a second last

380
00:14:46,480 --> 00:14:49,519
call if it's mainly editorial and

381
00:14:49,519 --> 00:14:52,880
consistency checks uh uh changes we

382
00:14:52,880 --> 00:14:54,480
won't do a last call but if there's

383
00:14:54,480 --> 00:14:56,000
something really substantive there that

384
00:14:56,000 --> 00:14:57,120
needs to be discussed at the working

385
00:14:57,120 --> 00:14:58,639
group we will

386
00:14:58,639 --> 00:15:00,560
my feeling right now is

387
00:15:00,560 --> 00:15:02,880
leaning towards not but you know if the

388
00:15:02,880 --> 00:15:04,720
authors feel differently that's

389
00:15:04,720 --> 00:15:06,560
important input also

390
00:15:06,560 --> 00:15:08,880
thank you

391
00:15:09,600 --> 00:15:14,480
thanks um we will i i i i kind of um

392
00:15:14,480 --> 00:15:18,079
evaluate some of what uh jurgen andy uh

393
00:15:18,079 --> 00:15:20,320
and atallo especially on on module

394
00:15:20,320 --> 00:15:22,160
versioning have said it's kind of like

395
00:15:22,160 --> 00:15:24,720
what an aed might to do it might do with

396
00:15:24,720 --> 00:15:27,600
a discuss i think it's going to require

397
00:15:27,600 --> 00:15:30,399
a lot of that discussion back and forth

398
00:15:30,399 --> 00:15:31,279
and

399
00:15:31,279 --> 00:15:33,920
the the changes that come out of that as

400
00:15:33,920 --> 00:15:35,199
you said we'll see

401
00:15:35,199 --> 00:15:37,759
uh the level of substantive

402
00:15:37,759 --> 00:15:40,160
change that needs to happen um and and

403
00:15:40,160 --> 00:15:42,240
perhaps a another last call might be

404
00:15:42,240 --> 00:15:43,279
warranted

405
00:15:43,279 --> 00:15:46,639
um with uh the semver draft uh mainly

406
00:15:46,639 --> 00:15:49,600
jurgen responded but italo we'll we'll

407
00:15:49,600 --> 00:15:51,440
actually look at atallo's comment in a

408
00:15:51,440 --> 00:15:52,959
second here

409
00:15:52,959 --> 00:15:55,279
some of uh jurgen's changes were fairly

410
00:15:55,279 --> 00:15:57,839
editorial uh in nature he recognized

411
00:15:57,839 --> 00:15:59,440
some typos um

412
00:15:59,440 --> 00:16:01,440
some some things that were

413
00:16:01,440 --> 00:16:04,079
quote-unquote low-hanging fruit to fix

414
00:16:04,079 --> 00:16:05,920
they have already been fixed in our get

415
00:16:05,920 --> 00:16:07,360
repository

416
00:16:07,360 --> 00:16:09,519
however there were some things that will

417
00:16:09,519 --> 00:16:12,160
require that additional discussion

418
00:16:12,160 --> 00:16:14,880
and so i've raised issues for that and

419
00:16:14,880 --> 00:16:17,519
we're going to go through them

420
00:16:17,519 --> 00:16:19,519
again anyone's free to join and help us

421
00:16:19,519 --> 00:16:21,600
with those conversations and we'll get

422
00:16:21,600 --> 00:16:23,279
back to the list so we're not ignoring

423
00:16:23,279 --> 00:16:25,120
you year again we will we will get back

424
00:16:25,120 --> 00:16:28,160
and address um these items that we uh we

425
00:16:28,160 --> 00:16:32,240
have as issues here uh next slide please

426
00:16:32,240 --> 00:16:35,360
it's hollow's comment was interesting so

427
00:16:35,360 --> 00:16:37,680
he asked what about in in like the code

428
00:16:37,680 --> 00:16:41,120
begins or in uh rfc version three format

429
00:16:41,120 --> 00:16:42,560
the source code

430
00:16:42,560 --> 00:16:43,440
what

431
00:16:43,440 --> 00:16:45,519
since we're proposing an alternative

432
00:16:45,519 --> 00:16:48,079
file name um and this the alternative

433
00:16:48,079 --> 00:16:50,320
file name is with the revision label

434
00:16:50,320 --> 00:16:54,079
which can be a yang simver we would in

435
00:16:54,079 --> 00:16:55,839
the module versioning draft we state

436
00:16:55,839 --> 00:16:58,320
that you'll use a hash mark to

437
00:16:58,320 --> 00:17:00,639
delineate that what comes after is a

438
00:17:00,639 --> 00:17:02,079
revision label

439
00:17:02,079 --> 00:17:03,519
italia asks

440
00:17:03,519 --> 00:17:05,919
should we change the code begins and the

441
00:17:05,919 --> 00:17:07,359
source code

442
00:17:07,359 --> 00:17:09,679
tags in the uh

443
00:17:09,679 --> 00:17:12,400
internet draft language to accept those

444
00:17:12,400 --> 00:17:16,480
um alternate file names and if we do

445
00:17:16,480 --> 00:17:18,959
if we do do things other than a revision

446
00:17:18,959 --> 00:17:20,000
date

447
00:17:20,000 --> 00:17:21,760
do we run the risk of blowing up the

448
00:17:21,760 --> 00:17:23,919
line length because you could have a

449
00:17:23,919 --> 00:17:25,919
fairly long module name with some

450
00:17:25,919 --> 00:17:28,880
ridiculously long revision label as well

451
00:17:28,880 --> 00:17:31,360
um so we discussed this a little bit and

452
00:17:31,360 --> 00:17:34,000
the the consensus among among the

453
00:17:34,000 --> 00:17:35,440
contributors

454
00:17:35,440 --> 00:17:39,440
is keep it either as it is now or or rob

455
00:17:39,440 --> 00:17:42,559
is actually fairly keen on what if we

456
00:17:42,559 --> 00:17:45,360
stipulate that don't include anything

457
00:17:45,360 --> 00:17:47,039
just the module name

458
00:17:47,039 --> 00:17:49,280
and this is where tooling will come in

459
00:17:49,280 --> 00:17:51,679
and find the latest revision in the

460
00:17:51,679 --> 00:17:55,200
module and extract that to a file as

461
00:17:55,200 --> 00:17:56,240
both

462
00:17:56,240 --> 00:17:59,039
module name at revision date and module

463
00:17:59,039 --> 00:18:01,440
name pound or hash

464
00:18:01,440 --> 00:18:03,039
revision label

465
00:18:03,039 --> 00:18:05,520
as is present in the module this way

466
00:18:05,520 --> 00:18:08,000
it's it's a little simpler it actually

467
00:18:08,000 --> 00:18:10,160
reduces some of the errors we've seen in

468
00:18:10,160 --> 00:18:12,720
extracting modules where people

469
00:18:12,720 --> 00:18:14,320
change the revision but they don't

470
00:18:14,320 --> 00:18:17,600
change the code begins tag and hilarity

471
00:18:17,600 --> 00:18:20,799
ensues with the zim tool and and what's

472
00:18:20,799 --> 00:18:22,400
happening in the data tracker in yang

473
00:18:22,400 --> 00:18:23,440
catalog

474
00:18:23,440 --> 00:18:24,240
so

475
00:18:24,240 --> 00:18:25,280
we're going to

476
00:18:25,280 --> 00:18:27,039
figure out what's the best solution do

477
00:18:27,039 --> 00:18:28,880
we leave things as they are now that's

478
00:18:28,880 --> 00:18:30,559
obviously easiest

479
00:18:30,559 --> 00:18:31,919
or do we

480
00:18:31,919 --> 00:18:34,720
add some text that says we recommend not

481
00:18:34,720 --> 00:18:36,080
including the

482
00:18:36,080 --> 00:18:38,080
revision date there either

483
00:18:38,080 --> 00:18:39,919
and and leave it up to tooling to do the

484
00:18:39,919 --> 00:18:42,799
right thing so that's kind of the one

485
00:18:42,799 --> 00:18:45,760
issue we discuss we are of course open

486
00:18:45,760 --> 00:18:47,679
in all of these to what the working

487
00:18:47,679 --> 00:18:49,840
group may uh may want to suggest or

488
00:18:49,840 --> 00:18:53,039
offer in terms of guidance

489
00:18:53,039 --> 00:18:56,520
next slide please

490
00:18:56,640 --> 00:18:59,039
the other uh big thing that was raised

491
00:18:59,039 --> 00:19:01,520
so so jurgen commented on the the last

492
00:19:01,520 --> 00:19:04,240
call uh on that thread that lou started

493
00:19:04,240 --> 00:19:06,080
and then started a new thread uh in

494
00:19:06,080 --> 00:19:08,720
parallel to that uh with an alternative

495
00:19:08,720 --> 00:19:09,520
to

496
00:19:09,520 --> 00:19:12,799
yang simver and to some degree um the

497
00:19:12,799 --> 00:19:15,360
the module versioning as well

498
00:19:15,360 --> 00:19:16,480
um and

499
00:19:16,480 --> 00:19:19,360
just by way of an example and this is

500
00:19:19,360 --> 00:19:21,120
directly from his email

501
00:19:21,120 --> 00:19:23,360
what if on every node where there is a

502
00:19:23,360 --> 00:19:25,280
non-backward compatible change that's

503
00:19:25,280 --> 00:19:28,720
nbc non-backwards compatible there is a

504
00:19:28,720 --> 00:19:31,520
tag that is added nbc change as an

505
00:19:31,520 --> 00:19:34,240
example listing the revision date at

506
00:19:34,240 --> 00:19:36,000
which that non-backwards compatible

507
00:19:36,000 --> 00:19:37,760
change was introduced and then

508
00:19:37,760 --> 00:19:39,679
describing what that non-backwards

509
00:19:39,679 --> 00:19:41,919
compatible the semantic change

510
00:19:41,919 --> 00:19:43,600
uh need

511
00:19:43,600 --> 00:19:45,840
the semantic change that was uh that was

512
00:19:45,840 --> 00:19:47,440
done

513
00:19:47,440 --> 00:19:50,480
in the beginning a while back when we

514
00:19:50,480 --> 00:19:52,880
first started talking about uh yang

515
00:19:52,880 --> 00:19:54,080
versioning

516
00:19:54,080 --> 00:19:56,640
um this was brought up there was some

517
00:19:56,640 --> 00:19:58,480
discussion um

518
00:19:58,480 --> 00:20:00,240
with this there was

519
00:20:00,240 --> 00:20:01,440
some

520
00:20:01,440 --> 00:20:02,880
back and forth that maybe this would add

521
00:20:02,880 --> 00:20:05,200
too much verbosity um this could be

522
00:20:05,200 --> 00:20:07,440
something that that gets moved into the

523
00:20:07,440 --> 00:20:09,600
tooling section but it needs further

524
00:20:09,600 --> 00:20:12,400
discussion uh we we fully admit we've

525
00:20:12,400 --> 00:20:14,559
read uh we've read this we've we've

526
00:20:14,559 --> 00:20:16,559
heard both jurgen and andy's comments

527
00:20:16,559 --> 00:20:18,799
here or read them i should say

528
00:20:18,799 --> 00:20:20,640
and we're going to discuss this um

529
00:20:20,640 --> 00:20:23,200
further and and decide what the

530
00:20:23,200 --> 00:20:23,919
the

531
00:20:23,919 --> 00:20:25,840
the response what the action to take

532
00:20:25,840 --> 00:20:27,760
here uh is going to be so this is going

533
00:20:27,760 --> 00:20:30,400
to be one of those uh items that gets

534
00:20:30,400 --> 00:20:32,720
added on to the to-do list for our

535
00:20:32,720 --> 00:20:35,919
weekly calls after this meeting

536
00:20:35,919 --> 00:20:38,240
next slide please

537
00:20:38,240 --> 00:20:39,440
all right

538
00:20:39,440 --> 00:20:41,919
so this takes me towards the end of my

539
00:20:41,919 --> 00:20:43,679
section and and i'll be handing things

540
00:20:43,679 --> 00:20:45,440
over to yon as i mentioned we're

541
00:20:45,440 --> 00:20:47,760
discussing these weekly uh the issues

542
00:20:47,760 --> 00:20:48,480
here

543
00:20:48,480 --> 00:20:51,039
you can look at our whole issue tracker

544
00:20:51,039 --> 00:20:52,640
at the the github

545
00:20:52,640 --> 00:20:54,320
project link there

546
00:20:54,320 --> 00:20:55,840
and you can also look at the latest

547
00:20:55,840 --> 00:20:57,919
revisions of all of the drafts and see

548
00:20:57,919 --> 00:21:00,159
what state we are

549
00:21:00,159 --> 00:21:02,640
even if before we publish to a data

550
00:21:02,640 --> 00:21:03,679
tracker

551
00:21:03,679 --> 00:21:05,360
um so

552
00:21:05,360 --> 00:21:07,200
uh going forward we're going to address

553
00:21:07,200 --> 00:21:08,480
we're absolutely going to address those

554
00:21:08,480 --> 00:21:10,240
working group last call comments that we

555
00:21:10,240 --> 00:21:12,640
got on versioning in simber

556
00:21:12,640 --> 00:21:15,039
we're still focusing very much on the

557
00:21:15,039 --> 00:21:16,880
the packages draft and getting a lot of

558
00:21:16,880 --> 00:21:18,320
good input

559
00:21:18,320 --> 00:21:20,720
from the the various

560
00:21:20,720 --> 00:21:24,080
participants on our contributors call

561
00:21:24,080 --> 00:21:26,000
and then we're going to break into those

562
00:21:26,000 --> 00:21:28,240
those final two

563
00:21:28,240 --> 00:21:30,400
final two work items on version

564
00:21:30,400 --> 00:21:32,720
selection and the schema comparison or

565
00:21:32,720 --> 00:21:35,520
the tooling uh as it were once we're

566
00:21:35,520 --> 00:21:37,440
kind of getting that same

567
00:21:37,440 --> 00:21:40,480
last call state for packages

568
00:21:40,480 --> 00:21:42,000
so uh

569
00:21:42,000 --> 00:21:46,400
any questions before i hand over to yon

570
00:21:52,320 --> 00:21:54,240
i just see yon in the queue i think

571
00:21:54,240 --> 00:21:56,480
unless jan you have a question i think

572
00:21:56,480 --> 00:21:59,120
you're there to present and i can uh

573
00:21:59,120 --> 00:22:01,679
relinquish the floor

574
00:22:01,679 --> 00:22:03,760
yeah i'm ready

575
00:22:03,760 --> 00:22:07,520
thanks charles okay yeah thanks joe

576
00:22:08,480 --> 00:22:10,159
john do you already have control of the

577
00:22:10,159 --> 00:22:13,120
slides or do you need that

578
00:22:13,120 --> 00:22:14,720
i seem not to have

579
00:22:14,720 --> 00:22:15,600
okay

580
00:22:15,600 --> 00:22:16,880
i'll give it

581
00:22:16,880 --> 00:22:18,720
you should have it in just a second well

582
00:22:18,720 --> 00:22:20,000
for some reason it's not letting me

583
00:22:20,000 --> 00:22:21,840
switch glide right now

584
00:22:21,840 --> 00:22:24,320
so yawn you should have it yep okay

585
00:22:24,320 --> 00:22:25,200
thanks

586
00:22:25,200 --> 00:22:26,400
it works now

587
00:22:26,400 --> 00:22:27,679
so now

588
00:22:27,679 --> 00:22:29,200
presentations

589
00:22:29,200 --> 00:22:32,080
charles all right okay

590
00:22:32,080 --> 00:22:33,760
okay there were more slides in that one

591
00:22:33,760 --> 00:22:36,320
so i thought he was uh taking over

592
00:22:36,320 --> 00:22:38,720
uh no it's it's the next presentation i

593
00:22:38,720 --> 00:22:40,640
don't know why it's not letting me

594
00:22:40,640 --> 00:22:43,600
have to do it now uh let me you have to

595
00:22:43,600 --> 00:22:45,360
pass control back to me

596
00:22:45,360 --> 00:22:47,360
i'm doing that now then

597
00:22:47,360 --> 00:22:50,000
that's odd

598
00:22:52,640 --> 00:22:56,159
do you have control yet lou

599
00:22:58,240 --> 00:23:01,520
uh no it says it's uh taken so maybe you

600
00:23:01,520 --> 00:23:05,520
can you can do that if you have control

601
00:23:05,520 --> 00:23:08,520
okay

602
00:23:09,120 --> 00:23:10,799
oh no i i think i can do it here i got

603
00:23:10,799 --> 00:23:13,039
it now

604
00:23:13,039 --> 00:23:15,280
yes

605
00:23:16,480 --> 00:23:19,200
it's just a little slow

606
00:23:19,200 --> 00:23:23,000
there it is thank you

607
00:23:23,360 --> 00:23:26,240
you now have control and you know

608
00:23:26,240 --> 00:23:28,559
and for others you have to take control

609
00:23:28,559 --> 00:23:30,720
remote control and then you have to then

610
00:23:30,720 --> 00:23:31,840
you can make the change and then give

611
00:23:31,840 --> 00:23:33,120
control

612
00:23:33,120 --> 00:23:34,720
all right thanks

613
00:23:34,720 --> 00:23:37,840
we're all working

614
00:23:38,640 --> 00:23:40,720
so uh first a few updates on what's

615
00:23:40,720 --> 00:23:42,880
happened since 112

616
00:23:42,880 --> 00:23:45,360
and uh

617
00:23:45,440 --> 00:23:46,720
one of the things we've been talking

618
00:23:46,720 --> 00:23:49,440
about is something we call issue 57

619
00:23:49,440 --> 00:23:50,640
it's about

620
00:23:50,640 --> 00:23:53,279
what we do with mount points when they

621
00:23:53,279 --> 00:23:56,320
appear in packages

622
00:23:56,400 --> 00:23:57,360
i mean

623
00:23:57,360 --> 00:23:58,960
mount points are not used extensively at

624
00:23:58,960 --> 00:24:00,799
this time but over time they may be more

625
00:24:00,799 --> 00:24:03,279
common and the question is what do we do

626
00:24:03,279 --> 00:24:04,960
if there is a mount point inside the

627
00:24:04,960 --> 00:24:06,480
package

628
00:24:06,480 --> 00:24:09,200
uh should we in some way prescribe or

629
00:24:09,200 --> 00:24:11,600
allow an implementation to prescribe

630
00:24:11,600 --> 00:24:13,200
what sort of

631
00:24:13,200 --> 00:24:15,279
packages that may

632
00:24:15,279 --> 00:24:17,200
end up being mounted on that mount point

633
00:24:17,200 --> 00:24:20,400
or not and

634
00:24:20,559 --> 00:24:23,760
it's an open discussion let's say

635
00:24:23,760 --> 00:24:26,159
another thing we tried or discussed

636
00:24:26,159 --> 00:24:28,159
is about

637
00:24:28,159 --> 00:24:28,880
the

638
00:24:28,880 --> 00:24:30,400
how packages

639
00:24:30,400 --> 00:24:32,000
are communicated when you connect to a

640
00:24:32,000 --> 00:24:33,600
device how do you know which packages

641
00:24:33,600 --> 00:24:36,159
are implemented on this device

642
00:24:36,159 --> 00:24:37,679
i mean if you remember from my

643
00:24:37,679 --> 00:24:41,520
discussion earlier about how net conf

644
00:24:41,520 --> 00:24:45,120
performance can be increased i took a

645
00:24:45,120 --> 00:24:47,760
real world application and measured it

646
00:24:47,760 --> 00:24:49,520
for one hour and all the traffic that

647
00:24:49,520 --> 00:24:52,080
was sent there

648
00:24:52,080 --> 00:24:54,480
to a particular device and we found that

649
00:24:54,480 --> 00:24:55,840
in that particular real world

650
00:24:55,840 --> 00:24:57,840
application 91

651
00:24:57,840 --> 00:24:59,440
of all the traffic

652
00:24:59,440 --> 00:25:02,000
was hello messages

653
00:25:02,000 --> 00:25:03,919
and that's kind of high but that was of

654
00:25:03,919 --> 00:25:05,919
course a device that was using a lot of

655
00:25:05,919 --> 00:25:07,840
yang 1-0 modules

656
00:25:07,840 --> 00:25:11,120
with zhang wanted one

657
00:25:11,200 --> 00:25:13,360
the traffic would of course reduce

658
00:25:13,360 --> 00:25:14,640
dramatically when it comes to hello

659
00:25:14,640 --> 00:25:16,880
messages but in principle the mechanism

660
00:25:16,880 --> 00:25:18,480
for finding out what's available on the

661
00:25:18,480 --> 00:25:20,480
device is still fairly similar even with

662
00:25:20,480 --> 00:25:22,640
the angle inject library

663
00:25:22,640 --> 00:25:23,919
it's just that you're exchanging the

664
00:25:23,919 --> 00:25:27,039
information in young library less often

665
00:25:27,039 --> 00:25:28,960
but what we can do with packages is then

666
00:25:28,960 --> 00:25:31,600
to try to reduce the gap with how people

667
00:25:31,600 --> 00:25:33,200
think about what's running on the device

668
00:25:33,200 --> 00:25:35,200
we don't generally go

669
00:25:35,200 --> 00:25:36,559
around and list

670
00:25:36,559 --> 00:25:37,760
and say what's this device doing and

671
00:25:37,760 --> 00:25:39,840
then you list 1 000 modules

672
00:25:39,840 --> 00:25:42,080
we think of it as functional groups

673
00:25:42,080 --> 00:25:45,120
something like packages

674
00:25:45,520 --> 00:25:47,279
but now we have a number of different

675
00:25:47,279 --> 00:25:49,200
mechanisms that a client needs to

676
00:25:49,200 --> 00:25:50,960
understand in order to be able to manage

677
00:25:50,960 --> 00:25:53,600
the device generically we have the young

678
00:25:53,600 --> 00:25:56,960
1.0 mechanism hello we have the young

679
00:25:56,960 --> 00:25:57,679
the

680
00:25:57,679 --> 00:26:00,640
1.1 mechanism with the young library we

681
00:26:00,640 --> 00:26:03,600
have net monitoring

682
00:26:03,600 --> 00:26:05,039
and

683
00:26:05,039 --> 00:26:06,799
it's starting to build up

684
00:26:06,799 --> 00:26:08,240
with different mechanisms that you need

685
00:26:08,240 --> 00:26:10,640
to understand and packages would be the

686
00:26:10,640 --> 00:26:12,640
fifth mechanism

687
00:26:12,640 --> 00:26:14,080
adding to the list of things you need to

688
00:26:14,080 --> 00:26:15,760
understand to do this

689
00:26:15,760 --> 00:26:18,159
so we had a discussion of could we maybe

690
00:26:18,159 --> 00:26:20,400
integrate this into yang library in some

691
00:26:20,400 --> 00:26:22,720
way to reduce the gap and reduce the

692
00:26:22,720 --> 00:26:24,480
amount of code that you need to have in

693
00:26:24,480 --> 00:26:26,559
order to understand but in the end we

694
00:26:26,559 --> 00:26:28,640
gave up and found that

695
00:26:28,640 --> 00:26:30,799
the gain of trying to integrate those

696
00:26:30,799 --> 00:26:32,240
two was not

697
00:26:32,240 --> 00:26:33,919
really making things easier anyway in

698
00:26:33,919 --> 00:26:35,279
the end

699
00:26:35,279 --> 00:26:36,720
so we have to live with five different

700
00:26:36,720 --> 00:26:39,720
mechanisms

701
00:26:41,520 --> 00:26:44,799
we are talking about uh the issues 133

702
00:26:44,799 --> 00:26:46,960
135 about

703
00:26:46,960 --> 00:26:50,000
optional packages or optional modules

704
00:26:50,000 --> 00:26:51,679
that are optionally part of the packages

705
00:26:51,679 --> 00:26:53,200
and

706
00:26:53,200 --> 00:26:54,799
this ties back with this discussion that

707
00:26:54,799 --> 00:26:56,960
i'll show you in a few slides about api

708
00:26:56,960 --> 00:26:58,880
and implementation packages

709
00:26:58,880 --> 00:26:59,840
but

710
00:26:59,840 --> 00:27:01,840
while we of course interested in a lot

711
00:27:01,840 --> 00:27:03,120
of flexibility when it comes to the

712
00:27:03,120 --> 00:27:05,279
package concept

713
00:27:05,279 --> 00:27:07,919
flexibility is also creating um

714
00:27:07,919 --> 00:27:09,200
complexity

715
00:27:09,200 --> 00:27:11,679
so we are looking for the right balance

716
00:27:11,679 --> 00:27:13,919
there

717
00:27:18,159 --> 00:27:20,240
we talked about uh adding revision

718
00:27:20,240 --> 00:27:22,640
labels uh for packages

719
00:27:22,640 --> 00:27:25,840
and we decided that we propose to you to

720
00:27:25,840 --> 00:27:29,279
itf must use yang zamber

721
00:27:29,279 --> 00:27:31,360
labels for packages and we recommend

722
00:27:31,360 --> 00:27:35,440
that other organizations should use that

723
00:27:35,440 --> 00:27:38,000
another concern we have had is how

724
00:27:38,000 --> 00:27:40,720
deviations are part of packages and we

725
00:27:40,720 --> 00:27:43,840
updated the text to make it

726
00:27:43,840 --> 00:27:45,360
even more clear

727
00:27:45,360 --> 00:27:48,559
that the standardization body cannot use

728
00:27:48,559 --> 00:27:51,039
deviations in their definitions

729
00:27:51,039 --> 00:27:53,279
and the reason for that is that that

730
00:27:53,279 --> 00:27:55,360
would basically create a

731
00:27:55,360 --> 00:27:56,640
sdo

732
00:27:56,640 --> 00:27:59,279
war you cannot an implementer cannot

733
00:27:59,279 --> 00:28:00,799
implement

734
00:28:00,799 --> 00:28:03,360
uh

735
00:28:03,360 --> 00:28:05,679
an sdo that is leveraging in other sdos

736
00:28:05,679 --> 00:28:08,640
packages if if we allow deviations in

737
00:28:08,640 --> 00:28:09,679
these

738
00:28:09,679 --> 00:28:11,919
uh of course implementations can use

739
00:28:11,919 --> 00:28:14,000
deviations a particular device can have

740
00:28:14,000 --> 00:28:15,520
deviations from a standard but the

741
00:28:15,520 --> 00:28:17,039
standards cannot have deviations in

742
00:28:17,039 --> 00:28:19,520
themselves

743
00:28:20,640 --> 00:28:22,320
then we had

744
00:28:22,320 --> 00:28:25,039
some smaller fixes about

745
00:28:25,039 --> 00:28:29,039
cleaning up the language in the spec so

746
00:28:29,039 --> 00:28:30,320
we use the

747
00:28:30,320 --> 00:28:33,840
schema terminology consistently

748
00:28:38,000 --> 00:28:40,880
we had checksums for packages for a

749
00:28:40,880 --> 00:28:43,760
while but they have been removed now

750
00:28:43,760 --> 00:28:45,840
i think there there is some value

751
00:28:45,840 --> 00:28:47,760
attached to this concept you could

752
00:28:47,760 --> 00:28:50,559
verify that the modules

753
00:28:50,559 --> 00:28:51,440
are

754
00:28:51,440 --> 00:28:53,600
indeed the ones that you expect so that

755
00:28:53,600 --> 00:28:56,000
even if people forget

756
00:28:56,000 --> 00:28:57,760
to add the revision statement when the

757
00:28:57,760 --> 00:28:59,200
module is changed that would be detected

758
00:28:59,200 --> 00:29:01,039
by checksums but there's also a bit of

759
00:29:01,039 --> 00:29:03,039
complexity defining how to compute those

760
00:29:03,039 --> 00:29:04,559
checks

761
00:29:04,559 --> 00:29:08,320
i see that chances raise his hand

762
00:29:08,399 --> 00:29:10,799
um yeah thanks uh so i just had one

763
00:29:10,799 --> 00:29:13,600
question going back about that standards

764
00:29:13,600 --> 00:29:16,559
creating a deviation uh of a standard

765
00:29:16,559 --> 00:29:19,919
uh how do you envision uh biz versions

766
00:29:19,919 --> 00:29:22,320
working would there at least be a

767
00:29:22,320 --> 00:29:26,200
like a bit of a transitions

768
00:29:32,480 --> 00:29:34,399
i just forgot what's the right mechanism

769
00:29:34,399 --> 00:29:35,520
for that

770
00:29:35,520 --> 00:29:37,600
to to illustrate that while it's in

771
00:29:37,600 --> 00:29:39,600
progress

772
00:29:39,600 --> 00:29:41,840
the the sort of uh task force that is

773
00:29:41,840 --> 00:29:43,279
working at this is called the zhang

774
00:29:43,279 --> 00:29:45,360
versioning design team right so

775
00:29:45,360 --> 00:29:47,120
all of these five or six different

776
00:29:47,120 --> 00:29:49,600
documents are about versioning and how

777
00:29:49,600 --> 00:29:51,120
you handle things that are changing over

778
00:29:51,120 --> 00:29:52,080
time

779
00:29:52,080 --> 00:29:54,640
so i i think

780
00:29:54,640 --> 00:29:57,200
well in any way deviations are not the

781
00:29:57,200 --> 00:30:01,120
mechanism to communicate version changes

782
00:30:01,120 --> 00:30:03,200
deviations is for a vendor to say i am

783
00:30:03,200 --> 00:30:05,200
not fulfilling this completely or at

784
00:30:05,200 --> 00:30:06,960
least not the way that it was intended

785
00:30:06,960 --> 00:30:09,520
exactly but standard bodies should not

786
00:30:09,520 --> 00:30:12,559
use deviations ever

787
00:30:13,760 --> 00:30:14,960
i'm not sure if that answered your

788
00:30:14,960 --> 00:30:17,279
question

789
00:30:17,360 --> 00:30:22,120
no no not really but i think i'm

790
00:30:22,559 --> 00:30:24,720
but but that's okay okay let me explain

791
00:30:24,720 --> 00:30:26,559
let me explain

792
00:30:26,559 --> 00:30:28,399
i mean i understand in theory that what

793
00:30:28,399 --> 00:30:30,799
the deviations for i just hadn't i had

794
00:30:30,799 --> 00:30:32,080
never thought about how it actually

795
00:30:32,080 --> 00:30:33,760
works when a standards organization

796
00:30:33,760 --> 00:30:36,399
updates their own specification with a

797
00:30:36,399 --> 00:30:39,679
biz version that is going to

798
00:30:39,679 --> 00:30:42,240
make a change to an existing standard in

799
00:30:42,240 --> 00:30:45,520
which case it seems like

800
00:30:45,600 --> 00:30:47,840
that might look like a deviation or i

801
00:30:47,840 --> 00:30:49,679
just don't know how your how that's

802
00:30:49,679 --> 00:30:51,679
being represented until the new standard

803
00:30:51,679 --> 00:30:53,200
actually becomes

804
00:30:53,200 --> 00:30:56,159
uh the standard you know

805
00:30:56,159 --> 00:30:57,279
i thought maybe there'd be some

806
00:30:57,279 --> 00:31:00,000
transition period where

807
00:31:00,000 --> 00:31:01,279
it might look like that you might

808
00:31:01,279 --> 00:31:02,960
actually use deviation but i don't know

809
00:31:02,960 --> 00:31:04,159
what type of statement you would

810
00:31:04,159 --> 00:31:06,799
actually use in that case

811
00:31:06,799 --> 00:31:08,640
no it's not a statement like that i mean

812
00:31:08,640 --> 00:31:10,559
what you would see is a new version or

813
00:31:10,559 --> 00:31:12,320
new revision of the module or the

814
00:31:12,320 --> 00:31:13,440
package

815
00:31:13,440 --> 00:31:15,519
yeah i guess so okay yeah and then there

816
00:31:15,519 --> 00:31:17,279
are some rules for what you can and

817
00:31:17,279 --> 00:31:18,960
cannot do and still call it backwards

818
00:31:18,960 --> 00:31:20,480
compatible

819
00:31:20,480 --> 00:31:21,519
right if you

820
00:31:21,519 --> 00:31:23,200
if you are breaking those rules you have

821
00:31:23,200 --> 00:31:24,720
to announce it as non-backwards

822
00:31:24,720 --> 00:31:26,799
compatible

823
00:31:26,799 --> 00:31:30,039
yeah thanks

824
00:31:36,799 --> 00:31:38,080
uh

825
00:31:38,080 --> 00:31:39,919
yeah checksums we removed those because

826
00:31:39,919 --> 00:31:41,919
of the complexity even though they have

827
00:31:41,919 --> 00:31:45,519
some merits we talked about or we're in

828
00:31:45,519 --> 00:31:46,960
closing the

829
00:31:46,960 --> 00:31:49,440
discussion about nbc changes and parents

830
00:31:49,440 --> 00:31:50,720
in history

831
00:31:50,720 --> 00:31:52,880
and there was some mix up between

832
00:31:52,880 --> 00:31:55,200
version and revision statements in the

833
00:31:55,200 --> 00:31:59,360
terminology so we cleaned that up

834
00:31:59,440 --> 00:32:01,919
and we also had a discussion whether

835
00:32:01,919 --> 00:32:03,440
these version labels that we are talking

836
00:32:03,440 --> 00:32:04,480
about here

837
00:32:04,480 --> 00:32:07,600
could be applied to sub modules as well

838
00:32:07,600 --> 00:32:09,519
and we decided that we should allow it

839
00:32:09,519 --> 00:32:12,159
but not require some modules to be

840
00:32:12,159 --> 00:32:17,039
versioned using our concepts here

841
00:32:20,720 --> 00:32:23,360
then we have a recent discussion has

842
00:32:23,360 --> 00:32:24,960
been around

843
00:32:24,960 --> 00:32:27,200
api and implementation packages so

844
00:32:27,200 --> 00:32:28,720
separating

845
00:32:28,720 --> 00:32:31,360
package definitions into two types

846
00:32:31,360 --> 00:32:35,120
where api packages would be

847
00:32:35,120 --> 00:32:37,039
packages coming out of say standard

848
00:32:37,039 --> 00:32:38,240
bodies or

849
00:32:38,240 --> 00:32:41,919
maybe a product line in a vendor that is

850
00:32:41,919 --> 00:32:43,919
standardized putting it together a

851
00:32:43,919 --> 00:32:45,919
package that will have many different

852
00:32:45,919 --> 00:32:49,120
implementations over time

853
00:32:49,840 --> 00:32:51,039
and then we have the other type of

854
00:32:51,039 --> 00:32:52,320
package which is an implementation

855
00:32:52,320 --> 00:32:54,960
package which would then contain

856
00:32:54,960 --> 00:32:57,120
all the details all the modules nothing

857
00:32:57,120 --> 00:32:58,399
is optional in the implementation

858
00:32:58,399 --> 00:33:00,240
package because it's

859
00:33:00,240 --> 00:33:03,039
it documents the actual implementation

860
00:33:03,039 --> 00:33:06,080
and it may contain deviations then

861
00:33:06,080 --> 00:33:09,039
and to separate these two

862
00:33:09,039 --> 00:33:10,799
could be useful because it's more clear

863
00:33:10,799 --> 00:33:12,559
than what you can and cannot do with

864
00:33:12,559 --> 00:33:15,519
within the package for example in an api

865
00:33:15,519 --> 00:33:17,679
package you wouldn't have any deviations

866
00:33:17,679 --> 00:33:19,919
whereas in the implementation you might

867
00:33:19,919 --> 00:33:20,799
uh

868
00:33:20,799 --> 00:33:22,000
but it's also

869
00:33:22,000 --> 00:33:24,240
we are trying to discuss to see exactly

870
00:33:24,240 --> 00:33:26,559
where is the line is it really worth the

871
00:33:26,559 --> 00:33:29,679
effort to separate this into

872
00:33:29,679 --> 00:33:32,640
two different kinds of packages and what

873
00:33:32,640 --> 00:33:34,799
does that difference look like in the

874
00:33:34,799 --> 00:33:37,799
actual

875
00:33:38,799 --> 00:33:40,880
here are some examples okay so we have

876
00:33:40,880 --> 00:33:41,760
been

877
00:33:41,760 --> 00:33:43,600
playing around with adding a package

878
00:33:43,600 --> 00:33:44,880
type leaf

879
00:33:44,880 --> 00:33:46,960
in the yang package instance

880
00:33:46,960 --> 00:33:48,720
and which could take a value of api or

881
00:33:48,720 --> 00:33:50,320
implementation

882
00:33:50,320 --> 00:33:52,240
and we used to have something called

883
00:33:52,240 --> 00:33:54,240
mandatory feature in the package

884
00:33:54,240 --> 00:33:56,640
definition but if this is in the

885
00:33:56,640 --> 00:33:58,960
implementation package it sounds kind of

886
00:33:58,960 --> 00:34:00,720
strange to say that it's a mandatory

887
00:34:00,720 --> 00:34:02,159
thing yeah of course it's here because

888
00:34:02,159 --> 00:34:04,720
we implemented it so we decided in that

889
00:34:04,720 --> 00:34:07,840
case to call it supported feature

890
00:34:07,840 --> 00:34:10,320
that is more neutral to the two

891
00:34:10,320 --> 00:34:12,159
cases the api case in the implementation

892
00:34:12,159 --> 00:34:14,480
case

893
00:34:15,199 --> 00:34:17,440
and then we have this list on the bottom

894
00:34:17,440 --> 00:34:18,719
with the implementation implements

895
00:34:18,719 --> 00:34:20,399
package where you could

896
00:34:20,399 --> 00:34:23,280
list all the packages that are

897
00:34:23,280 --> 00:34:24,480
that are implemented whether they are

898
00:34:24,480 --> 00:34:27,760
part of the api or not

899
00:34:30,719 --> 00:34:34,480
and then in yang library we would add a

900
00:34:34,480 --> 00:34:35,839
reference

901
00:34:35,839 --> 00:34:38,560
to the implementation package

902
00:34:38,560 --> 00:34:41,440
for for schemas so that you can see you

903
00:34:41,440 --> 00:34:43,280
can move over from one from the young

904
00:34:43,280 --> 00:34:45,040
library world to the packages world if

905
00:34:45,040 --> 00:34:48,119
you like

906
00:34:50,239 --> 00:34:51,040
and

907
00:34:51,040 --> 00:34:53,359
we are considering having two different

908
00:34:53,359 --> 00:34:55,520
lists of packages uh

909
00:34:55,520 --> 00:34:57,119
to make this even more clear than to

910
00:34:57,119 --> 00:34:58,640
have a

911
00:34:58,640 --> 00:35:01,040
packages and the api and the packages

912
00:35:01,040 --> 00:35:04,320
implementation underneath

913
00:35:05,119 --> 00:35:06,560
but this is still under discussion we

914
00:35:06,560 --> 00:35:08,880
don't know

915
00:35:09,599 --> 00:35:10,880
here's an example what it won't look

916
00:35:10,880 --> 00:35:12,320
like

917
00:35:12,320 --> 00:35:14,640
you have an api package that could be

918
00:35:14,640 --> 00:35:16,640
coming from ipf so it's routing for

919
00:35:16,640 --> 00:35:18,560
example this corresponds rather well

920
00:35:18,560 --> 00:35:20,880
with how people think about

921
00:35:20,880 --> 00:35:23,520
modules and sets of modules

922
00:35:23,520 --> 00:35:26,160
and it's routing would then consist of

923
00:35:26,160 --> 00:35:31,040
itf network device idfpgp and itf is is

924
00:35:31,040 --> 00:35:33,440
in the particular versions

925
00:35:33,440 --> 00:35:35,440
but it would also list packs that is

926
00:35:35,440 --> 00:35:37,760
compatible with that we know that would

927
00:35:37,760 --> 00:35:39,359
work here it's not part of the package

928
00:35:39,359 --> 00:35:41,040
so if you say if the device says that it

929
00:35:41,040 --> 00:35:43,040
supports itf routing we would know it

930
00:35:43,040 --> 00:35:45,920
has itf bhp and isis but it would not

931
00:35:45,920 --> 00:35:50,079
necessarily have rip vrp and eccles

932
00:35:50,079 --> 00:35:51,520
but it's still valuable to have the

933
00:35:51,520 --> 00:35:53,839
information about compatible packages

934
00:35:53,839 --> 00:35:57,119
as a designer can pick a package that

935
00:35:57,119 --> 00:36:00,079
should work well together

936
00:36:00,079 --> 00:36:01,440
and then

937
00:36:01,440 --> 00:36:02,560
on the right side we have the

938
00:36:02,560 --> 00:36:04,160
implementation package example we call

939
00:36:04,160 --> 00:36:05,920
it vendor router

940
00:36:05,920 --> 00:36:06,880
and

941
00:36:06,880 --> 00:36:08,480
here you have

942
00:36:08,480 --> 00:36:09,920
things like supported features which is

943
00:36:09,920 --> 00:36:12,720
not relevant for an api package and it

944
00:36:12,720 --> 00:36:14,480
then this lists all the packages it's

945
00:36:14,480 --> 00:36:16,240
implementing for example

946
00:36:16,240 --> 00:36:18,079
those that were required

947
00:36:18,079 --> 00:36:20,400
idf routing along with network device

948
00:36:20,400 --> 00:36:22,880
and bgp and isis but it also supports

949
00:36:22,880 --> 00:36:26,000
vrp and eccles

950
00:36:26,000 --> 00:36:27,680
it has

951
00:36:27,680 --> 00:36:29,440
some modules that are not part of any

952
00:36:29,440 --> 00:36:31,920
package really added on top of the thing

953
00:36:31,920 --> 00:36:33,680
and that is this case we have this

954
00:36:33,680 --> 00:36:36,960
vendor pgp deviations module

955
00:36:36,960 --> 00:36:38,079
that's

956
00:36:38,079 --> 00:36:39,920
topping off the whole thing so this is

957
00:36:39,920 --> 00:36:41,200
the sort of

958
00:36:41,200 --> 00:36:43,200
idea that

959
00:36:43,200 --> 00:36:44,800
we think about when it comes to packages

960
00:36:44,800 --> 00:36:47,119
for now

961
00:36:52,160 --> 00:36:54,560
so this is discussion uh is this split

962
00:36:54,560 --> 00:36:56,720
between api and implementation packages

963
00:36:56,720 --> 00:36:58,400
useful do you think

964
00:36:58,400 --> 00:37:02,920
it's an open question to the thor

965
00:37:13,119 --> 00:37:15,760
i'll wait another 10 or 15 seconds if

966
00:37:15,760 --> 00:37:16,960
somebody wants to say something

967
00:37:16,960 --> 00:37:20,760
otherwise i'll move on

968
00:37:23,599 --> 00:37:25,839
so is your question of

969
00:37:25,839 --> 00:37:27,920
on a feature level or an implementation

970
00:37:27,920 --> 00:37:29,040
level

971
00:37:29,040 --> 00:37:30,880
you know are you are you asking is this

972
00:37:30,880 --> 00:37:33,839
capability needed or is this realization

973
00:37:33,839 --> 00:37:35,359
of that capability

974
00:37:35,359 --> 00:37:36,560
a

975
00:37:36,560 --> 00:37:37,599
um

976
00:37:37,599 --> 00:37:39,760
the right way to go

977
00:37:39,760 --> 00:37:41,599
yeah i mean what i'm really asking for

978
00:37:41,599 --> 00:37:43,440
is this concept that we should spend

979
00:37:43,440 --> 00:37:46,079
time on in in the group

980
00:37:46,079 --> 00:37:47,280
do you think okay

981
00:37:47,280 --> 00:37:50,079
we have a few people in the queue benoit

982
00:37:50,079 --> 00:37:52,160
first and then in room second and then

983
00:37:52,160 --> 00:37:54,879
tom next

984
00:37:55,200 --> 00:37:57,440
oh okay

985
00:37:57,440 --> 00:37:59,359
so

986
00:37:59,359 --> 00:38:01,599
i think the implementation package is

987
00:38:01,599 --> 00:38:04,400
the most useful one out of the two

988
00:38:04,400 --> 00:38:07,920
the the other one might be interesting

989
00:38:07,920 --> 00:38:10,880
uh let's see if if the implementation

990
00:38:10,880 --> 00:38:12,240
package

991
00:38:12,240 --> 00:38:13,760
first work

992
00:38:13,760 --> 00:38:16,480
works if it does then maybe it's a nice

993
00:38:16,480 --> 00:38:19,520
to have to say the itf is proposing

994
00:38:19,520 --> 00:38:21,839
this bigger package

995
00:38:21,839 --> 00:38:23,920
that you call api and by the way apis

996
00:38:23,920 --> 00:38:26,160
work to me because most of them are apis

997
00:38:26,160 --> 00:38:29,119
but the itf is targeting this

998
00:38:29,119 --> 00:38:32,720
specific set of modules to work together

999
00:38:32,720 --> 00:38:35,760
so if you have to focus in phases well

1000
00:38:35,760 --> 00:38:37,520
obviously implement implemented

1001
00:38:37,520 --> 00:38:40,000
implementation package one is the one to

1002
00:38:40,000 --> 00:38:41,760
go with

1003
00:38:41,760 --> 00:38:43,680
in my mind thank you jan

1004
00:38:43,680 --> 00:38:46,839
thank you

1005
00:38:47,359 --> 00:38:49,040
tom hill bt

1006
00:38:49,040 --> 00:38:51,440
um i'm going to say exactly the opposite

1007
00:38:51,440 --> 00:38:53,119
of memoir

1008
00:38:53,119 --> 00:38:55,680
i feel like the api packages are

1009
00:38:55,680 --> 00:38:58,240
absolutely

1010
00:38:59,119 --> 00:39:01,040
the type of package that i would prefer

1011
00:39:01,040 --> 00:39:03,280
i would much prefer my devices to do

1012
00:39:03,280 --> 00:39:05,760
what i tell them instead of tell me what

1013
00:39:05,760 --> 00:39:08,480
they would like to do

1014
00:39:08,960 --> 00:39:11,119
thank you but to answer the question can

1015
00:39:11,119 --> 00:39:12,720
you repeat your name please useful

1016
00:39:12,720 --> 00:39:15,280
discussion

1017
00:39:15,280 --> 00:39:16,480
thank you

1018
00:39:16,480 --> 00:39:17,680
can you repeat your name i don't know

1019
00:39:17,680 --> 00:39:18,880
who that was

1020
00:39:18,880 --> 00:39:22,880
tom hill bt ah thanks tom

1021
00:39:24,400 --> 00:39:27,920
so i see myself next in queue and i was

1022
00:39:27,920 --> 00:39:29,359
going to say that

1023
00:39:29,359 --> 00:39:31,359
something along the lines of

1024
00:39:31,359 --> 00:39:33,520
tom that you know as a

1025
00:39:33,520 --> 00:39:34,960
from a

1026
00:39:34,960 --> 00:39:36,800
a provider standpoint or a user

1027
00:39:36,800 --> 00:39:38,079
standpoint

1028
00:39:38,079 --> 00:39:40,640
i could see wanting to define a package

1029
00:39:40,640 --> 00:39:42,400
and then have my vendor tell me what

1030
00:39:42,400 --> 00:39:44,320
they actually do so

1031
00:39:44,320 --> 00:39:46,880
i i i think it's a useful concept also

1032
00:39:46,880 --> 00:39:50,000
from both perspectives

1033
00:39:50,079 --> 00:39:52,720
thanks that was my comment

1034
00:39:52,720 --> 00:39:55,879
thank you

1035
00:39:56,320 --> 00:39:58,160
uh

1036
00:39:58,160 --> 00:40:00,240
so

1037
00:40:00,240 --> 00:40:02,480
we have been discussing with uh about

1038
00:40:02,480 --> 00:40:04,720
how much optionality we should allow in

1039
00:40:04,720 --> 00:40:06,400
a package

1040
00:40:06,400 --> 00:40:07,920
uh

1041
00:40:07,920 --> 00:40:09,680
of course we want package to be a

1042
00:40:09,680 --> 00:40:11,839
flexible concept so that's you can say

1043
00:40:11,839 --> 00:40:13,680
yeah okay routing is here that means you

1044
00:40:13,680 --> 00:40:15,920
have a bgp and isis but you could also

1045
00:40:15,920 --> 00:40:18,400
have erp and icons in there

1046
00:40:18,400 --> 00:40:20,240
and those are then this optional

1047
00:40:20,240 --> 00:40:23,280
packages but from a client perspective

1048
00:40:23,280 --> 00:40:25,440
this reduces the value of packages

1049
00:40:25,440 --> 00:40:27,359
because it would be nice if if clients

1050
00:40:27,359 --> 00:40:29,280
could just connect to a server

1051
00:40:29,280 --> 00:40:31,359
and or see oh you have these four

1052
00:40:31,359 --> 00:40:33,200
packages and then i know what it means

1053
00:40:33,200 --> 00:40:36,079
exactly i know what i can do because if

1054
00:40:36,079 --> 00:40:37,440
some things are optional then it needs

1055
00:40:37,440 --> 00:40:40,079
to drill down deeper and say oh so you

1056
00:40:40,079 --> 00:40:42,000
have routing but you specifically have

1057
00:40:42,000 --> 00:40:43,520
vrp

1058
00:40:43,520 --> 00:40:46,319
so there's a lot more work for a client

1059
00:40:46,319 --> 00:40:49,839
to figure out if things are optional

1060
00:40:49,839 --> 00:40:52,079
so then the second alternative is to not

1061
00:40:52,079 --> 00:40:53,680
allow optional modules but have this

1062
00:40:53,680 --> 00:40:56,079
list of compatible modules

1063
00:40:56,079 --> 00:40:57,520
that

1064
00:40:57,520 --> 00:40:59,119
to make it easy for designers to figure

1065
00:40:59,119 --> 00:41:01,119
out which combinations of packages might

1066
00:41:01,119 --> 00:41:02,880
work well together

1067
00:41:02,880 --> 00:41:05,119
and this is still certainly being

1068
00:41:05,119 --> 00:41:06,640
discussed

1069
00:41:06,640 --> 00:41:08,879
and

1070
00:41:09,040 --> 00:41:11,760
we feel that probably or leading a bit

1071
00:41:11,760 --> 00:41:13,920
towards the second choice here but it's

1072
00:41:13,920 --> 00:41:17,400
still very open

1073
00:41:20,000 --> 00:41:22,480
and if we want to have um

1074
00:41:22,480 --> 00:41:24,800
optional modules we have been designing

1075
00:41:24,800 --> 00:41:27,040
it like this in the yang we have a field

1076
00:41:27,040 --> 00:41:28,400
called optional which could be true or

1077
00:41:28,400 --> 00:41:29,599
false

1078
00:41:29,599 --> 00:41:30,720
and

1079
00:41:30,720 --> 00:41:32,720
both for on the package level and on the

1080
00:41:32,720 --> 00:41:34,400
module level

1081
00:41:34,400 --> 00:41:36,000
so it could be listed there

1082
00:41:36,000 --> 00:41:38,160
if we wanted to have optional features

1083
00:41:38,160 --> 00:41:39,599
in packages

1084
00:41:39,599 --> 00:41:41,520
and with option two it might look like

1085
00:41:41,520 --> 00:41:43,119
this instead that you don't have any

1086
00:41:43,119 --> 00:41:45,760
optional leaf but on at the end we have

1087
00:41:45,760 --> 00:41:48,720
a separate list of compatible packages

1088
00:41:48,720 --> 00:41:50,720
and compatible modules

1089
00:41:50,720 --> 00:41:52,480
that are not part of the specification

1090
00:41:52,480 --> 00:41:53,599
of this

1091
00:41:53,599 --> 00:41:54,800
package

1092
00:41:54,800 --> 00:41:56,160
but could be

1093
00:41:56,160 --> 00:41:57,760
seen as guidance for

1094
00:41:57,760 --> 00:41:59,119
designers

1095
00:41:59,119 --> 00:42:00,480
that are picking additional

1096
00:42:00,480 --> 00:42:02,720
functionality

1097
00:42:02,720 --> 00:42:04,640
i see charles

1098
00:42:04,640 --> 00:42:05,839
yeah um

1099
00:42:05,839 --> 00:42:07,920
yeah this is charles but actually tom i

1100
00:42:07,920 --> 00:42:09,359
just wanted to ask you to come back up

1101
00:42:09,359 --> 00:42:10,560
because there were a couple questions

1102
00:42:10,560 --> 00:42:12,000
regarding your

1103
00:42:12,000 --> 00:42:13,599
statement just i think people didn't

1104
00:42:13,599 --> 00:42:15,760
hear you well at the mic so maybe just

1105
00:42:15,760 --> 00:42:17,839
get a little closer to the mic so we're

1106
00:42:17,839 --> 00:42:20,240
having tom hill come back up again

1107
00:42:20,240 --> 00:42:22,720
hello um it was quite loud in the room

1108
00:42:22,720 --> 00:42:26,640
so i apologize if i wasn't well heard

1109
00:42:28,400 --> 00:42:29,200
so

1110
00:42:29,200 --> 00:42:31,359
just to repeat what i what i said i i

1111
00:42:31,359 --> 00:42:33,280
was going to point out the opposite of

1112
00:42:33,280 --> 00:42:34,800
of what benoit

1113
00:42:34,800 --> 00:42:37,520
um had iterated i

1114
00:42:37,520 --> 00:42:38,319
am

1115
00:42:38,319 --> 00:42:42,640
much more in favor of api packages than

1116
00:42:42,640 --> 00:42:44,400
implementation packages

1117
00:42:44,400 --> 00:42:46,160
and the reasoning behind that is because

1118
00:42:46,160 --> 00:42:49,280
i would like to define what my routers

1119
00:42:49,280 --> 00:42:51,280
across multiple vendor types multiple

1120
00:42:51,280 --> 00:42:53,520
software versions what they adhere to

1121
00:42:53,520 --> 00:42:55,359
and the power the packages that they

1122
00:42:55,359 --> 00:42:58,960
would and the modules that they would

1123
00:42:58,960 --> 00:43:01,280
form into yang

1124
00:43:01,280 --> 00:43:03,119
rather than query them and ask them what

1125
00:43:03,119 --> 00:43:04,640
they can do

1126
00:43:04,640 --> 00:43:06,720
i need to be quite prescriptive about

1127
00:43:06,720 --> 00:43:08,800
making sure that they are in

1128
00:43:08,800 --> 00:43:11,200
uh aligned in the the yang that they

1129
00:43:11,200 --> 00:43:13,440
generate

1130
00:43:13,440 --> 00:43:15,520
and that's why

1131
00:43:15,520 --> 00:43:18,480
i think i prefer the api package

1132
00:43:18,480 --> 00:43:20,480
i can see reasons for both but i prefer

1133
00:43:20,480 --> 00:43:22,640
the api package i can't see any of the

1134
00:43:22,640 --> 00:43:24,720
questions in the chat today so

1135
00:43:24,720 --> 00:43:26,800
were there any specifics

1136
00:43:26,800 --> 00:43:28,800
no just that they they hadn't actually

1137
00:43:28,800 --> 00:43:30,079
let me see what

1138
00:43:30,079 --> 00:43:32,160
exactly scott said

1139
00:43:32,160 --> 00:43:34,000
he said i didn't hear tom very well was

1140
00:43:34,000 --> 00:43:36,160
the point about listing conformance as

1141
00:43:36,160 --> 00:43:38,720
part of the package

1142
00:43:38,720 --> 00:43:41,280
it's about enforcing conformance to a

1143
00:43:41,280 --> 00:43:43,599
standard i i don't particularly see it

1144
00:43:43,599 --> 00:43:45,440
particularly i don't see it extremely

1145
00:43:45,440 --> 00:43:46,640
useful

1146
00:43:46,640 --> 00:43:48,640
to have a router tell me what it can do

1147
00:43:48,640 --> 00:43:50,160
if all of them are telling me something

1148
00:43:50,160 --> 00:43:51,839
different

1149
00:43:51,839 --> 00:43:54,160
so as far as standardization goes i

1150
00:43:54,160 --> 00:43:56,720
would like to be more prescriptive

1151
00:43:56,720 --> 00:43:59,040
thank you

1152
00:44:01,839 --> 00:44:03,760
very much so i would like to come back

1153
00:44:03,760 --> 00:44:05,839
to that as well i understand as an

1154
00:44:05,839 --> 00:44:08,880
operator that you want to request

1155
00:44:08,880 --> 00:44:11,440
you know young support as packages from

1156
00:44:11,440 --> 00:44:13,119
multiple vendors

1157
00:44:13,119 --> 00:44:15,440
now and that's obvious right

1158
00:44:15,440 --> 00:44:18,079
now jan can you go back to a previous

1159
00:44:18,079 --> 00:44:20,640
slide where we're comparing

1160
00:44:20,640 --> 00:44:22,880
this one exactly right

1161
00:44:22,880 --> 00:44:25,280
so the one on the left is the list of

1162
00:44:25,280 --> 00:44:27,280
things that typically you would ask from

1163
00:44:27,280 --> 00:44:29,440
different vendors right and you would

1164
00:44:29,440 --> 00:44:31,760
say give me this set because i need to

1165
00:44:31,760 --> 00:44:34,079
be interoperable right the one on the

1166
00:44:34,079 --> 00:44:35,200
left

1167
00:44:35,200 --> 00:44:36,960
and then the one on the right is okay

1168
00:44:36,960 --> 00:44:38,800
what are the vendors doing right now at

1169
00:44:38,800 --> 00:44:41,119
different stages

1170
00:44:41,119 --> 00:44:42,000
that's

1171
00:44:42,000 --> 00:44:43,680
the way i understand the one on the

1172
00:44:43,680 --> 00:44:45,440
right which is like

1173
00:44:45,440 --> 00:44:48,000
okay you aspire to go to the one the

1174
00:44:48,000 --> 00:44:49,920
left and right now because there are

1175
00:44:49,920 --> 00:44:52,079
different versions it's life cycle etc

1176
00:44:52,079 --> 00:44:54,000
you have the one on the right so my

1177
00:44:54,000 --> 00:44:55,680
question is

1178
00:44:55,680 --> 00:44:59,040
is is it the right way to formalize the

1179
00:44:59,040 --> 00:45:01,280
one on the left and if you go back to

1180
00:45:01,280 --> 00:45:03,520
your previous slide uh yam

1181
00:45:03,520 --> 00:45:04,960
right

1182
00:45:04,960 --> 00:45:07,680
this one is it the right way tom to

1183
00:45:07,680 --> 00:45:09,680
formalize all this

1184
00:45:09,680 --> 00:45:12,880
the one from the itf one in this format

1185
00:45:12,880 --> 00:45:15,359
because you want to compare easily what

1186
00:45:15,359 --> 00:45:17,920
you want to have with what you are

1187
00:45:17,920 --> 00:45:19,920
receiving right now from the different

1188
00:45:19,920 --> 00:45:21,440
vendors

1189
00:45:21,440 --> 00:45:23,839
or just telling the vendors this is my

1190
00:45:23,839 --> 00:45:26,000
list of things i want in rfp

1191
00:45:26,000 --> 00:45:29,359
is good enough see my point

1192
00:45:30,000 --> 00:45:33,359
it doesn't help me if some of my router

1193
00:45:33,359 --> 00:45:34,480
vendors

1194
00:45:34,480 --> 00:45:36,000
are

1195
00:45:36,000 --> 00:45:37,839
producing yang that is different to the

1196
00:45:37,839 --> 00:45:38,960
others

1197
00:45:38,960 --> 00:45:41,920
so i can i can entirely see why we would

1198
00:45:41,920 --> 00:45:42,880
want

1199
00:45:42,880 --> 00:45:45,280
to have both types of packages

1200
00:45:45,280 --> 00:45:46,960
it might suit different

1201
00:45:46,960 --> 00:45:48,240
operators

1202
00:45:48,240 --> 00:45:50,000
absolutely fine but for me

1203
00:45:50,000 --> 00:45:52,079
lots of networks lots of platforms lots

1204
00:45:52,079 --> 00:45:53,599
of vendors

1205
00:45:53,599 --> 00:45:56,319
and i don't want to write extra code

1206
00:45:56,319 --> 00:45:59,040
i need to be more prescriptive

1207
00:45:59,040 --> 00:46:02,160
and focus on enforcing the left

1208
00:46:02,160 --> 00:46:03,920
and not

1209
00:46:03,920 --> 00:46:06,160
we might forego some features

1210
00:46:06,160 --> 00:46:08,240
but we're also hoping to encourage

1211
00:46:08,240 --> 00:46:11,200
interoperability across vendors which is

1212
00:46:11,200 --> 00:46:12,960
why i would like to be more prescriptive

1213
00:46:12,960 --> 00:46:16,160
about the packages and the modules

1214
00:46:16,160 --> 00:46:18,160
rather than query the router and say

1215
00:46:18,160 --> 00:46:20,640
what can you do

1216
00:46:20,640 --> 00:46:23,359
and say i would like you to do this

1217
00:46:23,359 --> 00:46:24,880
specific thing

1218
00:46:24,880 --> 00:46:26,960
so typically you would have what i see

1219
00:46:26,960 --> 00:46:29,680
on the screen the left one and this is

1220
00:46:29,680 --> 00:46:31,520
what you want to do

1221
00:46:31,520 --> 00:46:33,040
what we have today is basically the

1222
00:46:33,040 --> 00:46:35,119
right sorry what we have today is mostly

1223
00:46:35,119 --> 00:46:36,960
the right exactly and then

1224
00:46:36,960 --> 00:46:39,440
what we need is the left

1225
00:46:39,440 --> 00:46:41,280
exactly and then we want to have tooling

1226
00:46:41,280 --> 00:46:42,640
that would just compare two views and

1227
00:46:42,640 --> 00:46:44,480
you could just say from a tooling point

1228
00:46:44,480 --> 00:46:46,480
of view this is not what i want vendor

1229
00:46:46,480 --> 00:46:48,160
you go back and upgrade your router

1230
00:46:48,160 --> 00:46:50,800
implement more etc yes and if i can

1231
00:46:50,800 --> 00:46:53,280
point at a package an api package and

1232
00:46:53,280 --> 00:46:56,319
say please support this that's why i

1233
00:46:56,319 --> 00:46:58,160
would that's what i would like to see

1234
00:46:58,160 --> 00:46:59,440
thank you

1235
00:46:59,440 --> 00:47:01,280
you have several more in queue i don't

1236
00:47:01,280 --> 00:47:03,440
know if uh benoit and tom want to stay

1237
00:47:03,440 --> 00:47:04,800
around because it might

1238
00:47:04,800 --> 00:47:07,760
be relevant uh robert

1239
00:47:07,760 --> 00:47:10,880
or rob sorry yeah so robinson um

1240
00:47:10,880 --> 00:47:12,640
speaking as a contributor so i just

1241
00:47:12,640 --> 00:47:15,119
wanted to emphasize that this these two

1242
00:47:15,119 --> 00:47:16,319
types patches are solving different

1243
00:47:16,319 --> 00:47:18,160
problems as has been has been discussed

1244
00:47:18,160 --> 00:47:20,640
here that the api package is trying to

1245
00:47:20,640 --> 00:47:23,280
to give the specification of what

1246
00:47:23,280 --> 00:47:24,480
is desired

1247
00:47:24,480 --> 00:47:26,240
and the implementation packages is

1248
00:47:26,240 --> 00:47:28,160
giving the real implementation of saying

1249
00:47:28,160 --> 00:47:29,920
for a particular device this is what

1250
00:47:29,920 --> 00:47:32,079
it's doing and you may have that

1251
00:47:32,079 --> 00:47:33,839
implementation package just being served

1252
00:47:33,839 --> 00:47:35,839
up from the device itself in the same

1253
00:47:35,839 --> 00:47:37,119
way that yang

1254
00:47:37,119 --> 00:47:39,599
library gives you that information today

1255
00:47:39,599 --> 00:47:42,559
and it also allows a vendor to advertise

1256
00:47:42,559 --> 00:47:44,800
that off the box and say for my

1257
00:47:44,800 --> 00:47:47,280
particular version of this os

1258
00:47:47,280 --> 00:47:48,880
these these the packages that i

1259
00:47:48,880 --> 00:47:51,119
implement the apis that i implement

1260
00:47:51,119 --> 00:47:52,720
and i have these deviations because i

1261
00:47:52,720 --> 00:47:54,000
can't implement them completely

1262
00:47:54,000 --> 00:47:55,280
faithfully

1263
00:47:55,280 --> 00:47:57,040
but it allows the the people who write

1264
00:47:57,040 --> 00:47:58,800
the instrument instrumentation code to

1265
00:47:58,800 --> 00:48:00,800
know what those differences are so it's

1266
00:48:00,800 --> 00:48:03,040
about one is about advertising what you

1267
00:48:03,040 --> 00:48:04,640
want to be doing and the other one is

1268
00:48:04,640 --> 00:48:06,480
about advertising conformance that's

1269
00:48:06,480 --> 00:48:09,520
mainly coming from a device

1270
00:48:14,559 --> 00:48:17,800
thanks rob

1271
00:48:32,960 --> 00:48:34,400
done my homework

1272
00:48:34,400 --> 00:48:36,800
uh the thing i'd observe here is that

1273
00:48:36,800 --> 00:48:39,200
there's sort of a heating set of

1274
00:48:39,200 --> 00:48:41,200
requirements and we've touched on some

1275
00:48:41,200 --> 00:48:42,160
of them

1276
00:48:42,160 --> 00:48:44,319
what i would sort of highlight

1277
00:48:44,319 --> 00:48:46,400
a desired behavior is

1278
00:48:46,400 --> 00:48:49,040
as much as the thing on the left is what

1279
00:48:49,040 --> 00:48:51,200
people may want you know here's a

1280
00:48:51,200 --> 00:48:53,040
set of things that are supporting a set

1281
00:48:53,040 --> 00:48:55,760
of protocols and the modules are

1282
00:48:55,760 --> 00:48:57,200
part of them

1283
00:48:57,200 --> 00:48:59,920
what is perhaps better to focus on is

1284
00:48:59,920 --> 00:49:00,800
the

1285
00:49:00,800 --> 00:49:02,880
top deliverable is

1286
00:49:02,880 --> 00:49:06,160
for a given module egp is an example

1287
00:49:06,160 --> 00:49:07,839
it's going to have a set of dependencies

1288
00:49:07,839 --> 00:49:10,480
and other modules and we look for for

1289
00:49:10,480 --> 00:49:12,079
that version bjp

1290
00:49:12,079 --> 00:49:14,000
what is the compatible set of it modules

1291
00:49:14,000 --> 00:49:15,920
that you pull into you know implement

1292
00:49:15,920 --> 00:49:18,960
bgp or any of the other protocols

1293
00:49:18,960 --> 00:49:21,359
ideally just like with uh

1294
00:49:21,359 --> 00:49:23,119
linux distribution

1295
00:49:23,119 --> 00:49:25,119
when you have the sets of things that

1296
00:49:25,119 --> 00:49:27,280
are compatible the expectation is that a

1297
00:49:27,280 --> 00:49:29,839
method of these things will all pull in

1298
00:49:29,839 --> 00:49:32,319
compatible libraries across the board so

1299
00:49:32,319 --> 00:49:34,480
if i pull in bgp and it depends on ietf

1300
00:49:34,480 --> 00:49:37,040
routing and if i pull an isis it

1301
00:49:37,040 --> 00:49:40,000
shouldn't be incompatible

1302
00:49:40,000 --> 00:49:41,839
so i i think the

1303
00:49:41,839 --> 00:49:43,599
sort of list of what we want to be able

1304
00:49:43,599 --> 00:49:45,839
to get inquiry to have a particular

1305
00:49:45,839 --> 00:49:47,119
combination

1306
00:49:47,119 --> 00:49:48,319
what we

1307
00:49:48,319 --> 00:49:50,319
need to focus on is here's the

1308
00:49:50,319 --> 00:49:52,640
individual item and the things that are

1309
00:49:52,640 --> 00:49:54,240
independent and then make sure that all

1310
00:49:54,240 --> 00:49:56,240
of these pets harmonize each other and

1311
00:49:56,240 --> 00:49:58,720
fill in some

1312
00:50:08,960 --> 00:50:10,960
uh do you hear me

1313
00:50:10,960 --> 00:50:12,400
yes

1314
00:50:12,400 --> 00:50:14,800
so i think it would be very interesting

1315
00:50:14,800 --> 00:50:18,000
if we could uh specify a method or maybe

1316
00:50:18,000 --> 00:50:20,079
even a tool that would say that does

1317
00:50:20,079 --> 00:50:22,880
this implementation package fulfill the

1318
00:50:22,880 --> 00:50:24,880
api package

1319
00:50:24,880 --> 00:50:26,880
does it

1320
00:50:26,880 --> 00:50:28,480
does it do everything that the api

1321
00:50:28,480 --> 00:50:31,520
package is asking for

1322
00:50:31,520 --> 00:50:33,920
thank you

1323
00:50:34,079 --> 00:50:36,559
thank you yeah i think this that's part

1324
00:50:36,559 --> 00:50:40,559
of the discussion about optionality

1325
00:50:40,559 --> 00:50:41,920
we have been trying to make sure that

1326
00:50:41,920 --> 00:50:44,160
the package definitions are such that if

1327
00:50:44,160 --> 00:50:45,920
a package is announced we would know

1328
00:50:45,920 --> 00:50:48,240
rather quickly and easily from a client

1329
00:50:48,240 --> 00:50:49,040
side

1330
00:50:49,040 --> 00:50:51,839
if that package is fully implemented we

1331
00:50:51,839 --> 00:50:53,760
of course have deviations that goes on

1332
00:50:53,760 --> 00:50:55,599
top of this and

1333
00:50:55,599 --> 00:50:58,079
it complicates the picture but

1334
00:50:58,079 --> 00:51:00,400
that is how we have been discussing

1335
00:51:00,400 --> 00:51:02,640
when it came to this question here uh

1336
00:51:02,640 --> 00:51:04,480
actually what we wanted to know really

1337
00:51:04,480 --> 00:51:07,040
was whether this concept of api separate

1338
00:51:07,040 --> 00:51:08,880
from implementation package was a

1339
00:51:08,880 --> 00:51:10,720
relevant concept

1340
00:51:10,720 --> 00:51:11,839
and from

1341
00:51:11,839 --> 00:51:13,680
the discussions that

1342
00:51:13,680 --> 00:51:15,599
came in here i think we struck a chord

1343
00:51:15,599 --> 00:51:17,280
and definitely feels like the

1344
00:51:17,280 --> 00:51:19,920
distinction here is meaningful to people

1345
00:51:19,920 --> 00:51:21,920
so that's a good thing to to understand

1346
00:51:21,920 --> 00:51:24,800
from this thank you

1347
00:51:25,920 --> 00:51:28,480
i only have a couple of uh slides left i

1348
00:51:28,480 --> 00:51:29,280
think

1349
00:51:29,280 --> 00:51:31,280
uh let me

1350
00:51:31,280 --> 00:51:33,599
yeah we talked about optional modules uh

1351
00:51:33,599 --> 00:51:35,440
and how that would look

1352
00:51:35,440 --> 00:51:37,839
the

1353
00:51:39,760 --> 00:51:42,240
i think we have already talked about

1354
00:51:42,240 --> 00:51:44,240
this so the last thing is about scheme

1355
00:51:44,240 --> 00:51:45,599
amount

1356
00:51:45,599 --> 00:51:47,280
uh as i mentioned earlier we have been

1357
00:51:47,280 --> 00:51:48,880
thinking about what happens if you have

1358
00:51:48,880 --> 00:51:49,599
a

1359
00:51:49,599 --> 00:51:51,680
mount point in a module that's inside a

1360
00:51:51,680 --> 00:51:53,200
package

1361
00:51:53,200 --> 00:51:55,599
can we in some way convey

1362
00:51:55,599 --> 00:51:57,760
what to clients what they will find at

1363
00:51:57,760 --> 00:52:00,559
that mount point

1364
00:52:01,200 --> 00:52:02,559
we have seen a number of different use

1365
00:52:02,559 --> 00:52:03,680
cases

1366
00:52:03,680 --> 00:52:04,720
and

1367
00:52:04,720 --> 00:52:07,359
for some of them it's fairly easy to

1368
00:52:07,359 --> 00:52:08,640
describe

1369
00:52:08,640 --> 00:52:10,800
you must find this or you must find one

1370
00:52:10,800 --> 00:52:12,240
of these

1371
00:52:12,240 --> 00:52:13,200
but

1372
00:52:13,200 --> 00:52:15,520
in a more general some of the more

1373
00:52:15,520 --> 00:52:17,839
advanced use cases it's kind of it gets

1374
00:52:17,839 --> 00:52:19,359
tricky to

1375
00:52:19,359 --> 00:52:21,040
describe this so we don't know exactly

1376
00:52:21,040 --> 00:52:22,800
how far we should take this in a

1377
00:52:22,800 --> 00:52:25,520
meaningful way

1378
00:52:27,359 --> 00:52:29,359
what we're looking at here is

1379
00:52:29,359 --> 00:52:32,240
for a young package instance to list the

1380
00:52:32,240 --> 00:52:34,000
mount points here and

1381
00:52:34,000 --> 00:52:36,720
then you can have

1382
00:52:37,119 --> 00:52:39,200
information about what packages that

1383
00:52:39,200 --> 00:52:42,960
might be or must be found there

1384
00:52:45,599 --> 00:52:47,359
and i think that was everything we had

1385
00:52:47,359 --> 00:52:48,400
from the

1386
00:52:48,400 --> 00:52:50,960
package perspective in the

1387
00:52:50,960 --> 00:52:54,839
versioning design team

1388
00:53:06,640 --> 00:53:11,040
so i think uh any any other questions

1389
00:53:11,520 --> 00:53:14,480
no none in the room no one in the queue

1390
00:53:14,480 --> 00:53:16,720
that's great so that was your last slide

1391
00:53:16,720 --> 00:53:17,680
right there

1392
00:53:17,680 --> 00:53:19,200
yes

1393
00:53:19,200 --> 00:53:22,240
so thank you very much

1394
00:53:22,400 --> 00:53:23,599
thank you

1395
00:53:23,599 --> 00:53:25,599
next up for your chin

1396
00:53:25,599 --> 00:53:29,480
see if i can get these slides

1397
00:53:36,319 --> 00:53:39,920
okay chin you should have control

1398
00:53:40,640 --> 00:53:43,640
okay

1399
00:53:47,839 --> 00:53:50,240
okay can you hear me

1400
00:53:50,240 --> 00:53:52,240
yes we can

1401
00:53:52,240 --> 00:53:54,000
okay thank you

1402
00:53:54,000 --> 00:53:55,280
good morning

1403
00:53:55,280 --> 00:53:57,760
everyone uh good afternoon uh this is

1404
00:53:57,760 --> 00:54:00,079
ching i'm going to uh present this

1405
00:54:00,079 --> 00:54:01,440
participating

1406
00:54:01,440 --> 00:54:02,319
pack

1407
00:54:02,319 --> 00:54:04,720
and the main objective is

1408
00:54:04,720 --> 00:54:07,200
status update the current version number

1409
00:54:07,200 --> 00:54:11,160
is version six

1410
00:54:12,880 --> 00:54:15,920
recapture a little bit about

1411
00:54:15,920 --> 00:54:18,559
why we propose this worker

1412
00:54:18,559 --> 00:54:21,359
self-describing data object tag

1413
00:54:21,359 --> 00:54:23,839
is very used to classify the data

1414
00:54:23,839 --> 00:54:26,319
especially for the operational data

1415
00:54:26,319 --> 00:54:28,800
and you can capture

1416
00:54:28,800 --> 00:54:29,680
those

1417
00:54:29,680 --> 00:54:33,040
data or example kpi data

1418
00:54:33,040 --> 00:54:35,280
so it's a you know similarly choose a

1419
00:54:35,280 --> 00:54:37,119
module tag another difference the

1420
00:54:37,119 --> 00:54:39,440
multitasker only used at the module

1421
00:54:39,440 --> 00:54:42,400
level and for the object tag

1422
00:54:42,400 --> 00:54:43,680
used at

1423
00:54:43,680 --> 00:54:46,000
the data node level

1424
00:54:46,000 --> 00:54:49,200
so self-described uh describing bit

1425
00:54:49,200 --> 00:54:51,440
object tag can be using streaming

1426
00:54:51,440 --> 00:54:53,440
telemetry scenario

1427
00:54:53,440 --> 00:54:55,440
targeted to reduce the

1428
00:54:55,440 --> 00:54:58,559
amount of the data export destination

1429
00:54:58,559 --> 00:55:00,720
so current status of this work has

1430
00:55:00,720 --> 00:55:03,200
already passed through the young doctor

1431
00:55:03,200 --> 00:55:05,280
last call review and also we got us

1432
00:55:05,280 --> 00:55:07,520
official review from agent pearl so many

1433
00:55:07,520 --> 00:55:08,720
thanks to

1434
00:55:08,720 --> 00:55:12,558
uh mahashi and asia

1435
00:55:13,839 --> 00:55:16,880
uh changed uh since the zero floor

1436
00:55:16,880 --> 00:55:20,480
and we actually made a two update this

1437
00:55:20,480 --> 00:55:21,760
is the

1438
00:55:21,760 --> 00:55:23,680
released actually the main change we

1439
00:55:23,680 --> 00:55:24,880
have made

1440
00:55:24,880 --> 00:55:27,200
the first we add user tag maintenance

1441
00:55:27,200 --> 00:55:29,200
clarification because

1442
00:55:29,200 --> 00:55:32,000
in the job we define not only user tag

1443
00:55:32,000 --> 00:55:34,799
but also ietf tag and reserve tag how

1444
00:55:34,799 --> 00:55:37,839
user tag is distinguished from other tag

1445
00:55:37,839 --> 00:55:40,640
so we add some clarification

1446
00:55:40,640 --> 00:55:43,599
and secondly we provide a guidance to

1447
00:55:43,599 --> 00:55:46,480
discriminate experts for evaluation

1448
00:55:46,480 --> 00:55:48,799
of young data model tag

1449
00:55:48,799 --> 00:55:51,359
registry and also young data object tag

1450
00:55:51,359 --> 00:55:53,359
prefix rejected

1451
00:55:53,359 --> 00:55:56,319
and we made a two update to the bigger

1452
00:55:56,319 --> 00:55:58,960
one and v2 with additional text

1453
00:55:58,960 --> 00:56:02,000
and we also enhance the security section

1454
00:56:02,000 --> 00:56:04,640
for the user pack management

1455
00:56:04,640 --> 00:56:06,079
and

1456
00:56:06,079 --> 00:56:08,079
in addition we actually based on young

1457
00:56:08,079 --> 00:56:10,319
computer review we changed the data

1458
00:56:10,319 --> 00:56:12,799
object name into the short name

1459
00:56:12,799 --> 00:56:14,160
and

1460
00:56:14,160 --> 00:56:16,000
and also we made some other additional

1461
00:56:16,000 --> 00:56:18,240
changes to address the region's comments

1462
00:56:18,240 --> 00:56:22,078
and comments from young doctor review

1463
00:56:22,640 --> 00:56:24,720
and first actually we

1464
00:56:24,720 --> 00:56:26,559
made an update to the figure man with

1465
00:56:26,559 --> 00:56:29,280
additional tags you can see

1466
00:56:29,280 --> 00:56:31,440
in the version uh four in the left

1467
00:56:31,440 --> 00:56:34,880
actually we only described the uh

1468
00:56:34,880 --> 00:56:37,119
the several tag

1469
00:56:37,119 --> 00:56:40,160
uh object tag and the metric tag and the

1470
00:56:40,160 --> 00:56:42,799
metric group tag property attacker and

1471
00:56:42,799 --> 00:56:43,839
discuss

1472
00:56:43,839 --> 00:56:46,240
just introduce the relation with the

1473
00:56:46,240 --> 00:56:47,839
data object

1474
00:56:47,839 --> 00:56:51,599
uh so in the version six actually we

1475
00:56:51,599 --> 00:56:52,640
uh

1476
00:56:52,640 --> 00:56:54,720
try to you know add additional tag which

1477
00:56:54,720 --> 00:56:56,640
because we already added the minor

1478
00:56:56,640 --> 00:56:59,280
source tags so we change the

1479
00:56:59,280 --> 00:57:00,960
metric group attack to

1480
00:57:00,960 --> 00:57:02,559
magic type tag

1481
00:57:02,559 --> 00:57:04,559
so this is kind of you know rewarding

1482
00:57:04,559 --> 00:57:07,200
and so you can see the change we have

1483
00:57:07,200 --> 00:57:08,799
already made

1484
00:57:08,799 --> 00:57:11,040
and this kind of mighty source attack is

1485
00:57:11,040 --> 00:57:12,640
not actually a new attacker it has

1486
00:57:12,640 --> 00:57:14,720
already been defined in this worker

1487
00:57:14,720 --> 00:57:17,760
mostly used to capture

1488
00:57:17,760 --> 00:57:19,119
the

1489
00:57:19,119 --> 00:57:22,880
data object from multiple source

1490
00:57:23,920 --> 00:57:27,040
so second change we actually uh made in

1491
00:57:27,040 --> 00:57:29,359
the ayanna section actually

1492
00:57:29,359 --> 00:57:31,680
we really need to provide guidance for

1493
00:57:31,680 --> 00:57:34,079
the designing the experts to

1494
00:57:34,079 --> 00:57:36,160
for for assignment policy

1495
00:57:36,160 --> 00:57:37,119
so

1496
00:57:37,119 --> 00:57:39,440
so we make a change to

1497
00:57:39,440 --> 00:57:42,799
section 9.1 and section 9.2

1498
00:57:42,799 --> 00:57:46,000
and for section 9.1 we we didn't

1499
00:57:46,000 --> 00:57:47,520
actually add

1500
00:57:47,520 --> 00:57:50,640
any specific guidance but we added some

1501
00:57:50,640 --> 00:57:53,520
statement actually to make sure that

1502
00:57:53,520 --> 00:57:55,760
presumption of the code point can be

1503
00:57:55,760 --> 00:57:56,960
granted

1504
00:57:56,960 --> 00:57:58,640
hold

1505
00:57:58,640 --> 00:58:02,480
and in section 9.2 actually we added the

1506
00:58:02,480 --> 00:58:05,119
guidance for the second expert

1507
00:58:05,119 --> 00:58:08,480
and to allow the expert to verify the

1508
00:58:08,480 --> 00:58:09,839
associated tag

1509
00:58:09,839 --> 00:58:12,000
to confirm a specific

1510
00:58:12,000 --> 00:58:17,880
criteria defined in rfc 51 1998

1511
00:58:20,240 --> 00:58:21,920
next is the user tag for meta

1512
00:58:21,920 --> 00:58:25,119
clarification and as we clarify we

1513
00:58:25,119 --> 00:58:25,920
uh

1514
00:58:25,920 --> 00:58:28,640
introduce we define the user tag and

1515
00:58:28,640 --> 00:58:30,960
ietf tag and also resolve attacker we

1516
00:58:30,960 --> 00:58:31,839
only

1517
00:58:31,839 --> 00:58:35,040
readjust the ietf tagger for usertag

1518
00:58:35,040 --> 00:58:38,559
maybe uh conflict with other

1519
00:58:38,559 --> 00:58:40,559
type of photogrammetries of tag so

1520
00:58:40,559 --> 00:58:43,119
because it can use prefix

1521
00:58:43,119 --> 00:58:44,720
started with a user

1522
00:58:44,720 --> 00:58:46,720
column or it can

1523
00:58:46,720 --> 00:58:48,880
have no prefix

1524
00:58:48,880 --> 00:58:51,200
so to address the issue actually we

1525
00:58:51,200 --> 00:58:53,680
added some collaboration text to make it

1526
00:58:53,680 --> 00:58:54,640
clear

1527
00:58:54,640 --> 00:58:56,160
so you can see the change we have

1528
00:58:56,160 --> 00:58:58,559
already made in the section

1529
00:58:58,559 --> 00:59:01,839
4.3 and also in the

1530
00:59:01,839 --> 00:59:03,040
top sec

1531
00:59:03,040 --> 00:59:05,119
in the beginning of the section

1532
00:59:05,119 --> 00:59:07,359
four

1533
00:59:09,119 --> 00:59:11,200
and uh next is about target management

1534
00:59:11,200 --> 00:59:12,400
conflicting

1535
00:59:12,400 --> 00:59:13,839
resolving

1536
00:59:13,839 --> 00:59:15,680
we think that this issue has to be

1537
00:59:15,680 --> 00:59:16,720
discussed

1538
00:59:16,720 --> 00:59:18,960
on net network manager we

1539
00:59:18,960 --> 00:59:20,319
actually this is

1540
00:59:20,319 --> 00:59:22,559
maybe not only applied to this job but

1541
00:59:22,559 --> 00:59:24,400
also applied to the module target that

1542
00:59:24,400 --> 00:59:26,799
has already published in the nether mode

1543
00:59:26,799 --> 00:59:28,160
the working group

1544
00:59:28,160 --> 00:59:30,559
and the problem is when

1545
00:59:30,559 --> 00:59:33,599
one client add or remove the tiger

1546
00:59:33,599 --> 00:59:34,799
uh

1547
00:59:34,799 --> 00:59:37,440
for some other client may get a wrong

1548
00:59:37,440 --> 00:59:38,640
data

1549
00:59:38,640 --> 00:59:39,440
uh

1550
00:59:39,440 --> 00:59:42,079
so we talked with uh agent on the list

1551
00:59:42,079 --> 00:59:43,760
about this and we think

1552
00:59:43,760 --> 00:59:47,520
what pack imaging mostly done in the

1553
00:59:47,520 --> 00:59:50,319
implementation stage better

1554
00:59:50,319 --> 00:59:52,559
we do see some cases you may

1555
00:59:52,559 --> 00:59:55,839
add a remote tag in the running timing

1556
00:59:55,839 --> 00:59:58,480
stages so how to deal with this so to

1557
00:59:58,480 --> 01:00:01,680
address this issue we added some text in

1558
01:00:01,680 --> 01:00:03,680
the security section to

1559
01:00:03,680 --> 01:00:05,280
really strictly the

1560
01:00:05,280 --> 01:00:06,400
client

1561
01:00:06,400 --> 01:00:09,599
with a specific client level or specific

1562
01:00:09,599 --> 01:00:11,200
privilege

1563
01:00:11,200 --> 01:00:12,640
and

1564
01:00:12,640 --> 01:00:15,280
this issue we actually we

1565
01:00:15,280 --> 01:00:18,240
posted on the list and we only solicited

1566
01:00:18,240 --> 01:00:20,559
feedback from audio tagger

1567
01:00:20,559 --> 01:00:23,760
also about having here the feedback

1568
01:00:23,760 --> 01:00:25,200
and the

1569
01:00:25,200 --> 01:00:26,960
so for next step we think of all the

1570
01:00:26,960 --> 01:00:29,920
issue we received has been addressed

1571
01:00:29,920 --> 01:00:32,880
and we are happy to receive any comments

1572
01:00:32,880 --> 01:00:34,799
in this meeting

1573
01:00:34,799 --> 01:00:35,760
yeah

1574
01:00:35,760 --> 01:00:38,000
thanks

1575
01:00:40,400 --> 01:00:42,799
hello hello yeah hi i'm in queue as

1576
01:00:42,799 --> 01:00:44,799
contributor uh if you don't mind going

1577
01:00:44,799 --> 01:00:47,440
back once a month

1578
01:00:50,880 --> 01:00:53,680
i'm not sure why tag is any different

1579
01:00:53,680 --> 01:00:55,119
than a

1580
01:00:55,119 --> 01:00:57,760
um any other read write

1581
01:00:57,760 --> 01:01:00,640
leaf here or leaf list

1582
01:01:00,640 --> 01:01:01,599
uh

1583
01:01:01,599 --> 01:01:02,480
you know

1584
01:01:02,480 --> 01:01:05,440
i i don't see how it um

1585
01:01:05,440 --> 01:01:07,599
reveals anything additional

1586
01:01:07,599 --> 01:01:09,440
than you would with anything that could

1587
01:01:09,440 --> 01:01:10,480
be written

1588
01:01:10,480 --> 01:01:12,480
um from a client

1589
01:01:12,480 --> 01:01:15,920
so maybe i'm missing something

1590
01:01:17,760 --> 01:01:19,040
yeah

1591
01:01:19,040 --> 01:01:21,359
this is actually based on the

1592
01:01:21,359 --> 01:01:23,760
comments raised by the agent and he

1593
01:01:23,760 --> 01:01:24,799
thinks

1594
01:01:24,799 --> 01:01:27,440
there's potential risk for this kind of

1595
01:01:27,440 --> 01:01:31,359
tiger imagine conflicting

1596
01:01:33,280 --> 01:01:35,280
i'm sorry

1597
01:01:35,280 --> 01:01:37,520
yeah

1598
01:01:37,520 --> 01:01:39,040
yeah so i don't see anything wrong with

1599
01:01:39,040 --> 01:01:41,040
the text that you add i just don't see

1600
01:01:41,040 --> 01:01:42,559
that it's a unique

1601
01:01:42,559 --> 01:01:45,920
um vulnerability

1602
01:01:45,920 --> 01:01:49,559
yeah i agree

1603
01:01:54,480 --> 01:01:56,880
okay uh rob go ahead

1604
01:01:56,880 --> 01:02:00,480
you're on the cube i'm checking out

1605
01:02:00,640 --> 01:02:03,440
uh wilton

1606
01:02:03,760 --> 01:02:07,200
sorry rob wilson as a participant so um

1607
01:02:07,200 --> 01:02:09,839
just looking in the module and use node

1608
01:02:09,839 --> 01:02:11,760
instance identifier which i think is the

1609
01:02:11,760 --> 01:02:13,760
right answer and it looks like that

1610
01:02:13,760 --> 01:02:15,839
allows you to

1611
01:02:15,839 --> 01:02:18,400
associate a tag with a particular

1612
01:02:18,400 --> 01:02:21,119
instance in the data store or also gives

1613
01:02:21,119 --> 01:02:22,559
you the flexibility of leaving the keys

1614
01:02:22,559 --> 01:02:24,960
out and associating a tag with

1615
01:02:24,960 --> 01:02:25,760
um

1616
01:02:25,760 --> 01:02:27,839
all instances or a subset of instances

1617
01:02:27,839 --> 01:02:29,440
is my first question is is that the

1618
01:02:29,440 --> 01:02:31,280
intention seems like it's a good thing

1619
01:02:31,280 --> 01:02:34,720
to do and if it is um it may be helpful

1620
01:02:34,720 --> 01:02:37,039
to to to sort of spell that out and

1621
01:02:37,039 --> 01:02:38,880
clarify that in the draft that these

1622
01:02:38,880 --> 01:02:40,960
that you have that flexibility uh when

1623
01:02:40,960 --> 01:02:43,599
you're using this

1624
01:02:45,119 --> 01:02:47,760
yeah we we do have some examples in

1625
01:02:47,760 --> 01:02:50,240
appendix actually to you know use this

1626
01:02:50,240 --> 01:02:51,599
attacker to

1627
01:02:51,599 --> 01:02:54,480
apply to the instance the data object

1628
01:02:54,480 --> 01:02:56,960
so we have such kind of flexibility so

1629
01:02:56,960 --> 01:02:59,359
do you think we need to add some text in

1630
01:02:59,359 --> 01:03:01,359
a normative part

1631
01:03:01,359 --> 01:03:03,599
to

1632
01:03:03,599 --> 01:03:05,760
spell this out

1633
01:03:05,760 --> 01:03:08,240
um i need to check i only have a quick

1634
01:03:08,240 --> 01:03:10,720
look um so maybe the text is there but i

1635
01:03:10,720 --> 01:03:12,559
think spelling that time if it's not

1636
01:03:12,559 --> 01:03:14,880
there already would be helpful so

1637
01:03:14,880 --> 01:03:18,480
i just are just gripping it for the um

1638
01:03:18,480 --> 01:03:19,200
uh

1639
01:03:19,200 --> 01:03:22,400
attack the um yang type so so it might

1640
01:03:22,400 --> 01:03:24,160
be there already but it's be useful over

1641
01:03:24,160 --> 01:03:26,720
there if you can

1642
01:03:27,440 --> 01:03:31,839
okay okay got it thank you

1643
01:03:45,920 --> 01:03:49,200
so any other comments

1644
01:03:54,799 --> 01:03:59,599
okay uh thank you i think that's uh

1645
01:03:59,599 --> 01:04:01,359
all you have right thank you

1646
01:04:01,359 --> 01:04:03,280
yeah uh but oh you so you think the

1647
01:04:03,280 --> 01:04:04,960
document's ready for uh working with

1648
01:04:04,960 --> 01:04:07,039
last call right so we didn't talk about

1649
01:04:07,039 --> 01:04:08,079
that

1650
01:04:08,079 --> 01:04:10,400
uh yes

1651
01:04:10,400 --> 01:04:12,720
yeah whether we last call immediately or

1652
01:04:12,720 --> 01:04:15,200
not it's good it's a good time to get uh

1653
01:04:15,200 --> 01:04:18,160
extra review from the working group um

1654
01:04:18,160 --> 01:04:20,799
the chairs will uh discuss the the

1655
01:04:20,799 --> 01:04:23,039
working glass call after the meeting um

1656
01:04:23,039 --> 01:04:24,960
personally i don't see any reason not to

1657
01:04:24,960 --> 01:04:27,520
do that but you know that's just

1658
01:04:27,520 --> 01:04:30,000
one opinion

1659
01:04:30,000 --> 01:04:33,280
i'll definitely talk with the co-chairs

1660
01:04:33,280 --> 01:04:36,480
okay thank you thank you

1661
01:04:38,160 --> 01:04:40,400
i think we're going to move it on to

1662
01:04:40,400 --> 01:04:44,160
system defined configuration

1663
01:04:44,640 --> 01:04:48,759
give me a moment to switch slides

1664
01:04:55,520 --> 01:04:58,640
yeah i think i have requested to

1665
01:04:58,640 --> 01:05:02,160
share those slides oh okay i got it

1666
01:05:02,160 --> 01:05:04,558
thank you

1667
01:05:05,839 --> 01:05:06,839
so hello

1668
01:05:06,839 --> 01:05:08,240
everyone good night

1669
01:05:08,240 --> 01:05:11,200
and this presentation is about the

1670
01:05:11,200 --> 01:05:14,000
system defined collaboration work with

1671
01:05:14,000 --> 01:05:18,720
that we have the and in john this work

1672
01:05:18,720 --> 01:05:19,680
and

1673
01:05:19,680 --> 01:05:22,240
so this last item meeting where i just

1674
01:05:22,240 --> 01:05:25,200
do a lot of passion on knowing this

1675
01:05:25,200 --> 01:05:28,079
about the open issues of this work

1676
01:05:28,079 --> 01:05:30,160
so thank you everyone for getting

1677
01:05:30,160 --> 01:05:32,319
involved in this work and sharing her

1678
01:05:32,319 --> 01:05:35,039
great ideas about his work

1679
01:05:35,039 --> 01:05:37,839
and there are a few issues which i

1680
01:05:37,839 --> 01:05:40,559
posted to the mailing list since last

1681
01:05:40,559 --> 01:05:43,039
item meeting if you can still remember

1682
01:05:43,039 --> 01:05:46,640
that maybe the most debatable one must

1683
01:05:46,640 --> 01:05:49,680
offline validation of running along be

1684
01:05:49,680 --> 01:05:51,119
required

1685
01:05:51,119 --> 01:05:54,240
let's say that the client references a

1686
01:05:54,240 --> 01:05:56,559
system defined configuration which is

1687
01:05:56,559 --> 01:05:58,160
not present in

1688
01:05:58,160 --> 01:06:00,880
running actually and maybe for online

1689
01:06:00,880 --> 01:06:04,079
validation the server can just accept it

1690
01:06:04,079 --> 01:06:07,520
but for offline validation it will fail

1691
01:06:07,520 --> 01:06:10,240
and maybe we can say that the server can

1692
01:06:10,240 --> 01:06:12,880
just validate running by validating

1693
01:06:12,880 --> 01:06:15,839
intended but it's true that

1694
01:06:15,839 --> 01:06:17,280
both the

1695
01:06:17,280 --> 01:06:21,440
9 15 and ns3 42 defined that running

1696
01:06:21,440 --> 01:06:24,000
must always be valid

1697
01:06:24,000 --> 01:06:26,400
and also to maintain backward

1698
01:06:26,400 --> 01:06:29,920
combability especially for those lexical

1699
01:06:29,920 --> 01:06:30,960
lines

1700
01:06:30,960 --> 01:06:33,440
which are heavily relied on the offline

1701
01:06:33,440 --> 01:06:36,240
validation of running we don't really

1702
01:06:36,240 --> 01:06:38,480
want to break those clients and the

1703
01:06:38,480 --> 01:06:40,799
existing implementations

1704
01:06:40,799 --> 01:06:43,839
so the authors decided to answer yes to

1705
01:06:43,839 --> 01:06:45,520
this first question

1706
01:06:45,520 --> 01:06:47,680
yes we think that must offline

1707
01:06:47,680 --> 01:06:51,760
validation of running alone be required

1708
01:06:51,760 --> 01:06:55,359
and the second issue should the origin b

1709
01:06:55,359 --> 01:06:57,440
system or intended

1710
01:06:57,440 --> 01:07:00,240
for system configuration which is copied

1711
01:07:00,240 --> 01:07:03,039
and tested into running

1712
01:07:03,039 --> 01:07:05,280
i think we received different opinions

1713
01:07:05,280 --> 01:07:07,440
about this issue but

1714
01:07:07,440 --> 01:07:10,160
more folks seem to incline to use

1715
01:07:10,160 --> 01:07:13,200
intended as the value of origin

1716
01:07:13,200 --> 01:07:15,839
but it's also okay to use already

1717
01:07:15,839 --> 01:07:19,839
ecosystem it's a value keeps unchanged

1718
01:07:19,839 --> 01:07:22,079
so the current draft doesn't really

1719
01:07:22,079 --> 01:07:24,880
limit which origin should be used about

1720
01:07:24,880 --> 01:07:27,119
this issue

1721
01:07:27,119 --> 01:07:29,680
and then the third issue about immutable

1722
01:07:29,680 --> 01:07:30,720
flag

1723
01:07:30,720 --> 01:07:33,839
uh it has already been defined in

1724
01:07:33,839 --> 01:07:35,920
another individual draft

1725
01:07:35,920 --> 01:07:39,280
since we may not restrict this flag to

1726
01:07:39,280 --> 01:07:41,760
system configuration only

1727
01:07:41,760 --> 01:07:42,400
so

1728
01:07:42,400 --> 01:07:44,559
the following presentation given by me

1729
01:07:44,559 --> 01:07:46,559
we will talk about this issue

1730
01:07:46,559 --> 01:07:48,559
i will present this

1731
01:07:48,559 --> 01:07:51,200
and then the the last bullet should be

1732
01:07:51,200 --> 01:07:53,920
with origin parameter b supported for

1733
01:07:53,920 --> 01:07:56,319
intended

1734
01:07:56,319 --> 01:07:59,119
currently this parameter with a reading

1735
01:07:59,119 --> 01:08:01,680
can only be supported for operational

1736
01:08:01,680 --> 01:08:02,960
data store

1737
01:08:02,960 --> 01:08:05,760
and we think that this

1738
01:08:05,760 --> 01:08:08,559
system configuration may also be present

1739
01:08:08,559 --> 01:08:11,599
in intended and clients may benefit from

1740
01:08:11,599 --> 01:08:14,000
this always original parameter being

1741
01:08:14,000 --> 01:08:17,439
used for retrieving intended

1742
01:08:17,439 --> 01:08:20,479
however we find it's not easy actually

1743
01:08:20,479 --> 01:08:23,439
to support this idea because there is a

1744
01:08:23,439 --> 01:08:26,960
one statement which are derived from ocr

1745
01:08:26,960 --> 01:08:29,920
function defined in this with origin

1746
01:08:29,920 --> 01:08:32,238
parameter leave data node

1747
01:08:32,238 --> 01:08:33,040
so

1748
01:08:33,040 --> 01:08:35,759
i would rather keep it as it is without

1749
01:08:35,759 --> 01:08:39,520
more extension about this parameter

1750
01:08:39,520 --> 01:08:43,040
so if there is no any other comments i

1751
01:08:43,040 --> 01:08:45,359
the authors like to close these four

1752
01:08:45,359 --> 01:08:48,359
issues

1753
01:08:53,679 --> 01:08:58,799
after we have oh i iso can't in a queue

1754
01:08:59,920 --> 01:09:01,759
do you do you want to say something

1755
01:09:01,759 --> 01:09:04,000
can't

1756
01:09:04,399 --> 01:09:07,040
yes can you hear me yeah i can't hear

1757
01:09:07,040 --> 01:09:09,198
you okay um

1758
01:09:09,198 --> 01:09:10,640
on the last

1759
01:09:10,640 --> 01:09:13,040
point i'm wondering uh i mean i do

1760
01:09:13,040 --> 01:09:16,000
understand that it's defined the derived

1761
01:09:16,000 --> 01:09:17,759
from or self

1762
01:09:17,759 --> 01:09:19,600
when expression

1763
01:09:19,600 --> 01:09:21,120
but we could

1764
01:09:21,120 --> 01:09:23,679
i think this rfc could update that other

1765
01:09:23,679 --> 01:09:24,799
rc

1766
01:09:24,799 --> 01:09:26,719
if necessary

1767
01:09:26,719 --> 01:09:29,600
and and extend the expression so that it

1768
01:09:29,600 --> 01:09:32,479
could be operational or system

1769
01:09:32,479 --> 01:09:35,198
and because it's like it expands the

1770
01:09:35,198 --> 01:09:37,759
scope it wouldn't break any existing

1771
01:09:37,759 --> 01:09:39,439
modules

1772
01:09:39,439 --> 01:09:41,839
um so i i just don't know if the

1773
01:09:41,839 --> 01:09:44,238
reasoning behind not moving forward with

1774
01:09:44,238 --> 01:09:46,479
this is you know just because that's

1775
01:09:46,479 --> 01:09:47,920
what it is currently another and we

1776
01:09:47,920 --> 01:09:50,158
don't want to update the other rfc is

1777
01:09:50,158 --> 01:09:52,399
is justified

1778
01:09:52,399 --> 01:09:54,000
we should probably discuss what what do

1779
01:09:54,000 --> 01:09:55,120
we want

1780
01:09:55,120 --> 01:09:56,800
and then um

1781
01:09:56,800 --> 01:09:58,239
and then decide whether or not it's

1782
01:09:58,239 --> 01:10:00,640
worth updating the privacy

1783
01:10:00,640 --> 01:10:02,640
yes i agree yeah

1784
01:10:02,640 --> 01:10:05,040
we can discuss about this this issue

1785
01:10:05,040 --> 01:10:06,800
further and maybe

1786
01:10:06,800 --> 01:10:10,360
we can do that

1787
01:10:16,640 --> 01:10:20,800
uh rob wilton as a participant so i

1788
01:10:20,800 --> 01:10:24,480
i'm conflicted on one um about must

1789
01:10:24,480 --> 01:10:26,880
running always alone be valid so

1790
01:10:26,880 --> 01:10:29,120
although i agree that

1791
01:10:29,120 --> 01:10:30,560
it's always useful to be able to

1792
01:10:30,560 --> 01:10:32,560
validate running so you should have that

1793
01:10:32,560 --> 01:10:36,000
capability i do wonder

1794
01:10:36,000 --> 01:10:38,320
about whether that makes life difficult

1795
01:10:38,320 --> 01:10:40,880
so if you're creating interfaces today i

1796
01:10:40,880 --> 01:10:42,320
think the interface

1797
01:10:42,320 --> 01:10:44,640
itef interface is yang model allows the

1798
01:10:44,640 --> 01:10:46,960
interface type to be instantiated by the

1799
01:10:46,960 --> 01:10:48,159
system

1800
01:10:48,159 --> 01:10:50,400
and to then be added in

1801
01:10:50,400 --> 01:10:52,640
and i don't know whether

1802
01:10:52,640 --> 01:10:54,480
what the answer is are we saying that

1803
01:10:54,480 --> 01:10:57,120
actually we want to always force clients

1804
01:10:57,120 --> 01:10:59,600
to specify that interface type

1805
01:10:59,600 --> 01:11:01,199
whenever they configure an interface to

1806
01:11:01,199 --> 01:11:04,320
make that like a valid configuration

1807
01:11:04,320 --> 01:11:08,000
or are we saying that actually we allow

1808
01:11:08,000 --> 01:11:09,920
the system to instantiate that value in

1809
01:11:09,920 --> 01:11:12,320
running which again is sort of breaking

1810
01:11:12,320 --> 01:11:14,080
the idea of

1811
01:11:14,080 --> 01:11:15,520
the running data to always being in

1812
01:11:15,520 --> 01:11:17,600
control of the client

1813
01:11:17,600 --> 01:11:20,080
um or always the reality that actually

1814
01:11:20,080 --> 01:11:22,640
the system will inject

1815
01:11:22,640 --> 01:11:24,800
an interface type as it needs to and

1816
01:11:24,800 --> 01:11:26,159
then do the validation against the

1817
01:11:26,159 --> 01:11:28,480
intended data store so the value's there

1818
01:11:28,480 --> 01:11:30,400
as required so

1819
01:11:30,400 --> 01:11:31,360
um

1820
01:11:31,360 --> 01:11:34,000
i think it would be potentially useful

1821
01:11:34,000 --> 01:11:35,440
if we

1822
01:11:35,440 --> 01:11:37,920
we wrote down the actual configuration

1823
01:11:37,920 --> 01:11:39,040
steps

1824
01:11:39,040 --> 01:11:41,280
for that example and there's agreement

1825
01:11:41,280 --> 01:11:43,199
as to how this how this should work and

1826
01:11:43,199 --> 01:11:46,080
how it should behave to to understand um

1827
01:11:46,080 --> 01:11:47,840
what what the actual operational steps

1828
01:11:47,840 --> 01:11:50,159
would be for this and to check that that

1829
01:11:50,159 --> 01:11:53,400
makes sense

1830
01:11:54,640 --> 01:11:56,239
okay

1831
01:11:56,239 --> 01:11:58,960
blush do you want to say something

1832
01:11:58,960 --> 01:12:00,080
yes just

1833
01:12:00,080 --> 01:12:02,080
reacting to rob

1834
01:12:02,080 --> 01:12:05,520
there are a number of other uh sdos for

1835
01:12:05,520 --> 01:12:09,360
example 3gpp which explicitly state that

1836
01:12:09,360 --> 01:12:12,560
some items are created by the system

1837
01:12:12,560 --> 01:12:14,719
so if we would want to restrict that in

1838
01:12:14,719 --> 01:12:19,080
any way that would be a big problem

1839
01:12:22,400 --> 01:12:24,799
thank you

1840
01:12:33,760 --> 01:12:36,760
john

1841
01:12:48,080 --> 01:12:49,280
so

1842
01:12:49,280 --> 01:12:52,320
i think that uh if we want to go ahead

1843
01:12:52,320 --> 01:12:54,320
with this uh

1844
01:12:54,320 --> 01:12:56,880
yang project that where we can

1845
01:12:56,880 --> 01:12:59,520
reason about obligations we should stick

1846
01:12:59,520 --> 01:13:01,679
to those formal rules about

1847
01:13:01,679 --> 01:13:03,440
what's in the configuration

1848
01:13:03,440 --> 01:13:06,080
should really be there as just as the

1849
01:13:06,080 --> 01:13:08,640
configuration the young specifications

1850
01:13:08,640 --> 01:13:10,000
already say

1851
01:13:10,000 --> 01:13:11,760
but what we can do and what this the

1852
01:13:11,760 --> 01:13:14,480
draft is already stating is that if you

1853
01:13:14,480 --> 01:13:17,679
have a client that understands that

1854
01:13:17,679 --> 01:13:19,840
the system might create things

1855
01:13:19,840 --> 01:13:22,480
and request the system to fill in things

1856
01:13:22,480 --> 01:13:24,560
by adding a flag to the edit

1857
01:13:24,560 --> 01:13:26,159
configurated data

1858
01:13:26,159 --> 01:13:28,159
operations

1859
01:13:28,159 --> 01:13:30,239
so i just want to make sure that

1860
01:13:30,239 --> 01:13:32,000
existing clients that are not expecting

1861
01:13:32,000 --> 01:13:34,719
any sort of interference with running

1862
01:13:34,719 --> 01:13:36,880
can expect that to go to continue like

1863
01:13:36,880 --> 01:13:39,840
that but where clients that would prefer

1864
01:13:39,840 --> 01:13:41,679
the system to do things automatically

1865
01:13:41,679 --> 01:13:44,920
can collapse

1866
01:13:47,280 --> 01:13:50,560
thank you yes i i think the maybe the

1867
01:13:50,560 --> 01:13:51,679
intention

1868
01:13:51,679 --> 01:13:52,880
here is

1869
01:13:52,880 --> 01:13:53,679
to

1870
01:13:53,679 --> 01:13:54,640
keep the

1871
01:13:54,640 --> 01:13:56,239
legacy clients

1872
01:13:56,239 --> 01:13:59,360
can working normally and we do not

1873
01:13:59,360 --> 01:14:01,920
really want brexit clients which heavily

1874
01:14:01,920 --> 01:14:04,640
relied on the validation of learning

1875
01:14:04,640 --> 01:14:07,440
alone so maybe this is

1876
01:14:07,440 --> 01:14:10,960
intention about the first issue

1877
01:14:10,960 --> 01:14:13,040
yes i i just want to add that it's not

1878
01:14:13,040 --> 01:14:14,640
exactly the validation that is the

1879
01:14:14,640 --> 01:14:15,760
problem here

1880
01:14:15,760 --> 01:14:18,000
uh the clients can validate or not but

1881
01:14:18,000 --> 01:14:20,080
it's the reasoning about the data on the

1882
01:14:20,080 --> 01:14:21,199
server

1883
01:14:21,199 --> 01:14:23,360
that let's get broken if things are

1884
01:14:23,360 --> 01:14:26,080
interfering with in runtime without

1885
01:14:26,080 --> 01:14:29,360
letting the clients know

1886
01:14:29,360 --> 01:14:32,320
okay thank you

1887
01:14:32,320 --> 01:14:33,520
i think as

1888
01:14:33,520 --> 01:14:35,679
long as

1889
01:14:35,679 --> 01:14:37,600
the system creates things in a

1890
01:14:37,600 --> 01:14:40,960
predictable and well-defined way

1891
01:14:40,960 --> 01:14:44,560
that is usable

1892
01:14:46,719 --> 01:14:47,760
if it's not

1893
01:14:47,760 --> 01:14:50,159
described clearly in lang which it

1894
01:14:50,159 --> 01:14:52,000
cannot be today

1895
01:14:52,000 --> 01:14:54,080
then it's not

1896
01:14:54,080 --> 01:14:56,480
then do still rely on the developer to

1897
01:14:56,480 --> 01:14:58,560
have additional information besides the

1898
01:14:58,560 --> 01:15:00,560
yang in order to do that

1899
01:15:00,560 --> 01:15:02,320
and that's what i would like to leave

1900
01:15:02,320 --> 01:15:04,480
behind

1901
01:15:04,480 --> 01:15:06,800
you would be killing 3gpp

1902
01:15:06,800 --> 01:15:09,040
young model modeling

1903
01:15:09,040 --> 01:15:11,040
not at all you just need to define some

1904
01:15:11,040 --> 01:15:13,760
additional attributes or for edit config

1905
01:15:13,760 --> 01:15:15,679
and someone and this draft actually

1906
01:15:15,679 --> 01:15:19,120
defining one such attribute

1907
01:15:19,120 --> 01:15:22,239
i'll have a look at it but i have

1908
01:15:22,239 --> 01:15:24,800
in 3gpp for example there are and in

1909
01:15:24,800 --> 01:15:26,320
some other places there are young

1910
01:15:26,320 --> 01:15:28,000
extension statements

1911
01:15:28,000 --> 01:15:30,080
explicitly stating that this or that is

1912
01:15:30,080 --> 01:15:32,080
created by the system

1913
01:15:32,080 --> 01:15:33,920
yes

1914
01:15:33,920 --> 01:15:36,719
we can of course discuss whether

1915
01:15:36,719 --> 01:15:38,239
extensions are supposed to not

1916
01:15:38,239 --> 01:15:40,159
necessarily be understood by clients but

1917
01:15:40,159 --> 01:15:41,840
this is at least

1918
01:15:41,840 --> 01:15:44,560
declared something

1919
01:15:45,199 --> 01:15:47,360
at least until now there was no

1920
01:15:47,360 --> 01:15:49,760
restriction on the system itself

1921
01:15:49,760 --> 01:15:52,960
updating the running configuration

1922
01:15:52,960 --> 01:15:54,640
i hope it stays like that but let's

1923
01:15:54,640 --> 01:15:56,960
discuss

1924
01:16:00,640 --> 01:16:02,800
so rob wilson as a participant so back

1925
01:16:02,800 --> 01:16:05,040
to yan's comments so just trying to

1926
01:16:05,040 --> 01:16:07,280
understand are you saying that what you

1927
01:16:07,280 --> 01:16:10,480
think the best way of achieving this

1928
01:16:10,480 --> 01:16:12,880
is that having an extra option to the

1929
01:16:12,880 --> 01:16:15,199
edit config request explicitly says i

1930
01:16:15,199 --> 01:16:16,800
want you to copy

1931
01:16:16,800 --> 01:16:20,320
um the system parameters into running

1932
01:16:20,320 --> 01:16:22,159
and that would allow a client to

1933
01:16:22,159 --> 01:16:23,920
effectively provide a partial

1934
01:16:23,920 --> 01:16:25,600
configuration that for example leaving

1935
01:16:25,600 --> 01:16:27,840
out interface types and by having that

1936
01:16:27,840 --> 01:16:30,159
explicit you copy this into running it

1937
01:16:30,159 --> 01:16:32,480
then becomes valid and can be validated

1938
01:16:32,480 --> 01:16:33,600
and a client doesn't that doesn't

1939
01:16:33,600 --> 01:16:35,440
necessarily have to then

1940
01:16:35,440 --> 01:16:38,159
pull that configuration back up again it

1941
01:16:38,159 --> 01:16:39,760
could always leave it say different is

1942
01:16:39,760 --> 01:16:42,000
that what you're suggesting

1943
01:16:42,000 --> 01:16:43,360
that's what i'm suggesting and that's

1944
01:16:43,360 --> 01:16:45,760
what's already in the draft right now

1945
01:16:45,760 --> 01:16:49,840
yeah i will present about this letter

1946
01:16:50,159 --> 01:16:51,840
okay thank you

1947
01:16:51,840 --> 01:16:54,080
yeah

1948
01:16:57,679 --> 01:16:59,920
by the way you're a bit over time but we

1949
01:16:59,920 --> 01:17:01,440
had some extra time at the end of the

1950
01:17:01,440 --> 01:17:02,960
session and so we'll

1951
01:17:02,960 --> 01:17:05,520
give it to you

1952
01:17:07,120 --> 01:17:09,040
about 10 minutes

1953
01:17:09,040 --> 01:17:10,560
so

1954
01:17:10,560 --> 01:17:12,400
since we have a quite a lot of

1955
01:17:12,400 --> 01:17:14,560
discussion on the melody list and the

1956
01:17:14,560 --> 01:17:17,199
authors try to update the draft and

1957
01:17:17,199 --> 01:17:19,760
reflect some working group feedback into

1958
01:17:19,760 --> 01:17:21,040
the new version

1959
01:17:21,040 --> 01:17:24,159
and as i listed here the most dramatic

1960
01:17:24,159 --> 01:17:27,440
change compared to the previous draft is

1961
01:17:27,440 --> 01:17:30,239
that instead of saying that there is no

1962
01:17:30,239 --> 01:17:32,400
need for offline validation of running

1963
01:17:32,400 --> 01:17:35,120
alone be required and the client of the

1964
01:17:35,120 --> 01:17:37,040
server can validate running via

1965
01:17:37,040 --> 01:17:39,199
validating intended

1966
01:17:39,199 --> 01:17:41,760
we here admit the requirements of

1967
01:17:41,760 --> 01:17:44,400
validation of offline validation of

1968
01:17:44,400 --> 01:17:46,960
running alone and define that any

1969
01:17:46,960 --> 01:17:50,400
referenced system configuration in syst

1970
01:17:50,400 --> 01:17:52,400
any reference the system configuration

1971
01:17:52,400 --> 01:17:56,480
in system data store must be present in

1972
01:17:56,480 --> 01:17:58,640
running to macron invalid

1973
01:17:58,640 --> 01:18:01,840
and since we already defined that the

1974
01:18:01,840 --> 01:18:03,760
reference system configuration must

1975
01:18:03,760 --> 01:18:06,400
appear in running we don't really need

1976
01:18:06,400 --> 01:18:09,440
the system parameter which is used to

1977
01:18:09,440 --> 01:18:12,480
return a merged view of running and

1978
01:18:12,480 --> 01:18:15,840
system configuration previously so we

1979
01:18:15,840 --> 01:18:18,320
have just removed the definition of this

1980
01:18:18,320 --> 01:18:20,880
with system parameter

1981
01:18:20,880 --> 01:18:24,000
another change is about that the

1982
01:18:24,000 --> 01:18:26,560
convenient because if people can still

1983
01:18:26,560 --> 01:18:28,719
remember that we used to have an object

1984
01:18:28,719 --> 01:18:31,679
called convenient we want to avoid or at

1985
01:18:31,679 --> 01:18:34,400
least reduce having copy the entire

1986
01:18:34,400 --> 01:18:37,199
contents of system configuration into

1987
01:18:37,199 --> 01:18:40,239
running when possible so we have defined

1988
01:18:40,239 --> 01:18:42,880
another parameter reload system

1989
01:18:42,880 --> 01:18:46,159
and this is used for edit config and

1990
01:18:46,159 --> 01:18:48,000
edit data operation

1991
01:18:48,000 --> 01:18:51,679
and it indicates to allow the server to

1992
01:18:51,679 --> 01:18:53,360
populate the reference system

1993
01:18:53,360 --> 01:18:55,920
configuration automatically to make the

1994
01:18:55,920 --> 01:18:58,800
running configuration valid without the

1995
01:18:58,800 --> 01:19:02,800
client doing the the option explicitly

1996
01:19:02,800 --> 01:19:05,040
and the server can

1997
01:19:05,040 --> 01:19:07,199
can auto populate of the

1998
01:19:07,199 --> 01:19:09,840
the data store only when this parameter

1999
01:19:09,840 --> 01:19:12,960
is provided and for lexical lines which

2000
01:19:12,960 --> 01:19:14,880
know nothing about this parameter they

2001
01:19:14,880 --> 01:19:17,920
don't see any change in the edit config

2002
01:19:17,920 --> 01:19:20,239
or edited operations

2003
01:19:20,239 --> 01:19:24,799
so this is about the draft updates

2004
01:19:26,960 --> 01:19:29,520
and there are some quotations from the

2005
01:19:29,520 --> 01:19:32,320
current draft which i think is important

2006
01:19:32,320 --> 01:19:33,120
for

2007
01:19:33,120 --> 01:19:34,960
understanding the ideas and the

2008
01:19:34,960 --> 01:19:37,120
principles of the draft

2009
01:19:37,120 --> 01:19:39,920
so i just give some quotations here the

2010
01:19:39,920 --> 01:19:42,640
very first one that server must

2011
01:19:42,640 --> 01:19:44,719
ensure that

2012
01:19:44,719 --> 01:19:47,199
running contains any referenced system

2013
01:19:47,199 --> 01:19:49,679
con system objects

2014
01:19:49,679 --> 01:19:52,320
as i have mentioned in addition to

2015
01:19:52,320 --> 01:19:55,040
being consistent with the definitions of

2016
01:19:55,040 --> 01:19:57,679
in existing rfcs we are intended to

2017
01:19:57,679 --> 01:20:00,400
maintain the backward capabilities for

2018
01:20:00,400 --> 01:20:02,480
lexical lines here

2019
01:20:02,480 --> 01:20:03,520
and

2020
01:20:03,520 --> 01:20:07,040
clients must exp either explicitly

2021
01:20:07,040 --> 01:20:09,840
config system defined nodes in running

2022
01:20:09,840 --> 01:20:13,360
or use the resource system parameter

2023
01:20:13,360 --> 01:20:16,080
if the first sentence is said that the

2024
01:20:16,080 --> 01:20:18,480
reference system configuration must be

2025
01:20:18,480 --> 01:20:21,600
present in running i think this this

2026
01:20:21,600 --> 01:20:24,880
sentence answers the question of how how

2027
01:20:24,880 --> 01:20:28,159
can it be in running there are two ways

2028
01:20:28,159 --> 01:20:31,760
right clients can explicitly config the

2029
01:20:31,760 --> 01:20:34,560
system-defined nodes if they do not want

2030
01:20:34,560 --> 01:20:37,040
the system to touch the configuration

2031
01:20:37,040 --> 01:20:38,080
actually

2032
01:20:38,080 --> 01:20:40,000
or they can use a reload system

2033
01:20:40,000 --> 01:20:42,320
parameter for convenient

2034
01:20:42,320 --> 01:20:46,239
so two ways define that

2035
01:20:46,239 --> 01:20:48,880
online system awares clients copy

2036
01:20:48,880 --> 01:20:51,840
reference system nodes from system how

2037
01:20:51,840 --> 01:20:53,920
clients are aware of the system that

2038
01:20:53,920 --> 01:20:55,600
store can find appropriate

2039
01:20:55,600 --> 01:20:56,960
configurations

2040
01:20:56,960 --> 01:21:00,080
beyond the scope of this document

2041
01:21:00,080 --> 01:21:01,760
and obviously

2042
01:21:01,760 --> 01:21:04,480
the system data store is designed as a

2043
01:21:04,480 --> 01:21:07,440
standard mechanism to allow the clients

2044
01:21:07,440 --> 01:21:09,679
to see what system configuration is

2045
01:21:09,679 --> 01:21:10,880
available

2046
01:21:10,880 --> 01:21:13,440
but for lexi clients that know nothing

2047
01:21:13,440 --> 01:21:16,719
about this document so it's it's out of

2048
01:21:16,719 --> 01:21:19,120
scope how they can find the system

2049
01:21:19,120 --> 01:21:21,120
configurations

2050
01:21:21,120 --> 01:21:23,520
and the last one

2051
01:21:23,520 --> 01:21:25,679
if the readout system parameter is not

2052
01:21:25,679 --> 01:21:28,400
given by the client the server must not

2053
01:21:28,400 --> 01:21:29,600
modify

2054
01:21:29,600 --> 01:21:32,159
running in anywhere not specified by the

2055
01:21:32,159 --> 01:21:34,000
client

2056
01:21:34,000 --> 01:21:37,280
there is a desire to let it declined

2057
01:21:37,280 --> 01:21:39,280
on the configuration

2058
01:21:39,280 --> 01:21:41,440
so

2059
01:21:41,520 --> 01:21:43,679
there used to be an objective mention in

2060
01:21:43,679 --> 01:21:46,320
the draft is the client control the

2061
01:21:46,320 --> 01:21:48,080
configurations should be totally

2062
01:21:48,080 --> 01:21:49,840
controlled by the client

2063
01:21:49,840 --> 01:21:50,560
so

2064
01:21:50,560 --> 01:21:53,199
we have just so we just think that even

2065
01:21:53,199 --> 01:21:55,520
the server is allowed to configure the

2066
01:21:55,520 --> 01:21:57,199
reference system configuration

2067
01:21:57,199 --> 01:21:59,920
automatically it is

2068
01:21:59,920 --> 01:22:02,320
only triggered by the reload system

2069
01:22:02,320 --> 01:22:05,040
parameter so the server's modification

2070
01:22:05,040 --> 01:22:07,760
to running without being asked can never

2071
01:22:07,760 --> 01:22:08,840
be

2072
01:22:08,840 --> 01:22:12,080
allowed yeah flash i i saw you in a

2073
01:22:12,080 --> 01:22:13,600
queue

2074
01:22:13,600 --> 01:22:15,199
sorry this last

2075
01:22:15,199 --> 01:22:16,719
bullet

2076
01:22:16,719 --> 01:22:18,960
if i'm not misunderstanding it this is a

2077
01:22:18,960 --> 01:22:21,199
very big nbc change

2078
01:22:21,199 --> 01:22:22,800
and different clients might have

2079
01:22:22,800 --> 01:22:25,280
different ideas about this so i have to

2080
01:22:25,280 --> 01:22:27,920
check on this but this for me is a

2081
01:22:27,920 --> 01:22:30,320
showstopper

2082
01:22:30,320 --> 01:22:33,199
and there are some other uh

2083
01:22:33,199 --> 01:22:35,199
sbos

2084
01:22:35,199 --> 01:22:38,800
like uh 3gpp or run very clearly state

2085
01:22:38,800 --> 01:22:41,679
that some things some uh list entries

2086
01:22:41,679 --> 01:22:45,120
are only created by the system itself

2087
01:22:45,120 --> 01:22:47,760
so this would i don't see how this last

2088
01:22:47,760 --> 01:22:49,199
bullet can work

2089
01:22:49,199 --> 01:22:53,000
together with those things

2090
01:23:02,880 --> 01:23:05,280
go ahead please

2091
01:23:05,280 --> 01:23:07,840
i'm sorry can't just chair bellage can

2092
01:23:07,840 --> 01:23:09,760
you repeat that or

2093
01:23:09,760 --> 01:23:12,080
the last bullet on slide four can you

2094
01:23:12,080 --> 01:23:14,560
yes here it says that

2095
01:23:14,560 --> 01:23:16,560
except for some cases

2096
01:23:16,560 --> 01:23:21,840
the server must not modify running

2097
01:23:22,000 --> 01:23:24,400
in a number of other

2098
01:23:24,400 --> 01:23:27,760
sdos most notably in 3gpp and i think

2099
01:23:27,760 --> 01:23:29,280
also in oran

2100
01:23:29,280 --> 01:23:31,840
there are young modeled objects which

2101
01:23:31,840 --> 01:23:34,880
where they have a sentence that this

2102
01:23:34,880 --> 01:23:38,000
object is created by the system only so

2103
01:23:38,000 --> 01:23:39,920
the client is not even allowed to create

2104
01:23:39,920 --> 01:23:42,560
that object

2105
01:23:43,280 --> 01:23:46,719
we have around i don't know 160 gang

2106
01:23:46,719 --> 01:23:50,000
models in 3gpp and some of them depend

2107
01:23:50,000 --> 01:23:53,520
on the system to be able to modify the

2108
01:23:53,520 --> 01:23:55,920
running configuration

2109
01:23:55,920 --> 01:23:56,960
now

2110
01:23:56,960 --> 01:23:59,280
this seems to be in conflict with

2111
01:23:59,280 --> 01:24:00,400
usborne

2112
01:24:00,400 --> 01:24:03,199
i think i understand uh so now i'm i'm

2113
01:24:03,199 --> 01:24:04,400
going to switch to speaking as

2114
01:24:04,400 --> 01:24:05,679
contributor

2115
01:24:05,679 --> 01:24:08,080
i remember several years back when we

2116
01:24:08,080 --> 01:24:10,239
were working on yang next

2117
01:24:10,239 --> 01:24:13,040
i forget which uh city we were in but

2118
01:24:13,040 --> 01:24:15,760
you were at that time talking about 3d

2119
01:24:15,760 --> 01:24:18,480
3gbps need to

2120
01:24:18,480 --> 01:24:21,280
dynamically create configuration

2121
01:24:21,280 --> 01:24:22,400
i uh

2122
01:24:22,400 --> 01:24:24,880
i don't believe there's a lot of support

2123
01:24:24,880 --> 01:24:27,679
for that

2124
01:24:28,000 --> 01:24:29,520
being able to do that i think there are

2125
01:24:29,520 --> 01:24:31,520
a number a big number of companies in

2126
01:24:31,520 --> 01:24:33,440
3gpp participating in this

2127
01:24:33,440 --> 01:24:35,520
standardization so you don't have a big

2128
01:24:35,520 --> 01:24:37,360
enough support

2129
01:24:37,360 --> 01:24:39,199
and i'm not asking for anything i'm just

2130
01:24:39,199 --> 01:24:42,080
asking you to not to do a big nbc change

2131
01:24:42,080 --> 01:24:45,719
that's all i'm asking

2132
01:24:46,159 --> 01:24:48,880
because this that the

2133
01:24:48,880 --> 01:24:50,800
until now it is allowed for the system

2134
01:24:50,800 --> 01:24:52,800
to modify the running configuration if

2135
01:24:52,800 --> 01:24:54,480
you say that from now on it's not

2136
01:24:54,480 --> 01:24:59,239
allowed that's a big nbc change

2137
01:24:59,920 --> 01:25:01,920
we need to discuss this

2138
01:25:01,920 --> 01:25:04,239
um i think the appropriate thing would

2139
01:25:04,239 --> 01:25:07,920
be for 3gpp to put the system created

2140
01:25:07,920 --> 01:25:09,520
things into the system data store i

2141
01:25:09,520 --> 01:25:11,199
understand that that didn't exist before

2142
01:25:11,199 --> 01:25:14,000
but that's what it should have been

2143
01:25:14,000 --> 01:25:16,800
that they moved forward anyway with an

2144
01:25:16,800 --> 01:25:18,880
effectively unapproved

2145
01:25:18,880 --> 01:25:21,840
um non-standard approach is something

2146
01:25:21,840 --> 01:25:23,360
that we should discuss whether or not

2147
01:25:23,360 --> 01:25:27,480
the idf caters to

2148
01:25:28,560 --> 01:25:30,480
i don't think

2149
01:25:30,480 --> 01:25:31,199
i

2150
01:25:31,199 --> 01:25:33,520
until now i'm sure that it is well it

2151
01:25:33,520 --> 01:25:35,280
was nowhere

2152
01:25:35,280 --> 01:25:37,440
restricted that the system can itself

2153
01:25:37,440 --> 01:25:39,520
update the running and i don't know

2154
01:25:39,520 --> 01:25:41,679
about any of the young rfcs that would

2155
01:25:41,679 --> 01:25:44,000
restrict it until now

2156
01:25:44,000 --> 01:25:46,400
so i don't agree with your statement

2157
01:25:46,400 --> 01:25:49,920
that's not approved approach

2158
01:25:50,239 --> 01:25:52,400
it was actually just discussed on the

2159
01:25:52,400 --> 01:25:54,960
mailing list not that long ago

2160
01:25:54,960 --> 01:25:57,600
and in fact i think there was a vigorous

2161
01:25:57,600 --> 01:26:00,000
discussion about how the system can act

2162
01:26:00,000 --> 01:26:01,600
like a client

2163
01:26:01,600 --> 01:26:04,159
and and itself make the update to

2164
01:26:04,159 --> 01:26:06,960
running as a client and and that whole

2165
01:26:06,960 --> 01:26:10,159
discussion was in fact to avoid

2166
01:26:10,159 --> 01:26:12,880
the uh appearance of system or the

2167
01:26:12,880 --> 01:26:15,199
server making changes automatically but

2168
01:26:15,199 --> 01:26:17,239
please let's take this

2169
01:26:17,239 --> 01:26:21,480
offline thank you

2170
01:26:23,199 --> 01:26:24,800
yeah i was just that this is louis

2171
01:26:24,800 --> 01:26:26,320
contributor i was just going to comment

2172
01:26:26,320 --> 01:26:27,600
if

2173
01:26:27,600 --> 01:26:30,320
there's no rfc that precludes something

2174
01:26:30,320 --> 01:26:32,320
we can't say that it's not allowed just

2175
01:26:32,320 --> 01:26:35,040
an email you know if

2176
01:26:35,040 --> 01:26:36,800
we have to go by the documents and if

2177
01:26:36,800 --> 01:26:39,840
the documents are quiet on a topic

2178
01:26:39,840 --> 01:26:42,000
we generally in the ietf said that's a

2179
01:26:42,000 --> 01:26:43,600
loud behavior

2180
01:26:43,600 --> 01:26:46,239
so we should think about when we start

2181
01:26:46,239 --> 01:26:48,400
adding new restrictions the implication

2182
01:26:48,400 --> 01:26:50,639
on someone who might be doing something

2183
01:26:50,639 --> 01:26:53,920
that is wasn't specifically recruited so

2184
01:26:53,920 --> 01:26:54,880
um

2185
01:26:54,880 --> 01:26:57,600
i i guess i'm agreeing with belage here

2186
01:26:57,600 --> 01:26:59,199
that this that

2187
01:26:59,199 --> 01:27:00,480
his point is something we should

2188
01:27:00,480 --> 01:27:02,639
consider in this document of how to how

2189
01:27:02,639 --> 01:27:04,960
to deal with clients sorry how to deal

2190
01:27:04,960 --> 01:27:07,280
with young models and implementations

2191
01:27:07,280 --> 01:27:08,719
that might have been doing something

2192
01:27:08,719 --> 01:27:10,080
that was

2193
01:27:10,080 --> 01:27:14,080
not previously discussed in any document

2194
01:27:16,800 --> 01:27:18,719
we did have this discussion more than

2195
01:27:18,719 --> 01:27:20,159
once or in the

2196
01:27:20,159 --> 01:27:22,080
last few years

2197
01:27:22,080 --> 01:27:23,920
and that's why i say that i always took

2198
01:27:23,920 --> 01:27:25,040
care to

2199
01:27:25,040 --> 01:27:27,360
remove any statements that would

2200
01:27:27,360 --> 01:27:28,719
preclude

2201
01:27:28,719 --> 01:27:30,960
to prohibit

2202
01:27:30,960 --> 01:27:33,840
this behavior

2203
01:27:34,239 --> 01:27:35,440
and also

2204
01:27:35,440 --> 01:27:36,880
we risked

2205
01:27:36,880 --> 01:27:39,120
uh

2206
01:27:39,360 --> 01:27:40,320
really

2207
01:27:40,320 --> 01:27:42,800
alienating a big

2208
01:27:42,800 --> 01:27:46,400
community 3gbp and old radio operators

2209
01:27:46,400 --> 01:27:47,360
if we

2210
01:27:47,360 --> 01:27:48,960
force them to

2211
01:27:48,960 --> 01:27:51,199
avoid yank they have at this point two

2212
01:27:51,199 --> 01:27:53,040
solution sets one based on yank and

2213
01:27:53,040 --> 01:27:56,080
netconf the other based on json schema

2214
01:27:56,080 --> 01:27:57,120
and the

2215
01:27:57,120 --> 01:27:59,120
open api

2216
01:27:59,120 --> 01:28:00,880
it would be very easy for them to say

2217
01:28:00,880 --> 01:28:03,520
that okay then we forget yang because

2218
01:28:03,520 --> 01:28:05,040
it's not good for us

2219
01:28:05,040 --> 01:28:08,639
we i don't think we want to do that

2220
01:28:08,800 --> 01:28:10,880
yeah and more than that this is a change

2221
01:28:10,880 --> 01:28:11,679
in

2222
01:28:11,679 --> 01:28:13,600
allowed behavior you know before the

2223
01:28:13,600 --> 01:28:15,360
document was silent

2224
01:28:15,360 --> 01:28:17,120
our documents all the i don't think

2225
01:28:17,120 --> 01:28:20,000
anywhere talked about this explicitly in

2226
01:28:20,000 --> 01:28:21,199
an rfc

2227
01:28:21,199 --> 01:28:23,600
so we we had something that was allowed

2228
01:28:23,600 --> 01:28:26,320
in existing rfcs this changes that so i

2229
01:28:26,320 --> 01:28:28,000
think we have to take that into

2230
01:28:28,000 --> 01:28:30,719
consideration

2231
01:28:32,719 --> 01:28:35,440
okay thank you

2232
01:28:40,560 --> 01:28:41,600
so

2233
01:28:41,600 --> 01:28:44,080
there is an open issue we have some

2234
01:28:44,080 --> 01:28:46,080
discussion on the mailing list about

2235
01:28:46,080 --> 01:28:48,480
this issue but not much

2236
01:28:48,480 --> 01:28:50,800
and i'd like to receive some more

2237
01:28:50,800 --> 01:28:52,480
feedback here

2238
01:28:52,480 --> 01:28:55,520
so we have proposed a reload system

2239
01:28:55,520 --> 01:28:58,639
parameter and the question is this this

2240
01:28:58,639 --> 01:29:02,719
without system parameter variable for us

2241
01:29:02,719 --> 01:29:04,560
we propose this parameter for

2242
01:29:04,560 --> 01:29:06,960
convenience and we would like the client

2243
01:29:06,960 --> 01:29:10,400
to avoid at least reduced copying the

2244
01:29:10,400 --> 01:29:13,199
entire contents of system configuration

2245
01:29:13,199 --> 01:29:15,360
into running when possible

2246
01:29:15,360 --> 01:29:18,719
and especially for rest conf protocol

2247
01:29:18,719 --> 01:29:21,360
where a complete understanding of this

2248
01:29:21,360 --> 01:29:24,239
server's configuration is really desired

2249
01:29:24,239 --> 01:29:26,800
and injecting multiple disjoint pieces

2250
01:29:26,800 --> 01:29:29,360
of the configuration is perceived as

2251
01:29:29,360 --> 01:29:30,960
complicated

2252
01:29:30,960 --> 01:29:32,560
so

2253
01:29:32,560 --> 01:29:35,520
but this parameter also brings us some

2254
01:29:35,520 --> 01:29:36,840
implementation

2255
01:29:36,840 --> 01:29:39,520
complexity when the server resolving the

2256
01:29:39,520 --> 01:29:41,760
result leave reference the server must

2257
01:29:41,760 --> 01:29:42,960
be able to

2258
01:29:42,960 --> 01:29:45,360
identify if the missing reference

2259
01:29:45,360 --> 01:29:47,679
instance is system defined

2260
01:29:47,679 --> 01:29:50,080
and then the server must be apt to

2261
01:29:50,080 --> 01:29:52,239
configure the reference system defined

2262
01:29:52,239 --> 01:29:55,360
instance into the targeted data store

2263
01:29:55,360 --> 01:29:58,080
and i'm also thinking that when the

2264
01:29:58,080 --> 01:30:00,560
servers or the populating is enforced

2265
01:30:00,560 --> 01:30:03,360
should depends on the target data store

2266
01:30:03,360 --> 01:30:05,760
for example if the target data store is

2267
01:30:05,760 --> 01:30:08,480
running or set up the operation should

2268
01:30:08,480 --> 01:30:11,199
be enforced at the end of the edit

2269
01:30:11,199 --> 01:30:13,600
config or edited operation

2270
01:30:13,600 --> 01:30:15,440
and if the target data store is

2271
01:30:15,440 --> 01:30:17,280
candidate maybe

2272
01:30:17,280 --> 01:30:20,080
it's delayed onto a commit or valid

2273
01:30:20,080 --> 01:30:22,480
operation taxpayers

2274
01:30:22,480 --> 01:30:23,360
so

2275
01:30:23,360 --> 01:30:25,760
i believe this this follows the

2276
01:30:25,760 --> 01:30:28,080
young constraint enforcement model

2277
01:30:28,080 --> 01:30:32,159
defined in the rfc 7915

2278
01:30:32,159 --> 01:30:34,800
so after the evaluation of how much

2279
01:30:34,800 --> 01:30:36,320
value it brings

2280
01:30:36,320 --> 01:30:39,199
and how difficult or complex it will be

2281
01:30:39,199 --> 01:30:40,639
to implement

2282
01:30:40,639 --> 01:30:43,280
does this value

2283
01:30:43,280 --> 01:30:45,280
that the value of this parameter

2284
01:30:45,280 --> 01:30:47,679
deserves such an implementation

2285
01:30:47,679 --> 01:30:49,679
complexity

2286
01:30:49,679 --> 01:30:53,679
so this is an open issue for discussion

2287
01:30:53,679 --> 01:30:56,800
any comments on this

2288
01:30:57,679 --> 01:30:59,520
you're pretty much out of time so i

2289
01:30:59,520 --> 01:31:01,040
think you should try to

2290
01:31:01,040 --> 01:31:02,880
wrap up and then any more discussion has

2291
01:31:02,880 --> 01:31:04,800
to be on the list

2292
01:31:04,800 --> 01:31:07,280
yeah this is the last slide

2293
01:31:07,280 --> 01:31:09,599
thank you

2294
01:31:11,760 --> 01:31:13,679
so so one thing i was expecting on your

2295
01:31:13,679 --> 01:31:16,719
last slide was a request for adoption

2296
01:31:16,719 --> 01:31:18,000
um you know

2297
01:31:18,000 --> 01:31:20,080
it's clear

2298
01:31:20,080 --> 01:31:22,000
you're generating a lot of discussion so

2299
01:31:22,000 --> 01:31:24,080
at least we should resolve those uh

2300
01:31:24,080 --> 01:31:25,760
points

2301
01:31:25,760 --> 01:31:27,199
that we still have the question of

2302
01:31:27,199 --> 01:31:29,120
whether or not the group wants to adopt

2303
01:31:29,120 --> 01:31:30,880
but i think that with the

2304
01:31:30,880 --> 01:31:34,639
uh current open issues you know uh it

2305
01:31:34,639 --> 01:31:37,040
would be a little bit contentious so uh

2306
01:31:37,040 --> 01:31:38,719
if you can address those and then come

2307
01:31:38,719 --> 01:31:40,560
back to the working group with changes

2308
01:31:40,560 --> 01:31:42,159
that would be great

2309
01:31:42,159 --> 01:31:44,560
okay sure thank you

2310
01:31:44,560 --> 01:31:45,920
thank you

2311
01:31:45,920 --> 01:31:48,159
yeah

2312
01:31:52,400 --> 01:31:53,760
so if there is

2313
01:31:53,760 --> 01:31:56,239
no other comments i will put this open

2314
01:31:56,239 --> 01:31:57,440
issue to

2315
01:31:57,440 --> 01:31:59,760
the oh there is another another open

2316
01:31:59,760 --> 01:32:01,199
issue addressed by

2317
01:32:01,199 --> 01:32:03,520
kent on the mailing list about this

2318
01:32:03,520 --> 01:32:07,679
about this one so uh let's move into the

2319
01:32:07,679 --> 01:32:11,400
the next presentation

2320
01:32:14,320 --> 01:32:17,320
uh

2321
01:32:26,560 --> 01:32:28,719
okay you should be able to present

2322
01:32:28,719 --> 01:32:29,600
yeah

2323
01:32:29,600 --> 01:32:31,440
thank you

2324
01:32:31,440 --> 01:32:32,320
so

2325
01:32:32,320 --> 01:32:34,560
this is about the immutable metadata

2326
01:32:34,560 --> 01:32:35,840
annotation

2327
01:32:35,840 --> 01:32:38,159
and

2328
01:32:39,280 --> 01:32:43,280
and uh i mentioned earlier the this idea

2329
01:32:43,280 --> 01:32:45,920
an immutable flag is derived from the

2330
01:32:45,920 --> 01:32:48,400
system defined configuration work

2331
01:32:48,400 --> 01:32:50,560
because there are some system

2332
01:32:50,560 --> 01:32:53,760
configurations which are generated to be

2333
01:32:53,760 --> 01:32:56,239
non-deletable or even non-modifiable to

2334
01:32:56,239 --> 01:32:57,440
clients

2335
01:32:57,440 --> 01:32:59,360
they are configured but with only two

2336
01:32:59,360 --> 01:33:01,760
clients and but some

2337
01:33:01,760 --> 01:33:04,320
some are read-only while others can be

2338
01:33:04,320 --> 01:33:08,320
modified so allowing some configurations

2339
01:33:08,320 --> 01:33:10,719
modifiable while others not is

2340
01:33:10,719 --> 01:33:13,440
inconsistent and introduce confusion

2341
01:33:13,440 --> 01:33:16,080
actually so to resolve this issue we

2342
01:33:16,080 --> 01:33:18,880
want to define a standard mechanism

2343
01:33:18,880 --> 01:33:20,080
to see

2344
01:33:20,080 --> 01:33:22,560
what system configuration is with only

2345
01:33:22,560 --> 01:33:23,840
two clients

2346
01:33:23,840 --> 01:33:24,960
and

2347
01:33:24,960 --> 01:33:26,960
if there exists some system

2348
01:33:26,960 --> 01:33:29,360
configurations which are generated to be

2349
01:33:29,360 --> 01:33:31,360
immutable we want to make this

2350
01:33:31,360 --> 01:33:33,679
information visible to clients

2351
01:33:33,679 --> 01:33:37,679
so this is about the motivation

2352
01:33:37,679 --> 01:33:39,920
so a metadata annotation called

2353
01:33:39,920 --> 01:33:43,040
immutable has been defined to indicate

2354
01:33:43,040 --> 01:33:46,719
the immutability of a data node

2355
01:33:46,719 --> 01:33:48,159
and

2356
01:33:48,159 --> 01:33:50,800
although this concept is motivated by

2357
01:33:50,800 --> 01:33:52,960
system defined configuration we do not

2358
01:33:52,960 --> 01:33:54,960
really want to restrict this

2359
01:33:54,960 --> 01:33:56,239
flag to

2360
01:33:56,239 --> 01:33:59,520
being used only for system configuration

2361
01:33:59,520 --> 01:34:02,560
and it's used to annotate instance of

2362
01:34:02,560 --> 01:34:04,639
young data nodes rather than schema

2363
01:34:04,639 --> 01:34:05,520
nodes

2364
01:34:05,520 --> 01:34:08,719
and after it's created any data node

2365
01:34:08,719 --> 01:34:10,880
annotated with immutable

2366
01:34:10,880 --> 01:34:13,760
equal true is read only to clients

2367
01:34:13,760 --> 01:34:16,480
which means modification or deletion

2368
01:34:16,480 --> 01:34:19,360
should not be allowed but the following

2369
01:34:19,360 --> 01:34:22,000
operations should be allowed

2370
01:34:22,000 --> 01:34:25,199
like create an immutable data node with

2371
01:34:25,199 --> 01:34:28,400
some value initially set by the system

2372
01:34:28,400 --> 01:34:32,880
if it does not exist in the data store

2373
01:34:32,880 --> 01:34:35,520
and the immutable system configuration

2374
01:34:35,520 --> 01:34:38,239
is is not present in running and the

2375
01:34:38,239 --> 01:34:39,760
client can configure it with the same

2376
01:34:39,760 --> 01:34:42,239
value as found in system data store into

2377
01:34:42,239 --> 01:34:44,480
running so this should be allowed

2378
01:34:44,480 --> 01:34:46,719
and delete the parent node of an

2379
01:34:46,719 --> 01:34:49,280
immutable data node unless the parent

2380
01:34:49,280 --> 01:34:51,600
node is also annotated with immutable

2381
01:34:51,600 --> 01:34:54,960
co2 for example we cannot re really

2382
01:34:54,960 --> 01:34:56,159
delete a

2383
01:34:56,159 --> 01:34:59,040
leaf data value inside a list instance

2384
01:34:59,040 --> 01:35:02,000
but it's okay to delete the whole list

2385
01:35:02,000 --> 01:35:04,320
entry which includes that immutable

2386
01:35:04,320 --> 01:35:05,520
instance

2387
01:35:05,520 --> 01:35:08,320
so this is about it did it

2388
01:35:08,320 --> 01:35:13,400
operation it should be allowed

2389
01:35:14,480 --> 01:35:17,679
here gives some example about how to

2390
01:35:17,679 --> 01:35:20,400
use this flag so on the

2391
01:35:20,400 --> 01:35:23,520
left side of the slide there is an

2392
01:35:23,520 --> 01:35:25,760
interface configuration with an

2393
01:35:25,760 --> 01:35:27,360
immutable type

2394
01:35:27,360 --> 01:35:29,520
when the client retrieves a targeted

2395
01:35:29,520 --> 01:35:32,159
data store like system and got such a

2396
01:35:32,159 --> 01:35:34,719
reply it should realize that the type

2397
01:35:34,719 --> 01:35:38,159
for interface eth0 it's read-only and

2398
01:35:38,159 --> 01:35:40,560
should it should not be allowed to

2399
01:35:40,560 --> 01:35:43,920
modify it but the server should attempt

2400
01:35:43,920 --> 01:35:47,280
to accept an edit config operation

2401
01:35:47,280 --> 01:35:49,199
towards running to configure the

2402
01:35:49,199 --> 01:35:52,320
interface eth0 configuration with the

2403
01:35:52,320 --> 01:35:55,600
same value of the type as in system and

2404
01:35:55,600 --> 01:35:58,239
any other values should not be

2405
01:35:58,239 --> 01:36:01,199
accepted it should be rejected

2406
01:36:01,199 --> 01:36:03,920
and on the right side of the slide there

2407
01:36:03,920 --> 01:36:06,960
is a system defined neck rules with the

2408
01:36:06,960 --> 01:36:09,440
leaf list and the list entries annotated

2409
01:36:09,440 --> 01:36:12,560
with immutable equal true the username

2410
01:36:12,560 --> 01:36:15,360
here is defined as a leaf list

2411
01:36:15,360 --> 01:36:18,400
the user or the mean for the admin group

2412
01:36:18,400 --> 01:36:21,840
and guest for the group visit is

2413
01:36:21,840 --> 01:36:24,400
generated to be immutable which means

2414
01:36:24,400 --> 01:36:27,360
that deletion is not allowed and the

2415
01:36:27,360 --> 01:36:30,560
rule list instance for the admin excel

2416
01:36:30,560 --> 01:36:33,520
is also immutable so any modification

2417
01:36:33,520 --> 01:36:35,920
and deletion to this list entry is not

2418
01:36:35,920 --> 01:36:37,119
allowed

2419
01:36:37,119 --> 01:36:39,440
while the other these entries

2420
01:36:39,440 --> 01:36:43,600
like the rules entry for visit scl

2421
01:36:43,600 --> 01:36:45,679
uh the annotation for this

2422
01:36:45,679 --> 01:36:48,560
and the annotation for this entry is not

2423
01:36:48,560 --> 01:36:51,440
specified and the default is the same as

2424
01:36:51,440 --> 01:36:55,040
the the parent node of the the

2425
01:36:55,040 --> 01:36:57,040
the same as the in the immutable

2426
01:36:57,040 --> 01:36:59,280
immutable value of its parent node which

2427
01:36:59,280 --> 01:37:00,239
is the

2428
01:37:00,239 --> 01:37:01,679
neck

2429
01:37:01,679 --> 01:37:04,639
in this in this example so and the

2430
01:37:04,639 --> 01:37:06,960
default immutable value for top level

2431
01:37:06,960 --> 01:37:08,639
that node is false

2432
01:37:08,639 --> 01:37:10,400
so it's

2433
01:37:10,400 --> 01:37:13,679
this is about the examples of how we can

2434
01:37:13,679 --> 01:37:17,600
use this immutable annotation

2435
01:37:18,480 --> 01:37:21,679
so there are some open issues about this

2436
01:37:21,679 --> 01:37:22,639
work

2437
01:37:22,639 --> 01:37:23,360
and

2438
01:37:23,360 --> 01:37:25,520
the first issue is the backward

2439
01:37:25,520 --> 01:37:26,880
capability

2440
01:37:26,880 --> 01:37:29,440
what if the lexi clients receive some

2441
01:37:29,440 --> 01:37:31,760
annotations they do not do not

2442
01:37:31,760 --> 01:37:34,639
understand and i they we have two

2443
01:37:34,639 --> 01:37:36,320
options here

2444
01:37:36,320 --> 01:37:39,040
and option one is that annotations

2445
01:37:39,040 --> 01:37:42,320
always return body client ignore unknown

2446
01:37:42,320 --> 01:37:44,480
annotations silently

2447
01:37:44,480 --> 01:37:46,960
and option two is to define a parameter

2448
01:37:46,960 --> 01:37:50,480
in the operation request to indicate

2449
01:37:50,480 --> 01:37:53,360
including an immutable annotation in its

2450
01:37:53,360 --> 01:37:56,080
response and the current draft follows

2451
01:37:56,080 --> 01:37:58,960
option 1 but i have such a concern that

2452
01:37:58,960 --> 01:38:01,360
the design may break the lexical line

2453
01:38:01,360 --> 01:38:04,080
but maybe i think it's okay because

2454
01:38:04,080 --> 01:38:06,960
there is a fundamental requirement and

2455
01:38:06,960 --> 01:38:10,159
defined in the 79 15 2

2456
01:38:10,159 --> 01:38:14,400
it says that the annotations set by a

2457
01:38:14,400 --> 01:38:16,400
server should not break clients that do

2458
01:38:16,400 --> 01:38:17,760
not support them

2459
01:38:17,760 --> 01:38:20,719
so this is about the first issue

2460
01:38:20,719 --> 01:38:23,280
the second is that how would the client

2461
01:38:23,280 --> 01:38:26,080
know if immutable is applied to the

2462
01:38:26,080 --> 01:38:29,280
whole list release entries or both the

2463
01:38:29,280 --> 01:38:32,480
same applies to the leaf list

2464
01:38:32,480 --> 01:38:33,520
because

2465
01:38:33,520 --> 01:38:36,320
these annotations can only be attached

2466
01:38:36,320 --> 01:38:39,679
to individual list or leaflets instance

2467
01:38:39,679 --> 01:38:42,520
then how should we indicate the

2468
01:38:42,520 --> 01:38:45,520
immutability of the whole list or leave

2469
01:38:45,520 --> 01:38:46,639
list

2470
01:38:46,639 --> 01:38:49,360
the whole list of the whole leaf list

2471
01:38:49,360 --> 01:38:50,880
so

2472
01:38:50,880 --> 01:38:53,040
so that the client can understand that

2473
01:38:53,040 --> 01:38:56,000
the additions or deletion to the list or

2474
01:38:56,000 --> 01:38:58,320
leave list is not allowed i think this

2475
01:38:58,320 --> 01:38:59,760
is a question

2476
01:38:59,760 --> 01:39:01,119
so

2477
01:39:01,119 --> 01:39:04,159
and then the the third one is that when

2478
01:39:04,159 --> 01:39:06,560
should the server reject modifications

2479
01:39:06,560 --> 01:39:09,199
to immutable data node and the current

2480
01:39:09,199 --> 01:39:11,679
draft said that the error reporting is

2481
01:39:11,679 --> 01:39:14,080
performed at various different time

2482
01:39:14,080 --> 01:39:16,080
according to the selected target data

2483
01:39:16,080 --> 01:39:17,280
store

2484
01:39:17,280 --> 01:39:18,719
so we

2485
01:39:18,719 --> 01:39:21,600
we we all know that if there is uh an

2486
01:39:21,600 --> 01:39:24,000
attempt to modify an immutable data node

2487
01:39:24,000 --> 01:39:26,159
the server should reject it but when

2488
01:39:26,159 --> 01:39:26,880
should

2489
01:39:26,880 --> 01:39:28,880
it reject

2490
01:39:28,880 --> 01:39:31,119
if the target data store is running or

2491
01:39:31,119 --> 01:39:34,239
startup should be in an edit config or

2492
01:39:34,239 --> 01:39:36,480
edit data operation and if the target

2493
01:39:36,480 --> 01:39:38,320
data store is candidate

2494
01:39:38,320 --> 01:39:40,080
the

2495
01:39:40,080 --> 01:39:42,800
reject is delayed until a commit or

2496
01:39:42,800 --> 01:39:46,159
valid operation takes place

2497
01:39:46,159 --> 01:39:48,719
the last issue that should we allow the

2498
01:39:48,719 --> 01:39:51,520
client to delete an immutable system

2499
01:39:51,520 --> 01:39:54,400
initiated not in running

2500
01:39:54,400 --> 01:39:56,239
and

2501
01:39:56,239 --> 01:39:58,239
yet because i know that there seems

2502
01:39:58,239 --> 01:40:00,960
nowhere to i actually did the system

2503
01:40:00,960 --> 01:40:03,520
defined configuration in system

2504
01:40:03,520 --> 01:40:05,760
because we already defined that the

2505
01:40:05,760 --> 01:40:08,400
deletable system configuration must be

2506
01:40:08,400 --> 01:40:10,400
defined in factory default and the

2507
01:40:10,400 --> 01:40:12,880
non-digital system configuration must be

2508
01:40:12,880 --> 01:40:14,880
defined in system and system

2509
01:40:14,880 --> 01:40:17,600
configuration system data store will be

2510
01:40:17,600 --> 01:40:20,320
merged into intended and sent and much

2511
01:40:20,320 --> 01:40:23,679
into operational so even we can even the

2512
01:40:23,679 --> 01:40:26,560
client delete an immutable system node

2513
01:40:26,560 --> 01:40:29,440
in running it will still print in

2514
01:40:29,440 --> 01:40:33,440
operational if it's taking fact so

2515
01:40:33,440 --> 01:40:36,239
but i also like to ask to the working

2516
01:40:36,239 --> 01:40:40,719
group should we allow this operation

2517
01:40:40,719 --> 01:40:43,199
okay i i know rob in the queue but this

2518
01:40:43,199 --> 01:40:46,800
is my last slide so go ahead rob

2519
01:40:46,800 --> 01:40:48,800
so rob wilson as a participant

2520
01:40:48,800 --> 01:40:52,960
contributor so as a participant so um

2521
01:40:52,960 --> 01:40:55,199
where is the previous work on the with

2522
01:40:55,199 --> 01:40:57,840
systems data store um i'm quite

2523
01:40:57,840 --> 01:40:59,440
supportive that i think that's solving a

2524
01:40:59,440 --> 01:41:03,119
good thing i have a bigger concern here

2525
01:41:03,119 --> 01:41:04,639
that if we allow

2526
01:41:04,639 --> 01:41:07,679
um servers to to arbitrarily decide that

2527
01:41:07,679 --> 01:41:10,080
some configuration is immutable that

2528
01:41:10,080 --> 01:41:12,400
that makes life much harder for generic

2529
01:41:12,400 --> 01:41:14,960
clients because they won't know up front

2530
01:41:14,960 --> 01:41:16,560
just from the schema

2531
01:41:16,560 --> 01:41:18,560
what things are immutable what things

2532
01:41:18,560 --> 01:41:20,800
may be immutable and what things aren't

2533
01:41:20,800 --> 01:41:21,679
so

2534
01:41:21,679 --> 01:41:23,280
it feels to me that having a mutual

2535
01:41:23,280 --> 01:41:25,679
confidence makes life harder for clients

2536
01:41:25,679 --> 01:41:27,840
and ideally we shouldn't have it it is

2537
01:41:27,840 --> 01:41:30,719
my opinion now i know that um balaj may

2538
01:41:30,719 --> 01:41:33,280
feel differently for his implementations

2539
01:41:33,280 --> 01:41:36,560
or the 3gpp stuff that uses this so

2540
01:41:36,560 --> 01:41:39,280
um so i have concerns there so i think

2541
01:41:39,280 --> 01:41:41,280
the another way look at this maybe as a

2542
01:41:41,280 --> 01:41:43,600
way of of not encouraging a mutual

2543
01:41:43,600 --> 01:41:45,440
configuration but a way of describing it

2544
01:41:45,440 --> 01:41:47,440
if it is there

2545
01:41:47,440 --> 01:41:50,000
in which case i think that for like a

2546
01:41:50,000 --> 01:41:52,800
first question your option two of having

2547
01:41:52,800 --> 01:41:55,840
a request that returns a parameter that

2548
01:41:55,840 --> 01:41:57,679
says return this seems like a better

2549
01:41:57,679 --> 01:41:59,840
choice to me so it allows you to

2550
01:41:59,840 --> 01:42:01,840
annotate stuff that's immutable it

2551
01:42:01,840 --> 01:42:02,960
doesn't say

2552
01:42:02,960 --> 01:42:05,040
encourage and say you should do this

2553
01:42:05,040 --> 01:42:06,719
and and i don't think it should sort of

2554
01:42:06,719 --> 01:42:08,400
change the behavior of the server either

2555
01:42:08,400 --> 01:42:09,760
way it's just providing some extra

2556
01:42:09,760 --> 01:42:12,560
metadata that comes back out and then so

2557
01:42:12,560 --> 01:42:15,119
for the last one um in terms of should

2558
01:42:15,119 --> 01:42:16,480
we allow our client to delete an

2559
01:42:16,480 --> 01:42:19,040
immutable system data node i think

2560
01:42:19,040 --> 01:42:21,199
that's that should almost be

2561
01:42:21,199 --> 01:42:23,520
um yes in the sense that if you move

2562
01:42:23,520 --> 01:42:24,400
from

2563
01:42:24,400 --> 01:42:26,320
one entire configuration to another

2564
01:42:26,320 --> 01:42:28,880
entire configuration any cases where you

2565
01:42:28,880 --> 01:42:30,800
have that you have

2566
01:42:30,800 --> 01:42:32,880
arbitrary restrictions on that makes it

2567
01:42:32,880 --> 01:42:34,880
very hard for clients lots of operators

2568
01:42:34,880 --> 01:42:36,719
like to do like a commit replace of the

2569
01:42:36,719 --> 01:42:38,960
entire configuration and anything where

2570
01:42:38,960 --> 01:42:40,639
you say oh no you're accidentally

2571
01:42:40,639 --> 01:42:42,800
changing a type from a valid type to

2572
01:42:42,800 --> 01:42:44,639
another valid type

2573
01:42:44,639 --> 01:42:46,000
for an interface for example that just

2574
01:42:46,000 --> 01:42:47,440
makes their instrumentation

2575
01:42:47,440 --> 01:42:51,040
instrumentation code harder

2576
01:42:52,400 --> 01:42:55,960
okay thanks

2577
01:43:03,520 --> 01:43:05,920
yeah i agree with rob in to the sense

2578
01:43:05,920 --> 01:43:07,679
that

2579
01:43:07,679 --> 01:43:09,440
this sort of restrictions certainly make

2580
01:43:09,440 --> 01:43:10,480
the life

2581
01:43:10,480 --> 01:43:12,880
more complicated for a client

2582
01:43:12,880 --> 01:43:14,960
but on the other hand the rfcs are

2583
01:43:14,960 --> 01:43:18,080
already saying that i mean 7950 and so

2584
01:43:18,080 --> 01:43:20,159
on they are already saying that

2585
01:43:20,159 --> 01:43:22,000
a server can reject

2586
01:43:22,000 --> 01:43:23,440
any configuration for any reason

2587
01:43:23,440 --> 01:43:24,960
basically

2588
01:43:24,960 --> 01:43:26,239
uh so

2589
01:43:26,239 --> 01:43:28,639
we are already in in the dark when it

2590
01:43:28,639 --> 01:43:30,400
comes to rejections they can happen

2591
01:43:30,400 --> 01:43:33,920
anytime for any reason but uh this

2592
01:43:33,920 --> 01:43:36,239
this initiative here to

2593
01:43:36,239 --> 01:43:38,960
at least tag things with immutable

2594
01:43:38,960 --> 01:43:41,040
helps the clients to

2595
01:43:41,040 --> 01:43:42,560
at least have a chance at knowing where

2596
01:43:42,560 --> 01:43:43,920
these

2597
01:43:43,920 --> 01:43:45,280
business restrictions sit so i think

2598
01:43:45,280 --> 01:43:47,040
it's a step in the good direction but i

2599
01:43:47,040 --> 01:43:49,280
agree completely with rob's

2600
01:43:49,280 --> 01:43:51,119
general view that

2601
01:43:51,119 --> 01:43:53,440
any sort of restrictions on this is

2602
01:43:53,440 --> 01:43:55,760
making life more complicated and i

2603
01:43:55,760 --> 01:43:58,000
generally prefer a more permissive view

2604
01:43:58,000 --> 01:44:00,400
where clients can write anything and if

2605
01:44:00,400 --> 01:44:02,480
the server doesn't like it it will say

2606
01:44:02,480 --> 01:44:05,040
okay operationally down or

2607
01:44:05,040 --> 01:44:07,360
wrong type of hardware or whatever it is

2608
01:44:07,360 --> 01:44:09,679
and not execute on it but allow the

2609
01:44:09,679 --> 01:44:11,520
configuration to go through

2610
01:44:11,520 --> 01:44:13,840
thank you

2611
01:44:13,840 --> 01:44:16,880
i i think to to respond ian and rob i

2612
01:44:16,880 --> 01:44:20,400
think this is not really a restriction

2613
01:44:20,400 --> 01:44:22,800
because there does exist some system

2614
01:44:22,800 --> 01:44:25,119
configuration which is read only

2615
01:44:25,119 --> 01:44:27,840
generated to be immutable to clients

2616
01:44:27,840 --> 01:44:30,320
yeah that exists such kind of system

2617
01:44:30,320 --> 01:44:32,480
configuration and we just want to make

2618
01:44:32,480 --> 01:44:36,559
this information visible to the clients

2619
01:44:36,800 --> 01:44:39,600
okay let's go ahead

2620
01:44:39,600 --> 01:44:42,880
so i think it's very interesting and

2621
01:44:42,880 --> 01:44:45,360
important work i'm not up to date sorry

2622
01:44:45,360 --> 01:44:46,639
i will

2623
01:44:46,639 --> 01:44:49,679
catch up but i would just like to list

2624
01:44:49,679 --> 01:44:52,800
three use cases that are already in use

2625
01:44:52,800 --> 01:44:54,000
in different

2626
01:44:54,000 --> 01:44:55,119
systems

2627
01:44:55,119 --> 01:44:57,920
that might profit from this

2628
01:44:57,920 --> 01:45:02,000
one is again 3gpp and some other sdos

2629
01:45:02,000 --> 01:45:04,000
are using something called invariant

2630
01:45:04,000 --> 01:45:05,679
which means that once you create it

2631
01:45:05,679 --> 01:45:09,040
let's say a leaf you cannot change it

2632
01:45:09,040 --> 01:45:10,960
and we might say that this is not a good

2633
01:45:10,960 --> 01:45:13,280
idea i might even agree with it but it's

2634
01:45:13,280 --> 01:45:15,679
the fact of life and

2635
01:45:15,679 --> 01:45:18,400
we either support that or or they will

2636
01:45:18,400 --> 01:45:21,280
put uh young extension statements on

2637
01:45:21,280 --> 01:45:23,520
that or we will not document it still

2638
01:45:23,520 --> 01:45:25,520
will work that way just it's not

2639
01:45:25,520 --> 01:45:27,520
documented in yang anyway so this

2640
01:45:27,520 --> 01:45:29,360
invariant

2641
01:45:29,360 --> 01:45:31,360
yeah it's there

2642
01:45:31,360 --> 01:45:33,040
they are using it for the last 10 years

2643
01:45:33,040 --> 01:45:35,920
and they won't stop using it

2644
01:45:35,920 --> 01:45:38,080
the other thing that we have discussed a

2645
01:45:38,080 --> 01:45:41,280
number of times was capabilities

2646
01:45:41,280 --> 01:45:45,040
where yeah you would like to say that i

2647
01:45:45,040 --> 01:45:47,199
don't know i support

2648
01:45:47,199 --> 01:45:49,920
reporting periods 1 5

2649
01:45:49,920 --> 01:45:53,600
20 and whatever and i want those to be

2650
01:45:53,600 --> 01:45:56,159
visible and i want those to be

2651
01:45:56,159 --> 01:45:59,920
static no new values created no new

2652
01:45:59,920 --> 01:46:02,080
those values removed

2653
01:46:02,080 --> 01:46:03,840
that's again something that's already in

2654
01:46:03,840 --> 01:46:05,040
use

2655
01:46:05,040 --> 01:46:05,760
and

2656
01:46:05,760 --> 01:46:07,600
another use case i don't know that if

2657
01:46:07,600 --> 01:46:09,600
this is the correct tool for that is

2658
01:46:09,600 --> 01:46:11,920
system created and system enforced

2659
01:46:11,920 --> 01:46:15,040
access control rules where we say that

2660
01:46:15,040 --> 01:46:17,679
this thing in the configuration is must

2661
01:46:17,679 --> 01:46:21,040
be there and it no one is ever allowed

2662
01:46:21,040 --> 01:46:22,960
to remove it

2663
01:46:22,960 --> 01:46:26,400
some some implementations are using such

2664
01:46:26,400 --> 01:46:28,320
immutable

2665
01:46:28,320 --> 01:46:30,320
rules for that as well

2666
01:46:30,320 --> 01:46:31,600
thank you

2667
01:46:31,600 --> 01:46:34,000
thank you

2668
01:46:35,119 --> 01:46:36,800
so rob wilson

2669
01:46:36,800 --> 01:46:38,719
as well as participants again so just

2670
01:46:38,719 --> 01:46:40,800
sort of back to yang's comments and

2671
01:46:40,800 --> 01:46:43,920
bellagio's that i so i think that i feel

2672
01:46:43,920 --> 01:46:46,800
that um providing metadata information

2673
01:46:46,800 --> 01:46:49,040
to tell clients about how the system is

2674
01:46:49,040 --> 01:46:51,840
behaving is is fine and good i just want

2675
01:46:51,840 --> 01:46:54,400
to make sure that by doing this work

2676
01:46:54,400 --> 01:46:56,719
we don't sort of encourage this is a

2677
01:46:56,719 --> 01:46:58,480
good thing to be doing so i think we

2678
01:46:58,480 --> 01:47:00,080
need to have some sort of warnings to

2679
01:47:00,080 --> 01:47:02,320
say

2680
01:47:02,480 --> 01:47:03,679
this like we should document the

2681
01:47:03,679 --> 01:47:06,080
problems of having the immutable

2682
01:47:06,080 --> 01:47:08,080
configuration and why you might want to

2683
01:47:08,080 --> 01:47:09,760
avoid it but if you do have it here's

2684
01:47:09,760 --> 01:47:11,119
how you can

2685
01:47:11,119 --> 01:47:14,159
tell the client about it

2686
01:47:14,880 --> 01:47:16,800
i would like to agree and there are a

2687
01:47:16,800 --> 01:47:19,760
few specific places like typically

2688
01:47:19,760 --> 01:47:23,920
complete the restore backup copy con

2689
01:47:23,920 --> 01:47:25,440
copy config

2690
01:47:25,440 --> 01:47:27,600
replace full config that

2691
01:47:27,600 --> 01:47:29,840
are problematic in this area so we could

2692
01:47:29,840 --> 01:47:31,840
and should list them

2693
01:47:31,840 --> 01:47:36,159
but yeah they are still a fact of life

2694
01:47:37,679 --> 01:47:40,080
thank you

2695
01:47:46,080 --> 01:47:49,280
one more thing if i made

2696
01:47:49,280 --> 01:47:51,840
this draft states that immutable is in

2697
01:47:51,840 --> 01:47:54,480
that instance data

2698
01:47:54,480 --> 01:47:56,159
but one is right

2699
01:47:56,159 --> 01:47:59,360
yeah but even in

2700
01:47:59,679 --> 01:48:02,400
your second bullet here when you say

2701
01:48:02,400 --> 01:48:04,560
that immutable is applied to the whole

2702
01:48:04,560 --> 01:48:06,480
list

2703
01:48:06,480 --> 01:48:09,760
to me that seems more like a

2704
01:48:09,760 --> 01:48:11,440
schema level

2705
01:48:11,440 --> 01:48:14,239
immutable and actually that's what

2706
01:48:14,239 --> 01:48:17,360
you need in some cases

2707
01:48:17,360 --> 01:48:20,000
because yes i agree

2708
01:48:20,000 --> 01:48:21,920
if i think about it

2709
01:48:21,920 --> 01:48:24,400
you could have a third value instead of

2710
01:48:24,400 --> 01:48:26,639
yes and no

2711
01:48:26,639 --> 01:48:28,159
on the

2712
01:48:28,159 --> 01:48:30,960
metadata saying that all elements but

2713
01:48:30,960 --> 01:48:32,880
what if you don't have any entries at

2714
01:48:32,880 --> 01:48:35,760
all and the list is still immutable

2715
01:48:35,760 --> 01:48:37,679
and you have no place in the instance

2716
01:48:37,679 --> 01:48:39,119
data to

2717
01:48:39,119 --> 01:48:42,960
state that it is immutable

2718
01:48:44,239 --> 01:48:47,280
yeah i i still have one minute left so

2719
01:48:47,280 --> 01:48:50,800
yeah and can't

2720
01:48:54,000 --> 01:48:55,679
i just wanted to mention that i think

2721
01:48:55,679 --> 01:48:57,119
invariant is very different from

2722
01:48:57,119 --> 01:48:58,639
immutable and i don't

2723
01:48:58,639 --> 01:49:00,560
i don't want to treat that in the same

2724
01:49:00,560 --> 01:49:02,800
way

2725
01:49:03,199 --> 01:49:05,280
we can talk about that later but

2726
01:49:05,280 --> 01:49:08,159
okay thank you

2727
01:49:10,080 --> 01:49:11,280
and i was just gonna ask for a

2728
01:49:11,280 --> 01:49:13,040
clarification on a previous point but if

2729
01:49:13,040 --> 01:49:14,880
we're running out of time

2730
01:49:14,880 --> 01:49:18,040
it's okay

2731
01:49:30,000 --> 01:49:33,679
okay is there anything else

2732
01:49:34,960 --> 01:49:36,639
no more questions thank you very much

2733
01:49:36,639 --> 01:49:38,480
for this and we're going to move on to

2734
01:49:38,480 --> 01:49:40,840
the last uh

2735
01:49:40,840 --> 01:49:44,719
presentation okay thank you

2736
01:49:51,360 --> 01:49:53,119
okay

2737
01:49:53,119 --> 01:49:54,639
can you hear me

2738
01:49:54,639 --> 01:49:57,119
yes and you should have slide control

2739
01:49:57,119 --> 01:50:00,880
oh okay okay to get select control okay

2740
01:50:00,880 --> 01:50:03,679
here i got yeah okay thank you i'm using

2741
01:50:03,679 --> 01:50:06,320
i'm presenting this draft which has been

2742
01:50:06,320 --> 01:50:08,000
uh submitted to this because the

2743
01:50:08,000 --> 01:50:10,080
technical content of the draft is

2744
01:50:10,080 --> 01:50:11,920
related to the tease work

2745
01:50:11,920 --> 01:50:14,960
but we have a thumb ups on the process

2746
01:50:14,960 --> 01:50:17,040
that we can follow to move this draft

2747
01:50:17,040 --> 01:50:19,520
forward and we would like and this issue

2748
01:50:19,520 --> 01:50:21,440
can be more generic than just this

2749
01:50:21,440 --> 01:50:23,119
document we would like to get the

2750
01:50:23,119 --> 01:50:25,119
feedbacks from the netmod

2751
01:50:25,119 --> 01:50:27,199
working group so what is the problem we

2752
01:50:27,199 --> 01:50:29,520
are trying to address we need to do a

2753
01:50:29,520 --> 01:50:32,560
tiny and backward compatible update to a

2754
01:50:32,560 --> 01:50:35,280
young module in this case the itft types

2755
01:50:35,280 --> 01:50:37,520
which is already published in the into

2756
01:50:37,520 --> 01:50:40,320
an itf rsc and actually the change that

2757
01:50:40,320 --> 01:50:41,920
we need to do in this specific case is

2758
01:50:41,920 --> 01:50:44,080
just a new type def and a new grouping

2759
01:50:44,080 --> 01:50:46,960
with tulips so it's a very small

2760
01:50:46,960 --> 01:50:48,159
update

2761
01:50:48,159 --> 01:50:51,440
but which is blocking some other work

2762
01:50:51,440 --> 01:50:53,360
and there is some reluctances from the

2763
01:50:53,360 --> 01:50:56,719
people on moving those definitions

2764
01:50:56,719 --> 01:50:59,119
in in these d types because of the piece

2765
01:50:59,119 --> 01:51:00,800
of portion we didn't find any other

2766
01:51:00,800 --> 01:51:02,400
approach at this moment in time to

2767
01:51:02,400 --> 01:51:04,000
update a young module after being

2768
01:51:04,000 --> 01:51:06,239
published in rfc than doing the beast

2769
01:51:06,239 --> 01:51:08,480
the problem of the piece is that

2770
01:51:08,480 --> 01:51:11,280
the base rsc is a very long rfc and i

2771
01:51:11,280 --> 01:51:14,159
calculated four pages in the pdf version

2772
01:51:14,159 --> 01:51:16,560
and it doesn't contain only one module

2773
01:51:16,560 --> 01:51:18,800
it contains other modules another module

2774
01:51:18,800 --> 01:51:21,040
which does not need to be updated so

2775
01:51:21,040 --> 01:51:22,880
it's not very clear what it will happen

2776
01:51:22,880 --> 01:51:25,199
if to that module if you replace if we

2777
01:51:25,199 --> 01:51:27,840
obsolete the c8776

2778
01:51:27,840 --> 01:51:30,080
and the content that we want to publish

2779
01:51:30,080 --> 01:51:31,840
is quite mature because it's something

2780
01:51:31,840 --> 01:51:33,840
which is already present in working

2781
01:51:33,840 --> 01:51:35,199
group documents

2782
01:51:35,199 --> 01:51:37,440
some of which are working actually the

2783
01:51:37,440 --> 01:51:38,880
working group also started a few minutes

2784
01:51:38,880 --> 01:51:41,199
ago on one of them and

2785
01:51:41,199 --> 01:51:43,119
we just want to make them in the types

2786
01:51:43,119 --> 01:51:45,599
to make available to a broader scope

2787
01:51:45,599 --> 01:51:48,080
than just the documents and the yammers

2788
01:51:48,080 --> 01:51:49,920
where they have been originated so

2789
01:51:49,920 --> 01:51:52,000
because of the dependency and and the

2790
01:51:52,000 --> 01:51:54,159
maturity of the dependent work we need

2791
01:51:54,159 --> 01:51:56,000
to have a fast

2792
01:51:56,000 --> 01:51:58,400
approach or a fast process to to get

2793
01:51:58,400 --> 01:51:59,360
this

2794
01:51:59,360 --> 01:52:01,119
changes approved

2795
01:52:01,119 --> 01:52:03,520
by the itf without really delaying the

2796
01:52:03,520 --> 01:52:04,480
process

2797
01:52:04,480 --> 01:52:07,520
of the other working group documents

2798
01:52:07,520 --> 01:52:11,119
and the b is is quite an heavy document

2799
01:52:11,119 --> 01:52:12,639
what's happening

2800
01:52:12,639 --> 01:52:14,639
okay yeah so what do we need okay this

2801
01:52:14,639 --> 01:52:15,840
line of battery is more about the

2802
01:52:15,840 --> 01:52:18,159
content and there is a new type depth

2803
01:52:18,159 --> 01:52:20,400
and a new grouping which is coming from

2804
01:52:20,400 --> 01:52:22,400
working group documents

2805
01:52:22,400 --> 01:52:23,760
and

2806
01:52:23,760 --> 01:52:26,239
next is about what we propose so to to

2807
01:52:26,239 --> 01:52:28,480
to have a fast solution so what we

2808
01:52:28,480 --> 01:52:30,320
propose is to have this new document

2809
01:52:30,320 --> 01:52:32,480
that is rafter which is updating rather

2810
01:52:32,480 --> 01:52:35,920
than obsoleting the rsc 8776

2811
01:52:35,920 --> 01:52:38,320
and it is defining a new revision of the

2812
01:52:38,320 --> 01:52:41,520
itft types only of the itfd types

2813
01:52:41,520 --> 01:52:44,480
such that the the documents that depends

2814
01:52:44,480 --> 01:52:47,360
on these definitions can import this new

2815
01:52:47,360 --> 01:52:49,360
version in this device i'm using the

2816
01:52:49,360 --> 01:52:51,520
assembler label just to simplify the

2817
01:52:51,520 --> 01:52:54,480
slide to understand to clarify which one

2818
01:52:54,480 --> 01:52:56,400
is rough which one is approved and which

2819
01:52:56,400 --> 01:52:59,119
one is uh

2820
01:52:59,119 --> 01:53:00,719
an update of which

2821
01:53:00,719 --> 01:53:04,000
uh and and then other drafts can still

2822
01:53:04,000 --> 01:53:05,920
point and it can still import the t

2823
01:53:05,920 --> 01:53:08,159
types back tt packet types from the

2824
01:53:08,159 --> 01:53:10,080
lsc8776

2825
01:53:10,080 --> 01:53:12,320
if they see if they don't need uh any

2826
01:53:12,320 --> 01:53:15,119
update for that for that module so as

2827
01:53:15,119 --> 01:53:16,880
you see there are other documents which

2828
01:53:16,880 --> 01:53:19,360
are quite mature and which depend will

2829
01:53:19,360 --> 01:53:21,199
depend now from the new dock from this

2830
01:53:21,199 --> 01:53:23,760
new document so we need to have some

2831
01:53:23,760 --> 01:53:25,760
fast approach in the standardization to

2832
01:53:25,760 --> 01:53:26,880
avoid

2833
01:53:26,880 --> 01:53:28,639
stalling the progress of something which

2834
01:53:28,639 --> 01:53:31,280
is rated for publication

2835
01:53:31,280 --> 01:53:33,360
and what are the issue that we have the

2836
01:53:33,360 --> 01:53:35,040
first issue is that we want to limit the

2837
01:53:35,040 --> 01:53:37,440
scope of the work to make it faster only

2838
01:53:37,440 --> 01:53:40,880
to the what we update so the td tiny and

2839
01:53:40,880 --> 01:53:43,440
vector compatible updates that we need

2840
01:53:43,440 --> 01:53:46,080
and for for the proposed solution that

2841
01:53:46,080 --> 01:53:47,679
we would like to

2842
01:53:47,679 --> 01:53:49,760
follow with this document is to include

2843
01:53:49,760 --> 01:53:52,639
in the main body of dlc text only the

2844
01:53:52,639 --> 01:53:55,280
changes not the definitions which are

2845
01:53:55,280 --> 01:53:58,239
already in rsc8776

2846
01:53:58,239 --> 01:54:00,400
however by doing all of the changes we i

2847
01:54:00,400 --> 01:54:02,159
we are afraid that we create some

2848
01:54:02,159 --> 01:54:04,159
problem with a young tool chain like rfc

2849
01:54:04,159 --> 01:54:06,560
strip or the young catalog which is

2850
01:54:06,560 --> 01:54:09,119
extracting the whole module from the rsc

2851
01:54:09,119 --> 01:54:11,440
so to to solve this problem the proposal

2852
01:54:11,440 --> 01:54:13,360
is that we can include the whole module

2853
01:54:13,360 --> 01:54:16,000
revision into an appendix these appendix

2854
01:54:16,000 --> 01:54:18,800
is just providing the complete revision

2855
01:54:18,800 --> 01:54:20,880
and we can consider these appendix as

2856
01:54:20,880 --> 01:54:22,239
out of autoscope for the review and

2857
01:54:22,239 --> 01:54:24,719
comments it is there just to allow the

2858
01:54:24,719 --> 01:54:26,320
tooling to work

2859
01:54:26,320 --> 01:54:28,800
and but now we have a possibility to get

2860
01:54:28,800 --> 01:54:30,960
the text in the main body and the text

2861
01:54:30,960 --> 01:54:33,199
the penis will go out of sync

2862
01:54:33,199 --> 01:54:35,679
so to make sure that there is alignment

2863
01:54:35,679 --> 01:54:37,599
we can generate the text in the main

2864
01:54:37,599 --> 01:54:40,480
body with an automatic simple lift tool

2865
01:54:40,480 --> 01:54:42,800
uh we propose one in the document if

2866
01:54:42,800 --> 01:54:44,800
there are better tools we are uh willing

2867
01:54:44,800 --> 01:54:47,280
to to take them into account such that

2868
01:54:47,280 --> 01:54:49,119
by running basically what we are doing

2869
01:54:49,119 --> 01:54:49,920
we are

2870
01:54:49,920 --> 01:54:52,400
updating the the young module in the in

2871
01:54:52,400 --> 01:54:55,440
the appendix run the tool and get the

2872
01:54:55,440 --> 01:54:57,119
the new llc

2873
01:54:57,119 --> 01:54:59,599
in one shot and keep consistency between

2874
01:54:59,599 --> 01:55:02,639
the main body and the appendix

2875
01:55:02,639 --> 01:55:04,239
so what is the next steps we would like

2876
01:55:04,239 --> 01:55:06,000
to get feedbacks from network working

2877
01:55:06,000 --> 01:55:07,920
group and also from the ads about the

2878
01:55:07,920 --> 01:55:09,679
proposed process whether the process

2879
01:55:09,679 --> 01:55:11,599
that we would like to use to update an

2880
01:55:11,599 --> 01:55:14,480
accm model is reasonable and and then we

2881
01:55:14,480 --> 01:55:16,000
can progress

2882
01:55:16,000 --> 01:55:18,320
the technical content of this document

2883
01:55:18,320 --> 01:55:20,400
through the this working group or

2884
01:55:20,400 --> 01:55:21,520
following the

2885
01:55:21,520 --> 01:55:23,840
working group normal processor

2886
01:55:23,840 --> 01:55:25,040
thank you

2887
01:55:25,040 --> 01:55:27,360
and in the in the backup there are some

2888
01:55:27,360 --> 01:55:29,199
uh and there's a drafts we describe

2889
01:55:29,199 --> 01:55:30,960
additional alternative options that we

2890
01:55:30,960 --> 01:55:33,199
have evaluated and why we

2891
01:55:33,199 --> 01:55:36,800
think these approaches will be better

2892
01:55:36,800 --> 01:55:39,119
thank you

2893
01:55:43,040 --> 01:55:44,639
all right um

2894
01:55:44,639 --> 01:55:46,480
danny

2895
01:55:46,480 --> 01:55:47,599
so

2896
01:55:47,599 --> 01:55:50,159
i just wanted to give you my experience

2897
01:55:50,159 --> 01:55:53,760
having gone through this recently

2898
01:55:53,760 --> 01:55:55,599
we had

2899
01:55:55,599 --> 01:55:59,760
just published rfc the pft yang module

2900
01:55:59,760 --> 01:56:02,560
and had to go through a process of

2901
01:56:02,560 --> 01:56:04,000
actually

2902
01:56:04,000 --> 01:56:05,840
correcting

2903
01:56:05,840 --> 01:56:08,080
the proposed model

2904
01:56:08,080 --> 01:56:10,239
so it was a backward incompatible change

2905
01:56:10,239 --> 01:56:12,000
so which may not be exactly what you're

2906
01:56:12,000 --> 01:56:13,599
looking at

2907
01:56:13,599 --> 01:56:16,560
but i think in terms of a process it was

2908
01:56:16,560 --> 01:56:17,440
very

2909
01:56:17,440 --> 01:56:18,639
similar

2910
01:56:18,639 --> 01:56:20,320
so

2911
01:56:20,320 --> 01:56:22,560
what we had to do

2912
01:56:22,560 --> 01:56:23,840
was

2913
01:56:23,840 --> 01:56:26,560
the we had multiple modules first of all

2914
01:56:26,560 --> 01:56:29,760
in the draft and only one of them was

2915
01:56:29,760 --> 01:56:31,679
being updated

2916
01:56:31,679 --> 01:56:32,639
so

2917
01:56:32,639 --> 01:56:34,880
we went ahead and made the change in

2918
01:56:34,880 --> 01:56:36,239
that model

2919
01:56:36,239 --> 01:56:39,199
and of course updated with a new time

2920
01:56:39,199 --> 01:56:40,560
date stamp

2921
01:56:40,560 --> 01:56:42,560
so that essentially indicated that it

2922
01:56:42,560 --> 01:56:44,000
was an updated

2923
01:56:44,000 --> 01:56:46,000
module

2924
01:56:46,000 --> 01:56:48,639
we then went ahead and added

2925
01:56:48,639 --> 01:56:52,159
an explanation in the appendix section

2926
01:56:52,159 --> 01:56:55,040
describing what the change was

2927
01:56:55,040 --> 01:56:55,920
and

2928
01:56:55,920 --> 01:56:58,159
finally if there were any other modules

2929
01:56:58,159 --> 01:57:00,159
that were dependent on it

2930
01:57:00,159 --> 01:57:02,480
those were also updated

2931
01:57:02,480 --> 01:57:05,360
to reflect the fact that they

2932
01:57:05,360 --> 01:57:07,040
even if they were not

2933
01:57:07,040 --> 01:57:09,520
being directly impacted they

2934
01:57:09,520 --> 01:57:12,480
that the model that they were referring

2935
01:57:12,480 --> 01:57:14,960
uh had changed so therefore they had it

2936
01:57:14,960 --> 01:57:17,440
had to undergo a change also

2937
01:57:17,440 --> 01:57:20,560
so in i think in summary that those are

2938
01:57:20,560 --> 01:57:22,960
the set of changes

2939
01:57:22,960 --> 01:57:27,199
now i don't know as far as fast or slow

2940
01:57:27,199 --> 01:57:28,719
uh the approach

2941
01:57:28,719 --> 01:57:30,239
uh

2942
01:57:30,239 --> 01:57:32,560
is still taking months we still haven't

2943
01:57:32,560 --> 01:57:34,480
finalized the draft is still not

2944
01:57:34,480 --> 01:57:35,440
approved

2945
01:57:35,440 --> 01:57:37,599
and this is about three months old at

2946
01:57:37,599 --> 01:57:39,679
this point

2947
01:57:39,679 --> 01:57:43,360
but you need a visa corrector

2948
01:57:45,760 --> 01:57:47,520
sorry what was the question did you

2949
01:57:47,520 --> 01:57:50,159
publish an rfcbs

2950
01:57:50,159 --> 01:57:52,960
yes so we published it as an rfc biz so

2951
01:57:52,960 --> 01:57:54,400
you will see

2952
01:57:54,400 --> 01:57:59,280
i think it's called rfc 9127 business

2953
01:57:59,280 --> 01:58:01,520
yeah

2954
01:58:01,520 --> 01:58:04,239
the the there's a uh jeff put it into

2955
01:58:04,239 --> 01:58:06,000
the chat mahesh before you go away i

2956
01:58:06,000 --> 01:58:07,599
know you've already walked just to

2957
01:58:07,599 --> 01:58:09,679
clarify there were you updated the

2958
01:58:09,679 --> 01:58:12,239
versions even of the modules even of the

2959
01:58:12,239 --> 01:58:15,440
modules that were not changed

2960
01:58:15,440 --> 01:58:18,080
i believe so let me confirm that by

2961
01:58:18,080 --> 01:58:21,679
taking a look i we had to update

2962
01:58:21,679 --> 01:58:23,679
some of the dependent what i call the

2963
01:58:23,679 --> 01:58:25,520
dependent modules but let me confirm

2964
01:58:25,520 --> 01:58:27,199
that give me a sec

2965
01:58:27,199 --> 01:58:28,800
yeah i think that's an important point

2966
01:58:28,800 --> 01:58:30,400
of what to do with the modules that

2967
01:58:30,400 --> 01:58:34,080
aren't being changed in the document

2968
01:58:34,080 --> 01:58:35,280
thanks

2969
01:58:35,280 --> 01:58:36,800
i think rob you're next

2970
01:58:36,800 --> 01:58:39,440
uh yeah so rob walton so so my thoughts

2971
01:58:39,440 --> 01:58:42,159
on this is i think that um because this

2972
01:58:42,159 --> 01:58:44,239
is a backwards compatible update to that

2973
01:58:44,239 --> 01:58:45,199
module

2974
01:58:45,199 --> 01:58:47,119
i don't have any issues with this going

2975
01:58:47,119 --> 01:58:49,599
into a separate draft that's updating

2976
01:58:49,599 --> 01:58:50,800
that base

2977
01:58:50,800 --> 01:58:54,080
draft and i have no issues with updating

2978
01:58:54,080 --> 01:58:55,599
just one of those modules i think that's

2979
01:58:55,599 --> 01:58:57,119
okay and i think the dependencies will

2980
01:58:57,119 --> 01:58:58,639
work um

2981
01:58:58,639 --> 01:59:00,159
if you go back to your previous slide

2982
01:59:00,159 --> 01:59:02,639
please i wasn't so sure about your

2983
01:59:02,639 --> 01:59:04,159
proposal of

2984
01:59:04,159 --> 01:59:06,800
um effectively having a diff in the main

2985
01:59:06,800 --> 01:59:09,440
part of the draft and a full version of

2986
01:59:09,440 --> 01:59:11,920
the appendix i think you'd be better off

2987
01:59:11,920 --> 01:59:13,599
just putting the latest version of the

2988
01:59:13,599 --> 01:59:15,280
module in the main body of the draft

2989
01:59:15,280 --> 01:59:16,080
because that's what you're now

2990
01:59:16,080 --> 01:59:18,719
publishing and then having some text

2991
01:59:18,719 --> 01:59:20,000
which could be in the introduction it

2992
01:59:20,000 --> 01:59:22,560
could be in the appendix that flags

2993
01:59:22,560 --> 01:59:23,679
what's been added or what the

2994
01:59:23,679 --> 01:59:26,000
differences are i think in terms of the

2995
01:59:26,000 --> 01:59:28,000
review process you just need to make

2996
01:59:28,000 --> 01:59:29,520
sure that when this goes to young

2997
01:59:29,520 --> 01:59:31,360
doctor's review or

2998
01:59:31,360 --> 01:59:33,679
and through the isg review we're saying

2999
01:59:33,679 --> 01:59:35,360
look these are the only things that are

3000
01:59:35,360 --> 01:59:36,719
changing

3001
01:59:36,719 --> 01:59:38,560
and if that's highlighted i think most

3002
01:59:38,560 --> 01:59:40,159
ads will be happy just to do a diff

3003
01:59:40,159 --> 01:59:42,239
review of the new stuff they don't they

3004
01:59:42,239 --> 01:59:43,679
won't review other stuff that's already

3005
01:59:43,679 --> 01:59:44,800
there

3006
01:59:44,800 --> 01:59:47,599
so that's what i would propose

3007
01:59:47,599 --> 01:59:49,440
so you propose to put the main body and

3008
01:59:49,440 --> 01:59:51,599
to let the chairs and the authors and

3009
01:59:51,599 --> 01:59:53,760
the id to figure out that

3010
01:59:53,760 --> 01:59:56,480
what the comment is only on the deltas

3011
01:59:56,480 --> 01:59:58,239
you i mean you can always add a comment

3012
01:59:58,239 --> 02:00:00,639
in that's removed by the rfc editor at

3013
02:00:00,639 --> 02:00:02,639
the top of the document saying you know

3014
02:00:02,639 --> 02:00:03,920
please this is the only thing that's

3015
02:00:03,920 --> 02:00:05,360
changed please focus the review on these

3016
02:00:05,360 --> 02:00:09,040
parts and then that gets deleted later

3017
02:00:09,040 --> 02:00:12,000
that seems reasonable to me

3018
02:00:12,000 --> 02:00:14,159
okay

3019
02:00:14,159 --> 02:00:16,239
sorry if i'm jumping the queue oh we

3020
02:00:16,239 --> 02:00:18,239
have jeff please

3021
02:00:18,239 --> 02:00:20,159
okay i was just going to answer the

3022
02:00:20,159 --> 02:00:22,639
question that lou asked

3023
02:00:22,639 --> 02:00:23,599
about

3024
02:00:23,599 --> 02:00:24,320
did

3025
02:00:24,320 --> 02:00:25,599
and did we have to update the other

3026
02:00:25,599 --> 02:00:28,159
modules the answer was yes

3027
02:00:28,159 --> 02:00:31,119
so what we changed was the types module

3028
02:00:31,119 --> 02:00:32,800
and if any of the

3029
02:00:32,800 --> 02:00:35,760
modules imported the types module then

3030
02:00:35,760 --> 02:00:39,040
we also bumped the revision date on

3031
02:00:39,040 --> 02:00:41,520
those modules that were importing the

3032
02:00:41,520 --> 02:00:43,679
updated module

3033
02:00:43,679 --> 02:00:46,719
all right didn't he expand it

3034
02:00:46,880 --> 02:00:49,040
sorry go ahead

3035
02:00:49,040 --> 02:00:51,199
the the uh

3036
02:00:51,199 --> 02:00:52,880
there is some controversy as to what we

3037
02:00:52,880 --> 02:00:55,040
ended up doing so what the language

3038
02:00:55,040 --> 02:00:57,280
requires us to do at the moment is just

3039
02:00:57,280 --> 02:00:58,639
simply bump the

3040
02:00:58,639 --> 02:01:01,199
things that aren't directly impacted

3041
02:01:01,199 --> 02:01:04,719
there was a long set of threads

3042
02:01:04,719 --> 02:01:05,760
where we attempted to get the yang

3043
02:01:05,760 --> 02:01:07,920
doctors to chime in and this where tom

3044
02:01:07,920 --> 02:01:09,920
petch basically wanted us to have every

3045
02:01:09,920 --> 02:01:12,560
single thing that used this module also

3046
02:01:12,560 --> 02:01:14,960
bumped in some fashion

3047
02:01:14,960 --> 02:01:17,840
we did so primarily for bfd

3048
02:01:17,840 --> 02:01:19,679
but he was sort of pushing to have this

3049
02:01:19,679 --> 02:01:21,760
done across the board i don't think

3050
02:01:21,760 --> 02:01:23,760
that's necessarily reasonable what i

3051
02:01:23,760 --> 02:01:26,080
would suggest is uh most of this thread

3052
02:01:26,080 --> 02:01:28,320
is available on the bfd mailing list and

3053
02:01:28,320 --> 02:01:30,400
i would suggest taking a look at it

3054
02:01:30,400 --> 02:01:32,400
because that's affected the procedure

3055
02:01:32,400 --> 02:01:33,360
that's

3056
02:01:33,360 --> 02:01:37,080
under debate right now

3057
02:01:45,520 --> 02:01:47,840
i might assume rob ah good rob removed

3058
02:01:47,840 --> 02:01:48,880
himself

3059
02:01:48,880 --> 02:01:51,840
um

3060
02:01:52,159 --> 02:01:53,920
yeah i think uh

3061
02:01:53,920 --> 02:01:56,560
italo rob gave you the solution that you

3062
02:01:56,560 --> 02:01:57,679
want

3063
02:01:57,679 --> 02:02:00,560
which is just do a

3064
02:02:00,560 --> 02:02:02,719
just take the the module that you want

3065
02:02:02,719 --> 02:02:05,119
to modify and put it in its own

3066
02:02:05,119 --> 02:02:06,480
um

3067
02:02:06,480 --> 02:02:09,840
document that updates the space

3068
02:02:09,840 --> 02:02:11,119
uh

3069
02:02:11,119 --> 02:02:15,440
the base rfc rather than do a this

3070
02:02:15,440 --> 02:02:17,360
and i think that covers the narrow case

3071
02:02:17,360 --> 02:02:19,840
that you're covering you're discussing

3072
02:02:19,840 --> 02:02:23,199
um the vfd conversation is much more

3073
02:02:23,199 --> 02:02:27,199
interesting because it's uh nbc but

3074
02:02:28,560 --> 02:02:30,400
i think rob is giving you a solution

3075
02:02:30,400 --> 02:02:33,119
that'll allow you to move quickly and

3076
02:02:33,119 --> 02:02:35,040
only

3077
02:02:35,040 --> 02:02:37,440
update the piece that you want

3078
02:02:37,440 --> 02:02:39,920
i do also want to echo the comment that

3079
02:02:39,920 --> 02:02:42,320
rob made that going forward with a way

3080
02:02:42,320 --> 02:02:44,480
that requires new tooling is probably

3081
02:02:44,480 --> 02:02:47,760
not the way to go um and you know

3082
02:02:47,760 --> 02:02:49,040
creating

3083
02:02:49,040 --> 02:02:50,639
uh

3084
02:02:50,639 --> 02:02:53,920
new ways of defining modules with diffs

3085
02:02:53,920 --> 02:02:56,159
and things like that is is just likely

3086
02:02:56,159 --> 02:02:58,560
going to cause a lot of confusion

3087
02:02:58,560 --> 02:02:59,599
now

3088
02:02:59,599 --> 02:03:01,599
the narrative part of your text of

3089
02:03:01,599 --> 02:03:04,880
course can uh highlight the differences

3090
02:03:04,880 --> 02:03:06,480
um but the

3091
02:03:06,480 --> 02:03:09,280
module part should be a normal module

3092
02:03:09,280 --> 02:03:12,559
that our tooling supports

3093
02:03:13,119 --> 02:03:16,239
okay and maybe we can put some comments

3094
02:03:16,239 --> 02:03:18,080
to clarify what has

3095
02:03:18,080 --> 02:03:19,840
identity okay we can follow that

3096
02:03:19,840 --> 02:03:22,159
approach

3097
02:03:23,760 --> 02:03:26,159
thank you

3098
02:03:26,159 --> 02:03:29,199
with that we're actually a little over

3099
02:03:29,199 --> 02:03:33,280
and uh thank you all for a good session

3100
02:03:33,280 --> 02:03:35,679
and look forward to hopefully seeing you

3101
02:03:35,679 --> 02:03:37,760
in person in

3102
02:03:37,760 --> 02:03:40,480
philadelphia

3103
02:03:41,360 --> 02:03:42,960
okay thank you

3104
02:03:42,960 --> 02:03:45,840
thank you bye-bye

3105
02:03:46,159 --> 02:03:48,560
thank you

3106
02:03:48,560 --> 02:03:51,119
oh and charles thank you for uh

3107
02:03:51,119 --> 02:03:52,960
supporting us in the room

3108
02:03:52,960 --> 02:03:54,800
yeah yeah you bet you and kent made it

3109
02:03:54,800 --> 02:03:57,840
easy for me

3110
02:04:25,840 --> 02:04:28,840
um

3111
02:04:56,159 --> 02:04:58,239
you

