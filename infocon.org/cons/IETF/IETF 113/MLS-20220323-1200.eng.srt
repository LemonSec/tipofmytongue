1
00:00:05,279 --> 00:00:06,110
tony ran away

2
00:00:06,110 --> 00:00:07,520
[Laughter]

3
00:00:07,520 --> 00:00:09,200
wait a minute somebody ran out did we

4
00:00:09,200 --> 00:00:10,880
scare him away

5
00:00:10,880 --> 00:00:12,719
you scared tony rodney

6
00:00:12,719 --> 00:00:15,719
okay

7
00:00:18,560 --> 00:00:20,959
hey there

8
00:00:28,320 --> 00:00:31,800
there's some spots

9
00:00:32,479 --> 00:00:35,480
power

10
00:00:46,559 --> 00:00:47,840
all right we'll give everybody two

11
00:00:47,840 --> 00:00:51,960
minutes and then we'll jump into this

12
00:01:04,080 --> 00:01:07,080
so

13
00:02:01,920 --> 00:02:03,759
all right i think it's probably time to

14
00:02:03,759 --> 00:02:06,479
get going here um hey everyone this is

15
00:02:06,479 --> 00:02:09,520
the mls uh meeting at uh

16
00:02:09,520 --> 00:02:11,120
itaf 1.3

17
00:02:11,120 --> 00:02:12,560
um here's some particulars about the

18
00:02:12,560 --> 00:02:16,239
meeting as much as kind of a resting um

19
00:02:16,239 --> 00:02:18,959
slide for us

20
00:02:20,080 --> 00:02:22,400
um nick and i are the chairs just saying

21
00:02:22,400 --> 00:02:23,599
hi

22
00:02:23,599 --> 00:02:24,959
i think i don't know if you want to pop

23
00:02:24,959 --> 00:02:25,760
on

24
00:02:25,760 --> 00:02:28,799
and say hello real quick

25
00:02:30,800 --> 00:02:31,840
all righty

26
00:02:31,840 --> 00:02:33,680
get to the good stuff this is the ietf

27
00:02:33,680 --> 00:02:36,080
notewell

28
00:02:36,080 --> 00:02:38,080
um you've probably hopefully seen this

29
00:02:38,080 --> 00:02:40,720
by now since it's wednesday um this is

30
00:02:40,720 --> 00:02:42,560
about the policies and procedures that

31
00:02:42,560 --> 00:02:43,680
you

32
00:02:43,680 --> 00:02:45,760
need to follow are that you've agreed to

33
00:02:45,760 --> 00:02:47,440
follow as part of participating in the

34
00:02:47,440 --> 00:02:48,800
ihf meeting

35
00:02:48,800 --> 00:02:51,040
a lot of us do with ipr

36
00:02:51,040 --> 00:02:53,440
patent policy kind of stuff

37
00:02:53,440 --> 00:02:55,840
if you know something say something um

38
00:02:55,840 --> 00:02:57,680
you know

39
00:02:57,680 --> 00:02:59,120
working group process a bunch of other

40
00:02:59,120 --> 00:03:00,879
things there anti-harassment

41
00:03:00,879 --> 00:03:03,360
procedures code of contact

42
00:03:03,360 --> 00:03:04,560
et cetera

43
00:03:04,560 --> 00:03:08,080
um this working group has been well um

44
00:03:08,080 --> 00:03:11,440
is in my mind is uh doing very well um

45
00:03:11,440 --> 00:03:12,560
but i just want to remind everyone of

46
00:03:12,560 --> 00:03:14,319
the itif code of conduct guidelines here

47
00:03:14,319 --> 00:03:18,000
that are documented in rfc 7154

48
00:03:18,000 --> 00:03:20,000
basically treat everyone with respects

49
00:03:20,000 --> 00:03:22,080
um try to speak slowly and limit the use

50
00:03:22,080 --> 00:03:23,920
of slang i feel like that was probably

51
00:03:23,920 --> 00:03:25,360
written for me

52
00:03:25,360 --> 00:03:28,080
dispute ideas by reason to argument uh

53
00:03:28,080 --> 00:03:30,480
use your best engineering judgment

54
00:03:30,480 --> 00:03:31,840
find the best solution for the whole the

55
00:03:31,840 --> 00:03:33,599
internet and contribute to the ongoing

56
00:03:33,599 --> 00:03:34,480
work

57
00:03:34,480 --> 00:03:37,280
of this group and the rest of the itf um

58
00:03:37,280 --> 00:03:39,280
again uh please keep in mind that both

59
00:03:39,280 --> 00:03:40,239
the mic

60
00:03:40,239 --> 00:03:42,640
on the jabber and the meat echo are on

61
00:03:42,640 --> 00:03:44,560
um the thing i guess is to please state

62
00:03:44,560 --> 00:03:46,640
your name when you get to the microphone

63
00:03:46,640 --> 00:03:48,080
it makes it easier for the note takers

64
00:03:48,080 --> 00:03:50,400
to to figure out who said what

65
00:03:50,400 --> 00:03:53,439
uh here's our agenda which is uh our

66
00:03:53,439 --> 00:03:55,439
typical kind of uh light agenda we got

67
00:03:55,439 --> 00:03:57,439
some of the ministrivia um we're gonna

68
00:03:57,439 --> 00:03:59,040
go through some things uh virtual

69
00:03:59,040 --> 00:04:00,640
meeting tips the virtual blue sheets

70
00:04:00,640 --> 00:04:02,640
that's right i forgot to say this if

71
00:04:02,640 --> 00:04:04,480
you're in the room please go ahead and

72
00:04:04,480 --> 00:04:07,120
zap the qr code because that's that that

73
00:04:07,120 --> 00:04:09,519
takes um that takes the place of signing

74
00:04:09,519 --> 00:04:10,560
up on the blue sheet so you don't have

75
00:04:10,560 --> 00:04:14,640
to touch the aki aki pen

76
00:04:14,640 --> 00:04:16,238
sheet of paper

77
00:04:16,238 --> 00:04:18,798
so i appreciate that thank you very much

78
00:04:18,798 --> 00:04:20,639
if you are going to join the queue

79
00:04:20,639 --> 00:04:22,560
and when you're in the room please the

80
00:04:22,560 --> 00:04:24,560
the q tool and we can i can manage it

81
00:04:24,560 --> 00:04:26,639
because i can see the key just fine

82
00:04:26,639 --> 00:04:28,320
um and basically we're gonna go through

83
00:04:28,320 --> 00:04:30,320
the protocol architecture and federation

84
00:04:30,320 --> 00:04:34,080
drafts um uh the quick synopsis is we're

85
00:04:34,080 --> 00:04:35,600
getting pretty close on the first two

86
00:04:35,600 --> 00:04:36,720
and the third one we're gonna try to

87
00:04:36,720 --> 00:04:38,080
revive

88
00:04:38,080 --> 00:04:40,080
um all right so the next the next one

89
00:04:40,080 --> 00:04:42,080
the status you know basically it's time

90
00:04:42,080 --> 00:04:43,759
to review these are all

91
00:04:43,759 --> 00:04:45,280
it's time to it's

92
00:04:45,280 --> 00:04:46,720
time for review for the architecture

93
00:04:46,720 --> 00:04:48,800
draft the mls protocol documents pretty

94
00:04:48,800 --> 00:04:50,560
close to being done and the mls

95
00:04:50,560 --> 00:04:52,160
federation draft like i said we're gonna

96
00:04:52,160 --> 00:04:53,600
revive

97
00:04:53,600 --> 00:04:55,840
this should look pretty familiar um this

98
00:04:55,840 --> 00:04:57,919
is the timeline we've had for a slide

99
00:04:57,919 --> 00:05:00,240
for a couple of uh meetings now

100
00:05:00,240 --> 00:05:02,000
basically we did a working group last

101
00:05:02,000 --> 00:05:03,680
call we did a feature freeze and we've

102
00:05:03,680 --> 00:05:05,360
done a bunch of versions of the draft to

103
00:05:05,360 --> 00:05:07,199
try to get through the

104
00:05:07,199 --> 00:05:09,360
github issues and pull requests and

105
00:05:09,360 --> 00:05:12,320
we've done that now we're on draft 13 we

106
00:05:12,320 --> 00:05:14,160
may need a draft uh

107
00:05:14,160 --> 00:05:16,000
14 then we'll do a working group last

108
00:05:16,000 --> 00:05:16,960
call

109
00:05:16,960 --> 00:05:19,360
and then we kind of you know go back out

110
00:05:19,360 --> 00:05:22,000
and see what happened

111
00:05:22,000 --> 00:05:24,000
and so we're getting there slowly but

112
00:05:24,000 --> 00:05:26,160
surely um the other thing to note is

113
00:05:26,160 --> 00:05:28,160
that uh the way we've structured these

114
00:05:28,160 --> 00:05:29,919
documents is that there's no way that

115
00:05:29,919 --> 00:05:32,080
the protocol document can really get to

116
00:05:32,080 --> 00:05:34,880
the isg before the architecture document

117
00:05:34,880 --> 00:05:36,800
um because of the way we split things

118
00:05:36,800 --> 00:05:38,560
out that they basically have to progress

119
00:05:38,560 --> 00:05:41,360
together so when we're doing the kind of

120
00:05:41,360 --> 00:05:43,680
progressing the documents to the area

121
00:05:43,680 --> 00:05:46,320
director that the um architecture

122
00:05:46,320 --> 00:05:47,680
document is going to have to go with the

123
00:05:47,680 --> 00:05:49,360
protocol document because otherwise it

124
00:05:49,360 --> 00:05:52,240
just won't make a lot of sense

125
00:05:52,240 --> 00:05:54,720
all right so that's pretty much the end

126
00:05:54,720 --> 00:05:56,080
of that stuff now we're going to jump

127
00:05:56,080 --> 00:05:57,039
into

128
00:05:57,039 --> 00:05:57,780
um

129
00:05:57,780 --> 00:05:59,680
[Music]

130
00:05:59,680 --> 00:06:01,759
richard slides and hopefully he has

131
00:06:01,759 --> 00:06:02,960
arrived

132
00:06:02,960 --> 00:06:06,720
there he is great i will stop talking um

133
00:06:06,720 --> 00:06:08,240
richard do you want to uh maybe i

134
00:06:08,240 --> 00:06:09,520
stopped showing this and you grabbed the

135
00:06:09,520 --> 00:06:10,960
ball

136
00:06:10,960 --> 00:06:14,240
um i'd rather drive the slides off the

137
00:06:14,240 --> 00:06:15,520
media echo thing as you're supposed to

138
00:06:15,520 --> 00:06:16,400
have

139
00:06:16,400 --> 00:06:17,120
yep

140
00:06:17,120 --> 00:06:19,600
they're loaded so i will stop i think if

141
00:06:19,600 --> 00:06:21,600
i stop sharing and then you share them

142
00:06:21,600 --> 00:06:23,520
then that works

143
00:06:23,520 --> 00:06:25,120
i can try

144
00:06:25,120 --> 00:06:26,800
yes i think if you hit the little the

145
00:06:26,800 --> 00:06:29,520
thing next to the

146
00:06:33,039 --> 00:06:34,720
that yeah

147
00:06:34,720 --> 00:06:36,960
how do i do the slides

148
00:06:36,960 --> 00:06:38,880
so if you hit the one word then next to

149
00:06:38,880 --> 00:06:40,960
the handout button there's a shareply

150
00:06:40,960 --> 00:06:43,199
preloaded slides

151
00:06:43,199 --> 00:06:45,600
so i click that and then

152
00:06:45,600 --> 00:06:48,800
yep and then you'll get uh yep there we

153
00:06:48,800 --> 00:06:50,639
go gotcha

154
00:06:50,639 --> 00:06:51,759
excellent

155
00:06:51,759 --> 00:06:54,560
thank you i'll stop talking

156
00:06:54,560 --> 00:06:55,919
all right

157
00:06:55,919 --> 00:06:58,720
so is that showing up for folks

158
00:06:58,720 --> 00:07:01,520
yeah it looks good looks good cool

159
00:07:01,520 --> 00:07:06,080
um so um we were at draft 12 at the last

160
00:07:06,080 --> 00:07:08,960
ietf meeting as i recall um we have

161
00:07:08,960 --> 00:07:11,599
since issued draft 13 and i think we're

162
00:07:11,599 --> 00:07:13,840
going to do draft 14 before we go into

163
00:07:13,840 --> 00:07:16,000
working group called delta between 13

164
00:07:16,000 --> 00:07:17,120
and 14

165
00:07:17,120 --> 00:07:19,120
should be pretty small so this is mainly

166
00:07:19,120 --> 00:07:20,400
just a little bit of background on what

167
00:07:20,400 --> 00:07:22,080
we did in 13 to kind of queue up the

168
00:07:22,080 --> 00:07:24,000
discussion for the issues to try and get

169
00:07:24,000 --> 00:07:25,759
those last couple issues in prs closed

170
00:07:25,759 --> 00:07:27,440
out

171
00:07:27,440 --> 00:07:30,400
so diving into this draft 13 um did a

172
00:07:30,400 --> 00:07:32,800
bunch of stuff um this was a really

173
00:07:32,800 --> 00:07:35,199
active uh version

174
00:07:35,199 --> 00:07:36,000
um

175
00:07:36,000 --> 00:07:37,120
thanks to

176
00:07:37,120 --> 00:07:38,400
all the folks that did really good

177
00:07:38,400 --> 00:07:40,960
analysis on here and i think a lot of

178
00:07:40,960 --> 00:07:42,720
this was due to implementation works

179
00:07:42,720 --> 00:07:45,280
which is exciting so i'm glad to have

180
00:07:45,280 --> 00:07:47,360
more implementation effort here

181
00:07:47,360 --> 00:07:48,879
um i'm not going to go through all these

182
00:07:48,879 --> 00:07:51,039
but i'll go through a couple highlights

183
00:07:51,039 --> 00:07:51,840
um

184
00:07:51,840 --> 00:07:53,440
one thing we did was

185
00:07:53,440 --> 00:07:55,840
um we did a stoppage a temporary

186
00:07:55,840 --> 00:07:58,160
stoppage on all the technical work to

187
00:07:58,160 --> 00:08:00,080
just put the document in a more sensible

188
00:08:00,080 --> 00:08:01,120
order

189
00:08:01,120 --> 00:08:01,919
so

190
00:08:01,919 --> 00:08:03,520
as you can see with the arrows here we

191
00:08:03,520 --> 00:08:05,759
kind of move things around so they read

192
00:08:05,759 --> 00:08:07,440
a lot better

193
00:08:07,440 --> 00:08:09,120
note like i said no technical changes to

194
00:08:09,120 --> 00:08:11,520
that but i think that the document flows

195
00:08:11,520 --> 00:08:13,039
overall a lot better so it should be

196
00:08:13,039 --> 00:08:15,120
more comprehensible when we send it out

197
00:08:15,120 --> 00:08:16,800
to last call and you know when people

198
00:08:16,800 --> 00:08:19,039
pick it up later on

199
00:08:19,039 --> 00:08:20,639
um

200
00:08:20,639 --> 00:08:22,240
another you know

201
00:08:22,240 --> 00:08:24,479
building up more technical from here um

202
00:08:24,479 --> 00:08:26,080
one of the changes we made that is is a

203
00:08:26,080 --> 00:08:27,199
little different if you're coming from a

204
00:08:27,199 --> 00:08:29,919
tls background is we streamline the the

205
00:08:29,919 --> 00:08:32,000
vector syntax down a little bit in tls

206
00:08:32,000 --> 00:08:34,320
you say you know how many bytes of

207
00:08:34,320 --> 00:08:36,080
length you want to put at the front of a

208
00:08:36,080 --> 00:08:37,360
vector

209
00:08:37,360 --> 00:08:39,279
which constrains how long the vector can

210
00:08:39,279 --> 00:08:40,958
be in bytes

211
00:08:40,958 --> 00:08:42,640
which means that if you have two

212
00:08:42,640 --> 00:08:44,000
implementations on an interrupt they

213
00:08:44,000 --> 00:08:45,920
have to agree on how many bytes that

214
00:08:45,920 --> 00:08:47,680
they're going to put there

215
00:08:47,680 --> 00:08:49,200
so we found when we did some interrupt

216
00:08:49,200 --> 00:08:51,120
testing on earlier address this led to a

217
00:08:51,120 --> 00:08:53,760
bunch of stupid interrupt bugs

218
00:08:53,760 --> 00:08:55,519
and you know there's obviously more code

219
00:08:55,519 --> 00:08:58,080
to kind of negotiate which um

220
00:08:58,080 --> 00:09:01,519
which sizes you use so the pr we did

221
00:09:01,519 --> 00:09:04,080
we just made the uh the length field of

222
00:09:04,080 --> 00:09:05,920
the vector encoding a variable length

223
00:09:05,920 --> 00:09:07,839
integer so that you just put as many

224
00:09:07,839 --> 00:09:10,320
bytes of length as you need and there's

225
00:09:10,320 --> 00:09:11,680
some signaling to say how many bytes

226
00:09:11,680 --> 00:09:12,720
there are

227
00:09:12,720 --> 00:09:14,800
um stealing a scheme here from quick

228
00:09:14,800 --> 00:09:16,800
which um you know i think eckerd

229
00:09:16,800 --> 00:09:19,200
proposed putting into ctls is a compact

230
00:09:19,200 --> 00:09:21,279
way of doing vectors there

231
00:09:21,279 --> 00:09:22,959
but yeah that's

232
00:09:22,959 --> 00:09:24,320
got to make make some things a little

233
00:09:24,320 --> 00:09:25,279
simpler

234
00:09:25,279 --> 00:09:27,200
use this v notation to indicate it in

235
00:09:27,200 --> 00:09:29,519
the brackets

236
00:09:29,519 --> 00:09:32,880
um let's see what else another nice um

237
00:09:32,880 --> 00:09:35,040
kind of conceptual cleanup we did was to

238
00:09:35,040 --> 00:09:37,839
split um leaf nodes and key packages um

239
00:09:37,839 --> 00:09:39,920
so key package as you recall in prior

240
00:09:39,920 --> 00:09:42,560
address were used both for initializing

241
00:09:42,560 --> 00:09:44,399
pre-publishing my capability so i can be

242
00:09:44,399 --> 00:09:46,080
initialized into a group

243
00:09:46,080 --> 00:09:48,800
and for representing my appearance in

244
00:09:48,800 --> 00:09:50,399
the group in the tree

245
00:09:50,399 --> 00:09:52,240
after i joined

246
00:09:52,240 --> 00:09:54,480
so what we did i think this was due to a

247
00:09:54,480 --> 00:09:58,640
suggestion from teophil wallace

248
00:09:58,640 --> 00:10:01,920
we split the those kind of two roles so

249
00:10:01,920 --> 00:10:04,160
the leaf we now have a leaf node struct

250
00:10:04,160 --> 00:10:05,920
which is what represents a member in the

251
00:10:05,920 --> 00:10:06,640
group

252
00:10:06,640 --> 00:10:08,480
in the tree

253
00:10:08,480 --> 00:10:10,640
and then that leaf node gets wrapped up

254
00:10:10,640 --> 00:10:12,560
in a key package and the key package is

255
00:10:12,560 --> 00:10:14,720
used only for pre-publishing information

256
00:10:14,720 --> 00:10:16,320
about a client so they can be initially

257
00:10:16,320 --> 00:10:18,480
initiated into a group

258
00:10:18,480 --> 00:10:19,839
while we were doing that refactor we did

259
00:10:19,839 --> 00:10:21,839
a couple of other things that kind of

260
00:10:21,839 --> 00:10:23,200
clean up the structure so things that

261
00:10:23,200 --> 00:10:25,760
were expressed as extensions but always

262
00:10:25,760 --> 00:10:27,360
had to be in a key package we just

263
00:10:27,360 --> 00:10:29,760
promoted those to being fields

264
00:10:29,760 --> 00:10:32,480
we now have two separate signatures on a

265
00:10:32,480 --> 00:10:34,640
leaf node and a key package

266
00:10:34,640 --> 00:10:36,720
so that you can verify that the leaf

267
00:10:36,720 --> 00:10:37,600
node

268
00:10:37,600 --> 00:10:39,680
verify a leaf node in the tree as well

269
00:10:39,680 --> 00:10:40,959
as verifying the key packages

270
00:10:40,959 --> 00:10:42,560
pre-published that both use the same

271
00:10:42,560 --> 00:10:43,760
signature keypad that's in the

272
00:10:43,760 --> 00:10:45,200
credential

273
00:10:45,200 --> 00:10:46,000
um

274
00:10:46,000 --> 00:10:47,760
one thing's really nice here is we now

275
00:10:47,760 --> 00:10:50,480
have two hpke public keys so the tree

276
00:10:50,480 --> 00:10:52,480
the key that goes into the tree and is

277
00:10:52,480 --> 00:10:54,240
used for treechem

278
00:10:54,240 --> 00:10:56,240
is different from the key that is used

279
00:10:56,240 --> 00:10:58,240
to encrypt the welcome message when you

280
00:10:58,240 --> 00:10:59,519
join

281
00:10:59,519 --> 00:11:01,360
so you have kind of that nice crypto

282
00:11:01,360 --> 00:11:03,920
separation between the one-time

283
00:11:03,920 --> 00:11:06,880
initialization operation and the ongoing

284
00:11:06,880 --> 00:11:09,760
uh tree cam membership in the group

285
00:11:09,760 --> 00:11:10,560
um

286
00:11:10,560 --> 00:11:12,480
finally the last thing this let us do is

287
00:11:12,480 --> 00:11:14,240
i had really illustrated the slide here

288
00:11:14,240 --> 00:11:16,079
is that when you have leaf node that's

289
00:11:16,079 --> 00:11:18,880
added by an update or commit um that

290
00:11:18,880 --> 00:11:20,480
leaf node gets re-signed and that

291
00:11:20,480 --> 00:11:22,320
signature covers the group id so your

292
00:11:22,320 --> 00:11:24,560
leaf nodes are now bound uh to the group

293
00:11:24,560 --> 00:11:26,959
they're participating in

294
00:11:26,959 --> 00:11:28,959
and by the way people should feel to

295
00:11:28,959 --> 00:11:30,399
step in if there's comments or questions

296
00:11:30,399 --> 00:11:32,160
here i'm just kind of rolling through

297
00:11:32,160 --> 00:11:33,200
um

298
00:11:33,200 --> 00:11:36,720
the high points of graph 13.

299
00:11:36,720 --> 00:11:38,480
um

300
00:11:38,480 --> 00:11:40,800
a nice suggestion from martin mullarczek

301
00:11:40,800 --> 00:11:42,880
which gives us a little bit more

302
00:11:42,880 --> 00:11:45,440
efficiency here is that we've updated

303
00:11:45,440 --> 00:11:47,279
the algorithms for how we update the

304
00:11:47,279 --> 00:11:49,519
tree so that um we no longer generate

305
00:11:49,519 --> 00:11:51,680
what we call redundant nodes

306
00:11:51,680 --> 00:11:52,639
um

307
00:11:52,639 --> 00:11:54,720
where we're done by redundant we mean a

308
00:11:54,720 --> 00:11:57,040
node that only has one child

309
00:11:57,040 --> 00:11:59,760
that's populated so here i've put keys

310
00:11:59,760 --> 00:12:01,360
nodes that have key pairs attached to

311
00:12:01,360 --> 00:12:03,680
them in black nodes that are blank and

312
00:12:03,680 --> 00:12:05,279
in white

313
00:12:05,279 --> 00:12:06,000
so

314
00:12:06,000 --> 00:12:07,760
all of these nodes that have the arrows

315
00:12:07,760 --> 00:12:09,120
next to them in the lower graph they're

316
00:12:09,120 --> 00:12:11,680
all redundant because they had only one

317
00:12:11,680 --> 00:12:15,200
child that was populated

318
00:12:15,200 --> 00:12:16,880
so you know if you in this case where we

319
00:12:16,880 --> 00:12:18,480
have only three

320
00:12:18,480 --> 00:12:20,399
members in a tree that's bigger because

321
00:12:20,399 --> 00:12:22,720
it used to have more members

322
00:12:22,720 --> 00:12:24,000
we no longer need any of those

323
00:12:24,000 --> 00:12:26,320
intermediate nodes and so we

324
00:12:26,320 --> 00:12:28,480
save on key generations on this

325
00:12:28,480 --> 00:12:30,959
streamlines tree truncation later on um

326
00:12:30,959 --> 00:12:32,000
generally makes things a little bit

327
00:12:32,000 --> 00:12:32,959
cleaner

328
00:12:32,959 --> 00:12:36,920
so it's a nice simplification

329
00:12:38,720 --> 00:12:40,320
one thing that took us a few iterations

330
00:12:40,320 --> 00:12:42,639
to figure out is this um tree hash based

331
00:12:42,639 --> 00:12:44,240
parentheses another thing from from

332
00:12:44,240 --> 00:12:46,480
tafil and then the inria folks

333
00:12:46,480 --> 00:12:47,519
um

334
00:12:47,519 --> 00:12:49,279
right now with some parent house you'll

335
00:12:49,279 --> 00:12:51,680
recall is how we enable someone who's

336
00:12:51,680 --> 00:12:53,600
joining the group to verify

337
00:12:53,600 --> 00:12:55,680
that the keys in this you know who who

338
00:12:55,680 --> 00:12:57,440
has access to the keys in the tree that

339
00:12:57,440 --> 00:12:59,680
the trees are actually following the

340
00:12:59,680 --> 00:13:01,839
what we call a tree invariant that the

341
00:13:01,839 --> 00:13:04,160
key is only accessible to the the nodes

342
00:13:04,160 --> 00:13:06,000
below it

343
00:13:06,000 --> 00:13:07,760
in that parent hash

344
00:13:07,760 --> 00:13:10,560
the parent hash here at v

345
00:13:10,560 --> 00:13:14,079
would cover its parent x

346
00:13:14,079 --> 00:13:17,200
and a representation of its sibling

347
00:13:17,200 --> 00:13:19,360
zed

348
00:13:19,360 --> 00:13:22,079
and so right now uh in draft 12 uh we

349
00:13:22,079 --> 00:13:23,600
use the resolution of that sibling

350
00:13:23,600 --> 00:13:26,000
because z is populated here with the

351
00:13:26,000 --> 00:13:28,639
resolution is just the node zed

352
00:13:28,639 --> 00:13:30,639
uh and so the change we made was to use

353
00:13:30,639 --> 00:13:32,639
the tree hash of the sibling which binds

354
00:13:32,639 --> 00:13:35,600
in all of the the entire sub tree

355
00:13:35,600 --> 00:13:37,760
under the sibling node

356
00:13:37,760 --> 00:13:39,839
um which obviously gets you a tighter

357
00:13:39,839 --> 00:13:41,279
binding to the structure of the tree so

358
00:13:41,279 --> 00:13:42,720
you type in the

359
00:13:42,720 --> 00:13:44,720
whole structure of subtree tie in the

360
00:13:44,720 --> 00:13:45,760
things that are in the leaves like the

361
00:13:45,760 --> 00:13:48,880
credentials um so you get a lot more

362
00:13:48,880 --> 00:13:50,560
more information tied into that parent

363
00:13:50,560 --> 00:13:52,800
hash and so more rigidity in the tree

364
00:13:52,800 --> 00:13:56,000
fewer ways an attacker can lie

365
00:13:56,000 --> 00:13:58,000
the challenge you get with that is that

366
00:13:58,000 --> 00:13:59,600
when you do this at the right edge of

367
00:13:59,600 --> 00:14:00,639
the tree

368
00:14:00,639 --> 00:14:02,240
um that you're binding the tree

369
00:14:02,240 --> 00:14:03,440
structure but the tree structure at the

370
00:14:03,440 --> 00:14:05,040
right edge of the tree can change when

371
00:14:05,040 --> 00:14:07,839
you add someone so in this example you

372
00:14:07,839 --> 00:14:10,720
know someone has added this node h as

373
00:14:10,720 --> 00:14:12,000
new member h

374
00:14:12,000 --> 00:14:13,920
um without sending an update path which

375
00:14:13,920 --> 00:14:15,519
is legal so everyone just ratcheted you

376
00:14:15,519 --> 00:14:18,560
know symmetric ratcheted forward

377
00:14:18,560 --> 00:14:20,880
and as a result h and the blank parent

378
00:14:20,880 --> 00:14:23,199
of h got added to the tree

379
00:14:23,199 --> 00:14:24,800
so what that means is when h gets the

380
00:14:24,800 --> 00:14:26,399
tree it needs to

381
00:14:26,399 --> 00:14:27,839
it's going to need to verify the parent

382
00:14:27,839 --> 00:14:29,519
hash at v

383
00:14:29,519 --> 00:14:32,000
and it's going to need to recompute the

384
00:14:32,000 --> 00:14:34,000
subtree at lead

385
00:14:34,000 --> 00:14:38,160
at from before h was added

386
00:14:38,160 --> 00:14:39,760
so it's going to need to you know in

387
00:14:39,760 --> 00:14:41,600
addition to computing the treehouse the

388
00:14:41,600 --> 00:14:43,839
hashes of the trees that exist today it

389
00:14:43,839 --> 00:14:47,360
needs to compute some historical hashes

390
00:14:47,360 --> 00:14:48,720
and teo field provided some nice

391
00:14:48,720 --> 00:14:50,639
analysis on which we validated an

392
00:14:50,639 --> 00:14:53,360
implementation it shows if you

393
00:14:53,360 --> 00:14:55,279
do a super naive algorithm here you end

394
00:14:55,279 --> 00:14:58,160
up with doing n log n hashes i'm having

395
00:14:58,160 --> 00:14:59,600
because you're having to recompute some

396
00:14:59,600 --> 00:15:00,560
things

397
00:15:00,560 --> 00:15:02,320
um if you do a smarter algorithm that

398
00:15:02,320 --> 00:15:04,720
has minimization you can get down to n

399
00:15:04,720 --> 00:15:06,240
log log n

400
00:15:06,240 --> 00:15:07,360
um

401
00:15:07,360 --> 00:15:09,519
and so there is some cost to this it's

402
00:15:09,519 --> 00:15:13,279
it's worse than o n but not worse by

403
00:15:13,279 --> 00:15:15,519
much of a factor it doesn't get to do

404
00:15:15,519 --> 00:15:17,680
much and so just to validate

405
00:15:17,680 --> 00:15:21,199
that that uh cost wasn't too much um

406
00:15:21,199 --> 00:15:24,560
i prototyped this out in um in mlsp the

407
00:15:24,560 --> 00:15:26,320
c plus base stack that we're using in

408
00:15:26,320 --> 00:15:27,360
webex

409
00:15:27,360 --> 00:15:30,399
um and looked at a few cases so the the

410
00:15:30,399 --> 00:15:33,040
the thing that really makes this um

411
00:15:33,040 --> 00:15:34,079
algorithm

412
00:15:34,079 --> 00:15:37,040
uh challenging is unmerged leaves um

413
00:15:37,040 --> 00:15:39,120
because as you can see the the way that

414
00:15:39,120 --> 00:15:40,639
tree structure change happens is when

415
00:15:40,639 --> 00:15:42,560
you have unmerged leaves

416
00:15:42,560 --> 00:15:44,800
so simulated a few cases here you know

417
00:15:44,800 --> 00:15:46,480
looking at a full tree with no unmerged

418
00:15:46,480 --> 00:15:48,880
leaves and then synthetically made some

419
00:15:48,880 --> 00:15:50,480
trees that were either like half on

420
00:15:50,480 --> 00:15:52,560
merged or three quarters of merge to

421
00:15:52,560 --> 00:15:54,639
really try and drive out the painful

422
00:15:54,639 --> 00:15:57,440
cases uh for this new algorithm

423
00:15:57,440 --> 00:15:58,639
um

424
00:15:58,639 --> 00:16:00,639
and then finally it's

425
00:16:00,639 --> 00:16:03,040
tested you know a case where we have one

426
00:16:03,040 --> 00:16:05,199
very sparse tree with one path populated

427
00:16:05,199 --> 00:16:08,240
as if you had um

428
00:16:08,240 --> 00:16:10,240
you know someone adding a bunch of folks

429
00:16:10,240 --> 00:16:12,320
to the tree um and looking what they had

430
00:16:12,320 --> 00:16:14,880
to do to join um

431
00:16:14,880 --> 00:16:16,639
basically this path case is the best

432
00:16:16,639 --> 00:16:18,320
case um in fact in that case you're

433
00:16:18,320 --> 00:16:20,000
actually doing um your performance looks

434
00:16:20,000 --> 00:16:22,560
better than the previous algorithm even

435
00:16:22,560 --> 00:16:24,240
in the worst case you're you're at about

436
00:16:24,240 --> 00:16:26,160
a factor of two um worst case

437
00:16:26,160 --> 00:16:29,040
performance um and quantitative in

438
00:16:29,040 --> 00:16:30,480
absolute terms

439
00:16:30,480 --> 00:16:31,440
um

440
00:16:31,440 --> 00:16:33,839
you know the you can see the the top

441
00:16:33,839 --> 00:16:35,600
right graph there you're still

442
00:16:35,600 --> 00:16:37,279
taking on the order of 30 milliseconds

443
00:16:37,279 --> 00:16:39,360
to verify the tree when you join which

444
00:16:39,360 --> 00:16:41,279
when you consider these trees at you

445
00:16:41,279 --> 00:16:43,040
know 200 plus members or in the order of

446
00:16:43,040 --> 00:16:44,240
megabytes it's going to take you much

447
00:16:44,240 --> 00:16:45,600
longer than that to download the tree at

448
00:16:45,600 --> 00:16:46,320
all

449
00:16:46,320 --> 00:16:48,959
so it's not really a salient performance

450
00:16:48,959 --> 00:16:51,759
hit uh to do this uh parent hash and get

451
00:16:51,759 --> 00:16:54,399
the increased binding

452
00:16:54,399 --> 00:16:56,399
so i think that's everything that went

453
00:16:56,399 --> 00:16:59,279
into draft 13 so i think um you know the

454
00:16:59,279 --> 00:17:01,040
upshot of all this discussion especially

455
00:17:01,040 --> 00:17:02,480
after we close out our last few issues

456
00:17:02,480 --> 00:17:04,160
here is i think we're we're pretty much

457
00:17:04,160 --> 00:17:06,799
ready for working group last call

458
00:17:06,799 --> 00:17:08,160
so with that

459
00:17:08,160 --> 00:17:09,919
i think it's time to

460
00:17:09,919 --> 00:17:13,359
ponder draft 14 um which is uh you know

461
00:17:13,359 --> 00:17:14,480
going to

462
00:17:14,480 --> 00:17:16,240
incorporate i think just the the prs we

463
00:17:16,240 --> 00:17:18,959
have outstanding so sean did you want to

464
00:17:18,959 --> 00:17:21,520
drive um you want to share github and

465
00:17:21,520 --> 00:17:24,480
and walk us through that

466
00:17:25,679 --> 00:17:28,640
um i can i think that you need to

467
00:17:28,640 --> 00:17:30,960
relinquish it or i take it from you hold

468
00:17:30,960 --> 00:17:33,600
on yes so i have relinquished you

469
00:17:33,600 --> 00:17:35,200
relinquished it now let me see if i can

470
00:17:35,200 --> 00:17:36,960
screen share

471
00:17:36,960 --> 00:17:38,640
do you really want to stream scare yes i

472
00:17:38,640 --> 00:17:40,320
do let me tell you which thing i want to

473
00:17:40,320 --> 00:17:41,919
screen share

474
00:17:41,919 --> 00:17:44,400
how about

475
00:17:45,760 --> 00:17:48,240
issues this one

476
00:17:48,240 --> 00:17:50,559
allow is this actually showing look at

477
00:17:50,559 --> 00:17:51,760
that it's like i almost know what i'm

478
00:17:51,760 --> 00:17:53,280
doing all right cool where do you want

479
00:17:53,280 --> 00:17:55,600
me to go

480
00:17:56,160 --> 00:17:59,679
um so issues wise i think that one issue

481
00:17:59,679 --> 00:18:01,520
is covered by an existing pr so we can

482
00:18:01,520 --> 00:18:04,480
just dive into prs

483
00:18:08,480 --> 00:18:09,840
um and let's see i think we can go

484
00:18:09,840 --> 00:18:11,919
through this in kind of easiness order

485
00:18:11,919 --> 00:18:16,480
so 619 the top one there

486
00:18:16,480 --> 00:18:18,720
i think to feel proved that this morning

487
00:18:18,720 --> 00:18:20,240
all this is doing is going through and

488
00:18:20,240 --> 00:18:23,200
annotating all of our code blocks

489
00:18:23,200 --> 00:18:24,640
with what type there so there's not

490
00:18:24,640 --> 00:18:27,280
really any technical content here

491
00:18:27,280 --> 00:18:30,000
it's just saying that you know

492
00:18:30,000 --> 00:18:32,720
this this one's tls this one is ascier

493
00:18:32,720 --> 00:18:34,480
this one's pseudocode

494
00:18:34,480 --> 00:18:35,520
um

495
00:18:35,520 --> 00:18:37,520
this allows um if you pause it one of

496
00:18:37,520 --> 00:18:42,480
the aasvg ones they're shown actually um

497
00:18:42,480 --> 00:18:44,640
this is you know the tls bits i came

498
00:18:44,640 --> 00:18:45,679
across this because actually i was

499
00:18:45,679 --> 00:18:48,080
trying to extract the tls syntax to help

500
00:18:48,080 --> 00:18:49,919
with implementation um the other cute

501
00:18:49,919 --> 00:18:52,720
trick you can do here's this aasvg tool

502
00:18:52,720 --> 00:18:54,480
that martin thompson wrote we'll

503
00:18:54,480 --> 00:18:56,720
actually convert this ladder diagram to

504
00:18:56,720 --> 00:18:58,400
an svg file so it looks a little

505
00:18:58,400 --> 00:19:01,440
prettier uh in the html rendered version

506
00:19:01,440 --> 00:19:02,320
so

507
00:19:02,320 --> 00:19:03,919
um

508
00:19:03,919 --> 00:19:05,200
i think we can probably just merge this

509
00:19:05,200 --> 00:19:07,280
because i think it's just editorial but

510
00:19:07,280 --> 00:19:08,720
i thought i'd let people know in case

511
00:19:08,720 --> 00:19:10,160
there are

512
00:19:10,160 --> 00:19:11,679
this is editorial i think you can just

513
00:19:11,679 --> 00:19:13,360
lock the button on this one

514
00:19:13,360 --> 00:19:14,400
yeah

515
00:19:14,400 --> 00:19:15,520
all right

516
00:19:15,520 --> 00:19:17,840
next

517
00:19:20,880 --> 00:19:21,760
um

518
00:19:21,760 --> 00:19:24,400
this one is slightly

519
00:19:24,400 --> 00:19:26,799
uh technical

520
00:19:26,799 --> 00:19:29,039
um

521
00:19:29,679 --> 00:19:31,679
if you want to go to the changes it's a

522
00:19:31,679 --> 00:19:34,480
small change but it's again trying to go

523
00:19:34,480 --> 00:19:35,760
for um

524
00:19:35,760 --> 00:19:36,840
more key

525
00:19:36,840 --> 00:19:40,480
separation um so right i already said we

526
00:19:40,480 --> 00:19:42,320
uh one of the things i mentioned in the

527
00:19:42,320 --> 00:19:44,240
key leaf node key package separation

528
00:19:44,240 --> 00:19:46,240
that was nice is we have these two

529
00:19:46,240 --> 00:19:48,960
hpke keys now one for initialization and

530
00:19:48,960 --> 00:19:52,080
one that is my long term key in the tree

531
00:19:52,080 --> 00:19:53,360
there's no requirement right now that

532
00:19:53,360 --> 00:19:55,360
there's actually be different keys and

533
00:19:55,360 --> 00:19:57,760
so this pr is just adding that

534
00:19:57,760 --> 00:19:59,600
requirement in there

535
00:19:59,600 --> 00:20:02,480
so require that they'd be different main

536
00:20:02,480 --> 00:20:04,480
draw vector is it's the other key so you

537
00:20:04,480 --> 00:20:06,400
need more entropy to generate it

538
00:20:06,400 --> 00:20:08,000
um

539
00:20:08,000 --> 00:20:09,280
but i suppose you could comply with the

540
00:20:09,280 --> 00:20:10,720
protocol by deriving them from some

541
00:20:10,720 --> 00:20:12,480
common secret as well so

542
00:20:12,480 --> 00:20:13,760
i don't think that the entropy

543
00:20:13,760 --> 00:20:15,200
requirement is

544
00:20:15,200 --> 00:20:16,880
too terrible

545
00:20:16,880 --> 00:20:19,120
so i i'm inclined to merge this unless

546
00:20:19,120 --> 00:20:22,320
folks have objections

547
00:20:26,080 --> 00:20:27,600
i will consider that silence to be

548
00:20:27,600 --> 00:20:30,080
consent

549
00:20:30,799 --> 00:20:32,799
617 i think we've got pretty good

550
00:20:32,799 --> 00:20:34,480
agreement on this as well on the mailing

551
00:20:34,480 --> 00:20:35,760
list um

552
00:20:35,760 --> 00:20:39,600
617 we had some discussion about um

553
00:20:39,600 --> 00:20:41,120
i guess the discussion started here

554
00:20:41,120 --> 00:20:42,960
about deniability

555
00:20:42,960 --> 00:20:45,039
um where folks were there's some

556
00:20:45,039 --> 00:20:46,640
ambiguity um

557
00:20:46,640 --> 00:20:49,120
uh or some disagreement in how people

558
00:20:49,120 --> 00:20:50,960
read the spec when it came to what keys

559
00:20:50,960 --> 00:20:53,120
were used for signatures and as part of

560
00:20:53,120 --> 00:20:55,120
that discussion it came out that um

561
00:20:55,120 --> 00:20:56,240
there was ambiguity around these

562
00:20:56,240 --> 00:20:57,679
pre-configured centers as well there

563
00:20:57,679 --> 00:20:59,360
wasn't uh it wasn't kind of defined

564
00:20:59,360 --> 00:21:01,679
interoperab interoperably how you would

565
00:21:01,679 --> 00:21:03,120
make sure everyone agrees on who's

566
00:21:03,120 --> 00:21:04,480
pre-configured

567
00:21:04,480 --> 00:21:06,480
so this pr um

568
00:21:06,480 --> 00:21:10,400
cleans that up basically it ensures that

569
00:21:10,400 --> 00:21:11,520
every

570
00:21:11,520 --> 00:21:14,000
everyone in the group agrees on who the

571
00:21:14,000 --> 00:21:15,600
external

572
00:21:15,600 --> 00:21:18,000
senders are so they'll everyone make

573
00:21:18,000 --> 00:21:19,679
sure that everyone will agree

574
00:21:19,679 --> 00:21:21,120
on

575
00:21:21,120 --> 00:21:24,159
who the valid signers of a message are

576
00:21:24,159 --> 00:21:25,520
so if

577
00:21:25,520 --> 00:21:27,360
an external party non-member sends a

578
00:21:27,360 --> 00:21:28,799
message into the group

579
00:21:28,799 --> 00:21:30,400
we're guaranteed that everyone in the

580
00:21:30,400 --> 00:21:32,480
group will handle that in the same way

581
00:21:32,480 --> 00:21:35,600
and either accept it or reject it

582
00:21:35,600 --> 00:21:38,480
consistently across the group

583
00:21:38,480 --> 00:21:40,000
so i think we discussed this pretty

584
00:21:40,000 --> 00:21:41,360
thrilling list i think it's got a couple

585
00:21:41,360 --> 00:21:44,000
of approvals in github um but i thought

586
00:21:44,000 --> 00:21:44,720
we'd

587
00:21:44,720 --> 00:21:46,000
bring it up here just in case there are

588
00:21:46,000 --> 00:21:49,640
any further comments

589
00:22:01,520 --> 00:22:03,120
hearing none

590
00:22:03,120 --> 00:22:06,320
we'll consider that merged

591
00:22:07,919 --> 00:22:10,159
okay so now that these last two are

592
00:22:10,159 --> 00:22:12,799
maybe a bit more controversial um so

593
00:22:12,799 --> 00:22:14,640
rowan proposed this one

594
00:22:14,640 --> 00:22:17,840
to indicate the mime type of the uh

595
00:22:17,840 --> 00:22:19,360
application data that's carried in an

596
00:22:19,360 --> 00:22:21,360
application message

597
00:22:21,360 --> 00:22:23,280
um

598
00:22:23,280 --> 00:22:26,400
my comment here in the pr um so my

599
00:22:26,400 --> 00:22:28,799
inclination um to just a bottom line up

600
00:22:28,799 --> 00:22:29,600
front

601
00:22:29,600 --> 00:22:31,919
um is to to close this one with no

602
00:22:31,919 --> 00:22:34,480
action i think this is probably

603
00:22:34,480 --> 00:22:36,559
um kind of

604
00:22:36,559 --> 00:22:38,400
getting a bit premature in terms of

605
00:22:38,400 --> 00:22:39,520
signaling

606
00:22:39,520 --> 00:22:42,000
inner content types

607
00:22:42,000 --> 00:22:44,320
i think we've got the tools to add this

608
00:22:44,320 --> 00:22:46,799
later on

609
00:22:46,799 --> 00:22:49,360
um but rowan did you want to

610
00:22:49,360 --> 00:22:51,918
tee this up

611
00:22:53,520 --> 00:22:55,200
yes hi

612
00:22:55,200 --> 00:22:57,760
good morning everybody um

613
00:22:57,760 --> 00:22:59,919
so

614
00:23:00,320 --> 00:23:01,440
i think

615
00:23:01,440 --> 00:23:05,280
mls is a little bit unique among itf

616
00:23:05,280 --> 00:23:07,520
protocols and not

617
00:23:07,520 --> 00:23:09,760
either

618
00:23:09,760 --> 00:23:13,360
uh having a place where you can describe

619
00:23:13,360 --> 00:23:16,480
what the next layer is or defining

620
00:23:16,480 --> 00:23:20,240
explicitly what the next year will be

621
00:23:20,240 --> 00:23:21,280
and

622
00:23:21,280 --> 00:23:23,600
so this was my attempt to

623
00:23:23,600 --> 00:23:25,200
to fix this so

624
00:23:25,200 --> 00:23:27,280
i don't think it's premature at all i

625
00:23:27,280 --> 00:23:28,400
think this is

626
00:23:28,400 --> 00:23:30,000
this is basic

627
00:23:30,000 --> 00:23:33,679
uh hygiene protocol hygiene

628
00:23:33,679 --> 00:23:36,640
and pretty essential um if you're in a

629
00:23:36,640 --> 00:23:39,440
group an mls group that doesn't

630
00:23:39,440 --> 00:23:41,120
require

631
00:23:41,120 --> 00:23:43,679
um you know that that is uh completely

632
00:23:43,679 --> 00:23:45,039
heterogeneous

633
00:23:45,039 --> 00:23:47,039
then you can then you could admit this

634
00:23:47,039 --> 00:23:49,120
and the only harm that this would cause

635
00:23:49,120 --> 00:23:51,919
would be a single extra byte

636
00:23:51,919 --> 00:23:54,320
saying that the length of this

637
00:23:54,320 --> 00:23:57,600
is zero bytes

638
00:23:58,080 --> 00:24:00,480
so i

639
00:24:00,480 --> 00:24:02,320
first of all like i don't see that

640
00:24:02,320 --> 00:24:05,840
there's any great harm

641
00:24:05,919 --> 00:24:07,200
and

642
00:24:07,200 --> 00:24:09,840
second of all it means that you have the

643
00:24:09,840 --> 00:24:11,200
ability to

644
00:24:11,200 --> 00:24:12,720
to

645
00:24:12,720 --> 00:24:14,799
have this basic function where you say

646
00:24:14,799 --> 00:24:16,799
okay i'm the thing that i am sending is

647
00:24:16,799 --> 00:24:17,760
a

648
00:24:17,760 --> 00:24:18,960
this

649
00:24:18,960 --> 00:24:20,960
and um

650
00:24:20,960 --> 00:24:23,440
if you need something more fancy than

651
00:24:23,440 --> 00:24:24,960
than a specific mime type with

652
00:24:24,960 --> 00:24:27,600
parameters then you can send a mime type

653
00:24:27,600 --> 00:24:29,840
that has further descriptions

654
00:24:29,840 --> 00:24:32,000
uh and it you know just because it's

655
00:24:32,000 --> 00:24:33,679
just because it's a mime type doesn't

656
00:24:33,679 --> 00:24:35,440
mean that that thing needs to be text

657
00:24:35,440 --> 00:24:36,880
you could send uh

658
00:24:36,880 --> 00:24:40,240
applications or you know application

659
00:24:40,240 --> 00:24:42,480
slash vnd dot

660
00:24:42,480 --> 00:24:46,000
you know example vendor

661
00:24:46,000 --> 00:24:49,120
this crazy special message format

662
00:24:49,120 --> 00:24:52,480
um so those things are all possible

663
00:24:52,480 --> 00:24:54,559
yeah and just to kind of make an analogy

664
00:24:54,559 --> 00:24:55,919
for people i think

665
00:24:55,919 --> 00:24:57,919
if folks are coming from a tls context i

666
00:24:57,919 --> 00:24:58,880
think the right analogy here is

667
00:24:58,880 --> 00:25:00,799
something like alpn

668
00:25:00,799 --> 00:25:02,880
which was added to tls as an extension

669
00:25:02,880 --> 00:25:04,400
but you know you could ask the question

670
00:25:04,400 --> 00:25:06,640
is if if we were doing tls over from

671
00:25:06,640 --> 00:25:08,320
scratch would we develop alpn from the

672
00:25:08,320 --> 00:25:09,360
start

673
00:25:09,360 --> 00:25:12,360
eric

674
00:25:14,559 --> 00:25:16,720
mr squirrel are you intending to speak

675
00:25:16,720 --> 00:25:20,240
here we're not getting audio from you

676
00:25:20,240 --> 00:25:22,159
i was intending to speak but you know

677
00:25:22,159 --> 00:25:23,440
then didn't

678
00:25:23,440 --> 00:25:24,640
um

679
00:25:24,640 --> 00:25:26,000
i mean i think so the airplane is an

680
00:25:26,000 --> 00:25:29,600
interesting analogy i guess you know i i

681
00:25:29,600 --> 00:25:32,559
tend to think of this as um

682
00:25:32,559 --> 00:25:33,840
um you know

683
00:25:33,840 --> 00:25:35,840
like mls is designed to be embedded you

684
00:25:35,840 --> 00:25:37,919
know in other protocols it is in itself

685
00:25:37,919 --> 00:25:39,520
like a complete protocol

686
00:25:39,520 --> 00:25:40,559
um

687
00:25:40,559 --> 00:25:42,640
and so i would think that the largest

688
00:25:42,640 --> 00:25:45,200
are those protocols to define what um

689
00:25:45,200 --> 00:25:46,640
what what the contents of those messages

690
00:25:46,640 --> 00:25:47,440
are

691
00:25:47,440 --> 00:25:48,559
um

692
00:25:48,559 --> 00:25:50,720
and so like why i'm a little suspicious

693
00:25:50,720 --> 00:25:52,480
of the lpn analogy um i think that's

694
00:25:52,480 --> 00:25:54,080
what i mean i might think of this more

695
00:25:54,080 --> 00:25:56,559
like aed in fact as and say that there's

696
00:25:56,559 --> 00:25:57,840
that information obvious it'll be

697
00:25:57,840 --> 00:25:59,440
elsewhere i guess i don't quite

698
00:25:59,440 --> 00:26:02,159
understand why

699
00:26:02,159 --> 00:26:04,240
like um you know it seems to me that

700
00:26:04,240 --> 00:26:05,360
that

701
00:26:05,360 --> 00:26:07,279
you know one might wish to have

702
00:26:07,279 --> 00:26:10,919
you know that

703
00:26:11,600 --> 00:26:12,720
i mean the different different groups

704
00:26:12,720 --> 00:26:14,080
that are all on different things and

705
00:26:14,080 --> 00:26:15,039
different conferences around different

706
00:26:15,039 --> 00:26:16,799
things and i'm not sure why why where

707
00:26:16,799 --> 00:26:18,159
they can dictate one label one type of

708
00:26:18,159 --> 00:26:20,799
labeling here

709
00:26:21,200 --> 00:26:22,320
i mean it certainly seems to me like

710
00:26:22,320 --> 00:26:24,480
that if i want to build a if i want to

711
00:26:24,480 --> 00:26:26,080
build you know uh

712
00:26:26,080 --> 00:26:27,600
um you know

713
00:26:27,600 --> 00:26:28,799
if i want to build my own messaging

714
00:26:28,799 --> 00:26:31,440
system like they use mls like i'm going

715
00:26:31,440 --> 00:26:33,440
to want to dictate like how how the how

716
00:26:33,440 --> 00:26:34,480
what kind of message is going on and how

717
00:26:34,480 --> 00:26:35,679
that how those message types are

718
00:26:35,679 --> 00:26:37,520
conveyed and it's not quite any an mls

719
00:26:37,520 --> 00:26:40,158
solves that problem

720
00:26:40,880 --> 00:26:42,880
so

721
00:26:42,880 --> 00:26:45,200
in regards to whether you want to convey

722
00:26:45,200 --> 00:26:46,559
the content

723
00:26:46,559 --> 00:26:49,039
on the outside then i think the reason

724
00:26:49,039 --> 00:26:51,440
is obvious that

725
00:26:51,440 --> 00:26:53,520
that you are leaking information which

726
00:26:53,520 --> 00:26:55,200
would which could otherwise be private

727
00:26:55,200 --> 00:26:57,600
if you're putting it on the

728
00:26:57,600 --> 00:26:59,600
uh if you're sending it possibly

729
00:26:59,600 --> 00:27:03,360
unencrypted or sending it

730
00:27:03,440 --> 00:27:04,840
that's not what i'm

731
00:27:04,840 --> 00:27:08,240
saying well what i'm saying is like that

732
00:27:08,240 --> 00:27:09,600
that you define the message types and

733
00:27:09,600 --> 00:27:10,880
inside the message inside inside the

734
00:27:10,880 --> 00:27:12,400
message bodies can convey the types of

735
00:27:12,400 --> 00:27:14,080
messages

736
00:27:14,080 --> 00:27:15,440
any further that have information right

737
00:27:15,440 --> 00:27:18,080
so so like you can say external like i

738
00:27:18,080 --> 00:27:19,679
say like if i want to do my message

739
00:27:19,679 --> 00:27:21,919
system i say all my messages are mine

740
00:27:21,919 --> 00:27:23,360
and everything inside is mine and so you

741
00:27:23,360 --> 00:27:24,799
look at the interest inside the message

742
00:27:24,799 --> 00:27:26,880
right and so that's i think that's the

743
00:27:26,880 --> 00:27:28,960
correct the correct locus for defining

744
00:27:28,960 --> 00:27:30,640
the message types is inside the message

745
00:27:30,640 --> 00:27:31,760
but the correct locus for defining the

746
00:27:31,760 --> 00:27:34,880
format of that is outside

747
00:27:34,880 --> 00:27:36,880
um

748
00:27:36,880 --> 00:27:38,720
i think

749
00:27:38,720 --> 00:27:41,039
i i'm not really understanding where

750
00:27:41,039 --> 00:27:42,960
what you're getting at here because i'm

751
00:27:42,960 --> 00:27:45,360
on type doesn't need to be you know like

752
00:27:45,360 --> 00:27:46,720
rfc

753
00:27:46,720 --> 00:27:49,200
uh 28 22 style

754
00:27:49,200 --> 00:27:50,559
mine right

755
00:27:50,559 --> 00:27:52,640
uh i could send

756
00:27:52,640 --> 00:27:54,799
i could send like a vendor specific mime

757
00:27:54,799 --> 00:27:56,559
type i could spend send

758
00:27:56,559 --> 00:28:00,240
cbor i could send protobuf i could send

759
00:28:00,240 --> 00:28:03,600
json i like

760
00:28:03,600 --> 00:28:05,919
i just need a way to say

761
00:28:05,919 --> 00:28:09,039
the thing that i'm sending inside

762
00:28:09,039 --> 00:28:10,320
has this

763
00:28:10,320 --> 00:28:12,240
because this framing this structure

764
00:28:12,240 --> 00:28:14,320
whatever and i can further define if

765
00:28:14,320 --> 00:28:17,279
that's not explicit enough then that can

766
00:28:17,279 --> 00:28:18,799
further describe

767
00:28:18,799 --> 00:28:20,799
its own content i i agree with that can

768
00:28:20,799 --> 00:28:22,960
i say that eric can i can i try

769
00:28:22,960 --> 00:28:24,960
restating just

770
00:28:24,960 --> 00:28:26,640
sure

771
00:28:26,640 --> 00:28:29,600
so so i think what what eric is is

772
00:28:29,600 --> 00:28:31,200
saying is

773
00:28:31,200 --> 00:28:34,080
that to deploy mls you need a number of

774
00:28:34,080 --> 00:28:36,320
specific things defined

775
00:28:36,320 --> 00:28:38,159
um like

776
00:28:38,159 --> 00:28:40,000
the specific transport that's going to

777
00:28:40,000 --> 00:28:42,880
be used uh who the authorities are that

778
00:28:42,880 --> 00:28:45,360
it depends on and what i think what eric

779
00:28:45,360 --> 00:28:47,200
is saying is that one of the things that

780
00:28:47,200 --> 00:28:49,440
need to be defined in order to use mls

781
00:28:49,440 --> 00:28:50,399
is

782
00:28:50,399 --> 00:28:52,480
how you should inspect how you should

783
00:28:52,480 --> 00:28:54,960
treat the contents of any given mls

784
00:28:54,960 --> 00:28:56,480
message

785
00:28:56,480 --> 00:28:57,360
right

786
00:28:57,360 --> 00:28:58,640
and

787
00:28:58,640 --> 00:29:00,480
one of those ways may well be that the

788
00:29:00,480 --> 00:29:03,679
message is a my message and other ways

789
00:29:03,679 --> 00:29:06,559
may not want that mime overhead

790
00:29:06,559 --> 00:29:09,039
and given that mls is

791
00:29:09,039 --> 00:29:11,600
not a specific concrete protocol but

792
00:29:11,600 --> 00:29:13,360
rather an abstract protocol that needs

793
00:29:13,360 --> 00:29:15,760
some parameterization before deployment

794
00:29:15,760 --> 00:29:17,600
why not use that

795
00:29:17,600 --> 00:29:18,799
why not put

796
00:29:18,799 --> 00:29:19,760
the

797
00:29:19,760 --> 00:29:21,760
how how to deal with the application

798
00:29:21,760 --> 00:29:22,720
data

799
00:29:22,720 --> 00:29:24,640
in that parameterization

800
00:29:24,640 --> 00:29:26,399
right and

801
00:29:26,399 --> 00:29:28,159
a common pattern may well be that the

802
00:29:28,159 --> 00:29:30,240
beginning of the application data is a

803
00:29:30,240 --> 00:29:32,320
mime type uh but there may be other

804
00:29:32,320 --> 00:29:34,000
situations where that's not necessary

805
00:29:34,000 --> 00:29:35,520
and it's not clear what

806
00:29:35,520 --> 00:29:38,559
what we gain from sticking this in here

807
00:29:38,559 --> 00:29:41,919
if we don't actually have a um

808
00:29:41,919 --> 00:29:44,000
you know a meaningful way to to deal

809
00:29:44,000 --> 00:29:45,919
with that right like what if i have an

810
00:29:45,919 --> 00:29:47,840
application where i expect all of the

811
00:29:47,840 --> 00:29:49,440
messages to be

812
00:29:49,440 --> 00:29:50,159
uh

813
00:29:50,159 --> 00:29:52,640
image png's where people are just like i

814
00:29:52,640 --> 00:29:54,000
don't know texting each other photos or

815
00:29:54,000 --> 00:29:55,039
something

816
00:29:55,039 --> 00:29:56,720
um yeah and then suddenly you get

817
00:29:56,720 --> 00:29:58,960
something that doesn't say image png in

818
00:29:58,960 --> 00:30:01,279
it um

819
00:30:01,279 --> 00:30:02,799
what's supposed to happen to your

820
00:30:02,799 --> 00:30:04,720
protocol there

821
00:30:04,720 --> 00:30:06,159
right so

822
00:30:06,159 --> 00:30:06,840
it

823
00:30:06,840 --> 00:30:10,240
precisely as you described this is a

824
00:30:10,240 --> 00:30:12,960
this helps solve that problem it is just

825
00:30:12,960 --> 00:30:14,720
a tool and help helping to solve that

826
00:30:14,720 --> 00:30:15,919
problem but

827
00:30:15,919 --> 00:30:17,039
if you

828
00:30:17,039 --> 00:30:18,159
uh

829
00:30:18,159 --> 00:30:19,200
if you

830
00:30:19,200 --> 00:30:21,840
define your group so that your group

831
00:30:21,840 --> 00:30:23,919
only ever sends

832
00:30:23,919 --> 00:30:25,200
pngs

833
00:30:25,200 --> 00:30:26,000
then

834
00:30:26,000 --> 00:30:27,840
you could leave this

835
00:30:27,840 --> 00:30:30,080
you could leave this blank

836
00:30:30,080 --> 00:30:32,799
and only incur an extra byte

837
00:30:32,799 --> 00:30:34,880
of overhead

838
00:30:34,880 --> 00:30:38,640
uh if you wanted to explicitly signal

839
00:30:38,640 --> 00:30:40,320
that you were sending

840
00:30:40,320 --> 00:30:43,360
one of several types of supported

841
00:30:43,360 --> 00:30:44,559
content

842
00:30:44,559 --> 00:30:47,840
then you could put in this in this field

843
00:30:47,840 --> 00:30:50,159
before the application data you could

844
00:30:50,159 --> 00:30:51,600
put the

845
00:30:51,600 --> 00:30:53,520
the type that you happen to be sending

846
00:30:53,520 --> 00:30:55,279
among the types which

847
00:30:55,279 --> 00:30:58,559
were were predefined by your application

848
00:30:58,559 --> 00:31:00,640
that they are acceptable types

849
00:31:00,640 --> 00:31:02,159
you would send

850
00:31:02,159 --> 00:31:03,279
that type

851
00:31:03,279 --> 00:31:04,880
and then

852
00:31:04,880 --> 00:31:06,640
the application data doesn't have to

853
00:31:06,640 --> 00:31:08,159
have any

854
00:31:08,159 --> 00:31:09,120
mime

855
00:31:09,120 --> 00:31:11,600
texts it doesn't have to have any

856
00:31:11,600 --> 00:31:13,120
headers it doesn't have to have any

857
00:31:13,120 --> 00:31:15,918
extra framing

858
00:31:17,760 --> 00:31:20,399
and that's the the value there is that

859
00:31:20,399 --> 00:31:21,919
you have

860
00:31:21,919 --> 00:31:24,159
you have some agility

861
00:31:24,159 --> 00:31:26,640
in that if the group allows it you can

862
00:31:26,640 --> 00:31:27,760
send

863
00:31:27,760 --> 00:31:30,000
optional types which could be ignored

864
00:31:30,000 --> 00:31:31,440
you could send

865
00:31:31,440 --> 00:31:33,919
uh you could if you have multiple

866
00:31:33,919 --> 00:31:36,159
choices which are all acceptable you can

867
00:31:36,159 --> 00:31:39,679
signal which one you're sending

868
00:31:40,000 --> 00:31:43,200
it provides a lot of flexibility

869
00:31:43,200 --> 00:31:45,279
and so it provides a basic way of

870
00:31:45,279 --> 00:31:48,159
signaling what is what is this content

871
00:31:48,159 --> 00:31:50,720
inside

872
00:31:51,760 --> 00:31:53,760
consistent with whatever you have

873
00:31:53,760 --> 00:31:57,200
defined as your group policy

874
00:31:58,880 --> 00:32:00,240
i mean honestly it just seems like a

875
00:32:00,240 --> 00:32:03,039
no-brainer to me

876
00:32:03,120 --> 00:32:05,600
uh jonathan hoyland cloudflare

877
00:32:05,600 --> 00:32:06,880
um

878
00:32:06,880 --> 00:32:09,360
just a couple of questions sort of quick

879
00:32:09,360 --> 00:32:10,960
first style if you like

880
00:32:10,960 --> 00:32:12,080
um

881
00:32:12,080 --> 00:32:14,960
if i have this mime type defined

882
00:32:14,960 --> 00:32:16,799
uh how is that made available to the

883
00:32:16,799 --> 00:32:18,080
application

884
00:32:18,080 --> 00:32:19,840
and secondly

885
00:32:19,840 --> 00:32:23,760
if the application data has in it a mime

886
00:32:23,760 --> 00:32:24,799
type

887
00:32:24,799 --> 00:32:26,720
is there some way to enforce that they

888
00:32:26,720 --> 00:32:28,320
agree

889
00:32:28,320 --> 00:32:30,559
and if they don't agree what is the

890
00:32:30,559 --> 00:32:33,600
correct behavior

891
00:32:34,480 --> 00:32:35,600
so

892
00:32:35,600 --> 00:32:37,600
can you give me an example of where you

893
00:32:37,600 --> 00:32:39,840
would

894
00:32:40,799 --> 00:32:43,840
the content that you would be sending

895
00:32:43,840 --> 00:32:46,559
as your application content

896
00:32:46,559 --> 00:32:47,519
uh

897
00:32:47,519 --> 00:32:50,640
if you wanted to send for example um

898
00:32:50,640 --> 00:32:51,360
a

899
00:32:51,360 --> 00:32:54,720
multi-part alternative

900
00:32:54,720 --> 00:32:56,960
then

901
00:32:58,720 --> 00:33:00,880
i'm thinking of the case where

902
00:33:00,880 --> 00:33:03,440
i know i'm using some bad api

903
00:33:03,440 --> 00:33:05,679
and i can't get the mime type in my

904
00:33:05,679 --> 00:33:07,600
upper level application so i just put it

905
00:33:07,600 --> 00:33:09,600
also in the application data just so

906
00:33:09,600 --> 00:33:11,039
that it's there

907
00:33:11,039 --> 00:33:12,080
and then

908
00:33:12,080 --> 00:33:15,279
somebody says ah here's an image png and

909
00:33:15,279 --> 00:33:16,720
then at the upper level it says ah it's

910
00:33:16,720 --> 00:33:19,039
actually an image jpeg and suddenly it's

911
00:33:19,039 --> 00:33:21,360
all broken and bad things are happening

912
00:33:21,360 --> 00:33:23,840
for no apparent

913
00:33:23,840 --> 00:33:25,760
i mean i i i feel like if you if you've

914
00:33:25,760 --> 00:33:27,840
got an opaque application

915
00:33:27,840 --> 00:33:31,360
it would break in mls if you put i could

916
00:33:31,360 --> 00:33:32,880
cite you know a dozen different things

917
00:33:32,880 --> 00:33:35,360
in mls that would break if you didn't

918
00:33:35,360 --> 00:33:36,480
get

919
00:33:36,480 --> 00:33:38,480
if you didn't get the sender

920
00:33:38,480 --> 00:33:41,360
information from mls if you didn't get

921
00:33:41,360 --> 00:33:42,240
the

922
00:33:42,240 --> 00:33:44,720
the group id i mean

923
00:33:44,720 --> 00:33:46,720
right but this is a piece of information

924
00:33:46,720 --> 00:33:47,840
which is

925
00:33:47,840 --> 00:33:49,679
potentially defined in two different

926
00:33:49,679 --> 00:33:51,279
places right

927
00:33:51,279 --> 00:33:52,799
and can be just

928
00:33:52,799 --> 00:33:54,640
in two different places don't put it

929
00:33:54,640 --> 00:33:57,440
inside either either either set the

930
00:33:57,440 --> 00:33:58,399
value

931
00:33:58,399 --> 00:33:59,840
to

932
00:33:59,840 --> 00:34:01,919
either set the value to zero

933
00:34:01,919 --> 00:34:04,960
you know to no no length

934
00:34:04,960 --> 00:34:07,360
before the application data or set the

935
00:34:07,360 --> 00:34:08,399
value

936
00:34:08,399 --> 00:34:11,359
before the application data and don't

937
00:34:11,359 --> 00:34:13,839
and don't try to replicate it by stick

938
00:34:13,839 --> 00:34:16,879
by putting it somewhere else

939
00:34:17,440 --> 00:34:18,960
if if that was enforced that would

940
00:34:18,960 --> 00:34:21,839
probably be better

941
00:34:31,918 --> 00:34:35,199
colin go ahead i'm just playing oh it

942
00:34:35,199 --> 00:34:37,370
looks like i'm on okay um

943
00:34:37,370 --> 00:34:38,800
[Music]

944
00:34:38,800 --> 00:34:40,239
so i'm not arguing for against this one

945
00:34:40,239 --> 00:34:41,520
way or another i'm just sort of saying

946
00:34:41,520 --> 00:34:43,520
that like this is a

947
00:34:43,520 --> 00:34:46,399
i think the analogy to lpn is actually

948
00:34:46,399 --> 00:34:48,399
really quite good we could have defined

949
00:34:48,399 --> 00:34:51,280
tls so that when you are using tls in a

950
00:34:51,280 --> 00:34:52,879
given application context of the

951
00:34:52,879 --> 00:34:54,159
protocol you're putting over it the

952
00:34:54,159 --> 00:34:56,079
first thing that we do is send a wrapper

953
00:34:56,079 --> 00:34:57,680
header as the first bytes in it that

954
00:34:57,680 --> 00:34:59,599
tell you what's coming next inside the

955
00:34:59,599 --> 00:35:01,760
stream that'd be one design it's just

956
00:35:01,760 --> 00:35:03,680
such a common thing to do to be able to

957
00:35:03,680 --> 00:35:05,359
switch between them and we already had

958
00:35:05,359 --> 00:35:07,040
these other protocols defined and didn't

959
00:35:07,040 --> 00:35:08,880
want to define a wrapper protocol for

960
00:35:08,880 --> 00:35:11,280
the protocols we're putting over tls

961
00:35:11,280 --> 00:35:13,520
that you put in an optional field to

962
00:35:13,520 --> 00:35:15,280
carry this information

963
00:35:15,280 --> 00:35:17,040
and it really helps with negotiation

964
00:35:17,040 --> 00:35:18,960
upgrade and stuff i think that's a

965
00:35:18,960 --> 00:35:20,800
fairly clean analogy to what's going on

966
00:35:20,800 --> 00:35:21,920
here like whether you should do it or

967
00:35:21,920 --> 00:35:25,119
not who cares i mean you can either put

968
00:35:25,119 --> 00:35:27,359
this identifier of what the data is you

969
00:35:27,359 --> 00:35:29,520
can either put as the first bytes of

970
00:35:29,520 --> 00:35:31,359
what you find in the message or you can

971
00:35:31,359 --> 00:35:33,680
put it in the metadata outside of the

972
00:35:33,680 --> 00:35:36,800
message we can go either way but um i

973
00:35:36,800 --> 00:35:38,880
think this is a i i think saying this is

974
00:35:38,880 --> 00:35:41,040
very different than tls i i don't i i

975
00:35:41,040 --> 00:35:42,480
don't see that at all actually i see it

976
00:35:42,480 --> 00:35:46,240
as about the same as tls thanks

977
00:35:51,280 --> 00:35:53,520
well i mean so i think first of all i

978
00:35:53,520 --> 00:35:55,200
think the tlc analogy is a little odd in

979
00:35:55,200 --> 00:35:56,800
that the reason the airplanes are the

980
00:35:56,800 --> 00:35:58,960
way it is is because this client had to

981
00:35:58,960 --> 00:36:00,640
discover what the server's

982
00:36:00,640 --> 00:36:02,079
properties were and it had to be done in

983
00:36:02,079 --> 00:36:04,000
the first round trip so um that's not

984
00:36:04,000 --> 00:36:06,480
the situation does not apply here um but

985
00:36:06,480 --> 00:36:07,599
i mean

986
00:36:07,599 --> 00:36:09,119
we're not we're not actually debate what

987
00:36:09,119 --> 00:36:10,240
we're not

988
00:36:10,240 --> 00:36:12,000
this i think we generally have this

989
00:36:12,000 --> 00:36:14,079
problem in systems where when you have

990
00:36:14,079 --> 00:36:15,680
like an opaque transport and you want to

991
00:36:15,680 --> 00:36:17,200
demux you give us the types of things

992
00:36:17,200 --> 00:36:21,280
under it what specific specifies like

993
00:36:21,280 --> 00:36:23,520
you know how that debossing happens and

994
00:36:23,520 --> 00:36:26,079
what you propose is to find the specific

995
00:36:26,079 --> 00:36:27,119
define

996
00:36:27,119 --> 00:36:29,520
the in this in this specification that

997
00:36:29,520 --> 00:36:30,880
you almost must have the unboxing of a

998
00:36:30,880 --> 00:36:33,520
particular type and the other option no

999
00:36:33,520 --> 00:36:34,720
it is you're saying you always have to

1000
00:36:34,720 --> 00:36:36,320
have this if this is this value always

1001
00:36:36,320 --> 00:36:38,000
the beginning and always just be there

1002
00:36:38,000 --> 00:36:38,800
and

1003
00:36:38,800 --> 00:36:40,960
and but it can be but it can be zero

1004
00:36:40,960 --> 00:36:43,359
yeah it could be zero okay but like that

1005
00:36:43,359 --> 00:36:44,960
which is which and this is the case we

1006
00:36:44,960 --> 00:36:46,160
always come into

1007
00:36:46,160 --> 00:36:48,079
when we have these things and and what

1008
00:36:48,079 --> 00:36:50,480
i'm saying and what i'm saying is that

1009
00:36:50,480 --> 00:36:52,640
the description of what to form demoxing

1010
00:36:52,640 --> 00:36:54,480
including the zero or not should be on

1011
00:36:54,480 --> 00:36:55,680
another layer and you could have

1012
00:36:55,680 --> 00:36:57,280
precisely the same wire formats by the

1013
00:36:57,280 --> 00:36:59,920
way namely that what i'm saying is that

1014
00:36:59,920 --> 00:37:02,880
in your ml specification mls mls um

1015
00:37:02,880 --> 00:37:05,200
concrete deployment you say we use the

1016
00:37:05,200 --> 00:37:07,200
unboxing specified in this pr

1017
00:37:07,200 --> 00:37:08,800
and so the wirefront will be precisely

1018
00:37:08,800 --> 00:37:10,880
identical the only question is who just

1019
00:37:10,880 --> 00:37:12,720
is is where is the information conveyed

1020
00:37:12,720 --> 00:37:14,880
that of which which form of in-message

1021
00:37:14,880 --> 00:37:17,119
debuxing you're using and i don't

1022
00:37:17,119 --> 00:37:19,040
understand why it has to be in mls

1023
00:37:19,040 --> 00:37:20,400
suppose in the concrete instantiations

1024
00:37:20,400 --> 00:37:22,880
of mls other protocols

1025
00:37:22,880 --> 00:37:25,760
so if it's not in mls then i think we

1026
00:37:25,760 --> 00:37:26,640
must

1027
00:37:26,640 --> 00:37:28,000
define

1028
00:37:28,000 --> 00:37:30,480
that the next thing that for the framing

1029
00:37:30,480 --> 00:37:33,040
that says what is the thing inside yeah

1030
00:37:33,040 --> 00:37:34,160
and that happens in the messaging

1031
00:37:34,160 --> 00:37:36,640
protocols which make use of mls and each

1032
00:37:36,640 --> 00:37:38,160
one

1033
00:37:38,160 --> 00:37:41,200
so how would

1034
00:37:41,200 --> 00:37:43,760
we we it's like how many layers do you

1035
00:37:43,760 --> 00:37:45,040
want do you

1036
00:37:45,040 --> 00:37:46,800
i i think it's just

1037
00:37:46,800 --> 00:37:48,320
no i'm not all right because i see as

1038
00:37:48,320 --> 00:37:50,400
many like precisely as many layers we're

1039
00:37:50,400 --> 00:37:52,400
talking about in every every case you

1040
00:37:52,400 --> 00:37:54,400
have mls and then you have a concrete

1041
00:37:54,400 --> 00:37:56,079
messaging protocol that makes use of it

1042
00:37:56,079 --> 00:37:57,040
and

1043
00:37:57,040 --> 00:37:59,440
and in and as i said the wiring coding

1044
00:37:59,440 --> 00:38:00,880
was precisely identical and the question

1045
00:38:00,880 --> 00:38:03,599
is merely who specifies which

1046
00:38:03,599 --> 00:38:05,440
where the wire encoding is specified

1047
00:38:05,440 --> 00:38:07,520
and so we and what you're saying is

1048
00:38:07,520 --> 00:38:09,280
every use of mls must use this prefix

1049
00:38:09,280 --> 00:38:11,599
monitor encoding and what i'm saying is

1050
00:38:11,599 --> 00:38:14,960
that mls is embedded in you know did you

1051
00:38:14,960 --> 00:38:17,359
say prefix mime encoding because there's

1052
00:38:17,359 --> 00:38:19,359
nothing i'm not

1053
00:38:19,359 --> 00:38:20,960
you're saying what i'm saying

1054
00:38:20,960 --> 00:38:23,119
what is this prefix mine this prefix

1055
00:38:23,119 --> 00:38:24,800
find type value

1056
00:38:24,800 --> 00:38:26,800
well

1057
00:38:26,800 --> 00:38:29,040
actually a concrete suggestion occurs to

1058
00:38:29,040 --> 00:38:30,800
me here so rowan you presented this uh

1059
00:38:30,800 --> 00:38:32,800
draft on mime type negotiation in

1060
00:38:32,800 --> 00:38:35,839
dispatch which i think is a fine idea i

1061
00:38:35,839 --> 00:38:37,599
mean like if you're doing that extension

1062
00:38:37,599 --> 00:38:40,400
you could extend the in the semantic of

1063
00:38:40,400 --> 00:38:43,359
that extension so that it also said

1064
00:38:43,359 --> 00:38:44,720
put this mime type in front of the

1065
00:38:44,720 --> 00:38:46,800
application data it would be a

1066
00:38:46,800 --> 00:38:50,000
trivial increment on that extension

1067
00:38:50,000 --> 00:38:51,280
how could you do that it would be an

1068
00:38:51,280 --> 00:38:54,240
illegal it would be like any mls library

1069
00:38:54,240 --> 00:38:55,920
that you used would then be

1070
00:38:55,920 --> 00:38:58,000
using an illegal tlc record format well

1071
00:38:58,000 --> 00:39:00,079
no so what you would say is that the app

1072
00:39:00,079 --> 00:39:01,839
the structure of the application data if

1073
00:39:01,839 --> 00:39:04,000
you use this extension is

1074
00:39:04,000 --> 00:39:07,920
mime type followed by arbitrary data

1075
00:39:07,920 --> 00:39:09,119
so you would you would be structuring

1076
00:39:09,119 --> 00:39:10,720
the internals of the application data

1077
00:39:10,720 --> 00:39:12,480
sorry then go ahead maybe i can jump in

1078
00:39:12,480 --> 00:39:14,400
here and try and uh

1079
00:39:14,400 --> 00:39:15,200
d

1080
00:39:15,200 --> 00:39:16,480
do something

1081
00:39:16,480 --> 00:39:18,640
so like i think the point that i've

1082
00:39:18,640 --> 00:39:19,920
heard several people trying to make is

1083
00:39:19,920 --> 00:39:21,359
that like our

1084
00:39:21,359 --> 00:39:22,880
foundational assumption is that we are

1085
00:39:22,880 --> 00:39:25,119
not specifying a complete interoperable

1086
00:39:25,119 --> 00:39:26,400
protocol here like we're building a

1087
00:39:26,400 --> 00:39:29,200
framework and we expect as any

1088
00:39:29,200 --> 00:39:30,720
precondition as a precondition for any

1089
00:39:30,720 --> 00:39:32,240
deployment that you're going to have

1090
00:39:32,240 --> 00:39:34,640
some sort of integration glue to

1091
00:39:34,640 --> 00:39:37,280
integrate the thing we produce into your

1092
00:39:37,280 --> 00:39:39,760
actual complete deployed system

1093
00:39:39,760 --> 00:39:41,119
and

1094
00:39:41,119 --> 00:39:43,760
you know it's it's a very good question

1095
00:39:43,760 --> 00:39:46,880
to say okay well how is the actual

1096
00:39:46,880 --> 00:39:49,359
uh structure and payload interpretation

1097
00:39:49,359 --> 00:39:52,079
of the payload to be conveyed like thank

1098
00:39:52,079 --> 00:39:53,520
you for raising this question it's it's

1099
00:39:53,520 --> 00:39:54,640
good to consider where this should

1100
00:39:54,640 --> 00:39:55,599
happen

1101
00:39:55,599 --> 00:39:57,359
but because what we're building is sort

1102
00:39:57,359 --> 00:39:59,520
of a framework rather than a concrete

1103
00:39:59,520 --> 00:40:00,880
protocol

1104
00:40:00,880 --> 00:40:03,440
it's not immediately clear

1105
00:40:03,440 --> 00:40:06,000
where the right place is to include this

1106
00:40:06,000 --> 00:40:07,520
information we could say as a

1107
00:40:07,520 --> 00:40:09,920
precondition of using mls you must

1108
00:40:09,920 --> 00:40:11,680
supply your own form of this content

1109
00:40:11,680 --> 00:40:14,319
negotiation we could also say we will

1110
00:40:14,319 --> 00:40:17,119
provide this thing that you can use

1111
00:40:17,119 --> 00:40:20,480
um but because like we don't have people

1112
00:40:20,480 --> 00:40:22,319
with a wide community of deployed

1113
00:40:22,319 --> 00:40:24,079
implementations using our stuff we can't

1114
00:40:24,079 --> 00:40:25,119
really say

1115
00:40:25,119 --> 00:40:27,280
is it going to be more convenient more

1116
00:40:27,280 --> 00:40:28,400
of the time

1117
00:40:28,400 --> 00:40:30,480
to have this be part of the integration

1118
00:40:30,480 --> 00:40:31,680
blue or is it going to be more

1119
00:40:31,680 --> 00:40:33,760
convenient more of the time to have it

1120
00:40:33,760 --> 00:40:36,160
as part of core mls

1121
00:40:36,160 --> 00:40:38,160
and so unless somebody can propose a way

1122
00:40:38,160 --> 00:40:41,200
to like have a metric to decide

1123
00:40:41,200 --> 00:40:42,240
which

1124
00:40:42,240 --> 00:40:44,319
form of the integration is going to be

1125
00:40:44,319 --> 00:40:46,240
more useful overall

1126
00:40:46,240 --> 00:40:47,359
we don't really have a way to answer

1127
00:40:47,359 --> 00:40:49,280
this question and in that sort of

1128
00:40:49,280 --> 00:40:50,400
scenario

1129
00:40:50,400 --> 00:40:53,680
we might consider it quite flat

1130
00:40:54,400 --> 00:40:56,640
so i will i will um i think that's a

1131
00:40:56,640 --> 00:40:58,880
nice way of framing it benjamin um but

1132
00:40:58,880 --> 00:41:01,839
uh or sorry a nice way of framing it

1133
00:41:01,839 --> 00:41:05,119
that i think the um

1134
00:41:05,119 --> 00:41:06,960
an analogy for me would be

1135
00:41:06,960 --> 00:41:08,880
if somebody had imagine if somebody had

1136
00:41:08,880 --> 00:41:11,599
defined http without

1137
00:41:11,599 --> 00:41:13,920
having any place to put a content type

1138
00:41:13,920 --> 00:41:15,200
and it said we're going to just leave

1139
00:41:15,200 --> 00:41:16,160
this up

1140
00:41:16,160 --> 00:41:17,839
to the

1141
00:41:17,839 --> 00:41:19,599
uh to the application

1142
00:41:19,599 --> 00:41:21,200
and the first application that anybody

1143
00:41:21,200 --> 00:41:22,800
ever used was

1144
00:41:22,800 --> 00:41:24,319
they put some

1145
00:41:24,319 --> 00:41:26,000
they put some

1146
00:41:26,000 --> 00:41:27,760
some html

1147
00:41:27,760 --> 00:41:29,440
at the beginning

1148
00:41:29,440 --> 00:41:32,440
and imagine that basically every

1149
00:41:32,440 --> 00:41:36,480
non-html usage of http now had this

1150
00:41:36,480 --> 00:41:39,599
extra croft at the beginning

1151
00:41:39,599 --> 00:41:40,800
that

1152
00:41:40,800 --> 00:41:42,560
was

1153
00:41:42,560 --> 00:41:45,119
in a in a format that you otherwise

1154
00:41:45,119 --> 00:41:48,319
wouldn't have needed to parse

1155
00:41:48,319 --> 00:41:51,680
so you know you have

1156
00:41:51,680 --> 00:41:54,560
you have this extra you know like html

1157
00:41:54,560 --> 00:41:55,839
and then some

1158
00:41:55,839 --> 00:41:58,640
you know some extra thingy inside

1159
00:41:58,640 --> 00:42:01,599
um maybe it's only

1160
00:42:01,599 --> 00:42:03,359
20 or 30 bytes

1161
00:42:03,359 --> 00:42:05,760
but it's always in this ancient format

1162
00:42:05,760 --> 00:42:08,880
that we don't care about

1163
00:42:09,280 --> 00:42:10,160
uh

1164
00:42:10,160 --> 00:42:12,640
i think that that's that's precisely the

1165
00:42:12,640 --> 00:42:14,880
cop-out that we are making right now if

1166
00:42:14,880 --> 00:42:17,200
we don't do something like this

1167
00:42:17,200 --> 00:42:18,640
if we were to say

1168
00:42:18,640 --> 00:42:20,960
you must always put

1169
00:42:20,960 --> 00:42:23,119
an extra

1170
00:42:23,119 --> 00:42:26,079
tls record layer formatted thing at the

1171
00:42:26,079 --> 00:42:27,119
beginning

1172
00:42:27,119 --> 00:42:28,560
that has

1173
00:42:28,560 --> 00:42:30,560
some format

1174
00:42:30,560 --> 00:42:33,599
i think that that might also be fine

1175
00:42:33,599 --> 00:42:35,920
but this just seems like such an easy

1176
00:42:35,920 --> 00:42:37,200
way

1177
00:42:37,200 --> 00:42:39,119
to say

1178
00:42:39,119 --> 00:42:41,280
what is inside

1179
00:42:41,280 --> 00:42:43,040
that is within the context of the group

1180
00:42:43,040 --> 00:42:45,839
that you negotiated

1181
00:42:46,720 --> 00:42:49,200
uh so i guess my very quick reply is

1182
00:42:49,200 --> 00:42:51,760
that yes this is an easy way to specify

1183
00:42:51,760 --> 00:42:53,200
what's inside

1184
00:42:53,200 --> 00:42:54,319
um

1185
00:42:54,319 --> 00:42:56,079
it's possible somebody could come up

1186
00:42:56,079 --> 00:42:58,319
with a different easy way that is a

1187
00:42:58,319 --> 00:42:59,760
better fit for their application in the

1188
00:42:59,760 --> 00:43:00,800
future

1189
00:43:00,800 --> 00:43:04,079
and if we specify this way now

1190
00:43:04,079 --> 00:43:06,640
uh there's a decent argument that we're

1191
00:43:06,640 --> 00:43:08,319
locking somebody else out from doing

1192
00:43:08,319 --> 00:43:10,000
something better in the future

1193
00:43:10,000 --> 00:43:13,520
and so i think that the options here are

1194
00:43:13,520 --> 00:43:14,560
basically

1195
00:43:14,560 --> 00:43:17,119
do this or something similar to it or

1196
00:43:17,119 --> 00:43:19,599
clearly document as a precondition of

1197
00:43:19,599 --> 00:43:22,319
using mls that you must supply your own

1198
00:43:22,319 --> 00:43:25,200
content type identification

1199
00:43:25,200 --> 00:43:27,760
so if you say that you would be locking

1200
00:43:27,760 --> 00:43:29,920
somebody out of doing it in the future

1201
00:43:29,920 --> 00:43:31,599
um so

1202
00:43:31,599 --> 00:43:33,440
i'm countering that

1203
00:43:33,440 --> 00:43:35,119
you wouldn't you could define it in your

1204
00:43:35,119 --> 00:43:36,800
group

1205
00:43:36,800 --> 00:43:39,520
you could include that preamble

1206
00:43:39,520 --> 00:43:41,839
and you would set this

1207
00:43:41,839 --> 00:43:44,560
you would set the value of

1208
00:43:44,560 --> 00:43:45,760
the

1209
00:43:45,760 --> 00:43:49,680
the tls record layer included

1210
00:43:49,680 --> 00:43:54,319
fields to a null value

1211
00:43:54,319 --> 00:43:56,560
yeah i mean my my sense here was that

1212
00:43:56,560 --> 00:43:58,720
the topic that i think jonathan was

1213
00:43:58,720 --> 00:44:01,520
bringing up about like if you have two

1214
00:44:01,520 --> 00:44:02,800
different similar values how do you

1215
00:44:02,800 --> 00:44:04,800
enforce consistency between them and you

1216
00:44:04,800 --> 00:44:06,960
may not be able to enforce that you

1217
00:44:06,960 --> 00:44:08,560
always have access to it but i think i'm

1218
00:44:08,560 --> 00:44:10,079
also probably running over time here so

1219
00:44:10,079 --> 00:44:11,680
maybe i should shut up

1220
00:44:11,680 --> 00:44:13,440
yeah sorry yeah i think i would ask the

1221
00:44:13,440 --> 00:44:15,680
chairs to yeah there you go

1222
00:44:15,680 --> 00:44:17,040
so i think what we're going to try to do

1223
00:44:17,040 --> 00:44:21,319
is actually do a show of hands here

1224
00:44:28,319 --> 00:44:31,520
sean i think we lost your audience

1225
00:44:31,520 --> 00:44:34,560
we lost sean entirely

1226
00:44:35,599 --> 00:44:36,960
maybe nick

1227
00:44:36,960 --> 00:44:39,680
could run this

1228
00:44:42,880 --> 00:44:46,160
i think i can access the show events too

1229
00:44:46,160 --> 00:44:48,800
oh thank you stephen

1230
00:44:48,800 --> 00:44:50,720
if not maybe an ad can do it i don't

1231
00:44:50,720 --> 00:44:52,800
know

1232
00:44:52,800 --> 00:44:55,680
i had a bit of a death there um so the

1233
00:44:55,680 --> 00:44:58,000
show of hands tools um we're gonna do

1234
00:44:58,000 --> 00:44:59,440
you know

1235
00:44:59,440 --> 00:45:01,359
we talked about us a lot so this is

1236
00:45:01,359 --> 00:45:03,119
gonna be a merger not merge kind of

1237
00:45:03,119 --> 00:45:05,359
questions um

1238
00:45:05,359 --> 00:45:07,200
so um

1239
00:45:07,200 --> 00:45:09,280
whatever what's the number of this pr

1240
00:45:09,280 --> 00:45:12,960
doesn't matter doesn't matter

1241
00:45:13,200 --> 00:45:15,680
605.

1242
00:45:15,680 --> 00:45:16,960
um

1243
00:45:16,960 --> 00:45:22,000
so let's do with merge number 605

1244
00:45:22,000 --> 00:45:23,599
let's see if we can do that so you're

1245
00:45:23,599 --> 00:45:25,040
going to raise your hands if you think

1246
00:45:25,040 --> 00:45:26,800
it's a good idea to merge this and then

1247
00:45:26,800 --> 00:45:28,640
we'll do another one about not merging

1248
00:45:28,640 --> 00:45:31,200
it okay

1249
00:45:31,200 --> 00:45:32,720
oh no this is yes or no right there's

1250
00:45:32,720 --> 00:45:35,119
only two options here

1251
00:45:35,119 --> 00:45:36,720
so i think when we do this it'll be let

1252
00:45:36,720 --> 00:45:39,119
me start it it's yes or no so yeah raise

1253
00:45:39,119 --> 00:45:40,319
your hand if you think we should merge

1254
00:45:40,319 --> 00:45:41,520
it and

1255
00:45:41,520 --> 00:45:42,800
do not raise your hand if you don't

1256
00:45:42,800 --> 00:45:47,079
think we should rate we should merge it

1257
00:45:48,079 --> 00:45:51,440
we have 81 people in our room we have

1258
00:45:51,440 --> 00:45:53,200
currently have 15 participants i'm going

1259
00:45:53,200 --> 00:45:57,240
to let this go for another minute

1260
00:46:04,930 --> 00:46:09,359
[Laughter]

1261
00:46:09,359 --> 00:46:11,200
all right well what happens we take it

1262
00:46:11,200 --> 00:46:12,400
to the list

1263
00:46:12,400 --> 00:46:13,200
um

1264
00:46:13,200 --> 00:46:15,040
in the poll we'll take it to the list

1265
00:46:15,040 --> 00:46:16,960
there's one other pr related to protocol

1266
00:46:16,960 --> 00:46:18,079
that we're also going to take to the

1267
00:46:18,079 --> 00:46:21,359
list um so i will go ahead and do that

1268
00:46:21,359 --> 00:46:23,359
uh the other the next draft i think

1269
00:46:23,359 --> 00:46:24,480
we're going to switch over here to

1270
00:46:24,480 --> 00:46:27,119
benjamin to give us a kind of quick walk

1271
00:46:27,119 --> 00:46:29,839
through of uh

1272
00:46:29,839 --> 00:46:33,119
the architecture draft

1273
00:46:36,160 --> 00:46:37,200
thank you

1274
00:46:37,200 --> 00:46:39,599
tell me what you want me to do

1275
00:46:39,599 --> 00:46:42,480
so can you please show the

1276
00:46:42,480 --> 00:46:44,240
issues for the

1277
00:46:44,240 --> 00:46:46,560
for the for the documents

1278
00:46:46,560 --> 00:46:48,000
actually i think it's going to be a very

1279
00:46:48,000 --> 00:46:48,960
short

1280
00:46:48,960 --> 00:46:51,200
discussion because pretty much here is a

1281
00:46:51,200 --> 00:46:53,280
very easy editorial

1282
00:46:53,280 --> 00:46:56,400
and not much has changed since september

1283
00:46:56,400 --> 00:46:58,480
so the the

1284
00:46:58,480 --> 00:47:01,200
like i think if the protocol document is

1285
00:47:01,200 --> 00:47:03,200
done uh richard

1286
00:47:03,200 --> 00:47:04,400
and i did

1287
00:47:04,400 --> 00:47:07,119
a pass on the architecture document uh

1288
00:47:07,119 --> 00:47:08,720
over the last week

1289
00:47:08,720 --> 00:47:11,760
and uh and typically

1290
00:47:11,760 --> 00:47:13,359
richard made sure that

1291
00:47:13,359 --> 00:47:14,880
we are lined between the the

1292
00:47:14,880 --> 00:47:16,400
architecture document and the protocol

1293
00:47:16,400 --> 00:47:18,640
document so that we don't have any

1294
00:47:18,640 --> 00:47:19,920
um

1295
00:47:19,920 --> 00:47:21,920
any differences in terms of the the way

1296
00:47:21,920 --> 00:47:23,200
we

1297
00:47:23,200 --> 00:47:25,920
name the group id things like this

1298
00:47:25,920 --> 00:47:28,240
i still need to do a last editorial

1299
00:47:28,240 --> 00:47:30,000
thing but the

1300
00:47:30,000 --> 00:47:31,920
last editorial pass but generally i

1301
00:47:31,920 --> 00:47:34,160
think it's pretty close to be done

1302
00:47:34,160 --> 00:47:37,200
there are only two real

1303
00:47:37,200 --> 00:47:39,280
issues left that are also mostly

1304
00:47:39,280 --> 00:47:40,480
editorial

1305
00:47:40,480 --> 00:47:43,440
one is 75 which is uh

1306
00:47:43,440 --> 00:47:46,559
tactics the expected type of deployments

1307
00:47:46,559 --> 00:47:48,640
and typically what we have been uh

1308
00:47:48,640 --> 00:47:50,960
what's been asked here is

1309
00:47:50,960 --> 00:47:52,880
documenting more

1310
00:47:52,880 --> 00:47:55,839
uh kind of deployments meaning like

1311
00:47:55,839 --> 00:47:57,520
like the the

1312
00:47:57,520 --> 00:47:59,359
framework on which we built mls is

1313
00:47:59,359 --> 00:48:00,960
mostly the centralized deployment but we

1314
00:48:00,960 --> 00:48:03,280
made sure that the protocol can handle

1315
00:48:03,280 --> 00:48:04,800
you know like

1316
00:48:04,800 --> 00:48:06,960
animals deployments a

1317
00:48:06,960 --> 00:48:09,440
different kind of delivery system for

1318
00:48:09,440 --> 00:48:11,520
messages

1319
00:48:11,520 --> 00:48:13,040
and

1320
00:48:13,040 --> 00:48:15,839
you know some people typically brandon

1321
00:48:15,839 --> 00:48:17,359
actually asked whether we should

1322
00:48:17,359 --> 00:48:18,960
document more

1323
00:48:18,960 --> 00:48:20,960
use cases more kind of architectures in

1324
00:48:20,960 --> 00:48:22,960
this document i

1325
00:48:22,960 --> 00:48:24,559
at this point i don't think we should do

1326
00:48:24,559 --> 00:48:27,680
that i think a much better place to do

1327
00:48:27,680 --> 00:48:29,359
you know federated deployments

1328
00:48:29,359 --> 00:48:30,800
decentralized deployments is in the

1329
00:48:30,800 --> 00:48:33,359
federation document

1330
00:48:33,359 --> 00:48:35,760
because like the the main one the

1331
00:48:35,760 --> 00:48:37,599
centralized deployment is is the one we

1332
00:48:37,599 --> 00:48:39,760
refer to for the

1333
00:48:39,760 --> 00:48:41,520
for the for the deployment of the

1334
00:48:41,520 --> 00:48:43,359
protocol and uh

1335
00:48:43,359 --> 00:48:44,880
you know so

1336
00:48:44,880 --> 00:48:45,839
it's

1337
00:48:45,839 --> 00:48:48,319
it's it's an id i mean but i'm not

1338
00:48:48,319 --> 00:48:50,000
convinced that we should go there so we

1339
00:48:50,000 --> 00:48:52,000
propose that basically we don't do

1340
00:48:52,000 --> 00:48:53,920
anything we keep the centralized

1341
00:48:53,920 --> 00:48:56,720
deployment as the main use case

1342
00:48:56,720 --> 00:48:59,680
but i mean to

1343
00:48:59,680 --> 00:49:00,960
you know

1344
00:49:00,960 --> 00:49:02,800
to make a point i mean the document is

1345
00:49:02,800 --> 00:49:05,359
written to make explicit that this is

1346
00:49:05,359 --> 00:49:07,359
not the only deployment right like we

1347
00:49:07,359 --> 00:49:09,440
can deploy in many ways

1348
00:49:09,440 --> 00:49:11,920
uh and we have like only in the

1349
00:49:11,920 --> 00:49:13,440
architectural document the minimal

1350
00:49:13,440 --> 00:49:15,280
assumptions which is we need some kind

1351
00:49:15,280 --> 00:49:18,559
of authentication service which will

1352
00:49:18,559 --> 00:49:21,280
authenticate these or provide keys for

1353
00:49:21,280 --> 00:49:22,720
for signatures

1354
00:49:22,720 --> 00:49:24,240
uh later on in the protocol for

1355
00:49:24,240 --> 00:49:26,160
authentication but we don't say we

1356
00:49:26,160 --> 00:49:29,119
explicitly say oh by the way this can be

1357
00:49:29,119 --> 00:49:31,119
you know a consensus mechanism this can

1358
00:49:31,119 --> 00:49:33,359
be a central server this can be so we

1359
00:49:33,359 --> 00:49:34,880
already have this notion that the

1360
00:49:34,880 --> 00:49:38,559
centralized deployment is not the main

1361
00:49:38,559 --> 00:49:40,640
domain

1362
00:49:40,640 --> 00:49:41,760
the only

1363
00:49:41,760 --> 00:49:43,359
framework

1364
00:49:43,359 --> 00:49:45,280
so for this one i would

1365
00:49:45,280 --> 00:49:46,800
i would pretty much say that we should

1366
00:49:46,800 --> 00:49:50,640
not act and we don't do anything

1367
00:49:50,640 --> 00:49:51,599
and

1368
00:49:51,599 --> 00:49:53,680
move that basically

1369
00:49:53,680 --> 00:49:55,280
issue to the federated into the

1370
00:49:55,280 --> 00:49:58,640
federation documents

1371
00:49:58,640 --> 00:50:00,960
um

1372
00:50:01,040 --> 00:50:02,880
so

1373
00:50:02,880 --> 00:50:05,440
are there any questions about this

1374
00:50:05,440 --> 00:50:08,480
any comments i think you know like

1375
00:50:08,480 --> 00:50:10,240
the point is that this document is very

1376
00:50:10,240 --> 00:50:11,599
clear that there are other deployments

1377
00:50:11,599 --> 00:50:13,280
that the central one and it actually

1378
00:50:13,280 --> 00:50:15,359
already provides

1379
00:50:15,359 --> 00:50:18,079
intuitions or explicit recommendations

1380
00:50:18,079 --> 00:50:19,200
of

1381
00:50:19,200 --> 00:50:22,000
other kind of deployments but you know i

1382
00:50:22,000 --> 00:50:25,359
think writing down a full

1383
00:50:25,359 --> 00:50:26,880
federated

1384
00:50:26,880 --> 00:50:30,480
uh or decentralized uh

1385
00:50:30,480 --> 00:50:33,520
architecture is like a separate thing

1386
00:50:33,520 --> 00:50:35,680
uh if we want to instantiate this like

1387
00:50:35,680 --> 00:50:37,359
this is really focused about the minimal

1388
00:50:37,359 --> 00:50:39,040
things that we need for the protocol to

1389
00:50:39,040 --> 00:50:40,559
run

1390
00:50:40,559 --> 00:50:41,839
so yeah

1391
00:50:41,839 --> 00:50:42,880
i would say

1392
00:50:42,880 --> 00:50:45,520
not touch not touching it is the best

1393
00:50:45,520 --> 00:50:48,240
way to go here

1394
00:50:50,079 --> 00:50:52,240
any comments that's chair i think this

1395
00:50:52,240 --> 00:50:54,559
is definitely one of these um please

1396
00:50:54,559 --> 00:50:56,160
bring pr if you think that this is

1397
00:50:56,160 --> 00:50:58,559
needed so you know

1398
00:50:58,559 --> 00:51:00,800
if if brandon shows up with you know 50

1399
00:51:00,800 --> 00:51:03,680
pages like hey great we'll review it

1400
00:51:03,680 --> 00:51:04,640
i i

1401
00:51:04,640 --> 00:51:07,200
i imagine that sometimes which he might

1402
00:51:07,200 --> 00:51:10,079
it's very possible right um that if it's

1403
00:51:10,079 --> 00:51:11,760
not forthcoming that it's okay that we

1404
00:51:11,760 --> 00:51:14,079
put it in the federated document or it's

1405
00:51:14,079 --> 00:51:15,760
been open for

1406
00:51:15,760 --> 00:51:18,559
a year and a half now so

1407
00:51:18,559 --> 00:51:19,599
you know

1408
00:51:19,599 --> 00:51:22,920
i don't think

1409
00:51:23,680 --> 00:51:25,760
i have a slightly different take here i

1410
00:51:25,760 --> 00:51:27,760
am not sure this belongs in the

1411
00:51:27,760 --> 00:51:28,960
federation document because i think

1412
00:51:28,960 --> 00:51:30,319
that'll be a little bit more protocol

1413
00:51:30,319 --> 00:51:31,599
oriented than talking about these

1414
00:51:31,599 --> 00:51:34,400
deployment considerations but i i don't

1415
00:51:34,400 --> 00:51:35,680
think it's actually all that useful to

1416
00:51:35,680 --> 00:51:37,599
talk about these kind of aggregate

1417
00:51:37,599 --> 00:51:40,079
deployment scenarios either because the

1418
00:51:40,079 --> 00:51:42,240
individual properties um that are talked

1419
00:51:42,240 --> 00:51:43,839
about here get covered in the

1420
00:51:43,839 --> 00:51:46,400
architecture document so net net i'm i'm

1421
00:51:46,400 --> 00:51:48,319
okay uh closing this with new action as

1422
00:51:48,319 --> 00:51:51,319
well

1423
00:51:52,079 --> 00:51:53,760
i i don't know if brandon's here or if

1424
00:51:53,760 --> 00:51:55,680
anybody else wants to get speakers but

1425
00:51:55,680 --> 00:51:56,480
um

1426
00:51:56,480 --> 00:51:58,640
let's go ahead and proceed with that and

1427
00:51:58,640 --> 00:52:02,400
if there's a rush to the microphone here

1428
00:52:03,680 --> 00:52:05,040
all right i think we'll go ahead and you

1429
00:52:05,040 --> 00:52:08,240
can see who closes from now

1430
00:52:08,559 --> 00:52:10,079
or if we do

1431
00:52:10,079 --> 00:52:12,480
einstein i just need to

1432
00:52:12,480 --> 00:52:15,040
just go through it

1433
00:52:15,040 --> 00:52:19,040
now we're down to one number 71

1434
00:52:19,040 --> 00:52:21,040
yes and that's also very very

1435
00:52:21,040 --> 00:52:23,440
straightforward i think um chelsea

1436
00:52:23,440 --> 00:52:24,559
actually

1437
00:52:24,559 --> 00:52:26,000
um

1438
00:52:26,000 --> 00:52:28,160
wanted to make sure that the phrasing in

1439
00:52:28,160 --> 00:52:30,839
the architecture document

1440
00:52:30,839 --> 00:52:34,880
um is is good enough so that people just

1441
00:52:34,880 --> 00:52:37,839
assume that because there is an uh

1442
00:52:37,839 --> 00:52:39,839
key package or an init key that is used

1443
00:52:39,839 --> 00:52:42,079
that is added to a group

1444
00:52:42,079 --> 00:52:45,040
means that the the

1445
00:52:45,040 --> 00:52:47,680
the participant is actively contributing

1446
00:52:47,680 --> 00:52:49,440
uh meaning that you know like anyone can

1447
00:52:49,440 --> 00:52:50,559
take uh

1448
00:52:50,559 --> 00:52:52,559
i can take the init key for jobin or

1449
00:52:52,559 --> 00:52:54,559
whatever and like do an x3dh session

1450
00:52:54,559 --> 00:52:57,119
with him uh it's not gonna mean that

1451
00:52:57,119 --> 00:52:58,800
he wants to talk to me right or that

1452
00:52:58,800 --> 00:53:00,240
we're in an active discussion and we

1453
00:53:00,240 --> 00:53:01,599
have a very

1454
00:53:01,599 --> 00:53:04,400
slightly similar issue in in

1455
00:53:04,400 --> 00:53:06,000
mls uh

1456
00:53:06,000 --> 00:53:09,119
the way i see it so i want i like things

1457
00:53:09,119 --> 00:53:11,440
she wanted to improve the phrasing

1458
00:53:11,440 --> 00:53:14,640
to say that only when a participant

1459
00:53:14,640 --> 00:53:16,319
actually committed

1460
00:53:16,319 --> 00:53:18,800
to that group in response for this ad

1461
00:53:18,800 --> 00:53:20,880
we should consider this uh as a

1462
00:53:20,880 --> 00:53:22,240
participation

1463
00:53:22,240 --> 00:53:23,040
um

1464
00:53:23,040 --> 00:53:25,520
so i don't even want to go that way and

1465
00:53:25,520 --> 00:53:27,839
say he is like this person is

1466
00:53:27,839 --> 00:53:29,760
participating but i want to make sure

1467
00:53:29,760 --> 00:53:32,400
that the phrasing doesn't imply that

1468
00:53:32,400 --> 00:53:34,960
because someone uh is added to a group

1469
00:53:34,960 --> 00:53:36,079
because it's

1470
00:53:36,079 --> 00:53:37,359
other two group

1471
00:53:37,359 --> 00:53:38,400
uh

1472
00:53:38,400 --> 00:53:40,400
that person accepted to be part of that

1473
00:53:40,400 --> 00:53:42,480
group until there is no until there is

1474
00:53:42,480 --> 00:53:44,880
an actual action from that person

1475
00:53:44,880 --> 00:53:45,760
uh

1476
00:53:45,760 --> 00:53:47,599
you know you can't assume anything of

1477
00:53:47,599 --> 00:53:48,319
its

1478
00:53:48,319 --> 00:53:50,240
active participation

1479
00:53:50,240 --> 00:53:53,440
so that's the i think that's like uh

1480
00:53:53,440 --> 00:53:56,160
very straightforward uh i am waiting for

1481
00:53:56,160 --> 00:53:58,079
chelsea or someone else maybe you know

1482
00:53:58,079 --> 00:54:00,240
that wants to do a pr for that one but

1483
00:54:00,240 --> 00:54:02,079
it's like really a simple editorial pr

1484
00:54:02,079 --> 00:54:03,839
to ensure that there is no confusion

1485
00:54:03,839 --> 00:54:04,720
right

1486
00:54:04,720 --> 00:54:06,160
um

1487
00:54:06,160 --> 00:54:07,920
and at this point i think

1488
00:54:07,920 --> 00:54:10,079
the only thing that we really need is

1489
00:54:10,079 --> 00:54:13,440
his review for the architecture draft

1490
00:54:13,440 --> 00:54:14,559
like

1491
00:54:14,559 --> 00:54:16,880
last review is from richard last week i

1492
00:54:16,880 --> 00:54:18,880
think

1493
00:54:18,880 --> 00:54:21,440
he made a nice set of editorial comments

1494
00:54:21,440 --> 00:54:24,000
to that document

1495
00:54:24,000 --> 00:54:26,079
uh we merged them

1496
00:54:26,079 --> 00:54:27,760
because like there was no

1497
00:54:27,760 --> 00:54:30,400
change uh that needed to be discussed

1498
00:54:30,400 --> 00:54:32,480
this was purely editorial like changing

1499
00:54:32,480 --> 00:54:34,400
names uh for the

1500
00:54:34,400 --> 00:54:35,839
for the types that were used in the

1501
00:54:35,839 --> 00:54:39,279
protocol documents and things like this

1502
00:54:40,079 --> 00:54:42,160
welcome i think we are done

1503
00:54:42,160 --> 00:54:44,240
so on number 71 here

1504
00:54:44,240 --> 00:54:45,440
um

1505
00:54:45,440 --> 00:54:48,319
i think that it there is probably a

1506
00:54:48,319 --> 00:54:50,240
conceptual distinction to make between

1507
00:54:50,240 --> 00:54:52,799
membership and liveness

1508
00:54:52,799 --> 00:54:54,960
because when when someone has been added

1509
00:54:54,960 --> 00:54:56,720
even before they commit they are a

1510
00:54:56,720 --> 00:54:58,240
member of the group in the sense that

1511
00:54:58,240 --> 00:54:59,280
they can

1512
00:54:59,280 --> 00:55:01,119
access the group's secrets decrypt

1513
00:55:01,119 --> 00:55:04,480
messages etc i i agree that they may not

1514
00:55:04,480 --> 00:55:07,119
have you know consented they may not be

1515
00:55:07,119 --> 00:55:08,480
actively involved in this group it may

1516
00:55:08,480 --> 00:55:11,200
be a stale key package or whatever

1517
00:55:11,200 --> 00:55:13,599
but you know they regardless whoever has

1518
00:55:13,599 --> 00:55:15,599
has access the private key is has access

1519
00:55:15,599 --> 00:55:17,200
to their secrets and it's just a member

1520
00:55:17,200 --> 00:55:19,839
in that sense so i think we may if we

1521
00:55:19,839 --> 00:55:21,359
really want to clarify this one up we

1522
00:55:21,359 --> 00:55:22,400
may need to

1523
00:55:22,400 --> 00:55:24,000
you know

1524
00:55:24,000 --> 00:55:25,839
clarify that and make a distinction make

1525
00:55:25,839 --> 00:55:27,520
a distinct notion of kind of liveness

1526
00:55:27,520 --> 00:55:30,000
and consent um that's a separate from

1527
00:55:30,000 --> 00:55:31,119
membership

1528
00:55:31,119 --> 00:55:32,880
i i can take an action to think about

1529
00:55:32,880 --> 00:55:34,720
how to express that

1530
00:55:34,720 --> 00:55:37,280
that would be great

1531
00:55:37,280 --> 00:55:39,680
apart from that i mean the the last two

1532
00:55:39,680 --> 00:55:41,040
issues are really like making sure that

1533
00:55:41,040 --> 00:55:42,640
we have all the citations for the paper

1534
00:55:42,640 --> 00:55:44,720
that we wanted in the architectural

1535
00:55:44,720 --> 00:55:46,720
document and ensures that the

1536
00:55:46,720 --> 00:55:48,319
affiliations and the contributors are

1537
00:55:48,319 --> 00:55:49,280
correct

1538
00:55:49,280 --> 00:55:52,000
uh the rest is like

1539
00:55:52,000 --> 00:55:52,880
yeah

1540
00:55:52,880 --> 00:55:55,040
if anyone has like uh i don't know do

1541
00:55:55,040 --> 00:55:57,359
you want to proceed uh

1542
00:55:57,359 --> 00:55:59,440
sean with the timeline

1543
00:55:59,440 --> 00:56:00,960
come on i want to make sure that robin

1544
00:56:00,960 --> 00:56:03,839
uh you're in the queue

1545
00:56:06,720 --> 00:56:09,119
yeah thanks sean is the audio okay

1546
00:56:09,119 --> 00:56:10,000
yep

1547
00:56:10,000 --> 00:56:11,200
yes good

1548
00:56:11,200 --> 00:56:13,440
yeah i wanted to pick up on the point

1549
00:56:13,440 --> 00:56:16,640
that richards alluded to here because

1550
00:56:16,640 --> 00:56:19,280
the alarm bell that set off in my mind

1551
00:56:19,280 --> 00:56:20,559
was

1552
00:56:20,559 --> 00:56:24,000
um are we opening the door there for the

1553
00:56:24,000 --> 00:56:26,240
kind of proposal that was put forward in

1554
00:56:26,240 --> 00:56:29,680
the uk the so-called ghost protocol or

1555
00:56:29,680 --> 00:56:32,480
silent listener

1556
00:56:32,559 --> 00:56:34,559
what i don't want to see i think in a

1557
00:56:34,559 --> 00:56:36,319
spec like this

1558
00:56:36,319 --> 00:56:37,680
is

1559
00:56:37,680 --> 00:56:38,799
um

1560
00:56:38,799 --> 00:56:40,240
a a

1561
00:56:40,240 --> 00:56:42,960
staged view of someone being a member of

1562
00:56:42,960 --> 00:56:44,480
the group

1563
00:56:44,480 --> 00:56:46,640
that would make it possible

1564
00:56:46,640 --> 00:56:48,960
for someone to participate in the key

1565
00:56:48,960 --> 00:56:50,880
exchange

1566
00:56:50,880 --> 00:56:52,799
but for some reason because they're not

1567
00:56:52,799 --> 00:56:54,799
at that point considered to be a full

1568
00:56:54,799 --> 00:56:56,720
participant of the group

1569
00:56:56,720 --> 00:56:58,559
for other people in the group not to be

1570
00:56:58,559 --> 00:57:01,119
notified that that person has has

1571
00:57:01,119 --> 00:57:03,119
undertaken the key exchange i think that

1572
00:57:03,119 --> 00:57:05,280
would be bad and dangerous

1573
00:57:05,280 --> 00:57:07,920
so we don't have that uh definitely we

1574
00:57:07,920 --> 00:57:09,760
don't allow that because

1575
00:57:09,760 --> 00:57:12,160
the protocol actually enforces that

1576
00:57:12,160 --> 00:57:15,680
everyone sees the same thing

1577
00:57:16,480 --> 00:57:20,640
you can't hide basically like the the

1578
00:57:21,200 --> 00:57:24,559
nobody can add a participant

1579
00:57:24,559 --> 00:57:27,760
i mean that would not be visible by

1580
00:57:27,760 --> 00:57:31,119
other members the only the i mean

1581
00:57:31,119 --> 00:57:33,040
let's be clear any application can do

1582
00:57:33,040 --> 00:57:35,280
that right like any application can link

1583
00:57:35,280 --> 00:57:37,839
that or any any

1584
00:57:37,839 --> 00:57:40,480
programs that forwards the message to

1585
00:57:40,480 --> 00:57:42,880
from so any malicious participant can do

1586
00:57:42,880 --> 00:57:43,760
that

1587
00:57:43,760 --> 00:57:46,559
but like uh forwarding messages i mean

1588
00:57:46,559 --> 00:57:48,640
but they cannot add people that won't be

1589
00:57:48,640 --> 00:57:50,960
detect that won't be actual members of

1590
00:57:50,960 --> 00:57:53,119
the group what i mean by that is that

1591
00:57:53,119 --> 00:57:55,680
the cryptographic state will include the

1592
00:57:55,680 --> 00:57:58,559
the key from someone that has been added

1593
00:57:58,559 --> 00:57:59,760
uh

1594
00:57:59,760 --> 00:58:01,839
but the application must know that you

1595
00:58:01,839 --> 00:58:03,359
know the

1596
00:58:03,359 --> 00:58:05,520
this person hasn't

1597
00:58:05,520 --> 00:58:07,680
sent them a message to that to that

1598
00:58:07,680 --> 00:58:09,119
group

1599
00:58:09,119 --> 00:58:11,839
um is it is is what i said here i mean

1600
00:58:11,839 --> 00:58:13,599
the the fact is that philosophically you

1601
00:58:13,599 --> 00:58:15,119
can't either participant you can't do

1602
00:58:15,119 --> 00:58:18,400
like the uk backdoor thing thing

1603
00:58:18,400 --> 00:58:20,640
okay yeah that's it's it's reassuring

1604
00:58:20,640 --> 00:58:22,960
and i think um it suggests that

1605
00:58:22,960 --> 00:58:24,799
chelsea's comment is really about

1606
00:58:24,799 --> 00:58:27,200
clarity of the text rather than

1607
00:58:27,200 --> 00:58:29,920
uh safe safeness of the protocol thank

1608
00:58:29,920 --> 00:58:30,799
you

1609
00:58:30,799 --> 00:58:32,400
definitely all right so what i'm going

1610
00:58:32,400 --> 00:58:34,319
to do is i'll benjamin to answer your

1611
00:58:34,319 --> 00:58:37,280
question i'm going to ask for uh

1612
00:58:37,280 --> 00:58:38,880
volunteers is there anybody that wants

1613
00:58:38,880 --> 00:58:40,480
to go on the record for saying that

1614
00:58:40,480 --> 00:58:42,640
they're willing to review this

1615
00:58:42,640 --> 00:58:44,240
uh soon

1616
00:58:44,240 --> 00:58:46,160
um because otherwise we are actually

1617
00:58:46,160 --> 00:58:47,760
going to do a working group last call

1618
00:58:47,760 --> 00:58:49,040
and there i would love to have some

1619
00:58:49,040 --> 00:58:51,359
people also volunteer on the record to

1620
00:58:51,359 --> 00:58:54,000
have a review

1621
00:59:01,280 --> 00:59:03,599
so reviews are very helpful right and

1622
00:59:03,599 --> 00:59:05,760
they're necessary

1623
00:59:05,760 --> 00:59:06,880
so yeah

1624
00:59:06,880 --> 00:59:08,319
it's hard it's hard for me to tell

1625
00:59:08,319 --> 00:59:10,240
benjamin hey make some changes he's like

1626
00:59:10,240 --> 00:59:12,880
uh nobody's asked for any so

1627
00:59:12,880 --> 00:59:15,200
i do think that as we progress this into

1628
00:59:15,200 --> 00:59:16,799
a working group last call that the

1629
00:59:16,799 --> 00:59:18,720
reviewers will come out of the woodwork

1630
00:59:18,720 --> 00:59:20,079
and that's certainly when we progress

1631
00:59:20,079 --> 00:59:21,200
this to

1632
00:59:21,200 --> 00:59:23,040
uh the air director we'll probably get

1633
00:59:23,040 --> 00:59:25,520
some uh reviews i don't know i assume

1634
00:59:25,520 --> 00:59:27,520
we're probably gonna get paul um i think

1635
00:59:27,520 --> 00:59:29,040
we'll get some reviews but i know that

1636
00:59:29,040 --> 00:59:30,400
when we leave the working group we're

1637
00:59:30,400 --> 00:59:33,680
gonna get comments from people so um so

1638
00:59:33,680 --> 00:59:36,000
all right cool i didn't get any uh

1639
00:59:36,000 --> 00:59:37,599
people that uh

1640
00:59:37,599 --> 00:59:39,440
volunteered but we'll we'll i think

1641
00:59:39,440 --> 00:59:41,040
we're gonna get some by uh force of

1642
00:59:41,040 --> 00:59:43,760
nature here so um the last little bit

1643
00:59:43,760 --> 00:59:45,680
here is on federation

1644
00:59:45,680 --> 00:59:50,399
so um uh raphael if you want to jump in

1645
00:59:56,480 --> 00:59:58,400
i don't know

1646
00:59:58,400 --> 01:00:01,359
i can hear you excellent okay i'm gonna

1647
01:00:01,359 --> 01:00:03,599
try and go really fast on that one

1648
01:00:03,599 --> 01:00:05,920
um so yeah a really long time ago the

1649
01:00:05,920 --> 01:00:07,760
working group created a document called

1650
01:00:07,760 --> 01:00:10,000
federation because at the time a number

1651
01:00:10,000 --> 01:00:11,760
of parties had expressed some interest

1652
01:00:11,760 --> 01:00:12,960
in that

1653
01:00:12,960 --> 01:00:14,799
um we haven't really been working on it

1654
01:00:14,799 --> 01:00:16,400
because we've been focusing on the

1655
01:00:16,400 --> 01:00:18,559
protocol itself and the delivery service

1656
01:00:18,559 --> 01:00:20,880
and the authentication service

1657
01:00:20,880 --> 01:00:21,839
um

1658
01:00:21,839 --> 01:00:23,119
so it's become

1659
01:00:23,119 --> 01:00:25,599
quite stale at this point um

1660
01:00:25,599 --> 01:00:27,040
but in the meantime the protocol has

1661
01:00:27,040 --> 01:00:29,200
matured and we are relatively close to

1662
01:00:29,200 --> 01:00:31,680
the work group last call now

1663
01:00:31,680 --> 01:00:33,920
we have several implementations we even

1664
01:00:33,920 --> 01:00:36,240
have one deployment so that means that

1665
01:00:36,240 --> 01:00:37,599
we can actually

1666
01:00:37,599 --> 01:00:39,599
we're now in a better position to talk

1667
01:00:39,599 --> 01:00:42,079
about federation with all the experience

1668
01:00:42,079 --> 01:00:43,520
we have now

1669
01:00:43,520 --> 01:00:45,359
so the idea here is to see if we can

1670
01:00:45,359 --> 01:00:48,319
resurrect the federation documents

1671
01:00:48,319 --> 01:00:50,319
and the old version is still around you

1672
01:00:50,319 --> 01:00:52,079
can use that as a starting point and

1673
01:00:52,079 --> 01:00:54,000
modernize it

1674
01:00:54,000 --> 01:00:56,559
specifically rowan has proposed to make

1675
01:00:56,559 --> 01:01:00,160
some initial contributions to that um

1676
01:01:00,160 --> 01:01:01,599
and

1677
01:01:01,599 --> 01:01:03,359
as a reminder maybe this document is a

1678
01:01:03,359 --> 01:01:05,599
non-normative document meaning it's not

1679
01:01:05,599 --> 01:01:08,480
intended to specify a full wire format

1680
01:01:08,480 --> 01:01:10,880
to do federation

1681
01:01:10,880 --> 01:01:12,079
it's probably

1682
01:01:12,079 --> 01:01:13,920
more likely going to be about

1683
01:01:13,920 --> 01:01:15,599
the different components and how they

1684
01:01:15,599 --> 01:01:17,520
can interact

1685
01:01:17,520 --> 01:01:18,400
so

1686
01:01:18,400 --> 01:01:20,960
yeah i think that's actually it so

1687
01:01:20,960 --> 01:01:23,520
looking forward for some contributions

1688
01:01:23,520 --> 01:01:25,839
and discussion

1689
01:01:25,839 --> 01:01:27,200
yeah so the only thing i want to add for

1690
01:01:27,200 --> 01:01:28,799
those process wonks that might be in the

1691
01:01:28,799 --> 01:01:30,319
room or on the

1692
01:01:30,319 --> 01:01:31,760
in the thing here is we've already

1693
01:01:31,760 --> 01:01:34,079
adopted this draft um and there's a repo

1694
01:01:34,079 --> 01:01:36,240
for it that uh we're gonna let the

1695
01:01:36,240 --> 01:01:38,640
editors do their thing if they've they

1696
01:01:38,640 --> 01:01:40,880
want to rewrite the document or whatever

1697
01:01:40,880 --> 01:01:42,240
um they're just going to go ahead and do

1698
01:01:42,240 --> 01:01:43,440
that we're not going to do the whole

1699
01:01:43,440 --> 01:01:46,240
individual re-adopt

1700
01:01:46,240 --> 01:01:48,160
process delay we're just going to set

1701
01:01:48,160 --> 01:01:50,240
them free basically um

1702
01:01:50,240 --> 01:01:52,640
and so i thank you for reinvigorating

1703
01:01:52,640 --> 01:01:53,760
that because it's one of the things

1704
01:01:53,760 --> 01:01:57,440
that's on our uh to-do list so thanks

1705
01:01:57,440 --> 01:01:58,960
and thanks everybody for showing up it's

1706
01:01:58,960 --> 01:02:00,720
901. thanks for staying that extra

1707
01:02:00,720 --> 01:02:03,760
minute uh go get some uh libations

1708
01:02:03,760 --> 01:02:05,280
before uh

1709
01:02:05,280 --> 01:02:07,359
the plenary or the ohio or wherever else

1710
01:02:07,359 --> 01:02:10,160
you're gonna go next

1711
01:02:10,160 --> 01:02:12,480
thanks a lot

1712
01:02:12,480 --> 01:02:14,000
thanks so bye

1713
01:02:14,000 --> 01:02:16,160
expect some mail to list

1714
01:02:16,160 --> 01:02:19,160
ciao

1715
01:02:20,720 --> 01:02:25,160
thanks again stephen and robin

1716
01:02:36,799 --> 01:02:39,119
um

1717
01:02:45,200 --> 01:02:48,200
how

1718
01:02:48,240 --> 01:02:51,240
um

1719
01:03:02,319 --> 01:03:06,359
well he'll be at dinner tomorrow

1720
01:03:08,130 --> 01:03:11,320
[Music]

