1
00:00:38,559 --> 00:00:41,559
um

2
00:00:48,960 --> 00:00:50,000
good morning

3
00:00:50,000 --> 00:00:51,280
hi miriah

4
00:00:51,280 --> 00:00:53,280
yeah good morning everybody hi dave good

5
00:00:53,280 --> 00:00:54,559
to see you

6
00:00:54,559 --> 00:00:56,079
i think i'm gonna stop sharing this

7
00:00:56,079 --> 00:00:58,079
slide in that you take the

8
00:00:58,079 --> 00:01:01,120
the intro slides okay

9
00:01:01,120 --> 00:01:05,480
um yep that's fine

10
00:01:44,640 --> 00:01:47,280
so for some reason

11
00:01:47,280 --> 00:01:49,520
we uh i see that slides and make acre

12
00:01:49,520 --> 00:01:53,479
but i don't see them in the room

13
00:01:54,320 --> 00:01:57,279
so let me try again

14
00:02:03,040 --> 00:02:06,840
ah now it works okay david should we

15
00:02:06,840 --> 00:02:08,959
start yeah

16
00:02:08,959 --> 00:02:10,160
okay

17
00:02:10,160 --> 00:02:12,400
then um hello everyone and welcome to

18
00:02:12,400 --> 00:02:14,239
the maverick session

19
00:02:14,239 --> 00:02:16,640
i'm happy to be here and actually see

20
00:02:16,640 --> 00:02:19,520
some faces uh and i also see dave's face

21
00:02:19,520 --> 00:02:20,840
so that's

22
00:02:20,840 --> 00:02:24,640
great um and let's start right away

23
00:02:24,640 --> 00:02:26,720
luckily we got a two hour slot and we

24
00:02:26,720 --> 00:02:28,640
got some really nice presentations so we

25
00:02:28,640 --> 00:02:32,000
should have plenty of time today

26
00:02:32,480 --> 00:02:34,879
yeah so this is an irtf session but we

27
00:02:34,879 --> 00:02:36,640
also have a note well it's very similar

28
00:02:36,640 --> 00:02:38,959
to the ietf note well and if you're not

29
00:02:38,959 --> 00:02:40,879
familiar with it you should look up the

30
00:02:40,879 --> 00:02:44,480
respective rc's maybe

31
00:02:46,160 --> 00:02:49,280
this session will be recorded

32
00:02:49,280 --> 00:02:51,840
and will be found on youtube later on so

33
00:02:51,840 --> 00:02:53,360
please be aware of that no matter if

34
00:02:53,360 --> 00:02:55,200
you're in the room or a remote

35
00:02:55,200 --> 00:02:57,920
participant

36
00:02:58,720 --> 00:02:59,920
then

37
00:02:59,920 --> 00:03:00,959
also

38
00:03:00,959 --> 00:03:04,239
the irtf follows very similarly the

39
00:03:04,239 --> 00:03:07,360
private c policy and the code of conduct

40
00:03:07,360 --> 00:03:09,040
of the ietf

41
00:03:09,040 --> 00:03:11,519
so basically this is just a reminder

42
00:03:11,519 --> 00:03:13,680
to be nice to each other to work

43
00:03:13,680 --> 00:03:15,519
together in a friendly way

44
00:03:15,519 --> 00:03:18,239
and also for the presentations state

45
00:03:18,239 --> 00:03:19,360
your questions

46
00:03:19,360 --> 00:03:21,360
clearly stay friendly

47
00:03:21,360 --> 00:03:23,760
and most usefully for this session you

48
00:03:23,760 --> 00:03:26,000
know provide productive feedback if you

49
00:03:26,000 --> 00:03:28,480
have some

50
00:03:31,120 --> 00:03:33,360
i said this already this is not an ietf

51
00:03:33,360 --> 00:03:35,599
session isn't it's an irtf session so

52
00:03:35,599 --> 00:03:38,159
what we do here today is mostly inviting

53
00:03:38,159 --> 00:03:40,959
researchers to present their work

54
00:03:40,959 --> 00:03:42,799
and building a bridge of between these

55
00:03:42,799 --> 00:03:46,760
communities to the itf

56
00:03:47,920 --> 00:03:50,080
okay um this slide is usually just here

57
00:03:50,080 --> 00:03:51,599
so if you have the slides in front of

58
00:03:51,599 --> 00:03:53,040
you you have a quick link to everything

59
00:03:53,040 --> 00:03:54,959
you need to know or you don't know yet

60
00:03:54,959 --> 00:03:57,519
um just um as a reminder

61
00:03:57,519 --> 00:03:59,920
because this is our first hybrid meeting

62
00:03:59,920 --> 00:04:02,319
the people in the room are also

63
00:04:02,319 --> 00:04:04,400
supposed to use the

64
00:04:04,400 --> 00:04:06,400
virtual queue and you can join the queue

65
00:04:06,400 --> 00:04:08,560
over the meat echo interface either this

66
00:04:08,560 --> 00:04:10,000
light interface or the full interface

67
00:04:10,000 --> 00:04:12,879
post is accessible over the agenda

68
00:04:12,879 --> 00:04:14,560
and more importantly is you have to

69
00:04:14,560 --> 00:04:16,639
please join even if you're in the room

70
00:04:16,639 --> 00:04:18,798
one of these two ways um to join the

71
00:04:18,798 --> 00:04:20,478
meat aqua session because that's also

72
00:04:20,478 --> 00:04:22,880
how we generate our blue sheets so if

73
00:04:22,880 --> 00:04:24,960
you're in the room please join the meat

74
00:04:24,960 --> 00:04:26,880
echo as well so you're noted in the blue

75
00:04:26,880 --> 00:04:29,840
cheese

76
00:04:31,520 --> 00:04:33,120
yeah and like dave if you don't have

77
00:04:33,120 --> 00:04:36,160
anything else basically we start our

78
00:04:36,160 --> 00:04:39,360
presentation from here

79
00:04:39,919 --> 00:04:41,199
perfect

80
00:04:41,199 --> 00:04:43,199
um then our first speaker is actually in

81
00:04:43,199 --> 00:04:45,440
the room uh just arrived first time

82
00:04:45,440 --> 00:04:47,360
attendee and we're very happy to have

83
00:04:47,360 --> 00:04:49,680
you here so how much if you want to come

84
00:04:49,680 --> 00:04:50,880
in front

85
00:04:50,880 --> 00:04:52,720
and i'm getting up

86
00:04:52,720 --> 00:04:55,280
the new slide set for you

87
00:04:55,280 --> 00:04:59,440
so if you if you press this

88
00:05:00,720 --> 00:05:05,039
it should do something which it doesn't

89
00:05:06,400 --> 00:05:10,679
oh wait i have to acknowledge that

90
00:05:13,039 --> 00:05:17,800
oh no okay wait sorry i did this wrong

91
00:05:28,479 --> 00:05:31,880
with your knife

92
00:05:41,759 --> 00:05:44,759
yes

93
00:05:59,360 --> 00:06:01,360
okay hello everyone can everyone here be

94
00:06:01,360 --> 00:06:03,039
fine

95
00:06:03,039 --> 00:06:05,199
uh i'm hamas bentanvir and today i'll be

96
00:06:05,199 --> 00:06:07,039
presenting my work called

97
00:06:07,039 --> 00:06:09,120
uh glowing in the dark so this work is

98
00:06:09,120 --> 00:06:11,600
in collaboration with uh raji singh from

99
00:06:11,600 --> 00:06:13,840
microsoft research paul pierce from

100
00:06:13,840 --> 00:06:15,600
georgia tech and rishabh nitham and

101
00:06:15,600 --> 00:06:17,199
who's my phdwell

102
00:06:17,199 --> 00:06:18,880
so just to give you an overview of where

103
00:06:18,880 --> 00:06:21,280
this work fits in so as everyone knows

104
00:06:21,280 --> 00:06:24,160
we have ipv4 we have ipv6 but then we

105
00:06:24,160 --> 00:06:26,639
have scanning in v4 and scanning in v6

106
00:06:26,639 --> 00:06:28,240
so scanning in v4 is very well

107
00:06:28,240 --> 00:06:29,759
understood there's been a lot of studies

108
00:06:29,759 --> 00:06:32,000
about it and people basically know how

109
00:06:32,000 --> 00:06:33,759
to measure it and how to do it but

110
00:06:33,759 --> 00:06:36,160
things are not the same in v6 so we know

111
00:06:36,160 --> 00:06:37,280
that

112
00:06:37,280 --> 00:06:40,560
v6 is a much larger address space and

113
00:06:40,560 --> 00:06:42,479
scanners basically need to figure out

114
00:06:42,479 --> 00:06:44,479
where these active spaces of addresses

115
00:06:44,479 --> 00:06:46,479
are before they start scanning so

116
00:06:46,479 --> 00:06:48,400
there's been previous works on trying to

117
00:06:48,400 --> 00:06:50,240
figure out how to measure scanning in

118
00:06:50,240 --> 00:06:52,639
ipv6 but there's been no work

119
00:06:52,639 --> 00:06:55,680
on measuring how scanners in the wild

120
00:06:55,680 --> 00:06:58,319
like what techniques they use to scan

121
00:06:58,319 --> 00:07:00,720
active regions of ipv6 added space so

122
00:07:00,720 --> 00:07:02,639
i'll get it bent into what scanning is

123
00:07:02,639 --> 00:07:05,199
and then move to ipv4 and mpv6 and then

124
00:07:05,199 --> 00:07:07,280
go on from there

125
00:07:07,280 --> 00:07:08,720
so

126
00:07:08,720 --> 00:07:11,759
yeah so scanning is basically sending

127
00:07:11,759 --> 00:07:13,680
unsolicited communication to an ip

128
00:07:13,680 --> 00:07:15,919
address in order to draw a response and

129
00:07:15,919 --> 00:07:17,759
it can be done for a lot of different

130
00:07:17,759 --> 00:07:20,400
reasons so reasons both malicious and

131
00:07:20,400 --> 00:07:23,120
benign but in this talk we are more

132
00:07:23,120 --> 00:07:24,720
concerned about

133
00:07:24,720 --> 00:07:26,800
not concerned about how what scanning is

134
00:07:26,800 --> 00:07:29,280
but how scanning is different for ipv4

135
00:07:29,280 --> 00:07:32,800
and ipv6 and why why is that the case

136
00:07:32,800 --> 00:07:34,160
so

137
00:07:34,160 --> 00:07:36,720
scanning in ipv4 so there's there's a

138
00:07:36,720 --> 00:07:38,400
lot of tools for that so for example if

139
00:07:38,400 --> 00:07:40,960
you use zmap you can scan the entire

140
00:07:40,960 --> 00:07:42,960
ipv4 address space within a matter of

141
00:07:42,960 --> 00:07:44,400
minutes obviously given that you have a

142
00:07:44,400 --> 00:07:46,160
good enough internet connection

143
00:07:46,160 --> 00:07:49,599
but in ipv6 things are not uh quite so

144
00:07:49,599 --> 00:07:51,680
simple because the address space is now

145
00:07:51,680 --> 00:07:54,080
2 to the power 128 total addresses you

146
00:07:54,080 --> 00:07:56,960
just cannot brute forces so what you

147
00:07:56,960 --> 00:07:58,639
have to do instead is you have to come

148
00:07:58,639 --> 00:08:00,240
up with newer scanning techniques so you

149
00:08:00,240 --> 00:08:02,319
can go through the y2v6 address space

150
00:08:02,319 --> 00:08:04,240
trying to find addresses that you

151
00:08:04,240 --> 00:08:06,479
previously didn't know of and these

152
00:08:06,479 --> 00:08:08,639
newer scanning techniques is exactly

153
00:08:08,639 --> 00:08:11,520
what we characterize in this paper

154
00:08:11,520 --> 00:08:12,479
so

155
00:08:12,479 --> 00:08:14,639
just to hammer in the point that how

156
00:08:14,639 --> 00:08:17,280
bigger the ipv6 space is

157
00:08:17,280 --> 00:08:20,160
in relation to ipv4 so this uh image

158
00:08:20,160 --> 00:08:22,000
helps me hammer it down really well so

159
00:08:22,000 --> 00:08:24,479
let's say if all of the ipv6 added space

160
00:08:24,479 --> 00:08:27,599
were equivalent to the 4.5 billion years

161
00:08:27,599 --> 00:08:30,400
the earth has been in existence the ipv4

162
00:08:30,400 --> 00:08:32,399
added space would equal two trillionths

163
00:08:32,399 --> 00:08:34,240
of a second or the time that light would

164
00:08:34,240 --> 00:08:36,399
take to traverse the period at the end

165
00:08:36,399 --> 00:08:38,320
of this sentence so basically you just

166
00:08:38,320 --> 00:08:40,000
cannot boot force it it's it's not

167
00:08:40,000 --> 00:08:41,599
really possible

168
00:08:41,599 --> 00:08:43,039
so

169
00:08:43,039 --> 00:08:46,080
given that this ipv6 space is so large

170
00:08:46,080 --> 00:08:48,399
how do you even start to scan it so

171
00:08:48,399 --> 00:08:49,920
right now there's two major techniques

172
00:08:49,920 --> 00:08:52,000
that you can use so one is called ip

173
00:08:52,000 --> 00:08:53,600
scanning and the other is called nx

174
00:08:53,600 --> 00:08:55,440
domain scanning so in ip scanning what

175
00:08:55,440 --> 00:08:57,360
you do is that you go to these public

176
00:08:57,360 --> 00:09:00,320
sources of ip of ip addresses like dns

177
00:09:00,320 --> 00:09:03,440
zone files or tor relay consensus data

178
00:09:03,440 --> 00:09:06,080
or ntp public servers you get all these

179
00:09:06,080 --> 00:09:07,920
addresses you try to figure out patterns

180
00:09:07,920 --> 00:09:09,760
in them and then you generate newer

181
00:09:09,760 --> 00:09:12,000
target addresses to scan so basically

182
00:09:12,000 --> 00:09:13,839
what ends up happening is that by

183
00:09:13,839 --> 00:09:15,839
learning patterns in these ip addresses

184
00:09:15,839 --> 00:09:18,240
from public sources you reduce the

185
00:09:18,240 --> 00:09:20,240
search space where you want to look for

186
00:09:20,240 --> 00:09:23,200
new ip addresses but nx domain works

187
00:09:23,200 --> 00:09:25,839
very differently so this is so nx domain

188
00:09:25,839 --> 00:09:27,839
scanning basically involves

189
00:09:27,839 --> 00:09:30,320
exploiting semantics that were described

190
00:09:30,320 --> 00:09:33,519
in rfc 80 20. so i'll go into a bit of

191
00:09:33,519 --> 00:09:34,959
how uh

192
00:09:34,959 --> 00:09:36,880
what what is defined in rfc 80 20 and

193
00:09:36,880 --> 00:09:38,000
hardworks

194
00:09:38,000 --> 00:09:40,080
but just to be just to make sure that

195
00:09:40,080 --> 00:09:42,640
although uh the the

196
00:09:42,640 --> 00:09:44,800
search space is reduced for both of

197
00:09:44,800 --> 00:09:46,160
these uh both of these scanning

198
00:09:46,160 --> 00:09:49,200
techniques for ip scanning uh the

199
00:09:49,200 --> 00:09:50,880
results are still probabilistic so you

200
00:09:50,880 --> 00:09:53,040
might find 10 you might generate 10 more

201
00:09:53,040 --> 00:09:55,600
addresses but you you still might you

202
00:09:55,600 --> 00:09:58,320
still cannot be 100 sure that they they

203
00:09:58,320 --> 00:10:00,560
are actual addresses which are allocated

204
00:10:00,560 --> 00:10:02,720
but for nx domain scanning you will

205
00:10:02,720 --> 00:10:05,040
always get to get an ip address that is

206
00:10:05,040 --> 00:10:07,040
allocated

207
00:10:07,040 --> 00:10:10,160
so what is rfc 8020 so rfc 2 8020 is

208
00:10:10,160 --> 00:10:11,920
called nx domain there really is nothing

209
00:10:11,920 --> 00:10:12,959
underneath

210
00:10:12,959 --> 00:10:15,920
so and so one of the main clauses in

211
00:10:15,920 --> 00:10:18,720
this rfc is that an nx domain response

212
00:10:18,720 --> 00:10:20,720
for a domain name means that

213
00:10:20,720 --> 00:10:22,640
no child domains underneath the kuwait

214
00:10:22,640 --> 00:10:24,880
name exist either so when you apply this

215
00:10:24,880 --> 00:10:27,040
rfc to dns reverse trees it

216
00:10:27,040 --> 00:10:28,880
unintentionally presents a side channel

217
00:10:28,880 --> 00:10:30,560
for efficient scanning of the ipv6

218
00:10:30,560 --> 00:10:32,720
address space so let's say over here if

219
00:10:32,720 --> 00:10:36,399
you if you have um the ip 6. which is

220
00:10:36,399 --> 00:10:37,519
the uh

221
00:10:37,519 --> 00:10:42,160
root for dns ipv6 reverse uh zone trees

222
00:10:42,160 --> 00:10:44,480
so let's say if if if

223
00:10:44,480 --> 00:10:47,200
my dns uh resolver is

224
00:10:47,200 --> 00:10:51,519
basically set up to reply and to uh

225
00:10:51,519 --> 00:10:54,079
reply next domain for if something does

226
00:10:54,079 --> 00:10:56,079
not exist under a t and let's say i look

227
00:10:56,079 --> 00:10:58,720
up zero dot ip6 dot arpa so i will end

228
00:10:58,720 --> 00:11:00,720
up getting an nx domain this means that

229
00:11:00,720 --> 00:11:02,800
i no longer need to care about zero dot

230
00:11:02,800 --> 00:11:06,079
ip6 or arpa so i will go to zero till e

231
00:11:06,079 --> 00:11:08,320
and when i reach f i'll finally get a no

232
00:11:08,320 --> 00:11:10,399
error but for all others i'll get an nx

233
00:11:10,399 --> 00:11:12,720
domain which means i can just cut all of

234
00:11:12,720 --> 00:11:15,360
those uh sub domains out i don't need to

235
00:11:15,360 --> 00:11:17,839
care about all of them so now i'm only

236
00:11:17,839 --> 00:11:20,079
left with f so now i can proceed with

237
00:11:20,079 --> 00:11:22,800
zero dot f dot ip6 dot arpa and i can

238
00:11:22,800 --> 00:11:24,880
just go on until i've reached the whole

239
00:11:24,880 --> 00:11:27,680
slash 128 ibv6 address

240
00:11:27,680 --> 00:11:28,560
so

241
00:11:28,560 --> 00:11:29,680
we have somebody in the queue but

242
00:11:29,680 --> 00:11:31,680
usually takes questions at the end or do

243
00:11:31,680 --> 00:11:33,680
you want to take it right now i'm happy

244
00:11:33,680 --> 00:11:37,599
to take it right now okay go ahead peter

245
00:11:38,000 --> 00:11:39,600
hi it's peter from the esec actually i

246
00:11:39,600 --> 00:11:41,839
don't mind asking in the end also but

247
00:11:41,839 --> 00:11:43,440
so my question is um

248
00:11:43,440 --> 00:11:45,440
this reverse um

249
00:11:45,440 --> 00:11:48,000
inference technique only works when

250
00:11:48,000 --> 00:11:48,959
um

251
00:11:48,959 --> 00:11:51,279
the ip addresses actually have reverse

252
00:11:51,279 --> 00:11:53,760
delegations exactly the dns i wonder if

253
00:11:53,760 --> 00:11:56,800
it's known what the fraction of that is

254
00:11:56,800 --> 00:12:00,000
so there has been prior works which kind

255
00:12:00,000 --> 00:12:00,800
of

256
00:12:00,800 --> 00:12:02,880
try to learn new addresses using these

257
00:12:02,880 --> 00:12:03,920
techniques

258
00:12:03,920 --> 00:12:04,880
and

259
00:12:04,880 --> 00:12:06,959
the amount of addresses that they

260
00:12:06,959 --> 00:12:08,800
generate so i'm not sure about the

261
00:12:08,800 --> 00:12:10,639
actual number but it was a lot but

262
00:12:10,639 --> 00:12:13,360
there's no kind of study about how many

263
00:12:13,360 --> 00:12:15,920
of the total ip addresses have a reverse

264
00:12:15,920 --> 00:12:17,600
domain attached to them but that's the

265
00:12:17,600 --> 00:12:19,279
really nice points we can kind of like

266
00:12:19,279 --> 00:12:21,519
incorporate it in future studies

267
00:12:21,519 --> 00:12:24,519
okay

268
00:12:26,880 --> 00:12:27,680
yeah

269
00:12:27,680 --> 00:12:29,839
so just to put this into perspective of

270
00:12:29,839 --> 00:12:32,480
a slash 64 i subnet so this is the

271
00:12:32,480 --> 00:12:35,279
subnet where a host resides in ipv6

272
00:12:35,279 --> 00:12:37,200
let's say i am a scanner and i want to

273
00:12:37,200 --> 00:12:39,120
find that little green dot that you see

274
00:12:39,120 --> 00:12:41,279
at the top and that's the whole that's

275
00:12:41,279 --> 00:12:44,320
the 128 ipv6 the whole ipv6 address so

276
00:12:44,320 --> 00:12:46,880
now i have two 65s over here so one on

277
00:12:46,880 --> 00:12:48,880
the right and one on the left so i know

278
00:12:48,880 --> 00:12:52,240
that my address resides in the slash 65

279
00:12:52,240 --> 00:12:54,560
on the left so i end up sending queries

280
00:12:54,560 --> 00:12:56,240
to both and what is going to end up

281
00:12:56,240 --> 00:12:57,600
happening is that the right part is

282
00:12:57,600 --> 00:12:59,519
going to return nx domain but the left

283
00:12:59,519 --> 00:13:01,519
part is going to return no error so now

284
00:13:01,519 --> 00:13:03,440
i know i only need to focus my efforts

285
00:13:03,440 --> 00:13:05,600
on the left part of it so

286
00:13:05,600 --> 00:13:07,760
i'll do the same for the slash 66 is on

287
00:13:07,760 --> 00:13:10,000
the left so what ends up happening is

288
00:13:10,000 --> 00:13:11,760
that i get an x domain for the part on

289
00:13:11,760 --> 00:13:13,360
the bottom but nowhere for the part on

290
00:13:13,360 --> 00:13:17,040
the top and i do this for slash 67's

291
00:13:17,040 --> 00:13:20,079
eights nine still i reach one slash 127s

292
00:13:20,079 --> 00:13:22,160
and in the end basically i reach the

293
00:13:22,160 --> 00:13:25,279
whole slash 128 ipv6 address space so

294
00:13:25,279 --> 00:13:26,959
what this ends up doing is that it

295
00:13:26,959 --> 00:13:29,120
reduces the number of potential probes

296
00:13:29,120 --> 00:13:32,240
from 2 to the power 64. so basically one

297
00:13:32,240 --> 00:13:34,000
for each ip address in this whole space

298
00:13:34,000 --> 00:13:36,240
down to just 64 total probes to get to

299
00:13:36,240 --> 00:13:38,240
the actual address and this is a

300
00:13:38,240 --> 00:13:40,560
significant exponential decrease in the

301
00:13:40,560 --> 00:13:42,079
amount of probes that you need to send

302
00:13:42,079 --> 00:13:46,560
to find a host inside a slash 64.

303
00:13:46,560 --> 00:13:48,240
okay so now i'll talk a bit about the

304
00:13:48,240 --> 00:13:50,160
experimental setup so

305
00:13:50,160 --> 00:13:51,760
there were a few goals that we had in

306
00:13:51,760 --> 00:13:52,639
mind

307
00:13:52,639 --> 00:13:55,040
which uh which were motivations from the

308
00:13:55,040 --> 00:13:56,560
previous studies that were trying to

309
00:13:56,560 --> 00:13:59,040
study at scanning in ipv6 so most of

310
00:13:59,040 --> 00:14:01,680
them were basically based on studying

311
00:14:01,680 --> 00:14:04,639
ipv6 scanning in darknets or

312
00:14:04,639 --> 00:14:05,839
from the vantage point of an

313
00:14:05,839 --> 00:14:07,839
authoritative dns server

314
00:14:07,839 --> 00:14:09,920
but the problems with that was that most

315
00:14:09,920 --> 00:14:12,240
of the scanning activity they got was as

316
00:14:12,240 --> 00:14:15,839
a result of ipv6 misconfigurations or

317
00:14:15,839 --> 00:14:18,639
they could not link the activity inside

318
00:14:18,639 --> 00:14:20,880
the ipv6 address space to the scanning

319
00:14:20,880 --> 00:14:23,120
activity that came in so for this

320
00:14:23,120 --> 00:14:25,360
experiment we wanted to mimic an active

321
00:14:25,360 --> 00:14:27,040
ipv6 address space

322
00:14:27,040 --> 00:14:28,720
capture actual scanning traffic so

323
00:14:28,720 --> 00:14:30,959
nothing from its configurations and link

324
00:14:30,959 --> 00:14:33,199
scanning activity to the services that

325
00:14:33,199 --> 00:14:36,399
were deployed in this uh in this ipv6

326
00:14:36,399 --> 00:14:38,240
address space

327
00:14:38,240 --> 00:14:40,000
so

328
00:14:40,000 --> 00:14:42,160
so just to give you an overview of how

329
00:14:42,160 --> 00:14:45,199
my experimental setup uh so

330
00:14:45,199 --> 00:14:47,199
the grid that you see so this was

331
00:14:47,199 --> 00:14:48,880
supposed to come up one by one but i

332
00:14:48,880 --> 00:14:50,560
don't know what happened so the grid

333
00:14:50,560 --> 00:14:51,600
that you see

334
00:14:51,600 --> 00:14:54,639
so this is divided up into four slash 58

335
00:14:54,639 --> 00:14:56,560
so one of them is used to run our

336
00:14:56,560 --> 00:14:58,160
services and the other three are

337
00:14:58,160 --> 00:14:59,839
controlled ones so nothing was ever run

338
00:14:59,839 --> 00:15:02,000
in them and these are all the services

339
00:15:02,000 --> 00:15:03,680
that we run for the entirety of our

340
00:15:03,680 --> 00:15:05,440
experiments so the reason for running

341
00:15:05,440 --> 00:15:07,920
these services is basically to incite uh

342
00:15:07,920 --> 00:15:09,920
scanners to tell them that yes this is

343
00:15:09,920 --> 00:15:12,480
an active address space and you you

344
00:15:12,480 --> 00:15:14,320
should look for stuff in here because we

345
00:15:14,320 --> 00:15:16,160
kind of give them a signal that yeah we

346
00:15:16,160 --> 00:15:17,519
are running stuff in here and you're

347
00:15:17,519 --> 00:15:19,279
more and you're likely to find more

348
00:15:19,279 --> 00:15:21,199
addresses here because you just simply

349
00:15:21,199 --> 00:15:23,600
cannot brute force everything

350
00:15:23,600 --> 00:15:26,399
so we capture all dns and reverse dns

351
00:15:26,399 --> 00:15:29,759
lookup logs and all the incoming traffic

352
00:15:29,759 --> 00:15:32,240
from a router that was appointed here

353
00:15:32,240 --> 00:15:34,480
and then we had two types of address

354
00:15:34,480 --> 00:15:36,800
assignments for each of our services so

355
00:15:36,800 --> 00:15:39,199
each service was deployed

356
00:15:39,199 --> 00:15:40,720
had four instances

357
00:15:40,720 --> 00:15:42,560
and they were never deployed in the same

358
00:15:42,560 --> 00:15:45,279
64 subnet and not in this in adjacent

359
00:15:45,279 --> 00:15:46,320
subnets

360
00:15:46,320 --> 00:15:49,440
and each uh service had two lower byte

361
00:15:49,440 --> 00:15:50,880
assignments and two random assignments

362
00:15:50,880 --> 00:15:53,040
so lower byte assignments are addresses

363
00:15:53,040 --> 00:15:54,560
that people put up manually just to

364
00:15:54,560 --> 00:15:56,240
remember ipv6 addresses so they will

365
00:15:56,240 --> 00:15:58,000
have a lot of zeros in the start and

366
00:15:58,000 --> 00:15:59,680
like a couple nibbles at the end with a

367
00:15:59,680 --> 00:16:01,680
value like one two just to remember the

368
00:16:01,680 --> 00:16:03,600
address and the random assignment does

369
00:16:03,600 --> 00:16:05,279
not follow this pattern so it's a random

370
00:16:05,279 --> 00:16:07,519
string of numbers throughout the subnet

371
00:16:07,519 --> 00:16:11,199
throughout the interface identifier

372
00:16:11,519 --> 00:16:12,399
okay

373
00:16:12,399 --> 00:16:13,199
yeah

374
00:16:13,199 --> 00:16:14,880
so some of the key observations that we

375
00:16:14,880 --> 00:16:18,480
saw that uh so we do so our method of

376
00:16:18,480 --> 00:16:20,639
measuring scanning activity so we did

377
00:16:20,639 --> 00:16:23,040
see scanning activity even before we ran

378
00:16:23,040 --> 00:16:24,639
any of our services

379
00:16:24,639 --> 00:16:26,720
but the main point was that scanning

380
00:16:26,720 --> 00:16:28,720
activity increases significantly after

381
00:16:28,720 --> 00:16:30,720
services were deployed and this increase

382
00:16:30,720 --> 00:16:33,519
was not only not in terms of the number

383
00:16:33,519 --> 00:16:35,600
of scanners but also in the number of

384
00:16:35,600 --> 00:16:38,000
probes that we see

385
00:16:38,000 --> 00:16:40,480
and the main uh observation that we made

386
00:16:40,480 --> 00:16:42,560
was that nx domain scanners are using

387
00:16:42,560 --> 00:16:44,639
the side channel very very effectively

388
00:16:44,639 --> 00:16:46,560
so in in this graph you can see that we

389
00:16:46,560 --> 00:16:48,160
have the duration of our experiment on

390
00:16:48,160 --> 00:16:49,360
the y-axis

391
00:16:49,360 --> 00:16:52,959
and uh the subnet id is on the x axis so

392
00:16:52,959 --> 00:16:56,800
0 0 to f 8 so it's 256 in x

393
00:16:56,800 --> 00:16:59,040
so the green highlighted portion

394
00:16:59,040 --> 00:17:00,560
basically

395
00:17:00,560 --> 00:17:02,800
shows our slash 58 which had services

396
00:17:02,800 --> 00:17:04,720
running in them and the other part is

397
00:17:04,720 --> 00:17:06,000
the control part

398
00:17:06,000 --> 00:17:07,520
so

399
00:17:07,520 --> 00:17:09,839
this is the part before any of our

400
00:17:09,839 --> 00:17:11,599
services were deployed so right now you

401
00:17:11,599 --> 00:17:13,439
can see that nx domain scanners are kind

402
00:17:13,439 --> 00:17:15,359
of like guessing even the ip scanners

403
00:17:15,359 --> 00:17:17,839
are guessing but nx domain scanners

404
00:17:17,839 --> 00:17:19,520
probably think that there is something

405
00:17:19,520 --> 00:17:21,119
in the start and the end of our subnets

406
00:17:21,119 --> 00:17:22,799
and ip scanners think that there can be

407
00:17:22,799 --> 00:17:25,280
anything everywhere but the important

408
00:17:25,280 --> 00:17:26,640
part comes in when we deploy our

409
00:17:26,640 --> 00:17:29,039
services so as you can see in the for

410
00:17:29,039 --> 00:17:31,200
the nx domain scanners they never go

411
00:17:31,200 --> 00:17:34,240
outside the slash 58 line so they know

412
00:17:34,240 --> 00:17:36,080
exactly where the services were deployed

413
00:17:36,080 --> 00:17:38,720
and they stay inside that they because

414
00:17:38,720 --> 00:17:39,440
to

415
00:17:39,440 --> 00:17:41,200
basically cancel out every other subnet

416
00:17:41,200 --> 00:17:43,360
they just need to send in one request to

417
00:17:43,360 --> 00:17:45,360
each of those subnets if that returns an

418
00:17:45,360 --> 00:17:47,280
nx domain they can just cancel that out

419
00:17:47,280 --> 00:17:48,960
so they don't even need to check them so

420
00:17:48,960 --> 00:17:51,039
for the entirety of our experiment they

421
00:17:51,039 --> 00:17:53,919
only stay within that slash 58 and on

422
00:17:53,919 --> 00:17:55,200
the other hand

423
00:17:55,200 --> 00:17:57,760
ipv6 scanners they constantly search the

424
00:17:57,760 --> 00:18:01,200
entire 256 uh subnets trying to look for

425
00:18:01,200 --> 00:18:03,520
newer addresses so this basically tells

426
00:18:03,520 --> 00:18:05,919
us that this uh

427
00:18:05,919 --> 00:18:09,440
the rfc 8020 semantic is actually being

428
00:18:09,440 --> 00:18:11,840
exploited by a lot of scanners right now

429
00:18:11,840 --> 00:18:12,640
which

430
00:18:12,640 --> 00:18:16,400
reduces their search space by a lot

431
00:18:16,559 --> 00:18:18,720
and uh this is our results for all of

432
00:18:18,720 --> 00:18:20,720
the services that we ran

433
00:18:20,720 --> 00:18:23,360
so just to give you uh just to like

434
00:18:23,360 --> 00:18:25,360
explain what this means so for example

435
00:18:25,360 --> 00:18:28,160
if you see wget and 511 that means that

436
00:18:28,160 --> 00:18:30,799
the mean number of scans per subnet that

437
00:18:30,799 --> 00:18:33,480
was running the service that you get got

438
00:18:33,480 --> 00:18:35,919
511 more scans

439
00:18:35,919 --> 00:18:38,559
uh after the service was run as compared

440
00:18:38,559 --> 00:18:39,760
to before

441
00:18:39,760 --> 00:18:41,039
so

442
00:18:41,039 --> 00:18:43,520
delta diff basically means that the

443
00:18:43,520 --> 00:18:45,679
increase in scanning activity was within

444
00:18:45,679 --> 00:18:47,440
the treatment subnets so where the

445
00:18:47,440 --> 00:18:49,760
services were running and delta c says

446
00:18:49,760 --> 00:18:51,760
that this increase in scanning activity

447
00:18:51,760 --> 00:18:54,160
was in uh control subnets where nothing

448
00:18:54,160 --> 00:18:56,480
was running so some of the key takeaways

449
00:18:56,480 --> 00:18:59,280
we have are that that nx domain scanners

450
00:18:59,280 --> 00:19:01,360
target treatment subnets for almost all

451
00:19:01,360 --> 00:19:02,640
the services

452
00:19:02,640 --> 00:19:05,200
they target control subnets much less

453
00:19:05,200 --> 00:19:08,160
and ip scanners kind of exhibit mixed

454
00:19:08,160 --> 00:19:10,000
behavior they target both treatment and

455
00:19:10,000 --> 00:19:11,440
control subnets because they don't

456
00:19:11,440 --> 00:19:13,120
really have an idea every time they want

457
00:19:13,120 --> 00:19:15,200
to scan something they have to go deeper

458
00:19:15,200 --> 00:19:17,200
and deeper inside the subnets themselves

459
00:19:17,200 --> 00:19:18,640
to figure out if there's an address in

460
00:19:18,640 --> 00:19:20,559
it or not on the other hand nx domain

461
00:19:20,559 --> 00:19:22,400
can just send one request if it gets an

462
00:19:22,400 --> 00:19:24,320
nx domain it can just wipe out the

463
00:19:24,320 --> 00:19:25,919
entire subject

464
00:19:25,919 --> 00:19:28,320
and nx domain scanners target different

465
00:19:28,320 --> 00:19:30,480
different services than ip scanners so

466
00:19:30,480 --> 00:19:33,039
as you can see all of this services are

467
00:19:33,039 --> 00:19:34,960
kind of targeted by nx domain scanners

468
00:19:34,960 --> 00:19:37,120
on the left but iep scanners only seem

469
00:19:37,120 --> 00:19:40,880
to care about dns probes ntp servers and

470
00:19:40,880 --> 00:19:43,919
dns zone files

471
00:19:44,160 --> 00:19:46,000
so some of the key takeaways we have are

472
00:19:46,000 --> 00:19:48,240
that analyzing dark traffic is really

473
00:19:48,240 --> 00:19:49,919
not the best way to study scanner

474
00:19:49,919 --> 00:19:52,080
behavior particularly in v6 where you

475
00:19:52,080 --> 00:19:54,000
need to give out a signal that yes there

476
00:19:54,000 --> 00:19:55,520
is something active going on in this

477
00:19:55,520 --> 00:19:58,320
address space to invite those scanners

478
00:19:58,320 --> 00:20:00,160
and then most scanners aren't really

479
00:20:00,160 --> 00:20:03,280
using uh nx domain scanning but we think

480
00:20:03,280 --> 00:20:05,440
that this is only a matter of time and

481
00:20:05,440 --> 00:20:07,600
one question i pose here is that is it

482
00:20:07,600 --> 00:20:09,440
is the efficiency from nx domain

483
00:20:09,440 --> 00:20:11,520
responses worth the loss of defense

484
00:20:11,520 --> 00:20:14,400
against scanning so so rfc 8020 was

485
00:20:14,400 --> 00:20:16,159
initially introduced to improve the

486
00:20:16,159 --> 00:20:18,799
efficiency of caching of dns trees

487
00:20:18,799 --> 00:20:22,480
so if it if site channel gives you

488
00:20:22,480 --> 00:20:24,320
some much easier access to scanning is

489
00:20:24,320 --> 00:20:26,480
it really worth it and then added

490
00:20:26,480 --> 00:20:27,840
discovery methods are very different

491
00:20:27,840 --> 00:20:30,080
than we expected we expected that people

492
00:20:30,080 --> 00:20:32,159
will go to uh scanners will go to these

493
00:20:32,159 --> 00:20:34,159
public lists of ip addresses like tor

494
00:20:34,159 --> 00:20:36,559
ntp get addresses from there and then

495
00:20:36,559 --> 00:20:38,480
scan but they don't really do that they

496
00:20:38,480 --> 00:20:41,919
mainly rely on open dns resolvers

497
00:20:41,919 --> 00:20:43,520
and then neighboring networks should

498
00:20:43,520 --> 00:20:45,360
expect scanning activity so let's say

499
00:20:45,360 --> 00:20:47,520
for 64 subnet has something running in

500
00:20:47,520 --> 00:20:50,559
them we expect that the neighboring 64s

501
00:20:50,559 --> 00:20:52,640
are much more likely to receive scanning

502
00:20:52,640 --> 00:20:55,200
traffic uh due to something running in

503
00:20:55,200 --> 00:20:57,120
that 64.

504
00:20:57,120 --> 00:21:00,000
and so we have a lot more uh

505
00:21:00,000 --> 00:21:01,840
takeaways and a lot more results but due

506
00:21:01,840 --> 00:21:03,440
to time constraints i couldn't put those

507
00:21:03,440 --> 00:21:05,760
in so if anyone wants to discuss those

508
00:21:05,760 --> 00:21:08,400
i'll be happy to do it and if anyone has

509
00:21:08,400 --> 00:21:10,559
any questions and comments i would love

510
00:21:10,559 --> 00:21:12,799
to take them thank you yeah thanks a lot

511
00:21:12,799 --> 00:21:14,840
and we do have a cue you can see it over

512
00:21:14,840 --> 00:21:17,039
there it all virtually stays so

513
00:21:17,039 --> 00:21:19,679
alexander

514
00:21:19,760 --> 00:21:20,960
thank you thanks for interesting

515
00:21:20,960 --> 00:21:23,520
presentation um alexander mayor from

516
00:21:23,520 --> 00:21:25,919
nikkito jt i was wondering did you also

517
00:21:25,919 --> 00:21:27,440
look at whether

518
00:21:27,440 --> 00:21:29,600
all name servers actually implement rsc

519
00:21:29,600 --> 00:21:31,360
8020 because that has been a big

520
00:21:31,360 --> 00:21:34,080
discussion in the dns working groups and

521
00:21:34,080 --> 00:21:35,840
actually you would prevent that

522
00:21:35,840 --> 00:21:37,840
malicious activity

523
00:21:37,840 --> 00:21:40,480
by having a dns server that is not

524
00:21:40,480 --> 00:21:42,559
compliant to rsc8020 do you have any

525
00:21:42,559 --> 00:21:44,640
figures on that so

526
00:21:44,640 --> 00:21:46,159
the only thing that we made sure for our

527
00:21:46,159 --> 00:21:48,400
experiment was that our dns server was

528
00:21:48,400 --> 00:21:50,320
implementing rfc820 because we want to

529
00:21:50,320 --> 00:21:52,480
figure out whether people are

530
00:21:52,480 --> 00:21:54,720
kind of looking at are exploiting the

531
00:21:54,720 --> 00:21:57,039
semantic but we have but we did not look

532
00:21:57,039 --> 00:21:58,799
into how many servers out in the wild

533
00:21:58,799 --> 00:22:00,960
are using this yeah okay because like i

534
00:22:00,960 --> 00:22:03,000
i suppose that many name servers for

535
00:22:03,000 --> 00:22:05,120
ipv6.ourpub would actually be some kind

536
00:22:05,120 --> 00:22:07,919
of database generated yeah scans that

537
00:22:07,919 --> 00:22:09,600
could easily fake

538
00:22:09,600 --> 00:22:11,120
things that's true that's true that can

539
00:22:11,120 --> 00:22:13,120
be done interesting operational

540
00:22:13,120 --> 00:22:14,799
uh yeah yeah thank you that's good i

541
00:22:14,799 --> 00:22:17,120
thank you

542
00:22:17,520 --> 00:22:21,840
uh rashford so also on 80 20 um

543
00:22:21,840 --> 00:22:22,960
pretty much

544
00:22:22,960 --> 00:22:24,159
uh

545
00:22:24,159 --> 00:22:26,159
it was a long time to get this actually

546
00:22:26,159 --> 00:22:29,520
done to have the kind of answers be more

547
00:22:29,520 --> 00:22:32,000
kind of uh the next domain answers to to

548
00:22:32,000 --> 00:22:34,400
cover what is underneath and if you

549
00:22:34,400 --> 00:22:36,720
don't want to have something in in the

550
00:22:36,720 --> 00:22:38,480
reverse three either just don't put it

551
00:22:38,480 --> 00:22:40,240
in or put everything in what's that

552
00:22:40,240 --> 00:22:42,000
because that's what a lot of people do

553
00:22:42,000 --> 00:22:45,600
exactly so i mean i would not go back to

554
00:22:45,600 --> 00:22:48,320
not having 80 20. yeah so this is one of

555
00:22:48,320 --> 00:22:50,559
the defense techniques that we actually

556
00:22:50,559 --> 00:22:52,720
want to propose in this paper that

557
00:22:52,720 --> 00:22:55,360
just if you want to comply to rc 80 20

558
00:22:55,360 --> 00:22:57,679
just make sure you put off the scanners

559
00:22:57,679 --> 00:22:59,520
because this technique has been also

560
00:22:59,520 --> 00:23:01,520
discovered in many other papers that you

561
00:23:01,520 --> 00:23:03,280
can discover a lot of ip addresses using

562
00:23:03,280 --> 00:23:05,360
this so one of the defense mechanisms

563
00:23:05,360 --> 00:23:07,919
against scanning would be that just

564
00:23:07,919 --> 00:23:09,280
everything that someone requests for

565
00:23:09,280 --> 00:23:11,039
just give an answer for that just given

566
00:23:11,039 --> 00:23:13,679
no error for that and yeah that's

567
00:23:13,679 --> 00:23:16,480
all right thank you

568
00:23:16,640 --> 00:23:18,559
um this is peter koh hi

569
00:23:18,559 --> 00:23:20,960
uh again on 80 20. um

570
00:23:20,960 --> 00:23:23,039
i'm i'm wondering a bit the

571
00:23:23,039 --> 00:23:25,360
the scanning technique was actually

572
00:23:25,360 --> 00:23:28,799
described as early as the what 2005 and

573
00:23:28,799 --> 00:23:31,440
maybe before 2005 was when roy irons and

574
00:23:31,440 --> 00:23:33,440
i had a paper about this and a couple of

575
00:23:33,440 --> 00:23:34,480
other things

576
00:23:34,480 --> 00:23:36,240
and also we described some mitigation

577
00:23:36,240 --> 00:23:38,320
techniques but this was much much before

578
00:23:38,320 --> 00:23:41,840
80 20 80 20 suggests that

579
00:23:41,840 --> 00:23:44,640
resolvers implement the semantics but

580
00:23:44,640 --> 00:23:46,400
conceptually these semantics were

581
00:23:46,400 --> 00:23:48,480
already there so if you buy pathways

582
00:23:48,480 --> 00:23:49,760
over that scanning technique is

583
00:23:49,760 --> 00:23:51,120
available anyway

584
00:23:51,120 --> 00:23:54,000
um so any any recommendation in

585
00:23:54,000 --> 00:23:58,159
dampening or or mitigating 80 20 um is

586
00:23:58,159 --> 00:24:00,320
probably not achieving uh

587
00:24:00,320 --> 00:24:02,240
very much because you can always bypass

588
00:24:02,240 --> 00:24:04,480
that and do the scanning but happy to

589
00:24:04,480 --> 00:24:06,640
take that uh yeah yeah sure

590
00:24:06,640 --> 00:24:08,799
so just to like

591
00:24:08,799 --> 00:24:10,960
talk a little about it so what uh the

592
00:24:10,960 --> 00:24:13,039
previous speaker suggested that you can

593
00:24:13,039 --> 00:24:14,240
just basically

594
00:24:14,240 --> 00:24:16,480
return everything something for

595
00:24:16,480 --> 00:24:18,240
everything that someone asks so that can

596
00:24:18,240 --> 00:24:19,679
be one of the defense techniques but

597
00:24:19,679 --> 00:24:21,440
obviously you can still kind of bypass

598
00:24:21,440 --> 00:24:22,320
that

599
00:24:22,320 --> 00:24:25,440
but i'll be happy to take it off right

600
00:24:25,440 --> 00:24:26,799
uh petersburg

601
00:24:26,799 --> 00:24:28,240
the thing is that the defense is

602
00:24:28,240 --> 00:24:29,919
actually one line in the zone file

603
00:24:29,919 --> 00:24:31,760
because you can define wildcard in the

604
00:24:31,760 --> 00:24:33,039
reverse tree

605
00:24:33,039 --> 00:24:35,440
so everything is compliant but because

606
00:24:35,440 --> 00:24:38,000
you define the wildcard you can return

607
00:24:38,000 --> 00:24:40,159
yeah you know just an i don't know txt

608
00:24:40,159 --> 00:24:43,120
record saying well nothing is here but

609
00:24:43,120 --> 00:24:45,039
this world card will prevent synthesis

610
00:24:45,039 --> 00:24:47,840
of the next domain yeah so please don't

611
00:24:47,840 --> 00:24:51,200
say that rfc 8020 is wrong it's correct

612
00:24:51,200 --> 00:24:52,799
but you have to configure the zone file

613
00:24:52,799 --> 00:24:55,679
correctly so there's a study by tobias

614
00:24:55,679 --> 00:24:58,159
feiberg and he basically discovered that

615
00:24:58,159 --> 00:25:01,200
think addresses in the range of

616
00:25:01,200 --> 00:25:03,440
a couple million that were previously

617
00:25:03,440 --> 00:25:05,760
not known from other scanning techniques

618
00:25:05,760 --> 00:25:06,559
so

619
00:25:06,559 --> 00:25:08,880
i would imagine that in the wild this is

620
00:25:08,880 --> 00:25:10,640
something that people are not

621
00:25:10,640 --> 00:25:13,120
configuring in a way that you just

622
00:25:13,120 --> 00:25:15,520
suggested so in this paper we want to

623
00:25:15,520 --> 00:25:17,520
basically tell them that please just do

624
00:25:17,520 --> 00:25:19,360
that it's very simple you can achieve a

625
00:25:19,360 --> 00:25:21,279
lot of a lot more uh defense against

626
00:25:21,279 --> 00:25:24,400
scanning yeah

627
00:25:24,880 --> 00:25:26,799
okay thank you a lot all right thank you

628
00:25:26,799 --> 00:25:28,960
so much nice to have you here um and

629
00:25:28,960 --> 00:25:31,520
we're switching over to some dns related

630
00:25:31,520 --> 00:25:34,240
topics our next speaker is morocco muta

631
00:25:34,240 --> 00:25:36,159
and you should already be set up and can

632
00:25:36,159 --> 00:25:37,520
start right

633
00:25:37,520 --> 00:25:40,159
yes uh can you hear me okay

634
00:25:40,159 --> 00:25:42,720
yeah we hear you very well perfect

635
00:25:42,720 --> 00:25:44,880
um yeah hi and welcome to my

636
00:25:44,880 --> 00:25:47,279
presentation about uh the dynastic

637
00:25:47,279 --> 00:25:49,279
deployment metrics research this is

638
00:25:49,279 --> 00:25:51,520
actually not a measurement study but a

639
00:25:51,520 --> 00:25:54,159
study about measurement studies

640
00:25:54,159 --> 00:25:58,080
and this uh was initiated by icann and

641
00:25:58,080 --> 00:25:59,679
we are carrying out the study currently

642
00:25:59,679 --> 00:26:00,720
together with

643
00:26:00,720 --> 00:26:03,279
the folks from anatlapse

644
00:26:03,279 --> 00:26:05,200
in short the goal of this research is to

645
00:26:05,200 --> 00:26:08,000
identify metrics and techniques that can

646
00:26:08,000 --> 00:26:10,559
be used to measure dns deployment

647
00:26:10,559 --> 00:26:12,880
now and in the future

648
00:26:12,880 --> 00:26:16,159
and finally to recommend an icann a

649
00:26:16,159 --> 00:26:18,400
metrics that should be measured

650
00:26:18,400 --> 00:26:20,799
to obtain the most comprehensive view of

651
00:26:20,799 --> 00:26:23,520
dnsec deployment on the internet

652
00:26:23,520 --> 00:26:26,240
and today i would like to give you some

653
00:26:26,240 --> 00:26:28,320
background about this project

654
00:26:28,320 --> 00:26:30,240
share some of the challenges that we

655
00:26:30,240 --> 00:26:33,440
face with categorizing and inventorizing

656
00:26:33,440 --> 00:26:35,760
all these different metrics and finally

657
00:26:35,760 --> 00:26:37,520
to hear from the measurement community

658
00:26:37,520 --> 00:26:39,039
which they think are the most important

659
00:26:39,039 --> 00:26:41,440
metrics to measure dns deployment and

660
00:26:41,440 --> 00:26:45,520
which are the most adequate techniques

661
00:26:47,440 --> 00:26:51,279
let's dive right into the challenges

662
00:26:51,279 --> 00:26:53,200
the first challenge is that dns

663
00:26:53,200 --> 00:26:55,520
deployment is a very wide field

664
00:26:55,520 --> 00:26:56,480
if you

665
00:26:56,480 --> 00:26:58,320
start thinking about metrics to measure

666
00:26:58,320 --> 00:27:01,120
dns deployment and you probably come up

667
00:27:01,120 --> 00:27:03,039
right away with two things how many

668
00:27:03,039 --> 00:27:04,960
domain names have

669
00:27:04,960 --> 00:27:07,679
are signed with dnsec at the root top

670
00:27:07,679 --> 00:27:09,440
level domain names and second level

671
00:27:09,440 --> 00:27:11,200
domain names and so on

672
00:27:11,200 --> 00:27:12,159
and

673
00:27:12,159 --> 00:27:14,799
how many resolvers actually validate the

674
00:27:14,799 --> 00:27:17,760
nsx signatures

675
00:27:17,760 --> 00:27:20,799
but if you think about this only a

676
00:27:20,799 --> 00:27:23,039
little bit longer then you already come

677
00:27:23,039 --> 00:27:25,520
up with many other metrics

678
00:27:25,520 --> 00:27:26,799
on the signing side that could for

679
00:27:26,799 --> 00:27:28,159
example include

680
00:27:28,159 --> 00:27:30,080
what kind of algorithms

681
00:27:30,080 --> 00:27:31,279
are

682
00:27:31,279 --> 00:27:34,240
being used for assigning a domain name

683
00:27:34,240 --> 00:27:35,440
or

684
00:27:35,440 --> 00:27:37,039
is the domain name

685
00:27:37,039 --> 00:27:38,640
does the domain enroll its keys

686
00:27:38,640 --> 00:27:40,080
frequently

687
00:27:40,080 --> 00:27:42,960
is it using nsg and x3

688
00:27:42,960 --> 00:27:45,679
um or does it support some other kind of

689
00:27:45,679 --> 00:27:47,520
dns automation

690
00:27:47,520 --> 00:27:49,520
on the validation side you again might

691
00:27:49,520 --> 00:27:51,200
think about the algorithm what kind of

692
00:27:51,200 --> 00:27:53,520
algorithm does the resolver support

693
00:27:53,520 --> 00:27:55,120
what kind of trust anchors does it have

694
00:27:55,120 --> 00:27:57,440
configured does it support some kind of

695
00:27:57,440 --> 00:27:59,520
signaling protocols and so on and so

696
00:27:59,520 --> 00:28:02,320
forth

697
00:28:02,320 --> 00:28:03,600
additionally

698
00:28:03,600 --> 00:28:06,799
the dnsc protocol is still

699
00:28:06,799 --> 00:28:09,279
being extended or at least

700
00:28:09,279 --> 00:28:10,720
related

701
00:28:10,720 --> 00:28:12,000
extensions

702
00:28:12,000 --> 00:28:14,320
are being deployed and developed this

703
00:28:14,320 --> 00:28:16,559
could for example include

704
00:28:16,559 --> 00:28:18,880
cds and cdns key records

705
00:28:18,880 --> 00:28:20,240
where

706
00:28:20,240 --> 00:28:22,640
operators can automate the deployment of

707
00:28:22,640 --> 00:28:24,320
dns sec

708
00:28:24,320 --> 00:28:25,600
so

709
00:28:25,600 --> 00:28:27,840
do these metrics do these attributes

710
00:28:27,840 --> 00:28:30,640
also should be measured in order to get

711
00:28:30,640 --> 00:28:32,240
a

712
00:28:32,240 --> 00:28:35,840
idea about dnsec deployment

713
00:28:35,840 --> 00:28:37,200
and finally

714
00:28:37,200 --> 00:28:38,240
we have the challenge that there are

715
00:28:38,240 --> 00:28:41,840
also other protocols related to dns sec

716
00:28:41,840 --> 00:28:44,000
first thing that comes into mind is dane

717
00:28:44,000 --> 00:28:45,440
should it also be

718
00:28:45,440 --> 00:28:46,960
taking into account when measuring

719
00:28:46,960 --> 00:28:50,000
dynastic deployment

720
00:28:51,120 --> 00:28:52,559
the second challenge

721
00:28:52,559 --> 00:28:56,960
is related to the measurement technique

722
00:28:56,960 --> 00:28:59,679
each or almost each of these metrics can

723
00:28:59,679 --> 00:29:02,159
be measured in different ways

724
00:29:02,159 --> 00:29:03,679
uh when we think about for example

725
00:29:03,679 --> 00:29:06,080
whether resolve is invalidating or not

726
00:29:06,080 --> 00:29:08,399
and then we could use active

727
00:29:08,399 --> 00:29:11,679
measurements for example from wipe atlas

728
00:29:11,679 --> 00:29:12,559
and

729
00:29:12,559 --> 00:29:14,480
issue queries to the results of these

730
00:29:14,480 --> 00:29:17,120
web atlas clients and then see what kind

731
00:29:17,120 --> 00:29:19,360
of responses they get

732
00:29:19,360 --> 00:29:22,799
another approach would be to look into

733
00:29:22,799 --> 00:29:24,880
named traffic collected at authoritative

734
00:29:24,880 --> 00:29:26,559
name server for example see whether

735
00:29:26,559 --> 00:29:27,760
resolver

736
00:29:27,760 --> 00:29:31,760
is trying to is requesting dns records

737
00:29:31,760 --> 00:29:32,720
and

738
00:29:32,720 --> 00:29:35,360
from that derive whether resolver might

739
00:29:35,360 --> 00:29:37,120
validate or not

740
00:29:37,120 --> 00:29:39,279
and both of these approaches have

741
00:29:39,279 --> 00:29:41,760
its uh pros and cons

742
00:29:41,760 --> 00:29:44,080
then of course we can not only look into

743
00:29:44,080 --> 00:29:45,600
different recursive resolvers but we

744
00:29:45,600 --> 00:29:47,679
might want to once you look into the

745
00:29:47,679 --> 00:29:51,840
client side whether a client is using

746
00:29:51,840 --> 00:29:55,600
only validating resources or not

747
00:29:55,600 --> 00:29:57,600
other metrics might

748
00:29:57,600 --> 00:29:59,760
include whether we rely on a measurement

749
00:29:59,760 --> 00:30:01,039
platform like the mentioned by

750
00:30:01,039 --> 00:30:03,039
battleless or we

751
00:30:03,039 --> 00:30:05,760
use our own measurements setup where we

752
00:30:05,760 --> 00:30:07,600
use the standard libraries and use our

753
00:30:07,600 --> 00:30:09,679
vantage points

754
00:30:09,679 --> 00:30:12,000
that we have control of or we use some

755
00:30:12,000 --> 00:30:15,039
kind of hack where if we for example use

756
00:30:15,039 --> 00:30:16,880
a proxy network

757
00:30:16,880 --> 00:30:18,240
and then

758
00:30:18,240 --> 00:30:21,200
use this proxy network to issue queries

759
00:30:21,200 --> 00:30:24,399
from these clients

760
00:30:24,559 --> 00:30:26,720
other aspects might

761
00:30:26,720 --> 00:30:28,320
include whether we have access to raw

762
00:30:28,320 --> 00:30:31,679
data this or whether we actually have

763
00:30:31,679 --> 00:30:33,520
access to aggregated data this for

764
00:30:33,520 --> 00:30:34,880
example

765
00:30:34,880 --> 00:30:36,399
includes

766
00:30:36,399 --> 00:30:37,840
our asset data

767
00:30:37,840 --> 00:30:40,159
collected from the root service

768
00:30:40,159 --> 00:30:42,000
and whether we have full control of the

769
00:30:42,000 --> 00:30:43,919
measurements or whether we rely on a

770
00:30:43,919 --> 00:30:45,840
third party to collect the measurements

771
00:30:45,840 --> 00:30:48,559
and all these different

772
00:30:48,559 --> 00:30:50,080
attributes of these measurement

773
00:30:50,080 --> 00:30:51,120
techniques

774
00:30:51,120 --> 00:30:53,919
have again influence on the metrics that

775
00:30:53,919 --> 00:30:56,799
are being collected

776
00:30:56,799 --> 00:30:58,880
so for this reason um in order to

777
00:30:58,880 --> 00:31:01,519
address these challenges we

778
00:31:01,519 --> 00:31:04,240
have a the following approach the first

779
00:31:04,240 --> 00:31:05,200
is to

780
00:31:05,200 --> 00:31:07,600
get a very broad overview of which

781
00:31:07,600 --> 00:31:09,679
metrics have been measured so far by the

782
00:31:09,679 --> 00:31:11,840
community and there we mean not only the

783
00:31:11,840 --> 00:31:14,080
academic community where we look into

784
00:31:14,080 --> 00:31:16,559
academic papers at more the high level

785
00:31:16,559 --> 00:31:19,679
high tier conferences and journals

786
00:31:19,679 --> 00:31:22,480
but we also look into

787
00:31:22,480 --> 00:31:24,000
more conferences

788
00:31:24,000 --> 00:31:25,919
where industry partners are also

789
00:31:25,919 --> 00:31:28,000
presenting so that we not only cover the

790
00:31:28,000 --> 00:31:30,720
people that actually publish their

791
00:31:30,720 --> 00:31:33,360
studies at academic conferences and

792
00:31:33,360 --> 00:31:35,760
journals but also

793
00:31:35,760 --> 00:31:36,960
other

794
00:31:36,960 --> 00:31:38,880
contributions as well

795
00:31:38,880 --> 00:31:40,559
these conferences they include live

796
00:31:40,559 --> 00:31:42,960
conferences of course icon dnsec

797
00:31:42,960 --> 00:31:45,760
workshops work and so forth

798
00:31:45,760 --> 00:31:47,279
and then we want to carry out a gap

799
00:31:47,279 --> 00:31:49,279
analysis where we want to understand

800
00:31:49,279 --> 00:31:51,360
whether there are still metrics that

801
00:31:51,360 --> 00:31:53,440
have been not covered by

802
00:31:53,440 --> 00:31:55,840
related work so far

803
00:31:55,840 --> 00:31:58,559
that we use basically our own expertise

804
00:31:58,559 --> 00:32:00,960
in dns and dnsec measurements

805
00:32:00,960 --> 00:32:03,200
and finally to develop an assessment

806
00:32:03,200 --> 00:32:04,640
framework to assess the different

807
00:32:04,640 --> 00:32:06,720
measurement techniques and to understand

808
00:32:06,720 --> 00:32:08,880
which of these measurement techniques

809
00:32:08,880 --> 00:32:11,440
are most useful to measure a certain

810
00:32:11,440 --> 00:32:14,399
metric

811
00:32:14,399 --> 00:32:16,960
i want to say a few words about the

812
00:32:16,960 --> 00:32:19,360
assessment framework that's probably a

813
00:32:19,360 --> 00:32:22,159
bit a big word but

814
00:32:22,159 --> 00:32:24,080
in the end we of course want to focus on

815
00:32:24,080 --> 00:32:26,080
the coverage how many for example

816
00:32:26,080 --> 00:32:28,559
resolvers can we potentially cover with

817
00:32:28,559 --> 00:32:30,240
a certain measurement technique or how

818
00:32:30,240 --> 00:32:32,799
many domains we can we potentially cover

819
00:32:32,799 --> 00:32:36,080
but we think in order to have

820
00:32:36,080 --> 00:32:37,919
measurements that's

821
00:32:37,919 --> 00:32:40,880
measured dns deployment

822
00:32:40,880 --> 00:32:43,120
that are also useful for a broader

823
00:32:43,120 --> 00:32:45,279
community we also have to look into

824
00:32:45,279 --> 00:32:47,440
other attributes of these measurement

825
00:32:47,440 --> 00:32:48,480
techniques

826
00:32:48,480 --> 00:32:50,080
these include in our opinion the

827
00:32:50,080 --> 00:32:51,840
representability

828
00:32:51,840 --> 00:32:54,159
to what extent are the parameters known

829
00:32:54,159 --> 00:32:57,519
of the different measurement techniques

830
00:32:57,519 --> 00:32:59,679
and can we reproduce the results

831
00:32:59,679 --> 00:33:01,760
actually independently

832
00:33:01,760 --> 00:33:04,480
and also whether these measurement

833
00:33:04,480 --> 00:33:07,519
techniques are actually feasible to

834
00:33:07,519 --> 00:33:10,399
roll out a larger scale so for example

835
00:33:10,399 --> 00:33:13,760
of course it is not very hard to measure

836
00:33:13,760 --> 00:33:15,760
the dns deployment and domain names if

837
00:33:15,760 --> 00:33:18,159
you have access to all the zone files

838
00:33:18,159 --> 00:33:19,440
but the chance that you have access to

839
00:33:19,440 --> 00:33:21,679
all the zone files is not very likely so

840
00:33:21,679 --> 00:33:23,679
we also want to take this into account

841
00:33:23,679 --> 00:33:25,120
when assessing the different measurement

842
00:33:25,120 --> 00:33:27,600
techniques

843
00:33:27,919 --> 00:33:30,640
and with that i already come to my end

844
00:33:30,640 --> 00:33:32,320
of the presentation

845
00:33:32,320 --> 00:33:34,240
where i would like to collect feedback

846
00:33:34,240 --> 00:33:36,399
from you as a management community and

847
00:33:36,399 --> 00:33:39,120
would like to understand which dns

848
00:33:39,120 --> 00:33:41,279
metrics do you think are most important

849
00:33:41,279 --> 00:33:43,519
to assess dynastic deployment

850
00:33:43,519 --> 00:33:45,039
now and in the future

851
00:33:45,039 --> 00:33:47,600
does that only include well how many

852
00:33:47,600 --> 00:33:49,760
domain names are signed for example

853
00:33:49,760 --> 00:33:51,600
and how many resources validate or do

854
00:33:51,600 --> 00:33:54,320
you think that also more advanced so to

855
00:33:54,320 --> 00:33:56,720
say metrics are necessary

856
00:33:56,720 --> 00:33:58,240
and finally

857
00:33:58,240 --> 00:33:59,279
if you

858
00:33:59,279 --> 00:34:01,279
would think on which basis you would

859
00:34:01,279 --> 00:34:03,440
select a different measurement technique

860
00:34:03,440 --> 00:34:05,279
which would that be would you only sort

861
00:34:05,279 --> 00:34:06,880
of focus on

862
00:34:06,880 --> 00:34:09,440
on coverage or do you think that other

863
00:34:09,440 --> 00:34:10,480
aspects

864
00:34:10,480 --> 00:34:11,440
should be

865
00:34:11,440 --> 00:34:14,079
are important as well

866
00:34:14,079 --> 00:34:15,760
i'm not sure how much time we have for

867
00:34:15,760 --> 00:34:17,040
questions but i will hang out in the

868
00:34:17,040 --> 00:34:18,960
chat and you can reach me

869
00:34:18,960 --> 00:34:21,040
at this email address if

870
00:34:21,040 --> 00:34:23,359
you want to thank you

871
00:34:23,359 --> 00:34:25,280
yeah thanks a lot mart yes we have a

872
00:34:25,280 --> 00:34:26,639
little bit of time we have one person in

873
00:34:26,639 --> 00:34:29,200
the queue already

874
00:34:32,480 --> 00:34:34,239
thank you more interesting uh

875
00:34:34,239 --> 00:34:35,599
presentation a lot of interesting

876
00:34:35,599 --> 00:34:36,560
aspects

877
00:34:36,560 --> 00:34:38,960
um to answer your

878
00:34:38,960 --> 00:34:41,199
first question

879
00:34:41,199 --> 00:34:43,199
i think that what i would like to know

880
00:34:43,199 --> 00:34:45,599
is on a global scale

881
00:34:45,599 --> 00:34:48,320
how many dns transactions are actually

882
00:34:48,320 --> 00:34:49,918
being protected or what is the

883
00:34:49,918 --> 00:34:51,760
percentage of the nsac protected

884
00:34:51,760 --> 00:34:53,359
transactions

885
00:34:53,359 --> 00:34:56,000
on the public internet that's my because

886
00:34:56,000 --> 00:34:59,680
that's what in the end actually counts

887
00:34:59,760 --> 00:35:02,160
it's a single figure combines popularity

888
00:35:02,160 --> 00:35:05,040
of a domain name with the dns sec

889
00:35:05,040 --> 00:35:08,880
population and validation population

890
00:35:08,880 --> 00:35:10,560
but that in the end is the end-to-end

891
00:35:10,560 --> 00:35:12,240
metric to me

892
00:35:12,240 --> 00:35:13,440
thank you okay

893
00:35:13,440 --> 00:35:16,680
thanks alex

894
00:35:17,040 --> 00:35:18,560
yeah i mean um actually thanks for

895
00:35:18,560 --> 00:35:19,920
bringing this presentation here and

896
00:35:19,920 --> 00:35:22,000
starting discussion um feel free to have

897
00:35:22,000 --> 00:35:23,520
more comments on the mailing list have a

898
00:35:23,520 --> 00:35:24,960
discussion there

899
00:35:24,960 --> 00:35:26,480
um but i think that's also very

900
00:35:26,480 --> 00:35:28,640
interesting to maybe um take a similar

901
00:35:28,640 --> 00:35:30,560
look at different measurement studies

902
00:35:30,560 --> 00:35:32,240
and more broadly figure out these kind

903
00:35:32,240 --> 00:35:34,960
of aspects so um very nice to have the

904
00:35:34,960 --> 00:35:37,200
discussion in this group

905
00:35:37,200 --> 00:35:39,439
thanks

906
00:35:39,920 --> 00:35:42,079
okay but if there are no other questions

907
00:35:42,079 --> 00:35:45,839
then i think we just move on

908
00:36:01,200 --> 00:36:04,240
okay next we have little mao um great to

909
00:36:04,240 --> 00:36:05,680
have you here

910
00:36:05,680 --> 00:36:07,680
uh i've just set up your slides and i

911
00:36:07,680 --> 00:36:08,880
think you should have control and you

912
00:36:08,880 --> 00:36:10,720
should be ready to go

913
00:36:10,720 --> 00:36:11,520
uh

914
00:36:11,520 --> 00:36:14,560
yeah thanks so can everyone hear me

915
00:36:14,560 --> 00:36:16,240
yeah we hear you well

916
00:36:16,240 --> 00:36:18,800
oh sure thank you uh yes so this is

917
00:36:18,800 --> 00:36:21,920
jerome from cwru and uh today i'm going

918
00:36:21,920 --> 00:36:24,560
to present our results in uh measuring

919
00:36:24,560 --> 00:36:27,200
the support for dns over tcp in the

920
00:36:27,200 --> 00:36:28,800
internet

921
00:36:28,800 --> 00:36:30,079
um

922
00:36:30,079 --> 00:36:32,640
right so here are the topics um i'm

923
00:36:32,640 --> 00:36:35,040
gonna cover today so i'm gonna look at

924
00:36:35,040 --> 00:36:37,920
the dns over tcp support on two sides

925
00:36:37,920 --> 00:36:41,119
of the dns infrastructure

926
00:36:41,119 --> 00:36:42,800
the recursive resolver side and

927
00:36:42,800 --> 00:36:44,960
authoritative dns server side

928
00:36:44,960 --> 00:36:45,800
so um

929
00:36:45,800 --> 00:36:48,869
[Music]

930
00:36:50,960 --> 00:36:55,720
we just lost your audio for some reason

931
00:36:57,520 --> 00:36:59,200
can you still hear us

932
00:36:59,200 --> 00:37:01,359
jerome

933
00:37:01,359 --> 00:37:05,400
hm that's a problem

934
00:37:09,280 --> 00:37:13,040
can you hear us we lost your audio

935
00:37:13,440 --> 00:37:16,240
and you lost our audio

936
00:37:16,240 --> 00:37:19,119
oh i i can't hear you ah okay now we can

937
00:37:19,119 --> 00:37:20,400
hear you again

938
00:37:20,400 --> 00:37:21,680
so we missed a little bit of what you

939
00:37:21,680 --> 00:37:23,040
said so i think you have to go back a

940
00:37:23,040 --> 00:37:25,359
little bit

941
00:37:26,880 --> 00:37:30,160
oh and you're gone again

942
00:37:35,280 --> 00:37:38,160
jerome might be accidentally muted

943
00:37:38,160 --> 00:37:40,880
i'm not sure if that either meet echo

944
00:37:40,880 --> 00:37:41,920
problem or

945
00:37:41,920 --> 00:37:45,640
problem your site

946
00:37:50,000 --> 00:37:52,320
think it might do be worth doing a hunt

947
00:37:52,320 --> 00:37:54,320
for mute buttons

948
00:37:54,320 --> 00:37:57,760
both hardware and software

949
00:37:58,640 --> 00:38:01,680
oh yeah i

950
00:38:01,680 --> 00:38:03,920
i was muted and i don't know why

951
00:38:03,920 --> 00:38:06,240
yeah okay did you unmute it again no

952
00:38:06,240 --> 00:38:09,599
okay okay yeah okay well

953
00:38:09,599 --> 00:38:12,720
yeah so i think i'm back

954
00:38:14,079 --> 00:38:18,119
right so at the end of the tag

955
00:38:19,040 --> 00:38:20,800
go ahead i think we're fine

956
00:38:20,800 --> 00:38:23,040
yeah so at the end of the talk i'll just

957
00:38:23,040 --> 00:38:24,560
before you talk about the race condition

958
00:38:24,560 --> 00:38:28,640
between the race recursively hours

959
00:38:31,200 --> 00:38:34,480
and we lost you again

960
00:38:35,280 --> 00:38:38,320
okay um

961
00:38:43,280 --> 00:38:47,520
what do you think it is brian

962
00:38:47,520 --> 00:38:50,960
yeah can you can you hear us

963
00:38:51,599 --> 00:38:53,359
we lost you again and maybe it might be

964
00:38:53,359 --> 00:38:57,119
your um local airports or something that

965
00:38:57,119 --> 00:38:59,599
mute your

966
00:39:00,960 --> 00:39:03,280
oh let me take off my

967
00:39:03,280 --> 00:39:05,760
yeah let's do that

968
00:39:05,760 --> 00:39:07,440
and you have to start again at the top

969
00:39:07,440 --> 00:39:10,800
of the slide we didn't hear anything

970
00:39:11,520 --> 00:39:14,880
let me take off

971
00:39:25,119 --> 00:39:28,119
available

972
00:39:31,359 --> 00:39:32,720
we can't hear you again we let's

973
00:39:32,720 --> 00:39:34,960
actually switch the presentations um and

974
00:39:34,960 --> 00:39:36,560
we come back to you and you can figure

975
00:39:36,560 --> 00:39:39,359
out if you can get some other headphones

976
00:39:39,359 --> 00:39:40,640
because if we don't hear you that

977
00:39:40,640 --> 00:39:43,839
doesn't help

978
00:39:47,920 --> 00:39:50,720
um mike would you be ready to just take

979
00:39:50,720 --> 00:39:53,599
your presentation first

980
00:39:53,599 --> 00:39:55,280
uh yeah

981
00:39:55,280 --> 00:39:57,839
perfect

982
00:40:14,640 --> 00:40:16,160
sorry i'm just trying to find your

983
00:40:16,160 --> 00:40:17,760
slides and have problem about that as

984
00:40:17,760 --> 00:40:20,560
well so

985
00:40:21,440 --> 00:40:22,240
okay

986
00:40:22,240 --> 00:40:25,680
so as screen sharing also an option

987
00:40:25,680 --> 00:40:28,160
you can give it a try yeah

988
00:40:28,160 --> 00:40:30,399
okay

989
00:40:33,599 --> 00:40:35,040
oh no actually i have your slides if

990
00:40:35,040 --> 00:40:39,839
that's easier sorry sorry about that

991
00:40:40,079 --> 00:40:42,960
so if it's possible i would like just

992
00:40:42,960 --> 00:40:44,720
to check if screenshot is working and

993
00:40:44,720 --> 00:40:47,440
fall back with

994
00:40:47,440 --> 00:40:50,440
yes

995
00:40:56,720 --> 00:40:59,359
okay now we see an empty screen

996
00:40:59,359 --> 00:41:03,598
okay perfect let me check

997
00:41:09,040 --> 00:41:11,200
and welcome

998
00:41:11,200 --> 00:41:13,280
thanks thanks for having me today

999
00:41:13,280 --> 00:41:14,800
um

1000
00:41:14,800 --> 00:41:18,560
so i have some echo here

1001
00:41:19,359 --> 00:41:21,839
maybe from the room i'm not sure

1002
00:41:21,839 --> 00:41:23,599
yeah maybe the easiest thing is just

1003
00:41:23,599 --> 00:41:25,760
mute the room for yourself

1004
00:41:25,760 --> 00:41:28,319
ah okay

1005
00:41:33,119 --> 00:41:35,359
okay now the echo should be gone yes

1006
00:41:35,359 --> 00:41:36,800
perfect okay

1007
00:41:36,800 --> 00:41:40,400
um yeah thanks for having me today um so

1008
00:41:40,400 --> 00:41:44,079
i'm mostly blind and i can't hear you so

1009
00:41:44,079 --> 00:41:47,359
um maybe we take questions following the

1010
00:41:47,359 --> 00:41:49,839
presentation

1011
00:41:50,000 --> 00:41:52,160
all right let's get started

1012
00:41:52,160 --> 00:41:53,680
so hi welcome

1013
00:41:53,680 --> 00:41:55,440
i'm mike from technical university of

1014
00:41:55,440 --> 00:41:57,680
munich and i'm going to present our

1015
00:41:57,680 --> 00:42:00,319
paper on dinosaur quick which was a

1016
00:42:00,319 --> 00:42:03,760
study we performed and was accepted at

1017
00:42:03,760 --> 00:42:06,319
pam conference which is

1018
00:42:06,319 --> 00:42:09,440
scheduled to happen next week

1019
00:42:09,440 --> 00:42:11,440
so let's start with the brief history of

1020
00:42:11,440 --> 00:42:13,280
dns transports

1021
00:42:13,280 --> 00:42:16,560
in the 80s we had unencrypted dns with

1022
00:42:16,560 --> 00:42:19,599
dns over udp and then s over tcp so

1023
00:42:19,599 --> 00:42:21,839
those have these obvious problems

1024
00:42:21,839 --> 00:42:23,839
problems with eavesdropping and on path

1025
00:42:23,839 --> 00:42:26,480
manipulations and then we have a shift

1026
00:42:26,480 --> 00:42:29,280
to the encrypted dns with dns over tls

1027
00:42:29,280 --> 00:42:31,520
and dns of https

1028
00:42:31,520 --> 00:42:33,440
which suffer mainly from the drawbacks

1029
00:42:33,440 --> 00:42:35,520
of the tcp protocol like multi-rgt

1030
00:42:35,520 --> 00:42:38,560
handshakes and head of line blocking

1031
00:42:38,560 --> 00:42:40,880
and this is addressed by dns overclick

1032
00:42:40,880 --> 00:42:42,800
and dns or kick is in its final

1033
00:42:42,800 --> 00:42:44,640
standardization stage and the main

1034
00:42:44,640 --> 00:42:46,319
feature is the feature of quick which

1035
00:42:46,319 --> 00:42:48,000
combined the connection and the

1036
00:42:48,000 --> 00:42:49,920
encryption into a zero or one rtt

1037
00:42:49,920 --> 00:42:51,280
handshake

1038
00:42:51,280 --> 00:42:53,040
so there are a lot of experimental

1039
00:42:53,040 --> 00:42:55,680
implementations for clients and servers

1040
00:42:55,680 --> 00:42:57,520
and they are also used in production

1041
00:42:57,520 --> 00:42:59,040
systems for example companies like

1042
00:42:59,040 --> 00:43:02,400
edgard or next dns already offer public

1043
00:43:02,400 --> 00:43:04,560
dinosaur quick services

1044
00:43:04,560 --> 00:43:06,720
however there are no studies focusing on

1045
00:43:06,720 --> 00:43:09,359
genocide quick which we did in our study

1046
00:43:09,359 --> 00:43:11,359
where we first looked at the adoption on

1047
00:43:11,359 --> 00:43:13,440
reservoirs worldwide and then on the

1048
00:43:13,440 --> 00:43:16,800
response times of dns

1049
00:43:18,160 --> 00:43:20,319
so starting with the adoption we

1050
00:43:20,319 --> 00:43:22,800
performed weekly scans over 29 weeks of

1051
00:43:22,800 --> 00:43:26,560
the ipv4 address base and we also scan

1052
00:43:26,560 --> 00:43:28,880
for dns over udp to have this as a

1053
00:43:28,880 --> 00:43:30,480
baseline

1054
00:43:30,480 --> 00:43:32,400
as for dns over quick

1055
00:43:32,400 --> 00:43:33,280
we

1056
00:43:33,280 --> 00:43:35,040
support the dns over quick versions

1057
00:43:35,040 --> 00:43:37,839
draft 06 to draft 0 0 and for quick we

1058
00:43:37,839 --> 00:43:39,359
have support for

1059
00:43:39,359 --> 00:43:41,839
the rc version and the three different

1060
00:43:41,839 --> 00:43:45,040
draft versions which are stated here

1061
00:43:45,040 --> 00:43:47,119
in our adoption scans we collected

1062
00:43:47,119 --> 00:43:48,640
different metrics first of all the

1063
00:43:48,640 --> 00:43:50,640
negotiated dns overclick as well as

1064
00:43:50,640 --> 00:43:52,640
quick versions and the common names of

1065
00:43:52,640 --> 00:43:55,839
the certificates

1066
00:43:56,880 --> 00:43:59,920
so this is a distribution here where we

1067
00:43:59,920 --> 00:44:02,079
have highlighted in the different colors

1068
00:44:02,079 --> 00:44:04,800
different combinations of dns over quake

1069
00:44:04,800 --> 00:44:07,119
as well as quick versions

1070
00:44:07,119 --> 00:44:10,400
so let me guide you through this figure

1071
00:44:10,400 --> 00:44:12,480
we see that the adoption rises slowly

1072
00:44:12,480 --> 00:44:14,319
but steadily so from the first week of

1073
00:44:14,319 --> 00:44:16,079
our measurement to the final week we see

1074
00:44:16,079 --> 00:44:18,400
an increase of around 46

1075
00:44:18,400 --> 00:44:19,079
to

1076
00:44:19,079 --> 00:44:22,640
1217 reserves but what we also see is a

1077
00:44:22,640 --> 00:44:25,520
high fluctuation so only 52

1078
00:44:25,520 --> 00:44:27,440
of the resolvers which were

1079
00:44:27,440 --> 00:44:28,880
available in the first week are still

1080
00:44:28,880 --> 00:44:30,640
reachable in the last week

1081
00:44:30,640 --> 00:44:33,280
um if you compare this to dns over udp

1082
00:44:33,280 --> 00:44:36,079
we have around 97 percent which are

1083
00:44:36,079 --> 00:44:39,839
still reachable in the last years

1084
00:44:40,720 --> 00:44:42,480
also we only observe

1085
00:44:42,480 --> 00:44:45,359
seven pairs of dns over quick as well as

1086
00:44:45,359 --> 00:44:47,119
quick version and it's important to note

1087
00:44:47,119 --> 00:44:49,680
here that we added support for version 1

1088
00:44:49,680 --> 00:44:53,200
and week 43 only so the ones

1089
00:44:53,200 --> 00:44:55,119
with quick version 1

1090
00:44:55,119 --> 00:44:57,760
are highlighted here in the dark blue

1091
00:44:57,760 --> 00:44:59,280
bars

1092
00:44:59,280 --> 00:45:01,599
we can also see that in the final week

1093
00:45:01,599 --> 00:45:03,359
of our measurement

1094
00:45:03,359 --> 00:45:06,000
the dns over quick as well as quick

1095
00:45:06,000 --> 00:45:08,480
versions

1096
00:45:09,440 --> 00:45:11,760
are dominated by this combination of dns

1097
00:45:11,760 --> 00:45:14,560
so quick draft co2 as well as quick

1098
00:45:14,560 --> 00:45:16,240
version one

1099
00:45:16,240 --> 00:45:18,880
we also see an uptake in the dry and the

1100
00:45:18,880 --> 00:45:20,560
weeks which are highlighted here of

1101
00:45:20,560 --> 00:45:22,400
quick version one in combination with

1102
00:45:22,400 --> 00:45:25,680
dns or quick draft zero two and we could

1103
00:45:25,680 --> 00:45:28,079
track this to an open source dns server

1104
00:45:28,079 --> 00:45:30,800
implementation of edgard home so they

1105
00:45:30,800 --> 00:45:33,040
changed their d4 quick version from

1106
00:45:33,040 --> 00:45:35,760
draft 34 to quick version one

1107
00:45:35,760 --> 00:45:38,720
uh in this week and we could verify this

1108
00:45:38,720 --> 00:45:40,880
also by looking at the common names of

1109
00:45:40,880 --> 00:45:42,960
those certificates so we find something

1110
00:45:42,960 --> 00:45:45,440
like edgard does something but something

1111
00:45:45,440 --> 00:45:47,760
which hints at the usage of the edgard

1112
00:45:47,760 --> 00:45:48,960
home

1113
00:45:48,960 --> 00:45:52,800
open source dns server implementation

1114
00:45:52,880 --> 00:45:55,599
so next to their open source

1115
00:45:55,599 --> 00:45:57,760
dns server implementation edgard also

1116
00:45:57,760 --> 00:46:00,319
offers a publicly reachable dns over

1117
00:46:00,319 --> 00:46:02,400
quick service and

1118
00:46:02,400 --> 00:46:03,119
they

1119
00:46:03,119 --> 00:46:06,400
already implemented dnso quick to f03 in

1120
00:46:06,400 --> 00:46:08,240
combination with quick version one which

1121
00:46:08,240 --> 00:46:10,160
is highlighted here in the

1122
00:46:10,160 --> 00:46:11,920
yellow bars

1123
00:46:11,920 --> 00:46:15,040
and we find these for around 25

1124
00:46:15,040 --> 00:46:16,560
reservoirs in the final week of our

1125
00:46:16,560 --> 00:46:18,520
measurement with the common names dean

1126
00:46:18,520 --> 00:46:23,040
asterodetkat.com and edgar ch

1127
00:46:25,599 --> 00:46:29,359
next we come to our response times so

1128
00:46:29,359 --> 00:46:31,680
for our response times measurement we

1129
00:46:31,680 --> 00:46:33,200
performed hourly measurements over the

1130
00:46:33,200 --> 00:46:35,040
course of one week and we use the other

1131
00:46:35,040 --> 00:46:37,040
stuff ipv4 addresses from the adoption

1132
00:46:37,040 --> 00:46:38,000
scans

1133
00:46:38,000 --> 00:46:40,079
we performed a single credit protocol

1134
00:46:40,079 --> 00:46:41,920
and it's important to note that we have

1135
00:46:41,920 --> 00:46:44,400
a location bias where we only

1136
00:46:44,400 --> 00:46:46,560
measured from one vantage point and this

1137
00:46:46,560 --> 00:46:48,960
is why we did comparative measurements

1138
00:46:48,960 --> 00:46:52,720
to dns of udp tcp dot indo so

1139
00:46:52,720 --> 00:46:56,160
in total we find 246 resolvers which

1140
00:46:56,160 --> 00:47:00,079
support all those targeted dns protocols

1141
00:47:00,079 --> 00:47:01,920
then we perform two subsequent queries

1142
00:47:01,920 --> 00:47:04,319
the first one is cash warming query to

1143
00:47:04,319 --> 00:47:06,240
warm the dns cache

1144
00:47:06,240 --> 00:47:09,440
and then the actual measurement

1145
00:47:09,440 --> 00:47:11,680
we collect different metrics we have the

1146
00:47:11,680 --> 00:47:14,319
handshake time which is the time from

1147
00:47:14,319 --> 00:47:15,520
the start of the connection

1148
00:47:15,520 --> 00:47:17,680
establishment until the

1149
00:47:17,680 --> 00:47:20,559
connection is established be it secured

1150
00:47:20,559 --> 00:47:23,200
or unsecured then we have the resolve

1151
00:47:23,200 --> 00:47:25,119
time which is the time from

1152
00:47:25,119 --> 00:47:27,520
the time we state the dns trivia until

1153
00:47:27,520 --> 00:47:29,680
we get a successful answer

1154
00:47:29,680 --> 00:47:32,000
back and the sum of those is the

1155
00:47:32,000 --> 00:47:34,640
so-called response time

1156
00:47:34,640 --> 00:47:36,480
other than that we also have a protocol

1157
00:47:36,480 --> 00:47:38,800
specific rtt so

1158
00:47:38,800 --> 00:47:41,599
we performed protocol specific rtt

1159
00:47:41,599 --> 00:47:44,240
measurements with different payloads per

1160
00:47:44,240 --> 00:47:46,800
transport layer protocol to get an

1161
00:47:46,800 --> 00:47:49,520
estimation of the rtt which could be

1162
00:47:49,520 --> 00:47:51,920
different based on the payload you are

1163
00:47:51,920 --> 00:47:55,440
using in the different transfer programs

1164
00:47:55,440 --> 00:47:57,359
as the limitations it is important to

1165
00:47:57,359 --> 00:47:59,680
note here that we do not support tss

1166
00:47:59,680 --> 00:48:01,520
session resumption or early data in the

1167
00:48:01,520 --> 00:48:03,680
study which is what we are currently

1168
00:48:03,680 --> 00:48:06,919
working on

1169
00:48:07,599 --> 00:48:10,079
starting with the response times so

1170
00:48:10,079 --> 00:48:11,520
first of all we have to check our

1171
00:48:11,520 --> 00:48:14,000
expectations uh the resolve time

1172
00:48:14,000 --> 00:48:17,280
um as it's just a dns query um then the

1173
00:48:17,280 --> 00:48:19,760
answer from the cash record and the dns

1174
00:48:19,760 --> 00:48:20,880
sensor

1175
00:48:20,880 --> 00:48:23,040
as well as the rtt which should take

1176
00:48:23,040 --> 00:48:25,599
roughly one rtt over all protocols and

1177
00:48:25,599 --> 00:48:27,839
if we now look at the resolve time

1178
00:48:27,839 --> 00:48:31,119
here in the cdf we can see that all

1179
00:48:31,119 --> 00:48:34,800
different protocols overlap so we find

1180
00:48:34,800 --> 00:48:37,599
that resolve times are identical

1181
00:48:37,599 --> 00:48:40,319
as expected

1182
00:48:40,559 --> 00:48:43,119
moreover if we now look at the protocol

1183
00:48:43,119 --> 00:48:44,960
specific ltd measurements which are

1184
00:48:44,960 --> 00:48:47,520
shown here in the subplots we also see

1185
00:48:47,520 --> 00:48:50,480
that all protocols overlap so we find no

1186
00:48:50,480 --> 00:48:52,960
protocol specific path influences here

1187
00:48:52,960 --> 00:48:56,000
and if we would overlay those figures we

1188
00:48:56,000 --> 00:48:57,680
would see that the resolve times and the

1189
00:48:57,680 --> 00:49:00,000
rtts are actually identical

1190
00:49:00,000 --> 00:49:00,960
so

1191
00:49:00,960 --> 00:49:03,359
our expectation of one rtt for resolve

1192
00:49:03,359 --> 00:49:04,400
time

1193
00:49:04,400 --> 00:49:08,559
and for the rtt measurement is confirmed

1194
00:49:10,400 --> 00:49:13,760
we next look at the response times also

1195
00:49:13,760 --> 00:49:15,280
starting with the expectations so for

1196
00:49:15,280 --> 00:49:17,599
dns or tcp this is just

1197
00:49:17,599 --> 00:49:19,760
the three-way handshake we expect one

1198
00:49:19,760 --> 00:49:22,000
rtt for the dough

1199
00:49:22,000 --> 00:49:24,640
the tls handshake is added to the tcp

1200
00:49:24,640 --> 00:49:27,440
handshake which should take one rtt on

1201
00:49:27,440 --> 00:49:31,119
tls 1.3 so in total two rtts and for dns

1202
00:49:31,119 --> 00:49:33,440
so quick we expect one rtt due to the

1203
00:49:33,440 --> 00:49:35,440
combination of the encryption

1204
00:49:35,440 --> 00:49:36,319
and

1205
00:49:36,319 --> 00:49:37,119
the

1206
00:49:37,119 --> 00:49:39,839
transport handshake into one rtt

1207
00:49:39,839 --> 00:49:42,240
and if we look at the handshake times

1208
00:49:42,240 --> 00:49:45,119
here on the right hand side now cf we

1209
00:49:45,119 --> 00:49:48,400
see that dns over tcp here highlighted

1210
00:49:48,400 --> 00:49:50,800
in green on the left hand side actually

1211
00:49:50,800 --> 00:49:53,680
shows the fastest handshake times

1212
00:49:53,680 --> 00:49:55,599
if you now look at dot and do on the

1213
00:49:55,599 --> 00:49:57,440
right hand side they are overlapping

1214
00:49:57,440 --> 00:50:00,400
they show the slowest handshake times

1215
00:50:00,400 --> 00:50:03,200
and then also kick is somewhat in the

1216
00:50:03,200 --> 00:50:04,480
middle

1217
00:50:04,480 --> 00:50:06,960
so dinosaur quick falls short of dns

1218
00:50:06,960 --> 00:50:11,359
over tcp but it improves on.

1219
00:50:11,359 --> 00:50:13,680
what we can now do is we can have a look

1220
00:50:13,680 --> 00:50:17,119
at the handshake to rtt ratio so um i

1221
00:50:17,119 --> 00:50:18,240
said we

1222
00:50:18,240 --> 00:50:20,400
uh also measured the protocol specific

1223
00:50:20,400 --> 00:50:22,240
rtts um

1224
00:50:22,240 --> 00:50:24,559
on every handshake time measurement so

1225
00:50:24,559 --> 00:50:26,240
we can divide the handshake time

1226
00:50:26,240 --> 00:50:28,880
measurement by the rtt measurement to

1227
00:50:28,880 --> 00:50:31,760
get the handshake to rtt ratio which is

1228
00:50:31,760 --> 00:50:34,160
shown in the support here

1229
00:50:34,160 --> 00:50:36,800
and what we can see for dns or tcp to

1230
00:50:36,800 --> 00:50:39,760
the left hand side here shown in green

1231
00:50:39,760 --> 00:50:42,640
is that this nicely aligns with the one

1232
00:50:42,640 --> 00:50:47,839
rtt as expected so this is confirmed

1233
00:50:48,240 --> 00:50:50,800
if we now look at dinosaur materials and

1234
00:50:50,800 --> 00:50:53,040
https again overlapping here on the

1235
00:50:53,040 --> 00:50:55,359
right hand side we see that it follows

1236
00:50:55,359 --> 00:50:57,839
the distribution of two rtts up under

1237
00:50:57,839 --> 00:51:00,319
the median and then it converges into a

1238
00:51:00,319 --> 00:51:02,079
long tail so

1239
00:51:02,079 --> 00:51:04,240
this is somewhat confirmed and for dns

1240
00:51:04,240 --> 00:51:06,720
so quick we see a very weird

1241
00:51:06,720 --> 00:51:09,280
distribution here so around 20 of

1242
00:51:09,280 --> 00:51:11,440
measurements follow the one rtt

1243
00:51:11,440 --> 00:51:13,680
distribution and then it converges into

1244
00:51:13,680 --> 00:51:15,839
a long tail where we see around 40

1245
00:51:15,839 --> 00:51:18,400
percent of measurements have an

1246
00:51:18,400 --> 00:51:21,119
handshake to rtt ratio of more than two

1247
00:51:21,119 --> 00:51:23,839
rtts

1248
00:51:24,960 --> 00:51:27,040
so analyzing this we find that this is

1249
00:51:27,040 --> 00:51:29,040
an interaction with the quick client

1250
00:51:29,040 --> 00:51:31,359
address validation which is a mandatory

1251
00:51:31,359 --> 00:51:33,599
feature of the quick standard to prevent

1252
00:51:33,599 --> 00:51:36,240
traffic amplification attacks

1253
00:51:36,240 --> 00:51:37,040
so

1254
00:51:37,040 --> 00:51:38,640
we actually

1255
00:51:38,640 --> 00:51:40,960
did perform client address validation

1256
00:51:40,960 --> 00:51:43,440
while we reused the token which was

1257
00:51:43,440 --> 00:51:45,839
issued by the dnso quick server issued

1258
00:51:45,839 --> 00:51:47,839
in the cash form query and our

1259
00:51:47,839 --> 00:51:49,839
subsequent initial of the actual

1260
00:51:49,839 --> 00:51:52,400
measurement so according to client as

1261
00:51:52,400 --> 00:51:54,400
well as server state the client address

1262
00:51:54,400 --> 00:51:57,280
validation is actually fulfilled

1263
00:51:57,280 --> 00:51:58,800
however what we find is that the

1264
00:51:58,800 --> 00:52:00,720
handstake handshake is still limited by

1265
00:52:00,720 --> 00:52:02,480
the traffic amplification

1266
00:52:02,480 --> 00:52:03,200
so

1267
00:52:03,200 --> 00:52:05,520
the server stops sending if three times

1268
00:52:05,520 --> 00:52:07,440
the amount of data received but the

1269
00:52:07,440 --> 00:52:09,119
client is reached

1270
00:52:09,119 --> 00:52:12,000
and depending on the size of the x 509

1271
00:52:12,000 --> 00:52:13,920
certificate the certificate either fits

1272
00:52:13,920 --> 00:52:16,240
into its limit or it exceeds it and if

1273
00:52:16,240 --> 00:52:19,520
it's fit if it fits everything is fine

1274
00:52:19,520 --> 00:52:23,440
and if not we have one additional rtt

1275
00:52:23,440 --> 00:52:26,240
for the handshake

1276
00:52:26,800 --> 00:52:28,559
this is actually not specific to the

1277
00:52:28,559 --> 00:52:30,160
inner sole quick but the quick

1278
00:52:30,160 --> 00:52:32,960
implementation pack of the resolves we

1279
00:52:32,960 --> 00:52:35,440
taxed it

1280
00:52:36,640 --> 00:52:39,760
so as a conclusion we see a slow but

1281
00:52:39,760 --> 00:52:41,839
steady adoption with high weak

1282
00:52:41,839 --> 00:52:44,079
overweight fluctuations as for our

1283
00:52:44,079 --> 00:52:46,240
response times measurement we find that

1284
00:52:46,240 --> 00:52:48,640
crick's full potential or dns over

1285
00:52:48,640 --> 00:52:51,920
export potential is utilized in only 20

1286
00:52:51,920 --> 00:52:54,000
of measurements where 40 of measurements

1287
00:52:54,000 --> 00:52:56,319
show considerably higher handshake times

1288
00:52:56,319 --> 00:52:59,359
due to the client address validation

1289
00:52:59,359 --> 00:53:01,200
behavior

1290
00:53:01,200 --> 00:53:03,520
however despite the still unused

1291
00:53:03,520 --> 00:53:05,839
optimization potential dns or quick

1292
00:53:05,839 --> 00:53:07,760
already outperforms

1293
00:53:07,760 --> 00:53:09,760
and this is why we conclude

1294
00:53:09,760 --> 00:53:12,720
that performance-wise dns or already the

1295
00:53:12,720 --> 00:53:17,359
best choice for encrypted dns to date

1296
00:53:17,680 --> 00:53:19,760
so we have a lot of more detail more

1297
00:53:19,760 --> 00:53:22,000
analysis in our paper we open sourced

1298
00:53:22,000 --> 00:53:24,000
our code and data sets so please have a

1299
00:53:24,000 --> 00:53:25,119
look there

1300
00:53:25,119 --> 00:53:27,040
thank you for attention and i'm happy to

1301
00:53:27,040 --> 00:53:29,839
take questions

1302
00:53:32,000 --> 00:53:34,160
yeah thanks a lot we have laurence on

1303
00:53:34,160 --> 00:53:36,079
the queue

1304
00:53:36,079 --> 00:53:38,079
uh can you hear me now if you are muted

1305
00:53:38,079 --> 00:53:41,280
the room yes yes uh hey lorenzo coletti

1306
00:53:41,280 --> 00:53:43,040
google um

1307
00:53:43,040 --> 00:53:45,119
super interesting and

1308
00:53:45,119 --> 00:53:46,400
i'm part of the android networking team

1309
00:53:46,400 --> 00:53:47,760
and we're actually

1310
00:53:47,760 --> 00:53:50,960
uh in the process of rolling out um

1311
00:53:50,960 --> 00:53:53,280
something that you didn't test actually

1312
00:53:53,280 --> 00:53:54,480
which is

1313
00:53:54,480 --> 00:53:57,559
d d0h3

1314
00:53:57,680 --> 00:54:00,960
so basically doh over it quick right

1315
00:54:00,960 --> 00:54:03,920
and one thing that's related to this

1316
00:54:03,920 --> 00:54:05,920
is that that was that seemed to be like

1317
00:54:05,920 --> 00:54:07,599
easier to implement because there's more

1318
00:54:07,599 --> 00:54:09,359
server support

1319
00:54:09,359 --> 00:54:10,400
and

1320
00:54:10,400 --> 00:54:12,559
one thing that we noticed is

1321
00:54:12,559 --> 00:54:15,359
um there's a substantial hit

1322
00:54:15,359 --> 00:54:17,040
in terms of bandwidth due to lots of

1323
00:54:17,040 --> 00:54:18,720
http headers

1324
00:54:18,720 --> 00:54:20,240
that really substantially increases the

1325
00:54:20,240 --> 00:54:22,079
bandwidth used for the queries

1326
00:54:22,079 --> 00:54:23,200
and

1327
00:54:23,200 --> 00:54:25,440
uh it would be interesting if you had

1328
00:54:25,440 --> 00:54:27,680
that type of measurement as well

1329
00:54:27,680 --> 00:54:28,640
because

1330
00:54:28,640 --> 00:54:31,040
metrics on android are you know

1331
00:54:31,040 --> 00:54:32,960
a few thousand dns queries per day and

1332
00:54:32,960 --> 00:54:34,960
it just it sort of adds up so i'd be

1333
00:54:34,960 --> 00:54:36,720
super interested in seeing what metrics

1334
00:54:36,720 --> 00:54:38,960
you have well my what metrics you could

1335
00:54:38,960 --> 00:54:40,480
get with

1336
00:54:40,480 --> 00:54:41,839
um you know

1337
00:54:41,839 --> 00:54:43,760
with in terms of bandwidth size because

1338
00:54:43,760 --> 00:54:45,040
you measured rtt and that's super

1339
00:54:45,040 --> 00:54:46,400
interesting but also like how much

1340
00:54:46,400 --> 00:54:48,640
bandwidth is used by these queries

1341
00:54:48,640 --> 00:54:50,240
uh because that's uh

1342
00:54:50,240 --> 00:54:52,000
uh that's a that's a big deal so that

1343
00:54:52,000 --> 00:54:54,000
yeah just wanted to say that it's also

1344
00:54:54,000 --> 00:54:55,760
super interesting work i'll obviously

1345
00:54:55,760 --> 00:54:57,040
i'll share this with the team that's

1346
00:54:57,040 --> 00:54:58,559
working on this

1347
00:54:58,559 --> 00:54:59,920
and uh

1348
00:54:59,920 --> 00:55:02,079
in particular like the quick bug around

1349
00:55:02,079 --> 00:55:02,960
uh

1350
00:55:02,960 --> 00:55:04,480
i i

1351
00:55:04,480 --> 00:55:05,760
will be looking at the paper to see if

1352
00:55:05,760 --> 00:55:06,880
there's a

1353
00:55:06,880 --> 00:55:08,480
um

1354
00:55:08,480 --> 00:55:10,400
if there's anything we can do about that

1355
00:55:10,400 --> 00:55:13,200
um we didn't i wasn't aware of this of

1356
00:55:13,200 --> 00:55:14,720
this issue so we're going to be looking

1357
00:55:14,720 --> 00:55:15,599
at that

1358
00:55:15,599 --> 00:55:18,000
thank you thank you for presenting

1359
00:55:18,000 --> 00:55:21,559
okay thanks for

1360
00:55:24,880 --> 00:55:28,000
yeah thanks a lot um from my site again

1361
00:55:28,000 --> 00:55:29,280
like you can always have further

1362
00:55:29,280 --> 00:55:30,799
discussion on the mail list i don't see

1363
00:55:30,799 --> 00:55:32,960
anybody in the queue

1364
00:55:32,960 --> 00:55:36,000
um i think we still have

1365
00:55:36,000 --> 00:55:37,839
network problems with jerome so i think

1366
00:55:37,839 --> 00:55:40,400
we just move on in the agenda

1367
00:55:40,400 --> 00:55:42,640
and that means europe would be next

1368
00:55:42,640 --> 00:55:45,640
up

1369
00:55:53,760 --> 00:55:56,000
uh can you click the slides i can check

1370
00:55:56,000 --> 00:55:57,280
the slides or you can click it there if

1371
00:55:57,280 --> 00:56:01,240
you want to click it okay

1372
00:56:05,040 --> 00:56:06,880
so hello everyone

1373
00:56:06,880 --> 00:56:08,880
um my name is deutschmann and i'd like

1374
00:56:08,880 --> 00:56:10,559
to present uh some performance

1375
00:56:10,559 --> 00:56:12,319
measurements of quick implementations

1376
00:56:12,319 --> 00:56:14,720
over geostationary satellite links

1377
00:56:14,720 --> 00:56:16,640
which we have obtained using the quick

1378
00:56:16,640 --> 00:56:19,200
interrupt runner

1379
00:56:19,200 --> 00:56:21,599
this presentation is based on a

1380
00:56:21,599 --> 00:56:24,319
pre-print which is available on archive

1381
00:56:24,319 --> 00:56:26,079
and i have to emphasize that this work

1382
00:56:26,079 --> 00:56:29,040
was actually done by sebastian andres

1383
00:56:29,040 --> 00:56:31,440
but he has finished his thesis recently

1384
00:56:31,440 --> 00:56:32,319
so

1385
00:56:32,319 --> 00:56:33,920
that's the reason why i'm presenting

1386
00:56:33,920 --> 00:56:35,280
this here

1387
00:56:35,280 --> 00:56:37,839
next slide

1388
00:56:42,720 --> 00:56:43,599
so

1389
00:56:43,599 --> 00:56:45,680
geostationary satellite networks heavily

1390
00:56:45,680 --> 00:56:48,160
rely on tcp proxies or so-called

1391
00:56:48,160 --> 00:56:49,680
performance enhancing

1392
00:56:49,680 --> 00:56:50,799
proxies

1393
00:56:50,799 --> 00:56:53,200
these are not applicable anymore

1394
00:56:53,200 --> 00:56:55,520
uh in the case of encrypted transport so

1395
00:56:55,520 --> 00:56:59,760
like vpns or quick and so far the

1396
00:56:59,760 --> 00:57:01,760
performance of quick overview stationary

1397
00:57:01,760 --> 00:57:03,280
satellite links has shown to be very

1398
00:57:03,280 --> 00:57:04,480
poor

1399
00:57:04,480 --> 00:57:06,480
there's a draft which summarizes the

1400
00:57:06,480 --> 00:57:08,160
most important aspects

1401
00:57:08,160 --> 00:57:09,760
we have talked about this in previous

1402
00:57:09,760 --> 00:57:12,240
map rg meetings and there's also a

1403
00:57:12,240 --> 00:57:14,640
literature overview

1404
00:57:14,640 --> 00:57:17,760
however so far tests were limited to

1405
00:57:17,760 --> 00:57:19,359
specifically selected quick

1406
00:57:19,359 --> 00:57:21,920
implementations so the question remains

1407
00:57:21,920 --> 00:57:23,680
how do other quick implementations

1408
00:57:23,680 --> 00:57:26,480
perform over geostationary satellites

1409
00:57:26,480 --> 00:57:29,280
next slide please

1410
00:57:30,240 --> 00:57:32,079
um you're probably all aware of the

1411
00:57:32,079 --> 00:57:33,920
quick indoor of runner

1412
00:57:33,920 --> 00:57:35,599
for those who are not aware here's a

1413
00:57:35,599 --> 00:57:37,359
screenshot of it

1414
00:57:37,359 --> 00:57:39,280
it was developed and is maintained by

1415
00:57:39,280 --> 00:57:41,280
the quick working group and especially

1416
00:57:41,280 --> 00:57:43,119
martin siemann

1417
00:57:43,119 --> 00:57:45,040
and i have to say a big thank you for

1418
00:57:45,040 --> 00:57:46,720
providing this framework

1419
00:57:46,720 --> 00:57:48,640
which helped us to integrate our

1420
00:57:48,640 --> 00:57:50,799
satellite scenarios

1421
00:57:50,799 --> 00:57:54,040
next slide

1422
00:57:54,640 --> 00:57:55,599
so

1423
00:57:55,599 --> 00:57:58,000
the quick intro runner is obviously

1424
00:57:58,000 --> 00:58:01,040
mainly used for interoperability tests

1425
00:58:01,040 --> 00:58:03,520
and standards compliance

1426
00:58:03,520 --> 00:58:05,520
but there are also two performance tests

1427
00:58:05,520 --> 00:58:08,880
which use a very non-challenging link

1428
00:58:08,880 --> 00:58:11,359
a symmetrical link with low data rate

1429
00:58:11,359 --> 00:58:14,400
low rdt and no packet loss

1430
00:58:14,400 --> 00:58:16,400
in the goodput scenario a 10 megabyte

1431
00:58:16,400 --> 00:58:19,119
file is downloaded and the performance

1432
00:58:19,119 --> 00:58:19,920
is

1433
00:58:19,920 --> 00:58:21,440
quite good for almost all

1434
00:58:21,440 --> 00:58:22,880
implementations

1435
00:58:22,880 --> 00:58:25,200
there is another performance test

1436
00:58:25,200 --> 00:58:28,000
where there is one competing tcp flow

1437
00:58:28,000 --> 00:58:30,079
and the results show some significant

1438
00:58:30,079 --> 00:58:32,000
unfairness

1439
00:58:32,000 --> 00:58:33,440
so what we pay

1440
00:58:33,440 --> 00:58:35,440
what we basically did is at

1441
00:58:35,440 --> 00:58:38,079
satellite-related performance tests um

1442
00:58:38,079 --> 00:58:41,200
shown in the table at the bottom right

1443
00:58:41,200 --> 00:58:43,200
first the terrestrial scenario is very

1444
00:58:43,200 --> 00:58:45,839
similar to the goodwood scenario

1445
00:58:45,839 --> 00:58:48,799
except that we use a link rate of 20

1446
00:58:48,799 --> 00:58:51,200
megabits per seconds in the forward link

1447
00:58:51,200 --> 00:58:52,960
and to make a bit per second in the

1448
00:58:52,960 --> 00:58:56,000
return link as a baseline for

1449
00:58:56,000 --> 00:58:58,880
most of our scenarios

1450
00:58:58,880 --> 00:59:02,319
then we have the set scenario which has

1451
00:59:02,319 --> 00:59:04,720
a rtt typical for geostationary

1452
00:59:04,720 --> 00:59:06,079
satellites

1453
00:59:06,079 --> 00:59:08,480
we have the sub-loss scenario which has

1454
00:59:08,480 --> 00:59:09,520
an

1455
00:59:09,520 --> 00:59:10,799
additional

1456
00:59:10,799 --> 00:59:12,720
random uniform packet loss of one

1457
00:59:12,720 --> 00:59:14,480
percent

1458
00:59:14,480 --> 00:59:16,160
and then we have two real satellite

1459
00:59:16,160 --> 00:59:17,520
operators

1460
00:59:17,520 --> 00:59:19,359
astra and oilsart

1461
00:59:19,359 --> 00:59:22,240
this required some modifications to the

1462
00:59:22,240 --> 00:59:24,960
interoperator

1463
00:59:24,960 --> 00:59:27,200
which we will see in the next slides

1464
00:59:27,200 --> 00:59:29,040
and what we also did was the generation

1465
00:59:29,040 --> 00:59:31,920
of time offset graphs which we will also

1466
00:59:31,920 --> 00:59:34,079
see in the next slides

1467
00:59:34,079 --> 00:59:36,000
next slide

1468
00:59:36,000 --> 00:59:38,079
so very brief the architecture of the

1469
00:59:38,079 --> 00:59:40,160
original quick indoor runner

1470
00:59:40,160 --> 00:59:42,000
it consists of docker containers running

1471
00:59:42,000 --> 00:59:44,000
on a single host machine

1472
00:59:44,000 --> 00:59:48,079
ns3 is used as a link emulation we have

1473
00:59:48,079 --> 00:59:49,359
12

1474
00:59:49,359 --> 00:59:51,440
quick client implementations and 13

1475
00:59:51,440 --> 00:59:52,319
quick

1476
00:59:52,319 --> 00:59:54,480
server implementations

1477
00:59:54,480 --> 00:59:57,280
and for each combination we run

1478
00:59:57,280 --> 00:59:59,599
10 iterations

1479
00:59:59,599 --> 01:00:02,559
and this setup is used for the emulated

1480
01:00:02,559 --> 01:00:06,079
scenarios terrestrial sut and satellites

1481
01:00:06,079 --> 01:00:08,480
so on the next slide we see the

1482
01:00:08,480 --> 01:00:10,960
modified architecture which integrates

1483
01:00:10,960 --> 01:00:12,960
real satellite links

1484
01:00:12,960 --> 01:00:14,640
in our case the client host in the

1485
01:00:14,640 --> 01:00:16,480
server host is located on different

1486
01:00:16,480 --> 01:00:18,559
machines

1487
01:00:18,559 --> 01:00:21,200
um so the client was directly connected

1488
01:00:21,200 --> 01:00:22,720
to the satellite modem whereas the

1489
01:00:22,720 --> 01:00:24,880
server host is located in the in our

1490
01:00:24,880 --> 01:00:26,559
university network

1491
01:00:26,559 --> 01:00:29,440
and the main modification is then that

1492
01:00:29,440 --> 01:00:32,160
client and servers are interfacing

1493
01:00:32,160 --> 01:00:35,920
with real interfaces

1494
01:00:37,450 --> 01:00:38,880
[Music]

1495
01:00:38,880 --> 01:00:41,040
there's only a single

1496
01:00:41,040 --> 01:00:43,359
vantage point so um

1497
01:00:43,359 --> 01:00:45,359
it's not very representative

1498
01:00:45,359 --> 01:00:47,599
but it's mainly used to check how well

1499
01:00:47,599 --> 01:00:50,319
does the emulation setups compare to the

1500
01:00:50,319 --> 01:00:52,880
real satellite links

1501
01:00:52,880 --> 01:00:53,760
um

1502
01:00:53,760 --> 01:00:56,559
yeah next slide

1503
01:00:56,559 --> 01:00:57,680
okay

1504
01:00:57,680 --> 01:00:59,359
so let's let's have a look at the

1505
01:00:59,359 --> 01:01:01,599
results on the left side we see the

1506
01:01:01,599 --> 01:01:04,319
satellite scenario with a

1507
01:01:04,319 --> 01:01:05,760
emulated

1508
01:01:05,760 --> 01:01:07,839
forward link of of 20 megabits per

1509
01:01:07,839 --> 01:01:09,200
seconds

1510
01:01:09,200 --> 01:01:11,920
um the first thing to note is that

1511
01:01:11,920 --> 01:01:14,799
in in legend the scaling

1512
01:01:14,799 --> 01:01:17,440
goes up to 10 megabits per seconds so it

1513
01:01:17,440 --> 01:01:19,760
never exceeds 10 megabits per seconds

1514
01:01:19,760 --> 01:01:20,640
although

1515
01:01:20,640 --> 01:01:22,480
the link capacity is 20 megabits per

1516
01:01:22,480 --> 01:01:24,880
seconds

1517
01:01:24,880 --> 01:01:27,200
the timeout for for one experiment is

1518
01:01:27,200 --> 01:01:29,920
such to two minutes so after two minutes

1519
01:01:29,920 --> 01:01:31,680
we are bored the test with a which is

1520
01:01:31,680 --> 01:01:34,400
denoted as a red t

1521
01:01:34,400 --> 01:01:36,880
in in case of any other failures um we

1522
01:01:36,880 --> 01:01:39,760
see a red cross

1523
01:01:39,760 --> 01:01:42,160
the servers server implementations are

1524
01:01:42,160 --> 01:01:43,520
shown in the

1525
01:01:43,520 --> 01:01:44,960
columns

1526
01:01:44,960 --> 01:01:46,559
and there you can see that mainly io

1527
01:01:46,559 --> 01:01:49,359
quick k-wick and ancient x is performing

1528
01:01:49,359 --> 01:01:51,040
rather poor

1529
01:01:51,040 --> 01:01:53,040
whereas the client implementations are

1530
01:01:53,040 --> 01:01:54,240
shown in the

1531
01:01:54,240 --> 01:01:55,440
in the rows

1532
01:01:55,440 --> 01:01:57,760
where k-wick move fast to some extent

1533
01:01:57,760 --> 01:02:00,960
nico and ng-tcp two are

1534
01:02:00,960 --> 01:02:03,839
not performing that good

1535
01:02:03,839 --> 01:02:06,559
um in general we see

1536
01:02:06,559 --> 01:02:09,599
very mixed results

1537
01:02:09,760 --> 01:02:11,440
on the right side we have the sub

1538
01:02:11,440 --> 01:02:13,280
scenario but with an additional packet

1539
01:02:13,280 --> 01:02:14,480
loss

1540
01:02:14,480 --> 01:02:15,760
and you can clearly see that the

1541
01:02:15,760 --> 01:02:17,680
performance decreases

1542
01:02:17,680 --> 01:02:20,160
um we have a lot of uh

1543
01:02:20,160 --> 01:02:22,240
we have a lot more timeouts also the

1544
01:02:22,240 --> 01:02:24,400
timeout was set to six minutes in this

1545
01:02:24,400 --> 01:02:26,319
scenario

1546
01:02:26,319 --> 01:02:28,720
and actually there are only

1547
01:02:28,720 --> 01:02:33,720
a few combinations which perform okay

1548
01:02:34,000 --> 01:02:37,039
okay in next slide

1549
01:02:39,039 --> 01:02:41,520
then we have the real satellite links on

1550
01:02:41,520 --> 01:02:43,280
the left side we have asper which again

1551
01:02:43,280 --> 01:02:45,680
uses the baseline of 20

1552
01:02:45,680 --> 01:02:49,520
megabits per seconds in the forward link

1553
01:02:49,520 --> 01:02:51,440
results are again mixed

1554
01:02:51,440 --> 01:02:53,119
some implementations

1555
01:02:53,119 --> 01:02:54,640
work quite well

1556
01:02:54,640 --> 01:02:56,640
some don't

1557
01:02:56,640 --> 01:03:00,160
i won't go into details here

1558
01:03:00,240 --> 01:03:02,400
maybe on the on on the right side we see

1559
01:03:02,400 --> 01:03:04,960
oilsat we said which has a link capacity

1560
01:03:04,960 --> 01:03:07,039
which is twice as much as the other

1561
01:03:07,039 --> 01:03:08,319
scenarios

1562
01:03:08,319 --> 01:03:10,720
um from looking at the legend you see

1563
01:03:10,720 --> 01:03:12,480
that the absolute

1564
01:03:12,480 --> 01:03:14,799
good put wells are slightly higher but

1565
01:03:14,799 --> 01:03:17,280
compared to the link capacity the

1566
01:03:17,280 --> 01:03:19,440
higher

1567
01:03:19,440 --> 01:03:21,520
the good puts are still not very

1568
01:03:21,520 --> 01:03:24,480
very satisfying

1569
01:03:25,280 --> 01:03:28,079
okay next slide

1570
01:03:28,559 --> 01:03:32,160
then we have a summary of the results uh

1571
01:03:32,160 --> 01:03:34,640
considering all implementations

1572
01:03:34,640 --> 01:03:35,520
um

1573
01:03:35,520 --> 01:03:38,319
we use this metric the link utilization

1574
01:03:38,319 --> 01:03:40,079
defined as good put

1575
01:03:40,079 --> 01:03:42,160
divided by the link.rate

1576
01:03:42,160 --> 01:03:43,760
and here you can clearly see that the

1577
01:03:43,760 --> 01:03:45,920
satellite scenarios are

1578
01:03:45,920 --> 01:03:50,079
way beyond the terrestrial link um

1579
01:03:50,079 --> 01:03:52,079
in term of absolute numbers oilsat has

1580
01:03:52,079 --> 01:03:53,920
the

1581
01:03:53,920 --> 01:03:56,079
the highest values but again

1582
01:03:56,079 --> 01:03:58,400
compared to the link capacity and

1583
01:03:58,400 --> 01:04:01,280
it's it's not really

1584
01:04:01,280 --> 01:04:03,440
beneficial

1585
01:04:03,440 --> 01:04:05,200
the the hiring capacity is not really

1586
01:04:05,200 --> 01:04:07,760
beneficial

1587
01:04:07,760 --> 01:04:10,839
okay so next slide

1588
01:04:10,839 --> 01:04:14,400
um now we try to understand why the

1589
01:04:14,400 --> 01:04:16,640
implementations before before performed

1590
01:04:16,640 --> 01:04:17,920
differently

1591
01:04:17,920 --> 01:04:19,119
um

1592
01:04:19,119 --> 01:04:21,119
we try to look into which congestion

1593
01:04:21,119 --> 01:04:22,480
control algorithms are the

1594
01:04:22,480 --> 01:04:24,400
implementations using

1595
01:04:24,400 --> 01:04:25,280
um

1596
01:04:25,280 --> 01:04:27,760
so this table is not guaranteed to be

1597
01:04:27,760 --> 01:04:29,760
100 correct we

1598
01:04:29,760 --> 01:04:31,839
try to look at the code and the command

1599
01:04:31,839 --> 01:04:34,799
line parameters and the documentation

1600
01:04:34,799 --> 01:04:38,480
um then we created a correlation plot

1601
01:04:38,480 --> 01:04:40,480
which has the link utilization of the

1602
01:04:40,480 --> 01:04:43,359
sub scenario on the x-axis and the

1603
01:04:43,359 --> 01:04:45,280
link utilization of the satellite

1604
01:04:45,280 --> 01:04:47,599
scenario on the y-axis

1605
01:04:47,599 --> 01:04:49,599
you can clearly see that the

1606
01:04:49,599 --> 01:04:51,520
implementations which are using renewal

1607
01:04:51,520 --> 01:04:52,720
or nerium

1608
01:04:52,720 --> 01:04:54,559
do not perform well in the satellite

1609
01:04:54,559 --> 01:04:55,770
scenario

1610
01:04:55,770 --> 01:04:56,960
[Music]

1611
01:04:56,960 --> 01:05:00,000
regarding cubic there are a few

1612
01:05:00,000 --> 01:05:01,599
most

1613
01:05:01,599 --> 01:05:03,359
implementations perform well in the

1614
01:05:03,359 --> 01:05:05,920
satellite scenario with a few exceptions

1615
01:05:05,920 --> 01:05:09,039
and bvr performs equally well in the sat

1616
01:05:09,039 --> 01:05:11,359
and the satellite scenario

1617
01:05:11,359 --> 01:05:14,480
what we did not look at yet uh is the is

1618
01:05:14,480 --> 01:05:16,799
the impact of flow control

1619
01:05:16,799 --> 01:05:17,680
which

1620
01:05:17,680 --> 01:05:19,920
of course is also important especially

1621
01:05:19,920 --> 01:05:21,599
regarding

1622
01:05:21,599 --> 01:05:23,520
because when the client has

1623
01:05:23,520 --> 01:05:25,839
limited flow control

1624
01:05:25,839 --> 01:05:29,920
then the server cannot do much about it

1625
01:05:30,079 --> 01:05:33,039
okay next slide

1626
01:05:33,680 --> 01:05:35,440
to further understand the behavior of

1627
01:05:35,440 --> 01:05:37,440
the implementations we try to

1628
01:05:37,440 --> 01:05:39,920
automatically create time offset

1629
01:05:39,920 --> 01:05:41,680
diagrams

1630
01:05:41,680 --> 01:05:43,039
this was not possible for every

1631
01:05:43,039 --> 01:05:46,240
combination due to various reasons

1632
01:05:46,240 --> 01:05:49,359
but i've picked four exemplary

1633
01:05:49,359 --> 01:05:51,119
time offset diagrams which we can look

1634
01:05:51,119 --> 01:05:52,079
at

1635
01:05:52,079 --> 01:05:55,599
so the first one on the next slide

1636
01:05:57,280 --> 01:05:59,920
so we have 10 iterations

1637
01:05:59,920 --> 01:06:00,880
and the

1638
01:06:00,880 --> 01:06:03,520
iteration with median and finish time is

1639
01:06:03,520 --> 01:06:06,640
is highlighted

1640
01:06:06,720 --> 01:06:08,640
so here we have k waker server and ms

1641
01:06:08,640 --> 01:06:10,559
quick as client

1642
01:06:10,559 --> 01:06:12,720
you can see that this slow start takes

1643
01:06:12,720 --> 01:06:13,680
very long

1644
01:06:13,680 --> 01:06:15,760
roughly 10 seconds and this is a problem

1645
01:06:15,760 --> 01:06:17,039
for many combinations and

1646
01:06:17,039 --> 01:06:18,960
implementations

1647
01:06:18,960 --> 01:06:21,680
we then see kind of a bursty behavior

1648
01:06:21,680 --> 01:06:24,319
and we see that the sending rate of a

1649
01:06:24,319 --> 01:06:26,359
few iterations

1650
01:06:26,359 --> 01:06:28,720
significantly significantly differs from

1651
01:06:28,720 --> 01:06:31,119
the other runs

1652
01:06:31,119 --> 01:06:35,119
um yeah next slide

1653
01:06:36,240 --> 01:06:39,760
um for the next um example we are still

1654
01:06:39,760 --> 01:06:41,520
we are still in the sub scenario without

1655
01:06:41,520 --> 01:06:43,680
artificial loss but we see a many

1656
01:06:43,680 --> 01:06:45,599
retransmissions

1657
01:06:45,599 --> 01:06:48,240
marked as orange points

1658
01:06:48,240 --> 01:06:51,520
what's interesting here is that

1659
01:06:51,520 --> 01:06:54,720
at five seconds the offset numbers

1660
01:06:54,720 --> 01:06:56,640
offset numbers are not sent continuously

1661
01:06:56,640 --> 01:06:58,640
so there are gaps in sending the offset

1662
01:06:58,640 --> 01:07:00,640
numbers and these gaps are then

1663
01:07:00,640 --> 01:07:03,280
transmitted at six seconds

1664
01:07:03,280 --> 01:07:05,599
so the two parallel lines

1665
01:07:05,599 --> 01:07:07,680
at five and six seconds are not

1666
01:07:07,680 --> 01:07:11,039
retransmissions at six seconds

1667
01:07:11,039 --> 01:07:11,920
so

1668
01:07:11,920 --> 01:07:14,480
we do not have really an idea

1669
01:07:14,480 --> 01:07:18,160
what's going on in such implementations

1670
01:07:18,160 --> 01:07:20,000
on the next slide

1671
01:07:20,000 --> 01:07:21,599
we have an example of the sub loss

1672
01:07:21,599 --> 01:07:23,440
scenario and this is actually an example

1673
01:07:23,440 --> 01:07:25,280
which works very well

1674
01:07:25,280 --> 01:07:27,039
we have pico quick both as client and

1675
01:07:27,039 --> 01:07:28,400
server

1676
01:07:28,400 --> 01:07:31,200
we have a very quick ramp up we have

1677
01:07:31,200 --> 01:07:33,119
the retransmissions due to the packet

1678
01:07:33,119 --> 01:07:35,520
loss and we have speculative

1679
01:07:35,520 --> 01:07:37,440
retransmissions at the end

1680
01:07:37,440 --> 01:07:39,440
which is probably very helpful for such

1681
01:07:39,440 --> 01:07:42,559
high latency links

1682
01:07:42,559 --> 01:07:44,240
okay um

1683
01:07:44,240 --> 01:07:45,599
next slide

1684
01:07:45,599 --> 01:07:47,520
we have uh

1685
01:07:47,520 --> 01:07:49,359
another example which does not work that

1686
01:07:49,359 --> 01:07:50,160
well

1687
01:07:50,160 --> 01:07:53,599
ms quicker server and x quick as client

1688
01:07:53,599 --> 01:07:56,240
so you can see the that the sending rate

1689
01:07:56,240 --> 01:07:58,960
goes up and down a lot and the overall

1690
01:07:58,960 --> 01:08:00,079
time is

1691
01:08:00,079 --> 01:08:02,640
yeah it takes really long for for

1692
01:08:02,640 --> 01:08:03,680
for

1693
01:08:03,680 --> 01:08:07,039
transmission of a 10 megabyte file

1694
01:08:07,039 --> 01:08:08,000
okay

1695
01:08:08,000 --> 01:08:10,799
so the summary we have modified the

1696
01:08:10,799 --> 01:08:12,160
quick intro runner

1697
01:08:12,160 --> 01:08:14,240
we included emulated satellite links and

1698
01:08:14,240 --> 01:08:16,319
real satellite operators

1699
01:08:16,319 --> 01:08:18,880
and we also automatically generate

1700
01:08:18,880 --> 01:08:21,839
generated time offset diagrams

1701
01:08:21,839 --> 01:08:24,479
the key message is probably that

1702
01:08:24,479 --> 01:08:26,238
quick over geostationary satellite links

1703
01:08:26,238 --> 01:08:27,520
is still

1704
01:08:27,520 --> 01:08:29,520
performs very poor

1705
01:08:29,520 --> 01:08:31,520
it's worse with packet loss

1706
01:08:31,520 --> 01:08:33,359
the performance depends on both client

1707
01:08:33,359 --> 01:08:35,520
and server

1708
01:08:35,520 --> 01:08:36,799
of course

1709
01:08:36,799 --> 01:08:39,120
some open implementations might be proof

1710
01:08:39,120 --> 01:08:41,120
of concept implementations they are

1711
01:08:41,120 --> 01:08:42,319
probably not

1712
01:08:42,319 --> 01:08:43,600
optimized for

1713
01:08:43,600 --> 01:08:47,600
satellite links um but we also saw a

1714
01:08:47,600 --> 01:08:50,238
big great variation some implementations

1715
01:08:50,238 --> 01:08:51,279
do okay

1716
01:08:51,279 --> 01:08:53,920
others do not that good

1717
01:08:53,920 --> 01:08:56,238
for us it was very hard to debug each

1718
01:08:56,238 --> 01:08:58,080
and every implementation or combination

1719
01:08:58,080 --> 01:09:00,399
in detail simply because there are

1720
01:09:00,399 --> 01:09:02,880
quite a lot of implementations

1721
01:09:02,880 --> 01:09:06,158
um but his next steps we try to get do

1722
01:09:06,158 --> 01:09:08,238
some more detailed analysis

1723
01:09:08,238 --> 01:09:10,799
uh maybe consider the influence of the

1724
01:09:10,799 --> 01:09:12,080
flow control

1725
01:09:12,080 --> 01:09:14,560
at some first further test scenarios and

1726
01:09:14,560 --> 01:09:16,238
long-term measurements

1727
01:09:16,238 --> 01:09:17,679
um because we

1728
01:09:17,679 --> 01:09:19,520
we think that the interpreter is really

1729
01:09:19,520 --> 01:09:20,799
helpful

1730
01:09:20,799 --> 01:09:23,920
for us to to to test the performance of

1731
01:09:23,920 --> 01:09:26,000
multiple of a broad range of quick

1732
01:09:26,000 --> 01:09:27,920
implementations

1733
01:09:27,920 --> 01:09:30,479
yeah in case of any discussions um i'd

1734
01:09:30,479 --> 01:09:32,960
like to welcome you uh to invite you to

1735
01:09:32,960 --> 01:09:34,880
the itunes mailing list

1736
01:09:34,880 --> 01:09:36,479
thanks

1737
01:09:36,479 --> 01:09:38,719
yeah thanks a lot i'm very interesting

1738
01:09:38,719 --> 01:09:42,080
so you're you're keep trying to debug or

1739
01:09:42,080 --> 01:09:44,479
look into implementations finding out

1740
01:09:44,479 --> 01:09:45,839
what the problems are are you also

1741
01:09:45,839 --> 01:09:47,600
talking to the implementers directly

1742
01:09:47,600 --> 01:09:49,839
yeah we have received some feedback

1743
01:09:49,839 --> 01:09:52,319
already which is very very good

1744
01:09:52,319 --> 01:09:54,320
um but like really understanding the

1745
01:09:54,320 --> 01:09:58,159
code of every implementation is just

1746
01:09:58,239 --> 01:10:00,400
yeah it takes a lot of time yeah

1747
01:10:00,400 --> 01:10:02,320
okay we have the cu hamas

1748
01:10:02,320 --> 01:10:05,360
hello hamas uh university of iowa so i

1749
01:10:05,360 --> 01:10:07,040
do understand that a very interesting

1750
01:10:07,040 --> 01:10:09,199
talk first of all so

1751
01:10:09,199 --> 01:10:10,480
uh

1752
01:10:10,480 --> 01:10:11,840
i understand that the performance is

1753
01:10:11,840 --> 01:10:13,679
very poor for quick and geostation

1754
01:10:13,679 --> 01:10:16,400
satellites but how do so can this

1755
01:10:16,400 --> 01:10:18,080
study be kind of like

1756
01:10:18,080 --> 01:10:20,159
transferred over to lower earth orbit so

1757
01:10:20,159 --> 01:10:22,719
something like starlink and what would

1758
01:10:22,719 --> 01:10:24,719
that look like like would quick still

1759
01:10:24,719 --> 01:10:26,560
perform very poor because now you're

1760
01:10:26,560 --> 01:10:28,239
connected to a satellite for let's say

1761
01:10:28,239 --> 01:10:30,239
six minutes at max and then the

1762
01:10:30,239 --> 01:10:32,000
satellites keep on changing so how would

1763
01:10:32,000 --> 01:10:34,320
this study transfer over to lower earth

1764
01:10:34,320 --> 01:10:36,080
orbits yeah satellites

1765
01:10:36,080 --> 01:10:37,840
thanks for the question we actually have

1766
01:10:37,840 --> 01:10:39,520
some performance measurements with

1767
01:10:39,520 --> 01:10:40,800
starlink already

1768
01:10:40,800 --> 01:10:43,040
there on the website um starlink in

1769
01:10:43,040 --> 01:10:45,280
general performs quite well it does not

1770
01:10:45,280 --> 01:10:47,600
have the problem of the high latency

1771
01:10:47,600 --> 01:10:49,440
um

1772
01:10:49,440 --> 01:10:51,360
so

1773
01:10:51,360 --> 01:10:53,600
yeah

1774
01:10:53,600 --> 01:10:55,760
it seems to work better but we are also

1775
01:10:55,760 --> 01:10:57,360
interested in making quick work over

1776
01:10:57,360 --> 01:10:59,760
geostationary satellite links but on

1777
01:10:59,760 --> 01:11:01,760
this there's still problems with with

1778
01:11:01,760 --> 01:11:04,000
every five minutes as that satellite

1779
01:11:04,000 --> 01:11:06,480
changes so you have that additional that

1780
01:11:06,480 --> 01:11:08,560
hand hand off time so whenever that

1781
01:11:08,560 --> 01:11:11,600
comes in would that affect uh these uh

1782
01:11:11,600 --> 01:11:14,159
measurements um we don't know yet okay

1783
01:11:14,159 --> 01:11:17,679
all right try to look into this but

1784
01:11:22,800 --> 01:11:24,560
lorenzo coletti i'm just just really out

1785
01:11:24,560 --> 01:11:27,280
of curiosity if there's

1786
01:11:27,280 --> 01:11:29,520
if you've taken any sort of suggestions

1787
01:11:29,520 --> 01:11:31,199
to the quick implementers like about

1788
01:11:31,199 --> 01:11:33,199
what to do like one one like obvious and

1789
01:11:33,199 --> 01:11:34,800
probably very stupid thing to do is if

1790
01:11:34,800 --> 01:11:36,320
the latency is more than 500

1791
01:11:36,320 --> 01:11:38,080
milliseconds just be a bit more

1792
01:11:38,080 --> 01:11:39,600
aggressive because like that doesn't

1793
01:11:39,600 --> 01:11:41,280
happen on wired links but i don't know

1794
01:11:41,280 --> 01:11:42,960
if that's like just really stupid or

1795
01:11:42,960 --> 01:11:45,280
only stupid so that's just really out of

1796
01:11:45,280 --> 01:11:47,760
curiosity like what you know have you

1797
01:11:47,760 --> 01:11:49,199
thought about what to do you've got the

1798
01:11:49,199 --> 01:11:50,400
data right

1799
01:11:50,400 --> 01:11:51,360
so

1800
01:11:51,360 --> 01:11:52,560
it would be good you know i'm sure

1801
01:11:52,560 --> 01:11:53,679
you're sharing the data with them but

1802
01:11:53,679 --> 01:11:56,000
also like if you said hey like

1803
01:11:56,000 --> 01:11:57,440
if you could experiment for example like

1804
01:11:57,440 --> 01:11:59,120
see hey this works this doesn't work

1805
01:11:59,120 --> 01:12:00,480
just out of curiosity again maybe you've

1806
01:12:00,480 --> 01:12:01,520
done nothing

1807
01:12:01,520 --> 01:12:03,600
so

1808
01:12:03,600 --> 01:12:06,239
the if statement in the code

1809
01:12:06,239 --> 01:12:08,080
like i am on a satellite link actually

1810
01:12:08,080 --> 01:12:10,640
pickle creek does just does do this

1811
01:12:10,640 --> 01:12:12,719
um there are other approaches which have

1812
01:12:12,719 --> 01:12:14,080
been discussed in the quick working

1813
01:12:14,080 --> 01:12:15,840
group yesterday

1814
01:12:15,840 --> 01:12:18,560
it helps it helps

1815
01:12:18,560 --> 01:12:20,080
pick a quick is one of the better uh

1816
01:12:20,080 --> 01:12:21,280
performing implementations over

1817
01:12:21,280 --> 01:12:22,640
satellite links

1818
01:12:22,640 --> 01:12:23,679
so

1819
01:12:23,679 --> 01:12:24,800
um

1820
01:12:24,800 --> 01:12:26,560
there are other approaches like the zero

1821
01:12:26,560 --> 01:12:29,199
rtt pdp approach which was discussed in

1822
01:12:29,199 --> 01:12:31,520
the quick working group yesterday

1823
01:12:31,520 --> 01:12:32,480
and

1824
01:12:32,480 --> 01:12:33,840
of course you have to do parameter

1825
01:12:33,840 --> 01:12:36,640
tuning and then the question is how how

1826
01:12:36,640 --> 01:12:37,920
does

1827
01:12:37,920 --> 01:12:39,520
a good contestion control are going to

1828
01:12:39,520 --> 01:12:41,520
look like for such kind of links so

1829
01:12:41,520 --> 01:12:45,280
these are all very basic questions

1830
01:12:45,280 --> 01:12:46,560
but it already helps if the

1831
01:12:46,560 --> 01:12:48,800
implementations simply

1832
01:12:48,800 --> 01:12:51,280
add a satellite test case to their

1833
01:12:51,280 --> 01:12:53,040
benchmark scenarios that would really

1834
01:12:53,040 --> 01:12:55,199
help a lot because a lot of

1835
01:12:55,199 --> 01:12:57,199
papers and

1836
01:12:57,199 --> 01:12:59,280
and so on they simply don't consider

1837
01:12:59,280 --> 01:13:01,679
this kind of link which is a

1838
01:13:01,679 --> 01:13:02,800
bit sad

1839
01:13:02,800 --> 01:13:05,120
and i hope to

1840
01:13:05,120 --> 01:13:07,760
motivate the quick implementers to to

1841
01:13:07,760 --> 01:13:09,679
have a look at this kind of links

1842
01:13:09,679 --> 01:13:12,080
very interesting right i actually have a

1843
01:13:12,080 --> 01:13:13,679
my own high latency link it's not a

1844
01:13:13,679 --> 01:13:15,600
satellite link but it's uh

1845
01:13:15,600 --> 01:13:17,600
and uh i had to write my own performance

1846
01:13:17,600 --> 01:13:19,840
enhancing proxies for tcp

1847
01:13:19,840 --> 01:13:22,080
and you know it's yeah so thank you very

1848
01:13:22,080 --> 01:13:23,040
interesting

1849
01:13:23,040 --> 01:13:25,280
thanks

1850
01:13:26,000 --> 01:13:28,560
yeah thank you i think uh yeah that's at

1851
01:13:28,560 --> 01:13:29,840
the end of the queue

1852
01:13:29,840 --> 01:13:32,480
um and we move over to matthias at this

1853
01:13:32,480 --> 01:13:35,480
point

1854
01:13:56,320 --> 01:13:58,960
so yeah hello everybody

1855
01:13:58,960 --> 01:14:02,560
and this is a talk about quick and um

1856
01:14:02,560 --> 01:14:04,640
ddos scanning oops

1857
01:14:04,640 --> 01:14:07,520
just take it out

1858
01:14:07,600 --> 01:14:09,679
yeah hello so this is a talk about quick

1859
01:14:09,679 --> 01:14:10,880
and the measurement study that we

1860
01:14:10,880 --> 01:14:12,400
conducted

1861
01:14:12,400 --> 01:14:14,480
last year to better understand whether

1862
01:14:14,480 --> 01:14:17,840
quick is used to conduct um ddos attacks

1863
01:14:17,840 --> 01:14:19,920
and this joint work with marcin rafael

1864
01:14:19,920 --> 01:14:22,080
and thomas and presented was presented

1865
01:14:22,080 --> 01:14:23,679
last year at imc

1866
01:14:23,679 --> 01:14:27,360
so next slide please um

1867
01:14:27,360 --> 01:14:29,840
so in a nutshell the main takeaway of

1868
01:14:29,840 --> 01:14:32,080
this message um is we are asked the

1869
01:14:32,080 --> 01:14:34,400
question is a quick use for ddos and the

1870
01:14:34,400 --> 01:14:36,080
answer is yes

1871
01:14:36,080 --> 01:14:38,000
and we measured this based on data from

1872
01:14:38,000 --> 01:14:40,239
a network telescope so now i want to

1873
01:14:40,239 --> 01:14:42,320
present you a little bit more in details

1874
01:14:42,320 --> 01:14:44,560
next slide please

1875
01:14:44,560 --> 01:14:47,120
so just as a brief recap

1876
01:14:47,120 --> 01:14:48,400
quick

1877
01:14:48,400 --> 01:14:50,400
is based on udp

1878
01:14:50,400 --> 01:14:52,960
and has to pick a udp property so

1879
01:14:52,960 --> 01:14:55,280
usually it does not have

1880
01:14:55,280 --> 01:14:57,520
states and it's based on udp course to

1881
01:14:57,520 --> 01:14:58,560
prevent

1882
01:14:58,560 --> 01:15:00,719
ossification attacks on the other end it

1883
01:15:00,719 --> 01:15:02,960
has also some properties

1884
01:15:02,960 --> 01:15:05,040
inherited from tcp

1885
01:15:05,040 --> 01:15:07,199
because it needs to actually implement

1886
01:15:07,199 --> 01:15:10,640
states it is connection oriented and

1887
01:15:10,640 --> 01:15:13,840
this leads to some vulnerability next

1888
01:15:13,840 --> 01:15:16,159
slide

1889
01:15:16,159 --> 01:15:18,480
so the main one of the main design

1890
01:15:18,480 --> 01:15:20,640
decision or options for quick was to

1891
01:15:20,640 --> 01:15:23,040
actually delay

1892
01:15:23,040 --> 01:15:25,520
to reduce delays on the one hand and i

1893
01:15:25,520 --> 01:15:27,440
had to make it robust against a typical

1894
01:15:27,440 --> 01:15:29,440
deny of service attacks

1895
01:15:29,440 --> 01:15:30,880
and

1896
01:15:30,880 --> 01:15:32,560
the typical quick handshake looks like

1897
01:15:32,560 --> 01:15:33,920
this

1898
01:15:33,920 --> 01:15:36,400
client sends an initial message to

1899
01:15:36,400 --> 01:15:38,400
initiate the handshake and the server

1900
01:15:38,400 --> 01:15:40,239
responds with two with the initial

1901
01:15:40,239 --> 01:15:41,840
message with the server hello and the

1902
01:15:41,840 --> 01:15:44,000
tls handshake and after this first

1903
01:15:44,000 --> 01:15:45,440
roundup time

1904
01:15:45,440 --> 01:15:48,159
a client can already send

1905
01:15:48,159 --> 01:15:50,320
data to the quick server and the server

1906
01:15:50,320 --> 01:15:51,679
will reply

1907
01:15:51,679 --> 01:15:53,360
next slide please

1908
01:15:53,360 --> 01:15:54,480
um

1909
01:15:54,480 --> 01:15:55,520
and

1910
01:15:55,520 --> 01:15:57,679
yeah so the point here is that the

1911
01:15:57,679 --> 01:16:00,800
server replies to a source even though

1912
01:16:00,800 --> 01:16:02,960
the source is not verified which is very

1913
01:16:02,960 --> 01:16:06,080
important so next slide

1914
01:16:06,080 --> 01:16:08,239
and this behavior makes a

1915
01:16:08,239 --> 01:16:10,960
quick server vulnerable to two types of

1916
01:16:10,960 --> 01:16:13,360
attacks the first attack is a

1917
01:16:13,360 --> 01:16:15,600
reflective amplification attack but this

1918
01:16:15,600 --> 01:16:17,679
idea here the idea is that attacker

1919
01:16:17,679 --> 01:16:20,800
sends an initial message to a server but

1920
01:16:20,800 --> 01:16:23,440
use a spoofed source address and the

1921
01:16:23,440 --> 01:16:27,520
server will reply um to the spoofed

1922
01:16:27,520 --> 01:16:29,679
to the spoof source address

1923
01:16:29,679 --> 01:16:31,440
and instead of sending one a packet it

1924
01:16:31,440 --> 01:16:33,280
will send two packets so the server

1925
01:16:33,280 --> 01:16:36,000
actually reflects the

1926
01:16:36,000 --> 01:16:37,760
initial message and amplifies the

1927
01:16:37,760 --> 01:16:40,159
initial message the question here is

1928
01:16:40,159 --> 01:16:41,840
whether this is a likely attack next

1929
01:16:41,840 --> 01:16:44,080
slide and the answer is it's rather

1930
01:16:44,080 --> 01:16:45,520
unlikely it may happen but it is

1931
01:16:45,520 --> 01:16:47,840
unlikely because quick by design allows

1932
01:16:47,840 --> 01:16:51,040
this client only a server only to reply

1933
01:16:51,040 --> 01:16:53,840
uh three times more volume compared to

1934
01:16:53,840 --> 01:16:55,440
what the initial

1935
01:16:55,440 --> 01:16:57,360
client was sending we heard this already

1936
01:16:57,360 --> 01:16:58,880
in the previous talk

1937
01:16:58,880 --> 01:17:01,679
first and second and so it is limited

1938
01:17:01,679 --> 01:17:03,920
amplification volume is limited by a

1939
01:17:03,920 --> 01:17:06,640
factor of three and and second there are

1940
01:17:06,640 --> 01:17:09,520
many many more udp-based uh protocols

1941
01:17:09,520 --> 01:17:11,360
available that allow for much higher

1942
01:17:11,360 --> 01:17:14,480
amplification factors such as dns or ndp

1943
01:17:14,480 --> 01:17:17,199
so this is a possible attack but by

1944
01:17:17,199 --> 01:17:19,760
design is limited and rather unlikely

1945
01:17:19,760 --> 01:17:21,040
next slide

1946
01:17:21,040 --> 01:17:23,920
the second type of attack that the

1947
01:17:23,920 --> 01:17:25,920
attacker might conduct is a resource

1948
01:17:25,920 --> 01:17:27,360
extortion attack

1949
01:17:27,360 --> 01:17:29,360
and the idea here is that the attacker

1950
01:17:29,360 --> 01:17:32,000
sends an initial message again using

1951
01:17:32,000 --> 01:17:34,719
sports source ip addresses to allocate

1952
01:17:34,719 --> 01:17:36,719
states at the server side and the server

1953
01:17:36,719 --> 01:17:38,000
will reply

1954
01:17:38,000 --> 01:17:40,159
as usual within the first round to type

1955
01:17:40,159 --> 01:17:42,159
this initial message and that is

1956
01:17:42,159 --> 01:17:45,520
handshake message um and this is sent

1957
01:17:45,520 --> 01:17:47,440
back to the source to the support uh

1958
01:17:47,440 --> 01:17:50,880
source ip address and um ideally this

1959
01:17:50,880 --> 01:17:52,560
source address does not

1960
01:17:52,560 --> 01:17:55,199
i mean is offline so it will not reply

1961
01:17:55,199 --> 01:17:56,880
at all with so reset or something like

1962
01:17:56,880 --> 01:17:59,280
this which means that the server

1963
01:17:59,280 --> 01:18:01,199
allocates states for a decent amount of

1964
01:18:01,199 --> 01:18:03,920
time and if the attacker has a

1965
01:18:03,920 --> 01:18:05,360
distributed

1966
01:18:05,360 --> 01:18:08,800
botnet for example and floods the server

1967
01:18:08,800 --> 01:18:09,760
the

1968
01:18:09,760 --> 01:18:11,520
the local queue at the server will fill

1969
01:18:11,520 --> 01:18:14,239
up and the server will not be able to

1970
01:18:14,239 --> 01:18:16,800
reply anymore or even to a benign

1971
01:18:16,800 --> 01:18:18,320
request

1972
01:18:18,320 --> 01:18:21,360
so and in addition to this to allocating

1973
01:18:21,360 --> 01:18:24,080
state it also introduced computational

1974
01:18:24,080 --> 01:18:25,280
resources

1975
01:18:25,280 --> 01:18:27,679
um because of the cryptographic glsen

1976
01:18:27,679 --> 01:18:29,120
shake next slide

1977
01:18:29,120 --> 01:18:32,960
and um these replies from the server to

1978
01:18:32,960 --> 01:18:35,520
the support source ip address can be

1979
01:18:35,520 --> 01:18:37,920
observed and a typical

1980
01:18:37,920 --> 01:18:39,920
measurement infrastructure to observe

1981
01:18:39,920 --> 01:18:41,199
spoofed

1982
01:18:41,199 --> 01:18:44,719
packets are network telescopes

1983
01:18:44,719 --> 01:18:47,679
and these tele telescopes actually will

1984
01:18:47,679 --> 01:18:49,199
receive

1985
01:18:49,199 --> 01:18:50,239
packets

1986
01:18:50,239 --> 01:18:51,280
that

1987
01:18:51,280 --> 01:18:53,679
are spoofed with ip doses from the

1988
01:18:53,679 --> 01:18:56,960
network telescope ip prefix

1989
01:18:56,960 --> 01:18:58,080
and

1990
01:18:58,080 --> 01:18:59,600
in our measurement study we leveraged

1991
01:18:59,600 --> 01:19:01,840
this telescope such a telescope next

1992
01:19:01,840 --> 01:19:04,320
slide what we actually did is

1993
01:19:04,320 --> 01:19:05,520
that we

1994
01:19:05,520 --> 01:19:08,880
analyzed data from the ucsd slash kaiba

1995
01:19:08,880 --> 01:19:11,600
telescope which is a slash noise prefix

1996
01:19:11,600 --> 01:19:13,679
or as a large

1997
01:19:13,679 --> 01:19:16,719
address space which allows us to capture

1998
01:19:16,719 --> 01:19:19,280
more than two percent of the actual ipv4

1999
01:19:19,280 --> 01:19:21,679
address space so that's only focusing on

2000
01:19:21,679 --> 01:19:24,080
ipv4 as we heard in the previous talk

2001
01:19:24,080 --> 01:19:26,640
um measuring um

2002
01:19:26,640 --> 01:19:28,880
malicious traffic in ipv6 space is a

2003
01:19:28,880 --> 01:19:30,000
different story and much more

2004
01:19:30,000 --> 01:19:31,280
complicated

2005
01:19:31,280 --> 01:19:33,280
um and we did this for a whole month

2006
01:19:33,280 --> 01:19:35,800
into an april uh

2007
01:19:35,800 --> 01:19:37,440
2021

2008
01:19:37,440 --> 01:19:41,120
and this telescope receives a lot of

2009
01:19:41,120 --> 01:19:42,960
malicious traffic it's not only quick

2010
01:19:42,960 --> 01:19:45,199
scans or a quick back scatter but also

2011
01:19:45,199 --> 01:19:48,560
tcp scans tcp back together and so on so

2012
01:19:48,560 --> 01:19:50,640
next slide what we did is we need to

2013
01:19:50,640 --> 01:19:51,840
distinguish

2014
01:19:51,840 --> 01:19:53,199
um

2015
01:19:53,199 --> 01:19:54,320
this

2016
01:19:54,320 --> 01:19:57,760
quick traffic and how did we do this we

2017
01:19:57,760 --> 01:20:00,400
um did first and uh port-based

2018
01:20:00,400 --> 01:20:02,560
classification so we filtered for all

2019
01:20:02,560 --> 01:20:05,440
udp for 443 traffic

2020
01:20:05,440 --> 01:20:07,840
and um this is a very common method to

2021
01:20:07,840 --> 01:20:09,360
distinguish quick traffic from other

2022
01:20:09,360 --> 01:20:11,760
traffic but we also applied some kind of

2023
01:20:11,760 --> 01:20:14,239
the packet inspection to exclude for its

2024
01:20:14,239 --> 01:20:16,880
positives and for this um we use the

2025
01:20:16,880 --> 01:20:19,840
bioshark detectors and we also did some

2026
01:20:19,840 --> 01:20:21,520
manual verification so we were very sure

2027
01:20:21,520 --> 01:20:24,000
that the traffic that we identified were

2028
01:20:24,000 --> 01:20:25,600
actually quick driving

2029
01:20:25,600 --> 01:20:27,760
and uh based on this this denver

2030
01:20:27,760 --> 01:20:30,159
telescope and our um

2031
01:20:30,159 --> 01:20:31,600
let's say to identify the quick traffic

2032
01:20:31,600 --> 01:20:35,440
we detected 92 million quick packets

2033
01:20:35,440 --> 01:20:37,760
and then we distinguish this or split

2034
01:20:37,760 --> 01:20:40,480
this traffic into types um request and

2035
01:20:40,480 --> 01:20:43,360
response so requests are packets that

2036
01:20:43,360 --> 01:20:46,480
are sent to the udp 443 and responses

2037
01:20:46,480 --> 01:20:47,760
are

2038
01:20:47,760 --> 01:20:49,760
so the destination port udp 443 and

2039
01:20:49,760 --> 01:20:51,120
responses are

2040
01:20:51,120 --> 01:20:54,080
packets that included the

2041
01:20:54,080 --> 01:20:57,360
source port udp 443 and requests are

2042
01:20:57,360 --> 01:20:59,600
packets that are more or less scans

2043
01:20:59,600 --> 01:21:01,920
now i mean as we heard researchers do

2044
01:21:01,920 --> 01:21:04,719
scans for example um to find quick

2045
01:21:04,719 --> 01:21:06,960
servers and the responses are

2046
01:21:06,960 --> 01:21:10,800
backscatter traffic so traffic that was

2047
01:21:10,800 --> 01:21:12,719
sent from a quick server back to the

2048
01:21:12,719 --> 01:21:14,880
spoofed ip address so response

2049
01:21:14,880 --> 01:21:18,480
okay next slide um when you then but

2050
01:21:18,480 --> 01:21:21,519
what you see here is a

2051
01:21:21,920 --> 01:21:24,159
high level view on the traffic that we

2052
01:21:24,159 --> 01:21:25,120
captured

2053
01:21:25,120 --> 01:21:28,080
and on the x-axis you see the time and

2054
01:21:28,080 --> 01:21:30,320
on the y-axis the number of packets

2055
01:21:30,320 --> 01:21:31,920
and um

2056
01:21:31,920 --> 01:21:33,600
we

2057
01:21:33,600 --> 01:21:34,480
saw

2058
01:21:34,480 --> 01:21:36,880
two heavy scanners um which were from

2059
01:21:36,880 --> 01:21:37,920
tom

2060
01:21:37,920 --> 01:21:40,320
we heard about it and the other one was

2061
01:21:40,320 --> 01:21:42,400
and then um

2062
01:21:42,400 --> 01:21:43,840
some

2063
01:21:43,840 --> 01:21:46,000
other traffic remains so we excluded

2064
01:21:46,000 --> 01:21:48,080
uh the scan traffic because that is not

2065
01:21:48,080 --> 01:21:49,600
of interest at all

2066
01:21:49,600 --> 01:21:53,600
um yeah and in 2022 uh we also saw some

2067
01:21:53,600 --> 01:21:56,560
scans from census so um the commercial

2068
01:21:56,560 --> 01:21:57,840
scanners were a little bit late compared

2069
01:21:57,840 --> 01:21:59,840
to the actual research scandal so that

2070
01:21:59,840 --> 01:22:01,760
was sanitizing excluding all of the

2071
01:22:01,760 --> 01:22:03,920
scanners because this traffic is benign

2072
01:22:03,920 --> 01:22:05,520
but we are interested in the malicious

2073
01:22:05,520 --> 01:22:07,840
part next slide please

2074
01:22:07,840 --> 01:22:09,280
um

2075
01:22:09,280 --> 01:22:11,040
um what you see here is now the traffic

2076
01:22:11,040 --> 01:22:13,920
that we captured after sanitizing um

2077
01:22:13,920 --> 01:22:15,840
distinguish between response and

2078
01:22:15,840 --> 01:22:16,960
requests

2079
01:22:16,960 --> 01:22:19,120
and um for the

2080
01:22:19,120 --> 01:22:21,280
request packets you also see a little

2081
01:22:21,280 --> 01:22:22,560
zoom

2082
01:22:22,560 --> 01:22:24,480
a little inlet here and that's the blue

2083
01:22:24,480 --> 01:22:27,040
curve and um this shows more or less

2084
01:22:27,040 --> 01:22:30,000
additional pattern um which most likely

2085
01:22:30,000 --> 01:22:31,600
are the scanners but not the heavy

2086
01:22:31,600 --> 01:22:33,120
research scanners maybe

2087
01:22:33,120 --> 01:22:36,840
malicious cannot looking for

2088
01:22:36,840 --> 01:22:40,639
um quick servers but with a much lower

2089
01:22:40,639 --> 01:22:43,280
rate compared to the heaviest gamers

2090
01:22:43,280 --> 01:22:46,080
and more importantly it is a orange

2091
01:22:46,080 --> 01:22:48,400
curve which shows the response packets

2092
01:22:48,400 --> 01:22:50,480
and here you see a very very erratic

2093
01:22:50,480 --> 01:22:53,040
pattern so you have a

2094
01:22:53,040 --> 01:22:55,199
quick increase in terms of packets and

2095
01:22:55,199 --> 01:22:58,080
then a brief a quick decrease which is a

2096
01:22:58,080 --> 01:22:59,679
typical

2097
01:22:59,679 --> 01:23:02,800
pattern for denial of service attacks

2098
01:23:02,800 --> 01:23:05,120
next slide

2099
01:23:05,120 --> 01:23:07,360
so then we um

2100
01:23:07,360 --> 01:23:08,719
checked

2101
01:23:08,719 --> 01:23:11,440
who actually is attacked

2102
01:23:11,440 --> 01:23:13,920
who receives or from which autonomous

2103
01:23:13,920 --> 01:23:16,320
systems do we receive the responses

2104
01:23:16,320 --> 01:23:18,080
which means

2105
01:23:18,080 --> 01:23:20,320
which where where the server located

2106
01:23:20,320 --> 01:23:23,360
that receives the spoofed request

2107
01:23:23,360 --> 01:23:25,040
and um

2108
01:23:25,040 --> 01:23:26,880
that you see in the second column

2109
01:23:26,880 --> 01:23:28,239
responses

2110
01:23:28,239 --> 01:23:29,840
and each line

2111
01:23:29,840 --> 01:23:30,719
um

2112
01:23:30,719 --> 01:23:31,760
shows you

2113
01:23:31,760 --> 01:23:34,080
the type of autonomous systems where the

2114
01:23:34,080 --> 01:23:36,480
responses comes from and the vast

2115
01:23:36,480 --> 01:23:39,280
majority of responses that we receive in

2116
01:23:39,280 --> 01:23:42,000
our network telescope are actually

2117
01:23:42,000 --> 01:23:44,880
located in quantum provider

2118
01:23:44,880 --> 01:23:46,880
networks

2119
01:23:46,880 --> 01:23:50,639
so next slide um now the question is uh

2120
01:23:50,639 --> 01:23:53,760
whether these um responses um to the

2121
01:23:53,760 --> 01:23:55,760
sport uh source address

2122
01:23:55,760 --> 01:23:58,639
um from the source uh address um

2123
01:23:58,639 --> 01:23:59,440
are

2124
01:23:59,440 --> 01:24:02,320
actually denial of service attacks or

2125
01:24:02,320 --> 01:24:03,600
something else

2126
01:24:03,600 --> 01:24:06,400
and this is a general challenge um

2127
01:24:06,400 --> 01:24:09,520
identify um i mean you see a lot of

2128
01:24:09,520 --> 01:24:10,960
traffic is it a

2129
01:24:10,960 --> 01:24:12,320
attack or not

2130
01:24:12,320 --> 01:24:15,280
and what we did here is that we applied

2131
01:24:15,280 --> 01:24:17,440
comments research from a

2132
01:24:17,440 --> 01:24:19,360
prior verb

2133
01:24:19,360 --> 01:24:20,560
so first

2134
01:24:20,560 --> 01:24:22,719
we group our packets

2135
01:24:22,719 --> 01:24:23,520
in

2136
01:24:23,520 --> 01:24:25,280
sessions and

2137
01:24:25,280 --> 01:24:27,679
each session is split by an idle timeout

2138
01:24:27,679 --> 01:24:28,960
of five minutes

2139
01:24:28,960 --> 01:24:30,400
and then we applied this common

2140
01:24:30,400 --> 01:24:32,159
threshold

2141
01:24:32,159 --> 01:24:35,120
which means that we identify a session

2142
01:24:35,120 --> 01:24:37,520
as an attack if

2143
01:24:37,520 --> 01:24:40,239
the session lasts more than longer than

2144
01:24:40,239 --> 01:24:43,679
60 seconds and if we see more than 25

2145
01:24:43,679 --> 01:24:46,320
packets and a maximum packet per second

2146
01:24:46,320 --> 01:24:48,719
rate of

2147
01:24:49,360 --> 01:24:50,800
0.5

2148
01:24:50,800 --> 01:24:54,080
so and next slide applying this

2149
01:24:54,080 --> 01:24:55,840
we found actually

2150
01:24:55,840 --> 01:24:57,280
more than 2

2151
01:24:57,280 --> 01:25:00,320
900 attacks in our measurement set of

2152
01:25:00,320 --> 01:25:01,920
these one months

2153
01:25:01,920 --> 01:25:02,880
and

2154
01:25:02,880 --> 01:25:06,080
surprise surprise next slide

2155
01:25:06,080 --> 01:25:07,280
the

2156
01:25:07,280 --> 01:25:09,440
majority of victims

2157
01:25:09,440 --> 01:25:12,480
is actually a google servers and the

2158
01:25:12,480 --> 01:25:14,799
other

2159
01:25:16,400 --> 01:25:18,000
weight is

2160
01:25:18,000 --> 01:25:20,960
relates to facebook so

2161
01:25:20,960 --> 01:25:23,679
most of the attacks go to one of these

2162
01:25:23,679 --> 01:25:27,199
famous content delivery or service for

2163
01:25:27,199 --> 01:25:30,560
web services um next slide

2164
01:25:30,560 --> 01:25:32,000
and

2165
01:25:32,000 --> 01:25:34,400
now you can ask i mean this is

2166
01:25:34,400 --> 01:25:36,159
identifying the attack is somehow based

2167
01:25:36,159 --> 01:25:38,480
on empirical data whether our thresholds

2168
01:25:38,480 --> 01:25:40,480
are valid or not because they are from

2169
01:25:40,480 --> 01:25:42,560
prior work some years ago

2170
01:25:42,560 --> 01:25:46,000
and what we did is that we um changed

2171
01:25:46,000 --> 01:25:48,320
these thresholds based on of different

2172
01:25:48,320 --> 01:25:51,199
weights so um any that you see here on

2173
01:25:51,199 --> 01:25:54,000
the x-axis and on the y-axis as the blue

2174
01:25:54,000 --> 01:25:55,600
proof is the number of attacks that we

2175
01:25:55,600 --> 01:25:57,360
identify based on the weight if you have

2176
01:25:57,360 --> 01:25:59,440
a weight that is smaller than one we

2177
01:25:59,440 --> 01:26:01,760
have a more relaxed sweatshirts and if

2178
01:26:01,760 --> 01:26:03,199
you have a weight that is larger than

2179
01:26:03,199 --> 01:26:05,760
one we have a more stricter thresher and

2180
01:26:05,760 --> 01:26:08,480
what you see even if we put a much

2181
01:26:08,480 --> 01:26:10,639
stricter 10 times stricter in our

2182
01:26:10,639 --> 01:26:13,120
service version we find still a

2183
01:26:13,120 --> 01:26:16,000
significant i mean a decent number of

2184
01:26:16,000 --> 01:26:18,320
attacks and the second

2185
01:26:18,320 --> 01:26:21,040
is shown by the orange curve that

2186
01:26:21,040 --> 01:26:23,360
the um

2187
01:26:23,360 --> 01:26:25,600
that's a share

2188
01:26:25,600 --> 01:26:28,080
related to a content delivery networks

2189
01:26:28,080 --> 01:26:31,199
um is i mean that's a at expressions

2190
01:26:31,199 --> 01:26:33,600
more or less independent offices next

2191
01:26:33,600 --> 01:26:36,480
slide

2192
01:26:36,480 --> 01:26:38,000
then we looked a little bit more in

2193
01:26:38,000 --> 01:26:41,280
detail into the victims and uh to better

2194
01:26:41,280 --> 01:26:43,840
understand whether a quick uh denial of

2195
01:26:43,840 --> 01:26:46,320
service attacks relates or correlates

2196
01:26:46,320 --> 01:26:47,679
with other attacks

2197
01:26:47,679 --> 01:26:51,840
and what actually can happen is that um

2198
01:26:51,840 --> 01:26:54,480
quick only that the attacker only quick

2199
01:26:54,480 --> 01:26:57,120
uh attacks a quick service that's uh

2200
01:26:57,120 --> 01:26:58,080
that

2201
01:26:58,080 --> 01:27:00,320
that first another service is attacked

2202
01:27:00,320 --> 01:27:01,840
and then the quick service or that an

2203
01:27:01,840 --> 01:27:03,760
attack of different servers occur in

2204
01:27:03,760 --> 01:27:06,800
parallel so um this is

2205
01:27:06,800 --> 01:27:09,840
you see here illustrated at current

2206
01:27:09,840 --> 01:27:12,560
attacks um

2207
01:27:12,560 --> 01:27:14,239
that

2208
01:27:14,239 --> 01:27:16,480
triangle shows the start of the attack

2209
01:27:16,480 --> 01:27:19,120
and the green attack as a green triangle

2210
01:27:19,120 --> 01:27:20,960
shows the stop of that attack

2211
01:27:20,960 --> 01:27:23,199
and the first column shows you a

2212
01:27:23,199 --> 01:27:24,880
concurrent attack which means that the

2213
01:27:24,880 --> 01:27:27,440
tcp typically tcps in flutter attack for

2214
01:27:27,440 --> 01:27:29,520
example occurs in parallel to a quick

2215
01:27:29,520 --> 01:27:30,480
attack

2216
01:27:30,480 --> 01:27:31,280
and

2217
01:27:31,280 --> 01:27:34,800
after that um the quick attack

2218
01:27:34,800 --> 01:27:36,960
continues which means that you have a

2219
01:27:36,960 --> 01:27:38,880
sequential attack

2220
01:27:38,880 --> 01:27:42,320
uh next slide and um now we do a little

2221
01:27:42,320 --> 01:27:45,440
statistic of all uh all events and found

2222
01:27:45,440 --> 01:27:47,199
that

2223
01:27:47,199 --> 01:27:48,639
half of the attacks are actually

2224
01:27:48,639 --> 01:27:50,080
concurrent attacks which means that we

2225
01:27:50,080 --> 01:27:52,320
have a quick attack and a parallel gcp

2226
01:27:52,320 --> 01:27:54,239
icmp zoom flat

2227
01:27:54,239 --> 01:27:57,360
of icp tcp zoom flat and

2228
01:27:57,360 --> 01:27:59,120
roughly 40

2229
01:27:59,120 --> 01:28:00,320
of the attacks that we found are

2230
01:28:00,320 --> 01:28:02,639
sequential attacks which means after the

2231
01:28:02,639 --> 01:28:05,040
tcp is in flight the quick occurs and

2232
01:28:05,040 --> 01:28:06,000
only

2233
01:28:06,000 --> 01:28:07,280
9

2234
01:28:07,280 --> 01:28:09,520
of the attacks that we found were quick

2235
01:28:09,520 --> 01:28:11,199
only attacks

2236
01:28:11,199 --> 01:28:14,239
so which basically means an attacker

2237
01:28:14,239 --> 01:28:16,000
leverage all of the protocols that are

2238
01:28:16,000 --> 01:28:18,239
available even new protocols such as

2239
01:28:18,239 --> 01:28:20,400
quick to do research

2240
01:28:20,400 --> 01:28:22,800
exhaustion ethics it's a victim

2241
01:28:22,800 --> 01:28:24,639
next slide

2242
01:28:24,639 --> 01:28:26,639
now the question is can we

2243
01:28:26,639 --> 01:28:29,280
protect against this and they submit

2244
01:28:29,280 --> 01:28:30,800
one mechanism

2245
01:28:30,800 --> 01:28:33,199
which is a quick retry mechanism that

2246
01:28:33,199 --> 01:28:35,199
allows these type of resources uh

2247
01:28:35,199 --> 01:28:37,040
exhaustion attacks before a client is

2248
01:28:37,040 --> 01:28:40,320
authenticated and the idea here is um

2249
01:28:40,320 --> 01:28:43,120
to follow an approach similar from tcp

2250
01:28:43,120 --> 01:28:44,080
cookies

2251
01:28:44,080 --> 01:28:45,600
the before

2252
01:28:45,600 --> 01:28:47,520
the server the quick server establish

2253
01:28:47,520 --> 01:28:49,760
the state it sends a cookie

2254
01:28:49,760 --> 01:28:52,239
um a secret to the client and the client

2255
01:28:52,239 --> 01:28:55,120
needs to reply with this and

2256
01:28:55,120 --> 01:28:57,280
if this is correct

2257
01:28:57,280 --> 01:29:00,320
after that as a as the server starts

2258
01:29:00,320 --> 01:29:02,400
as a as a typical clicking check and if

2259
01:29:02,400 --> 01:29:04,239
the answer is not correct

2260
01:29:04,239 --> 01:29:06,080
the server just ignores it and no state

2261
01:29:06,080 --> 01:29:08,000
is established at all

2262
01:29:08,000 --> 01:29:08,880
and

2263
01:29:08,880 --> 01:29:11,360
now i'll show you a brief um uh

2264
01:29:11,360 --> 01:29:14,639
emulation or i mean a testbed evaluation

2265
01:29:14,639 --> 01:29:16,639
uh whether this quick retime is a

2266
01:29:16,639 --> 01:29:18,880
mechanism helps to prevent resource

2267
01:29:18,880 --> 01:29:21,120
exhaustion attacks and what you see here

2268
01:29:21,120 --> 01:29:23,120
is i mean what we have to do we use this

2269
01:29:23,120 --> 01:29:26,080
engine x and initiated actually these

2270
01:29:26,080 --> 01:29:27,679
quick flats

2271
01:29:27,679 --> 01:29:30,239
um to uh towards the server

2272
01:29:30,239 --> 01:29:33,360
and um but based on different

2273
01:29:33,360 --> 01:29:35,280
attack rates and

2274
01:29:35,280 --> 01:29:37,280
different configurations

2275
01:29:37,280 --> 01:29:38,719
and what you see here is

2276
01:29:38,719 --> 01:29:40,560
in this configuration if you have a

2277
01:29:40,560 --> 01:29:43,280
packet per second rate of 100

2278
01:29:43,280 --> 01:29:44,800
packets per second

2279
01:29:44,800 --> 01:29:46,400
and then you already

2280
01:29:46,400 --> 01:29:48,239
will be able to

2281
01:29:48,239 --> 01:29:50,560
to make the quick service unavailable

2282
01:29:50,560 --> 01:29:53,280
then next slide

2283
01:29:53,280 --> 01:29:54,719
you

2284
01:29:54,719 --> 01:29:56,800
can argue that you can use more

2285
01:29:56,800 --> 01:29:59,040
resources more cpu resources yes you can

2286
01:29:59,040 --> 01:30:02,400
do but still i mean

2287
01:30:02,480 --> 01:30:04,960
if you increase the packet rate you can

2288
01:30:04,960 --> 01:30:07,040
will be stay still able

2289
01:30:07,040 --> 01:30:09,040
to um

2290
01:30:09,040 --> 01:30:11,600
turn the service online offline and the

2291
01:30:11,600 --> 01:30:15,120
quick server will not work so next slide

2292
01:30:15,120 --> 01:30:17,520
but if you enable as a quick retry

2293
01:30:17,520 --> 01:30:20,560
message you will be able actually um to

2294
01:30:20,560 --> 01:30:23,520
prevent the server from being exhausted

2295
01:30:23,520 --> 01:30:25,679
and the servers will be still still

2296
01:30:25,679 --> 01:30:27,920
available

2297
01:30:27,920 --> 01:30:29,760
um but on the

2298
01:30:29,760 --> 01:30:31,199
uh

2299
01:30:31,199 --> 01:30:32,080
which

2300
01:30:32,080 --> 01:30:34,480
the one that's uh what no tears that's a

2301
01:30:34,480 --> 01:30:37,040
quick res tries to measure and

2302
01:30:37,040 --> 01:30:38,960
adds an additional round trip side that

2303
01:30:38,960 --> 01:30:40,560
time that is a little bit the

2304
01:30:40,560 --> 01:30:42,719
disadvantage but it prevents this type

2305
01:30:42,719 --> 01:30:45,040
of ethics so next slide

2306
01:30:45,040 --> 01:30:47,199
um yeah very important i mean this

2307
01:30:47,199 --> 01:30:48,960
evaluation that they presented here is

2308
01:30:48,960 --> 01:30:51,520
not about nginx that is a design issue

2309
01:30:51,520 --> 01:30:53,040
by a quick

2310
01:30:53,040 --> 01:30:54,480
and

2311
01:30:54,480 --> 01:30:57,199
what we found in our data is that none

2312
01:30:57,199 --> 01:31:00,000
of the server servers

2313
01:31:00,000 --> 01:31:02,480
you actually currently use the retire

2314
01:31:02,480 --> 01:31:05,360
options most likely because of uh

2315
01:31:05,360 --> 01:31:07,040
because the retro message adds

2316
01:31:07,040 --> 01:31:09,600
additional enterprise time and you

2317
01:31:09,600 --> 01:31:12,080
actually want to reduce on trip titan

2318
01:31:12,080 --> 01:31:13,280
delays

2319
01:31:13,280 --> 01:31:14,480
next slide

2320
01:31:14,480 --> 01:31:17,040
um so we this the data that i showed you

2321
01:31:17,040 --> 01:31:19,840
was from 2021 we uh

2322
01:31:19,840 --> 01:31:22,159
also analyzed more recent data from this

2323
01:31:22,159 --> 01:31:24,400
year and we found that these

2324
01:31:24,400 --> 01:31:27,120
quick initial floods actually doubled so

2325
01:31:27,120 --> 01:31:28,480
i took will

2326
01:31:28,480 --> 01:31:29,679
increase

2327
01:31:29,679 --> 01:31:30,480
and

2328
01:31:30,480 --> 01:31:33,600
we also analyzed um google and of

2329
01:31:33,600 --> 01:31:35,600
facebook's uh often at servers or

2330
01:31:35,600 --> 01:31:37,280
servers that are not located in the

2331
01:31:37,280 --> 01:31:38,880
google or facebook ads

2332
01:31:38,880 --> 01:31:39,840
and

2333
01:31:39,840 --> 01:31:42,800
if you consider this you even find more

2334
01:31:42,800 --> 01:31:44,400
text

2335
01:31:44,400 --> 01:31:47,840
it's currently not only google and cloud

2336
01:31:47,840 --> 01:31:49,199
facebook that are

2337
01:31:49,199 --> 01:31:50,080
attacked

2338
01:31:50,080 --> 01:31:53,440
in our data set we find also

2339
01:31:53,440 --> 01:31:55,840
messages from cloudflare

2340
01:31:55,840 --> 01:31:58,639
but luckily i mean some

2341
01:31:58,639 --> 01:32:01,040
of the services servers that are

2342
01:32:01,040 --> 01:32:02,320
attacked

2343
01:32:02,320 --> 01:32:03,360
use

2344
01:32:03,360 --> 01:32:05,120
retry packets even though that's a very

2345
01:32:05,120 --> 01:32:06,560
very

2346
01:32:06,560 --> 01:32:08,159
small minority

2347
01:32:08,159 --> 01:32:10,320
next slide

2348
01:32:10,320 --> 01:32:12,480
so to conclude um

2349
01:32:12,480 --> 01:32:13,520
uh

2350
01:32:13,520 --> 01:32:16,080
quick is vulnerable against initial

2351
01:32:16,080 --> 01:32:19,679
floods um that uh try to um do a

2352
01:32:19,679 --> 01:32:21,440
resource actuation attack on the on

2353
01:32:21,440 --> 01:32:23,840
servers and we actually find this type

2354
01:32:23,840 --> 01:32:26,000
of attacks deployed in the real internet

2355
01:32:26,000 --> 01:32:27,760
with an increasing trend

2356
01:32:27,760 --> 01:32:30,000
you can prevent this and mitigate this

2357
01:32:30,000 --> 01:32:32,159
by using retries currently

2358
01:32:32,159 --> 01:32:35,440
many many servers do not use retry but

2359
01:32:35,440 --> 01:32:37,360
if you want to prevent this you have you

2360
01:32:37,360 --> 01:32:40,000
need to enable it or find another way

2361
01:32:40,000 --> 01:32:42,239
okay next slide final slide if you're

2362
01:32:42,239 --> 01:32:44,080
interested in more details there's a

2363
01:32:44,080 --> 01:32:45,600
full paper linked here including a

2364
01:32:45,600 --> 01:32:48,560
publicly available pdf and all of the

2365
01:32:48,560 --> 01:32:50,320
software and artifacts are also

2366
01:32:50,320 --> 01:32:51,760
available

2367
01:32:51,760 --> 01:32:53,120
thanks

2368
01:32:53,120 --> 01:32:54,800
thank you and we start with the queue

2369
01:32:54,800 --> 01:32:57,199
alex

2370
01:32:59,840 --> 01:33:02,080
thank you very interesting information

2371
01:33:02,080 --> 01:33:02,960
um

2372
01:33:02,960 --> 01:33:04,560
do i understand correctly that you said

2373
01:33:04,560 --> 01:33:06,080
your telescope would catch about two

2374
01:33:06,080 --> 01:33:08,080
percent of the potential backscatter of

2375
01:33:08,080 --> 01:33:11,360
it of an attack yes it was because of

2376
01:33:11,360 --> 01:33:13,600
nine yeah so that means that the attacks

2377
01:33:13,600 --> 01:33:15,840
would probably be like roughly 50 times

2378
01:33:15,840 --> 01:33:18,880
the size that you observe

2379
01:33:18,880 --> 01:33:21,760
and compared to other types of u.s

2380
01:33:21,760 --> 01:33:24,159
attacks those appear really really tiny

2381
01:33:24,159 --> 01:33:25,840
yeah i mean we are dealing in the dns

2382
01:33:25,840 --> 01:33:27,360
industry with

2383
01:33:27,360 --> 01:33:29,920
tens of millions of packets per second

2384
01:33:29,920 --> 01:33:32,239
um and my question is you said you're

2385
01:33:32,239 --> 01:33:35,280
gonna you saw more attacks in terms of

2386
01:33:35,280 --> 01:33:37,199
number of lots that were coming in in

2387
01:33:37,199 --> 01:33:39,199
2022

2388
01:33:39,199 --> 01:33:40,800
do you also see that the number of

2389
01:33:40,800 --> 01:33:42,719
packets that are used in those decks the

2390
01:33:42,719 --> 01:33:43,840
packets per second are actually

2391
01:33:43,840 --> 01:33:45,760
increasing because that would that would

2392
01:33:45,760 --> 01:33:47,360
indicate to me that this is coming out

2393
01:33:47,360 --> 01:33:49,520
of kindergarten and finally getting a

2394
01:33:49,520 --> 01:33:51,360
real tool because

2395
01:33:51,360 --> 01:33:52,880
quite frankly i don't think that 100

2396
01:33:52,880 --> 01:33:55,040
packets per second would actually be

2397
01:33:55,040 --> 01:33:59,120
noticeable on google's side at all

2398
01:33:59,120 --> 01:34:02,719
yeah i mean um i don't know the

2399
01:34:02,719 --> 01:34:05,199
it's it's i think that that was my sorry

2400
01:34:05,199 --> 01:34:07,520
sorry that that made me think is that

2401
01:34:07,520 --> 01:34:10,080
maybe something like a gamma ray beat

2402
01:34:10,080 --> 01:34:12,320
flip in a client that goes oh certainly

2403
01:34:12,320 --> 01:34:14,639
on the server so is it actually an

2404
01:34:14,639 --> 01:34:16,480
intended attack and what you said about

2405
01:34:16,480 --> 01:34:19,120
the multi-protocol back scanner

2406
01:34:19,120 --> 01:34:20,880
that tells me a little bit more it's

2407
01:34:20,880 --> 01:34:23,760
probably actual a try by someone

2408
01:34:23,760 --> 01:34:26,960
um but not really a professional

2409
01:34:26,960 --> 01:34:29,600
attack yeah i mean we are not arguing

2410
01:34:29,600 --> 01:34:30,400
that

2411
01:34:30,400 --> 01:34:31,199
the

2412
01:34:31,199 --> 01:34:32,560
services that

2413
01:34:32,560 --> 01:34:35,360
receives this data i actually got to get

2414
01:34:35,360 --> 01:34:36,800
offline or something like that what we

2415
01:34:36,800 --> 01:34:40,400
are saying saying is that we see

2416
01:34:40,400 --> 01:34:42,880
i mean patents that hints towards this

2417
01:34:42,880 --> 01:34:44,960
attack whether they are successful or

2418
01:34:44,960 --> 01:34:46,960
not is a different question that is not

2419
01:34:46,960 --> 01:34:49,440
what we are analyzing here um but it's a

2420
01:34:49,440 --> 01:34:52,480
good point um i don't know the pbs uh

2421
01:34:52,480 --> 01:34:54,800
for the uh updated data

2422
01:34:54,800 --> 01:34:56,560
is something that we should yeah uh i

2423
01:34:56,560 --> 01:34:58,239
don't just don't know

2424
01:34:58,239 --> 01:34:59,119
just recently that's a good that's a

2425
01:34:59,119 --> 01:35:02,159
good point but i mean um

2426
01:35:02,159 --> 01:35:04,560
this is i mean this talk is meant to be

2427
01:35:04,560 --> 01:35:07,119
also be cautious i mean people are

2428
01:35:07,119 --> 01:35:09,920
trying to explore this type of attack

2429
01:35:09,920 --> 01:35:11,920
and even though it's currently maybe a

2430
01:35:11,920 --> 01:35:14,000
low data rate it might increase in the

2431
01:35:14,000 --> 01:35:16,000
future and you should be prepared for

2432
01:35:16,000 --> 01:35:16,800
this

2433
01:35:16,800 --> 01:35:18,880
right but you're not seeing that the

2434
01:35:18,880 --> 01:35:21,920
packet numbers or packet rates increased

2435
01:35:21,920 --> 01:35:23,280
as i said i don't know i mean i don't

2436
01:35:23,280 --> 01:35:25,280
know it now i mean

2437
01:35:25,280 --> 01:35:26,400
we did

2438
01:35:26,400 --> 01:35:28,560
update the data recently so um yeah i

2439
01:35:28,560 --> 01:35:30,080
have to check this sorry thank you

2440
01:35:30,080 --> 01:35:32,639
excellent research thank you

2441
01:35:32,639 --> 01:35:35,199
all right um really good research so one

2442
01:35:35,199 --> 01:35:37,199
of the things that we saw in our ipv6

2443
01:35:37,199 --> 01:35:39,040
scanners was that some scanners

2444
01:35:39,040 --> 01:35:41,600
controlled let's say 48 and they would

2445
01:35:41,600 --> 01:35:44,080
send two packets from each of the ip

2446
01:35:44,080 --> 01:35:45,760
addresses and then increment the address

2447
01:35:45,760 --> 01:35:47,199
and then keep on sending two packets

2448
01:35:47,199 --> 01:35:50,239
every time so would your uh

2449
01:35:50,239 --> 01:35:53,520
calculation of attackers miss that so

2450
01:35:53,520 --> 01:35:55,199
if someone's using some sort of a

2451
01:35:55,199 --> 01:35:56,480
distributed

2452
01:35:56,480 --> 01:35:58,880
architecture to send scans maybe let's

2453
01:35:58,880 --> 01:36:01,199
say if it doesn't send 5000 packets it

2454
01:36:01,199 --> 01:36:02,960
just sends 10 packets from each ip

2455
01:36:02,960 --> 01:36:04,400
address and then keeps on changing and

2456
01:36:04,400 --> 01:36:05,360
would your

2457
01:36:05,360 --> 01:36:06,159
uh

2458
01:36:06,159 --> 01:36:08,239
what your spending yeah if you have a

2459
01:36:08,239 --> 01:36:10,800
distributed uh type yeah yeah i mean it

2460
01:36:10,800 --> 01:36:12,639
yeah can we catch up no that's not an

2461
01:36:12,639 --> 01:36:15,199
issue okay so uh i

2462
01:36:15,199 --> 01:36:17,679
forgot forgot like exactly how you

2463
01:36:17,679 --> 01:36:18,480
uh

2464
01:36:18,480 --> 01:36:20,400
said that if these are the conditions

2465
01:36:20,400 --> 01:36:22,239
are met then we considered it as a

2466
01:36:22,239 --> 01:36:24,400
scanner so

2467
01:36:24,400 --> 01:36:26,400
i mean we um

2468
01:36:26,400 --> 01:36:29,679
if you can go back um

2469
01:36:29,679 --> 01:36:31,280
yeah

2470
01:36:31,280 --> 01:36:34,480
anyhow i mean we group it by uh by

2471
01:36:34,480 --> 01:36:37,600
source ip address um yeah

2472
01:36:37,600 --> 01:36:39,679
yeah the next one i think that's fine

2473
01:36:39,679 --> 01:36:41,360
yeah yes

2474
01:36:41,360 --> 01:36:43,199
um

2475
01:36:43,199 --> 01:36:45,920
by uh by source ip address

2476
01:36:45,920 --> 01:36:48,239
um and um

2477
01:36:48,239 --> 01:36:50,719
we i mean we did not do it here but you

2478
01:36:50,719 --> 01:36:54,400
can do you can also consider um

2479
01:36:54,400 --> 01:36:57,840
requests or replies from uh for multiple

2480
01:36:57,840 --> 01:37:00,320
sources in parallel

2481
01:37:00,320 --> 01:37:02,560
which and then you can track and emulate

2482
01:37:02,560 --> 01:37:04,560
some of the state increase for example

2483
01:37:04,560 --> 01:37:08,960
yeah yeah that makes sense thank you

2484
01:37:10,159 --> 01:37:13,920
okay thanks a lot um so jerome uh

2485
01:37:13,920 --> 01:37:16,080
quickly drove to university and now has

2486
01:37:16,080 --> 01:37:17,920
better connectivity so we will give it

2487
01:37:17,920 --> 01:37:21,320
another try

2488
01:37:31,679 --> 01:37:33,119
um

2489
01:37:33,119 --> 01:37:36,239
yeah so can everyone hear me now

2490
01:37:36,239 --> 01:37:38,400
we can hear you right now

2491
01:37:38,400 --> 01:37:40,800
oh great thank you and first of all uh

2492
01:37:40,800 --> 01:37:44,239
my apologies for any inconvenience sorry

2493
01:37:44,239 --> 01:37:46,560
i just moved to another place

2494
01:37:46,560 --> 01:37:49,199
for a better connection so i hope

2495
01:37:49,199 --> 01:37:51,440
it sounds better now

2496
01:37:51,440 --> 01:37:52,719
um

2497
01:37:52,719 --> 01:37:55,600
right so this is jerome from cwru and uh

2498
01:37:55,600 --> 01:37:57,840
today i'm going to present our results

2499
01:37:57,840 --> 01:38:01,040
oh i'm hearing like echoes you can just

2500
01:38:01,040 --> 01:38:03,760
meet the room locally on your site

2501
01:38:03,760 --> 01:38:05,520
and we take all the questions at the end

2502
01:38:05,520 --> 01:38:06,800
then

2503
01:38:06,800 --> 01:38:08,239
okay

2504
01:38:08,239 --> 01:38:10,080
okay so um

2505
01:38:10,080 --> 01:38:11,760
yeah so today i'm going to present our

2506
01:38:11,760 --> 01:38:14,320
results in measuring the support for dns

2507
01:38:14,320 --> 01:38:16,480
over tcp in the internet

2508
01:38:16,480 --> 01:38:18,000
um

2509
01:38:18,000 --> 01:38:20,320
right so

2510
01:38:20,320 --> 01:38:22,880
let me see

2511
01:38:22,960 --> 01:38:26,000
oh yeah so here's uh the topics we're

2512
01:38:26,000 --> 01:38:27,280
going to cover today so we're going to

2513
01:38:27,280 --> 01:38:29,440
look at the dns over tcp support on two

2514
01:38:29,440 --> 01:38:30,560
sides

2515
01:38:30,560 --> 01:38:33,280
of the dns infrastructure the recursive

2516
01:38:33,280 --> 01:38:34,400
resolver

2517
01:38:34,400 --> 01:38:37,040
side and authoritative dns server side

2518
01:38:37,040 --> 01:38:39,199
so we focus on the support in those two

2519
01:38:39,199 --> 01:38:41,760
sides because they are where we can

2520
01:38:41,760 --> 01:38:44,000
directly associate the tcp support

2521
01:38:44,000 --> 01:38:46,880
behaviors to the actors that are that

2522
01:38:46,880 --> 01:38:48,719
are responsible for them

2523
01:38:48,719 --> 01:38:51,119
and at the end of the talk i'll briefly

2524
01:38:51,119 --> 01:38:53,679
discuss the race condition between the

2525
01:38:53,679 --> 01:38:56,000
recursive resolvers and

2526
01:38:56,000 --> 01:38:58,400
authoritative dns servers in dns over

2527
01:38:58,400 --> 01:39:00,960
tcp

2528
01:39:02,000 --> 01:39:04,239
so let's move on to the tcp's fallback

2529
01:39:04,239 --> 01:39:05,440
support by

2530
01:39:05,440 --> 01:39:08,239
recursive resolvers so let's just use

2531
01:39:08,239 --> 01:39:11,040
resolver which is the shorthand for

2532
01:39:11,040 --> 01:39:13,520
recursive resolver or recursor

2533
01:39:13,520 --> 01:39:17,119
so the general approach is that

2534
01:39:17,119 --> 01:39:19,600
we want to measure as many resolvers as

2535
01:39:19,600 --> 01:39:21,840
possible and we want to force those

2536
01:39:21,840 --> 01:39:25,440
resolvers to talk to our ads through tcp

2537
01:39:25,440 --> 01:39:28,960
so what we did is our ads send truncated

2538
01:39:28,960 --> 01:39:32,560
udp responses to the resolvers and those

2539
01:39:32,560 --> 01:39:34,960
udp responses have no resource records

2540
01:39:34,960 --> 01:39:36,960
at all so therefore

2541
01:39:36,960 --> 01:39:39,280
if the resolvers want to complete the

2542
01:39:39,280 --> 01:39:41,760
resolutions successfully

2543
01:39:41,760 --> 01:39:42,480
so

2544
01:39:42,480 --> 01:39:44,560
they are expected to fall back to tcp

2545
01:39:44,560 --> 01:39:46,400
protocol

2546
01:39:46,400 --> 01:39:48,880
we have four data sets

2547
01:39:48,880 --> 01:39:51,920
on those resolvers the first one

2548
01:39:51,920 --> 01:39:54,239
and open ipv for our scan with unique

2549
01:39:54,239 --> 01:39:56,480
queries to our own domains

2550
01:39:56,480 --> 01:39:57,920
the second one

2551
01:39:57,920 --> 01:40:01,840
uh we use the bouncing message we use

2552
01:40:01,840 --> 01:40:04,639
the bouncing message in smtp protocol so

2553
01:40:04,639 --> 01:40:07,360
our result also our scanners and emails

2554
01:40:07,360 --> 01:40:09,119
to non-existing recipients at the

2555
01:40:09,119 --> 01:40:11,280
domains from the majestic top 1 million

2556
01:40:11,280 --> 01:40:12,159
list

2557
01:40:12,159 --> 01:40:13,760
from our own domain

2558
01:40:13,760 --> 01:40:15,520
and those mail servers they won't be

2559
01:40:15,520 --> 01:40:18,239
able to successfully deliver those

2560
01:40:18,239 --> 01:40:19,920
emails and so they

2561
01:40:19,920 --> 01:40:22,480
are expected to send bounce messages for

2562
01:40:22,480 --> 01:40:24,960
the delivery failures back to our mail

2563
01:40:24,960 --> 01:40:27,920
servers so they have to query

2564
01:40:27,920 --> 01:40:30,239
the uh all they have to query the mx

2565
01:40:30,239 --> 01:40:32,880
records in our in our domain and our ads

2566
01:40:32,880 --> 01:40:35,440
are gonna force the tcp fallback in

2567
01:40:35,440 --> 01:40:38,320
those mx resolutions

2568
01:40:38,320 --> 01:40:39,840
the third data set

2569
01:40:39,840 --> 01:40:40,960
we

2570
01:40:40,960 --> 01:40:43,920
use the famous write ls platform so we

2571
01:40:43,920 --> 01:40:46,159
let the rap alice probes to send unique

2572
01:40:46,159 --> 01:40:47,840
chorus to our own domains through their

2573
01:40:47,840 --> 01:40:49,360
resolvers

2574
01:40:49,360 --> 01:40:51,679
and the last data set we have

2575
01:40:51,679 --> 01:40:55,440
the 18s logs from a major cdn

2576
01:40:55,440 --> 01:40:58,159
those logs are highly aggregated so we

2577
01:40:58,159 --> 01:41:00,880
only use those logs to assess the real

2578
01:41:00,880 --> 01:41:03,520
world activity of the resolvers from

2579
01:41:03,520 --> 01:41:06,480
different categories

2580
01:41:07,199 --> 01:41:08,400
uh

2581
01:41:08,400 --> 01:41:11,440
right so here's a challenge

2582
01:41:11,440 --> 01:41:13,199
so when we are talking about tcp

2583
01:41:13,199 --> 01:41:16,400
fallback the tcp fallback is a two-step

2584
01:41:16,400 --> 01:41:17,600
process

2585
01:41:17,600 --> 01:41:20,320
and it is hard to associate the dns over

2586
01:41:20,320 --> 01:41:23,440
udp queries and dns over tcp queries

2587
01:41:23,440 --> 01:41:26,400
and because of the collaborative

2588
01:41:26,400 --> 01:41:29,119
resolution it is even harder

2589
01:41:29,119 --> 01:41:32,320
so our destination for tcp fallback

2590
01:41:32,320 --> 01:41:36,480
capable is that either a resolver itself

2591
01:41:36,480 --> 01:41:39,520
is capable of fallback to tcp

2592
01:41:39,520 --> 01:41:42,639
or this resolver has appear that falls

2593
01:41:42,639 --> 01:41:45,520
back to tcp for it

2594
01:41:45,520 --> 01:41:48,560
so so here i i expect an animation here

2595
01:41:48,560 --> 01:41:50,719
but sorry it's pdf version so there's no

2596
01:41:50,719 --> 01:41:52,000
animation but

2597
01:41:52,000 --> 01:41:54,080
uh just to illustrate what is a

2598
01:41:54,080 --> 01:41:57,280
canonical scenario in tcp fallback you

2599
01:41:57,280 --> 01:41:59,119
know tcp fallback so

2600
01:41:59,119 --> 01:42:01,679
if we've seen one udp query from

2601
01:42:01,679 --> 01:42:03,040
resolver

2602
01:42:03,040 --> 01:42:06,880
and one tcp query and another tcp query

2603
01:42:06,880 --> 01:42:10,239
from this resolver for unique query then

2604
01:42:10,239 --> 01:42:13,760
we can say that this resolver is tcp

2605
01:42:13,760 --> 01:42:16,400
fallback capable and this is a canonical

2606
01:42:16,400 --> 01:42:19,040
scenario of the tcp fallback

2607
01:42:19,040 --> 01:42:21,600
and the figure here shows a more

2608
01:42:21,600 --> 01:42:24,960
complicated non-canonical tcp fallback

2609
01:42:24,960 --> 01:42:27,040
scenario so we can see that you can see

2610
01:42:27,040 --> 01:42:29,440
that we have two udp queries from

2611
01:42:29,440 --> 01:42:30,880
resolver a

2612
01:42:30,880 --> 01:42:32,239
and resolver b

2613
01:42:32,239 --> 01:42:35,520
and a tcp query from resolver c

2614
01:42:35,520 --> 01:42:37,360
so in this case

2615
01:42:37,360 --> 01:42:39,600
we do not have enough information to say

2616
01:42:39,600 --> 01:42:42,880
that the tcp query from resolver c

2617
01:42:42,880 --> 01:42:48,000
is a consequence of a or b's udp

2618
01:42:48,000 --> 01:42:50,880
udp queries then resolver a and resolver

2619
01:42:50,880 --> 01:42:52,239
b are

2620
01:42:52,239 --> 01:42:55,119
indeterminate in terms of the tcp

2621
01:42:55,119 --> 01:42:56,560
fallback capabilities in this

2622
01:42:56,560 --> 01:42:58,960
transaction

2623
01:42:58,960 --> 01:43:01,119
and uh

2624
01:43:01,119 --> 01:43:03,040
in fact

2625
01:43:03,040 --> 01:43:05,440
in fact the con the non-canonical

2626
01:43:05,440 --> 01:43:07,679
scenarios they are very common actually

2627
01:43:07,679 --> 01:43:08,639
in

2628
01:43:08,639 --> 01:43:12,400
our datasets on the resolvers only 46.8

2629
01:43:12,400 --> 01:43:14,960
percent of all the resolutions

2630
01:43:14,960 --> 01:43:17,360
are canonical

2631
01:43:17,360 --> 01:43:20,719
and even for the canonical scenarios

2632
01:43:20,719 --> 01:43:23,840
18.9 percent of those scenarios have two

2633
01:43:23,840 --> 01:43:25,280
queries coming from different ip

2634
01:43:25,280 --> 01:43:26,400
addresses

2635
01:43:26,400 --> 01:43:30,159
so udp query from one ip address and tcp

2636
01:43:30,159 --> 01:43:33,119
query coming from another ip address

2637
01:43:33,119 --> 01:43:35,360
and for the non-canonical scenarios they

2638
01:43:35,360 --> 01:43:37,440
sometimes it can be very complicated to

2639
01:43:37,440 --> 01:43:40,800
match the udp korean tcp queries so here

2640
01:43:40,800 --> 01:43:44,159
i just listed two uh real world examples

2641
01:43:44,159 --> 01:43:46,560
here so the first one you you can see

2642
01:43:46,560 --> 01:43:48,480
that so our scanners and

2643
01:43:48,480 --> 01:43:50,400
just one single

2644
01:43:50,400 --> 01:43:52,639
unique udp query to

2645
01:43:52,639 --> 01:43:53,920
um

2646
01:43:53,920 --> 01:43:56,239
to the resolver and in our 18s it ends

2647
01:43:56,239 --> 01:43:57,280
up with

2648
01:43:57,280 --> 01:44:00,000
five udp queries and four tcp core is

2649
01:44:00,000 --> 01:44:02,320
coming from six resolvers

2650
01:44:02,320 --> 01:44:04,880
and another in another example the same

2651
01:44:04,880 --> 01:44:06,960
it's another unique

2652
01:44:06,960 --> 01:44:09,280
uh udp query

2653
01:44:09,280 --> 01:44:11,440
quoted by our scanner and you can see

2654
01:44:11,440 --> 01:44:13,440
that there are like around four udp

2655
01:44:13,440 --> 01:44:15,520
queries and three tcp core is coming

2656
01:44:15,520 --> 01:44:17,760
from three with hours

2657
01:44:17,760 --> 01:44:19,199
so

2658
01:44:19,199 --> 01:44:21,440
you can see that like the udp

2659
01:44:21,440 --> 01:44:23,679
the udp and tcp tcp queries there

2660
01:44:23,679 --> 01:44:26,159
fallback relationships are not quite

2661
01:44:26,159 --> 01:44:29,280
very obvious in those two examples so we

2662
01:44:29,280 --> 01:44:31,360
have developed an algorithm that tries

2663
01:44:31,360 --> 01:44:33,920
to group the queries

2664
01:44:33,920 --> 01:44:35,840
into clusters by their potential

2665
01:44:35,840 --> 01:44:37,679
fallback relationships

2666
01:44:37,679 --> 01:44:40,400
and uh we assume that like the maximum

2667
01:44:40,400 --> 01:44:43,440
gap between a udb query and its real tcp

2668
01:44:43,440 --> 01:44:46,639
fallback tcp fallback tcp queries is two

2669
01:44:46,639 --> 01:44:47,600
seconds

2670
01:44:47,600 --> 01:44:48,880
so

2671
01:44:48,880 --> 01:44:50,560
uh you might be wondering so what what

2672
01:44:50,560 --> 01:44:52,560
is a cluster so

2673
01:44:52,560 --> 01:44:54,880
why do you split all those three

2674
01:44:54,880 --> 01:44:57,440
different queries into four clusters so

2675
01:44:57,440 --> 01:44:59,280
cluster is a group it's a group of

2676
01:44:59,280 --> 01:45:01,119
queries and

2677
01:45:01,119 --> 01:45:03,679
a cluster ends with uh dns over tcp

2678
01:45:03,679 --> 01:45:04,719
query

2679
01:45:04,719 --> 01:45:06,239
and uh

2680
01:45:06,239 --> 01:45:08,960
in addition to that two consecutive tcp

2681
01:45:08,960 --> 01:45:11,119
queries in a cluster

2682
01:45:11,119 --> 01:45:13,840
are preceded by at least one udp query

2683
01:45:13,840 --> 01:45:14,639
so

2684
01:45:14,639 --> 01:45:19,040
here we have 13 udp and tcp dns over udp

2685
01:45:19,040 --> 01:45:21,360
and dns over tcp core is here and we

2686
01:45:21,360 --> 01:45:24,080
split them into four clusters in the

2687
01:45:24,080 --> 01:45:26,000
first in the first cluster you can see

2688
01:45:26,000 --> 01:45:27,920
that um

2689
01:45:27,920 --> 01:45:30,320
we have udp query number one and three

2690
01:45:30,320 --> 01:45:33,199
and tcp queries two and four

2691
01:45:33,199 --> 01:45:34,400
um

2692
01:45:34,400 --> 01:45:37,440
the tcp query number two is preceded by

2693
01:45:37,440 --> 01:45:39,600
udp query number one and tcp query

2694
01:45:39,600 --> 01:45:41,760
number four is preceded by udp query

2695
01:45:41,760 --> 01:45:45,040
number three and also we can we can say

2696
01:45:45,040 --> 01:45:46,960
that like the ud the tcp query number

2697
01:45:46,960 --> 01:45:49,199
four is also preceded by udp equal

2698
01:45:49,199 --> 01:45:50,320
number one

2699
01:45:50,320 --> 01:45:53,760
but if we if we assume that the tcp

2700
01:45:53,760 --> 01:45:55,280
query number four

2701
01:45:55,280 --> 01:45:58,320
is the fallback for utp query number one

2702
01:45:58,320 --> 01:46:00,880
then we're gonna left the

2703
01:46:00,880 --> 01:46:03,760
tcp query number two unmatched so which

2704
01:46:03,760 --> 01:46:07,440
is unlikely so in this case we say that

2705
01:46:07,440 --> 01:46:10,719
so we just assume that the udp code

2706
01:46:10,719 --> 01:46:12,800
number one is

2707
01:46:12,800 --> 01:46:16,080
fall back by tcp query number two and

2708
01:46:16,080 --> 01:46:18,400
udp core number three is fought back by

2709
01:46:18,400 --> 01:46:21,600
tcp number three number four so in this

2710
01:46:21,600 --> 01:46:23,440
case both number one and number three

2711
01:46:23,440 --> 01:46:26,159
are tcp fallback capable and in cluster

2712
01:46:26,159 --> 01:46:27,520
number two

2713
01:46:27,520 --> 01:46:30,239
this tcp core is not paired by any udp

2714
01:46:30,239 --> 01:46:31,520
query so

2715
01:46:31,520 --> 01:46:34,639
we just leave it at this and in cluster

2716
01:46:34,639 --> 01:46:37,280
number three it's obvious that like

2717
01:46:37,280 --> 01:46:39,119
the tcp number seven

2718
01:46:39,119 --> 01:46:41,920
is the fallback of bdb query number six

2719
01:46:41,920 --> 01:46:42,880
so

2720
01:46:42,880 --> 01:46:46,000
quite obvious one and in cluster number

2721
01:46:46,000 --> 01:46:47,760
four it's a little bit complicated

2722
01:46:47,760 --> 01:46:48,800
because

2723
01:46:48,800 --> 01:46:51,440
um you know there are several kind of

2724
01:46:51,440 --> 01:46:53,520
potential pairs and like you know we we

2725
01:46:53,520 --> 01:46:55,440
cannot find a way to

2726
01:46:55,440 --> 01:46:59,040
to perfectly um associate the udp

2727
01:46:59,040 --> 01:47:00,880
queries and tcp queries because you know

2728
01:47:00,880 --> 01:47:02,800
there are three udp queries but only two

2729
01:47:02,800 --> 01:47:05,920
tcp for example

2730
01:47:06,320 --> 01:47:08,400
so in this case we just say that all

2731
01:47:08,400 --> 01:47:10,000
those three udp quarters are

2732
01:47:10,000 --> 01:47:12,800
indeterminate we just don't know

2733
01:47:12,800 --> 01:47:15,840
which udp query is uh is tcp fallback

2734
01:47:15,840 --> 01:47:18,800
capable and which one is not but finally

2735
01:47:18,800 --> 01:47:21,360
in udp query number 13

2736
01:47:21,360 --> 01:47:23,600
it is not followed by any tcp query so

2737
01:47:23,600 --> 01:47:26,000
we can confidently say that this

2738
01:47:26,000 --> 01:47:28,800
udp quarter this guy is tcp fallback

2739
01:47:28,800 --> 01:47:31,520
incapable

2740
01:47:32,239 --> 01:47:34,159
um

2741
01:47:34,159 --> 01:47:36,800
right so just like what we we've seen in

2742
01:47:36,800 --> 01:47:39,520
the previous two slides so some dns

2743
01:47:39,520 --> 01:47:41,360
transactions they just don't allow

2744
01:47:41,360 --> 01:47:43,600
ambiguous influence of the tcp fallback

2745
01:47:43,600 --> 01:47:45,119
capability

2746
01:47:45,119 --> 01:47:47,199
like in cluster number four

2747
01:47:47,199 --> 01:47:50,480
uh so in this case what we do is that we

2748
01:47:50,480 --> 01:47:52,159
have two estimations we have the

2749
01:47:52,159 --> 01:47:54,000
optimistic estimation and we have the

2750
01:47:54,000 --> 01:47:56,159
pessimistic estimation and the only

2751
01:47:56,159 --> 01:47:57,920
difference between those two estimations

2752
01:47:57,920 --> 01:48:02,719
is how we process the indeterminate

2753
01:48:02,719 --> 01:48:05,360
queries so in optimistic estimation we

2754
01:48:05,360 --> 01:48:07,760
just consider the indeterminate as tcp

2755
01:48:07,760 --> 01:48:09,440
fallback capable

2756
01:48:09,440 --> 01:48:10,159
so

2757
01:48:10,159 --> 01:48:11,920
in

2758
01:48:11,920 --> 01:48:14,080
so in this so you

2759
01:48:14,080 --> 01:48:15,760
see in this example in cluster number

2760
01:48:15,760 --> 01:48:17,760
four we just assume that like

2761
01:48:17,760 --> 01:48:20,239
udp code number eight nine eleven are

2762
01:48:20,239 --> 01:48:22,400
tcp fallback capable

2763
01:48:22,400 --> 01:48:24,960
and under pessimistic estimation we just

2764
01:48:24,960 --> 01:48:28,320
consider them as tcp fallback incapable

2765
01:48:28,320 --> 01:48:30,800
and throughout all of our

2766
01:48:30,800 --> 01:48:35,199
data sets we have studied around 130

2767
01:48:35,199 --> 01:48:39,520
16 000 resolvers and around 95 to 97

2768
01:48:39,520 --> 01:48:42,639
percent of them are tcp fallback capable

2769
01:48:42,639 --> 01:48:44,719
so we use a range here to represent the

2770
01:48:44,719 --> 01:48:46,639
number of tcp fallback capable and

2771
01:48:46,639 --> 01:48:48,080
capable resolvers according to the

2772
01:48:48,080 --> 01:48:49,280
optimistic

2773
01:48:49,280 --> 01:48:51,280
pessimistic estimations

2774
01:48:51,280 --> 01:48:53,280
and the tcp fallback capable resolvers

2775
01:48:53,280 --> 01:48:56,320
they contribute to around 96 to 99

2776
01:48:56,320 --> 01:48:59,040
of the cdn traffic from other resolvers

2777
01:48:59,040 --> 01:49:00,480
we've studied

2778
01:49:00,480 --> 01:49:03,199
so the takeaway here from the resolvers

2779
01:49:03,199 --> 01:49:04,800
measurement is that there is a

2780
01:49:04,800 --> 01:49:07,040
non-negligible number of tcp fallback

2781
01:49:07,040 --> 01:49:08,880
incapable resolvers

2782
01:49:08,880 --> 01:49:10,960
and they are about like just equally

2783
01:49:10,960 --> 01:49:15,679
active as the capable resolvers

2784
01:49:15,679 --> 01:49:17,440
uh

2785
01:49:17,440 --> 01:49:19,360
so next we're going to move on to the

2786
01:49:19,360 --> 01:49:22,800
tcp support by the authoritative dns

2787
01:49:22,800 --> 01:49:23,760
servers

2788
01:49:23,760 --> 01:49:24,480
so

2789
01:49:24,480 --> 01:49:26,080
in those measurements we're going to act

2790
01:49:26,080 --> 01:49:27,840
as

2791
01:49:27,840 --> 01:49:30,000
so we have the control over the

2792
01:49:30,000 --> 01:49:32,159
transport so the general approach is

2793
01:49:32,159 --> 01:49:34,480
just we try to send tcp queries to the

2794
01:49:34,480 --> 01:49:37,119
adns serving certain domains from a

2795
01:49:37,119 --> 01:49:40,320
testing machine on campus so only one

2796
01:49:40,320 --> 01:49:43,760
vantage point and uh we still have three

2797
01:49:43,760 --> 01:49:45,440
data sets here the first data set

2798
01:49:45,440 --> 01:49:47,040
includes the domains from the queries

2799
01:49:47,040 --> 01:49:49,199
handled by the resolution service

2800
01:49:49,199 --> 01:49:51,520
operated by the major cdn

2801
01:49:51,520 --> 01:49:53,040
and uh

2802
01:49:53,040 --> 01:49:55,280
we test all the 18s lists for each

2803
01:49:55,280 --> 01:49:58,239
domain and secondary set we

2804
01:49:58,239 --> 01:50:00,800
use the majestic top 1000 rule domain

2805
01:50:00,800 --> 01:50:03,119
websites and we call those popular

2806
01:50:03,119 --> 01:50:04,320
websites

2807
01:50:04,320 --> 01:50:07,280
and still we test all the 18 as listed

2808
01:50:07,280 --> 01:50:09,760
for each domain

2809
01:50:09,760 --> 01:50:13,119
last data set uh we have a list of cdn

2810
01:50:13,119 --> 01:50:15,599
accelerated domains and we just pick one

2811
01:50:15,599 --> 01:50:18,000
domain per cdn

2812
01:50:18,000 --> 01:50:18,880
um

2813
01:50:18,880 --> 01:50:21,360
and we test all the 18 as list every

2814
01:50:21,360 --> 01:50:24,360
domain

2815
01:50:24,400 --> 01:50:27,040
uh here's the results for the adns

2816
01:50:27,040 --> 01:50:29,440
server side so first of all the domains

2817
01:50:29,440 --> 01:50:31,119
from the from the query is handled by

2818
01:50:31,119 --> 01:50:32,800
the resolution service operated by the

2819
01:50:32,800 --> 01:50:34,239
major cdn

2820
01:50:34,239 --> 01:50:36,320
uh more than five percent of the domains

2821
01:50:36,320 --> 01:50:38,800
they fail to resolve tcp queries through

2822
01:50:38,800 --> 01:50:40,960
some 89 servers

2823
01:50:40,960 --> 01:50:43,679
and still and like even for the uh

2824
01:50:43,679 --> 01:50:46,639
popular websites still like around

2825
01:50:46,639 --> 01:50:48,159
a little bit more than three percent of

2826
01:50:48,159 --> 01:50:50,000
the domains they fail to resolve the tcp

2827
01:50:50,000 --> 01:50:52,480
course through some 18s and even for the

2828
01:50:52,480 --> 01:50:56,800
cdns 11 out of 47 cdns we've studied

2829
01:50:56,800 --> 01:50:59,280
they have deployed 89 servers that do

2830
01:50:59,280 --> 01:51:02,800
not support dns or tcp

2831
01:51:02,800 --> 01:51:04,000
and uh

2832
01:51:04,000 --> 01:51:06,639
so for the rest of the adns that do

2833
01:51:06,639 --> 01:51:08,800
support dns over tcp we're gonna we're

2834
01:51:08,800 --> 01:51:11,199
gonna move on and see the uh the race

2835
01:51:11,199 --> 01:51:12,400
condition

2836
01:51:12,400 --> 01:51:14,960
that are related to those to support dns

2837
01:51:14,960 --> 01:51:16,800
over tcp

2838
01:51:16,800 --> 01:51:18,239
so

2839
01:51:18,239 --> 01:51:20,800
uh so first of all rfc recommends

2840
01:51:20,800 --> 01:51:23,599
reusing his tablet tcp connections and

2841
01:51:23,599 --> 01:51:26,080
actually resolvers they do reuse

2842
01:51:26,080 --> 01:51:29,840
connections in another email scan we

2843
01:51:29,840 --> 01:51:33,040
we've successfully induced around 13.5

2844
01:51:33,040 --> 01:51:34,480
percent of the

2845
01:51:34,480 --> 01:51:36,560
resolvers that are that serves the uh

2846
01:51:36,560 --> 01:51:38,639
mail servers to reuse the tcp

2847
01:51:38,639 --> 01:51:40,960
connections so resolvers do reuse

2848
01:51:40,960 --> 01:51:43,520
connections and here's the race

2849
01:51:43,520 --> 01:51:45,920
um if the server tries to close the

2850
01:51:45,920 --> 01:51:48,320
connection after sending a response and

2851
01:51:48,320 --> 01:51:49,760
you know the server is trying to close

2852
01:51:49,760 --> 01:51:52,159
out this connection after responding to

2853
01:51:52,159 --> 01:51:55,119
this dns query but the client you know

2854
01:51:55,119 --> 01:51:56,960
the theme or the reset segment is still

2855
01:51:56,960 --> 01:51:58,400
on the flight and client doesn't know

2856
01:51:58,400 --> 01:51:59,760
that like this

2857
01:51:59,760 --> 01:52:01,760
this connection is being closed out and

2858
01:52:01,760 --> 01:52:03,760
the client and the client is trying to

2859
01:52:03,760 --> 01:52:05,360
reuse this connection for further

2860
01:52:05,360 --> 01:52:07,040
queries

2861
01:52:07,040 --> 01:52:08,960
we can see that this code is going to be

2862
01:52:08,960 --> 01:52:10,639
left unresponsive or we're going to be

2863
01:52:10,639 --> 01:52:12,880
left unresponded

2864
01:52:12,880 --> 01:52:15,199
so that's a race condition and actually

2865
01:52:15,199 --> 01:52:18,000
around 33 of the popular websites and

2866
01:52:18,000 --> 01:52:21,360
for cdn providers they deploy 89 servers

2867
01:52:21,360 --> 01:52:23,040
that just like close the connections

2868
01:52:23,040 --> 01:52:24,719
immediately after responding to the

2869
01:52:24,719 --> 01:52:25,520
first

2870
01:52:25,520 --> 01:52:28,719
uh dns over tcp query so they are

2871
01:52:28,719 --> 01:52:30,400
vulnerable to this

2872
01:52:30,400 --> 01:52:33,440
uh race condition

2873
01:52:33,840 --> 01:52:35,840
uh so

2874
01:52:35,840 --> 01:52:36,560
uh

2875
01:52:36,560 --> 01:52:38,320
next we are just uh

2876
01:52:38,320 --> 01:52:40,880
trying to propose some uh optional

2877
01:52:40,880 --> 01:52:43,119
update to the dns over tcp and we would

2878
01:52:43,119 --> 01:52:45,599
like to put them here to discuss with

2879
01:52:45,599 --> 01:52:46,960
the community

2880
01:52:46,960 --> 01:52:49,760
so um there has already been a fantastic

2881
01:52:49,760 --> 01:52:51,760
ddns edns

2882
01:52:51,760 --> 01:52:54,239
tcp keeper live extension and this

2883
01:52:54,239 --> 01:52:56,080
extension allows the client and server

2884
01:52:56,080 --> 01:52:58,320
to dynamically negotiate the timeout of

2885
01:52:58,320 --> 01:53:00,960
the current tcp connection so maybe you

2886
01:53:00,960 --> 01:53:02,480
can try to

2887
01:53:02,480 --> 01:53:06,320
work more on this uh ens extension

2888
01:53:06,320 --> 01:53:07,520
so

2889
01:53:07,520 --> 01:53:08,960
here are

2890
01:53:08,960 --> 01:53:11,840
our proposed optional update here first

2891
01:53:11,840 --> 01:53:14,000
a resolver must now reuse the tcp

2892
01:53:14,000 --> 01:53:17,520
connection unless and explicitly dns tcp

2893
01:53:17,520 --> 01:53:20,000
cable live negotiation has been complete

2894
01:53:20,000 --> 01:53:21,760
has been completed

2895
01:53:21,760 --> 01:53:24,000
the second the second

2896
01:53:24,000 --> 01:53:27,679
resolver has to be loyal to the

2897
01:53:27,679 --> 01:53:31,840
negotiated keep alive duration

2898
01:53:32,000 --> 01:53:33,679
the third one

2899
01:53:33,679 --> 01:53:34,960
maybe

2900
01:53:34,960 --> 01:53:37,119
we can just let the adns servers to

2901
01:53:37,119 --> 01:53:38,480
retain

2902
01:53:38,480 --> 01:53:41,840
the tcp connections for uh for another

2903
01:53:41,840 --> 01:53:42,800
two

2904
01:53:42,800 --> 01:53:44,880
maximum segment lifetime beyond the

2905
01:53:44,880 --> 01:53:46,560
negotiated

2906
01:53:46,560 --> 01:53:48,800
keep alive duration so that

2907
01:53:48,800 --> 01:53:50,639
all the um

2908
01:53:50,639 --> 01:53:54,000
outstanding all the tc dns over tcp

2909
01:53:54,000 --> 01:53:55,920
courses in the flight can be

2910
01:53:55,920 --> 01:53:59,119
correctly acknowledged and processed

2911
01:53:59,119 --> 01:54:00,480
and uh

2912
01:54:00,480 --> 01:54:02,000
there might be another potential

2913
01:54:02,000 --> 01:54:04,159
optimization we haven't studied on that

2914
01:54:04,159 --> 01:54:05,360
yet but

2915
01:54:05,360 --> 01:54:07,599
it's just uh maybe

2916
01:54:07,599 --> 01:54:09,840
we need more discussion on that so a

2917
01:54:09,840 --> 01:54:11,679
resolver so maybe we were thinking like

2918
01:54:11,679 --> 01:54:14,480
so right now edna's tcp keep alive

2919
01:54:14,480 --> 01:54:17,199
doesn't allow to be negotiated in udp

2920
01:54:17,199 --> 01:54:18,800
but maybe we can try to let the

2921
01:54:18,800 --> 01:54:20,480
resolvers and

2922
01:54:20,480 --> 01:54:23,760
adms servers to to like to to negotiate

2923
01:54:23,760 --> 01:54:27,280
the uh tcp cheaper live in udp so that

2924
01:54:27,280 --> 01:54:29,360
um the resolver and ads are going to

2925
01:54:29,360 --> 01:54:32,000
know that okay so the the remote

2926
01:54:32,000 --> 01:54:34,560
endpoint do support or doesn't support

2927
01:54:34,560 --> 01:54:37,040
that support doesn't support the tcp

2928
01:54:37,040 --> 01:54:38,400
reusing

2929
01:54:38,400 --> 01:54:40,559
and

2930
01:54:40,800 --> 01:54:44,159
maybe the client can try to uh shorten

2931
01:54:44,159 --> 01:54:46,639
the um can try to shorten the previously

2932
01:54:46,639 --> 01:54:49,679
negotiated keep alive duration here and

2933
01:54:49,679 --> 01:54:53,920
also because uh dns over tls explicitly

2934
01:54:53,920 --> 01:54:56,000
borrows the connection management policy

2935
01:54:56,000 --> 01:54:57,840
from dns over tcp

2936
01:54:57,840 --> 01:54:59,760
so we hope that like

2937
01:54:59,760 --> 01:55:02,960
these updates can also

2938
01:55:02,960 --> 01:55:05,679
so we hope that like dns over over tls

2939
01:55:05,679 --> 01:55:08,080
can also benefit from these uh updates

2940
01:55:08,080 --> 01:55:10,320
here

2941
01:55:10,960 --> 01:55:12,159
um

2942
01:55:12,159 --> 01:55:13,440
right so here's the conclusion for

2943
01:55:13,440 --> 01:55:14,800
today's talk

2944
01:55:14,800 --> 01:55:16,320
uh first of all on the recursive

2945
01:55:16,320 --> 01:55:19,119
resolver side a small but non-negligible

2946
01:55:19,119 --> 01:55:21,520
number of resolvers they do not support

2947
01:55:21,520 --> 01:55:22,960
the non-server

2948
01:55:22,960 --> 01:55:25,280
do not support tcp fallback and actually

2949
01:55:25,280 --> 01:55:27,040
they are very active so they are under

2950
01:55:27,040 --> 01:55:28,320
the risk of

2951
01:55:28,320 --> 01:55:30,639
not being able to um

2952
01:55:30,639 --> 01:55:31,360
to

2953
01:55:31,360 --> 01:55:33,920
to to to receive the answer for

2954
01:55:33,920 --> 01:55:36,239
for uh very large to receive very large

2955
01:55:36,239 --> 01:55:37,920
dns messages

2956
01:55:37,920 --> 01:55:40,719
the second of all on the on the uh dns

2957
01:55:40,719 --> 01:55:42,800
server side still a non-negligible

2958
01:55:42,800 --> 01:55:45,280
number of top websites and cn providers

2959
01:55:45,280 --> 01:55:47,599
they use authoritative dns servers that

2960
01:55:47,599 --> 01:55:49,920
do not support e-mails or tcp

2961
01:55:49,920 --> 01:55:52,400
and for the adns servers that do support

2962
01:55:52,400 --> 01:55:55,840
dns over tcp many of them are vulnerable

2963
01:55:55,840 --> 01:55:58,639
to the race condition

2964
01:55:58,639 --> 01:56:01,760
that's it

2965
01:56:01,760 --> 01:56:03,520
thank you very much thank you

2966
01:56:03,520 --> 01:56:05,760
very interesting and glad that we that

2967
01:56:05,760 --> 01:56:08,239
we finally managed to get here in here

2968
01:56:08,239 --> 01:56:10,559
um

2969
01:56:10,880 --> 01:56:12,639
so did you did you try to reach out to

2970
01:56:12,639 --> 01:56:14,560
the cdn providers and figure out if

2971
01:56:14,560 --> 01:56:16,719
they're planning to support this or why

2972
01:56:16,719 --> 01:56:19,440
they are not supporting this

2973
01:56:19,440 --> 01:56:23,119
oh yeah yeah yeah we just we we are we

2974
01:56:23,119 --> 01:56:26,159
we find some like some bugs in in some

2975
01:56:26,159 --> 01:56:27,360
in some

2976
01:56:27,360 --> 01:56:29,440
uh implementations and we

2977
01:56:29,440 --> 01:56:32,480
we reach out to them

2978
01:56:32,560 --> 01:56:33,599
okay

2979
01:56:33,599 --> 01:56:35,199
yeah definitely interesting to see these

2980
01:56:35,199 --> 01:56:36,400
deployment numbers so now we have

2981
01:56:36,400 --> 01:56:38,000
somebody in the queue

2982
01:56:38,000 --> 01:56:40,159
yeah hello

2983
01:56:40,159 --> 01:56:42,639
so um the question i have is the numbers

2984
01:56:42,639 --> 01:56:44,880
you presented you said some servers were

2985
01:56:44,880 --> 01:56:46,239
not reachable

2986
01:56:46,239 --> 01:56:48,560
did that mean that the resolution still

2987
01:56:48,560 --> 01:56:50,800
could complete without tcp

2988
01:56:50,800 --> 01:56:54,239
or was it just kind of one of these

2989
01:56:54,239 --> 01:56:56,080
or was all reservers not responding with

2990
01:56:56,080 --> 01:56:58,800
tcp i mean because some servers not

2991
01:56:58,800 --> 01:57:00,800
responding from a user perspective is

2992
01:57:00,800 --> 01:57:02,400
not

2993
01:57:02,400 --> 01:57:04,159
the thing yeah yeah

2994
01:57:04,159 --> 01:57:06,400
right so some adms means like so right

2995
01:57:06,400 --> 01:57:09,599
so if so maybe like they have uh a 280

2996
01:57:09,599 --> 01:57:12,159
ns one supports tcp another one doesn't

2997
01:57:12,159 --> 01:57:14,560
support tcp so that means some were like

2998
01:57:14,560 --> 01:57:17,440
both of them none of them supports

2999
01:57:17,440 --> 01:57:20,400
tcp so that's another like sum 18s

3000
01:57:20,400 --> 01:57:21,280
did you

3001
01:57:21,280 --> 01:57:22,320
actually

3002
01:57:22,320 --> 01:57:24,480
also calculate that number because that

3003
01:57:24,480 --> 01:57:26,080
would be much more interesting for for

3004
01:57:26,080 --> 01:57:28,639
real users

3005
01:57:28,639 --> 01:57:31,119
uh yes uh i think yeah we have the

3006
01:57:31,119 --> 01:57:34,000
numbers we have the numbers uh

3007
01:57:34,000 --> 01:57:35,440
are you talking about this

3008
01:57:35,440 --> 01:57:36,960
a little bit more than five percent

3009
01:57:36,960 --> 01:57:39,040
domains or you are talking about the

3010
01:57:39,040 --> 01:57:40,159
numbers

3011
01:57:40,159 --> 01:57:42,239
on 18s but now the

3012
01:57:42,239 --> 01:57:43,920
number of domains

3013
01:57:43,920 --> 01:57:45,599
from my understanding is these numbers

3014
01:57:45,599 --> 01:57:46,719
just mean

3015
01:57:46,719 --> 01:57:49,440
you have x x domains

3016
01:57:49,440 --> 01:57:51,040
that

3017
01:57:51,040 --> 01:57:53,599
or x server that don't respond but you

3018
01:57:53,599 --> 01:57:54,719
don't have

3019
01:57:54,719 --> 01:57:57,280
uh the amount of numbers the number that

3020
01:57:57,280 --> 01:57:59,760
actually would not resolve that's a

3021
01:57:59,760 --> 01:58:02,159
different outcome

3022
01:58:02,159 --> 01:58:04,000
so now resolve

3023
01:58:04,000 --> 01:58:06,080
um

3024
01:58:06,080 --> 01:58:08,320
without tcp i mean

3025
01:58:08,320 --> 01:58:10,960
if you have a domain say example.com

3026
01:58:10,960 --> 01:58:12,239
that has

3027
01:58:12,239 --> 01:58:14,239
two name servers and one response with

3028
01:58:14,239 --> 01:58:17,199
tcp and one doesn't then that would be

3029
01:58:17,199 --> 01:58:20,320
still okay even if it would be in your

3030
01:58:20,320 --> 01:58:22,719
list of

3031
01:58:22,719 --> 01:58:24,960
domains that where some are not

3032
01:58:24,960 --> 01:58:26,480
responding

3033
01:58:26,480 --> 01:58:28,718
right

3034
01:58:29,040 --> 01:58:32,239
maybe you have to come closer to the mic

3035
01:58:32,239 --> 01:58:35,239
um

3036
01:58:35,760 --> 01:58:37,199
yeah can you say that again please yeah

3037
01:58:37,199 --> 01:58:40,320
i i'm trying to follow

3038
01:58:43,119 --> 01:58:45,520
so maybe just we take it off offline

3039
01:58:45,520 --> 01:58:46,320
yeah

3040
01:58:46,320 --> 01:58:48,639
okay yeah

3041
01:58:48,639 --> 01:58:52,159
we have peter in the queue

3042
01:58:52,239 --> 01:58:55,040
hi yeah i have a question on

3043
01:58:55,040 --> 01:58:57,920
the interpretation of um

3044
01:58:57,920 --> 01:59:00,080
large samples of of resolvers or in fact

3045
01:59:00,080 --> 01:59:02,639
it's two questions so i think um your

3046
01:59:02,639 --> 01:59:04,000
slide said you

3047
01:59:04,000 --> 01:59:06,159
checked about a hundred thousand or so

3048
01:59:06,159 --> 01:59:07,520
resolvers

3049
01:59:07,520 --> 01:59:10,080
and when we do um reserve studies we

3050
01:59:10,080 --> 01:59:12,159
always wonder um

3051
01:59:12,159 --> 01:59:14,560
how um like how much does that mean

3052
01:59:14,560 --> 01:59:15,520
because

3053
01:59:15,520 --> 01:59:17,679
if i find some some random ip address

3054
01:59:17,679 --> 01:59:20,639
that that responds to dns queries

3055
01:59:20,639 --> 01:59:21,520
um

3056
01:59:21,520 --> 01:59:23,280
it may be resolver that is not actually

3057
01:59:23,280 --> 01:59:27,599
used or it may be and um yeah so

3058
01:59:27,599 --> 01:59:29,920
the first question i have is how to

3059
01:59:29,920 --> 01:59:31,520
assess the

3060
01:59:31,520 --> 01:59:33,199
significance or relevance of any given

3061
01:59:33,199 --> 01:59:35,599
resolver and

3062
01:59:35,599 --> 01:59:38,239
that might lead to a bias in this 95 to

3063
01:59:38,239 --> 01:59:39,360
97

3064
01:59:39,360 --> 01:59:40,880
percent result

3065
01:59:40,880 --> 01:59:43,040
if you would filter out the ones that

3066
01:59:43,040 --> 01:59:44,719
aren't really real world resolvers and

3067
01:59:44,719 --> 01:59:46,400
just leftover orphaned deployments or

3068
01:59:46,400 --> 01:59:48,880
whatever and the second question i have

3069
01:59:48,880 --> 01:59:49,560
is similar

3070
01:59:49,560 --> 01:59:50,880
[Music]

3071
01:59:50,880 --> 01:59:52,639
people sometimes argue that especially

3072
01:59:52,639 --> 01:59:54,639
in corporate environments tcp support

3073
01:59:54,639 --> 01:59:56,159
may be

3074
01:59:56,159 --> 01:59:58,080
blocked by middle boxes or whatever and

3075
01:59:58,080 --> 01:59:59,760
that that would be a problem for dean

3076
01:59:59,760 --> 02:00:01,360
essec deployments and other things with

3077
02:00:01,360 --> 02:00:03,679
large payloads in dns

3078
02:00:03,679 --> 02:00:05,280
and um

3079
02:00:05,280 --> 02:00:06,800
maybe i didn't get it in your talk but

3080
02:00:06,800 --> 02:00:08,639
if you could point out

3081
02:00:08,639 --> 02:00:10,639
one or two insights on that aspect and

3082
02:00:10,639 --> 02:00:13,599
whether that is true or maybe not true

3083
02:00:13,599 --> 02:00:15,599
about the tcp support lacking in copper

3084
02:00:15,599 --> 02:00:17,520
environments that would be nice thanks

3085
02:00:17,520 --> 02:00:18,960
and very nice

3086
02:00:18,960 --> 02:00:21,040
research in general

3087
02:00:21,040 --> 02:00:23,440
thank you so yeah so first of all let me

3088
02:00:23,440 --> 02:00:24,840
try to uh

3089
02:00:24,840 --> 02:00:28,159
read try to uh repeat your question

3090
02:00:28,159 --> 02:00:31,760
first so so the your first question is

3091
02:00:31,760 --> 02:00:34,000
uh so you're saying like maybe some of

3092
02:00:34,000 --> 02:00:37,119
the tcp fallback capable resolvers are

3093
02:00:37,119 --> 02:00:39,360
not used or some tcp feedback incapable

3094
02:00:39,360 --> 02:00:41,440
resolvers are not used

3095
02:00:41,440 --> 02:00:43,440
in real world applications so how do we

3096
02:00:43,440 --> 02:00:46,159
know that right

3097
02:00:46,639 --> 02:00:50,719
um right so we we have the uh we we have

3098
02:00:50,719 --> 02:00:53,760
the uh we have the 18s log from a major

3099
02:00:53,760 --> 02:00:55,280
cdn

3100
02:00:55,280 --> 02:00:56,960
so

3101
02:00:56,960 --> 02:01:00,719
uh so we so we know that like so whether

3102
02:01:00,719 --> 02:01:02,880
this adns is being used or not being

3103
02:01:02,880 --> 02:01:03,920
used and

3104
02:01:03,920 --> 02:01:06,960
to what extent it is being used

3105
02:01:06,960 --> 02:01:09,199
and for this number here you can you can

3106
02:01:09,199 --> 02:01:11,360
see that like so we say that like around

3107
02:01:11,360 --> 02:01:13,599
95 to 97 percent of the resolvers are

3108
02:01:13,599 --> 02:01:16,239
tcp by capable and they contribute to

3109
02:01:16,239 --> 02:01:18,960
around 96 to 99 percent of the cdn

3110
02:01:18,960 --> 02:01:21,520
traffic from the dollar study so

3111
02:01:21,520 --> 02:01:24,080
that's uh that's our aggregated results

3112
02:01:24,080 --> 02:01:26,400
here so basically

3113
02:01:26,400 --> 02:01:28,000
um

3114
02:01:28,000 --> 02:01:31,280
that leaves like around

3115
02:01:31,280 --> 02:01:32,960
uh

3116
02:01:32,960 --> 02:01:35,199
so so we we cannot say that like so

3117
02:01:35,199 --> 02:01:37,280
basically

3118
02:01:37,280 --> 02:01:39,360
uh

3119
02:01:39,360 --> 02:01:41,840
which resolver is being used and which

3120
02:01:41,840 --> 02:01:43,360
resolver is not being used but we can

3121
02:01:43,360 --> 02:01:45,360
say that like so overall the tcp

3122
02:01:45,360 --> 02:01:46,639
fallback capable

3123
02:01:46,639 --> 02:01:49,199
resolvers are being used

3124
02:01:49,199 --> 02:01:52,000
as this and you know the tcp overall the

3125
02:01:52,000 --> 02:01:54,400
tcp fallback incapable results are being

3126
02:01:54,400 --> 02:01:56,719
used are still being used

3127
02:01:56,719 --> 02:01:58,320
because they still contribute to around

3128
02:01:58,320 --> 02:02:01,040
like one percent of the

3129
02:02:01,040 --> 02:02:02,880
cdn traffic

3130
02:02:02,880 --> 02:02:04,639
yeah i think we have to take the second

3131
02:02:04,639 --> 02:02:06,239
part of the question to the list we are

3132
02:02:06,239 --> 02:02:08,719
kind of at time um it sounds like

3133
02:02:08,719 --> 02:02:10,800
interesting question about um blocking

3134
02:02:10,800 --> 02:02:12,400
of dns over

3135
02:02:12,400 --> 02:02:14,800
tcp which might need further study and

3136
02:02:14,800 --> 02:02:16,639
maybe just take it yeah yeah

3137
02:02:16,639 --> 02:02:18,400
thanks again for being here and taking

3138
02:02:18,400 --> 02:02:20,000
the effort to drive in the middle of the

3139
02:02:20,000 --> 02:02:22,080
night to university that's

3140
02:02:22,080 --> 02:02:23,920
great to have you

3141
02:02:23,920 --> 02:02:25,920
um thank you everybody else also who

3142
02:02:25,920 --> 02:02:27,520
joined in the middle of the night this

3143
02:02:27,520 --> 02:02:29,280
wasn't a convenient time for everybody

3144
02:02:29,280 --> 02:02:31,520
but i think we had a great session i'm

3145
02:02:31,520 --> 02:02:34,080
so happy that we ended up in a two-hour

3146
02:02:34,080 --> 02:02:35,920
slot even so we only requested one hour

3147
02:02:35,920 --> 02:02:38,000
we got we had because we got some nice

3148
02:02:38,000 --> 02:02:39,840
talks here and i'm already looking

3149
02:02:39,840 --> 02:02:42,000
forward to the next session

3150
02:02:42,000 --> 02:02:43,040
dave

3151
02:02:43,040 --> 02:02:44,400
yeah thanks maria and thanks to the

3152
02:02:44,400 --> 02:02:46,080
contributors too you guys have a good

3153
02:02:46,080 --> 02:02:47,360
week

3154
02:02:47,360 --> 02:02:49,040
okay thank you everybody and also

3155
02:02:49,040 --> 02:02:51,840
thanking alex for taking notes

3156
02:02:51,840 --> 02:02:55,719
that's it bye bye

3157
02:03:38,800 --> 02:03:42,840
the meeting notes itself

3158
02:03:43,360 --> 02:03:45,360
are kind of already so this is not like

3159
02:03:45,360 --> 02:03:47,040
the final official version but it's all

3160
02:03:47,040 --> 02:03:49,599
here so if you want to check on that

3161
02:03:49,599 --> 02:03:53,639
you can even edit it effectively

