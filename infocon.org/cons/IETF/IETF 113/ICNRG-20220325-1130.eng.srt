1
00:00:05,279 --> 00:00:08,000
and audio video and so on and there's

2
00:00:08,000 --> 00:00:12,000
one that is labeled um probably

3
00:00:12,000 --> 00:00:14,080
sharing slides or something

4
00:00:14,080 --> 00:00:17,920
well i asked to share slides

5
00:00:18,640 --> 00:00:19,760
um

6
00:00:19,760 --> 00:00:22,000
it says share preloaded slides

7
00:00:22,000 --> 00:00:24,800
right so i need to just uh right share

8
00:00:24,800 --> 00:00:26,960
preloaded slides and then you can you

9
00:00:26,960 --> 00:00:29,039
get a list and then you select your

10
00:00:29,039 --> 00:00:30,480
presentation and then you have the

11
00:00:30,480 --> 00:00:33,120
control and can can move forward and so

12
00:00:33,120 --> 00:00:34,640
on

13
00:00:34,640 --> 00:00:36,239
all right wait for it till we've done

14
00:00:36,239 --> 00:00:38,239
our chairs introduction

15
00:00:38,239 --> 00:00:42,160
and it's 7 30 so we get started anytime

16
00:00:42,160 --> 00:00:45,160
okay

17
00:00:46,000 --> 00:00:47,520
but if there are any issues let us know

18
00:00:47,520 --> 00:00:51,760
and we can also just run them for you

19
00:00:53,120 --> 00:00:54,079
okay

20
00:00:54,079 --> 00:00:56,719
yeah welcome everybody to

21
00:00:56,719 --> 00:00:59,199
ic energy at

22
00:00:59,199 --> 00:01:04,239
iatf 113 in vienna

23
00:01:04,239 --> 00:01:06,960
special greetings to our friends in the

24
00:01:06,960 --> 00:01:08,240
room

25
00:01:08,240 --> 00:01:11,600
thanks matthias for being our

26
00:01:11,600 --> 00:01:14,960
on-site co-chair today

27
00:01:14,960 --> 00:01:17,759
it doesn't look like we will have

28
00:01:17,759 --> 00:01:19,439
lots of questions from the room today

29
00:01:19,439 --> 00:01:22,000
but let's see so matthias is going to

30
00:01:22,000 --> 00:01:24,560
manage that in case there's

31
00:01:24,560 --> 00:01:26,720
something to be done um hello thomas i

32
00:01:26,720 --> 00:01:29,280
see you in the back

33
00:01:29,920 --> 00:01:31,840
okay um yeah i'm the coach and my coach

34
00:01:31,840 --> 00:01:32,560
is

35
00:01:32,560 --> 00:01:35,840
dave iran and um

36
00:01:35,840 --> 00:01:37,920
so um i think you probably have seen

37
00:01:37,920 --> 00:01:40,400
this light now on day five of the

38
00:01:40,400 --> 00:01:42,159
meeting but

39
00:01:42,159 --> 00:01:44,079
yeah so just make sure that you are

40
00:01:44,079 --> 00:01:45,680
using the the

41
00:01:45,680 --> 00:01:48,240
mid echolite tool if you are in the room

42
00:01:48,240 --> 00:01:50,799
and if you're not talking or presenting

43
00:01:50,799 --> 00:01:54,000
turn off your mic and video as always

44
00:01:54,000 --> 00:01:58,640
um of course this session is recorded

45
00:01:58,719 --> 00:02:01,280
um just quickly

46
00:02:01,280 --> 00:02:03,439
we still apply the

47
00:02:03,439 --> 00:02:06,240
irtf ipr

48
00:02:06,240 --> 00:02:09,520
rules so um let us know so in

49
00:02:09,520 --> 00:02:11,038
in summary let us know if you there's

50
00:02:11,038 --> 00:02:13,200
anything ipr related that you see being

51
00:02:13,200 --> 00:02:15,680
discussed here

52
00:02:15,680 --> 00:02:16,720
um

53
00:02:16,720 --> 00:02:21,040
right so everything is recorded um

54
00:02:21,280 --> 00:02:22,560
the

55
00:02:22,560 --> 00:02:26,000
irtf is using the itf uh privacy and

56
00:02:26,000 --> 00:02:27,360
code of conduct

57
00:02:27,360 --> 00:02:29,599
rules and um

58
00:02:29,599 --> 00:02:32,080
we also have anti-erasmus procedures so

59
00:02:32,080 --> 00:02:34,959
if in case of any issue um

60
00:02:34,959 --> 00:02:37,519
we have an ombuds team that you can can

61
00:02:37,519 --> 00:02:40,000
contact

62
00:02:40,560 --> 00:02:43,200
and quick reminder

63
00:02:43,200 --> 00:02:46,480
so we are doing research here and not

64
00:02:46,480 --> 00:02:48,640
standards development

65
00:02:48,640 --> 00:02:50,640
the best we can do is uh

66
00:02:50,640 --> 00:02:51,360
like

67
00:02:51,360 --> 00:02:53,360
publishing experimental and

68
00:02:53,360 --> 00:02:56,000
specifications as rc's

69
00:02:56,000 --> 00:02:58,239
so the idea is in general to

70
00:02:58,239 --> 00:03:01,599
enable research and generate

71
00:03:01,599 --> 00:03:03,840
insights for the ietf or the general

72
00:03:03,840 --> 00:03:06,640
internet community

73
00:03:06,800 --> 00:03:09,120
okay

74
00:03:09,280 --> 00:03:10,959
today we are

75
00:03:10,959 --> 00:03:13,920
supported again by jose

76
00:03:13,920 --> 00:03:16,159
thank you very very much

77
00:03:16,159 --> 00:03:17,680
really appreciate

78
00:03:17,680 --> 00:03:18,400
so

79
00:03:18,400 --> 00:03:20,640
my real as you say is taking the notes

80
00:03:20,640 --> 00:03:23,760
um in the uh hedge doc um

81
00:03:23,760 --> 00:03:26,239
note-taking system i pasted the link

82
00:03:26,239 --> 00:03:28,400
into the chat um if you want to follow

83
00:03:28,400 --> 00:03:29,440
along or

84
00:03:29,440 --> 00:03:31,360
assist in the note-taking

85
00:03:31,360 --> 00:03:34,319
you are welcome to do so

86
00:03:34,799 --> 00:03:37,680
and this is our agenda so we have a

87
00:03:37,680 --> 00:03:41,519
really nice agenda um today um

88
00:03:41,519 --> 00:03:42,560
so

89
00:03:42,560 --> 00:03:44,879
um we are not going to to read this just

90
00:03:44,879 --> 00:03:47,599
asking is there anything else that

91
00:03:47,599 --> 00:03:49,760
you want to add or you want to

92
00:03:49,760 --> 00:03:52,720
say about the agenda

93
00:03:55,920 --> 00:03:56,879
okay

94
00:03:56,879 --> 00:03:58,480
great so before we get to edmonds

95
00:03:58,480 --> 00:04:00,000
presentation

96
00:04:00,000 --> 00:04:02,000
let's just quickly

97
00:04:02,000 --> 00:04:04,400
check where we are

98
00:04:04,400 --> 00:04:06,000
in the group

99
00:04:06,000 --> 00:04:08,080
so we recently had a

100
00:04:08,080 --> 00:04:10,959
really nice flow of outputs from ic

101
00:04:10,959 --> 00:04:12,400
energy

102
00:04:12,400 --> 00:04:13,760
so

103
00:04:13,760 --> 00:04:15,760
um being published and we have a few

104
00:04:15,760 --> 00:04:19,600
more um that we want to um get out

105
00:04:19,600 --> 00:04:21,759
so ccn info um

106
00:04:21,759 --> 00:04:24,639
is i think still waiting here for irsg

107
00:04:24,639 --> 00:04:27,199
reviews um

108
00:04:27,199 --> 00:04:29,759
we're going to talk about flick later

109
00:04:29,759 --> 00:04:32,720
um icn lte um

110
00:04:32,720 --> 00:04:34,560
basically went through

111
00:04:34,560 --> 00:04:38,320
the ihg conflict review and

112
00:04:38,320 --> 00:04:42,160
the authors just published a new version

113
00:04:42,160 --> 00:04:45,680
and as far as i understand what colin is

114
00:04:45,680 --> 00:04:47,919
asking for right now is a statement on

115
00:04:47,919 --> 00:04:51,360
the ipr situation so

116
00:04:51,360 --> 00:04:52,639
would be great if the authors could

117
00:04:52,639 --> 00:04:54,479
really clarify that

118
00:04:54,479 --> 00:04:56,960
as soon as possible um to get this

119
00:04:56,960 --> 00:04:59,680
published soon

120
00:05:00,560 --> 00:05:03,039
and um i see colin

121
00:05:03,039 --> 00:05:05,680
joining the queue

122
00:05:06,800 --> 00:05:09,120
all right yeah just just quickly on that

123
00:05:09,120 --> 00:05:12,400
one the the issue there is that uh there

124
00:05:12,400 --> 00:05:15,360
was an api declaration on the individual

125
00:05:15,360 --> 00:05:17,199
draft uh before it was adopted as a

126
00:05:17,199 --> 00:05:19,520
research group draft which hasn't been

127
00:05:19,520 --> 00:05:21,840
right for the the research group draft

128
00:05:21,840 --> 00:05:23,280
uh so we're just waiting on

129
00:05:23,280 --> 00:05:24,800
clarification whether that's still

130
00:05:24,800 --> 00:05:26,880
relevant or or if the draft has changed

131
00:05:26,880 --> 00:05:29,680
so if it isn't

132
00:05:34,720 --> 00:05:36,840
is it just me or is your audio breaking

133
00:05:36,840 --> 00:05:40,560
up let me just save here

134
00:05:40,880 --> 00:05:44,400
it's possibly

135
00:05:44,639 --> 00:05:46,880
seems to be on your side calling

136
00:05:46,880 --> 00:05:49,199
it here is that better

137
00:05:49,199 --> 00:05:53,280
yeah i think so yeah uh my my my laptop

138
00:05:53,280 --> 00:05:55,039
runs out to cpu with all the video

139
00:05:55,039 --> 00:05:58,319
streams and that's the audio

140
00:05:58,319 --> 00:06:01,039
uh all i i was saying there was the the

141
00:06:01,039 --> 00:06:04,319
ipr issue is that there was um

142
00:06:04,319 --> 00:06:07,199
an ipr declaration of the individual

143
00:06:07,199 --> 00:06:09,120
draft uh before it was adopted by the

144
00:06:09,120 --> 00:06:10,960
research group draft which hasn't then

145
00:06:10,960 --> 00:06:12,479
been reflected onto the research group

146
00:06:12,479 --> 00:06:13,600
draft so we're just looking for

147
00:06:13,600 --> 00:06:15,360
clarification on whether that that still

148
00:06:15,360 --> 00:06:17,280
applies uh and if so it needs to be

149
00:06:17,280 --> 00:06:20,080
updated for the research group drift

150
00:06:20,080 --> 00:06:23,440
yeah okay thanks uh dirk crossan is

151
00:06:23,440 --> 00:06:25,039
at the microphone

152
00:06:25,039 --> 00:06:26,720
yeah hi um

153
00:06:26,720 --> 00:06:29,039
as i mentioned to to colin because he's

154
00:06:29,039 --> 00:06:31,280
been pulling the authors and while i

155
00:06:31,280 --> 00:06:33,199
have no ipr declaration obviously the

156
00:06:33,199 --> 00:06:34,880
draft was initiated when i was with my

157
00:06:34,880 --> 00:06:36,400
previous company

158
00:06:36,400 --> 00:06:38,160
the problem is as you may recognize

159
00:06:38,160 --> 00:06:39,280
given the

160
00:06:39,280 --> 00:06:41,759
current situation i can't query with the

161
00:06:41,759 --> 00:06:43,759
company directly they won't reply to any

162
00:06:43,759 --> 00:06:45,440
email that i send directly so we've

163
00:06:45,440 --> 00:06:46,960
tried to figure we need to figure out

164
00:06:46,960 --> 00:06:49,120
how to get in touch

165
00:06:49,120 --> 00:06:50,479
with in the digital to figure out if

166
00:06:50,479 --> 00:06:53,039
there's any ipr that may be pending i

167
00:06:53,039 --> 00:06:54,800
can't declare i mean for my side i say

168
00:06:54,800 --> 00:06:57,280
no but i don't feel comfortable in doing

169
00:06:57,280 --> 00:06:59,360
that 100

170
00:06:59,360 --> 00:07:01,680
so colin maybe i can give you a couple

171
00:07:01,680 --> 00:07:03,680
of names and you may ping them they may

172
00:07:03,680 --> 00:07:06,800
reply to you if i do that they won't

173
00:07:06,800 --> 00:07:08,319
uh i i

174
00:07:08,319 --> 00:07:10,720
i i i can't if you think it's necessary

175
00:07:10,720 --> 00:07:12,560
that they've already made an ipr

176
00:07:12,560 --> 00:07:14,720
declaration for that draft so

177
00:07:14,720 --> 00:07:17,440
okay good i didn't realize that good

178
00:07:17,440 --> 00:07:18,560
thank you

179
00:07:18,560 --> 00:07:22,000
it's really just clarifying

180
00:07:23,199 --> 00:07:26,479
okay yeah thanks um for that um

181
00:07:26,479 --> 00:07:29,199
and then you may have noticed that

182
00:07:29,199 --> 00:07:31,360
there have been new versions of icn ping

183
00:07:31,360 --> 00:07:33,199
and i seen traceroute

184
00:07:33,199 --> 00:07:35,759
recently so

185
00:07:35,759 --> 00:07:37,840
we

186
00:07:37,840 --> 00:07:39,360
want to publish these

187
00:07:39,360 --> 00:07:40,960
specifications

188
00:07:40,960 --> 00:07:42,720
soon as well and

189
00:07:42,720 --> 00:07:45,759
so right now they're waiting for the

190
00:07:45,759 --> 00:07:48,479
shepherd oops and that's me um so i'll

191
00:07:48,479 --> 00:07:52,400
take care of this um very soon

192
00:07:53,199 --> 00:07:54,720
and um

193
00:07:54,720 --> 00:07:57,759
david do you know the status of the

194
00:07:57,759 --> 00:07:59,280
nis architecture

195
00:07:59,280 --> 00:08:02,559
considerations draft

196
00:08:08,400 --> 00:08:11,799
i will continue

197
00:08:14,879 --> 00:08:16,479
at least i can't hear you

198
00:08:16,479 --> 00:08:20,520
yeah same here you're muted

199
00:08:31,039 --> 00:08:34,039
okay

200
00:08:45,600 --> 00:08:47,920
so i think this is um this is actually

201
00:08:47,920 --> 00:08:50,560
done um so we're waiting for it to be

202
00:08:50,560 --> 00:08:51,680
published

203
00:08:51,680 --> 00:08:55,279
so maybe dave can come back later and

204
00:08:55,279 --> 00:08:59,760
clarify any questions that may arise

205
00:09:00,800 --> 00:09:03,120
okay

206
00:09:03,120 --> 00:09:04,560
so with that

207
00:09:04,560 --> 00:09:05,519
let's

208
00:09:05,519 --> 00:09:07,040
move to

209
00:09:07,040 --> 00:09:08,880
our first presentation

210
00:09:08,880 --> 00:09:09,680
and

211
00:09:09,680 --> 00:09:12,239
ah colin

212
00:09:15,360 --> 00:09:17,360
is my audio working

213
00:09:17,360 --> 00:09:18,959
yep

214
00:09:18,959 --> 00:09:21,120
so for the nrs arch considerations i

215
00:09:21,120 --> 00:09:23,760
think it's the rfc editor isn't it

216
00:09:23,760 --> 00:09:25,760
yeah right so i am that's what it said

217
00:09:25,760 --> 00:09:27,279
um

218
00:09:27,279 --> 00:09:28,800
i think it's yeah i think it's done so

219
00:09:28,800 --> 00:09:32,479
there's nothing we can do at the moment

220
00:09:34,399 --> 00:09:35,440
all right

221
00:09:35,440 --> 00:09:39,279
okay so um edmund are you ready

222
00:09:39,440 --> 00:09:43,839
um yes um so

223
00:09:43,839 --> 00:09:47,279
i've requested to share slides right

224
00:09:47,279 --> 00:09:50,190
so um

225
00:09:50,190 --> 00:09:51,519
[Music]

226
00:09:51,519 --> 00:09:53,680
yes

227
00:09:54,480 --> 00:09:56,320
so i do

228
00:09:56,320 --> 00:09:57,360
okay

229
00:09:57,360 --> 00:09:59,120
i think it's coming up

230
00:09:59,120 --> 00:10:01,680
and then i used to really share right

231
00:10:01,680 --> 00:10:04,959
yeah yeah looking good then i can i can

232
00:10:04,959 --> 00:10:06,959
just operate it from here right yeah you

233
00:10:06,959 --> 00:10:09,200
can use your your cursor key something

234
00:10:09,200 --> 00:10:11,200
all right all right great

235
00:10:11,200 --> 00:10:14,959
thank you uh dirk uh and thank you uh

236
00:10:14,959 --> 00:10:17,440
dave for inviting me to

237
00:10:17,440 --> 00:10:20,240
present uh today for

238
00:10:20,240 --> 00:10:22,800
the itt energy meeting

239
00:10:22,800 --> 00:10:25,040
so i'm edmund yey from northeastern

240
00:10:25,040 --> 00:10:27,040
university

241
00:10:27,040 --> 00:10:28,959
and this

242
00:10:28,959 --> 00:10:31,360
talk is about

243
00:10:31,360 --> 00:10:34,560
a project that we have been um

244
00:10:34,560 --> 00:10:37,120
uh pursuing for the past uh more than a

245
00:10:37,120 --> 00:10:38,240
year

246
00:10:38,240 --> 00:10:40,800
uh it's called ndn for data intensive

247
00:10:40,800 --> 00:10:42,800
science experiments

248
00:10:42,800 --> 00:10:44,079
uh indeed

249
00:10:44,079 --> 00:10:44,959
to

250
00:10:44,959 --> 00:10:46,880
uh for for short

251
00:10:46,880 --> 00:10:48,800
um

252
00:10:48,800 --> 00:10:52,320
so so uh this is actually a follow-on to

253
00:10:52,320 --> 00:10:54,000
a project

254
00:10:54,000 --> 00:10:56,160
uh which is called sandy

255
00:10:56,160 --> 00:10:59,040
uh which uh started in 2017 and i

256
00:10:59,040 --> 00:11:00,959
believe two years ago

257
00:11:00,959 --> 00:11:03,839
i made a presentation to icnrg about

258
00:11:03,839 --> 00:11:06,560
sandy and indies and of course

259
00:11:06,560 --> 00:11:10,880
at that time it was more preliminary

260
00:11:10,880 --> 00:11:12,000
so

261
00:11:12,000 --> 00:11:14,320
the project concerns data intensive

262
00:11:14,320 --> 00:11:15,440
science

263
00:11:15,440 --> 00:11:17,040
so the

264
00:11:17,040 --> 00:11:19,279
examples that we're considering here

265
00:11:19,279 --> 00:11:21,600
are examples such as large hadron

266
00:11:21,600 --> 00:11:24,480
collider high energy physics

267
00:11:24,480 --> 00:11:26,320
lsst

268
00:11:26,320 --> 00:11:29,600
the largest synoptic survey telescope

269
00:11:29,600 --> 00:11:32,800
or ska or genomics

270
00:11:32,800 --> 00:11:36,160
these types of science applications

271
00:11:36,160 --> 00:11:39,440
essentially you have a situation where

272
00:11:39,440 --> 00:11:41,440
there is an enormous amount of data

273
00:11:41,440 --> 00:11:43,120
being taken

274
00:11:43,120 --> 00:11:44,800
either at one

275
00:11:44,800 --> 00:11:47,440
or or a number of different locations

276
00:11:47,440 --> 00:11:48,800
around the world

277
00:11:48,800 --> 00:11:51,600
in the case of large large hadron

278
00:11:51,600 --> 00:11:53,360
collider of course the data is being

279
00:11:53,360 --> 00:11:55,600
taken in cern

280
00:11:55,600 --> 00:11:59,279
and in in geneva and that

281
00:11:59,279 --> 00:12:00,880
information then

282
00:12:00,880 --> 00:12:02,800
have to be distributed has to be

283
00:12:02,800 --> 00:12:05,040
distributed around the world to a couple

284
00:12:05,040 --> 00:12:07,279
of different um a couple of hundred

285
00:12:07,279 --> 00:12:10,320
different institutions for analysis

286
00:12:10,320 --> 00:12:11,680
and these are

287
00:12:11,680 --> 00:12:14,399
very big data volumes that have to be

288
00:12:14,399 --> 00:12:15,600
distributed

289
00:12:15,600 --> 00:12:18,399
and they're distributed distributed for

290
00:12:18,399 --> 00:12:20,880
analysis purposes and computation

291
00:12:20,880 --> 00:12:22,560
purposes

292
00:12:22,560 --> 00:12:26,000
and uh so we we had um started this

293
00:12:26,000 --> 00:12:28,639
collaboration almost five years back

294
00:12:28,639 --> 00:12:32,079
and uh there exists actually a uh

295
00:12:32,079 --> 00:12:33,600
problem

296
00:12:33,600 --> 00:12:35,440
uh in this

297
00:12:35,440 --> 00:12:37,519
area

298
00:12:37,519 --> 00:12:39,839
because

299
00:12:40,000 --> 00:12:43,440
um because um the data volumes here for

300
00:12:43,440 --> 00:12:45,680
instance for large hadron collider

301
00:12:45,680 --> 00:12:49,200
are said to grow um very fast almost 10

302
00:12:49,200 --> 00:12:51,279
times due to high luminosity with what

303
00:12:51,279 --> 00:12:54,639
are so called luminosity experiments

304
00:12:54,639 --> 00:12:57,200
coming up they're already on the uh

305
00:12:57,200 --> 00:13:00,160
in the order of exabytes

306
00:13:00,160 --> 00:13:02,720
and is said to grow another 10 times in

307
00:13:02,720 --> 00:13:04,399
the next couple of years

308
00:13:04,399 --> 00:13:05,760
and even

309
00:13:05,760 --> 00:13:07,279
given the

310
00:13:07,279 --> 00:13:10,000
considerable resources that lhc network

311
00:13:10,000 --> 00:13:11,200
has

312
00:13:11,200 --> 00:13:12,639
they are still going to have a lot of

313
00:13:12,639 --> 00:13:15,360
problems in handling this data volume

314
00:13:15,360 --> 00:13:17,440
and distributed around the world

315
00:13:17,440 --> 00:13:21,279
so they actually sought out ndn

316
00:13:21,279 --> 00:13:24,160
and particularly our group to work with

317
00:13:24,160 --> 00:13:25,360
them to

318
00:13:25,360 --> 00:13:26,240
build

319
00:13:26,240 --> 00:13:28,079
a new system for them

320
00:13:28,079 --> 00:13:30,959
uh as a future system that can

321
00:13:30,959 --> 00:13:32,800
distribute this data more effectively

322
00:13:32,800 --> 00:13:35,040
for the lhc community

323
00:13:35,040 --> 00:13:37,680
so this particular project

324
00:13:37,680 --> 00:13:39,199
is funded

325
00:13:39,199 --> 00:13:41,440
under the cc star program

326
00:13:41,440 --> 00:13:43,120
by the nsf

327
00:13:43,120 --> 00:13:43,920
and

328
00:13:43,920 --> 00:13:46,320
the team consists of

329
00:13:46,320 --> 00:13:48,720
myself who's uh i'm the lead for the

330
00:13:48,720 --> 00:13:49,839
project

331
00:13:49,839 --> 00:13:52,399
um at um caltech

332
00:13:52,399 --> 00:13:56,480
our co-pi is harvey newman who is

333
00:13:56,480 --> 00:13:57,760
someone who has been involved with the

334
00:13:57,760 --> 00:13:59,120
lhc

335
00:13:59,120 --> 00:14:00,880
high energy physics network for many

336
00:14:00,880 --> 00:14:02,639
many years

337
00:14:02,639 --> 00:14:06,560
uh we also uh have uh from ucla li xia

338
00:14:06,560 --> 00:14:07,680
zhang

339
00:14:07,680 --> 00:14:09,839
and jason kong

340
00:14:09,839 --> 00:14:12,399
uh so alicia of course has been a leader

341
00:14:12,399 --> 00:14:15,279
of the ndn team for some for a long time

342
00:14:15,279 --> 00:14:18,880
and jason kong is an expert in fpgas

343
00:14:18,880 --> 00:14:21,440
uh from ucla we also have a

344
00:14:21,440 --> 00:14:23,920
participation from susmit chanegrahi

345
00:14:23,920 --> 00:14:25,920
from tennessee tech

346
00:14:25,920 --> 00:14:27,440
um and

347
00:14:27,440 --> 00:14:29,680
susmit has been working with ndnt for a

348
00:14:29,680 --> 00:14:31,920
long time also and he had previously

349
00:14:31,920 --> 00:14:35,360
worked in them in the climate area

350
00:14:35,360 --> 00:14:37,360
using ndn for climate

351
00:14:37,360 --> 00:14:39,279
and of course we're in partnership with

352
00:14:39,279 --> 00:14:42,320
lhc uh the genomics collaborators and

353
00:14:42,320 --> 00:14:44,800
the ndm project team

354
00:14:44,800 --> 00:14:47,440
as at large

355
00:14:47,440 --> 00:14:49,120
we're also

356
00:14:49,120 --> 00:14:51,279
interested in this particular project on

357
00:14:51,279 --> 00:14:53,120
genomic data

358
00:14:53,120 --> 00:14:54,480
although

359
00:14:54,480 --> 00:14:56,959
that work is still

360
00:14:56,959 --> 00:14:59,199
more preliminary because compared to the

361
00:14:59,199 --> 00:15:02,880
uh work for high energy physics

362
00:15:02,880 --> 00:15:06,079
there is a need to use uh diverse

363
00:15:06,079 --> 00:15:08,079
computation storage and networking

364
00:15:08,079 --> 00:15:09,360
resources

365
00:15:09,360 --> 00:15:11,760
to meet the challenges that have been

366
00:15:11,760 --> 00:15:13,680
posed by um

367
00:15:13,680 --> 00:15:17,360
by these data intensive science fields

368
00:15:17,360 --> 00:15:19,839
and i think during my last talk two

369
00:15:19,839 --> 00:15:22,160
years ago i outlined the need

370
00:15:22,160 --> 00:15:23,279
to

371
00:15:23,279 --> 00:15:26,639
essentially build a system which with an

372
00:15:26,639 --> 00:15:28,639
architecture which is more appropriate

373
00:15:28,639 --> 00:15:30,800
for the needs of these applications

374
00:15:30,800 --> 00:15:33,120
which are very much data centered around

375
00:15:33,120 --> 00:15:34,560
data

376
00:15:34,560 --> 00:15:35,680
so

377
00:15:35,680 --> 00:15:37,199
the traditional

378
00:15:37,199 --> 00:15:40,000
architectures which centers on

379
00:15:40,000 --> 00:15:42,800
connections and servers and processes

380
00:15:42,800 --> 00:15:45,199
are not especially well suited for these

381
00:15:45,199 --> 00:15:47,279
applications whereas we believe

382
00:15:47,279 --> 00:15:50,320
that ndn is well well suited and what

383
00:15:50,320 --> 00:15:51,600
we're doing

384
00:15:51,600 --> 00:15:55,519
is to build a data centric ecosystem

385
00:15:55,519 --> 00:15:56,320
for

386
00:15:56,320 --> 00:15:58,639
providing agile integrated

387
00:15:58,639 --> 00:16:00,639
interoperable

388
00:16:00,639 --> 00:16:02,639
solutions

389
00:16:02,639 --> 00:16:04,880
for heterogeneous data intensive domains

390
00:16:04,880 --> 00:16:08,160
that that is sort of the overall goal

391
00:16:08,160 --> 00:16:11,040
and indies is

392
00:16:11,040 --> 00:16:14,719
an important project in

393
00:16:14,880 --> 00:16:17,440
in furthering this goal i want to make

394
00:16:17,440 --> 00:16:18,720
sure that i

395
00:16:18,720 --> 00:16:20,320
yes

396
00:16:20,320 --> 00:16:22,000
so what are the what are the goals of

397
00:16:22,000 --> 00:16:24,399
nds in particular it is to

398
00:16:24,399 --> 00:16:26,240
deploy and commission the first

399
00:16:26,240 --> 00:16:29,120
prototype production-ready indian-based

400
00:16:29,120 --> 00:16:32,160
pedo-scale data distribution caching

401
00:16:32,160 --> 00:16:34,399
access computation system

402
00:16:34,399 --> 00:16:37,519
serving major science programs so it

403
00:16:37,519 --> 00:16:39,759
actually has an ambitious goal

404
00:16:39,759 --> 00:16:41,120
of really

405
00:16:41,120 --> 00:16:44,399
putting in a system that can work for

406
00:16:44,399 --> 00:16:47,440
the intensive science based on ndn

407
00:16:47,440 --> 00:16:49,839
uh led high energy physics is the

408
00:16:49,839 --> 00:16:52,000
leading target use case

409
00:16:52,000 --> 00:16:55,680
uh biogenome human genome projects

410
00:16:55,680 --> 00:16:57,040
atlas

411
00:16:57,040 --> 00:16:59,199
lsst ska

412
00:16:59,199 --> 00:17:01,279
are future use cases

413
00:17:01,279 --> 00:17:04,240
we want to leverage ndm protocols high

414
00:17:04,240 --> 00:17:06,000
throughput forwarding caching methods

415
00:17:06,000 --> 00:17:09,199
containerization techniques

416
00:17:09,199 --> 00:17:10,880
integrated with

417
00:17:10,880 --> 00:17:13,599
sdn methods and fpga acceleration

418
00:17:13,599 --> 00:17:15,760
subsystems

419
00:17:15,760 --> 00:17:18,480
to deliver lhc data over wide area

420
00:17:18,480 --> 00:17:19,760
networks

421
00:17:19,760 --> 00:17:22,559
at throughputs approaching 130 gigabits

422
00:17:22,559 --> 00:17:23,839
per second

423
00:17:23,839 --> 00:17:25,359
so we want to

424
00:17:25,359 --> 00:17:28,079
really build a system that delivers data

425
00:17:28,079 --> 00:17:31,120
over a real wide area network

426
00:17:31,120 --> 00:17:34,160
and a lot of the work actually is

427
00:17:34,160 --> 00:17:36,640
is in interfacing with

428
00:17:36,640 --> 00:17:39,760
entities such as internet to es net

429
00:17:39,760 --> 00:17:42,640
um to actually put this network together

430
00:17:42,640 --> 00:17:44,240
and test it

431
00:17:44,240 --> 00:17:45,520
uh over

432
00:17:45,520 --> 00:17:46,400
uh

433
00:17:46,400 --> 00:17:48,960
the geographical i mean it's basically

434
00:17:48,960 --> 00:17:50,960
cross country right now in the united

435
00:17:50,960 --> 00:17:52,160
states

436
00:17:52,160 --> 00:17:54,559
we would like to dramatically decrease

437
00:17:54,559 --> 00:17:56,400
download times by using optimized

438
00:17:56,400 --> 00:17:57,760
caching

439
00:17:57,760 --> 00:17:59,919
uh we're building an enhanced land

440
00:17:59,919 --> 00:18:02,480
testbed with high performance ndn data

441
00:18:02,480 --> 00:18:05,280
cache servers

442
00:18:06,080 --> 00:18:08,160
all right so let me this talk is really

443
00:18:08,160 --> 00:18:10,480
about updating the progress

444
00:18:10,480 --> 00:18:13,200
of nds what we have what have we done

445
00:18:13,200 --> 00:18:15,280
over the last year or so

446
00:18:15,280 --> 00:18:17,919
um so i would like to talk about a few

447
00:18:17,919 --> 00:18:18,880
things

448
00:18:18,880 --> 00:18:22,000
uh that this team has been doing

449
00:18:22,000 --> 00:18:24,799
uh the i'd like to discuss the indies

450
00:18:24,799 --> 00:18:26,840
deployment architecture and

451
00:18:26,840 --> 00:18:28,640
ndnc

452
00:18:28,640 --> 00:18:31,200
which is an integration

453
00:18:31,200 --> 00:18:32,000
of

454
00:18:32,000 --> 00:18:36,080
ndn cxx with ndnd pdk

455
00:18:36,080 --> 00:18:38,960
for the purposes of the indies project

456
00:18:38,960 --> 00:18:41,600
i'd like to discuss the when testbed and

457
00:18:41,600 --> 00:18:43,520
the throughput tests that we've been

458
00:18:43,520 --> 00:18:45,120
performing

459
00:18:45,120 --> 00:18:47,360
and also the experiments that we've been

460
00:18:47,360 --> 00:18:48,960
doing with optimized caching and

461
00:18:48,960 --> 00:18:50,320
forwarding

462
00:18:50,320 --> 00:18:52,320
i'd like to discuss the congestion

463
00:18:52,320 --> 00:18:54,720
control work that is currently ongoing

464
00:18:54,720 --> 00:18:57,280
and you know in the ucla group

465
00:18:57,280 --> 00:18:58,960
and uh how that's

466
00:18:58,960 --> 00:19:01,919
interfacing with caching considerations

467
00:19:01,919 --> 00:19:04,400
and also discuss the fpga acceleration

468
00:19:04,400 --> 00:19:07,200
work that uh professor kong's group

469
00:19:07,200 --> 00:19:10,720
has has been doing at ucla

470
00:19:10,720 --> 00:19:12,480
all right so let's first talk about the

471
00:19:12,480 --> 00:19:16,559
deployment architecture in ndnc

472
00:19:16,559 --> 00:19:18,240
so um

473
00:19:18,240 --> 00:19:20,160
here's the basically the deployment

474
00:19:20,160 --> 00:19:22,840
architecture

475
00:19:22,840 --> 00:19:24,640
and

476
00:19:24,640 --> 00:19:27,039
to me this uh looks a little bit uh

477
00:19:27,039 --> 00:19:29,440
small actually i hope um you guys are

478
00:19:29,440 --> 00:19:33,360
gonna see it uh see it full screen here

479
00:19:33,360 --> 00:19:34,400
um

480
00:19:34,400 --> 00:19:36,080
so

481
00:19:36,080 --> 00:19:37,120
uh

482
00:19:37,120 --> 00:19:39,440
the um

483
00:19:39,440 --> 00:19:42,320
you can see that uh we have

484
00:19:42,320 --> 00:19:45,200
basically on the left here you can look

485
00:19:45,200 --> 00:19:47,280
at it as an in uh the

486
00:19:47,280 --> 00:19:49,960
consumer side and on the right hand side

487
00:19:49,960 --> 00:19:53,039
is the producer side

488
00:19:53,039 --> 00:19:55,520
um we have developed

489
00:19:55,520 --> 00:19:56,559
um

490
00:19:56,559 --> 00:19:59,200
a containerized setup

491
00:19:59,200 --> 00:20:01,120
where you see that

492
00:20:01,120 --> 00:20:04,640
we're building docker containers

493
00:20:04,640 --> 00:20:06,960
which enables us to

494
00:20:06,960 --> 00:20:08,799
make this work for various kinds of

495
00:20:08,799 --> 00:20:10,480
operating systems

496
00:20:10,480 --> 00:20:14,799
and these cm ssw jobs are jobs which

497
00:20:14,799 --> 00:20:16,720
are generated

498
00:20:16,720 --> 00:20:17,600
uh

499
00:20:17,600 --> 00:20:18,799
for

500
00:20:18,799 --> 00:20:21,919
within the lhc system so these are

501
00:20:21,919 --> 00:20:25,600
jobs which require

502
00:20:25,840 --> 00:20:28,720
that require certain calls to certain

503
00:20:28,720 --> 00:20:30,240
data sets

504
00:20:30,240 --> 00:20:32,640
and

505
00:20:33,520 --> 00:20:36,799
xrd law uh the x3d plug-in is

506
00:20:36,799 --> 00:20:37,919
essentially

507
00:20:37,919 --> 00:20:40,559
a plug-in that interfaces with the

508
00:20:40,559 --> 00:20:41,520
between

509
00:20:41,520 --> 00:20:44,240
the the calls within the um

510
00:20:44,240 --> 00:20:45,440
lhc

511
00:20:45,440 --> 00:20:47,120
networking

512
00:20:47,120 --> 00:20:49,440
environment and um

513
00:20:49,440 --> 00:20:51,200
and then turns these requests into

514
00:20:51,200 --> 00:20:53,919
essentially ndn consumers

515
00:20:53,919 --> 00:20:56,000
uh and from there

516
00:20:56,000 --> 00:21:00,080
uh we have a a set of functions which

517
00:21:00,080 --> 00:21:02,559
are implemented using uh

518
00:21:02,559 --> 00:21:04,559
extensions of uh

519
00:21:04,559 --> 00:21:07,679
of ndn uh cxx and interfacing within the

520
00:21:07,679 --> 00:21:09,120
adpdk

521
00:21:09,120 --> 00:21:12,080
uh the indian dpdk forwarder through

522
00:21:12,080 --> 00:21:13,200
something

523
00:21:13,200 --> 00:21:15,280
uh called mmf

524
00:21:15,280 --> 00:21:17,120
and

525
00:21:17,120 --> 00:21:19,679
we then go through a network which is a

526
00:21:19,679 --> 00:21:22,640
high speed network

527
00:21:22,640 --> 00:21:24,720
having capacity up to 100 gigabits per

528
00:21:24,720 --> 00:21:26,960
second in the right hand side you see

529
00:21:26,960 --> 00:21:28,640
essentially

530
00:21:28,640 --> 00:21:31,280
the producer side

531
00:21:31,280 --> 00:21:33,200
and

532
00:21:33,200 --> 00:21:34,400
operating

533
00:21:34,400 --> 00:21:36,240
finally interfacing with a number of

534
00:21:36,240 --> 00:21:39,200
different services being provided

535
00:21:39,200 --> 00:21:40,720
by the lhc

536
00:21:40,720 --> 00:21:42,159
system

537
00:21:42,159 --> 00:21:44,880
so i hope we can see that but let me

538
00:21:44,880 --> 00:21:47,520
describe this a little bit in detail

539
00:21:47,520 --> 00:21:49,760
so the caltech group

540
00:21:49,760 --> 00:21:52,880
has built something called ndnc

541
00:21:52,880 --> 00:21:54,760
which is a lightweight integration of

542
00:21:54,760 --> 00:21:56,840
ndncxx with

543
00:21:56,840 --> 00:21:59,520
ndndpdk to achieve high throughput

544
00:21:59,520 --> 00:22:02,320
performance in scientific applications

545
00:22:02,320 --> 00:22:04,720
so you you can see the code there in

546
00:22:04,720 --> 00:22:05,919
that link

547
00:22:05,919 --> 00:22:08,240
it uses the memo shared memory packet

548
00:22:08,240 --> 00:22:09,440
interface

549
00:22:09,440 --> 00:22:12,480
to provide prof to provide

550
00:22:12,480 --> 00:22:14,720
that provides performance packet high

551
00:22:14,720 --> 00:22:17,360
performance packet transmit and receive

552
00:22:17,360 --> 00:22:21,918
functions between user application

553
00:22:22,559 --> 00:22:24,799
and

554
00:22:25,039 --> 00:22:27,280
the the vector pro the vector packet

555
00:22:27,280 --> 00:22:28,640
processing

556
00:22:28,640 --> 00:22:31,360
uh within indian dpdk

557
00:22:31,360 --> 00:22:34,080
um so i'm going to skip some of the

558
00:22:34,080 --> 00:22:35,679
details here

559
00:22:35,679 --> 00:22:37,520
um

560
00:22:37,520 --> 00:22:38,840
the

561
00:22:38,840 --> 00:22:41,840
uh so um

562
00:22:41,840 --> 00:22:44,480
the the each fake transmitter receive

563
00:22:44,480 --> 00:22:47,039
one or many of these blocks in a single

564
00:22:47,039 --> 00:22:48,240
burst

565
00:22:48,240 --> 00:22:52,640
and it offers pit token support which um

566
00:22:52,640 --> 00:22:56,880
is something that is needed by ndndpdk

567
00:22:56,880 --> 00:23:00,080
and it uses this ndnc access library to

568
00:23:00,080 --> 00:23:03,120
encode and decode level layer 2 layer 3

569
00:23:03,120 --> 00:23:04,720
packets

570
00:23:04,720 --> 00:23:06,720
it also has

571
00:23:06,720 --> 00:23:08,880
support for congestion window

572
00:23:08,880 --> 00:23:11,919
and retransmission either fixed or am

573
00:23:11,919 --> 00:23:13,760
aimd

574
00:23:13,760 --> 00:23:16,159
this is something that we're still

575
00:23:16,159 --> 00:23:18,000
uh playing around with a little bit to

576
00:23:18,000 --> 00:23:19,760
see how these congestion windows should

577
00:23:19,760 --> 00:23:21,120
be set

578
00:23:21,120 --> 00:23:23,520
but this is built

579
00:23:23,520 --> 00:23:26,320
in the ndnc system

580
00:23:26,320 --> 00:23:29,120
uh future plans for ndnc

581
00:23:29,120 --> 00:23:31,440
we like to do extensive benchmarking to

582
00:23:31,440 --> 00:23:32,880
understand the current behavior and

583
00:23:32,880 --> 00:23:34,559
maximum throughput performance that can

584
00:23:34,559 --> 00:23:40,000
be achieved identify guidance possible

585
00:23:40,320 --> 00:23:41,679
bottlenecks

586
00:23:41,679 --> 00:23:43,919
add multi-threaded support to mammoth

587
00:23:43,919 --> 00:23:46,720
and pipelines currently that's

588
00:23:46,720 --> 00:23:49,360
that's a single threaded

589
00:23:49,360 --> 00:23:52,719
as we mentioned over here

590
00:23:53,039 --> 00:23:54,320
and

591
00:23:54,320 --> 00:23:57,279
we would like to port the ndn x4d

592
00:23:57,279 --> 00:23:58,640
plug-in

593
00:23:58,640 --> 00:24:00,960
developed in our previous project to

594
00:24:00,960 --> 00:24:03,279
ndnc

595
00:24:03,279 --> 00:24:05,520
uh and we want to extend the number of

596
00:24:05,520 --> 00:24:07,919
applications to cover some of these

597
00:24:07,919 --> 00:24:10,720
services that are provided by the lhc

598
00:24:10,720 --> 00:24:11,760
network

599
00:24:11,760 --> 00:24:15,279
and the file systems they have

600
00:24:15,279 --> 00:24:18,559
okay so let now let me talk about the

601
00:24:18,559 --> 00:24:20,559
when test bed and the throughput test

602
00:24:20,559 --> 00:24:23,360
that we've been doing

603
00:24:23,679 --> 00:24:25,919
so

604
00:24:26,480 --> 00:24:28,880
okay here so here's the test bed

605
00:24:28,880 --> 00:24:31,200
that we've put put together and and in

606
00:24:31,200 --> 00:24:33,840
fact you know putting together this test

607
00:24:33,840 --> 00:24:35,600
pad is actually

608
00:24:35,600 --> 00:24:36,960
in a major

609
00:24:36,960 --> 00:24:39,279
uh time uh

610
00:24:39,279 --> 00:24:42,400
major time uh time zone for us

611
00:24:42,400 --> 00:24:44,960
um but uh you know it's it's worthwhile

612
00:24:44,960 --> 00:24:46,880
because this is the

613
00:24:46,880 --> 00:24:49,200
high performance testbed that we wanted

614
00:24:49,200 --> 00:24:50,400
to have

615
00:24:50,400 --> 00:24:52,720
so it has a number of nodes here

616
00:24:52,720 --> 00:24:54,960
basically it involves the participant

617
00:24:54,960 --> 00:24:56,480
institutions of

618
00:24:56,480 --> 00:24:58,799
so northeastern the node is actually

619
00:24:58,799 --> 00:25:01,200
sitting in mgh pcc which is a shared

620
00:25:01,200 --> 00:25:03,279
computing facility

621
00:25:03,279 --> 00:25:04,880
uh between

622
00:25:04,880 --> 00:25:07,520
mit harvard northeastern and bu

623
00:25:07,520 --> 00:25:10,320
um there's a note at ucla there's noted

624
00:25:10,320 --> 00:25:13,120
tennessee tech there are just

625
00:25:13,120 --> 00:25:15,120
multiple machines at caltech

626
00:25:15,120 --> 00:25:17,840
and we are also um very happy to have

627
00:25:17,840 --> 00:25:20,400
the collaboration of starlight

628
00:25:20,400 --> 00:25:22,320
uh in chicago

629
00:25:22,320 --> 00:25:24,000
so you see this is a topology

630
00:25:24,000 --> 00:25:26,400
essentially it's um

631
00:25:26,400 --> 00:25:28,880
a fully connected network here

632
00:25:28,880 --> 00:25:31,039
um and with different

633
00:25:31,039 --> 00:25:34,400
uh link capacities here we have um

634
00:25:34,400 --> 00:25:37,080
a very high

635
00:25:37,080 --> 00:25:39,600
capacity links of 100 gigabits per

636
00:25:39,600 --> 00:25:40,640
second

637
00:25:40,640 --> 00:25:42,799
uh between northeastern all the way to

638
00:25:42,799 --> 00:25:45,120
caltech and then some of the links are

639
00:25:45,120 --> 00:25:47,679
less smaller capacity 10 gigabits per

640
00:25:47,679 --> 00:25:48,559
second

641
00:25:48,559 --> 00:25:49,840
but these are

642
00:25:49,840 --> 00:25:51,600
you know it says high pretty high

643
00:25:51,600 --> 00:25:54,000
performance network and running across

644
00:25:54,000 --> 00:25:55,919
the country here and you also see the

645
00:25:55,919 --> 00:25:57,600
specifications

646
00:25:57,600 --> 00:25:59,520
uh the configurations for the machine

647
00:25:59,520 --> 00:26:01,600
sitting on this network

648
00:26:01,600 --> 00:26:04,400
so we have quite a bit of

649
00:26:04,400 --> 00:26:06,320
um

650
00:26:06,320 --> 00:26:08,000
do you allow questions in between or

651
00:26:08,000 --> 00:26:11,159
shall we

652
00:26:14,720 --> 00:26:16,080
ken go ahead

653
00:26:16,080 --> 00:26:19,520
hi hi edmund um hi

654
00:26:19,520 --> 00:26:21,679
are these running uh are these all over

655
00:26:21,679 --> 00:26:25,200
internet 2 and is it l2 stitching uh

656
00:26:25,200 --> 00:26:27,039
yeah is that what they are

657
00:26:27,039 --> 00:26:28,799
okay

658
00:26:28,799 --> 00:26:31,679
we we put this together with a lot of um

659
00:26:31,679 --> 00:26:34,720
collaboration from internet to esnet

660
00:26:34,720 --> 00:26:36,080
um

661
00:26:36,080 --> 00:26:38,640
and uh and uh yeah this is running at

662
00:26:38,640 --> 00:26:41,440
layer two yeah so we have um

663
00:26:41,440 --> 00:26:42,720
uh

664
00:26:42,720 --> 00:26:45,440
we have these vlans uh the the numbers

665
00:26:45,440 --> 00:26:47,279
you see there are vlan numbers which

666
00:26:47,279 --> 00:26:49,200
have been provisioned

667
00:26:49,200 --> 00:26:51,360
and in fact you know just doing the

668
00:26:51,360 --> 00:26:53,440
provisioning the vlans uh sometimes can

669
00:26:53,440 --> 00:26:55,600
take months to accomplish

670
00:26:55,600 --> 00:26:58,000
as you know if you work on these things

671
00:26:58,000 --> 00:26:59,520
but yeah it took about

672
00:26:59,520 --> 00:27:01,440
quite a bit of time for us to put this

673
00:27:01,440 --> 00:27:03,840
thing together but it is

674
00:27:03,840 --> 00:27:05,679
these are dedicated there's a dedicated

675
00:27:05,679 --> 00:27:07,360
host at each one of these sites is that

676
00:27:07,360 --> 00:27:08,640
right

677
00:27:08,640 --> 00:27:10,880
yes

678
00:27:11,120 --> 00:27:14,480
so some of those machines um are

679
00:27:14,480 --> 00:27:17,760
shared um but some of the i mean so the

680
00:27:17,760 --> 00:27:19,679
machines that sitting at the participant

681
00:27:19,679 --> 00:27:22,159
institutions they're all dedicated um

682
00:27:22,159 --> 00:27:25,360
the machine out uh starlight uh i i

683
00:27:25,360 --> 00:27:27,679
think is is shared but it's not heavily

684
00:27:27,679 --> 00:27:30,240
used by other applications yeah okay

685
00:27:30,240 --> 00:27:31,279
thanks

686
00:27:31,279 --> 00:27:32,159
mm-hmm

687
00:27:32,159 --> 00:27:35,440
yeah so so this is um uh the network

688
00:27:35,440 --> 00:27:38,480
that we're currently experimenting over

689
00:27:38,480 --> 00:27:40,559
and uh i i you know it's it's an

690
00:27:40,559 --> 00:27:42,640
incredible actually resource that we

691
00:27:42,640 --> 00:27:44,559
actually have here because we're able to

692
00:27:44,559 --> 00:27:47,360
do real experiments on a wider network

693
00:27:47,360 --> 00:27:48,720
basis

694
00:27:48,720 --> 00:27:49,520
um

695
00:27:49,520 --> 00:27:50,960
it also

696
00:27:50,960 --> 00:27:53,279
of course requires a lot of upkeep um

697
00:27:53,279 --> 00:27:54,720
for the throughput test i won't go

698
00:27:54,720 --> 00:27:56,240
through all the details here but

699
00:27:56,240 --> 00:27:58,320
basically

700
00:27:58,320 --> 00:28:00,159
we actually wanted to do the throughput

701
00:28:00,159 --> 00:28:01,120
test

702
00:28:01,120 --> 00:28:04,080
from um on the 100 gigabit link

703
00:28:04,080 --> 00:28:06,480
from northeastern to caltech but because

704
00:28:06,480 --> 00:28:09,279
of various reasons uh the

705
00:28:09,279 --> 00:28:12,320
the vlan from starlight to to caltech

706
00:28:12,320 --> 00:28:15,679
was only recently put up so we ended up

707
00:28:15,679 --> 00:28:18,320
doing the the throughput test uh

708
00:28:18,320 --> 00:28:20,880
basically on that um

709
00:28:20,880 --> 00:28:24,159
that that orange uh link here that you

710
00:28:24,159 --> 00:28:24,960
see

711
00:28:24,960 --> 00:28:27,760
uh but basically what that does

712
00:28:27,760 --> 00:28:31,520
is um it sets up a loop at starlight uh

713
00:28:31,520 --> 00:28:33,919
between two machines setting a satellite

714
00:28:33,919 --> 00:28:36,240
the path actually goes from starlight in

715
00:28:36,240 --> 00:28:38,080
chicago to canada and then back to

716
00:28:38,080 --> 00:28:40,559
starlight so um

717
00:28:40,559 --> 00:28:43,679
the um but but but we do have

718
00:28:43,679 --> 00:28:46,640
a consumer and producer on two different

719
00:28:46,640 --> 00:28:47,679
machines

720
00:28:47,679 --> 00:28:51,279
and the capacity of that link that path

721
00:28:51,279 --> 00:28:52,799
is basically

722
00:28:52,799 --> 00:28:54,720
40 gigabits per second according to

723
00:28:54,720 --> 00:28:55,919
iperf

724
00:28:55,919 --> 00:28:56,960
and

725
00:28:56,960 --> 00:28:58,720
you can see the configurations of the

726
00:28:58,720 --> 00:29:02,240
machines there we have um

727
00:29:02,720 --> 00:29:04,399
two threads for the each consumer

728
00:29:04,399 --> 00:29:05,919
application

729
00:29:05,919 --> 00:29:07,600
and uh

730
00:29:07,600 --> 00:29:10,640
running three forwarding threads

731
00:29:10,640 --> 00:29:13,679
launching six consumers simultaneously

732
00:29:13,679 --> 00:29:15,360
currently we're using a fixed window

733
00:29:15,360 --> 00:29:17,279
size for congestion

734
00:29:17,279 --> 00:29:18,880
and uh there are various reasons for

735
00:29:18,880 --> 00:29:20,960
that well we have a dedicated path there

736
00:29:20,960 --> 00:29:22,080
basically

737
00:29:22,080 --> 00:29:25,600
and um we're sending the uh files which

738
00:29:25,600 --> 00:29:28,159
are one gigabyte to each

739
00:29:28,159 --> 00:29:30,159
these are evenly allocated under three

740
00:29:30,159 --> 00:29:32,159
forwarding threads

741
00:29:32,159 --> 00:29:34,799
and uh we are caching these

742
00:29:34,799 --> 00:29:36,720
these these files

743
00:29:36,720 --> 00:29:39,120
at the producer so they can access them

744
00:29:39,120 --> 00:29:42,000
quickly and we request them from the the

745
00:29:42,000 --> 00:29:43,760
consumer machine

746
00:29:43,760 --> 00:29:46,399
so uh what we're getting here and we're

747
00:29:46,399 --> 00:29:48,320
really trying to push the throughput on

748
00:29:48,320 --> 00:29:49,679
this path here

749
00:29:49,679 --> 00:29:52,240
um is for you can see that

750
00:29:52,240 --> 00:29:54,960
over a span of six minutes so the

751
00:29:54,960 --> 00:29:56,399
average

752
00:29:56,399 --> 00:29:57,679
throughput

753
00:29:57,679 --> 00:29:59,600
uh over the different consumers has

754
00:29:59,600 --> 00:30:01,919
listed it for the total of about 21

755
00:30:01,919 --> 00:30:04,080
gigabits per second

756
00:30:04,080 --> 00:30:06,080
um that's the highest numbers

757
00:30:06,080 --> 00:30:07,840
that we got

758
00:30:07,840 --> 00:30:09,360
we're still playing around with the

759
00:30:09,360 --> 00:30:10,320
different

760
00:30:10,320 --> 00:30:13,039
uh configurations in this in this setup

761
00:30:13,039 --> 00:30:14,960
but this is currently the

762
00:30:14,960 --> 00:30:16,720
throughput numbers that we've been

763
00:30:16,720 --> 00:30:19,520
getting on this is all over a wide area

764
00:30:19,520 --> 00:30:20,840
network this is

765
00:30:20,840 --> 00:30:24,720
a real uh wan network over

766
00:30:24,720 --> 00:30:26,799
continental uh distances

767
00:30:26,799 --> 00:30:28,720
and so far i think that's the highest

768
00:30:28,720 --> 00:30:30,720
number that we have gotten

769
00:30:30,720 --> 00:30:32,720
over the past few years

770
00:30:32,720 --> 00:30:34,720
we previously had gotten some numbers

771
00:30:34,720 --> 00:30:35,679
more

772
00:30:35,679 --> 00:30:39,039
in i think at sc 19 we had 6.7 gigabits

773
00:30:39,039 --> 00:30:41,520
per second and at sc 21 we achieved

774
00:30:41,520 --> 00:30:43,520
about 14.

775
00:30:43,520 --> 00:30:46,480
so um so you know we are definitely

776
00:30:46,480 --> 00:30:47,840
pushing that

777
00:30:47,840 --> 00:30:49,919
that throughput um and understanding

778
00:30:49,919 --> 00:30:52,559
better what kind of um

779
00:30:52,559 --> 00:30:54,559
what the system is capable of of course

780
00:30:54,559 --> 00:30:57,919
this is you know running uh the consumer

781
00:30:57,919 --> 00:30:59,679
producer that

782
00:30:59,679 --> 00:31:02,480
that we have uh that we have written

783
00:31:02,480 --> 00:31:06,159
and working with integrated with nd dpdk

784
00:31:06,159 --> 00:31:09,519
and you can show that uh really ndn

785
00:31:09,519 --> 00:31:13,039
is capable of high performance over real

786
00:31:13,039 --> 00:31:15,279
wide area networks

787
00:31:15,279 --> 00:31:17,919
okay now uh let me talk about caching

788
00:31:17,919 --> 00:31:20,240
and forwarding and so this is also a big

789
00:31:20,240 --> 00:31:21,760
part of the project

790
00:31:21,760 --> 00:31:24,240
is that uh to try to

791
00:31:24,240 --> 00:31:27,120
test in in in a real experimental

792
00:31:27,120 --> 00:31:29,760
setting uh these caching algorithms that

793
00:31:29,760 --> 00:31:32,159
were first developed by my group at

794
00:31:32,159 --> 00:31:33,360
northeastern

795
00:31:33,360 --> 00:31:34,559
so

796
00:31:34,559 --> 00:31:36,480
we're using this testbed in two

797
00:31:36,480 --> 00:31:37,440
different

798
00:31:37,440 --> 00:31:39,120
here i'm showing two different sets of

799
00:31:39,120 --> 00:31:40,480
results

800
00:31:40,480 --> 00:31:43,360
one where we have two consumers at ucla

801
00:31:43,360 --> 00:31:44,159
and

802
00:31:44,159 --> 00:31:45,600
starlight

803
00:31:45,600 --> 00:31:48,159
and going through a forwarder at

804
00:31:48,159 --> 00:31:50,159
northeastern and then ending with a

805
00:31:50,159 --> 00:31:53,039
producer at caltech and another one

806
00:31:53,039 --> 00:31:56,080
uh with two forwarders in the middle uh

807
00:31:56,080 --> 00:31:58,080
one at northeastern one at tennessee

808
00:31:58,080 --> 00:31:59,200
tech

809
00:31:59,200 --> 00:32:03,440
and uh we have 30 files which each file

810
00:32:03,440 --> 00:32:06,559
is 4 gigabytes and we

811
00:32:06,559 --> 00:32:08,559
we generate requests at the consumers

812
00:32:08,559 --> 00:32:10,960
according to a zip distribution

813
00:32:10,960 --> 00:32:11,919
and

814
00:32:11,919 --> 00:32:12,720
we

815
00:32:12,720 --> 00:32:15,760
run this caching algorithm which have

816
00:32:15,760 --> 00:32:18,080
been developed by my group called vip

817
00:32:18,080 --> 00:32:19,519
and

818
00:32:19,519 --> 00:32:20,640
we will

819
00:32:20,640 --> 00:32:23,679
then compare the performance of that to

820
00:32:23,679 --> 00:32:25,360
a case where you do not cache anything

821
00:32:25,360 --> 00:32:29,279
or use a kind of lru kind of caching or

822
00:32:29,279 --> 00:32:31,360
a an improved version of that which is

823
00:32:31,360 --> 00:32:33,840
actually within the indian dpdk

824
00:32:33,840 --> 00:32:36,960
implementation called arc

825
00:32:36,960 --> 00:32:40,960
so these are a real experiment results

826
00:32:40,960 --> 00:32:43,200
here what i'm plotting is the different

827
00:32:43,200 --> 00:32:45,120
colors corresponding to the different

828
00:32:45,120 --> 00:32:46,880
file indices

829
00:32:46,880 --> 00:32:47,840
so

830
00:32:47,840 --> 00:32:50,159
file one is the most popular one

831
00:32:50,159 --> 00:32:51,919
according to the zip distribution file

832
00:32:51,919 --> 00:32:54,640
30 is the least popular one

833
00:32:54,640 --> 00:32:56,880
and they're ordered like this and now

834
00:32:56,880 --> 00:32:58,799
the algorithm that we're running the

835
00:32:58,799 --> 00:33:00,720
caching algorithm we're running

836
00:33:00,720 --> 00:33:02,880
uh they it doesn't know the swift

837
00:33:02,880 --> 00:33:05,039
distribution beforehand it actually just

838
00:33:05,039 --> 00:33:07,440
adaptively measures these things and

839
00:33:07,440 --> 00:33:10,320
adapts the caching pattern

840
00:33:10,320 --> 00:33:12,480
adaptively in real time

841
00:33:12,480 --> 00:33:14,320
uh without any prior knowledge and so

842
00:33:14,320 --> 00:33:16,559
here what we're plotting is basically

843
00:33:16,559 --> 00:33:19,519
the cash score which is output by the uh

844
00:33:19,519 --> 00:33:21,200
which is put out by the by the vip

845
00:33:21,200 --> 00:33:23,279
algorithm and you can see that actually

846
00:33:23,279 --> 00:33:26,000
at the forwarder node where the cache is

847
00:33:26,000 --> 00:33:27,039
uh the

848
00:33:27,039 --> 00:33:30,720
cash score of that most popular um

849
00:33:30,720 --> 00:33:32,720
file is actually the highest you can see

850
00:33:32,720 --> 00:33:33,600
that

851
00:33:33,600 --> 00:33:35,600
they're ordered in the right way and if

852
00:33:35,600 --> 00:33:37,760
you if you actually see what is actually

853
00:33:37,760 --> 00:33:40,000
cached at the forward or node you see

854
00:33:40,000 --> 00:33:41,760
that it's caching exactly what it's

855
00:33:41,760 --> 00:33:43,760
supposed to cache so the cache is

856
00:33:43,760 --> 00:33:46,080
capable of caching five files

857
00:33:46,080 --> 00:33:48,480
and it caches one two three four five um

858
00:33:48,480 --> 00:33:49,519
so this

859
00:33:49,519 --> 00:33:52,880
um is exactly what it caches um after

860
00:33:52,880 --> 00:33:55,440
you know some stabilization uh we run it

861
00:33:55,440 --> 00:33:56,799
for a few minutes

862
00:33:56,799 --> 00:33:57,679
um

863
00:33:57,679 --> 00:33:58,880
and

864
00:33:58,880 --> 00:34:02,320
um now what's interesting here is here

865
00:34:02,320 --> 00:34:04,640
we plot the result

866
00:34:04,640 --> 00:34:05,440
of

867
00:34:05,440 --> 00:34:07,600
the compare the performance of the

868
00:34:07,600 --> 00:34:10,239
different uh scenarios here on the

869
00:34:10,239 --> 00:34:13,280
x-axis is the throughput uh in gigabit's

870
00:34:13,280 --> 00:34:16,560
perplex on the y-axis is the delay okay

871
00:34:16,560 --> 00:34:19,119
that's actually the download delay so

872
00:34:19,119 --> 00:34:22,159
you see that um the numbers for

873
00:34:22,159 --> 00:34:26,320
so we plotted the numbers for um

874
00:34:26,320 --> 00:34:27,760
what you get at starlight where you get

875
00:34:27,760 --> 00:34:32,000
a ucla in the overall average um and the

876
00:34:32,000 --> 00:34:34,560
uh the square ones are one for the for

877
00:34:34,560 --> 00:34:38,399
vip the um circles are for the arc which

878
00:34:38,399 --> 00:34:40,399
is a version of lru and the the

879
00:34:40,399 --> 00:34:42,159
triangles are for the case where you

880
00:34:42,159 --> 00:34:43,280
know cache

881
00:34:43,280 --> 00:34:45,839
so you can see that um

882
00:34:45,839 --> 00:34:47,679
vip is actually

883
00:34:47,679 --> 00:34:50,000
is actually getting

884
00:34:50,000 --> 00:34:53,040
lower delay and also more throughput in

885
00:34:53,040 --> 00:34:54,000
general

886
00:34:54,000 --> 00:34:57,200
the differences between arc here is not

887
00:34:57,200 --> 00:34:59,359
is not big but in the next

888
00:34:59,359 --> 00:35:01,040
experiment you will see the box actually

889
00:35:01,040 --> 00:35:03,359
gets bigger so you see that um

890
00:35:03,359 --> 00:35:04,400
uh

891
00:35:04,400 --> 00:35:05,200
the

892
00:35:05,200 --> 00:35:07,440
the effect of caching is basically to

893
00:35:07,440 --> 00:35:09,680
increase throughput at the same time is

894
00:35:09,680 --> 00:35:12,160
decreasing delay because

895
00:35:12,160 --> 00:35:15,359
um essentially because you you bring it

896
00:35:15,359 --> 00:35:17,760
closer to the consumer to any decreased

897
00:35:17,760 --> 00:35:20,560
delay that way but also because

898
00:35:20,560 --> 00:35:23,520
you make obviate you make unnecessary

899
00:35:23,520 --> 00:35:25,040
transmission further

900
00:35:25,040 --> 00:35:27,359
uh transmissions of the request upstream

901
00:35:27,359 --> 00:35:29,599
therefore you sort of reduce congestion

902
00:35:29,599 --> 00:35:31,839
in the network and you further reduce

903
00:35:31,839 --> 00:35:34,079
delay and you also increase throughput

904
00:35:34,079 --> 00:35:36,079
so you have both the effects here

905
00:35:36,079 --> 00:35:37,040
now

906
00:35:37,040 --> 00:35:39,359
and then just a real quick question

907
00:35:39,359 --> 00:35:41,200
is this dram caching or do you actually

908
00:35:41,200 --> 00:35:45,440
have external i o going on

909
00:35:45,440 --> 00:35:48,240
uh yeah this is um

910
00:35:48,240 --> 00:35:49,040
uh

911
00:35:49,040 --> 00:35:52,160
using uh caching in the um

912
00:35:52,160 --> 00:35:58,359
yeah let me so this is caching using um

913
00:35:59,680 --> 00:36:02,160
no this is dram caching yeah

914
00:36:02,160 --> 00:36:03,440
great thanks

915
00:36:03,440 --> 00:36:04,720
yep

916
00:36:04,720 --> 00:36:05,599
uh

917
00:36:05,599 --> 00:36:08,240
right so um the next

918
00:36:08,240 --> 00:36:10,960
experiment uh let me see

919
00:36:10,960 --> 00:36:14,400
oh here yeah

920
00:36:14,560 --> 00:36:17,200
yeah so in test two remember in test two

921
00:36:17,200 --> 00:36:19,599
we are we have um

922
00:36:19,599 --> 00:36:22,240
uh two two nodes right two nodes in this

923
00:36:22,240 --> 00:36:24,240
so two caching sites

924
00:36:24,240 --> 00:36:25,440
and

925
00:36:25,440 --> 00:36:27,359
in this case

926
00:36:27,359 --> 00:36:30,640
um at the first one

927
00:36:30,640 --> 00:36:33,359
you see that uh at the northeastern one

928
00:36:33,359 --> 00:36:36,079
so so what you want you expect here um i

929
00:36:36,079 --> 00:36:37,200
just want to point this out in the

930
00:36:37,200 --> 00:36:39,680
second one where you have the two nodes

931
00:36:39,680 --> 00:36:41,760
here you would expect that the first

932
00:36:41,760 --> 00:36:43,680
caching point should cache

933
00:36:43,680 --> 00:36:45,200
uh the

934
00:36:45,200 --> 00:36:46,560
the top five

935
00:36:46,560 --> 00:36:49,119
most popular um files and then the next

936
00:36:49,119 --> 00:36:50,880
five should be cached over here right

937
00:36:50,880 --> 00:36:53,280
that's what you would expect um in fact

938
00:36:53,280 --> 00:36:55,520
that is ex that is pretty much what

939
00:36:55,520 --> 00:36:56,800
happens

940
00:36:56,800 --> 00:36:59,520
um so you can see it the first forwarder

941
00:36:59,520 --> 00:37:03,119
you catch the first uh the top five okay

942
00:37:03,119 --> 00:37:04,320
in the next

943
00:37:04,320 --> 00:37:07,040
uh forwarder you you essentially catch

944
00:37:07,040 --> 00:37:09,680
the top at the next five but some minor

945
00:37:09,680 --> 00:37:11,440
variations here

946
00:37:11,440 --> 00:37:12,800
um

947
00:37:12,800 --> 00:37:15,359
now this uh i think has to do with

948
00:37:15,359 --> 00:37:16,960
essentially the

949
00:37:16,960 --> 00:37:19,760
stochastic variations of of the of the

950
00:37:19,760 --> 00:37:23,119
algorithm but but overall you see that

951
00:37:23,119 --> 00:37:26,320
it is the it is the files that are that

952
00:37:26,320 --> 00:37:28,800
are being the right files are being um

953
00:37:28,800 --> 00:37:30,240
cached here

954
00:37:30,240 --> 00:37:32,560
and uh and of course the algorithm is

955
00:37:32,560 --> 00:37:34,560
doing this completely adaptively it

956
00:37:34,560 --> 00:37:37,040
doesn't know this beforehand so the the

957
00:37:37,040 --> 00:37:39,680
result here for test two

958
00:37:39,680 --> 00:37:42,400
you can see again vip is doing

959
00:37:42,400 --> 00:37:44,640
essentially the best everywhere

960
00:37:44,640 --> 00:37:46,320
as it did in the previous case but in

961
00:37:46,320 --> 00:37:48,400
this case the improvement is even more

962
00:37:48,400 --> 00:37:50,960
pronounced it has greater throughput in

963
00:37:50,960 --> 00:37:52,720
lower delay than

964
00:37:52,720 --> 00:37:55,280
compared with arc

965
00:37:55,280 --> 00:37:57,359
and uh to certainly compare with no

966
00:37:57,359 --> 00:38:00,640
caching so this shows very clearly

967
00:38:00,640 --> 00:38:02,160
that if you are

968
00:38:02,160 --> 00:38:04,640
clever about um caching and by the way

969
00:38:04,640 --> 00:38:06,320
we have actually

970
00:38:06,320 --> 00:38:10,079
not even totally um exploited the full

971
00:38:10,079 --> 00:38:13,280
power of vip because vip is actually

972
00:38:13,280 --> 00:38:15,599
a joint caching and forwarding

973
00:38:15,599 --> 00:38:18,560
algorithm so because here in a topology

974
00:38:18,560 --> 00:38:21,119
we really don't have much in in the way

975
00:38:21,119 --> 00:38:24,000
of multi-path capability so we're really

976
00:38:24,000 --> 00:38:26,240
only leveraging the power of caching and

977
00:38:26,240 --> 00:38:27,920
already we're getting a lot of

978
00:38:27,920 --> 00:38:30,320
improvement in the performance so um the

979
00:38:30,320 --> 00:38:32,720
next step for us is really to test out

980
00:38:32,720 --> 00:38:35,599
these topologies over the land uh that

981
00:38:35,599 --> 00:38:37,760
has more multicast a multi-path

982
00:38:37,760 --> 00:38:39,760
capability and i think we'll get even

983
00:38:39,760 --> 00:38:42,320
better results um but it takes time to

984
00:38:42,320 --> 00:38:44,839
do that and we'll report that in in the

985
00:38:44,839 --> 00:38:47,599
future all right so let me see what i

986
00:38:47,599 --> 00:38:49,280
can say i don't know how much time we

987
00:38:49,280 --> 00:38:50,960
still have but uh

988
00:38:50,960 --> 00:38:51,839
um

989
00:38:51,839 --> 00:38:53,839
i want to say briefly about what the

990
00:38:53,839 --> 00:38:55,520
work that has been happening congestion

991
00:38:55,520 --> 00:38:57,280
control and fpga

992
00:38:57,280 --> 00:38:58,640
acceleration

993
00:38:58,640 --> 00:39:01,119
so uh leisha's group at ucla has been

994
00:39:01,119 --> 00:39:03,520
working on congestion control and

995
00:39:03,520 --> 00:39:06,160
uh they've actually been

996
00:39:06,160 --> 00:39:07,280
working

997
00:39:07,280 --> 00:39:09,680
uh on the impact of caching on

998
00:39:09,680 --> 00:39:11,920
congestion control so

999
00:39:11,920 --> 00:39:13,599
there are some interesting examples

1000
00:39:13,599 --> 00:39:15,760
they've been studying so for instance in

1001
00:39:15,760 --> 00:39:17,520
this particular example you have two

1002
00:39:17,520 --> 00:39:20,560
consumers c1 c2 that are fetching the

1003
00:39:20,560 --> 00:39:21,520
same

1004
00:39:21,520 --> 00:39:22,880
object

1005
00:39:22,880 --> 00:39:25,200
from the producer p and the objects are

1006
00:39:25,200 --> 00:39:26,720
segmented

1007
00:39:26,720 --> 00:39:30,480
however c1 has a higher uh

1008
00:39:30,480 --> 00:39:34,400
capacity higher speed connection to f1

1009
00:39:34,400 --> 00:39:35,599
which is the

1010
00:39:35,599 --> 00:39:38,320
uh which is a caching point and c2 has a

1011
00:39:38,320 --> 00:39:41,359
smaller as a slower connection so the

1012
00:39:41,359 --> 00:39:44,000
expectation is that c1

1013
00:39:44,000 --> 00:39:46,960
uh the c2 is going to you know start

1014
00:39:46,960 --> 00:39:50,079
first okay uh c2 is going to start first

1015
00:39:50,079 --> 00:39:51,839
and uh so

1016
00:39:51,839 --> 00:39:54,160
uh you the expectation is that c1 will

1017
00:39:54,160 --> 00:39:56,160
initially be satisfied by the cache

1018
00:39:56,160 --> 00:39:57,440
because c2

1019
00:39:57,440 --> 00:40:00,400
pulls the uh the the object first and

1020
00:40:00,400 --> 00:40:02,800
caches it at f1

1021
00:40:02,800 --> 00:40:04,000
so c1 will

1022
00:40:04,000 --> 00:40:06,000
initially be satisfied by the cache and

1023
00:40:06,000 --> 00:40:08,400
later catch up with c2

1024
00:40:08,400 --> 00:40:10,400
and eventually be satisfied by the

1025
00:40:10,400 --> 00:40:12,400
producer um

1026
00:40:12,400 --> 00:40:16,400
and uh however what is actually observed

1027
00:40:16,400 --> 00:40:19,200
um so so so you see that c1 because it

1028
00:40:19,200 --> 00:40:20,800
has a higher bandwidth is your

1029
00:40:20,800 --> 00:40:22,960
expectation is that you would first get

1030
00:40:22,960 --> 00:40:24,400
it from the cache and then later catch

1031
00:40:24,400 --> 00:40:26,160
up with c2 and be satisfied by the

1032
00:40:26,160 --> 00:40:27,680
producer right

1033
00:40:27,680 --> 00:40:29,520
but what actually is happened happens in

1034
00:40:29,520 --> 00:40:31,440
simulation is that

1035
00:40:31,440 --> 00:40:34,079
c1 may never catch up with c2 or be

1036
00:40:34,079 --> 00:40:36,079
satisfied by the producer

1037
00:40:36,079 --> 00:40:37,680
instead it will be continued to be

1038
00:40:37,680 --> 00:40:39,520
satisfied by the cache

1039
00:40:39,520 --> 00:40:41,760
and c2 will be soliciting data in steady

1040
00:40:41,760 --> 00:40:46,079
state and the reason is that um

1041
00:40:46,079 --> 00:40:48,000
uh

1042
00:40:48,000 --> 00:40:50,560
so so here's a plot of what you expect

1043
00:40:50,560 --> 00:40:52,400
to happen in terms of

1044
00:40:52,400 --> 00:40:54,160
uh this this um

1045
00:40:54,160 --> 00:40:57,040
this is the x axis is a time and at y

1046
00:40:57,040 --> 00:41:00,560
axis is the delay uh that is observed by

1047
00:41:00,560 --> 00:41:02,160
c one so you would expect that it first

1048
00:41:02,160 --> 00:41:04,800
gets it from the uh cache

1049
00:41:04,800 --> 00:41:07,920
uh to f4 f1 and gradually would take

1050
00:41:07,920 --> 00:41:08,880
over

1051
00:41:08,880 --> 00:41:11,680
um and then eventually we'll get it from

1052
00:41:11,680 --> 00:41:15,200
the producer but because um

1053
00:41:15,200 --> 00:41:18,480
uh what happens is that um so the scheme

1054
00:41:18,480 --> 00:41:21,599
that i think alicia is working on is you

1055
00:41:21,599 --> 00:41:23,440
know the congestion

1056
00:41:23,440 --> 00:41:26,000
is is the control is based on

1057
00:41:26,000 --> 00:41:27,760
looking at the difference between the

1058
00:41:27,760 --> 00:41:29,680
interest sending rate and the data

1059
00:41:29,680 --> 00:41:31,119
receiving rate

1060
00:41:31,119 --> 00:41:33,599
so that

1061
00:41:33,680 --> 00:41:36,240
c1 will essentially look at this

1062
00:41:36,240 --> 00:41:39,520
and interp and interpret um

1063
00:41:39,520 --> 00:41:41,520
this difference because it you know it's

1064
00:41:41,520 --> 00:41:43,440
getting it from the uh

1065
00:41:43,440 --> 00:41:45,280
the the

1066
00:41:45,280 --> 00:41:47,040
the receiving rate is essentially lower

1067
00:41:47,040 --> 00:41:48,880
than the sending rate so it interprets

1068
00:41:48,880 --> 00:41:51,520
this as a congestion signal

1069
00:41:51,520 --> 00:41:54,319
and actually decreases

1070
00:41:54,319 --> 00:41:57,040
its request rate so what happens that it

1071
00:41:57,040 --> 00:42:00,960
actually then never catches up with c2

1072
00:42:00,960 --> 00:42:02,319
so uh

1073
00:42:02,319 --> 00:42:04,560
the the observation here is that this is

1074
00:42:04,560 --> 00:42:06,160
some um

1075
00:42:06,160 --> 00:42:08,240
a a um

1076
00:42:08,240 --> 00:42:10,960
somewhat unexpected way in which um the

1077
00:42:10,960 --> 00:42:13,440
congestion control interacts with the

1078
00:42:13,440 --> 00:42:16,560
caching so that um

1079
00:42:16,560 --> 00:42:18,880
they're still exploring this

1080
00:42:18,880 --> 00:42:20,079
and uh

1081
00:42:20,079 --> 00:42:22,880
they're interested in looking uh working

1082
00:42:22,880 --> 00:42:24,800
out congestion control measurements

1083
00:42:24,800 --> 00:42:27,520
which must be resilient to these rtt

1084
00:42:27,520 --> 00:42:29,280
uh variations

1085
00:42:29,280 --> 00:42:31,040
so um

1086
00:42:31,040 --> 00:42:33,040
what they have done so far

1087
00:42:33,040 --> 00:42:35,520
is they have developed a

1088
00:42:35,520 --> 00:42:37,920
multi-path interest forwarding

1089
00:42:37,920 --> 00:42:39,359
uh a hub

1090
00:42:39,359 --> 00:42:40,800
they've developed a hop-by-hop

1091
00:42:40,800 --> 00:42:43,119
congestion control design that uses

1092
00:42:43,119 --> 00:42:46,079
queuing delay as a control signal which

1093
00:42:46,079 --> 00:42:48,400
is hot by hop it's still i don't think

1094
00:42:48,400 --> 00:42:50,640
it's published but this is well under

1095
00:42:50,640 --> 00:42:53,119
development and this is

1096
00:42:53,119 --> 00:42:56,319
able to respond to

1097
00:42:56,319 --> 00:42:59,680
different kinds of bandwidth uh

1098
00:42:59,680 --> 00:43:03,440
limitations upstream and it uses the

1099
00:43:03,440 --> 00:43:05,520
queuing delay as a signal

1100
00:43:05,520 --> 00:43:08,560
which is propagated top by hub to

1101
00:43:08,560 --> 00:43:11,760
from downstream to control the um the

1102
00:43:11,760 --> 00:43:14,079
sending rate to the request rate uh of

1103
00:43:14,079 --> 00:43:15,440
course then the question is how does

1104
00:43:15,440 --> 00:43:19,359
this interact uh with caching and that

1105
00:43:19,359 --> 00:43:20,960
that's the question that they're um

1106
00:43:20,960 --> 00:43:22,720
exploring right now

1107
00:43:22,720 --> 00:43:24,079
and uh

1108
00:43:24,079 --> 00:43:27,200
uh we'll report on more details on this

1109
00:43:27,200 --> 00:43:28,480
later

1110
00:43:28,480 --> 00:43:30,960
all right so let me say something about

1111
00:43:30,960 --> 00:43:34,160
fpga acceleration so this is the group

1112
00:43:34,160 --> 00:43:36,480
of jason kong working on the fpga

1113
00:43:36,480 --> 00:43:39,040
acceleration fpgas are used in wide

1114
00:43:39,040 --> 00:43:40,880
variety of applications in machine

1115
00:43:40,880 --> 00:43:41,839
learning

1116
00:43:41,839 --> 00:43:44,960
networking in ip long distance prefix

1117
00:43:44,960 --> 00:43:47,520
matching packet inspection for firewalls

1118
00:43:47,520 --> 00:43:51,040
and so and so forth why use fpgas they

1119
00:43:51,040 --> 00:43:53,599
are capable of pipelining tasks

1120
00:43:53,599 --> 00:43:56,720
each cycle can start up a new iplookup

1121
00:43:56,720 --> 00:43:58,880
for instance it can do parallel

1122
00:43:58,880 --> 00:44:00,960
processing multiple interfaces of its

1123
00:44:00,960 --> 00:44:02,480
own

1124
00:44:02,480 --> 00:44:03,680
have its own

1125
00:44:03,680 --> 00:44:06,960
processing block instead of sharing one

1126
00:44:06,960 --> 00:44:09,680
so there are many benefits the goal is

1127
00:44:09,680 --> 00:44:11,520
in in here

1128
00:44:11,520 --> 00:44:14,240
uh if the goal is to use fpga

1129
00:44:14,240 --> 00:44:16,720
in the forwarder input stage so we're

1130
00:44:16,720 --> 00:44:19,359
talking about the indian dpdk forwarder

1131
00:44:19,359 --> 00:44:22,800
uh the where the components of the

1132
00:44:22,800 --> 00:44:24,640
interest name have to be hashed and

1133
00:44:24,640 --> 00:44:27,359
there has to be a table lookup

1134
00:44:27,359 --> 00:44:28,640
uh to

1135
00:44:28,640 --> 00:44:29,760
to see

1136
00:44:29,760 --> 00:44:31,200
uh which

1137
00:44:31,200 --> 00:44:34,160
interest packet should be dispatched to

1138
00:44:34,160 --> 00:44:36,640
which forwarding thread and so they're

1139
00:44:36,640 --> 00:44:38,480
essentially you have to do the the the

1140
00:44:38,480 --> 00:44:40,640
prefix hashing and you have to do the

1141
00:44:40,640 --> 00:44:42,960
table lookup and those are both

1142
00:44:42,960 --> 00:44:45,440
computationally expensive and this is

1143
00:44:45,440 --> 00:44:48,079
what the fpga will be

1144
00:44:48,079 --> 00:44:50,160
designed to do

1145
00:44:50,160 --> 00:44:52,079
and we're still in the preliminary

1146
00:44:52,079 --> 00:44:54,800
stages of this but uh there's been some

1147
00:44:54,800 --> 00:44:56,319
progress so

1148
00:44:56,319 --> 00:44:57,200
again

1149
00:44:57,200 --> 00:44:58,800
looking at the hashing of pre-physics

1150
00:44:58,800 --> 00:45:01,040
and name components table look for

1151
00:45:01,040 --> 00:45:03,440
thread dispatching preliminary results

1152
00:45:03,440 --> 00:45:06,079
show a four times improvement four time

1153
00:45:06,079 --> 00:45:08,480
improvement over doing this all in the

1154
00:45:08,480 --> 00:45:09,839
cpu

1155
00:45:09,839 --> 00:45:12,079
um four times improvement in terms of

1156
00:45:12,079 --> 00:45:13,920
the throughput

1157
00:45:13,920 --> 00:45:16,480
but uh the integration

1158
00:45:16,480 --> 00:45:19,760
with uh ndpdk is still ongoing

1159
00:45:19,760 --> 00:45:20,720
um

1160
00:45:20,720 --> 00:45:23,599
and uh so there's actually a multiple

1161
00:45:23,599 --> 00:45:27,040
stages to this first we will apply

1162
00:45:27,040 --> 00:45:29,520
uh the fpga acceleration to the uh the

1163
00:45:29,520 --> 00:45:30,800
ndt

1164
00:45:30,800 --> 00:45:33,599
which is the dispatch

1165
00:45:33,599 --> 00:45:35,280
table

1166
00:45:35,280 --> 00:45:37,760
for the input in the indian dpdk

1167
00:45:37,760 --> 00:45:39,920
forwarder then we will apply it

1168
00:45:39,920 --> 00:45:43,119
in a similar way to the combined pit cs

1169
00:45:43,119 --> 00:45:45,599
table and finally to the fib

1170
00:45:45,599 --> 00:45:48,240
so um we we are still in the first stage

1171
00:45:48,240 --> 00:45:49,760
but we're the

1172
00:45:49,760 --> 00:45:52,400
there's some promising results of of uh

1173
00:45:52,400 --> 00:45:53,440
having

1174
00:45:53,440 --> 00:45:55,359
uh some throughput improvement

1175
00:45:55,359 --> 00:45:56,560
improvement

1176
00:45:56,560 --> 00:45:57,440
okay

1177
00:45:57,440 --> 00:46:00,800
so um i think i've run over time so um

1178
00:46:00,800 --> 00:46:01,680
to

1179
00:46:01,680 --> 00:46:03,520
give you some summary i mean we're of

1180
00:46:03,520 --> 00:46:05,119
course it's really a progress report

1181
00:46:05,119 --> 00:46:06,800
what i have said here

1182
00:46:06,800 --> 00:46:09,040
um just to give you some results and

1183
00:46:09,040 --> 00:46:11,440
we're still working hard on that but i

1184
00:46:11,440 --> 00:46:13,839
think we've achieved quite a bit i mean

1185
00:46:13,839 --> 00:46:16,240
just having the when uh testbed put

1186
00:46:16,240 --> 00:46:18,319
together was actually a major

1187
00:46:18,319 --> 00:46:21,520
achievement as far as we're concerned

1188
00:46:21,520 --> 00:46:23,119
so

1189
00:46:23,119 --> 00:46:24,240
the

1190
00:46:24,240 --> 00:46:26,480
we have a high performance nd's

1191
00:46:26,480 --> 00:46:27,960
deployment architecture with

1192
00:46:27,960 --> 00:46:30,240
containerization and integration with nd

1193
00:46:30,240 --> 00:46:32,400
dpdk using

1194
00:46:32,400 --> 00:46:34,160
ndnc

1195
00:46:34,160 --> 00:46:35,920
we've established a high performance

1196
00:46:35,920 --> 00:46:37,839
ndswan testbed

1197
00:46:37,839 --> 00:46:40,319
we have managed to obtain a throughput

1198
00:46:40,319 --> 00:46:42,800
of roughly 21 gigabits per second over

1199
00:46:42,800 --> 00:46:44,319
this testbed

1200
00:46:44,319 --> 00:46:46,640
and we've shown that

1201
00:46:46,640 --> 00:46:48,319
optimized caching forwarding yields

1202
00:46:48,319 --> 00:46:49,760
significant

1203
00:46:49,760 --> 00:46:51,680
uh improvements in both delay and

1204
00:46:51,680 --> 00:46:53,760
throughput over this testbed these are

1205
00:46:53,760 --> 00:46:56,319
real experiments

1206
00:46:56,319 --> 00:46:58,720
we have been developing hub by hub

1207
00:46:58,720 --> 00:47:01,040
congestion control based on cueing delay

1208
00:47:01,040 --> 00:47:03,280
looking at interactions with caching

1209
00:47:03,280 --> 00:47:05,760
fpga acceleration of hashing of name

1210
00:47:05,760 --> 00:47:07,040
prefixes

1211
00:47:07,040 --> 00:47:08,960
and table lookup for a thread

1212
00:47:08,960 --> 00:47:10,560
dispatching shows the four times

1213
00:47:10,560 --> 00:47:12,319
improvement over cpu but we're doing

1214
00:47:12,319 --> 00:47:14,160
this in cpu

1215
00:47:14,160 --> 00:47:16,319
and we're working toward the

1216
00:47:16,319 --> 00:47:20,000
prototype production ready indian system

1217
00:47:20,000 --> 00:47:22,800
and uh we are seeking on the long term

1218
00:47:22,800 --> 00:47:26,160
collaboration with other domain sciences

1219
00:47:26,160 --> 00:47:28,240
networking computer systems

1220
00:47:28,240 --> 00:47:30,000
communities

1221
00:47:30,000 --> 00:47:32,800
all right thank you very much

1222
00:47:32,800 --> 00:47:34,800
great thanks a lot to edmund for it's

1223
00:47:34,800 --> 00:47:37,920
really interesting presentation

1224
00:47:37,920 --> 00:47:39,119
let's see

1225
00:47:39,119 --> 00:47:41,680
some questions

1226
00:47:51,599 --> 00:47:52,960
so one question

1227
00:47:52,960 --> 00:47:55,280
that i had was um

1228
00:47:55,280 --> 00:47:57,520
so i mean this is obviously um you know

1229
00:47:57,520 --> 00:48:00,400
a lot of work um went um into setting up

1230
00:48:00,400 --> 00:48:02,480
this testbed and really accelerating

1231
00:48:02,480 --> 00:48:04,640
this data access for these large data

1232
00:48:04,640 --> 00:48:07,119
sets and so on um

1233
00:48:07,119 --> 00:48:09,359
i was wondering so once you are able to

1234
00:48:09,359 --> 00:48:10,800
do that um

1235
00:48:10,800 --> 00:48:12,800
often you want to do something with the

1236
00:48:12,800 --> 00:48:14,480
data so it's like

1237
00:48:14,480 --> 00:48:16,160
processing the data is that also in

1238
00:48:16,160 --> 00:48:18,960
scope of the endless pro i think

1239
00:48:18,960 --> 00:48:21,760
yeah a good question um

1240
00:48:21,760 --> 00:48:22,880
so

1241
00:48:22,880 --> 00:48:24,960
it was actually in the proposal there

1242
00:48:24,960 --> 00:48:26,480
was some um

1243
00:48:26,480 --> 00:48:28,640
there was a section on in the original

1244
00:48:28,640 --> 00:48:31,040
proposal it was proposed that we would

1245
00:48:31,040 --> 00:48:32,880
also look at

1246
00:48:32,880 --> 00:48:35,200
joint data movement and computation

1247
00:48:35,200 --> 00:48:38,079
scheduling of these workflows

1248
00:48:38,079 --> 00:48:41,359
um but due to the then then the budget

1249
00:48:41,359 --> 00:48:43,680
was cut a little bit so we removed that

1250
00:48:43,680 --> 00:48:46,079
from the scope of the project for now

1251
00:48:46,079 --> 00:48:48,800
um obviously that's that's the goal of

1252
00:48:48,800 --> 00:48:51,040
the ultimate goal of um hopefully a

1253
00:48:51,040 --> 00:48:53,040
continuation of this project

1254
00:48:53,040 --> 00:48:54,800
is to not only deal with the data

1255
00:48:54,800 --> 00:48:56,400
movement which is what we're doing right

1256
00:48:56,400 --> 00:48:58,880
now but to

1257
00:48:58,880 --> 00:49:01,520
handle the workflows and that's

1258
00:49:01,520 --> 00:49:03,680
something that's definitely very very

1259
00:49:03,680 --> 00:49:05,839
relevant and this is the whole problem

1260
00:49:05,839 --> 00:49:07,839
in high energy physics application and

1261
00:49:07,839 --> 00:49:10,079
many of these other applications so i

1262
00:49:10,079 --> 00:49:11,599
think there's still

1263
00:49:11,599 --> 00:49:14,880
a lot of work that remains to be done

1264
00:49:14,880 --> 00:49:17,119
but um i think that the data movement is

1265
00:49:17,119 --> 00:49:19,680
definitely the first step um okay yeah

1266
00:49:19,680 --> 00:49:20,880
cool

1267
00:49:20,880 --> 00:49:24,559
um so we have thomas in the queue

1268
00:49:24,640 --> 00:49:27,680
hello edmund thanks for this uh

1269
00:49:27,680 --> 00:49:29,599
very interesting talk a question on your

1270
00:49:29,599 --> 00:49:31,680
caching analysis i mean you're

1271
00:49:31,680 --> 00:49:34,319
considering

1272
00:49:34,960 --> 00:49:37,760
high energy physics or other

1273
00:49:37,760 --> 00:49:40,480
huge bulk scientific data and you were

1274
00:49:40,480 --> 00:49:43,440
you were assuming a zip distribution um

1275
00:49:43,440 --> 00:49:45,200
i was a bit surprised about this i mean

1276
00:49:45,200 --> 00:49:47,760
i would expect zip with netflix

1277
00:49:47,760 --> 00:49:51,680
but but is there a use pattern that

1278
00:49:51,680 --> 00:49:54,800
actually distinguishes between certain

1279
00:49:54,800 --> 00:49:57,440
certain portions of the data in high

1280
00:49:57,440 --> 00:50:00,240
energy physics

1281
00:50:00,240 --> 00:50:03,680
so we actually took uh statistics

1282
00:50:03,680 --> 00:50:05,359
um using actual

1283
00:50:05,359 --> 00:50:08,000
uh request data from the um

1284
00:50:08,000 --> 00:50:11,680
lhc community and in fact there is

1285
00:50:11,680 --> 00:50:13,680
a similar falloff you know that you

1286
00:50:13,680 --> 00:50:15,680
would expect in

1287
00:50:15,680 --> 00:50:18,240
i mean usually you you have data sets

1288
00:50:18,240 --> 00:50:21,200
which are so called hot data sets which

1289
00:50:21,200 --> 00:50:23,200
everybody wants to work on

1290
00:50:23,200 --> 00:50:24,319
you know

1291
00:50:24,319 --> 00:50:26,319
so there is actually a falloff in the in

1292
00:50:26,319 --> 00:50:27,760
the popularity

1293
00:50:27,760 --> 00:50:31,280
um uh and we fit actually the the

1294
00:50:31,280 --> 00:50:33,119
distribution with this this one it's

1295
00:50:33,119 --> 00:50:35,280
it's a good approximation

1296
00:50:35,280 --> 00:50:36,160
um

1297
00:50:36,160 --> 00:50:38,720
so this is actually based on data that

1298
00:50:38,720 --> 00:50:41,359
we collected um is that is that your

1299
00:50:41,359 --> 00:50:44,558
question or is it uh

1300
00:50:46,720 --> 00:50:48,640
yes it does thanks

1301
00:50:48,640 --> 00:50:51,520
yeah yeah so uh so it's it's a similar

1302
00:50:51,520 --> 00:50:54,640
enviro phenomena actually is is true in

1303
00:50:54,640 --> 00:50:56,720
in physics um

1304
00:50:56,720 --> 00:50:59,520
what happens is that you know there's

1305
00:50:59,520 --> 00:51:01,839
there's typically some

1306
00:51:01,839 --> 00:51:03,520
big questions that everybody is trying

1307
00:51:03,520 --> 00:51:06,240
to explore right and that requires

1308
00:51:06,240 --> 00:51:09,040
certain data sets which are maybe the

1309
00:51:09,040 --> 00:51:10,720
you know the most recent one or some

1310
00:51:10,720 --> 00:51:12,559
data set which is really relevant to the

1311
00:51:12,559 --> 00:51:14,000
task at hand

1312
00:51:14,000 --> 00:51:17,119
and then there's of course a tail and uh

1313
00:51:17,119 --> 00:51:18,880
yeah

1314
00:51:18,880 --> 00:51:23,359
okay next question from ken

1315
00:51:23,359 --> 00:51:25,040
thanks edmund

1316
00:51:25,040 --> 00:51:27,760
you may uh as you know may know we're

1317
00:51:27,760 --> 00:51:29,920
we're trying to do some similar we're

1318
00:51:29,920 --> 00:51:31,680
trying to build on some of your sandy

1319
00:51:31,680 --> 00:51:34,000
stuff actually and you've probably seen

1320
00:51:34,000 --> 00:51:35,040
from my

1321
00:51:35,040 --> 00:51:36,480
master's student but

1322
00:51:36,480 --> 00:51:38,160
um my question is

1323
00:51:38,160 --> 00:51:39,760
when you in the

1324
00:51:39,760 --> 00:51:41,440
three hop

1325
00:51:41,440 --> 00:51:42,880
thing where you showed the the

1326
00:51:42,880 --> 00:51:44,880
architecture of the consumer and the

1327
00:51:44,880 --> 00:51:46,400
producer

1328
00:51:46,400 --> 00:51:48,160
uh what

1329
00:51:48,160 --> 00:51:49,520
did you

1330
00:51:49,520 --> 00:51:52,880
develop a bespoke transport protocol for

1331
00:51:52,880 --> 00:51:55,040
that or are you using some kind of

1332
00:51:55,040 --> 00:51:57,680
generic chunking protocol to break up

1333
00:51:57,680 --> 00:51:58,720
these

1334
00:51:58,720 --> 00:52:01,599
very large data sets into segments and

1335
00:52:01,599 --> 00:52:04,480
is it you know is it designed for this

1336
00:52:04,480 --> 00:52:06,880
application or is it a is it just a

1337
00:52:06,880 --> 00:52:10,960
generic uh chunking protocol

1338
00:52:10,960 --> 00:52:13,839
i uh so questions how do we chunk

1339
00:52:13,839 --> 00:52:15,839
um so

1340
00:52:15,839 --> 00:52:19,319
you know um

1341
00:52:19,839 --> 00:52:21,839
yeah i'm trying to find this so i i

1342
00:52:21,839 --> 00:52:22,960
think uh

1343
00:52:22,960 --> 00:52:26,240
it's okay i'm so i think these are

1344
00:52:26,240 --> 00:52:28,559
um so i'm not sure if my student is

1345
00:52:28,559 --> 00:52:31,040
online right now but maybe he can give

1346
00:52:31,040 --> 00:52:33,839
you better details on this uh

1347
00:52:33,839 --> 00:52:37,200
i'm not sure i think yeah he's there

1348
00:52:37,200 --> 00:52:39,359
you can answer offline if if that's

1349
00:52:39,359 --> 00:52:41,200
easier it's just okay

1350
00:52:41,200 --> 00:52:43,760
yeah so i think that chunking

1351
00:52:43,760 --> 00:52:44,880
is

1352
00:52:44,880 --> 00:52:47,839
essentially

1353
00:52:47,839 --> 00:52:50,400
is is is something that is essentially

1354
00:52:50,400 --> 00:52:52,960
inherent in the application um

1355
00:52:52,960 --> 00:52:55,040
so um i don't know if you and how are

1356
00:52:55,040 --> 00:52:57,200
you able to speak quickly or no

1357
00:52:57,200 --> 00:52:58,400
um

1358
00:52:58,400 --> 00:53:00,800
i guess he has to ask to be to speak or

1359
00:53:00,800 --> 00:53:01,920
something right

1360
00:53:01,920 --> 00:53:04,160
he can just unmute himself

1361
00:53:04,160 --> 00:53:05,839
okay

1362
00:53:05,839 --> 00:53:07,040
yes yeah

1363
00:53:07,040 --> 00:53:08,880
i'm thinking about chunking uh

1364
00:53:08,880 --> 00:53:10,960
yeah the chunking is

1365
00:53:10,960 --> 00:53:15,200
implemented uh directly

1366
00:53:15,200 --> 00:53:18,880
embedded into the file server and the

1367
00:53:18,880 --> 00:53:21,599
consumer application the how to channel

1368
00:53:21,599 --> 00:53:24,319
the chunk the content

1369
00:53:24,319 --> 00:53:26,880
and uh

1370
00:53:27,040 --> 00:53:29,200
yeah so

1371
00:53:29,200 --> 00:53:31,439
uh

1372
00:53:32,480 --> 00:53:34,880
it's basically where to uh do all the

1373
00:53:34,880 --> 00:53:36,880
things oh yes

1374
00:53:36,880 --> 00:53:38,960
content

1375
00:53:38,960 --> 00:53:40,880
that's something that was

1376
00:53:40,880 --> 00:53:44,559
you know developed by ndnc right

1377
00:53:44,559 --> 00:53:45,520
um

1378
00:53:45,520 --> 00:53:48,880
and this and the ndnd ptk group the

1379
00:53:48,880 --> 00:53:50,160
national

1380
00:53:50,160 --> 00:53:52,000
development by server

1381
00:53:52,000 --> 00:53:53,839
okay that's that's what i wanted to know

1382
00:53:53,839 --> 00:53:56,960
is whether there it's it's part of dbdk

1383
00:53:56,960 --> 00:53:59,599
or indianc or something like that or was

1384
00:53:59,599 --> 00:54:01,119
it is it actually built into the

1385
00:54:01,119 --> 00:54:03,760
application

1386
00:54:04,800 --> 00:54:07,119
but yeah just i'll just send you an

1387
00:54:07,119 --> 00:54:08,800
email and ask you that question yeah

1388
00:54:08,800 --> 00:54:11,200
let's go let's let's talk about it more

1389
00:54:11,200 --> 00:54:12,079
yeah

1390
00:54:12,079 --> 00:54:14,720
so thank you inhale thanks ken okay okay

1391
00:54:14,720 --> 00:54:16,400
one more question and that's the final

1392
00:54:16,400 --> 00:54:17,839
one by dave

1393
00:54:17,839 --> 00:54:19,520
well i'm going to abuse my q location

1394
00:54:19,520 --> 00:54:21,359
asked two questions hopefully they're

1395
00:54:21,359 --> 00:54:24,240
both real easy ones uh number one and

1396
00:54:24,240 --> 00:54:26,079
you're 21 gigabits per second are you

1397
00:54:26,079 --> 00:54:29,520
doing signature validation

1398
00:54:30,319 --> 00:54:35,640
uh i do not believe so um how

1399
00:54:38,400 --> 00:54:39,599
we're not we're not doing we're not

1400
00:54:39,599 --> 00:54:41,520
doing we're not doing signature value of

1401
00:54:41,520 --> 00:54:43,280
validation right

1402
00:54:43,280 --> 00:54:44,720
right right

1403
00:54:44,720 --> 00:54:46,799
so you're not you're not actually

1404
00:54:46,799 --> 00:54:48,079
exploiting the

1405
00:54:48,079 --> 00:54:51,359
um security properties of indian uh so

1406
00:54:51,359 --> 00:54:53,920
what happens is this in the in the i

1407
00:54:53,920 --> 00:54:55,760
mean that's a good question in the high

1408
00:54:55,760 --> 00:54:58,000
energy physics application

1409
00:54:58,000 --> 00:55:00,000
i mean that's something we will be doing

1410
00:55:00,000 --> 00:55:02,559
um i think that's the the the

1411
00:55:02,559 --> 00:55:05,200
the sort of the providence aspect is a

1412
00:55:05,200 --> 00:55:06,880
part of the project but right now we're

1413
00:55:06,880 --> 00:55:10,480
not doing that and in fact the physics

1414
00:55:10,480 --> 00:55:12,079
application

1415
00:55:12,079 --> 00:55:14,640
what happens is that you have a

1416
00:55:14,640 --> 00:55:16,400
sort of a pretty strict security

1417
00:55:16,400 --> 00:55:18,480
parameter for people who can access the

1418
00:55:18,480 --> 00:55:20,400
system you have to be approved and so on

1419
00:55:20,400 --> 00:55:21,520
and so forth

1420
00:55:21,520 --> 00:55:24,480
um so they don't actually usually worry

1421
00:55:24,480 --> 00:55:26,240
about security too much within this

1422
00:55:26,240 --> 00:55:28,880
physics application

1423
00:55:28,880 --> 00:55:31,280
but nevertheless we as a part of the

1424
00:55:31,280 --> 00:55:35,359
project we did propose to um to put to

1425
00:55:35,359 --> 00:55:37,839
put the signatu you know to to sign the

1426
00:55:37,839 --> 00:55:40,480
packets and to verify them you know to

1427
00:55:40,480 --> 00:55:42,240
provide providence so

1428
00:55:42,240 --> 00:55:45,599
um we're not haven't done that yet

1429
00:55:45,599 --> 00:55:48,000
okay and then one final quick question

1430
00:55:48,000 --> 00:55:49,760
which is um

1431
00:55:49,760 --> 00:55:52,960
4x out of improvement over cpu for an

1432
00:55:52,960 --> 00:55:54,319
fpga

1433
00:55:54,319 --> 00:55:55,280
seems

1434
00:55:55,280 --> 00:55:57,359
not very impressive do you have any

1435
00:55:57,359 --> 00:56:01,520
insight into what the bottleneck is

1436
00:56:01,599 --> 00:56:02,400
yeah

1437
00:56:02,400 --> 00:56:04,400
um

1438
00:56:04,400 --> 00:56:06,400
yeah you're right i think it's not i

1439
00:56:06,400 --> 00:56:08,079
think that these results are still

1440
00:56:08,079 --> 00:56:12,000
preliminary tell the truth um

1441
00:56:12,000 --> 00:56:14,480
i think uh jason's group is

1442
00:56:14,480 --> 00:56:15,520
still

1443
00:56:15,520 --> 00:56:17,200
working on that

1444
00:56:17,200 --> 00:56:18,799
um

1445
00:56:18,799 --> 00:56:20,720
well just just for the future i'm really

1446
00:56:20,720 --> 00:56:22,960
interested in this subject uh yeah and

1447
00:56:22,960 --> 00:56:24,480
i've been working on some stuff that's

1448
00:56:24,480 --> 00:56:26,400
going to be bottlenecked on

1449
00:56:26,400 --> 00:56:27,520
um

1450
00:56:27,520 --> 00:56:31,280
on fpga style hashing of um

1451
00:56:31,280 --> 00:56:35,040
of these uh load distribution to courses

1452
00:56:35,040 --> 00:56:37,599
so i think it would it's really

1453
00:56:37,599 --> 00:56:39,760
that works of really broad interest and

1454
00:56:39,760 --> 00:56:41,920
publishing some stuff on that would be

1455
00:56:41,920 --> 00:56:43,599
really great

1456
00:56:43,599 --> 00:56:45,760
well you know i i

1457
00:56:45,760 --> 00:56:47,520
absolutely i don't want to say anything

1458
00:56:47,520 --> 00:56:49,359
definitive here because

1459
00:56:49,359 --> 00:56:52,480
um jason's group is really the expert on

1460
00:56:52,480 --> 00:56:55,680
that um i we can take this offline and

1461
00:56:55,680 --> 00:56:57,839
we can i can probably give you more

1462
00:56:57,839 --> 00:56:59,280
insight um

1463
00:56:59,280 --> 00:57:02,240
uh talking with their group about but

1464
00:57:02,240 --> 00:57:04,400
it's ongoing work i i did you shouldn't

1465
00:57:04,400 --> 00:57:06,880
see this as finalized at a

1466
00:57:06,880 --> 00:57:09,440
bio by any means

1467
00:57:09,440 --> 00:57:11,839
network coding the same way was that

1468
00:57:11,839 --> 00:57:13,359
if you can't exploit the high

1469
00:57:13,359 --> 00:57:17,040
parallelism by doing you know 20 50 70

1470
00:57:17,040 --> 00:57:18,960
packets at a time

1471
00:57:18,960 --> 00:57:21,280
in the fpga you're just not you know

1472
00:57:21,280 --> 00:57:22,720
because the clock rate the inherent

1473
00:57:22,720 --> 00:57:25,040
clock rate of the fpga isn't just all

1474
00:57:25,040 --> 00:57:27,040
that high right

1475
00:57:27,040 --> 00:57:28,720
you really need to be able to paralyze

1476
00:57:28,720 --> 00:57:30,319
things

1477
00:57:30,319 --> 00:57:32,720
absolutely so so um i i think you're

1478
00:57:32,720 --> 00:57:34,240
right i think this is not that

1479
00:57:34,240 --> 00:57:35,680
impressive yet

1480
00:57:35,680 --> 00:57:36,720
um

1481
00:57:36,720 --> 00:57:38,079
and uh

1482
00:57:38,079 --> 00:57:42,400
but uh the the fpga work i i have to say

1483
00:57:42,400 --> 00:57:43,680
um

1484
00:57:43,680 --> 00:57:44,640
it

1485
00:57:44,640 --> 00:57:46,720
it is ramping up it's ramping up the

1486
00:57:46,720 --> 00:57:49,839
first part of the project was much more

1487
00:57:49,839 --> 00:57:51,280
focused on these other things that i

1488
00:57:51,280 --> 00:57:52,960
talked about the caching and setting up

1489
00:57:52,960 --> 00:57:55,440
the win test bet but i think during the

1490
00:57:55,440 --> 00:57:56,960
next couple of months we should be

1491
00:57:56,960 --> 00:57:57,920
seeing

1492
00:57:57,920 --> 00:57:59,839
uh much more ramping up of the work on

1493
00:57:59,839 --> 00:58:02,559
fpga and we'll keep you updated

1494
00:58:02,559 --> 00:58:04,640
great thanks

1495
00:58:04,640 --> 00:58:07,440
okay thanks um so i'm sure people have

1496
00:58:07,440 --> 00:58:09,760
more questions so have i but um yeah

1497
00:58:09,760 --> 00:58:10,960
let's

1498
00:58:10,960 --> 00:58:12,799
uh defer this to the main list um i'm

1499
00:58:12,799 --> 00:58:14,240
sure edmund would be happy to answer

1500
00:58:14,240 --> 00:58:17,040
your questions um thanks again edmund um

1501
00:58:17,040 --> 00:58:19,040
for being very much all the time yeah

1502
00:58:19,040 --> 00:58:20,480
for the opportunity

1503
00:58:20,480 --> 00:58:22,960
hope to see you again soon yeah good

1504
00:58:22,960 --> 00:58:24,640
thank you

1505
00:58:24,640 --> 00:58:28,160
okay so uh let's move on um and

1506
00:58:28,160 --> 00:58:30,000
next would be um

1507
00:58:30,000 --> 00:58:31,359
i'm gonna one

1508
00:58:31,359 --> 00:58:34,839
on um data time encoding for

1509
00:58:34,839 --> 00:58:37,920
ccnx yes thanks to um i dirk ide for

1510
00:58:37,920 --> 00:58:41,359
vienna i think you can hear me right

1511
00:58:43,119 --> 00:58:46,319
um i'm asking to

1512
00:58:46,319 --> 00:58:47,760
share slides

1513
00:58:47,760 --> 00:58:51,160
yes granted

1514
00:58:59,040 --> 00:59:03,960
so i can see my slides now looking good

1515
00:59:04,559 --> 00:59:06,640
all right um

1516
00:59:06,640 --> 00:59:08,079
yeah thank you thanks again for this uh

1517
00:59:08,079 --> 00:59:09,839
for this five-minute slot that we that

1518
00:59:09,839 --> 00:59:11,280
you provided us

1519
00:59:11,280 --> 00:59:13,359
so this graph is about a compact time

1520
00:59:13,359 --> 00:59:16,559
representation for ccnx it was actually

1521
00:59:16,559 --> 00:59:19,200
first presented in 2019

1522
00:59:19,200 --> 00:59:20,720
uh i think in singapore by thomas

1523
00:59:20,720 --> 00:59:22,160
thomasod

1524
00:59:22,160 --> 00:59:26,079
and then in 2020 virtually by me um so

1525
00:59:26,079 --> 00:59:28,319
far it hasn't received that much

1526
00:59:28,319 --> 00:59:30,880
attention on the mailing list

1527
00:59:30,880 --> 00:59:32,559
and that's why i wanted to also give

1528
00:59:32,559 --> 00:59:34,559
like a brief recap on the core ideas of

1529
00:59:34,559 --> 00:59:37,440
this of this draft

1530
00:59:40,160 --> 00:59:43,040
so the resource constraint environments

1531
00:59:43,040 --> 00:59:45,040
we have usually like a low bandwidth and

1532
00:59:45,040 --> 00:59:48,400
high latency access to to wireless links

1533
00:59:48,400 --> 00:59:50,480
is typically slower than the packet

1534
00:59:50,480 --> 00:59:53,119
processing within the stack itself

1535
00:59:53,119 --> 00:59:56,400
and the packet transmission is

1536
00:59:56,400 --> 00:59:59,200
usually the dominating factor for

1537
00:59:59,200 --> 01:00:00,799
the energy consumption of these little

1538
01:00:00,799 --> 01:00:02,720
tiny devices

1539
01:00:02,720 --> 01:00:04,720
and header compression is actually a

1540
01:00:04,720 --> 01:00:06,960
solution to to reduce the energy

1541
01:00:06,960 --> 01:00:08,319
expenditure

1542
01:00:08,319 --> 01:00:09,599
but it also

1543
01:00:09,599 --> 01:00:12,720
improves transmission reliability

1544
01:00:12,720 --> 01:00:14,880
which we also measured and showed

1545
01:00:14,880 --> 01:00:17,280
during our work on icn open which is now

1546
01:00:17,280 --> 01:00:19,520
rfc 91

1547
01:00:19,520 --> 01:00:21,920
39.

1548
01:00:21,920 --> 01:00:24,960
so ccnx is

1549
01:00:24,960 --> 01:00:28,400
making use of two different

1550
01:00:28,400 --> 01:00:30,559
types of representing time first they

1551
01:00:30,559 --> 01:00:33,280
have a relative type relative time which

1552
01:00:33,280 --> 01:00:35,440
is used in the interest for the interest

1553
01:00:35,440 --> 01:00:36,480
lifetime

1554
01:00:36,480 --> 01:00:38,400
and there's also absolute time which is

1555
01:00:38,400 --> 01:00:40,640
used for the signature time expiry time

1556
01:00:40,640 --> 01:00:42,640
and the required cache time

1557
01:00:42,640 --> 01:00:45,040
in both message types

1558
01:00:45,040 --> 01:00:47,920
the relative time is unbounded this

1559
01:00:47,920 --> 01:00:51,040
means that the tlv supports an

1560
01:00:51,040 --> 01:00:53,280
unlimited number of bytes that you can

1561
01:00:53,280 --> 01:00:56,319
use for to represent the offset

1562
01:00:56,319 --> 01:00:58,640
and the absolute time is limited to 8

1563
01:00:58,640 --> 01:01:00,559
bytes

1564
01:01:00,559 --> 01:01:05,839
to encode the unix time in milliseconds

1565
01:01:07,200 --> 01:01:09,680
and in this particular draft

1566
01:01:09,680 --> 01:01:11,200
we are

1567
01:01:11,200 --> 01:01:13,359
like i mean the idea got in got inspired

1568
01:01:13,359 --> 01:01:18,960
by um by rfc 5497 which is a time tlv

1569
01:01:18,960 --> 01:01:20,319
rfc

1570
01:01:20,319 --> 01:01:22,960
uh for or yes it's a time

1571
01:01:22,960 --> 01:01:25,839
present or like a dynamic range

1572
01:01:25,839 --> 01:01:27,119
encoding for

1573
01:01:27,119 --> 01:01:30,240
money routing style protocols

1574
01:01:30,240 --> 01:01:32,319
and

1575
01:01:32,319 --> 01:01:34,319
this is all very similar to the work in

1576
01:01:34,319 --> 01:01:36,960
ieee 754 which is the floating point

1577
01:01:36,960 --> 01:01:39,119
standard

1578
01:01:39,119 --> 01:01:40,720
and the idea is that

1579
01:01:40,720 --> 01:01:42,160
we encode

1580
01:01:42,160 --> 01:01:43,760
the exponent and the mantissa of a

1581
01:01:43,760 --> 01:01:46,240
number into a single byte

1582
01:01:46,240 --> 01:01:48,400
and using the formulas that you can see

1583
01:01:48,400 --> 01:01:51,670
at the bottom of the slides we can

1584
01:01:51,670 --> 01:01:53,359
[Music]

1585
01:01:53,359 --> 01:01:55,680
calculate a time value which is in

1586
01:01:55,680 --> 01:01:57,039
seconds then

1587
01:01:57,039 --> 01:01:59,920
from this one single byte

1588
01:01:59,920 --> 01:02:02,160
the subnormal form of this formula is

1589
01:02:02,160 --> 01:02:04,319
needed to

1590
01:02:04,319 --> 01:02:06,640
solve actually the the underflow issue

1591
01:02:06,640 --> 01:02:08,640
um because if you only go with the

1592
01:02:08,640 --> 01:02:10,960
normalized formula then you have a huge

1593
01:02:10,960 --> 01:02:11,839
jump

1594
01:02:11,839 --> 01:02:14,240
between zero and the smallest number you

1595
01:02:14,240 --> 01:02:16,879
can represent

1596
01:02:18,559 --> 01:02:20,960
so in the last presentation in 2020 we

1597
01:02:20,960 --> 01:02:22,960
actually

1598
01:02:22,960 --> 01:02:24,720
presented like multiple configurations

1599
01:02:24,720 --> 01:02:26,400
for this single byte because you can

1600
01:02:26,400 --> 01:02:27,680
play around with the mantis and the

1601
01:02:27,680 --> 01:02:28,720
exponent

1602
01:02:28,720 --> 01:02:32,079
sizes and come to like different ranges

1603
01:02:32,079 --> 01:02:34,079
and so also on the mailing list we had

1604
01:02:34,079 --> 01:02:36,480
this discussion uh two years back and i

1605
01:02:36,480 --> 01:02:39,039
think this is the configuration that we

1606
01:02:39,039 --> 01:02:40,640
converge to and this is also now in the

1607
01:02:40,640 --> 01:02:41,839
draft

1608
01:02:41,839 --> 01:02:43,760
and this is configuration we can have

1609
01:02:43,760 --> 01:02:46,000
numbers that range from from zero

1610
01:02:46,000 --> 01:02:47,280
you can see in the in the on the left

1611
01:02:47,280 --> 01:02:49,039
side the table there's the subnormal

1612
01:02:49,039 --> 01:02:52,079
range and then it goes in in seven

1613
01:02:52,079 --> 01:02:54,400
millisecond increments until the normal

1614
01:02:54,400 --> 01:02:56,319
range and normalized range and from

1615
01:02:56,319 --> 01:02:57,599
there on it

1616
01:02:57,599 --> 01:02:59,280
goes lower smoothly

1617
01:02:59,280 --> 01:03:01,760
until a very huge number which in this

1618
01:03:01,760 --> 01:03:03,280
case represents

1619
01:03:03,280 --> 01:03:05,520
close to four years

1620
01:03:05,520 --> 01:03:06,640
and check

1621
01:03:06,640 --> 01:03:09,039
some questions and yeah yeah sure

1622
01:03:09,039 --> 01:03:12,000
so ken is in the queue

1623
01:03:12,960 --> 01:03:15,039
sorry i just forgot to leave the queue i

1624
01:03:15,039 --> 01:03:17,200
don't have a question right now

1625
01:03:17,200 --> 01:03:18,319
okay

1626
01:03:18,319 --> 01:03:20,720
then dave is in the queue

1627
01:03:20,720 --> 01:03:23,279
yes dave

1628
01:03:27,520 --> 01:03:29,920
i forgot to remove myself okay i'm sorry

1629
01:03:29,920 --> 01:03:31,200
and then i am

1630
01:03:31,200 --> 01:03:32,880
okay sorry

1631
01:03:32,880 --> 01:03:35,039
let's go ahead

1632
01:03:35,039 --> 01:03:36,640
all right so if there are any questions

1633
01:03:36,640 --> 01:03:39,280
then please raise the hand

1634
01:03:39,280 --> 01:03:41,359
um

1635
01:03:41,359 --> 01:03:43,440
so from here on

1636
01:03:43,440 --> 01:03:45,920
uh there was this huge question also two

1637
01:03:45,920 --> 01:03:47,680
years back on how actually we can

1638
01:03:47,680 --> 01:03:50,079
integrate this compact time in the

1639
01:03:50,079 --> 01:03:53,839
current ccnx protocol specification

1640
01:03:53,839 --> 01:03:55,760
and there were like multiple solutions

1641
01:03:55,760 --> 01:03:57,359
to that

1642
01:03:57,359 --> 01:03:59,119
the solution that we

1643
01:03:59,119 --> 01:04:01,680
mark moscow was also

1644
01:04:01,680 --> 01:04:03,039
giving a lot of

1645
01:04:03,039 --> 01:04:05,200
input on the main list for that so the

1646
01:04:05,200 --> 01:04:07,280
solution we went with currently in the

1647
01:04:07,280 --> 01:04:09,839
draft is that if we for example look at

1648
01:04:09,839 --> 01:04:11,680
the interest lifetime

1649
01:04:11,680 --> 01:04:13,119
we say that

1650
01:04:13,119 --> 01:04:16,319
if we set the length to one

1651
01:04:16,319 --> 01:04:18,559
then the forwarder has to interpret this

1652
01:04:18,559 --> 01:04:19,760
number as

1653
01:04:19,760 --> 01:04:21,760
the compact delta time

1654
01:04:21,760 --> 01:04:23,839
and if it's like any number greater one

1655
01:04:23,839 --> 01:04:26,319
then it's the typical ccnx time delta in

1656
01:04:26,319 --> 01:04:27,520
milliseconds

1657
01:04:27,520 --> 01:04:28,720
for the recommended cache time is a

1658
01:04:28,720 --> 01:04:29,920
little bit different

1659
01:04:29,920 --> 01:04:32,480
i said before that's fixed to eight

1660
01:04:32,480 --> 01:04:34,480
so it's not actually using other other

1661
01:04:34,480 --> 01:04:36,160
sizes

1662
01:04:36,160 --> 01:04:37,359
there so

1663
01:04:37,359 --> 01:04:39,920
what we said in the in the draft is okay

1664
01:04:39,920 --> 01:04:42,720
if we use a length of one

1665
01:04:42,720 --> 01:04:44,960
then we put the compact time in there

1666
01:04:44,960 --> 01:04:47,680
but you probably saw it's a delta time

1667
01:04:47,680 --> 01:04:49,039
so it's a time offset and not an

1668
01:04:49,039 --> 01:04:50,640
absolute time anymore

1669
01:04:50,640 --> 01:04:52,240
but we think that the regular cache time

1670
01:04:52,240 --> 01:04:54,319
is not so critical if you lose a little

1671
01:04:54,319 --> 01:04:55,920
bit of

1672
01:04:55,920 --> 01:04:57,520
precision there

1673
01:04:57,520 --> 01:04:59,520
so the forwarder must be able to

1674
01:04:59,520 --> 01:05:00,720
convert the

1675
01:05:00,720 --> 01:05:02,480
the time offset to absolute time on

1676
01:05:02,480 --> 01:05:04,880
return on transmission and receiving the

1677
01:05:04,880 --> 01:05:07,039
packets

1678
01:05:07,039 --> 01:05:09,200
so there's obviously uh

1679
01:05:09,200 --> 01:05:10,960
well the advantage of this uh

1680
01:05:10,960 --> 01:05:13,039
integration level is that we don't need

1681
01:05:13,039 --> 01:05:13,760
to

1682
01:05:13,760 --> 01:05:17,920
allocate a new tlv number at the honor

1683
01:05:17,920 --> 01:05:20,720
but the disadvantage is that this

1684
01:05:20,720 --> 01:05:23,760
requires an update to to the our ccnx

1685
01:05:23,760 --> 01:05:26,319
messages rfc

1686
01:05:26,319 --> 01:05:28,240
and that if the if there's a forwarder

1687
01:05:28,240 --> 01:05:30,079
that doesn't know about this change then

1688
01:05:30,079 --> 01:05:32,880
of course the time is

1689
01:05:32,880 --> 01:05:36,200
like misinterpreted

1690
01:05:36,240 --> 01:05:38,640
i think that was also one of the core

1691
01:05:38,640 --> 01:05:39,760
arguments

1692
01:05:39,760 --> 01:05:42,240
for hitachi i can see that hitoshi sorry

1693
01:05:42,240 --> 01:05:44,480
i can see that he's in the in the

1694
01:05:44,480 --> 01:05:46,559
in the chat at least

1695
01:05:46,559 --> 01:05:48,839
so maybe he has something to say to that

1696
01:05:48,839 --> 01:05:51,839
um so an alternative integration would

1697
01:05:51,839 --> 01:05:55,359
be to actually define a new top level uh

1698
01:05:55,359 --> 01:05:56,720
tlv

1699
01:05:56,720 --> 01:05:59,119
so to allocate a number at ayana and

1700
01:05:59,119 --> 01:06:00,160
then we would have something like

1701
01:06:00,160 --> 01:06:02,480
interest lifetime compact and this was

1702
01:06:02,480 --> 01:06:04,400
this would live like next to the

1703
01:06:04,400 --> 01:06:06,640
interest the typical interest lifetime

1704
01:06:06,640 --> 01:06:07,680
and

1705
01:06:07,680 --> 01:06:10,720
of course the advantage is that if

1706
01:06:10,720 --> 01:06:12,480
the forwarder doesn't know this

1707
01:06:12,480 --> 01:06:15,280
the tlv it probably just ignores it and

1708
01:06:15,280 --> 01:06:18,960
takes a default interest lifetime and

1709
01:06:18,960 --> 01:06:20,880
yeah the disadvantages we allocated

1710
01:06:20,880 --> 01:06:23,200
number

1711
01:06:23,599 --> 01:06:26,640
and this um brings us to the end so

1712
01:06:26,640 --> 01:06:28,000
this

1713
01:06:28,000 --> 01:06:29,359
yeah within the two years there were

1714
01:06:29,359 --> 01:06:31,359
like very subtle changes to the draft

1715
01:06:31,359 --> 01:06:32,799
itself

1716
01:06:32,799 --> 01:06:34,480
the div to version three was actually

1717
01:06:34,480 --> 01:06:36,240
just to describe the integration level

1718
01:06:36,240 --> 01:06:38,400
that i just showed you in the last slide

1719
01:06:38,400 --> 01:06:40,079
and the div to version four is that we

1720
01:06:40,079 --> 01:06:42,000
change the formula to

1721
01:06:42,000 --> 01:06:44,000
streamline it streamline it more to what

1722
01:06:44,000 --> 01:06:46,000
time tlv

1723
01:06:46,000 --> 01:06:47,280
was saying

1724
01:06:47,280 --> 01:06:49,920
and what we chose for iceland open

1725
01:06:49,920 --> 01:06:52,000
and also there's a pseudocode in the in

1726
01:06:52,000 --> 01:06:56,160
the draft that specifies how to encode

1727
01:06:56,160 --> 01:06:57,520
the actual numbers

1728
01:06:57,520 --> 01:06:59,280
and we had to update this

1729
01:06:59,280 --> 01:07:01,039
according to the formulas and also we

1730
01:07:01,039 --> 01:07:02,319
added terminology and enlargement

1731
01:07:02,319 --> 01:07:03,839
sections

1732
01:07:03,839 --> 01:07:06,400
yeah you probably saw we need

1733
01:07:06,400 --> 01:07:09,680
more feedback also on the mailing list

1734
01:07:09,680 --> 01:07:11,760
especially for the protocol integration

1735
01:07:11,760 --> 01:07:14,720
so how to integrate these

1736
01:07:14,720 --> 01:07:16,720
compact times into ccnx

1737
01:07:16,720 --> 01:07:18,480
and also there's the expiry and

1738
01:07:18,480 --> 01:07:20,079
signature time which is currently

1739
01:07:20,079 --> 01:07:22,799
absolute time and there were some ideas

1740
01:07:22,799 --> 01:07:25,200
floating around a couple of years back

1741
01:07:25,200 --> 01:07:26,480
whether we can

1742
01:07:26,480 --> 01:07:28,880
generate offset time offsets of

1743
01:07:28,880 --> 01:07:30,720
for these

1744
01:07:30,720 --> 01:07:32,720
tlvs the problem is that they are

1745
01:07:32,720 --> 01:07:33,920
within the

1746
01:07:33,920 --> 01:07:35,599
security envelope so it's not that easy

1747
01:07:35,599 --> 01:07:37,920
to change that on the forwarding

1748
01:07:37,920 --> 01:07:39,440
but maybe we can also find a solution

1749
01:07:39,440 --> 01:07:41,760
for them

1750
01:07:41,760 --> 01:07:44,640
so and then is the question um i mean if

1751
01:07:44,640 --> 01:07:46,559
there's interest in the group for this

1752
01:07:46,559 --> 01:07:48,640
particular work then would this be ready

1753
01:07:48,640 --> 01:07:49,839
for

1754
01:07:49,839 --> 01:07:52,880
uh rg adoption

1755
01:07:53,280 --> 01:07:54,799
all right

1756
01:07:54,799 --> 01:07:57,520
thanks thank for progressing this and

1757
01:07:57,520 --> 01:07:59,039
for um

1758
01:07:59,039 --> 01:08:01,039
bringing this back um

1759
01:08:01,039 --> 01:08:03,440
yeah so i mean we think this is um the

1760
01:08:03,440 --> 01:08:07,039
right type of document um for a like

1761
01:08:07,039 --> 01:08:08,240
research group

1762
01:08:08,240 --> 01:08:11,280
activity um is uh it's kind of a it's a

1763
01:08:11,280 --> 01:08:12,720
useful

1764
01:08:12,720 --> 01:08:16,080
um feature um especially in these um

1765
01:08:16,080 --> 01:08:18,000
high delay environments

1766
01:08:18,000 --> 01:08:20,000
and it's also it's raising interesting

1767
01:08:20,000 --> 01:08:23,439
questions on protocol extensibility um

1768
01:08:23,439 --> 01:08:24,719
so

1769
01:08:24,719 --> 01:08:26,238
like from a shares perspective i think

1770
01:08:26,238 --> 01:08:27,279
we would

1771
01:08:27,279 --> 01:08:29,439
propose adopting this we will reconfirm

1772
01:08:29,439 --> 01:08:31,120
this on the main list but in general i

1773
01:08:31,120 --> 01:08:33,040
think this is in the right type of

1774
01:08:33,040 --> 01:08:35,439
document for that

1775
01:08:35,439 --> 01:08:37,120
is there any immediate

1776
01:08:37,120 --> 01:08:38,960
feedback on shanks questions so the

1777
01:08:38,960 --> 01:08:43,279
protocol integration or the encoding

1778
01:08:46,080 --> 01:08:47,520
okay because that's what we need of

1779
01:08:47,520 --> 01:08:50,640
course as a next step

1780
01:08:50,640 --> 01:08:53,040
then um make a decision in the group by

1781
01:08:53,040 --> 01:08:55,439
how we want to go about um integrating

1782
01:08:55,439 --> 01:08:57,359
this especially

1783
01:08:57,359 --> 01:08:59,120
and um yeah

1784
01:08:59,120 --> 01:09:01,279
so let's um

1785
01:09:01,279 --> 01:09:04,799
discuss this on on the list then

1786
01:09:04,799 --> 01:09:06,479
all right thanks again

1787
01:09:06,479 --> 01:09:08,959
yep thanks

1788
01:09:09,359 --> 01:09:11,279
all right

1789
01:09:11,279 --> 01:09:14,640
so um so we are moving on with um the

1790
01:09:14,640 --> 01:09:16,799
updates on ping and traceroute um so

1791
01:09:16,799 --> 01:09:19,520
spiros can't make it today so

1792
01:09:19,520 --> 01:09:23,520
dave is going to present these things

1793
01:09:28,799 --> 01:09:31,839
so hi um spiros couldn't make it he did

1794
01:09:31,839 --> 01:09:33,920
the slide so i'm just going to quickly

1795
01:09:33,920 --> 01:09:35,920
go through things

1796
01:09:35,920 --> 01:09:38,080
on ping and traceroute so just to remind

1797
01:09:38,080 --> 01:09:41,120
people these are

1798
01:09:43,839 --> 01:09:46,080
these are instrumentation and management

1799
01:09:46,080 --> 01:09:50,000
tools for nbn and ccn style

1800
01:09:50,000 --> 01:09:52,000
icn protocols

1801
01:09:52,000 --> 01:09:55,040
and they're analogous to the similar

1802
01:09:55,040 --> 01:09:57,040
capabilities we have in ping and trace

1803
01:09:57,040 --> 01:09:59,520
route in the ip world although because

1804
01:09:59,520 --> 01:10:01,040
the architecture of the underlying

1805
01:10:01,040 --> 01:10:02,880
protocols is different the capabilities

1806
01:10:02,880 --> 01:10:03,840
of these

1807
01:10:03,840 --> 01:10:06,719
um these protocols are similarly

1808
01:10:06,719 --> 01:10:08,480
somewhat different in terms of how they

1809
01:10:08,480 --> 01:10:09,600
support

1810
01:10:09,600 --> 01:10:13,120
multipath and how they can support

1811
01:10:13,120 --> 01:10:15,920
the existence of caching

1812
01:10:15,920 --> 01:10:18,159
in intermediate nodes

1813
01:10:18,159 --> 01:10:20,400
so ping gives you the reachability of

1814
01:10:20,400 --> 01:10:23,360
names both in from producers and on path

1815
01:10:23,360 --> 01:10:25,280
caches

1816
01:10:25,280 --> 01:10:27,920
and we have again packet formats for

1817
01:10:27,920 --> 01:10:29,679
both of our

1818
01:10:29,679 --> 01:10:32,880
popular ndn underlying protocols

1819
01:10:32,880 --> 01:10:34,719
ditto for trace route

1820
01:10:34,719 --> 01:10:35,760
um

1821
01:10:35,760 --> 01:10:38,560
this is a multi-path capable trace route

1822
01:10:38,560 --> 01:10:41,600
uh just as we've seen in the ip world

1823
01:10:41,600 --> 01:10:45,600
with um with tunnel trace uh

1824
01:10:45,600 --> 01:10:48,320
types of things but this is now built in

1825
01:10:48,320 --> 01:10:49,840
on day one

1826
01:10:49,840 --> 01:10:52,640
uh and similarly we have um protocol

1827
01:10:52,640 --> 01:10:54,159
encodings for both

1828
01:10:54,159 --> 01:10:56,960
uh our popular icn protocols

1829
01:10:56,960 --> 01:10:59,760
so the current status is that

1830
01:10:59,760 --> 01:11:01,199
these drafts have been around for quite

1831
01:11:01,199 --> 01:11:03,199
a while they've been implemented

1832
01:11:03,199 --> 01:11:06,080
uh in a number of experimental settings

1833
01:11:06,080 --> 01:11:08,000
uh we completed uh

1834
01:11:08,000 --> 01:11:10,880
last call in january uh didn't get a lot

1835
01:11:10,880 --> 01:11:12,880
of feedback but we got some very good

1836
01:11:12,880 --> 01:11:15,679
set of comments from june child she

1837
01:11:15,679 --> 01:11:18,560
um on the draft and both have been

1838
01:11:18,560 --> 01:11:20,159
since updated

1839
01:11:20,159 --> 01:11:22,239
uh by the authors

1840
01:11:22,239 --> 01:11:25,040
so we had one issue that came up on last

1841
01:11:25,040 --> 01:11:27,840
call which had to do with just how to

1842
01:11:27,840 --> 01:11:29,040
integrate

1843
01:11:29,040 --> 01:11:31,280
uh path steering which is used in the

1844
01:11:31,280 --> 01:11:33,520
multi-path case for both ping and trace

1845
01:11:33,520 --> 01:11:34,400
route

1846
01:11:34,400 --> 01:11:37,360
uh into the into the uh

1847
01:11:37,360 --> 01:11:40,640
encoding method methodology of this

1848
01:11:40,640 --> 01:11:44,640
um and uh decided based on some

1849
01:11:44,640 --> 01:11:46,080
discussion

1850
01:11:46,080 --> 01:11:48,239
that it belongs in the base protocol as

1851
01:11:48,239 --> 01:11:49,840
opposed to some

1852
01:11:49,840 --> 01:11:52,560
intermediate link mapping protocol

1853
01:11:52,560 --> 01:11:54,880
uh because although it's not an

1854
01:11:54,880 --> 01:11:56,159
end-to-end

1855
01:11:56,159 --> 01:11:59,679
uh capability it is modified hop by hop

1856
01:11:59,679 --> 01:12:03,040
but the actual process on each hop is is

1857
01:12:03,040 --> 01:12:06,320
independent of the link type

1858
01:12:06,320 --> 01:12:08,800
so the changes in the in the current

1859
01:12:08,800 --> 01:12:11,360
version very quickly very few packet

1860
01:12:11,360 --> 01:12:13,280
format was updated for the latest

1861
01:12:13,280 --> 01:12:15,520
version of the ndn formats

1862
01:12:15,520 --> 01:12:18,320
uh we moved this the tlv that carries

1863
01:12:18,320 --> 01:12:19,840
path steering

1864
01:12:19,840 --> 01:12:22,480
out saw after the signature tlv to make

1865
01:12:22,480 --> 01:12:24,080
sure that it's

1866
01:12:24,080 --> 01:12:25,920
excluded from the security envelope

1867
01:12:25,920 --> 01:12:28,400
since it is modified hop by hop

1868
01:12:28,400 --> 01:12:30,080
and um

1869
01:12:30,080 --> 01:12:32,159
made use of the

1870
01:12:32,159 --> 01:12:34,719
new capabilities in ndn to have types

1871
01:12:34,719 --> 01:12:37,360
name components and then didn't have

1872
01:12:37,360 --> 01:12:39,920
that until fairly recently

1873
01:12:39,920 --> 01:12:43,360
so we use type name components both in

1874
01:12:43,360 --> 01:12:46,159
the ccnx and the ndn variants of the

1875
01:12:46,159 --> 01:12:49,199
protocols to indicate that

1876
01:12:49,199 --> 01:12:50,960
ping and trace route require special

1877
01:12:50,960 --> 01:12:54,400
processing uh by intermediate nodes

1878
01:12:54,400 --> 01:12:57,280
so the next step is basically uh the

1879
01:12:57,280 --> 01:12:59,520
authors think the drafts are ready for

1880
01:12:59,520 --> 01:13:01,360
irsg review

1881
01:13:01,360 --> 01:13:05,199
and uh dirk has

1882
01:13:05,199 --> 01:13:06,640
been

1883
01:13:06,640 --> 01:13:08,239
is going to have to be the documents

1884
01:13:08,239 --> 01:13:10,080
that shepard since your other co-chair

1885
01:13:10,080 --> 01:13:12,640
as a co-author of the draft

1886
01:13:12,640 --> 01:13:17,080
and i'm done and i'll take questions

1887
01:13:28,320 --> 01:13:32,120
okay i think we're done

1888
01:13:32,239 --> 01:13:34,480
yes

1889
01:13:38,640 --> 01:13:40,800
yeah i will take care of it um

1890
01:13:40,800 --> 01:13:42,719
if there are no questions let's move on

1891
01:13:42,719 --> 01:13:44,800
with the past doing oh one quick thing

1892
01:13:44,800 --> 01:13:47,040
just for colin i'll confirm this uh with

1893
01:13:47,040 --> 01:13:49,040
the mail to you but these two documents

1894
01:13:49,040 --> 01:13:51,360
are are essentially a pair

1895
01:13:51,360 --> 01:13:54,000
so the same irsg person that will

1896
01:13:54,000 --> 01:13:56,159
probably want to review both

1897
01:13:56,159 --> 01:13:58,800
uh since they're just two

1898
01:13:58,800 --> 01:14:01,840
two piece of the pod

1899
01:14:08,719 --> 01:14:12,679
colin said make sense

1900
01:14:32,080 --> 01:14:34,000
okay i guess i'm up for the next one as

1901
01:14:34,000 --> 01:14:37,280
well dirk you want to introduce it

1902
01:14:37,280 --> 01:14:41,440
um yes so the next one um is a refresher

1903
01:14:41,440 --> 01:14:42,400
on

1904
01:14:42,400 --> 01:14:45,280
also work that has been done earlier

1905
01:14:45,280 --> 01:14:48,480
and that's path steering so um

1906
01:14:48,480 --> 01:14:51,120
an interesting capability um that we can

1907
01:14:51,120 --> 01:14:54,159
introduce to icn so make

1908
01:14:54,159 --> 01:14:57,600
path selection available to um consumers

1909
01:14:57,600 --> 01:14:58,960
and um

1910
01:14:58,960 --> 01:15:01,120
so um

1911
01:15:01,120 --> 01:15:04,239
we think it's it's quite um relevant for

1912
01:15:04,239 --> 01:15:06,560
like the multi-pass discussions that uh

1913
01:15:06,560 --> 01:15:08,719
keep coming up and like also

1914
01:15:08,719 --> 01:15:10,960
deficiencies that other protocols have

1915
01:15:10,960 --> 01:15:13,280
in this direction and

1916
01:15:13,280 --> 01:15:14,800
so that's why we thought it's a good

1917
01:15:14,800 --> 01:15:17,600
idea to look at this again and make

1918
01:15:17,600 --> 01:15:21,600
people aware so yeah dave go ahead

1919
01:15:22,400 --> 01:15:24,960
is everybody else seeing the uh messed

1920
01:15:24,960 --> 01:15:30,400
up conversion slide on this stuff yes

1921
01:15:31,040 --> 01:15:33,040
that's not on purpose okay

1922
01:15:33,040 --> 01:15:35,280
so uh well we do have a capability of

1923
01:15:35,280 --> 01:15:38,400
encrypting the path labels so

1924
01:15:38,400 --> 01:15:40,800
maybe that's just the encrypted version

1925
01:15:40,800 --> 01:15:42,719
it's supposed to say path steering or

1926
01:15:42,719 --> 01:15:45,040
refresher all right so this has been

1927
01:15:45,040 --> 01:15:47,040
around for a while

1928
01:15:47,040 --> 01:15:47,920
um

1929
01:15:47,920 --> 01:15:48,880
and

1930
01:15:48,880 --> 01:15:51,199
we haven't had a lot of

1931
01:15:51,199 --> 01:15:53,840
strong motivation to move it forward

1932
01:15:53,840 --> 01:15:56,000
quickly until recently

1933
01:15:56,000 --> 01:15:58,000
um and the reason the motivation has

1934
01:15:58,000 --> 01:15:59,520
gone up of course is because we're

1935
01:15:59,520 --> 01:16:02,159
progressing uh ping and trace route both

1936
01:16:02,159 --> 01:16:03,120
of which

1937
01:16:03,120 --> 01:16:05,920
uh need this in order to be maximally

1938
01:16:05,920 --> 01:16:08,159
useful as

1939
01:16:08,159 --> 01:16:10,239
instrumentation tools in a multi-path

1940
01:16:10,239 --> 01:16:12,400
forwarding environment

1941
01:16:12,400 --> 01:16:13,440
because

1942
01:16:13,440 --> 01:16:15,040
you want to be able to make sure that

1943
01:16:15,040 --> 01:16:17,040
when you're measuring

1944
01:16:17,040 --> 01:16:18,320
for example

1945
01:16:18,320 --> 01:16:20,239
rtts

1946
01:16:20,239 --> 01:16:21,280
that

1947
01:16:21,280 --> 01:16:23,040
when there's a multi-path environment

1948
01:16:23,040 --> 01:16:25,600
you get individual rtts for each of the

1949
01:16:25,600 --> 01:16:28,000
sub-pads that might be traversed and

1950
01:16:28,000 --> 01:16:30,080
similarly for trace route you want to be

1951
01:16:30,080 --> 01:16:32,719
able to explore

1952
01:16:32,719 --> 01:16:35,360
for multiple paths to destinations and

1953
01:16:35,360 --> 01:16:37,440
be able to report on them so i'll

1954
01:16:37,440 --> 01:16:40,320
quickly go through this uh a lot of this

1955
01:16:40,320 --> 01:16:42,640
is material you may have seen before

1956
01:16:42,640 --> 01:16:44,560
uh but we haven't really talked about it

1957
01:16:44,560 --> 01:16:46,480
in a while so it's probably worth taking

1958
01:16:46,480 --> 01:16:47,840
a little bit of time to go through it

1959
01:16:47,840 --> 01:16:49,199
again

1960
01:16:49,199 --> 01:16:51,280
so

1961
01:16:51,280 --> 01:16:52,400
um

1962
01:16:52,400 --> 01:16:54,800
so the underlying problem statement is

1963
01:16:54,800 --> 01:16:56,800
that icn communication is inherently

1964
01:16:56,800 --> 01:16:59,000
multi-path and

1965
01:16:59,000 --> 01:17:00,800
multi-destination

1966
01:17:00,800 --> 01:17:03,920
so we don't today have a mechanism for

1967
01:17:03,920 --> 01:17:06,560
consumers to direct traffic interest

1968
01:17:06,560 --> 01:17:09,040
traffic onto specific paths

1969
01:17:09,040 --> 01:17:11,600
um we do have forwarding strategies in

1970
01:17:11,600 --> 01:17:13,760
icn that could spray interest onto

1971
01:17:13,760 --> 01:17:16,400
various paths but consumers have a hard

1972
01:17:16,400 --> 01:17:18,560
time interpreting uh whether there are

1973
01:17:18,560 --> 01:17:20,640
any failures or performance glitches

1974
01:17:20,640 --> 01:17:22,560
when those when multiple paths are being

1975
01:17:22,560 --> 01:17:23,600
used

1976
01:17:23,600 --> 01:17:24,400
so

1977
01:17:24,400 --> 01:17:26,320
um we need the ability for

1978
01:17:26,320 --> 01:17:28,320
troubleshooting and performance tools to

1979
01:17:28,320 --> 01:17:30,800
get this path visibility in order to

1980
01:17:30,800 --> 01:17:33,280
find problems and do simple measurements

1981
01:17:33,280 --> 01:17:34,880
and we discovered the same thing in the

1982
01:17:34,880 --> 01:17:36,239
ip world

1983
01:17:36,239 --> 01:17:38,880
uh when we tried to do things like mpls

1984
01:17:38,880 --> 01:17:40,480
and tunnel trace where there are

1985
01:17:40,480 --> 01:17:43,280
multiple underlying pads

1986
01:17:43,280 --> 01:17:44,880
and uh

1987
01:17:44,880 --> 01:17:47,280
and hence a lot of work was done

1988
01:17:47,280 --> 01:17:50,239
sort of like late in the um evolution of

1989
01:17:50,239 --> 01:17:52,159
the ip protocol suite to add these

1990
01:17:52,159 --> 01:17:56,400
capabilities and as a result um it was

1991
01:17:56,400 --> 01:17:58,800
quite substantially messy so we're

1992
01:17:58,800 --> 01:18:01,120
hoping that by incorporating these

1993
01:18:01,120 --> 01:18:03,199
capabilities early in the evolution of

1994
01:18:03,199 --> 01:18:06,239
the icn architectures uh that we'll be

1995
01:18:06,239 --> 01:18:08,960
able to do a much cleaner job

1996
01:18:08,960 --> 01:18:10,000
so

1997
01:18:10,000 --> 01:18:11,360
what we'd like to be able to do is

1998
01:18:11,360 --> 01:18:13,280
discover and monitor

1999
01:18:13,280 --> 01:18:15,600
and troubleshoot a multi-path network

2000
01:18:15,600 --> 01:18:17,760
connectivity environment

2001
01:18:17,760 --> 01:18:20,000
and accurately accurately be able to

2002
01:18:20,000 --> 01:18:22,159
measure the performance of a specific

2003
01:18:22,159 --> 01:18:24,080
network path when there are multiple

2004
01:18:24,080 --> 01:18:25,600
paths

2005
01:18:25,600 --> 01:18:27,760
similarly we have a number of already

2006
01:18:27,760 --> 01:18:28,960
published

2007
01:18:28,960 --> 01:18:30,719
and implemented multi-path congestion

2008
01:18:30,719 --> 01:18:32,800
control algorithms

2009
01:18:32,800 --> 01:18:34,960
some of which not all of which but some

2010
01:18:34,960 --> 01:18:36,000
of which

2011
01:18:36,000 --> 01:18:38,239
work by estimating and counting the

2012
01:18:38,239 --> 01:18:40,400
number of available paths identifying

2013
01:18:40,400 --> 01:18:42,320
pads and actually

2014
01:18:42,320 --> 01:18:45,360
allocating traffic to each path

2015
01:18:45,360 --> 01:18:48,159
explicitly so we have two

2016
01:18:48,159 --> 01:18:51,120
um that have been uh published over the

2017
01:18:51,120 --> 01:18:53,440
last couple of years one called merck

2018
01:18:53,440 --> 01:18:54,400
a

2019
01:18:54,400 --> 01:18:56,320
multi-path rate-based congestion control

2020
01:18:56,320 --> 01:18:58,719
algorithm and smek a sub-path

2021
01:18:58,719 --> 01:19:00,880
window-based multi-path congestion

2022
01:19:00,880 --> 01:19:03,360
control algorithm both of which would be

2023
01:19:03,360 --> 01:19:04,640
able to

2024
01:19:04,640 --> 01:19:06,960
properly exploit an explicit path

2025
01:19:06,960 --> 01:19:09,840
steering capability

2026
01:19:10,880 --> 01:19:13,920
so the design of this um actually goes

2027
01:19:13,920 --> 01:19:15,280
back to

2028
01:19:15,280 --> 01:19:18,080
a paper published around 19

2029
01:19:18,080 --> 01:19:20,000
2018

2030
01:19:20,000 --> 01:19:22,880
on path steering and also path switching

2031
01:19:22,880 --> 01:19:25,040
which does

2032
01:19:25,040 --> 01:19:27,199
optimized

2033
01:19:27,199 --> 01:19:28,800
forwarding pads

2034
01:19:28,800 --> 01:19:30,560
using past steering

2035
01:19:30,560 --> 01:19:32,480
so the design question is how do you

2036
01:19:32,480 --> 01:19:34,400
label the paths and

2037
01:19:34,400 --> 01:19:36,320
over the last few years we've looked at

2038
01:19:36,320 --> 01:19:37,600
a number of

2039
01:19:37,600 --> 01:19:39,120
possibilities

2040
01:19:39,120 --> 01:19:40,960
you can use bloom filters which are

2041
01:19:40,960 --> 01:19:43,280
probabilistically pretty good

2042
01:19:43,280 --> 01:19:44,960
we looked at what are called pairing

2043
01:19:44,960 --> 01:19:46,719
functions

2044
01:19:46,719 --> 01:19:47,679
which

2045
01:19:47,679 --> 01:19:49,280
have minimal

2046
01:19:49,280 --> 01:19:52,000
overhead in terms of storage

2047
01:19:52,000 --> 01:19:54,600
but requires some

2048
01:19:54,600 --> 01:19:56,880
multi-multi-dimensional math in order to

2049
01:19:56,880 --> 01:19:59,440
compute them and don't deal with long

2050
01:19:59,440 --> 01:20:01,440
paths very well

2051
01:20:01,440 --> 01:20:03,760
we looked at label stacks similar to

2052
01:20:03,760 --> 01:20:05,760
mpos label stacking

2053
01:20:05,760 --> 01:20:09,199
uh which um has some

2054
01:20:09,199 --> 01:20:10,560
nice

2055
01:20:10,560 --> 01:20:12,639
history behind it they're known to work

2056
01:20:12,639 --> 01:20:14,080
reasonably well

2057
01:20:14,080 --> 01:20:16,719
but require

2058
01:20:16,719 --> 01:20:19,040
being able to vary the size of the the

2059
01:20:19,040 --> 01:20:20,639
data structure as you traverse the

2060
01:20:20,639 --> 01:20:23,679
network with the push and pop operations

2061
01:20:23,679 --> 01:20:26,400
we chose to use fixed size labels simply

2062
01:20:26,400 --> 01:20:30,080
because we expect um path length to be

2063
01:20:30,080 --> 01:20:33,040
not un unreasonably long

2064
01:20:33,040 --> 01:20:36,639
um and uh the processing of these to be

2065
01:20:36,639 --> 01:20:39,040
being really really fast

2066
01:20:39,040 --> 01:20:40,480
so

2067
01:20:40,480 --> 01:20:41,360
uh

2068
01:20:41,360 --> 01:20:44,639
the second issue is how do you discover

2069
01:20:44,639 --> 01:20:47,760
uh paths and how do you steer packets on

2070
01:20:47,760 --> 01:20:50,159
the paths that are discovered so

2071
01:20:50,159 --> 01:20:51,840
one of the nice properties that makes

2072
01:20:51,840 --> 01:20:54,080
this way easier than in the ip world is

2073
01:20:54,080 --> 01:20:55,679
that we have symmetric forwarding

2074
01:20:55,679 --> 01:20:58,000
symmetric routing so that returned

2075
01:20:58,000 --> 01:20:59,760
packets returning or returning over the

2076
01:20:59,760 --> 01:21:01,760
same path that the interest

2077
01:21:01,760 --> 01:21:04,480
uh is uh is forwarded over

2078
01:21:04,480 --> 01:21:06,480
so the interest contains a path label

2079
01:21:06,480 --> 01:21:09,199
marked in discovery it's forwarded via

2080
01:21:09,199 --> 01:21:12,639
the um least

2081
01:21:12,639 --> 01:21:15,520
named prevex match in the fib

2082
01:21:15,520 --> 01:21:18,560
and the content uh in a data message

2083
01:21:18,560 --> 01:21:20,480
carries the path label that's been

2084
01:21:20,480 --> 01:21:22,480
computed on the way up

2085
01:21:22,480 --> 01:21:27,120
uh back towards the source of the packet

2086
01:21:27,120 --> 01:21:29,679
and then as a subsequent interest can

2087
01:21:29,679 --> 01:21:31,520
take this path label that was obtained

2088
01:21:31,520 --> 01:21:34,239
from an earlier return data packet not

2089
01:21:34,239 --> 01:21:37,040
mark discovery mode and forwarded

2090
01:21:37,040 --> 01:21:40,080
uh via the the fib and this explicit

2091
01:21:40,080 --> 01:21:43,600
next hop selection so we don't bypass

2092
01:21:43,600 --> 01:21:46,080
fib look up here we simply use

2093
01:21:46,080 --> 01:21:48,560
the path label to select the particular

2094
01:21:48,560 --> 01:21:50,239
outgoing face

2095
01:21:50,239 --> 01:21:52,719
among the possible faces that are

2096
01:21:52,719 --> 01:21:55,040
already in the fit

2097
01:21:55,040 --> 01:21:56,880
i say that because the original paper

2098
01:21:56,880 --> 01:21:59,199
also had this optimization of being able

2099
01:21:59,199 --> 01:22:01,760
to align the path the

2100
01:22:01,760 --> 01:22:04,080
uh the actual fib look up

2101
01:22:04,080 --> 01:22:05,600
so we can

2102
01:22:05,600 --> 01:22:08,480
reliably measure path rtts we can

2103
01:22:08,480 --> 01:22:10,480
iteratively discover multiple network

2104
01:22:10,480 --> 01:22:11,520
pads

2105
01:22:11,520 --> 01:22:13,520
uh congestion control can discover and

2106
01:22:13,520 --> 01:22:15,760
distribute load across pads

2107
01:22:15,760 --> 01:22:18,080
and although this hasn't been proven in

2108
01:22:18,080 --> 01:22:20,639
anything implemented yet um if you

2109
01:22:20,639 --> 01:22:22,639
believe you might be getting a content

2110
01:22:22,639 --> 01:22:24,639
poisoning attack across one of these

2111
01:22:24,639 --> 01:22:27,199
pads and you have multiple paths that

2112
01:22:27,199 --> 01:22:29,679
could bypass a poison cache

2113
01:22:29,679 --> 01:22:31,760
consumers potentially can mitigate the

2114
01:22:31,760 --> 01:22:34,800
effect of a content poisoning attack and

2115
01:22:34,800 --> 01:22:36,480
we can also potentially build traffic

2116
01:22:36,480 --> 01:22:39,520
engineering solutions if path labels

2117
01:22:39,520 --> 01:22:42,159
can be distributed via sdn

2118
01:22:42,159 --> 01:22:44,638
style

2119
01:22:45,920 --> 01:22:48,080
route distribution

2120
01:22:48,080 --> 01:22:49,360
so

2121
01:22:49,360 --> 01:22:50,880
some of the interesting issues are how

2122
01:22:50,880 --> 01:22:53,360
you deal with route updates uh so you

2123
01:22:53,360 --> 01:22:54,080
have to

2124
01:22:54,080 --> 01:22:55,520
invalidate

2125
01:22:55,520 --> 01:22:56,320
uh

2126
01:22:56,320 --> 01:22:58,639
pads that have been discovered so we

2127
01:22:58,639 --> 01:23:02,639
have a an interest return in ccnx style

2128
01:23:02,639 --> 01:23:05,280
mac for carrying an invalid path label

2129
01:23:05,280 --> 01:23:06,560
which can

2130
01:23:06,560 --> 01:23:08,960
uh invalidate it you could silently

2131
01:23:08,960 --> 01:23:10,400
forward the interest through any

2132
01:23:10,400 --> 01:23:13,040
available next top if you don't get a

2133
01:23:13,040 --> 01:23:13,920
match

2134
01:23:13,920 --> 01:23:15,520
and we can actually control this

2135
01:23:15,520 --> 01:23:19,040
behavior uh by either forcing the error

2136
01:23:19,040 --> 01:23:21,280
or allowing

2137
01:23:21,280 --> 01:23:26,159
you to fall back or redo discovery

2138
01:23:26,239 --> 01:23:27,920
the next obvious problem is how you deal

2139
01:23:27,920 --> 01:23:29,679
with route updates

2140
01:23:29,679 --> 01:23:32,320
we assign new next hop labels every time

2141
01:23:32,320 --> 01:23:35,600
the fib changes and on the reverse path

2142
01:23:35,600 --> 01:23:38,159
that we drop the data or the knack so

2143
01:23:38,159 --> 01:23:39,280
that

2144
01:23:39,280 --> 01:23:40,400
you can

2145
01:23:40,400 --> 01:23:43,280
invalidate the path

2146
01:23:43,280 --> 01:23:45,360
so the last piece of this which is the

2147
01:23:45,360 --> 01:23:46,719
only piece that's really changed

2148
01:23:46,719 --> 01:23:48,960
recently is how we do the packet

2149
01:23:48,960 --> 01:23:50,320
encoding

2150
01:23:50,320 --> 01:23:52,400
so on ccnx

2151
01:23:52,400 --> 01:23:55,040
we add a new error code so that you can

2152
01:23:55,040 --> 01:23:58,239
report broken path labels

2153
01:23:58,239 --> 01:24:00,400
there's a next hop

2154
01:24:00,400 --> 01:24:01,679
header

2155
01:24:01,679 --> 01:24:03,760
that carries the path label

2156
01:24:03,760 --> 01:24:06,080
and the sub tlvs that go with that in

2157
01:24:06,080 --> 01:24:08,800
order to complete the encoding

2158
01:24:08,800 --> 01:24:12,719
on ndn um ndn hasn't adopted this but we

2159
01:24:12,719 --> 01:24:15,280
have a proposal in the spec for how one

2160
01:24:15,280 --> 01:24:17,440
would how much we believe should

2161
01:24:17,440 --> 01:24:19,840
integrate this into the ndn packet

2162
01:24:19,840 --> 01:24:22,560
encoding which is to have a new packet

2163
01:24:22,560 --> 01:24:25,520
tlv called path label with essentially

2164
01:24:25,520 --> 01:24:28,840
the same semantics as we've defined for

2165
01:24:28,840 --> 01:24:31,360
ccnx there's just a picture of what it

2166
01:24:31,360 --> 01:24:33,920
looks like

2167
01:24:34,400 --> 01:24:36,239
now there's some security considerations

2168
01:24:36,239 --> 01:24:38,560
here they're all in the document you can

2169
01:24:38,560 --> 01:24:39,760
look at them

2170
01:24:39,760 --> 01:24:43,040
um clearly consumers could do probing

2171
01:24:43,040 --> 01:24:46,400
and maliciously mister packets

2172
01:24:46,400 --> 01:24:47,440
um

2173
01:24:47,440 --> 01:24:48,159
but

2174
01:24:48,159 --> 01:24:49,840
you in order to be able to guess a

2175
01:24:49,840 --> 01:24:52,639
correct next hop on a different path

2176
01:24:52,639 --> 01:24:55,120
uh you have to sort of send about two to

2177
01:24:55,120 --> 01:24:58,400
the 12th interests for for this to work

2178
01:24:58,400 --> 01:24:59,760
um so

2179
01:24:59,760 --> 01:25:01,920
uh we have a number of mitigations

2180
01:25:01,920 --> 01:25:03,920
whoops in the spec in order to deal with

2181
01:25:03,920 --> 01:25:07,440
that and i just unshared my

2182
01:25:07,440 --> 01:25:12,519
uh slides let me put them back up again

2183
01:25:19,120 --> 01:25:20,480
there we go back to security

2184
01:25:20,480 --> 01:25:23,280
considerations

2185
01:25:23,600 --> 01:25:24,719
so

2186
01:25:24,719 --> 01:25:27,120
a second possibility is cash pollution

2187
01:25:27,120 --> 01:25:28,400
by

2188
01:25:28,400 --> 01:25:31,040
consumers and producers colluding

2189
01:25:31,040 --> 01:25:34,320
uh to inject off path and bogus object

2190
01:25:34,320 --> 01:25:37,520
so cache entries have to be annotated uh

2191
01:25:37,520 --> 01:25:39,760
once you add this capability with the

2192
01:25:39,760 --> 01:25:43,600
corresponding path label and only use

2193
01:25:43,600 --> 01:25:45,520
that cache entry to satisfy interest

2194
01:25:45,520 --> 01:25:47,600
with a matching path label

2195
01:25:47,600 --> 01:25:50,000
and that cache entries should not evict

2196
01:25:50,000 --> 01:25:52,000
entries for the same object with no path

2197
01:25:52,000 --> 01:25:55,120
label or a different path label uh to to

2198
01:25:55,120 --> 01:25:57,600
mitigate this uh potential cash

2199
01:25:57,600 --> 01:25:59,360
pollution attack

2200
01:25:59,360 --> 01:26:01,280
and i'm done

2201
01:26:01,280 --> 01:26:02,960
so um

2202
01:26:02,960 --> 01:26:05,040
the i think the issue at hand which

2203
01:26:05,040 --> 01:26:06,480
we'll talk about when we're done the

2204
01:26:06,480 --> 01:26:10,239
rest of the the agenda is whether uh

2205
01:26:10,239 --> 01:26:12,800
is perhaps we should do an rg adoption

2206
01:26:12,800 --> 01:26:13,760
call

2207
01:26:13,760 --> 01:26:15,920
for this work at this point so thanks

2208
01:26:15,920 --> 01:26:19,159
very much

2209
01:26:29,040 --> 01:26:31,360
okay

2210
01:26:32,159 --> 01:26:34,080
sorry i forgot to respond okay i'm gonna

2211
01:26:34,080 --> 01:26:37,199
say the words you should never say at a

2212
01:26:37,199 --> 01:26:40,480
itf meeting but um i have a question but

2213
01:26:40,480 --> 01:26:42,800
i haven't read the draft

2214
01:26:42,800 --> 01:26:43,920
recently

2215
01:26:43,920 --> 01:26:45,040
um

2216
01:26:45,040 --> 01:26:48,320
so what is it that the uh could you put

2217
01:26:48,320 --> 01:26:49,360
the

2218
01:26:49,360 --> 01:26:51,440
the picture of the of the encoding up

2219
01:26:51,440 --> 01:26:54,000
again because i didn't quite digest that

2220
01:26:54,000 --> 01:26:57,040
um okay so it's a 12-bit next hop label

2221
01:26:57,040 --> 01:26:59,199
and the idea is that it's completely up

2222
01:26:59,199 --> 01:27:01,360
to the next hop what the what to put in

2223
01:27:01,360 --> 01:27:04,719
there it can be a random uh correct

2224
01:27:04,719 --> 01:27:06,480
okay correct

2225
01:27:06,480 --> 01:27:09,120
it just gets recorded in the fib as an

2226
01:27:09,120 --> 01:27:12,080
identifier for that face in that fib

2227
01:27:12,080 --> 01:27:13,199
entry

2228
01:27:13,199 --> 01:27:16,000
okay and there's a link and i mean it

2229
01:27:16,000 --> 01:27:19,199
could be at the at the as level or it

2230
01:27:19,199 --> 01:27:21,199
could be at the node level or or

2231
01:27:21,199 --> 01:27:23,199
whatever right

2232
01:27:23,199 --> 01:27:26,159
or are you even the the intent is that

2233
01:27:26,159 --> 01:27:27,920
uh since you want to be able to use this

2234
01:27:27,920 --> 01:27:30,159
for diagnostic purposes

2235
01:27:30,159 --> 01:27:32,639
um as much as possible the intent is

2236
01:27:32,639 --> 01:27:34,800
that it would be it would be

2237
01:27:34,800 --> 01:27:37,199
every hop would be identified

2238
01:27:37,199 --> 01:27:40,159
okay thank you

2239
01:27:45,199 --> 01:27:47,199
oh and uh please read the draft we're

2240
01:27:47,199 --> 01:27:50,159
interested in your comments

2241
01:27:51,199 --> 01:27:53,678
i will

2242
01:27:56,159 --> 01:27:59,400
other questions

2243
01:28:06,000 --> 01:28:09,280
yeah so i mean um we think this is a

2244
01:28:09,280 --> 01:28:12,400
quite a powerful tool um that

2245
01:28:12,400 --> 01:28:15,040
gives consumers um

2246
01:28:15,040 --> 01:28:16,480
many ways to

2247
01:28:16,480 --> 01:28:17,920
influence

2248
01:28:17,920 --> 01:28:19,280
the way they want to work with the

2249
01:28:19,280 --> 01:28:22,320
network and um it's designed in a way

2250
01:28:22,320 --> 01:28:25,280
that is using soft state and so on so

2251
01:28:25,280 --> 01:28:27,040
it's something that other protocols

2252
01:28:27,040 --> 01:28:28,880
cannot really do and so that's why i

2253
01:28:28,880 --> 01:28:31,040
think it's it's a really nice um also

2254
01:28:31,040 --> 01:28:32,639
illustration of

2255
01:28:32,639 --> 01:28:36,880
how icn could work or could be leveraged

2256
01:28:37,120 --> 01:28:38,239
yeah i mean

2257
01:28:38,239 --> 01:28:40,239
this is way less messy than doing

2258
01:28:40,239 --> 01:28:42,000
similar things in the ip world because

2259
01:28:42,000 --> 01:28:43,840
of the symmetric routing properties of

2260
01:28:43,840 --> 01:28:47,440
our icn protocols right

2261
01:28:51,199 --> 01:28:55,559
okay should we move on

2262
01:29:06,480 --> 01:29:07,920
okay so i'm

2263
01:29:07,920 --> 01:29:09,600
going to the next one

2264
01:29:09,600 --> 01:29:13,120
so one of the reasons we

2265
01:29:13,120 --> 01:29:15,040
put up past steering on the agenda was

2266
01:29:15,040 --> 01:29:17,040
actually that um so when dave and i were

2267
01:29:17,040 --> 01:29:18,560
discussing um

2268
01:29:18,560 --> 01:29:21,120
how to redesign

2269
01:29:21,120 --> 01:29:23,040
reflexive forwarding

2270
01:29:23,040 --> 01:29:25,360
parsley was one of the candidates but in

2271
01:29:25,360 --> 01:29:28,320
the end we decided

2272
01:29:28,320 --> 01:29:30,320
not to use it

2273
01:29:30,320 --> 01:29:31,600
so this is

2274
01:29:31,600 --> 01:29:35,040
about reflexive forwarding for ccnax and

2275
01:29:35,040 --> 01:29:36,719
ndn

2276
01:29:36,719 --> 01:29:40,080
and um so let me just

2277
01:29:40,080 --> 01:29:44,400
talk a bit about um the motivation so um

2278
01:29:44,400 --> 01:29:46,560
i mean there are many demonstrated

2279
01:29:46,560 --> 01:29:48,400
scenarios where you know i see an

2280
01:29:48,400 --> 01:29:50,960
interest data is just fine very useful

2281
01:29:50,960 --> 01:29:53,679
so like admins

2282
01:29:53,679 --> 01:29:54,719
you know

2283
01:29:54,719 --> 01:29:56,480
data science

2284
01:29:56,480 --> 01:29:59,920
environments but also iot and

2285
01:29:59,920 --> 01:30:02,159
multimedia streaming and so on

2286
01:30:02,159 --> 01:30:04,400
but there are also other scenarios where

2287
01:30:04,400 --> 01:30:06,480
it's not quite sufficient so when you

2288
01:30:06,480 --> 01:30:08,000
would think about how would we for

2289
01:30:08,000 --> 01:30:10,480
example do web over icn so something

2290
01:30:10,480 --> 01:30:12,480
like restful communication

2291
01:30:12,480 --> 01:30:14,480
um so i'm going to explain why that's a

2292
01:30:14,480 --> 01:30:15,760
problem or

2293
01:30:15,760 --> 01:30:18,239
things like remote method invocation

2294
01:30:18,239 --> 01:30:20,639
or like maybe phoning home scenarios in

2295
01:30:20,639 --> 01:30:22,239
the iot world or peer state

2296
01:30:22,239 --> 01:30:23,679
synchronization

2297
01:30:23,679 --> 01:30:25,840
so often in this scenario you need

2298
01:30:25,840 --> 01:30:28,800
something like the ability to push data

2299
01:30:28,800 --> 01:30:32,320
uh to somewhere and um or you want to

2300
01:30:32,320 --> 01:30:35,280
have it like it's like a sequence of um

2301
01:30:35,280 --> 01:30:38,800
say um interactions with like restful

2302
01:30:38,800 --> 01:30:40,719
semantics and

2303
01:30:40,719 --> 01:30:42,960
so you need to establish some state and

2304
01:30:42,960 --> 01:30:44,800
pass some parameters

2305
01:30:44,800 --> 01:30:47,360
for every request and so on

2306
01:30:47,360 --> 01:30:50,159
and so these are of course relevant uh

2307
01:30:50,159 --> 01:30:52,719
use cases and so i mean in the past

2308
01:30:52,719 --> 01:30:54,320
research has tried to

2309
01:30:54,320 --> 01:30:56,880
somehow um you know

2310
01:30:56,880 --> 01:30:59,440
realize them sometimes with

2311
01:30:59,440 --> 01:31:02,080
say maybe if i can say so maybe like

2312
01:31:02,080 --> 01:31:03,280
some some

2313
01:31:03,280 --> 01:31:05,120
hacky approaches

2314
01:31:05,120 --> 01:31:07,679
and so the goal for our work here was to

2315
01:31:07,679 --> 01:31:09,679
enable these scenarios

2316
01:31:09,679 --> 01:31:10,960
in a way that

2317
01:31:10,960 --> 01:31:13,600
doesn't completely contradict say all

2318
01:31:13,600 --> 01:31:16,159
the icn paradigms that we

2319
01:31:16,159 --> 01:31:19,120
enjoy so much so um

2320
01:31:19,120 --> 01:31:21,600
having no source addresses um flow

2321
01:31:21,600 --> 01:31:23,679
balance and so on

2322
01:31:23,679 --> 01:31:27,120
so we we think that so this scheme here

2323
01:31:27,120 --> 01:31:28,960
could be a foundation for these

2324
01:31:28,960 --> 01:31:31,040
scenarios and possibly

2325
01:31:31,040 --> 01:31:32,639
others as well

2326
01:31:32,639 --> 01:31:35,280
and so restful icn i think that's

2327
01:31:35,280 --> 01:31:37,679
something that would be needed in say

2328
01:31:37,679 --> 01:31:39,920
anything that has to do with web in the

2329
01:31:39,920 --> 01:31:42,320
future for example

2330
01:31:42,320 --> 01:31:44,719
so what's the problem uh for for these

2331
01:31:44,719 --> 01:31:47,760
kinds of uh interactions so take web for

2332
01:31:47,760 --> 01:31:48,880
example

2333
01:31:48,880 --> 01:31:50,960
uh when you when you do a restful

2334
01:31:50,960 --> 01:31:54,080
communication you um set up a connection

2335
01:31:54,080 --> 01:31:55,520
to some server

2336
01:31:55,520 --> 01:31:58,719
you often transfer many input parameters

2337
01:31:58,719 --> 01:32:01,520
um authentication authorization some

2338
01:32:01,520 --> 01:32:03,520
kind of tokens and so on

2339
01:32:03,520 --> 01:32:05,760
and quite often you you do this in with

2340
01:32:05,760 --> 01:32:08,159
every request so something like cookies

2341
01:32:08,159 --> 01:32:09,679
and so on

2342
01:32:09,679 --> 01:32:12,480
and so if you look into how

2343
01:32:12,480 --> 01:32:16,320
like web requests look like today um so

2344
01:32:16,320 --> 01:32:19,440
um the the header fields and sometimes

2345
01:32:19,440 --> 01:32:20,719
also the the

2346
01:32:20,719 --> 01:32:22,480
size of the body

2347
01:32:22,480 --> 01:32:26,320
um is really quite large and um so you

2348
01:32:26,320 --> 01:32:29,600
wouldn't put this into an interest

2349
01:32:29,600 --> 01:32:31,199
if you can avoid it so that wouldn't

2350
01:32:31,199 --> 01:32:33,679
really make sense

2351
01:32:33,679 --> 01:32:35,040
and

2352
01:32:35,040 --> 01:32:37,040
another example is

2353
01:32:37,040 --> 01:32:39,120
remote method indication so for

2354
01:32:39,120 --> 01:32:41,199
distributed computing another

2355
01:32:41,199 --> 01:32:42,800
use case where i see n gets more

2356
01:32:42,800 --> 01:32:44,159
relevant

2357
01:32:44,159 --> 01:32:46,080
so you actually think about how would i

2358
01:32:46,080 --> 01:32:47,920
include my authentication information

2359
01:32:47,920 --> 01:32:50,159
how would i include like potentially

2360
01:32:50,159 --> 01:32:52,560
large data sets that are needed for some

2361
01:32:52,560 --> 01:32:56,000
kind of computation on the server side

2362
01:32:56,000 --> 01:32:58,480
and so on

2363
01:32:59,199 --> 01:33:01,440
and

2364
01:33:01,760 --> 01:33:03,360
then yeah you you

2365
01:33:03,360 --> 01:33:05,120
so the way that you would typically do

2366
01:33:05,120 --> 01:33:06,080
this is

2367
01:33:06,080 --> 01:33:08,880
enable some multi-way handshakes so for

2368
01:33:08,880 --> 01:33:10,080
example for

2369
01:33:10,080 --> 01:33:12,719
rmi you would maybe like want to fetch

2370
01:33:12,719 --> 01:33:14,960
the arguments somehow if you want to do

2371
01:33:14,960 --> 01:33:16,880
it in an icn

2372
01:33:16,880 --> 01:33:19,040
compatible way and maybe then perform

2373
01:33:19,040 --> 01:33:21,600
some authorization

2374
01:33:21,600 --> 01:33:23,520
and um

2375
01:33:23,520 --> 01:33:26,000
then other scenarios where you could

2376
01:33:26,000 --> 01:33:26,960
um

2377
01:33:26,960 --> 01:33:29,520
uh utilize multi-way handshakes when you

2378
01:33:29,520 --> 01:33:31,600
do iot and you have like phone home

2379
01:33:31,600 --> 01:33:34,320
scenarios so sometimes you like have

2380
01:33:34,320 --> 01:33:37,520
something to tell to your home base

2381
01:33:37,520 --> 01:33:40,080
um but um

2382
01:33:40,080 --> 01:33:43,199
yeah you you don't want um like the say

2383
01:33:43,199 --> 01:33:45,679
we say cloud-based server to pull you

2384
01:33:45,679 --> 01:33:47,360
all the time but you want to notify the

2385
01:33:47,360 --> 01:33:49,120
server and then you want to serve so to

2386
01:33:49,120 --> 01:33:50,719
fetch the data from you

2387
01:33:50,719 --> 01:33:52,639
so there you would utilize multi-way

2388
01:33:52,639 --> 01:33:53,679
handshakes

2389
01:33:53,679 --> 01:33:55,600
or for any type of peer state

2390
01:33:55,600 --> 01:33:57,760
synchronization where you need at least

2391
01:33:57,760 --> 01:33:59,920
three handwag handshakes to do this

2392
01:33:59,920 --> 01:34:02,560
reliably

2393
01:34:02,560 --> 01:34:04,320
and so the question is okay how how

2394
01:34:04,320 --> 01:34:06,080
would what we deal with all these

2395
01:34:06,080 --> 01:34:09,440
scenarios in icn and um okay we have

2396
01:34:09,440 --> 01:34:10,880
seen some

2397
01:34:10,880 --> 01:34:13,840
say uh proposals where people just stuff

2398
01:34:13,840 --> 01:34:16,239
in additional parameters into interest

2399
01:34:16,239 --> 01:34:18,080
messages

2400
01:34:18,080 --> 01:34:20,719
why is this not a good idea well

2401
01:34:20,719 --> 01:34:23,280
when we want to like

2402
01:34:23,280 --> 01:34:25,520
employ congestion control based

2403
01:34:25,520 --> 01:34:26,320
on

2404
01:34:26,320 --> 01:34:28,080
say the data object

2405
01:34:28,080 --> 01:34:30,719
size and rate

2406
01:34:30,719 --> 01:34:33,040
it could be detrimental to um you know

2407
01:34:33,040 --> 01:34:35,920
just send uncontrolled um interest was

2408
01:34:35,920 --> 01:34:38,960
very huge

2409
01:34:39,840 --> 01:34:42,000
message sizes

2410
01:34:42,000 --> 01:34:44,719
also um well if you think about these

2411
01:34:44,719 --> 01:34:46,960
rmi scenario so like client server

2412
01:34:46,960 --> 01:34:48,400
communication

2413
01:34:48,400 --> 01:34:51,119
if you just you know push a lot of data

2414
01:34:51,119 --> 01:34:53,679
to the server and that the server needs

2415
01:34:53,679 --> 01:34:55,280
to analyze to make a decision whether

2416
01:34:55,280 --> 01:34:57,360
this is a valid request or not

2417
01:34:57,360 --> 01:34:59,760
well this opens the door for

2418
01:34:59,760 --> 01:35:01,840
say well-known computational overload

2419
01:35:01,840 --> 01:35:03,440
attacks and you wouldn't want to do this

2420
01:35:03,440 --> 01:35:06,000
you want to give the server

2421
01:35:06,000 --> 01:35:07,920
say more control in what he wants to

2422
01:35:07,920 --> 01:35:10,000
accept and and what not

2423
01:35:10,000 --> 01:35:12,000
also of course if you

2424
01:35:12,000 --> 01:35:13,440
think about pending interest on

2425
01:35:13,440 --> 01:35:15,920
forwarders that would mean extra state

2426
01:35:15,920 --> 01:35:18,080
and if interest are too big that they

2427
01:35:18,080 --> 01:35:20,159
get fragmented that's also highly

2428
01:35:20,159 --> 01:35:22,879
undesirable

2429
01:35:23,520 --> 01:35:25,760
and okay you could say if you want to do

2430
01:35:25,760 --> 01:35:27,760
multi handshakes

2431
01:35:27,760 --> 01:35:29,280
okay let's just

2432
01:35:29,280 --> 01:35:30,239
you know

2433
01:35:30,239 --> 01:35:32,880
include some kind of

2434
01:35:32,880 --> 01:35:35,840
icn name into the interest that the

2435
01:35:35,840 --> 01:35:39,199
prusa can then use to query additional

2436
01:35:39,199 --> 01:35:41,199
data

2437
01:35:41,199 --> 01:35:43,760
so the issue with that is um

2438
01:35:43,760 --> 01:35:46,000
so suddenly you would require consumers

2439
01:35:46,000 --> 01:35:48,239
to reveal something like a source

2440
01:35:48,239 --> 01:35:50,080
address or a source name

2441
01:35:50,080 --> 01:35:52,880
which um well normally we wouldn't have

2442
01:35:52,880 --> 01:35:55,600
to do in icn and i think we it's quite a

2443
01:35:55,600 --> 01:35:58,000
desirable feature for many reasons so

2444
01:35:58,000 --> 01:36:00,880
you could say maybe you do anonymity but

2445
01:36:00,880 --> 01:36:01,760
also

2446
01:36:01,760 --> 01:36:04,080
uh consumer mobility uh becomes more

2447
01:36:04,080 --> 01:36:06,400
difficult right when and

2448
01:36:06,400 --> 01:36:08,080
when we don't have source addresses it's

2449
01:36:08,080 --> 01:36:11,199
very easy to move the consumer but

2450
01:36:11,199 --> 01:36:12,880
like having a routable

2451
01:36:12,880 --> 01:36:14,719
address that our name that the server

2452
01:36:14,719 --> 01:36:16,960
needs to know makes this

2453
01:36:16,960 --> 01:36:19,600
way harder

2454
01:36:20,080 --> 01:36:21,679
and

2455
01:36:21,679 --> 01:36:22,840
so it

2456
01:36:22,840 --> 01:36:24,960
also uh would probably result in quite

2457
01:36:24,960 --> 01:36:26,800
complicated state machines if you have

2458
01:36:26,800 --> 01:36:27,520
to

2459
01:36:27,520 --> 01:36:29,440
deal with like multiple exchanges in

2460
01:36:29,440 --> 01:36:33,280
parallel uh and so on

2461
01:36:33,679 --> 01:36:36,239
and so which reflects the forwarding we

2462
01:36:36,239 --> 01:36:37,360
try to

2463
01:36:37,360 --> 01:36:38,560
overcome

2464
01:36:38,560 --> 01:36:41,840
these issues and

2465
01:36:41,840 --> 01:36:45,280
basically make it possible for a

2466
01:36:45,280 --> 01:36:48,159
producer or a server

2467
01:36:48,159 --> 01:36:51,040
to to ask for additional data

2468
01:36:51,040 --> 01:36:53,119
that it needs to

2469
01:36:53,119 --> 01:36:54,480
perform some

2470
01:36:54,480 --> 01:36:56,960
transaction perhaps

2471
01:36:56,960 --> 01:36:58,960
um but we don't want to do it in a way

2472
01:36:58,960 --> 01:37:01,679
that the suddenly the server has to know

2473
01:37:01,679 --> 01:37:05,040
some kind of routable prefix or

2474
01:37:05,040 --> 01:37:06,960
like stable name for the

2475
01:37:06,960 --> 01:37:09,440
for the consumer

2476
01:37:09,440 --> 01:37:10,400
and

2477
01:37:10,400 --> 01:37:11,600
um so

2478
01:37:11,600 --> 01:37:13,280
what we want to do is

2479
01:37:13,280 --> 01:37:14,400
basically

2480
01:37:14,400 --> 01:37:16,639
allow the server to send a what we call

2481
01:37:16,639 --> 01:37:19,840
reflexive interest back to the consumer

2482
01:37:19,840 --> 01:37:22,000
leveraging the state in the forwarding

2483
01:37:22,000 --> 01:37:22,880
system

2484
01:37:22,880 --> 01:37:25,679
that an initial interest created so you

2485
01:37:25,679 --> 01:37:28,080
send an interest to a server somehow

2486
01:37:28,080 --> 01:37:28,880
this

2487
01:37:28,880 --> 01:37:31,360
allows the server to implicitly get back

2488
01:37:31,360 --> 01:37:32,239
to you

2489
01:37:32,239 --> 01:37:35,360
but it doesn't need to have a um

2490
01:37:35,360 --> 01:37:36,719
routable and

2491
01:37:36,719 --> 01:37:38,960
stable source address for the for the

2492
01:37:38,960 --> 01:37:41,440
consumer

2493
01:37:41,679 --> 01:37:44,239
and also we want to couple the state

2494
01:37:44,239 --> 01:37:47,199
that is needed for these say interim

2495
01:37:47,199 --> 01:37:49,600
interests data exchanges in the opposite

2496
01:37:49,600 --> 01:37:52,960
direction to the overall state of the

2497
01:37:52,960 --> 01:37:56,639
general interest data exchange

2498
01:37:56,880 --> 01:37:58,000
and

2499
01:37:58,000 --> 01:38:00,719
yeah this is how it maybe it's

2500
01:38:00,719 --> 01:38:02,719
better to explain it with a picture um

2501
01:38:02,719 --> 01:38:05,280
this is um how you could ex explain the

2502
01:38:05,280 --> 01:38:07,840
general operation so you a consumer

2503
01:38:07,840 --> 01:38:10,480
would send an initial interest

2504
01:38:10,480 --> 01:38:12,000
and um

2505
01:38:12,000 --> 01:38:14,960
so this has the like a usual the usual

2506
01:38:14,960 --> 01:38:18,080
icn name to identify the

2507
01:38:18,080 --> 01:38:20,480
say named object on a server

2508
01:38:20,480 --> 01:38:23,520
but has additional information um

2509
01:38:23,520 --> 01:38:25,600
so a

2510
01:38:25,600 --> 01:38:27,760
reflexive name prefix

2511
01:38:27,760 --> 01:38:28,719
that

2512
01:38:28,719 --> 01:38:31,520
we then use to get back to the

2513
01:38:31,520 --> 01:38:32,639
consumer

2514
01:38:32,639 --> 01:38:34,719
so

2515
01:38:34,719 --> 01:38:36,320
let's just assume that this interest

2516
01:38:36,320 --> 01:38:39,920
arrives at the producer and so it

2517
01:38:39,920 --> 01:38:42,560
enables the producer to maybe check

2518
01:38:42,560 --> 01:38:45,119
some initial parameters and

2519
01:38:45,119 --> 01:38:46,239
then

2520
01:38:46,239 --> 01:38:49,199
decide um whether it wants to

2521
01:38:49,199 --> 01:38:51,119
continue with this interaction and fetch

2522
01:38:51,119 --> 01:38:53,199
additional data and this could be

2523
01:38:53,199 --> 01:38:55,920
several interactions not only one

2524
01:38:55,920 --> 01:38:56,960
and then

2525
01:38:56,960 --> 01:38:58,800
make maybe step boys decisions how to

2526
01:38:58,800 --> 01:39:01,920
move on what else is needed and so on

2527
01:39:01,920 --> 01:39:03,920
so rnp is this

2528
01:39:03,920 --> 01:39:05,920
reflexive name prefix that we want to

2529
01:39:05,920 --> 01:39:07,360
communicate

2530
01:39:07,360 --> 01:39:09,520
and then so once the

2531
01:39:09,520 --> 01:39:10,320
say

2532
01:39:10,320 --> 01:39:13,360
reflexive data has arrived

2533
01:39:13,360 --> 01:39:16,239
this would enable the producer to kind

2534
01:39:16,239 --> 01:39:18,639
of com do the computation or complete

2535
01:39:18,639 --> 01:39:20,400
the transaction and then

2536
01:39:20,400 --> 01:39:23,760
uh return a regular data object

2537
01:39:23,760 --> 01:39:27,840
d1 here in in the end

2538
01:39:29,280 --> 01:39:30,159
and

2539
01:39:30,159 --> 01:39:30,880
i

2540
01:39:30,880 --> 01:39:32,560
see thomas in the queue yeah please go

2541
01:39:32,560 --> 01:39:34,800
ahead

2542
01:39:34,880 --> 01:39:37,520
so if i look if hello if i look at this

2543
01:39:37,520 --> 01:39:40,159
picture then i would

2544
01:39:40,159 --> 01:39:43,679
expect that any consumer is able to send

2545
01:39:43,679 --> 01:39:47,440
to a single producer

2546
01:39:47,840 --> 01:39:50,239
such a such a request with a reflexive

2547
01:39:50,239 --> 01:39:52,960
name prefix which means it looks for me

2548
01:39:52,960 --> 01:39:55,760
to me like a very very nice dos attack

2549
01:39:55,760 --> 01:39:58,159
vector isn't it so if you have a if you

2550
01:39:58,159 --> 01:40:00,400
have a botnet you send uh

2551
01:40:00,400 --> 01:40:03,520
for many places you send this

2552
01:40:03,520 --> 01:40:04,560
rnp

2553
01:40:04,560 --> 01:40:07,679
x1 and r and x1 is actually your your

2554
01:40:07,679 --> 01:40:08,800
victim

2555
01:40:08,800 --> 01:40:11,040
and then your your um

2556
01:40:11,040 --> 01:40:13,679
yeah it's pretty well in the game

2557
01:40:13,679 --> 01:40:15,280
that's something that you uh we have to

2558
01:40:15,280 --> 01:40:17,199
avoid of course um so maybe let me

2559
01:40:17,199 --> 01:40:19,119
continue with the explanation and then i

2560
01:40:19,119 --> 01:40:23,040
think it becomes clear um

2561
01:40:23,040 --> 01:40:25,360
so in the previous version that

2562
01:40:25,360 --> 01:40:26,960
we talked about

2563
01:40:26,960 --> 01:40:29,280
some meetings back

2564
01:40:29,280 --> 01:40:31,760
the system worked in a way that

2565
01:40:31,760 --> 01:40:33,440
we actually

2566
01:40:33,440 --> 01:40:36,320
expected forwarders

2567
01:40:36,320 --> 01:40:38,800
to install

2568
01:40:38,800 --> 01:40:40,320
like

2569
01:40:40,320 --> 01:40:44,080
a fip entry in a say separate database

2570
01:40:44,080 --> 01:40:47,360
that would then later allow them

2571
01:40:47,360 --> 01:40:50,560
to forward these reflexive interest

2572
01:40:50,560 --> 01:40:53,040
back to the consumer

2573
01:40:53,040 --> 01:40:54,000
and

2574
01:40:54,000 --> 01:40:56,239
so this kind of works you can

2575
01:40:56,239 --> 01:40:57,679
do it this way

2576
01:40:57,679 --> 01:40:59,600
and

2577
01:40:59,600 --> 01:41:00,400
so

2578
01:41:00,400 --> 01:41:01,520
it's

2579
01:41:01,520 --> 01:41:02,960
the the

2580
01:41:02,960 --> 01:41:05,360
say forwarding information here is still

2581
01:41:05,360 --> 01:41:08,560
bound to this um say outer interest data

2582
01:41:08,560 --> 01:41:10,239
exchange

2583
01:41:10,239 --> 01:41:11,119
and

2584
01:41:11,119 --> 01:41:13,280
so when for example um

2585
01:41:13,280 --> 01:41:15,760
the like d1 data object gets sent back

2586
01:41:15,760 --> 01:41:17,920
then the forwarders would also remove

2587
01:41:17,920 --> 01:41:20,239
the the this uh

2588
01:41:20,239 --> 01:41:22,080
reflexive

2589
01:41:22,080 --> 01:41:23,840
fib information

2590
01:41:23,840 --> 01:41:26,080
um but of course it has the disadvantage

2591
01:41:26,080 --> 01:41:28,639
that you have to maintain this

2592
01:41:28,639 --> 01:41:31,199
extra data structure and

2593
01:41:31,199 --> 01:41:33,760
manipulate um the the forward

2594
01:41:33,760 --> 01:41:36,880
information base uh and so on

2595
01:41:36,880 --> 01:41:40,080
and that did so we we thought about okay

2596
01:41:40,080 --> 01:41:42,239
how could we maybe make this um a bit

2597
01:41:42,239 --> 01:41:44,960
more elegant um a bit more if it's maybe

2598
01:41:44,960 --> 01:41:46,480
easier to implement

2599
01:41:46,480 --> 01:41:47,920
as well

2600
01:41:47,920 --> 01:41:49,600
and so

2601
01:41:49,600 --> 01:41:50,480
the

2602
01:41:50,480 --> 01:41:52,400
current version

2603
01:41:52,400 --> 01:41:55,199
was actually inspired by

2604
01:41:55,199 --> 01:41:57,520
the pit token approach that

2605
01:41:57,520 --> 01:42:01,600
the high speed ndn dpdk forwarder used

2606
01:42:01,600 --> 01:42:04,080
this was published in a paper

2607
01:42:04,080 --> 01:42:07,280
at icn 2020

2608
01:42:07,280 --> 01:42:09,920
and this is the system that edmund

2609
01:42:09,920 --> 01:42:11,440
talked about

2610
01:42:11,440 --> 01:42:12,480
earlier

2611
01:42:12,480 --> 01:42:13,360
so in

2612
01:42:13,360 --> 01:42:16,159
um high speed four borders um you have

2613
01:42:16,159 --> 01:42:18,880
additional uh interesting challenges um

2614
01:42:18,880 --> 01:42:21,679
so you often have um charlotte pits

2615
01:42:21,679 --> 01:42:24,159
because you have multi multi-core

2616
01:42:24,159 --> 01:42:26,840
forwarding and you want to give the

2617
01:42:26,840 --> 01:42:31,360
forwarders um an efficient way um

2618
01:42:31,360 --> 01:42:34,080
to map and an incoming data object to

2619
01:42:34,080 --> 01:42:36,320
the um like

2620
01:42:36,320 --> 01:42:38,880
to the correct picked instance in a

2621
01:42:38,880 --> 01:42:41,520
charted system

2622
01:42:41,520 --> 01:42:43,679
and um so

2623
01:42:43,679 --> 01:42:46,639
we thought um okay pit tokens which has

2624
01:42:46,639 --> 01:42:47,840
been used for that

2625
01:42:47,840 --> 01:42:51,360
um is probably a useful feature anyway

2626
01:42:51,360 --> 01:42:54,320
so for high-speed forwarding it's

2627
01:42:54,320 --> 01:42:56,960
it's needed for these multi-core sharded

2628
01:42:56,960 --> 01:42:58,880
pit systems

2629
01:42:58,880 --> 01:42:59,679
and

2630
01:42:59,679 --> 01:43:02,480
let's leverage that and so what we have

2631
01:43:02,480 --> 01:43:05,360
done here is um so we defined like two

2632
01:43:05,360 --> 01:43:07,520
um two tokens so one in the forward

2633
01:43:07,520 --> 01:43:10,719
direction that we say use in the initial

2634
01:43:10,719 --> 01:43:13,679
interest we call

2635
01:43:13,679 --> 01:43:15,600
forward direction pit token

2636
01:43:15,600 --> 01:43:18,080
fpt

2637
01:43:18,400 --> 01:43:19,520
and

2638
01:43:19,520 --> 01:43:21,199
then another one for the reverse

2639
01:43:21,199 --> 01:43:22,639
direction that

2640
01:43:22,639 --> 01:43:25,119
is then um

2641
01:43:25,119 --> 01:43:27,920
yeah kind of leveraging the this uh pit

2642
01:43:27,920 --> 01:43:30,960
state um that gets established uh

2643
01:43:30,960 --> 01:43:33,199
in the in the forwarding direction first

2644
01:43:33,199 --> 01:43:35,440
so maybe uh let's look at the picture um

2645
01:43:35,440 --> 01:43:36,960
as well

2646
01:43:36,960 --> 01:43:40,239
so here um we have um the consumer

2647
01:43:40,239 --> 01:43:43,440
sending the i1 interest so with a

2648
01:43:43,440 --> 01:43:47,199
regular prefix and also with a

2649
01:43:47,199 --> 01:43:49,520
reflexive name prefix so that's a prefix

2650
01:43:49,520 --> 01:43:51,520
that um

2651
01:43:51,520 --> 01:43:53,199
the consumer

2652
01:43:53,199 --> 01:43:55,040
chooses

2653
01:43:55,040 --> 01:43:58,080
and um so it was like um

2654
01:43:58,080 --> 01:43:58,880
like

2655
01:43:58,880 --> 01:44:01,440
like significant uniqueness

2656
01:44:01,440 --> 01:44:03,280
and and

2657
01:44:03,280 --> 01:44:06,719
so when a forwarder gets a interest was

2658
01:44:06,719 --> 01:44:09,760
a reflexive name prefix

2659
01:44:09,760 --> 01:44:12,400
it's supposed to create this

2660
01:44:12,400 --> 01:44:15,040
forward pit token

2661
01:44:15,040 --> 01:44:16,320
and

2662
01:44:16,320 --> 01:44:18,800
install pit state

2663
01:44:18,800 --> 01:44:20,400
for that

2664
01:44:20,400 --> 01:44:23,360
so we we we have our regular pit uh

2665
01:44:23,360 --> 01:44:26,320
entry uh maybe with an additional um

2666
01:44:26,320 --> 01:44:27,520
good additional field i mean the

2667
01:44:27,520 --> 01:44:29,920
different ways to really implement this

2668
01:44:29,920 --> 01:44:34,080
and um so this contains the

2669
01:44:34,080 --> 01:44:36,239
information about the

2670
01:44:36,239 --> 01:44:38,080
reflective name prefix

2671
01:44:38,080 --> 01:44:41,760
and then when we get the i2 in interest

2672
01:44:41,760 --> 01:44:44,560
later we can

2673
01:44:44,560 --> 01:44:49,119
then use the the same token id um to

2674
01:44:49,119 --> 01:44:51,520
locate the the pit entry and then uh

2675
01:44:51,520 --> 01:44:53,360
make a decision where to like forward

2676
01:44:53,360 --> 01:44:54,159
the

2677
01:44:54,159 --> 01:44:55,360
interest

2678
01:44:55,360 --> 01:44:57,040
to

2679
01:44:57,040 --> 01:44:58,960
so that means the the producer is

2680
01:44:58,960 --> 01:45:01,119
receiving these interests and is then

2681
01:45:01,119 --> 01:45:03,840
kind of mirroring

2682
01:45:03,840 --> 01:45:06,880
this forward pit token into this reverse

2683
01:45:06,880 --> 01:45:08,000
pit token

2684
01:45:08,000 --> 01:45:08,960
field

2685
01:45:08,960 --> 01:45:11,040
and then sends the

2686
01:45:11,040 --> 01:45:12,639
reflexive interest

2687
01:45:12,639 --> 01:45:14,840
back to the original

2688
01:45:14,840 --> 01:45:17,520
consumer and then

2689
01:45:17,520 --> 01:45:19,760
the the forwarders

2690
01:45:19,760 --> 01:45:22,800
would be able to just use this

2691
01:45:22,800 --> 01:45:25,920
pit look up and and make the decision um

2692
01:45:25,920 --> 01:45:31,080
where to forward the interest to thomas

2693
01:45:31,760 --> 01:45:32,639
um

2694
01:45:32,639 --> 01:45:35,280
this looks to me as if you assume that

2695
01:45:35,280 --> 01:45:38,320
the forward is on your on your reflexive

2696
01:45:38,320 --> 01:45:41,440
way back so this is with interest two

2697
01:45:41,440 --> 01:45:43,440
are actually

2698
01:45:43,440 --> 01:45:45,520
have seen interest one

2699
01:45:45,520 --> 01:45:46,719
absolutely

2700
01:45:46,719 --> 01:45:48,719
but this is absolutely this isn't

2701
01:45:48,719 --> 01:45:50,639
obvious to me because

2702
01:45:50,639 --> 01:45:52,800
i mean if you if you're forward from

2703
01:45:52,800 --> 01:45:55,199
from the producer interest one using the

2704
01:45:55,199 --> 01:45:58,159
prefix x1 then you're using the flips in

2705
01:45:58,159 --> 01:46:00,159
between and the hips are forward

2706
01:46:00,159 --> 01:46:02,320
directing and they are not they need not

2707
01:46:02,320 --> 01:46:04,400
be the same i mean they they need to be

2708
01:46:04,400 --> 01:46:06,639
the mirror of the other fips on the on

2709
01:46:06,639 --> 01:46:09,119
the on the on the way uh

2710
01:46:09,119 --> 01:46:12,960
uh to the producer so it's so metric but

2711
01:46:12,960 --> 01:46:15,360
that's what i'm saying right

2712
01:46:15,360 --> 01:46:18,560
on the reflexive interest going back

2713
01:46:18,560 --> 01:46:20,880
sorry

2714
01:46:21,760 --> 01:46:24,159
say again dave

2715
01:46:24,159 --> 01:46:26,480
that's why we don't use the fib

2716
01:46:26,480 --> 01:46:28,880
on the reflex of interest going back we

2717
01:46:28,880 --> 01:46:31,280
map directly onto the pit entry of the

2718
01:46:31,280 --> 01:46:34,159
original interest

2719
01:46:34,800 --> 01:46:35,679
okay

2720
01:46:35,679 --> 01:46:36,719
so the

2721
01:46:36,719 --> 01:46:38,719
incoming face

2722
01:46:38,719 --> 01:46:42,080
to forward the reflex of interest

2723
01:46:42,080 --> 01:46:45,520
yeah so this absolutely uh relies on

2724
01:46:45,520 --> 01:46:47,440
symmetric forwarding and if you don't

2725
01:46:47,440 --> 01:46:50,638
have it then this wouldn't work

2726
01:46:51,520 --> 01:46:53,679
ken

2727
01:46:53,760 --> 01:46:56,639
but now so now you are using

2728
01:46:56,639 --> 01:46:59,360
the pit to forward interests

2729
01:46:59,360 --> 01:47:01,679
is that right it's the same pit or it's

2730
01:47:01,679 --> 01:47:04,400
not a sep or it's a different

2731
01:47:04,400 --> 01:47:06,159
i'm trying to understand the exact

2732
01:47:06,159 --> 01:47:08,320
difference between this and what you had

2733
01:47:08,320 --> 01:47:10,480
before in ripe uh

2734
01:47:10,480 --> 01:47:12,560
rice

2735
01:47:12,560 --> 01:47:15,600
right so previously um we we

2736
01:47:15,600 --> 01:47:18,400
actually had to install say routing

2737
01:47:18,400 --> 01:47:19,920
information

2738
01:47:19,920 --> 01:47:23,280
in the in the forwarders and

2739
01:47:23,280 --> 01:47:25,040
here i mean the different ways to

2740
01:47:25,040 --> 01:47:28,960
implement it but um here basically um

2741
01:47:28,960 --> 01:47:31,280
the forwarders would see that there is

2742
01:47:31,280 --> 01:47:33,520
this rpt field

2743
01:47:33,520 --> 01:47:35,440
and then this would enable them to to

2744
01:47:35,440 --> 01:47:37,280
look up um

2745
01:47:37,280 --> 01:47:40,159
the token uh in in their pit

2746
01:47:40,159 --> 01:47:41,679
okay so so there's a different

2747
01:47:41,679 --> 01:47:44,159
processing path when an interest arrives

2748
01:47:44,159 --> 01:47:47,920
it has one of these uh

2749
01:47:47,920 --> 01:47:48,960
forwarding

2750
01:47:48,960 --> 01:47:51,280
path tokens right

2751
01:47:51,280 --> 01:47:54,239
so um of course this would also require

2752
01:47:54,239 --> 01:47:56,880
a modified forwarder behavior but we

2753
01:47:56,880 --> 01:47:59,520
think these changes are more benign than

2754
01:47:59,520 --> 01:48:01,760
you know

2755
01:48:01,760 --> 01:48:03,360
manipulating the rotting state and

2756
01:48:03,360 --> 01:48:05,679
maintaining separate tables for that

2757
01:48:05,679 --> 01:48:07,760
right i guess i'm just reacting to the

2758
01:48:07,760 --> 01:48:11,840
to calling it a pit entry because it's

2759
01:48:11,840 --> 01:48:13,440
it's really forwarding an interest it's

2760
01:48:13,440 --> 01:48:15,840
not a pending uh in some sense it is a

2761
01:48:15,840 --> 01:48:17,520
pending interest but is it i mean you

2762
01:48:17,520 --> 01:48:18,880
see this as the

2763
01:48:18,880 --> 01:48:23,040
the same data structure is that right

2764
01:48:23,040 --> 01:48:24,159
um

2765
01:48:24,159 --> 01:48:27,280
well so this i2 interest here that goes

2766
01:48:27,280 --> 01:48:29,360
back to the consumer um i mean that's

2767
01:48:29,360 --> 01:48:31,920
first of all it's a regular interest um

2768
01:48:31,920 --> 01:48:35,440
like um except that

2769
01:48:35,520 --> 01:48:35,800
the

2770
01:48:35,800 --> 01:48:38,320
[Music]

2771
01:48:38,320 --> 01:48:40,800
the name that we are asking for um you

2772
01:48:40,800 --> 01:48:43,679
know is this re reflexive name prefix

2773
01:48:43,679 --> 01:48:45,119
that we

2774
01:48:45,119 --> 01:48:49,600
received in in the initial i1 interest

2775
01:48:49,600 --> 01:48:51,600
and

2776
01:48:51,600 --> 01:48:52,400
so

2777
01:48:52,400 --> 01:48:54,480
if it's like mechanically it's it's a

2778
01:48:54,480 --> 01:48:56,239
regular interest it just has an

2779
01:48:56,239 --> 01:48:58,880
additional field rpt field

2780
01:48:58,880 --> 01:49:01,440
and so this enables the forwarder to

2781
01:49:01,440 --> 01:49:03,280
determine okay where do i have to send

2782
01:49:03,280 --> 01:49:04,960
this to

2783
01:49:04,960 --> 01:49:08,639
um but um we don't need to yeah disclose

2784
01:49:08,639 --> 01:49:11,920
any um say globally routable

2785
01:49:11,920 --> 01:49:13,920
name or anything so this is just like

2786
01:49:13,920 --> 01:49:16,800
the rnp is just a label essentially that

2787
01:49:16,800 --> 01:49:20,400
that the consumer generates

2788
01:49:23,360 --> 01:49:25,679
thanks

2789
01:49:26,639 --> 01:49:30,000
right so um

2790
01:49:31,119 --> 01:49:33,520
so these these um

2791
01:49:33,520 --> 01:49:37,040
pit tokens are um typically hot by hop

2792
01:49:37,040 --> 01:49:38,239
um

2793
01:49:38,239 --> 01:49:41,119
extensions or about features in

2794
01:49:41,119 --> 01:49:43,599
the end or the ccnx

2795
01:49:43,599 --> 01:49:44,800
um

2796
01:49:44,800 --> 01:49:46,639
so one question is okay how do these

2797
01:49:46,639 --> 01:49:48,639
names actually look like

2798
01:49:48,639 --> 01:49:50,960
so um

2799
01:49:50,960 --> 01:49:52,719
i didn't really explain it well but um

2800
01:49:52,719 --> 01:49:54,000
so the idea is that you would

2801
01:49:54,000 --> 01:49:57,199
communicate a prefix and

2802
01:49:57,199 --> 01:50:00,080
so under this prefix um

2803
01:50:00,080 --> 01:50:01,520
the consumer could

2804
01:50:01,520 --> 01:50:03,520
like provide different

2805
01:50:03,520 --> 01:50:06,080
like a set of information like a cookie

2806
01:50:06,080 --> 01:50:08,080
username or something it would be

2807
01:50:08,080 --> 01:50:10,639
different different data objects

2808
01:50:10,639 --> 01:50:12,800
and the draft also explains a bit more

2809
01:50:12,800 --> 01:50:14,719
about this like you you could use

2810
01:50:14,719 --> 01:50:17,360
manifests if you have like larger data

2811
01:50:17,360 --> 01:50:19,360
sets and so on

2812
01:50:19,360 --> 01:50:22,400
um but the prefix itself um well it

2813
01:50:22,400 --> 01:50:24,880
would be a new name component in ccnx

2814
01:50:24,880 --> 01:50:27,599
and ndn and

2815
01:50:27,599 --> 01:50:30,159
it's essentially just a random

2816
01:50:30,159 --> 01:50:32,000
128 bit

2817
01:50:32,000 --> 01:50:33,199
number

2818
01:50:33,199 --> 01:50:34,080
so

2819
01:50:34,080 --> 01:50:36,960
we were referring the uuid

2820
01:50:36,960 --> 01:50:40,080
rscs how to generate it

2821
01:50:40,080 --> 01:50:41,040
and

2822
01:50:41,040 --> 01:50:42,560
so it's nothing that has any

2823
01:50:42,560 --> 01:50:46,239
significance outside of this interaction

2824
01:50:46,239 --> 01:50:48,239
and and this is also

2825
01:50:48,239 --> 01:50:49,679
why

2826
01:50:49,679 --> 01:50:51,760
thomas's earlier questions

2827
01:50:51,760 --> 01:50:53,760
this this wouldn't enable you to do any

2828
01:50:53,760 --> 01:50:56,719
kind of reflection attacks

2829
01:50:56,719 --> 01:50:57,440
to

2830
01:50:57,440 --> 01:51:00,719
non-related or third-party entities in

2831
01:51:00,719 --> 01:51:03,280
the network

2832
01:51:04,560 --> 01:51:07,599
and um yeah so again so you could use

2833
01:51:07,599 --> 01:51:10,480
this as a prefix and then construct um

2834
01:51:10,480 --> 01:51:13,360
like different types of of names or

2835
01:51:13,360 --> 01:51:16,400
maybe uh just a manifest that then

2836
01:51:16,400 --> 01:51:19,280
um refers to additional objects and so

2837
01:51:19,280 --> 01:51:21,280
on so this could also be used for like

2838
01:51:21,280 --> 01:51:23,040
like several interactions if you think

2839
01:51:23,040 --> 01:51:25,599
about um say something like web

2840
01:51:25,599 --> 01:51:27,679
interaction where you have multiple uh

2841
01:51:27,679 --> 01:51:29,840
maybe parameters that

2842
01:51:29,840 --> 01:51:31,360
are needed for the

2843
01:51:31,360 --> 01:51:35,400
server to process your request

2844
01:51:36,639 --> 01:51:40,480
and yeah so as we mentioned so there is

2845
01:51:40,480 --> 01:51:41,520
of course

2846
01:51:41,520 --> 01:51:43,119
new node behavior

2847
01:51:43,119 --> 01:51:45,679
required so details

2848
01:51:45,679 --> 01:51:47,920
are in the draft for consumers producers

2849
01:51:47,920 --> 01:51:50,000
and and forwarders

2850
01:51:50,000 --> 01:51:51,840
and um

2851
01:51:51,840 --> 01:51:53,679
but so we haven't really implemented it

2852
01:51:53,679 --> 01:51:55,760
yet but um we think that the forwarder

2853
01:51:55,760 --> 01:51:57,280
modifications

2854
01:51:57,280 --> 01:52:00,960
um well are actually um not as invasive

2855
01:52:00,960 --> 01:52:04,320
as as we had it for the like

2856
01:52:04,320 --> 01:52:05,840
previous version

2857
01:52:05,840 --> 01:52:06,719
so you

2858
01:52:06,719 --> 01:52:09,440
you need this pit token generation when

2859
01:52:09,440 --> 01:52:11,920
you receive this interest as the first

2860
01:52:11,920 --> 01:52:13,840
forwarder

2861
01:52:13,840 --> 01:52:15,280
on the pass

2862
01:52:15,280 --> 01:52:16,639
and when you when you see an interest

2863
01:52:16,639 --> 01:52:19,520
with this reflective name prefix

2864
01:52:19,520 --> 01:52:21,679
and so we think this is maybe a good a

2865
01:52:21,679 --> 01:52:24,480
good approach if you want to cater for

2866
01:52:24,480 --> 01:52:26,880
both like high performance um forwarders

2867
01:52:26,880 --> 01:52:28,400
and just you know standard

2868
01:52:28,400 --> 01:52:30,080
software-based one so it's relatively

2869
01:52:30,080 --> 01:52:32,480
easy tournament but it still

2870
01:52:32,480 --> 01:52:35,119
wouldn't um you know screw up

2871
01:52:35,119 --> 01:52:37,199
performance in these high-performance

2872
01:52:37,199 --> 01:52:39,759
scenarios

2873
01:52:41,119 --> 01:52:42,560
yeah i'm not sure we have to go through

2874
01:52:42,560 --> 01:52:43,520
these

2875
01:52:43,520 --> 01:52:46,239
specifications so but what we

2876
01:52:46,239 --> 01:52:47,280
provided

2877
01:52:47,280 --> 01:52:50,719
encodings for both cc and x um and

2878
01:52:50,719 --> 01:52:52,719
ndn so is slightly different because

2879
01:52:52,719 --> 01:52:53,520
they

2880
01:52:53,520 --> 01:52:55,679
use different

2881
01:52:55,679 --> 01:52:58,679
mechanisms

2882
01:52:59,440 --> 01:53:01,440
and

2883
01:53:01,440 --> 01:53:03,599
maybe let's

2884
01:53:03,599 --> 01:53:06,320
let's talk a bit about what this could

2885
01:53:06,320 --> 01:53:08,080
enable

2886
01:53:08,080 --> 01:53:09,520
um so we talked about remote

2887
01:53:09,520 --> 01:53:11,840
entertainment invocation restful

2888
01:53:11,840 --> 01:53:12,800
and

2889
01:53:12,800 --> 01:53:15,679
and data pull from from sensors

2890
01:53:15,679 --> 01:53:17,280
and

2891
01:53:17,280 --> 01:53:19,840
for rmi we had this

2892
01:53:19,840 --> 01:53:22,719
previous work that we called rise remote

2893
01:53:22,719 --> 01:53:24,840
messenger application for

2894
01:53:24,840 --> 01:53:29,040
icn and so there we would um yeah also

2895
01:53:29,040 --> 01:53:31,599
you use this system because we would

2896
01:53:31,599 --> 01:53:33,360
also have to send some request

2897
01:53:33,360 --> 01:53:36,080
parameters when we want to initiate um a

2898
01:53:36,080 --> 01:53:38,800
remote method invocation

2899
01:53:38,800 --> 01:53:41,440
and um just quickly um the way that it

2900
01:53:41,440 --> 01:53:43,760
would be used there would be that you

2901
01:53:43,760 --> 01:53:47,679
send your initial interest um with the

2902
01:53:47,679 --> 01:53:51,520
reactive name prefix and um then the

2903
01:53:51,520 --> 01:53:54,480
the server kind of fetches the input

2904
01:53:54,480 --> 01:53:57,760
arguments um say one by one

2905
01:53:57,760 --> 01:53:58,880
and

2906
01:53:58,880 --> 01:54:01,360
so in this system then we would have an

2907
01:54:01,360 --> 01:54:03,679
additional interaction you would kind of

2908
01:54:03,679 --> 01:54:06,800
return the data object here with a

2909
01:54:06,800 --> 01:54:09,040
handle that allows you

2910
01:54:09,040 --> 01:54:12,000
to fetch the computation reset result

2911
01:54:12,000 --> 01:54:15,280
later so because um well this we should

2912
01:54:15,280 --> 01:54:17,840
support long lasting computations and so

2913
01:54:17,840 --> 01:54:18,719
on

2914
01:54:18,719 --> 01:54:20,719
and this is a typical example how we

2915
01:54:20,719 --> 01:54:22,639
think this would be used so

2916
01:54:22,639 --> 01:54:24,480
often you have additional things that

2917
01:54:24,480 --> 01:54:26,960
you need to communicate so

2918
01:54:26,960 --> 01:54:28,159
um this

2919
01:54:28,159 --> 01:54:30,400
um fictitious and forwarding scheme

2920
01:54:30,400 --> 01:54:34,840
could just be one element in say a more

2921
01:54:34,840 --> 01:54:38,480
evolved communication pattern

2922
01:54:38,480 --> 01:54:40,800
um i have to wrap up

2923
01:54:40,800 --> 01:54:43,679
quickly and i talked about restful

2924
01:54:43,679 --> 01:54:46,159
already

2925
01:54:46,880 --> 01:54:49,040
and just quickly for this

2926
01:54:49,040 --> 01:54:51,760
iot phoning home scenario

2927
01:54:51,760 --> 01:54:54,239
so assume you have some

2928
01:54:54,239 --> 01:54:56,400
asynchronously generated data and you

2929
01:54:56,400 --> 01:54:58,400
want to get it somewhere

2930
01:54:58,400 --> 01:55:00,000
so you could

2931
01:55:00,000 --> 01:55:02,960
say use the i1 interest to kind of

2932
01:55:02,960 --> 01:55:04,880
notify your

2933
01:55:04,880 --> 01:55:06,719
data sync or

2934
01:55:06,719 --> 01:55:09,040
database or whatever and then this would

2935
01:55:09,040 --> 01:55:11,679
trigger this reflexive interest and then

2936
01:55:11,679 --> 01:55:13,440
fetch the actual

2937
01:55:13,440 --> 01:55:16,080
data item

2938
01:55:17,440 --> 01:55:19,840
okay um

2939
01:55:19,840 --> 01:55:20,719
let's

2940
01:55:20,719 --> 01:55:21,679
maybe

2941
01:55:21,679 --> 01:55:24,480
jump over this um you can

2942
01:55:24,480 --> 01:55:25,679
so this

2943
01:55:25,679 --> 01:55:27,199
so security was kind of one of the

2944
01:55:27,199 --> 01:55:29,599
concerns here um so um there's some

2945
01:55:29,599 --> 01:55:32,719
extended discussion uh in the draft

2946
01:55:32,719 --> 01:55:33,599
and

2947
01:55:33,599 --> 01:55:36,719
what i think we want to convey is that

2948
01:55:36,719 --> 01:55:38,800
while we think this could be

2949
01:55:38,800 --> 01:55:42,639
say a key element for making icn fit for

2950
01:55:42,639 --> 01:55:44,320
future web

2951
01:55:44,320 --> 01:55:48,320
kind of systems um what is also related

2952
01:55:48,320 --> 01:55:50,719
here is key exchange when you want to

2953
01:55:50,719 --> 01:55:53,199
have something like encrypted

2954
01:55:53,199 --> 01:55:54,560
communication

2955
01:55:54,560 --> 01:55:56,960
name privacy and and these things

2956
01:55:56,960 --> 01:55:58,840
you also have to

2957
01:55:58,840 --> 01:56:02,000
convey parameters and you also often

2958
01:56:02,000 --> 01:56:03,760
have to convey something like a cookie

2959
01:56:03,760 --> 01:56:04,719
that

2960
01:56:04,719 --> 01:56:07,520
kind of maybe links to your your your

2961
01:56:07,520 --> 01:56:09,119
session and so on

2962
01:56:09,119 --> 01:56:11,760
so that's pop that's the scheme that we

2963
01:56:11,760 --> 01:56:13,360
think would be useful

2964
01:56:13,360 --> 01:56:16,719
in say many scenarios that you would

2965
01:56:16,719 --> 01:56:18,480
maybe use

2966
01:56:18,480 --> 01:56:20,320
this forwarding scheme to establish some

2967
01:56:20,320 --> 01:56:22,400
state later and then when you have

2968
01:56:22,400 --> 01:56:24,960
something like a session continuation um

2969
01:56:24,960 --> 01:56:27,280
you could like use a cookie

2970
01:56:27,280 --> 01:56:29,280
in the interest in the say what we call

2971
01:56:29,280 --> 01:56:31,520
i want interest to just uh you know

2972
01:56:31,520 --> 01:56:34,000
refer to that previous state

2973
01:56:34,000 --> 01:56:36,080
and so different protocols

2974
01:56:36,080 --> 01:56:37,679
need this or different different

2975
01:56:37,679 --> 01:56:40,000
interaction styles need this so web

2976
01:56:40,000 --> 01:56:41,440
key exchange

2977
01:56:41,440 --> 01:56:44,639
or say secure communication and so on so

2978
01:56:44,639 --> 01:56:46,159
that's something that

2979
01:56:46,159 --> 01:56:48,159
could be like a general

2980
01:56:48,159 --> 01:56:50,159
feature that we want to

2981
01:56:50,159 --> 01:56:52,719
yeah specify uh maybe as an act as a

2982
01:56:52,719 --> 01:56:54,159
next step

2983
01:56:54,159 --> 01:56:55,199
okay

2984
01:56:55,199 --> 01:56:59,040
let me wrap this up um

2985
01:56:59,040 --> 01:57:00,800
we have time for one question yeah

2986
01:57:00,800 --> 01:57:03,199
christian

2987
01:57:03,760 --> 01:57:05,040
hello christine

2988
01:57:05,040 --> 01:57:07,599
you mentioned uh the problem of client

2989
01:57:07,599 --> 01:57:10,560
or consumer ability in the

2990
01:57:10,560 --> 01:57:12,880
in the context of previous work do you

2991
01:57:12,880 --> 01:57:15,040
have any plans of addressing this here

2992
01:57:15,040 --> 01:57:17,280
because as i understand this now also

2993
01:57:17,280 --> 01:57:19,679
doesn't work with the mobile client but

2994
01:57:19,679 --> 01:57:22,480
maybe the client could kind of

2995
01:57:22,480 --> 01:57:25,040
in later interests send information that

2996
01:57:25,040 --> 01:57:26,560
would allow the

2997
01:57:26,560 --> 01:57:29,040
producer to use the same prefix

2998
01:57:29,040 --> 01:57:30,480
different prefixes

2999
01:57:30,480 --> 01:57:32,639
with this with the same suffixes

3000
01:57:32,639 --> 01:57:33,920
like establishing something like a

3001
01:57:33,920 --> 01:57:35,440
namespace

3002
01:57:35,440 --> 01:57:37,440
yeah so you're right i mean

3003
01:57:37,440 --> 01:57:39,119
say if we have

3004
01:57:39,119 --> 01:57:42,320
a moving consumer um so ins so within

3005
01:57:42,320 --> 01:57:43,840
this uh whole

3006
01:57:43,840 --> 01:57:45,920
interaction that would also be a problem

3007
01:57:45,920 --> 01:57:47,520
uh of course

3008
01:57:47,520 --> 01:57:50,719
um but um so what we would

3009
01:57:50,719 --> 01:57:54,159
you could say here is that um so between

3010
01:57:54,159 --> 01:57:56,159
reflexive uh say forwarding uh

3011
01:57:56,159 --> 01:57:57,920
interactions um yeah you could still

3012
01:57:57,920 --> 01:57:59,599
have the usual mobility because you

3013
01:57:59,599 --> 01:58:03,040
wouldn't disclose any stable name and so

3014
01:58:03,040 --> 01:58:07,280
the prefix you um the the record effects

3015
01:58:07,280 --> 01:58:09,360
of prefix would be generated by the

3016
01:58:09,360 --> 01:58:11,760
consumer for for every interaction and

3017
01:58:11,760 --> 01:58:15,119
so um yeah so there it's it's not as bad

3018
01:58:15,119 --> 01:58:18,000
as using these um stable or globally

3019
01:58:18,000 --> 01:58:21,480
routable names

3020
01:58:22,560 --> 01:58:26,719
thanks for the question okay um

3021
01:58:26,719 --> 01:58:28,239
yeah i would be really interested to get

3022
01:58:28,239 --> 01:58:30,400
uh get more feedback

3023
01:58:30,400 --> 01:58:31,280
please

3024
01:58:31,280 --> 01:58:35,719
give it to us on the main list

3025
01:58:37,760 --> 01:58:41,360
and let me bring up our

3026
01:58:41,920 --> 01:58:45,719
chance lights again

3027
01:58:50,239 --> 01:58:54,000
so dave do you want to talk to this

3028
01:59:00,320 --> 01:59:03,480
i'll continue

3029
01:59:03,599 --> 01:59:06,880
uh okay got my audio on so uh just a

3030
01:59:06,880 --> 01:59:08,239
couple things to wrap up we're just

3031
01:59:08,239 --> 01:59:09,760
about out of time but i just want to

3032
01:59:09,760 --> 01:59:12,719
sort of give people a feel for um what's

3033
01:59:12,719 --> 01:59:15,280
happening in the next period before we

3034
01:59:15,280 --> 01:59:17,679
uh get all together again

3035
01:59:17,679 --> 01:59:20,080
so um we did some progress on flick a

3036
01:59:20,080 --> 01:59:23,040
few months ago and it stalled again

3037
01:59:23,040 --> 01:59:24,960
um we really would like

3038
01:59:24,960 --> 01:59:26,560
a lot of things are dependent on having

3039
01:59:26,560 --> 01:59:28,840
a manifest capability in the

3040
01:59:28,840 --> 01:59:31,199
architecture so

3041
01:59:31,199 --> 01:59:33,199
i guess we're just sort of asking hey is

3042
01:59:33,199 --> 01:59:34,320
there anybody out there who can

3043
01:59:34,320 --> 01:59:36,880
potentially help us here uh to try and

3044
01:59:36,880 --> 01:59:40,159
unstick flick and get it to our g last

3045
01:59:40,159 --> 01:59:42,080
call there's still technical work to be

3046
01:59:42,080 --> 01:59:44,719
done it isn't just you know dotting eyes

3047
01:59:44,719 --> 01:59:46,400
and crossing t's here

3048
01:59:46,400 --> 01:59:48,560
so that's number one issue

3049
01:59:48,560 --> 01:59:51,840
um um question by ken on flick i think

3050
01:59:51,840 --> 01:59:53,119
yeah can

3051
01:59:53,119 --> 01:59:54,880
yeah i'm it's not a question i'm just

3052
01:59:54,880 --> 01:59:56,880
saying uh i'm in the process of going

3053
01:59:56,880 --> 01:59:58,800
through it again it's it's much improved

3054
01:59:58,800 --> 01:59:59,840
but i want to be able to give

3055
01:59:59,840 --> 02:00:02,400
substantive comments i will do that uh i

3056
02:00:02,400 --> 02:00:04,159
will bump that up in priority and try to

3057
02:00:04,159 --> 02:00:06,159
get something to the list soon

3058
02:00:06,159 --> 02:00:08,320
that would be great thank you

3059
02:00:08,320 --> 02:00:09,840
um

3060
02:00:09,840 --> 02:00:11,679
we're going to take ping and traceroute

3061
02:00:11,679 --> 02:00:13,520
irsg reviews since last call

3062
02:00:13,520 --> 02:00:15,040
successfully closed and we have an

3063
02:00:15,040 --> 02:00:16,560
updated spec

3064
02:00:16,560 --> 02:00:17,520
um

3065
02:00:17,520 --> 02:00:20,159
dirk is going to do an rg last

3066
02:00:20,159 --> 02:00:22,960
adoption call on path steering uh and

3067
02:00:22,960 --> 02:00:25,199
please give your feedback on on the

3068
02:00:25,199 --> 02:00:26,719
mailing list as to whether this is

3069
02:00:26,719 --> 02:00:28,000
appropriate

3070
02:00:28,000 --> 02:00:29,119
um

3071
02:00:29,119 --> 02:00:32,719
and then two quick things um are our

3072
02:00:32,719 --> 02:00:34,159
sort of

3073
02:00:34,159 --> 02:00:37,440
new work coming in is at a level lower

3074
02:00:37,440 --> 02:00:39,840
than we would like

3075
02:00:39,840 --> 02:00:41,760
our engagement has obviously been hurt

3076
02:00:41,760 --> 02:00:44,239
by all the covet situation and a variety

3077
02:00:44,239 --> 02:00:45,679
of things

3078
02:00:45,679 --> 02:00:46,719
but

3079
02:00:46,719 --> 02:00:49,360
we are not running out of capacity to

3080
02:00:49,360 --> 02:00:51,520
deal with interesting new research work

3081
02:00:51,520 --> 02:00:53,599
that people would like to bring to the

3082
02:00:53,599 --> 02:00:57,119
group for discussion and potentially um

3083
02:00:57,119 --> 02:01:01,119
work among the participants in icnrg so

3084
02:01:01,119 --> 02:01:04,000
please think about bringing your work in

3085
02:01:04,000 --> 02:01:05,599
we may have some interesting

3086
02:01:05,599 --> 02:01:07,440
possibilities for doing joint work with

3087
02:01:07,440 --> 02:01:10,560
the computing in the network group since

3088
02:01:10,560 --> 02:01:13,119
icn protocols do

3089
02:01:13,119 --> 02:01:14,800
actually do a lot of computing and

3090
02:01:14,800 --> 02:01:16,880
intermediaries

3091
02:01:16,880 --> 02:01:18,320
because of the complexities of

3092
02:01:18,320 --> 02:01:21,119
forwarding and potentially

3093
02:01:21,119 --> 02:01:22,719
some of the work we're doing on

3094
02:01:22,719 --> 02:01:26,800
distributed computing fits um in icn as

3095
02:01:26,800 --> 02:01:28,960
well as with that

3096
02:01:28,960 --> 02:01:31,360
and a general question is we will plan

3097
02:01:31,360 --> 02:01:34,480
the meet at itf 114 in philadelphia in

3098
02:01:34,480 --> 02:01:36,719
july but uh if we have enough stuff

3099
02:01:36,719 --> 02:01:38,800
going on uh we're interested in your

3100
02:01:38,800 --> 02:01:40,239
views as to whether we should have

3101
02:01:40,239 --> 02:01:42,800
another interim meeting uh between now

3102
02:01:42,800 --> 02:01:46,639
and uh late july so that's it i'm done

3103
02:01:46,639 --> 02:01:48,560
uh i think dirk and i both thank

3104
02:01:48,560 --> 02:01:51,040
everybody for for your time

3105
02:01:51,040 --> 02:01:53,199
uh we hope to have this face-to-face in

3106
02:01:53,199 --> 02:01:54,239
philly

3107
02:01:54,239 --> 02:01:57,599
um and uh please remember we have a

3108
02:01:57,599 --> 02:01:59,440
annual icn conference coming up in

3109
02:01:59,440 --> 02:02:02,080
september paper registration deadline is

3110
02:02:02,080 --> 02:02:04,480
a couple months away so you have still

3111
02:02:04,480 --> 02:02:06,400
time to work on your papers

3112
02:02:06,400 --> 02:02:09,520
um it's our premier research

3113
02:02:09,520 --> 02:02:11,760
venue for work in the area

3114
02:02:11,760 --> 02:02:14,639
so keeping that vibrant and interesting

3115
02:02:14,639 --> 02:02:16,560
uh is of course interesting to this

3116
02:02:16,560 --> 02:02:19,840
whole community so thanks

3117
02:02:20,880 --> 02:02:23,280
thanks everybody

3118
02:02:23,280 --> 02:02:25,760
thank you and yeah see you on the main

3119
02:02:25,760 --> 02:02:28,159
list hopefully um

3120
02:02:28,159 --> 02:02:30,239
check out the discussion on uh low

3121
02:02:30,239 --> 02:02:32,000
latency video distribution i think it's

3122
02:02:32,000 --> 02:02:34,000
quite interesting what's going on there

3123
02:02:34,000 --> 02:02:36,480
at the moment

3124
02:02:37,520 --> 02:02:39,440
great thanks again everybody

3125
02:02:39,440 --> 02:02:42,440
bye

3126
02:02:47,920 --> 02:02:50,920
okay

3127
02:03:00,239 --> 02:03:02,639
and a special thanks to our

3128
02:03:02,639 --> 02:03:05,280
on-site chair matthias and our notetaker

3129
02:03:05,280 --> 02:03:08,679
mario say

3130
02:03:12,480 --> 02:03:15,480
bye

3131
02:03:40,159 --> 02:03:43,159
is

3132
02:04:01,920 --> 02:04:05,320
doing that again

