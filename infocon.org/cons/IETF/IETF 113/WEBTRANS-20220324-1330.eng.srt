1
00:00:15,839 --> 00:00:19,000
i'm done

2
00:01:02,559 --> 00:01:05,559
okay

3
00:01:15,680 --> 00:01:18,680
okay

4
00:01:59,040 --> 00:02:02,040
uh

5
00:02:17,360 --> 00:02:20,360
wow

6
00:02:42,319 --> 00:02:45,560
thank you

7
00:02:50,640 --> 00:02:53,958
every day

8
00:03:06,400 --> 00:03:09,640
thank you

9
00:03:23,760 --> 00:03:27,560
and so uh

10
00:03:46,400 --> 00:03:50,519
this one is

11
00:04:07,120 --> 00:04:10,120
okay

12
00:04:15,960 --> 00:04:18,880
[Music]

13
00:04:18,880 --> 00:04:20,639
all right folks if you can start taking

14
00:04:20,639 --> 00:04:22,079
your seats we're going to get started

15
00:04:22,079 --> 00:04:24,030
soon

16
00:04:24,030 --> 00:04:27,530
[Music]

17
00:04:29,919 --> 00:04:32,919
uh

18
00:04:38,220 --> 00:04:44,170
[Music]

19
00:04:45,600 --> 00:04:48,390
all right let's get started

20
00:04:48,390 --> 00:04:50,560
[Music]

21
00:04:50,560 --> 00:04:53,600
good afternoon everyone in vienna good

22
00:04:53,600 --> 00:04:56,080
morning good evening good middle of the

23
00:04:56,080 --> 00:04:57,840
middle of the night everyone at home and

24
00:04:57,840 --> 00:05:00,639
welcome to web transport

25
00:05:00,639 --> 00:05:02,240
this is

26
00:05:02,240 --> 00:05:05,039
our first in-person meeting since we

27
00:05:05,039 --> 00:05:08,639
formed the working group in

28
00:05:08,639 --> 00:05:11,039
march of 2020 because we had an

29
00:05:11,039 --> 00:05:12,880
in-person buff

30
00:05:12,880 --> 00:05:15,199
and then we were virtual so

31
00:05:15,199 --> 00:05:17,600
now you know how tall some of you are

32
00:05:17,600 --> 00:05:19,440
uh and we're looking forward to uh

33
00:05:19,440 --> 00:05:21,440
seeing more folks at hopefully the

34
00:05:21,440 --> 00:05:23,919
coming itfs we still have a lot of folk

35
00:05:23,919 --> 00:05:26,320
remote

36
00:05:27,360 --> 00:05:29,840
oh yeah and so my name is david kanazi

37
00:05:29,840 --> 00:05:32,240
i'm one of our chairs and our other

38
00:05:32,240 --> 00:05:34,479
chair bernard is

39
00:05:34,479 --> 00:05:36,400
here remote

40
00:05:36,400 --> 00:05:39,199
hello

41
00:05:39,199 --> 00:05:40,639
hi bernard

42
00:05:40,639 --> 00:05:43,199
um all right the audio seems to be

43
00:05:43,199 --> 00:05:47,039
working well um so as a quick reminder

44
00:05:47,039 --> 00:05:49,600
this session is being recorded

45
00:05:49,600 --> 00:05:51,360
um

46
00:05:51,360 --> 00:05:52,560
the usual

47
00:05:52,560 --> 00:05:55,360
tips for remote meetings haven't really

48
00:05:55,360 --> 00:05:57,120
changed but if

49
00:05:57,120 --> 00:05:58,960
things have changed for the in-person

50
00:05:58,960 --> 00:06:02,000
folks since we were last in person

51
00:06:02,000 --> 00:06:04,080
in particular if you want to join the

52
00:06:04,080 --> 00:06:06,160
mic line you need to do it on the online

53
00:06:06,160 --> 00:06:07,759
version otherwise you'll just be

54
00:06:07,759 --> 00:06:10,639
standing at the mic stretching your legs

55
00:06:10,639 --> 00:06:12,400
and you can use either the onsite or the

56
00:06:12,400 --> 00:06:16,318
remote version they both work for that

57
00:06:16,430 --> 00:06:17,919
[Music]

58
00:06:17,919 --> 00:06:20,479
and yeah if you are in the room

59
00:06:20,479 --> 00:06:22,400
like please join it as well because

60
00:06:22,400 --> 00:06:23,840
that's the only way we populate the blue

61
00:06:23,840 --> 00:06:26,000
sheets which is important

62
00:06:26,000 --> 00:06:28,800
and then the buttons for meat echo

63
00:06:28,800 --> 00:06:31,280
are roughly the same you press the hand

64
00:06:31,280 --> 00:06:33,440
to join the cue and then you can unmute

65
00:06:33,440 --> 00:06:35,600
once it's your turn please stay muted

66
00:06:35,600 --> 00:06:37,360
until that's the case

67
00:06:37,360 --> 00:06:41,280
all right here are some links

68
00:06:41,840 --> 00:06:44,960
the note well um

69
00:06:44,960 --> 00:06:46,560
it's thursday so most of you have

70
00:06:46,560 --> 00:06:48,800
probably seen it but some folks might be

71
00:06:48,800 --> 00:06:51,680
joining for their first session today so

72
00:06:51,680 --> 00:06:54,400
everything we do itf is covered by the

73
00:06:54,400 --> 00:06:55,759
notewell

74
00:06:55,759 --> 00:06:57,360
and

75
00:06:57,360 --> 00:06:59,120
if you haven't read it you really should

76
00:06:59,120 --> 00:07:00,160
do that

77
00:07:00,160 --> 00:07:01,520
it said that you had to read it to

78
00:07:01,520 --> 00:07:03,840
register so hopefully you at least

79
00:07:03,840 --> 00:07:06,000
glanced at it in particular anything you

80
00:07:06,000 --> 00:07:07,840
say has implications

81
00:07:07,840 --> 00:07:11,759
with regards to copyright and patents

82
00:07:11,759 --> 00:07:13,599
and also

83
00:07:13,599 --> 00:07:15,520
we have the itf has a code of conduct

84
00:07:15,520 --> 00:07:17,680
that the chairs will be enforcing it

85
00:07:17,680 --> 00:07:20,000
pretty much boils down to be nice which

86
00:07:20,000 --> 00:07:21,520
is what everyone has been doing in this

87
00:07:21,520 --> 00:07:22,960
working group so far so we're really

88
00:07:22,960 --> 00:07:26,719
happy for that let's keep it that way

89
00:07:26,880 --> 00:07:28,880
all right um

90
00:07:28,880 --> 00:07:31,120
some more links

91
00:07:31,120 --> 00:07:33,759
we would like volunteers as usual for a

92
00:07:33,759 --> 00:07:36,080
jabra scribe and a note taker

93
00:07:36,080 --> 00:07:39,758
do we have volunteers please

94
00:07:40,160 --> 00:07:43,520
thank you lucas for jabberscribing

95
00:07:43,520 --> 00:07:45,440
who would like to be our notetaker

96
00:07:45,440 --> 00:07:47,759
please

97
00:07:52,800 --> 00:07:53,800
i'm good

98
00:07:53,800 --> 00:07:55,599
[Music]

99
00:07:55,599 --> 00:07:56,800
i

100
00:07:56,800 --> 00:07:58,960
hope

101
00:07:59,199 --> 00:08:00,879
all right thanks bernard will help with

102
00:08:00,879 --> 00:08:03,680
that can someone from the room

103
00:08:03,680 --> 00:08:05,199
martin could you perhaps help a little

104
00:08:05,199 --> 00:08:06,639
bit with bernard since you're close to

105
00:08:06,639 --> 00:08:10,319
the mic um do you mind

106
00:08:11,120 --> 00:08:13,039
for note taking notes

107
00:08:13,039 --> 00:08:14,800
awesome thanks

108
00:08:14,800 --> 00:08:16,960
and we're yeah you can collaborate both

109
00:08:16,960 --> 00:08:18,639
of you on the usual thing that's

110
00:08:18,639 --> 00:08:22,960
accessible from the itf agenda page

111
00:08:23,120 --> 00:08:25,840
awesome thanks

112
00:08:25,840 --> 00:08:29,120
right our agenda today is me talking for

113
00:08:29,120 --> 00:08:30,960
a while that's done

114
00:08:30,960 --> 00:08:34,240
then we're gonna have a w3c update from

115
00:08:34,240 --> 00:08:36,958
will we are then going to talk about web

116
00:08:36,958 --> 00:08:39,519
transport of http 3 and then we'll

117
00:08:39,519 --> 00:08:42,559
transfer http 2 and wrap up would anyone

118
00:08:42,559 --> 00:08:45,919
like to bash the agenda

119
00:08:50,000 --> 00:08:53,279
consider the agenda bashed

120
00:08:53,279 --> 00:08:54,800
um

121
00:08:54,800 --> 00:08:57,519
all right well let me handle you

122
00:08:57,519 --> 00:09:00,240
slide control there you go

123
00:09:00,240 --> 00:09:02,080
go ahead

124
00:09:02,080 --> 00:09:04,080
okay thank you just an audio check

125
00:09:04,080 --> 00:09:05,600
before i launch into the ether and

126
00:09:05,600 --> 00:09:07,279
nobody actually hears me

127
00:09:07,279 --> 00:09:10,240
we yep we can see and hear you

128
00:09:10,240 --> 00:09:11,680
okay thank you good morning from

129
00:09:11,680 --> 00:09:14,080
california i'm will law from akamai

130
00:09:14,080 --> 00:09:16,959
i'm representing the w3c group looking

131
00:09:16,959 --> 00:09:19,279
at developing the api for web transport

132
00:09:19,279 --> 00:09:22,080
for browsers i represent yaniva brewery

133
00:09:22,080 --> 00:09:23,360
my co-chair

134
00:09:23,360 --> 00:09:25,040
so just a quick update for you three

135
00:09:25,040 --> 00:09:27,120
slides uh progress since november the

136
00:09:27,120 --> 00:09:29,760
9th last time we reported the status of

137
00:09:29,760 --> 00:09:31,519
the spec is now a working drop the

138
00:09:31,519 --> 00:09:34,160
latest version is march 11 2022 and

139
00:09:34,160 --> 00:09:35,760
there's a link in the slides here you

140
00:09:35,760 --> 00:09:37,120
can go to it

141
00:09:37,120 --> 00:09:38,560
as chairs we've set a somewhat

142
00:09:38,560 --> 00:09:41,360
optimistic timetable for the year um

143
00:09:41,360 --> 00:09:43,040
it's outlined here

144
00:09:43,040 --> 00:09:44,880
with candidate recommendation coming up

145
00:09:44,880 --> 00:09:46,399
awfully quickly

146
00:09:46,399 --> 00:09:49,040
um the main blocker here is by july 31st

147
00:09:49,040 --> 00:09:51,120
we had the idea for a proposed

148
00:09:51,120 --> 00:09:52,720
recommendation which requires at least

149
00:09:52,720 --> 00:09:55,360
two independent implementations chrome

150
00:09:55,360 --> 00:09:57,519
have been uh

151
00:09:57,519 --> 00:10:00,880
in production since m97 however mozilla

152
00:10:00,880 --> 00:10:03,920
have not yet signaled a date

153
00:10:03,920 --> 00:10:07,040
so july 31st is somewhat challenged at

154
00:10:07,040 --> 00:10:09,600
this point and i would encourage

155
00:10:09,600 --> 00:10:12,320
uh alternate browser vendors to chrome

156
00:10:12,320 --> 00:10:14,880
to please step up here

157
00:10:14,880 --> 00:10:16,240
we have a charter valid through

158
00:10:16,240 --> 00:10:18,160
september 30th we will extend that

159
00:10:18,160 --> 00:10:20,399
charter if we're not able to get the

160
00:10:20,399 --> 00:10:23,279
second implementation then by that rate

161
00:10:23,279 --> 00:10:25,760
milestones we've adjusted our milestones

162
00:10:25,760 --> 00:10:28,240
uh to match the release process so we

163
00:10:28,240 --> 00:10:30,000
have a new milestone up now called

164
00:10:30,000 --> 00:10:31,920
candidate recommendation it obviously

165
00:10:31,920 --> 00:10:33,519
contains the issues that need to be

166
00:10:33,519 --> 00:10:36,480
resolved before we can proceed

167
00:10:36,480 --> 00:10:38,800
to that stage minimum viable ship the

168
00:10:38,800 --> 00:10:43,279
prior one has a few issues remaining

169
00:10:43,279 --> 00:10:45,440
let me figure out how to advance the

170
00:10:45,440 --> 00:10:48,160
slides

171
00:10:48,480 --> 00:10:50,399
so there should be over the slides at

172
00:10:50,399 --> 00:10:52,399
the bottom um controls for you where you

173
00:10:52,399 --> 00:10:54,399
can just hit next slide

174
00:10:54,399 --> 00:10:56,480
i'll just set that one

175
00:10:56,480 --> 00:10:57,279
okay

176
00:10:57,279 --> 00:10:59,200
thank you so just a real summary of the

177
00:10:59,200 --> 00:11:00,800
decisions i'm not going to go into

178
00:11:00,800 --> 00:11:03,760
details of all of these

179
00:11:03,760 --> 00:11:05,440
some of the resolution establishing a

180
00:11:05,440 --> 00:11:07,360
session clients should not be providing

181
00:11:07,360 --> 00:11:09,600
credentials and i've got issue links

182
00:11:09,600 --> 00:11:10,880
there you can go through and read the

183
00:11:10,880 --> 00:11:14,240
details blocking ports on on fetch's bad

184
00:11:14,240 --> 00:11:15,760
ports list

185
00:11:15,760 --> 00:11:19,200
adding uh smooth rtrt variation to web

186
00:11:19,200 --> 00:11:21,360
transport stats with the definitions

187
00:11:21,360 --> 00:11:23,200
coming from elsewhere

188
00:11:23,200 --> 00:11:28,000
uh packets lost web transport stats

189
00:11:28,000 --> 00:11:30,880
uh extra requirements on server cert

190
00:11:30,880 --> 00:11:32,240
hashes

191
00:11:32,240 --> 00:11:33,120
uh

192
00:11:33,120 --> 00:11:35,440
on web transport get stats we've added

193
00:11:35,440 --> 00:11:37,360
expired outgoing dropped incoming

194
00:11:37,360 --> 00:11:39,040
datagrams lost

195
00:11:39,040 --> 00:11:41,360
and decided that stream stats will be an

196
00:11:41,360 --> 00:11:43,600
individual getstats method on each

197
00:11:43,600 --> 00:11:46,880
stream instance

198
00:11:48,079 --> 00:11:49,760
and

199
00:11:49,760 --> 00:11:51,760
after some long debate mostly resolved

200
00:11:51,760 --> 00:11:54,079
but not yet merged

201
00:11:54,079 --> 00:11:56,240
we have some decisions around

202
00:11:56,240 --> 00:11:58,560
reliability and fallback

203
00:11:58,560 --> 00:11:59,839
um

204
00:11:59,839 --> 00:12:02,000
and also some

205
00:12:02,000 --> 00:12:04,639
good discussions about the actual state

206
00:12:04,639 --> 00:12:06,720
of the constructor argument you know

207
00:12:06,720 --> 00:12:08,959
require unreliable versus request

208
00:12:08,959 --> 00:12:10,800
reliable for example

209
00:12:10,800 --> 00:12:13,680
content security policy has also been a

210
00:12:13,680 --> 00:12:15,200
long issue

211
00:12:15,200 --> 00:12:16,639
um

212
00:12:16,639 --> 00:12:20,240
and there was recently a decision to to

213
00:12:20,240 --> 00:12:21,920
break the compatibility with the early

214
00:12:21,920 --> 00:12:23,600
version of chrome in the hope that it's

215
00:12:23,600 --> 00:12:25,839
better to do it now

216
00:12:25,839 --> 00:12:28,000
as there's not that many users and that

217
00:12:28,000 --> 00:12:31,120
it would be more stable going forward

218
00:12:31,120 --> 00:12:33,200
datagram priority over streams there's

219
00:12:33,200 --> 00:12:35,120
been a change the priority algorithm had

220
00:12:35,120 --> 00:12:36,160
some

221
00:12:36,160 --> 00:12:38,480
some guidance uh and it's replaced with

222
00:12:38,480 --> 00:12:40,240
normative language that the user agent

223
00:12:40,240 --> 00:12:42,079
should make sure that datagrams get out

224
00:12:42,079 --> 00:12:43,600
quickly the last one was very sort of

225
00:12:43,600 --> 00:12:46,079
absolute datagrams always go out first

226
00:12:46,079 --> 00:12:47,839
and there were some potential issues

227
00:12:47,839 --> 00:12:48,560
there

228
00:12:48,560 --> 00:12:50,720
current issues under debate uh bike

229
00:12:50,720 --> 00:12:52,480
shedding on names for

230
00:12:52,480 --> 00:12:55,519
stream stats that should be resolvable

231
00:12:55,519 --> 00:12:57,600
connection pooling there's new issues

232
00:12:57,600 --> 00:12:59,600
raised around whether it's default on or

233
00:12:59,600 --> 00:13:01,680
off and how to post that

234
00:13:01,680 --> 00:13:03,440
in the constructor

235
00:13:03,440 --> 00:13:05,920
and then lastly priorities between

236
00:13:05,920 --> 00:13:09,200
streams is this necessary and also this

237
00:13:09,200 --> 00:13:11,120
is a question for our etf is their

238
00:13:11,120 --> 00:13:12,160
intent

239
00:13:12,160 --> 00:13:13,600
to define a method of stream

240
00:13:13,600 --> 00:13:15,920
prioritization that might then filter

241
00:13:15,920 --> 00:13:18,480
down to the browser level uh that we

242
00:13:18,480 --> 00:13:21,120
could take advantage of

243
00:13:21,120 --> 00:13:24,560
that concludes the summary from w3c many

244
00:13:24,560 --> 00:13:26,399
of the participants of w3c are on this

245
00:13:26,399 --> 00:13:28,320
call so if there any questions uh we can

246
00:13:28,320 --> 00:13:33,160
take them now or else back to david

247
00:13:34,079 --> 00:13:35,920
thanks will does anyone have any

248
00:13:35,920 --> 00:13:38,399
questions for will if so please join the

249
00:13:38,399 --> 00:13:40,320
mic line

250
00:13:40,320 --> 00:13:43,849
[Music]

251
00:13:46,800 --> 00:13:49,839
all right if

252
00:13:50,160 --> 00:13:53,040
you have something martin

253
00:13:53,040 --> 00:13:54,639
oh

254
00:13:54,639 --> 00:13:56,480
wait there's a different martin in the

255
00:13:56,480 --> 00:13:58,880
queue i'm confused

256
00:13:58,880 --> 00:13:59,839
but

257
00:13:59,839 --> 00:14:03,120
okay mt go ahead

258
00:14:03,120 --> 00:14:05,680
so um world's asking about priority here

259
00:14:05,680 --> 00:14:07,120
which i think is probably one of the

260
00:14:07,120 --> 00:14:08,800
more interesting questions that we could

261
00:14:08,800 --> 00:14:10,959
uh we could discuss here

262
00:14:10,959 --> 00:14:11,920
there's

263
00:14:11,920 --> 00:14:14,160
potentially something

264
00:14:14,160 --> 00:14:17,040
we could do uh we could take the http

265
00:14:17,040 --> 00:14:18,800
priorities thing and just sort of say

266
00:14:18,800 --> 00:14:21,600
well there's eight levels and off we go

267
00:14:21,600 --> 00:14:23,360
or we could

268
00:14:23,360 --> 00:14:25,600
take a leaf out of the webrtc book i

269
00:14:25,600 --> 00:14:28,560
think they have four

270
00:14:28,839 --> 00:14:31,519
uh does anyone want a bike shed on this

271
00:14:31,519 --> 00:14:32,480
one

272
00:14:32,480 --> 00:14:35,920
i think it's really coming down to that

273
00:14:40,079 --> 00:14:44,040
thanks martin martin

274
00:14:44,560 --> 00:14:47,760
this joke never gets old

275
00:14:47,760 --> 00:14:51,839
um when you say that two interoperable

276
00:14:51,839 --> 00:14:54,399
implementations are needed

277
00:14:54,399 --> 00:14:56,399
does this mean that all the features

278
00:14:56,399 --> 00:14:58,639
that you just presented need to be

279
00:14:58,639 --> 00:15:00,480
implemented in those

280
00:15:00,480 --> 00:15:02,240
for example all the studs and the

281
00:15:02,240 --> 00:15:06,480
certificate hash and so on

282
00:15:08,079 --> 00:15:09,199
uh

283
00:15:09,199 --> 00:15:12,720
no is the answer and there's they don't

284
00:15:12,720 --> 00:15:14,639
have to be precisely identical in

285
00:15:14,639 --> 00:15:16,480
feature set i think there's an intent

286
00:15:16,480 --> 00:15:18,000
that they should deliver the majority of

287
00:15:18,000 --> 00:15:20,399
the capability but you know chrome is

288
00:15:20,399 --> 00:15:22,240
certainly shipped not with these

289
00:15:22,240 --> 00:15:24,160
features in and that's acceptable

290
00:15:24,160 --> 00:15:26,800
they're getting added post ship so i

291
00:15:26,800 --> 00:15:28,880
think the requirement is that we want

292
00:15:28,880 --> 00:15:31,040
basic functionality be able to connect

293
00:15:31,040 --> 00:15:33,040
be able to establish streams send

294
00:15:33,040 --> 00:15:34,240
datagrams

295
00:15:34,240 --> 00:15:37,519
that would be that would be evidence of

296
00:15:37,519 --> 00:15:40,160
of an implementation i would think the

297
00:15:40,160 --> 00:15:42,480
stats could certainly be acceptable if

298
00:15:42,480 --> 00:15:45,680
they were not identical

299
00:15:47,199 --> 00:15:49,120
thank you alan

300
00:15:49,120 --> 00:15:50,880
and for folks once you've put yourself

301
00:15:50,880 --> 00:15:52,320
in the virtual line feel free to stand

302
00:15:52,320 --> 00:15:54,720
at the mic that's okay

303
00:15:54,720 --> 00:15:56,000
allen frindell

304
00:15:56,000 --> 00:15:58,959
um with respect to priority i think

305
00:15:58,959 --> 00:16:01,759
i i like the http scheme a lot in terms

306
00:16:01,759 --> 00:16:03,360
of the

307
00:16:03,360 --> 00:16:05,440
eight lanes and i think

308
00:16:05,440 --> 00:16:06,880
in terms of

309
00:16:06,880 --> 00:16:08,079
different priority schemes we've looked

310
00:16:08,079 --> 00:16:10,639
at at least in http over time that this

311
00:16:10,639 --> 00:16:12,959
has got the right balance of

312
00:16:12,959 --> 00:16:16,160
um flexibility power simplicity

313
00:16:16,160 --> 00:16:18,639
uh and creating another one i'm not sure

314
00:16:18,639 --> 00:16:20,560
would be really useful so finding a way

315
00:16:20,560 --> 00:16:23,759
to adapt that as like a model

316
00:16:23,759 --> 00:16:25,199
there's two pieces

317
00:16:25,199 --> 00:16:27,600
one would be if if webtransport adopted

318
00:16:27,600 --> 00:16:29,519
it would we

319
00:16:29,519 --> 00:16:32,240
add signaling to the wire protocol

320
00:16:32,240 --> 00:16:34,639
so that the browser side can set the

321
00:16:34,639 --> 00:16:37,040
priority on streams that the server is

322
00:16:37,040 --> 00:16:40,079
sending and another one is

323
00:16:40,079 --> 00:16:43,279
just on the api side can the browser set

324
00:16:43,279 --> 00:16:45,040
priorities on the streams that it is

325
00:16:45,040 --> 00:16:46,639
sending which is strictly does not

326
00:16:46,639 --> 00:16:48,720
require wire format changes it's just

327
00:16:48,720 --> 00:16:51,440
between the api and the

328
00:16:51,440 --> 00:16:54,959
sending implementation thanks

329
00:16:55,360 --> 00:16:57,839
um thanks just double checking i'm not

330
00:16:57,839 --> 00:17:01,120
seeing any typing happening in the doc

331
00:17:01,120 --> 00:17:04,920
bernard are you taking minutes

332
00:17:05,520 --> 00:17:08,000
[Music]

333
00:17:08,000 --> 00:17:10,799
a notes file

334
00:17:10,799 --> 00:17:12,799
it's been acting a little squirrelly but

335
00:17:12,799 --> 00:17:14,480
i do see someone else taking notes there

336
00:17:14,480 --> 00:17:16,160
so at least one other person has figured

337
00:17:16,160 --> 00:17:17,199
it out

338
00:17:17,199 --> 00:17:20,640
well i just added what mt had in the

339
00:17:20,640 --> 00:17:22,160
in there

340
00:17:22,160 --> 00:17:23,439
is

341
00:17:23,439 --> 00:17:24,880
are we all thinking that someone else is

342
00:17:24,880 --> 00:17:26,400
taking minutes

343
00:17:26,400 --> 00:17:28,160
well i am taking minutes as i said in

344
00:17:28,160 --> 00:17:31,360
the notes file notes dash itf

345
00:17:31,360 --> 00:17:33,918
webtrans

346
00:17:34,640 --> 00:17:37,039
it's been acting weird though

347
00:17:37,039 --> 00:17:38,480
okay yeah i'm not seeing updates well as

348
00:17:38,480 --> 00:17:39,840
long as you have them we're good all

349
00:17:39,840 --> 00:17:44,360
right thanks uh victor you're next

350
00:17:46,000 --> 00:17:48,640
i was mostly under the impression that

351
00:17:48,640 --> 00:17:50,160
the

352
00:17:50,160 --> 00:17:52,480
priorities at least

353
00:17:52,480 --> 00:17:54,720
outside of those communicated as the

354
00:17:54,720 --> 00:17:59,120
wire by gtp are typically considered the

355
00:17:59,120 --> 00:18:01,120
api concern

356
00:18:01,120 --> 00:18:03,600
so i personally

357
00:18:03,600 --> 00:18:06,000
unless we intend to provide a mechanism

358
00:18:06,000 --> 00:18:08,080
for end-to-end signaling i don't think

359
00:18:08,080 --> 00:18:10,160
there's there is much in the working

360
00:18:10,160 --> 00:18:12,080
group to be done

361
00:18:12,080 --> 00:18:12,840
uh

362
00:18:12,840 --> 00:18:16,400
since as far as i can see it's mostly an

363
00:18:16,400 --> 00:18:19,120
api problem as in it is

364
00:18:19,120 --> 00:18:22,559
about how web applications signal

365
00:18:22,559 --> 00:18:25,280
priorities to the

366
00:18:25,280 --> 00:18:30,080
browser's networks act then not to

367
00:18:30,080 --> 00:18:32,960
the peer

368
00:18:37,600 --> 00:18:38,640
thanks

369
00:18:38,640 --> 00:18:40,799
martin thompson

370
00:18:40,799 --> 00:18:42,559
yeah i'm going to agree with victor here

371
00:18:42,559 --> 00:18:44,640
i think that if an application wants to

372
00:18:44,640 --> 00:18:46,320
do the signaling it can use web

373
00:18:46,320 --> 00:18:47,919
transport for that

374
00:18:47,919 --> 00:18:49,520
uh that's probably the most obvious

375
00:18:49,520 --> 00:18:50,799
thing to do here

376
00:18:50,799 --> 00:18:51,679
uh

377
00:18:51,679 --> 00:18:54,400
and then it becomes a purely api

378
00:18:54,400 --> 00:18:58,799
consideration and i i think to allen's

379
00:18:58,799 --> 00:18:59,760
point

380
00:18:59,760 --> 00:19:03,280
that extensible prioritization scheme

381
00:19:03,280 --> 00:19:05,120
uh scares me

382
00:19:05,120 --> 00:19:06,000
uh

383
00:19:06,000 --> 00:19:08,240
i think probably for something like web

384
00:19:08,240 --> 00:19:09,520
transport the

385
00:19:09,520 --> 00:19:12,640
incremental flag would be on always so

386
00:19:12,640 --> 00:19:15,280
we can at least make that simplification

387
00:19:15,280 --> 00:19:17,440
and then it's just a matter of

388
00:19:17,440 --> 00:19:20,240
how many levels of priority or urgency

389
00:19:20,240 --> 00:19:22,320
or whatever it is that we

390
00:19:22,320 --> 00:19:24,960
have how many levels are appropriate for

391
00:19:24,960 --> 00:19:27,039
this particular context

392
00:19:27,039 --> 00:19:29,600
and i think that's almost

393
00:19:29,600 --> 00:19:33,120
entirely a black shed

394
00:19:37,120 --> 00:19:39,039
okay thanks mt

395
00:19:39,039 --> 00:19:40,640
and thanks will i think we've cleared

396
00:19:40,640 --> 00:19:42,799
the queue thanks for the presentation

397
00:19:42,799 --> 00:19:44,720
we're going to move on to

398
00:19:44,720 --> 00:19:47,280
our transfer http 3

399
00:19:47,280 --> 00:19:50,720
victor come on up and i will transfer

400
00:19:50,720 --> 00:19:53,840
slide control to you

401
00:19:56,080 --> 00:19:58,399
sure

402
00:20:02,400 --> 00:20:06,559
i see okay one second revokes lines

403
00:20:06,559 --> 00:20:09,280
apparently i need to stop and represent

404
00:20:09,280 --> 00:20:11,520
show pre-loaded slides

405
00:20:11,520 --> 00:20:13,840
share

406
00:20:13,840 --> 00:20:16,000
pass to victor all right you can control

407
00:20:16,000 --> 00:20:18,000
yours oh and we started from the start

408
00:20:18,000 --> 00:20:21,000
sorry

409
00:20:27,039 --> 00:20:28,720
since that's the slides

410
00:20:28,720 --> 00:20:31,520
all right go ahead victor thanks

411
00:20:31,520 --> 00:20:35,679
um i'm vector by the editor for

412
00:20:35,679 --> 00:20:38,640
the overview and web transport or http

413
00:20:38,640 --> 00:20:41,039
drafts and

414
00:20:41,039 --> 00:20:44,640
those are the two drafts that are

415
00:20:44,640 --> 00:20:47,440
probably currently further along in the

416
00:20:47,440 --> 00:20:48,480
process

417
00:20:48,480 --> 00:20:50,559
in the sense that web transport over

418
00:20:50,559 --> 00:20:54,000
http has a implementation in chrome and

419
00:20:54,000 --> 00:20:56,799
we to some extent now it works

420
00:20:56,799 --> 00:21:00,080
and we've interrupt with servers

421
00:21:00,080 --> 00:21:02,159
and it's been used by people to

422
00:21:02,159 --> 00:21:04,080
interrupt with servers that were written

423
00:21:04,080 --> 00:21:05,679
by not us

424
00:21:05,679 --> 00:21:07,120
uh

425
00:21:07,120 --> 00:21:09,280
but there are still

426
00:21:09,280 --> 00:21:12,159
a lot of unresolved issues

427
00:21:12,159 --> 00:21:14,960
especially in the overview draft

428
00:21:14,960 --> 00:21:16,640
so

429
00:21:16,640 --> 00:21:20,559
the overview draft was originally

430
00:21:20,559 --> 00:21:22,799
it was written probably the first

431
00:21:22,799 --> 00:21:25,280
earliest in web transport process

432
00:21:25,280 --> 00:21:28,320
so it is to some extent

433
00:21:28,320 --> 00:21:31,679
the least reflective of what's currently

434
00:21:31,679 --> 00:21:32,559
is

435
00:21:32,559 --> 00:21:34,960
uh and the reason we

436
00:21:34,960 --> 00:21:37,600
so far have not paid much attention to

437
00:21:37,600 --> 00:21:40,159
it is that we were mostly focusing on

438
00:21:40,159 --> 00:21:42,880
getting one transport done however now

439
00:21:42,880 --> 00:21:45,919
that web transport over http 2 is moving

440
00:21:45,919 --> 00:21:46,960
along

441
00:21:46,960 --> 00:21:49,919
uh we need to

442
00:21:49,919 --> 00:21:52,880
provide some form of abstraction between

443
00:21:52,880 --> 00:21:55,200
what what transport over h3 does and web

444
00:21:55,200 --> 00:22:00,080
transport over h2 does uh and

445
00:22:00,080 --> 00:22:02,480
that is something i believe we should do

446
00:22:02,480 --> 00:22:04,400
in the overview draft

447
00:22:04,400 --> 00:22:06,400
uh since

448
00:22:06,400 --> 00:22:07,440
uh

449
00:22:07,440 --> 00:22:10,000
it is well positioned to do that

450
00:22:10,000 --> 00:22:15,280
uh i wrote up a pull request to do that

451
00:22:15,280 --> 00:22:16,960
or at least some of that that pull

452
00:22:16,960 --> 00:22:18,799
request defines

453
00:22:18,799 --> 00:22:22,000
all of the operations that are cited in

454
00:22:22,000 --> 00:22:24,080
w3c spec

455
00:22:24,080 --> 00:22:26,720
except the w3cs pack currently size

456
00:22:26,720 --> 00:22:29,679
either or c9000 or with transport over

457
00:22:29,679 --> 00:22:32,320
http draft for those which obviously

458
00:22:32,320 --> 00:22:34,720
does not work if we want this to work

459
00:22:34,720 --> 00:22:36,960
for perfect free image too

460
00:22:36,960 --> 00:22:41,200
uh i encourage everyone to take a closer

461
00:22:41,200 --> 00:22:43,600
look at that pull request

462
00:22:43,600 --> 00:22:46,080
i don't think there's much to discuss

463
00:22:46,080 --> 00:22:50,080
since it's mostly around the text

464
00:22:50,080 --> 00:22:53,080
oh

465
00:22:55,200 --> 00:22:56,960
so

466
00:22:56,960 --> 00:22:58,400
now

467
00:22:58,400 --> 00:23:02,480
web transport over http still has

468
00:23:02,480 --> 00:23:03,840
a lot of

469
00:23:03,840 --> 00:23:08,080
some issues that are not resolved

470
00:23:08,080 --> 00:23:10,140
and one of them is

471
00:23:10,140 --> 00:23:12,159
[Music]

472
00:23:12,159 --> 00:23:14,320
the question of whether we need to

473
00:23:14,320 --> 00:23:16,799
support a go away like mechanism for

474
00:23:16,799 --> 00:23:19,760
training sessions

475
00:23:20,000 --> 00:23:22,640
and the reasoning behind

476
00:23:22,640 --> 00:23:23,600
the

477
00:23:23,600 --> 00:23:25,840
why we need to send the protocol as

478
00:23:25,840 --> 00:23:28,030
opposed we need it in the

479
00:23:28,030 --> 00:23:29,200
[Music]

480
00:23:29,200 --> 00:23:30,159
uh

481
00:23:30,159 --> 00:23:31,520
application

482
00:23:31,520 --> 00:23:33,440
and the application can handle it by

483
00:23:33,440 --> 00:23:34,559
itself

484
00:23:34,559 --> 00:23:36,159
is that uh

485
00:23:36,159 --> 00:23:39,919
the go away can be not only sent by the

486
00:23:39,919 --> 00:23:43,279
end points it can also be sent by a

487
00:23:43,279 --> 00:23:45,840
reverse proxy which is going away

488
00:23:45,840 --> 00:23:48,000
or some other element

489
00:23:48,000 --> 00:23:49,440
in the chain

490
00:23:49,440 --> 00:23:52,400
uh so the proposal is to add a train web

491
00:23:52,400 --> 00:23:54,080
transport session

492
00:23:54,080 --> 00:23:54,960
uh

493
00:23:54,960 --> 00:23:56,640
capsule

494
00:23:56,640 --> 00:23:58,240
uh that would

495
00:23:58,240 --> 00:24:01,760
can be inserted by anyone

496
00:24:01,760 --> 00:24:05,640
on the path and

497
00:24:07,039 --> 00:24:11,760
do people have opinions about that

498
00:24:12,080 --> 00:24:13,919
oh i know

499
00:24:13,919 --> 00:24:16,080
allen probably has opinion speech since

500
00:24:16,080 --> 00:24:18,960
he proposed it

501
00:24:18,960 --> 00:24:20,960
do people want to say anything it's a

502
00:24:20,960 --> 00:24:23,960
microphone

503
00:24:34,310 --> 00:24:36,320
[Music]

504
00:24:36,320 --> 00:24:38,000
not seeing anyone get up in the room

505
00:24:38,000 --> 00:24:40,400
victor

506
00:24:43,600 --> 00:24:44,880
i see

507
00:24:44,880 --> 00:24:47,520
uh then the question would be alan would

508
00:24:47,520 --> 00:24:49,760
you like to write out a pull request for

509
00:24:49,760 --> 00:24:52,000
this

510
00:24:55,360 --> 00:24:58,799
alan says sure

511
00:24:59,679 --> 00:25:02,240
what's he helen says sue okay what are

512
00:25:02,240 --> 00:25:03,600
you drawing

513
00:25:03,600 --> 00:25:04,640
no no

514
00:25:04,640 --> 00:25:06,240
all right uh let the minutes reflect

515
00:25:06,240 --> 00:25:09,030
that allen said sure

516
00:25:09,030 --> 00:25:13,559
[Music]

517
00:25:14,320 --> 00:25:15,600
uh

518
00:25:15,600 --> 00:25:18,879
the next issue is

519
00:25:20,240 --> 00:25:23,679
okay let's first issue 67 is a very

520
00:25:23,679 --> 00:25:26,080
closely related issue

521
00:25:26,080 --> 00:25:29,760
but that's different so for regular http

522
00:25:29,760 --> 00:25:32,559
requests the way go away

523
00:25:32,559 --> 00:25:35,039
packet works is that when we receive a

524
00:25:35,039 --> 00:25:36,880
galway we're not allowed to create new

525
00:25:36,880 --> 00:25:38,799
requests but the old ones still can

526
00:25:38,799 --> 00:25:40,159
finish

527
00:25:40,159 --> 00:25:41,360
and

528
00:25:41,360 --> 00:25:45,760
we do not currently define

529
00:25:46,080 --> 00:25:47,679
therefore

530
00:25:47,679 --> 00:25:49,840
what we do with go away and web

531
00:25:49,840 --> 00:25:52,720
transport and my current interpretation

532
00:25:52,720 --> 00:25:53,840
is that

533
00:25:53,840 --> 00:25:56,320
web transport

534
00:25:56,320 --> 00:25:59,279
inner streams

535
00:25:59,279 --> 00:26:02,640
ignore that limitations but the new web

536
00:26:02,640 --> 00:26:06,320
transport sessions cannot be created

537
00:26:06,320 --> 00:26:07,600
do

538
00:26:07,600 --> 00:26:10,559
folks do people have any opinions on

539
00:26:10,559 --> 00:26:11,520
this

540
00:26:11,520 --> 00:26:13,840
on what should we do about this

541
00:26:13,840 --> 00:26:15,760
or whether we should change this

542
00:26:15,760 --> 00:26:18,240
behavior

543
00:26:18,640 --> 00:26:21,279
uh alan

544
00:26:22,480 --> 00:26:25,279
alan frindell so i think when you think

545
00:26:25,279 --> 00:26:28,159
about it in the context of http 2

546
00:26:28,159 --> 00:26:30,799
where all of the web transport streams

547
00:26:30,799 --> 00:26:33,279
are not visible at the

548
00:26:33,279 --> 00:26:35,279
http session layer

549
00:26:35,279 --> 00:26:37,440
you know an http 2 go away would have no

550
00:26:37,440 --> 00:26:38,559
impact

551
00:26:38,559 --> 00:26:40,799
on whether webtransport endpoint could

552
00:26:40,799 --> 00:26:43,279
continue creating new web transport

553
00:26:43,279 --> 00:26:46,000
streams within that established http 2

554
00:26:46,000 --> 00:26:47,440
stream and i think we should preserve

555
00:26:47,440 --> 00:26:50,159
those semantics for http 3. so

556
00:26:50,159 --> 00:26:52,400
if you receive a go away it means

557
00:26:52,400 --> 00:26:54,720
no new web transport sessions but you

558
00:26:54,720 --> 00:26:56,400
can still create

559
00:26:56,400 --> 00:27:00,240
web transport streams if you want to

560
00:27:02,559 --> 00:27:03,919
uh

561
00:27:03,919 --> 00:27:06,240
martin says in japan he agrees with alan

562
00:27:06,240 --> 00:27:10,880
does anyone else has anything to say

563
00:27:13,120 --> 00:27:16,120
bernard

564
00:27:23,840 --> 00:27:25,120
all right it

565
00:27:25,120 --> 00:27:26,720
looks like we have

566
00:27:26,720 --> 00:27:28,960
consensus on that issue

567
00:27:28,960 --> 00:27:31,600
so to clarify victor you um what are

568
00:27:31,600 --> 00:27:34,000
your thoughts do you agree with alan and

569
00:27:34,000 --> 00:27:35,440
empty

570
00:27:35,440 --> 00:27:37,520
oh yes

571
00:27:37,520 --> 00:27:39,440
cool and i'm seeing another one in the

572
00:27:39,440 --> 00:27:40,399
chat

573
00:27:40,399 --> 00:27:41,760
cool

574
00:27:41,760 --> 00:27:44,480
those sounds

575
00:27:45,520 --> 00:27:46,799
uh

576
00:27:46,799 --> 00:27:51,440
the next issue is issue 33

577
00:27:51,440 --> 00:27:53,440
closing everything when connect stream

578
00:27:53,440 --> 00:27:54,720
closes

579
00:27:54,720 --> 00:27:55,520
so

580
00:27:55,520 --> 00:27:58,320
our current behavior is whenever connect

581
00:27:58,320 --> 00:28:00,080
stream closes

582
00:28:00,080 --> 00:28:02,080
uh everything in the session is

583
00:28:02,080 --> 00:28:03,520
considered to be closed and we

584
00:28:03,520 --> 00:28:06,159
automatically just reset everything and

585
00:28:06,159 --> 00:28:09,919
reject all for future datagrams

586
00:28:09,919 --> 00:28:12,480
uh at some point alan suggested that we

587
00:28:12,480 --> 00:28:13,360
might

588
00:28:13,360 --> 00:28:14,840
want to keep

589
00:28:14,840 --> 00:28:17,200
the uh

590
00:28:17,200 --> 00:28:19,760
internal streams open

591
00:28:19,760 --> 00:28:22,799
even when the sessions is closed and

592
00:28:22,799 --> 00:28:26,080
when we discussed this a year ago the

593
00:28:26,080 --> 00:28:28,880
conclusion was to revisit this once we

594
00:28:28,880 --> 00:28:32,399
have more implementation experience

595
00:28:32,399 --> 00:28:35,679
and my current impression after having

596
00:28:35,679 --> 00:28:38,480
more implementation experience is that

597
00:28:38,480 --> 00:28:40,559
they have having the semantics where the

598
00:28:40,559 --> 00:28:42,000
control stream

599
00:28:42,000 --> 00:28:42,799
uh

600
00:28:42,799 --> 00:28:44,960
automatically terminates everything on

601
00:28:44,960 --> 00:28:46,000
session

602
00:28:46,000 --> 00:28:49,279
uh is much easier to follow and much

603
00:28:49,279 --> 00:28:51,520
easier to manage in terms of

604
00:28:51,520 --> 00:28:53,360
resource life cycle

605
00:28:53,360 --> 00:28:56,480
and also if we allow that i am not sure

606
00:28:56,480 --> 00:28:59,520
how that would look for http 2

607
00:28:59,520 --> 00:29:01,840
uh where everything is on a single

608
00:29:01,840 --> 00:29:04,480
stream so i think we should keep the

609
00:29:04,480 --> 00:29:07,039
current semantics where

610
00:29:07,039 --> 00:29:08,960
uh closing the connect stream

611
00:29:08,960 --> 00:29:11,360
automatically determines everything

612
00:29:11,360 --> 00:29:15,520
uh do people agree or disagree

613
00:29:16,559 --> 00:29:19,600
uh eric

614
00:29:20,799 --> 00:29:24,240
i think i would generally agree with

615
00:29:24,240 --> 00:29:26,159
having killing the connect stream kill

616
00:29:26,159 --> 00:29:27,520
everything else it seems like if you

617
00:29:27,520 --> 00:29:29,520
don't do that what you're effectively

618
00:29:29,520 --> 00:29:32,159
saying is that's kind of an implicit

619
00:29:32,159 --> 00:29:34,080
a couple slides ago the go away that we

620
00:29:34,080 --> 00:29:36,399
wanted for a web transport session and

621
00:29:36,399 --> 00:29:37,679
so it seems

622
00:29:37,679 --> 00:29:40,559
safer to make that explicit

623
00:29:40,559 --> 00:29:43,039
go away if you wanted those semantics

624
00:29:43,039 --> 00:29:44,559
and then still have your control stream

625
00:29:44,559 --> 00:29:46,640
around if you needed control messages

626
00:29:46,640 --> 00:29:48,640
rather than having the control stream

627
00:29:48,640 --> 00:29:49,919
disappear

628
00:29:49,919 --> 00:29:51,679
and

629
00:29:51,679 --> 00:29:53,200
trying to assign some sort of meaning to

630
00:29:53,200 --> 00:29:55,840
that

631
00:29:59,200 --> 00:30:01,679
magnus

632
00:30:02,080 --> 00:30:04,720
magnus westland erickson um

633
00:30:04,720 --> 00:30:06,399
is this unit

634
00:30:06,399 --> 00:30:08,880
is it per direction or by directly both

635
00:30:08,880 --> 00:30:11,440
directions

636
00:30:11,760 --> 00:30:12,720
that this

637
00:30:12,720 --> 00:30:15,120
occurs that you close

638
00:30:15,120 --> 00:30:18,960
are currently closing in any direction

639
00:30:18,960 --> 00:30:22,240
results in it being considered

640
00:30:22,240 --> 00:30:24,960
uh terminated so it is a similar to how

641
00:30:24,960 --> 00:30:27,520
connection close behaves in quick

642
00:30:27,520 --> 00:30:30,520
okay

643
00:30:36,480 --> 00:30:38,880
yeah i mean

644
00:30:38,880 --> 00:30:40,640
it's depending on what protocols you're

645
00:30:40,640 --> 00:30:42,399
doing in some cases it might be that you

646
00:30:42,399 --> 00:30:44,399
actually want to finish

647
00:30:44,399 --> 00:30:45,760
saying

648
00:30:45,760 --> 00:30:47,600
it's the assumption what what if you're

649
00:30:47,600 --> 00:30:49,840
relying on the higher level protocol

650
00:30:49,840 --> 00:30:51,840
built on top of web trans or evapotrans

651
00:30:51,840 --> 00:30:54,080
itself to do the close which kind of

652
00:30:54,080 --> 00:30:57,519
semantics you want so it's a bit

653
00:30:57,519 --> 00:30:58,880
yeah

654
00:30:58,880 --> 00:31:01,039
well the higher level protocol does not

655
00:31:01,039 --> 00:31:03,519
necessarily always close if it's a

656
00:31:03,519 --> 00:31:06,399
pooled web transport session that just

657
00:31:06,399 --> 00:31:08,320
means that the

658
00:31:08,320 --> 00:31:10,720
one session disappears but http free

659
00:31:10,720 --> 00:31:14,000
connection remains open

660
00:31:16,559 --> 00:31:18,080
yeah

661
00:31:18,080 --> 00:31:22,000
yeah i don't know sorry about that

662
00:31:22,399 --> 00:31:25,879
oh martin

663
00:31:33,200 --> 00:31:36,480
uh you're muted martin

664
00:31:39,120 --> 00:31:42,000
this is the risk of having five multiple

665
00:31:42,000 --> 00:31:44,000
different mutes on my end

666
00:31:44,000 --> 00:31:46,480
so if we're thinking about the http

667
00:31:46,480 --> 00:31:48,399
2 version of this one

668
00:31:48,399 --> 00:31:50,720
if you close the connect stream you also

669
00:31:50,720 --> 00:31:52,559
have just shut off your ability to send

670
00:31:52,559 --> 00:31:53,919
any more

671
00:31:53,919 --> 00:31:56,159
stream data of any type

672
00:31:56,159 --> 00:31:57,679
so um

673
00:31:57,679 --> 00:31:59,679
i think you're also prevented from

674
00:31:59,679 --> 00:32:02,720
receiving it in a sense uh probably not

675
00:32:02,720 --> 00:32:04,480
um

676
00:32:04,480 --> 00:32:07,039
so i tend to think that once we've

677
00:32:07,039 --> 00:32:09,039
closed the streams then

678
00:32:09,039 --> 00:32:11,360
everything else is effectively orphaned

679
00:32:11,360 --> 00:32:14,678
at that point

680
00:32:18,960 --> 00:32:20,480
uh

681
00:32:20,480 --> 00:32:23,600
i'm under impressions that we oh davis

682
00:32:23,600 --> 00:32:25,600
can assay uh

683
00:32:25,600 --> 00:32:26,640
hey victor

684
00:32:26,640 --> 00:32:28,640
speaking as an individual contributor

685
00:32:28,640 --> 00:32:31,600
well rather as a mask enthusiast here

686
00:32:31,600 --> 00:32:34,000
in the http datagrams draft that we have

687
00:32:34,000 --> 00:32:36,320
over in mask when you

688
00:32:36,320 --> 00:32:38,640
close the connect stream you can no

689
00:32:38,640 --> 00:32:41,360
longer send datagrams

690
00:32:41,360 --> 00:32:44,399
so my personal take would be it just

691
00:32:44,399 --> 00:32:46,559
makes everything easier if when you

692
00:32:46,559 --> 00:32:48,080
close the connect stream everything's

693
00:32:48,080 --> 00:32:50,320
done

694
00:32:53,120 --> 00:32:56,000
i'm under impression that we're all at

695
00:32:56,000 --> 00:32:58,640
this point agreeing that closing the

696
00:32:58,640 --> 00:33:00,240
connect stream

697
00:33:00,240 --> 00:33:02,000
uh effectively

698
00:33:02,000 --> 00:33:04,720
closes everything on the

699
00:33:04,720 --> 00:33:05,760
session

700
00:33:05,760 --> 00:33:08,880
which i think is the current text of the

701
00:33:08,880 --> 00:33:10,960
draft i need to make sure that this is

702
00:33:10,960 --> 00:33:12,720
very clear on this

703
00:33:12,720 --> 00:33:14,159
uh but

704
00:33:14,159 --> 00:33:14,960
that

705
00:33:14,960 --> 00:33:17,120
sounds like we

706
00:33:17,120 --> 00:33:18,399
are

707
00:33:18,399 --> 00:33:20,960
good to just keep it as is

708
00:33:20,960 --> 00:33:23,960
uh

709
00:33:24,080 --> 00:33:25,760
i forgot to end it that's fine but

710
00:33:25,760 --> 00:33:27,360
please state your name yeah magnus

711
00:33:27,360 --> 00:33:30,240
pestle um

712
00:33:30,240 --> 00:33:32,640
one question i have is about receiving

713
00:33:32,640 --> 00:33:33,840
the data

714
00:33:33,840 --> 00:33:36,559
that if you're basically sending the

715
00:33:36,559 --> 00:33:37,840
rest of the data you have and then you

716
00:33:37,840 --> 00:33:39,760
hit close

717
00:33:39,760 --> 00:33:42,080
is the risk that the receiver will

718
00:33:42,080 --> 00:33:45,039
get the close before the date the other

719
00:33:45,039 --> 00:33:45,919
like

720
00:33:45,919 --> 00:33:47,760
data is sent

721
00:33:47,760 --> 00:33:50,320
and then you reject it and that's

722
00:33:50,320 --> 00:33:51,600
i will be a little bit careful about

723
00:33:51,600 --> 00:33:54,640
that particular use case

724
00:33:54,640 --> 00:33:56,159
well

725
00:33:56,159 --> 00:33:58,720
what happens in that situation so in

726
00:33:58,720 --> 00:34:01,679
there is in web transport a uh sorry

727
00:34:01,679 --> 00:34:02,960
i'll guess i'll just jump in victor if

728
00:34:02,960 --> 00:34:04,640
that's okay with you a like closed

729
00:34:04,640 --> 00:34:06,880
session capsule that is the like

730
00:34:06,880 --> 00:34:08,639
graceful close so that's what you would

731
00:34:08,639 --> 00:34:10,159
do yeah

732
00:34:10,159 --> 00:34:11,599
and so

733
00:34:11,599 --> 00:34:13,918
this is about and then once all that is

734
00:34:13,918 --> 00:34:16,399
done then you can close the stream okay

735
00:34:16,399 --> 00:34:18,560
yeah

736
00:34:18,960 --> 00:34:21,839
to clarify there are effectively three

737
00:34:21,839 --> 00:34:23,440
ways you can

738
00:34:23,440 --> 00:34:26,000
close the connect stream you can close

739
00:34:26,000 --> 00:34:28,960
it by sending close session capsule

740
00:34:28,960 --> 00:34:31,440
which gives you the session which gives

741
00:34:31,440 --> 00:34:34,480
you the status code you can close it by

742
00:34:34,480 --> 00:34:36,960
just sending thin which is equivalent to

743
00:34:36,960 --> 00:34:39,359
sending an empty capsule

744
00:34:39,359 --> 00:34:41,040
and

745
00:34:41,040 --> 00:34:43,520
you can reset and

746
00:34:43,520 --> 00:34:45,679
this issue roughly covers all three of

747
00:34:45,679 --> 00:34:48,320
those cases

748
00:34:48,320 --> 00:34:51,040
uh but yeah in general since the

749
00:34:51,040 --> 00:34:53,040
metaphor i'm using is connection close

750
00:34:53,040 --> 00:34:54,480
and quick and quick when you close

751
00:34:54,480 --> 00:34:56,800
connection you no longer care about any

752
00:34:56,800 --> 00:34:59,760
data that's being sent on the connection

753
00:34:59,760 --> 00:35:01,680
except possibly for transmitting the

754
00:35:01,680 --> 00:35:04,640
close itself

755
00:35:08,400 --> 00:35:11,599
the next issue and i think the last

756
00:35:11,599 --> 00:35:12,720
issue

757
00:35:12,720 --> 00:35:15,520
the one we i think deferred

758
00:35:15,520 --> 00:35:16,800
many

759
00:35:16,800 --> 00:35:19,680
meetings ago and nothing happened so i'm

760
00:35:19,680 --> 00:35:21,040
bringing it here

761
00:35:21,040 --> 00:35:22,400
is

762
00:35:22,400 --> 00:35:26,240
how do we handle health service header

763
00:35:26,240 --> 00:35:28,240
uh

764
00:35:28,240 --> 00:35:29,599
the

765
00:35:29,599 --> 00:35:32,320
current answer is uh

766
00:35:32,320 --> 00:35:36,000
we de facto do not do anything without

767
00:35:36,000 --> 00:35:37,440
service header

768
00:35:37,440 --> 00:35:39,760
and

769
00:35:40,640 --> 00:35:44,400
there are two modes in which

770
00:35:44,400 --> 00:35:48,720
web transport can operate

771
00:35:48,720 --> 00:35:51,200
it can operate in a pooled mode and it

772
00:35:51,200 --> 00:35:53,680
can operate by having a dedicated

773
00:35:53,680 --> 00:35:54,800
connection

774
00:35:54,800 --> 00:35:56,480
and in case of

775
00:35:56,480 --> 00:35:57,760
and

776
00:35:57,760 --> 00:36:00,000
this is complicated that to some extent

777
00:36:00,000 --> 00:36:04,640
we have to do this for both and for

778
00:36:04,640 --> 00:36:06,879
oh

779
00:36:08,560 --> 00:36:11,359
for pooled we have to be cognizant of

780
00:36:11,359 --> 00:36:14,240
what regular http 3 does

781
00:36:14,240 --> 00:36:18,000
uh and one of the tricky

782
00:36:18,000 --> 00:36:20,480
one of the first questions i have before

783
00:36:20,480 --> 00:36:22,960
even discussing this issue is

784
00:36:22,960 --> 00:36:26,880
whether this belongs in the iatf draft

785
00:36:26,880 --> 00:36:29,280
or or doubly first t draft or this

786
00:36:29,280 --> 00:36:30,880
belongs in fetch

787
00:36:30,880 --> 00:36:33,680
uh martin

788
00:36:37,119 --> 00:36:38,839
okay so

789
00:36:38,839 --> 00:36:42,000
there's the easy part of this one is

790
00:36:42,000 --> 00:36:44,640
that if you get not serviced

791
00:36:44,640 --> 00:36:47,119
in your response

792
00:36:47,119 --> 00:36:48,640
you still

793
00:36:48,640 --> 00:36:51,599
connection available and carry on with

794
00:36:51,599 --> 00:36:53,440
the requests that you have open on that

795
00:36:53,440 --> 00:36:55,280
connection and the web transport session

796
00:36:55,280 --> 00:36:56,720
will be just another one of those

797
00:36:56,720 --> 00:36:58,079
requests

798
00:36:58,079 --> 00:36:59,680
running on that connection

799
00:36:59,680 --> 00:37:02,880
so in terms of the effect on a transport

800
00:37:02,880 --> 00:37:04,800
session it should be

801
00:37:04,800 --> 00:37:06,320
nothing

802
00:37:06,320 --> 00:37:08,320
it may affect what the browser does with

803
00:37:08,320 --> 00:37:10,000
future requests

804
00:37:10,000 --> 00:37:12,160
but that's um

805
00:37:12,160 --> 00:37:13,599
that's not something that word transfer

806
00:37:13,599 --> 00:37:15,760
necessarily has to worry concern itself

807
00:37:15,760 --> 00:37:16,640
with

808
00:37:16,640 --> 00:37:19,200
the um

809
00:37:19,200 --> 00:37:21,520
the sort of broader questions about how

810
00:37:21,520 --> 00:37:23,920
to transport and interact with

811
00:37:23,920 --> 00:37:25,760
connections with

812
00:37:25,760 --> 00:37:27,760
all of this i would just say look

813
00:37:27,760 --> 00:37:29,599
there's an alt service biz going on in

814
00:37:29,599 --> 00:37:32,400
http working group at the moment and let

815
00:37:32,400 --> 00:37:34,400
them sort it out and when i save them i

816
00:37:34,400 --> 00:37:35,440
mean it's

817
00:37:35,440 --> 00:37:37,119
mike and myself

818
00:37:37,119 --> 00:37:39,680
probably but um we'll see how

819
00:37:39,680 --> 00:37:42,879
how that works out for us all

820
00:37:43,440 --> 00:37:46,079
i see does does this mean we can so far

821
00:37:46,079 --> 00:37:48,560
close as they show on our side

822
00:37:48,560 --> 00:37:51,280
that's essentially what i was saying yes

823
00:37:51,280 --> 00:37:54,560
uh all right uh that that makes things

824
00:37:54,560 --> 00:37:55,760
easier for me

825
00:37:55,760 --> 00:37:58,960
uh thank you martin

826
00:38:01,359 --> 00:38:05,440
uh and uh i sang this and

827
00:38:05,440 --> 00:38:08,800
my slides so

828
00:38:13,839 --> 00:38:19,560
thank you victor uh eric come on up

829
00:38:29,440 --> 00:38:30,800
all right

830
00:38:30,800 --> 00:38:35,520
so this is still an hdb3 topic as we go

831
00:38:35,520 --> 00:38:37,200
um but we're splitting some of this

832
00:38:37,200 --> 00:38:39,119
across h3 and then we'll also talk about

833
00:38:39,119 --> 00:38:41,599
h2

834
00:38:42,320 --> 00:38:44,720
so let's talk about pooling

835
00:38:44,720 --> 00:38:47,440
we have decided a while back that we

836
00:38:47,440 --> 00:38:49,200
would like to support pooling and that

837
00:38:49,200 --> 00:38:50,640
means that we want to be able to have

838
00:38:50,640 --> 00:38:52,720
more than one web transport session

839
00:38:52,720 --> 00:38:56,079
within a given http 3 connection

840
00:38:56,079 --> 00:38:57,680
and i've got a little side note here on

841
00:38:57,680 --> 00:38:59,119
the side that this is really not that

842
00:38:59,119 --> 00:39:01,680
much of an issue for h2

843
00:39:01,680 --> 00:39:03,760
because each session is fully

844
00:39:03,760 --> 00:39:06,000
encapsulated within one connect stream

845
00:39:06,000 --> 00:39:08,480
and h2 is already perfectly capable of

846
00:39:08,480 --> 00:39:10,320
having more than one connect stream and

847
00:39:10,320 --> 00:39:12,320
so a lot of the layering there

848
00:39:12,320 --> 00:39:13,119
uh

849
00:39:13,119 --> 00:39:15,200
works perfectly well and is not a huge

850
00:39:15,200 --> 00:39:16,400
problem

851
00:39:16,400 --> 00:39:17,359
um

852
00:39:17,359 --> 00:39:18,079
but

853
00:39:18,079 --> 00:39:21,200
within h3 we've kind of

854
00:39:21,200 --> 00:39:23,520
got these native h3 streams that we're

855
00:39:23,520 --> 00:39:25,839
also using for web transport and so we

856
00:39:25,839 --> 00:39:28,400
need to figure out how do we make more

857
00:39:28,400 --> 00:39:30,480
than one web transport session work

858
00:39:30,480 --> 00:39:31,920
there's also another consideration which

859
00:39:31,920 --> 00:39:34,079
applies to both versions of http which

860
00:39:34,079 --> 00:39:36,160
is that we want web transport to be able

861
00:39:36,160 --> 00:39:39,200
to coexist with regular

862
00:39:39,200 --> 00:39:41,440
http requests going over that h3

863
00:39:41,440 --> 00:39:43,040
connection not just

864
00:39:43,040 --> 00:39:46,079
web transport sessions

865
00:39:46,079 --> 00:39:46,880
so

866
00:39:46,880 --> 00:39:48,880
coming back to the pretty picture that

867
00:39:48,880 --> 00:39:52,079
we looked at last time um this is kind

868
00:39:52,079 --> 00:39:53,440
of visually

869
00:39:53,440 --> 00:39:55,200
what we think we're doing and we had

870
00:39:55,200 --> 00:39:57,040
this up in the context of flow control

871
00:39:57,040 --> 00:40:01,119
for h2 but essentially within http 2

872
00:40:01,119 --> 00:40:04,160
every web transport session is within a

873
00:40:04,160 --> 00:40:06,640
connect stream and you can have multiple

874
00:40:06,640 --> 00:40:08,319
of those

875
00:40:08,319 --> 00:40:10,800
pooling done

876
00:40:10,800 --> 00:40:13,200
h3 is a little bit more interesting

877
00:40:13,200 --> 00:40:15,920
because you have

878
00:40:15,920 --> 00:40:17,680
web transport sessions where here we've

879
00:40:17,680 --> 00:40:19,359
kind of broadened this box and this is

880
00:40:19,359 --> 00:40:20,720
all a little bit abstract so we don't

881
00:40:20,720 --> 00:40:22,160
need to get too into the details of this

882
00:40:22,160 --> 00:40:24,000
diagram but what we're really trying to

883
00:40:24,000 --> 00:40:26,960
convey is that we've got these different

884
00:40:26,960 --> 00:40:30,319
native http 3 streams that are serving

885
00:40:30,319 --> 00:40:32,319
different purposes on behalf of that web

886
00:40:32,319 --> 00:40:33,920
transport session

887
00:40:33,920 --> 00:40:36,079
and so if you want to have

888
00:40:36,079 --> 00:40:38,240
multiple web transport sessions those

889
00:40:38,240 --> 00:40:41,119
are by definition going to end up using

890
00:40:41,119 --> 00:40:44,960
multiple actual h3 streams um

891
00:40:44,960 --> 00:40:46,640
for the different web transport streams

892
00:40:46,640 --> 00:40:48,160
that go within those web transport

893
00:40:48,160 --> 00:40:51,160
sessions

894
00:40:52,160 --> 00:40:54,319
turns out we've actually got a bunch of

895
00:40:54,319 --> 00:40:57,520
different issues on github for this

896
00:40:57,520 --> 00:41:00,319
and there's been some interest expressed

897
00:41:00,319 --> 00:41:01,920
across each of them which is nice that

898
00:41:01,920 --> 00:41:03,920
we're consistent

899
00:41:03,920 --> 00:41:04,960
to

900
00:41:04,960 --> 00:41:07,599
essentially provide resource limits and

901
00:41:07,599 --> 00:41:09,680
not do a whole lot else

902
00:41:09,680 --> 00:41:12,640
so the proposal that i'm going to make

903
00:41:12,640 --> 00:41:14,000
with these slides

904
00:41:14,000 --> 00:41:15,359
for discussion

905
00:41:15,359 --> 00:41:18,560
is that we do the necessary things in

906
00:41:18,560 --> 00:41:20,720
order to keep any individual web

907
00:41:20,720 --> 00:41:23,520
transport session from uh essentially

908
00:41:23,520 --> 00:41:27,520
unfairly dominating the h3 connection

909
00:41:27,520 --> 00:41:29,599
and call it a day and explicitly that

910
00:41:29,599 --> 00:41:30,880
means we're not going to do anything to

911
00:41:30,880 --> 00:41:32,480
try to preclude

912
00:41:32,480 --> 00:41:34,240
future enhancements to this so as we

913
00:41:34,240 --> 00:41:36,000
discover other places where we need to

914
00:41:36,000 --> 00:41:37,920
do things um it would be great to do

915
00:41:37,920 --> 00:41:39,920
those as extensions but we're not going

916
00:41:39,920 --> 00:41:42,000
to put any time and energy into them

917
00:41:42,000 --> 00:41:43,920
right now

918
00:41:43,920 --> 00:41:45,680
and that would close all four of these

919
00:41:45,680 --> 00:41:47,440
different github issues which is a

920
00:41:47,440 --> 00:41:49,839
non-trivial chunk of what is remaining

921
00:41:49,839 --> 00:41:50,960
across

922
00:41:50,960 --> 00:41:51,839
the

923
00:41:51,839 --> 00:41:55,680
set of web transport repositories

924
00:41:56,880 --> 00:41:58,720
when we say resource limits

925
00:41:58,720 --> 00:42:00,720
we're effectively talking about flow

926
00:42:00,720 --> 00:42:03,599
control in its various forms

927
00:42:03,599 --> 00:42:04,800
and

928
00:42:04,800 --> 00:42:08,000
when we look at that for h3

929
00:42:08,000 --> 00:42:10,160
h3 is really inheriting

930
00:42:10,160 --> 00:42:11,839
that from quick

931
00:42:11,839 --> 00:42:14,400
but there already exists a way within a

932
00:42:14,400 --> 00:42:16,880
stream

933
00:42:16,880 --> 00:42:18,880
to limit the amount of data going by and

934
00:42:18,880 --> 00:42:20,800
there's also a way to limit the number

935
00:42:20,800 --> 00:42:22,880
of streams that you can open

936
00:42:22,880 --> 00:42:24,160
and so

937
00:42:24,160 --> 00:42:25,839
some of this is already taken care of

938
00:42:25,839 --> 00:42:27,520
and in the same way that h3 inherits

939
00:42:27,520 --> 00:42:29,440
things from quick web transport can

940
00:42:29,440 --> 00:42:32,880
potentially inherit them from h3

941
00:42:32,880 --> 00:42:35,520
what's left though is some sort of

942
00:42:35,520 --> 00:42:38,560
control on the maximum count of sessions

943
00:42:38,560 --> 00:42:39,760
that you can make

944
00:42:39,760 --> 00:42:42,560
right so if i wanted to open a million

945
00:42:42,560 --> 00:42:45,200
web transport sessions within my h3

946
00:42:45,200 --> 00:42:47,520
uh connection that might not leave any

947
00:42:47,520 --> 00:42:49,200
room for

948
00:42:49,200 --> 00:42:51,200
non-web transport requests to go on

949
00:42:51,200 --> 00:42:52,560
there

950
00:42:52,560 --> 00:42:54,640
and also the count of streams for each

951
00:42:54,640 --> 00:42:56,880
session for the same reason because the

952
00:42:56,880 --> 00:42:59,359
streams are native h3 streams

953
00:42:59,359 --> 00:43:02,799
those are kind of entangled

954
00:43:03,680 --> 00:43:05,680
we do have a

955
00:43:05,680 --> 00:43:08,960
note in both h3 and also actually in h2

956
00:43:08,960 --> 00:43:10,160
right now

957
00:43:10,160 --> 00:43:12,960
that says that we don't actually go out

958
00:43:12,960 --> 00:43:15,920
of our way to provide any limit on the

959
00:43:15,920 --> 00:43:17,920
number of web transport sessions

960
00:43:17,920 --> 00:43:20,640
uh that you can open and that instead

961
00:43:20,640 --> 00:43:22,319
there's two different ways that the

962
00:43:22,319 --> 00:43:24,720
server or the the receiver of that can

963
00:43:24,720 --> 00:43:26,480
just say nope

964
00:43:26,480 --> 00:43:28,480
this isn't happening and i just reject

965
00:43:28,480 --> 00:43:29,440
it

966
00:43:29,440 --> 00:43:31,040
so we could choose to say that is

967
00:43:31,040 --> 00:43:32,400
sufficient

968
00:43:32,400 --> 00:43:35,520
to qualify as a resource limit

969
00:43:35,520 --> 00:43:38,160
and that's what we've done up until now

970
00:43:38,160 --> 00:43:40,400
but we could also potentially i think

971
00:43:40,400 --> 00:43:42,640
without too much additional complexity

972
00:43:42,640 --> 00:43:45,599
uh take it a little bit further

973
00:43:45,599 --> 00:43:46,800
so

974
00:43:46,800 --> 00:43:48,800
one way to do that and this part is

975
00:43:48,800 --> 00:43:50,720
strictly optional especially in light of

976
00:43:50,720 --> 00:43:52,160
the previous slide

977
00:43:52,160 --> 00:43:54,240
is to take our current switch for

978
00:43:54,240 --> 00:43:55,839
something like settings enable web

979
00:43:55,839 --> 00:43:56,960
transport

980
00:43:56,960 --> 00:43:59,520
and change it to be a setting like web

981
00:43:59,520 --> 00:44:01,920
transport max sessions or bike shed on

982
00:44:01,920 --> 00:44:02,880
the name

983
00:44:02,880 --> 00:44:04,319
at any point

984
00:44:04,319 --> 00:44:06,800
but effectively if you set that to one

985
00:44:06,800 --> 00:44:08,880
that has the nice property of saying i'm

986
00:44:08,880 --> 00:44:11,119
allowing one web transport session

987
00:44:11,119 --> 00:44:13,040
within this h3 connection

988
00:44:13,040 --> 00:44:14,160
and

989
00:44:14,160 --> 00:44:16,079
if at that point you know there's not

990
00:44:16,079 --> 00:44:17,599
really any pooling

991
00:44:17,599 --> 00:44:19,760
if you set it to more than one now you

992
00:44:19,760 --> 00:44:22,400
have as many as you've allowed

993
00:44:22,400 --> 00:44:25,599
and everybody's in good shape

994
00:44:27,040 --> 00:44:29,839
the other places where we generally talk

995
00:44:29,839 --> 00:44:32,960
about flow control kind of follow this

996
00:44:32,960 --> 00:44:35,280
almost tiered

997
00:44:35,280 --> 00:44:36,480
layers

998
00:44:36,480 --> 00:44:38,480
on which you have limits for different

999
00:44:38,480 --> 00:44:40,800
resources that can be consumed and this

1000
00:44:40,800 --> 00:44:42,960
is very very similar in shape for the

1001
00:44:42,960 --> 00:44:45,520
way that we did this within http2 it's

1002
00:44:45,520 --> 00:44:47,440
also very similar to how it looks in

1003
00:44:47,440 --> 00:44:48,960
quick and so

1004
00:44:48,960 --> 00:44:51,440
uh in the spirit of maintaining

1005
00:44:51,440 --> 00:44:53,280
similarity with that

1006
00:44:53,280 --> 00:44:55,040
making something that parallels that

1007
00:44:55,040 --> 00:44:57,520
very closely for web transport seems

1008
00:44:57,520 --> 00:44:59,599
appreciably nice

1009
00:44:59,599 --> 00:45:01,599
the layers that we have there are this

1010
00:45:01,599 --> 00:45:02,960
total session count which we've just

1011
00:45:02,960 --> 00:45:04,560
been talking about

1012
00:45:04,560 --> 00:45:06,400
limiting the number of streams within a

1013
00:45:06,400 --> 00:45:08,160
web transport session

1014
00:45:08,160 --> 00:45:10,800
and then we have essentially

1015
00:45:10,800 --> 00:45:13,119
session level flow control for total

1016
00:45:13,119 --> 00:45:15,680
data and then stream level flow control

1017
00:45:15,680 --> 00:45:17,520
within each stream

1018
00:45:17,520 --> 00:45:19,200
and this is very much the same pattern

1019
00:45:19,200 --> 00:45:22,078
that we have elsewhere

1020
00:45:22,560 --> 00:45:24,319
the way that we

1021
00:45:24,319 --> 00:45:26,240
generally do that

1022
00:45:26,240 --> 00:45:28,880
for example within quick is we have a

1023
00:45:28,880 --> 00:45:30,800
max streams frame that adjusts the limit

1024
00:45:30,800 --> 00:45:32,560
on the number of streams and then we

1025
00:45:32,560 --> 00:45:34,800
have max data and max stream data and of

1026
00:45:34,800 --> 00:45:35,760
course all of these have their

1027
00:45:35,760 --> 00:45:37,599
associated blocked

1028
00:45:37,599 --> 00:45:39,280
frames as well to help with debugging

1029
00:45:39,280 --> 00:45:42,240
and other issues like that

1030
00:45:42,240 --> 00:45:43,599
we have this

1031
00:45:43,599 --> 00:45:46,160
nice property here in which because web

1032
00:45:46,160 --> 00:45:47,839
transport over h3

1033
00:45:47,839 --> 00:45:50,560
is already using native h3 streams

1034
00:45:50,560 --> 00:45:51,839
those have

1035
00:45:51,839 --> 00:45:52,800
a

1036
00:45:52,800 --> 00:45:55,119
flow control limit on them already from

1037
00:45:55,119 --> 00:45:57,440
quick which is that mastering data frame

1038
00:45:57,440 --> 00:45:58,800
so we don't actually need a new one

1039
00:45:58,800 --> 00:45:59,599
there

1040
00:45:59,599 --> 00:46:02,560
that is already present

1041
00:46:02,560 --> 00:46:05,040
and if we do the

1042
00:46:05,040 --> 00:46:06,880
maxweb transport

1043
00:46:06,880 --> 00:46:09,119
sessions setting

1044
00:46:09,119 --> 00:46:12,319
then we don't need any other limit for

1045
00:46:12,319 --> 00:46:13,920
total session count that takes care of

1046
00:46:13,920 --> 00:46:14,800
that

1047
00:46:14,800 --> 00:46:15,839
and so

1048
00:46:15,839 --> 00:46:18,000
that leaves us with

1049
00:46:18,000 --> 00:46:19,359
limiting the number of streams within a

1050
00:46:19,359 --> 00:46:20,960
web transport session and limiting the

1051
00:46:20,960 --> 00:46:23,040
total data within that web transport

1052
00:46:23,040 --> 00:46:25,359
session

1053
00:46:25,440 --> 00:46:27,599
and it would not be particularly hard to

1054
00:46:27,599 --> 00:46:31,359
do that with a web transport max streams

1055
00:46:31,359 --> 00:46:34,240
capsule and a web transport max data

1056
00:46:34,240 --> 00:46:36,640
capsule

1057
00:46:38,079 --> 00:46:40,839
if we go back to our pretty picture from

1058
00:46:40,839 --> 00:46:43,520
before i've added some

1059
00:46:43,520 --> 00:46:45,680
vaguely shaped annotations to kind of

1060
00:46:45,680 --> 00:46:47,520
try to help visualize what this means

1061
00:46:47,520 --> 00:46:49,280
this may or may not be meaningful if it

1062
00:46:49,280 --> 00:46:50,880
is not no worries

1063
00:46:50,880 --> 00:46:53,359
so the first one is down at the bottom

1064
00:46:53,359 --> 00:46:55,200
there we've got our setting for mac

1065
00:46:55,200 --> 00:46:57,760
sessions and i've put that around the

1066
00:46:57,760 --> 00:46:59,599
fun little dot dot dot that indicates

1067
00:46:59,599 --> 00:47:00,800
that you have more than one web

1068
00:47:00,800 --> 00:47:02,640
transport session

1069
00:47:02,640 --> 00:47:03,760
and then

1070
00:47:03,760 --> 00:47:04,800
within

1071
00:47:04,800 --> 00:47:07,599
that web transport session you've got a

1072
00:47:07,599 --> 00:47:09,359
limit on the maximum number of streams

1073
00:47:09,359 --> 00:47:10,800
that you're willing to devote to that

1074
00:47:10,800 --> 00:47:12,720
web transport session as opposed to a

1075
00:47:12,720 --> 00:47:14,720
different one this is to

1076
00:47:14,720 --> 00:47:17,839
basically allow you to portion out the

1077
00:47:17,839 --> 00:47:19,760
uh stream limit that you have for the

1078
00:47:19,760 --> 00:47:21,920
total h3 connection

1079
00:47:21,920 --> 00:47:23,440
and then within

1080
00:47:23,440 --> 00:47:25,200
that web transport session across all of

1081
00:47:25,200 --> 00:47:26,720
the streams for that session you can do

1082
00:47:26,720 --> 00:47:28,240
the same thing for the number of bytes

1083
00:47:28,240 --> 00:47:30,720
so you've got count of streams plus

1084
00:47:30,720 --> 00:47:33,439
you've got bytes

1085
00:47:34,559 --> 00:47:36,640
this is going to be

1086
00:47:36,640 --> 00:47:39,200
interesting and we're about to have a

1087
00:47:39,200 --> 00:47:40,960
discussion in a little bit about

1088
00:47:40,960 --> 00:47:43,680
capsules for htv2

1089
00:47:43,680 --> 00:47:46,000
but it's worth noting that this looks

1090
00:47:46,000 --> 00:47:48,319
exactly like the

1091
00:47:48,319 --> 00:47:51,119
two capsules that h2 is already defining

1092
00:47:51,119 --> 00:47:53,119
which are coincidentally called web

1093
00:47:53,119 --> 00:47:55,280
transport max streams and web transport

1094
00:47:55,280 --> 00:47:57,599
max data along with obviously their

1095
00:47:57,599 --> 00:47:59,280
blocked variants

1096
00:47:59,280 --> 00:48:00,240
so

1097
00:48:00,240 --> 00:48:01,599
potentially

1098
00:48:01,599 --> 00:48:03,119
if we've already defined those and we've

1099
00:48:03,119 --> 00:48:04,880
already got semantics for what they do

1100
00:48:04,880 --> 00:48:07,760
and those semantics match what we want

1101
00:48:07,760 --> 00:48:10,559
we could just use those in h3 as well

1102
00:48:10,559 --> 00:48:11,839
and

1103
00:48:11,839 --> 00:48:13,440
at that point

1104
00:48:13,440 --> 00:48:16,240
we bring in those two things

1105
00:48:16,240 --> 00:48:17,839
we've answered as much of the pooling

1106
00:48:17,839 --> 00:48:19,599
question as we're planning on answering

1107
00:48:19,599 --> 00:48:21,839
you've got associate the the uh

1108
00:48:21,839 --> 00:48:24,240
necessary resource limits

1109
00:48:24,240 --> 00:48:26,000
in order to make sure that different web

1110
00:48:26,000 --> 00:48:27,920
transports can coexist on an h3

1111
00:48:27,920 --> 00:48:31,040
connection along with other actual http

1112
00:48:31,040 --> 00:48:32,240
requests

1113
00:48:32,240 --> 00:48:35,280
everybody plays nice and

1114
00:48:35,280 --> 00:48:37,920
we are happy

1115
00:48:44,559 --> 00:48:47,559
martin

1116
00:48:49,920 --> 00:48:52,559
having connection level flow control on

1117
00:48:52,559 --> 00:48:54,800
the web transport level sounds like

1118
00:48:54,800 --> 00:48:56,319
sorry martin talk a bit closer to the

1119
00:48:56,319 --> 00:48:58,319
mic we can't hear you

1120
00:48:58,319 --> 00:49:00,400
having connection level flow control on

1121
00:49:00,400 --> 00:49:02,720
the web transport layer sounds like a

1122
00:49:02,720 --> 00:49:05,760
pretty severe layer violation since the

1123
00:49:05,760 --> 00:49:07,520
web transport layer would now need to

1124
00:49:07,520 --> 00:49:09,119
reach into quick

1125
00:49:09,119 --> 00:49:12,240
and ask how much data is buffered for

1126
00:49:12,240 --> 00:49:15,439
any of those streams

1127
00:49:15,520 --> 00:49:17,440
well quick is all about layer violation

1128
00:49:17,440 --> 00:49:20,079
so maybe we okay with that but i was

1129
00:49:20,079 --> 00:49:21,520
just wondering if you have any thoughts

1130
00:49:21,520 --> 00:49:23,839
on that

1131
00:49:24,240 --> 00:49:25,920
i don't have a

1132
00:49:25,920 --> 00:49:28,880
strong negative aversion to

1133
00:49:28,880 --> 00:49:30,800
keeping track within a web transport

1134
00:49:30,800 --> 00:49:31,760
session

1135
00:49:31,760 --> 00:49:34,000
of the amount of data that you're

1136
00:49:34,000 --> 00:49:36,400
allowed to send

1137
00:49:36,400 --> 00:49:38,400
and having a limit be communicated from

1138
00:49:38,400 --> 00:49:40,720
the other end about that

1139
00:49:40,720 --> 00:49:42,400
but if there's

1140
00:49:42,400 --> 00:49:44,720
it could also be that i'm not correctly

1141
00:49:44,720 --> 00:49:46,720
internalizing how painful that would

1142
00:49:46,720 --> 00:49:49,279
actually be

1143
00:49:49,839 --> 00:49:52,720
see david is not standing up yeah well

1144
00:49:52,720 --> 00:49:54,559
speaking as an individual participant

1145
00:49:54,559 --> 00:49:57,280
can someone perhaps kind of clarify

1146
00:49:57,280 --> 00:49:59,839
because in my limited understanding this

1147
00:49:59,839 --> 00:50:02,400
can be done all at the web transport

1148
00:50:02,400 --> 00:50:03,920
layer without having to

1149
00:50:03,920 --> 00:50:06,160
reach down into quick or violate

1150
00:50:06,160 --> 00:50:08,079
layering so can you maybe explain that a

1151
00:50:08,079 --> 00:50:09,680
bit better

1152
00:50:09,680 --> 00:50:10,880
yes so

1153
00:50:10,880 --> 00:50:12,640
of course you can read the data out of

1154
00:50:12,640 --> 00:50:14,720
the stream and then have all your

1155
00:50:14,720 --> 00:50:16,960
buffers at the web transport layer

1156
00:50:16,960 --> 00:50:19,599
so i guess my my question is um how do

1157
00:50:19,599 --> 00:50:22,640
we account for uh if they are missing

1158
00:50:22,640 --> 00:50:24,880
missing packets or missing frames on a

1159
00:50:24,880 --> 00:50:27,920
stream so in quick flow control then the

1160
00:50:27,920 --> 00:50:29,839
maximum offset that you have received

1161
00:50:29,839 --> 00:50:32,720
would count for flow control do we then

1162
00:50:32,720 --> 00:50:35,359
say like we don't care about this or we

1163
00:50:35,359 --> 00:50:38,319
let the quick layer handle this and we

1164
00:50:38,319 --> 00:50:40,559
have like this totally separate flow

1165
00:50:40,559 --> 00:50:42,559
control on

1166
00:50:42,559 --> 00:50:44,480
um on the web transport layer i i

1167
00:50:44,480 --> 00:50:46,319
haven't fully thought this through

1168
00:50:46,319 --> 00:50:48,720
because we are now reusing the the quick

1169
00:50:48,720 --> 00:50:50,960
flow control from this stream on the web

1170
00:50:50,960 --> 00:50:53,359
transport layer if there's any mismatch

1171
00:50:53,359 --> 00:50:55,119
there i would need some more time for

1172
00:50:55,119 --> 00:50:56,079
that

1173
00:50:56,079 --> 00:50:58,720
thanks yeah my and as individual

1174
00:50:58,720 --> 00:51:00,480
precipitate like naive understanding was

1175
00:51:00,480 --> 00:51:02,400
that this was a completely separate flow

1176
00:51:02,400 --> 00:51:05,920
control but again not uh let's let's let

1177
00:51:05,920 --> 00:51:09,640
mt jump in

1178
00:51:10,319 --> 00:51:12,400
yeah so so martin's right

1179
00:51:12,400 --> 00:51:14,319
this is basically

1180
00:51:14,319 --> 00:51:16,480
i i think it's near impossible to do

1181
00:51:16,480 --> 00:51:17,200
this

1182
00:51:17,200 --> 00:51:18,160
without

1183
00:51:18,160 --> 00:51:21,359
major major architectural

1184
00:51:21,359 --> 00:51:23,200
contortions

1185
00:51:23,200 --> 00:51:25,119
i suspect that probably the right thing

1186
00:51:25,119 --> 00:51:26,400
to do here is

1187
00:51:26,400 --> 00:51:31,440
is not deal with the session level um

1188
00:51:31,440 --> 00:51:33,760
data limits and simply say

1189
00:51:33,760 --> 00:51:35,040
that you have

1190
00:51:35,040 --> 00:51:37,599
a quick level flow control acting on on

1191
00:51:37,599 --> 00:51:39,200
the bytes

1192
00:51:39,200 --> 00:51:41,040
having a limit to the number of streams

1193
00:51:41,040 --> 00:51:42,480
that you dedicate

1194
00:51:42,480 --> 00:51:43,920
to

1195
00:51:43,920 --> 00:51:47,200
web transporters is still useful

1196
00:51:47,200 --> 00:51:49,599
it would be nice if we could stop web

1197
00:51:49,599 --> 00:51:52,160
transform transport from eating up all

1198
00:51:52,160 --> 00:51:53,599
the bites

1199
00:51:53,599 --> 00:51:56,559
and starving out the other things

1200
00:51:56,559 --> 00:52:01,119
but i don't see a way to do that easily

1201
00:52:01,200 --> 00:52:05,480
and it makes me nervous

1202
00:52:05,520 --> 00:52:07,599
so just to make sure i'm parsing what

1203
00:52:07,599 --> 00:52:10,000
you're saying correctly with this slide

1204
00:52:10,000 --> 00:52:11,119
here

1205
00:52:11,119 --> 00:52:13,119
the first two items

1206
00:52:13,119 --> 00:52:14,480
make sense and i think those are all

1207
00:52:14,480 --> 00:52:17,200
kind of fairly intuitive and

1208
00:52:17,200 --> 00:52:20,559
because we're able to punt the last one

1209
00:52:20,559 --> 00:52:21,359
to

1210
00:52:21,359 --> 00:52:24,800
just being quick's actual flow control

1211
00:52:24,800 --> 00:52:26,319
that saves us from having that be

1212
00:52:26,319 --> 00:52:28,079
particularly painful but it's the one

1213
00:52:28,079 --> 00:52:29,839
right above it that is exceptionally

1214
00:52:29,839 --> 00:52:31,520
painful

1215
00:52:31,520 --> 00:52:34,559
yeah i mean you

1216
00:52:34,559 --> 00:52:36,960
i don't want to force a web transport

1217
00:52:36,960 --> 00:52:39,920
implementation to suck all the bytes out

1218
00:52:39,920 --> 00:52:42,960
of the streams in order to get that that

1219
00:52:42,960 --> 00:52:44,720
limit enforced

1220
00:52:44,720 --> 00:52:47,520
knowing that that enforcement is going

1221
00:52:47,520 --> 00:52:49,599
to be imperfect at that point and i

1222
00:52:49,599 --> 00:52:51,280
certainly don't want to have it with its

1223
00:52:51,280 --> 00:52:52,559
tentacles

1224
00:52:52,559 --> 00:52:54,880
deeply embedded in the quick stack in

1225
00:52:54,880 --> 00:52:56,400
order to get the values that the quick

1226
00:52:56,400 --> 00:52:57,760
stack is using

1227
00:52:57,760 --> 00:52:59,280
so i

1228
00:52:59,280 --> 00:53:01,920
i think i'm i'm all for saying just

1229
00:53:01,920 --> 00:53:06,079
okay maybe we we just don't do that one

1230
00:53:06,079 --> 00:53:07,599
i think that seems reasonable i see

1231
00:53:07,599 --> 00:53:09,440
martin is

1232
00:53:09,440 --> 00:53:11,760
also

1233
00:53:12,240 --> 00:53:13,119
yeah

1234
00:53:13,119 --> 00:53:15,200
mac streams might also be a little bit

1235
00:53:15,200 --> 00:53:17,599
difficult because you don't have stream

1236
00:53:17,599 --> 00:53:20,480
ids on the web transport layer

1237
00:53:20,480 --> 00:53:21,280
and

1238
00:53:21,280 --> 00:53:23,520
so you would need some kind of stream

1239
00:53:23,520 --> 00:53:25,599
counting that synchronized between the

1240
00:53:25,599 --> 00:53:28,319
endpoints

1241
00:53:28,319 --> 00:53:29,599
just to be able to keep track of them

1242
00:53:29,599 --> 00:53:31,520
and know what's there yeah

1243
00:53:31,520 --> 00:53:32,960
in terms of

1244
00:53:32,960 --> 00:53:35,839
not doing the max data side of things

1245
00:53:35,839 --> 00:53:37,359
i don't see

1246
00:53:37,359 --> 00:53:39,359
a huge loss

1247
00:53:39,359 --> 00:53:40,400
if we're

1248
00:53:40,400 --> 00:53:42,960
not doing that right i mean the the

1249
00:53:42,960 --> 00:53:44,640
reason we have a lot of those tiers is

1250
00:53:44,640 --> 00:53:47,920
to allow people to be more restrictive

1251
00:53:47,920 --> 00:53:50,240
um and therefore allow any individual

1252
00:53:50,240 --> 00:53:53,599
stream to use that entire limit without

1253
00:53:53,599 --> 00:53:55,599
having to commit to using these you know

1254
00:53:55,599 --> 00:53:58,240
to being willing to devote the resources

1255
00:53:58,240 --> 00:54:01,359
for the sum of all of the streams um but

1256
00:54:01,359 --> 00:54:03,440
it's entirely possible that

1257
00:54:03,440 --> 00:54:07,599
you can tackle that elsewhere anyway

1258
00:54:16,800 --> 00:54:19,040
so many new buttons i'm sorry about that

1259
00:54:19,040 --> 00:54:20,240
um

1260
00:54:20,240 --> 00:54:22,160
the

1261
00:54:22,160 --> 00:54:24,400
mac streams one i think

1262
00:54:24,400 --> 00:54:26,480
would be an absolute number right so you

1263
00:54:26,480 --> 00:54:29,680
would say i'm dedicating 20 streams

1264
00:54:29,680 --> 00:54:32,000
to each web transport session

1265
00:54:32,000 --> 00:54:34,319
uh we probably have to have some sort of

1266
00:54:34,319 --> 00:54:36,799
minimum commitment

1267
00:54:36,799 --> 00:54:39,839
for the purposes of like this you must

1268
00:54:39,839 --> 00:54:41,680
provide this many streams

1269
00:54:41,680 --> 00:54:43,359
um but that doesn't mean that you're

1270
00:54:43,359 --> 00:54:45,440
gonna get that many streams

1271
00:54:45,440 --> 00:54:48,400
and so if you have enough but

1272
00:54:48,400 --> 00:54:50,480
you can just count how many streams

1273
00:54:50,480 --> 00:54:52,640
you've got at the moment there's a

1274
00:54:52,640 --> 00:54:54,559
little bit of trickiness in terms of the

1275
00:54:54,559 --> 00:54:56,960
accounting but i think we can make that

1276
00:54:56,960 --> 00:54:57,839
work

1277
00:54:57,839 --> 00:55:01,680
and of course if this if the quick layer

1278
00:55:01,680 --> 00:55:04,400
isn't able to issue new streams

1279
00:55:04,400 --> 00:55:06,160
faster then you won't be able to get up

1280
00:55:06,160 --> 00:55:09,359
to this limit but that's okay

1281
00:55:10,000 --> 00:55:11,599
and for what it's worth

1282
00:55:11,599 --> 00:55:12,799
i think that's

1283
00:55:12,799 --> 00:55:14,640
probably a good thing in the same way

1284
00:55:14,640 --> 00:55:17,119
that max data gives you

1285
00:55:17,119 --> 00:55:19,440
you know a way to say my i'm not willing

1286
00:55:19,440 --> 00:55:21,280
to take the sum of all of them in total

1287
00:55:21,280 --> 00:55:23,040
i want something smaller than that you

1288
00:55:23,040 --> 00:55:24,400
could always say

1289
00:55:24,400 --> 00:55:25,920
at the quick layer i'm only willing to

1290
00:55:25,920 --> 00:55:27,839
take this many streams but each web

1291
00:55:27,839 --> 00:55:29,280
transport session

1292
00:55:29,280 --> 00:55:31,440
is able to use all of them which does

1293
00:55:31,440 --> 00:55:33,359
not then commit you to the sum of all of

1294
00:55:33,359 --> 00:55:35,200
your web transport sessions

1295
00:55:35,200 --> 00:55:37,040
in stream count

1296
00:55:37,040 --> 00:55:38,400
so

1297
00:55:38,400 --> 00:55:40,160
what you thinking about sharing that

1298
00:55:40,160 --> 00:55:41,920
pool of streams between sessions or is

1299
00:55:41,920 --> 00:55:44,400
this the first stream one a procession

1300
00:55:44,400 --> 00:55:47,760
one no it's just the the fact that quick

1301
00:55:47,760 --> 00:55:50,240
has a limit on the max number of streams

1302
00:55:50,240 --> 00:55:53,599
is essentially the shared limit

1303
00:55:53,599 --> 00:55:55,760
yes yeah that's right

1304
00:55:55,760 --> 00:55:57,599
so at some level that's almost a feature

1305
00:55:57,599 --> 00:56:00,880
more than a pain point

1306
00:56:01,280 --> 00:56:02,799
okay

1307
00:56:02,799 --> 00:56:04,640
i i think we we're going to want to try

1308
00:56:04,640 --> 00:56:07,760
this out to be sure though

1309
00:56:07,760 --> 00:56:10,160
for sure

1310
00:56:12,960 --> 00:56:16,480
alan from dell uh so i think i i hear

1311
00:56:16,480 --> 00:56:19,440
the like concern that max data is

1312
00:56:19,440 --> 00:56:21,359
hard maybe i don't know i want to say

1313
00:56:21,359 --> 00:56:22,960
impossible but much harder than stream

1314
00:56:22,960 --> 00:56:24,160
so i think

1315
00:56:24,160 --> 00:56:27,040
maybe what makes sense is we we

1316
00:56:27,040 --> 00:56:29,200
separate this out and

1317
00:56:29,200 --> 00:56:32,720
kind of table max data for now but i

1318
00:56:32,720 --> 00:56:34,319
i'm left a little uncomfortable thinking

1319
00:56:34,319 --> 00:56:37,760
that like one session can cannibalize

1320
00:56:37,760 --> 00:56:39,839
quick's entire flow control and leave

1321
00:56:39,839 --> 00:56:41,599
other sessions blocked

1322
00:56:41,599 --> 00:56:45,359
um and so be good to have a solution but

1323
00:56:45,359 --> 00:56:47,200
you know how complicated it needs to be

1324
00:56:47,200 --> 00:56:49,280
is it worth implementing maybe not

1325
00:56:49,280 --> 00:56:50,799
um

1326
00:56:50,799 --> 00:56:51,760
so

1327
00:56:51,760 --> 00:56:53,119
i but i think

1328
00:56:53,119 --> 00:56:54,640
i'm okay for the

1329
00:56:54,640 --> 00:56:56,319
to move forward here like let's just

1330
00:56:56,319 --> 00:56:58,160
look at streams for now and maybe keep

1331
00:56:58,160 --> 00:57:00,720
an issue open to revisit data or have

1332
00:57:00,720 --> 00:57:02,480
somebody sketch it out like what would

1333
00:57:02,480 --> 00:57:04,799
it really take

1334
00:57:04,799 --> 00:57:08,319
um jumping in as chair here um

1335
00:57:08,319 --> 00:57:10,720
that what i would propose as chair

1336
00:57:10,720 --> 00:57:13,440
assuming folks agree is

1337
00:57:13,440 --> 00:57:14,240
um

1338
00:57:14,240 --> 00:57:16,240
well starting first with like limiting

1339
00:57:16,240 --> 00:57:18,720
the total session count via settings my

1340
00:57:18,720 --> 00:57:21,280
understanding from the room that

1341
00:57:21,280 --> 00:57:24,880
i i'm hearing consensus that that's good

1342
00:57:24,880 --> 00:57:26,640
if anyone disagrees please come to the

1343
00:57:26,640 --> 00:57:29,359
mic line now

1344
00:57:33,599 --> 00:57:35,839
okay

1345
00:57:36,319 --> 00:57:38,960
like limiting max streams

1346
00:57:38,960 --> 00:57:40,400
it sounds like

1347
00:57:40,400 --> 00:57:43,839
this might be hard but we want to try so

1348
00:57:43,839 --> 00:57:45,920
i'm getting consensus

1349
00:57:45,920 --> 00:57:48,079
let's write a pr to do this and have

1350
00:57:48,079 --> 00:57:49,880
someone implement it and

1351
00:57:49,880 --> 00:57:51,119
[Music]

1352
00:57:51,119 --> 00:57:54,799
see from there if you disagree please

1353
00:57:54,799 --> 00:57:57,119
jump up to the mic

1354
00:57:57,119 --> 00:57:59,359
i'm getting a sense that

1355
00:57:59,359 --> 00:58:00,880
max data

1356
00:58:00,880 --> 00:58:04,160
most folks think that it's too hard

1357
00:58:04,160 --> 00:58:07,760
but alan thinks it might be possible

1358
00:58:07,760 --> 00:58:11,200
i personally as well as chair i i don't

1359
00:58:11,200 --> 00:58:13,359
love the idea of keeping an

1360
00:58:13,359 --> 00:58:14,799
issue open

1361
00:58:14,799 --> 00:58:16,799
with no clear resolution points so what

1362
00:58:16,799 --> 00:58:19,119
i would suggest would be to

1363
00:58:19,119 --> 00:58:21,839
close the issue and if someone has a

1364
00:58:21,839 --> 00:58:23,760
design that they've implemented that

1365
00:58:23,760 --> 00:58:25,359
they they want to bring to the working

1366
00:58:25,359 --> 00:58:26,640
group to say

1367
00:58:26,640 --> 00:58:28,720
i figured out how to do this

1368
00:58:28,720 --> 00:58:30,400
please take a look can we put this in

1369
00:58:30,400 --> 00:58:31,599
the spec

1370
00:58:31,599 --> 00:58:33,520
they could reopen a new issue at that

1371
00:58:33,520 --> 00:58:35,520
point uh alan would that be an

1372
00:58:35,520 --> 00:58:38,000
accessible resolution for you and for

1373
00:58:38,000 --> 00:58:39,599
everyone else by the way if you disagree

1374
00:58:39,599 --> 00:58:41,200
please jump up

1375
00:58:41,200 --> 00:58:42,880
i'll just repeat what i said in the chat

1376
00:58:42,880 --> 00:58:45,119
which is i'm not any more sure than

1377
00:58:45,119 --> 00:58:48,880
anybody else that it's possible but i am

1378
00:58:48,880 --> 00:58:51,280
interested in spending some more time or

1379
00:58:51,280 --> 00:58:53,040
having also the group spend more time

1380
00:58:53,040 --> 00:58:55,200
exploring is it possible without bending

1381
00:58:55,200 --> 00:58:57,440
over backwards or doing something that's

1382
00:58:57,440 --> 00:58:59,599
not worth implementing uh

1383
00:58:59,599 --> 00:59:00,480
so

1384
00:59:00,480 --> 00:59:02,000
in terms of

1385
00:59:02,000 --> 00:59:03,760
i don't real i'm personally like to keep

1386
00:59:03,760 --> 00:59:05,280
the issues open until they're really

1387
00:59:05,280 --> 00:59:08,400
resolved but if i mean otherwise it

1388
00:59:08,400 --> 00:59:10,240
might get lost

1389
00:59:10,240 --> 00:59:12,240
but i'll let other people decide how we

1390
00:59:12,240 --> 00:59:15,439
want to handle administratively

1391
00:59:16,319 --> 00:59:18,960
my my take is if there's something that

1392
00:59:18,960 --> 00:59:21,760
no one has an intuition on how to solve

1393
00:59:21,760 --> 00:59:24,480
keeping it open like doesn't i don't see

1394
00:59:24,480 --> 00:59:26,880
a what leads us to closing it and so i'd

1395
00:59:26,880 --> 00:59:29,920
rather have like us fail like if no one

1396
00:59:29,920 --> 00:59:32,400
proposes anything the answer is gonna be

1397
00:59:32,400 --> 00:59:34,160
we're not doing it

1398
00:59:34,160 --> 00:59:35,920
and so i i would put the burden on

1399
00:59:35,920 --> 00:59:37,680
whoever and you know we're at a point on

1400
00:59:37,680 --> 00:59:39,440
this document where anyone can file an

1401
00:59:39,440 --> 00:59:40,960
issue so if anyone comes up with a

1402
00:59:40,960 --> 00:59:42,160
proposal

1403
00:59:42,160 --> 00:59:44,400
then they open an issue

1404
00:59:44,400 --> 00:59:45,760
that would be my personal preference but

1405
00:59:45,760 --> 00:59:48,000
if what if you really really disagree i

1406
00:59:48,000 --> 00:59:51,440
think we can keep it open but

1407
00:59:52,960 --> 00:59:54,799
no it's okay i mean go ahead and close

1408
00:59:54,799 --> 00:59:56,160
it if that's what we want to do i will

1409
00:59:56,160 --> 00:59:57,599
probably forget about it we will all

1410
00:59:57,599 --> 00:59:59,839
forget about it probably sometime after

1411
00:59:59,839 --> 01:00:00,880
we ship it

1412
01:00:00,880 --> 01:00:02,720
somebody will report a very complicated

1413
01:00:02,720 --> 01:00:04,799
bug where we've hit this issue and

1414
01:00:04,799 --> 01:00:05,839
complain

1415
01:00:05,839 --> 01:00:07,200
and then we'll kick ourselves for not

1416
01:00:07,200 --> 01:00:09,359
having spent more time on it

1417
01:00:09,359 --> 01:00:10,319
okay

1418
01:00:10,319 --> 01:00:12,960
all right well

1419
01:00:13,359 --> 01:00:16,160
so i'm getting uh plus one from the to

1420
01:00:16,160 --> 01:00:18,000
what i was proposing on the chat i'm

1421
01:00:18,000 --> 01:00:18,799
gonna

1422
01:00:18,799 --> 01:00:21,119
go with this then um all right i'll add

1423
01:00:21,119 --> 01:00:24,480
some text to uh these issues um eric if

1424
01:00:24,480 --> 01:00:27,960
you wanna keep going

1425
01:00:29,599 --> 01:00:31,040
sounds good

1426
01:00:31,040 --> 01:00:32,799
all right so basically we'll get that in

1427
01:00:32,799 --> 01:00:35,359
without max data get some experience

1428
01:00:35,359 --> 01:00:37,200
see how it feels and we can go from

1429
01:00:37,200 --> 01:00:39,119
there

1430
01:00:39,119 --> 01:00:40,839
all right skipping

1431
01:00:40,839 --> 01:00:42,480
ahead

1432
01:00:42,480 --> 01:00:46,160
that brings us to h2 and this ought to

1433
01:00:46,160 --> 01:00:49,520
actually be fairly quick

1434
01:00:49,520 --> 01:00:51,040
so

1435
01:00:51,040 --> 01:00:53,520
since 112 we've landed a bunch of the

1436
01:00:53,520 --> 01:00:56,160
changes that we talked about then

1437
01:00:56,160 --> 01:00:58,160
however a bunch of the changes that we

1438
01:00:58,160 --> 01:01:01,119
talked about then the resolution was

1439
01:01:01,119 --> 01:01:03,839
wait for the http datagram design team

1440
01:01:03,839 --> 01:01:04,960
in mask

1441
01:01:04,960 --> 01:01:07,599
which has now concluded so that is

1442
01:01:07,599 --> 01:01:10,400
fantastic we are unblocked on that

1443
01:01:10,400 --> 01:01:10,680
um

1444
01:01:10,680 --> 01:01:12,400
[Music]

1445
01:01:12,400 --> 01:01:15,520
the remaining outcome from that

1446
01:01:15,520 --> 01:01:18,640
that we need to decide what to do with

1447
01:01:18,640 --> 01:01:20,640
is capsules

1448
01:01:20,640 --> 01:01:22,960
so that's going to be where i suspect

1449
01:01:22,960 --> 01:01:25,839
we'll spend the bulk of our time today

1450
01:01:25,839 --> 01:01:27,440
before we do that there is one other

1451
01:01:27,440 --> 01:01:28,880
issue that

1452
01:01:28,880 --> 01:01:31,119
i think martin filed that is

1453
01:01:31,119 --> 01:01:33,200
something i wanted to bring up so we all

1454
01:01:33,200 --> 01:01:34,559
talk about it a little bit and see if

1455
01:01:34,559 --> 01:01:36,640
there's any intuition from anyone that

1456
01:01:36,640 --> 01:01:37,440
that

1457
01:01:37,440 --> 01:01:39,920
would prevent what seems like the right

1458
01:01:39,920 --> 01:01:42,640
answer to me

1459
01:01:43,280 --> 01:01:44,720
essentially this is talking about

1460
01:01:44,720 --> 01:01:46,960
sending frames before you actually get

1461
01:01:46,960 --> 01:01:48,400
the response back from that initial

1462
01:01:48,400 --> 01:01:49,920
connect message

1463
01:01:49,920 --> 01:01:52,160
so today there's text in the document

1464
01:01:52,160 --> 01:01:54,799
that says that intel your connect gets

1465
01:01:54,799 --> 01:01:56,720
back a response saying you know 200

1466
01:01:56,720 --> 01:01:58,480
you're good to go this is now a web

1467
01:01:58,480 --> 01:02:00,000
transport session

1468
01:02:00,000 --> 01:02:03,440
neither side can send any web transport

1469
01:02:03,440 --> 01:02:05,280
frames at all

1470
01:02:05,280 --> 01:02:08,000
you're stuck for that entire rtt

1471
01:02:08,000 --> 01:02:09,839
and i think martin very rightly points

1472
01:02:09,839 --> 01:02:10,640
out

1473
01:02:10,640 --> 01:02:12,480
that's basically just delaying things

1474
01:02:12,480 --> 01:02:14,400
arbitrarily

1475
01:02:14,400 --> 01:02:18,160
any frames that you're allowed to send

1476
01:02:18,160 --> 01:02:19,760
by the flow control limits et cetera et

1477
01:02:19,760 --> 01:02:21,359
cetera so any frame that would otherwise

1478
01:02:21,359 --> 01:02:23,359
be legitimate

1479
01:02:23,359 --> 01:02:25,520
why should we prevent you

1480
01:02:25,520 --> 01:02:26,559
from

1481
01:02:26,559 --> 01:02:28,319
sending them

1482
01:02:28,319 --> 01:02:31,440
and so the proposal here

1483
01:02:31,440 --> 01:02:35,520
is allow sending them don't force people

1484
01:02:35,520 --> 01:02:39,920
to have extra rtts or you know trips as

1485
01:02:39,920 --> 01:02:41,920
opposed to round trips

1486
01:02:41,920 --> 01:02:43,200
and

1487
01:02:43,200 --> 01:02:44,640
let everything get going a little bit

1488
01:02:44,640 --> 01:02:47,520
sooner if you want to wait

1489
01:02:47,520 --> 01:02:49,200
nothing stops you from waiting that can

1490
01:02:49,200 --> 01:02:50,799
be a nice simple easy way to implement

1491
01:02:50,799 --> 01:02:52,480
it but

1492
01:02:52,480 --> 01:02:54,160
if somebody wants to

1493
01:02:54,160 --> 01:02:57,119
put in the effort to correctly

1494
01:02:57,119 --> 01:02:59,520
you know send frames to allow things to

1495
01:02:59,520 --> 01:03:01,760
get going sooner especially since web

1496
01:03:01,760 --> 01:03:04,160
transport is focused on allowing the

1497
01:03:04,160 --> 01:03:06,640
server to also initiate web transport

1498
01:03:06,640 --> 01:03:09,039
streams if one of the first things that

1499
01:03:09,039 --> 01:03:10,640
you're planning on doing is having the

1500
01:03:10,640 --> 01:03:13,119
server open a number of streams

1501
01:03:13,119 --> 01:03:15,680
then having it be able to send those

1502
01:03:15,680 --> 01:03:18,960
frames uh without waiting for the

1503
01:03:18,960 --> 01:03:20,559
connect response to get to the client

1504
01:03:20,559 --> 01:03:22,000
and then for

1505
01:03:22,000 --> 01:03:24,160
frames to get back from the client

1506
01:03:24,160 --> 01:03:25,599
to the server so that it can then open

1507
01:03:25,599 --> 01:03:28,799
some streams seems really very pleasing

1508
01:03:28,799 --> 01:03:29,760
so

1509
01:03:29,760 --> 01:03:32,319
if anybody is

1510
01:03:32,319 --> 01:03:33,760
strongly opposed to that or sees a

1511
01:03:33,760 --> 01:03:35,280
reason why we should keep that

1512
01:03:35,280 --> 01:03:37,359
restriction around uh now would be the

1513
01:03:37,359 --> 01:03:39,680
time to speak because it seems great to

1514
01:03:39,680 --> 01:03:41,599
let things get going and not have extra

1515
01:03:41,599 --> 01:03:42,799
rtts

1516
01:03:42,799 --> 01:03:46,079
uh be there when we don't need them

1517
01:03:53,200 --> 01:03:54,880
excellent

1518
01:03:54,880 --> 01:03:57,280
we will take silence as an indication of

1519
01:03:57,280 --> 01:04:00,240
no major problems

1520
01:04:02,400 --> 01:04:05,520
that brings us to the fun part of these

1521
01:04:05,520 --> 01:04:08,400
slides for some values of fun

1522
01:04:08,400 --> 01:04:12,039
which is capsules

1523
01:04:12,960 --> 01:04:15,520
so the datagram design team is now

1524
01:04:15,520 --> 01:04:17,839
complete thank you david and a bunch of

1525
01:04:17,839 --> 01:04:20,000
other fine folk who

1526
01:04:20,000 --> 01:04:22,160
participated there and helped get that

1527
01:04:22,160 --> 01:04:23,680
out in time so that we could talk about

1528
01:04:23,680 --> 01:04:26,000
this here

1529
01:04:26,000 --> 01:04:28,319
previously in h2

1530
01:04:28,319 --> 01:04:31,200
we defined tlvs for every web transport

1531
01:04:31,200 --> 01:04:32,799
frame

1532
01:04:32,799 --> 01:04:34,400
and

1533
01:04:34,400 --> 01:04:36,240
now that capsules are a thing we could

1534
01:04:36,240 --> 01:04:37,839
potentially be registering them instead

1535
01:04:37,839 --> 01:04:40,400
of in our registry of

1536
01:04:40,400 --> 01:04:42,400
places where

1537
01:04:42,400 --> 01:04:44,720
we keep our list of web transport frames

1538
01:04:44,720 --> 01:04:47,680
to use with h2 we could register them in

1539
01:04:47,680 --> 01:04:50,000
a different registry where we keep the

1540
01:04:50,000 --> 01:04:51,599
list of capsules

1541
01:04:51,599 --> 01:04:52,880
and so that brings up the somewhat

1542
01:04:52,880 --> 01:04:55,520
obvious question of great so what do we

1543
01:04:55,520 --> 01:04:58,319
get if we use capsules

1544
01:04:58,319 --> 01:05:01,039
and this is our current list of frames

1545
01:05:01,039 --> 01:05:02,880
we arrived at this a couple of meetings

1546
01:05:02,880 --> 01:05:06,240
ago it's basically the minimal subset of

1547
01:05:06,240 --> 01:05:08,319
things that we need in order to send on

1548
01:05:08,319 --> 01:05:10,799
the connect stream so that web transport

1549
01:05:10,799 --> 01:05:12,720
works

1550
01:05:12,720 --> 01:05:15,119
if we use capsules there exists this

1551
01:05:15,119 --> 01:05:18,079
cool capsule already called datagram

1552
01:05:18,079 --> 01:05:20,559
and we could potentially just use that

1553
01:05:20,559 --> 01:05:24,160
instead of having it be wt datagram

1554
01:05:24,160 --> 01:05:25,440
the definition is the same the wire

1555
01:05:25,440 --> 01:05:27,039
format is the same the semantics are

1556
01:05:27,039 --> 01:05:29,280
essentially the same

1557
01:05:29,280 --> 01:05:31,520
with a little bit of

1558
01:05:31,520 --> 01:05:32,799
caveat that we'll talk about a little

1559
01:05:32,799 --> 01:05:33,839
bit later

1560
01:05:33,839 --> 01:05:35,599
the other benefit here is if we were

1561
01:05:35,599 --> 01:05:37,599
planning on using

1562
01:05:37,599 --> 01:05:40,160
any of these other ones like wtmax

1563
01:05:40,160 --> 01:05:44,079
streams and wt streams blocked from h3

1564
01:05:44,079 --> 01:05:46,079
having them be capsules that you can

1565
01:05:46,079 --> 01:05:49,359
just use from h2 you can use it from h3

1566
01:05:49,359 --> 01:05:50,960
everybody's happy

1567
01:05:50,960 --> 01:05:51,839
that

1568
01:05:51,839 --> 01:05:55,038
works out pretty nicely

1569
01:05:57,200 --> 01:05:58,960
we've just talked about removing web

1570
01:05:58,960 --> 01:06:02,000
transport max data from that list

1571
01:06:02,000 --> 01:06:03,520
so

1572
01:06:03,520 --> 01:06:05,599
the reuse here on the later part of this

1573
01:06:05,599 --> 01:06:07,280
slide was previously going to be web

1574
01:06:07,280 --> 01:06:08,960
transport mac streams along with the

1575
01:06:08,960 --> 01:06:10,559
blocked variant as well as web transport

1576
01:06:10,559 --> 01:06:12,720
max data along with the blocked variant

1577
01:06:12,720 --> 01:06:14,400
that would now just be web transport max

1578
01:06:14,400 --> 01:06:15,839
streams but the point is the same if

1579
01:06:15,839 --> 01:06:17,359
there's anything from h2 that we need to

1580
01:06:17,359 --> 01:06:18,720
reuse in h3

1581
01:06:18,720 --> 01:06:21,520
we can just use it it's great it's happy

1582
01:06:21,520 --> 01:06:23,200
we're in a shared registry already

1583
01:06:23,200 --> 01:06:26,640
anyway no problems there

1584
01:06:28,000 --> 01:06:30,799
the thing that i think

1585
01:06:30,799 --> 01:06:32,480
we want to discuss

1586
01:06:32,480 --> 01:06:33,440
is

1587
01:06:33,440 --> 01:06:36,160
whether the end to endianness

1588
01:06:36,160 --> 01:06:38,559
of these capsules

1589
01:06:38,559 --> 01:06:40,799
is going to be an issue is that a good

1590
01:06:40,799 --> 01:06:42,799
thing is that a bad thing

1591
01:06:42,799 --> 01:06:45,200
and so my understanding is that the tlvs

1592
01:06:45,200 --> 01:06:47,200
that we were previously defining for

1593
01:06:47,200 --> 01:06:49,200
your web transport over

1594
01:06:49,200 --> 01:06:50,400
h2

1595
01:06:50,400 --> 01:06:52,400
frames

1596
01:06:52,400 --> 01:06:54,319
were not end to end they would be

1597
01:06:54,319 --> 01:06:56,240
consumed by whoever's terminating that

1598
01:06:56,240 --> 01:06:57,359
particular

1599
01:06:57,359 --> 01:06:59,520
h2 connection

1600
01:06:59,520 --> 01:07:00,960
and

1601
01:07:00,960 --> 01:07:03,119
if you imagine a scenario

1602
01:07:03,119 --> 01:07:04,799
where

1603
01:07:04,799 --> 01:07:07,440
not everybody wants to implement or be

1604
01:07:07,440 --> 01:07:10,799
supporting web transport over h2 but we

1605
01:07:10,799 --> 01:07:13,280
do think that we need it maybe on the

1606
01:07:13,280 --> 01:07:15,280
actual connection over

1607
01:07:15,280 --> 01:07:17,039
you know kind of the last mile of the

1608
01:07:17,039 --> 01:07:18,720
internet to whatever client is

1609
01:07:18,720 --> 01:07:20,240
connecting because it may not have

1610
01:07:20,240 --> 01:07:21,680
access to quick

1611
01:07:21,680 --> 01:07:24,880
on some percentage of networks

1612
01:07:24,880 --> 01:07:27,200
you could imagine that an intermediary

1613
01:07:27,200 --> 01:07:30,319
would allow a client to fall back to web

1614
01:07:30,319 --> 01:07:32,880
transport over h2 but still want to

1615
01:07:32,880 --> 01:07:35,520
speak web transport over h3 to whatever

1616
01:07:35,520 --> 01:07:37,039
upstream or origin that it's going to be

1617
01:07:37,039 --> 01:07:39,039
talking to

1618
01:07:39,039 --> 01:07:40,400
and it would be doing that for all of

1619
01:07:40,400 --> 01:07:42,480
its clients so it would be talking h3

1620
01:07:42,480 --> 01:07:44,720
upstream all the time and it would

1621
01:07:44,720 --> 01:07:47,280
usually be talking h3 downstream to the

1622
01:07:47,280 --> 01:07:48,240
client

1623
01:07:48,240 --> 01:07:49,920
most of the time

1624
01:07:49,920 --> 01:07:51,520
but sometimes some of the clients are

1625
01:07:51,520 --> 01:07:53,359
going to need to fall back to h2 and we

1626
01:07:53,359 --> 01:07:56,400
want that to work

1627
01:07:56,400 --> 01:07:58,559
if we define these as capsules

1628
01:07:58,559 --> 01:08:00,720
in theory they are supposed to transit

1629
01:08:00,720 --> 01:08:02,960
that intermediary and go all the way to

1630
01:08:02,960 --> 01:08:04,799
the end and so the

1631
01:08:04,799 --> 01:08:07,440
question here is

1632
01:08:07,440 --> 01:08:09,119
web transport over h3 is currently

1633
01:08:09,119 --> 01:08:11,680
defining a whole bunch of capsules

1634
01:08:11,680 --> 01:08:14,720
if web transport over h2 is defining a

1635
01:08:14,720 --> 01:08:16,880
different set of capsules

1636
01:08:16,880 --> 01:08:18,479
we've just talked about reusing one or

1637
01:08:18,479 --> 01:08:19,920
two of them

1638
01:08:19,920 --> 01:08:22,158
but in general it's a not super

1639
01:08:22,158 --> 01:08:24,719
overlapping set

1640
01:08:24,719 --> 01:08:27,198
what is the expectation here

1641
01:08:27,198 --> 01:08:29,198
like when

1642
01:08:29,198 --> 01:08:31,040
my when i'm an intermediary going from

1643
01:08:31,040 --> 01:08:33,040
web transport over h2 to web transport

1644
01:08:33,040 --> 01:08:35,839
over h3 like does every web transport

1645
01:08:35,839 --> 01:08:38,158
speaking end point need to be able to

1646
01:08:38,158 --> 01:08:40,560
talk all of those because somebody in

1647
01:08:40,560 --> 01:08:42,719
the chain might have been using h2

1648
01:08:42,719 --> 01:08:46,239
or might have been using h3

1649
01:08:47,040 --> 01:08:49,759
so that brings us to our

1650
01:08:49,759 --> 01:08:51,839
discussion slide and i will move back

1651
01:08:51,839 --> 01:08:53,120
one here since i don't think having

1652
01:08:53,120 --> 01:08:54,319
discussion on the screen is super

1653
01:08:54,319 --> 01:08:56,640
helpful

1654
01:08:56,640 --> 01:08:59,600
thoughts and feelings

1655
01:09:04,479 --> 01:09:07,439
alan is in the queue

1656
01:09:07,439 --> 01:09:10,560
alan frindell so just to um

1657
01:09:10,560 --> 01:09:12,399
repeat what i just put in the chat which

1658
01:09:12,399 --> 01:09:14,158
is that

1659
01:09:14,158 --> 01:09:17,120
the datagram capsule it's end to end as

1660
01:09:17,120 --> 01:09:19,439
a concept but it's not transmitted at

1661
01:09:19,439 --> 01:09:20,479
each hop

1662
01:09:20,479 --> 01:09:22,479
as a capsule right when you go through a

1663
01:09:22,479 --> 01:09:24,158
hop and it came in

1664
01:09:24,158 --> 01:09:26,799
as a capsule but the other end supports

1665
01:09:26,799 --> 01:09:29,759
a native datagram concept then it's

1666
01:09:29,759 --> 01:09:31,279
the intermediary is allowed to sort of

1667
01:09:31,279 --> 01:09:32,880
convert

1668
01:09:32,880 --> 01:09:35,120
and so some of the capsules i don't even

1669
01:09:35,120 --> 01:09:36,319
know if you want to go back to the slide

1670
01:09:36,319 --> 01:09:38,399
that has them all uh

1671
01:09:38,399 --> 01:09:39,920
that might make sense

1672
01:09:39,920 --> 01:09:40,880
um

1673
01:09:40,880 --> 01:09:42,000
where

1674
01:09:42,000 --> 01:09:44,158
you know for example probably like reset

1675
01:09:44,158 --> 01:09:47,120
stream or stop sending can make sense in

1676
01:09:47,120 --> 01:09:49,040
that context

1677
01:09:49,040 --> 01:09:51,600
i'm not so sure about the ones that are

1678
01:09:51,600 --> 01:09:53,359
trying to control resource limits

1679
01:09:53,359 --> 01:09:55,600
because those resource limits are very

1680
01:09:55,600 --> 01:09:57,920
much hot by hop

1681
01:09:57,920 --> 01:09:59,840
um

1682
01:09:59,840 --> 01:10:01,679
so i probably have more to say on this

1683
01:10:01,679 --> 01:10:04,320
but i'll stop there

1684
01:10:04,320 --> 01:10:06,239
yeah i think that matches kind of my

1685
01:10:06,239 --> 01:10:07,920
initial intuition which is at the very

1686
01:10:07,920 --> 01:10:10,480
least the flow control ones seem

1687
01:10:10,480 --> 01:10:13,040
usefully hot by hot although

1688
01:10:13,040 --> 01:10:14,719
end-to-end flow control across web

1689
01:10:14,719 --> 01:10:17,280
transport session is an interesting

1690
01:10:17,280 --> 01:10:19,440
concept but i don't know that it was the

1691
01:10:19,440 --> 01:10:21,199
original intent of

1692
01:10:21,199 --> 01:10:23,199
having those resource limits and and

1693
01:10:23,199 --> 01:10:25,199
allowing an intermediary to

1694
01:10:25,199 --> 01:10:27,120
share that across multiple

1695
01:10:27,120 --> 01:10:28,719
uh people potentially who are sharing

1696
01:10:28,719 --> 01:10:31,840
the same upstream connection

1697
01:10:31,840 --> 01:10:34,159
martin

1698
01:10:38,000 --> 01:10:40,080
so i think mark nottingham's review of

1699
01:10:40,080 --> 01:10:42,080
donna graham's draft that asked the

1700
01:10:42,080 --> 01:10:44,719
question is capsules

1701
01:10:44,719 --> 01:10:47,040
premature something or other

1702
01:10:47,040 --> 01:10:49,360
generalization abstraction

1703
01:10:49,360 --> 01:10:50,320
um

1704
01:10:50,320 --> 01:10:52,320
and i think it's this

1705
01:10:52,320 --> 01:10:54,320
here that sort of highlights the

1706
01:10:54,320 --> 01:10:56,400
challenges of using capsules for

1707
01:10:56,400 --> 01:10:59,120
anything because i think you can

1708
01:10:59,120 --> 01:11:01,120
simply look at the datagram thing in

1709
01:11:01,120 --> 01:11:03,760
isolation and go yeah so that makes a

1710
01:11:03,760 --> 01:11:05,040
very bit of sense we can pull those out

1711
01:11:05,040 --> 01:11:06,400
and we can forward those however we

1712
01:11:06,400 --> 01:11:07,760
choose

1713
01:11:07,760 --> 01:11:08,800
but then

1714
01:11:08,800 --> 01:11:10,719
i'm looking at the stuff you're doing

1715
01:11:10,719 --> 01:11:13,600
with streams here and thinking

1716
01:11:13,600 --> 01:11:15,600
if there are

1717
01:11:15,600 --> 01:11:17,199
connection level

1718
01:11:17,199 --> 01:11:19,040
uh constraints on what we can do with

1719
01:11:19,040 --> 01:11:20,239
streams

1720
01:11:20,239 --> 01:11:21,840
the amount of data we can put on the

1721
01:11:21,840 --> 01:11:23,840
number that we can have

1722
01:11:23,840 --> 01:11:26,400
i don't know how to intermediate

1723
01:11:26,400 --> 01:11:28,480
those and take

1724
01:11:28,480 --> 01:11:30,640
stuff that's on an h2 stream and then

1725
01:11:30,640 --> 01:11:32,159
lift it into

1726
01:11:32,159 --> 01:11:34,719
native h3 concepts and then back into an

1727
01:11:34,719 --> 01:11:37,520
h2 stream again at some other point

1728
01:11:37,520 --> 01:11:40,320
i suspect that the right answer here is

1729
01:11:40,320 --> 01:11:44,320
to not do any of it because

1730
01:11:44,320 --> 01:11:46,480
this is just too hard

1731
01:11:46,480 --> 01:11:48,239
and maybe it's just

1732
01:11:48,239 --> 01:11:50,400
because it's two in the morning and

1733
01:11:50,400 --> 01:11:54,480
i'm feeling rather stupid but i can't

1734
01:11:54,480 --> 01:11:56,560
conceive of a way if that

1735
01:11:56,560 --> 01:11:58,960
isn't massively complicated

1736
01:11:58,960 --> 01:12:01,520
and also likely to fail regardless of

1737
01:12:01,520 --> 01:12:04,400
what we do and how clever we are so

1738
01:12:04,400 --> 01:12:06,400
i that i'm quite happy with the current

1739
01:12:06,400 --> 01:12:09,719
design honestly

1740
01:12:10,719 --> 01:12:12,640
i think there's something

1741
01:12:12,640 --> 01:12:15,440
in the sense that um

1742
01:12:15,440 --> 01:12:18,880
as alan pointed out like there is a way

1743
01:12:18,880 --> 01:12:21,120
and datagram is actually an example of

1744
01:12:21,120 --> 01:12:22,400
that where

1745
01:12:22,400 --> 01:12:25,199
in the http datagrams document it says

1746
01:12:25,199 --> 01:12:27,760
you know each capsule type can define

1747
01:12:27,760 --> 01:12:28,480
the

1748
01:12:28,480 --> 01:12:30,000
translation that it should do

1749
01:12:30,000 --> 01:12:31,360
potentially when running over different

1750
01:12:31,360 --> 01:12:33,600
transports and the only capsule that is

1751
01:12:33,600 --> 01:12:36,640
defined also defines one of those to say

1752
01:12:36,640 --> 01:12:38,000
datagram

1753
01:12:38,000 --> 01:12:40,080
is you know potentially broken out into

1754
01:12:40,080 --> 01:12:41,920
being a native datagram so like that

1755
01:12:41,920 --> 01:12:44,640
concept is appealing and it's

1756
01:12:44,640 --> 01:12:46,800
maybe possible to do that for each of

1757
01:12:46,800 --> 01:12:49,440
these things

1758
01:12:49,440 --> 01:12:52,000
but i'm not really sure that that gets

1759
01:12:52,000 --> 01:12:56,159
us where we want to be anyway

1760
01:12:57,679 --> 01:12:59,760
david schnazzy um

1761
01:12:59,760 --> 01:13:02,480
speaking as an individual

1762
01:13:02,480 --> 01:13:03,840
so

1763
01:13:03,840 --> 01:13:05,920
i've been thinking about this capsule

1764
01:13:05,920 --> 01:13:08,400
thing for a while over in mask land and

1765
01:13:08,400 --> 01:13:11,440
kind of saw this come up and was like

1766
01:13:11,440 --> 01:13:13,120
trying to because i

1767
01:13:13,120 --> 01:13:15,520
i agree with martin is it

1768
01:13:15,520 --> 01:13:17,360
i mean that's what's made mask

1769
01:13:17,360 --> 01:13:19,040
interesting is depending on how you

1770
01:13:19,040 --> 01:13:20,800
stare at it everything looks completely

1771
01:13:20,800 --> 01:13:22,080
different

1772
01:13:22,080 --> 01:13:22,960
and

1773
01:13:22,960 --> 01:13:25,760
the i think what it comes down to

1774
01:13:25,760 --> 01:13:27,760
is

1775
01:13:27,760 --> 01:13:30,000
are

1776
01:13:30,560 --> 01:13:33,280
is web transport of http 3

1777
01:13:33,280 --> 01:13:35,280
the same protocol

1778
01:13:35,280 --> 01:13:38,960
as web transport over http 2 and 1.

1779
01:13:38,960 --> 01:13:41,840
or are they different protocols

1780
01:13:41,840 --> 01:13:44,560
and by protocol i made http upgrade

1781
01:13:44,560 --> 01:13:48,080
token perhaps um and and where this gets

1782
01:13:48,080 --> 01:13:50,239
really interesting is

1783
01:13:50,239 --> 01:13:52,400
let's say you have a scenario where you

1784
01:13:52,400 --> 01:13:53,280
have

1785
01:13:53,280 --> 01:13:55,360
two h2 hops

1786
01:13:55,360 --> 01:13:58,320
and an intermediary in the middle

1787
01:13:58,320 --> 01:13:59,520
you would

1788
01:13:59,520 --> 01:14:02,640
like capsules are great there everything

1789
01:14:02,640 --> 01:14:04,239
you want everything to be end to end all

1790
01:14:04,239 --> 01:14:06,080
the intermediary does is to shove the

1791
01:14:06,080 --> 01:14:08,000
stream back and forth and everything

1792
01:14:08,000 --> 01:14:09,920
just works

1793
01:14:09,920 --> 01:14:13,120
um but if you have a case where you have

1794
01:14:13,120 --> 01:14:14,640
h3

1795
01:14:14,640 --> 01:14:17,760
and then h2 kind of conceptually in my

1796
01:14:17,760 --> 01:14:18,880
mind

1797
01:14:18,880 --> 01:14:20,640
it's you no longer have an intermediary

1798
01:14:20,640 --> 01:14:23,280
in the middle you have a server that

1799
01:14:23,280 --> 01:14:25,760
terminates the client's hd web transfer

1800
01:14:25,760 --> 01:14:28,320
http 3 connection and then it turns

1801
01:14:28,320 --> 01:14:30,640
around and becomes a web transport

1802
01:14:30,640 --> 01:14:34,400
client over http 2 to uh to the back end

1803
01:14:34,400 --> 01:14:36,159
for lack of a better word

1804
01:14:36,159 --> 01:14:39,199
and at that point the capsules are end

1805
01:14:39,199 --> 01:14:42,960
to end from the client to the first node

1806
01:14:42,960 --> 01:14:44,640
and from the first node to the second

1807
01:14:44,640 --> 01:14:45,600
node

1808
01:14:45,600 --> 01:14:48,480
uh in that you have three ends or four

1809
01:14:48,480 --> 01:14:51,120
to this protocol as opposed to two

1810
01:14:51,120 --> 01:14:52,640
um

1811
01:14:52,640 --> 01:14:54,880
that kind of makes it

1812
01:14:54,880 --> 01:14:58,320
make sense to me this feels consistent

1813
01:14:58,320 --> 01:15:00,800
it actually like i i

1814
01:15:00,800 --> 01:15:02,960
we had another discussion of like they

1815
01:15:02,960 --> 01:15:05,520
do should they have different http

1816
01:15:05,520 --> 01:15:07,280
upgrade tokens it kind of pushes me in

1817
01:15:07,280 --> 01:15:10,560
the yes bucket for that a little bit but

1818
01:15:10,560 --> 01:15:12,400
that makes it all of this kind of

1819
01:15:12,400 --> 01:15:15,760
self-consistent and kind of clean and

1820
01:15:15,760 --> 01:15:17,600
reasonable to me

1821
01:15:17,600 --> 01:15:23,000
um empty does this make any sense to you

1822
01:15:27,360 --> 01:15:29,840
that is amazingly slow

1823
01:15:29,840 --> 01:15:32,960
that makes sense i i think that the sort

1824
01:15:32,960 --> 01:15:35,520
of minimization that comes

1825
01:15:35,520 --> 01:15:36,880
if you're if you've got that sort of

1826
01:15:36,880 --> 01:15:38,480
intermediary there's no edge away

1827
01:15:38,480 --> 01:15:41,199
through h3 or vice versa

1828
01:15:41,199 --> 01:15:44,080
and you're doing the web transport thing

1829
01:15:44,080 --> 01:15:45,760
then that intermediary needs to

1830
01:15:45,760 --> 01:15:47,840
understand web transport

1831
01:15:47,840 --> 01:15:49,440
pure and simple up and down back and

1832
01:15:49,440 --> 01:15:50,320
forth

1833
01:15:50,320 --> 01:15:52,400
yep there's still there are still

1834
01:15:52,400 --> 01:15:54,320
problems that

1835
01:15:54,320 --> 01:15:55,360
we don't

1836
01:15:55,360 --> 01:15:57,920
have solved in that scenario though

1837
01:15:57,920 --> 01:15:59,360
and that's where it starts to get really

1838
01:15:59,360 --> 01:16:00,400
interesting

1839
01:16:00,400 --> 01:16:02,159
um if

1840
01:16:02,159 --> 01:16:04,880
the first hop has no constraints on on

1841
01:16:04,880 --> 01:16:08,320
creating streams but the second hop does

1842
01:16:08,320 --> 01:16:10,239
and you you have a stream come in at the

1843
01:16:10,239 --> 01:16:11,440
intermediary

1844
01:16:11,440 --> 01:16:13,280
and the intermediary cannot create the

1845
01:16:13,280 --> 01:16:16,080
outgoing stream what is it going to do

1846
01:16:16,080 --> 01:16:17,120
yeah

1847
01:16:17,120 --> 01:16:18,239
exactly

1848
01:16:18,239 --> 01:16:19,520
the sort of thinking that i'm going

1849
01:16:19,520 --> 01:16:21,360
through right how the hell do you deal

1850
01:16:21,360 --> 01:16:22,640
with that

1851
01:16:22,640 --> 01:16:25,440
and the answer is

1852
01:16:25,440 --> 01:16:27,440
i don't know

1853
01:16:27,440 --> 01:16:29,199
um

1854
01:16:29,199 --> 01:16:30,239
really that

1855
01:16:30,239 --> 01:16:32,840
that's the best that i've got right now

1856
01:16:32,840 --> 01:16:34,880
um and

1857
01:16:34,880 --> 01:16:36,719
just to make sure i'm understanding you

1858
01:16:36,719 --> 01:16:39,440
right well first off i i agree like that

1859
01:16:39,440 --> 01:16:41,840
kind of back well it's a form of back

1860
01:16:41,840 --> 01:16:44,560
pressure just uh 17 different like

1861
01:16:44,560 --> 01:16:48,719
degrees of back pressure um 50 shades of

1862
01:16:48,719 --> 01:16:51,120
back pressure if you will um

1863
01:16:51,120 --> 01:16:52,159
the

1864
01:16:52,159 --> 01:16:54,560
thinking about it though

1865
01:16:54,560 --> 01:16:55,600
that

1866
01:16:55,600 --> 01:16:56,800
like

1867
01:16:56,800 --> 01:16:58,480
this issue at hand whether we're using

1868
01:16:58,480 --> 01:17:01,120
capsules or something or any possible

1869
01:17:01,120 --> 01:17:02,400
framing for this

1870
01:17:02,400 --> 01:17:05,040
we still have to solve that right

1871
01:17:05,040 --> 01:17:07,040
like unfortunately if you have an

1872
01:17:07,040 --> 01:17:09,520
intermediary no matter what we have that

1873
01:17:09,520 --> 01:17:11,920
problem

1874
01:17:11,920 --> 01:17:16,000
if if it stays in the stream

1875
01:17:16,000 --> 01:17:18,159
and can stay in the stream then it's not

1876
01:17:18,159 --> 01:17:19,120
a problem

1877
01:17:19,120 --> 01:17:21,520
if it if it has to be lifted out and the

1878
01:17:21,520 --> 01:17:23,520
constraints are different then then

1879
01:17:23,520 --> 01:17:24,719
that's not going to be the case so if

1880
01:17:24,719 --> 01:17:26,719
you if your intermediary was just

1881
01:17:26,719 --> 01:17:28,719
tunneling the

1882
01:17:28,719 --> 01:17:31,679
effectively bite string back and forth

1883
01:17:31,679 --> 01:17:34,080
then then that would be

1884
01:17:34,080 --> 01:17:36,159
fine i think it wouldn't be constrained

1885
01:17:36,159 --> 01:17:37,280
in any way

1886
01:17:37,280 --> 01:17:38,960
and the the constraints on the number of

1887
01:17:38,960 --> 01:17:41,120
streams that you have would be fully end

1888
01:17:41,120 --> 01:17:43,520
to end at that point

1889
01:17:43,520 --> 01:17:45,040
it's only funny when you start talking

1890
01:17:45,040 --> 01:17:47,360
about protocol translations and other

1891
01:17:47,360 --> 01:17:49,040
things

1892
01:17:49,040 --> 01:17:50,080
and so

1893
01:17:50,080 --> 01:17:52,800
in that case if we're keeping everything

1894
01:17:52,800 --> 01:17:54,640
in the stream

1895
01:17:54,640 --> 01:17:57,199
then that sounds like a textbook use

1896
01:17:57,199 --> 01:18:00,159
case for capsules

1897
01:18:01,679 --> 01:18:03,760
except that it's not buying us anything

1898
01:18:03,760 --> 01:18:06,320
at that point

1899
01:18:06,719 --> 01:18:08,880
apart from a whole bunch of redundant

1900
01:18:08,880 --> 01:18:10,880
length fields

1901
01:18:10,880 --> 01:18:13,199
i'll jump back in line for that one yeah

1902
01:18:13,199 --> 01:18:17,199
same right uh alan you're next in queue

1903
01:18:18,640 --> 01:18:20,800
alan fendell i was when you talked about

1904
01:18:20,800 --> 01:18:22,800
that stream problem going through

1905
01:18:22,800 --> 01:18:25,040
intermediaries it reminded me that we

1906
01:18:25,040 --> 01:18:27,120
have had that problem with i'm going to

1907
01:18:27,120 --> 01:18:28,800
say the p word everyone cover yours if

1908
01:18:28,800 --> 01:18:30,320
you don't want to hear it push

1909
01:18:30,320 --> 01:18:34,239
server push um we had that problem where

1910
01:18:34,239 --> 01:18:35,360
the

1911
01:18:35,360 --> 01:18:37,120
one hop thought it could create new

1912
01:18:37,120 --> 01:18:39,520
pushes and it got to a proxy that no

1913
01:18:39,520 --> 01:18:40,880
longer had

1914
01:18:40,880 --> 01:18:42,800
available streams so

1915
01:18:42,800 --> 01:18:44,000
and it's yeah it's kind of a hard

1916
01:18:44,000 --> 01:18:47,040
problem and um in the in the h2 version

1917
01:18:47,040 --> 01:18:49,280
of web transport it's very nice because

1918
01:18:49,280 --> 01:18:50,800
all the stream creation is completely

1919
01:18:50,800 --> 01:18:52,800
end to end and are all the stream limits

1920
01:18:52,800 --> 01:18:54,480
that we have not yet actually defined

1921
01:18:54,480 --> 01:18:55,760
yet but plan to

1922
01:18:55,760 --> 01:18:58,560
um or i guess they're here uh will the

1923
01:18:58,560 --> 01:19:00,400
end to end but yeah whenever you're

1924
01:19:00,400 --> 01:19:02,080
going between protocols as martin says

1925
01:19:02,080 --> 01:19:05,440
here there's problems

1926
01:19:06,719 --> 01:19:09,920
hello lucas buddy speaking for myself um

1927
01:19:09,920 --> 01:19:11,600
yeah i made a comment in the jabra i

1928
01:19:11,600 --> 01:19:12,480
think

1929
01:19:12,480 --> 01:19:14,080
like my understanding of what martin

1930
01:19:14,080 --> 01:19:17,120
said about the stream impedance between

1931
01:19:17,120 --> 01:19:19,040
creation on one side of an intermediary

1932
01:19:19,040 --> 01:19:20,320
and the other seems just to be something

1933
01:19:20,320 --> 01:19:23,120
that exists already today um to me

1934
01:19:23,120 --> 01:19:26,559
anyway um if

1935
01:19:27,040 --> 01:19:30,000
maybe maybe if there is a problem we

1936
01:19:30,000 --> 01:19:32,560
could solve this with contexts

1937
01:19:32,560 --> 01:19:34,320
and capsules would let us do that if we

1938
01:19:34,320 --> 01:19:37,040
really wanted to so

1939
01:19:37,040 --> 01:19:40,719
i don't i don't see a humongous

1940
01:19:40,719 --> 01:19:42,480
issue here myself

1941
01:19:42,480 --> 01:19:44,560
that is different than the problem we

1942
01:19:44,560 --> 01:19:48,120
already have today

1943
01:19:52,960 --> 01:19:56,640
so i don't have a huge

1944
01:19:56,640 --> 01:19:58,719
challenge with that

1945
01:19:58,719 --> 01:20:00,960
the thing that i think

1946
01:20:00,960 --> 01:20:03,360
comes up here which is interesting is

1947
01:20:03,360 --> 01:20:04,880
when you're looking at h3 and you're

1948
01:20:04,880 --> 01:20:07,360
looking at h2 and then we start talking

1949
01:20:07,360 --> 01:20:08,880
about what you do with upgrade tokens

1950
01:20:08,880 --> 01:20:12,159
and that sort of thing with h1

1951
01:20:12,639 --> 01:20:14,639
once upon a time we had a conversation

1952
01:20:14,639 --> 01:20:16,800
and i think this echoes a lot of what

1953
01:20:16,800 --> 01:20:19,120
martin just said in the in the chat

1954
01:20:19,120 --> 01:20:21,600
which is we talked about kind of do we

1955
01:20:21,600 --> 01:20:22,719
define

1956
01:20:22,719 --> 01:20:24,719
these things that we're sending over the

1957
01:20:24,719 --> 01:20:26,719
connect stream

1958
01:20:26,719 --> 01:20:30,000
and capsules have this cute way to say

1959
01:20:30,000 --> 01:20:31,679
you know it's a datagram when you're on

1960
01:20:31,679 --> 01:20:33,280
a transport that supports datagrams

1961
01:20:33,280 --> 01:20:35,199
split it out to be a datagram we could

1962
01:20:35,199 --> 01:20:37,760
make the webtransport stream capsule

1963
01:20:37,760 --> 01:20:38,719
um

1964
01:20:38,719 --> 01:20:41,120
do the same thing and say when you're on

1965
01:20:41,120 --> 01:20:45,360
h3 split it out when you're on h2 don't

1966
01:20:45,360 --> 01:20:48,639
um but we we have not currently

1967
01:20:48,639 --> 01:20:51,600
done the exercise of making h3 and h2

1968
01:20:51,600 --> 01:20:54,639
use a single list of these things

1969
01:20:54,639 --> 01:20:56,639
but there's significant overlap for a

1970
01:20:56,639 --> 01:20:57,760
bunch of them and we're talking about

1971
01:20:57,760 --> 01:20:59,199
reusing a bunch of them where

1972
01:20:59,199 --> 01:21:01,679
appropriate is this just a signal that

1973
01:21:01,679 --> 01:21:03,760
where appropriate is actually

1974
01:21:03,760 --> 01:21:06,719
all of them and

1975
01:21:06,719 --> 01:21:07,840
once you start talking about

1976
01:21:07,840 --> 01:21:10,080
intermediaries or if you start to

1977
01:21:10,080 --> 01:21:11,920
david's example earlier like what if i

1978
01:21:11,920 --> 01:21:15,040
go h2 to h3 to h2

1979
01:21:15,040 --> 01:21:17,199
right or what if i'm even going h2 to h2

1980
01:21:17,199 --> 01:21:18,480
and we were just talking about how flow

1981
01:21:18,480 --> 01:21:21,679
control gets propagated there

1982
01:21:21,679 --> 01:21:23,199
so

1983
01:21:23,199 --> 01:21:25,280
there's definitely a line here where

1984
01:21:25,280 --> 01:21:27,199
it's more complicated and your

1985
01:21:27,199 --> 01:21:28,800
intermediary's got to be smart enough to

1986
01:21:28,800 --> 01:21:30,639
know what it's doing and like

1987
01:21:30,639 --> 01:21:32,080
i'm totally fine saying that there's

1988
01:21:32,080 --> 01:21:34,159
some there's a lot of these cases that

1989
01:21:34,159 --> 01:21:35,679
cross that line and if you weren't smart

1990
01:21:35,679 --> 01:21:36,719
enough to do it you shouldn't have been

1991
01:21:36,719 --> 01:21:38,400
doing it so stop

1992
01:21:38,400 --> 01:21:39,199
but

1993
01:21:39,199 --> 01:21:41,840
it does almost seem like it's worth

1994
01:21:41,840 --> 01:21:43,440
doing a little bit of the exercise to

1995
01:21:43,440 --> 01:21:44,800
see

1996
01:21:44,800 --> 01:21:47,600
for the parts that are over h3

1997
01:21:47,600 --> 01:21:49,440
maybe those are just defined in the same

1998
01:21:49,440 --> 01:21:52,560
way and and defined to be broken out for

1999
01:21:52,560 --> 01:21:55,440
h3 and h2 is just

2000
01:21:55,440 --> 01:21:56,960
those being smushed together which is

2001
01:21:56,960 --> 01:21:58,239
the list that we have on screen right

2002
01:21:58,239 --> 01:22:00,400
now

2003
01:22:03,280 --> 01:22:05,520
thanks uh david in the queue again as an

2004
01:22:05,520 --> 01:22:07,199
individual um

2005
01:22:07,199 --> 01:22:10,000
i agree with eric here just wanted to

2006
01:22:10,000 --> 01:22:11,440
reply to

2007
01:22:11,440 --> 01:22:13,360
um

2008
01:22:13,360 --> 01:22:16,480
martin's uh point like what is this bias

2009
01:22:16,480 --> 01:22:18,400
and adding redundant lengths so i'm

2010
01:22:18,400 --> 01:22:20,880
looking at the h2 draft

2011
01:22:20,880 --> 01:22:22,560
and it like

2012
01:22:22,560 --> 01:22:24,159
because you know we have these frames

2013
01:22:24,159 --> 01:22:25,760
and i think it's reasonable that we

2014
01:22:25,760 --> 01:22:28,000
might want to add a future frame for an

2015
01:22:28,000 --> 01:22:29,920
extension later

2016
01:22:29,920 --> 01:22:32,400
these are self-describing and so we have

2017
01:22:32,400 --> 01:22:34,880
a sequence of tlvs on the data stream

2018
01:22:34,880 --> 01:22:36,880
which starts to look like something i

2019
01:22:36,880 --> 01:22:38,800
know um

2020
01:22:38,800 --> 01:22:40,400
so like we don't have any redundant

2021
01:22:40,400 --> 01:22:43,280
links these are literally wire format

2022
01:22:43,280 --> 01:22:46,000
compatible with capsules the only

2023
01:22:46,000 --> 01:22:48,080
question is are the

2024
01:22:48,080 --> 01:22:49,760
do we share types

2025
01:22:49,760 --> 01:22:52,000
are is this one eye on a registry or two

2026
01:22:52,000 --> 01:22:54,480
in the registries and for the reason

2027
01:22:54,480 --> 01:22:57,040
that um eric

2028
01:22:57,040 --> 01:22:58,960
mentioned earlier

2029
01:22:58,960 --> 01:23:00,560
having some of them be the same

2030
01:23:00,560 --> 01:23:02,400
everywhere and some of them be popped

2031
01:23:02,400 --> 01:23:04,320
out in quick for there i think that

2032
01:23:04,320 --> 01:23:07,199
really meshes with mt's original point

2033
01:23:07,199 --> 01:23:08,800
of we're defining

2034
01:23:08,800 --> 01:23:11,679
a generic web transfer of http

2035
01:23:11,679 --> 01:23:13,440
and then when it's over h3 you can put

2036
01:23:13,440 --> 01:23:15,520
it on steroids it can do extra cool

2037
01:23:15,520 --> 01:23:18,000
stuff so like this is starting to make a

2038
01:23:18,000 --> 01:23:21,120
lot of sense to me personally

2039
01:23:21,120 --> 01:23:21,820
go ahead empty

2040
01:23:21,820 --> 01:23:27,210
[Music]

2041
01:23:30,960 --> 01:23:33,600
you don't get any real performance

2042
01:23:33,600 --> 01:23:36,080
so you might you might attempt at one

2043
01:23:36,080 --> 01:23:37,520
point to

2044
01:23:37,520 --> 01:23:38,480
um

2045
01:23:38,480 --> 01:23:41,440
get true datagrams your data

2046
01:23:41,440 --> 01:23:44,000
and drew quick streams for you

2047
01:23:44,000 --> 01:23:44,800
and

2048
01:23:44,800 --> 01:23:46,480
then

2049
01:23:46,480 --> 01:23:50,080
further down the chain the case

2050
01:23:50,080 --> 01:23:51,600
i was going to say there's probably a

2051
01:23:51,600 --> 01:23:53,760
simpler way of building this

2052
01:23:53,760 --> 01:23:56,639
and it may not be as pleasant

2053
01:23:56,639 --> 01:23:58,239
um

2054
01:23:58,239 --> 01:23:59,440
but

2055
01:23:59,440 --> 01:24:02,080
don't do that is actually a pretty good

2056
01:24:02,080 --> 01:24:04,480
strategy and if your intermediary

2057
01:24:04,480 --> 01:24:06,000
doesn't need to do

2058
01:24:06,000 --> 01:24:07,199
uh

2059
01:24:07,199 --> 01:24:09,600
it doesn't advertise support for

2060
01:24:09,600 --> 01:24:13,920
http 3 version of web transport

2061
01:24:13,920 --> 01:24:17,120
if it cannot guarantee end-to-end um

2062
01:24:17,120 --> 01:24:18,560
quick

2063
01:24:18,560 --> 01:24:21,360
and http 3 all the way

2064
01:24:21,360 --> 01:24:23,760
i'm losing my brain it's really good at

2065
01:24:23,760 --> 01:24:25,679
this time in the morning um

2066
01:24:25,679 --> 01:24:27,840
uh if i can't guarantee and to win then

2067
01:24:27,840 --> 01:24:30,639
it doesn't doesn't offer it and the

2068
01:24:30,639 --> 01:24:33,440
fallback here which is the h2 one which

2069
01:24:33,440 --> 01:24:36,000
by the way probably works on http one

2070
01:24:36,000 --> 01:24:38,159
one as well adequately

2071
01:24:38,159 --> 01:24:41,600
um then that's your fallback

2072
01:24:41,600 --> 01:24:44,840
the um

2073
01:24:45,360 --> 01:24:47,199
the way in which we get

2074
01:24:47,199 --> 01:24:49,760
streams lifted up into the

2075
01:24:49,760 --> 01:24:52,239
quick streams is

2076
01:24:52,239 --> 01:24:53,280
would require a whole lot more

2077
01:24:53,280 --> 01:24:55,679
unification between the designs of the

2078
01:24:55,679 --> 01:24:57,679
quick and

2079
01:24:57,679 --> 01:24:59,840
sorry the http2 and the http3 versions

2080
01:24:59,840 --> 01:25:02,159
of this

2081
01:25:06,880 --> 01:25:09,440
thanks eric

2082
01:25:09,440 --> 01:25:12,159
yeah i'm kind of wondering if it's worth

2083
01:25:12,159 --> 01:25:14,719
doing that effort it's tempting to you

2084
01:25:14,719 --> 01:25:18,320
know down for an hour or three and see

2085
01:25:18,320 --> 01:25:20,080
how far we get with it it may be that we

2086
01:25:20,080 --> 01:25:21,360
get there we're like great this is

2087
01:25:21,360 --> 01:25:22,719
actually not hard these things weren't

2088
01:25:22,719 --> 01:25:24,639
really that different

2089
01:25:24,639 --> 01:25:26,400
the current h3 document is basically

2090
01:25:26,400 --> 01:25:29,040
defining a capsule that has a way to be

2091
01:25:29,040 --> 01:25:30,320
broken out

2092
01:25:30,320 --> 01:25:33,679
for h3 by default already or it could be

2093
01:25:33,679 --> 01:25:35,520
that we get our way into that and say no

2094
01:25:35,520 --> 01:25:36,960
this is terrible they're separate for a

2095
01:25:36,960 --> 01:25:38,880
reason they should stay separate

2096
01:25:38,880 --> 01:25:41,600
um but there does seem something

2097
01:25:41,600 --> 01:25:43,520
reasonably attractive about

2098
01:25:43,520 --> 01:25:44,880
having them share the same thing and

2099
01:25:44,880 --> 01:25:47,520
then web transport over h3 is broken out

2100
01:25:47,520 --> 01:25:49,679
and we just choose to not

2101
01:25:49,679 --> 01:25:51,199
define a way to break them out into

2102
01:25:51,199 --> 01:25:53,120
native h2 streams because we don't want

2103
01:25:53,120 --> 01:25:54,719
to deal with that and then we're all

2104
01:25:54,719 --> 01:25:56,480
happy and it's done

2105
01:25:56,480 --> 01:25:58,560
the only other point

2106
01:25:58,560 --> 01:26:00,320
that i do want to make

2107
01:26:00,320 --> 01:26:02,880
david when you say that using a capsule

2108
01:26:02,880 --> 01:26:04,719
is a choice to put

2109
01:26:04,719 --> 01:26:08,400
this tlv in a different iana registry i

2110
01:26:08,400 --> 01:26:11,040
think that's absolutely true

2111
01:26:11,040 --> 01:26:12,639
but when we're looking at

2112
01:26:12,639 --> 01:26:15,040
the other things that we get from that

2113
01:26:15,040 --> 01:26:16,880
i think the

2114
01:26:16,880 --> 01:26:18,880
is our litmus test for should this be a

2115
01:26:18,880 --> 01:26:21,679
capsule should it be end to end or not

2116
01:26:21,679 --> 01:26:23,520
um and if not what is the litmus test

2117
01:26:23,520 --> 01:26:25,520
because i think which in a registry do

2118
01:26:25,520 --> 01:26:27,920
we want it in is i mean that's nice and

2119
01:26:27,920 --> 01:26:29,360
i'm happy like i don't care what i enter

2120
01:26:29,360 --> 01:26:31,440
registry we put things in um but it

2121
01:26:31,440 --> 01:26:33,760
seems as though if we're like great this

2122
01:26:33,760 --> 01:26:35,040
is nice we can put it in a different

2123
01:26:35,040 --> 01:26:36,400
iona registry and now we don't have to

2124
01:26:36,400 --> 01:26:38,880
make a new one how pleasing that is

2125
01:26:38,880 --> 01:26:40,639
pleasing but if that comes with this

2126
01:26:40,639 --> 01:26:42,000
extra

2127
01:26:42,000 --> 01:26:43,679
end-to-end property that is actively

2128
01:26:43,679 --> 01:26:45,600
harmful it seems like the litmus test

2129
01:26:45,600 --> 01:26:47,840
here is the third item on this slide not

2130
01:26:47,840 --> 01:26:50,159
the first item on the slide

2131
01:26:50,159 --> 01:26:52,100
yeah fair enough i agree with that

2132
01:26:52,100 --> 01:26:55,299
[Music]

2133
01:26:57,350 --> 01:27:00,320
[Music]

2134
01:27:00,320 --> 01:27:02,719
it's looking like we've drained the

2135
01:27:02,719 --> 01:27:05,600
queue on this one and having seen the

2136
01:27:05,600 --> 01:27:09,280
slides we don't have anything after this

2137
01:27:09,280 --> 01:27:10,159
um

2138
01:27:10,159 --> 01:27:11,679
so

2139
01:27:11,679 --> 01:27:14,000
clearly we don't have an obvious answer

2140
01:27:14,000 --> 01:27:16,639
definite consensus on this one

2141
01:27:16,639 --> 01:27:19,120
but it's worth like i like eric's plan

2142
01:27:19,120 --> 01:27:22,400
of trying it out and then showing like

2143
01:27:22,400 --> 01:27:25,040
having an empty look at like a pr from

2144
01:27:25,040 --> 01:27:26,000
eric

2145
01:27:26,000 --> 01:27:27,920
when it empty has had a decent night's

2146
01:27:27,920 --> 01:27:28,880
sleep

2147
01:27:28,880 --> 01:27:31,040
and see if he likes it or not would be a

2148
01:27:31,040 --> 01:27:32,960
good next step and of course to have the

2149
01:27:32,960 --> 01:27:34,639
entire working group take a look or

2150
01:27:34,639 --> 01:27:36,400
contribute to that

2151
01:27:36,400 --> 01:27:36,880
um

2152
01:27:36,880 --> 01:27:38,560
[Music]

2153
01:27:38,560 --> 01:27:40,320
how does

2154
01:27:40,320 --> 01:27:42,080
does that sound like a good path forward

2155
01:27:42,080 --> 01:27:45,719
here so we can make progress

2156
01:27:48,000 --> 01:27:52,000
i see eric in the queue go ahead

2157
01:27:52,000 --> 01:27:54,639
yeah i'm certainly getting to do that

2158
01:27:54,639 --> 01:27:56,080
and you know

2159
01:27:56,080 --> 01:27:57,760
happy to do that with other folks if we

2160
01:27:57,760 --> 01:28:00,560
want to sit down together and and

2161
01:28:00,560 --> 01:28:02,480
talk about it on a call somewhere and

2162
01:28:02,480 --> 01:28:04,480
and brainstorm a little bit while we do

2163
01:28:04,480 --> 01:28:06,159
it um

2164
01:28:06,159 --> 01:28:07,040
but

2165
01:28:07,040 --> 01:28:09,199
yeah the other thing

2166
01:28:09,199 --> 01:28:11,520
just in case uh victor wasn't looking at

2167
01:28:11,520 --> 01:28:13,679
the chat i know we talked about this a

2168
01:28:13,679 --> 01:28:15,440
little bit before but i wanted to make

2169
01:28:15,440 --> 01:28:18,159
sure if any reaction there since a lot

2170
01:28:18,159 --> 01:28:20,560
of what we're just discussing kind of

2171
01:28:20,560 --> 01:28:23,600
has impacts for how h3 looks i know this

2172
01:28:23,600 --> 01:28:24,960
had come up in the past if there's

2173
01:28:24,960 --> 01:28:27,120
anything that we want to

2174
01:28:27,120 --> 01:28:28,400
think about there that we might be

2175
01:28:28,400 --> 01:28:29,360
missing

2176
01:28:29,360 --> 01:28:31,280
i would be good to to hear about that at

2177
01:28:31,280 --> 01:28:32,639
some point as well doesn't have to be

2178
01:28:32,639 --> 01:28:33,760
right now

2179
01:28:33,760 --> 01:28:37,040
but worth thinking about

2180
01:28:38,560 --> 01:28:39,600
thanks

2181
01:28:39,600 --> 01:28:41,679
and

2182
01:28:41,679 --> 01:28:45,280
i i think having like uh

2183
01:28:45,280 --> 01:28:47,840
i'm just a call sounds like a good idea

2184
01:28:47,840 --> 01:28:49,520
with like the most passionate folks to

2185
01:28:49,520 --> 01:28:51,920
move this uh forward

2186
01:28:51,920 --> 01:28:54,000
i'm debating whether i want to use the

2187
01:28:54,000 --> 01:28:56,239
term design team or not

2188
01:28:56,239 --> 01:28:57,840
i'm realizing that the terminology

2189
01:28:57,840 --> 01:28:59,120
doesn't

2190
01:28:59,120 --> 01:29:02,159
matter too much

2191
01:29:03,120 --> 01:29:04,639
do fox have

2192
01:29:04,639 --> 01:29:07,639
thoughts

2193
01:29:14,639 --> 01:29:16,880
all right alan says if it

2194
01:29:16,880 --> 01:29:18,239
it it does

2195
01:29:18,239 --> 01:29:19,920
walk like a design team in quack like a

2196
01:29:19,920 --> 01:29:21,679
design team after all

2197
01:29:21,679 --> 01:29:24,639
okay we shall be forming a design team

2198
01:29:24,639 --> 01:29:27,360
so the i will send an email to the list

2199
01:29:27,360 --> 01:29:29,840
uh asking for volunteers

2200
01:29:29,840 --> 01:29:31,520
um

2201
01:29:31,520 --> 01:29:33,679
eric since you've been kind of leading

2202
01:29:33,679 --> 01:29:35,199
this and offering to do the pr would you

2203
01:29:35,199 --> 01:29:39,600
be willing to lead this design team

2204
01:29:39,600 --> 01:29:41,360
sure indeed

2205
01:29:41,360 --> 01:29:42,800
thank you

2206
01:29:42,800 --> 01:29:43,600
so

2207
01:29:43,600 --> 01:29:45,520
we'll send an email to the list and if

2208
01:29:45,520 --> 01:29:48,719
you are interested in joining please

2209
01:29:48,719 --> 01:29:51,840
reach out to the chairs and then we'll

2210
01:29:51,840 --> 01:29:53,920
have the design team figure this out for

2211
01:29:53,920 --> 01:29:57,600
us and in an ideal world um

2212
01:29:57,600 --> 01:29:59,280
if that that would happen in the near

2213
01:29:59,280 --> 01:30:00,639
future we could have an interim to

2214
01:30:00,639 --> 01:30:03,840
discuss it um

2215
01:30:04,239 --> 01:30:05,679
similar to what we've been doing over

2216
01:30:05,679 --> 01:30:07,120
the last three months at a very

2217
01:30:07,120 --> 01:30:10,880
different working group um

2218
01:30:14,719 --> 01:30:17,520
bernard any thoughts i'm starting to

2219
01:30:17,520 --> 01:30:19,440
think like i'm rambling and we can

2220
01:30:19,440 --> 01:30:20,960
probably end the meeting early at this

2221
01:30:20,960 --> 01:30:23,760
point pretty soon

2222
01:30:24,960 --> 01:30:27,360
no i think i think uh we've hopefully

2223
01:30:27,360 --> 01:30:29,280
we've hopefully overcome the note-taking

2224
01:30:29,280 --> 01:30:31,280
problem you should see the notes in the

2225
01:30:31,280 --> 01:30:32,719
uh

2226
01:30:32,719 --> 01:30:34,639
coming up very soon

2227
01:30:34,639 --> 01:30:36,719
um and it sounds like we've got our next

2228
01:30:36,719 --> 01:30:38,639
steps

2229
01:30:38,639 --> 01:30:40,960
uh indeed yeah i do see the minutes now

2230
01:30:40,960 --> 01:30:43,760
thanks for clearing that out um i do see

2231
01:30:43,760 --> 01:30:46,080
jonathan linux in the cube

2232
01:30:46,080 --> 01:30:49,480
come on over

2233
01:30:53,360 --> 01:30:56,560
uh yeah jonathan linux um this is uh

2234
01:30:56,560 --> 01:30:58,080
luke curley who said he missed the

2235
01:30:58,080 --> 01:30:59,520
initial priorities discussion that

2236
01:30:59,520 --> 01:31:01,280
raised an interesting point in the chat

2237
01:31:01,280 --> 01:31:02,400
since we seem to run out of everything

2238
01:31:02,400 --> 01:31:03,679
else to talk about

2239
01:31:03,679 --> 01:31:07,280
that he has a mock style scenario

2240
01:31:07,280 --> 01:31:08,239
where

2241
01:31:08,239 --> 01:31:09,840
he wants to be able to prioritize new

2242
01:31:09,840 --> 01:31:12,080
things he sent over old things he sent

2243
01:31:12,080 --> 01:31:13,920
which is hard to do with a small thick

2244
01:31:13,920 --> 01:31:15,600
set of priorities

2245
01:31:15,600 --> 01:31:18,480
so um i guess i know the priorities api

2246
01:31:18,480 --> 01:31:20,320
is not in scope of this working group

2247
01:31:20,320 --> 01:31:22,080
per se but it's something to

2248
01:31:22,080 --> 01:31:23,920
uh people who are designing mechanisms

2249
01:31:23,920 --> 01:31:25,600
like that to keep in mind

2250
01:31:25,600 --> 01:31:26,480
um

2251
01:31:26,480 --> 01:31:28,400
like whether that means i mean it sounds

2252
01:31:28,400 --> 01:31:31,120
like his implementation just has

2253
01:31:31,120 --> 01:31:33,840
you know uh uh 64 for priority and just

2254
01:31:33,840 --> 01:31:35,360
names his priorities after his stream

2255
01:31:35,360 --> 01:31:36,400
ids

2256
01:31:36,400 --> 01:31:38,639
um that's one possibility or somebody

2257
01:31:38,639 --> 01:31:39,600
could have some way of dynamically

2258
01:31:39,600 --> 01:31:41,280
adjusting priorities of older stuff or

2259
01:31:41,280 --> 01:31:42,400
something like that but just something

2260
01:31:42,400 --> 01:31:45,440
to keep in mind okay speaking as chair

2261
01:31:45,440 --> 01:31:48,159
since we do have another 30 minutes it

2262
01:31:48,159 --> 01:31:50,239
makes sense to use this in person time

2263
01:31:50,239 --> 01:31:52,400
so i'm okay with that and i see luke in

2264
01:31:52,400 --> 01:31:54,320
the queue as well so let's just go

2265
01:31:54,320 --> 01:31:56,080
through the queue

2266
01:31:56,080 --> 01:31:56,880
um

2267
01:31:56,880 --> 01:31:59,840
alan go ahead

2268
01:32:00,400 --> 01:32:02,000
alan frindell well i was going to raise

2269
01:32:02,000 --> 01:32:04,159
a different point before we jumped into

2270
01:32:04,159 --> 01:32:05,199
priorities but

2271
01:32:05,199 --> 01:32:07,040
go ahead that's i'll just talk about the

2272
01:32:07,040 --> 01:32:08,480
priorities and then make my other point

2273
01:32:08,480 --> 01:32:09,199
too

2274
01:32:09,199 --> 01:32:11,520
so i think in terms of luke's scenario

2275
01:32:11,520 --> 01:32:12,880
you don't

2276
01:32:12,880 --> 01:32:15,120
if you really all you want is to switch

2277
01:32:15,120 --> 01:32:18,080
you know your mode from fifo to lifo

2278
01:32:18,080 --> 01:32:19,840
maybe the easiest way to do that is have

2279
01:32:19,840 --> 01:32:20,960
a single

2280
01:32:20,960 --> 01:32:22,320
message that goes over your web

2281
01:32:22,320 --> 01:32:24,000
transport application protocol that says

2282
01:32:24,000 --> 01:32:25,280
please use

2283
01:32:25,280 --> 01:32:26,480
you know please tell the scheduler on

2284
01:32:26,480 --> 01:32:28,320
the other side to do everything and

2285
01:32:28,320 --> 01:32:30,239
reverse remedy order and then you're

2286
01:32:30,239 --> 01:32:31,600
rather than

2287
01:32:31,600 --> 01:32:35,040
juggling your eight lanes or whatever

2288
01:32:35,040 --> 01:32:36,480
so that may be a possibility that could

2289
01:32:36,480 --> 01:32:38,239
work

2290
01:32:38,239 --> 01:32:39,600
the other point i wanted to make was

2291
01:32:39,600 --> 01:32:41,120
something that came up right at the end

2292
01:32:41,120 --> 01:32:43,840
of the media over quick session um

2293
01:32:43,840 --> 01:32:45,360
that had me thinking about its

2294
01:32:45,360 --> 01:32:47,760
intersection with web transport which is

2295
01:32:47,760 --> 01:32:49,600
in media over quick

2296
01:32:49,600 --> 01:32:52,000
you know i think we recognize that we

2297
01:32:52,000 --> 01:32:52,840
can

2298
01:32:52,840 --> 01:32:55,600
get quite a bit of

2299
01:32:55,600 --> 01:32:58,400
you know value out of breaking videos up

2300
01:32:58,400 --> 01:32:59,920
in a certain way and sending them over

2301
01:32:59,920 --> 01:33:01,920
quick streams

2302
01:33:01,920 --> 01:33:04,400
but that if you want to push latency

2303
01:33:04,400 --> 01:33:06,239
really low and i'm not going to get into

2304
01:33:06,239 --> 01:33:08,880
discussion about what is low latency um

2305
01:33:08,880 --> 01:33:10,239
but if you want to go as fast as

2306
01:33:10,239 --> 01:33:12,800
possible at some point you are

2307
01:33:12,800 --> 01:33:15,840
you need better interaction with

2308
01:33:15,840 --> 01:33:18,560
um or closer closer ties with congestion

2309
01:33:18,560 --> 01:33:19,679
control

2310
01:33:19,679 --> 01:33:21,280
loss recovery

2311
01:33:21,280 --> 01:33:24,159
um re-transmission policies

2312
01:33:24,159 --> 01:33:26,400
introspection from the like lowest level

2313
01:33:26,400 --> 01:33:28,719
of the transport in terms of

2314
01:33:28,719 --> 01:33:30,320
um you know information it might have

2315
01:33:30,320 --> 01:33:31,520
that you want to feed back into the

2316
01:33:31,520 --> 01:33:33,600
application a really tight coupling and

2317
01:33:33,600 --> 01:33:35,120
i personally have not been very involved

2318
01:33:35,120 --> 01:33:36,880
in the w3c

2319
01:33:36,880 --> 01:33:37,920
um

2320
01:33:37,920 --> 01:33:39,760
api definition for web transport so and

2321
01:33:39,760 --> 01:33:41,840
i saw there's like web transport stats

2322
01:33:41,840 --> 01:33:44,239
which maybe have some of that feedback

2323
01:33:44,239 --> 01:33:45,840
but i i wonder if

2324
01:33:45,840 --> 01:33:48,000
as mock is starting to get going and

2325
01:33:48,000 --> 01:33:49,840
some people have dreams of someday

2326
01:33:49,840 --> 01:33:52,080
building that in web transport

2327
01:33:52,080 --> 01:33:53,840
you know are we going to think about a

2328
01:33:53,840 --> 01:33:55,840
you know sort of v2

2329
01:33:55,840 --> 01:33:57,600
version of the api that's got you know

2330
01:33:57,600 --> 01:33:59,360
more sophistication there

2331
01:33:59,360 --> 01:34:00,560
thanks

2332
01:34:00,560 --> 01:34:04,480
okay thanks that sounds useful i

2333
01:34:04,480 --> 01:34:05,520
and

2334
01:34:05,520 --> 01:34:07,040
this topic has definitely been the

2335
01:34:07,040 --> 01:34:08,560
biggest queue size we've seen in this

2336
01:34:08,560 --> 01:34:10,639
working group so just to be clear this

2337
01:34:10,639 --> 01:34:13,280
is no not the mach buff

2338
01:34:13,280 --> 01:34:16,000
um but we can we can please so yeah we

2339
01:34:16,000 --> 01:34:18,159
can talk about this but let's scope it

2340
01:34:18,159 --> 01:34:21,520
to the implications to web transport

2341
01:34:21,520 --> 01:34:23,120
and on your other point yeah i encourage

2342
01:34:23,120 --> 01:34:26,239
you to join the w3c um sessions for

2343
01:34:26,239 --> 01:34:28,000
there i i forget the details about

2344
01:34:28,000 --> 01:34:30,000
membership in the w3c so double check

2345
01:34:30,000 --> 01:34:32,159
those but it's we've had good

2346
01:34:32,159 --> 01:34:34,159
conversations around those things and

2347
01:34:34,159 --> 01:34:35,679
from folks who really care would be

2348
01:34:35,679 --> 01:34:36,880
useful

2349
01:34:36,880 --> 01:34:38,000
and

2350
01:34:38,000 --> 01:34:42,159
um okay uh luke is next in queue

2351
01:34:44,080 --> 01:34:46,159
hi my name mentioned

2352
01:34:46,159 --> 01:34:47,199
um

2353
01:34:47,199 --> 01:34:48,560
yeah just uh just to summarize the

2354
01:34:48,560 --> 01:34:50,719
priority stuff um

2355
01:34:50,719 --> 01:34:53,360
it's something that right now

2356
01:34:53,360 --> 01:34:55,520
it's fine because i'm sitting i i have a

2357
01:34:55,520 --> 01:34:58,080
server and the server you can prioritize

2358
01:34:58,080 --> 01:35:00,480
quick streams um

2359
01:35:00,480 --> 01:35:01,920
but it is something that you eventually

2360
01:35:01,920 --> 01:35:04,560
need browser support for is the idea

2361
01:35:04,560 --> 01:35:06,400
that um

2362
01:35:06,400 --> 01:35:08,480
we want to fully use the connection

2363
01:35:08,480 --> 01:35:12,639
and we want the connection to degrade

2364
01:35:12,639 --> 01:35:15,760
cleanly when uh when the window when

2365
01:35:15,760 --> 01:35:17,760
when uh it's out of bandwidth

2366
01:35:17,760 --> 01:35:19,119
effectively

2367
01:35:19,119 --> 01:35:22,000
uh so yeah the gist of just the warp is

2368
01:35:22,000 --> 01:35:25,119
um uh nearer segments and audio or

2369
01:35:25,119 --> 01:35:26,400
higher priority

2370
01:35:26,400 --> 01:35:28,400
it's kind of like a lefo although it

2371
01:35:28,400 --> 01:35:30,239
gets more complicated than that uh to

2372
01:35:30,239 --> 01:35:32,320
some some people saying you could just

2373
01:35:32,320 --> 01:35:33,840
switch the mode

2374
01:35:33,840 --> 01:35:35,600
uh stuff like control messages still

2375
01:35:35,600 --> 01:35:37,280
need to be on a higher priority stream

2376
01:35:37,280 --> 01:35:39,520
and whatnot um but i agree this is

2377
01:35:39,520 --> 01:35:40,800
something that's not really the

2378
01:35:40,800 --> 01:35:43,040
transport doesn't need to support

2379
01:35:43,040 --> 01:35:44,159
um

2380
01:35:44,159 --> 01:35:46,800
but we do need a way

2381
01:35:46,800 --> 01:35:49,199
for uh for end points to tell other

2382
01:35:49,199 --> 01:35:50,960
endpoints like this is the party of the

2383
01:35:50,960 --> 01:35:53,520
stream like i created the stream

2384
01:35:53,520 --> 01:35:55,040
could you please write back to it with

2385
01:35:55,040 --> 01:35:57,360
this priority is effectively

2386
01:35:57,360 --> 01:35:58,639
uh what we're looking for and that's

2387
01:35:58,639 --> 01:36:00,080
that can be accomplished with like an

2388
01:36:00,080 --> 01:36:01,520
http header

2389
01:36:01,520 --> 01:36:03,840
um like luke is the the extensible

2390
01:36:03,840 --> 01:36:05,440
private party header

2391
01:36:05,440 --> 01:36:06,560
um

2392
01:36:06,560 --> 01:36:08,320
yeah a little bit of signaling that's

2393
01:36:08,320 --> 01:36:11,320
probably

2394
01:36:11,360 --> 01:36:15,440
thanks that makes sense victor

2395
01:36:20,800 --> 01:36:22,719
uh

2396
01:36:22,719 --> 01:36:25,679
oh i think you wanted to encourage

2397
01:36:25,679 --> 01:36:28,159
people who have opinions to comment on

2398
01:36:28,159 --> 01:36:29,840
the w3c

2399
01:36:29,840 --> 01:36:32,960
issue which is issue 62 and

2400
01:36:32,960 --> 01:36:37,000
i plus this link in chat

2401
01:36:38,880 --> 01:36:40,080
thank you victor

2402
01:36:40,080 --> 01:36:42,480
empty

2403
01:36:44,159 --> 01:36:47,040
so i get

2404
01:36:47,040 --> 01:36:48,320
it was

2405
01:36:48,320 --> 01:36:50,239
a little unclear from the description

2406
01:36:50,239 --> 01:36:53,040
there but um it seems like this is

2407
01:36:53,040 --> 01:36:54,639
mostly something that the application

2408
01:36:54,639 --> 01:36:57,280
can can do for itself

2409
01:36:57,280 --> 01:36:59,199
because you're you're having the client

2410
01:36:59,199 --> 01:37:01,679
tell the server to prioritize in a

2411
01:37:01,679 --> 01:37:03,040
particular way

2412
01:37:03,040 --> 01:37:06,719
which i i guess means that you're your

2413
01:37:07,119 --> 01:37:09,119
uh your signaling can be worked out on

2414
01:37:09,119 --> 01:37:11,199
on your own terms

2415
01:37:11,199 --> 01:37:12,719
there's nothing

2416
01:37:12,719 --> 01:37:13,920
there's nothing here that that's

2417
01:37:13,920 --> 01:37:15,600
possible because

2418
01:37:15,600 --> 01:37:17,360
anything is possible once you give

2419
01:37:17,360 --> 01:37:19,119
someone the ability to send bytes to

2420
01:37:19,119 --> 01:37:21,280
another one um

2421
01:37:21,280 --> 01:37:23,119
i was wondering whether there was an end

2422
01:37:23,119 --> 01:37:27,840
requirement from the browser side

2423
01:37:27,840 --> 01:37:30,000
from their application so you're getting

2424
01:37:30,000 --> 01:37:31,679
multiple streams on the browser and

2425
01:37:31,679 --> 01:37:33,280
trying to send on them

2426
01:37:33,280 --> 01:37:35,920
is is there any requirement that

2427
01:37:35,920 --> 01:37:37,840
that those big life

2428
01:37:37,840 --> 01:37:40,000
in in terms of the sending behavior of

2429
01:37:40,000 --> 01:37:41,760
the browser

2430
01:37:41,760 --> 01:37:43,440
that would be more interesting in the

2431
01:37:43,440 --> 01:37:45,440
context of this one because that's not

2432
01:37:45,440 --> 01:37:46,420
something that you can

2433
01:37:46,420 --> 01:37:47,600
[Music]

2434
01:37:47,600 --> 01:37:48,400
change

2435
01:37:48,400 --> 01:37:49,920
obviously you sort of control your

2436
01:37:49,920 --> 01:37:52,080
servers maybe control what the browsers

2437
01:37:52,080 --> 01:37:54,239
do

2438
01:37:58,960 --> 01:38:00,159
thanks and

2439
01:38:00,159 --> 01:38:03,119
yeah jump jumping in ass nope sorry go

2440
01:38:03,119 --> 01:38:04,719
okay just jumping in as chair yeah i

2441
01:38:04,719 --> 01:38:06,960
think that's a great place to kind of

2442
01:38:06,960 --> 01:38:09,360
draw the line for like you know our goal

2443
01:38:09,360 --> 01:38:11,199
for web transport has been to ship

2444
01:38:11,199 --> 01:38:12,480
something that

2445
01:38:12,480 --> 01:38:15,119
that works at least for for now

2446
01:38:15,119 --> 01:38:16,800
and in terms of scoping it like if

2447
01:38:16,800 --> 01:38:18,800
something can be applica solved at the

2448
01:38:18,800 --> 01:38:21,040
application layer kind of our philosophy

2449
01:38:21,040 --> 01:38:22,880
has been to just keep it there for now

2450
01:38:22,880 --> 01:38:24,639
and perhaps at some point if we realize

2451
01:38:24,639 --> 01:38:26,080
every other application is doing the

2452
01:38:26,080 --> 01:38:27,679
same thing like for example we talked

2453
01:38:27,679 --> 01:38:30,320
about messaging framing then we might

2454
01:38:30,320 --> 01:38:32,239
consider adding it to like web transport

2455
01:38:32,239 --> 01:38:35,040
v2 whatever um but yeah that seems like

2456
01:38:35,040 --> 01:38:38,400
to be a good um a good demarcation

2457
01:38:38,400 --> 01:38:39,760
um

2458
01:38:39,760 --> 01:38:42,400
for for what we consider in scope just

2459
01:38:42,400 --> 01:38:44,320
some thoughts uh lucas go ahead hello

2460
01:38:44,320 --> 01:38:46,960
lucas pardo speaking um yeah like

2461
01:38:46,960 --> 01:38:49,119
obviously this topic is super exciting

2462
01:38:49,119 --> 01:38:51,520
for me um

2463
01:38:51,520 --> 01:38:54,480
i i i just i'm not that worried because

2464
01:38:54,480 --> 01:38:56,880
like the the extensive priorities draft

2465
01:38:56,880 --> 01:38:58,560
is just one kind of signal and it's

2466
01:38:58,560 --> 01:39:01,520
intended to be used in one way

2467
01:39:01,520 --> 01:39:03,840
in and in practicality

2468
01:39:03,840 --> 01:39:05,920
it should should definitely be combined

2469
01:39:05,920 --> 01:39:07,679
with all the other information any

2470
01:39:07,679 --> 01:39:10,880
sender is using to schedule how stream

2471
01:39:10,880 --> 01:39:13,199
data or datagram data is being sent some

2472
01:39:13,199 --> 01:39:15,679
might ignore it some some might use it

2473
01:39:15,679 --> 01:39:17,920
some might use it more strongly than

2474
01:39:17,920 --> 01:39:20,400
other inputs it seems like web transport

2475
01:39:20,400 --> 01:39:22,800
has all the pieces there to let us

2476
01:39:22,800 --> 01:39:25,520
add extra signals or to

2477
01:39:25,520 --> 01:39:28,080
provide some guidance on how those

2478
01:39:28,080 --> 01:39:29,360
signals could be used slightly

2479
01:39:29,360 --> 01:39:31,040
differently um

2480
01:39:31,040 --> 01:39:33,440
i think the browser world in particular

2481
01:39:33,440 --> 01:39:34,320
has

2482
01:39:34,320 --> 01:39:36,719
a lot of constraints that others don't

2483
01:39:36,719 --> 01:39:38,719
um in the quick world we

2484
01:39:38,719 --> 01:39:40,560
we say you know

2485
01:39:40,560 --> 01:39:42,400
we should provide an ability for

2486
01:39:42,400 --> 01:39:43,840
applications to control the

2487
01:39:43,840 --> 01:39:46,400
prioritization of stream data as an

2488
01:39:46,400 --> 01:39:48,080
example and then we leave that

2489
01:39:48,080 --> 01:39:50,080
completely undefined some people hate

2490
01:39:50,080 --> 01:39:53,199
that but um it works okay for now and

2491
01:39:53,199 --> 01:39:55,040
we'll we'll use these things and we'll

2492
01:39:55,040 --> 01:39:57,840
figure some more stuff out um and maybe

2493
01:39:57,840 --> 01:39:59,679
in a v2 or

2494
01:39:59,679 --> 01:40:01,440
some other additional document we can

2495
01:40:01,440 --> 01:40:05,040
address this um my main concern is are

2496
01:40:05,040 --> 01:40:07,119
we are we blocking anyone from being

2497
01:40:07,119 --> 01:40:09,520
able to extend or innovate or address

2498
01:40:09,520 --> 01:40:11,040
the use case that they want and i don't

2499
01:40:11,040 --> 01:40:13,360
think that's true so i think we're in a

2500
01:40:13,360 --> 01:40:15,360
decent state and i'm

2501
01:40:15,360 --> 01:40:16,880
more than happy to continue following

2502
01:40:16,880 --> 01:40:18,960
the discussion and seeing what we can do

2503
01:40:18,960 --> 01:40:20,840
to make things

2504
01:40:20,840 --> 01:40:23,600
better thanks lucas

2505
01:40:23,600 --> 01:40:26,239
hey colin

2506
01:40:30,239 --> 01:40:32,560
uh so i just wanted to jump all the way

2507
01:40:32,560 --> 01:40:35,440
back to the priority issue

2508
01:40:35,440 --> 01:40:37,760
and i i do think that it'd be very

2509
01:40:37,760 --> 01:40:39,840
desirable to have some way to be able to

2510
01:40:39,840 --> 01:40:41,040
deal with

2511
01:40:41,040 --> 01:40:42,000
um

2512
01:40:42,000 --> 01:40:43,280
you know saying

2513
01:40:43,280 --> 01:40:45,280
the sequence that the the web transport

2514
01:40:45,280 --> 01:40:46,239
is going to be sending things out of the

2515
01:40:46,239 --> 01:40:47,600
browser that seems pretty important for

2516
01:40:47,600 --> 01:40:49,440
a lot of use cases particularly

2517
01:40:49,440 --> 01:40:51,600
the ones luke was talking about but i

2518
01:40:51,600 --> 01:40:53,600
don't think that just i think that'll

2519
01:40:53,600 --> 01:40:56,719
for a lot of them just saying um a lifo

2520
01:40:56,719 --> 01:41:00,080
doesn't necessarily work uh even in the

2521
01:41:00,080 --> 01:41:03,119
the case uh the video case i think you

2522
01:41:03,119 --> 01:41:05,520
run into problems where it works it

2523
01:41:05,520 --> 01:41:07,199
makes it a little bit better on

2524
01:41:07,199 --> 01:41:08,960
semi-congested networks but as soon as

2525
01:41:08,960 --> 01:41:11,119
things get a little bit the next level

2526
01:41:11,119 --> 01:41:13,199
of worse that lifo mechanism totally

2527
01:41:13,199 --> 01:41:14,880
fails without an actual prioritization

2528
01:41:14,880 --> 01:41:16,960
scheme so i think it'd be well worth us

2529
01:41:16,960 --> 01:41:19,040
talking a little bit about something

2530
01:41:19,040 --> 01:41:20,480
more flexible

2531
01:41:20,480 --> 01:41:23,199
that meant a broader set of use cases

2532
01:41:23,199 --> 01:41:27,040
for for how to do prioritization

2533
01:41:28,719 --> 01:41:32,000
thanks cohen bernard

2534
01:41:32,000 --> 01:41:34,800
there uh so i'm talking with my itf web

2535
01:41:34,800 --> 01:41:36,159
transport

2536
01:41:36,159 --> 01:41:37,520
hat off

2537
01:41:37,520 --> 01:41:39,920
but um i will just say that

2538
01:41:39,920 --> 01:41:42,880
in terms of w3c work we now have a

2539
01:41:42,880 --> 01:41:44,159
functioning

2540
01:41:44,159 --> 01:41:46,880
version of web transport api as well as

2541
01:41:46,880 --> 01:41:49,040
web codecs in chromium

2542
01:41:49,040 --> 01:41:50,960
um and so some of these mock scenarios

2543
01:41:50,960 --> 01:41:53,040
you can actually build them in a fairly

2544
01:41:53,040 --> 01:41:55,360
little amount of code but one thing i'd

2545
01:41:55,360 --> 01:41:57,280
like to make clear is that

2546
01:41:57,280 --> 01:41:58,400
um

2547
01:41:58,400 --> 01:42:01,040
as i see it i i believe and maybe allen

2548
01:42:01,040 --> 01:42:03,600
can correct me if he's tried this that

2549
01:42:03,600 --> 01:42:06,080
this the video upload scenario should be

2550
01:42:06,080 --> 01:42:07,920
implementable using the web transport

2551
01:42:07,920 --> 01:42:10,159
api as it exists today

2552
01:42:10,159 --> 01:42:12,159
um the downstream scenario is a little

2553
01:42:12,159 --> 01:42:13,600
bit more complicated but the key thing

2554
01:42:13,600 --> 01:42:15,600
to understand here is in that scenario

2555
01:42:15,600 --> 01:42:16,880
as

2556
01:42:16,880 --> 01:42:19,360
as has been described

2557
01:42:19,360 --> 01:42:21,920
the server can do things like priority

2558
01:42:21,920 --> 01:42:24,000
assuming it's available

2559
01:42:24,000 --> 01:42:26,159
without the web transport client having

2560
01:42:26,159 --> 01:42:27,600
to support that

2561
01:42:27,600 --> 01:42:30,960
so at least within the api scope so far

2562
01:42:30,960 --> 01:42:32,960
it doesn't seem to me like it seems like

2563
01:42:32,960 --> 01:42:34,880
the current api can

2564
01:42:34,880 --> 01:42:37,280
at least accommodate those two scenarios

2565
01:42:37,280 --> 01:42:40,239
the the downstream and the video upload

2566
01:42:40,239 --> 01:42:42,400
of course we're uh very willing to

2567
01:42:42,400 --> 01:42:43,840
understand if there are issues doing

2568
01:42:43,840 --> 01:42:45,440
that and i would urge people to actually

2569
01:42:45,440 --> 01:42:46,960
try it out

2570
01:42:46,960 --> 01:42:48,480
um so

2571
01:42:48,480 --> 01:42:51,440
you know we we very s consciously didn't

2572
01:42:51,440 --> 01:42:53,280
try to go down to the lowest levels in

2573
01:42:53,280 --> 01:42:55,600
the api like you originally thought

2574
01:42:55,600 --> 01:42:57,840
people need access to the ack info or

2575
01:42:57,840 --> 01:42:59,119
the guts of

2576
01:42:59,119 --> 01:43:01,199
quick bandwidth estimation

2577
01:43:01,199 --> 01:43:04,320
and after some debate we said not really

2578
01:43:04,320 --> 01:43:05,760
that's turning out to be an issue for

2579
01:43:05,760 --> 01:43:08,480
rtp directly over quick but i hopefully

2580
01:43:08,480 --> 01:43:10,800
not for the for most of the mock use

2581
01:43:10,800 --> 01:43:12,880
cases and the stats that are there to

2582
01:43:12,880 --> 01:43:14,400
make clear to people they're not so you

2583
01:43:14,400 --> 01:43:16,560
can implement congestion control uh

2584
01:43:16,560 --> 01:43:18,400
they're just there really to to give you

2585
01:43:18,400 --> 01:43:20,000
a sense of how well your app is

2586
01:43:20,000 --> 01:43:21,199
performing

2587
01:43:21,199 --> 01:43:24,000
um but i urge people to try the apis out

2588
01:43:24,000 --> 01:43:27,119
and see if there are any issues

2589
01:43:30,000 --> 01:43:32,960
magnus westland

2590
01:43:33,280 --> 01:43:34,480
is the

2591
01:43:34,480 --> 01:43:36,239
in the priority here is it question if

2592
01:43:36,239 --> 01:43:37,920
you actually need to have dynamic or as

2593
01:43:37,920 --> 01:43:40,880
they update the priority value for

2594
01:43:40,880 --> 01:43:43,360
a transmission so say

2595
01:43:43,360 --> 01:43:44,960
it is that part of the problem here

2596
01:43:44,960 --> 01:43:46,800
really

2597
01:43:46,800 --> 01:43:49,280
i wonder if it's not um

2598
01:43:49,280 --> 01:43:51,280
are you assuming that you have so small

2599
01:43:51,280 --> 01:43:52,880
data blocks that you're sending one

2600
01:43:52,880 --> 01:43:54,239
single datagram and that's the only

2601
01:43:54,239 --> 01:43:56,400
thing you need or

2602
01:43:56,400 --> 01:43:58,400
uh

2603
01:43:58,400 --> 01:44:00,320
i just out of curiosity who are you

2604
01:44:00,320 --> 01:44:02,560
asking the question because um obviously

2605
01:44:02,560 --> 01:44:04,000
yeah yeah yeah so you're looking at me

2606
01:44:04,000 --> 01:44:06,480
but i can't answer i don't know no

2607
01:44:06,480 --> 01:44:08,639
i ask in the working group i think about

2608
01:44:08,639 --> 01:44:10,960
if it's

2609
01:44:10,960 --> 01:44:12,560
well luke's next thing queue maybe he

2610
01:44:12,560 --> 01:44:13,760
can attempt to answer because i know

2611
01:44:13,760 --> 01:44:16,960
he's thought about this quite a bit

2612
01:44:16,960 --> 01:44:19,040
yeah so i wanted to also answer bernard

2613
01:44:19,040 --> 01:44:20,560
uh so

2614
01:44:20,560 --> 01:44:22,880
we're doing it we're actually right now

2615
01:44:22,880 --> 01:44:25,520
twitch is um using web transport i think

2616
01:44:25,520 --> 01:44:27,199
it's like one percent of chrome users

2617
01:44:27,199 --> 01:44:29,679
right now um we're not using web codecs

2618
01:44:29,679 --> 01:44:32,000
for using msc still but i have a player

2619
01:44:32,000 --> 01:44:33,199
that uses it

2620
01:44:33,199 --> 01:44:35,360
um and yeah we are doing prioritization

2621
01:44:35,360 --> 01:44:37,840
on the server side uh it is currently

2622
01:44:37,840 --> 01:44:39,199
the current design to answer the

2623
01:44:39,199 --> 01:44:40,560
previous question

2624
01:44:40,560 --> 01:44:42,719
it is a fixed when the stream is created

2625
01:44:42,719 --> 01:44:44,480
we know the priority

2626
01:44:44,480 --> 01:44:46,880
it doesn't need to change although

2627
01:44:46,880 --> 01:44:49,119
in theory you could make a slightly

2628
01:44:49,119 --> 01:44:51,840
better design if it's allowed to change

2629
01:44:51,840 --> 01:44:54,000
uh it really just depends

2630
01:44:54,000 --> 01:44:55,199
there's no right answer for

2631
01:44:55,199 --> 01:44:57,520
prioritization

2632
01:44:57,520 --> 01:44:59,119
so it's nice to have that functionality

2633
01:44:59,119 --> 01:45:01,119
but it's not required either

2634
01:45:01,119 --> 01:45:03,679
i think for bernard the main concern is

2635
01:45:03,679 --> 01:45:05,920
and this is a w3c thing is just if you

2636
01:45:05,920 --> 01:45:08,719
want to switch the direction if you want

2637
01:45:08,719 --> 01:45:12,400
to uh to create media at the browser and

2638
01:45:12,400 --> 01:45:13,440
push it

2639
01:45:13,440 --> 01:45:16,639
uh like via warf or whatever uh to to

2640
01:45:16,639 --> 01:45:17,760
the server

2641
01:45:17,760 --> 01:45:19,920
uh you can't control the priority then

2642
01:45:19,920 --> 01:45:21,440
and that's something that we're thinking

2643
01:45:21,440 --> 01:45:23,119
about um

2644
01:45:23,119 --> 01:45:25,119
like how could you do ingest and send

2645
01:45:25,119 --> 01:45:27,760
newer media for older media so you can

2646
01:45:27,760 --> 01:45:29,520
just starve and eventually drop the only

2647
01:45:29,520 --> 01:45:31,840
media

2648
01:45:33,600 --> 01:45:35,199
that would be interesting to see your

2649
01:45:35,199 --> 01:45:37,600
results and concerns about about that as

2650
01:45:37,600 --> 01:45:39,920
you said it's the client sending that's

2651
01:45:39,920 --> 01:45:43,639
the real problem here

2652
01:45:44,560 --> 01:45:46,239
alan from dell yeah i think just

2653
01:45:46,239 --> 01:45:47,600
responding to what bernard had said when

2654
01:45:47,600 --> 01:45:50,320
he was up last time just that um i'm

2655
01:45:50,320 --> 01:45:52,159
thinking about the same scenario that

2656
01:45:52,159 --> 01:45:54,800
that luke is talking about but also

2657
01:45:54,800 --> 01:45:56,880
probably not going to be in the early

2658
01:45:56,880 --> 01:45:58,639
scoping of mock so probably maybe not so

2659
01:45:58,639 --> 01:46:00,159
urgent but i just got the sense that

2660
01:46:00,159 --> 01:46:02,159
there were people in the room who have

2661
01:46:02,159 --> 01:46:04,960
very low latency low latency uh use

2662
01:46:04,960 --> 01:46:08,239
cases for ascending video and um

2663
01:46:08,239 --> 01:46:09,920
and probably weren't going to be happy

2664
01:46:09,920 --> 01:46:11,840
with like the default quick congestion

2665
01:46:11,840 --> 01:46:13,679
control that the browser was providing

2666
01:46:13,679 --> 01:46:15,360
so again it could be a long-term thing

2667
01:46:15,360 --> 01:46:17,280
but i think in the in the for the

2668
01:46:17,280 --> 01:46:18,639
shorter medium term that we might want

2669
01:46:18,639 --> 01:46:20,239
to do there it's probably going to be

2670
01:46:20,239 --> 01:46:22,480
fine

2671
01:46:25,040 --> 01:46:28,400
thanks alan bernard

2672
01:46:29,440 --> 01:46:31,840
um to follow up on what alan said alan

2673
01:46:31,840 --> 01:46:33,760
i'd be very interested if

2674
01:46:33,760 --> 01:46:35,760
uh in particular if you're encountering

2675
01:46:35,760 --> 01:46:38,400
any issues with bbrv one

2676
01:46:38,400 --> 01:46:40,400
in your video upload scenario i don't

2677
01:46:40,400 --> 01:46:42,320
know if you uh

2678
01:46:42,320 --> 01:46:43,119
i don't know if your quick

2679
01:46:43,119 --> 01:46:44,880
implementation you were using did the

2680
01:46:44,880 --> 01:46:47,040
rv1 or i don't think that same problem

2681
01:46:47,040 --> 01:46:48,880
would occur with new reno but

2682
01:46:48,880 --> 01:46:50,560
uh

2683
01:46:50,560 --> 01:46:51,920
sorry luke i just jumped the queue to

2684
01:46:51,920 --> 01:46:53,199
respond to bernard which is i just want

2685
01:46:53,199 --> 01:46:55,040
to be clear that i personally and i'm

2686
01:46:55,040 --> 01:46:56,960
not sure that meta either does have any

2687
01:46:56,960 --> 01:46:58,239
code that does this right now it was

2688
01:46:58,239 --> 01:46:59,600
just based on sort of the comments and

2689
01:46:59,600 --> 01:47:01,440
discussion that happened on wednesday so

2690
01:47:01,440 --> 01:47:02,560
if i have running code and i have

2691
01:47:02,560 --> 01:47:04,000
problems i'll let you know

2692
01:47:04,000 --> 01:47:07,000
okay

2693
01:47:08,719 --> 01:47:10,000
go ahead luke

2694
01:47:10,000 --> 01:47:11,920
just to reply to that

2695
01:47:11,920 --> 01:47:16,080
um i i've implemented bbr um v1 um

2696
01:47:16,080 --> 01:47:17,840
there's i also tried v2 but there's some

2697
01:47:17,840 --> 01:47:20,400
bugs i haven't fixed those yet um most

2698
01:47:20,400 --> 01:47:22,400
of our concerns with it are theoretical

2699
01:47:22,400 --> 01:47:23,760
at this point we're not really pushing

2700
01:47:23,760 --> 01:47:26,560
latency low enough that the probe rtt

2701
01:47:26,560 --> 01:47:28,480
phase is an issue

2702
01:47:28,480 --> 01:47:29,760
um

2703
01:47:29,760 --> 01:47:32,719
uh and you're right like reno and cubic

2704
01:47:32,719 --> 01:47:34,159
they don't really have the same latency

2705
01:47:34,159 --> 01:47:36,560
concerns but they also kind of congest a

2706
01:47:36,560 --> 01:47:38,080
lot easier

2707
01:47:38,080 --> 01:47:39,199
um

2708
01:47:39,199 --> 01:47:41,199
i think eventually it would be nice to

2709
01:47:41,199 --> 01:47:42,719
have more control over congestion

2710
01:47:42,719 --> 01:47:45,280
control in web transport but i think

2711
01:47:45,280 --> 01:47:47,600
that's probably asking a lot i'll be

2712
01:47:47,600 --> 01:47:48,960
honest i think that's probably asking

2713
01:47:48,960 --> 01:47:51,440
too much for browsers to say like let me

2714
01:47:51,440 --> 01:47:53,760
control the fine grained when every

2715
01:47:53,760 --> 01:47:56,159
package should be sent um but i think

2716
01:47:56,159 --> 01:47:58,480
that's up for discussion and certainly a

2717
01:47:58,480 --> 01:48:02,639
w3c thing um how much control should an

2718
01:48:02,639 --> 01:48:04,400
application have over when individual

2719
01:48:04,400 --> 01:48:07,119
packets are sent

2720
01:48:15,040 --> 01:48:16,800
which is good i mean i

2721
01:48:16,800 --> 01:48:18,960
i think that maybe the level that you

2722
01:48:18,960 --> 01:48:20,800
might want to consider at some point is

2723
01:48:20,800 --> 01:48:22,239
that there's some sort of hints that can

2724
01:48:22,239 --> 01:48:24,320
be passed on down

2725
01:48:24,320 --> 01:48:26,080
about the congestion control that's used

2726
01:48:26,080 --> 01:48:28,000
at the quick layer but we're probably

2727
01:48:28,000 --> 01:48:30,159
not anywhere near that point yet um but

2728
01:48:30,159 --> 01:48:31,920
it probably at some point we want to do

2729
01:48:31,920 --> 01:48:33,520
we probably will be at that point and we

2730
01:48:33,520 --> 01:48:35,600
might want to think about whether you're

2731
01:48:35,600 --> 01:48:37,199
going to directly control what what

2732
01:48:37,199 --> 01:48:38,560
quick uses or whether you're just going

2733
01:48:38,560 --> 01:48:39,840
to pass down some hints about the

2734
01:48:39,840 --> 01:48:41,760
attributes of what you wish it what

2735
01:48:41,760 --> 01:48:44,400
about your desired performance and i i

2736
01:48:44,400 --> 01:48:45,840
don't have i don't really care as long

2737
01:48:45,840 --> 01:48:49,119
as there's some way to influence it

2738
01:48:49,119 --> 01:48:51,360
uh just to respond to cullen that's kind

2739
01:48:51,360 --> 01:48:52,960
of what's been proposed in the api it

2740
01:48:52,960 --> 01:48:54,400
would be some hint in the constructor

2741
01:48:54,400 --> 01:48:56,000
that would tell you what kind of cc you

2742
01:48:56,000 --> 01:48:57,199
want

2743
01:48:57,199 --> 01:49:00,480
yeah exactly i mean i don't see what

2744
01:49:00,480 --> 01:49:02,000
that seems adequate for what i can

2745
01:49:02,000 --> 01:49:03,360
imagine right now is what's there right

2746
01:49:03,360 --> 01:49:04,960
now so like that's why i'm raising the

2747
01:49:04,960 --> 01:49:08,600
issues it seems fine

2748
01:49:15,280 --> 01:49:17,679
that was a nice screen frame freeze uh

2749
01:49:17,679 --> 01:49:20,000
victor

2750
01:49:20,080 --> 01:49:21,119
uh

2751
01:49:21,119 --> 01:49:23,599
yeah i think both variants both perfect

2752
01:49:23,599 --> 01:49:26,320
for congestion control are possible my

2753
01:49:26,320 --> 01:49:28,560
my idea was the simplest one is like

2754
01:49:28,560 --> 01:49:31,360
would have an enum which would let you

2755
01:49:31,360 --> 01:49:33,599
switch between something like bbr and

2756
01:49:33,599 --> 01:49:36,080
something like i don't know goog cc

2757
01:49:36,080 --> 01:49:39,840
uh or any other real-time appropriate uh

2758
01:49:39,840 --> 01:49:41,280
algorithm

2759
01:49:41,280 --> 01:49:43,599
but

2760
01:49:43,599 --> 01:49:46,880
it is not entirely infeasible to hand

2761
01:49:46,880 --> 01:49:47,679
off

2762
01:49:47,679 --> 01:49:51,119
suggestion control to javascript i've

2763
01:49:51,119 --> 01:49:54,719
seen at least a research

2764
01:49:54,719 --> 01:49:58,239
project that they uh i don't know if

2765
01:49:58,239 --> 01:50:00,719
they ever published a paper but they had

2766
01:50:00,719 --> 01:50:02,000
a working

2767
01:50:02,000 --> 01:50:04,320
prototype of to move

2768
01:50:04,320 --> 01:50:07,280
congestion control out of linux kernel

2769
01:50:07,280 --> 01:50:08,960
to user space

2770
01:50:08,960 --> 01:50:11,360
and that was a

2771
01:50:11,360 --> 01:50:12,800
roughly

2772
01:50:12,800 --> 01:50:14,719
like

2773
01:50:14,719 --> 01:50:16,719
cross process can out of process

2774
01:50:16,719 --> 01:50:18,080
construction control so this is

2775
01:50:18,080 --> 01:50:20,239
definitely possible and is even

2776
01:50:20,239 --> 01:50:22,560
something that people have done before

2777
01:50:22,560 --> 01:50:24,960
and the question would be is it

2778
01:50:24,960 --> 01:50:26,400
really worth

2779
01:50:26,400 --> 01:50:30,480
of engineering investment at that point

2780
01:50:35,040 --> 01:50:36,800
yeah i guess to victor's question it's

2781
01:50:36,800 --> 01:50:38,560
probably worth discussing at some point

2782
01:50:38,560 --> 01:50:39,440
what

2783
01:50:39,440 --> 01:50:41,920
uh how you could figure that out i mean

2784
01:50:41,920 --> 01:50:43,280
i guess the first step would be for

2785
01:50:43,280 --> 01:50:44,719
people to do their own thing and see

2786
01:50:44,719 --> 01:50:48,000
what works and what doesn't work

2787
01:50:48,719 --> 01:50:51,119
and you know have some evidence

2788
01:50:51,119 --> 01:50:52,960
right now i think you know victor

2789
01:50:52,960 --> 01:50:55,520
there's some people working on scream

2790
01:50:55,520 --> 01:50:58,080
um so uh i think they've had some

2791
01:50:58,080 --> 01:50:59,840
results that suggest that something like

2792
01:50:59,840 --> 01:51:02,400
google cc or scream might be worthwhile

2793
01:51:02,400 --> 01:51:04,080
but there's also the issue

2794
01:51:04,080 --> 01:51:05,280
you know particularly if you're doing

2795
01:51:05,280 --> 01:51:07,040
weird things like pooling

2796
01:51:07,040 --> 01:51:09,199
like what would happen there it may not

2797
01:51:09,199 --> 01:51:12,080
be that simple

2798
01:51:17,280 --> 01:51:19,840
all right it appears we have drained the

2799
01:51:19,840 --> 01:51:22,060
queue

2800
01:51:22,060 --> 01:51:25,719
[Music]

2801
01:51:25,719 --> 01:51:28,080
unless folks have

2802
01:51:28,080 --> 01:51:30,480
other things i think and we're getting

2803
01:51:30,480 --> 01:51:32,719
closer to time i might i think we're

2804
01:51:32,719 --> 01:51:34,560
going to wrap this up

2805
01:51:34,560 --> 01:51:35,760
um

2806
01:51:35,760 --> 01:51:37,840
thanks everyone for coming

2807
01:51:37,840 --> 01:51:39,840
thanks to the presenters

2808
01:51:39,840 --> 01:51:41,840
for taking the time to make slides and

2809
01:51:41,840 --> 01:51:44,320
to present i think we had a very

2810
01:51:44,320 --> 01:51:46,480
productive session today we got closer

2811
01:51:46,480 --> 01:51:48,719
to resolving quite a few issues

2812
01:51:48,719 --> 01:51:50,560
and we're starting a brand new design

2813
01:51:50,560 --> 01:51:52,320
team to

2814
01:51:52,320 --> 01:51:54,159
address a thorny one i think we're

2815
01:51:54,159 --> 01:51:56,880
making good progress to

2816
01:51:56,880 --> 01:51:59,119
getting these documents uh close to

2817
01:51:59,119 --> 01:52:01,840
something very stable which is great um

2818
01:52:01,840 --> 01:52:03,840
thanks everyone for that thanks everyone

2819
01:52:03,840 --> 01:52:06,239
for keeping always making sure this

2820
01:52:06,239 --> 01:52:08,800
working group is a fun and

2821
01:52:08,800 --> 01:52:11,520
polite pleasant place to work so thanks

2822
01:52:11,520 --> 01:52:13,920
and uh we'll see you on the mailing list

2823
01:52:13,920 --> 01:52:16,639
and potentially at an interim

2824
01:52:16,639 --> 01:52:18,560
assuming the design team reaches

2825
01:52:18,560 --> 01:52:21,520
something in the near future

2826
01:52:21,520 --> 01:52:23,440
thanks and bye

2827
01:52:23,440 --> 01:52:31,240
[Music]

2828
01:52:42,000 --> 01:52:45,000
hmm

2829
01:53:01,520 --> 01:53:04,520
um

2830
01:53:28,400 --> 01:53:31,400
okay

2831
01:53:47,280 --> 01:53:50,280
yes

