1
00:00:07,919 --> 00:00:10,919
okay

2
00:00:16,480 --> 00:00:19,480
um

3
00:00:35,440 --> 00:00:38,440
so

4
00:00:50,079 --> 00:00:53,079
okay

5
00:01:24,000 --> 00:01:27,320
thank you

6
00:01:43,920 --> 00:01:44,880
hello

7
00:01:44,880 --> 00:01:46,640
hello

8
00:01:46,640 --> 00:01:48,320
hello then we can hear you loud and

9
00:01:48,320 --> 00:01:49,520
clear

10
00:01:49,520 --> 00:01:52,640
okay okay that's great

11
00:01:52,840 --> 00:01:57,000
indeed welcome

12
00:02:11,760 --> 00:02:13,280
all right

13
00:02:13,280 --> 00:02:14,480
um

14
00:02:14,480 --> 00:02:16,720
we have about 80 people congregated

15
00:02:16,720 --> 00:02:18,720
locally and virtually i would like to

16
00:02:18,720 --> 00:02:21,360
welcome all of you to the saffnot birds

17
00:02:21,360 --> 00:02:23,680
of a feather session

18
00:02:23,680 --> 00:02:27,120
this session is being recorded

19
00:02:28,319 --> 00:02:29,360
by now

20
00:02:29,360 --> 00:02:31,519
given that we're halfway through the

21
00:02:31,519 --> 00:02:34,480
ietf meeting in vienna most of you have

22
00:02:34,480 --> 00:02:37,440
seen the notewell

23
00:02:37,440 --> 00:02:39,040
please keep in mind that anything you

24
00:02:39,040 --> 00:02:40,800
say is considered a contribution to the

25
00:02:40,800 --> 00:02:44,000
ietf and that civility is dearly

26
00:02:44,000 --> 00:02:47,120
important to all of us

27
00:02:49,519 --> 00:02:52,319
everybody uh who wishes to comment uh

28
00:02:52,319 --> 00:02:54,080
and is locally here in the room in

29
00:02:54,080 --> 00:02:56,640
vienna should load up the meet echo

30
00:02:56,640 --> 00:02:57,519
light

31
00:02:57,519 --> 00:02:59,599
tool on their phone there's qr codes on

32
00:02:59,599 --> 00:03:01,760
the on the chairs

33
00:03:01,760 --> 00:03:03,519
and that allows you to join or leave the

34
00:03:03,519 --> 00:03:04,400
queue

35
00:03:04,400 --> 00:03:06,560
if you wish to ask a question or express

36
00:03:06,560 --> 00:03:09,040
a comment

37
00:03:09,760 --> 00:03:11,599
for the remote participants make sure

38
00:03:11,599 --> 00:03:14,159
that your microphone is muted

39
00:03:14,159 --> 00:03:15,120
when you're

40
00:03:15,120 --> 00:03:18,360
not talking

41
00:03:19,200 --> 00:03:21,760
so what is safnet

42
00:03:21,760 --> 00:03:23,440
sapnet

43
00:03:23,440 --> 00:03:26,879
this session is a so-called exploratory

44
00:03:26,879 --> 00:03:28,400
birds of a feather

45
00:03:28,400 --> 00:03:30,840
session this means we are not a working

46
00:03:30,840 --> 00:03:34,319
group this is a congregation where we

47
00:03:34,319 --> 00:03:36,959
look for other interested parties

48
00:03:36,959 --> 00:03:40,159
for feedback from the wider community on

49
00:03:40,159 --> 00:03:42,080
the problem

50
00:03:42,080 --> 00:03:45,519
of source address validation

51
00:03:45,519 --> 00:03:47,440
and and we don't know where exactly this

52
00:03:47,440 --> 00:03:49,599
work will go after this session but this

53
00:03:49,599 --> 00:03:52,799
session exists to help us inform on what

54
00:03:52,799 --> 00:03:55,519
potential next steps exist and uh

55
00:03:55,519 --> 00:03:56,720
who

56
00:03:56,720 --> 00:03:58,480
who the people are that are interested

57
00:03:58,480 --> 00:04:01,840
uh to take on this work

58
00:04:04,799 --> 00:04:06,400
looking at the space that exists

59
00:04:06,400 --> 00:04:08,080
currently there is for instance best

60
00:04:08,080 --> 00:04:11,439
current practices document 38

61
00:04:11,439 --> 00:04:14,080
but it has proven to be a bit of a

62
00:04:14,080 --> 00:04:16,959
challenge in some circumstances

63
00:04:16,959 --> 00:04:18,639
um and

64
00:04:18,639 --> 00:04:20,639
other initiatives exist such as manners

65
00:04:20,639 --> 00:04:22,639
but they are a set of recommendations

66
00:04:22,639 --> 00:04:25,199
rather than a technology

67
00:04:25,199 --> 00:04:27,040
so in this session we will

68
00:04:27,040 --> 00:04:30,320
hear about techno technical solutions to

69
00:04:30,320 --> 00:04:31,680
improve

70
00:04:31,680 --> 00:04:33,600
the ability to

71
00:04:33,600 --> 00:04:34,800
combat

72
00:04:34,800 --> 00:04:37,919
source address spoofing

73
00:04:39,680 --> 00:04:40,840
we'll start with

74
00:04:40,840 --> 00:04:45,040
a background and gap analysis

75
00:04:45,040 --> 00:04:48,080
followed by discussion which i'll try to

76
00:04:48,080 --> 00:04:51,120
moderate to the best of my abilities

77
00:04:51,120 --> 00:04:52,880
and then two

78
00:04:52,880 --> 00:04:54,840
potential solution directions are

79
00:04:54,840 --> 00:04:58,720
presented known as dsaf and isaf

80
00:04:58,720 --> 00:05:02,000
and at the end of that we'll again have

81
00:05:02,000 --> 00:05:04,240
ample of time for questions and

82
00:05:04,240 --> 00:05:07,800
hopefully answers

83
00:05:10,080 --> 00:05:13,039
with that i think we can move on to the

84
00:05:13,039 --> 00:05:15,520
first presentation joe all good from

85
00:05:15,520 --> 00:05:18,000
your side

86
00:05:19,840 --> 00:05:21,680
that sounds right to me

87
00:05:21,680 --> 00:05:24,320
let's hand it the

88
00:05:24,320 --> 00:05:26,320
slides to dan and he can present the

89
00:05:26,320 --> 00:05:29,759
background and gap analysis

90
00:05:35,759 --> 00:05:39,479
okay i'm ready

91
00:05:41,520 --> 00:05:43,680
then you have to use the share

92
00:05:43,680 --> 00:05:47,039
preloaded slides button on the left hand

93
00:05:47,039 --> 00:05:48,400
panel

94
00:05:48,400 --> 00:05:50,840
next to your cube next to the cue

95
00:05:50,840 --> 00:05:55,680
button and slow down the gap analysis

96
00:05:55,680 --> 00:05:57,759
ask share the slides

97
00:05:57,759 --> 00:05:59,680
you can you you control the sharing so

98
00:05:59,680 --> 00:06:03,120
that you can page when you're ready

99
00:06:03,199 --> 00:06:04,880
uh okay

100
00:06:04,880 --> 00:06:07,199
okay okay okay okay

101
00:06:07,199 --> 00:06:10,000
sorry sorry okay okay analysis

102
00:06:10,000 --> 00:06:11,360
here

103
00:06:11,360 --> 00:06:12,960
there you are so

104
00:06:12,960 --> 00:06:16,240
so can you see the screen the slides

105
00:06:16,240 --> 00:06:18,240
we can see the slides we can hear you go

106
00:06:18,240 --> 00:06:20,000
for it

107
00:06:20,000 --> 00:06:21,280
okay

108
00:06:21,280 --> 00:06:23,600
so uh

109
00:06:23,600 --> 00:06:26,880
good morning or good afternoon everyone

110
00:06:26,880 --> 00:06:27,919
uh

111
00:06:27,919 --> 00:06:31,039
welcome to this saturday off

112
00:06:31,039 --> 00:06:34,400
uh i'm danny from chihuahua university

113
00:06:34,400 --> 00:06:35,280
first

114
00:06:35,280 --> 00:06:38,000
i will present the use cases and gap

115
00:06:38,000 --> 00:06:39,199
analysis

116
00:06:39,199 --> 00:06:42,960
of source address validation

117
00:06:43,120 --> 00:06:45,520
so we all know that

118
00:06:45,520 --> 00:06:48,560
source address validation or sieve

119
00:06:48,560 --> 00:06:52,240
is an important problem for the internet

120
00:06:52,240 --> 00:06:55,840
in rfc six line five line

121
00:06:55,840 --> 00:06:59,039
it makes a very good documentation of

122
00:06:59,039 --> 00:07:02,080
the various malicious attacks that may

123
00:07:02,080 --> 00:07:05,039
come from source address spoofing

124
00:07:05,039 --> 00:07:07,680
especially represented by reflective

125
00:07:07,680 --> 00:07:09,919
ddos attack

126
00:07:09,919 --> 00:07:12,960
to deal with source address spoofing

127
00:07:12,960 --> 00:07:16,400
network operators needed to deploy safe

128
00:07:16,400 --> 00:07:19,440
mechanisms on network devices

129
00:07:19,440 --> 00:07:22,080
in order to permit traffic with valid

130
00:07:22,080 --> 00:07:24,960
source address and block traffic with

131
00:07:24,960 --> 00:07:27,840
invented source address

132
00:07:27,840 --> 00:07:30,960
since the year of 2004

133
00:07:30,960 --> 00:07:34,240
there is a new weave of interest in safe

134
00:07:34,240 --> 00:07:35,520
mechanisms

135
00:07:35,520 --> 00:07:38,720
because manus initiative is calling on

136
00:07:38,720 --> 00:07:42,479
network operators to implement sieve

137
00:07:42,479 --> 00:07:44,400
and expect that

138
00:07:44,400 --> 00:07:47,440
the validation should be as close to the

139
00:07:47,440 --> 00:07:49,759
source as possible

140
00:07:49,759 --> 00:07:50,960
however

141
00:07:50,960 --> 00:07:51,759
we

142
00:07:51,759 --> 00:07:55,599
also know that safe is also changing

143
00:07:55,599 --> 00:07:58,879
a desired save mechanism should

144
00:07:58,879 --> 00:08:01,280
satisfy the following requirements

145
00:08:01,280 --> 00:08:04,720
the first is accuracy

146
00:08:04,720 --> 00:08:05,919
so

147
00:08:05,919 --> 00:08:09,599
we should avoid improper block of normal

148
00:08:09,599 --> 00:08:10,800
traffic

149
00:08:10,800 --> 00:08:12,560
and should reduce

150
00:08:12,560 --> 00:08:15,680
improper permit of sports traffic as

151
00:08:15,680 --> 00:08:18,400
much as possible

152
00:08:18,400 --> 00:08:21,440
the second requirement is incremental

153
00:08:21,440 --> 00:08:22,879
deployment

154
00:08:22,879 --> 00:08:24,319
in practice

155
00:08:24,319 --> 00:08:27,360
it is difficult to expect all network

156
00:08:27,360 --> 00:08:30,319
operators or all routers

157
00:08:30,319 --> 00:08:34,080
to deploy safe mechanism simultaneously

158
00:08:34,080 --> 00:08:36,240
so we hope that

159
00:08:36,240 --> 00:08:38,799
partial deployment can also bring

160
00:08:38,799 --> 00:08:40,640
benefit

161
00:08:40,640 --> 00:08:44,480
and the third requirement is the cost

162
00:08:44,480 --> 00:08:46,480
although we know that

163
00:08:46,480 --> 00:08:49,360
any new mechanism will bring the

164
00:08:49,360 --> 00:08:52,399
deployment cost but we hope that the

165
00:08:52,399 --> 00:08:55,839
cost is affordable

166
00:08:57,519 --> 00:08:59,279
so this

167
00:08:59,279 --> 00:09:02,240
safe actually is an old problem with a

168
00:09:02,240 --> 00:09:06,399
very long history of attention in ietf

169
00:09:06,399 --> 00:09:09,680
as early as the year of 1998

170
00:09:09,680 --> 00:09:13,040
english filtering or acl based the safe

171
00:09:13,040 --> 00:09:15,480
was proposed in offset

172
00:09:15,480 --> 00:09:17,279
2267

173
00:09:17,279 --> 00:09:20,000
but its problem is that it requires

174
00:09:20,000 --> 00:09:20,839
manual

175
00:09:20,839 --> 00:09:23,519
configuration after that

176
00:09:23,519 --> 00:09:25,519
in 2004

177
00:09:25,519 --> 00:09:28,320
fc3704

178
00:09:28,320 --> 00:09:31,760
proposed the strict erpf feedable erpf

179
00:09:31,760 --> 00:09:34,399
as well as lucy rpf

180
00:09:34,399 --> 00:09:35,519
however

181
00:09:35,519 --> 00:09:38,800
it is aware knowing that strictly rpf in

182
00:09:38,800 --> 00:09:42,080
the freedom of erph has a problem of

183
00:09:42,080 --> 00:09:43,680
improper block

184
00:09:43,680 --> 00:09:44,560
under

185
00:09:44,560 --> 00:09:46,480
asymmetrical loading

186
00:09:46,480 --> 00:09:48,720
and the physical erpf and then loose the

187
00:09:48,720 --> 00:09:53,920
rpf have the problem of improper permit

188
00:09:53,920 --> 00:09:57,920
the recent efforts on safe mechanisms

189
00:09:57,920 --> 00:09:58,720
is

190
00:09:58,720 --> 00:10:01,760
savvy and efp rpf

191
00:10:01,760 --> 00:10:04,399
in savvy working groups

192
00:10:04,399 --> 00:10:06,320
six rfcs

193
00:10:06,320 --> 00:10:10,040
were proposed from the year of 2012 to

194
00:10:10,040 --> 00:10:11,760
2017

195
00:10:11,760 --> 00:10:14,959
with a focus on host level save in

196
00:10:14,959 --> 00:10:18,880
access networks or enterprise networks

197
00:10:18,880 --> 00:10:21,600
and about two years ago

198
00:10:21,600 --> 00:10:22,800
fc

199
00:10:22,800 --> 00:10:25,519
8704

200
00:10:25,519 --> 00:10:27,839
proposed the efp rpf

201
00:10:27,839 --> 00:10:30,959
which is actually an enhancement version

202
00:10:30,959 --> 00:10:33,440
of feedable erpf

203
00:10:33,440 --> 00:10:36,480
with the focus of mitigating the problem

204
00:10:36,480 --> 00:10:39,839
of strict erpf and feedable erpf in some

205
00:10:39,839 --> 00:10:42,320
cases

206
00:10:43,200 --> 00:10:44,160
so

207
00:10:44,160 --> 00:10:46,640
why do we need a new

208
00:10:46,640 --> 00:10:48,640
interdiment and interdependent safe

209
00:10:48,640 --> 00:10:50,560
technology

210
00:10:50,560 --> 00:10:52,200
in rc

211
00:10:52,200 --> 00:10:55,760
5210 the server architecture divides

212
00:10:55,760 --> 00:10:58,480
sieve into three second levels

213
00:10:58,480 --> 00:11:01,279
namely access network safe

214
00:11:01,279 --> 00:11:04,800
interdemensive and interdemensive

215
00:11:04,800 --> 00:11:06,079
however

216
00:11:06,079 --> 00:11:08,800
savvy for access network safe

217
00:11:08,800 --> 00:11:10,399
is not enough

218
00:11:10,399 --> 00:11:13,279
because the number operators for access

219
00:11:13,279 --> 00:11:15,519
networks is very huge

220
00:11:15,519 --> 00:11:18,240
so it is difficult to require all access

221
00:11:18,240 --> 00:11:19,920
networks to deploy service

222
00:11:19,920 --> 00:11:21,839
simultaneously

223
00:11:21,839 --> 00:11:24,640
when some access networks do not deploy

224
00:11:24,640 --> 00:11:25,760
survey

225
00:11:25,760 --> 00:11:27,160
we hope that

226
00:11:27,160 --> 00:11:28,800
interdemonstrative and the

227
00:11:28,800 --> 00:11:31,920
interdependencies can also help theater

228
00:11:31,920 --> 00:11:33,360
spoofing traffic

229
00:11:33,360 --> 00:11:36,240
as close to the source as possible

230
00:11:36,240 --> 00:11:39,360
without only dealing with the spoofing

231
00:11:39,360 --> 00:11:42,480
traffic and the destination

232
00:11:42,480 --> 00:11:45,760
and for intro and interdom and save erpf

233
00:11:45,760 --> 00:11:49,040
based technology is also not enough

234
00:11:49,040 --> 00:11:50,639
as mentioned

235
00:11:50,639 --> 00:11:54,639
strictly erpf feasible urpf and lou crpf

236
00:11:54,639 --> 00:11:57,279
have improper block or improper permit

237
00:11:57,279 --> 00:11:58,399
problems

238
00:11:58,399 --> 00:12:02,079
well efp urpf does not completely solve

239
00:12:02,079 --> 00:12:04,638
the problem

240
00:12:06,800 --> 00:12:07,760
next

241
00:12:07,760 --> 00:12:11,600
we will use several pieces to analyze

242
00:12:11,600 --> 00:12:14,240
the gap

243
00:12:14,240 --> 00:12:15,120
the

244
00:12:15,120 --> 00:12:18,079
first example next is this is a

245
00:12:18,079 --> 00:12:20,240
introduction network

246
00:12:20,240 --> 00:12:23,279
there are seven routers

247
00:12:23,279 --> 00:12:24,959
each router

248
00:12:24,959 --> 00:12:28,560
uses one port to connect its supplement

249
00:12:28,560 --> 00:12:31,600
and uses the other ports to connect the

250
00:12:31,600 --> 00:12:34,160
neighboring routers

251
00:12:34,160 --> 00:12:34,959
now

252
00:12:34,959 --> 00:12:37,680
let's focus on router 7

253
00:12:37,680 --> 00:12:42,160
and assume zotero 7 applies strictly rpf

254
00:12:42,160 --> 00:12:45,440
only at the separate port

255
00:12:45,440 --> 00:12:48,320
so the effect is that

256
00:12:48,320 --> 00:12:50,800
if all the other resulters in the

257
00:12:50,800 --> 00:12:53,839
network make the same deployment

258
00:12:53,839 --> 00:12:56,320
that is all the other routers

259
00:12:56,320 --> 00:12:58,800
applies strictly rpf only under the

260
00:12:58,800 --> 00:13:00,160
subway the port

261
00:13:00,160 --> 00:13:02,720
that's okay there will be no problem

262
00:13:02,720 --> 00:13:06,000
however in practice we cannot require

263
00:13:06,000 --> 00:13:08,639
that all the routers makes the same

264
00:13:08,639 --> 00:13:10,240
deployment

265
00:13:10,240 --> 00:13:14,480
and let's assume that if only router 1 2

266
00:13:14,480 --> 00:13:16,000
4 7

267
00:13:16,000 --> 00:13:17,760
makes a deployment

268
00:13:17,760 --> 00:13:20,480
and the other daughters are in in the

269
00:13:20,480 --> 00:13:24,560
anti-product area there will be problems

270
00:13:24,560 --> 00:13:27,600
so let's see an example

271
00:13:27,600 --> 00:13:30,720
when router 3 sends package to that

272
00:13:30,720 --> 00:13:31,839
seven

273
00:13:31,839 --> 00:13:34,880
by spoofing the source addresses of the

274
00:13:34,880 --> 00:13:36,560
deployed area

275
00:13:36,560 --> 00:13:37,680
that is

276
00:13:37,680 --> 00:13:40,160
smoothing the source of the stresses of

277
00:13:40,160 --> 00:13:43,519
p1 p2 p4

278
00:13:43,519 --> 00:13:46,880
then zotero 7 will improperly permit

279
00:13:46,880 --> 00:13:48,399
these packets

280
00:13:48,399 --> 00:13:52,880
because delta 7 does not enable erpf

281
00:13:52,880 --> 00:13:56,240
checking and its port connecting router

282
00:13:56,240 --> 00:13:57,839
3.

283
00:13:57,839 --> 00:14:00,720
note that it means the sublets

284
00:14:00,720 --> 00:14:04,079
in the undeplored area can spoof the

285
00:14:04,079 --> 00:14:07,040
source addresses of the diploid area

286
00:14:07,040 --> 00:14:08,800
which will hurt the

287
00:14:08,800 --> 00:14:10,399
incentive of

288
00:14:10,399 --> 00:14:13,519
routers or operators to deploy safe

289
00:14:13,519 --> 00:14:15,120
mechanism

290
00:14:15,120 --> 00:14:17,360
therefore it means that

291
00:14:17,360 --> 00:14:19,680
applying strict erpf

292
00:14:19,680 --> 00:14:21,839
only on the subway the port

293
00:14:21,839 --> 00:14:23,760
in introductive

294
00:14:23,760 --> 00:14:28,160
has a improper permit problem

295
00:14:28,160 --> 00:14:31,440
then we may ask hardbot net

296
00:14:31,440 --> 00:14:33,040
each router

297
00:14:33,040 --> 00:14:37,600
applying strictly rpf at all the ports

298
00:14:37,600 --> 00:14:41,040
okay let's just use the same figure and

299
00:14:41,040 --> 00:14:42,839
the same example

300
00:14:42,839 --> 00:14:45,279
now loser 7

301
00:14:45,279 --> 00:14:49,519
applies strictly rpf at all the ports

302
00:14:49,519 --> 00:14:51,360
but we assume that

303
00:14:51,360 --> 00:14:53,920
there is a symmetric routing

304
00:14:53,920 --> 00:14:57,440
between launcher 7 and the launcher 6.

305
00:14:57,440 --> 00:15:00,639
specifically resulting parts from letter

306
00:15:00,639 --> 00:15:02,560
7 to letter 6

307
00:15:02,560 --> 00:15:03,519
is

308
00:15:03,519 --> 00:15:07,519
along the paths of resultant 7 5 and 6

309
00:15:07,519 --> 00:15:08,399
while

310
00:15:08,399 --> 00:15:11,040
in the reverse direction resulting pass

311
00:15:11,040 --> 00:15:14,320
from letter 6 to doctor 7 is another

312
00:15:14,320 --> 00:15:18,480
path of verse 6 3 and 7.

313
00:15:18,480 --> 00:15:20,800
now there will be problem

314
00:15:20,800 --> 00:15:24,560
when letter 6 sends a valid package

315
00:15:24,560 --> 00:15:26,720
with correct source of addresses to

316
00:15:26,720 --> 00:15:27,839
letter

317
00:15:27,839 --> 00:15:30,880
seven through that three

318
00:15:30,880 --> 00:15:33,839
when zotero 7 checks the incoming

319
00:15:33,839 --> 00:15:36,959
interface of this package by looking up

320
00:15:36,959 --> 00:15:39,839
its local local flip it will find that

321
00:15:39,839 --> 00:15:43,199
okay the income interface does not match

322
00:15:43,199 --> 00:15:45,600
the auto interface of the field

323
00:15:45,600 --> 00:15:48,000
so it will improperly block these

324
00:15:48,000 --> 00:15:49,360
packets

325
00:15:49,360 --> 00:15:50,880
so it means that

326
00:15:50,880 --> 00:15:52,160
in this case

327
00:15:52,160 --> 00:15:55,199
applying strictly rpf and all the ports

328
00:15:55,199 --> 00:15:56,720
into the receive

329
00:15:56,720 --> 00:16:00,399
will have improper block problem

330
00:16:00,399 --> 00:16:01,759
as a whole

331
00:16:01,759 --> 00:16:03,920
no matter whether we

332
00:16:03,920 --> 00:16:07,600
apply strict erpf and a separate port

333
00:16:07,600 --> 00:16:11,680
or apply strictly rpf at all the ports

334
00:16:11,680 --> 00:16:14,320
there will be either improper permit

335
00:16:14,320 --> 00:16:17,680
problem or improper block problem for

336
00:16:17,680 --> 00:16:21,239
interdependent network

337
00:16:22,000 --> 00:16:22,880
okay

338
00:16:22,880 --> 00:16:26,639
then let's turn to the interdiment case

339
00:16:26,639 --> 00:16:28,079
in this figure

340
00:16:28,079 --> 00:16:29,519
there are

341
00:16:29,519 --> 00:16:33,600
five axes it's one two three four

342
00:16:33,600 --> 00:16:34,880
and five

343
00:16:34,880 --> 00:16:37,920
and the next p special attention on

344
00:16:37,920 --> 00:16:39,759
s4

345
00:16:39,759 --> 00:16:41,680
now

346
00:16:41,680 --> 00:16:44,399
s5 is appearing s

347
00:16:44,399 --> 00:16:46,160
over s4

348
00:16:46,160 --> 00:16:48,399
and s1 and s2

349
00:16:48,399 --> 00:16:52,160
are two customer asses of s4

350
00:16:52,160 --> 00:16:53,279
s3

351
00:16:53,279 --> 00:16:57,120
is a customer of s1 and s2 with the

352
00:16:57,120 --> 00:16:59,519
multi-homing connection

353
00:16:59,519 --> 00:17:00,959
so

354
00:17:00,959 --> 00:17:05,839
due to the new expert community when s3

355
00:17:05,839 --> 00:17:10,079
propagates its roots of the prefix p3

356
00:17:10,079 --> 00:17:11,199
to

357
00:17:11,199 --> 00:17:13,839
other domain of the network

358
00:17:13,839 --> 00:17:17,839
it only propagates along the path of s3

359
00:17:17,839 --> 00:17:20,559
s2 and s4

360
00:17:20,559 --> 00:17:22,480
and it does not

361
00:17:22,480 --> 00:17:26,959
advertise its roots along the path of s3

362
00:17:26,959 --> 00:17:29,840
s1 and s4

363
00:17:29,840 --> 00:17:30,880
okay

364
00:17:30,880 --> 00:17:31,760
now

365
00:17:31,760 --> 00:17:34,080
let's check the

366
00:17:34,080 --> 00:17:38,160
save mechanism for s4

367
00:17:38,160 --> 00:17:42,080
assume that s4 runs strictly rpf

368
00:17:42,080 --> 00:17:44,000
or feasible erpf

369
00:17:44,000 --> 00:17:47,360
or efp erpf with algorithm a

370
00:17:47,360 --> 00:17:50,320
and it's the two customer ports

371
00:17:50,320 --> 00:17:54,000
now receivable and s4

372
00:17:54,000 --> 00:17:55,039
is that

373
00:17:55,039 --> 00:17:58,960
the packets with source addresses of p3

374
00:17:58,960 --> 00:18:00,480
can only arrive

375
00:18:00,480 --> 00:18:02,640
from s2

376
00:18:02,640 --> 00:18:03,760
but now

377
00:18:03,760 --> 00:18:07,120
s3 may send packets with valid source

378
00:18:07,120 --> 00:18:09,120
addresses to s4

379
00:18:09,120 --> 00:18:11,120
through s1

380
00:18:11,120 --> 00:18:12,799
for this package

381
00:18:12,799 --> 00:18:17,039
s4 will improperly block them

382
00:18:17,039 --> 00:18:18,799
so it means that

383
00:18:18,799 --> 00:18:20,799
in interdependencies

384
00:18:20,799 --> 00:18:25,440
strictly rpf failure rpf or efprpf with

385
00:18:25,440 --> 00:18:26,880
algorithm a

386
00:18:26,880 --> 00:18:30,799
will need to improper block problem

387
00:18:30,799 --> 00:18:34,799
okay then we may ask that hardboard s4

388
00:18:34,799 --> 00:18:38,160
choose other urpf mechanisms

389
00:18:38,160 --> 00:18:39,360
besides

390
00:18:39,360 --> 00:18:41,600
okay strike the rpf feedable

391
00:18:41,600 --> 00:18:45,520
and a fp erpf with algorithm a

392
00:18:45,520 --> 00:18:47,120
there are two other

393
00:18:47,120 --> 00:18:51,039
erpf mechanisms one is loose erpf so

394
00:18:51,039 --> 00:18:53,840
loose erpf will cause significant

395
00:18:53,840 --> 00:18:55,679
improper permit

396
00:18:55,679 --> 00:18:56,720
in the

397
00:18:56,720 --> 00:18:59,760
eft urpf with algorithm b

398
00:18:59,760 --> 00:19:02,960
proposed some enhancement on that

399
00:19:02,960 --> 00:19:04,400
the idea of

400
00:19:04,400 --> 00:19:07,200
efg rpf with auxin b

401
00:19:07,200 --> 00:19:09,520
is that okay

402
00:19:09,520 --> 00:19:10,480
s4

403
00:19:10,480 --> 00:19:12,960
configures its save zoos and the

404
00:19:12,960 --> 00:19:16,000
customer pause like this

405
00:19:16,000 --> 00:19:18,320
s4 will generate

406
00:19:18,320 --> 00:19:21,280
a lot list containing source prefix of

407
00:19:21,280 --> 00:19:23,039
the custom code

408
00:19:23,039 --> 00:19:24,880
okay that is including

409
00:19:24,880 --> 00:19:27,600
s1 s2 and s3

410
00:19:27,600 --> 00:19:31,039
and applies the allow list to all its

411
00:19:31,039 --> 00:19:33,120
customer ports

412
00:19:33,120 --> 00:19:37,600
the benefit of eft rpf with algorithm b

413
00:19:37,600 --> 00:19:38,559
over

414
00:19:38,559 --> 00:19:40,720
lucia rtf is that

415
00:19:40,720 --> 00:19:44,000
the package from s4's customer cone

416
00:19:44,000 --> 00:19:46,640
cannot spoof the source addresses of the

417
00:19:46,640 --> 00:19:48,320
outside axes

418
00:19:48,320 --> 00:19:52,080
which is finer green than using new crpf

419
00:19:52,080 --> 00:19:55,039
because by using those erpf the customer

420
00:19:55,039 --> 00:19:56,880
cohen actually can

421
00:19:56,880 --> 00:19:58,640
spoof whatever

422
00:19:58,640 --> 00:20:00,720
source addresses

423
00:20:00,720 --> 00:20:02,080
okay now

424
00:20:02,080 --> 00:20:04,840
we can observe that there is another

425
00:20:04,840 --> 00:20:07,039
problem that is

426
00:20:07,039 --> 00:20:10,000
when the packets from s1

427
00:20:10,000 --> 00:20:12,880
and s2 spoof the source addresses of

428
00:20:12,880 --> 00:20:14,400
each other

429
00:20:14,400 --> 00:20:18,080
as4 will improperly permit these packets

430
00:20:18,080 --> 00:20:19,200
because

431
00:20:19,200 --> 00:20:23,600
s4 has no capability to distinguish

432
00:20:23,600 --> 00:20:28,080
the package from its customer asses

433
00:20:28,080 --> 00:20:30,880
generally we can conclude that

434
00:20:30,880 --> 00:20:33,120
loose urpf

435
00:20:33,120 --> 00:20:35,919
eft urpf with algorithm b

436
00:20:35,919 --> 00:20:38,640
interdimensive may need to improper

437
00:20:38,640 --> 00:20:41,760
permit problem

438
00:20:42,400 --> 00:20:43,440
okay

439
00:20:43,440 --> 00:20:45,440
so we find that

440
00:20:45,440 --> 00:20:47,840
there are

441
00:20:47,840 --> 00:20:51,280
permit or improper block problem

442
00:20:51,280 --> 00:20:54,000
for both internal network and

443
00:20:54,000 --> 00:20:55,520
interdependent network

444
00:20:55,520 --> 00:20:58,559
by using existing urpf based

445
00:20:58,559 --> 00:21:00,320
technologies

446
00:21:00,320 --> 00:21:02,640
then we ask a question

447
00:21:02,640 --> 00:21:05,520
what is a root cause

448
00:21:05,520 --> 00:21:08,720
we think that the root cause of the

449
00:21:08,720 --> 00:21:12,240
improper block and improv permit problem

450
00:21:12,240 --> 00:21:15,840
for erps for urpf is the safe mechanism

451
00:21:15,840 --> 00:21:16,960
is that

452
00:21:16,960 --> 00:21:20,720
urpf is a load level technology

453
00:21:20,720 --> 00:21:22,880
that means that they all never reach the

454
00:21:22,880 --> 00:21:26,000
local feed or rep table of routers to

455
00:21:26,000 --> 00:21:28,960
decide the incoming interface of packets

456
00:21:28,960 --> 00:21:32,240
which may not match the real data plane

457
00:21:32,240 --> 00:21:34,559
forwarding pass

458
00:21:34,559 --> 00:21:37,919
so to solve this problem and achieve

459
00:21:37,919 --> 00:21:39,679
accurate receive

460
00:21:39,679 --> 00:21:42,799
we may need a network level technology

461
00:21:42,799 --> 00:21:45,520
instead of the node level technology

462
00:21:45,520 --> 00:21:46,880
we hope that

463
00:21:46,880 --> 00:21:49,280
electric level protocol

464
00:21:49,280 --> 00:21:52,559
can help build an independent and

465
00:21:52,559 --> 00:21:55,360
accurate save table in each router

466
00:21:55,360 --> 00:21:57,280
which follows the real data plane

467
00:21:57,280 --> 00:21:59,200
forwarding pass

468
00:21:59,200 --> 00:22:01,039
and compared with

469
00:22:01,039 --> 00:22:03,840
strictly rpf this save table is

470
00:22:03,840 --> 00:22:06,080
different from the fifth table so the

471
00:22:06,080 --> 00:22:08,320
improper block problem under

472
00:22:08,320 --> 00:22:11,039
asymmetrical routing can be avoided

473
00:22:11,039 --> 00:22:14,240
and compared with feasible erpf loose

474
00:22:14,240 --> 00:22:18,480
crpf or efprpf the save table is finer

475
00:22:18,480 --> 00:22:21,360
green so the improper permit problem can

476
00:22:21,360 --> 00:22:24,600
be avoided

477
00:22:26,000 --> 00:22:28,240
there are also some requirements for

478
00:22:28,240 --> 00:22:30,799
designing such a network level safe

479
00:22:30,799 --> 00:22:32,080
protocol

480
00:22:32,080 --> 00:22:34,159
the most important requirement is

481
00:22:34,159 --> 00:22:35,360
accuracy

482
00:22:35,360 --> 00:22:38,559
because this is the most important

483
00:22:38,559 --> 00:22:41,360
problem of vrpf based technologies

484
00:22:41,360 --> 00:22:42,799
so we hope that

485
00:22:42,799 --> 00:22:44,880
the new protocol can

486
00:22:44,880 --> 00:22:47,440
help avoid improper block

487
00:22:47,440 --> 00:22:49,600
and reduce improper permit

488
00:22:49,600 --> 00:22:51,919
as much as possible

489
00:22:51,919 --> 00:22:53,520
and there are also some other

490
00:22:53,520 --> 00:22:54,720
requirements

491
00:22:54,720 --> 00:22:57,360
such as high scalability

492
00:22:57,360 --> 00:22:58,320
which

493
00:22:58,320 --> 00:23:00,880
means that the protocol should not cause

494
00:23:00,880 --> 00:23:03,280
too much computation and communication

495
00:23:03,280 --> 00:23:04,559
overhead

496
00:23:04,559 --> 00:23:07,679
incremental deployment which means that

497
00:23:07,679 --> 00:23:10,400
only partial resulters in the s or on

498
00:23:10,400 --> 00:23:12,720
the partial asses in the internet deploy

499
00:23:12,720 --> 00:23:14,080
the new protocol

500
00:23:14,080 --> 00:23:16,880
there will also be upper scheme compared

501
00:23:16,880 --> 00:23:19,600
with the urpf business

502
00:23:19,600 --> 00:23:22,080
as well as high security which means

503
00:23:22,080 --> 00:23:24,400
that the integrity and security of the

504
00:23:24,400 --> 00:23:28,080
protocol messages should be guaranteed

505
00:23:28,080 --> 00:23:30,400
and our basic idea

506
00:23:30,400 --> 00:23:33,280
to satisfy all the requirements above is

507
00:23:33,280 --> 00:23:34,159
that

508
00:23:34,159 --> 00:23:36,799
we can discover the real data plane

509
00:23:36,799 --> 00:23:39,840
following paths based on hoff prefix

510
00:23:39,840 --> 00:23:41,360
notification

511
00:23:41,360 --> 00:23:44,559
and generate save tables insulters along

512
00:23:44,559 --> 00:23:48,760
the notification parts

513
00:23:50,320 --> 00:23:51,919
okay

514
00:23:51,919 --> 00:23:54,400
then i will make a brief summary of this

515
00:23:54,400 --> 00:23:55,520
talk

516
00:23:55,520 --> 00:23:58,400
uh interdimen in the interdimensive is

517
00:23:58,400 --> 00:24:01,520
an important and unresolved problem in

518
00:24:01,520 --> 00:24:04,720
our community although it is a old

519
00:24:04,720 --> 00:24:06,080
problem

520
00:24:06,080 --> 00:24:08,480
in in both interdimen and interdomain

521
00:24:08,480 --> 00:24:12,080
scenarios urpf based the safe mechanisms

522
00:24:12,080 --> 00:24:15,440
have either improper block problem or

523
00:24:15,440 --> 00:24:17,600
improper permit problem

524
00:24:17,600 --> 00:24:20,640
and we argue that the root cause of your

525
00:24:20,640 --> 00:24:24,000
pf is the safe mechanism is that

526
00:24:24,000 --> 00:24:26,640
it's a node level technology and it

527
00:24:26,640 --> 00:24:30,000
depends on router's local feed or rib

528
00:24:30,000 --> 00:24:30,799
for

529
00:24:30,799 --> 00:24:33,200
for checking the source address

530
00:24:33,200 --> 00:24:36,320
and to achieve accurate receive

531
00:24:36,320 --> 00:24:39,120
we hope that a network level protocol

532
00:24:39,120 --> 00:24:42,240
can okay build an independent and

533
00:24:42,240 --> 00:24:45,039
accurate save table in each router which

534
00:24:45,039 --> 00:24:47,600
follows the real data plan forwarding

535
00:24:47,600 --> 00:24:49,918
pass

536
00:24:50,240 --> 00:24:52,240
okay that's all the stuff

537
00:24:52,240 --> 00:24:54,640
i'm glad to answer in a question thank

538
00:24:54,640 --> 00:24:56,880
you

539
00:24:57,440 --> 00:25:00,000
thank you so much

540
00:25:00,000 --> 00:25:02,080
see that the queue immediately filled up

541
00:25:02,080 --> 00:25:04,559
with a

542
00:25:04,559 --> 00:25:06,559
number of participants this is good news

543
00:25:06,559 --> 00:25:08,080
because it means that people are paying

544
00:25:08,080 --> 00:25:11,039
attention to what you were saying

545
00:25:11,039 --> 00:25:14,559
first up in the queue is ted lemon hi

546
00:25:14,559 --> 00:25:16,640
yeah ted lemon um can you go back two

547
00:25:16,640 --> 00:25:19,200
slides or maybe three slides to the last

548
00:25:19,200 --> 00:25:20,720
diagram three

549
00:25:20,720 --> 00:25:21,760
three

550
00:25:21,760 --> 00:25:23,600
no to the last diagram

551
00:25:23,600 --> 00:25:25,760
uh one more last diagram

552
00:25:25,760 --> 00:25:28,640
this one this one so um

553
00:25:28,640 --> 00:25:30,480
please uh move close to the microphone

554
00:25:30,480 --> 00:25:33,120
oh sure sorry so uh

555
00:25:33,120 --> 00:25:35,360
i had a couple questions one is oh sorry

556
00:25:35,360 --> 00:25:36,960
not this diagram it's the one with the

557
00:25:36,960 --> 00:25:39,919
uh with the the isp with next left

558
00:25:39,919 --> 00:25:42,480
and one more

559
00:25:42,480 --> 00:25:45,520
intro yes here we go okay so in this

560
00:25:45,520 --> 00:25:46,400
module

561
00:25:46,400 --> 00:25:48,080
either one of those is fine in this

562
00:25:48,080 --> 00:25:49,039
model

563
00:25:49,039 --> 00:25:50,559
um

564
00:25:50,559 --> 00:25:53,279
in order for

565
00:25:53,520 --> 00:25:56,480
in order for for sav to work

566
00:25:56,480 --> 00:25:58,240
um

567
00:25:58,240 --> 00:25:59,679
it would need to be the case that the

568
00:25:59,679 --> 00:26:01,679
that you trust the routers the as1

569
00:26:01,679 --> 00:26:03,440
router the as2 router

570
00:26:03,440 --> 00:26:05,840
to enforce uh

571
00:26:05,840 --> 00:26:08,320
the behavior uh

572
00:26:08,320 --> 00:26:09,919
basically to enforce the address

573
00:26:09,919 --> 00:26:12,320
validation is that correct

574
00:26:12,320 --> 00:26:14,960
yes so in other words if the the problem

575
00:26:14,960 --> 00:26:16,559
that you're stating here is that if cust

576
00:26:16,559 --> 00:26:19,279
if a device on the customer network

577
00:26:19,279 --> 00:26:22,480
sends a packet to the as1 router

578
00:26:22,480 --> 00:26:25,279
the as1 router that's got a bogus source

579
00:26:25,279 --> 00:26:27,360
address the as1 router is trustworthy

580
00:26:27,360 --> 00:26:29,360
you trust the as1 router to to block

581
00:26:29,360 --> 00:26:32,400
that packet is that right

582
00:26:32,400 --> 00:26:34,480
so uh no you mean you mean a blocking

583
00:26:34,480 --> 00:26:35,600
behavior

584
00:26:35,600 --> 00:26:38,080
an s4 right we still focus on the

585
00:26:38,080 --> 00:26:41,039
blocking behavior on s4 right no no so

586
00:26:41,039 --> 00:26:42,240
so the the

587
00:26:42,240 --> 00:26:43,600
or asl

588
00:26:43,600 --> 00:26:44,880
yeah the problem you were describing

589
00:26:44,880 --> 00:26:48,080
here is that uh it's possible for for

590
00:26:48,080 --> 00:26:51,200
someone in as1 or as2 to spoof packets

591
00:26:51,200 --> 00:26:54,640
from as3 right

592
00:26:54,960 --> 00:26:56,320
uh

593
00:26:56,320 --> 00:26:58,799
yeah maybe in this case more exactly is

594
00:26:58,799 --> 00:27:00,000
that uh

595
00:27:00,000 --> 00:27:02,400
we want to uh uh

596
00:27:02,400 --> 00:27:06,960
s4 cannot distinguish okay the uh uh s1

597
00:27:06,960 --> 00:27:09,200
and s2 to spoof the address of each

598
00:27:09,200 --> 00:27:10,000
other

599
00:27:10,000 --> 00:27:14,720
s3 actually is it's an s2 customer if s1

600
00:27:14,720 --> 00:27:17,200
and s2 deploy save mechanism maybe this

601
00:27:17,200 --> 00:27:19,120
kind of spoofing can be

602
00:27:19,120 --> 00:27:21,679
can be detected and avoided

603
00:27:21,679 --> 00:27:23,679
right so the problem that i'm that i'm

604
00:27:23,679 --> 00:27:25,600
asking about here is i'm trying to

605
00:27:25,600 --> 00:27:27,440
understand the trust model

606
00:27:27,440 --> 00:27:31,600
because uh so so as4 doesn't know where

607
00:27:31,600 --> 00:27:33,440
the packet came from right if if the

608
00:27:33,440 --> 00:27:35,520
packet came from as3 it's going to look

609
00:27:35,520 --> 00:27:37,039
roughly the same as if the packet came

610
00:27:37,039 --> 00:27:39,440
from as1 regardless of its source

611
00:27:39,440 --> 00:27:41,520
address or for example it might even

612
00:27:41,520 --> 00:27:43,760
come from as2 and still as4 is going to

613
00:27:43,760 --> 00:27:45,200
have no way to tell

614
00:27:45,200 --> 00:27:46,640
where that packet came from because

615
00:27:46,640 --> 00:27:48,240
nothing in the ip header to authenticate

616
00:27:48,240 --> 00:27:49,919
it so therefore

617
00:27:49,919 --> 00:27:52,159
part of the trust model here is that i

618
00:27:52,159 --> 00:27:54,320
think if i understand you correctly is

619
00:27:54,320 --> 00:27:56,000
that you're assuming that the routers

620
00:27:56,000 --> 00:27:58,240
are trustworthy that as1 is going to

621
00:27:58,240 --> 00:27:59,760
reject a bogus

622
00:27:59,760 --> 00:28:01,360
source address from its own internal

623
00:28:01,360 --> 00:28:03,039
network and that that's part of the

624
00:28:03,039 --> 00:28:05,760
trust model is that right

625
00:28:05,760 --> 00:28:07,120
uh

626
00:28:07,120 --> 00:28:10,399
actually it's like this actually for for

627
00:28:10,399 --> 00:28:11,279
because

628
00:28:11,279 --> 00:28:14,159
either urpf or this kind of save

629
00:28:14,159 --> 00:28:16,559
mechanism actually they just make the

630
00:28:16,559 --> 00:28:18,799
source address chicken based on the

631
00:28:18,799 --> 00:28:20,399
incoming port

632
00:28:20,399 --> 00:28:22,640
so for the incoming port actually they

633
00:28:22,640 --> 00:28:25,760
can only get the correct direction of

634
00:28:25,760 --> 00:28:26,640
this

635
00:28:26,640 --> 00:28:29,440
pack of this source address but if there

636
00:28:29,440 --> 00:28:30,399
is some

637
00:28:30,399 --> 00:28:33,440
spoofing between the ascs along the same

638
00:28:33,440 --> 00:28:35,120
path

639
00:28:35,120 --> 00:28:37,039
actually they cannot distinguish

640
00:28:37,039 --> 00:28:39,520
between them but the

641
00:28:39,520 --> 00:28:42,720
the key is that if we can do this kind

642
00:28:42,720 --> 00:28:43,679
of

643
00:28:43,679 --> 00:28:45,200
port-based

644
00:28:45,200 --> 00:28:47,600
direction checking

645
00:28:47,600 --> 00:28:48,960
even though

646
00:28:48,960 --> 00:28:50,559
there is some

647
00:28:50,559 --> 00:28:53,840
source address spoofing along the parts

648
00:28:53,840 --> 00:28:57,120
actually we can narrow skip and the hair

649
00:28:57,120 --> 00:28:58,720
parts twist back

650
00:28:58,720 --> 00:28:59,679
the

651
00:28:59,679 --> 00:29:01,520
source stress moving

652
00:29:01,520 --> 00:29:03,679
okay so so so you're able to you're able

653
00:29:03,679 --> 00:29:06,080
to cast blame essentially

654
00:29:06,080 --> 00:29:09,039
yeah okay all right that helps yeah the

655
00:29:09,039 --> 00:29:10,399
reason i'm asking about this is because

656
00:29:10,399 --> 00:29:12,480
the trust model here is unclear and i

657
00:29:12,480 --> 00:29:14,480
think it's actually worth documenting

658
00:29:14,480 --> 00:29:15,840
the trust model

659
00:29:15,840 --> 00:29:17,200
uh when you're talking about this

660
00:29:17,200 --> 00:29:18,559
because otherwise you know when i look

661
00:29:18,559 --> 00:29:20,000
at this i think well your solution

662
00:29:20,000 --> 00:29:22,080
sounds like it's complex and wonderful

663
00:29:22,080 --> 00:29:23,679
but doesn't actually solve the problem

664
00:29:23,679 --> 00:29:25,840
because you still have the trust problem

665
00:29:25,840 --> 00:29:27,440
but if if

666
00:29:27,440 --> 00:29:29,279
so so saying why that model actually

667
00:29:29,279 --> 00:29:31,440
makes things better is important

668
00:29:31,440 --> 00:29:32,240
um

669
00:29:32,240 --> 00:29:33,600
and then the other the other question

670
00:29:33,600 --> 00:29:35,840
that i had is just that you know and

671
00:29:35,840 --> 00:29:37,440
which actually ties back to what you

672
00:29:37,440 --> 00:29:39,840
just said is that in in this scenario

673
00:29:39,840 --> 00:29:43,919
as4 is the is the isp as12 and three are

674
00:29:43,919 --> 00:29:45,120
customers

675
00:29:45,120 --> 00:29:46,000
so

676
00:29:46,000 --> 00:29:47,679
uh the

677
00:29:47,679 --> 00:29:49,919
enforcement path here is is different

678
00:29:49,919 --> 00:29:51,279
than it would be if these were all

679
00:29:51,279 --> 00:29:53,840
independent right and it's worth talking

680
00:29:53,840 --> 00:29:55,760
about that as well i think

681
00:29:55,760 --> 00:29:57,600
so that's all i wanted to say i mean i

682
00:29:57,600 --> 00:29:58,960
think this i you know i don't have any

683
00:29:58,960 --> 00:30:00,159
objection to any of this stuff i just

684
00:30:00,159 --> 00:30:02,000
want to make it i just wanted to ask

685
00:30:02,000 --> 00:30:03,200
about the trust model because i think

686
00:30:03,200 --> 00:30:05,440
it's really important to talk about that

687
00:30:05,440 --> 00:30:07,840
as you're documenting this

688
00:30:07,840 --> 00:30:09,840
yeah actually

689
00:30:09,840 --> 00:30:12,799
this kind of trust model is also the

690
00:30:12,799 --> 00:30:15,600
trust model used in urpf all these kind

691
00:30:15,600 --> 00:30:16,240
of

692
00:30:16,240 --> 00:30:19,120
okay incoming port based save mechanisms

693
00:30:19,120 --> 00:30:21,919
have this same trust model yeah maybe we

694
00:30:21,919 --> 00:30:23,919
can just

695
00:30:23,919 --> 00:30:28,559
make them more clear okay thank you

696
00:30:29,360 --> 00:30:31,600
um

697
00:30:32,559 --> 00:30:34,080
small interjection

698
00:30:34,080 --> 00:30:36,080
i think it's good if participants coming

699
00:30:36,080 --> 00:30:38,240
to the microphone raise one point at a

700
00:30:38,240 --> 00:30:42,240
time and then rejoin the queue

701
00:30:42,240 --> 00:30:46,919
next stop bow tao please

702
00:30:57,840 --> 00:31:01,440
i'm not sure we can hear you

703
00:31:01,440 --> 00:31:02,640
hello

704
00:31:02,640 --> 00:31:04,399
yep i can hear you

705
00:31:04,399 --> 00:31:07,039
please go ahead

706
00:31:07,039 --> 00:31:09,840
i have a question

707
00:31:09,840 --> 00:31:14,080
i saw you analyzed analyzed the improper

708
00:31:14,080 --> 00:31:18,320
permit problem of the enhanced visible

709
00:31:18,320 --> 00:31:22,240
past urpf in the inter domain case

710
00:31:22,240 --> 00:31:25,679
and mentioned two algorithm you call it

711
00:31:25,679 --> 00:31:28,159
algorithm a and algorithm b

712
00:31:28,159 --> 00:31:30,080
could you please tell me what is their

713
00:31:30,080 --> 00:31:33,039
difference

714
00:31:33,039 --> 00:31:34,559
uh

715
00:31:34,559 --> 00:31:36,000
okay

716
00:31:36,000 --> 00:31:36,880
uh

717
00:31:36,880 --> 00:31:37,679
so

718
00:31:37,679 --> 00:31:39,919
you mean the difference between the two

719
00:31:39,919 --> 00:31:44,000
algorithms of efg rpf right

720
00:31:44,000 --> 00:31:45,600
yes yes

721
00:31:45,600 --> 00:31:46,399
okay

722
00:31:46,399 --> 00:31:50,000
uh actually uh these two algorithms were

723
00:31:50,000 --> 00:31:51,760
proposed in

724
00:31:51,760 --> 00:31:53,039
uh fc

725
00:31:53,039 --> 00:31:56,000
uh as an h704

726
00:31:56,000 --> 00:31:58,080
so the difference is

727
00:31:58,080 --> 00:31:58,840
uh

728
00:31:58,840 --> 00:32:03,039
that for algorithm a it just applies an

729
00:32:03,039 --> 00:32:05,760
individual allow list to each customer

730
00:32:05,760 --> 00:32:06,960
port

731
00:32:06,960 --> 00:32:09,200
uh maybe just based on the routes

732
00:32:09,200 --> 00:32:11,200
received by that port

733
00:32:11,200 --> 00:32:14,080
so since this is the customer posts are

734
00:32:14,080 --> 00:32:15,519
just

735
00:32:15,519 --> 00:32:17,840
configure different

736
00:32:17,840 --> 00:32:19,600
independent analysts

737
00:32:19,600 --> 00:32:23,120
so it will have improper block problem

738
00:32:23,120 --> 00:32:26,399
when okay one customer port does not

739
00:32:26,399 --> 00:32:28,960
receive any root for as

740
00:32:28,960 --> 00:32:32,080
just like the scenario we use the i

741
00:32:32,080 --> 00:32:33,600
think

742
00:32:33,600 --> 00:32:34,640
in

743
00:32:34,640 --> 00:32:37,519
in this case in in this slide

744
00:32:37,519 --> 00:32:40,799
and for algorithm b it just applies the

745
00:32:40,799 --> 00:32:43,840
same allow list to all the customer

746
00:32:43,840 --> 00:32:45,039
ports

747
00:32:45,039 --> 00:32:46,720
and it will

748
00:32:46,720 --> 00:32:48,880
also allow the package with source

749
00:32:48,880 --> 00:32:50,240
addresses of

750
00:32:50,240 --> 00:32:52,080
all the customer asses

751
00:32:52,080 --> 00:32:54,159
if they come from okay the customer

752
00:32:54,159 --> 00:32:55,519
interfaces

753
00:32:55,519 --> 00:32:58,159
so that this is algorithm b so by

754
00:32:58,159 --> 00:32:59,360
algorithm b

755
00:32:59,360 --> 00:33:02,559
it can avoid the improper block problem

756
00:33:02,559 --> 00:33:05,279
in algorithm a but may have improper

757
00:33:05,279 --> 00:33:08,000
permit problem but because the aces in

758
00:33:08,000 --> 00:33:09,919
the customer code kind of spoof each

759
00:33:09,919 --> 00:33:12,320
other so if you have more interest i

760
00:33:12,320 --> 00:33:16,000
think you can refer to the office 8704

761
00:33:16,000 --> 00:33:17,840
it has a very detailed description yeah

762
00:33:17,840 --> 00:33:20,158
thank you

763
00:33:20,240 --> 00:33:24,519
okay okay thank you very much

764
00:33:25,679 --> 00:33:28,640
uh next up is

765
00:33:30,480 --> 00:33:32,320
my apologies

766
00:33:32,320 --> 00:33:33,360
hello

767
00:33:33,360 --> 00:33:34,640
can you hear me

768
00:33:34,640 --> 00:33:36,080
okay can you speak up a little bit

769
00:33:36,080 --> 00:33:38,399
louder please

770
00:33:38,399 --> 00:33:40,639
uh

771
00:33:42,799 --> 00:33:43,919
thank you

772
00:33:43,919 --> 00:33:44,799
okay

773
00:33:44,799 --> 00:33:47,679
uh yeah i have a general request thank

774
00:33:47,679 --> 00:33:49,200
you for the presentation as you

775
00:33:49,200 --> 00:33:51,519
mentioned the need for network level

776
00:33:51,519 --> 00:33:54,880
token to achieve accurate sav

777
00:33:54,880 --> 00:33:57,760
what is the deployment scope of network

778
00:33:57,760 --> 00:34:00,158
level

779
00:34:01,600 --> 00:34:04,000
sorry

780
00:34:04,720 --> 00:34:07,440
maybe i can can i go ahead because there

781
00:34:07,440 --> 00:34:09,520
was an overlapping people talking

782
00:34:09,520 --> 00:34:11,839
i i took care of that go ahead giuseppe

783
00:34:11,839 --> 00:34:12,719
okay

784
00:34:12,719 --> 00:34:14,159
yeah i have to thank you for the

785
00:34:14,159 --> 00:34:16,159
presentation i have a general question

786
00:34:16,159 --> 00:34:18,879
so you analyze basically

787
00:34:18,879 --> 00:34:23,280
the improper behavior of ufcf

788
00:34:23,280 --> 00:34:26,560
and the root cause also affording for

789
00:34:26,560 --> 00:34:28,239
this

790
00:34:28,239 --> 00:34:29,679
in accuracy

791
00:34:29,679 --> 00:34:32,800
and you state that

792
00:34:32,800 --> 00:34:33,599
the

793
00:34:33,599 --> 00:34:35,918
the causes

794
00:34:35,918 --> 00:34:39,199
is caused by local fib and rib of

795
00:34:39,199 --> 00:34:40,399
routers

796
00:34:40,399 --> 00:34:42,800
so after that you propose a network

797
00:34:42,800 --> 00:34:45,760
ladder protocol for discovering

798
00:34:45,760 --> 00:34:48,399
uh real data plane the real data playing

799
00:34:48,399 --> 00:34:49,760
fast right

800
00:34:49,760 --> 00:34:50,960
so yeah

801
00:34:50,960 --> 00:34:53,839
instead of because i you know

802
00:34:53,839 --> 00:34:56,159
we have to pay a cost for for this

803
00:34:56,159 --> 00:34:57,760
discovery for this network level

804
00:34:57,760 --> 00:35:00,079
protocol so i'm wondering if

805
00:35:00,079 --> 00:35:02,880
if we consider that if we can consider

806
00:35:02,880 --> 00:35:05,440
multiple feasible paths to apply said

807
00:35:05,440 --> 00:35:08,400
rules can also work or

808
00:35:08,400 --> 00:35:13,200
you you did you just think about that or

809
00:35:13,920 --> 00:35:18,240
oh okay okay i i get your uh question

810
00:35:18,240 --> 00:35:19,920
i think in our

811
00:35:19,920 --> 00:35:22,320
meaningless maybe yari

812
00:35:22,320 --> 00:35:25,599
uh has uh okay uh asked a similar

813
00:35:25,599 --> 00:35:27,040
question

814
00:35:27,040 --> 00:35:31,760
that is okay if we just uh make this

815
00:35:31,760 --> 00:35:34,880
probing of the real data plane path

816
00:35:34,880 --> 00:35:38,720
of course we will pay additional cost

817
00:35:38,720 --> 00:35:39,760
and the

818
00:35:39,760 --> 00:35:41,920
alternative way is that

819
00:35:41,920 --> 00:35:44,560
hardware we just use some

820
00:35:44,560 --> 00:35:46,240
feasible paths

821
00:35:46,240 --> 00:35:48,640
and all the packets

822
00:35:48,640 --> 00:35:49,760
arriving

823
00:35:49,760 --> 00:35:51,520
around the feedable path

824
00:35:51,520 --> 00:35:54,560
will be permitted otherwise they will be

825
00:35:54,560 --> 00:35:57,200
blocked actually this is the same idea

826
00:35:57,200 --> 00:36:00,240
used in feedable erpf

827
00:36:00,240 --> 00:36:02,960
but this idea actually

828
00:36:02,960 --> 00:36:04,000
also

829
00:36:04,000 --> 00:36:05,040
has

830
00:36:05,040 --> 00:36:07,440
improper block or improper permit

831
00:36:07,440 --> 00:36:08,400
problem

832
00:36:08,400 --> 00:36:09,599
because

833
00:36:09,599 --> 00:36:12,880
when the packets okay come from the past

834
00:36:12,880 --> 00:36:15,839
that is beyond the feasible parts

835
00:36:15,839 --> 00:36:18,119
just like the example we use in the

836
00:36:18,119 --> 00:36:19,680
interdimensional

837
00:36:19,680 --> 00:36:20,560
okay

838
00:36:20,560 --> 00:36:21,599
actually

839
00:36:21,599 --> 00:36:24,400
it will cause improper block

840
00:36:24,400 --> 00:36:25,440
because

841
00:36:25,440 --> 00:36:28,800
okay maybe uh uh is

842
00:36:28,800 --> 00:36:32,240
does not learn the routing parts

843
00:36:32,240 --> 00:36:33,280
of the

844
00:36:33,280 --> 00:36:34,560
uh

845
00:36:34,560 --> 00:36:36,560
of the actual okay data plane forwarding

846
00:36:36,560 --> 00:36:39,920
pass because of some launching policies

847
00:36:39,920 --> 00:36:41,440
so you see we are

848
00:36:41,440 --> 00:36:43,680
causing block problem

849
00:36:43,680 --> 00:36:44,800
and

850
00:36:44,800 --> 00:36:47,119
this kind of a fadeable path solution we

851
00:36:47,119 --> 00:36:48,800
are also needed to

852
00:36:48,800 --> 00:36:51,599
improve permit problem because

853
00:36:51,599 --> 00:36:53,599
this is very straightforward right

854
00:36:53,599 --> 00:36:54,560
because

855
00:36:54,560 --> 00:36:57,119
there are multiple fatal paths but okay

856
00:36:57,119 --> 00:36:59,359
the real data plane falling past is only

857
00:36:59,359 --> 00:37:01,680
one so of course there will be some

858
00:37:01,680 --> 00:37:04,000
improper permit problem

859
00:37:04,000 --> 00:37:05,200
okay thank you thank you for this

860
00:37:05,200 --> 00:37:06,880
question

861
00:37:06,880 --> 00:37:10,000
so thank you so yeah it does not

862
00:37:10,000 --> 00:37:12,320
solve all the problems so maybe it can

863
00:37:12,320 --> 00:37:14,960
help but without solve

864
00:37:14,960 --> 00:37:17,599
all the problems thank you thank you

865
00:37:17,599 --> 00:37:19,599
okay thank you

866
00:37:19,599 --> 00:37:23,800
next up tim donna

867
00:37:25,119 --> 00:37:26,560
hello

868
00:37:26,560 --> 00:37:28,640
hello i can hear you as you mentioned

869
00:37:28,640 --> 00:37:31,760
the need for network level protocol to

870
00:37:31,760 --> 00:37:34,079
achieve accurate sav

871
00:37:34,079 --> 00:37:36,720
what is the deployment scope of network

872
00:37:36,720 --> 00:37:38,800
level sav token

873
00:37:38,800 --> 00:37:42,160
for example fpuf requests communication

874
00:37:42,160 --> 00:37:46,319
between both routers and es

875
00:37:47,839 --> 00:37:50,240
okay you mean the deployment and the

876
00:37:50,240 --> 00:37:52,480
scope of the

877
00:37:52,480 --> 00:37:55,920
network level safe protocol uh

878
00:37:55,920 --> 00:37:56,720
okay

879
00:37:56,720 --> 00:38:00,880
uh yeah actually in efg rpf

880
00:38:00,880 --> 00:38:01,599
it

881
00:38:01,599 --> 00:38:04,000
it indeed requires some communication

882
00:38:04,000 --> 00:38:07,280
between the border router in the af

883
00:38:07,280 --> 00:38:10,560
network level sav protocol

884
00:38:10,560 --> 00:38:14,000
yes yes yes i i think i get your point

885
00:38:14,000 --> 00:38:17,280
uh but uh okay you yfgrpf

886
00:38:17,280 --> 00:38:19,200
although there are some communication

887
00:38:19,200 --> 00:38:21,599
between the border routers in the as but

888
00:38:21,599 --> 00:38:24,560
if we just abstract the s as a single

889
00:38:24,560 --> 00:38:25,520
load

890
00:38:25,520 --> 00:38:27,920
actually it's still the information

891
00:38:27,920 --> 00:38:31,119
exchange within the single load

892
00:38:31,119 --> 00:38:35,599
so in uh so we still regard that

893
00:38:35,599 --> 00:38:38,800
fgrpf is a load level technology

894
00:38:38,800 --> 00:38:41,200
but we want to just propose a network

895
00:38:41,200 --> 00:38:43,839
level protocol uh the

896
00:38:43,839 --> 00:38:46,640
concrete idea of which will be presented

897
00:38:46,640 --> 00:38:51,200
in the next presentation but generally

898
00:38:51,200 --> 00:38:53,200
in the introductory level the network

899
00:38:53,200 --> 00:38:54,880
level protocol

900
00:38:54,880 --> 00:38:56,960
will be wrong between the authors in the

901
00:38:56,960 --> 00:38:58,240
as

902
00:38:58,240 --> 00:39:01,440
and an interdimensional this protocol

903
00:39:01,440 --> 00:39:04,560
will be one between different ases

904
00:39:04,560 --> 00:39:07,760
so uh these are just a network level of

905
00:39:07,760 --> 00:39:08,960
protocols

906
00:39:08,960 --> 00:39:10,240
and

907
00:39:10,240 --> 00:39:12,800
we just see that the urpf is just a load

908
00:39:12,800 --> 00:39:14,960
level technology right so they only

909
00:39:14,960 --> 00:39:18,160
achieve based on local flip and reap

910
00:39:18,160 --> 00:39:20,640
so we just want to use this network

911
00:39:20,640 --> 00:39:24,079
level protocol to generate okay more

912
00:39:24,079 --> 00:39:25,760
accurate uh

913
00:39:25,760 --> 00:39:27,520
save tables to

914
00:39:27,520 --> 00:39:30,000
overcome in this problem

915
00:39:30,000 --> 00:39:32,320
and of course for this deployment slower

916
00:39:32,320 --> 00:39:33,839
we should consider incremental

917
00:39:33,839 --> 00:39:36,160
deployment yeah i think that's the

918
00:39:36,160 --> 00:39:38,240
that's the deployment scope of this

919
00:39:38,240 --> 00:39:40,720
protocol

920
00:39:41,760 --> 00:39:43,440
thank you

921
00:39:43,440 --> 00:39:45,119
the next person

922
00:39:45,119 --> 00:39:47,839
who will speak is tim donnelly nobody

923
00:39:47,839 --> 00:39:49,520
else

924
00:39:49,520 --> 00:39:51,920
hello

925
00:39:51,920 --> 00:39:53,760
i have a question

926
00:39:53,760 --> 00:39:56,560
for the entertainment case you only

927
00:39:56,560 --> 00:39:58,800
mention the same rules in the customer

928
00:39:58,800 --> 00:40:01,280
post but not mention the provider and

929
00:40:01,280 --> 00:40:03,520
peer post can you explain the case of

930
00:40:03,520 --> 00:40:06,800
provider and peer post

931
00:40:08,880 --> 00:40:10,960
okay for the

932
00:40:10,960 --> 00:40:13,680
entertainment case oh yeah we just

933
00:40:13,680 --> 00:40:15,200
discussed the

934
00:40:15,200 --> 00:40:18,160
customer ports because uh

935
00:40:18,160 --> 00:40:19,119
uh

936
00:40:19,119 --> 00:40:21,599
actually in current practice

937
00:40:21,599 --> 00:40:25,280
for the purim ports and the provider

938
00:40:25,280 --> 00:40:26,319
ports

939
00:40:26,319 --> 00:40:27,200
uh

940
00:40:27,200 --> 00:40:30,160
they just use suggested using

941
00:40:30,160 --> 00:40:31,599
new crpf

942
00:40:31,599 --> 00:40:33,640
and even in rfc

943
00:40:33,640 --> 00:40:35,359
8704

944
00:40:35,359 --> 00:40:37,920
we just made some improvement on the

945
00:40:37,920 --> 00:40:41,680
save mechanisms on the customer ports

946
00:40:41,680 --> 00:40:45,359
for pure imports and provider ports

947
00:40:45,359 --> 00:40:48,560
this rfc actually also suggests using

948
00:40:48,560 --> 00:40:53,599
new crpf because the new crpf will okay

949
00:40:53,599 --> 00:40:56,560
lead to a lot of improper permit problem

950
00:40:56,560 --> 00:40:59,760
so we do not discuss these

951
00:40:59,760 --> 00:41:03,440
okay problems in detail

952
00:41:03,440 --> 00:41:04,839
thank

953
00:41:04,839 --> 00:41:08,720
you okay thank you

954
00:41:09,359 --> 00:41:10,880
jarrett's

955
00:41:10,880 --> 00:41:12,319
uh yeah i was trying to figure out if i

956
00:41:12,319 --> 00:41:15,520
was next so i uh i so i think you've

957
00:41:15,520 --> 00:41:17,920
partially answered my my main question

958
00:41:17,920 --> 00:41:21,599
here which is uh your goal is uh and

959
00:41:21,599 --> 00:41:22,960
this is going to be the next deck is to

960
00:41:22,960 --> 00:41:25,200
describe a protocol that will

961
00:41:25,200 --> 00:41:27,280
i guess publish a list of ip addresses

962
00:41:27,280 --> 00:41:28,880
that should be

963
00:41:28,880 --> 00:41:29,680
uh

964
00:41:29,680 --> 00:41:30,960
you know that should be able to be

965
00:41:30,960 --> 00:41:34,680
permitted on a link

966
00:41:36,800 --> 00:41:38,480
okay and and so something to describe

967
00:41:38,480 --> 00:41:40,480
that network topology or something and

968
00:41:40,480 --> 00:41:42,240
then i have a comment on that which is

969
00:41:42,240 --> 00:41:45,359
it's been historically incredibly hard

970
00:41:45,359 --> 00:41:48,000
to get not only customers but isps to

971
00:41:48,000 --> 00:41:49,359
publish

972
00:41:49,359 --> 00:41:53,119
uh you know who their customers are

973
00:41:53,119 --> 00:41:55,440
and what address space that they use

974
00:41:55,440 --> 00:41:59,920
uh or or want to be used and that has

975
00:41:59,920 --> 00:42:01,680
that has been an incredibly hard

976
00:42:01,680 --> 00:42:03,359
operational task

977
00:42:03,359 --> 00:42:04,319
uh

978
00:42:04,319 --> 00:42:06,240
to to go and get done and to describe

979
00:42:06,240 --> 00:42:09,040
that topology without it exploding into

980
00:42:09,040 --> 00:42:11,040
uh basically a full list of all ip

981
00:42:11,040 --> 00:42:14,160
address space on the internet

982
00:42:15,040 --> 00:42:16,640
yeah yeah

983
00:42:16,640 --> 00:42:18,160
uh

984
00:42:18,160 --> 00:42:21,040
yeah uh uh thanks uh for your question

985
00:42:21,040 --> 00:42:22,400
yeah actually

986
00:42:22,400 --> 00:42:23,520
um

987
00:42:23,520 --> 00:42:26,800
for this network level uh notification

988
00:42:26,800 --> 00:42:27,920
protocol

989
00:42:27,920 --> 00:42:32,000
uh maybe there is some sacrifice on the

990
00:42:32,000 --> 00:42:34,800
privacy issue that is uh

991
00:42:34,800 --> 00:42:38,160
maybe okay some essays will just uh

992
00:42:38,160 --> 00:42:40,720
expose some of its

993
00:42:40,720 --> 00:42:42,560
uh exhausting policy

994
00:42:42,560 --> 00:42:44,560
it's a business relationship

995
00:42:44,560 --> 00:42:47,280
because okay it will just uh

996
00:42:47,280 --> 00:42:50,480
send us explicitly send out the

997
00:42:50,480 --> 00:42:53,599
notification message so this message

998
00:42:53,599 --> 00:42:54,800
will just

999
00:42:54,800 --> 00:42:56,400
leak some

1000
00:42:56,400 --> 00:42:59,280
privacy uh issue

1001
00:42:59,280 --> 00:43:00,319
but

1002
00:43:00,319 --> 00:43:02,640
generally we think that it is a

1003
00:43:02,640 --> 00:43:05,599
trade-off between privacy and security

1004
00:43:05,599 --> 00:43:08,319
so if we want to just uh

1005
00:43:08,319 --> 00:43:10,480
use accurate

1006
00:43:10,480 --> 00:43:12,480
method to

1007
00:43:12,480 --> 00:43:15,280
prevent this kind of uh okay source of

1008
00:43:15,280 --> 00:43:16,640
just spoofing

1009
00:43:16,640 --> 00:43:18,400
uh

1010
00:43:18,400 --> 00:43:20,880
maybe this kind of uh

1011
00:43:20,880 --> 00:43:22,640
privacy issue

1012
00:43:22,640 --> 00:43:24,000
uh

1013
00:43:24,000 --> 00:43:24,800
okay

1014
00:43:24,800 --> 00:43:27,680
we can just mix some kind of uh

1015
00:43:27,680 --> 00:43:29,119
sacrifice

1016
00:43:29,119 --> 00:43:31,599
but of course we can just uh

1017
00:43:31,599 --> 00:43:32,880
design

1018
00:43:32,880 --> 00:43:34,560
more mechanisms

1019
00:43:34,560 --> 00:43:35,440
to

1020
00:43:35,440 --> 00:43:37,920
limit this impact

1021
00:43:37,920 --> 00:43:41,680
maybe we can discuss more details uh uh

1022
00:43:41,680 --> 00:43:43,119
on this

1023
00:43:43,119 --> 00:43:46,560
point in the million days

1024
00:43:47,359 --> 00:43:50,560
okay thank you for this question

1025
00:43:50,640 --> 00:43:51,680
next up

1026
00:43:51,680 --> 00:43:54,400
jerry arco

1027
00:43:54,400 --> 00:43:57,520
we cut the queue so that after jeff

1028
00:43:57,520 --> 00:43:59,920
haase's comment or question we can move

1029
00:43:59,920 --> 00:44:02,640
on to the presentations about the

1030
00:44:02,640 --> 00:44:05,119
protocol proposals

1031
00:44:05,119 --> 00:44:07,520
but back to you jerry

1032
00:44:07,520 --> 00:44:10,720
yes thank you um so um this is an

1033
00:44:10,720 --> 00:44:12,960
interesting discussion and an important

1034
00:44:12,960 --> 00:44:14,800
uh problem

1035
00:44:14,800 --> 00:44:16,079
i i've been trying to think about the

1036
00:44:16,079 --> 00:44:18,240
root cause and like what are the actual

1037
00:44:18,240 --> 00:44:20,880
fundamental issues here and i actually

1038
00:44:20,880 --> 00:44:23,359
identified four things

1039
00:44:23,359 --> 00:44:26,480
um root cause number one is that uh you

1040
00:44:26,480 --> 00:44:28,160
have information that that you could

1041
00:44:28,160 --> 00:44:29,920
base decisions on but you don't actually

1042
00:44:29,920 --> 00:44:32,800
use it or don't use all of it and

1043
00:44:32,800 --> 00:44:35,280
as an example you perhaps you have like

1044
00:44:35,280 --> 00:44:36,960
a

1045
00:44:36,960 --> 00:44:38,960
full network topology model in your

1046
00:44:38,960 --> 00:44:41,760
memory um based on what you learned from

1047
00:44:41,760 --> 00:44:43,920
the roping protocols you could use that

1048
00:44:43,920 --> 00:44:46,960
to make decisions on what addresses are

1049
00:44:46,960 --> 00:44:48,800
okay or not okay

1050
00:44:48,800 --> 00:44:50,079
so

1051
00:44:50,079 --> 00:44:52,400
for this case the answer is just use a

1052
00:44:52,400 --> 00:44:54,160
better algorithm or use an algorithm to

1053
00:44:54,160 --> 00:44:56,720
begin with okay so that was one and

1054
00:44:56,720 --> 00:44:57,920
number two

1055
00:44:57,920 --> 00:45:00,480
is that you don't have information let's

1056
00:45:00,480 --> 00:45:02,480
say your routing protocol doesn't

1057
00:45:02,480 --> 00:45:05,040
provide everything that you would need

1058
00:45:05,040 --> 00:45:06,880
or for some other reason you don't have

1059
00:45:06,880 --> 00:45:08,160
information that

1060
00:45:08,160 --> 00:45:10,000
would enable you to make these decisions

1061
00:45:10,000 --> 00:45:12,319
on social validation and and then the

1062
00:45:12,319 --> 00:45:13,920
answer obviously is provide more

1063
00:45:13,920 --> 00:45:16,240
information either in form of a new

1064
00:45:16,240 --> 00:45:18,640
protocol or some extensions of existing

1065
00:45:18,640 --> 00:45:20,880
ones i think uh igor who's after me on

1066
00:45:20,880 --> 00:45:22,079
the queue

1067
00:45:22,079 --> 00:45:23,680
uh had some proposal on the list about

1068
00:45:23,680 --> 00:45:25,200
that

1069
00:45:25,200 --> 00:45:27,760
uh third option is that or the third

1070
00:45:27,760 --> 00:45:29,440
route course is that you have

1071
00:45:29,440 --> 00:45:31,040
information about the feasible routes

1072
00:45:31,040 --> 00:45:33,040
but you don't have information about the

1073
00:45:33,040 --> 00:45:35,359
actual ones that are being used at this

1074
00:45:35,359 --> 00:45:36,400
time

1075
00:45:36,400 --> 00:45:38,160
and i guess here you have to decide what

1076
00:45:38,160 --> 00:45:40,400
you want like you could be satisfied

1077
00:45:40,400 --> 00:45:41,839
with you know some

1078
00:45:41,839 --> 00:45:43,599
improper permits

1079
00:45:43,599 --> 00:45:45,680
um and and just look at the feasible

1080
00:45:45,680 --> 00:45:46,720
routes

1081
00:45:46,720 --> 00:45:49,200
then you have a simpler solution or you

1082
00:45:49,200 --> 00:45:50,800
create a more complex solution that

1083
00:45:50,800 --> 00:45:54,560
costs more but you can catch more issues

1084
00:45:54,560 --> 00:45:56,720
and uh root cause number four is kind of

1085
00:45:56,720 --> 00:45:59,280
variation of of third of the third one

1086
00:45:59,280 --> 00:46:03,440
about this actual uh paths versus um

1087
00:46:03,440 --> 00:46:04,960
feasible paths

1088
00:46:04,960 --> 00:46:06,000
and

1089
00:46:06,000 --> 00:46:08,240
there's an issue that

1090
00:46:08,240 --> 00:46:09,839
if if there's a change somewhere else in

1091
00:46:09,839 --> 00:46:11,119
the network

1092
00:46:11,119 --> 00:46:12,400
um

1093
00:46:12,400 --> 00:46:14,079
when do you actually learn about that

1094
00:46:14,079 --> 00:46:16,319
and if you think about it uh from the

1095
00:46:16,319 --> 00:46:18,160
point of view the note that has has to

1096
00:46:18,160 --> 00:46:19,599
change for some reason like link is

1097
00:46:19,599 --> 00:46:21,599
added or removed

1098
00:46:21,599 --> 00:46:23,359
um

1099
00:46:23,359 --> 00:46:25,520
they could either wait like inform

1100
00:46:25,520 --> 00:46:27,760
everybody and after everybody's been

1101
00:46:27,760 --> 00:46:30,000
informed start forwarding packets to the

1102
00:46:30,000 --> 00:46:32,160
new direction or they could just make an

1103
00:46:32,160 --> 00:46:33,520
immediate change

1104
00:46:33,520 --> 00:46:34,480
and in

1105
00:46:34,480 --> 00:46:36,240
in parallel inform everybody about the

1106
00:46:36,240 --> 00:46:38,480
change but you could have a situation

1107
00:46:38,480 --> 00:46:39,920
where there's a short period of time

1108
00:46:39,920 --> 00:46:40,720
where

1109
00:46:40,720 --> 00:46:41,599
uh

1110
00:46:41,599 --> 00:46:44,319
you as a receiving entity uh appear to

1111
00:46:44,319 --> 00:46:46,079
get packets from

1112
00:46:46,079 --> 00:46:47,760
a direction that they should not come

1113
00:46:47,760 --> 00:46:49,599
from because you had like the network

1114
00:46:49,599 --> 00:46:52,319
hasn't really

1115
00:46:52,640 --> 00:46:55,599
coordinated itself entirely yet

1116
00:46:55,599 --> 00:46:56,560
and

1117
00:46:56,560 --> 00:46:58,000
i don't think that's actually a solvable

1118
00:46:58,000 --> 00:46:59,839
problem

1119
00:46:59,839 --> 00:47:02,560
you either have to wait or or accept

1120
00:47:02,560 --> 00:47:04,160
some packet drops or

1121
00:47:04,160 --> 00:47:06,319
or some accepting of packets uh

1122
00:47:06,319 --> 00:47:08,400
momentarily

1123
00:47:08,400 --> 00:47:10,240
this also gets me somewhat confused

1124
00:47:10,240 --> 00:47:12,400
about the network level discussion that

1125
00:47:12,400 --> 00:47:13,520
we had

1126
00:47:13,520 --> 00:47:15,440
because it's yeah we can talk about the

1127
00:47:15,440 --> 00:47:17,200
network level solution but we still have

1128
00:47:17,200 --> 00:47:19,440
like individual nodes that have to make

1129
00:47:19,440 --> 00:47:21,599
decisions and are not exactly

1130
00:47:21,599 --> 00:47:23,920
synchronized to everybody else on the

1131
00:47:23,920 --> 00:47:25,760
same instant because of you know speed

1132
00:47:25,760 --> 00:47:27,599
of light and such

1133
00:47:27,599 --> 00:47:30,400
um that's it thank you

1134
00:47:30,400 --> 00:47:33,520
okay uh thank you for the comments

1135
00:47:33,520 --> 00:47:35,599
uh actually yeah we

1136
00:47:35,599 --> 00:47:37,839
already discussed some of your questions

1137
00:47:37,839 --> 00:47:39,520
in the meaning list

1138
00:47:39,520 --> 00:47:42,240
i think yeah i'm highly appreciated for

1139
00:47:42,240 --> 00:47:45,119
your very deep uh

1140
00:47:45,119 --> 00:47:48,800
think of these issues

1141
00:47:49,119 --> 00:47:51,520
generally i think

1142
00:47:51,520 --> 00:47:52,480
for

1143
00:47:52,480 --> 00:47:54,640
uh safe mechanisms

1144
00:47:54,640 --> 00:47:57,040
we can just uh maybe we can come up with

1145
00:47:57,040 --> 00:48:00,079
some a mechanism which is very easy to

1146
00:48:00,079 --> 00:48:03,119
deploy the cost is very low

1147
00:48:03,119 --> 00:48:05,599
but maybe okay there will be some

1148
00:48:05,599 --> 00:48:07,520
inaccurate uh

1149
00:48:07,520 --> 00:48:10,640
okay that inaccurate decision improper

1150
00:48:10,640 --> 00:48:12,880
permit or in public block

1151
00:48:12,880 --> 00:48:13,839
or

1152
00:48:13,839 --> 00:48:16,319
okay the other extreme is that uh okay

1153
00:48:16,319 --> 00:48:17,440
we just

1154
00:48:17,440 --> 00:48:21,359
to achieve accurate uh decision we will

1155
00:48:21,359 --> 00:48:24,319
pay the cost of the new protocol the

1156
00:48:24,319 --> 00:48:26,960
network the network level protocol

1157
00:48:26,960 --> 00:48:28,559
so

1158
00:48:28,559 --> 00:48:32,960
my okay design philosophy is that

1159
00:48:32,960 --> 00:48:35,839
actually for ins for today's internet

1160
00:48:35,839 --> 00:48:36,800
actually

1161
00:48:36,800 --> 00:48:38,960
we

1162
00:48:42,720 --> 00:48:46,319
it seems we have a loss of connection

1163
00:48:46,319 --> 00:48:49,319
unexpected

1164
00:48:53,680 --> 00:48:56,000
and fairly serious it's a primary

1165
00:48:56,000 --> 00:48:59,599
presenter for the next deck that

1166
00:48:59,599 --> 00:49:03,839
seems to have lost his connection

1167
00:49:04,720 --> 00:49:07,920
we lost slides we also lost audio from

1168
00:49:07,920 --> 00:49:10,160
dan lee and we lost connectivity from

1169
00:49:10,160 --> 00:49:11,920
dan lee

1170
00:49:11,920 --> 00:49:14,319
are you here

1171
00:49:14,960 --> 00:49:16,720
yes

1172
00:49:16,720 --> 00:49:18,400
okay it looks like you're back and your

1173
00:49:18,400 --> 00:49:20,720
deck is coming back too

1174
00:49:20,720 --> 00:49:22,319
go ahead

1175
00:49:22,319 --> 00:49:23,040
let's

1176
00:49:23,040 --> 00:49:26,480
just quickly answer uh yaris uh i'll

1177
00:49:26,480 --> 00:49:28,880
just respond to yari's comments

1178
00:49:28,880 --> 00:49:31,520
just my design philosophy is that

1179
00:49:31,520 --> 00:49:33,839
i want to that okay first we should

1180
00:49:33,839 --> 00:49:36,160
satisfy the performance requirement that

1181
00:49:36,160 --> 00:49:39,040
is to okay improve the accuracy and

1182
00:49:39,040 --> 00:49:42,240
under this uh assumption we will just

1183
00:49:42,240 --> 00:49:45,280
try to reduce the overhead just limit

1184
00:49:45,280 --> 00:49:48,640
the overhead as much as possible so i

1185
00:49:48,640 --> 00:49:50,800
personally prefer this direction of

1186
00:49:50,800 --> 00:49:53,520
solution and for

1187
00:49:53,520 --> 00:49:55,760
the the final uh

1188
00:49:55,760 --> 00:49:58,319
comment from you is that uh okay when

1189
00:49:58,319 --> 00:50:01,040
there is during the convergency period

1190
00:50:01,040 --> 00:50:03,839
okay there we maybe we can we have to

1191
00:50:03,839 --> 00:50:07,520
pay the cost of uh okay the packet drop

1192
00:50:07,520 --> 00:50:09,680
just the improper block something like

1193
00:50:09,680 --> 00:50:10,480
that

1194
00:50:10,480 --> 00:50:13,119
uh i think uh yeah it's just as similar

1195
00:50:13,119 --> 00:50:14,160
as the

1196
00:50:14,160 --> 00:50:16,640
resulting protocol so in any kind of a

1197
00:50:16,640 --> 00:50:19,599
routing protocol during the converging

1198
00:50:19,599 --> 00:50:22,880
period there may be loop right

1199
00:50:22,880 --> 00:50:25,520
and if there is nope this is kind of a

1200
00:50:25,520 --> 00:50:28,880
temporary loop will also cause packet

1201
00:50:28,880 --> 00:50:30,400
drop

1202
00:50:30,400 --> 00:50:33,839
okay so so i i think that this this uh

1203
00:50:33,839 --> 00:50:36,000
for source address validation actually

1204
00:50:36,000 --> 00:50:37,920
uh for this question it's very similar

1205
00:50:37,920 --> 00:50:41,280
as resulting uh the resulting protocol

1206
00:50:41,280 --> 00:50:45,280
so we just want to okay design okay uh

1207
00:50:45,280 --> 00:50:47,839
several ways just to try to mitigate

1208
00:50:47,839 --> 00:50:49,200
this problem

1209
00:50:49,200 --> 00:50:53,280
instead of okay still paying the cost of

1210
00:50:53,280 --> 00:50:55,440
general okay improper block or improper

1211
00:50:55,440 --> 00:50:56,960
permit

1212
00:50:56,960 --> 00:50:59,520
so i think this way this is a very

1213
00:50:59,520 --> 00:51:02,720
interesting debate and we can also

1214
00:51:02,720 --> 00:51:05,280
explore more in our million list

1215
00:51:05,280 --> 00:51:06,720
thank you

1216
00:51:06,720 --> 00:51:08,480
okay we've got two more

1217
00:51:08,480 --> 00:51:10,319
speakers with questions i want to get

1218
00:51:10,319 --> 00:51:12,880
those questions dan please make your

1219
00:51:12,880 --> 00:51:14,880
answers a little bit shorter we're

1220
00:51:14,880 --> 00:51:16,720
running late on time

1221
00:51:16,720 --> 00:51:18,240
but i want to get through these next two

1222
00:51:18,240 --> 00:51:20,960
questions thank you

1223
00:51:20,960 --> 00:51:24,000
okay thank you

1224
00:51:27,680 --> 00:51:29,920
can you hear me

1225
00:51:29,920 --> 00:51:31,440
can you say something

1226
00:51:31,440 --> 00:51:34,480
yes i can hear myself all right uh

1227
00:51:34,480 --> 00:51:35,599
can you

1228
00:51:35,599 --> 00:51:37,200
okay good thank you

1229
00:51:37,200 --> 00:51:39,599
uh so i have a comment and a good

1230
00:51:39,599 --> 00:51:42,640
question so the quick comment is that

1231
00:51:42,640 --> 00:51:44,960
in my view the reason we're having the

1232
00:51:44,960 --> 00:51:46,480
discussion the reason we're having the

1233
00:51:46,480 --> 00:51:47,359
problem

1234
00:51:47,359 --> 00:51:49,920
is that all the current methods are

1235
00:51:49,920 --> 00:51:51,440
using

1236
00:51:51,440 --> 00:51:53,280
what is effectively reachability

1237
00:51:53,280 --> 00:51:55,280
information bgp

1238
00:51:55,280 --> 00:51:57,920
as a substitute for

1239
00:51:57,920 --> 00:52:01,440
allowed forwarding paths uh for sort of

1240
00:52:01,440 --> 00:52:04,880
address validation and it's just not the

1241
00:52:04,880 --> 00:52:07,119
most accurate signal and that's why

1242
00:52:07,119 --> 00:52:09,119
we're having problems

1243
00:52:09,119 --> 00:52:13,119
um the question i have is

1244
00:52:13,119 --> 00:52:16,640
what do you think is acceptable cost

1245
00:52:16,640 --> 00:52:18,480
of any sort of

1246
00:52:18,480 --> 00:52:20,720
source address validation solution

1247
00:52:20,720 --> 00:52:22,480
uh relative to

1248
00:52:22,480 --> 00:52:24,640
the current cost of forwarding packets

1249
00:52:24,640 --> 00:52:27,280
so essentially like how much cost do you

1250
00:52:27,280 --> 00:52:30,839
think the industry will be able to bear

1251
00:52:30,839 --> 00:52:32,800
um to

1252
00:52:32,800 --> 00:52:37,440
enable this extra level of security

1253
00:52:43,599 --> 00:52:46,839
hi eucher

1254
00:52:58,559 --> 00:53:02,240
we can hear you dan go ahead

1255
00:53:06,400 --> 00:53:08,559
so eager so uh

1256
00:53:08,559 --> 00:53:10,079
i'm

1257
00:53:10,079 --> 00:53:13,040
actually i did not quite uh exaggerate

1258
00:53:13,040 --> 00:53:15,760
your question uh yeah i i i get your

1259
00:53:15,760 --> 00:53:18,000
comment but your what's your exact

1260
00:53:18,000 --> 00:53:20,480
question about this

1261
00:53:20,480 --> 00:53:23,119
the question i have is what do you think

1262
00:53:23,119 --> 00:53:26,400
i mean uh save will add cost to the

1263
00:53:26,400 --> 00:53:28,079
forwarding path

1264
00:53:28,079 --> 00:53:30,079
uh what do you think is a

1265
00:53:30,079 --> 00:53:32,480
reasonable cost uh

1266
00:53:32,480 --> 00:53:33,520
that

1267
00:53:33,520 --> 00:53:35,920
the internet the the industry will be

1268
00:53:35,920 --> 00:53:38,640
able to bear like relative to the cost

1269
00:53:38,640 --> 00:53:41,040
of forwarding packets it is like twice

1270
00:53:41,040 --> 00:53:42,720
as much hardware

1271
00:53:42,720 --> 00:53:44,800
three times as much hardware

1272
00:53:44,800 --> 00:53:49,680
uh like in terms of acid per packet uh

1273
00:53:49,760 --> 00:53:51,280
okay okay

1274
00:53:51,280 --> 00:53:55,200
okay now i get your point yeah i think

1275
00:53:55,200 --> 00:53:57,760
maybe these issues will be

1276
00:53:57,760 --> 00:53:58,960
described

1277
00:53:58,960 --> 00:54:00,000
uh

1278
00:54:00,000 --> 00:54:02,800
with more details in our next uh

1279
00:54:02,800 --> 00:54:05,119
presentation but generally icelander for

1280
00:54:05,119 --> 00:54:06,800
the cost

1281
00:54:06,800 --> 00:54:08,559
we can we should

1282
00:54:08,559 --> 00:54:11,040
still just divide

1283
00:54:11,040 --> 00:54:13,040
this

1284
00:54:13,040 --> 00:54:15,280
protocol into inter domain and the

1285
00:54:15,280 --> 00:54:16,480
introduction

1286
00:54:16,480 --> 00:54:18,720
so for interdependent stuff maybe we can

1287
00:54:18,720 --> 00:54:22,319
just extend the capabilities of bgp

1288
00:54:22,319 --> 00:54:24,880
to help carry okay more information

1289
00:54:24,880 --> 00:54:28,800
required for this uh uh okay the data

1290
00:54:28,800 --> 00:54:32,000
plane pass notification or discovering

1291
00:54:32,000 --> 00:54:35,440
and uh for introducing a part because

1292
00:54:35,440 --> 00:54:37,200
this scope is the

1293
00:54:37,200 --> 00:54:38,559
smaller

1294
00:54:38,559 --> 00:54:40,880
i think maybe we can just

1295
00:54:40,880 --> 00:54:44,400
design a new protocol to ask routers to

1296
00:54:44,400 --> 00:54:46,319
exchange more information with each

1297
00:54:46,319 --> 00:54:48,240
other

1298
00:54:48,240 --> 00:54:50,400
generally i think that

1299
00:54:50,400 --> 00:54:51,119
the

1300
00:54:51,119 --> 00:54:53,760
cost for discovering the real this

1301
00:54:53,760 --> 00:54:56,079
happening forwarding pass

1302
00:54:56,079 --> 00:54:57,839
should

1303
00:54:57,839 --> 00:55:00,720
not be higher than launching protocols

1304
00:55:00,720 --> 00:55:02,960
we just we just want to leverage

1305
00:55:02,960 --> 00:55:04,400
existing consulting protocols such as

1306
00:55:04,400 --> 00:55:08,160
bbc or design new introduction uh

1307
00:55:08,160 --> 00:55:11,040
instrument and network protocols which

1308
00:55:11,040 --> 00:55:11,920
just

1309
00:55:11,920 --> 00:55:14,160
shares the same complexity

1310
00:55:14,160 --> 00:55:15,839
of routing of the intradominating

1311
00:55:15,839 --> 00:55:18,559
protocol but not greater than that

1312
00:55:18,559 --> 00:55:21,599
that's my uh generally thinking about

1313
00:55:21,599 --> 00:55:22,400
the

1314
00:55:22,400 --> 00:55:24,559
cost that we should pay

1315
00:55:24,559 --> 00:55:28,960
for this kind of uh social just checking

1316
00:55:30,720 --> 00:55:33,280
because actually

1317
00:55:33,280 --> 00:55:35,280
actually this is just a different part

1318
00:55:35,280 --> 00:55:37,760
noting protocol is for distribution and

1319
00:55:37,760 --> 00:55:40,319
this uh safe network protocol is for

1320
00:55:40,319 --> 00:55:42,880
this the source address so that's just

1321
00:55:42,880 --> 00:55:44,880
two counter parts so i think their

1322
00:55:44,880 --> 00:55:48,240
complexity should be similar

1323
00:55:53,200 --> 00:55:55,680
it is your turn to hello

1324
00:55:55,680 --> 00:55:56,880
yeah

1325
00:55:56,880 --> 00:55:59,680
so thank you ciao i i think it's very

1326
00:55:59,680 --> 00:56:01,040
important to

1327
00:56:01,040 --> 00:56:03,280
operators to avoid

1328
00:56:03,280 --> 00:56:06,640
the improper blocker and the permit so i

1329
00:56:06,640 --> 00:56:10,400
think this is this direction is uh

1330
00:56:10,400 --> 00:56:11,520
valid

1331
00:56:11,520 --> 00:56:14,480
i have a very quick comment uh i don't

1332
00:56:14,480 --> 00:56:15,200
think

1333
00:56:15,200 --> 00:56:17,520
i need some response

1334
00:56:17,520 --> 00:56:20,319
so you know operators network is very

1335
00:56:20,319 --> 00:56:21,839
large and

1336
00:56:21,839 --> 00:56:24,480
the number of the nodes uh

1337
00:56:24,480 --> 00:56:27,280
such as in the backbone network maybe

1338
00:56:27,280 --> 00:56:30,880
reach a substance so i guess

1339
00:56:30,880 --> 00:56:33,119
it's reasonable that

1340
00:56:33,119 --> 00:56:34,799
put the

1341
00:56:34,799 --> 00:56:38,240
being suitable for the large-scale

1342
00:56:38,240 --> 00:56:41,520
network deployments

1343
00:56:41,839 --> 00:56:43,280
should be uh

1344
00:56:43,280 --> 00:56:44,640
important

1345
00:56:44,640 --> 00:56:46,160
requirements

1346
00:56:46,160 --> 00:56:47,280
when

1347
00:56:47,280 --> 00:56:49,440
we design the

1348
00:56:49,440 --> 00:56:52,079
network live protocol

1349
00:56:52,079 --> 00:56:54,640
so thanks

1350
00:56:55,280 --> 00:56:58,680
okay thank you

1351
00:57:00,240 --> 00:57:01,200
all right

1352
00:57:01,200 --> 00:57:04,558
the next presentation

1353
00:57:06,000 --> 00:57:07,200
is about

1354
00:57:07,200 --> 00:57:10,079
i think we start with

1355
00:57:10,079 --> 00:57:13,079
vsaf

1356
00:57:15,920 --> 00:57:17,599
yeah

1357
00:57:17,599 --> 00:57:20,559
yeah okay

1358
00:57:23,359 --> 00:57:26,359
okay

1359
00:57:40,799 --> 00:57:43,599
go ahead dan

1360
00:57:44,960 --> 00:57:47,680
it seems i cannot grant

1361
00:57:47,680 --> 00:57:48,480
the

1362
00:57:48,480 --> 00:57:50,960
permission

1363
00:57:51,040 --> 00:57:51,920
oh

1364
00:57:51,920 --> 00:57:54,559
can you hear me

1365
00:57:54,559 --> 00:57:57,040
yeah yes luncheon but uh we're trying to

1366
00:57:57,040 --> 00:58:00,000
get dan to switch

1367
00:58:00,640 --> 00:58:03,520
who so i can't tell who's who's got

1368
00:58:03,520 --> 00:58:07,480
slide control at the moment

1369
00:58:08,640 --> 00:58:11,118
there we go

1370
00:58:18,079 --> 00:58:22,839
oh there we are on the right slides

1371
00:58:24,000 --> 00:58:25,200
okay

1372
00:58:25,200 --> 00:58:27,200
uh hello everyone the presentation lan

1373
00:58:27,200 --> 00:58:29,680
check sorry go ahead

1374
00:58:29,680 --> 00:58:31,680
oh thank you

1375
00:58:31,680 --> 00:58:33,040
uh hello

1376
00:58:33,040 --> 00:58:33,920
uh

1377
00:58:33,920 --> 00:58:35,760
i am lance hunting from qinghai

1378
00:58:35,760 --> 00:58:36,960
university

1379
00:58:36,960 --> 00:58:41,040
i'm going to introduce the dc framework

1380
00:58:41,040 --> 00:58:44,000
validating source addresses via silk

1381
00:58:44,000 --> 00:58:47,440
tables generated by a distributed

1382
00:58:47,440 --> 00:58:51,240
control plane protocol

1383
00:58:55,200 --> 00:58:57,920
server divides save into three different

1384
00:58:57,920 --> 00:58:59,599
checking levels

1385
00:58:59,599 --> 00:59:02,960
and savvy is proposed to achieve

1386
00:59:02,960 --> 00:59:05,520
safe at access networks

1387
00:59:05,520 --> 00:59:08,640
it is only fully effective when globally

1388
00:59:08,640 --> 00:59:10,000
deployed

1389
00:59:10,000 --> 00:59:11,280
however

1390
00:59:11,280 --> 00:59:14,799
it's impractical to expect all access

1391
00:59:14,799 --> 00:59:16,720
networks to deploy service

1392
00:59:16,720 --> 00:59:19,040
simultaneously

1393
00:59:19,040 --> 00:59:22,160
if an access network doesn't deploy

1394
00:59:22,160 --> 00:59:23,200
survey

1395
00:59:23,200 --> 00:59:26,000
spoofing traffic from it should have a

1396
00:59:26,000 --> 00:59:29,040
chance to be blocked before arriving at

1397
00:59:29,040 --> 00:59:31,200
the destination host

1398
00:59:31,200 --> 00:59:33,839
and manners requires

1399
00:59:33,839 --> 00:59:37,280
operators to deploy sieve as close to

1400
00:59:37,280 --> 00:59:40,640
the source as possible

1401
00:59:40,799 --> 00:59:44,720
as we described in the gap analysis

1402
00:59:44,720 --> 00:59:47,440
existing intra and interdomensive

1403
00:59:47,440 --> 00:59:50,880
technologies may lead to improper block

1404
00:59:50,880 --> 00:59:54,880
or improper permit problems

1405
00:59:54,880 --> 00:59:58,480
so to guarantee accuracy a network level

1406
00:59:58,480 --> 01:00:01,359
protocol is necessary

1407
01:00:01,359 --> 01:00:05,200
dcf framework depends on a distributed

1408
01:00:05,200 --> 01:00:08,000
control plane protocol to generate

1409
01:00:08,000 --> 01:00:09,440
accurate

1410
01:00:09,440 --> 01:00:13,520
save table instead of using urpf

1411
01:00:13,520 --> 01:00:17,200
introducing a network level protocol can

1412
01:00:17,200 --> 01:00:18,480
bring

1413
01:00:18,480 --> 01:00:20,559
additional overhead

1414
01:00:20,559 --> 01:00:23,920
so it's important to improve the

1415
01:00:23,920 --> 01:00:27,599
scalability of the protocol by limiting

1416
01:00:27,599 --> 01:00:30,000
the communicate commit complete

1417
01:00:30,000 --> 01:00:32,800
computation and communication overhead

1418
01:00:32,800 --> 01:00:36,039
[Music]

1419
01:00:37,920 --> 01:00:40,400
with an accurate receive table the

1420
01:00:40,400 --> 01:00:44,880
router can verify the authenticity of

1421
01:00:44,880 --> 01:00:47,760
the source address by checking

1422
01:00:47,760 --> 01:00:51,359
the incoming port of the package

1423
01:00:51,359 --> 01:00:53,680
and packets with spoofed source

1424
01:00:53,680 --> 01:00:57,280
addresses will be blocked and packaged

1425
01:00:57,280 --> 01:01:00,160
with legitimate source addresses will be

1426
01:01:00,160 --> 01:01:02,840
forwarded based on ship table

1427
01:01:02,840 --> 01:01:06,139
[Music]

1428
01:01:09,520 --> 01:01:13,920
so the basic idea of dc protocol is to

1429
01:01:13,920 --> 01:01:16,799
discover the real detail plan forwarding

1430
01:01:16,799 --> 01:01:19,520
path while help by hope prefix

1431
01:01:19,520 --> 01:01:23,760
notification and to generate save tables

1432
01:01:23,760 --> 01:01:26,960
in routers along the path

1433
01:01:26,960 --> 01:01:31,680
this is protocol is separated into an

1434
01:01:31,680 --> 01:01:34,319
intradomain part and an inter domain

1435
01:01:34,319 --> 01:01:37,599
part both sharing the same high level

1436
01:01:37,599 --> 01:01:39,040
idea

1437
01:01:39,040 --> 01:01:42,400
here we list some terminologies

1438
01:01:42,400 --> 01:01:43,760
the node

1439
01:01:43,760 --> 01:01:48,240
is a router in intra domain dcf or an es

1440
01:01:48,240 --> 01:01:50,240
inter domain dcf

1441
01:01:50,240 --> 01:01:53,280
the prefix notification means

1442
01:01:53,280 --> 01:01:57,039
the process by which a node notifies the

1443
01:01:57,039 --> 01:01:59,440
incoming direction of its source

1444
01:01:59,440 --> 01:02:02,079
prefixes to all the other

1445
01:02:02,079 --> 01:02:05,039
nodes in the network

1446
01:02:05,039 --> 01:02:08,880
and during prefix notification each node

1447
01:02:08,880 --> 01:02:12,880
conducts one of three operations

1448
01:02:12,880 --> 01:02:15,200
message origination means

1449
01:02:15,200 --> 01:02:18,160
a node generates original notification

1450
01:02:18,160 --> 01:02:19,599
messages

1451
01:02:19,599 --> 01:02:23,119
message really means a note generates

1452
01:02:23,119 --> 01:02:25,760
release notification messages after

1453
01:02:25,760 --> 01:02:29,280
receiving a notification message

1454
01:02:29,280 --> 01:02:31,839
message termination means

1455
01:02:31,839 --> 01:02:34,400
a node terminates the received

1456
01:02:34,400 --> 01:02:37,920
notification message

1457
01:02:42,079 --> 01:02:45,039
the d save notification message contains

1458
01:02:45,039 --> 01:02:47,839
two main fields

1459
01:02:47,839 --> 01:02:52,000
prefix field and propagation scope field

1460
01:02:52,000 --> 01:02:54,720
for source prefix field

1461
01:02:54,720 --> 01:02:58,000
it contains the source prefixes of the

1462
01:02:58,000 --> 01:02:58,880
node

1463
01:02:58,880 --> 01:03:01,039
when receiving a message

1464
01:03:01,039 --> 01:03:03,760
a node generates save rules for the

1465
01:03:03,760 --> 01:03:05,440
source prefixes

1466
01:03:05,440 --> 01:03:08,400
and this field will remain unchanged

1467
01:03:08,400 --> 01:03:12,160
during the prefix notification process

1468
01:03:12,160 --> 01:03:14,720
for propagation scope field

1469
01:03:14,720 --> 01:03:17,039
this field contains a list of

1470
01:03:17,039 --> 01:03:20,480
destination prefixes which take the

1471
01:03:20,480 --> 01:03:24,480
neighbor node as the next hub from fifth

1472
01:03:24,480 --> 01:03:27,760
it is used to discover the real data

1473
01:03:27,760 --> 01:03:29,599
plane forwarding path

1474
01:03:29,599 --> 01:03:32,880
and change hope i hope during the prefix

1475
01:03:32,880 --> 01:03:36,319
notification process

1476
01:03:40,960 --> 01:03:44,720
here i will use an example to illustrate

1477
01:03:44,720 --> 01:03:48,240
the workflow of this eve

1478
01:03:48,240 --> 01:03:51,839
there are seven nodes in the network

1479
01:03:51,839 --> 01:03:52,720
and

1480
01:03:52,720 --> 01:03:54,319
i also the

1481
01:03:54,319 --> 01:03:58,880
process of prefix notification for p1

1482
01:03:58,880 --> 01:04:00,960
the processes of

1483
01:04:00,960 --> 01:04:04,240
prefix notification for other prefixes

1484
01:04:04,240 --> 01:04:06,959
are similar

1485
01:04:07,280 --> 01:04:09,920
let's say node 1 conducts message

1486
01:04:09,920 --> 01:04:13,359
origination since p1 is the source

1487
01:04:13,359 --> 01:04:16,240
prefix of node one

1488
01:04:16,240 --> 01:04:18,400
from node one phase

1489
01:04:18,400 --> 01:04:24,000
p2 p4 p6 and p7 take node 2

1490
01:04:24,000 --> 01:04:26,079
as the next hope

1491
01:04:26,079 --> 01:04:29,119
so node 1 generates an original

1492
01:04:29,119 --> 01:04:33,520
notification message to node 2

1493
01:04:33,520 --> 01:04:35,039
in the message

1494
01:04:35,039 --> 01:04:37,520
from node 1 to node 2

1495
01:04:37,520 --> 01:04:41,599
it carries p1 in the source prefix field

1496
01:04:41,599 --> 01:04:46,640
and carries p2 p4 p6 and p7 in the

1497
01:04:46,640 --> 01:04:50,240
propagation scope field

1498
01:04:52,319 --> 01:04:53,520
besides

1499
01:04:53,520 --> 01:04:57,440
from node 1 save p3 and p5

1500
01:04:57,440 --> 01:05:00,480
pick node 3 as the next hope

1501
01:05:00,480 --> 01:05:03,440
so node 1 generates an original

1502
01:05:03,440 --> 01:05:06,559
notification message to node 3

1503
01:05:06,559 --> 01:05:10,400
carrying p1 in the source prefix field

1504
01:05:10,400 --> 01:05:13,599
and carrying p3 and p5 in the

1505
01:05:13,599 --> 01:05:17,119
propagation scope field

1506
01:05:19,920 --> 01:05:21,920
we can also see

1507
01:05:21,920 --> 01:05:23,200
node 7

1508
01:05:23,200 --> 01:05:26,400
is another neighbor node of node 1

1509
01:05:26,400 --> 01:05:27,599
however

1510
01:05:27,599 --> 01:05:30,720
from node 1's fifth node prefix takes

1511
01:05:30,720 --> 01:05:34,400
node 7 as the next hope so node 1

1512
01:05:34,400 --> 01:05:37,039
doesn't send any notification message to

1513
01:05:37,039 --> 01:05:39,760
node7

1514
01:05:44,160 --> 01:05:46,799
then when node 2 receives the

1515
01:05:46,799 --> 01:05:50,240
notification message from node 1 at port

1516
01:05:50,240 --> 01:05:52,240
2.1

1517
01:05:52,240 --> 01:05:55,839
it first generates the 0 for source

1518
01:05:55,839 --> 01:05:57,920
prefix p1

1519
01:05:57,920 --> 01:06:01,599
that is it specifies the incoming port

1520
01:06:01,599 --> 01:06:05,720
2.1 and

1521
01:06:13,039 --> 01:06:16,039
um

1522
01:06:25,760 --> 01:06:29,039
then node 2 checks the propagation scope

1523
01:06:29,039 --> 01:06:32,640
field of the received message the

1524
01:06:32,640 --> 01:06:35,280
propagation scope field of the received

1525
01:06:35,280 --> 01:06:38,559
message contains four prefixes

1526
01:06:38,559 --> 01:06:43,280
they are p2 p4 p6 and p7

1527
01:06:43,280 --> 01:06:47,440
p2 is the source prefix of node 2

1528
01:06:47,440 --> 01:06:49,440
so node 2

1529
01:06:49,440 --> 01:06:53,119
does not to process this prefix

1530
01:06:53,119 --> 01:06:57,440
while from node 2 fib p4 and p6 take

1531
01:06:57,440 --> 01:07:01,119
node 4 as the next hope so node 2

1532
01:07:01,119 --> 01:07:04,000
conducts message release and generates a

1533
01:07:04,000 --> 01:07:07,760
relaying notification message to node 4.

1534
01:07:07,760 --> 01:07:11,280
the message from node 2 to node 4

1535
01:07:11,280 --> 01:07:14,720
carries p1 in the source prefix field

1536
01:07:14,720 --> 01:07:18,559
and only queries p4 and p6 in the

1537
01:07:18,559 --> 01:07:21,760
propagation scope

1538
01:07:24,720 --> 01:07:27,760
it's worth noting that p6 may take

1539
01:07:27,760 --> 01:07:29,119
different

1540
01:07:29,119 --> 01:07:32,880
next hopes because of multi-path routing

1541
01:07:32,880 --> 01:07:36,960
so from nodes to slip p6 and p7 take

1542
01:07:36,960 --> 01:07:40,640
node 7 as the next hope

1543
01:07:40,640 --> 01:07:41,440
so

1544
01:07:41,440 --> 01:07:44,240
node 2 conducts message link and

1545
01:07:44,240 --> 01:07:47,039
generates a really notification message

1546
01:07:47,039 --> 01:07:48,799
to node 7

1547
01:07:48,799 --> 01:07:51,760
carrying py in the source prefix field

1548
01:07:51,760 --> 01:07:55,039
and carrying p6 and p7 in the

1549
01:07:55,039 --> 01:07:57,839
propagation scope

1550
01:08:01,039 --> 01:08:04,160
next when node 4

1551
01:08:04,160 --> 01:08:07,640
receives the message from node 2 at port

1552
01:08:07,640 --> 01:08:09,359
4.1

1553
01:08:09,359 --> 01:08:12,880
node 4 first generates the c rule for

1554
01:08:12,880 --> 01:08:16,000
source prefix p1 it then

1555
01:08:16,000 --> 01:08:18,479
checks the propagation scope

1556
01:08:18,479 --> 01:08:20,319
p4 and p6

1557
01:08:20,319 --> 01:08:24,719
from node 4 fib p6 takes node 6 as the

1558
01:08:24,719 --> 01:08:27,600
next hope so node 4 contacts message

1559
01:08:27,600 --> 01:08:29,520
relink and generates a reading

1560
01:08:29,520 --> 01:08:32,479
notification message to node 6

1561
01:08:32,479 --> 01:08:35,520
carrying p1 in the source prefix field

1562
01:08:35,520 --> 01:08:38,719
and carrying p6 in the propagation scope

1563
01:08:38,719 --> 01:08:41,120
field

1564
01:08:42,880 --> 01:08:45,600
similarly when node 7 receives the

1565
01:08:45,600 --> 01:08:50,319
method from nu2 at port 7.1 it generates

1566
01:08:50,319 --> 01:08:53,600
the civil rule for source prefix p1 and

1567
01:08:53,600 --> 01:08:58,560
then it checks that p6 takes node 6 as

1568
01:08:58,560 --> 01:09:02,080
the next hope so node 7 conducts

1569
01:09:02,080 --> 01:09:04,880
messenger link and generates a relaying

1570
01:09:04,880 --> 01:09:08,319
notification message to node 6

1571
01:09:08,319 --> 01:09:11,120
carrying p1 in the source prefix field

1572
01:09:11,120 --> 01:09:14,000
and carrying p6 in the propagation scope

1573
01:09:14,000 --> 01:09:16,399
field

1574
01:09:18,238 --> 01:09:22,238
in this way note 6 will receive 2

1575
01:09:22,238 --> 01:09:25,759
2 notification messages from node 4 and

1576
01:09:25,759 --> 01:09:27,279
node 7

1577
01:09:27,279 --> 01:09:30,640
at different ports

1578
01:09:30,880 --> 01:09:33,839
therefore node 6 can discover the

1579
01:09:33,839 --> 01:09:36,960
multi-parting routine and it

1580
01:09:36,960 --> 01:09:40,640
specifies two valid incoming ports for

1581
01:09:40,640 --> 01:09:43,279
source prefix p1

1582
01:09:43,279 --> 01:09:47,120
then node 6 conducts message termination

1583
01:09:47,120 --> 01:09:50,960
because the protect propagation scope

1584
01:09:50,960 --> 01:09:55,120
only contains prefix 6 and prefix prefix

1585
01:09:55,120 --> 01:10:00,920
6 is the source prefix of node 6.

1586
01:10:03,440 --> 01:10:06,239
when node 3 receives message from node 1

1587
01:10:06,239 --> 01:10:10,880
at point at at port 3.1 it also

1588
01:10:10,880 --> 01:10:13,679
generates the c rule for source prefix

1589
01:10:13,679 --> 01:10:18,560
p1 and then from node 3 fib p5 takes

1590
01:10:18,560 --> 01:10:22,239
note 5 as the next hope so node 3

1591
01:10:22,239 --> 01:10:25,360
conducts message link and generates a

1592
01:10:25,360 --> 01:10:28,480
release notification message to node 5

1593
01:10:28,480 --> 01:10:31,040
the message from node 3 to node 5

1594
01:10:31,040 --> 01:10:34,000
contains p1 in the source prefix and

1595
01:10:34,000 --> 01:10:36,560
carries p5 in the propagation scope

1596
01:10:36,560 --> 01:10:38,960
field

1597
01:10:40,159 --> 01:10:42,560
when node 5 receives the message from

1598
01:10:42,560 --> 01:10:47,360
node 3 it generates the c rule and then

1599
01:10:47,360 --> 01:10:50,159
conducts message determination because

1600
01:10:50,159 --> 01:10:53,840
the propagation scope only contains p5

1601
01:10:53,840 --> 01:10:58,560
and p5 is the source prefix of node 5.

1602
01:10:58,560 --> 01:11:00,239
at this point

1603
01:11:00,239 --> 01:11:03,520
the whole process of prefix notification

1604
01:11:03,520 --> 01:11:06,080
for p1 is over

1605
01:11:06,080 --> 01:11:09,280
during the prefix notification process

1606
01:11:09,280 --> 01:11:12,640
each node generates accuracy rules for

1607
01:11:12,640 --> 01:11:16,480
p1 and receives only one message except

1608
01:11:16,480 --> 01:11:20,000
for multi-pass routing

1609
01:11:23,360 --> 01:11:25,199
we have considered

1610
01:11:25,199 --> 01:11:28,480
two dc update models

1611
01:11:28,480 --> 01:11:32,000
for pure periodic update each node

1612
01:11:32,000 --> 01:11:35,520
generates original notification messages

1613
01:11:35,520 --> 01:11:37,120
periodically

1614
01:11:37,120 --> 01:11:39,199
for triggered update

1615
01:11:39,199 --> 01:11:41,199
when routing city changes

1616
01:11:41,199 --> 01:11:44,480
the node generates original notification

1617
01:11:44,480 --> 01:11:48,080
messages to add updated silverware or

1618
01:11:48,080 --> 01:11:51,280
delete outdated silverware for the

1619
01:11:51,280 --> 01:11:53,440
affected nodes

1620
01:11:53,440 --> 01:11:56,159
following the principles of existing

1621
01:11:56,159 --> 01:11:57,920
routing protocols

1622
01:11:57,920 --> 01:12:01,679
we suggest intradomain dc supports both

1623
01:12:01,679 --> 01:12:04,960
periodic update and triggered update

1624
01:12:04,960 --> 01:12:07,600
while inter domain decel only supports

1625
01:12:07,600 --> 01:12:10,719
triggered updates

1626
01:12:15,199 --> 01:12:18,320
as described in the gap analysis for

1627
01:12:18,320 --> 01:12:20,159
intradomain save

1628
01:12:20,159 --> 01:12:24,480
applying strict urps only as subnet port

1629
01:12:24,480 --> 01:12:28,718
may have improper permit problem

1630
01:12:30,480 --> 01:12:32,239
while applying

1631
01:12:32,239 --> 01:12:35,600
strict urps at all ports may have

1632
01:12:35,600 --> 01:12:39,120
improper block problem

1633
01:12:40,320 --> 01:12:45,920
but if router 1 2 4 and 7 run deceived

1634
01:12:45,920 --> 01:12:47,760
in the deployed area

1635
01:12:47,760 --> 01:12:50,159
subnet 1 two

1636
01:12:50,159 --> 01:12:53,280
four seven cannot spook each other

1637
01:12:53,280 --> 01:12:57,199
and package from subnet three

1638
01:12:57,199 --> 01:13:00,560
five six with smooth source addresses of

1639
01:13:00,560 --> 01:13:03,360
p1 p2 p4

1640
01:13:03,360 --> 01:13:07,280
p7 will be accurately blocked at port a

1641
01:13:07,280 --> 01:13:08,400
b c

1642
01:13:08,400 --> 01:13:09,120
d

1643
01:13:09,120 --> 01:13:12,239
while 60 rpf may have improper permit

1644
01:13:12,239 --> 01:13:14,080
problem

1645
01:13:14,080 --> 01:13:17,679
moreover legitimate packets from subnet

1646
01:13:17,679 --> 01:13:18,480
3

1647
01:13:18,480 --> 01:13:22,320
5 6 will be accurately permitted at port

1648
01:13:22,320 --> 01:13:25,040
a port b for c and d

1649
01:13:25,040 --> 01:13:27,199
while strictly rpf may have improper

1650
01:13:27,199 --> 01:13:29,360
block problem

1651
01:13:29,360 --> 01:13:32,320
overall compared with urpf in the

1652
01:13:32,320 --> 01:13:34,960
introduction

1653
01:13:34,960 --> 01:13:38,400
if we deploy dcf in the deployed area

1654
01:13:38,400 --> 01:13:40,880
thumbnails within the deployed area

1655
01:13:40,880 --> 01:13:42,480
cannot spoof

1656
01:13:42,480 --> 01:13:44,400
and

1657
01:13:44,400 --> 01:13:47,600
subnets in the undeployed area cannot

1658
01:13:47,600 --> 01:13:50,000
spoof the source addresses of the

1659
01:13:50,000 --> 01:13:53,120
deployed area

1660
01:13:56,800 --> 01:13:59,120
for inter-domain save

1661
01:13:59,120 --> 01:14:03,600
street urpf physical urpf and efp urpf

1662
01:14:03,600 --> 01:14:05,920
with algorithm a

1663
01:14:05,920 --> 01:14:10,080
may have improper block problem

1664
01:14:10,719 --> 01:14:14,560
while loose urpf and efprpf with

1665
01:14:14,560 --> 01:14:17,440
algorithm b may have improper permit

1666
01:14:17,440 --> 01:14:20,000
problem

1667
01:14:22,239 --> 01:14:28,560
deploying dcl and as1 s2 s3 s4 can

1668
01:14:28,560 --> 01:14:32,640
generate several walls for p1 p2

1669
01:14:32,640 --> 01:14:35,199
p3 and p4

1670
01:14:35,199 --> 01:14:40,080
in this way as1 s2 as3 and as4 cannot

1671
01:14:40,080 --> 01:14:44,320
spoof each other while efpur pf may have

1672
01:14:44,320 --> 01:14:47,520
improper permit problem

1673
01:14:47,520 --> 01:14:50,960
besides packets from es5 with both the

1674
01:14:50,960 --> 01:14:54,239
source addresses of p1 p2

1675
01:14:54,239 --> 01:14:58,080
p3 p4 will be blocked at port a while

1676
01:14:58,080 --> 01:15:00,800
loose urpf may have improper permit

1677
01:15:00,800 --> 01:15:03,120
problem in this case

1678
01:15:03,120 --> 01:15:05,920
overall compared with urpf in in

1679
01:15:05,920 --> 01:15:08,239
predominantly interdependencies

1680
01:15:08,239 --> 01:15:12,239
as within the deployed area cannot spoof

1681
01:15:12,239 --> 01:15:13,440
each other

1682
01:15:13,440 --> 01:15:17,120
and ess in the undeplored area cannot

1683
01:15:17,120 --> 01:15:20,000
cannot spoof the source addresses of the

1684
01:15:20,000 --> 01:15:23,640
deployed area

1685
01:15:28,719 --> 01:15:32,960
here we have some open questions

1686
01:15:32,960 --> 01:15:34,480
about two

1687
01:15:34,480 --> 01:15:39,600
further improvements of dcf for accuracy

1688
01:15:39,600 --> 01:15:42,719
the key of this if is to discover real

1689
01:15:42,719 --> 01:15:44,960
difficulty forwarding paths

1690
01:15:44,960 --> 01:15:47,920
so any factor that affects forwarding

1691
01:15:47,920 --> 01:15:49,920
should be considered

1692
01:15:49,920 --> 01:15:53,280
for example policy based routing like

1693
01:15:53,280 --> 01:15:56,400
static routing or aclu direction may

1694
01:15:56,400 --> 01:15:59,280
change the data plane forwarding path of

1695
01:15:59,280 --> 01:16:00,480
fifth table

1696
01:16:00,480 --> 01:16:04,320
so how to handle this problem

1697
01:16:05,440 --> 01:16:08,880
for scalability containing a long list

1698
01:16:08,880 --> 01:16:12,239
of ip addresses in source prefix field

1699
01:16:12,239 --> 01:16:15,600
and propagation scope field is costly

1700
01:16:15,600 --> 01:16:20,920
can we compress dc protocol messages

1701
01:16:22,800 --> 01:16:25,440
for conscious convergency

1702
01:16:25,440 --> 01:16:28,560
when updating there may be a gap between

1703
01:16:28,560 --> 01:16:31,440
the change of flip table and the update

1704
01:16:31,440 --> 01:16:34,480
of save table so how to avoid improper

1705
01:16:34,480 --> 01:16:35,520
blood

1706
01:16:35,520 --> 01:16:38,080
in this time keep

1707
01:16:38,080 --> 01:16:40,000
in fast routing

1708
01:16:40,000 --> 01:16:41,600
when a link fields

1709
01:16:41,600 --> 01:16:44,320
the router can select a backup

1710
01:16:44,320 --> 01:16:46,640
forwarding path immediately

1711
01:16:46,640 --> 01:16:49,679
how to handle resultant improper block

1712
01:16:49,679 --> 01:16:52,080
since the save tables of downstream

1713
01:16:52,080 --> 01:16:55,040
routers do not learn the

1714
01:16:55,040 --> 01:16:58,560
backup forwarding path

1715
01:17:00,800 --> 01:17:03,280
for incremental deployment

1716
01:17:03,280 --> 01:17:06,480
how about multiple disconnected deployed

1717
01:17:06,480 --> 01:17:08,959
areas

1718
01:17:09,750 --> 01:17:11,679
[Music]

1719
01:17:11,679 --> 01:17:13,600
for security

1720
01:17:13,600 --> 01:17:16,560
was the threat model of dc

1721
01:17:16,560 --> 01:17:20,960
protocol messages and how to address

1722
01:17:22,560 --> 01:17:25,679
for privacy in inter-domain decisive an

1723
01:17:25,679 --> 01:17:28,320
as will tell its local routing policy

1724
01:17:28,320 --> 01:17:30,880
information to other esa's

1725
01:17:30,880 --> 01:17:34,719
is it a leak of privacy

1726
01:17:35,920 --> 01:17:37,360
thank you

1727
01:17:37,360 --> 01:17:40,960
we are glad to explore more suggestions

1728
01:17:40,960 --> 01:17:44,440
and more solutions

1729
01:17:44,480 --> 01:17:46,719
thank you very much

1730
01:17:46,719 --> 01:17:51,600
first up in the queue is nalini elkins

1731
01:17:55,040 --> 01:17:57,360
hi nalini elkins inside products and

1732
01:17:57,360 --> 01:17:59,520
i'll bring up one issue at a time

1733
01:17:59,520 --> 01:18:02,239
um if you can go back to the the i think

1734
01:18:02,239 --> 01:18:04,960
the very very first slide

1735
01:18:04,960 --> 01:18:07,760
that you had

1736
01:18:09,280 --> 01:18:11,520
um i'll continue talking while you're

1737
01:18:11,520 --> 01:18:13,840
while you're doing that we just slide

1738
01:18:13,840 --> 01:18:15,760
yeah yeah very i think very very

1739
01:18:15,760 --> 01:18:17,120
beginning one

1740
01:18:17,120 --> 01:18:18,640
yeah keep going back

1741
01:18:18,640 --> 01:18:22,159
keep going back back back

1742
01:18:22,560 --> 01:18:26,080
yeah yeah uh maybe one more back nalini

1743
01:18:26,080 --> 01:18:28,320
lean into the mic please

1744
01:18:28,320 --> 01:18:30,480
okay can you guys hear me

1745
01:18:30,480 --> 01:18:31,679
there yes

1746
01:18:31,679 --> 01:18:34,320
okay okay all right well so whatever so

1747
01:18:34,320 --> 01:18:36,800
okay it seemed to me okay one

1748
01:18:36,800 --> 01:18:38,640
don't get me wrong this is very good

1749
01:18:38,640 --> 01:18:41,280
idea i think and necessary and and i

1750
01:18:41,280 --> 01:18:43,280
think we happy to work with you

1751
01:18:43,280 --> 01:18:44,080
um

1752
01:18:44,080 --> 01:18:46,080
but i think there's a couple of

1753
01:18:46,080 --> 01:18:48,000
fundamental flaws and i'll bring them up

1754
01:18:48,000 --> 01:18:49,760
one at a time let other people talk

1755
01:18:49,760 --> 01:18:52,159
first fundamental flaw i believe it

1756
01:18:52,159 --> 01:18:54,640
depends on hop by hop

1757
01:18:54,640 --> 01:18:58,080
um header and being accurate and not

1758
01:18:58,080 --> 01:19:02,719
spoof and and that and so if the hop by

1759
01:19:02,719 --> 01:19:03,840
hop

1760
01:19:03,840 --> 01:19:07,199
um extension header is bad to start with

1761
01:19:07,199 --> 01:19:08,640
well there you go

1762
01:19:08,640 --> 01:19:11,360
and we are happy to work with you on

1763
01:19:11,360 --> 01:19:13,679
that because we have an idea ourselves

1764
01:19:13,679 --> 01:19:16,159
because we have another ipv6 extension

1765
01:19:16,159 --> 01:19:18,560
header that we need to be extremely

1766
01:19:18,560 --> 01:19:21,280
accurate so if you want we can explore

1767
01:19:21,280 --> 01:19:23,520
collaboration but let me see what you

1768
01:19:23,520 --> 01:19:26,159
think about that

1769
01:19:26,400 --> 01:19:28,560
that's great yeah we are looking forward

1770
01:19:28,560 --> 01:19:30,719
to collaborating with you yeah

1771
01:19:30,719 --> 01:19:32,560
okay so then i'll go on and bring

1772
01:19:32,560 --> 01:19:35,679
another um uh question let other people

1773
01:19:35,679 --> 01:19:37,840
talk

1774
01:19:40,480 --> 01:19:42,800
thank you next um

1775
01:19:42,800 --> 01:19:45,280
antoine

1776
01:19:45,600 --> 01:19:48,239
freson court

1777
01:19:48,239 --> 01:19:49,840
nearly got it right

1778
01:19:49,840 --> 01:19:51,360
thank you

1779
01:19:51,360 --> 01:19:53,600
so i have a question this slide is

1780
01:19:53,600 --> 01:19:57,120
perfect regarding the propagation scope

1781
01:19:57,120 --> 01:19:59,280
here if i understand well

1782
01:19:59,280 --> 01:20:01,840
you build the propagation scope with the

1783
01:20:01,840 --> 01:20:03,600
information that are in the field of the

1784
01:20:03,600 --> 01:20:05,520
node

1785
01:20:05,520 --> 01:20:08,480
did you explore the possibility to have

1786
01:20:08,480 --> 01:20:11,040
a propagation field that is built

1787
01:20:11,040 --> 01:20:13,040
by each op for instance you have a

1788
01:20:13,040 --> 01:20:15,440
message where you have the source field

1789
01:20:15,440 --> 01:20:17,520
that you that you

1790
01:20:17,520 --> 01:20:18,639
certify

1791
01:20:18,639 --> 01:20:21,520
and then the next node is using the

1792
01:20:21,520 --> 01:20:23,520
message from the

1793
01:20:23,520 --> 01:20:25,760
that is going from the

1794
01:20:25,760 --> 01:20:28,400
from the originating node populate this

1795
01:20:28,400 --> 01:20:30,639
propagation field and relay it to its

1796
01:20:30,639 --> 01:20:32,560
neighbors so you build the propagation

1797
01:20:32,560 --> 01:20:35,440
scope field up by up and

1798
01:20:35,440 --> 01:20:38,000
you can then verify the path completely

1799
01:20:38,000 --> 01:20:42,040
rather than just the source

1800
01:20:48,239 --> 01:20:51,199
uh do you mean how to

1801
01:20:51,199 --> 01:20:54,480
re discover the real forwarding path

1802
01:20:54,480 --> 01:20:58,400
from original to the destination

1803
01:20:58,400 --> 01:20:59,280
um

1804
01:20:59,280 --> 01:21:01,840
it may be a method for doing that but in

1805
01:21:01,840 --> 01:21:04,800
fact you can use this uh build this

1806
01:21:04,800 --> 01:21:06,639
propagation field

1807
01:21:06,639 --> 01:21:08,000
to

1808
01:21:08,000 --> 01:21:09,120
and

1809
01:21:09,120 --> 01:21:11,360
and spread the message to all the

1810
01:21:11,360 --> 01:21:13,199
neighbors so you can

1811
01:21:13,199 --> 01:21:16,000
discover all possible paths and not the

1812
01:21:16,000 --> 01:21:18,159
paths that are used for relaying the

1813
01:21:18,159 --> 01:21:20,879
traffic maybe

1814
01:21:26,800 --> 01:21:29,679
the voice is uh where we know

1815
01:21:29,679 --> 01:21:31,760
i

1816
01:21:31,760 --> 01:21:32,960
actually we

1817
01:21:32,960 --> 01:21:36,159
can someone repeat this question uh

1818
01:21:36,159 --> 01:21:37,760
more clouder

1819
01:21:37,760 --> 01:21:40,560
uh i will try to speak closer to the mic

1820
01:21:40,560 --> 01:21:42,560
if you want

1821
01:21:42,560 --> 01:21:44,159
my question was regarding the

1822
01:21:44,159 --> 01:21:46,639
propagation scope field

1823
01:21:46,639 --> 01:21:49,120
yeah do you think that it could be an

1824
01:21:49,120 --> 01:21:50,560
idea rather than building the

1825
01:21:50,560 --> 01:21:53,040
propagation field from the information

1826
01:21:53,040 --> 01:21:54,639
that are in the field

1827
01:21:54,639 --> 01:21:58,080
to build it up by up with

1828
01:21:58,080 --> 01:21:59,920
your originator message with only the

1829
01:21:59,920 --> 01:22:01,840
source prefix field and then the

1830
01:22:01,840 --> 01:22:04,080
neighbor puts the

1831
01:22:04,080 --> 01:22:06,159
prefix in the source prefix field

1832
01:22:06,159 --> 01:22:08,560
message they received in the propagation

1833
01:22:08,560 --> 01:22:10,639
scope field before relaying the message

1834
01:22:10,639 --> 01:22:12,560
to their own neighbor

1835
01:22:12,560 --> 01:22:15,760
and it goes on until you propagate the

1836
01:22:15,760 --> 01:22:19,280
message in all the network

1837
01:22:21,199 --> 01:22:23,840
actually the reason that we use a car in

1838
01:22:23,840 --> 01:22:24,960
a way

1839
01:22:24,960 --> 01:22:26,480
to

1840
01:22:26,480 --> 01:22:29,440
okay hop by hop notify the source

1841
01:22:29,440 --> 01:22:32,400
prefixes by using the publication scope

1842
01:22:32,400 --> 01:22:34,400
it's just the one to

1843
01:22:34,400 --> 01:22:36,320
minimize the

1844
01:22:36,320 --> 01:22:39,520
number of protocol messages during this

1845
01:22:39,520 --> 01:22:42,960
whole process of prefix notification

1846
01:22:42,960 --> 01:22:44,000
so

1847
01:22:44,000 --> 01:22:45,040
uh

1848
01:22:45,040 --> 01:22:49,199
another possible way is that we just

1849
01:22:49,440 --> 01:22:51,040
carry okay

1850
01:22:51,040 --> 01:22:53,840
just uh some destination addresses in

1851
01:22:53,840 --> 01:22:54,800
the

1852
01:22:54,800 --> 01:22:55,679
uh

1853
01:22:55,679 --> 01:22:58,400
in the package in the

1854
01:22:58,400 --> 01:23:01,360
pay node and just the probe those

1855
01:23:01,360 --> 01:23:02,719
paths

1856
01:23:02,719 --> 01:23:06,239
it will bring much more a protocol ever

1857
01:23:06,239 --> 01:23:07,920
overhead

1858
01:23:07,920 --> 01:23:09,199
so

1859
01:23:09,199 --> 01:23:11,040
yeah actually

1860
01:23:11,040 --> 01:23:14,000
we use the fib for the notification

1861
01:23:14,000 --> 01:23:14,960
because

1862
01:23:14,960 --> 01:23:16,639
we want to

1863
01:23:16,639 --> 01:23:19,760
discover the real data forwarding

1864
01:23:19,760 --> 01:23:22,000
paths because the real

1865
01:23:22,000 --> 01:23:24,159
data platform pass

1866
01:23:24,159 --> 01:23:25,120
is

1867
01:23:25,120 --> 01:23:29,199
determined by the vape table

1868
01:23:29,840 --> 01:23:31,920
okay thank you

1869
01:23:31,920 --> 01:23:35,400
okay thank you

1870
01:23:38,880 --> 01:23:42,480
next up linda dunbar

1871
01:23:43,360 --> 01:23:44,159
um

1872
01:23:44,159 --> 01:23:46,560
so i have a couple questions

1873
01:23:46,560 --> 01:23:49,840
first is um

1874
01:23:50,080 --> 01:23:52,000
one question at a time

1875
01:23:52,000 --> 01:23:53,360
yeah um

1876
01:23:53,360 --> 01:23:58,000
you consider using the acl as well

1877
01:24:00,840 --> 01:24:02,400
yes

1878
01:24:02,400 --> 01:24:04,320
okay so that means here

1879
01:24:04,320 --> 01:24:07,280
right there they validate um

1880
01:24:07,280 --> 01:24:09,520
source address destination address and

1881
01:24:09,520 --> 01:24:12,320
also the port number so do you have

1882
01:24:12,320 --> 01:24:14,480
analysis like showing different ways

1883
01:24:14,480 --> 01:24:18,159
incorporating with acl

1884
01:24:20,000 --> 01:24:21,120
sure

1885
01:24:21,120 --> 01:24:24,320
we have we do have some solutions for

1886
01:24:24,320 --> 01:24:27,199
ecl yes you are right

1887
01:24:27,199 --> 01:24:28,880
ecru direction

1888
01:24:28,880 --> 01:24:31,040
may check

1889
01:24:31,040 --> 01:24:34,159
source address destination address or

1890
01:24:34,159 --> 01:24:35,679
port number

1891
01:24:35,679 --> 01:24:37,360
yes and

1892
01:24:37,360 --> 01:24:38,080
we

1893
01:24:38,080 --> 01:24:41,520
we think dc can use the control plane

1894
01:24:41,520 --> 01:24:43,679
routing information to generate

1895
01:24:43,679 --> 01:24:46,800
notification messages along policy-based

1896
01:24:46,800 --> 01:24:48,480
forwarding paths

1897
01:24:48,480 --> 01:24:51,760
including easier redirection path or

1898
01:24:51,760 --> 01:24:52,880
other

1899
01:24:52,880 --> 01:24:57,120
for example a tunnel path

1900
01:24:57,120 --> 01:25:00,800
okay so if the tunnel is used

1901
01:25:00,800 --> 01:25:03,360
do you validate only the tunnel address

1902
01:25:03,360 --> 01:25:05,600
endpoint address or do you validate the

1903
01:25:05,600 --> 01:25:09,840
address carried inside the terminal

1904
01:25:10,560 --> 01:25:13,560
uh

1905
01:25:13,840 --> 01:25:16,719
only at the point

1906
01:25:16,719 --> 01:25:19,120
at the incoming port

1907
01:25:19,120 --> 01:25:23,800
incoming okay thank you

1908
01:25:31,760 --> 01:25:34,320
next up

1909
01:25:38,960 --> 01:25:41,520
from future virtual network

1910
01:25:41,520 --> 01:25:45,120
i just have a comment so you propose two

1911
01:25:45,120 --> 01:25:46,000
uh

1912
01:25:46,000 --> 01:25:47,280
method

1913
01:25:47,280 --> 01:25:50,960
for message propagation one is a

1914
01:25:50,960 --> 01:25:52,480
one shot

1915
01:25:52,480 --> 01:25:55,520
the other model is the periodically

1916
01:25:55,520 --> 01:25:58,560
originate and the related methods

1917
01:25:58,560 --> 01:26:01,840
i think that if you use the pcp protocol

1918
01:26:01,840 --> 01:26:04,000
and then one shot is okay

1919
01:26:04,000 --> 01:26:05,840
so don't need to

1920
01:26:05,840 --> 01:26:07,199
do the

1921
01:26:07,199 --> 01:26:10,960
refresh every half hour every uh hour

1922
01:26:10,960 --> 01:26:14,560
so if you use a bgp if you use the igp

1923
01:26:14,560 --> 01:26:16,960
then those are already in in the

1924
01:26:16,960 --> 01:26:18,960
protocol itself looks like you are using

1925
01:26:18,960 --> 01:26:21,760
bdp and then we don't need to do the

1926
01:26:21,760 --> 01:26:23,040
theoretical

1927
01:26:23,040 --> 01:26:27,360
message originating and the propagation

1928
01:26:28,800 --> 01:26:31,280
okay

1929
01:26:31,760 --> 01:26:33,199
for

1930
01:26:33,199 --> 01:26:37,000
for infra domain

1931
01:26:37,120 --> 01:26:40,320
i think igp cannot learn the real

1932
01:26:40,320 --> 01:26:44,000
forwarding path because nowadays

1933
01:26:44,000 --> 01:26:47,280
static routing and acr redirection are

1934
01:26:47,280 --> 01:26:48,400
common

1935
01:26:48,400 --> 01:26:50,239
in improvement

1936
01:26:50,239 --> 01:26:53,440
they also influence the forwarding path

1937
01:26:53,440 --> 01:26:56,000
but other routers cannot learn this

1938
01:26:56,000 --> 01:26:58,639
information through idp

1939
01:26:58,639 --> 01:26:59,440
right

1940
01:26:59,440 --> 01:27:02,800
so to achieve accurate skill in

1941
01:27:02,800 --> 01:27:06,480
any scenario a network level protocol is

1942
01:27:06,480 --> 01:27:07,679
necessary

1943
01:27:07,679 --> 01:27:11,199
and in dcl a node can

1944
01:27:11,199 --> 01:27:15,840
send prefix notification to other nodes

1945
01:27:15,840 --> 01:27:19,120
and as for

1946
01:27:19,120 --> 01:27:20,639
you said

1947
01:27:20,639 --> 01:27:24,320
we can use bgp right

1948
01:27:25,600 --> 01:27:27,199
yeah

1949
01:27:27,199 --> 01:27:29,360
in the previous presentation by that

1950
01:27:29,360 --> 01:27:33,040
knee so it looks like you're using bgp

1951
01:27:33,040 --> 01:27:34,960
so once you use bgp

1952
01:27:34,960 --> 01:27:38,000
you don't need to do periodical updates

1953
01:27:38,000 --> 01:27:40,239
right

1954
01:27:40,560 --> 01:27:41,520
um

1955
01:27:41,520 --> 01:27:42,639
i think

1956
01:27:42,639 --> 01:27:47,360
i think i think inter-domain dcf

1957
01:27:47,360 --> 01:27:50,400
only supports treasured update

1958
01:27:50,400 --> 01:27:51,520
and

1959
01:27:51,520 --> 01:27:55,600
if you me we can use bgp to

1960
01:27:55,600 --> 01:27:58,840
send the prefix notification

1961
01:27:58,840 --> 01:28:03,040
uh is about a protocol selection

1962
01:28:03,040 --> 01:28:04,880
question

1963
01:28:04,880 --> 01:28:06,400
now

1964
01:28:06,400 --> 01:28:09,840
protect protocol select selection is an

1965
01:28:09,840 --> 01:28:10,680
open question

1966
01:28:10,680 --> 01:28:12,639
[Music]

1967
01:28:12,639 --> 01:28:15,440
we want we hope to get more

1968
01:28:15,440 --> 01:28:18,080
uh suggestions and reviews

1969
01:28:18,080 --> 01:28:19,280
and whether

1970
01:28:19,280 --> 01:28:21,280
uh we design a

1971
01:28:21,280 --> 01:28:23,280
new protocol or

1972
01:28:23,280 --> 01:28:26,639
extending existing route routine

1973
01:28:26,639 --> 01:28:29,600
protocol for example bgp

1974
01:28:29,600 --> 01:28:30,719
is okay

1975
01:28:30,719 --> 01:28:34,000
it's an open question

1976
01:28:41,600 --> 01:28:43,840
thank you next up um

1977
01:28:43,840 --> 01:28:45,840
we have three more minutes and then we

1978
01:28:45,840 --> 01:28:49,040
need to jump to the next presentation so

1979
01:28:49,040 --> 01:28:51,120
the next questions need to fit in one

1980
01:28:51,120 --> 01:28:52,320
minute

1981
01:28:52,320 --> 01:28:57,480
uh nancy chen your turn

1982
01:29:02,080 --> 01:29:05,440
i'm from hcc i have one question

1983
01:29:05,440 --> 01:29:09,280
in your analysis of scalability of dsav

1984
01:29:09,280 --> 01:29:12,080
you see that in most cases

1985
01:29:12,080 --> 01:29:15,600
a node with only one token message

1986
01:29:15,600 --> 01:29:18,639
originated from every other node

1987
01:29:18,639 --> 01:29:21,840
could you explain why

1988
01:29:22,639 --> 01:29:23,520
okay

1989
01:29:23,520 --> 01:29:26,880
you mean the scalability issue

1990
01:29:26,880 --> 01:29:28,320
right

1991
01:29:28,320 --> 01:29:29,440
um

1992
01:29:29,440 --> 01:29:30,960
okay we can

1993
01:29:30,960 --> 01:29:35,199
we can go back to the example

1994
01:29:37,760 --> 01:29:38,480
in

1995
01:29:38,480 --> 01:29:39,199
in

1996
01:29:39,199 --> 01:29:40,000
in

1997
01:29:40,000 --> 01:29:42,800
in the process of prefix notification

1998
01:29:42,800 --> 01:29:45,440
for p1

1999
01:29:45,440 --> 01:29:47,360
we can see node one

2000
01:29:47,360 --> 01:29:50,400
is text is fifth table

2001
01:29:50,400 --> 01:29:51,679
and

2002
01:29:51,679 --> 01:29:55,280
from node lens fifth

2003
01:29:56,960 --> 01:30:00,320
from node one fifth it finds node two

2004
01:30:00,320 --> 01:30:01,760
and number three

2005
01:30:01,760 --> 01:30:02,560
are

2006
01:30:02,560 --> 01:30:05,840
two next hopes in its theme

2007
01:30:05,840 --> 01:30:07,840
therefore it

2008
01:30:07,840 --> 01:30:08,880
takes

2009
01:30:08,880 --> 01:30:13,840
node two as a nest hope and sends uh

2010
01:30:13,840 --> 01:30:15,679
and it generates an original

2011
01:30:15,679 --> 01:30:18,480
notification message to number two

2012
01:30:18,480 --> 01:30:22,800
the message generated from node 1 to

2013
01:30:22,800 --> 01:30:24,000
node 2

2014
01:30:24,000 --> 01:30:27,760
carries p1 in the source prefix field

2015
01:30:27,760 --> 01:30:31,040
and carrying p2 p4

2016
01:30:31,040 --> 01:30:37,040
p6 and p7 in the propagation scope

2017
01:30:41,280 --> 01:30:44,960
and for the next hope node 3

2018
01:30:44,960 --> 01:30:46,800
from node 5

2019
01:30:46,800 --> 01:30:51,520
p3 and p5 take node 3 as the next hope

2020
01:30:51,520 --> 01:30:54,080
so node 1 generates an original

2021
01:30:54,080 --> 01:30:56,719
notification message to node 3

2022
01:30:56,719 --> 01:31:01,360
and the message from node 1 to node 3

2023
01:31:01,360 --> 01:31:04,719
carrying p1 in the source prefix and

2024
01:31:04,719 --> 01:31:08,000
carrying p3 and p5 in the propagation

2025
01:31:08,000 --> 01:31:10,400
scope

2026
01:31:10,560 --> 01:31:14,320
but for the neighboring node 7

2027
01:31:14,320 --> 01:31:17,520
also it is the neighbor of node 1

2028
01:31:17,520 --> 01:31:19,120
however

2029
01:31:19,120 --> 01:31:23,520
in nodes 1 5 no prefix takes node 7 as

2030
01:31:23,520 --> 01:31:26,719
the next hope so node 1 doesn't send any

2031
01:31:26,719 --> 01:31:30,080
notification message to node 7.

2032
01:31:30,080 --> 01:31:32,080
so in this way

2033
01:31:32,080 --> 01:31:35,120
node one only sends one message to each

2034
01:31:35,120 --> 01:31:36,239
neighbor

2035
01:31:36,239 --> 01:31:39,360
and during the provocation

2036
01:31:39,360 --> 01:31:42,400
each node only receives one message

2037
01:31:42,400 --> 01:31:47,519
and they can generate accuracy rules

2038
01:31:48,560 --> 01:31:51,040
thank you

2039
01:31:52,239 --> 01:31:55,600
um i think we we ran out of time

2040
01:31:55,600 --> 01:31:59,840
so we need to to move on to

2041
01:32:00,719 --> 01:32:02,639
esaf

2042
01:32:02,639 --> 01:32:04,639
anybody that's still in the queue please

2043
01:32:04,639 --> 01:32:08,040
send your comments to the safnet

2044
01:32:08,040 --> 01:32:10,400
ietf.org mailing list

2045
01:32:10,400 --> 01:32:12,480
so that we can

2046
01:32:12,480 --> 01:32:14,080
despite not being able to handle the

2047
01:32:14,080 --> 01:32:16,080
questions right here right now

2048
01:32:16,080 --> 01:32:18,400
still take a look at that input

2049
01:32:18,400 --> 01:32:21,280
my apologies

2050
01:32:21,600 --> 01:32:26,120
all right next up isaf

2051
01:32:29,690 --> 01:32:32,780
[Music]

2052
01:32:45,440 --> 01:32:47,760
see how liang one is maybe how you

2053
01:32:47,760 --> 01:32:49,440
pronounce it

2054
01:32:49,440 --> 01:32:51,199
uh is your audio working can you say

2055
01:32:51,199 --> 01:32:54,519
something please

2056
01:33:06,159 --> 01:33:09,040
it might be easier to use the preloaded

2057
01:33:09,040 --> 01:33:12,159
slides it's the second button on the

2058
01:33:12,159 --> 01:33:14,400
left next to

2059
01:33:14,400 --> 01:33:16,880
just left of the one you you press to

2060
01:33:16,880 --> 01:33:19,040
share your screen so stop the screen

2061
01:33:19,040 --> 01:33:22,920
sharing and then go

2062
01:33:36,719 --> 01:33:39,600
now all we need is audio

2063
01:33:39,600 --> 01:33:40,800
can you say something into your

2064
01:33:40,800 --> 01:33:44,360
microphone please

2065
01:33:58,880 --> 01:34:02,600
i can see slides

2066
01:34:34,480 --> 01:34:38,919
charlie we can't hear you

2067
01:35:38,080 --> 01:35:41,119
okay can you hear me i'm just in this

2068
01:35:41,119 --> 01:35:42,800
screen

2069
01:35:42,800 --> 01:35:45,040
we can hear you please speak up a little

2070
01:35:45,040 --> 01:35:46,320
bit

2071
01:35:46,320 --> 01:35:47,280
okay

2072
01:35:47,280 --> 01:35:49,280
good evening and good other times

2073
01:35:49,280 --> 01:35:50,320
everyone

2074
01:35:50,320 --> 01:35:52,719
this is young fake and my present

2075
01:35:52,719 --> 01:35:55,199
president started from here

2076
01:35:55,199 --> 01:35:57,040
i will show you the

2077
01:35:57,040 --> 01:35:59,119
e-star framework

2078
01:35:59,119 --> 01:36:01,600
and under to end the data plane approach

2079
01:36:01,600 --> 01:36:05,199
for source address validation

2080
01:36:07,679 --> 01:36:11,199
the internet protocol ip is the most

2081
01:36:11,199 --> 01:36:13,600
fundamental building block of current

2082
01:36:13,600 --> 01:36:15,920
network architecture

2083
01:36:15,920 --> 01:36:19,119
this protocol allows us to allocate

2084
01:36:19,119 --> 01:36:22,320
address to different us

2085
01:36:22,320 --> 01:36:25,600
for recognition and deliver

2086
01:36:25,600 --> 01:36:28,000
package on the internet

2087
01:36:28,000 --> 01:36:31,679
however it provides no explicit notion

2088
01:36:31,679 --> 01:36:34,639
of packet level authenticity

2089
01:36:34,639 --> 01:36:37,920
such a weakness allows malicious actors

2090
01:36:37,920 --> 01:36:41,199
to spoof ip packets and launch a wide

2091
01:36:41,199 --> 01:36:44,159
variety of attacks

2092
01:36:44,159 --> 01:36:48,080
for example the lgcp spoofing dns

2093
01:36:48,080 --> 01:36:51,600
reflection deducts and the tcp syn

2094
01:36:51,600 --> 01:36:53,520
flooding

2095
01:36:53,520 --> 01:36:55,520
to name gaza field

2096
01:36:55,520 --> 01:36:59,280
however at the main defense mechanism

2097
01:36:59,280 --> 01:37:02,320
the real world deployment of

2098
01:37:02,320 --> 01:37:04,400
source address variation in the past

2099
01:37:04,400 --> 01:37:06,400
decades is far from

2100
01:37:06,400 --> 01:37:10,280
being said satisfactory

2101
01:37:11,040 --> 01:37:13,679
there are many reasons for this

2102
01:37:13,679 --> 01:37:16,400
and we believe one potential improvement

2103
01:37:16,400 --> 01:37:19,360
direction is to strike a better balance

2104
01:37:19,360 --> 01:37:21,520
between security benefits

2105
01:37:21,520 --> 01:37:24,239
and scalability

2106
01:37:24,239 --> 01:37:25,440
therefore

2107
01:37:25,440 --> 01:37:27,840
we set three main design goals for

2108
01:37:27,840 --> 01:37:29,440
itself

2109
01:37:29,440 --> 01:37:30,480
first

2110
01:37:30,480 --> 01:37:33,280
having clear and consistent security

2111
01:37:33,280 --> 01:37:37,040
benefits in various scenarios is the

2112
01:37:37,040 --> 01:37:38,320
biggest

2113
01:37:38,320 --> 01:37:41,119
deployment incentive for socialist

2114
01:37:41,119 --> 01:37:42,639
validation

2115
01:37:42,639 --> 01:37:43,760
second

2116
01:37:43,760 --> 01:37:46,480
scalability from partial to large-scale

2117
01:37:46,480 --> 01:37:49,520
deployment need to be supported

2118
01:37:49,520 --> 01:37:52,000
thirdly

2119
01:37:52,639 --> 01:37:56,239
provide flexible verification capability

2120
01:37:56,239 --> 01:37:57,840
flag

2121
01:37:57,840 --> 01:38:00,239
flexible requirements for social

2122
01:38:00,239 --> 01:38:02,719
responsion granularity

2123
01:38:02,719 --> 01:38:05,440
for different application scenarios need

2124
01:38:05,440 --> 01:38:08,400
to be achieved

2125
01:38:09,840 --> 01:38:12,480
let's start with the general overview of

2126
01:38:12,480 --> 01:38:14,320
how easter works

2127
01:38:14,320 --> 01:38:18,159
the source s and the the destination as

2128
01:38:18,159 --> 01:38:21,360
directly from an end to end package tag

2129
01:38:21,360 --> 01:38:23,040
synchronization

2130
01:38:23,040 --> 01:38:26,000
after which the package from the source

2131
01:38:26,000 --> 01:38:28,719
will carry the legal package tag and be

2132
01:38:28,719 --> 01:38:31,520
received by the destination

2133
01:38:31,520 --> 01:38:34,560
support packets don't have the tag and

2134
01:38:34,560 --> 01:38:37,119
are marked as suspicious by the

2135
01:38:37,119 --> 01:38:39,920
destination and other process the

2136
01:38:39,920 --> 01:38:43,960
further or dropped directly

2137
01:38:45,520 --> 01:38:48,159
to implement this design

2138
01:38:48,159 --> 01:38:50,880
itself will require both a data plane

2139
01:38:50,880 --> 01:38:52,719
under control plane

2140
01:38:52,719 --> 01:38:54,480
within a s

2141
01:38:54,480 --> 01:38:57,600
the control plane will be

2142
01:38:57,600 --> 01:39:00,159
implement through a device called the

2143
01:39:00,159 --> 01:39:02,320
ais control server

2144
01:39:02,320 --> 01:39:04,320
or acs

2145
01:39:04,320 --> 01:39:05,119
and

2146
01:39:05,119 --> 01:39:07,199
the data plane will be implemented

2147
01:39:07,199 --> 01:39:08,880
through an

2148
01:39:08,880 --> 01:39:13,520
ais border rotor or abr where the api is

2149
01:39:13,520 --> 01:39:15,920
responsible for adding checking

2150
01:39:15,920 --> 01:39:18,639
replacing and deleting tags for all

2151
01:39:18,639 --> 01:39:22,800
upstream and downstream traffic

2152
01:39:23,440 --> 01:39:26,960
and the acs is responsible for providing

2153
01:39:26,960 --> 01:39:29,600
the api with the information needed for

2154
01:39:29,600 --> 01:39:30,880
the relevant

2155
01:39:30,880 --> 01:39:33,920
tag operations such as the legal prefix

2156
01:39:33,920 --> 01:39:35,679
to tag mapping

2157
01:39:35,679 --> 01:39:39,280
the controllers of different as

2158
01:39:39,280 --> 01:39:42,239
need to work together to maintain a

2159
01:39:42,239 --> 01:39:44,800
tesla lens and achieve consistence on

2160
01:39:44,800 --> 01:39:46,719
the information required for tech

2161
01:39:46,719 --> 01:39:48,080
operations

2162
01:39:48,080 --> 01:39:49,440
within the

2163
01:39:49,440 --> 01:39:50,480
lungs

2164
01:39:50,480 --> 01:39:52,560
this requires the

2165
01:39:52,560 --> 01:39:55,719
support of existing network in fact

2166
01:39:55,719 --> 01:39:57,280
infrastructure

2167
01:39:57,280 --> 01:40:00,080
such as the mapping between as number

2168
01:40:00,080 --> 01:40:04,480
and ip prefix provided by rpki

2169
01:40:04,480 --> 01:40:07,280
with the package tag mentioned above

2170
01:40:07,280 --> 01:40:10,480
itself can guarantee a career security

2171
01:40:10,480 --> 01:40:13,360
gain within the deployment and

2172
01:40:13,360 --> 01:40:16,080
guarantees the authenticity of the

2173
01:40:16,080 --> 01:40:18,800
source address of the traffic

2174
01:40:18,800 --> 01:40:21,440
that has passed the tag check

2175
01:40:21,440 --> 01:40:25,600
it's the instead of only checks is owen

2176
01:40:25,600 --> 01:40:27,119
traffic

2177
01:40:27,119 --> 01:40:30,000
on the other hand

2178
01:40:31,040 --> 01:40:35,119
islam is designed with a as community to

2179
01:40:35,119 --> 01:40:39,519
provide a good scalability

2180
01:40:40,320 --> 01:40:41,119
so

2181
01:40:41,119 --> 01:40:45,119
the overhead of establishing a universe

2182
01:40:45,119 --> 01:40:47,360
uh entertainment trust and hardware

2183
01:40:47,360 --> 01:40:50,560
fiction mechanism at the internet scale

2184
01:40:50,560 --> 01:40:53,199
is hardly acceptable

2185
01:40:53,199 --> 01:40:55,360
with the simple end-to-end tag

2186
01:40:55,360 --> 01:40:56,719
maintenance

2187
01:40:56,719 --> 01:40:59,679
is not friendly to change in the network

2188
01:40:59,679 --> 01:41:01,040
environment

2189
01:41:01,040 --> 01:41:02,960
in each of

2190
01:41:02,960 --> 01:41:04,880
a hierarchical

2191
01:41:04,880 --> 01:41:07,840
structure called as community is

2192
01:41:07,840 --> 01:41:10,159
designed to address the scalability

2193
01:41:10,159 --> 01:41:11,360
changes

2194
01:41:11,360 --> 01:41:12,639
faced by

2195
01:41:12,639 --> 01:41:16,159
end-to-end tag schemes when deployed at

2196
01:41:16,159 --> 01:41:18,400
a scale

2197
01:41:18,400 --> 01:41:21,280
in each of is confirm a community

2198
01:41:21,280 --> 01:41:24,159
structure with a hierarchy that splits

2199
01:41:24,159 --> 01:41:25,040
the

2200
01:41:25,040 --> 01:41:26,639
progress

2201
01:41:26,639 --> 01:41:29,840
and to enter maintenance between s

2202
01:41:29,840 --> 01:41:31,520
into a

2203
01:41:31,520 --> 01:41:34,239
the cross layer tag verification

2204
01:41:34,239 --> 01:41:36,400
and the replacement

2205
01:41:36,400 --> 01:41:40,080
the end to end derived task is replaced

2206
01:41:40,080 --> 01:41:43,040
with a cross layer chain of cluster

2207
01:41:43,040 --> 01:41:44,800
delivery

2208
01:41:44,800 --> 01:41:46,960
in es community

2209
01:41:46,960 --> 01:41:49,520
end to end tag is only maintained

2210
01:41:49,520 --> 01:41:53,119
between as with

2211
01:41:53,119 --> 01:41:56,159
the same community

2212
01:41:56,159 --> 01:41:58,800
quite fake entering or leaving the ais

2213
01:41:58,800 --> 01:42:02,400
community is operated by the

2214
01:42:02,400 --> 01:42:06,880
border airs for tag replacement

2215
01:42:06,880 --> 01:42:09,119
through hierarchical design we can

2216
01:42:09,119 --> 01:42:11,920
achieve the following three benefits

2217
01:42:11,920 --> 01:42:14,639
the first one you can reduce the size of

2218
01:42:14,639 --> 01:42:18,159
the tags maintained between s

2219
01:42:18,159 --> 01:42:19,760
the second one

2220
01:42:19,760 --> 01:42:21,119
hierarchy

2221
01:42:21,119 --> 01:42:22,880
effectively blocks

2222
01:42:22,880 --> 01:42:24,880
external trends

2223
01:42:24,880 --> 01:42:27,360
on the provides scalability in large

2224
01:42:27,360 --> 01:42:28,480
scale

2225
01:42:28,480 --> 01:42:30,320
deployments

2226
01:42:30,320 --> 01:42:31,840
the third one

2227
01:42:31,840 --> 01:42:34,880
cross layer where fiction will fail to

2228
01:42:34,880 --> 01:42:38,000
manifest traffic as much as early as

2229
01:42:38,000 --> 01:42:43,080
possible to avoid wasting resources

2230
01:42:44,159 --> 01:42:47,199
to simplify the tag replacement rules in

2231
01:42:47,199 --> 01:42:48,639
data forwarding

2232
01:42:48,639 --> 01:42:52,159
itself propose a logical concept called

2233
01:42:52,159 --> 01:42:56,480
water s to maintain inter community tax

2234
01:42:56,480 --> 01:42:58,800
will entering under leaving our

2235
01:42:58,800 --> 01:43:00,560
community

2236
01:43:00,560 --> 01:43:03,360
awarding problems such as tag

2237
01:43:03,360 --> 01:43:05,920
replacement difficulties due to

2238
01:43:05,920 --> 01:43:09,840
multiplace transmission between s or

2239
01:43:09,840 --> 01:43:12,880
traversing none itself deployment area

2240
01:43:12,880 --> 01:43:13,920
such as

2241
01:43:13,920 --> 01:43:17,280
s one two

2242
01:43:17,520 --> 01:43:19,040
for example

2243
01:43:19,040 --> 01:43:20,960
as the one one

2244
01:43:20,960 --> 01:43:23,360
send package to s

2245
01:43:23,360 --> 01:43:24,880
2 3

2246
01:43:24,880 --> 01:43:26,880
and after passing through

2247
01:43:26,880 --> 01:43:31,199
s 1 2 where e 7 is not deployed

2248
01:43:31,199 --> 01:43:34,560
there are two different following paths

2249
01:43:34,560 --> 01:43:36,080
at this point

2250
01:43:36,080 --> 01:43:39,199
since the logical as community

2251
01:43:39,199 --> 01:43:40,159
one

2252
01:43:40,159 --> 01:43:44,159
water uh one auto as one is set

2253
01:43:44,159 --> 01:43:46,400
the package carries the theme tag

2254
01:43:46,400 --> 01:43:49,040
whether they are sent from s

2255
01:43:49,040 --> 01:43:51,280
one three or s

2256
01:43:51,280 --> 01:43:53,679
four

2257
01:43:53,679 --> 01:43:56,639
both use the tag between water s1 and

2258
01:43:56,639 --> 01:43:59,840
the water s2

2259
01:44:00,800 --> 01:44:03,600
in the following we further describe the

2260
01:44:03,600 --> 01:44:06,960
general working process always so bad

2261
01:44:06,960 --> 01:44:09,199
by example

2262
01:44:09,199 --> 01:44:10,159
here

2263
01:44:10,159 --> 01:44:12,880
there are nine boundary loaders

2264
01:44:12,880 --> 01:44:15,360
lot of one to load line

2265
01:44:15,360 --> 01:44:18,480
each ribs each representing one

2266
01:44:18,480 --> 01:44:20,480
different airs

2267
01:44:20,480 --> 01:44:22,960
forming the as community

2268
01:44:22,960 --> 01:44:26,320
as shown in the figure

2269
01:44:26,320 --> 01:44:29,760
lutheran sent out a package to note 9.

2270
01:44:29,760 --> 01:44:32,960
in the first step lutheran learns that

2271
01:44:32,960 --> 01:44:35,360
the destination is not inside this

2272
01:44:35,360 --> 01:44:38,719
community by the destination address of

2273
01:44:38,719 --> 01:44:39,920
the package

2274
01:44:39,920 --> 01:44:41,679
but it is

2275
01:44:41,679 --> 01:44:44,719
inside the cluster length

2276
01:44:44,719 --> 01:44:47,920
and it puts the tag between itself and

2277
01:44:47,920 --> 01:44:51,600
the water s of this community that is as

2278
01:44:51,600 --> 01:44:53,760
community one three

2279
01:44:53,760 --> 01:44:55,600
into the package

2280
01:44:55,600 --> 01:44:56,560
and

2281
01:44:56,560 --> 01:44:59,840
forming the tag this one to load to

2282
01:44:59,840 --> 01:45:03,679
water as one three

2283
01:45:03,679 --> 01:45:05,440
after that

2284
01:45:05,440 --> 01:45:09,920
the package arrives at rotor2

2285
01:45:09,920 --> 01:45:11,440
used to end

2286
01:45:11,440 --> 01:45:13,679
at the boundary as of the current

2287
01:45:13,679 --> 01:45:15,600
community

2288
01:45:15,600 --> 01:45:18,320
confirms by the package destination

2289
01:45:18,320 --> 01:45:19,679
address that

2290
01:45:19,679 --> 01:45:22,080
the package needs to be forwarded

2291
01:45:22,080 --> 01:45:24,800
outside of the community

2292
01:45:24,800 --> 01:45:26,320
one three

2293
01:45:26,320 --> 01:45:29,760
so after verifying the validity of the

2294
01:45:29,760 --> 01:45:31,119
current tag

2295
01:45:31,119 --> 01:45:34,560
the tag is replaced with the tag

2296
01:45:34,560 --> 01:45:37,280
between community one three and

2297
01:45:37,280 --> 01:45:40,080
community one two

2298
01:45:40,080 --> 01:45:42,880
that is voter s

2299
01:45:42,880 --> 01:45:48,239
one three and a two vertical as one two

2300
01:45:48,800 --> 01:45:50,800
similar to the above

2301
01:45:50,800 --> 01:45:53,520
process after the package across

2302
01:45:53,520 --> 01:45:55,520
community one three

2303
01:45:55,520 --> 01:45:57,199
and reached that

2304
01:45:57,199 --> 01:46:00,000
the board aso community

2305
01:46:00,000 --> 01:46:01,760
one two

2306
01:46:01,760 --> 01:46:04,320
that is loader three those three will

2307
01:46:04,320 --> 01:46:06,960
perform the same check and replace the

2308
01:46:06,960 --> 01:46:08,560
tag with the tag

2309
01:46:08,560 --> 01:46:11,280
between the community one two and under

2310
01:46:11,280 --> 01:46:13,920
community one one

2311
01:46:13,920 --> 01:46:17,440
and the form the tag water as one two

2312
01:46:17,440 --> 01:46:18,880
water s

2313
01:46:18,880 --> 01:46:21,360
one one

2314
01:46:21,360 --> 01:46:25,040
next the boundary of s community one one

2315
01:46:25,040 --> 01:46:28,080
is reached and the root 4 performs the

2316
01:46:28,080 --> 01:46:29,520
tag check

2317
01:46:29,520 --> 01:46:31,760
and the replacement

2318
01:46:31,760 --> 01:46:34,239
the tag

2319
01:46:37,119 --> 01:46:41,520
a load file since this this router is

2320
01:46:41,520 --> 01:46:43,920
neither the source nor the destination

2321
01:46:43,920 --> 01:46:45,760
of the package

2322
01:46:45,760 --> 01:46:47,840
so it does

2323
01:46:47,840 --> 01:46:48,880
need to

2324
01:46:48,880 --> 01:46:50,400
do any

2325
01:46:50,400 --> 01:46:53,280
processing and forwarding

2326
01:46:53,280 --> 01:46:57,040
that's packaged directly after that

2327
01:46:57,040 --> 01:47:00,000
it reaches the destination community and

2328
01:47:00,000 --> 01:47:01,760
the border as

2329
01:47:01,760 --> 01:47:04,880
rota6 performs tag checking and a

2330
01:47:04,880 --> 01:47:07,880
replacement

2331
01:47:08,320 --> 01:47:11,760
the next one is rotor 7

2332
01:47:11,760 --> 01:47:12,880
finally

2333
01:47:12,880 --> 01:47:14,480
it arrives at

2334
01:47:14,480 --> 01:47:16,000
s community

2335
01:47:16,000 --> 01:47:17,360
2 3

2336
01:47:17,360 --> 01:47:20,400
root 8 performs tag check

2337
01:47:20,400 --> 01:47:23,679
after which the tag is replaced by the

2338
01:47:23,679 --> 01:47:27,760
tag between root 8 and root 9

2339
01:47:27,760 --> 01:47:30,400
through the destination address and the

2340
01:47:30,400 --> 01:47:34,080
root name receives it

2341
01:47:34,159 --> 01:47:37,520
and it will verify the tag validity and

2342
01:47:37,520 --> 01:47:39,840
remove the tag

2343
01:47:39,840 --> 01:47:42,320
and send it to the in the host

2344
01:47:42,320 --> 01:47:44,560
so far the data forwarding and

2345
01:47:44,560 --> 01:47:47,840
verification process from root 1 to root

2346
01:47:47,840 --> 01:47:50,000
9 is completed

2347
01:47:50,000 --> 01:47:52,239
and the direct cluster relationship

2348
01:47:52,239 --> 01:47:54,880
between root one and root nand

2349
01:47:54,880 --> 01:47:58,159
is converted to a segmented cluster

2350
01:47:58,159 --> 01:48:01,440
deliveries method

2351
01:48:01,600 --> 01:48:03,199
as a summary

2352
01:48:03,199 --> 01:48:06,719
easter is a corrupt graphic based

2353
01:48:06,719 --> 01:48:09,760
source of reservation to guarantee

2354
01:48:09,760 --> 01:48:13,199
consistent security benefits and provide

2355
01:48:13,199 --> 01:48:15,520
scalability for different

2356
01:48:15,520 --> 01:48:17,440
deployment skills

2357
01:48:17,440 --> 01:48:21,280
and validation granularity

2358
01:48:21,440 --> 01:48:23,679
and the ethers use

2359
01:48:23,679 --> 01:48:27,280
hierarchy and tag replacement to reduce

2360
01:48:27,280 --> 01:48:29,440
overhead and improve

2361
01:48:29,440 --> 01:48:31,920
scalability compare compared to

2362
01:48:31,920 --> 01:48:33,719
traditional crop

2363
01:48:33,719 --> 01:48:35,280
cryptography

2364
01:48:35,280 --> 01:48:38,000
based schemes such as

2365
01:48:38,000 --> 01:48:41,920
spm or ipsec

2366
01:48:42,159 --> 01:48:45,920
so there is some questions the first

2367
01:48:45,920 --> 01:48:48,159
that the install is

2368
01:48:48,159 --> 01:48:53,040
prepared for ipv4 or ipv6 or both

2369
01:48:53,040 --> 01:48:55,199
you know for the limitation of ipv4

2370
01:48:55,199 --> 01:48:57,040
options header

2371
01:48:57,040 --> 01:48:58,480
it

2372
01:48:58,480 --> 01:49:01,520
may be our problem for how you style tag

2373
01:49:01,520 --> 01:49:05,440
the tag to the package

2374
01:49:05,440 --> 01:49:06,639
and to

2375
01:49:06,639 --> 01:49:11,360
how to maintain and manage a hierarchy

2376
01:49:11,360 --> 01:49:13,599
for itself

2377
01:49:13,599 --> 01:49:17,119
is it a distributed one or centralized

2378
01:49:17,119 --> 01:49:18,239
one

2379
01:49:18,239 --> 01:49:19,679
and third

2380
01:49:19,679 --> 01:49:22,159
what ipui says option header should

2381
01:49:22,159 --> 01:49:26,000
install wheels destination hub by half a

2382
01:49:26,000 --> 01:49:30,320
loading operation header in our design

2383
01:49:30,320 --> 01:49:34,480
we use designation over shadow

2384
01:49:35,119 --> 01:49:38,480
and that's all thanks

2385
01:49:38,960 --> 01:49:41,119
thank you so much and thank you for

2386
01:49:41,119 --> 01:49:43,119
taking on the duty of presenting this

2387
01:49:43,119 --> 01:49:47,040
work as very short notice

2388
01:49:47,440 --> 01:49:52,000
first up in the queue is nalini elkins

2389
01:49:55,119 --> 01:49:57,599
yes hi this is delaney atkinson inside

2390
01:49:57,599 --> 01:49:59,920
product um so

2391
01:49:59,920 --> 01:50:02,800
again i'll keep keep it to one question

2392
01:50:02,800 --> 01:50:08,560
which is so so okay so say i'm mr bad as

2393
01:50:08,560 --> 01:50:12,480
number one and my community is my

2394
01:50:12,480 --> 01:50:15,599
friends bad as number two bad ass number

2395
01:50:15,599 --> 01:50:16,560
three

2396
01:50:16,560 --> 01:50:18,639
and we all say yeah yeah good tag good

2397
01:50:18,639 --> 01:50:19,520
tag

2398
01:50:19,520 --> 01:50:20,960
um and so

2399
01:50:20,960 --> 01:50:23,440
what is the i'm not understanding quite

2400
01:50:23,440 --> 01:50:26,320
the validation mechanism are these are

2401
01:50:26,320 --> 01:50:29,040
you intending for this stuff to be

2402
01:50:29,040 --> 01:50:30,800
um encrypted

2403
01:50:30,800 --> 01:50:34,639
are you i have is there an external uh

2404
01:50:34,639 --> 01:50:36,960
check external route of trust

2405
01:50:36,960 --> 01:50:39,280
um can you explain more what this

2406
01:50:39,280 --> 01:50:41,840
verification of tag entails yeah thank

2407
01:50:41,840 --> 01:50:42,960
you

2408
01:50:42,960 --> 01:50:45,840
oh can you hear me by the way

2409
01:50:45,840 --> 01:50:47,840
nice uh thank you for the question

2410
01:50:47,840 --> 01:50:50,320
uh so first of all this is haiyan i'm

2411
01:50:50,320 --> 01:50:52,320
one of the collaborators of this

2412
01:50:52,320 --> 01:50:53,440
research

2413
01:50:53,440 --> 01:50:55,280
so what are you asking is if there are

2414
01:50:55,280 --> 01:50:58,719
bad uh iss out there how we actually

2415
01:50:58,719 --> 01:51:01,360
uh validate those tax out there is that

2416
01:51:01,360 --> 01:51:03,360
what you're asking

2417
01:51:03,360 --> 01:51:04,880
yeah that's that's actually a very good

2418
01:51:04,880 --> 01:51:07,520
question yeah that's actually a very

2419
01:51:07,520 --> 01:51:10,800
good question so talking about the esav

2420
01:51:10,800 --> 01:51:13,840
uh i want you guys to think about the

2421
01:51:13,840 --> 01:51:16,159
autonomous systems or let's say

2422
01:51:16,159 --> 01:51:19,040
a set of toronto assistance as a uh

2423
01:51:19,040 --> 01:51:21,040
at the daycare okay thinking about those

2424
01:51:21,040 --> 01:51:23,280
ib prefixes and ip addresses they like

2425
01:51:23,280 --> 01:51:25,360
kids out there okay those kids they

2426
01:51:25,360 --> 01:51:26,560
don't have driver's license they don't

2427
01:51:26,560 --> 01:51:28,159
have ids so

2428
01:51:28,159 --> 01:51:30,480
uh our responsibility is to design a

2429
01:51:30,480 --> 01:51:33,119
protocol that is running in in the

2430
01:51:33,119 --> 01:51:36,080
daycares to validate the identity of

2431
01:51:36,080 --> 01:51:38,080
those kids okay

2432
01:51:38,080 --> 01:51:41,360
so basically what we do is that uh

2433
01:51:41,360 --> 01:51:43,119
first of all we don't search actually

2434
01:51:43,119 --> 01:51:45,760
the actual routing table up there uh we

2435
01:51:45,760 --> 01:51:47,199
actually only need to check the

2436
01:51:47,199 --> 01:51:50,719
destination uh ip prefix and to check if

2437
01:51:50,719 --> 01:51:53,599
this destination is within the daycare

2438
01:51:53,599 --> 01:51:55,760
or outside of daycare if it's within the

2439
01:51:55,760 --> 01:51:57,920
daycare we send it to

2440
01:51:57,920 --> 01:52:00,159
the our inter domain protocol if it's

2441
01:52:00,159 --> 01:52:04,000
outside then we give this kid a sticker

2442
01:52:04,000 --> 01:52:07,040
we put that sticker on his head and then

2443
01:52:07,040 --> 01:52:09,360
we send this kid out

2444
01:52:09,360 --> 01:52:11,599
what you're asking is that

2445
01:52:11,599 --> 01:52:14,080
what will happen if we have some evil

2446
01:52:14,080 --> 01:52:16,800
daycares that does not care about those

2447
01:52:16,800 --> 01:52:17,920
kids

2448
01:52:17,920 --> 01:52:20,400
uh the sin is that we are basically

2449
01:52:20,400 --> 01:52:22,239
going to consider those autonomous

2450
01:52:22,239 --> 01:52:23,840
systems as

2451
01:52:23,840 --> 01:52:26,080
uh autonomous system that does not

2452
01:52:26,080 --> 01:52:28,080
support yes av

2453
01:52:28,080 --> 01:52:30,480
okay so first of all this is not going

2454
01:52:30,480 --> 01:52:31,840
to hurt

2455
01:52:31,840 --> 01:52:34,320
uh the sender of the packet or the

2456
01:52:34,320 --> 01:52:36,800
receiver of the packet uh it is only

2457
01:52:36,800 --> 01:52:39,599
going to hurt those evo autonomous

2458
01:52:39,599 --> 01:52:42,960
systems who refuse to check the tech

2459
01:52:42,960 --> 01:52:44,560
if that makes sense to you it seems that

2460
01:52:44,560 --> 01:52:46,560
our deployment we don't require all the

2461
01:52:46,560 --> 01:52:48,960
daycares to check those stickers

2462
01:52:48,960 --> 01:52:52,239
okay so for example a kit is generated

2463
01:52:52,239 --> 01:52:53,040
from

2464
01:52:53,040 --> 01:52:53,840
uh

2465
01:52:53,840 --> 01:52:56,800
a daycare with a sticker on there and we

2466
01:52:56,800 --> 01:52:59,280
are going to eventually have some

2467
01:52:59,280 --> 01:53:01,599
not evil daycares that is going to check

2468
01:53:01,599 --> 01:53:03,840
the validation of that sticker

2469
01:53:03,840 --> 01:53:04,960
i don't know if that makes sense to you

2470
01:53:04,960 --> 01:53:07,119
for example if we have three autonomous

2471
01:53:07,119 --> 01:53:09,440
systems one two three connected out

2472
01:53:09,440 --> 01:53:12,320
there and the atomic system two in the

2473
01:53:12,320 --> 01:53:13,520
middle

2474
01:53:13,520 --> 01:53:16,560
is evil or does not have e-s-cb deployed

2475
01:53:16,560 --> 01:53:18,800
out there it doesn't matter because one

2476
01:53:18,800 --> 01:53:21,280
three can still validate each other and

2477
01:53:21,280 --> 01:53:23,840
if you don't feel good or if you don't

2478
01:53:23,840 --> 01:53:26,560
feel happy to join this esab system

2479
01:53:26,560 --> 01:53:28,560
you can ignore it i don't think it's

2480
01:53:28,560 --> 01:53:30,320
going to hurt our protocol but still

2481
01:53:30,320 --> 01:53:33,199
that's a very good question

2482
01:53:35,119 --> 01:53:36,480
next up

2483
01:53:36,480 --> 01:53:38,080
juan xiang

2484
01:53:38,080 --> 01:53:40,960
cube

2485
01:53:40,960 --> 01:53:42,080
hi

2486
01:53:42,080 --> 01:53:43,760
yes can you hear me

2487
01:53:43,760 --> 01:53:45,840
yes i can hear you perfectly

2488
01:53:45,840 --> 01:53:47,520
hey

2489
01:53:47,520 --> 01:53:51,119
i'm from h3c i have a question

2490
01:53:51,119 --> 01:53:55,199
does esau need to label our package

2491
01:53:55,199 --> 01:53:57,920
whether this additional overhead will

2492
01:53:57,920 --> 01:54:01,040
have a significant impact on the

2493
01:54:01,040 --> 01:54:04,239
efficiency of inter-domain

2494
01:54:04,239 --> 01:54:05,840
transfers

2495
01:54:05,840 --> 01:54:07,599
thank you

2496
01:54:07,599 --> 01:54:09,840
okay so you're thinking about efficiency

2497
01:54:09,840 --> 01:54:12,080
of the uh attack

2498
01:54:12,080 --> 01:54:14,080
validation and tech generation is that

2499
01:54:14,080 --> 01:54:16,159
what you're asking

2500
01:54:16,159 --> 01:54:17,360
yeah

2501
01:54:17,360 --> 01:54:19,199
sure uh that's a very good question

2502
01:54:19,199 --> 01:54:21,280
actually we already test that on the

2503
01:54:21,280 --> 01:54:23,199
commercial we actually implemented the

2504
01:54:23,199 --> 01:54:25,360
protocol and the uh we actually test

2505
01:54:25,360 --> 01:54:26,080
that

2506
01:54:26,080 --> 01:54:26,880
uh

2507
01:54:26,880 --> 01:54:30,400
on real-world routers uh in a uh

2508
01:54:30,400 --> 01:54:32,560
we actually deployed that in a virtual

2509
01:54:32,560 --> 01:54:33,760
router

2510
01:54:33,760 --> 01:54:35,679
you know environment that is relatively

2511
01:54:35,679 --> 01:54:37,040
a large scale

2512
01:54:37,040 --> 01:54:40,080
virtual network uh i would say the uh

2513
01:54:40,080 --> 01:54:42,400
efficiency talking about throughput we

2514
01:54:42,400 --> 01:54:45,520
can achieve around uh 98

2515
01:54:45,520 --> 01:54:47,840
percent of the uh

2516
01:54:47,840 --> 01:54:49,440
line speed uh

2517
01:54:49,440 --> 01:54:52,159
with this kind of tech forwarding so i

2518
01:54:52,159 --> 01:54:53,920
don't think that is going to be an issue

2519
01:54:53,920 --> 01:54:55,840
and talking about latency we don't have

2520
01:54:55,840 --> 01:54:58,800
very detailed data out there uh but the

2521
01:54:58,800 --> 01:55:01,199
uh preliminary test showing that the

2522
01:55:01,199 --> 01:55:03,920
it is going to add in approximately 10

2523
01:55:03,920 --> 01:55:06,880
microseconds late delay to your packet

2524
01:55:06,880 --> 01:55:09,440
processing

2525
01:55:09,440 --> 01:55:10,480
okay

2526
01:55:10,480 --> 01:55:11,440
thank you

2527
01:55:11,440 --> 01:55:13,920
yeah no problem

2528
01:55:13,920 --> 01:55:18,360
next up benjamin smartz

2529
01:55:20,080 --> 01:55:20,960
hi

2530
01:55:20,960 --> 01:55:21,920
uh

2531
01:55:21,920 --> 01:55:24,480
ben schwartz here uh i wanted to ask

2532
01:55:24,480 --> 01:55:27,679
about the mtu overhead

2533
01:55:27,679 --> 01:55:30,080
uh first what is the

2534
01:55:30,080 --> 01:55:33,199
what is the size over here

2535
01:55:33,199 --> 01:55:35,119
oh very good question so you're asking

2536
01:55:35,119 --> 01:55:36,880
the size of our tag is is that what

2537
01:55:36,880 --> 01:55:38,400
you're asking

2538
01:55:38,400 --> 01:55:40,800
uh yeah and and any additional overhead

2539
01:55:40,800 --> 01:55:42,880
associated with it yeah

2540
01:55:42,880 --> 01:55:44,239
it's actually

2541
01:55:44,239 --> 01:55:48,400
built in in ipv version six uh option uh

2542
01:55:48,400 --> 01:55:52,400
have a header out there uh the uh

2543
01:55:52,400 --> 01:55:54,480
the actual size the thing is that we're

2544
01:55:54,480 --> 01:55:57,280
not going to actually add extra header

2545
01:55:57,280 --> 01:55:59,920
or extra information on top of the a

2546
01:55:59,920 --> 01:56:01,840
version six header if that makes sense

2547
01:56:01,840 --> 01:56:04,080
to you so our tag is actually a part of

2548
01:56:04,080 --> 01:56:06,800
the ip version six header

2549
01:56:06,800 --> 01:56:09,040
where it is okay where does it go in the

2550
01:56:09,040 --> 01:56:11,679
header the existing implementation is

2551
01:56:11,679 --> 01:56:13,199
that we put that in the destination

2552
01:56:13,199 --> 01:56:14,480
option

2553
01:56:14,480 --> 01:56:16,959
out there

2554
01:56:17,040 --> 01:56:19,119
okay but that's an extension header

2555
01:56:19,119 --> 01:56:20,719
right yeah that's an extension header

2556
01:56:20,719 --> 01:56:23,520
yes so so you know that that extension

2557
01:56:23,520 --> 01:56:25,599
header works just a little bit not not

2558
01:56:25,599 --> 01:56:27,679
like a whole lot

2559
01:56:27,679 --> 01:56:30,880
so how long is that tag

2560
01:56:31,440 --> 01:56:34,560
i cannot remember exactly it's it's like

2561
01:56:34,560 --> 01:56:36,719
64 i guess

2562
01:56:36,719 --> 01:56:40,560
64 bytes it's yeah 64 bits so it's like

2563
01:56:40,560 --> 01:56:43,679
an eight so it's like a 64-bit mac

2564
01:56:43,679 --> 01:56:45,119
yes

2565
01:56:45,119 --> 01:56:46,400
okay

2566
01:56:46,400 --> 01:56:48,560
that's a very good question uh actually

2567
01:56:48,560 --> 01:56:49,840
the scene is that the existing

2568
01:56:49,840 --> 01:56:52,320
limitation uh on ipv6 is based on the

2569
01:56:52,320 --> 01:56:54,840
extension and we're also thinking about

2570
01:56:54,840 --> 01:56:58,400
the uh adding that for ib version 4 that

2571
01:56:58,400 --> 01:57:00,639
is probably also going to be

2572
01:57:00,639 --> 01:57:02,320
added to the extension head that's a

2573
01:57:02,320 --> 01:57:04,080
very good question yes thanks so

2574
01:57:04,080 --> 01:57:08,080
overhead is around like 64 bits

2575
01:57:08,080 --> 01:57:09,280
thanks

2576
01:57:09,280 --> 01:57:11,760
so uh

2577
01:57:11,760 --> 01:57:13,599
my my feeling about this is that i would

2578
01:57:13,599 --> 01:57:15,599
really i'm really interested to see

2579
01:57:15,599 --> 01:57:19,599
something very much along these lines um

2580
01:57:19,599 --> 01:57:22,000
in terms of uh end-to-end cryptographic

2581
01:57:22,000 --> 01:57:25,119
authentication of every packet i think

2582
01:57:25,119 --> 01:57:27,360
that's fascinating and worth in

2583
01:57:27,360 --> 01:57:30,080
investigating and investing in i

2584
01:57:30,080 --> 01:57:32,320
i don't really i don't i have

2585
01:57:32,320 --> 01:57:35,040
disagreements with all like every detail

2586
01:57:35,040 --> 01:57:37,679
um in this proposal in particular i

2587
01:57:37,679 --> 01:57:38,560
really

2588
01:57:38,560 --> 01:57:39,360
think

2589
01:57:39,360 --> 01:57:41,119
that we should consider

2590
01:57:41,119 --> 01:57:43,199
static setup instead of instead of

2591
01:57:43,199 --> 01:57:45,199
trying to do dynamic arrangements

2592
01:57:45,199 --> 01:57:47,280
between the asses

2593
01:57:47,280 --> 01:57:48,960
which creates kind of an n squared

2594
01:57:48,960 --> 01:57:50,719
problem where all the asses have to talk

2595
01:57:50,719 --> 01:57:52,560
to each other i think we should consider

2596
01:57:52,560 --> 01:57:54,960
a static

2597
01:57:54,960 --> 01:57:56,239
cryptographic

2598
01:57:56,239 --> 01:57:58,800
handshake setup

2599
01:57:58,800 --> 01:58:00,400
i think that would allow us to get rid

2600
01:58:00,400 --> 01:58:03,280
of the hierarchy of communities which

2601
01:58:03,280 --> 01:58:05,199
which is conceptually confusing

2602
01:58:05,199 --> 01:58:06,800
increases management

2603
01:58:06,800 --> 01:58:08,400
and i think that

2604
01:58:08,400 --> 01:58:09,440
uh

2605
01:58:09,440 --> 01:58:12,560
i think a big lesson from from the tls

2606
01:58:12,560 --> 01:58:14,320
is that authentication

2607
01:58:14,320 --> 01:58:16,000
is is not

2608
01:58:16,000 --> 01:58:17,360
really uh

2609
01:58:17,360 --> 01:58:19,280
authentication without encryption is

2610
01:58:19,280 --> 01:58:22,239
only half of the half of the story if

2611
01:58:22,239 --> 01:58:24,000
you're going to do all the work to set

2612
01:58:24,000 --> 01:58:25,840
up a shared secret between two parties

2613
01:58:25,840 --> 01:58:28,639
then you might as well encrypt the

2614
01:58:28,639 --> 01:58:30,000
payload while you're at it you now have

2615
01:58:30,000 --> 01:58:32,719
the shared secret so

2616
01:58:32,719 --> 01:58:33,520
um

2617
01:58:33,520 --> 01:58:36,159
i would love to to work with anybody who

2618
01:58:36,159 --> 01:58:37,760
who thinks that's an interesting

2619
01:58:37,760 --> 01:58:39,280
direction to go in

2620
01:58:39,280 --> 01:58:40,159
and

2621
01:58:40,159 --> 01:58:41,119
uh

2622
01:58:41,119 --> 01:58:42,880
uh yeah i'd be happy to be a part of

2623
01:58:42,880 --> 01:58:44,960
that thank you thank you i totally agree

2624
01:58:44,960 --> 01:58:46,639
with your comments out there and i'm

2625
01:58:46,639 --> 01:58:48,239
kind of making my answers short because

2626
01:58:48,239 --> 01:58:51,440
we are running out of time yeah

2627
01:58:51,679 --> 01:58:54,080
all right

2628
01:58:54,159 --> 01:58:56,080
um

2629
01:58:56,080 --> 01:58:58,159
we are at the top of the hour which

2630
01:58:58,159 --> 01:59:00,400
means that we are basically running out

2631
01:59:00,400 --> 01:59:02,910
of time

2632
01:59:02,910 --> 01:59:04,639
[Music]

2633
01:59:04,639 --> 01:59:06,480
questions that need to be answered in

2634
01:59:06,480 --> 01:59:09,280
the subsequent period of time is

2635
01:59:09,280 --> 01:59:11,040
what to do next

2636
01:59:11,040 --> 01:59:13,280
is this

2637
01:59:13,280 --> 01:59:15,760
are these protocols

2638
01:59:15,760 --> 01:59:18,320
worthy worthy is not the right word is

2639
01:59:18,320 --> 01:59:20,320
there sufficient interest to

2640
01:59:20,320 --> 01:59:22,719
form a working group to progress the

2641
01:59:22,719 --> 01:59:24,960
development of these protocols are the

2642
01:59:24,960 --> 01:59:28,159
protocol concepts feasible

2643
01:59:28,159 --> 01:59:29,199
in

2644
01:59:29,199 --> 01:59:31,440
deployments on the internet

2645
01:59:31,440 --> 01:59:33,760
um but i i think we are

2646
01:59:33,760 --> 01:59:35,679
uh

2647
01:59:35,679 --> 01:59:39,360
pressed for time to to address those um

2648
01:59:39,360 --> 01:59:42,400
in a thorough manner

2649
01:59:43,599 --> 01:59:46,480
see jared wants to

2650
01:59:46,480 --> 01:59:48,000
i guess we can spend another five

2651
01:59:48,000 --> 01:59:50,480
minutes jared you go first yeah yeah

2652
01:59:50,480 --> 01:59:52,880
real quick jared macha is an individual

2653
01:59:52,880 --> 01:59:54,080
um

2654
01:59:54,080 --> 01:59:55,440
so

2655
01:59:55,440 --> 01:59:57,280
i think that there's the opportunity for

2656
01:59:57,280 --> 01:59:58,800
there to be some interesting work in

2657
01:59:58,800 --> 02:00:00,000
this space

2658
02:00:00,000 --> 02:00:01,440
describing this

2659
02:00:01,440 --> 02:00:04,000
but i think it also is going to pose

2660
02:00:04,000 --> 02:00:05,520
some real challenges when it comes to

2661
02:00:05,520 --> 02:00:07,840
actually deploying it which is basically

2662
02:00:07,840 --> 02:00:09,920
see everyone who's tried to either do

2663
02:00:09,920 --> 02:00:13,040
bgp route filtering or bgp path

2664
02:00:13,040 --> 02:00:15,840
uh scale because a lot of these

2665
02:00:15,840 --> 02:00:17,360
properties of this

2666
02:00:17,360 --> 02:00:19,840
are going to scale similarly

2667
02:00:19,840 --> 02:00:21,119
as

2668
02:00:21,119 --> 02:00:22,159
uh

2669
02:00:22,159 --> 02:00:23,840
you know those existing deployment

2670
02:00:23,840 --> 02:00:24,880
efforts

2671
02:00:24,880 --> 02:00:28,080
and that is and and that has uh

2672
02:00:28,080 --> 02:00:29,920
you know that takes a lot of compute

2673
02:00:29,920 --> 02:00:32,320
resources which quite often aren't going

2674
02:00:32,320 --> 02:00:34,639
to be on these devices

2675
02:00:34,639 --> 02:00:37,800
thank you

2676
02:00:43,679 --> 02:00:45,280
next up

2677
02:00:45,280 --> 02:00:47,119
zen ben lim

2678
02:00:47,119 --> 02:00:48,000
okay

2679
02:00:48,000 --> 02:00:50,320
i can be from hawaii

2680
02:00:50,320 --> 02:00:52,480
so from my point of view

2681
02:00:52,480 --> 02:00:55,679
i think that's the in the in the

2682
02:00:55,679 --> 02:00:58,960
presentation we uh i think that's is

2683
02:00:58,960 --> 02:01:01,599
agreed that there's the

2684
02:01:01,599 --> 02:01:02,719
uh

2685
02:01:02,719 --> 02:01:06,480
drawback of the existing the source

2686
02:01:06,480 --> 02:01:09,119
address validation solutions such as

2687
02:01:09,119 --> 02:01:11,440
urpf or eccentro

2688
02:01:11,440 --> 02:01:14,239
is it truly worth to

2689
02:01:14,239 --> 02:01:16,800
us to

2690
02:01:16,800 --> 02:01:18,960
explore the possible

2691
02:01:18,960 --> 02:01:20,840
solutions to these

2692
02:01:20,840 --> 02:01:23,840
issues but i think that the concern is

2693
02:01:23,840 --> 02:01:25,920
the possible cost

2694
02:01:25,920 --> 02:01:28,560
from my point of view maybe we think

2695
02:01:28,560 --> 02:01:29,920
that we need

2696
02:01:29,920 --> 02:01:32,560
go on to discuss these

2697
02:01:32,560 --> 02:01:35,360
possible solutions for this

2698
02:01:35,360 --> 02:01:38,080
challenges i think that's maybe we need

2699
02:01:38,080 --> 02:01:42,239
a venue for this point okay

2700
02:01:44,320 --> 02:01:46,320
thank you

2701
02:01:46,320 --> 02:01:47,440
next up

2702
02:01:47,440 --> 02:01:51,719
yang xian qiu

2703
02:01:51,760 --> 02:01:53,760
i'm from h3c

2704
02:01:53,760 --> 02:01:55,119
as a vendor

2705
02:01:55,119 --> 02:01:58,560
or router switches and gateway devices

2706
02:01:58,560 --> 02:02:02,719
support urpf nor erpf is a single point

2707
02:02:02,719 --> 02:02:06,400
cell mechanism and we agreed that urpf

2708
02:02:06,400 --> 02:02:07,119
is

2709
02:02:07,119 --> 02:02:09,920
inadequate in addressing

2710
02:02:09,920 --> 02:02:12,880
a cell such as spoofing i think this

2711
02:02:12,880 --> 02:02:16,320
cell is a possible direction

2712
02:02:16,320 --> 02:02:19,280
and seemed worth doing

2713
02:02:19,280 --> 02:02:22,080
the benefit of this cell is that it can

2714
02:02:22,080 --> 02:02:24,000
improve cell

2715
02:02:24,000 --> 02:02:27,360
and does not need to modify packets

2716
02:02:27,360 --> 02:02:29,040
during the forwarding

2717
02:02:29,040 --> 02:02:30,639
process

2718
02:02:30,639 --> 02:02:33,760
in general there's a lot of work to be

2719
02:02:33,760 --> 02:02:38,239
done with insurer and inter-domain cell

2720
02:02:38,239 --> 02:02:39,840
as support

2721
02:02:39,840 --> 02:02:43,119
setting up our working group

2722
02:02:43,119 --> 02:02:46,360
thank you

2723
02:02:48,320 --> 02:02:50,719
eric thank them your turn yes so my name

2724
02:02:50,719 --> 02:02:52,800
is eric wang i am the responsible lady

2725
02:02:52,800 --> 02:02:55,280
for this buff and i would love to thank

2726
02:02:55,280 --> 02:02:57,119
the chairs and the speaker for the clear

2727
02:02:57,119 --> 02:02:58,840
presentation

2728
02:02:58,840 --> 02:03:02,239
now we got the solutions

2729
02:03:02,239 --> 02:03:04,560
the problem space has been presented

2730
02:03:04,560 --> 02:03:07,040
we were presented with two solutions i

2731
02:03:07,040 --> 02:03:08,719
wonder whether there are there is a

2732
02:03:08,719 --> 02:03:10,960
third and the fourth potential solution

2733
02:03:10,960 --> 02:03:13,040
to this

2734
02:03:13,040 --> 02:03:14,880
so in my opinion i think it's a bit

2735
02:03:14,880 --> 02:03:16,320
premature to think about the working

2736
02:03:16,320 --> 02:03:17,040
group

2737
02:03:17,040 --> 02:03:18,159
right now

2738
02:03:18,159 --> 02:03:20,960
uh but it's problems pace that really

2739
02:03:20,960 --> 02:03:23,119
needs to be explored indeed and there is

2740
02:03:23,119 --> 02:03:26,000
a mailing list safnet at atf.org so i

2741
02:03:26,000 --> 02:03:27,599
really hope that the conversation

2742
02:03:27,599 --> 02:03:31,119
continues there thank you

2743
02:03:32,800 --> 02:03:35,440
yang gao

2744
02:03:39,360 --> 02:03:40,960
hello everyone

2745
02:03:40,960 --> 02:03:43,440
i'm from the china academy of

2746
02:03:43,440 --> 02:03:45,360
information and communications

2747
02:03:45,360 --> 02:03:47,520
technology

2748
02:03:47,520 --> 02:03:50,560
we believe that the problems raised by

2749
02:03:50,560 --> 02:03:53,520
dcl are valid and important

2750
02:03:53,520 --> 02:03:55,760
and we are also doing tracking of

2751
02:03:55,760 --> 02:03:58,560
related technologies

2752
02:03:58,560 --> 02:04:01,360
compared with the previous technologies

2753
02:04:01,360 --> 02:04:03,679
dc provides some

2754
02:04:03,679 --> 02:04:06,880
more general solutions and is worthy of

2755
02:04:06,880 --> 02:04:08,639
more efforts

2756
02:04:08,639 --> 02:04:11,360
we think it's necessary to promote the

2757
02:04:11,360 --> 02:04:12,719
standard

2758
02:04:12,719 --> 02:04:16,239
division of deceiving idf

2759
02:04:16,239 --> 02:04:18,960
at the same time they intend to carry

2760
02:04:18,960 --> 02:04:20,960
out the standard

2761
02:04:20,960 --> 02:04:23,440
promotion in china communications

2762
02:04:23,440 --> 02:04:26,480
standards association thank you

2763
02:04:26,480 --> 02:04:28,799
thanks

2764
02:04:30,639 --> 02:04:32,960
thank you

2765
02:04:33,920 --> 02:04:36,159
we're now five minutes over i would like

2766
02:04:36,159 --> 02:04:36,880
to

2767
02:04:36,880 --> 02:04:39,360
thank all participants both locally and

2768
02:04:39,360 --> 02:04:42,000
remotely it is deeply appreciated that

2769
02:04:42,000 --> 02:04:44,480
many people either went to bed very late

2770
02:04:44,480 --> 02:04:47,440
or got up super early to be here

2771
02:04:47,440 --> 02:04:50,000
virtually

2772
02:04:50,239 --> 02:04:52,079
the next place where we can continue

2773
02:04:52,079 --> 02:04:55,280
discussion is the safnet at itf.org

2774
02:04:55,280 --> 02:04:57,280
mailing list and this is where we can

2775
02:04:57,280 --> 02:04:59,920
figure out whether to do another buff to

2776
02:04:59,920 --> 02:05:02,000
initiate a working group or to do

2777
02:05:02,000 --> 02:05:03,360
something else

2778
02:05:03,360 --> 02:05:05,199
the mailing list is the next platform

2779
02:05:05,199 --> 02:05:07,440
for discussion

2780
02:05:07,440 --> 02:05:09,599
thank you all this was a very exciting

2781
02:05:09,599 --> 02:05:12,079
session and i wish you a very pleasant

2782
02:05:12,079 --> 02:05:15,079
day

2783
02:05:30,880 --> 02:05:33,880
what

