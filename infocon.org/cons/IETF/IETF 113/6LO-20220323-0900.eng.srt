1
00:00:05,440 --> 00:00:08,720
stupid window manager

2
00:00:10,000 --> 00:00:14,440
never happens on my computer at home

3
00:00:16,560 --> 00:00:19,038
all right

4
00:00:29,359 --> 00:00:32,000
well this seems good enough

5
00:00:32,000 --> 00:00:33,680
good enough and we're exactly on time

6
00:00:33,680 --> 00:00:34,960
now

7
00:00:34,960 --> 00:00:38,200
oh perfect

8
00:00:46,559 --> 00:00:49,360
what happens if i change i don't

9
00:00:49,360 --> 00:00:53,000
know stupid

10
00:01:04,559 --> 00:01:06,560
okay so it's probably

11
00:01:06,560 --> 00:01:08,560
time to start

12
00:01:08,560 --> 00:01:10,000
okay so

13
00:01:10,000 --> 00:01:12,479
welcome everyone welcome to the meeting

14
00:01:12,479 --> 00:01:15,360
of the sixth law working group

15
00:01:15,360 --> 00:01:17,680
my name is carlos gomez the other chair

16
00:01:17,680 --> 00:01:19,680
is treta bandari

17
00:01:19,680 --> 00:01:20,479
and

18
00:01:20,479 --> 00:01:22,159
the responsible ad

19
00:01:22,159 --> 00:01:24,799
is eric klein

20
00:01:24,799 --> 00:01:29,600
there is some sort of audio issues maybe

21
00:01:30,240 --> 00:01:32,560
yeah now it's

22
00:01:32,560 --> 00:01:35,600
yeah now it's better thank you

23
00:01:35,600 --> 00:01:37,040
okay so

24
00:01:37,040 --> 00:01:39,360
things as you can see well the chairs

25
00:01:39,360 --> 00:01:42,720
and the 80 we are all unfortunately

26
00:01:42,720 --> 00:01:46,240
remote this time but then we have

27
00:01:46,240 --> 00:01:49,200
michael richardson as our delegate in

28
00:01:49,200 --> 00:01:50,479
the room

29
00:01:50,479 --> 00:01:52,840
uh thanks a lot michael for

30
00:01:52,840 --> 00:01:54,640
helping and

31
00:01:54,640 --> 00:01:58,399
also we have mida takers adnan dominique

32
00:01:58,399 --> 00:02:01,040
and michael who have kindly volunteered

33
00:02:01,040 --> 00:02:02,320
as well

34
00:02:02,320 --> 00:02:05,439
and also michael will be

35
00:02:05,439 --> 00:02:08,479
our javascribe today so thanks a lot to

36
00:02:08,479 --> 00:02:11,360
all for helping and volunteering

37
00:02:11,360 --> 00:02:12,959
thank you

38
00:02:12,959 --> 00:02:14,160
uh

39
00:02:14,160 --> 00:02:15,760
by the way i

40
00:02:15,760 --> 00:02:18,879
i think there was some additional part

41
00:02:18,879 --> 00:02:20,480
at the lower

42
00:02:20,480 --> 00:02:22,560
like at the bottom of the screen which

43
00:02:22,560 --> 00:02:25,920
is maybe not shown here

44
00:02:26,239 --> 00:02:28,560
yeah

45
00:02:28,879 --> 00:02:32,079
yeah okay thank you

46
00:02:34,400 --> 00:02:37,519
okay so yeah you can also find on the

47
00:02:37,519 --> 00:02:40,480
slide the pointer to the online agenda

48
00:02:40,480 --> 00:02:42,800
which contains many links to useful

49
00:02:42,800 --> 00:02:45,599
resources and also the link to hedge doc

50
00:02:45,599 --> 00:02:47,280
which is the tool that we are going to

51
00:02:47,280 --> 00:02:50,959
use today for taking minutes so recall

52
00:02:50,959 --> 00:02:53,599
that everyone can join and contribute to

53
00:02:53,599 --> 00:02:55,519
the process of taking minutes so feel

54
00:02:55,519 --> 00:02:58,239
free to join and contribute to this

55
00:02:58,239 --> 00:03:00,480
collaborative process

56
00:03:00,480 --> 00:03:03,799
next please

57
00:03:04,080 --> 00:03:07,360
so well it's wednesday already so

58
00:03:07,360 --> 00:03:08,400
probably

59
00:03:08,400 --> 00:03:10,400
most or all of you already are quite

60
00:03:10,400 --> 00:03:13,040
aware of this but anyway well this is

61
00:03:13,040 --> 00:03:16,480
the first itf meeting that we have since

62
00:03:16,480 --> 00:03:19,280
the start of the cockpit pandemic

63
00:03:19,280 --> 00:03:22,800
that has some in-person uh component so

64
00:03:22,800 --> 00:03:24,480
for in-person participants there are

65
00:03:24,480 --> 00:03:26,640
some tips to keep in mind

66
00:03:26,640 --> 00:03:28,720
uh please make sure that even if you are

67
00:03:28,720 --> 00:03:30,640
in the room physically

68
00:03:30,640 --> 00:03:32,879
make sure that you sign into the session

69
00:03:32,879 --> 00:03:35,120
using miteco for example by using the

70
00:03:35,120 --> 00:03:37,440
lite client that you can find from the

71
00:03:37,440 --> 00:03:39,599
data tracker agenda

72
00:03:39,599 --> 00:03:41,680
as in fact uh we are going to use meet

73
00:03:41,680 --> 00:03:44,239
echo for managing the cube so you need

74
00:03:44,239 --> 00:03:46,480
to use neteco to join the queue if you

75
00:03:46,480 --> 00:03:48,720
want to do so there is a single unified

76
00:03:48,720 --> 00:03:49,599
queue

77
00:03:49,599 --> 00:03:52,239
and also blue sheets are automatically

78
00:03:52,239 --> 00:03:54,480
generated from miteco so they are not

79
00:03:54,480 --> 00:03:56,560
like physical blue sheets

80
00:03:56,560 --> 00:03:59,760
and for remote participants

81
00:03:59,760 --> 00:04:02,319
mechanism the mechanics are like the the

82
00:04:02,319 --> 00:04:04,400
same as in previous fully online

83
00:04:04,400 --> 00:04:06,400
meetings just make sure that your audio

84
00:04:06,400 --> 00:04:08,000
and video are off unless you are

85
00:04:08,000 --> 00:04:09,680
presenting

86
00:04:09,680 --> 00:04:12,920
next please

87
00:04:14,560 --> 00:04:17,279
so this is the notewell this is a

88
00:04:17,279 --> 00:04:20,160
reminder of idf policies on

89
00:04:20,160 --> 00:04:22,960
several important topics so please make

90
00:04:22,960 --> 00:04:25,840
sure that you have read the note well

91
00:04:25,840 --> 00:04:27,440
okay

92
00:04:27,440 --> 00:04:29,840
next please

93
00:04:29,840 --> 00:04:32,240
and this is the proposed agenda for

94
00:04:32,240 --> 00:04:33,280
today

95
00:04:33,280 --> 00:04:34,639
so the first

96
00:04:34,639 --> 00:04:37,040
slot is the usual chairs introduction

97
00:04:37,040 --> 00:04:39,520
which is currently in progress

98
00:04:39,520 --> 00:04:42,000
then there will be a presentation on the

99
00:04:42,000 --> 00:04:45,840
status update of ipv6 over plc even by

100
00:04:45,840 --> 00:04:47,360
paolo

101
00:04:47,360 --> 00:04:49,759
then there will be a set of four

102
00:04:49,759 --> 00:04:52,880
presentations on the topic of nd given

103
00:04:52,880 --> 00:04:54,479
by pascal

104
00:04:54,479 --> 00:04:57,440
these comprise the nd multicast address

105
00:04:57,440 --> 00:04:59,520
listener registration

106
00:04:59,520 --> 00:05:02,080
then the and the unicast lookup

107
00:05:02,080 --> 00:05:04,320
also a presentation on a potential use

108
00:05:04,320 --> 00:05:08,639
of syslopan nd outside the iot domain

109
00:05:08,639 --> 00:05:11,840
and finally a presentation on the idea

110
00:05:11,840 --> 00:05:15,440
of prefix registration its applications

111
00:05:15,440 --> 00:05:19,440
and relationship with rfc8505

112
00:05:19,440 --> 00:05:22,000
next please

113
00:05:23,039 --> 00:05:25,280
then there will be a presentation on the

114
00:05:25,280 --> 00:05:26,880
transmission of sheet compressed package

115
00:05:26,880 --> 00:05:30,240
of 15.4 given by itself

116
00:05:30,240 --> 00:05:32,080
and that will be followed by a set of

117
00:05:32,080 --> 00:05:34,000
two presentations on

118
00:05:34,000 --> 00:05:36,800
the draft about native short address for

119
00:05:36,800 --> 00:05:38,400
lln expansion

120
00:05:38,400 --> 00:05:40,880
the first one will be a report on the

121
00:05:40,880 --> 00:05:43,840
last updates given by luigi yannoni

122
00:05:43,840 --> 00:05:44,639
and

123
00:05:44,639 --> 00:05:48,000
that will be followed by a demo given by

124
00:05:48,000 --> 00:05:49,120
lee

125
00:05:49,120 --> 00:05:51,919
so this leads to a total of 100 minutes

126
00:05:51,919 --> 00:05:53,919
of schedule time

127
00:05:53,919 --> 00:05:57,600
over the two hours of the session

128
00:05:57,600 --> 00:05:58,400
so

129
00:05:58,400 --> 00:06:00,240
is there any comment

130
00:06:00,240 --> 00:06:04,600
any objection to the agenda

131
00:06:09,919 --> 00:06:12,880
okay so if there's no comment let's

132
00:06:12,880 --> 00:06:16,400
proceed to the next slide yes

133
00:06:16,479 --> 00:06:17,840
so this is the

134
00:06:17,840 --> 00:06:20,639
report about the working group documents

135
00:06:20,639 --> 00:06:23,120
first of all since the last atf we have

136
00:06:23,120 --> 00:06:24,400
a new rfc

137
00:06:24,400 --> 00:06:26,639
that's 9159

138
00:06:26,639 --> 00:06:29,440
about ipv6 mesh over blinks so

139
00:06:29,440 --> 00:06:32,080
congratulations to the authors and

140
00:06:32,080 --> 00:06:33,840
many thanks to everyone who has

141
00:06:33,840 --> 00:06:37,039
contributed in the process by giving

142
00:06:37,039 --> 00:06:40,240
comments and reviews and so on

143
00:06:40,240 --> 00:06:43,680
so then we have two documents that have

144
00:06:43,680 --> 00:06:46,400
been evaluated by the isd

145
00:06:46,400 --> 00:06:47,680
the first one

146
00:06:47,680 --> 00:06:51,680
is the ipv6 over nfc draft

147
00:06:51,680 --> 00:06:54,960
which has been like a bit stuck for some

148
00:06:54,960 --> 00:06:57,520
time although i understand that we have

149
00:06:57,520 --> 00:06:58,319
some

150
00:06:58,319 --> 00:07:00,960
news about potential next steps so

151
00:07:00,960 --> 00:07:04,400
perhaps eric if you may want to

152
00:07:04,400 --> 00:07:06,319
make comments on this which could be

153
00:07:06,319 --> 00:07:09,520
like next steps

154
00:07:10,479 --> 00:07:14,159
uh yes thank you i think um

155
00:07:15,199 --> 00:07:17,440
at this point basically i i need to uh i

156
00:07:17,440 --> 00:07:19,199
need to double check with lars uh real

157
00:07:19,199 --> 00:07:21,199
quick and then

158
00:07:21,199 --> 00:07:23,120
just uh schedule it for uh uh to bring

159
00:07:23,120 --> 00:07:25,759
it back to a chill chat um on uh

160
00:07:25,759 --> 00:07:27,440
probably

161
00:07:27,440 --> 00:07:29,199
not not the first teletub after this

162
00:07:29,199 --> 00:07:30,400
meeting but

163
00:07:30,400 --> 00:07:33,440
uh late april or uh or may

164
00:07:33,440 --> 00:07:35,280
so if lars wants to have some kind of a

165
00:07:35,280 --> 00:07:36,560
second last call because it has been

166
00:07:36,560 --> 00:07:38,400
such a long time we might need to do

167
00:07:38,400 --> 00:07:39,680
that but i'm hoping that won't be the

168
00:07:39,680 --> 00:07:40,880
case

169
00:07:40,880 --> 00:07:42,960
so i think i just need to update the

170
00:07:42,960 --> 00:07:45,840
shepherd right up to

171
00:07:46,080 --> 00:07:49,440
i don't know convey whatever people

172
00:07:49,440 --> 00:07:52,639
need to know to feel comfortable that

173
00:07:52,639 --> 00:07:53,919
everyone who needed to review the

174
00:07:53,919 --> 00:07:56,319
document at the l2 l3 layer interaction

175
00:07:56,319 --> 00:07:58,160
had access to the definition of the l2

176
00:07:58,160 --> 00:07:59,360
layer

177
00:07:59,360 --> 00:08:01,599
so

178
00:08:01,680 --> 00:08:04,879
but that's uh unfortunately um

179
00:08:04,879 --> 00:08:07,280
yeah it has not uh i've not been able to

180
00:08:07,280 --> 00:08:09,199
make it a priority

181
00:08:09,199 --> 00:08:12,960
but i'm catching up

182
00:08:12,960 --> 00:08:16,720
okay thank you for the update so

183
00:08:16,720 --> 00:08:19,120
yeah it sounds like we have a plan for

184
00:08:19,120 --> 00:08:20,639
next steps

185
00:08:20,639 --> 00:08:24,240
and yeah then uh the next draft that has

186
00:08:24,240 --> 00:08:25,360
been

187
00:08:25,360 --> 00:08:28,479
also evaluated by the asg is the draft

188
00:08:28,479 --> 00:08:31,039
about ipv6 over plc

189
00:08:31,039 --> 00:08:32,000
so

190
00:08:32,000 --> 00:08:33,120
actually

191
00:08:33,120 --> 00:08:36,080
what you can see on the slide with the

192
00:08:36,080 --> 00:08:37,279
red and

193
00:08:37,279 --> 00:08:38,640
green colors

194
00:08:38,640 --> 00:08:42,240
is like not up to date anymore because a

195
00:08:42,240 --> 00:08:44,240
few hours ago there were some some

196
00:08:44,240 --> 00:08:45,519
updates here

197
00:08:45,519 --> 00:08:48,000
so there were two remaining discuss

198
00:08:48,000 --> 00:08:50,800
ballots however both have been cleared

199
00:08:50,800 --> 00:08:52,320
in the last hours

200
00:08:52,320 --> 00:08:55,920
so um actually one of them the one by

201
00:08:55,920 --> 00:09:00,160
benjamin still has a set of comments

202
00:09:00,160 --> 00:09:03,279
and the authors may need to to see

203
00:09:03,279 --> 00:09:05,920
uh whether they still may want to to

204
00:09:05,920 --> 00:09:07,600
address them

205
00:09:07,600 --> 00:09:11,120
well later we have a presentation slot

206
00:09:11,120 --> 00:09:13,360
for this draft and perhaps we can

207
00:09:13,360 --> 00:09:15,279
further comment on this

208
00:09:15,279 --> 00:09:17,760
not sure if there's any comment at this

209
00:09:17,760 --> 00:09:20,160
moment

210
00:09:22,240 --> 00:09:25,200
um i i said to you in an email but um

211
00:09:25,200 --> 00:09:26,959
i'll say it here i think if they uh if

212
00:09:26,959 --> 00:09:28,959
the authors get a

213
00:09:28,959 --> 00:09:30,399
dash 11 that

214
00:09:30,399 --> 00:09:31,760
incorporates whatever it is they want to

215
00:09:31,760 --> 00:09:33,680
incorporate from from men's comments

216
00:09:33,680 --> 00:09:36,160
that'd be great and i'd be happy to send

217
00:09:36,160 --> 00:09:39,519
it off to the rfc editor from there

218
00:09:40,880 --> 00:09:43,680
okay thank you

219
00:09:43,680 --> 00:09:44,959
so

220
00:09:44,959 --> 00:09:46,880
the next document is the six law use

221
00:09:46,880 --> 00:09:48,320
cases draft

222
00:09:48,320 --> 00:09:50,800
it was in 80 evaluation also there have

223
00:09:50,800 --> 00:09:52,000
been some

224
00:09:52,000 --> 00:09:54,480
recent updates in the last hours

225
00:09:54,480 --> 00:09:55,360
and

226
00:09:55,360 --> 00:09:57,600
basically this is now in

227
00:09:57,600 --> 00:10:00,480
last call idea of last call

228
00:10:00,480 --> 00:10:04,240
there are a few comments by the 80 but

229
00:10:04,240 --> 00:10:05,839
our understanding is they can be

230
00:10:05,839 --> 00:10:07,760
addressed in

231
00:10:07,760 --> 00:10:09,440
future updates

232
00:10:09,440 --> 00:10:11,440
so yeah the document is now in itf last

233
00:10:11,440 --> 00:10:12,480
call

234
00:10:12,480 --> 00:10:13,360
and

235
00:10:13,360 --> 00:10:14,480
the last

236
00:10:14,480 --> 00:10:16,720
working group draft is the ipv6 and the

237
00:10:16,720 --> 00:10:20,000
multicast address listener registration

238
00:10:20,000 --> 00:10:23,040
as you may recall this was adopted right

239
00:10:23,040 --> 00:10:25,839
before the last itf and today we have a

240
00:10:25,839 --> 00:10:28,320
presentation on the last updates for

241
00:10:28,320 --> 00:10:30,079
this draft

242
00:10:30,079 --> 00:10:32,720
so other than that is there maybe any

243
00:10:32,720 --> 00:10:35,920
question any comment

244
00:10:41,120 --> 00:10:43,920
okay so if there's no questions or

245
00:10:43,920 --> 00:10:46,240
comments let's proceed to the first

246
00:10:46,240 --> 00:10:48,160
presentation

247
00:10:48,160 --> 00:10:53,360
by paolo on ipv6 of the plc

248
00:10:57,360 --> 00:11:01,720
do you need your slides

249
00:11:04,560 --> 00:11:07,439
is this this

250
00:11:08,560 --> 00:11:12,240
plc you're doing header compression

251
00:11:12,240 --> 00:11:13,200
is that it

252
00:11:13,200 --> 00:11:14,800
hello

253
00:11:14,800 --> 00:11:20,319
header compression it's the plc plc

254
00:11:24,720 --> 00:11:27,279
plc

255
00:11:27,279 --> 00:11:29,040
i think it's going to be correct right

256
00:11:29,040 --> 00:11:31,600
there you go good so thanks so good

257
00:11:31,600 --> 00:11:34,720
morning my name is paolo volpato

258
00:11:34,720 --> 00:11:37,120
let's say that as you see i'm not in the

259
00:11:37,120 --> 00:11:40,959
list of the authors of this draft

260
00:11:40,959 --> 00:11:43,200
i'm presenting on the alpha of the

261
00:11:43,200 --> 00:11:45,200
authors represented here

262
00:11:45,200 --> 00:11:46,160
um

263
00:11:46,160 --> 00:11:49,120
the reason why i'm here to talk about

264
00:11:49,120 --> 00:11:51,440
the transmission of ipv6 packets over

265
00:11:51,440 --> 00:11:54,720
plc networks is that i had a talk with

266
00:11:54,720 --> 00:11:55,440
my

267
00:11:55,440 --> 00:11:57,360
at huawei

268
00:11:57,360 --> 00:12:02,160
they were not able to attend itf 113 so

269
00:12:02,160 --> 00:12:05,200
they asked me to act as a proxy on

270
00:12:05,200 --> 00:12:07,360
on their behalf so to update you about

271
00:12:07,360 --> 00:12:09,440
the status of the draft

272
00:12:09,440 --> 00:12:10,560
and uh

273
00:12:10,560 --> 00:12:13,680
explained by the chairs i saw a couple

274
00:12:13,680 --> 00:12:15,120
of emails

275
00:12:15,120 --> 00:12:16,000
uh

276
00:12:16,000 --> 00:12:18,000
yesterday i think

277
00:12:18,000 --> 00:12:19,600
which

278
00:12:19,600 --> 00:12:22,480
to some extent obsoleted some of the

279
00:12:22,480 --> 00:12:24,880
content of this presentation anyway

280
00:12:24,880 --> 00:12:26,880
we'll discuss that and we'll see what's

281
00:12:26,880 --> 00:12:30,720
the reaction so next slide

282
00:12:34,720 --> 00:12:38,399
okay so status you see here basically

283
00:12:38,399 --> 00:12:39,839
uh the draft

284
00:12:39,839 --> 00:12:42,480
underwent the last call review

285
00:12:42,480 --> 00:12:45,760
i think end of 2020

286
00:12:45,760 --> 00:12:47,200
um

287
00:12:47,200 --> 00:12:50,639
tail chat and isg evaluation happened

288
00:12:50,639 --> 00:12:54,240
in summer 2021

289
00:12:54,639 --> 00:12:57,760
after isg evaluation there were some

290
00:12:57,760 --> 00:12:59,120
discuss

291
00:12:59,120 --> 00:13:02,160
and the authors were able to

292
00:13:02,160 --> 00:13:03,040
say

293
00:13:03,040 --> 00:13:05,279
review the draft and provide new

294
00:13:05,279 --> 00:13:07,519
versions just to address those

295
00:13:07,519 --> 00:13:09,760
discussions

296
00:13:09,760 --> 00:13:10,880
by the way

297
00:13:10,880 --> 00:13:12,320
the autos

298
00:13:12,320 --> 00:13:14,399
wishes to thank all the people who

299
00:13:14,399 --> 00:13:16,800
provided their reviews

300
00:13:16,800 --> 00:13:18,240
and

301
00:13:18,240 --> 00:13:21,839
the result of the asg evaluation i got

302
00:13:21,839 --> 00:13:25,279
three uh discusses uh one from eric

303
00:13:25,279 --> 00:13:28,480
winker and um i think that was uh let's

304
00:13:28,480 --> 00:13:31,279
say addressed by the most recent uh

305
00:13:31,279 --> 00:13:33,440
versions of the draft specifically there

306
00:13:33,440 --> 00:13:34,959
was a major

307
00:13:34,959 --> 00:13:37,920
revision it was a

308
00:13:37,920 --> 00:13:40,560
zero nine which addressed that comment

309
00:13:40,560 --> 00:13:42,240
and then there were a couple of

310
00:13:42,240 --> 00:13:43,519
discusses

311
00:13:43,519 --> 00:13:44,399
uh

312
00:13:44,399 --> 00:13:47,680
that probably were partially addressed

313
00:13:47,680 --> 00:13:49,440
by the list is the

314
00:13:49,440 --> 00:13:52,800
versions of the draft one from roman

315
00:13:52,800 --> 00:13:55,440
again apparently it was okay after

316
00:13:55,440 --> 00:13:57,600
reviewing version zero nine

317
00:13:57,600 --> 00:14:00,240
and uh that was completed in version ten

318
00:14:00,240 --> 00:14:03,680
and the let's say uh the major point of

319
00:14:03,680 --> 00:14:05,839
discussion was the discuss raised by

320
00:14:05,839 --> 00:14:07,120
benjamin

321
00:14:07,120 --> 00:14:09,839
but i said that happened

322
00:14:09,839 --> 00:14:10,720
uh

323
00:14:10,720 --> 00:14:14,399
before let's say itf 113 uh there was a

324
00:14:14,399 --> 00:14:16,639
email sent yesterday

325
00:14:16,639 --> 00:14:18,880
which if i understand correctly

326
00:14:18,880 --> 00:14:20,680
um

327
00:14:20,680 --> 00:14:22,480
reconsidered

328
00:14:22,480 --> 00:14:24,720
the text provided by the authors so the

329
00:14:24,720 --> 00:14:26,880
discuss was demoted to comments so

330
00:14:26,880 --> 00:14:29,440
something has to be fixed still but

331
00:14:29,440 --> 00:14:31,760
let's say probably the discuss is not

332
00:14:31,760 --> 00:14:33,600
applicable any longer

333
00:14:33,600 --> 00:14:35,920
so that's for the status michael if you

334
00:14:35,920 --> 00:14:39,199
can please move to the next slide

335
00:14:39,199 --> 00:14:40,959
okay

336
00:14:40,959 --> 00:14:42,320
let's

337
00:14:42,320 --> 00:14:44,800
jump to the discuss provided by by

338
00:14:44,800 --> 00:14:48,160
benjamin so the main point was about the

339
00:14:48,160 --> 00:14:49,519
use of

340
00:14:49,519 --> 00:14:52,000
the two bits the

341
00:14:52,000 --> 00:14:53,920
uh let's say

342
00:14:53,920 --> 00:14:54,250
um

343
00:14:54,250 --> 00:14:55,519
[Music]

344
00:14:55,519 --> 00:14:58,720
universal local and individual group

345
00:14:58,720 --> 00:15:00,320
bits

346
00:15:00,320 --> 00:15:02,320
in the first byte

347
00:15:02,320 --> 00:15:05,279
of the interface ied so

348
00:15:05,279 --> 00:15:06,560
basically the

349
00:15:06,560 --> 00:15:08,880
issue was that the original draft

350
00:15:08,880 --> 00:15:10,000
imposed

351
00:15:10,000 --> 00:15:13,279
those two bits to be set to zero

352
00:15:13,279 --> 00:15:15,839
but that apparently was creating some

353
00:15:15,839 --> 00:15:18,720
issues so that originated let's say they

354
00:15:18,720 --> 00:15:20,480
discussed by benjamin

355
00:15:20,480 --> 00:15:22,240
um

356
00:15:22,240 --> 00:15:24,560
the authors uh

357
00:15:24,560 --> 00:15:27,440
reviewed that position so they let they

358
00:15:27,440 --> 00:15:30,160
lose the constraint which was described

359
00:15:30,160 --> 00:15:32,240
in version 0 6

360
00:15:32,240 --> 00:15:34,160
and

361
00:15:34,160 --> 00:15:36,800
basically provided two ways to deal with

362
00:15:36,800 --> 00:15:40,880
those two bits so the first mode was to

363
00:15:40,880 --> 00:15:41,920
let's say

364
00:15:41,920 --> 00:15:43,759
um

365
00:15:43,759 --> 00:15:45,519
use those two bits

366
00:15:45,519 --> 00:15:46,399
as

367
00:15:46,399 --> 00:15:49,360
originally intended so um

368
00:15:49,360 --> 00:15:50,800
maintain

369
00:15:50,800 --> 00:15:52,720
those bits to zero

370
00:15:52,720 --> 00:15:55,600
when forming the interface id

371
00:15:55,600 --> 00:15:59,120
or the other mode which was defined in

372
00:15:59,120 --> 00:16:01,920
the version 10 of the draft was to

373
00:16:01,920 --> 00:16:04,560
leave to the operators basically

374
00:16:04,560 --> 00:16:06,880
to use freely those two bits without

375
00:16:06,880 --> 00:16:08,959
taking care of

376
00:16:08,959 --> 00:16:11,519
let's say how the specification set them

377
00:16:11,519 --> 00:16:13,199
originally

378
00:16:13,199 --> 00:16:14,959
there are constraints

379
00:16:14,959 --> 00:16:17,600
so the operator has to be aware that in

380
00:16:17,600 --> 00:16:19,920
doing so it's very hard to move back

381
00:16:19,920 --> 00:16:21,120
from the

382
00:16:21,120 --> 00:16:23,759
64

383
00:16:23,759 --> 00:16:26,800
interface id back to the short form of

384
00:16:26,800 --> 00:16:28,000
the same

385
00:16:28,000 --> 00:16:29,440
interface

386
00:16:29,440 --> 00:16:32,880
of the same address

387
00:16:33,519 --> 00:16:34,880
as said

388
00:16:34,880 --> 00:16:37,360
that was the slide produced by the autos

389
00:16:37,360 --> 00:16:38,079
the

390
00:16:38,079 --> 00:16:40,399
uh the the last comment by benjamin

391
00:16:40,399 --> 00:16:43,040
let's say uh superseded the description

392
00:16:43,040 --> 00:16:44,720
provided in that slide

393
00:16:44,720 --> 00:16:48,240
so next one michael this

394
00:16:48,800 --> 00:16:51,519
then there was a comment uh

395
00:16:51,519 --> 00:16:53,759
received during the last call process

396
00:16:53,759 --> 00:16:54,880
was about

397
00:16:54,880 --> 00:16:56,000
the

398
00:16:56,000 --> 00:16:59,519
interface id entropy again uh originally

399
00:16:59,519 --> 00:17:02,480
that was not included in the draft but

400
00:17:02,480 --> 00:17:04,640
the latest versions

401
00:17:04,640 --> 00:17:07,520
let's say expanded a bit how this is

402
00:17:07,520 --> 00:17:08,640
let's say

403
00:17:08,640 --> 00:17:09,098
um

404
00:17:09,098 --> 00:17:10,720
[Music]

405
00:17:10,720 --> 00:17:12,640
provided in the draft

406
00:17:12,640 --> 00:17:13,760
uh

407
00:17:13,760 --> 00:17:16,559
basically the comment from dave

408
00:17:16,559 --> 00:17:19,599
was uh it is needed to explain

409
00:17:19,599 --> 00:17:22,400
to add let's say some components in the

410
00:17:22,400 --> 00:17:24,319
behavior of a

411
00:17:24,319 --> 00:17:28,640
of a plc network on how to deal with the

412
00:17:28,640 --> 00:17:31,120
uh generation of the

413
00:17:31,120 --> 00:17:33,520
addresses

414
00:17:33,520 --> 00:17:36,160
or add parameters such as the

415
00:17:36,160 --> 00:17:37,760
typical

416
00:17:37,760 --> 00:17:38,640
linked

417
00:17:38,640 --> 00:17:42,160
time frame or lifetime

418
00:17:42,160 --> 00:17:44,160
basically the authors introduced a new

419
00:17:44,160 --> 00:17:46,720
section so they expanded section 8 which

420
00:17:46,720 --> 00:17:49,840
is about security so they believe this

421
00:17:49,840 --> 00:17:52,480
issue is being fixed right now

422
00:17:52,480 --> 00:17:54,880
next like this

423
00:17:54,880 --> 00:17:56,559
and finally

424
00:17:56,559 --> 00:17:59,039
there was also discussed by roman about

425
00:17:59,039 --> 00:18:01,120
let's say security at the beginning the

426
00:18:01,120 --> 00:18:03,200
draft was not including

427
00:18:03,200 --> 00:18:06,000
let's say all the possible mechanisms to

428
00:18:06,000 --> 00:18:07,360
deal with the

429
00:18:07,360 --> 00:18:10,880
typical security issues

430
00:18:10,880 --> 00:18:13,039
in

431
00:18:13,200 --> 00:18:14,799
let's say talking with the authors they

432
00:18:14,799 --> 00:18:17,120
explained me that actually they tried to

433
00:18:17,120 --> 00:18:19,120
expand the base text so again they

434
00:18:19,120 --> 00:18:22,240
touched the section eight of the draft

435
00:18:22,240 --> 00:18:24,880
and also they pointed out that

436
00:18:24,880 --> 00:18:27,200
speaking of security is probably a much

437
00:18:27,200 --> 00:18:29,760
broader subject than just the dealing

438
00:18:29,760 --> 00:18:31,360
with the typical

439
00:18:31,360 --> 00:18:34,000
security aspects in a plc network so

440
00:18:34,000 --> 00:18:38,160
just at player two so their idea was to

441
00:18:38,160 --> 00:18:39,760
say expand

442
00:18:39,760 --> 00:18:42,400
the set of

443
00:18:42,400 --> 00:18:44,640
security mechanisms not just dealing

444
00:18:44,640 --> 00:18:46,240
with layer 2 for example payload

445
00:18:46,240 --> 00:18:49,120
encryption or let's say cross

446
00:18:49,120 --> 00:18:51,760
authentication from a device to the pan

447
00:18:51,760 --> 00:18:53,039
coordinator

448
00:18:53,039 --> 00:18:55,200
but at the

449
00:18:55,200 --> 00:18:57,200
other mechanisms

450
00:18:57,200 --> 00:18:59,679
at every possible layer of the stack

451
00:18:59,679 --> 00:19:01,520
including the application layer so

452
00:19:01,520 --> 00:19:04,160
basically they introduced

453
00:19:04,160 --> 00:19:06,799
a comment that you see here in the slide

454
00:19:06,799 --> 00:19:10,640
additional end-to-end security services

455
00:19:10,640 --> 00:19:12,080
that are

456
00:19:12,080 --> 00:19:14,880
probably active at every possible layer

457
00:19:14,880 --> 00:19:17,039
and they explain me that that is this is

458
00:19:17,039 --> 00:19:20,320
also let's say related to the uh user

459
00:19:20,320 --> 00:19:23,440
you make of the plc network and of the

460
00:19:23,440 --> 00:19:25,440
applications that actually the network

461
00:19:25,440 --> 00:19:28,160
is used for

462
00:19:28,160 --> 00:19:31,280
so that we can move to the final slide

463
00:19:31,280 --> 00:19:32,799
so

464
00:19:32,799 --> 00:19:34,240
again

465
00:19:34,240 --> 00:19:35,760
when prepared the presentation the

466
00:19:35,760 --> 00:19:38,559
authors clearly were not aware of the

467
00:19:38,559 --> 00:19:40,799
latest updates

468
00:19:40,799 --> 00:19:43,120
so the the main email is sent by

469
00:19:43,120 --> 00:19:45,600
benjamin yesterday

470
00:19:45,600 --> 00:19:48,400
they wanted to ask further feedback to

471
00:19:48,400 --> 00:19:50,559
the chairs whether

472
00:19:50,559 --> 00:19:52,640
it's possible to move on

473
00:19:52,640 --> 00:19:54,880
uh removing the discus

474
00:19:54,880 --> 00:19:58,559
and clearly um having the possibility of

475
00:19:58,559 --> 00:20:00,480
developing probably a couple of new

476
00:20:00,480 --> 00:20:03,039
versions just to address the remaining

477
00:20:03,039 --> 00:20:05,440
comments before entering the publication

478
00:20:05,440 --> 00:20:08,559
queue and i will say this is it i hope

479
00:20:08,559 --> 00:20:11,039
i've been clear enough

480
00:20:11,039 --> 00:20:13,120
uh in any case if there are questions

481
00:20:13,120 --> 00:20:14,880
you can ask me or

482
00:20:14,880 --> 00:20:16,880
clearly send to the mailing list

483
00:20:16,880 --> 00:20:20,039
thank you

484
00:20:20,640 --> 00:20:22,400
from the floor

485
00:20:22,400 --> 00:20:24,400
go in the queue

486
00:20:24,400 --> 00:20:27,360
anyone remotely

487
00:20:31,440 --> 00:20:34,480
well perhaps perhaps uh just

488
00:20:34,480 --> 00:20:38,000
the point that eric mentioned that

489
00:20:38,000 --> 00:20:39,919
the authors may want to

490
00:20:39,919 --> 00:20:42,400
consider the comments in the last email

491
00:20:42,400 --> 00:20:44,880
from benjamin and then

492
00:20:44,880 --> 00:20:47,760
probably the document can proceed

493
00:20:47,760 --> 00:20:50,158
further

494
00:20:57,520 --> 00:21:01,400
that certainly worked for me

495
00:21:06,480 --> 00:21:10,240
oh okay so if there's other comment then

496
00:21:10,240 --> 00:21:14,159
we can proceed to the next presentations

497
00:21:14,159 --> 00:21:18,880
thank you paulo and next is pascal on

498
00:21:18,880 --> 00:21:21,600
the set of four presentations on topics

499
00:21:21,600 --> 00:21:23,360
and documents related with labor

500
00:21:23,360 --> 00:21:25,520
discovery

501
00:21:25,520 --> 00:21:26,400
uh

502
00:21:26,400 --> 00:21:30,559
so pre-loaded shares slides for which

503
00:21:30,559 --> 00:21:34,399
ones you want her first pascal

504
00:21:34,880 --> 00:21:38,720
two-bath unicast look up

505
00:21:39,039 --> 00:21:41,520
that's what you would like

506
00:21:41,520 --> 00:21:44,720
no okay can you guess me

507
00:21:44,720 --> 00:21:46,400
do you want multicast

508
00:21:46,400 --> 00:21:48,240
is that what you want first those slides

509
00:21:48,240 --> 00:21:50,159
uh

510
00:21:50,159 --> 00:21:52,240
multicast is fine yes let's take them in

511
00:21:52,240 --> 00:21:54,880
order but i just want to to make sure

512
00:21:54,880 --> 00:21:56,320
that we have enough time for the last

513
00:21:56,320 --> 00:21:58,480
one so i'll be quick on on most of them

514
00:21:58,480 --> 00:22:00,960
just to make sure we have enough time on

515
00:22:00,960 --> 00:22:02,880
a prefix advertisement basically because

516
00:22:02,880 --> 00:22:03,919
that's where i would like to see

517
00:22:03,919 --> 00:22:06,799
discussions so yes marticus please

518
00:22:06,799 --> 00:22:09,440
multicast

519
00:22:10,720 --> 00:22:12,640
i can pull them myself if you want but

520
00:22:12,640 --> 00:22:13,440
just

521
00:22:13,440 --> 00:22:14,720
because now you have to give me the

522
00:22:14,720 --> 00:22:16,480
right control you should have the slide

523
00:22:16,480 --> 00:22:18,159
control now

524
00:22:18,159 --> 00:22:22,159
i i'm seeing it yes very nice

525
00:22:22,159 --> 00:22:24,320
many thanks michael so so this first

526
00:22:24,320 --> 00:22:26,240
line of introduction fits for pretty

527
00:22:26,240 --> 00:22:27,919
much the full presentation i'm gonna do

528
00:22:27,919 --> 00:22:28,720
so

529
00:22:28,720 --> 00:22:31,360
um just giving some history on the work

530
00:22:31,360 --> 00:22:33,679
we've done in this group on uh

531
00:22:33,679 --> 00:22:35,200
what we call six lopez neighbor

532
00:22:35,200 --> 00:22:37,360
discovery but we'll see that has grown a

533
00:22:37,360 --> 00:22:40,240
lot beyond six low pound but still we

534
00:22:40,240 --> 00:22:42,960
are we are the source of of this work

535
00:22:42,960 --> 00:22:45,919
and today i will be talking about um

536
00:22:45,919 --> 00:22:48,320
what what what we call unicast lookup

537
00:22:48,320 --> 00:22:50,799
which is basically converging a

538
00:22:50,799 --> 00:22:53,280
backbone network um

539
00:22:53,280 --> 00:22:56,240
for both traditional neighbor discovery

540
00:22:56,240 --> 00:22:57,280
and

541
00:22:57,280 --> 00:22:58,799
uh the the state for address the

542
00:22:58,799 --> 00:23:01,039
configuration from six open nd

543
00:23:01,039 --> 00:23:03,840
uh and sharing a six lbr basically to do

544
00:23:03,840 --> 00:23:06,000
unicast lookups so that's one draft

545
00:23:06,000 --> 00:23:07,679
we'll talk about today

546
00:23:07,679 --> 00:23:09,760
and and what i'm talking about now is

547
00:23:09,760 --> 00:23:12,720
the multi-gas registration so extending

548
00:23:12,720 --> 00:23:15,440
uh basically six lap and nd uh address

549
00:23:15,440 --> 00:23:18,159
registration options for any cast and

550
00:23:18,159 --> 00:23:21,159
multicast

551
00:23:23,520 --> 00:23:25,120
so um

552
00:23:25,120 --> 00:23:27,919
since last atf we've pumped a

553
00:23:27,919 --> 00:23:30,480
document version twice

554
00:23:30,480 --> 00:23:31,360
um

555
00:23:31,360 --> 00:23:34,000
one change was minor in terms of edition

556
00:23:34,000 --> 00:23:36,240
but it was important in the field is

557
00:23:36,240 --> 00:23:38,640
there was no discussion at all about all

558
00:23:38,640 --> 00:23:41,440
nodes multicast learning scope multicast

559
00:23:41,440 --> 00:23:42,320
group

560
00:23:42,320 --> 00:23:45,840
and effectively in ipv6 uh every host is

561
00:23:45,840 --> 00:23:48,400
implicitly in that group

562
00:23:48,400 --> 00:23:50,799
so just added some text to say well this

563
00:23:50,799 --> 00:23:54,960
is true too so if if the cxlr uh sees

564
00:23:54,960 --> 00:23:56,880
any uh

565
00:23:56,880 --> 00:23:58,559
traffic from a host

566
00:23:58,559 --> 00:23:59,360
uh

567
00:23:59,360 --> 00:24:01,840
registration from a host so it has the

568
00:24:01,840 --> 00:24:04,000
estilio of that also

569
00:24:04,000 --> 00:24:06,320
basically implicitly that host

570
00:24:06,320 --> 00:24:08,400
is a target if there is an ffo2 column

571
00:24:08,400 --> 00:24:11,200
column one packet

572
00:24:11,520 --> 00:24:14,880
we have refined how uh

573
00:24:14,880 --> 00:24:18,840
this address protection rfc

574
00:24:18,840 --> 00:24:20,400
8928

575
00:24:20,400 --> 00:24:23,120
is leveraged for uh registering address

576
00:24:23,120 --> 00:24:25,360
so we have more text on that

577
00:24:25,360 --> 00:24:27,200
and

578
00:24:27,200 --> 00:24:28,480
that's another draft i'll be talking

579
00:24:28,480 --> 00:24:31,320
about today but we are proposing

580
00:24:31,320 --> 00:24:34,480
a method to

581
00:24:34,480 --> 00:24:37,360
register ipv6 addresses

582
00:24:37,360 --> 00:24:38,960
to best

583
00:24:38,960 --> 00:24:41,520
so to bgp basically in the evpn

584
00:24:41,520 --> 00:24:42,720
environment

585
00:24:42,720 --> 00:24:44,720
so using using it 545 as the

586
00:24:44,720 --> 00:24:46,240
registration protocol to be

587
00:24:46,240 --> 00:24:49,120
redistributed into into a vpn

588
00:24:49,120 --> 00:24:51,520
and

589
00:24:51,679 --> 00:24:52,880
basically

590
00:24:52,880 --> 00:24:55,039
we would like to be able to to register

591
00:24:55,039 --> 00:24:56,159
not only

592
00:24:56,159 --> 00:24:58,000
unicast but also anycast and multicast

593
00:24:58,000 --> 00:25:01,600
so there's some text about that

594
00:25:01,600 --> 00:25:02,480
um

595
00:25:02,480 --> 00:25:04,880
since atf-112

596
00:25:04,880 --> 00:25:07,679
i'm sorry during atf 112 we've discussed

597
00:25:07,679 --> 00:25:10,480
uh any cast and backward compatibility

598
00:25:10,480 --> 00:25:12,960
so so

599
00:25:13,360 --> 00:25:15,679
that was published

600
00:25:15,679 --> 00:25:17,840
right during the atf session and maybe

601
00:25:17,840 --> 00:25:19,200
people have not seen it so i just want

602
00:25:19,200 --> 00:25:21,360
to insist that that was done

603
00:25:21,360 --> 00:25:24,400
and uh there was the the

604
00:25:24,400 --> 00:25:27,279
we needed a flag field in theater

605
00:25:27,279 --> 00:25:28,880
and we did not have one

606
00:25:28,880 --> 00:25:30,400
so we

607
00:25:30,400 --> 00:25:32,640
we repurposed the status of the request

608
00:25:32,640 --> 00:25:34,159
you know the status only valid in the

609
00:25:34,159 --> 00:25:35,200
response

610
00:25:35,200 --> 00:25:36,159
and so

611
00:25:36,159 --> 00:25:38,240
we we repurposed the status field which

612
00:25:38,240 --> 00:25:41,600
was basically reserved on on the uh head

613
00:25:41,600 --> 00:25:43,600
message to carry the flags and now we

614
00:25:43,600 --> 00:25:46,320
can carry the d-dart is for any caster

615
00:25:46,320 --> 00:25:47,760
multicast address

616
00:25:47,760 --> 00:25:50,559
so these are the recent changes since so

617
00:25:50,559 --> 00:25:52,799
on

618
00:25:52,799 --> 00:25:54,640
any question at this stage just

619
00:25:54,640 --> 00:25:57,360
interrupt me

620
00:25:57,360 --> 00:26:00,719
put your hand up in the queue

621
00:26:01,279 --> 00:26:02,799
so

622
00:26:02,799 --> 00:26:04,080
basically the question now for this

623
00:26:04,080 --> 00:26:05,440
group is um

624
00:26:05,440 --> 00:26:07,679
are we missing items is there some more

625
00:26:07,679 --> 00:26:10,799
work we want to do here because at some

626
00:26:10,799 --> 00:26:13,120
point we need to transfer the token to

627
00:26:13,120 --> 00:26:14,240
role

628
00:26:14,240 --> 00:26:16,080
i'm not saying we necessarily call or

629
00:26:16,080 --> 00:26:17,279
what but

630
00:26:17,279 --> 00:26:19,840
role is not yet really observing this

631
00:26:19,840 --> 00:26:20,880
document

632
00:26:20,880 --> 00:26:23,360
but it's the the main change that we do

633
00:26:23,360 --> 00:26:25,440
here is not read the you know the a and

634
00:26:25,440 --> 00:26:27,200
m bits in the registration to say any

635
00:26:27,200 --> 00:26:28,559
guest or multicast what's really

636
00:26:28,559 --> 00:26:29,840
important is

637
00:26:29,840 --> 00:26:31,919
how we change

638
00:26:31,919 --> 00:26:34,159
the basically the ripple underwear leaf

639
00:26:34,159 --> 00:26:37,520
work which is rsc 9010

640
00:26:37,520 --> 00:26:39,760
to expose those anycast and multicast

641
00:26:39,760 --> 00:26:41,600
addresses in ripple

642
00:26:41,600 --> 00:26:42,720
yield

643
00:26:42,720 --> 00:26:44,799
there is the introduction of a new mode

644
00:26:44,799 --> 00:26:47,200
of operation mode 5

645
00:26:47,200 --> 00:26:48,159
for

646
00:26:48,159 --> 00:26:51,679
non-storing mode multicast

647
00:26:51,679 --> 00:26:52,400
so

648
00:26:52,400 --> 00:26:54,559
for all those change we need role to

649
00:26:54,559 --> 00:26:56,960
take a good attention on this document

650
00:26:56,960 --> 00:26:57,679
so

651
00:26:57,679 --> 00:26:59,200
basically what i would like to get from

652
00:26:59,200 --> 00:27:01,679
this group is a green light say hey we

653
00:27:01,679 --> 00:27:03,600
are reasonably happy with with this we

654
00:27:03,600 --> 00:27:04,799
can still work on it but we are

655
00:27:04,799 --> 00:27:06,799
reasonably happy so we'd like to pass

656
00:27:06,799 --> 00:27:09,679
the token to roll

657
00:27:09,919 --> 00:27:12,080
so if you guys could comment on the list

658
00:27:12,080 --> 00:27:14,960
and and you know basically

659
00:27:14,960 --> 00:27:17,919
express comments like uh see it as an

660
00:27:17,919 --> 00:27:19,200
only one good place call from this group

661
00:27:19,200 --> 00:27:21,120
if you like but it's mostly

662
00:27:21,120 --> 00:27:23,279
passing the token on

663
00:27:23,279 --> 00:27:24,880
this afternoon we'll be talking about

664
00:27:24,880 --> 00:27:27,760
the patrol as well

665
00:27:28,480 --> 00:27:31,679
yes so thank you mascara so yeah there

666
00:27:31,679 --> 00:27:33,039
was some

667
00:27:33,039 --> 00:27:35,039
more discussion initially and it seems

668
00:27:35,039 --> 00:27:38,080
like now the document is getting stable

669
00:27:38,080 --> 00:27:40,480
perhaps it would be good if anyone would

670
00:27:40,480 --> 00:27:43,120
like to volunteer to review the draft at

671
00:27:43,120 --> 00:27:46,439
this stage

672
00:27:48,880 --> 00:27:50,960
not sure if anyone attending at the

673
00:27:50,960 --> 00:27:53,039
moment or maybe we can ask later on the

674
00:27:53,039 --> 00:27:54,240
mailing list

675
00:27:54,240 --> 00:27:56,000
it would be great yes

676
00:27:56,000 --> 00:27:58,159
and also you you if you remember this

677
00:27:58,159 --> 00:28:00,480
work was tiered actually by the way son

678
00:28:00,480 --> 00:28:02,799
association i mean that's

679
00:28:02,799 --> 00:28:05,279
why sun is is a group that standardizes

680
00:28:05,279 --> 00:28:07,760
uh technology for the smart grid

681
00:28:07,760 --> 00:28:09,919
based on repo and six japan

682
00:28:09,919 --> 00:28:12,480
and um i also asked them to publish a

683
00:28:12,480 --> 00:28:15,440
review on this list

684
00:28:15,440 --> 00:28:17,679
okay and that's that's it for this one

685
00:28:17,679 --> 00:28:20,000
uh michael do you want me to pull the

686
00:28:20,000 --> 00:28:22,559
next one i think i can

687
00:28:22,559 --> 00:28:25,440
sorry there is a question on the chat by

688
00:28:25,440 --> 00:28:27,440
kristen

689
00:28:27,440 --> 00:28:30,720
has anyone looked at how

690
00:28:30,720 --> 00:28:33,520
excuse my ignorance

691
00:28:33,520 --> 00:28:35,600
has anyone looked how this

692
00:28:35,600 --> 00:28:37,679
works with the multicast registration

693
00:28:37,679 --> 00:28:40,640
that is passed of the constraint cast

694
00:28:40,640 --> 00:28:43,200
document

695
00:28:43,200 --> 00:28:45,840
actually no

696
00:28:45,840 --> 00:28:47,039
and that would be a good thing to

697
00:28:47,039 --> 00:28:48,640
discuss actually

698
00:28:48,640 --> 00:28:49,600
i i

699
00:28:49,600 --> 00:28:52,480
i i i remember very well the constraint

700
00:28:52,480 --> 00:28:54,960
cast it's just that well that it existed

701
00:28:54,960 --> 00:28:55,760
and

702
00:28:55,760 --> 00:28:58,399
so but but no i've not i'm not dug into

703
00:28:58,399 --> 00:28:59,840
that do you want to

704
00:28:59,840 --> 00:29:01,360
we can work offline on that if you're

705
00:29:01,360 --> 00:29:04,240
interested yeah we probably should

706
00:29:04,240 --> 00:29:06,720
yeah we're welcome

707
00:29:06,720 --> 00:29:09,760
so any cast a unicast lookup

708
00:29:09,760 --> 00:29:12,760
so

709
00:29:13,840 --> 00:29:15,360
so then again same family some

710
00:29:15,360 --> 00:29:17,039
introduction

711
00:29:17,039 --> 00:29:18,000
um

712
00:29:18,000 --> 00:29:19,960
so basically with uh

713
00:29:19,960 --> 00:29:22,240
rfc8929 we we've got what we call the

714
00:29:22,240 --> 00:29:24,640
background router which is approximately

715
00:29:24,640 --> 00:29:27,440
function so you can register on the lln

716
00:29:27,440 --> 00:29:29,760
on the 6lowpan network two addresses and

717
00:29:29,760 --> 00:29:32,559
the 6br will do nd proxy for you on the

718
00:29:32,559 --> 00:29:35,360
backbone and that applies to classical

719
00:29:35,360 --> 00:29:37,840
154 that applies to that 11 that applies

720
00:29:37,840 --> 00:29:39,919
to many things but at the moment there

721
00:29:39,919 --> 00:29:42,799
was no real work on what happens if we

722
00:29:42,799 --> 00:29:44,080
want to

723
00:29:44,080 --> 00:29:46,240
to use the registration on the backbone

724
00:29:46,240 --> 00:29:47,840
side as well actually i tested it it

725
00:29:47,840 --> 00:29:51,200
works fine but um

726
00:29:51,200 --> 00:29:53,039
yeah we we probably need to to

727
00:29:53,039 --> 00:29:55,120
standardize it and the most important

728
00:29:55,120 --> 00:29:57,120
thing or interesting thing is

729
00:29:57,120 --> 00:29:58,720
if you want to to to move the

730
00:29:58,720 --> 00:30:00,320
registration to the backbone probably

731
00:30:00,320 --> 00:30:01,840
you want to move the 6lbr to the

732
00:30:01,840 --> 00:30:03,520
backbone

733
00:30:03,520 --> 00:30:05,840
now if you have a 6lbr on the backbone

734
00:30:05,840 --> 00:30:08,000
that kind of tells you that you can use

735
00:30:08,000 --> 00:30:10,080
it not only as a dad

736
00:30:10,080 --> 00:30:13,360
database but also for lookup

737
00:30:13,360 --> 00:30:16,080
and so what this this so so you avoid

738
00:30:16,080 --> 00:30:18,320
the broadcast or the bump as they call

739
00:30:18,320 --> 00:30:20,960
it you know broadcast uh unknown and

740
00:30:20,960 --> 00:30:23,279
multicast flows on the backbone if you

741
00:30:23,279 --> 00:30:24,480
can first

742
00:30:24,480 --> 00:30:26,559
ask the six lbr oh by the way do you

743
00:30:26,559 --> 00:30:29,120
have a registration for this address in

744
00:30:29,120 --> 00:30:30,720
which case i won't do the classical

745
00:30:30,720 --> 00:30:32,399
lookup of that

746
00:30:32,399 --> 00:30:34,240
so that's basically what this document

747
00:30:34,240 --> 00:30:36,799
says it proposes a way to place the 6lbr

748
00:30:36,799 --> 00:30:39,120
on the backbone and remember the 6lbr is

749
00:30:39,120 --> 00:30:40,640
very very abstract i'll come back to

750
00:30:40,640 --> 00:30:42,559
that on the evpn discussion

751
00:30:42,559 --> 00:30:44,960
but the the extracts 6lbr is now

752
00:30:44,960 --> 00:30:46,640
reachable for the backbone or even far

753
00:30:46,640 --> 00:30:48,240
far away on the internet because it's a

754
00:30:48,240 --> 00:30:49,679
global ip address

755
00:30:49,679 --> 00:30:50,880
and

756
00:30:50,880 --> 00:30:53,120
we can effectively pour

757
00:30:53,120 --> 00:30:55,360
uh it's it's database information not

758
00:30:55,360 --> 00:30:57,440
only for oh is this address duplicate

759
00:30:57,440 --> 00:30:59,519
but also what's the address resolution

760
00:30:59,519 --> 00:31:01,840
so what we really do in this draft is we

761
00:31:01,840 --> 00:31:04,640
we extend the the dardak exchange so we

762
00:31:04,640 --> 00:31:08,399
can provide the slave options

763
00:31:08,640 --> 00:31:10,320
and so

764
00:31:10,320 --> 00:31:13,840
this is still a personal submission

765
00:31:13,840 --> 00:31:17,279
it's been very very stable

766
00:31:17,279 --> 00:31:20,240
so we are in this situation of adopt or

767
00:31:20,240 --> 00:31:21,760
drop

768
00:31:21,760 --> 00:31:23,840
so uh do we care about

769
00:31:23,840 --> 00:31:25,679
publishing this work

770
00:31:25,679 --> 00:31:27,760
which basically says now you can have

771
00:31:27,760 --> 00:31:29,679
six lupine devices

772
00:31:29,679 --> 00:31:32,000
on the backbone sleeping etc because now

773
00:31:32,000 --> 00:31:34,799
you can benefit from the proxy for sleep

774
00:31:34,799 --> 00:31:36,480
proxy et cetera

775
00:31:36,480 --> 00:31:37,360
or

776
00:31:37,360 --> 00:31:39,760
do we want to keep six le pen at the

777
00:31:39,760 --> 00:31:41,519
edge on the other side of the backbone

778
00:31:41,519 --> 00:31:44,720
and outside of the background

779
00:31:45,120 --> 00:31:47,919
personally uh noah you know my side

780
00:31:47,919 --> 00:31:49,840
i want basically to converse the

781
00:31:49,840 --> 00:31:53,360
registration on the backbone but

782
00:31:55,519 --> 00:31:57,679
any feedback

783
00:31:57,679 --> 00:31:59,039
basically i would like to go for

784
00:31:59,039 --> 00:32:02,000
adoption i mean it won't move far beyond

785
00:32:02,000 --> 00:32:03,919
this if we don't adapt that so it's

786
00:32:03,919 --> 00:32:06,960
really adaptable like that

787
00:32:07,440 --> 00:32:10,640
yes so carsten is in the queue

788
00:32:10,640 --> 00:32:12,840
yeah so i was

789
00:32:12,840 --> 00:32:16,240
wondering given that we now do do six

790
00:32:16,240 --> 00:32:18,640
low pen signaling on the

791
00:32:18,640 --> 00:32:20,480
backbone side

792
00:32:20,480 --> 00:32:23,760
is that useful on the backbone for other

793
00:32:23,760 --> 00:32:25,679
nodes as well

794
00:32:25,679 --> 00:32:28,559
yeah i mean if everybody basically the

795
00:32:28,559 --> 00:32:30,159
more devices contribute to the

796
00:32:30,159 --> 00:32:33,120
registration on the backbone the last

797
00:32:33,120 --> 00:32:35,279
bump traffic broadcast uh unknown

798
00:32:35,279 --> 00:32:38,000
multicast you will get on the backbone

799
00:32:38,000 --> 00:32:40,000
because the draft will be more and more

800
00:32:40,000 --> 00:32:41,519
useful

801
00:32:41,519 --> 00:32:43,600
because the nodes will be able to to

802
00:32:43,600 --> 00:32:45,840
look up through the 6lvr and never again

803
00:32:45,840 --> 00:32:48,720
do a multicast

804
00:32:48,799 --> 00:32:51,679
so this is essentially a soft entry to

805
00:32:51,679 --> 00:32:54,559
efficient nd

806
00:32:54,559 --> 00:32:57,200
it is yeah it you can you can see it

807
00:32:57,200 --> 00:32:59,600
this way

808
00:32:59,840 --> 00:33:01,039
more efficient

809
00:33:01,039 --> 00:33:02,720
look at the graphics you know this work

810
00:33:02,720 --> 00:33:05,200
is the evolution of efficient nd i mean

811
00:33:05,200 --> 00:33:08,480
or it's all intel efficiently was always

812
00:33:08,480 --> 00:33:10,559
completely linked to this

813
00:33:10,559 --> 00:33:12,159
uh but we did not i don't think we

814
00:33:12,159 --> 00:33:14,559
really discussed of uh placing the 6 lbr

815
00:33:14,559 --> 00:33:16,080
on the backbone and doing any cast

816
00:33:16,080 --> 00:33:18,799
lookup no no we do but it was it was the

817
00:33:18,799 --> 00:33:20,320
obvious continuation of efficient

818
00:33:20,320 --> 00:33:21,600
individuality

819
00:33:21,600 --> 00:33:24,720
yeah so we certainly can do this work in

820
00:33:24,720 --> 00:33:26,640
the working group i just wanted to raise

821
00:33:26,640 --> 00:33:28,240
the question now it's

822
00:33:28,240 --> 00:33:31,600
not against adoption at all

823
00:33:31,679 --> 00:33:34,080
yeah and we actually started this

824
00:33:34,080 --> 00:33:36,240
document at six man

825
00:33:36,240 --> 00:33:38,720
and six man for anything you know

826
00:33:38,720 --> 00:33:40,559
related to six lap and nd

827
00:33:40,559 --> 00:33:43,519
i mean doesn't really care and so i

828
00:33:43,519 --> 00:33:45,440
presented it once or twice

829
00:33:45,440 --> 00:33:47,360
uh raised a few eyebrows and and that

830
00:33:47,360 --> 00:33:49,279
was it pretty much like efficient nd i

831
00:33:49,279 --> 00:33:51,279
mean you've seen the lack of interest to

832
00:33:51,279 --> 00:33:53,679
progress this work at six men six man is

833
00:33:53,679 --> 00:33:56,559
more maintenance as i see it

834
00:33:56,559 --> 00:33:58,080
and so

835
00:33:58,080 --> 00:33:59,440
look at the service six right they do

836
00:33:59,440 --> 00:34:01,200
the work in spring and sometime they

837
00:34:01,200 --> 00:34:03,279
when they they have something then to

838
00:34:03,279 --> 00:34:05,440
just get six men to validate that it's

839
00:34:05,440 --> 00:34:06,559
okay or

840
00:34:06,559 --> 00:34:08,399
changes change a little bit

841
00:34:08,399 --> 00:34:10,480
but here same thing we've done this work

842
00:34:10,480 --> 00:34:13,199
and six men will basically

843
00:34:13,199 --> 00:34:15,760
just say it's okay or not but

844
00:34:15,760 --> 00:34:17,599
it's it's it won't advance in six months

845
00:34:17,599 --> 00:34:21,520
they are not doing that sort of thing

846
00:34:21,520 --> 00:34:24,719
i tried it's been there

847
00:34:26,079 --> 00:34:28,000
okay

848
00:34:28,000 --> 00:34:29,679
so yes i mean i would like to see a

849
00:34:29,679 --> 00:34:31,359
discussion and option on the mailing

850
00:34:31,359 --> 00:34:33,119
list

851
00:34:33,119 --> 00:34:34,320
so the introduction to the next

852
00:34:34,320 --> 00:34:35,679
discussion is

853
00:34:35,679 --> 00:34:38,399
uh remember the 6lbr you might see it as

854
00:34:38,399 --> 00:34:41,440
say a server but in fact it's really

855
00:34:41,440 --> 00:34:42,879
really abstract

856
00:34:42,879 --> 00:34:44,918
if you look at

857
00:34:44,918 --> 00:34:47,839
8929 which is the background router

858
00:34:47,839 --> 00:34:51,918
the global six lbr is effectively

859
00:34:51,918 --> 00:34:54,639
uh the collection of all the and the

860
00:34:54,639 --> 00:34:57,520
information on all the six lbr the 6bbrs

861
00:34:57,520 --> 00:34:59,520
because all the backbone routers they

862
00:34:59,520 --> 00:35:02,480
they have a partial view of the the

863
00:35:02,480 --> 00:35:06,160
6lbr for their own local llm

864
00:35:06,160 --> 00:35:09,040
but the real 6lbr is the aggregation of

865
00:35:09,040 --> 00:35:10,320
all those views

866
00:35:10,320 --> 00:35:13,040
and the way uh this real

867
00:35:13,040 --> 00:35:16,400
6lbr distributed to 6bbr i'm sorry

868
00:35:16,400 --> 00:35:18,640
is red is by doing classical ending for

869
00:35:18,640 --> 00:35:21,920
the backbone or over the proxy function

870
00:35:21,920 --> 00:35:24,560
so it's not a centralized box at all

871
00:35:24,560 --> 00:35:26,240
it's really the collection of all the

872
00:35:26,240 --> 00:35:29,680
background routers together

873
00:35:29,680 --> 00:35:32,400
being read through nd that's what the

874
00:35:32,400 --> 00:35:34,079
macbook router does

875
00:35:34,079 --> 00:35:35,920
now can we move to the next slide where

876
00:35:35,920 --> 00:35:38,320
the evpn one

877
00:35:38,320 --> 00:35:40,160
let me show you another

878
00:35:40,160 --> 00:35:42,839
way of deploying s6

879
00:35:42,839 --> 00:35:47,040
lbr and in this case uh 6lbr would be

880
00:35:47,040 --> 00:35:49,839
literally bgp the all pgp network that

881
00:35:49,839 --> 00:35:52,799
serves the vpn

882
00:35:53,839 --> 00:35:56,400
okay michael yes i see them

883
00:35:56,400 --> 00:35:58,480
so

884
00:35:58,480 --> 00:36:00,640
please uh bear with me because this

885
00:36:00,640 --> 00:36:02,240
slide where was not done for this

886
00:36:02,240 --> 00:36:03,760
audience and just i'm just telling you

887
00:36:03,760 --> 00:36:05,839
that i presented it to them

888
00:36:05,839 --> 00:36:06,960
um

889
00:36:06,960 --> 00:36:08,720
the classical evpn world and the

890
00:36:08,720 --> 00:36:11,200
classical cloud world is really really

891
00:36:11,200 --> 00:36:12,480
ipv4

892
00:36:12,480 --> 00:36:13,520
they

893
00:36:13,520 --> 00:36:15,119
they understand

894
00:36:15,119 --> 00:36:17,440
people understand ipv6 but not in the

895
00:36:17,440 --> 00:36:19,280
same depth as people doing iot for

896
00:36:19,280 --> 00:36:20,160
instance

897
00:36:20,160 --> 00:36:23,440
right and and so sometimes and really in

898
00:36:23,440 --> 00:36:25,760
enterprise networks

899
00:36:25,760 --> 00:36:29,040
they mostly don't let slack at all and

900
00:36:29,040 --> 00:36:31,839
they work with the hcp v6 just the same

901
00:36:31,839 --> 00:36:34,240
way they work with v4 so it's kind of

902
00:36:34,240 --> 00:36:36,079
easy to forget

903
00:36:36,079 --> 00:36:37,119
that

904
00:36:37,119 --> 00:36:40,640
there is more to ipv6 than dhcp

905
00:36:40,640 --> 00:36:42,480
for the best for the better and the

906
00:36:42,480 --> 00:36:43,599
worse right

907
00:36:43,599 --> 00:36:46,079
so so basically i i was with this slide

908
00:36:46,079 --> 00:36:48,240
i was making the point that

909
00:36:48,240 --> 00:36:50,400
as long as you you use the hcp you've

910
00:36:50,400 --> 00:36:52,640
got this round trip between the client

911
00:36:52,640 --> 00:36:54,400
and the server that you can observe on

912
00:36:54,400 --> 00:36:56,480
the way so you can snoop

913
00:36:56,480 --> 00:36:59,200
the hcp reliably you can expect it one

914
00:36:59,200 --> 00:37:01,839
address per host or per interface you

915
00:37:01,839 --> 00:37:03,599
know it's going to come

916
00:37:03,599 --> 00:37:05,040
actually in our

917
00:37:05,040 --> 00:37:07,359
access points find that machine the

918
00:37:07,359 --> 00:37:10,000
access point association is up when we

919
00:37:10,000 --> 00:37:12,720
have seen the dhcp packet and when we

920
00:37:12,720 --> 00:37:15,520
know which ipv4 address this host has

921
00:37:15,520 --> 00:37:16,800
and effectively that's completely

922
00:37:16,800 --> 00:37:18,560
different from the ipv6 world where you

923
00:37:18,560 --> 00:37:20,880
will have multiple ipv6 addresses that

924
00:37:20,880 --> 00:37:22,560
will come and go

925
00:37:22,560 --> 00:37:23,920
so as long as it

926
00:37:23,920 --> 00:37:26,240
it's the hcp i mean you might be tempted

927
00:37:26,240 --> 00:37:28,160
to believe that v4 and v6 are the same

928
00:37:28,160 --> 00:37:29,520
but not

929
00:37:29,520 --> 00:37:32,640
and and for evpn in particular but also

930
00:37:32,640 --> 00:37:36,400
for wireless the aso is the sm

931
00:37:36,400 --> 00:37:37,760
in slack

932
00:37:37,760 --> 00:37:39,599
it's the stateless piece

933
00:37:39,599 --> 00:37:40,640
because

934
00:37:40,640 --> 00:37:43,119
the way slack is done

935
00:37:43,119 --> 00:37:46,400
cannot be deterministically observed

936
00:37:46,400 --> 00:37:48,720
it's just based on some broadcast dad

937
00:37:48,720 --> 00:37:51,839
and potentially some look up later

938
00:37:51,839 --> 00:37:54,160
you don't know for sure when the host

939
00:37:54,160 --> 00:37:56,640
forms an address when it stops using it

940
00:37:56,640 --> 00:37:58,400
there is absolutely no signal that this

941
00:37:58,400 --> 00:38:01,280
host will stop using this address

942
00:38:01,280 --> 00:38:03,680
and so you end up with

943
00:38:03,680 --> 00:38:06,240
addresses that you don't know exist

944
00:38:06,240 --> 00:38:08,720
and addresses that are no more

945
00:38:08,720 --> 00:38:09,920
used

946
00:38:09,920 --> 00:38:11,760
but you still maintain a state in the

947
00:38:11,760 --> 00:38:13,440
network for them

948
00:38:13,440 --> 00:38:14,880
slack was not

949
00:38:14,880 --> 00:38:16,320
at all defined

950
00:38:16,320 --> 00:38:19,040
for maintaining state in the network it

951
00:38:19,040 --> 00:38:19,760
was

952
00:38:19,760 --> 00:38:21,280
meant for maintaining caches in the

953
00:38:21,280 --> 00:38:22,800
network

954
00:38:22,800 --> 00:38:25,280
it's very very different because evpn

955
00:38:25,280 --> 00:38:28,560
needs a deterministic state that can be

956
00:38:28,560 --> 00:38:32,079
injected in bgp

957
00:38:32,079 --> 00:38:33,440
so using

958
00:38:33,440 --> 00:38:35,440
slack addresses and redistributing them

959
00:38:35,440 --> 00:38:37,119
snooping them and redistributing them in

960
00:38:37,119 --> 00:38:40,480
evpn needs to broadcast unknown and

961
00:38:40,480 --> 00:38:42,000
multicast traffic which is one thing

962
00:38:42,000 --> 00:38:44,160
they want to avoid so this next slide

963
00:38:44,160 --> 00:38:46,480
basically uh explains the kind of crimes

964
00:38:46,480 --> 00:38:47,839
we have with slack when we want to

965
00:38:47,839 --> 00:38:51,359
interwork with evpn

966
00:38:51,760 --> 00:38:53,760
it summarizes what they just said she

967
00:38:53,760 --> 00:38:55,680
wants to maintain this slide but i don't

968
00:38:55,680 --> 00:38:57,040
have so much time

969
00:38:57,040 --> 00:38:59,839
so so that was that was true with slack

970
00:38:59,839 --> 00:39:02,800
until until we made ipv6 and d state

971
00:39:02,800 --> 00:39:04,800
four and that's eight five four five uh

972
00:39:04,800 --> 00:39:06,400
seven sixty seven seventy five and five

973
00:39:06,400 --> 00:39:07,760
four five and nine i mean the whole

974
00:39:07,760 --> 00:39:09,200
series that i have shown on the first

975
00:39:09,200 --> 00:39:11,040
slide

976
00:39:11,040 --> 00:39:13,359
with this protocol we effectively

977
00:39:13,359 --> 00:39:14,560
synchronize

978
00:39:14,560 --> 00:39:16,560
the state about the address between the

979
00:39:16,560 --> 00:39:18,800
host and the network now we have a

980
00:39:18,800 --> 00:39:21,040
deterministic state that we can

981
00:39:21,040 --> 00:39:23,280
redistribute into routing

982
00:39:23,280 --> 00:39:26,240
and effectively 8545 carries address

983
00:39:26,240 --> 00:39:28,640
control semantics which help this

984
00:39:28,640 --> 00:39:30,960
redistribution in particular we

985
00:39:30,960 --> 00:39:32,640
negotiate the lifetime and that's

986
00:39:32,640 --> 00:39:35,359
generated from 67.75

987
00:39:35,359 --> 00:39:36,960
and we

988
00:39:36,960 --> 00:39:38,800
we have special signaling to say please

989
00:39:38,800 --> 00:39:41,599
redistribute my address so the router

990
00:39:41,599 --> 00:39:44,160
can inject the address

991
00:39:44,160 --> 00:39:47,359
in a proxy that's at nine to nine

992
00:39:47,359 --> 00:39:50,400
uh in ripple that's nine zero ten zero

993
00:39:50,400 --> 00:39:52,240
ten at ninety ten

994
00:39:52,240 --> 00:39:54,839
uh and in this in this case for

995
00:39:54,839 --> 00:39:57,599
dvpn and here in the cake we have a

996
00:39:57,599 --> 00:40:00,000
quite simple uh address protection

997
00:40:00,000 --> 00:40:01,200
mechanism

998
00:40:01,200 --> 00:40:03,599
which with eight nine two eight

999
00:40:03,599 --> 00:40:05,359
uh so we can do savvy and all those

1000
00:40:05,359 --> 00:40:06,240
games

1001
00:40:06,240 --> 00:40:08,960
we can bar traffic which is not sourced

1002
00:40:08,960 --> 00:40:10,960
by the user who effectively registered

1003
00:40:10,960 --> 00:40:12,160
that address

1004
00:40:12,160 --> 00:40:13,760
on the first stop switch or first

1005
00:40:13,760 --> 00:40:16,240
operator

1006
00:40:16,240 --> 00:40:18,400
so basically it is the the draft that i

1007
00:40:18,400 --> 00:40:20,160
presented to bess and i'm trying to get

1008
00:40:20,160 --> 00:40:21,359
it adapted

1009
00:40:21,359 --> 00:40:25,480
is explain how you will redistribute

1010
00:40:25,480 --> 00:40:28,000
rfc8505 and 928

1011
00:40:28,000 --> 00:40:29,359
in evpn

1012
00:40:29,359 --> 00:40:31,599
and if you look at it that effectively

1013
00:40:31,599 --> 00:40:34,400
makes the bgp tables that are

1014
00:40:34,400 --> 00:40:37,680
synchronized in every every node

1015
00:40:37,680 --> 00:40:39,280
v6 lbr

1016
00:40:39,280 --> 00:40:42,079
because if vpn basically advertises uh

1017
00:40:42,079 --> 00:40:44,079
routes type 2 which really are

1018
00:40:44,079 --> 00:40:46,480
combination of ip and mac and type 5

1019
00:40:46,480 --> 00:40:48,319
which will be the ip

1020
00:40:48,319 --> 00:40:51,599
and and what we do is we we extend

1021
00:40:51,599 --> 00:40:54,160
uh the support that was already there

1022
00:40:54,160 --> 00:40:56,160
for um

1023
00:40:56,160 --> 00:40:57,839
basically

1024
00:40:57,839 --> 00:41:00,319
and the uh ip690 there was there was a

1025
00:41:00,319 --> 00:41:02,800
beginning lpv6nd in there there is no c

1026
00:41:02,800 --> 00:41:05,760
for that and so we extend that signaling

1027
00:41:05,760 --> 00:41:07,839
and and we also we

1028
00:41:07,839 --> 00:41:11,119
we effectively uh have two different

1029
00:41:11,119 --> 00:41:12,880
uh fields that we update because we need

1030
00:41:12,880 --> 00:41:14,880
a number of flags and and we need to

1031
00:41:14,880 --> 00:41:16,319
expose the lifetime we need to expose

1032
00:41:16,319 --> 00:41:18,800
the rover so how we do that

1033
00:41:18,800 --> 00:41:21,520
is is explained in this document

1034
00:41:21,520 --> 00:41:23,599
the bottom line is now we can provide a

1035
00:41:23,599 --> 00:41:25,040
secured

1036
00:41:25,040 --> 00:41:26,640
uh address and that's why you have

1037
00:41:26,640 --> 00:41:28,560
secured the titles because eight nine

1038
00:41:28,560 --> 00:41:30,480
two eight to nine and eight nine to

1039
00:41:30,480 --> 00:41:32,079
eight information is effectively

1040
00:41:32,079 --> 00:41:35,760
injected in bgp and so bgp can can block

1041
00:41:35,760 --> 00:41:37,440
a host which would like to steal on the

1042
00:41:37,440 --> 00:41:40,720
trust to impersonate over a vpn

1043
00:41:40,720 --> 00:41:43,280
so so benefits are really pro address

1044
00:41:43,280 --> 00:41:46,960
protection and deterministic state

1045
00:41:46,960 --> 00:41:49,520
and that's illustrated here

1046
00:41:49,520 --> 00:41:51,520
and i won't spend more time on this

1047
00:41:51,520 --> 00:41:52,480
slide

1048
00:41:52,480 --> 00:41:54,079
so i will just

1049
00:41:54,079 --> 00:41:57,040
there is any question a question well uh

1050
00:41:57,040 --> 00:41:59,200
eric is in the queue

1051
00:41:59,200 --> 00:42:02,200
sorry

1052
00:42:04,720 --> 00:42:07,040
so um

1053
00:42:07,040 --> 00:42:08,880
so when people do this with ipv4

1054
00:42:08,880 --> 00:42:12,000
presumably they can know when addresses

1055
00:42:12,000 --> 00:42:13,359
are no longer being used the

1056
00:42:13,359 --> 00:42:15,359
unregistered part right by setting a

1057
00:42:15,359 --> 00:42:18,400
lease at an hour or 24 hours or whatever

1058
00:42:18,400 --> 00:42:21,440
yeah i don't know

1059
00:42:21,440 --> 00:42:23,119
yeah well

1060
00:42:23,119 --> 00:42:24,880
if something moves and the lease is 24

1061
00:42:24,880 --> 00:42:26,000
hours they won't know they've

1062
00:42:26,000 --> 00:42:29,440
disappeared for 24 hours but

1063
00:42:31,599 --> 00:42:34,240
but but but do we have in the in the set

1064
00:42:34,240 --> 00:42:35,760
of things we have with the registration

1065
00:42:35,760 --> 00:42:37,040
i don't remember

1066
00:42:37,040 --> 00:42:39,200
do we have enough sort of resolution

1067
00:42:39,200 --> 00:42:41,440
there in terms of things disappearing

1068
00:42:41,440 --> 00:42:44,319
being unregistered in terms of timers or

1069
00:42:44,319 --> 00:42:45,599
we we have a lifetime in the

1070
00:42:45,599 --> 00:42:46,960
registration

1071
00:42:46,960 --> 00:42:51,119
and uh what's neat with uh 6 75 is is

1072
00:42:51,119 --> 00:42:53,280
the host proposes a lifetime and the

1073
00:42:53,280 --> 00:42:55,359
router confirms that or modifies that

1074
00:42:55,359 --> 00:42:56,880
like reduces it

1075
00:42:56,880 --> 00:42:59,599
so we we can effectively uh we register

1076
00:42:59,599 --> 00:43:01,359
with a lifetime yes we do

1077
00:43:01,359 --> 00:43:03,200
now the resolution is whatever we can

1078
00:43:03,200 --> 00:43:04,880
signal i don't remember exactly it's two

1079
00:43:04,880 --> 00:43:07,760
bytes uh i i don't know about the unit

1080
00:43:07,760 --> 00:43:10,400
uh it's probably seconds

1081
00:43:10,400 --> 00:43:13,200
yeah okay so yeah that's good because

1082
00:43:13,200 --> 00:43:15,280
otherwise people will later discover

1083
00:43:15,280 --> 00:43:16,880
that hey we need to unregister better

1084
00:43:16,880 --> 00:43:19,040
but we have what we need so well you

1085
00:43:19,040 --> 00:43:21,520
have both right you can normally the the

1086
00:43:21,520 --> 00:43:22,960
draft should

1087
00:43:22,960 --> 00:43:25,440
uh if you stop using address there is a

1088
00:43:25,440 --> 00:43:27,520
shirt you know something like uh

1089
00:43:27,520 --> 00:43:29,200
register it with a lifetime zero which

1090
00:43:29,200 --> 00:43:31,119
means unregister

1091
00:43:31,119 --> 00:43:32,720
now if you don't then the lifetime will

1092
00:43:32,720 --> 00:43:34,880
time out

1093
00:43:34,880 --> 00:43:36,400
the other thing is there is there is

1094
00:43:36,400 --> 00:43:38,319
text which says that your registration

1095
00:43:38,319 --> 00:43:39,839
should map your intention with this

1096
00:43:39,839 --> 00:43:41,599
address like if you are if you have the

1097
00:43:41,599 --> 00:43:43,359
intention to use it long term use a long

1098
00:43:43,359 --> 00:43:45,680
lifetime if you have if you use it like

1099
00:43:45,680 --> 00:43:47,280
just a very temporary address use a

1100
00:43:47,280 --> 00:43:49,200
short lifetime now it's under the

1101
00:43:49,200 --> 00:43:51,119
appreciation of the stack to decide what

1102
00:43:51,119 --> 00:43:54,480
kind of lifetime it will ask

1103
00:43:54,480 --> 00:43:57,200
so we have a lot more uh control

1104
00:43:57,200 --> 00:43:59,520
actually

1105
00:44:02,079 --> 00:44:03,760
and we have the rover which will allow

1106
00:44:03,760 --> 00:44:06,000
to ensure that it's the rightful owner

1107
00:44:06,000 --> 00:44:08,079
because the duid in the http can be

1108
00:44:08,079 --> 00:44:10,720
impersonated

1109
00:44:12,400 --> 00:44:14,079
okay and last slide please and that's

1110
00:44:14,079 --> 00:44:16,800
the one i wanted to insist the most

1111
00:44:16,800 --> 00:44:18,720
how much time do i have

1112
00:44:18,720 --> 00:44:19,599
left

1113
00:44:19,599 --> 00:44:21,839
please cheers

1114
00:44:21,839 --> 00:44:24,000
in theory uh according to the agenda

1115
00:44:24,000 --> 00:44:25,760
that would be like 16 minutes although

1116
00:44:25,760 --> 00:44:28,560
we also have additional time since we

1117
00:44:28,560 --> 00:44:30,880
have like 20 minutes of flex time for

1118
00:44:30,880 --> 00:44:32,800
the whole session

1119
00:44:32,800 --> 00:44:34,160
okay that's neat

1120
00:44:34,160 --> 00:44:34,960
okay

1121
00:44:34,960 --> 00:44:37,359
so same first slide you know

1122
00:44:37,359 --> 00:44:38,480
uh

1123
00:44:38,480 --> 00:44:40,560
the the big family

1124
00:44:40,560 --> 00:44:43,280
that this group has developed

1125
00:44:43,280 --> 00:44:45,440
so so

1126
00:44:45,440 --> 00:44:47,920
i i you know i've been working on on

1127
00:44:47,920 --> 00:44:50,160
cloud usage of of what we did in this

1128
00:44:50,160 --> 00:44:52,400
group

1129
00:44:52,400 --> 00:44:54,640
don't be too surprised with the vpn

1130
00:44:54,640 --> 00:44:56,240
uh but

1131
00:44:56,240 --> 00:44:57,920
the next thing that happens in cloud

1132
00:44:57,920 --> 00:44:59,200
environment and you will realize it

1133
00:44:59,200 --> 00:45:01,280
happens in iot environments as well is

1134
00:45:01,280 --> 00:45:02,720
at some point you want to give this

1135
00:45:02,720 --> 00:45:05,520
device not just a

1136
00:45:05,520 --> 00:45:07,200
an address but you want to give it a

1137
00:45:07,200 --> 00:45:08,720
prefix

1138
00:45:08,720 --> 00:45:11,440
and and the kind of usage is in the

1139
00:45:11,440 --> 00:45:13,680
cloud it's you've got a

1140
00:45:13,680 --> 00:45:15,760
virtual router in your host system in

1141
00:45:15,760 --> 00:45:18,079
your in your server like something like

1142
00:45:18,079 --> 00:45:19,680
calico and and

1143
00:45:19,680 --> 00:45:21,359
basically you want the devops to be able

1144
00:45:21,359 --> 00:45:22,880
to manage not only addresses but

1145
00:45:22,880 --> 00:45:24,079
prefixes

1146
00:45:24,079 --> 00:45:26,640
and so the devops would would configure

1147
00:45:26,640 --> 00:45:28,880
prefixes on their systems and what you

1148
00:45:28,880 --> 00:45:31,280
want is the system to advertise that to

1149
00:45:31,280 --> 00:45:32,960
whatever routine you have in the cloud

1150
00:45:32,960 --> 00:45:35,200
in a fashion that's completely agnostic

1151
00:45:35,200 --> 00:45:36,480
to the routing in the cloud so you can

1152
00:45:36,480 --> 00:45:38,160
do your rift you can do bgp you can do

1153
00:45:38,160 --> 00:45:41,440
whatever and for addresses h505 is fine

1154
00:45:41,440 --> 00:45:43,440
for that purpose because it's nd it's

1155
00:45:43,440 --> 00:45:44,880
completely agnostic to the routing

1156
00:45:44,880 --> 00:45:47,440
protocol in which you redistribute

1157
00:45:47,440 --> 00:45:49,119
but we do that only for addresses we

1158
00:45:49,119 --> 00:45:51,440
don't do that for prefixes

1159
00:45:51,440 --> 00:45:53,599
now

1160
00:45:53,920 --> 00:45:56,319
redistributing is not something new at

1161
00:45:56,319 --> 00:45:59,680
all we we do it with a repo with the

1162
00:45:59,680 --> 00:46:01,839
ripple of nowhere work

1163
00:46:01,839 --> 00:46:05,359
um in this case the 6lm uh registers no

1164
00:46:05,359 --> 00:46:07,280
trust with the arbitrate

1165
00:46:07,280 --> 00:46:10,319
and the the ripple first stop ripple

1166
00:46:10,319 --> 00:46:12,800
aware router will effectively react to

1167
00:46:12,800 --> 00:46:15,040
the air flag and injected ripple

1168
00:46:15,040 --> 00:46:17,680
the same flag is used in eight nine two

1169
00:46:17,680 --> 00:46:20,240
two eight two nine i'm sorry uh by the

1170
00:46:20,240 --> 00:46:22,160
bible router to to decide whether or not

1171
00:46:22,160 --> 00:46:24,800
to proxy and that flag is is also

1172
00:46:24,800 --> 00:46:27,280
leveraged in the best work

1173
00:46:27,280 --> 00:46:29,520
so what we are looking at is

1174
00:46:29,520 --> 00:46:31,920
uh not something new redistribution but

1175
00:46:31,920 --> 00:46:35,760
reducing prefixes are supposed to host

1176
00:46:35,760 --> 00:46:38,880
and this is a

1177
00:46:38,960 --> 00:46:42,400
quick quick view on how how that happens

1178
00:46:42,400 --> 00:46:45,280
so this is the traditional ripple uh

1179
00:46:45,280 --> 00:46:47,760
non-storing mode so each node will have

1180
00:46:47,760 --> 00:46:50,000
an address in the same prefix

1181
00:46:50,000 --> 00:46:52,720
and uh basically the nodes send a

1182
00:46:52,720 --> 00:46:55,040
non-storing model like this red packet

1183
00:46:55,040 --> 00:46:58,480
the root and and the root can

1184
00:46:58,480 --> 00:47:00,720
construct the source rod path

1185
00:47:00,720 --> 00:47:03,839
back which is the ac via a b which is

1186
00:47:03,839 --> 00:47:05,440
connected

1187
00:47:05,440 --> 00:47:07,440
now with the

1188
00:47:07,440 --> 00:47:09,760
ripple and where leaf what you do is

1189
00:47:09,760 --> 00:47:11,520
you've got this host

1190
00:47:11,520 --> 00:47:13,760
uh which which

1191
00:47:13,760 --> 00:47:16,160
for which we'll see an array from c from

1192
00:47:16,160 --> 00:47:17,280
router c

1193
00:47:17,280 --> 00:47:20,240
auto conf address a column column l for

1194
00:47:20,240 --> 00:47:21,359
uh

1195
00:47:21,359 --> 00:47:22,559
power node

1196
00:47:22,559 --> 00:47:23,680
and

1197
00:47:23,680 --> 00:47:26,000
basically it will be the node c that

1198
00:47:26,000 --> 00:47:27,440
will advertise

1199
00:47:27,440 --> 00:47:30,559
uh l as a non-storing now on the alpha

1200
00:47:30,559 --> 00:47:32,480
so what happens between a column column

1201
00:47:32,480 --> 00:47:34,400
l and a column column c is purely five

1202
00:47:34,400 --> 00:47:37,040
four five l is completely agnostic and

1203
00:47:37,040 --> 00:47:39,359
aware that it's repo and the address is

1204
00:47:39,359 --> 00:47:41,680
injecting the writing and and the note

1205
00:47:41,680 --> 00:47:44,240
can be served

1206
00:47:44,240 --> 00:47:46,319
so so the question again is yeah we can

1207
00:47:46,319 --> 00:47:47,760
do that for addresses but what about

1208
00:47:47,760 --> 00:47:50,839
prefixes i mean does that make any sense

1209
00:47:50,839 --> 00:47:53,119
and actually there are a number of use

1210
00:47:53,119 --> 00:47:55,040
cases where it does make sense and the

1211
00:47:55,040 --> 00:47:57,599
broad category is a stub network it's a

1212
00:47:57,599 --> 00:48:00,000
network this is either inside the node

1213
00:48:00,000 --> 00:48:02,319
what we call a networking node or a

1214
00:48:02,319 --> 00:48:04,880
recursive networking but there is a node

1215
00:48:04,880 --> 00:48:06,400
is a network for the next level of

1216
00:48:06,400 --> 00:48:08,400
recursion

1217
00:48:08,400 --> 00:48:10,079
or

1218
00:48:10,079 --> 00:48:13,119
a private network a virtual network

1219
00:48:13,119 --> 00:48:14,400
that would be

1220
00:48:14,400 --> 00:48:15,920
bandaged for instance by communities or

1221
00:48:15,920 --> 00:48:18,400
something

1222
00:48:18,559 --> 00:48:20,400
you could also have a net function and a

1223
00:48:20,400 --> 00:48:22,880
private real that's really uh

1224
00:48:22,880 --> 00:48:25,520
what you would do in communities but

1225
00:48:25,520 --> 00:48:28,000
you can also uh connect

1226
00:48:28,000 --> 00:48:30,480
through reaper or any network a smaller

1227
00:48:30,480 --> 00:48:32,240
network of private

1228
00:48:32,240 --> 00:48:33,440
uh

1229
00:48:33,440 --> 00:48:35,200
iot devices without really knowing what

1230
00:48:35,200 --> 00:48:37,119
kind of routing takes place there what

1231
00:48:37,119 --> 00:48:39,680
you want is is just be able to signal

1232
00:48:39,680 --> 00:48:41,200
through the same simple registration we

1233
00:48:41,200 --> 00:48:44,640
have with h505 hey this device which

1234
00:48:44,640 --> 00:48:48,319
does something different from ripple um

1235
00:48:48,319 --> 00:48:50,640
effectively owns this this

1236
00:48:50,640 --> 00:48:53,599
private room or something

1237
00:48:53,599 --> 00:48:55,680
so yes as long as it's a stub as long as

1238
00:48:55,680 --> 00:48:57,839
it's reachable only via these devices or

1239
00:48:57,839 --> 00:49:00,880
those two devices which work together

1240
00:49:00,880 --> 00:49:02,559
it makes perfect sense to expose not

1241
00:49:02,559 --> 00:49:06,240
only a host address but a prefix

1242
00:49:06,400 --> 00:49:08,400
in ripple and that was there forever i

1243
00:49:08,400 --> 00:49:11,200
mean exposing a prefix on repo which is

1244
00:49:11,200 --> 00:49:13,680
exemplified here

1245
00:49:13,680 --> 00:49:15,359
this is a typical structure that triple

1246
00:49:15,359 --> 00:49:16,559
could build

1247
00:49:16,559 --> 00:49:20,720
so each node abcd get a prefix abcd and

1248
00:49:20,720 --> 00:49:23,040
if c connects to b then it will form a

1249
00:49:23,040 --> 00:49:27,520
prefix an address of this prefix

1250
00:49:27,520 --> 00:49:30,160
and then you can expose the the same

1251
00:49:30,160 --> 00:49:32,800
sequence of uh source route

1252
00:49:32,800 --> 00:49:34,640
information again and and it's gonna

1253
00:49:34,640 --> 00:49:37,040
work fine because in repo what what b

1254
00:49:37,040 --> 00:49:40,720
will expose is b column column flash 64.

1255
00:49:40,720 --> 00:49:42,559
as opposed to host it will just expose a

1256
00:49:42,559 --> 00:49:45,359
prefix and repo is built for that so so

1257
00:49:45,359 --> 00:49:47,760
each node has a prefix each node forms

1258
00:49:47,760 --> 00:49:49,440
addresses from its parents

1259
00:49:49,440 --> 00:49:50,720
and you're all set that works for

1260
00:49:50,720 --> 00:49:53,599
storing mode and storing mode everything

1261
00:49:53,599 --> 00:49:55,920
now if we wanted to do the exact same

1262
00:49:55,920 --> 00:49:56,800
thing

1263
00:49:56,800 --> 00:49:59,760
for a ripple unaware

1264
00:49:59,760 --> 00:50:02,079
writers now we don't have it we we don't

1265
00:50:02,079 --> 00:50:05,200
have a way to for not l to effectively

1266
00:50:05,200 --> 00:50:06,240
say oh

1267
00:50:06,240 --> 00:50:07,760
everything in the alcohol i'm constantly

1268
00:50:07,760 --> 00:50:10,640
64 is mine

1269
00:50:11,119 --> 00:50:13,440
uh l would have to talk ripple and if

1270
00:50:13,440 --> 00:50:16,640
it's cvpn l we would have to talk evpn

1271
00:50:16,640 --> 00:50:18,480
the very cool thing about that 505 is

1272
00:50:18,480 --> 00:50:20,000
completely diagnostic to what routing

1273
00:50:20,000 --> 00:50:22,079
protocol l is doing or what environment

1274
00:50:22,079 --> 00:50:24,160
it does like if it's inside the server

1275
00:50:24,160 --> 00:50:28,079
versus what goes in the ripple network

1276
00:50:28,079 --> 00:50:30,079
so what what we're after here is is

1277
00:50:30,079 --> 00:50:32,400
really a simple way for a stub

1278
00:50:32,400 --> 00:50:34,160
to say hey i'm a stab please give me the

1279
00:50:34,160 --> 00:50:35,599
package but i don't know what your

1280
00:50:35,599 --> 00:50:38,319
routing protocol is

1281
00:50:38,319 --> 00:50:41,280
and uh i think was yesterday at six man

1282
00:50:41,280 --> 00:50:43,359
um

1283
00:50:43,359 --> 00:50:45,760
there was a question a use case that was

1284
00:50:45,760 --> 00:50:48,800
quite interesting uh where there was a

1285
00:50:48,800 --> 00:50:49,599
uh

1286
00:50:49,599 --> 00:50:51,839
a unique local uh prefix which was that

1287
00:50:51,839 --> 00:50:53,119
which was owned

1288
00:50:53,119 --> 00:50:54,880
by a router which was somewhere on the

1289
00:50:54,880 --> 00:50:56,160
home network

1290
00:50:56,160 --> 00:50:58,800
if that guy had used this registration

1291
00:50:58,800 --> 00:51:01,040
to talk to the home gateway problem

1292
00:51:01,040 --> 00:51:02,000
guard

1293
00:51:02,000 --> 00:51:04,079
packets would reach the home gateway com

1294
00:51:04,079 --> 00:51:05,599
gateway would find the registration for

1295
00:51:05,599 --> 00:51:07,680
the una prefix route

1296
00:51:07,680 --> 00:51:09,599
end of the story

1297
00:51:09,599 --> 00:51:12,640
but we we we don't have this simple nd

1298
00:51:12,640 --> 00:51:15,440
extension now remember jen at some point

1299
00:51:15,440 --> 00:51:18,000
talked uh to the group and say hey uh we

1300
00:51:18,000 --> 00:51:20,720
are not listening to arrays this ula

1301
00:51:20,720 --> 00:51:22,720
router would have advertised arrays but

1302
00:51:22,720 --> 00:51:24,400
then the home gateway does not listen to

1303
00:51:24,400 --> 00:51:26,000
arrays so we lose the information that's

1304
00:51:26,000 --> 00:51:28,160
why we have the problem well in this

1305
00:51:28,160 --> 00:51:30,559
case we use rs effectively to register

1306
00:51:30,559 --> 00:51:31,839
so it's just like

1307
00:51:31,839 --> 00:51:33,680
ns for for host

1308
00:51:33,680 --> 00:51:36,480
that naturally would migrate it to rs i

1309
00:51:36,480 --> 00:51:38,480
guess but that's the group to decide

1310
00:51:38,480 --> 00:51:40,160
in this case effectively the home

1311
00:51:40,160 --> 00:51:41,839
gateway would listen to the rs with the

1312
00:51:41,839 --> 00:51:43,839
address registration option or something

1313
00:51:43,839 --> 00:51:46,240
prefix registration option and it will

1314
00:51:46,240 --> 00:51:48,079
effectively know in a fashion which is

1315
00:51:48,079 --> 00:51:50,240
completely independent of what routing

1316
00:51:50,240 --> 00:51:52,400
takes place outside the home network or

1317
00:51:52,400 --> 00:51:54,400
even within the home network

1318
00:51:54,400 --> 00:51:56,480
it will know that there is this router

1319
00:51:56,480 --> 00:51:58,640
which holds that step and which is

1320
00:51:58,640 --> 00:52:01,200
connected and effectively it still works

1321
00:52:01,200 --> 00:52:03,280
if the step itself is

1322
00:52:03,280 --> 00:52:05,760
a different subnet on the same

1323
00:52:05,760 --> 00:52:07,680
multi-step net link

1324
00:52:07,680 --> 00:52:09,920
this is very traditional shared link

1325
00:52:09,920 --> 00:52:12,400
existed since the early times of ipv4

1326
00:52:12,400 --> 00:52:14,880
where you have a same wire if you like

1327
00:52:14,880 --> 00:52:18,160
where multiple subnets are deployed this

1328
00:52:18,160 --> 00:52:20,319
just happens that the home gateway would

1329
00:52:20,319 --> 00:52:22,079
pass the packet to the router which did

1330
00:52:22,079 --> 00:52:24,160
the registration which would then inject

1331
00:52:24,160 --> 00:52:26,240
on the link whether the link is the same

1332
00:52:26,240 --> 00:52:27,920
as the home link or different link

1333
00:52:27,920 --> 00:52:29,599
doesn't matter it works it would work

1334
00:52:29,599 --> 00:52:32,000
anyway

1335
00:52:32,000 --> 00:52:34,559
so yes yes yes we we we would register

1336
00:52:34,559 --> 00:52:37,040
prefixes but hey uh when we register

1337
00:52:37,040 --> 00:52:38,400
addresses we have this thing which is

1338
00:52:38,400 --> 00:52:40,319
quite useful which is that right we want

1339
00:52:40,319 --> 00:52:44,400
to ensure that uh a given prefix is a

1340
00:52:44,400 --> 00:52:46,480
given address is not a duplicate so we

1341
00:52:46,480 --> 00:52:48,240
would need to do that right

1342
00:52:48,240 --> 00:52:50,800
uh yeah yeah we would effectively mostly

1343
00:52:50,800 --> 00:52:52,800
if we want the devops to configure

1344
00:52:52,800 --> 00:52:55,520
prefixes on their devices without asking

1345
00:52:55,520 --> 00:52:57,359
too much just picking something in a

1346
00:52:57,359 --> 00:52:59,440
larger aggregation here you have the

1347
00:52:59,440 --> 00:53:00,720
risk of

1348
00:53:00,720 --> 00:53:03,119
duplicate or is it free duplicate no

1349
00:53:03,119 --> 00:53:04,640
it's not i mean it could be an exact

1350
00:53:04,640 --> 00:53:06,720
duplicate for prefix but it could could

1351
00:53:06,720 --> 00:53:08,720
also be something which deals with an

1352
00:53:08,720 --> 00:53:11,280
aggregation like i'm i'm stealing a

1353
00:53:11,280 --> 00:53:12,720
prefix from an aggregation that is

1354
00:53:12,720 --> 00:53:15,520
already registered by somebody else

1355
00:53:15,520 --> 00:53:16,240
so

1356
00:53:16,240 --> 00:53:18,800
basically yes we would need to do that

1357
00:53:18,800 --> 00:53:19,680
again

1358
00:53:19,680 --> 00:53:22,079
but we would need to consider not just

1359
00:53:22,079 --> 00:53:24,319
exact match but also aggregation

1360
00:53:24,319 --> 00:53:28,400
like some prefixes could be exposed as

1361
00:53:28,400 --> 00:53:31,119
being prefixes from which you can uh

1362
00:53:31,119 --> 00:53:33,440
steal a sub prefix

1363
00:53:33,440 --> 00:53:37,359
and some of those would basically not be

1364
00:53:37,359 --> 00:53:40,640
proposed that way so if if you register

1365
00:53:40,640 --> 00:53:43,280
for instance a prefix within the prefix

1366
00:53:43,280 --> 00:53:44,800
and you have the right to do that then

1367
00:53:44,800 --> 00:53:47,040
you get it if somebody wants to register

1368
00:53:47,040 --> 00:53:48,960
the same you won't

1369
00:53:48,960 --> 00:53:51,280
uh be able to do it because you own it

1370
00:53:51,280 --> 00:53:53,359
uh unless you say any case something but

1371
00:53:53,359 --> 00:53:55,200
then if somebody wants to dig into your

1372
00:53:55,200 --> 00:53:57,359
own prefix if you did not allow for that

1373
00:53:57,359 --> 00:53:59,599
you will be rejected as well right so so

1374
00:53:59,599 --> 00:54:01,920
you have to consider aggregation as part

1375
00:54:01,920 --> 00:54:03,920
of the dot but otherwise yes the very

1376
00:54:03,920 --> 00:54:05,760
cool thing is you can do auto allocation

1377
00:54:05,760 --> 00:54:08,480
you can do prefix at a goal for this and

1378
00:54:08,480 --> 00:54:10,960
then the traditional that method

1379
00:54:10,960 --> 00:54:13,520
i started to understand aggregation

1380
00:54:13,520 --> 00:54:16,800
would would do the trick for us

1381
00:54:17,040 --> 00:54:19,760
so the proposed way i've not written the

1382
00:54:19,760 --> 00:54:21,520
draft yet i just want to you know i

1383
00:54:21,520 --> 00:54:23,280
don't want to waste too much time unless

1384
00:54:23,280 --> 00:54:24,800
people are interested

1385
00:54:24,800 --> 00:54:26,800
uh but

1386
00:54:26,800 --> 00:54:29,040
for me the obvious way is to do with rs

1387
00:54:29,040 --> 00:54:32,000
what we do we did with ns and do a stub

1388
00:54:32,000 --> 00:54:33,520
registration option now insist on the

1389
00:54:33,520 --> 00:54:35,920
factory stub right because with that we

1390
00:54:35,920 --> 00:54:37,760
don't have it's not a routing protocol

1391
00:54:37,760 --> 00:54:40,480
it's still indeed we are just

1392
00:54:40,480 --> 00:54:42,480
advertising rich ability but we are not

1393
00:54:42,480 --> 00:54:44,240
addressing cost etc we are not

1394
00:54:44,240 --> 00:54:45,760
participating into the writing protocol

1395
00:54:45,760 --> 00:54:48,240
very important distinction

1396
00:54:48,240 --> 00:54:50,400
and so we just say hey i have this

1397
00:54:50,400 --> 00:54:54,079
prefix and i want you to to to is yes

1398
00:54:54,079 --> 00:54:55,760
that is that to inject it in your own

1399
00:54:55,760 --> 00:54:57,760
routing and give me the packets back

1400
00:54:57,760 --> 00:54:59,119
please

1401
00:54:59,119 --> 00:55:01,040
and since it's a tab it won't be a loop

1402
00:55:01,040 --> 00:55:03,280
it won't be anything so that's why i

1403
00:55:03,280 --> 00:55:06,079
suggested this stub registration option

1404
00:55:06,079 --> 00:55:07,599
name

1405
00:55:07,599 --> 00:55:09,680
and then in this example i have a cloud

1406
00:55:09,680 --> 00:55:10,960
fabric

1407
00:55:10,960 --> 00:55:12,640
and i have this this

1408
00:55:12,640 --> 00:55:15,760
server down below attached to two leaves

1409
00:55:15,760 --> 00:55:17,200
l1 and l2

1410
00:55:17,200 --> 00:55:19,359
and it would basically send the rs to l1

1411
00:55:19,359 --> 00:55:20,799
and l2 saying i'm registering this

1412
00:55:20,799 --> 00:55:23,280
prefix and then i want l1 and l2 the two

1413
00:55:23,280 --> 00:55:24,720
leaves could effectively inject it in

1414
00:55:24,720 --> 00:55:25,760
bgp

1415
00:55:25,760 --> 00:55:28,079
uh evpn or

1416
00:55:28,079 --> 00:55:30,480
rift or whatever else you want to run

1417
00:55:30,480 --> 00:55:31,599
there

1418
00:55:31,599 --> 00:55:33,359
and the same obviously would work for

1419
00:55:33,359 --> 00:55:35,359
repo

1420
00:55:35,359 --> 00:55:37,280
so there is uh

1421
00:55:37,280 --> 00:55:38,559
and michael

1422
00:55:38,559 --> 00:55:39,920
waiting in the queue

1423
00:55:39,920 --> 00:55:42,240
oh i'm sorry i did i had scrolled down

1424
00:55:42,240 --> 00:55:44,240
and i did not see the queue oh now i

1425
00:55:44,240 --> 00:55:45,920
scrolled up and i see you both sorry

1426
00:55:45,920 --> 00:55:48,480
sorry sorry um it's my fault uh it's

1427
00:55:48,480 --> 00:55:50,000
just the scrolling thing i mean the

1428
00:55:50,000 --> 00:55:52,079
queue does not show when you scroll down

1429
00:55:52,079 --> 00:55:53,760
something for me to go guys if you could

1430
00:55:53,760 --> 00:55:55,520
make sure that the queue shows outside

1431
00:55:55,520 --> 00:55:57,839
of of the list of participants

1432
00:55:57,839 --> 00:56:00,559
uh is always at the top that would be

1433
00:56:00,559 --> 00:56:02,640
very useful i just just made that

1434
00:56:02,640 --> 00:56:05,040
mistake okay

1435
00:56:05,040 --> 00:56:07,040
no problem

1436
00:56:07,040 --> 00:56:08,559
you're first

1437
00:56:08,559 --> 00:56:11,200
uh hey pascal could you reiterate or

1438
00:56:11,200 --> 00:56:13,520
summarize on the use case how this fits

1439
00:56:13,520 --> 00:56:15,839
into the sixth law charter uh i'm not

1440
00:56:15,839 --> 00:56:19,200
very sure if uh kubernetes carrico all

1441
00:56:19,200 --> 00:56:21,040
this is understood constrained

1442
00:56:21,040 --> 00:56:22,400
environment

1443
00:56:22,400 --> 00:56:26,079
we are so abstract um uh it fits it fits

1444
00:56:26,079 --> 00:56:28,400
as long as you have uh uh for instance

1445
00:56:28,400 --> 00:56:30,559
if you have an iot network instead of

1446
00:56:30,559 --> 00:56:33,359
this server down there it's just a a

1447
00:56:33,359 --> 00:56:37,040
plain existing iot network which is uh

1448
00:56:37,040 --> 00:56:40,079
v4 for instance i mean a lot of them are

1449
00:56:40,079 --> 00:56:42,960
not ip at all but you want to map each

1450
00:56:42,960 --> 00:56:45,680
device to an ip address just map like a

1451
00:56:45,680 --> 00:56:47,680
net function that would

1452
00:56:47,680 --> 00:56:49,839
map a mac to an ip

1453
00:56:49,839 --> 00:56:52,319
then you can expose effectively every

1454
00:56:52,319 --> 00:56:55,119
device on that slash p

1455
00:56:55,119 --> 00:56:57,119
to the ripple network so if you see

1456
00:56:57,119 --> 00:56:58,880
that's why i picked on my example before

1457
00:56:58,880 --> 00:56:59,920
on repo

1458
00:56:59,920 --> 00:57:02,160
um effectively ripple has the model

1459
00:57:02,160 --> 00:57:03,839
already for uh

1460
00:57:03,839 --> 00:57:07,040
for lens where each of the routers owns

1461
00:57:07,040 --> 00:57:08,960
a prefix

1462
00:57:08,960 --> 00:57:11,200
it's there i mean it's always been there

1463
00:57:11,200 --> 00:57:12,720
um so

1464
00:57:12,720 --> 00:57:15,040
this can happen if the router c is

1465
00:57:15,040 --> 00:57:16,720
effectively the gateway

1466
00:57:16,720 --> 00:57:17,520
to

1467
00:57:17,520 --> 00:57:19,680
to an ipv6 network

1468
00:57:19,680 --> 00:57:20,640
uh

1469
00:57:20,640 --> 00:57:24,559
which which has the prefix b

1470
00:57:24,559 --> 00:57:27,359
but it it could also be something else

1471
00:57:27,359 --> 00:57:29,760
and and that we could

1472
00:57:29,760 --> 00:57:31,040
not necessarily

1473
00:57:31,040 --> 00:57:33,040
um

1474
00:57:33,040 --> 00:57:35,040
how can i say this yeah it could be

1475
00:57:35,040 --> 00:57:37,280
anything it's there what what does not

1476
00:57:37,280 --> 00:57:40,079
exist is the capability to connect a

1477
00:57:40,079 --> 00:57:41,359
gateway

1478
00:57:41,359 --> 00:57:44,480
which does not speak uh ripple

1479
00:57:44,480 --> 00:57:46,799
so yeah i'm sorry for that so the use

1480
00:57:46,799 --> 00:57:49,280
the thing that exists today is this the

1481
00:57:49,280 --> 00:57:51,599
thing that does not exist today is this

1482
00:57:51,599 --> 00:57:53,599
where you take this iot gateway which

1483
00:57:53,599 --> 00:57:56,480
has a number of devices below it

1484
00:57:56,480 --> 00:57:59,200
and which wants to map the devices in in

1485
00:57:59,200 --> 00:58:01,520
that group of devices

1486
00:58:01,520 --> 00:58:05,760
to an ip7 that can be injected in repo

1487
00:58:05,760 --> 00:58:08,240
and you don't want to have to sort of

1488
00:58:08,240 --> 00:58:10,640
another routing protocol

1489
00:58:10,640 --> 00:58:12,640
yeah it's completely abstract now we we

1490
00:58:12,640 --> 00:58:15,359
basically say what's good with 6lowpan

1491
00:58:15,359 --> 00:58:16,799
what's good with nd it's completely

1492
00:58:16,799 --> 00:58:18,960
abstract writing protocols you can you

1493
00:58:18,960 --> 00:58:20,960
can advertise the prefix to say hey

1494
00:58:20,960 --> 00:58:24,400
reachable but you cannot give a cost or

1495
00:58:24,400 --> 00:58:25,599
something like that you're not a routing

1496
00:58:25,599 --> 00:58:27,760
protocol but at least if you have a stub

1497
00:58:27,760 --> 00:58:30,559
you you should be able to announce it

1498
00:58:30,559 --> 00:58:32,880
and like michael said regardless of what

1499
00:58:32,880 --> 00:58:35,119
frauding takes place over so i take the

1500
00:58:35,119 --> 00:58:36,880
example of a cloud or i take the example

1501
00:58:36,880 --> 00:58:38,640
of repo it really doesn't matter we're

1502
00:58:38,640 --> 00:58:40,319
completely agnostic

1503
00:58:40,319 --> 00:58:42,000
actually that's the value of doing it in

1504
00:58:42,000 --> 00:58:42,960
nd

1505
00:58:42,960 --> 00:58:45,440
but in this case yes if you yeah so this

1506
00:58:45,440 --> 00:58:49,040
is this is uh this enables 6lrs and lbrs

1507
00:58:49,040 --> 00:58:51,119
to advertise prefixes that will be in

1508
00:58:51,119 --> 00:58:55,359
turn delegated or mapped to the uh

1509
00:58:55,359 --> 00:58:58,880
constraint nodes um

1510
00:58:59,440 --> 00:59:00,880
yeah there is a gateway which

1511
00:59:00,880 --> 00:59:03,040
self-transferring nodes and we want to

1512
00:59:03,040 --> 00:59:04,960
be completely agnostic of what it does

1513
00:59:04,960 --> 00:59:06,960
maybe it does not even do ip

1514
00:59:06,960 --> 00:59:08,559
but we want to be able to

1515
00:59:08,559 --> 00:59:10,559
to talk to every device in there so we

1516
00:59:10,559 --> 00:59:13,440
want to give them each an ip address and

1517
00:59:13,440 --> 00:59:15,040
the simple way for that is that the

1518
00:59:15,040 --> 00:59:17,680
gateway has an ip address all of them

1519
00:59:17,680 --> 00:59:21,440
whether it's really the uh a prefix um

1520
00:59:21,440 --> 00:59:23,760
that is distributed to the devices or

1521
00:59:23,760 --> 00:59:25,680
it's just mapping that that is done at

1522
00:59:25,680 --> 00:59:28,240
the gateway but at least we want to go

1523
00:59:28,240 --> 00:59:30,319
through the gateway to talk to every

1524
00:59:30,319 --> 00:59:34,160
modbus device and

1525
00:59:34,160 --> 00:59:35,760
for that we want the gateway to own the

1526
00:59:35,760 --> 00:59:38,079
prefix now either the gateway speaks

1527
00:59:38,079 --> 00:59:39,280
repo

1528
00:59:39,280 --> 00:59:40,319
or

1529
00:59:40,319 --> 00:59:44,160
we extended 545 to say hey the gateway

1530
00:59:44,160 --> 00:59:46,400
is open nd but gents we can ex you can

1531
00:59:46,400 --> 00:59:48,079
expose the stub as opposed to just

1532
00:59:48,079 --> 00:59:50,960
address so what i really want to do is

1533
00:59:50,960 --> 00:59:52,720
what we did

1534
00:59:52,720 --> 00:59:56,400
here and made sense for a single device

1535
00:59:56,400 --> 00:59:58,720
i want to make sure we can also

1536
00:59:58,720 --> 01:00:01,520
do it here when the device is actually a

1537
01:00:01,520 --> 01:00:04,720
gateway to more devices

1538
01:00:06,400 --> 01:00:08,000
thank you

1539
01:00:08,000 --> 01:00:09,440
yes michael

1540
01:00:09,440 --> 01:00:12,480
um so i wanted to say that um anima's

1541
01:00:12,480 --> 01:00:14,400
acp

1542
01:00:14,400 --> 01:00:18,480
is already injecting um

1543
01:00:19,280 --> 01:00:23,920
prefixes into ripple into the acp ripple

1544
01:00:23,920 --> 01:00:25,920
but that this actually would be very

1545
01:00:25,920 --> 01:00:28,160
interesting because it would mean that

1546
01:00:28,160 --> 01:00:30,480
in for instance the the knock which

1547
01:00:30,480 --> 01:00:31,680
might not

1548
01:00:31,680 --> 01:00:35,040
uh which might run the acp as a native

1549
01:00:35,040 --> 01:00:37,599
network rather than a overlay

1550
01:00:37,599 --> 01:00:39,040
that that would actually permit us to

1551
01:00:39,040 --> 01:00:41,119
have some structure in the knock

1552
01:00:41,119 --> 01:00:43,359
i think that would be very valuable

1553
01:00:43,359 --> 01:00:44,480
um

1554
01:00:44,480 --> 01:00:45,920
and uh

1555
01:00:45,920 --> 01:00:48,880
um you know uh i think that would be a

1556
01:00:48,880 --> 01:00:50,640
so i think this is a kind of a useful

1557
01:00:50,640 --> 01:00:53,119
very useful thing to anima this this

1558
01:00:53,119 --> 01:00:54,839
extended uh

1559
01:00:54,839 --> 01:00:58,160
um prefix allocation

1560
01:00:58,160 --> 01:01:00,240
um and i just wanted to say actually in

1561
01:01:00,240 --> 01:01:02,240
response to uh schwester's question to

1562
01:01:02,240 --> 01:01:03,839
you about charter

1563
01:01:03,839 --> 01:01:05,599
it might very well be that this work

1564
01:01:05,599 --> 01:01:07,440
does not belong with six low but this is

1565
01:01:07,440 --> 01:01:09,119
essentially i think that we need to be

1566
01:01:09,119 --> 01:01:10,400
aware of this because this is

1567
01:01:10,400 --> 01:01:12,960
essentially an evolution of 8505 which

1568
01:01:12,960 --> 01:01:14,400
is our document

1569
01:01:14,400 --> 01:01:17,520
uh in other other working groups right

1570
01:01:17,520 --> 01:01:19,920
so i think that's a relevance to to this

1571
01:01:19,920 --> 01:01:21,520
working group is that our

1572
01:01:21,520 --> 01:01:24,880
uh we wish to have our uh our children

1573
01:01:24,880 --> 01:01:29,119
uh go forth and be fruitful right

1574
01:01:30,079 --> 01:01:31,920
yeah i agree with that but then we don't

1575
01:01:31,920 --> 01:01:34,000
have a working group to push that well

1576
01:01:34,000 --> 01:01:36,400
well i don't know if if it's not six low

1577
01:01:36,400 --> 01:01:38,000
i don't know where it is but the point

1578
01:01:38,000 --> 01:01:40,559
is that it is based on our document so

1579
01:01:40,559 --> 01:01:42,319
um interesting i completely agree with

1580
01:01:42,319 --> 01:01:45,200
you michael but i hope i hope more and

1581
01:01:45,200 --> 01:01:46,319
just

1582
01:01:46,319 --> 01:01:48,240
interest i really hope that we develop

1583
01:01:48,240 --> 01:01:49,760
that here because that's where we have

1584
01:01:49,760 --> 01:01:53,200
the skills right

1585
01:01:53,200 --> 01:01:56,720
so yes my argument is is effectively uh

1586
01:01:56,720 --> 01:01:58,720
this l node

1587
01:01:58,720 --> 01:02:00,720
could be an iot gateway we have many

1588
01:02:00,720 --> 01:02:03,520
many cases of gateway in industrial

1589
01:02:03,520 --> 01:02:05,680
and uh where you have all sorts of

1590
01:02:05,680 --> 01:02:08,000
industrial protocols uh i think they're

1591
01:02:08,000 --> 01:02:09,680
on the dressing scheme

1592
01:02:09,680 --> 01:02:12,000
and uh basically what we'd like is to be

1593
01:02:12,000 --> 01:02:15,039
able to have the gateway map every uh

1594
01:02:15,039 --> 01:02:18,720
address in its network to ipv6 and then

1595
01:02:18,720 --> 01:02:21,039
inject that in the routing regardless of

1596
01:02:21,039 --> 01:02:23,359
what protocol runs in the router

1597
01:02:23,359 --> 01:02:25,520
so in that case it's pure ll and it's

1598
01:02:25,520 --> 01:02:27,839
it's pure iot

1599
01:02:27,839 --> 01:02:30,319
now it's obviously it's not what i'm

1600
01:02:30,319 --> 01:02:32,880
telling is just not limited to iot i

1601
01:02:32,880 --> 01:02:35,039
mean it would it would have solved the

1602
01:02:35,039 --> 01:02:37,520
problem that we saw yesterday ethics man

1603
01:02:37,520 --> 01:02:41,038
just by a snap of the fingers

1604
01:02:43,920 --> 01:02:46,640
and it's what came to it will

1605
01:02:46,640 --> 01:02:49,039
naturally say oh too bad the array is

1606
01:02:49,039 --> 01:02:51,839
not right by the home gateway well no

1607
01:02:51,839 --> 01:02:55,359
they already know but yes

1608
01:02:56,480 --> 01:02:58,960
okay there's also a question on the chat

1609
01:02:58,960 --> 01:03:01,599
by carsten i think it was little with

1610
01:03:01,599 --> 01:03:03,359
the last slide that you were presenting

1611
01:03:03,359 --> 01:03:05,520
before the question

1612
01:03:05,520 --> 01:03:07,039
yeah i'm i'm

1613
01:03:07,039 --> 01:03:09,599
like the student who at the end of a

1614
01:03:09,599 --> 01:03:10,720
talk

1615
01:03:10,720 --> 01:03:12,880
that explains how to build

1616
01:03:12,880 --> 01:03:15,680
computers out of transistors asks what

1617
01:03:15,680 --> 01:03:18,559
is the transistor

1618
01:03:18,559 --> 01:03:20,720
the

1619
01:03:20,960 --> 01:03:22,799
prefix b

1620
01:03:22,799 --> 01:03:27,359
is related in what way to the prefix a

1621
01:03:27,359 --> 01:03:29,680
uh okay so it's not that picture i'm

1622
01:03:29,680 --> 01:03:32,559
sorry let me bring back the picture

1623
01:03:32,559 --> 01:03:34,319
so in this case there is absolutely no

1624
01:03:34,319 --> 01:03:36,400
relation between a and b

1625
01:03:36,400 --> 01:03:38,480
it could be two different cars

1626
01:03:38,480 --> 01:03:40,079
uh served by two different service

1627
01:03:40,079 --> 01:03:41,440
providers

1628
01:03:41,440 --> 01:03:43,280
it's just and then you build the money

1629
01:03:43,280 --> 01:03:46,160
of cars and that still works

1630
01:03:46,160 --> 01:03:48,240
so no there is no ex no relation there

1631
01:03:48,240 --> 01:03:50,400
can be other can be not right you don't

1632
01:03:50,400 --> 01:03:53,359
really care it's just that when the car

1633
01:03:53,359 --> 01:03:55,200
say hey the car

1634
01:03:55,200 --> 01:03:56,960
and you have an iot network inside that

1635
01:03:56,960 --> 01:04:00,160
car all the the the the

1636
01:04:00,160 --> 01:04:03,280
units that you can find in the car um

1637
01:04:03,280 --> 01:04:05,039
that is served through wi-fi then the

1638
01:04:05,039 --> 01:04:07,119
car as basically is exposing alcohol and

1639
01:04:07,119 --> 01:04:10,079
column a column column 64 right and if

1640
01:04:10,079 --> 01:04:12,000
if you want to build a network of cars

1641
01:04:12,000 --> 01:04:14,640
then basically you expose that in arrays

1642
01:04:14,640 --> 01:04:18,079
in a clear and then car b can join that

1643
01:04:18,079 --> 01:04:20,000
and effectively if you do that you want

1644
01:04:20,000 --> 01:04:22,160
some privacy both in a

1645
01:04:22,160 --> 01:04:24,640
as a prefix you want to kind of take it

1646
01:04:24,640 --> 01:04:27,200
from a temporary una

1647
01:04:27,200 --> 01:04:31,200
just for visitors and uh b should use a

1648
01:04:31,200 --> 01:04:33,440
suffix b in this case

1649
01:04:33,440 --> 01:04:35,680
uh for a column column b which also

1650
01:04:35,680 --> 01:04:38,559
would be uh anonymous but the bottom

1651
01:04:38,559 --> 01:04:40,880
line is you can effectively uh have b

1652
01:04:40,880 --> 01:04:43,520
connect to a by forming the transmitter

1653
01:04:43,520 --> 01:04:45,039
based on a

1654
01:04:45,039 --> 01:04:46,480
uh arrays

1655
01:04:46,480 --> 01:04:49,039
and recursively you do that and you do

1656
01:04:49,039 --> 01:04:50,640
report between them

1657
01:04:50,640 --> 01:04:52,240
and guess what you form a network that

1658
01:04:52,240 --> 01:04:54,799
reaches the outside of a parking lot or

1659
01:04:54,799 --> 01:04:58,079
connects mna together

1660
01:05:02,400 --> 01:05:03,920
actually this is this is how we

1661
01:05:03,920 --> 01:05:06,000
experimented with ripple like 20 years

1662
01:05:06,000 --> 01:05:07,599
ago before

1663
01:05:07,599 --> 01:05:09,440
anything the wrong group was proposed or

1664
01:05:09,440 --> 01:05:11,119
anything we are doing that with cars we

1665
01:05:11,119 --> 01:05:14,720
are building exactly what you see here

1666
01:05:14,880 --> 01:05:19,039
and this drawing is kind of old

1667
01:05:21,680 --> 01:05:23,760
it was tested by nasa by the way at glen

1668
01:05:23,760 --> 01:05:25,359
center

1669
01:05:25,359 --> 01:05:27,200
they were streaming video cross cars to

1670
01:05:27,200 --> 01:05:27,920
us

1671
01:05:27,920 --> 01:05:30,799
as they were driving

1672
01:05:31,359 --> 01:05:35,078
ooh solo too

1673
01:05:37,440 --> 01:05:39,280
okay so

1674
01:05:39,280 --> 01:05:41,440
nothing much more just uh this is

1675
01:05:41,440 --> 01:05:43,039
slightly made for the evpn people but

1676
01:05:43,039 --> 01:05:45,520
basically you see you would see how it

1677
01:05:45,520 --> 01:05:46,559
could happen

1678
01:05:46,559 --> 01:05:47,920
uh

1679
01:05:47,920 --> 01:05:50,640
in in the vpn case but yeah

1680
01:05:50,640 --> 01:05:52,880
then again it's completely agnostic to

1681
01:05:52,880 --> 01:05:56,160
the writing protocol that you would run

1682
01:05:56,160 --> 01:05:57,200
um

1683
01:05:57,200 --> 01:05:59,520
if we get a little bit gorier on

1684
01:05:59,520 --> 01:06:01,119
what we'd like

1685
01:06:01,119 --> 01:06:02,000
so

1686
01:06:02,000 --> 01:06:04,960
the main change is to to advertise tabs

1687
01:06:04,960 --> 01:06:08,079
stop prefixes are supposed to host

1688
01:06:08,079 --> 01:06:10,400
um

1689
01:06:10,480 --> 01:06:13,839
you can effectively advertise slash 96

1690
01:06:13,839 --> 01:06:17,119
if you want to to expose a private ipv4

1691
01:06:17,119 --> 01:06:19,280
a domain like you would do for for

1692
01:06:19,280 --> 01:06:20,960
communities

1693
01:06:20,960 --> 01:06:23,760
um you can you can you we could if we

1694
01:06:23,760 --> 01:06:26,079
work on this draft uh add more

1695
01:06:26,079 --> 01:06:28,480
information about policies and echoes so

1696
01:06:28,480 --> 01:06:30,400
if you want to have access countries etc

1697
01:06:30,400 --> 01:06:31,839
they have the right to do this i claim

1698
01:06:31,839 --> 01:06:33,520
the right to do that

1699
01:06:33,520 --> 01:06:35,520
for this prefix then then that could be

1700
01:06:35,520 --> 01:06:37,839
signaled

1701
01:06:37,839 --> 01:06:39,119
the other thing that could be signal

1702
01:06:39,119 --> 01:06:41,520
these metrics to influence not routing

1703
01:06:41,520 --> 01:06:43,760
then again we don't do routing but to

1704
01:06:43,760 --> 01:06:45,359
influence load balancing

1705
01:06:45,359 --> 01:06:47,599
like if you have a ripple network or an

1706
01:06:47,599 --> 01:06:51,839
evpn network a factory class fabric

1707
01:06:51,839 --> 01:06:54,000
there is a lot of load balancing taking

1708
01:06:54,000 --> 01:06:55,200
place

1709
01:06:55,200 --> 01:06:56,319
um

1710
01:06:56,319 --> 01:06:58,240
it's not right it's just load balancing

1711
01:06:58,240 --> 01:07:01,920
and the question is if i have multiple

1712
01:07:01,920 --> 01:07:03,920
of those gateways serving the same

1713
01:07:03,920 --> 01:07:06,079
network it might be that you want the

1714
01:07:06,079 --> 01:07:08,079
weight to be unevenly distributed

1715
01:07:08,079 --> 01:07:09,680
between those guys and so you could

1716
01:07:09,680 --> 01:07:11,520
effectively uh

1717
01:07:11,520 --> 01:07:15,359
advertise information about that

1718
01:07:15,359 --> 01:07:16,160
uh

1719
01:07:16,160 --> 01:07:17,920
and then all sorts of things which could

1720
01:07:17,920 --> 01:07:21,200
be placed for v4 like like donut id vrf

1721
01:07:21,200 --> 01:07:23,039
etc

1722
01:07:23,039 --> 01:07:25,359
i i need to say because um this is an

1723
01:07:25,359 --> 01:07:27,839
itf meeting blah there is some ipr on

1724
01:07:27,839 --> 01:07:30,079
all these games right so we have found

1725
01:07:30,079 --> 01:07:31,920
some ipr on explaining all those

1726
01:07:31,920 --> 01:07:34,960
different things could happen

1727
01:07:37,200 --> 01:07:39,359
and so basically that's what i'm looking

1728
01:07:39,359 --> 01:07:41,280
for is is a discussion on this list and

1729
01:07:41,280 --> 01:07:43,039
i have i had the point by shweta is

1730
01:07:43,039 --> 01:07:45,280
that's this fit charter i think it does

1731
01:07:45,280 --> 01:07:47,839
it's certainly not limited to iot

1732
01:07:47,839 --> 01:07:48,640
uh

1733
01:07:48,640 --> 01:07:52,160
but before i start going into

1734
01:07:52,160 --> 01:07:54,400
a draft as you know it's the draft zero

1735
01:07:54,400 --> 01:07:55,920
is always a lot of work if you want to

1736
01:07:55,920 --> 01:07:57,280
do it right

1737
01:07:57,280 --> 01:07:59,599
uh i wanted to expose the dangers to the

1738
01:07:59,599 --> 01:08:02,640
group and and kind of get a go no go

1739
01:08:02,640 --> 01:08:05,118
feedback

1740
01:08:06,480 --> 01:08:09,799
here regime

1741
01:08:12,480 --> 01:08:13,760
yes i'm here

1742
01:08:13,760 --> 01:08:16,560
you hear me so actually if you can go

1743
01:08:16,560 --> 01:08:19,439
back one slide just once like so i i

1744
01:08:19,439 --> 01:08:21,439
think that the work is interesting i

1745
01:08:21,439 --> 01:08:23,679
just wanted to make a comment on

1746
01:08:23,679 --> 01:08:26,158
the third metal main bullet adding

1747
01:08:26,158 --> 01:08:28,560
metrics to influence load balancing

1748
01:08:28,560 --> 01:08:31,359
yesterday it was the there was this kind

1749
01:08:31,359 --> 01:08:34,080
of compute and networking

1750
01:08:34,080 --> 01:08:36,399
i think it was the acronym anyway

1751
01:08:36,399 --> 01:08:38,960
they work on a similar problem in a

1752
01:08:38,960 --> 01:08:40,960
certain way because they use

1753
01:08:40,960 --> 01:08:44,238
so compute metrics and network related

1754
01:08:44,238 --> 01:08:46,399
metrics which is like water worker

1755
01:08:46,399 --> 01:08:49,120
capacities access yes exactly that could

1756
01:08:49,120 --> 01:08:50,238
be exactly

1757
01:08:50,238 --> 01:08:52,080
very very good that's exactly what the

1758
01:08:52,080 --> 01:08:54,560
sort of thing we have in mind yeah if if

1759
01:08:54,560 --> 01:08:57,520
basically if for instance if if you have

1760
01:08:57,520 --> 01:08:59,198
kubernetes again right and you can

1761
01:08:59,198 --> 01:09:01,198
decide how many pods you have on

1762
01:09:01,198 --> 01:09:02,960
different servers you could basically

1763
01:09:02,960 --> 01:09:05,120
load balance on the number of pods

1764
01:09:05,120 --> 01:09:07,759
yeah yeah i think there is

1765
01:09:07,759 --> 01:09:09,600
some overlap this may be a different

1766
01:09:09,600 --> 01:09:11,679
solution i don't know maybe you're

1767
01:09:11,679 --> 01:09:13,520
getting oh i didn't know

1768
01:09:13,520 --> 01:09:14,960
and

1769
01:09:14,960 --> 01:09:16,880
there is some connection there otherwise

1770
01:09:16,880 --> 01:09:19,920
the work is interesting that's it

1771
01:09:19,920 --> 01:09:22,640
thank you luigi

1772
01:09:22,719 --> 01:09:24,238
justin

1773
01:09:24,238 --> 01:09:26,158
yeah i need to continue asking my

1774
01:09:26,158 --> 01:09:27,600
question because

1775
01:09:27,600 --> 01:09:31,120
somehow i got disconnected here

1776
01:09:31,120 --> 01:09:32,399
the

1777
01:09:32,399 --> 01:09:33,520
i still don't understand the

1778
01:09:33,520 --> 01:09:36,479
relationship between a and b

1779
01:09:36,479 --> 01:09:39,679
so is b a sub prefix of a no no no i'm

1780
01:09:39,679 --> 01:09:41,679
sorry oh you were disconnected

1781
01:09:41,679 --> 01:09:43,279
yeah so you did not show my response

1782
01:09:43,279 --> 01:09:45,198
they're completely unrelated

1783
01:09:45,198 --> 01:09:46,799
they can be related but there is no

1784
01:09:46,799 --> 01:09:48,319
requirement at all that there is any

1785
01:09:48,319 --> 01:09:49,600
relation between

1786
01:09:49,600 --> 01:09:51,839
the job of the

1787
01:09:51,839 --> 01:09:54,238
abr then

1788
01:09:54,238 --> 01:09:56,719
the abr suddenly gets additional

1789
01:09:56,719 --> 01:09:58,960
networks it's responsible

1790
01:09:58,960 --> 01:10:00,719
for okay

1791
01:10:00,719 --> 01:10:01,520
so

1792
01:10:01,520 --> 01:10:03,520
you're talking about the sixth lbr right

1793
01:10:03,520 --> 01:10:06,640
sabr the 6mbr the registry

1794
01:10:06,640 --> 01:10:09,120
the registry is is only useful if you do

1795
01:10:09,120 --> 01:10:10,560
um

1796
01:10:10,560 --> 01:10:11,520
the the

1797
01:10:11,520 --> 01:10:13,199
function that

1798
01:10:13,199 --> 01:10:15,120
is equivalent to that right if you want

1799
01:10:15,120 --> 01:10:17,440
to auto configure the addresses so

1800
01:10:17,440 --> 01:10:19,440
basically say those are cars and they

1801
01:10:19,440 --> 01:10:20,880
have service providers and service

1802
01:10:20,880 --> 01:10:23,040
providers did give them a slash 64 which

1803
01:10:23,040 --> 01:10:24,480
is a b or c

1804
01:10:24,480 --> 01:10:26,239
now those cars end up in the same

1805
01:10:26,239 --> 01:10:27,679
parking lot

1806
01:10:27,679 --> 01:10:31,360
and they want to to form a melee of sort

1807
01:10:31,360 --> 01:10:32,800
with ripple

1808
01:10:32,800 --> 01:10:35,120
uh basically they would advertise uh an

1809
01:10:35,120 --> 01:10:36,880
address

1810
01:10:36,880 --> 01:10:39,120
and they can advertise this

1811
01:10:39,120 --> 01:10:41,120
qa unique prefix they have or they

1812
01:10:41,120 --> 01:10:42,560
cannot take off

1813
01:10:42,560 --> 01:10:45,440
a ula prefix uh if you really want to

1814
01:10:45,440 --> 01:10:47,440
ensure that the ua prefix that is

1815
01:10:47,440 --> 01:10:49,760
autocad for anonymity purpose

1816
01:10:49,760 --> 01:10:51,600
just for forming this network is really

1817
01:10:51,600 --> 01:10:53,280
unique inside the parking lot then you

1818
01:10:53,280 --> 01:10:55,280
would have a 6lbr

1819
01:10:55,280 --> 01:10:56,800
if you're using global addresses you

1820
01:10:56,800 --> 01:10:58,480
would not need the 6 apr because the

1821
01:10:58,480 --> 01:11:00,480
very interest is every prefix abc is

1822
01:11:00,480 --> 01:11:03,600
unique it's being just given by the each

1823
01:11:03,600 --> 01:11:05,440
service provider and that

1824
01:11:05,440 --> 01:11:07,120
yes there is no no relationship at all

1825
01:11:07,120 --> 01:11:09,920
between a b and c

1826
01:11:11,280 --> 01:11:14,000
okay then i really don't understand why

1827
01:11:14,000 --> 01:11:16,560
a and b are on the same diagram because

1828
01:11:16,560 --> 01:11:18,960
they seem to have no relationship at all

1829
01:11:18,960 --> 01:11:20,719
oh they're just they're just two cars

1830
01:11:20,719 --> 01:11:23,440
parked next to one another

1831
01:11:23,440 --> 01:11:26,000
or two devices

1832
01:11:26,000 --> 01:11:28,080
your picture has

1833
01:11:28,080 --> 01:11:29,440
things on it

1834
01:11:29,440 --> 01:11:31,760
that have prefix a and things that have

1835
01:11:31,760 --> 01:11:33,280
prefix b

1836
01:11:33,280 --> 01:11:36,480
yeah not b as prefix b owns prefix b as

1837
01:11:36,480 --> 01:11:37,679
a router

1838
01:11:37,679 --> 01:11:41,600
and node c auto calls an address from b

1839
01:11:41,600 --> 01:11:42,480
uh

1840
01:11:42,480 --> 01:11:45,840
we're using c as an id and it's just

1841
01:11:45,840 --> 01:11:48,480
so the prefix b is owned by router b

1842
01:11:48,480 --> 01:11:49,440
yeah

1843
01:11:49,440 --> 01:11:51,199
so is the router which which has that

1844
01:11:51,199 --> 01:11:53,840
prefix c is a host

1845
01:11:53,840 --> 01:11:55,040
attached to

1846
01:11:55,040 --> 01:11:56,159
b

1847
01:11:56,159 --> 01:11:59,839
forming address b column column c

1848
01:12:00,320 --> 01:12:02,480
so what do the

1849
01:12:02,480 --> 01:12:03,920
hosts

1850
01:12:03,920 --> 01:12:05,330
that are in a

1851
01:12:05,330 --> 01:12:07,520
[Music]

1852
01:12:07,520 --> 01:12:10,560
have to do with b

1853
01:12:11,920 --> 01:12:13,440
what are the hosts i'm sorry i missed

1854
01:12:13,440 --> 01:12:14,480
some words

1855
01:12:14,480 --> 01:12:17,040
the hosts that are in a

1856
01:12:17,040 --> 01:12:19,520
what do they have to do with bb as a

1857
01:12:19,520 --> 01:12:21,600
prefix

1858
01:12:21,600 --> 01:12:22,640
uh

1859
01:12:22,640 --> 01:12:24,320
the only one that has anything to do is

1860
01:12:24,320 --> 01:12:26,960
not be itself because he's uh as a host

1861
01:12:26,960 --> 01:12:28,800
on one antenna if you like is he's a

1862
01:12:28,800 --> 01:12:31,199
host to a

1863
01:12:31,199 --> 01:12:34,400
and then as a router is the writer for

1864
01:12:34,400 --> 01:12:36,960
prefix b so the interconnection between

1865
01:12:36,960 --> 01:12:38,400
a and b is the fact that there is a

1866
01:12:38,400 --> 01:12:41,040
router b which acted as a host on one

1867
01:12:41,040 --> 01:12:41,920
leg

1868
01:12:41,920 --> 01:12:44,560
to form an address from a and

1869
01:12:44,560 --> 01:12:46,960
on the other leg as acts as a router for

1870
01:12:46,960 --> 01:12:49,760
exposing b it creates that link

1871
01:12:49,760 --> 01:12:51,360
that connection if you like during the

1872
01:12:51,360 --> 01:12:53,920
time where it's it's reachable

1873
01:12:53,920 --> 01:12:56,640
from from a and when b goes away from a

1874
01:12:56,640 --> 01:12:59,520
uh address a column column b will will

1875
01:12:59,520 --> 01:13:00,880
go away

1876
01:13:00,880 --> 01:13:03,199
it will have to deprecate the the nodes

1877
01:13:03,199 --> 01:13:07,600
in a cannot address any nodes in b

1878
01:13:07,600 --> 01:13:09,520
without triple they can't but once you

1879
01:13:09,520 --> 01:13:10,960
run ripple

1880
01:13:10,960 --> 01:13:13,760
and say a becomes the root just because

1881
01:13:13,760 --> 01:13:16,480
from the diagram it looks like obvious

1882
01:13:16,480 --> 01:13:19,600
then if if uh a node in a pings an

1883
01:13:19,600 --> 01:13:20,960
address like

1884
01:13:20,960 --> 01:13:22,880
b column column c through ripple it will

1885
01:13:22,880 --> 01:13:24,400
know it's there

1886
01:13:24,400 --> 01:13:25,679
that's that's when you need the routing

1887
01:13:25,679 --> 01:13:27,679
right i mean the routing ripple does

1888
01:13:27,679 --> 01:13:30,560
exactly what i've shown on the slides

1889
01:13:30,560 --> 01:13:33,600
basically ripple builds this

1890
01:13:33,600 --> 01:13:36,159
right a is the root blah blah here is

1891
01:13:36,159 --> 01:13:38,239
routing tables in every node

1892
01:13:38,239 --> 01:13:40,640
so for instance in node b

1893
01:13:40,640 --> 01:13:42,960
which is in the middle prefix b appears

1894
01:13:42,960 --> 01:13:45,280
as connected right and it's actually

1895
01:13:45,280 --> 01:13:46,480
owned

1896
01:13:46,480 --> 01:13:48,719
and a prefix a is connected but as a

1897
01:13:48,719 --> 01:13:49,760
host

1898
01:13:49,760 --> 01:13:51,920
and then b has a default route via a

1899
01:13:51,920 --> 01:13:54,560
which is the root

1900
01:13:54,560 --> 01:13:56,960
and and c and d they basically auto

1901
01:13:56,960 --> 01:13:59,280
confident trust from from b

1902
01:13:59,280 --> 01:14:00,960
so they they see b

1903
01:14:00,960 --> 01:14:02,880
uh us connected

1904
01:14:02,880 --> 01:14:04,000
they see their own prefix that's

1905
01:14:04,000 --> 01:14:06,080
connected default via b right that's

1906
01:14:06,080 --> 01:14:07,440
ripple fire

1907
01:14:07,440 --> 01:14:10,400
so it's just repo used in some many form

1908
01:14:10,400 --> 01:14:13,719
if you like

1909
01:14:14,320 --> 01:14:16,080
okay and that works

1910
01:14:16,080 --> 01:14:18,159
used to using ripple in sub-networks so

1911
01:14:18,159 --> 01:14:20,400
this this is not known as transit

1912
01:14:20,400 --> 01:14:21,679
network so

1913
01:14:21,679 --> 01:14:23,760
it's not transit if if you don't connect

1914
01:14:23,760 --> 01:14:26,080
to anything right if for instance a

1915
01:14:26,080 --> 01:14:28,080
might be connected to nothing it's just

1916
01:14:28,080 --> 01:14:29,840
the the the election

1917
01:14:29,840 --> 01:14:31,280
the natural election which will have

1918
01:14:31,280 --> 01:14:35,040
made him uh being the root

1919
01:14:38,960 --> 01:14:43,679
yeah it just starts with

1920
01:14:43,679 --> 01:14:45,760
um well it's not how it's used today

1921
01:14:45,760 --> 01:14:48,320
right it's just that it works

1922
01:14:48,320 --> 01:14:50,560
if you go ahead you connect a to the

1923
01:14:50,560 --> 01:14:52,080
internet it makes a lot of more sense

1924
01:14:52,080 --> 01:14:53,520
yeah

1925
01:14:53,520 --> 01:14:55,520
so you connect into the internet

1926
01:14:55,520 --> 01:14:59,360
becomes the transit network to b

1927
01:15:01,199 --> 01:15:03,440
so so if you say what you call the abr

1928
01:15:03,440 --> 01:15:04,560
can be a

1929
01:15:04,560 --> 01:15:07,120
works fine

1930
01:15:08,640 --> 01:15:10,960
yeah um

1931
01:15:10,960 --> 01:15:13,280
okay i i'm looking forward to your draft

1932
01:15:13,280 --> 01:15:14,960
because to me this makes absolutely

1933
01:15:14,960 --> 01:15:16,880
nothing this would not be in the draft i

1934
01:15:16,880 --> 01:15:18,960
mean this this this has been my ripple

1935
01:15:18,960 --> 01:15:20,640
course for 15 years

1936
01:15:20,640 --> 01:15:23,120
but it's not it's not in in in the draft

1937
01:15:23,120 --> 01:15:25,360
because the draft would more well would

1938
01:15:25,360 --> 01:15:27,120
would probably discuss that flight well

1939
01:15:27,120 --> 01:15:28,800
which would probably curving the other

1940
01:15:28,800 --> 01:15:29,520
one

1941
01:15:29,520 --> 01:15:31,679
yeah if you like i mean to explain this

1942
01:15:31,679 --> 01:15:33,840
background that we i don't want to

1943
01:15:33,840 --> 01:15:35,679
overload the document either with ripple

1944
01:15:35,679 --> 01:15:37,199
consideration when it's really talking

1945
01:15:37,199 --> 01:15:39,760
about md

1946
01:15:39,760 --> 01:15:41,360
so yeah i mean i would be happy to

1947
01:15:41,360 --> 01:15:43,600
discuss about those slides

1948
01:15:43,600 --> 01:15:45,920
anywhere in any form you want

1949
01:15:45,920 --> 01:15:48,080
including this mailing list but saying

1950
01:15:48,080 --> 01:15:50,239
that i will write that in the draft i

1951
01:15:50,239 --> 01:15:52,400
don't expect to

1952
01:15:52,400 --> 01:15:54,719
but this is pure deployment

1953
01:15:54,719 --> 01:15:56,560
it's not so interesting how ripple does

1954
01:15:56,560 --> 01:15:59,760
this it's more interesting what

1955
01:15:59,760 --> 01:16:02,800
uh capabilities and responsibilities you

1956
01:16:02,800 --> 01:16:04,640
just assigned to the various nodes in

1957
01:16:04,640 --> 01:16:07,600
the network here oh yeah cool cool cool

1958
01:16:07,600 --> 01:16:09,920
so now we are back to to this case it's

1959
01:16:09,920 --> 01:16:11,760
basically saying there is there is a

1960
01:16:11,760 --> 01:16:14,080
rotted network uh

1961
01:16:14,080 --> 01:16:17,120
where where c is a 6lr if you like and

1962
01:16:17,120 --> 01:16:20,239
then there is this gateway which needs a

1963
01:16:20,239 --> 01:16:22,480
prefix and doesn't speak repo so it's a

1964
01:16:22,480 --> 01:16:25,040
ripple underwear router

1965
01:16:25,040 --> 01:16:26,880
and we call that an external destination

1966
01:16:26,880 --> 01:16:32,360
in our c89 i'm sorry 8008

1967
01:16:32,840 --> 01:16:36,480
9008 so so use of ripple info we did

1968
01:16:36,480 --> 01:16:39,280
this is this is a next one destination

1969
01:16:39,280 --> 01:16:40,000
so

1970
01:16:40,000 --> 01:16:41,120
how do you

1971
01:16:41,120 --> 01:16:42,080
get

1972
01:16:42,080 --> 01:16:43,760
knowledge or fix all destinations that

1973
01:16:43,760 --> 01:16:45,280
are not host

1974
01:16:45,280 --> 01:16:49,120
and right now there was nothing um so

1975
01:16:49,120 --> 01:16:51,440
now we have a protocol

1976
01:16:51,440 --> 01:16:54,640
okay so sorry to interrupt uh there's uh

1977
01:16:54,640 --> 01:16:57,199
also one paying uh in the queue so

1978
01:16:57,199 --> 01:16:58,239
perhaps

1979
01:16:58,239 --> 01:17:00,960
we may have like time for an extra

1980
01:17:00,960 --> 01:17:02,719
question by one thing

1981
01:17:02,719 --> 01:17:04,320
and hopefully you can continue the

1982
01:17:04,320 --> 01:17:05,760
discussion for for example on the

1983
01:17:05,760 --> 01:17:08,960
mailing list and now yeah just time for

1984
01:17:08,960 --> 01:17:11,760
a quick question from one ping

1985
01:17:11,760 --> 01:17:14,840
okay thank you hi pascal um does this

1986
01:17:14,840 --> 01:17:18,080
mean um does this and does this mean the

1987
01:17:18,080 --> 01:17:21,920
root is gathered by the by the root node

1988
01:17:21,920 --> 01:17:23,120
and

1989
01:17:23,120 --> 01:17:26,000
then for the communication every packet

1990
01:17:26,000 --> 01:17:30,000
will uh carry the root message

1991
01:17:30,000 --> 01:17:33,199
in the encapsulation

1992
01:17:33,199 --> 01:17:35,280
oh um

1993
01:17:35,280 --> 01:17:37,280
if you're using in this case it's using

1994
01:17:37,280 --> 01:17:38,800
non-storing mode

1995
01:17:38,800 --> 01:17:40,520
and so

1996
01:17:40,520 --> 01:17:43,040
rca9008 applies

1997
01:17:43,040 --> 01:17:45,199
and yes it does mean that c will

1998
01:17:45,199 --> 01:17:48,879
encapsulate the packet to the root

1999
01:17:49,679 --> 01:17:52,960
oh i think if i remember well

2000
01:17:52,960 --> 01:17:55,280
you know we had a lot of trouble writing

2001
01:17:55,280 --> 01:17:57,679
nine zero zero eight but this is this is

2002
01:17:57,679 --> 01:18:00,000
whether it's it's really a ripple and

2003
01:18:00,000 --> 01:18:01,520
overleaf or it's an excellent

2004
01:18:01,520 --> 01:18:03,600
destination doesn't make a difference

2005
01:18:03,600 --> 01:18:05,280
and my memory is effectively c will

2006
01:18:05,280 --> 01:18:07,440
encapsulate to the root and then uh the

2007
01:18:07,440 --> 01:18:09,520
root will either encapsulate if it's

2008
01:18:09,520 --> 01:18:12,320
another rural destination or

2009
01:18:12,320 --> 01:18:14,640
if it's not a real destination then

2010
01:18:14,640 --> 01:18:16,480
he might

2011
01:18:16,480 --> 01:18:18,880
no well sorry if it's non-storing mode

2012
01:18:18,880 --> 01:18:21,040
it will encapsulate

2013
01:18:21,040 --> 01:18:23,120
so yes okay i understand

2014
01:18:23,120 --> 01:18:25,280
okay thank you

2015
01:18:25,280 --> 01:18:28,000
but yes uh always you know go back to

2016
01:18:28,000 --> 01:18:31,040
nine zero zero eight it was so hard

2017
01:18:31,040 --> 01:18:32,960
we always miss things when we do it by

2018
01:18:32,960 --> 01:18:34,960
memory

2019
01:18:34,960 --> 01:18:37,199
but same as a rule i mean whether it's a

2020
01:18:37,199 --> 01:18:39,360
mixtal host or external uh

2021
01:18:39,360 --> 01:18:42,880
prefix doesn't make any difference

2022
01:18:42,880 --> 01:18:44,080
okay so

2023
01:18:44,080 --> 01:18:45,679
thanks for the presentation and

2024
01:18:45,679 --> 01:18:48,320
discussion so it appears that

2025
01:18:48,320 --> 01:18:50,480
well it may be good to confirm further

2026
01:18:50,480 --> 01:18:51,760
on the mailing list that there is

2027
01:18:51,760 --> 01:18:53,440
interest in this work

2028
01:18:53,440 --> 01:18:54,560
also

2029
01:18:54,560 --> 01:18:56,560
it was good to clarify relationship with

2030
01:18:56,560 --> 01:18:58,800
the charter so it appears this whole

2031
01:18:58,800 --> 01:19:00,159
work area

2032
01:19:00,159 --> 01:19:01,360
is

2033
01:19:01,360 --> 01:19:04,159
can apply in iot networks but also it's

2034
01:19:04,159 --> 01:19:06,719
not limited to that so yeah it was also

2035
01:19:06,719 --> 01:19:10,960
useful to clarify those aspects as well

2036
01:19:12,960 --> 01:19:15,679
okay so then

2037
01:19:15,679 --> 01:19:16,640
thank you

2038
01:19:16,640 --> 01:19:18,960
and i guess we can proceed to the next

2039
01:19:18,960 --> 01:19:20,640
presentation

2040
01:19:20,640 --> 01:19:25,040
actually well i think it's me this time

2041
01:19:25,040 --> 01:19:28,000
yeah i'm i'm saying get a broken

2042
01:19:28,000 --> 01:19:29,040
format

2043
01:19:29,040 --> 01:19:30,800
do you want to just play your own slides

2044
01:19:30,800 --> 01:19:33,040
then

2045
01:19:34,960 --> 01:19:39,520
so yeah share preloaded slides

2046
01:19:47,600 --> 01:19:52,159
i'm still seeing like a broken format

2047
01:19:52,159 --> 01:19:54,800
you'll have to share your pdf

2048
01:19:54,800 --> 01:19:56,640
because if you see your screen

2049
01:19:56,640 --> 01:19:59,360
my screen okay

2050
01:20:04,000 --> 01:20:06,880
so and now we know that whatever pdf

2051
01:20:06,880 --> 01:20:09,600
process you you used is results in

2052
01:20:09,600 --> 01:20:11,679
broken slides

2053
01:20:11,679 --> 01:20:15,040
so we have a test case

2054
01:20:17,360 --> 01:20:22,599
okay so i'm starting to share

2055
01:20:42,000 --> 01:20:45,199
okay can you see the screen sorry the

2056
01:20:45,199 --> 01:20:46,719
the slide correctly

2057
01:20:46,719 --> 01:20:48,560
yeah it looks great

2058
01:20:48,560 --> 01:20:49,920
okay thank you

2059
01:20:49,920 --> 01:20:52,880
okay so carlos gomez again i'm going to

2060
01:20:52,880 --> 01:20:55,280
present the last update of the drafting

2061
01:20:55,280 --> 01:20:57,040
title transmission of chic compressed

2062
01:20:57,040 --> 01:20:58,480
packets over

2063
01:20:58,480 --> 01:21:03,120
ieee 2.15.4 networks my co-author is an

2064
01:21:03,120 --> 01:21:06,400
aminable from aglio

2065
01:21:06,400 --> 01:21:08,719
and let's first take a look at the

2066
01:21:08,719 --> 01:21:10,719
motivation for this draft

2067
01:21:10,719 --> 01:21:11,600
so

2068
01:21:11,600 --> 01:21:14,120
as the working group knows well

2069
01:21:14,120 --> 01:21:16,320
rfc6282 has been the basis for header

2070
01:21:16,320 --> 01:21:18,480
compression in 6v pan and also in six

2071
01:21:18,480 --> 01:21:19,280
low

2072
01:21:19,280 --> 01:21:21,199
it was designed for

2073
01:21:21,199 --> 01:21:24,400
15.4 as the target technology

2074
01:21:24,400 --> 01:21:26,560
to support ipv6 on

2075
01:21:26,560 --> 01:21:28,960
and it has been adapted or reused for

2076
01:21:28,960 --> 01:21:31,280
several relatively similar iot

2077
01:21:31,280 --> 01:21:33,600
technologies uh several times such as

2078
01:21:33,600 --> 01:21:35,280
the ones that we are handling in six

2079
01:21:35,280 --> 01:21:36,320
load

2080
01:21:36,320 --> 01:21:39,360
and with this rfc it is possible to

2081
01:21:39,360 --> 01:21:42,960
compress an ipv6 gdp header typically 48

2082
01:21:42,960 --> 01:21:45,760
bytes down to a size of seven bytes in

2083
01:21:45,760 --> 01:21:48,239
the best case with global addresses

2084
01:21:48,239 --> 01:21:49,840
but then we also have the recent

2085
01:21:49,840 --> 01:21:53,920
publication of rfc 8724 also known as

2086
01:21:53,920 --> 01:21:56,159
chic which is a product of the lp1

2087
01:21:56,159 --> 01:21:57,280
working group

2088
01:21:57,280 --> 01:21:58,719
she defines adaptation layer

2089
01:21:58,719 --> 01:22:00,400
functionality comprising header

2090
01:22:00,400 --> 01:22:02,639
compression and fragmentation

2091
01:22:02,639 --> 01:22:04,960
and it has been designed for

2092
01:22:04,960 --> 01:22:06,400
technologies which are even more

2093
01:22:06,400 --> 01:22:08,840
constrained in terms of communication

2094
01:22:08,840 --> 01:22:11,760
capabilities than those which we deal

2095
01:22:11,760 --> 01:22:13,920
with in six volt pan or six load such as

2096
01:22:13,920 --> 01:22:16,560
for example lp1 technologies

2097
01:22:16,560 --> 01:22:18,880
so here we are interested in using chic

2098
01:22:18,880 --> 01:22:20,719
header compression

2099
01:22:20,719 --> 01:22:22,880
in six open environments

2100
01:22:22,880 --> 01:22:25,040
since it is possible with chic to

2101
01:22:25,040 --> 01:22:28,159
compress an ipv6 udp header known to a

2102
01:22:28,159 --> 01:22:30,880
size of for example just one byte again

2103
01:22:30,880 --> 01:22:33,360
in the best case with global addresses

2104
01:22:33,360 --> 01:22:36,639
and the technique is that static context

2105
01:22:36,639 --> 01:22:39,199
is used here which exploits a priori

2106
01:22:39,199 --> 01:22:41,520
knowledge of the header field values of

2107
01:22:41,520 --> 01:22:45,520
the packets to be sent or received

2108
01:22:45,520 --> 01:22:48,880
then if we include also the application

2109
01:22:48,880 --> 01:22:49,840
layer

2110
01:22:49,840 --> 01:22:52,719
we may want to compress the whole set of

2111
01:22:52,719 --> 01:22:55,760
ipv6 udp and co-op headers

2112
01:22:55,760 --> 01:22:59,040
and well there is no 6lowpan

2113
01:22:59,040 --> 01:23:01,679
header compression defined focus

2114
01:23:01,679 --> 01:23:03,120
so

2115
01:23:03,120 --> 01:23:04,080
then

2116
01:23:04,080 --> 01:23:06,880
we can consider two cases for a co-op

2117
01:23:06,880 --> 01:23:09,120
header as an example

2118
01:23:09,120 --> 01:23:13,280
uh if we assume a header without

2119
01:23:13,280 --> 01:23:14,480
options

2120
01:23:14,480 --> 01:23:16,320
then with six load pan the resulting

2121
01:23:16,320 --> 01:23:20,080
size of ipv6 udp coop header would be 11

2122
01:23:20,080 --> 01:23:21,360
bytes in total

2123
01:23:21,360 --> 01:23:24,080
if we consider the options in a co-op

2124
01:23:24,080 --> 01:23:26,400
header such as those in table 6 of

2125
01:23:26,400 --> 01:23:27,920
fc8824

2126
01:23:27,920 --> 01:23:30,800
the resulting size would be 23 bytes

2127
01:23:30,800 --> 01:23:31,760
however

2128
01:23:31,760 --> 01:23:34,560
by using chic which by the way has also

2129
01:23:34,560 --> 01:23:36,639
some specification to

2130
01:23:36,639 --> 01:23:38,880
compress squad headers with ship

2131
01:23:38,880 --> 01:23:40,800
then it is possible to compress the

2132
01:23:40,800 --> 01:23:43,760
whole set of ipv6 udp and cob header

2133
01:23:43,760 --> 01:23:45,840
down to a size of for example just two

2134
01:23:45,840 --> 01:23:47,679
bytes

2135
01:23:47,679 --> 01:23:48,400
then

2136
01:23:48,400 --> 01:23:50,239
with this decrease in the amount of

2137
01:23:50,239 --> 01:23:52,320
bytes to be transmitted or received it

2138
01:23:52,320 --> 01:23:54,320
is possible to achieve significant

2139
01:23:54,320 --> 01:23:56,800
improvements for example in terms of the

2140
01:23:56,800 --> 01:24:00,000
theoretical battery lifetime

2141
01:24:00,000 --> 01:24:02,400
when a node is running on a battery and

2142
01:24:02,400 --> 01:24:03,840
transmitting packets for example

2143
01:24:03,840 --> 01:24:07,120
periodically over 15.4 as you will see

2144
01:24:07,120 --> 01:24:09,120
later it is possible to achieve a

2145
01:24:09,120 --> 01:24:11,040
theoretical improvement by a factor

2146
01:24:11,040 --> 01:24:13,360
which might be even greater than two

2147
01:24:13,360 --> 01:24:16,000
even if we include a third byte as a

2148
01:24:16,000 --> 01:24:17,679
sheet dispatch

2149
01:24:17,679 --> 01:24:20,560
and however the disclaimer here is that

2150
01:24:20,560 --> 01:24:22,239
actual improvement in practice will be

2151
01:24:22,239 --> 01:24:24,480
lower depending on various parameters

2152
01:24:24,480 --> 01:24:26,080
and features

2153
01:24:26,080 --> 01:24:28,400
such as the device hardware and in

2154
01:24:28,400 --> 01:24:31,040
particular the sleep current consumption

2155
01:24:31,040 --> 01:24:33,199
also mac layer settings application

2156
01:24:33,199 --> 01:24:35,040
layer settings including the payload

2157
01:24:35,040 --> 01:24:35,920
size

2158
01:24:35,920 --> 01:24:39,040
network topology and so on

2159
01:24:39,040 --> 01:24:41,120
so just to give a few more details on

2160
01:24:41,120 --> 01:24:42,159
this

2161
01:24:42,159 --> 01:24:44,880
here this figure shows on the vertical

2162
01:24:44,880 --> 01:24:47,199
axis which is the maximum

2163
01:24:47,199 --> 01:24:49,440
theoretical battery lifetime improvement

2164
01:24:49,440 --> 01:24:51,840
factor that can be achieved

2165
01:24:51,840 --> 01:24:54,239
for the cases considered as a function

2166
01:24:54,239 --> 01:24:56,320
of the payload size which is the

2167
01:24:56,320 --> 01:24:59,360
horizontal axis here we assume short mac

2168
01:24:59,360 --> 01:25:01,600
addresses intrapan communication and

2169
01:25:01,600 --> 01:25:02,400
again

2170
01:25:02,400 --> 01:25:04,560
a battery operated device which

2171
01:25:04,560 --> 01:25:07,440
transmits packets periodically

2172
01:25:07,440 --> 01:25:09,840
so here you can see there are red curves

2173
01:25:09,840 --> 01:25:12,159
and blue curves the red ones correspond

2174
01:25:12,159 --> 01:25:14,159
to a star topology

2175
01:25:14,159 --> 01:25:15,280
scenario

2176
01:25:15,280 --> 01:25:17,199
and the blue ones correspond to a

2177
01:25:17,199 --> 01:25:20,320
multi-hop scenario with mesh under

2178
01:25:20,320 --> 01:25:22,639
i will refer to route over later in the

2179
01:25:22,639 --> 01:25:23,840
presentation

2180
01:25:23,840 --> 01:25:25,679
and as you can see

2181
01:25:25,679 --> 01:25:28,320
while the improvement decreases with

2182
01:25:28,320 --> 01:25:30,400
quad payload size of course

2183
01:25:30,400 --> 01:25:32,560
it is still possible to achieve quite

2184
01:25:32,560 --> 01:25:34,239
significant improvement at least

2185
01:25:34,239 --> 01:25:35,760
theoretically

2186
01:25:35,760 --> 01:25:40,560
with shorter payload sizes

2187
01:25:40,560 --> 01:25:42,480
so

2188
01:25:42,480 --> 01:25:44,400
on the status of the draft

2189
01:25:44,400 --> 01:25:46,320
you may recall that there was initially

2190
01:25:46,320 --> 01:25:49,600
a related document which was a proposal

2191
01:25:49,600 --> 01:25:50,719
to

2192
01:25:50,719 --> 01:25:53,520
define a 6lowpan dispatch type to signal

2193
01:25:53,520 --> 01:25:55,760
when chic header compression is used

2194
01:25:55,760 --> 01:25:59,120
which was presented in itf 110

2195
01:25:59,120 --> 01:26:01,920
and that led to creating this draft

2196
01:26:01,920 --> 01:26:03,679
which has a greater scope

2197
01:26:03,679 --> 01:26:06,159
which is intended to enable

2198
01:26:06,159 --> 01:26:07,360
like all the details to allow

2199
01:26:07,360 --> 01:26:09,440
transmission of chic compressed packets

2200
01:26:09,440 --> 01:26:12,880
over ieee eagle 2.15.4 networks

2201
01:26:12,880 --> 01:26:14,960
the previous versions zero zero and zero

2202
01:26:14,960 --> 01:26:17,440
one were presented in the last two itf

2203
01:26:17,440 --> 01:26:19,440
meetings and here i'm presenting

2204
01:26:19,440 --> 01:26:21,120
revision02

2205
01:26:21,120 --> 01:26:23,199
which aims to incorporate the feedback

2206
01:26:23,199 --> 01:26:26,560
from the last itf and also from the

2207
01:26:26,560 --> 01:26:29,440
couple of lp1 interims where related

2208
01:26:29,440 --> 01:26:33,040
topics have been discussed

2209
01:26:33,360 --> 01:26:36,960
so let's go through the updates

2210
01:26:36,960 --> 01:26:39,360
in this last revision the first one

2211
01:26:39,360 --> 01:26:41,520
relates with the frame format

2212
01:26:41,520 --> 01:26:45,679
here you can see the format on the slide

2213
01:26:45,679 --> 01:26:48,159
which starts on the left with the sheet

2214
01:26:48,159 --> 01:26:50,159
dispatch which signals that what comes

2215
01:26:50,159 --> 01:26:52,639
next is a packet with a

2216
01:26:52,639 --> 01:26:54,080
header which has been compressed by

2217
01:26:54,080 --> 01:26:55,280
using chick

2218
01:26:55,280 --> 01:26:57,360
and the chic header the compressive

2219
01:26:57,360 --> 01:27:00,080
header compresses two components a rule

2220
01:27:00,080 --> 01:27:00,880
id

2221
01:27:00,880 --> 01:27:03,520
and if any a compression residue so in

2222
01:27:03,520 --> 01:27:06,719
the previous version we stated a fixed

2223
01:27:06,719 --> 01:27:09,840
size for the rule id of 8 bits however

2224
01:27:09,840 --> 01:27:11,920
after comments in the last itf

2225
01:27:11,920 --> 01:27:13,920
we have modified this

2226
01:27:13,920 --> 01:27:15,840
and now we

2227
01:27:15,840 --> 01:27:18,400
say that the recommended size for the

2228
01:27:18,400 --> 01:27:21,520
rule id is between 1 and 16 bits

2229
01:27:21,520 --> 01:27:24,719
the idea is to allow the most suitable

2230
01:27:24,719 --> 01:27:27,360
rule id size to be decided and used for

2231
01:27:27,360 --> 01:27:29,760
each specific environment

2232
01:27:29,760 --> 01:27:31,199
and also

2233
01:27:31,199 --> 01:27:33,840
we would like to avoid like a hard limit

2234
01:27:33,840 --> 01:27:35,520
on which could be the network size and

2235
01:27:35,520 --> 01:27:37,199
number of endpoint pairs that can

2236
01:27:37,199 --> 01:27:41,280
benefit from chic header compression

2237
01:27:41,280 --> 01:27:43,760
by the way just in case uh i'm

2238
01:27:43,760 --> 01:27:46,320
seeing my screen like

2239
01:27:46,320 --> 01:27:48,480
full size so i cannot see if there's

2240
01:27:48,480 --> 01:27:50,239
anyone in the queue so if there's anyone

2241
01:27:50,239 --> 01:27:52,080
just let me know

2242
01:27:52,080 --> 01:27:53,520
um

2243
01:27:53,520 --> 01:27:56,159
so then the next updates are in section

2244
01:27:56,159 --> 01:27:57,360
5.1

2245
01:27:57,360 --> 01:28:00,080
which focuses on ipv6 udp header

2246
01:28:00,080 --> 01:28:01,280
compression

2247
01:28:01,280 --> 01:28:02,080
so

2248
01:28:02,080 --> 01:28:04,000
by default

2249
01:28:04,000 --> 01:28:07,280
what is known here is use section 10 of

2250
01:28:07,280 --> 01:28:09,679
the base chic specification which is rfc

2251
01:28:09,679 --> 01:28:11,120
8724

2252
01:28:11,120 --> 01:28:14,560
to compress ipv6 or udp header fields

2253
01:28:14,560 --> 01:28:17,360
however there's a bit of a problem with

2254
01:28:17,360 --> 01:28:20,560
ipv6 addresses and udp ports

2255
01:28:20,560 --> 01:28:22,560
because

2256
01:28:22,560 --> 01:28:23,520
chic

2257
01:28:23,520 --> 01:28:27,040
is based on the lp1 architecture

2258
01:28:27,040 --> 01:28:29,360
and in that case

2259
01:28:29,360 --> 01:28:30,320
there's

2260
01:28:30,320 --> 01:28:33,040
special terms and elements such as the

2261
01:28:33,040 --> 01:28:35,280
ones shown in the figure

2262
01:28:35,280 --> 01:28:38,159
where at the left you have constrained

2263
01:28:38,159 --> 01:28:40,239
devices which would adopt the role of

2264
01:28:40,239 --> 01:28:41,360
deb

2265
01:28:41,360 --> 01:28:43,440
and on the right we have network site

2266
01:28:43,440 --> 01:28:46,080
infrastructure which would adopt the the

2267
01:28:46,080 --> 01:28:47,600
role of app

2268
01:28:47,600 --> 01:28:50,320
so in the base shake specification the

2269
01:28:50,320 --> 01:28:52,480
devon up terms are used

2270
01:28:52,480 --> 01:28:54,000
uh actually

2271
01:28:54,000 --> 01:28:55,360
the rules for compression and

2272
01:28:55,360 --> 01:28:57,679
decompression are written

2273
01:28:57,679 --> 01:29:00,159
for the ipv6 addresses and udp ports in

2274
01:29:00,159 --> 01:29:03,520
terms of who is dead and who is up and

2275
01:29:03,520 --> 01:29:06,639
actually there is no uh mention of

2276
01:29:06,639 --> 01:29:09,199
source or destination so the point is

2277
01:29:09,199 --> 01:29:10,719
the rule is expressed in terms of

2278
01:29:10,719 --> 01:29:11,920
develop

2279
01:29:11,920 --> 01:29:15,440
so in lp1 this is not a problem because

2280
01:29:15,440 --> 01:29:18,080
a chic entity knows in advance whether

2281
01:29:18,080 --> 01:29:20,080
it is dead or up

2282
01:29:20,080 --> 01:29:23,360
and then as we clarify in 0 2 in some

2283
01:29:23,360 --> 01:29:25,520
15.4 scenarios

2284
01:29:25,520 --> 01:29:27,280
this

2285
01:29:27,280 --> 01:29:29,760
is not a problem either and in fact this

2286
01:29:29,760 --> 01:29:33,199
is actually an optimization in chic in

2287
01:29:33,199 --> 01:29:36,480
the lp1 context because this allows a

2288
01:29:36,480 --> 01:29:38,560
compression decompression rule to be

2289
01:29:38,560 --> 01:29:40,159
used in both directions

2290
01:29:40,159 --> 01:29:42,400
so this same optimization can also be

2291
01:29:42,400 --> 01:29:45,440
used in some 15.4 scenarios

2292
01:29:45,440 --> 01:29:46,480
as is

2293
01:29:46,480 --> 01:29:48,480
for example in star topology networks

2294
01:29:48,480 --> 01:29:51,280
where the constrained devices

2295
01:29:51,280 --> 01:29:54,960
talk to some network site infrastructure

2296
01:29:54,960 --> 01:29:56,560
however the problem

2297
01:29:56,560 --> 01:29:59,840
may arise in other scenarios like two

2298
01:29:59,840 --> 01:30:02,800
peers two constrained devices that talk

2299
01:30:02,800 --> 01:30:05,280
to each other within a mesh topology

2300
01:30:05,280 --> 01:30:07,520
because according to the definition of a

2301
01:30:07,520 --> 01:30:08,400
depth

2302
01:30:08,400 --> 01:30:10,239
if both endpoints are constrained

2303
01:30:10,239 --> 01:30:12,560
devices both could have the role of

2304
01:30:12,560 --> 01:30:15,040
depth so here we need to address this

2305
01:30:15,040 --> 01:30:16,080
problem

2306
01:30:16,080 --> 01:30:18,639
so one possible solution which is the

2307
01:30:18,639 --> 01:30:21,440
one that is currently in the last update

2308
01:30:21,440 --> 01:30:23,920
of the draft which has been discussed in

2309
01:30:23,920 --> 01:30:25,440
lt1 interims

2310
01:30:25,440 --> 01:30:28,320
is that we might want to

2311
01:30:28,320 --> 01:30:31,360
tell a node whether it is dead or up in

2312
01:30:31,360 --> 01:30:32,400
advance

2313
01:30:32,400 --> 01:30:34,480
so additional functionality is needed

2314
01:30:34,480 --> 01:30:35,440
for that

2315
01:30:35,440 --> 01:30:37,600
and here each endpoint might need to

2316
01:30:37,600 --> 01:30:39,600
know whether it is developed when

2317
01:30:39,600 --> 01:30:42,400
talking to any other possible potential

2318
01:30:42,400 --> 01:30:43,679
endpoint

2319
01:30:43,679 --> 01:30:45,600
so it means that we might need to give

2320
01:30:45,600 --> 01:30:48,800
additional context to the nodes and then

2321
01:30:48,800 --> 01:30:51,600
there's a related point which is that

2322
01:30:51,600 --> 01:30:54,560
the basic specification also defines the

2323
01:30:54,560 --> 01:30:56,800
terms appling and downlink

2324
01:30:56,800 --> 01:30:57,760
which are

2325
01:30:57,760 --> 01:30:59,760
in terms of devena because uplink means

2326
01:30:59,760 --> 01:31:01,679
from depth to up downlink is the other

2327
01:31:01,679 --> 01:31:05,280
direction and if we follow this approach

2328
01:31:05,280 --> 01:31:07,760
it means that uplink and downlink would

2329
01:31:07,760 --> 01:31:10,560
have a local meaning just specific to

2330
01:31:10,560 --> 01:31:13,600
each pair of endpoints

2331
01:31:13,600 --> 01:31:17,679
so in zero two uh currently we have this

2332
01:31:17,679 --> 01:31:20,000
approach we remove some sort of

2333
01:31:20,000 --> 01:31:22,000
tentative solution that we attempted in

2334
01:31:22,000 --> 01:31:24,080
the previous version in zero one

2335
01:31:24,080 --> 01:31:27,360
which was uh using the terms source and

2336
01:31:27,360 --> 01:31:29,360
destination in the rules

2337
01:31:29,360 --> 01:31:30,560
however

2338
01:31:30,560 --> 01:31:33,440
this would have the issue of

2339
01:31:33,440 --> 01:31:36,159
duplicating the number of rules because

2340
01:31:36,159 --> 01:31:38,239
we would need one rule for each

2341
01:31:38,239 --> 01:31:39,760
direction

2342
01:31:39,760 --> 01:31:42,080
and well we also attempted to use

2343
01:31:42,080 --> 01:31:44,400
transmit and receive as possible

2344
01:31:44,400 --> 01:31:46,320
replayments replacements for applying

2345
01:31:46,320 --> 01:31:48,560
and downlink however well that is now

2346
01:31:48,560 --> 01:31:52,400
gone so we are trying to stick to

2347
01:31:52,400 --> 01:31:55,040
what is already provided in the basic

2348
01:31:55,040 --> 01:31:58,880
specification in terms of deven up

2349
01:31:58,880 --> 01:32:00,639
so i don't know if there's any comment

2350
01:32:00,639 --> 01:32:03,040
on this

2351
01:32:04,639 --> 01:32:08,159
yeah i just wrote in the chat that

2352
01:32:08,159 --> 01:32:10,000
since you have to install these rules

2353
01:32:10,000 --> 01:32:13,000
anyway

2354
01:32:13,040 --> 01:32:14,880
you have to establish the city context

2355
01:32:14,880 --> 01:32:17,440
that is being used here can't you

2356
01:32:17,440 --> 01:32:20,880
establish the roles

2357
01:32:20,880 --> 01:32:22,960
at the same time so when when you

2358
01:32:22,960 --> 01:32:25,840
install a research you install

2359
01:32:25,840 --> 01:32:29,840
them for node area as app and node b as

2360
01:32:29,840 --> 01:32:32,080
dev

2361
01:32:32,239 --> 01:32:33,679
yeah so

2362
01:32:33,679 --> 01:32:37,360
actually that's my current idea and

2363
01:32:37,360 --> 01:32:39,679
i understand that these

2364
01:32:39,679 --> 01:32:41,280
corresponds to

2365
01:32:41,280 --> 01:32:44,719
what has been suggested so far

2366
01:32:44,719 --> 01:32:45,920
well that there have been like different

2367
01:32:45,920 --> 01:32:48,960
suggestions in the lp1 interims but

2368
01:32:48,960 --> 01:32:50,400
this is

2369
01:32:50,400 --> 01:32:52,880
one approach which

2370
01:32:52,880 --> 01:32:55,440
reuses the functionality of devon up

2371
01:32:55,440 --> 01:32:57,360
mostly as it is

2372
01:32:57,360 --> 01:32:59,360
and yeah so since the rules need to be

2373
01:32:59,360 --> 01:33:01,360
written beforehand then i understand

2374
01:33:01,360 --> 01:33:02,719
that the

2375
01:33:02,719 --> 01:33:04,719
uh context to know

2376
01:33:04,719 --> 01:33:07,440
whether node will be never up

2377
01:33:07,440 --> 01:33:09,840
even for different endpoints i think it

2378
01:33:09,840 --> 01:33:12,159
can also be established beforehand as

2379
01:33:12,159 --> 01:33:14,800
well so i think that rules and deciding

2380
01:33:14,800 --> 01:33:17,840
the the roles would like would need to

2381
01:33:17,840 --> 01:33:18,719
be

2382
01:33:18,719 --> 01:33:20,880
done at the same time

2383
01:33:20,880 --> 01:33:23,679
so what what what is the

2384
01:33:23,679 --> 01:33:25,790
way you envision the

2385
01:33:25,790 --> 01:33:27,360
[Music]

2386
01:33:27,360 --> 01:33:30,159
rules to look like so a particular node

2387
01:33:30,159 --> 01:33:32,239
how many rule sets

2388
01:33:32,239 --> 01:33:33,840
will that

2389
01:33:33,840 --> 01:33:35,920
node have and is there any sharing

2390
01:33:35,920 --> 01:33:38,719
between these rule sets

2391
01:33:38,719 --> 01:33:40,639
yeah that's a good point and actually

2392
01:33:40,639 --> 01:33:43,360
it's uh considered in as light i have

2393
01:33:43,360 --> 01:33:45,360
next as next steps

2394
01:33:45,360 --> 01:33:48,239
yeah exactly

2395
01:33:48,239 --> 01:33:50,639
thank you yeah so actually

2396
01:33:50,639 --> 01:33:53,199
we are trying to be a bit generic uh so

2397
01:33:53,199 --> 01:33:55,920
far in the specification trying to

2398
01:33:55,920 --> 01:33:57,040
capture

2399
01:33:57,040 --> 01:33:59,440
perhaps from small networks to larger

2400
01:33:59,440 --> 01:34:01,760
networks uh so

2401
01:34:01,760 --> 01:34:05,280
yeah at the moment we are trying not to

2402
01:34:05,280 --> 01:34:07,520
limit anything in this regard

2403
01:34:07,520 --> 01:34:10,159
and yeah one related point is uh the one

2404
01:34:10,159 --> 01:34:11,760
you just mentioned about whether rules

2405
01:34:11,760 --> 01:34:13,520
could be shared or something like that

2406
01:34:13,520 --> 01:34:14,719
and and

2407
01:34:14,719 --> 01:34:16,840
even reused across different pairs of

2408
01:34:16,840 --> 01:34:19,360
endpoints yeah

2409
01:34:19,360 --> 01:34:22,719
okay thank you for the comments so

2410
01:34:22,719 --> 01:34:24,639
then

2411
01:34:24,639 --> 01:34:27,600
also another addition in zero two

2412
01:34:27,600 --> 01:34:30,320
is uh regarding some text in the basic

2413
01:34:30,320 --> 01:34:32,800
specification which states that the

2414
01:34:32,800 --> 01:34:35,360
iid cda which means compression

2415
01:34:35,360 --> 01:34:36,800
decompression action

2416
01:34:36,800 --> 01:34:38,639
cannot be used on lp1 technologies that

2417
01:34:38,639 --> 01:34:40,800
only carry the depth identifier in the

2418
01:34:40,800 --> 01:34:41,920
data frame

2419
01:34:41,920 --> 01:34:44,880
however in 15.4 now we explained in zero

2420
01:34:44,880 --> 01:34:47,600
2 that data frames carry both a source

2421
01:34:47,600 --> 01:34:50,480
and a destination field therefore the

2422
01:34:50,480 --> 01:34:54,239
app id can actually be used of course if

2423
01:34:54,239 --> 01:34:56,639
the id can be reconstructed based on

2424
01:34:56,639 --> 01:35:00,880
information available at the l2 header

2425
01:35:00,880 --> 01:35:02,880
so

2426
01:35:02,880 --> 01:35:03,920
then

2427
01:35:03,920 --> 01:35:06,080
we've also added

2428
01:35:06,080 --> 01:35:07,840
a few details on the security

2429
01:35:07,840 --> 01:35:09,520
considerations

2430
01:35:09,520 --> 01:35:12,719
so because this specification doesn't

2431
01:35:12,719 --> 01:35:14,560
define new header compression

2432
01:35:14,560 --> 01:35:16,480
functionality beyond the one in the

2433
01:35:16,480 --> 01:35:18,239
basic specification

2434
01:35:18,239 --> 01:35:21,199
the security considerations of section

2435
01:35:21,199 --> 01:35:23,840
2.1 in the basic specification which

2436
01:35:23,840 --> 01:35:26,239
focus on header compression apply here

2437
01:35:26,239 --> 01:35:28,400
and we've added also that the security

2438
01:35:28,400 --> 01:35:31,840
considerations of section 9 of fc 8824

2439
01:35:31,840 --> 01:35:32,800
which is

2440
01:35:32,800 --> 01:35:36,239
chic for co-op header compression also

2441
01:35:36,239 --> 01:35:37,280
apply

2442
01:35:37,280 --> 01:35:40,159
because we also want to be able to

2443
01:35:40,159 --> 01:35:42,639
use co-op a compression here

2444
01:35:42,639 --> 01:35:47,360
and um also we've added a requirement in

2445
01:35:47,360 --> 01:35:50,400
8824 which is that cryptographic

2446
01:35:50,400 --> 01:35:52,719
integrity protection is required to

2447
01:35:52,719 --> 01:35:55,119
protect chic headers

2448
01:35:55,119 --> 01:35:58,719
so here we also

2449
01:35:58,719 --> 01:35:59,600
copy

2450
01:35:59,600 --> 01:36:01,679
the same requirement and in fact we

2451
01:36:01,679 --> 01:36:04,639
explain that in 15.4 networks

2452
01:36:04,639 --> 01:36:06,239
there's also support for linkedin

2453
01:36:06,239 --> 01:36:08,080
encryption and authentication so it's

2454
01:36:08,080 --> 01:36:12,080
possible to support this requirement

2455
01:36:12,480 --> 01:36:15,119
so as possible next steps

2456
01:36:15,119 --> 01:36:17,040
well it would be good to try to

2457
01:36:17,040 --> 01:36:20,159
stabilize on the discussion about devnap

2458
01:36:20,159 --> 01:36:21,679
and writing the rules accordingly

2459
01:36:21,679 --> 01:36:25,840
perhaps beforehand as kirsten mentioned

2460
01:36:26,000 --> 01:36:26,960
then

2461
01:36:26,960 --> 01:36:29,280
subsequent questions could be okay do

2462
01:36:29,280 --> 01:36:30,960
all nodes need to store all the rules

2463
01:36:30,960 --> 01:36:32,560
that need to be used in the network or

2464
01:36:32,560 --> 01:36:35,760
perhaps is it possible to reuse

2465
01:36:35,760 --> 01:36:37,119
rule ids

2466
01:36:37,119 --> 01:36:39,600
across these joint pairs of end points

2467
01:36:39,600 --> 01:36:42,639
but this is something to be considered

2468
01:36:42,639 --> 01:36:45,199
and also there might need to be

2469
01:36:45,199 --> 01:36:47,679
something to clarify about the scope of

2470
01:36:47,679 --> 01:36:50,880
chic header compression for ipv6 udp

2471
01:36:50,880 --> 01:36:54,239
in this peer-to-peer 15.4 topologies

2472
01:36:54,239 --> 01:36:56,880
because it appears that there's not much

2473
01:36:56,880 --> 01:36:58,639
of a challenge when there is one hope

2474
01:36:58,639 --> 01:37:00,880
between source and destination

2475
01:37:00,880 --> 01:37:01,840
and

2476
01:37:01,840 --> 01:37:04,080
also when there are several hubs between

2477
01:37:04,080 --> 01:37:06,960
a source and a destination

2478
01:37:06,960 --> 01:37:08,080
it's quite

2479
01:37:08,080 --> 01:37:10,960
not very challenging to perform this

2480
01:37:10,960 --> 01:37:13,280
compression in mesh under however it

2481
01:37:13,280 --> 01:37:15,840
might become more challenging in the

2482
01:37:15,840 --> 01:37:17,679
route of a scenario

2483
01:37:17,679 --> 01:37:19,679
and in fact there is

2484
01:37:19,679 --> 01:37:22,239
some experience in the working group

2485
01:37:22,239 --> 01:37:24,880
with a related similar topic

2486
01:37:24,880 --> 01:37:28,159
so perhaps we might want to

2487
01:37:28,159 --> 01:37:31,119
approach first the one hop case and the

2488
01:37:31,119 --> 01:37:34,560
mesh under case and perhaps leave route

2489
01:37:34,560 --> 01:37:37,760
over at least for ipv6 udp

2490
01:37:37,760 --> 01:37:41,199
for maybe a later specification

2491
01:37:41,199 --> 01:37:43,600
so well this is perhaps another point to

2492
01:37:43,600 --> 01:37:45,440
to discuss

2493
01:37:45,440 --> 01:37:48,719
and well other than that

2494
01:37:48,719 --> 01:37:49,679
since

2495
01:37:49,679 --> 01:37:52,000
most of the content and the main goals

2496
01:37:52,000 --> 01:37:53,600
and the structure of the document has

2497
01:37:53,600 --> 01:37:55,920
been stable at the moment

2498
01:37:55,920 --> 01:37:58,239
or is getting stable then

2499
01:37:58,239 --> 01:38:00,560
the authors would like to ask the

2500
01:38:00,560 --> 01:38:02,560
working group whether it could be a

2501
01:38:02,560 --> 01:38:06,639
moment a good moment for adoption

2502
01:38:10,239 --> 01:38:14,280
so any comments or questions

2503
01:38:19,840 --> 01:38:22,239
yeah so i think this this is a

2504
01:38:22,239 --> 01:38:24,560
really interesting word custom again by

2505
01:38:24,560 --> 01:38:26,000
the way sorry

2506
01:38:26,000 --> 01:38:27,440
um

2507
01:38:27,440 --> 01:38:29,280
i think you

2508
01:38:29,280 --> 01:38:32,000
as an author you probably want to make

2509
01:38:32,000 --> 01:38:34,800
one or two more rounds

2510
01:38:34,800 --> 01:38:37,040
uh completing the

2511
01:38:37,040 --> 01:38:39,199
architecture before you push this into

2512
01:38:39,199 --> 01:38:40,639
the working group

2513
01:38:40,639 --> 01:38:41,840
um

2514
01:38:41,840 --> 01:38:44,480
because as an author you have more

2515
01:38:44,480 --> 01:38:47,040
flexibility in doing this

2516
01:38:47,040 --> 01:38:49,360
so i would probably look at this

2517
01:38:49,360 --> 01:38:53,360
at ihf 114 but that's just my

2518
01:38:53,360 --> 01:38:55,600
personal opinion if i were author of

2519
01:38:55,600 --> 01:38:57,760
this i would not ask for adoption today

2520
01:38:57,760 --> 01:39:01,119
but try to make sure this is

2521
01:39:01,199 --> 01:39:05,040
complete so the working group does the

2522
01:39:05,040 --> 01:39:08,440
small points

2523
01:39:12,239 --> 01:39:14,480
okay thank you

2524
01:39:14,480 --> 01:39:17,360
any other comments

2525
01:39:22,800 --> 01:39:24,159
okay so

2526
01:39:24,159 --> 01:39:26,639
well i'm not seeing anything else than

2527
01:39:26,639 --> 01:39:27,760
my slides

2528
01:39:27,760 --> 01:39:29,040
so i guess if there are no other

2529
01:39:29,040 --> 01:39:32,960
comments then we can proceed to the next

2530
01:39:32,960 --> 01:39:35,600
presentations on the native short

2531
01:39:35,600 --> 01:39:37,600
address draft

2532
01:39:37,600 --> 01:39:40,840
thank you

2533
01:39:48,480 --> 01:39:49,679
here we go

2534
01:39:49,679 --> 01:39:51,760
native address

2535
01:39:51,760 --> 01:39:52,690
short address

2536
01:39:52,690 --> 01:39:54,560
[Music]

2537
01:39:54,560 --> 01:39:56,320
yeah i'll give you uh i'll give you the

2538
01:39:56,320 --> 01:39:58,000
control let's see if it works i haven't

2539
01:39:58,000 --> 01:40:00,560
seen it work yet

2540
01:40:00,560 --> 01:40:03,360
for me yesterday

2541
01:40:03,520 --> 01:40:06,800
okay so you're participants in the queue

2542
01:40:06,800 --> 01:40:08,639
but i have to find you

2543
01:40:08,639 --> 01:40:10,239
i can't click on your name in the queue

2544
01:40:10,239 --> 01:40:12,080
i have to find you in the rest of the

2545
01:40:12,080 --> 01:40:13,360
thing

2546
01:40:13,360 --> 01:40:15,440
luigi there we go

2547
01:40:15,440 --> 01:40:17,600
past slide control

2548
01:40:17,600 --> 01:40:20,159
does it work

2549
01:40:21,440 --> 01:40:24,080
i think so because it changed yeah

2550
01:40:24,080 --> 01:40:25,840
okay okay

2551
01:40:25,840 --> 01:40:28,880
so i'll give you an update on the

2552
01:40:28,880 --> 01:40:32,480
uh lysix slow native short address draft

2553
01:40:32,480 --> 01:40:33,440
okay

2554
01:40:33,440 --> 01:40:36,440
uh

2555
01:40:37,119 --> 01:40:39,440
no there is not the the

2556
01:40:39,440 --> 01:40:41,760
the right set that's on the right side

2557
01:40:41,760 --> 01:40:44,080
this is for the next uh okay let's let's

2558
01:40:44,080 --> 01:40:46,400
do that properly then

2559
01:40:46,400 --> 01:40:50,239
uh let me see i think you have to exit

2560
01:40:50,239 --> 01:40:51,760
ah

2561
01:40:51,760 --> 01:40:55,199
i can't take it away from you

2562
01:40:56,000 --> 01:40:57,840
yeah quit yeah there you go head request

2563
01:40:57,840 --> 01:41:00,159
again

2564
01:41:01,280 --> 01:41:02,960
yeah you didn't need to put your name in

2565
01:41:02,960 --> 01:41:06,639
it so this is native sort update share

2566
01:41:06,639 --> 01:41:08,719
and

2567
01:41:11,840 --> 01:41:14,320
there we go

2568
01:41:15,360 --> 01:41:17,920
that's great that's the the right deck

2569
01:41:17,920 --> 01:41:19,119
so

2570
01:41:19,119 --> 01:41:21,679
uh that's another an update since uh one

2571
01:41:21,679 --> 01:41:24,639
one two we submitted two revisions one

2572
01:41:24,639 --> 01:41:26,560
in december one uh

2573
01:41:26,560 --> 01:41:27,440
uh

2574
01:41:27,440 --> 01:41:30,080
before the cut-off date in in march so

2575
01:41:30,080 --> 01:41:32,880
not that long ago so the main changes

2576
01:41:32,880 --> 01:41:35,040
between zero zero zero one this is the

2577
01:41:35,040 --> 01:41:37,679
one submitted in in december

2578
01:41:37,679 --> 01:41:40,800
we did quite a lot of text revision

2579
01:41:40,800 --> 01:41:44,880
uh we clarified the the scope uh

2580
01:41:44,880 --> 01:41:47,600
y is in scopo we believe is the scope of

2581
01:41:47,600 --> 01:41:50,800
the six law working group

2582
01:41:50,800 --> 01:41:54,400
uh because we don't actually do really

2583
01:41:54,400 --> 01:41:56,800
routing but it's more on a stateless

2584
01:41:56,800 --> 01:41:58,960
forwarding solution but the main point

2585
01:41:58,960 --> 01:42:01,040
is really addressing and how we build

2586
01:42:01,040 --> 01:42:02,800
addresses okay

2587
01:42:02,800 --> 01:42:06,960
we clarified the applicability of the

2588
01:42:06,960 --> 01:42:10,320
solution for this thanks again to pascal

2589
01:42:10,320 --> 01:42:12,480
that did help a lot in in

2590
01:42:12,480 --> 01:42:15,119
in

2591
01:42:15,119 --> 01:42:17,520
to in the text in order to to really be

2592
01:42:17,520 --> 01:42:19,280
clear

2593
01:42:19,280 --> 01:42:20,080
and

2594
01:42:20,080 --> 01:42:22,639
it's obvious that uh the applicability

2595
01:42:22,639 --> 01:42:24,880
is more in a static deployment because

2596
01:42:24,880 --> 01:42:27,920
as soon as you have a topology changes

2597
01:42:27,920 --> 01:42:30,480
you should renumber or do routing

2598
01:42:30,480 --> 01:42:32,880
okay we don't want to do routing the

2599
01:42:32,880 --> 01:42:34,320
numbering is

2600
01:42:34,320 --> 01:42:36,639
is complicated okay

2601
01:42:36,639 --> 01:42:37,440
and

2602
01:42:37,440 --> 01:42:40,480
we add the text in order to clarify

2603
01:42:40,480 --> 01:42:42,080
the allocation function which is

2604
01:42:42,080 --> 01:42:44,000
basically the function that

2605
01:42:44,000 --> 01:42:45,600
builds the addresses

2606
01:42:45,600 --> 01:42:47,679
and some small discussion about

2607
01:42:47,679 --> 01:42:50,239
simplicity versus optimality

2608
01:42:50,239 --> 01:42:52,960
and we have a new code or wrong that

2609
01:42:52,960 --> 01:42:55,280
jumped on board

2610
01:42:55,280 --> 01:42:58,560
main changes between 0102 which is the

2611
01:42:58,560 --> 01:43:01,440
last that been submitted

2612
01:43:01,440 --> 01:43:04,400
uh again revised the text added some

2613
01:43:04,400 --> 01:43:06,000
stuff

2614
01:43:06,000 --> 01:43:08,239
we did some further work about the

2615
01:43:08,239 --> 01:43:10,800
clarification on the applicability scope

2616
01:43:10,800 --> 01:43:12,239
and we tried to

2617
01:43:12,239 --> 01:43:16,080
move it um earlier in the document

2618
01:43:16,080 --> 01:43:18,000
okay so that it's

2619
01:43:18,000 --> 01:43:20,320
clear right away

2620
01:43:20,320 --> 01:43:23,040
where these uh solution can apply what

2621
01:43:23,040 --> 01:43:25,119
is the use case basically

2622
01:43:25,119 --> 01:43:27,440
we try to clarify the architectural

2623
01:43:27,440 --> 01:43:29,040
overview

2624
01:43:29,040 --> 01:43:29,760
the

2625
01:43:29,760 --> 01:43:32,960
the roles of the of the nodes because we

2626
01:43:32,960 --> 01:43:34,880
have a root then we have for other

2627
01:43:34,880 --> 01:43:37,600
sleeves we try to to better define the

2628
01:43:37,600 --> 01:43:40,000
different roles and what

2629
01:43:40,000 --> 01:43:41,760
each node

2630
01:43:41,760 --> 01:43:44,320
is expected to do okay

2631
01:43:44,320 --> 01:43:45,760
and he

2632
01:43:45,760 --> 01:43:48,719
for the address assignment procedure we

2633
01:43:48,719 --> 01:43:51,920
added uh two neighbor discovery

2634
01:43:51,920 --> 01:43:55,119
options which i will detail in the

2635
01:43:55,119 --> 01:43:57,280
following slides

2636
01:43:57,280 --> 01:43:58,239
so

2637
01:43:58,239 --> 01:44:01,119
the idea is or to leverage on

2638
01:44:01,119 --> 01:44:03,760
nd are already available

2639
01:44:03,760 --> 01:44:07,360
in the sixth slope and okay the

2640
01:44:07,360 --> 01:44:10,639
basically we are two simple options okay

2641
01:44:10,639 --> 01:44:12,560
to request an address

2642
01:44:12,560 --> 01:44:15,920
and as i reply to assign an address from

2643
01:44:15,920 --> 01:44:18,159
the parent node so we call it nsa

2644
01:44:18,159 --> 01:44:20,400
request address option and nsa assign

2645
01:44:20,400 --> 01:44:21,679
address option

2646
01:44:21,679 --> 01:44:23,360
okay

2647
01:44:23,360 --> 01:44:25,440
this means we updated the yana section

2648
01:44:25,440 --> 01:44:26,800
with the

2649
01:44:26,800 --> 01:44:27,679
uh

2650
01:44:27,679 --> 01:44:30,400
right format to request this to allocate

2651
01:44:30,400 --> 01:44:32,639
the options so the request is pretty

2652
01:44:32,639 --> 01:44:34,880
simple it's a type and the type has to

2653
01:44:34,880 --> 01:44:37,520
be allocated by ayana anyway but

2654
01:44:37,520 --> 01:44:39,199
in the request what we put basically is

2655
01:44:39,199 --> 01:44:39,920
the

2656
01:44:39,920 --> 01:44:43,040
uh expected address lifetime it's like i

2657
01:44:43,040 --> 01:44:44,560
want an address

2658
01:44:44,560 --> 01:44:46,960
and i want it for this expected period

2659
01:44:46,960 --> 01:44:49,199
of time okay

2660
01:44:49,199 --> 01:44:52,000
and in in the reply

2661
01:44:52,000 --> 01:44:53,760
what we have is

2662
01:44:53,760 --> 01:44:57,040
basically here is the address

2663
01:44:57,040 --> 01:44:59,600
here is the lifetime that i give to you

2664
01:44:59,600 --> 01:45:02,159
and here is the prefix length okay and

2665
01:45:02,159 --> 01:45:04,320
then there is the actual address

2666
01:45:04,320 --> 01:45:06,560
full format and then the node is able

2667
01:45:06,560 --> 01:45:07,760
actually to

2668
01:45:07,760 --> 01:45:10,560
uh store retrieve the prefix because all

2669
01:45:10,560 --> 01:45:12,560
the information plus

2670
01:45:12,560 --> 01:45:15,679
the nsa address okay because it's

2671
01:45:15,679 --> 01:45:17,600
because of the peculiar format it's very

2672
01:45:17,600 --> 01:45:20,480
easy to extract it uh from the from the

2673
01:45:20,480 --> 01:45:22,719
full address okay details on the in the

2674
01:45:22,719 --> 01:45:25,119
draft anyway

2675
01:45:25,119 --> 01:45:28,639
so on the next step um

2676
01:45:28,639 --> 01:45:30,400
you will see the evaluation in the next

2677
01:45:30,400 --> 01:45:33,920
presentation okay uh rock the league one

2678
01:45:33,920 --> 01:45:36,400
thank you we will give a short demo we

2679
01:45:36,400 --> 01:45:37,520
try to

2680
01:45:37,520 --> 01:45:40,239
uh evaluate a little bit

2681
01:45:40,239 --> 01:45:42,320
how much and where is the game with this

2682
01:45:42,320 --> 01:45:45,840
uh approach we

2683
01:45:45,840 --> 01:45:48,239
we need to incorporate uh further

2684
01:45:48,239 --> 01:45:50,880
feedback that we received actually

2685
01:45:50,880 --> 01:45:53,679
actually after the latest uh submission

2686
01:45:53,679 --> 01:45:56,480
so we have diane carter and carpenter

2687
01:45:56,480 --> 01:45:58,879
adnan

2688
01:45:59,280 --> 01:46:02,480
interesting feedback i have to say

2689
01:46:02,480 --> 01:46:05,280
so all in all we believe the the core of

2690
01:46:05,280 --> 01:46:07,119
this document is stable

2691
01:46:07,119 --> 01:46:10,480
but we need a revision of

2692
01:46:10,480 --> 01:46:12,880
of that document for the the feedback

2693
01:46:12,880 --> 01:46:15,600
okay we expect to do it right away after

2694
01:46:15,600 --> 01:46:17,840
one or three because already we have the

2695
01:46:17,840 --> 01:46:18,960
feedback

2696
01:46:18,960 --> 01:46:21,199
and at that point we may consider

2697
01:46:21,199 --> 01:46:22,560
adoption or

2698
01:46:22,560 --> 01:46:24,639
a working group adoption because again

2699
01:46:24,639 --> 01:46:25,520
we

2700
01:46:25,520 --> 01:46:27,679
the core elements are stable

2701
01:46:27,679 --> 01:46:30,239
there is not that much to be up that we

2702
01:46:30,239 --> 01:46:31,600
think

2703
01:46:31,600 --> 01:46:34,480
and i and that's all

2704
01:46:34,480 --> 01:46:37,199
if there are any comments or question

2705
01:46:37,199 --> 01:46:38,880
further feedback

2706
01:46:38,880 --> 01:46:41,840
everything is welcome

2707
01:46:46,880 --> 01:46:47,840
okay

2708
01:46:47,840 --> 01:46:49,679
nothing in the queue

2709
01:46:49,679 --> 01:46:52,239
okay so yeah maybe just a clarifying

2710
01:46:52,239 --> 01:46:53,920
question

2711
01:46:53,920 --> 01:46:56,320
in the draft you state that the

2712
01:46:56,320 --> 01:46:58,000
applicability would be

2713
01:46:58,000 --> 01:47:00,880
for rather static environments

2714
01:47:00,880 --> 01:47:04,239
with wired wire technologies

2715
01:47:04,239 --> 01:47:07,440
so is that for example plc or do you

2716
01:47:07,440 --> 01:47:11,119
envision other technologies as well

2717
01:47:12,960 --> 01:47:15,920
vm vision are other technologies but we

2718
01:47:15,920 --> 01:47:18,639
are still looking

2719
01:47:18,639 --> 01:47:19,679
at them

2720
01:47:19,679 --> 01:47:20,880
i mean

2721
01:47:20,880 --> 01:47:23,360
we do some bibliographic work and we may

2722
01:47:23,360 --> 01:47:27,360
add a few more references in o3

2723
01:47:27,360 --> 01:47:30,320
but we want to make sure that we we

2724
01:47:30,320 --> 01:47:32,159
we don't say nothing wrong just to add

2725
01:47:32,159 --> 01:47:33,840
some references so

2726
01:47:33,840 --> 01:47:34,800
maybe

2727
01:47:34,800 --> 01:47:36,800
it's the most honest question uh answer

2728
01:47:36,800 --> 01:47:39,119
i can give

2729
01:47:39,119 --> 01:47:41,119
okay thank you yeah it will be good to

2730
01:47:41,119 --> 01:47:43,760
to clarify a bit more what kind of

2731
01:47:43,760 --> 01:47:45,280
scenarios

2732
01:47:45,280 --> 01:47:47,520
would be in place here yeah

2733
01:47:47,520 --> 01:47:48,960
sure

2734
01:47:48,960 --> 01:47:51,840
thank you another question

2735
01:47:54,159 --> 01:47:57,119
uh hello uh to answer this question from

2736
01:47:57,119 --> 01:47:59,360
class um

2737
01:47:59,360 --> 01:48:02,880
accepted uh you accepted the bill plc

2738
01:48:02,880 --> 01:48:06,800
and how there is another fiscal year

2739
01:48:06,800 --> 01:48:08,159
technology

2740
01:48:08,159 --> 01:48:11,760
named apl advanced physical layer

2741
01:48:11,760 --> 01:48:14,639
which is based on the standard

2742
01:48:14,639 --> 01:48:15,760
standard

2743
01:48:15,760 --> 01:48:17,600
standardization

2744
01:48:17,600 --> 01:48:21,040
of ioe 802.3

2745
01:48:21,040 --> 01:48:22,400
ct

2746
01:48:22,400 --> 01:48:23,520
is also

2747
01:48:23,520 --> 01:48:26,960
suitable for this nsc technology in the

2748
01:48:26,960 --> 01:48:30,400
network layer i think

2749
01:48:31,040 --> 01:48:32,719
thanks

2750
01:48:32,719 --> 01:48:33,920
okay thank you

2751
01:48:33,920 --> 01:48:36,320
is just curious is that for uh

2752
01:48:36,320 --> 01:48:39,199
constrained devices is it like maybe

2753
01:48:39,199 --> 01:48:40,320
more general

2754
01:48:40,320 --> 01:48:43,040
which are the typical use cases

2755
01:48:43,040 --> 01:48:46,080
uh yeah uh partly yes there and there

2756
01:48:46,080 --> 01:48:48,560
are many scenarios

2757
01:48:48,560 --> 01:48:50,320
for the

2758
01:48:50,320 --> 01:48:53,600
for the intrinsic safety requirements

2759
01:48:53,600 --> 01:48:56,560
which will constraint the resources of

2760
01:48:56,560 --> 01:48:57,600
the

2761
01:48:57,600 --> 01:49:00,600
gland

2762
01:49:01,760 --> 01:49:03,440
in the industrial

2763
01:49:03,440 --> 01:49:05,919
equipment

2764
01:49:09,520 --> 01:49:11,679
okay thank you

2765
01:49:11,679 --> 01:49:14,880
thank you

2766
01:49:14,880 --> 01:49:18,480
more questions yeah thank you

2767
01:49:20,639 --> 01:49:23,199
uh as a quarter and

2768
01:49:23,199 --> 01:49:25,920
also from the perspective of the

2769
01:49:25,920 --> 01:49:27,440
operators

2770
01:49:27,440 --> 01:49:29,520
so we're working how to use app address

2771
01:49:29,520 --> 01:49:31,679
in most scenarios so

2772
01:49:31,679 --> 01:49:33,679
i think it's a really good way to apply

2773
01:49:33,679 --> 01:49:35,920
the short appeal address without an

2774
01:49:35,920 --> 01:49:38,800
unnecessary routing function in iot so

2775
01:49:38,800 --> 01:49:41,760
maybe i hope the wg could consider this

2776
01:49:41,760 --> 01:49:45,679
work yeah thanks that's all

2777
01:49:50,400 --> 01:49:52,320
okay so

2778
01:49:52,320 --> 01:49:56,199
i'll hand back the control

2779
01:49:58,880 --> 01:50:00,239
okay so

2780
01:50:00,239 --> 01:50:03,679
next is a presentation still on the same

2781
01:50:03,679 --> 01:50:04,800
draft

2782
01:50:04,800 --> 01:50:06,159
however it's

2783
01:50:06,159 --> 01:50:08,638
a demo

2784
01:50:09,360 --> 01:50:10,400
okay

2785
01:50:10,400 --> 01:50:12,320
thanks hello everyone

2786
01:50:12,320 --> 01:50:14,239
and this and this is for the

2787
01:50:14,239 --> 01:50:17,119
demonstration of the nsa allocation

2788
01:50:17,119 --> 01:50:18,239
function

2789
01:50:18,239 --> 01:50:21,920
um and which which is just which is

2790
01:50:21,920 --> 01:50:24,239
described in the draft of native shorter

2791
01:50:24,239 --> 01:50:25,360
address

2792
01:50:25,360 --> 01:50:26,800
version 2.

2793
01:50:26,800 --> 01:50:28,719
next page please

2794
01:50:28,719 --> 01:50:30,639
i gave you the slide control it should

2795
01:50:30,639 --> 01:50:31,920
be at the bottom

2796
01:50:31,920 --> 01:50:33,119
okay

2797
01:50:33,119 --> 01:50:35,598
thank you

2798
01:50:36,400 --> 01:50:39,400
uh

2799
01:50:39,760 --> 01:50:40,719
i i

2800
01:50:40,719 --> 01:50:43,119
can't control

2801
01:50:43,119 --> 01:50:45,679
scroll down

2802
01:50:48,239 --> 01:50:51,799
i don't have it

2803
01:50:52,960 --> 01:50:57,040
i keep trying to pass you slide control

2804
01:50:57,040 --> 01:50:58,800
i don't have it

2805
01:50:58,800 --> 01:51:00,400
i don't have side control and you don't

2806
01:51:00,400 --> 01:51:02,320
let's try again

2807
01:51:02,320 --> 01:51:05,799
okay thank you

2808
01:51:09,840 --> 01:51:11,360
okay so i'll just

2809
01:51:11,360 --> 01:51:12,560
get it next

2810
01:51:12,560 --> 01:51:15,040
there we go

2811
01:51:16,560 --> 01:51:17,679
okay

2812
01:51:17,679 --> 01:51:20,480
and the specifications are described in

2813
01:51:20,480 --> 01:51:22,400
the draft

2814
01:51:22,400 --> 01:51:26,480
today's three points our first oo and

2815
01:51:26,480 --> 01:51:28,639
allocation function of the essay can be

2816
01:51:28,639 --> 01:51:30,400
different caseback is

2817
01:51:30,400 --> 01:51:33,199
but all nodes under the sim root must

2818
01:51:33,199 --> 01:51:35,280
use the sim one

2819
01:51:35,280 --> 01:51:37,599
see section four in the draft

2820
01:51:37,599 --> 01:51:40,960
and for the example algorithm for the

2821
01:51:40,960 --> 01:51:42,480
location function

2822
01:51:42,480 --> 01:51:44,639
is given in the draft

2823
01:51:44,639 --> 01:51:47,599
is very simple and today i'll

2824
01:51:47,599 --> 01:51:49,920
show the demo uh

2825
01:51:49,920 --> 01:51:53,360
implemented based on this algorithm

2826
01:51:53,360 --> 01:51:54,400
and

2827
01:51:54,400 --> 01:51:57,840
so the target address

2828
01:51:57,840 --> 01:52:00,480
will be allocated by

2829
01:52:00,480 --> 01:52:02,560
parent parent address

2830
01:52:02,560 --> 01:52:04,400
uh plus uh

2831
01:52:04,400 --> 01:52:05,840
plus some

2832
01:52:05,840 --> 01:52:07,040
some

2833
01:52:07,040 --> 01:52:10,960
binary one binary ones and uh plus the

2834
01:52:10,960 --> 01:52:12,639
rule uh bit

2835
01:52:12,639 --> 01:52:14,480
uh which

2836
01:52:14,480 --> 01:52:17,599
which indicate uh indicated the

2837
01:52:17,599 --> 01:52:20,800
node is leaf or for order

2838
01:52:20,800 --> 01:52:23,920
and the third point is uh about to

2839
01:52:23,920 --> 01:52:26,800
calculate the maximums of the address

2840
01:52:26,800 --> 01:52:27,679
and the

2841
01:52:27,679 --> 01:52:28,639
maximum

2842
01:52:28,639 --> 01:52:30,960
of the address for a node

2843
01:52:30,960 --> 01:52:34,159
equals the length of the parent address

2844
01:52:34,159 --> 01:52:35,520
plus the

2845
01:52:35,520 --> 01:52:36,560
length

2846
01:52:36,560 --> 01:52:40,719
of the ones and plus one bit

2847
01:52:43,040 --> 01:52:45,599
next please

2848
01:52:45,599 --> 01:52:47,040
thank you

2849
01:52:47,040 --> 01:52:49,440
and the code is very simple uh we can

2850
01:52:49,440 --> 01:52:51,360
see in the slide uh

2851
01:52:51,360 --> 01:52:54,239
only one page for the core code

2852
01:52:54,239 --> 01:52:56,320
for the core code

2853
01:52:56,320 --> 01:52:59,520
of implemented uh allocation function

2854
01:52:59,520 --> 01:53:02,960
and uh most of the parameters uh used by

2855
01:53:02,960 --> 01:53:05,760
the allocation function uh is a uh is a

2856
01:53:05,760 --> 01:53:07,760
lo the local uh

2857
01:53:07,760 --> 01:53:10,239
is a local variables

2858
01:53:10,239 --> 01:53:13,119
and only the parent only the parent

2859
01:53:13,119 --> 01:53:14,239
address

2860
01:53:14,239 --> 01:53:15,360
is uh

2861
01:53:15,360 --> 01:53:18,320
is a global uh context

2862
01:53:18,320 --> 01:53:22,400
uh okay next i'll show uh i'll show the

2863
01:53:22,400 --> 01:53:26,080
um the output of the program next next

2864
01:53:26,080 --> 01:53:28,400
please

2865
01:53:29,679 --> 01:53:31,599
again

2866
01:53:31,599 --> 01:53:32,719
uh no

2867
01:53:32,719 --> 01:53:34,159
okay okay

2868
01:53:34,159 --> 01:53:36,960
so there are there are two keys

2869
01:53:36,960 --> 01:53:40,560
two keys designed uh for the demo uh

2870
01:53:40,560 --> 01:53:43,599
case one is to generate a topology and

2871
01:53:43,599 --> 01:53:46,719
uh send addresses for the topology

2872
01:53:46,719 --> 01:53:50,880
and the parameters is

2873
01:53:50,880 --> 01:53:52,639
will be set

2874
01:53:52,639 --> 01:53:53,760
is

2875
01:53:53,760 --> 01:53:58,400
layers uh or in the topology uh

2876
01:53:58,400 --> 01:54:00,800
of the tree and uh

2877
01:54:00,800 --> 01:54:04,000
the second parameter is uh

2878
01:54:04,000 --> 01:54:05,840
maximum children

2879
01:54:05,840 --> 01:54:07,840
of of

2880
01:54:07,840 --> 01:54:10,320
of each code sorry

2881
01:54:10,320 --> 01:54:13,920
so here we give an example of a

2882
01:54:13,920 --> 01:54:17,119
four layer uh tree topology and uh for

2883
01:54:17,119 --> 01:54:19,440
every node uh how

2884
01:54:19,440 --> 01:54:21,599
have four children

2885
01:54:21,599 --> 01:54:22,719
because

2886
01:54:22,719 --> 01:54:25,440
because we choose the random

2887
01:54:25,440 --> 01:54:26,639
random

2888
01:54:26,639 --> 01:54:28,080
mode so

2889
01:54:28,080 --> 01:54:28,880
um

2890
01:54:28,880 --> 01:54:32,800
not not every node has has a full

2891
01:54:32,800 --> 01:54:34,159
amount of the

2892
01:54:34,159 --> 01:54:36,559
children

2893
01:54:36,960 --> 01:54:39,520
so for the output

2894
01:54:39,520 --> 01:54:40,480
of the

2895
01:54:40,480 --> 01:54:42,400
program we can see

2896
01:54:42,400 --> 01:54:43,679
um

2897
01:54:43,679 --> 01:54:44,800
there are

2898
01:54:44,800 --> 01:54:47,840
there are totally uh 23 nodes

2899
01:54:47,840 --> 01:54:51,440
and the maximum address length is six uh

2900
01:54:51,440 --> 01:54:53,599
owned by the blue nodes

2901
01:54:53,599 --> 01:54:56,000
and the average average length of the

2902
01:54:56,000 --> 01:54:59,119
addresses is only four four bits

2903
01:54:59,119 --> 01:55:04,080
so as uh so and this will will prove um

2904
01:55:04,080 --> 01:55:04,960
the

2905
01:55:04,960 --> 01:55:06,800
the efficiency of the allocation

2906
01:55:06,800 --> 01:55:07,920
function

2907
01:55:07,920 --> 01:55:10,080
is very high

2908
01:55:10,080 --> 01:55:14,400
uh okay next please we'll go to case two

2909
01:55:14,400 --> 01:55:17,920
focus two uh the program will read a

2910
01:55:17,920 --> 01:55:21,040
arbitrary graph from a file and uh try

2911
01:55:21,040 --> 01:55:24,159
to allocate nsa addresses for um for the

2912
01:55:24,159 --> 01:55:25,199
file

2913
01:55:25,199 --> 01:55:29,679
and there are uh totally uh 21 21 nodes

2914
01:55:29,679 --> 01:55:30,719
in

2915
01:55:30,719 --> 01:55:33,760
in the input file and after the

2916
01:55:33,760 --> 01:55:35,599
allocation we can see

2917
01:55:35,599 --> 01:55:40,080
uh the correct uh the correct

2918
01:55:40,080 --> 01:55:42,560
uh nsa addresses uh

2919
01:55:42,560 --> 01:55:43,599
had been

2920
01:55:43,599 --> 01:55:47,040
successfully uh allocated

2921
01:55:47,040 --> 01:55:47,920
okay

2922
01:55:47,920 --> 01:55:50,960
next i'll request the request to share

2923
01:55:50,960 --> 01:55:57,480
my html screen and to show the left then

2924
01:56:10,400 --> 01:56:13,400
yes

2925
01:56:16,000 --> 01:56:16,960
okay

2926
01:56:16,960 --> 01:56:20,560
and the shared screen is okay for you

2927
01:56:20,560 --> 01:56:22,639
yes we see it

2928
01:56:22,639 --> 01:56:24,560
okay thank you

2929
01:56:24,560 --> 01:56:25,679
and

2930
01:56:25,679 --> 01:56:28,639
we can run on the program

2931
01:56:28,639 --> 01:56:29,760
and

2932
01:56:29,760 --> 01:56:31,679
see

2933
01:56:31,679 --> 01:56:34,639
see the parameters in

2934
01:56:34,639 --> 01:56:37,040
four and four

2935
01:56:37,040 --> 01:56:40,560
we can we can feel um we'll we can feel

2936
01:56:40,560 --> 01:56:44,000
larger numbers but because display

2937
01:56:44,000 --> 01:56:45,840
display problems

2938
01:56:45,840 --> 01:56:48,320
so we use

2939
01:56:48,320 --> 01:56:52,239
four and and four as example

2940
01:56:52,239 --> 01:56:54,840
and we can use a

2941
01:56:54,840 --> 01:56:58,159
random and generate generated the

2942
01:56:58,159 --> 01:57:00,239
topology and

2943
01:57:00,239 --> 01:57:03,840
evaluate the length of the devices

2944
01:57:03,840 --> 01:57:05,360
and there are

2945
01:57:05,360 --> 01:57:08,080
16 nodes and every address length is

2946
01:57:08,080 --> 01:57:10,719
only three bits and the maximum length

2947
01:57:10,719 --> 01:57:11,840
is six

2948
01:57:11,840 --> 01:57:13,520
and we can draw

2949
01:57:13,520 --> 01:57:15,599
this

2950
01:57:15,599 --> 01:57:18,880
so we can see and the max the maximum

2951
01:57:18,880 --> 01:57:21,440
length uh is six

2952
01:57:21,440 --> 01:57:22,639
and the in

2953
01:57:22,639 --> 01:57:25,840
for the balloons

2954
01:57:25,840 --> 01:57:29,040
after we have after we have this and

2955
01:57:29,040 --> 01:57:30,639
this tree and

2956
01:57:30,639 --> 01:57:33,840
the um the nodes can calculate the next

2957
01:57:33,840 --> 01:57:35,280
hope that

2958
01:57:35,280 --> 01:57:38,800
there's a destination address and not

2959
01:57:38,800 --> 01:57:40,560
rely on the

2960
01:57:40,560 --> 01:57:42,400
separate and separate

2961
01:57:42,400 --> 01:57:45,040
routing table

2962
01:57:45,040 --> 01:57:45,920
and

2963
01:57:45,920 --> 01:57:47,920
for case 2 we can

2964
01:57:47,920 --> 01:57:49,199
load

2965
01:57:49,199 --> 01:57:50,960
sorry

2966
01:57:50,960 --> 01:57:53,440
let me

2967
01:57:53,440 --> 01:57:57,679
let me delete the output file first

2968
01:57:57,679 --> 01:57:59,040
and

2969
01:57:59,040 --> 01:58:01,679
select

2970
01:58:03,040 --> 01:58:06,920
code code space

2971
01:58:10,080 --> 01:58:11,920
sorry

2972
01:58:11,920 --> 01:58:13,920
oh okay cody space

2973
01:58:13,920 --> 01:58:17,440
and i see product and the example

2974
01:58:17,440 --> 01:58:19,119
topology

2975
01:58:19,119 --> 01:58:21,599
okay we can see the addresses are

2976
01:58:21,599 --> 01:58:23,679
allocated successfully

2977
01:58:23,679 --> 01:58:25,599
and the output

2978
01:58:25,599 --> 01:58:29,040
file is generated

2979
01:58:29,040 --> 01:58:31,199
and

2980
01:58:31,840 --> 01:58:34,400
okay this is the input file we can see

2981
01:58:34,400 --> 01:58:35,440
no

2982
01:58:35,440 --> 01:58:38,960
no addresses is labeled for the nodes

2983
01:58:38,960 --> 01:58:41,119
but after allocation

2984
01:58:41,119 --> 01:58:43,679
we can see the address the

2985
01:58:43,679 --> 01:58:46,400
ac address is labeled for every

2986
01:58:46,400 --> 01:58:48,639
for every node here

2987
01:58:48,639 --> 01:58:52,000
okay and that's the whole demonstration

2988
01:58:52,000 --> 01:58:53,040
here

2989
01:58:53,040 --> 01:58:55,119
any questions or comments

2990
01:58:55,119 --> 01:58:58,360
thank you

2991
01:59:02,080 --> 01:59:04,880
ahead pascal

2992
01:59:08,400 --> 01:59:10,480
you had a question pascal

2993
01:59:10,480 --> 01:59:12,639
okay let's stay for information

2994
01:59:12,639 --> 01:59:13,520
um

2995
01:59:13,520 --> 01:59:16,560
then i can see where it can be useful

2996
01:59:16,560 --> 01:59:18,239
in

2997
01:59:18,239 --> 01:59:20,639
specifically hardware environments like

2998
01:59:20,639 --> 01:59:23,440
or if you look at the harness

2999
01:59:23,440 --> 01:59:24,880
where every

3000
01:59:24,880 --> 01:59:27,840
uid every every device has a very fixed

3001
01:59:27,840 --> 01:59:30,239
position in a kind of an electrical

3002
01:59:30,239 --> 01:59:31,599
wiring

3003
01:59:31,599 --> 01:59:34,639
then i can see that this amplifies the

3004
01:59:34,639 --> 01:59:35,840
rod

3005
01:59:35,840 --> 01:59:38,400
inside the harness and avoids having a

3006
01:59:38,400 --> 01:59:39,840
point to point

3007
01:59:39,840 --> 01:59:42,800
uh i'm sorry a star typology on the

3008
01:59:42,800 --> 01:59:45,679
harness which consumes more copper so i

3009
01:59:45,679 --> 01:59:49,920
really can see how this can be useful

3010
01:59:49,920 --> 01:59:51,599
on the other hand we have this this

3011
01:59:51,599 --> 01:59:54,960
concern that the way it's done today

3012
01:59:54,960 --> 01:59:58,480
implies that you're building a tree

3013
01:59:58,480 --> 01:59:59,840
and

3014
01:59:59,840 --> 02:00:01,440
i would like

3015
02:00:01,440 --> 02:00:03,119
the next generation of this document and

3016
02:00:03,119 --> 02:00:04,880
they see that fuji is being occupied and

3017
02:00:04,880 --> 02:00:08,320
that's sad because i'm talking to him

3018
02:00:08,320 --> 02:00:11,119
but i i would like the next generation

3019
02:00:11,119 --> 02:00:13,360
of the draft to cover a

3020
02:00:13,360 --> 02:00:14,880
more

3021
02:00:14,880 --> 02:00:16,800
meshed apology

3022
02:00:16,800 --> 02:00:19,040
possibly two non-congruent trees or

3023
02:00:19,040 --> 02:00:23,040
something so so two addresses per device

3024
02:00:23,040 --> 02:00:24,560
so that if you have a wiring which

3025
02:00:24,560 --> 02:00:26,480
allows to to pass to reach the same

3026
02:00:26,480 --> 02:00:28,320
device it would effectively get

3027
02:00:28,320 --> 02:00:30,480
addresses and you could send the packet

3028
02:00:30,480 --> 02:00:32,239
to the two addresses to make sure that

3029
02:00:32,239 --> 02:00:33,679
one of the packets reaches the

3030
02:00:33,679 --> 02:00:34,800
destination

3031
02:00:34,800 --> 02:00:36,880
so basically what i'm what i'm saying is

3032
02:00:36,880 --> 02:00:39,599
iot environments we like

3033
02:00:39,599 --> 02:00:40,800
redundancy

3034
02:00:40,800 --> 02:00:43,199
and you talked about safety networks etc

3035
02:00:43,199 --> 02:00:44,880
safety network condition one it's

3036
02:00:44,880 --> 02:00:46,320
redundant

3037
02:00:46,320 --> 02:00:49,280
and so please consider how you would

3038
02:00:49,280 --> 02:00:51,679
build not one but two trees and and

3039
02:00:51,679 --> 02:00:53,520
different addresses and redundancy and

3040
02:00:53,520 --> 02:00:56,880
that would make it really suitable

3041
02:00:56,880 --> 02:00:58,719
you see you see the point a tree is not

3042
02:00:58,719 --> 02:00:59,920
enough

3043
02:00:59,920 --> 02:01:03,199
one single tree is not enough

3044
02:01:03,199 --> 02:01:05,840
thank you but in case two we read a

3045
02:01:05,840 --> 02:01:07,520
topology

3046
02:01:07,520 --> 02:01:09,360
which is not a tree

3047
02:01:09,360 --> 02:01:12,880
it's a graph and we can

3048
02:01:12,880 --> 02:01:15,280
but the routing has to follow

3049
02:01:15,280 --> 02:01:16,960
because you know the writing the path of

3050
02:01:16,960 --> 02:01:19,040
the packet along the graph

3051
02:01:19,040 --> 02:01:21,040
is exactly my point the path of the

3052
02:01:21,040 --> 02:01:22,719
packets along the graph is limited

3053
02:01:22,719 --> 02:01:24,800
because of the addressing right

3054
02:01:24,800 --> 02:01:26,960
because you have to follow the addresses

3055
02:01:26,960 --> 02:01:28,159
it's my understanding you don't have a

3056
02:01:28,159 --> 02:01:29,599
routing protocol

3057
02:01:29,599 --> 02:01:31,760
so if you basically want to use two

3058
02:01:31,760 --> 02:01:34,080
different non-concurrent paths to the

3059
02:01:34,080 --> 02:01:35,920
same device you need to give it two

3060
02:01:35,920 --> 02:01:39,599
addresses on two different topologies

3061
02:01:39,760 --> 02:01:41,920
make sense no sense we can follow the

3062
02:01:41,920 --> 02:01:44,480
mailing list

3063
02:01:44,960 --> 02:01:47,040
sorry i i didn't

3064
02:01:47,040 --> 02:01:50,880
follow your question um okay

3065
02:01:50,880 --> 02:01:52,639
you have you have a mesh right you

3066
02:01:52,639 --> 02:01:54,400
showed the mesh effectively and you can

3067
02:01:54,400 --> 02:01:57,520
show it back if you like now the path of

3068
02:01:57,520 --> 02:01:58,880
a packet

3069
02:01:58,880 --> 02:02:00,639
my understanding is that it is

3070
02:02:00,639 --> 02:02:02,000
constrained

3071
02:02:02,000 --> 02:02:03,440
by the address

3072
02:02:03,440 --> 02:02:04,719
as following

3073
02:02:04,719 --> 02:02:07,679
the bits basically so the path the

3074
02:02:07,679 --> 02:02:10,000
effective path in this mesh

3075
02:02:10,000 --> 02:02:12,159
is a tray

3076
02:02:12,159 --> 02:02:15,119
and i see that as a limitation because

3077
02:02:15,119 --> 02:02:15,920
we

3078
02:02:15,920 --> 02:02:18,320
we want redundancy so what i encourage

3079
02:02:18,320 --> 02:02:20,000
you to look at

3080
02:02:20,000 --> 02:02:22,719
is something like giving two addresses

3081
02:02:22,719 --> 02:02:24,800
to the device to build two trees which

3082
02:02:24,800 --> 02:02:26,639
would not be congruent

3083
02:02:26,639 --> 02:02:29,599
so that each address can be reached

3084
02:02:29,599 --> 02:02:31,360
even if there is a failure

3085
02:02:31,360 --> 02:02:32,800
otherwise you know you break someone in

3086
02:02:32,800 --> 02:02:34,000
the tree the whole sub tree is

3087
02:02:34,000 --> 02:02:36,639
disconnected

3088
02:02:38,719 --> 02:02:42,480
um why does this connection occur

3089
02:02:42,480 --> 02:02:44,880
because our dedicated

3090
02:02:44,880 --> 02:02:46,880
scenario is

3091
02:02:46,880 --> 02:02:51,840
uh is more is a stable topology

3092
02:02:51,840 --> 02:02:53,280
if maybe

3093
02:02:53,280 --> 02:02:55,119
if one of the notes

3094
02:02:55,119 --> 02:02:56,400
breaks

3095
02:02:56,400 --> 02:02:58,880
in in the tree that you showed

3096
02:02:58,880 --> 02:03:01,040
the addressing is a tree right even if

3097
02:03:01,040 --> 02:03:02,719
you build on a mesh the addressing is a

3098
02:03:02,719 --> 02:03:04,000
tree

3099
02:03:04,000 --> 02:03:05,599
if you break a node somewhere in the

3100
02:03:05,599 --> 02:03:07,599
tree you need to go you can only go

3101
02:03:07,599 --> 02:03:10,000
through that node to reach the children

3102
02:03:10,000 --> 02:03:10,880
right

3103
02:03:10,880 --> 02:03:12,960
because you follow the addresses

3104
02:03:12,960 --> 02:03:14,480
so if you break this node you lose the

3105
02:03:14,480 --> 02:03:16,959
subtract

3106
02:03:17,599 --> 02:03:18,400
yes

3107
02:03:18,400 --> 02:03:19,599
correct

3108
02:03:19,599 --> 02:03:21,040
yeah yeah

3109
02:03:21,040 --> 02:03:23,440
one no one under the break yes

3110
02:03:23,440 --> 02:03:25,199
we lost yes you lose the subtraction

3111
02:03:25,199 --> 02:03:27,280
yeah iot and mostly the use case that

3112
02:03:27,280 --> 02:03:29,119
you gave of safety you require

3113
02:03:29,119 --> 02:03:32,080
redundancy it's a must

3114
02:03:32,080 --> 02:03:35,040
you you have to have two paths

3115
02:03:35,040 --> 02:03:36,800
you have to have non-congruent that's

3116
02:03:36,800 --> 02:03:40,239
why ripple builds geodex correct so so

3117
02:03:40,239 --> 02:03:42,639
the next instrument is draft

3118
02:03:42,639 --> 02:03:44,239
the next version of this draft if you

3119
02:03:44,239 --> 02:03:47,040
could show how you build two trees

3120
02:03:47,040 --> 02:03:49,440
and and find the two paths non-concrete

3121
02:03:49,440 --> 02:03:51,599
so probably you have two addresses

3122
02:03:51,599 --> 02:03:55,840
uh then then that would give you a real

3123
02:03:55,840 --> 02:03:58,719
that's my suggestion for you

3124
02:03:58,719 --> 02:04:00,880
okay so thank you for the

3125
02:04:00,880 --> 02:04:02,079
discussions

3126
02:04:02,079 --> 02:04:03,040
uh

3127
02:04:03,040 --> 02:04:04,960
yeah sorry yeah we are three minutes

3128
02:04:04,960 --> 02:04:07,440
four minutes already past the time

3129
02:04:07,440 --> 02:04:09,679
so thanks a lot for all the discussions

3130
02:04:09,679 --> 02:04:11,679
and let's continue discussing on the

3131
02:04:11,679 --> 02:04:12,880
mailing list

3132
02:04:12,880 --> 02:04:16,079
and the well the session ends here and

3133
02:04:16,079 --> 02:04:18,639
let's hope we'll see each other

3134
02:04:18,639 --> 02:04:22,800
in person or virtually in the next idf

3135
02:04:22,880 --> 02:04:27,560
okay thank you chair thank you

3136
02:04:41,119 --> 02:04:42,880
are we done

3137
02:04:42,880 --> 02:04:44,960
yeah it seems we're done so

3138
02:04:44,960 --> 02:04:46,639
thanks a lot michael

3139
02:04:46,639 --> 02:04:48,480
welcome good thank you mike thank you

3140
02:04:48,480 --> 02:04:52,519
michael have a nice lunch everyone

3141
02:04:53,760 --> 02:04:56,159
see you in philadelphia

3142
02:04:56,159 --> 02:04:58,879
see you i hope

3143
02:04:59,119 --> 02:05:01,440
thank you bye thanks

3144
02:05:01,440 --> 02:05:05,079
bye thank you

3145
02:05:24,079 --> 02:05:26,159
you

