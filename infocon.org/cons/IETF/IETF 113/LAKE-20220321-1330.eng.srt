1
00:00:10,960 --> 00:00:13,960
so

2
00:00:21,439 --> 00:00:23,920
so can you keep an eye on the timings of

3
00:00:23,920 --> 00:00:25,599
the presentation yeah

4
00:00:25,599 --> 00:00:27,039
okay

5
00:00:27,039 --> 00:00:30,039
so

6
00:00:30,720 --> 00:00:34,920
okay so that worked there

7
00:00:36,640 --> 00:00:39,640
now

8
00:00:50,079 --> 00:00:51,840
so the matrix

9
00:00:51,840 --> 00:00:54,800
and jabber are linked with the zulu

10
00:00:54,800 --> 00:00:56,879
the lip is not

11
00:00:56,879 --> 00:00:58,480
it works but it's not connected to the

12
00:00:58,480 --> 00:01:00,718
boss

13
00:01:03,280 --> 00:01:04,400
typing

14
00:01:04,400 --> 00:01:07,640
no indeed

15
00:01:12,400 --> 00:01:15,600
but i get insulip the messages from

16
00:01:15,600 --> 00:01:17,840
jamba

17
00:01:17,840 --> 00:01:20,400
no those are

18
00:01:20,400 --> 00:01:21,439
not

19
00:01:21,439 --> 00:01:26,119
so these were sent on the lake stream

20
00:01:27,200 --> 00:01:30,799
okay so it's working one way

21
00:01:31,200 --> 00:01:32,079
yep

22
00:01:32,079 --> 00:01:33,520
yeah

23
00:01:33,520 --> 00:01:37,158
i'll keep an eye on

24
00:01:47,680 --> 00:01:51,520
okay so should we wait or

25
00:01:51,920 --> 00:01:52,840
hard to

26
00:01:52,840 --> 00:01:54,399
know universe

27
00:01:54,399 --> 00:01:56,640
yeah

28
00:01:56,799 --> 00:02:01,600
how many people are 35 in me taco

29
00:02:02,799 --> 00:02:04,880
so we should just remind them to sign in

30
00:02:04,880 --> 00:02:08,758
to meet rico yeah

31
00:02:10,399 --> 00:02:12,160
so just for remote people we'll give it

32
00:02:12,160 --> 00:02:13,760
another minute as people

33
00:02:13,760 --> 00:02:15,200
put down their cookies and coffees and

34
00:02:15,200 --> 00:02:17,360
come into the room

35
00:02:17,360 --> 00:02:20,840
and then we'll start

36
00:02:31,040 --> 00:02:34,040
so

37
00:02:36,400 --> 00:02:39,400
hmm

38
00:02:50,959 --> 00:02:54,440
i can do that

39
00:03:08,319 --> 00:03:10,080
all right good afternoon for the people

40
00:03:10,080 --> 00:03:11,760
here good morning good evening whatever

41
00:03:11,760 --> 00:03:14,720
it is for remote people um

42
00:03:14,720 --> 00:03:17,680
welcome to the lake session at

43
00:03:17,680 --> 00:03:20,800
itf 113

44
00:03:21,120 --> 00:03:25,360
we've fairly full agenda today so

45
00:03:25,440 --> 00:03:28,560
we'll be trying to keep the time uh i

46
00:03:28,560 --> 00:03:29,680
think i'm gonna do some of the

47
00:03:29,680 --> 00:03:31,440
administrative stuff but it's just going

48
00:03:31,440 --> 00:03:33,360
to look after the technical content but

49
00:03:33,360 --> 00:03:35,519
i'll be hassling people

50
00:03:35,519 --> 00:03:36,879
if they're using too much time or

51
00:03:36,879 --> 00:03:40,159
getting close to their time

52
00:03:40,159 --> 00:03:42,480
so this is the note well

53
00:03:42,480 --> 00:03:44,400
you should all be aware that you should

54
00:03:44,400 --> 00:03:46,879
all be nice to each other

55
00:03:46,879 --> 00:03:51,599
our agenda and links are there

56
00:03:52,159 --> 00:03:54,400
i'm keeping an eye on the jabber we have

57
00:03:54,400 --> 00:03:57,040
no takers

58
00:03:58,080 --> 00:03:59,360
thank you

59
00:03:59,360 --> 00:04:00,400
and

60
00:04:00,400 --> 00:04:01,840
um

61
00:04:01,840 --> 00:04:04,319
as far as i can see that

62
00:04:04,319 --> 00:04:06,879
the jabra room is connected to meet echo

63
00:04:06,879 --> 00:04:09,040
and to the matrix stuff that's no longer

64
00:04:09,040 --> 00:04:10,799
supported

65
00:04:10,799 --> 00:04:12,720
and it seems to be unidirectional

66
00:04:12,720 --> 00:04:15,280
talking to zulup if you're using xulip

67
00:04:15,280 --> 00:04:16,238
so

68
00:04:16,238 --> 00:04:18,478
if you write a message in zulup i might

69
00:04:18,478 --> 00:04:19,600
see it here

70
00:04:19,600 --> 00:04:22,639
but other people might not

71
00:04:24,160 --> 00:04:26,000
okay so

72
00:04:26,000 --> 00:04:27,280
since this is a hybrid meeting it's a

73
00:04:27,280 --> 00:04:28,400
little bit different

74
00:04:28,400 --> 00:04:30,080
and since it's monday you may as well

75
00:04:30,080 --> 00:04:31,360
repeat this

76
00:04:31,360 --> 00:04:33,759
so the blue sheets are for the people in

77
00:04:33,759 --> 00:04:35,680
the room you need to sign into the data

78
00:04:35,680 --> 00:04:37,759
tracker

79
00:04:37,759 --> 00:04:39,440
so please do that to make sure you're

80
00:04:39,440 --> 00:04:41,680
counted

81
00:04:41,680 --> 00:04:44,479
there is a um

82
00:04:44,479 --> 00:04:47,759
there is a on-site tool

83
00:04:47,759 --> 00:04:50,560
that allows you to join the mic line

84
00:04:50,560 --> 00:04:53,520
and to take part in polls

85
00:04:53,520 --> 00:04:54,479
uh

86
00:04:54,479 --> 00:04:56,160
that's that's a pretty limited interface

87
00:04:56,160 --> 00:04:57,440
so you might want to just join that in

88
00:04:57,440 --> 00:04:58,639
your phone and

89
00:04:58,639 --> 00:05:00,400
be in the other one on your on your

90
00:05:00,400 --> 00:05:02,320
laptop if you didn't

91
00:05:02,320 --> 00:05:04,479
uh for remote people again usual things

92
00:05:04,479 --> 00:05:06,400
make sure audio and video are off unless

93
00:05:06,400 --> 00:05:08,320
you're presenting

94
00:05:08,320 --> 00:05:10,080
i think the plan is that the

95
00:05:10,080 --> 00:05:11,680
militia is going to share the slides but

96
00:05:11,680 --> 00:05:12,960
hand over control to the remote

97
00:05:12,960 --> 00:05:14,560
presenters because i think most people

98
00:05:14,560 --> 00:05:16,080
are remote

99
00:05:16,080 --> 00:05:17,919
and again for the chat if you want us to

100
00:05:17,919 --> 00:05:19,280
repeat something then just preface it

101
00:05:19,280 --> 00:05:21,679
with mike

102
00:05:23,360 --> 00:05:24,800
okay so

103
00:05:24,800 --> 00:05:27,919
our agenda we've got two hours

104
00:05:27,919 --> 00:05:29,840
we're on the first point uh militia will

105
00:05:29,840 --> 00:05:32,800
give a quick update we have reports on

106
00:05:32,800 --> 00:05:34,479
hackathon

107
00:05:34,479 --> 00:05:36,639
some developer feedback

108
00:05:36,639 --> 00:05:39,039
uh militia has some implementation

109
00:05:39,039 --> 00:05:41,199
feedback as well security updates

110
00:05:41,199 --> 00:05:43,360
then we'll be talking about the various

111
00:05:43,360 --> 00:05:44,960
pieces of analysis work that have been

112
00:05:44,960 --> 00:05:48,880
happening on uh the current drafts

113
00:05:48,880 --> 00:05:51,600
uh uran will talk again then about you

114
00:05:51,600 --> 00:05:53,840
know some of the

115
00:05:53,840 --> 00:05:55,360
issues and and

116
00:05:55,360 --> 00:05:57,120
change requests and so on that have been

117
00:05:57,120 --> 00:05:58,479
applied to the editor's copy of the

118
00:05:58,479 --> 00:05:59,360
draft

119
00:05:59,360 --> 00:06:01,919
and next steps

120
00:06:01,919 --> 00:06:04,160
so just does anybody want to bash the

121
00:06:04,160 --> 00:06:07,160
agenda

122
00:06:07,680 --> 00:06:10,160
there's the first part

123
00:06:10,160 --> 00:06:13,280
there's the second part

124
00:06:13,360 --> 00:06:16,000
i'm not seeing anybody joining the queue

125
00:06:16,000 --> 00:06:18,080
or in the room oh by the way if you you

126
00:06:18,080 --> 00:06:20,080
know in theory if you're in the room

127
00:06:20,080 --> 00:06:21,440
here and you want to join the mic line

128
00:06:21,440 --> 00:06:22,560
you should hit the button and then join

129
00:06:22,560 --> 00:06:24,080
the mic line just to keep you in the

130
00:06:24,080 --> 00:06:25,360
right order

131
00:06:25,360 --> 00:06:27,360
we'll see how that you know

132
00:06:27,360 --> 00:06:28,720
it's a nice thing to do but we'll see if

133
00:06:28,720 --> 00:06:31,199
it's needed

134
00:06:33,199 --> 00:06:35,600
okay so with i think that's the

135
00:06:35,600 --> 00:06:38,639
administrative done

136
00:06:39,199 --> 00:06:42,880
you can pick your next set of slides

137
00:06:44,960 --> 00:06:46,800
okay so hello everyone so this is

138
00:06:46,800 --> 00:06:48,960
malicious speaking

139
00:06:48,960 --> 00:06:50,720
on behalf of me and steve on behalf of

140
00:06:50,720 --> 00:06:52,080
me and stephen

141
00:06:52,080 --> 00:06:54,080
so just to give a quick update on the

142
00:06:54,080 --> 00:06:56,720
status of the working group since the

143
00:06:56,720 --> 00:06:58,479
last itf meeting

144
00:06:58,479 --> 00:07:02,560
so we have adopted the lake traces draft

145
00:07:02,560 --> 00:07:05,199
just after the last meeting

146
00:07:05,199 --> 00:07:08,639
we have declared the ad hoc specific

147
00:07:08,639 --> 00:07:10,960
specification it's in its 12th version

148
00:07:10,960 --> 00:07:13,199
as ready for formal analysis

149
00:07:13,199 --> 00:07:15,680
and went ahead and published an article

150
00:07:15,680 --> 00:07:18,000
in ieee computer magazine inviting the

151
00:07:18,000 --> 00:07:21,440
academic community to study the protocol

152
00:07:21,440 --> 00:07:24,160
so the the article kind of summarizes

153
00:07:24,160 --> 00:07:26,080
the the protocol and invites the

154
00:07:26,080 --> 00:07:27,919
community to study it in its different

155
00:07:27,919 --> 00:07:30,240
model and which proved to be a good idea

156
00:07:30,240 --> 00:07:32,000
because we already received quite some

157
00:07:32,000 --> 00:07:34,319
feedback as you will see during the

158
00:07:34,319 --> 00:07:35,919
this meeting

159
00:07:35,919 --> 00:07:37,919
uh because of that the ad hoc

160
00:07:37,919 --> 00:07:40,240
specification was frozen

161
00:07:40,240 --> 00:07:43,599
uh meaning that we did not publish any

162
00:07:43,599 --> 00:07:46,720
new versions in the data tracker

163
00:07:46,720 --> 00:07:50,080
since itf-112 but the author team was

164
00:07:50,080 --> 00:07:52,960
not lazy and then they kept working on

165
00:07:52,960 --> 00:07:56,080
the specification in github so currently

166
00:07:56,080 --> 00:07:58,319
the latest version is the editors

167
00:07:58,319 --> 00:08:00,720
version in github

168
00:08:00,720 --> 00:08:02,800
that said we will be discussing the next

169
00:08:02,800 --> 00:08:04,720
steps how to proceed and how to get

170
00:08:04,720 --> 00:08:06,000
organized

171
00:08:06,000 --> 00:08:08,000
considering these concurrent activities

172
00:08:08,000 --> 00:08:09,840
that are taking place

173
00:08:09,840 --> 00:08:11,599
so

174
00:08:11,599 --> 00:08:14,639
we will present uh today's meeting is a

175
00:08:14,639 --> 00:08:17,039
little bit peculiar in that we have the

176
00:08:17,039 --> 00:08:18,800
chartered items at the end of the

177
00:08:18,800 --> 00:08:20,960
meeting the

178
00:08:20,960 --> 00:08:22,639
items of the charter of the working

179
00:08:22,639 --> 00:08:23,440
group

180
00:08:23,440 --> 00:08:25,280
this is because

181
00:08:25,280 --> 00:08:27,520
we are giving priority now to the

182
00:08:27,520 --> 00:08:29,840
analysis that is taking place and the

183
00:08:29,840 --> 00:08:31,919
main chunk of the meeting will be given

184
00:08:31,919 --> 00:08:34,880
to the uh to the security analysis uh

185
00:08:34,880 --> 00:08:37,679
from different teams that are involved

186
00:08:37,679 --> 00:08:38,559
uh

187
00:08:38,559 --> 00:08:40,640
so just to give a brief overview of

188
00:08:40,640 --> 00:08:42,559
about this article that was published in

189
00:08:42,559 --> 00:08:45,200
ieee computer magazine it summarizes i

190
00:08:45,200 --> 00:08:46,720
said it summarized the protocol i

191
00:08:46,720 --> 00:08:48,880
presented it briefly before it was even

192
00:08:48,880 --> 00:08:52,000
published during the last itf meeting

193
00:08:52,000 --> 00:08:54,800
uh it invites the community to study uh

194
00:08:54,800 --> 00:08:57,440
the protocol in the two models symbolic

195
00:08:57,440 --> 00:08:59,920
and the computational as well as the the

196
00:08:59,920 --> 00:09:02,399
implement to provide some feedback and

197
00:09:02,399 --> 00:09:05,600
code on uh the implementation security

198
00:09:05,600 --> 00:09:09,839
so we have eric in the queue eric

199
00:09:10,160 --> 00:09:13,120
oh okay just that

200
00:09:13,120 --> 00:09:14,880
oh if you sign into the tracker for the

201
00:09:14,880 --> 00:09:17,839
session you're in the bushes

202
00:09:18,160 --> 00:09:20,320
yeah so the blue sheet is implicit when

203
00:09:20,320 --> 00:09:22,640
you sign in for the session

204
00:09:22,640 --> 00:09:24,240
yeah and the last point on this one is

205
00:09:24,240 --> 00:09:26,160
like if you didn't notice

206
00:09:26,160 --> 00:09:28,000
once i was correcting the proof of the

207
00:09:28,000 --> 00:09:30,399
article in ieee computer magazine i

208
00:09:30,399 --> 00:09:33,200
found out that cosy stands for common

209
00:09:33,200 --> 00:09:35,760
open software environment protocol so

210
00:09:35,760 --> 00:09:38,640
that was kind of funny so yes we went

211
00:09:38,640 --> 00:09:41,279
ahead and corrected but it was a bit

212
00:09:41,279 --> 00:09:43,120
it was it was a

213
00:09:43,120 --> 00:09:44,720
funny situation with all the details

214
00:09:44,720 --> 00:09:46,399
that we've been working on in terms of

215
00:09:46,399 --> 00:09:48,160
this article and then the whole the big

216
00:09:48,160 --> 00:09:51,120
old the big title coming out wrong

217
00:09:51,120 --> 00:09:54,480
so yes that was corrected

218
00:09:55,760 --> 00:09:58,320
uh so as i said today's meeting is

219
00:09:58,320 --> 00:10:01,519
focused on community feedback uh so we

220
00:10:01,519 --> 00:10:03,760
have two presentations from the

221
00:10:03,760 --> 00:10:07,360
implementers uh as well as i will give

222
00:10:07,360 --> 00:10:09,440
as a participant of the working group

223
00:10:09,440 --> 00:10:10,640
give a presentation on the

224
00:10:10,640 --> 00:10:13,040
implementation security update that is

225
00:10:13,040 --> 00:10:15,360
also kind of implementer feedback

226
00:10:15,360 --> 00:10:17,600
we will have a presentation on the

227
00:10:17,600 --> 00:10:19,760
symbolic model progress as well as in

228
00:10:19,760 --> 00:10:21,839
the computational model progress model

229
00:10:21,839 --> 00:10:23,680
analysis progress

230
00:10:23,680 --> 00:10:28,160
uh and in terms of the formal status of

231
00:10:28,160 --> 00:10:31,200
the working group so we have a milestone

232
00:10:31,200 --> 00:10:34,079
that is set for march 2022 to ship the

233
00:10:34,079 --> 00:10:36,000
document to the isg

234
00:10:36,000 --> 00:10:38,399
so this uh we will discuss during the

235
00:10:38,399 --> 00:10:40,640
next steps it is not likely to happen

236
00:10:40,640 --> 00:10:42,800
right now as we want to to vet the

237
00:10:42,800 --> 00:10:44,560
protocol first before shipping it

238
00:10:44,560 --> 00:10:47,279
obviously to the isg and we will discuss

239
00:10:47,279 --> 00:10:48,720
this towards the end of the meeting in

240
00:10:48,720 --> 00:10:51,680
the next step slots

241
00:10:52,160 --> 00:10:54,880
so that would be all on

242
00:10:54,880 --> 00:10:55,680
on

243
00:10:55,680 --> 00:10:57,600
our side stephen do you have something

244
00:10:57,600 --> 00:10:59,120
to complement

245
00:10:59,120 --> 00:11:02,560
okay so with that i propose we proceed

246
00:11:02,560 --> 00:11:04,959
with the next agenda item and this is

247
00:11:04,959 --> 00:11:06,399
marco tilock

248
00:11:06,399 --> 00:11:07,839
giving the report on the hackathon

249
00:11:07,839 --> 00:11:10,399
activities

250
00:11:12,320 --> 00:11:15,600
there's no square started

251
00:11:15,600 --> 00:11:17,279
yes so marco just showed next slide

252
00:11:17,279 --> 00:11:20,240
everyone can you hear me

253
00:11:20,320 --> 00:11:22,640
i suppose so so this is a short report

254
00:11:22,640 --> 00:11:25,519
from the academy we had the past weekend

255
00:11:25,519 --> 00:11:29,519
uh mostly on site next slide please

256
00:11:29,519 --> 00:11:31,040
yeah the focus was very much on

257
00:11:31,040 --> 00:11:33,839
development i was even before um testing

258
00:11:33,839 --> 00:11:36,240
and especially malicious worked a lot on

259
00:11:36,240 --> 00:11:38,880
his implementation for uh rust

260
00:11:38,880 --> 00:11:41,200
aspect as part of a bigger project i

261
00:11:41,200 --> 00:11:42,959
understood to produce something

262
00:11:42,959 --> 00:11:45,040
it was verifiable first of all and and

263
00:11:45,040 --> 00:11:47,200
then usable later on also for uh

264
00:11:47,200 --> 00:11:49,680
microcontrollers and other environments

265
00:11:49,680 --> 00:11:52,079
and this is pretty ambitious indeed and

266
00:11:52,079 --> 00:11:54,560
the goal was very specific to produce a

267
00:11:54,560 --> 00:11:56,560
runnable implementation very

268
00:11:56,560 --> 00:12:00,079
minimal especially with the goal to

269
00:12:00,079 --> 00:12:02,000
end up with the smallest possible size

270
00:12:02,000 --> 00:12:04,240
for the most critical edit message

271
00:12:04,240 --> 00:12:06,560
number two

272
00:12:06,560 --> 00:12:08,079
which is something you can achieve

273
00:12:08,079 --> 00:12:10,720
considering the configuration summarized

274
00:12:10,720 --> 00:12:11,920
here so

275
00:12:11,920 --> 00:12:13,760
thinking as initiator only

276
00:12:13,760 --> 00:12:15,279
static static

277
00:12:15,279 --> 00:12:18,639
defilment and id cred as kid

278
00:12:18,639 --> 00:12:21,519
specifically integer

279
00:12:21,519 --> 00:12:23,519
trying to avoid any any dependencies and

280
00:12:23,519 --> 00:12:25,360
and to use harder acceleration when

281
00:12:25,360 --> 00:12:27,600
possible

282
00:12:27,600 --> 00:12:30,320
next slide please

283
00:12:30,320 --> 00:12:32,560
right the the start was not entirely

284
00:12:32,560 --> 00:12:34,959
from scratch something was available

285
00:12:34,959 --> 00:12:37,440
before the the hackathon started

286
00:12:37,440 --> 00:12:40,560
especially harder abstraction layer

287
00:12:40,560 --> 00:12:42,800
in rust and and of course the ambition

288
00:12:42,800 --> 00:12:44,959
was to cover the very latest version of

289
00:12:44,959 --> 00:12:47,839
edox so the editors copy to become

290
00:12:47,839 --> 00:12:50,480
version 13 of the draft

291
00:12:50,480 --> 00:12:52,639
and well by the end of the academ

292
00:12:52,639 --> 00:12:54,560
everything missing to have something

293
00:12:54,560 --> 00:12:57,839
running was actually completed uh so the

294
00:12:57,839 --> 00:13:00,800
the protocol state machine and all the

295
00:13:00,800 --> 00:13:02,320
uh crypto primitives necessary to

296
00:13:02,320 --> 00:13:04,959
process um enoch messages uh basically

297
00:13:04,959 --> 00:13:06,639
and this code is now available in the

298
00:13:06,639 --> 00:13:09,200
openws and vehicle github on a dedicated

299
00:13:09,200 --> 00:13:11,279
branch

300
00:13:11,279 --> 00:13:13,120
next slide please

301
00:13:13,120 --> 00:13:15,760
so with that say we we were also able to

302
00:13:15,760 --> 00:13:18,399
do some testing so malaysia considered

303
00:13:18,399 --> 00:13:19,200
is

304
00:13:19,200 --> 00:13:21,519
code rascodas initiator role

305
00:13:21,519 --> 00:13:23,440
run against my code for eclipse

306
00:13:23,440 --> 00:13:24,720
californium

307
00:13:24,720 --> 00:13:26,639
as a responder

308
00:13:26,639 --> 00:13:28,720
again both aligned with the very latest

309
00:13:28,720 --> 00:13:30,399
editors copy

310
00:13:30,399 --> 00:13:33,279
of the specification and again we tested

311
00:13:33,279 --> 00:13:37,120
the configuration intended for a minimal

312
00:13:37,120 --> 00:13:39,920
pair of endpoints and the result was

313
00:13:39,920 --> 00:13:41,680
fortunately as expected

314
00:13:41,680 --> 00:13:44,880
we indeed could have a confirmation that

315
00:13:44,880 --> 00:13:47,680
we produced a message to a doc of 45

316
00:13:47,680 --> 00:13:48,800
bytes

317
00:13:48,800 --> 00:13:51,120
in size on the wire and the test was

318
00:13:51,120 --> 00:13:53,360
also successful because uh we both

319
00:13:53,360 --> 00:13:55,760
produced the same smart markup could

320
00:13:55,760 --> 00:13:56,800
interrupt you could just pick for the

321
00:13:56,800 --> 00:13:58,800
mic because we're receiving

322
00:13:58,800 --> 00:14:00,160
oh

323
00:14:00,160 --> 00:14:02,800
better now okay

324
00:14:02,800 --> 00:14:05,120
and the test was also successful because

325
00:14:05,120 --> 00:14:06,800
we indeed produced the same master

326
00:14:06,800 --> 00:14:08,880
secret and sold

327
00:14:08,880 --> 00:14:12,160
at the end of the dock execution

328
00:14:12,160 --> 00:14:16,040
and next slide please

329
00:14:16,160 --> 00:14:17,680
yeah we are on the next steps there are

330
00:14:17,680 --> 00:14:19,920
a bunch of few uh more implementations

331
00:14:19,920 --> 00:14:22,480
that are under currently update uh to

332
00:14:22,480 --> 00:14:24,480
catch up with the latest version of the

333
00:14:24,480 --> 00:14:26,399
specifications so we expect especially

334
00:14:26,399 --> 00:14:28,480
those implementations and more

335
00:14:28,480 --> 00:14:30,800
uh to run more tests in the near future

336
00:14:30,800 --> 00:14:33,040
i think it'd be good also to yeah cover

337
00:14:33,040 --> 00:14:35,519
a bit more of the traces and possibly

338
00:14:35,519 --> 00:14:37,760
the use of message four and of some

339
00:14:37,760 --> 00:14:39,279
error messages

340
00:14:39,279 --> 00:14:41,839
uh out of the addoc exchange

341
00:14:41,839 --> 00:14:43,760
as a possible additional site testing if

342
00:14:43,760 --> 00:14:46,320
anyone is interested as a separate

343
00:14:46,320 --> 00:14:48,800
documenting core related to edoc that

344
00:14:48,800 --> 00:14:51,440
purposes if you want an optimization to

345
00:14:51,440 --> 00:14:53,519
combine uh in a single request on the

346
00:14:53,519 --> 00:14:54,560
wire

347
00:14:54,560 --> 00:14:56,079
the final adopt message three with the

348
00:14:56,079 --> 00:14:59,040
first oscar protected request

349
00:14:59,040 --> 00:15:00,720
in case i have that implemented so i'd

350
00:15:00,720 --> 00:15:02,320
be happy to interrupt that little

351
00:15:02,320 --> 00:15:04,800
extension too

352
00:15:04,800 --> 00:15:07,920
and that should be it

353
00:15:07,920 --> 00:15:09,680
thank you

354
00:15:09,680 --> 00:15:11,680
thank you marco so just for

355
00:15:11,680 --> 00:15:14,480
clarification this is so we now have

356
00:15:14,480 --> 00:15:15,360
nine

357
00:15:15,360 --> 00:15:18,079
independent implementations available of

358
00:15:18,079 --> 00:15:20,320
ad hoc which includes both constrained

359
00:15:20,320 --> 00:15:22,079
for embedded systems and for

360
00:15:22,079 --> 00:15:23,680
non-constrained systems so i think that

361
00:15:23,680 --> 00:15:26,240
that is important to stress out and

362
00:15:26,240 --> 00:15:28,079
thank you for running for championing

363
00:15:28,079 --> 00:15:30,399
this hackathon activity thank you for

364
00:15:30,399 --> 00:15:32,399
the great work

365
00:15:32,399 --> 00:15:33,440
so

366
00:15:33,440 --> 00:15:35,839
i propose

367
00:15:35,839 --> 00:15:38,240
thank you

368
00:15:38,839 --> 00:15:41,519
uh are we good retirement yes so i

369
00:15:41,519 --> 00:15:44,240
propose we continue with the next agenda

370
00:15:44,240 --> 00:15:47,120
item which is the developer feedback

371
00:15:47,120 --> 00:15:49,519
and the first one in the queue is

372
00:15:49,519 --> 00:15:51,120
francisco

373
00:15:51,120 --> 00:15:54,800
so francisco can you uh

374
00:15:54,800 --> 00:15:56,800
can you hear us

375
00:15:56,800 --> 00:15:59,120
yeah i am muted

376
00:15:59,120 --> 00:16:00,959
okay so do you want me to pass you the

377
00:16:00,959 --> 00:16:02,639
controller i will pass you the control

378
00:16:02,639 --> 00:16:05,279
of the slide so that you can

379
00:16:05,279 --> 00:16:07,680
switch the slides on your own

380
00:16:07,680 --> 00:16:09,600
so it should be good now could you could

381
00:16:09,600 --> 00:16:10,800
you test

382
00:16:10,800 --> 00:16:13,360
yes it seems good okay so the floor is

383
00:16:13,360 --> 00:16:15,680
yours

384
00:16:16,160 --> 00:16:18,160
okay thank you um

385
00:16:18,160 --> 00:16:20,399
yeah so today i'm here to talk about a

386
00:16:20,399 --> 00:16:23,120
little bit about our experience with

387
00:16:23,120 --> 00:16:25,920
implementing and using ad hoc in highly

388
00:16:25,920 --> 00:16:27,759
controlled environments

389
00:16:27,759 --> 00:16:28,800
so

390
00:16:28,800 --> 00:16:30,160
um

391
00:16:30,160 --> 00:16:32,320
just to go through a bit the agenda uh

392
00:16:32,320 --> 00:16:33,600
first going to go through a bit about

393
00:16:33,600 --> 00:16:35,040
the context and the use case that

394
00:16:35,040 --> 00:16:37,759
motivated us motivated us to

395
00:16:37,759 --> 00:16:39,120
work with others

396
00:16:39,120 --> 00:16:40,800
and our process in

397
00:16:40,800 --> 00:16:42,320
writing this

398
00:16:42,320 --> 00:16:44,959
network implementation and

399
00:16:44,959 --> 00:16:46,639
and using it and so it was a bit about

400
00:16:46,639 --> 00:16:48,399
first looking at what was available what

401
00:16:48,399 --> 00:16:49,680
we could use

402
00:16:49,680 --> 00:16:51,600
what we needed to implement and then

403
00:16:51,600 --> 00:16:54,320
take a look at a bit of some benchmarks

404
00:16:54,320 --> 00:16:55,920
and the lessons learned during this

405
00:16:55,920 --> 00:16:58,319
process

406
00:16:58,639 --> 00:17:01,680
and so our contact was this uh

407
00:17:01,680 --> 00:17:03,680
cyber security research project at india

408
00:17:03,680 --> 00:17:05,839
called rio tfp where

409
00:17:05,839 --> 00:17:07,919
one of the

410
00:17:07,919 --> 00:17:10,480
research access was around next network

411
00:17:10,480 --> 00:17:11,599
security

412
00:17:11,599 --> 00:17:13,599
and so the some of the use cases that we

413
00:17:13,599 --> 00:17:15,839
were looking into there

414
00:17:15,839 --> 00:17:17,839
made lake and nether really really

415
00:17:17,839 --> 00:17:20,079
relevant for us and so that's how some

416
00:17:20,079 --> 00:17:22,000
of some of the people in our teams were

417
00:17:22,000 --> 00:17:24,480
involved in the working group

418
00:17:24,480 --> 00:17:26,640
and one of these use cases we had in

419
00:17:26,640 --> 00:17:27,679
mind was

420
00:17:27,679 --> 00:17:29,120
we are looking for

421
00:17:29,120 --> 00:17:30,480
completely different research projects

422
00:17:30,480 --> 00:17:31,360
and to

423
00:17:31,360 --> 00:17:34,400
uh privacy concerns around uh contact

424
00:17:34,400 --> 00:17:37,120
pricing and we have these

425
00:17:37,120 --> 00:17:39,600
this use case where we had a couple of

426
00:17:39,600 --> 00:17:43,120
contractuation devices which were an f52

427
00:17:43,120 --> 00:17:45,679
ple devices which were communicating

428
00:17:45,679 --> 00:17:47,520
with a

429
00:17:47,520 --> 00:17:50,640
backend server over an untrusted ipv6

430
00:17:50,640 --> 00:17:52,080
over ble-link

431
00:17:52,080 --> 00:17:53,679
and so um

432
00:17:53,679 --> 00:17:55,360
we were using ad hoc here to

433
00:17:55,360 --> 00:17:57,520
establishing a security

434
00:17:57,520 --> 00:17:59,200
context or communication channel between

435
00:17:59,200 --> 00:18:01,760
the the contact pricing server and the

436
00:18:01,760 --> 00:18:02,799
devices

437
00:18:02,799 --> 00:18:04,720
so we're performing a king key exchange

438
00:18:04,720 --> 00:18:06,880
between these two

439
00:18:06,880 --> 00:18:08,720
um

440
00:18:08,720 --> 00:18:10,320
and so

441
00:18:10,320 --> 00:18:12,480
just to set a bit of context our goal

442
00:18:12,480 --> 00:18:14,960
here was to write a generic

443
00:18:14,960 --> 00:18:17,360
implementation of ad hoc that would be

444
00:18:17,360 --> 00:18:18,480
uh

445
00:18:18,480 --> 00:18:20,400
able to run

446
00:18:20,400 --> 00:18:22,320
on a different series of

447
00:18:22,320 --> 00:18:24,240
microcontrollers with quad core

448
00:18:24,240 --> 00:18:26,400
resources so we're targeting non-memory

449
00:18:26,400 --> 00:18:28,480
allocation

450
00:18:28,480 --> 00:18:30,960
we're not planning to depend on hardware

451
00:18:30,960 --> 00:18:33,280
acceleration so most of the things we're

452
00:18:33,280 --> 00:18:35,039
going to see in the presentation are all

453
00:18:35,039 --> 00:18:36,640
software only

454
00:18:36,640 --> 00:18:38,640
we wanted to support all authentications

455
00:18:38,640 --> 00:18:39,840
and

456
00:18:39,840 --> 00:18:42,160
this was at the time of drop 05 a little

457
00:18:42,160 --> 00:18:44,400
bit so we wanted to target cyprus one to

458
00:18:44,400 --> 00:18:46,880
four which at the time uh

459
00:18:46,880 --> 00:18:48,240
were mostly

460
00:18:48,240 --> 00:18:50,240
uh

461
00:18:50,240 --> 00:18:53,520
p five one six of p two five six or c

462
00:18:53,520 --> 00:18:55,200
two five four one nine signatures

463
00:18:55,200 --> 00:18:56,320
library for example there was no

464
00:18:56,320 --> 00:18:59,280
afterwards and no the all the um

465
00:18:59,280 --> 00:19:00,720
application encryption algorithm were

466
00:19:00,720 --> 00:19:03,360
all iscm so there was no chat at that

467
00:19:03,360 --> 00:19:04,640
time for example

468
00:19:04,640 --> 00:19:06,320
and we we also wanted to focus just on

469
00:19:06,320 --> 00:19:07,760
writing networks so we didn't want to

470
00:19:07,760 --> 00:19:09,280
write the crypto libraries ourselves we

471
00:19:09,280 --> 00:19:10,559
didn't want to write

472
00:19:10,559 --> 00:19:12,160
simple libraries ourselves or cozy

473
00:19:12,160 --> 00:19:14,640
libraries we want to reuse as much as as

474
00:19:14,640 --> 00:19:17,440
much as was possible not too much

475
00:19:17,440 --> 00:19:19,840
uh as many libraries that would most

476
00:19:19,840 --> 00:19:21,760
likely be used for our own applications

477
00:19:21,760 --> 00:19:24,559
as well to avoid call duplication in the

478
00:19:24,559 --> 00:19:26,480
end we wanted to run it all on

479
00:19:26,480 --> 00:19:29,600
a series and variety of microcontrollers

480
00:19:29,600 --> 00:19:31,360
um so while the

481
00:19:31,360 --> 00:19:34,320
just to reiterate it was uh on draft of

482
00:19:34,320 --> 00:19:36,160
five and so all the building blocks are

483
00:19:36,160 --> 00:19:37,520
pretty evident

484
00:19:37,520 --> 00:19:38,880
or it was we needed something to

485
00:19:38,880 --> 00:19:40,640
seaboard something for crypto or key

486
00:19:40,640 --> 00:19:43,039
generation timing etc we also needed

487
00:19:43,039 --> 00:19:45,600
some interrupt interrupt variability

488
00:19:45,600 --> 00:19:47,360
infrastructure in the sense of test

489
00:19:47,360 --> 00:19:49,240
vector and interability

490
00:19:49,240 --> 00:19:51,520
interoperability peers since

491
00:19:51,520 --> 00:19:53,360
on the server side we were not running

492
00:19:53,360 --> 00:19:54,880
in a controlled environment and so it

493
00:19:54,880 --> 00:19:57,120
did not make sense and we probably were

494
00:19:57,120 --> 00:19:58,720
not going to run the same ad hoc

495
00:19:58,720 --> 00:20:00,000
implementation

496
00:20:00,000 --> 00:20:01,840
and at the end we needed some ecosystem

497
00:20:01,840 --> 00:20:04,960
was something to put it all together

498
00:20:04,960 --> 00:20:06,720
so when we started looking around we

499
00:20:06,720 --> 00:20:08,720
there were like a couple of seaboard

500
00:20:08,720 --> 00:20:09,840
libraries that we thought we could use

501
00:20:09,840 --> 00:20:12,000
and the seaboard tiny seaboard both had

502
00:20:12,000 --> 00:20:13,919
their advantages and disadvantages but

503
00:20:13,919 --> 00:20:16,640
they were designed for embedded and

504
00:20:16,640 --> 00:20:18,880
had a pretty small footprint and fast

505
00:20:18,880 --> 00:20:20,400
executions

506
00:20:20,400 --> 00:20:22,000
uh when we look at the crypto backend

507
00:20:22,000 --> 00:20:24,559
there was there's a lot this uh

508
00:20:24,559 --> 00:20:27,600
in no means an exhaustive uh

509
00:20:27,600 --> 00:20:29,679
list but this was kind of

510
00:20:29,679 --> 00:20:31,360
crypto libraries that for our previous

511
00:20:31,360 --> 00:20:33,440
work we already had somehow integrated

512
00:20:33,440 --> 00:20:35,360
so we knew we could use

513
00:20:35,360 --> 00:20:36,480
and

514
00:20:36,480 --> 00:20:38,720
the main part here is that like

515
00:20:38,720 --> 00:20:40,320
a few libraries were doing everything we

516
00:20:40,320 --> 00:20:42,000
needed the ones that were like well

517
00:20:42,000 --> 00:20:44,080
necessary or heckle

518
00:20:44,080 --> 00:20:46,000
we're not doing it in an embedded

519
00:20:46,000 --> 00:20:48,559
friendly way or did not provide an

520
00:20:48,559 --> 00:20:50,880
incremental api or other

521
00:20:50,880 --> 00:20:52,400
reason that made it

522
00:20:52,400 --> 00:20:53,200
not

523
00:20:53,200 --> 00:20:55,039
the best choice and the other ones were

524
00:20:55,039 --> 00:20:57,360
not doing everything we needed so

525
00:20:57,360 --> 00:20:58,159
uh

526
00:20:58,159 --> 00:20:59,760
this was our first point to telling us

527
00:20:59,760 --> 00:21:01,280
that okay we're gonna need to actually

528
00:21:01,280 --> 00:21:02,799
support probably multiple crypto

529
00:21:02,799 --> 00:21:04,320
backends and

530
00:21:04,320 --> 00:21:06,400
might want to switch among them

531
00:21:06,400 --> 00:21:07,840
and

532
00:21:07,840 --> 00:21:10,159
if you look at this is just a table that

533
00:21:10,159 --> 00:21:13,600
summarizing some some stats on signing

534
00:21:13,600 --> 00:21:14,960
but it already tells us that like when

535
00:21:14,960 --> 00:21:17,120
you go looking for some crypto library

536
00:21:17,120 --> 00:21:18,080
uh

537
00:21:18,080 --> 00:21:19,760
it's all it's all gonna be about

538
00:21:19,760 --> 00:21:21,600
trade-offs there's none that does

539
00:21:21,600 --> 00:21:24,320
everything perfect uh and if you're

540
00:21:24,320 --> 00:21:26,080
gonna want speed you might be

541
00:21:26,080 --> 00:21:27,520
sacrificing some flash and stack and

542
00:21:27,520 --> 00:21:30,080
depending on your use case you might be

543
00:21:30,080 --> 00:21:32,799
okay with sacrificing uh a couple of

544
00:21:32,799 --> 00:21:34,720
kilobytes in ram to get more speed and

545
00:21:34,720 --> 00:21:36,400
and others that's just going to be not

546
00:21:36,400 --> 00:21:37,919
possible so we have this interesting

547
00:21:37,919 --> 00:21:39,600
noise that we're going to have to

548
00:21:39,600 --> 00:21:41,679
use multiple crypto icons and probably

549
00:21:41,679 --> 00:21:44,960
abstract them for our own application

550
00:21:44,960 --> 00:21:46,320
and then we needed something to put it

551
00:21:46,320 --> 00:21:48,000
all together and so

552
00:21:48,000 --> 00:21:49,679
for example there was a lot of options

553
00:21:49,679 --> 00:21:52,320
up there like riot zephyr embed os my

554
00:21:52,320 --> 00:21:56,000
new etc we went with riot because we

555
00:21:56,000 --> 00:21:58,640
from our side work we knew it very well

556
00:21:58,640 --> 00:22:00,960
and so we knew what kind of package of

557
00:22:00,960 --> 00:22:04,559
support it has and how we could use it

558
00:22:04,559 --> 00:22:06,960
um and they also some stuff that we

559
00:22:06,960 --> 00:22:08,960
identified pretty early that or during

560
00:22:08,960 --> 00:22:10,799
the process that we're missing so for

561
00:22:10,799 --> 00:22:14,400
example we would have liked to use cozy

562
00:22:14,400 --> 00:22:16,480
abstraction ourselves

563
00:22:16,480 --> 00:22:19,679
to avoid uh then having code duplication

564
00:22:19,679 --> 00:22:21,760
in our application side but sadly at the

565
00:22:21,760 --> 00:22:24,400
time there were actually no

566
00:22:24,400 --> 00:22:25,679
library we could find that we could use

567
00:22:25,679 --> 00:22:26,720
because

568
00:22:26,720 --> 00:22:28,720
um

569
00:22:28,720 --> 00:22:30,400
there weren't really any any match

570
00:22:30,400 --> 00:22:31,840
between all the back ends it was

571
00:22:31,840 --> 00:22:33,360
supporting and the cypher suits at the

572
00:22:33,360 --> 00:22:36,000
time so sadly we had to write our own

573
00:22:36,000 --> 00:22:38,559
cozy function but at the end that had

574
00:22:38,559 --> 00:22:40,640
some side effects on on the full

575
00:22:40,640 --> 00:22:42,000
application

576
00:22:42,000 --> 00:22:43,360
um

577
00:22:43,360 --> 00:22:45,840
and also although this cozy abstraction

578
00:22:45,840 --> 00:22:47,120
of having

579
00:22:47,120 --> 00:22:49,120
a cozy library that's basically doing

580
00:22:49,120 --> 00:22:50,559
the abstraction of the all the crypto

581
00:22:50,559 --> 00:22:52,159
libraries underneath for us and

582
00:22:52,159 --> 00:22:53,600
providing

583
00:22:53,600 --> 00:22:56,720
more clean interface to all of that

584
00:22:56,720 --> 00:22:59,120
was nice we still realized we were gonna

585
00:22:59,120 --> 00:23:01,039
need some direct access to crypto for

586
00:23:01,039 --> 00:23:03,440
generating keys hashes etc so we

587
00:23:03,440 --> 00:23:05,039
couldn't really get a way of going

588
00:23:05,039 --> 00:23:06,559
completely around it

589
00:23:06,559 --> 00:23:09,039
on the test vector side uh at the time

590
00:23:09,039 --> 00:23:10,880
it was somewhat limited we didn't have

591
00:23:10,880 --> 00:23:13,120
like cyborg certificates and

592
00:23:13,120 --> 00:23:15,760
the certificates we had were not real

593
00:23:15,760 --> 00:23:17,679
certificates like we tried to parse them

594
00:23:17,679 --> 00:23:20,000
for example for with an embed tls

595
00:23:20,000 --> 00:23:22,400
x509 library we will get errors because

596
00:23:22,400 --> 00:23:24,640
we want some fields that we're missing

597
00:23:24,640 --> 00:23:25,440
and

598
00:23:25,440 --> 00:23:27,280
so francisco does let me interrupt you

599
00:23:27,280 --> 00:23:28,880
when you say no real certificates you

600
00:23:28,880 --> 00:23:31,600
want uh what you mean i suppose is that

601
00:23:31,600 --> 00:23:32,400
the

602
00:23:32,400 --> 00:23:33,840
instead of a certificate there was a

603
00:23:33,840 --> 00:23:36,159
dummy byte string presented in the in

604
00:23:36,159 --> 00:23:37,600
the template okay

605
00:23:37,600 --> 00:23:40,000
that's it and and on the interrupt side

606
00:23:40,000 --> 00:23:41,600
of the time there was not that too much

607
00:23:41,600 --> 00:23:43,279
that we could use so

608
00:23:43,279 --> 00:23:44,640
um

609
00:23:44,640 --> 00:23:46,000
or not

610
00:23:46,000 --> 00:23:48,000
that we were at the time everyone was

611
00:23:48,000 --> 00:23:49,600
starting to develop at them so we didn't

612
00:23:49,600 --> 00:23:50,880
have too much there

613
00:23:50,880 --> 00:23:53,200
um and so this is what we

614
00:23:53,200 --> 00:23:55,919
the the end result was we had this c

615
00:23:55,919 --> 00:23:57,679
implementation of head hook called ad

616
00:23:57,679 --> 00:23:59,679
hoc c uh there's the link on at the

617
00:23:59,679 --> 00:24:01,840
bottom and we

618
00:24:01,840 --> 00:24:03,760
we use nano sieber then our default

619
00:24:03,760 --> 00:24:05,520
backend was time equipped

620
00:24:05,520 --> 00:24:06,400
for

621
00:24:06,400 --> 00:24:08,640
all the uh piece notification and

622
00:24:08,640 --> 00:24:11,120
hashing and for signature we're using an

623
00:24:11,120 --> 00:24:14,640
sdh we're mostly using the c5119

624
00:24:14,640 --> 00:24:17,120
implementation from daniel beer

625
00:24:17,120 --> 00:24:18,960
and for interpretability

626
00:24:18,960 --> 00:24:19,919
well

627
00:24:19,919 --> 00:24:21,919
timothy that was working with us

628
00:24:21,919 --> 00:24:25,039
wrote by head of edda which was quite

629
00:24:25,039 --> 00:24:26,400
useful for us for

630
00:24:26,400 --> 00:24:27,919
testing all the time because

631
00:24:27,919 --> 00:24:29,919
as i tried to emphasize a bit at the

632
00:24:29,919 --> 00:24:30,880
start

633
00:24:30,880 --> 00:24:32,080
part of the challenge was actually

634
00:24:32,080 --> 00:24:34,159
putting all these crypto blocks together

635
00:24:34,159 --> 00:24:34,960
uh

636
00:24:34,960 --> 00:24:36,000
and

637
00:24:36,000 --> 00:24:38,000
assembling them and

638
00:24:38,000 --> 00:24:39,679
on the python side there was a non-issue

639
00:24:39,679 --> 00:24:41,440
so we could easily cover

640
00:24:41,440 --> 00:24:42,720
most of the

641
00:24:42,720 --> 00:24:44,080
cryptosuits

642
00:24:44,080 --> 00:24:46,720
methods and parts we also part

643
00:24:46,720 --> 00:24:48,960
certificates generate certificates much

644
00:24:48,960 --> 00:24:51,760
easier to be then be able to test uh

645
00:24:51,760 --> 00:24:53,200
this implementation

646
00:24:53,200 --> 00:24:55,679
and as i said we chose right

647
00:24:55,679 --> 00:24:56,559
um

648
00:24:56,559 --> 00:24:57,600
and just

649
00:24:57,600 --> 00:25:00,159
some some now i'm gonna go into some

650
00:25:00,159 --> 00:25:01,840
benchmarks some stats of like what what

651
00:25:01,840 --> 00:25:03,279
the result is and

652
00:25:03,279 --> 00:25:05,919
so um

653
00:25:05,919 --> 00:25:07,360
rom was around

654
00:25:07,360 --> 00:25:09,279
10k 9k

655
00:25:09,279 --> 00:25:10,799
and ram we realized was actually

656
00:25:10,799 --> 00:25:12,400
changing a lot depending on the method

657
00:25:12,400 --> 00:25:13,440
we were using

658
00:25:13,440 --> 00:25:15,760
so uh there's there's two tables here

659
00:25:15,760 --> 00:25:18,559
one one is on meth of zero so

660
00:25:18,559 --> 00:25:21,440
uh sign sign and three is uh static dp

661
00:25:21,440 --> 00:25:22,880
element on both sides

662
00:25:22,880 --> 00:25:24,880
and uh two different colors are two

663
00:25:24,880 --> 00:25:26,320
configurations because we also realize

664
00:25:26,320 --> 00:25:28,880
that well since uh we're trying to not

665
00:25:28,880 --> 00:25:31,679
do uh dynamic allocation we have static

666
00:25:31,679 --> 00:25:34,559
buffers everywhere and

667
00:25:34,559 --> 00:25:35,679
and since

668
00:25:35,679 --> 00:25:38,080
uh in the different cryptographic stages

669
00:25:38,080 --> 00:25:40,080
you are using previous information as

670
00:25:40,080 --> 00:25:42,799
cryptographic material uh

671
00:25:42,799 --> 00:25:44,240
the amount of size you are locating for

672
00:25:44,240 --> 00:25:46,240
additional data or for credentials for

673
00:25:46,240 --> 00:25:47,679
credential id

674
00:25:47,679 --> 00:25:49,520
and ends up being more buffer space you

675
00:25:49,520 --> 00:25:52,159
also need to allocate for the eventual

676
00:25:52,159 --> 00:25:55,120
uh transcript etc and so

677
00:25:55,120 --> 00:25:56,799
tuning these parameters like for example

678
00:25:56,799 --> 00:25:58,799
just allowing for one byte in uh one by

679
00:25:58,799 --> 00:26:00,559
credential ideal whatever connect can

680
00:26:00,559 --> 00:26:02,559
actually have quite could have quite

681
00:26:02,559 --> 00:26:05,200
some impact on the actual uh stack usage

682
00:26:05,200 --> 00:26:07,679
of the different uh message generation

683
00:26:07,679 --> 00:26:09,520
and parsing functions

684
00:26:09,520 --> 00:26:12,559
but it was roughly around

685
00:26:12,559 --> 00:26:15,039
4k in the in the worst case with these

686
00:26:15,039 --> 00:26:16,799
default configurations but again it was

687
00:26:16,799 --> 00:26:19,039
very influenced by the size of

688
00:26:19,039 --> 00:26:21,520
the allowed the maximum load size of the

689
00:26:21,520 --> 00:26:23,440
credentials the credentials id

690
00:26:23,440 --> 00:26:26,159
additional data

691
00:26:26,640 --> 00:26:28,320
when you look at the timing that takes

692
00:26:28,320 --> 00:26:30,000
actually computer handshake this is

693
00:26:30,000 --> 00:26:33,279
again no harder acceleration we run some

694
00:26:33,279 --> 00:26:34,640
measurements where we're just doing

695
00:26:34,640 --> 00:26:36,799
taking two notes doing some handshakes

696
00:26:36,799 --> 00:26:39,600
either either over the wire over

697
00:26:39,600 --> 00:26:41,679
15.4 or ble

698
00:26:41,679 --> 00:26:44,559
or everything through co-op and

699
00:26:44,559 --> 00:26:47,039
our worst case scenarios or maybe were

700
00:26:47,039 --> 00:26:48,559
with a

701
00:26:48,559 --> 00:26:51,440
signature very sign sign

702
00:26:51,440 --> 00:26:53,600
metal zero where between two cortex and

703
00:26:53,600 --> 00:26:55,039
zero is taking up

704
00:26:55,039 --> 00:26:56,000
around

705
00:26:56,000 --> 00:26:59,200
20 seconds well uh the best scenario is

706
00:26:59,200 --> 00:27:01,520
probably with an m4 where it was taking

707
00:27:01,520 --> 00:27:04,640
around six to seven seconds when uh

708
00:27:04,640 --> 00:27:06,799
doing a static difficult

709
00:27:06,799 --> 00:27:08,559
authentication meeting

710
00:27:08,559 --> 00:27:10,080
um

711
00:27:10,080 --> 00:27:12,080
but if we try to take a bit of a closer

712
00:27:12,080 --> 00:27:13,760
look to understand why it's taking so

713
00:27:13,760 --> 00:27:16,400
long it's actually most of it is related

714
00:27:16,400 --> 00:27:18,399
to crypto and if

715
00:27:18,399 --> 00:27:20,240
there's a paper that i'm referencing at

716
00:27:20,240 --> 00:27:23,200
the bottom which were stuttering the

717
00:27:23,200 --> 00:27:26,000
the sign of verified times that uh for

718
00:27:26,000 --> 00:27:28,240
ed25519

719
00:27:28,240 --> 00:27:30,000
and we can see is

720
00:27:30,000 --> 00:27:31,760
basically

721
00:27:31,760 --> 00:27:34,080
the overhead is coming from there for if

722
00:27:34,080 --> 00:27:36,559
you look at uh on an m4 for example

723
00:27:36,559 --> 00:27:38,640
verifying a signature of 32 bytes takes

724
00:27:38,640 --> 00:27:40,640
around two seconds and

725
00:27:40,640 --> 00:27:42,880
800 milliseconds to to sign it and so

726
00:27:42,880 --> 00:27:45,440
we're doing this twice in the process

727
00:27:45,440 --> 00:27:47,200
and so we have like a baseline of six

728
00:27:47,200 --> 00:27:50,559
seconds just from the signing verifying

729
00:27:50,559 --> 00:27:53,840
but again this just one library as i was

730
00:27:53,840 --> 00:27:56,159
trying to put in context first you can

731
00:27:56,159 --> 00:27:57,840
also speed it up by changing the library

732
00:27:57,840 --> 00:27:59,679
but maybe you're sacrificing more ram or

733
00:27:59,679 --> 00:28:01,440
more fresh usage than your

734
00:28:01,440 --> 00:28:04,080
implementation is gonna use

735
00:28:04,080 --> 00:28:06,240
um

736
00:28:06,240 --> 00:28:08,320
yeah and so this is a little bit of some

737
00:28:08,320 --> 00:28:09,919
numbers and

738
00:28:09,919 --> 00:28:11,919
then we try to integrate it all into our

739
00:28:11,919 --> 00:28:13,760
application and we have a couple of

740
00:28:13,760 --> 00:28:15,600
things that we then realize in the field

741
00:28:15,600 --> 00:28:16,480
that

742
00:28:16,480 --> 00:28:18,960
sure initially we we decided just to

743
00:28:18,960 --> 00:28:20,880
write our own cosi function because it's

744
00:28:20,880 --> 00:28:22,880
pretty simple code but at the end we

745
00:28:22,880 --> 00:28:25,840
under have ended up using

746
00:28:25,840 --> 00:28:28,399
cosy libraries in our application code

747
00:28:28,399 --> 00:28:30,080
which end up ended up having some

748
00:28:30,080 --> 00:28:32,159
redundancy so yeah

749
00:28:32,159 --> 00:28:33,919
so we have a question brandon in the

750
00:28:33,919 --> 00:28:36,559
queue brandon

751
00:28:39,840 --> 00:28:43,360
um no i don't i didn't we so the end

752
00:28:43,360 --> 00:28:45,360
result we have so far is that we didn't

753
00:28:45,360 --> 00:28:48,000
support we only supported at the time

754
00:28:48,000 --> 00:28:49,520
cypher stood zero and one so there was

755
00:28:49,520 --> 00:28:51,120
no p two five six

756
00:28:51,120 --> 00:28:52,559
but uh

757
00:28:52,559 --> 00:28:54,399
i do have a table somewhere where i'm

758
00:28:54,399 --> 00:28:56,840
comparing them but i didn't do the

759
00:28:56,840 --> 00:29:00,559
hog enough i can i'll locate

760
00:29:00,559 --> 00:29:01,360
up

761
00:29:01,360 --> 00:29:02,240
uh

762
00:29:02,240 --> 00:29:03,520
let me see

763
00:29:03,520 --> 00:29:05,039
i'll finish and then i'll try to look it

764
00:29:05,039 --> 00:29:05,760
up

765
00:29:05,760 --> 00:29:08,399
but it's in the same paper that there's

766
00:29:08,399 --> 00:29:11,120
the comparison as well for p256 that i'm

767
00:29:11,120 --> 00:29:12,960
referencing in slides

768
00:29:12,960 --> 00:29:14,240
15 or

769
00:29:14,240 --> 00:29:16,720
14.

770
00:29:16,720 --> 00:29:18,000
um

771
00:29:18,000 --> 00:29:19,440
yeah and so

772
00:29:19,440 --> 00:29:21,679
we also realized okay a reaction api

773
00:29:21,679 --> 00:29:23,679
like the one embed tls was providing

774
00:29:23,679 --> 00:29:25,360
would have actually been quite useful in

775
00:29:25,360 --> 00:29:27,760
most of these cases because

776
00:29:27,760 --> 00:29:30,000
the amount of time it was taken to

777
00:29:30,000 --> 00:29:32,080
verify or signatures or signing

778
00:29:32,080 --> 00:29:33,760
verifying was actually

779
00:29:33,760 --> 00:29:36,080
uh going over the default timeouts we

780
00:29:36,080 --> 00:29:37,919
had in for our application so we had to

781
00:29:37,919 --> 00:29:40,720
do some special handling for that and

782
00:29:40,720 --> 00:29:42,640
all of this could have maybe been

783
00:29:42,640 --> 00:29:43,760
prevented with

784
00:29:43,760 --> 00:29:45,840
the re-engine api

785
00:29:45,840 --> 00:29:48,159
and then just some feedback to focus on

786
00:29:48,159 --> 00:29:50,240
the

787
00:29:50,720 --> 00:29:51,919
on the

788
00:29:51,919 --> 00:29:54,880
implementing the draft itself so again

789
00:29:54,880 --> 00:29:57,039
this was just drop five at the time it

790
00:29:57,039 --> 00:29:59,360
was quite confusing for timothy who was

791
00:29:59,360 --> 00:30:02,000
developing this uh

792
00:30:02,000 --> 00:30:04,159
who had the responsibilities of passing

793
00:30:04,159 --> 00:30:06,240
credentials how it should be purged

794
00:30:06,240 --> 00:30:07,440
since

795
00:30:07,440 --> 00:30:09,600
from the ad hoc side what how was it

796
00:30:09,600 --> 00:30:11,120
supposed to receive the credentials

797
00:30:11,120 --> 00:30:12,399
information

798
00:30:12,399 --> 00:30:15,120
uh this buy string identifier that was

799
00:30:15,120 --> 00:30:17,039
um

800
00:30:17,039 --> 00:30:17,919
uh

801
00:30:17,919 --> 00:30:20,399
trying to save this one byte from its

802
00:30:20,399 --> 00:30:22,640
point of view seemed to

803
00:30:22,640 --> 00:30:24,480
not be worth the extra code completely

804
00:30:24,480 --> 00:30:26,000
that i was actually introducing and well

805
00:30:26,000 --> 00:30:27,520
now it's been dropped since

806
00:30:27,520 --> 00:30:28,799
seven i think

807
00:30:28,799 --> 00:30:30,799
uh we got some insights on how we could

808
00:30:30,799 --> 00:30:31,919
like also

809
00:30:31,919 --> 00:30:34,000
to go ram to get the best out of it

810
00:30:34,000 --> 00:30:35,120
there's probably some stuff we could

811
00:30:35,120 --> 00:30:36,399
have optimized

812
00:30:36,399 --> 00:30:37,760
um

813
00:30:37,760 --> 00:30:39,520
and maybe have some work buffers because

814
00:30:39,520 --> 00:30:41,840
most of the rams that come from uh

815
00:30:41,840 --> 00:30:43,760
static buffers that are allocated for

816
00:30:43,760 --> 00:30:45,520
the key streams the cozy keys and stuff

817
00:30:45,520 --> 00:30:47,279
like that

818
00:30:47,279 --> 00:30:48,640
and then even though we used cipher

819
00:30:48,640 --> 00:30:50,960
should 0 at the time it was mostly

820
00:30:50,960 --> 00:30:52,480
because what we had available we would

821
00:30:52,480 --> 00:30:55,039
probably do cipher two or three

822
00:30:55,039 --> 00:30:57,919
but we could also if we didn't have

823
00:30:57,919 --> 00:30:59,440
something in our application that was

824
00:30:59,440 --> 00:31:01,919
already using iscm we might use cypher

825
00:31:01,919 --> 00:31:03,279
suits fund because

826
00:31:03,279 --> 00:31:05,760
uh at least in rio chacha poly is

827
00:31:05,760 --> 00:31:08,159
smaller in size the accm it's simpler in

828
00:31:08,159 --> 00:31:10,720
this business in its implementation and

829
00:31:10,720 --> 00:31:12,720
and it's as well

830
00:31:12,720 --> 00:31:14,320
easier to implement within incremental

831
00:31:14,320 --> 00:31:15,840
api which

832
00:31:15,840 --> 00:31:18,000
translates roughly into less ram space

833
00:31:18,000 --> 00:31:19,519
that is needed because you don't have to

834
00:31:19,519 --> 00:31:21,200
serialize the same information twice in

835
00:31:21,200 --> 00:31:23,919
memory while parsing

836
00:31:23,919 --> 00:31:25,360
and

837
00:31:25,360 --> 00:31:26,559
that is

838
00:31:26,559 --> 00:31:30,399
it i'll try to look up the table for

839
00:31:30,399 --> 00:31:32,000
the paper where the there's the

840
00:31:32,000 --> 00:31:33,760
comparison for d4

841
00:31:33,760 --> 00:31:37,760
pe256 and ct5019

842
00:31:37,760 --> 00:31:40,480
okay so thank you francesco so we have

843
00:31:40,480 --> 00:31:43,360
brandon in the queue

844
00:31:45,360 --> 00:31:47,039
am i in the queue uh yes you can hear me

845
00:31:47,039 --> 00:31:49,840
now oh good yes

846
00:31:49,840 --> 00:31:51,519
on page eight i just had a question

847
00:31:51,519 --> 00:31:54,480
about the comparison between the uh the

848
00:31:54,480 --> 00:31:57,600
different cipher suites um am i to read

849
00:31:57,600 --> 00:31:59,840
this correctly saying that you don't

850
00:31:59,840 --> 00:32:04,559
believe that embed tls supports aes gcm

851
00:32:04,559 --> 00:32:06,399
i think at the time

852
00:32:06,399 --> 00:32:08,640
i'm sorry that is not correct

853
00:32:08,640 --> 00:32:11,919
okay embed tls absolutely does support

854
00:32:11,919 --> 00:32:15,279
aes gcm and i'm not sure about any of

855
00:32:15,279 --> 00:32:17,360
the other x's you have there but i think

856
00:32:17,360 --> 00:32:21,039
it's worth having another look um

857
00:32:21,039 --> 00:32:22,559
just let's

858
00:32:22,559 --> 00:32:24,720
i thought i should bring that up

859
00:32:24,720 --> 00:32:29,440
thank you yeah i'll take a better rook

860
00:32:32,640 --> 00:32:33,760
okay thank you brandon for the

861
00:32:33,760 --> 00:32:36,000
clarification do we have any other

862
00:32:36,000 --> 00:32:37,279
questions

863
00:32:37,279 --> 00:32:40,080
in the room no

864
00:32:42,000 --> 00:32:43,919
okay so thank you francisco i think that

865
00:32:43,919 --> 00:32:47,840
is a good overview of at least of the uh

866
00:32:47,840 --> 00:32:49,440
that gives us an insight into the

867
00:32:49,440 --> 00:32:51,200
performance of the

868
00:32:51,200 --> 00:32:52,640
of the protocol when it is fully

869
00:32:52,640 --> 00:32:54,000
implemented in software when the crypt

870
00:32:54,000 --> 00:32:55,279
is fully implemented in software those

871
00:32:55,279 --> 00:32:57,679
numbers are indeed quite large but as

872
00:32:57,679 --> 00:32:59,679
you said

873
00:32:59,679 --> 00:33:02,799
they are allocated to to crypto

874
00:33:02,799 --> 00:33:05,519
so i propose we

875
00:33:05,519 --> 00:33:08,399
go ahead with the next agenda item

876
00:33:08,399 --> 00:33:11,600
and this is uh developer feedback number

877
00:33:11,600 --> 00:33:14,879
two uh mark

878
00:33:18,080 --> 00:33:20,480
so francisco

879
00:33:20,480 --> 00:33:22,240
all right can you hear me well yes so

880
00:33:22,240 --> 00:33:24,159
let me just francisco can you pass me

881
00:33:24,159 --> 00:33:27,279
back the token yes

882
00:33:27,760 --> 00:33:30,000
developer feedback you can skip the

883
00:33:30,000 --> 00:33:30,960
first one

884
00:33:30,960 --> 00:33:33,679
i can skip okay so there you go hello

885
00:33:33,679 --> 00:33:36,000
everyone so my name is mark i'm the

886
00:33:36,000 --> 00:33:39,039
social architect within the assabloi

887
00:33:39,039 --> 00:33:40,080
and

888
00:33:40,080 --> 00:33:42,960
focusing primarily on the iot stack

889
00:33:42,960 --> 00:33:45,440
which we call the modular iot platform

890
00:33:45,440 --> 00:33:47,360
you can go to the next one

891
00:33:47,360 --> 00:33:50,399
thanks so just a super quick uh overview

892
00:33:50,399 --> 00:33:53,600
why we why i actually been

893
00:33:53,600 --> 00:33:55,039
introduced to this challenge is that the

894
00:33:55,039 --> 00:33:57,279
company i work for is built upon

895
00:33:57,279 --> 00:33:58,320
number of

896
00:33:58,320 --> 00:33:59,120
of

897
00:33:59,120 --> 00:34:01,039
companies and divisions and

898
00:34:01,039 --> 00:34:02,480
the idea was that

899
00:34:02,480 --> 00:34:04,480
every of these divisions are building

900
00:34:04,480 --> 00:34:06,240
the stack of their own and and just to

901
00:34:06,240 --> 00:34:07,519
unify that

902
00:34:07,519 --> 00:34:09,199
i've been introduced to the to the

903
00:34:09,199 --> 00:34:11,199
challenge to find a stack that can be

904
00:34:11,199 --> 00:34:13,119
then shared across

905
00:34:13,119 --> 00:34:15,040
multiple uh multiple companies and

906
00:34:15,040 --> 00:34:17,440
multiple divisions and it's just because

907
00:34:17,440 --> 00:34:19,760
it's it's the numbers and the scenarios

908
00:34:19,760 --> 00:34:21,679
that are so large it's been it's been a

909
00:34:21,679 --> 00:34:23,839
hard challenge and uh if we can go to

910
00:34:23,839 --> 00:34:25,280
the next one please

911
00:34:25,280 --> 00:34:27,679
so the yeah so the challenge i like we

912
00:34:27,679 --> 00:34:30,239
got introducing uh was to to find a good

913
00:34:30,239 --> 00:34:32,560
modular iot stack that can run on the

914
00:34:32,560 --> 00:34:34,879
embedded platforms also mobile and the

915
00:34:34,879 --> 00:34:37,440
cloud and um yeah one of the the key

916
00:34:37,440 --> 00:34:39,119
challenges

917
00:34:39,119 --> 00:34:40,800
and something that we wanted to enable

918
00:34:40,800 --> 00:34:43,280
is to device to cloud

919
00:34:43,280 --> 00:34:45,520
device to mobile and also other way

920
00:34:45,520 --> 00:34:48,159
around and device to device uh secure

921
00:34:48,159 --> 00:34:50,639
end-to-end communication where we can go

922
00:34:50,639 --> 00:34:52,879
uh over multiple hops with different

923
00:34:52,879 --> 00:34:55,918
middle boxes uh and not uh and just keep

924
00:34:55,918 --> 00:34:57,680
that uh do not break that end-to-end

925
00:34:57,680 --> 00:34:59,760
security just keep it uh all the way

926
00:34:59,760 --> 00:35:00,560
down

927
00:35:00,560 --> 00:35:03,440
so um and and to have all of that

928
00:35:03,440 --> 00:35:05,280
implemented in the application layer so

929
00:35:05,280 --> 00:35:07,680
we would not have to rely on on

930
00:35:07,680 --> 00:35:10,240
something within the the lower layers

931
00:35:10,240 --> 00:35:12,480
and we wanted to work with the formats

932
00:35:12,480 --> 00:35:14,800
around the identity like x 509

933
00:35:14,800 --> 00:35:19,200
certificates or maybe using cvts or jvts

934
00:35:19,200 --> 00:35:21,599
and then all of it to be backed by

935
00:35:21,599 --> 00:35:23,520
standards so we can maintain security

936
00:35:23,520 --> 00:35:26,640
more efficiently so we don't have to

937
00:35:26,640 --> 00:35:29,119
keep evaluating and and just be the only

938
00:35:29,119 --> 00:35:31,119
paradise looking at the issue

939
00:35:31,119 --> 00:35:32,800
and uh you know we wanted to achieve

940
00:35:32,800 --> 00:35:34,560
that with the with the open source as

941
00:35:34,560 --> 00:35:35,599
well and

942
00:35:35,599 --> 00:35:38,400
um if we can go to the next one please

943
00:35:38,400 --> 00:35:39,920
so the areas

944
00:35:39,920 --> 00:35:41,599
that i was looking at and we were

945
00:35:41,599 --> 00:35:44,079
looking at was was more complex than

946
00:35:44,079 --> 00:35:45,920
just the communication

947
00:35:45,920 --> 00:35:48,320
so we had to look on the provisioning so

948
00:35:48,320 --> 00:35:50,160
like the generic iot stack the

949
00:35:50,160 --> 00:35:53,680
provisioning devices with identities etc

950
00:35:53,680 --> 00:35:55,599
the communication which is something i

951
00:35:55,599 --> 00:35:57,760
will focus on today and the operations

952
00:35:57,760 --> 00:36:00,160
like firmware updates etc

953
00:36:00,160 --> 00:36:02,640
next one please

954
00:36:02,640 --> 00:36:04,400
right so the solution

955
00:36:04,400 --> 00:36:05,440
we have

956
00:36:05,440 --> 00:36:07,119
we have been evaluating and we have been

957
00:36:07,119 --> 00:36:10,960
using so far was based upon co-op oscar

958
00:36:10,960 --> 00:36:13,920
erock we use for identities we primarily

959
00:36:13,920 --> 00:36:17,280
focus on the x 509 certificates

960
00:36:17,280 --> 00:36:18,480
and more

961
00:36:18,480 --> 00:36:19,920
so just to give you a little bit of

962
00:36:19,920 --> 00:36:22,400
details on the edoc we are currently on

963
00:36:22,400 --> 00:36:25,200
the draft on the latest draft so draft

964
00:36:25,200 --> 00:36:27,920
12 and we are compliant with that

965
00:36:27,920 --> 00:36:29,359
next one please

966
00:36:29,359 --> 00:36:31,200
right so the architecture of the stack

967
00:36:31,200 --> 00:36:33,760
looks pretty much like that so

968
00:36:33,760 --> 00:36:36,000
starting from the top so we have our own

969
00:36:36,000 --> 00:36:37,599
rpc protocol

970
00:36:37,599 --> 00:36:39,200
that we use

971
00:36:39,200 --> 00:36:40,800
but it's not a requirement but it's

972
00:36:40,800 --> 00:36:42,800
something that we wanted to to keep in

973
00:36:42,800 --> 00:36:44,880
in some of the products and then going

974
00:36:44,880 --> 00:36:47,839
down we for the for the encryption uh we

975
00:36:47,839 --> 00:36:50,400
wanted to use oscor like i said for the

976
00:36:50,400 --> 00:36:52,880
key exchange we focus on using error and

977
00:36:52,880 --> 00:36:55,920
then we treat uh everything was backed

978
00:36:55,920 --> 00:36:57,920
by the by the co-op and then on the

979
00:36:57,920 --> 00:36:59,520
transport layer

980
00:36:59,520 --> 00:37:01,440
we wanted to like i said we wanted to

981
00:37:01,440 --> 00:37:03,040
run on the application layer so we

982
00:37:03,040 --> 00:37:04,800
wanted to stay a little bit independent

983
00:37:04,800 --> 00:37:07,040
from the transport so

984
00:37:07,040 --> 00:37:11,040
we escaped going on the ip networks only

985
00:37:11,040 --> 00:37:13,680
so we wanted to use the stack in the

986
00:37:13,680 --> 00:37:15,520
mobile phone like device to mobile phone

987
00:37:15,520 --> 00:37:17,760
and mobile phone to device examples so

988
00:37:17,760 --> 00:37:19,680
on the ble side we

989
00:37:19,680 --> 00:37:21,920
we just used the the standard gut with

990
00:37:21,920 --> 00:37:23,200
services and characteristic

991
00:37:23,200 --> 00:37:26,160
communication on udp we use co-op as

992
00:37:26,160 --> 00:37:28,240
intended and then we also introduce some

993
00:37:28,240 --> 00:37:31,119
other transports like serial port with

994
00:37:31,119 --> 00:37:32,720
with

995
00:37:32,720 --> 00:37:35,599
in the same way we use

996
00:37:35,599 --> 00:37:37,119
usbl

997
00:37:37,119 --> 00:37:38,480
let's say on the

998
00:37:38,480 --> 00:37:41,040
we wanted to keep like rx and tx pipe uh

999
00:37:41,040 --> 00:37:42,880
on on every protocol that that would

1000
00:37:42,880 --> 00:37:45,520
support that so on the ble side

1001
00:37:45,520 --> 00:37:48,640
we didn't have any good

1002
00:37:48,640 --> 00:37:50,960
use case and we didn't have any good uh

1003
00:37:50,960 --> 00:37:53,040
example maybe on using on how to use the

1004
00:37:53,040 --> 00:37:54,800
the co-op over ble

1005
00:37:54,800 --> 00:37:57,200
uh so we went down with uh

1006
00:37:57,200 --> 00:38:00,480
leveraging um uart protocol uh on over

1007
00:38:00,480 --> 00:38:02,560
ble so one characteristics for read and

1008
00:38:02,560 --> 00:38:05,040
one characteristics were right

1009
00:38:05,040 --> 00:38:07,040
i can go to the next one

1010
00:38:07,040 --> 00:38:08,720
and then on the

1011
00:38:08,720 --> 00:38:10,960
yeah just looking on this one across the

1012
00:38:10,960 --> 00:38:12,640
different platforms we could we could

1013
00:38:12,640 --> 00:38:15,040
have or we did replicate that the whole

1014
00:38:15,040 --> 00:38:18,160
stack over multiple uh over multiple

1015
00:38:18,160 --> 00:38:20,160
areas so on the embedded

1016
00:38:20,160 --> 00:38:22,079
we we could have achieved the same stack

1017
00:38:22,079 --> 00:38:23,119
and then

1018
00:38:23,119 --> 00:38:25,280
on the tooling side like the cli tools

1019
00:38:25,280 --> 00:38:28,640
mobile sdks we also completed to do that

1020
00:38:28,640 --> 00:38:30,720
for the cloud as well and as you can see

1021
00:38:30,720 --> 00:38:32,640
we just have a little bit different on

1022
00:38:32,640 --> 00:38:35,520
the on the transport uh back ends so for

1023
00:38:35,520 --> 00:38:38,160
example in the cloud we also wanted to

1024
00:38:38,160 --> 00:38:40,720
see if we can fit that uh

1025
00:38:40,720 --> 00:38:42,160
feed that use case into existing

1026
00:38:42,160 --> 00:38:44,079
solutions so we we use the message

1027
00:38:44,079 --> 00:38:46,320
broker when in our case was mqtt we

1028
00:38:46,320 --> 00:38:48,400
wanted to prove that

1029
00:38:48,400 --> 00:38:50,640
the communication can run over like uh

1030
00:38:50,640 --> 00:38:53,359
just any uh any transport so i know

1031
00:38:53,359 --> 00:38:55,599
maybe it's not ideal but we run it over

1032
00:38:55,599 --> 00:38:57,440
mqtt so we had the co-op running over

1033
00:38:57,440 --> 00:39:01,040
mktt just to see how well it can fit

1034
00:39:01,040 --> 00:39:03,839
into the existing ecosystem but uh and

1035
00:39:03,839 --> 00:39:06,960
and and just having all the security and

1036
00:39:06,960 --> 00:39:09,680
the logic within the application layer

1037
00:39:09,680 --> 00:39:11,359
next one please

1038
00:39:11,359 --> 00:39:12,720
right so

1039
00:39:12,720 --> 00:39:15,040
just focusing on the adult libraries uh

1040
00:39:15,040 --> 00:39:16,640
in the previous presentation there were

1041
00:39:16,640 --> 00:39:19,040
a few technologies mentioned which uh i

1042
00:39:19,040 --> 00:39:21,119
didn't put in here but but i i might as

1043
00:39:21,119 --> 00:39:23,040
well talk about it so

1044
00:39:23,040 --> 00:39:25,599
we wanted to keep the tech the the code

1045
00:39:25,599 --> 00:39:28,400
stack to the minimum and to not have

1046
00:39:28,400 --> 00:39:30,800
like six or seven different or five

1047
00:39:30,800 --> 00:39:32,960
different ad doc implementations and

1048
00:39:32,960 --> 00:39:34,400
oscars so

1049
00:39:34,400 --> 00:39:36,400
we went with this architecture so for

1050
00:39:36,400 --> 00:39:39,359
the embedded part for the ios and for

1051
00:39:39,359 --> 00:39:41,839
the node.js which we use for tooling we

1052
00:39:41,839 --> 00:39:44,000
went with the single c library that is

1053
00:39:44,000 --> 00:39:47,520
microscope micro adopt library

1054
00:39:47,520 --> 00:39:49,839
so each of them each of these three

1055
00:39:49,839 --> 00:39:51,680
free

1056
00:39:51,680 --> 00:39:53,599
components like on the embedded ios and

1057
00:39:53,599 --> 00:39:55,839
node.js are just the wrappers or just

1058
00:39:55,839 --> 00:39:58,000
wrapping the native c library

1059
00:39:58,000 --> 00:40:00,160
so on the node.js we have a native

1060
00:40:00,160 --> 00:40:02,480
module on ios we're wrapping the c

1061
00:40:02,480 --> 00:40:04,160
component with objective c and then

1062
00:40:04,160 --> 00:40:06,000
using in swift and then on embedded we

1063
00:40:06,000 --> 00:40:09,680
just use micro oscar micro directly

1064
00:40:09,680 --> 00:40:10,400
and

1065
00:40:10,400 --> 00:40:12,400
yes we have as a back-end we have used

1066
00:40:12,400 --> 00:40:15,040
embed tls which i can confirm uh on the

1067
00:40:15,040 --> 00:40:18,160
on the previous note on the aes that it

1068
00:40:18,160 --> 00:40:19,040
worked

1069
00:40:19,040 --> 00:40:20,560
um

1070
00:40:20,560 --> 00:40:22,880
but we use embed tls

1071
00:40:22,880 --> 00:40:23,680
on

1072
00:40:23,680 --> 00:40:26,160
on nrf on the embedded part we use uh

1073
00:40:26,160 --> 00:40:27,680
embed tls

1074
00:40:27,680 --> 00:40:29,839
version from nordic semiconductor that

1075
00:40:29,839 --> 00:40:32,720
is hardware accelerated uh version so we

1076
00:40:32,720 --> 00:40:34,480
got the full hardware acceleration on

1077
00:40:34,480 --> 00:40:36,000
that which are some numbers i'm going to

1078
00:40:36,000 --> 00:40:38,720
talk about in a sec and then for android

1079
00:40:38,720 --> 00:40:41,200
and cloud we have our own add-on

1080
00:40:41,200 --> 00:40:42,560
implementation

1081
00:40:42,560 --> 00:40:44,079
that for now we keep

1082
00:40:44,079 --> 00:40:46,000
internal but that might change in the

1083
00:40:46,000 --> 00:40:48,000
future and just on the top you can see

1084
00:40:48,000 --> 00:40:48,880
that

1085
00:40:48,880 --> 00:40:51,680
we try to keep these apis

1086
00:40:51,680 --> 00:40:53,839
very easy to use and and just with the

1087
00:40:53,839 --> 00:40:56,560
minimum input from the user

1088
00:40:56,560 --> 00:40:58,560
next one

1089
00:40:58,560 --> 00:41:00,400
right so just to give you some details

1090
00:41:00,400 --> 00:41:03,040
on our add-on use case we are focusing

1091
00:41:03,040 --> 00:41:06,240
just for now we are just focusing on on

1092
00:41:06,240 --> 00:41:08,800
adult usage with the certificates and

1093
00:41:08,800 --> 00:41:09,839
then

1094
00:41:09,839 --> 00:41:11,280
so we have

1095
00:41:11,280 --> 00:41:13,760
cas on both ends so we have a

1096
00:41:13,760 --> 00:41:15,839
responder root certificate on the

1097
00:41:15,839 --> 00:41:17,920
initiator side an initiator root

1098
00:41:17,920 --> 00:41:19,599
certificate on the responder side and

1099
00:41:19,599 --> 00:41:21,839
then for the for the credentials we use

1100
00:41:21,839 --> 00:41:24,160
full x509 certificate which we then

1101
00:41:24,160 --> 00:41:26,240
validate so we go with uh our

1102
00:41:26,240 --> 00:41:28,960
certificates use p256 curve so we go to

1103
00:41:28,960 --> 00:41:29,760
the

1104
00:41:29,760 --> 00:41:32,240
with the method zero with signatures and

1105
00:41:32,240 --> 00:41:35,839
uh suit number two

1106
00:41:36,079 --> 00:41:38,000
right okay so just on the embedded

1107
00:41:38,000 --> 00:41:39,440
platform like i mentioned we use

1108
00:41:39,440 --> 00:41:41,920
nrf52840

1109
00:41:41,920 --> 00:41:44,560
with the freertos that's a

1110
00:41:44,560 --> 00:41:46,640
maybe not not not a

1111
00:41:46,640 --> 00:41:47,520
main

1112
00:41:47,520 --> 00:41:49,359
or master three-artist version but we

1113
00:41:49,359 --> 00:41:50,960
have our own modified version a little

1114
00:41:50,960 --> 00:41:53,520
bit uh for the co-op we use lobaro uh

1115
00:41:53,520 --> 00:41:56,079
co-op library and then microscope micro

1116
00:41:56,079 --> 00:41:58,960
edc and then for crypto we use embed tls

1117
00:41:58,960 --> 00:42:01,359
that is hardware backed and we have that

1118
00:42:01,359 --> 00:42:03,599
platform that you can see here but

1119
00:42:03,599 --> 00:42:05,839
all in all we just as the main we're

1120
00:42:05,839 --> 00:42:08,400
running this on the standard uh

1121
00:42:08,400 --> 00:42:13,359
nrf 50 to 840 dev kit next one please

1122
00:42:13,359 --> 00:42:14,560
right and a little bit about the

1123
00:42:14,560 --> 00:42:16,480
performance so this is a screenshot from

1124
00:42:16,480 --> 00:42:19,680
the node.js2 that we use and that node

1125
00:42:19,680 --> 00:42:21,520
that communication here was running over

1126
00:42:21,520 --> 00:42:22,640
ble

1127
00:42:22,640 --> 00:42:24,640
over standard gut

1128
00:42:24,640 --> 00:42:27,440
so we have our own dongle firmware like

1129
00:42:27,440 --> 00:42:28,960
a zephyr dongle

1130
00:42:28,960 --> 00:42:30,880
zephyr firmer dongle

1131
00:42:30,880 --> 00:42:33,839
as acting as a ble uh as a bli donku

1132
00:42:33,839 --> 00:42:35,680
that that is running over uart so

1133
00:42:35,680 --> 00:42:39,599
node.js tools over uh on over standard

1134
00:42:39,599 --> 00:42:41,359
hci command

1135
00:42:41,359 --> 00:42:43,119
will communicate with that board and

1136
00:42:43,119 --> 00:42:45,280
then we'll in the node.js library we

1137
00:42:45,280 --> 00:42:48,319
have like full ble api to back it up

1138
00:42:48,319 --> 00:42:50,079
it's actually based on the open source

1139
00:42:50,079 --> 00:42:52,000
noble library

1140
00:42:52,000 --> 00:42:54,319
and then this screenshot shows a

1141
00:42:54,319 --> 00:42:57,520
node.js2 being an initiator

1142
00:42:57,520 --> 00:42:59,839
communicating with the responder that is

1143
00:42:59,839 --> 00:43:02,119
running on rf

1144
00:43:02,119 --> 00:43:03,920
52840

1145
00:43:03,920 --> 00:43:06,160
with our rpc protocol on top of it and

1146
00:43:06,160 --> 00:43:08,160
as you can see like we do what we do

1147
00:43:08,160 --> 00:43:11,440
here is we do scan for ble we connect we

1148
00:43:11,440 --> 00:43:14,960
discover gut we perform the addoc like i

1149
00:43:14,960 --> 00:43:17,440
said with the credentials using

1150
00:43:17,440 --> 00:43:19,760
certificates on both ends

1151
00:43:19,760 --> 00:43:22,319
uh with the method

1152
00:43:22,319 --> 00:43:25,200
zero and suit number two and

1153
00:43:25,200 --> 00:43:27,839
then on top of that we do oscor and then

1154
00:43:27,839 --> 00:43:28,560
we

1155
00:43:28,560 --> 00:43:31,920
set up our own rpc uh command and then

1156
00:43:31,920 --> 00:43:34,079
uh all of that is taking less than a

1157
00:43:34,079 --> 00:43:36,000
second so just for the add-on to

1158
00:43:36,000 --> 00:43:37,520
complete without the

1159
00:43:37,520 --> 00:43:41,040
the initiating of the of the rpc layer

1160
00:43:41,040 --> 00:43:43,920
is about 700 800 milliseconds for

1161
00:43:43,920 --> 00:43:45,440
everything that i said together with the

1162
00:43:45,440 --> 00:43:47,200
validating full

1163
00:43:47,200 --> 00:43:49,839
validation of x 509 certificate and just

1164
00:43:49,839 --> 00:43:52,079
just for my understanding uh and the

1165
00:43:52,079 --> 00:43:54,880
clarification of 595 milliseconds what

1166
00:43:54,880 --> 00:43:56,880
does it refer to okay so that's the

1167
00:43:56,880 --> 00:43:58,880
first number uh so the first number is

1168
00:43:58,880 --> 00:44:00,319
where we uh

1169
00:44:00,319 --> 00:44:01,599
where we con

1170
00:44:01,599 --> 00:44:03,760
connected over scanned

1171
00:44:03,760 --> 00:44:06,480
the ble connected over ble discovered

1172
00:44:06,480 --> 00:44:09,599
got and sent message one

1173
00:44:09,599 --> 00:44:13,040
okay so kind of ble uh let's say you set

1174
00:44:13,040 --> 00:44:14,960
up with the first industry

1175
00:44:14,960 --> 00:44:17,680
okay and 770 is the actual ethical

1176
00:44:17,680 --> 00:44:19,839
handshake and that's the but that's the

1177
00:44:19,839 --> 00:44:21,440
total time from the start oh so that's

1178
00:44:21,440 --> 00:44:23,920
included in the so okay

1179
00:44:23,920 --> 00:44:26,160
so just between message one and the full

1180
00:44:26,160 --> 00:44:27,680
add-on it's been

1181
00:44:27,680 --> 00:44:30,560
let's say 180 milliseconds okay so we

1182
00:44:30,560 --> 00:44:32,400
have a question from michael

1183
00:44:32,400 --> 00:44:34,240
yeah

1184
00:44:34,240 --> 00:44:36,560
maybe maybe melissa michael richardson

1185
00:44:36,560 --> 00:44:38,560
here maybe melissa just asked the same

1186
00:44:38,560 --> 00:44:39,839
question and i didn't understand the

1187
00:44:39,839 --> 00:44:41,920
question the same way

1188
00:44:41,920 --> 00:44:45,280
um so bluetooth has uh a encryption

1189
00:44:45,280 --> 00:44:50,000
layer and gat avoids it or yes okay so

1190
00:44:50,000 --> 00:44:52,240
so you're going clear your your ad hoc

1191
00:44:52,240 --> 00:44:54,880
messages would in sense be in clear

1192
00:44:54,880 --> 00:44:56,319
over bluetooth

1193
00:44:56,319 --> 00:44:58,000
yes okay just want to make sure i

1194
00:44:58,000 --> 00:44:59,440
understand that yeah that's really cool

1195
00:44:59,440 --> 00:45:01,920
yeah okay

1196
00:45:02,000 --> 00:45:03,119
so

1197
00:45:03,119 --> 00:45:05,359
ad hoc over bare metal bluetooth kind of

1198
00:45:05,359 --> 00:45:08,079
exactly okay yeah pretty cool

1199
00:45:08,079 --> 00:45:11,040
and the total so all of that take it

1200
00:45:11,040 --> 00:45:11,880
takes

1201
00:45:11,880 --> 00:45:14,880
770 milliseconds obviously i chose the

1202
00:45:14,880 --> 00:45:17,599
best one i had one running for 800

1203
00:45:17,599 --> 00:45:19,920
something but for the screenshot wise i

1204
00:45:19,920 --> 00:45:22,240
i choose the 700 milliseconds but yeah

1205
00:45:22,240 --> 00:45:24,800
roughly we always stay around seven 800

1206
00:45:24,800 --> 00:45:27,359
milliseconds so but and that's important

1207
00:45:27,359 --> 00:45:28,880
to know that this is

1208
00:45:28,880 --> 00:45:30,720
there is also you are delay because the

1209
00:45:30,720 --> 00:45:32,800
bridge is communicating over the ble

1210
00:45:32,800 --> 00:45:34,560
bridge is also running over uart so

1211
00:45:34,560 --> 00:45:35,760
there's always going to be a few

1212
00:45:35,760 --> 00:45:39,359
milliseconds here and there of the delay

1213
00:45:39,359 --> 00:45:42,000
next one please

1214
00:45:42,079 --> 00:45:43,680
and this is the same

1215
00:45:43,680 --> 00:45:46,240
this is the same or similar results but

1216
00:45:46,240 --> 00:45:49,119
happening directly from the mobile phone

1217
00:45:49,119 --> 00:45:50,330
so

1218
00:45:50,330 --> 00:45:51,599
[Music]

1219
00:45:51,599 --> 00:45:53,440
it's exactly the same process so like i

1220
00:45:53,440 --> 00:45:55,760
described before so scanning connecting

1221
00:45:55,760 --> 00:45:58,400
discover got certificate exchange with

1222
00:45:58,400 --> 00:46:00,160
the certificate validation and what we

1223
00:46:00,160 --> 00:46:02,240
validate for is just so you know we

1224
00:46:02,240 --> 00:46:04,800
validate for the we validate against the

1225
00:46:04,800 --> 00:46:06,880
root certificate and then we validate

1226
00:46:06,880 --> 00:46:09,040
the expiration time that's the for now

1227
00:46:09,040 --> 00:46:10,640
that's the the only certificate

1228
00:46:10,640 --> 00:46:12,160
validation that we do

1229
00:46:12,160 --> 00:46:13,200
and then

1230
00:46:13,200 --> 00:46:16,079
on the mobile side uh we did

1231
00:46:16,079 --> 00:46:19,200
avoiding this uh uart part uh like with

1232
00:46:19,200 --> 00:46:20,640
the tooling site

1233
00:46:20,640 --> 00:46:24,560
we get a resource in 600 700 millisecond

1234
00:46:24,560 --> 00:46:26,880
range

1235
00:46:27,040 --> 00:46:29,520
next one please right so for the future

1236
00:46:29,520 --> 00:46:31,359
uh for now uh

1237
00:46:31,359 --> 00:46:33,119
we would really focus on we want to

1238
00:46:33,119 --> 00:46:36,079
build uh now uh a co-op http to call a

1239
00:46:36,079 --> 00:46:38,640
proxy for our cloud infrastructure

1240
00:46:38,640 --> 00:46:40,960
uh that's also gonna be backed and

1241
00:46:40,960 --> 00:46:43,440
working with the adult and oscar

1242
00:46:43,440 --> 00:46:45,839
and we can try to stay as much as

1243
00:46:45,839 --> 00:46:48,400
compliant to the to the co-op

1244
00:46:48,400 --> 00:46:50,319
http proxy

1245
00:46:50,319 --> 00:46:51,359
specs

1246
00:46:51,359 --> 00:46:54,000
we have some things that we are

1247
00:46:54,000 --> 00:46:56,000
not sure yet but with that with those

1248
00:46:56,000 --> 00:46:58,319
things we hopefully uh can contribute

1249
00:46:58,319 --> 00:47:00,240
back to the specs and also the open

1250
00:47:00,240 --> 00:47:02,319
source uh which we already do for

1251
00:47:02,319 --> 00:47:04,000
example for the microscope micro reduce

1252
00:47:04,000 --> 00:47:05,839
library we have been working first with

1253
00:47:05,839 --> 00:47:07,920
the front offer and then with the author

1254
00:47:07,920 --> 00:47:11,359
stefan now to uh to also be included as

1255
00:47:11,359 --> 00:47:13,440
a as the

1256
00:47:13,440 --> 00:47:15,440
collaborators on the on the on the c

1257
00:47:15,440 --> 00:47:16,640
library

1258
00:47:16,640 --> 00:47:19,280
so just as a clarification the new ad

1259
00:47:19,280 --> 00:47:22,319
hoc and new escort oscar implementations

1260
00:47:22,319 --> 00:47:24,160
were presented during one of the past

1261
00:47:24,160 --> 00:47:26,480
meetings by stephan here and he

1262
00:47:26,480 --> 00:47:29,119
he presented the findings of his paper

1263
00:47:29,119 --> 00:47:32,079
that includes these benchmarks

1264
00:47:32,079 --> 00:47:35,280
so yes so we work we we work with stefan

1265
00:47:35,280 --> 00:47:38,880
on that as well and then uh

1266
00:47:38,880 --> 00:47:41,920
more on the personal uh activity um i

1267
00:47:41,920 --> 00:47:43,680
was working with goran on the on the

1268
00:47:43,680 --> 00:47:46,240
latest test vectors for the traces and

1269
00:47:46,240 --> 00:47:47,280
and my

1270
00:47:47,280 --> 00:47:49,760
contribution uh that's going to be uh

1271
00:47:49,760 --> 00:47:52,240
that hopefully will get up

1272
00:47:52,240 --> 00:47:55,040
soon is to

1273
00:47:55,040 --> 00:47:56,720
build a better test vector or more

1274
00:47:56,720 --> 00:47:58,400
modern test vector generator the current

1275
00:47:58,400 --> 00:48:00,800
one that we have is is not the best one

1276
00:48:00,800 --> 00:48:04,000
and and it requires some more love

1277
00:48:04,000 --> 00:48:06,319
i suppose we will discuss this during

1278
00:48:06,319 --> 00:48:08,720
the traces draft discussion together

1279
00:48:08,720 --> 00:48:10,960
with all the updates on the traces yes

1280
00:48:10,960 --> 00:48:13,119
okay perfect all right and i think that

1281
00:48:13,119 --> 00:48:16,800
was the last one if i'm correct

1282
00:48:17,680 --> 00:48:19,680
thank you very much yes

1283
00:48:19,680 --> 00:48:23,440
so do we have any questions for marek

1284
00:48:25,839 --> 00:48:28,880
i see no no one joining the queue so

1285
00:48:28,880 --> 00:48:30,480
thank you marek for agreeing to present

1286
00:48:30,480 --> 00:48:31,839
today for giving the feedback to the

1287
00:48:31,839 --> 00:48:33,760
working group it is encouraging to see

1288
00:48:33,760 --> 00:48:34,720
the

1289
00:48:34,720 --> 00:48:37,839
the protocol being used in the wild

1290
00:48:37,839 --> 00:48:40,240
prepared to be used in the wild

1291
00:48:40,240 --> 00:48:42,160
and thanks everybody for staying on time

1292
00:48:42,160 --> 00:48:43,760
so i hope i don't have to clamp down on

1293
00:48:43,760 --> 00:48:45,520
the next presenter

1294
00:48:45,520 --> 00:48:47,760
so yes but before we go to the next

1295
00:48:47,760 --> 00:48:50,559
presenter i would just like to uh bring

1296
00:48:50,559 --> 00:48:52,400
the comment by francisco to the mic

1297
00:48:52,400 --> 00:48:53,680
where he

1298
00:48:53,680 --> 00:48:56,400
confirmed that on the slide set of

1299
00:48:56,400 --> 00:48:58,720
developer feedback number one there was

1300
00:48:58,720 --> 00:49:02,319
a mistake in the embed tls column where

1301
00:49:02,319 --> 00:49:05,040
all the all the rows should have been

1302
00:49:05,040 --> 00:49:06,319
tracked

1303
00:49:06,319 --> 00:49:09,599
including the asccm

1304
00:49:09,599 --> 00:49:12,319
primitive which was shown as not

1305
00:49:12,319 --> 00:49:14,880
supported so francisco confirms that

1306
00:49:14,880 --> 00:49:17,760
this was discussed in the chat

1307
00:49:17,760 --> 00:49:21,040
just one more comment that i think the

1308
00:49:21,040 --> 00:49:24,079
edward curve support is kind of

1309
00:49:24,079 --> 00:49:26,880
in pr's and not there yet but there's

1310
00:49:26,880 --> 00:49:28,000
you can

1311
00:49:28,000 --> 00:49:30,960
get it from them

1312
00:49:30,960 --> 00:49:32,640
so just for clarification we're still

1313
00:49:32,640 --> 00:49:35,200
talking about embed tls and the support

1314
00:49:35,200 --> 00:49:37,760
for x25 uh for curve two two two five

1315
00:49:37,760 --> 00:49:39,280
five online

1316
00:49:39,280 --> 00:49:41,839
the addsa is kind of from what i see

1317
00:49:41,839 --> 00:49:44,720
it's prs and it's towards this year that

1318
00:49:44,720 --> 00:49:46,480
should be fully integrated but because

1319
00:49:46,480 --> 00:49:50,240
there's already you can already use it

1320
00:49:50,400 --> 00:49:52,319
uh i didn't quite capture that maybe if

1321
00:49:52,319 --> 00:49:53,119
you can

1322
00:49:53,119 --> 00:49:55,680
release it sorry there's in the in the

1323
00:49:55,680 --> 00:49:57,760
in the table i had like some checks with

1324
00:49:57,760 --> 00:49:59,760
some from with an asterisk and those

1325
00:49:59,760 --> 00:50:02,880
means that it's not in the master branch

1326
00:50:02,880 --> 00:50:04,880
but you can there's pr or somewhere

1327
00:50:04,880 --> 00:50:06,480
that's implemented then you can use it

1328
00:50:06,480 --> 00:50:09,200
and for e25519 that should also be the

1329
00:50:09,200 --> 00:50:10,839
case for embed

1330
00:50:10,839 --> 00:50:13,599
tls okay so just maybe as an action

1331
00:50:13,599 --> 00:50:15,040
point francisco if you can take to

1332
00:50:15,040 --> 00:50:16,800
update that slide that contains the

1333
00:50:16,800 --> 00:50:18,400
error that we can upload to the data

1334
00:50:18,400 --> 00:50:20,480
tracker and have correct record in the

1335
00:50:20,480 --> 00:50:21,440
itf

1336
00:50:21,440 --> 00:50:23,040
is that okay for you

1337
00:50:23,040 --> 00:50:24,079
yes

1338
00:50:24,079 --> 00:50:27,559
okay thank you

1339
00:50:32,079 --> 00:50:35,440
oh okay maybe it's better if you share

1340
00:50:35,440 --> 00:50:36,800
well sorry

1341
00:50:36,800 --> 00:50:38,319
no but you need to click to press the

1342
00:50:38,319 --> 00:50:39,280
buttons

1343
00:50:39,280 --> 00:50:42,559
oh you want to stand up okay sure

1344
00:50:48,800 --> 00:50:52,280
which one are you

1345
00:50:57,920 --> 00:50:59,200
okay so

1346
00:50:59,200 --> 00:51:01,200
hello everyone with my chair hat off

1347
00:51:01,200 --> 00:51:02,240
this time

1348
00:51:02,240 --> 00:51:04,479
so

1349
00:51:06,240 --> 00:51:09,720
next slide please

1350
00:51:10,800 --> 00:51:12,880
so to give you some context about this

1351
00:51:12,880 --> 00:51:14,800
presentation uh

1352
00:51:14,800 --> 00:51:19,599
as you know as we all know at ho uh so

1353
00:51:19,599 --> 00:51:21,680
as we all know lake uh as a working

1354
00:51:21,680 --> 00:51:23,680
group targets constrained environments

1355
00:51:23,680 --> 00:51:24,960
and

1356
00:51:24,960 --> 00:51:27,119
constrained environments in our context

1357
00:51:27,119 --> 00:51:28,319
mean

1358
00:51:28,319 --> 00:51:30,400
embedded systems so many of our

1359
00:51:30,400 --> 00:51:32,160
implementations will be

1360
00:51:32,160 --> 00:51:34,880
executed on embedded systems

1361
00:51:34,880 --> 00:51:37,440
and you're probably all aware that the

1362
00:51:37,440 --> 00:51:39,359
embedded programming languages today is

1363
00:51:39,359 --> 00:51:40,960
dominantly c

1364
00:51:40,960 --> 00:51:43,680
and c is memory unsafe and c doesn't

1365
00:51:43,680 --> 00:51:45,599
play well with security

1366
00:51:45,599 --> 00:51:46,400
so

1367
00:51:46,400 --> 00:51:49,440
uh what we standardize here is

1368
00:51:49,440 --> 00:51:52,079
obviously crucial to security of the

1369
00:51:52,079 --> 00:51:54,000
protocol but what what ends up in the

1370
00:51:54,000 --> 00:51:55,839
wild is uh

1371
00:51:55,839 --> 00:51:58,240
as important and the protocol in the

1372
00:51:58,240 --> 00:52:00,160
wild will be as secure as its

1373
00:52:00,160 --> 00:52:01,680
implementation is

1374
00:52:01,680 --> 00:52:03,760
so uh the goal of

1375
00:52:03,760 --> 00:52:06,480
the work we've done was to produce an

1376
00:52:06,480 --> 00:52:09,040
implementation that has some security

1377
00:52:09,040 --> 00:52:12,480
properties such as provable correctness

1378
00:52:12,480 --> 00:52:14,319
of the implementation with respect to a

1379
00:52:14,319 --> 00:52:17,440
given model provable memory safety and

1380
00:52:17,440 --> 00:52:20,240
side channel resistance to

1381
00:52:20,240 --> 00:52:22,400
considering the threat model where

1382
00:52:22,400 --> 00:52:24,319
the the device itself is not completely

1383
00:52:24,319 --> 00:52:26,720
trusted

1384
00:52:27,280 --> 00:52:29,520
so

1385
00:52:30,160 --> 00:52:32,800
a team from india in paris called

1386
00:52:32,800 --> 00:52:35,920
prosecco developed a framework called

1387
00:52:35,920 --> 00:52:38,240
hackspec that is a

1388
00:52:38,240 --> 00:52:40,640
a framework for uh

1389
00:52:40,640 --> 00:52:42,559
verification of different

1390
00:52:42,559 --> 00:52:43,920
implementations

1391
00:52:43,920 --> 00:52:46,559
that uh essentially for the generation

1392
00:52:46,559 --> 00:52:49,359
of verified implementations and next

1393
00:52:49,359 --> 00:52:51,119
slide please

1394
00:52:51,119 --> 00:52:54,640
this framework is called hackspec

1395
00:52:55,680 --> 00:52:59,200
so the uh it's called hackspec and uh

1396
00:52:59,200 --> 00:53:01,040
the specification

1397
00:53:01,040 --> 00:53:03,680
language is a subset of rust so what

1398
00:53:03,680 --> 00:53:05,520
that means is that when you write your

1399
00:53:05,520 --> 00:53:07,520
model your specification you are

1400
00:53:07,520 --> 00:53:09,920
essentially writing rust code

1401
00:53:09,920 --> 00:53:12,240
and when since you are writing the rust

1402
00:53:12,240 --> 00:53:14,640
code this means that what you write the

1403
00:53:14,640 --> 00:53:17,040
model the formal verification model is

1404
00:53:17,040 --> 00:53:19,280
no longer

1405
00:53:19,280 --> 00:53:21,119
some mathematical abstraction of the

1406
00:53:21,119 --> 00:53:25,040
protocol it is executable code and this

1407
00:53:25,040 --> 00:53:29,280
specification enables the generation of

1408
00:53:29,280 --> 00:53:32,400
uh verified implementations which means

1409
00:53:32,400 --> 00:53:34,960
that it is possible to generate a

1410
00:53:34,960 --> 00:53:37,680
formally vetted implementation

1411
00:53:37,680 --> 00:53:40,160
satisfying those security properties

1412
00:53:40,160 --> 00:53:43,839
from this model and uh this pro this

1413
00:53:43,839 --> 00:53:46,720
team from india has developed a

1414
00:53:46,720 --> 00:53:50,240
complete framework uh to type check

1415
00:53:50,240 --> 00:53:53,280
this rust specification and to enable

1416
00:53:53,280 --> 00:53:55,200
its compilation onto different

1417
00:53:55,200 --> 00:53:57,200
mathematical abstraction abstracting

1418
00:53:57,200 --> 00:53:59,760
languages such as f star and

1419
00:53:59,760 --> 00:54:03,520
essentially it can be also executable

1420
00:54:03,520 --> 00:54:06,319
next slide please

1421
00:54:09,200 --> 00:54:11,520
so in practice what that means is that

1422
00:54:11,520 --> 00:54:14,640
uh to uh to arrive at uh at an

1423
00:54:14,640 --> 00:54:17,119
implementation that is formally vetted

1424
00:54:17,119 --> 00:54:20,559
uh we need to uh write some uh implement

1425
00:54:20,559 --> 00:54:21,839
some code

1426
00:54:21,839 --> 00:54:25,680
uh in rust uh in a subset of rust called

1427
00:54:25,680 --> 00:54:26,720
hackspec

1428
00:54:26,720 --> 00:54:29,839
and then uh by using their framework to

1429
00:54:29,839 --> 00:54:31,040
generate

1430
00:54:31,040 --> 00:54:33,920
the uh to generate the f star model

1431
00:54:33,920 --> 00:54:35,440
which is this mathematical of

1432
00:54:35,440 --> 00:54:37,280
mathematically abstracted language of

1433
00:54:37,280 --> 00:54:40,160
the protocol that allows the the

1434
00:54:40,160 --> 00:54:42,799
verification of different properties of

1435
00:54:42,799 --> 00:54:46,079
the protocol against the model so once

1436
00:54:46,079 --> 00:54:48,160
you arrive to that f-star model you can

1437
00:54:48,160 --> 00:54:50,160
essentially prove the different

1438
00:54:50,160 --> 00:54:52,640
properties such as symbolic security

1439
00:54:52,640 --> 00:54:54,640
on the protocol

1440
00:54:54,640 --> 00:54:57,440
in an automatic manner

1441
00:54:57,440 --> 00:54:59,440
so from f-star model which is step

1442
00:54:59,440 --> 00:55:02,640
number two in this procedure here

1443
00:55:02,640 --> 00:55:03,760
we go

1444
00:55:03,760 --> 00:55:06,720
what is necessary is to write and uh to

1445
00:55:06,720 --> 00:55:07,599
write

1446
00:55:07,599 --> 00:55:09,280
and verify

1447
00:55:09,280 --> 00:55:11,119
the implementation in another language

1448
00:55:11,119 --> 00:55:14,319
called low star against this f star

1449
00:55:14,319 --> 00:55:17,200
model that was generated automatically

1450
00:55:17,200 --> 00:55:19,920
and from there on there is automatic set

1451
00:55:19,920 --> 00:55:23,200
of tools to compile the slow star code

1452
00:55:23,200 --> 00:55:25,359
to verified c

1453
00:55:25,359 --> 00:55:28,640
or verified rust code satisfying those

1454
00:55:28,640 --> 00:55:30,319
properties that we wanted to prove from

1455
00:55:30,319 --> 00:55:32,480
the very beginning so you can see this

1456
00:55:32,480 --> 00:55:34,400
kind of flow on the right

1457
00:55:34,400 --> 00:55:36,960
and i'm trying kind of to abstract it

1458
00:55:36,960 --> 00:55:39,200
for you and i'm focusing mainly

1459
00:55:39,200 --> 00:55:41,920
personally on step number one where we

1460
00:55:41,920 --> 00:55:44,920
are implementing this uh

1461
00:55:44,920 --> 00:55:47,520
specification that is the model that is

1462
00:55:47,520 --> 00:55:50,240
going to be compiled to the f-star uh

1463
00:55:50,240 --> 00:55:51,839
f-star model

1464
00:55:51,839 --> 00:55:54,558
next slide please

1465
00:55:56,160 --> 00:55:57,520
so the goals

1466
00:55:57,520 --> 00:56:00,559
of the implementation are two-fold

1467
00:56:00,559 --> 00:56:03,119
it needs to be verifiable

1468
00:56:03,119 --> 00:56:05,520
but in the same time it needs to it

1469
00:56:05,520 --> 00:56:08,000
targets as lake targets constrained

1470
00:56:08,000 --> 00:56:09,599
environments and it needs to be

1471
00:56:09,599 --> 00:56:11,920
executable on microcontrollers

1472
00:56:11,920 --> 00:56:14,960
so for in my mind that means minimal

1473
00:56:14,960 --> 00:56:16,400
implementation

1474
00:56:16,400 --> 00:56:18,640
minimal uh very lightweight

1475
00:56:18,640 --> 00:56:20,960
implementation of the protocol where we

1476
00:56:20,960 --> 00:56:22,880
are not pulling in a bunch of different

1477
00:56:22,880 --> 00:56:25,280
libraries and dependencies and we are

1478
00:56:25,280 --> 00:56:28,000
keeping the memory footprint and the the

1479
00:56:28,000 --> 00:56:31,839
code footprint to its minimum

1480
00:56:31,920 --> 00:56:33,680
as we've seen from the previous

1481
00:56:33,680 --> 00:56:37,119
presentations software execution of

1482
00:56:37,119 --> 00:56:39,200
different cryptographic libraries takes

1483
00:56:39,200 --> 00:56:41,440
a lot of time and we've seen from

1484
00:56:41,440 --> 00:56:42,960
francisco's presentation that it can

1485
00:56:42,960 --> 00:56:45,200
take up to uh like uh

1486
00:56:45,200 --> 00:56:47,920
50 or 10 to 15 seconds to complete the

1487
00:56:47,920 --> 00:56:49,599
hand track due to the crypto to the

1488
00:56:49,599 --> 00:56:51,599
execution of crypto on different

1489
00:56:51,599 --> 00:56:54,000
microcontrollers in software

1490
00:56:54,000 --> 00:56:56,079
we want to rely on hardware accelerated

1491
00:56:56,079 --> 00:56:57,440
crypto

1492
00:56:57,440 --> 00:56:58,480
so

1493
00:56:58,480 --> 00:57:00,400
our initial compilation targets are

1494
00:57:00,400 --> 00:57:02,160
essentially native to facilitate

1495
00:57:02,160 --> 00:57:04,960
development but then also cc2538 board

1496
00:57:04,960 --> 00:57:06,880
from texas instruments and this nordic

1497
00:57:06,880 --> 00:57:09,440
chip that both support uh

1498
00:57:09,440 --> 00:57:12,319
acceleration of the different ad-hoc

1499
00:57:12,319 --> 00:57:14,000
cipher suites

1500
00:57:14,000 --> 00:57:16,799
next slide is

1501
00:57:16,880 --> 00:57:19,040
so we encountered a couple of challenges

1502
00:57:19,040 --> 00:57:22,240
on this path and the main one is that we

1503
00:57:22,240 --> 00:57:24,640
said we want a verifiable implementation

1504
00:57:24,640 --> 00:57:26,240
but the problem is that this framework

1505
00:57:26,240 --> 00:57:28,880
that prosecco from india developed

1506
00:57:28,880 --> 00:57:30,799
relies on rust standard library and

1507
00:57:30,799 --> 00:57:32,880
cannot be compiled in a no standard

1508
00:57:32,880 --> 00:57:35,359
environment meaning that it's hard that

1509
00:57:35,359 --> 00:57:38,000
it's at the moment not possible to

1510
00:57:38,000 --> 00:57:39,359
produce an executable for

1511
00:57:39,359 --> 00:57:41,760
microcontrollers

1512
00:57:41,760 --> 00:57:44,559
second point which is kind of uh a

1513
00:57:44,559 --> 00:57:47,359
feedback for the uh well not not really

1514
00:57:47,359 --> 00:57:48,799
a feedback but it's

1515
00:57:48,799 --> 00:57:51,839
mostly a point to uh to be aware of is

1516
00:57:51,839 --> 00:57:53,680
that during the this work of

1517
00:57:53,680 --> 00:57:55,599
implementing the protocol

1518
00:57:55,599 --> 00:57:59,520
uh majority of my time was spent on

1519
00:57:59,520 --> 00:58:02,640
figuring out the uh the su not the

1520
00:58:02,640 --> 00:58:03,760
support but

1521
00:58:03,760 --> 00:58:06,160
getting around the uh

1522
00:58:06,160 --> 00:58:08,480
the the point compression

1523
00:58:08,480 --> 00:58:11,359
not being supported in the libraries

1524
00:58:11,359 --> 00:58:13,040
point compression meaning that the

1525
00:58:13,040 --> 00:58:15,119
elliptic curves uh the point in an

1526
00:58:15,119 --> 00:58:16,960
elliptic curve is typically represented

1527
00:58:16,960 --> 00:58:19,440
with x and y coordinates in a compact

1528
00:58:19,440 --> 00:58:21,680
representation you will transfer as we

1529
00:58:21,680 --> 00:58:24,400
use in ad hoc we transfer only the x

1530
00:58:24,400 --> 00:58:26,240
coordinate and you're supposed on the

1531
00:58:26,240 --> 00:58:27,599
constrained device

1532
00:58:27,599 --> 00:58:29,599
or in the implementation to calculate

1533
00:58:29,599 --> 00:58:31,440
the y coordinate on the fly and this is

1534
00:58:31,440 --> 00:58:33,760
poorly supported with the existing

1535
00:58:33,760 --> 00:58:35,920
libraries including the one

1536
00:58:35,920 --> 00:58:37,599
that huxpeck uses

1537
00:58:37,599 --> 00:58:39,119
so a lot of my time during the

1538
00:58:39,119 --> 00:58:40,799
implementation implementation actually

1539
00:58:40,799 --> 00:58:42,400
was spent on that

1540
00:58:42,400 --> 00:58:45,119
and uh

1541
00:58:45,359 --> 00:58:48,240
finally in rust since trust is uh there

1542
00:58:48,240 --> 00:58:51,520
is an ongoing initiative on porting rust

1543
00:58:51,520 --> 00:58:52,880
to the different

1544
00:58:52,880 --> 00:58:54,880
different popular hardware

1545
00:58:54,880 --> 00:58:58,240
embedded uh systems the for some boards

1546
00:58:58,240 --> 00:59:01,599
that i outline namely for ti cc 2538

1547
00:59:01,599 --> 00:59:04,400
board the support is still lacking so we

1548
00:59:04,400 --> 00:59:06,720
are kind of developing it on the fly

1549
00:59:06,720 --> 00:59:09,359
next slide please

1550
00:59:09,359 --> 00:59:11,440
so the current status of the

1551
00:59:11,440 --> 00:59:14,000
implementation is that uh

1552
00:59:14,000 --> 00:59:16,799
we progressed this during the hackathon

1553
00:59:16,799 --> 00:59:18,799
uh quite a bit we came into the

1554
00:59:18,799 --> 00:59:20,640
hackathon as marco outlined with a

1555
00:59:20,640 --> 00:59:22,640
minimal implementation that passes the

1556
00:59:22,640 --> 00:59:24,400
test vectors uh

1557
00:59:24,400 --> 00:59:26,559
different essential unit functions and

1558
00:59:26,559 --> 00:59:28,799
we came out with the fully fledged

1559
00:59:28,799 --> 00:59:31,839
minimal implementation that uh

1560
00:59:31,839 --> 00:59:33,839
interoperates with the java based back

1561
00:59:33,839 --> 00:59:34,640
end

1562
00:59:34,640 --> 00:59:37,520
that uh that was used for interrupt

1563
00:59:37,520 --> 00:59:38,480
testing

1564
00:59:38,480 --> 00:59:41,520
so this minimal implementation means the

1565
00:59:41,520 --> 00:59:45,520
initiator in static static mode with ccs

1566
00:59:45,520 --> 00:59:47,359
and with integer kits essentially

1567
00:59:47,359 --> 00:59:48,960
instantiating

1568
00:59:48,960 --> 00:59:52,240
the 45 byte uh handshake

1569
00:59:52,240 --> 00:59:55,200
45 byte message two of the adhoc

1570
00:59:55,200 --> 00:59:57,599
handshake and what is important here to

1571
00:59:57,599 --> 00:59:59,760
outline is that the implementation

1572
00:59:59,760 --> 01:00:01,920
essentially uses zero

1573
01:00:01,920 --> 01:00:05,200
uh external libraries all the seabor and

1574
01:00:05,200 --> 01:00:08,240
cosy encoding are done inline

1575
01:00:08,240 --> 01:00:11,359
and it's completely no std style uh

1576
01:00:11,359 --> 01:00:14,960
developed so uh the as i said the status

1577
01:00:14,960 --> 01:00:16,079
is that the

1578
01:00:16,079 --> 01:00:18,160
implementation passes the test vectors

1579
01:00:18,160 --> 01:00:20,720
on a native machine for now successfully

1580
01:00:20,720 --> 01:00:22,720
interrupt with uh with the california

1581
01:00:22,720 --> 01:00:25,280
medha and we are currently working on

1582
01:00:25,280 --> 01:00:27,839
the build support for

1583
01:00:27,839 --> 01:00:30,240
different boards that i outlined next

1584
01:00:30,240 --> 01:00:32,720
slide please

1585
01:00:33,920 --> 01:00:34,640
so

1586
01:00:34,640 --> 01:00:36,400
we have a couple of open questions that

1587
01:00:36,400 --> 01:00:38,640
we want to bring up and discuss with the

1588
01:00:38,640 --> 01:00:41,359
formal analysis community and this is

1589
01:00:41,359 --> 01:00:44,400
mainly related how can we ensure that

1590
01:00:44,400 --> 01:00:46,480
this model that we write

1591
01:00:46,480 --> 01:00:50,400
is really uh bound to the specification

1592
01:00:50,400 --> 01:00:52,319
because this is the the one big

1593
01:00:52,319 --> 01:00:55,280
assumption that the academic community

1594
01:00:55,280 --> 01:00:57,359
makes when doing when modeling the

1595
01:00:57,359 --> 01:00:59,359
protocol and when verifying the

1596
01:00:59,359 --> 01:01:01,200
implementations so essentially they're

1597
01:01:01,200 --> 01:01:03,920
making the assumption that the model so

1598
01:01:03,920 --> 01:01:06,480
in this case this rust code that we

1599
01:01:06,480 --> 01:01:09,760
write is a perfect or i would say ideal

1600
01:01:09,760 --> 01:01:12,480
representation of the rfc so and this is

1601
01:01:12,480 --> 01:01:14,480
very open question how we ensure that so

1602
01:01:14,480 --> 01:01:16,240
this is something we will take as an

1603
01:01:16,240 --> 01:01:18,880
action point to discuss with the crypto

1604
01:01:18,880 --> 01:01:21,280
with the formal analysis community and

1605
01:01:21,280 --> 01:01:23,040
mainly the prosecco team

1606
01:01:23,040 --> 01:01:25,200
and in terms of the implementation

1607
01:01:25,200 --> 01:01:26,880
the next steps are essentially to

1608
01:01:26,880 --> 01:01:29,359
complete the port to these two boards

1609
01:01:29,359 --> 01:01:32,079
and to publish this as an as a crate on

1610
01:01:32,079 --> 01:01:34,400
uh crates dot io to be available to the

1611
01:01:34,400 --> 01:01:36,640
people in open source

1612
01:01:36,640 --> 01:01:39,040
and once that is done we have our formal

1613
01:01:39,040 --> 01:01:42,160
model that we need to use to formally

1614
01:01:42,160 --> 01:01:45,119
prove the verif to generate

1615
01:01:45,119 --> 01:01:46,960
formally vetted code that can be

1616
01:01:46,960 --> 01:01:49,119
executable on a microcontroller so i

1617
01:01:49,119 --> 01:01:53,040
think that is my last slide

1618
01:01:53,040 --> 01:01:54,960
yes so here are the people that helped

1619
01:01:54,960 --> 01:01:57,280
out during the development of this in

1620
01:01:57,280 --> 01:01:59,119
alphabetical order so this is christian

1621
01:01:59,119 --> 01:02:02,480
here also karthik franciscus denis and

1622
01:02:02,480 --> 01:02:03,440
marco

1623
01:02:03,440 --> 01:02:04,960
during the hackathon and during the

1624
01:02:04,960 --> 01:02:07,359
previous the sprint during the previous

1625
01:02:07,359 --> 01:02:08,960
period

1626
01:02:08,960 --> 01:02:12,079
so are there any questions

1627
01:02:18,720 --> 01:02:22,078
no okay thank you

1628
01:02:29,920 --> 01:02:32,920
um

1629
01:02:34,319 --> 01:02:37,520
okay with that uh i propose we go with

1630
01:02:37,520 --> 01:02:40,160
the next agenda item and this is the

1631
01:02:40,160 --> 01:02:43,839
computational analysis

1632
01:02:43,839 --> 01:02:46,319
of the ad hoc protocol and baptist can

1633
01:02:46,319 --> 01:02:48,480
you hear us

1634
01:02:48,480 --> 01:02:51,119
yes i can hear you okay yes so we hear

1635
01:02:51,119 --> 01:02:54,640
you loud and clear so the floor is yours

1636
01:02:54,640 --> 01:02:57,440
okay so hi everyone so

1637
01:02:57,440 --> 01:02:58,640
i'm gonna

1638
01:02:58,640 --> 01:03:00,960
present you the

1639
01:03:00,960 --> 01:03:02,400
how we will

1640
01:03:02,400 --> 01:03:04,319
prove the

1641
01:03:04,319 --> 01:03:07,440
security of the adduct protocol in the

1642
01:03:07,440 --> 01:03:08,880
computational

1643
01:03:08,880 --> 01:03:11,200
model

1644
01:03:11,200 --> 01:03:14,640
so first the differences between the

1645
01:03:14,640 --> 01:03:18,880
symbolic and the computational security

1646
01:03:18,880 --> 01:03:22,480
so in computational security we consider

1647
01:03:22,480 --> 01:03:24,559
the messages as

1648
01:03:24,559 --> 01:03:25,839
bit strings

1649
01:03:25,839 --> 01:03:27,119
rather than

1650
01:03:27,119 --> 01:03:28,240
terms

1651
01:03:28,240 --> 01:03:31,039
and the primitive are

1652
01:03:31,039 --> 01:03:33,920
simply functions on uh bits and bit

1653
01:03:33,920 --> 01:03:35,760
strings

1654
01:03:35,760 --> 01:03:38,400
in the computational

1655
01:03:38,400 --> 01:03:39,760
model

1656
01:03:39,760 --> 01:03:42,720
the attacker is a near probabilistic

1657
01:03:42,720 --> 01:03:45,200
polynomial time algorithm

1658
01:03:45,200 --> 01:03:46,799
and

1659
01:03:46,799 --> 01:03:48,240
the

1660
01:03:48,240 --> 01:03:49,920
the goal of the

1661
01:03:49,920 --> 01:03:53,599
attacker will be to learn any bit of

1662
01:03:53,599 --> 01:03:56,240
information on

1663
01:03:56,240 --> 01:03:59,760
on the bit strings so

1664
01:03:59,760 --> 01:04:01,280
where in

1665
01:04:01,280 --> 01:04:02,880
symbolic

1666
01:04:02,880 --> 01:04:04,559
security the

1667
01:04:04,559 --> 01:04:07,200
attacker cannot distinguish when the

1668
01:04:07,200 --> 01:04:08,880
value of the secret

1669
01:04:08,880 --> 01:04:10,079
changes

1670
01:04:10,079 --> 01:04:12,640
in the computational security

1671
01:04:12,640 --> 01:04:15,520
we uh we have to prove that

1672
01:04:15,520 --> 01:04:18,319
anata cannot distinguish between a

1673
01:04:18,319 --> 01:04:22,480
secret key and random value

1674
01:04:24,319 --> 01:04:26,640
so a bit of context so

1675
01:04:26,640 --> 01:04:29,920
we have the constraints

1676
01:04:29,920 --> 01:04:32,960
of adducts a small number of some whole

1677
01:04:32,960 --> 01:04:37,520
number for a small number of messages

1678
01:04:37,520 --> 01:04:39,280
small message

1679
01:04:39,280 --> 01:04:42,480
size and minimize code and memory

1680
01:04:42,480 --> 01:04:44,480
footprint so

1681
01:04:44,480 --> 01:04:47,010
this this constraint leads to

1682
01:04:47,010 --> 01:04:48,400
[Music]

1683
01:04:48,400 --> 01:04:52,319
to the use of in some

1684
01:04:53,760 --> 01:04:57,680
in the summer so you have uh

1685
01:04:58,000 --> 01:05:02,240
need to use a 64-bit security mac

1686
01:05:02,240 --> 01:05:02,740
and

1687
01:05:02,740 --> 01:05:04,280
[Music]

1688
01:05:04,280 --> 01:05:06,640
128-bit security

1689
01:05:06,640 --> 01:05:08,880
electric curves defiant

1690
01:05:08,880 --> 01:05:10,400
and so there's a qualification about

1691
01:05:10,400 --> 01:05:12,000
this sorry for interrupting you so just

1692
01:05:12,000 --> 01:05:13,760
as a clarification so this is one

1693
01:05:13,760 --> 01:05:16,799
particular mode of ad hoc and uh

1694
01:05:16,799 --> 01:05:19,039
static static and uh

1695
01:05:19,039 --> 01:05:21,680
obviously the most constrained setting

1696
01:05:21,680 --> 01:05:22,960
the uh

1697
01:05:22,960 --> 01:05:24,480
cipher suite

1698
01:05:24,480 --> 01:05:26,640
zero and two which use the eight byte

1699
01:05:26,640 --> 01:05:28,079
max

1700
01:05:28,079 --> 01:05:30,160
that's it so the

1701
01:05:30,160 --> 01:05:32,720
the idea is to prove that even using a

1702
01:05:32,720 --> 01:05:37,119
64-bit security mac we have no

1703
01:05:37,119 --> 01:05:38,720
no leak of

1704
01:05:38,720 --> 01:05:41,359
security

1705
01:05:43,599 --> 01:05:46,720
so our security goals so first we have

1706
01:05:46,720 --> 01:05:51,240
to define what is a security level of

1707
01:05:51,240 --> 01:05:53,680
168 bits

1708
01:05:53,680 --> 01:05:56,400
so we have to consider the execution

1709
01:05:56,400 --> 01:05:59,599
time of the protocol and the success

1710
01:05:59,599 --> 01:06:02,000
priority of the attack so

1711
01:06:02,000 --> 01:06:04,799
the success probability for the attacker

1712
01:06:04,799 --> 01:06:05,599
to

1713
01:06:05,599 --> 01:06:07,280
distinguish between

1714
01:06:07,280 --> 01:06:10,400
the session key and a random value

1715
01:06:10,400 --> 01:06:12,799
so with t the occasion time of the

1716
01:06:12,799 --> 01:06:15,359
protocol and epsilon the success

1717
01:06:15,359 --> 01:06:16,559
probability

1718
01:06:16,559 --> 01:06:19,440
we have to prove that t on

1719
01:06:19,440 --> 01:06:20,880
epsilon

1720
01:06:20,880 --> 01:06:23,520
is at least

1721
01:06:23,520 --> 01:06:25,799
greater than 2 to the

1722
01:06:25,799 --> 01:06:28,000
128. so

1723
01:06:28,000 --> 01:06:30,960
if we reach this we can we can say that

1724
01:06:30,960 --> 01:06:35,680
we have a security level of 128 bits

1725
01:06:35,680 --> 01:06:39,200
so we have three points to approve so

1726
01:06:39,200 --> 01:06:42,079
first we have the key privacy so at most

1727
01:06:42,079 --> 01:06:44,079
both participants know the finalization

1728
01:06:44,079 --> 01:06:44,880
key

1729
01:06:44,880 --> 01:06:45,680
so

1730
01:06:45,680 --> 01:06:48,000
by compromising the long term credential

1731
01:06:48,000 --> 01:06:50,880
of srp an attacker should not be able to

1732
01:06:50,880 --> 01:06:53,359
compute past session keys

1733
01:06:53,359 --> 01:06:55,440
so

1734
01:06:55,440 --> 01:06:59,520
this is a forward security so even

1735
01:06:59,520 --> 01:07:01,440
yes even if

1736
01:07:01,440 --> 01:07:03,280
an attacker gets the

1737
01:07:03,280 --> 01:07:06,720
information much later he cannot

1738
01:07:06,720 --> 01:07:10,000
take older keys and get information

1739
01:07:10,000 --> 01:07:11,920
about it

1740
01:07:11,920 --> 01:07:14,319
then we have the mutual authentication

1741
01:07:14,319 --> 01:07:16,880
where executive both participants have

1742
01:07:16,880 --> 01:07:18,880
the material to compute the final

1743
01:07:18,880 --> 01:07:20,480
session key

1744
01:07:20,480 --> 01:07:23,119
and we have to

1745
01:07:23,119 --> 01:07:28,039
to prove the identity protection

1746
01:07:31,119 --> 01:07:32,000
so

1747
01:07:32,000 --> 01:07:35,280
for the the key privacy so that's also

1748
01:07:35,280 --> 01:07:36,640
known as

1749
01:07:36,640 --> 01:07:39,280
implicit authentication

1750
01:07:39,280 --> 01:07:41,200
it relies on the

1751
01:07:41,200 --> 01:07:43,599
computational development assumptions

1752
01:07:43,599 --> 01:07:46,880
and therefore it depends on the group

1753
01:07:46,880 --> 01:07:47,760
side

1754
01:07:47,760 --> 01:07:50,640
in which we are working

1755
01:07:50,640 --> 01:07:51,520
and

1756
01:07:51,520 --> 01:07:56,079
to prove the key privacy we will

1757
01:07:56,079 --> 01:07:57,760
we'll use the

1758
01:07:57,760 --> 01:08:00,160
find then guess model

1759
01:08:00,160 --> 01:08:02,960
where we give the adversary the access

1760
01:08:02,960 --> 01:08:06,400
to three records so the first one is the

1761
01:08:06,400 --> 01:08:08,319
descent where

1762
01:08:08,319 --> 01:08:11,680
the attacker can model um well

1763
01:08:11,680 --> 01:08:12,799
where the

1764
01:08:12,799 --> 01:08:15,359
send oracle models an active attack in

1765
01:08:15,359 --> 01:08:17,439
in which the editorial may intercept the

1766
01:08:17,439 --> 01:08:19,040
message

1767
01:08:19,040 --> 01:08:20,960
you can modify it

1768
01:08:20,960 --> 01:08:23,359
create a new one and you can do whatever

1769
01:08:23,359 --> 01:08:24,880
you want

1770
01:08:24,880 --> 01:08:27,439
the reveal oracle where he

1771
01:08:27,439 --> 01:08:28,238
ran

1772
01:08:28,238 --> 01:08:31,120
which models the misuse of the sessions

1773
01:08:31,120 --> 01:08:33,920
keys by a user

1774
01:08:33,920 --> 01:08:36,880
and finally the test oracle which tries

1775
01:08:36,880 --> 01:08:39,520
to capture the adversary ability or

1776
01:08:39,520 --> 01:08:41,120
inability

1777
01:08:41,120 --> 01:08:43,279
to tell apart a realization key from a

1778
01:08:43,279 --> 01:08:44,880
rodent one

1779
01:08:44,880 --> 01:08:48,000
so the idea is that

1780
01:08:48,000 --> 01:08:50,479
given so an

1781
01:08:50,479 --> 01:08:53,279
infinite access to descent and reveal

1782
01:08:53,279 --> 01:08:56,560
the oracles and only one access to the

1783
01:08:56,560 --> 01:08:57,520
test

1784
01:08:57,520 --> 01:08:59,198
oracle the

1785
01:08:59,198 --> 01:09:00,319
attacker

1786
01:09:00,319 --> 01:09:01,439
have to

1787
01:09:01,439 --> 01:09:03,359
we say that attackers succeed if it

1788
01:09:03,359 --> 01:09:07,600
cannot distinguish the session key from

1789
01:09:07,600 --> 01:09:09,759
a random value

1790
01:09:09,759 --> 01:09:13,198
so the idea here is to that

1791
01:09:13,198 --> 01:09:15,839
we will consider the

1792
01:09:15,839 --> 01:09:17,140
the attacker that

1793
01:09:17,140 --> 01:09:18,238
[Music]

1794
01:09:18,238 --> 01:09:20,880
can use as many times the sand and

1795
01:09:20,880 --> 01:09:22,158
reveal

1796
01:09:22,158 --> 01:09:23,920
oracles

1797
01:09:23,920 --> 01:09:25,120
when uh

1798
01:09:25,120 --> 01:09:27,600
when he will uh

1799
01:09:27,600 --> 01:09:31,679
he will think that he uh he

1800
01:09:31,679 --> 01:09:34,560
when we think he can say that the key is

1801
01:09:34,560 --> 01:09:37,600
either a valid key or a number u

1802
01:09:37,600 --> 01:09:41,600
he uh use the test record and then uh

1803
01:09:41,600 --> 01:09:44,238
he uh he wins if uh

1804
01:09:44,238 --> 01:09:49,839
if if it's guess is a is the good one

1805
01:09:51,040 --> 01:09:53,600
so the mutual authentication

1806
01:09:53,600 --> 01:09:56,239
so that's equivalent to the explicit

1807
01:09:56,239 --> 01:09:58,800
authentication

1808
01:09:58,800 --> 01:10:00,239
so

1809
01:10:00,239 --> 01:10:04,000
we we use flags to represent the

1810
01:10:04,000 --> 01:10:06,400
the mutual authentication so we have two

1811
01:10:06,400 --> 01:10:09,600
flags the first flag so most initialized

1812
01:10:09,600 --> 01:10:10,880
eyes at

1813
01:10:10,880 --> 01:10:11,760
zero

1814
01:10:11,760 --> 01:10:13,520
is the flag accept

1815
01:10:13,520 --> 01:10:15,199
so

1816
01:10:15,199 --> 01:10:19,040
either the initiator of the responder

1817
01:10:19,040 --> 01:10:21,920
will activate will put the accept flag

1818
01:10:21,920 --> 01:10:24,560
at 1 1 am

1819
01:10:24,560 --> 01:10:25,679
when he

1820
01:10:25,679 --> 01:10:28,719
has the required material

1821
01:10:28,719 --> 01:10:31,199
and we have the terminate flag that

1822
01:10:31,199 --> 01:10:34,000
asserts that the uh

1823
01:10:34,000 --> 01:10:36,719
the other participant has the required

1824
01:10:36,719 --> 01:10:39,199
material so uh

1825
01:10:39,199 --> 01:10:40,480
when uh

1826
01:10:40,480 --> 01:10:43,440
the the idea is to prove that uh

1827
01:10:43,440 --> 01:10:44,640
both

1828
01:10:44,640 --> 01:10:47,360
participants can

1829
01:10:47,360 --> 01:10:50,080
activate the terminate flag with the

1830
01:10:50,080 --> 01:10:52,320
recurrent security

1831
01:10:52,320 --> 01:10:55,520
and here it relies on the

1832
01:10:55,520 --> 01:10:59,920
mac security so i said before as we use

1833
01:10:59,920 --> 01:11:03,199
64 bits mac

1834
01:11:03,199 --> 01:11:04,320
so

1835
01:11:04,320 --> 01:11:04,990
that's

1836
01:11:04,990 --> 01:11:06,640
[Music]

1837
01:11:06,640 --> 01:11:08,800
that's there is a that's there's a

1838
01:11:08,800 --> 01:11:11,920
mistake so 64 bits max provides 64 bits

1839
01:11:11,920 --> 01:11:13,840
security

1840
01:11:13,840 --> 01:11:17,040
and as we want to prove that the we have

1841
01:11:17,040 --> 01:11:19,120
a 128

1842
01:11:19,120 --> 01:11:20,960
bit security

1843
01:11:20,960 --> 01:11:21,840
we are

1844
01:11:21,840 --> 01:11:24,159
we will check so the

1845
01:11:24,159 --> 01:11:26,120
if the

1846
01:11:26,120 --> 01:11:29,360
128-bit security is reached

1847
01:11:29,360 --> 01:11:32,000
after few messages because the idea is

1848
01:11:32,000 --> 01:11:33,920
we know that we have a sync with a

1849
01:11:33,920 --> 01:11:35,600
simple

1850
01:11:35,600 --> 01:11:39,360
execution we will have a 64-bit security

1851
01:11:39,360 --> 01:11:43,600
but we want to check if after

1852
01:11:43,600 --> 01:11:46,400
four or six messages so we have other

1853
01:11:46,400 --> 01:11:49,520
information that will allow us to

1854
01:11:49,520 --> 01:11:51,679
guarantee to prove the mutual

1855
01:11:51,679 --> 01:11:53,199
authentication

1856
01:11:53,199 --> 01:11:56,159
okay so just as a clarification uh just

1857
01:11:56,159 --> 01:11:58,480
as a clarification in the requirements

1858
01:11:58,480 --> 01:12:00,800
document we have agreed upon the

1859
01:12:00,800 --> 01:12:05,600
security level of 127 uh bits

1860
01:12:05,600 --> 01:12:09,440
and we do include eight byte max in the

1861
01:12:09,440 --> 01:12:11,840
in the protocol so what what this is

1862
01:12:11,840 --> 01:12:14,880
referring to is that the 128 security

1863
01:12:14,880 --> 01:12:17,600
bits uh that they are studying

1864
01:12:17,600 --> 01:12:19,440
uh if i if i understand correctly about

1865
01:12:19,440 --> 01:12:21,120
this please correct me that you are

1866
01:12:21,120 --> 01:12:22,640
studying that

1867
01:12:22,640 --> 01:12:25,120
after a few application messages that

1868
01:12:25,120 --> 01:12:27,960
are exchanged we can actually reach the

1869
01:12:27,960 --> 01:12:32,800
127 bit uh security uh over the given

1870
01:12:32,800 --> 01:12:34,080
key

1871
01:12:34,080 --> 01:12:36,640
even though the macs that were used to

1872
01:12:36,640 --> 01:12:38,960
authenticate the handshake were only

1873
01:12:38,960 --> 01:12:41,120
eight bytes is that correct

1874
01:12:41,120 --> 01:12:43,679
it's perfectly correct so the that's it

1875
01:12:43,679 --> 01:12:45,120
so

1876
01:12:45,120 --> 01:12:47,840
that's uh that's the goal

1877
01:12:47,840 --> 01:12:51,320
thanks for the clarification

1878
01:12:52,080 --> 01:12:55,360
and the third point is the identity

1879
01:12:55,360 --> 01:12:57,520
protection so

1880
01:12:57,520 --> 01:13:00,800
by definition we we have the identity

1881
01:13:00,800 --> 01:13:03,040
protection if

1882
01:13:03,040 --> 01:13:07,520
the protocol is secure against active

1883
01:13:07,520 --> 01:13:10,000
attackers for the initiator

1884
01:13:10,000 --> 01:13:13,840
and against passive attackers for

1885
01:13:13,840 --> 01:13:16,080
for the responder

1886
01:13:16,080 --> 01:13:17,679
and

1887
01:13:17,679 --> 01:13:18,719
how to

1888
01:13:18,719 --> 01:13:23,760
represent the security by uh using games

1889
01:13:23,760 --> 01:13:26,320
so we will give the attacker two

1890
01:13:26,320 --> 01:13:27,760
identities

1891
01:13:27,760 --> 01:13:28,640
and

1892
01:13:28,640 --> 01:13:32,000
an active attacker should not be able to

1893
01:13:32,000 --> 01:13:34,800
say which one is the initiator

1894
01:13:34,800 --> 01:13:38,080
and for the um

1895
01:13:38,080 --> 01:13:41,280
for the responder so also we give two

1896
01:13:41,280 --> 01:13:44,560
identities one of them will be

1897
01:13:44,560 --> 01:13:47,280
the responder but a passive attacker

1898
01:13:47,280 --> 01:13:49,840
should not be able to

1899
01:13:49,840 --> 01:13:54,400
distinguish which one is the responder

1900
01:13:58,880 --> 01:14:00,560
and

1901
01:14:00,560 --> 01:14:01,440
to

1902
01:14:01,440 --> 01:14:03,679
conclude we have the

1903
01:14:03,679 --> 01:14:06,719
protocol decomposition so

1904
01:14:06,719 --> 01:14:08,719
in yellow you have the

1905
01:14:08,719 --> 01:14:11,360
data used for the key privacy so that

1906
01:14:11,360 --> 01:14:13,280
are the

1907
01:14:13,280 --> 01:14:14,400
the

1908
01:14:14,400 --> 01:14:17,199
difficult man

1909
01:14:17,199 --> 01:14:18,719
defeatment

1910
01:14:18,719 --> 01:14:21,040
public keys and

1911
01:14:21,040 --> 01:14:23,600
mutual authentication will be

1912
01:14:23,600 --> 01:14:24,640
other

1913
01:14:24,640 --> 01:14:27,679
value in

1914
01:14:27,679 --> 01:14:30,400
with the value in in green and the

1915
01:14:30,400 --> 01:14:33,440
identity protection is ensured by the

1916
01:14:33,440 --> 01:14:36,080
inclusion so the idea is to

1917
01:14:36,080 --> 01:14:37,199
study

1918
01:14:37,199 --> 01:14:40,400
so each of these values for

1919
01:14:40,400 --> 01:14:41,280
the

1920
01:14:41,280 --> 01:14:44,560
the security

1921
01:14:44,560 --> 01:14:46,480
concerns and

1922
01:14:46,480 --> 01:14:48,480
prove or

1923
01:14:48,480 --> 01:14:51,120
conclude that the the security

1924
01:14:51,120 --> 01:14:53,480
is as expected

1925
01:14:53,480 --> 01:14:57,760
127 beats or say that using a

1926
01:14:57,760 --> 01:14:59,360
mac with

1927
01:14:59,360 --> 01:15:02,719
8 bytes is not

1928
01:15:02,719 --> 01:15:05,440
is not doable

1929
01:15:08,960 --> 01:15:12,080
so this is the

1930
01:15:12,080 --> 01:15:15,920
the end so if you have questions

1931
01:15:15,920 --> 01:15:18,480
okay thank you batista so i believe we

1932
01:15:18,480 --> 01:15:22,599
have scott in the queue

1933
01:15:28,320 --> 01:15:29,840
okay uh

1934
01:15:29,840 --> 01:15:32,560
okay can you hear me uh yes we can

1935
01:15:32,560 --> 01:15:34,400
yeah uh

1936
01:15:34,400 --> 01:15:36,640
excuse me for for not following us real

1937
01:15:36,640 --> 01:15:39,120
closely but i believe what you're doing

1938
01:15:39,120 --> 01:15:41,280
is saying you'll exchange several

1939
01:15:41,280 --> 01:15:44,000
messages using a 64-bit mac

1940
01:15:44,000 --> 01:15:46,640
and you're yours and if all those

1941
01:15:46,640 --> 01:15:48,560
messages authenticate then you hope to

1942
01:15:48,560 --> 01:15:52,080
get the full 127-bit uh security level

1943
01:15:52,080 --> 01:15:54,400
is that correct

1944
01:15:54,400 --> 01:15:55,840
yes

1945
01:15:55,840 --> 01:15:57,920
uh i don't believe

1946
01:15:57,920 --> 01:16:01,920
gcm gives you that property uh because

1947
01:16:01,920 --> 01:16:04,400
uh if if the attacker finds the initial

1948
01:16:04,400 --> 01:16:06,960
uh message and manages to forge it

1949
01:16:06,960 --> 01:16:09,120
uh how we perform the forgery will tell

1950
01:16:09,120 --> 01:16:11,760
them how to perform later

1951
01:16:11,760 --> 01:16:14,560
later forgeries with essentially no with

1952
01:16:14,560 --> 01:16:16,880
with essentially no additional effort so

1953
01:16:16,880 --> 01:16:21,080
you only get 64-bit security

1954
01:16:21,760 --> 01:16:23,440
uh

1955
01:16:23,440 --> 01:16:26,239
i can't tell you more because you

1956
01:16:26,239 --> 01:16:27,600
want to

1957
01:16:27,600 --> 01:16:32,080
to determine if yes or not

1958
01:16:32,400 --> 01:16:33,520
but

1959
01:16:33,520 --> 01:16:38,880
the idea is maybe to be able to say that

1960
01:16:38,880 --> 01:16:40,320
do we have the

1961
01:16:40,320 --> 01:16:43,840
we do not have the

1962
01:16:43,840 --> 01:16:47,280
security before the attacker can forge

1963
01:16:47,280 --> 01:16:49,840
a value so

1964
01:16:49,840 --> 01:16:53,440
i don't know if it answers your question

1965
01:16:53,440 --> 01:16:56,080
ah this is not a question this is a comm

1966
01:16:56,080 --> 01:16:58,080
an observation based on the security

1967
01:16:58,080 --> 01:17:00,400
properties that gcm gives you this is

1968
01:17:00,400 --> 01:17:02,800
specific gcm uh your other

1969
01:17:02,800 --> 01:17:05,280
authentication uh your integrity program

1970
01:17:05,280 --> 01:17:07,440
routines uh functions do not have the

1971
01:17:07,440 --> 01:17:09,679
same property

1972
01:17:09,679 --> 01:17:14,360
yes the they did we

1973
01:17:17,600 --> 01:17:18,719
uh so

1974
01:17:18,719 --> 01:17:20,480
yes uh

1975
01:17:20,480 --> 01:17:22,080
the idea is more than

1976
01:17:22,080 --> 01:17:24,560
we know the

1977
01:17:24,560 --> 01:17:26,400
we'll have

1978
01:17:26,400 --> 01:17:29,199
64 bit on the

1979
01:17:29,199 --> 01:17:31,679
forgery but yes we

1980
01:17:31,679 --> 01:17:33,600
don't know how to say

1981
01:17:33,600 --> 01:17:35,820
that

1982
01:17:35,820 --> 01:17:39,030
[Music]

1983
01:17:39,040 --> 01:17:40,400
maybe

1984
01:17:40,400 --> 01:17:43,679
that's not being able to detect

1985
01:17:43,679 --> 01:17:45,199
an imposter

1986
01:17:45,199 --> 01:17:49,679
before he has the time to afford the mac

1987
01:17:49,679 --> 01:17:52,800
uh the the the what attack would do is

1988
01:17:52,800 --> 01:17:54,640
have to get guests right for the very

1989
01:17:54,640 --> 01:17:55,840
first

1990
01:17:55,840 --> 01:18:00,400
very first one so it didn't hit well

1991
01:18:00,400 --> 01:18:03,280
there's a nico okay uh what the attacker

1992
01:18:03,280 --> 01:18:05,199
will have to do is basically do a

1993
01:18:05,199 --> 01:18:07,360
correct guess on the very first um uh

1994
01:18:07,360 --> 01:18:09,360
mackie's attacking

1995
01:18:09,360 --> 01:18:11,199
basically doing a blind guess

1996
01:18:11,199 --> 01:18:12,239
actually you can do a little better than

1997
01:18:12,239 --> 01:18:13,600
that but not much

1998
01:18:13,600 --> 01:18:16,000
uh once he's done that

1999
01:18:16,000 --> 01:18:17,360
then

2000
01:18:17,360 --> 01:18:19,679
uh and he's done that successfully then

2001
01:18:19,679 --> 01:18:22,400
he can actually do later uh

2002
01:18:22,400 --> 01:18:24,560
perform more forgeries for essentially

2003
01:18:24,560 --> 01:18:27,800
for free

2004
01:18:29,760 --> 01:18:32,080
so i i don't hear you well there's an

2005
01:18:32,080 --> 01:18:35,120
echo and i believe you can repeat please

2006
01:18:35,120 --> 01:18:36,719
okay

2007
01:18:36,719 --> 01:18:38,239
um

2008
01:18:38,239 --> 01:18:40,880
if the attacker um

2009
01:18:40,880 --> 01:18:43,199
uh basically uh for the first message he

2010
01:18:43,199 --> 01:18:45,679
wants to forge he does essentially a

2011
01:18:45,679 --> 01:18:48,400
blind guess

2012
01:18:49,520 --> 01:18:51,760
once he's done that and and if he's

2013
01:18:51,760 --> 01:18:53,120
successful

2014
01:18:53,120 --> 01:18:55,280
then uh

2015
01:18:55,280 --> 01:18:58,239
he can he then he he can forge later

2016
01:18:58,239 --> 01:19:01,120
messages which means that the security

2017
01:19:01,120 --> 01:19:03,679
of the later messages of those macs does

2018
01:19:03,679 --> 01:19:05,280
not increase the security level

2019
01:19:05,280 --> 01:19:09,380
therefore you're stuck at 64 bits

2020
01:19:09,380 --> 01:19:11,040
[Music]

2021
01:19:11,040 --> 01:19:13,920
uh yes that's interesting

2022
01:19:13,920 --> 01:19:15,120
so

2023
01:19:15,120 --> 01:19:17,199
just at the interest of time um scott

2024
01:19:17,199 --> 01:19:19,040
scott is it

2025
01:19:19,040 --> 01:19:20,480
is the

2026
01:19:20,480 --> 01:19:21,920
kind of attack you're mentioning

2027
01:19:21,920 --> 01:19:24,159
specific to gcm or what it also means

2028
01:19:24,159 --> 01:19:25,520
the ccm

2029
01:19:25,520 --> 01:19:27,760
no is it specific to gcm

2030
01:19:27,760 --> 01:19:30,640
so i i don't believe we have 64-bit

2031
01:19:30,640 --> 01:19:32,480
gcm

2032
01:19:32,480 --> 01:19:35,040
max in the protocol oh you do not okay

2033
01:19:35,040 --> 01:19:36,880
good for you thank you very much

2034
01:19:36,880 --> 01:19:38,800
okay great thanks

2035
01:19:38,800 --> 01:19:41,040
so uh mark and and if we could can i

2036
01:19:41,040 --> 01:19:42,880
move on time-wise be great so mark go

2037
01:19:42,880 --> 01:19:45,880
ahead

2038
01:19:52,159 --> 01:19:56,040
mark you're in the queue marcolunga

2039
01:20:04,960 --> 01:20:07,040
i guess not uh okay in in that case

2040
01:20:07,040 --> 01:20:08,960
batiste thank you

2041
01:20:08,960 --> 01:20:10,320
um

2042
01:20:10,320 --> 01:20:11,920
i i guess you're wondering about time go

2043
01:20:11,920 --> 01:20:14,639
ahead yes so

2044
01:20:14,639 --> 01:20:15,520
um

2045
01:20:15,520 --> 01:20:18,480
marx has again asked to send screen

2046
01:20:18,480 --> 01:20:21,599
mark can you hear us

2047
01:20:22,000 --> 01:20:24,400
we're not getting audio so we'll have to

2048
01:20:24,400 --> 01:20:28,639
cut it here oh yeah we cannot hear you

2049
01:20:28,639 --> 01:20:29,840
we see you

2050
01:20:29,840 --> 01:20:33,719
but we cannot hear you

2051
01:20:35,360 --> 01:20:37,440
can you hear me now yes now we can hear

2052
01:20:37,440 --> 01:20:40,320
you oh i apologize uh microphone

2053
01:20:40,320 --> 01:20:42,639
problems um i just had a question for

2054
01:20:42,639 --> 01:20:45,360
baptist thank you for the presentation

2055
01:20:45,360 --> 01:20:47,520
so i'm from ethioric where we have a

2056
01:20:47,520 --> 01:20:49,199
team also working on the computational

2057
01:20:49,199 --> 01:20:51,679
analysis so this presentation is of

2058
01:20:51,679 --> 01:20:54,239
interest to us and we're just wondering

2059
01:20:54,239 --> 01:20:56,159
in your analysis when you were talking

2060
01:20:56,159 --> 01:20:58,960
about ski secrecy

2061
01:20:58,960 --> 01:21:00,800
what did you define actually as a

2062
01:21:00,800 --> 01:21:03,760
session key uh for the protocol

2063
01:21:03,760 --> 01:21:05,679
i also know whether you could give some

2064
01:21:05,679 --> 01:21:07,520
details on that so maybe if someone else

2065
01:21:07,520 --> 01:21:09,440
as well could jump on that to give a bit

2066
01:21:09,440 --> 01:21:11,199
some more detail since we're a bit

2067
01:21:11,199 --> 01:21:13,440
confused on what should be considered as

2068
01:21:13,440 --> 01:21:17,760
a final session key for edward thank you

2069
01:21:17,760 --> 01:21:21,679
so the final session key is the

2070
01:21:21,679 --> 01:21:23,840
is the key that

2071
01:21:23,840 --> 01:21:26,480
the common key that

2072
01:21:26,480 --> 01:21:30,239
both participants share so uh

2073
01:21:30,239 --> 01:21:32,560
that's the

2074
01:21:32,560 --> 01:21:34,719
that's the

2075
01:21:34,719 --> 01:21:36,639
i don't know

2076
01:21:36,639 --> 01:21:38,390
how to say that

2077
01:21:38,390 --> 01:21:39,600
[Music]

2078
01:21:39,600 --> 01:21:42,960
yes that's the the key the the share at

2079
01:21:42,960 --> 01:21:46,080
the end of the of the protocol

2080
01:21:46,080 --> 01:21:48,800
so i don't know if it's clear so i

2081
01:21:48,800 --> 01:21:51,040
believe you're referring to

2082
01:21:51,040 --> 01:21:54,040
prk4x3m

2083
01:21:54,800 --> 01:21:56,719
yes in a sense yeah so

2084
01:21:56,719 --> 01:21:58,000
essentially

2085
01:21:58,000 --> 01:21:59,120
in in

2086
01:21:59,120 --> 01:22:00,639
as far as we've been in the analysis

2087
01:22:00,639 --> 01:22:03,120
we're not able to to really clearly say

2088
01:22:03,120 --> 01:22:05,360
is the pr key

2089
01:22:05,360 --> 01:22:07,440
considered as sort of the final session

2090
01:22:07,440 --> 01:22:08,960
key um

2091
01:22:08,960 --> 01:22:10,639
or whether there should actually be some

2092
01:22:10,639 --> 01:22:12,719
sort of final derivation as well to

2093
01:22:12,719 --> 01:22:15,360
actually extract what should be uh the

2094
01:22:15,360 --> 01:22:16,560
session key

2095
01:22:16,560 --> 01:22:17,360
um

2096
01:22:17,360 --> 01:22:18,480
uh so

2097
01:22:18,480 --> 01:22:21,440
okay uh some maybe the authors can uh

2098
01:22:21,440 --> 01:22:23,360
respond to that uh if not i can also

2099
01:22:23,360 --> 01:22:25,839
compliment

2100
01:22:31,440 --> 01:22:33,520
so you're on do would you like to

2101
01:22:33,520 --> 01:22:35,410
comment on this or

2102
01:22:35,410 --> 01:22:36,880
[Music]

2103
01:22:36,880 --> 01:22:38,639
yeah i think we should take the next

2104
01:22:38,639 --> 01:22:41,040
presentation

2105
01:22:41,040 --> 01:22:44,560
but uh yeah it should be higher the

2106
01:22:44,560 --> 01:22:49,000
arcade correct we have more derivation

2107
01:22:54,639 --> 01:22:57,360
so it's cutting on your side so i hope

2108
01:22:57,360 --> 01:22:59,120
it will be fixed it seems like a

2109
01:22:59,120 --> 01:23:01,520
bandwidth issue yeah i can

2110
01:23:01,520 --> 01:23:02,480
i think

2111
01:23:02,480 --> 01:23:04,560
what what is session key it

2112
01:23:04,560 --> 01:23:06,639
might be different from the formal

2113
01:23:06,639 --> 01:23:10,159
analysis we need to define the

2114
01:23:10,159 --> 01:23:12,239
the concept of a session key and then

2115
01:23:12,239 --> 01:23:14,159
what is actually used in

2116
01:23:14,159 --> 01:23:15,840
ad hoc

2117
01:23:15,840 --> 01:23:16,880
where you

2118
01:23:16,880 --> 01:23:19,600
we do derive different session keys for

2119
01:23:19,600 --> 01:23:22,800
for example oscar but that may or may

2120
01:23:22,800 --> 01:23:25,360
not be covered in the formal analysis

2121
01:23:25,360 --> 01:23:26,320
but i think

2122
01:23:26,320 --> 01:23:29,519
we need to come back to that

2123
01:23:30,560 --> 01:23:32,960
yeah okay so uh

2124
01:23:32,960 --> 01:23:35,199
so we'll have to cut it here so i

2125
01:23:35,199 --> 01:23:37,040
propose we take this to the mailing list

2126
01:23:37,040 --> 01:23:38,960
as this is crucial for the security of

2127
01:23:38,960 --> 01:23:41,440
the protocol and for the for the for the

2128
01:23:41,440 --> 01:23:43,679
work of this working group so mark thank

2129
01:23:43,679 --> 01:23:46,159
you for uh letting us know that you work

2130
01:23:46,159 --> 01:23:48,719
on this uh on this as well

2131
01:23:48,719 --> 01:23:51,280
i have a final question for the baptist

2132
01:23:51,280 --> 01:23:53,280
on the timeline of

2133
01:23:53,280 --> 01:23:55,440
his work so baptist could you comment on

2134
01:23:55,440 --> 01:23:57,040
the timeline when do you expect to

2135
01:23:57,040 --> 01:23:58,719
because from my understanding this is

2136
01:23:58,719 --> 01:24:01,120
the work that has started but is not

2137
01:24:01,120 --> 01:24:02,960
kind of completed yet so could you

2138
01:24:02,960 --> 01:24:06,000
comment on the timeline

2139
01:24:06,000 --> 01:24:07,760
yes so

2140
01:24:07,760 --> 01:24:10,480
normally i guess it would not require so

2141
01:24:10,480 --> 01:24:11,520
much

2142
01:24:11,520 --> 01:24:13,440
time so

2143
01:24:13,440 --> 01:24:15,360
i have to check with

2144
01:24:15,360 --> 01:24:17,120
david but i think

2145
01:24:17,120 --> 01:24:20,239
yes two months is uh

2146
01:24:20,239 --> 01:24:22,159
will be enough to

2147
01:24:22,159 --> 01:24:25,040
conclude the security analysis

2148
01:24:25,040 --> 01:24:27,840
okay okay thank thank thank you so

2149
01:24:27,840 --> 01:24:30,080
essentially we should hear back from you

2150
01:24:30,080 --> 01:24:32,639
for the next itf meeting then which is

2151
01:24:32,639 --> 01:24:34,480
end of july uh

2152
01:24:34,480 --> 01:24:35,360
in

2153
01:24:35,360 --> 01:24:37,440
philadelphia

2154
01:24:37,440 --> 01:24:40,480
we should have more results

2155
01:24:43,199 --> 01:24:46,000
okay so i propose we go ahead with the

2156
01:24:46,000 --> 01:24:48,719
next agenda item and this is charlie

2157
01:24:48,719 --> 01:24:53,440
charlie we see you can you hear us

2158
01:24:54,480 --> 01:24:58,360
we don't hear you still

2159
01:25:03,920 --> 01:25:04,960
yes

2160
01:25:04,960 --> 01:25:08,239
yeah there you go so the floor is yours

2161
01:25:08,239 --> 01:25:09,199
okay

2162
01:25:09,199 --> 01:25:12,320
so hi everybody i'm charlie

2163
01:25:12,320 --> 01:25:14,480
and i'm here to describe hopefully at

2164
01:25:14,480 --> 01:25:16,320
high level

2165
01:25:16,320 --> 01:25:18,239
there's a bit of research we've done on

2166
01:25:18,239 --> 01:25:22,320
lake adhoc protocol

2167
01:25:22,320 --> 01:25:24,400
so first a brief introduction to the

2168
01:25:24,400 --> 01:25:26,320
techniques we've been using for this

2169
01:25:26,320 --> 01:25:27,920
analysis

2170
01:25:27,920 --> 01:25:30,480
and we've only been using

2171
01:25:30,480 --> 01:25:32,719
a platform

2172
01:25:32,719 --> 01:25:35,520
that essentially we can define

2173
01:25:35,520 --> 01:25:37,920
we can write down protocols inside some

2174
01:25:37,920 --> 01:25:40,560
kind of high level programming language

2175
01:25:40,560 --> 01:25:42,159
where you have a way to abstract the

2176
01:25:42,159 --> 01:25:45,199
inputs on the output of the networks

2177
01:25:45,199 --> 01:25:46,719
and then from this

2178
01:25:46,719 --> 01:25:48,320
specification this high level

2179
01:25:48,320 --> 01:25:49,840
specification

2180
01:25:49,840 --> 01:25:51,600
we can ask

2181
01:25:51,600 --> 01:25:52,960
automated tools

2182
01:25:52,960 --> 01:25:55,520
to verify some security properties

2183
01:25:55,520 --> 01:25:57,440
and we can typically use a properly for

2184
01:25:57,440 --> 01:25:59,120
tamarind

2185
01:25:59,120 --> 01:26:01,040
that have been used previously

2186
01:26:01,040 --> 01:26:03,600
in quite a lot of requirements

2187
01:26:03,600 --> 01:26:06,080
to tell us is a particular secure is the

2188
01:26:06,080 --> 01:26:10,080
protocol secure or is there an attack

2189
01:26:10,320 --> 01:26:11,440
um

2190
01:26:11,440 --> 01:26:12,880
so

2191
01:26:12,880 --> 01:26:15,040
maybe the single typical slide will be

2192
01:26:15,040 --> 01:26:16,719
this one

2193
01:26:16,719 --> 01:26:18,960
which is just to give you a taste of

2194
01:26:18,960 --> 01:26:21,040
what it looks like essentially oh we

2195
01:26:21,040 --> 01:26:23,440
model things and what we do is we

2196
01:26:23,440 --> 01:26:25,600
abstract the function computations

2197
01:26:25,600 --> 01:26:28,400
by simply specifying which property they

2198
01:26:28,400 --> 01:26:30,480
should satisfy so typically to declare a

2199
01:26:30,480 --> 01:26:32,400
decryption and encryption

2200
01:26:32,400 --> 01:26:34,560
we're going to give this definition that

2201
01:26:34,560 --> 01:26:36,480
decryption of encryption

2202
01:26:36,480 --> 01:26:39,360
gives back the plaintext essentially

2203
01:26:39,360 --> 01:26:40,880
and we're just going to define

2204
01:26:40,880 --> 01:26:43,120
positively the kind of properties

2205
01:26:43,120 --> 01:26:44,639
verified by the computation and this

2206
01:26:44,639 --> 01:26:47,199
will be enough to verify your security

2207
01:26:47,199 --> 01:26:48,560
file attacks

2208
01:26:48,560 --> 01:26:50,880
and we can define properties in a very

2209
01:26:50,880 --> 01:26:52,159
generic way

2210
01:26:52,159 --> 01:26:53,520
um

2211
01:26:53,520 --> 01:26:55,600
which is essentially event-based and

2212
01:26:55,600 --> 01:26:56,800
time-based

2213
01:26:56,800 --> 01:26:58,880
so we can ask for response so what

2214
01:26:58,880 --> 01:27:01,120
you're seeing at the bottom of the slide

2215
01:27:01,120 --> 01:27:03,679
is some authentication property we will

2216
01:27:03,679 --> 01:27:05,840
say saying that whenever

2217
01:27:05,840 --> 01:27:09,199
r accept with some parameters

2218
01:27:09,199 --> 01:27:11,120
typically a pki

2219
01:27:11,120 --> 01:27:13,120
a public key for the initiator which

2220
01:27:13,120 --> 01:27:15,920
corresponds to some honest api then it

2221
01:27:15,920 --> 01:27:17,760
implies that

2222
01:27:17,760 --> 01:27:20,080
somewhere in the past

2223
01:27:20,080 --> 01:27:22,800
the initiator did accept so we can

2224
01:27:22,800 --> 01:27:24,960
specify a lot of properties like that

2225
01:27:24,960 --> 01:27:27,679
secrecy and everything we want to check

2226
01:27:27,679 --> 01:27:29,360
essentially on

2227
01:27:29,360 --> 01:27:31,280
lake

2228
01:27:31,280 --> 01:27:32,960
what we've done which is a bit different

2229
01:27:32,960 --> 01:27:35,280
from uh other works in uh

2230
01:27:35,280 --> 01:27:36,719
in our model is that we're trying to

2231
01:27:36,719 --> 01:27:38,480
push a bit further

2232
01:27:38,480 --> 01:27:40,159
uh the modeling

2233
01:27:40,159 --> 01:27:41,920
to capture a lot of

2234
01:27:41,920 --> 01:27:44,159
small sometimes unexpected

2235
01:27:44,159 --> 01:27:45,840
behaviors of the primitives that are not

2236
01:27:45,840 --> 01:27:47,440
taken into account

2237
01:27:47,440 --> 01:27:50,000
uh so typically for the field man

2238
01:27:50,000 --> 01:27:52,400
you have an identity element uh that

2239
01:27:52,400 --> 01:27:54,239
whenever you're gonna exponent it it's

2240
01:27:54,239 --> 01:27:57,040
gonna fall back to the identity element

2241
01:27:57,040 --> 01:27:59,520
uh but you also have lower points that

2242
01:27:59,520 --> 01:28:01,520
can easily create collisions between

2243
01:28:01,520 --> 01:28:03,360
exponential exponentiated values for

2244
01:28:03,360 --> 01:28:05,040
instance

2245
01:28:05,040 --> 01:28:06,960
our signatures typically

2246
01:28:06,960 --> 01:28:09,440
can have valuability or you can also

2247
01:28:09,440 --> 01:28:11,360
generate some yes keys

2248
01:28:11,360 --> 01:28:13,520
public keys that will always validate

2249
01:28:13,520 --> 01:28:16,239
for against all messages

2250
01:28:16,239 --> 01:28:20,159
and typically uh functions like uh 256

2251
01:28:20,159 --> 01:28:21,840
have uh

2252
01:28:21,840 --> 01:28:23,840
well based on the merchandise

2253
01:28:23,840 --> 01:28:25,679
lens extensions

2254
01:28:25,679 --> 01:28:28,880
and also some kind of um

2255
01:28:28,880 --> 01:28:31,040
and we can consider many

2256
01:28:31,040 --> 01:28:33,760
subtle weaknesses of high functions

2257
01:28:33,760 --> 01:28:35,280
uh that

2258
01:28:35,280 --> 01:28:37,280
already exist typically for md5 and show

2259
01:28:37,280 --> 01:28:38,800
one that's uh

2260
01:28:38,800 --> 01:28:40,000
exclusions

2261
01:28:40,000 --> 01:28:42,239
and that will maybe one day will exist

2262
01:28:42,239 --> 01:28:42,960
on

2263
01:28:42,960 --> 01:28:46,560
256 and we try to be prepared

2264
01:28:46,560 --> 01:28:48,639
if they arrive

2265
01:28:48,639 --> 01:28:50,719
um so um

2266
01:28:50,719 --> 01:28:53,199
more quickly uh includes the four

2267
01:28:53,199 --> 01:28:55,520
methods of authentication

2268
01:28:55,520 --> 01:28:59,920
that can be fully executed in parallel

2269
01:28:59,920 --> 01:29:02,080
we include a trust on first user padding

2270
01:29:02,080 --> 01:29:04,960
for the public key infrastructure

2271
01:29:04,960 --> 01:29:07,520
we would have confirmation of long-term

2272
01:29:07,520 --> 01:29:11,120
authentication keys session

2273
01:29:11,280 --> 01:29:12,080
so

2274
01:29:12,080 --> 01:29:13,840
everything

2275
01:29:13,840 --> 01:29:16,880
we also built the plus confirm variant

2276
01:29:16,880 --> 01:29:18,080
so for the

2277
01:29:18,080 --> 01:29:19,360
the alternative model with the

2278
01:29:19,360 --> 01:29:21,760
campbell's variant

2279
01:29:21,760 --> 01:29:23,440
what we're lacking currently is a fine

2280
01:29:23,440 --> 01:29:26,320
link of the cypher street negotiation

2281
01:29:26,320 --> 01:29:27,920
which is a bit complicated to have

2282
01:29:27,920 --> 01:29:29,600
tracks so

2283
01:29:29,600 --> 01:29:31,280
that's still not done

2284
01:29:31,280 --> 01:29:32,719
and we don't have the optional first

2285
01:29:32,719 --> 01:29:35,440
message as well as the key the queue

2286
01:29:35,440 --> 01:29:38,800
date mechanism that follows

2287
01:29:38,800 --> 01:29:39,679
and

2288
01:29:39,679 --> 01:29:42,639
so we on this model we use the

2289
01:29:42,639 --> 01:29:45,199
tamarind properly from all the tools

2290
01:29:45,199 --> 01:29:47,760
to obtain this kind of results

2291
01:29:47,760 --> 01:29:49,760
so this is just to give you a high level

2292
01:29:49,760 --> 01:29:51,360
of

2293
01:29:51,360 --> 01:29:53,040
high level id of

2294
01:29:53,040 --> 01:29:54,320
what we can get

2295
01:29:54,320 --> 01:29:56,639
where essentially we check

2296
01:29:56,639 --> 01:29:58,000
each of the property on the left hand

2297
01:29:58,000 --> 01:30:00,800
side in different threads

2298
01:30:00,800 --> 01:30:01,840
and

2299
01:30:01,840 --> 01:30:03,920
what's interesting is that in

2300
01:30:03,920 --> 01:30:05,920
the let's say most with a basic threat

2301
01:30:05,920 --> 01:30:09,040
model everything works as expected

2302
01:30:09,040 --> 01:30:11,600
so that's which nice for the protocol

2303
01:30:11,600 --> 01:30:15,280
um but when we can start to consider a

2304
01:30:15,280 --> 01:30:17,679
stronger threat model that will occur a

2305
01:30:17,679 --> 01:30:19,280
lot of fun that are less likely to

2306
01:30:19,280 --> 01:30:22,159
happen but that can still be realistic

2307
01:30:22,159 --> 01:30:23,840
and interesting

2308
01:30:23,840 --> 01:30:25,199
we start to find some flaws in the

2309
01:30:25,199 --> 01:30:26,239
protocol

2310
01:30:26,239 --> 01:30:28,159
and i will describe those

2311
01:30:28,159 --> 01:30:30,879
in more details

2312
01:30:31,280 --> 01:30:32,639
but yeah

2313
01:30:32,639 --> 01:30:34,639
based on the on this big table

2314
01:30:34,639 --> 01:30:37,840
essentially the idea feedback is that

2315
01:30:37,840 --> 01:30:39,520
the protocol provides all expected

2316
01:30:39,520 --> 01:30:41,840
security properties

2317
01:30:41,840 --> 01:30:44,880
in many reasonable threat models

2318
01:30:44,880 --> 01:30:45,920
but

2319
01:30:45,920 --> 01:30:48,400
when it goes to when we go to stronger

2320
01:30:48,400 --> 01:30:50,239
attackers

2321
01:30:50,239 --> 01:30:51,600
there are some

2322
01:30:51,600 --> 01:30:52,880
maybe

2323
01:30:52,880 --> 01:30:55,120
improvements to be made and so we want

2324
01:30:55,120 --> 01:30:56,960
to propose

2325
01:30:56,960 --> 01:30:58,480
three different essentially class of

2326
01:30:58,480 --> 01:30:59,600
improvements

2327
01:30:59,600 --> 01:31:01,679
that ideally won't increase the cost of

2328
01:31:01,679 --> 01:31:04,320
computation or anything but still

2329
01:31:04,320 --> 01:31:06,880
avoid potential misuse of the current

2330
01:31:06,880 --> 01:31:08,159
design

2331
01:31:08,159 --> 01:31:10,239
strengthen the trust execution

2332
01:31:10,239 --> 01:31:12,080
environment implementation

2333
01:31:12,080 --> 01:31:14,000
and ideally also improve the future

2334
01:31:14,000 --> 01:31:16,560
resilience of color

2335
01:31:16,560 --> 01:31:19,120
so i'm not gonna disappear quickly those

2336
01:31:19,120 --> 01:31:21,120
three points

2337
01:31:21,120 --> 01:31:22,560
but for the details and everything we'll

2338
01:31:22,560 --> 01:31:23,760
be sending out

2339
01:31:23,760 --> 01:31:26,719
on the main list with concrete proposals

2340
01:31:26,719 --> 01:31:28,840
to make it

2341
01:31:28,840 --> 01:31:30,400
straightforward

2342
01:31:30,400 --> 01:31:33,600
uh so talking about potential misuse now

2343
01:31:33,600 --> 01:31:36,000
and it actually ties back to the

2344
01:31:36,000 --> 01:31:37,360
description that was happening at the

2345
01:31:37,360 --> 01:31:38,480
end of the

2346
01:31:38,480 --> 01:31:39,840
previous talk

2347
01:31:39,840 --> 01:31:41,199
um

2348
01:31:41,199 --> 01:31:43,280
what we call the session key so prk for

2349
01:31:43,280 --> 01:31:44,880
extreme

2350
01:31:44,880 --> 01:31:47,280
actually offers weaker properties

2351
01:31:47,280 --> 01:31:49,760
in terms of securities than the exported

2352
01:31:49,760 --> 01:31:51,760
keys

2353
01:31:51,760 --> 01:31:54,880
typically because if we have a dishonest

2354
01:31:54,880 --> 01:31:55,840
if you're talking to a distance

2355
01:31:55,840 --> 01:31:57,440
responder

2356
01:31:57,440 --> 01:31:59,040
they may have a lot of control over the

2357
01:31:59,040 --> 01:32:02,159
final value of this prk

2358
01:32:02,159 --> 01:32:04,000
for instance

2359
01:32:04,000 --> 01:32:05,679
because they will standards the identity

2360
01:32:05,679 --> 01:32:08,080
actually match or in the post confirm

2361
01:32:08,080 --> 01:32:09,600
setting uh

2362
01:32:09,600 --> 01:32:11,199
an encapsulation that

2363
01:32:11,199 --> 01:32:14,159
can have full control actually of the

2364
01:32:14,159 --> 01:32:17,040
prk for x3 and k

2365
01:32:17,040 --> 01:32:18,080
and

2366
01:32:18,080 --> 01:32:19,679
also compared to the exported section

2367
01:32:19,679 --> 01:32:22,320
here this session key is not linked to

2368
01:32:22,320 --> 01:32:25,280
the execution of the protocol

2369
01:32:25,280 --> 01:32:28,560
and typically it does not authenticate

2370
01:32:28,560 --> 01:32:31,120
gh4

2371
01:32:31,360 --> 01:32:33,930
and so typically

2372
01:32:33,930 --> 01:32:35,520
[Music]

2373
01:32:35,520 --> 01:32:37,679
well an implementer may decide currently

2374
01:32:37,679 --> 01:32:40,080
from the standard to use a different key

2375
01:32:40,080 --> 01:32:42,880
exporter than the one specified actually

2376
01:32:42,880 --> 01:32:45,120
and if they do and do not include the

2377
01:32:45,120 --> 01:32:48,400
tf4 inside the key which is used

2378
01:32:48,400 --> 01:32:51,920
then you can break the authentication of

2379
01:32:51,920 --> 01:32:54,159
th4 because the key confirmation since

2380
01:32:54,159 --> 01:32:57,920
we have prk for x3m won't authenticate

2381
01:32:57,920 --> 01:32:59,440
tier 4 of course

2382
01:32:59,440 --> 01:33:01,199
and

2383
01:33:01,199 --> 01:33:03,840
even competing successfully because

2384
01:33:03,840 --> 01:33:06,080
typically yes ccm is

2385
01:33:06,080 --> 01:33:08,639
kind of viable so in the formal sense

2386
01:33:08,639 --> 01:33:10,159
you have uh the integrity of the

2387
01:33:10,159 --> 01:33:12,800
plaintext but not on the side for text

2388
01:33:12,800 --> 01:33:16,639
you can break the absolute key of th4

2389
01:33:16,639 --> 01:33:18,080
um

2390
01:33:18,080 --> 01:33:19,920
so essentially

2391
01:33:19,920 --> 01:33:21,600
it looks like

2392
01:33:21,600 --> 01:33:23,280
it was a protocol would benefit from a

2393
01:33:23,280 --> 01:33:26,320
clarified essentially final key

2394
01:33:26,320 --> 01:33:28,159
what is precisely the session key which

2395
01:33:28,159 --> 01:33:29,600
would be the equivalent of the master

2396
01:33:29,600 --> 01:33:33,360
secret in class and so typically

2397
01:33:33,360 --> 01:33:36,000
adding a final cheat elevation where we

2398
01:33:36,000 --> 01:33:38,320
tie together

2399
01:33:38,320 --> 01:33:41,360
the prk and the transcript

2400
01:33:41,360 --> 01:33:43,120
will produce the final key

2401
01:33:43,120 --> 01:33:45,040
with the best whatever guarantees

2402
01:33:45,040 --> 01:33:47,520
essentially

2403
01:33:47,520 --> 01:33:50,400
and typically um

2404
01:33:50,400 --> 01:33:52,159
this will develop

2405
01:33:52,159 --> 01:33:54,080
some kind of optimization to remove the

2406
01:33:54,080 --> 01:33:57,199
tf4 from the star material and the

2407
01:33:57,199 --> 01:33:59,440
exporter

2408
01:33:59,440 --> 01:34:02,000
in later

2409
01:34:02,320 --> 01:34:04,639
times essentially

2410
01:34:04,639 --> 01:34:05,600
um

2411
01:34:05,600 --> 01:34:07,360
a second potential misuse of the

2412
01:34:07,360 --> 01:34:10,639
designer uh so it's a bit subtle it's

2413
01:34:10,639 --> 01:34:12,719
kind of hidden in the

2414
01:34:12,719 --> 01:34:14,639
appendices but

2415
01:34:14,639 --> 01:34:16,080
it's about

2416
01:34:16,080 --> 01:34:18,960
digital resistance resilience

2417
01:34:18,960 --> 01:34:20,800
one issue is when

2418
01:34:20,800 --> 01:34:23,440
the standard specifies that

2419
01:34:23,440 --> 01:34:26,080
an implantation could stop local state

2420
01:34:26,080 --> 01:34:28,639
to be able to recompute and resend the

2421
01:34:28,639 --> 01:34:30,480
last message

2422
01:34:30,480 --> 01:34:32,000
there's actually an issue with that for

2423
01:34:32,000 --> 01:34:34,719
the third message because whenever we

2424
01:34:34,719 --> 01:34:37,440
use aeds

2425
01:34:37,440 --> 01:34:39,199
it's uh very important in terms of

2426
01:34:39,199 --> 01:34:41,040
cryptographic guarantees

2427
01:34:41,040 --> 01:34:43,280
to never use the same key and the same

2428
01:34:43,280 --> 01:34:47,040
iv for two distinct messages and well at

2429
01:34:47,040 --> 01:34:49,280
the step of the third message if you

2430
01:34:49,280 --> 01:34:51,600
store the stair if you store the statues

2431
01:34:51,600 --> 01:34:54,159
to compute this um

2432
01:34:54,159 --> 01:34:55,360
this message

2433
01:34:55,360 --> 01:34:58,320
if and if the signature is randomized

2434
01:34:58,320 --> 01:34:59,920
which is the case for some of the skills

2435
01:34:59,920 --> 01:35:01,600
proposed here what you're going to do is

2436
01:35:01,600 --> 01:35:02,719
compute

2437
01:35:02,719 --> 01:35:04,960
two different messages because the

2438
01:35:04,960 --> 01:35:07,600
signatures are randomized

2439
01:35:07,600 --> 01:35:09,040
entrepreneur

2440
01:35:09,040 --> 01:35:11,199
use the id came

2441
01:35:11,199 --> 01:35:13,440
with the same iv and key for both of

2442
01:35:13,440 --> 01:35:14,960
those different messages

2443
01:35:14,960 --> 01:35:17,199
and thus it falls outside of the

2444
01:35:17,199 --> 01:35:20,239
classical use of aed schemes

2445
01:35:20,239 --> 01:35:22,639
so here's the suggestion if it's simple

2446
01:35:22,639 --> 01:35:25,119
we should just follow this

2447
01:35:25,119 --> 01:35:26,800
state storing

2448
01:35:26,800 --> 01:35:28,560
and just simply uh

2449
01:35:28,560 --> 01:35:29,840
if you want to listen message you need

2450
01:35:29,840 --> 01:35:33,760
to listen exactly the same essentially

2451
01:35:33,760 --> 01:35:34,639
um

2452
01:35:34,639 --> 01:35:38,000
another point we touch that is

2453
01:35:38,000 --> 01:35:39,679
it looks like the

2454
01:35:39,679 --> 01:35:41,920
t the twitter execution environment

2455
01:35:41,920 --> 01:35:44,000
implementation could be stranded

2456
01:35:44,000 --> 01:35:45,600
strengthened

2457
01:35:45,600 --> 01:35:47,600
sorry

2458
01:35:47,600 --> 01:35:49,119
because essentially

2459
01:35:49,119 --> 01:35:52,639
so this is a very strong threat model

2460
01:35:52,639 --> 01:35:54,159
but let's assume

2461
01:35:54,159 --> 01:35:54,880
that

2462
01:35:54,880 --> 01:35:56,880
all the authentication authorizations

2463
01:35:56,880 --> 01:35:58,719
are put inside a clustered execution

2464
01:35:58,719 --> 01:36:00,880
environment so essentially either the

2465
01:36:00,880 --> 01:36:03,119
long-term significant designing key or

2466
01:36:03,119 --> 01:36:04,480
the long-term development chair are

2467
01:36:04,480 --> 01:36:06,239
stored inside the trusted execution

2468
01:36:06,239 --> 01:36:08,719
environment and we assume that otherwise

2469
01:36:08,719 --> 01:36:10,719
the device is compromised

2470
01:36:10,719 --> 01:36:12,800
so what we would expect essentially in

2471
01:36:12,800 --> 01:36:14,960
this case is that we don't have any

2472
01:36:14,960 --> 01:36:17,920
secrecy of course but we would want to

2473
01:36:17,920 --> 01:36:19,360
still have

2474
01:36:19,360 --> 01:36:21,280
authentication

2475
01:36:21,280 --> 01:36:24,400
and so concretely it means that we leak

2476
01:36:24,400 --> 01:36:26,960
the initiator fmri cage

2477
01:36:26,960 --> 01:36:28,560
at the beginning and we also leave the

2478
01:36:28,560 --> 01:36:30,159
second key at the end

2479
01:36:30,159 --> 01:36:31,360
but we don't give that access to

2480
01:36:31,360 --> 01:36:33,600
authentication keys

2481
01:36:33,600 --> 01:36:35,840
so here there's actually any attack

2482
01:36:35,840 --> 01:36:37,119
which is uh

2483
01:36:37,119 --> 01:36:38,480
so i don't think i'm going to go through

2484
01:36:38,480 --> 01:36:39,760
it in details

2485
01:36:39,760 --> 01:36:41,440
but once you see it it's actually quite

2486
01:36:41,440 --> 01:36:43,840
straightforward it's uh in the static

2487
01:36:43,840 --> 01:36:45,760
qualification mode where the idea is

2488
01:36:45,760 --> 01:36:46,960
that actually

2489
01:36:46,960 --> 01:36:48,880
the mac key and the station key are

2490
01:36:48,880 --> 01:36:51,199
exactly exactly the same thing

2491
01:36:51,199 --> 01:36:52,480
they are the same value

2492
01:36:52,480 --> 01:36:54,560
so if you look at the on the session key

2493
01:36:54,560 --> 01:36:56,719
you are licking the mac key and then the

2494
01:36:56,719 --> 01:36:58,960
attacker can using this mac key use it

2495
01:36:58,960 --> 01:37:02,159
to produce other macs

2496
01:37:02,400 --> 01:37:04,560
expected and you can lie to respond

2497
01:37:04,560 --> 01:37:07,119
essentially

2498
01:37:07,119 --> 01:37:08,239
and thus

2499
01:37:08,239 --> 01:37:09,920
essentially in the static authentication

2500
01:37:09,920 --> 01:37:10,800
mode

2501
01:37:10,800 --> 01:37:13,199
uh trusted execution environment

2502
01:37:13,199 --> 01:37:16,239
doesn't really make sense

2503
01:37:16,719 --> 01:37:21,560
and it's to note that um

2504
01:37:22,000 --> 01:37:24,480
it's not the case in method

2505
01:37:24,480 --> 01:37:27,199
zero where you can do everything nicely

2506
01:37:27,199 --> 01:37:29,520
uh and the secret key if you store this

2507
01:37:29,520 --> 01:37:30,560
product

2508
01:37:30,560 --> 01:37:32,719
for the signatures inside the te

2509
01:37:32,719 --> 01:37:36,080
you don't have this issue

2510
01:37:36,159 --> 01:37:38,560
so there'll be two things here which is

2511
01:37:38,560 --> 01:37:41,040
one the static authentication method is

2512
01:37:41,040 --> 01:37:42,719
in term of te implementation slightly

2513
01:37:42,719 --> 01:37:44,800
weaker than method zero

2514
01:37:44,800 --> 01:37:45,920
and

2515
01:37:45,920 --> 01:37:47,280
we need to think

2516
01:37:47,280 --> 01:37:49,520
if we want to propose

2517
01:37:49,520 --> 01:37:51,040
implementations

2518
01:37:51,040 --> 01:37:52,719
we need to find a way to

2519
01:37:52,719 --> 01:37:54,800
make those things better so there may be

2520
01:37:54,800 --> 01:37:56,239
possibilities

2521
01:37:56,239 --> 01:37:58,080
but it's

2522
01:37:58,080 --> 01:38:00,320
it's quite uh it's still a question to

2523
01:38:00,320 --> 01:38:02,800
propose the best interface for people

2524
01:38:02,800 --> 01:38:05,840
that would want to use a ge

2525
01:38:05,840 --> 01:38:08,320
uh and finally the last point which is

2526
01:38:08,320 --> 01:38:10,560
about uh so

2527
01:38:10,560 --> 01:38:13,280
what about 10 years or 20 years from now

2528
01:38:13,280 --> 01:38:14,320
will

2529
01:38:14,320 --> 01:38:16,960
it be still secure

2530
01:38:16,960 --> 01:38:18,239
and

2531
01:38:18,239 --> 01:38:20,239
essentially what we want to look at are

2532
01:38:20,239 --> 01:38:22,080
children to these collisions

2533
01:38:22,080 --> 01:38:25,440
uh so as i said for mp5 and show one

2534
01:38:25,440 --> 01:38:28,000
those things actually exist

2535
01:38:28,000 --> 01:38:31,360
and for statue not yet and maybe never

2536
01:38:31,360 --> 01:38:34,320
maybe in 10 years they exist so ideally

2537
01:38:34,320 --> 01:38:36,560
it would be cool if we don't have those

2538
01:38:36,560 --> 01:38:38,320
if these kind of things don't lead to

2539
01:38:38,320 --> 01:38:40,239
attacks on the protocol

2540
01:38:40,239 --> 01:38:42,639
uh and so we have a threat model where

2541
01:38:42,639 --> 01:38:43,760
essentially

2542
01:38:43,760 --> 01:38:45,679
the attacker given two prefixes p1 and

2543
01:38:45,679 --> 01:38:46,719
p2

2544
01:38:46,719 --> 01:38:48,960
can compute uh

2545
01:38:48,960 --> 01:38:52,320
two big bit strings c1 and c2 subject uh

2546
01:38:52,320 --> 01:38:54,239
z creates a collision

2547
01:38:54,239 --> 01:38:57,440
between the hash of p1 method with c1

2548
01:38:57,440 --> 01:38:59,280
and the hash of p2

2549
01:38:59,280 --> 01:39:02,080
connected with cq

2550
01:39:02,080 --> 01:39:04,560
and using this kind of collisions

2551
01:39:04,560 --> 01:39:07,199
and the fact that the protocol adjusts

2552
01:39:07,199 --> 01:39:10,400
may accept the identity element

2553
01:39:10,400 --> 01:39:13,920
we can essentially create a

2554
01:39:13,920 --> 01:39:15,840
machine in the middle attack essentially

2555
01:39:15,840 --> 01:39:17,360
where the attacker is going to break the

2556
01:39:17,360 --> 01:39:20,000
secrecy of the column

2557
01:39:20,000 --> 01:39:21,840
and also actually lead to downgrade

2558
01:39:21,840 --> 01:39:24,239
attacks

2559
01:39:24,840 --> 01:39:28,080
as the response would agree on which

2560
01:39:28,080 --> 01:39:29,600
cycle shoot

2561
01:39:29,600 --> 01:39:31,280
this should use

2562
01:39:31,280 --> 01:39:32,960
and so the attacker can actually become

2563
01:39:32,960 --> 01:39:35,199
precipitate

2564
01:39:35,199 --> 01:39:36,880
um

2565
01:39:36,880 --> 01:39:39,280
it's actually quite

2566
01:39:39,280 --> 01:39:41,760
simple to mitigate

2567
01:39:41,760 --> 01:39:43,840
this thing

2568
01:39:43,840 --> 01:39:45,920
and typically so checking for lower the

2569
01:39:45,920 --> 01:39:48,800
groups or at least the identity element

2570
01:39:48,800 --> 01:39:49,840
and

2571
01:39:49,840 --> 01:39:51,520
this kind of attacks typically expose

2572
01:39:51,520 --> 01:39:52,719
the fact

2573
01:39:52,719 --> 01:39:54,960
well you need to stuff a lot of uh

2574
01:39:54,960 --> 01:39:56,960
bits uh that respond to the collision

2575
01:39:56,960 --> 01:39:58,560
bits inside the transcript to be able to

2576
01:39:58,560 --> 01:40:00,000
create the collision

2577
01:40:00,000 --> 01:40:01,520
uh so it actually exploits a lot the

2578
01:40:01,520 --> 01:40:03,440
fact that you have those extra external

2579
01:40:03,440 --> 01:40:05,199
authenticated data as well as the

2580
01:40:05,199 --> 01:40:09,440
identifier ci and cr so it could be

2581
01:40:09,440 --> 01:40:11,119
mentioned that

2582
01:40:11,119 --> 01:40:14,080
depending on the length of those

2583
01:40:14,080 --> 01:40:15,440
of those values

2584
01:40:15,440 --> 01:40:18,239
it may weaken the protocol in sense

2585
01:40:18,239 --> 01:40:20,800
and it's actually quite important

2586
01:40:20,800 --> 01:40:22,480
for a lot of the

2587
01:40:22,480 --> 01:40:25,199
specifications of message processing

2588
01:40:25,199 --> 01:40:27,360
it's actually quite important that there

2589
01:40:27,360 --> 01:40:28,400
is

2590
01:40:28,400 --> 01:40:31,119
some kind of typing

2591
01:40:31,119 --> 01:40:33,760
going on and if an element that you

2592
01:40:33,760 --> 01:40:35,679
receive on the network is not of the

2593
01:40:35,679 --> 01:40:37,280
expected type

2594
01:40:37,280 --> 01:40:39,520
typically the suits are supposed to be

2595
01:40:39,520 --> 01:40:41,040
arrays of integers

2596
01:40:41,040 --> 01:40:42,400
and if in the middle of this young

2597
01:40:42,400 --> 01:40:43,920
counter are a bit strange you should

2598
01:40:43,920 --> 01:40:46,960
reject these kind of things

2599
01:40:46,960 --> 01:40:48,159
and so

2600
01:40:48,159 --> 01:40:50,560
maybe the standard

2601
01:40:50,560 --> 01:40:52,880
and more strict in a sense or say that

2602
01:40:52,880 --> 01:40:53,920
if you don't

2603
01:40:53,920 --> 01:40:56,480
uh bad things may happen

2604
01:40:56,480 --> 01:40:58,159
um

2605
01:40:58,159 --> 01:41:01,520
so to conclude uh this overview

2606
01:41:01,520 --> 01:41:04,000
uh well on the long term we first want

2607
01:41:04,000 --> 01:41:06,480
to improve on the analysis so typically

2608
01:41:06,480 --> 01:41:08,320
to include the cube date the first

2609
01:41:08,320 --> 01:41:09,440
message

2610
01:41:09,440 --> 01:41:10,320
um

2611
01:41:10,320 --> 01:41:11,600
we plan to

2612
01:41:11,600 --> 01:41:13,840
keep themselves up to date

2613
01:41:13,840 --> 01:41:16,000
so whenever the draft evolve

2614
01:41:16,000 --> 01:41:17,600
our plan is to

2615
01:41:17,600 --> 01:41:20,239
keep them up to date and this all the

2616
01:41:20,239 --> 01:41:22,480
way up to the final lfc

2617
01:41:22,480 --> 01:41:25,440
so if all goes well when the front goes

2618
01:41:25,440 --> 01:41:26,880
out in the wild

2619
01:41:26,880 --> 01:41:28,480
there should be a

2620
01:41:28,480 --> 01:41:30,400
formulation of the

2621
01:41:30,400 --> 01:41:33,119
actual standard

2622
01:41:33,119 --> 01:41:36,159
and maybe we will also look

2623
01:41:36,159 --> 01:41:38,719
at the computational security

2624
01:41:38,719 --> 01:41:41,520
inside the profession

2625
01:41:41,520 --> 01:41:44,560
and that's it for me

2626
01:41:45,600 --> 01:41:48,960
thank you charlie so do we have any

2627
01:41:48,960 --> 01:41:51,440
questions

2628
01:41:51,440 --> 01:41:52,880
for charlie

2629
01:41:52,880 --> 01:41:55,199
so there was a comment by christian but

2630
01:41:55,199 --> 01:41:57,520
uh you okay so

2631
01:41:57,520 --> 01:41:59,520
so he will bring it to the mailing list

2632
01:41:59,520 --> 01:42:02,480
about future proofing this i suppose

2633
01:42:02,480 --> 01:42:05,360
so in since we don't have any questions

2634
01:42:05,360 --> 01:42:06,239
uh

2635
01:42:06,239 --> 01:42:07,600
yeah

2636
01:42:07,600 --> 01:42:09,040
we can only thank you for doing this

2637
01:42:09,040 --> 01:42:09,840
work

2638
01:42:09,840 --> 01:42:14,159
the this is really great i propose a

2639
01:42:14,159 --> 01:42:16,480
as an action item for the authors to

2640
01:42:16,480 --> 01:42:20,080
convert this list of

2641
01:42:20,080 --> 01:42:22,880
this list of

2642
01:42:22,880 --> 01:42:25,679
remarks into github issues

2643
01:42:25,679 --> 01:42:27,920
and that we start with discussing those

2644
01:42:27,920 --> 01:42:30,639
one by one on github and on the mailing

2645
01:42:30,639 --> 01:42:32,880
list where necessary and this would be

2646
01:42:32,880 --> 01:42:35,199
our typical uh

2647
01:42:35,199 --> 01:42:37,520
working process in the working group

2648
01:42:37,520 --> 01:42:40,800
but other than that i think

2649
01:42:40,800 --> 01:42:42,719
again this is great thank you so much

2650
01:42:42,719 --> 01:42:45,040
for doing this work

2651
01:42:45,040 --> 01:42:48,159
and just maybe could you comment so

2652
01:42:48,159 --> 01:42:50,400
could you comment on your future plans

2653
01:42:50,400 --> 01:42:52,800
uh regarding this work because the

2654
01:42:52,800 --> 01:42:55,199
protocol is still not completely we

2655
01:42:55,199 --> 01:42:57,119
might publish new versions

2656
01:42:57,119 --> 01:42:59,600
do you plan on uh do you plan on

2657
01:42:59,600 --> 01:43:02,560
updating this model that you did and

2658
01:43:02,560 --> 01:43:05,679
do you plan to stick around

2659
01:43:06,159 --> 01:43:08,080
definitely

2660
01:43:08,080 --> 01:43:10,080
so at least on my side uh i want to

2661
01:43:10,080 --> 01:43:12,719
commit on that uh hopefully i can bring

2662
01:43:12,719 --> 01:43:14,880
my curve in also

2663
01:43:14,880 --> 01:43:15,679
uh

2664
01:43:15,679 --> 01:43:18,400
but yeah i want to

2665
01:43:18,400 --> 01:43:20,159
keep uh working on this project

2666
01:43:20,159 --> 01:43:22,800
definitely okay that's great and one

2667
01:43:22,800 --> 01:43:25,440
last question is or you i i suppose you

2668
01:43:25,440 --> 01:43:28,000
plan on publishing this in some venue

2669
01:43:28,000 --> 01:43:30,960
uh in this work yes so please let uh

2670
01:43:30,960 --> 01:43:33,920
keep us informed uh the working group or

2671
01:43:33,920 --> 01:43:35,520
us the chairs and we can forward to the

2672
01:43:35,520 --> 01:43:37,520
working group about any publication that

2673
01:43:37,520 --> 01:43:40,800
is that results from this work

2674
01:43:40,800 --> 01:43:44,400
yes so uh with that uh i would like to

2675
01:43:44,400 --> 01:43:48,080
conclude the slot on the formal analysis

2676
01:43:48,080 --> 01:43:50,639
and again uh i cannot emphasize this

2677
01:43:50,639 --> 01:43:52,639
enough how important this work by

2678
01:43:52,639 --> 01:43:55,840
baptiste and by by charlie and his team

2679
01:43:55,840 --> 01:43:56,639
uh

2680
01:43:56,639 --> 01:43:58,800
is important for the working group and i

2681
01:43:58,800 --> 01:44:01,119
believe i speak on behalf of the whole

2682
01:44:01,119 --> 01:44:02,800
working group when i really thank you

2683
01:44:02,800 --> 01:44:04,000
for doing this

2684
01:44:04,000 --> 01:44:06,480
and uh

2685
01:44:06,480 --> 01:44:09,920
uh and also i invite mark who we have

2686
01:44:09,920 --> 01:44:11,040
just

2687
01:44:11,040 --> 01:44:13,199
came to be uh we just realized that

2688
01:44:13,199 --> 01:44:14,800
there is another activity going on that

2689
01:44:14,800 --> 01:44:17,520
we're kind of not aware of to reach out

2690
01:44:17,520 --> 01:44:18,560
to the

2691
01:44:18,560 --> 01:44:22,400
uh to the lake chairs or the lake at itf

2692
01:44:22,400 --> 01:44:24,080
mailing list to let us know about the

2693
01:44:24,080 --> 01:44:25,840
plan and the activities such that we can

2694
01:44:25,840 --> 01:44:28,960
synchronize the activities for end

2695
01:44:28,960 --> 01:44:32,960
presentations for the next itf meeting

2696
01:44:32,960 --> 01:44:35,920
so with that i propose we go to the next

2697
01:44:35,920 --> 01:44:38,719
agenda item which is our chartered items

2698
01:44:38,719 --> 01:44:40,560
which are typically at the beginning but

2699
01:44:40,560 --> 01:44:41,600
because

2700
01:44:41,600 --> 01:44:43,280
of the nature of this meeting we've put

2701
01:44:43,280 --> 01:44:44,960
them at the very end

2702
01:44:44,960 --> 01:44:46,960
so joran

2703
01:44:46,960 --> 01:44:49,520
can you hear us

2704
01:44:49,520 --> 01:44:52,000
yes i hear you well do you hear me yes

2705
01:44:52,000 --> 01:44:54,000
we hear you well we here well we're just

2706
01:44:54,000 --> 01:44:57,119
about to share your slides

2707
01:44:57,119 --> 01:45:00,000
yes that's the one yes that's the one

2708
01:45:00,000 --> 01:45:02,560
okay so there you go the floor is yours

2709
01:45:02,560 --> 01:45:05,600
so i propose to keep it down to like 11

2710
01:45:05,600 --> 01:45:07,600
minutes and

2711
01:45:07,600 --> 01:45:09,119
so that we have time for next steps to

2712
01:45:09,119 --> 01:45:11,440
discuss the next steps sure okay so i'll

2713
01:45:11,440 --> 01:45:13,679
be quick these are the yeah this this is

2714
01:45:13,679 --> 01:45:15,920
about both the drafts that we're working

2715
01:45:15,920 --> 01:45:18,800
on next slide please

2716
01:45:23,199 --> 01:45:25,199
next slide please oh you have control

2717
01:45:25,199 --> 01:45:28,719
here oh i have control

2718
01:45:28,840 --> 01:45:32,000
fantastic oh um sorry i actually don't

2719
01:45:32,000 --> 01:45:35,360
know how to change lines

2720
01:45:35,440 --> 01:45:38,480
should i share myself

2721
01:45:38,480 --> 01:45:40,480
maybe i need to do it again

2722
01:45:40,480 --> 01:45:42,000
i don't see any

2723
01:45:42,000 --> 01:45:45,119
controls for the slides um

2724
01:45:45,119 --> 01:45:47,600
sorry now i found it no worries

2725
01:45:47,600 --> 01:45:49,280
okay so

2726
01:45:49,280 --> 01:45:50,159
um

2727
01:45:50,159 --> 01:45:51,280
since

2728
01:45:51,280 --> 01:45:52,880
this will be talking about the ad hoc

2729
01:45:52,880 --> 01:45:54,960
draft and the trades this drive those

2730
01:45:54,960 --> 01:45:57,440
are the two drafts

2731
01:45:57,440 --> 01:45:59,840
and there has been on the terms of

2732
01:45:59,840 --> 01:46:02,800
publications there has been no changes

2733
01:46:02,800 --> 01:46:04,560
because we have still the old versions

2734
01:46:04,560 --> 01:46:06,960
but we have been progressing these on

2735
01:46:06,960 --> 01:46:09,199
the github

2736
01:46:09,199 --> 01:46:12,639
and what we've done is mainly

2737
01:46:12,639 --> 01:46:14,320
finishing off the

2738
01:46:14,320 --> 01:46:17,840
five reviews and updating based on all

2739
01:46:17,840 --> 01:46:19,760
those comments and that's

2740
01:46:19,760 --> 01:46:22,320
completed now we don't have any old

2741
01:46:22,320 --> 01:46:24,480
issues

2742
01:46:24,480 --> 01:46:26,480
the all issues are essentially related

2743
01:46:26,480 --> 01:46:29,599
to test vectors

2744
01:46:29,760 --> 01:46:31,440
so this will be going through the

2745
01:46:31,440 --> 01:46:33,440
changes that we made

2746
01:46:33,440 --> 01:46:35,600
since version 12.

2747
01:46:35,600 --> 01:46:39,520
first the advoc document

2748
01:46:39,520 --> 01:46:42,719
and the main changes are

2749
01:46:42,719 --> 01:46:44,480
an update to

2750
01:46:44,480 --> 01:46:46,080
section three five

2751
01:46:46,080 --> 01:46:48,880
which is the section on authentication

2752
01:46:48,880 --> 01:46:51,440
it's an update to section three eight

2753
01:46:51,440 --> 01:46:55,040
which is the external authorization data

2754
01:46:55,040 --> 01:46:56,960
it's an update to processing following

2755
01:46:56,960 --> 01:46:59,520
the changes in 3538

2756
01:46:59,520 --> 01:47:01,679
and it's an update on the compliance

2757
01:47:01,679 --> 01:47:04,719
requirements which is the next slide

2758
01:47:04,719 --> 01:47:08,000
and a little bit more on the details so

2759
01:47:08,000 --> 01:47:10,480
section 35 was about

2760
01:47:10,480 --> 01:47:12,960
or still is about authentication keys

2761
01:47:12,960 --> 01:47:14,880
authentication credentials

2762
01:47:14,880 --> 01:47:17,280
identification and credentials etc one

2763
01:47:17,280 --> 01:47:19,840
request was to shorten this section

2764
01:47:19,840 --> 01:47:22,159
and there were also specific comments

2765
01:47:22,159 --> 01:47:24,239
about

2766
01:47:24,239 --> 01:47:27,040
what kind of verifications

2767
01:47:27,040 --> 01:47:29,040
authentication operations

2768
01:47:29,040 --> 01:47:31,440
that was performed

2769
01:47:31,440 --> 01:47:33,360
the change we've made is that we have

2770
01:47:33,360 --> 01:47:36,560
now split the content into

2771
01:47:36,560 --> 01:47:39,600
section three five and a new appendix d

2772
01:47:39,600 --> 01:47:41,679
where section three five contains the

2773
01:47:41,679 --> 01:47:44,320
core protocol operations the proof of

2774
01:47:44,320 --> 01:47:47,520
possession transfer or credential info

2775
01:47:47,520 --> 01:47:50,560
and appendix d contains all other

2776
01:47:50,560 --> 01:47:53,280
authentication related info operations

2777
01:47:53,280 --> 01:47:54,320
like

2778
01:47:54,320 --> 01:47:56,320
certificate chain validation identity

2779
01:47:56,320 --> 01:47:59,199
verification and so on

2780
01:47:59,199 --> 01:48:02,840
and similarly in section 3 8 we also

2781
01:48:02,840 --> 01:48:04,800
split

2782
01:48:04,800 --> 01:48:06,960
the content into

2783
01:48:06,960 --> 01:48:10,639
what are the expectations on the

2784
01:48:10,639 --> 01:48:13,199
external authorization data

2785
01:48:13,199 --> 01:48:17,199
and that specification of the ead

2786
01:48:17,199 --> 01:48:20,000
value and that's that's from that's part

2787
01:48:20,000 --> 01:48:22,639
of the body now whereas the

2788
01:48:22,639 --> 01:48:26,000
append new appendix e contains examples

2789
01:48:26,000 --> 01:48:28,239
um like we talked about in the previous

2790
01:48:28,239 --> 01:48:30,719
itf meeting

2791
01:48:30,719 --> 01:48:33,199
so we hope this is making more clear

2792
01:48:33,199 --> 01:48:35,280
what is part of the core protocol and

2793
01:48:35,280 --> 01:48:36,719
what is

2794
01:48:36,719 --> 01:48:37,920
outside

2795
01:48:37,920 --> 01:48:40,000
the protocol

2796
01:48:40,000 --> 01:48:43,679
and things that sort of relate to

2797
01:48:43,679 --> 01:48:46,719
the protocol but are not strictly part

2798
01:48:46,719 --> 01:48:47,760
of

2799
01:48:47,760 --> 01:48:51,199
of of the specification

2800
01:48:51,199 --> 01:48:55,360
and the update to processing was also to

2801
01:48:55,360 --> 01:48:57,600
handle

2802
01:48:57,600 --> 01:48:59,440
the accordingly what what the things

2803
01:48:59,440 --> 01:49:02,000
that relate to the core protocol is

2804
01:49:02,000 --> 01:49:04,960
is is stays in the processing and the

2805
01:49:04,960 --> 01:49:06,719
things that are not in the core protocol

2806
01:49:06,719 --> 01:49:09,040
is taken out

2807
01:49:09,040 --> 01:49:10,320
i think that

2808
01:49:10,320 --> 01:49:12,480
summarizes the main changes except for

2809
01:49:12,480 --> 01:49:14,560
the compliance requirements which is on

2810
01:49:14,560 --> 01:49:17,040
the next slide

2811
01:49:18,239 --> 01:49:20,480
so we've had for a long time a

2812
01:49:20,480 --> 01:49:22,400
discussion about

2813
01:49:22,400 --> 01:49:26,000
what are the mandatory to implement

2814
01:49:26,000 --> 01:49:29,360
cipher suites and other related

2815
01:49:29,360 --> 01:49:31,840
compliance requirements

2816
01:49:31,840 --> 01:49:35,440
and this and we had a couple of interims

2817
01:49:35,440 --> 01:49:38,159
and the last interim we concluded on

2818
01:49:38,159 --> 01:49:39,840
this formulation

2819
01:49:39,840 --> 01:49:42,960
so implementations must support

2820
01:49:42,960 --> 01:49:46,080
cypher suite 2 and 3

2821
01:49:46,080 --> 01:49:48,159
but we also have a general precondition

2822
01:49:48,159 --> 01:49:50,480
saying that in the absence

2823
01:49:50,480 --> 01:49:52,880
of an application profile specifying

2824
01:49:52,880 --> 01:49:55,440
otherwise

2825
01:49:55,520 --> 01:49:57,599
and so that's that's what we have agreed

2826
01:49:57,599 --> 01:49:58,880
on uh

2827
01:49:58,880 --> 01:50:01,199
in on the mailing list and i mean

2828
01:50:01,199 --> 01:50:03,599
following this interim discussion so uh

2829
01:50:03,599 --> 01:50:05,040
it it wasn't

2830
01:50:05,040 --> 01:50:08,480
something everyone was uh

2831
01:50:08,639 --> 01:50:11,360
super happy over but this was basically

2832
01:50:11,360 --> 01:50:12,880
something that

2833
01:50:12,880 --> 01:50:16,480
everyone seemed to be able to live with

2834
01:50:16,800 --> 01:50:18,400
and there is another update on the

2835
01:50:18,400 --> 01:50:20,400
compliance requirements related to

2836
01:50:20,400 --> 01:50:21,920
padding

2837
01:50:21,920 --> 01:50:23,440
and

2838
01:50:23,440 --> 01:50:26,239
we have now introduced them must be able

2839
01:50:26,239 --> 01:50:29,360
to parse padded messages

2840
01:50:29,360 --> 01:50:30,960
so uh

2841
01:50:30,960 --> 01:50:33,599
it's the ability to handle

2842
01:50:33,599 --> 01:50:36,000
uh plain text sort of

2843
01:50:36,000 --> 01:50:39,119
to hide the length of the plain text you

2844
01:50:39,119 --> 01:50:42,000
must be able to parse padded messages

2845
01:50:42,000 --> 01:50:44,960
but not all use cases need to actually

2846
01:50:44,960 --> 01:50:46,080
use this

2847
01:50:46,080 --> 01:50:48,800
so the must is on the receiving side not

2848
01:50:48,800 --> 01:50:52,639
on the on the sending side

2849
01:50:52,639 --> 01:50:54,400
and those were the changes to the

2850
01:50:54,400 --> 01:50:56,960
compliance requirements i'm rushing

2851
01:50:56,960 --> 01:50:59,199
ahead now stop me if there are any

2852
01:50:59,199 --> 01:51:02,159
particular questions

2853
01:51:02,159 --> 01:51:04,719
the other updates made on the adult

2854
01:51:04,719 --> 01:51:07,840
document are

2855
01:51:07,840 --> 01:51:10,080
more editorial and clarification

2856
01:51:10,080 --> 01:51:11,599
clarifying

2857
01:51:11,599 --> 01:51:14,000
and the other error handling is

2858
01:51:14,000 --> 01:51:17,760
clarified there's a renamed error code

2859
01:51:17,760 --> 01:51:19,440
there is the clarification of cypher

2860
01:51:19,440 --> 01:51:21,599
suite negotiation

2861
01:51:21,599 --> 01:51:23,520
there are also

2862
01:51:23,520 --> 01:51:26,560
a one breaking change here in the terms

2863
01:51:26,560 --> 01:51:27,840
in

2864
01:51:27,840 --> 01:51:31,199
in with respect to the exporter label

2865
01:51:31,199 --> 01:51:34,159
so we have reduced the number of

2866
01:51:34,159 --> 01:51:36,560
characters in the exporter label to

2867
01:51:36,560 --> 01:51:39,119
avoid an additional hash iteration in

2868
01:51:39,119 --> 01:51:40,400
the key

2869
01:51:40,400 --> 01:51:42,400
derivation

2870
01:51:42,400 --> 01:51:44,159
as you see here score

2871
01:51:44,159 --> 01:51:45,599
master secret

2872
01:51:45,599 --> 01:51:48,159
and oscar master salt is now there's not

2873
01:51:48,159 --> 01:51:50,960
a shorter label

2874
01:51:51,040 --> 01:51:53,280
uh and that means that the

2875
01:51:53,280 --> 01:51:56,239
um that that is sort of new

2876
01:51:56,239 --> 01:51:58,239
that means that the

2877
01:51:58,239 --> 01:51:59,520
that's that's the breaking change

2878
01:51:59,520 --> 01:52:01,360
basically when everything up to this

2879
01:52:01,360 --> 01:52:03,679
point is the same but when you derive

2880
01:52:03,679 --> 01:52:05,280
the oscore

2881
01:52:05,280 --> 01:52:08,080
master secret and salt you would now get

2882
01:52:08,080 --> 01:52:09,040
new

2883
01:52:09,040 --> 01:52:10,719
values

2884
01:52:10,719 --> 01:52:12,639
and the test vectors are updated on this

2885
01:52:12,639 --> 01:52:14,239
point

2886
01:52:14,239 --> 01:52:17,199
and another update related to connection

2887
01:52:17,199 --> 01:52:19,599
identifiers where there was a request

2888
01:52:19,599 --> 01:52:20,639
that

2889
01:52:20,639 --> 01:52:23,040
to mention that you you actually don't

2890
01:52:23,040 --> 01:52:24,480
need to

2891
01:52:24,480 --> 01:52:27,760
have uh support both integer and byte

2892
01:52:27,760 --> 01:52:29,920
string connection identifiers an

2893
01:52:29,920 --> 01:52:32,239
endpoint may choose to select a specific

2894
01:52:32,239 --> 01:52:34,159
range and specify that in the

2895
01:52:34,159 --> 01:52:36,159
application profile

2896
01:52:36,159 --> 01:52:37,520
and there's updates to security

2897
01:52:37,520 --> 01:52:39,040
considerations

2898
01:52:39,040 --> 01:52:43,119
ionic considerations and clarifications

2899
01:52:43,119 --> 01:52:44,400
so that's

2900
01:52:44,400 --> 01:52:45,440
um

2901
01:52:45,440 --> 01:52:47,440
the other updates

2902
01:52:47,440 --> 01:52:50,560
and and with that we have addressed all

2903
01:52:50,560 --> 01:52:52,639
open issues and now we're just waiting

2904
01:52:52,639 --> 01:52:53,520
for

2905
01:52:53,520 --> 01:52:54,719
for the the

2906
01:52:54,719 --> 01:52:56,719
new issues coming from from the

2907
01:52:56,719 --> 01:52:59,599
hackathon and from these

2908
01:52:59,599 --> 01:53:01,520
excellent inputs from the from the

2909
01:53:01,520 --> 01:53:04,080
analysis we've heard today

2910
01:53:04,080 --> 01:53:06,239
for the traces document this situation

2911
01:53:06,239 --> 01:53:08,639
is similar we have

2912
01:53:08,639 --> 01:53:12,480
a new version in the github and we have

2913
01:53:12,480 --> 01:53:15,199
no open issues related to that

2914
01:53:15,199 --> 01:53:17,440
and just a reminder the trace's document

2915
01:53:17,440 --> 01:53:19,119
the purpose of that is to help

2916
01:53:19,119 --> 01:53:21,440
implementers to get

2917
01:53:21,440 --> 01:53:23,360
detailed printouts with intermediate

2918
01:53:23,360 --> 01:53:24,400
steps

2919
01:53:24,400 --> 01:53:27,360
so you could go basically line by line

2920
01:53:27,360 --> 01:53:29,119
through

2921
01:53:29,119 --> 01:53:31,440
through your code and verify

2922
01:53:31,440 --> 01:53:34,560
that's been confirmed to be very useful

2923
01:53:34,560 --> 01:53:37,280
but it's not a complete set

2924
01:53:37,280 --> 01:53:38,400
of

2925
01:53:38,400 --> 01:53:41,760
test vectors it's just two specific

2926
01:53:41,760 --> 01:53:44,560
traces two specific test vectors which

2927
01:53:44,560 --> 01:53:46,320
are annotated

2928
01:53:46,320 --> 01:53:47,760
carefully

2929
01:53:47,760 --> 01:53:49,840
and the change we've made since version

2930
01:53:49,840 --> 01:53:51,520
zero zero

2931
01:53:51,520 --> 01:53:55,920
is that we have um as this scene here

2932
01:53:55,920 --> 01:53:57,760
we used to have two traces we still have

2933
01:53:57,760 --> 01:53:59,199
two traces

2934
01:53:59,199 --> 01:54:01,440
the the one with static diffie-hellman

2935
01:54:01,440 --> 01:54:03,239
used to be

2936
01:54:03,239 --> 01:54:05,840
curb25519 in the new

2937
01:54:05,840 --> 01:54:10,320
trace it's actually p256

2938
01:54:10,320 --> 01:54:14,239
the signature one is still uh eddsa but

2939
01:54:14,239 --> 01:54:16,719
we have now included real

2940
01:54:16,719 --> 01:54:19,040
uh x509 certificates not the dummy ones

2941
01:54:19,040 --> 01:54:21,280
that was mentioned previously

2942
01:54:21,280 --> 01:54:23,599
in in this session

2943
01:54:23,599 --> 01:54:25,360
there is also two more additions there

2944
01:54:25,360 --> 01:54:28,560
is an example of cyprus with negotiation

2945
01:54:28,560 --> 01:54:31,199
uh on the static tiffy helmand trace and

2946
01:54:31,199 --> 01:54:32,880
there is an explicit

2947
01:54:32,880 --> 01:54:34,560
mentioning of y coordinates which also

2948
01:54:34,560 --> 01:54:36,960
been requested

2949
01:54:36,960 --> 01:54:38,400
and we reversed the order of the two

2950
01:54:38,400 --> 01:54:40,639
traces just an editorial here but

2951
01:54:40,639 --> 01:54:42,159
basically we have

2952
01:54:42,159 --> 01:54:43,599
all

2953
01:54:43,599 --> 01:54:45,520
um all the changes that was requested on

2954
01:54:45,520 --> 01:54:48,000
the tracer

2955
01:54:48,719 --> 01:54:50,400
and that

2956
01:54:50,400 --> 01:54:52,080
leaves us with

2957
01:54:52,080 --> 01:54:54,400
the test vectors and i can i think i can

2958
01:54:54,400 --> 01:54:56,560
skip now to the last

2959
01:54:56,560 --> 01:54:58,400
slide i only have a minute

2960
01:54:58,400 --> 01:55:00,080
left

2961
01:55:00,080 --> 01:55:01,119
um

2962
01:55:01,119 --> 01:55:02,880
so the next steps

2963
01:55:02,880 --> 01:55:05,199
we propose to

2964
01:55:05,199 --> 01:55:09,199
now take what is done in the master uh

2965
01:55:09,199 --> 01:55:10,560
branches

2966
01:55:10,560 --> 01:55:12,159
the master branch

2967
01:55:12,159 --> 01:55:14,159
to and submit a new version because that

2968
01:55:14,159 --> 01:55:16,560
has been we have basically completed all

2969
01:55:16,560 --> 01:55:19,119
the reviews and all the old dishes

2970
01:55:19,119 --> 01:55:21,520
and we get comments from people who read

2971
01:55:21,520 --> 01:55:23,760
the old versions and think that elder 12

2972
01:55:23,760 --> 01:55:25,360
is the latest version

2973
01:55:25,360 --> 01:55:27,040
which it is but it there are some

2974
01:55:27,040 --> 01:55:28,480
changes now so we think this would be

2975
01:55:28,480 --> 01:55:30,480
the right moment to actually start

2976
01:55:30,480 --> 01:55:33,520
progressing the

2977
01:55:33,520 --> 01:55:35,360
drafts again

2978
01:55:35,360 --> 01:55:37,760
and after that we'd like to obviously

2979
01:55:37,760 --> 01:55:39,119
address the

2980
01:55:39,119 --> 01:55:41,599
review comments we've got and when we're

2981
01:55:41,599 --> 01:55:43,119
done with that we

2982
01:55:43,119 --> 01:55:44,800
we hope this is ready for working group

2983
01:55:44,800 --> 01:55:47,760
last call

2984
01:55:47,760 --> 01:55:49,679
so those were the documents and then the

2985
01:55:49,679 --> 01:55:51,920
next step is also the most issues

2986
01:55:51,920 --> 01:55:53,920
current issues are about test vectors so

2987
01:55:53,920 --> 01:55:55,840
that's what we want to

2988
01:55:55,840 --> 01:55:57,920
progress next we should set up a

2989
01:55:57,920 --> 01:55:58,960
breakout

2990
01:55:58,960 --> 01:56:00,960
meeting this week and

2991
01:56:00,960 --> 01:56:02,239
marek has

2992
01:56:02,239 --> 01:56:03,440
already done

2993
01:56:03,440 --> 01:56:05,679
a very good input here and he's proposed

2994
01:56:05,679 --> 01:56:08,000
to to help out with

2995
01:56:08,000 --> 01:56:11,199
making the test vectors more available

2996
01:56:11,199 --> 01:56:13,119
so i'm done thank you

2997
01:56:13,119 --> 01:56:15,360
any comments or questions if we have the

2998
01:56:15,360 --> 01:56:17,040
time

2999
01:56:17,040 --> 01:56:20,239
otherwise on the mailing list

3000
01:56:23,280 --> 01:56:25,679
okay so um any quick comments on the

3001
01:56:25,679 --> 01:56:29,520
changes or clarification questions

3002
01:56:29,520 --> 01:56:31,760
if not i guess the the kind of next step

3003
01:56:31,760 --> 01:56:33,599
is is on here that's the one we were

3004
01:56:33,599 --> 01:56:34,880
kind of wondering so we had agreed that

3005
01:56:34,880 --> 01:56:37,440
we'd keep trying to keep draft 12 stable

3006
01:56:37,440 --> 01:56:39,360
while the analysis was happening

3007
01:56:39,360 --> 01:56:41,599
so maybe the right thing to do is

3008
01:56:41,599 --> 01:56:43,040
now that we know that some people are

3009
01:56:43,040 --> 01:56:45,520
working on doing analyses

3010
01:56:45,520 --> 01:56:48,159
to poll them and see what it would delay

3011
01:56:48,159 --> 01:56:50,000
or upset them if we move on to 13 or

3012
01:56:50,000 --> 01:56:52,159
would they find it okay

3013
01:56:52,159 --> 01:56:53,440
um

3014
01:56:53,440 --> 01:56:55,119
we could do that we could just we kind

3015
01:56:55,119 --> 01:56:57,040
of know who the set of people to work is

3016
01:56:57,040 --> 01:56:58,880
now right yeah yeah exactly so we know

3017
01:56:58,880 --> 01:57:01,360
there are so this is four teams that are

3018
01:57:01,360 --> 01:57:03,840
involved right now and i'm so i think it

3019
01:57:03,840 --> 01:57:05,119
kind of makes sense to reach out

3020
01:57:05,119 --> 01:57:06,960
directly and work directly with those

3021
01:57:06,960 --> 01:57:07,840
folks

3022
01:57:07,840 --> 01:57:10,560
and uh once again i invite everyone who

3023
01:57:10,560 --> 01:57:13,119
might we not be aware of that is working

3024
01:57:13,119 --> 01:57:15,760
on uh the security analysis of ad hoc to

3025
01:57:15,760 --> 01:57:17,280
let us know such that we could

3026
01:57:17,280 --> 01:57:20,080
coordinate about this

3027
01:57:20,080 --> 01:57:21,760
so

3028
01:57:21,760 --> 01:57:25,119
do we have any objections to this plan

3029
01:57:25,119 --> 01:57:28,719
or that euron is proposing

3030
01:57:29,199 --> 01:57:30,560
if we reach out to those teams and then

3031
01:57:30,560 --> 01:57:32,560
let the list know and then we can

3032
01:57:32,560 --> 01:57:36,520
okay i was thinking okay

3033
01:57:38,560 --> 01:57:40,320
i wouldn't worry so john in the jar in

3034
01:57:40,320 --> 01:57:41,520
the jabra chat

3035
01:57:41,520 --> 01:57:44,480
raises the draft expiry i guess

3036
01:57:44,480 --> 01:57:45,840
i i don't think we should be concerned

3037
01:57:45,840 --> 01:57:46,880
with that

3038
01:57:46,880 --> 01:57:50,239
drafts don't really expire

3039
01:57:50,840 --> 01:57:53,119
anymore so i think there's a stable

3040
01:57:53,119 --> 01:57:55,119
reference versus the work ongoing is the

3041
01:57:55,119 --> 01:57:57,440
question so stephen just to clarify so

3042
01:57:57,440 --> 01:57:59,119
essentially you are proposing first to

3043
01:57:59,119 --> 01:58:01,360
coordinate with this with the teams and

3044
01:58:01,360 --> 01:58:02,960
then to bring to make a decision on the

3045
01:58:02,960 --> 01:58:05,360
mailing list uh and to let the mail in

3046
01:58:05,360 --> 01:58:06,800
this line i i expect nobody on the

3047
01:58:06,800 --> 01:58:08,000
mailing list will object but we should

3048
01:58:08,000 --> 01:58:08,880
just

3049
01:58:08,880 --> 01:58:10,239
yeah we decided on the maintenance that

3050
01:58:10,239 --> 01:58:11,840
we would do this if we're going to just

3051
01:58:11,840 --> 01:58:13,440
slightly change the plan we should just

3052
01:58:13,440 --> 01:58:15,599
do that confirm that on the main list so

3053
01:58:15,599 --> 01:58:18,320
yes so yes the decision to freeze the

3054
01:58:18,320 --> 01:58:20,480
specification was until further notice

3055
01:58:20,480 --> 01:58:22,880
so it is up to us right now

3056
01:58:22,880 --> 01:58:25,599
uh john do you want to say something

3057
01:58:25,599 --> 01:58:28,000
yeah i think

3058
01:58:28,000 --> 01:58:30,560
we in the room here knows what

3059
01:58:30,560 --> 01:58:33,119
what expired draft is not the end of the

3060
01:58:33,119 --> 01:58:36,080
world but people outside our diet

3061
01:58:36,080 --> 01:58:38,080
sometimes believe that means the work

3062
01:58:38,080 --> 01:58:39,199
has been

3063
01:58:39,199 --> 01:58:42,000
dropped so i think

3064
01:58:42,080 --> 01:58:44,960
i think the expiry means something and

3065
01:58:44,960 --> 01:58:48,000
we should not let it expire i think if

3066
01:58:48,000 --> 01:58:50,480
the implementers absolutely don't want

3067
01:58:50,480 --> 01:58:52,719
the new version i think we should just

3068
01:58:52,719 --> 01:58:55,440
take for 12 version and resubmit the

3069
01:58:55,440 --> 01:58:56,320
deaths

3070
01:58:56,320 --> 01:58:59,760
at 13 without any changes just to avoid

3071
01:58:59,760 --> 01:59:01,679
expiry otherwise i

3072
01:59:01,679 --> 01:59:04,080
100 sure we will get people

3073
01:59:04,080 --> 01:59:05,599
asking about

3074
01:59:05,599 --> 01:59:07,520
if this has the work has been dropped

3075
01:59:07,520 --> 01:59:09,920
because it's equipped

3076
01:59:09,920 --> 01:59:11,840
so if i understand correctly the draft

3077
01:59:11,840 --> 01:59:14,400
will expire on 23rd of april

3078
01:59:14,400 --> 01:59:18,560
so that gives us one month to decide uh

3079
01:59:18,560 --> 01:59:21,520
and to proceed uh with the uh to proceed

3080
01:59:21,520 --> 01:59:24,080
with the next steps essentially seeing

3081
01:59:24,080 --> 01:59:26,639
if the teams uh checking out with the

3082
01:59:26,639 --> 01:59:29,119
different crypto analysis teams whether

3083
01:59:29,119 --> 01:59:31,679
uh they can update their

3084
01:59:31,679 --> 01:59:34,000
uh their models and their work to the

3085
01:59:34,000 --> 01:59:37,360
latest specification

3086
01:59:38,960 --> 01:59:40,080
so i

3087
01:59:40,080 --> 01:59:45,080
i think that makes sense do

3088
01:59:45,440 --> 01:59:47,920
in the worst case john i i tend to agree

3089
01:59:47,920 --> 01:59:50,000
with you that yes we should keep the

3090
01:59:50,000 --> 01:59:52,800
draft alive and as it sends the wrong

3091
01:59:52,800 --> 01:59:54,719
signal to the people outside of the

3092
01:59:54,719 --> 01:59:55,840
working group

3093
01:59:55,840 --> 01:59:56,639
so

3094
01:59:56,639 --> 01:59:58,560
but let's worry about it in the days

3095
01:59:58,560 --> 02:00:02,560
before the actual expiring not now

3096
02:00:04,320 --> 02:00:05,679
so

3097
02:00:05,679 --> 02:00:08,400
so with that uh

3098
02:00:08,400 --> 02:00:09,199
we

3099
02:00:09,199 --> 02:00:12,159
are done with all the agenda items do we

3100
02:00:12,159 --> 02:00:15,759
have any other business

3101
02:00:18,880 --> 02:00:20,400
um

3102
02:00:20,400 --> 02:00:22,880
yes yes i just wanted to say i didn't

3103
02:00:22,880 --> 02:00:24,719
talk about the

3104
02:00:24,719 --> 02:00:27,119
about the test vectors here so

3105
02:00:27,119 --> 02:00:28,320
um

3106
02:00:28,320 --> 02:00:29,679
people who are interested in test

3107
02:00:29,679 --> 02:00:31,119
vectors pay attention to what's

3108
02:00:31,119 --> 02:00:32,719
happening in the get will happen in the

3109
02:00:32,719 --> 02:00:35,440
github now so as we start to make that

3110
02:00:35,440 --> 02:00:38,320
that seems to buy the last part which is

3111
02:00:38,320 --> 02:00:41,199
uh which we need to to take some uh

3112
02:00:41,199 --> 02:00:43,599
action on and there's been a lot of

3113
02:00:43,599 --> 02:00:45,679
interest in the in particular the json

3114
02:00:45,679 --> 02:00:47,920
test vectors because that's the bulk of

3115
02:00:47,920 --> 02:00:49,119
the

3116
02:00:49,119 --> 02:00:50,800
of the tests that you may want to do on

3117
02:00:50,800 --> 02:00:52,960
your implementation so we the only thing

3118
02:00:52,960 --> 02:00:54,880
that's needed i think is to get more

3119
02:00:54,880 --> 02:00:56,320
structure on

3120
02:00:56,320 --> 02:00:59,199
on on that and so

3121
02:00:59,199 --> 02:01:01,199
we will schedule a breakout during this

3122
02:01:01,199 --> 02:01:02,960
meet this week and if you're interested

3123
02:01:02,960 --> 02:01:04,880
just let us know otherwise we invite the

3124
02:01:04,880 --> 02:01:06,480
people that we think are interested

3125
02:01:06,480 --> 02:01:11,199
interested in that okay thank you eran

3126
02:01:11,199 --> 02:01:12,880
so

3127
02:01:12,880 --> 02:01:16,480
yeah do we have any other business

3128
02:01:17,520 --> 02:01:20,159
so i hear none so i propose we conclude

3129
02:01:20,159 --> 02:01:21,760
the meeting and keep the work going on

3130
02:01:21,760 --> 02:01:23,599
github and the mailing list thank you

3131
02:01:23,599 --> 02:01:25,360
all for attending thanks all thanks to

3132
02:01:25,360 --> 02:01:28,360
notetakers

3133
02:01:42,320 --> 02:01:45,320
okay

3134
02:01:51,679 --> 02:01:54,320
right great

3135
02:01:55,119 --> 02:01:56,960
okay i gotta go and disappear and do a

3136
02:01:56,960 --> 02:01:57,840
lecture

3137
02:01:57,840 --> 02:01:59,679
oh okay

3138
02:01:59,679 --> 02:02:01,040
i'll take the notes and turn them into

3139
02:02:01,040 --> 02:02:04,560
minutes fantastic yeah but they seem

3140
02:02:04,560 --> 02:02:06,239
they seem like a book

3141
02:02:06,239 --> 02:02:08,718
seems good

3142
02:02:09,599 --> 02:02:12,159
all right

3143
02:02:13,040 --> 02:02:15,840
yeah so i guess the thing to do is

3144
02:02:15,840 --> 02:02:18,320
we could

3145
02:02:18,320 --> 02:02:20,400
just we need to send them to the various

3146
02:02:20,400 --> 02:02:21,280
teams

3147
02:02:21,280 --> 02:02:22,239
this way

3148
02:02:22,239 --> 02:02:23,440
okay

3149
02:02:23,440 --> 02:02:27,519
yeah yeah it makes sense really i mean

3150
02:02:27,920 --> 02:02:29,360
they may not come back and say oh what

3151
02:02:29,360 --> 02:02:31,040
changes are you playing

3152
02:02:31,040 --> 02:02:35,000
they will just point them

