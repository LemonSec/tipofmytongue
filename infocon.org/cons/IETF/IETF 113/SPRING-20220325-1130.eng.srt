1
00:00:07,520 --> 00:00:08,480
hi

2
00:00:08,480 --> 00:00:11,040
you hear me

3
00:00:11,120 --> 00:00:12,639
yes we were

4
00:00:12,639 --> 00:00:14,240
checking the it turns out the in-room

5
00:00:14,240 --> 00:00:16,880
audi yes we could hear you the in-room

6
00:00:16,880 --> 00:00:18,880
audio was having a problem they have now

7
00:00:18,880 --> 00:00:21,279
fixed that we can see people coming in

8
00:00:21,279 --> 00:00:22,720
so we'll wait a few minutes to let

9
00:00:22,720 --> 00:00:24,160
people get into the room and then get

10
00:00:24,160 --> 00:00:27,160
started

11
00:00:34,559 --> 00:00:36,559
and for those in the room tom hill is at

12
00:00:36,559 --> 00:00:37,920
the front of the room because all of

13
00:00:37,920 --> 00:00:39,440
your chairs and your working group

14
00:00:39,440 --> 00:00:41,360
secretary are all remote

15
00:00:41,360 --> 00:00:43,840
so we asked tom to sit in front to help

16
00:00:43,840 --> 00:00:46,239
us with room issues like the in-room

17
00:00:46,239 --> 00:00:49,520
audio value problem we just got fixed

18
00:00:49,520 --> 00:00:50,399
and

19
00:00:50,399 --> 00:00:53,440
meet echo has fixed that problem

20
00:00:53,440 --> 00:00:54,800
can i just check you can hear me from

21
00:00:54,800 --> 00:00:56,480
here okay

22
00:00:56,480 --> 00:00:59,520
yes you're so gang

23
00:00:59,520 --> 00:01:02,160
i'm quiet

24
00:01:04,559 --> 00:01:08,640
mr meat echo tech can you hear me okay

25
00:01:09,520 --> 00:01:11,680
is it good level good

26
00:01:11,680 --> 00:01:13,200
yeah okay

27
00:01:13,200 --> 00:01:15,520
good

28
00:01:21,280 --> 00:01:25,000
what i can't hear anything

29
00:01:40,000 --> 00:01:44,079
so i guess it's about time if you

30
00:01:45,360 --> 00:01:49,040
can get you prepared and go to your room

31
00:01:49,040 --> 00:01:51,200
and we have a food agenda

32
00:01:51,200 --> 00:01:53,360
so this is the spring workbook meeting

33
00:01:53,360 --> 00:01:55,439
last one

34
00:01:55,439 --> 00:01:57,600
last last meeting for spring but last

35
00:01:57,600 --> 00:02:00,399
meeting for the week

36
00:02:00,960 --> 00:02:02,560
next slide yes

37
00:02:02,560 --> 00:02:04,960
this is not well so you are contributing

38
00:02:04,960 --> 00:02:06,320
to the itf

39
00:02:06,320 --> 00:02:10,560
you have to follow the rules on policies

40
00:02:10,560 --> 00:02:12,000
and these slides summarize those

41
00:02:12,000 --> 00:02:14,800
policies so you should read it

42
00:02:14,800 --> 00:02:16,400
since we are last

43
00:02:16,400 --> 00:02:17,840
meeting for the week

44
00:02:17,840 --> 00:02:19,520
i'm going to assume that you have time

45
00:02:19,520 --> 00:02:21,440
to look at it

46
00:02:21,440 --> 00:02:24,319
but it's important

47
00:02:24,319 --> 00:02:27,200
this is our agile it's

48
00:02:27,200 --> 00:02:29,760
pretty packed and full

49
00:02:29,760 --> 00:02:30,560
so

50
00:02:30,560 --> 00:02:32,879
speakers please

51
00:02:32,879 --> 00:02:34,959
limit yourself to your allocated time

52
00:02:34,959 --> 00:02:36,720
which includes presentation on

53
00:02:36,720 --> 00:02:39,359
discussions

54
00:02:40,160 --> 00:02:42,160
is there any comments on the on the

55
00:02:42,160 --> 00:02:44,560
agenda

56
00:02:46,480 --> 00:02:49,480
andrew

57
00:02:50,239 --> 00:02:52,720
uh i'm all good with the agenda

58
00:02:52,720 --> 00:02:55,360
okay you had your mic

59
00:02:55,360 --> 00:02:57,519
uh in terms of meeting

60
00:02:57,519 --> 00:03:00,560
as you see uh all shares are remote

61
00:03:00,560 --> 00:03:03,120
and thank you tom hill for helping with

62
00:03:03,120 --> 00:03:05,840
the room management

63
00:03:06,640 --> 00:03:09,200
as a remember minutes are collaborative

64
00:03:09,200 --> 00:03:12,000
so you can click on the url on

65
00:03:12,000 --> 00:03:13,519
please check your name

66
00:03:13,519 --> 00:03:16,239
and your statement

67
00:03:16,319 --> 00:03:18,640
in terms of queue management uh it's a

68
00:03:18,640 --> 00:03:20,800
bit different this this week so if you

69
00:03:20,800 --> 00:03:21,840
are remote

70
00:03:21,840 --> 00:03:23,680
you enter the queue by pressing the res

71
00:03:23,680 --> 00:03:26,080
and icon

72
00:03:26,080 --> 00:03:29,120
and if you are in vienna uh you have to

73
00:03:29,120 --> 00:03:33,360
use the mythical light client i believe

74
00:03:33,360 --> 00:03:34,799
now when speaking if you're remote you

75
00:03:34,799 --> 00:03:38,159
need to separately send your audio

76
00:03:38,159 --> 00:03:40,640
and if you're in in the room you can use

77
00:03:40,640 --> 00:03:43,360
the room microphone

78
00:03:43,360 --> 00:03:45,680
and finally as a reminder sessions are

79
00:03:45,680 --> 00:03:49,840
recorded both audio on video

80
00:03:51,440 --> 00:03:55,120
and next please

81
00:03:55,680 --> 00:03:58,319
so you probably know by now

82
00:03:58,319 --> 00:04:00,959
so now out has finished and you we have

83
00:04:00,959 --> 00:04:02,879
a new isg

84
00:04:02,879 --> 00:04:06,159
as far as rooting area is concerned uh

85
00:04:06,159 --> 00:04:07,599
andrew is a

86
00:04:07,599 --> 00:04:10,080
is the new ad

87
00:04:10,080 --> 00:04:12,400
and martin is leaving

88
00:04:12,400 --> 00:04:15,280
and this has an impact for springer

89
00:04:15,280 --> 00:04:17,519
because spring spring working group has

90
00:04:17,519 --> 00:04:19,759
been assigned to andrew

91
00:04:19,759 --> 00:04:23,520
so we'd like to uh welcome android world

92
00:04:23,520 --> 00:04:25,280
we will have a

93
00:04:25,280 --> 00:04:28,960
five-minute slot presented

94
00:04:29,120 --> 00:04:31,440
so i won't say anything

95
00:04:31,440 --> 00:04:34,240
and martin is leaving i'd like to uh

96
00:04:34,240 --> 00:04:36,080
thank martin very much for the four

97
00:04:36,080 --> 00:04:38,960
years of services

98
00:04:38,960 --> 00:04:42,080
there is no way i can speak as bit as

99
00:04:42,080 --> 00:04:44,479
good as alvaro say that during the

100
00:04:44,479 --> 00:04:45,759
routine area

101
00:04:45,759 --> 00:04:47,040
january

102
00:04:47,040 --> 00:04:49,120
so please refer to

103
00:04:49,120 --> 00:04:50,720
alvaro's placement

104
00:04:50,720 --> 00:04:53,040
but again thank you martin it was a big

105
00:04:53,040 --> 00:04:56,400
working group on difficult one

106
00:04:56,400 --> 00:04:59,040
in term of document

107
00:04:59,040 --> 00:05:00,720
we made some progress on the compressed

108
00:05:00,720 --> 00:05:01,919
server six

109
00:05:01,919 --> 00:05:04,880
segment list encoding in srh

110
00:05:04,880 --> 00:05:06,960
so we were waiting for a draft dealing

111
00:05:06,960 --> 00:05:10,520
with the relationship between cc'd on rc

112
00:05:10,520 --> 00:05:13,680
4291 it is now published

113
00:05:13,680 --> 00:05:15,600
it is from suresh

114
00:05:15,600 --> 00:05:17,520
it has been presented in six months this

115
00:05:17,520 --> 00:05:18,960
week

116
00:05:18,960 --> 00:05:22,799
so you can refer to the presentation

117
00:05:23,440 --> 00:05:26,000
as a consequence

118
00:05:26,000 --> 00:05:28,800
the spring graft has been posted a year

119
00:05:28,800 --> 00:05:30,479
ago

120
00:05:30,479 --> 00:05:33,520
there is an issue tracker initiated

121
00:05:33,520 --> 00:05:36,479
so you're welcome to

122
00:05:36,479 --> 00:05:39,199
directly modify it but if you do uh

123
00:05:39,199 --> 00:05:41,759
please uh copy the the spring mailing

124
00:05:41,759 --> 00:05:43,840
list for any modifications that you that

125
00:05:43,840 --> 00:05:46,160
you do

126
00:05:46,160 --> 00:05:47,759
as a reminder the document is now a

127
00:05:47,759 --> 00:05:49,440
working document it is owned by the

128
00:05:49,440 --> 00:05:51,360
working group

129
00:05:51,360 --> 00:05:53,120
uh so orders please work with working

130
00:05:53,120 --> 00:05:55,199
group to to progress on the points uh

131
00:05:55,199 --> 00:05:57,600
raised during adoption and i think we

132
00:05:57,600 --> 00:06:00,240
have a zero one

133
00:06:00,240 --> 00:06:02,800
addressing some comments so thank you

134
00:06:02,800 --> 00:06:05,440
to francois

135
00:06:06,720 --> 00:06:09,919
adoption call uh we did the call on srt

136
00:06:09,919 --> 00:06:13,919
pass midpoint restoration

137
00:06:13,919 --> 00:06:16,319
there is a support for um the

138
00:06:16,319 --> 00:06:18,960
requirement to protect traffic uh

139
00:06:18,960 --> 00:06:21,520
sentinel policies

140
00:06:21,520 --> 00:06:23,440
there is no support for the two proposed

141
00:06:23,440 --> 00:06:25,759
igp extensions

142
00:06:25,759 --> 00:06:27,919
so document is currently not adopted in

143
00:06:27,919 --> 00:06:30,560
its current form

144
00:06:30,560 --> 00:06:33,280
so others are suggested to to keep the

145
00:06:33,280 --> 00:06:36,719
work on the minimus

146
00:06:36,880 --> 00:06:39,199
next

147
00:06:39,520 --> 00:06:42,318
next slide please

148
00:06:47,520 --> 00:06:49,840
next slide

149
00:06:52,880 --> 00:06:55,199
we submitted two documents to isg for

150
00:06:55,199 --> 00:06:57,840
publication

151
00:06:58,479 --> 00:07:01,759
one is pass segment in the mpls network

152
00:07:01,759 --> 00:07:04,560
and one is integration of nsh on the

153
00:07:04,560 --> 00:07:06,800
segment loading for service function

154
00:07:06,800 --> 00:07:08,560
sharing

155
00:07:08,560 --> 00:07:10,240
i assume those two documents will be

156
00:07:10,240 --> 00:07:11,759
under by uh

157
00:07:11,759 --> 00:07:13,680
my own rule

158
00:07:13,680 --> 00:07:17,840
next one next slide please

159
00:07:18,240 --> 00:07:19,759
we have the segment rooting policy

160
00:07:19,759 --> 00:07:20,960
architecture

161
00:07:20,960 --> 00:07:24,000
which is uh under isg processing

162
00:07:24,000 --> 00:07:26,880
actually i think it has been accepted

163
00:07:26,880 --> 00:07:28,800
or two days ago

164
00:07:28,800 --> 00:07:31,680
so good thank you for the work everyone

165
00:07:31,680 --> 00:07:34,880
it was a big document

166
00:07:35,039 --> 00:07:36,639
and next slide

167
00:07:36,639 --> 00:07:39,280
no new document in rc editor

168
00:07:39,280 --> 00:07:43,318
and i think that's it

169
00:07:48,080 --> 00:07:50,879
next on the agenda

170
00:07:50,879 --> 00:07:55,280
we have a slot for the new ide andrew

171
00:07:56,400 --> 00:07:58,879
welcome to say a word and present

172
00:07:58,879 --> 00:08:01,879
yourself

173
00:08:28,960 --> 00:08:31,280
andrew we're not hearing you you must

174
00:08:31,280 --> 00:08:33,120
mute it yourself

175
00:08:33,120 --> 00:08:35,039
can you hear me now

176
00:08:35,039 --> 00:08:38,399
yes thank you there we go sorry i got a

177
00:08:38,399 --> 00:08:40,880
microphone giving problems i was i was

178
00:08:40,880 --> 00:08:42,479
just saying

179
00:08:42,479 --> 00:08:44,959
firstly thanks very much um

180
00:08:44,959 --> 00:08:47,839
for the welcome and

181
00:08:47,839 --> 00:08:49,839
you know coming into this working group

182
00:08:49,839 --> 00:08:51,519
and having observed this working group

183
00:08:51,519 --> 00:08:53,760
for a long time i think that

184
00:08:53,760 --> 00:08:56,480
one of the things that as as we work

185
00:08:56,480 --> 00:08:58,240
together that i'd like to see in the

186
00:08:58,240 --> 00:08:59,920
working group

187
00:08:59,920 --> 00:09:01,120
is that

188
00:09:01,120 --> 00:09:03,040
we focus on the technical content

189
00:09:03,040 --> 00:09:05,519
potentially lower the heat because i

190
00:09:05,519 --> 00:09:07,760
don't think anybody will deny that at

191
00:09:07,760 --> 00:09:10,160
times it has gotten heated

192
00:09:10,160 --> 00:09:12,160
but i would say that

193
00:09:12,160 --> 00:09:14,640
it's produced a lot of really good work

194
00:09:14,640 --> 00:09:16,240
and

195
00:09:16,240 --> 00:09:18,080
if we work together focus on the

196
00:09:18,080 --> 00:09:20,640
technical

197
00:09:20,640 --> 00:09:22,880
mind the code of conduct well the

198
00:09:22,880 --> 00:09:26,000
guidelines for conduct should i say um

199
00:09:26,000 --> 00:09:27,680
i think we'll get on we'll get on well

200
00:09:27,680 --> 00:09:29,519
i've got a couple of ideas as well that

201
00:09:29,519 --> 00:09:31,519
i'll be discussing with

202
00:09:31,519 --> 00:09:33,519
the working group chairs about things

203
00:09:33,519 --> 00:09:37,120
that can potentially smooth things out

204
00:09:37,120 --> 00:09:38,080
and

205
00:09:38,080 --> 00:09:40,880
we'll see how it goes but i'm i'm very

206
00:09:40,880 --> 00:09:43,200
happy to be here and

207
00:09:43,200 --> 00:09:46,080
please always feel that

208
00:09:46,080 --> 00:09:48,560
my email box is always open my door is

209
00:09:48,560 --> 00:09:50,959
always open you know feel free to talk

210
00:09:50,959 --> 00:09:52,800
to me about any concerns or issues

211
00:09:52,800 --> 00:09:53,920
you've got

212
00:09:53,920 --> 00:09:55,519
um and

213
00:09:55,519 --> 00:09:58,320
yeah communication's key so i'm looking

214
00:09:58,320 --> 00:10:00,640
forward to

215
00:10:00,640 --> 00:10:02,880
the time together and doing some good

216
00:10:02,880 --> 00:10:05,360
work and that's me and

217
00:10:05,360 --> 00:10:10,200
welcome to take any questions as well

218
00:10:36,320 --> 00:10:38,959
uh thomas it's up to you for export of

219
00:10:38,959 --> 00:10:42,560
segment rooting ip6 information sorry

220
00:10:42,560 --> 00:10:44,320
thank you very much

221
00:10:44,320 --> 00:10:46,959
export of

222
00:10:58,959 --> 00:11:02,160
how ampellat and palestine parting is

223
00:11:02,160 --> 00:11:05,120
currently being covered in ipv6

224
00:11:05,120 --> 00:11:06,160
uh

225
00:11:06,160 --> 00:11:06,880
so

226
00:11:06,880 --> 00:11:07,839
uh

227
00:11:07,839 --> 00:11:10,399
no segment routing uh can be leveraged

228
00:11:10,399 --> 00:11:12,240
in an

229
00:11:12,240 --> 00:11:14,720
ipv6 data plane

230
00:11:14,720 --> 00:11:17,440
in mpls the envelope top label stack

231
00:11:17,440 --> 00:11:20,720
section is uh encoded in the iphix

232
00:11:20,720 --> 00:11:24,480
entity 7 while the subsequent

233
00:11:24,480 --> 00:11:27,519
label stack is decomposed separately in

234
00:11:27,519 --> 00:11:31,279
ipfix entity 71 to 79

235
00:11:31,279 --> 00:11:34,480
so in each uh ipfix entity we have the

236
00:11:34,480 --> 00:11:37,200
label the experimental bits and also the

237
00:11:37,200 --> 00:11:39,839
bottom of the stack bit

238
00:11:39,839 --> 00:11:43,760
while in iphix entity 47 we see that

239
00:11:43,760 --> 00:11:46,959
mpls top label ipv4 address

240
00:11:46,959 --> 00:11:50,800
and in iphix entity uh 46

241
00:11:50,800 --> 00:11:53,200
the ample stop label type which is

242
00:11:53,200 --> 00:11:54,480
describing

243
00:11:54,480 --> 00:11:57,600
from which uh routing protocol or path

244
00:11:57,600 --> 00:11:59,360
computing element

245
00:11:59,360 --> 00:12:00,399
the

246
00:12:00,399 --> 00:12:02,079
label and the

247
00:12:02,079 --> 00:12:05,200
the prefix has been uh coming from

248
00:12:05,200 --> 00:12:09,040
and since this was the only uh change uh

249
00:12:09,040 --> 00:12:13,120
between mpls and impala segment routing

250
00:12:13,120 --> 00:12:17,200
in rfc 91 60 we updated the

251
00:12:17,200 --> 00:12:20,160
emperor's top label type registry

252
00:12:20,160 --> 00:12:22,079
at ayana

253
00:12:22,079 --> 00:12:25,719
next slide please

254
00:12:26,320 --> 00:12:29,519
so in order uh to gain uh

255
00:12:29,519 --> 00:12:31,920
also the same data plane visibility as

256
00:12:31,920 --> 00:12:34,320
we have in mpellet and then plus segment

257
00:12:34,320 --> 00:12:38,240
routing and also in srv6 uh we need to

258
00:12:38,240 --> 00:12:40,079
do the same

259
00:12:40,079 --> 00:12:42,639
in ipfix currently

260
00:12:42,639 --> 00:12:46,240
i'm aware of srv6 already being deployed

261
00:12:46,240 --> 00:12:48,720
in a network operators network some of

262
00:12:48,720 --> 00:12:51,600
them already started to do migrations

263
00:12:51,600 --> 00:12:54,160
from mpls to srv6

264
00:12:54,160 --> 00:12:56,480
and speaking for a network operator i

265
00:12:56,480 --> 00:12:58,720
know that especially during migration

266
00:12:58,720 --> 00:12:59,839
phases

267
00:12:59,839 --> 00:13:02,959
uh data plane visibility is a very

268
00:13:02,959 --> 00:13:06,000
crucial so that we can actually see uh

269
00:13:06,000 --> 00:13:07,519
to which uh

270
00:13:07,519 --> 00:13:10,240
segment routing id where traffic is

271
00:13:10,240 --> 00:13:13,279
being forwarded or being dropped

272
00:13:13,279 --> 00:13:14,560
so the

273
00:13:14,560 --> 00:13:17,600
in srv fix the equipment routing header

274
00:13:17,600 --> 00:13:21,279
uh is defined in rfc 8754

275
00:13:21,279 --> 00:13:23,600
section two

276
00:13:23,600 --> 00:13:26,480
next slide please

277
00:13:27,200 --> 00:13:30,160
and uh we were we are decomposing that

278
00:13:30,160 --> 00:13:33,120
in several ipv6 entities

279
00:13:33,120 --> 00:13:36,720
so in the ipv6 srh segments left we see

280
00:13:36,720 --> 00:13:37,839
basically

281
00:13:37,839 --> 00:13:41,600
uh where we are in the segment list in

282
00:13:41,600 --> 00:13:46,079
the ipv6 sf h tech and

283
00:13:46,079 --> 00:13:48,639
sre flex we are composing the attack and

284
00:13:48,639 --> 00:13:51,279
the flex field from the srh

285
00:13:51,279 --> 00:13:55,040
and in the ipv6 srh segment time see

286
00:13:55,040 --> 00:13:56,959
same as in

287
00:13:56,959 --> 00:14:00,399
mpls we are uh describing from which

288
00:14:00,399 --> 00:14:02,560
routing protocol the

289
00:14:02,560 --> 00:14:06,079
the segment has been coming from

290
00:14:06,079 --> 00:14:07,040
then

291
00:14:07,040 --> 00:14:09,680
in the uh ipfix

292
00:14:09,680 --> 00:14:13,040
entity sf section we are decomposing the

293
00:14:13,040 --> 00:14:15,199
entire srh

294
00:14:15,199 --> 00:14:17,760
as a series of n octet

295
00:14:17,760 --> 00:14:21,360
while in srh segment list section

296
00:14:21,360 --> 00:14:24,240
uh we are decomposing the

297
00:14:24,240 --> 00:14:28,399
segment list of the series of n octets

298
00:14:28,399 --> 00:14:32,639
the uh ipv6 sf segment and the segment

299
00:14:32,639 --> 00:14:36,800
basic list there we are encoding the the

300
00:14:36,800 --> 00:14:40,160
the segment list as an order basic list

301
00:14:40,160 --> 00:14:44,600
according to rfc 6313

302
00:14:44,880 --> 00:14:48,160
next slide please

303
00:14:50,880 --> 00:14:53,760
so uh we have two ways of

304
00:14:53,760 --> 00:14:56,800
exposing the

305
00:14:56,800 --> 00:15:00,639
the seat list so either uh as a basic

306
00:15:00,639 --> 00:15:02,000
list so

307
00:15:02,000 --> 00:15:04,560
or as a uh

308
00:15:04,560 --> 00:15:07,760
entire section as an octet array and

309
00:15:07,760 --> 00:15:10,160
also here i'm asking uh especially the

310
00:15:10,160 --> 00:15:12,240
network vendors

311
00:15:12,240 --> 00:15:14,959
what makes most sense if you should do

312
00:15:14,959 --> 00:15:18,639
pumpkin ipfix both or one over the other

313
00:15:18,639 --> 00:15:20,880
the difference between the two are

314
00:15:20,880 --> 00:15:23,760
either the decomposition is being done

315
00:15:23,760 --> 00:15:26,240
on the export side or on the data

316
00:15:26,240 --> 00:15:28,959
collection side

317
00:15:28,959 --> 00:15:31,759
next step is

318
00:15:31,759 --> 00:15:34,880
uh some operational consideration

319
00:15:34,880 --> 00:15:37,920
regarding the srh compression

320
00:15:37,920 --> 00:15:40,639
as you're aware of the uh

321
00:15:40,639 --> 00:15:42,639
basically the the

322
00:15:42,639 --> 00:15:45,360
with uh sfh compression we have a

323
00:15:45,360 --> 00:15:48,160
so-called compressed seat container

324
00:15:48,160 --> 00:15:50,720
which is uh basically still

325
00:15:50,720 --> 00:15:55,120
a 128 bit long uh

326
00:15:55,120 --> 00:15:57,279
it's a 180

327
00:15:57,279 --> 00:16:00,160
128 bit long uh

328
00:16:00,160 --> 00:16:01,519
cc

329
00:16:01,519 --> 00:16:02,639
list

330
00:16:02,639 --> 00:16:05,600
and therefore basically the ipv6 srh

331
00:16:05,600 --> 00:16:07,360
segment list

332
00:16:07,360 --> 00:16:08,560
does not

333
00:16:08,560 --> 00:16:12,560
change it's still a list of ipv6 seats

334
00:16:12,560 --> 00:16:15,839
but uh it can either contain ipv6

335
00:16:15,839 --> 00:16:18,959
systems or a list of seasid container or

336
00:16:18,959 --> 00:16:19,839
both

337
00:16:19,839 --> 00:16:23,600
so they are not mutually exclusive

338
00:16:23,600 --> 00:16:26,399
it probably makes sense to add in the

339
00:16:26,399 --> 00:16:28,880
rough document a section

340
00:16:28,880 --> 00:16:29,839
how

341
00:16:29,839 --> 00:16:32,399
basically the iphix data collection can

342
00:16:32,399 --> 00:16:35,759
distinct between a bb6 list and the list

343
00:16:35,759 --> 00:16:37,920
of seasid containers

344
00:16:37,920 --> 00:16:39,040
uh

345
00:16:39,040 --> 00:16:42,000
and from what the autos understood them

346
00:16:42,000 --> 00:16:44,320
uh probably doesn't make sense to

347
00:16:44,320 --> 00:16:47,360
decompose the the cc contained

348
00:16:47,360 --> 00:16:49,839
into compressed seats in open export

349
00:16:49,839 --> 00:16:52,000
there i'm asking

350
00:16:52,000 --> 00:16:55,279
for feedback from the working group

351
00:16:55,279 --> 00:16:57,120
next slide please

352
00:16:57,120 --> 00:16:59,680
so so far we have been collecting uh

353
00:16:59,680 --> 00:17:01,360
feedback from stream

354
00:17:01,360 --> 00:17:04,959
ops awg and ipfix doctor

355
00:17:04,959 --> 00:17:07,199
so from the feedback we have included

356
00:17:07,199 --> 00:17:08,240
the

357
00:17:08,240 --> 00:17:10,799
the new ipfix entities for the srh

358
00:17:10,799 --> 00:17:13,919
section and the segment list section

359
00:17:13,919 --> 00:17:17,039
but also added the segments left

360
00:17:17,039 --> 00:17:20,160
to uh expose where in the segment list

361
00:17:20,160 --> 00:17:22,559
the forwarding happens and that might be

362
00:17:22,559 --> 00:17:26,160
useful to detect forwarding loops

363
00:17:26,160 --> 00:17:28,000
uh we added

364
00:17:28,000 --> 00:17:30,400
uh the operational consideration section

365
00:17:30,400 --> 00:17:34,240
to describe the difference uh uh very uh

366
00:17:34,240 --> 00:17:36,960
between the srh section and then

367
00:17:36,960 --> 00:17:39,440
eight segment list section where which

368
00:17:39,440 --> 00:17:42,320
one makes sense and in the iena

369
00:17:42,320 --> 00:17:44,640
consideration we updated them to be in

370
00:17:44,640 --> 00:17:47,840
line with rfc 8126

371
00:17:47,840 --> 00:17:50,480
the document itself does not introduce

372
00:17:50,480 --> 00:17:52,640
any a new protocol it's for

373
00:17:52,640 --> 00:17:55,840
documentation purposes only however

374
00:17:55,840 --> 00:17:58,000
because new ipfix registries are

375
00:17:58,000 --> 00:18:00,799
introduced we specified the document as

376
00:18:00,799 --> 00:18:02,640
internet standard to be in line with

377
00:18:02,640 --> 00:18:05,039
other documents

378
00:18:05,039 --> 00:18:07,679
next slide please

379
00:18:07,679 --> 00:18:10,240
so data plane visibility is missing do

380
00:18:10,240 --> 00:18:13,039
you recognize the

381
00:18:13,039 --> 00:18:13,600
we problem statements

382
00:18:13,600 --> 00:18:15,679
to believe the document should progress

383
00:18:15,679 --> 00:18:17,840
quickly through itf to write that

384
00:18:17,840 --> 00:18:20,000
private enterprise code points are being

385
00:18:20,000 --> 00:18:23,919
used at srv6 deployments and therefore

386
00:18:23,919 --> 00:18:27,039
we requested the adoption at

387
00:18:27,039 --> 00:18:28,720
awg

388
00:18:28,720 --> 00:18:31,039
and i'm looking forward to hear your

389
00:18:31,039 --> 00:18:32,240
comments and

390
00:18:32,240 --> 00:18:34,640
feedback

391
00:18:34,799 --> 00:18:37,280
questions

392
00:18:39,919 --> 00:18:41,360
uh one question

393
00:18:41,360 --> 00:18:44,399
uh go ahead please

394
00:18:45,360 --> 00:18:47,840
thomas uh thanks uh for your work on

395
00:18:47,840 --> 00:18:50,880
this and also previously on the sr mpls

396
00:18:50,880 --> 00:18:54,640
part i should say uh a quick feedback

397
00:18:54,640 --> 00:18:57,600
not a question on flight number seven

398
00:18:57,600 --> 00:19:00,000
uh i think uh

399
00:19:00,000 --> 00:19:03,919
uh your about the ccd uh container i

400
00:19:03,919 --> 00:19:06,080
think i agree with your assessment uh

401
00:19:06,080 --> 00:19:08,960
that it doesn't add much value uh at

402
00:19:08,960 --> 00:19:11,120
least in my opinion

403
00:19:11,120 --> 00:19:12,960
to decompose it

404
00:19:12,960 --> 00:19:14,160
thanks

405
00:19:14,160 --> 00:19:17,559
perfect thanks

406
00:19:24,160 --> 00:19:27,200
andrew please go ahead

407
00:19:27,200 --> 00:19:29,280
yeah speaking as julia working with

408
00:19:29,280 --> 00:19:31,120
participants i just wanted to clarify

409
00:19:31,120 --> 00:19:33,679
when you refer to csird

410
00:19:33,679 --> 00:19:37,120
are you also referring to jesuit same

411
00:19:37,120 --> 00:19:38,799
scenario or do you see any

412
00:19:38,799 --> 00:19:42,080
differentiation there

413
00:19:43,039 --> 00:19:44,880
since i'm not aware of cheese it i have

414
00:19:44,880 --> 00:19:47,840
to double check but i will get back to

415
00:19:47,840 --> 00:19:51,240
you on the list

416
00:19:53,760 --> 00:19:56,960
darren please go ahead

417
00:19:57,679 --> 00:19:59,679
yeah uh just uh just to build on what

418
00:19:59,679 --> 00:20:02,080
katana had said um there's i think

419
00:20:02,080 --> 00:20:04,480
there's any value in decomposing in fact

420
00:20:04,480 --> 00:20:06,960
it's i think it's better not to

421
00:20:06,960 --> 00:20:08,640
uh make any

422
00:20:08,640 --> 00:20:10,080
uh kind of

423
00:20:10,080 --> 00:20:11,120
uh

424
00:20:11,120 --> 00:20:13,039
guess as to what a behavior is of any of

425
00:20:13,039 --> 00:20:15,120
these sids uh just transport them and

426
00:20:15,120 --> 00:20:16,240
let the

427
00:20:16,240 --> 00:20:17,760
let the receiver determine what the

428
00:20:17,760 --> 00:20:20,400
behaviors are

429
00:20:20,400 --> 00:20:22,720
thanks

430
00:20:30,159 --> 00:20:31,679
okay there's no more questions in the

431
00:20:31,679 --> 00:20:33,360
queue

432
00:20:33,360 --> 00:20:35,440
can we move to the next

433
00:20:35,440 --> 00:20:39,559
next presentation thank you

434
00:20:52,880 --> 00:20:55,880
um

435
00:21:04,640 --> 00:21:06,640
joel can you uh load the next uh

436
00:21:06,640 --> 00:21:09,280
presentation

437
00:21:11,840 --> 00:21:14,240
trying to but i'm having trouble finding

438
00:21:14,240 --> 00:21:16,559
it because i thought it was

439
00:21:16,559 --> 00:21:20,960
mpls and srv6 sr mpls and srv6

440
00:21:20,960 --> 00:21:23,520
interworking but i don't have a deck

441
00:21:23,520 --> 00:21:26,639
with that name on it

442
00:21:27,039 --> 00:21:30,679
let's see here

443
00:21:31,039 --> 00:21:34,880
what's the deck name for this one

444
00:21:34,880 --> 00:21:37,679
uh the deck name is the srv6 and mpls

445
00:21:37,679 --> 00:21:40,640
interworking only that's what i sent

446
00:21:40,640 --> 00:21:44,400
it's it's there joel

447
00:21:44,400 --> 00:21:47,520
third third one down on the list

448
00:21:47,520 --> 00:21:49,840
if you look at the meeting materials

449
00:21:49,840 --> 00:21:51,440
don't not on the meeting materials look

450
00:21:51,440 --> 00:21:53,760
on the on the shared deck

451
00:21:53,760 --> 00:21:56,159
let me go make sure it's actually shared

452
00:21:56,159 --> 00:21:57,520
properly because

453
00:21:57,520 --> 00:22:00,400
it may have gotten uploaded late sorry

454
00:22:00,400 --> 00:22:01,600
uh

455
00:22:01,600 --> 00:22:05,199
there it is that's the problem

456
00:22:07,919 --> 00:22:10,080
uh there it wasn't in the in the

457
00:22:10,080 --> 00:22:12,960
repository so i now it is and i'll be

458
00:22:12,960 --> 00:22:14,799
able to share it

459
00:22:14,799 --> 00:22:17,039
uh

460
00:22:17,280 --> 00:22:20,320
sorry for the delay

461
00:22:20,640 --> 00:22:22,480
the problem was this got loaded after

462
00:22:22,480 --> 00:22:25,039
they pre-loaded the stuff for us so go

463
00:22:25,039 --> 00:22:27,200
ahead

464
00:22:27,200 --> 00:22:28,480
yeah thanks

465
00:22:28,480 --> 00:22:31,280
yeah hi everyone i'm swadeesh agarwal

466
00:22:31,280 --> 00:22:32,559
from cisco

467
00:22:32,559 --> 00:22:34,000
so yeah

468
00:22:34,000 --> 00:22:37,200
so this draft provides the srv6 and mpls

469
00:22:37,200 --> 00:22:40,080
interworking for end-to-end layer 3 and

470
00:22:40,080 --> 00:22:42,080
layer 2 services

471
00:22:42,080 --> 00:22:44,559
across a network

472
00:22:44,559 --> 00:22:47,280
so this draft presents the interworking

473
00:22:47,280 --> 00:22:49,039
scenario into

474
00:22:49,039 --> 00:22:51,280
generalize generalizes interworking

475
00:22:51,280 --> 00:22:52,320
scenario

476
00:22:52,320 --> 00:22:54,880
into uh so that

477
00:22:54,880 --> 00:22:56,400
uh

478
00:22:56,400 --> 00:22:58,799
into a simpler topology

479
00:22:58,799 --> 00:23:01,039
as i'm showing in this slide so if you

480
00:23:01,039 --> 00:23:04,240
see green issuing a srv6 domains orange

481
00:23:04,240 --> 00:23:06,559
is showing mpls domain and the dashed

482
00:23:06,559 --> 00:23:09,360
overlays showing a box where the

483
00:23:09,360 --> 00:23:11,120
interworking functions are done this is

484
00:23:11,120 --> 00:23:13,360
a border router between such domains

485
00:23:13,360 --> 00:23:14,240
which

486
00:23:14,240 --> 00:23:16,320
provides the interworking function and

487
00:23:16,320 --> 00:23:19,600
supports both srv6 and mpls

488
00:23:19,600 --> 00:23:20,880
so

489
00:23:20,880 --> 00:23:22,000
in this slide we are trying to

490
00:23:22,000 --> 00:23:24,799
generalize the problem into a transport

491
00:23:24,799 --> 00:23:26,320
interworking and the service

492
00:23:26,320 --> 00:23:28,559
interworking what transport interworking

493
00:23:28,559 --> 00:23:31,520
means is we have a layer 2 layer 3 and

494
00:23:31,520 --> 00:23:33,120
layer 2 services which are either

495
00:23:33,120 --> 00:23:36,880
srv6vpn or mpls vpn and the service

496
00:23:36,880 --> 00:23:38,400
interworking that we are trying to show

497
00:23:38,400 --> 00:23:40,559
but in the bottom is a case where we

498
00:23:40,559 --> 00:23:44,000
have a srv6 vpn working with an mpls

499
00:23:44,000 --> 00:23:46,320
vpn to provide service

500
00:23:46,320 --> 00:23:48,159
connectivity even though the service

501
00:23:48,159 --> 00:23:50,480
signaling is discontinuous it's not of

502
00:23:50,480 --> 00:23:52,159
the same type

503
00:23:52,159 --> 00:23:53,039
and

504
00:23:53,039 --> 00:23:56,000
can you go to the next slide

505
00:23:59,679 --> 00:24:01,919
so this draft introduces

506
00:24:01,919 --> 00:24:04,000
new behaviors to provide that

507
00:24:04,000 --> 00:24:05,760
interworking functions that i showed in

508
00:24:05,760 --> 00:24:07,919
the previous slide on the border routers

509
00:24:07,919 --> 00:24:09,760
so first function that we introduced is

510
00:24:09,760 --> 00:24:11,120
a

511
00:24:11,120 --> 00:24:13,360
first behave as a dtm behavior and what

512
00:24:13,360 --> 00:24:17,200
it does is when we receive a srv6 packet

513
00:24:17,200 --> 00:24:20,320
where the destination matches the dtm

514
00:24:20,320 --> 00:24:24,000
behavior we decapsulate the ipv6 header

515
00:24:24,000 --> 00:24:26,320
and below that we are carrying an mpls

516
00:24:26,320 --> 00:24:28,159
payload so we do a lookup of the mpls

517
00:24:28,159 --> 00:24:29,520
payload and

518
00:24:29,520 --> 00:24:30,640
we

519
00:24:30,640 --> 00:24:33,120
we send the traffic further based on the

520
00:24:33,120 --> 00:24:36,640
mpls labels below the ipv6 header

521
00:24:36,640 --> 00:24:39,360
next slide please

522
00:24:41,760 --> 00:24:43,200
this is a new behavior another new

523
00:24:43,200 --> 00:24:46,720
behavior again this is executed on the

524
00:24:46,720 --> 00:24:47,440
the

525
00:24:47,440 --> 00:24:49,200
into as an interlocking function on

526
00:24:49,200 --> 00:24:52,320
those border routers and in this case

527
00:24:52,320 --> 00:24:54,159
what we are doing is we receive an

528
00:24:54,159 --> 00:24:56,720
i i when we receive an ipv6 packet which

529
00:24:56,720 --> 00:24:59,120
matches the dpm behavior

530
00:24:59,120 --> 00:25:02,240
so it decapsulate the packet and

531
00:25:02,240 --> 00:25:04,480
whatever is the associated mpl stack

532
00:25:04,480 --> 00:25:06,320
with this behavior that's pushed onto

533
00:25:06,320 --> 00:25:08,720
the packet and so and based on and

534
00:25:08,720 --> 00:25:11,120
further forwarded based on the new

535
00:25:11,120 --> 00:25:14,159
stack of labels being pushed

536
00:25:14,159 --> 00:25:16,880
next slide please

537
00:25:19,840 --> 00:25:21,120
yeah so

538
00:25:21,120 --> 00:25:22,960
here we are trying to say that these are

539
00:25:22,960 --> 00:25:25,520
new end caps behavior for the mpls stack

540
00:25:25,520 --> 00:25:27,520
because when we receive traffic from the

541
00:25:27,520 --> 00:25:30,400
mpls domain we need to encap that into

542
00:25:30,400 --> 00:25:33,039
ipv6 header so this is a new h dot

543
00:25:33,039 --> 00:25:35,600
encaps dot m behavior which takes the

544
00:25:35,600 --> 00:25:37,919
mpl stack as in

545
00:25:37,919 --> 00:25:41,120
input and adds the ipv6 header and the

546
00:25:41,120 --> 00:25:43,279
srh

547
00:25:43,279 --> 00:25:45,760
above it together mpls label stack and

548
00:25:45,760 --> 00:25:47,760
its payload becomes the payload of the

549
00:25:47,760 --> 00:25:50,400
new ipv6 packet and the next header

550
00:25:50,400 --> 00:25:52,320
field is set to 137 because it's

551
00:25:52,320 --> 00:25:54,320
carrying an mpls payload

552
00:25:54,320 --> 00:25:56,960
also there's a reduced version of it

553
00:25:56,960 --> 00:25:59,760
next slide please

554
00:26:03,360 --> 00:26:06,159
yeah so this draft uses the idea of

555
00:26:06,159 --> 00:26:08,400
interconnecting binding sets so binding

556
00:26:08,400 --> 00:26:11,840
cities bound to an sr policy as per the

557
00:26:11,840 --> 00:26:14,400
rfc 8402

558
00:26:14,400 --> 00:26:15,279
so

559
00:26:15,279 --> 00:26:18,640
an sr mpls label can be bound to an srv6

560
00:26:18,640 --> 00:26:21,200
policy that's a binding set for an srv6

561
00:26:21,200 --> 00:26:24,480
policy as well as an srv6 sid

562
00:26:24,480 --> 00:26:27,840
can be bounded to an sr mpls policy

563
00:26:27,840 --> 00:26:30,159
so once we do that we can use these b

564
00:26:30,159 --> 00:26:33,679
cits in the segment list of an sr policy

565
00:26:33,679 --> 00:26:35,360
which is an sr policy would be a

566
00:26:35,360 --> 00:26:37,679
consistent because we are using the

567
00:26:37,679 --> 00:26:40,559
the binding set of a different type and

568
00:26:40,559 --> 00:26:42,720
it represents the intermediate domain of

569
00:26:42,720 --> 00:26:45,279
a different data plane so what i can do

570
00:26:45,279 --> 00:26:48,880
is in an mpls if the header is mpls

571
00:26:48,880 --> 00:26:49,760
i can

572
00:26:49,760 --> 00:26:52,000
take i can create an mpls binding set

573
00:26:52,000 --> 00:26:56,000
for an ipv6 sr policy and represent

574
00:26:56,000 --> 00:26:57,760
and use that binding set to represent

575
00:26:57,760 --> 00:26:58,559
the

576
00:26:58,559 --> 00:27:00,799
intermediate data plane in my

577
00:27:00,799 --> 00:27:03,840
policy and that way we can provide a

578
00:27:03,840 --> 00:27:07,840
we can present the policy to the hidden

579
00:27:07,840 --> 00:27:10,559
next slide please

580
00:27:10,880 --> 00:27:13,120
so now i will go into the how do we

581
00:27:13,120 --> 00:27:15,360
create these states on the interworking

582
00:27:15,360 --> 00:27:16,799
boxes or the

583
00:27:16,799 --> 00:27:19,440
for these functions so we use the in the

584
00:27:19,440 --> 00:27:21,120
transport interworking as i mentioned

585
00:27:21,120 --> 00:27:22,080
earlier

586
00:27:22,080 --> 00:27:23,600
we are trying to

587
00:27:23,600 --> 00:27:24,399
uh

588
00:27:24,399 --> 00:27:26,080
we are trying to reach the

589
00:27:26,080 --> 00:27:28,080
the transport endpoint or the service

590
00:27:28,080 --> 00:27:29,039
endpoint

591
00:27:29,039 --> 00:27:31,520
so what we do is in this case we use the

592
00:27:31,520 --> 00:27:35,600
well-known procedures of srpc where we

593
00:27:35,600 --> 00:27:38,880
provide a path using the sr policy which

594
00:27:38,880 --> 00:27:41,200
satisfied a certain intent across the

595
00:27:41,200 --> 00:27:42,799
multiple domains

596
00:27:42,799 --> 00:27:44,799
srpc detects the data plane

597
00:27:44,799 --> 00:27:46,960
discontinuity because it is getting a

598
00:27:46,960 --> 00:27:49,440
btp ls feed and it can identify there is

599
00:27:49,440 --> 00:27:50,240
a

600
00:27:50,240 --> 00:27:51,679
network which is

601
00:27:51,679 --> 00:27:53,840
not of the data plane type of the hidden

602
00:27:53,840 --> 00:27:55,600
where the sr policy

603
00:27:55,600 --> 00:27:56,720
is to be

604
00:27:56,720 --> 00:27:57,840
programmed

605
00:27:57,840 --> 00:28:00,320
also we use the bgp inter domain routing

606
00:28:00,320 --> 00:28:02,399
3107 procedures

607
00:28:02,399 --> 00:28:04,640
which to advertise the

608
00:28:04,640 --> 00:28:07,919
the egress endpoints pe locators or the

609
00:28:07,919 --> 00:28:10,080
we can say service endpoints which are

610
00:28:10,080 --> 00:28:14,320
pe locators in the srv6 vpn as well as

611
00:28:14,320 --> 00:28:17,840
ipv4 pe loopbacks for the mpls lsp in

612
00:28:17,840 --> 00:28:19,919
the multi-domain network and advantage

613
00:28:19,919 --> 00:28:21,840
of bgp inter domain routing is when you

614
00:28:21,840 --> 00:28:24,640
do next top self on these

615
00:28:24,640 --> 00:28:26,720
border routers between these domain it

616
00:28:26,720 --> 00:28:28,240
provides the termination of the next

617
00:28:28,240 --> 00:28:31,760
stop as well as of the end cap

618
00:28:31,760 --> 00:28:34,159
next slide please

619
00:28:34,159 --> 00:28:35,760
so these are the few legends that i have

620
00:28:35,760 --> 00:28:38,320
using in the slides one is a

621
00:28:38,320 --> 00:28:40,880
green means srv6 capable node orange

622
00:28:40,880 --> 00:28:41,840
means

623
00:28:41,840 --> 00:28:44,080
mpls capable node and the green and

624
00:28:44,080 --> 00:28:46,399
orange in the circle means it supports

625
00:28:46,399 --> 00:28:48,799
both mpls as well as srv is capable of

626
00:28:48,799 --> 00:28:50,559
next slide please

627
00:28:50,559 --> 00:28:52,559
so here i'm showing how

628
00:28:52,559 --> 00:28:54,799
we can make an srpc based solution for

629
00:28:54,799 --> 00:28:57,039
the interworking so what happens is node

630
00:28:57,039 --> 00:28:58,480
10 is a pe

631
00:28:58,480 --> 00:29:00,799
which is advertising the vpn service

632
00:29:00,799 --> 00:29:03,200
prefixes vpn prefix with the srv6

633
00:29:03,200 --> 00:29:05,520
service set which i am showing as a b10

634
00:29:05,520 --> 00:29:07,679
as a locator of 10 followed by a dt4

635
00:29:07,679 --> 00:29:10,320
function which is a perv of lookup and

636
00:29:10,320 --> 00:29:12,399
then it's advertised is a certain color

637
00:29:12,399 --> 00:29:14,960
red which tells the intent it is this is

638
00:29:14,960 --> 00:29:16,640
received by the node one through the

639
00:29:16,640 --> 00:29:18,159
service rrs

640
00:29:18,159 --> 00:29:20,080
but node one is sitting multiple domain

641
00:29:20,080 --> 00:29:22,880
away which is not a common igp so what

642
00:29:22,880 --> 00:29:24,960
node one is does it doesn't know how to

643
00:29:24,960 --> 00:29:27,120
reach the note 10 it will go to the sr

644
00:29:27,120 --> 00:29:29,520
pc with the

645
00:29:29,520 --> 00:29:32,320
we're asking for a certain intent that

646
00:29:32,320 --> 00:29:33,919
means it could be a low tendency to

647
00:29:33,919 --> 00:29:35,520
reach the note 10.

648
00:29:35,520 --> 00:29:37,760
srpc will compute the

649
00:29:37,760 --> 00:29:40,880
low latency path from node 1 to node 10

650
00:29:40,880 --> 00:29:43,039
and in this case i'm assuming it's node

651
00:29:43,039 --> 00:29:45,840
2 in the domain 1 node 5 in the middle

652
00:29:45,840 --> 00:29:49,039
domain which is mpls not the srv6 and

653
00:29:49,039 --> 00:29:50,799
the node 8 which is

654
00:29:50,799 --> 00:29:53,200
again back to srv6

655
00:29:53,200 --> 00:29:54,880
so what it does is

656
00:29:54,880 --> 00:29:56,399
uh

657
00:29:56,399 --> 00:29:59,200
the srpc sees there's an inconsistent

658
00:29:59,200 --> 00:30:01,200
data plane in middle and it triggers the

659
00:30:01,200 --> 00:30:03,039
interworking procedures on the border

660
00:30:03,039 --> 00:30:04,880
box in which case in this case which is

661
00:30:04,880 --> 00:30:06,480
four and seven

662
00:30:06,480 --> 00:30:08,080
so it programs an

663
00:30:08,080 --> 00:30:11,120
sr mpls policy on node four

664
00:30:11,120 --> 00:30:12,960
as you can see by the sequence number

665
00:30:12,960 --> 00:30:16,399
three from srpc and it is allocating

666
00:30:16,399 --> 00:30:18,640
even though it's an srm pls policy along

667
00:30:18,640 --> 00:30:21,600
the sla path for node five to node seven

668
00:30:21,600 --> 00:30:22,720
but it is

669
00:30:22,720 --> 00:30:25,360
bounding it to an srv6 policy of a bm

670
00:30:25,360 --> 00:30:26,480
behavior

671
00:30:26,480 --> 00:30:29,279
and that policy is programmed and that

672
00:30:29,279 --> 00:30:31,440
binding set is programmed on the hidden

673
00:30:31,440 --> 00:30:34,720
node 1 by the srpc that is shown by the

674
00:30:34,720 --> 00:30:36,720
sequence number four and if you see the

675
00:30:36,720 --> 00:30:39,679
policy on the node one it has node two

676
00:30:39,679 --> 00:30:41,600
as a first segment then there's a

677
00:30:41,600 --> 00:30:42,799
binding sid

678
00:30:42,799 --> 00:30:46,159
of the vm behavior of on the node four

679
00:30:46,159 --> 00:30:47,120
then

680
00:30:47,120 --> 00:30:50,159
the node eight by a node 8 endpoint and

681
00:30:50,159 --> 00:30:51,840
then the node 10 endpoint so what

682
00:30:51,840 --> 00:30:54,080
happens is now when the traffic of

683
00:30:54,080 --> 00:30:55,679
course it will visit the node 2 and

684
00:30:55,679 --> 00:30:56,720
function

685
00:30:56,720 --> 00:30:59,279
and update the ipv6 destination at the

686
00:30:59,279 --> 00:31:01,440
segment left on the node 4 it will

687
00:31:01,440 --> 00:31:03,600
execute the bm behavior where it will

688
00:31:03,600 --> 00:31:06,080
put the mpls it will update the

689
00:31:06,080 --> 00:31:08,320
the destination address to the next

690
00:31:08,320 --> 00:31:11,120
uh ips address which is the node 8 but

691
00:31:11,120 --> 00:31:14,240
it will also push the mpls stack there

692
00:31:14,240 --> 00:31:16,000
so once it pushes it takes through the

693
00:31:16,000 --> 00:31:18,799
sla path in the mpls middle domain and

694
00:31:18,799 --> 00:31:19,519
then

695
00:31:19,519 --> 00:31:21,760
uh at the node seven of course uh it

696
00:31:21,760 --> 00:31:23,679
will uh

697
00:31:23,679 --> 00:31:26,080
because of the php or note 5 it will uh

698
00:31:26,080 --> 00:31:27,600
it will when the packet reaches the note

699
00:31:27,600 --> 00:31:30,720
7 it will it it would be an ipv6 packet

700
00:31:30,720 --> 00:31:32,240
which will take you to the next

701
00:31:32,240 --> 00:31:34,240
destination address which is node 8 and

702
00:31:34,240 --> 00:31:35,760
finally it will be delivered to the node

703
00:31:35,760 --> 00:31:38,000
10. so we can see how we can use this

704
00:31:38,000 --> 00:31:40,399
logic to provide the interworking in the

705
00:31:40,399 --> 00:31:44,320
srpc case next slide please

706
00:31:44,320 --> 00:31:46,880
so this is

707
00:31:46,880 --> 00:31:49,440
sorry to interrupt um you still have

708
00:31:49,440 --> 00:31:52,480
five uh sides to go uh on less than two

709
00:31:52,480 --> 00:31:54,799
minutes so sure time quickly finished i

710
00:31:54,799 --> 00:31:56,960
think the idea has come across it should

711
00:31:56,960 --> 00:31:57,840
be fine

712
00:31:57,840 --> 00:31:59,200
thanks

713
00:31:59,200 --> 00:32:01,679
so this is exactly same idea but here

714
00:32:01,679 --> 00:32:03,840
the we are seeing the english domain is

715
00:32:03,840 --> 00:32:07,760
mpls and a middle srv6 domain sr policy

716
00:32:07,760 --> 00:32:10,159
is allocated in mpls bindingsid and

717
00:32:10,159 --> 00:32:11,919
that's what we put in the segments on

718
00:32:11,919 --> 00:32:14,080
the the head and on the node one and

719
00:32:14,080 --> 00:32:15,200
that's the way we provide the

720
00:32:15,200 --> 00:32:16,960
interworking

721
00:32:16,960 --> 00:32:19,679
next slide please

722
00:32:23,440 --> 00:32:25,279
yeah so this one is a case of a bgp

723
00:32:25,279 --> 00:32:27,600
procedures and we know in bgp we can

724
00:32:27,600 --> 00:32:29,840
always do the next top self on the

725
00:32:29,840 --> 00:32:31,440
border node in which we are showing node

726
00:32:31,440 --> 00:32:33,440
seven and four and which can terminate

727
00:32:33,440 --> 00:32:35,360
the certain end cap and then advertise

728
00:32:35,360 --> 00:32:37,679
the new one so in the case of

729
00:32:37,679 --> 00:32:39,039
in this case what we are trying to show

730
00:32:39,039 --> 00:32:41,360
is this is srv6 vpn end to end so we

731
00:32:41,360 --> 00:32:43,279
need a reachability to an ok locator of

732
00:32:43,279 --> 00:32:45,519
node 10 if the traffic is just in from

733
00:32:45,519 --> 00:32:47,600
the node 1 to node 10. so what happens

734
00:32:47,600 --> 00:32:50,399
is we can advertise the ipv6 locators in

735
00:32:50,399 --> 00:32:52,640
the right node through an mpls domain in

736
00:32:52,640 --> 00:32:54,880
the middle which is a six pe solution i

737
00:32:54,880 --> 00:32:56,960
can always advertise the ipv6 addresses

738
00:32:56,960 --> 00:32:59,360
with the ipv for next stop and with the

739
00:32:59,360 --> 00:33:01,679
explicit null and that way it provides

740
00:33:01,679 --> 00:33:04,399
the reachability of the locators to the

741
00:33:04,399 --> 00:33:06,880
left node through an mpls network it's

742
00:33:06,880 --> 00:33:09,039
an existing xxp solution

743
00:33:09,039 --> 00:33:11,519
next slide please

744
00:33:11,519 --> 00:33:14,399
and similarly to provide the uh

745
00:33:14,399 --> 00:33:17,600
over the mpls over srv6 network what we

746
00:33:17,600 --> 00:33:20,399
do is in this case it's the one and ten

747
00:33:20,399 --> 00:33:24,320
are the legacy ps which is a mpls vpn so

748
00:33:24,320 --> 00:33:27,760
we use the existing mpls 3107 uh

749
00:33:27,760 --> 00:33:30,000
path here so we have a 3107 labels on

750
00:33:30,000 --> 00:33:32,240
border nodes four and seven which goes

751
00:33:32,240 --> 00:33:35,200
to node one it's an existing bgplu setup

752
00:33:35,200 --> 00:33:36,240
just that

753
00:33:36,240 --> 00:33:39,039
from four to seven we we

754
00:33:39,039 --> 00:33:42,960
we tunnel into an ipv6 sr ipv6 uh tunnel

755
00:33:42,960 --> 00:33:45,519
which is of the srv6 and we the

756
00:33:45,519 --> 00:33:48,080
destination is to be of dtm behavior so

757
00:33:48,080 --> 00:33:50,480
that way we provide the tunneling next

758
00:33:50,480 --> 00:33:53,720
slide please

759
00:33:53,840 --> 00:33:55,200
i think i can

760
00:33:55,200 --> 00:33:57,039
skip this one we can go to the next

761
00:33:57,039 --> 00:33:59,039
slide

762
00:33:59,039 --> 00:34:00,960
yeah summaries this this document has

763
00:34:00,960 --> 00:34:04,000
been in the idf from october 2018. the

764
00:34:04,000 --> 00:34:06,080
draft describes both the data plane and

765
00:34:06,080 --> 00:34:08,399
associated control pin procedures

766
00:34:08,399 --> 00:34:10,000
for data plane we have defined the new

767
00:34:10,000 --> 00:34:12,879
behaviors dtm and dpm behaviors

768
00:34:12,879 --> 00:34:15,119
and we also introduced the concept of

769
00:34:15,119 --> 00:34:17,040
internet connecting binding sets to

770
00:34:17,040 --> 00:34:19,359
traverse the heterogeneous data plane

771
00:34:19,359 --> 00:34:21,599
for control plane we provide both srpc

772
00:34:21,599 --> 00:34:23,839
and bgp based solutions next slide

773
00:34:23,839 --> 00:34:26,000
please

774
00:34:26,000 --> 00:34:27,119
yeah so

775
00:34:27,119 --> 00:34:28,719
i i'm looking for the working group

776
00:34:28,719 --> 00:34:31,440
adoption for this document

777
00:34:31,440 --> 00:34:34,679
thank you

778
00:34:36,000 --> 00:34:38,560
okay we have three on the queue uh sully

779
00:34:38,560 --> 00:34:41,359
i hope i pronounced that correctly um

780
00:34:41,359 --> 00:34:43,918
please go ahead

781
00:34:43,918 --> 00:34:46,000
i am sally from juniper network so one

782
00:34:46,000 --> 00:34:48,239
question uh basically regarding this

783
00:34:48,239 --> 00:34:51,839
srv6 end behavior end.dpm uh we have

784
00:34:51,839 --> 00:34:52,960
already

785
00:34:52,960 --> 00:34:56,320
have an exact similar uh seed vendor dm

786
00:34:56,320 --> 00:34:58,400
uh defined as part of draft bonica

787
00:34:58,400 --> 00:35:01,200
spring srv6 and dtm which has been

788
00:35:01,200 --> 00:35:02,880
presented a few times in the spring

789
00:35:02,880 --> 00:35:04,400
working group as well

790
00:35:04,400 --> 00:35:05,119
so

791
00:35:05,119 --> 00:35:09,040
i see the definition is exactly the same

792
00:35:09,040 --> 00:35:10,720
so uh so

793
00:35:10,720 --> 00:35:12,400
sorry this has been even in this draft

794
00:35:12,400 --> 00:35:14,160
for a long time earlier we used to call

795
00:35:14,160 --> 00:35:16,880
it a decap variant of bm but now we call

796
00:35:16,880 --> 00:35:17,760
it a

797
00:35:17,760 --> 00:35:21,200
dpm so i'm not sure which one is the

798
00:35:21,200 --> 00:35:22,960
earliest but yeah we can work together

799
00:35:22,960 --> 00:35:25,200
to if you feel it's the same we can work

800
00:35:25,200 --> 00:35:26,800
together to come with a common name if

801
00:35:26,800 --> 00:35:29,200
that's what

802
00:35:29,520 --> 00:35:32,240
okay thanks

803
00:35:33,119 --> 00:35:34,800
drove

804
00:35:34,800 --> 00:35:38,560
uh hi trove here uh swadesh one question

805
00:35:38,560 --> 00:35:41,280
maybe with my pc chair hat on in your

806
00:35:41,280 --> 00:35:44,240
analysis for the sr srpc solution is

807
00:35:44,240 --> 00:35:45,680
there any gaps

808
00:35:45,680 --> 00:35:47,440
that you had found

809
00:35:47,440 --> 00:35:50,320
while describing the solution

810
00:35:50,320 --> 00:35:52,720
so uh

811
00:35:53,839 --> 00:35:55,440
yeah so

812
00:35:55,440 --> 00:35:57,839
i have to work with the srpc team but if

813
00:35:57,839 --> 00:36:00,079
you see the bgpls feed is available to

814
00:36:00,079 --> 00:36:03,440
the srpc and it is available it is aware

815
00:36:03,440 --> 00:36:06,079
of the topology so it's it can easily

816
00:36:06,079 --> 00:36:08,079
figure out that it's an inconsistent

817
00:36:08,079 --> 00:36:11,040
data plane and put can put a a policy

818
00:36:11,040 --> 00:36:13,520
like a hierarchical odn a sub policy on

819
00:36:13,520 --> 00:36:15,599
the mpls or a srvis's intermediate

820
00:36:15,599 --> 00:36:18,560
domain and pass it as a sit to the head

821
00:36:18,560 --> 00:36:21,280
end so i don't see any gap but of course

822
00:36:21,280 --> 00:36:23,839
i can work with you or somebody to see

823
00:36:23,839 --> 00:36:25,119
what is required if something is

824
00:36:25,119 --> 00:36:26,400
required

825
00:36:26,400 --> 00:36:27,280
yes

826
00:36:27,280 --> 00:36:29,520
i think in a single pc case it is pretty

827
00:36:29,520 --> 00:36:31,440
clear that it's easy to do what i'm

828
00:36:31,440 --> 00:36:34,640
worried about is multi-pc case where you

829
00:36:34,640 --> 00:36:35,760
have

830
00:36:35,760 --> 00:36:38,560
different pcs maybe one pcs for srv6

831
00:36:38,560 --> 00:36:41,599
domain and another for sr mpls doing

832
00:36:41,599 --> 00:36:44,240
that there would be little tricky so

833
00:36:44,240 --> 00:36:46,320
that and might require some piece of

834
00:36:46,320 --> 00:36:47,680
extensions as well there is a working

835
00:36:47,680 --> 00:36:50,240
group draft in pc which talks about how

836
00:36:50,240 --> 00:36:53,119
to do stateful interdomain parts so

837
00:36:53,119 --> 00:36:54,880
there might be some changes required

838
00:36:54,880 --> 00:36:56,720
there as well so i think maybe we need

839
00:36:56,720 --> 00:36:58,720
to discuss this offline

840
00:36:58,720 --> 00:37:01,040
uh how to progress this thanks

841
00:37:01,040 --> 00:37:02,880
sure probably i will i will set up

842
00:37:02,880 --> 00:37:04,480
something with you and see what we can

843
00:37:04,480 --> 00:37:05,839
do

844
00:37:05,839 --> 00:37:09,040
what is required sure

845
00:37:09,040 --> 00:37:11,440
okay last last question uh robin please

846
00:37:11,440 --> 00:37:12,880
go ahead

847
00:37:12,880 --> 00:37:16,480
okay uh robin hobby uh my comments

848
00:37:16,480 --> 00:37:18,240
for this draft

849
00:37:18,240 --> 00:37:20,560
is that in fact this

850
00:37:20,560 --> 00:37:23,520
the interworking between the srv6 domain

851
00:37:23,520 --> 00:37:26,640
and the mcs domain

852
00:37:26,640 --> 00:37:29,280
there's the

853
00:37:29,280 --> 00:37:32,000
complex the data plane

854
00:37:32,000 --> 00:37:36,320
because we know the sr advantage of srv6

855
00:37:36,320 --> 00:37:37,440
used to

856
00:37:37,440 --> 00:37:39,119
transverse the

857
00:37:39,119 --> 00:37:43,040
domain based on the ipv6 reachability

858
00:37:43,040 --> 00:37:45,520
so i would like to encourage the

859
00:37:45,520 --> 00:37:47,839
operators to

860
00:37:47,839 --> 00:37:50,400
think about the requirement and also

861
00:37:50,400 --> 00:37:52,480
that's the say if we

862
00:37:52,480 --> 00:37:55,280
can't take this the simple way or we

863
00:37:55,280 --> 00:37:58,160
need to defend the complex the

864
00:37:58,160 --> 00:38:01,119
forwarding plan for the interworking

865
00:38:01,119 --> 00:38:04,160
yeah that's i wish that the operators

866
00:38:04,160 --> 00:38:05,040
can

867
00:38:05,040 --> 00:38:08,910
have more feedback on this one okay

868
00:38:08,910 --> 00:38:11,440
[Music]

869
00:38:11,440 --> 00:38:14,440
thanks

870
00:38:41,920 --> 00:38:46,119
enter please go ahead

871
00:39:08,880 --> 00:39:11,440
we're tight on time please start are you

872
00:39:11,440 --> 00:39:12,839
are

873
00:39:12,839 --> 00:39:12,960
muted you

874
00:39:12,960 --> 00:39:13,920
i you

875
00:39:14,960 --> 00:39:17,440
um okay uh hello everyone my name is

876
00:39:17,440 --> 00:39:20,000
jacob babaraj monika um i'm going to

877
00:39:20,000 --> 00:39:22,480
present the mpls extension header

878
00:39:22,480 --> 00:39:24,800
encoding that are defined in our draft

879
00:39:24,800 --> 00:39:27,440
on behalf of all our co-authors

880
00:39:27,440 --> 00:39:29,280
by the way this draft has been presented

881
00:39:29,280 --> 00:39:30,640
in yesterday's

882
00:39:30,640 --> 00:39:35,040
pals working group i can please do that

883
00:39:37,839 --> 00:39:41,320
next slide please

884
00:39:42,640 --> 00:39:45,119
yeah so uh just let's talk about all the

885
00:39:45,119 --> 00:39:46,640
abbreviations which are used in the

886
00:39:46,640 --> 00:39:48,800
presentation and the draft as well

887
00:39:48,800 --> 00:39:50,880
um i will leave it to the user to look

888
00:39:50,880 --> 00:39:53,280
at it uh okay so this is the agenda

889
00:39:53,280 --> 00:39:54,160
we're going to talk about in the

890
00:39:54,160 --> 00:39:55,680
presentation

891
00:39:55,680 --> 00:39:58,399
next slide please

892
00:39:58,800 --> 00:40:01,520
okay so uh there are there are many a

893
00:40:01,520 --> 00:40:03,760
new applications are coming up with the

894
00:40:03,760 --> 00:40:05,520
new requirements to carry an additional

895
00:40:05,520 --> 00:40:08,000
information in the uh mpls packet to

896
00:40:08,000 --> 00:40:10,880
influence the mkls forwarding

897
00:40:10,880 --> 00:40:11,760
or

898
00:40:11,760 --> 00:40:14,480
for the oem purposes so this requires an

899
00:40:14,480 --> 00:40:18,160
mpls packet to carry more spls or espn

900
00:40:18,160 --> 00:40:20,079
for application and this will increase

901
00:40:20,079 --> 00:40:22,800
the mpls stack that drastically

902
00:40:22,800 --> 00:40:24,400
to solve this problem

903
00:40:24,400 --> 00:40:26,880
we need a generic framework to build the

904
00:40:26,880 --> 00:40:28,240
embedded

905
00:40:28,240 --> 00:40:30,319
header format that would carry multiple

906
00:40:30,319 --> 00:40:33,040
loading stations in the mpl stack or

907
00:40:33,040 --> 00:40:36,640
after the bottom of the label stack

908
00:40:36,640 --> 00:40:39,839
the main objective of this trap are

909
00:40:39,839 --> 00:40:42,960
the mpls packet should be able to carry

910
00:40:42,960 --> 00:40:44,720
two types of instax forwarding

911
00:40:44,720 --> 00:40:46,880
instruction one the flag based

912
00:40:46,880 --> 00:40:48,720
instruction forwarding instruction that

913
00:40:48,720 --> 00:40:51,440
does not need any spray data

914
00:40:51,440 --> 00:40:53,680
next forwarding instruction that needs

915
00:40:53,680 --> 00:40:56,560
an accelerator

916
00:40:56,880 --> 00:41:00,240
the mpls packet to carry additional data

917
00:41:00,240 --> 00:41:02,319
after the bottom of the impeller stack

918
00:41:02,319 --> 00:41:04,640
and the third one is any combination of

919
00:41:04,640 --> 00:41:06,480
the scene stack and mpls bottom of the

920
00:41:06,480 --> 00:41:09,200
stack powering instruction could coexist

921
00:41:09,200 --> 00:41:12,000
in the same uh temperatures packet

922
00:41:12,000 --> 00:41:13,839
and the fourth one is the the new

923
00:41:13,839 --> 00:41:15,599
solution which we are bringing up should

924
00:41:15,599 --> 00:41:18,160
be always backward compatibility

925
00:41:18,160 --> 00:41:21,160
next

926
00:41:22,319 --> 00:41:24,319
uh before diving into the solution i

927
00:41:24,319 --> 00:41:26,000
want to let you know that we have done

928
00:41:26,000 --> 00:41:28,240
the extensive uh hardware analysis to

929
00:41:28,240 --> 00:41:30,880
come up with the implemented

930
00:41:30,880 --> 00:41:34,079
asset friendly and futuristic solution

931
00:41:34,079 --> 00:41:36,240
so the mpls extension header mainly

932
00:41:36,240 --> 00:41:37,920
consists of two parts

933
00:41:37,920 --> 00:41:40,640
uh mps extension header indicator so

934
00:41:40,640 --> 00:41:42,640
this indicates the presence of the uh

935
00:41:42,640 --> 00:41:44,880
mpls extension hunter in the packet and

936
00:41:44,880 --> 00:41:46,800
the second one is uh mpls extension

937
00:41:46,800 --> 00:41:48,800
header format the format in which the

938
00:41:48,800 --> 00:41:50,480
empire section should could be carried

939
00:41:50,480 --> 00:41:52,720
in the mpls packet

940
00:41:52,720 --> 00:41:55,520
next slide please

941
00:41:57,040 --> 00:41:59,520
let us see the different options of

942
00:41:59,520 --> 00:42:01,920
mpls extension header indicator option

943
00:42:01,920 --> 00:42:05,680
one is to extend the existing eli yield

944
00:42:05,680 --> 00:42:09,040
by repurposing the els tc and ptl fields

945
00:42:09,040 --> 00:42:10,880
to indicate the presence of the

946
00:42:10,880 --> 00:42:13,280
mpls extension header option two is to

947
00:42:13,280 --> 00:42:15,359
assign a new

948
00:42:15,359 --> 00:42:17,359
special purpose uh label to indicate the

949
00:42:17,359 --> 00:42:20,000
presence of the empire section behavior

950
00:42:20,000 --> 00:42:22,640
uh option three is to use a user

951
00:42:22,640 --> 00:42:24,880
configure label to indicate the presence

952
00:42:24,880 --> 00:42:27,359
of the repair section header uh each

953
00:42:27,359 --> 00:42:30,000
options has its own advantage and

954
00:42:30,000 --> 00:42:32,319
disadvantage uh we could choose the

955
00:42:32,319 --> 00:42:34,800
options uh based on our discussion on

956
00:42:34,800 --> 00:42:37,280
the ietf working group

957
00:42:37,280 --> 00:42:38,800
so here the fields can you see the

958
00:42:38,800 --> 00:42:40,079
fields here

959
00:42:40,079 --> 00:42:41,520
the first field is the

960
00:42:41,520 --> 00:42:43,599
stack by data link this is a three bit

961
00:42:43,599 --> 00:42:45,839
field which is used to indicate the

962
00:42:45,839 --> 00:42:48,240
total length of the instax extension

963
00:42:48,240 --> 00:42:49,520
header in

964
00:42:49,520 --> 00:42:51,760
the order of four bytes some of the

965
00:42:51,760 --> 00:42:53,839
parsers would require the length of the

966
00:42:53,839 --> 00:42:56,079
uh total length of the in-stack mpls

967
00:42:56,079 --> 00:42:59,599
extension for the easy parsing purposes

968
00:42:59,599 --> 00:43:02,319
the next next is the bit field that's

969
00:43:02,319 --> 00:43:04,160
the ipi field so this is actually in

970
00:43:04,160 --> 00:43:06,640
stack uh mps extension header presence

971
00:43:06,640 --> 00:43:08,000
indicator

972
00:43:08,000 --> 00:43:09,760
this is a bit field indicate the

973
00:43:09,760 --> 00:43:12,800
presence of the instax extension header

974
00:43:12,800 --> 00:43:16,240
and the next one is the bpi field so uh

975
00:43:16,240 --> 00:43:17,839
this is the bottom of the stack uh

976
00:43:17,839 --> 00:43:19,280
empire's extension header presence

977
00:43:19,280 --> 00:43:22,400
indicator a field a bit field indicates

978
00:43:22,400 --> 00:43:24,240
the presence of the uh bottom of the

979
00:43:24,240 --> 00:43:25,839
stack extension

980
00:43:25,839 --> 00:43:26,880
header

981
00:43:26,880 --> 00:43:29,520
so last field is the uh

982
00:43:29,520 --> 00:43:32,240
hpi this is a hub by hub

983
00:43:32,240 --> 00:43:34,240
bottom of stack mpls extension hydro

984
00:43:34,240 --> 00:43:36,240
indicating a bit field indicates the

985
00:43:36,240 --> 00:43:38,560
presence of a bottom of stack empire's

986
00:43:38,560 --> 00:43:40,319
extension indicator that needs to be

987
00:43:40,319 --> 00:43:43,200
processed by half

988
00:43:43,200 --> 00:43:46,160
on the next layer please

989
00:43:46,480 --> 00:43:49,599
this is the instax extension header and

990
00:43:49,599 --> 00:43:52,480
it's a data encoding format so as i told

991
00:43:52,480 --> 00:43:54,480
you before this has two parts one is the

992
00:43:54,480 --> 00:43:56,640
instax mpls section should indicator so

993
00:43:56,640 --> 00:43:59,440
here actually the two bit uh the

994
00:43:59,440 --> 00:44:02,880
ipa bit is used to indicate the presence

995
00:44:02,880 --> 00:44:05,839
of in stack impedance section header and

996
00:44:05,839 --> 00:44:08,800
the ion that is the in stack uh

997
00:44:08,800 --> 00:44:10,560
length is going to indicate the total

998
00:44:10,560 --> 00:44:13,119
length of the in stack uh mpls extension

999
00:44:13,119 --> 00:44:15,599
header length in the order of four bytes

1000
00:44:15,599 --> 00:44:17,920
so also like we could carry a multiple

1001
00:44:17,920 --> 00:44:19,520
uh such instruction in the same

1002
00:44:19,520 --> 00:44:21,119
indicator

1003
00:44:21,119 --> 00:44:22,839
so next one is the uh

1004
00:44:22,839 --> 00:44:25,440
instructors extension format which

1005
00:44:25,440 --> 00:44:26,720
contains uh

1006
00:44:26,720 --> 00:44:29,520
um opcode with the instax forwarding

1007
00:44:29,520 --> 00:44:32,079
instructional code this is of uh eight

1008
00:44:32,079 --> 00:44:33,359
bit uh

1009
00:44:33,359 --> 00:44:35,440
that defines the folding instruction

1010
00:44:35,440 --> 00:44:36,880
that needs to be executed when you

1011
00:44:36,880 --> 00:44:39,839
receive the packet and next this is the

1012
00:44:39,839 --> 00:44:42,160
instant data this is an ancillary data

1013
00:44:42,160 --> 00:44:44,480
which requires to be executed

1014
00:44:44,480 --> 00:44:46,480
which which requires to execute the

1015
00:44:46,480 --> 00:44:48,240
forwarding instruction

1016
00:44:48,240 --> 00:44:49,200
and they

1017
00:44:49,200 --> 00:44:51,599
uh what we defined here is that data

1018
00:44:51,599 --> 00:44:54,640
stacking bit in the case of uh instead

1019
00:44:54,640 --> 00:44:56,240
forwarding instruction requires more

1020
00:44:56,240 --> 00:44:58,640
than 20 bits of ancillary data then this

1021
00:44:58,640 --> 00:45:01,440
bit is used to extend and carry more

1022
00:45:01,440 --> 00:45:02,880
bits of

1023
00:45:02,880 --> 00:45:05,599
answering data if uh if the script is

1024
00:45:05,599 --> 00:45:07,760
set then this this will be the end of

1025
00:45:07,760 --> 00:45:10,079
the android data for that specific

1026
00:45:10,079 --> 00:45:11,760
forwarding instruction

1027
00:45:11,760 --> 00:45:14,480
the the the last one is the ebit so this

1028
00:45:14,480 --> 00:45:15,920
is the

1029
00:45:15,920 --> 00:45:17,520
end to end bit

1030
00:45:17,520 --> 00:45:19,359
this indicates whether the forwarding

1031
00:45:19,359 --> 00:45:21,680
instruction has has to be processed

1032
00:45:21,680 --> 00:45:24,480
or by hopper

1033
00:45:25,440 --> 00:45:27,839
let's go to the uh in stack forwarding

1034
00:45:27,839 --> 00:45:29,520
instruction and opcode assignments the

1035
00:45:29,520 --> 00:45:31,520
value here actually we have

1036
00:45:31,520 --> 00:45:34,160
up codes will be assigned

1037
00:45:34,160 --> 00:45:36,319
using the inr

1038
00:45:36,319 --> 00:45:38,240
registry so the value one we have

1039
00:45:38,240 --> 00:45:39,760
reserved it for you know to carry the

1040
00:45:39,760 --> 00:45:42,160
flag based uh forwarding instruction in

1041
00:45:42,160 --> 00:45:43,920
some cases the application does not need

1042
00:45:43,920 --> 00:45:45,119
any forwarding

1043
00:45:45,119 --> 00:45:47,440
uh instruction um that

1044
00:45:47,440 --> 00:45:50,240
does not need any actual data so this uh

1045
00:45:50,240 --> 00:45:52,240
this this field this sub code will be

1046
00:45:52,240 --> 00:45:55,280
used to carry the flag based uh upwards

1047
00:45:55,280 --> 00:45:57,920
and the value 2 is optionally used to

1048
00:45:57,920 --> 00:46:02,160
identify the uh byte offset of

1049
00:46:02,160 --> 00:46:05,119
boss data locate location

1050
00:46:05,119 --> 00:46:07,520
and value 3 to 254

1051
00:46:07,520 --> 00:46:10,240
must be assigned by anna and the last

1052
00:46:10,240 --> 00:46:13,119
value 25 is used to extend the upcode

1053
00:46:13,119 --> 00:46:15,280
range beyond 255.

1054
00:46:15,280 --> 00:46:17,760
the next like please

1055
00:46:17,760 --> 00:46:19,839
so this is the bottom of the stack uh

1056
00:46:19,839 --> 00:46:22,319
header encoding format so um as an

1057
00:46:22,319 --> 00:46:24,160
indicator so we have two bits to

1058
00:46:24,160 --> 00:46:25,599
indicate uh

1059
00:46:25,599 --> 00:46:28,640
one bit is to indicate the presence of

1060
00:46:28,640 --> 00:46:31,599
boss mpls extension header

1061
00:46:31,599 --> 00:46:32,880
so this is going to indicate the

1062
00:46:32,880 --> 00:46:34,960
presence of boss impedance extension

1063
00:46:34,960 --> 00:46:37,280
header and another bit is the hub by hop

1064
00:46:37,280 --> 00:46:39,359
boss extension header this field is used

1065
00:46:39,359 --> 00:46:41,200
to indicate the presence of boss

1066
00:46:41,200 --> 00:46:43,040
extension header that requires help by

1067
00:46:43,040 --> 00:46:46,000
your processing the second part is the

1068
00:46:46,000 --> 00:46:49,359
data format the first level is 0 0 1 0

1069
00:46:49,359 --> 00:46:52,319
so this is to avoid aliasing with ipv4

1070
00:46:52,319 --> 00:46:54,640
v6 and v6 packets

1071
00:46:54,640 --> 00:46:57,280
and next label is reserved and the next

1072
00:46:57,280 --> 00:46:59,839
update uh is the opcode instruction um

1073
00:46:59,839 --> 00:47:02,240
uh this value will be assigned by anna

1074
00:47:02,240 --> 00:47:04,720
um the next uh the next uh octet

1075
00:47:04,720 --> 00:47:07,440
indicates the length of the uh um boss

1076
00:47:07,440 --> 00:47:09,839
thanks for the data in order for bytes

1077
00:47:09,839 --> 00:47:10,800
um

1078
00:47:10,800 --> 00:47:12,880
the next update is used to indicate the

1079
00:47:12,880 --> 00:47:15,760
uh boss extension hydraulic uh currently

1080
00:47:15,760 --> 00:47:17,839
you have two uh two flags assigned one

1081
00:47:17,839 --> 00:47:20,319
is the uh next header uh presence uh

1082
00:47:20,319 --> 00:47:23,200
this indicates the another

1083
00:47:23,200 --> 00:47:25,680
boss mpl section header uh followed

1084
00:47:25,680 --> 00:47:28,000
following and uh

1085
00:47:28,000 --> 00:47:30,720
the hover help that indicates the uh

1086
00:47:30,720 --> 00:47:33,920
requirement of uh processing the uh um

1087
00:47:33,920 --> 00:47:37,680
the specific uh header uh by hop

1088
00:47:37,680 --> 00:47:39,200
next slide please i'm not going to

1089
00:47:39,200 --> 00:47:40,400
distract the next slide this is the

1090
00:47:40,400 --> 00:47:42,800
example actually

1091
00:47:42,800 --> 00:47:45,040
this is an example of how we can carry

1092
00:47:45,040 --> 00:47:46,480
the data

1093
00:47:46,480 --> 00:47:47,680
um

1094
00:47:47,680 --> 00:47:49,280
these are the examples uh next type

1095
00:47:49,280 --> 00:47:50,559
please

1096
00:47:50,559 --> 00:47:52,800
so this is the example this is another

1097
00:47:52,800 --> 00:47:55,119
option one and option two comparison uh

1098
00:47:55,119 --> 00:47:57,839
which uh we want to talk about

1099
00:47:57,839 --> 00:48:01,040
uh for the ietf users to discuss and

1100
00:48:01,040 --> 00:48:03,680
extract things

1101
00:48:04,160 --> 00:48:07,040
uh yeah um thank you uh welcome for uh

1102
00:48:07,040 --> 00:48:08,800
welcome uh review comments uh and

1103
00:48:08,800 --> 00:48:11,839
feedbacks especially on the uh mai label

1104
00:48:11,839 --> 00:48:15,359
options um i end up be requesting uh

1105
00:48:15,359 --> 00:48:17,760
mpls working grouping currently thank

1106
00:48:17,760 --> 00:48:20,760
you

1107
00:48:20,880 --> 00:48:23,200
okay thanks um i actually have a a

1108
00:48:23,200 --> 00:48:24,319
question

1109
00:48:24,319 --> 00:48:26,240
has this been discussed in the mpls

1110
00:48:26,240 --> 00:48:28,640
design team i thought uh a lot of this

1111
00:48:28,640 --> 00:48:30,640
feedback was going on there

1112
00:48:30,640 --> 00:48:33,119
um also i i actually sent i actually

1113
00:48:33,119 --> 00:48:35,520
sent an email to the uh to the authors

1114
00:48:35,520 --> 00:48:37,599
of this document several weeks ago and

1115
00:48:37,599 --> 00:48:39,359
didn't get a response

1116
00:48:39,359 --> 00:48:41,359
there are several documents that already

1117
00:48:41,359 --> 00:48:44,960
cover this albeit with different um

1118
00:48:44,960 --> 00:48:47,040
format and i'm wondering if those have

1119
00:48:47,040 --> 00:48:48,880
been looked at

1120
00:48:48,880 --> 00:48:51,680
um in terms of

1121
00:48:51,680 --> 00:48:52,880
you know making sure we don't have

1122
00:48:52,880 --> 00:48:54,480
multiple documents trying to solve the

1123
00:48:54,480 --> 00:48:56,000
same problem

1124
00:48:56,000 --> 00:48:57,040
thanks

1125
00:48:57,040 --> 00:49:00,079
uh yes jim actually yes uh we know that

1126
00:49:00,079 --> 00:49:00,960
like

1127
00:49:00,960 --> 00:49:02,640
um

1128
00:49:02,640 --> 00:49:04,559
this talk we in the appendix actually we

1129
00:49:04,559 --> 00:49:06,240
have given uh there are some some

1130
00:49:06,240 --> 00:49:08,079
documents available currently so the

1131
00:49:08,079 --> 00:49:09,520
upper next we have given the difference

1132
00:49:09,520 --> 00:49:10,480
between

1133
00:49:10,480 --> 00:49:12,319
their approach and our approach

1134
00:49:12,319 --> 00:49:16,240
uh to say how it is parser friendly

1135
00:49:16,240 --> 00:49:18,880
okay okay i don't have time to discuss

1136
00:49:18,880 --> 00:49:20,800
from this meeting so

1137
00:49:20,800 --> 00:49:22,319
yeah

1138
00:49:22,319 --> 00:49:25,119
okay chong li

1139
00:49:27,839 --> 00:49:31,599
so i have a very simple question that

1140
00:49:31,599 --> 00:49:33,440
what is the motivation

1141
00:49:33,440 --> 00:49:35,920
do we need to work on this because it

1142
00:49:35,920 --> 00:49:37,839
looks for me that

1143
00:49:37,839 --> 00:49:40,480
will reinvent something like

1144
00:49:40,480 --> 00:49:43,119
the things in ipv6

1145
00:49:43,119 --> 00:49:45,119
but it would take a long journey to get

1146
00:49:45,119 --> 00:49:46,240
that

1147
00:49:46,240 --> 00:49:48,960
when we get there we have all right

1148
00:49:48,960 --> 00:49:51,200
i can visit everywhere

1149
00:49:51,200 --> 00:49:52,079
so

1150
00:49:52,079 --> 00:49:53,119
i don't know

1151
00:49:53,119 --> 00:49:55,440
it seems it seems like we're making

1152
00:49:55,440 --> 00:49:57,119
appearance very

1153
00:49:57,119 --> 00:49:58,880
complicated

1154
00:49:58,880 --> 00:50:02,559
is it clear is it is it right

1155
00:50:04,240 --> 00:50:06,720
actually uh suddenly like today you know

1156
00:50:06,720 --> 00:50:08,400
like when you see the supplications

1157
00:50:08,400 --> 00:50:10,240
right uh a lot of applications are

1158
00:50:10,240 --> 00:50:13,040
coming up that different requirements

1159
00:50:13,040 --> 00:50:16,000
which needs an additional spl or espn

1160
00:50:16,000 --> 00:50:17,440
so that's going to increase the label

1161
00:50:17,440 --> 00:50:18,960
stack that's where you know like the

1162
00:50:18,960 --> 00:50:20,960
design team has been

1163
00:50:20,960 --> 00:50:22,400
designed to

1164
00:50:22,400 --> 00:50:24,559
uh tackle this problem in our one shot

1165
00:50:24,559 --> 00:50:27,119
so that's why we are trying to do that

1166
00:50:27,119 --> 00:50:30,240
yeah i get it like we have some issues

1167
00:50:30,240 --> 00:50:33,839
in amperes but

1168
00:50:34,400 --> 00:50:36,240
where is the value i don't get it

1169
00:50:36,240 --> 00:50:38,079
because

1170
00:50:38,079 --> 00:50:41,040
what we want to get is all about ipv6

1171
00:50:41,040 --> 00:50:43,200
capability so

1172
00:50:43,200 --> 00:50:46,480
why not just go there

1173
00:50:46,559 --> 00:50:48,240
yeah let's take that discussion to the

1174
00:50:48,240 --> 00:50:49,920
mailing list because we are short on

1175
00:50:49,920 --> 00:50:51,680
time and there's a few people on the

1176
00:50:51,680 --> 00:50:53,119
queue so

1177
00:50:53,119 --> 00:50:56,240
yep rakesh

1178
00:50:58,960 --> 00:51:01,920
so i two comments uh cheng um a good

1179
00:51:01,920 --> 00:51:04,160
comment uh yeah we hope to see the

1180
00:51:04,160 --> 00:51:06,079
service six um

1181
00:51:06,079 --> 00:51:08,240
deployed everywhere very soon as well

1182
00:51:08,240 --> 00:51:10,960
but meantime mpls network we do have a

1183
00:51:10,960 --> 00:51:14,079
iom draft for mpls in empire's working

1184
00:51:14,079 --> 00:51:16,800
group and iom is one application that's

1185
00:51:16,800 --> 00:51:20,000
very appealing to the operators for mpls

1186
00:51:20,000 --> 00:51:21,920
and the second comment i have is that

1187
00:51:21,920 --> 00:51:24,480
jim we have received your email

1188
00:51:24,480 --> 00:51:26,240
we are looking at the drafts that

1189
00:51:26,240 --> 00:51:27,920
mentioned and we will get back to you

1190
00:51:27,920 --> 00:51:30,559
soon thank you great thanks rakesh

1191
00:51:30,559 --> 00:51:33,119
uh greg

1192
00:51:34,720 --> 00:51:38,720
thank you jim for uh uh reference to um

1193
00:51:38,720 --> 00:51:42,400
mpls open design team uh it's a joint

1194
00:51:42,400 --> 00:51:46,079
effort of uh mpls uh pals

1195
00:51:46,079 --> 00:51:48,960
and that networking group i and i think

1196
00:51:48,960 --> 00:51:52,400
that spring uh because of uh sarah

1197
00:51:52,400 --> 00:51:53,440
um

1198
00:51:53,440 --> 00:51:54,800
mpls

1199
00:51:54,800 --> 00:51:58,319
um everybody all experts are um

1200
00:51:58,319 --> 00:52:01,119
invited effectively to the open uh

1201
00:52:01,119 --> 00:52:05,200
weekly design team uh discussions we

1202
00:52:05,200 --> 00:52:09,359
discuss uh other proposals and use cases

1203
00:52:09,359 --> 00:52:11,520
are documented in the draft

1204
00:52:11,520 --> 00:52:14,400
as well separately so the motivation

1205
00:52:14,400 --> 00:52:16,559
uh being discussed as well as the

1206
00:52:16,559 --> 00:52:19,680
requirements for the solution so there

1207
00:52:19,680 --> 00:52:23,200
is a work uh that's been discussed uh

1208
00:52:23,200 --> 00:52:25,680
and reported on uh yesterday in the

1209
00:52:25,680 --> 00:52:26,720
meeting

1210
00:52:26,720 --> 00:52:29,440
and uh so i

1211
00:52:29,440 --> 00:52:31,599
appreciate their presentation but i

1212
00:52:31,599 --> 00:52:33,040
think that

1213
00:52:33,040 --> 00:52:35,200
there are a lot of more discussions uh

1214
00:52:35,200 --> 00:52:36,880
that needs to be done before

1215
00:52:36,880 --> 00:52:39,440
consideration of working group adoption

1216
00:52:39,440 --> 00:52:40,800
thank you

1217
00:52:40,800 --> 00:52:43,280
thanks greg um lastly uh jeff please go

1218
00:52:43,280 --> 00:52:44,160
ahead

1219
00:52:44,160 --> 00:52:47,119
you're you're the first one in the room

1220
00:52:47,119 --> 00:52:49,599
justin sure so keeping aside whether

1221
00:52:49,599 --> 00:52:52,400
it's metadata should be in data control

1222
00:52:52,400 --> 00:52:53,520
plane

1223
00:52:53,520 --> 00:52:57,680
uh ipv6 over srn pls is deployed at huge

1224
00:52:57,680 --> 00:53:00,640
scale it is supported by most vendors

1225
00:53:00,640 --> 00:53:03,920
and ignoring it just strong

1226
00:53:03,920 --> 00:53:05,839
it's a good technology it's working it's

1227
00:53:05,839 --> 00:53:08,079
deployed so please

1228
00:53:08,079 --> 00:53:10,000
just keep in mind that

1229
00:53:10,000 --> 00:53:12,839
world is not about srv6

1230
00:53:12,839 --> 00:53:17,119
necessarily ipv6 servers are in pls its

1231
00:53:17,119 --> 00:53:18,079
current

1232
00:53:18,079 --> 00:53:20,880
working technology so

1233
00:53:20,880 --> 00:53:24,440
just keep it in mind

1234
00:53:41,119 --> 00:53:43,839
can you hear me

1235
00:53:45,040 --> 00:53:47,200
yes we can please go ahead

1236
00:53:47,200 --> 00:53:50,400
well hi this is bihar from hs3 and air

1237
00:53:50,400 --> 00:53:52,079
president is draft on behalf of the

1238
00:53:52,079 --> 00:53:53,359
authors

1239
00:53:53,359 --> 00:53:57,359
this job is about spft in so sex network

1240
00:53:57,359 --> 00:54:00,240
next slide please

1241
00:54:01,520 --> 00:54:04,400
obd and sbfd could be used to monitor

1242
00:54:04,400 --> 00:54:06,160
passes between nodes

1243
00:54:06,160 --> 00:54:08,800
spft is suitable for large scale network

1244
00:54:08,800 --> 00:54:11,920
and supporting verification on reflector

1245
00:54:11,920 --> 00:54:15,200
vfd and sbrp could be used to monitor

1246
00:54:15,200 --> 00:54:18,960
sr6 policy essentially associated with a

1247
00:54:18,960 --> 00:54:21,760
second list to detect the continuity of

1248
00:54:21,760 --> 00:54:23,040
7 list

1249
00:54:23,040 --> 00:54:25,839
next slide

1250
00:54:31,680 --> 00:54:34,240
when you use spfd to monitor as a six

1251
00:54:34,240 --> 00:54:37,040
policy the control package is forwarded

1252
00:54:37,040 --> 00:54:39,359
to a reflector according to its

1253
00:54:39,359 --> 00:54:41,520
associated signal list

1254
00:54:41,520 --> 00:54:43,599
and the response package is usually

1255
00:54:43,599 --> 00:54:46,160
forwarded to the initiator through epi

1256
00:54:46,160 --> 00:54:47,119
routing

1257
00:54:47,119 --> 00:54:49,200
so forward and reverse passes of the

1258
00:54:49,200 --> 00:54:50,839
package are likely

1259
00:54:50,839 --> 00:54:53,520
inconsistent action in a figure

1260
00:54:53,520 --> 00:54:56,799
the freely unpassed dea will cause a

1261
00:54:56,799 --> 00:54:59,520
false positive issue a consistency

1262
00:54:59,520 --> 00:55:02,079
overwatch and reverse pass should be

1263
00:55:02,079 --> 00:55:03,359
guaranteed

1264
00:55:03,359 --> 00:55:06,079
in order to meet this requirement and

1265
00:55:06,079 --> 00:55:09,760
spell d could be widely deployed in srv6

1266
00:55:09,760 --> 00:55:12,160
network this dropped describe a whole

1267
00:55:12,160 --> 00:55:15,280
sblp to achieve a bidirectional pass

1268
00:55:15,280 --> 00:55:17,200
consistency or package

1269
00:55:17,200 --> 00:55:19,839
when launching sr6 policy next slide

1270
00:55:19,839 --> 00:55:22,078
please

1271
00:55:27,119 --> 00:55:28,170
oh next slide

1272
00:55:28,170 --> 00:55:31,329
[Music]

1273
00:55:32,400 --> 00:55:33,359
okay

1274
00:55:33,359 --> 00:55:35,520
and the method is based on the past

1275
00:55:35,520 --> 00:55:39,200
segment sr6 path segment is defined to

1276
00:55:39,200 --> 00:55:42,799
identify a six path such as completed

1277
00:55:42,799 --> 00:55:44,960
path or segment list

1278
00:55:44,960 --> 00:55:47,119
ss6 part segments can be used to

1279
00:55:47,119 --> 00:55:50,960
correlate to all the uni-directional is

1280
00:55:50,960 --> 00:55:53,760
sex passes at both end note

1281
00:55:53,760 --> 00:55:56,960
another draft of itfs policy per segment

1282
00:55:56,960 --> 00:56:01,040
proposes an attention to bgpsr policy

1283
00:56:01,040 --> 00:56:03,440
to distribute as a policies with

1284
00:56:03,440 --> 00:56:05,440
carrying pass segment and

1285
00:56:05,440 --> 00:56:07,680
bi-directional pass information

1286
00:56:07,680 --> 00:56:10,079
through this extension when distributing

1287
00:56:10,079 --> 00:56:13,680
sys policy to the head end you must pass

1288
00:56:13,680 --> 00:56:16,400
information and per segment of segment

1289
00:56:16,400 --> 00:56:18,559
leads could be carried together

1290
00:56:18,559 --> 00:56:22,400
in this way node a and d in the instance

1291
00:56:22,400 --> 00:56:24,160
have two part segments which are

1292
00:56:24,160 --> 00:56:26,880
associated with bi-directional paths

1293
00:56:26,880 --> 00:56:30,200
next slide

1294
00:56:33,920 --> 00:56:36,880
so the hidden nodes in both section need

1295
00:56:36,880 --> 00:56:39,599
to create a table to map path segment

1296
00:56:39,599 --> 00:56:41,680
and reverse path segment to local

1297
00:56:41,680 --> 00:56:43,119
segment list

1298
00:56:43,119 --> 00:56:45,280
through this mapping table the headline

1299
00:56:45,280 --> 00:56:48,079
node has ability to get the second list

1300
00:56:48,079 --> 00:56:50,799
by pass segment or reverse pass segment

1301
00:56:50,799 --> 00:56:53,359
next slide

1302
00:56:55,119 --> 00:56:58,000
the procedure for the spft module

1303
00:56:58,000 --> 00:57:01,040
example in this slide is a node a as

1304
00:57:01,040 --> 00:57:03,839
initiator which has a spare decision

1305
00:57:03,839 --> 00:57:06,480
associated with segment list one

1306
00:57:06,480 --> 00:57:09,680
first the sh is encapsulated with second

1307
00:57:09,680 --> 00:57:12,559
list one to the control packet

1308
00:57:12,559 --> 00:57:14,799
if it has par segments then

1309
00:57:14,799 --> 00:57:16,880
encapsulating the per segment in yellow

1310
00:57:16,880 --> 00:57:18,799
in sh and

1311
00:57:18,799 --> 00:57:20,799
cp flag

1312
00:57:20,799 --> 00:57:22,559
then the control packet will reach

1313
00:57:22,559 --> 00:57:24,880
reflector with the path segment of

1314
00:57:24,880 --> 00:57:27,839
forward pass a better way jobs use as

1315
00:57:27,839 --> 00:57:30,160
per the icos example like control

1316
00:57:30,160 --> 00:57:32,319
package and then we will fixate

1317
00:57:32,319 --> 00:57:34,880
next slide

1318
00:57:36,400 --> 00:57:39,680
for reflector node d the spft model need

1319
00:57:39,680 --> 00:57:43,200
to detect flag osih if a p flag is a

1320
00:57:43,200 --> 00:57:46,160
site extract the path segment of forward

1321
00:57:46,160 --> 00:57:48,160
pass from sh

1322
00:57:48,160 --> 00:57:50,880
then get a second list of all response

1323
00:57:50,880 --> 00:57:52,960
control package by the forward pass

1324
00:57:52,960 --> 00:57:55,920
segment and the resulting second list

1325
00:57:55,920 --> 00:57:58,640
will be used to encapsulate response

1326
00:57:58,640 --> 00:58:00,240
control package

1327
00:58:00,240 --> 00:58:03,119
if p flag is not signed response packet

1328
00:58:03,119 --> 00:58:06,160
will be forwarded by ipus6 routing

1329
00:58:06,160 --> 00:58:08,799
so use the pass segment and forward and

1330
00:58:08,799 --> 00:58:12,319
reverse pass was spft are guaranteed to

1331
00:58:12,319 --> 00:58:13,920
be consistent

1332
00:58:13,920 --> 00:58:16,480
next slide

1333
00:58:17,280 --> 00:58:19,040
okay that's all

1334
00:58:19,040 --> 00:58:23,160
questionable comments will come

1335
00:58:28,319 --> 00:58:29,680
okay thank you there's nothing on the

1336
00:58:29,680 --> 00:58:32,799
queue so uh joel can we get the next

1337
00:58:32,799 --> 00:58:36,440
presentation up

1338
00:58:58,960 --> 00:59:02,400
trouble finding the deck again

1339
00:59:03,200 --> 00:59:05,839
just a moment

1340
00:59:10,799 --> 00:59:15,400
end to end there it is

1341
00:59:32,720 --> 00:59:34,880
robin up to you you have 10 minutes

1342
00:59:34,880 --> 00:59:36,960
sharp

1343
00:59:36,960 --> 00:59:39,280
okay

1344
00:59:42,640 --> 00:59:44,319
okay

1345
00:59:44,319 --> 00:59:46,880
uh they say you can be i will present

1346
00:59:46,880 --> 00:59:48,640
the sr

1347
00:59:48,640 --> 00:59:50,720
uh for the ietf

1348
00:59:50,720 --> 00:59:52,079
and to end the

1349
00:59:52,079 --> 00:59:54,640
network under to end the itf network

1350
00:59:54,640 --> 00:59:57,760
slicing on behalf of the coursers

1351
00:59:57,760 --> 01:00:00,079
okay here are some this background

1352
01:00:00,079 --> 01:00:01,440
introduction

1353
01:00:01,440 --> 01:00:04,240
first we are familiar with the network

1354
01:00:04,240 --> 01:00:07,359
slicing as the network sizing can be

1355
01:00:07,359 --> 01:00:09,440
used to meet the connectivity and

1356
01:00:09,440 --> 01:00:11,839
performance requirement of a different

1357
01:00:11,839 --> 01:00:16,079
service or customer in a shared network

1358
01:00:16,079 --> 01:00:17,760
and this is the

1359
01:00:17,760 --> 01:00:20,319
draft ietl for

1360
01:00:20,319 --> 01:00:22,079
this

1361
01:00:22,079 --> 01:00:24,319
ietl network slicing

1362
01:00:24,319 --> 01:00:26,720
describes the concept and the general

1363
01:00:26,720 --> 01:00:31,200
framework of ietf or network slides

1364
01:00:31,200 --> 01:00:34,079
that is itr network slides can be

1365
01:00:34,079 --> 01:00:37,359
realized by mapping one or a group of

1366
01:00:37,359 --> 01:00:40,640
connectivity constructed to an

1367
01:00:40,640 --> 01:00:43,200
rp rpm means

1368
01:00:43,200 --> 01:00:45,920
network resource partition

1369
01:00:45,920 --> 01:00:48,559
uh in fact before that one there's the

1370
01:00:48,559 --> 01:00:51,520
one draft about the framework of the

1371
01:00:51,520 --> 01:00:56,720
enhanced vpn so in here there's a there

1372
01:00:56,720 --> 01:01:00,640
the return concept is proposed

1373
01:01:00,640 --> 01:01:04,799
to mean the underly network

1374
01:01:04,799 --> 01:01:07,440
network slice construct

1375
01:01:07,440 --> 01:01:10,079
but it is not only confined to the

1376
01:01:10,079 --> 01:01:11,920
network slice

1377
01:01:11,920 --> 01:01:16,319
so nrp is an instantiation of retune in

1378
01:01:16,319 --> 01:01:19,920
the scenario of network slicing

1379
01:01:19,920 --> 01:01:23,280
okay and third one this end to end

1380
01:01:23,280 --> 01:01:26,480
network slides based by multiple network

1381
01:01:26,480 --> 01:01:27,680
domain

1382
01:01:27,680 --> 01:01:30,640
so this means the network slides

1383
01:01:30,640 --> 01:01:31,520
will

1384
01:01:31,520 --> 01:01:34,400
transverse multiple network domains and

1385
01:01:34,400 --> 01:01:37,280
in each domain ietr network slice

1386
01:01:37,280 --> 01:01:39,920
traffic needs to be mapped to a local

1387
01:01:39,920 --> 01:01:42,559
network resource partition so this

1388
01:01:42,559 --> 01:01:45,680
document describes the segment routine

1389
01:01:45,680 --> 01:01:48,960
extension to support the end-to-end ietf

1390
01:01:48,960 --> 01:01:50,640
network slice

1391
01:01:50,640 --> 01:01:53,839
okay next page

1392
01:01:56,559 --> 01:01:59,520
okay so here this is just the glass of

1393
01:01:59,520 --> 01:02:02,319
the ietf network slice framework and the

1394
01:02:02,319 --> 01:02:04,640
vpn plus realization

1395
01:02:04,640 --> 01:02:07,520
so here we can see there the uh general

1396
01:02:07,520 --> 01:02:09,440
concept and the uh

1397
01:02:09,440 --> 01:02:11,839
framework and also the vpn plus

1398
01:02:11,839 --> 01:02:14,559
framework and the end to end

1399
01:02:14,559 --> 01:02:16,400
5g e2e

1400
01:02:16,400 --> 01:02:18,480
network slides

1401
01:02:18,480 --> 01:02:21,440
and this after this the framework in the

1402
01:02:21,440 --> 01:02:24,559
past years we defined the sr based

1403
01:02:24,559 --> 01:02:27,440
network slice realization

1404
01:02:27,440 --> 01:02:29,920
uh the most important to use the

1405
01:02:29,920 --> 01:02:32,319
resource we are segmented

1406
01:02:32,319 --> 01:02:34,960
for the network of slicing and indicate

1407
01:02:34,960 --> 01:02:37,119
the resource partition

1408
01:02:37,119 --> 01:02:38,160
uh and

1409
01:02:38,160 --> 01:02:39,280
the

1410
01:02:39,280 --> 01:02:41,920
then they are later the scalability user

1411
01:02:41,920 --> 01:02:44,720
challenge so the scalable ietf network

1412
01:02:44,720 --> 01:02:47,760
slice realization solution has been

1413
01:02:47,760 --> 01:02:49,039
proposed

1414
01:02:49,039 --> 01:02:52,480
the major concept for improving the

1415
01:02:52,480 --> 01:02:55,760
scalability to decoupling the

1416
01:02:55,760 --> 01:02:58,799
topology and the resource

1417
01:02:58,799 --> 01:03:00,079
so

1418
01:03:00,079 --> 01:03:01,680
that the

1419
01:03:01,680 --> 01:03:04,319
network resource partition id

1420
01:03:04,319 --> 01:03:06,960
can be carried in the data plane to

1421
01:03:06,960 --> 01:03:08,640
indicate the

1422
01:03:08,640 --> 01:03:12,240
specific resource for the specific

1423
01:03:12,240 --> 01:03:15,440
network slice instance

1424
01:03:15,440 --> 01:03:17,839
uh according to this method the duty

1425
01:03:17,839 --> 01:03:20,400
coupling in the network topology and the

1426
01:03:20,400 --> 01:03:22,960
resource to improve the

1427
01:03:22,960 --> 01:03:25,119
uh scalability

1428
01:03:25,119 --> 01:03:28,079
uh that is uh one month ago

1429
01:03:28,079 --> 01:03:32,880
also that's the ipv6 encapsulation for

1430
01:03:32,880 --> 01:03:33,680
the

1431
01:03:33,680 --> 01:03:36,559
networker resource partition id in the

1432
01:03:36,559 --> 01:03:38,240
data plane

1433
01:03:38,240 --> 01:03:41,200
that dropped has been adopted by the

1434
01:03:41,200 --> 01:03:42,880
working group

1435
01:03:42,880 --> 01:03:44,559
a year 6 map

1436
01:03:44,559 --> 01:03:46,799
so now that's we talked about this end

1437
01:03:46,799 --> 01:03:50,480
to end itm network slice realization so

1438
01:03:50,480 --> 01:03:52,960
this means how to implement the inter

1439
01:03:52,960 --> 01:03:56,160
domain atm network slicing so this is

1440
01:03:56,160 --> 01:04:00,399
the draft okay next page

1441
01:04:00,480 --> 01:04:04,480
okay so here the concept is uh

1442
01:04:04,480 --> 01:04:07,359
simple that's the to use this binding

1443
01:04:07,359 --> 01:04:08,400
segment

1444
01:04:08,400 --> 01:04:11,520
back here this introduce a special

1445
01:04:11,520 --> 01:04:13,119
fighting segment

1446
01:04:13,119 --> 01:04:15,039
called the rp

1447
01:04:15,039 --> 01:04:17,280
by the binding segment

1448
01:04:17,280 --> 01:04:18,640
this segment

1449
01:04:18,640 --> 01:04:23,440
is a special bl bs id used by the domain

1450
01:04:23,440 --> 01:04:26,400
nodes to steer traffic into

1451
01:04:26,400 --> 01:04:29,760
a local network resource partition

1452
01:04:29,760 --> 01:04:32,079
so and this the network resource

1453
01:04:32,079 --> 01:04:36,000
partition psid can be instantiated with

1454
01:04:36,000 --> 01:04:40,319
srv6 or srnpr's data plane so here

1455
01:04:40,319 --> 01:04:43,039
there's a simple the euler solution so

1456
01:04:43,039 --> 01:04:45,680
we can see there's the ingress of this

1457
01:04:45,680 --> 01:04:46,640
the

1458
01:04:46,640 --> 01:04:49,039
internal mean

1459
01:04:49,039 --> 01:04:50,559
sr path

1460
01:04:50,559 --> 01:04:53,200
there's this the three

1461
01:04:53,200 --> 01:04:56,000
binding side for the network resource

1462
01:04:56,000 --> 01:04:57,280
partition

1463
01:04:57,280 --> 01:05:00,240
and so that's for each

1464
01:05:00,240 --> 01:05:02,400
edge nodes for the

1465
01:05:02,400 --> 01:05:03,839
each domain

1466
01:05:03,839 --> 01:05:06,079
will based on the

1467
01:05:06,079 --> 01:05:07,280
network

1468
01:05:07,280 --> 01:05:11,039
rp binding sid to secure the traffic

1469
01:05:11,039 --> 01:05:12,640
into a local

1470
01:05:12,640 --> 01:05:17,119
nrp so this is just the sr for the end

1471
01:05:17,119 --> 01:05:20,880
to end ietf network slicing okay next

1472
01:05:20,880 --> 01:05:23,839
page

1473
01:05:25,039 --> 01:05:28,240
okay in fact uh before this uh

1474
01:05:28,240 --> 01:05:30,240
version so that's the way proposed

1475
01:05:30,240 --> 01:05:31,680
there's a four

1476
01:05:31,680 --> 01:05:32,960
uh

1477
01:05:32,960 --> 01:05:37,599
four types as uh nrp binding segments

1478
01:05:37,599 --> 01:05:40,799
but later this version of the draft we

1479
01:05:40,799 --> 01:05:43,760
divided the nrp binding segment

1480
01:05:43,760 --> 01:05:45,599
into two types

1481
01:05:45,599 --> 01:05:49,920
that means the rpt binding site rpb by

1482
01:05:49,920 --> 01:05:51,280
the inside

1483
01:05:51,280 --> 01:05:54,799
the rpb by the inside

1484
01:05:54,799 --> 01:05:56,960
is the tools there are the traffic to

1485
01:05:56,960 --> 01:06:00,799
our sr policy associated with the

1486
01:06:00,799 --> 01:06:02,400
local rp

1487
01:06:02,400 --> 01:06:04,720
our rpb

1488
01:06:04,720 --> 01:06:08,079
binding site is noted to steer traffic

1489
01:06:08,079 --> 01:06:11,599
to our sr policy is adjusted to steer

1490
01:06:11,599 --> 01:06:14,720
traffic to follow the shortest path

1491
01:06:14,720 --> 01:06:18,559
within a local domain rp

1492
01:06:18,559 --> 01:06:22,480
and for the rpt binding side there's the

1493
01:06:22,480 --> 01:06:24,319
two variant

1494
01:06:24,319 --> 01:06:27,440
the first variant is based on the

1495
01:06:27,440 --> 01:06:31,920
src the network slicing realization so

1496
01:06:31,920 --> 01:06:34,960
that's you use one uh uh this binding

1497
01:06:34,960 --> 01:06:38,319
side to subversify the mapping of the

1498
01:06:38,319 --> 01:06:41,680
traffic to a sr policy which consists of

1499
01:06:41,680 --> 01:06:44,640
a list of resource aware segments

1500
01:06:44,640 --> 01:06:48,079
associated with the local nrp

1501
01:06:48,079 --> 01:06:52,319
okay that means the binding side to uh

1502
01:06:52,319 --> 01:06:55,839
to indicate sr policy which is

1503
01:06:55,839 --> 01:06:57,760
composed of the

1504
01:06:57,760 --> 01:07:00,480
resource aware segments

1505
01:07:00,480 --> 01:07:05,119
the second variant used to use

1506
01:07:05,280 --> 01:07:07,680
one type of rp

1507
01:07:07,680 --> 01:07:10,400
binding site to specify the mapping of

1508
01:07:10,400 --> 01:07:14,160
traffic to sr policy which is bound to a

1509
01:07:14,160 --> 01:07:18,400
local nrp id so this means this is uh

1510
01:07:18,400 --> 01:07:21,440
indicator sr policy at the same time

1511
01:07:21,440 --> 01:07:23,920
there's a an rpid

1512
01:07:23,920 --> 01:07:28,640
is bound to this sr policy okay uh and

1513
01:07:28,640 --> 01:07:30,400
also for the nrp

1514
01:07:30,400 --> 01:07:31,920
sorry

1515
01:07:31,920 --> 01:07:33,200
uh rp

1516
01:07:33,200 --> 01:07:35,760
be by the inside there's also there's

1517
01:07:35,760 --> 01:07:37,359
the two variant

1518
01:07:37,359 --> 01:07:40,000
the first variant that's this binding

1519
01:07:40,000 --> 01:07:43,359
side is directly to indicate a

1520
01:07:43,359 --> 01:07:47,839
rp local nrp at the edge node so that's

1521
01:07:47,839 --> 01:07:50,720
there's one binding slide there's one

1522
01:07:50,720 --> 01:07:53,680
local nrp then there's uh

1523
01:07:53,680 --> 01:07:57,359
an rpb binding inside so that's the

1524
01:07:57,359 --> 01:08:00,160
first variant but we also have the

1525
01:08:00,160 --> 01:08:02,880
second variant so that means

1526
01:08:02,880 --> 01:08:05,680
only there is a binding site to indicate

1527
01:08:05,680 --> 01:08:06,640
the

1528
01:08:06,640 --> 01:08:09,119
indicator there's the

1529
01:08:09,119 --> 01:08:12,000
local nrp to be

1530
01:08:12,000 --> 01:08:13,039
bound

1531
01:08:13,039 --> 01:08:15,839
as the edge node of the domain

1532
01:08:15,839 --> 01:08:17,520
but the

1533
01:08:17,520 --> 01:08:19,120
but the

1534
01:08:19,120 --> 01:08:20,238
nrp

1535
01:08:20,238 --> 01:08:22,799
will be specified

1536
01:08:22,799 --> 01:08:25,439
in the ingress of the

1537
01:08:25,439 --> 01:08:26,880
sr path

1538
01:08:26,880 --> 01:08:30,880
that means the sr the

1539
01:08:30,880 --> 01:08:32,880
uh the rp

1540
01:08:32,880 --> 01:08:34,479
is the

1541
01:08:34,479 --> 01:08:37,279
encapsulation of the ingress

1542
01:08:37,279 --> 01:08:38,799
of the sr

1543
01:08:38,799 --> 01:08:41,439
path sr policy

1544
01:08:41,439 --> 01:08:44,319
okay so here this is the srv6 for the

1545
01:08:44,319 --> 01:08:47,359
nrp binding side so here there we have

1546
01:08:47,359 --> 01:08:48,640
this the

1547
01:08:48,640 --> 01:08:52,719
srv6 the rpt by the inside so that's the

1548
01:08:52,719 --> 01:08:54,238
rc

1549
01:08:54,238 --> 01:08:56,560
89 86

1550
01:08:56,560 --> 01:08:58,719
the under b6

1551
01:08:58,719 --> 01:08:59,920
in caps

1552
01:08:59,920 --> 01:09:01,439
this

1553
01:09:01,439 --> 01:09:04,560
this behavior can be reused

1554
01:09:04,560 --> 01:09:07,359
under this document defined the

1555
01:09:07,359 --> 01:09:08,960
under dot

1556
01:09:08,960 --> 01:09:10,719
b6 nrp

1557
01:09:10,719 --> 01:09:13,759
dot in caps this another behavior for

1558
01:09:13,759 --> 01:09:15,600
the second variant

1559
01:09:15,600 --> 01:09:18,560
and for the be right inside we also have

1560
01:09:18,560 --> 01:09:21,679
the two variant and also the tool and

1561
01:09:21,679 --> 01:09:25,279
the behavior to be defined okay next

1562
01:09:25,279 --> 01:09:27,120
page

1563
01:09:27,120 --> 01:09:29,359
okay so this similarly so this is for

1564
01:09:29,359 --> 01:09:32,600
srpis there's also this the different

1565
01:09:32,600 --> 01:09:35,839
instantiation for this the rp binding

1566
01:09:35,839 --> 01:09:36,640
side

1567
01:09:36,640 --> 01:09:38,000
okay

1568
01:09:38,000 --> 01:09:40,399
last page

1569
01:09:40,399 --> 01:09:43,120
and this is the summary of the updates

1570
01:09:43,120 --> 01:09:45,679
so the first align the terminology with

1571
01:09:45,679 --> 01:09:48,319
itr network slice and the vpn plus

1572
01:09:48,319 --> 01:09:51,359
dropped that means that we adopted the

1573
01:09:51,359 --> 01:09:54,080
rp as a terminology

1574
01:09:54,080 --> 01:09:57,520
to replace the vtn a second we defined

1575
01:09:57,520 --> 01:10:00,480
the two types rp binding segment

1576
01:10:00,480 --> 01:10:03,199
for the srt and the b

1577
01:10:03,199 --> 01:10:06,960
uh and and also this editorial change

1578
01:10:06,960 --> 01:10:09,920
okay that's the page

1579
01:10:13,840 --> 01:10:17,360
okay we in fact we updated the draft

1580
01:10:17,360 --> 01:10:19,600
yesterday so that's the comments and

1581
01:10:19,600 --> 01:10:22,320
feedback are welcome and we will go on

1582
01:10:22,320 --> 01:10:27,199
to refine this draft accordingly okay

1583
01:10:28,320 --> 01:10:31,840
thanks robin uh linda

1584
01:10:34,000 --> 01:10:36,640
thank you robin for the comprehensive

1585
01:10:36,640 --> 01:10:38,320
illustration of all the drafts you have

1586
01:10:38,320 --> 01:10:41,199
for the vpn plus i just have a one

1587
01:10:41,199 --> 01:10:45,440
question like for 5g we really need

1588
01:10:45,440 --> 01:10:48,159
something to have different paths based

1589
01:10:48,159 --> 01:10:50,800
on the source address so is any of those

1590
01:10:50,800 --> 01:10:52,400
drafts i didn't get chance to read all

1591
01:10:52,400 --> 01:10:56,320
of them any of the draft describe that

1592
01:10:57,280 --> 01:11:00,239
uh in fact this is the

1593
01:11:00,239 --> 01:11:04,320
this job is regarding uh user related to

1594
01:11:04,320 --> 01:11:07,120
the ietf network slicing that means the

1595
01:11:07,120 --> 01:11:09,360
transport network

1596
01:11:09,360 --> 01:11:12,400
but this is not for the 5g and to end

1597
01:11:12,400 --> 01:11:16,000
the network slice realization

1598
01:11:16,000 --> 01:11:18,880
this is even for transport for example

1599
01:11:18,880 --> 01:11:21,600
the traffic come to upf right so based

1600
01:11:21,600 --> 01:11:24,320
on the ue for example in the

1601
01:11:24,320 --> 01:11:26,640
compute aware not working buff when

1602
01:11:26,640 --> 01:11:28,960
different ue like maybe hand over to

1603
01:11:28,960 --> 01:11:31,360
different cell tower anchored to a

1604
01:11:31,360 --> 01:11:33,280
different upf he would like to use a

1605
01:11:33,280 --> 01:11:36,000
different slice than the other ues which

1606
01:11:36,000 --> 01:11:38,640
were there before so

1607
01:11:38,640 --> 01:11:40,400
it would be nice to be able to like

1608
01:11:40,400 --> 01:11:43,520
based on the source address and then

1609
01:11:43,520 --> 01:11:46,640
allocate to different um uh slicing i

1610
01:11:46,640 --> 01:11:48,320
just wondering if there's any draft

1611
01:11:48,320 --> 01:11:50,320
describing that

1612
01:11:50,320 --> 01:11:53,760
okay uh in fact this drop is another for

1613
01:11:53,760 --> 01:11:56,880
for this purpose in fact there's the two

1614
01:11:56,880 --> 01:11:59,520
drops about the 5g and to end the

1615
01:11:59,520 --> 01:12:01,280
network slicing

1616
01:12:01,280 --> 01:12:02,880
i think this is the

1617
01:12:02,880 --> 01:12:06,800
in fact the 5d traffic will not directly

1618
01:12:06,800 --> 01:12:10,640
enter into the ietful underlying network

1619
01:12:10,640 --> 01:12:12,880
slice because of the

1620
01:12:12,880 --> 01:12:16,400
the the tracking from the uh uh

1621
01:12:16,400 --> 01:12:20,560
uh upf will first interworking with the

1622
01:12:20,560 --> 01:12:23,920
vpn of the transport networking so here

1623
01:12:23,920 --> 01:12:26,480
the they can use on this the

1624
01:12:26,480 --> 01:12:29,760
uh vla for the interworking so that's a

1625
01:12:29,760 --> 01:12:30,880
to uh

1626
01:12:30,880 --> 01:12:34,159
access to the vpn so that's the vpn can

1627
01:12:34,159 --> 01:12:38,159
go on mapping to the underlay uh an rp

1628
01:12:38,159 --> 01:12:40,480
so that's this is the case

1629
01:12:40,480 --> 01:12:42,800
and also that's one dropped in the teeth

1630
01:12:42,800 --> 01:12:45,280
working group we have the one draft

1631
01:12:45,280 --> 01:12:48,159
that's used we can

1632
01:12:48,159 --> 01:12:50,480
we can take some of these the

1633
01:12:50,480 --> 01:12:52,480
end to end 5g

1634
01:12:52,480 --> 01:12:55,280
network slicing identification

1635
01:12:55,280 --> 01:12:57,920
based on this identification we may can

1636
01:12:57,920 --> 01:13:01,199
you this one can directly map to the

1637
01:13:01,199 --> 01:13:04,320
ietf network slicing but that's useless

1638
01:13:04,320 --> 01:13:05,760
really in the

1639
01:13:05,760 --> 01:13:08,480
in the early stage uh

1640
01:13:08,480 --> 01:13:09,440
so that's

1641
01:13:09,440 --> 01:13:11,199
that's all okay

1642
01:13:11,199 --> 01:13:13,599
thank you

1643
01:13:13,920 --> 01:13:15,520
uh reza

1644
01:13:15,520 --> 01:13:18,239
this is uh

1645
01:13:18,239 --> 01:13:21,120
just answering lindo's question

1646
01:13:21,120 --> 01:13:24,080
you mentioned about the

1647
01:13:24,080 --> 01:13:26,480
how this one relates to

1648
01:13:26,480 --> 01:13:27,760
5g

1649
01:13:27,760 --> 01:13:30,159
there are a group of

1650
01:13:30,159 --> 01:13:33,760
rfc the drafts or the draft at the t's

1651
01:13:33,760 --> 01:13:34,560
that

1652
01:13:34,560 --> 01:13:36,480
encourage you to take a look i can send

1653
01:13:36,480 --> 01:13:37,600
you a

1654
01:13:37,600 --> 01:13:40,800
handful of those uh drafts but in

1655
01:13:40,800 --> 01:13:44,000
summary the whole idea of the creation

1656
01:13:44,000 --> 01:13:47,280
of ietf network slice is different from

1657
01:13:47,280 --> 01:13:49,600
the usage of that during the signaling

1658
01:13:49,600 --> 01:13:52,000
because when you refer to ue

1659
01:13:52,000 --> 01:13:54,480
that is the signaling part

1660
01:13:54,480 --> 01:13:57,520
that is the the orthogonal action which

1661
01:13:57,520 --> 01:13:59,679
happens you are creating itf network

1662
01:13:59,679 --> 01:14:01,760
slides which means that you are

1663
01:14:01,760 --> 01:14:03,920
connecting logically

1664
01:14:03,920 --> 01:14:07,120
subset of your network to the 5g ram and

1665
01:14:07,120 --> 01:14:10,159
5g core mobile and after that you are

1666
01:14:10,159 --> 01:14:12,800
going to use it so just for clarity

1667
01:14:12,800 --> 01:14:16,400
ue and anything related to signaling

1668
01:14:16,400 --> 01:14:18,880
is orthogonal to the right turn address

1669
01:14:18,880 --> 01:14:20,480
but i will send you the

1670
01:14:20,480 --> 01:14:22,480
some of the draft and if you want we can

1671
01:14:22,480 --> 01:14:27,080
talk offline thank you

1672
01:14:37,360 --> 01:14:42,519
okay thanks uh army uh please go ahead

1673
01:15:08,239 --> 01:15:10,239
hello everyone can you hear me now yes

1674
01:15:10,239 --> 01:15:12,159
we can go ahead please

1675
01:15:12,159 --> 01:15:14,239
okay thank you thank you

1676
01:15:14,239 --> 01:15:16,880
so hello everyone this is ahmed and i'm

1677
01:15:16,880 --> 01:15:18,960
going to be presenting the past racing

1678
01:15:18,960 --> 01:15:21,199
in srb6 network draft on behalf of the

1679
01:15:21,199 --> 01:15:25,719
co-authors next slide please

1680
01:15:28,719 --> 01:15:31,600
so this is the agenda for uh for the for

1681
01:15:31,600 --> 01:15:34,080
the presentation of today

1682
01:15:34,080 --> 01:15:38,519
next prize next slide please

1683
01:15:45,199 --> 01:15:48,000
next slide please

1684
01:15:49,520 --> 01:15:51,679
so bus tracing basically is a solution

1685
01:15:51,679 --> 01:15:53,679
that would allow operator to

1686
01:15:53,679 --> 01:15:56,159
deterministically detect the actual path

1687
01:15:56,159 --> 01:15:57,679
of the packet

1688
01:15:57,679 --> 01:16:00,400
or in other words to discover the

1689
01:16:00,400 --> 01:16:02,800
available ecmp passes in a given network

1690
01:16:02,800 --> 01:16:06,080
and their characteristics

1691
01:16:06,080 --> 01:16:08,159
what path tracing provides is a record

1692
01:16:08,159 --> 01:16:10,080
of the packet pass as a sequence of

1693
01:16:10,080 --> 01:16:11,840
interface ids

1694
01:16:11,840 --> 01:16:14,080
and on top of that it provides a

1695
01:16:14,080 --> 01:16:17,280
timestamp for end to end delay and also

1696
01:16:17,280 --> 01:16:18,960
pair hope delay

1697
01:16:18,960 --> 01:16:21,600
and in addition and the load on each

1698
01:16:21,600 --> 01:16:23,280
aggress interface along with the packet

1699
01:16:23,280 --> 01:16:25,600
delivery bus

1700
01:16:25,600 --> 01:16:27,199
this has been

1701
01:16:27,199 --> 01:16:29,520
designed for line rate hardware

1702
01:16:29,520 --> 01:16:33,719
implementation in the baseline

1703
01:16:34,239 --> 01:16:36,320
it requires really a minimum header size

1704
01:16:36,320 --> 01:16:38,800
and you can see in here in one example

1705
01:16:38,800 --> 01:16:42,560
with just 36 bytes hop by hop option

1706
01:16:42,560 --> 01:16:44,480
we can actually record the information

1707
01:16:44,480 --> 01:16:47,600
of the path for 14 hops

1708
01:16:47,600 --> 01:16:49,840
and also has been designed to be

1709
01:16:49,840 --> 01:16:52,320
hardware friendly

1710
01:16:52,320 --> 01:16:54,800
so it requires the same editing across

1711
01:16:54,800 --> 01:16:56,960
all of the nodes in the network

1712
01:16:56,960 --> 01:17:00,239
regardless of the position of the node

1713
01:17:00,239 --> 01:17:03,718
next slide please

1714
01:17:05,040 --> 01:17:07,600
so basically pass tracing is applicable

1715
01:17:07,600 --> 01:17:11,120
to both srv6 and sr mpls

1716
01:17:11,120 --> 01:17:13,520
in this document we define the pass

1717
01:17:13,520 --> 01:17:16,080
rating specification for the srv6 data

1718
01:17:16,080 --> 01:17:17,920
plane

1719
01:17:17,920 --> 01:17:20,000
there will be another document defining

1720
01:17:20,000 --> 01:17:21,520
the sr mpls

1721
01:17:21,520 --> 01:17:25,280
data plane specification

1722
01:17:25,440 --> 01:17:29,639
next next slide please

1723
01:17:32,560 --> 01:17:34,000
here are some of the terminologies that

1724
01:17:34,000 --> 01:17:36,480
we that we will use uh

1725
01:17:36,480 --> 01:17:38,239
during the presentation

1726
01:17:38,239 --> 01:17:39,760
so especially

1727
01:17:39,760 --> 01:17:42,000
what we call the midpoint compressed

1728
01:17:42,000 --> 01:17:44,320
data and this is basically the

1729
01:17:44,320 --> 01:17:47,199
information that every transit router

1730
01:17:47,199 --> 01:17:50,400
along the bucket bus add into the packet

1731
01:17:50,400 --> 01:17:52,719
and it is actually just three bytes of

1732
01:17:52,719 --> 01:17:56,400
information which is a key comparison to

1733
01:17:56,400 --> 01:17:59,120
a support fast racing headline rate in

1734
01:17:59,120 --> 01:18:00,960
addition to some of the headers that we

1735
01:18:00,960 --> 01:18:02,080
use in

1736
01:18:02,080 --> 01:18:04,159
in the package so we define a new hop by

1737
01:18:04,159 --> 01:18:05,040
hub

1738
01:18:05,040 --> 01:18:07,840
option what we call it hp hpt

1739
01:18:07,840 --> 01:18:09,520
which will be used

1740
01:18:09,520 --> 01:18:12,320
to collect the data from each node acro

1741
01:18:12,320 --> 01:18:13,840
along the path

1742
01:18:13,840 --> 01:18:16,560
and we define also another srh password

1743
01:18:16,560 --> 01:18:19,120
smtlv which will be used to collect the

1744
01:18:19,120 --> 01:18:21,679
pass rating information both from sync

1745
01:18:21,679 --> 01:18:25,120
and and source nodes these two headers

1746
01:18:25,120 --> 01:18:27,280
will be defined in this document

1747
01:18:27,280 --> 01:18:30,159
next slide please

1748
01:18:32,719 --> 01:18:34,400
so one of the main

1749
01:18:34,400 --> 01:18:35,120
key

1750
01:18:35,120 --> 01:18:38,239
key elements of of pass tracing to allow

1751
01:18:38,239 --> 01:18:39,520
supporting that

1752
01:18:39,520 --> 01:18:42,000
in hardware at line rate is basically

1753
01:18:42,000 --> 01:18:43,040
to

1754
01:18:43,040 --> 01:18:44,320
collect

1755
01:18:44,320 --> 01:18:46,560
a little amount or minimum amount of

1756
01:18:46,560 --> 01:18:48,960
bytes from each node on the bus so what

1757
01:18:48,960 --> 01:18:51,280
we collect in bus racing we call

1758
01:18:51,280 --> 01:18:53,679
midpoint compressed data and each three

1759
01:18:53,679 --> 01:18:56,159
bytes of data as you can see

1760
01:18:56,159 --> 01:18:57,920
here is the format on on the right of

1761
01:18:57,920 --> 01:18:59,840
the slide

1762
01:18:59,840 --> 01:19:02,080
and these three bytes of of the data

1763
01:19:02,080 --> 01:19:03,520
consists of

1764
01:19:03,520 --> 01:19:06,239
first the outgoing interface id

1765
01:19:06,239 --> 01:19:09,120
which can be an 8-bit

1766
01:19:09,120 --> 01:19:12,400
or a 12-bit interface id

1767
01:19:12,400 --> 01:19:14,640
and it is associated with the aggress

1768
01:19:14,640 --> 01:19:17,280
physical port of the router

1769
01:19:17,280 --> 01:19:19,600
the second piece of information of this

1770
01:19:19,600 --> 01:19:21,520
midpoint compressed data

1771
01:19:21,520 --> 01:19:24,320
is basically the outgoing interface load

1772
01:19:24,320 --> 01:19:28,559
which is a four by a four bits of

1773
01:19:28,640 --> 01:19:30,800
of data that represents the egress

1774
01:19:30,800 --> 01:19:33,040
interface load

1775
01:19:33,040 --> 01:19:35,440
and finally we have an eight bits of

1776
01:19:35,440 --> 01:19:37,520
timestamp what we call it the truncated

1777
01:19:37,520 --> 01:19:39,760
timestamp and basically

1778
01:19:39,760 --> 01:19:42,000
this is an eight bit timestamp encoding

1779
01:19:42,000 --> 01:19:44,000
the time at which the packet

1780
01:19:44,000 --> 01:19:47,199
leaves the router

1781
01:19:47,199 --> 01:19:48,000
this

1782
01:19:48,000 --> 01:19:50,480
timestamp actually has a different

1783
01:19:50,480 --> 01:19:53,199
significance based on the link type and

1784
01:19:53,199 --> 01:19:55,679
this is what we call the tts template or

1785
01:19:55,679 --> 01:19:57,679
the time template and this is something

1786
01:19:57,679 --> 01:20:00,239
to be configured by the operator

1787
01:20:00,239 --> 01:20:03,799
next slide please

1788
01:20:05,280 --> 01:20:07,360
so in the past racing data model we have

1789
01:20:07,360 --> 01:20:08,960
different roles

1790
01:20:08,960 --> 01:20:12,159
which include the bus racing source node

1791
01:20:12,159 --> 01:20:14,400
the bus racing midpoint and the pass

1792
01:20:14,400 --> 01:20:16,800
racing sync node

1793
01:20:16,800 --> 01:20:19,360
as well as uh original collector this is

1794
01:20:19,360 --> 01:20:21,440
what we will be covering in the next uh

1795
01:20:21,440 --> 01:20:23,440
couple of slides

1796
01:20:23,440 --> 01:20:26,239
next slide please

1797
01:20:27,920 --> 01:20:30,880
so in past tracing the first node that

1798
01:20:30,880 --> 01:20:32,880
that gets triggered here or the first

1799
01:20:32,880 --> 01:20:34,800
role in the pass racing data model is

1800
01:20:34,800 --> 01:20:36,400
the source node

1801
01:20:36,400 --> 01:20:37,199
this

1802
01:20:37,199 --> 01:20:40,159
this source node basically

1803
01:20:40,159 --> 01:20:42,080
generate

1804
01:20:42,080 --> 01:20:43,920
a probe packet or the node that

1805
01:20:43,920 --> 01:20:46,880
originates the pro packet the format of

1806
01:20:46,880 --> 01:20:49,360
the pro package you can see here on on

1807
01:20:49,360 --> 01:20:52,000
the right side of the of the slide we

1808
01:20:52,000 --> 01:20:54,639
have an ipv6 header

1809
01:20:54,639 --> 01:20:57,360
and a hop by hop header with a pass

1810
01:20:57,360 --> 01:20:59,199
racing option

1811
01:20:59,199 --> 01:21:01,199
then we have a segment routing header

1812
01:21:01,199 --> 01:21:04,400
with a segment routing pass tracing

1813
01:21:04,400 --> 01:21:06,879
tlp

1814
01:21:07,120 --> 01:21:09,040
the source node after it creates this

1815
01:21:09,040 --> 01:21:10,960
packet it decides in which interface the

1816
01:21:10,960 --> 01:21:13,280
packet is going to be sent using the

1817
01:21:13,280 --> 01:21:15,760
normal forwarding and it records its

1818
01:21:15,760 --> 01:21:18,480
information in the packet just because

1819
01:21:18,480 --> 01:21:22,400
just before the bucket leaves the router

1820
01:21:22,400 --> 01:21:25,280
next slide please

1821
01:21:25,840 --> 01:21:29,040
the second row here is the midpoint this

1822
01:21:29,040 --> 01:21:30,159
midpoint

1823
01:21:30,159 --> 01:21:32,159
receives the pro package that was

1824
01:21:32,159 --> 01:21:34,320
generated by the source

1825
01:21:34,320 --> 01:21:37,440
perform an ipv6 forwarding

1826
01:21:37,440 --> 01:21:39,600
or an sr endpoint

1827
01:21:39,600 --> 01:21:40,880
behavior

1828
01:21:40,880 --> 01:21:42,800
and before also forwarding the packet

1829
01:21:42,800 --> 01:21:45,199
out from the node it records

1830
01:21:45,199 --> 01:21:46,159
its

1831
01:21:46,159 --> 01:21:49,120
mcd data in the hope by hop

1832
01:21:49,120 --> 01:21:51,280
pass tracing option

1833
01:21:51,280 --> 01:21:54,840
next slide please

1834
01:21:56,239 --> 01:21:57,840
at the sink node

1835
01:21:57,840 --> 01:22:01,199
we basically we support a new srv6 uh

1836
01:22:01,199 --> 01:22:02,880
behavior we call it

1837
01:22:02,880 --> 01:22:05,440
end.b6

1838
01:22:05,440 --> 01:22:07,360
which refers to a binding seed with

1839
01:22:07,360 --> 01:22:09,440
timestamp encapsulation and forward

1840
01:22:09,440 --> 01:22:10,960
behavior

1841
01:22:10,960 --> 01:22:13,440
this srv6 behavior encapsulates the

1842
01:22:13,440 --> 01:22:15,360
receive the probe packet with an outer

1843
01:22:15,360 --> 01:22:20,080
ibv6 header srh and pass tracing tlb

1844
01:22:20,080 --> 01:22:21,760
as you can see here the format of the

1845
01:22:21,760 --> 01:22:22,960
packet after

1846
01:22:22,960 --> 01:22:25,600
being forwarded by the sync node

1847
01:22:25,600 --> 01:22:28,800
is on the right of the of the slide

1848
01:22:28,800 --> 01:22:30,719
the sync node will record its pass

1849
01:22:30,719 --> 01:22:33,360
tracing information in the segment

1850
01:22:33,360 --> 01:22:35,040
routing header tlb

1851
01:22:35,040 --> 01:22:37,360
and will forward this packet to

1852
01:22:37,360 --> 01:22:41,679
original collector next slide please

1853
01:22:42,080 --> 01:22:44,080
the role of this collector is basically

1854
01:22:44,080 --> 01:22:46,480
to receive the pro packet extract the

1855
01:22:46,480 --> 01:22:48,639
pass rating information and save them

1856
01:22:48,639 --> 01:22:51,120
into a time series database

1857
01:22:51,120 --> 01:22:52,960
the pass rating to information in the

1858
01:22:52,960 --> 01:22:55,040
time series database will be used by

1859
01:22:55,040 --> 01:22:57,280
operators basically to perform all of

1860
01:22:57,280 --> 01:23:00,239
the different analytics

1861
01:23:00,239 --> 01:23:01,679
next slide

1862
01:23:01,679 --> 01:23:03,840
so in pass tracing actually we define

1863
01:23:03,840 --> 01:23:05,760
two new headers

1864
01:23:05,760 --> 01:23:07,520
the first one is a

1865
01:23:07,520 --> 01:23:10,800
hope i hope pass tracing option

1866
01:23:10,800 --> 01:23:13,600
the format of this option as shown here

1867
01:23:13,600 --> 01:23:17,040
so we have an mcd stack that will be a

1868
01:23:17,040 --> 01:23:19,760
pre-allocated space for the midpoint to

1869
01:23:19,760 --> 01:23:22,239
record their data

1870
01:23:22,239 --> 01:23:24,480
the hope i hope option is to be assigned

1871
01:23:24,480 --> 01:23:27,679
by ayana and it should have

1872
01:23:27,679 --> 01:23:30,639
and the three higher bits set to zero

1873
01:23:30,639 --> 01:23:32,960
zero one so zero zero for known that

1874
01:23:32,960 --> 01:23:34,960
does not support pass phrasing to skip

1875
01:23:34,960 --> 01:23:37,040
the packet and one for the nodes that

1876
01:23:37,040 --> 01:23:39,440
support pass tracing to record insulator

1877
01:23:39,440 --> 01:23:42,320
next slide please

1878
01:23:42,960 --> 01:23:46,320
we also define a new path racing tlv

1879
01:23:46,320 --> 01:23:48,480
this is the format of the tlv it will

1880
01:23:48,480 --> 01:23:50,639
get a type assigned by anna and it will

1881
01:23:50,639 --> 01:23:53,120
be used to record the source and sync

1882
01:23:53,120 --> 01:23:55,040
data from

1883
01:23:55,040 --> 01:23:56,400
the passwords information from the

1884
01:23:56,400 --> 01:23:58,880
source and sync node

1885
01:23:58,880 --> 01:24:02,360
next slide please

1886
01:24:02,960 --> 01:24:05,440
regarding the security of uh model for

1887
01:24:05,440 --> 01:24:08,000
uh consideration for pass tracing so in

1888
01:24:08,000 --> 01:24:10,320
pass tracing

1889
01:24:10,320 --> 01:24:12,000
we leverage the security consideration

1890
01:24:12,000 --> 01:24:14,400
defined for the segment routing domain

1891
01:24:14,400 --> 01:24:18,000
as defined in rfc 8754

1892
01:24:18,000 --> 01:24:19,840
also in past racing we require that the

1893
01:24:19,840 --> 01:24:22,159
hop by hop option must be processed in

1894
01:24:22,159 --> 01:24:25,120
the first data path

1895
01:24:25,120 --> 01:24:27,679
so therefore it cannot be used

1896
01:24:27,679 --> 01:24:30,400
as an attack vector against the cpu next

1897
01:24:30,400 --> 01:24:32,960
slide please

1898
01:24:33,920 --> 01:24:37,199
so we we have some experimental and

1899
01:24:37,199 --> 01:24:38,480
interop

1900
01:24:38,480 --> 01:24:40,080
[Music]

1901
01:24:40,080 --> 01:24:42,800
implementation for pass tracing

1902
01:24:42,800 --> 01:24:45,440
and this includes some hardware

1903
01:24:45,440 --> 01:24:47,760
from different vendors like cisco.com

1904
01:24:47,760 --> 01:24:49,600
and marvel

1905
01:24:49,600 --> 01:24:51,280
and we have also some

1906
01:24:51,280 --> 01:24:53,600
experimental open source implementation

1907
01:24:53,600 --> 01:24:58,159
including fdio vpp linux and wireshark

1908
01:24:58,159 --> 01:25:00,960
next slide please

1909
01:25:00,960 --> 01:25:02,960
so we welcome the review and the

1910
01:25:02,960 --> 01:25:05,360
comments from the working group

1911
01:25:05,360 --> 01:25:08,000
in particular we would like to ask other

1912
01:25:08,000 --> 01:25:09,199
vendors

1913
01:25:09,199 --> 01:25:10,480
uh to

1914
01:25:10,480 --> 01:25:12,960
review the data plane uh model for pass

1915
01:25:12,960 --> 01:25:15,280
tracing and give your feedback if we

1916
01:25:15,280 --> 01:25:17,120
need any more

1917
01:25:17,120 --> 01:25:18,400
optimization

1918
01:25:18,400 --> 01:25:19,120
or

1919
01:25:19,120 --> 01:25:20,639
the data plane

1920
01:25:20,639 --> 01:25:22,960
is good to be supported at land rate by

1921
01:25:22,960 --> 01:25:23,760
other

1922
01:25:23,760 --> 01:25:27,920
operators by other vendors thank you

1923
01:25:27,920 --> 01:25:32,080
thanks ahmed greg please go ahead

1924
01:25:32,320 --> 01:25:34,480
just in few words

1925
01:25:34,480 --> 01:25:37,520
so this isn't redundant

1926
01:25:37,520 --> 01:25:39,280
proposal

1927
01:25:39,280 --> 01:25:40,400
everything that

1928
01:25:40,400 --> 01:25:43,040
you are achieving can be already

1929
01:25:43,040 --> 01:25:46,159
achieved uh using iam

1930
01:25:46,159 --> 01:25:48,960
and even more because

1931
01:25:48,960 --> 01:25:51,679
iem has advantage of

1932
01:25:51,679 --> 01:25:55,120
uh collecting telemetry information

1933
01:25:55,120 --> 01:25:58,000
out of band without impacting the data

1934
01:25:58,000 --> 01:25:58,960
flow

1935
01:25:58,960 --> 01:26:01,600
uh by incorporating

1936
01:26:01,600 --> 01:26:03,760
telemetry information in the trigger

1937
01:26:03,760 --> 01:26:06,560
packet so that can be achieved using

1938
01:26:06,560 --> 01:26:09,120
direct expert

1939
01:26:09,120 --> 01:26:13,520
option of trace or um hybrid two-step

1940
01:26:13,520 --> 01:26:16,080
option and uh i'm

1941
01:26:16,080 --> 01:26:18,560
happy to discuss it uh on the mainland

1942
01:26:18,560 --> 01:26:19,760
list more

1943
01:26:19,760 --> 01:26:20,719
but

1944
01:26:20,719 --> 01:26:25,280
this proposal is uh redundant thank you

1945
01:26:25,280 --> 01:26:27,679
i believe the the two proposals solve

1946
01:26:27,679 --> 01:26:30,080
the problem from different angles as we

1947
01:26:30,080 --> 01:26:31,760
discussed on the mailing list but i will

1948
01:26:31,760 --> 01:26:34,000
be happy to have more discussion on on

1949
01:26:34,000 --> 01:26:37,480
the mailing list

1950
01:26:38,320 --> 01:26:40,960
please go ahead

1951
01:26:43,920 --> 01:26:46,480
so i'd like to know the relationship

1952
01:26:46,480 --> 01:26:49,360
between this pokemon go and rom

1953
01:26:49,360 --> 01:26:51,280
and by the way i

1954
01:26:51,280 --> 01:26:53,840
yeah i'm really curious about the temp

1955
01:26:53,840 --> 01:26:54,960
stamp

1956
01:26:54,960 --> 01:26:56,239
format

1957
01:26:56,239 --> 01:26:58,159
i think it would

1958
01:26:58,159 --> 01:27:00,080
not be so

1959
01:27:00,080 --> 01:27:01,840
accurate

1960
01:27:01,840 --> 01:27:03,440
yeah

1961
01:27:03,440 --> 01:27:04,480
so

1962
01:27:04,480 --> 01:27:08,639
so oh okay so so a two years ago we have

1963
01:27:08,639 --> 01:27:11,920
a similar solution called light item

1964
01:27:11,920 --> 01:27:12,960
like

1965
01:27:12,960 --> 01:27:16,639
iom so i can prepare the link

1966
01:27:16,639 --> 01:27:19,120
for the reference yep

1967
01:27:19,120 --> 01:27:22,719
okay so again again uh for fast racing

1968
01:27:22,719 --> 01:27:25,600
versus iom i believe again that that

1969
01:27:25,600 --> 01:27:27,679
this solves two different problems

1970
01:27:27,679 --> 01:27:30,080
especially fast racing has been has been

1971
01:27:30,080 --> 01:27:32,320
optimized for line rate hardware

1972
01:27:32,320 --> 01:27:34,960
implementation but we can we can discuss

1973
01:27:34,960 --> 01:27:36,000
more on

1974
01:27:36,000 --> 01:27:38,159
on the mailing list on that

1975
01:27:38,159 --> 01:27:40,559
thank you

1976
01:27:40,719 --> 01:27:42,639
thank you

1977
01:27:42,639 --> 01:27:46,400
how are you please go ahead

1978
01:27:46,400 --> 01:27:49,440
uh yes i just want it says i share the

1979
01:27:49,440 --> 01:27:52,960
same opinion uh as a great and we

1980
01:27:52,960 --> 01:27:56,159
do need uh to make a

1981
01:27:56,159 --> 01:27:59,600
better comparison with iom and

1982
01:27:59,600 --> 01:28:02,639
if iom can achieve the same goal it

1983
01:28:02,639 --> 01:28:04,480
seems unnecessary to have another

1984
01:28:04,480 --> 01:28:07,440
solution thank you

1985
01:28:11,280 --> 01:28:15,679
okay uh last pablo please go ahead

1986
01:28:15,679 --> 01:28:18,560
um so just one comment on the comparison

1987
01:28:18,560 --> 01:28:20,000
with iom

1988
01:28:20,000 --> 01:28:22,320
i believe that the issue that we are

1989
01:28:22,320 --> 01:28:25,280
facing with iam is that

1990
01:28:25,280 --> 01:28:27,120
the data plane descent when we do not

1991
01:28:27,120 --> 01:28:28,719
want to do direct

1992
01:28:28,719 --> 01:28:31,199
export it's it becomes quite complex to

1993
01:28:31,199 --> 01:28:33,120
support in any device

1994
01:28:33,120 --> 01:28:35,280
um particularly not only because the

1995
01:28:35,280 --> 01:28:36,880
data fields are large but also because

1996
01:28:36,880 --> 01:28:38,320
the the amount of

1997
01:28:38,320 --> 01:28:39,760
editing commands that you require to

1998
01:28:39,760 --> 01:28:42,320
implement it in the actual hardware and

1999
01:28:42,320 --> 01:28:44,080
so basically if you want to do ecmp

2000
01:28:44,080 --> 01:28:45,920
monitoring and troubleshooting

2001
01:28:45,920 --> 01:28:47,920
collecting the data from the data path

2002
01:28:47,920 --> 01:28:50,239
itself um i believe there is no way to

2003
01:28:50,239 --> 01:28:52,639
solve that with iom but anyway we are

2004
01:28:52,639 --> 01:28:54,400
happy to discuss more on demanding this

2005
01:28:54,400 --> 01:28:57,559
thank you

2006
01:29:21,440 --> 01:29:25,400
uh hello am i audible

2007
01:29:26,320 --> 01:29:28,000
we hear you

2008
01:29:28,000 --> 01:29:29,600
okay thanks

2009
01:29:29,600 --> 01:29:31,440
uh so i am charlie from juniper networks

2010
01:29:31,440 --> 01:29:34,639
uh i am representing the traffic srv6 in

2011
01:29:34,639 --> 01:29:36,639
the domain mapping suits on behalf of my

2012
01:29:36,639 --> 01:29:38,320
co-authors

2013
01:29:38,320 --> 01:29:41,519
can you go to next slide please

2014
01:29:44,639 --> 01:29:46,480
yeah so we had presented the initial

2015
01:29:46,480 --> 01:29:49,199
version on the ietf112

2016
01:29:49,199 --> 01:29:51,679
and these are the updates from the last

2017
01:29:51,679 --> 01:29:52,960
version

2018
01:29:52,960 --> 01:29:55,600
we have two new callers we thanks their

2019
01:29:55,600 --> 01:29:56,880
contribution

2020
01:29:56,880 --> 01:29:59,760
and we have enhanced some seed behaviors

2021
01:29:59,760 --> 01:30:02,400
to cater to cases like oem

2022
01:30:02,400 --> 01:30:04,320
and we also added a section on

2023
01:30:04,320 --> 01:30:06,560
interworking procedures by taking

2024
01:30:06,560 --> 01:30:08,880
examples for the use cases we defined in

2025
01:30:08,880 --> 01:30:11,199
the draft

2026
01:30:11,199 --> 01:30:14,719
yeah so basically this traffic had

2027
01:30:14,719 --> 01:30:17,360
mentioned three new srv6 nbc endpoint

2028
01:30:17,360 --> 01:30:19,600
behaviors named n dot replace and dot

2029
01:30:19,600 --> 01:30:22,000
replace b6 and android db6

2030
01:30:22,000 --> 01:30:23,840
so these behaviors actually helps to

2031
01:30:23,840 --> 01:30:26,400
build paths across different srv6 domain

2032
01:30:26,400 --> 01:30:28,719
one operator has

2033
01:30:28,719 --> 01:30:31,920
the document mentioned two use cases one

2034
01:30:31,920 --> 01:30:34,159
where the option c multipliers is

2035
01:30:34,159 --> 01:30:35,920
connecting where the borders are

2036
01:30:35,920 --> 01:30:38,560
connected by ebgp

2037
01:30:38,560 --> 01:30:40,000
and then there is a second use case

2038
01:30:40,000 --> 01:30:40,800
where

2039
01:30:40,800 --> 01:30:43,760
we have option b style interworking so

2040
01:30:43,760 --> 01:30:45,920
the android replace and android replace

2041
01:30:45,920 --> 01:30:48,560
b6 are for the first use case

2042
01:30:48,560 --> 01:30:50,080
for the option c style connect

2043
01:30:50,080 --> 01:30:52,480
connectivity so what

2044
01:30:52,480 --> 01:30:53,199
the

2045
01:30:53,199 --> 01:30:55,280
changes from the last revision is we

2046
01:30:55,280 --> 01:30:58,159
have uh added a section

2047
01:30:58,159 --> 01:31:00,320
normally this n dot replace

2048
01:31:00,320 --> 01:31:02,159
cannot be the last segment in the sr

2049
01:31:02,159 --> 01:31:04,960
policy uh so we extended this when the

2050
01:31:04,960 --> 01:31:08,560
segment list left equal to zero we have

2051
01:31:08,560 --> 01:31:11,760
uh updated similar to the other seats uh

2052
01:31:11,760 --> 01:31:14,000
mentioned in the network programming rfc

2053
01:31:14,000 --> 01:31:15,360
8986

2054
01:31:15,360 --> 01:31:17,360
so the remaining

2055
01:31:17,360 --> 01:31:20,080
definitions remains the same

2056
01:31:20,080 --> 01:31:23,360
can you go to the next slide please

2057
01:31:25,520 --> 01:31:28,480
yeah so here also the

2058
01:31:28,480 --> 01:31:31,360
this n dot replace b6 uh it also cannot

2059
01:31:31,360 --> 01:31:34,320
be the last uh segment in the srh

2060
01:31:34,320 --> 01:31:36,400
so similar to the previous seed uh we

2061
01:31:36,400 --> 01:31:38,639
have enhanced segment left equal to uh

2062
01:31:38,639 --> 01:31:40,719
when the segment left equal to zero uh

2063
01:31:40,719 --> 01:31:42,960
we talk about how to handle similar to

2064
01:31:42,960 --> 01:31:45,199
other

2065
01:31:45,280 --> 01:31:48,080
seats and then we also have added few

2066
01:31:48,080 --> 01:31:49,440
nodes

2067
01:31:49,440 --> 01:31:50,639
on how to

2068
01:31:50,639 --> 01:31:53,280
fill the fields of the new encapsulation

2069
01:31:53,280 --> 01:31:55,360
headers and also talks about an

2070
01:31:55,360 --> 01:31:57,760
optimization for best effort and flex

2071
01:31:57,760 --> 01:31:58,960
elbow

2072
01:31:58,960 --> 01:32:00,480
scenarios

2073
01:32:00,480 --> 01:32:03,280
when flex algo is used or best deferred

2074
01:32:03,280 --> 01:32:06,159
path is used in the domain

2075
01:32:06,159 --> 01:32:09,440
can you go to the next slide please

2076
01:32:10,000 --> 01:32:12,320
yeah so this is uh

2077
01:32:12,320 --> 01:32:15,040
for the this n dot db6 is used for the

2078
01:32:15,040 --> 01:32:16,800
second use case

2079
01:32:16,800 --> 01:32:19,840
uh for the service interworking uh so

2080
01:32:19,840 --> 01:32:22,080
as per the definition uh it must be the

2081
01:32:22,080 --> 01:32:24,320
last segment in the search

2082
01:32:24,320 --> 01:32:25,120
so

2083
01:32:25,120 --> 01:32:27,120
for different from the other two we have

2084
01:32:27,120 --> 01:32:29,120
changed when uh

2085
01:32:29,120 --> 01:32:30,880
the clarity for normal processing so

2086
01:32:30,880 --> 01:32:33,840
when uh the upper header we clearly

2087
01:32:33,840 --> 01:32:36,719
defined ipv4 ipv6 and ethernet

2088
01:32:36,719 --> 01:32:39,199
and then if it is not belongs to that

2089
01:32:39,199 --> 01:32:43,360
how to process uh similar to the other

2090
01:32:43,360 --> 01:32:46,080
episode behaviors so here also

2091
01:32:46,080 --> 01:32:48,239
clarity has been provided on a few

2092
01:32:48,239 --> 01:32:52,320
fields on the new ncaa header

2093
01:32:52,400 --> 01:32:56,000
next slide please yeah so a new section

2094
01:32:56,000 --> 01:32:58,159
we have added on the interworking

2095
01:32:58,159 --> 01:33:00,800
procedures it describes the procedure by

2096
01:33:00,800 --> 01:33:02,800
taking examples

2097
01:33:02,800 --> 01:33:04,719
it talks about both control plane and

2098
01:33:04,719 --> 01:33:07,600
data plane flows

2099
01:33:07,600 --> 01:33:10,480
so here this is all the first use case

2100
01:33:10,480 --> 01:33:12,960
options in the working example so there

2101
01:33:12,960 --> 01:33:16,560
are three different srv6 domains

2102
01:33:16,560 --> 01:33:17,920
connected

2103
01:33:17,920 --> 01:33:20,239
by iebgp and within the domain there is

2104
01:33:20,239 --> 01:33:22,880
ipgp connectivity and there could be in

2105
01:33:22,880 --> 01:33:26,400
this example we have taken three srt

2106
01:33:26,400 --> 01:33:28,639
different paths the ets has a different

2107
01:33:28,639 --> 01:33:31,280
srt path for the

2108
01:33:31,280 --> 01:33:32,560
transport

2109
01:33:32,560 --> 01:33:33,440
so

2110
01:33:33,440 --> 01:33:35,760
these two seats this replace

2111
01:33:35,760 --> 01:33:38,480
b6 and replace it so

2112
01:33:38,480 --> 01:33:40,639
then the common logic is for a route if

2113
01:33:40,639 --> 01:33:42,719
the next stop is one hop away then while

2114
01:33:42,719 --> 01:33:46,239
advertising we uh use and dot replace it

2115
01:33:46,239 --> 01:33:48,000
uh for a route if the next stop is

2116
01:33:48,000 --> 01:33:50,400
multi-hop away then while advertising we

2117
01:33:50,400 --> 01:33:53,199
use and dot replace v6

2118
01:33:53,199 --> 01:33:55,760
and for a single uh hop network scenario

2119
01:33:55,760 --> 01:33:58,000
we there is no encap required as it is

2120
01:33:58,000 --> 01:33:58,960
just a

2121
01:33:58,960 --> 01:34:01,920
replace or a swap

2122
01:34:01,920 --> 01:34:03,920
yeah so the more details on control

2123
01:34:03,920 --> 01:34:06,080
plane and data plane uh

2124
01:34:06,080 --> 01:34:09,360
that is explained more in the draft

2125
01:34:09,360 --> 01:34:12,960
yeah this is the next use case uh

2126
01:34:12,960 --> 01:34:14,960
so where there is option b

2127
01:34:14,960 --> 01:34:16,639
connectivity the

2128
01:34:16,639 --> 01:34:20,320
four is acting as the abr where uh the

2129
01:34:20,320 --> 01:34:22,320
service center working uh

2130
01:34:22,320 --> 01:34:25,120
the stitching db6 is advertised from the

2131
01:34:25,120 --> 01:34:27,280
uh node four

2132
01:34:27,280 --> 01:34:29,199
so all for all prefixes having the same

2133
01:34:29,199 --> 01:34:32,400
services same db60 will be

2134
01:34:32,400 --> 01:34:34,639
reused but if a different services

2135
01:34:34,639 --> 01:34:36,480
different db6 will be used so this

2136
01:34:36,480 --> 01:34:38,400
ensures that if the egress arrow gets

2137
01:34:38,400 --> 01:34:39,920
perceived

2138
01:34:39,920 --> 01:34:43,199
the translation at the node 4 also

2139
01:34:43,199 --> 01:34:47,199
ensures percy behavior

2140
01:34:47,199 --> 01:34:50,560
yeah so the db60 is uh it is high

2141
01:34:50,560 --> 01:34:52,800
locator at the node for uh so this is

2142
01:34:52,800 --> 01:34:54,400
for the option b

2143
01:34:54,400 --> 01:34:57,199
here also we the trap takes how

2144
01:34:57,199 --> 01:34:59,520
each control plane and data plane

2145
01:34:59,520 --> 01:35:01,040
messages

2146
01:35:01,040 --> 01:35:04,080
flows through the network

2147
01:35:04,080 --> 01:35:07,280
and next slide please

2148
01:35:07,920 --> 01:35:10,080
yeah so so yeah

2149
01:35:10,080 --> 01:35:11,679
we

2150
01:35:11,679 --> 01:35:13,119
request working group review and

2151
01:35:13,119 --> 01:35:15,760
comments also we are requesting working

2152
01:35:15,760 --> 01:35:17,679
group for adoption

2153
01:35:17,679 --> 01:35:20,560
what's the next steps

2154
01:35:20,800 --> 01:35:23,040
thanks

2155
01:35:24,400 --> 01:35:26,159
okay thanks uh

2156
01:35:26,159 --> 01:35:29,159
ketan

2157
01:35:30,639 --> 01:35:33,520
uh thanks sally for the presentation

2158
01:35:33,520 --> 01:35:36,159
i had a clarification question on slide

2159
01:35:36,159 --> 01:35:37,520
number six

2160
01:35:37,520 --> 01:35:40,719
uh you could go there

2161
01:35:41,040 --> 01:35:42,480
i wanted to

2162
01:35:42,480 --> 01:35:43,679
uh

2163
01:35:43,679 --> 01:35:47,119
we could go back to the slide uh

2164
01:35:47,119 --> 01:35:49,840
joel if it's possible uh i had a the

2165
01:35:49,840 --> 01:35:51,440
question was uh

2166
01:35:51,440 --> 01:35:54,639
uh why do we need a replace uh

2167
01:35:54,639 --> 01:35:57,600
in that scenario uh

2168
01:35:57,600 --> 01:36:00,560
one more uh the options here thank you

2169
01:36:00,560 --> 01:36:03,119
on this slide why do we need the replace

2170
01:36:03,119 --> 01:36:05,920
uh behavior in the first place

2171
01:36:05,920 --> 01:36:07,920
uh i i think you mentioned something

2172
01:36:07,920 --> 01:36:10,800
about you know sr policies uh but i

2173
01:36:10,800 --> 01:36:12,480
didn't quite

2174
01:36:12,480 --> 01:36:15,199
get that i mean in option c why couldn't

2175
01:36:15,199 --> 01:36:16,239
uh

2176
01:36:16,239 --> 01:36:18,800
one just directly reach uh

2177
01:36:18,800 --> 01:36:21,280
16

2178
01:36:21,520 --> 01:36:23,840
yeah so what why we are taking two

2179
01:36:23,840 --> 01:36:25,920
different seats right so that as we

2180
01:36:25,920 --> 01:36:28,639
mentioned if it is uh uh the

2181
01:36:28,639 --> 01:36:31,440
if the ais has only uh best effort or

2182
01:36:31,440 --> 01:36:33,920
plexilgo that optimization we can do we

2183
01:36:33,920 --> 01:36:36,480
don't need an additional end cap but if

2184
01:36:36,480 --> 01:36:39,760
if it has an srt policy then

2185
01:36:39,760 --> 01:36:41,920
we need because we need to first reach

2186
01:36:41,920 --> 01:36:44,000
from one border to other other border so

2187
01:36:44,000 --> 01:36:45,840
we have to replace first so that the

2188
01:36:45,840 --> 01:36:47,600
other border understand

2189
01:36:47,600 --> 01:36:48,719
uh

2190
01:36:48,719 --> 01:36:51,040
what to be a process next so that's why

2191
01:36:51,040 --> 01:36:53,040
the first change in destination we have

2192
01:36:53,040 --> 01:36:55,360
to do but then there is an additional

2193
01:36:55,360 --> 01:36:58,320
end cap required for that uh the the

2194
01:36:58,320 --> 01:37:01,040
upcoming uh

2195
01:37:01,040 --> 01:37:03,600
domain right because that srt path that

2196
01:37:03,600 --> 01:37:06,960
has to be on a new end cap

2197
01:37:06,960 --> 01:37:08,880
so that is that's why

2198
01:37:08,880 --> 01:37:11,520
yeah that's why that srt cases we need

2199
01:37:11,520 --> 01:37:13,199
that extra income

2200
01:37:13,199 --> 01:37:15,360
okay so if i understood you correctly

2201
01:37:15,360 --> 01:37:17,600
there is a underlay uh

2202
01:37:17,600 --> 01:37:22,239
bgp that you have and and the replace is

2203
01:37:22,239 --> 01:37:25,679
used or needed by that uh under labor gp

2204
01:37:25,679 --> 01:37:26,719
correct

2205
01:37:26,719 --> 01:37:27,440
and

2206
01:37:27,440 --> 01:37:31,199
this is uh probably in the car or city

2207
01:37:31,199 --> 01:37:34,400
uh correct right okay thanks sally thank

2208
01:37:34,400 --> 01:37:35,119
you

2209
01:37:35,119 --> 01:37:36,560
it was not very clear thanks for

2210
01:37:36,560 --> 01:37:38,159
clarifying

2211
01:37:38,159 --> 01:37:41,159
thanksgiving

2212
01:37:49,920 --> 01:37:52,000
uh hello everyone uh

2213
01:37:52,000 --> 01:37:54,080
i'm going to talk about this is how you

2214
01:37:54,080 --> 01:37:56,560
song from futurely uh i'd like to talk

2215
01:37:56,560 --> 01:37:59,679
about this srv6 in c2 active measurement

2216
01:37:59,679 --> 01:38:02,480
on behalf of other closers

2217
01:38:02,480 --> 01:38:04,000
next slides please

2218
01:38:04,000 --> 01:38:06,880
yeah first the uh the update uh from the

2219
01:38:06,880 --> 01:38:09,920
initial version uh now we reposition

2220
01:38:09,920 --> 01:38:12,960
this as a generic framework for sr6

2221
01:38:12,960 --> 01:38:15,360
active measurement and

2222
01:38:15,360 --> 01:38:17,199
we can support other

2223
01:38:17,199 --> 01:38:20,560
active oem protocols in addition to iom

2224
01:38:20,560 --> 01:38:22,400
under the same framework

2225
01:38:22,400 --> 01:38:24,960
also we have a new processor giant

2226
01:38:24,960 --> 01:38:26,800
mission

2227
01:38:26,800 --> 01:38:28,880
next slice

2228
01:38:28,880 --> 01:38:31,040
the motivation for this work is that we

2229
01:38:31,040 --> 01:38:34,080
believe uh actually uh the srv6 need

2230
01:38:34,080 --> 01:38:36,880
need active uh measurement method and

2231
01:38:36,880 --> 01:38:39,280
also active method active measurement

2232
01:38:39,280 --> 01:38:42,639
method is also very suitable for srv6 uh

2233
01:38:42,639 --> 01:38:45,520
because uh srv6 has this traffic

2234
01:38:45,520 --> 01:38:47,440
steering property

2235
01:38:47,440 --> 01:38:48,960
um

2236
01:38:48,960 --> 01:38:50,159
so

2237
01:38:50,159 --> 01:38:53,760
it can support arbitrary parts specify

2238
01:38:53,760 --> 01:38:57,199
srh and also we can start the probe from

2239
01:38:57,199 --> 01:38:58,960
uh any uh

2240
01:38:58,960 --> 01:39:01,840
any sr node and the terminator and

2241
01:39:01,840 --> 01:39:03,920
another another um

2242
01:39:03,920 --> 01:39:07,199
or even the same sr node so which means

2243
01:39:07,199 --> 01:39:09,760
it's very flexible to apply active

2244
01:39:09,760 --> 01:39:10,880
measurement

2245
01:39:10,880 --> 01:39:15,360
and also the forwarding is totally uh

2246
01:39:15,360 --> 01:39:18,719
determined by the srh that's why uh uh

2247
01:39:18,719 --> 01:39:22,239
using this we can also facefully reflect

2248
01:39:22,239 --> 01:39:23,040
the

2249
01:39:23,040 --> 01:39:26,639
uh data plane uh user traffic experience

2250
01:39:26,639 --> 01:39:29,600
uh it can has many possible potential

2251
01:39:29,600 --> 01:39:32,239
solution applications uh first lines to

2252
01:39:32,239 --> 01:39:35,199
achieve the next network wide visibility

2253
01:39:35,199 --> 01:39:37,280
uh we can use smart algorithms to

2254
01:39:37,280 --> 01:39:40,000
actually build the

2255
01:39:40,000 --> 01:39:42,320
the different sr uh

2256
01:39:42,320 --> 01:39:44,719
parts to cover the entire network

2257
01:39:44,719 --> 01:39:47,280
uh to for the for the network wide

2258
01:39:47,280 --> 01:39:49,840
health monitoring and troubleshooting

2259
01:39:49,840 --> 01:39:52,320
and also uh we can easily achieve the

2260
01:39:52,320 --> 01:39:54,960
alternative path probing for protection

2261
01:39:54,960 --> 01:39:57,040
traffic engineering or multi-parts load

2262
01:39:57,040 --> 01:39:59,119
balancing

2263
01:39:59,119 --> 01:39:59,920
and

2264
01:39:59,920 --> 01:40:02,960
with using this we can also easily to

2265
01:40:02,960 --> 01:40:05,760
achieve the symmetric or asymmetric

2266
01:40:05,760 --> 01:40:08,080
round-shift measurement so just so we

2267
01:40:08,080 --> 01:40:08,960
just

2268
01:40:08,960 --> 01:40:10,719
define the parts and the mixed package

2269
01:40:10,719 --> 01:40:13,440
return back to the south so we can get

2270
01:40:13,440 --> 01:40:15,678
the

2271
01:40:16,080 --> 01:40:17,679
measurement

2272
01:40:17,679 --> 01:40:21,199
um so this uh framework the general to

2273
01:40:21,199 --> 01:40:24,000
just to use a udp payload to encapsulate

2274
01:40:24,000 --> 01:40:27,360
the oem protocol header and the data

2275
01:40:27,360 --> 01:40:29,760
we can use a different

2276
01:40:29,760 --> 01:40:32,400
udp destination output number to

2277
01:40:32,400 --> 01:40:35,199
differentiate different protocols

2278
01:40:35,199 --> 01:40:36,960
sorry

2279
01:40:36,960 --> 01:40:41,600
uh and also we proposed to use a t flag

2280
01:40:41,600 --> 01:40:45,199
in srh flat field to indicate this as an

2281
01:40:45,199 --> 01:40:47,119
active pro package

2282
01:40:47,119 --> 01:40:49,440
uh this is important because without

2283
01:40:49,440 --> 01:40:52,800
such a flag the package may may be

2284
01:40:52,800 --> 01:40:55,600
mistakenly considered as a normal usage

2285
01:40:55,600 --> 01:40:58,480
user package better better sr nodes and

2286
01:40:58,480 --> 01:41:01,199
be ignored

2287
01:41:01,440 --> 01:41:05,280
so in this draft we mainly focus on ioam

2288
01:41:05,280 --> 01:41:07,040
as a

2289
01:41:07,040 --> 01:41:09,360
chief use case

2290
01:41:09,360 --> 01:41:13,360
and also there's another dropped

2291
01:41:13,360 --> 01:41:15,280
already being adopted by the working

2292
01:41:15,280 --> 01:41:16,080
group

2293
01:41:16,080 --> 01:41:18,480
it's talking about how to support as

2294
01:41:18,480 --> 01:41:19,760
stem

2295
01:41:19,760 --> 01:41:21,440
as a use case

2296
01:41:21,440 --> 01:41:23,920
but here we also suggest to arguments

2297
01:41:23,920 --> 01:41:26,880
that draft is this t flag to

2298
01:41:26,880 --> 01:41:27,920
indicate

2299
01:41:27,920 --> 01:41:30,560
the active environment package

2300
01:41:30,560 --> 01:41:32,400
and there are also other possible use

2301
01:41:32,400 --> 01:41:35,679
cases for example to support iom direct

2302
01:41:35,679 --> 01:41:39,440
uh export and or alternate marking uh

2303
01:41:39,440 --> 01:41:41,520
schemes or can be supported under the

2304
01:41:41,520 --> 01:41:43,119
same framework

2305
01:41:43,119 --> 01:41:45,600
so this slide shows uh

2306
01:41:45,600 --> 01:41:48,159
how the format

2307
01:41:48,159 --> 01:41:52,000
of the srv6 active environment with iom

2308
01:41:52,000 --> 01:41:53,600
i can uh

2309
01:41:53,600 --> 01:41:55,280
after the

2310
01:41:55,280 --> 01:41:56,800
srh header

2311
01:41:56,800 --> 01:41:59,840
follow is followed by a udp header

2312
01:41:59,840 --> 01:42:03,119
we can use a destination port

2313
01:42:03,119 --> 01:42:06,639
to indicate the payload of following it

2314
01:42:06,639 --> 01:42:08,480
is a iom

2315
01:42:08,480 --> 01:42:11,440
then we can apply the standard iom

2316
01:42:11,440 --> 01:42:14,960
header after as a udb payload

2317
01:42:14,960 --> 01:42:17,119
and there are some benefits for this

2318
01:42:17,119 --> 01:42:19,840
scheme is uh because i uh here uh

2319
01:42:19,840 --> 01:42:21,920
everything is already in standard

2320
01:42:21,920 --> 01:42:24,560
there's no need to uh have a new

2321
01:42:24,560 --> 01:42:26,080
standard proposal

2322
01:42:26,080 --> 01:42:28,639
and also iom can support flexible and

2323
01:42:28,639 --> 01:42:31,199
extensible data extension

2324
01:42:31,199 --> 01:42:32,480
and

2325
01:42:32,480 --> 01:42:34,800
since we encapsulate the entire ram in

2326
01:42:34,800 --> 01:42:36,960
the udp payload there's no basic

2327
01:42:36,960 --> 01:42:39,440
essentially there's no limit on segment

2328
01:42:39,440 --> 01:42:42,080
hubs we can support very long paths to

2329
01:42:42,080 --> 01:42:44,000
collect all the data

2330
01:42:44,000 --> 01:42:46,560
next slice

2331
01:42:47,040 --> 01:42:49,199
oh

2332
01:42:49,199 --> 01:42:51,360
i can't read it oh

2333
01:42:51,360 --> 01:42:53,760
why is it looks like this

2334
01:42:53,760 --> 01:42:55,280
um

2335
01:42:55,280 --> 01:42:57,040
okay um it's uh

2336
01:42:57,040 --> 01:42:58,880
applications um

2337
01:42:58,880 --> 01:43:01,440
i already talked about this um that's it

2338
01:43:01,440 --> 01:43:05,119
i will uh just um emphasize that

2339
01:43:05,119 --> 01:43:06,480
um

2340
01:43:06,480 --> 01:43:08,480
it's a it's a it's an easy way to

2341
01:43:08,480 --> 01:43:11,199
support you know it can be considered

2342
01:43:11,199 --> 01:43:14,400
another easy way to support iom for srv6

2343
01:43:14,400 --> 01:43:16,400
without drawbacks of

2344
01:43:16,400 --> 01:43:17,920
encapsulation

2345
01:43:17,920 --> 01:43:20,239
uh or the uh overhead

2346
01:43:20,239 --> 01:43:21,360
concerns

2347
01:43:21,360 --> 01:43:22,480
um

2348
01:43:22,480 --> 01:43:23,679
and also

2349
01:43:23,679 --> 01:43:26,560
we just use this as an active method to

2350
01:43:26,560 --> 01:43:28,960
measure the alternative parts um

2351
01:43:28,960 --> 01:43:32,080
long trip or the cover the entire

2352
01:43:32,080 --> 01:43:33,119
network

2353
01:43:33,119 --> 01:43:36,560
here we i list a reference another drop

2354
01:43:36,560 --> 01:43:38,719
to actually talk about how we can use

2355
01:43:38,719 --> 01:43:41,760
smart algorithms to actually calculate

2356
01:43:41,760 --> 01:43:44,560
the minimum number of passes to cover

2357
01:43:44,560 --> 01:43:46,639
cover the entire network

2358
01:43:46,639 --> 01:43:48,639
and that take advantage of the traffic

2359
01:43:48,639 --> 01:43:52,480
steering capability of srv6 to gain the

2360
01:43:52,480 --> 01:43:54,960
full network visibility

2361
01:43:54,960 --> 01:43:57,600
next slides

2362
01:44:00,000 --> 01:44:02,480
okay so next step we would like to

2363
01:44:02,480 --> 01:44:04,560
request for

2364
01:44:04,560 --> 01:44:06,480
working group adoption and

2365
01:44:06,480 --> 01:44:08,880
of course we will come all the comments

2366
01:44:08,880 --> 01:44:10,639
and the reviews

2367
01:44:10,639 --> 01:44:13,199
and uh in the next revision we also

2368
01:44:13,199 --> 01:44:16,239
consider to include other

2369
01:44:16,239 --> 01:44:17,520
issues

2370
01:44:17,520 --> 01:44:19,440
thank you

2371
01:44:19,440 --> 01:44:23,520
thanks how you uh greg please go ahead

2372
01:44:23,520 --> 01:44:25,679
presentation uh

2373
01:44:25,679 --> 01:44:28,719
clarification question uh so how this

2374
01:44:28,719 --> 01:44:30,880
proposal related to

2375
01:44:30,880 --> 01:44:33,280
uh ippm working group document that

2376
01:44:33,280 --> 01:44:38,400
defines iem encapsulation in ipv6

2377
01:44:38,400 --> 01:44:41,600
uh okay i think this one is a focus on

2378
01:44:41,600 --> 01:44:44,480
the active environment but that wise uh

2379
01:44:44,480 --> 01:44:47,119
i think it's a for the original use of

2380
01:44:47,119 --> 01:44:50,320
iom is a is considered as a hybrid

2381
01:44:50,320 --> 01:44:53,119
method and mean to encapsulate iom in

2382
01:44:53,119 --> 01:44:56,320
user traffic but here we just use it as

2383
01:44:56,320 --> 01:44:58,400
a dedicated probe

2384
01:44:58,400 --> 01:45:00,960
only for active

2385
01:45:00,960 --> 01:45:04,480
my my understanding that i am can be uh

2386
01:45:04,480 --> 01:45:05,679
applied

2387
01:45:05,679 --> 01:45:10,320
to uh active uh ip oem packets so to

2388
01:45:10,320 --> 01:45:13,440
achieve everything that you're proposing

2389
01:45:13,440 --> 01:45:15,040
so

2390
01:45:15,040 --> 01:45:17,440
i don't understand why you're

2391
01:45:17,440 --> 01:45:21,440
really emphasizing active4am ip active

2392
01:45:21,440 --> 01:45:26,880
ipom in service 6 uses uh regular

2393
01:45:26,880 --> 01:45:28,840
ipo m like

2394
01:45:28,840 --> 01:45:31,040
icmp or

2395
01:45:31,040 --> 01:45:33,440
ip encapsulated stamp

2396
01:45:33,440 --> 01:45:34,960
or bfd

2397
01:45:34,960 --> 01:45:36,080
so

2398
01:45:36,080 --> 01:45:39,040
yes explicit routing allows us

2399
01:45:39,040 --> 01:45:41,520
to engineer the path

2400
01:45:41,520 --> 01:45:44,960
that test packets takes so

2401
01:45:44,960 --> 01:45:48,880
it's equally applicable to

2402
01:45:48,880 --> 01:45:51,679
all known

2403
01:45:52,239 --> 01:45:54,239
oem in ip

2404
01:45:54,239 --> 01:45:58,639
so applying iom to that is uh

2405
01:45:58,639 --> 01:46:00,880
not a rocket science

2406
01:46:00,880 --> 01:46:03,920
um yes a unique feature of the iom you

2407
01:46:03,920 --> 01:46:06,080
also understand is that to we can

2408
01:46:06,080 --> 01:46:08,880
actually collect all the data along the

2409
01:46:08,880 --> 01:46:09,760
path

2410
01:46:09,760 --> 01:46:12,800
and while most other om techniques is

2411
01:46:12,800 --> 01:46:15,360
only uh work in the edge to edge or

2412
01:46:15,360 --> 01:46:17,360
end-to-end fashion so

2413
01:46:17,360 --> 01:46:20,320
i think iom can bring the unique um you

2414
01:46:20,320 --> 01:46:24,239
know benefits to this active environment

2415
01:46:24,239 --> 01:46:25,440
area

2416
01:46:25,440 --> 01:46:27,199
yeah but it appears that you are

2417
01:46:27,199 --> 01:46:28,400
proposing

2418
01:46:28,400 --> 01:46:31,520
a solution to problem that already

2419
01:46:31,520 --> 01:46:33,600
solved

2420
01:46:33,600 --> 01:46:34,480
uh

2421
01:46:34,480 --> 01:46:37,520
yeah as i said the that solution is uh

2422
01:46:37,520 --> 01:46:40,800
proposed to encapsulate the iom in uh

2423
01:46:40,800 --> 01:46:43,360
maybe in other extension headers and

2424
01:46:43,360 --> 01:46:45,440
it's intended to be used for user

2425
01:46:45,440 --> 01:46:47,199
traffic and also

2426
01:46:47,199 --> 01:46:50,000
um in my opinion it's a you know

2427
01:46:50,000 --> 01:46:50,960
it's a

2428
01:46:50,960 --> 01:46:53,600
it's bring some issues about

2429
01:46:53,600 --> 01:46:56,400
encapsulation encapsulating iom in the

2430
01:46:56,400 --> 01:47:00,560
effects header uh because of its uh

2431
01:47:00,560 --> 01:47:02,159
huge overhead

2432
01:47:02,159 --> 01:47:04,239
and also there's some

2433
01:47:04,239 --> 01:47:06,800
consideration about how to

2434
01:47:06,800 --> 01:47:10,080
actually use a as our ipv6 extension

2435
01:47:10,080 --> 01:47:11,440
header so

2436
01:47:11,440 --> 01:47:14,719
i think here we just avoid all those uh

2437
01:47:14,719 --> 01:47:17,440
issues and we can it can be deployed

2438
01:47:17,440 --> 01:47:20,000
immediately

2439
01:47:20,000 --> 01:47:22,480
i would propose uh if you

2440
01:47:22,480 --> 01:47:24,960
not happy with the um

2441
01:47:24,960 --> 01:47:27,840
iptm working group draft uh why not to

2442
01:47:27,840 --> 01:47:30,560
work with ippm working europe rather

2443
01:47:30,560 --> 01:47:32,480
than proposing uh

2444
01:47:32,480 --> 01:47:34,719
alternative solutions so

2445
01:47:34,719 --> 01:47:38,080
driving itf to standardize two ways to

2446
01:47:38,080 --> 01:47:39,360
uh inc

2447
01:47:39,360 --> 01:47:44,480
encapsulate iem in ipv6 so

2448
01:47:44,480 --> 01:47:48,880
general and special services that seems

2449
01:47:48,880 --> 01:47:52,639
um yeah not a good approach

2450
01:47:52,639 --> 01:47:54,400
you already see there's already another

2451
01:47:54,400 --> 01:47:56,560
working group crop talking about you a

2452
01:47:56,560 --> 01:47:58,320
supporting stamp under the same

2453
01:47:58,320 --> 01:48:01,199
framework so we already have this

2454
01:48:01,199 --> 01:48:05,719
why we just let's just use it

2455
01:48:05,760 --> 01:48:08,080
a step to go yeah no my understanding

2456
01:48:08,080 --> 01:48:09,440
that um

2457
01:48:09,440 --> 01:48:12,000
stem draft in spring working group is

2458
01:48:12,000 --> 01:48:13,440
informational

2459
01:48:13,440 --> 01:48:16,560
because it doesn't define anything so

2460
01:48:16,560 --> 01:48:18,159
but let's take it to the middle of this

2461
01:48:18,159 --> 01:48:20,480
thank you

2462
01:48:22,800 --> 01:48:24,159
okay thanks

2463
01:48:24,159 --> 01:48:26,320
are you are you there

2464
01:48:26,320 --> 01:48:29,040
you're up next

2465
01:48:29,119 --> 01:48:31,440
yeah so thank you chuck could you hear

2466
01:48:31,440 --> 01:48:32,560
me

2467
01:48:32,560 --> 01:48:34,320
yes we can

2468
01:48:34,320 --> 01:48:35,199
okay

2469
01:48:35,199 --> 01:48:37,600
this is which i'm from channel mobile

2470
01:48:37,600 --> 01:48:40,159
and uh

2471
01:48:40,159 --> 01:48:43,679
so this is a new draft it

2472
01:48:43,679 --> 01:48:45,119
gives some

2473
01:48:45,119 --> 01:48:47,920
good practice

2474
01:48:47,920 --> 01:48:49,040
to use

2475
01:48:49,040 --> 01:48:50,000
the

2476
01:48:50,000 --> 01:48:52,320
sr basics policy

2477
01:48:52,320 --> 01:48:54,159
let's see the requirements and the

2478
01:48:54,159 --> 01:48:56,320
proposal

2479
01:48:56,320 --> 01:48:58,239
here

2480
01:48:58,239 --> 01:49:00,400
let's see the application scenarios and

2481
01:49:00,400 --> 01:49:01,520
first

2482
01:49:01,520 --> 01:49:03,119
uh you know

2483
01:49:03,119 --> 01:49:04,560
uh some

2484
01:49:04,560 --> 01:49:06,719
enterprise customers

2485
01:49:06,719 --> 01:49:07,600
have

2486
01:49:07,600 --> 01:49:09,920
different kinds of services

2487
01:49:09,920 --> 01:49:10,880
with

2488
01:49:10,880 --> 01:49:12,480
different cues

2489
01:49:12,480 --> 01:49:15,520
they often hope to forward those

2490
01:49:15,520 --> 01:49:17,599
different services

2491
01:49:17,599 --> 01:49:22,239
with different sr policies

2492
01:49:22,480 --> 01:49:24,159
the policies

2493
01:49:24,159 --> 01:49:26,480
for one customer

2494
01:49:26,480 --> 01:49:29,679
we hope to form an

2495
01:49:29,679 --> 01:49:32,880
as our policy group

2496
01:49:32,880 --> 01:49:33,760
so

2497
01:49:33,760 --> 01:49:35,679
here's a as a

2498
01:49:35,679 --> 01:49:37,520
policy group

2499
01:49:37,520 --> 01:49:38,480
means

2500
01:49:38,480 --> 01:49:41,440
a special sr policy

2501
01:49:41,440 --> 01:49:44,239
which contains a group of

2502
01:49:44,239 --> 01:49:48,638
constituted isr policies

2503
01:49:49,440 --> 01:49:52,960
it can be identified by color and the

2504
01:49:52,960 --> 01:49:54,159
endpoint

2505
01:49:54,159 --> 01:49:57,760
on the highland uh it's the same with

2506
01:49:57,760 --> 01:49:59,599
isa policy

2507
01:49:59,599 --> 01:50:01,840
let's see the criteria

2508
01:50:01,840 --> 01:50:02,639
the

2509
01:50:02,639 --> 01:50:05,040
endpoints of the

2510
01:50:05,040 --> 01:50:07,679
constituent as a policy

2511
01:50:07,679 --> 01:50:08,880
and it's a

2512
01:50:08,880 --> 01:50:10,560
group

2513
01:50:10,560 --> 01:50:13,119
should be identical

2514
01:50:13,119 --> 01:50:14,960
and the color

2515
01:50:14,960 --> 01:50:18,719
of each constituted as a policy and

2516
01:50:18,719 --> 01:50:21,599
it's a isa policy group

2517
01:50:21,599 --> 01:50:23,440
should be different

2518
01:50:23,440 --> 01:50:25,679
so what's the the

2519
01:50:25,679 --> 01:50:27,520
what's the value

2520
01:50:27,520 --> 01:50:30,320
of the sr policy group

2521
01:50:30,320 --> 01:50:32,560
i think firstly

2522
01:50:32,560 --> 01:50:35,440
we can configure the policy

2523
01:50:35,440 --> 01:50:38,719
based on the customer with

2524
01:50:38,719 --> 01:50:40,159
different

2525
01:50:40,159 --> 01:50:43,679
sla services

2526
01:50:44,000 --> 01:50:45,119
it can

2527
01:50:45,119 --> 01:50:46,320
improve

2528
01:50:46,320 --> 01:50:47,760
the

2529
01:50:47,760 --> 01:50:49,280
efficiency

2530
01:50:49,280 --> 01:50:50,840
of the network

2531
01:50:50,840 --> 01:50:56,159
operation and it can also bring some

2532
01:50:57,280 --> 01:51:00,800
fallback solution or something like that

2533
01:51:00,800 --> 01:51:04,239
let's go to next slide

2534
01:51:05,199 --> 01:51:08,239
so how to use uh asap policy group

2535
01:51:08,239 --> 01:51:10,159
i think

2536
01:51:10,159 --> 01:51:12,000
firstly we should

2537
01:51:12,000 --> 01:51:13,199
study

2538
01:51:13,199 --> 01:51:14,080
the

2539
01:51:14,080 --> 01:51:16,000
traffic into

2540
01:51:16,000 --> 01:51:18,560
uh as a policy group

2541
01:51:18,560 --> 01:51:21,520
we can have two kind of

2542
01:51:21,520 --> 01:51:22,639
ways

2543
01:51:22,639 --> 01:51:26,639
first is a per fluid story

2544
01:51:26,639 --> 01:51:28,719
if you want to do that

2545
01:51:28,719 --> 01:51:30,639
you can

2546
01:51:30,639 --> 01:51:32,400
take two steps

2547
01:51:32,400 --> 01:51:34,639
first step you should

2548
01:51:34,639 --> 01:51:37,119
steering the flow

2549
01:51:37,119 --> 01:51:39,360
to the sr policy group

2550
01:51:39,360 --> 01:51:41,920
and the step 2

2551
01:51:41,920 --> 01:51:43,679
select the

2552
01:51:43,679 --> 01:51:48,480
constituent as a policy of the group

2553
01:51:48,480 --> 01:51:49,760
similar

2554
01:51:49,760 --> 01:51:53,840
for the policy-based story

2555
01:51:53,840 --> 01:51:55,520
and

2556
01:51:55,520 --> 01:51:58,560
the as our policy group

2557
01:51:58,560 --> 01:52:00,480
can be configured

2558
01:52:00,480 --> 01:52:02,719
manually

2559
01:52:02,719 --> 01:52:05,440
all distributed

2560
01:52:05,440 --> 01:52:07,520
by the controller

2561
01:52:07,520 --> 01:52:09,119
or you can

2562
01:52:09,119 --> 01:52:11,440
create through

2563
01:52:11,440 --> 01:52:14,639
odin automatically

2564
01:52:14,639 --> 01:52:17,840
next page

2565
01:52:21,520 --> 01:52:23,199
so here is a

2566
01:52:23,199 --> 01:52:25,599
use case how we use

2567
01:52:25,599 --> 01:52:27,360
the

2568
01:52:27,360 --> 01:52:29,599
policy group

2569
01:52:29,599 --> 01:52:32,960
in the figure we have three policies

2570
01:52:32,960 --> 01:52:35,119
the policy a

2571
01:52:35,119 --> 01:52:38,159
is a low

2572
01:52:38,159 --> 01:52:40,560
latency path

2573
01:52:40,560 --> 01:52:43,800
for the

2574
01:52:44,000 --> 01:52:45,599
vip customer

2575
01:52:45,599 --> 01:52:47,280
and the policy

2576
01:52:47,280 --> 01:52:48,560
b

2577
01:52:48,560 --> 01:52:50,480
is uh

2578
01:52:50,480 --> 01:52:53,440
the normal traffic for the

2579
01:52:53,440 --> 01:52:55,119
vip customer

2580
01:52:55,119 --> 01:52:57,199
and the policy c

2581
01:52:57,199 --> 01:53:00,639
is the normal traffic for the non-vip

2582
01:53:00,639 --> 01:53:02,159
customers

2583
01:53:02,159 --> 01:53:04,320
and

2584
01:53:04,800 --> 01:53:06,239
we use

2585
01:53:06,239 --> 01:53:09,119
the dsap

2586
01:53:09,119 --> 01:53:12,880
to map to the color

2587
01:53:12,880 --> 01:53:15,119
so let's see how it works

2588
01:53:15,119 --> 01:53:16,880
when the

2589
01:53:16,880 --> 01:53:18,239
pe one

2590
01:53:18,239 --> 01:53:21,199
receives the traffic

2591
01:53:21,199 --> 01:53:22,800
which

2592
01:53:22,800 --> 01:53:25,840
maybe is a as a policy group

2593
01:53:25,840 --> 01:53:29,599
from p1 to p2

2594
01:53:29,599 --> 01:53:31,040
firstly

2595
01:53:31,040 --> 01:53:33,440
it matches the

2596
01:53:33,440 --> 01:53:36,080
sr policy group according to the next

2597
01:53:36,080 --> 01:53:39,440
hope and the color of the root

2598
01:53:39,440 --> 01:53:40,400
and then

2599
01:53:40,400 --> 01:53:41,520
fans

2600
01:53:41,520 --> 01:53:43,920
constitute as a policy

2601
01:53:43,920 --> 01:53:46,480
in the corresponding group

2602
01:53:46,480 --> 01:53:50,080
according to the dsap

2603
01:53:50,719 --> 01:53:52,400
and

2604
01:53:52,400 --> 01:53:56,400
the voice traffic of the vip customers

2605
01:53:56,400 --> 01:53:57,760
uh

2606
01:53:57,760 --> 01:53:59,360
will

2607
01:53:59,360 --> 01:54:01,920
will be forwarded to

2608
01:54:01,920 --> 01:54:03,920
the low latency

2609
01:54:03,920 --> 01:54:07,199
uh constitute i suppose a

2610
01:54:07,199 --> 01:54:09,760
and the other traffic of the vip

2611
01:54:09,760 --> 01:54:11,280
customers

2612
01:54:11,280 --> 01:54:14,560
will be forwarded to

2613
01:54:14,560 --> 01:54:15,520
the

2614
01:54:15,520 --> 01:54:16,639
policy

2615
01:54:16,639 --> 01:54:18,080
b

2616
01:54:18,080 --> 01:54:19,440
and uh

2617
01:54:19,440 --> 01:54:22,880
the non-vip customers traffic

2618
01:54:22,880 --> 01:54:24,880
will be

2619
01:54:24,880 --> 01:54:28,639
carried by the policy c

2620
01:54:28,639 --> 01:54:30,639
in the so

2621
01:54:30,639 --> 01:54:33,360
it will provide a very good

2622
01:54:33,360 --> 01:54:34,960
solution

2623
01:54:34,960 --> 01:54:36,960
the other use case

2624
01:54:36,960 --> 01:54:40,080
is a fallback solution

2625
01:54:40,080 --> 01:54:42,960
for the assault policy group a four bank

2626
01:54:42,960 --> 01:54:43,920
pass

2627
01:54:43,920 --> 01:54:45,520
may be

2628
01:54:45,520 --> 01:54:46,639
one

2629
01:54:46,639 --> 01:54:48,320
default

2630
01:54:48,320 --> 01:54:49,760
policy

2631
01:54:49,760 --> 01:54:51,920
in israel policy group

2632
01:54:51,920 --> 01:54:54,400
or is the best effort to pass

2633
01:54:54,400 --> 01:54:55,760
in uh

2634
01:54:55,760 --> 01:54:57,280
as a

2635
01:54:57,280 --> 01:54:59,119
policy group

2636
01:54:59,119 --> 01:54:59,920
so

2637
01:54:59,920 --> 01:55:01,520
let's see

2638
01:55:01,520 --> 01:55:02,840
when the

2639
01:55:02,840 --> 01:55:04,639
traffic

2640
01:55:04,639 --> 01:55:06,719
running

2641
01:55:06,719 --> 01:55:09,520
there are two

2642
01:55:09,520 --> 01:55:12,000
kind of

2643
01:55:12,239 --> 01:55:13,599
conditions

2644
01:55:13,599 --> 01:55:16,800
happen we can use for back pass

2645
01:55:16,800 --> 01:55:19,920
the first one if there's a

2646
01:55:19,920 --> 01:55:23,520
new constituted isr policy

2647
01:55:23,520 --> 01:55:26,239
to match for the traffic

2648
01:55:26,239 --> 01:55:29,679
then the flu can be folded through the

2649
01:55:29,679 --> 01:55:33,679
fallback pass the second

2650
01:55:33,679 --> 01:55:34,560
so

2651
01:55:34,560 --> 01:55:36,400
there's no available

2652
01:55:36,400 --> 01:55:40,320
constitute as a policy

2653
01:55:40,639 --> 01:55:43,040
except for back pass

2654
01:55:43,040 --> 01:55:45,119
then the traffic can be

2655
01:55:45,119 --> 01:55:47,520
through the forbade path so it will

2656
01:55:47,520 --> 01:55:48,639
provide

2657
01:55:48,639 --> 01:55:51,520
some solution

2658
01:55:51,679 --> 01:55:52,960
in

2659
01:55:52,960 --> 01:55:54,719
some

2660
01:55:54,719 --> 01:55:56,480
application scenario

2661
01:55:56,480 --> 01:56:00,119
so next page

2662
01:56:02,000 --> 01:56:04,719
uh that's all and any questions or

2663
01:56:04,719 --> 01:56:07,119
comments

2664
01:56:10,159 --> 01:56:11,520
uh

2665
01:56:11,520 --> 01:56:15,840
thanks uh waiting approved

2666
01:56:16,880 --> 01:56:19,440
if you can confirm uh we have like you

2667
01:56:19,440 --> 01:56:22,159
know sr policy with composite candidate

2668
01:56:22,159 --> 01:56:23,280
path

2669
01:56:23,280 --> 01:56:24,960
are you calling the what is the main

2670
01:56:24,960 --> 01:56:27,040
difference between that and what you

2671
01:56:27,040 --> 01:56:30,320
call as sr policy group is it the way

2672
01:56:30,320 --> 01:56:32,400
that you are steering inside the sr

2673
01:56:32,400 --> 01:56:36,159
policy is that the main difference

2674
01:56:36,719 --> 01:56:38,480
oh uh

2675
01:56:38,480 --> 01:56:41,119
so uh ciao could you

2676
01:56:41,119 --> 01:56:42,960
page to

2677
01:56:42,960 --> 01:56:45,440
the second slide

2678
01:56:45,440 --> 01:56:47,199
i i think

2679
01:56:47,199 --> 01:56:48,800
i i understand

2680
01:56:48,800 --> 01:56:51,360
your meaning

2681
01:56:51,920 --> 01:56:52,719
so

2682
01:56:52,719 --> 01:56:55,679
joy could you page the

2683
01:56:55,679 --> 01:56:59,440
page two of the slides

2684
01:57:00,880 --> 01:57:01,679
yeah

2685
01:57:01,679 --> 01:57:02,719
so

2686
01:57:02,719 --> 01:57:05,040
in fact

2687
01:57:05,040 --> 01:57:06,440
i think it

2688
01:57:06,440 --> 01:57:07,840
[Music]

2689
01:57:07,840 --> 01:57:12,480
as a policy group in fact the reprisance

2690
01:57:12,480 --> 01:57:15,360
composite candidate in the past

2691
01:57:15,360 --> 01:57:18,320
which defined in

2692
01:57:18,320 --> 01:57:21,520
segmented routing policy draft i i think

2693
01:57:21,520 --> 01:57:25,679
i agree with you but in the draft

2694
01:57:25,679 --> 01:57:27,040
it didn't

2695
01:57:27,040 --> 01:57:28,800
give any

2696
01:57:28,800 --> 01:57:30,080
use case

2697
01:57:30,080 --> 01:57:32,400
or how we can use that

2698
01:57:32,400 --> 01:57:33,520
so here

2699
01:57:33,520 --> 01:57:34,239
uh

2700
01:57:34,239 --> 01:57:36,960
when we deployed

2701
01:57:36,960 --> 01:57:41,119
sr uh policy in our network

2702
01:57:41,119 --> 01:57:43,840
uh we found that the

2703
01:57:43,840 --> 01:57:46,880
uh solution is good but

2704
01:57:46,880 --> 01:57:49,360
how to use it we should give some

2705
01:57:49,360 --> 01:57:50,560
detailed

2706
01:57:50,560 --> 01:57:54,239
solution so that's why we write this

2707
01:57:54,239 --> 01:57:57,840
draft we call that a use case dropped

2708
01:57:57,840 --> 01:57:58,960
and

2709
01:57:58,960 --> 01:58:01,199
hope

2710
01:58:02,159 --> 01:58:04,080
other operators

2711
01:58:04,080 --> 01:58:05,440
can

2712
01:58:05,440 --> 01:58:07,040
use the best

2713
01:58:07,040 --> 01:58:08,320
practice

2714
01:58:08,320 --> 01:58:09,599
sets

2715
01:58:09,599 --> 01:58:11,440
but in this case i think the biggest

2716
01:58:11,440 --> 01:58:13,760
issue is that the you are deviating from

2717
01:58:13,760 --> 01:58:15,280
what is defined

2718
01:58:15,280 --> 01:58:16,800
uh in the

2719
01:58:16,800 --> 01:58:18,639
architecture sr policy architecture

2720
01:58:18,639 --> 01:58:20,800
graph where it says that in case of

2721
01:58:20,800 --> 01:58:23,520
composite sr policies you will be doing

2722
01:58:23,520 --> 01:58:26,320
load balancing based on the weights but

2723
01:58:26,320 --> 01:58:28,639
here what you are proposing is that you

2724
01:58:28,639 --> 01:58:29,760
wanna do

2725
01:58:29,760 --> 01:58:33,119
uh like you know send via vip traffic on

2726
01:58:33,119 --> 01:58:35,760
one and non-vip traffic on another i

2727
01:58:35,760 --> 01:58:38,239
think that's not part of the

2728
01:58:38,239 --> 01:58:40,480
draft anyway uh since we are out of time

2729
01:58:40,480 --> 01:58:42,159
i'll take my question

2730
01:58:42,159 --> 01:58:43,679
to the list and i'll let other people

2731
01:58:43,679 --> 01:58:46,679
speak

2732
01:58:53,199 --> 01:58:55,520
uh yeah i just wanted to point out that

2733
01:58:55,520 --> 01:58:57,280
like the unit of signaling is the

2734
01:58:57,280 --> 01:59:00,960
candidate path so when you say uh it's a

2735
01:59:00,960 --> 01:59:03,679
it's a special sr policy

2736
01:59:03,679 --> 01:59:05,920
it's really like a special sr candidate

2737
01:59:05,920 --> 01:59:08,159
path within a policy

2738
01:59:08,159 --> 01:59:10,880
uh and second uh i think yeah we should

2739
01:59:10,880 --> 01:59:13,119
uh put something in the

2740
01:59:13,119 --> 01:59:15,360
sr policy architecture draft about the

2741
01:59:15,360 --> 01:59:16,880
uh

2742
01:59:16,880 --> 01:59:19,040
about the possibility at least to sig to

2743
01:59:19,040 --> 01:59:21,679
send traffic using the dscp uh or

2744
01:59:21,679 --> 01:59:23,599
whatever else instead of or or in

2745
01:59:23,599 --> 01:59:25,520
addition to the weight

2746
01:59:25,520 --> 01:59:28,719
uh that's that's all for me

2747
01:59:28,719 --> 01:59:31,360
yeah i understand in a

2748
01:59:31,360 --> 01:59:32,800
uh

2749
01:59:32,800 --> 01:59:34,000
in fact

2750
01:59:34,000 --> 01:59:36,000
uh for the

2751
01:59:36,000 --> 01:59:37,119
sr

2752
01:59:37,119 --> 01:59:39,920
uh policy group i think that may be some

2753
01:59:39,920 --> 01:59:41,280
hierarchical

2754
01:59:41,280 --> 01:59:42,800
uh solution

2755
01:59:42,800 --> 01:59:45,210
uh i think that is

2756
01:59:45,210 --> 01:59:47,199
[Music]

2757
01:59:47,199 --> 01:59:49,440
we maybe

2758
01:59:49,440 --> 01:59:52,560
need to define some more thing

2759
01:59:52,560 --> 01:59:53,440
uh

2760
01:59:53,440 --> 01:59:56,960
to make it uh work wire

2761
01:59:56,960 --> 02:00:00,800
no i i don't think so i mean because um

2762
02:00:00,800 --> 02:00:03,040
it's basically just uh you know the unit

2763
02:00:03,040 --> 02:00:04,719
of signaling is the candidate path like

2764
02:00:04,719 --> 02:00:06,719
you don't need to signal

2765
02:00:06,719 --> 02:00:08,159
you know you can have a policy with just

2766
02:00:08,159 --> 02:00:10,239
one candidate path right

2767
02:00:10,239 --> 02:00:11,920
or you know you can have multiple

2768
02:00:11,920 --> 02:00:14,480
candidate paths

2769
02:00:14,480 --> 02:00:15,599
so

2770
02:00:15,599 --> 02:00:17,520
you can

2771
02:00:17,520 --> 02:00:18,320
uh

2772
02:00:18,320 --> 02:00:20,400
put a restriction that like a policy can

2773
02:00:20,400 --> 02:00:21,520
have

2774
02:00:21,520 --> 02:00:23,040
you know one candidate path if it's

2775
02:00:23,040 --> 02:00:24,239
composite

2776
02:00:24,239 --> 02:00:26,800
or something like that yeah

2777
02:00:26,800 --> 02:00:28,719
i'm going to have to sorry change i'm

2778
02:00:28,719 --> 02:00:30,159
going to interrupt here because we got

2779
02:00:30,159 --> 02:00:31,840
seven minutes left and one one more

2780
02:00:31,840 --> 02:00:34,400
presentation so to be fair to them

2781
02:00:34,400 --> 02:00:37,199
um guyan and boris uh you're in the

2782
02:00:37,199 --> 02:00:38,800
queue if uh

2783
02:00:38,800 --> 02:00:41,119
if you can be quick please go ahead guy

2784
02:00:41,119 --> 02:00:42,960
in first

2785
02:00:42,960 --> 02:00:46,480
just a quick question is this some

2786
02:00:46,480 --> 02:00:48,239
draft i guess that you mentioned like

2787
02:00:48,239 --> 02:00:50,880
composites or are you are you i guess

2788
02:00:50,880 --> 02:00:52,159
seems like you're doing some type of

2789
02:00:52,159 --> 02:00:53,920
mapping but is this introducing

2790
02:00:53,920 --> 02:00:55,199
something new

2791
02:00:55,199 --> 02:00:57,679
i guess to the sr policy and it sounds

2792
02:00:57,679 --> 02:01:00,320
like it is and if it is i mean i guess

2793
02:01:00,320 --> 02:01:02,239
the concept of actually adding i guess

2794
02:01:02,239 --> 02:01:04,320
addition to weights i guess with mapping

2795
02:01:04,320 --> 02:01:05,760
of dscp

2796
02:01:05,760 --> 02:01:09,199
with something like this as the uh the

2797
02:01:09,199 --> 02:01:12,639
sr policy draft has not been is is still

2798
02:01:12,639 --> 02:01:14,320
being developed and it's not an rfc

2799
02:01:14,320 --> 02:01:16,320
could some of this actually

2800
02:01:16,320 --> 02:01:19,119
this work be combined into the

2801
02:01:19,119 --> 02:01:21,679
existing lsr policy draft iron just a

2802
02:01:21,679 --> 02:01:23,440
thought thank you

2803
02:01:23,440 --> 02:01:27,679
well it's actually on the roc so um

2804
02:01:27,679 --> 02:01:29,199
so let's

2805
02:01:29,199 --> 02:01:30,639
yeah let's take let's take this to the

2806
02:01:30,639 --> 02:01:34,400
list and uh boris um unless uh if you

2807
02:01:34,400 --> 02:01:36,480
can be very very quick

2808
02:01:36,480 --> 02:01:38,400
yes thank you jim

2809
02:01:38,400 --> 02:01:41,040
very short question so please update the

2810
02:01:41,040 --> 02:01:44,080
draft with implementation status as it

2811
02:01:44,080 --> 02:01:46,320
will be possible thank you

2812
02:01:46,320 --> 02:01:48,320
thanks

2813
02:01:48,320 --> 02:01:51,320
thanks

2814
02:01:54,480 --> 02:01:56,719
okay joel uh you you just pointed out to

2815
02:01:56,719 --> 02:02:00,159
me my my uh laptop is showing me 924 but

2816
02:02:00,159 --> 02:02:02,719
i just looked at my phone and it's 9 31.

2817
02:02:02,719 --> 02:02:06,400
so i guess we're actually out of time

2818
02:02:06,800 --> 02:02:09,119
apologies to the circuit switched

2819
02:02:09,119 --> 02:02:11,280
segment routing presentation but we are

2820
02:02:11,280 --> 02:02:15,280
just we are out of time at this point

2821
02:02:15,599 --> 02:02:18,400
and so we are required to end it here

2822
02:02:18,400 --> 02:02:20,159
thank you very much everyone for your

2823
02:02:20,159 --> 02:02:21,199
time

2824
02:02:21,199 --> 02:02:24,960
take all the discussions to the list

2825
02:02:26,560 --> 02:02:28,960
thank you

2826
02:02:29,599 --> 02:02:32,920
thank you everyone

2827
02:02:35,440 --> 02:02:36,719
and hopefully we'll see you all in

2828
02:02:36,719 --> 02:02:39,719
philadelphia

2829
02:02:49,679 --> 02:02:52,679
okay

2830
02:03:41,040 --> 02:03:43,840
that's the end of that

2831
02:04:08,639 --> 02:04:10,719
you

