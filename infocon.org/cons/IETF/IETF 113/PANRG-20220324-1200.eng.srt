1
00:00:05,040 --> 00:00:05,920
not be

2
00:00:05,920 --> 00:00:08,720
inside meeting but through the mobile my

3
00:00:08,720 --> 00:00:10,800
multiple personalities couldn't join the

4
00:00:10,800 --> 00:00:13,840
meeting at the same time okay

5
00:00:13,840 --> 00:00:17,360
okay concrete

6
00:00:18,340 --> 00:00:21,370
[Music]

7
00:00:22,000 --> 00:00:23,920
okay beautiful okay

8
00:00:23,920 --> 00:00:25,680
yeah so what i was saying is that in

9
00:00:25,680 --> 00:00:28,080
case of troubles just write me taco on

10
00:00:28,080 --> 00:00:31,479
the chat

11
00:00:41,760 --> 00:00:44,760
david

12
00:00:55,520 --> 00:00:58,520
okay

13
00:01:03,120 --> 00:01:04,879
okay

14
00:01:04,879 --> 00:01:05,760
shall we

15
00:01:05,760 --> 00:01:09,880
shall we start hello

16
00:01:12,159 --> 00:01:15,600
i'm quite sure we have my con

17
00:01:18,159 --> 00:01:21,119
good afternoon

18
00:01:21,200 --> 00:01:22,720
uh

19
00:01:22,720 --> 00:01:25,280
announcement which is not on the slides

20
00:01:25,280 --> 00:01:28,479
when you scan the qr code use one which

21
00:01:28,479 --> 00:01:30,799
is on the screen and not try to use the

22
00:01:30,799 --> 00:01:32,799
paper one because it didn't work for me

23
00:01:32,799 --> 00:01:35,680
i'm not sure if it still works

24
00:01:35,680 --> 00:01:38,079
maybe it works actually

25
00:01:38,079 --> 00:01:39,040
uh

26
00:01:39,040 --> 00:01:41,200
this is for

27
00:01:41,200 --> 00:01:43,040
energy

28
00:01:43,040 --> 00:01:47,200
so i hope everyone is in the right room

29
00:01:48,320 --> 00:01:49,680
finally

30
00:01:49,680 --> 00:01:54,680
we're here in person i'm very excited

31
00:01:55,119 --> 00:01:57,200
this is

32
00:01:57,200 --> 00:01:59,680
not well

33
00:01:59,680 --> 00:02:00,719
please

34
00:02:00,719 --> 00:02:02,479
read it if you have not seen it before

35
00:02:02,479 --> 00:02:05,439
it's irtf specific note well

36
00:02:05,439 --> 00:02:07,040
which lists

37
00:02:07,040 --> 00:02:09,598
everything you need to know

38
00:02:09,598 --> 00:02:12,560
and it also reminds you to be polite and

39
00:02:12,560 --> 00:02:15,520
be nice to other people

40
00:02:15,520 --> 00:02:16,879
as much as you can

41
00:02:16,879 --> 00:02:19,440
and even better

42
00:02:19,440 --> 00:02:22,640
um housekeeping so yes i say please car

43
00:02:22,640 --> 00:02:25,440
scan qr code which would allow you to

44
00:02:25,440 --> 00:02:27,120
join the microphone key

45
00:02:27,120 --> 00:02:29,760
so when you would like to ask a question

46
00:02:29,760 --> 00:02:31,440
don't just run to the microphone but

47
00:02:31,440 --> 00:02:33,840
press the button in your phone to join

48
00:02:33,840 --> 00:02:36,480
the queue so we can have a

49
00:02:36,480 --> 00:02:38,959
the common queue for both virtual and

50
00:02:38,959 --> 00:02:40,959
in-person participants

51
00:02:40,959 --> 00:02:42,640
when you speak into the microphone

52
00:02:42,640 --> 00:02:43,760
please

53
00:02:43,760 --> 00:02:45,360
say your name

54
00:02:45,360 --> 00:02:48,400
so we know who you are

55
00:02:48,879 --> 00:02:51,440
for people who are not able to join us

56
00:02:51,440 --> 00:02:53,360
in person who are remote

57
00:02:53,360 --> 00:02:54,720
please

58
00:02:54,720 --> 00:02:57,200
keep your audio and video off unless you

59
00:02:57,200 --> 00:02:59,360
are speaking and then you can join the

60
00:02:59,360 --> 00:03:02,080
queue if you'd like to ask question and

61
00:03:02,080 --> 00:03:04,000
then you can say you probably should

62
00:03:04,000 --> 00:03:06,959
send audio but you may say send video as

63
00:03:06,959 --> 00:03:08,720
well

64
00:03:08,720 --> 00:03:10,560
so

65
00:03:10,560 --> 00:03:15,680
for speakers if you are remote please

66
00:03:15,680 --> 00:03:18,159
use share preloaded slides button and

67
00:03:18,159 --> 00:03:20,400
the miter echo and select your

68
00:03:20,400 --> 00:03:24,480
presentation and have control

69
00:03:24,480 --> 00:03:27,200
ah oh yes indeed usual thing we need a

70
00:03:27,200 --> 00:03:30,679
minutes taker

71
00:03:33,920 --> 00:03:36,319
i will allocate and agenda 15 minutes to

72
00:03:36,319 --> 00:03:40,159
find the minus taker next time

73
00:03:40,159 --> 00:03:43,679
so we can get to our slot

74
00:03:43,760 --> 00:03:45,440
please

75
00:03:45,440 --> 00:03:48,319
corey can you uh

76
00:03:48,319 --> 00:03:50,159
can i ask you to take minutes

77
00:03:50,159 --> 00:03:53,599
glory have you volunteered

78
00:03:54,319 --> 00:03:56,400
corey fergus will volunteer and glorify

79
00:03:56,400 --> 00:03:58,000
hearst will make announcement we the

80
00:03:58,000 --> 00:04:02,000
minute taker for tsvwg tomorrow

81
00:04:02,000 --> 00:04:04,239
but i'll take minutes now i i would i

82
00:04:04,239 --> 00:04:06,879
would love to take minutes in tspwd but

83
00:04:06,879 --> 00:04:08,959
i'm flying out tonight yeah and i'm not

84
00:04:08,959 --> 00:04:12,400
there as well i'm sorry yeah

85
00:04:12,400 --> 00:04:16,959
next time next time

86
00:04:17,199 --> 00:04:18,320
okay

87
00:04:18,320 --> 00:04:19,680
so

88
00:04:19,680 --> 00:04:23,199
thanks gareth and also uh carsten uh

89
00:04:23,199 --> 00:04:25,680
will be helping you out

90
00:04:25,680 --> 00:04:28,400
beautiful thank you thank you very much

91
00:04:28,400 --> 00:04:30,960
so agenda for today

92
00:04:30,960 --> 00:04:32,880
uh

93
00:04:32,880 --> 00:04:35,840
we have pretty busy agenda uh time

94
00:04:35,840 --> 00:04:38,400
permitting section where we have spencer

95
00:04:38,400 --> 00:04:42,479
has been dropped spencer just told me so

96
00:04:42,479 --> 00:04:43,440
listen

97
00:04:43,440 --> 00:04:45,440
but i still hope to hear from you next

98
00:04:45,440 --> 00:04:47,440
time

99
00:04:47,440 --> 00:04:50,479
um so what's going on in this group

100
00:04:50,479 --> 00:04:52,320
since last eight year we published

101
00:04:52,320 --> 00:04:55,520
another secret nutrition brand thank you

102
00:04:55,520 --> 00:04:58,880
we have and so now we have questions

103
00:04:58,880 --> 00:05:00,400
we have

104
00:05:00,400 --> 00:05:02,320
things which you've done in the past

105
00:05:02,320 --> 00:05:05,039
wrong thanks to spencer summarizing them

106
00:05:05,039 --> 00:05:08,000
and we have one active document which is

107
00:05:08,000 --> 00:05:10,240
past properties which will be we'll be

108
00:05:10,240 --> 00:05:13,360
discussing next i guess

109
00:05:13,360 --> 00:05:14,560
so

110
00:05:14,560 --> 00:05:18,479
uh is it i guess it's the last slide

111
00:05:18,479 --> 00:05:19,440
and

112
00:05:19,440 --> 00:05:20,639
i do want to say something about the

113
00:05:20,639 --> 00:05:24,360
last part oh yeah

114
00:05:26,080 --> 00:05:28,720
uh i i see some faces in here who were

115
00:05:28,720 --> 00:05:32,160
in the um scion side meeting on i guess

116
00:05:32,160 --> 00:05:34,080
that was tuesday

117
00:05:34,080 --> 00:05:35,520
um

118
00:05:35,520 --> 00:05:37,520
there was a lot of discussion there

119
00:05:37,520 --> 00:05:40,160
about sort of how to take uh bits of

120
00:05:40,160 --> 00:05:43,680
scion some of which are are um

121
00:05:43,680 --> 00:05:45,360
sort of behind this path properties

122
00:05:45,360 --> 00:05:47,039
draft uh some of which have been

123
00:05:47,039 --> 00:05:48,720
discussed here and there

124
00:05:48,720 --> 00:05:51,039
uh within tanergy um how best to bring

125
00:05:51,039 --> 00:05:54,240
that into the irtf and ietf

126
00:05:54,240 --> 00:05:56,160
um

127
00:05:56,160 --> 00:05:59,120
i think it makes sense

128
00:05:59,120 --> 00:06:01,759
uh to have a virtual interim between now

129
00:06:01,759 --> 00:06:04,080
and philadelphia um

130
00:06:04,080 --> 00:06:06,400
to dig into that question right like so

131
00:06:06,400 --> 00:06:09,360
we'd ask uh people um

132
00:06:09,360 --> 00:06:11,680
uh from scion and people with interest

133
00:06:11,680 --> 00:06:13,759
in this topic uh to get together at that

134
00:06:13,759 --> 00:06:15,039
at that virtual interim meeting and

135
00:06:15,039 --> 00:06:16,080
it'll be

136
00:06:16,080 --> 00:06:18,319
um a bit more of

137
00:06:18,319 --> 00:06:22,880
like a brainstorming thing than a um

138
00:06:22,880 --> 00:06:25,280
uh and a you know let's look at

139
00:06:25,280 --> 00:06:26,960
presentation sort of thing

140
00:06:26,960 --> 00:06:29,039
um

141
00:06:29,039 --> 00:06:31,039
we will follow up on the list uh to

142
00:06:31,039 --> 00:06:33,759
figure out the right time to do this uh

143
00:06:33,759 --> 00:06:34,639
and

144
00:06:34,639 --> 00:06:36,240
like any suggestions that people might

145
00:06:36,240 --> 00:06:38,639
have with respect to the format of that

146
00:06:38,639 --> 00:06:40,560
uh but i think there is an opportunity

147
00:06:40,560 --> 00:06:41,680
here to

148
00:06:41,680 --> 00:06:42,880
figure out which bits of that work

149
00:06:42,880 --> 00:06:44,960
belong in this research group

150
00:06:44,960 --> 00:06:46,960
uh and maybe provide that project with

151
00:06:46,960 --> 00:06:49,120
guidance for how to engage with with

152
00:06:49,120 --> 00:06:51,039
parts of that within boston and the ietf

153
00:06:51,039 --> 00:06:52,160
as well

154
00:06:52,160 --> 00:06:54,160
so uh yeah we can take

155
00:06:54,160 --> 00:06:57,440
comments on that point uh spencer

156
00:06:57,440 --> 00:07:00,400
is in queue yeah spencer dawkins i was

157
00:07:00,400 --> 00:07:01,759
just gonna say

158
00:07:01,759 --> 00:07:03,520
unless you can think of a good reason

159
00:07:03,520 --> 00:07:06,080
why this might be a bad idea i would

160
00:07:06,080 --> 00:07:08,319
encourage you to go ahead and schedule

161
00:07:08,319 --> 00:07:09,199
it

162
00:07:09,199 --> 00:07:11,599
as early as possible so that

163
00:07:11,599 --> 00:07:13,840
some of us who haven't been paying as

164
00:07:13,840 --> 00:07:14,479
close attention have an opportunity

165
00:07:14,479 --> 00:07:17,479
available

166
00:07:30,639 --> 00:07:31,599
so

167
00:07:31,599 --> 00:07:33,360
the next

168
00:07:33,360 --> 00:07:34,880
presentation

169
00:07:34,880 --> 00:07:35,840
is

170
00:07:35,840 --> 00:07:38,560
past properties draft so

171
00:07:38,560 --> 00:07:41,360
yeah uh

172
00:07:41,680 --> 00:07:43,680
well uh

173
00:07:43,680 --> 00:07:46,479
i um

174
00:07:46,479 --> 00:07:49,520
okay uh

175
00:07:50,639 --> 00:07:52,479
uh

176
00:07:52,479 --> 00:07:54,000
what's wrong

177
00:07:54,000 --> 00:07:57,840
okay yeah that's not now should work yes

178
00:07:57,840 --> 00:08:01,919
uh grand prix loaded slides

179
00:08:02,080 --> 00:08:03,440
oh

180
00:08:03,440 --> 00:08:06,400
hello zero can you hear us hello yeah

181
00:08:06,400 --> 00:08:08,960
can you hear me as well we can how's

182
00:08:08,960 --> 00:08:12,240
that is that okay for people in the back

183
00:08:12,240 --> 00:08:13,919
yeah

184
00:08:13,919 --> 00:08:15,520
say something else cyril

185
00:08:15,520 --> 00:08:18,000
hello hello let's test

186
00:08:18,000 --> 00:08:19,680
okay good

187
00:08:19,680 --> 00:08:21,440
perfect

188
00:08:21,440 --> 00:08:24,879
um i'm not sure yet i see this light

189
00:08:24,879 --> 00:08:27,680
i think i gave you here you have to do

190
00:08:27,680 --> 00:08:29,440
the

191
00:08:29,440 --> 00:08:31,680
what is it well i gave you

192
00:08:31,680 --> 00:08:34,320
ah okay

193
00:08:35,839 --> 00:08:38,320
my fault my fault

194
00:08:38,320 --> 00:08:42,240
my brain is oh wait i

195
00:08:42,240 --> 00:08:44,560
uh sure yeah sorry sorry

196
00:08:44,560 --> 00:08:48,719
i my brain is not working as you might

197
00:08:49,680 --> 00:08:54,160
share share preloaded slides

198
00:08:54,160 --> 00:08:55,279
hold on

199
00:08:55,279 --> 00:08:57,440
sorry

200
00:08:57,440 --> 00:08:59,360
okay

201
00:08:59,360 --> 00:09:01,600
you have to stop sharing your slides

202
00:09:01,600 --> 00:09:04,080
yeah it's what i'm gonna go back over to

203
00:09:04,080 --> 00:09:06,399
yeah have you not done that i think i've

204
00:09:06,399 --> 00:09:07,680
done that

205
00:09:07,680 --> 00:09:10,320
that's that's my problem okay it's like

206
00:09:10,320 --> 00:09:12,640
uh

207
00:09:12,880 --> 00:09:14,800
what i'm doing wrong

208
00:09:14,800 --> 00:09:18,880
try this shampoo slice

209
00:09:19,360 --> 00:09:21,040
uh

210
00:09:21,040 --> 00:09:22,640
where are the pre-loaded slides coming

211
00:09:22,640 --> 00:09:24,800
from here are you are you sure you're

212
00:09:24,800 --> 00:09:26,560
not logged in twice

213
00:09:26,560 --> 00:09:28,959
no i can i can be locked twice i tried

214
00:09:28,959 --> 00:09:30,880
it's not possible okay

215
00:09:30,880 --> 00:09:33,200
uh

216
00:09:33,440 --> 00:09:36,399
uh okay let's do this

217
00:09:36,399 --> 00:09:37,279
okay

218
00:09:37,279 --> 00:09:41,040
oh yeah oh my god yeah there we go

219
00:09:41,040 --> 00:09:42,160
share

220
00:09:42,160 --> 00:09:44,399
and now i'm getting

221
00:09:44,399 --> 00:09:46,080
yes ah got it

222
00:09:46,080 --> 00:09:47,360
okay

223
00:09:47,360 --> 00:09:49,360
10 minutes later

224
00:09:49,360 --> 00:09:51,519
sorry

225
00:09:51,519 --> 00:09:53,200
okay you should have control

226
00:09:53,200 --> 00:09:54,560
yeah

227
00:09:54,560 --> 00:09:56,640
perfect

228
00:09:56,640 --> 00:09:58,720
um yeah so today i'll give you a quick

229
00:09:58,720 --> 00:10:00,720
update on the path property draft i'm

230
00:10:00,720 --> 00:10:02,880
sorry my voice is a bit

231
00:10:02,880 --> 00:10:04,959
it's

232
00:10:04,959 --> 00:10:07,200
but i think i should manage that 10 15

233
00:10:07,200 --> 00:10:08,560
minutes

234
00:10:08,560 --> 00:10:10,240
um yeah i will try to keep the

235
00:10:10,240 --> 00:10:11,760
presentation short so we have some time

236
00:10:11,760 --> 00:10:14,399
for feedback

237
00:10:14,480 --> 00:10:16,640
um so the biggest change we did since

238
00:10:16,640 --> 00:10:18,720
the last version is that we replaced

239
00:10:18,720 --> 00:10:21,440
host with endpoint so we removed the

240
00:10:21,440 --> 00:10:23,120
standalone definition of host we had

241
00:10:23,120 --> 00:10:24,079
before

242
00:10:24,079 --> 00:10:25,839
and we now have a new definition of an

243
00:10:25,839 --> 00:10:26,959
endpoint

244
00:10:26,959 --> 00:10:29,120
which is defined as the first or last

245
00:10:29,120 --> 00:10:32,000
node on a path

246
00:10:32,000 --> 00:10:33,680
i think one thing that's interesting to

247
00:10:33,680 --> 00:10:35,600
note here is that actually in the

248
00:10:35,600 --> 00:10:37,519
beginning we had already the term end

249
00:10:37,519 --> 00:10:39,200
point in our draft this was when this

250
00:10:39,200 --> 00:10:42,800
was not an iot of irt graph by the draft

251
00:10:42,800 --> 00:10:44,320
of freeze

252
00:10:44,320 --> 00:10:47,600
but we decided to um go to use term host

253
00:10:47,600 --> 00:10:49,600
because it was not clearly defined

254
00:10:49,600 --> 00:10:50,880
but since the

255
00:10:50,880 --> 00:10:52,560
the draft has seen a lot of change in

256
00:10:52,560 --> 00:10:54,000
the last um

257
00:10:54,000 --> 00:10:55,360
iterations

258
00:10:55,360 --> 00:10:57,440
we think that now and we can finally

259
00:10:57,440 --> 00:10:59,040
have this definition of endpoint and

260
00:10:59,040 --> 00:11:01,440
it's also clear and

261
00:11:01,440 --> 00:11:02,959
correct

262
00:11:02,959 --> 00:11:05,839
and of course naturally from this

263
00:11:05,839 --> 00:11:08,240
definition of an end point we have the

264
00:11:08,240 --> 00:11:09,760
definition of an end-to-end path

265
00:11:09,760 --> 00:11:13,519
property which is simply a path property

266
00:11:13,519 --> 00:11:15,279
defined on both end points and the

267
00:11:15,279 --> 00:11:17,440
virtual link between them

268
00:11:17,440 --> 00:11:19,519
which is very useful since many concepts

269
00:11:19,519 --> 00:11:21,440
are defined using this end-to-end

270
00:11:21,440 --> 00:11:23,519
principle

271
00:11:23,519 --> 00:11:24,800
and

272
00:11:24,800 --> 00:11:26,640
as a result of this we replaced most

273
00:11:26,640 --> 00:11:28,959
occurrences of host in the draft with

274
00:11:28,959 --> 00:11:31,040
endpoint i think we left one or two

275
00:11:31,040 --> 00:11:32,399
where we thought host is more

276
00:11:32,399 --> 00:11:33,920
appropriate but most of most of them

277
00:11:33,920 --> 00:11:37,199
were were changed

278
00:11:38,320 --> 00:11:40,480
and then

279
00:11:40,480 --> 00:11:42,959
from the discussions we had previously

280
00:11:42,959 --> 00:11:46,000
we felt it was not clear enough um

281
00:11:46,000 --> 00:11:48,079
why um the definitions are context

282
00:11:48,079 --> 00:11:50,079
dependent so we added some short text to

283
00:11:50,079 --> 00:11:51,839
section 2.1

284
00:11:51,839 --> 00:11:53,440
and what we want to express there is

285
00:11:53,440 --> 00:11:56,320
that even a single part where technology

286
00:11:56,320 --> 00:11:58,480
might have different definitions right

287
00:11:58,480 --> 00:11:59,839
they might disuse these terms

288
00:11:59,839 --> 00:12:01,360
differently

289
00:12:01,360 --> 00:12:03,279
depending on the context

290
00:12:03,279 --> 00:12:05,360
so one example i thought of is maybe a

291
00:12:05,360 --> 00:12:07,680
scion where we have these path segments

292
00:12:07,680 --> 00:12:09,680
so the routing only

293
00:12:09,680 --> 00:12:11,680
works on these path segments

294
00:12:11,680 --> 00:12:14,560
but then for actual data traffic data

295
00:12:14,560 --> 00:12:16,079
plane then works on

296
00:12:16,079 --> 00:12:18,160
combined data of segments that are

297
00:12:18,160 --> 00:12:19,920
combined into paths so

298
00:12:19,920 --> 00:12:21,360
there the notion of a path will be

299
00:12:21,360 --> 00:12:22,839
different for one

300
00:12:22,839 --> 00:12:24,720
technology depending if you look at the

301
00:12:24,720 --> 00:12:27,200
routing side or the

302
00:12:27,200 --> 00:12:30,000
data plane side

303
00:12:31,120 --> 00:12:33,519
and then we added a new

304
00:12:33,519 --> 00:12:35,200
definition which is a routing domain

305
00:12:35,200 --> 00:12:36,800
identifier

306
00:12:36,800 --> 00:12:38,880
this was due to a discussion in the

307
00:12:38,880 --> 00:12:40,079
mailing list

308
00:12:40,079 --> 00:12:42,320
where this came up

309
00:12:42,320 --> 00:12:44,480
and we defined the routing

310
00:12:44,480 --> 00:12:46,399
domain as follows so path elements with

311
00:12:46,399 --> 00:12:48,800
the same routing identifier are in the

312
00:12:48,800 --> 00:12:51,279
same administrative domain

313
00:12:51,279 --> 00:12:53,440
use a common routing protocol

314
00:12:53,440 --> 00:12:55,200
and they communicate with each other

315
00:12:55,200 --> 00:12:58,480
using this specific protocol

316
00:12:58,480 --> 00:13:00,240
and the other classical example would be

317
00:13:00,240 --> 00:13:03,040
the as number and another example could

318
00:13:03,040 --> 00:13:07,639
maybe be an ospf area identifier

319
00:13:09,279 --> 00:13:12,160
and then we have a lot of minor changes

320
00:13:12,160 --> 00:13:15,120
so we added the discussion menu section

321
00:13:15,120 --> 00:13:16,800
which contains a link to the mailing

322
00:13:16,800 --> 00:13:17,920
list and

323
00:13:17,920 --> 00:13:20,480
a link to the github repository where we

324
00:13:20,480 --> 00:13:21,920
have the draft and where we have issues

325
00:13:21,920 --> 00:13:24,959
where we discuss all the changes

326
00:13:24,959 --> 00:13:27,040
and one thing that we realized when we

327
00:13:27,040 --> 00:13:29,600
updated the routing domain identifier

328
00:13:29,600 --> 00:13:31,440
was that the administrative domain

329
00:13:31,440 --> 00:13:33,519
property was kind of recursively defined

330
00:13:33,519 --> 00:13:34,959
which is a bit weird

331
00:13:34,959 --> 00:13:35,920
so we

332
00:13:35,920 --> 00:13:37,920
rephrased this to make it more

333
00:13:37,920 --> 00:13:40,240
natural

334
00:13:40,240 --> 00:13:41,920
and then we extended the acknowledgement

335
00:13:41,920 --> 00:13:44,240
section

336
00:13:45,839 --> 00:13:48,000
so that's already the end of my

337
00:13:48,000 --> 00:13:50,800
presentation i think what i would like

338
00:13:50,800 --> 00:13:52,720
to hear most from you is your thoughts

339
00:13:52,720 --> 00:13:54,480
on this new endpoint definition right we

340
00:13:54,480 --> 00:13:56,320
already had endpoint before we removed

341
00:13:56,320 --> 00:13:58,320
it in favor of host and now we

342
00:13:58,320 --> 00:13:59,760
reintroduced it

343
00:13:59,760 --> 00:14:01,839
so there i kind of have two questions do

344
00:14:01,839 --> 00:14:03,519
you think it's sufficient

345
00:14:03,519 --> 00:14:06,560
so um does our definition now cover all

346
00:14:06,560 --> 00:14:07,839
possible

347
00:14:07,839 --> 00:14:10,000
um endpoints that you could think of or

348
00:14:10,000 --> 00:14:12,079
is there something that is not covered

349
00:14:12,079 --> 00:14:13,199
and um

350
00:14:13,199 --> 00:14:16,079
on the other hand is it necessary so do

351
00:14:16,079 --> 00:14:17,120
we

352
00:14:17,120 --> 00:14:18,800
is our definition too broad do we

353
00:14:18,800 --> 00:14:22,399
include um entities that would not count

354
00:14:22,399 --> 00:14:24,000
as an endpoint but they are still

355
00:14:24,000 --> 00:14:26,720
defined as an endpoint in our draft

356
00:14:26,720 --> 00:14:28,720
so what do you think how precise is our

357
00:14:28,720 --> 00:14:30,480
definition

358
00:14:30,480 --> 00:14:32,320
and uh another thing that we would like

359
00:14:32,320 --> 00:14:34,480
to do is to

360
00:14:34,480 --> 00:14:35,920
fairly soon finalize the main

361
00:14:35,920 --> 00:14:37,680
definitions

362
00:14:37,680 --> 00:14:39,600
and one thing that

363
00:14:39,600 --> 00:14:41,600
me and rhys thought when we discussed

364
00:14:41,600 --> 00:14:44,240
this is that once this main definitions

365
00:14:44,240 --> 00:14:46,959
are clear are finalized

366
00:14:46,959 --> 00:14:48,800
probably there will be very little thing

367
00:14:48,800 --> 00:14:51,120
left to do because the rest of the draft

368
00:14:51,120 --> 00:14:53,199
is essentially a non-exhaustive list of

369
00:14:53,199 --> 00:14:54,880
properties so

370
00:14:54,880 --> 00:14:56,399
we could keep it open for a very long

371
00:14:56,399 --> 00:14:58,480
time or we could just say this is the

372
00:14:58,480 --> 00:15:00,800
state now what we think is useful and

373
00:15:00,800 --> 00:15:02,240
the main definition will not change so

374
00:15:02,240 --> 00:15:03,279
we could

375
00:15:03,279 --> 00:15:06,800
would ask for a last call

376
00:15:07,040 --> 00:15:11,120
um yeah that's all it from my side

377
00:15:11,199 --> 00:15:13,279
i'm open for questions and comments on

378
00:15:13,279 --> 00:15:16,079
on these changes

379
00:15:17,839 --> 00:15:22,600
comments etc on the endpoint

380
00:15:33,279 --> 00:15:36,920
i will put my phone

381
00:15:40,480 --> 00:15:41,680
um

382
00:15:41,680 --> 00:15:45,440
hi cyril uh brian grahamel google as an

383
00:15:45,440 --> 00:15:46,560
individual

384
00:15:46,560 --> 00:15:47,759
uh

385
00:15:47,759 --> 00:15:50,079
i quite like the endpoint definition uh

386
00:15:50,079 --> 00:15:53,120
i think it is

387
00:15:53,440 --> 00:15:55,600
i think it's sufficient in that i can't

388
00:15:55,600 --> 00:15:57,519
think of a thing that i would think

389
00:15:57,519 --> 00:15:59,360
might be an endpoint in a pathway

390
00:15:59,360 --> 00:16:00,800
network that is not covered by it but i

391
00:16:00,800 --> 00:16:02,399
mean it's just basically yeah it's a

392
00:16:02,399 --> 00:16:03,920
node at the end of a path right it's a

393
00:16:03,920 --> 00:16:06,000
pretty good and then node is also

394
00:16:06,000 --> 00:16:08,079
properly defined

395
00:16:08,079 --> 00:16:10,079
is it

396
00:16:10,079 --> 00:16:12,880
necessary

397
00:16:13,120 --> 00:16:14,639
um

398
00:16:14,639 --> 00:16:15,920
i think that the fact that we're having

399
00:16:15,920 --> 00:16:18,160
this discussion is is the indication

400
00:16:18,160 --> 00:16:19,519
that it's necessary right like if we

401
00:16:19,519 --> 00:16:20,959
don't have a definition for endpoint

402
00:16:20,959 --> 00:16:22,160
people are going to ask where it is

403
00:16:22,160 --> 00:16:23,120
right

404
00:16:23,120 --> 00:16:24,480
um

405
00:16:24,480 --> 00:16:25,360
so

406
00:16:25,360 --> 00:16:26,800
uh

407
00:16:26,800 --> 00:16:27,680
yes

408
00:16:27,680 --> 00:16:29,440
i like i think both of the both the

409
00:16:29,440 --> 00:16:31,120
conditions hold so thank you very much

410
00:16:31,120 --> 00:16:32,240
for

411
00:16:32,240 --> 00:16:34,160
um you know

412
00:16:34,160 --> 00:16:37,040
your patience uh yours and rhys's

413
00:16:37,040 --> 00:16:38,480
patience with going back and forth on

414
00:16:38,480 --> 00:16:42,160
this um this is you know hard stuff to

415
00:16:42,160 --> 00:16:43,360
pin down

416
00:16:43,360 --> 00:16:45,279
um

417
00:16:45,279 --> 00:16:46,880
i will

418
00:16:46,880 --> 00:16:49,920
reserve comment on ready for last call

419
00:16:49,920 --> 00:16:52,480
uh and let other people maybe talk about

420
00:16:52,480 --> 00:16:55,600
or maybe we should just do a razor

421
00:16:55,600 --> 00:16:58,240
like a show of hands poll for that

422
00:16:58,240 --> 00:17:00,480
yeah

423
00:17:00,720 --> 00:17:02,480
yeah i guess we can discuss last call on

424
00:17:02,480 --> 00:17:05,639
the list

425
00:17:06,500 --> 00:17:09,549
[Music]

426
00:17:10,079 --> 00:17:11,520
do you want to do it or should i do it

427
00:17:11,520 --> 00:17:13,119
let's figure out how this tool works i

428
00:17:13,119 --> 00:17:14,880
think it's like right here right

429
00:17:14,880 --> 00:17:16,079
all right

430
00:17:16,079 --> 00:17:19,119
okay uh if you know how it is i think so

431
00:17:19,119 --> 00:17:21,438
um

432
00:17:29,600 --> 00:17:31,760
so starting a session uh

433
00:17:31,760 --> 00:17:34,320
ray's hand means yes uh i believe path

434
00:17:34,320 --> 00:17:36,240
properties is ready for last call

435
00:17:36,240 --> 00:17:38,640
do not raise hand is no i think we need

436
00:17:38,640 --> 00:17:41,200
to um

437
00:17:41,200 --> 00:17:42,799
talk about something before we are ready

438
00:17:42,799 --> 00:17:46,520
to last call this document

439
00:17:49,360 --> 00:17:53,240
leave this open for

440
00:18:02,720 --> 00:18:03,840
um

441
00:18:03,840 --> 00:18:05,520
would anyone who did not raise their

442
00:18:05,520 --> 00:18:08,480
hand like to put themselves in queue

443
00:18:08,480 --> 00:18:10,880
and uh let us know what we think is

444
00:18:10,880 --> 00:18:13,880
missing

445
00:18:21,360 --> 00:18:22,480
all right we'll go ahead and close that

446
00:18:22,480 --> 00:18:24,400
off i think we have we have a pretty

447
00:18:24,400 --> 00:18:25,760
good signal here but but i'd like to

448
00:18:25,760 --> 00:18:28,480
know what's missing for for people who

449
00:18:28,480 --> 00:18:30,640
did not raise their hands

450
00:18:30,640 --> 00:18:32,960
um just brian you might want to ask how

451
00:18:32,960 --> 00:18:34,960
many people have read a recent version

452
00:18:34,960 --> 00:18:36,880
because that might also help you figure

453
00:18:36,880 --> 00:18:40,799
things out ah yes good point

454
00:18:40,880 --> 00:18:42,640
yeah because this change or definition

455
00:18:42,640 --> 00:18:44,000
of endpoint is really recent this is

456
00:18:44,000 --> 00:18:46,400
from this latest draft so i think there

457
00:18:46,400 --> 00:18:48,160
might be some people that do not agree

458
00:18:48,160 --> 00:18:50,400
with especially this this part

459
00:18:50,400 --> 00:18:52,080
it's also nice and short so people can

460
00:18:52,080 --> 00:18:53,440
probably read it right now while they're

461
00:18:53,440 --> 00:18:54,559
considering whether or not they want to

462
00:18:54,559 --> 00:18:57,639
get into

463
00:18:58,559 --> 00:19:00,160
yeah this text-wise it's very little

464
00:19:00,160 --> 00:19:02,400
change

465
00:19:04,160 --> 00:19:06,400
spencer dawkins

466
00:19:06,400 --> 00:19:07,440
i

467
00:19:07,440 --> 00:19:08,960
one of the reasons i did not raise my

468
00:19:08,960 --> 00:19:10,400
hand was because

469
00:19:10,400 --> 00:19:11,679
i was still trying to figure out where

470
00:19:11,679 --> 00:19:13,440
the tab was

471
00:19:13,440 --> 00:19:15,679
where i could click on it and i mean i

472
00:19:15,679 --> 00:19:18,400
was doing email and stuff so please plus

473
00:19:18,400 --> 00:19:20,960
one to whatever you got

474
00:19:20,960 --> 00:19:24,200
thank you

475
00:19:27,919 --> 00:19:29,120
dungeon

476
00:19:29,120 --> 00:19:32,400
uh yes uh get you here

477
00:19:32,400 --> 00:19:35,200
so the rotting domain id just defined

478
00:19:35,200 --> 00:19:37,039
here well you know i

479
00:19:37,039 --> 00:19:39,200
you know in my my opinion it might be a

480
00:19:39,200 --> 00:19:40,960
little bit ambiguous

481
00:19:40,960 --> 00:19:43,360
for for something like for example in

482
00:19:43,360 --> 00:19:45,760
the the running product or isis it

483
00:19:45,760 --> 00:19:47,919
doesn't use the domain

484
00:19:47,919 --> 00:19:51,440
for some purpose so i'm not sure if you

485
00:19:51,440 --> 00:19:54,240
find this as a generic generic term

486
00:19:54,240 --> 00:19:55,679
uh

487
00:19:55,679 --> 00:19:58,880
well that conflict has some ambiguity

488
00:19:58,880 --> 00:20:02,480
with some special running protocols

489
00:20:02,480 --> 00:20:03,919
yeah like

490
00:20:03,919 --> 00:20:07,840
as the domain does have its own meaning

491
00:20:07,840 --> 00:20:10,480
so thank you

492
00:20:11,120 --> 00:20:13,840
um yeah i would like that the things we

493
00:20:13,840 --> 00:20:15,200
define especially for example this

494
00:20:15,200 --> 00:20:18,000
routing domain identifier is um

495
00:20:18,000 --> 00:20:18,840
just

496
00:20:18,840 --> 00:20:20,799
uh

497
00:20:20,799 --> 00:20:22,000
kind of a

498
00:20:22,000 --> 00:20:23,760
generic identifier right definitely this

499
00:20:23,760 --> 00:20:26,799
needs to be defined um

500
00:20:26,799 --> 00:20:29,200
in like in specific when you talk about

501
00:20:29,200 --> 00:20:30,720
one specific um

502
00:20:30,720 --> 00:20:33,280
routing protocol like bgp scion or

503
00:20:33,280 --> 00:20:34,640
whatever

504
00:20:34,640 --> 00:20:36,240
so this is more like to give an idea

505
00:20:36,240 --> 00:20:38,480
what could be useful right and we think

506
00:20:38,480 --> 00:20:40,799
um a way to group nodes

507
00:20:40,799 --> 00:20:43,440
based on their kind of ownership in a

508
00:20:43,440 --> 00:20:45,120
way their administrative domain and that

509
00:20:45,120 --> 00:20:47,360
they can communicate with other is

510
00:20:47,360 --> 00:20:48,480
is useful

511
00:20:48,480 --> 00:20:50,480
and that's why we added this

512
00:20:50,480 --> 00:20:52,640
at this part property

513
00:20:52,640 --> 00:20:53,440
okay

514
00:20:53,440 --> 00:20:55,520
yeah okay yeah thank you just like to

515
00:20:55,520 --> 00:20:58,640
share my opinion about you know your

516
00:20:58,640 --> 00:21:02,720
generic term or some specific term

517
00:21:05,440 --> 00:21:07,039
i think i'd actually go back and ask

518
00:21:07,039 --> 00:21:08,720
corey's question now real quick just to

519
00:21:08,720 --> 00:21:11,200
get one more bit of

520
00:21:11,200 --> 00:21:12,559
data um

521
00:21:12,559 --> 00:21:14,080
so i'm gonna ask for another show of

522
00:21:14,080 --> 00:21:16,000
hands

523
00:21:16,000 --> 00:21:17,760
as for who has read

524
00:21:17,760 --> 00:21:19,760
the path properties

525
00:21:19,760 --> 00:21:22,760
draft

526
00:21:32,640 --> 00:21:34,000
roughly as many people have read it as

527
00:21:34,000 --> 00:21:36,400
think it's ready for last call so that's

528
00:21:36,400 --> 00:21:39,039
um that's cool uh max has joined the

529
00:21:39,039 --> 00:21:41,360
queue

530
00:21:42,640 --> 00:21:44,080
you're trying to raise your hand okay

531
00:21:44,080 --> 00:21:45,280
got it

532
00:21:45,280 --> 00:21:47,360
okay i think that's

533
00:21:47,360 --> 00:21:50,880
okay i think you my laptop is okay i'm

534
00:21:50,880 --> 00:21:53,039
gonna drive because you're a laptop yes

535
00:21:53,039 --> 00:21:54,480
okay good

536
00:21:54,480 --> 00:21:56,240
um

537
00:21:56,240 --> 00:21:57,679
so

538
00:21:57,679 --> 00:21:58,559
so

539
00:21:58,559 --> 00:22:00,480
of the 19 of you please uh consider

540
00:22:00,480 --> 00:22:02,400
reading the draft it's quite short

541
00:22:02,400 --> 00:22:03,360
um

542
00:22:03,360 --> 00:22:05,200
and um uh

543
00:22:05,200 --> 00:22:06,799
you know speaking as an individual very

544
00:22:06,799 --> 00:22:09,760
entertaining um yeah and so the next

545
00:22:09,760 --> 00:22:13,440
talk is about service awareness yes

546
00:22:13,440 --> 00:22:16,000
versus passover

547
00:22:16,000 --> 00:22:17,650
so you need to

548
00:22:17,650 --> 00:22:18,880
[Music]

549
00:22:18,880 --> 00:22:22,240
share i need to share preload yes and it

550
00:22:22,240 --> 00:22:23,520
should be

551
00:22:23,520 --> 00:22:24,840
this one this

552
00:22:24,840 --> 00:22:27,039
one sure

553
00:22:27,039 --> 00:22:28,960
and

554
00:22:28,960 --> 00:22:30,480
then i need to go to presentation view

555
00:22:30,480 --> 00:22:32,480
okay and i will drive so just say next

556
00:22:32,480 --> 00:22:34,720
slide

557
00:22:34,720 --> 00:22:36,400
uh

558
00:22:36,400 --> 00:22:38,240
find a microphone

559
00:22:38,240 --> 00:22:41,480
right here

560
00:22:43,320 --> 00:22:46,450
[Music]

561
00:22:50,640 --> 00:22:54,000
where is that all over the place

562
00:22:54,000 --> 00:22:55,280
like like right here in the middle of

563
00:22:55,280 --> 00:22:57,360
the line when i go blind

564
00:22:57,360 --> 00:22:59,440
okay yeah there we go right there

565
00:22:59,440 --> 00:23:00,950
okay okay

566
00:23:00,950 --> 00:23:03,520
[Music]

567
00:23:03,520 --> 00:23:06,000
um right

568
00:23:06,000 --> 00:23:08,880
this title adjusted to the context of

569
00:23:08,880 --> 00:23:10,559
this group

570
00:23:10,559 --> 00:23:11,440
um

571
00:23:11,440 --> 00:23:14,000
is about how to use proxies and a new

572
00:23:14,000 --> 00:23:16,320
way of suggesting how you could maybe do

573
00:23:16,320 --> 00:23:19,520
it please next slide

574
00:23:20,559 --> 00:23:22,960
okay so the problem that this is about

575
00:23:22,960 --> 00:23:25,919
is that um performance enhancing proxies

576
00:23:25,919 --> 00:23:27,679
have existed for a long time people hate

577
00:23:27,679 --> 00:23:28,400
them

578
00:23:28,400 --> 00:23:31,679
they try to help out in tcp

579
00:23:31,679 --> 00:23:33,679
and

580
00:23:33,679 --> 00:23:36,640
in fact you know because

581
00:23:36,640 --> 00:23:37,520
well

582
00:23:37,520 --> 00:23:39,600
they sometimes do something useful right

583
00:23:39,600 --> 00:23:42,799
they have good intentions

584
00:23:42,880 --> 00:23:45,120
well intended but but you know terrible

585
00:23:45,120 --> 00:23:47,600
outcomes of ossification of

586
00:23:47,600 --> 00:23:49,520
playing tricks to tcp that they have to

587
00:23:49,520 --> 00:23:51,760
do and this is why we all hate them

588
00:23:51,760 --> 00:23:53,679
so quick has started encrypting the

589
00:23:53,679 --> 00:23:56,000
header large part of it

590
00:23:56,000 --> 00:23:58,080
which makes it impossible to introduce

591
00:23:58,080 --> 00:23:59,600
ossification and also makes it

592
00:23:59,600 --> 00:24:02,080
impossible to help the transfer

593
00:24:02,080 --> 00:24:03,600
in the network

594
00:24:03,600 --> 00:24:05,600
which has the outcome that people are

595
00:24:05,600 --> 00:24:07,600
now making presentations about how quick

596
00:24:07,600 --> 00:24:09,679
does not work as well as tcp over

597
00:24:09,679 --> 00:24:11,600
satellite link

598
00:24:11,600 --> 00:24:13,520
i'm guessing i don't know if anybody's

599
00:24:13,520 --> 00:24:15,279
tried quick over millimeter wave but i'm

600
00:24:15,279 --> 00:24:17,520
guessing it just won't work

601
00:24:17,520 --> 00:24:19,279
so whenever you have anything you know

602
00:24:19,279 --> 00:24:20,880
in the network that that requires

603
00:24:20,880 --> 00:24:22,080
special attention but you're actually

604
00:24:22,080 --> 00:24:25,360
happy to have a proxy that is a no-go

605
00:24:25,360 --> 00:24:26,640
and uh

606
00:24:26,640 --> 00:24:28,720
so this is my effort to retrofit and

607
00:24:28,720 --> 00:24:30,960
this is probably where you want to throw

608
00:24:30,960 --> 00:24:33,120
stuff at me

609
00:24:33,120 --> 00:24:34,559
retrofit

610
00:24:34,559 --> 00:24:37,360
proxies into uh quick

611
00:24:37,360 --> 00:24:38,240
now

612
00:24:38,240 --> 00:24:39,360
okay

613
00:24:39,360 --> 00:24:40,960
first of all i claim that the

614
00:24:40,960 --> 00:24:44,080
ossification problem is probably at

615
00:24:44,080 --> 00:24:45,760
least partially due to the fact that

616
00:24:45,760 --> 00:24:48,559
these proxies are transparent right

617
00:24:48,559 --> 00:24:50,720
by their nature they have to lie to tcp

618
00:24:50,720 --> 00:24:52,559
they cheat they do things that are not

619
00:24:52,559 --> 00:24:54,240
supposed to be happening and that's why

620
00:24:54,240 --> 00:24:55,679
they make assumptions about the header

621
00:24:55,679 --> 00:24:57,200
that are not supposed supposed to be

622
00:24:57,200 --> 00:24:58,400
made

623
00:24:58,400 --> 00:25:00,240
and that's how we cannot upgrade the

624
00:25:00,240 --> 00:25:02,240
protocol properly

625
00:25:02,240 --> 00:25:04,159
using a proxy that is authenticated

626
00:25:04,159 --> 00:25:06,880
known signal tool things could be done

627
00:25:06,880 --> 00:25:09,279
differently in principle

628
00:25:09,279 --> 00:25:10,480
mask is

629
00:25:10,480 --> 00:25:12,960
a candidate for that

630
00:25:12,960 --> 00:25:15,520
uh thinking about whether it would be a

631
00:25:15,520 --> 00:25:18,080
good idea of adding pep functions there

632
00:25:18,080 --> 00:25:20,240
i guess some people might think yes some

633
00:25:20,240 --> 00:25:22,159
people might think no

634
00:25:22,159 --> 00:25:25,279
there is an obvious issue here that if

635
00:25:25,279 --> 00:25:26,080
we

636
00:25:26,080 --> 00:25:28,080
start adding a specific function then we

637
00:25:28,080 --> 00:25:30,320
build a reliance on that function in the

638
00:25:30,320 --> 00:25:32,159
network and not everybody may be happy

639
00:25:32,159 --> 00:25:33,120
with

640
00:25:33,120 --> 00:25:34,720
the outcomes of that

641
00:25:34,720 --> 00:25:36,960
we may reintroduce ossification if we

642
00:25:36,960 --> 00:25:38,240
don't do it right if we get it right

643
00:25:38,240 --> 00:25:40,080
maybe that could work

644
00:25:40,080 --> 00:25:43,679
here's another proposal next slide

645
00:25:43,679 --> 00:25:45,279
uh what we suggest is to do this

646
00:25:45,279 --> 00:25:46,559
differently

647
00:25:46,559 --> 00:25:48,720
using separation of concerns the idea is

648
00:25:48,720 --> 00:25:50,799
to use a separate protocol that we call

649
00:25:50,799 --> 00:25:53,120
sidecar

650
00:25:53,120 --> 00:25:55,520
strictly meant only for

651
00:25:55,520 --> 00:25:57,279
pep functions you would never rely on it

652
00:25:57,279 --> 00:25:59,279
for anything you wouldn't rely on this

653
00:25:59,279 --> 00:26:02,000
being you know giving you reliability in

654
00:26:02,000 --> 00:26:04,400
in the data transfer for example

655
00:26:04,400 --> 00:26:06,240
but it's like an opt-in performance

656
00:26:06,240 --> 00:26:08,799
improvement

657
00:26:08,960 --> 00:26:12,320
it's hard to breathe while i speak here

658
00:26:12,320 --> 00:26:13,360
okay

659
00:26:13,360 --> 00:26:15,120
um

660
00:26:15,120 --> 00:26:17,520
yes and the non-criticality of that

661
00:26:17,520 --> 00:26:20,159
thing is is ensured by uh

662
00:26:20,159 --> 00:26:22,640
letting the main protocol explicitly opt

663
00:26:22,640 --> 00:26:25,200
in choose the service via an interface

664
00:26:25,200 --> 00:26:26,880
and that interface

665
00:26:26,880 --> 00:26:28,720
at least the way we think about it is

666
00:26:28,720 --> 00:26:30,320
that this interface would be on a local

667
00:26:30,320 --> 00:26:32,720
host only so on the host you would for

668
00:26:32,720 --> 00:26:34,480
instance talk to a library

669
00:26:34,480 --> 00:26:36,640
that supports that over an api and that

670
00:26:36,640 --> 00:26:38,640
library offers a service and you take it

671
00:26:38,640 --> 00:26:40,799
or you don't for a specific connection

672
00:26:40,799 --> 00:26:41,919
right and

673
00:26:41,919 --> 00:26:43,200
you may

674
00:26:43,200 --> 00:26:45,200
expect that this comes with a certain

675
00:26:45,200 --> 00:26:46,799
you know compromising anonymity for

676
00:26:46,799 --> 00:26:48,320
example when you know the directs in

677
00:26:48,320 --> 00:26:50,400
place but that's part of the contract so

678
00:26:50,400 --> 00:26:52,000
you deal with it or not depending on

679
00:26:52,000 --> 00:26:55,039
what the transfer is

680
00:26:55,120 --> 00:26:56,880
a plan is to minimize changes to the

681
00:26:56,880 --> 00:26:59,120
main protocols of the main protocol you

682
00:26:59,120 --> 00:27:01,760
couldn't really help quick much without

683
00:27:01,760 --> 00:27:03,520
changing it at all

684
00:27:03,520 --> 00:27:05,600
but the idea is to make it as minimal as

685
00:27:05,600 --> 00:27:07,600
we possibly can

686
00:27:07,600 --> 00:27:10,240
and if we get this right then ossifying

687
00:27:10,240 --> 00:27:11,600
the sidecar would mean that the

688
00:27:11,600 --> 00:27:13,760
performance improvement doesn't improve

689
00:27:13,760 --> 00:27:16,400
per se but which is bad but nothing

690
00:27:16,400 --> 00:27:17,840
really severe happens you will never

691
00:27:17,840 --> 00:27:21,840
rely on that for anything critical

692
00:27:22,240 --> 00:27:24,240
and the functionality of the pep they

693
00:27:24,240 --> 00:27:25,600
are the use case of these cycle

694
00:27:25,600 --> 00:27:27,120
protocols it's about providing a

695
00:27:27,120 --> 00:27:28,880
framework that that helps with these

696
00:27:28,880 --> 00:27:32,320
kinds of things next slide

697
00:27:32,880 --> 00:27:34,799
okay so in terms of functionality what

698
00:27:34,799 --> 00:27:37,120
this protocol can do right on the data

699
00:27:37,120 --> 00:27:39,039
plane what we can do is we can try to

700
00:27:39,039 --> 00:27:40,880
directly affect the main protocol in

701
00:27:40,880 --> 00:27:42,480
some way

702
00:27:42,480 --> 00:27:44,960
uh there's not so much really we can try

703
00:27:44,960 --> 00:27:46,880
and manipulate the queue just like a

704
00:27:46,880 --> 00:27:48,960
router does you know

705
00:27:48,960 --> 00:27:51,200
doing q management draining the queue at

706
00:27:51,200 --> 00:27:52,720
a certain speed something like that we

707
00:27:52,720 --> 00:27:54,960
can maybe retransmit packets

708
00:27:54,960 --> 00:27:57,520
but we would not pass the header because

709
00:27:57,520 --> 00:27:59,679
well it's mainly about quick the idea is

710
00:27:59,679 --> 00:28:01,200
to do this in a way that could work for

711
00:28:01,200 --> 00:28:04,000
tcp for http for anything

712
00:28:04,000 --> 00:28:06,399
but we don't want to rely on that

713
00:28:06,399 --> 00:28:08,080
on the control plane

714
00:28:08,080 --> 00:28:09,840
we would have this local on the host

715
00:28:09,840 --> 00:28:11,440
communication exchange with the main

716
00:28:11,440 --> 00:28:13,120
protocol

717
00:28:13,120 --> 00:28:14,000
and

718
00:28:14,000 --> 00:28:15,760
the sidecar of course needs x because

719
00:28:15,760 --> 00:28:17,919
this is about proxies right

720
00:28:17,919 --> 00:28:19,520
so you have a proxy that needs to act

721
00:28:19,520 --> 00:28:21,279
something now maybe a receiver that

722
00:28:21,279 --> 00:28:23,600
needs to add something to the proxy

723
00:28:23,600 --> 00:28:26,080
and the idea is that these acts will be

724
00:28:26,080 --> 00:28:28,399
done using hashes over the transport

725
00:28:28,399 --> 00:28:30,320
header now we don't even know how big

726
00:28:30,320 --> 00:28:32,080
that header is but it could be a simple

727
00:28:32,080 --> 00:28:34,480
rule like saying let's say take 20 20

728
00:28:34,480 --> 00:28:37,039
bytes starting from the ip header from

729
00:28:37,039 --> 00:28:38,640
after the ip header

730
00:28:38,640 --> 00:28:40,240
or 30 bytes if that's not good enough

731
00:28:40,240 --> 00:28:42,080
right it's about avoiding that hashes

732
00:28:42,080 --> 00:28:43,840
collide and hoping that hashes are

733
00:28:43,840 --> 00:28:47,200
different between different packets

734
00:28:47,200 --> 00:28:49,520
the x could be separate x and they could

735
00:28:49,520 --> 00:28:51,360
be piggyback for instance using udp

736
00:28:51,360 --> 00:28:53,200
options that seems like a nice vehicle

737
00:28:53,200 --> 00:28:55,279
to me because quick wouldn't even notice

738
00:28:55,279 --> 00:28:56,880
right gets stripped away if nobody

739
00:28:56,880 --> 00:28:59,200
doesn't want them

740
00:28:59,200 --> 00:29:01,200
and

741
00:29:01,200 --> 00:29:03,600
well i'm coming to two example use cases

742
00:29:03,600 --> 00:29:05,279
that illustrate how that thing could

743
00:29:05,279 --> 00:29:06,480
operate

744
00:29:06,480 --> 00:29:08,720
and then then we'll see what you think

745
00:29:08,720 --> 00:29:10,159
about it

746
00:29:10,159 --> 00:29:12,080
this is about quick but you could think

747
00:29:12,080 --> 00:29:14,159
about tcp acid to be anything the idea

748
00:29:14,159 --> 00:29:15,520
is that this would work independent of

749
00:29:15,520 --> 00:29:18,879
the protocol next

750
00:29:20,480 --> 00:29:21,840
okay

751
00:29:21,840 --> 00:29:24,960
so the first example is you're trying to

752
00:29:24,960 --> 00:29:27,120
communicate over that is let's call it a

753
00:29:27,120 --> 00:29:28,640
millimeter wave link right you have a

754
00:29:28,640 --> 00:29:31,120
link with fluctuating capacity

755
00:29:31,120 --> 00:29:33,200
between what here i call the sidecar

756
00:29:33,200 --> 00:29:35,520
proxy and the client you have a normal

757
00:29:35,520 --> 00:29:37,200
quick data transfer it's not interrupted

758
00:29:37,200 --> 00:29:38,640
i'm just showing a queue so it's like a

759
00:29:38,640 --> 00:29:40,960
router queue it's a queue it goes in

760
00:29:40,960 --> 00:29:43,679
and you have x going back

761
00:29:43,679 --> 00:29:45,279
and

762
00:29:45,279 --> 00:29:47,120
so we need to add something

763
00:29:47,120 --> 00:29:48,799
you know to make it work better next

764
00:29:48,799 --> 00:29:51,120
please

765
00:29:51,520 --> 00:29:53,840
begins with the entity on the server

766
00:29:53,840 --> 00:29:55,200
side

767
00:29:55,200 --> 00:29:57,440
where you have a service choice and this

768
00:29:57,440 --> 00:29:59,919
service choice here would be well if you

769
00:29:59,919 --> 00:30:02,399
tell me to increase my congestion window

770
00:30:02,399 --> 00:30:03,600
i will

771
00:30:03,600 --> 00:30:05,039
right so this is something that if you

772
00:30:05,039 --> 00:30:06,480
perceive it as a danger if you think

773
00:30:06,480 --> 00:30:09,679
this side cutting is too fishy

774
00:30:09,679 --> 00:30:11,279
could be used for denial of service

775
00:30:11,279 --> 00:30:13,679
attacks or whatever you don't use it if

776
00:30:13,679 --> 00:30:14,720
you're willing to use it if you're

777
00:30:14,720 --> 00:30:17,120
willing to do that experiment right you

778
00:30:17,120 --> 00:30:19,840
pick that service

779
00:30:19,840 --> 00:30:20,840
next

780
00:30:20,840 --> 00:30:22,559
please

781
00:30:22,559 --> 00:30:25,440
and then what will happen is that on the

782
00:30:25,440 --> 00:30:27,600
proxy the site for instance it would

783
00:30:27,600 --> 00:30:29,279
take a hash of the packets you use the

784
00:30:29,279 --> 00:30:31,360
hash to act back to the sender side side

785
00:30:31,360 --> 00:30:33,440
car instance

786
00:30:33,440 --> 00:30:34,880
and

787
00:30:34,880 --> 00:30:37,679
using these acts it will be able to get

788
00:30:37,679 --> 00:30:39,919
a bit more data towards the sidecar

789
00:30:39,919 --> 00:30:42,159
proxy such that you if you implement a

790
00:30:42,159 --> 00:30:43,520
different kind of congestion control you

791
00:30:43,520 --> 00:30:45,120
have data available

792
00:30:45,120 --> 00:30:46,480
which is what you normally get if you

793
00:30:46,480 --> 00:30:48,159
implement the tcp connection splitter

794
00:30:48,159 --> 00:30:49,919
right you would act earlier and then

795
00:30:49,919 --> 00:30:51,679
when capacity becomes available you have

796
00:30:51,679 --> 00:30:53,520
the data there

797
00:30:53,520 --> 00:30:55,840
and in terms of the sending rate that

798
00:30:55,840 --> 00:30:57,760
would just influence the draining rate

799
00:30:57,760 --> 00:30:59,440
of the router that is something any

800
00:30:59,440 --> 00:31:01,600
device can do we can't prevent

801
00:31:01,600 --> 00:31:04,720
routers or any devices from doing this

802
00:31:04,720 --> 00:31:07,039
since this is a congestion control

803
00:31:07,039 --> 00:31:09,279
it would require a control loop so the

804
00:31:09,279 --> 00:31:10,799
sidecar in this case would also have to

805
00:31:10,799 --> 00:31:13,600
be on the client side to produce x

806
00:31:13,600 --> 00:31:15,279
just to the side car so that's

807
00:31:15,279 --> 00:31:16,799
independent of

808
00:31:16,799 --> 00:31:18,799
quick it's just looking at the hashes

809
00:31:18,799 --> 00:31:21,279
and producing x

810
00:31:21,279 --> 00:31:23,120
and the notification to the quick entity

811
00:31:23,120 --> 00:31:24,640
would be that a neck has arrived

812
00:31:24,640 --> 00:31:26,399
increase your congestion window right so

813
00:31:26,399 --> 00:31:28,159
that's that's that's the deal you like

814
00:31:28,159 --> 00:31:31,279
it or you don't you take it or you don't

815
00:31:31,279 --> 00:31:33,120
next please

816
00:31:33,120 --> 00:31:34,880
the minimal changes to quick that you

817
00:31:34,880 --> 00:31:36,559
would need in this case they're only on

818
00:31:36,559 --> 00:31:38,159
the server side

819
00:31:38,159 --> 00:31:40,000
it's local interface communication and

820
00:31:40,000 --> 00:31:41,840
if indeed you choose the service then

821
00:31:41,840 --> 00:31:42,960
you would have to increase the

822
00:31:42,960 --> 00:31:44,799
congestion window when the sidecar tells

823
00:31:44,799 --> 00:31:46,399
you to

824
00:31:46,399 --> 00:31:48,480
it's one case i'll have another one next

825
00:31:48,480 --> 00:31:51,039
time please

826
00:31:51,440 --> 00:31:52,880
this is something different just to

827
00:31:52,880 --> 00:31:54,559
illustrate that the idea is to be really

828
00:31:54,559 --> 00:31:56,399
flexible and do basically whatever

829
00:31:56,399 --> 00:31:59,360
perhaps normally do

830
00:31:59,679 --> 00:32:01,679
there is this paper that some colleagues

831
00:32:01,679 --> 00:32:03,760
from trento university have done a long

832
00:32:03,760 --> 00:32:05,519
time ago this was

833
00:32:05,519 --> 00:32:08,080
work on tcp it's tricks playing playing

834
00:32:08,080 --> 00:32:10,640
tricks to tcp the idea is that

835
00:32:10,640 --> 00:32:13,120
on a wi-fi network any act

836
00:32:13,120 --> 00:32:16,399
that a client produces is really 2x

837
00:32:16,399 --> 00:32:17,760
right you have a link layer ack and you

838
00:32:17,760 --> 00:32:19,760
have a transport layout

839
00:32:19,760 --> 00:32:21,600
and then that transport layer

840
00:32:21,600 --> 00:32:23,360
probably produces another link layer x

841
00:32:23,360 --> 00:32:26,399
so it's so much traffic just for one ack

842
00:32:26,399 --> 00:32:28,399
now rather than having all these acts

843
00:32:28,399 --> 00:32:29,919
you could decide that the client doesn't

844
00:32:29,919 --> 00:32:32,399
need to hack anything and on the wi-fi

845
00:32:32,399 --> 00:32:34,159
access point you can just take a look at

846
00:32:34,159 --> 00:32:36,159
the packets as they arrive

847
00:32:36,159 --> 00:32:37,840
remember i forwarded this particular

848
00:32:37,840 --> 00:32:39,519
packet to the client

849
00:32:39,519 --> 00:32:41,519
and wait for the link react that comes

850
00:32:41,519 --> 00:32:43,600
back and when that link layer comes back

851
00:32:43,600 --> 00:32:45,919
link layer arrives i can associate it

852
00:32:45,919 --> 00:32:47,679
with the tcp header

853
00:32:47,679 --> 00:32:49,360
that i've just been forwarding i can

854
00:32:49,360 --> 00:32:52,640
produce the icon behalf the client

855
00:32:52,640 --> 00:32:53,760
now

856
00:32:53,760 --> 00:32:55,760
really you wouldn't want to do this for

857
00:32:55,760 --> 00:32:57,679
all x right you still want to have two

858
00:32:57,679 --> 00:33:00,240
packs you still want to have options

859
00:33:00,240 --> 00:33:02,240
but you could significantly reduce the

860
00:33:02,240 --> 00:33:03,760
number of eggs that are necessary which

861
00:33:03,760 --> 00:33:05,919
would save energy for the device it

862
00:33:05,919 --> 00:33:09,039
would avoid collisions

863
00:33:09,039 --> 00:33:10,480
and the idea here is to show how could

864
00:33:10,480 --> 00:33:12,240
we play that trick with with quick for

865
00:33:12,240 --> 00:33:15,360
example uh next please

866
00:33:15,360 --> 00:33:17,679
so here the service will be i will treat

867
00:33:17,679 --> 00:33:18,640
your

868
00:33:18,640 --> 00:33:21,600
side car wrecks like clyde x basically i

869
00:33:21,600 --> 00:33:22,720
accept them

870
00:33:22,720 --> 00:33:24,559
except that i said that we don't want to

871
00:33:24,559 --> 00:33:26,000
do anything really critical on this

872
00:33:26,000 --> 00:33:28,720
basis so the sender would keep the the

873
00:33:28,720 --> 00:33:31,039
data in the center for just in case

874
00:33:31,039 --> 00:33:33,200
until until the client cumulatively asks

875
00:33:33,200 --> 00:33:34,000
them

876
00:33:34,000 --> 00:33:36,320
but other than that you know proceed

877
00:33:36,320 --> 00:33:38,640
like normal when you get these eggs

878
00:33:38,640 --> 00:33:41,279
next please

879
00:33:41,440 --> 00:33:42,399
uh

880
00:33:42,399 --> 00:33:44,399
the sidecar notification will be an ack

881
00:33:44,399 --> 00:33:46,159
has arrived it's a very simple thing

882
00:33:46,159 --> 00:33:48,320
right it does a hash of the packet and

883
00:33:48,320 --> 00:33:50,320
the x and says okay this packet i'm now

884
00:33:50,320 --> 00:33:52,399
acting

885
00:33:52,399 --> 00:33:53,360
and

886
00:33:53,360 --> 00:33:54,880
as you can see you don't in this case

887
00:33:54,880 --> 00:33:56,399
you don't need to do anything on the

888
00:33:56,399 --> 00:33:59,039
client side in for the sidecar but of

889
00:33:59,039 --> 00:34:00,799
course the client would have to act less

890
00:34:00,799 --> 00:34:03,440
so next please

891
00:34:03,440 --> 00:34:06,480
the next one is to saying that well the

892
00:34:06,480 --> 00:34:08,399
minimal changes to quick in this case

893
00:34:08,399 --> 00:34:10,000
would have to be that you have to signal

894
00:34:10,000 --> 00:34:11,599
to the client that it shouldn't be

895
00:34:11,599 --> 00:34:13,040
acting as much

896
00:34:13,040 --> 00:34:15,359
over quick probably

897
00:34:15,359 --> 00:34:16,399
and

898
00:34:16,399 --> 00:34:18,879
if you choose to service well that and

899
00:34:18,879 --> 00:34:21,520
also accept these sidecar acts

900
00:34:21,520 --> 00:34:23,520
again right it may depend i may not at

901
00:34:23,520 --> 00:34:25,679
all want that to happen when i'm talking

902
00:34:25,679 --> 00:34:27,040
to my bank

903
00:34:27,040 --> 00:34:29,040
but there may be so many things that are

904
00:34:29,040 --> 00:34:30,719
run over quick where i really don't care

905
00:34:30,719 --> 00:34:32,399
about anonymity or things like that

906
00:34:32,399 --> 00:34:35,599
where maybe this is okay

907
00:34:35,599 --> 00:34:37,520
it's just an example

908
00:34:37,520 --> 00:34:39,440
well two very different things that

909
00:34:39,440 --> 00:34:40,960
could be done but the idea is you could

910
00:34:40,960 --> 00:34:43,119
do any pep function

911
00:34:43,119 --> 00:34:44,480
next

912
00:34:44,480 --> 00:34:46,960
it's already the last one

913
00:34:46,960 --> 00:34:48,800
so what we believe is that this is a

914
00:34:48,800 --> 00:34:50,639
possible way forward to solve that

915
00:34:50,639 --> 00:34:52,159
dilemma that we now have between

916
00:34:52,159 --> 00:34:54,320
end-to-end encryption ossification and

917
00:34:54,320 --> 00:34:57,280
not being able to do any pep functions

918
00:34:57,280 --> 00:34:58,400
um

919
00:34:58,400 --> 00:35:00,320
it will require a lot of research right

920
00:35:00,320 --> 00:35:02,400
we need to consider how to limit the

921
00:35:02,400 --> 00:35:05,040
overhead regarding x and hashing

922
00:35:05,040 --> 00:35:06,480
there are several interesting things

923
00:35:06,480 --> 00:35:07,839
here like how how would you make a

924
00:35:07,839 --> 00:35:10,560
cumulative act when you have a hash

925
00:35:10,560 --> 00:35:13,440
um there are ways we believe

926
00:35:13,440 --> 00:35:14,880
there are many details here you know if

927
00:35:14,880 --> 00:35:16,640
you consider the use cases for example

928
00:35:16,640 --> 00:35:18,480
right let's take the

929
00:35:18,480 --> 00:35:21,359
link specific congestion control thing

930
00:35:21,359 --> 00:35:24,000
in case of tcp

931
00:35:24,000 --> 00:35:26,480
because the pep is invisible and

932
00:35:26,480 --> 00:35:28,240
transparent it can just answer back to

933
00:35:28,240 --> 00:35:29,599
the sender there's no need to even

934
00:35:29,599 --> 00:35:30,960
authenticate

935
00:35:30,960 --> 00:35:32,320
there's no need to even find it right

936
00:35:32,320 --> 00:35:33,920
because it's on the path and it answers

937
00:35:33,920 --> 00:35:35,839
to the correct ip address

938
00:35:35,839 --> 00:35:38,240
in this case it would have to be found

939
00:35:38,240 --> 00:35:39,040
now

940
00:35:39,040 --> 00:35:42,240
and and there will be a notion of trust

941
00:35:42,240 --> 00:35:43,440
right so

942
00:35:43,440 --> 00:35:45,680
the cycle proxy in principle just to

943
00:35:45,680 --> 00:35:47,920
give you a hint of what kind of you know

944
00:35:47,920 --> 00:35:50,240
steps would need to be taken the cycle

945
00:35:50,240 --> 00:35:51,920
proxy in principle you can just send

946
00:35:51,920 --> 00:35:54,320
sidekaix towards the sender you could

947
00:35:54,320 --> 00:35:56,079
start with one see if the device is

948
00:35:56,079 --> 00:35:58,000
there answering that yes there is a side

949
00:35:58,000 --> 00:36:00,079
entity on the sender side

950
00:36:00,079 --> 00:36:01,359
but it doesn't really need to trust

951
00:36:01,359 --> 00:36:03,200
anybody it's just producing the hashes

952
00:36:03,200 --> 00:36:04,400
and decking

953
00:36:04,400 --> 00:36:06,880
the sender side sidecar that would need

954
00:36:06,880 --> 00:36:09,200
to trust the proxy right well otherwise

955
00:36:09,200 --> 00:36:11,119
i'm giving false information

956
00:36:11,119 --> 00:36:13,040
then again

957
00:36:13,040 --> 00:36:15,359
it's not easy necessarily for the proxy

958
00:36:15,359 --> 00:36:17,440
to be able to guess the hashes that put

959
00:36:17,440 --> 00:36:20,880
some weight on the hash function

960
00:36:21,599 --> 00:36:23,359
if a path changes well there can be

961
00:36:23,359 --> 00:36:24,720
different side card proxies they would

962
00:36:24,720 --> 00:36:27,520
just all start to act towards me

963
00:36:27,520 --> 00:36:29,280
then again you know if that if that is

964
00:36:29,280 --> 00:36:30,880
how we operated then we would have a

965
00:36:30,880 --> 00:36:32,560
string of we could have a string of

966
00:36:32,560 --> 00:36:34,079
multiple of these proxies answering

967
00:36:34,079 --> 00:36:35,839
without knowing about each other right

968
00:36:35,839 --> 00:36:37,280
so there would have to be

969
00:36:37,280 --> 00:36:39,200
some kind of negotiation phase to agree

970
00:36:39,200 --> 00:36:40,640
that this is the side car proxy i'm

971
00:36:40,640 --> 00:36:42,160
talking to

972
00:36:42,160 --> 00:36:43,920
so you know there are open things that's

973
00:36:43,920 --> 00:36:45,760
all i'm trying to say it's also not so

974
00:36:45,760 --> 00:36:47,200
clear if this can be really done

975
00:36:47,200 --> 00:36:48,800
independent of the main protocol but i

976
00:36:48,800 --> 00:36:50,480
think it's an interesting direction to

977
00:36:50,480 --> 00:36:51,920
take and

978
00:36:51,920 --> 00:36:54,560
i'm very curious what you think that was

979
00:36:54,560 --> 00:36:56,000
it i think the next one just says

980
00:36:56,000 --> 00:36:57,040
questions

981
00:36:57,040 --> 00:37:00,000
okay and i guess we like

982
00:37:00,000 --> 00:37:02,240
slightly slightly over time so we might

983
00:37:02,240 --> 00:37:03,040
have

984
00:37:03,040 --> 00:37:05,119
time for one quick question and we're

985
00:37:05,119 --> 00:37:07,280
happy to we probably discuss it on the

986
00:37:07,280 --> 00:37:08,480
list so

987
00:37:08,480 --> 00:37:10,000
anyone oh

988
00:37:10,000 --> 00:37:10,960
i said

989
00:37:10,960 --> 00:37:13,520
close the queue

990
00:37:14,720 --> 00:37:16,400
i'll get out

991
00:37:16,400 --> 00:37:18,720
uh yeah let's try to keep it to

992
00:37:18,720 --> 00:37:19,839
like

993
00:37:19,839 --> 00:37:21,920
30 seconds yeah it'll be very quick so

994
00:37:21,920 --> 00:37:24,880
yeah i like the idea i like the

995
00:37:24,880 --> 00:37:27,760
because i'd like to ensure yeah peps are

996
00:37:27,760 --> 00:37:29,520
a way of ensuring that we get the

997
00:37:29,520 --> 00:37:31,280
maximum utilization of the available

998
00:37:31,280 --> 00:37:33,520
bandwidth so i like the

999
00:37:33,520 --> 00:37:34,560
um

1000
00:37:34,560 --> 00:37:37,200
the concept of trying to do both yeah

1001
00:37:37,200 --> 00:37:39,839
have the pep and avoid ossification so

1002
00:37:39,839 --> 00:37:42,160
it's good work um yeah i'd like to see

1003
00:37:42,160 --> 00:37:44,640
more um so thumbs up

1004
00:37:44,640 --> 00:37:46,879
okay

1005
00:37:48,320 --> 00:37:51,320
jake

1006
00:37:51,680 --> 00:37:54,160
hi do you have that's on how the pepsi

1007
00:37:54,160 --> 00:37:56,879
would be discovered

1008
00:37:57,920 --> 00:38:00,000
am i kind of ideas on how to discover

1009
00:38:00,000 --> 00:38:01,680
the peps in this case how do you do how

1010
00:38:01,680 --> 00:38:03,520
do you know that there's one on past

1011
00:38:03,520 --> 00:38:07,119
yeah so i mean

1012
00:38:07,920 --> 00:38:09,760
you know maybe that's another time

1013
00:38:09,760 --> 00:38:10,720
i mean

1014
00:38:10,720 --> 00:38:12,000
like like i have it here right there

1015
00:38:12,000 --> 00:38:13,520
could be a simple way to do it i mean

1016
00:38:13,520 --> 00:38:14,960
just one of them could just start

1017
00:38:14,960 --> 00:38:16,320
hacking

1018
00:38:16,320 --> 00:38:18,560
sending one actually and if you if you

1019
00:38:18,560 --> 00:38:20,320
get that on the center side you would

1020
00:38:20,320 --> 00:38:22,240
see okay there is one acting i negotiate

1021
00:38:22,240 --> 00:38:23,920
that you're the one

1022
00:38:23,920 --> 00:38:25,839
and you keep helping us this is not a

1023
00:38:25,839 --> 00:38:28,320
fantastic idea right but it's one it's

1024
00:38:28,320 --> 00:38:29,520
one way

1025
00:38:29,520 --> 00:38:32,880
kind of variations of that uh

1026
00:38:32,880 --> 00:38:34,320
okay uh

1027
00:38:34,320 --> 00:38:35,359
maybe

1028
00:38:35,359 --> 00:38:37,839
i'd love to see some ideas on

1029
00:38:37,839 --> 00:38:40,800
on that concept on the list a little bit

1030
00:38:40,800 --> 00:38:41,680
maybe

1031
00:38:41,680 --> 00:38:44,800
i'll i'll think about it but uh

1032
00:38:44,800 --> 00:38:45,599
but

1033
00:38:45,599 --> 00:38:47,359
you think they would just act anybody

1034
00:38:47,359 --> 00:38:49,119
who's sending regardless

1035
00:38:49,119 --> 00:38:51,040
yeah why not once and see if they get it

1036
00:38:51,040 --> 00:38:53,760
randomly start with a knack and say okay

1037
00:38:53,760 --> 00:38:55,280
you know i'm getting one so it means

1038
00:38:55,280 --> 00:38:57,040
that there is somebody and i'm answering

1039
00:38:57,040 --> 00:38:59,040
back maybe i could pick

1040
00:38:59,040 --> 00:39:01,359
one of them you know like uh there were

1041
00:39:01,359 --> 00:39:03,520
these things in multicast where you were

1042
00:39:03,520 --> 00:39:05,359
able to pick out of many many possible

1043
00:39:05,359 --> 00:39:07,520
receivers acting back you said um this

1044
00:39:07,520 --> 00:39:09,760
is the one that's hacking from here

1045
00:39:09,760 --> 00:39:11,200
i'll think about that okay as many

1046
00:39:11,200 --> 00:39:13,359
qualities possible there's like interest

1047
00:39:13,359 --> 00:39:15,520
to continue this discussion um like this

1048
00:39:15,520 --> 00:39:16,160
is

1049
00:39:16,160 --> 00:39:17,680
seems like a

1050
00:39:17,680 --> 00:39:19,119
a

1051
00:39:19,119 --> 00:39:20,800
potentially solvable problem and a good

1052
00:39:20,800 --> 00:39:22,480
way to get there like discovery is hard

1053
00:39:22,480 --> 00:39:24,800
anyway but um

1054
00:39:24,800 --> 00:39:26,560
yes i'm sorry to cut you off yeah it's

1055
00:39:26,560 --> 00:39:28,720
fine

1056
00:39:32,480 --> 00:39:33,920
maybe next meeting we could spend a

1057
00:39:33,920 --> 00:39:36,000
little bit more time on this uh yeah so

1058
00:39:36,000 --> 00:39:38,160
uh marcus real quick

1059
00:39:38,160 --> 00:39:39,440
all right yeah i just want to say real

1060
00:39:39,440 --> 00:39:41,520
quick i think this is uh

1061
00:39:41,520 --> 00:39:43,839
great work um we're actually in ericsson

1062
00:39:43,839 --> 00:39:45,280
working on or we have been working on

1063
00:39:45,280 --> 00:39:46,720
something very similar we call it

1064
00:39:46,720 --> 00:39:49,200
lightweight pep and the multi-domain

1065
00:39:49,200 --> 00:39:51,760
congestion control it has a lot of these

1066
00:39:51,760 --> 00:39:53,280
ideas in there so it would be really

1067
00:39:53,280 --> 00:39:56,480
nice to get in touch and sort of uh yeah

1068
00:39:56,480 --> 00:39:57,920
maybe discuss this more offline we have

1069
00:39:57,920 --> 00:39:59,280
a bunch of papers published on this

1070
00:39:59,280 --> 00:40:00,960
we've also done simulations with the

1071
00:40:00,960 --> 00:40:02,560
millimeter wave and such send me an

1072
00:40:02,560 --> 00:40:03,440
email

1073
00:40:03,440 --> 00:40:04,480
yep

1074
00:40:04,480 --> 00:40:06,800
thank you

1075
00:40:06,880 --> 00:40:08,160
cool

1076
00:40:08,160 --> 00:40:11,720
thank you very you very much

1077
00:40:13,440 --> 00:40:17,520
next so it should be good

1078
00:40:18,880 --> 00:40:20,400
start slides here

1079
00:40:20,400 --> 00:40:22,640
yes it should be

1080
00:40:22,640 --> 00:40:25,200
[Music]

1081
00:40:25,200 --> 00:40:27,439
yes

1082
00:40:28,800 --> 00:40:31,920
okay so hi my name is berta serracanto

1083
00:40:31,920 --> 00:40:34,880
and i'm a phd student at ubc

1084
00:40:34,880 --> 00:40:37,040
and i'm going to be talking about wide

1085
00:40:37,040 --> 00:40:41,119
area networks uh for cloud auto scaling

1086
00:40:41,839 --> 00:40:43,599
and yeah exactly

1087
00:40:43,599 --> 00:40:45,760
um so i'll go quick over the agenda

1088
00:40:45,760 --> 00:40:47,760
first i'll talk about the scenario that

1089
00:40:47,760 --> 00:40:50,560
i'm presenting and exactly what is

1090
00:40:50,560 --> 00:40:53,119
network auto scaling then i'll go over

1091
00:40:53,119 --> 00:40:54,960
how about how we put the pieces together

1092
00:40:54,960 --> 00:40:58,960
for prototyping and finally uh some

1093
00:40:58,960 --> 00:41:01,520
plots about uh the results that we got

1094
00:41:01,520 --> 00:41:02,720
from it

1095
00:41:02,720 --> 00:41:04,880
next slide please

1096
00:41:04,880 --> 00:41:07,760
okay so if we focus first this is the

1097
00:41:07,760 --> 00:41:09,680
scenario which is built of three

1098
00:41:09,680 --> 00:41:11,680
different parts the first one let's say

1099
00:41:11,680 --> 00:41:13,839
it's a branch where all the users are

1100
00:41:13,839 --> 00:41:15,839
connected the second one would be the

1101
00:41:15,839 --> 00:41:18,400
cloud where there's the application that

1102
00:41:18,400 --> 00:41:20,560
these users consume and it's cloud

1103
00:41:20,560 --> 00:41:22,000
orchestrator

1104
00:41:22,000 --> 00:41:24,240
and the third one would be

1105
00:41:24,240 --> 00:41:26,880
the software defined network which is uh

1106
00:41:26,880 --> 00:41:29,040
the part that brings together the users

1107
00:41:29,040 --> 00:41:30,240
and the application and provides some

1108
00:41:30,240 --> 00:41:31,839
connectivity

1109
00:41:31,839 --> 00:41:32,720
so

1110
00:41:32,720 --> 00:41:35,680
if we now look at the situation when

1111
00:41:35,680 --> 00:41:37,359
an application deployed at the cloud

1112
00:41:37,359 --> 00:41:39,280
suddenly receives an increase of

1113
00:41:39,280 --> 00:41:40,640
requests

1114
00:41:40,640 --> 00:41:43,040
um what the cloud does is

1115
00:41:43,040 --> 00:41:45,920
auto scale and provide more

1116
00:41:45,920 --> 00:41:47,920
resources to that application and it

1117
00:41:47,920 --> 00:41:50,000
does so in two different ways the first

1118
00:41:50,000 --> 00:41:51,040
one being

1119
00:41:51,040 --> 00:41:53,119
horizontal auto scaling which is

1120
00:41:53,119 --> 00:41:55,280
deploying more replicas of that specific

1121
00:41:55,280 --> 00:41:58,560
application so the load can be balanced

1122
00:41:58,560 --> 00:42:00,640
and managed more efficiently and the

1123
00:42:00,640 --> 00:42:02,480
second one is vertical auto scaling

1124
00:42:02,480 --> 00:42:03,680
which is

1125
00:42:03,680 --> 00:42:05,680
incrementing the resources on replicas

1126
00:42:05,680 --> 00:42:07,280
that are already deployed

1127
00:42:07,280 --> 00:42:08,640
uh such as

1128
00:42:08,640 --> 00:42:12,480
increasing the cpu or more ram

1129
00:42:12,480 --> 00:42:14,560
so if we now take a step back and look

1130
00:42:14,560 --> 00:42:16,800
at the big picture again there's okay

1131
00:42:16,800 --> 00:42:18,160
this situation there's an increase of

1132
00:42:18,160 --> 00:42:20,319
load the cloud has done something about

1133
00:42:20,319 --> 00:42:21,119
it

1134
00:42:21,119 --> 00:42:22,160
but

1135
00:42:22,160 --> 00:42:24,720
there's the problem that the network has

1136
00:42:24,720 --> 00:42:26,480
not been modified and it might become

1137
00:42:26,480 --> 00:42:28,480
the bottleneck so

1138
00:42:28,480 --> 00:42:31,280
that's um when translating this

1139
00:42:31,280 --> 00:42:33,280
auto-scaling term to the network makes

1140
00:42:33,280 --> 00:42:34,319
sense

1141
00:42:34,319 --> 00:42:36,880
so we define a horizontal network out to

1142
00:42:36,880 --> 00:42:38,800
scaling which is um

1143
00:42:38,800 --> 00:42:40,640
changing the overlay path

1144
00:42:40,640 --> 00:42:42,960
and vertical network of the scaling

1145
00:42:42,960 --> 00:42:45,520
which is changing the characteristics of

1146
00:42:45,520 --> 00:42:47,359
the underlay path

1147
00:42:47,359 --> 00:42:50,319
so let's like please

1148
00:42:50,400 --> 00:42:52,240
oh that's the last one

1149
00:42:52,240 --> 00:42:54,400
that's the next one yeah thank you

1150
00:42:54,400 --> 00:42:55,359
um

1151
00:42:55,359 --> 00:42:58,000
so if we go over first the horizontal

1152
00:42:58,000 --> 00:42:59,760
network out to scaling case

1153
00:42:59,760 --> 00:43:00,800
um

1154
00:43:00,800 --> 00:43:02,240
as i said

1155
00:43:02,240 --> 00:43:04,240
imagine that you have this traffic

1156
00:43:04,240 --> 00:43:06,240
that's usually routed through the

1157
00:43:06,240 --> 00:43:08,560
standard path and then suddenly there's

1158
00:43:08,560 --> 00:43:11,040
the increase of load and

1159
00:43:11,040 --> 00:43:14,319
then there's a way

1160
00:43:14,319 --> 00:43:16,160
that the application is able to tell the

1161
00:43:16,160 --> 00:43:19,040
network um hey i'm out of scaling i will

1162
00:43:19,040 --> 00:43:20,880
need more resources because they are

1163
00:43:20,880 --> 00:43:23,280
coming or

1164
00:43:23,280 --> 00:43:25,040
this channel that you have is not going

1165
00:43:25,040 --> 00:43:28,800
to be able to meet my demands

1166
00:43:29,839 --> 00:43:32,240
so then um here's where the sdn

1167
00:43:32,240 --> 00:43:34,240
controller can have a policy that

1168
00:43:34,240 --> 00:43:36,319
defines okay now that we think that

1169
00:43:36,319 --> 00:43:38,720
that's the case you need to be routed

1170
00:43:38,720 --> 00:43:41,119
through this other path

1171
00:43:41,119 --> 00:43:42,000
and

1172
00:43:42,000 --> 00:43:43,599
in terms of vertical network auto

1173
00:43:43,599 --> 00:43:46,079
scaling

1174
00:43:46,560 --> 00:43:49,119
it's a similar case in the same scenario

1175
00:43:49,119 --> 00:43:51,040
there's a cloud out the scaling event

1176
00:43:51,040 --> 00:43:54,720
and then the network reacts to it um by

1177
00:43:54,720 --> 00:43:56,079
adapting and in this case if there's

1178
00:43:56,079 --> 00:43:58,319
only one connection vertical to scale

1179
00:43:58,319 --> 00:44:00,800
vertical network auto scaling would mean

1180
00:44:00,800 --> 00:44:03,200
um adding more bandwidth

1181
00:44:03,200 --> 00:44:06,240
if it's needed to end then

1182
00:44:06,240 --> 00:44:08,160
it's an elastic thing it can go back

1183
00:44:08,160 --> 00:44:09,920
when there's no more demand of that

1184
00:44:09,920 --> 00:44:12,800
bandwidth so yes um i think a couple of

1185
00:44:12,800 --> 00:44:14,880
yeah yeah it's light you're gonna go

1186
00:44:14,880 --> 00:44:16,160
with the next one

1187
00:44:16,160 --> 00:44:19,359
so here's the prototyping um

1188
00:44:19,359 --> 00:44:21,200
you can see that both the users and the

1189
00:44:21,200 --> 00:44:23,599
application have been deployed in public

1190
00:44:23,599 --> 00:44:26,400
cloud and what's interesting about here

1191
00:44:26,400 --> 00:44:29,440
is if you look at the purple boxes

1192
00:44:29,440 --> 00:44:31,520
it's the way how the application

1193
00:44:31,520 --> 00:44:33,839
communicates its requirements to the

1194
00:44:33,839 --> 00:44:37,599
network so there's the cn1 operator

1195
00:44:37,599 --> 00:44:39,200
which um

1196
00:44:39,200 --> 00:44:40,640
let's call it a plug-in on the

1197
00:44:40,640 --> 00:44:43,200
kubernetes orchestrator that monitors

1198
00:44:43,200 --> 00:44:45,280
the application and what's happening on

1199
00:44:45,280 --> 00:44:47,040
there if there are more replicas or if

1200
00:44:47,040 --> 00:44:48,720
these replicas are increasing so

1201
00:44:48,720 --> 00:44:50,560
monitoring the cloud auto scaling events

1202
00:44:50,560 --> 00:44:51,760
are happening

1203
00:44:51,760 --> 00:44:54,720
and it polishes these changes to the

1204
00:44:54,720 --> 00:44:57,599
service and external service registry

1205
00:44:57,599 --> 00:44:58,800
which is then

1206
00:44:58,800 --> 00:45:01,599
continuously pulled by the cn1 reader

1207
00:45:01,599 --> 00:45:03,920
which takes into account and says oh

1208
00:45:03,920 --> 00:45:06,000
there's been a change and notifies the

1209
00:45:06,000 --> 00:45:09,040
adapter which is the piece that's in

1210
00:45:09,040 --> 00:45:10,800
charge of talking to the sd1 controller

1211
00:45:10,800 --> 00:45:12,079
and the underlay

1212
00:45:12,079 --> 00:45:13,599
saying okay network you need to do

1213
00:45:13,599 --> 00:45:15,280
something about it

1214
00:45:15,280 --> 00:45:18,000
and that's when the changes come coming

1215
00:45:18,000 --> 00:45:20,240
yeah

1216
00:45:20,720 --> 00:45:22,880
um yeah that's just a quick plot about

1217
00:45:22,880 --> 00:45:24,880
the network um

1218
00:45:24,880 --> 00:45:26,160
horizontal network auto scanning

1219
00:45:26,160 --> 00:45:27,520
performance where

1220
00:45:27,520 --> 00:45:31,599
we switch the traffic over both paths

1221
00:45:31,599 --> 00:45:34,400
in a rate limited one and on one degree

1222
00:45:34,400 --> 00:45:35,520
per second

1223
00:45:35,520 --> 00:45:37,040
uh tunnel

1224
00:45:37,040 --> 00:45:38,880
and as you can see here

1225
00:45:38,880 --> 00:45:40,400
at this obvious when there's traffic in

1226
00:45:40,400 --> 00:45:42,560
one path there's nothing the other one

1227
00:45:42,560 --> 00:45:45,520
and we found that the delay obtained was

1228
00:45:45,520 --> 00:45:46,480
not

1229
00:45:46,480 --> 00:45:48,079
impactful so

1230
00:45:48,079 --> 00:45:50,079
the change of routing

1231
00:45:50,079 --> 00:45:50,880
was

1232
00:45:50,880 --> 00:45:52,319
successful

1233
00:45:52,319 --> 00:45:55,599
and just one place

1234
00:45:55,680 --> 00:45:57,760
and on the case of vertical network auto

1235
00:45:57,760 --> 00:45:59,520
scaling

1236
00:45:59,520 --> 00:46:02,240
if you see the orange line

1237
00:46:02,240 --> 00:46:05,440
um it's where the cloud of the

1238
00:46:05,440 --> 00:46:06,960
orchestrator says

1239
00:46:06,960 --> 00:46:09,119
okay there's a number of labradors that

1240
00:46:09,119 --> 00:46:10,319
is increasing

1241
00:46:10,319 --> 00:46:12,000
and if you look at the green line it

1242
00:46:12,000 --> 00:46:13,040
says

1243
00:46:13,040 --> 00:46:15,200
it's the network auto scaling at the

1244
00:46:15,200 --> 00:46:17,599
same time when proactively

1245
00:46:17,599 --> 00:46:20,240
um meaning that okay the cloud is has

1246
00:46:20,240 --> 00:46:22,160
had an auto scaling event and now the

1247
00:46:22,160 --> 00:46:23,920
network has one too

1248
00:46:23,920 --> 00:46:26,240
to go matching because then in the blue

1249
00:46:26,240 --> 00:46:28,800
line cops it comes a traffic increase

1250
00:46:28,800 --> 00:46:30,560
and since the network has proactively

1251
00:46:30,560 --> 00:46:32,960
adapted that it's now able to take into

1252
00:46:32,960 --> 00:46:35,119
account and don't have

1253
00:46:35,119 --> 00:46:37,359
any problems

1254
00:46:37,359 --> 00:46:39,920
and yeah

1255
00:46:39,920 --> 00:46:42,240
and that's all for more details in the

1256
00:46:42,240 --> 00:46:45,040
implementation or more specific results

1257
00:46:45,040 --> 00:46:47,040
you can check out the paper or if you

1258
00:46:47,040 --> 00:46:49,440
have any questions or comments just go

1259
00:46:49,440 --> 00:46:52,160
ahead thank you

1260
00:46:52,640 --> 00:46:55,119
thank you very much uh we have time for

1261
00:46:55,119 --> 00:46:58,319
probably one quick question

1262
00:47:02,240 --> 00:47:03,359
going once

1263
00:47:03,359 --> 00:47:05,280
going twice thank you very much very

1264
00:47:05,280 --> 00:47:07,359
cool stuff

1265
00:47:07,359 --> 00:47:10,799
next all right next

1266
00:47:19,920 --> 00:47:22,920
yes

1267
00:47:27,839 --> 00:47:29,760
uh hello

1268
00:47:29,760 --> 00:47:32,000
my name is rafael so i here to present

1269
00:47:32,000 --> 00:47:34,319
the our solution polka that is a

1270
00:47:34,319 --> 00:47:36,000
polynomial key based architecture for

1271
00:47:36,000 --> 00:47:40,000
sas routing so next please

1272
00:47:40,000 --> 00:47:42,319
so we are trying to connect watch banks

1273
00:47:42,319 --> 00:47:44,800
problem solve uh penalties for problem

1274
00:47:44,800 --> 00:47:46,319
solved in pog

1275
00:47:46,319 --> 00:47:47,119
so

1276
00:47:47,119 --> 00:47:49,280
uh we have noted that any points have

1277
00:47:49,280 --> 00:47:51,280
little information about the perhaps

1278
00:47:51,280 --> 00:47:54,079
over which their traffic is carried so

1279
00:47:54,079 --> 00:47:56,480
and no contract beyond the destination

1280
00:47:56,480 --> 00:47:58,880
address so next please

1281
00:47:58,880 --> 00:48:01,280
so taking care about what sdn table

1282
00:48:01,280 --> 00:48:04,000
based solution so we have some

1283
00:48:04,000 --> 00:48:05,760
next

1284
00:48:05,760 --> 00:48:06,559
yes

1285
00:48:06,559 --> 00:48:09,040
the s10 table-based solution

1286
00:48:09,040 --> 00:48:12,000
approach uh suffered with the pav setup

1287
00:48:12,000 --> 00:48:12,800
may

1288
00:48:12,800 --> 00:48:15,359
involve several state configuration so

1289
00:48:15,359 --> 00:48:16,559
once we have

1290
00:48:16,559 --> 00:48:18,880
for example sdn table based we are

1291
00:48:18,880 --> 00:48:21,440
suffering with this kind of uh

1292
00:48:21,440 --> 00:48:24,640
out every time we need to keep states

1293
00:48:24,640 --> 00:48:27,119
along the path so

1294
00:48:27,119 --> 00:48:28,559
introduce for us

1295
00:48:28,559 --> 00:48:31,760
a specific question how the sdn database

1296
00:48:31,760 --> 00:48:32,720
solution

1297
00:48:32,720 --> 00:48:34,480
offer pathway control

1298
00:48:34,480 --> 00:48:36,000
and you have some

1299
00:48:36,000 --> 00:48:38,400
problems about that for example largely

1300
00:48:38,400 --> 00:48:41,440
number of scale that which means dealers

1301
00:48:41,440 --> 00:48:44,559
for scalability limit capacity of tables

1302
00:48:44,559 --> 00:48:47,040
directly and latest for path

1303
00:48:47,040 --> 00:48:48,880
configuration

1304
00:48:48,880 --> 00:48:50,480
please

1305
00:48:50,480 --> 00:48:52,480
so

1306
00:48:52,480 --> 00:48:56,319
look at this concept we are uh to just

1307
00:48:56,319 --> 00:48:58,559
um connect with this

1308
00:48:58,559 --> 00:49:00,800
street source routing the strict source

1309
00:49:00,800 --> 00:49:02,319
routing is a matter of just only

1310
00:49:02,319 --> 00:49:05,040
changing the source path so this the

1311
00:49:05,040 --> 00:49:08,400
edge core the edge part so we don't need

1312
00:49:08,400 --> 00:49:10,480
to keep all the states in the

1313
00:49:10,480 --> 00:49:15,720
infrastructure only change in the edge

1314
00:49:16,240 --> 00:49:19,119
so why you should use polka as a strict

1315
00:49:19,119 --> 00:49:20,720
sauce routing

1316
00:49:20,720 --> 00:49:23,040
polka rotting simultaneously meets some

1317
00:49:23,040 --> 00:49:25,200
followed requirements for example

1318
00:49:25,200 --> 00:49:27,760
topology agnostic so we don't need table

1319
00:49:27,760 --> 00:49:32,079
in the core and we have fixed headers

1320
00:49:32,079 --> 00:49:34,319
and also we're implementing program

1321
00:49:34,319 --> 00:49:36,480
switches for a single path and

1322
00:49:36,480 --> 00:49:39,440
multiplies so it enables a lot of a lot

1323
00:49:39,440 --> 00:49:40,720
of

1324
00:49:40,720 --> 00:49:43,440
applications in that case for example

1325
00:49:43,440 --> 00:49:46,480
have expressiveness reliability and

1326
00:49:46,480 --> 00:49:51,280
efficiency in telemetry so next please

1327
00:49:51,280 --> 00:49:53,680
so how power work

1328
00:49:53,680 --> 00:49:55,920
so we have three polynomials we have a

1329
00:49:55,920 --> 00:49:57,359
rod id

1330
00:49:57,359 --> 00:50:00,400
which identify and calculate

1331
00:50:00,400 --> 00:50:03,359
via using crts that's a chinese remain

1332
00:50:03,359 --> 00:50:04,640
theorem

1333
00:50:04,640 --> 00:50:06,160
we have a node id

1334
00:50:06,160 --> 00:50:08,720
that identify each core node

1335
00:50:08,720 --> 00:50:09,839
for

1336
00:50:09,839 --> 00:50:12,319
so linud we use the radio shift

1337
00:50:12,319 --> 00:50:13,440
polynomial

1338
00:50:13,440 --> 00:50:16,000
and for the part id we have identified

1339
00:50:16,000 --> 00:50:19,119
the parts for each core node

1340
00:50:19,119 --> 00:50:20,160
so

1341
00:50:20,160 --> 00:50:22,400
the forwarding uses a mod operation

1342
00:50:22,400 --> 00:50:25,040
based at the minus of division between

1343
00:50:25,040 --> 00:50:28,160
the route id and the node 80

1344
00:50:28,160 --> 00:50:30,400
next please

1345
00:50:30,400 --> 00:50:34,319
so just showing a timeline in 2020 we

1346
00:50:34,319 --> 00:50:38,319
got a paper published called polka and

1347
00:50:38,319 --> 00:50:40,960
in 2021 we got a google researcher

1348
00:50:40,960 --> 00:50:42,800
called scholar award

1349
00:50:42,800 --> 00:50:45,839
and 2022 we got an intel intel

1350
00:50:45,839 --> 00:50:47,760
connectivity research grant

1351
00:50:47,760 --> 00:50:49,040
and also we

1352
00:50:49,040 --> 00:50:50,960
recently published our paper book by

1353
00:50:50,960 --> 00:50:52,720
spoke

1354
00:50:52,720 --> 00:50:55,119
next please

1355
00:50:55,119 --> 00:50:57,839
so how to implement polka

1356
00:50:57,839 --> 00:51:00,960
poco trying to reuse crc hardware to

1357
00:51:00,960 --> 00:51:04,319
offer polynomial model operation

1358
00:51:04,319 --> 00:51:07,920
and extern mp4 languages so for example

1359
00:51:07,920 --> 00:51:10,640
uh some of the stupid switch supports

1360
00:51:10,640 --> 00:51:12,559
this is kind of extern

1361
00:51:12,559 --> 00:51:15,040
that we offer us to calculate the mod

1362
00:51:15,040 --> 00:51:17,280
operation in a polynomial way

1363
00:51:17,280 --> 00:51:19,520
so the rainforest the red

1364
00:51:19,520 --> 00:51:22,240
project as a open source full features

1365
00:51:22,240 --> 00:51:24,960
relative on which we have network

1366
00:51:24,960 --> 00:51:28,000
hardware for research and education

1367
00:51:28,000 --> 00:51:30,319
so the data plane that's supported now

1368
00:51:30,319 --> 00:51:33,200
is vm2 and tofino and and they did in

1369
00:51:33,200 --> 00:51:34,960
the pdk

1370
00:51:34,960 --> 00:51:37,839
okay so the control plane three routers

1371
00:51:37,839 --> 00:51:41,119
use also standard distribute protocols

1372
00:51:41,119 --> 00:51:44,880
and state and maps segment router index

1373
00:51:44,880 --> 00:51:47,280
into the node ids so you can get

1374
00:51:47,280 --> 00:51:49,440
available topologies

1375
00:51:49,440 --> 00:51:51,760
into from a leak state protocols

1376
00:51:51,760 --> 00:51:54,400
next please

1377
00:51:55,119 --> 00:51:56,400
so

1378
00:51:56,400 --> 00:51:58,559
show me just a small example how it

1379
00:51:58,559 --> 00:52:00,559
works so for example we have a set of

1380
00:52:00,559 --> 00:52:02,640
switches we have switch 1 switch 2 and

1381
00:52:02,640 --> 00:52:05,440
switch three and we have this polynomial

1382
00:52:05,440 --> 00:52:07,599
for each switches that we have this is

1383
00:52:07,599 --> 00:52:09,839
like a relative polynomial and you have

1384
00:52:09,839 --> 00:52:12,319
output part as a polynomial as well so

1385
00:52:12,319 --> 00:52:14,400
can you uh we're at like seven minutes

1386
00:52:14,400 --> 00:52:16,960
of five can you yeah

1387
00:52:16,960 --> 00:52:18,640
the last one so

1388
00:52:18,640 --> 00:52:19,680
and

1389
00:52:19,680 --> 00:52:21,280
go ahead

1390
00:52:21,280 --> 00:52:22,079
so

1391
00:52:22,079 --> 00:52:24,559
so you have the the route id and

1392
00:52:24,559 --> 00:52:26,800
basically on each switch you calculate

1393
00:52:26,800 --> 00:52:28,880
the mod operation by the remainder of

1394
00:52:28,880 --> 00:52:32,160
the division between node id and port id

1395
00:52:32,160 --> 00:52:34,400
uh do the id and the route id and you

1396
00:52:34,400 --> 00:52:38,000
get the output part as in the final so

1397
00:52:38,000 --> 00:52:41,040
next please go ahead so in the end

1398
00:52:41,040 --> 00:52:42,720
you just then you pack delivered

1399
00:52:42,720 --> 00:52:45,200
application in a transferred manner for

1400
00:52:45,200 --> 00:52:46,960
the destination removing

1401
00:52:46,960 --> 00:52:50,800
the the road id in the package

1402
00:52:50,800 --> 00:52:52,559
next yes thank you

1403
00:52:52,559 --> 00:52:54,240
thank you very much uh thanks for

1404
00:52:54,240 --> 00:52:57,040
speeding up uh have a look at the slides

1405
00:52:57,040 --> 00:52:58,960
we went a little bit quickly through the

1406
00:52:58,960 --> 00:53:00,800
the last bits of how that goes on in

1407
00:53:00,800 --> 00:53:03,520
each stage and uh raphael you're around

1408
00:53:03,520 --> 00:53:04,400
for

1409
00:53:04,400 --> 00:53:06,000
today yeah it'll be around today and

1410
00:53:06,000 --> 00:53:08,880
tomorrow cool uh if you have questions

1411
00:53:08,880 --> 00:53:11,040
please find raphael uh sorry we need to

1412
00:53:11,040 --> 00:53:14,640
go to the next which is luis correct uh

1413
00:53:14,640 --> 00:53:17,520
no oh luis is in queue no okay yes i

1414
00:53:17,520 --> 00:53:20,319
think we have one more tour great luis

1415
00:53:20,319 --> 00:53:21,920
can you can you ask your question in

1416
00:53:21,920 --> 00:53:24,880
like 30 seconds

1417
00:53:25,119 --> 00:53:26,839
elise is there

1418
00:53:26,839 --> 00:53:28,480
hello luis contreras

1419
00:53:28,480 --> 00:53:30,000
i would like to ask how the the

1420
00:53:30,000 --> 00:53:31,920
protection is implemented in this schema

1421
00:53:31,920 --> 00:53:34,640
so do you need to pre-calculate the

1422
00:53:34,640 --> 00:53:36,720
the protection beforehand and

1423
00:53:36,720 --> 00:53:39,680
so we we are able to encode a multiple

1424
00:53:39,680 --> 00:53:40,640
path

1425
00:53:40,640 --> 00:53:44,640
and the same encoding rotating so once

1426
00:53:44,640 --> 00:53:46,400
this vector achieves for example you

1427
00:53:46,400 --> 00:53:48,960
have some fail in one path when you go

1428
00:53:48,960 --> 00:53:50,800
to the another path you are railing code

1429
00:53:50,800 --> 00:53:52,480
that that switch needs to go to that

1430
00:53:52,480 --> 00:53:56,160
part so it so you can have multiple

1431
00:53:56,160 --> 00:53:58,880
paths in the same encoder that route id

1432
00:53:58,880 --> 00:54:02,240
which means if this is not independently

1433
00:54:02,240 --> 00:54:03,920
one switch that another switch the

1434
00:54:03,920 --> 00:54:05,280
result of them because they are

1435
00:54:05,280 --> 00:54:07,680
calculated dependently so that's why we

1436
00:54:07,680 --> 00:54:09,040
can encode everything together in the

1437
00:54:09,040 --> 00:54:10,400
same rotate

1438
00:54:10,400 --> 00:54:12,960
rotating in this case okay thank you

1439
00:54:12,960 --> 00:54:13,760
sorry

1440
00:54:13,760 --> 00:54:16,240
thanks a lot um

1441
00:54:16,240 --> 00:54:18,000
i think you are a remote can you go

1442
00:54:18,000 --> 00:54:20,720
ahead and yeah okay

1443
00:54:20,720 --> 00:54:23,720
um

1444
00:54:27,599 --> 00:54:30,640
mobile and this is a version of one of

1445
00:54:30,640 --> 00:54:31,760
the 12

1446
00:54:31,760 --> 00:54:33,200
it's about a

1447
00:54:33,200 --> 00:54:35,280
great base strategy strip between the

1448
00:54:35,280 --> 00:54:38,400
endpoints and the intermediate node

1449
00:54:38,400 --> 00:54:41,359
we have received some comments and

1450
00:54:41,359 --> 00:54:42,480
we wish

1451
00:54:42,480 --> 00:54:44,079
many sounds for that and we wish more

1452
00:54:44,079 --> 00:54:46,240
comments about that uh the next speed

1453
00:54:46,240 --> 00:54:48,000
should be

1454
00:54:48,000 --> 00:54:50,640
i can control it

1455
00:54:50,640 --> 00:54:52,960
our top packet is that

1456
00:54:52,960 --> 00:54:55,839
we think that the bng working as a

1457
00:54:55,839 --> 00:54:57,839
giveaway of the enterprise

1458
00:54:57,839 --> 00:55:00,160
is able to maintain a connection

1459
00:55:00,160 --> 00:55:02,319
per connection state and trust

1460
00:55:02,319 --> 00:55:05,760
relationship for each user so based on

1461
00:55:05,760 --> 00:55:10,079
this uh b3 or this png we want to make

1462
00:55:10,079 --> 00:55:13,040
the endpoint trust the information

1463
00:55:13,040 --> 00:55:16,559
from the ingress p specific uh

1464
00:55:16,559 --> 00:55:18,079
intermediate node

1465
00:55:18,079 --> 00:55:20,720
using this ingress pe can

1466
00:55:20,720 --> 00:55:23,359
make some decision uh for the past to

1467
00:55:23,359 --> 00:55:25,200
the equals p so

1468
00:55:25,200 --> 00:55:27,599
it will influence the path of the

1469
00:55:27,599 --> 00:55:29,119
current

1470
00:55:29,119 --> 00:55:32,000
and the inverse p uh contrast the

1471
00:55:32,000 --> 00:55:33,680
station from

1472
00:55:33,680 --> 00:55:36,319
user for a user for example the

1473
00:55:36,319 --> 00:55:39,440
underpoints in the client uh if if the

1474
00:55:39,440 --> 00:55:40,319
client

1475
00:55:40,319 --> 00:55:42,319
sends some suggestion for some

1476
00:55:42,319 --> 00:55:44,720
information to the

1477
00:55:44,720 --> 00:55:50,319
ingress pe the technology can trust them

1478
00:55:50,319 --> 00:55:51,599
on the

1479
00:55:51,599 --> 00:55:53,839
next page

1480
00:55:53,839 --> 00:55:54,799
uh

1481
00:55:54,799 --> 00:55:55,599
a

1482
00:55:55,599 --> 00:55:58,960
initial magazine result is that

1483
00:55:58,960 --> 00:56:02,079
from this english pe to the kind current

1484
00:56:02,079 --> 00:56:04,559
for example the university need to send

1485
00:56:04,559 --> 00:56:06,079
some message

1486
00:56:06,079 --> 00:56:09,119
to the hand it can

1487
00:56:09,119 --> 00:56:11,200
for example make her as the nature for

1488
00:56:11,200 --> 00:56:14,160
the message by using a private key

1489
00:56:14,160 --> 00:56:15,359
so that

1490
00:56:15,359 --> 00:56:19,280
if you look kind of receive it it can

1491
00:56:19,280 --> 00:56:21,520
check it your the public key or the

1492
00:56:21,520 --> 00:56:22,960
ingress pe

1493
00:56:22,960 --> 00:56:25,280
uh if if the information is from the

1494
00:56:25,280 --> 00:56:27,680
client to the ingress pe

1495
00:56:27,680 --> 00:56:29,839
we think that the png can make a

1496
00:56:29,839 --> 00:56:33,280
signature instead of the clan by using a

1497
00:56:33,280 --> 00:56:34,960
private cave

1498
00:56:34,960 --> 00:56:36,799
belonging to this png

1499
00:56:36,799 --> 00:56:37,920
or

1500
00:56:37,920 --> 00:56:40,240
the if the png

1501
00:56:40,240 --> 00:56:42,160
between the bing and the english pe

1502
00:56:42,160 --> 00:56:44,720
there is a ipsec tunnel

1503
00:56:44,720 --> 00:56:45,920
it can

1504
00:56:45,920 --> 00:56:47,920
send the uh

1505
00:56:47,920 --> 00:56:50,559
traffic of the client into this

1506
00:56:50,559 --> 00:56:53,040
handle so that the university can trust

1507
00:56:53,040 --> 00:56:55,520
that the building have a check that is a

1508
00:56:55,520 --> 00:56:59,520
valid user and the information is

1509
00:56:59,520 --> 00:57:01,040
have been

1510
00:57:01,040 --> 00:57:03,599
verified by the png

1511
00:57:03,599 --> 00:57:05,119
so

1512
00:57:05,119 --> 00:57:06,640
we think that

1513
00:57:06,640 --> 00:57:10,079
if we have this gateway we can make it

1514
00:57:10,079 --> 00:57:13,680
easier to have a trusted relationship

1515
00:57:13,680 --> 00:57:15,839
between this client under the

1516
00:57:15,839 --> 00:57:17,119
ingress pe

1517
00:57:17,119 --> 00:57:19,359
uh

1518
00:57:20,480 --> 00:57:23,280
then this thanks for listening and very

1519
00:57:23,280 --> 00:57:25,520
welcome for commerce

1520
00:57:25,520 --> 00:57:26,960
not here

1521
00:57:26,960 --> 00:57:28,880
perfect and we have

1522
00:57:28,880 --> 00:57:33,040
like three minutes for questions i guess

1523
00:57:36,559 --> 00:57:38,079
luis you are you

1524
00:57:38,079 --> 00:57:41,839
you're still in from last time yep

1525
00:57:42,000 --> 00:57:43,280
no questions

1526
00:57:43,280 --> 00:57:44,720
so

1527
00:57:44,720 --> 00:57:47,280
great to be on time thank you all very

1528
00:57:47,280 --> 00:57:50,319
much um so we are still working on the

1529
00:57:50,319 --> 00:57:53,680
logistics of the um interim meeting on

1530
00:57:53,680 --> 00:57:55,520
scion engagement

1531
00:57:55,520 --> 00:57:56,799
uh

1532
00:57:56,799 --> 00:57:58,720
expect announcements to the list shortly

1533
00:57:58,720 --> 00:57:59,920
but this will be between now and

1534
00:57:59,920 --> 00:58:01,200
philadelphia

1535
00:58:01,200 --> 00:58:04,720
um and uh i suspect given sort of like

1536
00:58:04,720 --> 00:58:06,720
the engagement and all of the really

1537
00:58:06,720 --> 00:58:07,920
sort of like interesting talks in the

1538
00:58:07,920 --> 00:58:08,960
area that we've had this time that we

1539
00:58:08,960 --> 00:58:11,760
will also have a meeting in philadelphia

1540
00:58:11,760 --> 00:58:13,520
um you know a hybrid meeting in

1541
00:58:13,520 --> 00:58:14,880
philadelphia

1542
00:58:14,880 --> 00:58:16,880
um

1543
00:58:16,880 --> 00:58:18,960
and it was great to see you all thank

1544
00:58:18,960 --> 00:58:21,359
you all for um all of the talks in the

1545
00:58:21,359 --> 00:58:23,040
discussion it sounds like looking in the

1546
00:58:23,040 --> 00:58:25,040
chat it looks like um

1547
00:58:25,040 --> 00:58:27,200
sort of michael's thing is halfway to

1548
00:58:27,200 --> 00:58:29,040
being designed a group designed by

1549
00:58:29,040 --> 00:58:30,319
people in the chat so we look forward to

1550
00:58:30,319 --> 00:58:31,119
some

1551
00:58:31,119 --> 00:58:32,319
um

1552
00:58:32,319 --> 00:58:35,040
uh discussion of that on the list and uh

1553
00:58:35,040 --> 00:58:36,960
to see how that develops at the next

1554
00:58:36,960 --> 00:58:39,599
meeting as well

1555
00:58:39,760 --> 00:58:41,920
okay thank you all very much and have a

1556
00:58:41,920 --> 00:58:44,720
great rest of your idea

1557
00:58:44,720 --> 00:58:49,959
thank you brian sorry this piece of crap

1558
00:59:09,680 --> 00:59:12,680
tonight

1559
00:59:20,620 --> 00:59:27,259
[Music]

1560
00:59:39,920 --> 00:59:42,920
indeed

