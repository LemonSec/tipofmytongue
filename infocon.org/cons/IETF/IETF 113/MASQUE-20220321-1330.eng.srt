1
00:00:08,400 --> 00:00:11,400
so

2
00:00:20,480 --> 00:00:23,480
oh

3
00:00:54,640 --> 00:00:56,239
i wouldn't necessarily tie all that

4
00:00:56,239 --> 00:00:59,839
together but

5
00:01:16,000 --> 00:01:19,000
okay

6
00:02:32,319 --> 00:02:35,319
so

7
00:02:38,640 --> 00:02:41,640
so

8
00:02:50,160 --> 00:02:53,400
thank you

9
00:03:04,159 --> 00:03:06,800
good afternoon everyone

10
00:03:06,800 --> 00:03:09,519
and welcome to mask

11
00:03:09,519 --> 00:03:13,200
i will hand it off to the chairs now

12
00:03:15,920 --> 00:03:17,120
all right

13
00:03:17,120 --> 00:03:19,280
thank you david

14
00:03:19,280 --> 00:03:23,200
welcome to mask in vienna and or online

15
00:03:23,200 --> 00:03:25,599
specifically and online because please

16
00:03:25,599 --> 00:03:27,760
go join the on-site tool if you're in

17
00:03:27,760 --> 00:03:32,040
the room and have not yet already

18
00:03:32,400 --> 00:03:34,480
just a quick reminder that this session

19
00:03:34,480 --> 00:03:37,040
is being recorded we've got a link in

20
00:03:37,040 --> 00:03:40,000
this slide or in its equivalent pdf to

21
00:03:40,000 --> 00:03:43,360
both the on-site tool and the fully

22
00:03:43,360 --> 00:03:44,840
remote video

23
00:03:44,840 --> 00:03:47,280
stream if you do not join the on-site

24
00:03:47,280 --> 00:03:48,720
tool you won't be on the blue sheets so

25
00:03:48,720 --> 00:03:50,879
make sure you do that

26
00:03:50,879 --> 00:03:53,200
you can enter the queue in both tools

27
00:03:53,200 --> 00:03:54,560
with the

28
00:03:54,560 --> 00:03:56,480
raise hand button and leave it with the

29
00:03:56,480 --> 00:03:58,319
lower hand button

30
00:03:58,319 --> 00:03:59,840
if you are on site make sure that you

31
00:03:59,840 --> 00:04:01,439
enter the virtual cue because that's the

32
00:04:01,439 --> 00:04:03,200
only place where we will be dequeuing

33
00:04:03,200 --> 00:04:05,040
someone from although you will need to

34
00:04:05,040 --> 00:04:06,480
get up to speak at the actual physical

35
00:04:06,480 --> 00:04:07,599
microphone

36
00:04:07,599 --> 00:04:09,840
if your remote when your turn comes

37
00:04:09,840 --> 00:04:11,599
just press the microphone button to send

38
00:04:11,599 --> 00:04:14,080
audio and press it again to stop sending

39
00:04:14,080 --> 00:04:16,480
audio

40
00:04:18,000 --> 00:04:20,880
this is the ietf notewell especially as

41
00:04:20,880 --> 00:04:22,400
it's monday please make sure that you've

42
00:04:22,400 --> 00:04:24,240
read it recently

43
00:04:24,240 --> 00:04:26,560
these are the terms under which we

44
00:04:26,560 --> 00:04:30,400
collaborate here at the ietf

45
00:04:34,160 --> 00:04:35,840
we've got some helpful links to our

46
00:04:35,840 --> 00:04:37,759
agenda and other notes in here this is

47
00:04:37,759 --> 00:04:39,680
mostly for the pdf later

48
00:04:39,680 --> 00:04:42,560
and our agenda today

49
00:04:42,560 --> 00:04:45,360
first things first we need a jabber

50
00:04:45,360 --> 00:04:48,960
scribe and a note taker

51
00:04:50,400 --> 00:04:52,880
somebody willing to volunteer to

52
00:04:52,880 --> 00:04:54,960
reflect notes at the in person or

53
00:04:54,960 --> 00:04:58,960
virtual mic and or take notes

54
00:05:07,680 --> 00:05:11,840
thank you alan we've got a jabber scribe

55
00:05:12,160 --> 00:05:16,280
someone to take some notes

56
00:05:51,600 --> 00:05:52,960
all right

57
00:05:52,960 --> 00:05:54,639
who else can help with minutes here we

58
00:05:54,639 --> 00:05:57,919
need that to get started people

59
00:05:58,720 --> 00:06:00,400
thank you all right martin lucas thank

60
00:06:00,400 --> 00:06:02,479
you so much

61
00:06:02,479 --> 00:06:03,440
wonderful

62
00:06:03,440 --> 00:06:07,160
that's martin thank you

63
00:06:07,680 --> 00:06:10,000
appreciate that

64
00:06:10,000 --> 00:06:11,600
let's take a quick second to bash the

65
00:06:11,600 --> 00:06:13,680
agenda if anybody would like to reorder

66
00:06:13,680 --> 00:06:15,440
or move things around

67
00:06:15,440 --> 00:06:17,680
what we've got up are our main active

68
00:06:17,680 --> 00:06:19,840
drafts so we've got h3 datagrams in

69
00:06:19,840 --> 00:06:22,000
connectudp and then

70
00:06:22,000 --> 00:06:23,919
after that we will be doing some ip

71
00:06:23,919 --> 00:06:25,520
proxying support

72
00:06:25,520 --> 00:06:28,799
and calling it a morning

73
00:06:32,639 --> 00:06:37,120
all right that means david

74
00:06:37,919 --> 00:06:41,799
all right i'll try to share locally

75
00:06:56,560 --> 00:06:59,599
all right take us away

76
00:07:00,639 --> 00:07:02,000
one second i'm trying to get the clicky

77
00:07:02,000 --> 00:07:05,160
to work

78
00:07:20,319 --> 00:07:23,199
good afternoon wow really have to eat

79
00:07:23,199 --> 00:07:24,400
this thing

80
00:07:24,400 --> 00:07:26,639
good afternoon vienna and good morning

81
00:07:26,639 --> 00:07:28,400
good evening good middle of the now the

82
00:07:28,400 --> 00:07:29,759
entire rest of the world thanks for

83
00:07:29,759 --> 00:07:32,000
coming to mask so my name is david

84
00:07:32,000 --> 00:07:34,479
scanasi and i'm going to be talking

85
00:07:34,479 --> 00:07:38,800
about http datagrams and connect2udp

86
00:07:39,520 --> 00:07:41,840
so first off quick note about the

87
00:07:41,840 --> 00:07:44,479
hackathon we had a quick table which

88
00:07:44,479 --> 00:07:47,199
lars decorated to also make a mask table

89
00:07:47,199 --> 00:07:49,840
this joke never gets old

90
00:07:49,840 --> 00:07:51,360
we didn't

91
00:07:51,360 --> 00:07:54,240
quite get interrupt in the room

92
00:07:54,240 --> 00:07:56,479
but we did

93
00:07:56,479 --> 00:07:58,479
amusingly with the latest drafts since

94
00:07:58,479 --> 00:08:00,720
they're wire format compatible with the

95
00:08:00,720 --> 00:08:02,560
previous ones uh assuming you just

96
00:08:02,560 --> 00:08:04,160
disabled contacts

97
00:08:04,160 --> 00:08:06,560
uh we already have a drop

98
00:08:06,560 --> 00:08:08,479
which i copied the matrix from last time

99
00:08:08,479 --> 00:08:09,680
so we're already in good shape

100
00:08:09,680 --> 00:08:12,000
implementation wise even those those are

101
00:08:12,000 --> 00:08:15,280
pretty new only came out two weeks ago

102
00:08:15,280 --> 00:08:17,840
but let's do a quick recap of where we

103
00:08:17,840 --> 00:08:19,440
are um

104
00:08:19,440 --> 00:08:22,160
so the focus of these two drafts is to

105
00:08:22,160 --> 00:08:24,639
build connect udp which is

106
00:08:24,639 --> 00:08:27,120
like the http connect method but for udp

107
00:08:27,120 --> 00:08:28,720
instead of tcp

108
00:08:28,720 --> 00:08:30,479
um there is

109
00:08:30,479 --> 00:08:33,200
interest in other places to do datagrams

110
00:08:33,200 --> 00:08:35,360
as well so we split into two draft the

111
00:08:35,360 --> 00:08:37,440
first one being http datagrams which is

112
00:08:37,440 --> 00:08:39,679
used for example in web transport and

113
00:08:39,679 --> 00:08:41,279
then the second one being connect udp

114
00:08:41,279 --> 00:08:45,360
which has a dependency on http datagrams

115
00:08:45,360 --> 00:08:47,440
so over the course of the last year and

116
00:08:47,440 --> 00:08:48,720
a half we

117
00:08:48,720 --> 00:08:50,640
redesigned

118
00:08:50,640 --> 00:08:52,800
i think a total of four or five times i

119
00:08:52,800 --> 00:08:54,959
lost count after a while the core design

120
00:08:54,959 --> 00:08:56,800
of this um

121
00:08:56,800 --> 00:08:58,640
so since we were kind of going in

122
00:08:58,640 --> 00:09:00,560
circles we decided to go with another

123
00:09:00,560 --> 00:09:02,959
approach we formed a design team which

124
00:09:02,959 --> 00:09:05,440
met a few times and we came out with an

125
00:09:05,440 --> 00:09:07,200
output at

126
00:09:07,200 --> 00:09:10,000
an interim a few weeks ago

127
00:09:10,000 --> 00:09:13,120
and got consensus so all that was good

128
00:09:13,120 --> 00:09:14,480
that's been merged and now we have these

129
00:09:14,480 --> 00:09:15,920
new drafts so i'm going to quickly go

130
00:09:15,920 --> 00:09:19,440
over what the drafts do right now

131
00:09:19,440 --> 00:09:21,600
so a first part that is in the http

132
00:09:21,600 --> 00:09:25,040
datagrams draft is the capsule protocol

133
00:09:25,040 --> 00:09:25,760
so

134
00:09:25,760 --> 00:09:27,920
the capsule protocol runs on the data

135
00:09:27,920 --> 00:09:30,880
stream which is what we call the

136
00:09:30,880 --> 00:09:32,640
data that goes after the headers so in

137
00:09:32,640 --> 00:09:35,360
http 2 and http 3 that's the data frames

138
00:09:35,360 --> 00:09:37,680
http1 it's after the two new lines after

139
00:09:37,680 --> 00:09:39,519
the header block and it's a

140
00:09:39,519 --> 00:09:42,240
bidirectional sequence of tlvs and it's

141
00:09:42,240 --> 00:09:44,240
meant to be end to end if there are any

142
00:09:44,240 --> 00:09:46,240
intermediaries in the middle

143
00:09:46,240 --> 00:09:48,320
and any method can choose to use it or

144
00:09:48,320 --> 00:09:51,760
not connect udp does and so that allows

145
00:09:51,760 --> 00:09:53,600
it for example

146
00:09:53,600 --> 00:09:56,480
to um

147
00:09:56,720 --> 00:09:58,880
to send datagrams um and there's a

148
00:09:58,880 --> 00:10:00,640
little header that we added as well so

149
00:10:00,640 --> 00:10:03,440
you can tell in terminaries uh that the

150
00:10:03,440 --> 00:10:05,040
capsule protocol is in use it's not

151
00:10:05,040 --> 00:10:07,360
mandatory but it exists

152
00:10:07,360 --> 00:10:09,680
and intermediaries are able to translate

153
00:10:09,680 --> 00:10:11,600
between versions of http like they do

154
00:10:11,600 --> 00:10:14,399
for other methods

155
00:10:14,399 --> 00:10:15,600
and

156
00:10:15,600 --> 00:10:17,680
for http datagrams the difference

157
00:10:17,680 --> 00:10:19,440
between those and the quick datagram

158
00:10:19,440 --> 00:10:21,680
frames is that the http datagrams are

159
00:10:21,680 --> 00:10:23,839
associated with a currently open http

160
00:10:23,839 --> 00:10:26,640
request stream so what that means is

161
00:10:26,640 --> 00:10:28,560
they're always

162
00:10:28,560 --> 00:10:31,040
tied to an open

163
00:10:31,040 --> 00:10:33,519
client-initiated bidirectional stream

164
00:10:33,519 --> 00:10:34,399
um

165
00:10:34,399 --> 00:10:36,160
and so you can still send them kind of

166
00:10:36,160 --> 00:10:38,240
think of it as a sidecar but datagrams

167
00:10:38,240 --> 00:10:39,519
don't exist in a vacuum they're always

168
00:10:39,519 --> 00:10:41,839
tied to a request

169
00:10:41,839 --> 00:10:43,360
and so the

170
00:10:43,360 --> 00:10:45,279
formatting is there on the right so when

171
00:10:45,279 --> 00:10:47,920
you send a quick frame um

172
00:10:47,920 --> 00:10:50,240
that is the quick datagram frame it has

173
00:10:50,240 --> 00:10:52,480
the quarter stream id in it

174
00:10:52,480 --> 00:10:54,720
followed by the http diagram payload so

175
00:10:54,720 --> 00:10:56,240
we divide it by four because all the

176
00:10:56,240 --> 00:10:58,480
client initiate bidirectional stream ids

177
00:10:58,480 --> 00:11:01,519
are multiples of four

178
00:11:01,519 --> 00:11:04,640
and we also introduce a datagram capsule

179
00:11:04,640 --> 00:11:07,040
so capsule being a sequence of tlvs the

180
00:11:07,040 --> 00:11:09,120
t have an inn registry and we define a

181
00:11:09,120 --> 00:11:11,040
single one which is which means datagram

182
00:11:11,040 --> 00:11:13,040
so if you receive one of those it means

183
00:11:13,040 --> 00:11:14,720
the same thing as receiving this

184
00:11:14,720 --> 00:11:16,880
datagram quick frame and quick you

185
00:11:16,880 --> 00:11:18,959
generally will want to use the um the

186
00:11:18,959 --> 00:11:20,720
datagram frame but if you're using http

187
00:11:20,720 --> 00:11:22,560
1 or http 2 this allows you to still

188
00:11:22,560 --> 00:11:24,320
support things like connect udp over

189
00:11:24,320 --> 00:11:27,200
older versions of http

190
00:11:27,200 --> 00:11:30,480
and yeah that works for all known

191
00:11:30,480 --> 00:11:32,800
versions of http

192
00:11:32,800 --> 00:11:35,279
uh so the the biggest point of

193
00:11:35,279 --> 00:11:37,440
contention that we had in http datagrams

194
00:11:37,440 --> 00:11:38,880
over the last year and a half was

195
00:11:38,880 --> 00:11:41,440
extensibility and demultiplexing and

196
00:11:41,440 --> 00:11:43,600
what we had with context so the

197
00:11:43,600 --> 00:11:46,000
consensus that we landed on was to take

198
00:11:46,000 --> 00:11:48,320
that out of that http datagramsdraft and

199
00:11:48,320 --> 00:11:50,480
put it inside connect2udp

200
00:11:50,480 --> 00:11:52,560
so that means that for example for

201
00:11:52,560 --> 00:11:54,560
webtransport it doesn't have this

202
00:11:54,560 --> 00:11:55,920
feature because they didn't see a need

203
00:11:55,920 --> 00:11:58,240
for it

204
00:11:59,760 --> 00:12:02,560
so when it comes to hdb datagrams

205
00:12:02,560 --> 00:12:05,279
we're pretty much done uh we've resolved

206
00:12:05,279 --> 00:12:07,760
all the issues um

207
00:12:07,760 --> 00:12:09,120
we'd like to move forward because that

208
00:12:09,120 --> 00:12:10,880
unblocks other working groups like web

209
00:12:10,880 --> 00:12:12,320
transport

210
00:12:12,320 --> 00:12:14,000
and

211
00:12:14,000 --> 00:12:15,680
i think we're ready for working group

212
00:12:15,680 --> 00:12:18,000
last call so i'd like to kind of

213
00:12:18,000 --> 00:12:20,079
pause here and ask like the chairs what

214
00:12:20,079 --> 00:12:21,680
they think or anyone on the floor if

215
00:12:21,680 --> 00:12:25,839
they have thoughts or comments

216
00:12:34,880 --> 00:12:36,720
not seeing anyone get up in the room

217
00:12:36,720 --> 00:12:39,839
chairs what do you think

218
00:12:42,800 --> 00:12:45,519
i think we're looking pretty good

219
00:12:45,519 --> 00:12:48,000
um i think we'd generally be aiming to

220
00:12:48,000 --> 00:12:50,079
initiate a last call for this on the

221
00:12:50,079 --> 00:12:52,639
list after this meeting

222
00:12:52,639 --> 00:12:55,839
but that is also a massive thanks to a

223
00:12:55,839 --> 00:12:57,200
whole lot of folks who have put a lot of

224
00:12:57,200 --> 00:12:59,040
time and effort into this

225
00:12:59,040 --> 00:13:01,600
especially before our previous interim

226
00:13:01,600 --> 00:13:04,000
and a lot of that stuff so a thank you

227
00:13:04,000 --> 00:13:04,959
for that

228
00:13:04,959 --> 00:13:07,440
and uh now that the slate is looking

229
00:13:07,440 --> 00:13:08,639
pretty clean

230
00:13:08,639 --> 00:13:10,160
um

231
00:13:10,160 --> 00:13:11,839
we're probably going to go and start a

232
00:13:11,839 --> 00:13:13,600
last call right after this meeting wraps

233
00:13:13,600 --> 00:13:15,040
up

234
00:13:15,040 --> 00:13:18,639
thanks eric i see maria in the cube

235
00:13:18,959 --> 00:13:21,279
yeah hi um is it working here it's

236
00:13:21,279 --> 00:13:23,360
working but please state your name mia

237
00:13:23,360 --> 00:13:24,399
coolivin

238
00:13:24,399 --> 00:13:26,000
um yeah i think this looks pretty good

239
00:13:26,000 --> 00:13:27,519
it's pretty clean and it's probably

240
00:13:27,519 --> 00:13:29,200
ready and what i would like to see is

241
00:13:29,200 --> 00:13:32,000
have at least one draft that uses the

242
00:13:32,000 --> 00:13:34,000
extension and you know think of it a

243
00:13:34,000 --> 00:13:36,079
little bit more about if we did it right

244
00:13:36,079 --> 00:13:37,680
at the end

245
00:13:37,680 --> 00:13:39,760
so there is no more extensibility in

246
00:13:39,760 --> 00:13:41,680
http datagrams the extensibility is

247
00:13:41,680 --> 00:13:43,440
inside connect2udp oh sorry i thought

248
00:13:43,440 --> 00:13:45,360
we're talking about both of them well

249
00:13:45,360 --> 00:13:47,199
right now we're just talking about http

250
00:13:47,199 --> 00:13:50,000
no that's easier okay okay but uh hold

251
00:13:50,000 --> 00:13:51,600
that thought i'm gonna keep going then

252
00:13:51,600 --> 00:13:54,079
for connect udp um any other thoughts

253
00:13:54,079 --> 00:13:56,240
from anyone on http datagrams before i

254
00:13:56,240 --> 00:13:59,959
switch over to connect udp

255
00:14:03,120 --> 00:14:05,519
eric

256
00:14:08,800 --> 00:14:11,279
sorting out the cue um

257
00:14:11,279 --> 00:14:13,360
just wanted to ask

258
00:14:13,360 --> 00:14:15,839
is there anybody who thinks that we

259
00:14:15,839 --> 00:14:18,560
should not move hb datagrams forward

260
00:14:18,560 --> 00:14:20,320
without connect udp or anything else

261
00:14:20,320 --> 00:14:22,079
because i think our intent here is to

262
00:14:22,079 --> 00:14:23,600
move hp datagrams forward especially

263
00:14:23,600 --> 00:14:24,720
because there's other working groups

264
00:14:24,720 --> 00:14:26,079
that are depending on it

265
00:14:26,079 --> 00:14:28,959
sooner and then continue to wrap up

266
00:14:28,959 --> 00:14:30,800
connect udp and then connect ip

267
00:14:30,800 --> 00:14:33,439
afterwards

268
00:14:35,199 --> 00:14:36,240
excellent i will take that as a

269
00:14:36,240 --> 00:14:39,519
resounding silence thank you

270
00:14:42,839 --> 00:14:46,639
awesome all right yep um

271
00:14:46,639 --> 00:14:49,440
so i i definitely think we're ready for

272
00:14:49,440 --> 00:14:51,760
working for last call i would just

273
00:14:51,760 --> 00:14:54,959
uh note as hgbis

274
00:14:54,959 --> 00:14:57,040
chair that when we send that out let's

275
00:14:57,040 --> 00:14:59,760
also send a note to the http

276
00:14:59,760 --> 00:15:01,839
group to also review since there may be

277
00:15:01,839 --> 00:15:03,760
some folks in there who haven't

278
00:15:03,760 --> 00:15:06,399
been paying super close attention and

279
00:15:06,399 --> 00:15:08,160
it would be great to get their

280
00:15:08,160 --> 00:15:10,399
review kind of alongside the rest of

281
00:15:10,399 --> 00:15:13,720
working group

282
00:15:14,320 --> 00:15:17,600
yes absolutely thank you

283
00:15:17,839 --> 00:15:21,279
awesome thanks okay moving on to connect

284
00:15:21,279 --> 00:15:23,120
udp

285
00:15:23,120 --> 00:15:27,279
so connect2dp it is not an http method

286
00:15:27,279 --> 00:15:29,519
we it was in the earliest version of the

287
00:15:29,519 --> 00:15:32,720
draft and we kind of kept the name

288
00:15:32,720 --> 00:15:35,920
but it is now an http upgrade token

289
00:15:35,920 --> 00:15:36,959
so

290
00:15:36,959 --> 00:15:39,600
http upgrade tokens allows you to use a

291
00:15:39,600 --> 00:15:43,120
mechanism in http one called upgrade

292
00:15:43,120 --> 00:15:44,639
where you send an upgrade header with

293
00:15:44,639 --> 00:15:46,399
this token so in this case we picked

294
00:15:46,399 --> 00:15:47,759
connect udp

295
00:15:47,759 --> 00:15:49,360
and then it replaces the protocol on the

296
00:15:49,360 --> 00:15:51,920
wire with something different

297
00:15:51,920 --> 00:15:53,519
so that in this case is the capsule

298
00:15:53,519 --> 00:15:56,639
protocol in http 2 and http 3

299
00:15:56,639 --> 00:15:58,639
hp upgrade tokens are used for something

300
00:15:58,639 --> 00:16:00,720
called extended connect

301
00:16:00,720 --> 00:16:02,880
where you send a method of connect

302
00:16:02,880 --> 00:16:05,040
and a protocol of connect udp and this

303
00:16:05,040 --> 00:16:08,639
is documented for http 2 and rfc8441 and

304
00:16:08,639 --> 00:16:10,480
we have a draft

305
00:16:10,480 --> 00:16:11,279
uh

306
00:16:11,279 --> 00:16:13,199
for the same thing http 3 that has

307
00:16:13,199 --> 00:16:15,199
already been approved by the asg so we

308
00:16:15,199 --> 00:16:16,720
have a normative dependency on that but

309
00:16:16,720 --> 00:16:19,040
we see this draft as happening before

310
00:16:19,040 --> 00:16:20,639
connect2dp anyway so we don't see a

311
00:16:20,639 --> 00:16:22,880
problem there

312
00:16:22,880 --> 00:16:26,720
then on the topic of extensibility

313
00:16:26,720 --> 00:16:30,160
we kept the concept of context ids from

314
00:16:30,160 --> 00:16:32,880
the previous http datagram drafts and we

315
00:16:32,880 --> 00:16:35,199
moved them into connect udp

316
00:16:35,199 --> 00:16:37,600
so if you look at the wire format image

317
00:16:37,600 --> 00:16:39,040
here on the right

318
00:16:39,040 --> 00:16:40,800
after the quarter stream id which is

319
00:16:40,800 --> 00:16:43,199
part of the http datagram layer

320
00:16:43,199 --> 00:16:46,800
you have a context id also a variant

321
00:16:46,800 --> 00:16:50,639
quick rfc 9000 variable length integers

322
00:16:50,639 --> 00:16:51,839
and

323
00:16:51,839 --> 00:16:54,560
we define a specific meaning to context

324
00:16:54,560 --> 00:16:57,600
id 0 which means udp payload so every

325
00:16:57,600 --> 00:16:59,360
time you see one that has zero you put

326
00:16:59,360 --> 00:17:01,360
that in your udp socket and vice versa

327
00:17:01,360 --> 00:17:02,880
when you receive a packet on that socket

328
00:17:02,880 --> 00:17:04,319
you put it in a datagram and send it

329
00:17:04,319 --> 00:17:06,400
back to the client

330
00:17:06,400 --> 00:17:08,480
and all other numbers

331
00:17:08,480 --> 00:17:10,559
exist for extensibility

332
00:17:10,559 --> 00:17:13,119
and we decided that they are dynamically

333
00:17:13,119 --> 00:17:14,480
allocated

334
00:17:14,480 --> 00:17:17,280
which means that each

335
00:17:17,280 --> 00:17:19,839
like both the client and the server

336
00:17:19,839 --> 00:17:22,720
have a way to generate new numbers that

337
00:17:22,720 --> 00:17:24,319
haven't been used before the simplest

338
00:17:24,319 --> 00:17:26,799
one is you just keep a counter so you

339
00:17:26,799 --> 00:17:28,640
start at two and you return two and then

340
00:17:28,640 --> 00:17:30,400
four and then six on the client and same

341
00:17:30,400 --> 00:17:32,720
with odd numbers but we don't mandate

342
00:17:32,720 --> 00:17:34,720
exactly how you do that for example if

343
00:17:34,720 --> 00:17:38,240
some future implementation wants to um

344
00:17:38,240 --> 00:17:40,799
reserve the uh low

345
00:17:40,799 --> 00:17:42,559
warrant numbers which only take one byte

346
00:17:42,559 --> 00:17:44,480
encoding for some things they can do

347
00:17:44,480 --> 00:17:45,919
that and give them out of order so

348
00:17:45,919 --> 00:17:48,640
that's kind of all we do to specify them

349
00:17:48,640 --> 00:17:51,360
and uh from the thoughts that we've had

350
00:17:51,360 --> 00:17:53,039
for our extensions this seems to be

351
00:17:53,039 --> 00:17:54,799
powerful enough to enable any extension

352
00:17:54,799 --> 00:17:56,160
that we thought of

353
00:17:56,160 --> 00:17:58,320
because you can for example create an

354
00:17:58,320 --> 00:17:59,440
extension

355
00:17:59,440 --> 00:18:02,320
that adds information to udp let's say

356
00:18:02,320 --> 00:18:03,679
ecn bits

357
00:18:03,679 --> 00:18:06,160
and just define a new context id for

358
00:18:06,160 --> 00:18:07,200
that

359
00:18:07,200 --> 00:18:09,120
or you could define a context id that

360
00:18:09,120 --> 00:18:11,760
sends information that's unrelated to a

361
00:18:11,760 --> 00:18:13,360
specific packet let's say you received

362
00:18:13,360 --> 00:18:15,840
icmp which is not tied to a udp packet

363
00:18:15,840 --> 00:18:18,480
necessarily

364
00:18:19,520 --> 00:18:22,160
and so we we introduce in this draft the

365
00:18:22,160 --> 00:18:24,240
concept of registration

366
00:18:24,240 --> 00:18:25,919
um which

367
00:18:25,919 --> 00:18:28,480
means that we

368
00:18:28,480 --> 00:18:30,080
when an endpoint decides okay i've

369
00:18:30,080 --> 00:18:32,000
picked number four and number four means

370
00:18:32,000 --> 00:18:34,480
this that's how it informs the peer of

371
00:18:34,480 --> 00:18:36,640
that format of those formats or that

372
00:18:36,640 --> 00:18:38,640
format in those semantics

373
00:18:38,640 --> 00:18:40,559
um

374
00:18:40,559 --> 00:18:42,240
and

375
00:18:42,240 --> 00:18:44,960
we don't specify registration exactly we

376
00:18:44,960 --> 00:18:47,200
say that you can use http headers we say

377
00:18:47,200 --> 00:18:49,440
that you can use new capsules

378
00:18:49,440 --> 00:18:51,360
uh because headers are kind of simpler

379
00:18:51,360 --> 00:18:52,960
you're guaranteed to have them like

380
00:18:52,960 --> 00:18:55,840
during the request response cycle

381
00:18:55,840 --> 00:18:57,840
capsules are more powerful if you need

382
00:18:57,840 --> 00:18:58,960
for example for something like

383
00:18:58,960 --> 00:19:00,640
compression where you don't necessarily

384
00:19:00,640 --> 00:19:02,400
know what the value is

385
00:19:02,400 --> 00:19:04,080
at the request response time you can add

386
00:19:04,080 --> 00:19:05,760
them later so you have the option to do

387
00:19:05,760 --> 00:19:07,120
both

388
00:19:07,120 --> 00:19:10,160
but we don't define how to do it we say

389
00:19:10,160 --> 00:19:12,240
okay we leave this as an exercise for

390
00:19:12,240 --> 00:19:13,760
future extensions

391
00:19:13,760 --> 00:19:15,520
and i kind of want to pause on here

392
00:19:15,520 --> 00:19:18,400
because i know some folks had thoughts

393
00:19:18,400 --> 00:19:20,720
my personal preference is to kind of

394
00:19:20,720 --> 00:19:23,039
keep it like this i would keep this

395
00:19:23,039 --> 00:19:24,960
rather keep this draft simple and allow

396
00:19:24,960 --> 00:19:28,080
us to move it forward more quickly

397
00:19:28,080 --> 00:19:30,080
but i want to pause here and make sure

398
00:19:30,080 --> 00:19:31,520
that the working group agrees with that

399
00:19:31,520 --> 00:19:34,520
statement

400
00:19:38,160 --> 00:19:41,760
i see ben schwartz in the queue

401
00:19:44,000 --> 00:19:46,559
go ahead ben

402
00:19:47,280 --> 00:19:48,799
hi

403
00:19:48,799 --> 00:19:52,960
uh oh boy echo that's exciting so uh

404
00:19:52,960 --> 00:19:54,799
yeah i'm one of the people who has

405
00:19:54,799 --> 00:19:56,960
expressed some concern about this

406
00:19:56,960 --> 00:20:00,960
you know i tried to drop a

407
00:20:00,960 --> 00:20:02,400
draft that

408
00:20:02,400 --> 00:20:04,799
sort of made use of this and found that

409
00:20:04,799 --> 00:20:06,960
i ended up writing a lot of boilerplate

410
00:20:06,960 --> 00:20:08,640
to explain how this registration and

411
00:20:08,640 --> 00:20:10,320
negotiation worked and that i was

412
00:20:10,320 --> 00:20:12,640
getting lazy and leaving out parts of it

413
00:20:12,640 --> 00:20:14,960
that i thought i could probably get away

414
00:20:14,960 --> 00:20:16,840
with not dealing with like

415
00:20:16,840 --> 00:20:18,400
deregistration

416
00:20:18,400 --> 00:20:21,679
or handling error cases uh

417
00:20:21,679 --> 00:20:22,640
and so

418
00:20:22,640 --> 00:20:25,280
i i worry that we're going to end up in

419
00:20:25,280 --> 00:20:28,720
a situation where

420
00:20:28,720 --> 00:20:29,840
where

421
00:20:29,840 --> 00:20:31,600
we have extensions that all have

422
00:20:31,600 --> 00:20:34,159
slightly different ways of registering

423
00:20:34,159 --> 00:20:36,320
and many of them are missing important

424
00:20:36,320 --> 00:20:38,880
error handling and garbage collection

425
00:20:38,880 --> 00:20:41,679
uh cleanup type functions

426
00:20:41,679 --> 00:20:43,200
and

427
00:20:43,200 --> 00:20:44,960
we don't get as much code reuse as we

428
00:20:44,960 --> 00:20:46,000
could

429
00:20:46,000 --> 00:20:48,559
that said i am okay with this uh i think

430
00:20:48,559 --> 00:20:51,440
that maybe the right approach here is to

431
00:20:51,440 --> 00:20:54,400
pretty quickly try to come up with some

432
00:20:54,400 --> 00:20:55,280
um

433
00:20:55,280 --> 00:20:57,280
extensions that we think really do

434
00:20:57,280 --> 00:20:59,760
things right and provide a template

435
00:20:59,760 --> 00:21:00,559
that

436
00:21:00,559 --> 00:21:02,960
um that hopefully subsequent extensions

437
00:21:02,960 --> 00:21:05,120
can follow

438
00:21:05,120 --> 00:21:09,280
thanks ben that makes sense uh ted

439
00:21:13,600 --> 00:21:15,440
uh chad hardy speaking i i agree with

440
00:21:15,440 --> 00:21:18,240
you that probably you you will have use

441
00:21:18,240 --> 00:21:20,240
cases where you want to

442
00:21:20,240 --> 00:21:22,799
uh other http headers or capsules but i

443
00:21:22,799 --> 00:21:25,120
think what you probably should do now

444
00:21:25,120 --> 00:21:27,760
is pick the one you think

445
00:21:27,760 --> 00:21:30,799
will be the most useful quickly

446
00:21:30,799 --> 00:21:32,559
put that in the draft and note in the

447
00:21:32,559 --> 00:21:34,480
draft that the other might be defined as

448
00:21:34,480 --> 00:21:36,159
a later extension

449
00:21:36,159 --> 00:21:38,080
that means you don't define both paths

450
00:21:38,080 --> 00:21:39,679
as a later extension you end up with

451
00:21:39,679 --> 00:21:40,960
something

452
00:21:40,960 --> 00:21:43,679
in the in the draft that says this is a

453
00:21:43,679 --> 00:21:45,840
mechanism that is known to work with the

454
00:21:45,840 --> 00:21:47,679
workout issues

455
00:21:47,679 --> 00:21:49,520
that ben was alluding to so that

456
00:21:49,520 --> 00:21:51,520
somebody who wants to say okay i'm gonna

457
00:21:51,520 --> 00:21:53,440
i'm gonna do this with an http header

458
00:21:53,440 --> 00:21:55,520
knows how it works and somebody who

459
00:21:55,520 --> 00:21:57,679
decides that they really need a capsule

460
00:21:57,679 --> 00:22:00,159
knows that well i need all of the things

461
00:22:00,159 --> 00:22:02,000
that are in that plus whatever the

462
00:22:02,000 --> 00:22:03,600
capsule needs

463
00:22:03,600 --> 00:22:04,559
um

464
00:22:04,559 --> 00:22:06,559
but that also means i'm defining

465
00:22:06,559 --> 00:22:09,280
extension as the cost of my going off

466
00:22:09,280 --> 00:22:10,240
the base

467
00:22:10,240 --> 00:22:11,120
spec

468
00:22:11,120 --> 00:22:12,559
now um

469
00:22:12,559 --> 00:22:14,720
i i would actually say for the reasons

470
00:22:14,720 --> 00:22:16,400
you already elucidated that htv headers

471
00:22:16,400 --> 00:22:17,520
would be the one i would put into the

472
00:22:17,520 --> 00:22:19,600
graph now if you are going to put one

473
00:22:19,600 --> 00:22:21,039
into the draft

474
00:22:21,039 --> 00:22:21,919
um

475
00:22:21,919 --> 00:22:23,520
and i i think

476
00:22:23,520 --> 00:22:24,799
functionally

477
00:22:24,799 --> 00:22:26,240
you're not going to be able to put this

478
00:22:26,240 --> 00:22:29,039
complexity off long since you're going

479
00:22:29,039 --> 00:22:31,120
to want to do this soon

480
00:22:31,120 --> 00:22:32,880
so you might as well tackle it now you

481
00:22:32,880 --> 00:22:35,120
could put it in a different document if

482
00:22:35,120 --> 00:22:36,240
that helped you

483
00:22:36,240 --> 00:22:38,240
but i would do it now

484
00:22:38,240 --> 00:22:39,200
thank you

485
00:22:39,200 --> 00:22:41,760
i my personal preference is to keep it

486
00:22:41,760 --> 00:22:45,520
in a different document because oh i see

487
00:22:45,520 --> 00:22:48,640
ted gives me a thumbs up because uh the

488
00:22:48,640 --> 00:22:50,159
use case that we have for actually

489
00:22:50,159 --> 00:22:51,840
putting this in production doesn't need

490
00:22:51,840 --> 00:22:54,159
extensions just yet and it'll be easier

491
00:22:54,159 --> 00:22:55,760
to interoperate with folks if we have a

492
00:22:55,760 --> 00:22:57,919
standard for like that what we need

493
00:22:57,919 --> 00:23:00,159
but having um

494
00:23:00,159 --> 00:23:02,080
a draft for this that we start right

495
00:23:02,080 --> 00:23:04,720
away sounds great to me honestly

496
00:23:04,720 --> 00:23:09,840
um thank you ted uh mike bishop is next

497
00:23:12,320 --> 00:23:13,280
okay

498
00:23:13,280 --> 00:23:14,960
do i have audio yet

499
00:23:14,960 --> 00:23:16,960
uh we can hear you but you're very quiet

500
00:23:16,960 --> 00:23:19,120
uh you have to eat the mic

501
00:23:19,120 --> 00:23:20,240
okay

502
00:23:20,240 --> 00:23:21,950
so i'm going to

503
00:23:21,950 --> 00:23:23,120
[Music]

504
00:23:23,120 --> 00:23:25,039
i feel somewhat hypocritical because the

505
00:23:25,039 --> 00:23:26,799
h3 draft

506
00:23:26,799 --> 00:23:28,799
does kind of say you have to figure it

507
00:23:28,799 --> 00:23:29,600
out

508
00:23:29,600 --> 00:23:32,080
but it gives you a suggested mechanism

509
00:23:32,080 --> 00:23:33,440
which is

510
00:23:33,440 --> 00:23:35,520
sending a setting and defining a setting

511
00:23:35,520 --> 00:23:38,000
as part of your extension

512
00:23:38,000 --> 00:23:40,400
you don't really have settings here so

513
00:23:40,400 --> 00:23:42,799
i'm not sure how you would

514
00:23:42,799 --> 00:23:44,720
how you would hand wave this away i feel

515
00:23:44,720 --> 00:23:47,760
like it needs to be defined

516
00:23:47,760 --> 00:23:50,400
it also helped in h3 that we had several

517
00:23:50,400 --> 00:23:52,559
extensions that were already in progress

518
00:23:52,559 --> 00:23:54,880
when we wrote that

519
00:23:54,880 --> 00:23:56,159
so

520
00:23:56,159 --> 00:23:58,080
i think a separate document would be

521
00:23:58,080 --> 00:23:59,360
fine

522
00:23:59,360 --> 00:24:01,919
but we do need to start it and we do

523
00:24:01,919 --> 00:24:03,840
need to actually define this and not

524
00:24:03,840 --> 00:24:06,880
just leave it for each implement each

525
00:24:06,880 --> 00:24:08,960
extension to

526
00:24:08,960 --> 00:24:12,080
figure out how they want to build it

527
00:24:12,080 --> 00:24:14,320
thanks uh so on the topic of you know

528
00:24:14,320 --> 00:24:16,400
like the analogy we've set

529
00:24:16,400 --> 00:24:19,440
with settings um we have an equivalent

530
00:24:19,440 --> 00:24:21,919
which is http headers

531
00:24:21,919 --> 00:24:23,840
so let's say and and you're right there

532
00:24:23,840 --> 00:24:25,840
maybe in this draft we kind of add a bit

533
00:24:25,840 --> 00:24:28,320
of text explaining um

534
00:24:28,320 --> 00:24:30,720
that's what you use but since the

535
00:24:30,720 --> 00:24:33,360
capsule protocol is only in use and http

536
00:24:33,360 --> 00:24:36,960
datagrams are only in use after

537
00:24:36,960 --> 00:24:39,120
the http request

538
00:24:39,120 --> 00:24:41,279
and response have been received

539
00:24:41,279 --> 00:24:43,760
you can negotiate any kind of extension

540
00:24:43,760 --> 00:24:46,799
by sending them in headers so that gives

541
00:24:46,799 --> 00:24:49,039
us kind of our extensibility joint for

542
00:24:49,039 --> 00:24:50,640
negotiation

543
00:24:50,640 --> 00:24:51,760
and then

544
00:24:51,760 --> 00:24:55,840
the the context id allow the rest

545
00:24:56,000 --> 00:24:57,279
thanks mike

546
00:24:57,279 --> 00:25:00,600
martin seaman

547
00:25:05,360 --> 00:25:08,400
i'm wondering how extensions compose

548
00:25:08,400 --> 00:25:11,039
you've already mentioned uh ecm bits and

549
00:25:11,039 --> 00:25:13,600
in the draft there's a example extension

550
00:25:13,600 --> 00:25:16,000
for timestamps so you would have one

551
00:25:16,000 --> 00:25:19,679
context for the ecnbits one context id

552
00:25:19,679 --> 00:25:21,200
for

553
00:25:21,200 --> 00:25:22,960
timestamps what happens if i want to

554
00:25:22,960 --> 00:25:26,000
send both ecnbits and timestamps do i

555
00:25:26,000 --> 00:25:28,480
need another context id for that

556
00:25:28,480 --> 00:25:30,159
that's a great question so when we

557
00:25:30,159 --> 00:25:32,159
talked about it uh that's how you would

558
00:25:32,159 --> 00:25:35,440
do composibility of extensions is say

559
00:25:35,440 --> 00:25:36,640
uh

560
00:25:36,640 --> 00:25:40,240
if i want to send both uh the ecn bits

561
00:25:40,240 --> 00:25:43,279
and the timestamp i define i use this

562
00:25:43,279 --> 00:25:45,440
to be defined negotiation to say this

563
00:25:45,440 --> 00:25:48,240
context id means a udp payload with

564
00:25:48,240 --> 00:25:50,480
first ecn bits and then the timestamp

565
00:25:50,480 --> 00:25:53,600
and then the udp payload

566
00:25:54,159 --> 00:25:57,840
uh martin duke

567
00:25:58,400 --> 00:26:00,960
uh martin duke google as an individual

568
00:26:00,960 --> 00:26:02,640
um

569
00:26:02,640 --> 00:26:05,200
so uh like obvi headers you know

570
00:26:05,200 --> 00:26:07,440
requested responses are a pretty obvious

571
00:26:07,440 --> 00:26:09,120
extension joint but i will say the

572
00:26:09,120 --> 00:26:11,279
downside of that is that

573
00:26:11,279 --> 00:26:12,720
you can't um

574
00:26:12,720 --> 00:26:14,480
you can't use the extension necessarily

575
00:26:14,480 --> 00:26:16,320
in the first flight

576
00:26:16,320 --> 00:26:18,720
uh depending on you know the specific

577
00:26:18,720 --> 00:26:20,960
extension if i if i send a

578
00:26:20,960 --> 00:26:23,039
if i want to send a request with this

579
00:26:23,039 --> 00:26:25,600
extension negotiation and then

580
00:26:25,600 --> 00:26:27,919
immediately send datagrams with this

581
00:26:27,919 --> 00:26:29,679
thing like i don't know the cert that

582
00:26:29,679 --> 00:26:31,520
the server can accept them

583
00:26:31,520 --> 00:26:33,520
so it's a downside it's not a show

584
00:26:33,520 --> 00:26:34,640
stopper but

585
00:26:34,640 --> 00:26:35,440
um

586
00:26:35,440 --> 00:26:37,039
so that's a very good question and we

587
00:26:37,039 --> 00:26:39,520
actually have a solution to that i think

588
00:26:39,520 --> 00:26:40,960
in the draft and i need to double check

589
00:26:40,960 --> 00:26:42,640
that if that's written down or just in

590
00:26:42,640 --> 00:26:44,159
the back of my head

591
00:26:44,159 --> 00:26:46,640
but all we need to say is that you drop

592
00:26:46,640 --> 00:26:49,279
context ids that you don't know

593
00:26:49,279 --> 00:26:52,400
and so you can let's say as a client uh

594
00:26:52,400 --> 00:26:54,400
yeah we called this zero rtt

595
00:26:54,400 --> 00:26:56,080
extensibility in previous meetings if

596
00:26:56,080 --> 00:26:58,720
anyone remembers but the idea is if you

597
00:26:58,720 --> 00:27:00,240
want to send something in your first

598
00:27:00,240 --> 00:27:02,960
flight you can like send your i want to

599
00:27:02,960 --> 00:27:05,200
use this extension in the header

600
00:27:05,200 --> 00:27:07,919
and in in another header say context id4

601
00:27:07,919 --> 00:27:09,679
means this new extension and then you

602
00:27:09,679 --> 00:27:12,080
send a datagram on context id4

603
00:27:12,080 --> 00:27:14,720
if the server supports it it says with

604
00:27:14,720 --> 00:27:16,799
its server response headers yep i

605
00:27:16,799 --> 00:27:18,080
support this

606
00:27:18,080 --> 00:27:19,919
and then it processes the datagram and

607
00:27:19,919 --> 00:27:21,279
if it doesn't

608
00:27:21,279 --> 00:27:23,200
that header gets ignored the datagram

609
00:27:23,200 --> 00:27:26,159
gets ignored and it's it's lost oh sorry

610
00:27:26,159 --> 00:27:29,039
the datagram is ignored yes and uh but

611
00:27:29,039 --> 00:27:31,039
that is a good point i will double check

612
00:27:31,039 --> 00:27:33,279
it all relies on saying that you just

613
00:27:33,279 --> 00:27:35,440
ign silently ignore a context id you

614
00:27:35,440 --> 00:27:37,120
don't know just drop them

615
00:27:37,120 --> 00:27:38,399
and i need to double check if that's

616
00:27:38,399 --> 00:27:40,640
actually in the draft um if anyone has

617
00:27:40,640 --> 00:27:42,559
it open let me know but otherwise we

618
00:27:42,559 --> 00:27:45,120
should say that

619
00:27:45,200 --> 00:27:46,720
so i mean i guess

620
00:27:46,720 --> 00:27:49,200
okay so i mean the ecn case is the one

621
00:27:49,200 --> 00:27:52,000
that that um you know i certainly have

622
00:27:52,000 --> 00:27:54,480
my mind and that certainly sounds fine

623
00:27:54,480 --> 00:27:57,120
but what you're describing is also a

624
00:27:57,120 --> 00:27:58,799
an attempt to use your rtt essentially

625
00:27:58,799 --> 00:28:01,360
gives you a 1rtt penalty

626
00:28:01,360 --> 00:28:04,720
which also is not great um and i'm

627
00:28:04,720 --> 00:28:05,840
pointing at problems here i don't have a

628
00:28:05,840 --> 00:28:07,760
solution but uh

629
00:28:07,760 --> 00:28:09,360
i'd encourage you to like think a little

630
00:28:09,360 --> 00:28:11,279
more about if there's some way to like a

631
00:28:11,279 --> 00:28:14,240
more robust system for this uh so there

632
00:28:14,240 --> 00:28:17,520
used to be in the draft and the kind of

633
00:28:17,520 --> 00:28:20,159
consensus of the design team was

634
00:28:20,159 --> 00:28:21,919
that

635
00:28:21,919 --> 00:28:23,600
this was sort of too complicated so it

636
00:28:23,600 --> 00:28:24,799
was removed

637
00:28:24,799 --> 00:28:26,159
and that's kind of we ended up with the

638
00:28:26,159 --> 00:28:28,159
current design i i personally want

639
00:28:28,159 --> 00:28:30,559
preferred that feature but i think

640
00:28:30,559 --> 00:28:32,799
i kind of agree in hindsight with the

641
00:28:32,799 --> 00:28:34,000
rest of the working group that you know

642
00:28:34,000 --> 00:28:36,159
keeping this simple even though we might

643
00:28:36,159 --> 00:28:37,679
have some edge cases like that is

644
00:28:37,679 --> 00:28:39,679
probably worth it in the long run

645
00:28:39,679 --> 00:28:41,120
great thanks

646
00:28:41,120 --> 00:28:42,159
cool

647
00:28:42,159 --> 00:28:45,840
eckers in the queue

648
00:28:47,520 --> 00:28:50,080
yeah i mean on the topic of the

649
00:28:50,080 --> 00:28:51,919
hierarchy of sensibility because i

650
00:28:51,919 --> 00:28:53,200
understand the mechanics of information

651
00:28:53,200 --> 00:28:55,440
oh that's a great thing for you isn't it

652
00:28:55,440 --> 00:28:56,799
i'm just gonna keep talking to your head

653
00:28:56,799 --> 00:28:58,320
after afterwards yeah

654
00:28:58,320 --> 00:29:00,480
um sorry yeah i have a really hard time

655
00:29:00,480 --> 00:29:01,919
hearing you can you speak closer to your

656
00:29:01,919 --> 00:29:03,760
microphone maybe slow the acoustics

657
00:29:03,760 --> 00:29:05,200
aren't great and it's probably because

658
00:29:05,200 --> 00:29:08,240
i'm behind the speakers here

659
00:29:08,240 --> 00:29:09,200
yeah

660
00:29:09,200 --> 00:29:11,039
um hard for me to get much closer

661
00:29:11,039 --> 00:29:13,279
without like having my face

662
00:29:13,279 --> 00:29:15,120
attached to my camera

663
00:29:15,120 --> 00:29:16,880
um

664
00:29:16,880 --> 00:29:18,320
so

665
00:29:18,320 --> 00:29:21,200
um on the topic of you know having

666
00:29:21,200 --> 00:29:23,360
accessibility in the first flight

667
00:29:23,360 --> 00:29:24,720
um you know

668
00:29:24,720 --> 00:29:25,919
as i understand the mechanics

669
00:29:25,919 --> 00:29:27,520
inspiration

670
00:29:27,520 --> 00:29:29,039
um

671
00:29:29,039 --> 00:29:31,120
you either have to

672
00:29:31,120 --> 00:29:32,559
that's great i have the echo on your

673
00:29:32,559 --> 00:29:35,440
title did you guys echo cancellation

674
00:29:35,440 --> 00:29:40,120
i need to put the microphone down sorry

675
00:29:40,559 --> 00:29:42,799
um

676
00:29:42,960 --> 00:29:44,960
well it's not helping

677
00:29:44,960 --> 00:29:46,080
um

678
00:29:46,080 --> 00:29:50,080
so i understand the mechanics of

679
00:29:50,080 --> 00:29:53,679
the xero rtd sensibility here

680
00:29:53,679 --> 00:29:56,480
um unless you have mandatory extension

681
00:29:56,480 --> 00:29:57,360
even if these sensors are

682
00:29:57,360 --> 00:29:58,880
self-describing

683
00:29:58,880 --> 00:30:00,240
you can't use them guaranteed in the

684
00:30:00,240 --> 00:30:01,520
first flight if they're aside might

685
00:30:01,520 --> 00:30:02,880
reject it

686
00:30:02,880 --> 00:30:05,840
and so as a practical matter the most

687
00:30:05,840 --> 00:30:07,679
you could possibly do is announce them

688
00:30:07,679 --> 00:30:09,919
in the first flight and

689
00:30:09,919 --> 00:30:11,360
then have

690
00:30:11,360 --> 00:30:13,360
and then still have the in your behavior

691
00:30:13,360 --> 00:30:14,799
that you described here

692
00:30:14,799 --> 00:30:16,399
um i suppose you could have extension

693
00:30:16,399 --> 00:30:18,080
persistent from previous handshakes the

694
00:30:18,080 --> 00:30:20,720
way you are those your rtg features but

695
00:30:20,720 --> 00:30:22,159
i as far as i can tell physics in the

696
00:30:22,159 --> 00:30:24,799
situation just dictate that

697
00:30:24,799 --> 00:30:26,159
there's no way to be absolutely sure the

698
00:30:26,159 --> 00:30:27,120
attention would be acceptable in the

699
00:30:27,120 --> 00:30:29,120
first flight and start using it for

700
00:30:29,120 --> 00:30:31,279
anything that is critical path and will

701
00:30:31,279 --> 00:30:33,360
cause disaster if it fails am i correct

702
00:30:33,360 --> 00:30:35,600
about that

703
00:30:35,600 --> 00:30:37,840
um i wouldn't say it's a disaster if it

704
00:30:37,840 --> 00:30:40,720
fails i would say the datagram gets lost

705
00:30:40,720 --> 00:30:42,799
so if it's something critical let's say

706
00:30:42,799 --> 00:30:45,039
you want to send your quick initial in a

707
00:30:45,039 --> 00:30:47,200
udp packet for this and you want to send

708
00:30:47,200 --> 00:30:48,799
it with ecnbits

709
00:30:48,799 --> 00:30:50,799
and the server the proxy doesn't support

710
00:30:50,799 --> 00:30:52,640
the ecn extension

711
00:30:52,640 --> 00:30:54,320
it's going to drop that datagram tell

712
00:30:54,320 --> 00:30:55,279
you and then you're going to back so

713
00:30:55,279 --> 00:30:57,360
you're going to lose a round trip for

714
00:30:57,360 --> 00:30:59,519
that connection establishment and that's

715
00:30:59,519 --> 00:31:01,440
pretty bad so i think in general

716
00:31:01,440 --> 00:31:02,960
probably when we get around to writing

717
00:31:02,960 --> 00:31:06,080
the ecn drafts we might say

718
00:31:06,080 --> 00:31:07,679
unless you have a reason to know that

719
00:31:07,679 --> 00:31:09,360
the proxy supports ecm like you're

720
00:31:09,360 --> 00:31:11,440
saying maybe we remember it i would just

721
00:31:11,440 --> 00:31:13,120
like not use it in the first flight

722
00:31:13,120 --> 00:31:14,640
because it could cost you a round trip

723
00:31:14,640 --> 00:31:17,279
but the the failure mode is just that

724
00:31:17,279 --> 00:31:18,799
datagram gets lost it doesn't get

725
00:31:18,799 --> 00:31:20,799
misparsed

726
00:31:20,799 --> 00:31:22,480
right i think you and i are the same

727
00:31:22,480 --> 00:31:24,159
nature what i'm thinking is you can't

728
00:31:24,159 --> 00:31:25,200
use

729
00:31:25,200 --> 00:31:28,720
extensions for anything where if it was

730
00:31:28,720 --> 00:31:30,480
um where if it was lost it would cause

731
00:31:30,480 --> 00:31:31,440
good

732
00:31:31,440 --> 00:31:32,799
that's right

733
00:31:32,799 --> 00:31:35,840
okay and i think we're on the same page

734
00:31:35,840 --> 00:31:38,480
cool thank you

735
00:31:38,480 --> 00:31:40,159
um all right

736
00:31:40,159 --> 00:31:41,679
um so

737
00:31:41,679 --> 00:31:43,360
it sounds like what i'm getting from the

738
00:31:43,360 --> 00:31:44,640
room is

739
00:31:44,640 --> 00:31:46,880
folks are overall okay in

740
00:31:46,880 --> 00:31:49,120
not having this draft define the whole

741
00:31:49,120 --> 00:31:50,960
system but that we should start work on

742
00:31:50,960 --> 00:31:53,200
a separate draft to

743
00:31:53,200 --> 00:31:54,880
actually define how to do registration

744
00:31:54,880 --> 00:31:57,519
and that sounds great to me

745
00:31:57,519 --> 00:31:59,120
uh

746
00:31:59,120 --> 00:32:02,000
all right now for everyone's favorite

747
00:32:02,000 --> 00:32:06,640
game let's close some github issues um

748
00:32:06,640 --> 00:32:08,159
so uh

749
00:32:08,159 --> 00:32:10,080
one of the things that i didn't discuss

750
00:32:10,080 --> 00:32:12,240
too much yet is how you configure

751
00:32:12,240 --> 00:32:13,600
clients

752
00:32:13,600 --> 00:32:16,480
so for http connect uh like you know

753
00:32:16,480 --> 00:32:18,000
either in the proxy settings of your

754
00:32:18,000 --> 00:32:21,519
computer or os or of your browser

755
00:32:21,519 --> 00:32:24,159
you put in a proxy host and path sorry

756
00:32:24,159 --> 00:32:25,679
host and port

757
00:32:25,679 --> 00:32:29,120
um what we do instead for connect udp

758
00:32:29,120 --> 00:32:30,960
and the connect ip draft for that matter

759
00:32:30,960 --> 00:32:32,799
copies that as well

760
00:32:32,799 --> 00:32:35,600
is we put in a uri template

761
00:32:35,600 --> 00:32:37,039
and so

762
00:32:37,039 --> 00:32:38,720
it's kind of a thing that looks like a

763
00:32:38,720 --> 00:32:40,960
uri which has these magic variables

764
00:32:40,960 --> 00:32:43,519
target host and target port that anytime

765
00:32:43,519 --> 00:32:45,279
the client wants to do a connect udp

766
00:32:45,279 --> 00:32:46,320
request

767
00:32:46,320 --> 00:32:48,720
it swaps them out for the actual host

768
00:32:48,720 --> 00:32:50,880
and part that it wants to talk to

769
00:32:50,880 --> 00:32:52,880
uh so here are three examples on the

770
00:32:52,880 --> 00:32:57,200
slide um uri templates are

771
00:32:57,200 --> 00:32:59,360
a little bit complicated uh we added

772
00:32:59,360 --> 00:33:01,279
some text

773
00:33:01,279 --> 00:33:02,080
uh

774
00:33:02,080 --> 00:33:03,919
pretty recently i forgot if it got into

775
00:33:03,919 --> 00:33:05,600
the last draft two weeks ago or i think

776
00:33:05,600 --> 00:33:08,240
i might have landed that pr uh before

777
00:33:08,240 --> 00:33:10,399
after the draft caught off so sorry

778
00:33:10,399 --> 00:33:12,320
i added a paragraph that tightens up the

779
00:33:12,320 --> 00:33:14,399
rules on the ui templates so you can't

780
00:33:14,399 --> 00:33:16,960
use some of the really crazy and hard to

781
00:33:16,960 --> 00:33:18,799
parse syntax in there

782
00:33:18,799 --> 00:33:20,240
um

783
00:33:20,240 --> 00:33:22,840
and i think that makes it a lot more

784
00:33:22,840 --> 00:33:24,720
wieldy

785
00:33:24,720 --> 00:33:27,600
however one thing we thought of was a

786
00:33:27,600 --> 00:33:31,120
lot of existing os's have a ui where you

787
00:33:31,120 --> 00:33:33,039
can only put in the proxy host input you

788
00:33:33,039 --> 00:33:35,760
can't put in a new uri

789
00:33:35,760 --> 00:33:37,279
and we kind of probably want to work

790
00:33:37,279 --> 00:33:38,640
with those

791
00:33:38,640 --> 00:33:41,200
so the draft defines something called a

792
00:33:41,200 --> 00:33:43,760
default uri template which is

793
00:33:43,760 --> 00:33:45,679
if your ui kind of has this limitation

794
00:33:45,679 --> 00:33:48,240
here's the uri template you should use

795
00:33:48,240 --> 00:33:50,559
so it's pretty simple you just

796
00:33:50,559 --> 00:33:52,399
use the proxy host call in the proxy

797
00:33:52,399 --> 00:33:54,480
port and three slashes with the target

798
00:33:54,480 --> 00:33:56,320
sword and target post there

799
00:33:56,320 --> 00:33:58,720
um and i think it was eric nygren who

800
00:33:58,720 --> 00:34:00,799
filed an issue and saying well

801
00:34:00,799 --> 00:34:03,600
should this use dot well known um

802
00:34:03,600 --> 00:34:04,640
i

803
00:34:04,640 --> 00:34:07,039
don't personally care much does anyone

804
00:34:07,039 --> 00:34:08,800
have opinions on which way we should go

805
00:34:08,800 --> 00:34:11,599
here do we keep the current one which is

806
00:34:11,599 --> 00:34:14,000
short or we do we move it to something a

807
00:34:14,000 --> 00:34:16,719
dot well known um

808
00:34:16,719 --> 00:34:18,719
i see ben schwartz in the queue go ahead

809
00:34:18,719 --> 00:34:21,719
ben

810
00:34:22,079 --> 00:34:24,879
hey i think that well known is correct

811
00:34:24,879 --> 00:34:27,118
here

812
00:34:27,599 --> 00:34:31,200
sorry you see that again a bit slower

813
00:34:31,760 --> 00:34:34,320
i think dot well known is the correct

814
00:34:34,320 --> 00:34:36,879
place for this

815
00:34:38,879 --> 00:34:43,440
okay anyone else have opinions

816
00:34:45,119 --> 00:34:47,199
empty plus ones in the chat apparently

817
00:34:47,199 --> 00:34:50,719
thank you okay uh the one that i put up

818
00:34:50,719 --> 00:34:52,960
there dot well known slash smash slash

819
00:34:52,960 --> 00:34:55,280
udp slash target host target port does

820
00:34:55,280 --> 00:34:58,760
that work for everyone

821
00:35:04,320 --> 00:35:06,800
i see rajiv in the queue go ahead

822
00:35:06,800 --> 00:35:09,920
yes uh one point that i have is uh in

823
00:35:09,920 --> 00:35:12,400
many cases uh a lot of intermediary

824
00:35:12,400 --> 00:35:15,680
hosts um especially proxies and cdns to

825
00:35:15,680 --> 00:35:18,640
have some special handling logic for

826
00:35:18,640 --> 00:35:20,800
well-known which we already use for a

827
00:35:20,800 --> 00:35:23,359
number of other protocol uh activities

828
00:35:23,359 --> 00:35:26,240
so do you think this might uh you know

829
00:35:26,240 --> 00:35:28,240
be something that interacts

830
00:35:28,240 --> 00:35:31,839
badly with existing rule sets around the

831
00:35:31,839 --> 00:35:34,799
taught well-known path

832
00:35:36,480 --> 00:35:38,640
um so i don't know so thanks for your

833
00:35:38,640 --> 00:35:39,920
question i don't know if i have a great

834
00:35:39,920 --> 00:35:44,640
intuition for that um my gut feeling is

835
00:35:44,640 --> 00:35:46,640
you probably want well you're going to

836
00:35:46,640 --> 00:35:49,200
need some special handling for this path

837
00:35:49,200 --> 00:35:51,200
if you're doing connect udp like this is

838
00:35:51,200 --> 00:35:53,359
fairly different from most http existing

839
00:35:53,359 --> 00:35:54,880
http methods

840
00:35:54,880 --> 00:35:57,680
so probably having that well known maybe

841
00:35:57,680 --> 00:36:00,079
makes that easier but in our

842
00:36:00,079 --> 00:36:02,000
implementation like we don't have any

843
00:36:02,000 --> 00:36:03,680
specific rules that tie to the

844
00:36:03,680 --> 00:36:06,240
well-known prefix so

845
00:36:06,240 --> 00:36:09,440
the problem maybe some text in the draft

846
00:36:09,440 --> 00:36:11,920
around the fact that this might be

847
00:36:11,920 --> 00:36:13,839
something that interacts with existing

848
00:36:13,839 --> 00:36:16,640
rules and implementers should uh you

849
00:36:16,640 --> 00:36:18,960
know maybe just keep an eye out for such

850
00:36:18,960 --> 00:36:20,160
interactions

851
00:36:20,160 --> 00:36:21,920
could be part of the draft just as a

852
00:36:21,920 --> 00:36:24,160
warning to people who are

853
00:36:24,160 --> 00:36:25,520
you know implementing functionality

854
00:36:25,520 --> 00:36:27,839
around

855
00:36:28,800 --> 00:36:30,480
okay thank you yeah that makes sense we

856
00:36:30,480 --> 00:36:32,480
can add some uh some text to make sure

857
00:36:32,480 --> 00:36:35,359
people don't get it wrong

858
00:36:37,920 --> 00:36:42,000
all right uh unless anyone

859
00:36:42,000 --> 00:36:43,520
objects i'm gonna

860
00:36:43,520 --> 00:36:45,920
write a pr to move to that uh well-known

861
00:36:45,920 --> 00:36:48,720
path at the bottom

862
00:36:52,320 --> 00:36:55,839
all right and now for another fun one um

863
00:36:55,839 --> 00:36:58,480
so for http 2 we use extended connect

864
00:36:58,480 --> 00:37:01,040
and the method there is connect

865
00:37:01,040 --> 00:37:04,720
for http one we use upgrade um

866
00:37:04,720 --> 00:37:06,079
upgrade

867
00:37:06,079 --> 00:37:10,079
works in theory uh with any http method

868
00:37:10,079 --> 00:37:11,200
um

869
00:37:11,200 --> 00:37:12,160
and

870
00:37:12,160 --> 00:37:13,760
whatever we put in there doesn't really

871
00:37:13,760 --> 00:37:16,400
have semantics because we could say it's

872
00:37:16,400 --> 00:37:17,599
whatever

873
00:37:17,599 --> 00:37:19,839
any proxy that correctly implements this

874
00:37:19,839 --> 00:37:20,960
spec

875
00:37:20,960 --> 00:37:23,599
we'll handle it doesn't matter

876
00:37:23,599 --> 00:37:25,119
we don't get any information out of the

877
00:37:25,119 --> 00:37:27,119
method

878
00:37:27,119 --> 00:37:28,079
the

879
00:37:28,079 --> 00:37:30,320
draft currently says

880
00:37:30,320 --> 00:37:32,880
we should use connect for consistency

881
00:37:32,880 --> 00:37:35,440
with what we do for h2 and h3

882
00:37:35,440 --> 00:37:38,560
and eric i believe pointed out that um

883
00:37:38,560 --> 00:37:40,960
we should use get because that or maybe

884
00:37:40,960 --> 00:37:42,160
we can use git because that's more

885
00:37:42,160 --> 00:37:44,160
consistent with what websocket uses when

886
00:37:44,160 --> 00:37:46,320
it does upgrade which is kind of the

887
00:37:46,320 --> 00:37:48,640
really only widely depe deployed use of

888
00:37:48,640 --> 00:37:52,000
connect of upgrade that i am aware of

889
00:37:52,000 --> 00:37:55,040
um lucas pointed out on oh yeah we

890
00:37:55,040 --> 00:37:56,960
discussed this at the last itf meeting

891
00:37:56,960 --> 00:37:59,119
and kind of the consensus was let's ask

892
00:37:59,119 --> 00:38:01,440
the https working group so i wrote an

893
00:38:01,440 --> 00:38:03,760
email and got zero replies

894
00:38:03,760 --> 00:38:06,240
so clearly they care

895
00:38:06,240 --> 00:38:09,200
and lucas pointed out that

896
00:38:09,200 --> 00:38:10,640
connect might cause more deployment

897
00:38:10,640 --> 00:38:13,279
concerns

898
00:38:13,920 --> 00:38:18,240
so how about we just use get

899
00:38:18,240 --> 00:38:20,079
if

900
00:38:20,079 --> 00:38:21,280
anyone has

901
00:38:21,280 --> 00:38:23,760
thoughts or opinions please

902
00:38:23,760 --> 00:38:27,240
come to the mic

903
00:38:32,800 --> 00:38:36,320
mt is in the queue go ahead

904
00:38:39,839 --> 00:38:41,040
uh

905
00:38:41,040 --> 00:38:42,960
audio going out everyone

906
00:38:42,960 --> 00:38:43,760
um

907
00:38:43,760 --> 00:38:44,480
so

908
00:38:44,480 --> 00:38:47,280
it's casual by default

909
00:38:47,280 --> 00:38:49,440
so i think there's the possibility that

910
00:38:49,440 --> 00:38:51,040
very stupid

911
00:38:51,040 --> 00:38:55,040
cash might accidentally um

912
00:38:55,040 --> 00:38:57,839
cash something but it shouldn't

913
00:38:57,839 --> 00:38:59,839
but

914
00:38:59,839 --> 00:39:02,240
i'm gonna be okay as well

915
00:39:02,240 --> 00:39:04,720
whatever

916
00:39:08,320 --> 00:39:10,320
so sorry i didn't quite get all that the

917
00:39:10,320 --> 00:39:12,480
audio is surprisingly bad from the front

918
00:39:12,480 --> 00:39:14,160
here uh

919
00:39:14,160 --> 00:39:18,000
you kind of ended with whatever um

920
00:39:18,960 --> 00:39:21,040
so i put it in the chat but if you have

921
00:39:21,040 --> 00:39:22,400
a cache

922
00:39:22,400 --> 00:39:24,880
that i could get

923
00:39:24,880 --> 00:39:28,599
out from the chat

924
00:39:29,359 --> 00:39:32,160
so empty said what about a caching proxy

925
00:39:32,160 --> 00:39:34,640
that falsely caches all gets

926
00:39:34,640 --> 00:39:39,359
ah caches i heard hashes thank you okay

927
00:39:39,599 --> 00:39:43,839
this is really terrible um

928
00:39:44,160 --> 00:39:45,680
no that that's that's a that's a real

929
00:39:45,680 --> 00:39:48,799
concern um

930
00:39:49,520 --> 00:39:51,920
lucas since you're the one uh who was

931
00:39:51,920 --> 00:39:54,320
preferring get to connect you wanna

932
00:39:54,320 --> 00:39:55,359
come

933
00:39:55,359 --> 00:39:57,119
say something

934
00:39:57,119 --> 00:39:59,359
because it's it's true that

935
00:39:59,359 --> 00:40:01,200
get is marked as casual whereas connect

936
00:40:01,200 --> 00:40:02,400
is not

937
00:40:02,400 --> 00:40:04,800
hello i'm lucas can you hear me

938
00:40:04,800 --> 00:40:07,440
yes yes great um i mean the problem

939
00:40:07,440 --> 00:40:10,000
would exist for get websocket upgrade

940
00:40:10,000 --> 00:40:13,440
then like i what i like about using get

941
00:40:13,440 --> 00:40:15,680
is the symmetry and the asymmetry

942
00:40:15,680 --> 00:40:18,560
between h1 doing what it does

943
00:40:18,560 --> 00:40:21,680
and h2 and h3 doing what they do and how

944
00:40:21,680 --> 00:40:24,480
it works already for websocket if we if

945
00:40:24,480 --> 00:40:26,800
we followed this it would at least at

946
00:40:26,800 --> 00:40:29,200
least if there's caveats drawn out in

947
00:40:29,200 --> 00:40:32,000
caches for websocket today

948
00:40:32,000 --> 00:40:33,440
they could still look at the upgrade

949
00:40:33,440 --> 00:40:34,800
header even if they didn't look at the

950
00:40:34,800 --> 00:40:36,640
content and just say

951
00:40:36,640 --> 00:40:38,560
oh you know this isn't cacheable even

952
00:40:38,560 --> 00:40:40,160
though it probably is

953
00:40:40,160 --> 00:40:40,960
uh

954
00:40:40,960 --> 00:40:43,680
in this with respect to the connect you

955
00:40:43,680 --> 00:40:44,960
know the

956
00:40:44,960 --> 00:40:47,680
it's connect is just weird and

957
00:40:47,680 --> 00:40:49,520
trying to build something new on top of

958
00:40:49,520 --> 00:40:52,480
it with 1.1 doesn't fill me with

959
00:40:52,480 --> 00:40:54,400
a lot of confidence if we had to

960
00:40:54,400 --> 00:40:55,680
probably

961
00:40:55,680 --> 00:40:58,240
again could carve out another caveat for

962
00:40:58,240 --> 00:41:01,119
it but it just seems like

963
00:41:01,119 --> 00:41:02,720
i think

964
00:41:02,720 --> 00:41:05,200
this or that whatever yeah oh i'm very

965
00:41:05,200 --> 00:41:07,920
much in the whatever camp uh thinking

966
00:41:07,920 --> 00:41:10,560
more about caching um

967
00:41:10,560 --> 00:41:13,920
so this is for the case of some box that

968
00:41:13,920 --> 00:41:15,680
doesn't support this

969
00:41:15,680 --> 00:41:18,800
so they're probably gonna send a 404 or

970
00:41:18,800 --> 00:41:20,800
some other kind of error

971
00:41:20,800 --> 00:41:23,119
if they cache that that's not a problem

972
00:41:23,119 --> 00:41:24,160
because the answer is going to be the

973
00:41:24,160 --> 00:41:27,040
same every time

974
00:41:29,040 --> 00:41:32,680
eckers in the queue

975
00:41:36,960 --> 00:41:38,560
i'm just having a little trouble

976
00:41:38,560 --> 00:41:40,960
understanding

977
00:41:40,960 --> 00:41:42,480
what

978
00:41:42,480 --> 00:41:44,160
the scenario in which this needs to be a

979
00:41:44,160 --> 00:41:49,000
problem is someone lay it out for me

980
00:41:49,359 --> 00:41:54,960
so the idea is if you're talking to and

981
00:41:54,960 --> 00:41:57,280
granted it's an odd scenario let's say

982
00:41:57,280 --> 00:42:01,440
you set your proxy settings to

983
00:42:01,680 --> 00:42:04,160
i don't know davidskenazi.com i don't

984
00:42:04,160 --> 00:42:06,800
support connect udp on there yet uh the

985
00:42:06,800 --> 00:42:09,440
same server runs mask.that's different

986
00:42:09,440 --> 00:42:12,960
um and you try to do this

987
00:42:12,960 --> 00:42:15,680
you're gonna get some you don't want the

988
00:42:15,680 --> 00:42:17,119
proxy to

989
00:42:17,119 --> 00:42:18,400
catch fire

990
00:42:18,400 --> 00:42:20,800
uh you want it to properly say nope i

991
00:42:20,800 --> 00:42:23,839
don't support this go away and

992
00:42:23,839 --> 00:42:25,680
we're trying to think about like in all

993
00:42:25,680 --> 00:42:27,920
cases it's nothing really too bad but we

994
00:42:27,920 --> 00:42:29,760
want to find the

995
00:42:29,760 --> 00:42:32,000
least dramatic way for the proxy to fail

996
00:42:32,000 --> 00:42:34,400
i guess

997
00:42:37,760 --> 00:42:40,319
oh okay i i feel like my response to

998
00:42:40,319 --> 00:42:42,240
this as to every other concern about

999
00:42:42,240 --> 00:42:44,319
proxies did not speak this problem is

1000
00:42:44,319 --> 00:42:45,680
don't do that

1001
00:42:45,680 --> 00:42:47,200
you don't accidentally get connected to

1002
00:42:47,200 --> 00:42:48,800
a proxy which has the wrong semantics

1003
00:42:48,800 --> 00:42:51,280
you mistyped or you're misconfigured so

1004
00:42:51,280 --> 00:42:53,119
i actually do not care the proxy and the

1005
00:42:53,119 --> 00:42:54,560
process you shouldn't catch fire with

1006
00:42:54,560 --> 00:42:57,440
any data sent to it obviously but um you

1007
00:42:57,440 --> 00:42:59,119
know i don't care if it hangs

1008
00:42:59,119 --> 00:43:01,359
indefinitely um and you have to wait to

1009
00:43:01,359 --> 00:43:02,560
time it out because like that's a

1010
00:43:02,560 --> 00:43:04,240
misconfiguration so i just i just don't

1011
00:43:04,240 --> 00:43:06,560
understand how the situation arises so i

1012
00:43:06,560 --> 00:43:10,078
don't understand why using kind of

1013
00:43:11,200 --> 00:43:13,440
you're right it's a theoretical concern

1014
00:43:13,440 --> 00:43:16,880
to some extent i'm with you there

1015
00:43:17,680 --> 00:43:18,880
uh

1016
00:43:18,880 --> 00:43:21,440
rajiv

1017
00:43:22,640 --> 00:43:25,640
okay

1018
00:43:51,359 --> 00:43:53,040
that was a terrible idea i apologize

1019
00:43:53,040 --> 00:43:55,520
everyone

1020
00:43:55,520 --> 00:43:57,359
okay what i was going to say is i can't

1021
00:43:57,359 --> 00:43:58,880
hear you and from the looks on in the

1022
00:43:58,880 --> 00:44:00,640
room we can't hear you at all if you

1023
00:44:00,640 --> 00:44:02,560
could maybe type it in the chat and then

1024
00:44:02,560 --> 00:44:04,480
someone can come can you hear me now is

1025
00:44:04,480 --> 00:44:06,160
this is it better now

1026
00:44:06,160 --> 00:44:08,240
yes that's much better thank you okay

1027
00:44:08,240 --> 00:44:10,160
great so just moving a little closer to

1028
00:44:10,160 --> 00:44:12,240
the mic so i i was just making a point

1029
00:44:12,240 --> 00:44:14,400
that a lot of uh you know network

1030
00:44:14,400 --> 00:44:15,920
transition and edge devices like

1031
00:44:15,920 --> 00:44:18,319
firewalls or intercepting proxies have

1032
00:44:18,319 --> 00:44:20,960
traditionally had very different uh

1033
00:44:20,960 --> 00:44:23,359
conceptions and uh you know security

1034
00:44:23,359 --> 00:44:26,240
rules around gets and connects because

1035
00:44:26,240 --> 00:44:27,839
of the way they've been used like you

1036
00:44:27,839 --> 00:44:30,560
said traditionally 1.1 and

1037
00:44:30,560 --> 00:44:33,359
you know prior connect has always been

1038
00:44:33,359 --> 00:44:35,920
something that was a tunneling system

1039
00:44:35,920 --> 00:44:38,240
and it's a very different security

1040
00:44:38,240 --> 00:44:41,680
handling than any request with the get

1041
00:44:41,680 --> 00:44:44,640
you know method so that might also be

1042
00:44:44,640 --> 00:44:47,520
something that a lot of people have been

1043
00:44:47,520 --> 00:44:48,560
changing

1044
00:44:48,560 --> 00:44:50,880
uh you know because of web socket but i

1045
00:44:50,880 --> 00:44:53,440
don't see that having changed

1046
00:44:53,440 --> 00:44:55,359
uh so much

1047
00:44:55,359 --> 00:44:57,280
so it might actually make sense for us

1048
00:44:57,280 --> 00:44:58,800
to stick with connect because that's

1049
00:44:58,800 --> 00:45:01,760
closer to the kind of uh you know

1050
00:45:01,760 --> 00:45:03,839
security handling that people expect

1051
00:45:03,839 --> 00:45:06,640
around this kind of traffic

1052
00:45:06,640 --> 00:45:10,160
again just for just a thought over here

1053
00:45:10,640 --> 00:45:12,319
okay thank you

1054
00:45:12,319 --> 00:45:15,279
uh eric

1055
00:45:15,680 --> 00:45:16,839
i

1056
00:45:16,839 --> 00:45:18,400
think

1057
00:45:18,400 --> 00:45:20,400
is it theoretical i think what really

1058
00:45:20,400 --> 00:45:22,960
comes into play is if you start having

1059
00:45:22,960 --> 00:45:26,319
um multi um multi-tenant services so if

1060
00:45:26,319 --> 00:45:28,160
you have for example a cdn node that

1061
00:45:28,160 --> 00:45:30,560
wants to be handling various things is

1062
00:45:30,560 --> 00:45:33,040
it the traditional connect method

1063
00:45:33,040 --> 00:45:35,920
does not have good um multi-tenancy

1064
00:45:35,920 --> 00:45:38,240
support and becomes really messy and

1065
00:45:38,240 --> 00:45:40,160
having the connect method have different

1066
00:45:40,160 --> 00:45:41,760
semantics

1067
00:45:41,760 --> 00:45:43,680
between extended connect and

1068
00:45:43,680 --> 00:45:45,200
non-extended connect especially in a

1069
00:45:45,200 --> 00:45:47,359
multi-tenant environment gets extra

1070
00:45:47,359 --> 00:45:48,480
messy

1071
00:45:48,480 --> 00:45:50,800
i think margin suggestion of post if

1072
00:45:50,800 --> 00:45:52,160
that works

1073
00:45:52,160 --> 00:45:53,440
might also

1074
00:45:53,440 --> 00:45:56,160
address this well

1075
00:45:59,760 --> 00:46:01,920
oh my only problem with post is then i

1076
00:46:01,920 --> 00:46:03,359
can't resolve this with a coin flip

1077
00:46:03,359 --> 00:46:06,240
anymore i need a like three-sided dice

1078
00:46:06,240 --> 00:46:08,000
um

1079
00:46:08,000 --> 00:46:09,920
how do people feel about post that's

1080
00:46:09,920 --> 00:46:11,680
fine by me because

1081
00:46:11,680 --> 00:46:13,839
i'm think i'm very squarely in the

1082
00:46:13,839 --> 00:46:16,560
eckers camp of this will never happen

1083
00:46:16,560 --> 00:46:19,119
and at least speaking for myself and i

1084
00:46:19,119 --> 00:46:20,480
think quite a few others we're never

1085
00:46:20,480 --> 00:46:23,040
going to actually implement this over h1

1086
00:46:23,040 --> 00:46:25,359
we're going to use h2

1087
00:46:25,359 --> 00:46:27,119
we have to implement h2 because some

1088
00:46:27,119 --> 00:46:30,000
networks block udp and quick and h3

1089
00:46:30,000 --> 00:46:34,160
but h2 or h1 is inside tls so

1090
00:46:34,160 --> 00:46:35,680
like the only place where this will

1091
00:46:35,680 --> 00:46:38,400
probably be used over h1 is inside

1092
00:46:38,400 --> 00:46:40,079
someone's network between their front

1093
00:46:40,079 --> 00:46:43,200
end and their back end and

1094
00:46:43,200 --> 00:46:44,319
if they're implementing this they're

1095
00:46:44,319 --> 00:46:45,760
going to fix their network to their

1096
00:46:45,760 --> 00:46:49,040
firewalls to make it work so i

1097
00:46:49,040 --> 00:46:50,640
really don't care about the answer let's

1098
00:46:50,640 --> 00:46:52,800
just pick one um

1099
00:46:52,800 --> 00:46:56,760
does anyone object to post

1100
00:47:07,599 --> 00:47:10,800
yet again seems gross

1101
00:47:10,800 --> 00:47:14,319
that was my objection to get too

1102
00:47:15,200 --> 00:47:17,280
i guess i don't understand eric i mean i

1103
00:47:17,280 --> 00:47:19,040
don't like love connect but i don't

1104
00:47:19,040 --> 00:47:23,319
understand eric's point about why

1105
00:47:30,720 --> 00:47:32,000
um

1106
00:47:32,000 --> 00:47:33,920
so

1107
00:47:33,920 --> 00:47:34,880
the

1108
00:47:34,880 --> 00:47:37,280
i i think it comes down to

1109
00:47:37,280 --> 00:47:39,599
someone who wants to deploy this on some

1110
00:47:39,599 --> 00:47:41,839
back end when they have like some

1111
00:47:41,839 --> 00:47:43,680
appliance in the middle like a firewall

1112
00:47:43,680 --> 00:47:44,960
or something that's going to treat it

1113
00:47:44,960 --> 00:47:46,960
weirdly and i think that's where the

1114
00:47:46,960 --> 00:47:48,400
fears come from

1115
00:47:48,400 --> 00:47:50,000
um

1116
00:47:50,000 --> 00:47:50,960
like

1117
00:47:50,960 --> 00:47:52,960
i think um

1118
00:47:52,960 --> 00:47:54,720
i'm i'm not entirely sure to be honest

1119
00:47:54,720 --> 00:47:57,439
um empty

1120
00:47:59,520 --> 00:48:01,280
oh good job

1121
00:48:01,280 --> 00:48:03,520
um

1122
00:48:03,599 --> 00:48:04,400
so

1123
00:48:04,400 --> 00:48:05,760
i think the key here is that as soon as

1124
00:48:05,760 --> 00:48:09,040
you upgrade header on the request

1125
00:48:09,040 --> 00:48:11,680
it doesn't know what the method is

1126
00:48:11,680 --> 00:48:13,520
what we've heard from people is if you

1127
00:48:13,520 --> 00:48:15,599
happen to use connect

1128
00:48:15,599 --> 00:48:18,079
in combination with upgrade

1129
00:48:18,079 --> 00:48:19,760
they don't know what will happen

1130
00:48:19,760 --> 00:48:22,319
as in if things might explode

1131
00:48:22,319 --> 00:48:24,079
so i'm happy to avoid

1132
00:48:24,079 --> 00:48:25,599
correct

1133
00:48:25,599 --> 00:48:26,400
uh

1134
00:48:26,400 --> 00:48:29,280
but then and look at the look at just

1135
00:48:29,280 --> 00:48:32,680
anything else

1136
00:48:38,720 --> 00:48:39,680
uh

1137
00:48:39,680 --> 00:48:42,240
okay well we have someone who wants

1138
00:48:42,240 --> 00:48:44,079
connect and someone who wants anything

1139
00:48:44,079 --> 00:48:46,880
but connect this is going great um mike

1140
00:48:46,880 --> 00:48:49,839
bishop

1141
00:48:54,880 --> 00:48:57,280
um so i think the

1142
00:48:57,280 --> 00:49:00,640
the issue with connect is that http

1143
00:49:00,640 --> 00:49:03,119
handles connect very weirdly

1144
00:49:03,119 --> 00:49:05,760
basically anything else

1145
00:49:05,760 --> 00:49:06,480
the

1146
00:49:06,480 --> 00:49:09,280
method points to a resource

1147
00:49:09,280 --> 00:49:12,000
connect points to the target

1148
00:49:12,000 --> 00:49:14,480
and so what eric was alluding to is

1149
00:49:14,480 --> 00:49:17,200
something we talked about in hgv before

1150
00:49:17,200 --> 00:49:19,200
and i think here before

1151
00:49:19,200 --> 00:49:21,040
that

1152
00:49:21,040 --> 00:49:22,480
it might be

1153
00:49:22,480 --> 00:49:26,720
nice if there were a different method

1154
00:49:26,720 --> 00:49:27,680
that was

1155
00:49:27,680 --> 00:49:30,319
connect like but are good at extended

1156
00:49:30,319 --> 00:49:31,839
connect

1157
00:49:31,839 --> 00:49:34,240
however i feel like

1158
00:49:34,240 --> 00:49:36,240
if finding a new method might be a

1159
00:49:36,240 --> 00:49:38,400
challenge here and it might be a bigger

1160
00:49:38,400 --> 00:49:40,160
fight than the mass working group wants

1161
00:49:40,160 --> 00:49:41,680
to take on

1162
00:49:41,680 --> 00:49:43,599
if we have to do a hack of combined

1163
00:49:43,599 --> 00:49:46,800
boost is a reasonable hack

1164
00:49:46,880 --> 00:49:48,800
if we want something that's not a hack i

1165
00:49:48,800 --> 00:49:52,000
think we define a new method

1166
00:49:53,839 --> 00:49:56,880
okay that is yet another option thanks

1167
00:49:56,880 --> 00:49:59,440
uh ben

1168
00:49:59,440 --> 00:50:00,960
ben schwartz

1169
00:50:00,960 --> 00:50:04,160
i was going to put in a word for a new

1170
00:50:04,160 --> 00:50:05,119
method

1171
00:50:05,119 --> 00:50:07,440
extended connect

1172
00:50:07,440 --> 00:50:08,720
i think the

1173
00:50:08,720 --> 00:50:11,680
cause of confusion here is that

1174
00:50:11,680 --> 00:50:15,839
the upgrade path in http is

1175
00:50:15,839 --> 00:50:19,839
nominally optional for the server

1176
00:50:19,839 --> 00:50:22,000
so the the server is always within its

1177
00:50:22,000 --> 00:50:25,359
rights in principle to

1178
00:50:25,359 --> 00:50:27,760
say never mind your upgrade i'm going to

1179
00:50:27,760 --> 00:50:30,240
answer the request as you sent it

1180
00:50:30,240 --> 00:50:33,040
and if we send a connect method with a

1181
00:50:33,040 --> 00:50:35,520
thing that follows it that isn't a host

1182
00:50:35,520 --> 00:50:36,480
and port

1183
00:50:36,480 --> 00:50:37,760
then

1184
00:50:37,760 --> 00:50:38,559
the

1185
00:50:38,559 --> 00:50:40,400
the server that tries to do the thought

1186
00:50:40,400 --> 00:50:42,880
that ignores the upgrade header

1187
00:50:42,880 --> 00:50:46,079
is faced with a malformed request which

1188
00:50:46,079 --> 00:50:48,400
seems kind of ugly

1189
00:50:48,400 --> 00:50:49,440
so

1190
00:50:49,440 --> 00:50:50,880
i think that's why people are looking

1191
00:50:50,880 --> 00:50:53,200
for some kind of method like get or post

1192
00:50:53,200 --> 00:50:54,160
where at least that would be a

1193
00:50:54,160 --> 00:50:55,839
well-formed request even if it's

1194
00:50:55,839 --> 00:50:58,400
nonsense

1195
00:50:58,800 --> 00:51:01,440
but a new method would let us have you

1196
00:51:01,440 --> 00:51:03,359
know clear semantics and possibly say

1197
00:51:03,359 --> 00:51:05,280
something like upgrade is mandatory with

1198
00:51:05,280 --> 00:51:08,680
this method

1199
00:51:09,920 --> 00:51:11,520
thanks ben

1200
00:51:11,520 --> 00:51:13,680
um

1201
00:51:14,480 --> 00:51:17,440
uh cheers was my mic was before ben i

1202
00:51:17,440 --> 00:51:21,559
think yep there we go ecker

1203
00:51:22,079 --> 00:51:25,200
yeah mt persuaded me so i'm

1204
00:51:25,200 --> 00:51:27,440
i guess i'm fine with anything

1205
00:51:27,440 --> 00:51:31,359
but it including non-connect things

1206
00:51:31,599 --> 00:51:34,000
okay thank you that's that's helpful

1207
00:51:34,000 --> 00:51:35,440
because at the end of the day a lot of

1208
00:51:35,440 --> 00:51:37,359
these considerations remember this is

1209
00:51:37,359 --> 00:51:40,160
upgrade so an http upgrade you no longer

1210
00:51:40,160 --> 00:51:42,640
have like the similar things that you

1211
00:51:42,640 --> 00:51:44,720
would expect from the rules so upgrade

1212
00:51:44,720 --> 00:51:47,520
like connect or like weird abnormalities

1213
00:51:47,520 --> 00:51:49,280
in http land

1214
00:51:49,280 --> 00:51:50,880
um

1215
00:51:50,880 --> 00:51:52,640
and you know just thinking about this

1216
00:51:52,640 --> 00:51:54,319
more like

1217
00:51:54,319 --> 00:51:57,520
these problems exist for websockets like

1218
00:51:57,520 --> 00:51:59,440
it's not like

1219
00:51:59,440 --> 00:52:01,359
days haven't been solved like if someone

1220
00:52:01,359 --> 00:52:02,960
wants to deploy websocket today they

1221
00:52:02,960 --> 00:52:04,480
need to fix this so if they want to

1222
00:52:04,480 --> 00:52:06,640
deploy connect udp just point at oh the

1223
00:52:06,640 --> 00:52:08,160
guy next door

1224
00:52:08,160 --> 00:52:09,920
deployed websocket asked them how they

1225
00:52:09,920 --> 00:52:10,880
did it

1226
00:52:10,880 --> 00:52:13,839
um so let's make me lean towards there

1227
00:52:13,839 --> 00:52:15,440
at the end of the day honestly i really

1228
00:52:15,440 --> 00:52:17,920
don't care as long as we pick one uh

1229
00:52:17,920 --> 00:52:19,839
lucas

1230
00:52:19,839 --> 00:52:22,480
hello lucas again um just i guess adding

1231
00:52:22,480 --> 00:52:25,440
more flavor to my um

1232
00:52:25,440 --> 00:52:27,599
not liking connect it's that you know

1233
00:52:27,599 --> 00:52:30,000
the if you read the spec that defines

1234
00:52:30,000 --> 00:52:32,000
the connect method it says this is this

1235
00:52:32,000 --> 00:52:33,839
is how you should handle it and and this

1236
00:52:33,839 --> 00:52:36,960
is what you do and if you're a server

1237
00:52:36,960 --> 00:52:39,680
that doesn't want to do that then you

1238
00:52:39,680 --> 00:52:41,040
you don't and you reject it and you

1239
00:52:41,040 --> 00:52:43,359
might even just say anything that has

1240
00:52:43,359 --> 00:52:46,720
the connect verb in in this part of the

1241
00:52:46,720 --> 00:52:48,640
the bytes that form the request i'm just

1242
00:52:48,640 --> 00:52:51,359
going to instantly respond with no like

1243
00:52:51,359 --> 00:52:53,119
this this doesn't make sense on my

1244
00:52:53,119 --> 00:52:55,520
deployment my infrastructure

1245
00:52:55,520 --> 00:52:58,400
now if if you add a well actually if you

1246
00:52:58,400 --> 00:53:00,480
add a upgrade header you need to read

1247
00:53:00,480 --> 00:53:03,200
that thing and then maybe also look at

1248
00:53:03,200 --> 00:53:04,880
the contents and maybe decide to do

1249
00:53:04,880 --> 00:53:06,319
something else

1250
00:53:06,319 --> 00:53:07,839
it might be too late for them to even

1251
00:53:07,839 --> 00:53:10,160
bother wanting to change

1252
00:53:10,160 --> 00:53:12,079
but meanwhile they might well already

1253
00:53:12,079 --> 00:53:16,240
handle websockets and would just

1254
00:53:16,240 --> 00:53:18,720
take that parsing path and added a new

1255
00:53:18,720 --> 00:53:21,359
handler for a new value in the upgrade

1256
00:53:21,359 --> 00:53:23,520
header and it all makes sense so just

1257
00:53:23,520 --> 00:53:26,000
from a purely like i would need to

1258
00:53:26,000 --> 00:53:28,400
analyze this and and understand the

1259
00:53:28,400 --> 00:53:31,040
security considerations it's it's a no

1260
00:53:31,040 --> 00:53:32,960
op if you were to use get because it's

1261
00:53:32,960 --> 00:53:34,400
already been done for some kinds of

1262
00:53:34,400 --> 00:53:36,079
deployment

1263
00:53:36,079 --> 00:53:38,319
okay thank you yeah that that

1264
00:53:38,319 --> 00:53:42,920
sounds sensible to me uh tommy

1265
00:53:44,640 --> 00:53:47,440
all right yeah i just got in cued to say

1266
00:53:47,440 --> 00:53:49,119
that i've been convinced by this

1267
00:53:49,119 --> 00:53:50,880
discussion that we should just go with

1268
00:53:50,880 --> 00:53:52,319
get

1269
00:53:52,319 --> 00:53:54,800
connect clearly as problems and as i

1270
00:53:54,800 --> 00:53:56,960
mentioned in the chat

1271
00:53:56,960 --> 00:53:58,720
i don't think the overhead of trying to

1272
00:53:58,720 --> 00:54:01,760
use a new method or even using a method

1273
00:54:01,760 --> 00:54:02,720
other than

1274
00:54:02,720 --> 00:54:04,400
get which isn't being used with upgrade

1275
00:54:04,400 --> 00:54:06,160
today is worth the effort considering

1276
00:54:06,160 --> 00:54:07,359
that

1277
00:54:07,359 --> 00:54:10,400
we don't really expect this http one use

1278
00:54:10,400 --> 00:54:12,880
case to really ever be used

1279
00:54:12,880 --> 00:54:14,640
in the wild um

1280
00:54:14,640 --> 00:54:16,960
so it's not worth going through

1281
00:54:16,960 --> 00:54:21,280
allocations or paving new ways for it

1282
00:54:21,280 --> 00:54:23,599
thank you tommy yeah i fully agree with

1283
00:54:23,599 --> 00:54:26,079
uh having less work for the editor

1284
00:54:26,079 --> 00:54:27,520
because that's me

1285
00:54:27,520 --> 00:54:29,839
uh so i'd very happily not create a new

1286
00:54:29,839 --> 00:54:32,480
method uh martin duke

1287
00:54:32,480 --> 00:54:34,240
um

1288
00:54:34,240 --> 00:54:36,880
very briefly like um

1289
00:54:36,880 --> 00:54:40,000
i will just like say get

1290
00:54:40,000 --> 00:54:42,400
because um of the wisdom of the agents

1291
00:54:42,400 --> 00:54:43,920
who did it with websockets and maybe

1292
00:54:43,920 --> 00:54:45,280
there was a good reason

1293
00:54:45,280 --> 00:54:46,400
and

1294
00:54:46,400 --> 00:54:48,480
beyond that just like be consistent with

1295
00:54:48,480 --> 00:54:50,000
the approach we have

1296
00:54:50,000 --> 00:54:52,000
but more than that this is starting to

1297
00:54:52,000 --> 00:54:53,599
smell like a bike shed since everyone

1298
00:54:53,599 --> 00:54:55,599
agrees it's a corner case that may never

1299
00:54:55,599 --> 00:54:56,960
actually come up

1300
00:54:56,960 --> 00:54:59,200
we're spending an awful lot of time

1301
00:54:59,200 --> 00:55:01,280
legislating this maybe we can take it to

1302
00:55:01,280 --> 00:55:02,160
the list

1303
00:55:02,160 --> 00:55:04,559
if there's other stuff

1304
00:55:04,559 --> 00:55:06,960
thanks um

1305
00:55:06,960 --> 00:55:09,520
phb

1306
00:55:14,319 --> 00:55:18,520
uh you are muted php

1307
00:55:24,079 --> 00:55:25,599
no i'm not muted i'm on the wrong

1308
00:55:25,599 --> 00:55:28,000
microphone we can hear you

1309
00:55:28,000 --> 00:55:28,880
what

1310
00:55:28,880 --> 00:55:30,160
we can do

1311
00:55:30,160 --> 00:55:32,319
i'm just wondering why you're doing 1.1

1312
00:55:32,319 --> 00:55:33,760
at all

1313
00:55:33,760 --> 00:55:35,680
i mean if you if you think this is a

1314
00:55:35,680 --> 00:55:36,960
corner case

1315
00:55:36,960 --> 00:55:38,480
you think it's

1316
00:55:38,480 --> 00:55:40,000
you know you've got a complicated enough

1317
00:55:40,000 --> 00:55:41,920
spec already

1318
00:55:41,920 --> 00:55:43,920
why not just get rid of it if people

1319
00:55:43,920 --> 00:55:48,079
need to downgrade let them sort it out

1320
00:55:48,079 --> 00:55:50,799
um that that's a reasonable point uh i

1321
00:55:50,799 --> 00:55:53,520
suggested that a few years ago and we

1322
00:55:53,520 --> 00:55:55,359
got some pretty

1323
00:55:55,359 --> 00:55:57,119
like clear working group consensus that

1324
00:55:57,119 --> 00:55:59,839
we wanted to support h1 uh so we decided

1325
00:55:59,839 --> 00:56:01,680
to do it accepting the fact that we

1326
00:56:01,680 --> 00:56:04,240
didn't want to spend too much time on it

1327
00:56:04,240 --> 00:56:06,880
so um what i'm getting from this

1328
00:56:06,880 --> 00:56:10,240
discussion is that the folks who were

1329
00:56:10,240 --> 00:56:12,079
against gets seemed to

1330
00:56:12,079 --> 00:56:13,839
at least some of them seem to have been

1331
00:56:13,839 --> 00:56:16,880
convinced that get seemed fine

1332
00:56:16,880 --> 00:56:19,200
and a lot of whatever we don't care

1333
00:56:19,200 --> 00:56:22,559
please move on this hurts

1334
00:56:22,559 --> 00:56:24,079
and i would like to not have to take out

1335
00:56:24,079 --> 00:56:26,160
the hat of consensus because that always

1336
00:56:26,160 --> 00:56:28,558
works

1337
00:56:28,880 --> 00:56:31,200
so i'm gonna propose we go with connect

1338
00:56:31,200 --> 00:56:34,400
can anyone like really really not live

1339
00:56:34,400 --> 00:56:38,480
sorry with get with get sorry whoops

1340
00:56:39,200 --> 00:56:41,200
we i'm going to propose that we move

1341
00:56:41,200 --> 00:56:44,079
forward with get here can anyone

1342
00:56:44,079 --> 00:56:47,839
absolutely not live with that

1343
00:56:55,599 --> 00:56:57,119
okay

1344
00:56:57,119 --> 00:56:59,680
then we shall go with get thank you very

1345
00:56:59,680 --> 00:57:02,000
much for our traditional mask bike shed

1346
00:57:02,000 --> 00:57:04,319
of the of the week

1347
00:57:04,319 --> 00:57:06,160
and

1348
00:57:06,160 --> 00:57:10,160
was my next light button not working

1349
00:57:10,559 --> 00:57:13,920
so fun fact that was the last issue on

1350
00:57:13,920 --> 00:57:15,760
the connect udp draft that's why we

1351
00:57:15,760 --> 00:57:17,359
spent so much time on it even though it

1352
00:57:17,359 --> 00:57:19,040
wasn't very interesting and so this is

1353
00:57:19,040 --> 00:57:21,599
my favorite slide because it's fun

1354
00:57:21,599 --> 00:57:24,319
um we've managed to resolve all

1355
00:57:24,319 --> 00:57:27,280
remaining open issues on connect udp

1356
00:57:27,280 --> 00:57:28,880
where do we go from here

1357
00:57:28,880 --> 00:57:31,280
um

1358
00:57:31,280 --> 00:57:33,920
i'd be inclined to perhaps also move it

1359
00:57:33,920 --> 00:57:35,680
to working group last call we're in good

1360
00:57:35,680 --> 00:57:38,240
shape we have multiple implementations

1361
00:57:38,240 --> 00:57:41,680
this is out in production for some folks

1362
00:57:41,680 --> 00:57:44,400
can we like

1363
00:57:44,400 --> 00:57:46,240
start that working last call chairs what

1364
00:57:46,240 --> 00:57:48,640
do you think

1365
00:57:52,880 --> 00:57:55,040
our

1366
00:57:58,880 --> 00:58:01,520
no worries uh thinking that a last call

1367
00:58:01,520 --> 00:58:03,599
is probably appropriate for this as well

1368
00:58:03,599 --> 00:58:05,680
let's try to wrap up kind of the issues

1369
00:58:05,680 --> 00:58:07,599
that we're resolving here today and get

1370
00:58:07,599 --> 00:58:09,760
that out for folks to to look at but i

1371
00:58:09,760 --> 00:58:12,000
think is you know

1372
00:58:12,000 --> 00:58:12,880
when

1373
00:58:12,880 --> 00:58:15,760
we are rapidly approaching the point of

1374
00:58:15,760 --> 00:58:17,520
having nothing more to do

1375
00:58:17,520 --> 00:58:19,520
for this one and it would be good to get

1376
00:58:19,520 --> 00:58:20,240
that

1377
00:58:20,240 --> 00:58:22,640
stamped and wrapped up

1378
00:58:22,640 --> 00:58:24,640
yeah and as with other

1379
00:58:24,640 --> 00:58:26,000
like you know this is part of our

1380
00:58:26,000 --> 00:58:28,160
process working group last call also

1381
00:58:28,160 --> 00:58:30,079
kind of motivates people to read the

1382
00:58:30,079 --> 00:58:31,680
drafts and i'm sure they'll come you

1383
00:58:31,680 --> 00:58:33,040
know that'll

1384
00:58:33,040 --> 00:58:34,559
get a bunch of review which is also what

1385
00:58:34,559 --> 00:58:36,000
we need so i think we're in we're in

1386
00:58:36,000 --> 00:58:38,480
good shape

1387
00:58:41,760 --> 00:58:44,720
okay i

1388
00:58:45,280 --> 00:58:47,839
that was it with my slides and so as

1389
00:58:47,839 --> 00:58:49,040
we're clearing that out of the working

1390
00:58:49,040 --> 00:58:50,720
group i think we can

1391
00:58:50,720 --> 00:58:53,280
start focusing on connect ip which if i

1392
00:58:53,280 --> 00:58:57,119
understand it is the next presentation

1393
00:58:57,839 --> 00:59:01,558
thanks everyone for listening

1394
00:59:12,880 --> 00:59:14,319
all right

1395
00:59:14,319 --> 00:59:16,640
hello everyone i'm tommy pauly and i am

1396
00:59:16,640 --> 00:59:19,520
going to be sharing our

1397
00:59:19,520 --> 00:59:22,400
other adopted draft which is connect ip

1398
00:59:22,400 --> 00:59:26,000
or ip proxy support for http

1399
00:59:26,000 --> 00:59:29,119
and this is a

1400
00:59:29,200 --> 00:59:32,000
collaboration between myself and the

1401
00:59:32,000 --> 00:59:34,400
folk at google and erickson who had had

1402
00:59:34,400 --> 00:59:36,960
previous proposals around connect ap

1403
00:59:36,960 --> 00:59:40,079
and we had merged the document before

1404
00:59:40,079 --> 00:59:43,280
and we have a pretty quick update today

1405
00:59:43,280 --> 00:59:46,280
um

1406
00:59:46,559 --> 00:59:48,640
so the main change in the last version

1407
00:59:48,640 --> 00:59:50,640
of the draft was just to

1408
00:59:50,640 --> 00:59:53,040
update things to align with the changes

1409
00:59:53,040 --> 00:59:55,839
that you've already heard about in http

1410
00:59:55,839 --> 00:59:58,640
datagrams and connect udp

1411
00:59:58,640 --> 01:00:01,359
a lot of it is very much mirroring

1412
01:00:01,359 --> 01:00:03,200
connect udp

1413
01:00:03,200 --> 01:00:04,240
um

1414
01:00:04,240 --> 01:00:06,799
as far as how it uses

1415
01:00:06,799 --> 01:00:08,799
um

1416
01:00:08,799 --> 01:00:10,799
the datagram formats

1417
01:00:10,799 --> 01:00:14,319
how it has support for context

1418
01:00:14,319 --> 01:00:16,400
or extensibility

1419
01:00:16,400 --> 01:00:18,880
the existing work we had done for the

1420
01:00:18,880 --> 01:00:22,079
capsules to negotiate

1421
01:00:22,079 --> 01:00:23,599
uh the different

1422
01:00:23,599 --> 01:00:25,200
ip address routes and address

1423
01:00:25,200 --> 01:00:27,359
assignments not all remained the same as

1424
01:00:27,359 --> 01:00:29,839
it was before

1425
01:00:30,319 --> 01:00:32,640
so we really have two

1426
01:00:32,640 --> 01:00:34,880
open issues that we want to go through

1427
01:00:34,880 --> 01:00:36,240
today that are

1428
01:00:36,240 --> 01:00:38,400
interesting problems still to solve

1429
01:00:38,400 --> 01:00:40,000
and then the other point i'll mention is

1430
01:00:40,000 --> 01:00:41,760
that we do need more interop testing on

1431
01:00:41,760 --> 01:00:43,920
this so far a lot of the work has been

1432
01:00:43,920 --> 01:00:45,119
done

1433
01:00:45,119 --> 01:00:46,720
around

1434
01:00:46,720 --> 01:00:50,079
basic http datagrams and connect udp

1435
01:00:50,079 --> 01:00:52,000
those as we see are getting pretty

1436
01:00:52,000 --> 01:00:54,799
mature and now i think it's going to be

1437
01:00:54,799 --> 01:00:56,960
useful for implementations who are

1438
01:00:56,960 --> 01:00:58,480
working on mask

1439
01:00:58,480 --> 01:01:00,960
to start playing with connect ip and

1440
01:01:00,960 --> 01:01:04,400
doing interrupt testing

1441
01:01:04,400 --> 01:01:06,480
i can say for my own implementation this

1442
01:01:06,480 --> 01:01:08,480
is again still a to do to really get

1443
01:01:08,480 --> 01:01:11,040
ready for interop but

1444
01:01:11,040 --> 01:01:12,720
if you're interested in doing that let's

1445
01:01:12,720 --> 01:01:13,920
talk

1446
01:01:13,920 --> 01:01:17,920
collectively about that and prepare for

1447
01:01:18,000 --> 01:01:20,480
a checkpoint at some interim or at least

1448
01:01:20,480 --> 01:01:22,400
by the next ietf meeting so that we can

1449
01:01:22,400 --> 01:01:24,240
get some good experience with this

1450
01:01:24,240 --> 01:01:26,559
protocol

1451
01:01:26,559 --> 01:01:28,559
all right so let's dive into those open

1452
01:01:28,559 --> 01:01:30,960
issues

1453
01:01:32,799 --> 01:01:35,359
the main one which is interesting is mtu

1454
01:01:35,359 --> 01:01:37,440
handling

1455
01:01:37,440 --> 01:01:40,240
and this is

1456
01:01:40,240 --> 01:01:41,760
something that in general you have to

1457
01:01:41,760 --> 01:01:44,240
deal with with encapsulating

1458
01:01:44,240 --> 01:01:46,160
protocols and proxies

1459
01:01:46,160 --> 01:01:47,760
to some degree

1460
01:01:47,760 --> 01:01:49,920
uh people need to think about it for

1461
01:01:49,920 --> 01:01:52,240
connect udp but this is really an

1462
01:01:52,240 --> 01:01:54,480
interesting problem for connect ip

1463
01:01:54,480 --> 01:01:56,079
specifically

1464
01:01:56,079 --> 01:01:57,760
and the problem which uh was raised in

1465
01:01:57,760 --> 01:02:00,000
an issue that david wrote up

1466
01:02:00,000 --> 01:02:02,160
is that you can have

1467
01:02:02,160 --> 01:02:04,640
cases where you have a small

1468
01:02:04,640 --> 01:02:07,599
quick packet size that is the actual

1469
01:02:07,599 --> 01:02:09,200
kind of tunnel

1470
01:02:09,200 --> 01:02:12,160
and it may be too small to actually hold

1471
01:02:12,160 --> 01:02:16,799
the minimum mtu that's required for ipv6

1472
01:02:16,880 --> 01:02:18,960
which

1473
01:02:18,960 --> 01:02:21,280
um you know not only is it annoying to

1474
01:02:21,280 --> 01:02:23,359
not be able to hold large packets but it

1475
01:02:23,359 --> 01:02:25,760
actually becomes a

1476
01:02:25,760 --> 01:02:27,119
protocol violation or like you

1477
01:02:27,119 --> 01:02:29,039
essentially can no longer

1478
01:02:29,039 --> 01:02:32,160
use this as an effective tunnel for ipv6

1479
01:02:32,160 --> 01:02:35,200
so i give two examples here of some of

1480
01:02:35,200 --> 01:02:37,280
the sizes that you could expect

1481
01:02:37,280 --> 01:02:39,839
the first one is if you're on a normal

1482
01:02:39,839 --> 01:02:42,160
1500 byte mtu link

1483
01:02:42,160 --> 01:02:43,680
if you do the calculations and figure

1484
01:02:43,680 --> 01:02:44,880
out

1485
01:02:44,880 --> 01:02:47,280
how much room you have

1486
01:02:47,280 --> 01:02:49,359
assuming that you have relatively small

1487
01:02:49,359 --> 01:02:51,839
stream id numbers etc and packet id

1488
01:02:51,839 --> 01:02:53,520
numbers

1489
01:02:53,520 --> 01:02:55,839
you have plenty of room for a minimum

1490
01:02:55,839 --> 01:02:58,960
ipv6 packet you can actually have a

1491
01:02:58,960 --> 01:02:59,839
pretty

1492
01:02:59,839 --> 01:03:02,079
large packet going through here um over

1493
01:03:02,079 --> 01:03:04,160
1400 bytes

1494
01:03:04,160 --> 01:03:06,079
however if you have

1495
01:03:06,079 --> 01:03:07,440
the minimum

1496
01:03:07,440 --> 01:03:09,760
quick packet size

1497
01:03:09,760 --> 01:03:11,440
then you are not going to be able to

1498
01:03:11,440 --> 01:03:12,640
hold

1499
01:03:12,640 --> 01:03:16,400
the minimum ipv6 packet size inside it

1500
01:03:16,400 --> 01:03:18,000
and this is particularly interesting

1501
01:03:18,000 --> 01:03:19,280
because

1502
01:03:19,280 --> 01:03:22,160
some quick implementations will start

1503
01:03:22,160 --> 01:03:25,039
uh with the a minimum packet size and

1504
01:03:25,039 --> 01:03:27,119
try to explore up which means that there

1505
01:03:27,119 --> 01:03:28,839
may be

1506
01:03:28,839 --> 01:03:31,440
times during your quick connection

1507
01:03:31,440 --> 01:03:33,359
lifetime in which you aren't going to be

1508
01:03:33,359 --> 01:03:35,119
able to tunnel certain packets and then

1509
01:03:35,119 --> 01:03:38,079
later you would be able to

1510
01:03:38,960 --> 01:03:40,640
so this is really an open question and

1511
01:03:40,640 --> 01:03:42,319
i'd love to hear people's opinions i

1512
01:03:42,319 --> 01:03:44,400
don't have a particularly strong opinion

1513
01:03:44,400 --> 01:03:45,760
here

1514
01:03:45,760 --> 01:03:47,680
of what should we do when we run into

1515
01:03:47,680 --> 01:03:49,280
this case

1516
01:03:49,280 --> 01:03:50,319
um

1517
01:03:50,319 --> 01:03:52,160
you could

1518
01:03:52,160 --> 01:03:54,400
have a failure on the request stream

1519
01:03:54,400 --> 01:03:56,480
essentially saying if you are trying to

1520
01:03:56,480 --> 01:03:57,599
do

1521
01:03:57,599 --> 01:04:00,079
a connect ip request and you're using

1522
01:04:00,079 --> 01:04:03,359
ipv6 and the other side knows that it's

1523
01:04:03,359 --> 01:04:05,520
effective mtu is too small it will

1524
01:04:05,520 --> 01:04:07,839
generate an error

1525
01:04:07,839 --> 01:04:08,880
you could

1526
01:04:08,880 --> 01:04:11,200
essentially fail over by saying

1527
01:04:11,200 --> 01:04:13,680
if you have these unreliable datagrams

1528
01:04:13,680 --> 01:04:15,359
going by that won't be able to fit you

1529
01:04:15,359 --> 01:04:17,039
could make them reliable by putting them

1530
01:04:17,039 --> 01:04:19,200
inside datagram capsules and spreading

1531
01:04:19,200 --> 01:04:21,839
them out over multiple quick packets

1532
01:04:21,839 --> 01:04:23,520
which could have lots of interesting

1533
01:04:23,520 --> 01:04:25,599
consequences

1534
01:04:25,599 --> 01:04:29,039
you could have extra signaling

1535
01:04:29,039 --> 01:04:30,559
essentially within the capsule stream or

1536
01:04:30,559 --> 01:04:32,400
something else to say hey i'm dropping

1537
01:04:32,400 --> 01:04:35,920
packets or i wasn't able to send packets

1538
01:04:35,920 --> 01:04:37,839
and then practically we should probably

1539
01:04:37,839 --> 01:04:40,240
do this as well as the other things

1540
01:04:40,240 --> 01:04:42,000
there should be a recommendation that if

1541
01:04:42,000 --> 01:04:44,000
you are using a quick connection for

1542
01:04:44,000 --> 01:04:45,440
connecting ip

1543
01:04:45,440 --> 01:04:46,880
you really should be

1544
01:04:46,880 --> 01:04:49,760
starting it with at least around 1 300

1545
01:04:49,760 --> 01:04:51,680
bytes of

1546
01:04:51,680 --> 01:04:55,200
mtu starting with the minimum 1200

1547
01:04:55,200 --> 01:04:56,559
if you're trying to use it for a tunnel

1548
01:04:56,559 --> 01:04:58,799
is not going to be a great idea

1549
01:04:58,799 --> 01:05:01,200
and even in cases where today we're

1550
01:05:01,200 --> 01:05:04,160
using connect ip

1551
01:05:04,640 --> 01:05:07,119
sorry connect udp with quick we start

1552
01:05:07,119 --> 01:05:09,119
with more than 1200 because we want to

1553
01:05:09,119 --> 01:05:11,760
be able to send large datagrams

1554
01:05:11,760 --> 01:05:14,960
so what what do people think

1555
01:05:14,960 --> 01:05:16,240
let's see we have some folks in the

1556
01:05:16,240 --> 01:05:19,520
queue let's start with ben

1557
01:05:20,839 --> 01:05:22,640
hi

1558
01:05:22,640 --> 01:05:23,520
i

1559
01:05:23,520 --> 01:05:26,480
think that we should uh hold on i'm

1560
01:05:26,480 --> 01:05:28,880
gonna mute the room

1561
01:05:28,880 --> 01:05:31,599
i think that the

1562
01:05:31,599 --> 01:05:34,000
core specification here the connect ip

1563
01:05:34,000 --> 01:05:35,520
draft itself

1564
01:05:35,520 --> 01:05:37,520
should

1565
01:05:37,520 --> 01:05:39,760
should essentially note this as a

1566
01:05:39,760 --> 01:05:41,359
problem

1567
01:05:41,359 --> 01:05:43,760
you know be very clear about about the

1568
01:05:43,760 --> 01:05:45,280
issue here

1569
01:05:45,280 --> 01:05:46,960
and

1570
01:05:46,960 --> 01:05:48,880
and essentially note

1571
01:05:48,880 --> 01:05:50,960
what is required to

1572
01:05:50,960 --> 01:05:52,880
ensure that the inner stream

1573
01:05:52,880 --> 01:05:55,680
is ipv6 compliant

1574
01:05:55,680 --> 01:05:59,440
and not attempt to solve the problem of

1575
01:05:59,440 --> 01:06:02,079
of stuffing oversized packets in in the

1576
01:06:02,079 --> 01:06:04,640
case where the mtu doesn't fit i i do

1577
01:06:04,640 --> 01:06:06,799
think that we should solve that as a

1578
01:06:06,799 --> 01:06:08,400
working group but we should solve that

1579
01:06:08,400 --> 01:06:12,400
as an extension to connect ip

1580
01:06:12,880 --> 01:06:14,960
so to be clear like looking at kind of

1581
01:06:14,960 --> 01:06:16,559
the options here i kind of interpret

1582
01:06:16,559 --> 01:06:18,079
that as being like the last one just

1583
01:06:18,079 --> 01:06:20,160
saying you really should have your

1584
01:06:20,160 --> 01:06:21,599
tunnel be big enough if you want to use

1585
01:06:21,599 --> 01:06:24,000
ipv6 otherwise

1586
01:06:24,000 --> 01:06:25,200
you've done something wrong and you need

1587
01:06:25,200 --> 01:06:28,879
to figure it out or have an extension

1588
01:06:29,440 --> 01:06:34,000
yeah that's that's a fair summary okay

1589
01:06:34,000 --> 01:06:37,520
all right thank you ecker

1590
01:06:38,480 --> 01:06:40,000
we could just restrict ourselves ivy

1591
01:06:40,000 --> 01:06:41,630
before

1592
01:06:41,630 --> 01:06:44,839
[Laughter]

1593
01:06:44,839 --> 01:06:47,599
um seriously i think again if you

1594
01:06:47,599 --> 01:06:49,680
advertise yourself that you're an ipv6

1595
01:06:49,680 --> 01:06:51,920
carrying tunnel then you have to carry

1596
01:06:51,920 --> 01:06:53,599
um then you have to carry a minimum to

1597
01:06:53,599 --> 01:06:55,200
use by packets everything's just gonna

1598
01:06:55,200 --> 01:06:57,039
fall apart um

1599
01:06:57,039 --> 01:06:59,200
so um

1600
01:06:59,200 --> 01:07:00,960
um

1601
01:07:00,960 --> 01:07:02,960
the um

1602
01:07:02,960 --> 01:07:04,400
uh

1603
01:07:04,400 --> 01:07:06,079
so i think that's right question number

1604
01:07:06,079 --> 01:07:08,559
comes and what what do we do um

1605
01:07:08,559 --> 01:07:09,520
um

1606
01:07:09,520 --> 01:07:10,799
you know

1607
01:07:10,799 --> 01:07:11,920
uh

1608
01:07:11,920 --> 01:07:13,520
i'm not a huge fan of

1609
01:07:13,520 --> 01:07:15,680
experimentation reassembly um i i think

1610
01:07:15,680 --> 01:07:17,039
you know um

1611
01:07:17,039 --> 01:07:18,799
you know i i'd like to be sure of

1612
01:07:18,799 --> 01:07:20,480
correction and we actually need that in

1613
01:07:20,480 --> 01:07:24,400
practice um before before we do it um so

1614
01:07:24,400 --> 01:07:27,280
i think really the question is you know

1615
01:07:27,280 --> 01:07:28,480
um

1616
01:07:28,480 --> 01:07:29,920
distribution between so between these

1617
01:07:29,920 --> 01:07:31,520
you know between between these options

1618
01:07:31,520 --> 01:07:33,920
you propose right um the first is kind

1619
01:07:33,920 --> 01:07:35,200
of like

1620
01:07:35,200 --> 01:07:37,440
i mean i guess i guess maybe you can

1621
01:07:37,440 --> 01:07:39,200
imagine doing that if you say like well

1622
01:07:39,200 --> 01:07:40,799
i can only negotiate 1100 so i'm gonna

1623
01:07:40,799 --> 01:07:42,960
allow ipv4 and not v6 um it's not like a

1624
01:07:42,960 --> 01:07:44,799
totally crazy thing to say um though

1625
01:07:44,799 --> 01:07:46,960
they're pretty gross um

1626
01:07:46,960 --> 01:07:49,039
um the um

1627
01:07:49,039 --> 01:07:51,039
um

1628
01:07:51,039 --> 01:07:52,720
i i don't think we should i don't know

1629
01:07:52,720 --> 01:07:54,799
the adding capsules is the right answer

1630
01:07:54,799 --> 01:07:57,359
um so i think um you know this last

1631
01:07:57,359 --> 01:07:59,280
point is really an implementation point

1632
01:07:59,280 --> 01:08:01,440
um you know i think i think i guess what

1633
01:08:01,440 --> 01:08:04,000
i would say is that we should say

1634
01:08:04,000 --> 01:08:06,400
if someone asks for ipv6

1635
01:08:06,400 --> 01:08:07,839
and you can't do

1636
01:08:07,839 --> 01:08:10,079
you know 1280 and you ought to reject it

1637
01:08:10,079 --> 01:08:12,640
and then you must reject it and like we

1638
01:08:12,640 --> 01:08:14,880
strongly advise you to like use it and

1639
01:08:14,880 --> 01:08:16,479
and so it's your job to negotiate up to

1640
01:08:16,479 --> 01:08:17,600
the right the right size whatever that

1641
01:08:17,600 --> 01:08:19,920
size is and we strongly advise you to do

1642
01:08:19,920 --> 01:08:21,439
that by using large initials but

1643
01:08:21,439 --> 01:08:22,719
otherwise it's going to take additional

1644
01:08:22,719 --> 01:08:25,040
round trips so i think that the only the

1645
01:08:25,040 --> 01:08:27,600
only mandatory piece is that it is that

1646
01:08:27,600 --> 01:08:29,198
you must reject if you can't carry the

1647
01:08:29,198 --> 01:08:31,600
ipv6 minimum but then some personalize

1648
01:08:31,600 --> 01:08:32,880
with strong advice about how to get to

1649
01:08:32,880 --> 01:08:35,198
the point where you are carrying where

1650
01:08:35,198 --> 01:08:37,520
you're able to carry that minimum

1651
01:08:37,520 --> 01:08:39,520
okay so that sounds like a combination

1652
01:08:39,520 --> 01:08:41,759
of this first line of you have a

1653
01:08:41,759 --> 01:08:43,679
description of here's how you send an

1654
01:08:43,679 --> 01:08:46,080
error back if you do the wrong thing

1655
01:08:46,080 --> 01:08:48,799
but then also focus on the advice of the

1656
01:08:48,799 --> 01:08:50,560
right way to do it of starting with the

1657
01:08:50,560 --> 01:08:52,960
larger side that's my suggestion yes

1658
01:08:52,960 --> 01:08:55,040
great i like it

1659
01:08:55,040 --> 01:08:56,640
lorenzo

1660
01:08:56,640 --> 01:08:59,198
hello um i haven't heard of this ipv4

1661
01:08:59,198 --> 01:09:01,839
thing that you're talking about but uh

1662
01:09:01,839 --> 01:09:04,799
the uh so i mean like you have a problem

1663
01:09:04,799 --> 01:09:06,158
if the link that you're running on and

1664
01:09:06,158 --> 01:09:09,198
has an empty of 1280

1665
01:09:09,198 --> 01:09:11,120
because then you're like the last option

1666
01:09:11,120 --> 01:09:13,040
is just infeasible you you basically go

1667
01:09:13,040 --> 01:09:14,560
back to the first one which i assume is

1668
01:09:14,560 --> 01:09:17,080
unacceptable

1669
01:09:17,080 --> 01:09:18,640
[Music]

1670
01:09:18,640 --> 01:09:20,719
i mean like we need something is it is

1671
01:09:20,719 --> 01:09:22,479
it a doubter attack is it a downright

1672
01:09:22,479 --> 01:09:24,399
attack if the

1673
01:09:24,399 --> 01:09:25,759
if the network because like the network

1674
01:09:25,759 --> 01:09:28,000
you're visiting could be

1675
01:09:28,000 --> 01:09:30,080
intentionally sending a you know i don't

1676
01:09:30,080 --> 01:09:31,439
know

1677
01:09:31,439 --> 01:09:33,759
right like hey my network is 1280 so you

1678
01:09:33,759 --> 01:09:35,759
can't use connect ip on my network my

1679
01:09:35,759 --> 01:09:36,960
network my rules do you want that i

1680
01:09:36,960 --> 01:09:37,920
don't know

1681
01:09:37,920 --> 01:09:39,359
um

1682
01:09:39,359 --> 01:09:41,520
or you can now only access the ipv4

1683
01:09:41,520 --> 01:09:43,120
internet through this tunnel

1684
01:09:43,120 --> 01:09:44,479
like i said i don't want to i don't know

1685
01:09:44,479 --> 01:09:45,920
what this ipv4 thing is that you're

1686
01:09:45,920 --> 01:09:47,679
talking about so yeah so i think it's

1687
01:09:47,679 --> 01:09:49,600
either so

1688
01:09:49,600 --> 01:09:50,560
you

1689
01:09:50,560 --> 01:09:52,479
you could have a combination which is

1690
01:09:52,479 --> 01:09:54,158
basically like i think i think the last

1691
01:09:54,158 --> 01:09:55,840
one is good because it's the one with

1692
01:09:55,840 --> 01:09:57,600
the least complexity but you have to

1693
01:09:57,600 --> 01:09:58,880
have

1694
01:09:58,880 --> 01:10:00,239
if you don't want to do number one which

1695
01:10:00,239 --> 01:10:01,440
i think you you basically is a

1696
01:10:01,440 --> 01:10:02,880
downgraded attack then you basically

1697
01:10:02,880 --> 01:10:05,920
need to have a fallback mechanism

1698
01:10:05,920 --> 01:10:07,600
and the question really is like once you

1699
01:10:07,600 --> 01:10:09,440
have the fallback mechanism then why do

1700
01:10:09,440 --> 01:10:11,199
the maybe you can do the fallback

1701
01:10:11,199 --> 01:10:13,360
mechanism first and use the last one as

1702
01:10:13,360 --> 01:10:15,280
an optimization i don't know but you

1703
01:10:15,280 --> 01:10:17,760
don't have a good solution either way

1704
01:10:17,760 --> 01:10:18,800
yeah

1705
01:10:18,800 --> 01:10:21,040
you know one if i kind of combine the

1706
01:10:21,040 --> 01:10:23,040
feedback i'm hearing from people you

1707
01:10:23,040 --> 01:10:24,480
know one option would be that we would

1708
01:10:24,480 --> 01:10:26,560
you know recommend do the last line have

1709
01:10:26,560 --> 01:10:28,159
a way to fail it

1710
01:10:28,159 --> 01:10:31,280
as with the default of this draft does

1711
01:10:31,280 --> 01:10:32,239
but then

1712
01:10:32,239 --> 01:10:34,320
to ben's point you know allow

1713
01:10:34,320 --> 01:10:36,239
an extension and another document to

1714
01:10:36,239 --> 01:10:38,080
describe if you're in an adversarial

1715
01:10:38,080 --> 01:10:39,679
situation or if you really need to get

1716
01:10:39,679 --> 01:10:41,199
this packet through because you're on a

1717
01:10:41,199 --> 01:10:44,000
tiny link but you also need to do ipv6

1718
01:10:44,000 --> 01:10:46,400
here's a flag to do something like that

1719
01:10:46,400 --> 01:10:48,400
number two but that's going to require a

1720
01:10:48,400 --> 01:10:50,719
bit more work and analysis of the

1721
01:10:50,719 --> 01:10:54,560
implication of splitting up packets

1722
01:10:55,199 --> 01:10:58,839
okay rajiv

1723
01:11:01,679 --> 01:11:04,880
look hi guys can you hear me

1724
01:11:05,440 --> 01:11:07,760
yeah okay so my you're very quiet for

1725
01:11:07,760 --> 01:11:09,120
the room if you can speak a bit closer

1726
01:11:09,120 --> 01:11:11,199
to your microphone again

1727
01:11:11,199 --> 01:11:14,800
my point here is more on the lines of uh

1728
01:11:14,800 --> 01:11:17,440
you know we should not be failing any

1729
01:11:17,440 --> 01:11:20,159
traffic unless it's uh you know an

1730
01:11:20,159 --> 01:11:22,880
absolute essential and there is no way

1731
01:11:22,880 --> 01:11:24,960
of getting that paper too especially

1732
01:11:24,960 --> 01:11:27,920
considering the fact that mpu changes

1733
01:11:27,920 --> 01:11:30,719
may happen

1734
01:11:30,719 --> 01:11:33,600
um there may be an intermediary isp link

1735
01:11:33,600 --> 01:11:35,199
somewhere that goes down and can be

1736
01:11:35,199 --> 01:11:37,120
routed to an alternate link that just

1737
01:11:37,120 --> 01:11:38,800
happens to have a lower

1738
01:11:38,800 --> 01:11:42,159
um mpu and suddenly i'm in a situation

1739
01:11:42,159 --> 01:11:45,520
where an existing connection you know uh

1740
01:11:45,520 --> 01:11:47,440
it basically ends up getting dropped

1741
01:11:47,440 --> 01:11:50,080
because of a complete means somewhere

1742
01:11:50,080 --> 01:11:52,000
that i don't have control

1743
01:11:52,000 --> 01:11:54,239
okay and it's not happening at the

1744
01:11:54,239 --> 01:11:55,679
initiation of the

1745
01:11:55,679 --> 01:11:57,760
connect that i can take off am i

1746
01:11:57,760 --> 01:12:01,040
negotiating an mpu uh with my path to

1747
01:12:01,040 --> 01:12:03,199
the remote because my path may not be

1748
01:12:03,199 --> 01:12:05,440
starting so i think the

1749
01:12:05,440 --> 01:12:07,920
correct uh handling for this really

1750
01:12:07,920 --> 01:12:11,360
should be uh allow the connection

1751
01:12:11,360 --> 01:12:15,040
uh you know where a parked mtu uh you

1752
01:12:15,040 --> 01:12:17,280
know issue crops up wherein we don't fit

1753
01:12:17,280 --> 01:12:20,560
in it to allow segments to fragment and

1754
01:12:20,560 --> 01:12:22,880
reassemble up that opens its whole whole

1755
01:12:22,880 --> 01:12:25,440
can of worms but probably pair that

1756
01:12:25,440 --> 01:12:28,000
along with some sort of error signaling

1757
01:12:28,000 --> 01:12:31,199
saying hey um your packets are being

1758
01:12:31,199 --> 01:12:34,480
fragmented uh maybe at uh you know you

1759
01:12:34,480 --> 01:12:36,080
may even want to put in a hop count or

1760
01:12:36,080 --> 01:12:39,760
whatever else but the idea is uh to have

1761
01:12:39,760 --> 01:12:40,719
the

1762
01:12:40,719 --> 01:12:42,320
uh stender

1763
01:12:42,320 --> 01:12:44,560
get some notification that yes there's

1764
01:12:44,560 --> 01:12:46,880
fragmentation happening so therefore

1765
01:12:46,880 --> 01:12:49,920
there's a degradation in the performance

1766
01:12:49,920 --> 01:12:52,640
of uh you know the tunnel but the tunnel

1767
01:12:52,640 --> 01:12:54,960
doesn't fail unless you know it

1768
01:12:54,960 --> 01:12:57,920
absolutely has to

1769
01:12:59,280 --> 01:13:01,120
understand and it's up and it's up to

1770
01:13:01,120 --> 01:13:02,840
the end point to say okay if i see

1771
01:13:02,840 --> 01:13:06,159
fragmentation maybe i i make a decision

1772
01:13:06,159 --> 01:13:08,719
as uh one of the tunnel endpoints to

1773
01:13:08,719 --> 01:13:11,920
drop the tunnel and initiate a new uh

1774
01:13:11,920 --> 01:13:14,239
negotiation to see if i can probably get

1775
01:13:14,239 --> 01:13:15,120
the

1776
01:13:15,120 --> 01:13:18,239
mtu back up maybe maybe a new connect

1777
01:13:18,239 --> 01:13:19,120
you know

1778
01:13:19,120 --> 01:13:21,199
bypasses some connection tracking gets

1779
01:13:21,199 --> 01:13:23,199
onto a different link you know

1780
01:13:23,199 --> 01:13:25,040
cross your fingers and hope but the

1781
01:13:25,040 --> 01:13:28,800
point is that uh a running session

1782
01:13:28,800 --> 01:13:32,000
may degrade because of an mpu uh

1783
01:13:32,000 --> 01:13:34,400
shrinkage but it should not fail you

1784
01:13:34,400 --> 01:13:37,759
know that's my opinion on this

1785
01:13:38,080 --> 01:13:39,679
one question to you rajiv actually

1786
01:13:39,679 --> 01:13:42,000
before you go um

1787
01:13:42,000 --> 01:13:44,159
would you be fine with

1788
01:13:44,159 --> 01:13:46,800
specifying essentially this

1789
01:13:46,800 --> 01:13:49,520
fragmentation reliability

1790
01:13:49,520 --> 01:13:51,440
behavior as

1791
01:13:51,440 --> 01:13:53,679
an option or extension that you could

1792
01:13:53,679 --> 01:13:55,440
essentially say during setup like i

1793
01:13:55,440 --> 01:13:58,000
support this

1794
01:13:58,000 --> 01:13:59,360
that would work

1795
01:13:59,360 --> 01:14:01,600
that that should work you know

1796
01:14:01,600 --> 01:14:03,600
again you know the question should be i

1797
01:14:03,600 --> 01:14:06,800
i believe that um having a flag might be

1798
01:14:06,800 --> 01:14:09,520
useful if someone wants to explicitly

1799
01:14:09,520 --> 01:14:10,480
you know

1800
01:14:10,480 --> 01:14:12,960
disable it but i still believe it should

1801
01:14:12,960 --> 01:14:14,800
be the default option our default should

1802
01:14:14,800 --> 01:14:17,679
always be try to get the traffic through

1803
01:14:17,679 --> 01:14:21,120
uh you know as best you can

1804
01:14:23,760 --> 01:14:26,640
but if someone really wants to ensure a

1805
01:14:26,640 --> 01:14:28,480
certain level of performance or a

1806
01:14:28,480 --> 01:14:30,480
certain level of reliability and does

1807
01:14:30,480 --> 01:14:32,719
not want partial packets and stuff like

1808
01:14:32,719 --> 01:14:33,840
that

1809
01:14:33,840 --> 01:14:35,120
give them the power to turn it off

1810
01:14:35,120 --> 01:14:37,199
that's all the more power to the you

1811
01:14:37,199 --> 01:14:38,159
know

1812
01:14:38,159 --> 01:14:40,719
implementer

1813
01:14:41,120 --> 01:14:43,840
yeah okay thank you i'm a bit tempted to

1814
01:14:43,840 --> 01:14:46,159
say instead you know that it's something

1815
01:14:46,159 --> 01:14:47,920
that would be an

1816
01:14:47,920 --> 01:14:49,920
opt-in but it can actually be an opt-in

1817
01:14:49,920 --> 01:14:51,520
that would apply

1818
01:14:51,520 --> 01:14:53,040
we could also define it for connect udp

1819
01:14:53,040 --> 01:14:55,520
for cases where you'd have very small

1820
01:14:55,520 --> 01:14:57,040
mtu's there and you need to fragment

1821
01:14:57,040 --> 01:14:59,040
data

1822
01:14:59,040 --> 01:15:00,640
anywhere with similar behavior this

1823
01:15:00,640 --> 01:15:01,840
makes sense

1824
01:15:01,840 --> 01:15:03,520
okay thank you

1825
01:15:03,520 --> 01:15:07,159
all right mike

1826
01:15:10,000 --> 01:15:11,760
of the opinion that we should try and

1827
01:15:11,760 --> 01:15:14,159
get it through it seems like if you're

1828
01:15:14,159 --> 01:15:17,920
already building on top of capsules and

1829
01:15:17,920 --> 01:15:21,360
http datagrams then having a datagram

1830
01:15:21,360 --> 01:15:24,400
capsule is a relatively small vist i may

1831
01:15:24,400 --> 01:15:26,880
be mistaken about that

1832
01:15:26,880 --> 01:15:30,000
um so i would think the simplest path is

1833
01:15:30,000 --> 01:15:32,480
to say that your connection should

1834
01:15:32,480 --> 01:15:34,719
have a large enough datagram

1835
01:15:34,719 --> 01:15:36,400
or a large enough

1836
01:15:36,400 --> 01:15:38,880
yeah mtu to be able to carry these

1837
01:15:38,880 --> 01:15:42,800
without using um a capsule

1838
01:15:42,800 --> 01:15:44,400
but if you need to

1839
01:15:44,400 --> 01:15:46,400
then use stuff in a capsule and keep

1840
01:15:46,400 --> 01:15:48,639
going

1841
01:15:49,600 --> 01:15:52,600
okay

1842
01:15:53,120 --> 01:15:55,519
david

1843
01:15:59,920 --> 01:16:02,480
david gennazi google um

1844
01:16:02,480 --> 01:16:06,159
my thinking here is that a network with

1845
01:16:06,159 --> 01:16:08,080
an mtu kind of that

1846
01:16:08,080 --> 01:16:09,600
that low

1847
01:16:09,600 --> 01:16:12,320
is for the outer one is kind of barked

1848
01:16:12,320 --> 01:16:13,360
right

1849
01:16:13,360 --> 01:16:15,600
um and we know how to handle those

1850
01:16:15,600 --> 01:16:17,920
networks uh that are borked another

1851
01:16:17,920 --> 01:16:19,679
example of a borked network it's one

1852
01:16:19,679 --> 01:16:21,840
that doesn't allow udp uh when that

1853
01:16:21,840 --> 01:16:23,840
happened we switched to connect ap over

1854
01:16:23,840 --> 01:16:25,520
http 2.

1855
01:16:25,520 --> 01:16:28,320
so i like that last approach of saying

1856
01:16:28,320 --> 01:16:30,120
you know if you want to do

1857
01:16:30,120 --> 01:16:33,199
ipv6 over connect ip

1858
01:16:33,199 --> 01:16:36,320
yeah just have initials big enough that

1859
01:16:36,320 --> 01:16:38,960
if the network is worked we don't use it

1860
01:16:38,960 --> 01:16:39,920
that way

1861
01:16:39,920 --> 01:16:42,239
and that's just really simple in

1862
01:16:42,239 --> 01:16:44,480
practice that's what i think i'll

1863
01:16:44,480 --> 01:16:45,920
implement

1864
01:16:45,920 --> 01:16:47,199
and

1865
01:16:47,199 --> 01:16:49,679
everyone's happy uh like figuring out

1866
01:16:49,679 --> 01:16:52,080
other things seemed like really complex

1867
01:16:52,080 --> 01:16:54,480
and

1868
01:16:54,880 --> 01:16:56,800
given how much time we spend on simple

1869
01:16:56,800 --> 01:16:58,480
issues i'm terrified at the idea of how

1870
01:16:58,480 --> 01:17:00,239
much time we'd send on complex ones so

1871
01:17:00,239 --> 01:17:03,718
let's keep it simple

1872
01:17:06,960 --> 01:17:08,480
cool

1873
01:17:08,480 --> 01:17:11,920
uh gory and if people as they're done

1874
01:17:11,920 --> 01:17:13,360
being in the queue could remove

1875
01:17:13,360 --> 01:17:14,480
themselves from the queue that'd be

1876
01:17:14,480 --> 01:17:16,000
great

1877
01:17:16,000 --> 01:17:17,600
all right gory i'm just joining the

1878
01:17:17,600 --> 01:17:18,640
queue

1879
01:17:18,640 --> 01:17:19,600
um

1880
01:17:19,600 --> 01:17:20,800
the

1881
01:17:20,800 --> 01:17:22,640
okay so we went through this when we did

1882
01:17:22,640 --> 01:17:26,640
dplp mtud which wasn't kind of trivial

1883
01:17:26,640 --> 01:17:28,400
because there was lots of these cases

1884
01:17:28,400 --> 01:17:30,719
and this is that final case of what do

1885
01:17:30,719 --> 01:17:32,800
you do when it doesn't work

1886
01:17:32,800 --> 01:17:34,719
so let's go right back to the beginning

1887
01:17:34,719 --> 01:17:36,239
i think the last bullet here is the

1888
01:17:36,239 --> 01:17:38,159
right thing to do you know just send a

1889
01:17:38,159 --> 01:17:41,760
big packet across it and see if it works

1890
01:17:41,760 --> 01:17:43,440
of the right size yeah i mean if you

1891
01:17:43,440 --> 01:17:45,520
need a few extra bites check it out make

1892
01:17:45,520 --> 01:17:47,920
it work

1893
01:17:48,400 --> 01:17:52,559
right if you if it doesn't work

1894
01:17:52,719 --> 01:17:54,239
what what the heck do you do i mean do

1895
01:17:54,239 --> 01:17:55,840
you want to fragment and reassemble here

1896
01:17:55,840 --> 01:17:58,239
and then somebody tries dplp pmtud over

1897
01:17:58,239 --> 01:18:00,159
the top and tries to figure out the fact

1898
01:18:00,159 --> 01:18:01,600
that it's not broken and then you get

1899
01:18:01,600 --> 01:18:04,719
kind of brokenness twice or i don't know

1900
01:18:04,719 --> 01:18:06,239
so there's a warning kind of like don't

1901
01:18:06,239 --> 01:18:08,159
do this at multiple levels

1902
01:18:08,159 --> 01:18:10,800
second thing the third thing is

1903
01:18:10,800 --> 01:18:13,280
um as you go down these numbers

1904
01:18:13,280 --> 01:18:16,000
especially with ipv4 and udp you're

1905
01:18:16,000 --> 01:18:18,000
going to hit barriers so if the path

1906
01:18:18,000 --> 01:18:20,320
changes it will change

1907
01:18:20,320 --> 01:18:22,880
that mtu if you start getting uh into

1908
01:18:22,880 --> 01:18:24,719
the bigger numbers so you've got a

1909
01:18:24,719 --> 01:18:26,880
problem there as well the past might not

1910
01:18:26,880 --> 01:18:29,040
stop working later on so we have to

1911
01:18:29,040 --> 01:18:30,800
detect that somehow

1912
01:18:30,800 --> 01:18:32,239
and if detecting it simply means it

1913
01:18:32,239 --> 01:18:34,080
doesn't stops working then maybe that's

1914
01:18:34,080 --> 01:18:36,000
a good signal to the app

1915
01:18:36,000 --> 01:18:38,640
so maybe simple is okay

1916
01:18:38,640 --> 01:18:39,679
yeah

1917
01:18:39,679 --> 01:18:42,560
that you may need to close your stream

1918
01:18:42,560 --> 01:18:45,520
if your mtu drops yeah

1919
01:18:45,520 --> 01:18:47,040
yeah you have to figure out lack of

1920
01:18:47,040 --> 01:18:49,360
connectivity and just close the stream

1921
01:18:49,360 --> 01:18:51,759
exactly

1922
01:18:51,840 --> 01:18:53,199
yeah

1923
01:18:53,199 --> 01:18:57,040
all right martin duke google um

1924
01:18:57,040 --> 01:19:00,000
as an individual uh

1925
01:19:00,000 --> 01:19:03,440
so this strikes me is like not a

1926
01:19:03,440 --> 01:19:06,640
new problem i mean ipv6 or ipv6 tunnels

1927
01:19:06,640 --> 01:19:09,920
have it and i'm not like an interior guy

1928
01:19:09,920 --> 01:19:12,239
at all but presumably there's some sort

1929
01:19:12,239 --> 01:19:13,520
of

1930
01:19:13,520 --> 01:19:15,040
received wisdom on how to handle this

1931
01:19:15,040 --> 01:19:16,560
sort of case and maybe we should maybe

1932
01:19:16,560 --> 01:19:18,080
we should take it

1933
01:19:18,080 --> 01:19:19,920
um

1934
01:19:19,920 --> 01:19:21,520
secondly like

1935
01:19:21,520 --> 01:19:23,280
this certainly quite a cute connect ip

1936
01:19:23,280 --> 01:19:25,120
this also exists i think is somebody

1937
01:19:25,120 --> 01:19:27,600
already said connect udp

1938
01:19:27,600 --> 01:19:29,600
and um

1939
01:19:29,600 --> 01:19:31,040
i'm i'm

1940
01:19:31,040 --> 01:19:34,640
i know we just closed connect udp

1941
01:19:34,640 --> 01:19:35,840
but

1942
01:19:35,840 --> 01:19:37,199
like if if there's something we decide

1943
01:19:37,199 --> 01:19:38,960
we should do here like uh i mean we

1944
01:19:38,960 --> 01:19:40,159
could have a reference which would be

1945
01:19:40,159 --> 01:19:42,080
sad or we could just like cut and paste

1946
01:19:42,080 --> 01:19:43,280
the text

1947
01:19:43,280 --> 01:19:45,520
or something but um

1948
01:19:45,520 --> 01:19:47,600
this is not just a connect udp problem

1949
01:19:47,600 --> 01:19:51,840
or connect ip problem rather thanks

1950
01:19:52,960 --> 01:19:57,120
um what one comment i would have about

1951
01:19:57,120 --> 01:19:59,280
solutions at other layers of tunneling

1952
01:19:59,280 --> 01:20:00,800
is

1953
01:20:00,800 --> 01:20:02,560
you know there is something we need to

1954
01:20:02,560 --> 01:20:05,920
do here just because with a connect ip

1955
01:20:05,920 --> 01:20:08,159
request stream it is a bit more stateful

1956
01:20:08,159 --> 01:20:09,920
as a proxy here and we do need to just

1957
01:20:09,920 --> 01:20:12,320
know how do we spell the semantics of

1958
01:20:12,320 --> 01:20:14,080
the error handling

1959
01:20:14,080 --> 01:20:15,520
in http

1960
01:20:15,520 --> 01:20:16,880
right yeah

1961
01:20:16,880 --> 01:20:19,040
can i just jump in as co-author

1962
01:20:19,040 --> 01:20:21,600
um to answer martin this problem is

1963
01:20:21,600 --> 01:20:24,960
specific to connect ip in the sense that

1964
01:20:24,960 --> 01:20:28,960
ipv6 has a minimum mtu of 1280.

1965
01:20:28,960 --> 01:20:31,199
for connect udp that's not necessarily

1966
01:20:31,199 --> 01:20:34,320
the case um and so for those you can

1967
01:20:34,320 --> 01:20:36,800
still have things be functional right

1968
01:20:36,800 --> 01:20:38,719
yeah for certain use cases but like for

1969
01:20:38,719 --> 01:20:42,639
instance if it's an ipv6 only

1970
01:20:42,639 --> 01:20:45,040
proxy uh you obviously have this problem

1971
01:20:45,040 --> 01:20:46,560
and of course you know as you know with

1972
01:20:46,560 --> 01:20:47,440
quick

1973
01:20:47,440 --> 01:20:50,080
if you already know so i like that if

1974
01:20:50,080 --> 01:20:52,639
it's ipv6 only where underneath or

1975
01:20:52,639 --> 01:20:55,040
inside the tunnel inside the tunnel that

1976
01:20:55,040 --> 01:20:57,040
only applies to connect ip

1977
01:20:57,040 --> 01:20:59,600
i i it's just so it may be a clear and

1978
01:20:59,600 --> 01:21:02,080
cleaner example would be a a network

1979
01:21:02,080 --> 01:21:03,600
that only lets you do

1980
01:21:03,600 --> 01:21:06,239
1200 by quick packets

1981
01:21:06,239 --> 01:21:08,159
and then the connect udp you're trying

1982
01:21:08,159 --> 01:21:10,800
to do over that is itself to

1983
01:21:10,800 --> 01:21:12,320
a quick server and then you wouldn't be

1984
01:21:12,320 --> 01:21:13,679
able to get the minimum quick packet

1985
01:21:13,679 --> 01:21:14,960
size

1986
01:21:14,960 --> 01:21:16,639
yeah that's the simplest example i'll

1987
01:21:16,639 --> 01:21:18,159
try and generalize it but as i think

1988
01:21:18,159 --> 01:21:20,480
about it maybe that doesn't work but

1989
01:21:20,480 --> 01:21:22,400
nevertheless yeah so clearly they

1990
01:21:22,400 --> 01:21:24,320
connect udp use cases where it's just

1991
01:21:24,320 --> 01:21:26,159
plain old gdp running like tiny little

1992
01:21:26,159 --> 01:21:27,679
packets and

1993
01:21:27,679 --> 01:21:29,199
you don't care

1994
01:21:29,199 --> 01:21:31,520
but um

1995
01:21:31,520 --> 01:21:33,360
there's still a problem here

1996
01:21:33,360 --> 01:21:35,280
as we're looking here to all tunnels

1997
01:21:35,280 --> 01:21:37,360
when you know sometimes the tunnel will

1998
01:21:37,360 --> 01:21:39,280
break your application because of packet

1999
01:21:39,280 --> 01:21:42,280
size

2000
01:21:45,120 --> 01:21:47,520
mia coolevin um i would like to at least

2001
01:21:47,520 --> 01:21:49,679
see or work on a solution that uses

2002
01:21:49,679 --> 01:21:51,600
capsules we have these capsules we have

2003
01:21:51,600 --> 01:21:53,440
this reliable streams and just putting

2004
01:21:53,440 --> 01:21:54,960
some ip packets on that doesn't mean

2005
01:21:54,960 --> 01:21:56,800
that it's ip fragmentation for me i

2006
01:21:56,800 --> 01:21:58,719
think it should just work i don't think

2007
01:21:58,719 --> 01:22:00,560
it's as complicated

2008
01:22:00,560 --> 01:22:02,080
as we think and if it's easy we should

2009
01:22:02,080 --> 01:22:04,400
do it

2010
01:22:05,520 --> 01:22:06,480
okay

2011
01:22:06,480 --> 01:22:08,800
thank you

2012
01:22:08,800 --> 01:22:09,679
enzo

2013
01:22:09,679 --> 01:22:11,199
lorenzo again i'm going to disagree with

2014
01:22:11,199 --> 01:22:13,120
myself um

2015
01:22:13,120 --> 01:22:16,239
i think that uh

2016
01:22:16,239 --> 01:22:18,960
everything should be ipv4

2017
01:22:18,960 --> 01:22:19,440
yeah

2018
01:22:19,440 --> 01:22:20,880
[Applause]

2019
01:22:20,880 --> 01:22:23,920
um i i think yeah we have this problem i

2020
01:22:23,920 --> 01:22:25,120
think we have this problem with connect

2021
01:22:25,120 --> 01:22:26,719
udp unless you want to go into like

2022
01:22:26,719 --> 01:22:28,159
saying that udp is a stream i don't

2023
01:22:28,159 --> 01:22:30,159
really know if it is i think it probably

2024
01:22:30,159 --> 01:22:30,960
isn't

2025
01:22:30,960 --> 01:22:32,239
um

2026
01:22:32,239 --> 01:22:35,600
so what i would say actually is um

2027
01:22:35,600 --> 01:22:37,679
the last one okay

2028
01:22:37,679 --> 01:22:38,880
so

2029
01:22:38,880 --> 01:22:41,120
the last one is like all of these are

2030
01:22:41,120 --> 01:22:43,440
more complex than just to fail

2031
01:22:43,440 --> 01:22:45,760
but if it's unless failing in any

2032
01:22:45,760 --> 01:22:47,520
situation is acceptable

2033
01:22:47,520 --> 01:22:49,440
then we need to then simplifying the

2034
01:22:49,440 --> 01:22:50,960
implementation means only sporting one

2035
01:22:50,960 --> 01:22:53,600
way to do it and that basically means

2036
01:22:53,600 --> 01:22:55,520
number two actually

2037
01:22:55,520 --> 01:22:56,719
so

2038
01:22:56,719 --> 01:22:58,320
basically like if you're implementing

2039
01:22:58,320 --> 01:22:59,920
you want it to work the same way all the

2040
01:22:59,920 --> 01:23:02,239
time regardless of what happens to you

2041
01:23:02,239 --> 01:23:04,239
and so like

2042
01:23:04,239 --> 01:23:05,920
rajiv's point earlier was like yeah the

2043
01:23:05,920 --> 01:23:07,440
network can send you a packet too big at

2044
01:23:07,440 --> 01:23:09,840
any time and now the ip stack is obliged

2045
01:23:09,840 --> 01:23:11,199
to send a smaller packet what do you do

2046
01:23:11,199 --> 01:23:12,960
to that connect udp do you fail it

2047
01:23:12,960 --> 01:23:14,560
suppose you return an error to the to

2048
01:23:14,560 --> 01:23:16,000
the app but that's that's also pretty

2049
01:23:16,000 --> 01:23:18,080
bad right it's kind of even like a

2050
01:23:18,080 --> 01:23:20,960
denial of service vector right

2051
01:23:20,960 --> 01:23:22,480
so

2052
01:23:22,480 --> 01:23:24,880
at that point you know i think something

2053
01:23:24,880 --> 01:23:27,280
basically

2054
01:23:27,520 --> 01:23:29,199
i i i'm going to display my ignorance

2055
01:23:29,199 --> 01:23:30,960
here i don't know why the the capsule

2056
01:23:30,960 --> 01:23:33,199
must be reliable

2057
01:23:33,199 --> 01:23:35,120
you know can you make it like is that

2058
01:23:35,120 --> 01:23:36,960
the problem

2059
01:23:36,960 --> 01:23:38,960
so the way the way a capsule

2060
01:23:38,960 --> 01:23:42,000
works is that these are

2061
01:23:42,000 --> 01:23:43,679
it's essentially it's a way to put your

2062
01:23:43,679 --> 01:23:44,960
datagram

2063
01:23:44,960 --> 01:23:46,960
on the

2064
01:23:46,960 --> 01:23:49,600
uh this the quick stream on the http

2065
01:23:49,600 --> 01:23:51,600
stream that is the reliable stream

2066
01:23:51,600 --> 01:23:52,719
because you're not able to send it

2067
01:23:52,719 --> 01:23:54,159
within one packet so you have to send it

2068
01:23:54,159 --> 01:23:55,360
across

2069
01:23:55,360 --> 01:23:57,840
multiple right so you see so it forces

2070
01:23:57,840 --> 01:24:00,800
you to enable retransmission

2071
01:24:00,800 --> 01:24:03,760
is that the problem yeah exactly

2072
01:24:03,760 --> 01:24:05,360
and there's no there's no way to make it

2073
01:24:05,360 --> 01:24:07,840
like unreliable

2074
01:24:07,840 --> 01:24:09,199
just to put a fragmentation you could

2075
01:24:09,199 --> 01:24:10,320
you will you could introduce

2076
01:24:10,320 --> 01:24:11,520
fragmentation

2077
01:24:11,520 --> 01:24:13,040
right like you you could have like a

2078
01:24:13,040 --> 01:24:14,800
separate fragmentation mode of putting

2079
01:24:14,800 --> 01:24:17,520
it through unreliable in that

2080
01:24:17,520 --> 01:24:19,679
that's its own

2081
01:24:19,679 --> 01:24:22,080
can of forms i i guess i would say like

2082
01:24:22,080 --> 01:24:24,000
whatever we do however we do it it

2083
01:24:24,000 --> 01:24:26,880
should be the same thing all the time

2084
01:24:26,880 --> 01:24:28,480
yeah for implementation simplicity

2085
01:24:28,480 --> 01:24:29,520
otherwise you end up with these dark

2086
01:24:29,520 --> 01:24:31,360
corner cases that like you only happen

2087
01:24:31,360 --> 01:24:33,440
sometimes and you get consider ip

2088
01:24:33,440 --> 01:24:35,199
fragmentation it's like the the boon for

2089
01:24:35,199 --> 01:24:37,120
security research is everywhere

2090
01:24:37,120 --> 01:24:38,159
you know as soon as you look at it

2091
01:24:38,159 --> 01:24:39,600
there's a bunch of like you know corner

2092
01:24:39,600 --> 01:24:41,280
cases overlapping you know negative

2093
01:24:41,280 --> 01:24:42,560
lengths

2094
01:24:42,560 --> 01:24:44,000
so i think you know might as well just

2095
01:24:44,000 --> 01:24:46,880
do it all the time

2096
01:24:47,120 --> 01:24:48,480
basically fragments everything all the

2097
01:24:48,480 --> 01:24:49,440
time as long as you can get the

2098
01:24:49,440 --> 01:24:51,120
performance overhead to minimal then i

2099
01:24:51,120 --> 01:24:52,880
think you're okay

2100
01:24:52,880 --> 01:24:54,560
i mean the benefit of putting it over a

2101
01:24:54,560 --> 01:24:56,719
capsule is

2102
01:24:56,719 --> 01:24:58,239
even though you have the extra

2103
01:24:58,239 --> 01:25:00,960
re-transmission it's extremely simple

2104
01:25:00,960 --> 01:25:02,719
and it doesn't have all the caveats that

2105
01:25:02,719 --> 01:25:04,960
fragmentation would yeah

2106
01:25:04,960 --> 01:25:07,360
ecker

2107
01:25:10,080 --> 01:25:11,120
yeah

2108
01:25:11,120 --> 01:25:12,400
i'm like super

2109
01:25:12,400 --> 01:25:14,080
yeah about putting it over a little bit

2110
01:25:14,080 --> 01:25:16,480
more reliable um that changes the entire

2111
01:25:16,480 --> 01:25:18,080
conduction dynamics

2112
01:25:18,080 --> 01:25:19,520
once you accept it like we took the

2113
01:25:19,520 --> 01:25:20,719
packets now

2114
01:25:20,719 --> 01:25:22,400
um now you've dual conditioning hole

2115
01:25:22,400 --> 01:25:23,360
made out so that seems like

2116
01:25:23,360 --> 01:25:26,400
extraordinarily undesirable um

2117
01:25:26,400 --> 01:25:27,520
unnecessarily reduction control for

2118
01:25:27,520 --> 01:25:30,239
google engine systems now right um

2119
01:25:30,239 --> 01:25:32,639
um this is sort of an issue for udp as

2120
01:25:32,639 --> 01:25:34,800
people are saying but every mvp system i

2121
01:25:34,800 --> 01:25:35,600
know

2122
01:25:35,600 --> 01:25:37,280
um

2123
01:25:37,280 --> 01:25:38,880
either

2124
01:25:38,880 --> 01:25:42,000
either assumes a minimum i mean so

2125
01:25:42,000 --> 01:25:43,600
first of all like um you know people

2126
01:25:43,600 --> 01:25:45,440
don't build gdp systems to play work or

2127
01:25:45,440 --> 01:25:48,480
ipv6 um because that would be silly and

2128
01:25:48,480 --> 01:25:50,560
so um so every udp system that i'm

2129
01:25:50,560 --> 01:25:52,560
familiar with has to be able to handle

2130
01:25:52,560 --> 01:25:55,360
um you know packet sizes that um that go

2131
01:25:55,360 --> 01:25:56,880
down the ball because you have to like

2132
01:25:56,880 --> 01:25:59,120
uh still i mean or you have to just say

2133
01:25:59,120 --> 01:26:00,480
i'm going to fail over i can people

2134
01:26:00,480 --> 01:26:03,679
people small ipv4 links right um so like

2135
01:26:03,679 --> 01:26:04,960
if you look like these you see a lot

2136
01:26:04,960 --> 01:26:06,159
handshake for instance it's willing to

2137
01:26:06,159 --> 01:26:08,000
negotiate download below below a

2138
01:26:08,000 --> 01:26:09,600
thousand um

2139
01:26:09,600 --> 01:26:10,880
the um

2140
01:26:10,880 --> 01:26:12,239
i'm gonna say if you if you don't do

2141
01:26:12,239 --> 01:26:13,520
that you're like operating at like you

2142
01:26:13,520 --> 01:26:14,719
know risk of life the thing that's not

2143
01:26:14,719 --> 01:26:17,120
working in general right um

2144
01:26:17,120 --> 01:26:19,600
um the i mean i'm i'm not on the long

2145
01:26:19,600 --> 01:26:21,679
run fragmentation it's my knowledge the

2146
01:26:21,679 --> 01:26:24,239
problems of fragmentation are largely um

2147
01:26:24,239 --> 01:26:27,120
due to attempts to do um passive packet

2148
01:26:27,120 --> 01:26:30,000
inspection by um by stateful ip

2149
01:26:30,000 --> 01:26:32,159
inspectors um and that and because we're

2150
01:26:32,159 --> 01:26:33,440
encrypting things that's largely not the

2151
01:26:33,440 --> 01:26:36,080
case here um so i'm i'm most concerned

2152
01:26:36,080 --> 01:26:37,840
about that um i guess i would also

2153
01:26:37,840 --> 01:26:40,080
observe that like this is putting them

2154
01:26:40,080 --> 01:26:42,000
in castles in fragmentation it's like

2155
01:26:42,000 --> 01:26:42,719
this is a different form of

2156
01:26:42,719 --> 01:26:44,400
fragmentation that treats them in

2157
01:26:44,400 --> 01:26:46,159
infrastructure i mean it's inherent in a

2158
01:26:46,159 --> 01:26:48,159
quick stuff in any kind of like any kind

2159
01:26:48,159 --> 01:26:49,600
of system that breaks them puts it back

2160
01:26:49,600 --> 01:26:50,719
together again whether it has

2161
01:26:50,719 --> 01:26:51,920
retransmission or not that is like a

2162
01:26:51,920 --> 01:26:53,280
form of fragmentation so i don't really

2163
01:26:53,280 --> 01:26:54,560
understand why one would think that like

2164
01:26:54,560 --> 01:26:55,840
it'd be substantially better to have

2165
01:26:55,840 --> 01:26:58,719
like a reliable like you know i mean in

2166
01:26:58,719 --> 01:27:00,719
fact there's no data loss um you know

2167
01:27:00,719 --> 01:27:03,600
fragmentation and um and and and uh you

2168
01:27:03,600 --> 01:27:05,520
know we just really might reach this

2169
01:27:05,520 --> 01:27:07,920
mission identify behaviors right so um

2170
01:27:07,920 --> 01:27:09,840
if i think the question we have to ask

2171
01:27:09,840 --> 01:27:12,239
is can the system ship at all without

2172
01:27:12,239 --> 01:27:13,840
having some mechanism for handling in

2173
01:27:13,840 --> 01:27:16,400
this case um and i think the question

2174
01:27:16,400 --> 01:27:18,719
and then the question becomes i think

2175
01:27:18,719 --> 01:27:19,840
you know

2176
01:27:19,840 --> 01:27:22,480
how bad is it um you know so as we've

2177
01:27:22,480 --> 01:27:24,239
already just described it's possible to

2178
01:27:24,239 --> 01:27:26,000
discover um at the beginning whether

2179
01:27:26,000 --> 01:27:28,000
your path handles this um and the

2180
01:27:28,000 --> 01:27:29,440
question becomes can your path shift in

2181
01:27:29,440 --> 01:27:31,520
a way that you do not have you no longer

2182
01:27:31,520 --> 01:27:33,600
handle them to you and does that cause

2183
01:27:33,600 --> 01:27:35,600
like some sort of goofy um goofy

2184
01:27:35,600 --> 01:27:37,840
problems right um you know i think mt

2185
01:27:37,840 --> 01:27:39,840
was worried about that um i'm perhaps

2186
01:27:39,840 --> 01:27:41,520
lost worried about it um you know my

2187
01:27:41,520 --> 01:27:43,440
instinct i think would be to say let's

2188
01:27:43,440 --> 01:27:44,880
try feeling about this and i see if

2189
01:27:44,880 --> 01:27:46,239
people encounter problems and if they do

2190
01:27:46,239 --> 01:27:47,679
we can always add a mechanism for doing

2191
01:27:47,679 --> 01:27:50,080
this um but i think if we think we have

2192
01:27:50,080 --> 01:27:51,360
to do something then we should just do

2193
01:27:51,360 --> 01:27:52,880
we just need to do a fabrication

2194
01:27:52,880 --> 01:27:54,800
reassembly system because like it's like

2195
01:27:54,800 --> 01:27:57,679
yeah because it's the minimum change

2196
01:27:57,679 --> 01:28:00,480
so what one is in there

2197
01:28:00,480 --> 01:28:02,320
i'm getting a lot of echo

2198
01:28:02,320 --> 01:28:03,040
ah

2199
01:28:03,040 --> 01:28:05,199
the

2200
01:28:05,600 --> 01:28:07,440
the case of doing fragmentation over

2201
01:28:07,440 --> 01:28:09,440
capsules which i fully agree is

2202
01:28:09,440 --> 01:28:11,360
fragmentation it's just like

2203
01:28:11,360 --> 01:28:14,880
fragmentation with re-transmissions

2204
01:28:14,880 --> 01:28:16,480
is

2205
01:28:16,480 --> 01:28:17,920
essentially the exact same behavior that

2206
01:28:17,920 --> 01:28:19,040
you would have

2207
01:28:19,040 --> 01:28:21,040
in the case that david mentioned of if i

2208
01:28:21,040 --> 01:28:22,480
start big and i have to fall back i'm

2209
01:28:22,480 --> 01:28:24,960
falling back to http 2 and http 2 for

2210
01:28:24,960 --> 01:28:28,159
connect ip only ever sends them over

2211
01:28:28,159 --> 01:28:30,080
reliable capsules

2212
01:28:30,080 --> 01:28:32,960
so to that end i could argue that if i'm

2213
01:28:32,960 --> 01:28:34,719
having to deal with a world where i have

2214
01:28:34,719 --> 01:28:35,920
to

2215
01:28:35,920 --> 01:28:39,440
i have a fallback to h2 i already need

2216
01:28:39,440 --> 01:28:40,639
to handle the performance

2217
01:28:40,639 --> 01:28:42,639
characteristics and everything else

2218
01:28:42,639 --> 01:28:45,920
of going over reliable captions that is

2219
01:28:45,920 --> 01:28:48,320
a reality that we have to deal with

2220
01:28:48,320 --> 01:28:49,440
well i think with the argument i guess

2221
01:28:49,440 --> 01:28:50,960
you could i get a fair enough although i

2222
01:28:50,960 --> 01:28:52,719
think i turn the argument around and say

2223
01:28:52,719 --> 01:28:54,159
if you're going to bother to absorb the

2224
01:28:54,159 --> 01:28:56,560
pain of like having his wrist and logic

2225
01:28:56,560 --> 01:28:59,760
um in this case why not just use h2 um i

2226
01:28:59,760 --> 01:29:01,280
guess one question

2227
01:29:01,280 --> 01:29:03,040
one question i think um you know

2228
01:29:03,040 --> 01:29:04,000
it's like

2229
01:29:04,000 --> 01:29:05,600
we're worth asking about

2230
01:29:05,600 --> 01:29:07,040
uh i mean is

2231
01:29:07,040 --> 01:29:08,159
um you know

2232
01:29:08,159 --> 01:29:09,040
um

2233
01:29:09,040 --> 01:29:10,880
is let's distinguish between detection

2234
01:29:10,880 --> 01:29:12,480
and you know i mean it's like i guess

2235
01:29:12,480 --> 01:29:13,760
like for one of your taxes what does

2236
01:29:13,760 --> 01:29:16,000
this actually look like so so i think um

2237
01:29:16,000 --> 01:29:18,800
you know um so so so you see so someone

2238
01:29:18,800 --> 01:29:20,480
says you a packet looks like at the bear

2239
01:29:20,480 --> 01:29:21,760
which is at the very limit before and

2240
01:29:21,760 --> 01:29:23,440
now and now for some reason books of the

2241
01:29:23,440 --> 01:29:24,400
past shift

2242
01:29:24,400 --> 01:29:26,000
is no longer it's bollard or limited

2243
01:29:26,000 --> 01:29:27,760
right and so packing gets wrapped along

2244
01:29:27,760 --> 01:29:29,520
the wire somewhere right um you know

2245
01:29:29,520 --> 01:29:31,600
induces a should be a quick packet

2246
01:29:31,600 --> 01:29:34,480
right um and um

2247
01:29:34,480 --> 01:29:37,760
and so um and so so i mean just to recap

2248
01:29:37,760 --> 01:29:39,520
what i'm saying you think the mtu that

2249
01:29:39,520 --> 01:29:41,440
you're running over is 1300 but actually

2250
01:29:41,440 --> 01:29:43,280
it's going down to 12.95 right and so

2251
01:29:43,280 --> 01:29:45,120
you send a packet that's 1297 and it

2252
01:29:45,120 --> 01:29:48,480
gets dropped right um and so

2253
01:29:48,480 --> 01:29:51,120
now so so um you know

2254
01:29:51,120 --> 01:29:55,199
uh so so now what right um you know um

2255
01:29:55,199 --> 01:29:57,360
you know uh so so you have to detect

2256
01:29:57,360 --> 01:29:58,880
that case and you have to fall back to

2257
01:29:58,880 --> 01:30:00,719
small you have to know to do something

2258
01:30:00,719 --> 01:30:02,400
right and that thing now something is

2259
01:30:02,400 --> 01:30:04,239
either start fragmenting packets or

2260
01:30:04,239 --> 01:30:07,199
start tearing things down right um and

2261
01:30:07,199 --> 01:30:09,520
um i guess so let's start with that

2262
01:30:09,520 --> 01:30:11,040
question is how do you take that case

2263
01:30:11,040 --> 01:30:13,199
and the way you detect that case is by

2264
01:30:13,199 --> 01:30:14,880
repeatedly not getting acts or packets

2265
01:30:14,880 --> 01:30:18,320
right at the bare limit right and so um

2266
01:30:18,320 --> 01:30:20,239
um um and unless you want to do some

2267
01:30:20,239 --> 01:30:22,080
sort of goofy gtossy thing like somebody

2268
01:30:22,080 --> 01:30:24,239
gtls does um is you know when it starts

2269
01:30:24,239 --> 01:30:26,080
it like says like well started like you

2270
01:30:26,080 --> 01:30:28,239
know at like 1280 and said like two or

2271
01:30:28,239 --> 01:30:30,080
three times and then it wouldn't work

2272
01:30:30,080 --> 01:30:31,040
that's

2273
01:30:31,040 --> 01:30:32,560
too big let's start backing off that's

2274
01:30:32,560 --> 01:30:34,000
like not really acceptable behavior like

2275
01:30:34,000 --> 01:30:37,280
an ordinary system right and so um

2276
01:30:37,280 --> 01:30:39,040
and and so i just don't understand like

2277
01:30:39,040 --> 01:30:41,679
like it seems to me like that

2278
01:30:41,679 --> 01:30:42,480
um

2279
01:30:42,480 --> 01:30:44,639
that that you're gonna you're gonna

2280
01:30:44,639 --> 01:30:46,159
encounter like four or five round trip

2281
01:30:46,159 --> 01:30:47,679
times before you realize that you have

2282
01:30:47,679 --> 01:30:49,920
to start fragmenting or doing some other

2283
01:30:49,920 --> 01:30:52,400
thing right and at that point like what

2284
01:30:52,400 --> 01:30:53,679
is that really the behavior we wanted

2285
01:30:53,679 --> 01:30:54,800
would be better to say like it's going

2286
01:30:54,800 --> 01:30:55,920
to fail the connection is not tearing

2287
01:30:55,920 --> 01:30:58,960
things down um

2288
01:30:59,840 --> 01:31:01,600
so i guess i guess i guess i'm talking

2289
01:31:01,600 --> 01:31:03,360
myself back into like i think we should

2290
01:31:03,360 --> 01:31:04,800
just like fail because like i think that

2291
01:31:04,800 --> 01:31:06,480
the situation otherwise is going to be

2292
01:31:06,480 --> 01:31:08,320
an enormous other time to respond and

2293
01:31:08,320 --> 01:31:09,280
the response is going to be kind of a

2294
01:31:09,280 --> 01:31:11,679
pain yes um and by the time you already

2295
01:31:11,679 --> 01:31:13,520
lost a lot of packets right i mean you

2296
01:31:13,520 --> 01:31:14,960
may not have lost actually but you've

2297
01:31:14,960 --> 01:31:18,080
lost them operationally

2298
01:31:20,159 --> 01:31:22,239
all right thank you

2299
01:31:22,239 --> 01:31:23,760
mario

2300
01:31:23,760 --> 01:31:26,159
yeah me again um so i think there are

2301
01:31:26,159 --> 01:31:28,639
possibilities to use unreliable

2302
01:31:28,639 --> 01:31:30,639
datagrams and define a context or

2303
01:31:30,639 --> 01:31:31,600
whatever where you have like a

2304
01:31:31,600 --> 01:31:33,199
dependency between different datagrams

2305
01:31:33,199 --> 01:31:34,639
and you can only develop them if you

2306
01:31:34,639 --> 01:31:36,159
have them all or whatever that is

2307
01:31:36,159 --> 01:31:37,679
possible but i think that would

2308
01:31:37,679 --> 01:31:39,760
definitely be an extension

2309
01:31:39,760 --> 01:31:41,840
we have reliable capsules here i think

2310
01:31:41,840 --> 01:31:44,320
it's easy to use i don't see a benefit

2311
01:31:44,320 --> 01:31:45,920
from falling back to

2312
01:31:45,920 --> 01:31:48,080
h2 instead rather than falling back to

2313
01:31:48,080 --> 01:31:49,600
capsules or at least trying to find a

2314
01:31:49,600 --> 01:31:51,440
solution to fall back to capsules i

2315
01:31:51,440 --> 01:31:52,880
think that's a tricky part like when you

2316
01:31:52,880 --> 01:31:55,760
fall back but capsules are easy to use

2317
01:31:55,760 --> 01:31:59,600
and give us what we need

2318
01:31:59,600 --> 01:32:02,320
i agree it's very equivalent to

2319
01:32:02,320 --> 01:32:04,000
falling back to h2 except you just don't

2320
01:32:04,000 --> 01:32:05,760
have to now bring up an h2 connection to

2321
01:32:05,760 --> 01:32:07,440
do it

2322
01:32:07,440 --> 01:32:08,480
um

2323
01:32:08,480 --> 01:32:11,879
okay rajiv

2324
01:32:21,920 --> 01:32:26,960
that keeps our implementation simpler um

2325
01:32:27,760 --> 01:32:30,480
possibility like eric mentioned of using

2326
01:32:30,480 --> 01:32:32,719
a two or a three or even a five round

2327
01:32:32,719 --> 01:32:35,520
trip time uh michael just figuring out

2328
01:32:35,520 --> 01:32:37,199
that you need to start enabling

2329
01:32:37,199 --> 01:32:40,960
fragmentation all that we're

2330
01:32:42,880 --> 01:32:45,520
the applications that are using this uh

2331
01:32:45,520 --> 01:32:48,239
tunnel that now have to understand and

2332
01:32:48,239 --> 01:32:50,719
deal with the fact that

2333
01:32:50,719 --> 01:32:53,199
a tunnel that i thought i had set up is

2334
01:32:53,199 --> 01:32:55,920
basically going to vanish uh you know

2335
01:32:55,920 --> 01:32:58,400
out of the blue because if some network

2336
01:32:58,400 --> 01:33:00,639
change it has nothing to do with either

2337
01:33:00,639 --> 01:33:02,000
of the endpoints

2338
01:33:02,000 --> 01:33:04,400
right so which means i probably have no

2339
01:33:04,400 --> 01:33:06,560
visibility on when a tunnel may

2340
01:33:06,560 --> 01:33:09,600
completely just rip out and die under me

2341
01:33:09,600 --> 01:33:10,960
and uh

2342
01:33:10,960 --> 01:33:14,560
all the uh you know error handling

2343
01:33:14,560 --> 01:33:17,280
p connect all that logic now has to be

2344
01:33:17,280 --> 01:33:20,480
borne by the application end of things

2345
01:33:20,480 --> 01:33:23,920
okay so uh you know while it might be

2346
01:33:23,920 --> 01:33:26,719
interesting to target simplicity here

2347
01:33:26,719 --> 01:33:29,120
there should be some level uh you know

2348
01:33:29,120 --> 01:33:30,960
of understanding that if we make it too

2349
01:33:30,960 --> 01:33:33,120
simple we're not just we're not

2350
01:33:33,120 --> 01:33:35,199
simplifying the entire solution we're

2351
01:33:35,199 --> 01:33:37,120
only simplifying our piece of it and

2352
01:33:37,120 --> 01:33:40,719
pushing the complexity somewhere else

2353
01:33:42,159 --> 01:33:44,000
yeah so just that point that i wanted to

2354
01:33:44,000 --> 01:33:47,760
make over there thank you thank you

2355
01:33:47,760 --> 01:33:51,840
and we have lorenzo again

2356
01:33:52,000 --> 01:33:54,239
yeah just uh just always do everything

2357
01:33:54,239 --> 01:33:55,679
in capsules

2358
01:33:55,679 --> 01:33:57,120
i mean um

2359
01:33:57,120 --> 01:33:59,040
there's not even a problem traditionally

2360
01:33:59,040 --> 01:34:01,199
if you retransmit something reliable you

2361
01:34:01,199 --> 01:34:03,679
have like a compounded re-transmits

2362
01:34:03,679 --> 01:34:04,800
but if you

2363
01:34:04,800 --> 01:34:05,760
you know

2364
01:34:05,760 --> 01:34:07,679
unless you have like really really

2365
01:34:07,679 --> 01:34:09,679
really aggressive timers above you the

2366
01:34:09,679 --> 01:34:11,040
app will just see no loss and it won't

2367
01:34:11,040 --> 01:34:13,440
retransmit it's a simpler code path it

2368
01:34:13,440 --> 01:34:15,120
runs it's the same all the time it's the

2369
01:34:15,120 --> 01:34:17,120
same as udp probably simplify the

2370
01:34:17,120 --> 01:34:18,880
implementation and it'll work all the

2371
01:34:18,880 --> 01:34:21,120
time and again like the reduce point as

2372
01:34:21,120 --> 01:34:23,840
well like if you if you fail it uh you

2373
01:34:23,840 --> 01:34:25,199
can't just fail at the big and you have

2374
01:34:25,199 --> 01:34:27,040
to fail in the middle and you you

2375
01:34:27,040 --> 01:34:28,960
basically are introducing the the

2376
01:34:28,960 --> 01:34:30,560
possibility the app will see an error

2377
01:34:30,560 --> 01:34:32,400
halfway through just when it happens to

2378
01:34:32,400 --> 01:34:34,320
send a large packet or whatever

2379
01:34:34,320 --> 01:34:36,320
or if the routing changes it's super

2380
01:34:36,320 --> 01:34:37,760
unfriendly to the app and it like

2381
01:34:37,760 --> 01:34:39,360
increases the complexity of the overall

2382
01:34:39,360 --> 01:34:40,320
system

2383
01:34:40,320 --> 01:34:41,840
right it should i think it should just

2384
01:34:41,840 --> 01:34:43,840
work all the time which means yeah just

2385
01:34:43,840 --> 01:34:45,600
just do the same thing all the time put

2386
01:34:45,600 --> 01:34:48,320
them in capsules

2387
01:34:50,800 --> 01:34:51,920
okay

2388
01:34:51,920 --> 01:34:53,600
sorry but i feel like after nothing like

2389
01:34:53,600 --> 01:34:55,199
that that doesn't solve the problem

2390
01:34:55,199 --> 01:34:56,960
because the problem is discovering when

2391
01:34:56,960 --> 01:34:58,960
you have to think more datagrams

2392
01:34:58,960 --> 01:35:01,199
and so just putting them in the capsules

2393
01:35:01,199 --> 01:35:02,560
isn't enough in the answer you need an

2394
01:35:02,560 --> 01:35:03,840
answer for when

2395
01:35:03,840 --> 01:35:04,800
for when

2396
01:35:04,800 --> 01:35:05,600
the

2397
01:35:05,600 --> 01:35:06,960
quick connection decides it has to do

2398
01:35:06,960 --> 01:35:08,800
with duty discovery or something to go

2399
01:35:08,800 --> 01:35:10,560
back to our datagram and so i can kill

2400
01:35:10,560 --> 01:35:11,520
someone personally

2401
01:35:11,520 --> 01:35:13,920
i feel like like this is not like the

2402
01:35:13,920 --> 01:35:16,000
app

2403
01:35:16,000 --> 01:35:17,600
right i mean you could certainly do

2404
01:35:17,600 --> 01:35:19,520
something where

2405
01:35:19,520 --> 01:35:20,960
you know like let's say i'm doing quick

2406
01:35:20,960 --> 01:35:24,320
migration and like i know i changed mtu

2407
01:35:24,320 --> 01:35:26,480
and like the tunnel has like a very

2408
01:35:26,480 --> 01:35:27,760
clear event

2409
01:35:27,760 --> 01:35:29,520
then you could easily say okay now i'm

2410
01:35:29,520 --> 01:35:32,480
going to switch um but yeah it's it's

2411
01:35:32,480 --> 01:35:34,480
the things that a quick implementation

2412
01:35:34,480 --> 01:35:35,679
wouldn't

2413
01:35:35,679 --> 01:35:37,119
right i guess

2414
01:35:37,119 --> 01:35:38,880
all this thing is like we designed quick

2415
01:35:38,880 --> 01:35:41,199
right quick was designed like quick was

2416
01:35:41,199 --> 01:35:43,199
designed like basically the assumptions

2417
01:35:43,199 --> 01:35:45,360
can use for h3 and like h3 like the

2418
01:35:45,360 --> 01:35:47,840
world is pretty simple like uh you know

2419
01:35:47,840 --> 01:35:49,440
if things that don't work it's like like

2420
01:35:49,440 --> 01:35:50,560
you just tear the connection down and

2421
01:35:50,560 --> 01:35:53,040
start over again right and like so you

2422
01:35:53,040 --> 01:35:54,320
know we made it made hand waving it's

2423
01:35:54,320 --> 01:35:55,520
not about having it work for things that

2424
01:35:55,520 --> 01:35:57,119
weren't h3 but like we were willing to

2425
01:35:57,119 --> 01:35:58,560
like accept this kind of failure mode

2426
01:35:58,560 --> 01:35:59,840
maybe three because it didn't matter

2427
01:35:59,840 --> 01:36:01,679
that much and i guess what i'm saying is

2428
01:36:01,679 --> 01:36:03,840
if the the argument we're offering is

2429
01:36:03,840 --> 01:36:06,239
that um the argument here is that we

2430
01:36:06,239 --> 01:36:07,520
don't want people to take weird

2431
01:36:07,520 --> 01:36:09,119
mid-connection hiccups

2432
01:36:09,119 --> 01:36:12,080
right um then we actually need to find

2433
01:36:12,080 --> 01:36:13,199
an algorithm to not resolve your

2434
01:36:13,199 --> 01:36:15,119
connection real new connection hiccups

2435
01:36:15,119 --> 01:36:16,800
and merely saying some of our capitals

2436
01:36:16,800 --> 01:36:18,480
does not accomplish that because you're

2437
01:36:18,480 --> 01:36:19,679
still going to take multiple run trip

2438
01:36:19,679 --> 01:36:21,280
times before you recover enough to send

2439
01:36:21,280 --> 01:36:22,639
things in the smaller the smaller

2440
01:36:22,639 --> 01:36:23,840
datagrams that they actually actually

2441
01:36:23,840 --> 01:36:26,000
traverse the network and so

2442
01:36:26,000 --> 01:36:26,880
like

2443
01:36:26,880 --> 01:36:28,560
i think so i think like if people want

2444
01:36:28,560 --> 01:36:29,920
to go that route like we need a complete

2445
01:36:29,920 --> 01:36:31,360
answer that answer has to like just

2446
01:36:31,360 --> 01:36:33,040
prescribe enough of an algorithm that

2447
01:36:33,040 --> 01:36:35,600
like under unknown topology shifts which

2448
01:36:35,600 --> 01:36:37,920
is the alleged problem here um that you

2449
01:36:37,920 --> 01:36:40,719
apologize you're not not aware of um

2450
01:36:40,719 --> 01:36:42,080
that you still recover properly because

2451
01:36:42,080 --> 01:36:44,000
if the answer is like it's no apology

2452
01:36:44,000 --> 01:36:45,600
shifts just do pmg discovery at that

2453
01:36:45,600 --> 01:36:47,840
point and if and and if like and then

2454
01:36:47,840 --> 01:36:49,040
turn the connections down if you don't

2455
01:36:49,040 --> 01:36:50,719
if you don't use these requirements

2456
01:36:50,719 --> 01:36:51,520
right

2457
01:36:51,520 --> 01:36:53,520
so um so i think it has to be unknown to

2458
01:36:53,520 --> 01:36:55,440
politicians and it has to be fast

2459
01:36:55,440 --> 01:36:56,880
otherwise like someone just took four on

2460
01:36:56,880 --> 01:36:58,080
trip times and like not how you're happy

2461
01:36:58,080 --> 01:37:00,800
about that and and i know about like and

2462
01:37:00,800 --> 01:37:02,719
the rediscovery i mean the retracement

2463
01:37:02,719 --> 01:37:04,960
timers on like retired timers are pretty

2464
01:37:04,960 --> 01:37:06,880
fast like on these end points um once

2465
01:37:06,880 --> 01:37:08,239
you have established the run trip time

2466
01:37:08,239 --> 01:37:10,080
so like you know so if we're going to

2467
01:37:10,080 --> 01:37:10,960
take you know if we're going to take

2468
01:37:10,960 --> 01:37:12,880
four rtt's to discover this like the

2469
01:37:12,880 --> 01:37:14,560
other side is going to return that time

2470
01:37:14,560 --> 01:37:15,440
period

2471
01:37:15,440 --> 01:37:18,440
yeah

2472
01:37:20,000 --> 01:37:22,719
okay i think we have drained the queue

2473
01:37:22,719 --> 01:37:24,960
um

2474
01:37:24,960 --> 01:37:25,920
we

2475
01:37:25,920 --> 01:37:28,000
don't have consensus but we do have a

2476
01:37:28,000 --> 01:37:29,360
lot of good input

2477
01:37:29,360 --> 01:37:30,400
so

2478
01:37:30,400 --> 01:37:32,560
thank you for all of that i think it's a

2479
01:37:32,560 --> 01:37:34,400
very useful discussion

2480
01:37:34,400 --> 01:37:35,840
um

2481
01:37:35,840 --> 01:37:37,040
there's a lot of good stuff on the chat

2482
01:37:37,040 --> 01:37:38,719
too so hopefully

2483
01:37:38,719 --> 01:37:40,080
we have

2484
01:37:40,080 --> 01:37:41,840
uh the notes that we can go back to in

2485
01:37:41,840 --> 01:37:44,880
the video we can go back to and we can

2486
01:37:44,880 --> 01:37:47,520
come up with a proposal for next time

2487
01:37:47,520 --> 01:37:48,639
and hopefully also we can have

2488
01:37:48,639 --> 01:37:50,000
implementation experience and actually

2489
01:37:50,000 --> 01:37:52,239
try some of this out

2490
01:37:52,239 --> 01:37:54,080
the one other issue

2491
01:37:54,080 --> 01:37:56,480
um

2492
01:37:56,639 --> 01:37:58,320
is related

2493
01:37:58,320 --> 01:38:00,639
um

2494
01:38:00,719 --> 01:38:02,800
it's a broader question about error

2495
01:38:02,800 --> 01:38:04,480
handling um

2496
01:38:04,480 --> 01:38:07,840
what do you do if you receive a packet

2497
01:38:07,840 --> 01:38:08,800
um

2498
01:38:08,800 --> 01:38:10,800
in your http datagram

2499
01:38:10,800 --> 01:38:13,199
that is something that you will refuse

2500
01:38:13,199 --> 01:38:15,199
to route

2501
01:38:15,199 --> 01:38:16,560
so let's say you set up with your

2502
01:38:16,560 --> 01:38:17,760
capsules

2503
01:38:17,760 --> 01:38:20,560
a very specific route or a limited route

2504
01:38:20,560 --> 01:38:21,920
um

2505
01:38:21,920 --> 01:38:23,280
and now the other side starts sending

2506
01:38:23,280 --> 01:38:25,280
with an invalid source address that you

2507
01:38:25,280 --> 01:38:26,800
didn't assign to it

2508
01:38:26,800 --> 01:38:28,400
an invalid destination that's not

2509
01:38:28,400 --> 01:38:31,839
routable for you

2510
01:38:32,639 --> 01:38:33,920
essentially you have the options of you

2511
01:38:33,920 --> 01:38:36,159
can just silently drop it you can try to

2512
01:38:36,159 --> 01:38:39,360
drop it and send something back as ip

2513
01:38:39,360 --> 01:38:42,800
packets within this tunnel as icmp

2514
01:38:42,800 --> 01:38:44,960
or you can

2515
01:38:44,960 --> 01:38:47,840
use something at the http layer

2516
01:38:47,840 --> 01:38:49,760
to send the capsule or close the stream

2517
01:38:49,760 --> 01:38:51,040
or do something

2518
01:38:51,040 --> 01:38:56,159
um kind of at that h3 or h2 level

2519
01:38:56,159 --> 01:38:59,839
do people have opinions on this

2520
01:39:04,239 --> 01:39:06,718
rajiv

2521
01:39:09,760 --> 01:39:12,880
here would be to stick with option two

2522
01:39:12,880 --> 01:39:16,320
uh that most closely mimics what an

2523
01:39:16,320 --> 01:39:18,960
application would otherwise have seen or

2524
01:39:18,960 --> 01:39:20,880
if it was communicating on a pair

2525
01:39:20,880 --> 01:39:22,159
network

2526
01:39:22,159 --> 01:39:24,800
so you would expect them to already have

2527
01:39:24,800 --> 01:39:25,520
the

2528
01:39:25,520 --> 01:39:27,840
to handle stuff like that and

2529
01:39:27,840 --> 01:39:30,400
deal with that and that also you know

2530
01:39:30,400 --> 01:39:33,600
brings out the possibility that you know

2531
01:39:33,600 --> 01:39:36,639
especially in case of a property

2532
01:39:36,639 --> 01:39:38,880
which is not directly

2533
01:39:38,880 --> 01:39:41,520
application

2534
01:39:53,440 --> 01:39:55,280
uh in terms of understanding this

2535
01:39:55,280 --> 01:39:57,440
natural syndrome translating it into

2536
01:39:57,440 --> 01:39:59,119
something that you can in turn

2537
01:39:59,119 --> 01:40:01,520
communicate to the app

2538
01:40:01,520 --> 01:40:03,360
so this way you know everything just

2539
01:40:03,360 --> 01:40:05,280
goes as it could on

2540
01:40:05,280 --> 01:40:08,599
any other network

2541
01:40:12,080 --> 01:40:15,199
all right thank you corey

2542
01:40:18,639 --> 01:40:20,239
hi corey first

2543
01:40:20,239 --> 01:40:21,440
um

2544
01:40:21,440 --> 01:40:24,719
two icmps are kind of nice um peter can

2545
01:40:24,719 --> 01:40:27,360
you speak closer to the mic please no i

2546
01:40:27,360 --> 01:40:29,440
i can re

2547
01:40:29,440 --> 01:40:31,440
do the mic there we go

2548
01:40:31,440 --> 01:40:33,119
um

2549
01:40:33,119 --> 01:40:36,719
two icmp messages are particularly nice

2550
01:40:36,719 --> 01:40:39,199
ptb if you translate it correctly so

2551
01:40:39,199 --> 01:40:41,360
that when it comes out it's the

2552
01:40:41,360 --> 01:40:42,080
the

2553
01:40:42,080 --> 01:40:43,840
quoted payload is actually the one you

2554
01:40:43,840 --> 01:40:46,639
want to respond to so it can be verified

2555
01:40:46,639 --> 01:40:48,719
rather than just a random ptb of the

2556
01:40:48,719 --> 01:40:50,719
outer tunnel

2557
01:40:50,719 --> 01:40:53,440
and ttl because then you can as an

2558
01:40:53,440 --> 01:40:55,199
operator kind of debug and figure out

2559
01:40:55,199 --> 01:40:57,119
what happened with that tunnel

2560
01:40:57,119 --> 01:40:58,880
and without it tunnels become very

2561
01:40:58,880 --> 01:41:00,880
difficult to understand and this is like

2562
01:41:00,880 --> 01:41:02,639
a tunnel

2563
01:41:02,639 --> 01:41:04,960
other stuff i'm not really so sure about

2564
01:41:04,960 --> 01:41:06,400
because i don't know what to do with it

2565
01:41:06,400 --> 01:41:08,560
so

2566
01:41:08,560 --> 01:41:10,960
i'll also be my two recommendations

2567
01:41:10,960 --> 01:41:12,800
okay so

2568
01:41:12,800 --> 01:41:14,560
again multiple people speaking up for

2569
01:41:14,560 --> 01:41:15,679
doing

2570
01:41:15,679 --> 01:41:17,600
icmp signaling

2571
01:41:17,600 --> 01:41:21,040
and making it tunnel friendly

2572
01:41:21,040 --> 01:41:23,440
miriam

2573
01:41:26,560 --> 01:41:28,159
sorry just a clarification where do you

2574
01:41:28,159 --> 01:41:30,880
send the icmp message isn't it within

2575
01:41:30,880 --> 01:41:33,840
the tunnel

2576
01:41:34,159 --> 01:41:37,199
presumably yes right so you would send

2577
01:41:37,199 --> 01:41:40,400
it on that datagram with the

2578
01:41:40,400 --> 01:41:42,880
with the quarter stream id to say

2579
01:41:42,880 --> 01:41:44,840
you sent this to me and like

2580
01:41:44,840 --> 01:41:47,679
no yeah so why i mean like this is not

2581
01:41:47,679 --> 01:41:50,960
visible to anybody right so in that case

2582
01:41:50,960 --> 01:41:54,320
i would rather use capsules um

2583
01:41:54,320 --> 01:41:56,960
because but it allows i think

2584
01:41:56,960 --> 01:41:59,440
the the person receiving the icmp to do

2585
01:41:59,440 --> 01:42:01,520
a very simple thing of you know let's

2586
01:42:01,520 --> 01:42:03,440
say they've implemented

2587
01:42:03,440 --> 01:42:05,119
their quick stack behind like a virtual

2588
01:42:05,119 --> 01:42:06,400
interface such so the application

2589
01:42:06,400 --> 01:42:08,800
actually doesn't have any idea

2590
01:42:08,800 --> 01:42:10,960
that it is going through a proxy like

2591
01:42:10,960 --> 01:42:12,840
it's you're using it as like a vpn

2592
01:42:12,840 --> 01:42:15,760
tunnel at that point if you reinject the

2593
01:42:15,760 --> 01:42:16,960
icmp

2594
01:42:16,960 --> 01:42:19,360
into the stack it could look

2595
01:42:19,360 --> 01:42:21,360
to the application like they were on

2596
01:42:21,360 --> 01:42:23,760
this virtual network they get the icp

2597
01:42:23,760 --> 01:42:25,600
that they would expect

2598
01:42:25,600 --> 01:42:26,960
based on the packet that they think they

2599
01:42:26,960 --> 01:42:30,639
formed um

2600
01:42:30,800 --> 01:42:32,719
and still generate an icp message

2601
01:42:32,719 --> 01:42:34,719
locally if you really need it

2602
01:42:34,719 --> 01:42:36,560
right so it's yeah at that point it's a

2603
01:42:36,560 --> 01:42:38,719
question of does the server have to do

2604
01:42:38,719 --> 01:42:41,679
it or does the client side have to do it

2605
01:42:41,679 --> 01:42:43,199
it seems like a dependency to a

2606
01:42:43,199 --> 01:42:44,400
different protocol which is not

2607
01:42:44,400 --> 01:42:47,280
necessary to me

2608
01:42:53,119 --> 01:42:54,880
david i'll just

2609
01:42:54,880 --> 01:42:56,560
since i'm next in queue go from here so

2610
01:42:56,560 --> 01:42:58,639
i'm lazy um

2611
01:42:58,639 --> 01:42:59,760
the

2612
01:42:59,760 --> 01:43:01,920
what we're building here is sure a

2613
01:43:01,920 --> 01:43:03,520
virtual tunnel but at the end of the day

2614
01:43:03,520 --> 01:43:06,000
what it is is an ip link

2615
01:43:06,000 --> 01:43:07,760
and

2616
01:43:07,760 --> 01:43:11,360
the internet protocol uses icmp when

2617
01:43:11,360 --> 01:43:13,679
something goes sideways

2618
01:43:13,679 --> 01:43:14,880
and so

2619
01:43:14,880 --> 01:43:17,760
in a way we don't need any normative

2620
01:43:17,760 --> 01:43:21,840
text here like if like the two sides of

2621
01:43:21,840 --> 01:43:25,040
a connect ip tunnel are ip routers and

2622
01:43:25,040 --> 01:43:27,360
those are very well defined components

2623
01:43:27,360 --> 01:43:28,880
in the ip spec

2624
01:43:28,880 --> 01:43:30,480
and if a router

2625
01:43:30,480 --> 01:43:32,239
doesn't want to forward something

2626
01:43:32,239 --> 01:43:34,400
because of its policy because of its mtu

2627
01:43:34,400 --> 01:43:36,560
because of anything it fancies the spec

2628
01:43:36,560 --> 01:43:39,199
says you send icmp so that's like what

2629
01:43:39,199 --> 01:43:40,880
it comes down to we don't need to invent

2630
01:43:40,880 --> 01:43:42,080
anything we don't need to really say

2631
01:43:42,080 --> 01:43:43,440
anything perhaps having some

2632
01:43:43,440 --> 01:43:45,280
implementation guidance of saying by the

2633
01:43:45,280 --> 01:43:46,239
way

2634
01:43:46,239 --> 01:43:48,800
this is how this is done

2635
01:43:48,800 --> 01:43:50,239
like you know if your stack pops out an

2636
01:43:50,239 --> 01:43:53,119
icmp packet don't freak out seems useful

2637
01:43:53,119 --> 01:43:54,560
but like we don't need to design

2638
01:43:54,560 --> 01:43:56,080
anything new using a capsule or

2639
01:43:56,080 --> 01:43:58,159
something we already have this in the ip

2640
01:43:58,159 --> 01:44:00,559
specs

2641
01:44:01,360 --> 01:44:03,600
yeah me again i agree to that like if we

2642
01:44:03,600 --> 01:44:05,520
if you want to use icmp we maybe give a

2643
01:44:05,520 --> 01:44:06,960
recommendation but we don't have to say

2644
01:44:06,960 --> 01:44:08,400
much because that's like not our

2645
01:44:08,400 --> 01:44:09,280
business

2646
01:44:09,280 --> 01:44:10,159
um

2647
01:44:10,159 --> 01:44:11,040
i

2648
01:44:11,040 --> 01:44:12,960
i wonder if there's any benefit of

2649
01:44:12,960 --> 01:44:14,639
silently dropped because like silently

2650
01:44:14,639 --> 01:44:16,239
drop seems to be an option when there is

2651
01:44:16,239 --> 01:44:17,520
kind of a

2652
01:44:17,520 --> 01:44:19,280
security risk or attack risk or whatever

2653
01:44:19,280 --> 01:44:20,639
i don't think that's something we have

2654
01:44:20,639 --> 01:44:22,320
in this tunnel so i think it's better to

2655
01:44:22,320 --> 01:44:24,400
be explicit than being implicit making

2656
01:44:24,400 --> 01:44:26,320
sure that the other end know it knows

2657
01:44:26,320 --> 01:44:27,920
what's happening there and if we really

2658
01:44:27,920 --> 01:44:29,440
want to make sure that the other end

2659
01:44:29,440 --> 01:44:31,119
knows what's happening there we should

2660
01:44:31,119 --> 01:44:32,800
have a feedback mechanism within our

2661
01:44:32,800 --> 01:44:35,920
protocol well we already do and that's

2662
01:44:35,920 --> 01:44:38,480
icmp

2663
01:44:38,480 --> 01:44:40,639
why do we need something additional

2664
01:44:40,639 --> 01:44:42,639
i think she's just commenting on the

2665
01:44:42,639 --> 01:44:46,000
option one that option one is bad

2666
01:44:46,000 --> 01:44:47,119
well that's fair but we shouldn't

2667
01:44:47,119 --> 01:44:49,199
preclude it i mean just like for ip

2668
01:44:49,199 --> 01:44:51,440
routers there are many different cases

2669
01:44:51,440 --> 01:44:53,040
where you don't necessarily want to

2670
01:44:53,040 --> 01:44:56,159
signal let's say you're under load um so

2671
01:44:56,159 --> 01:44:58,080
like you know giving guidance seems

2672
01:44:58,080 --> 01:44:59,280
reasonable to me but at the end of the

2673
01:44:59,280 --> 01:45:01,840
day we're sitting on the shoulders of

2674
01:45:01,840 --> 01:45:04,480
many hundreds of pages of ip specs no

2675
01:45:04,480 --> 01:45:06,000
need to reinvent those

2676
01:45:06,000 --> 01:45:08,320
yes if if you have a have a reason

2677
01:45:08,320 --> 01:45:10,639
that's covered by icmp to drop it you

2678
01:45:10,639 --> 01:45:12,480
can use icmp we don't have to care about

2679
01:45:12,480 --> 01:45:14,639
it's not our business if you actually

2680
01:45:14,639 --> 01:45:17,600
drop it because um that's not what you

2681
01:45:17,600 --> 01:45:20,719
requested in in the connect request and

2682
01:45:20,719 --> 01:45:22,560
like i'm providing you a connect service

2683
01:45:22,560 --> 01:45:24,639
and i'm i'm believe that like you're not

2684
01:45:24,639 --> 01:45:27,280
doing what what you asked me to do or

2685
01:45:27,280 --> 01:45:28,800
like what i'm providing to you maybe

2686
01:45:28,800 --> 01:45:33,199
it's good to say this explicitly

2687
01:45:33,199 --> 01:45:34,880
yeah i agree with that that sounds like

2688
01:45:34,880 --> 01:45:37,600
useful guidance

2689
01:45:39,760 --> 01:45:42,000
would

2690
01:45:42,840 --> 01:45:46,719
you second what maria just said that uh

2691
01:45:46,719 --> 01:45:49,360
silently dropping in this particular

2692
01:45:49,360 --> 01:45:50,719
context

2693
01:45:50,719 --> 01:45:52,320
is probably something that would

2694
01:45:52,320 --> 01:45:55,600
strongly advise the key uh you know in

2695
01:45:55,600 --> 01:45:56,400
our

2696
01:45:56,400 --> 01:45:58,719
text

2697
01:46:03,040 --> 01:46:05,360
either in terms of trying to protect the

2698
01:46:05,360 --> 01:46:08,080
network integrity under either attack or

2699
01:46:08,080 --> 01:46:10,560
high load solutions um you know that

2700
01:46:10,560 --> 01:46:13,040
makes a lot of sense but in the context

2701
01:46:13,040 --> 01:46:14,880
of a tunnel environment which we are

2702
01:46:14,880 --> 01:46:17,360
talking about this is a much more uh you

2703
01:46:17,360 --> 01:46:18,080
know

2704
01:46:18,080 --> 01:46:20,239
collective use case of general-purpose

2705
01:46:20,239 --> 01:46:23,840
ip routing uh stuff you you've actually

2706
01:46:23,840 --> 01:46:27,360
got an environment where you have a

2707
01:46:27,360 --> 01:46:31,040
stable endpoint at both ends okay and uh

2708
01:46:31,040 --> 01:46:34,400
you've already negotiated some amount of

2709
01:46:34,400 --> 01:46:35,600
you know

2710
01:46:35,600 --> 01:46:37,119
connection semantics before you've

2711
01:46:37,119 --> 01:46:39,600
started traffic at this point deciding

2712
01:46:39,600 --> 01:46:42,239
to silently drop smash after doing that

2713
01:46:42,239 --> 01:46:45,520
seems quite uh you know

2714
01:46:45,520 --> 01:46:48,400
troublesome for the remote so i guess

2715
01:46:48,400 --> 01:46:50,880
that you should always have a mechanism

2716
01:46:50,880 --> 01:46:52,320
where uh

2717
01:46:52,320 --> 01:46:54,400
a styling drop should not be allowed

2718
01:46:54,400 --> 01:46:58,080
unless in extreme conditions

2719
01:47:01,760 --> 01:47:05,320
okay phillip

2720
01:47:13,840 --> 01:47:16,639
um philip

2721
01:47:20,320 --> 01:47:22,560
we're not hearing you in the room either

2722
01:47:22,560 --> 01:47:24,880
philip

2723
01:47:25,360 --> 01:47:28,799
okay ecker

2724
01:47:34,080 --> 01:47:36,480
so i was struck by what david did three

2725
01:47:36,480 --> 01:47:38,480
minutes ago about standing on hundreds

2726
01:47:38,480 --> 01:47:41,679
if not thousands of pages of rfcs um

2727
01:47:41,679 --> 01:47:44,239
and you know it seems to me that this

2728
01:47:44,239 --> 01:47:45,920
this is an aspect of

2729
01:47:45,920 --> 01:47:48,159
mask okay like essentially like every

2730
01:47:48,159 --> 01:47:50,719
other teleporter built and

2731
01:47:50,719 --> 01:47:53,040
um and and as martin said it's like i

2732
01:47:53,040 --> 01:47:54,560
think her mother like

2733
01:47:54,560 --> 01:47:56,239
i guess i'm really hoping that we can

2734
01:47:56,239 --> 01:47:57,199
like

2735
01:47:57,199 --> 01:47:58,000
you know

2736
01:47:58,000 --> 01:47:58,800
um

2737
01:47:58,800 --> 01:48:01,840
that we can uh uh

2738
01:48:01,840 --> 01:48:03,840
like draw no other documents to behave

2739
01:48:03,840 --> 01:48:05,040
the way that whatever those other

2740
01:48:05,040 --> 01:48:06,400
documents saying you want to do says you

2741
01:48:06,400 --> 01:48:08,239
want to do um so i guess i would i would

2742
01:48:08,239 --> 01:48:10,800
i would kind of like to um so i'm in

2743
01:48:10,800 --> 01:48:12,480
particular say invalid source requests

2744
01:48:12,480 --> 01:48:14,239
like why isn't this just like you know

2745
01:48:14,239 --> 01:48:15,920
addressable for like ordinary ip address

2746
01:48:15,920 --> 01:48:19,520
folder right um so um you know it's pc

2747
01:48:19,520 --> 01:48:21,840
56 right um so like um you know why

2748
01:48:21,840 --> 01:48:23,199
can't we just say behave whatever that

2749
01:48:23,199 --> 01:48:25,199
has to do so um

2750
01:48:25,199 --> 01:48:26,800
you know um

2751
01:48:26,800 --> 01:48:28,800
can we maybe just focus this on topics

2752
01:48:28,800 --> 01:48:30,320
which are distinct to mask if there are

2753
01:48:30,320 --> 01:48:31,119
any

2754
01:48:31,119 --> 01:48:32,639
going to behave those in chain and just

2755
01:48:32,639 --> 01:48:34,000
find those behaviors and for everything

2756
01:48:34,000 --> 01:48:35,840
else just punt to like whatever the 16

2757
01:48:35,840 --> 01:48:38,080
rfc say to do i mean require some

2758
01:48:38,080 --> 01:48:41,840
research um um but you know um but but

2759
01:48:41,840 --> 01:48:43,600
like that seems like better than trying

2760
01:48:43,600 --> 01:48:45,520
to like you know derive a lot from first

2761
01:48:45,520 --> 01:48:48,159
principles again

2762
01:48:52,320 --> 01:48:54,239
uh martin duke google

2763
01:48:54,239 --> 01:48:55,280
uh

2764
01:48:55,280 --> 01:48:57,759
so it

2765
01:48:58,800 --> 01:49:00,960
like i guess i don't understand i mean i

2766
01:49:00,960 --> 01:49:02,320
went back and looked at the draft just

2767
01:49:02,320 --> 01:49:03,760
now and i guess i don't understand the

2768
01:49:03,760 --> 01:49:05,679
case where we should

2769
01:49:05,679 --> 01:49:07,600
where the client could legitimately send

2770
01:49:07,600 --> 01:49:09,040
a packet with an invalid sorcerer

2771
01:49:09,040 --> 01:49:10,719
destination address right because those

2772
01:49:10,719 --> 01:49:12,480
things are specified through the

2773
01:49:12,480 --> 01:49:13,599
capsules

2774
01:49:13,599 --> 01:49:15,760
or the host request

2775
01:49:15,760 --> 01:49:17,920
so right so let's say you do you do a

2776
01:49:17,920 --> 01:49:20,000
capsule negotiation you say

2777
01:49:20,000 --> 01:49:21,440
the other side says you can send from

2778
01:49:21,440 --> 01:49:23,360
this source address and you can send to

2779
01:49:23,360 --> 01:49:24,800
these addresses

2780
01:49:24,800 --> 01:49:25,599
but

2781
01:49:25,599 --> 01:49:28,159
the content of my datagram is a full ip

2782
01:49:28,159 --> 01:49:29,280
packet

2783
01:49:29,280 --> 01:49:31,920
and so i can put

2784
01:49:31,920 --> 01:49:34,960
bad ip addresses in it

2785
01:49:34,960 --> 01:49:36,639
yes clearly it's physically possible for

2786
01:49:36,639 --> 01:49:38,080
them to send everything but that is like

2787
01:49:38,080 --> 01:49:40,080
great

2788
01:49:40,080 --> 01:49:41,760
i violate

2789
01:49:41,760 --> 01:49:44,000
what you told me i could do yeah well

2790
01:49:44,000 --> 01:49:45,040
like

2791
01:49:45,040 --> 01:49:47,119
i mean close the stream like if people

2792
01:49:47,119 --> 01:49:49,679
people are are ignoring what the

2793
01:49:49,679 --> 01:49:52,000
proxy told them to do then i mean i

2794
01:49:52,000 --> 01:49:53,679
think that's

2795
01:49:53,679 --> 01:49:54,880
i mean

2796
01:49:54,880 --> 01:49:56,239
quick is a different layer but in quick

2797
01:49:56,239 --> 01:49:58,800
like any time you you violated the spec

2798
01:49:58,800 --> 01:50:00,800
we just we just kill you and i think

2799
01:50:00,800 --> 01:50:03,040
that seems totally appropriate here i

2800
01:50:03,040 --> 01:50:04,800
mean icmp is a different world where you

2801
01:50:04,800 --> 01:50:06,480
know you don't have these pre-negotiated

2802
01:50:06,480 --> 01:50:10,400
things or the the context for icmp is a

2803
01:50:10,400 --> 01:50:12,480
network a wild west where like you don't

2804
01:50:12,480 --> 01:50:14,719
really know where the pact came from and

2805
01:50:14,719 --> 01:50:16,159
and you don't know what's authorized and

2806
01:50:16,159 --> 01:50:17,760
what's not but like here all this stuff

2807
01:50:17,760 --> 01:50:19,360
is pre-negotiated the client is

2808
01:50:19,360 --> 01:50:20,719
authenticated if the client's

2809
01:50:20,719 --> 01:50:22,159
misbehaving just kill the kill the

2810
01:50:22,159 --> 01:50:24,639
stream if not the connection i mean

2811
01:50:24,639 --> 01:50:27,280
there are certainly other cases where

2812
01:50:27,280 --> 01:50:29,360
you are you know the other side knows

2813
01:50:29,360 --> 01:50:31,119
what you're assigned like an ipsec

2814
01:50:31,119 --> 01:50:33,040
tunnel can assign you something but also

2815
01:50:33,040 --> 01:50:35,840
your router will know what addresses

2816
01:50:35,840 --> 01:50:37,440
you can send from

2817
01:50:37,440 --> 01:50:39,840
um that they've registered so

2818
01:50:39,840 --> 01:50:40,960
there are other cases where you could

2819
01:50:40,960 --> 01:50:44,159
receive icmp errors

2820
01:50:44,880 --> 01:50:46,480
that are equivalent

2821
01:50:46,480 --> 01:50:48,239
fair enough okay i mean like

2822
01:50:48,239 --> 01:50:48,960
my

2823
01:50:48,960 --> 01:50:51,280
my argument for like a general ip case

2824
01:50:51,280 --> 01:50:52,639
may or may not be

2825
01:50:52,639 --> 01:50:54,960
100 correct but i think the point stands

2826
01:50:54,960 --> 01:50:56,719
that i i don't i don't see the downside

2827
01:50:56,719 --> 01:50:59,599
to just killing the stream

2828
01:51:04,719 --> 01:51:06,960
yeah actually if um if the source

2829
01:51:06,960 --> 01:51:08,400
address is wrong there is another option

2830
01:51:08,400 --> 01:51:10,320
which means would you would be glass

2831
01:51:10,320 --> 01:51:12,639
just rewriting it silently without

2832
01:51:12,639 --> 01:51:14,560
letting the endpoint know

2833
01:51:14,560 --> 01:51:16,239
um

2834
01:51:16,239 --> 01:51:17,920
i'm yeah and

2835
01:51:17,920 --> 01:51:20,400
maybe we should just not um specify it

2836
01:51:20,400 --> 01:51:22,320
in a way that this option isn't allowed

2837
01:51:22,320 --> 01:51:24,159
i mean it's not necessary recommendation

2838
01:51:24,159 --> 01:51:26,400
but in some cases it might be useful

2839
01:51:26,400 --> 01:51:27,280
and

2840
01:51:27,280 --> 01:51:28,960
then it would only work if you have a

2841
01:51:28,960 --> 01:51:33,199
single address assigned yeah

2842
01:51:33,520 --> 01:51:36,159
uh and then the um other option the

2843
01:51:36,159 --> 01:51:37,520
other point is when you have the

2844
01:51:37,520 --> 01:51:39,760
destination address that's not allowed

2845
01:51:39,760 --> 01:51:41,280
in that case actually just dropping it

2846
01:51:41,280 --> 01:51:42,960
might be an option because that would be

2847
01:51:42,960 --> 01:51:44,960
the usual behavior you expect right if a

2848
01:51:44,960 --> 01:51:46,560
point if an endpoint is not reachable

2849
01:51:46,560 --> 01:51:49,119
you might not get a reply um however i

2850
01:51:49,119 --> 01:51:51,520
think it would be nice to at least have

2851
01:51:51,520 --> 01:51:53,360
some kind of singing mechanism to tell

2852
01:51:53,360 --> 01:51:54,880
the other endpoint that something went

2853
01:51:54,880 --> 01:51:57,119
wrong

2854
01:51:58,880 --> 01:52:01,119
can i uh relay from jabba

2855
01:52:01,119 --> 01:52:03,440
yes please

2856
01:52:03,440 --> 01:52:06,080
uh philip says inventing a new mechanism

2857
01:52:06,080 --> 01:52:08,000
makes the world especially in regulated

2858
01:52:08,000 --> 01:52:10,719
environments more complicated so icmp

2859
01:52:10,719 --> 01:52:13,520
inside the channel is a good guidance

2860
01:52:13,520 --> 01:52:15,599
still if we want to signal bad behavior

2861
01:52:15,599 --> 01:52:17,599
with respect to the tunnel configuration

2862
01:52:17,599 --> 01:52:19,599
sending the error as a capsule as a

2863
01:52:19,599 --> 01:52:22,719
protocol error makes sense and turn it

2864
01:52:22,719 --> 01:52:24,960
into an icmp on the client side make

2865
01:52:24,960 --> 01:52:27,119
sense

2866
01:52:27,119 --> 01:52:28,400
okay

2867
01:52:28,400 --> 01:52:31,799
that's good feedback

2868
01:52:32,000 --> 01:52:34,159
okay

2869
01:52:34,159 --> 01:52:34,880
so

2870
01:52:34,880 --> 01:52:37,119
much time sympathetic to connection if

2871
01:52:37,119 --> 01:52:38,960
people behave wrong um i think that's a

2872
01:52:38,960 --> 01:52:42,159
mistake in this case because um uh

2873
01:52:42,159 --> 01:52:44,639
imagine the case where you have um the

2874
01:52:44,639 --> 01:52:46,719
version of connect type basically two

2875
01:52:46,719 --> 01:52:49,599
networks together um then you while

2876
01:52:49,599 --> 01:52:51,520
having like any any misbehaving device

2877
01:52:51,520 --> 01:52:52,960
that which i assure you there are many

2878
01:52:52,960 --> 01:52:54,639
potentially quite connection be torn

2879
01:52:54,639 --> 01:52:57,840
down um yeah so that's like um you know

2880
01:52:57,840 --> 01:52:58,960
um

2881
01:52:58,960 --> 01:53:00,880
in particular um you know

2882
01:53:00,880 --> 01:53:02,639
um you know in an imagination where

2883
01:53:02,639 --> 01:53:04,159
you're actually proxying like like a

2884
01:53:04,159 --> 01:53:06,000
customer network

2885
01:53:06,000 --> 01:53:07,280
and you know and now you have like

2886
01:53:07,280 --> 01:53:08,560
thousands of devices that you don't

2887
01:53:08,560 --> 01:53:11,280
control and then one of them delicious

2888
01:53:11,280 --> 01:53:13,280
or non maliciously generates a focus ip

2889
01:53:13,280 --> 01:53:14,560
and the whole thing is torn down that

2890
01:53:14,560 --> 01:53:15,840
just doesn't like it's going to have all

2891
01:53:15,840 --> 01:53:18,239
situations so um i don't think i think

2892
01:53:18,239 --> 01:53:19,599
again this is like some situation where

2893
01:53:19,599 --> 01:53:20,560
we're standing on the shoulders of

2894
01:53:20,560 --> 01:53:22,000
giants and we ought to like steal from

2895
01:53:22,000 --> 01:53:24,080
those giants and we know how to like i

2896
01:53:24,080 --> 01:53:25,679
mean like this this is like building a

2897
01:53:25,679 --> 01:53:27,199
transit network so like she behaves the

2898
01:53:27,199 --> 01:53:28,639
same but that same one so i i don't

2899
01:53:28,639 --> 01:53:30,320
think um i think it's i think you know

2900
01:53:30,320 --> 01:53:31,840
it's one thing to think like if this is

2901
01:53:31,840 --> 01:53:33,119
like the version where it's like the

2902
01:53:33,119 --> 01:53:35,119
customer vpn in which case i could agree

2903
01:53:35,119 --> 01:53:36,639
with like martin but like the customer

2904
01:53:36,639 --> 01:53:39,119
bps are generating bogus things you know

2905
01:53:39,119 --> 01:53:40,560
because he's like going and going to

2906
01:53:40,560 --> 01:53:42,320
euro netflix then maybe you can tear him

2907
01:53:42,320 --> 01:53:44,000
down um but i just don't think i think

2908
01:53:44,000 --> 01:53:46,800
that they're all matter

2909
01:53:50,239 --> 01:53:53,959
i'll concede the point

2910
01:53:56,320 --> 01:53:57,679
okay

2911
01:53:57,679 --> 01:53:59,920
oh

2912
01:54:02,320 --> 01:54:04,080
all right i think we've trained the

2913
01:54:04,080 --> 01:54:04,960
queue

2914
01:54:04,960 --> 01:54:05,840
um

2915
01:54:05,840 --> 01:54:08,000
so those are our two open issues lots of

2916
01:54:08,000 --> 01:54:10,960
discussion thank you everyone um

2917
01:54:10,960 --> 01:54:12,639
the only other thing is if you're

2918
01:54:12,639 --> 01:54:14,239
interested in doing interop and testing

2919
01:54:14,239 --> 01:54:15,920
let us know these are some of the things

2920
01:54:15,920 --> 01:54:17,760
we need to work through

2921
01:54:17,760 --> 01:54:18,800
and

2922
01:54:18,800 --> 01:54:22,520
we'll see you next time

2923
01:54:25,920 --> 01:54:27,360
right

2924
01:54:27,360 --> 01:54:30,080
thank you folks extra thanks to our note

2925
01:54:30,080 --> 01:54:32,480
takers and jabber scribes

2926
01:54:32,480 --> 01:54:34,320
and we have now come to the end of our

2927
01:54:34,320 --> 01:54:37,119
agenda i think we're looking to do some

2928
01:54:37,119 --> 01:54:39,599
extra interop as tommy noted for connect

2929
01:54:39,599 --> 01:54:40,639
ip

2930
01:54:40,639 --> 01:54:41,920
as well as

2931
01:54:41,920 --> 01:54:45,040
folding in some progress on those issues

2932
01:54:45,040 --> 01:54:49,320
and with that thank you all

2933
01:54:50,800 --> 01:54:54,119
thanks everyone

2934
01:55:31,520 --> 01:55:33,840
foreign

2935
01:56:09,599 --> 01:56:12,599
know

2936
01:56:26,880 --> 01:56:29,880
foreign

2937
01:56:47,679 --> 01:56:50,679
yes

