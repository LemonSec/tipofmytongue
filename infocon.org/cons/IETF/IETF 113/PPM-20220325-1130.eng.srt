1
00:00:07,600 --> 00:00:09,200
five o'clock i could tell when it was

2
00:00:09,200 --> 00:00:12,599
one more minute

3
00:00:33,120 --> 00:00:36,120
so

4
00:00:45,920 --> 00:00:48,079
i tried to close the doors to the room

5
00:00:48,079 --> 00:00:51,280
and failed so

6
00:00:56,719 --> 00:00:59,840
well i don't have

7
00:01:00,239 --> 00:01:02,640
don't have any

8
00:01:02,640 --> 00:01:07,159
uh any advice on that

9
00:01:20,720 --> 00:01:23,720
so

10
00:01:46,320 --> 00:01:49,680
well we are officially at start time and

11
00:01:49,680 --> 00:01:51,680
i think nobody will

12
00:01:51,680 --> 00:01:53,600
feel slighted if they miss the first

13
00:01:53,600 --> 00:01:57,759
chair slide so let's get started

14
00:01:57,759 --> 00:02:00,320
hi my name is ben schwartz

15
00:02:00,320 --> 00:02:03,280
together with sam weiler

16
00:02:03,280 --> 00:02:04,719
we are the

17
00:02:04,719 --> 00:02:07,119
chairs of privacy preserving measurement

18
00:02:07,119 --> 00:02:10,000
and this is the very first meeting of

19
00:02:10,000 --> 00:02:12,400
this brand new ietf working group thank

20
00:02:12,400 --> 00:02:15,200
you to joe salloway for being

21
00:02:15,200 --> 00:02:16,319
our

22
00:02:16,319 --> 00:02:18,879
uh our surrogate chair

23
00:02:18,879 --> 00:02:20,319
in vienna

24
00:02:20,319 --> 00:02:23,440
if you have any questions in the room

25
00:02:23,440 --> 00:02:26,000
please take them to joe uh

26
00:02:26,000 --> 00:02:29,120
sam and i are both

27
00:02:29,120 --> 00:02:32,080
on uh in east coast time in the united

28
00:02:32,080 --> 00:02:34,000
states so

29
00:02:34,000 --> 00:02:35,599
uh

30
00:02:35,599 --> 00:02:38,640
uh if we if we say anything that seems a

31
00:02:38,640 --> 00:02:40,400
little silly it's because it's still

32
00:02:40,400 --> 00:02:44,519
pretty early in the morning here

33
00:02:51,440 --> 00:02:54,440
um

34
00:03:15,840 --> 00:03:18,840
uh

35
00:03:21,200 --> 00:03:24,200
so

36
00:03:36,319 --> 00:03:38,400
okay how's it going joe are we uh are we

37
00:03:38,400 --> 00:03:40,080
ready to go in the

38
00:03:40,080 --> 00:03:43,120
i i'm just trying to right now the doors

39
00:03:43,120 --> 00:03:44,720
to the room are open and there's kind of

40
00:03:44,720 --> 00:03:46,480
i think a lot of ambient noise coming in

41
00:03:46,480 --> 00:03:47,280
so

42
00:03:47,280 --> 00:03:49,440
i'm trying to get them closed

43
00:03:49,440 --> 00:03:53,360
so i think we're ready to go i mean

44
00:03:53,360 --> 00:03:54,799
okay

45
00:03:54,799 --> 00:03:57,120
uh well as long as as long as it's not

46
00:03:57,120 --> 00:03:59,280
too distracting in the room maybe we can

47
00:03:59,280 --> 00:04:00,720
we can keep

48
00:04:00,720 --> 00:04:03,280
keep moving

49
00:04:13,120 --> 00:04:15,519
as always please note well that you have

50
00:04:15,519 --> 00:04:18,399
certain obligations and expectations by

51
00:04:18,399 --> 00:04:21,918
participating in an ietf session

52
00:04:21,918 --> 00:04:24,320
uh it's always relaxing to be the last

53
00:04:24,320 --> 00:04:26,160
session at ietf

54
00:04:26,160 --> 00:04:28,960
since most people have had a chance to

55
00:04:28,960 --> 00:04:31,120
really look at this quite a few times

56
00:04:31,120 --> 00:04:33,759
this week but just in case you haven't

57
00:04:33,759 --> 00:04:35,440
this is

58
00:04:35,440 --> 00:04:38,320
legally binding so

59
00:04:38,320 --> 00:04:40,560
please understand what's going on here

60
00:04:40,560 --> 00:04:42,880
and abide by these rules when

61
00:04:42,880 --> 00:04:46,240
participating at the ietf

62
00:04:49,280 --> 00:04:50,160
uh

63
00:04:50,160 --> 00:04:52,160
this is a hybrid meeting if you're in

64
00:04:52,160 --> 00:04:54,720
the room you probably know that you need

65
00:04:54,720 --> 00:04:58,000
to check in with your mobile device in

66
00:04:58,000 --> 00:04:59,280
order to

67
00:04:59,280 --> 00:05:00,160
be

68
00:05:00,160 --> 00:05:02,320
counted as attending this session please

69
00:05:02,320 --> 00:05:04,800
do that

70
00:05:06,639 --> 00:05:09,639
and

71
00:05:10,160 --> 00:05:12,880
there are some resources that we've been

72
00:05:12,880 --> 00:05:16,479
encouraged to share with everybody

73
00:05:17,840 --> 00:05:20,800
and this is our agenda we're starting

74
00:05:20,800 --> 00:05:24,160
off here with a chance for anybody to

75
00:05:24,160 --> 00:05:26,479
to ask questions about the agenda

76
00:05:26,479 --> 00:05:29,120
then we'll we'll have an introduction to

77
00:05:29,120 --> 00:05:31,840
ppm from eric riscorla

78
00:05:31,840 --> 00:05:33,759
that seems like a good way to start off

79
00:05:33,759 --> 00:05:35,600
the very first session of a new working

80
00:05:35,600 --> 00:05:38,600
group

81
00:05:40,720 --> 00:05:43,600
then we'll have some discussion of a

82
00:05:43,600 --> 00:05:45,280
draft that's mentioned in the working

83
00:05:45,280 --> 00:05:46,560
group charter

84
00:05:46,560 --> 00:05:48,320
and some changes that have happened to

85
00:05:48,320 --> 00:05:51,520
that draft since the since the working

86
00:05:51,520 --> 00:05:54,960
group forming buff and also a new draft

87
00:05:54,960 --> 00:05:56,880
that takes a different approach to some

88
00:05:56,880 --> 00:05:59,600
of the problems we're discussing here

89
00:05:59,600 --> 00:06:01,039
and hopefully we'll have enough time

90
00:06:01,039 --> 00:06:02,479
after that to really get through

91
00:06:02,479 --> 00:06:04,479
everybody's questions

92
00:06:04,479 --> 00:06:08,880
and maybe even end ahead of schedule

93
00:06:10,560 --> 00:06:12,639
so that's uh

94
00:06:12,639 --> 00:06:14,479
that's all we've got for

95
00:06:14,479 --> 00:06:17,840
for this meeting anybody wants to

96
00:06:17,840 --> 00:06:19,360
raise questions about this agenda please

97
00:06:19,360 --> 00:06:20,960
speak now otherwise we'll hand it over

98
00:06:20,960 --> 00:06:24,440
to eric rescala

99
00:06:41,840 --> 00:06:43,919
i i am talking next obviously but i did

100
00:06:43,919 --> 00:06:45,440
have a question with the agenda which is

101
00:06:45,440 --> 00:06:46,319
um

102
00:06:46,319 --> 00:06:47,440
uh

103
00:06:47,440 --> 00:06:48,400
uh we probably need to talk about

104
00:06:48,400 --> 00:06:51,360
adoption of the of the um of the draft

105
00:06:51,360 --> 00:06:54,160
because of that this charter item um um

106
00:06:54,160 --> 00:06:56,000
in two ways so um

107
00:06:56,000 --> 00:06:58,479
uh um so just like that should go at the

108
00:06:58,479 --> 00:07:01,520
end of this uh you know at the end of

109
00:07:01,520 --> 00:07:03,360
in the beginning of this some region

110
00:07:03,360 --> 00:07:05,919
changes et cetera

111
00:07:05,919 --> 00:07:09,039
okay i think that we will we will note

112
00:07:09,039 --> 00:07:11,440
that there's a

113
00:07:11,440 --> 00:07:13,599
that we will definitely raise the

114
00:07:13,599 --> 00:07:15,360
question of draft adoption after the

115
00:07:15,360 --> 00:07:17,199
presentations in this during this

116
00:07:17,199 --> 00:07:19,280
session thanks

117
00:07:19,280 --> 00:07:21,440
and uh now

118
00:07:21,440 --> 00:07:23,199
it's yours how do you want to handle

119
00:07:23,199 --> 00:07:25,120
slacks uh i think i just press this

120
00:07:25,120 --> 00:07:27,360
button which i can refined um then i

121
00:07:27,360 --> 00:07:29,680
will be good

122
00:07:29,680 --> 00:07:31,360
or are you now now you have to press a

123
00:07:31,360 --> 00:07:32,160
button

124
00:07:32,160 --> 00:07:34,479
yep

125
00:07:37,360 --> 00:07:39,759
oh uh i see i need to stop sharing

126
00:07:39,759 --> 00:07:41,840
before you can start sharing or i can

127
00:07:41,840 --> 00:07:43,039
just talk to your slides which would be

128
00:07:43,039 --> 00:07:45,840
entertaining

129
00:07:46,080 --> 00:07:47,520
all right uh

130
00:07:47,520 --> 00:07:49,599
however you're right

131
00:07:49,599 --> 00:07:51,199
so for those of for those of you who'd

132
00:07:51,199 --> 00:07:52,240
entered the bath this is actually a

133
00:07:52,240 --> 00:07:54,479
nearly identical presentation so um my

134
00:07:54,479 --> 00:07:56,240
apologies i'm not forgiving it but for

135
00:07:56,240 --> 00:07:57,840
the fact that you had to wake up 20

136
00:07:57,840 --> 00:07:58,960
minutes earlier than you otherwise would

137
00:07:58,960 --> 00:08:00,800
have so if you've already seen this uh

138
00:08:00,800 --> 00:08:02,080
you know you can feel free to go get a

139
00:08:02,080 --> 00:08:04,000
coffee or something um because really

140
00:08:04,000 --> 00:08:07,280
it's just a subset um

141
00:08:07,360 --> 00:08:09,280
uh so um

142
00:08:09,280 --> 00:08:10,800
the sort of order of this presentation

143
00:08:10,800 --> 00:08:13,840
um is first going to talk a little about

144
00:08:13,840 --> 00:08:16,000
measurement scenarios um

145
00:08:16,000 --> 00:08:17,120
namely the things we're actually trying

146
00:08:17,120 --> 00:08:19,280
to accomplish um then i'm going to talk

147
00:08:19,280 --> 00:08:20,800
a little bit about

148
00:08:20,800 --> 00:08:22,240
various methods of nano's measurement

149
00:08:22,240 --> 00:08:23,759
trying to set and context the work we're

150
00:08:23,759 --> 00:08:25,599
doing here

151
00:08:25,599 --> 00:08:27,120
apologies to the star people i didn't

152
00:08:27,120 --> 00:08:28,400
actually cover star in this but they're

153
00:08:28,400 --> 00:08:30,400
going to so that'll be fine um

154
00:08:30,400 --> 00:08:31,440
and then i'll talk something something

155
00:08:31,440 --> 00:08:34,799
about um um um mpc um you know the

156
00:08:34,799 --> 00:08:36,640
specific technologies which um are the

157
00:08:36,640 --> 00:08:37,679
ones that are like larger than the scope

158
00:08:37,679 --> 00:08:40,799
of this working group again um uh you

159
00:08:40,799 --> 00:08:43,599
know this is mostly stuff in draft gpew

160
00:08:43,599 --> 00:08:45,519
um uh

161
00:08:45,519 --> 00:08:47,440
um i'm expecting like you know chris to

162
00:08:47,440 --> 00:08:48,800
cover a lot of the detail but this is

163
00:08:48,800 --> 00:08:50,560
just to give you sort of some situation

164
00:08:50,560 --> 00:08:54,560
um and um and i think we'll stop

165
00:08:54,560 --> 00:08:56,399
um

166
00:08:56,399 --> 00:08:57,200
so

167
00:08:57,200 --> 00:08:58,800
there are a lot number of situations

168
00:08:58,800 --> 00:09:00,160
where it's desirable to learn

169
00:09:00,160 --> 00:09:02,320
information about people um you know

170
00:09:02,320 --> 00:09:05,920
this is um not only true um uh on the

171
00:09:05,920 --> 00:09:09,760
internet but intro generally um you know

172
00:09:09,760 --> 00:09:11,600
various forms of public research um the

173
00:09:11,600 --> 00:09:13,600
census is a good example um you wish to

174
00:09:13,600 --> 00:09:14,959
learn information which is science

175
00:09:14,959 --> 00:09:16,800
sensitive like demographics income you

176
00:09:16,800 --> 00:09:18,160
know medical issues those kinds of

177
00:09:18,160 --> 00:09:19,760
things um you know having a sense for

178
00:09:19,760 --> 00:09:21,040
instance of how many people have had or

179
00:09:21,040 --> 00:09:23,279
having covered is obviously recovered

180
00:09:23,279 --> 00:09:25,120
response um

181
00:09:25,120 --> 00:09:26,640
as an example um then there are

182
00:09:26,640 --> 00:09:28,080
commercial reasons i mean for pi

183
00:09:28,080 --> 00:09:30,399
development um you know if you make a

184
00:09:30,399 --> 00:09:31,279
product you'd like to know which

185
00:09:31,279 --> 00:09:33,040
features people use and don't use in

186
00:09:33,040 --> 00:09:35,040
your product um so you can make them

187
00:09:35,040 --> 00:09:37,519
better or take them out um

188
00:09:37,519 --> 00:09:39,120
uh you like to understand where your

189
00:09:39,120 --> 00:09:41,279
product is failing to work um and this

190
00:09:41,279 --> 00:09:42,560
um this is obviously very important for

191
00:09:42,560 --> 00:09:45,600
consumer products that um you know uh uh

192
00:09:45,600 --> 00:09:48,080
that that you know people use and they

193
00:09:48,080 --> 00:09:50,720
go wrong and so you know if if your body

194
00:09:50,720 --> 00:09:52,320
doesn't work on a website um you know

195
00:09:52,320 --> 00:09:54,080
it's pain to have customers have to have

196
00:09:54,080 --> 00:09:55,200
to report it to you so you'd like to

197
00:09:55,200 --> 00:09:56,800
know it didn't work um and like to

198
00:09:56,800 --> 00:09:58,959
measure where it didn't work um as soon

199
00:09:58,959 --> 00:10:00,399
as you know addresses are most important

200
00:10:00,399 --> 00:10:02,480
um this is a big issue for for

201
00:10:02,480 --> 00:10:05,040
firefighters by the way um um and then

202
00:10:05,040 --> 00:10:06,320
there's a various because behavioral

203
00:10:06,320 --> 00:10:07,839
measurements they're great hyper are you

204
00:10:07,839 --> 00:10:10,079
know are using your product um

205
00:10:10,079 --> 00:10:12,079
uh you know uh so

206
00:10:12,079 --> 00:10:12,959
um

207
00:10:12,959 --> 00:10:14,320
first of all it was discovered websites

208
00:10:14,320 --> 00:10:16,320
which which you know previously existed

209
00:10:16,320 --> 00:10:18,240
so you could like you know people are

210
00:10:18,240 --> 00:10:20,320
now going this website a lot um maybe it

211
00:10:20,320 --> 00:10:21,279
should be i don't know in the search

212
00:10:21,279 --> 00:10:23,440
index um um and which information people

213
00:10:23,440 --> 00:10:25,440
are most interested in um again you know

214
00:10:25,440 --> 00:10:27,200
maybe there should be something which

215
00:10:27,200 --> 00:10:29,040
which would like have a search index or

216
00:10:29,040 --> 00:10:31,360
like to tell them about um proactively

217
00:10:31,360 --> 00:10:34,000
um so it's like you know measurement is

218
00:10:34,000 --> 00:10:35,760
all over the place

219
00:10:35,760 --> 00:10:36,640
um

220
00:10:36,640 --> 00:10:38,160
so that's this information is obviously

221
00:10:38,160 --> 00:10:39,519
super useful but the problem is it's

222
00:10:39,519 --> 00:10:42,000
also in many cases very sensitive um you

223
00:10:42,000 --> 00:10:44,160
know people um so take my example from

224
00:10:44,160 --> 00:10:46,240
earlier um having having it known that

225
00:10:46,240 --> 00:10:47,680
someone had covid or has some other

226
00:10:47,680 --> 00:10:48,640
medical issues that's something

227
00:10:48,640 --> 00:10:50,160
information they may not wish to be

228
00:10:50,160 --> 00:10:52,160
known um you know income sexual

229
00:10:52,160 --> 00:10:54,079
orientation other things are are um

230
00:10:54,079 --> 00:10:55,920
gender identity or things people um you

231
00:10:55,920 --> 00:10:58,320
know an aggregate um you know people

232
00:10:58,320 --> 00:10:59,440
would like to know but individually

233
00:10:59,440 --> 00:11:00,640
people necessarily do not want to

234
00:11:00,640 --> 00:11:03,360
disclose um it turns out that um you

235
00:11:03,360 --> 00:11:05,680
know that even much less sensitive data

236
00:11:05,680 --> 00:11:08,640
um can um or paralyzing data can be very

237
00:11:08,640 --> 00:11:11,120
very revealing um and especially when

238
00:11:11,120 --> 00:11:13,120
you take a lot of less sensitive data

239
00:11:13,120 --> 00:11:14,320
i've got this a square course for a

240
00:11:14,320 --> 00:11:16,160
reason um it's not emphasis it's uh

241
00:11:16,160 --> 00:11:18,880
reminding you the less is a um is a

242
00:11:18,880 --> 00:11:20,800
matter of judgment um

243
00:11:20,800 --> 00:11:22,880
um when you put lessons of data together

244
00:11:22,880 --> 00:11:24,880
um you know you from a lot of people and

245
00:11:24,880 --> 00:11:26,160
so there's this famous incident where

246
00:11:26,160 --> 00:11:27,920
target sort of looked at somebody's um

247
00:11:27,920 --> 00:11:29,360
shopping history he had figured out that

248
00:11:29,360 --> 00:11:32,560
this this girl's pregnant um

249
00:11:32,560 --> 00:11:34,240
um and i i've heard other reports from

250
00:11:34,240 --> 00:11:36,240
people the same thing you know that that

251
00:11:36,240 --> 00:11:38,079
that they'll have just being some life

252
00:11:38,079 --> 00:11:39,040
change and they'll suddenly start

253
00:11:39,040 --> 00:11:41,279
getting advertising that like um than

254
00:11:41,279 --> 00:11:43,680
just space that life change and

255
00:11:43,680 --> 00:11:45,040
uh

256
00:11:45,040 --> 00:11:46,000
so

257
00:11:46,000 --> 00:11:47,920
um you know this i mean this concept is

258
00:11:47,920 --> 00:11:49,279
the foundation behind like modern web

259
00:11:49,279 --> 00:11:50,639
advertising that you should take a bunch

260
00:11:50,639 --> 00:11:51,920
of like small information glue it

261
00:11:51,920 --> 00:11:54,480
together and use it for use it for uh uh

262
00:11:54,480 --> 00:11:56,720
um is for targeting so

263
00:11:56,720 --> 00:11:58,160
um

264
00:11:58,160 --> 00:11:59,680
it is definitely the case that

265
00:11:59,680 --> 00:12:01,040
collecting a lot of information even if

266
00:12:01,040 --> 00:12:02,720
it's like normally not sensitive can be

267
00:12:02,720 --> 00:12:04,880
a real problem um so this tension

268
00:12:04,880 --> 00:12:08,079
between information gathering and um

269
00:12:08,079 --> 00:12:09,200
and

270
00:12:09,200 --> 00:12:11,120
uh the power of information gathering

271
00:12:11,120 --> 00:12:13,600
would you like to have and um and the

272
00:12:13,600 --> 00:12:15,839
privacy problems that that creates

273
00:12:15,839 --> 00:12:16,880
um

274
00:12:16,880 --> 00:12:19,200
the good news however is the tension is

275
00:12:19,200 --> 00:12:21,440
created by technology it's not created

276
00:12:21,440 --> 00:12:23,279
by it's not inherent

277
00:12:23,279 --> 00:12:24,959
because mostly what you want to gather

278
00:12:24,959 --> 00:12:27,279
um i i wanna caveat that there's that's

279
00:12:27,279 --> 00:12:28,639
not always the case so for like web

280
00:12:28,639 --> 00:12:30,720
advertising um for tracking it's super

281
00:12:30,720 --> 00:12:32,639
complicated but um for measurement you

282
00:12:32,639 --> 00:12:34,800
typically wanna measure um aggregates so

283
00:12:34,800 --> 00:12:36,240
you wanna measure like what is the

284
00:12:36,240 --> 00:12:38,000
distribution of people's income i don't

285
00:12:38,000 --> 00:12:39,360
care anybody's individual income out to

286
00:12:39,360 --> 00:12:41,360
the distribution income or distribution

287
00:12:41,360 --> 00:12:43,040
of household expenses you want to know

288
00:12:43,040 --> 00:12:44,639
what fraction of people have had coveted

289
00:12:44,639 --> 00:12:45,600
you don't want to know whether anybody

290
00:12:45,600 --> 00:12:47,519
individually had coveted um in general i

291
00:12:47,519 --> 00:12:48,959
mean obviously there are cases you know

292
00:12:48,959 --> 00:12:49,760
um

293
00:12:49,760 --> 00:12:51,920
like the people in indiana perhaps you

294
00:12:51,920 --> 00:12:52,959
might want to know somebody individually

295
00:12:52,959 --> 00:12:55,680
has copied but um for my my my

296
00:12:55,680 --> 00:12:57,120
comfortable posture in the back in my

297
00:12:57,120 --> 00:12:59,839
room here um you know i don't care um i

298
00:12:59,839 --> 00:13:01,040
don't need to know you know which

299
00:13:01,040 --> 00:13:03,600
individuals uh have covet um

300
00:13:03,600 --> 00:13:05,120
so

301
00:13:05,120 --> 00:13:08,240
um you know um is there like a so um

302
00:13:08,240 --> 00:13:09,839
there's more complicated aggregates so

303
00:13:09,839 --> 00:13:10,959
you might want to measure like the

304
00:13:10,959 --> 00:13:12,240
relationship between income and height

305
00:13:12,240 --> 00:13:14,399
which by the way there is one um uh

306
00:13:14,399 --> 00:13:15,680
taller people on intent have higher

307
00:13:15,680 --> 00:13:17,279
incomes um you know what are the most

308
00:13:17,279 --> 00:13:18,959
popular websites again i don't need to

309
00:13:18,959 --> 00:13:20,560
know websites you know individually

310
00:13:20,560 --> 00:13:23,360
someone went to all i need to know is

311
00:13:23,360 --> 00:13:25,279
you know which one is most popular

312
00:13:25,279 --> 00:13:27,120
it's often uh it's often necessary

313
00:13:27,120 --> 00:13:28,399
however not just to have like gross

314
00:13:28,399 --> 00:13:29,920
aggregates like that but people slice

315
00:13:29,920 --> 00:13:31,760
the data in multiple ways so you say

316
00:13:31,760 --> 00:13:33,920
well you know i want to know what

317
00:13:33,920 --> 00:13:35,120
distribution people's income in

318
00:13:35,120 --> 00:13:36,240
california

319
00:13:36,240 --> 00:13:38,399
or i want to know take two arbitrary

320
00:13:38,399 --> 00:13:40,079
variables and compare them

321
00:13:40,079 --> 00:13:41,440
so i gave this you know income and

322
00:13:41,440 --> 00:13:43,760
height distribution um

323
00:13:43,760 --> 00:13:45,360
example um

324
00:13:45,360 --> 00:13:47,120
but you might want to say well

325
00:13:47,120 --> 00:13:49,120
you know covered rates sliced by age or

326
00:13:49,120 --> 00:13:52,000
by income or by demographics or other

327
00:13:52,000 --> 00:13:55,120
things um so again the key point is that

328
00:13:55,120 --> 00:13:56,639
these individual values like aren't

329
00:13:56,639 --> 00:13:58,320
necessary do this work what's necessary

330
00:13:58,320 --> 00:13:59,600
to be able to work on the data in

331
00:13:59,600 --> 00:14:01,519
various ways um but as long as you can

332
00:14:01,519 --> 00:14:03,040
work on the data the individual values

333
00:14:03,040 --> 00:14:05,040
actually is not particularly helpful um

334
00:14:05,040 --> 00:14:07,600
and um and of course a privacy problem

335
00:14:07,600 --> 00:14:09,120
um and as someone who's done quite a bit

336
00:14:09,120 --> 00:14:10,880
of work i can tell you that like one

337
00:14:10,880 --> 00:14:12,160
actually very rarely looks at data

338
00:14:12,160 --> 00:14:14,720
values individually um once you get past

339
00:14:14,720 --> 00:14:16,000
even size because it's simply not

340
00:14:16,000 --> 00:14:17,199
practical you have you know hundreds of

341
00:14:17,199 --> 00:14:18,399
thousands of data points and like what

342
00:14:18,399 --> 00:14:19,600
one data point doesn't help you very

343
00:14:19,600 --> 00:14:21,760
much um and if you do have and the only

344
00:14:21,760 --> 00:14:22,800
times you really do look at them it's

345
00:14:22,800 --> 00:14:24,160
like there was a giant outliers or

346
00:14:24,160 --> 00:14:25,360
something you're like why is there like

347
00:14:25,360 --> 00:14:27,440
one person who's you know who appears to

348
00:14:27,440 --> 00:14:29,040
have visited like 50 million websites

349
00:14:29,040 --> 00:14:30,240
and like that person's like obviously

350
00:14:30,240 --> 00:14:33,839
not probably that person um

351
00:14:33,920 --> 00:14:35,040
so

352
00:14:35,040 --> 00:14:36,160
there are a variety of different

353
00:14:36,160 --> 00:14:37,120
measurement types that you like to

354
00:14:37,120 --> 00:14:40,000
collect um you know there's sort of

355
00:14:40,000 --> 00:14:42,800
simple statistical metrics aggregates um

356
00:14:42,800 --> 00:14:45,040
like mean media and some histograms and

357
00:14:45,040 --> 00:14:47,199
those kinds of things um

358
00:14:47,199 --> 00:14:49,040
um you know

359
00:14:49,040 --> 00:14:50,160
the typical things you've learned is

360
00:14:50,160 --> 00:14:52,560
stats like one-on-one class um

361
00:14:52,560 --> 00:14:54,480
um and then there's like there's things

362
00:14:54,480 --> 00:14:55,839
like relationships and multiple values

363
00:14:55,839 --> 00:14:57,360
these are all stuck at stats 101 kind of

364
00:14:57,360 --> 00:14:58,959
things um you know correlation

365
00:14:58,959 --> 00:15:01,760
coefficient ordinary squares uh blah

366
00:15:01,760 --> 00:15:04,320
blah um you know um this can go this of

367
00:15:04,320 --> 00:15:05,920
course can get very complicated uh you

368
00:15:05,920 --> 00:15:06,880
know up to like machine learning

369
00:15:06,880 --> 00:15:09,839
algorithms um uh uh nothing we're

370
00:15:09,839 --> 00:15:11,120
talking about today really will let you

371
00:15:11,120 --> 00:15:12,720
do like you know we'll let you do a deep

372
00:15:12,720 --> 00:15:16,079
deep learning um unfortunately um

373
00:15:16,079 --> 00:15:17,199
and then there's a there's a very

374
00:15:17,199 --> 00:15:18,399
specific task but actually quite a

375
00:15:18,399 --> 00:15:20,720
common task which is common strings uh

376
00:15:20,720 --> 00:15:22,800
which is often called heavy hitters and

377
00:15:22,800 --> 00:15:24,720
um the the the problem here is to say

378
00:15:24,720 --> 00:15:27,920
like um what uh you know what strings

379
00:15:27,920 --> 00:15:30,000
are like most common um between people

380
00:15:30,000 --> 00:15:31,440
um and so like that can be a lot of

381
00:15:31,440 --> 00:15:32,959
different things but a common example

382
00:15:32,959 --> 00:15:34,399
that google gave in their in their

383
00:15:34,399 --> 00:15:36,399
report paper is

384
00:15:36,399 --> 00:15:37,759
what um what

385
00:15:37,759 --> 00:15:38,800
um

386
00:15:38,800 --> 00:15:41,040
home pages are most common on people's

387
00:15:41,040 --> 00:15:43,519
people's machines and so um you know you

388
00:15:43,519 --> 00:15:45,120
don't want to know like what you don't

389
00:15:45,120 --> 00:15:47,120
want to know like what home page someone

390
00:15:47,120 --> 00:15:48,639
has like the only person has it but if

391
00:15:48,639 --> 00:15:50,240
like half the population has to let you

392
00:15:50,240 --> 00:15:51,040
know that

393
00:15:51,040 --> 00:15:53,440
um and the nice thing about like about

394
00:15:53,440 --> 00:15:55,279
all these values let's say is like just

395
00:15:55,279 --> 00:15:57,360
to pull back is that once again um they

396
00:15:57,360 --> 00:15:58,560
don't actually depend on individual

397
00:15:58,560 --> 00:16:00,160
values only depend on knowing that this

398
00:16:00,160 --> 00:16:01,920
the desired good um and and this heavy

399
00:16:01,920 --> 00:16:02,880
hitter's problem obviously has a

400
00:16:02,880 --> 00:16:04,000
property and you only want the most

401
00:16:04,000 --> 00:16:05,519
common ones you don't with individuals

402
00:16:05,519 --> 00:16:07,600
um and that helps by the way mitigate

403
00:16:07,600 --> 00:16:08,959
the privacy of these heavy headers

404
00:16:08,959 --> 00:16:10,079
because someone has you know as their

405
00:16:10,079 --> 00:16:12,320
home page they have their own you know

406
00:16:12,320 --> 00:16:14,000
some google doc that they accidentally i

407
00:16:14,000 --> 00:16:16,720
said set as like happens some google doc

408
00:16:16,720 --> 00:16:18,639
which um you know is like is like

409
00:16:18,639 --> 00:16:19,839
sensitive well you don't want to do that

410
00:16:19,839 --> 00:16:22,639
necessarily

411
00:16:22,639 --> 00:16:24,639
so um

412
00:16:24,639 --> 00:16:26,639
so one example use case um is you know

413
00:16:26,639 --> 00:16:29,680
user interests so um you know what kind

414
00:16:29,680 --> 00:16:32,320
of sites are you just visiting um and

415
00:16:32,320 --> 00:16:34,320
again that you know i don't need to know

416
00:16:34,320 --> 00:16:36,240
um and no one and typically until no one

417
00:16:36,240 --> 00:16:38,639
needs to know exactly what sense it is

418
00:16:38,639 --> 00:16:40,480
um

419
00:16:40,480 --> 00:16:42,639
but

420
00:16:43,199 --> 00:16:44,880
you know but you like say okay you know

421
00:16:44,880 --> 00:16:46,800
bucket size by topic so you know how

422
00:16:46,800 --> 00:16:49,040
many people are on medical science um so

423
00:16:49,040 --> 00:16:50,639
um see a bucket like the topic you have

424
00:16:50,639 --> 00:16:52,079
a number of like visits and minutes

425
00:16:52,079 --> 00:16:54,240
people span on each topic um but again

426
00:16:54,240 --> 00:16:55,519
you know even though even if you're not

427
00:16:55,519 --> 00:16:57,199
measuring individual sites the topics

428
00:16:57,199 --> 00:16:58,560
themselves can be sensitive so if

429
00:16:58,560 --> 00:17:00,560
someone is visiting a we know a

430
00:17:00,560 --> 00:17:02,079
website associate particular medical

431
00:17:02,079 --> 00:17:03,680
condition you might worry that they or

432
00:17:03,680 --> 00:17:05,520
someone in the family has that condition

433
00:17:05,520 --> 00:17:07,199
and um

434
00:17:07,199 --> 00:17:08,799
and you know you don't want to have to

435
00:17:08,799 --> 00:17:10,319
collect that information so it's like

436
00:17:10,319 --> 00:17:11,439
one problem statement is like the

437
00:17:11,439 --> 00:17:12,720
distribution of time spent on each type

438
00:17:12,720 --> 00:17:14,240
of site it's obvious to like be able to

439
00:17:14,240 --> 00:17:16,319
generalize this kind of problem um and

440
00:17:16,319 --> 00:17:18,079
anytime you have you know categorical

441
00:17:18,079 --> 00:17:19,760
information from users and you'd like to

442
00:17:19,760 --> 00:17:22,000
collect um you know this category so you

443
00:17:22,000 --> 00:17:24,160
know it's not um you know not just

444
00:17:24,160 --> 00:17:25,760
necessary sites um there's lots of other

445
00:17:25,760 --> 00:17:28,240
things as well um and okay one thing

446
00:17:28,240 --> 00:17:29,039
you're going to hear throughout this

447
00:17:29,039 --> 00:17:31,280
presentation is that

448
00:17:31,280 --> 00:17:32,559
you know these are these are general

449
00:17:32,559 --> 00:17:34,080
small these sort of stylized problems

450
00:17:34,080 --> 00:17:36,320
often can be bootstrapped into like a

451
00:17:36,320 --> 00:17:37,520
lot a lot of different kinds of

452
00:17:37,520 --> 00:17:38,400
measurement can fit these kind of

453
00:17:38,400 --> 00:17:41,200
stylized problems

454
00:17:42,080 --> 00:17:45,200
um another use case um which is um

455
00:17:45,200 --> 00:17:47,120
uh uh

456
00:17:47,120 --> 00:17:49,200
which we see very often is this like web

457
00:17:49,200 --> 00:17:51,760
compatibility problem so um you know uh

458
00:17:51,760 --> 00:17:53,280
the web is really big

459
00:17:53,280 --> 00:17:54,160
and

460
00:17:54,160 --> 00:17:56,320
that websites sometimes will not work on

461
00:17:56,320 --> 00:17:59,760
a given browser and so um you know

462
00:17:59,760 --> 00:18:01,760
voices very often the website works fine

463
00:18:01,760 --> 00:18:03,360
icon and chrome doesn't work on firefox

464
00:18:03,360 --> 00:18:04,799
it works fine on firefox release bills

465
00:18:04,799 --> 00:18:06,960
and work on firefox beta um

466
00:18:06,960 --> 00:18:08,080
and

467
00:18:08,080 --> 00:18:10,240
it it uh users will have support these

468
00:18:10,240 --> 00:18:12,640
problems but often they do not and um

469
00:18:12,640 --> 00:18:14,000
they'll present doesn't support these

470
00:18:14,000 --> 00:18:15,840
problems but often they do not

471
00:18:15,840 --> 00:18:18,400
uh and so you know even we have fairly

472
00:18:18,400 --> 00:18:20,160
gross skin or problems often they don't

473
00:18:20,160 --> 00:18:22,320
get reported and even if they do get

474
00:18:22,320 --> 00:18:25,039
reported um you know the latency of the

475
00:18:25,039 --> 00:18:26,640
system means that like suddenly a lot of

476
00:18:26,640 --> 00:18:27,919
people experience problems before you've

477
00:18:27,919 --> 00:18:29,280
had any chance to fix it

478
00:18:29,280 --> 00:18:31,200
um this is like a really quite large

479
00:18:31,200 --> 00:18:32,799
problem for um

480
00:18:32,799 --> 00:18:33,760
for

481
00:18:33,760 --> 00:18:34,880
for for

482
00:18:34,880 --> 00:18:37,120
browsers like silver and firefox where

483
00:18:37,120 --> 00:18:38,799
sometimes the developers a lot test on

484
00:18:38,799 --> 00:18:40,799
the product um

485
00:18:40,799 --> 00:18:42,960
so the good news is that often you could

486
00:18:42,960 --> 00:18:45,039
detect breakage on the client directly

487
00:18:45,039 --> 00:18:47,440
either directly by

488
00:18:47,440 --> 00:18:49,039
you know the api fails or they try to

489
00:18:49,039 --> 00:18:51,440
use any api which doesn't exist or

490
00:18:51,440 --> 00:18:53,440
because the users like what they call

491
00:18:53,440 --> 00:18:54,960
range clicking trying to reload the page

492
00:18:54,960 --> 00:18:56,799
over and over and over again in order to

493
00:18:56,799 --> 00:18:58,080
see hopefully it will fix which

494
00:18:58,080 --> 00:18:59,600
sometimes it does by the way

495
00:18:59,600 --> 00:19:02,399
um so

496
00:19:04,320 --> 00:19:06,640
a very specific case of this

497
00:19:06,640 --> 00:19:09,280
is that

498
00:19:09,280 --> 00:19:10,799
it wasn't quite well compatibility was a

499
00:19:10,799 --> 00:19:12,240
similar kind of problem which is many

500
00:19:12,240 --> 00:19:13,120
websites do this thing called

501
00:19:13,120 --> 00:19:14,720
fingerprinting where they measure

502
00:19:14,720 --> 00:19:16,400
persistent properties to create a

503
00:19:16,400 --> 00:19:17,600
browser fingerprint so this is an

504
00:19:17,600 --> 00:19:18,720
obvious threat to privacy it's

505
00:19:18,720 --> 00:19:20,480
alternatives and cookies and it's it's

506
00:19:20,480 --> 00:19:22,480
we see it being used sometimes when

507
00:19:22,480 --> 00:19:25,600
cookies aren't available or when the

508
00:19:25,600 --> 00:19:27,360
people don't trust cookies or something

509
00:19:27,360 --> 00:19:28,799
this also is often detectable on the

510
00:19:28,799 --> 00:19:30,559
client

511
00:19:30,559 --> 00:19:31,360
uh

512
00:19:31,360 --> 00:19:32,720
because you know you can see you can see

513
00:19:32,720 --> 00:19:34,880
use of apis it doesn't make any sense so

514
00:19:34,880 --> 00:19:37,760
an example would be like they do webrtc

515
00:19:37,760 --> 00:19:39,360
uh apis but then they don't actually

516
00:19:39,360 --> 00:19:41,360
have much appear connection um so he's

517
00:19:41,360 --> 00:19:43,200
like why are you collecting like you

518
00:19:43,200 --> 00:19:44,240
know the ip address but you're not

519
00:19:44,240 --> 00:19:46,960
clicking here connection so um

520
00:19:46,960 --> 00:19:48,000
it's very hard to learn with these

521
00:19:48,000 --> 00:19:51,280
issues um on a mass scale um

522
00:19:51,280 --> 00:19:53,600
and we and even though modern browsers

523
00:19:53,600 --> 00:19:54,960
have what's called telemetry which would

524
00:19:54,960 --> 00:19:57,520
say they report data back back to

525
00:19:57,520 --> 00:20:00,720
the manufacturer they do it uh

526
00:20:00,720 --> 00:20:03,039
only with basically non-sensitive data

527
00:20:03,039 --> 00:20:04,559
because for obvious reasons we wish to

528
00:20:04,559 --> 00:20:05,840
preserve the user's privacy and we don't

529
00:20:05,840 --> 00:20:06,720
wish to learn whichever that they're

530
00:20:06,720 --> 00:20:07,679
actually on

531
00:20:07,679 --> 00:20:09,120
um

532
00:20:09,120 --> 00:20:10,880
so this is the problem statement here

533
00:20:10,880 --> 00:20:12,240
which like collect the sites where the

534
00:20:12,240 --> 00:20:14,400
client sees issues but do it in a way

535
00:20:14,400 --> 00:20:15,919
where uh actually i've written the palm

536
00:20:15,919 --> 00:20:17,679
team wrong even the problem statement

537
00:20:17,679 --> 00:20:19,120
here is collect the sites on which

538
00:20:19,120 --> 00:20:20,880
clients are aggregate seeing issues i i

539
00:20:20,880 --> 00:20:22,480
don't care you're actually seeing issues

540
00:20:22,480 --> 00:20:25,120
on for the reasons indicated previously

541
00:20:25,120 --> 00:20:27,360
um

542
00:20:27,600 --> 00:20:29,200
so the

543
00:20:29,200 --> 00:20:31,440
the um if you so

544
00:20:31,440 --> 00:20:33,200
pulling back um you know there are

545
00:20:33,200 --> 00:20:36,240
multiple kinds of privacy problems so um

546
00:20:36,240 --> 00:20:39,039
one privacy problem is collecting um

547
00:20:39,039 --> 00:20:41,360
sensitive data which is directly tied to

548
00:20:41,360 --> 00:20:43,280
identifying information

549
00:20:43,280 --> 00:20:44,640
um

550
00:20:44,640 --> 00:20:46,720
so

551
00:20:46,720 --> 00:20:48,960
say so for instance a concrete example

552
00:20:48,960 --> 00:20:52,159
if i just report back uh what um

553
00:20:52,159 --> 00:20:54,080
if you have a program which report back

554
00:20:54,080 --> 00:20:56,080
what website everybody's going to um

555
00:20:56,080 --> 00:20:58,480
even if there's even if it's not tied um

556
00:20:58,480 --> 00:20:59,679
even though there's no like email

557
00:20:59,679 --> 00:21:01,039
address in there the ip address is

558
00:21:01,039 --> 00:21:03,600
enough just to see that right and

559
00:21:03,600 --> 00:21:05,760
so

560
00:21:06,080 --> 00:21:07,360
the um

561
00:21:07,360 --> 00:21:09,200
and so like the the first privacy

562
00:21:09,200 --> 00:21:11,520
problem which is just gathering like

563
00:21:11,520 --> 00:21:13,120
sensitive data but like i usually

564
00:21:13,120 --> 00:21:14,480
identify directly attached to it in some

565
00:21:14,480 --> 00:21:16,000
way

566
00:21:16,000 --> 00:21:19,280
so that's problem one um problem two is

567
00:21:19,280 --> 00:21:20,640
um

568
00:21:20,640 --> 00:21:22,400
is even if you don't have an identifier

569
00:21:22,400 --> 00:21:24,799
collecting sensitive data um along with

570
00:21:24,799 --> 00:21:27,440
some um some non-sensitive appearing

571
00:21:27,440 --> 00:21:29,360
identifying information um so as an

572
00:21:29,360 --> 00:21:32,320
example um the time sweetie in 2014

573
00:21:32,320 --> 00:21:34,480
pointed out that if i just had your zip

574
00:21:34,480 --> 00:21:36,080
code your gender and your date of birth

575
00:21:36,080 --> 00:21:38,240
that's enough to identify like

576
00:21:38,240 --> 00:21:41,200
87 of people in the united states um so

577
00:21:41,200 --> 00:21:42,159
um

578
00:21:42,159 --> 00:21:44,240
so so there's a good example here is say

579
00:21:44,240 --> 00:21:47,120
like look you know um is people's income

580
00:21:47,120 --> 00:21:48,559
individually isn't isn't isn't uh

581
00:21:48,559 --> 00:21:50,159
problematic and like their birthday is

582
00:21:50,159 --> 00:21:51,360
code initials on the same problem when

583
00:21:51,360 --> 00:21:52,640
you glue them all together now i

584
00:21:52,640 --> 00:21:54,320
actually have like everybody's birthday

585
00:21:54,320 --> 00:21:55,679
or not everybody's but a lot of people's

586
00:21:55,679 --> 00:21:56,480
income

587
00:21:56,480 --> 00:21:58,799
individually so um we have to fix both

588
00:21:58,799 --> 00:22:00,559
these problems or we're not going to be

589
00:22:00,559 --> 00:22:03,280
out of the woods

590
00:22:04,159 --> 00:22:06,240
okay so um

591
00:22:06,240 --> 00:22:07,520
the sort of natural thing everybody

592
00:22:07,520 --> 00:22:09,200
thinks to do at this point is say well

593
00:22:09,200 --> 00:22:10,960
what if we just collected these

594
00:22:10,960 --> 00:22:12,000
these are information without any

595
00:22:12,000 --> 00:22:13,200
identifiers

596
00:22:13,200 --> 00:22:15,280
uh so practically speaking um you know

597
00:22:15,280 --> 00:22:16,960
there's like the sort of dumb way to do

598
00:22:16,960 --> 00:22:18,799
this which you say well we'll extract

599
00:22:18,799 --> 00:22:20,320
the identifiers on our side and you can

600
00:22:20,320 --> 00:22:21,840
just promise us we don't do that um

601
00:22:21,840 --> 00:22:23,200
people do that and likes better than

602
00:22:23,200 --> 00:22:26,000
nothing but um you know uh technical

603
00:22:26,000 --> 00:22:27,760
controls are better than policy controls

604
00:22:27,760 --> 00:22:29,280
and so

605
00:22:29,280 --> 00:22:30,960
the the better thing to do is to strip

606
00:22:30,960 --> 00:22:32,400
identifiers on the client side which is

607
00:22:32,400 --> 00:22:33,760
a client side we'll strip out like on a

608
00:22:33,760 --> 00:22:35,679
web browser throughout cookies and email

609
00:22:35,679 --> 00:22:37,440
address and stuff like that um and then

610
00:22:37,440 --> 00:22:38,880
you strip out but that still leaves you

611
00:22:38,880 --> 00:22:40,000
with a lot of networking metadata you

612
00:22:40,000 --> 00:22:41,840
ship that out with a proxy

613
00:22:41,840 --> 00:22:43,600
so um you've got some proxy which is

614
00:22:43,600 --> 00:22:45,039
like not associated or at least not

615
00:22:45,039 --> 00:22:46,640
colluding with the collector the data

616
00:22:46,640 --> 00:22:48,960
collector and you end and encrypt the

617
00:22:48,960 --> 00:22:50,080
report to the data collector so the

618
00:22:50,080 --> 00:22:51,280
proxy can't see the data and the

619
00:22:51,280 --> 00:22:52,880
identifying information and then the

620
00:22:52,880 --> 00:22:54,559
proxy strips off like the metadata

621
00:22:54,559 --> 00:22:56,159
address um

622
00:22:56,159 --> 00:22:57,840
so the idea here is that the data is

623
00:22:57,840 --> 00:22:59,440
never concurrently identified and

624
00:22:59,440 --> 00:23:02,400
available um it's either encrypted or

625
00:23:02,400 --> 00:23:04,960
unidentifiable at the same time um so

626
00:23:04,960 --> 00:23:06,400
there's multiple technical ways to do

627
00:23:06,400 --> 00:23:07,520
this they're like connection logo

628
00:23:07,520 --> 00:23:10,640
proxies like you know ipsec 2018 2017

629
00:23:10,640 --> 00:23:12,640
connect mask there's application proxies

630
00:23:12,640 --> 00:23:14,480
like ohio so this is a great technology

631
00:23:14,480 --> 00:23:16,320
and a technology which um

632
00:23:16,320 --> 00:23:18,080
uh which is very valuable in number of

633
00:23:18,080 --> 00:23:20,720
cases um unfortunately um it is

634
00:23:20,720 --> 00:23:23,200
imperfect um

635
00:23:23,200 --> 00:23:24,559
so uh

636
00:23:24,559 --> 00:23:27,120
good use cases here are um when you have

637
00:23:27,120 --> 00:23:29,919
like semi-sensitive data um so um and

638
00:23:29,919 --> 00:23:32,240
you want to boost the privacy so

639
00:23:32,240 --> 00:23:33,679
uh

640
00:23:33,679 --> 00:23:35,520
you know as i said i mentioned browsers

641
00:23:35,520 --> 00:23:36,880
telemetry now but they just they just

642
00:23:36,880 --> 00:23:38,159
throw away the ip address hopefully at

643
00:23:38,159 --> 00:23:40,640
the other end but um which we try to do

644
00:23:40,640 --> 00:23:41,919
but you know you don't know it's

645
00:23:41,919 --> 00:23:43,440
happening um

646
00:23:43,440 --> 00:23:44,799
also um

647
00:23:44,799 --> 00:23:45,679
uh

648
00:23:45,679 --> 00:23:48,240
individualized values um where you don't

649
00:23:48,240 --> 00:23:49,360
need to dig into it i'll get this in a

650
00:23:49,360 --> 00:23:51,679
minute um and freeform data like json

651
00:23:51,679 --> 00:23:53,440
blobs which is like hard to like do like

652
00:23:53,440 --> 00:23:56,640
crypto on um like calculate crypto on um

653
00:23:56,640 --> 00:23:58,159
also for anything by the way which is an

654
00:23:58,159 --> 00:24:00,240
answer um because um the multivariate

655
00:24:00,240 --> 00:24:01,120
computation stuff i'm going to talk

656
00:24:01,120 --> 00:24:02,559
about a minute it does not work properly

657
00:24:02,559 --> 00:24:03,919
you need to answer it's one way only

658
00:24:03,919 --> 00:24:05,520
it's like dns requests and safe browsing

659
00:24:05,520 --> 00:24:06,880
queries and stuff like that do well with

660
00:24:06,880 --> 00:24:09,039
proxies and do i have like bad kids yeah

661
00:24:09,039 --> 00:24:11,679
good bad use cases fantastic um

662
00:24:11,679 --> 00:24:13,600
um so so so there's a number of cases

663
00:24:13,600 --> 00:24:15,679
where this is really useful um

664
00:24:15,679 --> 00:24:16,640
unfortunately this case is where it

665
00:24:16,640 --> 00:24:19,440
falls down to um

666
00:24:19,440 --> 00:24:21,919
so one place where it falls down is if

667
00:24:21,919 --> 00:24:23,039
you have like what's called high

668
00:24:23,039 --> 00:24:25,760
dimensionality data um so

669
00:24:25,760 --> 00:24:27,360
um say i have data where i have a lot of

670
00:24:27,360 --> 00:24:29,600
variables that i want to like look at

671
00:24:29,600 --> 00:24:32,559
their relationship with them um so

672
00:24:32,559 --> 00:24:34,559
going back to my income height example

673
00:24:34,559 --> 00:24:36,559
for instance um

674
00:24:36,559 --> 00:24:38,159
uh also the case when you want like

675
00:24:38,159 --> 00:24:39,760
subgroups so you say like look i want to

676
00:24:39,760 --> 00:24:41,360
look at only people with this this

677
00:24:41,360 --> 00:24:43,360
nationality um or if i want to do

678
00:24:43,360 --> 00:24:44,720
correlation regression any kind of

679
00:24:44,720 --> 00:24:46,480
status processing and the reason for

680
00:24:46,480 --> 00:24:48,320
this is that

681
00:24:48,320 --> 00:24:50,240
as i was saying earlier the more you

682
00:24:50,240 --> 00:24:52,080
glue together these hot these these like

683
00:24:52,080 --> 00:24:55,360
um low individually low sensitivity but

684
00:24:55,360 --> 00:24:57,200
um high dimensionality data sets the

685
00:24:57,200 --> 00:24:59,279
more you can identify people and so

686
00:24:59,279 --> 00:25:01,200
there's this uh the example i give of

687
00:25:01,200 --> 00:25:03,279
you know birthdays whatever um where is

688
00:25:03,279 --> 00:25:04,720
it perfectly natural i want to ask

689
00:25:04,720 --> 00:25:06,320
what's the correlation between zip code

690
00:25:06,320 --> 00:25:09,039
and income but um but if i give you and

691
00:25:09,039 --> 00:25:10,320
it's probably natural to ask like what's

692
00:25:10,320 --> 00:25:11,279
the relationship between birthday and

693
00:25:11,279 --> 00:25:12,880
income but if i like all those things

694
00:25:12,880 --> 00:25:14,799
together suddenly i have identifying um

695
00:25:14,799 --> 00:25:17,039
and there's this famous um exam other

696
00:25:17,039 --> 00:25:19,279
famous example of the netflix data set

697
00:25:19,279 --> 00:25:20,720
where nariana demonstrated that you

698
00:25:20,720 --> 00:25:22,720
could like look at very very small

699
00:25:22,720 --> 00:25:23,840
information people netflix viewing

700
00:25:23,840 --> 00:25:25,279
histories and figure out how they work

701
00:25:25,279 --> 00:25:27,039
um so

702
00:25:27,039 --> 00:25:28,320
the problem is that if you're just going

703
00:25:28,320 --> 00:25:29,840
to like blanket anonymize you need to

704
00:25:29,840 --> 00:25:30,960
break the data apart you need to take

705
00:25:30,960 --> 00:25:33,039
each value and send it separately

706
00:25:33,039 --> 00:25:34,559
unlinkably but then when you do that you

707
00:25:34,559 --> 00:25:36,640
can't do any of this that's analysis

708
00:25:36,640 --> 00:25:37,919
um

709
00:25:37,919 --> 00:25:39,120
it's also not very good for heavy

710
00:25:39,120 --> 00:25:42,400
hitters um because um if you want to if

711
00:25:42,400 --> 00:25:44,559
you want to know um

712
00:25:44,559 --> 00:25:46,320
um if you want to know only the top end

713
00:25:46,320 --> 00:25:47,919
values um

714
00:25:47,919 --> 00:25:49,600
then um in order to actually in order to

715
00:25:49,600 --> 00:25:50,640
actually figure out which one's the top

716
00:25:50,640 --> 00:25:52,559
end you report them all and so you say

717
00:25:52,559 --> 00:25:54,960
look you know what i'd like to do is not

718
00:25:54,960 --> 00:25:55,679
see

719
00:25:55,679 --> 00:25:57,279
the you know google docs instead of

720
00:25:57,279 --> 00:25:58,480
their home page but actually what

721
00:25:58,480 --> 00:26:00,240
happens is that they always send the

722
00:26:00,240 --> 00:26:02,000
server and you stack rank them um so

723
00:26:02,000 --> 00:26:03,520
some technique for fixing that is is

724
00:26:03,520 --> 00:26:06,159
really helpful um and so i i think just

725
00:26:06,159 --> 00:26:07,919
not not to foreshadow this too much but

726
00:26:07,919 --> 00:26:08,720
um

727
00:26:08,720 --> 00:26:11,360
uh the you know the um

728
00:26:11,360 --> 00:26:13,520
uh uh like that's one thing that star

729
00:26:13,520 --> 00:26:15,120
does um that's a second later um it

730
00:26:15,120 --> 00:26:16,480
tries to like collect the data but but

731
00:26:16,480 --> 00:26:17,520
not see the ones that are high

732
00:26:17,520 --> 00:26:18,880
dimensionality that's something that's

733
00:26:18,880 --> 00:26:21,520
in scope for gpu for for ppm this is

734
00:26:21,520 --> 00:26:22,840
work as well

735
00:26:22,840 --> 00:26:26,159
um so um the good news is like this

736
00:26:26,159 --> 00:26:28,720
situation where cryptography can help us

737
00:26:28,720 --> 00:26:30,320
uh there's been quite a bit of work on

738
00:26:30,320 --> 00:26:31,840
how to address this situation in the

739
00:26:31,840 --> 00:26:34,640
past 10 years

740
00:26:34,640 --> 00:26:36,720
and um we have cryptographic mechanisms

741
00:26:36,720 --> 00:26:38,960
for us in this problem um so the basic

742
00:26:38,960 --> 00:26:41,919
technology it gets is called um

743
00:26:41,919 --> 00:26:44,000
mpc multi-party computation and the idea

744
00:26:44,000 --> 00:26:46,000
is you have two servers and the servers

745
00:26:46,000 --> 00:26:47,919
are um

746
00:26:47,919 --> 00:26:50,320
non-colluding what that means is that

747
00:26:50,320 --> 00:26:52,720
they interact with each other but

748
00:26:52,720 --> 00:26:54,080
they're not working together to reveal

749
00:26:54,080 --> 00:26:56,159
your information

750
00:26:56,159 --> 00:26:57,760
so um

751
00:26:57,760 --> 00:27:00,400
the um basic idea is that each client

752
00:27:00,400 --> 00:27:01,679
takes this data and it splits it up

753
00:27:01,679 --> 00:27:03,679
between two servers and it sends like

754
00:27:03,679 --> 00:27:06,480
signed to server and send to server b um

755
00:27:06,480 --> 00:27:07,360
and

756
00:27:07,360 --> 00:27:09,840
um the servers um basically take all the

757
00:27:09,840 --> 00:27:10,720
data from all the clients and they

758
00:27:10,720 --> 00:27:12,240
individually aggregate it but data is

759
00:27:12,240 --> 00:27:13,440
still encrypted so they're doing it it's

760
00:27:13,440 --> 00:27:15,520
a kind of homomorphic encryption and

761
00:27:15,520 --> 00:27:17,760
they're computing an aggregate over the

762
00:27:17,760 --> 00:27:19,600
encrypted data and then they share take

763
00:27:19,600 --> 00:27:20,720
their address and share them together

764
00:27:20,720 --> 00:27:22,159
and then when the shares can be

765
00:27:22,159 --> 00:27:23,360
reconstructed to produce the actual

766
00:27:23,360 --> 00:27:25,360
value um so

767
00:27:25,360 --> 00:27:27,120
uh just to think about where the

768
00:27:27,120 --> 00:27:28,240
situation is

769
00:27:28,240 --> 00:27:29,360
uh

770
00:27:29,360 --> 00:27:30,960
no the servers individually know who the

771
00:27:30,960 --> 00:27:32,080
clients are but they don't see the

772
00:27:32,080 --> 00:27:35,360
clients individualized values and the um

773
00:27:35,360 --> 00:27:38,159
and the collector um gets to see the the

774
00:27:38,159 --> 00:27:39,520
aggregates but never gets to see any

775
00:27:39,520 --> 00:27:40,880
initial value associated with anybody's

776
00:27:40,880 --> 00:27:43,200
data

777
00:27:43,919 --> 00:27:45,440
so what's

778
00:27:45,440 --> 00:27:46,799
really important to the trust model here

779
00:27:46,799 --> 00:27:49,200
is what the client's requirement is

780
00:27:49,200 --> 00:27:51,279
is that the two servers don't collude if

781
00:27:51,279 --> 00:27:52,320
the service clue they can compute

782
00:27:52,320 --> 00:27:53,840
digital values and it's like totally

783
00:27:53,840 --> 00:27:54,880
over

784
00:27:54,880 --> 00:27:58,320
um um the servers and the servers um in

785
00:27:58,320 --> 00:27:59,919
order to guarantee this um that they

786
00:27:59,919 --> 00:28:01,679
don't accidentally include is in

787
00:28:01,679 --> 00:28:02,960
force various invariants like minimum

788
00:28:02,960 --> 00:28:04,880
bachelors and query limits

789
00:28:04,880 --> 00:28:06,000
um

790
00:28:06,000 --> 00:28:07,120
this is this is the hard privacy

791
00:28:07,120 --> 00:28:08,559
requirement for the client side

792
00:28:08,559 --> 00:28:11,039
the uh collector's requirement

793
00:28:11,039 --> 00:28:12,799
um is actually the doctors don't care if

794
00:28:12,799 --> 00:28:14,640
the servers collude but they care the

795
00:28:14,640 --> 00:28:16,000
servers execute the protocol correctly

796
00:28:16,000 --> 00:28:17,200
and either server can distort the

797
00:28:17,200 --> 00:28:20,960
results so um just to just recap that um

798
00:28:20,960 --> 00:28:23,200
for the client to be safe uh both

799
00:28:23,200 --> 00:28:25,440
servers have to cheat for the for the um

800
00:28:25,440 --> 00:28:27,200
for the cl um

801
00:28:27,200 --> 00:28:28,640
uh sorry the unsafe position of the

802
00:28:28,640 --> 00:28:30,960
cheat for the um for the collector to be

803
00:28:30,960 --> 00:28:34,080
unsafe uh only one service cheat but um

804
00:28:34,080 --> 00:28:35,360
from the from the privacy perspective

805
00:28:35,360 --> 00:28:37,039
that's okay um because it because

806
00:28:37,039 --> 00:28:38,399
because once every teacher can't

807
00:28:38,399 --> 00:28:40,480
actually break the privacy in variance

808
00:28:40,480 --> 00:28:42,960
um this is by the way difficult um both

809
00:28:42,960 --> 00:28:44,159
these properties are really difficult to

810
00:28:44,159 --> 00:28:46,240
verify um especially collisions which

811
00:28:46,240 --> 00:28:48,880
happen with the side channels um

812
00:28:48,880 --> 00:28:51,520
uh but point in time audits are sort of

813
00:28:51,520 --> 00:28:53,520
sort of the state-of-the-art um and

814
00:28:53,520 --> 00:28:55,200
again we're talking at um you know

815
00:28:55,200 --> 00:28:56,840
trying out data where

816
00:28:56,840 --> 00:28:59,120
um sorry i'm also trying to thought

817
00:28:59,120 --> 00:29:01,600
there um it's five in the morning for me

818
00:29:01,600 --> 00:29:02,640
um

819
00:29:02,640 --> 00:29:04,799
so anyway this um uh this is not not

820
00:29:04,799 --> 00:29:06,240
necessarily straightforward to verify

821
00:29:06,240 --> 00:29:07,919
but um you know generally the idea is

822
00:29:07,919 --> 00:29:10,159
you can keep piling on more servers and

823
00:29:10,159 --> 00:29:11,520
at some point the clients asked so i

824
00:29:11,520 --> 00:29:12,320
really believe all these people are

825
00:29:12,320 --> 00:29:14,559
going to cheat

826
00:29:14,559 --> 00:29:16,240
um so i'm going to like very very

827
00:29:16,240 --> 00:29:17,760
briefly let's get some of the

828
00:29:17,760 --> 00:29:19,120
photography just to give you a flavor of

829
00:29:19,120 --> 00:29:22,240
it um the uh

830
00:29:22,240 --> 00:29:25,600
um the sort of main protocol here uh

831
00:29:25,600 --> 00:29:28,720
is something called prio um i'm sorry

832
00:29:28,720 --> 00:29:29,840
the initial the first one of these are

833
00:29:29,840 --> 00:29:31,520
like really is viable um and this is

834
00:29:31,520 --> 00:29:33,039
useful for computing like simple numeric

835
00:29:33,039 --> 00:29:34,880
aggregates um

836
00:29:34,880 --> 00:29:36,799
so the basic idea here um and sorry

837
00:29:36,799 --> 00:29:38,559
about a little bit math but um is each

838
00:29:38,559 --> 00:29:40,640
client has like an initial value um x of

839
00:29:40,640 --> 00:29:42,080
i um

840
00:29:42,080 --> 00:29:43,679
uh

841
00:29:43,679 --> 00:29:45,520
um so like you know say it's like my

842
00:29:45,520 --> 00:29:47,600
height or my income is like that and and

843
00:29:47,600 --> 00:29:49,360
i want to give it and i want to get the

844
00:29:49,360 --> 00:29:51,919
i get over that so um

845
00:29:51,919 --> 00:29:53,039
this is like all like high school math

846
00:29:53,039 --> 00:29:54,480
which is like very nice actually it's

847
00:29:54,480 --> 00:29:56,880
like elementary school math so um i

848
00:29:56,880 --> 00:29:59,279
generate some random value um

849
00:29:59,279 --> 00:30:02,240
r sub i um in a finite field p um and i

850
00:30:02,240 --> 00:30:05,600
send server one um basically my share

851
00:30:05,600 --> 00:30:09,120
minus r sub i uh modulo p um uh so again

852
00:30:09,120 --> 00:30:10,320
that's like that's like the elementary

853
00:30:10,320 --> 00:30:12,240
school math part of it um and i send

854
00:30:12,240 --> 00:30:14,720
cert and i send server two r sub i um

855
00:30:14,720 --> 00:30:15,840
and you should be able to treat yourself

856
00:30:15,840 --> 00:30:17,919
pretty easily if i take x of i minus r

857
00:30:17,919 --> 00:30:20,720
sub i and i add r sub i then um i get x

858
00:30:20,720 --> 00:30:22,640
of i back um so this information

859
00:30:22,640 --> 00:30:24,399
theoretically fine um and each server

860
00:30:24,399 --> 00:30:26,080
adds up the shares

861
00:30:26,080 --> 00:30:28,399
um so the server server one takes up all

862
00:30:28,399 --> 00:30:30,320
the x sub eyes minus the workshop buys

863
00:30:30,320 --> 00:30:32,000
and server twos takes all the r supplies

864
00:30:32,000 --> 00:30:34,720
right and so now if you take all those

865
00:30:34,720 --> 00:30:36,320
you add them up um you know

866
00:30:36,320 --> 00:30:38,000
congratulations addition is commutative

867
00:30:38,000 --> 00:30:39,760
and so you just cross out basically all

868
00:30:39,760 --> 00:30:41,200
the minus all the r sub eyes and the

869
00:30:41,200 --> 00:30:43,039
minus r supplies and you get basically

870
00:30:43,039 --> 00:30:45,200
the sub x of s right so what we've done

871
00:30:45,200 --> 00:30:46,559
is we created a situation where neither

872
00:30:46,559 --> 00:30:50,000
serves all the data um but uh but you

873
00:30:50,000 --> 00:30:52,159
have the aggregate anyway

874
00:30:52,159 --> 00:30:53,840
um so

875
00:30:53,840 --> 00:30:56,240
uh there is um i say this is also

876
00:30:56,240 --> 00:30:57,600
elementary school math they not only

877
00:30:57,600 --> 00:30:59,279
just going off part of this is what

878
00:30:59,279 --> 00:31:02,559
happens if the clients lie um and um so

879
00:31:02,559 --> 00:31:03,840
the zero knowledge proof indicating the

880
00:31:03,840 --> 00:31:06,320
clients didn't say that i you know i the

881
00:31:06,320 --> 00:31:09,519
my i member again meters tall um

882
00:31:09,519 --> 00:31:12,080
um the good news is that um even this

883
00:31:12,080 --> 00:31:14,399
like really really kind of like dumb

884
00:31:14,399 --> 00:31:16,559
encoding um or

885
00:31:16,559 --> 00:31:18,080
or you know very limited system compute

886
00:31:18,080 --> 00:31:20,240
enormous number of things so um just to

887
00:31:20,240 --> 00:31:22,000
give you a flavor of this arithmetic

888
00:31:22,000 --> 00:31:23,760
mean is like easy to compute once you

889
00:31:23,760 --> 00:31:25,600
have some you divide some by by

890
00:31:25,600 --> 00:31:27,760
cardinality that's like obvious um you

891
00:31:27,760 --> 00:31:30,240
compute product by working in log space

892
00:31:30,240 --> 00:31:32,720
instead of working in uh by working in

893
00:31:32,720 --> 00:31:34,960
linear space um this by the way is like

894
00:31:34,960 --> 00:31:36,559
how slide rules work um if you remember

895
00:31:36,559 --> 00:31:38,399
sled rules um you could be a geometric

896
00:31:38,399 --> 00:31:39,760
mean for product in earth it's the same

897
00:31:39,760 --> 00:31:41,200
way as the arithmetic mean you could be

898
00:31:41,200 --> 00:31:42,480
variants of standard deviation the same

899
00:31:42,480 --> 00:31:45,360
way um you can do bullion bore brilliant

900
00:31:45,360 --> 00:31:47,760
or and min max or even ordinarily

901
00:31:47,760 --> 00:31:48,960
squares and just about finding the

902
00:31:48,960 --> 00:31:51,200
writing coding for the data um so that's

903
00:31:51,200 --> 00:31:52,320
really really nice because like you've

904
00:31:52,320 --> 00:31:53,760
got the same basic structure and you

905
00:31:53,760 --> 00:31:54,960
just basically say oh now i'm encoding

906
00:31:54,960 --> 00:31:56,240
the data in a new way and i can give you

907
00:31:56,240 --> 00:31:58,559
new things

908
00:31:59,200 --> 00:32:01,760
um right so as i was saying we have this

909
00:32:01,760 --> 00:32:03,360
problem with bogus data um there are two

910
00:32:03,360 --> 00:32:06,480
kinds of bogus data um one of which is

911
00:32:06,480 --> 00:32:08,960
um plausible with false data so i say

912
00:32:08,960 --> 00:32:10,720
look i'm really 175 centimeters tall but

913
00:32:10,720 --> 00:32:12,799
i stay 180 centimeters tall this is a

914
00:32:12,799 --> 00:32:14,799
problem any surveying technique has this

915
00:32:14,799 --> 00:32:16,240
problem

916
00:32:16,240 --> 00:32:18,320
uh people lie and

917
00:32:18,320 --> 00:32:19,279
you know if you're gonna trust them

918
00:32:19,279 --> 00:32:21,600
you're gonna trust them um the solution

919
00:32:21,600 --> 00:32:23,039
to this as with any surveying technique

920
00:32:23,039 --> 00:32:24,320
is you live with some of the noisy data

921
00:32:24,320 --> 00:32:26,159
and you hope that the lying is unbiased

922
00:32:26,159 --> 00:32:27,440
uh by the way height it probably isn't

923
00:32:27,440 --> 00:32:28,480
people probably said taller than they

924
00:32:28,480 --> 00:32:30,799
are um

925
00:32:30,799 --> 00:32:32,640
the um and then there's the question of

926
00:32:32,640 --> 00:32:34,720
completely ridiculous data so i say i'm

927
00:32:34,720 --> 00:32:36,559
a kilometer tall well i'm not a

928
00:32:36,559 --> 00:32:37,760
kilometer tall you know nobody's

929
00:32:37,760 --> 00:32:39,519
kilometer tall um

930
00:32:39,519 --> 00:32:41,279
or worse maybe they say i'm negative one

931
00:32:41,279 --> 00:32:42,880
kilometer tall which is like if you

932
00:32:42,880 --> 00:32:44,240
can't see the individual values what do

933
00:32:44,240 --> 00:32:46,480
you know so in the standard system what

934
00:32:46,480 --> 00:32:48,640
you do is you take the data that comes

935
00:32:48,640 --> 00:32:50,080
in and you look at the data and you say

936
00:32:50,080 --> 00:32:51,600
like well i'm not going to accept

937
00:32:51,600 --> 00:32:53,440
anybody who says they're called at all

938
00:32:53,440 --> 00:32:55,200
i'll just let it out

939
00:32:55,200 --> 00:32:56,399
but obviously prio you can't do this

940
00:32:56,399 --> 00:32:58,159
data is encrypted so the solution to

941
00:32:58,159 --> 00:32:59,679
this and this is the fancy part is each

942
00:32:59,679 --> 00:33:00,960
submission comes with a zero knowledge

943
00:33:00,960 --> 00:33:03,120
proof of validity so in advance you say

944
00:33:03,120 --> 00:33:04,960
i'm only going to accept people who say

945
00:33:04,960 --> 00:33:06,320
they're between 100 centimeters tall and

946
00:33:06,320 --> 00:33:08,320
200 centimeters tall and

947
00:33:08,320 --> 00:33:09,279
you know maybe there's someone who's

948
00:33:09,279 --> 00:33:10,799
more than 200 centimeters tall um which

949
00:33:10,799 --> 00:33:12,799
i think there is um but we'll just say

950
00:33:12,799 --> 00:33:13,840
look you know we'll call them 200

951
00:33:13,840 --> 00:33:16,399
centimeters it'll be okay um

952
00:33:16,399 --> 00:33:20,320
and similarly below 10 meters um so

953
00:33:20,320 --> 00:33:23,039
um the um and the zero knowledge proofs

954
00:33:23,039 --> 00:33:24,080
just prove that the proof of the

955
00:33:24,080 --> 00:33:25,600
encoding is that this is correctly

956
00:33:25,600 --> 00:33:27,279
encoded um

957
00:33:27,279 --> 00:33:29,200
and uh which with math that i will not

958
00:33:29,200 --> 00:33:30,399
attempt to explain that perhaps chris

959
00:33:30,399 --> 00:33:32,720
patton can um the uh servers work

960
00:33:32,720 --> 00:33:34,000
together to validate the proof because

961
00:33:34,000 --> 00:33:35,679
individually they shouldn't be able

962
00:33:35,679 --> 00:33:37,519
always real information the data and you

963
00:33:37,519 --> 00:33:38,720
only aggregate submissions with valid

964
00:33:38,720 --> 00:33:40,240
proofs so there's basically filtering

965
00:33:40,240 --> 00:33:42,960
stages that haven't shown

966
00:33:43,120 --> 00:33:44,559
um

967
00:33:44,559 --> 00:33:46,720
so you can also collect

968
00:33:46,720 --> 00:33:47,600
you know user interest with this

969
00:33:47,600 --> 00:33:50,640
technology every user gets a bucket and

970
00:33:50,640 --> 00:33:52,240
um sorry every user interest gets a

971
00:33:52,240 --> 00:33:53,600
bucket so if i have 100 user interest

972
00:33:53,600 --> 00:33:55,279
100 buckets and the user reports the

973
00:33:55,279 --> 00:33:57,679
amount of time spent in each bucket um

974
00:33:57,679 --> 00:34:00,320
you know including zeros by the way um

975
00:34:00,320 --> 00:34:01,679
so if i didn't spend any time on car

976
00:34:01,679 --> 00:34:03,360
websites it still has to say zero so

977
00:34:03,360 --> 00:34:05,840
let's say i wasn't on a car site um and

978
00:34:05,840 --> 00:34:06,960
you just pre to sum them up so it's like

979
00:34:06,960 --> 00:34:07,679
really straightforward you get

980
00:34:07,679 --> 00:34:09,679
histograms as beautiful right um and the

981
00:34:09,679 --> 00:34:11,679
servers again only the aggregates not

982
00:34:11,679 --> 00:34:14,399
the values which category um

983
00:34:14,399 --> 00:34:15,520
uh

984
00:34:15,520 --> 00:34:17,599
this is all fine um as i started on this

985
00:34:17,599 --> 00:34:19,359
footnote if you also report on times

986
00:34:19,359 --> 00:34:21,040
squared you can be standard deviation uh

987
00:34:21,040 --> 00:34:22,159
because i really need to compute

988
00:34:22,159 --> 00:34:23,918
generation um

989
00:34:23,918 --> 00:34:25,599
so that's all

990
00:34:25,599 --> 00:34:26,879
sort of okay

991
00:34:26,879 --> 00:34:29,359
except that um

992
00:34:29,359 --> 00:34:31,359
this is all sort of okay except that it

993
00:34:31,359 --> 00:34:32,719
doesn't scale well so if there's a

994
00:34:32,719 --> 00:34:33,918
hundred user interest i have to report a

995
00:34:33,918 --> 00:34:35,280
hundred integers but there's a million

996
00:34:35,280 --> 00:34:37,440
users that report a million integers and

997
00:34:37,440 --> 00:34:39,280
the intuition for this is that if there

998
00:34:39,280 --> 00:34:41,040
are integers for which i have no value

999
00:34:41,040 --> 00:34:42,800
at all and i just report

1000
00:34:42,800 --> 00:34:44,000
nothing

1001
00:34:44,000 --> 00:34:45,359
it's fine you can certainly conclude

1002
00:34:45,359 --> 00:34:46,719
there was no value but now you know i

1003
00:34:46,719 --> 00:34:48,079
wasn't interested and you can assume

1004
00:34:48,079 --> 00:34:49,599
that anything i did report a number on i

1005
00:34:49,599 --> 00:34:51,119
was interested in so you have to report

1006
00:34:51,119 --> 00:34:52,399
all the value so it doesn't scale well

1007
00:34:52,399 --> 00:34:54,639
at all

1008
00:34:54,639 --> 00:34:56,639
um so there's this uh

1009
00:34:56,639 --> 00:34:57,839
um

1010
00:34:57,839 --> 00:34:58,800
uh

1011
00:34:58,800 --> 00:35:01,359
um there's this new technology even

1012
00:35:01,359 --> 00:35:03,520
newer um called um poplar i don't know

1013
00:35:03,520 --> 00:35:04,640
why i still have it called hits here i

1014
00:35:04,640 --> 00:35:06,880
thought i replaced all those um uh but

1015
00:35:06,880 --> 00:35:09,119
same people's prio um that basically

1016
00:35:09,119 --> 00:35:11,839
works by collecting strings so

1017
00:35:11,839 --> 00:35:12,720
um

1018
00:35:12,720 --> 00:35:14,240
instead instead of having so you could

1019
00:35:14,240 --> 00:35:15,760
do the same thing you basically say each

1020
00:35:15,760 --> 00:35:17,839
interest is mapped to a string um you

1021
00:35:17,839 --> 00:35:19,599
can even do a url um and each client

1022
00:35:19,599 --> 00:35:20,720
reports the string that's like most

1023
00:35:20,720 --> 00:35:22,160
interested in the top five strings

1024
00:35:22,160 --> 00:35:24,480
you're most interested in right um and

1025
00:35:24,480 --> 00:35:25,920
then the servers can join and the

1026
00:35:25,920 --> 00:35:27,280
servers can generally figure out which

1027
00:35:27,280 --> 00:35:29,920
ones are most popular um this is really

1028
00:35:29,920 --> 00:35:32,320
cool um for like cs people um the way

1029
00:35:32,320 --> 00:35:34,240
this works is that you can basically

1030
00:35:34,240 --> 00:35:37,040
take the set of submissions and um and

1031
00:35:37,040 --> 00:35:38,400
because because things are unknown you

1032
00:35:38,400 --> 00:35:39,440
got to figure out what things are most

1033
00:35:39,440 --> 00:35:41,680
popular and so you're able to ask this

1034
00:35:41,680 --> 00:35:44,160
question how many strings have prefix p

1035
00:35:44,160 --> 00:35:46,160
and how many pieces of psp with a zero

1036
00:35:46,160 --> 00:35:47,200
on the end and versus one on the end

1037
00:35:47,200 --> 00:35:48,560
right and so now you have a binary tree

1038
00:35:48,560 --> 00:35:49,599
and you can find your search on the tree

1039
00:35:49,599 --> 00:35:51,760
and find the most popular things um

1040
00:35:51,760 --> 00:35:53,920
this is like a very clever intuition um

1041
00:35:53,920 --> 00:35:55,359
and very very powerful schemes lets you

1042
00:35:55,359 --> 00:35:56,800
collect you know the most popular urls

1043
00:35:56,800 --> 00:35:58,880
for instance um or as i say basically

1044
00:35:58,880 --> 00:36:01,440
any open end stream

1045
00:36:01,440 --> 00:36:02,320
um

1046
00:36:02,320 --> 00:36:04,400
so you know how would i imagine using

1047
00:36:04,400 --> 00:36:06,640
this um looks like a real use case um

1048
00:36:06,640 --> 00:36:08,240
every time that every time the site is

1049
00:36:08,240 --> 00:36:09,599
broken the client creates a report for

1050
00:36:09,599 --> 00:36:11,200
each site which is broken and then you

1051
00:36:11,200 --> 00:36:13,040
use on this technology to turn the top

1052
00:36:13,040 --> 00:36:16,480
sites um and um

1053
00:36:16,480 --> 00:36:18,800
um and and and so then you go and you

1054
00:36:18,800 --> 00:36:20,000
try to investigate them right and so the

1055
00:36:20,000 --> 00:36:21,599
nice thing is the servers um

1056
00:36:21,599 --> 00:36:22,960
collectively only are the most important

1057
00:36:22,960 --> 00:36:24,240
sites they don't want to report them and

1058
00:36:24,240 --> 00:36:25,119
they don't learn like the low

1059
00:36:25,119 --> 00:36:26,960
cardinality that you don't care about um

1060
00:36:26,960 --> 00:36:28,079
because as i said this is arranged in a

1061
00:36:28,079 --> 00:36:29,599
binary tree and so you start and you say

1062
00:36:29,599 --> 00:36:31,040
like here all the reports and then the

1063
00:36:31,040 --> 00:36:32,480
left side of the tree like or you know

1064
00:36:32,480 --> 00:36:33,520
half of them but at some point you get

1065
00:36:33,520 --> 00:36:34,800
down and say there's only 50 reports to

1066
00:36:34,800 --> 00:36:35,839
the left side of the tree and you're

1067
00:36:35,839 --> 00:36:37,760
still like way way way at the top of the

1068
00:36:37,760 --> 00:36:39,839
url because you know because most of the

1069
00:36:39,839 --> 00:36:41,280
urls are still you still haven't seen

1070
00:36:41,280 --> 00:36:42,800
the x you're only going down one one but

1071
00:36:42,800 --> 00:36:45,200
at a time

1072
00:36:45,200 --> 00:36:47,359
um

1073
00:36:47,359 --> 00:36:50,079
okay so um

1074
00:36:50,079 --> 00:36:52,960
um the second piece of this puzzle is

1075
00:36:52,960 --> 00:36:55,599
that um sometimes you want to as i said

1076
00:36:55,599 --> 00:36:57,680
dig into the data right so so i just

1077
00:36:57,680 --> 00:37:00,000
described like a sort of like uh one-way

1078
00:37:00,000 --> 00:37:01,200
pre-program kind of measurement but you

1079
00:37:01,200 --> 00:37:02,400
can also have measurement where you want

1080
00:37:02,400 --> 00:37:04,000
to get into the data later so you say

1081
00:37:04,000 --> 00:37:05,920
look you know i have a distribution of

1082
00:37:05,920 --> 00:37:07,440
income but i really want to look at you

1083
00:37:07,440 --> 00:37:08,560
know

1084
00:37:08,560 --> 00:37:10,640
birthdays kind of whatever right and so

1085
00:37:10,640 --> 00:37:11,359
um

1086
00:37:11,359 --> 00:37:14,000
the um

1087
00:37:14,000 --> 00:37:15,680
and so the way you do this is you put

1088
00:37:15,680 --> 00:37:17,920
the demographic data um in the

1089
00:37:17,920 --> 00:37:19,359
submission itself and that basically

1090
00:37:19,359 --> 00:37:20,800
gets carried along that's unencrypted

1091
00:37:20,800 --> 00:37:21,760
and that's because that's basically

1092
00:37:21,760 --> 00:37:23,040
nonsense if you don't worry about it so

1093
00:37:23,040 --> 00:37:25,520
much um and then the servers can say

1094
00:37:25,520 --> 00:37:27,839
okay slice the data only only only ask

1095
00:37:27,839 --> 00:37:30,960
for the aggregates over um

1096
00:37:30,960 --> 00:37:32,560
uh you know i only asked for addresses

1097
00:37:32,560 --> 00:37:33,760
with a set of birthdays or the set zip

1098
00:37:33,760 --> 00:37:36,000
codes right um so this is a powerful

1099
00:37:36,000 --> 00:37:38,000
technology um the

1100
00:37:38,000 --> 00:37:40,079
the challenge some challenge in that um

1101
00:37:40,079 --> 00:37:41,680
if you if i allow you to make as many

1102
00:37:41,680 --> 00:37:43,040
queries as you want obviously you can

1103
00:37:43,040 --> 00:37:45,119
slice it down to individuals data values

1104
00:37:45,119 --> 00:37:46,480
and even if i say that you can only

1105
00:37:46,480 --> 00:37:48,160
compete you can only ask for like sets

1106
00:37:48,160 --> 00:37:50,079
of those more than a thousand um what i

1107
00:37:50,079 --> 00:37:52,320
can do is i can create like two sets one

1108
00:37:52,320 --> 00:37:54,640
with a given user one without um and

1109
00:37:54,640 --> 00:37:57,040
then i can pull out i i's value um so

1110
00:37:57,040 --> 00:37:58,240
there's a bunch of possible defenses

1111
00:37:58,240 --> 00:38:00,240
here um which probably all used together

1112
00:38:00,240 --> 00:38:02,240
um minimum batch size anti-replay so you

1113
00:38:02,240 --> 00:38:03,440
don't can't ask this question the same

1114
00:38:03,440 --> 00:38:05,520
data multiple times or too many times um

1115
00:38:05,520 --> 00:38:07,520
uh randomization noise for differential

1116
00:38:07,520 --> 00:38:09,200
privacy those kinds of things um so i

1117
00:38:09,200 --> 00:38:10,560
know those are all let's go for each of

1118
00:38:10,560 --> 00:38:13,520
these proposals

1119
00:38:13,680 --> 00:38:16,640
um so um as i said that there's a main

1120
00:38:16,640 --> 00:38:19,119
document um here um and the one which is

1121
00:38:19,119 --> 00:38:21,119
i believe in the charter specifically is

1122
00:38:21,119 --> 00:38:24,240
this some draft p gp ew print ppm which

1123
00:38:24,240 --> 00:38:25,359
i guess i have their own version number

1124
00:38:25,359 --> 00:38:27,359
here which is like a generic module

1125
00:38:27,359 --> 00:38:28,880
protocol for like any of these mpc

1126
00:38:28,880 --> 00:38:30,160
flavor

1127
00:38:30,160 --> 00:38:31,119
schemes

1128
00:38:31,119 --> 00:38:33,920
initially implements um uh prio and

1129
00:38:33,920 --> 00:38:35,760
poplar um which i i really thought i did

1130
00:38:35,760 --> 00:38:36,800
search and replacing these clients but

1131
00:38:36,800 --> 00:38:38,880
maybe i forgot to rerun them um

1132
00:38:38,880 --> 00:38:40,880
um poplar is the new name for this thing

1133
00:38:40,880 --> 00:38:42,800
we call hits um

1134
00:38:42,800 --> 00:38:45,200
um and it's compatible basically um a

1135
00:38:45,200 --> 00:38:46,720
plugable systems is compatible with like

1136
00:38:46,720 --> 00:38:48,160
anything that can be fit in this npc

1137
00:38:48,160 --> 00:38:49,920
flavor um and to give you a concrete

1138
00:38:49,920 --> 00:38:52,640
example of that the um uh the proposal

1139
00:38:52,640 --> 00:38:54,480
facebook and mozilla worked out for um

1140
00:38:54,480 --> 00:38:56,480
in our approval private um attribution

1141
00:38:56,480 --> 00:38:58,000
also if it's reasonably waterless

1142
00:38:58,000 --> 00:38:59,520
framework um

1143
00:38:59,520 --> 00:39:01,520
so it's built on top of like web service

1144
00:39:01,520 --> 00:39:03,040
infrastructure so it's easy easy to

1145
00:39:03,040 --> 00:39:05,280
implement with existing stuff um

1146
00:39:05,280 --> 00:39:07,839
et cetera et cetera the usual thing um

1147
00:39:07,839 --> 00:39:09,359
and just check very very briefly you

1148
00:39:09,359 --> 00:39:10,400
know here's like what the architecture

1149
00:39:10,400 --> 00:39:11,440
looks like

1150
00:39:11,440 --> 00:39:13,119
like i said before you have these

1151
00:39:13,119 --> 00:39:14,640
clients each client sends their shares

1152
00:39:14,640 --> 00:39:16,000
and they have this these back and forth

1153
00:39:16,000 --> 00:39:17,440
um aggregates competition and it goes to

1154
00:39:17,440 --> 00:39:18,880
the collector um and i'm not gonna

1155
00:39:18,880 --> 00:39:20,079
bother to like really kind of like go

1156
00:39:20,079 --> 00:39:21,680
into this at all because like i know pat

1157
00:39:21,680 --> 00:39:25,040
has plenty of material on it um

1158
00:39:25,599 --> 00:39:27,200
and so now i have questions if anybody

1159
00:39:27,200 --> 00:39:29,839
has any

1160
00:39:31,359 --> 00:39:32,720
hi everyone

1161
00:39:32,720 --> 00:39:33,680
uh

1162
00:39:33,680 --> 00:39:35,200
we're running a little bit behind

1163
00:39:35,200 --> 00:39:37,359
schedule i'd love to get into the next

1164
00:39:37,359 --> 00:39:40,400
presentations uh thanks thanks eric for

1165
00:39:40,400 --> 00:39:44,480
that really uh clear and educational

1166
00:39:44,480 --> 00:39:45,760
introduction

1167
00:39:45,760 --> 00:39:49,520
um if anybody has burning questions uh

1168
00:39:49,520 --> 00:39:51,599
feel free to jump into the queue now but

1169
00:39:51,599 --> 00:39:53,599
uh but but also

1170
00:39:53,599 --> 00:39:54,960
let's uh let's start getting ready for

1171
00:39:54,960 --> 00:39:57,839
our next presentation

1172
00:40:31,680 --> 00:40:34,079
okay chris we see your face we don't see

1173
00:40:34,079 --> 00:40:35,839
your slides

1174
00:40:35,839 --> 00:40:38,960
oh i requested to share them

1175
00:40:38,960 --> 00:40:41,839
yes i approved that okay let's try this

1176
00:40:41,839 --> 00:40:44,078
way

1177
00:40:44,400 --> 00:40:47,200
oh oh i guess i can um share them from

1178
00:40:47,200 --> 00:40:50,520
this uh

1179
00:40:52,640 --> 00:40:55,040
upload flow

1180
00:40:55,040 --> 00:40:56,240
share

1181
00:40:56,240 --> 00:40:58,160
so i can't do

1182
00:40:58,160 --> 00:41:00,880
from google docs but we can do the uh

1183
00:41:00,880 --> 00:41:02,640
cool

1184
00:41:02,640 --> 00:41:05,599
everyone can see that right it's working

1185
00:41:05,599 --> 00:41:07,520
cool and i have full control i am ready

1186
00:41:07,520 --> 00:41:10,640
to go okay yeah uh thank you ecker that

1187
00:41:10,640 --> 00:41:12,720
was a that was a wonderful introduction

1188
00:41:12,720 --> 00:41:16,560
to the the crazy the crazy uh world we

1189
00:41:16,560 --> 00:41:19,599
just dove into with ppm

1190
00:41:19,599 --> 00:41:20,480
okay

1191
00:41:20,480 --> 00:41:22,640
so i'm going to start off um the the

1192
00:41:22,640 --> 00:41:24,319
next the next few talks are kind of

1193
00:41:24,319 --> 00:41:26,400
describing uh

1194
00:41:26,400 --> 00:41:27,119
uh

1195
00:41:27,119 --> 00:41:30,400
of some open issues um that have come up

1196
00:41:30,400 --> 00:41:32,400
uh over the last several months that

1197
00:41:32,400 --> 00:41:34,560
we've been kicking around this uh this

1198
00:41:34,560 --> 00:41:37,359
draft that uh we're talking about

1199
00:41:37,359 --> 00:41:38,400
um

1200
00:41:38,400 --> 00:41:40,160
and so i'm gonna i i have the pleasure

1201
00:41:40,160 --> 00:41:42,400
of talking about one of these one of

1202
00:41:42,400 --> 00:41:44,400
these open questions and it has to do

1203
00:41:44,400 --> 00:41:47,520
with how um clients upload information

1204
00:41:47,520 --> 00:41:51,280
upload their their reports um to

1205
00:41:51,280 --> 00:41:54,480
to the um to the aggregators the uh the

1206
00:41:54,480 --> 00:41:57,839
the two servers that ecker talked about

1207
00:41:57,839 --> 00:41:59,599
okay so i wanted to give a quick

1208
00:41:59,599 --> 00:42:01,119
overview of how we think about the

1209
00:42:01,119 --> 00:42:03,599
architecture of the system and we really

1210
00:42:03,599 --> 00:42:05,839
think of ppm as being three

1211
00:42:05,839 --> 00:42:07,760
sub-protocols that are executed

1212
00:42:07,760 --> 00:42:11,599
simultaneously so the upload flow uh is

1213
00:42:11,599 --> 00:42:14,560
clients push their reports these are

1214
00:42:14,560 --> 00:42:17,760
input these this is the the input shares

1215
00:42:17,760 --> 00:42:18,640
um

1216
00:42:18,640 --> 00:42:21,280
the the secret shares of their input um

1217
00:42:21,280 --> 00:42:23,599
to the leader and these are encrypted

1218
00:42:23,599 --> 00:42:25,520
under the um

1219
00:42:25,520 --> 00:42:26,960
the public keys of each of the

1220
00:42:26,960 --> 00:42:28,800
aggregators so

1221
00:42:28,800 --> 00:42:30,800
the um the leader doesn't end up seeing

1222
00:42:30,800 --> 00:42:32,480
them in the clear

1223
00:42:32,480 --> 00:42:33,359
um

1224
00:42:33,359 --> 00:42:34,800
and then there's the aggregate flow

1225
00:42:34,800 --> 00:42:36,800
which is when where the leader the

1226
00:42:36,800 --> 00:42:38,880
aggregators interact with one another in

1227
00:42:38,880 --> 00:42:40,800
order to to um

1228
00:42:40,800 --> 00:42:43,280
verify the validity of the inputs

1229
00:42:43,280 --> 00:42:45,440
they're consuming as well as aggregate

1230
00:42:45,440 --> 00:42:48,480
them and compute uh compute shares of

1231
00:42:48,480 --> 00:42:50,960
the uh of the aggregate results

1232
00:42:50,960 --> 00:42:53,280
um

1233
00:42:54,560 --> 00:42:56,720
yeah can i just cut in for one second um

1234
00:42:56,720 --> 00:42:58,640
chris i think it'd be really helpful um

1235
00:42:58,640 --> 00:43:00,000
if you if you took

1236
00:43:00,000 --> 00:43:01,920
two minutes and covered the material i

1237
00:43:01,920 --> 00:43:03,200
that i foolishly thought you were going

1238
00:43:03,200 --> 00:43:06,000
to cover um um which is basically just

1239
00:43:06,000 --> 00:43:07,839
briefly describing how the architecture

1240
00:43:07,839 --> 00:43:10,000
works in a slightly more general sense

1241
00:43:10,000 --> 00:43:14,079
um um you know you're only showing um

1242
00:43:14,079 --> 00:43:15,760
um you know

1243
00:43:15,760 --> 00:43:17,280
uh

1244
00:43:17,280 --> 00:43:19,119
um i mean are you really sure like like

1245
00:43:19,119 --> 00:43:20,480
like i know this material but make sure

1246
00:43:20,480 --> 00:43:22,160
you you cover like

1247
00:43:22,160 --> 00:43:23,359
exactly how people think about the whole

1248
00:43:23,359 --> 00:43:25,359
system as a whole um

1249
00:43:25,359 --> 00:43:27,359
that be useful

1250
00:43:27,359 --> 00:43:29,200
i i mean i think that's what this slides

1251
00:43:29,200 --> 00:43:30,960
about but maybe but maybe

1252
00:43:30,960 --> 00:43:33,040
for something else

1253
00:43:33,040 --> 00:43:34,960
um maybe i am i'm sorry i it's very

1254
00:43:34,960 --> 00:43:36,720
early in the morning for me as well um

1255
00:43:36,720 --> 00:43:37,920
uh

1256
00:43:37,920 --> 00:43:39,440
uh um

1257
00:43:39,440 --> 00:43:40,800
uh

1258
00:43:40,800 --> 00:43:42,400
yeah okay go ahead i'm sorry i i i

1259
00:43:42,400 --> 00:43:43,440
didn't mean you're after i want to i

1260
00:43:43,440 --> 00:43:44,560
should make sure people are situated

1261
00:43:44,560 --> 00:43:46,000
before you ask people to make decisions

1262
00:43:46,000 --> 00:43:48,079
i make sure people are situated

1263
00:43:48,079 --> 00:43:50,079
okay okay yeah yeah that's that's what

1264
00:43:50,079 --> 00:43:52,240
i'm attempting to do here um so if

1265
00:43:52,240 --> 00:43:53,920
anything's not clear at the end of the

1266
00:43:53,920 --> 00:43:55,599
slide people please get in the queue and

1267
00:43:55,599 --> 00:43:57,920
ask questions um because we're gonna

1268
00:43:57,920 --> 00:43:59,359
we're gonna bring up the pros and cons

1269
00:43:59,359 --> 00:44:01,680
of two different approaches here okay so

1270
00:44:01,680 --> 00:44:03,920
um yeah so the upload uh clients upload

1271
00:44:03,920 --> 00:44:06,960
their reports to the the leader uh the

1272
00:44:06,960 --> 00:44:08,560
their uh

1273
00:44:08,560 --> 00:44:10,800
their uh the report contains the input

1274
00:44:10,800 --> 00:44:12,880
shares and they're encrypted to uh to

1275
00:44:12,880 --> 00:44:14,880
the public keys of the leader and helper

1276
00:44:14,880 --> 00:44:16,640
um and that's so that the leader doesn't

1277
00:44:16,640 --> 00:44:19,040
ever see the input shares in the clear

1278
00:44:19,040 --> 00:44:21,119
in the aggregate flow this is where the

1279
00:44:21,119 --> 00:44:23,119
input validation that ecker described

1280
00:44:23,119 --> 00:44:26,079
happens um and aggregation of the input

1281
00:44:26,079 --> 00:44:29,359
shares um and then finally the collect

1282
00:44:29,359 --> 00:44:31,599
flow is there's um

1283
00:44:31,599 --> 00:44:34,240
there's the data collector we think of

1284
00:44:34,240 --> 00:44:38,400
uh as as uh a different entity that um

1285
00:44:38,400 --> 00:44:40,400
interacts with the leader in order to

1286
00:44:40,400 --> 00:44:44,400
get um the the the uh final the the

1287
00:44:44,400 --> 00:44:46,800
aggregate result and so it's it's asking

1288
00:44:46,800 --> 00:44:48,000
a leader for

1289
00:44:48,000 --> 00:44:49,680
the encrypt uh

1290
00:44:49,680 --> 00:44:51,359
aggregate shares

1291
00:44:51,359 --> 00:44:52,480
okay

1292
00:44:52,480 --> 00:44:53,920
um

1293
00:44:53,920 --> 00:44:56,160
so does anybody have questions about the

1294
00:44:56,160 --> 00:44:57,920
architecture

1295
00:44:57,920 --> 00:45:01,200
i guess is the next question

1296
00:45:01,440 --> 00:45:05,480
i'll look at the chat real quick

1297
00:45:05,839 --> 00:45:07,440
okay

1298
00:45:07,440 --> 00:45:08,800
i'm going to assume

1299
00:45:08,800 --> 00:45:12,000
okay go ahead penguin

1300
00:45:14,079 --> 00:45:16,160
i have a question

1301
00:45:16,160 --> 00:45:19,280
what what if the leader and and the

1302
00:45:19,280 --> 00:45:22,240
helper than the helper and they compare

1303
00:45:22,240 --> 00:45:26,000
with each other is there a possibility

1304
00:45:26,000 --> 00:45:28,640
yeah so i mean the the what as ecker

1305
00:45:28,640 --> 00:45:30,319
pointed out um something that we're

1306
00:45:30,319 --> 00:45:33,440
going to make be assuming um

1307
00:45:33,440 --> 00:45:35,680
is that they're uh that the the leader

1308
00:45:35,680 --> 00:45:38,000
and helper are not are not colluding um

1309
00:45:38,000 --> 00:45:40,960
and we can discuss like um i think for

1310
00:45:40,960 --> 00:45:42,640
now i think we should take that as gran

1311
00:45:42,640 --> 00:45:45,040
take that as granted but um we can

1312
00:45:45,040 --> 00:45:46,960
discuss like i think the working group

1313
00:45:46,960 --> 00:45:47,920
uh

1314
00:45:47,920 --> 00:45:50,319
uh might might want to discuss ways of

1315
00:45:50,319 --> 00:45:53,119
actually verifying or uh uh

1316
00:45:53,119 --> 00:45:56,480
non-collusion um ecker go ahead

1317
00:45:56,480 --> 00:45:58,640
okay okay

1318
00:45:58,640 --> 00:46:01,040
i i have a leading question which is um

1319
00:46:01,040 --> 00:46:01,920
uh

1320
00:46:01,920 --> 00:46:02,720
um

1321
00:46:02,720 --> 00:46:05,040
how do the uh um

1322
00:46:05,040 --> 00:46:07,040
uh how do the leader and helper get

1323
00:46:07,040 --> 00:46:08,240
coordinated so they're doing the same

1324
00:46:08,240 --> 00:46:10,000
thing um and know which measurements are

1325
00:46:10,000 --> 00:46:11,040
being collected and what anything

1326
00:46:11,040 --> 00:46:12,560
individually means and like those kinds

1327
00:46:12,560 --> 00:46:14,560
of things right um do you mean how

1328
00:46:14,560 --> 00:46:17,279
they're configured

1329
00:46:17,839 --> 00:46:19,760
okay um

1330
00:46:19,760 --> 00:46:23,280
yeah i think that uh um

1331
00:46:23,280 --> 00:46:25,520
the uh yeah so the uh

1332
00:46:25,520 --> 00:46:29,200
i guess what's missing here is that um

1333
00:46:29,200 --> 00:46:31,439
the

1334
00:46:31,520 --> 00:46:33,119
what's being

1335
00:46:33,119 --> 00:46:35,760
what what the ppm's protocol is meant to

1336
00:46:35,760 --> 00:46:38,400
specify

1337
00:46:38,400 --> 00:46:40,960
so uh there's in the cfrg we're working

1338
00:46:40,960 --> 00:46:43,200
on working on a a document that

1339
00:46:43,200 --> 00:46:46,400
describes uh the underlying crypto bits

1340
00:46:46,400 --> 00:46:48,000
like soprio

1341
00:46:48,000 --> 00:46:51,040
and and poplar and other instantiations

1342
00:46:51,040 --> 00:46:52,960
of like a thing of the multi-party

1343
00:46:52,960 --> 00:46:54,400
computation step

1344
00:46:54,400 --> 00:46:55,359
um

1345
00:46:55,359 --> 00:46:58,000
and so the the the all of the parties

1346
00:46:58,000 --> 00:47:00,000
have to be configured to

1347
00:47:00,000 --> 00:47:02,480
execute the same uh what we call a

1348
00:47:02,480 --> 00:47:04,400
verifiable distributed aggregation

1349
00:47:04,400 --> 00:47:06,640
function vdf

1350
00:47:06,640 --> 00:47:07,440
um

1351
00:47:07,440 --> 00:47:09,200
i was hoping to talk about tasks for 30

1352
00:47:09,200 --> 00:47:10,800
seconds

1353
00:47:10,800 --> 00:47:13,920
okay um

1354
00:47:13,920 --> 00:47:15,119
okay

1355
00:47:15,119 --> 00:47:17,359
so

1356
00:47:17,440 --> 00:47:19,280
okay

1357
00:47:19,280 --> 00:47:21,599
um

1358
00:47:21,599 --> 00:47:25,599
so uh a task is

1359
00:47:25,599 --> 00:47:27,920
um

1360
00:47:27,920 --> 00:47:30,160
sorry it's also early in the morning for

1361
00:47:30,160 --> 00:47:33,200
me um

1362
00:47:34,720 --> 00:47:37,280
when when uh when a collector okay so

1363
00:47:37,280 --> 00:47:39,200
when uh when when a client

1364
00:47:39,200 --> 00:47:42,240
is uploading reports it's it's it needs

1365
00:47:42,240 --> 00:47:43,200
to know

1366
00:47:43,200 --> 00:47:45,520
where to send reports

1367
00:47:45,520 --> 00:47:48,000
uh how to generate them

1368
00:47:48,000 --> 00:47:48,960
uh

1369
00:47:48,960 --> 00:47:51,520
and this is determined by what we call a

1370
00:47:51,520 --> 00:47:53,680
ppm task

1371
00:47:53,680 --> 00:47:55,520
and task and the task is supposed to

1372
00:47:55,520 --> 00:47:57,440
specify all of the things that all the

1373
00:47:57,440 --> 00:47:59,680
parties need to agree on in order to to

1374
00:47:59,680 --> 00:48:00,400
do

1375
00:48:00,400 --> 00:48:03,359
to uh do the computation

1376
00:48:03,359 --> 00:48:04,960
i'm not sure what else there is to say

1377
00:48:04,960 --> 00:48:07,839
about that

1378
00:48:08,480 --> 00:48:11,920
let's move on to the next question

1379
00:48:16,720 --> 00:48:20,598
mariana you're in the queue

1380
00:48:22,079 --> 00:48:24,079
do you hear me

1381
00:48:24,079 --> 00:48:25,040
yes

1382
00:48:25,040 --> 00:48:27,760
okay sorry this resets all the time

1383
00:48:27,760 --> 00:48:30,960
um so my question is related to

1384
00:48:30,960 --> 00:48:33,839
are you envisioning to allow any options

1385
00:48:33,839 --> 00:48:36,559
of this architecture in the sense that

1386
00:48:36,559 --> 00:48:38,960
maybe there are applications where

1387
00:48:38,960 --> 00:48:41,680
the party collecting the data the

1388
00:48:41,680 --> 00:48:44,079
reports is different from any of the

1389
00:48:44,079 --> 00:48:45,440
aggregators

1390
00:48:45,440 --> 00:48:49,200
right there might be a reason that

1391
00:48:49,200 --> 00:48:51,920
it's easy to have a party online that is

1392
00:48:51,920 --> 00:48:53,599
different from the aggregators that is

1393
00:48:53,599 --> 00:48:55,359
collecting all the reports and an

1394
00:48:55,359 --> 00:48:57,920
example of such a system is the

1395
00:48:57,920 --> 00:48:59,760
the deployment that we have in exposure

1396
00:48:59,760 --> 00:49:02,559
notifications where our collectors our

1397
00:49:02,559 --> 00:49:04,480
ingestion servers are neither of the

1398
00:49:04,480 --> 00:49:05,760
aggregators

1399
00:49:05,760 --> 00:49:08,559
and i can also imagine other

1400
00:49:08,559 --> 00:49:10,880
applications where maybe you want to

1401
00:49:10,880 --> 00:49:13,760
avoid the additional communication cost

1402
00:49:13,760 --> 00:49:16,240
of the leader sending to the helper

1403
00:49:16,240 --> 00:49:19,760
reports yeah so so that's what that

1404
00:49:19,760 --> 00:49:21,920
means

1405
00:49:22,240 --> 00:49:24,640
yeah so the sorry to interrupt um that's

1406
00:49:24,640 --> 00:49:26,640
what this this presentation is about is

1407
00:49:26,640 --> 00:49:28,400
an alternative architecture that's been

1408
00:49:28,400 --> 00:49:31,680
proposed um and uh we're weighing like

1409
00:49:31,680 --> 00:49:34,160
the the the goal is uh in my talk is to

1410
00:49:34,160 --> 00:49:36,720
weigh the pros and cons of of the two

1411
00:49:36,720 --> 00:49:37,920
different approaches

1412
00:49:37,920 --> 00:49:38,880
um

1413
00:49:38,880 --> 00:49:41,520
and to your first question um

1414
00:49:41,520 --> 00:49:44,400
yeah i mean i think i think um

1415
00:49:44,400 --> 00:49:46,480
i think that that's totally on the table

1416
00:49:46,480 --> 00:49:48,079
but it's uh it's something that also

1417
00:49:48,079 --> 00:49:49,839
needs to be discussed so what i'm what

1418
00:49:49,839 --> 00:49:52,160
i'm the perspective i'm coming from is

1419
00:49:52,160 --> 00:49:54,559
from the current draft um

1420
00:49:54,559 --> 00:49:56,800
and uh which uh which i think i i guess

1421
00:49:56,800 --> 00:49:59,280
we could have um spent more time uh

1422
00:49:59,280 --> 00:50:01,520
describing at a high level um

1423
00:50:01,520 --> 00:50:04,640
but uh yeah so uh that's that's totally

1424
00:50:04,640 --> 00:50:06,319
on the table but it would need to be in

1425
00:50:06,319 --> 00:50:08,800
the draft

1426
00:50:08,960 --> 00:50:11,440
okay thank you

1427
00:50:11,440 --> 00:50:14,240
any other questions

1428
00:50:17,760 --> 00:50:19,200
okay um

1429
00:50:19,200 --> 00:50:21,839
i unfortunately oh go ahead daniel

1430
00:50:21,839 --> 00:50:24,160
yeah um

1431
00:50:24,160 --> 00:50:26,480
we in the previous slide deck we're

1432
00:50:26,480 --> 00:50:29,119
talking about aggregators

1433
00:50:29,119 --> 00:50:31,520
and in this slide we're not seeing

1434
00:50:31,520 --> 00:50:34,240
there's a term aggregation

1435
00:50:34,240 --> 00:50:36,559
but it doesn't mention who aggregators

1436
00:50:36,559 --> 00:50:37,839
are

1437
00:50:37,839 --> 00:50:41,119
so maybe yeah that i'm missing

1438
00:50:41,119 --> 00:50:43,599
uh i yeah i apologize for that um the

1439
00:50:43,599 --> 00:50:46,000
leader and helper are both aggregators

1440
00:50:46,000 --> 00:50:47,359
so there's three different kinds of

1441
00:50:47,359 --> 00:50:50,640
roles there's the client uh and

1442
00:50:50,640 --> 00:50:52,640
the the client the an aggregator and the

1443
00:50:52,640 --> 00:50:55,119
collector the leader and helper are both

1444
00:50:55,119 --> 00:50:58,160
due different types of of aggregator and

1445
00:50:58,160 --> 00:51:00,480
the only difference is that um

1446
00:51:00,480 --> 00:51:03,119
the leader is kind of holding the state

1447
00:51:03,119 --> 00:51:06,079
of the aggregation flow um i thought i i

1448
00:51:06,079 --> 00:51:07,839
was hoping that would be clear on on

1449
00:51:07,839 --> 00:51:09,599
eckerd's slides but i guess not i

1450
00:51:09,599 --> 00:51:13,040
apologize for that um i should have uh

1451
00:51:13,040 --> 00:51:14,559
labeled this better

1452
00:51:14,559 --> 00:51:16,720
that makes sense so the blue squares are

1453
00:51:16,720 --> 00:51:18,079
aggregators

1454
00:51:18,079 --> 00:51:19,280
yes

1455
00:51:19,280 --> 00:51:22,760
got it thanks

1456
00:51:25,359 --> 00:51:27,440
okay um i will go through this very

1457
00:51:27,440 --> 00:51:28,400
quickly

1458
00:51:28,400 --> 00:51:29,760
i want to be sure to save time for

1459
00:51:29,760 --> 00:51:30,880
everybody else

1460
00:51:30,880 --> 00:51:32,160
so um

1461
00:51:32,160 --> 00:51:34,240
this this is what we have today this

1462
00:51:34,240 --> 00:51:37,119
leader upload flow where um clients send

1463
00:51:37,119 --> 00:51:39,200
their both encrypted input shares to the

1464
00:51:39,200 --> 00:51:42,400
leader um and um

1465
00:51:42,400 --> 00:51:44,720
an alternative flow as mariana suggested

1466
00:51:44,720 --> 00:51:46,400
is uh

1467
00:51:46,400 --> 00:51:49,280
we could instead have the client send a

1468
00:51:49,280 --> 00:51:50,880
share of its report to each of the

1469
00:51:50,880 --> 00:51:52,480
aggregators so

1470
00:51:52,480 --> 00:51:53,839
um each

1471
00:51:53,839 --> 00:51:55,680
each uh

1472
00:51:55,680 --> 00:51:57,359
each uh each of these report shares

1473
00:51:57,359 --> 00:51:58,800
would just have the encrypted input

1474
00:51:58,800 --> 00:52:00,400
share for that for that for that

1475
00:52:00,400 --> 00:52:01,599
aggregator

1476
00:52:01,599 --> 00:52:02,960
um

1477
00:52:02,960 --> 00:52:05,760
so i think that in some sense the split

1478
00:52:05,760 --> 00:52:07,119
upload model is a little bit more

1479
00:52:07,119 --> 00:52:08,960
natural and as we and as mariana

1480
00:52:08,960 --> 00:52:11,200
mentioned this is what's already been uh

1481
00:52:11,200 --> 00:52:14,800
deployed uh for uh if for for an earlier

1482
00:52:14,800 --> 00:52:17,359
iteration of prio um

1483
00:52:17,359 --> 00:52:21,280
so why so why did we do it this way

1484
00:52:21,280 --> 00:52:22,800
um

1485
00:52:22,800 --> 00:52:24,800
why do we do it this way so

1486
00:52:24,800 --> 00:52:27,359
uh i think the main motivation was

1487
00:52:27,359 --> 00:52:28,880
we wanted to

1488
00:52:28,880 --> 00:52:31,119
we wanted to make um

1489
00:52:31,119 --> 00:52:32,800
we wanted to make it as cheap as

1490
00:52:32,800 --> 00:52:35,200
possible to stand up the helper

1491
00:52:35,200 --> 00:52:36,640
aggregator

1492
00:52:36,640 --> 00:52:38,160
um so

1493
00:52:38,160 --> 00:52:40,880
with the current architecture uh

1494
00:52:40,880 --> 00:52:43,359
only the leader has to have has to be

1495
00:52:43,359 --> 00:52:45,760
able to handle a lot of bandwidth um and

1496
00:52:45,760 --> 00:52:48,400
has in is exposed like as like a normal

1497
00:52:48,400 --> 00:52:51,359
web service to uh to uh

1498
00:52:51,359 --> 00:52:52,720
to um

1499
00:52:52,720 --> 00:52:55,280
to client traffic um

1500
00:52:55,280 --> 00:52:56,160
and

1501
00:52:56,160 --> 00:52:58,720
the aggregation flow has less bandwidth

1502
00:52:58,720 --> 00:53:01,359
because uh first of all it's sending it

1503
00:53:01,359 --> 00:53:02,960
doesn't have to send both encrypted

1504
00:53:02,960 --> 00:53:04,960
input shares to its peer

1505
00:53:04,960 --> 00:53:07,680
so we save a little bit in bandwidth um

1506
00:53:07,680 --> 00:53:09,760
and also the throttle the leader can

1507
00:53:09,760 --> 00:53:11,599
throttle traffic if it needs to if the

1508
00:53:11,599 --> 00:53:14,319
helpers falling behind or if it's if

1509
00:53:14,319 --> 00:53:16,400
it's falling behind um it doesn't have

1510
00:53:16,400 --> 00:53:18,960
to be totally online the way the leader

1511
00:53:18,960 --> 00:53:21,359
has to in the uh upload flow

1512
00:53:21,359 --> 00:53:23,440
and then the collect flow is just like

1513
00:53:23,440 --> 00:53:25,680
there's this uh the collectors is just

1514
00:53:25,680 --> 00:53:27,200
getting aggregate results which is

1515
00:53:27,200 --> 00:53:29,839
fairly cheap to do

1516
00:53:29,839 --> 00:53:32,079
another motivation is that there's kind

1517
00:53:32,079 --> 00:53:35,119
of a race condition in split mode where

1518
00:53:35,119 --> 00:53:36,160
um

1519
00:53:36,160 --> 00:53:38,160
the leader is receiving report shares

1520
00:53:38,160 --> 00:53:40,800
and can initiate the aggregation flow at

1521
00:53:40,800 --> 00:53:42,880
any time um

1522
00:53:42,880 --> 00:53:44,720
and then and then when the helper gets

1523
00:53:44,720 --> 00:53:47,040
it helper receives its report shift so

1524
00:53:47,040 --> 00:53:49,680
if the helper receives its report shared

1525
00:53:49,680 --> 00:53:53,359
first before uh the leader uh begins

1526
00:53:53,359 --> 00:53:56,240
well okay sorry if the helper uh doesn't

1527
00:53:56,240 --> 00:53:58,240
receive the report share before

1528
00:53:58,240 --> 00:54:00,400
uh the leader receives its report sharon

1529
00:54:00,400 --> 00:54:03,520
begins aggregation um then we'll we

1530
00:54:03,520 --> 00:54:06,640
might have to like drop that report um

1531
00:54:06,640 --> 00:54:08,480
and there's ways to fix this uh in the

1532
00:54:08,480 --> 00:54:09,910
protocol um

1533
00:54:09,910 --> 00:54:12,319
[Music]

1534
00:54:12,319 --> 00:54:13,920
and then the third the and then the

1535
00:54:13,920 --> 00:54:16,000
third point is that uh in the split

1536
00:54:16,000 --> 00:54:18,880
upload uh world um

1537
00:54:18,880 --> 00:54:21,200
the upload flow is uh

1538
00:54:21,200 --> 00:54:23,440
is more likely to fail because

1539
00:54:23,440 --> 00:54:26,160
um there are two the client is making

1540
00:54:26,160 --> 00:54:28,400
two http requests to two different

1541
00:54:28,400 --> 00:54:30,160
servers rather than just one to one

1542
00:54:30,160 --> 00:54:32,480
server

1543
00:54:32,559 --> 00:54:35,200
um the big downside to the leader upload

1544
00:54:35,200 --> 00:54:38,400
model as mariana suggested is that uh

1545
00:54:38,400 --> 00:54:40,799
the aggregation flow has higher than

1546
00:54:40,799 --> 00:54:42,640
necessary bandwidth because basically

1547
00:54:42,640 --> 00:54:45,920
we're uh we're sending uh the client

1548
00:54:45,920 --> 00:54:47,440
could have sent the report share instead

1549
00:54:47,440 --> 00:54:50,000
of the leader and this is a significant

1550
00:54:50,000 --> 00:54:52,880
problem for poplar because uh input

1551
00:54:52,880 --> 00:54:55,440
shares are big and um

1552
00:54:55,440 --> 00:54:56,400
there's

1553
00:54:56,400 --> 00:54:58,400
we're going to run the aggregation flow

1554
00:54:58,400 --> 00:55:00,640
several times on the same set of reports

1555
00:55:00,640 --> 00:55:03,280
in order to to finish the the

1556
00:55:03,280 --> 00:55:06,480
computation of the of heavy hitters um

1557
00:55:06,480 --> 00:55:08,240
and and so higher bandwidth between the

1558
00:55:08,240 --> 00:55:10,240
leader and helper means higher egress

1559
00:55:10,240 --> 00:55:11,200
cloud

1560
00:55:11,200 --> 00:55:12,799
egress costs between like cloud

1561
00:55:12,799 --> 00:55:15,520
providers which is uh an important

1562
00:55:15,520 --> 00:55:17,440
consideration for us

1563
00:55:17,440 --> 00:55:21,280
um so i think we have mainly two options

1564
00:55:21,280 --> 00:55:23,680
um which is what i'd like to discuss um

1565
00:55:23,680 --> 00:55:25,359
but i i guess we should maybe just take

1566
00:55:25,359 --> 00:55:26,720
it to the list because we're we're

1567
00:55:26,720 --> 00:55:29,599
running low on time um

1568
00:55:29,599 --> 00:55:31,119
we can stick with the leader upload

1569
00:55:31,119 --> 00:55:33,040
model and try to mitigate its downside

1570
00:55:33,040 --> 00:55:36,000
that is uh you know don't require

1571
00:55:36,000 --> 00:55:37,920
re-transmitting the report shares in the

1572
00:55:37,920 --> 00:55:39,200
in the protocol

1573
00:55:39,200 --> 00:55:41,200
um and there's a question of whether

1574
00:55:41,200 --> 00:55:44,000
this is like enough to reduce the egress

1575
00:55:44,000 --> 00:55:44,960
costs

1576
00:55:44,960 --> 00:55:47,920
or we can take or we can consider uh

1577
00:55:47,920 --> 00:55:50,880
adopting the split upload flow um and

1578
00:55:50,880 --> 00:55:51,760
leave

1579
00:55:51,760 --> 00:55:54,559
and uh base yeah i don't have much time

1580
00:55:54,559 --> 00:55:56,400
to talk about this

1581
00:55:56,400 --> 00:55:57,760
um

1582
00:55:57,760 --> 00:56:00,480
there's there's options for uh

1583
00:56:00,480 --> 00:56:03,440
it's it's possible that we can um

1584
00:56:03,440 --> 00:56:07,280
mitigate the uh the downsides by uh by

1585
00:56:07,280 --> 00:56:08,880
but but kind of leaving it up to the

1586
00:56:08,880 --> 00:56:11,599
deployment so uh there's this there's

1587
00:56:11,599 --> 00:56:13,599
been the suggestion of

1588
00:56:13,599 --> 00:56:15,520
putting an adjuster between the client

1589
00:56:15,520 --> 00:56:16,640
and the lead and the leader in the

1590
00:56:16,640 --> 00:56:19,119
helper which can coordinate transmission

1591
00:56:19,119 --> 00:56:21,680
of report shares and um

1592
00:56:21,680 --> 00:56:23,599
solve some of the uh the coordination

1593
00:56:23,599 --> 00:56:25,839
problems um then there's this question

1594
00:56:25,839 --> 00:56:27,440
that eckerd brought up on the list which

1595
00:56:27,440 --> 00:56:28,480
is uh

1596
00:56:28,480 --> 00:56:29,440
you know

1597
00:56:29,440 --> 00:56:32,640
is uh in what sense is uh the ingester

1598
00:56:32,640 --> 00:56:35,760
trusted or untrusted um so that's my

1599
00:56:35,760 --> 00:56:38,559
time um i'll i'll uh kick it back to

1600
00:56:38,559 --> 00:56:41,559
then

1601
00:56:46,079 --> 00:56:48,799
okay uh thank you chris

1602
00:56:48,799 --> 00:56:50,799
um i want to make sure that we get

1603
00:56:50,799 --> 00:56:52,880
through all the presentations on this

1604
00:56:52,880 --> 00:56:55,440
topic we did build in time for questions

1605
00:56:55,440 --> 00:56:56,720
after the

1606
00:56:56,720 --> 00:56:59,280
three discussions on this draft

1607
00:56:59,280 --> 00:57:00,720
so

1608
00:57:00,720 --> 00:57:03,760
if folks have have really high priority

1609
00:57:03,760 --> 00:57:06,720
brief questions

1610
00:57:06,720 --> 00:57:08,720
jump in but but also let's get set up

1611
00:57:08,720 --> 00:57:12,439
for the next set of slides

1612
00:57:13,359 --> 00:57:15,359
oops

1613
00:57:15,359 --> 00:57:18,078
uh eric

1614
00:57:18,960 --> 00:57:20,319
i i just want to make sure like i seen a

1615
00:57:20,319 --> 00:57:21,760
bunch of chat budget budget discussion

1616
00:57:21,760 --> 00:57:23,839
on the chat um i'm sorry

1617
00:57:23,839 --> 00:57:25,599
he says make sure people like understand

1618
00:57:25,599 --> 00:57:28,400
what that's at stake here um which is um

1619
00:57:28,400 --> 00:57:31,119
primarily what's the stake here is um

1620
00:57:31,119 --> 00:57:33,280
you know whether or not the role of

1621
00:57:33,280 --> 00:57:36,000
distributing the data to the um so the

1622
00:57:36,000 --> 00:57:37,839
the the role the leader has to perform

1623
00:57:37,839 --> 00:57:39,599
is orchestrating the computation and the

1624
00:57:39,599 --> 00:57:40,880
role that is instead of performing and

1625
00:57:40,880 --> 00:57:43,280
distributing the data to um to the help

1626
00:57:43,280 --> 00:57:45,280
developers right and so at stake here is

1627
00:57:45,280 --> 00:57:46,480
whether we should separate out those

1628
00:57:46,480 --> 00:57:48,000
rules and have the role distribute

1629
00:57:48,000 --> 00:57:49,440
between the data helpers be done

1630
00:57:49,440 --> 00:57:51,280
separately from the um and directly in

1631
00:57:51,280 --> 00:57:53,119
this case from the role of orchestrated

1632
00:57:53,119 --> 00:57:55,040
computation so that's for the stake here

1633
00:57:55,040 --> 00:57:56,799
it's not um it's not it's not a security

1634
00:57:56,799 --> 00:57:58,799
question it's really um

1635
00:57:58,799 --> 00:58:01,280
it's like largely a um it's a largely

1636
00:58:01,280 --> 00:58:04,319
operational question um

1637
00:58:04,319 --> 00:58:06,000
i think the other comment in the chat

1638
00:58:06,000 --> 00:58:07,040
was that

1639
00:58:07,040 --> 00:58:09,680
if it's possible to describe the system

1640
00:58:09,680 --> 00:58:11,359
where the role according to the

1641
00:58:11,359 --> 00:58:13,359
computation does not require

1642
00:58:13,359 --> 00:58:15,520
participating in the competition that

1643
00:58:15,520 --> 00:58:17,119
might also make it cleaner right you

1644
00:58:17,119 --> 00:58:19,760
could say there's the coordinator

1645
00:58:19,760 --> 00:58:21,760
and the coordinator may also play a role

1646
00:58:21,760 --> 00:58:23,040
as one of the participants in the

1647
00:58:23,040 --> 00:58:24,240
computation

1648
00:58:24,240 --> 00:58:25,040
um

1649
00:58:25,040 --> 00:58:27,200
but i don't understand the the actual

1650
00:58:27,200 --> 00:58:28,480
mechanics of the computation well enough

1651
00:58:28,480 --> 00:58:29,440
to know whether those roles could be

1652
00:58:29,440 --> 00:58:32,720
split out i think that's the

1653
00:58:32,720 --> 00:58:36,279
thing that was uh

1654
00:58:37,359 --> 00:58:41,400
jonathan lennox's recommendation

1655
00:58:52,240 --> 00:58:54,559
um i think that there is i think that's

1656
00:58:54,559 --> 00:58:56,319
an interesting suggestion

1657
00:58:56,319 --> 00:58:57,599
um

1658
00:58:57,599 --> 00:58:59,760
i think uh

1659
00:58:59,760 --> 00:59:01,760
i mean you could like

1660
00:59:01,760 --> 00:59:03,599
i think you could imagine like like it

1661
00:59:03,599 --> 00:59:05,119
would be i think it would be nice to

1662
00:59:05,119 --> 00:59:07,599
cleanly separate separate those things

1663
00:59:07,599 --> 00:59:10,079
um i don't know if it's like that easy

1664
00:59:10,079 --> 00:59:10,880
uh

1665
00:59:10,880 --> 00:59:14,000
at least to specify um

1666
00:59:14,000 --> 00:59:16,799
but uh yeah i think i think it's uh

1667
00:59:16,799 --> 00:59:18,960
there's a lot to discuss here um and i

1668
00:59:18,960 --> 00:59:20,480
think um

1669
00:59:20,480 --> 00:59:22,000
hopefully we can have a have a good

1670
00:59:22,000 --> 00:59:25,599
discussion about this on on the list

1671
00:59:27,440 --> 00:59:28,720
just just to answer that question a

1672
00:59:28,720 --> 00:59:30,160
little bit just sorry just answer that

1673
00:59:30,160 --> 00:59:31,440
question a little bit i think the

1674
00:59:31,440 --> 00:59:33,760
challenge is that from the perspective

1675
00:59:33,760 --> 00:59:35,119
of running the computation it's actually

1676
00:59:35,119 --> 00:59:37,119
quite straightforward to um specify as

1677
00:59:37,119 --> 00:59:38,799
if the leader like we're not one of the

1678
00:59:38,799 --> 00:59:40,960
elevators but in order to actually do

1679
00:59:40,960 --> 00:59:42,640
the computation um because like you're

1680
00:59:42,640 --> 00:59:43,680
really just sending messages saying

1681
00:59:43,680 --> 00:59:45,200
compute this compute this but in order

1682
00:59:45,200 --> 00:59:46,480
to actually do the computation you have

1683
00:59:46,480 --> 00:59:48,720
to know which shares are available um in

1684
00:59:48,720 --> 00:59:50,480
order to describe them to each side so

1685
00:59:50,480 --> 00:59:52,000
they can be aggregated and so we have to

1686
00:59:52,000 --> 00:59:53,920
invent some mechanism by which the

1687
00:59:53,920 --> 00:59:55,119
leader learned which shares were

1688
00:59:55,119 --> 00:59:57,040
available um in order to computation and

1689
00:59:57,040 --> 00:59:58,480
that'd be like new protocol mechanics or

1690
00:59:58,480 --> 01:00:00,720
we have to like just say it's magic um

1691
01:00:00,720 --> 01:00:02,640
and um and so that that i'm sort of

1692
01:00:02,640 --> 01:00:03,760
looked to describe there's no protocol

1693
01:00:03,760 --> 01:00:04,799
mechanics if no one's actually gonna

1694
01:00:04,799 --> 01:00:06,319
implement it that way but perhaps you

1695
01:00:06,319 --> 01:00:07,599
could just say it was mad it was a magic

1696
01:00:07,599 --> 01:00:09,839
channel

1697
01:00:12,559 --> 01:00:16,559
okay let's move let's move to chris wood

1698
01:00:20,079 --> 01:00:23,280
all right um good morning everyone uh

1699
01:00:23,280 --> 01:00:24,640
this is going to follow in the heels of

1700
01:00:24,640 --> 01:00:26,640
um some of the

1701
01:00:26,640 --> 01:00:27,760
comments and questions that came up

1702
01:00:27,760 --> 01:00:28,960
during chris's presentation in

1703
01:00:28,960 --> 01:00:30,640
particular um

1704
01:00:30,640 --> 01:00:33,040
uh how the collect sort of piece of the

1705
01:00:33,040 --> 01:00:35,040
protocol works um

1706
01:00:35,040 --> 01:00:36,400
and what sort of requirements you need

1707
01:00:36,400 --> 01:00:38,240
to have in place in order to ensure that

1708
01:00:38,240 --> 01:00:39,119
the

1709
01:00:39,119 --> 01:00:40,640
the resulting ppm protocol has the

1710
01:00:40,640 --> 01:00:42,640
desired privacy properties that you want

1711
01:00:42,640 --> 01:00:44,480
the echo kind of alluded to in his

1712
01:00:44,480 --> 01:00:45,599
overview

1713
01:00:45,599 --> 01:00:46,960
um

1714
01:00:46,960 --> 01:00:48,720
it's going to get a bit technical

1715
01:00:48,720 --> 01:00:50,000
in terms of

1716
01:00:50,000 --> 01:00:52,079
i guess how the particular collect

1717
01:00:52,079 --> 01:00:54,319
flow works for the current instantiation

1718
01:00:54,319 --> 01:00:56,720
of ppm um so if you have any questions

1719
01:00:56,720 --> 01:00:59,280
along the way feel free to chime in or

1720
01:00:59,280 --> 01:01:00,559
pop in the queue or whatever and i'll

1721
01:01:00,559 --> 01:01:03,200
try to answer them

1722
01:01:03,520 --> 01:01:04,400
um

1723
01:01:04,400 --> 01:01:05,920
so

1724
01:01:05,920 --> 01:01:07,680
at the highest of levels this is how

1725
01:01:07,680 --> 01:01:09,119
you've seen this diagram

1726
01:01:09,119 --> 01:01:11,359
in different shapes and forms before but

1727
01:01:11,359 --> 01:01:12,880
this is how the collect flow basically

1728
01:01:12,880 --> 01:01:13,760
works

1729
01:01:13,760 --> 01:01:14,799
um

1730
01:01:14,799 --> 01:01:16,319
you have a collector that interacts with

1731
01:01:16,319 --> 01:01:18,079
the the leader for the purposes of like

1732
01:01:18,079 --> 01:01:20,640
initiating a collection

1733
01:01:20,640 --> 01:01:23,200
which either in turn will trigger some

1734
01:01:23,200 --> 01:01:24,640
aggregation to happen between the

1735
01:01:24,640 --> 01:01:27,280
different aggregators um or aggregation

1736
01:01:27,280 --> 01:01:28,960
will happen preemptively depending on

1737
01:01:28,960 --> 01:01:31,680
what type of vdf is being used

1738
01:01:31,680 --> 01:01:34,000
once aggregation is done

1739
01:01:34,000 --> 01:01:35,520
the leader will produce basically an

1740
01:01:35,520 --> 01:01:37,200
aggregate share

1741
01:01:37,200 --> 01:01:39,440
or each aggregator approves an aggregate

1742
01:01:39,440 --> 01:01:40,240
share

1743
01:01:40,240 --> 01:01:41,760
um and then the collector will

1744
01:01:41,760 --> 01:01:44,720
eventually query the leader for this for

1745
01:01:44,720 --> 01:01:46,720
these aggregate shares um and then

1746
01:01:46,720 --> 01:01:48,799
combine them together to get the

1747
01:01:48,799 --> 01:01:50,559
the aggregate result

1748
01:01:50,559 --> 01:01:54,799
um uh each aggregator also maintains uh

1749
01:01:54,799 --> 01:01:56,640
during the aggregation

1750
01:01:56,640 --> 01:01:58,880
uh i guess flow of this in this

1751
01:01:58,880 --> 01:02:01,359
particular interaction uh all of the

1752
01:02:01,359 --> 01:02:03,119
individual reports that were submitted

1753
01:02:03,119 --> 01:02:04,839
by clients

1754
01:02:04,839 --> 01:02:05,920
um uh

1755
01:02:05,920 --> 01:02:06,559
the

1756
01:02:06,559 --> 01:02:08,079
the individual reports themselves as

1757
01:02:08,079 --> 01:02:09,599
well as as well as also sort of the

1758
01:02:09,599 --> 01:02:11,680
aggregates that are accumulated uh as

1759
01:02:11,680 --> 01:02:13,839
the aggregation happens such that it can

1760
01:02:13,839 --> 01:02:15,839
present them to the collector

1761
01:02:15,839 --> 01:02:17,200
um

1762
01:02:17,200 --> 01:02:19,599
and the requirements here are you know

1763
01:02:19,599 --> 01:02:22,559
how to um

1764
01:02:22,960 --> 01:02:25,839
in what ways can the the collector ask

1765
01:02:25,839 --> 01:02:27,599
the the aggregators for different

1766
01:02:27,599 --> 01:02:29,039
aggregate outputs

1767
01:02:29,039 --> 01:02:31,920
um such that the the the privacy

1768
01:02:31,920 --> 01:02:34,799
requirement um is

1769
01:02:34,799 --> 01:02:36,480
is satisfied

1770
01:02:36,480 --> 01:02:37,760
and by

1771
01:02:37,760 --> 01:02:40,000
the privacy requirement what we mean

1772
01:02:40,000 --> 01:02:42,240
basically is that the the aggregation

1773
01:02:42,240 --> 01:02:43,680
output

1774
01:02:43,680 --> 01:02:45,520
ensures that there's some minimum number

1775
01:02:45,520 --> 01:02:48,000
of reports that went into it

1776
01:02:48,000 --> 01:02:49,680
where a minimum number of reports is

1777
01:02:49,680 --> 01:02:51,200
something that's configured as part of a

1778
01:02:51,200 --> 01:02:54,000
measurement task in the system so all of

1779
01:02:54,000 --> 01:02:55,760
the entities that are participating for

1780
01:02:55,760 --> 01:02:58,000
a particular measurement

1781
01:02:58,000 --> 01:03:00,400
agree on what this this min batch size

1782
01:03:00,400 --> 01:03:03,039
is this minimum this minimum threshold

1783
01:03:03,039 --> 01:03:05,119
is

1784
01:03:05,119 --> 01:03:07,200
and the requirement is that

1785
01:03:07,200 --> 01:03:08,880
no matter how

1786
01:03:08,880 --> 01:03:11,440
how the collector chooses to query and

1787
01:03:11,440 --> 01:03:14,160
interact with the aggregators it cannot

1788
01:03:14,160 --> 01:03:17,760
produce or derive in any in any way

1789
01:03:17,760 --> 01:03:19,280
um a a

1790
01:03:19,280 --> 01:03:20,720
an aggregate

1791
01:03:20,720 --> 01:03:22,480
that was uh

1792
01:03:22,480 --> 01:03:24,160
based on fewer

1793
01:03:24,160 --> 01:03:26,799
reports than this that's risk threshold

1794
01:03:26,799 --> 01:03:27,839
um

1795
01:03:27,839 --> 01:03:29,039
there's also of course a correctness

1796
01:03:29,039 --> 01:03:31,599
requirement which is that

1797
01:03:31,599 --> 01:03:33,680
aggregation

1798
01:03:33,680 --> 01:03:35,599
that is either triggered by collection

1799
01:03:35,599 --> 01:03:37,280
um or happens

1800
01:03:37,280 --> 01:03:38,720
before collection actually that the

1801
01:03:38,720 --> 01:03:41,119
collect request actually comes in

1802
01:03:41,119 --> 01:03:42,799
includes

1803
01:03:42,799 --> 01:03:44,640
basically the same reports so if a

1804
01:03:44,640 --> 01:03:47,760
client uh uh you know

1805
01:03:47,760 --> 01:03:49,440
if there's uh

1806
01:03:49,440 --> 01:03:52,559
n reports from n different clients um uh

1807
01:03:52,559 --> 01:03:54,240
or n shares of n reports from n

1808
01:03:54,240 --> 01:03:56,240
different clients those are all included

1809
01:03:56,240 --> 01:03:59,039
in the same aggregate um and you know we

1810
01:03:59,039 --> 01:04:01,039
don't have like one aggregator

1811
01:04:01,039 --> 01:04:03,599
uh aggregating some set of report shares

1812
01:04:03,599 --> 01:04:05,440
and another aggregator aggregating a

1813
01:04:05,440 --> 01:04:06,720
different set of report shares because

1814
01:04:06,720 --> 01:04:08,559
the output would be garbage

1815
01:04:08,559 --> 01:04:09,760
um

1816
01:04:09,760 --> 01:04:11,280
so these are these are kind of two

1817
01:04:11,280 --> 01:04:12,799
informal goals of

1818
01:04:12,799 --> 01:04:14,000
collection

1819
01:04:14,000 --> 01:04:15,920
um and

1820
01:04:15,920 --> 01:04:17,280
try to walk through

1821
01:04:17,280 --> 01:04:20,000
why currently bpm does not satisfy the

1822
01:04:20,000 --> 01:04:21,920
latter goal

1823
01:04:21,920 --> 01:04:22,960
and

1824
01:04:22,960 --> 01:04:24,960
ask some questions that

1825
01:04:24,960 --> 01:04:27,119
hopefully get us towards thinking about

1826
01:04:27,119 --> 01:04:29,520
how it might satisfy this

1827
01:04:29,520 --> 01:04:32,319
later down the road

1828
01:04:33,280 --> 01:04:35,119
so

1829
01:04:35,119 --> 01:04:36,130
during aggregation

1830
01:04:36,130 --> 01:04:37,359
[Music]

1831
01:04:37,359 --> 01:04:39,520
aggregators kind of keep track of

1832
01:04:39,520 --> 01:04:41,359
individual report shares

1833
01:04:41,359 --> 01:04:45,039
in batches and batches are

1834
01:04:45,039 --> 01:04:47,240
divided over time

1835
01:04:47,240 --> 01:04:48,319
[Music]

1836
01:04:48,319 --> 01:04:50,960
where the the length of time is

1837
01:04:50,960 --> 01:04:53,359
some some parameter we call min batch

1838
01:04:53,359 --> 01:04:54,720
duration so

1839
01:04:54,720 --> 01:04:56,960
might be a day might be a week or an

1840
01:04:56,960 --> 01:04:59,359
hour whatever um

1841
01:04:59,359 --> 01:05:02,160
a report is tagged with a particular uh

1842
01:05:02,160 --> 01:05:04,880
time stamp effectively and that puts it

1843
01:05:04,880 --> 01:05:08,559
in one of these these time windows

1844
01:05:08,559 --> 01:05:09,359
and

1845
01:05:09,359 --> 01:05:11,680
uh collect requests when they're when

1846
01:05:11,680 --> 01:05:13,839
they are issued by the collector

1847
01:05:13,839 --> 01:05:17,599
indicate the the time window over which

1848
01:05:17,599 --> 01:05:19,839
the collector wants uh collection to

1849
01:05:19,839 --> 01:05:20,839
occur

1850
01:05:20,839 --> 01:05:26,319
um currently the the collect request uh

1851
01:05:26,319 --> 01:05:28,559
the parameters the the

1852
01:05:28,559 --> 01:05:30,400
correct collect request in particular

1853
01:05:30,400 --> 01:05:32,480
the time parameters must align with

1854
01:05:32,480 --> 01:05:34,960
batch window boundaries um so they must

1855
01:05:34,960 --> 01:05:37,200
align like uh on

1856
01:05:37,200 --> 01:05:40,319
the picture here on like uh t minus one

1857
01:05:40,319 --> 01:05:42,640
or a t or t plus one or whatever

1858
01:05:42,640 --> 01:05:44,079
um

1859
01:05:44,079 --> 01:05:45,200
and uh

1860
01:05:45,200 --> 01:05:47,119
and um

1861
01:05:47,119 --> 01:05:48,799
that that's effectively kind of the only

1862
01:05:48,799 --> 01:05:51,520
constraint

1863
01:05:51,520 --> 01:05:52,960
um

1864
01:05:52,960 --> 01:05:55,039
the the current validation for collect

1865
01:05:55,039 --> 01:05:56,880
requests is basically

1866
01:05:56,880 --> 01:05:59,359
uh it's composed of two steps the first

1867
01:05:59,359 --> 01:06:01,119
of which is to um

1868
01:06:01,119 --> 01:06:02,880
a check to see that the the time

1869
01:06:02,880 --> 01:06:04,400
parameter parameters do indeed align on

1870
01:06:04,400 --> 01:06:06,480
these batch window boundaries

1871
01:06:06,480 --> 01:06:08,559
um and the second of which is to make

1872
01:06:08,559 --> 01:06:09,680
sure that

1873
01:06:09,680 --> 01:06:13,039
for the given boundary or for the given

1874
01:06:13,039 --> 01:06:14,960
time window specified by a single

1875
01:06:14,960 --> 01:06:16,720
collect request

1876
01:06:16,720 --> 01:06:18,640
independent of any previous collect

1877
01:06:18,640 --> 01:06:19,680
requests

1878
01:06:19,680 --> 01:06:21,359
the number of reports that are covered

1879
01:06:21,359 --> 01:06:24,319
in that particular time window

1880
01:06:24,319 --> 01:06:26,240
exceeds the minimum threshold size is

1881
01:06:26,240 --> 01:06:28,640
min batch size

1882
01:06:28,640 --> 01:06:30,559
so as an example imagine you had a

1883
01:06:30,559 --> 01:06:33,760
collect request um for the window of t

1884
01:06:33,760 --> 01:06:35,280
minus one to t

1885
01:06:35,280 --> 01:06:37,280
if you were to look at the two criteria

1886
01:06:37,280 --> 01:06:38,799
here um

1887
01:06:38,799 --> 01:06:40,720
it's indeed a valid window because it

1888
01:06:40,720 --> 01:06:42,400
aligns on the boundaries

1889
01:06:42,400 --> 01:06:44,319
um and

1890
01:06:44,319 --> 01:06:46,400
totally arbitrary but like tried to draw

1891
01:06:46,400 --> 01:06:48,079
the picture such that it's like yes this

1892
01:06:48,079 --> 01:06:50,720
is a indeed a valid size um there's

1893
01:06:50,720 --> 01:06:52,079
enough reports

1894
01:06:52,079 --> 01:06:53,039
um

1895
01:06:53,039 --> 01:06:54,640
there's not too few many reports that go

1896
01:06:54,640 --> 01:06:56,960
in this particular window so both both

1897
01:06:56,960 --> 01:06:59,039
both criteria are met and in this

1898
01:06:59,039 --> 01:07:02,640
collect request would be satisfied

1899
01:07:03,440 --> 01:07:05,680
similarly you could ask for this collect

1900
01:07:05,680 --> 01:07:08,078
request

1901
01:07:08,240 --> 01:07:10,240
again time window is valid because it

1902
01:07:10,240 --> 01:07:12,880
aligns on the batch window boundaries

1903
01:07:12,880 --> 01:07:15,359
and the size is also valid because it

1904
01:07:15,359 --> 01:07:17,839
covers um simply more reports than the

1905
01:07:17,839 --> 01:07:20,000
previous collect request martin i just

1906
01:07:20,000 --> 01:07:21,359
noticed you're in the queue

1907
01:07:21,359 --> 01:07:22,640
i don't know when you joined the queue

1908
01:07:22,640 --> 01:07:24,720
but uh

1909
01:07:24,720 --> 01:07:28,160
is it a clarifying question

1910
01:07:28,160 --> 01:07:29,760
yeah um

1911
01:07:29,760 --> 01:07:31,280
so

1912
01:07:31,280 --> 01:07:33,680
how does the how does the collector know

1913
01:07:33,680 --> 01:07:35,680
how many events are in this

1914
01:07:35,680 --> 01:07:37,280
in this window when it goes to make the

1915
01:07:37,280 --> 01:07:38,880
query

1916
01:07:38,880 --> 01:07:41,520
how does the collector know

1917
01:07:41,520 --> 01:07:43,760
so if the collector's going to ask for

1918
01:07:43,760 --> 01:07:46,960
say t plus one and t plus two which have

1919
01:07:46,960 --> 01:07:49,359
what appears to be a total of one

1920
01:07:49,359 --> 01:07:52,079
uh sample submitted

1921
01:07:52,079 --> 01:07:52,880
uh

1922
01:07:52,880 --> 01:07:54,079
that's not going to meet your minimum

1923
01:07:54,079 --> 01:07:57,599
balance that's right

1924
01:07:57,599 --> 01:07:58,640
so

1925
01:07:58,640 --> 01:08:01,119
how does it know not to do that

1926
01:08:01,119 --> 01:08:03,520
it doesn't

1927
01:08:03,520 --> 01:08:06,720
wonderful okay thanks

1928
01:08:08,839 --> 01:08:10,799
um

1929
01:08:10,799 --> 01:08:12,640
right i mean the collector doesn't know

1930
01:08:12,640 --> 01:08:14,000
how many things go in the report until

1931
01:08:14,000 --> 01:08:15,440
it asks or how many things are

1932
01:08:15,440 --> 01:08:16,880
inaccurate

1933
01:08:16,880 --> 01:08:19,520
until it asks i guess and it gets an

1934
01:08:19,520 --> 01:08:21,279
output from the system uh indicating

1935
01:08:21,279 --> 01:08:23,120
that there were indeed enough

1936
01:08:23,120 --> 01:08:25,759
things in that particular window or no

1937
01:08:25,759 --> 01:08:27,198
that there were not enough things in the

1938
01:08:27,198 --> 01:08:28,799
window so an aggregate could not be

1939
01:08:28,799 --> 01:08:31,198
produced

1940
01:08:31,679 --> 01:08:34,000
but anyways um

1941
01:08:34,000 --> 01:08:35,679
if you look at these two

1942
01:08:35,679 --> 01:08:38,319
collect requests independently they seem

1943
01:08:38,319 --> 01:08:39,600
valid

1944
01:08:39,600 --> 01:08:42,238
they check both criteria

1945
01:08:42,238 --> 01:08:44,399
unfortunately however um it's pretty

1946
01:08:44,399 --> 01:08:47,920
trivial uh if you sort of only validate

1947
01:08:47,920 --> 01:08:50,399
that these collect requests

1948
01:08:50,399 --> 01:08:52,880
are valid in isolation

1949
01:08:52,880 --> 01:08:55,120
it's trivial for a malicious collector

1950
01:08:55,120 --> 01:08:58,479
to basically use the output to uh uh

1951
01:08:58,479 --> 01:09:00,158
compute an aggregate

1952
01:09:00,158 --> 01:09:02,319
that is composed of less than the

1953
01:09:02,319 --> 01:09:04,000
threshold um

1954
01:09:04,000 --> 01:09:06,000
if you think of these as just like uh

1955
01:09:06,000 --> 01:09:07,439
that they collect requests yielding like

1956
01:09:07,439 --> 01:09:09,359
a set of reports

1957
01:09:09,359 --> 01:09:10,380
um then

1958
01:09:10,380 --> 01:09:12,080
[Music]

1959
01:09:12,080 --> 01:09:13,520
you can just like compute the set

1960
01:09:13,520 --> 01:09:15,759
difference between the the first collect

1961
01:09:15,759 --> 01:09:17,198
request or the output from the first

1962
01:09:17,198 --> 01:09:18,560
collect request and the output from the

1963
01:09:18,560 --> 01:09:20,479
second collect request and in this

1964
01:09:20,479 --> 01:09:22,238
particular example that set difference

1965
01:09:22,238 --> 01:09:25,198
would yield exactly one record um or one

1966
01:09:25,198 --> 01:09:26,560
report

1967
01:09:26,560 --> 01:09:27,920
which is unique to

1968
01:09:27,920 --> 01:09:29,359
some client

1969
01:09:29,359 --> 01:09:31,198
breaking the informal privacy goal that

1970
01:09:31,198 --> 01:09:33,198
we had at the beginning

1971
01:09:33,198 --> 01:09:34,479
so this is clearly a problem and

1972
01:09:34,479 --> 01:09:36,799
something we need to fix um

1973
01:09:36,799 --> 01:09:38,000
so it's kind of an open issue in the

1974
01:09:38,000 --> 01:09:39,679
draft right now

1975
01:09:39,679 --> 01:09:41,040
um

1976
01:09:41,040 --> 01:09:42,960
another thing to consider in the collect

1977
01:09:42,960 --> 01:09:44,719
request flow and the collector in

1978
01:09:44,719 --> 01:09:46,640
general is that people may want to

1979
01:09:46,640 --> 01:09:49,600
collect or issue queries for parameters

1980
01:09:49,600 --> 01:09:50,479
that

1981
01:09:50,479 --> 01:09:52,080
are not only

1982
01:09:52,080 --> 01:09:54,880
constrained in time but also let's say

1983
01:09:54,880 --> 01:09:56,159
in space

1984
01:09:56,159 --> 01:09:58,880
so for example you might want to say

1985
01:09:58,880 --> 01:10:00,320
give me the aggregate for this

1986
01:10:00,320 --> 01:10:02,800
particular time window that came from

1987
01:10:02,800 --> 01:10:04,640
all clients that have the specific user

1988
01:10:04,640 --> 01:10:06,400
agent string

1989
01:10:06,400 --> 01:10:08,480
or you might want to say give me all the

1990
01:10:08,480 --> 01:10:09,520
aggregates

1991
01:10:09,520 --> 01:10:11,920
in this time window for reports that

1992
01:10:11,920 --> 01:10:13,440
came from this particular geographic

1993
01:10:13,440 --> 01:10:14,320
region

1994
01:10:14,320 --> 01:10:15,840
to allow you to sort of drill down into

1995
01:10:15,840 --> 01:10:18,480
errors um if like for example these are

1996
01:10:18,480 --> 01:10:20,159
like measurements you're collecting from

1997
01:10:20,159 --> 01:10:22,400
the perspective of what web browser

1998
01:10:22,400 --> 01:10:23,440
um

1999
01:10:23,440 --> 01:10:25,199
and currently the collect request is

2000
01:10:25,199 --> 01:10:27,679
only parameterized in time and has no

2001
01:10:27,679 --> 01:10:29,920
notion of space and indeed like the the

2002
01:10:29,920 --> 01:10:31,679
protocol itself is completely unaware of

2003
01:10:31,679 --> 01:10:34,239
this like additional like metadata so to

2004
01:10:34,239 --> 01:10:36,480
speak

2005
01:10:37,280 --> 01:10:38,719
um

2006
01:10:38,719 --> 01:10:43,199
so given these two things um uh the the

2007
01:10:43,199 --> 01:10:46,080
the the desire to sort of maintain this

2008
01:10:46,080 --> 01:10:49,360
um uh this informal privacy goal stated

2009
01:10:49,360 --> 01:10:53,280
above our previously as well as um

2010
01:10:53,280 --> 01:10:55,679
as well as the uh potential flexibility

2011
01:10:55,679 --> 01:10:57,040
you might want you might want in time

2012
01:10:57,040 --> 01:10:59,199
and space um

2013
01:10:59,199 --> 01:11:00,080
i think

2014
01:11:00,080 --> 01:11:02,080
the

2015
01:11:02,080 --> 01:11:03,760
the

2016
01:11:03,760 --> 01:11:04,880
real

2017
01:11:04,880 --> 01:11:06,960
privacy goal can kind of be stated as

2018
01:11:06,960 --> 01:11:09,040
such at the top um

2019
01:11:09,040 --> 01:11:12,560
and that is like any any sequence of

2020
01:11:12,560 --> 01:11:15,600
collect requests um with any

2021
01:11:15,600 --> 01:11:18,159
time and space constraint parameters

2022
01:11:18,159 --> 01:11:18,960
um

2023
01:11:18,960 --> 01:11:20,800
given any of this any any particular

2024
01:11:20,800 --> 01:11:22,960
sequence the collector must not be able

2025
01:11:22,960 --> 01:11:26,560
to produce deduce compute whatever uh an

2026
01:11:26,560 --> 01:11:29,120
aggregate that is composed of less than

2027
01:11:29,120 --> 01:11:32,159
um the threshold number of report shares

2028
01:11:32,159 --> 01:11:34,080
um

2029
01:11:34,080 --> 01:11:36,320
and uh this is it's fairly it would be

2030
01:11:36,320 --> 01:11:38,400
fairly easy to sort of enforce this rule

2031
01:11:38,400 --> 01:11:41,120
um if the protocol was aware of the sort

2032
01:11:41,120 --> 01:11:43,040
of space dimension um

2033
01:11:43,040 --> 01:11:44,000
uh

2034
01:11:44,000 --> 01:11:45,520
how that's actually done mechanically

2035
01:11:45,520 --> 01:11:47,440
like how reports are tagged in space

2036
01:11:47,440 --> 01:11:49,120
like they are in time is sort of an open

2037
01:11:49,120 --> 01:11:50,159
question

2038
01:11:50,159 --> 01:11:51,679
do we want to even do that as an open

2039
01:11:51,679 --> 01:11:53,600
question

2040
01:11:53,600 --> 01:11:56,159
but i think i think we like there we

2041
01:11:56,159 --> 01:11:58,080
understand fairly well how we would

2042
01:11:58,080 --> 01:11:59,840
implement this um it's just a question

2043
01:11:59,840 --> 01:12:01,600
of how this how these different uh

2044
01:12:01,600 --> 01:12:03,360
constraints and parameters are expressed

2045
01:12:03,360 --> 01:12:05,679
in the collect request

2046
01:12:05,679 --> 01:12:09,719
uh sam do you have a question

2047
01:12:11,199 --> 01:12:14,000
sorry not as chair

2048
01:12:14,000 --> 01:12:15,360
tell me about how you deal with civil

2049
01:12:15,360 --> 01:12:16,480
attacks here how do you keep the

2050
01:12:16,480 --> 01:12:18,239
collector itself from

2051
01:12:18,239 --> 01:12:20,239
being some civil

2052
01:12:20,239 --> 01:12:22,000
contributor

2053
01:12:22,000 --> 01:12:24,080
uh civil attacks are a different issue

2054
01:12:24,080 --> 01:12:26,320
entirely i think um and i'm not trying

2055
01:12:26,320 --> 01:12:28,560
to address them in this particular this

2056
01:12:28,560 --> 01:12:30,640
particular uh discussion

2057
01:12:30,640 --> 01:12:32,719
um we do have to have like

2058
01:12:32,719 --> 01:12:35,199
accommodations for civil attacks like

2059
01:12:35,199 --> 01:12:37,040
either clients themselves introducing

2060
01:12:37,040 --> 01:12:38,719
random reports or leaders themselves

2061
01:12:38,719 --> 01:12:41,679
introducing random reports um

2062
01:12:41,679 --> 01:12:44,000
but that's separate from

2063
01:12:44,000 --> 01:12:46,400
how the how the collector

2064
01:12:46,400 --> 01:12:50,159
queries for things and tries to produce

2065
01:12:50,159 --> 01:12:51,520
or tries to violate the privacy

2066
01:12:51,520 --> 01:12:54,080
requirements

2067
01:12:55,920 --> 01:12:58,640
i i'm i'm not convinced this to being

2068
01:12:58,640 --> 01:13:00,000
separate but i'll wait to hear this

2069
01:13:00,000 --> 01:13:01,760
later

2070
01:13:01,760 --> 01:13:03,120
okay

2071
01:13:03,120 --> 01:13:05,600
um so uh

2072
01:13:05,600 --> 01:13:08,159
the questions i have for the group um

2073
01:13:08,159 --> 01:13:10,880
basically uh i first is is the

2074
01:13:10,880 --> 01:13:12,719
validation problem clear

2075
01:13:12,719 --> 01:13:16,840
um in particular is uh as

2076
01:13:16,840 --> 01:13:19,280
um uh like the current issue in the

2077
01:13:19,280 --> 01:13:21,199
draft i have described it is it clear

2078
01:13:21,199 --> 01:13:23,600
and understandable to folks um is the

2079
01:13:23,600 --> 01:13:26,560
sort of informal privacy requirement um

2080
01:13:26,560 --> 01:13:28,320
uh also clear

2081
01:13:28,320 --> 01:13:29,440
uh

2082
01:13:29,440 --> 01:13:34,080
and if so um how do we want to sort of

2083
01:13:34,080 --> 01:13:36,719
augment the protocol if at all to

2084
01:13:36,719 --> 01:13:39,760
accommodate queries

2085
01:13:39,760 --> 01:13:41,040
to

2086
01:13:41,040 --> 01:13:43,440
or allow people to query

2087
01:13:43,440 --> 01:13:45,360
on the basis of time as well as

2088
01:13:45,360 --> 01:13:48,080
potentially on the basis of space

2089
01:13:48,080 --> 01:13:50,640
or like you might imagine

2090
01:13:50,640 --> 01:13:52,640
just simply relying on the fact that the

2091
01:13:52,640 --> 01:13:54,400
aggregation

2092
01:13:54,400 --> 01:13:56,640
protocol itself will always

2093
01:13:56,640 --> 01:13:58,000
yield

2094
01:13:58,000 --> 01:13:59,440
or the output of the aggregation

2095
01:13:59,440 --> 01:14:01,840
protocol will always ensure that both

2096
01:14:01,840 --> 01:14:04,000
aggregators agree on the same

2097
01:14:04,000 --> 01:14:05,120
um

2098
01:14:05,120 --> 01:14:06,480
the same reports that went into a

2099
01:14:06,480 --> 01:14:08,560
particular aggregate so you may not need

2100
01:14:08,560 --> 01:14:11,600
to specify in in full detail for example

2101
01:14:11,600 --> 01:14:12,719
how

2102
01:14:12,719 --> 01:14:17,040
uh how collection requests are

2103
01:14:19,040 --> 01:14:21,040
exactly how the validation criteria is

2104
01:14:21,040 --> 01:14:23,120
is to be enforced you might just rely on

2105
01:14:23,120 --> 01:14:24,400
the fact that the aggregate protocol

2106
01:14:24,400 --> 01:14:26,840
sort of enforces that for you

2107
01:14:26,840 --> 01:14:29,280
um uh and there's probably other

2108
01:14:29,280 --> 01:14:30,480
questions as well

2109
01:14:30,480 --> 01:14:31,600
um

2110
01:14:31,600 --> 01:14:34,000
stephen

2111
01:14:38,560 --> 01:14:40,960
hi steven farrell uh so chris you talked

2112
01:14:40,960 --> 01:14:42,560
about time and space in privacy pass

2113
01:14:42,560 --> 01:14:43,840
yesterday and those are a different

2114
01:14:43,840 --> 01:14:46,159
space

2115
01:14:46,480 --> 01:14:48,480
uh sorry i just heard privacy pass it

2116
01:14:48,480 --> 01:14:49,840
was very quiet

2117
01:14:49,840 --> 01:14:52,480
sorry so so yesterday in privacy past

2118
01:14:52,480 --> 01:14:54,159
the phrase you know that the concept of

2119
01:14:54,159 --> 01:14:55,840
time and space was used but in a

2120
01:14:55,840 --> 01:14:57,280
different way right

2121
01:14:57,280 --> 01:14:59,440
yeah

2122
01:14:59,600 --> 01:15:00,960
i i wasn't sure i liked it then but i

2123
01:15:00,960 --> 01:15:03,040
definitely don't like it here i think

2124
01:15:03,040 --> 01:15:04,880
because what you're saying what you're

2125
01:15:04,880 --> 01:15:06,880
saying about space here is really

2126
01:15:06,880 --> 01:15:08,640
anything you can query on or something

2127
01:15:08,640 --> 01:15:12,960
is it what it's not a single dimension

2128
01:15:13,120 --> 01:15:15,440
um

2129
01:15:15,440 --> 01:15:17,360
yeah i get i mean i i tend to think of

2130
01:15:17,360 --> 01:15:19,920
it as like just a bit string um you know

2131
01:15:19,920 --> 01:15:22,000
the bit string might be like you might

2132
01:15:22,000 --> 01:15:23,199
might encode like the user agent and

2133
01:15:23,199 --> 01:15:25,280
bitstream might include like geographic

2134
01:15:25,280 --> 01:15:28,159
data in the bitstream but um

2135
01:15:28,159 --> 01:15:29,840
i guess depends on your definition of

2136
01:15:29,840 --> 01:15:33,040
what space is um i think going back to

2137
01:15:33,040 --> 01:15:34,000
the

2138
01:15:34,000 --> 01:15:36,159
examples is probably the easiest way to

2139
01:15:36,159 --> 01:15:38,400
think of space so like

2140
01:15:38,400 --> 01:15:40,800
you you know imagine like the the space

2141
01:15:40,800 --> 01:15:42,159
constraints being

2142
01:15:42,159 --> 01:15:43,679
uh

2143
01:15:43,679 --> 01:15:45,760
a fixed set of user agents

2144
01:15:45,760 --> 01:15:48,159
um and each report being associated with

2145
01:15:48,159 --> 01:15:50,640
a particular user agent or something

2146
01:15:50,640 --> 01:15:52,480
yeah okay so so i guess i'd like to

2147
01:15:52,480 --> 01:15:54,320
understand that better because

2148
01:15:54,320 --> 01:15:55,920
being able to query on the ua string

2149
01:15:55,920 --> 01:15:57,760
implies that the ua string is visible to

2150
01:15:57,760 --> 01:15:59,520
all these entities right

2151
01:15:59,520 --> 01:16:01,280
that's right i think that's that's a

2152
01:16:01,280 --> 01:16:03,199
necessary requirement if you want to and

2153
01:16:03,199 --> 01:16:04,000
like

2154
01:16:04,000 --> 01:16:06,960
enforce the privacy requirement on the

2155
01:16:06,960 --> 01:16:09,520
basis uh if you want to allow people to

2156
01:16:09,520 --> 01:16:11,040
query based on these additional

2157
01:16:11,040 --> 01:16:12,800
parameters then i think those parameters

2158
01:16:12,800 --> 01:16:14,159
need to be visible to the people who

2159
01:16:14,159 --> 01:16:17,679
enforce the the validation uh criteria

2160
01:16:17,679 --> 01:16:20,000
right okay so i think i'd i'd like to

2161
01:16:20,000 --> 01:16:22,960
understand how we define space in other

2162
01:16:22,960 --> 01:16:24,400
words what we make visible to all these

2163
01:16:24,400 --> 01:16:25,360
entities

2164
01:16:25,360 --> 01:16:27,120
yeah i think that's it

2165
01:16:27,120 --> 01:16:28,560
over the development of the protocol i'm

2166
01:16:28,560 --> 01:16:30,640
not asking we do understand it right now

2167
01:16:30,640 --> 01:16:33,120
yeah yeah i think that's a good point um

2168
01:16:33,120 --> 01:16:34,880
and i think this goes to how much uh

2169
01:16:34,880 --> 01:16:36,800
sort of flexibility query flexibility

2170
01:16:36,800 --> 01:16:39,440
you want in the collect flow um

2171
01:16:39,440 --> 01:16:42,080
uh whether or not you you want to allow

2172
01:16:42,080 --> 01:16:43,760
that like any of this additional data to

2173
01:16:43,760 --> 01:16:45,920
be expressed and and

2174
01:16:45,920 --> 01:16:47,840
as a result be sort of exposed to the

2175
01:16:47,840 --> 01:16:49,120
aggregators

2176
01:16:49,120 --> 01:16:52,320
um or not um

2177
01:16:52,320 --> 01:16:54,080
the utility of the collection sort of

2178
01:16:54,080 --> 01:16:55,679
depends on you know what information is

2179
01:16:55,679 --> 01:16:58,679
available

2180
01:17:02,239 --> 01:17:04,239
thanks uh in the interest of time i

2181
01:17:04,239 --> 01:17:06,239
think we should move to tim's

2182
01:17:06,239 --> 01:17:09,239
presentation

2183
01:17:17,520 --> 01:17:19,920
thank you uh okay i'm gonna attempt fate

2184
01:17:19,920 --> 01:17:24,000
and try to share pdf here

2185
01:17:29,679 --> 01:17:30,640
all right

2186
01:17:30,640 --> 01:17:32,159
cool that works

2187
01:17:32,159 --> 01:17:35,120
okay um

2188
01:17:35,840 --> 01:17:38,320
all right look let's get into it uh so

2189
01:17:38,320 --> 01:17:39,760
bear with me a number of these uh i

2190
01:17:39,760 --> 01:17:41,679
think a lot of our material today

2191
01:17:41,679 --> 01:17:43,520
was uh written under the assumption that

2192
01:17:43,520 --> 01:17:44,880
the folks have a lot of familiarity with

2193
01:17:44,880 --> 01:17:46,719
the draft so

2194
01:17:46,719 --> 01:17:48,080
uh yeah bear with me if a lot of this

2195
01:17:48,080 --> 01:17:50,560
gets too technical or uh

2196
01:17:50,560 --> 01:17:52,800
too into detail about the state of draft

2197
01:17:52,800 --> 01:17:55,520
one okay so we're going to talk now

2198
01:17:55,520 --> 01:17:56,719
about

2199
01:17:56,719 --> 01:17:58,400
uh the the current officer after the

2200
01:17:58,400 --> 01:17:59,920
specification that we've been working on

2201
01:17:59,920 --> 01:18:01,760
as well as some work uh that a few of us

2202
01:18:01,760 --> 01:18:04,080
have been doing that goes uh beyond that

2203
01:18:04,080 --> 01:18:06,480
draft

2204
01:18:06,480 --> 01:18:08,080
cool all right so in anticipation of

2205
01:18:08,080 --> 01:18:09,440
this week's meeting

2206
01:18:09,440 --> 01:18:10,880
we submitted a new author's draft of the

2207
01:18:10,880 --> 01:18:13,920
ppm specification which is draft01 which

2208
01:18:13,920 --> 01:18:15,600
contains quite a lot of changes relative

2209
01:18:15,600 --> 01:18:17,120
to graph zero zero that was submitted

2210
01:18:17,120 --> 01:18:19,920
back at ietf112 for the for the buff

2211
01:18:19,920 --> 01:18:20,880
we're going to cover a number of those

2212
01:18:20,880 --> 01:18:22,719
changes as we work through this deck

2213
01:18:22,719 --> 01:18:24,719
but first let's talk about the status of

2214
01:18:24,719 --> 01:18:27,840
this current draft

2215
01:18:27,840 --> 01:18:30,719
so to briskly recap um this draft

2216
01:18:30,719 --> 01:18:32,480
specifies ppm which is a framework a

2217
01:18:32,480 --> 01:18:33,840
protocol framework for privately

2218
01:18:33,840 --> 01:18:35,679
computing aggregate functions it's based

2219
01:18:35,679 --> 01:18:37,600
on prio but we've generalized from there

2220
01:18:37,600 --> 01:18:38,560
so that it can work with any

2221
01:18:38,560 --> 01:18:40,800
instantiation of a verifiable

2222
01:18:40,800 --> 01:18:43,040
distributed aggregation function which

2223
01:18:43,040 --> 01:18:44,400
is a specification that's being

2224
01:18:44,400 --> 01:18:46,800
discussed in the cfrg

2225
01:18:46,800 --> 01:18:48,640
ppm is designed to coordinate the

2226
01:18:48,640 --> 01:18:50,960
execution of vdafs across multiple

2227
01:18:50,960 --> 01:18:53,440
non-colluding aggregators

2228
01:18:53,440 --> 01:18:54,880
and the sharing of inputs across both

2229
01:18:54,880 --> 01:18:56,800
servers is how ppm deployments provide

2230
01:18:56,800 --> 01:18:58,880
meaningful privacy to users

2231
01:18:58,880 --> 01:19:01,120
uh so azure explained to us earlier this

2232
01:19:01,120 --> 01:19:03,040
targets a variety of motivating use

2233
01:19:03,040 --> 01:19:05,040
cases ranging from simple statistics to

2234
01:19:05,040 --> 01:19:08,080
the heavy hitters problem

2235
01:19:08,080 --> 01:19:10,000
all right uh we also

2236
01:19:10,000 --> 01:19:13,520
uh covered earlier very briskly how ppm

2237
01:19:13,520 --> 01:19:15,280
is composed of three different uh sub

2238
01:19:15,280 --> 01:19:17,760
protocols that execute simultaneously uh

2239
01:19:17,760 --> 01:19:20,000
the upload flow is for clients to

2240
01:19:20,000 --> 01:19:22,320
um secret share their their input and

2241
01:19:22,320 --> 01:19:24,560
upload them to aggregators

2242
01:19:24,560 --> 01:19:26,320
uh the aggregation flow is where the

2243
01:19:26,320 --> 01:19:28,800
leader and helper uh interact to verify

2244
01:19:28,800 --> 01:19:31,120
the validity of inputs and then

2245
01:19:31,120 --> 01:19:32,239
aggregate the reports and compute

2246
01:19:32,239 --> 01:19:33,920
aggregate shares and finally the collect

2247
01:19:33,920 --> 01:19:36,159
flow uh which chris would just give us

2248
01:19:36,159 --> 01:19:37,440
some insight into

2249
01:19:37,440 --> 01:19:39,679
is how the collector gets uh aggregate

2250
01:19:39,679 --> 01:19:41,440
shares from the leader to get final

2251
01:19:41,440 --> 01:19:43,839
results

2252
01:19:44,800 --> 01:19:45,679
so

2253
01:19:45,679 --> 01:19:47,760
um we know from some experience that

2254
01:19:47,760 --> 01:19:50,640
draft 001 is almost fully implementable

2255
01:19:50,640 --> 01:19:52,400
at least like the happy path of

2256
01:19:52,400 --> 01:19:53,679
uploading reports and computing

2257
01:19:53,679 --> 01:19:55,440
aggregates is implementable

2258
01:19:55,440 --> 01:19:57,360
and we feel it satisfies the the key

2259
01:19:57,360 --> 01:19:59,520
deliverables defined in the ppm working

2260
01:19:59,520 --> 01:20:02,320
groups charters so in particular we have

2261
01:20:02,320 --> 01:20:04,000
mechanisms for client submission of

2262
01:20:04,000 --> 01:20:06,719
measurements uh for the the joint

2263
01:20:06,719 --> 01:20:08,560
evaluation of proofs of validity of

2264
01:20:08,560 --> 01:20:09,840
those measurements and for the

2265
01:20:09,840 --> 01:20:11,520
computation of aggregates to be

2266
01:20:11,520 --> 01:20:13,760
delivered to some recipient

2267
01:20:13,760 --> 01:20:15,280
and all of these are defined in a way

2268
01:20:15,280 --> 01:20:16,840
that makes them flexible enough to

2269
01:20:16,840 --> 01:20:18,960
accommodate uh multiple underlying

2270
01:20:18,960 --> 01:20:22,880
algorithms through the vdaf abstraction

2271
01:20:22,880 --> 01:20:24,400
um so we're going to discuss later i

2272
01:20:24,400 --> 01:20:27,040
think adoption of this draft uh but i

2273
01:20:27,040 --> 01:20:28,639
suppose we i want to say at the stage

2274
01:20:28,639 --> 01:20:30,800
that well we think that this draft is

2275
01:20:30,800 --> 01:20:32,560
good enough to be adopted by uh the

2276
01:20:32,560 --> 01:20:34,000
working group

2277
01:20:34,000 --> 01:20:37,360
okay on more on that later i suppose

2278
01:20:37,360 --> 01:20:40,400
uh moving on so going past draft zero

2279
01:20:40,400 --> 01:20:42,080
one um

2280
01:20:42,080 --> 01:20:44,880
we at isrg and uh our colleague with the

2281
01:20:44,880 --> 01:20:47,040
club research team we've been working on

2282
01:20:47,040 --> 01:20:49,040
a set of proposed changes that we're

2283
01:20:49,040 --> 01:20:52,480
calling them interoperability target

2284
01:20:52,480 --> 01:20:53,920
so our teams have been independently

2285
01:20:53,920 --> 01:20:55,520
implementing the specification and our

2286
01:20:55,520 --> 01:20:57,120
objective is to get our aggregator

2287
01:20:57,120 --> 01:20:58,800
implementations to talk to each other in

2288
01:20:58,800 --> 01:21:00,480
an experimental setup

2289
01:21:00,480 --> 01:21:01,679
um so we've been taking the things that

2290
01:21:01,679 --> 01:21:04,480
we learn while we write code

2291
01:21:04,480 --> 01:21:06,480
and uh we're integrating them into a set

2292
01:21:06,480 --> 01:21:08,159
of specification changes

2293
01:21:08,159 --> 01:21:10,080
uh that we're calling an in-drop target

2294
01:21:10,080 --> 01:21:13,040
which is um a set which

2295
01:21:13,040 --> 01:21:15,280
excuse me uh which is meant to be an

2296
01:21:15,280 --> 01:21:16,800
iteration on draft zero one that we

2297
01:21:16,800 --> 01:21:19,040
think can actually be implemented

2298
01:21:19,040 --> 01:21:20,960
so uh our goals here are to run a

2299
01:21:20,960 --> 01:21:22,880
deployment of ppm using the prio three

2300
01:21:22,880 --> 01:21:26,320
based vdas since the popular one uh vdaf

2301
01:21:26,320 --> 01:21:28,480
isn't uh quite ready yet so bizarre to

2302
01:21:28,480 --> 01:21:30,159
let us hammer out a bunch of interesting

2303
01:21:30,159 --> 01:21:31,760
protocol edge cases and some important

2304
01:21:31,760 --> 01:21:33,440
error handling scenarios and we're

2305
01:21:33,440 --> 01:21:34,800
hoping to learn a lot about which parts

2306
01:21:34,800 --> 01:21:36,639
of specification are difficult either to

2307
01:21:36,639 --> 01:21:38,719
implement or operationally

2308
01:21:38,719 --> 01:21:40,560
and what we'll learn can then be fed

2309
01:21:40,560 --> 01:21:43,280
back into uh discussions in the working

2310
01:21:43,280 --> 01:21:45,199
group and has proposed changes to the

2311
01:21:45,199 --> 01:21:47,919
specification

2312
01:21:48,159 --> 01:21:50,000
okay so let's look at where we're at

2313
01:21:50,000 --> 01:21:52,320
today with development um so the most

2314
01:21:52,320 --> 01:21:53,840
substantial piece of progress that we

2315
01:21:53,840 --> 01:21:55,840
can report is that the specification of

2316
01:21:55,840 --> 01:21:57,199
the 303

2317
01:21:57,199 --> 01:22:00,159
vdas is has matured quite a bit so you

2318
01:22:00,159 --> 01:22:01,920
can take a look at that in draft zero

2319
01:22:01,920 --> 01:22:03,840
one of the vdif document which was

2320
01:22:03,840 --> 01:22:06,480
presented to cfrg i believe yesterday by

2321
01:22:06,480 --> 01:22:09,360
chris patton and his co-authors

2322
01:22:09,360 --> 01:22:10,320
so we also have a complete

2323
01:22:10,320 --> 01:22:12,400
implementation of that draft of 303

2324
01:22:12,400 --> 01:22:14,480
vdafs along with test vectors for them

2325
01:22:14,480 --> 01:22:16,080
in librio rs

2326
01:22:16,080 --> 01:22:17,360
uh which is going to be used in both the

2327
01:22:17,360 --> 01:22:19,520
cloudflare and icerg ppm implementations

2328
01:22:19,520 --> 01:22:21,360
and hopefully others in the future

2329
01:22:21,360 --> 01:22:22,239
so of course you can find those

2330
01:22:22,239 --> 01:22:23,840
documents and implementation up on

2331
01:22:23,840 --> 01:22:25,600
github

2332
01:22:25,600 --> 01:22:28,239
or on the data tracker at these links

2333
01:22:28,239 --> 01:22:29,120
um

2334
01:22:29,120 --> 01:22:32,159
so we i srg also currently have a toy

2335
01:22:32,159 --> 01:22:34,560
implementation of ppm somewhere around

2336
01:22:34,560 --> 01:22:36,239
draft01

2337
01:22:36,239 --> 01:22:37,440
it's missing a number of important

2338
01:22:37,440 --> 01:22:39,280
protocol features and it's really just a

2339
01:22:39,280 --> 01:22:40,880
toy that couldn't actually be deployed

2340
01:22:40,880 --> 01:22:42,800
onto the internet uh it can only talk to

2341
01:22:42,800 --> 01:22:44,560
itself not to any other implementations

2342
01:22:44,560 --> 01:22:46,719
and it has no persistent story but it

2343
01:22:46,719 --> 01:22:49,120
does demonstrate that the happy path of

2344
01:22:49,120 --> 01:22:50,880
the protocol can be implemented at end

2345
01:22:50,880 --> 01:22:53,440
to end that also is up on github if

2346
01:22:53,440 --> 01:22:55,280
you're interested

2347
01:22:55,280 --> 01:22:57,440
uh and finally both uh cloudflare and

2348
01:22:57,440 --> 01:22:59,280
isrg we're working on actual deployable

2349
01:22:59,280 --> 01:23:01,199
implementations of

2350
01:23:01,199 --> 01:23:03,840
the evolving interop target

2351
01:23:03,840 --> 01:23:06,000
ours is up on github and cloudflares

2352
01:23:06,000 --> 01:23:07,920
should be open source and public in the

2353
01:23:07,920 --> 01:23:10,480
near future

2354
01:23:10,719 --> 01:23:12,480
okay now let's turn to looking at like

2355
01:23:12,480 --> 01:23:13,520
what

2356
01:23:13,520 --> 01:23:15,040
what proposed changes are we proposing

2357
01:23:15,040 --> 01:23:19,440
in the interoperable protocol so far um

2358
01:23:19,600 --> 01:23:21,040
so

2359
01:23:21,040 --> 01:23:22,960
let's talk about the aggregate phase so

2360
01:23:22,960 --> 01:23:24,639
as we discussed earlier right ppm is

2361
01:23:24,639 --> 01:23:26,880
made up of three sub protocols um upload

2362
01:23:26,880 --> 01:23:29,280
aggregate and collect um the meat of the

2363
01:23:29,280 --> 01:23:31,040
complexity lives in the aggregate flow

2364
01:23:31,040 --> 01:23:32,960
uh and it's consists of the coordinated

2365
01:23:32,960 --> 01:23:34,639
execution

2366
01:23:34,639 --> 01:23:39,120
of a vdaf across the two aggregators

2367
01:23:39,120 --> 01:23:40,719
we also refer to this frequently as

2368
01:23:40,719 --> 01:23:43,040
preparing inputs and what that means is

2369
01:23:43,040 --> 01:23:44,800
taking input shares and transforming

2370
01:23:44,800 --> 01:23:46,239
them into output chairs that can be

2371
01:23:46,239 --> 01:23:48,560
summed into aggregates uh so what that

2372
01:23:48,560 --> 01:23:50,560
means depends on the particular vdaf it

2373
01:23:50,560 --> 01:23:51,840
could just mean

2374
01:23:51,840 --> 01:23:52,639
uh

2375
01:23:52,639 --> 01:23:54,960
evaluating the the validity proof or in

2376
01:23:54,960 --> 01:23:56,719
some other vdfs there might be some more

2377
01:23:56,719 --> 01:23:58,880
significant transformation

2378
01:23:58,880 --> 01:23:59,679
um

2379
01:23:59,679 --> 01:24:01,760
all right so i spelled out currently in

2380
01:24:01,760 --> 01:24:04,080
draft zero one uh the specification

2381
01:24:04,080 --> 01:24:06,239
lacks sufficient detail to really be

2382
01:24:06,239 --> 01:24:07,360
implemented

2383
01:24:07,360 --> 01:24:09,280
uh so one of the things that the interop

2384
01:24:09,280 --> 01:24:11,199
target does is to be more detailed about

2385
01:24:11,199 --> 01:24:12,880
how to detect and handle disagreements

2386
01:24:12,880 --> 01:24:14,960
between the aggregators um we've also

2387
01:24:14,960 --> 01:24:17,520
updated ppm to use the current verbs and

2388
01:24:17,520 --> 01:24:19,679
message types are defined in draft zero

2389
01:24:19,679 --> 01:24:23,760
one of the vdif specification

2390
01:24:24,880 --> 01:24:25,840
so

2391
01:24:25,840 --> 01:24:28,639
above the vdaf level we uh

2392
01:24:28,639 --> 01:24:30,639
we also relative to draft zero zero

2393
01:24:30,639 --> 01:24:32,159
excuse me relative drop zero one have

2394
01:24:32,159 --> 01:24:33,679
eliminated what was called the helper

2395
01:24:33,679 --> 01:24:35,199
state blob

2396
01:24:35,199 --> 01:24:37,440
so in back and draft zero zero we had

2397
01:24:37,440 --> 01:24:39,840
the goal of having no storage

2398
01:24:39,840 --> 01:24:42,000
requirements for helpers so the goal

2399
01:24:42,000 --> 01:24:44,159
there was to foster a diversity of

2400
01:24:44,159 --> 01:24:46,159
aggregator operator by making it as easy

2401
01:24:46,159 --> 01:24:48,320
as possible for anyone to run a helper

2402
01:24:48,320 --> 01:24:50,000
with minimal infrastructure requirements

2403
01:24:50,000 --> 01:24:52,080
or operational overhead

2404
01:24:52,080 --> 01:24:54,480
um but aggregating shares into vdaf is

2405
01:24:54,480 --> 01:24:56,480
inevitably a stateful process

2406
01:24:56,480 --> 01:24:58,239
that's because the coordinated

2407
01:24:58,239 --> 01:24:59,280
evaluation of the proofs is a

2408
01:24:59,280 --> 01:25:01,120
multi-round protocol and there's a state

2409
01:25:01,120 --> 01:25:03,040
that carries over from one uh one round

2410
01:25:03,040 --> 01:25:04,239
to the next

2411
01:25:04,239 --> 01:25:06,159
the vdfs that we envisioned currently so

2412
01:25:06,159 --> 01:25:08,400
again that's uh pre the different 303

2413
01:25:08,400 --> 01:25:11,840
based ones and popular one are all uh uh

2414
01:25:11,840 --> 01:25:13,679
two round protocols but you could have

2415
01:25:13,679 --> 01:25:15,600
arbitrarily many rounds and bdafs that

2416
01:25:15,600 --> 01:25:18,480
come along in the future

2417
01:25:18,639 --> 01:25:20,639
um

2418
01:25:20,639 --> 01:25:22,719
excuse me where was i okay right so our

2419
01:25:22,719 --> 01:25:25,120
solution back and direct uh in draft

2420
01:25:25,120 --> 01:25:27,040
zero zero drop zero one was to shift the

2421
01:25:27,040 --> 01:25:28,639
burden of storage onto the leader by

2422
01:25:28,639 --> 01:25:30,480
having hold on to the helpers encoded

2423
01:25:30,480 --> 01:25:32,000
state across the sequence of aggregate

2424
01:25:32,000 --> 01:25:33,760
protocol requests

2425
01:25:33,760 --> 01:25:35,280
so we see this illustrated in the

2426
01:25:35,280 --> 01:25:37,679
sequence diagram over here on the right

2427
01:25:37,679 --> 01:25:38,719
um

2428
01:25:38,719 --> 01:25:40,080
in the first request the leader is

2429
01:25:40,080 --> 01:25:42,800
sending to the helper a uh a sequence of

2430
01:25:42,800 --> 01:25:44,400
reports of encrypted report chairs along

2431
01:25:44,400 --> 01:25:45,600
with some other parameters needed for

2432
01:25:45,600 --> 01:25:47,679
aggregation uh upon receipt the helper

2433
01:25:47,679 --> 01:25:49,679
decrypts his report shares and then runs

2434
01:25:49,679 --> 01:25:52,239
the vdaf prepare start algorithm which

2435
01:25:52,239 --> 01:25:54,000
yields a sequence of prepare messages

2436
01:25:54,000 --> 01:25:56,400
and some state related to preparation so

2437
01:25:56,400 --> 01:25:58,000
the helper would serialize the state and

2438
01:25:58,000 --> 01:25:59,280
send it to the leader along with the

2439
01:25:59,280 --> 01:26:01,280
first round prepare messages

2440
01:26:01,280 --> 01:26:04,000
the leader next combines the the help

2441
01:26:04,000 --> 01:26:06,159
message that it received with its own

2442
01:26:06,159 --> 01:26:07,840
and sends a sequence of combined prepare

2443
01:26:07,840 --> 01:26:09,760
messages for the helper so that's one

2444
01:26:09,760 --> 01:26:12,159
prepare message for each report right

2445
01:26:12,159 --> 01:26:15,199
um and sends to the helper also the the

2446
01:26:15,199 --> 01:26:16,639
serialized state blob that it received

2447
01:26:16,639 --> 01:26:18,719
previously so in this illustration the

2448
01:26:18,719 --> 01:26:20,320
second request from the leader uh

2449
01:26:20,320 --> 01:26:22,800
happens to be sent to a different

2450
01:26:22,800 --> 01:26:24,320
instance of the helper than the first

2451
01:26:24,320 --> 01:26:25,760
time around you might imagine that there

2452
01:26:25,760 --> 01:26:27,280
are multiple replicas behind a load

2453
01:26:27,280 --> 01:26:28,320
balancer

2454
01:26:28,320 --> 01:26:29,840
uh it looks like this is fine since all

2455
01:26:29,840 --> 01:26:31,520
the state is in the serialized state

2456
01:26:31,520 --> 01:26:32,480
blob

2457
01:26:32,480 --> 01:26:33,440
but of course there were several

2458
01:26:33,440 --> 01:26:36,159
downsides to this design so the first is

2459
01:26:36,159 --> 01:26:37,600
uh you're going to spend extra bandwidth

2460
01:26:37,600 --> 01:26:39,840
transmitting the state back and forth

2461
01:26:39,840 --> 01:26:42,480
over multiple rounds of the protocol

2462
01:26:42,480 --> 01:26:44,880
further its contents are secret which

2463
01:26:44,880 --> 01:26:46,719
means that the helper implementation has

2464
01:26:46,719 --> 01:26:48,400
to be responsible for encrypting its

2465
01:26:48,400 --> 01:26:50,400
serialized state to protect it from the

2466
01:26:50,400 --> 01:26:52,159
leader uh tampering with it or just

2467
01:26:52,159 --> 01:26:53,360
seeing it

2468
01:26:53,360 --> 01:26:54,639
and of course we have to stop the leader

2469
01:26:54,639 --> 01:26:55,920
from replaying old states into the

2470
01:26:55,920 --> 01:26:57,040
helper

2471
01:26:57,040 --> 01:26:58,960
so anti-replay means the helper has to

2472
01:26:58,960 --> 01:27:00,480
store a counter or something like that

2473
01:27:00,480 --> 01:27:02,080
to prevent state rollbacks and so we've

2474
01:27:02,080 --> 01:27:03,600
already failed to meet our goal of no

2475
01:27:03,600 --> 01:27:05,679
helper storage

2476
01:27:05,679 --> 01:27:07,920
uh finally this scheme makes it pretty

2477
01:27:07,920 --> 01:27:09,600
hard to parallelize aggregation

2478
01:27:09,600 --> 01:27:11,920
aggregate parallelize aggregation which

2479
01:27:11,920 --> 01:27:13,600
otherwise ought to be easy to do since

2480
01:27:13,600 --> 01:27:15,520
the preparation of one chair should be

2481
01:27:15,520 --> 01:27:16,960
totally independent from the other

2482
01:27:16,960 --> 01:27:18,800
except for at some point updating an

2483
01:27:18,800 --> 01:27:20,639
accumulator

2484
01:27:20,639 --> 01:27:22,719
um so to see why parallelization is hard

2485
01:27:22,719 --> 01:27:24,880
uh we're gonna look at another important

2486
01:27:24,880 --> 01:27:26,800
change that happened between draft zero

2487
01:27:26,800 --> 01:27:28,880
zero and draft zero one which has to do

2488
01:27:28,880 --> 01:27:30,639
with the protecting against the replay

2489
01:27:30,639 --> 01:27:32,159
of reports which is not to be confused

2490
01:27:32,159 --> 01:27:35,519
with playing state blobs

2491
01:27:36,320 --> 01:27:37,199
so

2492
01:27:37,199 --> 01:27:40,000
in a ppm a report is uniquely identified

2493
01:27:40,000 --> 01:27:42,000
by a nonce and a nonce consists of a

2494
01:27:42,000 --> 01:27:44,159
time stamp along with a random 64-bit

2495
01:27:44,159 --> 01:27:45,679
integer

2496
01:27:45,679 --> 01:27:47,280
so we have to prevent the leader from

2497
01:27:47,280 --> 01:27:49,199
replying a client report into the helper

2498
01:27:49,199 --> 01:27:50,719
to rule out attacks that would enable

2499
01:27:50,719 --> 01:27:52,320
the leader uh to learn something about

2500
01:27:52,320 --> 01:27:53,600
the client input

2501
01:27:53,600 --> 01:27:55,199
in draft zero zero this was solved by

2502
01:27:55,199 --> 01:27:56,960
defining a total ordering over report

2503
01:27:56,960 --> 01:27:58,719
nonces and then requiring the leader to

2504
01:27:58,719 --> 01:28:00,480
send nonsense to the helper in ascending

2505
01:28:00,480 --> 01:28:01,840
order

2506
01:28:01,840 --> 01:28:03,120
the helper would then defend against

2507
01:28:03,120 --> 01:28:04,639
replays by keeping track of the highest

2508
01:28:04,639 --> 01:28:06,239
nonsense ever seen and refusing any

2509
01:28:06,239 --> 01:28:08,639
reports older than that

2510
01:28:08,639 --> 01:28:10,239
so this doesn't work though if you have

2511
01:28:10,239 --> 01:28:11,760
multiple helper instances that are

2512
01:28:11,760 --> 01:28:13,679
working in parallel uh in this

2513
01:28:13,679 --> 01:28:14,960
illustration the leader has carved up

2514
01:28:14,960 --> 01:28:16,719
the work of aggregating the k reports

2515
01:28:16,719 --> 01:28:18,400
that fall into some aggregation into

2516
01:28:18,400 --> 01:28:20,639
three chunks each meets the requirement

2517
01:28:20,639 --> 01:28:22,639
of ascending nonsense but to meet the

2518
01:28:22,639 --> 01:28:24,159
anti-replay requirements the helper

2519
01:28:24,159 --> 01:28:25,840
instances have to share the highest

2520
01:28:25,840 --> 01:28:27,440
nonce counter which is sort of shown in

2521
01:28:27,440 --> 01:28:29,440
this like ambiguous cloud of storage on

2522
01:28:29,440 --> 01:28:30,400
the right

2523
01:28:30,400 --> 01:28:31,600
um

2524
01:28:31,600 --> 01:28:33,440
so if the helper 3 happens to do its

2525
01:28:33,440 --> 01:28:35,199
work first and then commits k as the

2526
01:28:35,199 --> 01:28:37,199
highest nonce then harpers 1 and 2 have

2527
01:28:37,199 --> 01:28:38,800
to reject all the reports they get which

2528
01:28:38,800 --> 01:28:41,120
is obviously bad

2529
01:28:41,120 --> 01:28:43,520
so in draft zero one uh we acknowledged

2530
01:28:43,520 --> 01:28:45,120
that we had over indexed on the goal of

2531
01:28:45,120 --> 01:28:47,280
lightweight helpers and we accepted that

2532
01:28:47,280 --> 01:28:49,120
uh requiring that helpers have a trusted

2533
01:28:49,120 --> 01:28:50,719
database or some kind of trusted storage

2534
01:28:50,719 --> 01:28:52,719
isn't really all that bad um especially

2535
01:28:52,719 --> 01:28:55,520
since as we discussed uh draft zero zero

2536
01:28:55,520 --> 01:28:56,400
required them to have some kind of

2537
01:28:56,400 --> 01:28:57,840
storage anyway

2538
01:28:57,840 --> 01:28:59,760
so in draft zero one instead of the

2539
01:28:59,760 --> 01:29:01,440
highest notes ever seen helpers are

2540
01:29:01,440 --> 01:29:02,639
required to keep track of all the

2541
01:29:02,639 --> 01:29:04,320
nonsense they've ever seen up to some

2542
01:29:04,320 --> 01:29:06,480
reasonable data retention period so that

2543
01:29:06,480 --> 01:29:08,159
they can refuse to aggregate a report if

2544
01:29:08,159 --> 01:29:10,080
they know they've already been included

2545
01:29:10,080 --> 01:29:12,159
in that aggregation

2546
01:29:12,159 --> 01:29:13,920
helpers also have to keep track of which

2547
01:29:13,920 --> 01:29:15,120
batch intervals they've serviced a

2548
01:29:15,120 --> 01:29:17,120
collect request for so they can refuse

2549
01:29:17,120 --> 01:29:19,199
reports uh new reports that fall into

2550
01:29:19,199 --> 01:29:20,960
those intervals uh to mitigate some of

2551
01:29:20,960 --> 01:29:21,920
the attacks that were talked about

2552
01:29:21,920 --> 01:29:24,320
earlier by chris wood

2553
01:29:24,320 --> 01:29:25,840
the drop zero one still has the helper

2554
01:29:25,840 --> 01:29:27,679
state blob uh and the attended

2555
01:29:27,679 --> 01:29:30,320
anti-replay counters

2556
01:29:30,320 --> 01:29:32,320
since we already accepted uh non-trivial

2557
01:29:32,320 --> 01:29:34,560
helper storage requirements we decided

2558
01:29:34,560 --> 01:29:36,000
in the interrupt target to take the next

2559
01:29:36,000 --> 01:29:38,000
step and do away with helper state all

2560
01:29:38,000 --> 01:29:39,360
together

2561
01:29:39,360 --> 01:29:41,040
so instead we require helpers to store

2562
01:29:41,040 --> 01:29:42,880
their own intermediate state

2563
01:29:42,880 --> 01:29:45,199
um but to preserve the nice property

2564
01:29:45,199 --> 01:29:46,800
that uh

2565
01:29:46,800 --> 01:29:48,719
you know different rounds of the of the

2566
01:29:48,719 --> 01:29:50,080
prepared protocol don't have to be

2567
01:29:50,080 --> 01:29:52,080
serviced by the same helper we

2568
01:29:52,080 --> 01:29:53,440
introduced and said the concept of an

2569
01:29:53,440 --> 01:29:55,440
aggregation job id which is assigned by

2570
01:29:55,440 --> 01:29:56,960
a leader when it constructs aggregation

2571
01:29:56,960 --> 01:29:59,360
requests and can be used later by helper

2572
01:29:59,360 --> 01:30:00,880
to look up the state associated with the

2573
01:30:00,880 --> 01:30:02,800
preparation of a set of shares

2574
01:30:02,800 --> 01:30:05,120
but unlike the old helper state the job

2575
01:30:05,120 --> 01:30:07,199
ids aren't secret and they don't require

2576
01:30:07,199 --> 01:30:10,559
any replay attack mitigations

2577
01:30:13,280 --> 01:30:14,080
okay

2578
01:30:14,080 --> 01:30:15,120
um

2579
01:30:15,120 --> 01:30:17,360
i think in the interest of time and

2580
01:30:17,360 --> 01:30:21,280
we're gonna i'm gonna skip over this

2581
01:30:21,280 --> 01:30:24,639
and okay jump ahead to

2582
01:30:24,639 --> 01:30:26,960
uh the topic of gracefully recovering

2583
01:30:26,960 --> 01:30:29,440
from input preparation failures

2584
01:30:29,440 --> 01:30:30,639
all right this is a this is a problem

2585
01:30:30,639 --> 01:30:32,080
that we learned quite a lot about uh

2586
01:30:32,080 --> 01:30:33,199
while operating the exposure

2587
01:30:33,199 --> 01:30:35,120
notifications private analytics system

2588
01:30:35,120 --> 01:30:37,199
over the last couple of years

2589
01:30:37,199 --> 01:30:38,960
um so first let's recall some of the

2590
01:30:38,960 --> 01:30:41,120
math about uh how aggregations over the

2591
01:30:41,120 --> 01:30:42,719
secret share of work

2592
01:30:42,719 --> 01:30:45,520
so suppose we have n value where each is

2593
01:30:45,520 --> 01:30:47,920
sharded into one chair for an aggregator

2594
01:30:47,920 --> 01:30:50,080
a and the other for aggregator b such

2595
01:30:50,080 --> 01:30:51,600
that they sum back up to the original

2596
01:30:51,600 --> 01:30:54,320
value modulo some prime number p

2597
01:30:54,320 --> 01:30:56,159
um so we compute aggregates by having

2598
01:30:56,159 --> 01:30:58,159
each aggregator sum their sequence of

2599
01:30:58,159 --> 01:31:00,639
shares then the sum of those sums is

2600
01:31:00,639 --> 01:31:02,080
congruent to the sum over the original

2601
01:31:02,080 --> 01:31:04,719
inputs and again all under modulo p

2602
01:31:04,719 --> 01:31:06,719
okay but for some large n for some large

2603
01:31:06,719 --> 01:31:08,400
number of reports n we expect that

2604
01:31:08,400 --> 01:31:09,920
errors will occur such that there will

2605
01:31:09,920 --> 01:31:11,840
be cases where one aggregator happens to

2606
01:31:11,840 --> 01:31:14,239
accept a different set of shares uh than

2607
01:31:14,239 --> 01:31:15,280
the other

2608
01:31:15,280 --> 01:31:16,880
so if 10 shares out of a million get

2609
01:31:16,880 --> 01:31:18,400
rejected we still would like to be able

2610
01:31:18,400 --> 01:31:21,840
to aggregate over the other 999 990

2611
01:31:21,840 --> 01:31:23,040
shares because that's still a lot of

2612
01:31:23,040 --> 01:31:24,159
good data

2613
01:31:24,159 --> 01:31:25,520
but we have to make sure that both

2614
01:31:25,520 --> 01:31:27,199
aggregators are using the same set of

2615
01:31:27,199 --> 01:31:28,320
shares

2616
01:31:28,320 --> 01:31:32,080
so recall that um for each share v sub i

2617
01:31:32,080 --> 01:31:35,360
a that is to say like the i um

2618
01:31:35,360 --> 01:31:37,120
you know uh report with the iaf report

2619
01:31:37,120 --> 01:31:39,440
and the share the share of that is

2620
01:31:39,440 --> 01:31:42,239
report for aggregator a and v sub ib is

2621
01:31:42,239 --> 01:31:44,320
effectively a random value in the field

2622
01:31:44,320 --> 01:31:46,000
defined by p

2623
01:31:46,000 --> 01:31:47,760
and a the aggregate result is also a

2624
01:31:47,760 --> 01:31:50,080
value in that field so let's suppose

2625
01:31:50,080 --> 01:31:53,040
that aggregator b drops its share of the

2626
01:31:53,040 --> 01:31:54,480
kth report

2627
01:31:54,480 --> 01:31:56,080
the resulting aggregate is not just off

2628
01:31:56,080 --> 01:31:58,239
by some well-defined epsilon or you know

2629
01:31:58,239 --> 01:31:59,760
error bars you can reason about it's

2630
01:31:59,760 --> 01:32:02,080
going to be complete random garbage and

2631
01:32:02,080 --> 01:32:03,679
worse because that random garbage is

2632
01:32:03,679 --> 01:32:05,120
still a valid field element you can't

2633
01:32:05,120 --> 01:32:07,280
detect this corruption except for by

2634
01:32:07,280 --> 01:32:08,880
heuristic means

2635
01:32:08,880 --> 01:32:10,239
like say you know you're measuring

2636
01:32:10,239 --> 01:32:11,679
something like how many times did a user

2637
01:32:11,679 --> 01:32:13,280
click a button and you get some of like

2638
01:32:13,280 --> 01:32:15,040
absurdly huge number

2639
01:32:15,040 --> 01:32:16,880
um

2640
01:32:16,880 --> 01:32:18,639
so in the scope of the uh interrupt

2641
01:32:18,639 --> 01:32:21,360
target uh what we are aiming to do is to

2642
01:32:21,360 --> 01:32:22,960
have each aggregator include some data

2643
01:32:22,960 --> 01:32:24,400
in aggregate chairs that will allow us

2644
01:32:24,400 --> 01:32:25,760
to detect this kind of problem and

2645
01:32:25,760 --> 01:32:27,679
measure how bad it is

2646
01:32:27,679 --> 01:32:30,000
specifically the leader in helper will

2647
01:32:30,000 --> 01:32:31,760
exchange accounts reports are in an

2648
01:32:31,760 --> 01:32:33,520
aggregation as well as to check some of

2649
01:32:33,520 --> 01:32:36,000
the included report nonsense which is

2650
01:32:36,000 --> 01:32:38,320
computed by xoring the sha-256 hashes of

2651
01:32:38,320 --> 01:32:40,719
each report's nots so this hashing

2652
01:32:40,719 --> 01:32:42,320
scheme is unlikely to be adequate for

2653
01:32:42,320 --> 01:32:44,159
any real security purpose but we chose

2654
01:32:44,159 --> 01:32:45,760
this because it doesn't depend on a

2655
01:32:45,760 --> 01:32:47,040
consistent hashing order across

2656
01:32:47,040 --> 01:32:49,760
aggregators and since this measure is

2657
01:32:49,760 --> 01:32:51,760
intended to detect implementation or

2658
01:32:51,760 --> 01:32:53,520
design flaws in an experimental setting

2659
01:32:53,520 --> 01:32:55,280
rather than to provide real resilience

2660
01:32:55,280 --> 01:32:57,360
against malicious clients or servers and

2661
01:32:57,360 --> 01:32:59,360
production deployments it's okay if it's

2662
01:32:59,360 --> 01:33:00,719
security properties aren't all that

2663
01:33:00,719 --> 01:33:03,040
strong

2664
01:33:04,000 --> 01:33:06,000
all right so that's the highlights some

2665
01:33:06,000 --> 01:33:07,920
of the highlights of what we've been

2666
01:33:07,920 --> 01:33:09,600
batting around as we work towards an

2667
01:33:09,600 --> 01:33:11,600
interoperability deployment so to

2668
01:33:11,600 --> 01:33:13,760
reiterate our goal here is not to our

2669
01:33:13,760 --> 01:33:15,679
goal here excuse me

2670
01:33:15,679 --> 01:33:17,520
is to operate experimental deployment

2671
01:33:17,520 --> 01:33:20,320
and then come out of that with um

2672
01:33:20,320 --> 01:33:22,239
with some learnings some experience and

2673
01:33:22,239 --> 01:33:23,840
some data that will allow us to start

2674
01:33:23,840 --> 01:33:25,840
some discussions in the working group uh

2675
01:33:25,840 --> 01:33:28,080
to then you know propose some changes to

2676
01:33:28,080 --> 01:33:30,000
the protocol and that hopefully will let

2677
01:33:30,000 --> 01:33:33,679
us answer oh sorry benjamin

2678
01:33:36,000 --> 01:33:37,920
no no finish your sentence

2679
01:33:37,920 --> 01:33:39,199
okay yeah i'm just wrapping up last

2680
01:33:39,199 --> 01:33:41,760
slide uh so the interesting questions

2681
01:33:41,760 --> 01:33:42,960
that we're hoping people to discuss

2682
01:33:42,960 --> 01:33:44,880
going forward with uh what we learn are

2683
01:33:44,880 --> 01:33:46,239
um

2684
01:33:46,239 --> 01:33:47,760
so for which interactions and to what

2685
01:33:47,760 --> 01:33:50,080
extent should the ppm protocol specify

2686
01:33:50,080 --> 01:33:51,760
authentication for uh for requested

2687
01:33:51,760 --> 01:33:53,840
messages or you know instead of doing

2688
01:33:53,840 --> 01:33:55,440
that maybe we should be specifying

2689
01:33:55,440 --> 01:33:57,120
transport uh security requirements and

2690
01:33:57,120 --> 01:33:58,320
letting deployments choose for

2691
01:33:58,320 --> 01:34:00,080
themselves how to meet them

2692
01:34:00,080 --> 01:34:02,400
um also like there's there's some places

2693
01:34:02,400 --> 01:34:04,000
where the protocol introduces shared

2694
01:34:04,000 --> 01:34:05,440
secret parameters between actors

2695
01:34:05,440 --> 01:34:07,120
particularly between the aggregators

2696
01:34:07,120 --> 01:34:08,639
how are we going to go about negotiating

2697
01:34:08,639 --> 01:34:11,840
those and particularly rotating those

2698
01:34:11,840 --> 01:34:13,679
and then operationally what is the life

2699
01:34:13,679 --> 01:34:16,159
cycle of reports or for the state

2700
01:34:16,159 --> 01:34:17,920
associated with their processing when is

2701
01:34:17,920 --> 01:34:19,360
it acceptable for

2702
01:34:19,360 --> 01:34:20,639
one of the participating servers to

2703
01:34:20,639 --> 01:34:22,719
discard old data

2704
01:34:22,719 --> 01:34:23,760
and to

2705
01:34:23,760 --> 01:34:25,360
make that clear might we need an

2706
01:34:25,360 --> 01:34:27,120
explicit commit phase during the

2707
01:34:27,120 --> 01:34:28,719
preparation protocol such that both

2708
01:34:28,719 --> 01:34:30,480
aggregators can have high confidence

2709
01:34:30,480 --> 01:34:31,760
that they're aggregating over the same

2710
01:34:31,760 --> 01:34:34,320
set of shares

2711
01:34:34,320 --> 01:34:37,920
okay that's all i got thanks everybody

2712
01:34:38,400 --> 01:34:40,239
thank you tim um

2713
01:34:40,239 --> 01:34:41,920
in the interest of time i don't think

2714
01:34:41,920 --> 01:34:44,400
that we should attempt to discuss or

2715
01:34:44,400 --> 01:34:45,840
answer these questions here obviously

2716
01:34:45,840 --> 01:34:47,440
these are important and deep questions

2717
01:34:47,440 --> 01:34:49,679
and and we'll have to

2718
01:34:49,679 --> 01:34:51,760
deal with them over the next weeks and

2719
01:34:51,760 --> 01:34:53,840
months as working group

2720
01:34:53,840 --> 01:34:55,119
i want to make sure that we have time

2721
01:34:55,119 --> 01:34:57,520
for the dss star presentation and and

2722
01:34:57,520 --> 01:35:00,159
broader discussion after that

2723
01:35:00,159 --> 01:35:02,080
so if there are

2724
01:35:02,080 --> 01:35:04,000
uh very brief clarifying questions feel

2725
01:35:04,000 --> 01:35:06,800
free to get in the queue but otherwise

2726
01:35:06,800 --> 01:35:09,119
let's uh let's bring up the dss star

2727
01:35:09,119 --> 01:35:10,960
presentation i believe alex davidson is

2728
01:35:10,960 --> 01:35:13,960
presenting

2729
01:35:17,360 --> 01:35:19,040
um

2730
01:35:19,040 --> 01:35:21,840
right

2731
01:35:26,800 --> 01:35:29,800
uh

2732
01:35:30,080 --> 01:35:33,360
cool can you hear me okay

2733
01:35:39,040 --> 01:35:40,000
um

2734
01:35:40,000 --> 01:35:41,360
yeah

2735
01:35:41,360 --> 01:35:42,880
yeah okay cool

2736
01:35:42,880 --> 01:35:45,520
um okay cool yeah so uh i'm alex i'm

2737
01:35:45,520 --> 01:35:47,440
gonna be talking about star which is as

2738
01:35:47,440 --> 01:35:49,679
has been a reference previously like an

2739
01:35:49,679 --> 01:35:52,239
alternative uh protocol

2740
01:35:52,239 --> 01:35:54,639
uh sort of idea that could potentially

2741
01:35:54,639 --> 01:35:57,360
fit into the ppm framework um

2742
01:35:57,360 --> 01:35:59,119
and yeah so i'll just get straight to it

2743
01:35:59,119 --> 01:35:59,840
so

2744
01:35:59,840 --> 01:36:01,840
uh star is kind of it's very similar to

2745
01:36:01,840 --> 01:36:04,400
this like popular one uh approach that

2746
01:36:04,400 --> 01:36:06,239
has been mentioned so it the idea is

2747
01:36:06,239 --> 01:36:08,080
that uh we want to come up with a system

2748
01:36:08,080 --> 01:36:09,920
that we can find like heavy hitting like

2749
01:36:09,920 --> 01:36:11,920
arbitrary data and

2750
01:36:11,920 --> 01:36:14,719
specifically when we're building star um

2751
01:36:14,719 --> 01:36:16,159
we essentially want to provide canned

2752
01:36:16,159 --> 01:36:18,639
anonymity for clients to provide sort of

2753
01:36:18,639 --> 01:36:21,040
arbitrary data forms so

2754
01:36:21,040 --> 01:36:22,480
the idea is that a number of clients

2755
01:36:22,480 --> 01:36:23,760
would send data and then when you've

2756
01:36:23,760 --> 01:36:25,440
received k reports all containing the

2757
01:36:25,440 --> 01:36:27,360
same data point the aggregating server

2758
01:36:27,360 --> 01:36:29,119
will be able to reveal them

2759
01:36:29,119 --> 01:36:29,920
so

2760
01:36:29,920 --> 01:36:33,280
the the reason that star exists is

2761
01:36:33,280 --> 01:36:34,960
you know as we were designing the system

2762
01:36:34,960 --> 01:36:36,159
we were kind of looking at these heavy

2763
01:36:36,159 --> 01:36:38,320
hitting protocols and they were like

2764
01:36:38,320 --> 01:36:39,920
there was a number of issues that that

2765
01:36:39,920 --> 01:36:41,920
made it difficult for us to deploy them

2766
01:36:41,920 --> 01:36:42,880
so

2767
01:36:42,880 --> 01:36:45,119
uh especially popular um if we just

2768
01:36:45,119 --> 01:36:46,480
focus on that as seen as the

2769
01:36:46,480 --> 01:36:47,920
functionality is quite similar is that

2770
01:36:47,920 --> 01:36:49,600
it's quite expensive to run

2771
01:36:49,600 --> 01:36:52,400
and also these like having to have this

2772
01:36:52,400 --> 01:36:54,239
aggregation process between like

2773
01:36:54,239 --> 01:36:55,840
multiple non-including services or

2774
01:36:55,840 --> 01:36:57,119
something that was quite difficult for

2775
01:36:57,119 --> 01:36:58,400
us um

2776
01:36:58,400 --> 01:36:59,600
to get off the ground during the

2777
01:36:59,600 --> 01:37:01,600
aggregation phase so

2778
01:37:01,600 --> 01:37:04,000
so i was kind of an attempt to build

2779
01:37:04,000 --> 01:37:05,440
like a privacy preserving system that

2780
01:37:05,440 --> 01:37:06,719
allows you to reveal these like heavy

2781
01:37:06,719 --> 01:37:08,880
hitting data points without having to

2782
01:37:08,880 --> 01:37:11,760
run aggregation uh collaboratively with

2783
01:37:11,760 --> 01:37:14,639
these like non-polluting elements

2784
01:37:14,639 --> 01:37:16,800
and also uh you know along the way

2785
01:37:16,800 --> 01:37:17,920
obviously you want to perceive privacy

2786
01:37:17,920 --> 01:37:20,000
and then also like there was also a goal

2787
01:37:20,000 --> 01:37:21,119
of trying to use like simple

2788
01:37:21,119 --> 01:37:22,639
cryptographic primitives and techniques

2789
01:37:22,639 --> 01:37:24,480
where possible rather than introducing

2790
01:37:24,480 --> 01:37:25,520
like novel

2791
01:37:25,520 --> 01:37:27,520
uh mechanisms for running this

2792
01:37:27,520 --> 01:37:29,679
aggregation

2793
01:37:29,679 --> 01:37:31,920
so the idea behind star hopefully is

2794
01:37:31,920 --> 01:37:34,560
very simple so it spent three phases so

2795
01:37:34,560 --> 01:37:36,159
essentially the first phase is this

2796
01:37:36,159 --> 01:37:38,159
randomness phase um

2797
01:37:38,159 --> 01:37:40,400
and the the idea behind that is at this

2798
01:37:40,400 --> 01:37:42,320
phase is that we're trying to

2799
01:37:42,320 --> 01:37:44,400
uh establish a scenario where different

2800
01:37:44,400 --> 01:37:46,400
clients non-interactively can establish

2801
01:37:46,400 --> 01:37:48,719
secrets of the secret shares using any

2802
01:37:48,719 --> 01:37:50,560
old threshold secret sharing scheme of

2803
01:37:50,560 --> 01:37:52,639
the same value that will be that you'll

2804
01:37:52,639 --> 01:37:54,400
be able to combine together so this

2805
01:37:54,400 --> 01:37:56,239
randomness phase essentially

2806
01:37:56,239 --> 01:37:58,080
allows the clients to

2807
01:37:58,080 --> 01:37:59,679
establish correlated randomness

2808
01:37:59,679 --> 01:38:01,040
depending on their

2809
01:38:01,040 --> 01:38:03,280
measurement data point

2810
01:38:03,280 --> 01:38:04,639
and later on in the measurement phase

2811
01:38:04,639 --> 01:38:06,719
the clients are going to sample um sort

2812
01:38:06,719 --> 01:38:07,840
of secret shares of that measurement

2813
01:38:07,840 --> 01:38:09,199
it's a little bit more complicated but

2814
01:38:09,199 --> 01:38:10,719
and then send these measurements to the

2815
01:38:10,719 --> 01:38:12,480
aggregation server and then in the

2816
01:38:12,480 --> 01:38:15,360
aggregation server when the um server

2817
01:38:15,360 --> 01:38:17,920
receives like k of these shares if if k

2818
01:38:17,920 --> 01:38:19,360
is the threshold in the secret sharing

2819
01:38:19,360 --> 01:38:20,719
scheme then they'll be able to reveal

2820
01:38:20,719 --> 01:38:21,920
the measurement

2821
01:38:21,920 --> 01:38:22,880
um

2822
01:38:22,880 --> 01:38:24,880
so the randomness phase can be done in

2823
01:38:24,880 --> 01:38:26,639
cooperation either with a random server

2824
01:38:26,639 --> 01:38:29,280
or like alternatively locally

2825
01:38:29,280 --> 01:38:31,040
uh just derived from the measurement

2826
01:38:31,040 --> 01:38:32,719
expert that has cycle security issues

2827
01:38:32,719 --> 01:38:33,840
and this is something that was already

2828
01:38:33,840 --> 01:38:35,119
raised by

2829
01:38:35,119 --> 01:38:36,080
um

2830
01:38:36,080 --> 01:38:38,400
previous protocol designs like proclo by

2831
01:38:38,400 --> 01:38:39,600
google

2832
01:38:39,600 --> 01:38:42,080
one of the nice things about star is

2833
01:38:42,080 --> 01:38:44,159
you can include like additional

2834
01:38:44,159 --> 01:38:45,440
auxiliary data as well with your

2835
01:38:45,440 --> 01:38:47,360
measurements but the the threshold

2836
01:38:47,360 --> 01:38:48,480
itself is only imposed on the

2837
01:38:48,480 --> 01:38:49,920
measurement itself

2838
01:38:49,920 --> 01:38:51,199
and then i've written

2839
01:38:51,199 --> 01:38:52,000
uh

2840
01:38:52,000 --> 01:38:53,920
there's this notion of an epoch

2841
01:38:53,920 --> 01:38:55,760
which i'll also talk about which is uh

2842
01:38:55,760 --> 01:38:57,600
defined by the randomness server and

2843
01:38:57,600 --> 01:38:58,480
they're randomly serving the

2844
01:38:58,480 --> 01:38:59,679
aggregations say that here are

2845
01:38:59,679 --> 01:39:01,600
non-colluding but the idea is that they

2846
01:39:01,600 --> 01:39:03,840
don't have to collaborate in the

2847
01:39:03,840 --> 01:39:05,520
aggregation phase

2848
01:39:05,520 --> 01:39:07,360
um

2849
01:39:07,360 --> 01:39:08,080
so

2850
01:39:08,080 --> 01:39:10,639
what exactly is happening here so

2851
01:39:10,639 --> 01:39:13,119
the idea is that if you sample you can

2852
01:39:13,119 --> 01:39:14,639
sample randomness locally using just

2853
01:39:14,639 --> 01:39:16,239
like a hash function to write like

2854
01:39:16,239 --> 01:39:18,320
defined over your measurement space

2855
01:39:18,320 --> 01:39:20,239
uh but that's gonna only really work if

2856
01:39:20,239 --> 01:39:21,440
you have high entropy measurement

2857
01:39:21,440 --> 01:39:23,440
distributions and it's not clear whether

2858
01:39:23,440 --> 01:39:24,840
uh you know such measurement

2859
01:39:24,840 --> 01:39:27,679
distributions exist and so one of the

2860
01:39:27,679 --> 01:39:28,880
um

2861
01:39:28,880 --> 01:39:29,920
sort of things that we're introducing

2862
01:39:29,920 --> 01:39:32,639
with star is this like um like remote

2863
01:39:32,639 --> 01:39:34,080
way of something running this via an

2864
01:39:34,080 --> 01:39:36,159
oblivious pseudorandom function

2865
01:39:36,159 --> 01:39:37,280
which is controlled by the mapping of

2866
01:39:37,280 --> 01:39:38,639
the server so clients submit their

2867
01:39:38,639 --> 01:39:40,639
measurements obliviously and the server

2868
01:39:40,639 --> 01:39:42,000
evaluates the oblivious you don't

2869
01:39:42,000 --> 01:39:43,360
function over them

2870
01:39:43,360 --> 01:39:44,880
using a secret key which is kind of like

2871
01:39:44,880 --> 01:39:46,880
tight the epoch

2872
01:39:46,880 --> 01:39:49,520
and so this like randomness that the

2873
01:39:49,520 --> 01:39:51,119
client sample would then go just into

2874
01:39:51,119 --> 01:39:53,199
this like message construction algorithm

2875
01:39:53,199 --> 01:39:54,639
so the clients essentially encrypt their

2876
01:39:54,639 --> 01:39:57,520
data point along with any auxiliary data

2877
01:39:57,520 --> 01:39:59,119
and then derive an encryption key from

2878
01:39:59,119 --> 01:40:00,480
some portion of the randomness that they

2879
01:40:00,480 --> 01:40:01,280
get

2880
01:40:01,280 --> 01:40:02,320
they

2881
01:40:02,320 --> 01:40:04,560
secret share like this randomness that

2882
01:40:04,560 --> 01:40:06,400
they use to derive the key

2883
01:40:06,400 --> 01:40:07,440
and

2884
01:40:07,440 --> 01:40:09,440
this round one here is sort of like the

2885
01:40:09,440 --> 01:40:11,440
correlated aspect where you can you can

2886
01:40:11,440 --> 01:40:14,080
like construct shares like consistently

2887
01:40:14,080 --> 01:40:16,080
without interacting as clients and then

2888
01:40:16,080 --> 01:40:19,040
they also introduce a tag which isn't

2889
01:40:19,040 --> 01:40:20,800
which is an important note for security

2890
01:40:20,800 --> 01:40:23,280
and essentially these tags will when the

2891
01:40:23,280 --> 01:40:24,639
clients then just send all these

2892
01:40:24,639 --> 01:40:26,560
messages to the service email

2893
01:40:26,560 --> 01:40:28,080
and the server then

2894
01:40:28,080 --> 01:40:29,520
groups together all the messages with

2895
01:40:29,520 --> 01:40:30,560
common tags because these

2896
01:40:30,560 --> 01:40:32,560
deterministically derived from the

2897
01:40:32,560 --> 01:40:35,040
measurement and then can recover

2898
01:40:35,040 --> 01:40:36,400
the measurements themselves

2899
01:40:36,400 --> 01:40:38,000
using this like secret sharing recovery

2900
01:40:38,000 --> 01:40:39,840
process

2901
01:40:39,840 --> 01:40:41,280
cool

2902
01:40:41,280 --> 01:40:45,119
so mariana is in the queue

2903
01:40:45,760 --> 01:40:48,320
um so i just have a clarifying question

2904
01:40:48,320 --> 01:40:50,960
the server here learns all the counts on

2905
01:40:50,960 --> 01:40:53,600
tags in the clear yes

2906
01:40:53,600 --> 01:40:56,000
yeah that's correct you're not we're not

2907
01:40:56,000 --> 01:40:58,320
protecting accounts here

2908
01:40:58,320 --> 01:41:00,560
we're not protecting accounts yeah so

2909
01:41:00,560 --> 01:41:02,560
the server can server learns all the

2910
01:41:02,560 --> 01:41:04,159
subsets of clients that share the same

2911
01:41:04,159 --> 01:41:05,760
measurement but doesn't necessarily

2912
01:41:05,760 --> 01:41:08,880
learn the measurements themselves

2913
01:41:09,119 --> 01:41:11,360
okay

2914
01:41:12,159 --> 01:41:13,440
cool so

2915
01:41:13,440 --> 01:41:16,159
um the security model that we use is

2916
01:41:16,159 --> 01:41:18,719
obviously comparable with popular one um

2917
01:41:18,719 --> 01:41:19,600
so

2918
01:41:19,600 --> 01:41:21,040
we need non-conclusion of the randomness

2919
01:41:21,040 --> 01:41:22,880
and aggregation service to

2920
01:41:22,880 --> 01:41:23,679
um

2921
01:41:23,679 --> 01:41:25,040
you know to

2922
01:41:25,040 --> 01:41:26,880
for this to work for clients

2923
01:41:26,880 --> 01:41:28,400
um we consider like a malicious

2924
01:41:28,400 --> 01:41:31,119
adversary uh server that also may

2925
01:41:31,119 --> 01:41:32,400
control a subset of clients to kind of

2926
01:41:32,400 --> 01:41:33,679
like model this like civil attack

2927
01:41:33,679 --> 01:41:35,760
propensity

2928
01:41:35,760 --> 01:41:38,239
and as as as mariana just pointed out

2929
01:41:38,239 --> 01:41:39,520
the messages that encode the same

2930
01:41:39,520 --> 01:41:41,600
measurements are leaked so even if you

2931
01:41:41,600 --> 01:41:42,880
don't reveal the measurement itself that

2932
01:41:42,880 --> 01:41:45,280
like the deterministic tag leaks which

2933
01:41:45,280 --> 01:41:47,920
um subsets like the messages belong to

2934
01:41:47,920 --> 01:41:49,119
and so you can

2935
01:41:49,119 --> 01:41:51,600
see that um but the goals here are

2936
01:41:51,600 --> 01:41:53,520
confidential absolute confidentiality

2937
01:41:53,520 --> 01:41:54,719
the measurements are sent by less than

2938
01:41:54,719 --> 01:41:56,400
or equal to k clients

2939
01:41:56,400 --> 01:42:00,000
and like robustness of the aggregation

2940
01:42:00,000 --> 01:42:01,600
um

2941
01:42:01,600 --> 01:42:02,800
cool

2942
01:42:02,800 --> 01:42:04,000
so

2943
01:42:04,000 --> 01:42:06,000
uh i just wanted to talk a little bit

2944
01:42:06,000 --> 01:42:07,840
about like the civil attack window for

2945
01:42:07,840 --> 01:42:09,760
stark as this is uh like the most

2946
01:42:09,760 --> 01:42:11,679
damaging attack so

2947
01:42:11,679 --> 01:42:13,280
essentially we want you because this

2948
01:42:13,280 --> 01:42:14,639
deterministic tag is present in the

2949
01:42:14,639 --> 01:42:16,639
messages it allows the aggregation

2950
01:42:16,639 --> 01:42:18,159
server potentially to

2951
01:42:18,159 --> 01:42:19,760
try and learn the message just by trying

2952
01:42:19,760 --> 01:42:20,719
to like

2953
01:42:20,719 --> 01:42:22,800
run like an offline dictionary attack uh

2954
01:42:22,800 --> 01:42:24,320
on the measurement space

2955
01:42:24,320 --> 01:42:25,920
so obviously with the local model this

2956
01:42:25,920 --> 01:42:28,000
is absolutely possible

2957
01:42:28,000 --> 01:42:29,440
and so one of the reasons that we use

2958
01:42:29,440 --> 01:42:30,880
this like remote model of sampling

2959
01:42:30,880 --> 01:42:33,280
randomness uh is

2960
01:42:33,280 --> 01:42:35,360
to kind of like shorten this attack

2961
01:42:35,360 --> 01:42:37,760
window and also move the like offline

2962
01:42:37,760 --> 01:42:39,600
dictionary attack to something online

2963
01:42:39,600 --> 01:42:41,760
that has to be um carried out with the

2964
01:42:41,760 --> 01:42:42,800
in like

2965
01:42:42,800 --> 01:42:45,199
as queries to the random the server

2966
01:42:45,199 --> 01:42:47,040
so yeah like

2967
01:42:47,040 --> 01:42:49,199
so in doing so we kind of like make

2968
01:42:49,199 --> 01:42:51,520
ensure that um as long as the client

2969
01:42:51,520 --> 01:42:53,040
messages are sampled in only in this

2970
01:42:53,040 --> 01:42:54,480
window and then they received afterwards

2971
01:42:54,480 --> 01:42:57,360
and the the aggregation server's attack

2972
01:42:57,360 --> 01:43:00,799
propensity is also limited to the tool

2973
01:43:01,600 --> 01:43:02,560
cool

2974
01:43:02,560 --> 01:43:05,199
uh hello

2975
01:43:08,880 --> 01:43:11,280
sorry can you go back uh slide i just

2976
01:43:11,280 --> 01:43:13,920
wanted to check if i'm understanding the

2977
01:43:13,920 --> 01:43:16,080
sorry one more slide

2978
01:43:16,080 --> 01:43:17,360
i'm just gonna wrap my head around this

2979
01:43:17,360 --> 01:43:19,280
randomly server

2980
01:43:19,280 --> 01:43:21,519
um

2981
01:43:21,920 --> 01:43:23,280
the

2982
01:43:23,280 --> 01:43:25,199
um

2983
01:43:25,199 --> 01:43:27,280
i guess the previous slide has

2984
01:43:27,280 --> 01:43:29,760
looks like the client is sending x the

2985
01:43:29,760 --> 01:43:32,000
secret value directly to the randomness

2986
01:43:32,000 --> 01:43:34,320
server themselves

2987
01:43:34,320 --> 01:43:36,080
is that right it

2988
01:43:36,080 --> 01:43:38,719
no so the x is blinded well it it is in

2989
01:43:38,719 --> 01:43:40,800
the sense that it's in like it's input

2990
01:43:40,800 --> 01:43:43,760
to the opr f which by definition like

2991
01:43:43,760 --> 01:43:45,280
the client's input is blinded to the

2992
01:43:45,280 --> 01:43:48,320
random server never learns x

2993
01:43:48,320 --> 01:43:49,119
okay

2994
01:43:49,119 --> 01:43:50,800
all right sorry i didn't i didn't know

2995
01:43:50,800 --> 01:43:53,800
how

2996
01:43:54,800 --> 01:43:57,119
call on the previous slide the ladder

2997
01:43:57,119 --> 01:43:58,880
diagram makes it look like x is being

2998
01:43:58,880 --> 01:44:00,719
sent directly

2999
01:44:00,719 --> 01:44:04,400
sorry yeah i um yeah that this diagram

3000
01:44:04,400 --> 01:44:06,159
is not that helpful for explaining how

3001
01:44:06,159 --> 01:44:08,320
the random server actually works but um

3002
01:44:08,320 --> 01:44:09,119
okay

3003
01:44:09,119 --> 01:44:09,920
yeah

3004
01:44:09,920 --> 01:44:13,040
so this oprf is as defined in like the

3005
01:44:13,040 --> 01:44:15,040
oblivious universal functions draft as

3006
01:44:15,040 --> 01:44:15,840
uh

3007
01:44:15,840 --> 01:44:17,840
that's coming with the cfrg so

3008
01:44:17,840 --> 01:44:18,960
essentially the client's input is

3009
01:44:18,960 --> 01:44:21,360
blinded beforehand and then like the

3010
01:44:21,360 --> 01:44:22,880
server evaluates the function on it and

3011
01:44:22,880 --> 01:44:24,880
this the client receives the response

3012
01:44:24,880 --> 01:44:26,560
and then can unblind it and then gets

3013
01:44:26,560 --> 01:44:27,280
the

3014
01:44:27,280 --> 01:44:30,400
like real value output got it okay thank

3015
01:44:30,400 --> 01:44:31,840
you sorry

3016
01:44:31,840 --> 01:44:34,960
sorry for the the roll back no no no no

3017
01:44:34,960 --> 01:44:36,480
no not at all

3018
01:44:36,480 --> 01:44:38,800
it's a it's a bottom of the slides right

3019
01:44:38,800 --> 01:44:41,040
so um

3020
01:44:41,040 --> 01:44:43,199
cool

3021
01:44:44,400 --> 01:44:46,719
okay yeah so just as a quick comparison

3022
01:44:46,719 --> 01:44:48,480
with poplar one so

3023
01:44:48,480 --> 01:44:49,679
um

3024
01:44:49,679 --> 01:44:51,840
in star clients can send arbitrary

3025
01:44:51,840 --> 01:44:53,360
auxiliary information with their data

3026
01:44:53,360 --> 01:44:56,480
point which may or may not be useful uh

3027
01:44:56,480 --> 01:44:58,639
um star as i mentioned star leakage

3028
01:44:58,639 --> 01:45:00,239
reveals all the sub sort of measurements

3029
01:45:00,239 --> 01:45:01,679
that hide the same measurement even if

3030
01:45:01,679 --> 01:45:03,360
the threshold is not satisfied which is

3031
01:45:03,360 --> 01:45:05,600
obviously very important uh one of the

3032
01:45:05,600 --> 01:45:07,360
things uh

3033
01:45:07,360 --> 01:45:08,719
that um

3034
01:45:08,719 --> 01:45:10,880
popular one does is it you know it may

3035
01:45:10,880 --> 01:45:12,080
even be part of the functionality is it

3036
01:45:12,080 --> 01:45:13,760
reveals all the heavy hitting prefixes

3037
01:45:13,760 --> 01:45:14,960
of strings

3038
01:45:14,960 --> 01:45:16,480
and for some of our use cases we only

3039
01:45:16,480 --> 01:45:18,480
wanted to reveal the heavy hitting

3040
01:45:18,480 --> 01:45:20,239
string in its entirety rather than the

3041
01:45:20,239 --> 01:45:22,000
prefixes itself

3042
01:45:22,000 --> 01:45:23,920
um

3043
01:45:23,920 --> 01:45:25,119
and

3044
01:45:25,119 --> 01:45:26,320
um

3045
01:45:26,320 --> 01:45:27,520
one one

3046
01:45:27,520 --> 01:45:28,960
obviously star only during the

3047
01:45:28,960 --> 01:45:30,639
aggregation phase only requires a single

3048
01:45:30,639 --> 01:45:32,639
aggregation server which makes things a

3049
01:45:32,639 --> 01:45:34,320
lot more cost effective

3050
01:45:34,320 --> 01:45:36,000
um because you don't use any bandwidth

3051
01:45:36,000 --> 01:45:37,760
and the the computation itself is very

3052
01:45:37,760 --> 01:45:39,760
minimal

3053
01:45:39,760 --> 01:45:41,760
um in terms of how

3054
01:45:41,760 --> 01:45:43,360
potentially star could fit into the pbm

3055
01:45:43,360 --> 01:45:45,360
framework or at least how we envision it

3056
01:45:45,360 --> 01:45:46,960
is that kind of this like leader and

3057
01:45:46,960 --> 01:45:48,000
collector

3058
01:45:48,000 --> 01:45:49,920
in this diagram and in star these are

3059
01:45:49,920 --> 01:45:51,040
kind of the same entity and there were

3060
01:45:51,040 --> 01:45:53,840
just no helpers so clients submit

3061
01:45:53,840 --> 01:45:55,920
you know via some mechanism either oh hi

3062
01:45:55,920 --> 01:45:58,320
or whatever like an anonymizing proxy or

3063
01:45:58,320 --> 01:45:59,440
it doesn't even have to be included in

3064
01:45:59,440 --> 01:46:01,520
the vitamin proxy but it it massively

3065
01:46:01,520 --> 01:46:03,199
improves privacy if you do

3066
01:46:03,199 --> 01:46:05,440
and submits things to this entity and

3067
01:46:05,440 --> 01:46:06,880
the entity just performs the aggregation

3068
01:46:06,880 --> 01:46:09,679
and learns the output

3069
01:46:09,679 --> 01:46:10,880
um

3070
01:46:10,880 --> 01:46:12,480
so we we we

3071
01:46:12,480 --> 01:46:14,800
you know as i mentioned before star is

3072
01:46:14,800 --> 01:46:16,159
kind of like a trade-off between trying

3073
01:46:16,159 --> 01:46:17,920
to reduce the costs while also trying to

3074
01:46:17,920 --> 01:46:19,360
maintain some like meaningful privacy

3075
01:46:19,360 --> 01:46:20,880
guarantees

3076
01:46:20,880 --> 01:46:22,560
uh so

3077
01:46:22,560 --> 01:46:24,320
and also not having like noncluding

3078
01:46:24,320 --> 01:46:25,920
entities work together to perform the

3079
01:46:25,920 --> 01:46:27,840
aggregation and so some of these are

3080
01:46:27,840 --> 01:46:29,440
some of the things that we're trying to

3081
01:46:29,440 --> 01:46:31,040
emphasize when we talk about the

3082
01:46:31,040 --> 01:46:32,880
advantages of star

3083
01:46:32,880 --> 01:46:35,840
um and also for functionality we allow

3084
01:46:35,840 --> 01:46:37,840
auxiliary data which may or may not be

3085
01:46:37,840 --> 01:46:39,840
useful and simple cryptography in the

3086
01:46:39,840 --> 01:46:42,080
sense that we don't have to implement uh

3087
01:46:42,080 --> 01:46:43,520
quite complex

3088
01:46:43,520 --> 01:46:45,199
new protocols

3089
01:46:45,199 --> 01:46:47,600
um in order to build the aggregation

3090
01:46:47,600 --> 01:46:48,800
process

3091
01:46:48,800 --> 01:46:51,440
and so just to conclude

3092
01:46:51,440 --> 01:46:54,560
um yeah we think star provides kind of

3093
01:46:54,560 --> 01:46:56,400
some for at least for us like provides

3094
01:46:56,400 --> 01:46:57,840
like a private

3095
01:46:57,840 --> 01:46:59,920
preserving reporting mechanism

3096
01:46:59,920 --> 01:47:02,159
uh for you know entities with limited

3097
01:47:02,159 --> 01:47:03,840
resources and without you know expert

3098
01:47:03,840 --> 01:47:05,679
implementation knowledge

3099
01:47:05,679 --> 01:47:07,040
and we think that some of the trust

3100
01:47:07,040 --> 01:47:08,960
assumptions are preferable uh to those

3101
01:47:08,960 --> 01:47:10,719
made by um

3102
01:47:10,719 --> 01:47:12,480
either prior or popular

3103
01:47:12,480 --> 01:47:14,719
and so just to finish up like some of

3104
01:47:14,719 --> 01:47:15,920
the questions we

3105
01:47:15,920 --> 01:47:17,840
uh wanted to ask is whether the working

3106
01:47:17,840 --> 01:47:19,840
group is kind of interested in this as a

3107
01:47:19,840 --> 01:47:21,600
alternative protocol spec

3108
01:47:21,600 --> 01:47:24,480
and if it if it was uh would this star

3109
01:47:24,480 --> 01:47:26,080
draft fit into like the working group

3110
01:47:26,080 --> 01:47:31,080
and also the ppm kind of specification

3111
01:47:36,000 --> 01:47:37,040
thanks

3112
01:47:37,040 --> 01:47:40,000
uh okay i have have uh two things i

3113
01:47:40,000 --> 01:47:42,080
wanted to say first not as chair

3114
01:47:42,080 --> 01:47:43,119
um so

3115
01:47:43,119 --> 01:47:44,880
okay let me let me step back one more

3116
01:47:44,880 --> 01:47:47,280
step uh we have

3117
01:47:47,280 --> 01:47:50,480
uh 12 minutes by my clock um before the

3118
01:47:50,480 --> 01:47:51,840
end of the session we have a lot of

3119
01:47:51,840 --> 01:47:53,840
things that people want to talk about uh

3120
01:47:53,840 --> 01:47:55,280
i'll try to be

3121
01:47:55,280 --> 01:47:56,719
uh fast

3122
01:47:56,719 --> 01:47:57,679
um

3123
01:47:57,679 --> 01:48:01,040
so first not as chair do you think star

3124
01:48:01,040 --> 01:48:03,840
can be expressed within the framework

3125
01:48:03,840 --> 01:48:08,880
laid out by the priv ppm draft as a vdaf

3126
01:48:08,880 --> 01:48:10,800
for example could we represent the

3127
01:48:10,800 --> 01:48:15,119
randomness server and ohip type proxy

3128
01:48:15,119 --> 01:48:17,360
could we represent that as one helper

3129
01:48:17,360 --> 01:48:19,440
and uh and represent the aggregator as

3130
01:48:19,440 --> 01:48:21,040
the other helper

3131
01:48:21,040 --> 01:48:23,840
and lay out a vdaf protocol even if it's

3132
01:48:23,840 --> 01:48:26,800
not exactly natural

3133
01:48:27,199 --> 01:48:28,960
i think currently the draft doesn't

3134
01:48:28,960 --> 01:48:31,280
really allow for the star

3135
01:48:31,280 --> 01:48:33,760
sort of well at least like the way that

3136
01:48:33,760 --> 01:48:35,920
we inter like i've interpreted like the

3137
01:48:35,920 --> 01:48:37,679
leader in the helpers i don't think star

3138
01:48:37,679 --> 01:48:39,360
necessarily fits into the like

3139
01:48:39,360 --> 01:48:40,800
interaction process that's currently

3140
01:48:40,800 --> 01:48:42,080
laid out

3141
01:48:42,080 --> 01:48:44,639
i think um

3142
01:48:44,639 --> 01:48:46,320
i think if there was some way of like

3143
01:48:46,320 --> 01:48:47,840
building extra functionality into the

3144
01:48:47,840 --> 01:48:50,239
ohio proxy then maybe there was like

3145
01:48:50,239 --> 01:48:51,600
there'd be some way of like interacting

3146
01:48:51,600 --> 01:48:53,679
with that in order to uh

3147
01:48:53,679 --> 01:48:55,280
create some information and then like

3148
01:48:55,280 --> 01:48:56,800
sending the reports through to the

3149
01:48:56,800 --> 01:48:58,480
leader which could also be a single

3150
01:48:58,480 --> 01:49:00,639
entity in the case of star

3151
01:49:00,639 --> 01:49:03,199
perhaps but um

3152
01:49:03,199 --> 01:49:04,880
yeah

3153
01:49:04,880 --> 01:49:05,760
okay

3154
01:49:05,760 --> 01:49:08,320
uh and secondly uh as chair i've i've

3155
01:49:08,320 --> 01:49:11,119
heard several um comments about draft

3156
01:49:11,119 --> 01:49:13,599
adoption especially for the priv ppm

3157
01:49:13,599 --> 01:49:14,480
draft

3158
01:49:14,480 --> 01:49:17,520
so um i'd appreciate hearing from star

3159
01:49:17,520 --> 01:49:19,520
authors and other people

3160
01:49:19,520 --> 01:49:22,080
if people could comment on

3161
01:49:22,080 --> 01:49:24,719
whether they think the priv ppm draft is

3162
01:49:24,719 --> 01:49:27,040
ready for working group adoption

3163
01:49:27,040 --> 01:49:29,840
thanks

3164
01:49:41,520 --> 01:49:43,840
alex was um

3165
01:49:43,840 --> 01:49:46,320
uh so you mentioned that the the the

3166
01:49:46,320 --> 01:49:48,480
differences in trust assumptions um do

3167
01:49:48,480 --> 01:49:50,719
you need the randomness server and the

3168
01:49:50,719 --> 01:49:55,080
aggregation server to not collude

3169
01:49:56,159 --> 01:49:58,400
uh yeah yeah so you require both of

3170
01:49:58,400 --> 01:50:00,480
those entities to not pollute yeah okay

3171
01:50:00,480 --> 01:50:02,000
so that's comparable

3172
01:50:02,000 --> 01:50:03,040
right

3173
01:50:03,040 --> 01:50:05,040
it's it's comparable but they don't have

3174
01:50:05,040 --> 01:50:06,000
to

3175
01:50:06,000 --> 01:50:07,280
because they don't have to collaborate

3176
01:50:07,280 --> 01:50:08,880
during the aggregation phase you can

3177
01:50:08,880 --> 01:50:11,040
kind of like it's easier to split other

3178
01:50:11,040 --> 01:50:13,040
functionality and one of the i guess one

3179
01:50:13,040 --> 01:50:15,360
of the hopes with like oprf based

3180
01:50:15,360 --> 01:50:16,560
functionality is that we would have

3181
01:50:16,560 --> 01:50:18,960
entities running oprs kind of as a

3182
01:50:18,960 --> 01:50:20,080
service

3183
01:50:20,080 --> 01:50:21,360
and yeah

3184
01:50:21,360 --> 01:50:22,719
at that point it's easier from a

3185
01:50:22,719 --> 01:50:24,960
practical perspective to argue that like

3186
01:50:24,960 --> 01:50:26,960
that if you like an application server

3187
01:50:26,960 --> 01:50:29,199
in an entity that just runs an opr kind

3188
01:50:29,199 --> 01:50:31,760
of as a service are like not colluding

3189
01:50:31,760 --> 01:50:33,119
um right

3190
01:50:33,119 --> 01:50:35,760
yeah i i most definitely there's a huge

3191
01:50:35,760 --> 01:50:37,760
advantages to not having having to

3192
01:50:37,760 --> 01:50:40,159
interact for aggregation um and i yeah

3193
01:50:40,159 --> 01:50:42,719
so i i think that's a very attractive

3194
01:50:42,719 --> 01:50:45,440
feature of star

3195
01:50:49,840 --> 01:50:52,320
um i want to make a comment that i'm not

3196
01:50:52,320 --> 01:50:55,119
sure i'm kind of buying it there are two

3197
01:50:55,119 --> 01:50:57,599
different ways to view non-collusion i i

3198
01:50:57,599 --> 01:50:59,360
feel like for me

3199
01:50:59,360 --> 01:51:00,239
this

3200
01:51:00,239 --> 01:51:01,840
if there is a non-collusion assumption

3201
01:51:01,840 --> 01:51:03,679
there is a non-collusion assumption in

3202
01:51:03,679 --> 01:51:05,599
either protocol

3203
01:51:05,599 --> 01:51:08,239
so i i would kind of challenge the

3204
01:51:08,239 --> 01:51:10,239
statement that these are different trust

3205
01:51:10,239 --> 01:51:12,638
models

3206
01:51:16,159 --> 01:51:19,119
thanks mariana um it seems like

3207
01:51:19,119 --> 01:51:21,119
the something strange happened with the

3208
01:51:21,119 --> 01:51:22,080
queue

3209
01:51:22,080 --> 01:51:23,760
um a bunch of people were in the queue

3210
01:51:23,760 --> 01:51:26,880
and then got out and back in um

3211
01:51:26,880 --> 01:51:28,080
i thought and then i don't seem to be a

3212
01:51:28,080 --> 01:51:30,480
no i am and whatever

3213
01:51:30,480 --> 01:51:31,360
uh

3214
01:51:31,360 --> 01:51:33,280
i'm gonna uh eric i saw you at the top

3215
01:51:33,280 --> 01:51:35,440
of the cube before if you want to uh

3216
01:51:35,440 --> 01:51:38,080
go ahead well i want to clarify make

3217
01:51:38,080 --> 01:51:39,360
sure i understand your question because

3218
01:51:39,360 --> 01:51:41,599
you asked whether whether we thought on

3219
01:51:41,599 --> 01:51:44,320
ppm the priv document was ready for um

3220
01:51:44,320 --> 01:51:46,239
for for was ready for acceptance but

3221
01:51:46,239 --> 01:51:47,119
then people were still talking about

3222
01:51:47,119 --> 01:51:49,599
stars so um uh you want to talk about

3223
01:51:49,599 --> 01:51:52,960
both or what just to be clear

3224
01:51:52,960 --> 01:51:54,400
um

3225
01:51:54,400 --> 01:51:57,040
it sounds to me like as as chair uh it

3226
01:51:57,040 --> 01:51:58,800
sounds to me like the authors of the

3227
01:51:58,800 --> 01:52:00,880
priv ppm draft largely feel that it's

3228
01:52:00,880 --> 01:52:02,159
ready for adoption although i haven't

3229
01:52:02,159 --> 01:52:04,159
heard everybody comment on that i wanted

3230
01:52:04,159 --> 01:52:07,280
to also ask the star draft authors what

3231
01:52:07,280 --> 01:52:08,719
they thought of

3232
01:52:08,719 --> 01:52:11,679
adopting the proof ppm draft um

3233
01:52:11,679 --> 01:52:13,679
because and and everybody else in the

3234
01:52:13,679 --> 01:52:15,280
working group because of course

3235
01:52:15,280 --> 01:52:18,320
we adopt by uh rough consensus

3236
01:52:18,320 --> 01:52:19,920
so since i am here i will say that the

3237
01:52:19,920 --> 01:52:22,480
ppm doctors were ready for adoption um i

3238
01:52:22,480 --> 01:52:24,960
think that the um uh i think that people

3239
01:52:24,960 --> 01:52:26,480
were asking in the chat whether or not

3240
01:52:26,480 --> 01:52:28,400
these were um mutually exclusive they're

3241
01:52:28,400 --> 01:52:30,480
not under complimentary um each is good

3242
01:52:30,480 --> 01:52:32,159
for some tasks i don't think we have to

3243
01:52:32,159 --> 01:52:33,520
i think if we drop through ppm we can

3244
01:52:33,520 --> 01:52:36,400
still adopt star later um and i think um

3245
01:52:36,400 --> 01:52:38,639
you know uh it's clear that it it's

3246
01:52:38,639 --> 01:52:39,760
really clear that they're not not

3247
01:52:39,760 --> 01:52:42,000
subject to each other entirely so um so

3248
01:52:42,000 --> 01:52:43,599
i think like they're not that they don't

3249
01:52:43,599 --> 01:52:46,239
proclaim each other

3250
01:52:51,280 --> 01:52:54,280
dkg

3251
01:53:01,360 --> 01:53:03,360
uh

3252
01:53:03,360 --> 01:53:05,199
sorry i've i've lost much more thought

3253
01:53:05,199 --> 01:53:09,719
while trying to describe so i will pass

3254
01:53:18,000 --> 01:53:19,679
have to wait for the uh

3255
01:53:19,679 --> 01:53:21,760
wonderful meat echo delay

3256
01:53:21,760 --> 01:53:23,760
um so

3257
01:53:23,760 --> 01:53:25,040
i

3258
01:53:25,040 --> 01:53:27,280
sort of came into this thinking that uh

3259
01:53:27,280 --> 01:53:28,639
the group

3260
01:53:28,639 --> 01:53:30,000
would be

3261
01:53:30,000 --> 01:53:31,679
adopting something i think we'd be

3262
01:53:31,679 --> 01:53:33,040
foolish not to

3263
01:53:33,040 --> 01:53:35,119
not to do something that fits within our

3264
01:53:35,119 --> 01:53:37,440
charter uh i don't see any alternatives

3265
01:53:37,440 --> 01:53:39,599
for the the sort of things that are

3266
01:53:39,599 --> 01:53:42,560
being achieved by the prio work and i'd

3267
01:53:42,560 --> 01:53:44,239
like to see a draft for that

3268
01:53:44,239 --> 01:53:47,599
i'm a little less clear on

3269
01:53:47,599 --> 01:53:49,440
the sort of practical aspects of the

3270
01:53:49,440 --> 01:53:51,040
popular stuff

3271
01:53:51,040 --> 01:53:51,840
um

3272
01:53:51,840 --> 01:53:54,480
but i'm happy to sort of take the

3273
01:53:54,480 --> 01:53:56,960
the ppm draft where where it is right

3274
01:53:56,960 --> 01:53:57,920
now

3275
01:53:57,920 --> 01:53:59,679
i'm not quite sure about the

3276
01:53:59,679 --> 01:54:03,440
applicability um of the the star stuff

3277
01:54:03,440 --> 01:54:06,159
just yet um there's there's a bunch of

3278
01:54:06,159 --> 01:54:08,719
sort of usage constraints that need to

3279
01:54:08,719 --> 01:54:10,560
be better understood i think

3280
01:54:10,560 --> 01:54:13,440
um that's also true to some extent for

3281
01:54:13,440 --> 01:54:17,119
the um the prio work as well um there

3282
01:54:17,119 --> 01:54:18,320
are a number of questions that came up

3283
01:54:18,320 --> 01:54:19,360
through the

3284
01:54:19,360 --> 01:54:22,560
presentations which i have to say

3285
01:54:22,560 --> 01:54:25,280
um left me less confident than more

3286
01:54:25,280 --> 01:54:27,440
confident at the end of them which is

3287
01:54:27,440 --> 01:54:29,280
not usually how you want these things to

3288
01:54:29,280 --> 01:54:30,159
go

3289
01:54:30,159 --> 01:54:32,400
but um overall i think we should be

3290
01:54:32,400 --> 01:54:34,560
taking the um

3291
01:54:34,560 --> 01:54:35,679
the

3292
01:54:35,679 --> 01:54:37,840
something on at at some point do it to a

3293
01:54:37,840 --> 01:54:39,599
call for adoption on the on the list

3294
01:54:39,599 --> 01:54:42,000
after this

3295
01:54:47,679 --> 01:54:50,560
so i guess becker had remarked that you

3296
01:54:50,560 --> 01:54:53,440
know the the star and the priv or priya

3297
01:54:53,440 --> 01:54:54,639
i'm not sure what we're calling it

3298
01:54:54,639 --> 01:54:55,599
they're

3299
01:54:55,599 --> 01:54:57,520
compatible um

3300
01:54:57,520 --> 01:54:59,599
and we can potentially do both but if

3301
01:54:59,599 --> 01:55:00,639
it's looking at the charter and the

3302
01:55:00,639 --> 01:55:01,920
charter says that we will deliver one or

3303
01:55:01,920 --> 01:55:03,920
more protocols which can accommodate

3304
01:55:03,920 --> 01:55:06,080
multiple ppm algorithms and so i wasn't

3305
01:55:06,080 --> 01:55:07,920
really sure if you know if we did both

3306
01:55:07,920 --> 01:55:10,000
star and prio

3307
01:55:10,000 --> 01:55:12,080
would those be different protocols or

3308
01:55:12,080 --> 01:55:13,360
would those be different algorithms

3309
01:55:13,360 --> 01:55:16,159
within the same protocol

3310
01:55:16,159 --> 01:55:16,880
and

3311
01:55:16,880 --> 01:55:18,320
i guess i'm directing that attacker but

3312
01:55:18,320 --> 01:55:21,280
really anyone who can answer

3313
01:55:23,920 --> 01:55:26,719
do you want me to jump in

3314
01:55:26,719 --> 01:55:27,920
um i think they have a different

3315
01:55:27,920 --> 01:55:29,760
protocol um that was that was the

3316
01:55:29,760 --> 01:55:30,800
question that was being asked earlier i

3317
01:55:30,800 --> 01:55:31,679
think about whether or not you could

3318
01:55:31,679 --> 01:55:34,159
cram you know i think that that the term

3319
01:55:34,159 --> 01:55:37,280
here um i think um so i mean the print

3320
01:55:37,280 --> 01:55:38,400
framework was designed to accommodate

3321
01:55:38,400 --> 01:55:40,560
multiple as patent was saying vdfs which

3322
01:55:40,560 --> 01:55:42,320
is the term you know which is like the

3323
01:55:42,320 --> 01:55:44,320
specific term is using for algorithms um

3324
01:55:44,320 --> 01:55:45,520
but i don't think it's very practical to

3325
01:55:45,520 --> 01:55:48,480
cram star into as a vdif so i think that

3326
01:55:48,480 --> 01:55:49,440
would be i said it'd be a different

3327
01:55:49,440 --> 01:55:51,199
protocol which i mean i suppose you

3328
01:55:51,199 --> 01:55:52,800
might imagine that that star had its own

3329
01:55:52,800 --> 01:55:54,400
algorithm some sets but i'm not aware of

3330
01:55:54,400 --> 01:55:56,080
that so i think like i think it's you

3331
01:55:56,080 --> 01:55:57,440
know they're two independent tweets i

3332
01:55:57,440 --> 01:55:58,320
think

3333
01:55:58,320 --> 01:56:01,639
all right thanks

3334
01:56:06,960 --> 01:56:08,719
um i just wanted to respond quickly to

3335
01:56:08,719 --> 01:56:10,080
something martin said in particular

3336
01:56:10,080 --> 01:56:11,520
around poplar

3337
01:56:11,520 --> 01:56:13,040
i wanted to note the distinction between

3338
01:56:13,040 --> 01:56:16,080
ppm uh the framework that drives sort of

3339
01:56:16,080 --> 01:56:18,639
the vdf execution and then the vdf

3340
01:56:18,639 --> 01:56:20,239
specification itself which is happening

3341
01:56:20,239 --> 01:56:22,400
in the cfrg wherein popular and

3342
01:56:22,400 --> 01:56:25,679
pre-specific bits are being standardized

3343
01:56:25,679 --> 01:56:28,159
into questionnaires whether or not ppm

3344
01:56:28,159 --> 01:56:29,920
as a wrapper around vdf is sort of an

3345
01:56:29,920 --> 01:56:31,440
appropriate

3346
01:56:31,440 --> 01:56:32,320
you know

3347
01:56:32,320 --> 01:56:35,440
a good place to start

3348
01:56:35,440 --> 01:56:36,960
and all of the complexities that come

3349
01:56:36,960 --> 01:56:39,440
with poplar and whatnot i think

3350
01:56:39,440 --> 01:56:40,800
or most of the complexities that come

3351
01:56:40,800 --> 01:56:42,719
with poplar can be uh

3352
01:56:42,719 --> 01:56:44,880
relatively cons isolated and constrained

3353
01:56:44,880 --> 01:56:47,280
within the context of the vdf draft that

3354
01:56:47,280 --> 01:56:49,360
said like there are certain aspects of

3355
01:56:49,360 --> 01:56:51,520
the vdf execution that bubble up into

3356
01:56:51,520 --> 01:56:53,199
ppm like how the collector needs to

3357
01:56:53,199 --> 01:56:55,360
drive a collection

3358
01:56:55,360 --> 01:56:56,719
um

3359
01:56:56,719 --> 01:56:58,080
and there are multiple iterations of

3360
01:56:58,080 --> 01:56:59,119
that but

3361
01:56:59,119 --> 01:56:59,920
um

3362
01:56:59,920 --> 01:57:01,280
in general i

3363
01:57:01,280 --> 01:57:02,719
kind of i wanted to make that split like

3364
01:57:02,719 --> 01:57:03,599
the

3365
01:57:03,599 --> 01:57:05,280
this is like protocol engineering work

3366
01:57:05,280 --> 01:57:06,480
and the

3367
01:57:06,480 --> 01:57:08,800
cfrg vdf stuff is more of the the crypto

3368
01:57:08,800 --> 01:57:11,599
specific bits

3369
01:57:16,719 --> 01:57:19,119
so i remember what my question was sorry

3370
01:57:19,119 --> 01:57:21,360
this is a question about star

3371
01:57:21,360 --> 01:57:23,360
i was it was unclear to me what the

3372
01:57:23,360 --> 01:57:25,199
specific collusion risk is between the

3373
01:57:25,199 --> 01:57:26,800
randomness server and the aggregator and

3374
01:57:26,800 --> 01:57:29,679
star and i wondered if uh the

3375
01:57:29,679 --> 01:57:30,719
um

3376
01:57:30,719 --> 01:57:31,760
star

3377
01:57:31,760 --> 01:57:33,679
uh anybody from the star team or alex

3378
01:57:33,679 --> 01:57:35,520
particularly if you want to just

3379
01:57:35,520 --> 01:57:37,520
uh try to summarize what you think the

3380
01:57:37,520 --> 01:57:40,000
collusion risk is there

3381
01:57:40,000 --> 01:57:42,639
yeah sure so essentially if the random

3382
01:57:42,639 --> 01:57:43,920
server and the aggregation server

3383
01:57:43,920 --> 01:57:45,760
colludes then the random server can

3384
01:57:45,760 --> 01:57:48,480
reveal the like opr secret key to the

3385
01:57:48,480 --> 01:57:50,320
aggregation server and it kind of moves

3386
01:57:50,320 --> 01:57:51,520
the

3387
01:57:51,520 --> 01:57:54,080
the like online attack back to being

3388
01:57:54,080 --> 01:57:56,480
like a local offline dictionary attack

3389
01:57:56,480 --> 01:57:59,040
again against the measurement space

3390
01:57:59,040 --> 01:58:00,880
so it kind of reverts to kind of like

3391
01:58:00,880 --> 01:58:05,159
the local model of something randomness

3392
01:58:09,119 --> 01:58:12,000
does that make sense

3393
01:58:13,520 --> 01:58:16,320
yep thanks

3394
01:58:17,440 --> 01:58:18,840
david gennazi

3395
01:58:18,840 --> 01:58:20,880
google um

3396
01:58:20,880 --> 01:58:23,360
i have to admit i feel a bit more

3397
01:58:23,360 --> 01:58:26,639
confused now than i did two hours ago

3398
01:58:26,639 --> 01:58:28,960
but i'm very quiet

3399
01:58:28,960 --> 01:58:31,280
okay let me eat the mic

3400
01:58:31,280 --> 01:58:32,480
um

3401
01:58:32,480 --> 01:58:33,440
i'm

3402
01:58:33,440 --> 01:58:35,440
i have to admit that i'm a bit more i

3403
01:58:35,440 --> 01:58:37,679
feel more confused now than i was two

3404
01:58:37,679 --> 01:58:39,040
hours ago but i'm going to attribute

3405
01:58:39,040 --> 01:58:40,800
that to it being friday and i haven't

3406
01:58:40,800 --> 01:58:42,560
slept enough this week

3407
01:58:42,560 --> 01:58:45,440
but i just wanted to say that this is a

3408
01:58:45,440 --> 01:58:46,960
great starting point for the working

3409
01:58:46,960 --> 01:58:49,199
group and so i hopefully support

3410
01:58:49,199 --> 01:58:52,080
adopting the ppm

3411
01:59:00,840 --> 01:59:03,520
document okay um

3412
01:59:03,520 --> 01:59:06,000
mariana we we tried to close the queue

3413
01:59:06,000 --> 01:59:07,599
um but

3414
01:59:07,599 --> 01:59:10,480
uh what i'll ask is uh

3415
01:59:10,480 --> 01:59:12,880
everybody who's read the draft could you

3416
01:59:12,880 --> 01:59:14,000
um

3417
01:59:14,000 --> 01:59:16,639
could you please um comment in jabber

3418
01:59:16,639 --> 01:59:19,360
whether whether you've read uh the the

3419
01:59:19,360 --> 01:59:22,239
ppm draft so we have some idea of of how

3420
01:59:22,239 --> 01:59:24,000
many people have read the draft and

3421
01:59:24,000 --> 01:59:26,239
maybe while that's going on um mariana

3422
01:59:26,239 --> 01:59:30,519
can can chime in

3423
01:59:30,719 --> 01:59:32,639
i guess i just wanted to make the point

3424
01:59:32,639 --> 01:59:35,119
that we actually implemented both prior

3425
01:59:35,119 --> 01:59:37,679
and popular and um

3426
01:59:37,679 --> 01:59:40,320
in the question of whether they they are

3427
01:59:40,320 --> 01:59:42,239
really fitting together in a single

3428
01:59:42,239 --> 01:59:44,239
framework i would say yes i think there

3429
01:59:44,239 --> 01:59:45,119
are like

3430
01:59:45,119 --> 01:59:46,719
traders between communication and

3431
01:59:46,719 --> 01:59:48,800
computation but the main challenges that

3432
01:59:48,800 --> 01:59:51,360
we kind of see

3433
01:59:51,360 --> 01:59:53,040
kind of seen across all of the previous

3434
01:59:53,040 --> 01:59:55,440
presentations are common across this

3435
01:59:55,440 --> 01:59:56,800
protocol so

3436
01:59:56,800 --> 01:59:59,679
i would strongly say that they do fit in

3437
01:59:59,679 --> 02:00:00,880
the same

3438
02:00:00,880 --> 02:00:03,920
in the same framework

3439
02:00:07,530 --> 02:00:10,320
[Music]

3440
02:00:10,320 --> 02:00:11,280
okay

3441
02:00:11,280 --> 02:00:14,400
thanks to everybody for um

3442
02:00:14,400 --> 02:00:16,480
for telling us that uh that you've

3443
02:00:16,480 --> 02:00:18,080
reviewed the draft it's great to see

3444
02:00:18,080 --> 02:00:21,520
that there's been uh been so much review

3445
02:00:21,520 --> 02:00:23,360
uh unfortunately we don't have time to

3446
02:00:23,360 --> 02:00:24,960
run a live

3447
02:00:24,960 --> 02:00:27,840
uh a live poll i think it's too late for

3448
02:00:27,840 --> 02:00:29,920
a hum we are officially out of time

3449
02:00:29,920 --> 02:00:31,679
but uh

3450
02:00:31,679 --> 02:00:33,119
but we will

3451
02:00:33,119 --> 02:00:35,760
uh i think run a call for adoption on

3452
02:00:35,760 --> 02:00:39,159
the mailing list

3453
02:00:40,960 --> 02:00:43,679
uh i want to make sure to thank

3454
02:00:43,679 --> 02:00:45,040
uh

3455
02:00:45,040 --> 02:00:49,040
dkg for volunteering ahead of time to

3456
02:00:49,040 --> 02:00:51,679
uh to take uh to take notes that was

3457
02:00:51,679 --> 02:00:52,960
incredibly

3458
02:00:52,960 --> 02:00:54,880
uh incredibly helpful it saved us a

3459
02:00:54,880 --> 02:00:56,960
bunch of time and made time for all of

3460
02:00:56,960 --> 02:00:59,199
this great conversation

3461
02:00:59,199 --> 02:01:02,000
uh roman is our a.d roman

3462
02:01:02,000 --> 02:01:03,360
i just wanted to jump in the end because

3463
02:01:03,360 --> 02:01:04,480
i should have done in the beginning i

3464
02:01:04,480 --> 02:01:06,800
just wanted to thank you ben and sam for

3465
02:01:06,800 --> 02:01:09,520
stepping up uh to serve as chairs and

3466
02:01:09,520 --> 02:01:11,360
you know to convey how exciting it is to

3467
02:01:11,360 --> 02:01:13,119
have a working group and i also wanted

3468
02:01:13,119 --> 02:01:15,520
to thank as i did in sag the proponents

3469
02:01:15,520 --> 02:01:16,560
uh

3470
02:01:16,560 --> 02:01:19,040
of the working group for really helping

3471
02:01:19,040 --> 02:01:20,800
us get from what often doesn't happen

3472
02:01:20,800 --> 02:01:22,639
from a buff to a working group by the

3473
02:01:22,639 --> 02:01:24,000
next meeting and that all comes through

3474
02:01:24,000 --> 02:01:26,239
hard work and preparation so again to

3475
02:01:26,239 --> 02:01:27,679
all those that were involved in that you

3476
02:01:27,679 --> 02:01:29,760
know much appreciated for

3477
02:01:29,760 --> 02:01:31,280
making it easy to do good work in the

3478
02:01:31,280 --> 02:01:34,280
community

3479
02:01:44,400 --> 02:01:47,119
uh yes thanks again to joe for for being

3480
02:01:47,119 --> 02:01:49,199
on site and making sure everything ran

3481
02:01:49,199 --> 02:01:50,560
smoothly today

3482
02:01:50,560 --> 02:01:51,360
okay

3483
02:01:51,360 --> 02:01:54,960
um i think that uh this session is over

3484
02:01:54,960 --> 02:01:57,840
ietf 113 is over

3485
02:01:57,840 --> 02:01:59,840
thanks everybody for coming see you on

3486
02:01:59,840 --> 02:02:02,920
the list

3487
02:02:13,199 --> 02:02:15,280
you

