1
00:00:35,280 --> 00:00:37,040
i think we start

2
00:00:37,040 --> 00:00:39,040
we'll get through the boilerplate um

3
00:00:39,040 --> 00:00:40,480
stuff first

4
00:00:40,480 --> 00:00:42,399
so i can't see the chat at the moment so

5
00:00:42,399 --> 00:00:44,320
if anyone which needs to draw something

6
00:00:44,320 --> 00:00:46,480
to my attention please do so

7
00:00:46,480 --> 00:00:49,280
i've asked nick to be made a chair as

8
00:00:49,280 --> 00:00:50,960
well which will help but

9
00:00:50,960 --> 00:00:53,199
hasn't happened yet

10
00:00:53,199 --> 00:00:55,120
right so

11
00:00:55,120 --> 00:00:57,120
welcome to this

12
00:00:57,120 --> 00:00:59,520
meeting of the joint meeting of the pals

13
00:00:59,520 --> 00:01:01,520
mpls.net

14
00:01:01,520 --> 00:01:05,199
working working groups

15
00:01:05,600 --> 00:01:07,280
here is the note well

16
00:01:07,280 --> 00:01:11,200
i am sure that everyone is familiar with

17
00:01:11,200 --> 00:01:13,760
with that so we won't dwell on that any

18
00:01:13,760 --> 00:01:15,920
longer

19
00:01:15,920 --> 00:01:17,600
so the purpose of this meeting is a

20
00:01:17,600 --> 00:01:19,040
joint meeting of the three working

21
00:01:19,040 --> 00:01:21,280
groups and it's being called to discuss

22
00:01:21,280 --> 00:01:23,360
the basic architectural issues and

23
00:01:23,360 --> 00:01:26,159
solution proposals arising from drafts

24
00:01:26,159 --> 00:01:28,640
that proposed new application uses at

25
00:01:28,640 --> 00:01:32,400
the bottom of the mpls label stack

26
00:01:32,400 --> 00:01:34,159
the general structure of the meetings as

27
00:01:34,159 --> 00:01:35,200
follows

28
00:01:35,200 --> 00:01:37,040
we're going to start with a status

29
00:01:37,040 --> 00:01:39,600
report on the open design team work to

30
00:01:39,600 --> 00:01:41,040
date

31
00:01:41,040 --> 00:01:43,040
and then we're going to go through use

32
00:01:43,040 --> 00:01:46,079
cases requirements and framework

33
00:01:46,079 --> 00:01:48,240
then we're going to look at a number of

34
00:01:48,240 --> 00:01:50,960
related technical proposals

35
00:01:50,960 --> 00:01:54,399
and then we have a 30 minutes at the end

36
00:01:54,399 --> 00:01:56,240
if we all run to plan

37
00:01:56,240 --> 00:01:58,399
to

38
00:01:58,560 --> 00:02:00,000
for an open

39
00:02:00,000 --> 00:02:01,759
discussion on the

40
00:02:01,759 --> 00:02:04,960
on the design team work

41
00:02:06,719 --> 00:02:10,000
so here is the agenda

42
00:02:10,000 --> 00:02:12,080
i propose that we do a small batch that

43
00:02:12,080 --> 00:02:13,200
i come to

44
00:02:13,200 --> 00:02:16,000
um so we're in session what section one

45
00:02:16,000 --> 00:02:16,959
here

46
00:02:16,959 --> 00:02:20,000
lower is going to present and talk about

47
00:02:20,000 --> 00:02:20,840
the

48
00:02:20,840 --> 00:02:24,160
um design team

49
00:02:24,160 --> 00:02:26,319
work in his report

50
00:02:26,319 --> 00:02:28,560
then tarek is going to talk about the

51
00:02:28,560 --> 00:02:31,280
use cases

52
00:02:31,440 --> 00:02:32,959
then we'll move

53
00:02:32,959 --> 00:02:35,760
to matthew talking about requirements so

54
00:02:35,760 --> 00:02:38,480
slots three and four would swap

55
00:02:38,480 --> 00:02:41,120
lower will then talk about uh the

56
00:02:41,120 --> 00:02:43,599
framework

57
00:02:43,599 --> 00:02:46,800
jags will talk about uh a

58
00:02:46,800 --> 00:02:49,440
solution draft on extension header

59
00:02:49,440 --> 00:02:50,319
um

60
00:02:50,319 --> 00:02:53,280
bruno on entropy label id

61
00:02:53,280 --> 00:02:55,840
two slots by kiriti uh it's up to you

62
00:02:55,840 --> 00:02:59,760
how you spend your 15 minutes kariti but

63
00:02:59,760 --> 00:03:00,879
after

64
00:03:00,879 --> 00:03:04,879
15 minutes we will then go to a

65
00:03:04,879 --> 00:03:06,000
a

66
00:03:06,000 --> 00:03:11,280
an open discussion on the odt activities

67
00:03:15,200 --> 00:03:16,640
i'll just leave this for a couple of

68
00:03:16,640 --> 00:03:18,959
moments so all these this material is

69
00:03:18,959 --> 00:03:22,000
available by the data tracker anyway

70
00:03:22,000 --> 00:03:25,280
but uh these are the resource links um

71
00:03:25,280 --> 00:03:28,239
for the um

72
00:03:28,239 --> 00:03:29,760
where you find the agenda where you find

73
00:03:29,760 --> 00:03:31,440
the docs

74
00:03:31,440 --> 00:03:34,239
where the jabber room is

75
00:03:34,239 --> 00:03:35,519
where the

76
00:03:35,519 --> 00:03:37,920
odt wiki is which is where

77
00:03:37,920 --> 00:03:39,360
we've been keeping all of the minutes

78
00:03:39,360 --> 00:03:41,599
meeting information

79
00:03:41,599 --> 00:03:43,760
etc

80
00:03:43,760 --> 00:03:45,280
if there's any

81
00:03:45,280 --> 00:03:48,319
general issues with um we techo please

82
00:03:48,319 --> 00:03:51,120
talk to support ietf.org

83
00:03:51,120 --> 00:03:53,360
and there should be a meet echo team

84
00:03:53,360 --> 00:03:55,200
monitoring us

85
00:03:55,200 --> 00:03:56,080
so

86
00:03:56,080 --> 00:03:58,159
uh we're up to

87
00:03:58,159 --> 00:03:59,439
40.

88
00:03:59,439 --> 00:04:01,040
um

89
00:04:01,040 --> 00:04:04,000
i am now going to

90
00:04:04,000 --> 00:04:07,439
share a different set of slides

91
00:04:07,439 --> 00:04:10,560
and hand us over to

92
00:04:10,560 --> 00:04:12,959
how do i do this to lower

93
00:04:12,959 --> 00:04:17,640
um odt report

94
00:04:19,120 --> 00:04:20,720
share

95
00:04:20,720 --> 00:04:23,919
and okay okay

96
00:04:24,960 --> 00:04:26,800
oh yeah you tell me when you want me to

97
00:04:26,800 --> 00:04:28,400
move across one

98
00:04:28,400 --> 00:04:29,840
okay

99
00:04:29,840 --> 00:04:32,880
i have a comment on the wiki on your

100
00:04:32,880 --> 00:04:35,199
presentation the week is not very well

101
00:04:35,199 --> 00:04:36,479
organized

102
00:04:36,479 --> 00:04:38,720
it's possible to

103
00:04:38,720 --> 00:04:41,120
go through it and actually clean out the

104
00:04:41,120 --> 00:04:42,720
information but

105
00:04:42,720 --> 00:04:44,800
you need to take your time if you're new

106
00:04:44,800 --> 00:04:47,120
to it

107
00:04:47,520 --> 00:04:48,720
okay

108
00:04:48,720 --> 00:04:51,120
open this sign team report

109
00:04:51,120 --> 00:04:54,680
next slide please

110
00:04:57,600 --> 00:04:59,199
so

111
00:04:59,199 --> 00:05:01,360
the open design team is

112
00:05:01,360 --> 00:05:03,919
actually said to be an mpls open design

113
00:05:03,919 --> 00:05:07,199
team but it's actually joint

114
00:05:07,199 --> 00:05:09,520
activity between three word working

115
00:05:09,520 --> 00:05:12,720
groups that mpls and pals

116
00:05:12,720 --> 00:05:14,000
and

117
00:05:14,000 --> 00:05:17,039
from time to time the shares are

118
00:05:17,039 --> 00:05:17,919
having

119
00:05:17,919 --> 00:05:21,039
coordination meetings and to coordinate

120
00:05:21,039 --> 00:05:24,880
again and possible decisions

121
00:05:24,880 --> 00:05:29,120
the design team meet every thursday

122
00:05:29,120 --> 00:05:31,600
and it's very early in california and

123
00:05:31,600 --> 00:05:34,880
very late in asia actually just now

124
00:05:34,880 --> 00:05:37,120
since i'm in asia i end the meeting

125
00:05:37,120 --> 00:05:40,720
welding tooth friday

126
00:05:41,120 --> 00:05:44,240
the participation is about

127
00:05:44,240 --> 00:05:47,280
20 part participants each week it might

128
00:05:47,280 --> 00:05:50,840
be peaks depending on what topic is

129
00:05:50,840 --> 00:05:55,120
discussed and there are about 20

130
00:05:55,120 --> 00:05:57,440
documents

131
00:05:57,440 --> 00:06:00,880
that the design team are discussing

132
00:06:00,880 --> 00:06:01,759
next

133
00:06:01,759 --> 00:06:04,000
and are using the term documents a

134
00:06:04,000 --> 00:06:06,000
little bit freely there because some of

135
00:06:06,000 --> 00:06:08,720
the discussions are on

136
00:06:08,720 --> 00:06:12,160
things that are in the wiki

137
00:06:12,560 --> 00:06:15,280
next slide please

138
00:06:15,440 --> 00:06:16,319
uh

139
00:06:16,319 --> 00:06:17,680
miad

140
00:06:17,680 --> 00:06:20,000
we started something something

141
00:06:20,000 --> 00:06:22,720
that is kind of

142
00:06:22,720 --> 00:06:24,880
very close to what the design team is we

143
00:06:24,880 --> 00:06:26,800
call it the miata

144
00:06:26,800 --> 00:06:28,720
and that's an mpls indicator and

145
00:06:28,720 --> 00:06:32,240
ancillary data project

146
00:06:33,600 --> 00:06:36,080
and what we set out to do is actually to

147
00:06:36,080 --> 00:06:38,720
define an architecture that allows you

148
00:06:38,720 --> 00:06:41,440
to use a data plane to send instructions

149
00:06:41,440 --> 00:06:42,560
between

150
00:06:42,560 --> 00:06:44,720
layers and lsrs

151
00:06:44,720 --> 00:06:48,600
and requesting actions

152
00:06:49,199 --> 00:06:50,960
related to

153
00:06:50,960 --> 00:06:53,680
an lsp

154
00:06:53,840 --> 00:06:56,400
we talked about

155
00:06:56,400 --> 00:06:58,800
and here i had a comment that is not

156
00:06:58,800 --> 00:07:00,960
very clear what i mean

157
00:07:00,960 --> 00:07:01,680
the

158
00:07:01,680 --> 00:07:04,960
square brackets are actually

159
00:07:04,960 --> 00:07:06,160
uh

160
00:07:06,160 --> 00:07:08,319
are alternatives so we talked about

161
00:07:08,319 --> 00:07:10,800
forwarding actions and that's in um

162
00:07:10,800 --> 00:07:13,360
create this document we talked about

163
00:07:13,360 --> 00:07:15,599
network action and then it's and john

164
00:07:15,599 --> 00:07:16,960
drake's

165
00:07:16,960 --> 00:07:18,160
uh

166
00:07:18,160 --> 00:07:21,039
text in the the uh

167
00:07:21,039 --> 00:07:25,919
the wiki and we talked about mid miat

168
00:07:26,080 --> 00:07:27,280
actions

169
00:07:27,280 --> 00:07:31,120
as a alternative name and then there are

170
00:07:31,120 --> 00:07:32,800
suggestions that we just talked about

171
00:07:32,800 --> 00:07:35,199
actions and don't design them more than

172
00:07:35,199 --> 00:07:36,960
that

173
00:07:36,960 --> 00:07:39,359
um

174
00:07:39,440 --> 00:07:40,319
and

175
00:07:40,319 --> 00:07:42,400
we would actually like to prefer we

176
00:07:42,400 --> 00:07:45,440
would prefer to pick one of those before

177
00:07:45,440 --> 00:07:48,430
progressing documents too far

178
00:07:48,430 --> 00:07:50,000
[Music]

179
00:07:50,000 --> 00:07:52,800
prefer before or just after making the

180
00:07:52,800 --> 00:07:55,840
working of documents

181
00:07:55,840 --> 00:07:58,400
we also talked about ancillary data and

182
00:07:58,400 --> 00:08:02,160
ancillary data is data that is

183
00:08:02,160 --> 00:08:03,120
used

184
00:08:03,120 --> 00:08:05,840
to perform the actions requested

185
00:08:05,840 --> 00:08:08,160
and it's also sent

186
00:08:08,160 --> 00:08:09,520
in the packet

187
00:08:09,520 --> 00:08:13,080
next slide please

188
00:08:15,280 --> 00:08:16,400
we have

189
00:08:16,400 --> 00:08:18,638
uh

190
00:08:19,039 --> 00:08:21,440
at least two types of documents

191
00:08:21,440 --> 00:08:24,319
one one type of document or what i call

192
00:08:24,319 --> 00:08:26,479
guiding and that's this is not an itf

193
00:08:26,479 --> 00:08:28,479
term this is my term

194
00:08:28,479 --> 00:08:30,639
and to in that group i count

195
00:08:30,639 --> 00:08:33,519
requirements framework in use cases

196
00:08:33,519 --> 00:08:35,279
and then they have document that that

197
00:08:35,279 --> 00:08:37,599
says specifying and that is mostly the

198
00:08:37,599 --> 00:08:40,399
solutions document

199
00:08:40,399 --> 00:08:43,200
next slide please

200
00:08:46,560 --> 00:08:49,040
the next steps we have wanted to start

201
00:08:49,040 --> 00:08:52,839
progressing documents for some

202
00:08:52,839 --> 00:08:53,920
time uh

203
00:08:53,920 --> 00:08:56,080
firstly by adopting them as working

204
00:08:56,080 --> 00:08:58,160
group documents what stopped us so far

205
00:08:58,160 --> 00:09:00,399
is that some of the documents at least

206
00:09:00,399 --> 00:09:02,720
in my mind are not

207
00:09:02,720 --> 00:09:07,720
compatible so we can't know both of them

208
00:09:08,080 --> 00:09:09,839
we would actually like to

209
00:09:09,839 --> 00:09:12,240
we would prefer to uh

210
00:09:12,240 --> 00:09:14,720
lead with the guiding documents

211
00:09:14,720 --> 00:09:16,880
uh but uh

212
00:09:16,880 --> 00:09:18,800
we'd also like to

213
00:09:18,800 --> 00:09:22,080
move the solutions documented so sooner

214
00:09:22,080 --> 00:09:26,480
soon as soon after as we can

215
00:09:27,120 --> 00:09:31,839
the procedures are the standard

216
00:09:32,640 --> 00:09:33,680
itf

217
00:09:33,680 --> 00:09:36,880
mpls procedures they may be called on

218
00:09:36,880 --> 00:09:39,200
there will be consensus call on all

219
00:09:39,200 --> 00:09:40,720
three working groups but actually

220
00:09:40,720 --> 00:09:42,959
discussion will take place on the mpls

221
00:09:42,959 --> 00:09:45,279
list

222
00:09:45,600 --> 00:09:48,240
bio is still discussing the process a

223
00:09:48,240 --> 00:09:50,720
little bit

224
00:09:52,320 --> 00:09:54,560
whether we can start progressing for

225
00:09:54,560 --> 00:09:57,839
example a solutions document before

226
00:09:57,839 --> 00:10:01,120
all things are sorted out

227
00:10:03,120 --> 00:10:07,120
we the next bullet is possibly

228
00:10:07,120 --> 00:10:08,240
uh

229
00:10:08,240 --> 00:10:11,680
being overwritten uh

230
00:10:11,680 --> 00:10:14,319
the uh

231
00:10:15,120 --> 00:10:17,519
end-to-end discussion is we don't have

232
00:10:17,519 --> 00:10:19,519
the consensus among the shares to

233
00:10:19,519 --> 00:10:22,000
actually do the poll so

234
00:10:22,000 --> 00:10:23,839
it's on hold

235
00:10:23,839 --> 00:10:26,240
the indicator name will probably be

236
00:10:26,240 --> 00:10:27,760
solved uh

237
00:10:27,760 --> 00:10:30,959
in the framework and

238
00:10:30,959 --> 00:10:33,279
requirement stress

239
00:10:33,279 --> 00:10:35,519
and

240
00:10:35,839 --> 00:10:38,800
then if we want to use a new

241
00:10:38,800 --> 00:10:39,839
or a

242
00:10:39,839 --> 00:10:41,760
special purpose label or if we want to

243
00:10:41,760 --> 00:10:44,320
have a new one that is

244
00:10:44,320 --> 00:10:46,480
if we want to use an other one an old

245
00:10:46,480 --> 00:10:47,440
one

246
00:10:47,440 --> 00:10:49,760
that's still under discussion

247
00:10:49,760 --> 00:10:52,560
next slide please

248
00:10:55,680 --> 00:10:56,640
so

249
00:10:56,640 --> 00:10:59,200
one thing that wasn't clear from me

250
00:10:59,200 --> 00:11:02,160
when we started the project was that

251
00:11:02,160 --> 00:11:06,000
the the miyag is a little bit different

252
00:11:06,000 --> 00:11:07,760
normally

253
00:11:07,760 --> 00:11:10,480
the traditional mpls uses a control pane

254
00:11:10,480 --> 00:11:12,880
and signaling between

255
00:11:12,880 --> 00:11:16,640
the nodes to tell the lsr what to do

256
00:11:16,640 --> 00:11:19,360
but in myad we actually

257
00:11:19,360 --> 00:11:22,560
use the data stream uh

258
00:11:22,560 --> 00:11:24,240
to

259
00:11:24,240 --> 00:11:26,240
send information between

260
00:11:26,240 --> 00:11:28,800
with the packet between the nodes

261
00:11:28,800 --> 00:11:31,760
and that actually brings a strong

262
00:11:31,760 --> 00:11:34,959
dependency on hardware and the design

263
00:11:34,959 --> 00:11:35,960
team has had

264
00:11:35,960 --> 00:11:37,760
[Music]

265
00:11:37,760 --> 00:11:40,240
quite a number of discussions on

266
00:11:40,240 --> 00:11:42,540
hardware optimizing coding

267
00:11:42,540 --> 00:11:44,240
[Music]

268
00:11:44,240 --> 00:11:46,800
in my mind there is no strong consensus

269
00:11:46,800 --> 00:11:50,479
yet i think we are getting nearer

270
00:11:50,560 --> 00:11:53,680
was that the last slide

271
00:11:55,360 --> 00:11:57,120
next one

272
00:11:57,120 --> 00:11:59,040
that's the last one isn't it lower

273
00:11:59,040 --> 00:12:02,880
yeah okay yeah okay i thought so

274
00:12:03,519 --> 00:12:06,519
um

275
00:12:10,399 --> 00:12:12,560
so i say again

276
00:12:12,560 --> 00:12:13,680
uh

277
00:12:13,680 --> 00:12:16,079
i would i would prefer that you removed

278
00:12:16,079 --> 00:12:19,079
yourself

279
00:12:24,399 --> 00:12:27,839
so do we have any questions

280
00:12:30,480 --> 00:12:32,959
okay i guess i guess not i mute myself

281
00:12:32,959 --> 00:12:35,040
now and then you can

282
00:12:35,040 --> 00:12:37,360
go on

283
00:12:37,360 --> 00:12:40,240
thank you lower so it's taric next i'll

284
00:12:40,240 --> 00:12:42,959
stop these

285
00:12:42,959 --> 00:12:43,760
and

286
00:12:43,760 --> 00:12:44,440
uh

287
00:12:44,440 --> 00:12:46,000
[Music]

288
00:12:46,000 --> 00:12:48,160
requirements

289
00:12:48,160 --> 00:12:51,480
use cases

290
00:12:52,000 --> 00:12:54,160
hello okay over to you tarik

291
00:12:54,160 --> 00:12:56,639
okay um can you hear me

292
00:12:56,639 --> 00:12:59,760
just a confirmation that you can hear me

293
00:12:59,760 --> 00:13:02,320
hello hello yes i can hear you okay okay

294
00:13:02,320 --> 00:13:04,079
great thank you

295
00:13:04,079 --> 00:13:06,160
uh so hello everyone my name is tarek

296
00:13:06,160 --> 00:13:09,600
saad um and i'm going to talk about the

297
00:13:09,600 --> 00:13:12,880
use cases for mpls

298
00:13:12,880 --> 00:13:15,680
indicators and ancillary data um

299
00:13:15,680 --> 00:13:17,839
indeed as lower mentioned there are

300
00:13:17,839 --> 00:13:21,040
variants in on my slide i call them

301
00:13:21,040 --> 00:13:23,680
function indicators in other cases they

302
00:13:23,680 --> 00:13:24,320
are

303
00:13:24,320 --> 00:13:26,000
action indicators

304
00:13:26,000 --> 00:13:27,839
and so on so i'm yet

305
00:13:27,839 --> 00:13:30,240
introducing another uh

306
00:13:30,240 --> 00:13:32,240
term uh

307
00:13:32,240 --> 00:13:35,120
to the to describe these indicators so

308
00:13:35,120 --> 00:13:38,079
we need to uh the action take that

309
00:13:38,079 --> 00:13:41,199
action to align and pick up one

310
00:13:41,199 --> 00:13:45,120
uh one term for for uh the indicators

311
00:13:45,120 --> 00:13:46,480
description

312
00:13:46,480 --> 00:13:48,880
um i am presenting a bit on behalf of

313
00:13:48,880 --> 00:13:50,959
the co-authors um

314
00:13:50,959 --> 00:13:53,519
we are part of the open design team

315
00:13:53,519 --> 00:13:55,920
um the objective of this document to

316
00:13:55,920 --> 00:13:57,519
compile

317
00:13:57,519 --> 00:13:59,279
uh the use cases

318
00:13:59,279 --> 00:14:00,240
for

319
00:14:00,240 --> 00:14:01,519
um

320
00:14:01,519 --> 00:14:04,639
mia that that the design team has been

321
00:14:04,639 --> 00:14:07,839
discussing uh in the weekly uh

322
00:14:07,839 --> 00:14:08,800
calls

323
00:14:08,800 --> 00:14:12,880
um so we we have attempted to cover um

324
00:14:12,880 --> 00:14:14,480
what has been discussed so far and

325
00:14:14,480 --> 00:14:18,160
what's documented on our wiki

326
00:14:18,639 --> 00:14:20,480
we're welcome to

327
00:14:20,480 --> 00:14:22,639
to add more to the document or even

328
00:14:22,639 --> 00:14:24,480
update what we have

329
00:14:24,480 --> 00:14:27,279
next slide please

330
00:14:28,800 --> 00:14:31,920
a bit of overview uh although uh law had

331
00:14:31,920 --> 00:14:34,959
given a bit of introduction again

332
00:14:34,959 --> 00:14:38,480
sorry uh go back please

333
00:14:38,480 --> 00:14:40,399
one slide

334
00:14:40,399 --> 00:14:41,440
okay

335
00:14:41,440 --> 00:14:42,720
um

336
00:14:42,720 --> 00:14:44,800
so the npls function indicators and

337
00:14:44,800 --> 00:14:47,440
ancillary data miad attends to address

338
00:14:47,440 --> 00:14:49,120
requirements from

339
00:14:49,120 --> 00:14:52,959
uh new application mpls applications

340
00:14:52,959 --> 00:14:56,240
uh these uh require inclusion of uh

341
00:14:56,240 --> 00:14:58,959
an indicator inside the mpls packet to

342
00:14:58,959 --> 00:15:01,360
allow specific functions to be invoked

343
00:15:01,360 --> 00:15:02,880
on the packet

344
00:15:02,880 --> 00:15:05,839
as the packet traverses the uh

345
00:15:05,839 --> 00:15:08,160
the lsb path

346
00:15:08,160 --> 00:15:10,240
uh ancillary data

347
00:15:10,240 --> 00:15:12,480
may be included to supplement the

348
00:15:12,480 --> 00:15:16,000
invocation of such specific functions

349
00:15:16,000 --> 00:15:17,839
and actions

350
00:15:17,839 --> 00:15:21,040
uh these ancillary data are added by the

351
00:15:21,040 --> 00:15:23,440
ingress ler and

352
00:15:23,440 --> 00:15:25,519
they're they're added along with the

353
00:15:25,519 --> 00:15:27,199
user traffic

354
00:15:27,199 --> 00:15:30,399
uh they may be updated by transit lsrs

355
00:15:30,399 --> 00:15:31,360
and

356
00:15:31,360 --> 00:15:32,480
ldr

357
00:15:32,480 --> 00:15:34,959
as the packet traverses the lsp

358
00:15:34,959 --> 00:15:37,920
and they're disposed of and removed

359
00:15:37,920 --> 00:15:41,800
by the egress ldr

360
00:15:41,839 --> 00:15:44,720
next slide please

361
00:15:45,600 --> 00:15:48,320
so in terms of use cases that we have

362
00:15:48,320 --> 00:15:50,800
compiled the first one

363
00:15:50,800 --> 00:15:54,000
talks about no further reroute we have a

364
00:15:54,000 --> 00:15:55,839
reference for

365
00:15:55,839 --> 00:15:56,639
the

366
00:15:56,639 --> 00:15:58,720
the document that introduced this use

367
00:15:58,720 --> 00:16:00,480
case

368
00:16:00,480 --> 00:16:03,920
there are cases where uh we have uh fast

369
00:16:03,920 --> 00:16:05,680
readout protection

370
00:16:05,680 --> 00:16:08,959
and after the failure we read out

371
00:16:08,959 --> 00:16:12,079
traffic on the on the backup path

372
00:16:12,079 --> 00:16:14,320
but then on the back while the packets

373
00:16:14,320 --> 00:16:16,079
are traversing the backup path there

374
00:16:16,079 --> 00:16:18,800
could be another uh secondary event a

375
00:16:18,800 --> 00:16:20,240
failure event

376
00:16:20,240 --> 00:16:21,279
and

377
00:16:21,279 --> 00:16:24,000
still a another fr can happen on the

378
00:16:24,000 --> 00:16:26,240
backup path itself

379
00:16:26,240 --> 00:16:27,199
uh

380
00:16:27,199 --> 00:16:29,600
and rerouting the packets

381
00:16:29,600 --> 00:16:32,480
uh towards the original pplr in that

382
00:16:32,480 --> 00:16:35,680
case uh there could be a loop that could

383
00:16:35,680 --> 00:16:36,720
happen

384
00:16:36,720 --> 00:16:39,360
between the two plrs the first plr and

385
00:16:39,360 --> 00:16:42,560
the second event plr

386
00:16:42,560 --> 00:16:45,600
there is an example in the document uh

387
00:16:45,600 --> 00:16:48,480
described where we have multi-homing

388
00:16:48,480 --> 00:16:50,639
and um uh

389
00:16:50,639 --> 00:16:51,519
uh

390
00:16:51,519 --> 00:16:54,480
edge protection uh um

391
00:16:54,480 --> 00:16:58,240
and cep links fail uh the the the pair

392
00:16:58,240 --> 00:17:01,120
of pes are protecting each other

393
00:17:01,120 --> 00:17:03,440
so the first event uh

394
00:17:03,440 --> 00:17:05,520
the pe would send to the other pe and

395
00:17:05,520 --> 00:17:07,599
then the second event other pe will send

396
00:17:07,599 --> 00:17:09,359
back to the first pe and we have that

397
00:17:09,359 --> 00:17:10,559
loop

398
00:17:10,559 --> 00:17:11,280
so

399
00:17:11,280 --> 00:17:14,240
basically no further reroute

400
00:17:14,240 --> 00:17:18,720
is a an indicator inside the packet

401
00:17:18,720 --> 00:17:21,839
that tells any node

402
00:17:21,839 --> 00:17:24,559
that when once carried inside the packet

403
00:17:24,559 --> 00:17:26,400
tells any node

404
00:17:26,400 --> 00:17:29,760
acting as a plr not to read out again

405
00:17:29,760 --> 00:17:33,200
or reroute is not allowed again

406
00:17:33,200 --> 00:17:36,880
if a failure is is detected

407
00:17:36,880 --> 00:17:38,480
this is to

408
00:17:38,480 --> 00:17:41,039
disallow that loop

409
00:17:41,039 --> 00:17:43,919
potential loop from happening

410
00:17:43,919 --> 00:17:45,679
so this is the first use case that we

411
00:17:45,679 --> 00:17:49,120
compiled the second use case is about in

412
00:17:49,120 --> 00:17:50,960
c to oam

413
00:17:50,960 --> 00:17:52,960
this is one flavor of

414
00:17:52,960 --> 00:17:54,160
oem

415
00:17:54,160 --> 00:17:56,960
where we carry

416
00:17:57,200 --> 00:18:01,120
additional data inside the user uh plain

417
00:18:01,120 --> 00:18:03,919
traffic so such data like uh

418
00:18:03,919 --> 00:18:06,960
telemetry or um

419
00:18:06,960 --> 00:18:07,919
uh

420
00:18:07,919 --> 00:18:09,600
operational data like

421
00:18:09,600 --> 00:18:11,520
time stamps and so on

422
00:18:11,520 --> 00:18:12,880
um

423
00:18:12,880 --> 00:18:15,520
is carried along with the user traffic

424
00:18:15,520 --> 00:18:16,799
um

425
00:18:16,799 --> 00:18:20,000
and uh and these these ancillary data

426
00:18:20,000 --> 00:18:21,760
can be updated a lot

427
00:18:21,760 --> 00:18:24,960
by lsrs as the packet traverse the path

428
00:18:24,960 --> 00:18:29,840
so there is a flavor of ion that

429
00:18:30,160 --> 00:18:32,799
touches the packet content hop by hop

430
00:18:32,799 --> 00:18:35,360
and there is another flavor that's only

431
00:18:35,360 --> 00:18:37,200
edge to edge

432
00:18:37,200 --> 00:18:39,760
so the requirement is to have

433
00:18:39,760 --> 00:18:42,240
such an iuem function indicator carried

434
00:18:42,240 --> 00:18:45,840
inside the packet so that we can alert

435
00:18:45,840 --> 00:18:49,440
the nodes that need to process or

436
00:18:49,440 --> 00:18:52,160
update the ancillary the iom ancillary

437
00:18:52,160 --> 00:18:53,520
data

438
00:18:53,520 --> 00:18:56,480
next slide please

439
00:18:56,480 --> 00:18:59,360
so the third use case that we

440
00:18:59,360 --> 00:19:02,160
touched upon is related to network

441
00:19:02,160 --> 00:19:03,520
slicing

442
00:19:03,520 --> 00:19:05,360
and more specifically to a network

443
00:19:05,360 --> 00:19:08,720
resource partition which is the underlay

444
00:19:08,720 --> 00:19:10,799
which is a partitioning of the underlay

445
00:19:10,799 --> 00:19:12,400
network

446
00:19:12,400 --> 00:19:13,280
um

447
00:19:13,280 --> 00:19:15,520
in that case um

448
00:19:15,520 --> 00:19:17,360
if we are partitioning the underlay

449
00:19:17,360 --> 00:19:20,320
network uh and assigning resources to

450
00:19:20,320 --> 00:19:22,720
different partitions

451
00:19:22,720 --> 00:19:24,880
there is a need to identify the packets

452
00:19:24,880 --> 00:19:27,520
belonging to one

453
00:19:27,520 --> 00:19:30,240
network resource partition and then

454
00:19:30,240 --> 00:19:32,880
apply the perhap behavior or the

455
00:19:32,880 --> 00:19:35,440
specific

456
00:19:36,480 --> 00:19:39,520
profile treatment on that packet

457
00:19:39,520 --> 00:19:43,039
so there is a requirement to carry

458
00:19:43,039 --> 00:19:45,679
a resource selector function indicator i

459
00:19:45,679 --> 00:19:46,880
called it

460
00:19:46,880 --> 00:19:48,799
or a flow aggregate selector and other

461
00:19:48,799 --> 00:19:52,160
documents so that the lsrs are able to

462
00:19:52,160 --> 00:19:56,160
invoke the perhap behavior

463
00:19:57,039 --> 00:19:57,919
so

464
00:19:57,919 --> 00:19:59,679
this is the third use case the the

465
00:19:59,679 --> 00:20:02,000
fourth use case is related to time

466
00:20:02,000 --> 00:20:04,400
sensitive networking we have compiled

467
00:20:04,400 --> 00:20:06,640
this use case and we admit that we

468
00:20:06,640 --> 00:20:08,960
haven't given it

469
00:20:08,960 --> 00:20:10,720
much

470
00:20:10,720 --> 00:20:13,440
investigation yet we need to

471
00:20:13,440 --> 00:20:17,039
engage that net working group on

472
00:20:17,039 --> 00:20:18,640
their interest in

473
00:20:18,640 --> 00:20:20,960
in covering this use case in more detail

474
00:20:20,960 --> 00:20:23,200
but here it is uh

475
00:20:23,200 --> 00:20:26,000
the packet the mplus packet can carry a

476
00:20:26,000 --> 00:20:29,760
timestamp or a time budget uh that

477
00:20:29,760 --> 00:20:32,880
enable rockers to make queuing decisions

478
00:20:32,880 --> 00:20:36,320
um when the packet is traversing a an

479
00:20:36,320 --> 00:20:38,480
lsp

480
00:20:38,480 --> 00:20:40,559
so for example they could uh

481
00:20:40,559 --> 00:20:43,280
prioritize sending out the packet if the

482
00:20:43,280 --> 00:20:45,919
time budget budget is

483
00:20:45,919 --> 00:20:50,000
is shorter um and

484
00:20:50,000 --> 00:20:51,200
as

485
00:20:51,200 --> 00:20:53,679
as packet

486
00:20:53,679 --> 00:20:56,400
are forwarded along the path we have a

487
00:20:56,400 --> 00:20:57,520
times

488
00:20:57,520 --> 00:20:59,440
timestamp or budget associated with

489
00:20:59,440 --> 00:21:00,840
every hub for

490
00:21:00,840 --> 00:21:03,679
example um

491
00:21:03,679 --> 00:21:05,840
so the requirement is for the packet to

492
00:21:05,840 --> 00:21:08,559
be marked with a and a a time function

493
00:21:08,559 --> 00:21:09,840
indicator

494
00:21:09,840 --> 00:21:12,880
and as well carry additional ancillary

495
00:21:12,880 --> 00:21:15,440
data which is the time stamp

496
00:21:15,440 --> 00:21:18,720
that allow lsrs to use to use such a

497
00:21:18,720 --> 00:21:20,960
timestamp to prioritize and schedule the

498
00:21:20,960 --> 00:21:22,720
packet

499
00:21:22,720 --> 00:21:25,280
um this is related to the fourth use

500
00:21:25,280 --> 00:21:27,200
case we compile i believe this is the

501
00:21:27,200 --> 00:21:28,880
last one but let me double check is

502
00:21:28,880 --> 00:21:31,840
there a next slide uh

503
00:21:31,840 --> 00:21:33,760
ah there is okay sorry

504
00:21:33,760 --> 00:21:34,799
um

505
00:21:34,799 --> 00:21:37,120
the fifth use case that we have compiled

506
00:21:37,120 --> 00:21:39,600
was related to network programming

507
00:21:39,600 --> 00:21:44,559
uh we know about rfc 8986 which is uh

508
00:21:44,559 --> 00:21:48,720
network programming in srv6 data plane

509
00:21:48,720 --> 00:21:50,400
um

510
00:21:50,400 --> 00:21:53,520
the uh this rfc uh with with that uh

511
00:21:53,520 --> 00:21:55,840
functionality we get we it allows an

512
00:21:55,840 --> 00:22:00,240
operator on an application to specify

513
00:22:00,240 --> 00:22:03,039
a packet processing program

514
00:22:03,039 --> 00:22:03,840
that

515
00:22:03,840 --> 00:22:06,000
to be encoded inside the packet

516
00:22:06,000 --> 00:22:09,120
and as well a sequence of instructions

517
00:22:09,120 --> 00:22:10,799
inside the packet header

518
00:22:10,799 --> 00:22:12,400
so once we

519
00:22:12,400 --> 00:22:15,200
carry this inside the packet

520
00:22:15,200 --> 00:22:16,960
we can allow

521
00:22:16,960 --> 00:22:20,240
such a program to be run by the network

522
00:22:20,240 --> 00:22:23,360
on specific nodes

523
00:22:24,159 --> 00:22:27,120
the mpls packets may carry such uh such

524
00:22:27,120 --> 00:22:29,919
a program uh instruction as a function

525
00:22:29,919 --> 00:22:31,520
indicator so that's one thing we

526
00:22:31,520 --> 00:22:32,880
discussed uh

527
00:22:32,880 --> 00:22:35,760
during the design team as a potential

528
00:22:35,760 --> 00:22:38,880
uh functionality that can could come out

529
00:22:38,880 --> 00:22:41,360
from miad

530
00:22:41,360 --> 00:22:43,440
is that carrying such a program inside

531
00:22:43,440 --> 00:22:46,559
the packet as well as some arguments

532
00:22:46,559 --> 00:22:49,520
that we can pass along

533
00:22:49,520 --> 00:22:51,600
so that we can run that function or our

534
00:22:51,600 --> 00:22:52,880
program

535
00:22:52,880 --> 00:22:55,919
and those arguments can be the ancillary

536
00:22:55,919 --> 00:23:00,240
data carried with the with the packet

537
00:23:00,559 --> 00:23:02,640
and the last use case that

538
00:23:02,640 --> 00:23:03,440
we

539
00:23:03,440 --> 00:23:06,080
compiled in this report

540
00:23:06,080 --> 00:23:08,799
was related to service function chaining

541
00:23:08,799 --> 00:23:09,679
um

542
00:23:09,679 --> 00:23:14,000
there is an rfc in mpls that modeled

543
00:23:14,000 --> 00:23:16,640
surface service function chain in header

544
00:23:16,640 --> 00:23:18,880
um

545
00:23:19,360 --> 00:23:22,480
by emulating the nsh network service

546
00:23:22,480 --> 00:23:25,360
header inside the label stack

547
00:23:25,360 --> 00:23:27,440
so there was no need for an extension

548
00:23:27,440 --> 00:23:28,640
header

549
00:23:28,640 --> 00:23:31,760
to to carry the network service

550
00:23:31,760 --> 00:23:33,919
the nsh

551
00:23:33,919 --> 00:23:34,960
but

552
00:23:34,960 --> 00:23:38,480
using miad we're able to carry the

553
00:23:38,480 --> 00:23:41,120
ancillary data and we need to do some

554
00:23:41,120 --> 00:23:43,600
further investigation if

555
00:23:43,600 --> 00:23:45,840
if um

556
00:23:45,840 --> 00:23:49,600
in carrying the nsh as ancillary data

557
00:23:49,600 --> 00:23:52,559
is superior to emulating the nsh inside

558
00:23:52,559 --> 00:23:55,279
the legal stack

559
00:23:58,400 --> 00:24:00,720
these were the use cases that we have

560
00:24:00,720 --> 00:24:04,960
compiled in terms of next steps

561
00:24:06,159 --> 00:24:07,360
some of the

562
00:24:07,360 --> 00:24:10,159
documented use cases were driven by

563
00:24:10,159 --> 00:24:12,480
application requirements that we know

564
00:24:12,480 --> 00:24:14,720
about there are

565
00:24:14,720 --> 00:24:17,840
there's interest from the field in

566
00:24:17,840 --> 00:24:20,880
in solving these use cases

567
00:24:20,880 --> 00:24:23,360
um other require further investigation

568
00:24:23,360 --> 00:24:25,840
and validation as i pointed

569
00:24:25,840 --> 00:24:27,279
so

570
00:24:27,279 --> 00:24:29,120
we would welcome

571
00:24:29,120 --> 00:24:31,279
operators and other

572
00:24:31,279 --> 00:24:32,400
experts to

573
00:24:32,400 --> 00:24:33,840
engage and

574
00:24:33,840 --> 00:24:36,480
sound their opinion on this

575
00:24:36,480 --> 00:24:38,880
we as usual we welcome further input

576
00:24:38,880 --> 00:24:41,520
from the working groups and

577
00:24:41,520 --> 00:24:43,520
addition and update

578
00:24:43,520 --> 00:24:47,440
to the document is welcome

579
00:24:47,440 --> 00:24:49,360
thank you and uh sorry if i took more

580
00:24:49,360 --> 00:24:51,760
time than a lot did

581
00:24:51,760 --> 00:24:53,840
you we're absolutely bang on time are

582
00:24:53,840 --> 00:24:56,480
there any questions

583
00:24:58,240 --> 00:25:01,840
yes yes

584
00:25:19,120 --> 00:25:21,679
all right so um it's actually

585
00:25:21,679 --> 00:25:23,360
being done jointly in the three working

586
00:25:23,360 --> 00:25:25,279
groups and the reason that pals has an

587
00:25:25,279 --> 00:25:28,720
interest is that powell's uh it was the

588
00:25:28,720 --> 00:25:33,200
first um and then.net was the second um

589
00:25:33,200 --> 00:25:36,640
system that carried um data below the

590
00:25:36,640 --> 00:25:38,799
bottom of stack in order to process the

591
00:25:38,799 --> 00:25:42,400
packets so in part this is to make sure

592
00:25:42,400 --> 00:25:45,039
that um

593
00:25:45,039 --> 00:25:45,760
we

594
00:25:45,760 --> 00:25:47,279
um

595
00:25:47,279 --> 00:25:49,760
we don't trip over any of the historic

596
00:25:49,760 --> 00:25:51,679
work in the those systems

597
00:25:51,679 --> 00:25:53,360
continue to work properly

598
00:25:53,360 --> 00:25:55,919
as to why this is tagged a pals meeting

599
00:25:55,919 --> 00:25:58,799
it is it is entirely sort of procedural

600
00:25:58,799 --> 00:26:01,279
and administrative because we couldn't

601
00:26:01,279 --> 00:26:03,840
do it all in one slot and so the we

602
00:26:03,840 --> 00:26:06,640
requested a second slot to deal with

603
00:26:06,640 --> 00:26:08,880
this particular thing mpls will follow

604
00:26:08,880 --> 00:26:11,840
in doing its normal work

605
00:26:12,960 --> 00:26:16,360
i think you're next

606
00:26:34,159 --> 00:26:37,840
maybe can people mute if we speak

607
00:26:37,840 --> 00:26:39,039
it better now

608
00:26:39,039 --> 00:26:41,279
hello can you hear this one

609
00:26:41,279 --> 00:26:43,440
yeah i think it's better but i think the

610
00:26:43,440 --> 00:26:45,360
other people have to mute if we speak

611
00:26:45,360 --> 00:26:46,720
properly

612
00:26:46,720 --> 00:26:48,080
my uh

613
00:26:48,080 --> 00:26:50,080
my question was the following tariq i

614
00:26:50,080 --> 00:26:51,600
think it's a first of all very good

615
00:26:51,600 --> 00:26:52,640
overview

616
00:26:52,640 --> 00:26:55,279
my point was a bit on the number five of

617
00:26:55,279 --> 00:26:57,679
the use cases if you do five would you

618
00:26:57,679 --> 00:27:00,880
not cover all the others

619
00:27:01,919 --> 00:27:02,880
because

620
00:27:02,880 --> 00:27:06,000
five is the

621
00:27:06,000 --> 00:27:08,000
so five is network programming in my

622
00:27:08,000 --> 00:27:10,559
view it's a bit of the overarching uh

623
00:27:10,559 --> 00:27:12,720
thing that you can do so if you do five

624
00:27:12,720 --> 00:27:15,200
you probably if you do five

625
00:27:15,200 --> 00:27:17,279
let's say well then you probably have

626
00:27:17,279 --> 00:27:18,720
covered the other

627
00:27:18,720 --> 00:27:20,880
other ones as well

628
00:27:20,880 --> 00:27:22,320
so good point

629
00:27:22,320 --> 00:27:24,720
let me let me try to answer that so

630
00:27:24,720 --> 00:27:27,360
indeed um as i mentioned some of the

631
00:27:27,360 --> 00:27:29,919
application requirements um some of the

632
00:27:29,919 --> 00:27:34,159
requirements were driven by um

633
00:27:34,159 --> 00:27:37,760
by use cases brought forward um

634
00:27:37,760 --> 00:27:39,919
from the field um

635
00:27:39,919 --> 00:27:43,039
and um the number five was an aspiration

636
00:27:43,039 --> 00:27:44,320
um you know

637
00:27:44,320 --> 00:27:46,880
as you say if we model number five we

638
00:27:46,880 --> 00:27:50,000
can model any function or any program to

639
00:27:50,000 --> 00:27:51,840
be invoked in the packet

640
00:27:51,840 --> 00:27:54,240
the question is

641
00:27:54,240 --> 00:27:56,080
it's under investigation this is what i

642
00:27:56,080 --> 00:27:58,720
put in in between brackets and it's an

643
00:27:58,720 --> 00:28:00,240
aspiration the question to the working

644
00:28:00,240 --> 00:28:01,760
group is this

645
00:28:01,760 --> 00:28:04,159
of interest to the working group and to

646
00:28:04,159 --> 00:28:06,559
the operators is this solving

647
00:28:06,559 --> 00:28:09,200
specific problems to them that we want

648
00:28:09,200 --> 00:28:11,679
to bring about

649
00:28:11,679 --> 00:28:14,000
this type of use case

650
00:28:14,000 --> 00:28:15,919
but it's a valid uh point that you're

651
00:28:15,919 --> 00:28:17,919
raising and my point is if you look at

652
00:28:17,919 --> 00:28:20,000
five i mean it's maybe a good reflection

653
00:28:20,000 --> 00:28:21,919
on the other use case because if you do

654
00:28:21,919 --> 00:28:23,840
let's say have a general i in my view

655
00:28:23,840 --> 00:28:26,080
five is a bit of a general uh structure

656
00:28:26,080 --> 00:28:28,880
to be able to do multiple things right i

657
00:28:28,880 --> 00:28:31,200
at least that's the theory

658
00:28:31,200 --> 00:28:33,600
uh and if you could see that you can

659
00:28:33,600 --> 00:28:36,799
model the other use cases by doing five

660
00:28:36,799 --> 00:28:39,120
that would then i then we have a general

661
00:28:39,120 --> 00:28:41,679
generic mechanism to do multiple use

662
00:28:41,679 --> 00:28:43,200
cases potentially i don't know whether

663
00:28:43,200 --> 00:28:45,679
it's possible or not but i that's why i

664
00:28:45,679 --> 00:28:48,559
how i personally see it

665
00:28:48,559 --> 00:28:51,120
so me ad is indeed generic

666
00:28:51,120 --> 00:28:53,440
miat is not we're not designing specific

667
00:28:53,440 --> 00:28:56,080
solutions for specific application the

668
00:28:56,080 --> 00:28:59,760
the design team has um you know put

669
00:28:59,760 --> 00:29:01,200
itself to

670
00:29:01,200 --> 00:29:03,760
design a genetic way to solve this

671
00:29:03,760 --> 00:29:04,720
problem

672
00:29:04,720 --> 00:29:07,520
um so indeed if we create

673
00:29:07,520 --> 00:29:10,000
this generic solution

674
00:29:10,000 --> 00:29:13,200
for number or five and to be more more

675
00:29:13,200 --> 00:29:16,200
comprehensive

676
00:29:31,039 --> 00:29:34,080
um so um we um

677
00:29:34,080 --> 00:29:35,840
we got we got some time at the end i'd

678
00:29:35,840 --> 00:29:37,600
like to continue this discussion which

679
00:29:37,600 --> 00:29:39,600
seems to be of an over overarching sort

680
00:29:39,600 --> 00:29:42,559
of type um at the end please uh so we

681
00:29:42,559 --> 00:29:45,440
just go we can move on with the the base

682
00:29:45,440 --> 00:29:46,799
information we need to start the

683
00:29:46,799 --> 00:29:48,159
discussion

684
00:29:48,159 --> 00:29:51,679
so next is matthew

685
00:29:52,480 --> 00:29:54,880
thank you

686
00:30:02,000 --> 00:30:06,120
where's the requirements gone

687
00:30:13,840 --> 00:30:15,600
there we go

688
00:30:15,600 --> 00:30:18,399
thank you so this um this presentation

689
00:30:18,399 --> 00:30:19,840
is about the

690
00:30:19,840 --> 00:30:22,399
ad requirements draft

691
00:30:22,399 --> 00:30:23,279
that

692
00:30:23,279 --> 00:30:25,360
stuart and i have been editing but it's

693
00:30:25,360 --> 00:30:27,760
very much an output of the open design

694
00:30:27,760 --> 00:30:29,200
team we had a lot of review and

695
00:30:29,200 --> 00:30:30,399
discussion

696
00:30:30,399 --> 00:30:33,520
of the points in the requirements draft

697
00:30:33,520 --> 00:30:36,480
during the open dt meetings

698
00:30:36,480 --> 00:30:39,760
next slide please

699
00:30:40,480 --> 00:30:43,440
so so this document captures the key

700
00:30:43,440 --> 00:30:45,440
requirements for both the ancillary data

701
00:30:45,440 --> 00:30:47,440
and the indicators in the mpls label

702
00:30:47,440 --> 00:30:49,279
stack that support

703
00:30:49,279 --> 00:30:50,960
i've written network actions there but

704
00:30:50,960 --> 00:30:52,799
as uh

705
00:30:52,799 --> 00:30:54,720
as was indicated as lower indicated

706
00:30:54,720 --> 00:30:56,240
early on there's some

707
00:30:56,240 --> 00:30:57,919
discussion around the exact terminology

708
00:30:57,919 --> 00:31:01,679
here um the user ancillary data

709
00:31:01,679 --> 00:31:04,000
as mentioned it's a product of the mpls

710
00:31:04,000 --> 00:31:06,000
open design team

711
00:31:06,000 --> 00:31:07,279
um

712
00:31:07,279 --> 00:31:08,960
so the the requirements we've got in

713
00:31:08,960 --> 00:31:11,679
there were largely derived from uh

714
00:31:11,679 --> 00:31:14,080
looking at the proposals for additions

715
00:31:14,080 --> 00:31:16,080
to the mpls label stack

716
00:31:16,080 --> 00:31:17,440
so look at some of the solutions that

717
00:31:17,440 --> 00:31:19,840
propose looking at the use cases

718
00:31:19,840 --> 00:31:21,919
um to allow decisions about those

719
00:31:21,919 --> 00:31:26,320
actions uh based on uh application data

720
00:31:26,320 --> 00:31:27,440
um

721
00:31:27,440 --> 00:31:29,440
and that application data so that's

722
00:31:29,440 --> 00:31:31,600
that's the ancillary data can exist

723
00:31:31,600 --> 00:31:35,200
within or below the label stack

724
00:31:35,200 --> 00:31:37,360
and the actions can be performed by

725
00:31:37,360 --> 00:31:39,600
intermediate or transit lsrs or

726
00:31:39,600 --> 00:31:43,600
terminating lsrs of for the lsp

727
00:31:43,600 --> 00:31:45,039
i should make clear that the

728
00:31:45,039 --> 00:31:47,200
requirements are on the protocol design

729
00:31:47,200 --> 00:31:50,080
work not on what implementations have to

730
00:31:50,080 --> 00:31:51,120
support

731
00:31:51,120 --> 00:31:52,880
as i think is generally the case for the

732
00:31:52,880 --> 00:31:54,399
requirements documents and these

733
00:31:54,399 --> 00:31:57,360
projects in the itf

734
00:31:57,360 --> 00:31:58,840
next slide

735
00:31:58,840 --> 00:32:02,880
is so the draft is is structured into

736
00:32:02,880 --> 00:32:05,760
kind of four sections um

737
00:32:05,760 --> 00:32:07,360
we tried to define some of the base

738
00:32:07,360 --> 00:32:09,919
terminology and the terminology work

739
00:32:09,919 --> 00:32:11,600
that we did here was done generally

740
00:32:11,600 --> 00:32:12,720
before

741
00:32:12,720 --> 00:32:14,559
the framework draft although some of the

742
00:32:14,559 --> 00:32:16,799
terminology may end up being

743
00:32:16,799 --> 00:32:19,120
standardized really in in the framework

744
00:32:19,120 --> 00:32:20,799
drafts and so we may need to update this

745
00:32:20,799 --> 00:32:21,919
part

746
00:32:21,919 --> 00:32:23,279
um

747
00:32:23,279 --> 00:32:24,960
some general requirements are kind of a

748
00:32:24,960 --> 00:32:27,120
set of design principles that underpin

749
00:32:27,120 --> 00:32:28,720
the work

750
00:32:28,720 --> 00:32:31,679
uh requirements on the ancillary data

751
00:32:31,679 --> 00:32:33,840
indicators so there's the indicators in

752
00:32:33,840 --> 00:32:35,760
the label stack for the presence of

753
00:32:35,760 --> 00:32:38,880
ancillary data and what to do with it

754
00:32:38,880 --> 00:32:41,519
and requirements on the ancillary data

755
00:32:41,519 --> 00:32:43,760
itself

756
00:32:43,760 --> 00:32:46,320
next slide

757
00:32:46,320 --> 00:32:47,679
so i just wanted to highlight some of

758
00:32:47,679 --> 00:32:51,039
the the key new terminology that we we

759
00:32:51,039 --> 00:32:55,039
started by defining in in this draft

760
00:32:55,120 --> 00:32:57,279
and these may change depending on on the

761
00:32:57,279 --> 00:32:59,200
framework draft or the details of this

762
00:32:59,200 --> 00:33:01,039
terminology may change depending on on

763
00:33:01,039 --> 00:33:02,640
the work on going work in the framework

764
00:33:02,640 --> 00:33:03,919
draft

765
00:33:03,919 --> 00:33:06,559
so the first one is the ancillary data

766
00:33:06,559 --> 00:33:08,480
so this is defined in

767
00:33:08,480 --> 00:33:10,480
this requirements draft as data relating

768
00:33:10,480 --> 00:33:12,559
to the mpls packet

769
00:33:12,559 --> 00:33:14,000
that may be used to affect the

770
00:33:14,000 --> 00:33:15,840
forwarding or other processing of that

771
00:33:15,840 --> 00:33:16,799
packet

772
00:33:16,799 --> 00:33:20,240
either an ler or an lsr

773
00:33:20,240 --> 00:33:22,000
and this data may be encoded within the

774
00:33:22,000 --> 00:33:25,120
label stack so it's termed in stack data

775
00:33:25,120 --> 00:33:26,880
or

776
00:33:26,880 --> 00:33:28,720
and or after the bottom of the label

777
00:33:28,720 --> 00:33:32,640
stack and that's termed post stack data

778
00:33:32,799 --> 00:33:35,360
the second major term new term is the

779
00:33:35,360 --> 00:33:38,559
ancillary data indicator or adi

780
00:33:38,559 --> 00:33:40,960
so this is an indicator in the mpls

781
00:33:40,960 --> 00:33:42,960
label stack that ancillary data exists

782
00:33:42,960 --> 00:33:44,320
in the packet

783
00:33:44,320 --> 00:33:46,080
it can also

784
00:33:46,080 --> 00:33:48,480
indicate the specific type of the

785
00:33:48,480 --> 00:33:50,559
ancillary data

786
00:33:50,559 --> 00:33:52,480
so it gives some indications on how to

787
00:33:52,480 --> 00:33:54,480
process the the ancillary data in that

788
00:33:54,480 --> 00:33:56,080
case

789
00:33:56,080 --> 00:33:58,320
uh we also tried to define end to end

790
00:33:58,320 --> 00:34:00,240
and hot by hot but really these need to

791
00:34:00,240 --> 00:34:01,679
be defined

792
00:34:01,679 --> 00:34:03,600
in these really architectural concepts

793
00:34:03,600 --> 00:34:05,279
and they they need to be defined ready

794
00:34:05,279 --> 00:34:07,679
in the framework draft so i won't

795
00:34:07,679 --> 00:34:10,639
dwell on those here

796
00:34:10,960 --> 00:34:14,000
next general requirements so this is uh

797
00:34:14,000 --> 00:34:15,119
the first of the main requirement

798
00:34:15,119 --> 00:34:16,560
sections

799
00:34:16,560 --> 00:34:18,480
um and and these are mainly about

800
00:34:18,480 --> 00:34:20,239
ensuring consistency of the design with

801
00:34:20,239 --> 00:34:24,158
mpls and the efficiency of the protocol

802
00:34:24,320 --> 00:34:26,480
and i've just copied a few of the main

803
00:34:26,480 --> 00:34:28,239
ones here

804
00:34:28,239 --> 00:34:31,119
from from the requirements draft so

805
00:34:31,119 --> 00:34:33,280
so mpls today combines extensibility

806
00:34:33,280 --> 00:34:36,000
flexibility and efficiency by using

807
00:34:36,000 --> 00:34:38,399
a control plane context combined with

808
00:34:38,399 --> 00:34:40,719
some very simple data plane uh

809
00:34:40,719 --> 00:34:42,399
mechanisms to allow the network to make

810
00:34:42,399 --> 00:34:44,800
forwarding decisions about a packet

811
00:34:44,800 --> 00:34:47,679
and we're not trying to change or break

812
00:34:47,679 --> 00:34:48,560
or

813
00:34:48,560 --> 00:34:49,918
be inconsistent with any of these

814
00:34:49,918 --> 00:34:52,079
properties so any solution must maintain

815
00:34:52,079 --> 00:34:53,760
these kind of properties of mpls in

816
00:34:53,760 --> 00:34:56,079
general

817
00:34:57,920 --> 00:35:00,079
any solutions to these requirements must

818
00:35:00,079 --> 00:35:02,880
not restrict the generality of the mpls

819
00:35:02,880 --> 00:35:04,880
architecture so what we meant by that i

820
00:35:04,880 --> 00:35:06,160
think was

821
00:35:06,160 --> 00:35:08,720
the ability of the mpls architecture to

822
00:35:08,720 --> 00:35:11,760
evolve and be extended in future for new

823
00:35:11,760 --> 00:35:14,640
solutions so we're not kind of

824
00:35:14,640 --> 00:35:16,480
nailing down a particular version of the

825
00:35:16,480 --> 00:35:18,480
npls architecture here it's it's proven

826
00:35:18,480 --> 00:35:21,280
to be extremely flexible in the past

827
00:35:21,280 --> 00:35:23,440
and by mpls architecture we mean what's

828
00:35:23,440 --> 00:35:28,160
defined in rfc's 3031 and 3032

829
00:35:29,040 --> 00:35:31,280
if extensions to the mpls data plane are

830
00:35:31,280 --> 00:35:33,119
required they must not be inconsistent

831
00:35:33,119 --> 00:35:36,160
with the mpls architecture so we are

832
00:35:36,160 --> 00:35:38,400
going to try and use the as much as

833
00:35:38,400 --> 00:35:40,160
possible the existing

834
00:35:40,160 --> 00:35:44,320
mechanisms provided by mpls

835
00:35:44,320 --> 00:35:46,079
the design of any mechanism should be

836
00:35:46,079 --> 00:35:48,000
such that an lsr is able to efficiently

837
00:35:48,000 --> 00:35:49,839
pass the label stack

838
00:35:49,839 --> 00:35:51,680
um

839
00:35:51,680 --> 00:35:53,839
and mechanisms so that's basically don't

840
00:35:53,839 --> 00:35:56,079
detract from the existing very efficient

841
00:35:56,079 --> 00:35:58,640
data plane design of mpls

842
00:35:58,640 --> 00:36:00,880
um and mechanisms must not add more

843
00:36:00,880 --> 00:36:02,400
labels to the label stack than is

844
00:36:02,400 --> 00:36:04,880
necessary so try and constrain the size

845
00:36:04,880 --> 00:36:07,920
of the packets because there's still

846
00:36:07,920 --> 00:36:09,760
a lot of hardware out there in deployed

847
00:36:09,760 --> 00:36:11,920
networks that would have issues parsing

848
00:36:11,920 --> 00:36:14,880
very large packets

849
00:36:15,440 --> 00:36:17,119
next slide so then we have some

850
00:36:17,119 --> 00:36:18,720
requirements on the ancillary data

851
00:36:18,720 --> 00:36:20,560
indicators themselves um i won't go

852
00:36:20,560 --> 00:36:22,160
through all these there's quite a few

853
00:36:22,160 --> 00:36:24,720
quite a few in the draft

854
00:36:24,720 --> 00:36:26,079
so i won't go through them all in this

855
00:36:26,079 --> 00:36:28,240
presentation i just wanted to give you

856
00:36:28,240 --> 00:36:30,320
an overview of the intention of this

857
00:36:30,320 --> 00:36:31,440
section

858
00:36:31,440 --> 00:36:33,440
so this is a specific these are specific

859
00:36:33,440 --> 00:36:35,839
requirements on the design of ancillary

860
00:36:35,839 --> 00:36:37,920
data indicators

861
00:36:37,920 --> 00:36:39,520
and then really address the following

862
00:36:39,520 --> 00:36:42,640
themes so firstly the need for an adi at

863
00:36:42,640 --> 00:36:44,160
all

864
00:36:44,160 --> 00:36:46,400
um coexistence of the adi which is in

865
00:36:46,400 --> 00:36:48,400
the label stack with existing mpls

866
00:36:48,400 --> 00:36:50,720
mechanisms

867
00:36:50,720 --> 00:36:52,720
the need for mechanisms to enable a

868
00:36:52,720 --> 00:36:55,040
head-end ler to know whether

869
00:36:55,040 --> 00:36:57,280
and where in a label stack to insert an

870
00:36:57,280 --> 00:36:59,760
adi on the lsp

871
00:36:59,760 --> 00:37:01,359
and

872
00:37:01,359 --> 00:37:02,880
adi support for end-to-end and

873
00:37:02,880 --> 00:37:06,079
hot-by-hop processing of the ancillary

874
00:37:06,079 --> 00:37:09,079
data

875
00:37:10,160 --> 00:37:11,680
now require the next section is on

876
00:37:11,680 --> 00:37:13,280
requirements on the ancillary data

877
00:37:13,280 --> 00:37:15,119
itself now these are these are quite

878
00:37:15,119 --> 00:37:17,359
high obviously quite high level um we're

879
00:37:17,359 --> 00:37:19,599
not necessarily designing the details of

880
00:37:19,599 --> 00:37:21,200
the ancillary data but we need to at

881
00:37:21,200 --> 00:37:24,560
least have sufficient uh protocol design

882
00:37:24,560 --> 00:37:26,560
work to

883
00:37:26,560 --> 00:37:28,320
identify what the ancillary data is and

884
00:37:28,320 --> 00:37:30,079
roughly what to do with it

885
00:37:30,079 --> 00:37:31,359
so

886
00:37:31,359 --> 00:37:32,640
the high level these are high level

887
00:37:32,640 --> 00:37:35,119
requirements and then just address a set

888
00:37:35,119 --> 00:37:36,400
of themes

889
00:37:36,400 --> 00:37:37,920
the first is coexistence of the

890
00:37:37,920 --> 00:37:39,599
ancillary data which could be in the

891
00:37:39,599 --> 00:37:41,680
label stack with existing mpls

892
00:37:41,680 --> 00:37:43,520
mechanisms

893
00:37:43,520 --> 00:37:45,839
and also coexistence with post-stack

894
00:37:45,839 --> 00:37:48,320
mechanisms such as control words or

895
00:37:48,320 --> 00:37:49,520
generic

896
00:37:49,520 --> 00:37:51,359
aches

897
00:37:51,359 --> 00:37:53,520
um the next one's around price call

898
00:37:53,520 --> 00:37:55,920
efficiency so ensuring ancillary data is

899
00:37:55,920 --> 00:37:57,839
not too deep in the packet so we don't

900
00:37:57,839 --> 00:37:59,520
have to parse through a whole bunch of

901
00:37:59,520 --> 00:38:00,880
other layer four

902
00:38:00,880 --> 00:38:02,240
headers for example although three

903
00:38:02,240 --> 00:38:03,760
headers in the packet before we hit the

904
00:38:03,760 --> 00:38:06,640
ancillary data

905
00:38:07,040 --> 00:38:08,880
whether processing impacts the immediate

906
00:38:08,880 --> 00:38:10,560
forwarding operation or is or if

907
00:38:10,560 --> 00:38:12,240
mis-ordering is allowed so we had a lot

908
00:38:12,240 --> 00:38:16,560
of discussion on in the design team on

909
00:38:16,640 --> 00:38:19,040
fast path versus slow path processing

910
00:38:19,040 --> 00:38:21,599
what this really means um and i know

911
00:38:21,599 --> 00:38:23,119
that there's other working groups in in

912
00:38:23,119 --> 00:38:24,800
the itf that kind of grappling with this

913
00:38:24,800 --> 00:38:26,000
at the moment i've been in a few

914
00:38:26,000 --> 00:38:27,520
meetings this week

915
00:38:27,520 --> 00:38:28,320
so

916
00:38:28,320 --> 00:38:30,880
um we were trying to come up with a some

917
00:38:30,880 --> 00:38:33,359
sort of text here that that described

918
00:38:33,359 --> 00:38:35,760
this in a without going into the detail

919
00:38:35,760 --> 00:38:38,960
of the internals of the implementation

920
00:38:38,960 --> 00:38:40,240
and what we were really trying to

921
00:38:40,240 --> 00:38:41,359
achieve

922
00:38:41,359 --> 00:38:43,680
here

923
00:38:43,680 --> 00:38:46,000
the scope of the ancillary data so it

924
00:38:46,000 --> 00:38:47,040
could be

925
00:38:47,040 --> 00:38:49,359
maybe control or maintenance related or

926
00:38:49,359 --> 00:38:51,040
it may be related to the user traffic

927
00:38:51,040 --> 00:38:53,680
itself if that's relevant to the action

928
00:38:53,680 --> 00:38:56,640
on the packet in the network

929
00:38:56,640 --> 00:38:58,240
there's also a couple of requirements

930
00:38:58,240 --> 00:39:00,400
related to security and we kind of

931
00:39:00,400 --> 00:39:02,720
recognize that we're going to need to

932
00:39:02,720 --> 00:39:04,720
at some point do some security work in

933
00:39:04,720 --> 00:39:06,720
this area uh to get us through the

934
00:39:06,720 --> 00:39:09,119
security area that's one one thing

935
00:39:09,119 --> 00:39:10,400
um

936
00:39:10,400 --> 00:39:11,599
so

937
00:39:11,599 --> 00:39:13,359
and we identified a couple at this stage

938
00:39:13,359 --> 00:39:15,440
and again this is

939
00:39:15,440 --> 00:39:17,119
requirements on the kind of protocol

940
00:39:17,119 --> 00:39:19,520
design work that we need to do

941
00:39:19,520 --> 00:39:21,040
this is not saying that everybody has to

942
00:39:21,040 --> 00:39:22,240
implement this

943
00:39:22,240 --> 00:39:23,359
so

944
00:39:23,359 --> 00:39:25,440
the solution is intended

945
00:39:25,440 --> 00:39:27,440
it is needed a solution is needed to

946
00:39:27,440 --> 00:39:30,000
verify the authenticity of ancillary

947
00:39:30,000 --> 00:39:32,160
data so if i get some ancillary

948
00:39:32,160 --> 00:39:34,320
considerate data do i know it's where it

949
00:39:34,320 --> 00:39:37,040
came from is it authentic do i trust it

950
00:39:37,040 --> 00:39:39,359
um and the design shouldn't expose or

951
00:39:39,359 --> 00:39:41,920
must not expose confidential information

952
00:39:41,920 --> 00:39:43,839
in

953
00:39:43,839 --> 00:39:45,280
to the underlying network so it's

954
00:39:45,280 --> 00:39:46,160
basically maintaining the

955
00:39:46,160 --> 00:39:48,560
confidentiality of users traffic

956
00:39:48,560 --> 00:39:51,599
to the underlying network

957
00:39:52,480 --> 00:39:54,560
next slide

958
00:39:54,560 --> 00:39:56,560
so we've we've reviewed several versions

959
00:39:56,560 --> 00:39:59,040
of this draft uh really line by line in

960
00:39:59,040 --> 00:40:01,359
the own pillow second design team

961
00:40:01,359 --> 00:40:03,440
um we know it needs a bit more editorial

962
00:40:03,440 --> 00:40:05,599
cleanup there's i when going through i

963
00:40:05,599 --> 00:40:07,920
suppose a couple of duplicate

964
00:40:07,920 --> 00:40:10,319
requirements um there's also an

965
00:40:10,319 --> 00:40:12,560
additional set of comments received on

966
00:40:12,560 --> 00:40:14,160
version two

967
00:40:14,160 --> 00:40:16,400
um which we need to address so we think

968
00:40:16,400 --> 00:40:18,160
they're fairly straightforward

969
00:40:18,160 --> 00:40:19,839
and once we've done this i think the

970
00:40:19,839 --> 00:40:22,079
authors believe the draft is quite

971
00:40:22,079 --> 00:40:23,920
mature now it's been around for several

972
00:40:23,920 --> 00:40:25,119
months and through

973
00:40:25,119 --> 00:40:26,400
um three

974
00:40:26,400 --> 00:40:27,359
it would have been through four

975
00:40:27,359 --> 00:40:29,520
reversions by that point

976
00:40:29,520 --> 00:40:30,400
um

977
00:40:30,400 --> 00:40:32,560
it's mature and ready for the mpls

978
00:40:32,560 --> 00:40:35,520
working group adoption

979
00:40:35,920 --> 00:40:38,560
okay i think so

980
00:40:38,560 --> 00:40:41,359
you're first i think

981
00:40:43,760 --> 00:40:47,359
katan you have a question

982
00:40:50,560 --> 00:40:52,640
a question about the

983
00:40:52,640 --> 00:40:54,400
in-stack data

984
00:40:54,400 --> 00:40:56,480
do the requirements have is there

985
00:40:56,480 --> 00:40:58,319
something in the requirement about uh

986
00:40:58,319 --> 00:41:00,800
limiting it to a single label

987
00:41:00,800 --> 00:41:04,000
uh to to kind of uh you know put a stick

988
00:41:04,000 --> 00:41:06,960
bound on how much can be carried in

989
00:41:06,960 --> 00:41:09,119
stack and probably more

990
00:41:09,119 --> 00:41:10,480
carried

991
00:41:10,480 --> 00:41:13,599
at the bottom of the stack

992
00:41:15,920 --> 00:41:18,160
in the open design team

993
00:41:18,160 --> 00:41:21,359
we've tried to make the

994
00:41:21,359 --> 00:41:23,520
you see the the question is how much is

995
00:41:23,520 --> 00:41:26,160
too much in the label stack so the

996
00:41:26,160 --> 00:41:28,319
requirements draft as it stands is very

997
00:41:28,319 --> 00:41:29,839
much around saying well it mustn't be

998
00:41:29,839 --> 00:41:31,520
too big and it must be efficient to

999
00:41:31,520 --> 00:41:33,359
process

1000
00:41:33,359 --> 00:41:35,119
we don't have a requirement says

1001
00:41:35,119 --> 00:41:36,400
specifically

1002
00:41:36,400 --> 00:41:38,000
how big that is

1003
00:41:38,000 --> 00:41:40,400
like i i i understand your point and

1004
00:41:40,400 --> 00:41:42,720
i've you know we have discussed

1005
00:41:42,720 --> 00:41:45,440
to discuss this um to you know an

1006
00:41:45,440 --> 00:41:48,839
extensive degree

1007
00:41:54,240 --> 00:41:56,880
hi um i'm going to see oh

1008
00:41:56,880 --> 00:41:59,200
fix the echo great

1009
00:41:59,200 --> 00:42:00,800
so um

1010
00:42:00,800 --> 00:42:02,400
in the

1011
00:42:02,400 --> 00:42:04,160
fai document

1012
00:42:04,160 --> 00:42:06,160
we do have a couple of comments along

1013
00:42:06,160 --> 00:42:08,800
these lines so one is

1014
00:42:08,800 --> 00:42:10,800
typically we want

1015
00:42:10,800 --> 00:42:12,880
four octets

1016
00:42:12,880 --> 00:42:14,640
per flag

1017
00:42:14,640 --> 00:42:16,880
there's one flag that has two bits and

1018
00:42:16,880 --> 00:42:20,240
so that can go go up to eight octets

1019
00:42:20,240 --> 00:42:21,920
the other thing that we've said about

1020
00:42:21,920 --> 00:42:24,160
insect data is it

1021
00:42:24,160 --> 00:42:26,319
um there needs to be

1022
00:42:26,319 --> 00:42:28,560
um and i don't know how you finally

1023
00:42:28,560 --> 00:42:30,640
implement this maybe by having an expert

1024
00:42:30,640 --> 00:42:33,280
team or expert

1025
00:42:33,280 --> 00:42:35,280
commentary in you know when you do the

1026
00:42:35,280 --> 00:42:37,520
allocation in ayana

1027
00:42:37,520 --> 00:42:40,000
there has to be some sense of why this

1028
00:42:40,000 --> 00:42:40,960
is

1029
00:42:40,960 --> 00:42:43,359
so urgent that it needs to be in stack

1030
00:42:43,359 --> 00:42:46,000
versus post stack

1031
00:42:46,000 --> 00:42:48,800
so i think that's kind of so those two

1032
00:42:48,800 --> 00:42:50,160
things are

1033
00:42:50,160 --> 00:42:53,440
what has been guiding us so far

1034
00:42:53,440 --> 00:42:56,000
in terms of what we put in stack and how

1035
00:42:56,000 --> 00:42:58,640
much we put in stack

1036
00:42:58,640 --> 00:43:00,880
there is this whole other thing about if

1037
00:43:00,880 --> 00:43:04,079
you want to go post stack

1038
00:43:04,079 --> 00:43:06,400
can you actually reach it and can you do

1039
00:43:06,400 --> 00:43:08,960
something useful with it and matthew

1040
00:43:08,960 --> 00:43:10,720
mentioned a little bit but i think we

1041
00:43:10,720 --> 00:43:13,119
could say more more about that

1042
00:43:13,119 --> 00:43:15,760
so for example if you can't

1043
00:43:15,760 --> 00:43:18,079
yeah if your hardware either can't

1044
00:43:18,079 --> 00:43:20,480
process it or it's a lot of overhead to

1045
00:43:20,480 --> 00:43:23,200
process post stack data

1046
00:43:23,200 --> 00:43:24,880
i think there needs to be something said

1047
00:43:24,880 --> 00:43:28,000
about you know is that okay or are the

1048
00:43:28,000 --> 00:43:30,079
cases where you should drop the packet

1049
00:43:30,079 --> 00:43:32,480
if you can't actually get there

1050
00:43:32,480 --> 00:43:35,440
but in terms of in stack that's

1051
00:43:35,440 --> 00:43:37,440
in the

1052
00:43:37,440 --> 00:43:40,920
fai document

1053
00:43:45,119 --> 00:43:46,720
you could generalize this and

1054
00:43:46,720 --> 00:43:49,920
not had a requirement that

1055
00:43:49,920 --> 00:43:52,079
around

1056
00:43:52,079 --> 00:43:54,079
or along the lines of what you were you

1057
00:43:54,079 --> 00:43:56,000
were mentioning kriti in that sense that

1058
00:43:56,000 --> 00:43:57,520
we could say

1059
00:43:57,520 --> 00:43:59,359
um

1060
00:43:59,359 --> 00:44:00,640
we could provide basically some

1061
00:44:00,640 --> 00:44:02,960
justification has to be made

1062
00:44:02,960 --> 00:44:05,119
in us in a solution for putting in stack

1063
00:44:05,119 --> 00:44:08,800
versus post stack

1064
00:44:08,800 --> 00:44:10,720
but why do you need it in stack because

1065
00:44:10,720 --> 00:44:12,960
that has potential you know if it's

1066
00:44:12,960 --> 00:44:14,720
especially if it's large could have a

1067
00:44:14,720 --> 00:44:19,560
significant impact on the processing

1068
00:44:30,240 --> 00:44:31,200
hello

1069
00:44:31,200 --> 00:44:33,839
so same concern um

1070
00:44:33,839 --> 00:44:37,040
for a label a stack deep because

1071
00:44:37,040 --> 00:44:38,640
there are uh

1072
00:44:38,640 --> 00:44:40,319
some

1073
00:44:40,319 --> 00:44:42,079
chipset like broadcom

1074
00:44:42,079 --> 00:44:45,440
widely used by some vendors only three a

1075
00:44:45,440 --> 00:44:47,520
label stack are supported

1076
00:44:47,520 --> 00:44:50,000
and i just wonder is it possible to

1077
00:44:50,000 --> 00:44:53,760
reuse some kind of uh

1078
00:44:53,760 --> 00:44:54,560
like

1079
00:44:54,560 --> 00:44:58,240
label bits or ttl or something else for

1080
00:44:58,240 --> 00:45:02,240
miats or it should be added

1081
00:45:02,240 --> 00:45:04,720
somewhere as you sit at the bottom or

1082
00:45:04,720 --> 00:45:07,359
in a stack

1083
00:45:16,960 --> 00:45:19,280
so kariti last comment i think if

1084
00:45:19,280 --> 00:45:22,240
matthew wants to pick that up

1085
00:45:24,960 --> 00:45:26,560
matthew do you want me to answer this or

1086
00:45:26,560 --> 00:45:29,279
are you going to do it

1087
00:45:31,359 --> 00:45:33,359
i i mean there are solutions that have

1088
00:45:33,359 --> 00:45:36,480
that have been proposed that reuse bits

1089
00:45:36,480 --> 00:45:38,800
within um for example a special purpose

1090
00:45:38,800 --> 00:45:39,920
label

1091
00:45:39,920 --> 00:45:42,319
and their solutions are being proposed

1092
00:45:42,319 --> 00:45:43,520
that have

1093
00:45:43,520 --> 00:45:46,480
an extra additional flags

1094
00:45:46,480 --> 00:45:49,359
field which follows a special purpose

1095
00:45:49,359 --> 00:45:51,760
label so there's both solutions kind of

1096
00:45:51,760 --> 00:45:54,079
on the table at the moment in the

1097
00:45:54,079 --> 00:45:54,880
in

1098
00:45:54,880 --> 00:45:56,240
in the uh

1099
00:45:56,240 --> 00:45:58,000
open design team but i think that some

1100
00:45:58,000 --> 00:46:00,000
of this is is kind of been some

1101
00:46:00,000 --> 00:46:01,440
discussion around the framework as to

1102
00:46:01,440 --> 00:46:03,359
exactly how we structure this

1103
00:46:03,359 --> 00:46:04,720
in

1104
00:46:04,720 --> 00:46:07,520
in the label stack

1105
00:46:07,680 --> 00:46:10,480
agreed but i think if you pop up a level

1106
00:46:10,480 --> 00:46:13,680
we're also looking at solutions that say

1107
00:46:13,680 --> 00:46:16,160
if i'm going past a node that can't

1108
00:46:16,160 --> 00:46:17,599
process this

1109
00:46:17,599 --> 00:46:20,560
then um you know how can we avoid going

1110
00:46:20,560 --> 00:46:22,720
there as opposed to

1111
00:46:22,720 --> 00:46:25,200
seeing what we can do with

1112
00:46:25,200 --> 00:46:27,119
a broadcam chip that can only process

1113
00:46:27,119 --> 00:46:29,599
three labels so i think there's multiple

1114
00:46:29,599 --> 00:46:31,520
ways of scanning okay

1115
00:46:31,520 --> 00:46:33,760
indeed there are requirements in the in

1116
00:46:33,760 --> 00:46:36,000
the like in the requirements draft about

1117
00:46:36,000 --> 00:46:38,480
being able to whether or not you be able

1118
00:46:38,480 --> 00:46:40,880
to know that a downstream node can

1119
00:46:40,880 --> 00:46:43,119
process at that depth

1120
00:46:43,119 --> 00:46:43,839
yeah

1121
00:46:43,839 --> 00:46:46,240
and the compressor adi and could process

1122
00:46:46,240 --> 00:46:48,960
that ancillary data

1123
00:46:48,960 --> 00:46:51,599
uh jeff and sure a couple of points here

1124
00:46:51,599 --> 00:46:54,960
to try to make successful

1125
00:46:54,960 --> 00:46:57,599
number one this functionality should be

1126
00:46:57,599 --> 00:47:00,240
clearly explained to consumers this

1127
00:47:00,240 --> 00:47:01,359
technology

1128
00:47:01,359 --> 00:47:03,359
all of us who built routers we know we

1129
00:47:03,359 --> 00:47:05,839
would receive rfq from a customer saying

1130
00:47:05,839 --> 00:47:08,640
i want you to support five labels i need

1131
00:47:08,640 --> 00:47:11,119
two labels for basic functionality for

1132
00:47:11,119 --> 00:47:14,319
our scare over carrier right so same

1133
00:47:14,319 --> 00:47:17,040
type of explanation needs to be provided

1134
00:47:17,040 --> 00:47:18,319
to people who are going to use this

1135
00:47:18,319 --> 00:47:20,400
technology otherwise it's absolutely

1136
00:47:20,400 --> 00:47:23,359
unclear what you need instead out of

1137
00:47:23,359 --> 00:47:25,599
stack how do you signal it

1138
00:47:25,599 --> 00:47:27,200
number two

1139
00:47:27,200 --> 00:47:29,200
uh thanks to segment routine we've built

1140
00:47:29,200 --> 00:47:31,839
some machinery in igps and bgpls

1141
00:47:31,839 --> 00:47:33,520
provides information there are different

1142
00:47:33,520 --> 00:47:35,280
types of msd

1143
00:47:35,280 --> 00:47:37,200
to provide

1144
00:47:37,200 --> 00:47:38,720
what support in terms of label

1145
00:47:38,720 --> 00:47:40,079
imposition

1146
00:47:40,079 --> 00:47:42,240
there are other extensions to igp that

1147
00:47:42,240 --> 00:47:44,559
provides what's important things of

1148
00:47:44,559 --> 00:47:46,240
depth of lookup

1149
00:47:46,240 --> 00:47:49,520
please define this or ask

1150
00:47:49,520 --> 00:47:51,119
as an agp

1151
00:47:51,119 --> 00:47:53,440
to do this work already so it can be

1152
00:47:53,440 --> 00:47:56,240
signaled to either centralized entity or

1153
00:47:56,240 --> 00:47:57,280
hadn't

1154
00:47:57,280 --> 00:47:59,920
to be clear not to impose data that

1155
00:47:59,920 --> 00:48:01,440
cannot be read

1156
00:48:01,440 --> 00:48:03,040
or to

1157
00:48:03,040 --> 00:48:04,720
impose data that cannot be read

1158
00:48:04,720 --> 00:48:06,160
somewhere in the past and misread the

1159
00:48:06,160 --> 00:48:08,558
packet

1160
00:48:13,359 --> 00:48:16,920
queuing you up

1161
00:48:26,800 --> 00:48:30,200
you're on next

1162
00:48:41,599 --> 00:48:44,240
uh lower your

1163
00:48:44,240 --> 00:48:46,160
shoulders

1164
00:48:46,160 --> 00:48:49,720
i can't hear you

1165
00:48:49,920 --> 00:48:52,480
i pushed the wrong one i pushed the hand

1166
00:48:52,480 --> 00:48:54,960
instead of the mic

1167
00:48:54,960 --> 00:48:58,760
so he can hear me now

1168
00:49:02,079 --> 00:49:04,240
can you hear me now

1169
00:49:04,240 --> 00:49:05,839
yes we hear you

1170
00:49:05,839 --> 00:49:08,640
oh wow okay

1171
00:49:09,920 --> 00:49:11,760
and please do and youth otherwise i have

1172
00:49:11,760 --> 00:49:15,280
an echo uh so i would like to start

1173
00:49:15,280 --> 00:49:17,359
saying that i produce

1174
00:49:17,359 --> 00:49:19,920
both martial index very close to the

1175
00:49:19,920 --> 00:49:21,839
deadline that

1176
00:49:21,839 --> 00:49:25,040
andy and david set up

1177
00:49:25,040 --> 00:49:28,480
i got the first one in in reasonable

1178
00:49:28,480 --> 00:49:30,480
time at least a couple of hours before

1179
00:49:30,480 --> 00:49:31,839
the deadline

1180
00:49:31,839 --> 00:49:33,280
this one

1181
00:49:33,280 --> 00:49:35,599
was not before the deadline and i got a

1182
00:49:35,599 --> 00:49:37,920
new deadline from david but it actually

1183
00:49:37,920 --> 00:49:41,359
means that it's my report

1184
00:49:41,359 --> 00:49:42,800
it's

1185
00:49:42,800 --> 00:49:44,800
no one else actually saw the slice

1186
00:49:44,800 --> 00:49:46,640
before

1187
00:49:46,640 --> 00:49:47,839
they were

1188
00:49:47,839 --> 00:49:49,520
posted so

1189
00:49:49,520 --> 00:49:52,480
if there are objections or

1190
00:49:52,480 --> 00:49:56,880
want to make changes you can chime in

1191
00:49:57,200 --> 00:49:58,640
so

1192
00:49:58,640 --> 00:50:01,920
next slide please

1193
00:50:04,960 --> 00:50:06,000
so

1194
00:50:06,000 --> 00:50:06,250
uh

1195
00:50:06,250 --> 00:50:08,000
[Music]

1196
00:50:08,000 --> 00:50:09,920
a little bit talk about framework and

1197
00:50:09,920 --> 00:50:12,079
architecture documents

1198
00:50:12,079 --> 00:50:15,359
in my mind and i know that there are

1199
00:50:15,359 --> 00:50:18,880
different opinions a framework is

1200
00:50:18,880 --> 00:50:21,680
documented pretty much focus on how an

1201
00:50:21,680 --> 00:50:24,720
entity interworks with this environment

1202
00:50:24,720 --> 00:50:27,359
and architecture is a documented focus

1203
00:50:27,359 --> 00:50:32,480
on how the entity works internally

1204
00:50:32,720 --> 00:50:36,559
sometimes we put all this in the same

1205
00:50:36,559 --> 00:50:38,160
document and then we talked about

1206
00:50:38,160 --> 00:50:40,720
architectural frameworks

1207
00:50:40,720 --> 00:50:42,480
um

1208
00:50:42,480 --> 00:50:44,240
you can say that that is the best of two

1209
00:50:44,240 --> 00:50:47,200
words in the same document

1210
00:50:47,200 --> 00:50:50,480
and next slide please

1211
00:50:51,440 --> 00:50:52,839
so

1212
00:50:52,839 --> 00:50:53,920
we uh

1213
00:50:53,920 --> 00:50:57,359
matches two and i put this document

1214
00:50:57,359 --> 00:50:59,520
uh together

1215
00:50:59,520 --> 00:51:00,400
uh

1216
00:51:00,400 --> 00:51:01,760
and uh

1217
00:51:01,760 --> 00:51:03,720
when we posted uh

1218
00:51:03,720 --> 00:51:08,400
version one we got mostly positive

1219
00:51:08,400 --> 00:51:09,839
comments and i was a little bit

1220
00:51:09,839 --> 00:51:11,599
surprised

1221
00:51:11,599 --> 00:51:14,319
it should be noted that

1222
00:51:14,319 --> 00:51:16,800
all three of us are very busy and we had

1223
00:51:16,800 --> 00:51:18,720
very little time to actually work on the

1224
00:51:18,720 --> 00:51:20,000
framework

1225
00:51:20,000 --> 00:51:23,440
we managed to make it but

1226
00:51:23,440 --> 00:51:25,920
when we sat down after actually posting

1227
00:51:25,920 --> 00:51:27,359
it

1228
00:51:27,359 --> 00:51:29,040
we

1229
00:51:29,040 --> 00:51:30,960
knew that there were a lot of work to be

1230
00:51:30,960 --> 00:51:32,559
done

1231
00:51:32,559 --> 00:51:34,240
and what

1232
00:51:34,240 --> 00:51:36,480
i say is that in that situation we

1233
00:51:36,480 --> 00:51:39,680
actually got the christmas present

1234
00:51:39,680 --> 00:51:42,558
uh next slide

1235
00:51:42,720 --> 00:51:44,720
we had other people that actually had

1236
00:51:44,720 --> 00:51:47,599
been working along the same lines

1237
00:51:47,599 --> 00:51:50,960
especially john tony and adrian

1238
00:51:50,960 --> 00:51:53,200
had been thinking around the same issues

1239
00:51:53,200 --> 00:51:54,720
or

1240
00:51:54,720 --> 00:51:56,880
issues that has a

1241
00:51:56,880 --> 00:51:59,200
rather big overlap

1242
00:51:59,200 --> 00:52:02,000
so they sent us

1243
00:52:02,000 --> 00:52:04,720
a lot of useful texts that could be

1244
00:52:04,720 --> 00:52:09,118
incorporated in the in the document

1245
00:52:09,359 --> 00:52:11,839
on a very high level we are mostly in

1246
00:52:11,839 --> 00:52:13,280
agreement

1247
00:52:13,280 --> 00:52:15,839
there are

1248
00:52:17,280 --> 00:52:19,200
differences in

1249
00:52:19,200 --> 00:52:22,640
how we want to name things and how

1250
00:52:22,640 --> 00:52:22,880
uh

1251
00:52:22,880 --> 00:52:25,040
[Music]

1252
00:52:25,040 --> 00:52:27,200
actually what we call things

1253
00:52:27,200 --> 00:52:29,200
we haven't had an example of actually

1254
00:52:29,200 --> 00:52:32,079
what do we call the indicators

1255
00:52:32,079 --> 00:52:34,960
i think i have four different

1256
00:52:34,960 --> 00:52:36,480
proposals

1257
00:52:36,480 --> 00:52:39,280
here today and we need to kind of

1258
00:52:39,280 --> 00:52:42,160
converge on that

1259
00:52:43,040 --> 00:52:46,319
next like this

1260
00:52:46,319 --> 00:52:47,680
so

1261
00:52:47,680 --> 00:52:49,520
when

1262
00:52:49,520 --> 00:52:51,440
we post

1263
00:52:51,440 --> 00:52:53,839
the doc next version or the next next

1264
00:52:53,839 --> 00:52:56,160
version of the document i think that we

1265
00:52:56,160 --> 00:52:58,480
will have a couple of more

1266
00:52:58,480 --> 00:53:01,280
um

1267
00:53:01,280 --> 00:53:02,640
courses

1268
00:53:02,640 --> 00:53:06,000
uh tony has already started to prepare

1269
00:53:06,000 --> 00:53:07,119
ace

1270
00:53:07,119 --> 00:53:09,040
version co2

1271
00:53:09,040 --> 00:53:11,200
and circulated it to

1272
00:53:11,200 --> 00:53:13,440
to the other people in

1273
00:53:13,440 --> 00:53:15,119
on this list

1274
00:53:15,119 --> 00:53:16,880
where the john and alien want to be

1275
00:53:16,880 --> 00:53:19,280
caught i don't know today but

1276
00:53:19,280 --> 00:53:21,839
they have to tell me

1277
00:53:21,839 --> 00:53:24,640
next like this

1278
00:53:25,520 --> 00:53:28,880
uh so next steps are that

1279
00:53:28,880 --> 00:53:30,960
tony will take over holding the pen at

1280
00:53:30,960 --> 00:53:33,280
least for some time

1281
00:53:33,280 --> 00:53:35,760
we will post a new version after this

1282
00:53:35,760 --> 00:53:37,040
site here

1283
00:53:37,040 --> 00:53:39,599
and that version should be

1284
00:53:39,599 --> 00:53:41,680
a rather

1285
00:53:41,680 --> 00:53:44,240
carefully

1286
00:53:45,040 --> 00:53:47,119
reviewed

1287
00:53:47,119 --> 00:53:49,280
and

1288
00:53:49,920 --> 00:53:52,640
both by the open design team as such and

1289
00:53:52,640 --> 00:53:55,359
in the working groups

1290
00:53:55,359 --> 00:53:58,720
and we need to converge on most of the

1291
00:53:58,720 --> 00:54:00,079
terminology

1292
00:54:00,079 --> 00:54:02,160
issues or if you can it should be

1293
00:54:02,160 --> 00:54:03,839
clearly documented in the in the

1294
00:54:03,839 --> 00:54:05,839
framework

1295
00:54:05,839 --> 00:54:07,440
uh

1296
00:54:07,440 --> 00:54:12,559
often updates of the next version uh

1297
00:54:12,559 --> 00:54:14,880
that version he produced at that time

1298
00:54:14,880 --> 00:54:16,800
would probably be ready for

1299
00:54:16,800 --> 00:54:18,240
going to working

1300
00:54:18,240 --> 00:54:20,800
adoption paul

1301
00:54:20,800 --> 00:54:25,400
next slide or is that the last

1302
00:54:25,440 --> 00:54:28,480
yeah okay so that's what i have it's not

1303
00:54:28,480 --> 00:54:30,960
with much yes no but it's

1304
00:54:30,960 --> 00:54:33,680
i think we are having a good start

1305
00:54:33,680 --> 00:54:37,440
and we clearly welcome tony adrian and

1306
00:54:37,440 --> 00:54:39,760
john participate

1307
00:54:39,760 --> 00:54:43,520
as part of the the auto team

1308
00:54:46,160 --> 00:54:48,640
questions

1309
00:54:50,960 --> 00:54:51,920
nope

1310
00:54:51,920 --> 00:54:55,559
okay thank you

1311
00:55:13,599 --> 00:55:16,799
your jags your next stop

1312
00:55:16,799 --> 00:55:18,640
thank you stewart

1313
00:55:18,640 --> 00:55:20,720
hello everyone i'm going to present the

1314
00:55:20,720 --> 00:55:23,280
impeller substation header encoding that

1315
00:55:23,280 --> 00:55:25,040
are defined in our draft on behalf of

1316
00:55:25,040 --> 00:55:27,200
all our co-authors

1317
00:55:27,200 --> 00:55:30,078
and next slide please

1318
00:55:32,079 --> 00:55:33,760
so we have described the abbreviation

1319
00:55:33,760 --> 00:55:34,799
which which we have used in the

1320
00:55:34,799 --> 00:55:37,440
presentation as well as in the draft

1321
00:55:37,440 --> 00:55:41,920
uh in this slide uh next step please

1322
00:55:43,119 --> 00:55:44,079
so this is

1323
00:55:44,079 --> 00:55:45,760
i'm just going to talk

1324
00:55:45,760 --> 00:55:46,640
today

1325
00:55:46,640 --> 00:55:49,040
um perspective or draft

1326
00:55:49,040 --> 00:55:52,400
um let's say please

1327
00:55:54,240 --> 00:55:56,880
so there are many new applications are

1328
00:55:56,880 --> 00:55:58,880
coming up with the new requirements to

1329
00:55:58,880 --> 00:56:00,720
carry an additional information in the

1330
00:56:00,720 --> 00:56:03,280
mpls packet to influence the m plus

1331
00:56:03,280 --> 00:56:05,599
packet forwarding or for the oem

1332
00:56:05,599 --> 00:56:07,119
purposes

1333
00:56:07,119 --> 00:56:09,440
this requires nps packet to carry more

1334
00:56:09,440 --> 00:56:11,599
uh spl or espl

1335
00:56:11,599 --> 00:56:13,359
per application and this will increase

1336
00:56:13,359 --> 00:56:14,240
the

1337
00:56:14,240 --> 00:56:17,520
mpls stack that size drastically

1338
00:56:17,520 --> 00:56:20,319
to solve this problem we need a generic

1339
00:56:20,319 --> 00:56:22,559
framework to build the mpls extension

1340
00:56:22,559 --> 00:56:24,640
header encoding format that would carry

1341
00:56:24,640 --> 00:56:26,640
multiple forwarding instructions

1342
00:56:26,640 --> 00:56:28,960
in the mpls label stack or

1343
00:56:28,960 --> 00:56:32,400
after the bottom of mpls label stack

1344
00:56:32,400 --> 00:56:35,119
our draft uh mainly complies with the

1345
00:56:35,119 --> 00:56:36,319
mean requirements which has been

1346
00:56:36,319 --> 00:56:38,480
described before so the main objective

1347
00:56:38,480 --> 00:56:40,799
of this draft is

1348
00:56:40,799 --> 00:56:42,319
mpls packet

1349
00:56:42,319 --> 00:56:45,119
should be able to carry two type of

1350
00:56:45,119 --> 00:56:46,960
forwarding instructions

1351
00:56:46,960 --> 00:56:49,599
one is the flag based instruction that

1352
00:56:49,599 --> 00:56:51,920
does not need any anchor data another

1353
00:56:51,920 --> 00:56:53,599
one is the forwarding instruction that

1354
00:56:53,599 --> 00:56:55,359
needs science for the data

1355
00:56:55,359 --> 00:56:56,799
the second one is

1356
00:56:56,799 --> 00:56:59,920
mpls packet to carry additional data

1357
00:56:59,920 --> 00:57:02,240
after the bottom of stack

1358
00:57:02,240 --> 00:57:04,000
and third one is

1359
00:57:04,000 --> 00:57:07,119
any combination of uh in-stack and mpls

1360
00:57:07,119 --> 00:57:08,960
mpls bottom of stack

1361
00:57:08,960 --> 00:57:11,200
forwarding instructions could coexist in

1362
00:57:11,200 --> 00:57:13,119
the same impedance packet

1363
00:57:13,119 --> 00:57:15,200
the fourth one is the new solution which

1364
00:57:15,200 --> 00:57:16,640
we are going to propose

1365
00:57:16,640 --> 00:57:20,160
is a backward compatibility

1366
00:57:20,160 --> 00:57:22,880
uh next slide please

1367
00:57:22,880 --> 00:57:24,640
before diving into the solution i want

1368
00:57:24,640 --> 00:57:26,400
to let you know that we have done our

1369
00:57:26,400 --> 00:57:28,319
extensive hardware analysis to come up

1370
00:57:28,319 --> 00:57:29,280
with a

1371
00:57:29,280 --> 00:57:30,799
implementable asset friendly and

1372
00:57:30,799 --> 00:57:33,200
futuristic solution

1373
00:57:33,200 --> 00:57:34,799
the appearance extension header mainly

1374
00:57:34,799 --> 00:57:36,880
consists of two parts

1375
00:57:36,880 --> 00:57:39,520
uh one is the uh mps extension header

1376
00:57:39,520 --> 00:57:41,680
indicator so this indicates the presence

1377
00:57:41,680 --> 00:57:44,160
of mpls extension in the packet next one

1378
00:57:44,160 --> 00:57:47,119
is the mpls extension header format the

1379
00:57:47,119 --> 00:57:49,200
format in which the mpls extension could

1380
00:57:49,200 --> 00:57:49,920
be

1381
00:57:49,920 --> 00:57:52,000
carried in the mpls packet

1382
00:57:52,000 --> 00:57:55,480
next slide please

1383
00:57:56,079 --> 00:57:58,799
let us see the different options of mps

1384
00:57:58,799 --> 00:58:01,760
extension header indicator so option one

1385
00:58:01,760 --> 00:58:05,520
is to extend the existing uh eli el by

1386
00:58:05,520 --> 00:58:08,799
repurposing the els tc and ttl feed to

1387
00:58:08,799 --> 00:58:10,559
indicate the presence of

1388
00:58:10,559 --> 00:58:13,440
the empire section header option two is

1389
00:58:13,440 --> 00:58:16,000
to assign a new special purpose label to

1390
00:58:16,000 --> 00:58:18,000
indicate the presence of the empire

1391
00:58:18,000 --> 00:58:20,400
succession header and option three is to

1392
00:58:20,400 --> 00:58:22,400
use user configured

1393
00:58:22,400 --> 00:58:24,319
label to indicate the presence of the

1394
00:58:24,319 --> 00:58:26,160
empire's extension header

1395
00:58:26,160 --> 00:58:28,240
each option has its own advantages and

1396
00:58:28,240 --> 00:58:30,559
disadvantages we could choose the

1397
00:58:30,559 --> 00:58:31,920
options based

1398
00:58:31,920 --> 00:58:34,160
based on our discussion on the ietf

1399
00:58:34,160 --> 00:58:35,680
working group

1400
00:58:35,680 --> 00:58:38,720
so here in this uh

1401
00:58:38,720 --> 00:58:40,720
in this data structure so if you see

1402
00:58:40,720 --> 00:58:43,280
there are important fees there um the

1403
00:58:43,280 --> 00:58:45,359
first field is the in stack uh data

1404
00:58:45,359 --> 00:58:48,000
length field so this is actually a

1405
00:58:48,000 --> 00:58:50,960
three bit length field um

1406
00:58:50,960 --> 00:58:52,240
so uh

1407
00:58:52,240 --> 00:58:54,880
this indicates the in stack uh

1408
00:58:54,880 --> 00:58:58,240
mpls extension in the order of uh four

1409
00:58:58,240 --> 00:59:00,400
bytes some of the parser would require

1410
00:59:00,400 --> 00:59:02,319
the length of the instax

1411
00:59:02,319 --> 00:59:04,960
mpl extension for the easy parsing

1412
00:59:04,960 --> 00:59:06,960
the next one is the instax mpls

1413
00:59:06,960 --> 00:59:09,200
extension header presence indicator this

1414
00:59:09,200 --> 00:59:10,799
is the bit field that indicates the

1415
00:59:10,799 --> 00:59:14,319
presence of the stack extension header

1416
00:59:14,319 --> 00:59:16,559
and next one is the bottom of the stack

1417
00:59:16,559 --> 00:59:18,000
empire's extension header presence

1418
00:59:18,000 --> 00:59:20,319
indicating a bit field indicates the

1419
00:59:20,319 --> 00:59:21,680
presence of the

1420
00:59:21,680 --> 00:59:22,720
uh

1421
00:59:22,720 --> 00:59:25,599
boss mpls extension header

1422
00:59:25,599 --> 00:59:28,559
that the fourth one is the hop by hop

1423
00:59:28,559 --> 00:59:31,119
boss and pls extension header indicator

1424
00:59:31,119 --> 00:59:34,000
a bit field indicates the presence of uh

1425
00:59:34,000 --> 00:59:36,240
boss empire section hunter that needs to

1426
00:59:36,240 --> 00:59:38,480
be processed by how

1427
00:59:38,480 --> 00:59:40,640
uh

1428
00:59:42,319 --> 00:59:45,119
so this is the instax extension header

1429
00:59:45,119 --> 00:59:47,520
and its data encoding format

1430
00:59:47,520 --> 00:59:48,480
so here

1431
00:59:48,480 --> 00:59:50,640
we see the main part is the

1432
00:59:50,640 --> 00:59:53,200
the stack mpls extension header so this

1433
00:59:53,200 --> 00:59:54,640
contains

1434
00:59:54,640 --> 00:59:57,440
the bit flag which the ipa flag which i

1435
00:59:57,440 --> 00:59:59,200
which we have described before to

1436
00:59:59,200 --> 01:00:02,160
indicate the uh presence of uh in stack

1437
01:00:02,160 --> 01:00:04,240
empire section generator and apart from

1438
01:00:04,240 --> 01:00:06,720
that we have the instant data data

1439
01:00:06,720 --> 01:00:09,520
length this indicates the instax mpls

1440
01:00:09,520 --> 01:00:11,760
extension length in the order of four

1441
01:00:11,760 --> 01:00:15,040
bytes the next one is the uh instax mpls

1442
01:00:15,040 --> 01:00:17,920
extension format this contains

1443
01:00:17,920 --> 01:00:18,799
the

1444
01:00:18,799 --> 01:00:21,359
opcode so instead in stack forwarding

1445
01:00:21,359 --> 01:00:24,240
instruction or code this is of 8 bit

1446
01:00:24,240 --> 01:00:26,400
value that defines the forwarding

1447
01:00:26,400 --> 01:00:28,480
instruction that need to be executed

1448
01:00:28,480 --> 01:00:30,640
when it receives the packet

1449
01:00:30,640 --> 01:00:32,720
and next one is

1450
01:00:32,720 --> 01:00:36,400
in instax data so this is the ancillary

1451
01:00:36,400 --> 01:00:38,799
data which is required to execute the

1452
01:00:38,799 --> 01:00:41,359
forwarding instruction

1453
01:00:41,359 --> 01:00:44,799
so we use the uh uh two bits to uh

1454
01:00:44,799 --> 01:00:47,760
control this uh stack uh data processing

1455
01:00:47,760 --> 01:00:50,160
so one is the d bit which is shown in

1456
01:00:50,160 --> 01:00:52,400
the diagram so that is uh

1457
01:00:52,400 --> 01:00:54,640
this is the data stacking bit in the

1458
01:00:54,640 --> 01:00:56,480
case of in-stack forwarding uh

1459
01:00:56,480 --> 01:00:57,599
instruction

1460
01:00:57,599 --> 01:01:00,400
uh requires more than 20 bits of answer

1461
01:01:00,400 --> 01:01:03,280
data then this bit is used to extend

1462
01:01:03,280 --> 01:01:05,200
extend and carry more more bits of

1463
01:01:05,200 --> 01:01:06,559
fractional data

1464
01:01:06,559 --> 01:01:08,960
if this is built to set then this will

1465
01:01:08,960 --> 01:01:10,799
be the end of the anchor data for the

1466
01:01:10,799 --> 01:01:13,280
specific uh forwarding instruction

1467
01:01:13,280 --> 01:01:15,359
the next bit we can use it here is the

1468
01:01:15,359 --> 01:01:18,000
e-bit which is shown in the diagram is

1469
01:01:18,000 --> 01:01:20,480
the end-to-end bit so this indicates

1470
01:01:20,480 --> 01:01:22,000
whether this forwarding instruction has

1471
01:01:22,000 --> 01:01:25,760
to be processed or by up or end to end

1472
01:01:25,760 --> 01:01:28,319
if it is hot by hop then this will be

1473
01:01:28,319 --> 01:01:30,720
set to zero so the r is a reserved one

1474
01:01:30,720 --> 01:01:32,079
which is which we are not currently

1475
01:01:32,079 --> 01:01:33,599
using

1476
01:01:33,599 --> 01:01:36,160
so we're coming to the uh

1477
01:01:36,160 --> 01:01:38,000
in stack forwarding instruction op code

1478
01:01:38,000 --> 01:01:40,400
assignment the value one we have

1479
01:01:40,400 --> 01:01:43,520
reserved it to carry the flag based

1480
01:01:43,520 --> 01:01:45,760
forwarding instruction in some cases the

1481
01:01:45,760 --> 01:01:48,400
application does not need any forwarding

1482
01:01:48,400 --> 01:01:50,240
forward it does not need any uh

1483
01:01:50,240 --> 01:01:52,400
accelerated data so in those cases they

1484
01:01:52,400 --> 01:01:53,440
could uh

1485
01:01:53,440 --> 01:01:54,960
assign a bit

1486
01:01:54,960 --> 01:01:57,920
um by the uh iona and they could use the

1487
01:01:57,920 --> 01:01:59,520
subcode and then carry those kind of

1488
01:01:59,520 --> 01:02:00,960
informations

1489
01:02:00,960 --> 01:02:03,359
and then value two is uh optionally used

1490
01:02:03,359 --> 01:02:04,799
to identify

1491
01:02:04,799 --> 01:02:07,839
the byte offset of the boss data

1492
01:02:07,839 --> 01:02:10,400
location so this makes it more flexible

1493
01:02:10,400 --> 01:02:11,839
to encode the

1494
01:02:11,839 --> 01:02:13,440
bottom of the stack

1495
01:02:13,440 --> 01:02:15,599
ampere section data anywhere after the

1496
01:02:15,599 --> 01:02:17,520
bottom of the stack

1497
01:02:17,520 --> 01:02:20,400
and value 3 to 254

1498
01:02:20,400 --> 01:02:23,839
must be assigned by ayana

1499
01:02:24,079 --> 01:02:26,880
upon the application request so value

1500
01:02:26,880 --> 01:02:30,160
255 is used to extend the upgrade range

1501
01:02:30,160 --> 01:02:31,520
beyond the

1502
01:02:31,520 --> 01:02:34,799
beyond the upward value 255 this is for

1503
01:02:34,799 --> 01:02:36,319
extending

1504
01:02:36,319 --> 01:02:37,200
our

1505
01:02:37,200 --> 01:02:39,520
design in the future

1506
01:02:39,520 --> 01:02:42,400
our next link please

1507
01:02:43,440 --> 01:02:45,520
this is the bottom of the stack mpls

1508
01:02:45,520 --> 01:02:48,000
extension header encoding format so this

1509
01:02:48,000 --> 01:02:49,920
contains uh the

1510
01:02:49,920 --> 01:02:52,799
boss mpls extension indicator

1511
01:02:52,799 --> 01:02:56,160
so uh this contains the uh this has the

1512
01:02:56,160 --> 01:02:58,799
boss extension header presence indicator

1513
01:02:58,799 --> 01:03:01,520
field this must be set to indicate the

1514
01:03:01,520 --> 01:03:03,920
presence of the boss employer section

1515
01:03:03,920 --> 01:03:04,960
header

1516
01:03:04,960 --> 01:03:07,039
after the bottom of the stack

1517
01:03:07,039 --> 01:03:09,039
and next bit which is used for this

1518
01:03:09,039 --> 01:03:11,839
purpose is the hop by hop boss extension

1519
01:03:11,839 --> 01:03:13,839
header indicator this field is to

1520
01:03:13,839 --> 01:03:15,920
indicate the presence of a boss

1521
01:03:15,920 --> 01:03:18,079
extension header that requires hobby

1522
01:03:18,079 --> 01:03:20,720
help processing so this makes it easier

1523
01:03:20,720 --> 01:03:23,760
for the person to uh

1524
01:03:23,760 --> 01:03:25,280
to dig into

1525
01:03:25,280 --> 01:03:27,920
to move to the uh more examine the

1526
01:03:27,920 --> 01:03:29,680
data which is present after the bottom

1527
01:03:29,680 --> 01:03:32,640
of the stack on all the hops

1528
01:03:32,640 --> 01:03:33,920
next one is the

1529
01:03:33,920 --> 01:03:36,160
boss data format

1530
01:03:36,160 --> 01:03:38,240
here we are defining a generic framework

1531
01:03:38,240 --> 01:03:39,839
so that

1532
01:03:39,839 --> 01:03:42,559
carry so that we could carry multiple

1533
01:03:42,559 --> 01:03:44,559
forwarding instruction with respect to

1534
01:03:44,559 --> 01:03:45,839
the boss

1535
01:03:45,839 --> 01:03:48,000
forwarding instruction

1536
01:03:48,000 --> 01:03:50,640
so the first enable is a fixed zero zero

1537
01:03:50,640 --> 01:03:52,960
one zero enable this is used to avoid

1538
01:03:52,960 --> 01:03:56,559
aliasing with any existing ipv4 v6 etc

1539
01:03:56,559 --> 01:03:57,520
packets

1540
01:03:57,520 --> 01:03:59,760
and next level is reserved and next

1541
01:03:59,760 --> 01:04:00,640
update

1542
01:04:00,640 --> 01:04:02,720
is the boss forwarding instruction of

1543
01:04:02,720 --> 01:04:05,280
code so this value will be assigned by

1544
01:04:05,280 --> 01:04:08,319
inr based on the application request

1545
01:04:08,319 --> 01:04:10,240
the next update indicates the length of

1546
01:04:10,240 --> 01:04:10,960
the

1547
01:04:10,960 --> 01:04:13,839
boss accident data in the order of

1548
01:04:13,839 --> 01:04:15,039
4 bytes

1549
01:04:15,039 --> 01:04:18,000
this boss accelerator could have its own

1550
01:04:18,000 --> 01:04:20,240
tlv and sub tlps

1551
01:04:20,240 --> 01:04:23,039
next update is used for boss mpls

1552
01:04:23,039 --> 01:04:25,440
extension header flags currently two

1553
01:04:25,440 --> 01:04:28,319
flags has been assigned the one one the

1554
01:04:28,319 --> 01:04:30,319
one flag is the next next header

1555
01:04:30,319 --> 01:04:32,319
person's flag this indicates the

1556
01:04:32,319 --> 01:04:35,440
presence of another boss mpls forwarding

1557
01:04:35,440 --> 01:04:37,039
extension header

1558
01:04:37,039 --> 01:04:39,200
and

1559
01:04:39,200 --> 01:04:41,920
next flag is the hubba hub bit flat so

1560
01:04:41,920 --> 01:04:44,960
we can encode multiple uh boss state um

1561
01:04:44,960 --> 01:04:49,440
multiple boss extension forwarding uh so

1562
01:04:49,440 --> 01:04:52,400
we can by by this flag we can indicate

1563
01:04:52,400 --> 01:04:54,160
that this pause for the instruction

1564
01:04:54,160 --> 01:04:57,520
requires a hobbyhop processing

1565
01:04:57,520 --> 01:05:00,319
next slide please

1566
01:05:02,079 --> 01:05:04,720
so this is an example of the instax mpls

1567
01:05:04,720 --> 01:05:07,119
extension header carrying the flag based

1568
01:05:07,119 --> 01:05:10,079
instructions as we described before

1569
01:05:10,079 --> 01:05:12,079
opcode1 is resolved to carry this kind

1570
01:05:12,079 --> 01:05:14,079
of forwarding instruction which does not

1571
01:05:14,079 --> 01:05:16,880
need any angular data to process the

1572
01:05:16,880 --> 01:05:18,720
forwarding instruction

1573
01:05:18,720 --> 01:05:19,839
in the first

1574
01:05:19,839 --> 01:05:22,480
in the first word the

1575
01:05:22,480 --> 01:05:24,880
the ipi is set to one indicates the

1576
01:05:24,880 --> 01:05:27,280
presence of the stack ambiguous certain

1577
01:05:27,280 --> 01:05:29,119
presence and the

1578
01:05:29,119 --> 01:05:31,200
instruct length is set to one indicates

1579
01:05:31,200 --> 01:05:33,359
that stack extraction header length is

1580
01:05:33,359 --> 01:05:36,240
of one word

1581
01:05:36,240 --> 01:05:38,799
in the second word the instruct

1582
01:05:38,799 --> 01:05:41,119
forwarding instruction of code is set to

1583
01:05:41,119 --> 01:05:42,240
value one

1584
01:05:42,240 --> 01:05:45,359
uh it indicates a in this

1585
01:05:45,359 --> 01:05:46,079
it

1586
01:05:46,079 --> 01:05:48,000
indicates that

1587
01:05:48,000 --> 01:05:52,480
it carries the f5 flag

1588
01:05:52,480 --> 01:05:54,720
and in the case of uh ds bit it is set

1589
01:05:54,720 --> 01:05:56,720
to one that is that means that this is

1590
01:05:56,720 --> 01:06:00,079
the end of the f5 flags it is carrying

1591
01:06:00,079 --> 01:06:01,760
um this

1592
01:06:01,760 --> 01:06:05,039
the e to e bit is set to one so this

1593
01:06:05,039 --> 01:06:06,960
means that it requires and how buy a

1594
01:06:06,960 --> 01:06:09,039
processor

1595
01:06:09,039 --> 01:06:12,559
um can you please move the next line

1596
01:06:13,520 --> 01:06:15,920
so this is an example in which in stack

1597
01:06:15,920 --> 01:06:18,400
mpls extension carries more than 20 bits

1598
01:06:18,400 --> 01:06:19,920
of data

1599
01:06:19,920 --> 01:06:22,880
in in some cases the application needs

1600
01:06:22,880 --> 01:06:25,039
to carry more than 20 bits so this is

1601
01:06:25,039 --> 01:06:25,920
how

1602
01:06:25,920 --> 01:06:28,319
the the data format looks like

1603
01:06:28,319 --> 01:06:30,319
so the important thing here is that the

1604
01:06:30,319 --> 01:06:33,039
third word if you see here so the first

1605
01:06:33,039 --> 01:06:36,160
bit of the msb should be set to one to

1606
01:06:36,160 --> 01:06:38,480
prevent the angular data value from

1607
01:06:38,480 --> 01:06:40,799
aliasing with the

1608
01:06:40,799 --> 01:06:46,038
existing spls on the legacy routers

1609
01:06:46,880 --> 01:06:50,000
uh next place please

1610
01:06:52,720 --> 01:06:55,599
yeah so this is an example of uh mpls

1611
01:06:55,599 --> 01:06:57,760
packet carrying the

1612
01:06:57,760 --> 01:07:00,079
boss implies extension header in this

1613
01:07:00,079 --> 01:07:03,280
example mpls packet is carrying uh two

1614
01:07:03,280 --> 01:07:05,119
boss forwarding instructions and its

1615
01:07:05,119 --> 01:07:08,160
corresponding angular data and the uh

1616
01:07:08,160 --> 01:07:10,640
the values are set as para we described

1617
01:07:10,640 --> 01:07:12,240
before

1618
01:07:12,240 --> 01:07:15,839
uh next slide please

1619
01:07:16,640 --> 01:07:19,599
this shows a sample com packet

1620
01:07:19,599 --> 01:07:21,599
comparison between the option one uh

1621
01:07:21,599 --> 01:07:24,559
that is extending the eli yellow

1622
01:07:24,559 --> 01:07:28,079
as a mpls extension indicator voices

1623
01:07:28,079 --> 01:07:31,920
option two that is using a new spl as a

1624
01:07:31,920 --> 01:07:35,599
mpls extension indicator

1625
01:07:35,599 --> 01:07:38,000
so in this case option one will consume

1626
01:07:38,000 --> 01:07:39,839
uh maximum uh

1627
01:07:39,839 --> 01:07:42,319
uh mp stack sorry the ampere stack depth

1628
01:07:42,319 --> 01:07:46,079
of five while option two will consume uh

1629
01:07:46,079 --> 01:07:48,559
mpls stack depth of uh seven this is

1630
01:07:48,559 --> 01:07:51,039
just to show the difference

1631
01:07:51,039 --> 01:07:53,680
uh next one

1632
01:07:54,240 --> 01:07:55,680
so as a next step

1633
01:07:55,680 --> 01:07:58,000
we would uh welcome review comments and

1634
01:07:58,000 --> 01:08:00,480
feedbacks especially feedback on the

1635
01:08:00,480 --> 01:08:03,440
mpls extension indicators options

1636
01:08:03,440 --> 01:08:06,160
um also we would request a mpls working

1637
01:08:06,160 --> 01:08:07,599
group adoption

1638
01:08:07,599 --> 01:08:10,799
um before i uh complete uh also uh i

1639
01:08:10,799 --> 01:08:13,039
want to mention that we have done uh the

1640
01:08:13,039 --> 01:08:15,119
hardware analysis study on the npr's

1641
01:08:15,119 --> 01:08:16,960
extension headers and those informations

1642
01:08:16,960 --> 01:08:18,719
are provided in the appendix for this of

1643
01:08:18,719 --> 01:08:20,799
this presentation uh people can take a

1644
01:08:20,799 --> 01:08:21,600
look

1645
01:08:21,600 --> 01:08:24,640
whenever they want

1646
01:08:29,600 --> 01:08:31,279
there are some other slides beyond this

1647
01:08:31,279 --> 01:08:35,400
that i'm seeing on my screen

1648
01:08:42,319 --> 01:08:43,839
okay all right so if you don't want to

1649
01:08:43,839 --> 01:08:44,960
talk to that then we'll go to the

1650
01:08:44,960 --> 01:08:46,238
questions is that how you want to

1651
01:08:46,238 --> 01:08:49,520
proceed okay so um

1652
01:08:49,520 --> 01:08:50,839
carrick is

1653
01:08:50,839 --> 01:08:52,479
first

1654
01:08:52,479 --> 01:08:55,279
dark side with juniper my question is on

1655
01:08:55,279 --> 01:08:58,319
flights please

1656
01:08:58,479 --> 01:09:00,479
if you don't mind going back to slide

1657
01:09:00,479 --> 01:09:02,799
seven

1658
01:09:04,799 --> 01:09:06,880
one of the required thank you one of the

1659
01:09:06,880 --> 01:09:08,560
requirements

1660
01:09:08,560 --> 01:09:09,839
of

1661
01:09:09,839 --> 01:09:11,920
the miad

1662
01:09:11,920 --> 01:09:14,319
is to be able to carry multiple function

1663
01:09:14,319 --> 01:09:16,319
indicators or multiple indicators in the

1664
01:09:16,319 --> 01:09:18,238
same

1665
01:09:18,238 --> 01:09:19,279
packet

1666
01:09:19,279 --> 01:09:20,560
um

1667
01:09:20,560 --> 01:09:23,839
if in such a case we have multiple

1668
01:09:23,839 --> 01:09:25,839
um

1669
01:09:25,839 --> 01:09:28,479
instructions or indicators um some of

1670
01:09:28,479 --> 01:09:30,960
them are end to end or so and some of

1671
01:09:30,960 --> 01:09:33,920
them are hop by half

1672
01:09:33,920 --> 01:09:36,799
what would the end to end bit

1673
01:09:36,799 --> 01:09:38,158
indicate

1674
01:09:38,158 --> 01:09:41,920
is it per i mean i see you have a bit

1675
01:09:41,920 --> 01:09:44,158
but is it a bit per

1676
01:09:44,158 --> 01:09:46,960
per header or is it a bit for

1677
01:09:46,960 --> 01:09:49,120
for each instruction

1678
01:09:49,120 --> 01:09:51,520
okay so uh it is

1679
01:09:51,520 --> 01:09:54,640
for each instruction the bit will be set

1680
01:09:54,640 --> 01:09:56,719
uh for the op let's take an example i

1681
01:09:56,719 --> 01:09:59,199
have a two up codes up code eight and

1682
01:09:59,199 --> 01:10:01,840
upload nine right so 8 is assigned to

1683
01:10:01,840 --> 01:10:05,360
application one uh the if that opcode 8

1684
01:10:05,360 --> 01:10:07,520
needs to be processed

1685
01:10:07,520 --> 01:10:09,520
by hub then the e bit will be set to

1686
01:10:09,520 --> 01:10:10,320
zero

1687
01:10:10,320 --> 01:10:12,960
and if the up code 9 needs to be

1688
01:10:12,960 --> 01:10:14,400
processed

1689
01:10:14,400 --> 01:10:16,320
end to end then actually ebit will be

1690
01:10:16,320 --> 01:10:18,880
set to one

1691
01:10:19,679 --> 01:10:21,520
so the the full header will be repeated

1692
01:10:21,520 --> 01:10:23,920
for every instruction right

1693
01:10:23,920 --> 01:10:25,520
uh not the full header full header

1694
01:10:25,520 --> 01:10:28,400
instance like the

1695
01:10:28,400 --> 01:10:30,480
the op code and instead data will be

1696
01:10:30,480 --> 01:10:31,920
repeated for

1697
01:10:31,920 --> 01:10:34,000
multiple

1698
01:10:34,000 --> 01:10:36,960
okay the ipr equal to one and the il

1699
01:10:36,960 --> 01:10:39,040
will not be repeated only the opcode and

1700
01:10:39,040 --> 01:10:41,360
the instruct data the the in this case

1701
01:10:41,360 --> 01:10:43,840
right you see that as the second word

1702
01:10:43,840 --> 01:10:46,640
will be repeated

1703
01:10:56,159 --> 01:10:59,519
too much lagging system greg

1704
01:11:02,080 --> 01:11:05,840
can you go to the next slide

1705
01:11:07,040 --> 01:11:10,080
yes okay uh so

1706
01:11:10,080 --> 01:11:11,280
um

1707
01:11:11,280 --> 01:11:14,159
in case uh when um

1708
01:11:14,159 --> 01:11:17,280
your entropy label indicator is the top

1709
01:11:17,280 --> 01:11:19,040
of the stack

1710
01:11:19,040 --> 01:11:22,239
and the node does not support this uh

1711
01:11:22,239 --> 01:11:24,880
new interpretation of

1712
01:11:24,880 --> 01:11:28,640
entropy label indicator

1713
01:11:29,520 --> 01:11:32,480
so their node will pop up

1714
01:11:32,480 --> 01:11:36,159
the entropy label indicator and the next

1715
01:11:36,159 --> 01:11:38,960
label element

1716
01:11:38,960 --> 01:11:42,080
exposing their

1717
01:11:42,800 --> 01:11:44,239
data

1718
01:11:44,239 --> 01:11:45,120
so

1719
01:11:45,120 --> 01:11:49,440
i guess that will really uh

1720
01:11:49,440 --> 01:11:52,560
cause the packet to be dropped

1721
01:11:52,560 --> 01:11:55,600
uh yes uh so uh greg actually in our

1722
01:11:55,600 --> 01:11:58,400
draft section number 10 we said that uh

1723
01:11:58,400 --> 01:12:00,400
we need uh signaling

1724
01:12:00,400 --> 01:12:01,199
uh

1725
01:12:01,199 --> 01:12:02,800
for the compatibility

1726
01:12:02,800 --> 01:12:04,960
uh for the earlier routers to support

1727
01:12:04,960 --> 01:12:05,840
this

1728
01:12:05,840 --> 01:12:08,480
impedance extension header so that will

1729
01:12:08,480 --> 01:12:10,320
take care of you know like uh make sure

1730
01:12:10,320 --> 01:12:12,960
that uh the router which is going to pop

1731
01:12:12,960 --> 01:12:15,440
uh is aware of this uh

1732
01:12:15,440 --> 01:12:16,640
okay so

1733
01:12:16,640 --> 01:12:19,520
so basically you require that

1734
01:12:19,520 --> 01:12:23,920
all nodes in your domain support a new

1735
01:12:23,920 --> 01:12:26,080
entropy label

1736
01:12:26,080 --> 01:12:30,000
uh indicator interpretation

1737
01:12:33,679 --> 01:12:37,520
so you're saying that uh

1738
01:12:37,520 --> 01:12:40,239
it simplifies their deployment because

1739
01:12:40,239 --> 01:12:43,760
you reuse the entropy label indicator

1740
01:12:43,760 --> 01:12:45,199
for miat

1741
01:12:45,199 --> 01:12:47,760
but then you say that all nodes needs to

1742
01:12:47,760 --> 01:12:50,640
be updated

1743
01:12:50,640 --> 01:12:53,040
what's what's the difference comparing

1744
01:12:53,040 --> 01:12:56,400
this approach with assigning a new uh

1745
01:12:56,400 --> 01:13:00,560
special purpose label to indicate miad

1746
01:13:00,560 --> 01:13:02,400
yeah first of all you know like we give

1747
01:13:02,400 --> 01:13:06,960
it uh three options right and then um

1748
01:13:06,960 --> 01:13:07,920
we are

1749
01:13:07,920 --> 01:13:09,600
we will see the advantages of all the

1750
01:13:09,600 --> 01:13:11,199
three options one of the options uh

1751
01:13:11,199 --> 01:13:13,520
whatever you are seeing here the entropy

1752
01:13:13,520 --> 01:13:15,600
uh using entropy label other option is

1753
01:13:15,600 --> 01:13:17,520
the using the new spl label

1754
01:13:17,520 --> 01:13:19,440
so the advantage of

1755
01:13:19,440 --> 01:13:21,920
entropy label is that

1756
01:13:21,920 --> 01:13:24,560
it is going to carry the

1757
01:13:24,560 --> 01:13:27,440
entropy uh which is needed for most of

1758
01:13:27,440 --> 01:13:30,080
the cases and also like

1759
01:13:30,080 --> 01:13:32,159
the label stack the comparison which i

1760
01:13:32,159 --> 01:13:35,040
showed you is going to be uh less

1761
01:13:35,040 --> 01:13:35,840
and

1762
01:13:35,840 --> 01:13:37,920
so these are the things i know like uh

1763
01:13:37,920 --> 01:13:40,159
we think it will be helpful if you if

1764
01:13:40,159 --> 01:13:42,400
you carry uh entropy if you reuse the

1765
01:13:42,400 --> 01:13:44,320
entropy label so this is one of the

1766
01:13:44,320 --> 01:13:45,760
option that is it

1767
01:13:45,760 --> 01:13:48,320
so and other options is the

1768
01:13:48,320 --> 01:13:49,360
spl

1769
01:13:49,360 --> 01:13:51,360
and another third option is the user

1770
01:13:51,360 --> 01:13:53,520
defined label so these are the these are

1771
01:13:53,520 --> 01:13:54,719
these are the

1772
01:13:54,719 --> 01:13:57,120
options we are keeping on table and then

1773
01:13:57,120 --> 01:13:59,920
our ietf server group we can just

1774
01:13:59,920 --> 01:14:02,400
discuss and choose which one to go with

1775
01:14:02,400 --> 01:14:05,040
well it's confusing a little bit because

1776
01:14:05,040 --> 01:14:08,719
because you are listing many options

1777
01:14:08,719 --> 01:14:12,880
and asking uh the community to choose

1778
01:14:12,880 --> 01:14:14,719
rather than proposing

1779
01:14:14,719 --> 01:14:17,199
one specific solution

1780
01:14:17,199 --> 01:14:19,920
uh can you decide which option you're

1781
01:14:19,920 --> 01:14:21,199
proposing

1782
01:14:21,199 --> 01:14:22,719
so i'm saying each and each option has

1783
01:14:22,719 --> 01:14:24,960
its own advantage and disadvantage right

1784
01:14:24,960 --> 01:14:27,600
so uh i want the community to know about

1785
01:14:27,600 --> 01:14:29,679
these options and then they can

1786
01:14:29,679 --> 01:14:31,840
we can come up with which ones we need

1787
01:14:31,840 --> 01:14:33,840
to choose

1788
01:14:33,840 --> 01:14:35,199
pick up

1789
01:14:35,199 --> 01:14:36,719
needs to decide

1790
01:14:36,719 --> 01:14:37,440
but

1791
01:14:37,440 --> 01:14:39,280
okay thank you thank you can we pick up

1792
01:14:39,280 --> 01:14:40,960
the pace a bit please uh it's how you

1793
01:14:40,960 --> 01:14:43,840
next

1794
01:14:44,239 --> 01:14:47,440
uh yeah uh why appreciate also uh put

1795
01:14:47,440 --> 01:14:49,920
this together but i'd like to raise

1796
01:14:49,920 --> 01:14:53,360
awareness uh to oscars that

1797
01:14:53,360 --> 01:14:55,120
we have a published

1798
01:14:55,120 --> 01:14:57,600
document talking about the different

1799
01:14:57,600 --> 01:14:59,600
options for the extension header

1800
01:14:59,600 --> 01:15:00,960
indicator

1801
01:15:00,960 --> 01:15:04,560
which includes the option of reusing the

1802
01:15:04,560 --> 01:15:06,880
um

1803
01:15:07,360 --> 01:15:08,960
entropy label

1804
01:15:08,960 --> 01:15:10,640
to to do that

1805
01:15:10,640 --> 01:15:13,760
and also we have several

1806
01:15:13,760 --> 01:15:14,560
other

1807
01:15:14,560 --> 01:15:16,880
options also cover this using a special

1808
01:15:16,880 --> 01:15:19,199
label and the particular your a proposal

1809
01:15:19,199 --> 01:15:22,640
we prefer to use a single special label

1810
01:15:22,640 --> 01:15:25,199
and this also we have another uh

1811
01:15:25,199 --> 01:15:28,239
document to talking about the uh format

1812
01:15:28,239 --> 01:15:32,400
of the post uh stack data how to encode

1813
01:15:32,400 --> 01:15:33,440
the

1814
01:15:33,440 --> 01:15:37,600
extension headers i think this uh um

1815
01:15:37,600 --> 01:15:40,320
you know this also uh published uh three

1816
01:15:40,320 --> 01:15:42,239
years ago and we have continued to

1817
01:15:42,239 --> 01:15:45,280
update it until now it's a version six

1818
01:15:45,280 --> 01:15:48,480
so i i think uh uh the author uh here is

1819
01:15:48,480 --> 01:15:51,600
a proposed some kind of new encoding uh

1820
01:15:51,600 --> 01:15:54,320
method and should uh

1821
01:15:54,320 --> 01:15:56,320
to at least to

1822
01:15:56,320 --> 01:15:58,960
mention that document and maybe make

1823
01:15:58,960 --> 01:16:00,960
some comparisons why

1824
01:16:00,960 --> 01:16:01,920
i

1825
01:16:01,920 --> 01:16:04,400
also want to propose a different format

1826
01:16:04,400 --> 01:16:07,120
and was a

1827
01:16:07,120 --> 01:16:09,840
difference and was a benefit the pros

1828
01:16:09,840 --> 01:16:13,760
and cons like something like that

1829
01:16:16,480 --> 01:16:19,480
she

1830
01:16:23,440 --> 01:16:25,840
uh from my understanding of this

1831
01:16:25,840 --> 01:16:28,480
presentation if we want to carry both

1832
01:16:28,480 --> 01:16:31,040
instant data and the postdoc data do we

1833
01:16:31,040 --> 01:16:32,159
need to

1834
01:16:32,159 --> 01:16:34,800
have two uh special purpose label or the

1835
01:16:34,800 --> 01:16:38,239
two entropy labeled indicators in

1836
01:16:38,239 --> 01:16:40,880
labor's map no no it's only one that's

1837
01:16:40,880 --> 01:16:42,880
the reason no like uh we have the bits

1838
01:16:42,880 --> 01:16:44,800
right so the bpi bits

1839
01:16:44,800 --> 01:16:47,760
hpi and ipi so these are the bits uh

1840
01:16:47,760 --> 01:16:49,440
we'll be using it so only one one

1841
01:16:49,440 --> 01:16:52,320
indicator is an app

1842
01:16:52,400 --> 01:16:55,280
but in that case the instax data will be

1843
01:16:55,280 --> 01:16:56,960
put

1844
01:16:56,960 --> 01:16:59,760
after the

1845
01:16:59,920 --> 01:17:02,000
entropy label and it is

1846
01:17:02,000 --> 01:17:03,760
at the bottom of the stack

1847
01:17:03,760 --> 01:17:06,239
that's right

1848
01:17:07,600 --> 01:17:09,360
yeah so we have given an example in our

1849
01:17:09,360 --> 01:17:11,599
draft

1850
01:17:12,000 --> 01:17:17,040
both in stack and all the stack data

1851
01:17:17,040 --> 01:17:19,199
okay so that's in case

1852
01:17:19,199 --> 01:17:22,800
like the msd issue you need to have

1853
01:17:22,800 --> 01:17:24,080
another

1854
01:17:24,080 --> 01:17:26,159
stack

1855
01:17:26,159 --> 01:17:28,719
data block which is

1856
01:17:28,719 --> 01:17:32,159
not at the bottom stack right

1857
01:17:33,840 --> 01:17:36,400
are you understanding your question

1858
01:17:36,400 --> 01:17:37,440
yeah

1859
01:17:37,440 --> 01:17:39,440
to solve the limitation of the label

1860
01:17:39,440 --> 01:17:41,440
stack

1861
01:17:41,440 --> 01:17:43,600
steps on some transient nodes you need

1862
01:17:43,600 --> 01:17:46,320
to carry another

1863
01:17:46,320 --> 01:17:47,840
special

1864
01:17:47,840 --> 01:17:49,440
special purpose label or the entropy

1865
01:17:49,440 --> 01:17:51,760
label indicator which can be read

1866
01:17:51,760 --> 01:17:53,520
by the transient nodes

1867
01:17:53,520 --> 01:17:55,360
in that case we will need two special

1868
01:17:55,360 --> 01:17:57,600
purpose labels in the label stack entry

1869
01:17:57,600 --> 01:18:00,080
one for the instant data another one for

1870
01:18:00,080 --> 01:18:01,040
the

1871
01:18:01,040 --> 01:18:03,360
post tech data

1872
01:18:03,360 --> 01:18:05,520
uh no need actually like i said right so

1873
01:18:05,520 --> 01:18:07,280
the bits are going to explain now like

1874
01:18:07,280 --> 01:18:09,040
uh whether it has

1875
01:18:09,040 --> 01:18:10,800
it's just indicated so the bit indicator

1876
01:18:10,800 --> 01:18:12,320
is saying that i have some data after

1877
01:18:12,320 --> 01:18:15,360
the one staggers it

1878
01:18:15,360 --> 01:18:17,600
but the bottom of the stack label does

1879
01:18:17,600 --> 01:18:20,080
not have to be the

1880
01:18:20,080 --> 01:18:22,880
uh it can be any label before the bottom

1881
01:18:22,880 --> 01:18:24,960
stack

1882
01:18:24,960 --> 01:18:26,719
block

1883
01:18:26,719 --> 01:18:30,000
yeah it could be any level there

1884
01:18:31,199 --> 01:18:32,080
okay

1885
01:18:32,080 --> 01:18:32,960
maybe

1886
01:18:32,960 --> 01:18:34,800
i'm not sure this can

1887
01:18:34,800 --> 01:18:35,840
maybe

1888
01:18:35,840 --> 01:18:37,679
misread by some

1889
01:18:37,679 --> 01:18:39,840
luxe note

1890
01:18:39,840 --> 01:18:42,159
the first of only using the first four

1891
01:18:42,159 --> 01:18:44,560
nibble first enable

1892
01:18:44,560 --> 01:18:46,080
to pass the

1893
01:18:46,080 --> 01:18:48,320
existence of the

1894
01:18:48,320 --> 01:18:50,640
bottom stack

1895
01:18:50,640 --> 01:18:52,480
uh okay so uh

1896
01:18:52,480 --> 01:18:54,159
yeah i as i told you right so we are

1897
01:18:54,159 --> 01:18:56,000
actually we have an option

1898
01:18:56,000 --> 01:18:59,040
where uh we can say that uh top code uh

1899
01:18:59,040 --> 01:19:01,280
two we said threads optionally

1900
01:19:01,280 --> 01:19:04,400
uh we can have uh

1901
01:19:04,480 --> 01:19:07,199
the offset of the bottom of the stack

1902
01:19:07,199 --> 01:19:09,120
bottom of the stack and plus a header

1903
01:19:09,120 --> 01:19:10,800
location too

1904
01:19:10,800 --> 01:19:12,159
so if you're going to encode more

1905
01:19:12,159 --> 01:19:13,760
information can we either

1906
01:19:13,760 --> 01:19:15,280
can we either

1907
01:19:15,280 --> 01:19:17,760
can we either discuss in the open

1908
01:19:17,760 --> 01:19:19,360
discussion at the end or take it to the

1909
01:19:19,360 --> 01:19:21,920
listener okay okay thank you yeah sure

1910
01:19:21,920 --> 01:19:23,760
so it's uh now

1911
01:19:23,760 --> 01:19:26,719
bruno i believe

1912
01:19:27,440 --> 01:19:29,600
yes thank you

1913
01:19:29,600 --> 01:19:31,920
from orange speaking

1914
01:19:31,920 --> 01:19:34,560
hopefully you can hear me

1915
01:19:34,560 --> 01:19:37,360
so the proposal is a

1916
01:19:37,360 --> 01:19:40,080
proposal to carry a indicator in the

1917
01:19:40,080 --> 01:19:42,800
existing entropy level

1918
01:19:42,800 --> 01:19:45,760
next slide please

1919
01:19:46,080 --> 01:19:48,960
so a recap on the existing entropy label

1920
01:19:48,960 --> 01:19:50,920
it is defined in rc

1921
01:19:50,920 --> 01:19:54,960
6790 it is used for load balancing

1922
01:19:54,960 --> 01:19:57,600
and into this stack of two levels

1923
01:19:57,600 --> 01:20:00,800
first is the entropy level indicator

1924
01:20:00,800 --> 01:20:02,960
aka eli

1925
01:20:02,960 --> 01:20:06,159
it is a special purpose level s7

1926
01:20:06,159 --> 01:20:08,400
and it is followed by the entropy label

1927
01:20:08,400 --> 01:20:12,400
which is a per flow entropy value

1928
01:20:12,560 --> 01:20:14,960
what is of interest for for us is that

1929
01:20:14,960 --> 01:20:18,560
the ttl field of the entropy label

1930
01:20:18,560 --> 01:20:21,280
is essentially reserved for future use

1931
01:20:21,280 --> 01:20:24,080
it is defined as being must be zero when

1932
01:20:24,080 --> 01:20:25,120
sent

1933
01:20:25,120 --> 01:20:28,719
on ignored when received

1934
01:20:28,719 --> 01:20:32,080
the next slide please

1935
01:20:32,080 --> 01:20:34,880
so the proposal is to extend the detail

1936
01:20:34,880 --> 01:20:37,280
field of the entropy label

1937
01:20:37,280 --> 01:20:40,000
and to redefine it as the entropy level

1938
01:20:40,000 --> 01:20:41,920
control field

1939
01:20:41,920 --> 01:20:44,480
that would give us a three eight sorry

1940
01:20:44,480 --> 01:20:48,560
eight flags or eight indicators

1941
01:20:48,560 --> 01:20:50,880
and we propose that the semantic of

1942
01:20:50,880 --> 01:20:53,840
those of those of bits uh be user

1943
01:20:53,840 --> 01:20:55,520
defined

1944
01:20:55,520 --> 01:20:58,880
so not uh iron iron standardized

1945
01:20:58,880 --> 01:21:01,440
in order to maximize uh the reusability

1946
01:21:01,440 --> 01:21:03,760
of these of this resource of the number

1947
01:21:03,760 --> 01:21:06,719
of slack

1948
01:21:07,920 --> 01:21:10,320
so essentially uh that's all it's very

1949
01:21:10,320 --> 01:21:12,400
straightforward

1950
01:21:12,400 --> 01:21:15,600
next one

1951
01:21:15,600 --> 01:21:19,199
in terms of benefits compared to using a

1952
01:21:19,199 --> 01:21:20,960
new

1953
01:21:20,960 --> 01:21:23,040
special purpose label

1954
01:21:23,040 --> 01:21:25,120
first one in my opinion is that we have

1955
01:21:25,120 --> 01:21:26,960
a faster deployment with incremental

1956
01:21:26,960 --> 01:21:28,400
benefit

1957
01:21:28,400 --> 01:21:30,960
this is because most if not all egress

1958
01:21:30,960 --> 01:21:34,159
existing grass ldr already support

1959
01:21:34,159 --> 01:21:37,920
yellow so they won't drop the packet

1960
01:21:37,920 --> 01:21:39,760
they already are signal and they support

1961
01:21:39,760 --> 01:21:41,520
it

1962
01:21:41,520 --> 01:21:43,199
and therefore any new

1963
01:21:43,199 --> 01:21:46,159
ingress ldr may use the feature so may

1964
01:21:46,159 --> 01:21:46,960
use

1965
01:21:46,960 --> 01:21:49,440
indicators

1966
01:21:49,440 --> 01:21:51,520
so if we assume that

1967
01:21:51,520 --> 01:21:55,520
25 of ldr support the feature

1968
01:21:55,520 --> 01:21:57,440
we would be able to use it for 25

1969
01:21:57,440 --> 01:21:59,600
percent of the flows

1970
01:21:59,600 --> 01:22:02,080
mostly the ldr

1971
01:22:02,080 --> 01:22:04,719
compared to if we use a new if we define

1972
01:22:04,719 --> 01:22:06,560
a new spl

1973
01:22:06,560 --> 01:22:08,800
we would only be able to use it for 60

1974
01:22:08,800 --> 01:22:11,840
for six percent of the flows

1975
01:22:11,840 --> 01:22:13,679
because we will need both the ingress

1976
01:22:13,679 --> 01:22:15,679
and the ingress to support the newer the

1977
01:22:15,679 --> 01:22:18,159
uspl

1978
01:22:18,159 --> 01:22:19,840
so this is the main benefit for for

1979
01:22:19,840 --> 01:22:21,440
deployment

1980
01:22:21,440 --> 01:22:23,600
second benefit is to minimize the label

1981
01:22:23,600 --> 01:22:24,639
stack

1982
01:22:24,639 --> 01:22:28,000
when load balancing is required

1983
01:22:28,480 --> 01:22:29,520
because you

1984
01:22:29,520 --> 01:22:31,520
you can add indicators with no

1985
01:22:31,520 --> 01:22:33,360
additional levels

1986
01:22:33,360 --> 01:22:35,920
in the stack

1987
01:22:36,320 --> 01:22:38,080
that's true that you could define a new

1988
01:22:38,080 --> 01:22:41,520
spl and define for that uspl the ability

1989
01:22:41,520 --> 01:22:42,480
to

1990
01:22:42,480 --> 01:22:44,480
advertise a

1991
01:22:44,480 --> 01:22:46,000
an entropy level

1992
01:22:46,000 --> 01:22:48,719
or whatever the minor

1993
01:22:48,719 --> 01:22:51,120
but for a large number of years we would

1994
01:22:51,120 --> 01:22:53,600
need to send both

1995
01:22:53,600 --> 01:22:57,600
the eli on the new spl

1996
01:22:57,600 --> 01:22:59,520
in order to be compatible with both new

1997
01:22:59,520 --> 01:23:02,960
on old lsr

1998
01:23:02,960 --> 01:23:04,880
and finally we have a special purpose

1999
01:23:04,880 --> 01:23:07,760
level on the associated signaling in

2000
01:23:07,760 --> 01:23:10,000
protocols

2001
01:23:10,000 --> 01:23:13,120
next slide please

2002
01:23:13,679 --> 01:23:16,719
so the draft give examples of

2003
01:23:16,719 --> 01:23:19,360
use case to use indicators

2004
01:23:19,360 --> 01:23:21,840
so one is a end-to-end absolute loss

2005
01:23:21,840 --> 01:23:25,120
measurement using alternate marking

2006
01:23:25,120 --> 01:23:27,440
so you can signal that you

2007
01:23:27,440 --> 01:23:30,080
want to record encode the slice slice id

2008
01:23:30,080 --> 01:23:32,960
in the entropy level

2009
01:23:32,960 --> 01:23:34,480
obviously it's not the limiting number

2010
01:23:34,480 --> 01:23:36,960
of use cases on tariq as i prefer

2011
01:23:36,960 --> 01:23:38,320
another one

2012
01:23:38,320 --> 01:23:41,040
some other ones

2013
01:23:41,040 --> 01:23:42,159
next one

2014
01:23:42,159 --> 01:23:44,400
next high speed

2015
01:23:44,400 --> 01:23:46,639
so next step it's an even individual

2016
01:23:46,639 --> 01:23:49,140
draft since december 2020

2017
01:23:49,140 --> 01:23:50,239
[Music]

2018
01:23:50,239 --> 01:23:52,239
we have presented it three times there

2019
01:23:52,239 --> 01:23:54,960
are some discussions in the mps working

2020
01:23:54,960 --> 01:23:56,480
group and also in

2021
01:23:56,480 --> 01:23:59,120
the open design team

2022
01:23:59,120 --> 01:24:00,400
we would welcome more review and

2023
01:24:00,400 --> 01:24:03,199
comments and we believe that draft is a

2024
01:24:03,199 --> 01:24:05,199
mature enough to request a call for

2025
01:24:05,199 --> 01:24:07,199
adoption in cmps working group because

2026
01:24:07,199 --> 01:24:08,000
it's

2027
01:24:08,000 --> 01:24:12,159
an extension to an mps document

2028
01:24:12,239 --> 01:24:14,159
that's all for me

2029
01:24:14,159 --> 01:24:17,839
greg your turn

2030
01:24:18,639 --> 01:24:21,120
hi bruno thank you for presentation i

2031
01:24:21,120 --> 01:24:22,239
just wonder

2032
01:24:22,239 --> 01:24:26,000
um in your opinion how this uh

2033
01:24:26,000 --> 01:24:29,040
proposal is uh related to the previous

2034
01:24:29,040 --> 01:24:31,840
presentation

2035
01:24:35,360 --> 01:24:38,080
it can use it can be used independently

2036
01:24:38,080 --> 01:24:40,159
the main goal is to

2037
01:24:40,159 --> 01:24:42,239
advertise indicators in the packet in

2038
01:24:42,239 --> 01:24:44,560
the stack

2039
01:24:44,560 --> 01:24:47,199
now you're free to use indicators to

2040
01:24:47,199 --> 01:24:49,679
indicate whatever you want in

2041
01:24:49,679 --> 01:24:51,600
so

2042
01:24:51,600 --> 01:24:52,719
if you want to

2043
01:24:52,719 --> 01:24:55,520
to indicate an extension

2044
01:24:55,520 --> 01:24:57,600
you do so

2045
01:24:57,600 --> 01:25:00,080
i i mean sure to to get you also it's

2046
01:25:00,080 --> 01:25:02,320
mostly independence in the way that you

2047
01:25:02,320 --> 01:25:04,159
can use indicators as a general

2048
01:25:04,159 --> 01:25:06,000
capability

2049
01:25:06,000 --> 01:25:08,719
to indicate whatever you want

2050
01:25:08,719 --> 01:25:11,280
and anyone is free to use indicator to

2051
01:25:11,280 --> 01:25:14,080
to signal something so

2052
01:25:14,080 --> 01:25:17,840
not sure if this answer your question

2053
01:25:20,320 --> 01:25:23,360
because um

2054
01:25:24,159 --> 01:25:26,800
in my understanding that um

2055
01:25:26,800 --> 01:25:28,800
so what uh

2056
01:25:28,800 --> 01:25:33,120
your proposal is uh

2057
01:25:33,679 --> 01:25:38,000
arguing is that uh only

2058
01:25:38,000 --> 01:25:41,600
11 indicators can be used with no

2059
01:25:41,600 --> 01:25:43,360
ancillary data

2060
01:25:43,360 --> 01:25:45,920
following uh in stack

2061
01:25:45,920 --> 01:25:48,239
correct

2062
01:25:48,719 --> 01:25:51,440
and that seems to be too

2063
01:25:51,440 --> 01:25:56,080
little and does not really conform well

2064
01:25:56,080 --> 01:25:59,760
does not conform to the requirements

2065
01:25:59,760 --> 01:26:02,400
so the proposal

2066
01:26:02,400 --> 01:26:04,639
can use a

2067
01:26:04,639 --> 01:26:08,040
set of indicators

2068
01:26:08,320 --> 01:26:10,320
while fully compatible with entropy

2069
01:26:10,320 --> 01:26:12,480
level

2070
01:26:12,480 --> 01:26:15,120
we propose the integrals to be a user

2071
01:26:15,120 --> 01:26:17,040
definer

2072
01:26:17,040 --> 01:26:20,000
to maximize reusability

2073
01:26:20,000 --> 01:26:22,960
if you need more than 8 or 11

2074
01:26:22,960 --> 01:26:25,440
indicators it's possible to extend the

2075
01:26:25,440 --> 01:26:27,840
proposal

2076
01:26:27,840 --> 01:26:31,520
by putting new levels

2077
01:26:31,679 --> 01:26:33,840
but if you do that so if specific

2078
01:26:33,840 --> 01:26:35,679
autonomous systems do that

2079
01:26:35,679 --> 01:26:38,000
clearly you lose compatibility with

2080
01:26:38,000 --> 01:26:40,239
existing egress supporting only the

2081
01:26:40,239 --> 01:26:43,040
entropy level

2082
01:26:43,360 --> 01:26:46,480
so i i think it's it's fair to

2083
01:26:46,480 --> 01:26:49,519
to ask the autonomous system

2084
01:26:49,600 --> 01:26:50,639
a lot of

2085
01:26:50,639 --> 01:26:53,760
indicators to support the cost of it

2086
01:26:53,760 --> 01:26:54,960
and

2087
01:26:54,960 --> 01:26:57,280
allow autonomous systems to

2088
01:26:57,280 --> 01:26:59,280
to be happy with eight

2089
01:26:59,280 --> 01:27:01,440
indicators

2090
01:27:01,440 --> 01:27:03,600
to benefit from

2091
01:27:03,600 --> 01:27:05,520
the compatibility with the existing uh

2092
01:27:05,520 --> 01:27:06,960
entropy level

2093
01:27:06,960 --> 01:27:08,239
but it's a problem it's a personal

2094
01:27:08,239 --> 01:27:11,839
opinion rakesh you'll go

2095
01:27:15,120 --> 01:27:16,800
hi

2096
01:27:16,800 --> 01:27:18,639
so uh thanks bruno uh for the

2097
01:27:18,639 --> 01:27:22,000
presentation uh i think i just had one

2098
01:27:22,000 --> 01:27:24,800
uh comment is that um i think bruno

2099
01:27:24,800 --> 01:27:28,400
draft is um is independent um

2100
01:27:28,400 --> 01:27:30,960
and it can progress um as a working

2101
01:27:30,960 --> 01:27:33,679
group document while the jack strap is

2102
01:27:33,679 --> 01:27:35,520
more about um

2103
01:27:35,520 --> 01:27:38,239
the asic or hardware friendly encoding

2104
01:27:38,239 --> 01:27:40,960
and it can have a you know resort that

2105
01:27:40,960 --> 01:27:44,159
uh different encore the indicators um

2106
01:27:44,159 --> 01:27:47,600
and eli bit can be one of the indicator

2107
01:27:47,600 --> 01:27:49,679
options so um

2108
01:27:49,679 --> 01:27:52,080
it's the the this draft the bruno draft

2109
01:27:52,080 --> 01:27:54,639
is is independent and it can progress i

2110
01:27:54,639 --> 01:27:57,280
think one another advantage that should

2111
01:27:57,280 --> 01:27:59,840
be listed is the backwards compatibility

2112
01:27:59,840 --> 01:28:01,440
on the existing

2113
01:28:01,440 --> 01:28:03,280
legacy

2114
01:28:03,280 --> 01:28:05,679
nodes for the bruno drop so that's also

2115
01:28:05,679 --> 01:28:07,600
a very strong um

2116
01:28:07,600 --> 01:28:09,040
advantage

2117
01:28:09,040 --> 01:28:13,040
for this to uh proceed thanks

2118
01:28:13,040 --> 01:28:15,360
thank you

2119
01:28:17,120 --> 01:28:19,120
a very short question greg mentioned

2120
01:28:19,120 --> 01:28:22,320
some requirements do we really first see

2121
01:28:22,320 --> 01:28:24,480
that we need more than eight values here

2122
01:28:24,480 --> 01:28:28,678
i mean outside of boiling the ocean

2123
01:28:30,719 --> 01:28:33,199
it's a question for me or i i i can't

2124
01:28:33,199 --> 01:28:35,840
answer for the working group um

2125
01:28:35,840 --> 01:28:38,320
either for your foreground so

2126
01:28:38,320 --> 01:28:39,360
i mean

2127
01:28:39,360 --> 01:28:41,280
eight seems like a reasonable number

2128
01:28:41,280 --> 01:28:42,880
given the preserved buffers

2129
01:28:42,880 --> 01:28:46,000
compatibility do we really see breaking

2130
01:28:46,000 --> 01:28:47,360
point

2131
01:28:47,360 --> 01:28:49,120
where we need to

2132
01:28:49,120 --> 01:28:51,280
look forward saying eight is not enough

2133
01:28:51,280 --> 01:28:53,679
so we need to do something else

2134
01:28:53,679 --> 01:28:55,360
i agree with you jeff

2135
01:28:55,360 --> 01:28:57,120
i think eight is enough at least to

2136
01:28:57,120 --> 01:28:58,560
start

2137
01:28:58,560 --> 01:29:00,400
with indicators

2138
01:29:00,400 --> 01:29:03,040
if really if we really need more than

2139
01:29:03,040 --> 01:29:04,159
eight

2140
01:29:04,159 --> 01:29:06,159
for a given autonomous system

2141
01:29:06,159 --> 01:29:08,159
we can extend but i agree with you that

2142
01:29:08,159 --> 01:29:10,480
we could start with eight

2143
01:29:10,480 --> 01:29:12,799
thank you

2144
01:29:18,880 --> 01:29:21,120
so can the other questions go after

2145
01:29:21,120 --> 01:29:25,840
kariti kariti um you've got

2146
01:29:25,840 --> 01:29:28,719
i'd like to finish you in ten minutes if

2147
01:29:28,719 --> 01:29:30,880
we could total and could you please

2148
01:29:30,880 --> 01:29:33,760
focus on new work rather than

2149
01:29:33,760 --> 01:29:35,840
work that you've discussed at a previous

2150
01:29:35,840 --> 01:29:38,080
meeting thank you sorry to cut you off a

2151
01:29:38,080 --> 01:29:39,760
bit

2152
01:29:39,760 --> 01:29:44,719
i'm sure um so next slide please

2153
01:29:46,400 --> 01:29:47,360
so

2154
01:29:47,360 --> 01:29:48,800
the first thing i want to say is that

2155
01:29:48,800 --> 01:29:52,560
the draft is functionally stable

2156
01:29:52,560 --> 01:29:54,560
we're still wrangling bits we're doing a

2157
01:29:54,560 --> 01:29:56,480
few things like that but we're not

2158
01:29:56,480 --> 01:29:57,360
actually

2159
01:29:57,360 --> 01:29:59,360
adding new functionality

2160
01:29:59,360 --> 01:30:01,040
there was one piece of functionality

2161
01:30:01,040 --> 01:30:04,320
that we hadn't gone into in any detail

2162
01:30:04,320 --> 01:30:06,719
which we might come back to which is

2163
01:30:06,719 --> 01:30:11,280
this whole uh thing about user defined

2164
01:30:12,080 --> 01:30:14,880
you want me to stand there

2165
01:30:14,880 --> 01:30:18,800
i can see from here from there

2166
01:30:18,840 --> 01:30:22,239
um yeah so so um

2167
01:30:22,239 --> 01:30:24,800
but the reason why we're bringing the

2168
01:30:24,800 --> 01:30:27,679
draft here um to stuart to your point

2169
01:30:27,679 --> 01:30:29,360
there are some decisions that we do have

2170
01:30:29,360 --> 01:30:32,719
to make and ideally that the work group

2171
01:30:32,719 --> 01:30:34,400
will make that decision

2172
01:30:34,400 --> 01:30:37,120
so uh that's what i'll get to in this

2173
01:30:37,120 --> 01:30:38,400
deck

2174
01:30:38,400 --> 01:30:41,280
um and once we have those decisions or

2175
01:30:41,280 --> 01:30:44,400
in parallel um adopt the document as a

2176
01:30:44,400 --> 01:30:46,400
working group document so we've been

2177
01:30:46,400 --> 01:30:48,800
working on this for over a year now

2178
01:30:48,800 --> 01:30:51,199
and we've presented a few times we've

2179
01:30:51,199 --> 01:30:53,600
made some changes and so i think we're

2180
01:30:53,600 --> 01:30:56,080
fairly mature at this point

2181
01:30:56,080 --> 01:30:58,639
um there are things we still have to do

2182
01:30:58,639 --> 01:31:00,800
and i don't think that precludes it

2183
01:31:00,800 --> 01:31:02,800
becoming a working group document

2184
01:31:02,800 --> 01:31:05,679
uh we want to write down more about how

2185
01:31:05,679 --> 01:31:07,920
this works in the presence of

2186
01:31:07,920 --> 01:31:10,960
um you know in a in a brownfield network

2187
01:31:10,960 --> 01:31:12,719
um how you deal with backward

2188
01:31:12,719 --> 01:31:14,639
compatibility and so on

2189
01:31:14,639 --> 01:31:17,040
um what kind of extensibility we want

2190
01:31:17,040 --> 01:31:18,560
and how much

2191
01:31:18,560 --> 01:31:20,639
the exact bit formats as i said you know

2192
01:31:20,639 --> 01:31:22,719
we're playing with that still

2193
01:31:22,719 --> 01:31:25,520
ayana allocation details and deployment

2194
01:31:25,520 --> 01:31:30,040
strategies next slide please

2195
01:31:30,239 --> 01:31:33,520
so the three key contributions here are

2196
01:31:33,520 --> 01:31:35,280
that we can use a single spl for

2197
01:31:35,280 --> 01:31:37,840
multiple purposes and that addresses the

2198
01:31:37,840 --> 01:31:40,239
problem of running out of spls

2199
01:31:40,239 --> 01:31:42,560
which is something that we constantly

2200
01:31:42,560 --> 01:31:45,600
worry about in the mpls working group

2201
01:31:45,600 --> 01:31:47,760
we use the full label entry which

2202
01:31:47,760 --> 01:31:50,400
includes the tc and ttl fields

2203
01:31:50,400 --> 01:31:52,800
and we encode forwarding actions very

2204
01:31:52,800 --> 01:31:55,199
succinctly and both two and three are

2205
01:31:55,199 --> 01:31:56,800
for efficiency

2206
01:31:56,800 --> 01:31:59,800
next

2207
01:32:00,960 --> 01:32:01,920
so

2208
01:32:01,920 --> 01:32:03,120
we're going to pose a number of

2209
01:32:03,120 --> 01:32:05,040
questions for the working group

2210
01:32:05,040 --> 01:32:06,880
or maybe working groups because there

2211
01:32:06,880 --> 01:32:09,199
are multiple working groups involved

2212
01:32:09,199 --> 01:32:10,719
we'll pose it here

2213
01:32:10,719 --> 01:32:14,000
hopefully we get some sort of direction

2214
01:32:14,000 --> 01:32:15,600
but of course we will repeat it to the

2215
01:32:15,600 --> 01:32:17,920
mailing list and

2216
01:32:17,920 --> 01:32:21,199
and then you know act on it from there

2217
01:32:21,199 --> 01:32:23,280
our opinions will be noted for each of

2218
01:32:23,280 --> 01:32:25,120
these questions

2219
01:32:25,120 --> 01:32:28,000
uh our being the authors oh i should

2220
01:32:28,000 --> 01:32:30,080
have mentioned we have a new author

2221
01:32:30,080 --> 01:32:32,239
tony lee has joined the

2222
01:32:32,239 --> 01:32:35,120
the group and he has contributed already

2223
01:32:35,120 --> 01:32:38,560
so thank you for that tony

2224
01:32:38,560 --> 01:32:41,360
so if you know if we do an initial poll

2225
01:32:41,360 --> 01:32:43,679
here i think that will help in terms of

2226
01:32:43,679 --> 01:32:46,639
um knowing what the direction this is uh

2227
01:32:46,639 --> 01:32:48,480
that you know we're taking

2228
01:32:48,480 --> 01:32:50,239
but of course in the end we have to do

2229
01:32:50,239 --> 01:32:52,159
it by email and have

2230
01:32:52,159 --> 01:32:54,960
the larger majority in the group

2231
01:32:54,960 --> 01:32:56,080
speak

2232
01:32:56,080 --> 01:32:58,400
next

2233
01:33:00,080 --> 01:33:03,440
so um this should be an obvious one but

2234
01:33:03,440 --> 01:33:06,400
is there a value in in-stack data

2235
01:33:06,400 --> 01:33:08,320
and the only reason i want to bring it

2236
01:33:08,320 --> 01:33:10,400
up here is that there's a constant

2237
01:33:10,400 --> 01:33:11,840
undertone

2238
01:33:11,840 --> 01:33:16,080
um that all miad data should be post

2239
01:33:16,080 --> 01:33:17,360
stack

2240
01:33:17,360 --> 01:33:18,320
um

2241
01:33:18,320 --> 01:33:20,719
we already have an existence proof of

2242
01:33:20,719 --> 01:33:23,120
you know stuff that is in stack

2243
01:33:23,120 --> 01:33:25,520
um i just want this to be ratified by

2244
01:33:25,520 --> 01:33:27,280
the working group so that we can put

2245
01:33:27,280 --> 01:33:29,679
that particular question to bed

2246
01:33:29,679 --> 01:33:31,840
um so i give a couple of reasons here

2247
01:33:31,840 --> 01:33:34,480
why in stack is

2248
01:33:34,480 --> 01:33:36,639
valuable in stack data

2249
01:33:36,639 --> 01:33:38,080
reaching the bottom of stack can be

2250
01:33:38,080 --> 01:33:40,960
expensive or even impossible for some

2251
01:33:40,960 --> 01:33:42,960
chips

2252
01:33:42,960 --> 01:33:44,639
and even if it's possible it's more

2253
01:33:44,639 --> 01:33:48,639
efficient to use in-stack data for

2254
01:33:48,639 --> 01:33:51,280
stuff that's critical for forwarding so

2255
01:33:51,280 --> 01:33:53,520
the entropy label is an example

2256
01:33:53,520 --> 01:33:55,280
a slice indicator

2257
01:33:55,280 --> 01:33:57,920
whether or not to perform fast readout

2258
01:33:57,920 --> 01:34:00,639
so we think that it's really important

2259
01:34:00,639 --> 01:34:02,400
to put things in

2260
01:34:02,400 --> 01:34:04,320
in the stack as opposed to putting

2261
01:34:04,320 --> 01:34:05,360
everything

2262
01:34:05,360 --> 01:34:07,679
after the end of stack

2263
01:34:07,679 --> 01:34:10,400
so the question for the working group is

2264
01:34:10,400 --> 01:34:12,639
what do you think about this

2265
01:34:12,639 --> 01:34:14,560
and can we arrive at

2266
01:34:14,560 --> 01:34:17,120
some kind of consensus on the guidelines

2267
01:34:17,120 --> 01:34:19,040
we went into this a little bit during

2268
01:34:19,040 --> 01:34:21,120
matthew's presentation

2269
01:34:21,120 --> 01:34:23,120
what do you put in stack when do you put

2270
01:34:23,120 --> 01:34:25,520
it how big can it be

2271
01:34:25,520 --> 01:34:27,840
and our opinion is yes we need in-stack

2272
01:34:27,840 --> 01:34:28,800
data

2273
01:34:28,800 --> 01:34:31,600
and we have some guidelines in the draft

2274
01:34:31,600 --> 01:34:33,520
we can expand on those

2275
01:34:33,520 --> 01:34:34,480
but

2276
01:34:34,480 --> 01:34:37,040
we'd like the working group to you know

2277
01:34:37,040 --> 01:34:39,360
give us the go ahead

2278
01:34:39,360 --> 01:34:41,679
next

2279
01:34:43,600 --> 01:34:46,400
should we repeat the in stack data in

2280
01:34:46,400 --> 01:34:48,880
the post-stack data

2281
01:34:48,880 --> 01:34:51,199
this was thrown out in one of the design

2282
01:34:51,199 --> 01:34:52,560
team meetings

2283
01:34:52,560 --> 01:34:54,400
i don't think this is worth it i don't

2284
01:34:54,400 --> 01:34:56,960
like repeating stuff there's always the

2285
01:34:56,960 --> 01:34:59,440
chance that you don't you know get it

2286
01:34:59,440 --> 01:35:02,880
right you don't encode it correctly and

2287
01:35:02,880 --> 01:35:04,960
then if there's a conflict which one do

2288
01:35:04,960 --> 01:35:06,239
you take

2289
01:35:06,239 --> 01:35:08,080
but again i think it would be nice to

2290
01:35:08,080 --> 01:35:10,159
get feedback from the working group

2291
01:35:10,159 --> 01:35:12,719
and then you know settle this

2292
01:35:12,719 --> 01:35:15,719
next

2293
01:35:16,320 --> 01:35:17,840
um

2294
01:35:17,840 --> 01:35:19,600
we think that this approach is very

2295
01:35:19,600 --> 01:35:21,840
efficient and very extensible

2296
01:35:21,840 --> 01:35:24,239
an action is essentially encoded in a

2297
01:35:24,239 --> 01:35:25,600
single bit

2298
01:35:25,600 --> 01:35:27,199
and the position of the bit the bit

2299
01:35:27,199 --> 01:35:30,080
number says what the action is and the

2300
01:35:30,080 --> 01:35:32,000
value can be zero or one

2301
01:35:32,000 --> 01:35:34,000
zero means don't do it there is no

2302
01:35:34,000 --> 01:35:35,840
associated data ever

2303
01:35:35,840 --> 01:35:38,080
and one means do it to whatever the

2304
01:35:38,080 --> 01:35:39,360
action is

2305
01:35:39,360 --> 01:35:41,679
and whether there's associated data or

2306
01:35:41,679 --> 01:35:43,360
not and how big it is

2307
01:35:43,360 --> 01:35:45,040
is something that needs to be put in the

2308
01:35:45,040 --> 01:35:47,119
iana registry

2309
01:35:47,119 --> 01:35:50,159
so typically um it's either zero or four

2310
01:35:50,159 --> 01:35:52,880
octets of associate data

2311
01:35:52,880 --> 01:35:54,960
the number of flag bits is extensible so

2312
01:35:54,960 --> 01:35:57,520
there's an extension header that says

2313
01:35:57,520 --> 01:36:00,320
use another label stack entry for more

2314
01:36:00,320 --> 01:36:02,159
flags

2315
01:36:02,159 --> 01:36:03,440
so

2316
01:36:03,440 --> 01:36:05,679
again there's been questions about how

2317
01:36:05,679 --> 01:36:07,920
do we encode these things

2318
01:36:07,920 --> 01:36:10,000
i think we need the working group to

2319
01:36:10,000 --> 01:36:12,080
step in and say yeah what you guys are

2320
01:36:12,080 --> 01:36:14,159
doing is wonderful because of course it

2321
01:36:14,159 --> 01:36:15,199
is

2322
01:36:15,199 --> 01:36:17,360
um and

2323
01:36:17,360 --> 01:36:19,199
we do have people who

2324
01:36:19,199 --> 01:36:20,639
are looking at this from a hardware

2325
01:36:20,639 --> 01:36:22,480
implementation point of view

2326
01:36:22,480 --> 01:36:25,040
and you know we have a co-author

2327
01:36:25,040 --> 01:36:27,840
israel from from broadcom and we have

2328
01:36:27,840 --> 01:36:29,040
internal

2329
01:36:29,040 --> 01:36:31,360
um people who

2330
01:36:31,360 --> 01:36:34,080
write asics and microworld and stuff and

2331
01:36:34,080 --> 01:36:36,320
they're pretty happy with it but again

2332
01:36:36,320 --> 01:36:38,400
we'd like the working group or working

2333
01:36:38,400 --> 01:36:40,960
groups to say yes go ahead with this

2334
01:36:40,960 --> 01:36:42,000
approach

2335
01:36:42,000 --> 01:36:44,320
next

2336
01:36:45,280 --> 01:36:47,840
um the one exception to this

2337
01:36:47,840 --> 01:36:50,719
flags being one bit is there's a two bit

2338
01:36:50,719 --> 01:36:53,040
flag for the combination of entropy

2339
01:36:53,040 --> 01:36:54,000
label

2340
01:36:54,000 --> 01:36:56,080
and yes

2341
01:36:56,080 --> 01:36:59,119
um and there's a summary of how this

2342
01:36:59,119 --> 01:37:01,760
works in the top right

2343
01:37:01,760 --> 01:37:03,199
uh question

2344
01:37:03,199 --> 01:37:04,639
i guess is

2345
01:37:04,639 --> 01:37:06,800
i mean what this gives you is a much

2346
01:37:06,800 --> 01:37:08,639
much more flexibility

2347
01:37:08,639 --> 01:37:10,880
in how many bits you have for entropy

2348
01:37:10,880 --> 01:37:13,920
and how many you have for slice id

2349
01:37:13,920 --> 01:37:16,320
but is this too clever

2350
01:37:16,320 --> 01:37:18,880
and this is i think a question for

2351
01:37:18,880 --> 01:37:21,600
people who want to implement this

2352
01:37:21,600 --> 01:37:22,400
so

2353
01:37:22,400 --> 01:37:24,960
um the question to the working group is

2354
01:37:24,960 --> 01:37:28,000
is it useful to have this flexibility

2355
01:37:28,000 --> 01:37:29,360
and if it is

2356
01:37:29,360 --> 01:37:31,280
um we then

2357
01:37:31,280 --> 01:37:32,400
it

2358
01:37:32,400 --> 01:37:35,760
is beholding on us to investigate

2359
01:37:35,760 --> 01:37:37,920
the complexity of the hardware that goes

2360
01:37:37,920 --> 01:37:40,480
that supports this but there is a value

2361
01:37:40,480 --> 01:37:43,280
that you know in many cases you only use

2362
01:37:43,280 --> 01:37:45,840
one lse instead of two

2363
01:37:45,840 --> 01:37:48,239
if you did one bit per action then you'd

2364
01:37:48,239 --> 01:37:50,080
always have two llc's

2365
01:37:50,080 --> 01:37:51,600
and you'd always have

2366
01:37:51,600 --> 01:37:54,400
very big entropy and very big gifts

2367
01:37:54,400 --> 01:37:55,920
and maybe that's not the best way of

2368
01:37:55,920 --> 01:37:57,520
doing things

2369
01:37:57,520 --> 01:38:00,520
next

2370
01:38:02,719 --> 01:38:03,760
and

2371
01:38:03,760 --> 01:38:05,520
i guess this is the last one

2372
01:38:05,520 --> 01:38:06,400
um

2373
01:38:06,400 --> 01:38:08,159
can the

2374
01:38:08,159 --> 01:38:10,159
special purpose label reach the top of

2375
01:38:10,159 --> 01:38:11,280
stack

2376
01:38:11,280 --> 01:38:13,280
until now we've been saying because

2377
01:38:13,280 --> 01:38:16,639
we're reusing the tc and ttl bits

2378
01:38:16,639 --> 01:38:18,239
we don't want it to reach the top of

2379
01:38:18,239 --> 01:38:19,360
stack

2380
01:38:19,360 --> 01:38:21,280
but if we have the right signaling that

2381
01:38:21,280 --> 01:38:22,159
says

2382
01:38:22,159 --> 01:38:25,600
i can deal with it if the faa spl or

2383
01:38:25,600 --> 01:38:27,520
whatever you want to call it reaches the

2384
01:38:27,520 --> 01:38:29,600
proper stack

2385
01:38:29,600 --> 01:38:30,960
then i think we

2386
01:38:30,960 --> 01:38:33,679
we have more flexibility

2387
01:38:33,679 --> 01:38:34,960
the three

2388
01:38:34,960 --> 01:38:37,840
sort of choices here here are never let

2389
01:38:37,840 --> 01:38:40,000
this happen which is kind of what the

2390
01:38:40,000 --> 01:38:43,040
current document says

2391
01:38:43,040 --> 01:38:45,360
the second is to allow this to happen

2392
01:38:45,360 --> 01:38:46,159
and

2393
01:38:46,159 --> 01:38:49,199
you know if you pop the the the top

2394
01:38:49,199 --> 01:38:51,280
label which is the forwarding label

2395
01:38:51,280 --> 01:38:55,199
and send the fai label to the next lsr

2396
01:38:55,199 --> 01:38:58,159
it has to be able to deal with it or the

2397
01:38:58,159 --> 01:39:00,159
third is if you don't like that

2398
01:39:00,159 --> 01:39:02,480
happening push a neutral label on top of

2399
01:39:02,480 --> 01:39:05,600
stack so for example label zero

2400
01:39:05,600 --> 01:39:07,280
this is not something we have to decide

2401
01:39:07,280 --> 01:39:08,320
right away

2402
01:39:08,320 --> 01:39:11,040
there is some flexibility involved

2403
01:39:11,040 --> 01:39:12,400
there's also some

2404
01:39:12,400 --> 01:39:14,320
you know potential for bad things to

2405
01:39:14,320 --> 01:39:15,280
happen

2406
01:39:15,280 --> 01:39:16,800
so that's something i think the working

2407
01:39:16,800 --> 01:39:19,600
group should think through

2408
01:39:19,600 --> 01:39:21,920
next

2409
01:39:22,159 --> 01:39:26,080
so um as i said we're doing some you

2410
01:39:26,080 --> 01:39:27,760
know arm wrestling around some of these

2411
01:39:27,760 --> 01:39:28,800
bits

2412
01:39:28,800 --> 01:39:30,960
um you know continuation bits is what we

2413
01:39:30,960 --> 01:39:32,320
currently have

2414
01:39:32,320 --> 01:39:34,719
um we have a request

2415
01:39:34,719 --> 01:39:37,119
to put an explicit length it makes it

2416
01:39:37,119 --> 01:39:39,040
much easier to know exactly how much to

2417
01:39:39,040 --> 01:39:40,880
pop

2418
01:39:40,880 --> 01:39:42,800
the bid positions we might want to play

2419
01:39:42,800 --> 01:39:43,600
with

2420
01:39:43,600 --> 01:39:46,320
in terms of put all the things that have

2421
01:39:46,320 --> 01:39:48,239
no associated data first

2422
01:39:48,239 --> 01:39:49,600
or put all the things that are really

2423
01:39:49,600 --> 01:39:52,560
important first or stuff like that

2424
01:39:52,560 --> 01:39:53,679
again

2425
01:39:53,679 --> 01:39:55,760
semantically it won't change anything

2426
01:39:55,760 --> 01:39:59,280
that might make it easy for the hardware

2427
01:39:59,280 --> 01:40:02,000
um we don't have a detailed iona section

2428
01:40:02,000 --> 01:40:04,639
we need that especially in the inner

2429
01:40:04,639 --> 01:40:06,960
section you have to do things like say

2430
01:40:06,960 --> 01:40:08,880
um

2431
01:40:08,880 --> 01:40:10,400
what's this length of the data

2432
01:40:10,400 --> 01:40:12,880
associated with this and does the data

2433
01:40:12,880 --> 01:40:15,199
come in stack or post stack

2434
01:40:15,199 --> 01:40:16,560
and then there's a bunch of procedures

2435
01:40:16,560 --> 01:40:18,239
we have to write down and i think that

2436
01:40:18,239 --> 01:40:19,520
would be good

2437
01:40:19,520 --> 01:40:20,719
um

2438
01:40:20,719 --> 01:40:22,719
so that this is deployable

2439
01:40:22,719 --> 01:40:23,600
and

2440
01:40:23,600 --> 01:40:25,600
you know we we look through some of the

2441
01:40:25,600 --> 01:40:27,360
scenarios that

2442
01:40:27,360 --> 01:40:30,960
uh could happen if you start using this

2443
01:40:30,960 --> 01:40:32,800
so

2444
01:40:32,800 --> 01:40:34,480
uh again we'd like to get the working

2445
01:40:34,480 --> 01:40:37,199
group feedback on the questions which

2446
01:40:37,199 --> 01:40:39,760
were in slides five through nine

2447
01:40:39,760 --> 01:40:40,639
and

2448
01:40:40,639 --> 01:40:42,880
yeah work group at option

2449
01:40:42,880 --> 01:40:44,719
um i don't think

2450
01:40:44,719 --> 01:40:46,960
the working group adoption is

2451
01:40:46,960 --> 01:40:49,600
contingent on any of this happening and

2452
01:40:49,600 --> 01:40:52,480
this document as i said is pretty stable

2453
01:40:52,480 --> 01:40:54,719
but yeah whatever the working groups

2454
01:40:54,719 --> 01:40:56,560
decide

2455
01:40:56,560 --> 01:40:58,159
questions

2456
01:40:58,159 --> 01:40:59,600
appreciate i don't think there's time to

2457
01:40:59,600 --> 01:41:02,400
do mass replies to these today and

2458
01:41:02,400 --> 01:41:04,239
i suppose with foresight we would have

2459
01:41:04,239 --> 01:41:06,880
set up a an electronic survey maybe we

2460
01:41:06,880 --> 01:41:08,639
should ask the chairs to set up an

2461
01:41:08,639 --> 01:41:10,480
electronic survey to get some

2462
01:41:10,480 --> 01:41:12,080
consolidated information for your

2463
01:41:12,080 --> 01:41:14,000
questions

2464
01:41:14,000 --> 01:41:15,520
yeah i mean the other thing is we could

2465
01:41:15,520 --> 01:41:17,520
just send email

2466
01:41:17,520 --> 01:41:19,760
to the list one per question

2467
01:41:19,760 --> 01:41:22,239
and so either way

2468
01:41:22,239 --> 01:41:24,800
a million answers to of text answers so

2469
01:41:24,800 --> 01:41:26,880
rakesh your first then darren and then

2470
01:41:26,880 --> 01:41:28,719
we're going to go to crete's second

2471
01:41:28,719 --> 01:41:31,040
slot

2472
01:41:31,040 --> 01:41:33,840
uh yeah thanks

2473
01:41:34,000 --> 01:41:36,239
so um i think you asked for working of

2474
01:41:36,239 --> 01:41:38,239
adoption for this draft and i just

2475
01:41:38,239 --> 01:41:40,480
wanted to point out that uh

2476
01:41:40,480 --> 01:41:42,800
there are also two other solution drops

2477
01:41:42,800 --> 01:41:44,800
as well and they are also asking for

2478
01:41:44,800 --> 01:41:47,440
working new production as well so um

2479
01:41:47,440 --> 01:41:49,760
i i think just to

2480
01:41:49,760 --> 01:41:52,239
highlight there are multiple drafts

2481
01:41:52,239 --> 01:41:54,320
requesting the same so probably need

2482
01:41:54,320 --> 01:41:56,560
some more discussion on that

2483
01:41:56,560 --> 01:42:00,679
uh and that's all thanks

2484
01:42:01,040 --> 01:42:04,159
it's not a question for me

2485
01:42:07,600 --> 01:42:11,040
next that's hopefully my profile

2486
01:42:11,040 --> 01:42:14,480
yeah it is work it is working um um

2487
01:42:14,480 --> 01:42:16,960
yeah so i've i just had a comment and

2488
01:42:16,960 --> 01:42:20,159
maybe this will go to the email list

2489
01:42:20,159 --> 01:42:21,600
well you can tell me

2490
01:42:21,600 --> 01:42:23,280
but anyway the

2491
01:42:23,280 --> 01:42:25,440
item number three you had

2492
01:42:25,440 --> 01:42:27,119
a set of bits indicating the

2493
01:42:27,119 --> 01:42:28,800
functionality and that seems good until

2494
01:42:28,800 --> 01:42:31,280
there's some ancillary data associated

2495
01:42:31,280 --> 01:42:33,280
with those bits and i

2496
01:42:33,280 --> 01:42:34,239
understand that it would be

2497
01:42:34,239 --> 01:42:36,639
implementable in in hardware but what

2498
01:42:36,639 --> 01:42:38,400
the hardware has to do then is is go

2499
01:42:38,400 --> 01:42:40,800
from a bit presence to some data that

2500
01:42:40,800 --> 01:42:43,040
may appear later to another bit being

2501
01:42:43,040 --> 01:42:45,040
present some data that may appear after

2502
01:42:45,040 --> 01:42:46,400
that and it needs to bounce around in

2503
01:42:46,400 --> 01:42:48,960
order to accomplish that um i have a

2504
01:42:48,960 --> 01:42:51,040
concern with that encoding maybe i don't

2505
01:42:51,040 --> 01:42:52,560
know if we have time today to discuss it

2506
01:42:52,560 --> 01:42:54,560
or if we'll go to the list but that's my

2507
01:42:54,560 --> 01:42:57,040
main comment

2508
01:42:57,040 --> 01:42:59,440
so as i said we have people who are

2509
01:42:59,440 --> 01:43:01,280
looking at this from an implementation

2510
01:43:01,280 --> 01:43:02,480
point of view

2511
01:43:02,480 --> 01:43:05,280
um and there's an algorithm in in the

2512
01:43:05,280 --> 01:43:08,000
document about how to process this it is

2513
01:43:08,000 --> 01:43:10,400
sequential because the presence of an

2514
01:43:10,400 --> 01:43:12,080
earlier bit being one

2515
01:43:12,080 --> 01:43:14,960
makes you know moves the data around so

2516
01:43:14,960 --> 01:43:17,760
if an earlier bit has associated data

2517
01:43:17,760 --> 01:43:20,560
um let's say there's an entropy label

2518
01:43:20,560 --> 01:43:22,480
that means the first

2519
01:43:22,480 --> 01:43:24,639
label stack entry following this would

2520
01:43:24,639 --> 01:43:26,560
have the entropy label if that bit

2521
01:43:26,560 --> 01:43:29,360
happens to be zero the first

2522
01:43:29,360 --> 01:43:31,119
label stack entry would be some other

2523
01:43:31,119 --> 01:43:32,080
thing

2524
01:43:32,080 --> 01:43:35,119
so we are well aware of that

2525
01:43:35,119 --> 01:43:36,400
as i said

2526
01:43:36,400 --> 01:43:39,600
so far the implementation seems to be

2527
01:43:39,600 --> 01:43:40,960
straightforward

2528
01:43:40,960 --> 01:43:42,159
um

2529
01:43:42,159 --> 01:43:44,880
but yes we we are taking that into

2530
01:43:44,880 --> 01:43:47,119
account

2531
01:43:47,119 --> 01:43:48,719
can you now fly

2532
01:43:48,719 --> 01:43:50,239
can you fly through the next one and

2533
01:43:50,239 --> 01:43:52,080
then we'll take all of the other

2534
01:43:52,080 --> 01:43:54,000
questions that people have got for this

2535
01:43:54,000 --> 01:43:56,320
together with all of the questions uh

2536
01:43:56,320 --> 01:43:57,679
that people got outstanding for other

2537
01:43:57,679 --> 01:44:00,639
things as part of the final wrap-up

2538
01:44:00,639 --> 01:44:02,719
okay yeah

2539
01:44:02,719 --> 01:44:04,639
so um we

2540
01:44:04,639 --> 01:44:06,639
a bunch of us got together you can see

2541
01:44:06,639 --> 01:44:09,600
the authors here to write

2542
01:44:09,600 --> 01:44:12,080
essentially an iana registry for the

2543
01:44:12,080 --> 01:44:14,320
first nibble which is the first four

2544
01:44:14,320 --> 01:44:16,320
bits that follow the label stack which

2545
01:44:16,320 --> 01:44:18,880
is look for the last label the one with

2546
01:44:18,880 --> 01:44:21,199
the bottom of stack bit set

2547
01:44:21,199 --> 01:44:23,840
and then the first nibble after that

2548
01:44:23,840 --> 01:44:26,400
next slide

2549
01:44:26,639 --> 01:44:29,760
so um the reason we want to do this is a

2550
01:44:29,760 --> 01:44:31,040
lot of people were thinking that the

2551
01:44:31,040 --> 01:44:33,760
first nibble would be similar to ip

2552
01:44:33,760 --> 01:44:36,800
version number and we can use zero or

2553
01:44:36,800 --> 01:44:39,199
one but we can't use anything else

2554
01:44:39,199 --> 01:44:40,239
um

2555
01:44:40,239 --> 01:44:43,600
what this um document basically says is

2556
01:44:43,600 --> 01:44:45,679
we've got 16 values we're going to use

2557
01:44:45,679 --> 01:44:48,080
all 16 except we are not going to use

2558
01:44:48,080 --> 01:44:49,840
four and six

2559
01:44:49,840 --> 01:44:51,040
um

2560
01:44:51,040 --> 01:44:52,639
this is not an ipv version number

2561
01:44:52,639 --> 01:44:54,320
registry

2562
01:44:54,320 --> 01:44:56,239
and the reason why four and six are

2563
01:44:56,239 --> 01:44:58,480
special is because people

2564
01:44:58,480 --> 01:45:01,440
came up with this uh really bad hack

2565
01:45:01,440 --> 01:45:04,320
that if it is four or six uh it might be

2566
01:45:04,320 --> 01:45:05,679
an ip address

2567
01:45:05,679 --> 01:45:07,760
it turns out to be a really bad hack

2568
01:45:07,760 --> 01:45:10,480
so this also says here's a requirement

2569
01:45:10,480 --> 01:45:12,480
and here's a recommendation

2570
01:45:12,480 --> 01:45:15,280
next slide please

2571
01:45:15,280 --> 01:45:17,199
so the requirement is

2572
01:45:17,199 --> 01:45:19,520
if you're not putting an ip

2573
01:45:19,520 --> 01:45:22,560
packet directly after the label stack

2574
01:45:22,560 --> 01:45:24,719
so it could be either four or six

2575
01:45:24,719 --> 01:45:26,000
um

2576
01:45:26,000 --> 01:45:28,960
then you must use a post stack header

2577
01:45:28,960 --> 01:45:30,400
this is sort of what

2578
01:45:30,400 --> 01:45:32,800
rfc 4928 says

2579
01:45:32,800 --> 01:45:36,159
but we're trying to make it stronger

2580
01:45:36,159 --> 01:45:38,719
and so it's not just for ethernet

2581
01:45:38,719 --> 01:45:40,480
just anything that you do whether it's

2582
01:45:40,480 --> 01:45:42,159
beer whether it's

2583
01:45:42,159 --> 01:45:45,360
what else you want to do um you should

2584
01:45:45,360 --> 01:45:48,719
if it is not ipv4 or ipv6

2585
01:45:48,719 --> 01:45:50,000
just put

2586
01:45:50,000 --> 01:45:53,280
a post stack header and we are including

2587
01:45:53,280 --> 01:45:54,880
you know

2588
01:45:54,880 --> 01:45:58,800
the control word as a post stack header

2589
01:45:58,800 --> 01:46:01,360
next slide

2590
01:46:01,360 --> 01:46:04,000
um the recommendation is if you want to

2591
01:46:04,000 --> 01:46:07,840
do load balancing do not use this hack

2592
01:46:07,840 --> 01:46:09,600
that you know if the first nibble is

2593
01:46:09,600 --> 01:46:12,320
four or six it might be an ipv4 packet

2594
01:46:12,320 --> 01:46:14,480
it's really broken now if

2595
01:46:14,480 --> 01:46:16,639
the previous uh

2596
01:46:16,639 --> 01:46:18,880
recommendation or requirement is used

2597
01:46:18,880 --> 01:46:20,159
this shouldn't be needed but there's

2598
01:46:20,159 --> 01:46:21,199
lots of

2599
01:46:21,199 --> 01:46:23,280
uh implementations out there that do

2600
01:46:23,280 --> 01:46:24,400
this so

2601
01:46:24,400 --> 01:46:26,800
if you want good entropy

2602
01:46:26,800 --> 01:46:28,719
if you want good load balancing use an

2603
01:46:28,719 --> 01:46:31,280
entropy label use a faster oil label

2604
01:46:31,280 --> 01:46:33,119
don't use that hack

2605
01:46:33,119 --> 01:46:35,440
that's pretty much it

2606
01:46:35,440 --> 01:46:39,879
um i think that's the last slide

2607
01:46:41,679 --> 01:46:43,360
so um

2608
01:46:43,360 --> 01:46:44,880
if people have got questions on this

2609
01:46:44,880 --> 01:46:46,560
we'll take those first and then we'll

2610
01:46:46,560 --> 01:46:48,960
take general questions and comments on

2611
01:46:48,960 --> 01:46:50,400
the rest of on the work program as a

2612
01:46:50,400 --> 01:46:51,440
whole

2613
01:46:51,440 --> 01:46:55,000
or other presentations

2614
01:46:56,239 --> 01:46:58,480
so

2615
01:47:00,880 --> 01:47:02,639
all right again

2616
01:47:02,639 --> 01:47:05,119
my question is there is some talk about

2617
01:47:05,119 --> 01:47:08,560
application aware routing and routers

2618
01:47:08,560 --> 01:47:10,400
would have to peek

2619
01:47:10,400 --> 01:47:12,880
deep into the packet figure out what

2620
01:47:12,880 --> 01:47:15,360
application it belongs to maybe

2621
01:47:15,360 --> 01:47:19,119
i'm not sure if that is possible

2622
01:47:19,119 --> 01:47:20,960
putting this recommendation the one that

2623
01:47:20,960 --> 01:47:23,600
you had on the slide uh you should not

2624
01:47:23,600 --> 01:47:24,960
decode or

2625
01:47:24,960 --> 01:47:26,880
make any assumption what is the header

2626
01:47:26,880 --> 01:47:28,000
type

2627
01:47:28,000 --> 01:47:30,320
uh will not would make it hard for the

2628
01:47:30,320 --> 01:47:32,239
routers to tell

2629
01:47:32,239 --> 01:47:35,600
uh what is the application would it what

2630
01:47:35,600 --> 01:47:38,239
well it would make it hard but but it's

2631
01:47:38,239 --> 01:47:39,600
the right thing to do

2632
01:47:39,600 --> 01:47:41,440
um we know that we already have the

2633
01:47:41,440 --> 01:47:43,360
problem that if it's a

2634
01:47:43,360 --> 01:47:46,400
an ethernet packet and if if it's an

2635
01:47:46,400 --> 01:47:48,480
ethernet packet without a control word

2636
01:47:48,480 --> 01:47:50,800
the first nibble could be four or six or

2637
01:47:50,800 --> 01:47:51,760
could be

2638
01:47:51,760 --> 01:47:53,119
other things

2639
01:47:53,119 --> 01:47:55,040
because there is no that's the part of

2640
01:47:55,040 --> 01:47:57,920
the oui field in an ethernet

2641
01:47:57,920 --> 01:47:59,199
address

2642
01:47:59,199 --> 01:48:01,760
in the mac address so

2643
01:48:01,760 --> 01:48:03,679
trying to guess that the packet is ip by

2644
01:48:03,679 --> 01:48:05,840
looking at that first nibble is just not

2645
01:48:05,840 --> 01:48:08,080
a good idea whether it's doing whether

2646
01:48:08,080 --> 01:48:09,040
you're doing

2647
01:48:09,040 --> 01:48:11,360
uh load balancing or or

2648
01:48:11,360 --> 01:48:13,920
application aware routing

2649
01:48:13,920 --> 01:48:16,080
so

2650
01:48:16,239 --> 01:48:18,159
so do i publish a draft on this because

2651
01:48:18,159 --> 01:48:19,920
we got into terrible trouble where

2652
01:48:19,920 --> 01:48:22,800
people were doing this uh because um

2653
01:48:22,800 --> 01:48:24,320
there are some ethernet frames starting

2654
01:48:24,320 --> 01:48:27,040
to appear that um were sent raw as you

2655
01:48:27,040 --> 01:48:28,880
can do over pseudowire and they were

2656
01:48:28,880 --> 01:48:31,199
mimicking ip

2657
01:48:31,199 --> 01:48:34,960
yep yep i think that's 49.28 let's see

2658
01:48:34,960 --> 01:48:36,560
um so

2659
01:48:36,560 --> 01:48:38,800
i would say that um the right way to do

2660
01:48:38,800 --> 01:48:40,800
that would be to put

2661
01:48:40,800 --> 01:48:43,520
a postdoc data that says

2662
01:48:43,520 --> 01:48:45,199
and i'm going to say this

2663
01:48:45,199 --> 01:48:46,880
please don't shoot me

2664
01:48:46,880 --> 01:48:48,880
this is a protocol

2665
01:48:48,880 --> 01:48:51,679
type for the packet or something if you

2666
01:48:51,679 --> 01:48:53,199
really want to get into application

2667
01:48:53,199 --> 01:48:54,880
aware routing

2668
01:48:54,880 --> 01:48:57,280
but just trying to guess randomly

2669
01:48:57,280 --> 01:48:59,679
whether the packet is ip or not

2670
01:48:59,679 --> 01:49:03,920
based on one nibble is not a good idea

2671
01:49:05,920 --> 01:49:08,239
okay

2672
01:49:11,600 --> 01:49:12,960
okay

2673
01:49:12,960 --> 01:49:14,800
so we have some pending questions i

2674
01:49:14,800 --> 01:49:17,119
believe if anyone wants to raise them

2675
01:49:17,119 --> 01:49:18,800
now

2676
01:49:18,800 --> 01:49:20,480
lower did you have any particular you

2677
01:49:20,480 --> 01:49:22,550
wanted to cover in this section

2678
01:49:22,550 --> 01:49:25,600
[Music]

2679
01:49:31,040 --> 01:49:32,960
what i wanted to discuss has actually

2680
01:49:32,960 --> 01:49:34,560
been

2681
01:49:34,560 --> 01:49:35,840
uh

2682
01:49:35,840 --> 01:49:38,080
on the in the meeting

2683
01:49:38,080 --> 01:49:40,320
so

2684
01:49:40,320 --> 01:49:43,119
yeah

2685
01:49:43,119 --> 01:49:44,000
i don't know

2686
01:49:44,000 --> 01:49:46,080
i don't have anything in particular us

2687
01:49:46,080 --> 01:49:46,960
now

2688
01:49:46,960 --> 01:49:50,560
and we don't have that much time

2689
01:49:52,880 --> 01:49:54,800
everyone i cut off earlier i was asked

2690
01:49:54,800 --> 01:49:59,360
to preserve this time greg you go

2691
01:50:03,840 --> 01:50:07,199
i read all the proposals and

2692
01:50:07,199 --> 01:50:09,199
i support

2693
01:50:09,199 --> 01:50:12,320
uh the working group adoption paul for

2694
01:50:12,320 --> 01:50:14,239
their

2695
01:50:14,239 --> 01:50:16,960
proposal that he really presented

2696
01:50:16,960 --> 01:50:19,199
thank

2697
01:50:22,840 --> 01:50:27,119
you and then whim

2698
01:50:27,280 --> 01:50:28,480
or

2699
01:50:28,480 --> 01:50:30,879
are you

2700
01:50:35,119 --> 01:50:38,519
then when

2701
01:50:42,480 --> 01:50:44,000
i think it's important to look at this

2702
01:50:44,000 --> 01:50:47,040
backward compatibility thing uh i i was

2703
01:50:47,040 --> 01:50:49,040
trying to chime in when jeff asked a

2704
01:50:49,040 --> 01:50:51,280
question do we foresee a need that we

2705
01:50:51,280 --> 01:50:54,000
need eight of these things at the same

2706
01:50:54,000 --> 01:50:56,080
time when forwarding a packet i also

2707
01:50:56,080 --> 01:50:58,400
believe that that's not realistic to do

2708
01:50:58,400 --> 01:51:00,800
when you want to have a very high

2709
01:51:00,800 --> 01:51:03,199
performance routing right so

2710
01:51:03,199 --> 01:51:05,440
that's why i i personally supported

2711
01:51:05,440 --> 01:51:07,599
bruno's draft as a star because it gives

2712
01:51:07,599 --> 01:51:08,400
us

2713
01:51:08,400 --> 01:51:11,040
a starting point to get going

2714
01:51:11,040 --> 01:51:13,199
without probably have the full-blown

2715
01:51:13,199 --> 01:51:15,280
extensibility that we want but maybe

2716
01:51:15,280 --> 01:51:17,040
it's enough to actually do the things

2717
01:51:17,040 --> 01:51:18,639
that are really needed in a network

2718
01:51:18,639 --> 01:51:20,960
because i was looking back when we did

2719
01:51:20,960 --> 01:51:22,320
entropy label

2720
01:51:22,320 --> 01:51:24,639
with kiriti which basically is 10 years

2721
01:51:24,639 --> 01:51:25,520
ago

2722
01:51:25,520 --> 01:51:28,000
and even today there is many networks

2723
01:51:28,000 --> 01:51:29,760
which cannot even deploy it because they

2724
01:51:29,760 --> 01:51:31,520
have routers that don't support it right

2725
01:51:31,520 --> 01:51:32,719
so we have to

2726
01:51:32,719 --> 01:51:34,960
basically balance

2727
01:51:34,960 --> 01:51:37,920
the solutions against how easy is it to

2728
01:51:37,920 --> 01:51:39,119
deploy

2729
01:51:39,119 --> 01:51:41,520
versus the amount of extensibility it

2730
01:51:41,520 --> 01:51:43,040
gives and i think this is a very

2731
01:51:43,040 --> 01:51:44,560
important

2732
01:51:44,560 --> 01:51:46,400
aspect we have to consider

2733
01:51:46,400 --> 01:51:48,400
because we if you look to what what

2734
01:51:48,400 --> 01:51:50,880
happened with ipv6 and ipv4

2735
01:51:50,880 --> 01:51:53,199
it's incompatible right and we

2736
01:51:53,199 --> 01:51:55,760
actually still struggle daily with this

2737
01:51:55,760 --> 01:51:57,520
problem and i think it's a very

2738
01:51:57,520 --> 01:51:59,119
important aspect we have to take into

2739
01:51:59,119 --> 01:52:01,520
account when considering the solution

2740
01:52:01,520 --> 01:52:03,280
that we are going to adopt

2741
01:52:03,280 --> 01:52:05,520
thanks

2742
01:52:05,520 --> 01:52:06,560
your

2743
01:52:06,560 --> 01:52:08,159
your last chance otherwise i'll take you

2744
01:52:08,159 --> 01:52:10,638
out the queue

2745
01:52:13,679 --> 01:52:16,639
uh hello um let's go

2746
01:52:16,639 --> 01:52:19,360
uh why there might be some uh reasons to

2747
01:52:19,360 --> 01:52:22,159
support instep data here i want us to

2748
01:52:22,159 --> 01:52:25,599
read some disclaimers about the usb

2749
01:52:25,599 --> 01:52:26,960
data

2750
01:52:26,960 --> 01:52:29,440
first i think we

2751
01:52:29,440 --> 01:52:32,960
are lack of a clear criteria uh

2752
01:52:32,960 --> 01:52:35,920
to uh to decide what data should be

2753
01:52:35,920 --> 01:52:38,159
proteins back and what

2754
01:52:38,159 --> 01:52:41,840
data should be for post banking

2755
01:52:41,840 --> 01:52:45,679
and also there's evidence that um

2756
01:52:45,679 --> 01:52:48,719
as darren just mentioned that if we use

2757
01:52:48,719 --> 01:52:52,480
uh bitmap to indicate the use that they

2758
01:52:52,480 --> 01:52:55,760
inspect data and also uh use uh

2759
01:52:55,760 --> 01:52:58,320
including stacked data in some labels

2760
01:52:58,320 --> 01:53:02,159
that will complicate the password a lot

2761
01:53:02,159 --> 01:53:04,159
so um

2762
01:53:04,159 --> 01:53:07,199
um and also um

2763
01:53:07,199 --> 01:53:08,239
we we

2764
01:53:08,239 --> 01:53:10,800
can we you know we understand there are

2765
01:53:10,800 --> 01:53:13,679
already some

2766
01:53:13,679 --> 01:53:15,840
labels other than

2767
01:53:15,840 --> 01:53:17,920
indicating forwarding exists lexa

2768
01:53:17,920 --> 01:53:19,840
entrophy label

2769
01:53:19,840 --> 01:53:21,119
but

2770
01:53:21,119 --> 01:53:24,480
that's a history before we have any

2771
01:53:24,480 --> 01:53:27,679
other means to support those functions

2772
01:53:27,679 --> 01:53:31,679
um but now uh if we uh start to consider

2773
01:53:31,679 --> 01:53:34,639
uniform mechanics to do that uh shall we

2774
01:53:34,639 --> 01:53:37,599
continue to tamper the um

2775
01:53:37,599 --> 01:53:40,960
label stack uh to make the you know the

2776
01:53:40,960 --> 01:53:43,280
the stack look um

2777
01:53:43,280 --> 01:53:45,199
it might be used to look messy and also

2778
01:53:45,199 --> 01:53:48,560
makes a pasta really complex

2779
01:53:48,560 --> 01:53:50,800
and

2780
01:53:52,080 --> 01:53:57,760
also um i think uh um

2781
01:53:58,800 --> 01:53:59,920
uh

2782
01:53:59,920 --> 01:54:02,800
okay so so first let's just say this um

2783
01:54:02,800 --> 01:54:06,320
um uh these issues i said i think uh we

2784
01:54:06,320 --> 01:54:08,320
should have a clear understanding of

2785
01:54:08,320 --> 01:54:11,199
that and the detailed analysis to decide

2786
01:54:11,199 --> 01:54:15,199
whether or not we want to go this path

2787
01:54:17,520 --> 01:54:19,679
yes karite i think

2788
01:54:19,679 --> 01:54:22,560
yes thank you i just want to respond to

2789
01:54:22,560 --> 01:54:24,800
vim and i think there have been some

2790
01:54:24,800 --> 01:54:26,800
other comments along these lines before

2791
01:54:26,800 --> 01:54:27,599
that

2792
01:54:27,599 --> 01:54:30,239
eight is plenty and that's what we said

2793
01:54:30,239 --> 01:54:32,719
about the special purpose label so 16 is

2794
01:54:32,719 --> 01:54:35,360
plenty we defined i think at the time

2795
01:54:35,360 --> 01:54:38,239
3031 came out we defined

2796
01:54:38,239 --> 01:54:40,639
three or four of them

2797
01:54:40,639 --> 01:54:43,760
right now we have in flight

2798
01:54:43,760 --> 01:54:45,679
five or six

2799
01:54:45,679 --> 01:54:48,080
requests for special purpose labels

2800
01:54:48,080 --> 01:54:50,880
before we started this work on the fai

2801
01:54:50,880 --> 01:54:53,520
um forwarding actions indicator

2802
01:54:53,520 --> 01:54:54,800
so

2803
01:54:54,800 --> 01:54:58,239
anytime you put a limit on things

2804
01:54:58,239 --> 01:55:00,639
you don't want to go overboard you don't

2805
01:55:00,639 --> 01:55:04,080
want so much processing in the packet

2806
01:55:04,080 --> 01:55:06,480
that you can't actually forward things

2807
01:55:06,480 --> 01:55:07,679
anymore

2808
01:55:07,679 --> 01:55:10,320
at the same time i think we have to plan

2809
01:55:10,320 --> 01:55:12,239
for extensibility

2810
01:55:12,239 --> 01:55:14,960
so the fai

2811
01:55:14,960 --> 01:55:16,960
proposal

2812
01:55:16,960 --> 01:55:19,199
has in the first lse

2813
01:55:19,199 --> 01:55:21,760
potentially up to 11 bits that you can

2814
01:55:21,760 --> 01:55:23,040
use for

2815
01:55:23,040 --> 01:55:26,560
um a function or action indicators but

2816
01:55:26,560 --> 01:55:28,719
we might take away some of those it has

2817
01:55:28,719 --> 01:55:29,840
a second

2818
01:55:29,840 --> 01:55:33,920
lse that can have up to 30 bits

2819
01:55:33,920 --> 01:55:36,719
i think we need that we've already

2820
01:55:36,719 --> 01:55:38,159
we defined

2821
01:55:38,159 --> 01:55:40,560
extended special purpose labels and we

2822
01:55:40,560 --> 01:55:42,480
have a few that you know have been

2823
01:55:42,480 --> 01:55:43,920
allocated

2824
01:55:43,920 --> 01:55:46,960
um anytime we think that we're

2825
01:55:46,960 --> 01:55:49,199
you know we we get comfortable

2826
01:55:49,199 --> 01:55:51,280
um we're gonna find that we've done

2827
01:55:51,280 --> 01:55:53,679
ourselves an injustice

2828
01:55:53,679 --> 01:55:54,960
thank you

2829
01:55:54,960 --> 01:55:56,719
greet you running out of time sorry uh

2830
01:55:56,719 --> 01:55:59,280
is she next can i quickly respond i said

2831
01:55:59,280 --> 01:56:01,280
eight as a start i'm not saying this is

2832
01:56:01,280 --> 01:56:05,040
the end i said eight as a start

2833
01:56:08,960 --> 01:56:10,159
yeah i think

2834
01:56:10,159 --> 01:56:13,400
in a requirement

2835
01:56:19,840 --> 01:56:21,760
it is important to

2836
01:56:21,760 --> 01:56:23,760
maintain the backward compatibility and

2837
01:56:23,760 --> 01:56:26,840
the efficiency of the mpr's

2838
01:56:26,840 --> 01:56:28,800
architecture and

2839
01:56:28,800 --> 01:56:30,560
now we also want to introduce some

2840
01:56:30,560 --> 01:56:33,199
flexibility to the mprs

2841
01:56:33,199 --> 01:56:35,679
forwarding so i think

2842
01:56:35,679 --> 01:56:37,760
based on some analysis and discussion in

2843
01:56:37,760 --> 01:56:41,360
the design team we have shown that it is

2844
01:56:41,360 --> 01:56:44,400
maybe very challenging if we want to

2845
01:56:44,400 --> 01:56:45,360
make

2846
01:56:45,360 --> 01:56:47,840
further changes to the label format and

2847
01:56:47,840 --> 01:56:50,080
to the processing of the label

2848
01:56:50,080 --> 01:56:53,520
uh pop on label swap

2849
01:56:53,520 --> 01:56:54,639
so this is

2850
01:56:54,639 --> 01:56:57,119
really something we need to consider we

2851
01:56:57,119 --> 01:56:59,199
need to be very careful about any

2852
01:56:59,199 --> 01:57:01,280
changes to the label stack

2853
01:57:01,280 --> 01:57:03,360
and i think how you mentioned that there

2854
01:57:03,360 --> 01:57:04,560
are some

2855
01:57:04,560 --> 01:57:07,199
analysis about the forwarding efficiency

2856
01:57:07,199 --> 01:57:09,679
and the performance i think this is also

2857
01:57:09,679 --> 01:57:13,360
useful if uh for every proposal we can

2858
01:57:13,360 --> 01:57:15,040
have some hardware

2859
01:57:15,040 --> 01:57:18,080
analysis analysis provided

2860
01:57:18,080 --> 01:57:21,199
so that way we can provide it it can be

2861
01:57:21,199 --> 01:57:22,800
introduced

2862
01:57:22,800 --> 01:57:24,719
with a backward compatibility and

2863
01:57:24,719 --> 01:57:26,239
efficiency

2864
01:57:26,239 --> 01:57:27,119
okay

2865
01:57:27,119 --> 01:57:29,440
sucks

2866
01:57:33,599 --> 01:57:35,199
very close to

2867
01:57:35,199 --> 01:57:36,400
beams right i'm looking from

2868
01:57:36,400 --> 01:57:38,719
deployability perspective

2869
01:57:38,719 --> 01:57:40,400
looking at my network i'm running

2870
01:57:40,400 --> 01:57:42,719
depending where you look three to four

2871
01:57:42,719 --> 01:57:45,599
generation of different hardware

2872
01:57:45,599 --> 01:57:48,080
software is practical it takes years to

2873
01:57:48,080 --> 01:57:50,960
deploy forget about hardware so i really

2874
01:57:50,960 --> 01:57:52,800
need to start somewhere where i can

2875
01:57:52,800 --> 01:57:55,280
deploy on today's hardware or actually

2876
01:57:55,280 --> 01:57:57,119
yesterday's hardware

2877
01:57:57,119 --> 01:57:58,400
plus

2878
01:57:58,400 --> 01:58:00,080
software to

2879
01:58:00,080 --> 01:58:02,639
propagate basic stuff like again how

2880
01:58:02,639 --> 01:58:05,199
deep can i go what's readable with all

2881
01:58:05,199 --> 01:58:06,719
the staff had been implemented last year

2882
01:58:06,719 --> 01:58:08,239
or two right

2883
01:58:08,239 --> 01:58:09,760
even in open source software if you look

2884
01:58:09,760 --> 01:58:11,679
at open source routing stuff they all

2885
01:58:11,679 --> 01:58:12,880
implemented

2886
01:58:12,880 --> 01:58:16,080
extensions to a gps and bgpls last year

2887
01:58:16,080 --> 01:58:19,520
so in order to make it deployable

2888
01:58:19,520 --> 01:58:22,400
we need to start with something that is

2889
01:58:22,400 --> 01:58:24,560
possibly already at least partially

2890
01:58:24,560 --> 01:58:27,040
supported otherwise we are talking seven

2891
01:58:27,040 --> 01:58:29,199
eight years from now the whole upgrade

2892
01:58:29,199 --> 01:58:31,360
cycle

2893
01:58:31,360 --> 01:58:34,800
i mean we are atf we are doing running

2894
01:58:34,800 --> 01:58:36,400
code and we are trying to do something

2895
01:58:36,400 --> 01:58:38,560
that's implementable right so this is

2896
01:58:38,560 --> 01:58:41,360
where we should start

2897
01:58:42,000 --> 01:58:44,480
brief is possible comment please um

2898
01:58:44,480 --> 01:58:45,679
darren because we're running into

2899
01:58:45,679 --> 01:58:48,679
overtime

2900
01:58:50,239 --> 01:58:52,080
yep the really brief comment and i'll

2901
01:58:52,080 --> 01:58:53,520
bring it up on the list

2902
01:58:53,520 --> 01:58:55,599
as well is i think with the kirti with

2903
01:58:55,599 --> 01:58:56,800
your draft

2904
01:58:56,800 --> 01:58:58,800
i think we have a problem when we go to

2905
01:58:58,800 --> 01:59:01,840
bottom of stack data and

2906
01:59:01,840 --> 01:59:03,679
additional control words exist after the

2907
01:59:03,679 --> 01:59:05,280
bottom of stack

2908
01:59:05,280 --> 01:59:06,880
i'm interested to see how we solve that

2909
01:59:06,880 --> 01:59:08,400
problem so i'll bring it up online

2910
01:59:08,400 --> 01:59:10,719
thanks

2911
01:59:11,040 --> 01:59:15,400
that far same please be brief

2912
01:59:18,159 --> 01:59:21,760
uh so i agree with what vim mentioned so

2913
01:59:21,760 --> 01:59:23,760
i'd like to explore her comment i think

2914
01:59:23,760 --> 01:59:26,239
uh bruno's draft provides a very good

2915
01:59:26,239 --> 01:59:28,719
start for the working group uh working

2916
01:59:28,719 --> 01:59:30,960
we should start it uh for this world

2917
01:59:30,960 --> 01:59:34,159
eight bit support is it provides uh good

2918
01:59:34,159 --> 01:59:36,400
enough uh for for uh the initial use

2919
01:59:36,400 --> 01:59:40,400
cases um and then uh the draft also does

2920
01:59:40,400 --> 01:59:42,239
not require any extensions meaning

2921
01:59:42,239 --> 01:59:44,560
extension is that backward compatible so

2922
01:59:44,560 --> 01:59:47,280
it's uh is in my opinion very good start

2923
01:59:47,280 --> 01:59:48,880
the other point is that

2924
01:59:48,880 --> 01:59:51,760
before working group adopt any solution

2925
01:59:51,760 --> 01:59:54,880
um there has to be more discussion

2926
01:59:54,880 --> 01:59:55,679
on

2927
01:59:55,679 --> 01:59:56,800
the framework

2928
01:59:56,800 --> 02:00:00,560
stuff that lua and team started

2929
02:00:00,560 --> 02:00:02,080
some other consideration within the

2930
02:00:02,080 --> 02:00:04,080
working group

2931
02:00:04,080 --> 02:00:07,280
and this is something for a long run and

2932
02:00:07,280 --> 02:00:09,440
we should not rush into

2933
02:00:09,440 --> 02:00:11,679
a one particular solution um at the

2934
02:00:11,679 --> 02:00:14,719
moment we need a little bit more better

2935
02:00:14,719 --> 02:00:16,960
to start the work uh in the right

2936
02:00:16,960 --> 02:00:20,239
direction for the long term

2937
02:00:21,040 --> 02:00:22,560
please

2938
02:00:22,560 --> 02:00:25,440
uh jeffrey from training pro um so to

2939
02:00:25,440 --> 02:00:28,480
add a follow-up on how it's coming down

2940
02:00:28,480 --> 02:00:31,040
about the in-stack data

2941
02:00:31,040 --> 02:00:32,639
um

2942
02:00:32,639 --> 02:00:33,360
so

2943
02:00:33,360 --> 02:00:35,280
allowing instructed does not mean that

2944
02:00:35,280 --> 02:00:37,280
we would casually put anything into the

2945
02:00:37,280 --> 02:00:38,560
stack so

2946
02:00:38,560 --> 02:00:41,040
i think architecturally we should allow

2947
02:00:41,040 --> 02:00:43,199
it now and

2948
02:00:43,199 --> 02:00:45,840
in the future when any proposal comes up

2949
02:00:45,840 --> 02:00:49,040
to add uh uh specific uh

2950
02:00:49,040 --> 02:00:50,800
data into the instax for some

2951
02:00:50,800 --> 02:00:52,880
functionality at that time the working

2952
02:00:52,880 --> 02:00:55,760
group will decide whether that's a good

2953
02:00:55,760 --> 02:00:59,520
idea or not for that particular future

2954
02:01:06,719 --> 02:01:10,480
do i agree with him on jeff um

2955
02:01:10,480 --> 02:01:14,159
i don't think i said eight is plenty

2956
02:01:14,159 --> 02:01:16,800
i said i'm saying eight now is better

2957
02:01:16,800 --> 02:01:20,800
than twenty tomorrow i'm like tomorrow

2958
02:01:21,520 --> 02:01:24,800
plus all proposals are extensible

2959
02:01:24,800 --> 02:01:25,840
so we can

2960
02:01:25,840 --> 02:01:30,239
we can have eight now on 20 tomorrow

2961
02:01:31,040 --> 02:01:32,719
many networks

2962
02:01:32,719 --> 02:01:34,880
unless you have lots of money

2963
02:01:34,880 --> 02:01:36,960
are using uh multiple generations of

2964
02:01:36,960 --> 02:01:40,320
hardware next time to replace reservoirs

2965
02:01:40,320 --> 02:01:44,960
across a country or continent or world

2966
02:01:44,960 --> 02:01:47,119
and so we take credit times to have a

2967
02:01:47,119 --> 02:01:49,679
new feature supported on many many

2968
02:01:49,679 --> 02:01:50,880
platforms

2969
02:01:50,880 --> 02:01:53,360
that example with entropia

2970
02:01:53,360 --> 02:01:55,520
incredible number of times

2971
02:01:55,520 --> 02:01:56,639
europe

2972
02:01:56,639 --> 02:01:58,159
required

2973
02:01:58,159 --> 02:02:00,159
i think it's fair to say that

2974
02:02:00,159 --> 02:02:01,440
the atf

2975
02:02:01,440 --> 02:02:04,239
expands also with ipv6

2976
02:02:04,239 --> 02:02:07,760
which was not broadly available before

2977
02:02:07,760 --> 02:02:10,000
we ran out of ability for address so i

2978
02:02:10,000 --> 02:02:12,719
think deployability is important

2979
02:02:12,719 --> 02:02:16,360
in config network

2980
02:02:28,400 --> 02:02:29,840
have showed the

2981
02:02:29,840 --> 02:02:32,560
concerns i showed the section

2982
02:02:32,560 --> 02:02:33,760
from the

2983
02:02:33,760 --> 02:02:36,159
solution point of view there's no

2984
02:02:36,159 --> 02:02:38,800
consensus i do not think the working

2985
02:02:38,800 --> 02:02:41,360
group should adopt several solutions

2986
02:02:41,360 --> 02:02:43,199
with the same feature

2987
02:02:43,199 --> 02:02:45,520
and from the implementation point of

2988
02:02:45,520 --> 02:02:46,480
view

2989
02:02:46,480 --> 02:02:48,880
there are several analyses on the

2990
02:02:48,880 --> 02:02:52,000
hardware in the dt

2991
02:02:52,000 --> 02:02:55,440
you can not convince most of people and

2992
02:02:55,440 --> 02:02:59,199
cannot show any advantage and benefit i

2993
02:02:59,199 --> 02:03:00,480
don't think

2994
02:03:00,480 --> 02:03:03,759
this is a good idea

2995
02:03:04,960 --> 02:03:07,840
a brief comment

2996
02:03:10,480 --> 02:03:12,719
i believe that mpls working group should

2997
02:03:12,719 --> 02:03:16,480
consider adopting draft bruno for a

2998
02:03:16,480 --> 02:03:18,400
solution that for things that can be

2999
02:03:18,400 --> 02:03:19,920
tackled with it

3000
02:03:19,920 --> 02:03:22,000
you know today or sooner

3001
02:03:22,000 --> 02:03:24,480
and in the in parallel the design team

3002
02:03:24,480 --> 02:03:26,400
can continue working on the more

3003
02:03:26,400 --> 02:03:28,639
elaborate framework

3004
02:03:28,639 --> 02:03:30,000
and the analysis

3005
02:03:30,000 --> 02:03:32,880
but i think it would not be good to

3006
02:03:32,880 --> 02:03:33,679
get

3007
02:03:33,679 --> 02:03:37,280
that proposal adoption on

3008
02:03:37,280 --> 02:03:41,320
for the draft bruno adoption

3009
02:03:43,119 --> 02:03:45,040
possible comment kariti and then it

3010
02:03:45,040 --> 02:03:46,400
really is the end

3011
02:03:46,400 --> 02:03:48,159
yeah this is really really quick before

3012
02:03:48,159 --> 02:03:51,440
you take any decisions on draft bruno or

3013
02:03:51,440 --> 02:03:54,079
the other draft that says reuse the

3014
02:03:54,079 --> 02:03:55,440
entropy label

3015
02:03:55,440 --> 02:03:58,960
please attend uh the talk in mpls

3016
02:03:58,960 --> 02:04:01,760
on you know by steward and tony

3017
02:04:01,760 --> 02:04:05,040
uh and someone else um on the dangers of

3018
02:04:05,040 --> 02:04:09,199
reusing or repurposing an existing spl

3019
02:04:09,199 --> 02:04:10,960
thank you

3020
02:04:10,960 --> 02:04:12,079
all right well thank you everyone i'm

3021
02:04:12,079 --> 02:04:15,199
sorry i've cut a few people off um

3022
02:04:15,199 --> 02:04:17,599
i'll see you in the mpls or i'll see you

3023
02:04:17,599 --> 02:04:20,000
on the odt meetings so thank you all

3024
02:04:20,000 --> 02:04:24,440
that's the uh we're close for today

3025
02:04:33,510 --> 02:04:37,060
[Music]

3026
02:04:45,280 --> 02:04:47,119
go close this for me or do i need to do

3027
02:04:47,119 --> 02:04:50,119
something

3028
02:04:56,560 --> 02:04:58,639
you

