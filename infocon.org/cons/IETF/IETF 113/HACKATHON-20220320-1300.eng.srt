1
00:00:05,200 --> 00:00:08,440
thank you

2
00:00:18,000 --> 00:00:21,000
oh

3
00:00:40,719 --> 00:00:44,440
but you do have to

4
00:00:45,600 --> 00:00:48,600
okay

5
00:01:01,120 --> 00:01:04,120
so

6
00:01:13,570 --> 00:01:16,699
[Music]

7
00:01:21,680 --> 00:01:24,869
[Music]

8
00:01:28,320 --> 00:01:31,320
oh

9
00:02:20,080 --> 00:02:23,080
is

10
00:02:35,200 --> 00:02:38,200
yes

11
00:02:54,959 --> 00:02:57,959
yes

12
00:03:17,760 --> 00:03:20,760
sweating

13
00:03:48,040 --> 00:03:51,090
[Music]

14
00:03:51,280 --> 00:03:54,280
oh

15
00:03:58,310 --> 00:04:01,379
[Music]

16
00:04:05,120 --> 00:04:08,120
uh

17
00:04:10,980 --> 00:04:14,030
[Music]

18
00:04:26,560 --> 00:04:29,800
me too

19
00:04:29,919 --> 00:04:32,919
yes

20
00:04:38,520 --> 00:04:41,599
[Music]

21
00:04:58,090 --> 00:05:01,260
[Music]

22
00:05:09,440 --> 00:05:12,479
okay hey everyone

23
00:05:12,479 --> 00:05:14,479
it's uh

24
00:05:14,479 --> 00:05:15,919
it's the moment you've all been waiting

25
00:05:15,919 --> 00:05:18,080
for

26
00:05:18,080 --> 00:05:20,520
so time for the uh the project

27
00:05:20,520 --> 00:05:24,160
presentations um

28
00:05:24,160 --> 00:05:27,919
so um if you were able to upload your

29
00:05:27,919 --> 00:05:30,560
presentation into github it it should

30
00:05:30,560 --> 00:05:33,600
have been pulled into by two o'clock

31
00:05:33,600 --> 00:05:36,240
all of those got pulled into miteco

32
00:05:36,240 --> 00:05:39,840
now if it's an html file um

33
00:05:39,840 --> 00:05:41,680
you won't be able to present it as

34
00:05:41,680 --> 00:05:43,680
uploaded slides you'll just have to

35
00:05:43,680 --> 00:05:45,919
share it from your laptop like you

36
00:05:45,919 --> 00:05:47,199
normally would

37
00:05:47,199 --> 00:05:49,360
if it's a powerpoint i'm actually not

38
00:05:49,360 --> 00:05:52,080
sure how that'll work if it's a pdf then

39
00:05:52,080 --> 00:05:53,440
you should be able to drive it from

40
00:05:53,440 --> 00:05:55,919
within me techo as i am here

41
00:05:55,919 --> 00:05:57,520
but in any case we should be able to

42
00:05:57,520 --> 00:05:59,759
share all the presentations using some

43
00:05:59,759 --> 00:06:01,759
of the functionality we have

44
00:06:01,759 --> 00:06:03,600
and uh you know we'll work with you to

45
00:06:03,600 --> 00:06:05,919
get you set up but the idea is make sure

46
00:06:05,919 --> 00:06:07,840
you're logged in to me techo if you're

47
00:06:07,840 --> 00:06:09,520
going to be presenting

48
00:06:09,520 --> 00:06:12,160
and when you present you'll just be

49
00:06:12,160 --> 00:06:14,080
sharing from basically your laptop and

50
00:06:14,080 --> 00:06:16,000
driving from your laptop so bring it up

51
00:06:16,000 --> 00:06:18,319
you can stick it here

52
00:06:18,319 --> 00:06:20,880
keep your camera off keep your

53
00:06:20,880 --> 00:06:23,520
uh your audio off this will be your

54
00:06:23,520 --> 00:06:26,000
microphone there's your camera so that

55
00:06:26,000 --> 00:06:27,360
you don't need to use those from your

56
00:06:27,360 --> 00:06:29,440
laptop

57
00:06:29,440 --> 00:06:31,600
hopefully that all makes sense we're

58
00:06:31,600 --> 00:06:33,680
we're going to learn as we go along and

59
00:06:33,680 --> 00:06:36,639
have some fun with it

60
00:06:36,639 --> 00:06:38,880
we do have i believe plenty of time for

61
00:06:38,880 --> 00:06:41,440
all the presentations we still ask that

62
00:06:41,440 --> 00:06:43,520
you keep them to no more than five

63
00:06:43,520 --> 00:06:44,720
minutes

64
00:06:44,720 --> 00:06:46,560
uh just so that we were able to get

65
00:06:46,560 --> 00:06:48,639
through them

66
00:06:48,639 --> 00:06:50,800
i just have a few slides we covered the

67
00:06:50,800 --> 00:06:54,080
notewell yesterday that still applies

68
00:06:54,080 --> 00:06:55,759
that's where we're at

69
00:06:55,759 --> 00:06:57,280
i was just telling you about the five

70
00:06:57,280 --> 00:06:59,679
minutes

71
00:07:00,160 --> 00:07:02,479
and i think we covered that too

72
00:07:02,479 --> 00:07:04,000
and

73
00:07:04,000 --> 00:07:05,919
here's something uh if you're just

74
00:07:05,919 --> 00:07:07,520
logging into the me techo and you're

75
00:07:07,520 --> 00:07:09,759
trying to find out how to do it if you

76
00:07:09,759 --> 00:07:12,240
go to the agenda

77
00:07:12,240 --> 00:07:14,319
you should see a little

78
00:07:14,319 --> 00:07:16,960
a little camera icon there if you click

79
00:07:16,960 --> 00:07:19,039
on the camera icon that'll bring you

80
00:07:19,039 --> 00:07:23,199
into the uh the meet techo session

81
00:07:24,720 --> 00:07:26,960
once you're in meeteco there's two

82
00:07:26,960 --> 00:07:29,280
different ways to share

83
00:07:29,280 --> 00:07:31,440
the one is to share using pre-loaded

84
00:07:31,440 --> 00:07:33,759
slides and that functionality is really

85
00:07:33,759 --> 00:07:37,280
slick and if you happen to have a pdf

86
00:07:37,280 --> 00:07:40,080
that you uploaded into github before

87
00:07:40,080 --> 00:07:42,880
you'll be able to make use of that

88
00:07:42,880 --> 00:07:45,919
and if not you'll have to just request a

89
00:07:45,919 --> 00:07:47,599
share screen

90
00:07:47,599 --> 00:07:49,840
the way to do that is using these two

91
00:07:49,840 --> 00:07:52,000
icons the one on the left

92
00:07:52,000 --> 00:07:54,319
is to share pre-loaded slides the one on

93
00:07:54,319 --> 00:07:56,720
the right is to share your screen

94
00:07:56,720 --> 00:07:59,440
so depending on which functionality you

95
00:07:59,440 --> 00:08:01,280
need to use to share your presentation

96
00:08:01,280 --> 00:08:03,360
you can choose one or the other

97
00:08:03,360 --> 00:08:05,599
in some cases the preloaded slides will

98
00:08:05,599 --> 00:08:08,000
work in all cases if you're just more

99
00:08:08,000 --> 00:08:09,680
comfortable sharing from your screen you

100
00:08:09,680 --> 00:08:11,280
can always do that

101
00:08:11,280 --> 00:08:13,840
but again just request to share when

102
00:08:13,840 --> 00:08:16,000
it's your turn to present come up with

103
00:08:16,000 --> 00:08:19,759
your laptop and you'll present from here

104
00:08:20,240 --> 00:08:22,960
any questions

105
00:08:23,840 --> 00:08:25,599
okay

106
00:08:25,599 --> 00:08:27,840
great

107
00:08:28,560 --> 00:08:30,720
so

108
00:08:30,720 --> 00:08:33,360
now all we need to do is

109
00:08:33,360 --> 00:08:37,039
work through the presentation so

110
00:08:38,799 --> 00:08:40,719
what i'm going to do and i don't quite

111
00:08:40,719 --> 00:08:43,440
know how to prepare for this otherwise

112
00:08:43,440 --> 00:08:44,959
is i'm just going to start at the top

113
00:08:44,959 --> 00:08:48,320
and work through so the first one i see

114
00:08:48,320 --> 00:08:51,440
is dance

115
00:08:51,440 --> 00:08:53,839
is whoever is from here it looks like it

116
00:08:53,839 --> 00:08:57,040
could be a remote presentation

117
00:08:57,040 --> 00:08:58,959
over here okay perfect

118
00:08:58,959 --> 00:09:01,279
great

119
00:09:01,279 --> 00:09:03,279
so you can just share that as pre-loaded

120
00:09:03,279 --> 00:09:04,800
slides if you want do you have it in

121
00:09:04,800 --> 00:09:08,519
your laptop already

122
00:09:10,240 --> 00:09:12,480
so

123
00:09:12,720 --> 00:09:15,600
let's try this

124
00:09:15,600 --> 00:09:18,959
i can share from here

125
00:09:20,480 --> 00:09:22,480
and now i might need to drive the slides

126
00:09:22,480 --> 00:09:24,240
for you i don't know but come on up

127
00:09:24,240 --> 00:09:27,120
we'll see how it works

128
00:09:28,480 --> 00:09:30,800
okay

129
00:09:31,040 --> 00:09:33,760
let's make this big

130
00:09:33,760 --> 00:09:35,920
okay give that a try here let me take

131
00:09:35,920 --> 00:09:38,240
this off

132
00:09:38,240 --> 00:09:39,440
and you can just

133
00:09:39,440 --> 00:09:40,959
advance

134
00:09:40,959 --> 00:09:43,279
that works that works

135
00:09:43,279 --> 00:09:45,920
so hello everyone uh i'm going to

136
00:09:45,920 --> 00:09:47,680
quickly present you the work we've done

137
00:09:47,680 --> 00:09:49,760
on dance

138
00:09:49,760 --> 00:09:51,040
oh sorry

139
00:09:51,040 --> 00:09:53,360
oh that's better okay so i'm going to

140
00:09:53,360 --> 00:09:55,120
present the work we've done on dance so

141
00:09:55,120 --> 00:09:56,320
we've

142
00:09:56,320 --> 00:09:59,040
implemented the two drafts that are here

143
00:09:59,040 --> 00:10:01,279
so the first one is a tls extension to

144
00:10:01,279 --> 00:10:04,399
other dane client id in tls

145
00:10:04,399 --> 00:10:06,959
and the second one is to do the intent

146
00:10:06,959 --> 00:10:08,800
authentication

147
00:10:08,800 --> 00:10:11,920
so for the intent authentication

148
00:10:11,920 --> 00:10:15,360
we based on war or work on the dane uh

149
00:10:15,360 --> 00:10:17,519
the tsa authentication library that has

150
00:10:17,519 --> 00:10:18,880
been uh

151
00:10:18,880 --> 00:10:20,480
written by schumann

152
00:10:20,480 --> 00:10:22,800
so this is a go library

153
00:10:22,800 --> 00:10:25,600
and we've set up a testing environment

154
00:10:25,600 --> 00:10:26,880
to

155
00:10:26,880 --> 00:10:28,640
test client and server material

156
00:10:28,640 --> 00:10:30,560
authentication in tls

157
00:10:30,560 --> 00:10:32,399
using dance

158
00:10:32,399 --> 00:10:33,440
so

159
00:10:33,440 --> 00:10:35,120
we've um

160
00:10:35,120 --> 00:10:38,240
added the dane uh client id extension in

161
00:10:38,240 --> 00:10:41,680
tls intjs 1.2 and 1.3

162
00:10:41,680 --> 00:10:44,000
and you we also implemented the fullback

163
00:10:44,000 --> 00:10:47,600
using the uh subject alternative name

164
00:10:47,600 --> 00:10:50,560
uh when the intended id is not sent uh

165
00:10:50,560 --> 00:10:53,279
indeed in the uh extension

166
00:10:53,279 --> 00:10:55,680
and there is also a possibility to do

167
00:10:55,680 --> 00:10:58,800
authorization rules to allow a different

168
00:10:58,800 --> 00:11:01,839
connection or to deny them based on the

169
00:11:01,839 --> 00:11:04,959
uh client id and some uh

170
00:11:04,959 --> 00:11:06,399
well some mechanism that you want to

171
00:11:06,399 --> 00:11:08,320
implement

172
00:11:08,320 --> 00:11:09,600
and for the

173
00:11:09,600 --> 00:11:11,920
the intent id extension as i mentioned

174
00:11:11,920 --> 00:11:15,760
we've implemented the tls 1.2 and ts 1.3

175
00:11:15,760 --> 00:11:17,120
extensions

176
00:11:17,120 --> 00:11:21,120
in the golan tls library

177
00:11:21,279 --> 00:11:22,560
so that is

178
00:11:22,560 --> 00:11:23,920
working

179
00:11:23,920 --> 00:11:24,880
and

180
00:11:24,880 --> 00:11:26,560
to test our

181
00:11:26,560 --> 00:11:29,360
implementation we built uh

182
00:11:29,360 --> 00:11:33,040
we used the our use case uh in iot

183
00:11:33,040 --> 00:11:35,680
so uh using lower ones so

184
00:11:35,680 --> 00:11:37,839
only focusing on the ib space there is a

185
00:11:37,839 --> 00:11:39,440
bunch of peers

186
00:11:39,440 --> 00:11:42,240
that are authenticating themselves using

187
00:11:42,240 --> 00:11:43,920
visual tls

188
00:11:43,920 --> 00:11:45,040
and

189
00:11:45,040 --> 00:11:48,560
the basic uh problem that we have with a

190
00:11:48,560 --> 00:11:50,959
common uh web api

191
00:11:50,959 --> 00:11:54,480
is that we have to uh share a command ca

192
00:11:54,480 --> 00:11:56,880
and so that is uh restraining yourself

193
00:11:56,880 --> 00:12:00,720
to us the kind of silo environment

194
00:12:00,720 --> 00:12:03,920
so uh so this is the uh architecture

195
00:12:03,920 --> 00:12:05,839
that we had before with a single root ca

196
00:12:05,839 --> 00:12:08,160
that is shared among all the peers

197
00:12:08,160 --> 00:12:12,320
and this is what we have now um so

198
00:12:12,320 --> 00:12:14,480
we are basically authenticating all

199
00:12:14,480 --> 00:12:17,680
peers using dance so then and with uh

200
00:12:17,680 --> 00:12:19,200
the client id

201
00:12:19,200 --> 00:12:20,560
extension

202
00:12:20,560 --> 00:12:23,200
uh so that's that and that is working

203
00:12:23,200 --> 00:12:24,800
well so

204
00:12:24,800 --> 00:12:26,800
we're kind of happy of that about that

205
00:12:26,800 --> 00:12:28,079
thank you

206
00:12:28,079 --> 00:12:29,920
if you have any question i'll be uh

207
00:12:29,920 --> 00:12:32,639
right there or whatever

208
00:12:32,639 --> 00:12:34,530
thanks

209
00:12:34,530 --> 00:12:40,240
[Applause]

210
00:12:40,240 --> 00:12:42,560
okay

211
00:12:49,440 --> 00:12:53,519
so the next one is g-nap

212
00:12:53,680 --> 00:12:55,920
okay

213
00:12:59,680 --> 00:13:01,440
or is it gnat

214
00:13:01,440 --> 00:13:05,360
yes it's one of okay or or it could be

215
00:13:05,360 --> 00:13:07,839
other things

216
00:13:08,399 --> 00:13:11,519
all right hi everybody i'm justin richer

217
00:13:11,519 --> 00:13:13,040
aaron pirecki

218
00:13:13,040 --> 00:13:14,480
and um

219
00:13:14,480 --> 00:13:16,079
we've only got like what 28 slides so

220
00:13:16,079 --> 00:13:17,279
this would be quick

221
00:13:17,279 --> 00:13:18,399
um

222
00:13:18,399 --> 00:13:19,920
all right so gnapp is a delegation

223
00:13:19,920 --> 00:13:22,240
protocol a lot like uh oauth and in fact

224
00:13:22,240 --> 00:13:23,519
it's based on

225
00:13:23,519 --> 00:13:25,600
uh a lot of the things that uh we've

226
00:13:25,600 --> 00:13:27,680
learned about uh over the last decade of

227
00:13:27,680 --> 00:13:29,600
deploying oauth in lots of different uh

228
00:13:29,600 --> 00:13:31,600
circumstances and situations

229
00:13:31,600 --> 00:13:34,079
and uh trying to kind of do that type of

230
00:13:34,079 --> 00:13:35,519
protocol

231
00:13:35,519 --> 00:13:38,079
newer and better

232
00:13:38,079 --> 00:13:39,519
we'll get into the details of exactly

233
00:13:39,519 --> 00:13:42,399
what it is it's an ongoing working group

234
00:13:42,399 --> 00:13:44,160
our focus for this hackathon was to

235
00:13:44,160 --> 00:13:46,000
build stuff we wanted to make sure that

236
00:13:46,000 --> 00:13:48,480
we had the ability to protect requests

237
00:13:48,480 --> 00:13:51,279
with http signatures and validate those

238
00:13:51,279 --> 00:13:52,480
requests

239
00:13:52,480 --> 00:13:54,480
inside the gnat protocol

240
00:13:54,480 --> 00:13:56,639
we wanted to be able to get tokens from

241
00:13:56,639 --> 00:13:59,120
those requests usable tokens and make

242
00:13:59,120 --> 00:14:00,880
sure that we could actually

243
00:14:00,880 --> 00:14:02,800
launch off different kinds of user

244
00:14:02,800 --> 00:14:04,399
interaction

245
00:14:04,399 --> 00:14:05,920
because the whole point of a delegation

246
00:14:05,920 --> 00:14:08,160
protocol is letting a user delegate some

247
00:14:08,160 --> 00:14:09,360
set of rights that they have to a piece

248
00:14:09,360 --> 00:14:10,480
of software

249
00:14:10,480 --> 00:14:14,800
all right we built a bunch of new code

250
00:14:14,800 --> 00:14:17,519
we now have uh four different

251
00:14:17,519 --> 00:14:20,240
uh functional clients systems on

252
00:14:20,240 --> 00:14:22,880
different platforms uh php on both cli

253
00:14:22,880 --> 00:14:23,839
and web

254
00:14:23,839 --> 00:14:24,720
um

255
00:14:24,720 --> 00:14:26,720
we built an spa client completely in

256
00:14:26,720 --> 00:14:28,000
javascript

257
00:14:28,000 --> 00:14:31,760
and um we had we made significant

258
00:14:31,760 --> 00:14:33,440
updates to some existing code that we

259
00:14:33,440 --> 00:14:36,560
had for a java based web client and the

260
00:14:36,560 --> 00:14:38,480
java authorization server

261
00:14:38,480 --> 00:14:41,040
uh we leveraged as much uh existing code

262
00:14:41,040 --> 00:14:43,279
as we could uh especially for supporting

263
00:14:43,279 --> 00:14:44,800
standards like http signatures

264
00:14:44,800 --> 00:14:46,320
structured fields

265
00:14:46,320 --> 00:14:48,560
um and of course uh native crypto

266
00:14:48,560 --> 00:14:49,839
primitives we weren't writing our own

267
00:14:49,839 --> 00:14:51,360
crypto libraries to make all this stuff

268
00:14:51,360 --> 00:14:54,639
work um and we've got a list of uh the

269
00:14:54,639 --> 00:14:56,320
stuff that we used and other things that

270
00:14:56,320 --> 00:14:58,399
are available that we collected in the

271
00:14:58,399 --> 00:15:00,320
lead up to this on the working group

272
00:15:00,320 --> 00:15:02,320
wiki

273
00:15:02,320 --> 00:15:04,560
we learned that http signatures is

274
00:15:04,560 --> 00:15:07,680
pretty complex to do from scratch

275
00:15:07,680 --> 00:15:09,760
but it's the kind of protocol

276
00:15:09,760 --> 00:15:11,600
it's the kind of system that once you

277
00:15:11,600 --> 00:15:13,839
have it done in your platform in a

278
00:15:13,839 --> 00:15:15,839
library then you can sign any http

279
00:15:15,839 --> 00:15:18,160
message so it's kind of like once you

280
00:15:18,160 --> 00:15:20,480
have a library on whatever you're

281
00:15:20,480 --> 00:15:22,800
building uh then then you're pretty much

282
00:15:22,800 --> 00:15:24,399
good to go to use it whatever we both

283
00:15:24,399 --> 00:15:26,320
saw that same kind of hump that once we

284
00:15:26,320 --> 00:15:27,839
got that piece going the rest of the

285
00:15:27,839 --> 00:15:28,800
protocol

286
00:15:28,800 --> 00:15:30,399
uh the rest of the gnat protocol

287
00:15:30,399 --> 00:15:31,759
actually kind of fell into place pretty

288
00:15:31,759 --> 00:15:33,199
easily

289
00:15:33,199 --> 00:15:34,720
we were surprised by some of the fiddly

290
00:15:34,720 --> 00:15:37,279
bits uh in terms of like parameter order

291
00:15:37,279 --> 00:15:39,120
and stuff like that which if you've

292
00:15:39,120 --> 00:15:40,880
worked with any security protocol you'd

293
00:15:40,880 --> 00:15:42,000
know that that's kind of stuff that

294
00:15:42,000 --> 00:15:43,040
happens

295
00:15:43,040 --> 00:15:46,000
and uh we found that it is actually very

296
00:15:46,000 --> 00:15:47,600
possible to implement several graph

297
00:15:47,600 --> 00:15:49,920
clients uh from scratch in relatively

298
00:15:49,920 --> 00:15:51,440
short order once you get over the humps

299
00:15:51,440 --> 00:15:52,399
of the

300
00:15:52,399 --> 00:15:54,560
basic dependencies and i learned that

301
00:15:54,560 --> 00:15:56,160
after all these years i still really

302
00:15:56,160 --> 00:15:59,120
hate javascript

303
00:16:00,000 --> 00:16:02,399
we took

304
00:16:02,720 --> 00:16:06,000
that wasn't a secret on us

305
00:16:06,880 --> 00:16:08,639
so in uh

306
00:16:08,639 --> 00:16:10,160
in the course of this we took a lot of

307
00:16:10,160 --> 00:16:11,519
notes about different ways we can

308
00:16:11,519 --> 00:16:13,279
improve the spec uh this is we wrote

309
00:16:13,279 --> 00:16:14,959
this down mostly for our own benefits so

310
00:16:14,959 --> 00:16:17,519
that we can take this back um i'm not

311
00:16:17,519 --> 00:16:19,040
gonna go through everything here but we

312
00:16:19,040 --> 00:16:20,639
found a lot of places where like oh this

313
00:16:20,639 --> 00:16:22,160
is a little ambiguous or aaron

314
00:16:22,160 --> 00:16:24,000
implemented something in some way that

315
00:16:24,000 --> 00:16:25,680
was different from how i did it the kind

316
00:16:25,680 --> 00:16:27,360
of stuff that a hackathon is supposed to

317
00:16:27,360 --> 00:16:28,720
really give you

318
00:16:28,720 --> 00:16:29,600
um

319
00:16:29,600 --> 00:16:32,639
and we now have a canned set of demos

320
00:16:32,639 --> 00:16:35,680
for all the stuff that we did

321
00:16:35,680 --> 00:16:39,680
so this is the web-based java client uh

322
00:16:39,680 --> 00:16:41,519
a bunch of different configuration

323
00:16:41,519 --> 00:16:43,519
parameters for using the app protocol

324
00:16:43,519 --> 00:16:45,680
and all the signature stuff

325
00:16:45,680 --> 00:16:49,279
um that creates a pending grant request

326
00:16:49,279 --> 00:16:50,480
which you can then approve at the

327
00:16:50,480 --> 00:16:52,480
authorization server these are two

328
00:16:52,480 --> 00:16:54,079
different pieces of software talking to

329
00:16:54,079 --> 00:16:56,079
each other like most security protocols

330
00:16:56,079 --> 00:16:57,519
it's really boring when it works because

331
00:16:57,519 --> 00:16:59,279
stuff just happens and it works but

332
00:16:59,279 --> 00:17:00,720
there's a lot of stuff going on in the

333
00:17:00,720 --> 00:17:03,360
background here i promise um so this is

334
00:17:03,360 --> 00:17:05,599
this was our debug console uh showing

335
00:17:05,599 --> 00:17:07,359
some of the messages

336
00:17:07,359 --> 00:17:09,359
we also had like i said an sba client

337
00:17:09,359 --> 00:17:10,880
that we uh wrote pretty much from

338
00:17:10,880 --> 00:17:13,359
scratch uh during this weekend this is

339
00:17:13,359 --> 00:17:15,119
entirely in browser even the key

340
00:17:15,119 --> 00:17:18,079
generation is using web crypto api um so

341
00:17:18,079 --> 00:17:20,480
this all runs completely in browser same

342
00:17:20,480 --> 00:17:21,280
kind of

343
00:17:21,280 --> 00:17:23,119
thing goes back to the same server and

344
00:17:23,119 --> 00:17:25,039
gets back the same set of information

345
00:17:25,039 --> 00:17:26,240
and this is a hackathon not a

346
00:17:26,240 --> 00:17:28,160
production-a-thon so that css is all

347
00:17:28,160 --> 00:17:30,840
screwed up uh ignore

348
00:17:30,840 --> 00:17:33,840
that i was working on the php side of

349
00:17:33,840 --> 00:17:36,240
things so i have a both a web server

350
00:17:36,240 --> 00:17:38,720
based on command line i did not use css

351
00:17:38,720 --> 00:17:41,200
this is just html in the browser

352
00:17:41,200 --> 00:17:43,280
you know you go you click log in it's

353
00:17:43,280 --> 00:17:45,520
it's uh showing you the response it gets

354
00:17:45,520 --> 00:17:46,640
as i was

355
00:17:46,640 --> 00:17:48,240
debugging this

356
00:17:48,240 --> 00:17:49,840
go approve the request of the

357
00:17:49,840 --> 00:17:52,080
authorization server get bounced back

358
00:17:52,080 --> 00:17:54,160
and surprise surprise you are signed in

359
00:17:54,160 --> 00:17:56,000
because you have an access token

360
00:17:56,000 --> 00:17:56,960
um

361
00:17:56,960 --> 00:17:57,679
the

362
00:17:57,679 --> 00:17:58,880
on the command line looks a little bit

363
00:17:58,880 --> 00:18:00,799
different you start the request on the

364
00:18:00,799 --> 00:18:02,799
command line you can open a url in your

365
00:18:02,799 --> 00:18:05,200
browser or scan a qr code on your phone

366
00:18:05,200 --> 00:18:07,440
which then opens up that now familiar

367
00:18:07,440 --> 00:18:09,120
looking authorization server approval

368
00:18:09,120 --> 00:18:10,080
screen

369
00:18:10,080 --> 00:18:11,600
which since you're now on two different

370
00:18:11,600 --> 00:18:14,000
devices the phone is just like go back

371
00:18:14,000 --> 00:18:15,600
to the command line and finish there in

372
00:18:15,600 --> 00:18:17,760
the meantime it's been pulling

373
00:18:17,760 --> 00:18:18,640
and then

374
00:18:18,640 --> 00:18:21,120
gets the access token after it's done

375
00:18:21,120 --> 00:18:22,160
so

376
00:18:22,160 --> 00:18:24,880
it's like justin said pretty boring when

377
00:18:24,880 --> 00:18:26,400
it works but

378
00:18:26,400 --> 00:18:28,080
all the fun we had was when things were

379
00:18:28,080 --> 00:18:29,600
not working so

380
00:18:29,600 --> 00:18:31,520
uh yeah that's it

381
00:18:31,520 --> 00:18:34,860
all right thank you very much thank you

382
00:18:34,860 --> 00:18:40,080
[Applause]

383
00:18:40,080 --> 00:18:43,240
all right

384
00:18:43,440 --> 00:18:45,840
okay

385
00:18:54,160 --> 00:18:56,880
so the next one i have here is http

386
00:18:56,880 --> 00:18:59,679
transport off

387
00:18:59,679 --> 00:19:00,640
okay

388
00:19:00,640 --> 00:19:03,039
great

389
00:19:04,720 --> 00:19:06,320
sure

390
00:19:06,320 --> 00:19:08,400
and help let me make a full screen here

391
00:19:08,400 --> 00:19:10,559
just left and right huh yeah

392
00:19:10,559 --> 00:19:12,640
yep it seems to be working all right

393
00:19:12,640 --> 00:19:14,240
very good i'm david oliver this is uh

394
00:19:14,240 --> 00:19:16,000
hans christoph steiner over here we're

395
00:19:16,000 --> 00:19:17,840
with the guardian project we do

396
00:19:17,840 --> 00:19:19,840
civil society work

397
00:19:19,840 --> 00:19:22,880
and for this project we hear we

398
00:19:22,880 --> 00:19:25,200
dusted off initial implementation of

399
00:19:25,200 --> 00:19:29,039
http transport off the draft ideas here

400
00:19:29,039 --> 00:19:30,960
and uh unfortunately we had a student

401
00:19:30,960 --> 00:19:32,799
work on this during the coveted time who

402
00:19:32,799 --> 00:19:33,919
had some

403
00:19:33,919 --> 00:19:35,679
real personal challenges being apart

404
00:19:35,679 --> 00:19:37,280
from his family etc so this

405
00:19:37,280 --> 00:19:39,039
unfortunately went dormant for a while

406
00:19:39,039 --> 00:19:41,120
we decided to pick it up and and get it

407
00:19:41,120 --> 00:19:43,280
working in conscript so we could over we

408
00:19:43,280 --> 00:19:45,120
could open source it and document it for

409
00:19:45,120 --> 00:19:47,678
for the public

410
00:19:47,840 --> 00:19:49,520
as a reference for why we would be

411
00:19:49,520 --> 00:19:51,280
interested in doing this

412
00:19:51,280 --> 00:19:53,200
we have a case where we want to

413
00:19:53,200 --> 00:19:54,720
authenticate traffic that isn't just

414
00:19:54,720 --> 00:19:57,200
request response and so we want

415
00:19:57,200 --> 00:19:59,600
something that runs alongside normal web

416
00:19:59,600 --> 00:20:02,159
services and can authenticate a tls

417
00:20:02,159 --> 00:20:03,360
session without

418
00:20:03,360 --> 00:20:05,919
leaking information in the client hello

419
00:20:05,919 --> 00:20:08,400
so this is a a

420
00:20:08,400 --> 00:20:10,159
technique for pulling information out of

421
00:20:10,159 --> 00:20:12,159
the tls connection common to the client

422
00:20:12,159 --> 00:20:13,360
and the server

423
00:20:13,360 --> 00:20:16,320
and using that to encrypt uh

424
00:20:16,320 --> 00:20:18,240
credentials in a way that flows with the

425
00:20:18,240 --> 00:20:22,640
http connect flow on success you get ht

426
00:20:22,640 --> 00:20:24,640
200 connection established and on

427
00:20:24,640 --> 00:20:26,559
failure you get 400

428
00:20:26,559 --> 00:20:29,679
405 method not allowed

429
00:20:29,679 --> 00:20:31,360
so we were able to get this working in

430
00:20:31,360 --> 00:20:34,080
conscript quite a quite a pile of stuff

431
00:20:34,080 --> 00:20:36,880
to get working for just a very thin shim

432
00:20:36,880 --> 00:20:38,880
and uh so that was great we also mapped

433
00:20:38,880 --> 00:20:40,720
out how this could be implemented in

434
00:20:40,720 --> 00:20:42,880
python and chronet

435
00:20:42,880 --> 00:20:44,480
we aren't aware of anyone else doing

436
00:20:44,480 --> 00:20:45,840
this work so we're sort of looking for

437
00:20:45,840 --> 00:20:48,159
an inter partner we don't have a full

438
00:20:48,159 --> 00:20:50,960
proxy flow we were not trying to rebuild

439
00:20:50,960 --> 00:20:52,960
some proxy service on the server side so

440
00:20:52,960 --> 00:20:54,400
we're

441
00:20:54,400 --> 00:20:56,559
possibly waiting to get our python work

442
00:20:56,559 --> 00:20:58,960
done before we start doing that

443
00:20:58,960 --> 00:21:00,840
the github repo is

444
00:21:00,840 --> 00:21:02,799
here uh

445
00:21:02,799 --> 00:21:05,200
we were curious about this uh keying

446
00:21:05,200 --> 00:21:08,559
materials export function in in the tls

447
00:21:08,559 --> 00:21:11,120
layer and we did discover that the

448
00:21:11,120 --> 00:21:12,960
languages that implement openssl or

449
00:21:12,960 --> 00:21:16,240
boring ssl generally make this available

450
00:21:16,240 --> 00:21:19,440
python currently only gets it via pi

451
00:21:19,440 --> 00:21:22,000
openssl a secondary library rather than

452
00:21:22,000 --> 00:21:24,000
native but there's an open issue for the

453
00:21:24,000 --> 00:21:26,240
language go

454
00:21:26,240 --> 00:21:27,760
exports a function for this rust

455
00:21:27,760 --> 00:21:29,600
microsoft and mozilla

456
00:21:29,600 --> 00:21:32,640
so we felt really good about places

457
00:21:32,640 --> 00:21:33,520
other

458
00:21:33,520 --> 00:21:35,520
methods other language systems we could

459
00:21:35,520 --> 00:21:37,280
use to implement a

460
00:21:37,280 --> 00:21:39,679
function here

461
00:21:39,679 --> 00:21:41,120
so here we are

462
00:21:41,120 --> 00:21:43,280
david and hans from guardian project

463
00:21:43,280 --> 00:21:45,679
there's our url and

464
00:21:45,679 --> 00:21:49,039
pointer to the draft and our repo

465
00:21:49,039 --> 00:21:51,440
that's it

466
00:21:53,840 --> 00:21:56,918
all right

467
00:22:01,919 --> 00:22:04,159
okay

468
00:22:05,520 --> 00:22:08,559
i kind of forgot that we usually

469
00:22:08,559 --> 00:22:11,840
let people ask questions too which um i

470
00:22:11,840 --> 00:22:13,600
guess we could we could try to do as

471
00:22:13,600 --> 00:22:15,600
well although i don't know if the muteco

472
00:22:15,600 --> 00:22:17,679
light client is available

473
00:22:17,679 --> 00:22:19,679
so for people in the room if you have a

474
00:22:19,679 --> 00:22:21,919
question maybe just raise your hand

475
00:22:21,919 --> 00:22:24,400
uh people online if you throw something

476
00:22:24,400 --> 00:22:26,880
into the chat we can

477
00:22:26,880 --> 00:22:28,799
transfer we can you know

478
00:22:28,799 --> 00:22:32,000
have you ask questions that way

479
00:22:32,000 --> 00:22:34,960
the next one is i2nsf

480
00:22:34,960 --> 00:22:40,039
which i know the presenter is remote

481
00:22:42,559 --> 00:22:44,880
hello charles can you hear me

482
00:22:44,880 --> 00:22:48,159
uh yeah sure i can do you want to

483
00:22:48,159 --> 00:22:50,159
let me see if i can

484
00:22:50,159 --> 00:22:53,360
let you uh drive the screen share here

485
00:22:53,360 --> 00:22:56,640
there's a way to do that i believe

486
00:22:56,640 --> 00:22:58,320
or do you want to show the slides

487
00:22:58,320 --> 00:23:00,720
yourself

488
00:23:03,919 --> 00:23:06,000
so you can just request to share slides

489
00:23:06,000 --> 00:23:10,159
oh i see you are yeah

490
00:23:15,039 --> 00:23:17,200
okay i think i need to stop this first

491
00:23:17,200 --> 00:23:18,559
and then

492
00:23:18,559 --> 00:23:22,039
there we go

493
00:23:23,840 --> 00:23:26,799
okay can you see my screen charles

494
00:23:26,799 --> 00:23:28,159
not yet

495
00:23:28,159 --> 00:23:29,679
not yet okay

496
00:23:29,679 --> 00:23:31,840
it says it's starting just give us a

497
00:23:31,840 --> 00:23:34,840
minute

498
00:23:39,280 --> 00:23:41,600
uh

499
00:23:41,919 --> 00:23:44,960
sure did you did you select uh which

500
00:23:44,960 --> 00:23:47,279
okay application you want to share

501
00:23:47,279 --> 00:23:49,120
there you go okay

502
00:23:49,120 --> 00:23:50,799
okay here you go right

503
00:23:50,799 --> 00:23:54,559
okay let me just put you full screen

504
00:23:54,720 --> 00:23:56,799
okay you should be able to to drive it

505
00:23:56,799 --> 00:24:01,279
now yep okay so okay let me start okay

506
00:24:01,279 --> 00:24:04,600
so hello

507
00:24:11,039 --> 00:24:12,400
okay

508
00:24:12,400 --> 00:24:15,120
so okay let me start

509
00:24:15,120 --> 00:24:18,080
so this is a

510
00:24:30,240 --> 00:24:34,000
so this is the poster pro on our itunes

511
00:24:34,000 --> 00:24:36,080
project

512
00:24:36,080 --> 00:24:40,240
so basically uh our goal is to reflect

513
00:24:40,240 --> 00:24:43,440
the latest uh revision of our

514
00:24:43,440 --> 00:24:46,440
itunes

515
00:24:58,799 --> 00:25:01,360
policy into a security controller and

516
00:25:01,360 --> 00:25:04,320
the security controller translates

517
00:25:04,320 --> 00:25:06,320
receive the high level policy from

518
00:25:06,320 --> 00:25:09,840
itunes future into low-level policy

519
00:25:09,840 --> 00:25:13,840
that can be understood by

520
00:25:13,840 --> 00:25:15,919
functions such as

521
00:25:15,919 --> 00:25:18,559
time-based fiber

522
00:25:18,559 --> 00:25:22,320
and vegetator and that we can defense

523
00:25:22,320 --> 00:25:24,080
from the attack

524
00:25:24,080 --> 00:25:27,399
from outside

525
00:25:29,360 --> 00:25:32,000
so all existing interfaces

526
00:25:32,000 --> 00:25:34,159
have been implemented

527
00:25:34,159 --> 00:25:38,480
also we reflected like this version

528
00:25:38,480 --> 00:25:41,120
because our itunes working group are

529
00:25:41,120 --> 00:25:42,799
working for

530
00:25:42,799 --> 00:25:44,400
to publish

531
00:25:44,400 --> 00:25:46,240
young data models

532
00:25:46,240 --> 00:25:48,960
such as capability consumer page

533
00:25:48,960 --> 00:25:50,240
interface

534
00:25:50,240 --> 00:25:52,240
and a surface interface restoration

535
00:25:52,240 --> 00:25:54,960
interface and that's the monitoring data

536
00:25:54,960 --> 00:25:56,480
models okay

537
00:25:56,480 --> 00:25:59,440
also we introduced a new application

538
00:25:59,440 --> 00:26:01,679
interface there are models

539
00:26:01,679 --> 00:26:05,520
to give a feedback message from

540
00:26:05,520 --> 00:26:09,039
nsf monitoring data okay so

541
00:26:09,039 --> 00:26:11,600
we want to make automated feedback

542
00:26:11,600 --> 00:26:12,880
system

543
00:26:12,880 --> 00:26:16,240
for security services

544
00:26:16,880 --> 00:26:19,360
this is a screenshot for

545
00:26:19,360 --> 00:26:22,000
application interfaces okay

546
00:26:22,000 --> 00:26:25,200
so we can give a certain attack

547
00:26:25,200 --> 00:26:26,960
ip addresses

548
00:26:26,960 --> 00:26:28,240
so those

549
00:26:28,240 --> 00:26:30,000
ip addresses

550
00:26:30,000 --> 00:26:31,880
can be blocked by

551
00:26:31,880 --> 00:26:33,120
[Music]

552
00:26:33,120 --> 00:26:34,480
time-based

553
00:26:34,480 --> 00:26:37,480
fiber

554
00:26:38,640 --> 00:26:41,919
so what we learned this time

555
00:26:41,919 --> 00:26:45,520
we updated the data young model to make

556
00:26:45,520 --> 00:26:48,559
configuration less complicated and less

557
00:26:48,559 --> 00:26:50,400
confusing

558
00:26:50,400 --> 00:26:53,679
secondly a new monitoring data model

559
00:26:53,679 --> 00:26:55,600
can provide

560
00:26:55,600 --> 00:26:58,240
multiple

561
00:26:58,400 --> 00:27:01,440
the information pieces in a single

562
00:27:01,440 --> 00:27:02,799
notification

563
00:27:02,799 --> 00:27:05,360
previously we have

564
00:27:05,360 --> 00:27:08,080
separate applications so we can reduce

565
00:27:08,080 --> 00:27:10,159
the bandwidth

566
00:27:10,159 --> 00:27:11,600
lastly

567
00:27:11,600 --> 00:27:14,880
we introduced the application interface

568
00:27:14,880 --> 00:27:16,240
to enable

569
00:27:16,240 --> 00:27:18,720
automatic policy feedback

570
00:27:18,720 --> 00:27:20,720
so we can provide the

571
00:27:20,720 --> 00:27:23,200
problem information to

572
00:27:23,200 --> 00:27:26,720
security controller to help identify the

573
00:27:26,720 --> 00:27:29,200
legion of the

574
00:27:29,200 --> 00:27:31,760
security attack or system of road

575
00:27:31,760 --> 00:27:33,600
something like that

576
00:27:33,600 --> 00:27:37,120
so this is uh so we previous or

577
00:27:37,120 --> 00:27:39,200
complicated compilation

578
00:27:39,200 --> 00:27:42,000
into the more simplified version this

579
00:27:42,000 --> 00:27:42,960
time

580
00:27:42,960 --> 00:27:45,679
also previously multiple event

581
00:27:45,679 --> 00:27:47,760
notification

582
00:27:47,760 --> 00:27:50,880
constantly you know consolidated

583
00:27:50,880 --> 00:27:52,640
which means merged

584
00:27:52,640 --> 00:27:54,640
into one single

585
00:27:54,640 --> 00:27:56,880
modification

586
00:27:56,880 --> 00:28:00,080
so we uploaded our open source project

587
00:28:00,080 --> 00:28:03,520
github so you can download our

588
00:28:03,520 --> 00:28:04,799
the

589
00:28:04,799 --> 00:28:05,840
program

590
00:28:05,840 --> 00:28:07,200
from

591
00:28:07,200 --> 00:28:09,600
this github

592
00:28:09,600 --> 00:28:12,799
so this is a level so this time our

593
00:28:12,799 --> 00:28:16,480
korean teams including itunes team and

594
00:28:16,480 --> 00:28:20,240
ipwave and bmw hackathon teams

595
00:28:20,240 --> 00:28:22,799
we gathered together in busan in south

596
00:28:22,799 --> 00:28:24,159
korea

597
00:28:24,159 --> 00:28:28,480
so we work from wednesday to on saturday

598
00:28:28,480 --> 00:28:31,600
okay thank you for your rotation

599
00:28:31,600 --> 00:28:35,039
so any questions oh come in

600
00:28:39,760 --> 00:28:41,520
okay yeah

601
00:28:41,520 --> 00:28:43,760
yeah i don't see any questions uh in the

602
00:28:43,760 --> 00:28:46,640
room here um and and thank you for that

603
00:28:46,640 --> 00:28:49,679
presentation uh i'm not sure if your

604
00:28:49,679 --> 00:28:52,000
slides are up for next but why don't you

605
00:28:52,000 --> 00:28:54,320
just go ahead with the next presentation

606
00:28:54,320 --> 00:28:57,120
okay right you have a second one yep

607
00:28:57,120 --> 00:29:00,000
yeah sure we can just do it now

608
00:29:00,000 --> 00:29:01,039
okay

609
00:29:01,039 --> 00:29:01,919
so

610
00:29:01,919 --> 00:29:02,880
okay

611
00:29:02,880 --> 00:29:05,840
charles can you see my slide right right

612
00:29:05,840 --> 00:29:10,799
uh yes we can okay great thank you

613
00:29:11,679 --> 00:29:14,159
so second project is the ipo wave

614
00:29:14,159 --> 00:29:16,240
hackathon project

615
00:29:16,240 --> 00:29:17,840
i am

616
00:29:17,840 --> 00:29:19,279
for jung

617
00:29:19,279 --> 00:29:22,880
my core members are my my phd student

618
00:29:22,880 --> 00:29:25,960
the vietnamese

619
00:29:39,120 --> 00:29:42,240
from poison national university

620
00:29:42,240 --> 00:29:45,039
so this is the ipwa hackathon project

621
00:29:45,039 --> 00:29:48,720
the basically uh we used um wave

622
00:29:48,720 --> 00:29:51,760
protocol left-hand side is the tcpip

623
00:29:51,760 --> 00:29:54,080
over

624
00:29:54,080 --> 00:29:56,559
previously we used the i2p wave and now

625
00:29:56,559 --> 00:29:59,360
we used 5gb 2x

626
00:29:59,360 --> 00:30:00,080
so

627
00:30:00,080 --> 00:30:03,600
also we uh implemented the context of

628
00:30:03,600 --> 00:30:05,600
aware navigation protocol

629
00:30:05,600 --> 00:30:09,440
among vehicles also this time we

630
00:30:09,440 --> 00:30:12,320
enabled the communication between uh

631
00:30:12,320 --> 00:30:14,799
drones okay

632
00:30:14,799 --> 00:30:15,919
so

633
00:30:15,919 --> 00:30:18,640
we have two parts first part is the

634
00:30:18,640 --> 00:30:20,559
simulation

635
00:30:20,559 --> 00:30:24,399
context aware on navigator protocol cmp

636
00:30:24,399 --> 00:30:25,679
for trunks

637
00:30:25,679 --> 00:30:29,600
so previous site uh itf 102 hackathon

638
00:30:29,600 --> 00:30:32,159
case we implemented the

639
00:30:32,159 --> 00:30:34,720
context of a navigator or protocol for

640
00:30:34,720 --> 00:30:36,399
vehicles

641
00:30:36,399 --> 00:30:38,000
uh now

642
00:30:38,000 --> 00:30:40,559
i tip one on three okay so we

643
00:30:40,559 --> 00:30:43,600
implemented the cmp for our drones okay

644
00:30:43,600 --> 00:30:45,120
drone is a

645
00:30:45,120 --> 00:30:47,679
promising area for

646
00:30:47,679 --> 00:30:48,799
a many

647
00:30:48,799 --> 00:30:52,159
okay error okay weaker okay

648
00:30:52,159 --> 00:30:54,480
so second part is also we implemented

649
00:30:54,480 --> 00:30:56,720
the drone assisted the handover

650
00:30:56,720 --> 00:30:58,320
mechanism for

651
00:30:58,320 --> 00:31:00,240
vehicular networks

652
00:31:00,240 --> 00:31:02,559
the basically you can see

653
00:31:02,559 --> 00:31:05,840
in 5g cases gnode b is the base station

654
00:31:05,840 --> 00:31:10,640
for 5g ht network so can cover highway

655
00:31:10,640 --> 00:31:13,679
or vehicles but certain cases there is

656
00:31:13,679 --> 00:31:15,760
some coverage of horse in that case we

657
00:31:15,760 --> 00:31:17,840
want to using

658
00:31:17,840 --> 00:31:20,000
so many the error speaker

659
00:31:20,000 --> 00:31:22,720
such as the drones so drone

660
00:31:22,720 --> 00:31:24,159
can

661
00:31:24,159 --> 00:31:25,519
a play

662
00:31:25,519 --> 00:31:28,720
of a role for the

663
00:31:28,720 --> 00:31:30,480
moving over mobile

664
00:31:30,480 --> 00:31:32,720
extension to cover

665
00:31:32,720 --> 00:31:36,799
these speakers so basically this time we

666
00:31:36,799 --> 00:31:39,679
implemented this kind of

667
00:31:39,679 --> 00:31:42,240
drum based handover mechanism such as

668
00:31:42,240 --> 00:31:44,240
the beakers

669
00:31:44,240 --> 00:31:46,640
go out of the communication range of g

670
00:31:46,640 --> 00:31:49,760
node b and then it can and continuously

671
00:31:49,760 --> 00:31:52,559
absorb the by uav and then this moving

672
00:31:52,559 --> 00:31:54,720
to another coverage of the genov

673
00:31:54,720 --> 00:31:57,679
and then the vehicle can connect to next

674
00:31:57,679 --> 00:31:58,480
that

675
00:31:58,480 --> 00:32:01,440
g node okay okay

676
00:32:01,440 --> 00:32:02,320
so

677
00:32:02,320 --> 00:32:03,519
um we

678
00:32:03,519 --> 00:32:05,679
implemented our uh draft

679
00:32:05,679 --> 00:32:09,919
ip wave context aware navigator protocol

680
00:32:09,919 --> 00:32:12,880
for our drones okay so

681
00:32:12,880 --> 00:32:15,440
so this time we didn't

682
00:32:15,440 --> 00:32:16,960
complete the

683
00:32:16,960 --> 00:32:19,279
complete implementation of the

684
00:32:19,279 --> 00:32:20,320
drone

685
00:32:20,320 --> 00:32:22,080
but uh we

686
00:32:22,080 --> 00:32:24,880
will continue for next one on four

687
00:32:24,880 --> 00:32:27,440
hackathons complete our this simulation

688
00:32:27,440 --> 00:32:30,240
part currently sixty percent

689
00:32:30,240 --> 00:32:32,559
uh implementation for

690
00:32:32,559 --> 00:32:35,679
uh toronto v2x the 5g of retex is

691
00:32:35,679 --> 00:32:37,200
implemented for

692
00:32:37,200 --> 00:32:38,320
our

693
00:32:38,320 --> 00:32:40,799
vehicle mobility information option

694
00:32:40,799 --> 00:32:43,919
secondly the drone assist handover

695
00:32:43,919 --> 00:32:46,880
mechanism case

696
00:32:47,120 --> 00:32:50,559
the base score is improved accuracy

697
00:32:50,559 --> 00:32:53,200
of a hand over decision using command

698
00:32:53,200 --> 00:32:55,039
pressure basically

699
00:32:55,039 --> 00:32:57,919
the bitcoin message from genotyping over

700
00:32:57,919 --> 00:32:58,880
the

701
00:32:58,880 --> 00:33:00,320
base station

702
00:33:00,320 --> 00:33:03,519
and that we can decide that the

703
00:33:03,519 --> 00:33:06,399
hand over time

704
00:33:06,399 --> 00:33:08,399
the considering the signal

705
00:33:08,399 --> 00:33:11,360
strength from the previous

706
00:33:11,360 --> 00:33:14,159
space station and new

707
00:33:14,159 --> 00:33:16,399
base station over throne throne the

708
00:33:16,399 --> 00:33:20,320
member is moving on base station

709
00:33:20,320 --> 00:33:22,640
this is the simulation environment okay

710
00:33:22,640 --> 00:33:23,600
okay

711
00:33:23,600 --> 00:33:26,880
so we have a proton network this is a

712
00:33:26,880 --> 00:33:30,000
base station g node b or anode b

713
00:33:30,000 --> 00:33:33,440
so biopsy case is called the node b 4g

714
00:33:33,440 --> 00:33:36,640
lt case in order b okay

715
00:33:36,640 --> 00:33:40,799
so basically um we want to implement um

716
00:33:40,799 --> 00:33:43,200
strong communication uh to avoid the

717
00:33:43,200 --> 00:33:45,360
collision among drones

718
00:33:45,360 --> 00:33:47,840
and also we can uh support

719
00:33:47,840 --> 00:33:50,320
handover okay okay

720
00:33:50,320 --> 00:33:54,159
so what what uh cut down this time

721
00:33:54,159 --> 00:33:55,840
so the simul

722
00:33:55,840 --> 00:33:57,919
5g is a

723
00:33:57,919 --> 00:34:00,960
simulation for 5g free text simulation

724
00:34:00,960 --> 00:34:04,080
module so we integrated that module into

725
00:34:04,080 --> 00:34:05,519
omni

726
00:34:05,519 --> 00:34:08,560
laptop module okay also we

727
00:34:08,560 --> 00:34:12,719
try to enable ip106 also ipv business

728
00:34:12,719 --> 00:34:16,960
icmp version 6 for our ip wave

729
00:34:16,960 --> 00:34:19,199
contacts over a navigator protocol okay

730
00:34:19,199 --> 00:34:21,199
okay

731
00:34:21,199 --> 00:34:23,359
also

732
00:34:23,359 --> 00:34:25,839
this is the network simulation topology

733
00:34:25,839 --> 00:34:28,159
for a handover so this is

734
00:34:28,159 --> 00:34:28,960
the

735
00:34:28,960 --> 00:34:31,679
topology and also

736
00:34:31,679 --> 00:34:32,960
we used

737
00:34:32,960 --> 00:34:35,119
i am the philosophers

738
00:34:35,119 --> 00:34:37,599
to support the drone

739
00:34:37,599 --> 00:34:38,639
based

740
00:34:38,639 --> 00:34:41,919
handover okay okay

741
00:34:42,079 --> 00:34:44,639
what we learned this time the first time

742
00:34:44,639 --> 00:34:49,079
context over navigator protocol cmp

743
00:34:49,199 --> 00:34:54,000
is using ismp labor discovery message it

744
00:34:54,000 --> 00:34:55,639
is called the um

745
00:34:55,639 --> 00:34:58,560
pmi option picker mobility information

746
00:34:58,560 --> 00:35:00,720
option to share

747
00:35:00,720 --> 00:35:03,200
attraction speed position

748
00:35:03,200 --> 00:35:05,359
something like that so

749
00:35:05,359 --> 00:35:08,000
we saw the possibility

750
00:35:08,000 --> 00:35:10,640
of sharing through mobility information

751
00:35:10,640 --> 00:35:11,440
for

752
00:35:11,440 --> 00:35:14,320
drone college avoidance

753
00:35:14,320 --> 00:35:17,040
secondly uh drone assisted handover but

754
00:35:17,040 --> 00:35:20,240
this time we uh drawn handover

755
00:35:20,240 --> 00:35:21,359
is

756
00:35:21,359 --> 00:35:24,240
completed based on ipv4

757
00:35:24,240 --> 00:35:26,640
but my students

758
00:35:26,640 --> 00:35:30,560
are working for ip106 version so

759
00:35:30,560 --> 00:35:32,800
we didn't finish yet but we will

760
00:35:32,800 --> 00:35:34,400
continue

761
00:35:34,400 --> 00:35:38,000
to finish this one for our next itf 104

762
00:35:38,000 --> 00:35:40,560
hackathon project but the accurate

763
00:35:40,560 --> 00:35:42,240
signal power

764
00:35:42,240 --> 00:35:43,920
measurement

765
00:35:43,920 --> 00:35:45,440
from um

766
00:35:45,440 --> 00:35:46,800
inode b

767
00:35:46,800 --> 00:35:48,079
and then we can

768
00:35:48,079 --> 00:35:50,000
increase the accuracy of handover

769
00:35:50,000 --> 00:35:51,119
decision

770
00:35:51,119 --> 00:35:53,839
using karma printer also we try to using

771
00:35:53,839 --> 00:35:55,359
um

772
00:35:55,359 --> 00:35:59,280
tiblani algorithms such as long-term

773
00:35:59,280 --> 00:36:01,680
rstm

774
00:36:01,680 --> 00:36:03,599
mechanism

775
00:36:03,599 --> 00:36:06,560
and this is a project

776
00:36:06,560 --> 00:36:09,280
a github link okay so we uploaded our

777
00:36:09,280 --> 00:36:10,800
implementation

778
00:36:10,800 --> 00:36:13,440
code into this github okay this is the

779
00:36:13,440 --> 00:36:14,480
portal

780
00:36:14,480 --> 00:36:15,680
for our

781
00:36:15,680 --> 00:36:18,240
ip wave team also professor yang kim

782
00:36:18,240 --> 00:36:19,760
from sunshield

783
00:36:19,760 --> 00:36:21,599
um university

784
00:36:21,599 --> 00:36:23,920
he is the champion for

785
00:36:23,920 --> 00:36:26,920
bmw

786
00:36:27,280 --> 00:36:29,520
and my student okay okay thank you for

787
00:36:29,520 --> 00:36:32,560
your attention yeah

788
00:36:32,960 --> 00:36:35,599
any questions

789
00:36:38,880 --> 00:36:40,800
okay yeah thank you and uh as was

790
00:36:40,800 --> 00:36:42,160
mentioned in the room thank you for

791
00:36:42,160 --> 00:36:45,359
staying up uh late and uh to present to

792
00:36:45,359 --> 00:36:46,640
us here

793
00:36:46,640 --> 00:36:48,640
okay thank you

794
00:36:48,640 --> 00:36:49,920
question

795
00:36:49,920 --> 00:36:51,520
oh looks like looks like there is a

796
00:36:51,520 --> 00:36:52,800
question

797
00:36:52,800 --> 00:36:55,800
okay

798
00:36:58,000 --> 00:37:00,000
so the slides are i believe they're

799
00:37:00,000 --> 00:37:03,320
uploaded into github already

800
00:37:03,320 --> 00:37:06,439
[Music]

801
00:37:11,920 --> 00:37:14,560
uh paul is your contact information

802
00:37:14,560 --> 00:37:17,040
available on the slides

803
00:37:17,040 --> 00:37:19,359
context of

804
00:37:19,359 --> 00:37:21,599
aware navigator

805
00:37:21,599 --> 00:37:23,839
no no just to contact you if people have

806
00:37:23,839 --> 00:37:25,760
questions and they want to con oh

807
00:37:25,760 --> 00:37:27,839
okay email address

808
00:37:27,839 --> 00:37:30,880
yeah is it is it in the slides

809
00:37:30,880 --> 00:37:34,480
so okay oh it's in the wiki okay yeah

810
00:37:34,480 --> 00:37:36,960
you're you're listed as the the champion

811
00:37:36,960 --> 00:37:38,640
for the project so in the wiki i guess

812
00:37:38,640 --> 00:37:41,200
your your email address okay

813
00:37:41,200 --> 00:37:42,800
thank you okay

814
00:37:42,800 --> 00:37:45,599
thanks paul thank you

815
00:37:46,240 --> 00:37:48,000
okay um

816
00:37:48,000 --> 00:37:49,760
we may need to do a little debugging

817
00:37:49,760 --> 00:37:52,880
here because there's some echo

818
00:37:52,880 --> 00:37:54,720
do you guys want to do something before

819
00:37:54,720 --> 00:37:57,550
i start the next one

820
00:37:57,550 --> 00:38:00,400
[Music]

821
00:38:00,400 --> 00:38:04,240
let's just check if

822
00:38:16,079 --> 00:38:19,280
then click here okay so now it's on

823
00:38:19,280 --> 00:38:20,960
right okay

824
00:38:20,960 --> 00:38:22,560
no no it's off

825
00:38:22,560 --> 00:38:26,400
ah okay okay so that should do it

826
00:38:26,400 --> 00:38:28,720
okay

827
00:38:28,800 --> 00:38:33,760
so so red means on and green means off

828
00:38:33,760 --> 00:38:36,960
sorry i'm learning

829
00:38:36,960 --> 00:38:40,079
i had it mixed up

830
00:38:40,880 --> 00:38:42,320
okay

831
00:38:42,320 --> 00:38:44,640
so next up at least the one i have here

832
00:38:44,640 --> 00:38:47,359
i believe we covered those is that right

833
00:38:47,359 --> 00:38:50,079
yes so um

834
00:38:50,079 --> 00:38:51,280
uh

835
00:38:51,280 --> 00:38:54,160
bmwg

836
00:38:55,520 --> 00:38:58,320
we have anyone here from bmwg or maybe

837
00:38:58,320 --> 00:39:00,320
your remote okay you're you're there

838
00:39:00,320 --> 00:39:02,000
okay

839
00:39:02,000 --> 00:39:04,880
okay i'll let you share

840
00:39:04,880 --> 00:39:08,680
hold on just a sec

841
00:39:15,440 --> 00:39:19,280
okay can can you see my screen now

842
00:39:19,359 --> 00:39:21,119
okay great

843
00:39:21,119 --> 00:39:22,720
it's all yours we can see your slides

844
00:39:22,720 --> 00:39:24,320
here

845
00:39:24,320 --> 00:39:26,000
can you hear us

846
00:39:26,000 --> 00:39:29,800
yes of course

847
00:39:30,160 --> 00:39:33,040
we are not hearing you

848
00:39:33,040 --> 00:39:35,279
uh

849
00:39:35,359 --> 00:39:37,359
do i need to

850
00:39:37,359 --> 00:39:39,598
no

851
00:39:39,760 --> 00:39:42,160
okay so it sounds like you're very faint

852
00:39:42,160 --> 00:39:46,399
i believe i hear you just a little bit

853
00:39:50,560 --> 00:39:52,880
so is better now is better now yeah

854
00:39:52,880 --> 00:39:56,839
you're still pretty faint

855
00:40:07,680 --> 00:40:09,200
is there a way for

856
00:40:09,200 --> 00:40:13,359
you guys to increase his volume

857
00:40:16,720 --> 00:40:19,200
yeah we don't hear you anymore

858
00:40:19,200 --> 00:40:21,598
are you there

859
00:40:22,319 --> 00:40:27,240
can you hear me because

860
00:40:43,839 --> 00:40:46,000
hello hello

861
00:40:46,000 --> 00:40:49,000
sorry

862
00:41:01,040 --> 00:41:03,119
if you want to try requesting

863
00:41:03,119 --> 00:41:05,440
to share your screen and the audio

864
00:41:05,440 --> 00:41:08,319
we can do that again

865
00:41:10,160 --> 00:41:13,440
hello can you hear me now

866
00:41:17,359 --> 00:41:18,839
still don't hear

867
00:41:18,839 --> 00:41:22,560
you awesome

868
00:41:27,920 --> 00:41:31,400
can you hear now

869
00:41:36,720 --> 00:41:39,440
so a charles this is a pearl um in the

870
00:41:39,440 --> 00:41:40,560
computer

871
00:41:40,560 --> 00:41:44,240
uh we can hear the tron uh looks like

872
00:41:44,240 --> 00:41:48,839
you cannot hear his voice right

873
00:41:48,880 --> 00:41:50,000
so

874
00:41:50,000 --> 00:41:52,240
maybe i need to

875
00:41:52,240 --> 00:41:56,520
no this shouldn't matter should it

876
00:42:02,560 --> 00:42:05,560
hello

877
00:42:09,200 --> 00:42:10,480
ah

878
00:42:10,480 --> 00:42:13,480
okay

879
00:42:16,000 --> 00:42:17,520
was going to say because it looks like

880
00:42:17,520 --> 00:42:19,359
niteco is happy

881
00:42:19,359 --> 00:42:23,960
yeah so we just lost audio in the room

882
00:42:33,040 --> 00:42:36,040
anyway

883
00:42:45,680 --> 00:42:48,680
hmm

884
00:43:19,760 --> 00:43:22,760
hmm

885
00:44:04,800 --> 00:44:06,800
request to share

886
00:44:06,800 --> 00:44:10,760
that would work out better

887
00:44:25,920 --> 00:44:27,680
you're jordy

888
00:44:27,680 --> 00:44:30,000
okay

889
00:44:30,560 --> 00:44:33,720
all right

890
00:44:38,319 --> 00:44:40,000
hey there this is lorenzo from mitego

891
00:44:40,000 --> 00:44:42,160
just testing that audio injection we're

892
00:44:42,160 --> 00:44:44,960
finding the room

893
00:44:48,640 --> 00:44:52,879
test test test test

894
00:44:54,160 --> 00:44:55,920
toby super lambda

895
00:44:55,920 --> 00:44:57,920
that's the taste

896
00:44:57,920 --> 00:44:59,200
nice yeah

897
00:44:59,200 --> 00:45:01,680
so yeah thank you very much um i'm jordy

898
00:45:01,680 --> 00:45:03,599
rogerald and on behalf of the alto

899
00:45:03,599 --> 00:45:04,800
working group

900
00:45:04,800 --> 00:45:05,599
and

901
00:45:05,599 --> 00:45:07,280
yeah i'm going to present our hackathon

902
00:45:07,280 --> 00:45:09,920
using alto cars maps to optimize data

903
00:45:09,920 --> 00:45:13,280
set transfer for lhc the large hadron

904
00:45:13,280 --> 00:45:14,800
collider

905
00:45:14,800 --> 00:45:16,560
uh yeah just starting with a very big

906
00:45:16,560 --> 00:45:17,839
thank you note to all the people who

907
00:45:17,839 --> 00:45:19,440
actually participate in this hackathon

908
00:45:19,440 --> 00:45:21,280
from the alto working group

909
00:45:21,280 --> 00:45:23,520
uh working endless hours managing three

910
00:45:23,520 --> 00:45:25,280
different time zones for the last two

911
00:45:25,280 --> 00:45:28,640
weeks actually so thank you very much

912
00:45:28,640 --> 00:45:30,480
um yeah so

913
00:45:30,480 --> 00:45:32,240
actually this is uh this hackathon is

914
00:45:32,240 --> 00:45:34,000
for us sort of like a kickoff because we

915
00:45:34,000 --> 00:45:35,200
are starting an

916
00:45:35,200 --> 00:45:36,800
initiative within the alta working group

917
00:45:36,800 --> 00:45:37,680
to

918
00:45:37,680 --> 00:45:39,920
to create what we call the alto code

919
00:45:39,920 --> 00:45:41,920
based project basically which aims at

920
00:45:41,920 --> 00:45:44,240
providing a parallel track to the

921
00:45:44,240 --> 00:45:46,240
working groups standardization effort

922
00:45:46,240 --> 00:45:47,920
towards implementing the the features

923
00:45:47,920 --> 00:45:49,839
introduced in the latest rfcs basically

924
00:45:49,839 --> 00:45:50,640
so

925
00:45:50,640 --> 00:45:52,800
the hacker and the hackathons will be

926
00:45:52,800 --> 00:45:55,440
used as uh three checkpoints a year to

927
00:45:55,440 --> 00:45:57,599
test interpret interoperability

928
00:45:57,599 --> 00:45:58,960
and the latest capabilities uh

929
00:45:58,960 --> 00:46:01,040
implemented from the protocol basically

930
00:46:01,040 --> 00:46:02,800
to collect feedback and sort of

931
00:46:02,800 --> 00:46:04,480
socialize some of the latest ideas as

932
00:46:04,480 --> 00:46:05,680
well so

933
00:46:05,680 --> 00:46:06,720
um

934
00:46:06,720 --> 00:46:08,880
yeah so we um

935
00:46:08,880 --> 00:46:10,640
you know we the goal of this effort

936
00:46:10,640 --> 00:46:12,800
basically is to actually

937
00:46:12,800 --> 00:46:15,680
deploy alto and develop the the codebase

938
00:46:15,680 --> 00:46:16,560
uh

939
00:46:16,560 --> 00:46:18,240
closely connected with production

940
00:46:18,240 --> 00:46:20,160
applications and in this hackathon

941
00:46:20,160 --> 00:46:21,839
actually we focus on one of them which

942
00:46:21,839 --> 00:46:22,720
is the

943
00:46:22,720 --> 00:46:24,400
integration of alto

944
00:46:24,400 --> 00:46:26,240
with the russio application which is an

945
00:46:26,240 --> 00:46:28,400
application used by scientists and at

946
00:46:28,400 --> 00:46:31,839
the lhc and globally to transfer

947
00:46:31,839 --> 00:46:34,640
large-scale data centers data sets

948
00:46:34,640 --> 00:46:36,720
uh from geneva and sharing those data

949
00:46:36,720 --> 00:46:39,040
sets globally basically

950
00:46:39,040 --> 00:46:40,560
uh yeah so

951
00:46:40,560 --> 00:46:42,400
you know we welcome people to actually

952
00:46:42,400 --> 00:46:45,200
uh join us and and uh we're gonna be uh

953
00:46:45,200 --> 00:46:47,520
you know between the hackathons we'll be

954
00:46:47,520 --> 00:46:50,480
creating uh teams epics uh using a scrum

955
00:46:50,480 --> 00:46:52,960
and coding basically to kept to get the

956
00:46:52,960 --> 00:46:54,319
the code uh

957
00:46:54,319 --> 00:46:56,880
running basically uh yeah so the goals

958
00:46:56,880 --> 00:46:58,560
for this hackathon

959
00:46:58,560 --> 00:47:01,520
um yeah so the goal is to use autocause

960
00:47:01,520 --> 00:47:03,200
maps to optimize dataset transfers for

961
00:47:03,200 --> 00:47:05,119
russio russia is the the application

962
00:47:05,119 --> 00:47:06,480
like i mentioned used by

963
00:47:06,480 --> 00:47:08,800
scientists to share large-scale data

964
00:47:08,800 --> 00:47:10,640
sets

965
00:47:10,640 --> 00:47:12,240
the the focus is on integration of the

966
00:47:12,240 --> 00:47:14,880
alto northbound interface with ruthie

967
00:47:14,880 --> 00:47:16,400
uh to provide better visibility to

968
00:47:16,400 --> 00:47:18,079
application to make better decisions so

969
00:47:18,079 --> 00:47:19,440
alto basically

970
00:47:19,440 --> 00:47:22,079
provides the the state of the network

971
00:47:22,079 --> 00:47:24,240
provides bandwidth availability or

972
00:47:24,240 --> 00:47:26,000
latency from the network depending on

973
00:47:26,000 --> 00:47:27,920
the sort of the dynamics of the network

974
00:47:27,920 --> 00:47:28,960
and then provides that information to

975
00:47:28,960 --> 00:47:30,559
the application so you can make better

976
00:47:30,559 --> 00:47:32,400
decisions on how to

977
00:47:32,400 --> 00:47:34,720
you know upload or download these large

978
00:47:34,720 --> 00:47:36,480
data sets basically

979
00:47:36,480 --> 00:47:37,440
um

980
00:47:37,440 --> 00:47:38,720
yeah so the rfc is involved in this

981
00:47:38,720 --> 00:47:41,280
hackathon are in this slide

982
00:47:41,280 --> 00:47:43,040
what got done so basically

983
00:47:43,040 --> 00:47:45,040
implementation of an alto client in

984
00:47:45,040 --> 00:47:48,880
python uh based on rfc7285

985
00:47:48,880 --> 00:47:51,200
integration with the cern russia replica

986
00:47:51,200 --> 00:47:52,559
download

987
00:47:52,559 --> 00:47:54,079
we actually out of this hackathon we

988
00:47:54,079 --> 00:47:55,280
actually submitted a pull request

989
00:47:55,280 --> 00:47:57,040
against the russia

990
00:47:57,040 --> 00:47:58,960
open source project

991
00:47:58,960 --> 00:48:00,880
uh so that's going to extend that with

992
00:48:00,880 --> 00:48:02,559
the capability to actually be able to

993
00:48:02,559 --> 00:48:04,720
choose the algorithm upon which you may

994
00:48:04,720 --> 00:48:06,400
make those decisions on where you

995
00:48:06,400 --> 00:48:07,839
download the replica from based on

996
00:48:07,839 --> 00:48:10,480
network conditions basically uh we we

997
00:48:10,480 --> 00:48:12,720
work on feed demos um

998
00:48:12,720 --> 00:48:14,880
uh basically uh then i'm gonna just

999
00:48:14,880 --> 00:48:17,280
touch on them a little bit uh

1000
00:48:17,280 --> 00:48:18,160
and then

1001
00:48:18,160 --> 00:48:21,200
also extensions on southbound um

1002
00:48:21,200 --> 00:48:23,200
alpha integration with the as with asean

1003
00:48:23,200 --> 00:48:24,800
controllers with mininet and open

1004
00:48:24,800 --> 00:48:26,000
daylight

1005
00:48:26,000 --> 00:48:27,359
uh you have a scrum dashboard you can

1006
00:48:27,359 --> 00:48:29,440
actually access it's open so you can see

1007
00:48:29,440 --> 00:48:32,000
what's going on also um and yeah lots of

1008
00:48:32,000 --> 00:48:34,160
really interesting conversations um the

1009
00:48:34,160 --> 00:48:36,480
openalto project that's the architecture

1010
00:48:36,480 --> 00:48:38,079
i'm not going to go into it you have the

1011
00:48:38,079 --> 00:48:39,760
slides you can actually look at it but

1012
00:48:39,760 --> 00:48:41,040
basically you know there's a northbound

1013
00:48:41,040 --> 00:48:42,400
api that interfaces with the

1014
00:48:42,400 --> 00:48:43,839
applications which are

1015
00:48:43,839 --> 00:48:44,720
you know

1016
00:48:44,720 --> 00:48:45,760
really

1017
00:48:45,760 --> 00:48:47,440
a lot of different applications but it's

1018
00:48:47,440 --> 00:48:50,079
science applications or you know 5g edge

1019
00:48:50,079 --> 00:48:53,040
computing uh cdns uh and then on the

1020
00:48:53,040 --> 00:48:54,880
southbound api interfaces um with

1021
00:48:54,880 --> 00:48:56,880
networks any kind of network really um

1022
00:48:56,880 --> 00:48:57,599
and

1023
00:48:57,599 --> 00:48:59,760
uh typically uh interfacing with with an

1024
00:48:59,760 --> 00:49:01,839
sdn controller with it's whether it's in

1025
00:49:01,839 --> 00:49:04,880
the edge cloud or at the back hole or

1026
00:49:04,880 --> 00:49:07,040
anywhere really so yeah the metrics that

1027
00:49:07,040 --> 00:49:08,960
we use for this hackathon you know if

1028
00:49:08,960 --> 00:49:11,760
you look at the this uh i draft which

1029
00:49:11,760 --> 00:49:14,319
provides a table of all the metrics that

1030
00:49:14,319 --> 00:49:16,000
we focus on for this hackathon on the

1031
00:49:16,000 --> 00:49:19,119
round-trip delay and available bandwidth

1032
00:49:19,119 --> 00:49:22,480
demo one the goal here is to

1033
00:49:22,480 --> 00:49:24,480
be able to um

1034
00:49:24,480 --> 00:49:26,559
make smart decisions on where do i get

1035
00:49:26,559 --> 00:49:28,240
my data from suppose you are a scientist

1036
00:49:28,240 --> 00:49:29,599
and you're trying to get like a huge

1037
00:49:29,599 --> 00:49:30,800
data set

1038
00:49:30,800 --> 00:49:32,720
uh that needs to be globally transferred

1039
00:49:32,720 --> 00:49:34,319
and you have different replicas you can

1040
00:49:34,319 --> 00:49:36,160
choose from so you just want to know

1041
00:49:36,160 --> 00:49:37,280
what you are right now what's the best

1042
00:49:37,280 --> 00:49:39,520
choice i can do and so alto is an

1043
00:49:39,520 --> 00:49:41,119
abstraction layer that provides that

1044
00:49:41,119 --> 00:49:42,800
kind of information in this case what

1045
00:49:42,800 --> 00:49:45,520
you see is step one look up the host by

1046
00:49:45,520 --> 00:49:47,440
finding the longest practice practice

1047
00:49:47,440 --> 00:49:50,720
match step two bandwidth between hosts

1048
00:49:50,720 --> 00:49:52,880
as the alter host uh cost so although

1049
00:49:52,880 --> 00:49:54,960
you query the alto and you get the sort

1050
00:49:54,960 --> 00:49:58,960
of the bandwidth uh cost uh map for each

1051
00:49:58,960 --> 00:50:00,240
range of the endpoints you can choose

1052
00:50:00,240 --> 00:50:01,280
from

1053
00:50:01,280 --> 00:50:03,440
step three uh you get the replicas back

1054
00:50:03,440 --> 00:50:06,240
from the alto service um order by the

1055
00:50:06,240 --> 00:50:08,400
bandwidth availability suppose you want

1056
00:50:08,400 --> 00:50:09,520
to choose the highest bandwidth because

1057
00:50:09,520 --> 00:50:12,000
you want to minimize uh download time

1058
00:50:12,000 --> 00:50:13,760
and then step four you get uh you choose

1059
00:50:13,760 --> 00:50:15,200
the replica you choose where to get it

1060
00:50:15,200 --> 00:50:16,559
from and you actually can get an

1061
00:50:16,559 --> 00:50:18,240
estimate of the throughput from the

1062
00:50:18,240 --> 00:50:19,839
system

1063
00:50:19,839 --> 00:50:21,920
um yes this is actually some of the

1064
00:50:21,920 --> 00:50:23,280
results from the demo you can see that

1065
00:50:23,280 --> 00:50:25,359
if you if you use sort of what the

1066
00:50:25,359 --> 00:50:26,559
scientists do today which is sort of

1067
00:50:26,559 --> 00:50:27,760
like a

1068
00:50:27,760 --> 00:50:30,480
uh an agnostic decision without knowing

1069
00:50:30,480 --> 00:50:31,680
what's going on in the network you would

1070
00:50:31,680 --> 00:50:33,040
get certain performance but if you are

1071
00:50:33,040 --> 00:50:34,400
aware of you know what are the link

1072
00:50:34,400 --> 00:50:36,319
capacities and what's the the path that

1073
00:50:36,319 --> 00:50:37,280
you're gonna be choosing what are the

1074
00:50:37,280 --> 00:50:38,640
network conditions

1075
00:50:38,640 --> 00:50:39,920
then you can make that you can do better

1076
00:50:39,920 --> 00:50:41,440
so here you see

1077
00:50:41,440 --> 00:50:42,880
four to five x speed up in the

1078
00:50:42,880 --> 00:50:44,079
simulations that we run over the weekend

1079
00:50:44,079 --> 00:50:45,359
basically this is running on mininet

1080
00:50:45,359 --> 00:50:48,559
basically so simplified environment

1081
00:50:48,559 --> 00:50:49,599
and

1082
00:50:49,599 --> 00:50:51,440
the same thing can be done you know

1083
00:50:51,440 --> 00:50:52,880
based on latency so i'm not going to go

1084
00:50:52,880 --> 00:50:54,400
into it just like some experience

1085
00:50:54,400 --> 00:50:55,599
experience where you choose based on

1086
00:50:55,599 --> 00:50:56,960
latency

1087
00:50:56,960 --> 00:50:58,640
and then i have two more demos we

1088
00:50:58,640 --> 00:51:00,079
actually put

1089
00:51:00,079 --> 00:51:02,000
an auto estimator a multi-flow

1090
00:51:02,000 --> 00:51:04,000
throughput bandwidth prediction

1091
00:51:04,000 --> 00:51:06,559
and demo three and auto scheduler which

1092
00:51:06,559 --> 00:51:09,280
allows you to do sla constrain multiflow

1093
00:51:09,280 --> 00:51:10,400
node selection so suppose you have

1094
00:51:10,400 --> 00:51:12,400
certain requirements to guarantee say

1095
00:51:12,400 --> 00:51:14,480
i want to get my data transfer by 5 am

1096
00:51:14,480 --> 00:51:16,400
tomorrow because i need to work so

1097
00:51:16,400 --> 00:51:18,800
please give me sort of

1098
00:51:18,800 --> 00:51:20,720
you know there are the replicas that i

1099
00:51:20,720 --> 00:51:23,200
should select and from you know so that

1100
00:51:23,200 --> 00:51:26,079
i can meet my my requirements say so

1101
00:51:26,079 --> 00:51:27,920
uh this demo the demo number three is

1102
00:51:27,920 --> 00:51:29,920
half baked but uh we're almost close to

1103
00:51:29,920 --> 00:51:31,599
actually finished

1104
00:51:31,599 --> 00:51:34,000
yeah so yeah thank you very much so you

1105
00:51:34,000 --> 00:51:35,760
know uh welcome anyone who actually

1106
00:51:35,760 --> 00:51:37,119
wants to participate in the in the

1107
00:51:37,119 --> 00:51:39,280
project you are a developer uh so you

1108
00:51:39,280 --> 00:51:41,119
reach out to us you have here some

1109
00:51:41,119 --> 00:51:42,960
resources in the slides and yeah looking

1110
00:51:42,960 --> 00:51:44,960
forward to seeing you in philadelphia

1111
00:51:44,960 --> 00:51:47,800
thanks

1112
00:51:47,800 --> 00:51:54,739
[Applause]

1113
00:51:59,760 --> 00:52:03,000
thank you

1114
00:52:11,200 --> 00:52:13,598
okay

1115
00:52:15,599 --> 00:52:16,839
so

1116
00:52:16,839 --> 00:52:18,480
oops

1117
00:52:18,480 --> 00:52:22,920
sorry that's not what i want

1118
00:52:25,020 --> 00:52:28,130
[Music]

1119
00:52:33,040 --> 00:52:35,440
okay let's see what we got next how

1120
00:52:35,440 --> 00:52:39,040
about a sodastream

1121
00:52:39,680 --> 00:52:42,680
great

1122
00:52:52,720 --> 00:52:56,160
okay looks to be working

1123
00:52:56,240 --> 00:52:58,079
yep so i am stephen mcqueston from the

1124
00:52:58,079 --> 00:53:00,000
university of glasgow i am with the

1125
00:53:00,000 --> 00:53:01,520
sodastream project

1126
00:53:01,520 --> 00:53:04,480
if you're not familiar with that project

1127
00:53:04,480 --> 00:53:06,160
basically it is aiming to improve

1128
00:53:06,160 --> 00:53:08,800
distributed decision-making in large

1129
00:53:08,800 --> 00:53:11,440
large organizations so using various

1130
00:53:11,440 --> 00:53:14,079
data mining techniques to do that we're

1131
00:53:14,079 --> 00:53:16,160
essentially developing those techniques

1132
00:53:16,160 --> 00:53:17,839
using the itf as a test bed because

1133
00:53:17,839 --> 00:53:19,839
there's lots of decisions being made and

1134
00:53:19,839 --> 00:53:21,680
lots of information around that

1135
00:53:21,680 --> 00:53:23,440
decision-making process is publicly

1136
00:53:23,440 --> 00:53:26,000
available so it's a great way of testing

1137
00:53:26,000 --> 00:53:28,240
out these techniques

1138
00:53:28,240 --> 00:53:30,319
so to try and accomplish our goal we

1139
00:53:30,319 --> 00:53:31,760
need to better understand decision

1140
00:53:31,760 --> 00:53:33,760
making within the itf so

1141
00:53:33,760 --> 00:53:34,640
you know

1142
00:53:34,640 --> 00:53:36,079
who's making decisions where are they

1143
00:53:36,079 --> 00:53:37,359
making them how are they making them and

1144
00:53:37,359 --> 00:53:39,599
what impact those decisions have

1145
00:53:39,599 --> 00:53:43,119
onto the day-to-day running of the itf

1146
00:53:43,119 --> 00:53:45,200
um our previous work has looked at rfc

1147
00:53:45,200 --> 00:53:46,960
deployment and the factors that

1148
00:53:46,960 --> 00:53:49,839
influence the success of protocols and

1149
00:53:49,839 --> 00:53:51,599
their deployment in the wild

1150
00:53:51,599 --> 00:53:52,960
our more recent work has looked at the

1151
00:53:52,960 --> 00:53:55,599
its social graph so who makes up the itf

1152
00:53:55,599 --> 00:53:56,559
and

1153
00:53:56,559 --> 00:53:59,119
what are their participation trends

1154
00:53:59,119 --> 00:54:00,800
for this hackathon though

1155
00:54:00,800 --> 00:54:03,760
i've been looking at

1156
00:54:03,760 --> 00:54:06,160
analyzing rc errata

1157
00:54:06,160 --> 00:54:08,800
um to sort of motivate why you might

1158
00:54:08,800 --> 00:54:11,119
want to look at rsc errata previously

1159
00:54:11,119 --> 00:54:13,040
we've seen that rcs can take a really

1160
00:54:13,040 --> 00:54:15,119
long time to get published so this plot

1161
00:54:15,119 --> 00:54:15,920
here

1162
00:54:15,920 --> 00:54:17,920
shows the number of days from the first

1163
00:54:17,920 --> 00:54:21,359
draft to publication of the rfc itself

1164
00:54:21,359 --> 00:54:22,960
and we can see that you know not only is

1165
00:54:22,960 --> 00:54:24,720
it an increasing trend but it's taking a

1166
00:54:24,720 --> 00:54:27,520
really long time so the median in 2020

1167
00:54:27,520 --> 00:54:30,240
was over a thousand days

1168
00:54:30,240 --> 00:54:32,720
despite this really long drafting and

1169
00:54:32,720 --> 00:54:34,160
editing process

1170
00:54:34,160 --> 00:54:36,160
we also see that there are still arata

1171
00:54:36,160 --> 00:54:38,480
being filed against rfcs so the trend

1172
00:54:38,480 --> 00:54:40,000
over the last decade or so has been

1173
00:54:40,000 --> 00:54:42,799
around about 300 errata being filed each

1174
00:54:42,799 --> 00:54:43,839
year

1175
00:54:43,839 --> 00:54:45,440
and so our question then becomes in

1176
00:54:45,440 --> 00:54:48,559
spite of this multi-month or multi-year

1177
00:54:48,559 --> 00:54:50,880
editing and drafting process why do a

1178
00:54:50,880 --> 00:54:53,359
rapid still occur and what can we learn

1179
00:54:53,359 --> 00:54:55,839
from those errata that might inform our

1180
00:54:55,839 --> 00:54:57,520
learning about rfc authorship and the

1181
00:54:57,520 --> 00:55:00,319
process behind it

1182
00:55:00,319 --> 00:55:01,839
so this week

1183
00:55:01,839 --> 00:55:03,599
at the hackathon i've been developing

1184
00:55:03,599 --> 00:55:05,359
tooling to explore this dataset and

1185
00:55:05,359 --> 00:55:07,359
trying to analyze the sort of initial

1186
00:55:07,359 --> 00:55:09,920
trends that we can see

1187
00:55:09,920 --> 00:55:11,680
so thinking about the kinds of rfcs that

1188
00:55:11,680 --> 00:55:14,000
contain mostarata

1189
00:55:14,000 --> 00:55:16,480
this plot shows errata filings broken

1190
00:55:16,480 --> 00:55:18,400
down by area

1191
00:55:18,400 --> 00:55:20,240
we can see a couple of outliers the

1192
00:55:20,240 --> 00:55:22,960
former application group area rather and

1193
00:55:22,960 --> 00:55:24,400
the security area

1194
00:55:24,400 --> 00:55:25,920
both have

1195
00:55:25,920 --> 00:55:29,200
most errata pair rc across all the areas

1196
00:55:29,200 --> 00:55:32,160
now ultimately we don't know why yet

1197
00:55:32,160 --> 00:55:34,319
you could conjecture that security rfcs

1198
00:55:34,319 --> 00:55:35,280
contain

1199
00:55:35,280 --> 00:55:37,280
certificate algorithms and pseudocode

1200
00:55:37,280 --> 00:55:39,200
and that lends itself to containing more

1201
00:55:39,200 --> 00:55:40,319
errors

1202
00:55:40,319 --> 00:55:43,520
but we need to explore further

1203
00:55:43,520 --> 00:55:44,799
think about how long it takes to

1204
00:55:44,799 --> 00:55:48,160
identify errata so this is a cdf of days

1205
00:55:48,160 --> 00:55:50,160
between publication of the rfc and

1206
00:55:50,160 --> 00:55:52,640
arrata being filed against it

1207
00:55:52,640 --> 00:55:55,280
earned half of their filed within a

1208
00:55:55,280 --> 00:55:56,480
thousand days

1209
00:55:56,480 --> 00:55:59,119
after publication

1210
00:55:59,119 --> 00:56:00,960
essentially we think this is a proxy for

1211
00:56:00,960 --> 00:56:03,040
the popularity of the rfc and how widely

1212
00:56:03,040 --> 00:56:04,319
it's being read and how widely it's

1213
00:56:04,319 --> 00:56:06,000
being deployed but again we do need to

1214
00:56:06,000 --> 00:56:09,599
explore this further as well

1215
00:56:10,000 --> 00:56:12,000
now naturally you might want to think

1216
00:56:12,000 --> 00:56:13,520
about what kinds of rats are being

1217
00:56:13,520 --> 00:56:16,000
published what's the nature of the the

1218
00:56:16,000 --> 00:56:18,160
data that are being filed

1219
00:56:18,160 --> 00:56:20,559
now the data set as it stands as it's

1220
00:56:20,559 --> 00:56:22,640
maintained by the rc editor isn't

1221
00:56:22,640 --> 00:56:25,680
particular particularly granular

1222
00:56:25,680 --> 00:56:27,760
we have two types of errata editorial

1223
00:56:27,760 --> 00:56:29,599
and technical

1224
00:56:29,599 --> 00:56:31,599
and again there's a sort of

1225
00:56:31,599 --> 00:56:33,920
fairly stable trend whereby about 40

1226
00:56:33,920 --> 00:56:36,319
percent of filings are for editorial um

1227
00:56:36,319 --> 00:56:39,200
issues in rfcs and about 60 are for

1228
00:56:39,200 --> 00:56:41,760
technical problems

1229
00:56:41,760 --> 00:56:43,440
now one of the main things i've worked

1230
00:56:43,440 --> 00:56:45,920
on is a way of sort of expanding this

1231
00:56:45,920 --> 00:56:47,520
data set to be a little bit more

1232
00:56:47,520 --> 00:56:49,440
descriptive about

1233
00:56:49,440 --> 00:56:52,400
their rata that are being filed

1234
00:56:52,400 --> 00:56:54,160
we've developed some tooling that allows

1235
00:56:54,160 --> 00:56:57,119
people to go on and view arapa filings

1236
00:56:57,119 --> 00:56:59,280
and tag them with more descriptive

1237
00:56:59,280 --> 00:57:01,280
labels so you can see some example

1238
00:57:01,280 --> 00:57:02,640
labels here

1239
00:57:02,640 --> 00:57:05,599
so typos terminology mistakes

1240
00:57:05,599 --> 00:57:08,799
is that mistake in the diagram etc etc

1241
00:57:08,799 --> 00:57:11,280
and so i'm going to finish with a pitch

1242
00:57:11,280 --> 00:57:14,160
for people to visit our website user

1243
00:57:14,160 --> 00:57:15,200
tooling

1244
00:57:15,200 --> 00:57:17,040
you can

1245
00:57:17,040 --> 00:57:18,559
break their rata filings down into

1246
00:57:18,559 --> 00:57:20,720
working groups so if you go along and

1247
00:57:20,720 --> 00:57:21,680
find the working groups that you're

1248
00:57:21,680 --> 00:57:23,520
active within you can look at the rata

1249
00:57:23,520 --> 00:57:26,160
filings within those groups and if you

1250
00:57:26,160 --> 00:57:27,280
can help us out by adding more

1251
00:57:27,280 --> 00:57:29,599
descriptive labels for what those errata

1252
00:57:29,599 --> 00:57:31,680
filings are saying

1253
00:57:31,680 --> 00:57:33,280
ultimately it'll not only help our

1254
00:57:33,280 --> 00:57:35,119
research but we will make the dataset

1255
00:57:35,119 --> 00:57:36,000
public

1256
00:57:36,000 --> 00:57:39,040
after it's done as well so please do

1257
00:57:39,040 --> 00:57:40,400
visit the website and

1258
00:57:40,400 --> 00:57:42,880
contribute some labeling if you can

1259
00:57:42,880 --> 00:57:46,839
and i'm done thank you very much

1260
00:57:46,960 --> 00:57:52,190
[Applause]

1261
00:57:56,960 --> 00:57:59,040
i think we normalized by page count

1262
00:57:59,040 --> 00:58:00,640
which is not

1263
00:58:00,640 --> 00:58:01,839
excellent but there is some

1264
00:58:01,839 --> 00:58:04,480
normalization

1265
00:58:05,359 --> 00:58:07,680
all right

1266
00:58:13,520 --> 00:58:17,599
um so we are looking at all filings um

1267
00:58:17,599 --> 00:58:18,960
there's a bit of an issue in the data

1268
00:58:18,960 --> 00:58:21,440
set and that there's lots of uh filed

1269
00:58:21,440 --> 00:58:23,599
but not dealt with errata and so if we

1270
00:58:23,599 --> 00:58:25,599
start to sort of separate that out we're

1271
00:58:25,599 --> 00:58:28,160
losing a lot of the data set

1272
00:58:28,160 --> 00:58:31,119
but yeah we will look at the status as

1273
00:58:31,119 --> 00:58:32,960
well

1274
00:58:32,960 --> 00:58:37,480
so your first code

1275
00:58:49,200 --> 00:58:50,960
yes so

1276
00:58:50,960 --> 00:58:52,960
have you tried to account for that in

1277
00:58:52,960 --> 00:58:55,359
any way shape or form by looking at

1278
00:58:55,359 --> 00:58:58,160
essentially what the back

1279
00:58:58,160 --> 00:59:00,640
observation needs to be for in terms of

1280
00:59:00,640 --> 00:59:02,400
working groups because it's not employed

1281
00:59:02,400 --> 00:59:05,280
to me that

1282
00:59:09,520 --> 00:59:11,040
yeah so that's not the purpose of this

1283
00:59:11,040 --> 00:59:13,839
work obviously but we do have a paper on

1284
00:59:13,839 --> 00:59:15,280
that looks at that sort of trend and

1285
00:59:15,280 --> 00:59:17,119
looks at you know whether

1286
00:59:17,119 --> 00:59:19,200
rfc was building on prior rfcs and

1287
00:59:19,200 --> 00:59:20,640
obviously that might mean that it would

1288
00:59:20,640 --> 00:59:22,000
take longer than

1289
00:59:22,000 --> 00:59:24,400
we did explore uh the trends behind that

1290
00:59:24,400 --> 00:59:27,400
um

1291
00:59:30,079 --> 00:59:32,640
definitely not why not

1292
00:59:32,640 --> 00:59:34,000
i don't want people to throw things at

1293
00:59:34,000 --> 00:59:36,400
me um yeah but i happen to share the

1294
00:59:36,400 --> 00:59:38,799
details

1295
00:59:41,680 --> 00:59:45,558
okay thank you very much

1296
00:59:49,280 --> 00:59:51,680
okay

1297
00:59:53,839 --> 00:59:55,599
that's that's that's that's that's very

1298
00:59:55,599 --> 00:59:56,799
much audio

1299
00:59:56,799 --> 01:00:00,280
can you hear this

1300
01:00:10,640 --> 01:00:14,040
okay so

1301
01:00:15,119 --> 01:00:17,599
let's do this again

1302
01:00:17,599 --> 01:00:20,400
so after sodastream let's see without we

1303
01:00:20,400 --> 01:00:23,760
did dns

1304
01:00:29,760 --> 01:00:33,839
oh let me make that full screen

1305
01:00:37,359 --> 01:00:40,359
right

1306
01:00:43,480 --> 01:00:46,610
[Music]

1307
01:00:46,799 --> 01:00:49,200
there we go

1308
01:00:49,200 --> 01:00:52,480
yeah so we had a lot of people again in

1309
01:00:52,480 --> 01:00:55,520
the dns hackathon

1310
01:00:55,520 --> 01:00:57,359
area over there

1311
01:00:57,359 --> 01:01:00,799
and one of the things we did was

1312
01:01:00,799 --> 01:01:02,799
extend the dns errors

1313
01:01:02,799 --> 01:01:05,760
of while implementing extended dns

1314
01:01:05,760 --> 01:01:08,079
errors

1315
01:01:08,079 --> 01:01:12,640
there were certain situations where

1316
01:01:12,640 --> 01:01:14,400
we we think a

1317
01:01:14,400 --> 01:01:18,079
error code is justified but no extended

1318
01:01:18,079 --> 01:01:20,559
dns error is yet defined

1319
01:01:20,559 --> 01:01:22,880
uh maybe i should have explained what it

1320
01:01:22,880 --> 01:01:24,960
is quickly

1321
01:01:24,960 --> 01:01:26,240
so

1322
01:01:26,240 --> 01:01:29,280
a dns error looks like

1323
01:01:29,280 --> 01:01:32,160
you know there is a error an extended

1324
01:01:32,160 --> 01:01:34,400
dns error tells you what the error

1325
01:01:34,400 --> 01:01:36,000
exactly is

1326
01:01:36,000 --> 01:01:38,799
and so we discussed so you you see that

1327
01:01:38,799 --> 01:01:43,119
uh the policy to register new info cards

1328
01:01:43,119 --> 01:01:45,680
is first come first served

1329
01:01:45,680 --> 01:01:49,119
so anyone can just register

1330
01:01:49,119 --> 01:01:52,480
but it would be nice if all the dns

1331
01:01:52,480 --> 01:01:55,039
implementations would return the same

1332
01:01:55,039 --> 01:01:57,200
info codes for the same

1333
01:01:57,200 --> 01:01:58,799
situations

1334
01:01:58,799 --> 01:02:01,760
so that's what we discussed

1335
01:02:01,760 --> 01:02:04,799
and there's a draft with the new info

1336
01:02:04,799 --> 01:02:08,240
codes and we discussed that among the

1337
01:02:08,240 --> 01:02:11,359
dns implementers

1338
01:02:11,680 --> 01:02:15,760
this is a new id driver and dns set

1339
01:02:15,760 --> 01:02:16,559
it

1340
01:02:16,559 --> 01:02:20,160
allows you to try out dns before going

1341
01:02:20,160 --> 01:02:21,440
live with it

1342
01:02:21,440 --> 01:02:24,319
because that's a bit scary for uh many

1343
01:02:24,319 --> 01:02:25,520
people

1344
01:02:25,520 --> 01:02:27,680
and rightfully so

1345
01:02:27,680 --> 01:02:30,720
and it does this it's the idea is to

1346
01:02:30,720 --> 01:02:33,680
have a new delegation signer

1347
01:02:33,680 --> 01:02:36,559
algorithm which just wraps

1348
01:02:36,559 --> 01:02:38,960
existing delegations china algorithm and

1349
01:02:38,960 --> 01:02:40,400
just signals

1350
01:02:40,400 --> 01:02:43,599
this is driven dynasec

1351
01:02:43,599 --> 01:02:45,119
this is the id

1352
01:02:45,119 --> 01:02:47,760
if you have driver and dns in the

1353
01:02:47,760 --> 01:02:48,880
parents

1354
01:02:48,880 --> 01:02:51,280
you're going to try that first if it

1355
01:02:51,280 --> 01:02:53,920
works great the answer is secure

1356
01:02:53,920 --> 01:02:55,200
if it doesn't

1357
01:02:55,200 --> 01:02:57,680
then you fall back to what the situation

1358
01:02:57,680 --> 01:03:01,200
would be without this delegation fighter

1359
01:03:01,200 --> 01:03:03,520
so if dry burn is the only one you fall

1360
01:03:03,520 --> 01:03:05,200
back to insecure

1361
01:03:05,200 --> 01:03:07,280
if there are other situations you fall

1362
01:03:07,280 --> 01:03:10,240
back to secure probably but that's where

1363
01:03:10,240 --> 01:03:11,200
you can

1364
01:03:11,200 --> 01:03:14,319
try out like algorithm draw overs and

1365
01:03:14,319 --> 01:03:18,160
all sorts of dnsx situations

1366
01:03:18,160 --> 01:03:21,440
so this has to be backwards compatible

1367
01:03:21,440 --> 01:03:22,880
so we we

1368
01:03:22,880 --> 01:03:25,280
what we did was run ripe atlas

1369
01:03:25,280 --> 01:03:27,440
measurements with the

1370
01:03:27,440 --> 01:03:30,559
new delegation signer

1371
01:03:30,559 --> 01:03:33,760
unfortunately ripe atlas had some issues

1372
01:03:33,760 --> 01:03:36,319
so there are no actual numbers in these

1373
01:03:36,319 --> 01:03:38,319
fender grooms yet

1374
01:03:38,319 --> 01:03:41,440
but hopefully they will be there when a

1375
01:03:41,440 --> 01:03:45,559
dinosaur is happening

1376
01:03:45,680 --> 01:03:48,799
catalog zones we did interoperability

1377
01:03:48,799 --> 01:03:49,839
testing

1378
01:03:49,839 --> 01:03:52,160
there's a new binder implementation for

1379
01:03:52,160 --> 01:03:55,119
the version in the draft

1380
01:03:55,119 --> 01:03:56,000
and

1381
01:03:56,000 --> 01:03:58,720
we created a table

1382
01:03:58,720 --> 01:04:02,000
on the hackathon wiki to coordinate

1383
01:04:02,000 --> 01:04:04,920
which catalogs were served by which

1384
01:04:04,920 --> 01:04:06,960
implementations and which other

1385
01:04:06,960 --> 01:04:09,599
implementations consumed them

1386
01:04:09,599 --> 01:04:13,839
so there was a good progress there

1387
01:04:14,559 --> 01:04:15,920
yep

1388
01:04:15,920 --> 01:04:17,520
and then indeed

1389
01:04:17,520 --> 01:04:18,799
finally

1390
01:04:18,799 --> 01:04:21,759
there was the uh

1391
01:04:22,960 --> 01:04:25,680
well that's not completely correct i

1392
01:04:25,680 --> 01:04:26,480
think

1393
01:04:26,480 --> 01:04:28,480
oh

1394
01:04:28,480 --> 01:04:31,520
that was a dynamic update over encrypted

1395
01:04:31,520 --> 01:04:32,559
transport

1396
01:04:32,559 --> 01:04:35,039
unfortunately this is not the slide

1397
01:04:35,039 --> 01:04:36,880
is not correct but

1398
01:04:36,880 --> 01:04:38,640
this doesn't really matter i can tell

1399
01:04:38,640 --> 01:04:39,760
about it

1400
01:04:39,760 --> 01:04:40,400
so

1401
01:04:40,400 --> 01:04:42,720
queries can go now over encrypted

1402
01:04:42,720 --> 01:04:46,480
transport and recently also

1403
01:04:46,480 --> 01:04:50,079
transport over tls in dns

1404
01:04:50,079 --> 01:04:52,960
and this is our id to also do dynamic

1405
01:04:52,960 --> 01:04:55,599
updates over encrypted transports

1406
01:04:55,599 --> 01:04:57,599
and there's a server implementation for

1407
01:04:57,599 --> 01:04:59,359
this now and several client

1408
01:04:59,359 --> 01:05:01,119
implementations

1409
01:05:01,119 --> 01:05:03,359
there were a lot of people working on

1410
01:05:03,359 --> 01:05:05,680
this

1411
01:05:06,720 --> 01:05:09,280
online so not in person

1412
01:05:09,280 --> 01:05:10,880
and they

1413
01:05:10,880 --> 01:05:14,240
booked a great success

1414
01:05:14,240 --> 01:05:16,880
here you can see benjamin frye reporting

1415
01:05:16,880 --> 01:05:20,480
success on the dns of a tls

1416
01:05:20,480 --> 01:05:22,480
dynamic updates

1417
01:05:22,480 --> 01:05:25,599
implemented in rust

1418
01:05:26,079 --> 01:05:27,119
and then

1419
01:05:27,119 --> 01:05:28,640
tony finch

1420
01:05:28,640 --> 01:05:31,680
started recently working for ic

1421
01:05:31,680 --> 01:05:35,440
but decided to do some improvements for

1422
01:05:35,440 --> 01:05:38,640
a an illness implementation so that's

1423
01:05:38,640 --> 01:05:40,000
really great

1424
01:05:40,000 --> 01:05:42,880
thank you tony

1425
01:05:42,960 --> 01:05:44,720
and yeah

1426
01:05:44,720 --> 01:05:46,559
but what got done

1427
01:05:46,559 --> 01:05:49,760
lots and lots of excellent conversation

1428
01:05:49,760 --> 01:05:51,280
aubergine

1429
01:05:51,280 --> 01:05:54,319
software developers met each other again

1430
01:05:54,319 --> 01:05:57,359
since a long time in person

1431
01:05:57,359 --> 01:06:00,319
and we met with operators and

1432
01:06:00,319 --> 01:06:02,000
now there's nothing that

1433
01:06:02,000 --> 01:06:05,119
can beat the in-person hackathon like

1434
01:06:05,119 --> 01:06:09,520
that so that's what we learned

1435
01:06:10,640 --> 01:06:14,160
and that's it so if anyone has questions

1436
01:06:14,160 --> 01:06:17,160
yes

1437
01:06:17,520 --> 01:06:20,400
the uh driving dns is there a projected

1438
01:06:20,400 --> 01:06:23,119
availability

1439
01:06:25,200 --> 01:06:26,000
uh

1440
01:06:26,000 --> 01:06:29,039
the status is that it's just the id

1441
01:06:29,039 --> 01:06:33,240
currently so no implementation

1442
01:06:37,280 --> 01:06:39,680
absolutely yeah the draft is on the

1443
01:06:39,680 --> 01:06:42,160
slides

1444
01:06:42,480 --> 01:06:43,359
and

1445
01:06:43,359 --> 01:06:47,038
i will present on it

1446
01:06:51,359 --> 01:06:53,359
it's not yet a work group

1447
01:06:53,359 --> 01:06:56,400
work so we have to see if it's

1448
01:06:56,400 --> 01:06:58,400
if the work group is interested in this

1449
01:06:58,400 --> 01:07:01,359
but yes

1450
01:07:01,359 --> 01:07:03,680
thanks

1451
01:07:05,220 --> 01:07:12,339
[Applause]

1452
01:07:12,960 --> 01:07:15,839
okay

1453
01:07:18,160 --> 01:07:19,920
what do we have next

1454
01:07:19,920 --> 01:07:22,160
so

1455
01:07:22,559 --> 01:07:25,359
bmwf

1456
01:07:27,760 --> 01:07:32,079
anyone uh in the room for bmwf

1457
01:07:35,440 --> 01:07:38,160
is there a remote presenter for that one

1458
01:07:38,160 --> 01:07:42,598
we could we could try that again

1459
01:07:45,520 --> 01:07:47,119
i don't see anyone coming up so i'm

1460
01:07:47,119 --> 01:07:50,160
gonna go to the next one

1461
01:07:50,799 --> 01:07:54,720
okay how about pdmv

1462
01:07:54,720 --> 01:07:57,720
great

1463
01:08:06,079 --> 01:08:09,240
all right

1464
01:08:10,000 --> 01:08:11,760
hello everyone

1465
01:08:11,760 --> 01:08:13,920
my name is amiya deshpande i am a

1466
01:08:13,920 --> 01:08:16,560
student at nitk suratkal

1467
01:08:16,560 --> 01:08:18,560
i am the co-author of one of the

1468
01:08:18,560 --> 01:08:21,199
co-authors of

1469
01:08:22,839 --> 01:08:24,960
pdmv2 so

1470
01:08:24,960 --> 01:08:27,759
pdmv2 is the version 2 of

1471
01:08:27,759 --> 01:08:31,120
pdm rfc8250

1472
01:08:31,120 --> 01:08:33,679
pdm is performance and diagnostic

1473
01:08:33,679 --> 01:08:35,198
metrics

1474
01:08:35,198 --> 01:08:38,799
basically it gives you the information

1475
01:08:38,799 --> 01:08:41,198
about round trip time the server

1476
01:08:41,198 --> 01:08:43,839
processing capabilities and

1477
01:08:43,839 --> 01:08:47,120
the sequence numbers in packets

1478
01:08:47,120 --> 01:08:50,399
it's sent as an ipv6 destination option

1479
01:08:50,399 --> 01:08:53,759
extension header and we realized the

1480
01:08:53,759 --> 01:08:55,600
requirement for

1481
01:08:55,600 --> 01:08:57,120
securing this

1482
01:08:57,120 --> 01:09:02,000
so pdmv2 tries to add encryption to it

1483
01:09:02,000 --> 01:09:05,040
we divide this process into pdm v2

1484
01:09:05,040 --> 01:09:06,960
registration and

1485
01:09:06,960 --> 01:09:10,640
the data transfer phase where we

1486
01:09:10,640 --> 01:09:12,479
send the actual

1487
01:09:12,479 --> 01:09:14,960
extension header encrypted

1488
01:09:14,960 --> 01:09:19,040
and the receiver decrypts it on its side

1489
01:09:19,040 --> 01:09:20,880
um

1490
01:09:20,880 --> 01:09:23,679
in the internet draft we plan to

1491
01:09:23,679 --> 01:09:26,719
standardize the

1492
01:09:26,719 --> 01:09:28,960
the data transfer phase

1493
01:09:28,960 --> 01:09:31,520
but for the hackathon we thought we'll

1494
01:09:31,520 --> 01:09:33,520
have a complete implementation starting

1495
01:09:33,520 --> 01:09:35,279
from the registration

1496
01:09:35,279 --> 01:09:37,600
this process is kept um

1497
01:09:37,600 --> 01:09:39,839
well we propose a

1498
01:09:39,839 --> 01:09:42,880
sample registration protocol and

1499
01:09:42,880 --> 01:09:45,279
we keep an option open for enterprises

1500
01:09:45,279 --> 01:09:47,198
to implement their own registration

1501
01:09:47,198 --> 01:09:49,359
protocol

1502
01:09:49,359 --> 01:09:50,640
so

1503
01:09:50,640 --> 01:09:52,158
what we have done for the registration

1504
01:09:52,158 --> 01:09:55,360
protocol is we have

1505
01:09:55,360 --> 01:09:57,040
broken down into

1506
01:09:57,040 --> 01:09:59,679
primary server primary client secondary

1507
01:09:59,679 --> 01:10:01,520
server secondary client

1508
01:10:01,520 --> 01:10:03,120
and

1509
01:10:03,120 --> 01:10:05,440
in the hackathon we focus on the primary

1510
01:10:05,440 --> 01:10:08,000
primary registration where we

1511
01:10:08,000 --> 01:10:09,440
try to

1512
01:10:09,440 --> 01:10:13,360
establish a shared context

1513
01:10:13,360 --> 01:10:14,719
we

1514
01:10:14,719 --> 01:10:17,600
were just having discussions on

1515
01:10:17,600 --> 01:10:19,040
whether to have authentication

1516
01:10:19,040 --> 01:10:22,800
authorization and how do we do it

1517
01:10:23,040 --> 01:10:23,760
so

1518
01:10:23,760 --> 01:10:26,159
uh the plan solutions were

1519
01:10:26,159 --> 01:10:28,159
um so so far

1520
01:10:28,159 --> 01:10:30,719
of course we need an authentication to

1521
01:10:30,719 --> 01:10:32,400
share this information

1522
01:10:32,400 --> 01:10:34,800
so we rely on the standard established

1523
01:10:34,800 --> 01:10:38,480
protocols tls mls for authentication

1524
01:10:38,480 --> 01:10:42,000
and then we have an allow list which

1525
01:10:42,000 --> 01:10:45,120
can have ip prefixes our

1526
01:10:45,120 --> 01:10:47,280
client identities which are derived from

1527
01:10:47,280 --> 01:10:50,080
authentication

1528
01:10:50,480 --> 01:10:53,440
for yeah so

1529
01:10:53,440 --> 01:10:56,400
yeah so what we got done so currently we

1530
01:10:56,400 --> 01:10:58,560
are working on a sample registration

1531
01:10:58,560 --> 01:11:01,520
protocol and it didn't have the facility

1532
01:11:01,520 --> 01:11:02,400
for

1533
01:11:02,400 --> 01:11:05,760
um authentication and authorization

1534
01:11:05,760 --> 01:11:06,960
so

1535
01:11:06,960 --> 01:11:09,199
we created a sample

1536
01:11:09,199 --> 01:11:11,679
code for allow list

1537
01:11:11,679 --> 01:11:13,440
integrated it into the registration

1538
01:11:13,440 --> 01:11:15,040
protocol

1539
01:11:15,040 --> 01:11:17,600
we did have conversations on how the

1540
01:11:17,600 --> 01:11:19,760
primary primary key encapsulation

1541
01:11:19,760 --> 01:11:21,679
mechanism should happen

1542
01:11:21,679 --> 01:11:24,320
we are using hpk

1543
01:11:24,320 --> 01:11:28,000
for our encryption and the registration

1544
01:11:28,000 --> 01:11:30,000
phase basically performs the key

1545
01:11:30,000 --> 01:11:33,040
encapsulation mechanism

1546
01:11:33,040 --> 01:11:36,320
tomorrow we'll be showing a demo

1547
01:11:36,320 --> 01:11:39,120
you have a side meeting scheduled in

1548
01:11:39,120 --> 01:11:41,199
green room 1

1549
01:11:41,199 --> 01:11:43,839
8 am

1550
01:11:44,480 --> 01:11:46,239
what we learned so

1551
01:11:46,239 --> 01:11:49,760
pdmv2 is a new concept and

1552
01:11:49,760 --> 01:11:50,960
we

1553
01:11:50,960 --> 01:11:53,760
would like to get a poc

1554
01:11:53,760 --> 01:11:55,040
which works

1555
01:11:55,040 --> 01:11:57,280
and

1556
01:11:57,280 --> 01:11:58,320
which

1557
01:11:58,320 --> 01:12:01,360
covers our complete idea

1558
01:12:01,360 --> 01:12:03,280
and registration uh

1559
01:12:03,280 --> 01:12:05,199
for the registration protocol we were

1560
01:12:05,199 --> 01:12:07,040
working on the key generation till now

1561
01:12:07,040 --> 01:12:08,560
and

1562
01:12:08,560 --> 01:12:10,800
from yesterday we have been working into

1563
01:12:10,800 --> 01:12:12,880
identity resolution

1564
01:12:12,880 --> 01:12:14,640
authentication and

1565
01:12:14,640 --> 01:12:17,920
the authorization process

1566
01:12:19,199 --> 01:12:20,880
so

1567
01:12:20,880 --> 01:12:24,960
we look towards any user feedbacks and

1568
01:12:24,960 --> 01:12:27,520
have a complete implementation including

1569
01:12:27,520 --> 01:12:29,600
registration and

1570
01:12:29,600 --> 01:12:32,480
the data transfer phase which we are

1571
01:12:32,480 --> 01:12:35,040
proposing

1572
01:12:35,040 --> 01:12:38,640
so our team consists of uh

1573
01:12:38,640 --> 01:12:40,480
nalini mike

1574
01:12:40,480 --> 01:12:43,440
me tommaso and we all are first timers

1575
01:12:43,440 --> 01:12:44,239
at

1576
01:12:44,239 --> 01:12:46,480
iatf hackathon

1577
01:12:46,480 --> 01:12:49,840
so here's our email and draft link thank

1578
01:12:49,840 --> 01:12:52,080
you

1579
01:12:52,720 --> 01:13:00,520
[Applause]

1580
01:13:00,960 --> 01:13:04,280
any questions

1581
01:13:05,360 --> 01:13:06,400
okay

1582
01:13:06,400 --> 01:13:09,199
thank you thank you

1583
01:13:13,040 --> 01:13:15,360
best test just making a quick test

1584
01:13:15,360 --> 01:13:19,839
before doing injection works

1585
01:13:22,640 --> 01:13:24,320
all right so we have just a couple

1586
01:13:24,320 --> 01:13:26,560
minutes for a little bit of technical uh

1587
01:13:26,560 --> 01:13:28,560
troubleshooting here

1588
01:13:28,560 --> 01:13:32,600
and then we'll get started again

1589
01:13:35,280 --> 01:13:36,960
testing testing

1590
01:13:36,960 --> 01:13:39,920
testing i'm talking

1591
01:13:40,320 --> 01:13:42,320
doesn't look like they can hear me yet

1592
01:13:42,320 --> 01:13:44,960
but audio is supposed to go through but

1593
01:13:44,960 --> 01:13:46,960
it's apparently very low in the

1594
01:13:46,960 --> 01:13:48,560
in the physical room there so that's

1595
01:13:48,560 --> 01:13:52,000
what we are debugging right now

1596
01:13:53,199 --> 01:13:55,760
testing testing just double checking

1597
01:13:55,760 --> 01:13:57,760
testing

1598
01:13:57,760 --> 01:14:00,080
test

1599
01:14:10,480 --> 01:14:11,440
okay

1600
01:14:11,440 --> 01:14:13,520
well if only we could fix bugs in the

1601
01:14:13,520 --> 01:14:16,800
hackathon that quickly

1602
01:14:17,360 --> 01:14:20,000
all right

1603
01:14:21,440 --> 01:14:25,840
so let's see where was i we are up to uh

1604
01:14:25,840 --> 01:14:28,840
cozy

1605
01:14:29,120 --> 01:14:33,360
is that oh okay honest great

1606
01:14:41,840 --> 01:14:44,560
hi everyone uh that's a one person

1607
01:14:44,560 --> 01:14:47,840
project um i was this time uh previously

1608
01:14:47,840 --> 01:14:50,000
we were a bunch of folks but uh due to

1609
01:14:50,000 --> 01:14:52,080
travel restrictions and so on

1610
01:14:52,080 --> 01:14:53,440
just me here

1611
01:14:53,440 --> 01:14:56,000
um i was working on firmware encryption

1612
01:14:56,000 --> 01:14:57,600
which is related to the suit working

1613
01:14:57,600 --> 01:15:00,560
group and uses uh specifically working

1614
01:15:00,560 --> 01:15:03,040
courses of new work

1615
01:15:03,040 --> 01:15:05,520
and the plan was to implement the cosy

1616
01:15:05,520 --> 01:15:08,000
hp key hb key is the hybrid public key

1617
01:15:08,000 --> 01:15:10,719
encryption um a key distribution

1618
01:15:10,719 --> 01:15:13,760
mechanism and the idea was to contribute

1619
01:15:13,760 --> 01:15:15,440
that code

1620
01:15:15,440 --> 01:15:17,760
of that implementation to the tcosi

1621
01:15:17,760 --> 01:15:19,679
library which lawrence

1622
01:15:19,679 --> 01:15:22,800
is the maintainer for and implements or

1623
01:15:22,800 --> 01:15:24,880
offers that implementation in c

1624
01:15:24,880 --> 01:15:26,719
uh so have a look at it like to the

1625
01:15:26,719 --> 01:15:28,719
decocy library in general

1626
01:15:28,719 --> 01:15:32,239
and i want to use an uh an api called

1627
01:15:32,239 --> 01:15:34,800
the bsa crypto api which uh provides an

1628
01:15:34,800 --> 01:15:36,560
abstraction layer over different uh

1629
01:15:36,560 --> 01:15:39,040
low-level crypto implementations

1630
01:15:39,040 --> 01:15:41,280
specifically abstracting hardware

1631
01:15:41,280 --> 01:15:43,760
related crypto features

1632
01:15:43,760 --> 01:15:45,600
and obviously i was working on that i

1633
01:15:45,600 --> 01:15:47,520
got the encrypt and decrypt

1634
01:15:47,520 --> 01:15:50,400
functionality done with this uh the

1635
01:15:50,400 --> 01:15:54,159
decocy internal abstraction layer uh

1636
01:15:54,159 --> 01:15:55,920
that library

1637
01:15:55,920 --> 01:15:58,800
offers um the possibility to swap out

1638
01:15:58,800 --> 01:16:01,360
different uh crypto implementations uh

1639
01:16:01,360 --> 01:16:03,840
currently there are two one based on psa

1640
01:16:03,840 --> 01:16:05,520
crypto api and the other one based on

1641
01:16:05,520 --> 01:16:09,040
openssl so it's quite convenient

1642
01:16:09,040 --> 01:16:10,480
to actually do that

1643
01:16:10,480 --> 01:16:11,600
i'm

1644
01:16:11,600 --> 01:16:13,840
happy to be here to see some of the

1645
01:16:13,840 --> 01:16:15,600
familiar faces again

1646
01:16:15,600 --> 01:16:17,280
sitting next to lawrence which was

1647
01:16:17,280 --> 01:16:19,040
obviously a

1648
01:16:19,040 --> 01:16:21,280
a big benefit um being next to the main

1649
01:16:21,280 --> 01:16:23,520
dana one of the big benefits of having a

1650
01:16:23,520 --> 01:16:25,199
face-to-face event rather than a virtual

1651
01:16:25,199 --> 01:16:26,719
one

1652
01:16:26,719 --> 01:16:28,640
uh made some good progress but uh of

1653
01:16:28,640 --> 01:16:30,400
course i'm not done yet

1654
01:16:30,400 --> 01:16:32,960
just uh cozy is not a terribly

1655
01:16:32,960 --> 01:16:35,840
complicated specification but still

1656
01:16:35,840 --> 01:16:37,920
complicated enough

1657
01:16:37,920 --> 01:16:40,080
for this purpose so the content will be

1658
01:16:40,080 --> 01:16:42,800
uploaded to this repository

1659
01:16:42,800 --> 01:16:44,719
and

1660
01:16:44,719 --> 01:16:47,920
yeah that was it two links to the

1661
01:16:47,920 --> 01:16:50,320
specifications that are relevant uh one

1662
01:16:50,320 --> 01:16:53,360
is obviously this new cosy hp key

1663
01:16:53,360 --> 01:16:55,120
functionality and the other one is where

1664
01:16:55,120 --> 01:16:58,719
it goes into to encrypt our firmware for

1665
01:16:58,719 --> 01:17:00,960
iot devices and that's

1666
01:17:00,960 --> 01:17:03,840
all there is to say

1667
01:17:05,130 --> 01:17:11,920
[Applause]

1668
01:17:11,920 --> 01:17:13,520
should i make hannah skip back up here

1669
01:17:13,520 --> 01:17:17,040
for questions any questions for them

1670
01:17:17,040 --> 01:17:19,440
okay

1671
01:17:26,080 --> 01:17:26,650
and

1672
01:17:26,650 --> 01:17:28,000
[Music]

1673
01:17:28,000 --> 01:17:30,239
eap

1674
01:17:30,239 --> 01:17:31,280
eap

1675
01:17:31,280 --> 01:17:33,520
noob

1676
01:17:33,520 --> 01:17:36,080
oh great

1677
01:17:38,800 --> 01:17:40,080
do you want to drive

1678
01:17:40,080 --> 01:17:41,920
you can use this laptop or if you want

1679
01:17:41,920 --> 01:17:43,679
to drive from yours just you'll have to

1680
01:17:43,679 --> 01:17:47,280
request the share okay

1681
01:17:47,600 --> 01:17:50,640
we will do that

1682
01:17:54,719 --> 01:17:57,719
okay

1683
01:18:04,400 --> 01:18:08,159
okay yeah so um i was working on eep

1684
01:18:08,159 --> 01:18:12,839
noob and new draft ebutter

1685
01:18:13,520 --> 01:18:16,560
my plan was to actually implement ipnob

1686
01:18:16,560 --> 01:18:18,800
into the esp

1687
01:18:18,800 --> 01:18:22,040
development framework esp-idf for

1688
01:18:22,040 --> 01:18:23,600
esp-32

1689
01:18:23,600 --> 01:18:28,040
ipnob rfc 9140

1690
01:18:28,080 --> 01:18:30,480
and server implementation already

1691
01:18:30,480 --> 01:18:32,480
existed from the masters project at the

1692
01:18:32,480 --> 01:18:34,239
university of brim where i'm currently

1693
01:18:34,239 --> 01:18:35,840
in

1694
01:18:35,840 --> 01:18:40,000
what i actually did or get done is to

1695
01:18:40,000 --> 01:18:42,080
have a first functioning code for each

1696
01:18:42,080 --> 01:18:43,520
noob but not

1697
01:18:43,520 --> 01:18:45,600
completely mainly just the json and

1698
01:18:45,600 --> 01:18:47,920
message parsing and checking for the

1699
01:18:47,920 --> 01:18:50,400
correct format it's not yet completely

1700
01:18:50,400 --> 01:18:51,840
functional the key handling and the

1701
01:18:51,840 --> 01:18:53,600
cryptography parts are completely

1702
01:18:53,600 --> 01:18:55,360
missing

1703
01:18:55,360 --> 01:18:58,640
mostly because i had to figure out how

1704
01:18:58,640 --> 01:19:02,560
esp-idf is handling the eep stack

1705
01:19:02,560 --> 01:19:04,640
as a side project

1706
01:19:04,640 --> 01:19:07,360
or site work i looked a little bit into

1707
01:19:07,360 --> 01:19:10,320
ipooter the one new draft i'm

1708
01:19:10,320 --> 01:19:12,080
i wrote

1709
01:19:12,080 --> 01:19:15,040
to improve the um or to achieve the same

1710
01:19:15,040 --> 01:19:17,360
goals as eep nuke but with a different

1711
01:19:17,360 --> 01:19:19,600
message format each noob uses

1712
01:19:19,600 --> 01:19:23,840
json e putter will use sibo

1713
01:19:23,840 --> 01:19:27,360
so that was a side project that i did

1714
01:19:27,360 --> 01:19:29,600
at the same time

1715
01:19:29,600 --> 01:19:32,159
and that's actually all i did

1716
01:19:32,159 --> 01:19:34,239
because it took quite a long time to

1717
01:19:34,239 --> 01:19:37,760
figure out esp idf

1718
01:19:37,760 --> 01:19:40,560
any questions

1719
01:19:45,199 --> 01:19:46,860
okay

1720
01:19:46,860 --> 01:19:52,929
[Applause]

1721
01:19:54,560 --> 01:19:56,900
okay

1722
01:19:56,900 --> 01:20:00,009
[Music]

1723
01:20:03,280 --> 01:20:06,480
okay and then we have rare free rtr so

1724
01:20:06,480 --> 01:20:08,880
it looks like uh barry converted your

1725
01:20:08,880 --> 01:20:11,440
slides to pdf so you can share from here

1726
01:20:11,440 --> 01:20:13,360
if you want from yours

1727
01:20:13,360 --> 01:20:14,960
but you'll have to

1728
01:20:14,960 --> 01:20:18,000
you want to drive from yours

1729
01:20:18,000 --> 01:20:21,679
okay i'll just pull it up here

1730
01:20:27,760 --> 01:20:28,880
great

1731
01:20:28,880 --> 01:20:30,560
looks a bit different than on my screen

1732
01:20:30,560 --> 01:20:32,320
i hope the pictures come out hi i'm

1733
01:20:32,320 --> 01:20:33,840
simon from switch

1734
01:20:33,840 --> 01:20:34,880
we're

1735
01:20:34,880 --> 01:20:37,199
the rare free router team it's a bit

1736
01:20:37,199 --> 01:20:38,159
different

1737
01:20:38,159 --> 01:20:40,639
in that we are not centered around idf

1738
01:20:40,639 --> 01:20:42,480
working groups or protocols but around

1739
01:20:42,480 --> 01:20:44,320
an implementation

1740
01:20:44,320 --> 01:20:47,440
so what is rare and what's re-router

1741
01:20:47,440 --> 01:20:49,840
oops sorry

1742
01:20:49,840 --> 01:20:52,080
next

1743
01:20:54,000 --> 01:20:57,280
oh sorry ford yeah thanks so free router

1744
01:20:57,280 --> 01:21:00,000
is a java based user space single

1745
01:21:00,000 --> 01:21:01,600
process implementation of many many

1746
01:21:01,600 --> 01:21:03,440
routing protocols

1747
01:21:03,440 --> 01:21:06,480
including mpls and bgp ospf and so on

1748
01:21:06,480 --> 01:21:11,120
and some new ones like amt for multicast

1749
01:21:11,120 --> 01:21:12,480
that have been

1750
01:21:12,480 --> 01:21:14,880
in existence for a couple of years

1751
01:21:14,880 --> 01:21:18,159
um rare is a project uh funded by the eu

1752
01:21:18,159 --> 01:21:20,480
under general so the research networking

1753
01:21:20,480 --> 01:21:22,719
community in europe

1754
01:21:22,719 --> 01:21:24,560
that tries to make this

1755
01:21:24,560 --> 01:21:26,800
useful in research and education

1756
01:21:26,800 --> 01:21:28,880
networking contexts

1757
01:21:28,880 --> 01:21:31,760
and one of the things we did is to add

1758
01:21:31,760 --> 01:21:33,679
support for some

1759
01:21:33,679 --> 01:21:36,320
data plane backends including the p4

1760
01:21:36,320 --> 01:21:38,639
based tofino platform

1761
01:21:38,639 --> 01:21:40,080
which is interesting because now we can

1762
01:21:40,080 --> 01:21:42,560
connect this open source user space

1763
01:21:42,560 --> 01:21:44,320
routing control plane

1764
01:21:44,320 --> 01:21:46,400
with very high speed

1765
01:21:46,400 --> 01:21:47,920
data plane

1766
01:21:47,920 --> 01:21:50,639
uh cheap routers based on

1767
01:21:50,639 --> 01:21:52,480
some chipsets that

1768
01:21:52,480 --> 01:21:53,920
support before

1769
01:21:53,920 --> 01:21:56,080
and build some real interesting uh

1770
01:21:56,080 --> 01:21:57,840
routers

1771
01:21:57,840 --> 01:22:00,239
and uh what we noticed is that um this

1772
01:22:00,239 --> 01:22:02,960
platform has become uh interesting to

1773
01:22:02,960 --> 01:22:04,080
some

1774
01:22:04,080 --> 01:22:05,840
uh people's special needs from our

1775
01:22:05,840 --> 01:22:08,320
research community and uh we have a

1776
01:22:08,320 --> 01:22:11,920
couple of them here so polka is a new

1777
01:22:11,920 --> 01:22:12,800
source

1778
01:22:12,800 --> 01:22:16,239
routing um or forwarding paradigm that

1779
01:22:16,239 --> 01:22:19,040
will be presented here on thursday by uh

1780
01:22:19,040 --> 01:22:21,040
two colleagues from our team

1781
01:22:21,040 --> 01:22:24,159
from brazil actually

1782
01:22:24,560 --> 01:22:27,120
that has been implemented in free router

1783
01:22:27,120 --> 01:22:28,880
including the p4

1784
01:22:28,880 --> 01:22:31,280
data plane implementation

1785
01:22:31,280 --> 01:22:32,880
exciting work

1786
01:22:32,880 --> 01:22:33,679
and

1787
01:22:33,679 --> 01:22:36,080
another example of these special

1788
01:22:36,080 --> 01:22:37,600
uses is

1789
01:22:37,600 --> 01:22:39,679
also represented here by carmen from

1790
01:22:39,679 --> 01:22:41,120
cern

1791
01:22:41,120 --> 01:22:43,280
where some physicists

1792
01:22:43,280 --> 01:22:45,920
reminded me of the alto talk

1793
01:22:45,920 --> 01:22:47,520
try to solve some other problems of

1794
01:22:47,520 --> 01:22:50,800
their very large data transfer needs

1795
01:22:50,800 --> 01:22:53,199
by marking flows using the ipv6 flow

1796
01:22:53,199 --> 01:22:55,199
label and doing traffic engineering

1797
01:22:55,199 --> 01:22:56,560
based on that

1798
01:22:56,560 --> 01:22:58,159
this is something that normal routers

1799
01:22:58,159 --> 01:22:59,840
don't do because they they don't use

1800
01:22:59,840 --> 01:23:01,440
flow labels for that but it's it's

1801
01:23:01,440 --> 01:23:03,360
fairly easy to implement if you control

1802
01:23:03,360 --> 01:23:04,719
the platform

1803
01:23:04,719 --> 01:23:06,719
so that is also something that we have

1804
01:23:06,719 --> 01:23:09,040
nice uh working

1805
01:23:09,040 --> 01:23:12,560
code for uh on this platform

1806
01:23:12,560 --> 01:23:14,880
so so when we haven't been working on

1807
01:23:14,880 --> 01:23:16,159
actively

1808
01:23:16,159 --> 01:23:17,040
so

1809
01:23:17,040 --> 01:23:19,280
actively developed protocols in the itf

1810
01:23:19,280 --> 01:23:20,880
but

1811
01:23:20,880 --> 01:23:22,320
of course some that were

1812
01:23:22,320 --> 01:23:24,400
implemented or that were defined before

1813
01:23:24,400 --> 01:23:26,400
and some that might come to the itf in

1814
01:23:26,400 --> 01:23:29,519
the future who knows

1815
01:23:30,719 --> 01:23:33,040
so the plan was mainly to bring our

1816
01:23:33,040 --> 01:23:34,880
community together because the people

1817
01:23:34,880 --> 01:23:35,600
who

1818
01:23:35,600 --> 01:23:38,080
joined the project over the past years

1819
01:23:38,080 --> 01:23:40,960
we never met in person for

1820
01:23:40,960 --> 01:23:43,440
various reasons well-known reasons

1821
01:23:43,440 --> 01:23:45,840
and we so we prepared a large list of

1822
01:23:45,840 --> 01:23:48,400
potential projects

1823
01:23:48,400 --> 01:23:50,080
most of which we can still move forward

1824
01:23:50,080 --> 01:23:52,400
to future hackathons because we worked

1825
01:23:52,400 --> 01:23:56,239
on some completely different stuff

1826
01:23:56,239 --> 01:23:57,840
and of course the images didn't make it

1827
01:23:57,840 --> 01:24:00,159
so maybe i should have

1828
01:24:00,159 --> 01:24:03,280
shared my phone but it's uh well

1829
01:24:03,280 --> 01:24:05,519
um

1830
01:24:08,239 --> 01:24:10,800
anyway so so we did do some

1831
01:24:10,800 --> 01:24:13,120
implementation uh the first small thing

1832
01:24:13,120 --> 01:24:15,360
we noticed is that uh the developer who

1833
01:24:15,360 --> 01:24:19,520
had free route as their laptop platform

1834
01:24:19,520 --> 01:24:21,840
gained ipv6 connectivity immediately

1835
01:24:21,840 --> 01:24:25,440
here but ipv4 wouldn't work because itf

1836
01:24:25,440 --> 01:24:29,040
network dhcp server sent an option that

1837
01:24:29,040 --> 01:24:31,280
free router had trouble with so

1838
01:24:31,280 --> 01:24:32,800
there was the first like warm-up

1839
01:24:32,800 --> 01:24:34,960
exercise to fix the platform to

1840
01:24:34,960 --> 01:24:37,360
understand that kind of option

1841
01:24:37,360 --> 01:24:38,800
which was interesting for the other

1842
01:24:38,800 --> 01:24:41,360
community members to see how how quickly

1843
01:24:41,360 --> 01:24:44,719
such a such a small fix is implemented

1844
01:24:44,719 --> 01:24:47,920
and then uh we spent the rest of the

1845
01:24:47,920 --> 01:24:50,239
time mostly working on one big feature

1846
01:24:50,239 --> 01:24:53,920
which is unicast rpf so it's a

1847
01:24:53,920 --> 01:24:56,000
it's a check for

1848
01:24:56,000 --> 01:24:59,440
against spoofed traffic based on um

1849
01:24:59,440 --> 01:25:02,239
routing lookups basically of the source

1850
01:25:02,239 --> 01:25:03,280
address

1851
01:25:03,280 --> 01:25:06,000
as opposed to the destination address

1852
01:25:06,000 --> 01:25:08,480
and uh there was some code that existed

1853
01:25:08,480 --> 01:25:11,760
on the in the control lane side and for

1854
01:25:11,760 --> 01:25:13,679
some of the data planes

1855
01:25:13,679 --> 01:25:15,920
but we

1856
01:25:15,920 --> 01:25:18,480
we added the p4 based

1857
01:25:18,480 --> 01:25:20,320
fast hardware implementation of this and

1858
01:25:20,320 --> 01:25:22,159
that turned out to be extremely

1859
01:25:22,159 --> 01:25:25,760
interesting to the newcomers among us

1860
01:25:25,760 --> 01:25:29,199
because we had to yeah okay so

1861
01:25:29,199 --> 01:25:32,400
if it's possible yes um yeah if yours is

1862
01:25:32,400 --> 01:25:34,880
working so i asked for sorry

1863
01:25:34,880 --> 01:25:37,040
sorry about this there should be some

1864
01:25:37,040 --> 01:25:38,840
some images here

1865
01:25:38,840 --> 01:25:42,880
okay i did

1866
01:25:44,639 --> 01:25:48,639
okay you really want to share yes

1867
01:25:48,639 --> 01:25:53,440
i hope it lets me oh no i think i

1868
01:25:53,440 --> 01:25:56,960
uh i think i missed a

1869
01:25:56,960 --> 01:25:58,639
okay uh

1870
01:25:58,639 --> 01:26:02,320
yeah with me just a second

1871
01:26:02,320 --> 01:26:03,760
okay that looks

1872
01:26:03,760 --> 01:26:06,480
looks a bit better huh

1873
01:26:06,480 --> 01:26:08,800
okay so so these were the um the things

1874
01:26:08,800 --> 01:26:09,520
we

1875
01:26:09,520 --> 01:26:11,440
we did uh the most important thing is

1876
01:26:11,440 --> 01:26:13,600
probably the the last the image because

1877
01:26:13,600 --> 01:26:16,239
we did manage to bring the uh at least a

1878
01:26:16,239 --> 01:26:18,080
part of the community together

1879
01:26:18,080 --> 01:26:21,199
and uh and provide like the the social

1880
01:26:21,199 --> 01:26:22,880
basis for a good

1881
01:26:22,880 --> 01:26:24,639
collaboration in the future

1882
01:26:24,639 --> 01:26:26,320
unfortunately not all of us could make

1883
01:26:26,320 --> 01:26:29,920
it here some had like covet or family

1884
01:26:29,920 --> 01:26:31,280
reasons

1885
01:26:31,280 --> 01:26:33,840
to stay at home

1886
01:26:33,840 --> 01:26:37,360
okay so so this unicast rpf feature

1887
01:26:37,360 --> 01:26:39,440
it was very interesting to us because it

1888
01:26:39,440 --> 01:26:41,360
touches all the all the components of

1889
01:26:41,360 --> 01:26:42,880
this three router

1890
01:26:42,880 --> 01:26:45,199
system including data planes first of

1891
01:26:45,199 --> 01:26:47,280
all the configuration

1892
01:26:47,280 --> 01:26:49,360
here you see the typical way it's

1893
01:26:49,360 --> 01:26:51,840
configured on an interface you you ask

1894
01:26:51,840 --> 01:26:54,239
for this

1895
01:26:54,239 --> 01:26:56,480
verify source that's

1896
01:26:56,480 --> 01:26:58,639
compatible with industry standard

1897
01:26:58,639 --> 01:27:00,320
routers

1898
01:27:00,320 --> 01:27:02,880
a couple of variants that are described

1899
01:27:02,880 --> 01:27:05,280
in different rfcs and uh is actually

1900
01:27:05,280 --> 01:27:08,080
ongoing work to refine this some more so

1901
01:27:08,080 --> 01:27:10,480
this also lays the basis for

1902
01:27:10,480 --> 01:27:12,400
implementations of new itf standards

1903
01:27:12,400 --> 01:27:14,960
that may come up

1904
01:27:14,960 --> 01:27:16,080
um

1905
01:27:16,080 --> 01:27:18,960
but the the tricky part is actually the

1906
01:27:18,960 --> 01:27:20,960
mapping to the high speed forwarding

1907
01:27:20,960 --> 01:27:22,159
plane

1908
01:27:22,159 --> 01:27:24,320
so as i said basically you just do a

1909
01:27:24,320 --> 01:27:26,960
look up in the normal forwarding table

1910
01:27:26,960 --> 01:27:28,960
but based on the source address rather

1911
01:27:28,960 --> 01:27:30,880
than the destination address

1912
01:27:30,880 --> 01:27:33,600
only the the folding hardware does not

1913
01:27:33,600 --> 01:27:35,840
permit you to do

1914
01:27:35,840 --> 01:27:37,280
two lookups

1915
01:27:37,280 --> 01:27:39,520
with different keys in the same table so

1916
01:27:39,520 --> 01:27:41,920
what we actually had to do is to

1917
01:27:41,920 --> 01:27:43,440
create

1918
01:27:43,440 --> 01:27:45,360
new tables which are basically a copy of

1919
01:27:45,360 --> 01:27:47,440
the normal forwarding table just for

1920
01:27:47,440 --> 01:27:50,719
this rpf lookup i think some some people

1921
01:27:50,719 --> 01:27:52,639
are dealing with some high-speed routers

1922
01:27:52,639 --> 01:27:54,159
know this issue

1923
01:27:54,159 --> 01:27:55,679
a typical

1924
01:27:55,679 --> 01:27:56,800
feature that

1925
01:27:56,800 --> 01:28:00,159
cuts your routing table capacity in half

1926
01:28:00,159 --> 01:28:02,560
so this had to be implemented

1927
01:28:02,560 --> 01:28:04,320
and we found some

1928
01:28:04,320 --> 01:28:07,520
interesting issues with this actually

1929
01:28:07,520 --> 01:28:08,320
so

1930
01:28:08,320 --> 01:28:10,719
it became quite

1931
01:28:10,719 --> 01:28:13,040
quite instructive

1932
01:28:13,040 --> 01:28:14,320
so uh

1933
01:28:14,320 --> 01:28:16,719
all of us got a good glimpse into the

1934
01:28:16,719 --> 01:28:18,719
the development process for free router

1935
01:28:18,719 --> 01:28:22,080
so we know now what's uh what's involved

1936
01:28:22,080 --> 01:28:24,239
in adding new features uh especially

1937
01:28:24,239 --> 01:28:26,159
ones that have data plane impact

1938
01:28:26,159 --> 01:28:29,120
so it's a good basis to implement

1939
01:28:29,120 --> 01:28:32,800
more protocols that you folks may

1940
01:28:32,800 --> 01:28:33,920
be um

1941
01:28:33,920 --> 01:28:35,760
creating

1942
01:28:35,760 --> 01:28:36,880
uh

1943
01:28:36,880 --> 01:28:39,120
one other thing we noticed is that the

1944
01:28:39,120 --> 01:28:40,719
ipv4

1945
01:28:40,719 --> 01:28:43,040
implementation of this urpf check worked

1946
01:28:43,040 --> 01:28:45,280
kind of right away naive implementation

1947
01:28:45,280 --> 01:28:48,320
but for ipv6 it took quite a bit longer

1948
01:28:48,320 --> 01:28:49,679
and the fundamental reason was that

1949
01:28:49,679 --> 01:28:50,480
people

1950
01:28:50,480 --> 01:28:54,080
25 years ago they just decided it's more

1951
01:28:54,080 --> 01:28:56,000
it should be simpler to fold the

1952
01:28:56,000 --> 01:28:58,080
neighbor discovery protocol into the ip

1953
01:28:58,080 --> 01:29:00,400
protocol whereas in ipv4 it's a separate

1954
01:29:00,400 --> 01:29:02,639
protocol this is our protocol

1955
01:29:02,639 --> 01:29:05,199
and uh it turns out it looks like a nice

1956
01:29:05,199 --> 01:29:07,040
idea but uh

1957
01:29:07,040 --> 01:29:10,239
actually makes all these um

1958
01:29:10,239 --> 01:29:11,760
it creates a bunch of exceptions that

1959
01:29:11,760 --> 01:29:13,520
you have to deal with so maybe this is a

1960
01:29:13,520 --> 01:29:14,639
useful

1961
01:29:14,639 --> 01:29:17,280
um conclusion it's not always

1962
01:29:17,280 --> 01:29:18,159
like

1963
01:29:18,159 --> 01:29:19,280
worth

1964
01:29:19,280 --> 01:29:21,040
saving the number of different protocols

1965
01:29:21,040 --> 01:29:23,280
maybe it's sometimes better to have an

1966
01:29:23,280 --> 01:29:24,880
additional protocol that does one thing

1967
01:29:24,880 --> 01:29:26,480
well

1968
01:29:26,480 --> 01:29:28,080
anyway

1969
01:29:28,080 --> 01:29:29,840
water under the bridge we are not asking

1970
01:29:29,840 --> 01:29:31,679
for ipv6 to be changed don't

1971
01:29:31,679 --> 01:29:34,480
misunderstand us

1972
01:29:36,719 --> 01:29:39,679
okay so so that was our team uh

1973
01:29:39,679 --> 01:29:42,080
for us it's

1974
01:29:42,080 --> 01:29:43,840
it was the first time to propose this

1975
01:29:43,840 --> 01:29:45,760
project at the hackathon

1976
01:29:45,760 --> 01:29:48,000
uh hopefully we can come back maybe not

1977
01:29:48,000 --> 01:29:50,000
in philadelphia because most of us are

1978
01:29:50,000 --> 01:29:51,520
euro based actually

1979
01:29:51,520 --> 01:29:53,520
two are from brazil

1980
01:29:53,520 --> 01:29:54,480
also

1981
01:29:54,480 --> 01:29:57,360
thank you to the irtf who managed who

1982
01:29:57,360 --> 01:29:59,120
made it possible for

1983
01:29:59,120 --> 01:30:00,639
at least one of the brazilian colleagues

1984
01:30:00,639 --> 01:30:03,760
to come by means of a travel grant

1985
01:30:03,760 --> 01:30:06,239
irtf has these like diversity travel

1986
01:30:06,239 --> 01:30:08,800
grants which is very nice

1987
01:30:08,800 --> 01:30:10,960
and helped us a lot

1988
01:30:10,960 --> 01:30:14,159
um yeah most of us are also itf news

1989
01:30:14,159 --> 01:30:15,280
comer

1990
01:30:15,280 --> 01:30:17,920
all except for me

1991
01:30:17,920 --> 01:30:18,880
and

1992
01:30:18,880 --> 01:30:21,440
yeah but please uh have a look at the um

1993
01:30:21,440 --> 01:30:23,520
at the web pages about tree router and

1994
01:30:23,520 --> 01:30:25,440
rare bless you

1995
01:30:25,440 --> 01:30:26,719
and um

1996
01:30:26,719 --> 01:30:29,120
this if if you're looking for like a

1997
01:30:29,120 --> 01:30:31,040
second implementation of your

1998
01:30:31,040 --> 01:30:33,840
exotic protocol um talk to us talk to

1999
01:30:33,840 --> 01:30:35,440
java the

2000
01:30:35,440 --> 01:30:36,880
free router

2001
01:30:36,880 --> 01:30:38,480
main developer

2002
01:30:38,480 --> 01:30:39,520
sometimes

2003
01:30:39,520 --> 01:30:41,440
we can implement new protocols and new

2004
01:30:41,440 --> 01:30:44,000
features very quickly

2005
01:30:44,000 --> 01:30:45,840
because it's a relatively compact code

2006
01:30:45,840 --> 01:30:47,600
base

2007
01:30:47,600 --> 01:30:49,679
and yeah thanks a lot for your attention

2008
01:30:49,679 --> 01:30:50,880
thanks for the

2009
01:30:50,880 --> 01:30:54,560
the nice work doing the hackathon

2010
01:31:00,080 --> 01:31:03,840
and the presentation is on github

2011
01:31:13,600 --> 01:31:16,480
what do we have here okay so now i think

2012
01:31:16,480 --> 01:31:20,239
there's a few presentations we missed so

2013
01:31:20,239 --> 01:31:21,679
if you're uh

2014
01:31:21,679 --> 01:31:23,600
if you have a presentation that we

2015
01:31:23,600 --> 01:31:25,280
didn't get a chance to do if you're

2016
01:31:25,280 --> 01:31:26,880
remote

2017
01:31:26,880 --> 01:31:29,440
or or in the room maybe just request to

2018
01:31:29,440 --> 01:31:30,800
share

2019
01:31:30,800 --> 01:31:33,440
and i'll grant that and then you can you

2020
01:31:33,440 --> 01:31:34,480
can share

2021
01:31:34,480 --> 01:31:37,480
whoops

2022
01:31:47,600 --> 01:31:50,960
okay and vladimir you'll be next

2023
01:31:50,960 --> 01:31:53,120
hi

2024
01:31:53,280 --> 01:31:56,000
can you hear me

2025
01:31:56,840 --> 01:32:00,320
yes okay

2026
01:32:02,960 --> 01:32:06,840
do you see this white now

2027
01:32:13,600 --> 01:32:15,920
can some someone confirm that the slides

2028
01:32:15,920 --> 01:32:18,560
are visible

2029
01:32:19,679 --> 01:32:22,080
uh nope your slides aren't there maybe

2030
01:32:22,080 --> 01:32:23,120
uh

2031
01:32:23,120 --> 01:32:25,040
yeah we actually had slides from anyways

2032
01:32:25,040 --> 01:32:28,639
go ahead if you request slides again

2033
01:32:28,639 --> 01:32:30,400
yeah i share the screen

2034
01:32:30,400 --> 01:32:32,480
let me see that's fine

2035
01:32:32,480 --> 01:32:35,919
ask to share screen grid

2036
01:32:39,280 --> 01:32:42,159
yes okay

2037
01:32:53,280 --> 01:32:55,120
yeah we don't see him yet it looks like

2038
01:32:55,120 --> 01:32:58,719
it's still asking you okay

2039
01:32:58,719 --> 01:33:00,000
okay

2040
01:33:00,000 --> 01:33:02,880
uh a short presentation about

2041
01:33:02,880 --> 01:33:04,560
the project

2042
01:33:04,560 --> 01:33:05,600
we are

2043
01:33:05,600 --> 01:33:08,239
working on a model for managing network

2044
01:33:08,239 --> 01:33:09,840
tester

2045
01:33:09,840 --> 01:33:11,199
and that's

2046
01:33:11,199 --> 01:33:14,880
part of the benchmarking working group

2047
01:33:14,880 --> 01:33:16,160
so

2048
01:33:16,160 --> 01:33:17,440
[Music]

2049
01:33:17,440 --> 01:33:20,560
this project has been going for a while

2050
01:33:20,560 --> 01:33:23,560
this

2051
01:33:23,760 --> 01:33:26,400
there is a draft which is

2052
01:33:26,400 --> 01:33:29,199
currently going to be

2053
01:33:29,199 --> 01:33:31,920
reviewed by the working group

2054
01:33:31,920 --> 01:33:32,800
and

2055
01:33:32,800 --> 01:33:35,199
hopefully adopted

2056
01:33:35,199 --> 01:33:37,360
so the the goal of the draft is to allow

2057
01:33:37,360 --> 01:33:40,719
development of benchmarks and tests

2058
01:33:40,719 --> 01:33:43,679
using a young and net conf interface to

2059
01:33:43,679 --> 01:33:46,239
test their equipment

2060
01:33:46,239 --> 01:33:48,480
until now tester equipment has been

2061
01:33:48,480 --> 01:33:50,880
proprietary mostly

2062
01:33:50,880 --> 01:33:53,840
but that conference allows development

2063
01:33:53,840 --> 01:33:56,000
of

2064
01:33:56,880 --> 01:33:59,840
itf based interface

2065
01:33:59,840 --> 01:34:02,400
so the project is complex i'm not going

2066
01:34:02,400 --> 01:34:04,560
to go into details but you can see in

2067
01:34:04,560 --> 01:34:08,400
the slides all the repositories used

2068
01:34:08,400 --> 01:34:11,040
and if you have interest you should

2069
01:34:11,040 --> 01:34:13,760
go into the details yourself

2070
01:34:13,760 --> 01:34:14,719
so

2071
01:34:14,719 --> 01:34:16,159
this is how

2072
01:34:16,159 --> 01:34:17,120
the

2073
01:34:17,120 --> 01:34:19,040
implementation that

2074
01:34:19,040 --> 01:34:22,480
implements the model in that draft

2075
01:34:22,480 --> 01:34:25,040
looks like that's what we use for

2076
01:34:25,040 --> 01:34:28,639
our work during the hackathons

2077
01:34:28,639 --> 01:34:30,239
and

2078
01:34:30,239 --> 01:34:33,718
this is the design

2079
01:34:34,320 --> 01:34:36,320
as i said i'm not going to go into the

2080
01:34:36,320 --> 01:34:37,840
details but

2081
01:34:37,840 --> 01:34:39,440
it is possible to

2082
01:34:39,440 --> 01:34:43,678
find what you need from this slide

2083
01:34:43,760 --> 01:34:46,480
so we have a of programmable logic

2084
01:34:46,480 --> 01:34:48,800
device and we have a software that

2085
01:34:48,800 --> 01:34:51,360
controls it

2086
01:34:51,360 --> 01:34:54,000
everything is open source including the

2087
01:34:54,000 --> 01:34:56,480
hardware

2088
01:34:58,000 --> 01:34:59,360
so

2089
01:34:59,360 --> 01:35:01,119
this

2090
01:35:01,119 --> 01:35:02,880
particular hackathon

2091
01:35:02,880 --> 01:35:03,600
we

2092
01:35:03,600 --> 01:35:05,600
we ended up with the wasp

2093
01:35:05,600 --> 01:35:08,719
the rfc 2544 tests

2094
01:35:08,719 --> 01:35:12,560
in section 26.6 there is a reset test

2095
01:35:12,560 --> 01:35:14,800
which is uh

2096
01:35:14,800 --> 01:35:17,119
means to measure how fast network

2097
01:35:17,119 --> 01:35:20,480
equipment recovers after power cycle or

2098
01:35:20,480 --> 01:35:22,800
turning off the power

2099
01:35:22,800 --> 01:35:25,199
so this this test is a bit different

2100
01:35:25,199 --> 01:35:29,480
from everything else because the quad

2101
01:35:33,520 --> 01:35:35,119
and it was a bit

2102
01:35:35,119 --> 01:35:37,199
different so it was fun

2103
01:35:37,199 --> 01:35:39,440
we we made this

2104
01:35:39,440 --> 01:35:40,639
ancient

2105
01:35:40,639 --> 01:35:42,880
uh

2106
01:35:42,880 --> 01:35:43,920
hp

2107
01:35:43,920 --> 01:35:45,600
relay actuator

2108
01:35:45,600 --> 01:35:49,119
with young and netconf by adding a

2109
01:35:49,119 --> 01:35:52,239
raspberry pi and a hat that controls the

2110
01:35:52,239 --> 01:35:55,199
gbp interface

2111
01:35:55,199 --> 01:35:57,440
and uh we we could have not

2112
01:35:57,440 --> 01:36:00,159
done that but it was fun so we we wanted

2113
01:36:00,159 --> 01:36:02,960
to to use only again to manage all the

2114
01:36:02,960 --> 01:36:06,400
aspects of the automation of the test

2115
01:36:06,400 --> 01:36:08,880
so this is the

2116
01:36:08,880 --> 01:36:10,719
the end result

2117
01:36:10,719 --> 01:36:12,560
we added the necessary code to the

2118
01:36:12,560 --> 01:36:14,080
python script

2119
01:36:14,080 --> 01:36:15,840
and we

2120
01:36:15,840 --> 01:36:18,639
also added that as an additional device

2121
01:36:18,639 --> 01:36:19,360
we

2122
01:36:19,360 --> 01:36:21,199
orchestrated it with young and

2123
01:36:21,199 --> 01:36:24,080
netcomfort

2124
01:36:24,080 --> 01:36:27,800
yeah so

2125
01:36:48,880 --> 01:36:51,199
it looks like you're speaking but we

2126
01:36:51,199 --> 01:36:53,440
don't hear you anymore or maybe you're

2127
01:36:53,440 --> 01:36:56,839
done i hope

2128
01:37:11,119 --> 01:37:14,799
okay we don't see your slides yet

2129
01:37:16,239 --> 01:37:19,280
okay they're coming up now

2130
01:37:19,280 --> 01:37:21,199
so can you see the slide

2131
01:37:21,199 --> 01:37:23,600
uh yes but there uh if you could put it

2132
01:37:23,600 --> 01:37:25,679
in presentation mode it'd probably

2133
01:37:25,679 --> 01:37:26,960
be a big big

2134
01:37:26,960 --> 01:37:28,320
yep

2135
01:37:28,320 --> 01:37:30,239
okay so

2136
01:37:30,239 --> 01:37:32,800
yeah and this is two songs so i will

2137
01:37:32,800 --> 01:37:35,440
give a presentation about the our

2138
01:37:35,440 --> 01:37:38,000
hacksaw project adaptive subscription

2139
01:37:38,000 --> 01:37:40,880
remotely so

2140
01:37:40,880 --> 01:37:43,600
the background of this work is that

2141
01:37:43,600 --> 01:37:46,480
although the telemetry has increased the

2142
01:37:46,480 --> 01:37:48,320
frequency of debt collection

2143
01:37:48,320 --> 01:37:51,199
dramatically but it also incurs more

2144
01:37:51,199 --> 01:37:53,280
resources at the same time

2145
01:37:53,280 --> 01:37:56,719
so people sometimes may find it hard to

2146
01:37:56,719 --> 01:37:59,360
balance the need for low overhead and

2147
01:37:59,360 --> 01:38:01,840
the desire for representative telemetry

2148
01:38:01,840 --> 01:38:02,880
data

2149
01:38:02,880 --> 01:38:05,199
so our proposal is to

2150
01:38:05,199 --> 01:38:08,239
install the adaptive subscription policy

2151
01:38:08,239 --> 01:38:10,880
which is built on top of the young push

2152
01:38:10,880 --> 01:38:12,000
mechanism

2153
01:38:12,000 --> 01:38:14,800
and allow the server to switch to

2154
01:38:14,800 --> 01:38:17,280
different period intervals based on the

2155
01:38:17,280 --> 01:38:19,760
network condition chains

2156
01:38:19,760 --> 01:38:22,480
and our focused text scenario is the

2157
01:38:22,480 --> 01:38:25,840
awareness network performance monitoring

2158
01:38:25,840 --> 01:38:29,280
the objective is to monitor kpi changes

2159
01:38:29,280 --> 01:38:31,520
at different frequencies of data

2160
01:38:31,520 --> 01:38:32,719
collection

2161
01:38:32,719 --> 01:38:35,280
and also evaluate the performance of

2162
01:38:35,280 --> 01:38:37,440
adaptive subscription

2163
01:38:37,440 --> 01:38:40,639
and actually this work is related to an

2164
01:38:40,639 --> 01:38:44,320
individual draft in netcast open group

2165
01:38:44,320 --> 01:38:46,480
so

2166
01:38:48,800 --> 01:38:52,000
the about the tech scenario we use the

2167
01:38:52,000 --> 01:38:56,159
grpcs movie to collect data from access

2168
01:38:56,159 --> 01:38:57,199
points

2169
01:38:57,199 --> 01:39:00,560
the network devices in our campus and we

2170
01:39:00,560 --> 01:39:02,480
have evaluated the following data

2171
01:39:02,480 --> 01:39:04,159
collection methods

2172
01:39:04,159 --> 01:39:07,119
a high frequency periodic telemetry a

2173
01:39:07,119 --> 01:39:09,920
low frequency periodic telemetry and

2174
01:39:09,920 --> 01:39:12,400
adaptive frequency parametric

2175
01:39:12,400 --> 01:39:15,199
and also for each data collection method

2176
01:39:15,199 --> 01:39:17,520
we have evaluated two cases

2177
01:39:17,520 --> 01:39:20,800
one is to report the rssi values so as

2178
01:39:20,800 --> 01:39:23,520
to detect the real time with a roaming

2179
01:39:23,520 --> 01:39:26,400
across different aps and the other is to

2180
01:39:26,400 --> 01:39:27,840
stream the bytes

2181
01:39:27,840 --> 01:39:30,719
from the ap uplink so as to detect the

2182
01:39:30,719 --> 01:39:33,280
potential link congestion

2183
01:39:33,280 --> 01:39:36,159
and we also use the elk to

2184
01:39:36,159 --> 01:39:40,880
collect analyze and visualize the data

2185
01:39:40,880 --> 01:39:43,920
so in this case we have collected the

2186
01:39:43,920 --> 01:39:47,199
and aggregated ssi signal data from

2187
01:39:47,199 --> 01:39:48,880
different aps

2188
01:39:48,880 --> 01:39:52,320
and by default the roman rxsi threshold

2189
01:39:52,320 --> 01:39:54,880
is negative 65

2190
01:39:54,880 --> 01:39:57,119
if the actual signal strength is less

2191
01:39:57,119 --> 01:39:59,440
than that threshold then the terminal

2192
01:39:59,440 --> 01:40:02,080
will search another apc to attempt to

2193
01:40:02,080 --> 01:40:04,400
roaming so in this case we try to figure

2194
01:40:04,400 --> 01:40:07,600
out when or if a roaming event happens

2195
01:40:07,600 --> 01:40:09,440
during the movement of the terminal

2196
01:40:09,440 --> 01:40:12,719
devices and also identify the continuous

2197
01:40:12,719 --> 01:40:14,719
signal degeneration

2198
01:40:14,719 --> 01:40:15,760
so

2199
01:40:15,760 --> 01:40:18,800
we can the results show that a very high

2200
01:40:18,800 --> 01:40:21,920
frequency collection is easy to identify

2201
01:40:21,920 --> 01:40:24,480
the important events but also at the

2202
01:40:24,480 --> 01:40:27,600
cost of a greater volume of data

2203
01:40:27,600 --> 01:40:30,960
and unsurprisingly the low frequency

2204
01:40:30,960 --> 01:40:33,280
data collection is

2205
01:40:33,280 --> 01:40:35,679
at a 30 second interval

2206
01:40:35,679 --> 01:40:38,320
it's hard to detect the event data

2207
01:40:38,320 --> 01:40:40,560
actually and also we tried adaptive

2208
01:40:40,560 --> 01:40:42,400
subscription

2209
01:40:42,400 --> 01:40:44,400
there are two different ways to compare

2210
01:40:44,400 --> 01:40:47,360
adaptive subscription actually one is to

2211
01:40:47,360 --> 01:40:49,600
evaluate the condition

2212
01:40:49,600 --> 01:40:51,920
and make the decision of adjusting the

2213
01:40:51,920 --> 01:40:54,639
period at the subscriber's side

2214
01:40:54,639 --> 01:40:57,280
and the other is at the server side and

2215
01:40:57,280 --> 01:41:00,400
the results show that for the first way

2216
01:41:00,400 --> 01:41:02,560
it prevents the subscriber from

2217
01:41:02,560 --> 01:41:04,960
capturing roaming events which lasts

2218
01:41:04,960 --> 01:41:07,520
only two to four seconds which is

2219
01:41:07,520 --> 01:41:09,360
incomplete actually

2220
01:41:09,360 --> 01:41:11,440
while the second way the server will

2221
01:41:11,440 --> 01:41:13,920
evaluate the condition at the end of

2222
01:41:13,920 --> 01:41:16,000
each high frequency interval

2223
01:41:16,000 --> 01:41:18,080
there's no important events and network

2224
01:41:18,080 --> 01:41:21,920
will be missed actually

2225
01:41:21,920 --> 01:41:25,520
so in the other case we have tried to

2226
01:41:25,520 --> 01:41:27,920
stream the buy set from the

2227
01:41:27,920 --> 01:41:31,199
ap uplink to detect the possible

2228
01:41:31,199 --> 01:41:32,480
congestion

2229
01:41:32,480 --> 01:41:34,960
and similarly adaptive frequency that

2230
01:41:34,960 --> 01:41:36,880
collection is able to

2231
01:41:36,880 --> 01:41:38,560
capture as many

2232
01:41:38,560 --> 01:41:39,840
traffic bus

2233
01:41:39,840 --> 01:41:41,920
as possible while keeping a low

2234
01:41:41,920 --> 01:41:44,480
frequency operator connection when there

2235
01:41:44,480 --> 01:41:46,639
is no potential congestion

2236
01:41:46,639 --> 01:41:48,719
and the link chart at the bottom right

2237
01:41:48,719 --> 01:41:51,280
of the slide has shown that adaptive

2238
01:41:51,280 --> 01:41:53,840
subscription can greatly reduce the

2239
01:41:53,840 --> 01:41:56,320
amount of transmitted data compared with

2240
01:41:56,320 --> 01:41:59,600
high frequency debt collection

2241
01:41:59,600 --> 01:42:02,480
so the lessons we have learned is that

2242
01:42:02,480 --> 01:42:05,040
we learn that the adaptive subscription

2243
01:42:05,040 --> 01:42:07,440
can greatly reduce the data volume

2244
01:42:07,440 --> 01:42:09,360
during the massive data collection and

2245
01:42:09,360 --> 01:42:12,080
processing and it can also serve as a

2246
01:42:12,080 --> 01:42:14,560
compromise between the data management

2247
01:42:14,560 --> 01:42:17,040
resource cost and data fidelity for

2248
01:42:17,040 --> 01:42:18,639
network devices

2249
01:42:18,639 --> 01:42:21,280
but it's important to remember that the

2250
01:42:21,280 --> 01:42:23,840
selection of the threshold for the

2251
01:42:23,840 --> 01:42:26,560
specific monitor that object is very

2252
01:42:26,560 --> 01:42:29,360
important for adaptive subscription and

2253
01:42:29,360 --> 01:42:31,600
it should be best on our operational

2254
01:42:31,600 --> 01:42:34,080
experience

2255
01:42:34,080 --> 01:42:36,960
okay so and finally i'd like to give my

2256
01:42:36,960 --> 01:42:40,400
thanks to my my teammates i have queen

2257
01:42:40,400 --> 01:42:42,880
from muna university jihyun from

2258
01:42:42,880 --> 01:42:46,159
microsoft and pong from china mobile and

2259
01:42:46,159 --> 01:42:48,719
way from china telecom and also

2260
01:42:48,719 --> 01:42:50,480
to show my thanks to my huawei

2261
01:42:50,480 --> 01:42:52,400
colleagues

2262
01:42:52,400 --> 01:42:56,440
thank you thanks for your attention

2263
01:43:05,600 --> 01:43:07,920
okay thanks for that presentation uh

2264
01:43:07,920 --> 01:43:09,360
yeah i don't think we have any questions

2265
01:43:09,360 --> 01:43:11,360
in the room so

2266
01:43:11,360 --> 01:43:15,119
uh tran you are up next

2267
01:43:15,119 --> 01:43:17,119
and then i'll just keep working my way

2268
01:43:17,119 --> 01:43:19,759
through the queue

2269
01:43:21,760 --> 01:43:24,400
can you see my screen now can you hear

2270
01:43:24,400 --> 01:43:25,119
me

2271
01:43:25,119 --> 01:43:27,520
yeah it looks good we hear you too

2272
01:43:27,520 --> 01:43:30,159
okay thank you

2273
01:43:30,400 --> 01:43:32,800
so this is a resource presentation of

2274
01:43:32,800 --> 01:43:35,440
our making working group about content

2275
01:43:35,440 --> 01:43:37,199
of influential band marketing is it

2276
01:43:37,199 --> 01:43:40,199
iatf113

2277
01:43:41,119 --> 01:43:42,719
so first of all i will introduce a

2278
01:43:42,719 --> 01:43:44,719
quickly about our product so abrupt is a

2279
01:43:44,719 --> 01:43:46,800
consideration for manufacturing network

2280
01:43:46,800 --> 01:43:48,159
performance in containerized

2281
01:43:48,159 --> 01:43:49,840
infrastructures there are two main

2282
01:43:49,840 --> 01:43:52,400
features inside our gravity we first

2283
01:43:52,400 --> 01:43:55,040
our hackathon activity first to verify

2284
01:43:55,040 --> 01:43:56,560
the various network models of the

2285
01:43:56,560 --> 01:43:57,679
container

2286
01:43:57,679 --> 01:43:59,440
infrastructures and the second thing

2287
01:43:59,440 --> 01:44:01,440
they verify different configurations the

2288
01:44:01,440 --> 01:44:03,440
things that can make an impact on the

2289
01:44:03,440 --> 01:44:07,480
performance of the container network

2290
01:44:07,600 --> 01:44:09,760
so see what we have done so far in

2291
01:44:09,760 --> 01:44:11,520
previous high cotton so this is a

2292
01:44:11,520 --> 01:44:12,960
networking model and the performance

2293
01:44:12,960 --> 01:44:15,119
impact that i mentioned about so in

2294
01:44:15,119 --> 01:44:17,360
previous has gotten we have already made

2295
01:44:17,360 --> 01:44:18,960
them asking about

2296
01:44:18,960 --> 01:44:21,679
the kernel spray in this way and

2297
01:44:21,679 --> 01:44:23,679
spanning and we have done a performance

2298
01:44:23,679 --> 01:44:26,239
impact about cpu isolation and luma

2299
01:44:26,239 --> 01:44:27,360
aluminum

2300
01:44:27,360 --> 01:44:29,360
so in this hackathon we focus on the

2301
01:44:29,360 --> 01:44:31,119
service person training we have a little

2302
01:44:31,119 --> 01:44:33,360
bit is a period has gotten about the vvt

2303
01:44:33,360 --> 01:44:36,400
multi-port and in this one we focus on

2304
01:44:36,400 --> 01:44:39,760
the combined model of srob and vpp and

2305
01:44:39,760 --> 01:44:41,280
we also want to

2306
01:44:41,280 --> 01:44:42,960
figure out the impact of the number of

2307
01:44:42,960 --> 01:44:45,900
vmf in the service function chaining

2308
01:44:45,900 --> 01:44:47,119
[Music]

2309
01:44:47,119 --> 01:44:50,000
so this is a band marking scenario so

2310
01:44:50,000 --> 01:44:53,360
we use a srov combined with the vpp sr

2311
01:44:53,360 --> 01:44:57,360
fire we will use for noise traffic and

2312
01:44:57,360 --> 01:45:00,159
vp will be used for

2313
01:45:00,159 --> 01:45:01,679
eastward traffic

2314
01:45:01,679 --> 01:45:04,239
and we test in two scenarios the first

2315
01:45:04,239 --> 01:45:06,000
one is single node and the second one is

2316
01:45:06,000 --> 01:45:08,239
the monty nose and inside signal node

2317
01:45:08,239 --> 01:45:10,320
one we will increase the number of parts

2318
01:45:10,320 --> 01:45:13,040
from true board for both sig board to

2319
01:45:13,040 --> 01:45:13,840
test

2320
01:45:13,840 --> 01:45:16,159
the impact of the number of vmfs on the

2321
01:45:16,159 --> 01:45:18,639
three function chaining

2322
01:45:18,639 --> 01:45:21,119
this is a scenario for multinote so each

2323
01:45:21,119 --> 01:45:23,119
node will have two parts and you will

2324
01:45:23,119 --> 01:45:24,880
later layer two underlay to connect

2325
01:45:24,880 --> 01:45:27,600
within two nodes

2326
01:45:28,080 --> 01:45:30,800
this is the tempest of our our topology

2327
01:45:30,800 --> 01:45:32,320
database

2328
01:45:32,320 --> 01:45:35,679
this is the configuration of our testbed

2329
01:45:35,679 --> 01:45:38,000
and this is the result so

2330
01:45:38,000 --> 01:45:40,880
what we learned in this hackathon is the

2331
01:45:40,880 --> 01:45:43,440
based on the result we see the sr iov

2332
01:45:43,440 --> 01:45:46,239
and vp combine model we

2333
01:45:46,239 --> 01:45:48,400
have signific significantly better

2334
01:45:48,400 --> 01:45:51,520
performance using vp only because

2335
01:45:51,520 --> 01:45:54,239
vp traffic need to go to the v6 in our

2336
01:45:54,239 --> 01:45:56,960
srv download in combine model

2337
01:45:56,960 --> 01:45:58,719
and the second thing is the impact of

2338
01:45:58,719 --> 01:46:01,360
the number of vmf so when you increase

2339
01:46:01,360 --> 01:46:02,960
the number of dna from

2340
01:46:02,960 --> 01:46:05,440
two to four to six it only make an

2341
01:46:05,440 --> 01:46:07,840
impact in very small package size with

2342
01:46:07,840 --> 01:46:13,360
only 64 and 128 exci meanwhile in a 250

2343
01:46:13,360 --> 01:46:16,320
second side to above there is no

2344
01:46:16,320 --> 01:46:19,360
difference in the performance

2345
01:46:19,360 --> 01:46:21,520
you know with the multi-node

2346
01:46:21,520 --> 01:46:24,080
scenario we observe the

2347
01:46:24,080 --> 01:46:26,080
society decrease is the performance of

2348
01:46:26,080 --> 01:46:27,760
the throughput from

2349
01:46:27,760 --> 01:46:30,159
the package that is lower than

2350
01:46:30,159 --> 01:46:34,400
512 and uh repackaged like us of 1000

2351
01:46:34,400 --> 01:46:36,560
bytes then there'll be no difference

2352
01:46:36,560 --> 01:46:40,080
besides the performance between uh

2353
01:46:40,080 --> 01:46:43,280
multi-node and signal

2354
01:46:43,840 --> 01:46:46,400
so in the future what we want to uh

2355
01:46:46,400 --> 01:46:49,199
famous and test the performance of

2356
01:46:49,199 --> 01:46:51,600
different internal network techniques

2357
01:46:51,600 --> 01:46:53,440
that are layered to underlay channel and

2358
01:46:53,440 --> 01:46:55,840
for baseline on vgp where we connect

2359
01:46:55,840 --> 01:46:58,080
between the two nodes and we also want

2360
01:46:58,080 --> 01:47:01,760
to manage the epf and hdpr series model

2361
01:47:01,760 --> 01:47:04,159
as well which will option the width or

2362
01:47:04,159 --> 01:47:07,119
without uploading it into this magnet

2363
01:47:07,119 --> 01:47:08,719
and we also update our drive based on

2364
01:47:08,719 --> 01:47:10,239
the result

2365
01:47:10,239 --> 01:47:11,040
so

2366
01:47:11,040 --> 01:47:13,280
this is our team member and this

2367
01:47:13,280 --> 01:47:17,880
github link thank you for listening

2368
01:48:27,440 --> 01:48:30,440
okay

2369
01:48:42,320 --> 01:48:43,440
okay so

2370
01:48:43,440 --> 01:48:44,880
i will talk about

2371
01:48:44,880 --> 01:48:46,400
what we have done on

2372
01:48:46,400 --> 01:48:49,040
with chic so chic is a protocol to

2373
01:48:49,040 --> 01:48:50,320
compress

2374
01:48:50,320 --> 01:48:52,960
ipedia to put ip in very constrained

2375
01:48:52,960 --> 01:48:55,040
networks such as

2376
01:48:55,040 --> 01:48:59,199
lorawan sick fox or 5g narrowband iot

2377
01:48:59,199 --> 01:49:01,920
and so we we have this rfc that

2378
01:49:01,920 --> 01:49:03,760
describes chic and

2379
01:49:03,760 --> 01:49:06,719
we use openshift to develop the standard

2380
01:49:06,719 --> 01:49:08,320
but it has been done by several

2381
01:49:08,320 --> 01:49:11,520
developers and now our effort is to put

2382
01:49:11,520 --> 01:49:12,960
all the things together to have

2383
01:49:12,960 --> 01:49:15,199
something that works well with all the

2384
01:49:15,199 --> 01:49:16,639
feature together

2385
01:49:16,639 --> 01:49:19,040
that is well documented to help people

2386
01:49:19,040 --> 01:49:19,840
to

2387
01:49:19,840 --> 01:49:21,360
to use it so

2388
01:49:21,360 --> 01:49:23,679
that's what we we did and we saw also

2389
01:49:23,679 --> 01:49:26,560
work on the young version of the

2390
01:49:26,560 --> 01:49:28,400
description of the rules

2391
01:49:28,400 --> 01:49:30,480
to allow interoperability between

2392
01:49:30,480 --> 01:49:32,480
different implementation

2393
01:49:32,480 --> 01:49:35,280
and we also work on

2394
01:49:35,280 --> 01:49:37,440
a new feature that is called component

2395
01:49:37,440 --> 01:49:40,840
act that is used for example for sig fox

2396
01:49:40,840 --> 01:49:44,800
technology so what we have done so we we

2397
01:49:44,800 --> 01:49:47,040
implement the platform we also have some

2398
01:49:47,040 --> 01:49:49,840
documentation effort to understand what

2399
01:49:49,840 --> 01:49:52,400
is chic and how to use it with

2400
01:49:52,400 --> 01:49:53,840
open chick

2401
01:49:53,840 --> 01:49:58,320
we have to push the core com version of

2402
01:49:58,320 --> 01:50:00,400
the young mod the disc young description

2403
01:50:00,400 --> 01:50:01,280
model

2404
01:50:01,280 --> 01:50:04,560
into the the github and we have also saw

2405
01:50:04,560 --> 01:50:06,639
this version of sheep

2406
01:50:06,639 --> 01:50:08,320
so what we have learned

2407
01:50:08,320 --> 01:50:11,280
so that first core conf is quite nice

2408
01:50:11,280 --> 01:50:13,440
so we have a very very compact uh

2409
01:50:13,440 --> 01:50:15,280
representation of the rule

2410
01:50:15,280 --> 01:50:17,280
if we compare to the division version we

2411
01:50:17,280 --> 01:50:19,040
divide by six

2412
01:50:19,040 --> 01:50:21,760
the size of uh

2413
01:50:21,760 --> 01:50:24,320
of the rule so that's quite interesting

2414
01:50:24,320 --> 01:50:26,719
especially in compressed network

2415
01:50:26,719 --> 01:50:29,280
but we have discovered some funny things

2416
01:50:29,280 --> 01:50:31,119
with uh

2417
01:50:31,119 --> 01:50:33,599
core confidence that you classify all

2418
01:50:33,599 --> 01:50:37,280
the entry by alphabe alphabetical order

2419
01:50:37,280 --> 01:50:38,719
and we have

2420
01:50:38,719 --> 01:50:40,719
in each row we have the rule id and the

2421
01:50:40,719 --> 01:50:43,920
rule id is 30

2422
01:50:43,920 --> 01:50:45,520
value after

2423
01:50:45,520 --> 01:50:47,679
the reference value so it means that in

2424
01:50:47,679 --> 01:50:50,560
c bar we need two bytes instead of one

2425
01:50:50,560 --> 01:50:54,320
byte so this is not that bad but we can

2426
01:50:54,320 --> 01:50:56,719
try to improve the compression by

2427
01:50:56,719 --> 01:50:58,719
changing the seed

2428
01:50:58,719 --> 01:51:01,280
the seed order and we will have to

2429
01:51:01,280 --> 01:51:04,960
discuss about that in the working room

2430
01:51:04,960 --> 01:51:07,679
and for the members so we have people

2431
01:51:07,679 --> 01:51:09,840
that were here like me we have dominique

2432
01:51:09,840 --> 01:51:13,119
bartel sergio aguiar on cedric engine we

2433
01:51:13,119 --> 01:51:16,480
were remote and we have two newcomers

2434
01:51:16,480 --> 01:51:19,199
that was ivan and diego that are here

2435
01:51:19,199 --> 01:51:22,000
and if you are interested by open cheek

2436
01:51:22,000 --> 01:51:24,960
so we will made a demo tomorrow

2437
01:51:24,960 --> 01:51:27,599
and you can go to this

2438
01:51:27,599 --> 01:51:33,290
github to get implementation thank you

2439
01:51:33,290 --> 01:51:39,699
[Applause]

2440
01:52:12,720 --> 01:52:16,239
[Music]

2441
01:52:27,040 --> 01:52:30,239
so melissa is trying to present but it

2442
01:52:30,239 --> 01:52:34,239
uh it doesn't seem to be working

2443
01:52:34,880 --> 01:52:37,679
we'll try again

2444
01:52:38,480 --> 01:52:40,638
no

2445
01:52:41,199 --> 01:52:45,839
yeah it's we've tried a few times

2446
01:52:49,199 --> 01:52:51,119
uh melissa if your

2447
01:52:51,119 --> 01:52:53,280
presentation is one that's been uploaded

2448
01:52:53,280 --> 01:52:56,480
i can share it here

2449
01:52:56,880 --> 01:52:58,560
oh you're right here

2450
01:52:58,560 --> 01:53:02,119
oh okay

2451
01:53:24,880 --> 01:53:27,119
yeah

2452
01:53:27,119 --> 01:53:29,440
okay

2453
01:53:32,239 --> 01:53:34,080
anyone else that has a presentation that

2454
01:53:34,080 --> 01:53:37,960
we didn't get to yet

2455
01:53:41,280 --> 01:53:42,480
all right

2456
01:53:42,480 --> 01:53:44,800
so

2457
01:53:44,800 --> 01:53:46,960
while we're getting that one sorted out

2458
01:53:46,960 --> 01:53:48,000
let me

2459
01:53:48,000 --> 01:53:51,199
just go and uh

2460
01:53:51,199 --> 01:53:55,559
do this i have a couple reminders

2461
01:54:03,520 --> 01:54:04,560
so

2462
01:54:04,560 --> 01:54:06,639
after we finish with this presentation

2463
01:54:06,639 --> 01:54:09,119
that will be it for the uh the hackathon

2464
01:54:09,119 --> 01:54:11,360
but um

2465
01:54:11,360 --> 01:54:14,400
we do still have hack demo happy hour

2466
01:54:14,400 --> 01:54:16,239
and i'm really happy about this because

2467
01:54:16,239 --> 01:54:17,760
this is one thing that you know we we

2468
01:54:17,760 --> 01:54:20,159
didn't even attempt to do uh

2469
01:54:20,159 --> 01:54:22,880
in an online only uh event

2470
01:54:22,880 --> 01:54:24,719
but uh and

2471
01:54:24,719 --> 01:54:26,560
you know so we'll have hackdemo happy

2472
01:54:26,560 --> 01:54:29,360
hour for any of you that want to have

2473
01:54:29,360 --> 01:54:31,280
post some you know deeper discussions

2474
01:54:31,280 --> 01:54:33,440
about your project if you want to

2475
01:54:33,440 --> 01:54:35,599
uh stick around and you know you'll have

2476
01:54:35,599 --> 01:54:37,440
a table and people can come up and you

2477
01:54:37,440 --> 01:54:39,840
can do demos or talk about

2478
01:54:39,840 --> 01:54:41,360
your work and

2479
01:54:41,360 --> 01:54:43,920
uh so it it's an hour and a half as you

2480
01:54:43,920 --> 01:54:46,719
can see here it's from 1700 to

2481
01:54:46,719 --> 01:54:48,480
1830

2482
01:54:48,480 --> 01:54:50,080
tomorrow

2483
01:54:50,080 --> 01:54:51,840
and you can register now you can

2484
01:54:51,840 --> 01:54:54,320
register up until noon tomorrow if you

2485
01:54:54,320 --> 01:54:56,480
want to participate and then we'll have

2486
01:54:56,480 --> 01:54:59,360
some space there it'll be in this room i

2487
01:54:59,360 --> 01:55:00,880
don't know if it's on this side or this

2488
01:55:00,880 --> 01:55:01,840
side

2489
01:55:01,840 --> 01:55:02,719
but

2490
01:55:02,719 --> 01:55:04,639
you can come you can set up whatever you

2491
01:55:04,639 --> 01:55:06,800
want and just have a more in-depth

2492
01:55:06,800 --> 01:55:08,639
conversation with people

2493
01:55:08,639 --> 01:55:09,840
whether they participate in the

2494
01:55:09,840 --> 01:55:12,080
hackathon or not they can come find you

2495
01:55:12,080 --> 01:55:14,480
and learn more about your project so

2496
01:55:14,480 --> 01:55:16,000
if you're interested in doing that i

2497
01:55:16,000 --> 01:55:17,440
think it'd be great please just make

2498
01:55:17,440 --> 01:55:18,960
sure you register

2499
01:55:18,960 --> 01:55:20,480
and then we'll uh we'll work with you to

2500
01:55:20,480 --> 01:55:22,480
get the space up and you know the

2501
01:55:22,480 --> 01:55:24,560
logistics and that

2502
01:55:24,560 --> 01:55:26,159
okay to see it are there is there anyone

2503
01:55:26,159 --> 01:55:29,760
here who's planning on uh

2504
01:55:29,760 --> 01:55:31,280
presenting their project tomorrow at

2505
01:55:31,280 --> 01:55:33,920
hackdemo happy hour

2506
01:55:33,920 --> 01:55:35,360
great

2507
01:55:35,360 --> 01:55:37,760
so and uh hopefully we get a few more

2508
01:55:37,760 --> 01:55:39,119
okay wonderful

2509
01:55:39,119 --> 01:55:41,280
and for people who are remote you can uh

2510
01:55:41,280 --> 01:55:42,320
you can

2511
01:55:42,320 --> 01:55:44,159
uh participate as well

2512
01:55:44,159 --> 01:55:46,960
uh we will have um

2513
01:55:46,960 --> 01:55:48,639
i don't know if we'll use me techo but

2514
01:55:48,639 --> 01:55:50,080
we'll we'll talk with you about how

2515
01:55:50,080 --> 01:55:51,840
we're gonna do that we'll have some type

2516
01:55:51,840 --> 01:55:55,599
of video conferencing set up for you

2517
01:55:56,800 --> 01:55:59,199
uh the other thing is this room will

2518
01:55:59,199 --> 01:56:00,800
stay available

2519
01:56:00,800 --> 01:56:02,719
so you can come here and this will be

2520
01:56:02,719 --> 01:56:05,760
the the ietf lounge but a part of it

2521
01:56:05,760 --> 01:56:08,400
will be designated as the code lounge so

2522
01:56:08,400 --> 01:56:09,920
if you want to continue to work on your

2523
01:56:09,920 --> 01:56:12,400
projects throughout the the week of the

2524
01:56:12,400 --> 01:56:13,520
ietf

2525
01:56:13,520 --> 01:56:15,119
you're welcome to come

2526
01:56:15,119 --> 01:56:17,040
and you can uh

2527
01:56:17,040 --> 01:56:19,119
uh register for that as well you don't

2528
01:56:19,119 --> 01:56:21,440
have to but just to help you arrange

2529
01:56:21,440 --> 01:56:23,040
your schedules with other people you

2530
01:56:23,040 --> 01:56:24,960
might find that interesting so you can

2531
01:56:24,960 --> 01:56:26,639
advertise basically when you're going to

2532
01:56:26,639 --> 01:56:29,360
be here and have people meet you here

2533
01:56:29,360 --> 01:56:31,920
so that's another thing you can do

2534
01:56:31,920 --> 01:56:33,280
other than that i just want to once

2535
01:56:33,280 --> 01:56:35,599
again thank our sponsors

2536
01:56:35,599 --> 01:56:38,239
and uh

2537
01:56:38,239 --> 01:56:40,400
have you many of you have already said

2538
01:56:40,400 --> 01:56:42,880
that you plan on attending in

2539
01:56:42,880 --> 01:56:44,159
philadelphia

2540
01:56:44,159 --> 01:56:46,320
so we will have another hackathon there

2541
01:56:46,320 --> 01:56:48,719
and hopefully uh work out some of the

2542
01:56:48,719 --> 01:56:49,920
the kinks

2543
01:56:49,920 --> 01:56:52,800
but uh but it should be great um

2544
01:56:52,800 --> 01:56:54,400
and so i hope to be able to see you

2545
01:56:54,400 --> 01:56:56,560
there

2546
01:56:56,560 --> 01:56:59,679
and if we can we'll go back and get our

2547
01:56:59,679 --> 01:57:03,679
last but not least presentation here

2548
01:57:08,000 --> 01:57:11,840
so marco's gonna try this time

2549
01:57:13,199 --> 01:57:14,159
for some

2550
01:57:14,159 --> 01:57:16,400
reason

2551
01:57:22,320 --> 01:57:25,840
yeah looks good all right

2552
01:57:30,480 --> 01:57:32,880
hello everyone sorry for keeping you

2553
01:57:32,880 --> 01:57:33,679
so

2554
01:57:33,679 --> 01:57:37,520
we are the participants at the table h

2555
01:57:37,520 --> 01:57:39,119
together with a couple of newcomers

2556
01:57:39,119 --> 01:57:41,840
david and loic who are very welcome

2557
01:57:41,840 --> 01:57:43,440
who have been very welcome to join us

2558
01:57:43,440 --> 01:57:45,440
for this hackathon

2559
01:57:45,440 --> 01:57:47,840
so we are the participants in the lake

2560
01:57:47,840 --> 01:57:49,040
working group

2561
01:57:49,040 --> 01:57:51,199
where we standardize the lightweight

2562
01:57:51,199 --> 01:57:53,360
authenticated key exchange protocol for

2563
01:57:53,360 --> 01:57:55,520
constrained environments and constrained

2564
01:57:55,520 --> 01:57:58,800
means embedded systems in most

2565
01:57:58,800 --> 01:58:00,239
in most cases

2566
01:58:00,239 --> 01:58:03,840
and we have nine implementations of of

2567
01:58:03,840 --> 01:58:06,400
the lake protocol that are available

2568
01:58:06,400 --> 01:58:08,800
uh this includes embedded implementation

2569
01:58:08,800 --> 01:58:09,840
since c

2570
01:58:09,840 --> 01:58:12,639
c plus plus also java and python

2571
01:58:12,639 --> 01:58:15,360
and as you probably know the embedded uh

2572
01:58:15,360 --> 01:58:17,119
the embedded programming language is

2573
01:58:17,119 --> 01:58:20,639
dominantly c but c is memory unsafe

2574
01:58:20,639 --> 01:58:21,440
so

2575
01:58:21,440 --> 01:58:25,199
uh that kind of uh goes against the

2576
01:58:25,199 --> 01:58:27,679
saying that protocol is as secure as its

2577
01:58:27,679 --> 01:58:29,679
implementation in the wild

2578
01:58:29,679 --> 01:58:30,560
so

2579
01:58:30,560 --> 01:58:34,400
our goal is to produce an implementation

2580
01:58:34,400 --> 01:58:36,480
that is probably secure

2581
01:58:36,480 --> 01:58:39,119
and what does what that means is that we

2582
01:58:39,119 --> 01:58:40,800
can prove correctness on the

2583
01:58:40,800 --> 01:58:42,320
implementation

2584
01:58:42,320 --> 01:58:44,080
uh correctness in respect to a given

2585
01:58:44,080 --> 01:58:46,800
model to prove memory safety of the

2586
01:58:46,800 --> 01:58:48,560
implementation and the proved side

2587
01:58:48,560 --> 01:58:51,520
channel resistance uh

2588
01:58:51,520 --> 01:58:53,599
against such an all attacks

2589
01:58:53,599 --> 01:58:54,320
so

2590
01:58:54,320 --> 01:58:56,880
it turns out that these folks from the

2591
01:58:56,880 --> 01:59:00,159
researchers from dnr institute in france

2592
01:59:00,159 --> 01:59:02,159
have developed a framework that uses

2593
01:59:02,159 --> 01:59:03,040
rust

2594
01:59:03,040 --> 01:59:05,920
to specify a model that is able to

2595
01:59:05,920 --> 01:59:10,080
generate a formally verified code

2596
01:59:10,960 --> 01:59:12,400
so

2597
01:59:12,400 --> 01:59:13,840
what you see here i won't go into

2598
01:59:13,840 --> 01:59:15,360
details i'll go right quickly because

2599
01:59:15,360 --> 01:59:17,040
this is the last presentation this is

2600
01:59:17,040 --> 01:59:18,800
the methodology essentially in practice

2601
01:59:18,800 --> 01:59:20,639
what it turns out to is that you need to

2602
01:59:20,639 --> 01:59:23,360
implement some code in rust in a subset

2603
01:59:23,360 --> 01:59:25,119
of rust called hackspec

2604
01:59:25,119 --> 01:59:27,199
and once you get to that you kind of

2605
01:59:27,199 --> 01:59:29,440
this is your kind of model

2606
01:59:29,440 --> 01:59:32,080
that later you turn into that you

2607
01:59:32,080 --> 01:59:33,760
compile into this

2608
01:59:33,760 --> 01:59:35,599
language called f-star

2609
01:59:35,599 --> 01:59:38,239
that they use to generate and formally

2610
01:59:38,239 --> 01:59:40,800
prove properties on the implementation

2611
01:59:40,800 --> 01:59:44,239
so this is uh this is not um

2612
01:59:44,239 --> 01:59:46,560
output of my research this is

2613
01:59:46,560 --> 01:59:48,400
the output of research from the prosecco

2614
01:59:48,400 --> 01:59:50,800
team and namely kartik bhargavan from

2615
01:59:50,800 --> 01:59:52,000
from india

2616
01:59:52,000 --> 01:59:54,639
so essentially uh so the first step is i

2617
01:59:54,639 --> 01:59:56,560
said is to implement uh and

2618
01:59:56,560 --> 01:59:58,960
implement this model in rust hackspec to

2619
01:59:58,960 --> 02:00:00,560
generate this f-star model which is

2620
02:00:00,560 --> 02:00:02,080
automatic through their through their

2621
02:00:02,080 --> 02:00:04,239
tools and then there is a third step to

2622
02:00:04,239 --> 02:00:07,119
like write and verify another in another

2623
02:00:07,119 --> 02:00:09,199
uh mathematically abstracted language

2624
02:00:09,199 --> 02:00:11,840
called low star against this f-star

2625
02:00:11,840 --> 02:00:14,560
implementation and finally to generate

2626
02:00:14,560 --> 02:00:17,520
some uh formally verifiable code which

2627
02:00:17,520 --> 02:00:19,840
can be either rust or c again so you

2628
02:00:19,840 --> 02:00:22,000
start from rust and you end up with

2629
02:00:22,000 --> 02:00:23,440
trust or c

2630
02:00:23,440 --> 02:00:24,960
which is formally very file and this is

2631
02:00:24,960 --> 02:00:26,880
available on github this is their

2632
02:00:26,880 --> 02:00:29,679
framework so our goal for today for

2633
02:00:29,679 --> 02:00:31,920
today and yesterday was to

2634
02:00:31,920 --> 02:00:35,440
generate to write this model of uh

2635
02:00:35,440 --> 02:00:39,360
of hack spec of our lake protocol

2636
02:00:39,360 --> 02:00:42,400
so the implementation goals uh we want

2637
02:00:42,400 --> 02:00:44,400
verifiable code but that can exit be

2638
02:00:44,400 --> 02:00:46,639
executed on microcontrollers

2639
02:00:46,639 --> 02:00:48,639
uh we want a minimal implementation so

2640
02:00:48,639 --> 02:00:50,960
we are not aiming for something generic

2641
02:00:50,960 --> 02:00:53,440
a minimal implementation in our case

2642
02:00:53,440 --> 02:00:56,320
means static static uh difficulty

2643
02:00:56,320 --> 02:00:58,960
authentication with initiator mode

2644
02:00:58,960 --> 02:01:00,480
uh

2645
02:01:00,480 --> 02:01:02,800
only in the initiator mode

2646
02:01:02,800 --> 02:01:05,199
uh we don't want any dependencies so

2647
02:01:05,199 --> 02:01:09,520
basically what we've done is purely on

2648
02:01:09,520 --> 02:01:11,760
pure rust without dependency on the

2649
02:01:11,760 --> 02:01:13,599
standard library so i'm talking no

2650
02:01:13,599 --> 02:01:15,840
memory copy implementing memory copy

2651
02:01:15,840 --> 02:01:17,040
with force

2652
02:01:17,040 --> 02:01:18,639
with for loops

2653
02:01:18,639 --> 02:01:20,480
uh we don't

2654
02:01:20,480 --> 02:01:22,639
rely we want to rely on hardware

2655
02:01:22,639 --> 02:01:25,040
acceleration wherever possible obviously

2656
02:01:25,040 --> 02:01:26,800
and we want this to be portable to other

2657
02:01:26,800 --> 02:01:29,119
environments as well so native machines

2658
02:01:29,119 --> 02:01:32,480
uh and also other uh embedded

2659
02:01:32,480 --> 02:01:34,960
empl other embedded platforms

2660
02:01:34,960 --> 02:01:38,000
so before the hackathon uh we we came

2661
02:01:38,000 --> 02:01:39,840
here with the partial implementation of

2662
02:01:39,840 --> 02:01:40,960
ad hoc

2663
02:01:40,960 --> 02:01:43,520
uh ad hoc is the protocol that is

2664
02:01:43,520 --> 02:01:45,040
standardizing lake

2665
02:01:45,040 --> 02:01:48,239
uh with unit functions passing the test

2666
02:01:48,239 --> 02:01:50,080
vectors from that are published in the

2667
02:01:50,080 --> 02:01:51,920
draft in lake

2668
02:01:51,920 --> 02:01:54,400
uh we came with a full crypto support

2669
02:01:54,400 --> 02:01:57,199
for uh on on on

2670
02:01:57,199 --> 02:01:59,840
on power on non-constrained devices with

2671
02:01:59,840 --> 02:02:01,760
hux pack and we came with hardware

2672
02:02:01,760 --> 02:02:04,480
abstraction layers for two platforms

2673
02:02:04,480 --> 02:02:08,080
uh cc2538 and another 50 to 840. so this

2674
02:02:08,080 --> 02:02:10,639
was our starting point what we got to

2675
02:02:10,639 --> 02:02:13,760
implement is that we extended the api we

2676
02:02:13,760 --> 02:02:16,159
implemented the api we implemented the

2677
02:02:16,159 --> 02:02:20,159
protocol state machine with hackspec so

2678
02:02:20,159 --> 02:02:22,000
it's important to understand i mean i

2679
02:02:22,000 --> 02:02:24,239
was talking about formally provable code

2680
02:02:24,239 --> 02:02:25,040
so

2681
02:02:25,040 --> 02:02:27,040
this model that you write in russ this

2682
02:02:27,040 --> 02:02:28,960
is executable code this is an

2683
02:02:28,960 --> 02:02:31,040
implementation just as any other that

2684
02:02:31,040 --> 02:02:33,199
can interoperate and we prove that

2685
02:02:33,199 --> 02:02:36,080
during the hackathon we interrupt with

2686
02:02:36,080 --> 02:02:37,520
california with java based

2687
02:02:37,520 --> 02:02:40,080
implementation california madhok

2688
02:02:40,080 --> 02:02:42,159
uh and yes here you can see some

2689
02:02:42,159 --> 02:02:43,840
screenshots from the implementation

2690
02:02:43,840 --> 02:02:46,159
essentially the protocol deriving the

2691
02:02:46,159 --> 02:02:47,119
same

2692
02:02:47,119 --> 02:02:50,080
uh the same shared secret after the run

2693
02:02:50,080 --> 02:02:52,000
of static static difficult

2694
02:02:52,000 --> 02:02:53,920
authentication

2695
02:02:53,920 --> 02:02:55,920
and yes the code is open source under

2696
02:02:55,920 --> 02:02:58,159
bsd license available on github under

2697
02:02:58,159 --> 02:02:58,840
this

2698
02:02:58,840 --> 02:03:02,400
link next steps for us to complete this

2699
02:03:02,400 --> 02:03:04,560
port so this was working on the native

2700
02:03:04,560 --> 02:03:06,960
we didn't kind of get it to work on the

2701
02:03:06,960 --> 02:03:09,760
the embedded side as yet so we will this

2702
02:03:09,760 --> 02:03:12,080
will be this this will be our next steps

2703
02:03:12,080 --> 02:03:14,000
on cc2538

2704
02:03:14,000 --> 02:03:16,480
and nrf50 to 840

2705
02:03:16,480 --> 02:03:18,560
and obviously to publish this as a crate

2706
02:03:18,560 --> 02:03:20,560
on crates dot io

2707
02:03:20,560 --> 02:03:23,520
and once we get done this will wrap wrap

2708
02:03:23,520 --> 02:03:26,239
up the model so essentially what we want

2709
02:03:26,239 --> 02:03:28,960
to use as the model and then we want to

2710
02:03:28,960 --> 02:03:31,040
go ahead and generate firm formally

2711
02:03:31,040 --> 02:03:33,199
verified rust and see code that can be

2712
02:03:33,199 --> 02:03:35,679
executed microcontrollers

2713
02:03:35,679 --> 02:03:39,840
so that would be it thank you

2714
02:03:40,239 --> 02:03:43,280
are any questions

2715
02:03:43,280 --> 02:03:48,750
[Applause]

2716
02:03:49,440 --> 02:03:52,839
i sure know

2717
02:03:56,639 --> 02:03:57,679
okay

2718
02:03:57,679 --> 02:03:58,880
i think that's it any other

2719
02:03:58,880 --> 02:04:01,440
presentations we got them all

2720
02:04:01,440 --> 02:04:02,719
all right

2721
02:04:02,719 --> 02:04:05,599
well fantastic uh thanks everyone for uh

2722
02:04:05,599 --> 02:04:07,520
participating in the hackathon it's

2723
02:04:07,520 --> 02:04:09,520
super exciting to have the opportunity

2724
02:04:09,520 --> 02:04:11,520
to be here in person again

2725
02:04:11,520 --> 02:04:13,280
and thanks for sticking around for all

2726
02:04:13,280 --> 02:04:15,520
the presentations i do hope you uh to

2727
02:04:15,520 --> 02:04:18,079
see you tomorrow uh i want to say a big

2728
02:04:18,079 --> 02:04:21,040
thanks to to barry too who many of you

2729
02:04:21,040 --> 02:04:22,719
didn't realize he was doing a lot of

2730
02:04:22,719 --> 02:04:25,119
work in the background whether it was

2731
02:04:25,119 --> 02:04:27,280
getting you signed up for github or

2732
02:04:27,280 --> 02:04:30,480
converting your your presentation so

2733
02:04:30,480 --> 02:04:32,800
uh he really helped things go uh as

2734
02:04:32,800 --> 02:04:34,639
smoothly as

2735
02:04:34,639 --> 02:04:36,320
or not even rougher than they already

2736
02:04:36,320 --> 02:04:37,360
were so

2737
02:04:37,360 --> 02:04:39,599
a lot of when you you see barry's barry

2738
02:04:39,599 --> 02:04:41,520
back there anymore but you'll have to

2739
02:04:41,520 --> 02:04:43,440
give a big thanks to barry for all the

2740
02:04:43,440 --> 02:04:45,360
work he did and he really helped me out

2741
02:04:45,360 --> 02:04:47,839
with him

2742
02:04:50,880 --> 02:04:52,880
and again thanks to all of you for being

2743
02:04:52,880 --> 02:04:56,159
here and have a great ietf thank you

2744
02:04:56,159 --> 02:04:57,490
you're welcome

2745
02:04:57,490 --> 02:05:03,539
[Applause]

2746
02:05:03,679 --> 02:05:06,880
that's actually a great idea

2747
02:05:19,040 --> 02:05:21,840
i think you should

2748
02:05:25,280 --> 02:05:27,520
do you also have to screen the paper

2749
02:05:27,520 --> 02:05:29,679
okay

2750
02:05:32,400 --> 02:05:34,880
oh wow that camera is like a you see a

2751
02:05:34,880 --> 02:05:36,159
lot more than i would have guessed i

2752
02:05:36,159 --> 02:05:39,638
guess wide angle

2753
02:05:48,820 --> 02:05:51,929
[Music]

2754
02:05:56,480 --> 02:05:59,480
okay

