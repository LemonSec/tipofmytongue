1
00:00:14,799 --> 00:00:17,799
my

2
00:00:19,039 --> 00:00:20,960
okay

3
00:00:20,960 --> 00:00:24,080
welcome to tls at uh

4
00:00:24,080 --> 00:00:28,240
iatf uh 113 here in vienna and virtually

5
00:00:28,240 --> 00:00:29,840
online

6
00:00:29,840 --> 00:00:32,079
just a reminder for everybody

7
00:00:32,079 --> 00:00:34,399
people who are online blue sheets will

8
00:00:34,399 --> 00:00:35,120
be

9
00:00:35,120 --> 00:00:36,559
attendance will be automatically

10
00:00:36,559 --> 00:00:39,440
collected for those in the room

11
00:00:39,440 --> 00:00:40,559
please

12
00:00:40,559 --> 00:00:42,800
scan the barcodes or the qr codes

13
00:00:42,800 --> 00:00:45,840
throughout the room to join the

14
00:00:45,840 --> 00:00:46,630
meeteco

15
00:00:46,630 --> 00:00:47,920
[Music]

16
00:00:47,920 --> 00:00:49,360
mobile app

17
00:00:49,360 --> 00:00:51,199
so you can have your attendance counted

18
00:00:51,199 --> 00:00:53,680
and participate in polls and other

19
00:00:53,680 --> 00:00:56,960
important meeting things

20
00:00:57,039 --> 00:00:59,600
uh you should all be familiar with the

21
00:00:59,600 --> 00:01:01,840
no well at this point

22
00:01:01,840 --> 00:01:03,520
uh but uh

23
00:01:03,520 --> 00:01:06,080
here it is

24
00:01:07,920 --> 00:01:09,280
uh also

25
00:01:09,280 --> 00:01:11,840
i want to remind everybody of the ietf

26
00:01:11,840 --> 00:01:13,680
code of conduct

27
00:01:13,680 --> 00:01:17,360
to treat your colleagues with respect

28
00:01:17,360 --> 00:01:19,520
try to be understandable

29
00:01:19,520 --> 00:01:21,520
and reasoned

30
00:01:21,520 --> 00:01:24,640
using good judgment that can be tough um

31
00:01:24,640 --> 00:01:27,040
and uh we're trying to find good

32
00:01:27,040 --> 00:01:31,600
solutions for the whole internet

33
00:01:33,200 --> 00:01:35,680
all right we have minute takers

34
00:01:35,680 --> 00:01:38,799
um please also i think usually people

35
00:01:38,799 --> 00:01:39,520
are

36
00:01:39,520 --> 00:01:41,920
on uh

37
00:01:41,920 --> 00:01:43,920
jabber at this point but if there's

38
00:01:43,920 --> 00:01:45,360
things that need to be relayed to the

39
00:01:45,360 --> 00:01:46,880
mic

40
00:01:46,880 --> 00:01:48,720
and we're not getting to them please let

41
00:01:48,720 --> 00:01:51,880
us know

42
00:01:54,960 --> 00:01:58,240
all right um we have some administrivia

43
00:01:58,240 --> 00:01:59,520
to

44
00:01:59,520 --> 00:02:01,200
deal with that i think we're done with

45
00:02:01,200 --> 00:02:02,399
that

46
00:02:02,399 --> 00:02:03,520
um

47
00:02:03,520 --> 00:02:05,840
there are some working group drafts that

48
00:02:05,840 --> 00:02:09,079
we have

49
00:02:10,639 --> 00:02:12,239
in progress

50
00:02:12,239 --> 00:02:14,239
um so we'll discuss those

51
00:02:14,239 --> 00:02:17,920
at the meeting today i think we have a

52
00:02:17,920 --> 00:02:19,280
a request

53
00:02:19,280 --> 00:02:20,319
from

54
00:02:20,319 --> 00:02:22,720
ben to discuss a kitten issue that we

55
00:02:22,720 --> 00:02:23,840
will add

56
00:02:23,840 --> 00:02:26,400
after the working group drafts um and

57
00:02:26,400 --> 00:02:28,000
then we'll have some discussion of new

58
00:02:28,000 --> 00:02:29,120
work

59
00:02:29,120 --> 00:02:30,000
um

60
00:02:30,000 --> 00:02:32,160
are there any other agenda

61
00:02:32,160 --> 00:02:37,360
bashing topics that people would like to

62
00:02:37,360 --> 00:02:39,840
discuss

63
00:02:43,920 --> 00:02:46,480
uh sean did you want to give any

64
00:02:46,480 --> 00:02:48,640
document update

65
00:02:48,640 --> 00:02:50,640
yeah hi joe thanks i just want to say

66
00:02:50,640 --> 00:02:51,920
thanks to the working group and all

67
00:02:51,920 --> 00:02:53,760
those participated we got two rfcs

68
00:02:53,760 --> 00:02:55,760
published since the last time

69
00:02:55,760 --> 00:02:58,400
um we met the dtls cid draft and the

70
00:02:58,400 --> 00:03:02,080
deprecate md5 and shaw one draft yay

71
00:03:02,080 --> 00:03:04,720
um we have three uh documents with the

72
00:03:04,720 --> 00:03:07,599
rfc editor today it's possible that uh

73
00:03:07,599 --> 00:03:09,440
dtls 1.3

74
00:03:09,440 --> 00:03:12,080
will pop out and ticket requests as well

75
00:03:12,080 --> 00:03:14,959
um we have the external psk guidance

76
00:03:14,959 --> 00:03:16,640
document is out the door

77
00:03:16,640 --> 00:03:18,560
and i guess there were um there's

78
00:03:18,560 --> 00:03:20,000
another document that went back on the

79
00:03:20,000 --> 00:03:22,400
isd telechat because it's been sitting

80
00:03:22,400 --> 00:03:24,159
around um

81
00:03:24,159 --> 00:03:27,040
for a while and lost enough um ads to go

82
00:03:27,040 --> 00:03:29,680
forward and it's only got a couple of

83
00:03:29,680 --> 00:03:31,519
minor editorial things that need to get

84
00:03:31,519 --> 00:03:33,680
fixed so hopefully that'll pop through

85
00:03:33,680 --> 00:03:35,360
um so we're hoping that a lot of the log

86
00:03:35,360 --> 00:03:37,360
jam of the drafts that are in the

87
00:03:37,360 --> 00:03:39,280
working group will pop through and as

88
00:03:39,280 --> 00:03:40,640
you can see that some of the notes and

89
00:03:40,640 --> 00:03:42,159
the asterisks in pink and yellow there

90
00:03:42,159 --> 00:03:43,680
on the on the left

91
00:03:43,680 --> 00:03:45,200
on the bottom of the left hand side

92
00:03:45,200 --> 00:03:46,239
column they've been kind of sitting

93
00:03:46,239 --> 00:03:48,640
around for a while so we're happy to to

94
00:03:48,640 --> 00:03:51,599
move those on and get them out the door

95
00:03:51,599 --> 00:03:53,120
and that's it you i think back to you

96
00:03:53,120 --> 00:03:54,879
unless anyone has any specific questions

97
00:03:54,879 --> 00:03:57,599
about a draft

98
00:03:58,879 --> 00:04:02,720
i i got logged out of uh

99
00:04:03,920 --> 00:04:06,159
the uh

100
00:04:06,159 --> 00:04:07,519
uh

101
00:04:07,519 --> 00:04:09,439
meet echo i think it should be back now

102
00:04:09,439 --> 00:04:11,439
okay yeah we see now

103
00:04:11,439 --> 00:04:12,879
can you go back to the slide real quick

104
00:04:12,879 --> 00:04:14,959
just to make sure to jog my memory here

105
00:04:14,959 --> 00:04:16,639
uh yeah and the other thing is that uh

106
00:04:16,639 --> 00:04:19,199
delegator credentials is in iatf last

107
00:04:19,199 --> 00:04:21,358
call

108
00:04:21,358 --> 00:04:23,040
and and i guess we should note too that

109
00:04:23,040 --> 00:04:24,080
we paused

110
00:04:24,080 --> 00:04:25,840
two drafts the crosses and our

111
00:04:25,840 --> 00:04:27,840
assumption and the flags extensions

112
00:04:27,840 --> 00:04:28,880
until we actually get some

113
00:04:28,880 --> 00:04:32,000
implementation experience

114
00:04:32,880 --> 00:04:35,919
and that's it back to you joe

115
00:04:35,919 --> 00:04:37,440
okay

116
00:04:37,440 --> 00:04:40,240
um i think now we will start into our

117
00:04:40,240 --> 00:04:42,639
regularly scheduled uh program

118
00:04:42,639 --> 00:04:47,360
with uh i think ctls was first

119
00:04:47,759 --> 00:04:49,919
is

120
00:04:51,600 --> 00:04:56,360
ecker do you wanna run slides

121
00:04:58,960 --> 00:05:00,720
or do you want me to is ecker on the

122
00:05:00,720 --> 00:05:03,600
call there you go slide i'll probably i

123
00:05:03,600 --> 00:05:06,240
can run slides probably for largely say

124
00:05:06,240 --> 00:05:07,840
you know

125
00:05:07,840 --> 00:05:12,240
next slide about eight times um

126
00:05:12,240 --> 00:05:14,240
where's the button again

127
00:05:14,240 --> 00:05:17,280
on the it's it's the uh thing that looks

128
00:05:17,280 --> 00:05:20,720
like a piece of paper on the upper

129
00:05:20,720 --> 00:05:22,960
yes under your name uh to the right to

130
00:05:22,960 --> 00:05:25,680
the left i think of the oh yes right

131
00:05:25,680 --> 00:05:29,120
right what could be more clear

132
00:05:30,960 --> 00:05:32,880
okay i pressed the button but it didn't

133
00:05:32,880 --> 00:05:34,720
tell me okay there

134
00:05:34,720 --> 00:05:36,400
that was

135
00:05:36,400 --> 00:05:37,520
not fast

136
00:05:37,520 --> 00:05:39,840
okay

137
00:05:42,479 --> 00:05:44,000
yeah this well this is this is like

138
00:05:44,000 --> 00:05:46,800
really warm up for for for a 46 bits so

139
00:05:46,800 --> 00:05:51,240
we can we can do this first um

140
00:05:53,039 --> 00:05:54,639
tljr i think you know we're getting

141
00:05:54,639 --> 00:05:55,919
pretty close to think being done with

142
00:05:55,919 --> 00:05:57,199
this um

143
00:05:57,199 --> 00:05:58,080
our intention was to take it to

144
00:05:58,080 --> 00:05:59,199
experimental i think and get some

145
00:05:59,199 --> 00:06:00,319
experience rather than try to take it to

146
00:06:00,319 --> 00:06:02,160
ps i think i mentioned this last time

147
00:06:02,160 --> 00:06:04,319
um and

148
00:06:04,319 --> 00:06:05,919
um

149
00:06:05,919 --> 00:06:07,680
so uh recent changes these are mostly

150
00:06:07,680 --> 00:06:09,520
due to because by ben schwartz so thank

151
00:06:09,520 --> 00:06:12,318
you ben um

152
00:06:12,720 --> 00:06:15,199
so i can just summarize these um

153
00:06:15,199 --> 00:06:16,880
uh the first is allowing optional

154
00:06:16,880 --> 00:06:19,039
elements in the profile so you can have

155
00:06:19,039 --> 00:06:20,800
if you have elements which are which are

156
00:06:20,800 --> 00:06:22,560
distinguishable by the receiver

157
00:06:22,560 --> 00:06:25,120
um whether they're not um then you can

158
00:06:25,120 --> 00:06:27,039
have the optional um

159
00:06:27,039 --> 00:06:28,880
moving the profile do the client hello

160
00:06:28,880 --> 00:06:31,199
to make it the

161
00:06:31,199 --> 00:06:32,000
uh

162
00:06:32,000 --> 00:06:34,639
the structure clear um uh instead of

163
00:06:34,639 --> 00:06:37,120
having a a conditional sequence number

164
00:06:37,120 --> 00:06:39,440
um which um which is the conditional

165
00:06:39,440 --> 00:06:41,039
profile making it show why you're doing

166
00:06:41,039 --> 00:06:42,720
stream or datagram um this seems to make

167
00:06:42,720 --> 00:06:45,039
more sense because uh you know it does

168
00:06:45,039 --> 00:06:46,319
you really need the sequence number if

169
00:06:46,319 --> 00:06:47,360
you're in the datagram and you don't

170
00:06:47,360 --> 00:06:49,360
need a future stream um some

171
00:06:49,360 --> 00:06:50,880
clarifications around the alerts and

172
00:06:50,880 --> 00:06:52,400
around um or in the encryption

173
00:06:52,400 --> 00:06:54,160
computation um these actually don't

174
00:06:54,160 --> 00:06:56,160
change anything they're just like well

175
00:06:56,160 --> 00:06:57,199
the encryption computation really

176
00:06:57,199 --> 00:06:58,880
doesn't change anything and the alerts

177
00:06:58,880 --> 00:07:00,720
um i always intended to be the same and

178
00:07:00,720 --> 00:07:02,560
somehow i just never wrote that down

179
00:07:02,560 --> 00:07:04,000
so i don't know if you want to call it a

180
00:07:04,000 --> 00:07:05,520
clarification or not that's about the

181
00:07:05,520 --> 00:07:06,800
other to you

182
00:07:06,800 --> 00:07:09,120
um

183
00:07:09,360 --> 00:07:11,360
so um uh there's still numerous small

184
00:07:11,360 --> 00:07:14,479
number issues um uh the next two are

185
00:07:14,479 --> 00:07:16,560
actually related so

186
00:07:16,560 --> 00:07:18,479
i'm going to do them both and then we

187
00:07:18,479 --> 00:07:20,960
can um talk about them um

188
00:07:20,960 --> 00:07:22,240
that

189
00:07:22,240 --> 00:07:23,759
we remove the length field in the same

190
00:07:23,759 --> 00:07:25,199
space

191
00:07:25,199 --> 00:07:27,759
and um

192
00:07:27,840 --> 00:07:31,120
the underlying idea um uh was either

193
00:07:31,120 --> 00:07:32,319
that um

194
00:07:32,319 --> 00:07:34,319
the the messages actually every message

195
00:07:34,319 --> 00:07:35,680
actually was self-describing so you

196
00:07:35,680 --> 00:07:36,960
could parse the messages and then just

197
00:07:36,960 --> 00:07:38,800
stop um

198
00:07:38,800 --> 00:07:41,120
uh and also that perhaps this would be

199
00:07:41,120 --> 00:07:42,479
carried over transport that wasn't

200
00:07:42,479 --> 00:07:44,080
wasn't really like tcp was more message

201
00:07:44,080 --> 00:07:46,400
oriented in which case um

202
00:07:46,400 --> 00:07:49,120
um in which case you would need um to do

203
00:07:49,120 --> 00:07:50,080
that because you could just like parse

204
00:07:50,080 --> 00:07:52,000
the end of the message um

205
00:07:52,000 --> 00:07:53,919
so um but if you're kind of tcp this is

206
00:07:53,919 --> 00:07:55,280
actually kind of a pain because you have

207
00:07:55,280 --> 00:07:57,039
to actually pursue the message before

208
00:07:57,039 --> 00:07:58,800
you get to the end rather than just

209
00:07:58,800 --> 00:08:00,319
being as an ordinary tls so you could

210
00:08:00,319 --> 00:08:01,919
just like look at the message header and

211
00:08:01,919 --> 00:08:03,199
find out how long it is and then of

212
00:08:03,199 --> 00:08:04,639
course you're facing the possibility

213
00:08:04,639 --> 00:08:06,720
that the um that like the message is not

214
00:08:06,720 --> 00:08:08,720
as long or short as it is but at least

215
00:08:08,720 --> 00:08:10,160
um you could you could have a two-layer

216
00:08:10,160 --> 00:08:11,280
parser

217
00:08:11,280 --> 00:08:13,759
so ben suggested a flag in the record

218
00:08:13,759 --> 00:08:15,199
for this but it's of course won't work

219
00:08:15,199 --> 00:08:18,319
for udp um and there's a separate issue

220
00:08:18,319 --> 00:08:21,919
um issue 41. um he's been here by the

221
00:08:21,919 --> 00:08:25,680
way and he just look uh good awesome

222
00:08:25,680 --> 00:08:27,599
about fragmentation for udp so um we

223
00:08:27,599 --> 00:08:29,440
originally assumed the tc the

224
00:08:29,440 --> 00:08:32,240
ctls was going to run over tcp and so we

225
00:08:32,240 --> 00:08:34,320
wouldn't need to reconstruct and so the

226
00:08:34,320 --> 00:08:36,240
headers don't get any information at all

227
00:08:36,240 --> 00:08:38,320
about how to read the reconstruction um

228
00:08:38,320 --> 00:08:40,958
so that's pretty clearly in a mission um

229
00:08:40,958 --> 00:08:42,719
and um and then we just like said well

230
00:08:42,719 --> 00:08:44,159
this will work fine for dtls we like you

231
00:08:44,159 --> 00:08:45,760
know we put a d in front of everything

232
00:08:45,760 --> 00:08:46,720
um

233
00:08:46,720 --> 00:08:48,160
and

234
00:08:48,160 --> 00:08:50,880
so that's not also fantastic um

235
00:08:50,880 --> 00:08:52,000
uh this is what happens when you have an

236
00:08:52,000 --> 00:08:53,279
implementation that when you wear them

237
00:08:53,279 --> 00:08:55,120
tell us um so

238
00:08:55,120 --> 00:08:57,600
um my first solution to this which um

239
00:08:57,600 --> 00:08:58,800
i'm thinking people will be surprised

240
00:08:58,800 --> 00:09:01,600
here um is to uh

241
00:09:01,600 --> 00:09:03,279
profile even further which is simply

242
00:09:03,279 --> 00:09:06,000
have um the traditional framing for both

243
00:09:06,000 --> 00:09:09,839
um the la uh um you have you know a a

244
00:09:09,839 --> 00:09:11,440
version that has no framing a version

245
00:09:11,440 --> 00:09:12,800
that has um a length framing and a

246
00:09:12,800 --> 00:09:14,480
person that has the full framing um and

247
00:09:14,480 --> 00:09:16,080
those would simply be as they are in the

248
00:09:16,080 --> 00:09:17,680
current in the current system

249
00:09:17,680 --> 00:09:19,120
um although we might might make the

250
00:09:19,120 --> 00:09:22,080
image a little smaller um

251
00:09:22,080 --> 00:09:23,839
so um i don't love this but i think it's

252
00:09:23,839 --> 00:09:26,480
probably the clean solution and um um

253
00:09:26,480 --> 00:09:28,000
and if which is that doesn't work then

254
00:09:28,000 --> 00:09:29,519
uh then it's to say the profile because

255
00:09:29,519 --> 00:09:32,720
it lets us um save ourselves so um

256
00:09:32,720 --> 00:09:33,600
uh

257
00:09:33,600 --> 00:09:35,120
um i guess i'll take comments but this

258
00:09:35,120 --> 00:09:37,279
is my put on this ben

259
00:09:37,279 --> 00:09:38,480
i figure you're going to say something

260
00:09:38,480 --> 00:09:40,880
maybe not

261
00:09:41,760 --> 00:09:44,640
yeah go ahead ben

262
00:09:46,399 --> 00:09:47,680
hey

263
00:09:47,680 --> 00:09:49,600
uh

264
00:09:49,600 --> 00:09:51,120
cool so what's the difference between

265
00:09:51,120 --> 00:09:52,800
length and full

266
00:09:52,800 --> 00:09:56,640
length means tls and formulas dtls

267
00:09:56,640 --> 00:09:57,760
effectively

268
00:09:57,760 --> 00:09:58,720
okay

269
00:09:58,720 --> 00:10:02,399
uh so so full is is the one that that

270
00:10:02,399 --> 00:10:05,040
supports include

271
00:10:13,279 --> 00:10:16,000
and this is optional because

272
00:10:16,000 --> 00:10:16,839
it's

273
00:10:16,839 --> 00:10:18,480
um

274
00:10:18,480 --> 00:10:20,720
because there are some use cases where

275
00:10:20,720 --> 00:10:22,560
you know that your handshake messages

276
00:10:22,560 --> 00:10:24,720
are so small that they fit into a single

277
00:10:24,720 --> 00:10:26,000
message

278
00:10:26,000 --> 00:10:27,920
uh i was more thinking

279
00:10:27,920 --> 00:10:30,000
uh

280
00:10:30,000 --> 00:10:32,480
a single record no i was more thinking

281
00:10:32,480 --> 00:10:35,040
use cases where you have a transport

282
00:10:35,040 --> 00:10:36,959
that's carrying them that um the time to

283
00:10:36,959 --> 00:10:39,440
limit them

284
00:10:39,440 --> 00:10:41,360
okay so so you it sounds like you

285
00:10:41,360 --> 00:10:44,000
imagine that in the

286
00:10:44,000 --> 00:10:47,839
ctls dtls we need a better tls udp

287
00:10:47,839 --> 00:10:50,959
uh case that we would always use fall

288
00:10:50,959 --> 00:10:52,720
i think should have to yes

289
00:10:52,720 --> 00:10:55,040
okay and then the question is just on

290
00:10:55,040 --> 00:10:58,000
the um on the ctls

291
00:10:58,000 --> 00:11:01,839
tcp side uh this would be an option for

292
00:11:01,839 --> 00:11:03,200
well i think i think that yes the

293
00:11:03,200 --> 00:11:04,959
purpose of that and the purpose of that

294
00:11:04,959 --> 00:11:08,160
option would be to save three bytes

295
00:11:08,160 --> 00:11:10,560
affirmative um okay

296
00:11:10,560 --> 00:11:13,440
yeah i think i i i just i want to just

297
00:11:13,440 --> 00:11:15,600
like sharpen that a tiny bit um which is

298
00:11:15,600 --> 00:11:17,760
to say that there's a um

299
00:11:17,760 --> 00:11:18,880
uh

300
00:11:18,880 --> 00:11:20,560
um you know one of the purposes of this

301
00:11:20,560 --> 00:11:22,079
exercise though i think it may be it

302
00:11:22,079 --> 00:11:24,079
might be as clear as it was before we

303
00:11:24,079 --> 00:11:26,480
started is also to like

304
00:11:26,480 --> 00:11:28,320
draw a clear line between tls and uses

305
00:11:28,320 --> 00:11:30,160
like a handshake protocol but then with

306
00:11:30,160 --> 00:11:30,959
like

307
00:11:30,959 --> 00:11:32,880
with an exterior

308
00:11:32,880 --> 00:11:35,360
as an ache as an exterior for other

309
00:11:35,360 --> 00:11:37,360
protocols like it's used in quick and in

310
00:11:37,360 --> 00:11:38,560
that case you might imagine having a

311
00:11:38,560 --> 00:11:39,839
having a protocol which had like full

312
00:11:39,839 --> 00:11:41,279
message framing in which case you

313
00:11:41,279 --> 00:11:42,480
wouldn't have to worry about the problem

314
00:11:42,480 --> 00:11:46,320
of of any framing at all

315
00:11:46,480 --> 00:11:48,399
okay

316
00:11:48,399 --> 00:11:49,519
uh

317
00:11:49,519 --> 00:11:51,519
well yeah i i don't have an objection to

318
00:11:51,519 --> 00:11:53,760
this i okay i'm not entirely sure i get

319
00:11:53,760 --> 00:11:55,600
the motivation but it works for me

320
00:11:55,600 --> 00:11:57,680
okay i i i think i'm happy to like have

321
00:11:57,680 --> 00:11:59,040
this is like obviously not like the most

322
00:11:59,040 --> 00:12:00,320
amazing thing ever so like i'm really

323
00:12:00,320 --> 00:12:02,160
happy to like hear this is a bad idea in

324
00:12:02,160 --> 00:12:04,720
the future uh um you know i i i don't

325
00:12:04,720 --> 00:12:06,000
think them knows anything now they're

326
00:12:06,000 --> 00:12:08,079
not committing themselves forever

327
00:12:08,079 --> 00:12:11,079
martin

328
00:12:13,680 --> 00:12:16,399
oh um when you say full i'm looking at

329
00:12:16,399 --> 00:12:19,360
the low spec here and it has a length

330
00:12:19,360 --> 00:12:20,639
which is the length of the handshake

331
00:12:20,639 --> 00:12:21,600
message

332
00:12:21,600 --> 00:12:23,120
there's a

333
00:12:23,120 --> 00:12:24,800
fragment offset and fragment length do

334
00:12:24,800 --> 00:12:26,800
we need all three or can we get by with

335
00:12:26,800 --> 00:12:28,079
just two

336
00:12:28,079 --> 00:12:30,079
um you can get by

337
00:12:30,079 --> 00:12:31,600
uh

338
00:12:31,600 --> 00:12:33,839
um you can get by you you can you can

339
00:12:33,839 --> 00:12:37,519
shave off one with that you can sorry uh

340
00:12:37,519 --> 00:12:40,240
you need all three with the cur sorry if

341
00:12:40,240 --> 00:12:41,760
they're the same as they currently have

342
00:12:41,760 --> 00:12:44,480
you need all three um but um you can

343
00:12:44,480 --> 00:12:46,399
imagine different semantics which only

344
00:12:46,399 --> 00:12:49,200
had two um in particular um

345
00:12:49,200 --> 00:12:51,920
uh in particular if you had an end of

346
00:12:51,920 --> 00:12:54,000
message bit like like t like like ip

347
00:12:54,000 --> 00:12:55,279
does you could shave off you could take

348
00:12:55,279 --> 00:12:57,360
one you could run you you could say you

349
00:12:57,360 --> 00:12:59,040
could rob one bit from one of those and

350
00:12:59,040 --> 00:13:00,560
and then and then um

351
00:13:00,560 --> 00:13:03,040
and then you know uh uh

352
00:13:03,040 --> 00:13:05,519
and then say there's only two

353
00:13:05,519 --> 00:13:07,279
so that suggests there's maybe something

354
00:13:07,279 --> 00:13:08,560
we could do that's a little more

355
00:13:08,560 --> 00:13:10,480
efficient than yeah than just i think

356
00:13:10,480 --> 00:13:12,480
the gtls one is pretty arguable you can

357
00:13:12,480 --> 00:13:13,760
improve it i think i think actually

358
00:13:13,760 --> 00:13:15,600
arguably for ctl are you for tls you

359
00:13:15,600 --> 00:13:16,959
could just make it two bytes too i think

360
00:13:16,959 --> 00:13:18,560
like um

361
00:13:18,560 --> 00:13:21,200
almost certainly yep

362
00:13:21,200 --> 00:13:22,639
okay um so i think i'm gonna like i'm

363
00:13:22,639 --> 00:13:23,839
gonna put something like vaguely like

364
00:13:23,839 --> 00:13:25,440
this in here and then and then and then

365
00:13:25,440 --> 00:13:28,880
people can like say the pr a little bit

366
00:13:30,959 --> 00:13:32,160
thanks

367
00:13:32,160 --> 00:13:33,680
i was hoping to get a sense of how

368
00:13:33,680 --> 00:13:34,720
people thought we should proceed because

369
00:13:34,720 --> 00:13:36,480
i hadn't like actually engaged with this

370
00:13:36,480 --> 00:13:38,720
as carefully as i was hoping

371
00:13:38,720 --> 00:13:40,399
um

372
00:13:40,399 --> 00:13:41,279
so

373
00:13:41,279 --> 00:13:42,320
um

374
00:13:42,320 --> 00:13:44,399
uh there are um

375
00:13:44,399 --> 00:13:46,320
uh the other there are there are two

376
00:13:46,320 --> 00:13:48,160
other optimizations of the ache on which

377
00:13:48,160 --> 00:13:49,920
people suggested

378
00:13:49,920 --> 00:13:51,680
one is emitting the random values in

379
00:13:51,680 --> 00:13:53,680
favor of requiring

380
00:13:53,680 --> 00:13:55,839
um

381
00:13:55,839 --> 00:13:58,399
diffie-hellman to be random

382
00:13:58,399 --> 00:13:59,600
and the other is even in the finish

383
00:13:59,600 --> 00:14:00,560
value

384
00:14:00,560 --> 00:14:02,079
so the implication of meaning the

385
00:14:02,079 --> 00:14:03,360
randoms like if that's why there's

386
00:14:03,360 --> 00:14:05,120
randomness um which is obviously a

387
00:14:05,120 --> 00:14:07,040
problem if you do like pure pure pure

388
00:14:07,040 --> 00:14:08,959
psk equation detailment which is like

389
00:14:08,959 --> 00:14:11,279
inadvisable in general um

390
00:14:11,279 --> 00:14:14,000
um but also like a lot of analysis

391
00:14:14,000 --> 00:14:15,279
people do often will assume the random

392
00:14:15,279 --> 00:14:17,040
values are there um

393
00:14:17,040 --> 00:14:18,639
the um

394
00:14:18,639 --> 00:14:20,800
uh the the finished um

395
00:14:20,800 --> 00:14:22,880
basically uh as you will recall from the

396
00:14:22,880 --> 00:14:24,320
discussion of phil's 1.3 when we first

397
00:14:24,320 --> 00:14:26,639
did it if you take the finished out um

398
00:14:26,639 --> 00:14:28,160
you still do get integrity of the

399
00:14:28,160 --> 00:14:30,399
handshape but you're relying entirely on

400
00:14:30,399 --> 00:14:31,680
the aed

401
00:14:31,680 --> 00:14:33,839
on the subsequent messages um

402
00:14:33,839 --> 00:14:35,440
so it's not impossible but like it

403
00:14:35,440 --> 00:14:37,199
really substantiates the analysis and

404
00:14:37,199 --> 00:14:38,480
the guarantees and the separation

405
00:14:38,480 --> 00:14:41,360
between those two proofs um

406
00:14:41,360 --> 00:14:42,399
uh

407
00:14:42,399 --> 00:14:46,560
my um i given

408
00:14:46,560 --> 00:14:48,320
i i guess i think you know when we first

409
00:14:48,320 --> 00:14:49,279
started this there was like an attempt

410
00:14:49,279 --> 00:14:50,560
to like radically summon everything we

411
00:14:50,560 --> 00:14:52,240
possibly could um because there was a

412
00:14:52,240 --> 00:14:53,680
feeling like that was the only chance we

413
00:14:53,680 --> 00:14:55,279
had i think that my sense now is now

414
00:14:55,279 --> 00:14:56,880
that we have the profile mechanism these

415
00:14:56,880 --> 00:14:58,240
are things we could like to add later

416
00:14:58,240 --> 00:15:00,880
and of the jr now and i'm sort of like i

417
00:15:00,880 --> 00:15:02,959
think i'd rather try to get some um and

418
00:15:02,959 --> 00:15:04,560
if you like the people i've talked to um

419
00:15:04,560 --> 00:15:05,600
that actually are talking about doing

420
00:15:05,600 --> 00:15:07,360
this like i think

421
00:15:07,360 --> 00:15:08,959
um you know let's see if we actually get

422
00:15:08,959 --> 00:15:11,120
any interest anyway um

423
00:15:11,120 --> 00:15:13,040
uh or rather let's see if we haven't

424
00:15:13,040 --> 00:15:15,920
developed justified me uh just any cases

425
00:15:15,920 --> 00:15:17,360
that really have that narrow requirement

426
00:15:17,360 --> 00:15:18,959
as well as extra pieces

427
00:15:18,959 --> 00:15:20,720
um

428
00:15:20,720 --> 00:15:22,399
yeah i was just gonna second that on the

429
00:15:22,399 --> 00:15:24,839
can we do it later the profiling

430
00:15:24,839 --> 00:15:27,839
mechanism made this possible to do very

431
00:15:27,839 --> 00:15:29,360
very cleanly in the implementation work

432
00:15:29,360 --> 00:15:31,360
i did so i think this

433
00:15:31,360 --> 00:15:32,880
as long as we believe the profiling

434
00:15:32,880 --> 00:15:34,800
thing can be extended i think this is

435
00:15:34,800 --> 00:15:38,279
fine to do later

436
00:15:40,320 --> 00:15:41,600
okay um

437
00:15:41,600 --> 00:15:42,320
i

438
00:15:42,320 --> 00:15:44,800
i plan to do that as i say um

439
00:15:44,800 --> 00:15:46,160
okay um

440
00:15:46,160 --> 00:15:47,920
the sec the second piece that i heard

441
00:15:47,920 --> 00:15:49,279
suggested these are these by the way

442
00:15:49,279 --> 00:15:50,880
these suggestions are are you know been

443
00:15:50,880 --> 00:15:51,920
floating around but most recently

444
00:15:51,920 --> 00:15:53,759
they're due to karthik bargavan so i

445
00:15:53,759 --> 00:15:54,800
want to make sure i'm getting proper

446
00:15:54,800 --> 00:15:57,440
credit there um

447
00:15:57,440 --> 00:15:59,360
the um

448
00:15:59,360 --> 00:16:01,040
uh was to remove the transfer

449
00:16:01,040 --> 00:16:03,199
reconstruction piece so so richard had

450
00:16:03,199 --> 00:16:05,040
this very clever idea of like treating

451
00:16:05,040 --> 00:16:06,959
this like a compression layer um in the

452
00:16:06,959 --> 00:16:09,680
uh in the system um and then but the

453
00:16:09,680 --> 00:16:10,959
implication of the compression layer is

454
00:16:10,959 --> 00:16:13,199
that then when you um that then you

455
00:16:13,199 --> 00:16:15,519
actually operate the t at the

456
00:16:15,519 --> 00:16:17,120
tls layer um

457
00:16:17,120 --> 00:16:20,560
um as if it were uh uh um

458
00:16:20,560 --> 00:16:21,839
as if it were rare class and then you

459
00:16:21,839 --> 00:16:22,880
extract everything down and brought it

460
00:16:22,880 --> 00:16:24,240
back up again so you had actually a

461
00:16:24,240 --> 00:16:27,040
compatible transcript except for um

462
00:16:27,040 --> 00:16:28,320
except for like some handshake value

463
00:16:28,320 --> 00:16:29,519
distinguishing that you actually were

464
00:16:29,519 --> 00:16:31,519
doing ctls um

465
00:16:31,519 --> 00:16:33,600
so uh this seems to add some like

466
00:16:33,600 --> 00:16:34,959
conceptual complexity and tetra

467
00:16:34,959 --> 00:16:36,399
complexity i'm not

468
00:16:36,399 --> 00:16:37,360
that's not i think there's something

469
00:16:37,360 --> 00:16:39,120
better how much so i don't know if you

470
00:16:39,120 --> 00:16:41,279
want to think what real thoughts on that

471
00:16:41,279 --> 00:16:44,000
um or not uh so uh

472
00:16:44,000 --> 00:16:45,279
i'm defense myself

473
00:16:45,279 --> 00:16:48,000
harness is at the mic line honest just

474
00:16:48,000 --> 00:16:50,639
i couldn't see honest you can check in

475
00:16:50,639 --> 00:16:51,680
at the

476
00:16:51,680 --> 00:16:53,600
using the app too but you don't have to

477
00:16:53,600 --> 00:16:55,279
worry about that harness i was looking i

478
00:16:55,279 --> 00:16:56,720
was looking on the actual queue so i

479
00:16:56,720 --> 00:16:58,160
couldn't see with the mic

480
00:16:58,160 --> 00:17:00,240
you're very tiny

481
00:17:00,240 --> 00:17:02,000
no no problem yeah

482
00:17:02,000 --> 00:17:04,559
i'm far away uh so

483
00:17:04,559 --> 00:17:06,799
exactly

484
00:17:06,799 --> 00:17:07,919
um so

485
00:17:07,919 --> 00:17:09,919
those those three proposals were made by

486
00:17:09,919 --> 00:17:12,240
kartik as you said and um i think they

487
00:17:12,240 --> 00:17:13,599
actually they are very good

488
00:17:13,599 --> 00:17:15,359
optimizations but there's a kind of a

489
00:17:15,359 --> 00:17:17,199
chicken and egg problem before we we

490
00:17:17,199 --> 00:17:18,400
didn't incorporate them into the

491
00:17:18,400 --> 00:17:21,599
document so neither karthik nor others

492
00:17:21,599 --> 00:17:23,919
like really sort of

493
00:17:23,919 --> 00:17:26,400
what looked like uh considered them as a

494
00:17:26,400 --> 00:17:30,080
a serious um area of investigation

495
00:17:30,080 --> 00:17:32,240
and so like delaying them to a later

496
00:17:32,240 --> 00:17:33,919
stage uh

497
00:17:33,919 --> 00:17:35,200
i think could be

498
00:17:35,200 --> 00:17:37,600
could be tricky in practice um because

499
00:17:37,600 --> 00:17:39,360
you don't want to do these sort of like

500
00:17:39,360 --> 00:17:41,840
bigger changes later on specifically the

501
00:17:41,840 --> 00:17:44,640
the transcript

502
00:17:44,640 --> 00:17:46,720
sort of reconstruction because

503
00:17:46,720 --> 00:17:48,480
that could um

504
00:17:48,480 --> 00:17:49,919
be quite a

505
00:17:49,919 --> 00:17:52,480
time saver implementation wise because

506
00:17:52,480 --> 00:17:54,480
now what i have to do is i have to

507
00:17:54,480 --> 00:17:56,880
basically construct the message um and

508
00:17:56,880 --> 00:17:59,520
then re-run the whole uh process to

509
00:17:59,520 --> 00:18:01,840
create the kind of real message to just

510
00:18:01,840 --> 00:18:04,320
have the the transcript version which is

511
00:18:04,320 --> 00:18:06,400
um in an embedded implementation not a

512
00:18:06,400 --> 00:18:08,240
piece of cake in richard's go

513
00:18:08,240 --> 00:18:12,080
implementation it's not a problem but um

514
00:18:12,080 --> 00:18:13,679
if you care about

515
00:18:13,679 --> 00:18:15,760
saving ram and and uh also the

516
00:18:15,760 --> 00:18:17,440
computational efforts

517
00:18:17,440 --> 00:18:20,880
it's it is something so

518
00:18:21,120 --> 00:18:22,880
i don't know so much better

519
00:18:22,880 --> 00:18:25,520
yeah who um who to look for to actually

520
00:18:25,520 --> 00:18:26,960
do that analysis because this is a

521
00:18:26,960 --> 00:18:29,760
pretty serious uh security analysis that

522
00:18:29,760 --> 00:18:31,919
needs to be done here but it's not just

523
00:18:31,919 --> 00:18:33,679
uh oh it looks good

524
00:18:33,679 --> 00:18:35,520
i'm sort of like on the envelope

525
00:18:35,520 --> 00:18:37,520
assessment

526
00:18:37,520 --> 00:18:39,679
so i guess i think this way i think i

527
00:18:39,679 --> 00:18:40,960
think this one we should i think this

528
00:18:40,960 --> 00:18:42,160
one we should resolve one with the other

529
00:18:42,160 --> 00:18:43,840
before we do this because like i think

530
00:18:43,840 --> 00:18:45,760
that the um i think you're right this is

531
00:18:45,760 --> 00:18:47,200
like this is like the other things you

532
00:18:47,200 --> 00:18:48,400
can imagine adding later but this one i

533
00:18:48,400 --> 00:18:49,520
think either works do it it should

534
00:18:49,520 --> 00:18:51,679
happen or not um

535
00:18:51,679 --> 00:18:53,760
i i guess

536
00:18:53,760 --> 00:18:54,799
uh

537
00:18:54,799 --> 00:18:55,679
well i guess i'd like to hear for other

538
00:18:55,679 --> 00:18:56,880
people i'm sort of like i thought this

539
00:18:56,880 --> 00:18:58,559
was a clever idea i think when richard

540
00:18:58,559 --> 00:19:00,799
suggested it but i've called on it some

541
00:19:00,799 --> 00:19:02,080
so um

542
00:19:02,080 --> 00:19:03,840
um for the reasons you indicate honest

543
00:19:03,840 --> 00:19:05,200
um

544
00:19:05,200 --> 00:19:06,320
uh so i guess obviously there's some

545
00:19:06,320 --> 00:19:09,520
other points of view um

546
00:19:12,640 --> 00:19:15,360
maybe from richard

547
00:19:19,760 --> 00:19:24,120
or maybe not for sure there you go

548
00:19:24,640 --> 00:19:26,559
um i don't have a whole lot of stake in

549
00:19:26,559 --> 00:19:28,480
this fight um

550
00:19:28,480 --> 00:19:29,919
i think the transcript reconstruction

551
00:19:29,919 --> 00:19:32,720
stuff was mainly about um kind of

552
00:19:32,720 --> 00:19:34,559
establishing logical equivalence between

553
00:19:34,559 --> 00:19:36,400
the ct the compressed transcript in the

554
00:19:36,400 --> 00:19:37,600
real thing

555
00:19:37,600 --> 00:19:38,640
um

556
00:19:38,640 --> 00:19:40,160
i i

557
00:19:40,160 --> 00:19:41,679
you know in kind of an information

558
00:19:41,679 --> 00:19:43,919
theoretic point of view um

559
00:19:43,919 --> 00:19:44,640
right

560
00:19:44,640 --> 00:19:46,720
i i don't think i ever envisioned that

561
00:19:46,720 --> 00:19:49,200
the mechanical expansion of compression

562
00:19:49,200 --> 00:19:52,400
and extraction was was necessary um so i

563
00:19:52,400 --> 00:19:54,320
think it would be useful to have you

564
00:19:54,320 --> 00:19:56,559
know validation on this but i expect

565
00:19:56,559 --> 00:19:57,919
that the results of that you know

566
00:19:57,919 --> 00:20:00,000
analysis would be that it's okay not to

567
00:20:00,000 --> 00:20:02,720
do the reconstruction

568
00:20:02,720 --> 00:20:05,720
okay

569
00:20:07,919 --> 00:20:10,240
thanks i think i know what to do now

570
00:20:10,240 --> 00:20:11,760
i don't think

571
00:20:11,760 --> 00:20:13,039
that's all those are all slides i have

572
00:20:13,039 --> 00:20:14,480
so um i'm

573
00:20:14,480 --> 00:20:16,799
um i'm not aware of any other police

574
00:20:16,799 --> 00:20:19,280
like changes here um um i do go through

575
00:20:19,280 --> 00:20:21,919
the issues um

576
00:20:21,919 --> 00:20:23,919
okay sorry i thought it was kind of mike

577
00:20:23,919 --> 00:20:25,520
i did go through the issues so um i

578
00:20:25,520 --> 00:20:26,640
think you know

579
00:20:26,640 --> 00:20:29,200
um now the dtls is basically done i'm

580
00:20:29,200 --> 00:20:30,240
trying to clear out my queue of these

581
00:20:30,240 --> 00:20:33,520
other documents um as you can see so um

582
00:20:33,520 --> 00:20:35,600
my hope was to uh make these changes

583
00:20:35,600 --> 00:20:37,360
such as they are and then ask for your

584
00:20:37,360 --> 00:20:40,000
price call expert

585
00:20:41,520 --> 00:20:44,400
okay sounds good

586
00:20:45,039 --> 00:20:48,559
i think i'm ready for 84.46

587
00:20:48,559 --> 00:20:51,039
well i think they call it 8846 which is

588
00:20:51,039 --> 00:20:55,400
just a show uh you know

589
00:21:03,679 --> 00:21:05,440
all right i have to do it don't do it do

590
00:21:05,440 --> 00:21:07,679
i play unshare and then share again i

591
00:21:07,679 --> 00:21:11,039
think so i think you do

592
00:21:12,640 --> 00:21:15,640
okay

593
00:21:16,640 --> 00:21:19,679
and i might have to check there we go

594
00:21:19,679 --> 00:21:22,159
here we go

595
00:21:26,400 --> 00:21:27,280
uh

596
00:21:27,280 --> 00:21:29,120
i didn't okay i did call i did call it

597
00:21:29,120 --> 00:21:31,840
the right thing look at that

598
00:21:32,080 --> 00:21:33,679
oh i'm glad to see that my confusion

599
00:21:33,679 --> 00:21:35,919
about the number of the rfc is only it

600
00:21:35,919 --> 00:21:37,120
only occurs at two in the morning it

601
00:21:37,120 --> 00:21:40,559
does not generally occur um

602
00:21:40,559 --> 00:21:42,159
okay

603
00:21:42,159 --> 00:21:44,559
so this also is hopefully close to done

604
00:21:44,559 --> 00:21:45,919
um there are still a few substantive

605
00:21:45,919 --> 00:21:47,840
issues some of which i propose to do

606
00:21:47,840 --> 00:21:48,799
something about and some of which i

607
00:21:48,799 --> 00:21:50,720
propose to do little about

608
00:21:50,720 --> 00:21:52,799
um as people recall the purpose of this

609
00:21:52,799 --> 00:21:55,280
exercise was like um you know largely to

610
00:21:55,280 --> 00:21:57,200
remove some problematic language

611
00:21:57,200 --> 00:21:58,720
for the document and in the process to

612
00:21:58,720 --> 00:22:00,320
clean up some uh

613
00:22:00,320 --> 00:22:01,760
points that have been confusing in the

614
00:22:01,760 --> 00:22:04,640
in in the rfc um it was not to make any

615
00:22:04,640 --> 00:22:05,919
substantive changes that like would

616
00:22:05,919 --> 00:22:08,320
cause real problems um or in our

617
00:22:08,320 --> 00:22:09,440
problems because we're not planning to

618
00:22:09,440 --> 00:22:12,400
rev the protocol number so um uh so i

619
00:22:12,400 --> 00:22:13,440
think you know

620
00:22:13,440 --> 00:22:15,039
any any change we make actually measured

621
00:22:15,039 --> 00:22:16,799
against that question of are we

622
00:22:16,799 --> 00:22:18,000
improving the world are we just like

623
00:22:18,000 --> 00:22:19,360
thinking ourselves a whole and we do

624
00:22:19,360 --> 00:22:21,280
have sort of the overhang of obvious

625
00:22:21,280 --> 00:22:23,200
confusion about different pieces um as

626
00:22:23,200 --> 00:22:25,039
well as said the problematic language so

627
00:22:25,039 --> 00:22:26,960
i do want to get this out and if they're

628
00:22:26,960 --> 00:22:28,400
things that are

629
00:22:28,400 --> 00:22:30,240
like grievously wrong but require like a

630
00:22:30,240 --> 00:22:31,440
lot of engineering time i want to kind

631
00:22:31,440 --> 00:22:33,280
of pump them or even less curiously

632
00:22:33,280 --> 00:22:35,679
wrong hopefully um

633
00:22:35,679 --> 00:22:37,039
i i guess if they're grievously wrong we

634
00:22:37,039 --> 00:22:38,000
have to fix them but if they're just

635
00:22:38,000 --> 00:22:39,600
complicated and someone and somewhat

636
00:22:39,600 --> 00:22:41,520
confusing but but edge cases maybe less

637
00:22:41,520 --> 00:22:42,480
important

638
00:22:42,480 --> 00:22:44,559
since we already have 84 46

639
00:22:44,559 --> 00:22:45,600
um

640
00:22:45,600 --> 00:22:46,799
so um

641
00:22:46,799 --> 00:22:49,039
uh first issue was by john matson who i

642
00:22:49,039 --> 00:22:50,400
don't think is actually i was actually

643
00:22:50,400 --> 00:22:51,919
here because i was presenting in some

644
00:22:51,919 --> 00:22:52,840
other

645
00:22:52,840 --> 00:22:55,520
um uh some other meetings i don't see

646
00:22:55,520 --> 00:22:56,960
them here um

647
00:22:56,960 --> 00:22:58,240
was um

648
00:22:58,240 --> 00:23:01,120
to have recommendations around ecdhe um

649
00:23:01,120 --> 00:23:03,280
so um

650
00:23:03,280 --> 00:23:05,600
currently um key update offers pfs

651
00:23:05,600 --> 00:23:07,679
because you hash the keys forward rotate

652
00:23:07,679 --> 00:23:09,600
these forwards as long as you delete the

653
00:23:09,600 --> 00:23:11,919
old keys you're fine um which i mean

654
00:23:11,919 --> 00:23:14,640
always is a condition for pfs

655
00:23:14,640 --> 00:23:15,840
um

656
00:23:15,840 --> 00:23:17,919
but uh it doesn't offer pcs and for that

657
00:23:17,919 --> 00:23:21,280
of course you need ecdha exchange

658
00:23:21,280 --> 00:23:24,400
so um johnny proposed um we had some

659
00:23:24,400 --> 00:23:26,159
text explaining this point but in that

660
00:23:26,159 --> 00:23:28,159
pr john proposed also recommending the

661
00:23:28,159 --> 00:23:30,000
new exchange at some precipice intervals

662
00:23:30,000 --> 00:23:32,400
specific intervals namely an hour or 100

663
00:23:32,400 --> 00:23:33,440
gigabytes

664
00:23:33,440 --> 00:23:34,480
um

665
00:23:34,480 --> 00:23:36,400
there seemed be a lot of talk to me um

666
00:23:36,400 --> 00:23:39,760
and um it seemed like uh you know we

667
00:23:39,760 --> 00:23:41,279
probably did not need that um so my

668
00:23:41,279 --> 00:23:42,559
appraisal actually is the closest to no

669
00:23:42,559 --> 00:23:43,919
change which is what i'm worked on the

670
00:23:43,919 --> 00:23:44,720
bug

671
00:23:44,720 --> 00:23:48,720
um obviously um you know

672
00:23:48,720 --> 00:23:50,559
if people um

673
00:23:50,559 --> 00:23:52,240
i i said since john is not here if john

674
00:23:52,240 --> 00:23:53,679
wants to jump into the pr or later if

675
00:23:53,679 --> 00:23:55,600
that's okay um or in the bug

676
00:23:55,600 --> 00:23:56,960
um but i wanted to see what other people

677
00:23:56,960 --> 00:23:58,159
thought if anybody else believed we

678
00:23:58,159 --> 00:23:59,360
should make this change and if so we

679
00:23:59,360 --> 00:24:02,840
could discuss it

680
00:24:06,640 --> 00:24:09,600
hearing no objection

681
00:24:12,159 --> 00:24:14,799
uh the second is also john metsen um tls

682
00:24:14,799 --> 00:24:16,159
is a relatively rich set of errors for

683
00:24:16,159 --> 00:24:17,600
certificate problems

684
00:24:17,600 --> 00:24:19,279
um so there's like certificate revokes

685
00:24:19,279 --> 00:24:21,039
difficult spirits if you've got a known

686
00:24:21,039 --> 00:24:22,320
um it doesn't really have anything for

687
00:24:22,320 --> 00:24:24,400
psk's um psks after all kind of an

688
00:24:24,400 --> 00:24:27,039
afterthought in original tls um and 1.3

689
00:24:27,039 --> 00:24:29,039
we didn't bother to extend the alert set

690
00:24:29,039 --> 00:24:30,240
um

691
00:24:30,240 --> 00:24:31,600
so pr

692
00:24:31,600 --> 00:24:34,080
is just repurposing um these uh these

693
00:24:34,080 --> 00:24:36,000
alerts to mean the same you know

694
00:24:36,000 --> 00:24:37,279
effectively mean the same thing with the

695
00:24:37,279 --> 00:24:39,520
tickets um that seemed confusing to me

696
00:24:39,520 --> 00:24:40,640
since after all you could present with

697
00:24:40,640 --> 00:24:42,159
it you could have a psk and a ticket

698
00:24:42,159 --> 00:24:45,520
simultaneously uh sorry a psk and a

699
00:24:45,520 --> 00:24:46,640
certificate although i guess it would go

700
00:24:46,640 --> 00:24:48,080
in the opposite direction

701
00:24:48,080 --> 00:24:48,880
um

702
00:24:48,880 --> 00:24:50,480
uh depending on the time of the

703
00:24:50,480 --> 00:24:52,320
handshake um

704
00:24:52,320 --> 00:24:54,159
um my sense is that these granular

705
00:24:54,159 --> 00:24:56,480
messages in in ordinary tls for

706
00:24:56,480 --> 00:24:57,440
certificates were not actually as

707
00:24:57,440 --> 00:25:01,440
helpful as you might have seemed um

708
00:25:01,440 --> 00:25:03,279
and in particular because of the way um

709
00:25:03,279 --> 00:25:04,480
you know in particular because the way

710
00:25:04,480 --> 00:25:06,320
the path construction happens um you

711
00:25:06,320 --> 00:25:08,080
couldn't you could um you know

712
00:25:08,080 --> 00:25:09,039
especially for intermediates you might

713
00:25:09,039 --> 00:25:12,320
encounter any of these um so um

714
00:25:12,320 --> 00:25:15,360
for the same certificate um so my sense

715
00:25:15,360 --> 00:25:17,120
is probably that's not a great idea um

716
00:25:17,120 --> 00:25:18,159
and i think we should just if we're

717
00:25:18,159 --> 00:25:19,440
gonna do anything we should add just a

718
00:25:19,440 --> 00:25:21,440
ticket invalid alert um that says like

719
00:25:21,440 --> 00:25:22,880
something's wrong with your ticket um

720
00:25:22,880 --> 00:25:25,039
it's also the case that um depending on

721
00:25:25,039 --> 00:25:26,480
exactly your service constructed you

722
00:25:26,480 --> 00:25:27,200
might

723
00:25:27,200 --> 00:25:29,200
um encounter this for a given ticket um

724
00:25:29,200 --> 00:25:30,559
because tickets are because it's

725
00:25:30,559 --> 00:25:32,799
possible to have like um

726
00:25:32,799 --> 00:25:34,400
you know

727
00:25:34,400 --> 00:25:36,400
to fall back to ordinary uh

728
00:25:36,400 --> 00:25:37,440
certificate-based authentication

729
00:25:37,440 --> 00:25:39,679
depending how things are configured

730
00:25:39,679 --> 00:25:40,960
um so i think

731
00:25:40,960 --> 00:25:43,840
um again uh john's that here um

732
00:25:43,840 --> 00:25:46,000
um i have usefully hear from like david

733
00:25:46,000 --> 00:25:47,840
and martin um and other people who are

734
00:25:47,840 --> 00:25:49,440
implementers whether like they find the

735
00:25:49,440 --> 00:25:52,000
certificate like uh uh richness that

736
00:25:52,000 --> 00:25:53,600
helpful um or whether this just seems

737
00:25:53,600 --> 00:25:56,600
appropriate

738
00:26:05,679 --> 00:26:08,080
you have my input in chat this is

739
00:26:08,080 --> 00:26:10,720
i'm finally on

740
00:26:10,720 --> 00:26:12,640
certificates uh

741
00:26:12,640 --> 00:26:15,360
it's really hard to get the right alert

742
00:26:15,360 --> 00:26:16,559
under the

743
00:26:16,559 --> 00:26:18,240
different conditions so i'd be very

744
00:26:18,240 --> 00:26:19,679
happy to say

745
00:26:19,679 --> 00:26:22,400
um just a single thing

746
00:26:22,400 --> 00:26:24,480
not the people

747
00:26:24,480 --> 00:26:27,200
have that richness to go either so

748
00:26:27,200 --> 00:26:29,440
that's fine

749
00:26:29,440 --> 00:26:32,400
i guess they can acquire

750
00:26:32,400 --> 00:26:34,159
they can't really be revoked in the same

751
00:26:34,159 --> 00:26:38,159
way it's this is all internals so

752
00:26:38,159 --> 00:26:39,360
yeah i think this was larger than

753
00:26:39,360 --> 00:26:41,120
external ps case but again it just seems

754
00:26:41,120 --> 00:26:42,320
like this is like i can't make a

755
00:26:42,320 --> 00:26:44,559
connection right um

756
00:26:44,559 --> 00:26:47,760
yeah okay i will take this on board

757
00:26:47,760 --> 00:26:50,158
thank you

758
00:26:51,200 --> 00:26:53,919
um okay um

759
00:26:53,919 --> 00:26:56,640
uh this brings us to issue 1227 um uh

760
00:26:56,640 --> 00:26:59,120
raised by david benjamin um

761
00:26:59,120 --> 00:27:00,559
so um

762
00:27:00,559 --> 00:27:02,480
um we we were

763
00:27:02,480 --> 00:27:04,080
it turns out that like um there are

764
00:27:04,080 --> 00:27:05,440
multiple hashes in play when you're

765
00:27:05,440 --> 00:27:06,880
doing psks

766
00:27:06,880 --> 00:27:09,840
one is the one associated with the psk

767
00:27:09,840 --> 00:27:11,039
and the other is the one that is

768
00:27:11,039 --> 00:27:13,279
associated with the transcript and these

769
00:27:13,279 --> 00:27:14,880
indepen and at least one case is

770
00:27:14,880 --> 00:27:16,720
potentially different um which is

771
00:27:16,720 --> 00:27:18,559
supposing you have two ps case um

772
00:27:18,559 --> 00:27:20,320
obviously um you have to use the hash

773
00:27:20,320 --> 00:27:22,559
associated with psk for the binder um in

774
00:27:22,559 --> 00:27:24,399
the client l1 because you had no other

775
00:27:24,399 --> 00:27:26,240
information um

776
00:27:26,240 --> 00:27:28,080
um but um you know they might have

777
00:27:28,080 --> 00:27:29,760
different different hashes associated

778
00:27:29,760 --> 00:27:31,200
with them um

779
00:27:31,200 --> 00:27:33,039
so um if you're gonna use the when it's

780
00:27:33,039 --> 00:27:35,200
just the blind the psk hash for the

781
00:27:35,200 --> 00:27:37,520
binder associated with the psk and ch1

782
00:27:37,520 --> 00:27:39,120
you obviously should use it for ch2

783
00:27:39,120 --> 00:27:40,080
because that was like part of the whole

784
00:27:40,080 --> 00:27:42,320
point of attributing of having um the

785
00:27:42,320 --> 00:27:44,559
hashes associated with the psks so it's

786
00:27:44,559 --> 00:27:46,880
clearly you have to do that um but then

787
00:27:46,880 --> 00:27:49,039
we have message and but on the other

788
00:27:49,039 --> 00:27:50,720
hand for the transcript you at the very

789
00:27:50,720 --> 00:27:52,080
end of the day you clearly have to use

790
00:27:52,080 --> 00:27:54,000
the negotiated hash and what hash is

791
00:27:54,000 --> 00:27:55,520
used for the message hash rejection

792
00:27:55,520 --> 00:27:57,840
becomes the question um and when david

793
00:27:57,840 --> 00:27:59,679
and i talked about this a little bit um

794
00:27:59,679 --> 00:28:01,360
it became clear that david thought that

795
00:28:01,360 --> 00:28:03,919
um that this text said that the um that

796
00:28:03,919 --> 00:28:05,279
you should use the psk hash for

797
00:28:05,279 --> 00:28:06,720
re-injection and i thought you should

798
00:28:06,720 --> 00:28:09,279
use the negotiated hash um and david and

799
00:28:09,279 --> 00:28:10,880
i i believe agree that it should be the

800
00:28:10,880 --> 00:28:12,240
negotiated hash but it's not clear what

801
00:28:12,240 --> 00:28:15,520
the test currently says um so um

802
00:28:15,520 --> 00:28:17,279
uh it will work it pretty much doesn't

803
00:28:17,279 --> 00:28:20,000
work properly if you use the psk hash um

804
00:28:20,000 --> 00:28:23,440
and um so the proposal is to um

805
00:28:23,440 --> 00:28:25,600
and so i think um you know david's model

806
00:28:25,600 --> 00:28:27,120
where that where the um

807
00:28:27,120 --> 00:28:28,799
where it said he's the psk hash he had a

808
00:28:28,799 --> 00:28:29,919
hack to make sure that hap made sure

809
00:28:29,919 --> 00:28:33,120
that they matched um and so um

810
00:28:33,120 --> 00:28:34,880
i think the proposal here is just to

811
00:28:34,880 --> 00:28:36,240
modify a document to make it clear at

812
00:28:36,240 --> 00:28:38,559
every point in the first of all to make

813
00:28:38,559 --> 00:28:40,960
clear that that is the negotiated hash

814
00:28:40,960 --> 00:28:42,720
um yes it does include negotiators ever

815
00:28:42,720 --> 00:28:46,559
suite um and um so the proposal is to

816
00:28:46,559 --> 00:28:47,760
modify a document to make sure that's

817
00:28:47,760 --> 00:28:49,600
the case and in fact every case every

818
00:28:49,600 --> 00:28:51,679
place we use hash to indicate which hash

819
00:28:51,679 --> 00:28:54,240
it is properly um in some way or another

820
00:28:54,240 --> 00:28:56,320
so the transcript is clear so i think

821
00:28:56,320 --> 00:28:57,279
everywhere else it actually is

822
00:28:57,279 --> 00:28:59,120
relatively clear but that's because when

823
00:28:59,120 --> 00:29:00,720
i produce the pr people can object to

824
00:29:00,720 --> 00:29:03,440
that if i if if i concretize it in some

825
00:29:03,440 --> 00:29:04,640
way that thing is wrong that'll be

826
00:29:04,640 --> 00:29:06,960
helpful

827
00:29:08,640 --> 00:29:13,000
okay that's what i intend to do

828
00:29:14,080 --> 00:29:15,600
okay um

829
00:29:15,600 --> 00:29:17,760
uh david benjamin also read a couple

830
00:29:17,760 --> 00:29:22,240
points um 12 23 and 12 24 about the hr

831
00:29:22,240 --> 00:29:25,240
um

832
00:29:26,000 --> 00:29:26,880
uh

833
00:29:26,880 --> 00:29:28,640
um and so um his point is the general

834
00:29:28,640 --> 00:29:30,799
model is kind of confusing um so we

835
00:29:30,799 --> 00:29:32,559
don't really say um

836
00:29:32,559 --> 00:29:33,360
i think

837
00:29:33,360 --> 00:29:35,039
martin and i had largely assumed that

838
00:29:35,039 --> 00:29:36,320
almost every important decision was made

839
00:29:36,320 --> 00:29:38,240
in ch2 and sometimes they hadn't made

840
00:29:38,240 --> 00:29:40,159
some preliminary decisions in ch1 but

841
00:29:40,159 --> 00:29:41,279
that they were just effectively

842
00:29:41,279 --> 00:29:42,960
confirmed by ch2

843
00:29:42,960 --> 00:29:44,480
and i think david sort of assumed that

844
00:29:44,480 --> 00:29:47,360
you must have made a decision in ch1 and

845
00:29:47,360 --> 00:29:50,080
um and then uh

846
00:29:50,080 --> 00:29:51,360
and then like you just pictured pick

847
00:29:51,360 --> 00:29:53,600
things out of ch2 um and memorize the

848
00:29:53,600 --> 00:29:56,000
material systems h2 and

849
00:29:56,000 --> 00:29:58,559
um neither is possible purely because as

850
00:29:58,559 --> 00:30:00,000
you make decisions in ch one which

851
00:30:00,000 --> 00:30:02,960
implement implement in fact ch2 um so

852
00:30:02,960 --> 00:30:05,520
the example david gave in in this

853
00:30:05,520 --> 00:30:07,360
comment was

854
00:30:07,360 --> 00:30:09,360
imagine what happens if

855
00:30:09,360 --> 00:30:11,440
um someone offers you like psk only

856
00:30:11,440 --> 00:30:13,919
resumption with no dhe um and so

857
00:30:13,919 --> 00:30:15,279
depending on whether you accept that or

858
00:30:15,279 --> 00:30:17,360
not and they also offer you a set of

859
00:30:17,360 --> 00:30:18,880
helmet groups where you need to do an hr

860
00:30:18,880 --> 00:30:19,760
and so depending with your accept

861
00:30:19,760 --> 00:30:20,880
presumption or not you might need to do

862
00:30:20,880 --> 00:30:23,919
an hr or not um so this is like a bit of

863
00:30:23,919 --> 00:30:26,480
a rat hole i fear um and so i think the

864
00:30:26,480 --> 00:30:28,320
um and as i understand it from talking

865
00:30:28,320 --> 00:30:30,320
to david yesterday for a while um most

866
00:30:30,320 --> 00:30:31,679
ambiguity comes into play when we're

867
00:30:31,679 --> 00:30:33,200
doing ech so he's less worried about it

868
00:30:33,200 --> 00:30:34,880
now and so i guess my question would be

869
00:30:34,880 --> 00:30:36,240
what's the minimum thing we can do here

870
00:30:36,240 --> 00:30:39,120
to like reduce the ambiguity of this um

871
00:30:39,120 --> 00:30:40,399
and um

872
00:30:40,399 --> 00:30:41,760
what do we not have to do and so i think

873
00:30:41,760 --> 00:30:43,279
we do the minimum thing um i don't have

874
00:30:43,279 --> 00:30:44,399
a proposal of that um i was actually

875
00:30:44,399 --> 00:30:47,679
hoping david could make suggestions um

876
00:30:47,679 --> 00:30:49,440
uh or or antiques i think they're a

877
00:30:49,440 --> 00:30:52,159
little closer to this point um but uh i

878
00:30:52,159 --> 00:30:53,919
think like as i was sort of saying at

879
00:30:53,919 --> 00:30:55,360
the beginning um what i don't want to do

880
00:30:55,360 --> 00:30:57,360
is spend the next six months or a year

881
00:30:57,360 --> 00:30:58,159
um

882
00:30:58,159 --> 00:30:59,840
you know trying to clarify this um in

883
00:30:59,840 --> 00:31:02,240
unhelpful ways um because where it's an

884
00:31:02,240 --> 00:31:03,919
improvement to get this out um and then

885
00:31:03,919 --> 00:31:05,279
if someone wants to make a bigger pass

886
00:31:05,279 --> 00:31:08,000
at it um we could position it out there

887
00:31:08,000 --> 00:31:09,279
um unless there's like things that are

888
00:31:09,279 --> 00:31:10,720
actively causing people confusion right

889
00:31:10,720 --> 00:31:11,760
now

890
00:31:11,760 --> 00:31:13,519
oh it's unfortunate i see dave ben's not

891
00:31:13,519 --> 00:31:15,600
actually here um

892
00:31:15,600 --> 00:31:17,600
um

893
00:31:17,600 --> 00:31:18,880
um

894
00:31:18,880 --> 00:31:21,440
so um

895
00:31:21,440 --> 00:31:22,960
uh well i think uh stephen i don't think

896
00:31:22,960 --> 00:31:24,720
ditching hr is in scope for this effort

897
00:31:24,720 --> 00:31:26,559
um so feel free to process overdraft but

898
00:31:26,559 --> 00:31:28,720
this is like was intended to be like a a

899
00:31:28,720 --> 00:31:31,360
set of compatible clarification changes

900
00:31:31,360 --> 00:31:32,960
um

901
00:31:32,960 --> 00:31:34,720
so um i guess

902
00:31:34,720 --> 00:31:36,159
david ben being here um does anybody

903
00:31:36,159 --> 00:31:36,880
else want to speak up for like

904
00:31:36,880 --> 00:31:38,960
substantial changes here and if not um i

905
00:31:38,960 --> 00:31:40,399
think i'm going to ask david to produce

906
00:31:40,399 --> 00:31:41,360
a pr

907
00:31:41,360 --> 00:31:43,600
what he thinks the minimum pr is and

908
00:31:43,600 --> 00:31:47,480
um and then move on

909
00:31:51,279 --> 00:31:54,399
okay thank you

910
00:31:54,399 --> 00:31:55,440
um

911
00:31:55,440 --> 00:31:56,880
uh

912
00:31:56,880 --> 00:31:58,240
finally i want to make a last call on

913
00:31:58,240 --> 00:32:00,320
some issues um i've commented in these

914
00:32:00,320 --> 00:32:01,519
issues i don't think any changes are

915
00:32:01,519 --> 00:32:02,799
needed i'm just going to go through them

916
00:32:02,799 --> 00:32:04,399
very quickly if anyone wants to object

917
00:32:04,399 --> 00:32:07,200
to them now um please do and if not i'm

918
00:32:07,200 --> 00:32:08,720
just going to close them again basically

919
00:32:08,720 --> 00:32:11,919
after this meeting um so in 1206 um ben

920
00:32:11,919 --> 00:32:16,000
kadek um i think going from a um

921
00:32:16,000 --> 00:32:17,200
uh some comments that have been on the

922
00:32:17,200 --> 00:32:18,640
list suggested that we give more

923
00:32:18,640 --> 00:32:19,760
guidance about what should actually be

924
00:32:19,760 --> 00:32:22,000
in the cookies um my proposal's not to

925
00:32:22,000 --> 00:32:23,679
do anything here i think it's like at

926
00:32:23,679 --> 00:32:25,919
least clear enough

927
00:32:25,919 --> 00:32:27,600
and

928
00:32:27,600 --> 00:32:28,559
i think

929
00:32:28,559 --> 00:32:29,840
any more guidance probably risks getting

930
00:32:29,840 --> 00:32:31,519
confusing

931
00:32:31,519 --> 00:32:32,399
um

932
00:32:32,399 --> 00:32:33,519
i'm not going to stop for these and

933
00:32:33,519 --> 00:32:35,200
someone like think of the microphone or

934
00:32:35,200 --> 00:32:37,039
or whatever of course uh you know i'll

935
00:32:37,039 --> 00:32:38,720
stop but otherwise

936
00:32:38,720 --> 00:32:39,760
um

937
00:32:39,760 --> 00:32:40,799
the um

938
00:32:40,799 --> 00:32:43,279
second is um there's a i had a pr uh

939
00:32:43,279 --> 00:32:45,360
sorry uh uh issue to expand the

940
00:32:45,360 --> 00:32:46,480
discussion of recommended not

941
00:32:46,480 --> 00:32:48,080
recommended and have like another term

942
00:32:48,080 --> 00:32:49,360
but as i understand it this is being

943
00:32:49,360 --> 00:32:51,600
carried 847 this this is no longer

944
00:32:51,600 --> 00:32:54,480
appropriate for 8446 um and so we can

945
00:32:54,480 --> 00:32:55,679
just close this though we're not we're

946
00:32:55,679 --> 00:32:57,120
not closing the topic we're really

947
00:32:57,120 --> 00:32:58,240
deciding we're not going to handle that

948
00:32:58,240 --> 00:33:00,720
84 46 because i'm belong there

949
00:33:00,720 --> 00:33:01,519
um

950
00:33:01,519 --> 00:33:02,640
and

951
00:33:02,640 --> 00:33:05,039
finally there was some discussion on um

952
00:33:05,039 --> 00:33:06,559
more guidance on how to handle multiple

953
00:33:06,559 --> 00:33:08,720
identities in post-handshake auth so if

954
00:33:08,720 --> 00:33:10,080
the server for instance offers multiple

955
00:33:10,080 --> 00:33:11,840
identities if a client does how do you

956
00:33:11,840 --> 00:33:12,960
um

957
00:33:12,960 --> 00:33:14,240
how do you think about that in your

958
00:33:14,240 --> 00:33:15,760
authentication without authorization

959
00:33:15,760 --> 00:33:16,799
decisions

960
00:33:16,799 --> 00:33:18,880
um and um

961
00:33:18,880 --> 00:33:19,919
this i think we agree with an

962
00:33:19,919 --> 00:33:21,440
application issue so i prefer to close

963
00:33:21,440 --> 00:33:24,559
that as well

964
00:33:24,559 --> 00:33:26,559
okay so i'm going to close all these out

965
00:33:26,559 --> 00:33:30,640
um essentially after i stop speaking

966
00:33:30,640 --> 00:33:32,320
so um

967
00:33:32,320 --> 00:33:34,159
i believe um there were a couple issues

968
00:33:34,159 --> 00:33:36,559
that i didn't get to here um because i

969
00:33:36,559 --> 00:33:38,799
think they're um easy to handle um but i

970
00:33:38,799 --> 00:33:40,240
posed to handle them and put some aprs

971
00:33:40,240 --> 00:33:42,559
for them and try to get a new draft out

972
00:33:42,559 --> 00:33:43,600
um

973
00:33:43,600 --> 00:33:45,279
and hopefully let's just start with last

974
00:33:45,279 --> 00:33:46,799
call um as soon as we get those things

975
00:33:46,799 --> 00:33:48,320
done and potentially david benjamin's

976
00:33:48,320 --> 00:33:50,639
appear

977
00:33:51,679 --> 00:33:53,919
so this please consider this your your

978
00:33:53,919 --> 00:33:56,480
your chance to uh to make it to raise

979
00:33:56,480 --> 00:33:58,480
any other issues which i've forgotten um

980
00:33:58,480 --> 00:33:59,600
it'll probably take me a couple weeks to

981
00:33:59,600 --> 00:34:01,120
a month to like actually do a little

982
00:34:01,120 --> 00:34:03,039
stuff but if you um

983
00:34:03,039 --> 00:34:05,039
but this is this is this is your call to

984
00:34:05,039 --> 00:34:07,360
uh to raise other issues um and

985
00:34:07,360 --> 00:34:09,199
otherwise we'll have to go to e446

986
00:34:09,199 --> 00:34:11,598
business

987
00:34:12,480 --> 00:34:13,760
sean

988
00:34:13,760 --> 00:34:16,399
um no new issues i think what i heard is

989
00:34:16,399 --> 00:34:18,079
the next time you spend a new version

990
00:34:18,079 --> 00:34:19,839
which will come in about a month maybe

991
00:34:19,839 --> 00:34:22,000
the end of april beginning of may we

992
00:34:22,000 --> 00:34:23,520
will issue a working group last call to

993
00:34:23,520 --> 00:34:25,119
get this thing out the door

994
00:34:25,119 --> 00:34:27,839
that's my hope um i i think you know

995
00:34:27,839 --> 00:34:29,119
you say given that we already have this

996
00:34:29,119 --> 00:34:30,639
protocol shipping and this is really

997
00:34:30,639 --> 00:34:32,000
about clarifying improving people's

998
00:34:32,000 --> 00:34:33,520
lives i think that like that is best

999
00:34:33,520 --> 00:34:34,560
served by actually having the document

1000
00:34:34,560 --> 00:34:37,918
published and um and then if if you know

1001
00:34:37,918 --> 00:34:39,760
and if we if we find then subsequently

1002
00:34:39,760 --> 00:34:41,040
there's a bunch of energy issues i have

1003
00:34:41,040 --> 00:34:42,239
no objection to spinning another other

1004
00:34:42,239 --> 00:34:44,639
small other small bits or twists that's

1005
00:34:44,639 --> 00:34:45,760
her i guess

1006
00:34:45,760 --> 00:34:49,639
roger thank you very much

1007
00:34:49,679 --> 00:34:52,159
bye-bye

1008
00:34:52,560 --> 00:34:55,119
all right next i think we have uh martin

1009
00:34:55,119 --> 00:34:57,520
thompson with snip

1010
00:34:57,520 --> 00:35:00,160
do you want to run the slides martin

1011
00:35:00,160 --> 00:35:03,720
yeah you do

1012
00:35:17,599 --> 00:35:19,119
i think we're we're not hearing you

1013
00:35:19,119 --> 00:35:21,440
martin

1014
00:35:24,480 --> 00:35:26,720
there we go sorry about that uh one

1015
00:35:26,720 --> 00:35:28,640
slide uh

1016
00:35:28,640 --> 00:35:30,079
nothing has happened really here

1017
00:35:30,079 --> 00:35:32,240
technically um

1018
00:35:32,240 --> 00:35:34,079
but a lot has happened in terms of the

1019
00:35:34,079 --> 00:35:35,920
editorial content of the document i went

1020
00:35:35,920 --> 00:35:37,200
through and

1021
00:35:37,200 --> 00:35:38,160
did a

1022
00:35:38,160 --> 00:35:39,920
rip and tear and

1023
00:35:39,920 --> 00:35:41,920
reordered things rewrote things i think

1024
00:35:41,920 --> 00:35:43,839
is a whole lot more comprehensible than

1025
00:35:43,839 --> 00:35:44,960
previously

1026
00:35:44,960 --> 00:35:46,720
um there were some good discussions

1027
00:35:46,720 --> 00:35:48,640
after that revision that i haven't yet

1028
00:35:48,640 --> 00:35:50,880
published

1029
00:35:50,880 --> 00:35:52,560
but i think it's just removing an

1030
00:35:52,560 --> 00:35:55,119
appendix was was the upshot of

1031
00:35:55,119 --> 00:35:56,800
most of that discussion

1032
00:35:56,800 --> 00:35:58,640
um

1033
00:35:58,640 --> 00:35:59,359
so

1034
00:35:59,359 --> 00:36:01,440
at this stage we don't have anyone

1035
00:36:01,440 --> 00:36:03,680
implementing this uh

1036
00:36:03,680 --> 00:36:05,280
this is probably another one of those

1037
00:36:05,280 --> 00:36:07,520
documents that it's worth putting in

1038
00:36:07,520 --> 00:36:09,520
that parked state

1039
00:36:09,520 --> 00:36:10,960
i don't know what other people think

1040
00:36:10,960 --> 00:36:12,480
about that but i i think that's probably

1041
00:36:12,480 --> 00:36:14,320
the right way to do this let's sit it in

1042
00:36:14,320 --> 00:36:16,160
the park state and see if we can uh get

1043
00:36:16,160 --> 00:36:17,599
some implementations going it's

1044
00:36:17,599 --> 00:36:19,839
relatively straightforward to do

1045
00:36:19,839 --> 00:36:22,800
uh from a client side so i'd be willing

1046
00:36:22,800 --> 00:36:23,839
to

1047
00:36:23,839 --> 00:36:25,760
set up some sort of interoperability

1048
00:36:25,760 --> 00:36:27,920
event if someone's willing to do the

1049
00:36:27,920 --> 00:36:30,320
server-side work which i understand is a

1050
00:36:30,320 --> 00:36:33,280
little more complicated

1051
00:36:34,160 --> 00:36:37,640
that's all i have

1052
00:36:43,520 --> 00:36:46,720
questions look someone's getting up

1053
00:36:46,720 --> 00:36:49,118
to run

1054
00:36:52,839 --> 00:36:56,480
away so hey on so i think unless like

1055
00:36:56,480 --> 00:36:57,760
i'm we're not hearing seeing anything

1056
00:36:57,760 --> 00:36:59,760
else here i think it pops up on the

1057
00:36:59,760 --> 00:37:01,839
list uh thank you martin for doing your

1058
00:37:01,839 --> 00:37:03,200
editorial changes to make it more

1059
00:37:03,200 --> 00:37:05,040
readable and we'll leave it parked till

1060
00:37:05,040 --> 00:37:06,640
we start to hear people beating down the

1061
00:37:06,640 --> 00:37:10,640
door to uh implement this

1062
00:37:12,240 --> 00:37:13,440
yep

1063
00:37:13,440 --> 00:37:17,200
thank you i'll give you back your time

1064
00:37:17,200 --> 00:37:18,240
thanks

1065
00:37:18,240 --> 00:37:23,319
uh next we have a hybrid key exchange

1066
00:37:38,160 --> 00:37:42,240
see is douglas on the call

1067
00:37:48,079 --> 00:37:49,839
i will will note that when we first did

1068
00:37:49,839 --> 00:37:51,040
this we weren't sure if he was going to

1069
00:37:51,040 --> 00:37:53,040
be able to show up uh

1070
00:37:53,040 --> 00:37:54,720
at this particular time so maybe we can

1071
00:37:54,720 --> 00:37:56,880
just slide this back

1072
00:37:56,880 --> 00:37:57,760
okay

1073
00:37:57,760 --> 00:38:00,000
he shows up

1074
00:38:00,000 --> 00:38:04,119
let me get back here again

1075
00:38:09,359 --> 00:38:12,480
um if i may uh yeah can we uh can we

1076
00:38:12,480 --> 00:38:14,880
consider renaming this document um and

1077
00:38:14,880 --> 00:38:16,240
now that we have hybrid public key

1078
00:38:16,240 --> 00:38:17,359
exchange which is actually you know i

1079
00:38:17,359 --> 00:38:19,839
believe rfc having hybrid key exchange

1080
00:38:19,839 --> 00:38:21,839
at least at least at 2 30 eight in the

1081
00:38:21,839 --> 00:38:23,280
morning was extraordinarily confusing to

1082
00:38:23,280 --> 00:38:25,440
me

1083
00:38:27,760 --> 00:38:29,520
i think you're thinking of hybrid public

1084
00:38:29,520 --> 00:38:32,640
key encryption

1085
00:38:32,640 --> 00:38:35,680
that makes it totally different

1086
00:38:39,920 --> 00:38:40,880
all right

1087
00:38:40,880 --> 00:38:43,760
we should move on to the next item which

1088
00:38:43,760 --> 00:38:44,839
is

1089
00:38:44,839 --> 00:38:49,720
uh ech update

1090
00:39:16,000 --> 00:39:18,400
all right

1091
00:39:18,640 --> 00:39:20,800
was who is uh presenting was that

1092
00:39:20,800 --> 00:39:25,480
vincent presenting or somebody else

1093
00:39:42,480 --> 00:39:44,400
seems we're having some trouble let me

1094
00:39:44,400 --> 00:39:46,240
see if i can share the slides because it

1095
00:39:46,240 --> 00:39:49,879
seems like they're not

1096
00:40:03,440 --> 00:40:07,280
i don't have access to the slides

1097
00:40:09,359 --> 00:40:10,880
um

1098
00:40:10,880 --> 00:40:13,359
joe are you saying they're not uh

1099
00:40:13,359 --> 00:40:16,079
available to share what by the preload

1100
00:40:16,079 --> 00:40:18,319
option

1101
00:40:24,319 --> 00:40:25,680
vincent was trying to share and it

1102
00:40:25,680 --> 00:40:29,359
didn't seem to to uh work um

1103
00:40:29,359 --> 00:40:32,000
he's failed

1104
00:40:32,800 --> 00:40:34,880
and it says a new deck is being shared

1105
00:40:34,880 --> 00:40:39,000
but i don't see the deck

1106
00:40:42,000 --> 00:40:43,359
that might have been me trying to press

1107
00:40:43,359 --> 00:40:45,200
the button

1108
00:40:45,200 --> 00:40:46,800
all right

1109
00:40:46,800 --> 00:40:50,920
under that of the deck it just blew

1110
00:40:54,800 --> 00:40:58,800
i can i can drive um vincent uh you you

1111
00:40:58,800 --> 00:41:01,760
have to share audio as well um

1112
00:41:01,760 --> 00:41:03,599
uh the icon that has the microphone

1113
00:41:03,599 --> 00:41:05,520
button uh will allow you to unmute

1114
00:41:05,520 --> 00:41:07,680
yourself

1115
00:41:07,680 --> 00:41:08,960
which you could let us know in chat if

1116
00:41:08,960 --> 00:41:11,599
that is or is not working um oh you have

1117
00:41:11,599 --> 00:41:14,720
a commission problem i see

1118
00:41:18,079 --> 00:41:20,160
um could that be handled with a browser

1119
00:41:20,160 --> 00:41:22,560
restart

1120
00:41:25,280 --> 00:41:27,040
yeah permissions you'll have to restart

1121
00:41:27,040 --> 00:41:29,680
your browser

1122
00:41:33,440 --> 00:41:34,880
i think perhaps then in the interest of

1123
00:41:34,880 --> 00:41:37,440
time um

1124
00:41:37,440 --> 00:41:39,359
uh while vincent sorts that out maybe we

1125
00:41:39,359 --> 00:41:42,240
can move on to the next

1126
00:41:42,640 --> 00:41:44,720
presentation

1127
00:41:44,720 --> 00:41:45,599
um

1128
00:41:45,599 --> 00:41:49,280
okay um i think the next uh topic uh

1129
00:41:49,280 --> 00:41:52,720
sean do you want to go through

1130
00:41:52,720 --> 00:41:53,920
the uh

1131
00:41:53,920 --> 00:41:55,839
kittens sure

1132
00:41:55,839 --> 00:41:57,920
so back in october i guess there was a

1133
00:41:57,920 --> 00:42:01,520
message about um a draft

1134
00:42:01,520 --> 00:42:04,480
uh it's a draft in the kitten working

1135
00:42:04,480 --> 00:42:06,400
group um where they're including an

1136
00:42:06,400 --> 00:42:08,720
updates header in top of the oh is that

1137
00:42:08,720 --> 00:42:11,279
vincent there

1138
00:42:13,520 --> 00:42:14,480
i think

1139
00:42:14,480 --> 00:42:15,280
yes

1140
00:42:15,280 --> 00:42:17,040
let's heal the floor and get you get you

1141
00:42:17,040 --> 00:42:18,560
onto your draft

1142
00:42:18,560 --> 00:42:21,200
i guess um

1143
00:42:21,200 --> 00:42:22,000
can

1144
00:42:22,000 --> 00:42:25,440
someone share the

1145
00:42:26,720 --> 00:42:28,839
okay

1146
00:42:28,839 --> 00:42:31,040
perfect okay yeah sorry about that just

1147
00:42:31,040 --> 00:42:32,079
let me know when you would like me to

1148
00:42:32,079 --> 00:42:34,160
advance and i will advance for you

1149
00:42:34,160 --> 00:42:35,040
okay

1150
00:42:35,040 --> 00:42:37,920
uh thank you uh so yeah so i'm gonna

1151
00:42:37,920 --> 00:42:40,720
talk about the ech updates and in

1152
00:42:40,720 --> 00:42:44,319
particular or privacy

1153
00:42:44,319 --> 00:42:45,839
so it's uh

1154
00:42:45,839 --> 00:42:47,440
somewhere having a little trouble uh

1155
00:42:47,440 --> 00:42:49,040
hearing you might need to get closer to

1156
00:42:49,040 --> 00:42:50,640
the mic

1157
00:42:50,640 --> 00:42:52,560
yeah is it better now

1158
00:42:52,560 --> 00:42:54,160
that's better

1159
00:42:54,160 --> 00:42:57,520
okay so it's a joint work with chris and

1160
00:42:57,520 --> 00:42:59,520
kartik

1161
00:42:59,520 --> 00:43:01,920
next slide please

1162
00:43:01,920 --> 00:43:02,880
uh

1163
00:43:02,880 --> 00:43:04,960
so the the basic

1164
00:43:04,960 --> 00:43:07,440
diplomacy now that you consider is uh

1165
00:43:07,440 --> 00:43:09,119
typically a client that wants to connect

1166
00:43:09,119 --> 00:43:10,160
to the

1167
00:43:10,160 --> 00:43:13,359
to a website that is hosted on a client

1168
00:43:13,359 --> 00:43:15,520
facing server

1169
00:43:15,520 --> 00:43:17,520
so here the backend server is the the

1170
00:43:17,520 --> 00:43:18,800
websites

1171
00:43:18,800 --> 00:43:21,440
and the next slide please

1172
00:43:21,440 --> 00:43:26,480
and so for tls uh stls contains uh

1173
00:43:26,480 --> 00:43:29,599
can you switch to the next slide chris

1174
00:43:29,599 --> 00:43:31,599
okay so

1175
00:43:31,599 --> 00:43:34,400
as gls contains uh

1176
00:43:34,400 --> 00:43:36,319
if i'm supposed to secure

1177
00:43:36,319 --> 00:43:37,760
communication between the client to the

1178
00:43:37,760 --> 00:43:40,640
server it acts first as a

1179
00:43:40,640 --> 00:43:42,319
as negotiation

1180
00:43:42,319 --> 00:43:45,200
and dpml key exchange uh so we consider

1181
00:43:45,200 --> 00:43:47,200
also the server authentication with the

1182
00:43:47,200 --> 00:43:49,760
certificates and then

1183
00:43:49,760 --> 00:43:52,800
that we're gonna we also model the

1184
00:43:52,800 --> 00:43:54,480
encryption of the data through the

1185
00:43:54,480 --> 00:43:56,640
application traffic and created with

1186
00:43:56,640 --> 00:43:58,079
application traffic key that where the

1187
00:43:58,079 --> 00:43:59,760
keys derived from the from the full

1188
00:43:59,760 --> 00:44:01,839
transcript so all this kind of a recall

1189
00:44:01,839 --> 00:44:04,079
but i'm guessing all of you knows about

1190
00:44:04,079 --> 00:44:06,079
all this information

1191
00:44:06,079 --> 00:44:06,880
uh

1192
00:44:06,880 --> 00:44:09,760
so in term of a next slide please

1193
00:44:09,760 --> 00:44:13,520
in term of a feature that we looked at

1194
00:44:13,520 --> 00:44:16,800
uh can you see the slides uh chris

1195
00:44:16,800 --> 00:44:18,720
yeah so we

1196
00:44:18,720 --> 00:44:19,839
consider

1197
00:44:19,839 --> 00:44:21,680
uh most of the

1198
00:44:21,680 --> 00:44:23,920
most of the feature that is in the nfc

1199
00:44:23,920 --> 00:44:26,160
of tls in particular

1200
00:44:26,160 --> 00:44:28,560
we wanted to model the hello we try

1201
00:44:28,560 --> 00:44:31,040
requests that come from the negotiation

1202
00:44:31,040 --> 00:44:34,720
the certificate based authentication

1203
00:44:34,720 --> 00:44:36,800
the as well as the pre-shed key and the

1204
00:44:36,800 --> 00:44:39,359
ticket assumption uh that are generated

1205
00:44:39,359 --> 00:44:41,839
at the end of the session

1206
00:44:41,839 --> 00:44:44,079
at the end of the handshake plus any

1207
00:44:44,079 --> 00:44:44,880
other

1208
00:44:44,880 --> 00:44:46,800
extension in particular we looked at the

1209
00:44:46,800 --> 00:44:49,440
sni that can save the identity of the

1210
00:44:49,440 --> 00:44:51,599
identity of the

1211
00:44:51,599 --> 00:44:54,240
the server so in term of verification uh

1212
00:44:54,240 --> 00:44:55,680
what's important is that because all

1213
00:44:55,680 --> 00:44:57,359
this feature can

1214
00:44:57,359 --> 00:44:59,680
can be used or not used depending on the

1215
00:44:59,680 --> 00:45:02,079
on the scenario that you consider we

1216
00:45:02,079 --> 00:45:03,440
need to verify

1217
00:45:03,440 --> 00:45:04,960
tls

1218
00:45:04,960 --> 00:45:07,119
with as many scenario as possible

1219
00:45:07,119 --> 00:45:10,480
depending on the feature that you use

1220
00:45:10,960 --> 00:45:12,480
next slide please

1221
00:45:12,480 --> 00:45:14,560
so in term of security tls supposed to

1222
00:45:14,560 --> 00:45:16,480
achieve

1223
00:45:16,480 --> 00:45:18,720
quite a lot of security guarantees so we

1224
00:45:18,720 --> 00:45:20,560
have kind of the classical one which are

1225
00:45:20,560 --> 00:45:24,079
the authentication and the confidence

1226
00:45:24,079 --> 00:45:27,280
security goal so in particular uh

1227
00:45:27,280 --> 00:45:28,880
the one that have already been studied

1228
00:45:28,880 --> 00:45:30,400
in the literature are

1229
00:45:30,400 --> 00:45:32,640
all of those so typically key secrecy

1230
00:45:32,640 --> 00:45:34,960
the secrecy of the the data that i send

1231
00:45:34,960 --> 00:45:37,040
at the rtt and one entity so for one

1232
00:45:37,040 --> 00:45:39,280
entity even the forward secrecy

1233
00:45:39,280 --> 00:45:41,440
and in term of authentication you have

1234
00:45:41,440 --> 00:45:44,079
the client and server authentication

1235
00:45:44,079 --> 00:45:46,400
as well as the downgrade resilience to

1236
00:45:46,400 --> 00:45:48,240
ensure that the attacker is not able to

1237
00:45:48,240 --> 00:45:50,560
force the the client server to use the

1238
00:45:50,560 --> 00:45:52,960
whole version of tls

1239
00:45:52,960 --> 00:45:55,119
next slide please

1240
00:45:55,119 --> 00:45:57,760
so uh in term of verification because

1241
00:45:57,760 --> 00:45:59,359
you have to consider all those

1242
00:45:59,359 --> 00:46:02,000
properties and as well as many scenarios

1243
00:46:02,000 --> 00:46:03,920
it's important to be able to

1244
00:46:03,920 --> 00:46:06,480
verify the security goal not by hand but

1245
00:46:06,480 --> 00:46:08,960
using automated verification there have

1246
00:46:08,960 --> 00:46:11,200
been already many work on

1247
00:46:11,200 --> 00:46:14,480
this in the past so here just mentioned

1248
00:46:14,480 --> 00:46:16,079
tools that have been used to crypto

1249
00:46:16,079 --> 00:46:18,800
derived star temere and project

1250
00:46:18,800 --> 00:46:20,400
but as you can see the picture is not

1251
00:46:20,400 --> 00:46:23,440
really homogeneous yet uh because

1252
00:46:23,440 --> 00:46:24,960
some work have been focusing on some

1253
00:46:24,960 --> 00:46:26,800
properties and some others so we don't

1254
00:46:26,800 --> 00:46:29,440
have a full homogeneous picture

1255
00:46:29,440 --> 00:46:32,319
next slides please

1256
00:46:32,400 --> 00:46:34,160
but more problematic is that the model

1257
00:46:34,160 --> 00:46:36,640
do not cover all the features of i mean

1258
00:46:36,640 --> 00:46:38,319
the union of the model usually covers

1259
00:46:38,319 --> 00:46:40,640
most of the feature but

1260
00:46:40,640 --> 00:46:42,960
the intersection they're not

1261
00:46:42,960 --> 00:46:45,119
intersection of the model

1262
00:46:45,119 --> 00:46:46,880
is not complete

1263
00:46:46,880 --> 00:46:49,280
so the goals of our work was try to have

1264
00:46:49,280 --> 00:46:52,000
a model that's uh

1265
00:46:52,000 --> 00:46:54,160
feature

1266
00:46:54,160 --> 00:46:55,599
model that covers all the features as

1267
00:46:55,599 --> 00:46:58,400
well all the security properties

1268
00:46:58,400 --> 00:47:00,800
next slides

1269
00:47:00,800 --> 00:47:03,359
uh so in terms of a privacy goal that

1270
00:47:03,359 --> 00:47:05,200
have been much less studied

1271
00:47:05,200 --> 00:47:07,920
in the past so we looked at

1272
00:47:07,920 --> 00:47:09,680
identity of the participants in

1273
00:47:09,680 --> 00:47:14,000
particular the client and the server

1274
00:47:14,079 --> 00:47:16,400
we also looked at the unlinkability of

1275
00:47:16,400 --> 00:47:19,440
the client through several handshakes

1276
00:47:19,440 --> 00:47:22,079
and also the privacy of the extension

1277
00:47:22,079 --> 00:47:25,760
both on the client and the server side

1278
00:47:25,760 --> 00:47:27,680
uh next slide

1279
00:47:27,680 --> 00:47:30,599
so here the problem is that even though

1280
00:47:30,599 --> 00:47:33,440
tls current gls is supposed to guarantee

1281
00:47:33,440 --> 00:47:34,880
at least the identity the privacy of the

1282
00:47:34,880 --> 00:47:36,559
client and capability and the sub

1283
00:47:36,559 --> 00:47:38,559
extension there have not have been any

1284
00:47:38,559 --> 00:47:40,640
automated proof rights there have been

1285
00:47:40,640 --> 00:47:41,440
some

1286
00:47:41,440 --> 00:47:43,839
proof by hand pen and paper

1287
00:47:43,839 --> 00:47:45,839
and of course for the client extension

1288
00:47:45,839 --> 00:47:47,760
and the server identity it's not

1289
00:47:47,760 --> 00:47:50,000
guaranteed by tls almost by design

1290
00:47:50,000 --> 00:47:52,559
because everything is sent in the clear

1291
00:47:52,559 --> 00:47:54,720
uh in the clientele

1292
00:47:54,720 --> 00:47:57,359
so the ecs extension is supposed to

1293
00:47:57,359 --> 00:47:59,280
guarantee next slide please

1294
00:47:59,280 --> 00:48:01,119
uh

1295
00:48:01,119 --> 00:48:03,119
the ecs extension is supposed to

1296
00:48:03,119 --> 00:48:04,960
guarantee all these

1297
00:48:04,960 --> 00:48:07,119
privacy goals

1298
00:48:07,119 --> 00:48:09,440
next

1299
00:48:10,319 --> 00:48:14,880
so the basic idea of ech was to

1300
00:48:14,880 --> 00:48:19,359
somehow encrypt the sensitive

1301
00:48:19,359 --> 00:48:19,760
that information

1302
00:48:19,760 --> 00:48:21,119
supposed to go to

1303
00:48:21,119 --> 00:48:22,480
to the back end

1304
00:48:22,480 --> 00:48:24,000
with the public key

1305
00:48:24,000 --> 00:48:26,720
of the client-facing server with the id

1306
00:48:26,720 --> 00:48:28,160
that only the client testing server

1307
00:48:28,160 --> 00:48:30,079
would be able to decrypt and forward it

1308
00:48:30,079 --> 00:48:32,079
to the backend okay

1309
00:48:32,079 --> 00:48:35,040
but uh if you just do this it's it's not

1310
00:48:35,040 --> 00:48:37,119
easy still to obtain a

1311
00:48:37,119 --> 00:48:39,119
privacy guarantee of the identity of the

1312
00:48:39,119 --> 00:48:41,280
backend server

1313
00:48:41,280 --> 00:48:43,599
next

1314
00:48:43,839 --> 00:48:45,680
because if you so if you just

1315
00:48:45,680 --> 00:48:47,920
do this simple

1316
00:48:47,920 --> 00:48:50,640
intuition of encrypted the sni and even

1317
00:48:50,640 --> 00:48:52,960
bind it with the client random you have

1318
00:48:52,960 --> 00:48:54,319
a very

1319
00:48:54,319 --> 00:48:56,880
uh simple attack where the attacker just

1320
00:48:56,880 --> 00:48:59,520
take the client hello message from the

1321
00:48:59,520 --> 00:49:00,960
from the clients

1322
00:49:00,960 --> 00:49:04,079
remove the key share of the clients and

1323
00:49:04,079 --> 00:49:07,119
put his own key share and then just let

1324
00:49:07,119 --> 00:49:08,079
the

1325
00:49:08,079 --> 00:49:10,160
handshake run and when you receive the

1326
00:49:10,160 --> 00:49:12,400
certificates of the server is able to

1327
00:49:12,400 --> 00:49:14,720
get the identity of it

1328
00:49:14,720 --> 00:49:17,280
next so the

1329
00:49:17,280 --> 00:49:20,079
the idea of the ech that

1330
00:49:20,079 --> 00:49:21,040
through the

1331
00:49:21,040 --> 00:49:23,599
many uh draft have been to in fact

1332
00:49:23,599 --> 00:49:25,760
encrypt the whole client cell that is

1333
00:49:25,760 --> 00:49:28,160
destined for the backend server which we

1334
00:49:28,160 --> 00:49:29,760
call the which is called the inner

1335
00:49:29,760 --> 00:49:31,760
client hello and bind it with the

1336
00:49:31,760 --> 00:49:34,079
parameter of the client cello that is

1337
00:49:34,079 --> 00:49:36,240
this thing for the client-facing server

1338
00:49:36,240 --> 00:49:39,119
so the overall is if you look at the rfc

1339
00:49:39,119 --> 00:49:42,160
it's called the outer clamp

1340
00:49:42,160 --> 00:49:44,240
but if you even if you do this you have

1341
00:49:44,240 --> 00:49:47,200
some issues with uh some

1342
00:49:47,200 --> 00:49:49,520
features in particular the hello retry

1343
00:49:49,520 --> 00:49:50,480
request

1344
00:49:50,480 --> 00:49:53,040
next please

1345
00:49:53,040 --> 00:49:54,240
uh

1346
00:49:54,240 --> 00:49:56,400
because if even though you have the this

1347
00:49:56,400 --> 00:49:59,520
binding between the inner and the other

1348
00:49:59,520 --> 00:50:00,880
clientele

1349
00:50:00,880 --> 00:50:02,079
the

1350
00:50:02,079 --> 00:50:04,319
attacker can forward the

1351
00:50:04,319 --> 00:50:06,720
the first clientele and upon receiving

1352
00:50:06,720 --> 00:50:07,839
uh

1353
00:50:07,839 --> 00:50:10,160
hello retry request from the server it

1354
00:50:10,160 --> 00:50:14,160
can re-inject his own inner

1355
00:50:14,160 --> 00:50:16,400
client hello to the third message on the

1356
00:50:16,400 --> 00:50:18,000
slide

1357
00:50:18,000 --> 00:50:19,040
and

1358
00:50:19,040 --> 00:50:20,880
for the identity of the server he puts

1359
00:50:20,880 --> 00:50:23,359
his guess whether it typically put s

1360
00:50:23,359 --> 00:50:25,520
prime which is a guess on the identity

1361
00:50:25,520 --> 00:50:28,000
of s so if s is equal to s prime meaning

1362
00:50:28,000 --> 00:50:30,640
that if it guessed correctly then the n

1363
00:50:30,640 --> 00:50:33,280
shake will continue normally

1364
00:50:33,280 --> 00:50:35,119
and otherwise if s is different from

1365
00:50:35,119 --> 00:50:36,510
price so if it gets wrong then

1366
00:50:36,510 --> 00:50:37,599
[Music]

1367
00:50:37,599 --> 00:50:40,079
the server will raise an error meaning

1368
00:50:40,079 --> 00:50:42,319
that the attacker will be able to

1369
00:50:42,319 --> 00:50:43,760
understand whether or not this guess is

1370
00:50:43,760 --> 00:50:45,520
correct

1371
00:50:45,520 --> 00:50:48,079
next please

1372
00:50:48,079 --> 00:50:48,910
so the

1373
00:50:48,910 --> 00:50:50,000
[Music]

1374
00:50:50,000 --> 00:50:52,720
key idea here to solve this problem was

1375
00:50:52,720 --> 00:50:55,839
to ensure that the encryption of the

1376
00:50:55,839 --> 00:50:58,319
second inner clientele

1377
00:50:58,319 --> 00:51:00,960
should be linked with the first one

1378
00:51:00,960 --> 00:51:03,920
which leads us to the current

1379
00:51:03,920 --> 00:51:05,680
version of ech

1380
00:51:05,680 --> 00:51:07,440
next

1381
00:51:07,440 --> 00:51:11,520
where we use uh hpk uh encryption for

1382
00:51:11,520 --> 00:51:13,119
encrypting the

1383
00:51:13,119 --> 00:51:15,680
the clientele so this the setup of the

1384
00:51:15,680 --> 00:51:18,480
hpk create a context that is updated

1385
00:51:18,480 --> 00:51:20,800
every time uh there is an encryption and

1386
00:51:20,800 --> 00:51:22,400
same thing that is updated every time

1387
00:51:22,400 --> 00:51:24,000
you try to decrypt

1388
00:51:24,000 --> 00:51:27,520
and so the the important part here is on

1389
00:51:27,520 --> 00:51:29,760
the left that we reuse

1390
00:51:29,760 --> 00:51:32,079
the contact that have been updated and

1391
00:51:32,079 --> 00:51:34,880
the same contact that have been updated

1392
00:51:34,880 --> 00:51:37,760
to encrypt the first and the second

1393
00:51:37,760 --> 00:51:40,559
inner clientele which

1394
00:51:40,559 --> 00:51:42,160
guarantees you that you have this link

1395
00:51:42,160 --> 00:51:45,359
between the inner and the other

1396
00:51:45,359 --> 00:51:47,680
so in red is the the part that have been

1397
00:51:47,680 --> 00:51:49,680
modified

1398
00:51:49,680 --> 00:51:52,960
for ech and in black is like the vanilla

1399
00:51:52,960 --> 00:51:54,480
the vanilla part of

1400
00:51:54,480 --> 00:51:58,240
tls okay next

1401
00:51:58,400 --> 00:52:00,880
so in terms of verification we consider

1402
00:52:00,880 --> 00:52:01,760
the

1403
00:52:01,760 --> 00:52:03,680
symbolic models uh so typically

1404
00:52:03,680 --> 00:52:06,400
otherwise know that dollavio model so

1405
00:52:06,400 --> 00:52:08,400
where the attacker can you know have a

1406
00:52:08,400 --> 00:52:10,000
control over the network he can read

1407
00:52:10,000 --> 00:52:12,319
write and intercept messages but it's a

1408
00:52:12,319 --> 00:52:13,760
bit idealized in the sense that he

1409
00:52:13,760 --> 00:52:15,839
cannot break cryptographic the

1410
00:52:15,839 --> 00:52:18,720
cryptography nor use side channel the

1411
00:52:18,720 --> 00:52:20,720
good thing about using the avio model is

1412
00:52:20,720 --> 00:52:21,760
that you have very powerful

1413
00:52:21,760 --> 00:52:23,920
state-of-the-art tool and in particular

1414
00:52:23,920 --> 00:52:26,720
we are using probe

1415
00:52:26,720 --> 00:52:29,040
next

1416
00:52:30,000 --> 00:52:30,960
so

1417
00:52:30,960 --> 00:52:34,079
we only focus in our model on tls 1.3 so

1418
00:52:34,079 --> 00:52:35,920
no version negotiation to previous

1419
00:52:35,920 --> 00:52:38,160
version of tls but we

1420
00:52:38,160 --> 00:52:40,400
as i mentioned before we modeled all the

1421
00:52:40,400 --> 00:52:42,160
features that i've presented as well as

1422
00:52:42,160 --> 00:52:44,160
all the security property authentication

1423
00:52:44,160 --> 00:52:46,480
configuration privacy goals all of them

1424
00:52:46,480 --> 00:52:48,319
and ideally we would have liked to be

1425
00:52:48,319 --> 00:52:50,160
able to prove all the property with all

1426
00:52:50,160 --> 00:52:52,319
the feature but uh

1427
00:52:52,319 --> 00:52:54,640
it's too taxing in terms of poverty we

1428
00:52:54,640 --> 00:52:57,599
put the time out of 48 hours as well as

1429
00:52:57,599 --> 00:53:00,559
a limit of memory of 100 gigabytes and

1430
00:53:00,559 --> 00:53:02,880
for some security properties and some

1431
00:53:02,880 --> 00:53:04,079
scenarios

1432
00:53:04,079 --> 00:53:06,480
we were blowing up the memory very

1433
00:53:06,480 --> 00:53:07,599
quickly

1434
00:53:07,599 --> 00:53:11,359
so what we did next please

1435
00:53:11,359 --> 00:53:13,520
what we did is that we parameterized our

1436
00:53:13,520 --> 00:53:15,599
model with a configuration file so we

1437
00:53:15,599 --> 00:53:18,400
have one model but uh

1438
00:53:18,400 --> 00:53:20,319
this configuration file allows you to

1439
00:53:20,319 --> 00:53:23,280
easily activate or deactivate features

1440
00:53:23,280 --> 00:53:24,319
the

1441
00:53:24,319 --> 00:53:26,319
as well as which key are going to be

1442
00:53:26,319 --> 00:53:28,160
compromised and the behavior of the

1443
00:53:28,160 --> 00:53:29,760
client in the server

1444
00:53:29,760 --> 00:53:30,480
and

1445
00:53:30,480 --> 00:53:33,200
just using this uh this configuration

1446
00:53:33,200 --> 00:53:35,119
file it allows us to

1447
00:53:35,119 --> 00:53:36,880
run about 600

1448
00:53:36,880 --> 00:53:39,280
round of progress corresponding to about

1449
00:53:39,280 --> 00:53:43,800
20 to 30 uh

1450
00:53:43,920 --> 00:53:46,960
30 scenario per security properties

1451
00:53:46,960 --> 00:53:50,480
so our results next

1452
00:53:50,720 --> 00:53:52,000
so we first

1453
00:53:52,000 --> 00:53:53,839
look at the classical signature property

1454
00:53:53,839 --> 00:53:55,599
in particular we rechecked all the

1455
00:53:55,599 --> 00:53:58,640
property on tls alone valina tls with

1456
00:53:58,640 --> 00:54:00,400
all the feature activated

1457
00:54:00,400 --> 00:54:02,640
so that was as almost as insanity

1458
00:54:02,640 --> 00:54:04,480
checked but still now we have a

1459
00:54:04,480 --> 00:54:06,079
homogeneous picture

1460
00:54:06,079 --> 00:54:08,720
and we try to reprove of course all of

1461
00:54:08,720 --> 00:54:11,359
them also with ech to ensure that echo

1462
00:54:11,359 --> 00:54:13,200
doesn't break any of those guarantees

1463
00:54:13,200 --> 00:54:15,359
but in that case because of the blow up

1464
00:54:15,359 --> 00:54:18,160
in memory most of the time we had to

1465
00:54:18,160 --> 00:54:19,760
deactivate some of the features so we

1466
00:54:19,760 --> 00:54:21,280
tried here to present just the

1467
00:54:21,280 --> 00:54:22,720
interesting

1468
00:54:22,720 --> 00:54:24,400
scenarios

1469
00:54:24,400 --> 00:54:26,720
next

1470
00:54:27,040 --> 00:54:29,040
so

1471
00:54:29,040 --> 00:54:31,280
in symbolic models the way we model the

1472
00:54:31,280 --> 00:54:32,400
privacy

1473
00:54:32,400 --> 00:54:35,440
uh of the server identity so it's gonna

1474
00:54:35,440 --> 00:54:37,920
be similar for unlinkability client

1475
00:54:37,920 --> 00:54:39,839
privacy and so on but just here i'm only

1476
00:54:39,839 --> 00:54:42,079
focusing on the privacy of the server

1477
00:54:42,079 --> 00:54:43,119
it's

1478
00:54:43,119 --> 00:54:44,480
typically it's an equivalence between

1479
00:54:44,480 --> 00:54:47,440
two situations where on one side you're

1480
00:54:47,440 --> 00:54:49,359
going to have a handshake with

1481
00:54:49,359 --> 00:54:51,200
back-end server one and on the other

1482
00:54:51,200 --> 00:54:53,200
side back in server two

1483
00:54:53,200 --> 00:54:55,119
and those identities are known to the

1484
00:54:55,119 --> 00:54:57,040
attacker and you put that in parallel

1485
00:54:57,040 --> 00:54:59,359
with other handshake with other client

1486
00:54:59,359 --> 00:55:00,799
or the front server so you have unbound

1487
00:55:00,799 --> 00:55:02,720
number of session and everything

1488
00:55:02,720 --> 00:55:04,240
and so if the attacker is not able to

1489
00:55:04,240 --> 00:55:06,480
distribute the situation we consider

1490
00:55:06,480 --> 00:55:08,640
that the identity of the backend server

1491
00:55:08,640 --> 00:55:10,640
that is used in these two different

1492
00:55:10,640 --> 00:55:13,520
scenarios are remaining private

1493
00:55:13,520 --> 00:55:14,400
so we

1494
00:55:14,400 --> 00:55:16,640
did have to consider some

1495
00:55:16,640 --> 00:55:18,880
fairly standard assumption

1496
00:55:18,880 --> 00:55:20,480
simple assumption otherwise would break

1497
00:55:20,480 --> 00:55:22,640
directly the privacy like the fact that

1498
00:55:22,640 --> 00:55:25,359
the privacy of the

1499
00:55:25,359 --> 00:55:27,440
hpk private key of the client-facing

1500
00:55:27,440 --> 00:55:29,359
server should remain uncompromised

1501
00:55:29,359 --> 00:55:31,760
otherwise the attacker can just decrete

1502
00:55:31,760 --> 00:55:33,839
the inner to obtain the identity of the

1503
00:55:33,839 --> 00:55:35,119
back-end server

1504
00:55:35,119 --> 00:55:36,319
and same thing

1505
00:55:36,319 --> 00:55:38,079
similar assumption for the

1506
00:55:38,079 --> 00:55:41,119
whether or not the back-end server have

1507
00:55:41,119 --> 00:55:43,440
a pre-shared key shared with the client

1508
00:55:43,440 --> 00:55:46,079
or if they have a long-term certificates

1509
00:55:46,079 --> 00:55:48,559
so all of those are very it's not very

1510
00:55:48,559 --> 00:55:50,720
restricting assumption

1511
00:55:50,720 --> 00:55:53,200
next please

1512
00:55:53,200 --> 00:55:56,319
so uh in terms of results uh for the

1513
00:55:56,319 --> 00:55:57,599
privacy goal

1514
00:55:57,599 --> 00:55:59,920
so equivalence in progress is even more

1515
00:55:59,920 --> 00:56:01,760
taxing in terms of memory and more

1516
00:56:01,760 --> 00:56:04,079
specifically in in memory

1517
00:56:04,079 --> 00:56:06,319
sorry it's you know more taxing in time

1518
00:56:06,319 --> 00:56:09,760
but much more so in terms of memory so

1519
00:56:09,760 --> 00:56:11,839
we have by default to deactivate the one

1520
00:56:11,839 --> 00:56:14,960
entity and zero tt for the proofs and

1521
00:56:14,960 --> 00:56:17,200
so we still we managed to prove most of

1522
00:56:17,200 --> 00:56:19,119
the security properties that we were

1523
00:56:19,119 --> 00:56:21,440
looking at for vanilla tls for the one

1524
00:56:21,440 --> 00:56:22,640
that are

1525
00:56:22,640 --> 00:56:24,160
possible to achieve

1526
00:56:24,160 --> 00:56:25,119
uh

1527
00:56:25,119 --> 00:56:28,319
with almost the feature activated uh and

1528
00:56:28,319 --> 00:56:30,400
for ech

1529
00:56:30,400 --> 00:56:33,760
we had to unfortunately deactivate

1530
00:56:33,760 --> 00:56:35,520
some many of the features to try to have

1531
00:56:35,520 --> 00:56:37,280
interesting scenario and obtain the

1532
00:56:37,280 --> 00:56:39,200
proof and so currently we are mostly

1533
00:56:39,200 --> 00:56:41,920
working on improving progress to remove

1534
00:56:41,920 --> 00:56:42,880
this

1535
00:56:42,880 --> 00:56:44,480
problem of how to reduce this memory

1536
00:56:44,480 --> 00:56:46,319
consumption because

1537
00:56:46,319 --> 00:56:48,079
with the hope that if we manage to solve

1538
00:56:48,079 --> 00:56:50,160
this problem we can you know remove all

1539
00:56:50,160 --> 00:56:53,920
the cross and put checks everywhere

1540
00:56:53,920 --> 00:56:55,760
thanks see can i ask a clarifying

1541
00:56:55,760 --> 00:56:56,640
question

1542
00:56:56,640 --> 00:56:58,880
i've been saying oh perfect i didn't

1543
00:56:58,880 --> 00:57:00,880
realize you're getting any questions um

1544
00:57:00,880 --> 00:57:02,720
uh so first let me say this is like

1545
00:57:02,720 --> 00:57:04,559
amazing work so thank you so much for do

1546
00:57:04,559 --> 00:57:06,960
for doing and presenting it um um can

1547
00:57:06,960 --> 00:57:08,400
you um it's really great to have this

1548
00:57:08,400 --> 00:57:11,119
done um can you clarify what you mean

1549
00:57:11,119 --> 00:57:13,119
when you say that one rtt and zero to

1550
00:57:13,119 --> 00:57:14,559
two are both disabled i understand what

1551
00:57:14,559 --> 00:57:16,400
it means to have zero t disabled if

1552
00:57:16,400 --> 00:57:17,839
you're one or two disabled that means we

1553
00:57:17,839 --> 00:57:19,599
don't have tls so can you tell me a

1554
00:57:19,599 --> 00:57:21,440
little more about what that means

1555
00:57:21,440 --> 00:57:23,359
yeah so it's in the term of the proof so

1556
00:57:23,359 --> 00:57:25,119
typically uh the

1557
00:57:25,119 --> 00:57:26,960
it means that in the middle when you do

1558
00:57:26,960 --> 00:57:29,280
the when you do the proof the use

1559
00:57:29,280 --> 00:57:31,280
normally in the model uh

1560
00:57:31,280 --> 00:57:33,359
you're gonna

1561
00:57:33,359 --> 00:57:35,920
send the messages that are sent at the

1562
00:57:35,920 --> 00:57:36,799
end

1563
00:57:36,799 --> 00:57:38,960
uh encrypted with the application uh

1564
00:57:38,960 --> 00:57:42,559
data but then in for the proof there the

1565
00:57:42,559 --> 00:57:45,839
uh we we assume that they are we assume

1566
00:57:45,839 --> 00:57:47,480
we hope that those

1567
00:57:47,480 --> 00:57:48,799
[Music]

1568
00:57:48,799 --> 00:57:50,400
adding those entities at the end of

1569
00:57:50,400 --> 00:57:52,160
those one entity at the end would not

1570
00:57:52,160 --> 00:57:54,319
impact the proof because we managed to

1571
00:57:54,319 --> 00:57:56,799
have some of them with when almost re

1572
00:57:56,799 --> 00:57:59,680
remove all the conflict the all the

1573
00:57:59,680 --> 00:58:01,359
all the feature and just put one entity

1574
00:58:01,359 --> 00:58:02,880
it didn't change anything

1575
00:58:02,880 --> 00:58:03,839
uh

1576
00:58:03,839 --> 00:58:05,599
but in term of verification really

1577
00:58:05,599 --> 00:58:07,520
really

1578
00:58:07,520 --> 00:58:10,160
really made product blow up like right i

1579
00:58:10,160 --> 00:58:12,799
use the server of 500 gigabytes and in

1580
00:58:12,799 --> 00:58:15,440
some in one scenario i was going over

1581
00:58:15,440 --> 00:58:16,160
that

1582
00:58:16,160 --> 00:58:17,680
here the prime that we really reached

1583
00:58:17,680 --> 00:58:19,520
the limit of the material so it's it's

1584
00:58:19,520 --> 00:58:20,880
really problematic

1585
00:58:20,880 --> 00:58:23,920
so this means you only go as far as cfin

1586
00:58:23,920 --> 00:58:25,200
but you don't go as far as saying the

1587
00:58:25,200 --> 00:58:27,040
application data is that with that that

1588
00:58:27,040 --> 00:58:29,359
one exactly okay that is correct that

1589
00:58:29,359 --> 00:58:30,720
that seems like totally reasonable thank

1590
00:58:30,720 --> 00:58:33,720
you

1591
00:58:38,240 --> 00:58:41,520
right hello yeah

1592
00:58:42,240 --> 00:58:44,400
arnold today from broadcom

1593
00:58:44,400 --> 00:58:46,720
so it's two years i could not come to

1594
00:58:46,720 --> 00:58:48,240
atf

1595
00:58:48,240 --> 00:58:50,000
so i'm rediscovering a little bit what's

1596
00:58:50,000 --> 00:58:52,319
going on here

1597
00:58:52,319 --> 00:58:54,960
i have a question in one of your earlier

1598
00:58:54,960 --> 00:58:57,440
slides you are saying that you have

1599
00:58:57,440 --> 00:59:00,559
tested the number of scenario

1600
00:59:00,559 --> 00:59:02,799
i appreciate the amount of work and i

1601
00:59:02,799 --> 00:59:04,559
appreciate the the the approach you are

1602
00:59:04,559 --> 00:59:05,839
taking but

1603
00:59:05,839 --> 00:59:08,079
at imagine we consider an enterprise

1604
00:59:08,079 --> 00:59:10,319
scenario right we have ech in an

1605
00:59:10,319 --> 00:59:12,240
enterprise scenario

1606
00:59:12,240 --> 00:59:14,960
now you have a customer that has to deal

1607
00:59:14,960 --> 00:59:16,839
with network

1608
00:59:16,839 --> 00:59:19,119
inspection so

1609
00:59:19,119 --> 00:59:21,040
if you were to have to do this exercise

1610
00:59:21,040 --> 00:59:23,760
with a more complex environment with

1611
00:59:23,760 --> 00:59:26,960
where you have people who have to do

1612
00:59:26,960 --> 00:59:29,280
data loss prevention because they are

1613
00:59:29,280 --> 00:59:31,200
concerned by compliancy they are

1614
00:59:31,200 --> 00:59:34,559
concerned by gdpr they are concerned by

1615
00:59:34,559 --> 00:59:36,640
mass exfiltration they are concerned by

1616
00:59:36,640 --> 00:59:37,599
attacks

1617
00:59:37,599 --> 00:59:39,280
they are concerned by all sorts of other

1618
00:59:39,280 --> 00:59:40,319
things

1619
00:59:40,319 --> 00:59:42,400
is this something you could extend to a

1620
00:59:42,400 --> 00:59:46,040
more complex case

1621
00:59:46,400 --> 00:59:48,079
um i'm not sure

1622
00:59:48,079 --> 00:59:49,760
uh so

1623
00:59:49,760 --> 00:59:51,730
so you want to add in the model uh

1624
00:59:51,730 --> 00:59:54,160
[Music]

1625
00:59:54,160 --> 00:59:56,240
yeah i'm not sure exactly in terms of it

1626
00:59:56,240 --> 00:59:59,280
my question is if you were to put your

1627
00:59:59,280 --> 01:00:02,000
your construction

1628
01:00:02,000 --> 01:00:06,480
into a real case enterprise scenario

1629
01:00:08,079 --> 01:00:10,480
where you have proxies firewalls load

1630
01:00:10,480 --> 01:00:12,839
balancing all sorts of other

1631
01:00:12,839 --> 01:00:15,440
things uh

1632
01:00:15,440 --> 01:00:16,799
so your question is whether or not we

1633
01:00:16,799 --> 01:00:20,160
would be able to model such a thing

1634
01:00:20,720 --> 01:00:23,899
[Music]

1635
01:00:24,480 --> 01:00:27,040
but i mean i am yeah to be completely

1636
01:00:27,040 --> 01:00:29,520
honest i i cannot give you a definitive

1637
01:00:29,520 --> 01:00:31,839
answer because it will depend what you

1638
01:00:31,839 --> 01:00:33,680
what your aim about well not what the

1639
01:00:33,680 --> 01:00:34,960
game but uh

1640
01:00:34,960 --> 01:00:36,720
what exactly which feature would you

1641
01:00:36,720 --> 01:00:38,480
need to

1642
01:00:38,480 --> 01:00:39,520
to

1643
01:00:39,520 --> 01:00:41,680
see appear in the model but

1644
01:00:41,680 --> 01:00:43,680
theoretically yes we could model it and

1645
01:00:43,680 --> 01:00:46,079
extend the model to have those

1646
01:00:46,079 --> 01:00:48,319
those features

1647
01:00:48,319 --> 01:00:49,680
added

1648
01:00:49,680 --> 01:00:51,119
i don't know how it would impact in

1649
01:00:51,119 --> 01:00:52,240
terms of

1650
01:00:52,240 --> 01:00:53,599
in term of verification but

1651
01:00:53,599 --> 01:00:55,200
theoretically yes you could

1652
01:00:55,200 --> 01:00:57,359
add this in the model

1653
01:00:57,359 --> 01:00:58,799
okay

1654
01:00:58,799 --> 01:01:00,880
you are based in france right

1655
01:01:00,880 --> 01:01:02,400
correct okay

1656
01:01:02,400 --> 01:01:04,880
it contacts you offline thank you

1657
01:01:04,880 --> 01:01:08,040
thank you

1658
01:01:12,880 --> 01:01:15,280
yeah go ahead honest i'm okay uh hi this

1659
01:01:15,280 --> 01:01:16,640
is hannes um

1660
01:01:16,640 --> 01:01:18,559
um thanks for doing the work uh i was

1661
01:01:18,559 --> 01:01:20,799
wondering whether you have um published

1662
01:01:20,799 --> 01:01:23,119
a paper and released the the scripts

1663
01:01:23,119 --> 01:01:24,799
that you had shown um would be

1664
01:01:24,799 --> 01:01:27,520
interesting to verify uh

1665
01:01:27,520 --> 01:01:29,200
some of that work is that available

1666
01:01:29,200 --> 01:01:30,799
somewhere already or

1667
01:01:30,799 --> 01:01:31,680
yes

1668
01:01:31,680 --> 01:01:33,680
so there's a github public github that

1669
01:01:33,680 --> 01:01:34,400
is

1670
01:01:34,400 --> 01:01:35,520
available

1671
01:01:35,520 --> 01:01:37,200
online if it's public

1672
01:01:37,200 --> 01:01:39,040
and it's

1673
01:01:39,040 --> 01:01:40,799
the work is going to be

1674
01:01:40,799 --> 01:01:41,920
it's uh ongoing

1675
01:01:41,920 --> 01:01:43,359
[Music]

1676
01:01:43,359 --> 01:01:47,200
submission to cc to ccs of this year

1677
01:01:47,200 --> 01:01:48,000
okay

1678
01:01:48,000 --> 01:01:50,880
so if i send chris or you an email i

1679
01:01:50,880 --> 01:01:51,920
might get

1680
01:01:51,920 --> 01:01:53,760
access to it

1681
01:01:53,760 --> 01:01:58,240
yes yes currently awesome thank you

1682
01:01:58,880 --> 01:02:00,640
hi stephen farrell just noting that i

1683
01:02:00,640 --> 01:02:02,319
think i just formed the first actual mic

1684
01:02:02,319 --> 01:02:03,680
line

1685
01:02:03,680 --> 01:02:05,039
until we had this there was actually a

1686
01:02:05,039 --> 01:02:07,760
line here

1687
01:02:07,760 --> 01:02:09,200
no no but there was a physical line of

1688
01:02:09,200 --> 01:02:11,359
two people

1689
01:02:11,359 --> 01:02:13,200
hi so again thanks this work can you go

1690
01:02:13,200 --> 01:02:15,280
back two slides

1691
01:02:15,280 --> 01:02:16,960
to the assumptions

1692
01:02:16,960 --> 01:02:18,319
there yeah

1693
01:02:18,319 --> 01:02:19,599
so again i

1694
01:02:19,599 --> 01:02:21,039
i asked this in the chat but i just

1695
01:02:21,039 --> 01:02:22,559
wanted to kind of raise it so i think

1696
01:02:22,559 --> 01:02:24,000
there's also an assumption here that the

1697
01:02:24,000 --> 01:02:27,039
same ech configuration is in use for

1698
01:02:27,039 --> 01:02:30,559
both ps1 and bs2

1699
01:02:30,559 --> 01:02:31,760
uh

1700
01:02:31,760 --> 01:02:32,880
yes

1701
01:02:32,880 --> 01:02:34,640
yes of course you have to

1702
01:02:34,640 --> 01:02:36,079
to use uh

1703
01:02:36,079 --> 01:02:37,359
wait sorry for

1704
01:02:37,359 --> 01:02:39,039
between p

1705
01:02:39,039 --> 01:02:40,640
uh

1706
01:02:40,640 --> 01:02:42,319
so they're the same the same hch

1707
01:02:42,319 --> 01:02:46,000
probably hpk public key is used yeah so

1708
01:02:46,000 --> 01:02:48,799
no not necessarily i mean typically if

1709
01:02:48,799 --> 01:02:52,000
the client facing server has several

1710
01:02:52,000 --> 01:02:53,920
configuration possible

1711
01:02:53,920 --> 01:02:57,760
uh so of course his public key uh wait

1712
01:02:57,760 --> 01:03:00,000
no no yeah i'm sorry my bad he has to

1713
01:03:00,000 --> 01:03:01,839
have the same public keys

1714
01:03:01,839 --> 01:03:03,760
right so given that those are read from

1715
01:03:03,760 --> 01:03:05,359
the dns

1716
01:03:05,359 --> 01:03:07,839
entries of the backend servers they

1717
01:03:07,839 --> 01:03:09,200
could differ

1718
01:03:09,200 --> 01:03:10,640
um

1719
01:03:10,640 --> 01:03:14,000
because of caching in dns or something

1720
01:03:14,000 --> 01:03:15,200
and and even you might even have

1721
01:03:15,200 --> 01:03:17,039
different groups or something so

1722
01:03:17,039 --> 01:03:18,880
it would be nice to try and write down

1723
01:03:18,880 --> 01:03:19,839
the

1724
01:03:19,839 --> 01:03:21,680
the assumptions there

1725
01:03:21,680 --> 01:03:23,680
so that people have some guidance as to

1726
01:03:23,680 --> 01:03:25,440
you know what not to do in terms of

1727
01:03:25,440 --> 01:03:28,480
publishing ech configs in dns

1728
01:03:28,480 --> 01:03:31,359
yeah indeed i agree

1729
01:03:31,359 --> 01:03:33,599
thanks yeah i'm not completely uh in

1730
01:03:33,599 --> 01:03:34,799
terms of uh in some of the

1731
01:03:34,799 --> 01:03:36,960
implementation detail i'm not completely

1732
01:03:36,960 --> 01:03:39,200
uh aware of the

1733
01:03:39,200 --> 01:03:40,240
you know the

1734
01:03:40,240 --> 01:03:42,399
the

1735
01:03:43,359 --> 01:03:46,000
how the the link with the the the the

1736
01:03:46,000 --> 01:03:47,520
public key of the fonted server with

1737
01:03:47,520 --> 01:03:49,039
respect to backend server so this i

1738
01:03:49,039 --> 01:03:51,440
think chris would be able to uh answer

1739
01:03:51,440 --> 01:03:53,440
those questions more in detail yeah and

1740
01:03:53,440 --> 01:03:54,799
so so i think in terms of the analysis

1741
01:03:54,799 --> 01:03:55,839
that hopefully it shouldn't make much

1742
01:03:55,839 --> 01:03:57,119
difference as long as you use the same

1743
01:03:57,119 --> 01:03:58,799
group

1744
01:03:58,799 --> 01:04:00,240
but it would be nice just to have that

1745
01:04:00,240 --> 01:04:02,079
written down somewhere that has guidance

1746
01:04:02,079 --> 01:04:05,920
for people publishing dns records

1747
01:04:08,799 --> 01:04:11,280
jonathan hoyland cloudflare

1748
01:04:11,280 --> 01:04:12,799
i just want to say this is super awesome

1749
01:04:12,799 --> 01:04:15,039
work i think it's so exciting

1750
01:04:15,039 --> 01:04:17,680
um what's the

1751
01:04:17,680 --> 01:04:21,039
how does pro verif handle using 500 gig

1752
01:04:21,039 --> 01:04:22,480
of ram is it

1753
01:04:22,480 --> 01:04:25,920
does it just choke or is it does it work

1754
01:04:25,920 --> 01:04:28,799
well it does it does work i mean uh the

1755
01:04:28,799 --> 01:04:31,039
uh the thing is that the the the

1756
01:04:31,039 --> 01:04:33,359
previous typically has to store it

1757
01:04:33,359 --> 01:04:35,920
translate your your your process into

1758
01:04:35,920 --> 01:04:37,680
one class you have to store like a huge

1759
01:04:37,680 --> 01:04:38,720
amount of

1760
01:04:38,720 --> 01:04:41,039
classes so the storage in the end you

1761
01:04:41,039 --> 01:04:43,359
know it's just a normal

1762
01:04:43,359 --> 01:04:45,440
doesn't really make any problem with

1763
01:04:45,440 --> 01:04:46,880
product if it doesn't have time to go

1764
01:04:46,880 --> 01:04:49,599
through the memory uh but it's mostly

1765
01:04:49,599 --> 01:04:50,880
you know the

1766
01:04:50,880 --> 01:04:53,520
your limitation of your server so

1767
01:04:53,520 --> 01:04:55,200
from the poverty point of view it

1768
01:04:55,200 --> 01:04:56,880
doesn't have any problem handling 500

1769
01:04:56,880 --> 01:05:00,000
gigabytes if you have 500 gigabytes

1770
01:05:00,000 --> 01:05:01,839
available of course

1771
01:05:01,839 --> 01:05:03,920
it doesn't get bogged down in syscalls

1772
01:05:03,920 --> 01:05:04,880
or

1773
01:05:04,880 --> 01:05:07,599
bus width or i mean from from my

1774
01:05:07,599 --> 01:05:09,200
experience i mean when

1775
01:05:09,200 --> 01:05:11,599
it's the first time that i had to handle

1776
01:05:11,599 --> 01:05:12,640
that much

1777
01:05:12,640 --> 01:05:15,039
memory for for

1778
01:05:15,039 --> 01:05:16,720
uh

1779
01:05:16,720 --> 01:05:19,440
for a model so i'm i'm not gonna say

1780
01:05:19,440 --> 01:05:22,880
definitely that's uh it's not a problem

1781
01:05:22,880 --> 01:05:23,839
but

1782
01:05:23,839 --> 01:05:25,520
apparently the only error we got was

1783
01:05:25,520 --> 01:05:27,760
every time we would reach the the limit

1784
01:05:27,760 --> 01:05:30,319
of the memory and then just then the

1785
01:05:30,319 --> 01:05:32,880
call would just be erased by the system

1786
01:05:32,880 --> 01:05:34,480
and that's it

1787
01:05:34,480 --> 01:05:37,839
very cool thank you so much

1788
01:05:46,160 --> 01:05:47,839
okay thanks vincent i think we're

1789
01:05:47,839 --> 01:05:49,280
getting ready for the next uh

1790
01:05:49,280 --> 01:05:51,839
presentation

1791
01:05:52,960 --> 01:05:55,039
all right douglas

1792
01:05:55,039 --> 01:05:57,839
okay good morning can you hear me

1793
01:05:57,839 --> 01:05:59,119
yeah

1794
01:05:59,119 --> 01:06:01,440
great uh so i'm here to give a quick

1795
01:06:01,440 --> 01:06:05,039
update on uh hybrid key exchange and i

1796
01:06:05,039 --> 01:06:06,319
guess i saw in the chat there is a

1797
01:06:06,319 --> 01:06:08,480
discussion of the word hybrid hybrid in

1798
01:06:08,480 --> 01:06:10,240
this setting is meant to

1799
01:06:10,240 --> 01:06:12,480
uh refer to the use of multiple

1800
01:06:12,480 --> 01:06:14,720
algorithms together so the motivation of

1801
01:06:14,720 --> 01:06:16,880
this draft and i've presented this

1802
01:06:16,880 --> 01:06:19,520
before is to commit uh the simultaneous

1803
01:06:19,520 --> 01:06:21,440
use of traditional and post quantum key

1804
01:06:21,440 --> 01:06:24,960
exchange in tls 1.3

1805
01:06:24,960 --> 01:06:27,359
and that thereby enable early adopters

1806
01:06:27,359 --> 01:06:29,359
to get post quantum security without

1807
01:06:29,359 --> 01:06:31,760
discarding the existing security that

1808
01:06:31,760 --> 01:06:34,880
might be offered by current algorithms

1809
01:06:34,880 --> 01:06:36,400
and that would reduce the risk of the

1810
01:06:36,400 --> 01:06:38,000
break from one algorithm and help

1811
01:06:38,000 --> 01:06:40,079
maintain standards compliance uh during

1812
01:06:40,079 --> 01:06:41,280
the transition to post-quantum

1813
01:06:41,280 --> 01:06:42,880
cryptography

1814
01:06:42,880 --> 01:06:44,799
so in this document the goals are to

1815
01:06:44,799 --> 01:06:48,079
define the uh mechanisms for

1816
01:06:48,079 --> 01:06:50,480
uh negotiat for negotiating and

1817
01:06:50,480 --> 01:06:52,799
establishing a shared secret using

1818
01:06:52,799 --> 01:06:55,200
hybrid key exchange um but there are

1819
01:06:55,200 --> 01:06:57,920
several non-goals uh so it is not a goal

1820
01:06:57,920 --> 01:07:00,079
to select which post-quantum algorithms

1821
01:07:00,079 --> 01:07:02,160
are actually used in tls that's the

1822
01:07:02,160 --> 01:07:06,079
ongoing work of nist as well as cfrg

1823
01:07:06,079 --> 01:07:08,160
and it's not a goal to do hybrid or

1824
01:07:08,160 --> 01:07:10,480
composite certificates or to do digital

1825
01:07:10,480 --> 01:07:11,599
signatures

1826
01:07:11,599 --> 01:07:13,520
um some of that is being done by the

1827
01:07:13,520 --> 01:07:15,760
lamps working group and others will have

1828
01:07:15,760 --> 01:07:18,960
to be done later by this working group

1829
01:07:18,960 --> 01:07:20,960
so the uh

1830
01:07:20,960 --> 01:07:25,280
mechanism in uh this document is to just

1831
01:07:25,280 --> 01:07:28,319
define a new key exchange mechanism a

1832
01:07:28,319 --> 01:07:30,400
new key exchange group for each desired

1833
01:07:30,400 --> 01:07:31,760
combination of traditional and

1834
01:07:31,760 --> 01:07:33,839
post-quantum algorithm parameter sets

1835
01:07:33,839 --> 01:07:36,480
and that will act as a new opaque key

1836
01:07:36,480 --> 01:07:38,799
exchange group and then from that main

1837
01:07:38,799 --> 01:07:39,760
idea

1838
01:07:39,760 --> 01:07:41,920
negotiation is straightforward using new

1839
01:07:41,920 --> 01:07:43,920
named groups for each combination which

1840
01:07:43,920 --> 01:07:45,200
will have to be standardized

1841
01:07:45,200 --> 01:07:46,480
subsequently

1842
01:07:46,480 --> 01:07:48,960
key shares are conveyed by concatenating

1843
01:07:48,960 --> 01:07:50,960
the key shares for each algorithm and

1844
01:07:50,960 --> 01:07:52,319
submitting them just in the current key

1845
01:07:52,319 --> 01:07:53,200
share

1846
01:07:53,200 --> 01:07:54,559
fields

1847
01:07:54,559 --> 01:07:56,559
and then shared secret calculation

1848
01:07:56,559 --> 01:07:59,599
is done by concatenating shared secrets

1849
01:07:59,599 --> 01:08:01,599
uh just as byte strings and then

1850
01:08:01,599 --> 01:08:03,680
inputting that into the key schedule and

1851
01:08:03,680 --> 01:08:05,760
i note here that concatenation isn't a

1852
01:08:05,760 --> 01:08:07,920
combiner for key material that's been

1853
01:08:07,920 --> 01:08:09,680
approved by nist

1854
01:08:09,680 --> 01:08:12,000
as maintaining fips compliance if one of

1855
01:08:12,000 --> 01:08:14,880
the key material inputs is fips

1856
01:08:14,880 --> 01:08:16,080
compliance

1857
01:08:16,080 --> 01:08:17,359
so that's the main mechanism which i've

1858
01:08:17,359 --> 01:08:18,880
presented before and has not changed

1859
01:08:18,880 --> 01:08:21,120
since previous discussions

1860
01:08:21,120 --> 01:08:23,040
the main thing since i last presented

1861
01:08:23,040 --> 01:08:25,759
was a discussion on the mailing list

1862
01:08:25,759 --> 01:08:28,960
started in august 2021 by uh nimrod

1863
01:08:28,960 --> 01:08:30,799
avaram and his colleagues

1864
01:08:30,799 --> 01:08:32,560
about whether concatenation is in fact

1865
01:08:32,560 --> 01:08:34,080
safe to use

1866
01:08:34,080 --> 01:08:35,839
and they started from the premise that

1867
01:08:35,839 --> 01:08:38,238
if the hash function used in the

1868
01:08:38,238 --> 01:08:41,679
combiner is not collision resistance

1869
01:08:41,679 --> 01:08:43,439
then it may be possible to learn some

1870
01:08:43,439 --> 01:08:44,880
keying material

1871
01:08:44,880 --> 01:08:46,880
and the conditions of their scenario

1872
01:08:46,880 --> 01:08:48,640
were actually that the hash function

1873
01:08:48,640 --> 01:08:50,880
needed to not be collision resistant and

1874
01:08:50,880 --> 01:08:52,319
that collisions could be found within

1875
01:08:52,319 --> 01:08:54,880
the lifetime of the tls session

1876
01:08:54,880 --> 01:08:57,439
that the first uh spite string in the

1877
01:08:57,439 --> 01:08:58,719
keying material

1878
01:08:58,719 --> 01:09:01,359
is uh variable length and that the

1879
01:09:01,359 --> 01:09:03,359
ephemeral keys used

1880
01:09:03,359 --> 01:09:06,799
in the second component are reused for a

1881
01:09:06,799 --> 01:09:08,399
long period of time

1882
01:09:08,399 --> 01:09:10,960
and this is based on uh

1883
01:09:10,960 --> 01:09:12,640
similar to the crime attack it kind of

1884
01:09:12,640 --> 01:09:15,920
works in a bite-by-byte scenario

1885
01:09:15,920 --> 01:09:18,158
so this is very interesting

1886
01:09:18,158 --> 01:09:20,479
and obviously has some significant

1887
01:09:20,479 --> 01:09:22,319
assumptions here and asking for security

1888
01:09:22,319 --> 01:09:23,759
in a world where the hash function is

1889
01:09:23,759 --> 01:09:26,880
not collision resistant um is uh is a

1890
01:09:26,880 --> 01:09:28,238
challenge and there are certainly

1891
01:09:28,238 --> 01:09:29,920
impacts on other parts of the tls

1892
01:09:29,920 --> 01:09:31,679
protocol as well

1893
01:09:31,679 --> 01:09:33,679
for this specific attack

1894
01:09:33,679 --> 01:09:34,399
it

1895
01:09:34,399 --> 01:09:36,719
ends up not applying while the first and

1896
01:09:36,719 --> 01:09:38,158
third conditions

1897
01:09:38,158 --> 01:09:39,920
could plausibly hold

1898
01:09:39,920 --> 01:09:42,640
the second condition that the

1899
01:09:42,640 --> 01:09:44,799
first keying material component is

1900
01:09:44,799 --> 01:09:48,000
variable length is not satisfied so in

1901
01:09:48,000 --> 01:09:50,238
all standardized tls 1.3 diffie-hellman

1902
01:09:50,238 --> 01:09:52,479
groups the

1903
01:09:52,479 --> 01:09:54,880
shared secret component is fixed length

1904
01:09:54,880 --> 01:09:56,400
and so

1905
01:09:56,400 --> 01:09:58,640
it is not possible for this attack to

1906
01:09:58,640 --> 01:10:01,679
apply to the draft as stated

1907
01:10:01,679 --> 01:10:03,840
so at this point we decided that meant

1908
01:10:03,840 --> 01:10:05,679
we did not need to make any changes to

1909
01:10:05,679 --> 01:10:07,280
the draft

1910
01:10:07,280 --> 01:10:09,120
now this is still a worthwhile exercise

1911
01:10:09,120 --> 01:10:11,520
given long-lived hard to upgrade

1912
01:10:11,520 --> 01:10:13,840
implementations how should we design our

1913
01:10:13,840 --> 01:10:17,280
protocols to be robust against algorithm

1914
01:10:17,280 --> 01:10:18,239
failure

1915
01:10:18,239 --> 01:10:20,400
and it may be worthwhile to for the tls

1916
01:10:20,400 --> 01:10:22,320
working group to further consider

1917
01:10:22,320 --> 01:10:24,719
uh the role of collision resistance in

1918
01:10:24,719 --> 01:10:28,000
the protocol design of tls 1.3 overall

1919
01:10:28,000 --> 01:10:30,480
but at this point we don't see a need to

1920
01:10:30,480 --> 01:10:32,159
continue uh

1921
01:10:32,159 --> 01:10:33,360
the

1922
01:10:33,360 --> 01:10:35,280
adjustments to the hybrid key exchange

1923
01:10:35,280 --> 01:10:37,840
draft as a result of this document

1924
01:10:37,840 --> 01:10:39,360
so where we stand now

1925
01:10:39,360 --> 01:10:41,920
is that we don't have any known pending

1926
01:10:41,920 --> 01:10:43,679
tasks for this draft

1927
01:10:43,679 --> 01:10:45,040
there are several interoperable

1928
01:10:45,040 --> 01:10:46,480
implementations at this

1929
01:10:46,480 --> 01:10:47,760
point here

1930
01:10:47,760 --> 01:10:50,000
some from the open quantum safe projects

1931
01:10:50,000 --> 01:10:52,640
openssl and boring self-works as well as

1932
01:10:52,640 --> 01:10:55,360
wolf ssl and amazon signal to noise

1933
01:10:55,360 --> 01:10:57,040
library

1934
01:10:57,040 --> 01:11:00,560
um the specific pq algorithms to be uh

1935
01:11:00,560 --> 01:11:02,239
used in this context as i mentioned are

1936
01:11:02,239 --> 01:11:03,600
going to be identified outside of this

1937
01:11:03,600 --> 01:11:06,239
document um when the nist round three uh

1938
01:11:06,239 --> 01:11:09,840
process concludes um leading to cfrg and

1939
01:11:09,840 --> 01:11:12,880
then finally uh to tls so

1940
01:11:12,880 --> 01:11:16,239
i'm not an iutf procedure expert

1941
01:11:16,239 --> 01:11:17,840
but i think it may be the case that this

1942
01:11:17,840 --> 01:11:20,080
could move to working group last call

1943
01:11:20,080 --> 01:11:22,560
so i'd like some guidance on how to

1944
01:11:22,560 --> 01:11:24,320
proceed here and of course happy to

1945
01:11:24,320 --> 01:11:27,920
answer any questions that come up

1946
01:11:30,960 --> 01:11:33,760
okay martin

1947
01:11:35,200 --> 01:11:38,720
[Music]

1948
01:11:39,600 --> 01:11:41,440
yeah thanks for this douglas when you uh

1949
01:11:41,440 --> 01:11:43,280
on the previous slide i think it was

1950
01:11:43,280 --> 01:11:44,480
when you said

1951
01:11:44,480 --> 01:11:46,480
that we're not making any changes in the

1952
01:11:46,480 --> 01:11:47,679
document

1953
01:11:47,679 --> 01:11:50,480
uh have we stated our assumptions very

1954
01:11:50,480 --> 01:11:51,600
clearly

1955
01:11:51,600 --> 01:11:53,520
okay i there are statements in the

1956
01:11:53,520 --> 01:11:54,560
document

1957
01:11:54,560 --> 01:11:56,800
that uh sorry i guess when i say no

1958
01:11:56,800 --> 01:11:58,400
change is made to this draft uh there

1959
01:11:58,400 --> 01:12:00,159
are no technical changes to make this

1960
01:12:00,159 --> 01:12:03,840
draft we did uh mention this uh scenario

1961
01:12:03,840 --> 01:12:06,719
and there is a clear statement

1962
01:12:06,719 --> 01:12:09,120
that uh this document is only meant to

1963
01:12:09,120 --> 01:12:11,520
be used with uh

1964
01:12:11,520 --> 01:12:13,280
algorithms that have fixed length shared

1965
01:12:13,280 --> 01:12:16,080
secrets to to be clear that we require

1966
01:12:16,080 --> 01:12:17,280
assumption b

1967
01:12:17,280 --> 01:12:20,719
to uh to not be satisfied

1968
01:12:20,719 --> 01:12:23,840
perfect thanks

1969
01:12:25,600 --> 01:12:28,080
stephen

1970
01:12:28,159 --> 01:12:30,239
hi steven uh just on the question of

1971
01:12:30,239 --> 01:12:32,239
working group last call um i mean

1972
01:12:32,239 --> 01:12:33,760
generally i think a lot of this work is

1973
01:12:33,760 --> 01:12:35,360
being done too soon

1974
01:12:35,360 --> 01:12:37,679
all this post quantum stuff um

1975
01:12:37,679 --> 01:12:39,280
i might be in the minority there that's

1976
01:12:39,280 --> 01:12:40,239
fine

1977
01:12:40,239 --> 01:12:41,760
uh it would seem very weird to have a

1978
01:12:41,760 --> 01:12:43,280
working group last call on a protocol

1979
01:12:43,280 --> 01:12:44,880
document where the algorithms that are

1980
01:12:44,880 --> 01:12:48,159
used are unknown

1981
01:12:48,159 --> 01:12:48,840
so

1982
01:12:48,840 --> 01:12:50,719
uh

1983
01:12:50,719 --> 01:12:52,480
if we have if we're starting a practice

1984
01:12:52,480 --> 01:12:54,239
of parking documents until people

1985
01:12:54,239 --> 01:12:55,440
implement them

1986
01:12:55,440 --> 01:12:56,960
maybe we should also park documents

1987
01:12:56,960 --> 01:12:58,719
until the actual cryptographic algorithm

1988
01:12:58,719 --> 01:13:02,080
details are understood

1989
01:13:03,679 --> 01:13:04,640
um

1990
01:13:04,640 --> 01:13:07,120
so i i i take your point um

1991
01:13:07,120 --> 01:13:10,239
and uh i guess my goal had been to make

1992
01:13:10,239 --> 01:13:11,920
sure this mechanism was ready when

1993
01:13:11,920 --> 01:13:15,120
people wanted to use it um and

1994
01:13:15,120 --> 01:13:16,719
really i'll all defer to how the working

1995
01:13:16,719 --> 01:13:18,719
group wants to proceed

1996
01:13:18,719 --> 01:13:20,960
in terms of process because i'm not an

1997
01:13:20,960 --> 01:13:23,600
expert on that

1998
01:13:23,760 --> 01:13:26,000
and uh i think we could have a working

1999
01:13:26,000 --> 01:13:27,520
group last call and not move the

2000
01:13:27,520 --> 01:13:30,239
document forward after that depending on

2001
01:13:30,239 --> 01:13:32,080
you know to to kind of get feedback on

2002
01:13:32,080 --> 01:13:34,880
the current state

2003
01:13:35,520 --> 01:13:36,320
so

2004
01:13:36,320 --> 01:13:37,440
so again yeah there's probably this is

2005
01:13:37,440 --> 01:13:38,640
more question to the chairs i guess for

2006
01:13:38,640 --> 01:13:40,880
sure yeah yeah i mean so i just don't

2007
01:13:40,880 --> 01:13:42,640
understand how you could consider

2008
01:13:42,640 --> 01:13:43,920
something being a last call when the

2009
01:13:43,920 --> 01:13:45,520
underlying cryptographic algorithms to

2010
01:13:45,520 --> 01:13:48,080
be used are unknown

2011
01:13:48,080 --> 01:13:49,360
we don't know which ones they still pick

2012
01:13:49,360 --> 01:13:51,120
or not for sure all right hey this is

2013
01:13:51,120 --> 01:13:52,560
sean just to use chair prerogative to

2014
01:13:52,560 --> 01:13:54,480
jump in here the only thing that i would

2015
01:13:54,480 --> 01:13:56,560
add to the last bullet there is you know

2016
01:13:56,560 --> 01:13:58,480
could we move to a working group last

2017
01:13:58,480 --> 01:14:00,159
call it doesn't have to be the le

2018
01:14:00,159 --> 01:14:02,159
working group last call the problem is

2019
01:14:02,159 --> 01:14:03,440
that i think that a lot of times that

2020
01:14:03,440 --> 01:14:05,040
people don't really review drafts unless

2021
01:14:05,040 --> 01:14:06,719
we start to say working group last call

2022
01:14:06,719 --> 01:14:09,199
and i think doug's only point is hey we

2023
01:14:09,199 --> 01:14:11,360
want people to like look at this so that

2024
01:14:11,360 --> 01:14:13,040
when it when the when the uh our

2025
01:14:13,040 --> 01:14:14,640
algorithms are actually announced that

2026
01:14:14,640 --> 01:14:16,880
they can move quicker to implementation

2027
01:14:16,880 --> 01:14:18,320
i don't want to mischaracterize you doug

2028
01:14:18,320 --> 01:14:20,960
is that basically what you're thinking

2029
01:14:20,960 --> 01:14:23,199
yes thank you

2030
01:14:23,199 --> 01:14:25,040
okay so so then i guess i'd ask the

2031
01:14:25,040 --> 01:14:26,640
chairs if you could kind of be specific

2032
01:14:26,640 --> 01:14:28,880
about that we you know we don't want an

2033
01:14:28,880 --> 01:14:30,640
rfc popping out before we know what the

2034
01:14:30,640 --> 01:14:31,920
actual

2035
01:14:31,920 --> 01:14:33,360
result of the nist competition is i

2036
01:14:33,360 --> 01:14:35,280
think right oh yeah absolutely so that

2037
01:14:35,280 --> 01:14:36,480
was when we first started this whole

2038
01:14:36,480 --> 01:14:37,920
draft that was the you know we're not

2039
01:14:37,920 --> 01:14:39,600
going to finish this until we actually

2040
01:14:39,600 --> 01:14:41,280
the algorithms get picked

2041
01:14:41,280 --> 01:14:43,280
so i that's supposed to happen any

2042
01:14:43,280 --> 01:14:45,520
moment now possibly you know today who

2043
01:14:45,520 --> 01:14:47,520
knows maybe it maybe it's sag tomorrow

2044
01:14:47,520 --> 01:14:50,480
who knows but uh so the the algorithm is

2045
01:14:50,480 --> 01:14:52,159
supposed to be coming fairly quickly and

2046
01:14:52,159 --> 01:14:53,520
so i think it's just trying to get this

2047
01:14:53,520 --> 01:14:56,239
draft in the right place to launch ports

2048
01:14:56,239 --> 01:14:57,920
so sorry for using chair prerogative

2049
01:14:57,920 --> 01:15:00,239
there to jump in the cube

2050
01:15:00,239 --> 01:15:01,920
no and thanks sean i mean it really was

2051
01:15:01,920 --> 01:15:03,040
a question for the chairs and not so

2052
01:15:03,040 --> 01:15:05,519
much for doug

2053
01:15:07,520 --> 01:15:10,520
hacker

2054
01:15:12,239 --> 01:15:13,520
yeah working across college is

2055
01:15:13,520 --> 01:15:14,960
appropriate to me here i have no problem

2056
01:15:14,960 --> 01:15:16,800
with parking it um

2057
01:15:16,800 --> 01:15:18,080
algorithms are announced as far as i can

2058
01:15:18,080 --> 01:15:20,480
tell no significant part of

2059
01:15:20,480 --> 01:15:21,760
like

2060
01:15:21,760 --> 01:15:23,280
like no significant part of one's review

2061
01:15:23,280 --> 01:15:24,400
this document actually depends what the

2062
01:15:24,400 --> 01:15:25,679
algorithms are because this is

2063
01:15:25,679 --> 01:15:27,520
intentionally algorithm agnostic so if

2064
01:15:27,520 --> 01:15:29,280
we assume the algorithms are sound then

2065
01:15:29,280 --> 01:15:30,960
um you know then it should not matter to

2066
01:15:30,960 --> 01:15:32,480
me whether which algorithm it actually

2067
01:15:32,480 --> 01:15:34,080
is um

2068
01:15:34,080 --> 01:15:35,600
which is fortunate as i don't understand

2069
01:15:35,600 --> 01:15:37,280
the algorithms um

2070
01:15:37,280 --> 01:15:40,719
the um could you go back um to your um

2071
01:15:40,719 --> 01:15:42,719
uh to decide about the active attack

2072
01:15:42,719 --> 01:15:44,960
please

2073
01:15:48,080 --> 01:15:49,760
right um

2074
01:15:49,760 --> 01:15:51,280
so uh

2075
01:15:51,280 --> 01:15:52,640
i think your professor illusion is fine

2076
01:15:52,640 --> 01:15:54,719
but i want to push but so let me just

2077
01:15:54,719 --> 01:15:56,880
add in advance before i push

2078
01:15:56,880 --> 01:16:00,560
so um suppose we were to introduce a you

2079
01:16:00,560 --> 01:16:03,520
know uh a tails 4.4 or an extension

2080
01:16:03,520 --> 01:16:05,920
which had a different a different well

2081
01:16:05,920 --> 01:16:08,560
more collision resistant um more sorry

2082
01:16:08,560 --> 01:16:10,000
more length and length ambiguous

2083
01:16:10,000 --> 01:16:12,320
resistance structure right um

2084
01:16:12,320 --> 01:16:13,440
uh

2085
01:16:13,440 --> 01:16:15,040
um

2086
01:16:15,040 --> 01:16:16,159
uh

2087
01:16:16,159 --> 01:16:17,840
would that um

2088
01:16:17,840 --> 01:16:18,960
uh

2089
01:16:18,960 --> 01:16:20,320
and and the client and the server are

2090
01:16:20,320 --> 01:16:23,760
both upgraded to that um to that mode um

2091
01:16:23,760 --> 01:16:25,199
and so they would negotiate if left

2092
01:16:25,199 --> 01:16:27,199
alone right um

2093
01:16:27,199 --> 01:16:29,199
uh does um

2094
01:16:29,199 --> 01:16:30,800
uh but of course the attacker can do

2095
01:16:30,800 --> 01:16:32,080
whatever they want and then the clients

2096
01:16:32,080 --> 01:16:35,120
are also have to jointly do um the uh um

2097
01:16:35,120 --> 01:16:36,560
do you have to do the older mode so like

2098
01:16:36,560 --> 01:16:38,239
so have in the while we have like that

2099
01:16:38,239 --> 01:16:39,520
the structure we have now and then some

2100
01:16:39,520 --> 01:16:40,880
future collision resistance structure

2101
01:16:40,880 --> 01:16:42,320
and we have a way of negotiating that

2102
01:16:42,320 --> 01:16:44,000
and both clients ever have to do to chip

2103
01:16:44,000 --> 01:16:45,600
between them is this attack going to

2104
01:16:45,600 --> 01:16:47,120
slowly possible or will the fact that

2105
01:16:47,120 --> 01:16:49,120
the client server will naively uh

2106
01:16:49,120 --> 01:16:51,280
negotiate the stronger version

2107
01:16:51,280 --> 01:16:53,440
frederick's attack

2108
01:16:53,440 --> 01:16:56,320
so you're imagining a scenario where

2109
01:16:56,320 --> 01:16:58,239
there's this version which is only used

2110
01:16:58,239 --> 01:17:00,640
with fixed length elements and then

2111
01:17:00,640 --> 01:17:03,280
there is a version that can be used with

2112
01:17:03,280 --> 01:17:06,800
variable length shared secrets but has

2113
01:17:06,800 --> 01:17:10,320
some protection mechanism padding or a

2114
01:17:10,320 --> 01:17:12,239
different combiner that is meant to

2115
01:17:12,239 --> 01:17:14,560
protect uh when using variable length

2116
01:17:14,560 --> 01:17:16,640
secrets uh that's a good good question

2117
01:17:16,640 --> 01:17:19,040
um i actually i was imagining that we

2118
01:17:19,040 --> 01:17:20,880
relaxed that we stupid really relaxed

2119
01:17:20,880 --> 01:17:22,159
the restriction on it being fixed length

2120
01:17:22,159 --> 01:17:23,679
secrets um

2121
01:17:23,679 --> 01:17:25,120
uh um

2122
01:17:25,120 --> 01:17:26,800
um and you use it and you use this

2123
01:17:26,800 --> 01:17:29,199
version so i was imagining so i think

2124
01:17:29,199 --> 01:17:30,640
what you i hear let me see if i can

2125
01:17:30,640 --> 01:17:31,920
recap what i hear you saying which is

2126
01:17:31,920 --> 01:17:33,440
this is entirely safe because we're

2127
01:17:33,440 --> 01:17:35,840
requiring fixed length secrets um

2128
01:17:35,840 --> 01:17:37,679
and um

2129
01:17:37,679 --> 01:17:38,719
um

2130
01:17:38,719 --> 01:17:40,800
uh so i think what i had in mind was

2131
01:17:40,800 --> 01:17:43,199
imagine we like actually foolishly um

2132
01:17:43,199 --> 01:17:45,520
you know uh a lot of variable like

2133
01:17:45,520 --> 01:17:47,840
secrets but um i think the question that

2134
01:17:47,840 --> 01:17:49,440
you're but i think the question that

2135
01:17:49,440 --> 01:17:51,360
that you're phrasing still is a

2136
01:17:51,360 --> 01:17:52,960
reasonable question because we still

2137
01:17:52,960 --> 01:17:53,920
could have

2138
01:17:53,920 --> 01:17:57,199
we still have the possibility of um

2139
01:17:57,199 --> 01:17:58,560
the of those of the two of the two

2140
01:17:58,560 --> 01:18:01,679
versions you described the existing

2141
01:18:01,679 --> 01:18:04,719
right okay so if if uh if there are two

2142
01:18:04,719 --> 01:18:08,199
modes of operation both of which um are

2143
01:18:08,199 --> 01:18:11,760
secure so where you know

2144
01:18:11,760 --> 01:18:14,239
in the variable length setting there's

2145
01:18:14,239 --> 01:18:16,080
appropriate protection and in the other

2146
01:18:16,080 --> 01:18:18,719
setting it is insured to use fixed

2147
01:18:18,719 --> 01:18:21,679
length my intuition tells me that that

2148
01:18:21,679 --> 01:18:23,120
would be safe that there wouldn't be a

2149
01:18:23,120 --> 01:18:24,880
downgrade route

2150
01:18:24,880 --> 01:18:27,440
if one of them is weak for example

2151
01:18:27,440 --> 01:18:30,400
uh one did allow the one on the screen

2152
01:18:30,400 --> 01:18:33,040
here to be used with variable in secrets

2153
01:18:33,040 --> 01:18:34,159
um

2154
01:18:34,159 --> 01:18:36,960
i believe it would be possible for an

2155
01:18:36,960 --> 01:18:40,560
attacker to attempt to downgrade to that

2156
01:18:40,560 --> 01:18:42,560
including rewriting the transcript

2157
01:18:42,560 --> 01:18:45,199
history to make it appear that

2158
01:18:45,199 --> 01:18:47,440
uh

2159
01:18:47,520 --> 01:18:49,440
one party for example did not support

2160
01:18:49,440 --> 01:18:51,920
this more secure option and therefore

2161
01:18:51,920 --> 01:18:54,480
this one had to be negotiated

2162
01:18:54,480 --> 01:18:55,199
and

2163
01:18:55,199 --> 01:18:56,480
does the signature of the transcript

2164
01:18:56,480 --> 01:18:58,320
help or is the attack already in place

2165
01:18:58,320 --> 01:19:02,239
before the signature is validated

2166
01:19:04,640 --> 01:19:05,580
uh

2167
01:19:05,580 --> 01:19:07,679
[Music]

2168
01:19:07,679 --> 01:19:08,880
sorry this is like a pretty detailed

2169
01:19:08,880 --> 01:19:09,840
question for this early in the morning

2170
01:19:09,840 --> 01:19:12,640
yeah i'm not

2171
01:19:12,640 --> 01:19:13,679
i'm

2172
01:19:13,679 --> 01:19:15,040
i'm not sure off the top of my head how

2173
01:19:15,040 --> 01:19:16,719
the signature validation

2174
01:19:16,719 --> 01:19:20,560
uh ties into that uh i think

2175
01:19:20,560 --> 01:19:21,760
well if the hash function is not

2176
01:19:21,760 --> 01:19:23,920
collision resistant the signature is

2177
01:19:23,920 --> 01:19:26,400
over a hash of the transcript so you

2178
01:19:26,400 --> 01:19:27,920
could have

2179
01:19:27,920 --> 01:19:31,520
right handed to rewrite the hash before

2180
01:19:31,520 --> 01:19:32,960
it was signed

2181
01:19:32,960 --> 01:19:36,080
yeah maybe

2182
01:19:36,080 --> 01:19:37,600
right that would be a potentially a

2183
01:19:37,600 --> 01:19:39,199
pre-image i get okay sorry this is like

2184
01:19:39,199 --> 01:19:40,239
this is like now like a not very

2185
01:19:40,239 --> 01:19:42,320
interesting question so i think the the

2186
01:19:42,320 --> 01:19:44,000
relevant point

2187
01:19:44,000 --> 01:19:45,520
as i take home

2188
01:19:45,520 --> 01:19:47,840
is that if we ever were to

2189
01:19:47,840 --> 01:19:50,880
specify a um

2190
01:19:50,880 --> 01:19:52,320
is it if we were if we were in the

2191
01:19:52,320 --> 01:19:54,239
future to attempt to specify a version

2192
01:19:54,239 --> 01:19:55,920
of this that had

2193
01:19:55,920 --> 01:19:57,120
um

2194
01:19:57,120 --> 01:19:58,480
uh

2195
01:19:58,480 --> 01:20:00,320
sorry if if we were if we were to

2196
01:20:00,320 --> 01:20:03,360
specify um a variant of this

2197
01:20:03,360 --> 01:20:04,480
that

2198
01:20:04,480 --> 01:20:05,520
as you say through potentially through

2199
01:20:05,520 --> 01:20:07,120
padding or whatever

2200
01:20:07,120 --> 01:20:09,600
was was like with length uh we dealt

2201
01:20:09,600 --> 01:20:11,040
with variable length correctly as

2202
01:20:11,040 --> 01:20:13,600
opposed to making the algorithms if we

2203
01:20:13,600 --> 01:20:14,560
had so we have variable length

2204
01:20:14,560 --> 01:20:16,080
algorithms and we have two ways of doing

2205
01:20:16,080 --> 01:20:17,360
that one is the algorithm is fixed

2206
01:20:17,360 --> 01:20:18,960
length under the under the hood and the

2207
01:20:18,960 --> 01:20:20,560
other is to make is to have a version of

2208
01:20:20,560 --> 01:20:22,719
this that is that deals with a variable

2209
01:20:22,719 --> 01:20:24,320
algorithms and if we were to do the

2210
01:20:24,320 --> 01:20:27,199
latter then we have to have a filter in

2211
01:20:27,199 --> 01:20:30,159
the negotiation system that said if that

2212
01:20:30,159 --> 01:20:32,400
that you can't do

2213
01:20:32,400 --> 01:20:35,440
you can't do a hybrid key exchange with

2214
01:20:35,440 --> 01:20:37,840
variable algorithm blah unless you also

2215
01:20:37,840 --> 01:20:40,719
have the new combiners in place um so

2216
01:20:40,719 --> 01:20:41,920
that suggests that we're really

2217
01:20:41,920 --> 01:20:43,199
committing so that's just that as a

2218
01:20:43,199 --> 01:20:44,480
practical matter we're probably really

2219
01:20:44,480 --> 01:20:46,960
committing to having fixed length

2220
01:20:46,960 --> 01:20:48,719
algorithms later because that filter's

2221
01:20:48,719 --> 01:20:50,400
annoying but i mean we had to we could

2222
01:20:50,400 --> 01:20:51,840
if we had to but like that kind of

2223
01:20:51,840 --> 01:20:53,360
pushes us down this this this i think

2224
01:20:53,360 --> 01:20:54,320
it's probably the right answer but i

2225
01:20:54,320 --> 01:20:56,320
just try to think about it

2226
01:20:56,320 --> 01:20:58,239
correct i think so eric

2227
01:20:58,239 --> 01:20:59,280
okay great

2228
01:20:59,280 --> 01:21:01,040
i think this is great sorry i i didn't

2229
01:21:01,040 --> 01:21:02,159
mean to like take us too far in the

2230
01:21:02,159 --> 01:21:03,360
rabbit hole this is great and i think we

2231
01:21:03,360 --> 01:21:04,719
should like go over the work that last

2232
01:21:04,719 --> 01:21:06,159
call

2233
01:21:06,159 --> 01:21:07,760
thanks um

2234
01:21:07,760 --> 01:21:10,880
yeah i i will mention that uh avaram and

2235
01:21:10,880 --> 01:21:13,440
his colleagues did propose a combiner

2236
01:21:13,440 --> 01:21:15,760
that does work with variable lengths uh

2237
01:21:15,760 --> 01:21:18,080
using some more extensive uh hashing

2238
01:21:18,080 --> 01:21:20,320
construction um so it is possible to do

2239
01:21:20,320 --> 01:21:21,920
that at this moment

2240
01:21:21,920 --> 01:21:23,360
um and if the working group prefers to

2241
01:21:23,360 --> 01:21:25,600
do that we can but we did we chose to to

2242
01:21:25,600 --> 01:21:27,760
not uh do this and focus on fixed length

2243
01:21:27,760 --> 01:21:30,000
instead

2244
01:21:30,000 --> 01:21:32,400
thank you

2245
01:21:34,000 --> 01:21:37,120
ah should i go ahead yep go ahead

2246
01:21:37,120 --> 01:21:39,840
uh yeah so hi i'm nimrod i'm one of the

2247
01:21:39,840 --> 01:21:40,960
people that

2248
01:21:40,960 --> 01:21:43,280
are pro and that

2249
01:21:43,280 --> 01:21:45,280
send this email

2250
01:21:45,280 --> 01:21:46,880
um

2251
01:21:46,880 --> 01:21:50,560
i think uh one perspective we can use is

2252
01:21:50,560 --> 01:21:52,639
uh is there an action but actionable

2253
01:21:52,639 --> 01:21:55,840
attack under uh reasonable assumptions

2254
01:21:55,840 --> 01:21:57,840
and some of the assumptions are

2255
01:21:57,840 --> 01:22:00,000
pretty hard to meet

2256
01:22:00,000 --> 01:22:02,480
another perspective we could take is

2257
01:22:02,480 --> 01:22:05,679
uh can we prove the security of this

2258
01:22:05,679 --> 01:22:08,159
and uh

2259
01:22:09,520 --> 01:22:11,600
my understanding of the literature

2260
01:22:11,600 --> 01:22:12,800
around

2261
01:22:12,800 --> 01:22:16,000
uh key combiners is uh it will be very

2262
01:22:16,000 --> 01:22:18,480
hard to prove the security of this whole

2263
01:22:18,480 --> 01:22:19,760
protocol

2264
01:22:19,760 --> 01:22:22,800
uh absent uh assumptions like uh the the

2265
01:22:22,800 --> 01:22:24,320
how horror hash function is like a

2266
01:22:24,320 --> 01:22:26,560
random occur

2267
01:22:26,560 --> 01:22:27,820
so uh

2268
01:22:27,820 --> 01:22:28,960
[Music]

2269
01:22:28,960 --> 01:22:31,199
uh i get that people are not worried

2270
01:22:31,199 --> 01:22:33,920
about this attack and this is fine by me

2271
01:22:33,920 --> 01:22:35,760
i would know that we are kind of backing

2272
01:22:35,760 --> 01:22:36,480
in

2273
01:22:36,480 --> 01:22:38,560
uh something that will be how to prove

2274
01:22:38,560 --> 01:22:39,760
later

2275
01:22:39,760 --> 01:22:41,600
uh so i think we should we might

2276
01:22:41,600 --> 01:22:43,679
consider uh

2277
01:22:43,679 --> 01:22:47,760
like uh how do we expect uh

2278
01:22:47,760 --> 01:22:49,840
to upgrade the key combiner function if

2279
01:22:49,840 --> 01:22:52,639
we ever choose to

2280
01:22:52,639 --> 01:22:55,280
alternatively if we

2281
01:22:55,280 --> 01:22:57,679
if we're saying we don't plan to

2282
01:22:57,679 --> 01:22:58,960
ever come

2283
01:22:58,960 --> 01:23:01,040
up like ever use a different three

2284
01:23:01,040 --> 01:23:03,600
combiner throughout tls 1.3

2285
01:23:03,600 --> 01:23:06,080
uh then we should probably be explicit

2286
01:23:06,080 --> 01:23:08,559
about it

2287
01:23:14,719 --> 01:23:18,800
okay uh yeah thanks nimrod um i i mean

2288
01:23:18,800 --> 01:23:20,159
we've talked about this before so i

2289
01:23:20,159 --> 01:23:21,360
don't know that i have anything to add

2290
01:23:21,360 --> 01:23:23,199
but um yeah

2291
01:23:23,199 --> 01:23:26,159
is there any other questions

2292
01:23:29,760 --> 01:23:32,080
and i think um we'll move to the next

2293
01:23:32,080 --> 01:23:33,120
nicholas

2294
01:23:33,120 --> 01:23:36,239
uh yeah hi uh nitchkowski nsa

2295
01:23:36,239 --> 01:23:38,080
um yeah i just wanted to make a comment

2296
01:23:38,080 --> 01:23:40,639
just to follow up on the um

2297
01:23:40,639 --> 01:23:43,360
working group last call um so like the

2298
01:23:43,360 --> 01:23:45,360
document is a little it's not very

2299
01:23:45,360 --> 01:23:46,400
specific

2300
01:23:46,400 --> 01:23:48,159
on um

2301
01:23:48,159 --> 01:23:50,239
uh reuse of um

2302
01:23:50,239 --> 01:23:52,639
uh keys ephemeral keys

2303
01:23:52,639 --> 01:23:54,400
and you know that that is an issue and

2304
01:23:54,400 --> 01:23:55,920
it does note that is an issue with some

2305
01:23:55,920 --> 01:23:57,840
of the lattice-based

2306
01:23:57,840 --> 01:24:02,000
mechanisms and you know because of um

2307
01:24:02,000 --> 01:24:03,840
um well you know it's it's common with

2308
01:24:03,840 --> 01:24:05,520
the the last space

2309
01:24:05,520 --> 01:24:08,000
protocols and um

2310
01:24:08,000 --> 01:24:10,000
and i guess part of the reason why it's

2311
01:24:10,000 --> 01:24:11,199
kind of

2312
01:24:11,199 --> 01:24:13,840
a little loose on the um

2313
01:24:13,840 --> 01:24:16,320
the guidance i suspect is because we

2314
01:24:16,320 --> 01:24:18,239
don't actually have the specification

2315
01:24:18,239 --> 01:24:20,159
written and how you know certain things

2316
01:24:20,159 --> 01:24:21,280
will be done

2317
01:24:21,280 --> 01:24:23,520
with you know like key encapsulation and

2318
01:24:23,520 --> 01:24:25,600
and and you know

2319
01:24:25,600 --> 01:24:27,600
it just you know we

2320
01:24:27,600 --> 01:24:29,199
this you know they the competition's

2321
01:24:29,199 --> 01:24:31,040
about done you know they have their

2322
01:24:31,040 --> 01:24:32,400
their candidates they have in mind and

2323
01:24:32,400 --> 01:24:34,239
stuff but you don't

2324
01:24:34,239 --> 01:24:36,800
they the details aren't

2325
01:24:36,800 --> 01:24:38,639
aren't you know set and you know they're

2326
01:24:38,639 --> 01:24:40,239
not going to be set until nest writes

2327
01:24:40,239 --> 01:24:42,000
the standard that'll take a little time

2328
01:24:42,000 --> 01:24:43,120
and so

2329
01:24:43,120 --> 01:24:44,400
you know i just you know so i just want

2330
01:24:44,400 --> 01:24:46,719
to stress it's a little early

2331
01:24:46,719 --> 01:24:49,040
because you know you can't even pin down

2332
01:24:49,040 --> 01:24:52,159
you know how how to um

2333
01:24:52,159 --> 01:24:54,880
you know uh handle um

2334
01:24:54,880 --> 01:24:57,920
reuse of keys without you know having

2335
01:24:57,920 --> 01:25:00,320
that other component finalized

2336
01:25:00,320 --> 01:25:01,679
so i just you know just wanted to put

2337
01:25:01,679 --> 01:25:04,159
that out there

2338
01:25:04,800 --> 01:25:07,520
okay yeah so the document uh does not

2339
01:25:07,520 --> 01:25:10,560
say that fml key reuse is prohibited

2340
01:25:10,560 --> 01:25:13,360
because tls 1.3 in fact if my

2341
01:25:13,360 --> 01:25:14,960
instruction is correct does not prohibit

2342
01:25:14,960 --> 01:25:17,520
ephemeral key reuse

2343
01:25:17,520 --> 01:25:19,920
it does

2344
01:25:19,920 --> 01:25:22,719
permit ephemeral key reuse

2345
01:25:22,719 --> 01:25:26,000
which is viable under the cca security

2346
01:25:26,000 --> 01:25:28,719
definition for chems

2347
01:25:28,719 --> 01:25:30,719
the document does clearly state that the

2348
01:25:30,719 --> 01:25:33,360
use reuse of randomness in chem

2349
01:25:33,360 --> 01:25:36,320
ciphertext generation is prohibited

2350
01:25:36,320 --> 01:25:38,239
which is also kind of compatible with

2351
01:25:38,239 --> 01:25:40,560
the cca2 security definition

2352
01:25:40,560 --> 01:25:43,600
in the nist competition

2353
01:25:47,679 --> 01:25:49,679
okay namara did you have a final comment

2354
01:25:49,679 --> 01:25:51,199
or are you next in the queue you're next

2355
01:25:51,199 --> 01:25:53,199
in the queue okay

2356
01:25:53,199 --> 01:25:55,520
all right thank you douglas

2357
01:25:55,520 --> 01:25:57,920
thank you

2358
01:26:01,679 --> 01:26:05,960
your slide should be up shortly

2359
01:26:09,760 --> 01:26:12,000
okay we can see the slides here

2360
01:26:12,000 --> 01:26:14,560
all right and everyone can hear me right

2361
01:26:14,560 --> 01:26:15,600
yes

2362
01:26:15,600 --> 01:26:16,800
all right

2363
01:26:16,800 --> 01:26:19,120
so hi everyone uh my name is nimboda

2364
01:26:19,120 --> 01:26:21,440
viram ah my co-author cake battle is

2365
01:26:21,440 --> 01:26:23,679
also here virtually and we would like to

2366
01:26:23,679 --> 01:26:25,679
deprecate obsolete key exchange methods

2367
01:26:25,679 --> 01:26:28,320
in tls

2368
01:26:29,440 --> 01:26:32,080
what this document does is it deprecates

2369
01:26:32,080 --> 01:26:34,239
rsa key exchange and static finite field

2370
01:26:34,239 --> 01:26:35,679
diffie-hellman

2371
01:26:35,679 --> 01:26:37,840
limits finite sphere defiantly in its

2372
01:26:37,840 --> 01:26:40,080
ephemeral form to only reasonable groups

2373
01:26:40,080 --> 01:26:42,000
with sufficient security

2374
01:26:42,000 --> 01:26:44,560
and it discourages a static elliptical

2375
01:26:44,560 --> 01:26:47,199
difference

2376
01:26:47,920 --> 01:26:49,840
for those keeping score at home this

2377
01:26:49,840 --> 01:26:51,600
version came out of merging two separate

2378
01:26:51,600 --> 01:26:53,840
documents that were presented at

2379
01:26:53,840 --> 01:26:56,639
previous meetings

2380
01:26:57,440 --> 01:26:59,040
as we've argued in those previous

2381
01:26:59,040 --> 01:27:02,480
meetings this would be fully practical

2382
01:27:02,480 --> 01:27:04,560
for the web it's consistent with

2383
01:27:04,560 --> 01:27:06,800
mozilla's service id last guide and

2384
01:27:06,800 --> 01:27:08,639
would be compatible with

2385
01:27:08,639 --> 01:27:10,639
almost every web client release since

2386
01:27:10,639 --> 01:27:13,679
around 2015.

2387
01:27:13,760 --> 01:27:16,239
um for email the picture is more

2388
01:27:16,239 --> 01:27:17,679
complicated

2389
01:27:17,679 --> 01:27:19,520
however we would know that email

2390
01:27:19,520 --> 01:27:21,280
encryption is largely opportunistic

2391
01:27:21,280 --> 01:27:22,159
anyway

2392
01:27:22,159 --> 01:27:23,120
and

2393
01:27:23,120 --> 01:27:24,960
previous discussions in this working

2394
01:27:24,960 --> 01:27:27,440
group seem to conclude that we should

2395
01:27:27,440 --> 01:27:29,199
move forward with this

2396
01:27:29,199 --> 01:27:31,360
as the alternative would be to

2397
01:27:31,360 --> 01:27:34,080
allow problems with other ecosystems to

2398
01:27:34,080 --> 01:27:36,639
affect the web

2399
01:27:36,639 --> 01:27:37,679
um

2400
01:27:37,679 --> 01:27:39,920
the approach of letting other market

2401
01:27:39,920 --> 01:27:42,719
segments be because no it does not

2402
01:27:42,719 --> 01:27:45,040
isolate the web from potential security

2403
01:27:45,040 --> 01:27:47,120
arms

2404
01:27:47,120 --> 01:27:49,679
for example consider drown

2405
01:27:49,679 --> 01:27:53,280
a black-and-white attack from 2016.

2406
01:27:53,280 --> 01:27:53,720
um

2407
01:27:53,720 --> 01:27:55,040
[Music]

2408
01:27:55,040 --> 01:27:56,080
17

2409
01:27:56,080 --> 01:27:59,440
of web servers were uh affected because

2410
01:27:59,440 --> 01:28:02,239
they were directly vulnerable

2411
01:28:02,239 --> 01:28:04,560
and an additional 16 percent of web

2412
01:28:04,560 --> 01:28:05,679
servers

2413
01:28:05,679 --> 01:28:08,719
were affected because they shared an rsa

2414
01:28:08,719 --> 01:28:09,840
key

2415
01:28:09,840 --> 01:28:12,320
with a different vulnerable service on

2416
01:28:12,320 --> 01:28:14,320
another host of ports and these were

2417
01:28:14,320 --> 01:28:17,599
mostly email posts

2418
01:28:18,000 --> 01:28:20,800
uh these types of attacks like

2419
01:28:20,800 --> 01:28:23,600
blackenbach type attacks allow

2420
01:28:23,600 --> 01:28:25,600
rsa signature 4g

2421
01:28:25,600 --> 01:28:27,360
and the forged signature can then be

2422
01:28:27,360 --> 01:28:29,360
used for a man in the middle attack

2423
01:28:29,360 --> 01:28:31,920
against web clients and hosts

2424
01:28:31,920 --> 01:28:34,800
even if they don't support rsa at all

2425
01:28:34,800 --> 01:28:37,440
so even fully deprecating rsa key

2426
01:28:37,440 --> 01:28:39,840
exchange from the entire web in and of

2427
01:28:39,840 --> 01:28:42,239
itself would not isolate the web from

2428
01:28:42,239 --> 01:28:45,599
problems with rsa

2429
01:28:48,239 --> 01:28:50,880
this is obviously in addition to the

2430
01:28:50,880 --> 01:28:53,679
usual problems with rsa namely there's

2431
01:28:53,679 --> 01:28:56,719
no forward secrecy and the risk of a

2432
01:28:56,719 --> 01:28:59,040
direct form of blackenbacher's attack

2433
01:28:59,040 --> 01:29:00,719
which practically happens every few

2434
01:29:00,719 --> 01:29:05,040
years uh even without kyries

2435
01:29:06,719 --> 01:29:09,840
for uh finite field diffie-hellman

2436
01:29:09,840 --> 01:29:12,239
the document merely requires the minimum

2437
01:29:12,239 --> 01:29:14,719
properties

2438
01:29:14,719 --> 01:29:17,360
that guarantee security that is for

2439
01:29:17,360 --> 01:29:19,840
ephemerality appropriate group size and

2440
01:29:19,840 --> 01:29:23,639
appropriate group structure

2441
01:29:25,120 --> 01:29:26,960
uh as for static elliptical

2442
01:29:26,960 --> 01:29:29,360
diffie-hellman uh these siphon suits

2443
01:29:29,360 --> 01:29:31,679
don't provide forward secrecy so they

2444
01:29:31,679 --> 01:29:35,199
are already listed as not recommended

2445
01:29:35,199 --> 01:29:37,920
and also uh because they reuse secrets

2446
01:29:37,920 --> 01:29:40,000
this opens the door uh

2447
01:29:40,000 --> 01:29:42,000
for a class of attacks that

2448
01:29:42,000 --> 01:29:44,560
uh exploit the secret reuse to gradually

2449
01:29:44,560 --> 01:29:46,800
learn uh cryptographic secrets and we've

2450
01:29:46,800 --> 01:29:50,159
had quite a few of those over the years

2451
01:29:50,159 --> 01:29:52,719
uh however uh

2452
01:29:52,719 --> 01:29:55,520
we we have in the document static ecdh

2453
01:29:55,520 --> 01:29:58,560
merely as it should not

2454
01:30:00,400 --> 01:30:03,280
um this version tries to incorporate uh

2455
01:30:03,280 --> 01:30:05,360
everyone's useful feedback from previous

2456
01:30:05,360 --> 01:30:07,600
discussions uh several people have

2457
01:30:07,600 --> 01:30:10,320
argued that we should uh deprecate rsa

2458
01:30:10,320 --> 01:30:12,400
key exchange in parallel to uh

2459
01:30:12,400 --> 01:30:14,159
deprecating uh

2460
01:30:14,159 --> 01:30:16,880
static ffdh

2461
01:30:16,880 --> 01:30:18,400
and we've done so by merging the

2462
01:30:18,400 --> 01:30:20,800
documents

2463
01:30:20,800 --> 01:30:22,719
some people have argued for full

2464
01:30:22,719 --> 01:30:25,600
deprecation of ffdhg even when fully

2465
01:30:25,600 --> 01:30:28,800
ephemeral and

2466
01:30:28,960 --> 01:30:31,040
it did not appeal to me those consensus

2467
01:30:31,040 --> 01:30:32,080
for this

2468
01:30:32,080 --> 01:30:34,000
and i would argue this is probably

2469
01:30:34,000 --> 01:30:35,600
unnecessary

2470
01:30:35,600 --> 01:30:38,000
uh because the requirements in the

2471
01:30:38,000 --> 01:30:41,040
document should be enough to provide

2472
01:30:41,040 --> 01:30:42,560
security

2473
01:30:42,560 --> 01:30:43,520
uh

2474
01:30:43,520 --> 01:30:47,840
ffdhe is not mandatory to implement and

2475
01:30:47,840 --> 01:30:50,480
implementations are free to draw support

2476
01:30:50,480 --> 01:30:53,120
as most web implementations have already

2477
01:30:53,120 --> 01:30:54,400
done

2478
01:30:54,400 --> 01:30:55,199
um

2479
01:30:55,199 --> 01:30:56,560
and we can make it explicit in the

2480
01:30:56,560 --> 01:30:58,400
documents that uh in the document that

2481
01:30:58,400 --> 01:30:59,760
the implementations are free to not

2482
01:30:59,760 --> 01:31:02,560
support uh ffdhg at all

2483
01:31:02,560 --> 01:31:05,440
but if someone needs ffdhe and can

2484
01:31:05,440 --> 01:31:07,679
operate it securely

2485
01:31:07,679 --> 01:31:09,840
which is kind of equivalent to

2486
01:31:09,840 --> 01:31:11,600
equivalent to the requirements in the

2487
01:31:11,600 --> 01:31:14,000
document then i would argue we should

2488
01:31:14,000 --> 01:31:16,719
probably allow it

2489
01:31:16,719 --> 01:31:20,080
and as for the last bullet point um

2490
01:31:20,080 --> 01:31:23,120
we still have a few open questions

2491
01:31:23,120 --> 01:31:25,040
around ffdhe

2492
01:31:25,040 --> 01:31:27,440
namely how would the client verify that

2493
01:31:27,440 --> 01:31:29,440
the group is safe and what it would do

2494
01:31:29,440 --> 01:31:31,040
if it can't verify that the group is

2495
01:31:31,040 --> 01:31:32,159
safe

2496
01:31:32,159 --> 01:31:34,560
um i think we can sort those out on the

2497
01:31:34,560 --> 01:31:37,280
mailing list but uh if any if anyone

2498
01:31:37,280 --> 01:31:38,960
feels otherwise that it should be

2499
01:31:38,960 --> 01:31:40,320
discussed during this meeting then

2500
01:31:40,320 --> 01:31:43,040
please pick up

2501
01:31:43,280 --> 01:31:45,600
that's it for me and i'm happy to take

2502
01:31:45,600 --> 01:31:48,639
questions thanks

2503
01:31:57,520 --> 01:32:00,800
you off yeah god

2504
01:32:06,400 --> 01:32:10,159
i'm sorry i don't think we can hear you

2505
01:32:10,800 --> 01:32:13,440
um

2506
01:32:13,440 --> 01:32:16,400
okay um so there was a conversation on

2507
01:32:16,400 --> 01:32:19,040
the jabra room uh this looks like an

2508
01:32:19,040 --> 01:32:22,159
update of uh rfc 7525 it's

2509
01:32:22,159 --> 01:32:24,880
recommendations for how to use tls

2510
01:32:24,880 --> 01:32:26,639
which is really more about configuration

2511
01:32:26,639 --> 01:32:27,440
because

2512
01:32:27,440 --> 01:32:28,239
um

2513
01:32:28,239 --> 01:32:31,120
i assume this is all about tls 1.2 and

2514
01:32:31,120 --> 01:32:33,920
lower because 1.3 already deprecated all

2515
01:32:33,920 --> 01:32:35,920
these things

2516
01:32:35,920 --> 01:32:37,040
so

2517
01:32:37,040 --> 01:32:41,040
utah wrote this rfc 7525 about uh how

2518
01:32:41,040 --> 01:32:44,480
you should configure uh your tls 1.2 and

2519
01:32:44,480 --> 01:32:45,600
lower and

2520
01:32:45,600 --> 01:32:46,560
uh

2521
01:32:46,560 --> 01:32:48,719
if you want to revise that one that's

2522
01:32:48,719 --> 01:32:49,840
also

2523
01:32:49,840 --> 01:32:51,920
a great idea i don't think you should

2524
01:32:51,920 --> 01:32:52,840
just

2525
01:32:52,840 --> 01:32:54,480
um

2526
01:32:54,480 --> 01:32:55,920
deprecate

2527
01:32:55,920 --> 01:32:58,000
the protocols one by one or the

2528
01:32:58,000 --> 01:32:59,920
algorithms one by one

2529
01:32:59,920 --> 01:33:02,960
rather than put it in this big

2530
01:33:02,960 --> 01:33:07,040
how to configure tls 1.2 document

2531
01:33:07,040 --> 01:33:10,480
um you do you imagine a scenario

2532
01:33:10,480 --> 01:33:11,280
well

2533
01:33:11,280 --> 01:33:13,920
someone would uh

2534
01:33:13,920 --> 01:33:16,480
use our uh rsa kxg or

2535
01:33:16,480 --> 01:33:18,639
say static finite 3d film

2536
01:33:18,639 --> 01:33:20,880
uh do you imagine a scenario someone

2537
01:33:20,880 --> 01:33:23,199
uses

2538
01:33:30,320 --> 01:33:32,239
just saying that this sounds like part

2539
01:33:32,239 --> 01:33:34,000
of what utah

2540
01:33:34,000 --> 01:33:36,320
has been doing rather than something

2541
01:33:36,320 --> 01:33:37,679
that uh

2542
01:33:37,679 --> 01:33:41,679
this working group is should work on

2543
01:33:41,920 --> 01:33:43,040
um

2544
01:33:43,040 --> 01:33:46,000
i think that's a valid point so

2545
01:33:46,000 --> 01:33:47,520
uh

2546
01:33:47,520 --> 01:33:49,440
like if we think that an algorithm is

2547
01:33:49,440 --> 01:33:52,480
broken uh do do we treat that as the

2548
01:33:52,480 --> 01:33:54,800
configuration knob that someone would

2549
01:33:54,800 --> 01:33:56,400
configure or do we

2550
01:33:56,400 --> 01:33:58,080
say this is broken

2551
01:33:58,080 --> 01:34:00,400
well i think i'm not going to fix open a

2552
01:34:00,400 --> 01:34:05,280
cell 0 9 8 to get tls 1.2 safer and

2553
01:34:05,280 --> 01:34:07,120
people either upgrade to the latest

2554
01:34:07,120 --> 01:34:10,400
openssl and get 1.3 or they configure

2555
01:34:10,400 --> 01:34:13,280
their 098 to not have

2556
01:34:13,280 --> 01:34:14,239
um

2557
01:34:14,239 --> 01:34:16,480
do not have bad stuff so that it looks

2558
01:34:16,480 --> 01:34:19,120
to me like the what you're specifying is

2559
01:34:19,120 --> 01:34:21,840
how to configure rather than um

2560
01:34:21,840 --> 01:34:25,040
changing the protocol

2561
01:34:25,360 --> 01:34:26,400
all right

2562
01:34:26,400 --> 01:34:29,559
thank you

2563
01:34:32,000 --> 01:34:32,880
um

2564
01:34:32,880 --> 01:34:36,800
david benjamin why don't you go ahead

2565
01:34:37,920 --> 01:34:39,440
hi uh

2566
01:34:39,440 --> 01:34:41,280
so i think like oh i mean maybe we

2567
01:34:41,280 --> 01:34:42,639
should all like i don't know utah is

2568
01:34:42,639 --> 01:34:44,320
also a place to do this but we have had

2569
01:34:44,320 --> 01:34:46,400
other drafts in this working group to

2570
01:34:46,400 --> 01:34:49,119
deprecate things that are broken uh we

2571
01:34:49,119 --> 01:34:51,920
recently published 9155 which is like

2572
01:34:51,920 --> 01:34:53,840
sha-1 and md5

2573
01:34:53,840 --> 01:34:56,199
i think we also deprecated deprecated

2574
01:34:56,199 --> 01:34:59,440
tls-1011 and we had rc4 before that so i

2575
01:34:59,440 --> 01:35:00,560
think this is

2576
01:35:00,560 --> 01:35:02,719
at least consistent with what we've done

2577
01:35:02,719 --> 01:35:05,679
historically um i don't if we want to do

2578
01:35:05,679 --> 01:35:07,119
something different from historical

2579
01:35:07,119 --> 01:35:08,800
things that's fine but otherwise i think

2580
01:35:08,800 --> 01:35:12,719
this draft is perfectly reasonable

2581
01:35:12,719 --> 01:35:15,719
thanks

2582
01:35:16,000 --> 01:35:20,400
oh by the way also uh i spoke with um uh

2583
01:35:20,400 --> 01:35:22,159
someone on the youtube group whose name

2584
01:35:22,159 --> 01:35:25,040
escapes me and they said

2585
01:35:25,040 --> 01:35:27,520
they would want

2586
01:35:27,520 --> 01:35:30,480
like our working group to um

2587
01:35:30,480 --> 01:35:32,480
to first deprecate uh

2588
01:35:32,480 --> 01:35:35,119
some algorithms before uh saying

2589
01:35:35,119 --> 01:35:36,639
uh before

2590
01:35:36,639 --> 01:35:39,360
uh disrecommending them

2591
01:35:39,360 --> 01:35:40,960
yeah they're selling that

2592
01:35:40,960 --> 01:35:45,040
uh was there anyone else on the queue

2593
01:35:46,880 --> 01:35:50,400
are you wrong yeah yeah

2594
01:35:52,320 --> 01:35:54,320
yeah

2595
01:35:54,320 --> 01:35:58,320
it's a call on 75 25

2596
01:35:58,320 --> 01:36:00,000
25

2597
01:36:00,000 --> 01:36:01,600
i think that

2598
01:36:01,600 --> 01:36:04,960
what you just said

2599
01:36:04,960 --> 01:36:08,000
misrepresents the concerns of the

2600
01:36:08,000 --> 01:36:09,920
authors and i believe of

2601
01:36:09,920 --> 01:36:12,159
the working group

2602
01:36:12,159 --> 01:36:13,679
7525

2603
01:36:13,679 --> 01:36:16,000
has deprecated stuff

2604
01:36:16,000 --> 01:36:19,920
that wasn't necessarily

2605
01:36:19,920 --> 01:36:22,480
like certain stone by the pls working

2606
01:36:22,480 --> 01:36:23,360
group

2607
01:36:23,360 --> 01:36:25,840
and i totally agree with you

2608
01:36:25,840 --> 01:36:26,719
that

2609
01:36:26,719 --> 01:36:29,280
yes in the past we've had

2610
01:36:29,280 --> 01:36:30,639
a

2611
01:36:30,639 --> 01:36:33,360
duplication of work between the tls

2612
01:36:33,360 --> 01:36:36,840
working group and the utah working group

2613
01:36:36,840 --> 01:36:40,239
and and it's time to stop it

2614
01:36:40,239 --> 01:36:41,600
thank you

2615
01:36:41,600 --> 01:36:43,040
i'm sorry could you repeat that last

2616
01:36:43,040 --> 01:36:45,199
sentence

2617
01:36:45,199 --> 01:36:47,360
in the past we've had

2618
01:36:47,360 --> 01:36:49,679
duplication of work

2619
01:36:49,679 --> 01:36:53,360
between the tls working group and

2620
01:36:53,360 --> 01:36:55,679
and the utah working group

2621
01:36:55,679 --> 01:36:58,400
and so in some cases it was warranted i

2622
01:36:58,400 --> 01:37:01,440
think it was in fact up to the dls

2623
01:37:01,440 --> 01:37:03,840
working group to deprecate earlier

2624
01:37:03,840 --> 01:37:07,600
versions of tls but for the smaller

2625
01:37:07,600 --> 01:37:09,119
stuff

2626
01:37:09,119 --> 01:37:10,800
i think it would have been better for

2627
01:37:10,800 --> 01:37:12,960
everybody including the customers of

2628
01:37:12,960 --> 01:37:14,960
these documents

2629
01:37:14,960 --> 01:37:18,400
if we had done the work once

2630
01:37:18,400 --> 01:37:22,320
and right now um

2631
01:37:23,040 --> 01:37:24,400
the right

2632
01:37:24,400 --> 01:37:27,920
forum for that is in my opinion

2633
01:37:27,920 --> 01:37:30,480
and the right venue for that is utah and

2634
01:37:30,480 --> 01:37:35,760
specifically 75 to and 25 base

2635
01:37:35,760 --> 01:37:38,560
all right thank you

2636
01:37:40,480 --> 01:37:43,119
uh i guess we're done with the queue

2637
01:37:43,119 --> 01:37:45,119
uh do i need to

2638
01:37:45,119 --> 01:37:46,159
uh

2639
01:37:46,159 --> 01:37:48,560
stop showing

2640
01:37:48,560 --> 01:37:53,679
uh give his oh okay panos is next okay

2641
01:37:53,920 --> 01:37:56,320
yeah i think um

2642
01:37:56,320 --> 01:37:59,040
uh chairs we'll have to we can discuss

2643
01:37:59,040 --> 01:38:01,280
with you to chairs and see uh how to

2644
01:38:01,280 --> 01:38:02,639
proceed

2645
01:38:02,639 --> 01:38:06,199
all right thank you

2646
01:38:24,719 --> 01:38:26,639
folks hopefully you can hear me let me

2647
01:38:26,639 --> 01:38:28,159
know if you can

2648
01:38:28,159 --> 01:38:31,839
oh you're very faint

2649
01:38:33,520 --> 01:38:37,800
let me try to change my source

2650
01:38:56,159 --> 01:38:58,800
how about now

2651
01:38:58,800 --> 01:39:01,040
still faint

2652
01:39:01,040 --> 01:39:03,040
yeah i think how do can people in the

2653
01:39:03,040 --> 01:39:05,119
room here

2654
01:39:05,119 --> 01:39:06,960
still kind of faint

2655
01:39:06,960 --> 01:39:09,440
let me let me restart the browser one

2656
01:39:09,440 --> 01:39:12,440
second

2657
01:39:38,960 --> 01:39:40,639
i'm back hopefully you can you folks can

2658
01:39:40,639 --> 01:39:42,719
hear me now much better

2659
01:39:42,719 --> 01:39:44,560
all right

2660
01:39:44,560 --> 01:39:47,920
it was the headset

2661
01:39:47,920 --> 01:39:50,560
all right uh

2662
01:39:50,560 --> 01:39:51,920
hello everyone my name is panus

2663
01:39:51,920 --> 01:39:55,040
campanakis with aws and i'm here to talk

2664
01:39:55,040 --> 01:39:57,840
about a new draft we submitted about a

2665
01:39:57,840 --> 01:39:59,119
month back

2666
01:39:59,119 --> 01:40:02,400
with my co-authors martin

2667
01:40:02,400 --> 01:40:04,159
bass and cameron

2668
01:40:04,159 --> 01:40:06,719
so this draft is practically

2669
01:40:06,719 --> 01:40:09,520
an attempt to revive martin's

2670
01:40:09,520 --> 01:40:10,960
old

2671
01:40:10,960 --> 01:40:13,199
tls suppression draft from three years

2672
01:40:13,199 --> 01:40:15,520
back i think

2673
01:40:15,520 --> 01:40:17,040
and

2674
01:40:17,040 --> 01:40:18,239
you know

2675
01:40:18,239 --> 01:40:19,840
it's a draft that

2676
01:40:19,840 --> 01:40:21,760
tries to address a well-known

2677
01:40:21,760 --> 01:40:24,080
well-understood problem

2678
01:40:24,080 --> 01:40:26,080
basically we all know that

2679
01:40:26,080 --> 01:40:29,040
tls is heavy on authentication data

2680
01:40:29,040 --> 01:40:31,199
we know that it includes

2681
01:40:31,199 --> 01:40:34,000
a bunch of signatures and public keys

2682
01:40:34,000 --> 01:40:36,080
that are that come down as part of the

2683
01:40:36,080 --> 01:40:37,679
certificate

2684
01:40:37,679 --> 01:40:39,600
and the identity certificate and the

2685
01:40:39,600 --> 01:40:41,040
certificate chain

2686
01:40:41,040 --> 01:40:43,280
to authenticate the identity

2687
01:40:43,280 --> 01:40:45,119
we know that it includes certificate

2688
01:40:45,119 --> 01:40:47,119
verification signature

2689
01:40:47,119 --> 01:40:48,960
if it's if it's

2690
01:40:48,960 --> 01:40:51,199
for the web we know it includes two or

2691
01:40:51,199 --> 01:40:53,040
more scts

2692
01:40:53,040 --> 01:40:56,080
and in some cases it includes an all csp

2693
01:40:56,080 --> 01:40:57,280
staple

2694
01:40:57,280 --> 01:40:59,119
signature so we know that there are a

2695
01:40:59,119 --> 01:41:00,800
bunch of signatures and public keys

2696
01:41:00,800 --> 01:41:03,440
included in these handshakes

2697
01:41:03,440 --> 01:41:06,719
and that could introduce issues for some

2698
01:41:06,719 --> 01:41:08,320
use cases

2699
01:41:08,320 --> 01:41:10,000
so

2700
01:41:10,000 --> 01:41:11,679
basically for in for the post-quantum

2701
01:41:11,679 --> 01:41:14,719
use case um all post-quantum signatures

2702
01:41:14,719 --> 01:41:15,520
that are

2703
01:41:15,520 --> 01:41:17,119
being considered for standard

2704
01:41:17,119 --> 01:41:19,600
standardization by nist

2705
01:41:19,600 --> 01:41:20,400
have

2706
01:41:20,400 --> 01:41:23,520
relatively big public keys and

2707
01:41:23,520 --> 01:41:24,719
signatures

2708
01:41:24,719 --> 01:41:25,920
so

2709
01:41:25,920 --> 01:41:28,239
you know that could lead to

2710
01:41:28,239 --> 01:41:30,080
10 or more kilobytes

2711
01:41:30,080 --> 01:41:32,320
of data increases in tls for

2712
01:41:32,320 --> 01:41:34,000
authentication

2713
01:41:34,000 --> 01:41:35,040
which

2714
01:41:35,040 --> 01:41:37,760
could lead to tls slowdowns

2715
01:41:37,760 --> 01:41:40,080
there has been research

2716
01:41:40,080 --> 01:41:41,360
there have been research papers

2717
01:41:41,360 --> 01:41:44,639
published on this and and past published

2718
01:41:44,639 --> 01:41:47,280
a very good blog post where he he tested

2719
01:41:47,280 --> 01:41:48,400
um

2720
01:41:48,400 --> 01:41:50,239
big big certificates and certificate

2721
01:41:50,239 --> 01:41:52,080
chains and and he proved that if we go

2722
01:41:52,080 --> 01:41:53,920
over 10k

2723
01:41:53,920 --> 01:41:55,440
then we start seeing double digit

2724
01:41:55,440 --> 01:41:57,040
slowdowns

2725
01:41:57,040 --> 01:41:58,480
so there could be some slowdowns

2726
01:41:58,480 --> 01:42:01,600
introduced by post quantum signatures

2727
01:42:01,600 --> 01:42:02,960
and also

2728
01:42:02,960 --> 01:42:03,920
um

2729
01:42:03,920 --> 01:42:07,280
quake would would would see

2730
01:42:07,280 --> 01:42:09,600
and at least one extra round trip

2731
01:42:09,600 --> 01:42:12,400
because of its amplification protection

2732
01:42:12,400 --> 01:42:14,560
uh when we're talking about

2733
01:42:14,560 --> 01:42:16,960
invalid you know ip addresses that have

2734
01:42:16,960 --> 01:42:18,880
not been validated yet

2735
01:42:18,880 --> 01:42:19,600
so

2736
01:42:19,600 --> 01:42:21,920
quake would see extra round trips there

2737
01:42:21,920 --> 01:42:24,000
because of these public keys and

2738
01:42:24,000 --> 01:42:26,400
signatures

2739
01:42:26,400 --> 01:42:28,000
there are also some other use cases that

2740
01:42:28,000 --> 01:42:30,800
are discussed in the emu

2741
01:42:30,800 --> 01:42:34,480
work group that deal with epls and

2742
01:42:34,480 --> 01:42:36,080
big signatures

2743
01:42:36,080 --> 01:42:38,880
and the issues they could bring

2744
01:42:38,880 --> 01:42:40,880
in these use cases

2745
01:42:40,880 --> 01:42:42,719
so um

2746
01:42:42,719 --> 01:42:44,480
john matson has these drafts and he has

2747
01:42:44,480 --> 01:42:46,960
talked about this before

2748
01:42:46,960 --> 01:42:49,760
and finally i've seen some use cases in

2749
01:42:49,760 --> 01:42:51,840
in mesh networks where they're

2750
01:42:51,840 --> 01:42:55,360
constrained mediums and you know we have

2751
01:42:55,360 --> 01:42:57,840
certificate chains could cause slowdowns

2752
01:42:57,840 --> 01:42:59,920
there where the medium is constrained

2753
01:42:59,920 --> 01:43:02,400
and everyone is fighting over

2754
01:43:02,400 --> 01:43:05,199
just a little bit of bandwidth

2755
01:43:05,199 --> 01:43:07,199
someone could argue that ctls tries to

2756
01:43:07,199 --> 01:43:10,239
address that that issue there as well so

2757
01:43:10,239 --> 01:43:12,000
that that's the premise that that's the

2758
01:43:12,000 --> 01:43:15,280
idea behind the draft

2759
01:43:16,719 --> 01:43:17,920
and um

2760
01:43:17,920 --> 01:43:20,080
the solution that we're proposing

2761
01:43:20,080 --> 01:43:23,760
uh it's it's using um

2762
01:43:23,760 --> 01:43:26,960
the tls flags draft in order to signal

2763
01:43:26,960 --> 01:43:30,560
ica suppression to the peer so basically

2764
01:43:30,560 --> 01:43:32,560
we require um

2765
01:43:32,560 --> 01:43:35,199
to to pre-acquire a fresh

2766
01:43:35,199 --> 01:43:36,880
ica list

2767
01:43:36,880 --> 01:43:38,960
that's the list of icas that someone

2768
01:43:38,960 --> 01:43:40,639
would use to verify

2769
01:43:40,639 --> 01:43:42,320
the peers chain

2770
01:43:42,320 --> 01:43:45,440
and we cri required for it to be fresh

2771
01:43:45,440 --> 01:43:48,080
in order to avoid failures you know in

2772
01:43:48,080 --> 01:43:50,400
case that we have entries that are

2773
01:43:50,400 --> 01:43:52,400
expired and that shouldn't be used that

2774
01:43:52,400 --> 01:43:53,760
they're old

2775
01:43:53,760 --> 01:43:55,679
um so

2776
01:43:55,679 --> 01:43:57,440
we first get use a

2777
01:43:57,440 --> 01:44:01,119
an ica chain an ica list which

2778
01:44:01,119 --> 01:44:04,159
pre-load let's say on the client

2779
01:44:04,159 --> 01:44:05,600
and

2780
01:44:05,600 --> 01:44:07,520
then you know the client could signal to

2781
01:44:07,520 --> 01:44:10,639
the peer using a tls flag to say you

2782
01:44:10,639 --> 01:44:12,719
know don't send me your intermediate cas

2783
01:44:12,719 --> 01:44:16,880
and and that way alleviate the protocol

2784
01:44:17,360 --> 01:44:20,239
while we're proposing this

2785
01:44:20,239 --> 01:44:22,080
it's for the post quantum use case we

2786
01:44:22,080 --> 01:44:23,440
know the post quantum use case would

2787
01:44:23,440 --> 01:44:26,239
suffer so you know using a mechanism

2788
01:44:26,239 --> 01:44:27,920
like that

2789
01:44:27,920 --> 01:44:29,920
would keep the authentication data

2790
01:44:29,920 --> 01:44:32,159
within a limit that's relatively

2791
01:44:32,159 --> 01:44:34,480
acceptable based on testing

2792
01:44:34,480 --> 01:44:36,080
so it would save

2793
01:44:36,080 --> 01:44:38,800
one and a half or three kilobytes if

2794
01:44:38,800 --> 01:44:41,440
we're talking about one ica

2795
01:44:41,440 --> 01:44:45,280
and if we're talking for nist's

2796
01:44:45,360 --> 01:44:47,679
leanest two

2797
01:44:47,679 --> 01:44:49,679
signature finalists you know if we're

2798
01:44:49,679 --> 01:44:51,360
talking about other signatures it it's

2799
01:44:51,360 --> 01:44:52,880
even more

2800
01:44:52,880 --> 01:44:55,199
or it would save three three kilobytes

2801
01:44:55,199 --> 01:44:57,119
or six kilobytes if we're talking about

2802
01:44:57,119 --> 01:45:00,080
two intermediate days for nist's

2803
01:45:00,080 --> 01:45:01,360
round three

2804
01:45:01,360 --> 01:45:04,239
leanest post quantum signatures

2805
01:45:04,239 --> 01:45:06,960
so you know it it helps a little bit the

2806
01:45:06,960 --> 01:45:09,679
the post quantum use case it also helps

2807
01:45:09,679 --> 01:45:12,400
the emu use cases that i mentioned

2808
01:45:12,400 --> 01:45:13,760
earlier

2809
01:45:13,760 --> 01:45:15,520
we also have to say that we consider

2810
01:45:15,520 --> 01:45:17,840
this low hanging fruit

2811
01:45:17,840 --> 01:45:21,119
it's a relatively easy mechanism

2812
01:45:21,119 --> 01:45:23,119
that can be and

2813
01:45:23,119 --> 01:45:24,480
it doesn't require

2814
01:45:24,480 --> 01:45:29,239
great redesigns of protocols and stuff

2815
01:45:30,080 --> 01:45:32,159
so we wanted to give a little bit of

2816
01:45:32,159 --> 01:45:36,400
data on the icas or the ica list

2817
01:45:36,400 --> 01:45:37,360
so

2818
01:45:37,360 --> 01:45:40,000
if we're talking about web pki

2819
01:45:40,000 --> 01:45:42,480
the total number of intermediate cas

2820
01:45:42,480 --> 01:45:45,440
would be around a thousand or let's say

2821
01:45:45,440 --> 01:45:48,960
1500 intermediate cas in the list that

2822
01:45:48,960 --> 01:45:51,360
we would need to to keep

2823
01:45:51,360 --> 01:45:53,280
and that could amount to

2824
01:45:53,280 --> 01:45:55,520
one or two megabytes

2825
01:45:55,520 --> 01:45:57,040
of compressed

2826
01:45:57,040 --> 01:45:58,960
data that would have to live on the

2827
01:45:58,960 --> 01:46:00,000
client

2828
01:46:00,000 --> 01:46:02,239
or on the verify let's say

2829
01:46:02,239 --> 01:46:03,920
so these are not i mean these are

2830
01:46:03,920 --> 01:46:05,520
manageable numbers they're not too big

2831
01:46:05,520 --> 01:46:07,199
numbers for for

2832
01:46:07,199 --> 01:46:09,679
most use cases

2833
01:46:09,679 --> 01:46:11,520
and and also at this point i had to say

2834
01:46:11,520 --> 01:46:13,119
i i have to mention that if we're

2835
01:46:13,119 --> 01:46:16,400
talking about the non-web pki use case

2836
01:46:16,400 --> 01:46:19,199
and the the ica list does not even have

2837
01:46:19,199 --> 01:46:20,320
to be

2838
01:46:20,320 --> 01:46:22,960
statically pre-loaded and defined there

2839
01:46:22,960 --> 01:46:24,800
are some use cases where

2840
01:46:24,800 --> 01:46:27,119
we could build the intermediate ca list

2841
01:46:27,119 --> 01:46:28,960
dynamically

2842
01:46:28,960 --> 01:46:30,639
and these are use cases that are not for

2843
01:46:30,639 --> 01:46:33,040
the web right the use cases where we

2844
01:46:33,040 --> 01:46:35,679
have a very limited set of peers and a

2845
01:46:35,679 --> 01:46:39,119
very limited set of icas

2846
01:46:39,119 --> 01:46:40,080
um

2847
01:46:40,080 --> 01:46:42,239
in the draft we defined that

2848
01:46:42,239 --> 01:46:43,280
you can

2849
01:46:43,280 --> 01:46:44,239
uh

2850
01:46:44,239 --> 01:46:46,639
you you can send you you can allow the

2851
01:46:46,639 --> 01:46:49,679
server to send its intermediate cas

2852
01:46:49,679 --> 01:46:52,159
if it knows that if they're likely to

2853
01:46:52,159 --> 01:46:54,560
not exist on on the client

2854
01:46:54,560 --> 01:46:56,320
so that could be

2855
01:46:56,320 --> 01:47:00,159
a constrained um ica list so you know in

2856
01:47:00,159 --> 01:47:02,480
that case the server may choose and say

2857
01:47:02,480 --> 01:47:04,159
you know i'll send it no matter what

2858
01:47:04,159 --> 01:47:06,239
because i want to pretend uh

2859
01:47:06,239 --> 01:47:08,800
to prevent failures

2860
01:47:08,800 --> 01:47:10,960
or another use case could be

2861
01:47:10,960 --> 01:47:12,880
if we if there was a third party that

2862
01:47:12,880 --> 01:47:15,920
was hosting this intermediate cas

2863
01:47:15,920 --> 01:47:17,520
then the server could

2864
01:47:17,520 --> 01:47:20,159
could confirm if it's icas exist there

2865
01:47:20,159 --> 01:47:23,119
or not and in order to prevent a failure

2866
01:47:23,119 --> 01:47:25,199
it could you could decide to send them

2867
01:47:25,199 --> 01:47:28,400
if they don't exist in that ica list

2868
01:47:28,400 --> 01:47:30,159
so you know the draft

2869
01:47:30,159 --> 01:47:32,560
allows for these use cases where even

2870
01:47:32,560 --> 01:47:34,560
though the client may be asking for it

2871
01:47:34,560 --> 01:47:36,639
the server can make the decision to send

2872
01:47:36,639 --> 01:47:40,159
them to prevent a failure

2873
01:47:40,639 --> 01:47:42,239
in this way i also wanted to bring up

2874
01:47:42,239 --> 01:47:44,400
that we have some similar precedents

2875
01:47:44,400 --> 01:47:47,119
that would make the deployment of such a

2876
01:47:47,119 --> 01:47:48,159
draft

2877
01:47:48,159 --> 01:47:51,920
relatively easy so we know that mozilla

2878
01:47:51,920 --> 01:47:55,840
firefox already has an ica preload list

2879
01:47:55,840 --> 01:47:57,520
that list is not used for the same

2880
01:47:57,520 --> 01:48:00,239
reason it's used to prevent outages but

2881
01:48:00,239 --> 01:48:02,239
it's a list that that's loaded on the on

2882
01:48:02,239 --> 01:48:04,800
the browser already

2883
01:48:04,800 --> 01:48:06,560
we also know that the browsers

2884
01:48:06,560 --> 01:48:08,400
deploy some sort of list

2885
01:48:08,400 --> 01:48:11,600
for revocation whitelist for revocation

2886
01:48:11,600 --> 01:48:14,480
lists so there is a mechanism to deploy

2887
01:48:14,480 --> 01:48:16,000
um

2888
01:48:16,000 --> 01:48:19,679
such listing lists to a browser

2889
01:48:19,679 --> 01:48:21,920
and we also know that the ctls draft

2890
01:48:21,920 --> 01:48:24,080
that

2891
01:48:24,080 --> 01:48:26,159
eric was presenting earlier

2892
01:48:26,159 --> 01:48:28,480
also defines compression certificate

2893
01:48:28,480 --> 01:48:30,080
dictionaries

2894
01:48:30,080 --> 01:48:32,239
so you know it's also mentioned in

2895
01:48:32,239 --> 01:48:34,959
another draft

2896
01:48:35,199 --> 01:48:38,480
a mechanism like that i mean

2897
01:48:41,360 --> 01:48:42,639
so

2898
01:48:42,639 --> 01:48:44,159
we had we have a couple of open

2899
01:48:44,159 --> 01:48:45,520
questions that have have not been

2900
01:48:45,520 --> 01:48:47,360
addressed in the draft and we want to

2901
01:48:47,360 --> 01:48:49,679
work on them um

2902
01:48:49,679 --> 01:48:53,199
um if i may um yeah we're basically at

2903
01:48:53,199 --> 01:48:56,000
the end of time um and trying to make

2904
01:48:56,000 --> 01:48:58,840
room for the next presentation i'm

2905
01:48:58,840 --> 01:49:01,920
um did we mention the asks and we should

2906
01:49:01,920 --> 01:49:04,080
be cool yeah i i i i imagine there's

2907
01:49:04,080 --> 01:49:05,360
going to be good questions so i wanted

2908
01:49:05,360 --> 01:49:07,440
to make sure there's time for questions

2909
01:49:07,440 --> 01:49:08,880
um but also for the following

2910
01:49:08,880 --> 01:49:10,320
presentation i'm sorry to just sort of

2911
01:49:10,320 --> 01:49:12,320
jump in like this um yeah i don't know

2912
01:49:12,320 --> 01:49:15,360
where there's no words so i'll jump

2913
01:49:15,360 --> 01:49:16,480
jump the open questions there are a

2914
01:49:16,480 --> 01:49:18,080
couple of open questions that we haven't

2915
01:49:18,080 --> 01:49:20,000
answered and we're planning to to think

2916
01:49:20,000 --> 01:49:21,119
about them

2917
01:49:21,119 --> 01:49:22,800
the last slide i want to bring up is

2918
01:49:22,800 --> 01:49:24,400
that

2919
01:49:24,400 --> 01:49:26,239
you know there could be some challenges

2920
01:49:26,239 --> 01:49:28,880
for web pki and ryan has brought them up

2921
01:49:28,880 --> 01:49:30,719
on the list before

2922
01:49:30,719 --> 01:49:32,880
we think that we can address them but i

2923
01:49:32,880 --> 01:49:34,000
would also

2924
01:49:34,000 --> 01:49:36,239
suggest the group to to not forget that

2925
01:49:36,239 --> 01:49:38,000
tls is used in a bunch of other use

2926
01:49:38,000 --> 01:49:40,320
cases that could benefit from this

2927
01:49:40,320 --> 01:49:42,560
and i would like to ask for um a

2928
01:49:42,560 --> 01:49:44,960
discussion in the list or or

2929
01:49:44,960 --> 01:49:48,000
on the github github repo

2930
01:49:48,000 --> 01:49:49,920
and we will not we will not ask for

2931
01:49:49,920 --> 01:49:52,480
workgroup adoption uh i think maybe in

2932
01:49:52,480 --> 01:49:55,040
the next ietf we first want to think

2933
01:49:55,040 --> 01:49:56,960
about some of these open questions

2934
01:49:56,960 --> 01:49:59,280
before we ask for workgroup adoption and

2935
01:49:59,280 --> 01:50:01,760
we also want nist to pick algorithms so

2936
01:50:01,760 --> 01:50:03,199
that's what i had let me know if there

2937
01:50:03,199 --> 01:50:06,280
are questions

2938
01:50:10,639 --> 01:50:12,480
so i think you you partially mentioned

2939
01:50:12,480 --> 01:50:14,000
this in the last slide but i don't think

2940
01:50:14,000 --> 01:50:15,679
this draft as is will work for the web

2941
01:50:15,679 --> 01:50:18,080
pki for the the reasons you mentioned

2942
01:50:18,080 --> 01:50:20,719
like the the the

2943
01:50:20,719 --> 01:50:22,400
while we do have precedent for pushing

2944
01:50:22,400 --> 01:50:25,280
lists and stuff um this draft assumes

2945
01:50:25,280 --> 01:50:27,440
that the list in all the browsers gets

2946
01:50:27,440 --> 01:50:29,520
pushed it gets like updated basically

2947
01:50:29,520 --> 01:50:30,960
instantaneously whereas there's going to

2948
01:50:30,960 --> 01:50:33,040
be this long tail of like clients that

2949
01:50:33,040 --> 01:50:35,280
still are on an old list and so

2950
01:50:35,280 --> 01:50:36,480
you're basically going to be stuck with

2951
01:50:36,480 --> 01:50:38,320
the servers always assuming they have to

2952
01:50:38,320 --> 01:50:40,320
send the intermediates or like some

2953
01:50:40,320 --> 01:50:42,719
interviews just won't work um i could

2954
01:50:42,719 --> 01:50:44,400
imagine a more complicated scheme where

2955
01:50:44,400 --> 01:50:46,800
we like name the lists or something um

2956
01:50:46,800 --> 01:50:48,159
but that would be

2957
01:50:48,159 --> 01:50:50,560
slightly higher hanging fruit than this

2958
01:50:50,560 --> 01:50:52,719
hanging fruit um maybe for non-web use

2959
01:50:52,719 --> 01:50:54,159
cases to be useful but it sounded like

2960
01:50:54,159 --> 01:50:55,440
you were pretty interested in the

2961
01:50:55,440 --> 01:50:57,679
webkinz

2962
01:50:57,679 --> 01:50:59,679
okay

2963
01:50:59,679 --> 01:51:02,400
i think we're gonna cut the cue here and

2964
01:51:02,400 --> 01:51:04,560
ask the rest of the discussion to go the

2965
01:51:04,560 --> 01:51:06,159
list so that we have time for our last

2966
01:51:06,159 --> 01:51:08,480
presentation

2967
01:51:08,480 --> 01:51:09,679
thank you

2968
01:51:09,679 --> 01:51:12,560
sorry folks but

2969
01:51:18,080 --> 01:51:19,679
okay let's try to figure out how this

2970
01:51:19,679 --> 01:51:20,400
works

2971
01:51:20,400 --> 01:51:22,638
um

2972
01:51:24,000 --> 01:51:26,320
it should come here and then i can i

2973
01:51:26,320 --> 01:51:30,159
think authcam updates

2974
01:51:30,239 --> 01:51:32,080
very exciting stuff i can do it for my

2975
01:51:32,080 --> 01:51:33,119
phone

2976
01:51:33,119 --> 01:51:35,520
um so we don't have a lot of time uh

2977
01:51:35,520 --> 01:51:37,520
thanks everyone for being here of course

2978
01:51:37,520 --> 01:51:39,920
and also those that are in unfortunate

2979
01:51:39,920 --> 01:51:42,480
time zones uh i'm just gonna give a

2980
01:51:42,480 --> 01:51:46,000
brief update about the oddcam draft

2981
01:51:46,000 --> 01:51:47,599
so what did we do last time we

2982
01:51:47,599 --> 01:51:50,560
introduced it uh the idea is basically

2983
01:51:50,560 --> 01:51:53,280
instead of doing authentication via a

2984
01:51:53,280 --> 01:51:55,520
signature we do it via a key exchange

2985
01:51:55,520 --> 01:51:56,880
because that is

2986
01:51:56,880 --> 01:52:00,239
better post quantum uh possibly smaller

2987
01:52:00,239 --> 01:52:03,280
more efficient but we realized that we

2988
01:52:03,280 --> 01:52:05,599
hadn't had a lot of space in the rfc to

2989
01:52:05,599 --> 01:52:08,159
do also why

2990
01:52:08,159 --> 01:52:10,639
this is a good idea because it's many

2991
01:52:10,639 --> 01:52:13,520
folks on all the implementation stuff

2992
01:52:13,520 --> 01:52:16,639
and we had a bunch of questions so in

2993
01:52:16,639 --> 01:52:19,199
this presentation uh we have basically

2994
01:52:19,199 --> 01:52:21,199
what do we need from you to make this

2995
01:52:21,199 --> 01:52:22,400
thing better

2996
01:52:22,400 --> 01:52:24,159
a bunch of the small changes that we

2997
01:52:24,159 --> 01:52:24,960
made

2998
01:52:24,960 --> 01:52:27,599
and some bigger changes and we have this

2999
01:52:27,599 --> 01:52:29,360
offcam abridged

3000
01:52:29,360 --> 01:52:32,480
sort of behind the scenes document

3001
01:52:32,480 --> 01:52:34,239
so let's start with what do we need from

3002
01:52:34,239 --> 01:52:35,920
you

3003
01:52:35,920 --> 01:52:38,639
basically we need feedback it is

3004
01:52:38,639 --> 01:52:40,639
not a small change

3005
01:52:40,639 --> 01:52:41,460
and

3006
01:52:41,460 --> 01:52:42,960
[Music]

3007
01:52:42,960 --> 01:52:45,119
we would like to know does this fit for

3008
01:52:45,119 --> 01:52:47,040
you does this not fit for you

3009
01:52:47,040 --> 01:52:48,480
um

3010
01:52:48,480 --> 01:52:50,880
stuff like that we also need some i'm

3011
01:52:50,880 --> 01:52:54,320
not uh i'm a first-time rfc writer i'm

3012
01:52:54,320 --> 01:52:55,920
used to writing scientific papers which

3013
01:52:55,920 --> 01:52:58,639
is quite different so yeah that is

3014
01:52:58,639 --> 01:53:01,679
quite visible still

3015
01:53:01,760 --> 01:53:03,520
and

3016
01:53:03,520 --> 01:53:05,360
it's been mentioned a few times the nist

3017
01:53:05,360 --> 01:53:07,119
finalists are going to be announced very

3018
01:53:07,119 --> 01:53:08,000
soon

3019
01:53:08,000 --> 01:53:09,760
probably end of the month

3020
01:53:09,760 --> 01:53:12,000
and when that time comes it will

3021
01:53:12,000 --> 01:53:14,400
probably be very nice if you investigate

3022
01:53:14,400 --> 01:53:17,760
if they fit in the way that you use tls

3023
01:53:17,760 --> 01:53:21,599
and especially if the

3024
01:53:22,080 --> 01:53:23,760
signature schemes are problematic if

3025
01:53:23,760 --> 01:53:26,239
possibly afghan could solve problems for

3026
01:53:26,239 --> 01:53:28,480
you

3027
01:53:30,080 --> 01:53:32,639
oh there

3028
01:53:33,599 --> 01:53:35,679
yeah the changelog

3029
01:53:35,679 --> 01:53:38,320
so we restructured the whole thing we

3030
01:53:38,320 --> 01:53:41,679
split the protocol diagrams from a lot

3031
01:53:41,679 --> 01:53:43,679
of implementation details and we hope

3032
01:53:43,679 --> 01:53:45,199
that that makes the thing a lot more

3033
01:53:45,199 --> 01:53:46,560
readable this is really the most

3034
01:53:46,560 --> 01:53:48,400
important thing that we changed

3035
01:53:48,400 --> 01:53:50,960
since revision00

3036
01:53:50,960 --> 01:53:54,159
um so you'll find that it now first

3037
01:53:54,159 --> 01:53:56,719
introduces the arrows on the paper

3038
01:53:56,719 --> 01:53:59,199
before it starts to go into how do you

3039
01:53:59,199 --> 01:54:01,599
put those arrows into bytes and then

3040
01:54:01,599 --> 01:54:04,000
transmit them over the wire

3041
01:54:04,000 --> 01:54:05,599
some other things that we did was we

3042
01:54:05,599 --> 01:54:06,840
used now

3043
01:54:06,840 --> 01:54:09,199
hpke more fully

3044
01:54:09,199 --> 01:54:11,840
and we added some certificate request

3045
01:54:11,840 --> 01:54:14,000
context to the keying caps messages to

3046
01:54:14,000 --> 01:54:15,040
possibly

3047
01:54:15,040 --> 01:54:16,800
be able to keep track of those a little

3048
01:54:16,800 --> 01:54:19,040
bit better

3049
01:54:19,040 --> 01:54:21,199
so off camera bridged

3050
01:54:21,199 --> 01:54:23,679
this is intended to be more of a sort of

3051
01:54:23,679 --> 01:54:25,760
living document where

3052
01:54:25,760 --> 01:54:28,400
we just try to sort of do q a and

3053
01:54:28,400 --> 01:54:31,360
provide intuition

3054
01:54:31,360 --> 01:54:33,199
we don't want to sweep anything under

3055
01:54:33,199 --> 01:54:35,760
the rug here so we also very much try to

3056
01:54:35,760 --> 01:54:38,560
clarify all of the open questions and

3057
01:54:38,560 --> 01:54:42,239
the more tricky security intuition bits

3058
01:54:42,239 --> 01:54:44,800
um and we really really would like also

3059
01:54:44,800 --> 01:54:45,679
help

3060
01:54:45,679 --> 01:54:46,880
there

3061
01:54:46,880 --> 01:54:50,639
so please ask your questions uh either

3062
01:54:50,639 --> 01:54:53,840
directly or in the mailing list

3063
01:54:53,840 --> 01:54:56,719
and we will also try to keep this uh

3064
01:54:56,719 --> 01:54:59,199
document up to date so

3065
01:54:59,199 --> 01:55:02,000
some of the things that we have there

3066
01:55:02,000 --> 01:55:04,239
for example why do we use camps for

3067
01:55:04,239 --> 01:55:06,639
authentication

3068
01:55:06,639 --> 01:55:07,440
uh

3069
01:55:07,440 --> 01:55:09,199
stuff like how much time do we have five

3070
01:55:09,199 --> 01:55:12,560
minutes so again end of the month uh we

3071
01:55:12,560 --> 01:55:15,040
should see announcements from nist's

3072
01:55:15,040 --> 01:55:19,599
uh from nist's pq thing

3073
01:55:19,599 --> 01:55:21,520
the signature schemes are it's looking

3074
01:55:21,520 --> 01:55:24,320
like it's going to be either quite big

3075
01:55:24,320 --> 01:55:25,360
or

3076
01:55:25,360 --> 01:55:27,360
quite annoying if you have like a small

3077
01:55:27,360 --> 01:55:29,199
microcontroller that can't do floating

3078
01:55:29,199 --> 01:55:30,840
point paths

3079
01:55:30,840 --> 01:55:32,400
um

3080
01:55:32,400 --> 01:55:34,080
and it's

3081
01:55:34,080 --> 01:55:36,400
quite probably be gonna be

3082
01:55:36,400 --> 01:55:39,760
just one of those two options so

3083
01:55:39,760 --> 01:55:41,760
that is why we think of chemists work

3084
01:55:41,760 --> 01:55:44,560
well um

3085
01:55:44,560 --> 01:55:46,480
why do we not do draft semi-static is

3086
01:55:46,480 --> 01:55:49,119
another question that we saw last time

3087
01:55:49,119 --> 01:55:51,199
i really like the idea behind the

3088
01:55:51,199 --> 01:55:53,040
semi-static difficult key exchange

3089
01:55:53,040 --> 01:55:54,639
unfortunately it doesn't work post

3090
01:55:54,639 --> 01:55:56,719
quantum

3091
01:55:56,719 --> 01:55:58,480
why do we want to do it now is also

3092
01:55:58,480 --> 01:56:01,280
something that came up um

3093
01:56:01,280 --> 01:56:03,840
and our answer there is that really this

3094
01:56:03,840 --> 01:56:06,880
work is very hard um

3095
01:56:06,880 --> 01:56:08,239
and

3096
01:56:08,239 --> 01:56:09,599
post quantum

3097
01:56:09,599 --> 01:56:11,760
this this move is a really good good

3098
01:56:11,760 --> 01:56:13,840
opportunity to re-examine the things

3099
01:56:13,840 --> 01:56:16,320
that we have right now and

3100
01:56:16,320 --> 01:56:18,000
to see if that still works instead of

3101
01:56:18,000 --> 01:56:20,080
just scribbling in pq in front of all of

3102
01:56:20,080 --> 01:56:21,440
the things

3103
01:56:21,440 --> 01:56:23,199
the last meeting already identified a

3104
01:56:23,199 --> 01:56:26,159
rough edge so we really see that this

3105
01:56:26,159 --> 01:56:29,280
interaction is helping and we want to

3106
01:56:29,280 --> 01:56:31,280
file down all of those rough edges and

3107
01:56:31,280 --> 01:56:34,960
that is going to take a lot of effort

3108
01:56:34,960 --> 01:56:36,960
and is this finished enough was also

3109
01:56:36,960 --> 01:56:39,360
something that came up we have a lot of

3110
01:56:39,360 --> 01:56:41,360
academic work going on

3111
01:56:41,360 --> 01:56:43,040
we are working on a tamarind proof

3112
01:56:43,040 --> 01:56:44,239
actually we've

3113
01:56:44,239 --> 01:56:46,239
mainly finished that work we've extended

3114
01:56:46,239 --> 01:56:48,560
the tls 1.3 model and douglas has also

3115
01:56:48,560 --> 01:56:50,639
done a model of the time

3116
01:56:50,639 --> 01:56:52,880
of the chem tls protocol

3117
01:56:52,880 --> 01:56:54,560
and

3118
01:56:54,560 --> 01:56:56,880
research has a hard time finding out the

3119
01:56:56,880 --> 01:56:58,560
practical stuff though

3120
01:56:58,560 --> 01:57:00,800
and we think that also this interaction

3121
01:57:00,800 --> 01:57:03,520
helps in that area

3122
01:57:03,520 --> 01:57:05,760
let's see next

3123
01:57:05,760 --> 01:57:07,119
there we go

3124
01:57:07,119 --> 01:57:08,560
um

3125
01:57:08,560 --> 01:57:11,199
other things to read uh are like why we

3126
01:57:11,199 --> 01:57:13,440
added another handshake secrets

3127
01:57:13,440 --> 01:57:15,599
and why we put chems into signature

3128
01:57:15,599 --> 01:57:17,199
algorithms because clearly chems aren't

3129
01:57:17,199 --> 01:57:19,040
signature algorithms and just small

3130
01:57:19,040 --> 01:57:20,960
stuff like that

3131
01:57:20,960 --> 01:57:23,679
so again we would like to hear from you

3132
01:57:23,679 --> 01:57:25,760
if you want to help

3133
01:57:25,760 --> 01:57:28,080
or have feedback i

3134
01:57:28,080 --> 01:57:29,599
want to comment on any of the open

3135
01:57:29,599 --> 01:57:31,040
issues of

3136
01:57:31,040 --> 01:57:32,320
want to point out something that we

3137
01:57:32,320 --> 01:57:33,840
missed

3138
01:57:33,840 --> 01:57:36,560
unanswered questions really there are no

3139
01:57:36,560 --> 01:57:39,679
dumb questions and also if you have

3140
01:57:39,679 --> 01:57:41,599
something that we should investigate if

3141
01:57:41,599 --> 01:57:42,800
you want to work with us on some

3142
01:57:42,800 --> 01:57:45,119
experiment or really do whatever if you

3143
01:57:45,119 --> 01:57:47,440
want to

3144
01:57:47,520 --> 01:57:49,040
say that we're being idiots and

3145
01:57:49,040 --> 01:57:51,360
forgetting something really stupid that

3146
01:57:51,360 --> 01:57:53,119
would also be helpful

3147
01:57:53,119 --> 01:57:56,639
so yeah that is i think

3148
01:57:56,639 --> 01:57:59,920
my ask to the room today

3149
01:58:01,119 --> 01:58:05,119
and i think that was my last slide

3150
01:58:05,199 --> 01:58:09,199
okay the queue is open for

3151
01:58:16,639 --> 01:58:20,040
don't be shy

3152
01:58:28,159 --> 01:58:29,890
well i guess i was very clear

3153
01:58:29,890 --> 01:58:32,400
[Music]

3154
01:58:32,400 --> 01:58:34,400
if you come up with something later our

3155
01:58:34,400 --> 01:58:38,719
email uh boxes are always open so um

3156
01:58:38,719 --> 01:58:40,639
i don't think i'm particularly hard to

3157
01:58:40,639 --> 01:58:43,360
reach uh and also for those here in

3158
01:58:43,360 --> 01:58:45,679
person you can also always come up to me

3159
01:58:45,679 --> 01:58:48,080
with questions

3160
01:58:48,080 --> 01:58:50,480
and if that went very fast for you i

3161
01:58:50,480 --> 01:58:53,599
think the slides are on the data tracker

3162
01:58:53,599 --> 01:58:56,080
so you can also go at them at your own

3163
01:58:56,080 --> 01:58:58,239
pace

3164
01:58:58,239 --> 01:59:02,598
but yeah i was asked to hurry up

3165
01:59:09,440 --> 01:59:11,839
okay

3166
01:59:15,520 --> 01:59:17,440
um i think that

3167
01:59:17,440 --> 01:59:22,800
draws uh tls at iatf 113 to a close um

3168
01:59:22,800 --> 01:59:25,360
looking forward to seeing uh everybody

3169
01:59:25,360 --> 01:59:28,840
online or in person at the next ietf in

3170
01:59:28,840 --> 01:59:30,800
philadelphia

3171
01:59:30,800 --> 01:59:32,060
and on the list in

3172
01:59:32,060 --> 01:59:33,760
[Music]

3173
01:59:33,760 --> 01:59:36,840
the meantime

3174
01:59:45,119 --> 01:59:47,920
thanks everybody

3175
01:59:56,599 --> 01:59:58,719
bye-bye hello

3176
01:59:58,719 --> 02:00:01,960
how are you

3177
02:00:52,400 --> 02:00:55,400
is

3178
02:00:59,040 --> 02:01:02,040
oh

