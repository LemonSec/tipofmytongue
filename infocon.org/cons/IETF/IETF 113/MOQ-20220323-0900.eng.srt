1
00:00:14,400 --> 00:00:15,839
having a thing where people know it's

2
00:00:15,839 --> 00:00:17,840
been discussed

3
00:00:17,840 --> 00:00:20,240
on the slides uh is the right middle

4
00:00:20,240 --> 00:00:23,240
class

5
00:00:31,840 --> 00:00:34,840
uh

6
00:00:37,770 --> 00:00:40,809
[Music]

7
00:00:47,520 --> 00:00:49,200
okay

8
00:00:49,200 --> 00:00:51,840
this will start very soon

9
00:00:51,840 --> 00:00:55,640
please take a seat here

10
00:01:05,840 --> 00:01:08,840
evie

11
00:01:09,270 --> 00:01:12,360
[Music]

12
00:01:12,880 --> 00:01:15,439
okay let's get started here welcome to

13
00:01:15,439 --> 00:01:17,680
the media with quick buff i'm magnus

14
00:01:17,680 --> 00:01:19,759
westland my coach here here is alan

15
00:01:19,759 --> 00:01:21,600
frindell

16
00:01:21,600 --> 00:01:24,600
so

17
00:01:26,320 --> 00:01:28,640
this is today's agenda we'll go over a

18
00:01:28,640 --> 00:01:31,040
few administrative things lead up in and

19
00:01:31,040 --> 00:01:32,720
then go into

20
00:01:32,720 --> 00:01:34,640
use case overviews

21
00:01:34,640 --> 00:01:36,560
uh looking at a couple of different use

22
00:01:36,560 --> 00:01:39,360
cases a bit of this a little bit of the

23
00:01:39,360 --> 00:01:41,439
potential solution space for future work

24
00:01:41,439 --> 00:01:42,240
but

25
00:01:42,240 --> 00:01:43,040
that's

26
00:01:43,040 --> 00:01:45,840
setting the stage for

27
00:01:45,840 --> 00:01:49,680
discussing what's possible not solutions

28
00:01:49,680 --> 00:01:51,439
then we'll have the discussion and wrap

29
00:01:51,439 --> 00:01:55,839
up so that's the plan for today

30
00:01:59,200 --> 00:02:01,680
so the note well

31
00:02:01,680 --> 00:02:03,280
this is

32
00:02:03,280 --> 00:02:05,200
to remind you that the

33
00:02:05,200 --> 00:02:06,640
it applies

34
00:02:06,640 --> 00:02:09,119
and you there's intellectual property

35
00:02:09,119 --> 00:02:11,200
there's behavior codes

36
00:02:11,200 --> 00:02:13,839
etc

37
00:02:18,080 --> 00:02:20,560
so i have no takers thanks to jonathan

38
00:02:20,560 --> 00:02:22,480
lennox and stefan wenger

39
00:02:22,480 --> 00:02:24,400
if you want to help out in the hedge

40
00:02:24,400 --> 00:02:25,599
dock

41
00:02:25,599 --> 00:02:28,160
please do

42
00:02:28,720 --> 00:02:31,599
remind it to everyone in the room

43
00:02:31,599 --> 00:02:32,879
if you

44
00:02:32,879 --> 00:02:35,280
use the me take a light or meet echo to

45
00:02:35,280 --> 00:02:37,280
join the queue

46
00:02:37,280 --> 00:02:39,519
if you're using the full reminder

47
00:02:39,519 --> 00:02:42,560
remember to mute etc

48
00:02:42,560 --> 00:02:44,720
so

49
00:02:46,080 --> 00:02:48,080
so

50
00:02:48,080 --> 00:02:50,239
why are we here

51
00:02:50,239 --> 00:02:52,239
we are here to discuss if there are

52
00:02:52,239 --> 00:02:55,680
media delivery challenges that

53
00:02:55,680 --> 00:02:57,599
we have common enough understanding of

54
00:02:57,599 --> 00:02:59,760
so do we understand

55
00:02:59,760 --> 00:03:03,200
what it is about what's the problems are

56
00:03:03,200 --> 00:03:06,000
has issues or challenges that we

57
00:03:06,000 --> 00:03:08,080
have encountered so say in in trying to

58
00:03:08,080 --> 00:03:09,680
do things

59
00:03:09,680 --> 00:03:13,200
and not theoretical only um

60
00:03:13,200 --> 00:03:16,840
they are sufficient interest to

61
00:03:16,840 --> 00:03:19,040
solve they would benefit from

62
00:03:19,040 --> 00:03:20,800
standardization work

63
00:03:20,800 --> 00:03:23,760
protocol definition

64
00:03:23,760 --> 00:03:26,319
we believe that we can solve

65
00:03:26,319 --> 00:03:30,239
and is appropriate to solve here in itf

66
00:03:30,239 --> 00:03:32,080
we also want to see who's interested in

67
00:03:32,080 --> 00:03:33,599
contributing to

68
00:03:33,599 --> 00:03:36,480
working in space

69
00:03:40,799 --> 00:03:43,040
so this is a non-working group forming

70
00:03:43,040 --> 00:03:44,799
boss

71
00:03:44,799 --> 00:03:46,879
there are a couple of potential outcomes

72
00:03:46,879 --> 00:03:49,518
after this buff

73
00:03:49,920 --> 00:03:52,319
one is that there's one or more problems

74
00:03:52,319 --> 00:03:54,560
there's the sufficient support to be

75
00:03:54,560 --> 00:03:55,760
addressed

76
00:03:55,760 --> 00:03:58,080
interesting

77
00:03:58,080 --> 00:04:00,480
and then we go into some type of scoping

78
00:04:00,480 --> 00:04:01,920
of the work

79
00:04:01,920 --> 00:04:03,519
figure out if there's an existing

80
00:04:03,519 --> 00:04:05,040
working group or you need to write a

81
00:04:05,040 --> 00:04:06,159
charter

82
00:04:06,159 --> 00:04:08,239
for it and then do the discussion around

83
00:04:08,239 --> 00:04:10,480
that

84
00:04:11,360 --> 00:04:14,319
such that will happen in that case on

85
00:04:14,319 --> 00:04:17,759
the mockbuff unless directed elsewhere

86
00:04:17,759 --> 00:04:20,478
and then either resharper or

87
00:04:20,478 --> 00:04:22,160
have a working group for above depending

88
00:04:22,160 --> 00:04:23,120
on how

89
00:04:23,120 --> 00:04:24,720
good the support

90
00:04:24,720 --> 00:04:28,560
agreement are around such a proposal

91
00:04:28,560 --> 00:04:30,720
the other alternatives is that we

92
00:04:30,720 --> 00:04:32,080
actually need more description

93
00:04:32,080 --> 00:04:35,680
discussion before number one can happen

94
00:04:35,680 --> 00:04:37,280
that's something that okay we

95
00:04:37,280 --> 00:04:38,880
are interested in doing something but we

96
00:04:38,880 --> 00:04:42,320
are not really agreeing what it is

97
00:04:42,320 --> 00:04:45,280
or we could actually conclude

98
00:04:45,280 --> 00:04:47,199
there are no problem to solve at this

99
00:04:47,199 --> 00:04:48,320
moment

100
00:04:48,320 --> 00:04:50,479
so

101
00:04:54,479 --> 00:04:55,440
so

102
00:04:55,440 --> 00:04:56,960
um

103
00:04:56,960 --> 00:04:59,360
that's kind of the scope setting uh and

104
00:04:59,360 --> 00:05:01,039
um

105
00:05:01,039 --> 00:05:04,560
let's go into the use case overview now

106
00:05:04,560 --> 00:05:07,800
good games

107
00:05:14,800 --> 00:05:17,360
i must

108
00:05:23,280 --> 00:05:25,199
go ahead james

109
00:05:25,199 --> 00:05:28,639
excellent good morning people uh so in

110
00:05:28,639 --> 00:05:30,560
in this bit of a presentation i'm going

111
00:05:30,560 --> 00:05:32,479
to be covering a couple of different

112
00:05:32,479 --> 00:05:34,080
aspects

113
00:05:34,080 --> 00:05:36,080
of the use cases

114
00:05:36,080 --> 00:05:38,720
uh little disclaimer before i continue

115
00:05:38,720 --> 00:05:41,759
this is views of mostly myself and also

116
00:05:41,759 --> 00:05:44,240
of spencer and not really of a

117
00:05:44,240 --> 00:05:46,320
non-existent working group

118
00:05:46,320 --> 00:05:48,960
um we're also going to be talking about

119
00:05:48,960 --> 00:05:51,039
uh why quick

120
00:05:51,039 --> 00:05:54,560
and describing sort of a

121
00:05:54,560 --> 00:05:56,800
high level overview of its

122
00:05:56,800 --> 00:05:58,319
of some of these use cases and their

123
00:05:58,319 --> 00:06:00,479
applicability in in sort of the tv

124
00:06:00,479 --> 00:06:01,440
domain

125
00:06:01,440 --> 00:06:02,800
and i'm not going to be talking about

126
00:06:02,800 --> 00:06:07,199
requirements or solutions too much here

127
00:06:07,199 --> 00:06:08,880
so

128
00:06:08,880 --> 00:06:11,759
how did we get here

129
00:06:11,759 --> 00:06:13,759
we got here because we've had an awful

130
00:06:13,759 --> 00:06:15,280
lot of discussions about this over a

131
00:06:15,280 --> 00:06:16,880
very long time

132
00:06:16,880 --> 00:06:18,880
some of the first bits of

133
00:06:18,880 --> 00:06:22,000
documents and discussions were happening

134
00:06:22,000 --> 00:06:24,720
2017 and perhaps even earlier

135
00:06:24,720 --> 00:06:27,120
um we've also had the mock mailing list

136
00:06:27,120 --> 00:06:30,240
around for a while we've had a few

137
00:06:30,240 --> 00:06:32,000
side meetings

138
00:06:32,000 --> 00:06:32,880
uh

139
00:06:32,880 --> 00:06:36,319
there's also been with with asides from

140
00:06:36,319 --> 00:06:38,720
uh the use cases draft that my self and

141
00:06:38,720 --> 00:06:39,919
spencer have been working on there's

142
00:06:39,919 --> 00:06:41,680
also been many other

143
00:06:41,680 --> 00:06:42,479
uh

144
00:06:42,479 --> 00:06:44,000
drafts that have been published out

145
00:06:44,000 --> 00:06:46,479
there that are you that have got some

146
00:06:46,479 --> 00:06:49,360
sort of an attempt to solve something

147
00:06:49,360 --> 00:06:52,479
that may fit into the use cases

148
00:06:52,479 --> 00:06:55,199
uh that that we're going to be talking

149
00:06:55,199 --> 00:06:56,720
through today

150
00:06:56,720 --> 00:06:57,520
and

151
00:06:57,520 --> 00:06:59,039
i'm not going to go through these but

152
00:06:59,039 --> 00:07:01,360
there's there's a few here uh that just

153
00:07:01,360 --> 00:07:03,199
shows sort of how long this timeline is

154
00:07:03,199 --> 00:07:04,880
progressing we've sort of had these

155
00:07:04,880 --> 00:07:06,639
these documents around for a couple of

156
00:07:06,639 --> 00:07:09,039
years now and this isn't a complete list

157
00:07:09,039 --> 00:07:10,400
um there's

158
00:07:10,400 --> 00:07:12,479
uh rips which is one other and there's

159
00:07:12,479 --> 00:07:14,000
probably some more out there that we've

160
00:07:14,000 --> 00:07:15,599
completely missed

161
00:07:15,599 --> 00:07:17,759
um

162
00:07:17,759 --> 00:07:20,000
so perhaps the big question we're going

163
00:07:20,000 --> 00:07:21,840
to ask is well we have all these other

164
00:07:21,840 --> 00:07:24,319
protocols that can ship media why would

165
00:07:24,319 --> 00:07:27,039
we put all this effort into using quick

166
00:07:27,039 --> 00:07:27,840
well

167
00:07:27,840 --> 00:07:29,120
quick although it is quite general

168
00:07:29,120 --> 00:07:31,039
purpose it it gives

169
00:07:31,039 --> 00:07:33,759
a lot of useful functionality that have

170
00:07:33,759 --> 00:07:36,160
have very useful applicability in in the

171
00:07:36,160 --> 00:07:37,759
media domain

172
00:07:37,759 --> 00:07:38,800
um

173
00:07:38,800 --> 00:07:40,880
this is just a list of these most

174
00:07:40,880 --> 00:07:43,520
notably uh the fact that a lot of

175
00:07:43,520 --> 00:07:45,840
deployments are going to be carrying it

176
00:07:45,840 --> 00:07:49,199
in order to to do http 3 and and other

177
00:07:49,199 --> 00:07:51,120
protocols as well

178
00:07:51,120 --> 00:07:54,319
and so we can take advantage of these

179
00:07:54,319 --> 00:07:56,960
uh and make and sort of make use of them

180
00:07:56,960 --> 00:07:59,840
as best as we can

181
00:08:00,000 --> 00:08:01,680
but what's more important so let me talk

182
00:08:01,680 --> 00:08:03,759
about the use cases so

183
00:08:03,759 --> 00:08:05,840
um spencer and i've spent an awful lot

184
00:08:05,840 --> 00:08:07,680
of time since the last side meeting

185
00:08:07,680 --> 00:08:10,240
better refining the ontology of of these

186
00:08:10,240 --> 00:08:14,479
use cases and this is not complete

187
00:08:14,479 --> 00:08:16,720
uh but it is what we think

188
00:08:16,720 --> 00:08:19,360
enough to explain the scope and and the

189
00:08:19,360 --> 00:08:22,240
the area that we're working in and

190
00:08:22,240 --> 00:08:24,319
i've put latency

191
00:08:24,319 --> 00:08:27,360
on the other axis not because it is the

192
00:08:27,360 --> 00:08:29,599
most important thing but more just to

193
00:08:29,599 --> 00:08:31,520
give some structure to this um there's

194
00:08:31,520 --> 00:08:33,200
certainly many other

195
00:08:33,200 --> 00:08:35,039
uh requirements both functional and

196
00:08:35,039 --> 00:08:36,719
known that we could do it this is just

197
00:08:36,719 --> 00:08:38,799
one of them that clearly is very

198
00:08:38,799 --> 00:08:40,640
important for people and just sort of

199
00:08:40,640 --> 00:08:42,320
working your way from top to bottom

200
00:08:42,320 --> 00:08:44,080
we've got sort of what we call

201
00:08:44,080 --> 00:08:46,800
interactive media so that could be

202
00:08:46,800 --> 00:08:49,440
uh things from like uh cloud-based

203
00:08:49,440 --> 00:08:53,680
gaming remote desktoping uh operations

204
00:08:53,680 --> 00:08:55,279
both of those tend to be more of a

205
00:08:55,279 --> 00:08:57,680
one-to-one operation

206
00:08:57,680 --> 00:08:59,920
uh and then we have video conferencing

207
00:08:59,920 --> 00:09:02,640
which is uh either a one-to-one or a

208
00:09:02,640 --> 00:09:05,120
many-to-many

209
00:09:05,120 --> 00:09:06,480
um

210
00:09:06,480 --> 00:09:09,120
the live media use cases

211
00:09:09,120 --> 00:09:11,440
uh which i'll be talking a bit more in

212
00:09:11,440 --> 00:09:13,120
depth here

213
00:09:13,120 --> 00:09:15,120
are but are not the only important ones

214
00:09:15,120 --> 00:09:17,279
sort of we sort of split them into three

215
00:09:17,279 --> 00:09:18,800
sort of groups

216
00:09:18,800 --> 00:09:20,320
uh live media

217
00:09:20,320 --> 00:09:23,360
ingest which is where media is coming

218
00:09:23,360 --> 00:09:26,080
out of being sent on to somewhere so an

219
00:09:26,080 --> 00:09:29,120
example would be an output from a camera

220
00:09:29,120 --> 00:09:33,279
uh into a transcoder or some other into

221
00:09:33,279 --> 00:09:35,680
the broadcast chain

222
00:09:35,680 --> 00:09:37,120
syndication

223
00:09:37,120 --> 00:09:38,880
is a little bit more complex and this is

224
00:09:38,880 --> 00:09:40,720
sort of where it is being fanned out

225
00:09:40,720 --> 00:09:43,040
into distribution networks so for

226
00:09:43,040 --> 00:09:46,160
example when it comes out of uh

227
00:09:46,160 --> 00:09:47,839
out of the broadcast chain in in

228
00:09:47,839 --> 00:09:50,560
television and needs to be sent on to

229
00:09:50,560 --> 00:09:54,480
uh cable tv providers or uh

230
00:09:54,480 --> 00:09:57,519
over satellite or terrestrial networks

231
00:09:57,519 --> 00:09:59,519
and for live media streaming this is

232
00:09:59,519 --> 00:10:00,720
playback

233
00:10:00,720 --> 00:10:03,200
this is this is p people consuming and

234
00:10:03,200 --> 00:10:05,920
watching live media

235
00:10:05,920 --> 00:10:08,480
and and and lastly i'm not going to talk

236
00:10:08,480 --> 00:10:09,600
about this too much is more of the

237
00:10:09,600 --> 00:10:12,160
on-demand media use cases where

238
00:10:12,160 --> 00:10:13,440
uh

239
00:10:13,440 --> 00:10:16,320
media is stored and and

240
00:10:16,320 --> 00:10:18,720
also made available for playback

241
00:10:18,720 --> 00:10:20,480
uh but for for all intents and purposes

242
00:10:20,480 --> 00:10:22,000
i'm not going to be dwelling too much on

243
00:10:22,000 --> 00:10:24,399
that one

244
00:10:24,399 --> 00:10:25,519
so

245
00:10:25,519 --> 00:10:26,399
uh

246
00:10:26,399 --> 00:10:29,680
to set a bit of context here uh this is

247
00:10:29,680 --> 00:10:31,120
a very

248
00:10:31,120 --> 00:10:33,680
simplified example of a television

249
00:10:33,680 --> 00:10:36,399
broadcast chain end to end

250
00:10:36,399 --> 00:10:38,720
uh and i've grayed out the bits that are

251
00:10:38,720 --> 00:10:40,640
perhaps not so pertinent for this

252
00:10:40,640 --> 00:10:42,160
discussion but i think it's kind of

253
00:10:42,160 --> 00:10:44,079
interesting to talk about sort of the

254
00:10:44,079 --> 00:10:46,560
end to end or the glass to glass call it

255
00:10:46,560 --> 00:10:48,000
what you will

256
00:10:48,000 --> 00:10:49,440
um and

257
00:10:49,440 --> 00:10:52,000
we start over on the left hand side with

258
00:10:52,000 --> 00:10:54,000
uh sources

259
00:10:54,000 --> 00:10:56,160
cameras either inside of studio or

260
00:10:56,160 --> 00:10:57,200
remote

261
00:10:57,200 --> 00:10:59,920
being fed into a central point which is

262
00:10:59,920 --> 00:11:02,399
typically a master control room

263
00:11:02,399 --> 00:11:05,760
uh and then managed and sent out into

264
00:11:05,760 --> 00:11:08,240
the distribution side of things

265
00:11:08,240 --> 00:11:10,399
uh such as

266
00:11:10,399 --> 00:11:12,640
for transcoding and eventually delivery

267
00:11:12,640 --> 00:11:15,360
for the viewer in the ip domain

268
00:11:15,360 --> 00:11:18,480
there is also

269
00:11:18,480 --> 00:11:20,480
if we zoom in for a little bit

270
00:11:20,480 --> 00:11:23,040
this this lovely green box here of live

271
00:11:23,040 --> 00:11:24,640
streaming and this is

272
00:11:24,640 --> 00:11:26,640
uh representative of

273
00:11:26,640 --> 00:11:27,440
uh

274
00:11:27,440 --> 00:11:29,120
use cases where we're talking about

275
00:11:29,120 --> 00:11:31,440
user-generated content

276
00:11:31,440 --> 00:11:32,560
there

277
00:11:32,560 --> 00:11:33,760
in

278
00:11:33,760 --> 00:11:36,240
these three sort of ingest arrows as it

279
00:11:36,240 --> 00:11:38,880
were the blue the purple and the green

280
00:11:38,880 --> 00:11:40,959
they all are effectively ingest but they

281
00:11:40,959 --> 00:11:44,399
do have some key differences in their

282
00:11:44,399 --> 00:11:47,600
requirements and how they work

283
00:11:47,600 --> 00:11:49,440
uh the two most notable differences

284
00:11:49,440 --> 00:11:51,120
between them are around sort of

285
00:11:51,120 --> 00:11:54,000
throughput and resiliency requirements

286
00:11:54,000 --> 00:11:57,040
and in the case of in some cases

287
00:11:57,040 --> 00:11:59,120
bi-directionality

288
00:11:59,120 --> 00:12:02,639
uh for outside broadcasts for example uh

289
00:12:02,639 --> 00:12:05,040
it may be required that you send audio

290
00:12:05,040 --> 00:12:08,959
and video both ways uh say a person

291
00:12:08,959 --> 00:12:12,240
a weather person in bad weather having a

292
00:12:12,240 --> 00:12:14,399
interview with a news presenter in the

293
00:12:14,399 --> 00:12:17,200
studio they need that bi-directionality

294
00:12:17,200 --> 00:12:19,040
there

295
00:12:19,040 --> 00:12:20,160
when we

296
00:12:20,160 --> 00:12:23,360
talk about syndication this is again

297
00:12:23,360 --> 00:12:26,079
that fan out onto delivery networks and

298
00:12:26,079 --> 00:12:27,680
there isn't

299
00:12:27,680 --> 00:12:29,120
the the key distinction here is that

300
00:12:29,120 --> 00:12:31,000
there isn't any further

301
00:12:31,000 --> 00:12:33,920
transcoding or splitting up of the video

302
00:12:33,920 --> 00:12:35,839
there may be a transmuxing or

303
00:12:35,839 --> 00:12:37,200
repackaging

304
00:12:37,200 --> 00:12:39,680
up there's no further transformations to

305
00:12:39,680 --> 00:12:43,040
the video no further uh editorialization

306
00:12:43,040 --> 00:12:44,320
uh and then lastly we got to the

307
00:12:44,320 --> 00:12:46,240
streaming which

308
00:12:46,240 --> 00:12:48,079
should be fairly clear here which is is

309
00:12:48,079 --> 00:12:50,160
just people fetching the media and

310
00:12:50,160 --> 00:12:52,800
playing it out

311
00:12:52,800 --> 00:12:54,480
that's pretty much

312
00:12:54,480 --> 00:12:57,200
about it

313
00:12:59,040 --> 00:13:01,200
are the use cases clear do people have

314
00:13:01,200 --> 00:13:03,600
questions or do you have other use cases

315
00:13:03,600 --> 00:13:06,800
that you don't think fit uh

316
00:13:06,800 --> 00:13:10,279
into this space

317
00:13:22,399 --> 00:13:25,120
jake go ahead

318
00:13:28,639 --> 00:13:32,399
hello is that working all right um

319
00:13:32,399 --> 00:13:35,120
do you uh so when you're merging

320
00:13:35,120 --> 00:13:37,200
multiple media streams does that go

321
00:13:37,200 --> 00:13:39,120
under the

322
00:13:39,120 --> 00:13:41,360
uh

323
00:13:41,920 --> 00:13:44,560
like which section would that go into

324
00:13:44,560 --> 00:13:46,639
or is that just a sort of independent

325
00:13:46,639 --> 00:13:48,000
question because you have to synchronize

326
00:13:48,000 --> 00:13:49,839
them right

327
00:13:49,839 --> 00:13:51,600
so there's

328
00:13:51,600 --> 00:13:53,839
there's many points where you could

329
00:13:53,839 --> 00:13:55,680
have to merge

330
00:13:55,680 --> 00:13:57,519
what context are you talking about

331
00:13:57,519 --> 00:13:59,279
specifically

332
00:13:59,279 --> 00:14:00,839
well

333
00:14:00,839 --> 00:14:03,680
um i mean i i guess

334
00:14:03,680 --> 00:14:05,199
there's there's several that i think of

335
00:14:05,199 --> 00:14:08,480
as as related uh those being

336
00:14:08,480 --> 00:14:09,519
um

337
00:14:09,519 --> 00:14:11,920
things like uh multi-language channels

338
00:14:11,920 --> 00:14:14,720
uh for the audio streams uh merging the

339
00:14:14,720 --> 00:14:17,440
video and the audio um

340
00:14:17,440 --> 00:14:20,480
you know the the sort of uh

341
00:14:20,480 --> 00:14:22,079
uh

342
00:14:22,079 --> 00:14:25,120
if if you have any sort of user driven

343
00:14:25,120 --> 00:14:27,040
uh switching of views

344
00:14:27,040 --> 00:14:28,959
um that is important to have

345
00:14:28,959 --> 00:14:30,800
synchronized on the

346
00:14:30,800 --> 00:14:32,399
on the viewer side

347
00:14:32,399 --> 00:14:34,399
um if you've got

348
00:14:34,399 --> 00:14:35,120
and

349
00:14:35,120 --> 00:14:37,440
so i guess things like overlays also

350
00:14:37,440 --> 00:14:39,120
might be relevant here although i'm not

351
00:14:39,120 --> 00:14:40,079
sure

352
00:14:40,079 --> 00:14:42,240
maybe that is a different section

353
00:14:42,240 --> 00:14:44,959
um so but these are the kinds of things

354
00:14:44,959 --> 00:14:48,800
i was i was considering

355
00:14:49,600 --> 00:14:50,480
so

356
00:14:50,480 --> 00:14:53,680
they are an important concern but i

357
00:14:53,680 --> 00:14:55,440
don't think that that's

358
00:14:55,440 --> 00:14:57,680
particularly orthogonal because you'll

359
00:14:57,680 --> 00:14:59,760
have situations where

360
00:14:59,760 --> 00:15:01,440
at any point in this

361
00:15:01,440 --> 00:15:03,839
in in the chain where there may be

362
00:15:03,839 --> 00:15:06,160
multiple forms of media

363
00:15:06,160 --> 00:15:08,160
that need to be pushed through so the

364
00:15:08,160 --> 00:15:09,680
cameras out there that can do audio and

365
00:15:09,680 --> 00:15:11,199
video and then there's others that are

366
00:15:11,199 --> 00:15:13,600
just video only because they're used in

367
00:15:13,600 --> 00:15:15,440
a studio where it's assumed that audio

368
00:15:15,440 --> 00:15:17,360
is supplied separately

369
00:15:17,360 --> 00:15:19,440
um and they're kind of like lanes in the

370
00:15:19,440 --> 00:15:21,279
highway as it were and sometimes they

371
00:15:21,279 --> 00:15:23,839
merge off and sometimes they uh new

372
00:15:23,839 --> 00:15:26,000
lanes emerge depending on where they are

373
00:15:26,000 --> 00:15:28,079
in the chain and what what kind of what

374
00:15:28,079 --> 00:15:30,240
kind of things happening

375
00:15:30,240 --> 00:15:31,519
so part of the

376
00:15:31,519 --> 00:15:33,839
sort of

377
00:15:34,000 --> 00:15:36,959
solution space that this uh this work

378
00:15:36,959 --> 00:15:38,480
would need to address is how to

379
00:15:38,480 --> 00:15:40,800
synchronize those properly like rtp

380
00:15:40,800 --> 00:15:43,759
style with timestamps or whatever

381
00:15:43,759 --> 00:15:46,320
yes that may necessarily be a an

382
00:15:46,320 --> 00:15:48,880
important requirement to solve

383
00:15:48,880 --> 00:15:51,040
okay just wanted to

384
00:15:51,040 --> 00:15:52,639
see if i understood where that fit thank

385
00:15:52,639 --> 00:15:55,639
you

386
00:16:02,320 --> 00:16:04,880
so pete resnick just left a comment in

387
00:16:04,880 --> 00:16:06,880
the chat

388
00:16:06,880 --> 00:16:07,759
uh

389
00:16:07,759 --> 00:16:08,560
i

390
00:16:08,560 --> 00:16:11,519
i'm happy to answer this uh he says

391
00:16:11,519 --> 00:16:13,680
maybe the caffeine wore off but is there

392
00:16:13,680 --> 00:16:15,360
something about the use cases that are

393
00:16:15,360 --> 00:16:16,880
different in streaming that is currently

394
00:16:16,880 --> 00:16:18,880
going on i think the answer is no

395
00:16:18,880 --> 00:16:21,120
there's nothing different here we're

396
00:16:21,120 --> 00:16:24,560
just trying to be very clear about what

397
00:16:24,560 --> 00:16:25,920
is

398
00:16:25,920 --> 00:16:27,360
what what is out there what is the

399
00:16:27,360 --> 00:16:30,160
existing state of affairs in terms of

400
00:16:30,160 --> 00:16:32,399
where the applicability for this work

401
00:16:32,399 --> 00:16:35,720
might go

402
00:16:36,560 --> 00:16:38,000
no

403
00:16:38,000 --> 00:16:40,959
uh mozinati in in uh two more uh slide

404
00:16:40,959 --> 00:16:42,560
decks there'll be more descriptions

405
00:16:42,560 --> 00:16:43,920
about the use cases and i think it'll be

406
00:16:43,920 --> 00:16:46,000
clear what the real differences are

407
00:16:46,000 --> 00:16:48,160
between just today's traditional

408
00:16:48,160 --> 00:16:50,560
streaming and some of these uh

409
00:16:50,560 --> 00:16:53,920
new use cases that require maybe uh

410
00:16:53,920 --> 00:16:55,680
more advanced uh types of streaming

411
00:16:55,680 --> 00:16:57,360
lower latency types of streaming and

412
00:16:57,360 --> 00:16:59,839
maybe even more hybrid switching between

413
00:16:59,839 --> 00:17:02,160
extremely low latency streaming almost

414
00:17:02,160 --> 00:17:04,480
like video conferencing type latencies

415
00:17:04,480 --> 00:17:06,400
and traditional you know distribution

416
00:17:06,400 --> 00:17:08,000
delivery and

417
00:17:08,000 --> 00:17:10,559
for the comment about uh

418
00:17:10,559 --> 00:17:13,359
jake's coming about um

419
00:17:13,359 --> 00:17:15,119
i would take it as almost like control

420
00:17:15,119 --> 00:17:16,959
protocols or

421
00:17:16,959 --> 00:17:18,559
or uh

422
00:17:18,559 --> 00:17:19,839
um

423
00:17:19,839 --> 00:17:21,119
you know i didn't think that the the

424
00:17:21,119 --> 00:17:23,119
group was going to be looking at things

425
00:17:23,119 --> 00:17:25,439
like uh signaling and control protocols

426
00:17:25,439 --> 00:17:26,799
because you think about this you know at

427
00:17:26,799 --> 00:17:27,760
the bottom where there's media

428
00:17:27,760 --> 00:17:29,840
distribution and media transport then

429
00:17:29,840 --> 00:17:32,240
there'll also be you know feedback and

430
00:17:32,240 --> 00:17:33,840
control protocols

431
00:17:33,840 --> 00:17:36,160
and i didn't think that the people were

432
00:17:36,160 --> 00:17:37,360
in this group were going to be looking

433
00:17:37,360 --> 00:17:39,600
at the control protocols for things like

434
00:17:39,600 --> 00:17:43,520
user selection and things like that

435
00:17:44,720 --> 00:17:47,840
thanks spencer

436
00:17:48,160 --> 00:17:52,480
spencer dawkins uh i just wanted to add

437
00:17:52,559 --> 00:17:55,840
the draft that james and i worked on has

438
00:17:55,840 --> 00:17:57,039
a section

439
00:17:57,039 --> 00:17:59,120
trying to explain at a high level what

440
00:17:59,120 --> 00:18:00,799
the difference between interactive and

441
00:18:00,799 --> 00:18:03,440
live and

442
00:18:03,760 --> 00:18:05,520
not live i don't remember what we called

443
00:18:05,520 --> 00:18:07,600
it uh

444
00:18:07,600 --> 00:18:08,720
media

445
00:18:08,720 --> 00:18:10,799
uh you know basically how we were

446
00:18:10,799 --> 00:18:12,400
fitting things into those different

447
00:18:12,400 --> 00:18:14,080
sections

448
00:18:14,080 --> 00:18:17,760
and i should also mention that

449
00:18:17,760 --> 00:18:18,559
the

450
00:18:18,559 --> 00:18:20,799
slides have

451
00:18:20,799 --> 00:18:23,200
that james is presenting have

452
00:18:23,200 --> 00:18:25,039
links to the different sections in that

453
00:18:25,039 --> 00:18:26,080
draft

454
00:18:26,080 --> 00:18:28,799
so if you're trying to figure out things

455
00:18:28,799 --> 00:18:29,679
uh

456
00:18:29,679 --> 00:18:31,120
if you click you know if you don't if

457
00:18:31,120 --> 00:18:32,559
you have a copy of the slides and click

458
00:18:32,559 --> 00:18:33,440
on them

459
00:18:33,440 --> 00:18:35,760
uh that that would uh

460
00:18:35,760 --> 00:18:38,799
take you to the right place in the draft

461
00:18:38,799 --> 00:18:41,799
thanks

462
00:18:47,520 --> 00:18:49,440
okay

463
00:18:49,440 --> 00:18:52,320
let's go to the next part presentation

464
00:18:52,320 --> 00:18:57,600
now so ying uh i will put up the slides

465
00:18:57,600 --> 00:19:00,720
if you don't want to drown

466
00:19:00,720 --> 00:19:03,720
uh

467
00:19:12,559 --> 00:19:15,600
you can go ahead when you

468
00:19:15,919 --> 00:19:18,640
see the slides

469
00:19:19,840 --> 00:19:24,000
do i control the slide or not

470
00:19:24,000 --> 00:19:26,320
can

471
00:19:28,480 --> 00:19:30,799
now you should be able

472
00:19:30,799 --> 00:19:32,480
okay thanks

473
00:19:32,480 --> 00:19:34,559
um hi everyone my name is ying i'm a

474
00:19:34,559 --> 00:19:37,520
software engineer working on youtube's

475
00:19:37,520 --> 00:19:39,760
live streaming infrastructure

476
00:19:39,760 --> 00:19:41,760
so today i want to talk about the

477
00:19:41,760 --> 00:19:43,679
challenges we see

478
00:19:43,679 --> 00:19:47,039
in terms of live media ninja protocols

479
00:19:47,039 --> 00:19:50,559
based on our experience

480
00:19:50,559 --> 00:19:53,559
so

481
00:19:54,400 --> 00:19:56,559
first to borrow james

482
00:19:56,559 --> 00:19:59,360
uh diagram on the live media broadcast

483
00:19:59,360 --> 00:20:02,000
chain here um i just want to highlight

484
00:20:02,000 --> 00:20:05,440
the focus of the talk is on the

485
00:20:05,440 --> 00:20:08,880
live ingestion part of the chain and uh

486
00:20:08,880 --> 00:20:11,360
and also in particular um i'm talking

487
00:20:11,360 --> 00:20:14,320
about ingestion from clients to live

488
00:20:14,320 --> 00:20:17,600
stream live streaming platforms um so

489
00:20:17,600 --> 00:20:19,520
what i think is nice in this diagram is

490
00:20:19,520 --> 00:20:20,480
it

491
00:20:20,480 --> 00:20:22,720
shows the variety of different clients

492
00:20:22,720 --> 00:20:25,200
we need to support

493
00:20:25,200 --> 00:20:26,960
there are clients around the

494
00:20:26,960 --> 00:20:29,600
tv broadcast facilities where they

495
00:20:29,600 --> 00:20:30,640
use

496
00:20:30,640 --> 00:20:33,600
high-end hardware encoders or it can be

497
00:20:33,600 --> 00:20:36,000
ingestion from consumer level devices

498
00:20:36,000 --> 00:20:38,799
game consoles

499
00:20:38,799 --> 00:20:42,159
software such as obs or ingestion from

500
00:20:42,159 --> 00:20:45,120
browsers mobile phones so the diversity

501
00:20:45,120 --> 00:20:46,320
of the

502
00:20:46,320 --> 00:20:48,720
encoders ecosystem

503
00:20:48,720 --> 00:20:51,520
is actually poses some unique challenges

504
00:20:51,520 --> 00:20:55,840
in in terms of live ingestion

505
00:20:57,200 --> 00:20:59,600
so first i want to talk about some of

506
00:20:59,600 --> 00:21:00,840
the high level

507
00:21:00,840 --> 00:21:03,919
requirements we see are needed in

508
00:21:03,919 --> 00:21:06,480
live ingestion protocols so this is not

509
00:21:06,480 --> 00:21:08,240
necessarily exhaustive list it's just

510
00:21:08,240 --> 00:21:10,960
the requirements we consider that are

511
00:21:10,960 --> 00:21:13,200
important and aware that there are

512
00:21:13,200 --> 00:21:14,480
challenges

513
00:21:14,480 --> 00:21:15,600
um

514
00:21:15,600 --> 00:21:16,960
so first we

515
00:21:16,960 --> 00:21:18,960
we want to able to support high visual

516
00:21:18,960 --> 00:21:21,120
quality live streams

517
00:21:21,120 --> 00:21:24,799
um for example 4k hdr but not limiting

518
00:21:24,799 --> 00:21:26,960
to that we can see in the future there

519
00:21:26,960 --> 00:21:28,960
probably will be demand for even higher

520
00:21:28,960 --> 00:21:32,000
resolution higher frame rate content and

521
00:21:32,000 --> 00:21:35,120
this is mostly driven by broadcast level

522
00:21:35,120 --> 00:21:37,840
premium live events like sports gaming

523
00:21:37,840 --> 00:21:40,720
tournaments concerts but we also see

524
00:21:40,720 --> 00:21:42,799
increasing demand from

525
00:21:42,799 --> 00:21:45,120
general users especially in terms of

526
00:21:45,120 --> 00:21:48,320
gaming live streams

527
00:21:48,320 --> 00:21:49,280
um

528
00:21:49,280 --> 00:21:51,200
so this leads to the next requirement

529
00:21:51,200 --> 00:21:54,799
about coda agility in order to support

530
00:21:54,799 --> 00:21:57,280
high visual quality content we want to

531
00:21:57,280 --> 00:22:01,280
use newer video codecs such as hevc bpm

532
00:22:01,280 --> 00:22:03,200
vp9

533
00:22:03,200 --> 00:22:05,840
even av1 that can have better

534
00:22:05,840 --> 00:22:08,240
compression rate so that we can stream

535
00:22:08,240 --> 00:22:11,520
at high quality at a lower bit rate

536
00:22:11,520 --> 00:22:13,440
and also some of the new features like

537
00:22:13,440 --> 00:22:15,440
hdr also require

538
00:22:15,440 --> 00:22:18,640
requires new codec support so it is very

539
00:22:18,640 --> 00:22:20,559
important for protocol to be able to

540
00:22:20,559 --> 00:22:23,280
update it easily whenever there is new

541
00:22:23,280 --> 00:22:25,840
codec coming

542
00:22:25,840 --> 00:22:27,679
and next requirement is about being able

543
00:22:27,679 --> 00:22:29,840
to support low and ultra low latency and

544
00:22:29,840 --> 00:22:32,320
ultra low latency here we mean less than

545
00:22:32,320 --> 00:22:34,640
one second

546
00:22:34,640 --> 00:22:37,600
this is especially important for sports

547
00:22:37,600 --> 00:22:39,840
live streams and also game live streams

548
00:22:39,840 --> 00:22:41,919
where creators want to interact with

549
00:22:41,919 --> 00:22:44,640
viewers via chats

550
00:22:44,640 --> 00:22:46,720
here i want to highlight the need for

551
00:22:46,720 --> 00:22:48,400
the ability to

552
00:22:48,400 --> 00:22:52,320
do latency and quality trade-offs

553
00:22:52,320 --> 00:22:54,640
i think basically everyone likes wants

554
00:22:54,640 --> 00:22:56,159
low latency but

555
00:22:56,159 --> 00:22:57,919
um

556
00:22:57,919 --> 00:22:59,919
you theoretically can always drive down

557
00:22:59,919 --> 00:23:02,000
latency by lowering quality lowering a

558
00:23:02,000 --> 00:23:04,559
bit rate resolution or dropping frames

559
00:23:04,559 --> 00:23:07,200
but this may not necessarily be like

560
00:23:07,200 --> 00:23:10,000
always the trade-off we want uh for

561
00:23:10,000 --> 00:23:12,400
example uh if it's a live

562
00:23:12,400 --> 00:23:14,880
concert then maybe we can afford a

563
00:23:14,880 --> 00:23:17,280
little bit more uh latency in order to

564
00:23:17,280 --> 00:23:20,480
maintain high visual quality

565
00:23:20,480 --> 00:23:22,000
the next requirement we see that's

566
00:23:22,000 --> 00:23:24,799
important is ease of adoption among

567
00:23:24,799 --> 00:23:27,840
encoders for a new for an ingestion

568
00:23:27,840 --> 00:23:30,720
protocol as i show in a previous diagram

569
00:23:30,720 --> 00:23:32,880
because of there's a wide variety of

570
00:23:32,880 --> 00:23:35,200
encoders so

571
00:23:35,200 --> 00:23:37,679
how to make sure all of them can adopt a

572
00:23:37,679 --> 00:23:40,080
certain protocol is important and i

573
00:23:40,080 --> 00:23:42,000
think one of the keys for ease of

574
00:23:42,000 --> 00:23:46,000
adoption is ease of implementation

575
00:23:46,000 --> 00:23:48,720
and lastly

576
00:23:48,880 --> 00:23:50,799
we think it's important is the ease of

577
00:23:50,799 --> 00:23:53,120
large scale employment because we need

578
00:23:53,120 --> 00:23:55,760
to support many many concurrent live

579
00:23:55,760 --> 00:23:58,400
streams at the same time so being able

580
00:23:58,400 --> 00:24:01,039
to do load balancing correctly and

581
00:24:01,039 --> 00:24:04,320
easily is important and also we need to

582
00:24:04,320 --> 00:24:06,960
do regular service update and we want to

583
00:24:06,960 --> 00:24:08,960
do that without interrupting the live

584
00:24:08,960 --> 00:24:11,360
streams

585
00:24:13,200 --> 00:24:14,799
so next i want to talk about the

586
00:24:14,799 --> 00:24:17,200
challenges we see in some of the current

587
00:24:17,200 --> 00:24:20,000
live stream live ingestion protocols in

588
00:24:20,000 --> 00:24:22,480
respect to the requirements i just

589
00:24:22,480 --> 00:24:23,919
talked about

590
00:24:23,919 --> 00:24:26,960
so first of all rtmp is one of the most

591
00:24:26,960 --> 00:24:30,400
commonly used live ingestion protocols

592
00:24:30,400 --> 00:24:33,120
and the main challenge we have

593
00:24:33,120 --> 00:24:35,200
with it is it doesn't have an official

594
00:24:35,200 --> 00:24:38,799
way to add new codecs the protocol is

595
00:24:38,799 --> 00:24:40,880
is not a little bit stagnant it's not

596
00:24:40,880 --> 00:24:42,720
updated

597
00:24:42,720 --> 00:24:45,440
the last update was like 2012.

598
00:24:45,440 --> 00:24:46,480
furthermore

599
00:24:46,480 --> 00:24:49,840
it uses a 4-bit idiom for codex so

600
00:24:49,840 --> 00:24:53,120
only 16 values for the codec you can see

601
00:24:53,120 --> 00:24:55,679
we will easily run out of values for new

602
00:24:55,679 --> 00:24:56,960
codecs

603
00:24:56,960 --> 00:24:59,919
and also in terms of latency because it

604
00:24:59,919 --> 00:25:02,480
is directly on top of tcp

605
00:25:02,480 --> 00:25:03,760
so

606
00:25:03,760 --> 00:25:06,880
you can easily switch to use

607
00:25:06,880 --> 00:25:10,320
quick for it so it has the head of line

608
00:25:10,320 --> 00:25:12,559
blocking issue

609
00:25:12,559 --> 00:25:14,159
um

610
00:25:14,159 --> 00:25:16,720
so a few years ago we also added support

611
00:25:16,720 --> 00:25:19,200
for using webrtc to do

612
00:25:19,200 --> 00:25:22,320
live stream ingestion we added primarily

613
00:25:22,320 --> 00:25:25,279
to be able to support a live stream from

614
00:25:25,279 --> 00:25:27,840
browsers in order to lower the barrier

615
00:25:27,840 --> 00:25:28,720
for

616
00:25:28,720 --> 00:25:30,960
new creators

617
00:25:30,960 --> 00:25:33,200
our first party mobile clients also use

618
00:25:33,200 --> 00:25:35,279
webrtc for ingestion

619
00:25:35,279 --> 00:25:38,240
the main challenge we have with webrtc

620
00:25:38,240 --> 00:25:39,679
is

621
00:25:39,679 --> 00:25:42,320
it's it's quality because webrtc is

622
00:25:42,320 --> 00:25:43,520
created

623
00:25:43,520 --> 00:25:45,679
for video conferencing so

624
00:25:45,679 --> 00:25:48,240
it adapts the visual quality down very

625
00:25:48,240 --> 00:25:50,480
quickly in order to maintain

626
00:25:50,480 --> 00:25:52,880
conversational latency

627
00:25:52,880 --> 00:25:54,159
so

628
00:25:54,159 --> 00:25:56,720
we have a challenge with using it for

629
00:25:56,720 --> 00:25:58,880
premium content

630
00:25:58,880 --> 00:26:00,960
so in order to support premium content

631
00:26:00,960 --> 00:26:03,279
and also to support

632
00:26:03,279 --> 00:26:05,679
new codecs in order to

633
00:26:05,679 --> 00:26:08,559
do hdr we also added

634
00:26:08,559 --> 00:26:09,440
a

635
00:26:09,440 --> 00:26:10,720
live stream

636
00:26:10,720 --> 00:26:12,880
we also added support for ingestion

637
00:26:12,880 --> 00:26:16,320
using hrs and dash

638
00:26:16,320 --> 00:26:18,000
but these protocol also has its own

639
00:26:18,000 --> 00:26:20,159
issue where they have higher latency

640
00:26:20,159 --> 00:26:23,200
because they are segment based

641
00:26:23,200 --> 00:26:24,480
we understand that

642
00:26:24,480 --> 00:26:26,480
now there is a

643
00:26:26,480 --> 00:26:28,640
newer version of it that support low

644
00:26:28,640 --> 00:26:30,799
latency

645
00:26:30,799 --> 00:26:34,080
but we don't see a lot of demand like

646
00:26:34,080 --> 00:26:36,559
adoption from the encoders

647
00:26:36,559 --> 00:26:39,520
and furthermore because hrs and dash

648
00:26:39,520 --> 00:26:42,799
they're really created for delivery so

649
00:26:42,799 --> 00:26:45,200
some of its constructs like the playlist

650
00:26:45,200 --> 00:26:46,640
and manifest

651
00:26:46,640 --> 00:26:49,360
those are not really needed for

652
00:26:49,360 --> 00:26:51,279
ingestion but we still need to support

653
00:26:51,279 --> 00:26:54,159
it but they do add overhead

654
00:26:54,159 --> 00:26:55,200
in

655
00:26:55,200 --> 00:26:57,120
in live streaming

656
00:26:57,120 --> 00:26:58,000
um

657
00:26:58,000 --> 00:27:00,080
lastly the srt

658
00:27:00,080 --> 00:27:02,880
protocol is a relatively new protocol i

659
00:27:02,880 --> 00:27:04,240
think it's cr

660
00:27:04,240 --> 00:27:06,480
created mostly to

661
00:27:06,480 --> 00:27:08,960
solve some of the codec and latency

662
00:27:08,960 --> 00:27:10,000
issue

663
00:27:10,000 --> 00:27:12,080
we do see that it has a very good

664
00:27:12,080 --> 00:27:13,679
adoption among

665
00:27:13,679 --> 00:27:15,279
tv broadcast

666
00:27:15,279 --> 00:27:17,840
providers

667
00:27:17,840 --> 00:27:20,080
it is originally created for the

668
00:27:20,080 --> 00:27:23,760
point-to-point contribution use case

669
00:27:23,760 --> 00:27:26,320
the challenge we see is we're using it

670
00:27:26,320 --> 00:27:28,559
for large-scale deployment because it's

671
00:27:28,559 --> 00:27:31,520
because it is the udp based protocol

672
00:27:31,520 --> 00:27:35,279
so load balancing is not a given for

673
00:27:35,279 --> 00:27:36,880
um

674
00:27:36,880 --> 00:27:40,159
for off-the-shelf load balancer for udp

675
00:27:40,159 --> 00:27:42,399
and also its current

676
00:27:42,399 --> 00:27:44,240
life

677
00:27:44,240 --> 00:27:46,240
its current congestion control algorithm

678
00:27:46,240 --> 00:27:49,520
in the live mode may have some

679
00:27:49,520 --> 00:27:52,320
challenge for large-scale use

680
00:27:52,320 --> 00:27:55,360
so to summarize um

681
00:27:55,360 --> 00:27:56,960
we don't see currently we don't see a

682
00:27:56,960 --> 00:27:59,360
perfect solution for ingesting high-end

683
00:27:59,360 --> 00:28:02,320
content at ultra-low latency and at

684
00:28:02,320 --> 00:28:04,159
large scale

685
00:28:04,159 --> 00:28:06,000
would you see that quick

686
00:28:06,000 --> 00:28:08,080
can provide a unique solution for some

687
00:28:08,080 --> 00:28:10,159
of the challenges like

688
00:28:10,159 --> 00:28:11,840
deployment and

689
00:28:11,840 --> 00:28:13,919
latency

690
00:28:13,919 --> 00:28:14,880
so

691
00:28:14,880 --> 00:28:16,720
we're very happy to see that there are

692
00:28:16,720 --> 00:28:18,960
movements in this area there are

693
00:28:18,960 --> 00:28:21,440
proposed um quick based

694
00:28:21,440 --> 00:28:22,559
solutions

695
00:28:22,559 --> 00:28:25,200
um and some of them are explicit

696
00:28:25,200 --> 00:28:27,520
specifically focusing on live media

697
00:28:27,520 --> 00:28:28,559
ingest

698
00:28:28,559 --> 00:28:30,640
some are and some are like

699
00:28:30,640 --> 00:28:32,640
the design is initially for delivery but

700
00:28:32,640 --> 00:28:35,120
they can also be used for ingest

701
00:28:35,120 --> 00:28:37,120
but in general yeah we

702
00:28:37,120 --> 00:28:39,279
uh we're really looking forward to

703
00:28:39,279 --> 00:28:41,840
collaborate uh through the ietf

704
00:28:41,840 --> 00:28:44,960
community to find solutions that can

705
00:28:44,960 --> 00:28:48,240
address these challenges

706
00:28:50,480 --> 00:28:53,919
that's all from me thanks

707
00:28:55,520 --> 00:28:59,200
okay bernard

708
00:28:59,200 --> 00:29:01,840
uh yes

709
00:29:01,840 --> 00:29:02,640
so

710
00:29:02,640 --> 00:29:06,080
i'd like to talk a little bit about the

711
00:29:06,080 --> 00:29:08,000
trade-off between the latency and the

712
00:29:08,000 --> 00:29:10,559
quality so when you implemented the

713
00:29:10,559 --> 00:29:13,200
webrtc ingestion you actually natively

714
00:29:13,200 --> 00:29:14,640
you actually change the congestion

715
00:29:14,640 --> 00:29:16,960
control algorithm to

716
00:29:16,960 --> 00:29:20,799
favor the quality over the latency

717
00:29:20,799 --> 00:29:23,120
i'm wondering if the same problem exists

718
00:29:23,120 --> 00:29:25,840
with quick particularly the bbr

719
00:29:25,840 --> 00:29:27,919
congestion control in its probe rtt

720
00:29:27,919 --> 00:29:30,240
phase

721
00:29:30,480 --> 00:29:31,600
and

722
00:29:31,600 --> 00:29:34,080
whether you foresee a need to change the

723
00:29:34,080 --> 00:29:36,080
congestion control algorithm to again

724
00:29:36,080 --> 00:29:37,760
favor the quality

725
00:29:37,760 --> 00:29:41,480
uh over the latency

726
00:29:41,760 --> 00:29:42,210
um

727
00:29:42,210 --> 00:29:45,200
[Music]

728
00:29:45,200 --> 00:29:47,360
that is a that is a

729
00:29:47,360 --> 00:29:49,440
good question um

730
00:29:49,440 --> 00:29:50,720
i think

731
00:29:50,720 --> 00:29:53,279
we really need some more

732
00:29:53,279 --> 00:29:56,799
uh experience with testing it i think

733
00:29:56,799 --> 00:30:00,640
like using the bbr and quick

734
00:30:00,640 --> 00:30:02,240
i can't give a

735
00:30:02,240 --> 00:30:06,000
definite answer now but

736
00:30:07,200 --> 00:30:09,440
yeah now that that is a very good

737
00:30:09,440 --> 00:30:11,279
question i think we need more testing

738
00:30:11,279 --> 00:30:13,760
with that

739
00:30:16,000 --> 00:30:18,159
luke

740
00:30:18,159 --> 00:30:20,080
to answer bernard's question a little

741
00:30:20,080 --> 00:30:22,960
bit um i've implemented bbr

742
00:30:22,960 --> 00:30:24,320
for warp

743
00:30:24,320 --> 00:30:27,200
um and yeah we see the issues with uh

744
00:30:27,200 --> 00:30:30,559
probe rtt state i think it comes down to

745
00:30:30,559 --> 00:30:32,799
when you're doing frame based delivery

746
00:30:32,799 --> 00:30:34,320
you care way more about keeping queue

747
00:30:34,320 --> 00:30:36,480
sizes small

748
00:30:36,480 --> 00:30:38,000
and that's just never really been a

749
00:30:38,000 --> 00:30:40,960
concern for tcp and therefore quick

750
00:30:40,960 --> 00:30:43,840
based congestion control algorithms

751
00:30:43,840 --> 00:30:46,480
so i definitely see that

752
00:30:46,480 --> 00:30:48,159
at least it's going to be algorithms

753
00:30:48,159 --> 00:30:51,360
that should be suited towards live video

754
00:30:51,360 --> 00:30:53,440
and there's other issues like um

755
00:30:53,440 --> 00:30:55,919
my video is mostly application limited

756
00:30:55,919 --> 00:30:57,039
uh so

757
00:30:57,039 --> 00:30:58,480
a lot of the time you're not fully

758
00:30:58,480 --> 00:31:01,039
utilizing the congestion window and

759
00:31:01,039 --> 00:31:03,200
the algorithms aren't designed for that

760
00:31:03,200 --> 00:31:05,600
so there's just a huge swath of space

761
00:31:05,600 --> 00:31:09,279
for optimizing congestion control

762
00:31:09,279 --> 00:31:10,000
for

763
00:31:10,000 --> 00:31:14,919
you know any quick solution we do

764
00:31:21,039 --> 00:31:24,158
uh thanks spencer

765
00:31:27,600 --> 00:31:29,840
i want to thank ying and

766
00:31:29,840 --> 00:31:30,880
luke

767
00:31:30,880 --> 00:31:33,200
for bringing this presentation and the

768
00:31:33,200 --> 00:31:36,159
next presentations forward and i want to

769
00:31:36,159 --> 00:31:38,399
thank you both for uh answers to

770
00:31:38,399 --> 00:31:39,919
bernard's question

771
00:31:39,919 --> 00:31:42,480
i think that it's fair to say that the

772
00:31:42,480 --> 00:31:44,559
last time i asked about

773
00:31:44,559 --> 00:31:46,880
such things the

774
00:31:46,880 --> 00:31:49,679
possibility

775
00:31:49,840 --> 00:31:52,320
we just don't know that much

776
00:31:52,320 --> 00:31:53,279
in the

777
00:31:53,279 --> 00:31:55,360
congestion control

778
00:31:55,360 --> 00:31:57,200
iccrg

779
00:31:57,200 --> 00:31:59,519
sense of the word

780
00:31:59,519 --> 00:32:01,440
we don't we just don't know that much

781
00:32:01,440 --> 00:32:02,480
about

782
00:32:02,480 --> 00:32:05,919
the interaction of various

783
00:32:05,919 --> 00:32:08,240
uh congestion control mechanisms that

784
00:32:08,240 --> 00:32:09,679
might be used

785
00:32:09,679 --> 00:32:11,919
from the same endpoint and how they

786
00:32:11,919 --> 00:32:12,960
would

787
00:32:12,960 --> 00:32:13,760
uh

788
00:32:13,760 --> 00:32:15,760
they would play with each other

789
00:32:15,760 --> 00:32:17,840
the

790
00:32:17,840 --> 00:32:20,159
you know the big issue for like

791
00:32:20,159 --> 00:32:23,600
scream the media control or media or

792
00:32:23,600 --> 00:32:26,080
congestion control things was that they

793
00:32:26,080 --> 00:32:27,120
would not

794
00:32:27,120 --> 00:32:29,679
self congest you know

795
00:32:29,679 --> 00:32:31,760
self-congest that they would that they

796
00:32:31,760 --> 00:32:33,360
would not uh

797
00:32:33,360 --> 00:32:35,440
that they could that they could share

798
00:32:35,440 --> 00:32:37,039
bandwidth

799
00:32:37,039 --> 00:32:39,919
between themselves and other

800
00:32:39,919 --> 00:32:41,760
in uh

801
00:32:41,760 --> 00:32:43,919
connections that we're doing

802
00:32:43,919 --> 00:32:45,760
uh scream

803
00:32:45,760 --> 00:32:46,880
and so

804
00:32:46,880 --> 00:32:50,320
the question about having

805
00:32:50,320 --> 00:32:53,440
two arbitrary congestion mechanisms

806
00:32:53,440 --> 00:32:56,399
i think that that's still really early

807
00:32:56,399 --> 00:32:58,000
question

808
00:32:58,000 --> 00:32:59,060
but i could be wrong

809
00:32:59,060 --> 00:33:02,250
[Music]

810
00:33:02,880 --> 00:33:04,799
thanks harold

811
00:33:04,799 --> 00:33:06,720
i love this john

812
00:33:06,720 --> 00:33:08,960
just

813
00:33:09,600 --> 00:33:11,679
one thing i don't quite understand you

814
00:33:11,679 --> 00:33:14,000
mentioned that webrtc was problematic

815
00:33:14,000 --> 00:33:16,000
because it scaled down quality when

816
00:33:16,000 --> 00:33:18,399
congestion occurred

817
00:33:18,399 --> 00:33:20,080
now

818
00:33:20,080 --> 00:33:21,039
in the

819
00:33:21,039 --> 00:33:23,200
live ingestion use case you have a

820
00:33:23,200 --> 00:33:26,799
definite latency budget right

821
00:33:27,760 --> 00:33:29,120
yeah

822
00:33:29,120 --> 00:33:31,279
so

823
00:33:32,399 --> 00:33:35,519
that means that when you hit congestion

824
00:33:35,519 --> 00:33:39,760
you have to either reduce quality or

825
00:33:39,760 --> 00:33:42,799
increase latency right right

826
00:33:42,799 --> 00:33:44,640
yeah but it's just that

827
00:33:44,640 --> 00:33:45,600
kind of

828
00:33:45,600 --> 00:33:47,200
fundamental to

829
00:33:47,200 --> 00:33:48,559
right to the

830
00:33:48,559 --> 00:33:50,720
information theory of space

831
00:33:50,720 --> 00:33:52,480
so the question is really

832
00:33:52,480 --> 00:33:54,399
whether you can get

833
00:33:54,399 --> 00:33:56,399
if you have to drop latency

834
00:33:56,399 --> 00:33:57,840
drop per

835
00:33:57,840 --> 00:34:00,159
quality because of increa because

836
00:34:00,159 --> 00:34:01,760
latency otherwise will get increased too

837
00:34:01,760 --> 00:34:02,720
much

838
00:34:02,720 --> 00:34:04,880
whether you can get it fast back up fast

839
00:34:04,880 --> 00:34:06,720
enough i think

840
00:34:06,720 --> 00:34:09,199
and that is a common problem with every

841
00:34:09,199 --> 00:34:10,639
solution

842
00:34:10,639 --> 00:34:12,399
right

843
00:34:12,399 --> 00:34:15,199
yeah uh yeah i think that

844
00:34:15,199 --> 00:34:17,280
what i want to convey is the latency

845
00:34:17,280 --> 00:34:19,199
budget though is different for live

846
00:34:19,199 --> 00:34:20,639
stream versus

847
00:34:20,639 --> 00:34:23,839
video conferencing

848
00:34:24,159 --> 00:34:26,239
but the webrtc library

849
00:34:26,239 --> 00:34:28,239
that the commonly used library is

850
00:34:28,239 --> 00:34:29,199
beautiful

851
00:34:29,199 --> 00:34:32,079
video conferencing so it's really

852
00:34:32,079 --> 00:34:34,639
there are control knobs on it

853
00:34:34,639 --> 00:34:37,760
uh oh then um we would like to learn

854
00:34:37,760 --> 00:34:40,320
about that

855
00:34:42,159 --> 00:34:43,839
before we go on to next is close to

856
00:34:43,839 --> 00:34:45,599
queue currently let's see if we don't

857
00:34:45,599 --> 00:34:47,679
run out of time and

858
00:34:47,679 --> 00:34:48,960
so

859
00:34:48,960 --> 00:34:50,399
let's see where we are when we have gone

860
00:34:50,399 --> 00:34:53,040
through this cube

861
00:34:59,119 --> 00:35:02,320
you are using srt

862
00:35:02,320 --> 00:35:03,680
to do the

863
00:35:03,680 --> 00:35:06,000
fcme interest

864
00:35:06,000 --> 00:35:08,560
i wonder what's wrong with srp you

865
00:35:08,560 --> 00:35:10,800
mentioned it's difficult to do nice

866
00:35:10,800 --> 00:35:13,680
scale deployment

867
00:35:13,680 --> 00:35:14,800
uh

868
00:35:14,800 --> 00:35:16,800
yeah

869
00:35:16,800 --> 00:35:19,440
it's uh uh in terms of load balancing

870
00:35:19,440 --> 00:35:22,240
because of the the udp protocol itself

871
00:35:22,240 --> 00:35:25,599
right it's not connection based so

872
00:35:25,599 --> 00:35:28,000
um

873
00:35:28,079 --> 00:35:30,960
load balancing is definitely not a given

874
00:35:30,960 --> 00:35:33,040
i'm not saying you can't do it it's just

875
00:35:33,040 --> 00:35:36,800
more more complicated

876
00:35:40,560 --> 00:35:43,880
and um

877
00:35:51,520 --> 00:35:52,800
sorry hong i didn't hear if there was

878
00:35:52,800 --> 00:35:53,839
another part of your question or if

879
00:35:53,839 --> 00:35:57,000
you're done

880
00:35:58,160 --> 00:36:01,119
song udp and these connection id is

881
00:36:01,119 --> 00:36:02,480
undertuned

882
00:36:02,480 --> 00:36:04,560
kind of encrypted

883
00:36:04,560 --> 00:36:05,280
so

884
00:36:05,280 --> 00:36:08,000
you still need to do more things

885
00:36:08,000 --> 00:36:12,920
to use balancing on click right

886
00:36:14,000 --> 00:36:16,000
um

887
00:36:16,000 --> 00:36:19,359
that's true yeah i think the

888
00:36:19,359 --> 00:36:22,079
basically i think for quick though

889
00:36:22,079 --> 00:36:22,440
um

890
00:36:22,440 --> 00:36:23,680
[Music]

891
00:36:23,680 --> 00:36:26,400
because it's connection based and also

892
00:36:26,400 --> 00:36:28,400
load balancing is

893
00:36:28,400 --> 00:36:30,880
much well documented i think that there

894
00:36:30,880 --> 00:36:33,359
are a lot of documentation on how to do

895
00:36:33,359 --> 00:36:36,720
load balancing for quick

896
00:36:39,440 --> 00:36:42,400
thanks uh stefan

897
00:36:42,400 --> 00:36:47,760
so i have a few things one is i want to

898
00:36:48,480 --> 00:36:50,000
support harold

899
00:36:50,000 --> 00:36:52,000
in saying that i don't think we have a

900
00:36:52,000 --> 00:36:55,040
fundamental problem with

901
00:36:55,040 --> 00:36:58,400
the webrtc protocol suite

902
00:36:58,400 --> 00:37:02,560
when it comes to the trade-off between

903
00:37:02,560 --> 00:37:03,980
latency and

904
00:37:03,980 --> 00:37:05,520
[Music]

905
00:37:05,520 --> 00:37:06,720
quality

906
00:37:06,720 --> 00:37:08,400
i think

907
00:37:08,400 --> 00:37:10,880
we may have a problem with the current

908
00:37:10,880 --> 00:37:13,839
webrtc implementations

909
00:37:13,839 --> 00:37:15,440
right

910
00:37:15,440 --> 00:37:17,599
we may not even have a problem with

911
00:37:17,599 --> 00:37:20,079
implementations themselves but a problem

912
00:37:20,079 --> 00:37:22,400
with the way how the implementations are

913
00:37:22,400 --> 00:37:23,680
configured

914
00:37:23,680 --> 00:37:26,160
so uh there's indeed a lot of knobs that

915
00:37:26,160 --> 00:37:29,200
can be played with so i i think it

916
00:37:29,200 --> 00:37:31,920
in that regard uh the slides may be a

917
00:37:31,920 --> 00:37:34,320
little bit misleading because as harold

918
00:37:34,320 --> 00:37:36,400
said and i agree with that

919
00:37:36,400 --> 00:37:39,839
the problem is a fundamental one

920
00:37:39,839 --> 00:37:42,720
which should occur in the same way with

921
00:37:42,720 --> 00:37:44,800
all the other protocols right

922
00:37:44,800 --> 00:37:46,560
so that's point number one point number

923
00:37:46,560 --> 00:37:49,280
two is uh i said that a thousand times i

924
00:37:49,280 --> 00:37:50,640
say it again congestion control is

925
00:37:50,640 --> 00:37:52,880
overrated here in this organization

926
00:37:52,880 --> 00:37:55,200
um the networks nowadays are

927
00:37:55,200 --> 00:37:57,280
sufficiently elastic that

928
00:37:57,280 --> 00:37:58,560
you know

929
00:37:58,560 --> 00:38:01,440
you can't push out more for a while

930
00:38:01,440 --> 00:38:03,839
without any everything melting down

931
00:38:03,839 --> 00:38:06,000
certainly for and for a used case where

932
00:38:06,000 --> 00:38:07,760
you basically have only one stream like

933
00:38:07,760 --> 00:38:10,800
that ingestion right

934
00:38:10,800 --> 00:38:13,599
what happens in practice is people just

935
00:38:13,599 --> 00:38:16,400
ignore it and things work just fine

936
00:38:16,400 --> 00:38:18,720
so and that's something which would

937
00:38:18,720 --> 00:38:20,800
probably require a lot of or at least

938
00:38:20,800 --> 00:38:22,560
some software work

939
00:38:22,560 --> 00:38:26,079
both on the current webrtc

940
00:38:26,079 --> 00:38:27,839
uh senders

941
00:38:27,839 --> 00:38:30,880
and also in the quick stack potentially

942
00:38:30,880 --> 00:38:33,040
so my third thing is and that's

943
00:38:33,040 --> 00:38:35,359
independent of this draft here

944
00:38:35,359 --> 00:38:37,040
i think

945
00:38:37,040 --> 00:38:38,640
an independent of this light deck i

946
00:38:38,640 --> 00:38:40,640
think it's time that

947
00:38:40,640 --> 00:38:44,240
we put together a draft that

948
00:38:44,240 --> 00:38:47,119
defines our view on the terminology for

949
00:38:47,119 --> 00:38:49,280
those various latencies

950
00:38:49,280 --> 00:38:51,520
right when i hear ultra

951
00:38:51,520 --> 00:38:53,760
ultra low latency and i hear sub

952
00:38:53,760 --> 00:38:55,200
sections here

953
00:38:55,200 --> 00:38:56,480
something

954
00:38:56,480 --> 00:38:58,240
my brain starts spinning i come from the

955
00:38:58,240 --> 00:39:00,079
video coding field the ultra high

956
00:39:00,079 --> 00:39:03,040
latency there is meant like

957
00:39:03,040 --> 00:39:05,119
single digit milliseconds

958
00:39:05,119 --> 00:39:06,560
right

959
00:39:06,560 --> 00:39:09,119
basically you you start shipping packets

960
00:39:09,119 --> 00:39:11,440
before you have encoded a whole frame

961
00:39:11,440 --> 00:39:13,200
on the other hand some of the tv guys

962
00:39:13,200 --> 00:39:17,200
think ultra high ultra low latency is

963
00:39:17,200 --> 00:39:19,359
when you don't send a whole crop

964
00:39:19,359 --> 00:39:22,480
so a group of pictures right so someone

965
00:39:22,480 --> 00:39:23,520
should

966
00:39:23,520 --> 00:39:26,079
write a draft maybe i write that myself

967
00:39:26,079 --> 00:39:28,880
one day yeah and and just just

968
00:39:28,880 --> 00:39:31,520
just put that terminology problem aside

969
00:39:31,520 --> 00:39:34,320
once and for good thank you

970
00:39:34,320 --> 00:39:36,240
i'll just jump in and say that uh with

971
00:39:36,240 --> 00:39:38,800
respect to that last point uh that this

972
00:39:38,800 --> 00:39:40,400
draft that james and spencer written

973
00:39:40,400 --> 00:39:42,320
does have a classification of different

974
00:39:42,320 --> 00:39:44,160
things and tries to

975
00:39:44,160 --> 00:39:46,720
demarcate ultra low latencies lower than

976
00:39:46,720 --> 00:39:48,079
one second because i think there's an

977
00:39:48,079 --> 00:39:50,400
agreement that one second is not really

978
00:39:50,400 --> 00:39:52,800
then we need an ultra ultra low latency

979
00:39:52,800 --> 00:39:54,880
or super low latency or

980
00:39:54,880 --> 00:39:56,880
come

981
00:39:56,880 --> 00:39:59,040
maybe the easiest way would be just

982
00:39:59,040 --> 00:40:01,280
forget about the terminology and just

983
00:40:01,280 --> 00:40:02,560
use

984
00:40:02,560 --> 00:40:05,280
categories like below a millisecond up

985
00:40:05,280 --> 00:40:06,880
to 10 milliseconds up to 100

986
00:40:06,880 --> 00:40:10,079
milliseconds up to one second up to five

987
00:40:10,079 --> 00:40:12,640
seconds and up to an hour yeah in fact

988
00:40:12,640 --> 00:40:14,800
that i think the draft calls it like ull

989
00:40:14,800 --> 00:40:18,319
250 and ull 100 and things like that so

990
00:40:18,319 --> 00:40:19,839
um thanks

991
00:40:19,839 --> 00:40:22,400
uh cullen

992
00:40:22,640 --> 00:40:24,800
so i want to just come back to the uh

993
00:40:24,800 --> 00:40:26,640
the congestion control issue because you

994
00:40:26,640 --> 00:40:28,319
know like it's itf there's nothing more

995
00:40:28,319 --> 00:40:29,670
important than congestion control

996
00:40:29,670 --> 00:40:30,550
[Laughter]

997
00:40:30,550 --> 00:40:32,319
[Music]

998
00:40:32,319 --> 00:40:33,200
the

999
00:40:33,200 --> 00:40:34,079
um

1000
00:40:34,079 --> 00:40:35,440
i don't want to give the impression that

1001
00:40:35,440 --> 00:40:37,119
people have not played deeply with the

1002
00:40:37,119 --> 00:40:38,960
congestion control and quick we unders

1003
00:40:38,960 --> 00:40:40,319
like there's a ton of different people

1004
00:40:40,319 --> 00:40:41,680
including us have done a lot of

1005
00:40:41,680 --> 00:40:43,119
experiments with us i've played with it

1006
00:40:43,119 --> 00:40:44,160
i've implemented alternative

1007
00:40:44,160 --> 00:40:46,000
implementations we've been working

1008
00:40:46,000 --> 00:40:47,359
closely with christian

1009
00:40:47,359 --> 00:40:48,880
on the quick implementation some you

1010
00:40:48,880 --> 00:40:51,040
know some of these types of things

1011
00:40:51,040 --> 00:40:52,640
what i would say though that's relevant

1012
00:40:52,640 --> 00:40:55,280
for this buff here is that

1013
00:40:55,280 --> 00:40:57,440
uh i i think there are things you could

1014
00:40:57,440 --> 00:40:59,359
do to the quick congestion controller

1015
00:40:59,359 --> 00:41:01,119
that would improve it for media no

1016
00:41:01,119 --> 00:41:03,040
matter what type of media what what

1017
00:41:03,040 --> 00:41:05,200
version of low latency you you think

1018
00:41:05,200 --> 00:41:07,119
you're dealing with right uh and we know

1019
00:41:07,119 --> 00:41:08,480
some of those and they seem like they

1020
00:41:08,480 --> 00:41:09,760
can easily fit in with the quick

1021
00:41:09,760 --> 00:41:10,880
framework i think that's something

1022
00:41:10,880 --> 00:41:12,400
that's completely separate from this

1023
00:41:12,400 --> 00:41:14,000
work can be taken to the quick working

1024
00:41:14,000 --> 00:41:15,839
group of how to have something that's

1025
00:41:15,839 --> 00:41:17,599
done for that but what this working

1026
00:41:17,599 --> 00:41:19,440
group i think needs to focus

1027
00:41:19,440 --> 00:41:21,520
on is given whatever you do getting

1028
00:41:21,520 --> 00:41:23,280
quick which it is what it is today and

1029
00:41:23,280 --> 00:41:24,880
you get other things is you know how do

1030
00:41:24,880 --> 00:41:28,560
we build the type of uh rate adaptation

1031
00:41:28,560 --> 00:41:30,319
and how do we interact with that or you

1032
00:41:30,319 --> 00:41:32,480
know how do we adapt what we're trying

1033
00:41:32,480 --> 00:41:34,560
to accomplish as an application layer on

1034
00:41:34,560 --> 00:41:36,960
top of what quick basically gives us

1035
00:41:36,960 --> 00:41:38,960
and it's very clear that you can get a

1036
00:41:38,960 --> 00:41:40,960
fair amount of you can get a long ways

1037
00:41:40,960 --> 00:41:42,880
on quick as it stands today with no

1038
00:41:42,880 --> 00:41:44,480
changes and you could probably get

1039
00:41:44,480 --> 00:41:46,000
slightly better if you made some changes

1040
00:41:46,000 --> 00:41:47,119
to quick and those can be proposed

1041
00:41:47,119 --> 00:41:48,319
separately over to the quick working

1042
00:41:48,319 --> 00:41:50,720
group uh so that would

1043
00:41:50,720 --> 00:41:52,319
that would be my view but i so i don't

1044
00:41:52,319 --> 00:41:53,359
think we're talking a lot about the

1045
00:41:53,359 --> 00:41:54,800
congestion control issues and how we

1046
00:41:54,800 --> 00:41:56,720
might want to change bbr

1047
00:41:56,720 --> 00:41:59,280
and all of those those issues here but i

1048
00:41:59,280 --> 00:42:00,960
do think that people have thought about

1049
00:42:00,960 --> 00:42:02,319
that a lot and done a ton of experiments

1050
00:42:02,319 --> 00:42:04,880
with that's it

1051
00:42:06,160 --> 00:42:07,760
thanks colin okay victor's got the last

1052
00:42:07,760 --> 00:42:10,000
word

1053
00:42:11,119 --> 00:42:13,440
okay uh can you kermit

1054
00:42:13,440 --> 00:42:14,319
yes

1055
00:42:14,319 --> 00:42:17,200
okay so two things the first thing is

1056
00:42:17,200 --> 00:42:19,599
about congestion control quickly the

1057
00:42:19,599 --> 00:42:21,920
person who spent a lot of time working

1058
00:42:21,920 --> 00:42:25,040
congestion control for life and

1059
00:42:25,040 --> 00:42:27,920
non-live media delivery

1060
00:42:27,920 --> 00:42:32,240
uh at youtube it does matter a lot

1061
00:42:32,240 --> 00:42:33,440
uh to

1062
00:42:33,440 --> 00:42:36,720
user experience uh and

1063
00:42:36,720 --> 00:42:37,760
uh

1064
00:42:37,760 --> 00:42:39,839
in non-trivial way

1065
00:42:39,839 --> 00:42:43,760
uh the second is more to comment about

1066
00:42:43,760 --> 00:42:47,119
webrtc uh and i'm having a little bit of

1067
00:42:47,119 --> 00:42:49,599
deja vu here because when web transport

1068
00:42:49,599 --> 00:42:51,200
was first proposed

1069
00:42:51,200 --> 00:42:54,240
uh people assured me that things can be

1070
00:42:54,240 --> 00:42:56,160
solved the web transport laws can be

1071
00:42:56,160 --> 00:42:58,240
solved with webrtc data channels you

1072
00:42:58,240 --> 00:43:00,880
just need to implement sdp and then

1073
00:43:00,880 --> 00:43:03,760
implement ice uh

1074
00:43:03,760 --> 00:43:05,839
things that run on top of it and then

1075
00:43:05,839 --> 00:43:08,480
implement a ctp and then there are also

1076
00:43:08,480 --> 00:43:11,520
dragons uh

1077
00:43:11,520 --> 00:43:14,640
and all of that is true because webrtc

1078
00:43:14,640 --> 00:43:16,640
is like

1079
00:43:16,640 --> 00:43:18,960
network-wise during complete in the

1080
00:43:18,960 --> 00:43:22,480
sense it can do anything but

1081
00:43:22,480 --> 00:43:24,880
that doesn't mean it is the best tool

1082
00:43:24,880 --> 00:43:27,680
for the jobs that is to say if we went

1083
00:43:27,680 --> 00:43:30,000
through that there are people who tried

1084
00:43:30,000 --> 00:43:33,920
to use it for delivering high quality

1085
00:43:33,920 --> 00:43:37,200
live media and their experience was that

1086
00:43:37,200 --> 00:43:39,839
it is not ready in the state it is and

1087
00:43:39,839 --> 00:43:42,560
the answer the question would be

1088
00:43:42,560 --> 00:43:45,280
do we really want to turn webrtc into

1089
00:43:45,280 --> 00:43:47,920
something that can do this or should we

1090
00:43:47,920 --> 00:43:50,160
start building with a more

1091
00:43:50,160 --> 00:43:52,400
with a different starting point like

1092
00:43:52,400 --> 00:43:54,640
quick

1093
00:43:54,640 --> 00:43:57,119
and i think at least for me personally

1094
00:43:57,119 --> 00:43:59,760
quick seems to be more promising because

1095
00:43:59,760 --> 00:44:00,560
quick

1096
00:44:00,560 --> 00:44:04,160
dash over http 3 is a really mature

1097
00:44:04,160 --> 00:44:07,960
widely deployed solution

1098
00:44:12,560 --> 00:44:15,040
thank you ying and luke

1099
00:44:15,040 --> 00:44:18,560
let's go on with luke um

1100
00:44:20,640 --> 00:44:22,800
hello um so i've got some

1101
00:44:22,800 --> 00:44:24,640
non-professional slides just to mix it

1102
00:44:24,640 --> 00:44:27,680
up um but yeah i'm luke uh i work in

1103
00:44:27,680 --> 00:44:30,560
twitch for a while now and uh

1104
00:44:30,560 --> 00:44:32,720
um amazon

1105
00:44:32,720 --> 00:44:34,480
um so i wanna talk about distribution

1106
00:44:34,480 --> 00:44:36,880
mostly focusing on the requirements and

1107
00:44:36,880 --> 00:44:39,119
use cases and you know maybe going a

1108
00:44:39,119 --> 00:44:40,720
little bit into the flame war that is

1109
00:44:40,720 --> 00:44:42,079
this protocol

1110
00:44:42,079 --> 00:44:45,520
protocol can do x y z

1111
00:44:45,760 --> 00:44:48,079
yeah distribution um

1112
00:44:48,079 --> 00:44:49,200
the

1113
00:44:49,200 --> 00:44:51,280
the main difference with distribution is

1114
00:44:51,280 --> 00:44:54,160
uh versus ingest is uh this fan app

1115
00:44:54,160 --> 00:44:57,200
mechanism uh it's no longer a one-to-one

1116
00:44:57,200 --> 00:44:59,520
protocol you have to make sure that

1117
00:44:59,520 --> 00:45:01,200
whatever distribution protocol is

1118
00:45:01,200 --> 00:45:03,440
designed to be replicated

1119
00:45:03,440 --> 00:45:06,160
and passed off multiple hops

1120
00:45:06,160 --> 00:45:08,880
this includes passing off the cdns

1121
00:45:08,880 --> 00:45:10,960
this includes just going around the

1122
00:45:10,960 --> 00:45:12,000
world

1123
00:45:12,000 --> 00:45:13,920
and fanning out to as many users as

1124
00:45:13,920 --> 00:45:16,000
possible so one broadcaster multiple

1125
00:45:16,000 --> 00:45:18,560
viewers this has some ramifications um

1126
00:45:18,560 --> 00:45:19,839
the big one is you just can't have

1127
00:45:19,839 --> 00:45:22,480
feedback you can't have the viewer

1128
00:45:22,480 --> 00:45:24,079
send something to the encoder say hey

1129
00:45:24,079 --> 00:45:26,000
lower your bitrate it just doesn't work

1130
00:45:26,000 --> 00:45:27,440
because you have too many viewers trying

1131
00:45:27,440 --> 00:45:29,280
to watch the same content

1132
00:45:29,280 --> 00:45:30,560
um

1133
00:45:30,560 --> 00:45:31,839
and uh

1134
00:45:31,839 --> 00:45:33,839
so it does limit the space a little bit

1135
00:45:33,839 --> 00:45:35,839
your solutions um

1136
00:45:35,839 --> 00:45:37,520
uh you can't

1137
00:45:37,520 --> 00:45:38,400
so that's why there's different

1138
00:45:38,400 --> 00:45:41,440
protocols typically

1139
00:45:42,160 --> 00:45:44,240
the other thing that's uh well i kind of

1140
00:45:44,240 --> 00:45:46,560
mentioned here is congestion because we

1141
00:45:46,560 --> 00:45:48,160
can't tell the encoder hey lower your

1142
00:45:48,160 --> 00:45:49,920
bitrate we need to drop something we

1143
00:45:49,920 --> 00:45:51,119
need to somehow

1144
00:45:51,119 --> 00:45:52,960
lower the

1145
00:45:52,960 --> 00:45:53,920
bit rate

1146
00:45:53,920 --> 00:45:56,560
this is typically done using abr the

1147
00:45:56,560 --> 00:45:58,480
idea is that you create different

1148
00:45:58,480 --> 00:46:00,880
renditions and you can

1149
00:46:00,880 --> 00:46:02,960
i i've got boundaries you can switch

1150
00:46:02,960 --> 00:46:05,520
between them it's very jerky uh it's

1151
00:46:05,520 --> 00:46:08,160
very slow and dramatic you kind of have

1152
00:46:08,160 --> 00:46:10,560
to plan in advance so if i'm running

1153
00:46:10,560 --> 00:46:12,400
into congestion right now

1154
00:46:12,400 --> 00:46:13,920
cues are building up my buffer's

1155
00:46:13,920 --> 00:46:15,200
depleting

1156
00:46:15,200 --> 00:46:18,000
and in two seconds i'll be able to

1157
00:46:18,000 --> 00:46:20,720
like jump down five megabits per second

1158
00:46:20,720 --> 00:46:22,240
all of a sudden

1159
00:46:22,240 --> 00:46:24,480
um we don't really see frame dropping

1160
00:46:24,480 --> 00:46:27,280
too much in distribution um but

1161
00:46:27,280 --> 00:46:28,960
that's also an option that would be

1162
00:46:28,960 --> 00:46:30,800
another way to reduce the bitrate

1163
00:46:30,800 --> 00:46:33,200
uh and typically

1164
00:46:33,200 --> 00:46:34,800
instead you uh these particles will

1165
00:46:34,800 --> 00:46:36,319
buffer uh

1166
00:46:36,319 --> 00:46:38,720
hls you you've seen it like in dash if

1167
00:46:38,720 --> 00:46:40,800
you've ever just your buffer runs out

1168
00:46:40,800 --> 00:46:43,040
because this abr wasn't fast enough for

1169
00:46:43,040 --> 00:46:44,400
congestion control

1170
00:46:44,400 --> 00:46:46,400
uh you pause and you wait till the

1171
00:46:46,400 --> 00:46:49,200
buffer fills up

1172
00:46:51,119 --> 00:46:52,640
um

1173
00:46:52,640 --> 00:46:54,079
the other thing is kind of unique for

1174
00:46:54,079 --> 00:46:56,720
distribution is latency so this

1175
00:46:56,720 --> 00:46:58,880
i imagine what we talked about a lot

1176
00:46:58,880 --> 00:47:01,680
uh i don't like talking numbers i think

1177
00:47:01,680 --> 00:47:03,440
i see the chat people still arguing over

1178
00:47:03,440 --> 00:47:06,960
like is 25 or 100 or right threshold

1179
00:47:06,960 --> 00:47:09,359
it really just depends on the broadcast

1180
00:47:09,359 --> 00:47:10,640
like what the

1181
00:47:10,640 --> 00:47:12,400
pres and even the viewer

1182
00:47:12,400 --> 00:47:14,400
uh what the preference are so um if i'm

1183
00:47:14,400 --> 00:47:15,440
doing

1184
00:47:15,440 --> 00:47:17,359
a presentation like this actually the

1185
00:47:17,359 --> 00:47:18,560
latency doesn't matter that much it

1186
00:47:18,560 --> 00:47:19,359
could be

1187
00:47:19,359 --> 00:47:21,440
i put i call interactive latency like

1188
00:47:21,440 --> 00:47:22,960
people in chat can say stuff but they

1189
00:47:22,960 --> 00:47:25,200
don't need to be able to talk back to me

1190
00:47:25,200 --> 00:47:27,200
um obviously if you have a conversation

1191
00:47:27,200 --> 00:47:29,359
you want real time you want to be

1192
00:47:29,359 --> 00:47:30,400
um

1193
00:47:30,400 --> 00:47:31,760
you want to be able to talk to another

1194
00:47:31,760 --> 00:47:34,319
person but somebody is also

1195
00:47:34,319 --> 00:47:36,559
watching from home has no intention of

1196
00:47:36,559 --> 00:47:38,160
interacting with chat and they can watch

1197
00:47:38,160 --> 00:47:39,440
it lossless maybe they don't want to

1198
00:47:39,440 --> 00:47:40,880
drop any data at all they want to see

1199
00:47:40,880 --> 00:47:42,160
every pixel

1200
00:47:42,160 --> 00:47:43,760
um like you know they're watching a

1201
00:47:43,760 --> 00:47:44,880
soccer game

1202
00:47:44,880 --> 00:47:46,880
so uh like for the soccer example you

1203
00:47:46,880 --> 00:47:50,160
can have one one viewer might care about

1204
00:47:50,160 --> 00:47:52,400
they need real time they need that their

1205
00:47:52,400 --> 00:47:55,280
coach or something they need to see

1206
00:47:55,280 --> 00:47:58,079
the the game asap you have another side

1207
00:47:58,079 --> 00:48:00,079
where people are just um maybe they're

1208
00:48:00,079 --> 00:48:01,280
betting on the game maybe they're

1209
00:48:01,280 --> 00:48:02,800
chatting with their friends they want

1210
00:48:02,800 --> 00:48:04,079
lower latency there they won't be

1211
00:48:04,079 --> 00:48:05,680
interactive and then the further

1212
00:48:05,680 --> 00:48:07,520
spectrum you have even the same people

1213
00:48:07,520 --> 00:48:09,119
watching the same game

1214
00:48:09,119 --> 00:48:10,480
but they want to see all the action they

1215
00:48:10,480 --> 00:48:12,240
don't want to miss anything

1216
00:48:12,240 --> 00:48:13,359
uh so

1217
00:48:13,359 --> 00:48:15,119
yes the broadcast matters but i think

1218
00:48:15,119 --> 00:48:16,480
the big thing with distribution is the

1219
00:48:16,480 --> 00:48:18,559
viewer matters and the viewers network

1220
00:48:18,559 --> 00:48:21,040
especially somebody in the us on fiber

1221
00:48:21,040 --> 00:48:22,559
can watch at a lower latency than

1222
00:48:22,559 --> 00:48:25,839
somebody in brazil on a cellular network

1223
00:48:25,839 --> 00:48:27,520
um just

1224
00:48:27,520 --> 00:48:29,440
and the the way you tweak the buffer

1225
00:48:29,440 --> 00:48:33,520
size is very important for distribution

1226
00:48:33,680 --> 00:48:36,640
and hence the latency

1227
00:48:36,960 --> 00:48:38,160
um and the other thing that doesn't get

1228
00:48:38,160 --> 00:48:40,079
talked about too much is compatibility

1229
00:48:40,079 --> 00:48:44,160
so um we have a lot of viewers uh

1230
00:48:44,160 --> 00:48:45,280
and we need to make sure it works on

1231
00:48:45,280 --> 00:48:48,160
every device uh in a broadcast scenario

1232
00:48:48,160 --> 00:48:49,839
you can get away a lot of the times with

1233
00:48:49,839 --> 00:48:53,920
saying like i have a studio or i have a

1234
00:48:53,920 --> 00:48:55,359
dedicated software i can run on the

1235
00:48:55,359 --> 00:48:57,760
person's computer to create this stream

1236
00:48:57,760 --> 00:49:00,240
uh but for the distribution use case we

1237
00:49:00,240 --> 00:49:02,160
just don't have that luxury all the time

1238
00:49:02,160 --> 00:49:03,839
like it just needs to work on their tv

1239
00:49:03,839 --> 00:49:05,760
it needs to work in their browser

1240
00:49:05,760 --> 00:49:07,599
uh and it needs to uh

1241
00:49:07,599 --> 00:49:09,680
uh it needs to work on their phone and

1242
00:49:09,680 --> 00:49:11,359
again their network it needs to work

1243
00:49:11,359 --> 00:49:14,319
wherever they are in the world uh

1244
00:49:14,319 --> 00:49:15,920
you could be watching somebody streaming

1245
00:49:15,920 --> 00:49:17,440
from the us you could be watching from

1246
00:49:17,440 --> 00:49:20,319
korea uh again on us on a mobile device

1247
00:49:20,319 --> 00:49:21,119
on a

1248
00:49:21,119 --> 00:49:22,720
on a desktop and this has a lot of

1249
00:49:22,720 --> 00:49:25,040
ramifications for the protocol

1250
00:49:25,040 --> 00:49:26,160
um

1251
00:49:26,160 --> 00:49:27,599
and uh

1252
00:49:27,599 --> 00:49:29,359
of course that's what we run into a lot

1253
00:49:29,359 --> 00:49:30,400
honestly

1254
00:49:30,400 --> 00:49:31,680
the biggest thing with distribution i

1255
00:49:31,680 --> 00:49:34,240
think these are limited uh to only a

1256
00:49:34,240 --> 00:49:35,520
handful of protocols based on

1257
00:49:35,520 --> 00:49:39,520
compatibility more than anything else

1258
00:49:40,720 --> 00:49:42,880
so speaking of the protocols uh so

1259
00:49:42,880 --> 00:49:45,920
twitch is an hls stack um

1260
00:49:45,920 --> 00:49:47,839
specifically we're using what we call

1261
00:49:47,839 --> 00:49:50,880
lhls it's a chunk transfer

1262
00:49:50,880 --> 00:49:51,920
um

1263
00:49:51,920 --> 00:49:54,319
variant that we developed

1264
00:49:54,319 --> 00:49:56,800
um also if you want more details i sent

1265
00:49:56,800 --> 00:50:00,240
out at google doc about this before uh

1266
00:50:00,240 --> 00:50:02,000
the talk to the mailing list

1267
00:50:02,000 --> 00:50:03,760
uh but the main issues with all the

1268
00:50:03,760 --> 00:50:05,839
different flavors of hls

1269
00:50:05,839 --> 00:50:07,359
is uh

1270
00:50:07,359 --> 00:50:09,839
it's got headphone blocking the idea is

1271
00:50:09,839 --> 00:50:12,720
that all the data must arrive like you

1272
00:50:12,720 --> 00:50:14,559
must download every segment and every

1273
00:50:14,559 --> 00:50:16,079
segment depends on every previous

1274
00:50:16,079 --> 00:50:18,240
segment which means every frame depends

1275
00:50:18,240 --> 00:50:20,000
on every previous frame

1276
00:50:20,000 --> 00:50:22,000
uh which means you need a large buffer

1277
00:50:22,000 --> 00:50:25,520
to handle any variations in the network

1278
00:50:25,520 --> 00:50:27,680
there are obviously uh

1279
00:50:27,680 --> 00:50:29,680
ways to reduce latency like the fact

1280
00:50:29,680 --> 00:50:31,119
that you have these different flavors of

1281
00:50:31,119 --> 00:50:33,119
hls but you're still fundamentally

1282
00:50:33,119 --> 00:50:35,280
limited by the fact that you just can't

1283
00:50:35,280 --> 00:50:36,880
drop data

1284
00:50:36,880 --> 00:50:38,960
and if there is a network issue you you

1285
00:50:38,960 --> 00:50:41,200
rely on avr to switch

1286
00:50:41,200 --> 00:50:43,680
uh to avoid it and to recover and that's

1287
00:50:43,680 --> 00:50:45,119
just too slow

1288
00:50:45,119 --> 00:50:46,880
um we also have some issues with

1289
00:50:46,880 --> 00:50:49,920
client-side abr uh that's uh just worth

1290
00:50:49,920 --> 00:50:51,520
mentioning because when you deliver

1291
00:50:51,520 --> 00:50:53,280
download frame by frame

1292
00:50:53,280 --> 00:50:55,920
it just breaks a lot of abr algorithms

1293
00:50:55,920 --> 00:50:58,640
that traditionally use for hls

1294
00:50:58,640 --> 00:51:00,480
um

1295
00:51:00,480 --> 00:51:02,319
but it's not a fundament it's it's

1296
00:51:02,319 --> 00:51:03,280
something that there's a lot of

1297
00:51:03,280 --> 00:51:04,720
different solutions and we've done a lot

1298
00:51:04,720 --> 00:51:06,960
of different things including just like

1299
00:51:06,960 --> 00:51:09,200
almost literally running a speed test

1300
00:51:09,200 --> 00:51:11,920
while we're uh viewing the stream

1301
00:51:11,920 --> 00:51:14,000
uh just to try and figure out uh if we

1302
00:51:14,000 --> 00:51:16,559
can switch up

1303
00:51:18,160 --> 00:51:20,079
so um

1304
00:51:20,079 --> 00:51:21,520
i was tasked with trying to reduce

1305
00:51:21,520 --> 00:51:24,319
latency on twitch uh and we ran a big

1306
00:51:24,319 --> 00:51:26,640
project to try and use webrtc

1307
00:51:26,640 --> 00:51:28,720
uh again the document has more details

1308
00:51:28,720 --> 00:51:30,160
but this is a hybrid approach where we

1309
00:51:30,160 --> 00:51:32,240
took our existing ingest stack and just

1310
00:51:32,240 --> 00:51:34,839
tried to put webrtc for

1311
00:51:34,839 --> 00:51:37,359
distribution um the biggest issue with

1312
00:51:37,359 --> 00:51:39,760
that was just we didn't have any control

1313
00:51:39,760 --> 00:51:42,480
over the quality we wanted to

1314
00:51:42,480 --> 00:51:44,559
have support these use cases where we

1315
00:51:44,559 --> 00:51:47,119
don't need real time in fact

1316
00:51:47,119 --> 00:51:48,880
we have like a in just stacked with a

1317
00:51:48,880 --> 00:51:51,119
ton of latency and then we will try to

1318
00:51:51,119 --> 00:51:52,880
use distribution at the very end and

1319
00:51:52,880 --> 00:51:56,800
webrtc's forcing us to make it real time

1320
00:51:56,800 --> 00:51:58,400
um

1321
00:51:58,400 --> 00:52:00,720
we have to a lot of people bringing up

1322
00:52:00,720 --> 00:52:02,480
like well that's not a problem with the

1323
00:52:02,480 --> 00:52:04,640
uh the wire format and that's true like

1324
00:52:04,640 --> 00:52:07,280
webrtc as a wire protocol you can do a

1325
00:52:07,280 --> 00:52:08,640
lot of stuff there's a lot of extensions

1326
00:52:08,640 --> 00:52:09,839
you could do

1327
00:52:09,839 --> 00:52:11,359
but again for web support we need the

1328
00:52:11,359 --> 00:52:14,480
browser to work and uh it's not a great

1329
00:52:14,480 --> 00:52:16,240
way of

1330
00:52:16,240 --> 00:52:18,800
of conveying this information too

1331
00:52:18,800 --> 00:52:20,240
um

1332
00:52:20,240 --> 00:52:22,160
the implementation uh because we need

1333
00:52:22,160 --> 00:52:23,920
browser support it means we have to

1334
00:52:23,920 --> 00:52:26,640
petition google to change things we have

1335
00:52:26,640 --> 00:52:29,520
to petition ietf to add stuff to the uh

1336
00:52:29,520 --> 00:52:32,480
uh the protocol we wanted something

1337
00:52:32,480 --> 00:52:35,200
that we had more control over um again

1338
00:52:35,200 --> 00:52:37,599
using web transport and the idea is that

1339
00:52:37,599 --> 00:52:39,599
we could send packets or we can

1340
00:52:39,599 --> 00:52:40,960
we can uh

1341
00:52:40,960 --> 00:52:42,960
do our own protocol and you see this a

1342
00:52:42,960 --> 00:52:44,240
lot actually you see a lot of people

1343
00:52:44,240 --> 00:52:45,920
using webrtc data channels to this

1344
00:52:45,920 --> 00:52:47,760
extent

1345
00:52:47,760 --> 00:52:50,240
and we did too i implemented

1346
00:52:50,240 --> 00:52:54,960
basically rtp over webrtc data channels

1347
00:52:54,960 --> 00:52:56,960
a crazy amount of complexity just to get

1348
00:52:56,960 --> 00:52:59,119
udp working in the browser

1349
00:52:59,119 --> 00:53:03,119
um and it just wasn't a good experience

1350
00:53:03,119 --> 00:53:05,280
and uh yeah i've implemented every

1351
00:53:05,280 --> 00:53:07,440
webrtc protocol at this point i've

1352
00:53:07,440 --> 00:53:10,240
optimized them uh i ended up throwing

1353
00:53:10,240 --> 00:53:12,240
away like a year and a half of work

1354
00:53:12,240 --> 00:53:14,559
because we ended up abandoning this

1355
00:53:14,559 --> 00:53:16,160
webrtc edge

1356
00:53:16,160 --> 00:53:17,599
project

1357
00:53:17,599 --> 00:53:20,319
um again this is some of our specific

1358
00:53:20,319 --> 00:53:22,240
things i think anduin webrtc has fewer

1359
00:53:22,240 --> 00:53:26,640
issues but still quality is an issue

1360
00:53:27,520 --> 00:53:28,640
uh so

1361
00:53:28,640 --> 00:53:30,960
uh our solution was to make something

1362
00:53:30,960 --> 00:53:33,599
called warp um i released a draft of it

1363
00:53:33,599 --> 00:53:35,440
a very simple draft trying to focus some

1364
00:53:35,440 --> 00:53:38,400
more on the uh prioritization scheme

1365
00:53:38,400 --> 00:53:39,839
uh the idea is that we can have a

1366
00:53:39,839 --> 00:53:41,359
latency gambit

1367
00:53:41,359 --> 00:53:43,839
we don't really do real time very well

1368
00:53:43,839 --> 00:53:46,640
for multitude of reasons but

1369
00:53:46,640 --> 00:53:49,440
it it just works with our existing stack

1370
00:53:49,440 --> 00:53:52,319
it's cmaf so we can fall back to hls

1371
00:53:52,319 --> 00:53:54,240
the server apr so we can fix some of the

1372
00:53:54,240 --> 00:53:56,160
issues with uh

1373
00:53:56,160 --> 00:53:57,839
latency hls

1374
00:53:57,839 --> 00:53:58,960
um

1375
00:53:58,960 --> 00:54:00,880
and that's really what we're settling on

1376
00:54:00,880 --> 00:54:01,920
um

1377
00:54:01,920 --> 00:54:05,359
it uses web transport and each uh

1378
00:54:05,359 --> 00:54:07,440
each segment is sent as a quick stream

1379
00:54:07,440 --> 00:54:10,400
it's actually really simple

1380
00:54:10,400 --> 00:54:12,400
but that's kind of what we settled on

1381
00:54:12,400 --> 00:54:13,920
[Music]

1382
00:54:13,920 --> 00:54:15,680
and um

1383
00:54:15,680 --> 00:54:17,040
i don't want to spend

1384
00:54:17,040 --> 00:54:18,960
my time like you know preaching warp

1385
00:54:18,960 --> 00:54:21,599
that's probably a future off or a future

1386
00:54:21,599 --> 00:54:23,359
meeting um

1387
00:54:23,359 --> 00:54:27,839
but uh any questions about distribution

1388
00:54:30,400 --> 00:54:32,960
no go ahead

1389
00:54:35,280 --> 00:54:36,799
mozinati um

1390
00:54:36,799 --> 00:54:38,319
hey look i asked you this earlier on the

1391
00:54:38,319 --> 00:54:40,480
list and i think you mentioned that you

1392
00:54:40,480 --> 00:54:42,640
were you had thought about it before and

1393
00:54:42,640 --> 00:54:44,160
you're gonna still be you know continue

1394
00:54:44,160 --> 00:54:45,839
to think about it in the future wonder

1395
00:54:45,839 --> 00:54:47,359
if you've had some more thoughts on it

1396
00:54:47,359 --> 00:54:49,920
now um but it seems like conceptually

1397
00:54:49,920 --> 00:54:51,680
warp is

1398
00:54:51,680 --> 00:54:53,359
would be very similar

1399
00:54:53,359 --> 00:54:54,240
to

1400
00:54:54,240 --> 00:54:56,960
having an h3 capable server

1401
00:54:56,960 --> 00:54:58,799
and just grabbing the segments as you

1402
00:54:58,799 --> 00:54:59,920
know separate

1403
00:54:59,920 --> 00:55:01,520
resources over it and they would

1404
00:55:01,520 --> 00:55:02,720
automatically come over with separate

1405
00:55:02,720 --> 00:55:05,200
quick streams like warp does and then

1406
00:55:05,200 --> 00:55:06,960
the prioritization the mechanisms aren't

1407
00:55:06,960 --> 00:55:09,040
there yet but there's proposals to do

1408
00:55:09,040 --> 00:55:10,000
something very similar to that

1409
00:55:10,000 --> 00:55:12,559
prioritization do you think that there's

1410
00:55:12,559 --> 00:55:13,599
uh

1411
00:55:13,599 --> 00:55:15,040
do you think that there's more value in

1412
00:55:15,040 --> 00:55:16,799
trying to pursue that route or do you

1413
00:55:16,799 --> 00:55:18,400
think that there's something that would

1414
00:55:18,400 --> 00:55:21,119
be fundamentally harder uh to make the

1415
00:55:21,119 --> 00:55:22,480
right changes that you think you're

1416
00:55:22,480 --> 00:55:25,280
going to need eventually in an h3 stack

1417
00:55:25,280 --> 00:55:27,119
uh versus what you're what you're doing

1418
00:55:27,119 --> 00:55:29,599
separately

1419
00:55:30,319 --> 00:55:31,760
fundamentally we want to be able to

1420
00:55:31,760 --> 00:55:33,040
download

1421
00:55:33,040 --> 00:55:34,559
segments in parallel

1422
00:55:34,559 --> 00:55:36,960
and prefer the newest data like if

1423
00:55:36,960 --> 00:55:38,240
there's congestion

1424
00:55:38,240 --> 00:55:39,920
um and you can do that like you

1425
00:55:39,920 --> 00:55:42,319
mentioned with h3 uh you can i think

1426
00:55:42,319 --> 00:55:44,000
lucas was working like a priority header

1427
00:55:44,000 --> 00:55:46,240
would be a great standard way of saying

1428
00:55:46,240 --> 00:55:50,000
this request should come before this one

1429
00:55:50,000 --> 00:55:51,040
um

1430
00:55:51,040 --> 00:55:52,559
the reason we're doing web transport

1431
00:55:52,559 --> 00:55:54,640
really right now for distribution is

1432
00:55:54,640 --> 00:55:56,400
just because twitch runs we run our own

1433
00:55:56,400 --> 00:55:59,040
cdn like we don't need um

1434
00:55:59,040 --> 00:56:02,240
uh to use http we're refined pushing

1435
00:56:02,240 --> 00:56:03,760
last mile but i think for

1436
00:56:03,760 --> 00:56:05,760
standardization especially

1437
00:56:05,760 --> 00:56:10,319
uh a solution that uses h3 or even h2

1438
00:56:10,319 --> 00:56:12,559
and looks more like dash uh would

1439
00:56:12,559 --> 00:56:13,760
probably

1440
00:56:13,760 --> 00:56:17,839
be a low barrier to entry

1441
00:56:19,359 --> 00:56:21,680
um there are some other concerns mostly

1442
00:56:21,680 --> 00:56:23,440
around server side abr but it's all

1443
00:56:23,440 --> 00:56:26,079
solvable

1444
00:56:26,559 --> 00:56:28,400
thanks lucas

1445
00:56:28,400 --> 00:56:31,119
hello lucas pardue clyde play i hear my

1446
00:56:31,119 --> 00:56:33,599
name mentioned and i'm summoned um no

1447
00:56:33,599 --> 00:56:35,200
thanks luke luke and i have talked a bit

1448
00:56:35,200 --> 00:56:38,480
about this in the past uh the hp

1449
00:56:38,480 --> 00:56:40,720
extendable priorities draft entered or

1450
00:56:40,720 --> 00:56:43,359
48 like a couple of weeks ago or a few

1451
00:56:43,359 --> 00:56:46,480
weeks ago now maybe um and this is just

1452
00:56:46,480 --> 00:56:49,119
really about signaling and and some

1453
00:56:49,119 --> 00:56:50,960
guidance on how

1454
00:56:50,960 --> 00:56:53,520
servers predominantly servers

1455
00:56:53,520 --> 00:56:56,319
in this case can use those signals

1456
00:56:56,319 --> 00:56:59,040
um in ways to

1457
00:56:59,040 --> 00:57:01,599
prioritize or schedule the sending of

1458
00:57:01,599 --> 00:57:03,760
multiple resources that are concurrently

1459
00:57:03,760 --> 00:57:06,240
active um that's just guidance

1460
00:57:06,240 --> 00:57:08,240
effectively servers can ignore it

1461
00:57:08,240 --> 00:57:10,880
completely or do whatever they like

1462
00:57:10,880 --> 00:57:12,559
and but it's optimized around the web

1463
00:57:12,559 --> 00:57:14,799
use case so it's kind of like a fiso

1464
00:57:14,799 --> 00:57:16,400
general recommendation that could be

1465
00:57:16,400 --> 00:57:18,799
ignored um and speaking to luke like

1466
00:57:18,799 --> 00:57:20,960
months back it seemed more like this use

1467
00:57:20,960 --> 00:57:24,640
cases is really like a a lifo um and

1468
00:57:24,640 --> 00:57:26,559
that's completely possible you know you

1469
00:57:26,559 --> 00:57:28,640
just you might need a slightly different

1470
00:57:28,640 --> 00:57:32,160
signal um at the at the each independent

1471
00:57:32,160 --> 00:57:33,440
priority

1472
00:57:33,440 --> 00:57:35,520
message or you might just want a signal

1473
00:57:35,520 --> 00:57:37,200
for the entire session that this is a

1474
00:57:37,200 --> 00:57:39,760
different kind of application than web

1475
00:57:39,760 --> 00:57:41,599
like these things are possible

1476
00:57:41,599 --> 00:57:42,720
um

1477
00:57:42,720 --> 00:57:45,280
all i'd say is it is optimized around a

1478
00:57:45,280 --> 00:57:47,839
client and a server model rather than a

1479
00:57:47,839 --> 00:57:49,520
you know

1480
00:57:49,520 --> 00:57:51,680
maybe the video which is slightly

1481
00:57:51,680 --> 00:57:54,680
different

1482
00:57:56,160 --> 00:57:57,440
collaborate a little bit one of the

1483
00:57:57,440 --> 00:58:00,799
issues with the using hp3 for warp is uh

1484
00:58:00,799 --> 00:58:02,319
if you talk to a server that doesn't

1485
00:58:02,319 --> 00:58:03,839
support prioritization like it just

1486
00:58:03,839 --> 00:58:05,440
ignores that header you're going to get

1487
00:58:05,440 --> 00:58:07,760
a worse experience than just hls

1488
00:58:07,760 --> 00:58:09,440
so like you this is something that lucas

1489
00:58:09,440 --> 00:58:11,359
and i talked a lot about is

1490
00:58:11,359 --> 00:58:12,720
you need to make sure the server

1491
00:58:12,720 --> 00:58:15,040
supports prioritization if that was the

1492
00:58:15,040 --> 00:58:17,759
approach we took

1493
00:58:23,280 --> 00:58:24,079
hey

1494
00:58:24,079 --> 00:58:26,240
look uh thanks for the presentation and

1495
00:58:26,240 --> 00:58:28,799
uh thanks thanks for going us through uh

1496
00:58:28,799 --> 00:58:30,559
various things that you tried out and i

1497
00:58:30,559 --> 00:58:33,119
had a clarification question uh the more

1498
00:58:33,119 --> 00:58:35,119
i kind of read about low latency dash

1499
00:58:35,119 --> 00:58:36,559
and talking to the experts it does feel

1500
00:58:36,559 --> 00:58:38,960
like the some of the things that you

1501
00:58:38,960 --> 00:58:42,160
require kind of can be solved with the

1502
00:58:42,160 --> 00:58:43,839
low latency dash

1503
00:58:43,839 --> 00:58:46,079
does switch or your team

1504
00:58:46,079 --> 00:58:47,440
ever try to

1505
00:58:47,440 --> 00:58:49,280
experiment with that and figure out

1506
00:58:49,280 --> 00:58:50,720
something is not working and why it's

1507
00:58:50,720 --> 00:58:52,640
not working or is it something

1508
00:58:52,640 --> 00:58:53,839
not done

1509
00:58:53,839 --> 00:58:56,240
so far

1510
00:58:56,720 --> 00:59:00,880
our own low latency dash solution um

1511
00:59:00,880 --> 00:59:03,040
it's a custom hls thing instead of dash

1512
00:59:03,040 --> 00:59:07,279
but same concept as far as i can tell

1513
00:59:07,520 --> 00:59:09,280
okay i think there's quite a bit

1514
00:59:09,280 --> 00:59:11,119
difference in how templation

1515
00:59:11,119 --> 00:59:13,440
templatization and other things but yeah

1516
00:59:13,440 --> 00:59:15,520
it would be good to know if that's

1517
00:59:15,520 --> 00:59:18,400
explode at some point thanks

1518
00:59:18,400 --> 00:59:20,000
tell us we advertise segments in the

1519
00:59:20,000 --> 00:59:22,319
playlist hls playlist before they exist

1520
00:59:22,319 --> 00:59:23,760
and then the player will start

1521
00:59:23,760 --> 00:59:25,359
downloading them the chunk transfer

1522
00:59:25,359 --> 00:59:27,599
it'll be delivered frame by frame

1523
00:59:27,599 --> 00:59:29,520
um so not the exact same as lillian's

1524
00:59:29,520 --> 00:59:33,720
dash but pretty close

1525
00:59:34,960 --> 00:59:37,920
okay sergio

1526
00:59:38,880 --> 00:59:39,839
hi

1527
00:59:39,839 --> 00:59:41,839
hey one question from your presentation

1528
00:59:41,839 --> 00:59:43,359
is that

1529
00:59:43,359 --> 00:59:44,640
regardless

1530
00:59:44,640 --> 00:59:46,960
would you be interested in media uh

1531
00:59:46,960 --> 00:59:49,280
media real quick or specifically about

1532
00:59:49,280 --> 00:59:52,160
media platforms because they are

1533
00:59:52,160 --> 00:59:54,640
slightly smart but i think that

1534
00:59:54,640 --> 00:59:57,440
we need to first start thinking if

1535
00:59:57,440 --> 00:59:59,680
the goal is to have medieval quick or if

1536
00:59:59,680 --> 01:00:02,640
we really are requiring weight transport

1537
01:00:02,640 --> 01:00:03,760
for them

1538
01:00:03,760 --> 01:00:05,280
for them

1539
01:00:05,280 --> 01:00:07,280
specifically for building blues because

1540
01:00:07,280 --> 01:00:09,200
i think that this has some extra

1541
01:00:09,200 --> 01:00:11,359
challenges that are not

1542
01:00:11,359 --> 01:00:15,558
present if just using quick

1543
01:00:16,880 --> 01:00:18,000
um

1544
01:00:18,000 --> 01:00:21,920
quick is mostly required for to

1545
01:00:21,920 --> 01:00:24,000
better eliminate headline blocking but

1546
01:00:24,000 --> 01:00:25,119
there's actually some other benefits

1547
01:00:25,119 --> 01:00:27,839
with web transport like h2 fallback

1548
01:00:27,839 --> 01:00:29,520
would probably actually work thinking

1549
01:00:29,520 --> 01:00:30,640
about it

1550
01:00:30,640 --> 01:00:32,400
um it wouldn't be ideal you'd still have

1551
01:00:32,400 --> 01:00:33,760
some head of line blocking but it would

1552
01:00:33,760 --> 01:00:34,799
be nice

1553
01:00:34,799 --> 01:00:36,079
uh but really we just need browser

1554
01:00:36,079 --> 01:00:37,680
support and like

1555
01:00:37,680 --> 01:00:38,880
you can't get quick native in the

1556
01:00:38,880 --> 01:00:40,799
browser without web transport

1557
01:00:40,799 --> 01:00:41,760
so

1558
01:00:41,760 --> 01:00:45,200
that's why we're focusing on it

1559
01:00:47,040 --> 01:00:49,599
yeah because we have the problem of the

1560
01:00:49,599 --> 01:00:52,400
with a specific link with traffic how to

1561
01:00:52,400 --> 01:00:56,079
plug then congestion control of them

1562
01:00:56,079 --> 01:00:58,720
other of the quick implementation in the

1563
01:00:58,720 --> 01:01:00,960
browser with the with the user specs so

1564
01:01:00,960 --> 01:01:02,720
i think that

1565
01:01:02,720 --> 01:01:04,160
uh

1566
01:01:04,160 --> 01:01:06,319
speaking about media equipped without a

1567
01:01:06,319 --> 01:01:07,760
specific statement that this is going to

1568
01:01:07,760 --> 01:01:09,680
be used with web transport it may lead

1569
01:01:09,680 --> 01:01:11,839
to some issues when we try to actually

1570
01:01:11,839 --> 01:01:14,319
implement them

1571
01:01:14,400 --> 01:01:16,880
to elaborate the um we don't have that

1572
01:01:16,880 --> 01:01:19,200
issue because the sender is a server we

1573
01:01:19,200 --> 01:01:20,640
control we have a custom quick

1574
01:01:20,640 --> 01:01:23,040
implementation uh but 100 if you're

1575
01:01:23,040 --> 01:01:25,680
doing ingest over web transport

1576
01:01:25,680 --> 01:01:29,119
um via the browser uh you do not control

1577
01:01:29,119 --> 01:01:30,720
the prioritization of streams and you do

1578
01:01:30,720 --> 01:01:32,960
not control congest control um and that

1579
01:01:32,960 --> 01:01:35,359
would be an

1580
01:01:36,839 --> 01:01:39,359
issue so the queue is closed but there

1581
01:01:39,359 --> 01:01:41,200
are a couple of um

1582
01:01:41,200 --> 01:01:43,280
comments to be relayed from the chat

1583
01:01:43,280 --> 01:01:44,240
kirill

1584
01:01:44,240 --> 01:01:46,720
uh says that refreshing manifest for

1585
01:01:46,720 --> 01:01:48,960
ll-dash is not fun

1586
01:01:48,960 --> 01:01:50,319
and lucas

1587
01:01:50,319 --> 01:01:51,359
needing

1588
01:01:51,359 --> 01:01:53,280
per request signals to express priority

1589
01:01:53,280 --> 01:01:55,920
introduces an immediate latency cost

1590
01:01:55,920 --> 01:01:57,599
whereas my understanding of warps needs

1591
01:01:57,599 --> 01:01:59,280
is that a declaration that the session

1592
01:01:59,280 --> 01:02:01,440
is best served lifo will avoid that

1593
01:02:01,440 --> 01:02:04,000
entirely

1594
01:02:05,200 --> 01:02:06,880
um

1595
01:02:06,880 --> 01:02:08,640
and with that i think we're ready to

1596
01:02:08,640 --> 01:02:12,400
move on to colin's presentation

1597
01:02:14,000 --> 01:02:15,680
great thank you can you guys join me

1598
01:02:15,680 --> 01:02:17,359
fine

1599
01:02:17,359 --> 01:02:18,400
yes

1600
01:02:18,400 --> 01:02:19,200
okay

1601
01:02:19,200 --> 01:02:22,640
so next slide please um

1602
01:02:22,640 --> 01:02:24,799
you should have control at the bottom

1603
01:02:24,799 --> 01:02:27,599
oh yeah thanks

1604
01:02:27,760 --> 01:02:29,280
um

1605
01:02:29,280 --> 01:02:31,280
the i want to talk i'm going to talk a

1606
01:02:31,280 --> 01:02:32,559
little bit more about the various sort

1607
01:02:32,559 --> 01:02:34,400
of solutions that have been talked about

1608
01:02:34,400 --> 01:02:36,319
and try and abstract those out to the

1609
01:02:36,319 --> 01:02:38,400
the type of thing that i the direction

1610
01:02:38,400 --> 01:02:40,000
that we could choose for a working group

1611
01:02:40,000 --> 01:02:41,280
would form to go

1612
01:02:41,280 --> 01:02:42,960
but to clarify it up i want to talk a

1613
01:02:42,960 --> 01:02:44,640
little bit more about a couple use cases

1614
01:02:44,640 --> 01:02:46,880
here and i hadn't seen it into the mob

1615
01:02:46,880 --> 01:02:49,039
spot the other day this uh report from

1616
01:02:49,039 --> 01:02:51,039
dash if but it has a great set of use

1617
01:02:51,039 --> 01:02:53,200
cases i highly recommend people reading

1618
01:02:53,200 --> 01:02:54,079
and and

1619
01:02:54,079 --> 01:02:55,440
of course i think it's great several use

1620
01:02:55,440 --> 01:02:57,520
cases i've put beforehand where we're in

1621
01:02:57,520 --> 01:02:59,920
there um but it is a good summary i'd

1622
01:02:59,920 --> 01:03:01,119
encourage people to read the links at

1623
01:03:01,119 --> 01:03:03,280
the bottom now so this case i want to

1624
01:03:03,280 --> 01:03:05,280
talk about right here is is one that

1625
01:03:05,280 --> 01:03:07,599
that often comes up of you know you have

1626
01:03:07,599 --> 01:03:10,400
a soccer game or some people uh

1627
01:03:10,400 --> 01:03:12,160
a sport like that and you're watching

1628
01:03:12,160 --> 01:03:13,839
and there's a bunch of different things

1629
01:03:13,839 --> 01:03:14,799
that

1630
01:03:14,799 --> 01:03:16,640
people want to do that aren't really

1631
01:03:16,640 --> 01:03:18,799
very easy to do with the protocols we

1632
01:03:18,799 --> 01:03:20,960
have today and that's one of the things

1633
01:03:20,960 --> 01:03:22,240
that in general when i'm looking at

1634
01:03:22,240 --> 01:03:24,000
building some new complicated thing

1635
01:03:24,000 --> 01:03:25,920
that's difficult to deploy i want to

1636
01:03:25,920 --> 01:03:27,359
make sure that i have some features that

1637
01:03:27,359 --> 01:03:29,440
are not just better versions of what is

1638
01:03:29,440 --> 01:03:31,200
already deployed today

1639
01:03:31,200 --> 01:03:34,240
but are actually solve problems that

1640
01:03:34,240 --> 01:03:35,839
people want to solve that you can't do

1641
01:03:35,839 --> 01:03:37,520
with the stuff that is widely deployed

1642
01:03:37,520 --> 01:03:38,480
today

1643
01:03:38,480 --> 01:03:40,160
uh otherwise you know you end up with a

1644
01:03:40,160 --> 01:03:42,160
very difficult deploy path so

1645
01:03:42,160 --> 01:03:44,240
uh this you know the soccer game uh

1646
01:03:44,240 --> 01:03:45,599
example when we start looking at this

1647
01:03:45,599 --> 01:03:48,480
there's um a desire to be able to watch

1648
01:03:48,480 --> 01:03:50,720
a camera over the goal post when you're

1649
01:03:50,720 --> 01:03:52,640
right in the in the same stadium

1650
01:03:52,640 --> 01:03:54,400
watching the game it's very common now

1651
01:03:54,400 --> 01:03:55,760
for people to be streaming those types

1652
01:03:55,760 --> 01:03:57,359
of things there's the issue somebody

1653
01:03:57,359 --> 01:03:59,200
brought up later of the sort of timing

1654
01:03:59,200 --> 01:04:02,160
and latency of everybody receiving this

1655
01:04:02,160 --> 01:04:04,640
uh so that we have a low late that the

1656
01:04:04,640 --> 01:04:06,319
end viewers are getting a fairly low

1657
01:04:06,319 --> 01:04:08,319
latency version of the game so you don't

1658
01:04:08,319 --> 01:04:09,680
hear all your neighbors cheer before

1659
01:04:09,680 --> 01:04:10,960
some people don't care about the problem

1660
01:04:10,960 --> 01:04:13,760
you know some some do right and

1661
01:04:13,760 --> 01:04:16,319
this one variant of this that gets

1662
01:04:16,319 --> 01:04:18,319
particularly into that thing is when

1663
01:04:18,319 --> 01:04:20,640
there's betting going on um

1664
01:04:20,640 --> 01:04:22,000
for so for any anything that has

1665
01:04:22,000 --> 01:04:24,640
regulated betting on it is highly likely

1666
01:04:24,640 --> 01:04:26,640
to have very strict latency needs and

1667
01:04:26,640 --> 01:04:28,240
you don't want somebody who's just

1668
01:04:28,240 --> 01:04:32,000
sending a you know a a webrtc video of

1669
01:04:32,000 --> 01:04:34,720
the game from their phone uh to somebody

1670
01:04:34,720 --> 01:04:36,079
else remotely to be getting a

1671
01:04:36,079 --> 01:04:38,000
substantially uh lower delay than

1672
01:04:38,000 --> 01:04:40,079
whatever the betting delay is so you

1673
01:04:40,079 --> 01:04:41,440
know that's that's another one that

1674
01:04:41,440 --> 01:04:43,760
comes up the other one that we

1675
01:04:43,760 --> 01:04:46,079
sort of see is that

1676
01:04:46,079 --> 01:04:48,000
you have a large

1677
01:04:48,000 --> 01:04:50,400
large number of um

1678
01:04:50,400 --> 01:04:51,920
people viewing it

1679
01:04:51,920 --> 01:04:54,000
well beyond where webrtc is typically

1680
01:04:54,000 --> 01:04:55,280
scaled to today i mean most the

1681
01:04:55,280 --> 01:04:57,119
large-scale webrtc systems support

1682
01:04:57,119 --> 01:04:58,720
single conferences up to around a

1683
01:04:58,720 --> 01:05:00,240
thousand people obviously you could do

1684
01:05:00,240 --> 01:05:02,240
more than that with webrtc less but it

1685
01:05:02,240 --> 01:05:03,839
tends to be in that sort of framework is

1686
01:05:03,839 --> 01:05:05,520
what's cost effective

1687
01:05:05,520 --> 01:05:06,400
uh

1688
01:05:06,400 --> 01:05:09,200
the but if you have uh you know 100 000

1689
01:05:09,200 --> 01:05:10,640
people viewing this and you want to be

1690
01:05:10,640 --> 01:05:12,160
able to bring in any one of them as a

1691
01:05:12,160 --> 01:05:14,640
participant as an interactive person on

1692
01:05:14,640 --> 01:05:16,640
the call maybe it's any you know

1693
01:05:16,640 --> 01:05:18,319
esports and you want to bring in one of

1694
01:05:18,319 --> 01:05:20,559
the fans or spectators as part of the

1695
01:05:20,559 --> 01:05:22,799
commentary that's going on live in it

1696
01:05:22,799 --> 01:05:24,160
now the moment where you bring those

1697
01:05:24,160 --> 01:05:26,319
people in is you don't want to lose five

1698
01:05:26,319 --> 01:05:28,079
seconds of latency that that person

1699
01:05:28,079 --> 01:05:30,079
doesn't hear when that switch happens

1700
01:05:30,079 --> 01:05:31,920
because that's exactly the context they

1701
01:05:31,920 --> 01:05:33,920
need to comment when they come in so you

1702
01:05:33,920 --> 01:05:35,839
have to keep that means driving the

1703
01:05:35,839 --> 01:05:37,200
latency of everything down so i think

1704
01:05:37,200 --> 01:05:38,720
there's a bunch of edge cases like this

1705
01:05:38,720 --> 01:05:41,119
where we switch back and forth

1706
01:05:41,119 --> 01:05:42,160
um

1707
01:05:42,160 --> 01:05:43,680
let me talk about

1708
01:05:43,680 --> 01:05:45,599
a slightly different version of this

1709
01:05:45,599 --> 01:05:48,720
uh this is large company meetings

1710
01:05:48,720 --> 01:05:51,760
right now if you have a a meeting even

1711
01:05:51,760 --> 01:05:53,760
like this one right with only i see we

1712
01:05:53,760 --> 01:05:56,880
got 129 people remote right now uh if we

1713
01:05:56,880 --> 01:05:58,400
allowed all those people just be active

1714
01:05:58,400 --> 01:05:59,839
speakers at the same time it wouldn't

1715
01:05:59,839 --> 01:06:01,200
really work that's why we request the

1716
01:06:01,200 --> 01:06:02,400
queue and go do these things so it's

1717
01:06:02,400 --> 01:06:03,760
usually a signaling mechanism that

1718
01:06:03,760 --> 01:06:05,359
allows people to move back and forth

1719
01:06:05,359 --> 01:06:07,039
between interactive and non-interactive

1720
01:06:07,039 --> 01:06:08,640
mechanism now we can usually do this

1721
01:06:08,640 --> 01:06:10,480
with webrtc today

1722
01:06:10,480 --> 01:06:12,960
uh for small meetings but it doesn't

1723
01:06:12,960 --> 01:06:15,920
scale very well as it sort of gets large

1724
01:06:15,920 --> 01:06:16,799
so

1725
01:06:16,799 --> 01:06:19,440
that's that's certainly uh

1726
01:06:19,440 --> 01:06:21,119
a use case that's coming not from the

1727
01:06:21,119 --> 01:06:23,920
streaming direction but is coming from

1728
01:06:23,920 --> 01:06:25,440
i'll call it the interactive media

1729
01:06:25,440 --> 01:06:27,200
direction and what we see is more and

1730
01:06:27,200 --> 01:06:29,760
more use cases where coming from both of

1731
01:06:29,760 --> 01:06:31,599
these groups that are converging to the

1732
01:06:31,599 --> 01:06:32,880
same thing where they want to act a

1733
01:06:32,880 --> 01:06:34,640
little bit more you know the streaming

1734
01:06:34,640 --> 01:06:35,920
people want to be a little bit more like

1735
01:06:35,920 --> 01:06:37,599
the interactive people and interactive

1736
01:06:37,599 --> 01:06:39,599
people want to scale like the ability of

1737
01:06:39,599 --> 01:06:41,760
the streaming people the sk the design

1738
01:06:41,760 --> 01:06:43,440
that we have for scaling for streaming

1739
01:06:43,440 --> 01:06:45,520
today is amazing

1740
01:06:45,520 --> 01:06:47,520
the other thing that we sort of talk

1741
01:06:47,520 --> 01:06:50,000
about a lot is the way that streaming

1742
01:06:50,000 --> 01:06:52,880
uses uh relays and distribution points

1743
01:06:52,880 --> 01:06:55,520
on the the distributions is very clear

1744
01:06:55,520 --> 01:06:56,880
we're all familiar with those types of

1745
01:06:56,880 --> 01:06:57,839
things

1746
01:06:57,839 --> 01:06:58,559
but

1747
01:06:58,559 --> 01:07:00,400
there are also a lot of things that can

1748
01:07:00,400 --> 01:07:02,480
be gained by similar models on the

1749
01:07:02,480 --> 01:07:03,599
ingress

1750
01:07:03,599 --> 01:07:05,760
and what we're the the main place where

1751
01:07:05,760 --> 01:07:07,760
you have gains here is if you had a

1752
01:07:07,760 --> 01:07:10,319
relay or a cache node some type of thing

1753
01:07:10,319 --> 01:07:13,359
that's on the other side of a low of a a

1754
01:07:13,359 --> 01:07:15,760
network like a wi-fi i mean in many

1755
01:07:15,760 --> 01:07:17,839
cases we see the actual problems that

1756
01:07:17,839 --> 01:07:19,680
you're hitting with the

1757
01:07:19,680 --> 01:07:21,200
loss of packets various congestion

1758
01:07:21,200 --> 01:07:22,960
control issues and stuff happening very

1759
01:07:22,960 --> 01:07:24,480
much at

1760
01:07:24,480 --> 01:07:26,799
the wi-fi network or the the very last

1761
01:07:26,799 --> 01:07:29,359
edge and if you can insert a relay there

1762
01:07:29,359 --> 01:07:32,720
you end up with a very low latency

1763
01:07:32,720 --> 01:07:34,160
between the end client that's

1764
01:07:34,160 --> 01:07:36,640
reproducing the video and this relay and

1765
01:07:36,640 --> 01:07:38,960
you can do re-transmission based you

1766
01:07:38,960 --> 01:07:41,039
know you can run quick over a stream and

1767
01:07:41,039 --> 01:07:42,960
get your data really quickly reliably

1768
01:07:42,960 --> 01:07:45,280
across that link and then put it up so

1769
01:07:45,280 --> 01:07:47,200
basically we all understand the sort of

1770
01:07:47,200 --> 01:07:50,240
issues of uh how rtt and congestion

1771
01:07:50,240 --> 01:07:51,520
control relate with each other and

1772
01:07:51,520 --> 01:07:53,440
re-transmissions but if you can reduce

1773
01:07:53,440 --> 01:07:55,520
your rtt dramatically by inserting

1774
01:07:55,520 --> 01:07:57,200
relays at key points

1775
01:07:57,200 --> 01:07:59,119
uh you can change this and this really

1776
01:07:59,119 --> 01:08:00,480
comes to some of the things that are

1777
01:08:00,480 --> 01:08:02,400
changing in the network today i mean the

1778
01:08:02,400 --> 01:08:04,480
what's happening with 5g and the ability

1779
01:08:04,480 --> 01:08:07,440
to have uh compute very near the edge

1780
01:08:07,440 --> 01:08:09,280
what's happening with very flexible

1781
01:08:09,280 --> 01:08:11,839
access points to push stuff down in them

1782
01:08:11,839 --> 01:08:15,119
allows us to have an ingest side cdn

1783
01:08:15,119 --> 01:08:16,640
effectively as well that dramatically

1784
01:08:16,640 --> 01:08:18,719
improves quality so a bunch of this is

1785
01:08:18,719 --> 01:08:21,120
all changing

1786
01:08:21,120 --> 01:08:22,399
so

1787
01:08:22,399 --> 01:08:24,399
with those sort of use cases in mind i

1788
01:08:24,399 --> 01:08:26,960
want to jump over to

1789
01:08:26,960 --> 01:08:29,120
the uh looking at sort of the design

1790
01:08:29,120 --> 01:08:30,719
solution space and i'm not arguing for

1791
01:08:30,719 --> 01:08:32,399
any of the particular drafts one way or

1792
01:08:32,399 --> 01:08:33,279
another here or anything i don't really

1793
01:08:33,279 --> 01:08:34,640
care about that i'm sort of pointing out

1794
01:08:34,640 --> 01:08:36,080
like like a bunch of different people

1795
01:08:36,080 --> 01:08:37,439
looked at this different ways and we're

1796
01:08:37,439 --> 01:08:39,198
all coming up with very similar things

1797
01:08:39,198 --> 01:08:40,319
okay

1798
01:08:40,319 --> 01:08:41,198
we're

1799
01:08:41,198 --> 01:08:43,359
we all have some way of publishing and

1800
01:08:43,359 --> 01:08:45,679
pushing the the media and over quick

1801
01:08:45,679 --> 01:08:48,399
that's why this is called over quick

1802
01:08:48,399 --> 01:08:49,359
and

1803
01:08:49,359 --> 01:08:51,279
they um

1804
01:08:51,279 --> 01:08:52,799
you know they they tend to put

1805
01:08:52,799 --> 01:08:54,799
dependents uh video frames like a got

1806
01:08:54,799 --> 01:08:58,000
sequence in uh one stream uh they tend

1807
01:08:58,000 --> 01:09:00,000
to have some way of trying to think

1808
01:09:00,000 --> 01:09:02,560
about how to allow multiples of those

1809
01:09:02,560 --> 01:09:04,319
happens maybe how to prioritize them

1810
01:09:04,319 --> 01:09:07,120
those types of issues the

1811
01:09:07,120 --> 01:09:09,520
the most important thing for us to focus

1812
01:09:09,520 --> 01:09:11,359
on initially is a little bit what this

1813
01:09:11,359 --> 01:09:13,600
pub line looks like and whether it's

1814
01:09:13,600 --> 01:09:15,839
rushes you know just bringing on ingress

1815
01:09:15,839 --> 01:09:18,080
uh warp uh you know does it can do both

1816
01:09:18,080 --> 01:09:21,439
what directions on this uh we we need to

1817
01:09:21,439 --> 01:09:23,359
have that

1818
01:09:23,359 --> 01:09:25,759
uh video together we need to uh think

1819
01:09:25,759 --> 01:09:26,799
about

1820
01:09:26,799 --> 01:09:28,399
how the congestion control relates to it

1821
01:09:28,399 --> 01:09:29,839
so i do not think that this work should

1822
01:09:29,839 --> 01:09:30,880
as i said earlier i don't think this

1823
01:09:30,880 --> 01:09:31,839
work should take on any of the

1824
01:09:31,839 --> 01:09:32,799
congestion control i think that should

1825
01:09:32,799 --> 01:09:34,238
happen in quick quick provides you what

1826
01:09:34,238 --> 01:09:36,158
it provides you and we can maybe improve

1827
01:09:36,158 --> 01:09:37,520
that for media

1828
01:09:37,520 --> 01:09:39,439
but it also means to provide us like

1829
01:09:39,439 --> 01:09:41,198
right estimates because we need those

1830
01:09:41,198 --> 01:09:42,479
and we need to be able to adapt to them

1831
01:09:42,479 --> 01:09:44,000
quickly and we need to be discussing the

1832
01:09:44,000 --> 01:09:45,920
strategies that we're using for the

1833
01:09:45,920 --> 01:09:47,600
latency i mean i luke got me on this

1834
01:09:47,600 --> 01:09:49,198
term of latency strategy and i i think

1835
01:09:49,198 --> 01:09:50,479
that's a it's a very good way of

1836
01:09:50,479 --> 01:09:52,399
thinking about that's what we need to do

1837
01:09:52,399 --> 01:09:53,679
and this is one of the things too that

1838
01:09:53,679 --> 01:09:55,840
comes up constantly is well couldn't the

1839
01:09:55,840 --> 01:09:57,920
ingress and the you know can what's

1840
01:09:57,920 --> 01:09:59,199
coming in and what's going on be

1841
01:09:59,199 --> 01:10:01,440
completely unrelated to each other and

1842
01:10:01,440 --> 01:10:03,040
the answer is basically no they can't

1843
01:10:03,040 --> 01:10:04,719
they are highly related to each other

1844
01:10:04,719 --> 01:10:06,000
they don't have to be the same protocol

1845
01:10:06,000 --> 01:10:07,199
we prove that and obviously we'll

1846
01:10:07,199 --> 01:10:09,360
gateway to different protocols but

1847
01:10:09,360 --> 01:10:10,960
whatever your strategy is for dealing

1848
01:10:10,960 --> 01:10:12,400
with latency on one side if your

1849
01:10:12,400 --> 01:10:13,760
strategy for dealing with the latency on

1850
01:10:13,760 --> 01:10:15,040
the other side is totally mismatched

1851
01:10:15,040 --> 01:10:16,719
with that you have problems every time

1852
01:10:16,719 --> 01:10:18,239
somebody says oh no we don't they can be

1853
01:10:18,239 --> 01:10:19,600
completely separate

1854
01:10:19,600 --> 01:10:21,679
they inevitably have a set of

1855
01:10:21,679 --> 01:10:23,920
assumptions and models about what the

1856
01:10:23,920 --> 01:10:25,199
output is

1857
01:10:25,199 --> 01:10:26,320
that they're trying to get their input

1858
01:10:26,320 --> 01:10:28,000
to match up with and those those outputs

1859
01:10:28,000 --> 01:10:30,000
could be different and you know

1860
01:10:30,000 --> 01:10:31,280
jake brought up some of those issues

1861
01:10:31,280 --> 01:10:33,520
earlier on some of these things so i do

1862
01:10:33,520 --> 01:10:35,360
think that we have to deeply consider

1863
01:10:35,360 --> 01:10:36,159
both

1864
01:10:36,159 --> 01:10:37,760
both sides of this together and they

1865
01:10:37,760 --> 01:10:40,000
have to be designed to work together uh

1866
01:10:40,000 --> 01:10:41,760
to meet the goals that we want or won't

1867
01:10:41,760 --> 01:10:42,640
happen

1868
01:10:42,640 --> 01:10:44,640
i'm not heard any compelling reason at

1869
01:10:44,640 --> 01:10:46,239
all why they can't actually be the same

1870
01:10:46,239 --> 01:10:48,320
protocol for both how video and audio

1871
01:10:48,320 --> 01:10:50,480
media moves you know on the ingress side

1872
01:10:50,480 --> 01:10:52,800
to the egress side

1873
01:10:52,800 --> 01:10:53,679
the

1874
01:10:53,679 --> 01:10:55,360
um

1875
01:10:55,360 --> 01:10:56,880
let's see if i want to make sure i'm not

1876
01:10:56,880 --> 01:10:58,000
missing too many things i want to say

1877
01:10:58,000 --> 01:10:59,440
about okay

1878
01:10:59,440 --> 01:11:01,520
so

1879
01:11:01,520 --> 01:11:03,199
uh

1880
01:11:03,199 --> 01:11:06,000
jumping into a little bit more the other

1881
01:11:06,000 --> 01:11:08,880
side of this here

1882
01:11:10,400 --> 01:11:13,040
the latency part of this is a little bit

1883
01:11:13,040 --> 01:11:15,199
of a red herring in some ways we talk

1884
01:11:15,199 --> 01:11:16,880
about what constantly people are trying

1885
01:11:16,880 --> 01:11:18,960
to figure out a definition for you know

1886
01:11:18,960 --> 01:11:21,199
what what different latencies are

1887
01:11:21,199 --> 01:11:24,640
but the reality is is that we can get a

1888
01:11:24,640 --> 01:11:26,640
certain latency over quick and we can do

1889
01:11:26,640 --> 01:11:29,600
it pretty reliably today um

1890
01:11:29,600 --> 01:11:31,679
the various implementations measure this

1891
01:11:31,679 --> 01:11:33,600
and tested it um

1892
01:11:33,600 --> 01:11:35,440
our stuff is currently sitting on top of

1893
01:11:35,440 --> 01:11:37,360
pico quick and we've uh it's we're open

1894
01:11:37,360 --> 01:11:38,960
sourcing all the implementations of it

1895
01:11:38,960 --> 01:11:40,960
people want to play with it but

1896
01:11:40,960 --> 01:11:42,880
i'm not arguing for that one i'm just

1897
01:11:42,880 --> 01:11:45,040
saying that we've everybody that was

1898
01:11:45,040 --> 01:11:46,560
working in this space has implemented

1899
01:11:46,560 --> 01:11:48,320
enough things that we sort of figured

1900
01:11:48,320 --> 01:11:49,679
out what we can do

1901
01:11:49,679 --> 01:11:53,040
over quick now we can get the sort of

1902
01:11:53,040 --> 01:11:56,320
latencies that we expect for interactive

1903
01:11:56,320 --> 01:11:59,280
uh webrtc type things uh over quick over

1904
01:11:59,280 --> 01:12:01,280
this these types of protocols that all

1905
01:12:01,280 --> 01:12:03,600
of these things are designing okay

1906
01:12:03,600 --> 01:12:05,840
so i don't think we should get too

1907
01:12:05,840 --> 01:12:08,080
wrapped up on exactly what that is i

1908
01:12:08,080 --> 01:12:10,320
think that uh

1909
01:12:10,320 --> 01:12:12,560
that to improve beyond that you have to

1910
01:12:12,560 --> 01:12:14,960
change quick or use something other than

1911
01:12:14,960 --> 01:12:16,960
quick uh and that that's really out of

1912
01:12:16,960 --> 01:12:18,159
scope we should just be like hey we can

1913
01:12:18,159 --> 01:12:19,520
get what latency we can over that and

1914
01:12:19,520 --> 01:12:22,560
get those use cases

1915
01:12:22,560 --> 01:12:23,920
the

1916
01:12:23,920 --> 01:12:27,360
other thing that i think that we sort of

1917
01:12:27,360 --> 01:12:29,440
fuzz sometimes on this and and don't

1918
01:12:29,440 --> 01:12:30,800
talk about that we should take an

1919
01:12:30,800 --> 01:12:32,640
account into the design very much is the

1920
01:12:32,640 --> 01:12:34,080
relay issue

1921
01:12:34,080 --> 01:12:36,800
so all the large-scale existing

1922
01:12:36,800 --> 01:12:38,640
deployments of these very things

1923
01:12:38,640 --> 01:12:40,480
streaming or interactive have these i

1924
01:12:40,480 --> 01:12:43,040
mean the cdns have cdn nodes of some

1925
01:12:43,040 --> 01:12:45,760
type they might be very much http caches

1926
01:12:45,760 --> 01:12:47,360
they might be some sort of extended

1927
01:12:47,360 --> 01:12:49,120
support to http type cache that's

1928
01:12:49,120 --> 01:12:51,600
designed specifically to work with hls

1929
01:12:51,600 --> 01:12:54,239
um they might be something completely

1930
01:12:54,239 --> 01:12:56,320
you know

1931
01:12:56,320 --> 01:12:57,600
internally designed twitch may have

1932
01:12:57,600 --> 01:12:58,880
designed something works just for them

1933
01:12:58,880 --> 01:13:01,280
right you know those types of issues

1934
01:13:01,280 --> 01:13:03,120
on the interactive media we call these

1935
01:13:03,120 --> 01:13:05,440
you know cascaded sfus and if you look

1936
01:13:05,440 --> 01:13:07,199
at how conferences like large scale

1937
01:13:07,199 --> 01:13:08,880
conferences that are involved people

1938
01:13:08,880 --> 01:13:11,120
across multiple geographies work there's

1939
01:13:11,120 --> 01:13:12,960
always multiple relays and distribution

1940
01:13:12,960 --> 01:13:15,679
points and sfus involved

1941
01:13:15,679 --> 01:13:16,800
now

1942
01:13:16,800 --> 01:13:18,320
there's a tendency to say well let's

1943
01:13:18,320 --> 01:13:19,760
just pretend those don't exist in our

1944
01:13:19,760 --> 01:13:21,120
design we won't think about them and

1945
01:13:21,120 --> 01:13:22,800
then we can insert them in later and i

1946
01:13:22,800 --> 01:13:24,640
don't think that that's working out very

1947
01:13:24,640 --> 01:13:26,320
well for us

1948
01:13:26,320 --> 01:13:28,400
i think we need to explicitly consider

1949
01:13:28,400 --> 01:13:30,159
the relays in the design because they

1950
01:13:30,159 --> 01:13:32,000
they really change it they're one of the

1951
01:13:32,000 --> 01:13:34,480
complicated parts of the the cost points

1952
01:13:34,480 --> 01:13:35,920
to change

1953
01:13:35,920 --> 01:13:38,080
um they also

1954
01:13:38,080 --> 01:13:39,440
you know the our current sort of you

1955
01:13:39,440 --> 01:13:40,400
know i

1956
01:13:40,400 --> 01:13:41,520
right now there's a lot of people

1957
01:13:41,520 --> 01:13:43,520
figuring out how to you know remove all

1958
01:13:43,520 --> 01:13:45,440
their private keys from their tls

1959
01:13:45,440 --> 01:13:47,360
private keys from their cdns in russia

1960
01:13:47,360 --> 01:13:48,880
before they're seized

1961
01:13:48,880 --> 01:13:51,440
um you know like just this faking the

1962
01:13:51,440 --> 01:13:53,120
origin in a relay may not have been the

1963
01:13:53,120 --> 01:13:55,440
best design model for it so i think that

1964
01:13:55,440 --> 01:13:57,760
we do need to think explicitly about how

1965
01:13:57,760 --> 01:14:00,480
these work and what we need to do and

1966
01:14:00,480 --> 01:14:02,080
recognize that for this to be a

1967
01:14:02,080 --> 01:14:03,840
successful deployment they're one of the

1968
01:14:03,840 --> 01:14:05,360
people that have to have an incentive

1969
01:14:05,360 --> 01:14:07,600
for the relays to deploy and work

1970
01:14:07,600 --> 01:14:09,840
um this you know a lot of the stuff too

1971
01:14:09,840 --> 01:14:11,199
of you know that came up earlier about

1972
01:14:11,199 --> 01:14:13,120
webrtc or not i mean i you know i think

1973
01:14:13,120 --> 01:14:14,400
we could put anything in a browser as

1974
01:14:14,400 --> 01:14:15,520
long as there was an incentive for the

1975
01:14:15,520 --> 01:14:17,040
browser to put it in there and it meant

1976
01:14:17,040 --> 01:14:19,120
the safety and security constraints that

1977
01:14:19,120 --> 01:14:21,679
the browsers promised to their users as

1978
01:14:21,679 --> 01:14:23,840
part part of it going on in so i think

1979
01:14:23,840 --> 01:14:25,920
changes are possible there too including

1980
01:14:25,920 --> 01:14:28,320
doing a whole new protocol um i also

1981
01:14:28,320 --> 01:14:29,920
think that everything we've been talking

1982
01:14:29,920 --> 01:14:32,000
about here just trivially you can map it

1983
01:14:32,000 --> 01:14:34,960
on top of web transport uh or on quick

1984
01:14:34,960 --> 01:14:36,800
raw you know that's the type of thing

1985
01:14:36,800 --> 01:14:38,239
that could be worked out very much in

1986
01:14:38,239 --> 01:14:39,920
the working group much later what we

1987
01:14:39,920 --> 01:14:41,280
need to agree here is just sort of the

1988
01:14:41,280 --> 01:14:42,719
overall scope of these things kind of

1989
01:14:42,719 --> 01:14:45,280
coming together

1990
01:14:45,760 --> 01:14:47,679
so uh

1991
01:14:47,679 --> 01:14:49,120
with that

1992
01:14:49,120 --> 01:14:51,040
i want to just sort of end with

1993
01:14:51,040 --> 01:14:54,159
where i think loosely we should be going

1994
01:14:54,159 --> 01:14:57,600
and having this and um that is i think

1995
01:14:57,600 --> 01:14:59,120
we should have a sort of

1996
01:14:59,120 --> 01:15:02,080
north star of an eventual solution and

1997
01:15:02,080 --> 01:15:04,000
architecture that solves a lot of the

1998
01:15:04,000 --> 01:15:05,520
hard use cases

1999
01:15:05,520 --> 01:15:07,120
that we want to be able to deal with and

2000
01:15:07,120 --> 01:15:08,480
that's really important to have the

2001
01:15:08,480 --> 01:15:09,920
incentives to make all of this and the

2002
01:15:09,920 --> 01:15:12,080
incentives to deploy it

2003
01:15:12,080 --> 01:15:14,560
those types of issues now that said i

2004
01:15:14,560 --> 01:15:16,800
don't think we have to do all of that

2005
01:15:16,800 --> 01:15:19,199
day one i think day one we can start on

2006
01:15:19,199 --> 01:15:20,719
some of the use cases that are most

2007
01:15:20,719 --> 01:15:22,960
important to people which have really

2008
01:15:22,960 --> 01:15:24,960
been over what were the pub arrows in

2009
01:15:24,960 --> 01:15:26,640
all of these diagrams

2010
01:15:26,640 --> 01:15:28,960
uh of how to push this stuff around

2011
01:15:28,960 --> 01:15:29,920
and

2012
01:15:29,920 --> 01:15:31,600
you know i i i think that where we need

2013
01:15:31,600 --> 01:15:34,320
to be there is we need options around

2014
01:15:34,320 --> 01:15:36,320
figuring out how we prioritize those how

2015
01:15:36,320 --> 01:15:38,000
we put them in streams how we put those

2016
01:15:38,000 --> 01:15:39,600
and things and we need to rely on the

2017
01:15:39,600 --> 01:15:41,120
fact we're sitting on top of quick

2018
01:15:41,120 --> 01:15:43,440
existing congestion control

2019
01:15:43,440 --> 01:15:45,360
i think that a lot of the current

2020
01:15:45,360 --> 01:15:46,880
discussions we had today are printed

2021
01:15:46,880 --> 01:15:48,320
pretty lacking on discussion a little

2022
01:15:48,320 --> 01:15:50,000
bit about how audio fits into some of

2023
01:15:50,000 --> 01:15:52,000
that and probably some of the proposals

2024
01:15:52,000 --> 01:15:54,000
you know that that's how audio fits in

2025
01:15:54,000 --> 01:15:55,920
there is going to require options for

2026
01:15:55,920 --> 01:15:58,880
datagrams in some cases or on streams i

2027
01:15:58,880 --> 01:15:59,920
think there'll be some things where you

2028
01:15:59,920 --> 01:16:02,640
can you need to choose both of those

2029
01:16:02,640 --> 01:16:03,520
uh

2030
01:16:03,520 --> 01:16:05,280
content naming and how we do that we

2031
01:16:05,280 --> 01:16:06,560
sort of brushed off i'm not saying we

2032
01:16:06,560 --> 01:16:09,360
should do signaling but i do think that

2033
01:16:09,360 --> 01:16:11,280
you can't if you want to build an

2034
01:16:11,280 --> 01:16:14,159
interoperable device that connects up to

2035
01:16:14,159 --> 01:16:15,679
somebody's ingress streaming server or

2036
01:16:15,679 --> 01:16:18,080
not you you have to understand like you

2037
01:16:18,080 --> 01:16:19,520
know people say oh it's just in the uri

2038
01:16:19,520 --> 01:16:20,480
or something yeah yeah that's great

2039
01:16:20,480 --> 01:16:22,080
that's fine but you have to say how that

2040
01:16:22,080 --> 01:16:24,320
is and you need to realize that how we

2041
01:16:24,320 --> 01:16:26,719
expressed uris and stuff is one of the

2042
01:16:26,719 --> 01:16:29,199
major costs in some of the existing cdn

2043
01:16:29,199 --> 01:16:30,480
deployments and maybe that the

2044
01:16:30,480 --> 01:16:32,239
incentives to cdns are designing that a

2045
01:16:32,239 --> 01:16:34,000
little bit more optimized for cdns

2046
01:16:34,000 --> 01:16:36,320
instead of forcing onto cdn's something

2047
01:16:36,320 --> 01:16:37,760
that was not designed for them to start

2048
01:16:37,760 --> 01:16:39,520
with or whoever's doing the relay node

2049
01:16:39,520 --> 01:16:41,040
type ideas

2050
01:16:41,040 --> 01:16:42,400
uh i definitely think that we need to

2051
01:16:42,400 --> 01:16:44,080
design the ingest and the distribution

2052
01:16:44,080 --> 01:16:46,080
to work together i

2053
01:16:46,080 --> 01:16:47,600
actually don't really see any reason

2054
01:16:47,600 --> 01:16:49,120
their protocols would be different for

2055
01:16:49,120 --> 01:16:51,040
pushing the video around but maybe

2056
01:16:51,040 --> 01:16:54,320
somebody can convince me um

2057
01:16:54,320 --> 01:16:56,640
and uh

2058
01:16:56,640 --> 01:16:59,679
there's the question about webrtc i mean

2059
01:16:59,679 --> 01:17:01,360
my view is not that we couldn't do this

2060
01:17:01,360 --> 01:17:04,640
on webrtc i mean webrtc is a beautiful

2061
01:17:04,640 --> 01:17:06,640
cathedral and we could definitely add

2062
01:17:06,640 --> 01:17:08,719
some more gorgiles to the edge of it to

2063
01:17:08,719 --> 01:17:11,840
do whatever we want the problem is is

2064
01:17:11,840 --> 01:17:14,800
just the complexity the size putting

2065
01:17:14,800 --> 01:17:17,199
into clients the the getting new things

2066
01:17:17,199 --> 01:17:19,280
out so i think that that is one of the

2067
01:17:19,280 --> 01:17:21,040
biggest concerns in

2068
01:17:21,040 --> 01:17:22,159
thinking about whether you should do

2069
01:17:22,159 --> 01:17:23,760
this work or not as well can you just

2070
01:17:23,760 --> 01:17:25,600
already do it some other way and if the

2071
01:17:25,600 --> 01:17:27,040
answer to that's yes

2072
01:17:27,040 --> 01:17:28,800
but my view is it's pretty pretty

2073
01:17:28,800 --> 01:17:31,280
complicated and that really

2074
01:17:31,280 --> 01:17:33,360
the rtp was not particularly well

2075
01:17:33,360 --> 01:17:36,400
designed for a large scale distribution

2076
01:17:36,400 --> 01:17:39,280
out in relay content zone and i know

2077
01:17:39,280 --> 01:17:40,239
that

2078
01:17:40,239 --> 01:17:42,800
rtp was designed for multicast and

2079
01:17:42,800 --> 01:17:44,159
really what i'm proposing here is an

2080
01:17:44,159 --> 01:17:46,320
application level multicast but i think

2081
01:17:46,320 --> 01:17:48,480
rtp and its practical usage has moved a

2082
01:17:48,480 --> 01:17:50,480
long ways away from being

2083
01:17:50,480 --> 01:17:52,239
a multicast or an application layer

2084
01:17:52,239 --> 01:17:55,199
multicast network over top of it so i

2085
01:17:55,199 --> 01:17:57,760
just think it's a very very difficult

2086
01:17:57,760 --> 01:17:59,920
thing to map over to what we need here

2087
01:17:59,920 --> 01:18:02,560
particularly on the distribution site

2088
01:18:02,560 --> 01:18:03,840
and with that let me just go to

2089
01:18:03,840 --> 01:18:05,679
questions

2090
01:18:05,679 --> 01:18:07,840
yeah this is clarifying questions we'll

2091
01:18:07,840 --> 01:18:10,159
soon go into the discussion part so

2092
01:18:10,159 --> 01:18:12,000
if you have any clarification questions

2093
01:18:12,000 --> 01:18:15,360
to call them please go ahead

2094
01:18:21,440 --> 01:18:24,440
spencer

2095
01:18:27,960 --> 01:18:30,560
[Music]

2096
01:18:30,560 --> 01:18:33,520
spencer dawkins this may be a clarifying

2097
01:18:33,520 --> 01:18:37,360
question or the beginning of discussion

2098
01:18:37,679 --> 01:18:39,600
but

2099
01:18:39,600 --> 01:18:41,760
i

2100
01:18:41,760 --> 01:18:45,280
turned my hand on to ask to talk ask

2101
01:18:45,280 --> 01:18:46,640
luke about

2102
01:18:46,640 --> 01:18:49,920
uh his comments on latency and uh

2103
01:18:49,920 --> 01:18:50,800
i

2104
01:18:50,800 --> 01:18:53,600
appreciate uh cullen

2105
01:18:53,600 --> 01:18:56,239
putting up a slide about

2106
01:18:56,239 --> 01:18:58,880
doing things with no relays

2107
01:18:58,880 --> 01:19:01,440
uh and for the reasons why he was you

2108
01:19:01,440 --> 01:19:03,600
know why you named that

2109
01:19:03,600 --> 01:19:04,800
um

2110
01:19:04,800 --> 01:19:06,800
but

2111
01:19:06,800 --> 01:19:08,960
luke's categories

2112
01:19:08,960 --> 01:19:12,159
included a thing called international

2113
01:19:12,159 --> 01:19:13,120
and

2114
01:19:13,120 --> 01:19:15,280
i

2115
01:19:15,840 --> 01:19:17,120
you know don't have to have an answer

2116
01:19:17,120 --> 01:19:18,800
here but i think the question is worth

2117
01:19:18,800 --> 01:19:20,159
us asking

2118
01:19:20,159 --> 01:19:22,640
what does that mean does that mean

2119
01:19:22,640 --> 01:19:24,159
uh

2120
01:19:24,159 --> 01:19:27,679
that it's a long way from our cdn

2121
01:19:27,679 --> 01:19:29,120
or

2122
01:19:29,120 --> 01:19:32,560
that it's a long way over our cdn with

2123
01:19:32,560 --> 01:19:35,440
and uh over a lossy

2124
01:19:35,440 --> 01:19:37,600
network at that point

2125
01:19:37,600 --> 01:19:40,719
or something else

2126
01:19:40,719 --> 01:19:42,560
but

2127
01:19:42,560 --> 01:19:44,960
like i said your your comment about

2128
01:19:44,960 --> 01:19:47,280
doing things without relays

2129
01:19:47,280 --> 01:19:50,880
i think really speaks to that and

2130
01:19:50,880 --> 01:19:54,080
i think i think that's

2131
01:19:55,679 --> 01:19:58,800
yes stephon is still here so i can say

2132
01:19:58,800 --> 01:20:00,560
the draft that he offered to write may

2133
01:20:00,560 --> 01:20:01,280
be

2134
01:20:01,280 --> 01:20:02,640
very

2135
01:20:02,640 --> 01:20:05,199
very useful for that as well

2136
01:20:05,199 --> 01:20:06,639
thank you i will say something about

2137
01:20:06,639 --> 01:20:08,400
that i mean i i think that it's very

2138
01:20:08,400 --> 01:20:10,560
easy to design something that works well

2139
01:20:10,560 --> 01:20:13,520
on good networks and that comes back to

2140
01:20:13,520 --> 01:20:15,360
uh some um

2141
01:20:15,360 --> 01:20:16,880
stuff somebody said earlier like you can

2142
01:20:16,880 --> 01:20:18,400
just ignore you can just send stuff as

2143
01:20:18,400 --> 01:20:20,239
fast as you want and just sort of ignore

2144
01:20:20,239 --> 01:20:22,159
all normal things about networks and it

2145
01:20:22,159 --> 01:20:24,080
works a lot of the time it really does

2146
01:20:24,080 --> 01:20:26,639
um the problem is it's the hard cases

2147
01:20:26,639 --> 01:20:28,960
where it doesn't work i mean if you have

2148
01:20:28,960 --> 01:20:30,880
if you have a service that doesn't work

2149
01:20:30,880 --> 01:20:32,560
in five percent of network connections

2150
01:20:32,560 --> 01:20:34,080
and look just sending with no

2151
01:20:34,080 --> 01:20:35,760
considerations whatsoever will fail more

2152
01:20:35,760 --> 01:20:37,360
often than that it's not going to be a

2153
01:20:37,360 --> 01:20:39,280
viable service i also think you need to

2154
01:20:39,280 --> 01:20:40,960
be talking about is really a lot of

2155
01:20:40,960 --> 01:20:43,440
countries so i'm very familiar deeply

2156
01:20:43,440 --> 01:20:45,440
familiar with uh deployments that work

2157
01:20:45,440 --> 01:20:46,800
in you know most of the countries in the

2158
01:20:46,800 --> 01:20:47,600
world

2159
01:20:47,600 --> 01:20:49,440
and what it takes to have a provide a

2160
01:20:49,440 --> 01:20:51,120
reasonable quality interactive media in

2161
01:20:51,120 --> 01:20:53,440
all of those environments

2162
01:20:53,440 --> 01:20:54,320
um

2163
01:20:54,320 --> 01:20:56,639
to do that and this is very common

2164
01:20:56,639 --> 01:20:58,639
across all of these major services and

2165
01:20:58,639 --> 01:20:59,920
even different things you see people

2166
01:20:59,920 --> 01:21:02,239
today using at least about 100 points of

2167
01:21:02,239 --> 01:21:04,480
presence for their cdns or sfus or

2168
01:21:04,480 --> 01:21:06,560
whatever to get the latency low enough

2169
01:21:06,560 --> 01:21:07,920
to deliver the type of things they do

2170
01:21:07,920 --> 01:21:10,239
today and that's not just for web

2171
01:21:10,239 --> 01:21:11,920
conferencing that's across a wide range

2172
01:21:11,920 --> 01:21:13,120
of things that are interactive you end

2173
01:21:13,120 --> 01:21:15,120
up about that many points i think we're

2174
01:21:15,120 --> 01:21:16,639
about to see a

2175
01:21:16,639 --> 01:21:18,239
massive change in the general cdn

2176
01:21:18,239 --> 01:21:20,000
networks where the number of points of

2177
01:21:20,000 --> 01:21:21,920
presence that you have just goes wildly

2178
01:21:21,920 --> 01:21:23,440
up if you look at delivering something

2179
01:21:23,440 --> 01:21:25,520
like stadia um or that sort of

2180
01:21:25,520 --> 01:21:28,960
interactive gaming type thing i i i my

2181
01:21:28,960 --> 01:21:30,560
my belief on that is you need a lot more

2182
01:21:30,560 --> 01:21:31,920
points of presence than that and that

2183
01:21:31,920 --> 01:21:33,199
we're going to get them and so you're

2184
01:21:33,199 --> 01:21:35,360
going to see people selecting a cdn like

2185
01:21:35,360 --> 01:21:37,840
which cdn they use like in a very small

2186
01:21:37,840 --> 01:21:39,120
area be able to choose from different

2187
01:21:39,120 --> 01:21:41,120
ones versus just i got us west and

2188
01:21:41,120 --> 01:21:42,719
that's close enough i mean i think it's

2189
01:21:42,719 --> 01:21:44,080
going to be down to you know per city

2190
01:21:44,080 --> 01:21:46,000
levels or even lower so i think that

2191
01:21:46,000 --> 01:21:47,360
that's one of the things that makes this

2192
01:21:47,360 --> 01:21:49,440
type of protocol exciting now

2193
01:21:49,440 --> 01:21:51,920
is to be able to take advantage of uh a

2194
01:21:51,920 --> 01:21:53,760
cdn market that's going to rapidly

2195
01:21:53,760 --> 01:21:56,560
change over the next seven years

2196
01:21:56,560 --> 01:21:58,560
right so i i

2197
01:21:58,560 --> 01:22:00,560
was uh so i've been thinking about this

2198
01:22:00,560 --> 01:22:04,000
as a transporter i'm sir sit down

2199
01:22:04,000 --> 01:22:05,840
you're rambling

2200
01:22:05,840 --> 01:22:08,480
come back and i think i could cut

2201
01:22:08,480 --> 01:22:10,320
so there are people in line behind me

2202
01:22:10,320 --> 01:22:13,440
for clarified questions so i will i will

2203
01:22:13,440 --> 01:22:15,120
step to the back of the line for them

2204
01:22:15,120 --> 01:22:17,040
yeah

2205
01:22:17,040 --> 01:22:19,920
so julius

2206
01:22:20,000 --> 01:22:21,120
um

2207
01:22:21,120 --> 01:22:23,040
yes so that's just a quick comment when

2208
01:22:23,040 --> 01:22:24,639
you're speaking about doing a group of

2209
01:22:24,639 --> 01:22:26,719
pictures over one stream

2210
01:22:26,719 --> 01:22:29,280
i'm a little bit concerned about how it

2211
01:22:29,280 --> 01:22:32,560
can generalize to svc

2212
01:22:32,560 --> 01:22:34,480
so when you're doing this pc you really

2213
01:22:34,480 --> 01:22:37,360
want to avoid being blocked by a higher

2214
01:22:37,360 --> 01:22:38,800
layer

2215
01:22:38,800 --> 01:22:39,840
packet

2216
01:22:39,840 --> 01:22:41,920
you want to avoid suffering from head of

2217
01:22:41,920 --> 01:22:44,000
line blocking and i'm a little bit

2218
01:22:44,000 --> 01:22:45,760
concerned that we might be painting

2219
01:22:45,760 --> 01:22:48,320
ourselves into a corner here by making

2220
01:22:48,320 --> 01:22:50,239
this choice

2221
01:22:50,239 --> 01:22:52,159
you're 100 right i totally believe in

2222
01:22:52,159 --> 01:22:54,000
scalable codex i believed in them for

2223
01:22:54,000 --> 01:22:55,840
way too long and they keep not deploying

2224
01:22:55,840 --> 01:22:57,840
but i mean i i think yeah and i think

2225
01:22:57,840 --> 01:22:59,199
this is exactly the work the working

2226
01:22:59,199 --> 01:23:00,960
group should do is nail down how does

2227
01:23:00,960 --> 01:23:02,400
this really work if you look at our

2228
01:23:02,400 --> 01:23:04,080
actual proposals both going back to

2229
01:23:04,080 --> 01:23:06,000
ripped and then coming into the quicker

2230
01:23:06,000 --> 01:23:08,000
stuff i mean

2231
01:23:08,000 --> 01:23:09,600
yeah we want to have different

2232
01:23:09,600 --> 01:23:11,360
we want to be able to put different

2233
01:23:11,360 --> 01:23:12,800
layers in different streams with

2234
01:23:12,800 --> 01:23:14,560
different priorities to be able to deal

2235
01:23:14,560 --> 01:23:16,800
with that type of stuff so um take that

2236
01:23:16,800 --> 01:23:18,560
as a gross oversimplification what i

2237
01:23:18,560 --> 01:23:21,920
have on that slide you're 100 right

2238
01:23:22,960 --> 01:23:26,159
okay luke quickly

2239
01:23:26,159 --> 01:23:28,639
i wanted to answer spencer a little bit

2240
01:23:28,639 --> 01:23:31,760
and add maybe a little new requirement

2241
01:23:31,760 --> 01:23:34,159
sometimes relays are expensive sometimes

2242
01:23:34,159 --> 01:23:36,080
like we have for twitch we have a lot of

2243
01:23:36,080 --> 01:23:38,800
broadcasts that have zero one viewers um

2244
01:23:38,800 --> 01:23:42,320
we don't want pay to send the data over

2245
01:23:42,320 --> 01:23:45,199
a backbone um over these relays

2246
01:23:45,199 --> 01:23:47,040
so one of our requirements is that yes

2247
01:23:47,040 --> 01:23:50,080
literally they can download a stream

2248
01:23:50,080 --> 01:23:52,639
like over the atlantic right like rtt is

2249
01:23:52,639 --> 01:23:53,760
huge

2250
01:23:53,760 --> 01:23:55,679
uh there's a lot of congestion because

2251
01:23:55,679 --> 01:23:57,199
they're using transit

2252
01:23:57,199 --> 01:24:00,559
but that's way cheaper for us

2253
01:24:00,800 --> 01:24:03,840
pros and cons

2254
01:24:04,480 --> 01:24:07,679
thanks uh sanjay quickly

2255
01:24:07,679 --> 01:24:09,679
hi kalan this is sanjay mishra verizon

2256
01:24:09,679 --> 01:24:12,239
um very good presentation and i think

2257
01:24:12,239 --> 01:24:14,400
obviously it's very exciting

2258
01:24:14,400 --> 01:24:16,960
to see some of the conversation here but

2259
01:24:16,960 --> 01:24:20,239
um looking operationally um

2260
01:24:20,239 --> 01:24:22,320
folks that are actually implementing uh

2261
01:24:22,320 --> 01:24:25,760
real-time distribution with webrtc today

2262
01:24:25,760 --> 01:24:28,639
um and doing a lot of investment in that

2263
01:24:28,639 --> 01:24:30,960
so what would be really

2264
01:24:30,960 --> 01:24:33,760
for them to sort of turn around and say

2265
01:24:33,760 --> 01:24:35,679
that you know this really offers me

2266
01:24:35,679 --> 01:24:38,159
something better and i need to redo my

2267
01:24:38,159 --> 01:24:40,080
distribution so so what's in there you

2268
01:24:40,080 --> 01:24:42,239
know is it the congestion control that's

2269
01:24:42,239 --> 01:24:43,440
going to be

2270
01:24:43,440 --> 01:24:45,520
the thing that would cause them to move

2271
01:24:45,520 --> 01:24:47,760
or what's the consideration here for

2272
01:24:47,760 --> 01:24:50,000
folks that are doing investment now

2273
01:24:50,000 --> 01:24:52,960
in webrtc to consider and move thanks so

2274
01:24:52,960 --> 01:24:55,040
you know like i work on webex which has

2275
01:24:55,040 --> 01:24:57,760
a huge investment on webrtc and being

2276
01:24:57,760 --> 01:24:59,280
able to use that to bring everyone in

2277
01:24:59,280 --> 01:25:01,760
it's been it's amazing good but the the

2278
01:25:01,760 --> 01:25:03,920
thing that really moves us is

2279
01:25:03,920 --> 01:25:06,159
dramatically lowering the cost of

2280
01:25:06,159 --> 01:25:08,560
scaling out the distribution while still

2281
01:25:08,560 --> 01:25:11,199
keeping the latencies we want um it

2282
01:25:11,199 --> 01:25:12,400
would be you know the thing that would

2283
01:25:12,400 --> 01:25:15,040
really drive us to to move to this i

2284
01:25:15,040 --> 01:25:17,040
think there's other people that are very

2285
01:25:17,040 --> 01:25:18,480
much coming more from the streaming

2286
01:25:18,480 --> 01:25:20,239
direction where

2287
01:25:20,239 --> 01:25:22,719
they have uh you know a great

2288
01:25:22,719 --> 01:25:25,360
distribution protocol right now um and

2289
01:25:25,360 --> 01:25:27,600
they're struggling to have a a good

2290
01:25:27,600 --> 01:25:29,120
ingress protocol and some of them are

2291
01:25:29,120 --> 01:25:31,360
finding webrtc too complicated or some

2292
01:25:31,360 --> 01:25:33,600
of them uh are finding the other options

2293
01:25:33,600 --> 01:25:34,880
that they have as an ingress protocol

2294
01:25:34,880 --> 01:25:36,560
are not really driving the

2295
01:25:36,560 --> 01:25:38,480
the real-time latencies they want and

2296
01:25:38,480 --> 01:25:40,000
being able to switch back and forth some

2297
01:25:40,000 --> 01:25:42,080
of these use cases but i think you are

2298
01:25:42,080 --> 01:25:44,400
hitting on the part of the problem here

2299
01:25:44,400 --> 01:25:46,239
which is do we have something that is

2300
01:25:46,239 --> 01:25:48,159
enough different and enough interesting

2301
01:25:48,159 --> 01:25:50,960
that it will really take off over webrtc

2302
01:25:50,960 --> 01:25:53,199
over just using webrtc to do a similar

2303
01:25:53,199 --> 01:25:54,719
thing and that's that's uh that's a hard

2304
01:25:54,719 --> 01:25:56,320
question to answer without digging into

2305
01:25:56,320 --> 01:25:59,360
a fair amount of the work

2306
01:26:00,560 --> 01:26:02,880
okay so thanks colin and we're going to

2307
01:26:02,880 --> 01:26:04,719
move into the sort of general discussion

2308
01:26:04,719 --> 01:26:06,560
we've got about 25 minutes for general

2309
01:26:06,560 --> 01:26:08,560
discussion uh there's just want to

2310
01:26:08,560 --> 01:26:10,480
acknowledge there's a lot of people here

2311
01:26:10,480 --> 01:26:12,159
there's a lot of different

2312
01:26:12,159 --> 01:26:13,679
backgrounds and use cases that are

2313
01:26:13,679 --> 01:26:16,800
important so um everyone just

2314
01:26:16,800 --> 01:26:18,000
you know and some people very passionate

2315
01:26:18,000 --> 01:26:19,360
about their favorite protocol and

2316
01:26:19,360 --> 01:26:21,360
whether it scales so try to keep it

2317
01:26:21,360 --> 01:26:22,960
civil and

2318
01:26:22,960 --> 01:26:24,320
you know try to bring you know new

2319
01:26:24,320 --> 01:26:26,639
information that's gonna like help drive

2320
01:26:26,639 --> 01:26:28,080
the work forward and

2321
01:26:28,080 --> 01:26:30,639
please be brief and try to avoid rat

2322
01:26:30,639 --> 01:26:33,360
holes and buy trades thanks

2323
01:26:33,360 --> 01:26:36,400
now welcome to queue up

2324
01:26:36,400 --> 01:26:38,400
spencer

2325
01:26:38,400 --> 01:26:41,120
that guy i'm spencer dawkins and justif

2326
01:26:41,120 --> 01:26:43,199
just to follow up on uh

2327
01:26:43,199 --> 01:26:45,679
my second thing

2328
01:26:45,679 --> 01:26:48,560
with cullen was that the iab has spent a

2329
01:26:48,560 --> 01:26:50,320
certain amount of time thinking about

2330
01:26:50,320 --> 01:26:52,080
centralization

2331
01:26:52,080 --> 01:26:54,719
and so the

2332
01:26:54,719 --> 01:26:57,760
decisions we make about

2333
01:26:57,760 --> 01:26:59,679
about

2334
01:26:59,679 --> 01:27:01,360
operating without relays and what the

2335
01:27:01,360 --> 01:27:03,120
requirements really are and things like

2336
01:27:03,120 --> 01:27:05,520
that may have pretty profound

2337
01:27:05,520 --> 01:27:07,360
implications for

2338
01:27:07,360 --> 01:27:10,639
how centralized the

2339
01:27:10,639 --> 01:27:14,320
internet becomes either more or less

2340
01:27:14,320 --> 01:27:16,639
thank you

2341
01:27:17,440 --> 01:27:20,000
thanks bernard

2342
01:27:20,000 --> 01:27:22,239
yeah um

2343
01:27:22,239 --> 01:27:23,360
what i've

2344
01:27:23,360 --> 01:27:25,600
heard is uh and i've heard this in other

2345
01:27:25,600 --> 01:27:27,679
places as well is that there is a real

2346
01:27:27,679 --> 01:27:30,560
uh interest in getting a new ingestion

2347
01:27:30,560 --> 01:27:32,880
protocol for the reasons that ying

2348
01:27:32,880 --> 01:27:35,280
described so i think there's definitely

2349
01:27:35,280 --> 01:27:37,280
something uh that needs to be done there

2350
01:27:37,280 --> 01:27:38,239
but

2351
01:27:38,239 --> 01:27:39,440
one of the things i've noticed in

2352
01:27:39,440 --> 01:27:41,120
reading the

2353
01:27:41,120 --> 01:27:42,480
requirements for different ingestion

2354
01:27:42,480 --> 01:27:45,120
protocols is they are subtly different

2355
01:27:45,120 --> 01:27:47,440
so i'm just wondering if

2356
01:27:47,440 --> 01:27:50,719
for example something like wrist

2357
01:27:50,719 --> 01:27:51,840
seems to have slightly different

2358
01:27:51,840 --> 01:27:53,120
requirements than what we're talking

2359
01:27:53,120 --> 01:27:55,040
about here so i'm wondering if we can

2360
01:27:55,040 --> 01:27:56,639
bring some of those

2361
01:27:56,639 --> 01:27:59,600
folks in so we get a very clear

2362
01:27:59,600 --> 01:28:01,920
problem statement

2363
01:28:01,920 --> 01:28:04,239
there thanks

2364
01:28:04,239 --> 01:28:06,159
thank you tom

2365
01:28:06,159 --> 01:28:08,159
hi there tom hill bt

2366
01:28:08,159 --> 01:28:10,000
um i was actually quite interested to

2367
01:28:10,000 --> 01:28:12,960
see the hierarchical unicast delivery

2368
01:28:12,960 --> 01:28:15,520
sub-pub mechanism uh in the the

2369
01:28:15,520 --> 01:28:18,960
architecture draft for quick r

2370
01:28:18,960 --> 01:28:20,560
has

2371
01:28:20,560 --> 01:28:23,040
uh has there been any discussion i can't

2372
01:28:23,040 --> 01:28:24,560
see any at present but has there been

2373
01:28:24,560 --> 01:28:27,120
any discussion on a multicast delivery

2374
01:28:27,120 --> 01:28:28,480
model

2375
01:28:28,480 --> 01:28:30,639
as part of this and or

2376
01:28:30,639 --> 01:28:32,080
is there any part of the architecture

2377
01:28:32,080 --> 01:28:34,080
that precludes that from being possible

2378
01:28:34,080 --> 01:28:36,639
in the future

2379
01:28:41,040 --> 01:28:42,560
colin did you want to jump in and answer

2380
01:28:42,560 --> 01:28:45,040
that real quick

2381
01:28:45,760 --> 01:28:48,560
uh i do um

2382
01:28:48,560 --> 01:28:51,199
yes um and that there has been a bunch

2383
01:28:51,199 --> 01:28:52,880
of discussion about it i i don't think

2384
01:28:52,880 --> 01:28:54,400
it really has resolved and it comes down

2385
01:28:54,400 --> 01:28:56,480
to an argument about how deployable

2386
01:28:56,480 --> 01:28:58,000
multicast is

2387
01:28:58,000 --> 01:29:00,960
and people always say multicast is not

2388
01:29:00,960 --> 01:29:03,040
possible to deploy while selecting their

2389
01:29:03,040 --> 01:29:05,440
printer within dns and watching their

2390
01:29:05,440 --> 01:29:06,400
video

2391
01:29:06,400 --> 01:29:08,080
for video on demand over a multi-class

2392
01:29:08,080 --> 01:29:10,800
service run by cable companies so uh i

2393
01:29:10,800 --> 01:29:13,360
think that that there is so the way i

2394
01:29:13,360 --> 01:29:15,520
have described quicker is there's many

2395
01:29:15,520 --> 01:29:17,760
ways to think of it it is both a you

2396
01:29:17,760 --> 01:29:19,360
know a name data networking type

2397
01:29:19,360 --> 01:29:21,040
protocol but it's also an application

2398
01:29:21,040 --> 01:29:24,560
layer multicast and it's also pops up us

2399
01:29:24,560 --> 01:29:26,800
i think that if you

2400
01:29:26,800 --> 01:29:29,760
had the quicker or model like that

2401
01:29:29,760 --> 01:29:31,520
working as an application layer

2402
01:29:31,520 --> 01:29:34,000
multicast if you were in a constrained

2403
01:29:34,000 --> 01:29:35,600
environment that actually supported real

2404
01:29:35,600 --> 01:29:37,679
multicast you could go to one of these

2405
01:29:37,679 --> 01:29:39,760
relays and the relays could reflect the

2406
01:29:39,760 --> 01:29:42,320
data into true proper multicast inside

2407
01:29:42,320 --> 01:29:44,880
of that environment um and then pull it

2408
01:29:44,880 --> 01:29:46,960
out uh one of the reasons that i haven't

2409
01:29:46,960 --> 01:29:49,600
been pushing building that as much is

2410
01:29:49,600 --> 01:29:52,400
multicast on wi-fi now like if the more

2411
01:29:52,400 --> 01:29:54,639
we move to wireless and what multicast

2412
01:29:54,639 --> 01:29:57,679
means on a wi-fi network or a cellular

2413
01:29:57,679 --> 01:29:59,840
network is it's a pretty bad story so i

2414
01:29:59,840 --> 01:30:01,199
think it all gets complicated but it's

2415
01:30:01,199 --> 01:30:02,560
one of the things that i really like

2416
01:30:02,560 --> 01:30:04,880
about this architecture is it opens the

2417
01:30:04,880 --> 01:30:06,800
door to having some of the segments use

2418
01:30:06,800 --> 01:30:09,360
real multicast

2419
01:30:09,360 --> 01:30:10,400
thanks

2420
01:30:10,400 --> 01:30:12,719
steven

2421
01:30:12,719 --> 01:30:15,360
so the uh stephen wenger so the question

2422
01:30:15,360 --> 01:30:16,719
here was

2423
01:30:16,719 --> 01:30:18,239
where should we

2424
01:30:18,239 --> 01:30:23,199
focus on and my personal preference is

2425
01:30:23,199 --> 01:30:25,840
to focus on the way

2426
01:30:25,840 --> 01:30:26,800
uh

2427
01:30:26,800 --> 01:30:27,760
in the

2428
01:30:27,760 --> 01:30:30,560
distribution side of the story

2429
01:30:30,560 --> 01:30:33,600
to get to go away from the three seconds

2430
01:30:33,600 --> 01:30:36,159
or so latency that we have at the moment

2431
01:30:36,159 --> 01:30:39,199
when we switch channels on a tv right

2432
01:30:39,199 --> 01:30:40,320
that's just

2433
01:30:40,320 --> 01:30:42,239
so ridiculous if we could do something

2434
01:30:42,239 --> 01:30:45,600
there that's where the money is

2435
01:30:45,600 --> 01:30:47,600
on the interest side

2436
01:30:47,600 --> 01:30:49,679
i know we are not in the good old times

2437
01:30:49,679 --> 01:30:51,840
when when the tv trucks were driving

2438
01:30:51,840 --> 01:30:54,560
around and satellite

2439
01:30:54,560 --> 01:30:58,000
links were used and so on but it's still

2440
01:30:58,000 --> 01:30:59,440
really small

2441
01:30:59,440 --> 01:31:03,120
and i also question a little bit whether

2442
01:31:03,120 --> 01:31:06,320
real standard solutions are required

2443
01:31:06,320 --> 01:31:09,519
there i think

2444
01:31:09,600 --> 01:31:12,480
the world has survived so far quite well

2445
01:31:12,480 --> 01:31:15,600
on a handful of

2446
01:31:15,600 --> 01:31:18,800
let's call them industry standards uh

2447
01:31:18,800 --> 01:31:22,480
and call them standards for for

2448
01:31:23,360 --> 01:31:25,360
because it sounds good yeah but in fact

2449
01:31:25,360 --> 01:31:26,800
it's it's basically

2450
01:31:26,800 --> 01:31:31,199
uh documentary implementations right and

2451
01:31:31,199 --> 01:31:32,880
that was good enough and i don't see a

2452
01:31:32,880 --> 01:31:35,760
reason why why an organization as big

2453
01:31:35,760 --> 01:31:38,239
and cumbersome as us needs to get

2454
01:31:38,239 --> 01:31:40,400
seriously involved there so i would i

2455
01:31:40,400 --> 01:31:42,400
would go for for the distribution that's

2456
01:31:42,400 --> 01:31:44,960
where the money is thank you

2457
01:31:44,960 --> 01:31:48,080
thanks stuart

2458
01:31:52,960 --> 01:31:55,040
just a quick comment i've been sitting

2459
01:31:55,040 --> 01:31:56,560
here wondering whether to say anything

2460
01:31:56,560 --> 01:31:57,920
and i think i will

2461
01:31:57,920 --> 01:32:00,159
someone made a comment earlier that

2462
01:32:00,159 --> 01:32:03,280
congestion control is overrated

2463
01:32:03,280 --> 01:32:05,599
and

2464
01:32:05,840 --> 01:32:09,199
i've heard this from other people

2465
01:32:09,199 --> 01:32:10,800
so i just want to describe that the

2466
01:32:10,800 --> 01:32:13,199
engineers that have said this to me

2467
01:32:13,199 --> 01:32:15,679
are the same engineers that write their

2468
01:32:15,679 --> 01:32:19,120
own protocol that runs over udp

2469
01:32:19,120 --> 01:32:20,960
and separately they report yeah

2470
01:32:20,960 --> 01:32:23,199
sometimes it works and sometimes it

2471
01:32:23,199 --> 01:32:24,080
doesn't

2472
01:32:24,080 --> 01:32:25,760
sometimes it just spectacularly fails

2473
01:32:25,760 --> 01:32:28,239
and doesn't work at all and nobody knows

2474
01:32:28,239 --> 01:32:29,120
why

2475
01:32:29,120 --> 01:32:31,520
the network's just not good enough

2476
01:32:31,520 --> 01:32:33,280
um

2477
01:32:33,280 --> 01:32:34,960
and they don't do not see the connection

2478
01:32:34,960 --> 01:32:36,880
between these two statements

2479
01:32:36,880 --> 01:32:39,120
so

2480
01:32:39,199 --> 01:32:42,800
so i am very optimistic about

2481
01:32:42,800 --> 01:32:43,600
uh

2482
01:32:43,600 --> 01:32:45,199
media and other things running over

2483
01:32:45,199 --> 01:32:46,000
quick

2484
01:32:46,000 --> 01:32:48,159
for people who for whatever reason feel

2485
01:32:48,159 --> 01:32:51,199
like tcp doesn't meet their needs

2486
01:32:51,199 --> 01:32:53,360
quick has much richer semantics with

2487
01:32:53,360 --> 01:32:56,080
multiple streams and priorities

2488
01:32:56,080 --> 01:32:56,880
but

2489
01:32:56,880 --> 01:32:58,719
it has a competent congestion control

2490
01:32:58,719 --> 01:33:01,199
algorithm underlying it all

2491
01:33:01,199 --> 01:33:03,520
so that's why i'm very optimistic that

2492
01:33:03,520 --> 01:33:05,840
many of these homegrown protocols

2493
01:33:05,840 --> 01:33:07,679
running on top of a competent congestion

2494
01:33:07,679 --> 01:33:10,320
controller will be better than running

2495
01:33:10,320 --> 01:33:13,440
over raw udp and sometimes they just

2496
01:33:13,440 --> 01:33:16,800
don't work and nobody knows why

2497
01:33:16,800 --> 01:33:18,080
thanks

2498
01:33:18,080 --> 01:33:21,080
pete

2499
01:33:22,480 --> 01:33:25,840
stuart's tall uh pete resnick um

2500
01:33:25,840 --> 01:33:27,679
so i've been sitting here still trying

2501
01:33:27,679 --> 01:33:30,080
to figure out what this

2502
01:33:30,080 --> 01:33:32,639
intrinsically has to do with quick

2503
01:33:32,639 --> 01:33:34,239
it sounds like there's new protocol to

2504
01:33:34,239 --> 01:33:35,360
be written

2505
01:33:35,360 --> 01:33:38,239
um at upper layers i know it's quaint to

2506
01:33:38,239 --> 01:33:40,159
talk about layers anymore

2507
01:33:40,159 --> 01:33:40,960
but

2508
01:33:40,960 --> 01:33:42,960
and and it sounds like quick has some

2509
01:33:42,960 --> 01:33:45,280
stuff underneath it that will

2510
01:33:45,280 --> 01:33:47,840
help those protocols work better but

2511
01:33:47,840 --> 01:33:49,920
beyond an applicability statement that

2512
01:33:49,920 --> 01:33:50,800
says

2513
01:33:50,800 --> 01:33:52,320
this is why you should use quick

2514
01:33:52,320 --> 01:33:54,400
underneath because these things in this

2515
01:33:54,400 --> 01:33:56,080
higher layer protocol are going to work

2516
01:33:56,080 --> 01:33:58,320
better or work at all

2517
01:33:58,320 --> 01:33:59,920
this doesn't seem like a quick thing

2518
01:33:59,920 --> 01:34:04,800
this seems like media protocol stuff

2519
01:34:04,800 --> 01:34:07,280
exactly

2520
01:34:08,320 --> 01:34:10,800
i i may just jump in and express a

2521
01:34:10,800 --> 01:34:12,639
personal opinion which maybe which is

2522
01:34:12,639 --> 01:34:14,239
that um

2523
01:34:14,239 --> 01:34:16,159
quick brings a lot to the table sort of

2524
01:34:16,159 --> 01:34:19,040
off the shelf that can be reused and

2525
01:34:19,040 --> 01:34:21,440
that it can lead to simplicity at higher

2526
01:34:21,440 --> 01:34:22,560
layers

2527
01:34:22,560 --> 01:34:24,320
that may come at a cost as well but i

2528
01:34:24,320 --> 01:34:26,719
think that is you know sort of it's one

2529
01:34:26,719 --> 01:34:28,159
of the people who got like us talking

2530
01:34:28,159 --> 01:34:29,679
about media over quick i think that's

2531
01:34:29,679 --> 01:34:32,080
one of the drivers for why quick is

2532
01:34:32,080 --> 01:34:34,800
built into the name of there right and

2533
01:34:34,800 --> 01:34:36,639
you know i i

2534
01:34:36,639 --> 01:34:38,880
don't want to dismiss that at all it's

2535
01:34:38,880 --> 01:34:40,159
just

2536
01:34:40,159 --> 01:34:42,159
i don't think that this working group

2537
01:34:42,159 --> 01:34:44,639
should limit itself in the sense that if

2538
01:34:44,639 --> 01:34:46,880
someone comes up with the cool

2539
01:34:46,880 --> 01:34:49,360
way to use sctp to do that and is

2540
01:34:49,360 --> 01:34:51,679
deployable i don't know how that works

2541
01:34:51,679 --> 01:34:53,440
but okay

2542
01:34:53,440 --> 01:34:55,199
god bless them they can go ahead and do

2543
01:34:55,199 --> 01:34:57,199
that but that this working group

2544
01:34:57,199 --> 01:34:58,719
shouldn't be thinking necessarily in

2545
01:34:58,719 --> 01:35:00,239
terms of quick but in terms of the

2546
01:35:00,239 --> 01:35:03,920
underlying structure that it needs

2547
01:35:03,920 --> 01:35:05,440
yeah thank you

2548
01:35:05,440 --> 01:35:07,360
um

2549
01:35:07,360 --> 01:35:09,520
hi um a couple a couple of points just

2550
01:35:09,520 --> 01:35:11,440
responding to pts that i totally agree

2551
01:35:11,440 --> 01:35:14,400
um so when we proposed quicker uh one of

2552
01:35:14,400 --> 01:35:16,239
the things that was called was media

2553
01:35:16,239 --> 01:35:18,159
delivery protocol um

2554
01:35:18,159 --> 01:35:21,520
and and the initial uh uh thinking was

2555
01:35:21,520 --> 01:35:24,239
around udp there was no quick as such uh

2556
01:35:24,239 --> 01:35:25,920
but but that goes to the point saying

2557
01:35:25,920 --> 01:35:27,440
that it's a media relevant protocol that

2558
01:35:27,440 --> 01:35:29,280
this this working group should solve and

2559
01:35:29,280 --> 01:35:32,719
yes if we can provide uh the benefits we

2560
01:35:32,719 --> 01:35:34,320
should definitely use use and the future

2561
01:35:34,320 --> 01:35:35,840
versions of quick provides additional

2562
01:35:35,840 --> 01:35:37,280
benefits that gets

2563
01:35:37,280 --> 01:35:39,679
uh looped in uh into the delivery

2564
01:35:39,679 --> 01:35:42,480
protocol and also i i feel that uh it

2565
01:35:42,480 --> 01:35:44,159
would be worth for the group's time to

2566
01:35:44,159 --> 01:35:46,080
see what problems and use cases that we

2567
01:35:46,080 --> 01:35:48,239
bring in that today's solution do not

2568
01:35:48,239 --> 01:35:51,440
solve our inventory solutions do not uh

2569
01:35:51,440 --> 01:35:53,679
scale out or in whatever uh

2570
01:35:53,679 --> 01:35:56,320
problems that we see like if it's a

2571
01:35:56,320 --> 01:35:58,000
simple question about why something like

2572
01:35:58,000 --> 01:35:59,440
low latency dash cannot work on the

2573
01:35:59,440 --> 01:36:01,440
distribution side uh

2574
01:36:01,440 --> 01:36:02,960
and at the same time

2575
01:36:02,960 --> 01:36:04,159
some other things i would also like to

2576
01:36:04,159 --> 01:36:05,520
know about is how do how does the

2577
01:36:05,520 --> 01:36:07,280
internet security come into the picture

2578
01:36:07,280 --> 01:36:08,480
would just be

2579
01:36:08,480 --> 01:36:09,280
that

2580
01:36:09,280 --> 01:36:10,800
something like uh traditional

2581
01:36:10,800 --> 01:36:12,080
resolutions it would be hard to get

2582
01:36:12,080 --> 01:36:13,760
something like that working or not and

2583
01:36:13,760 --> 01:36:16,000
also one of the things i am very curious

2584
01:36:16,000 --> 01:36:17,679
or interested to solve is that how do we

2585
01:36:17,679 --> 01:36:19,920
avoid multiple uh encapsulation

2586
01:36:19,920 --> 01:36:21,600
decapsulation of the media that's going

2587
01:36:21,600 --> 01:36:24,400
from the ingest to the distribution from

2588
01:36:24,400 --> 01:36:26,480
the from to the to the to all the

2589
01:36:26,480 --> 01:36:28,080
viewers and

2590
01:36:28,080 --> 01:36:30,159
and not having to have uh multiple

2591
01:36:30,159 --> 01:36:32,320
layers of encapsulation capsulation and

2592
01:36:32,320 --> 01:36:34,639
have efficient pipelining across these

2593
01:36:34,639 --> 01:36:36,560
intermediate nodes that way we can we

2594
01:36:36,560 --> 01:36:38,239
can achieve really good quality and

2595
01:36:38,239 --> 01:36:40,880
latency combinations as well

2596
01:36:40,880 --> 01:36:42,560
thanks

2597
01:36:42,560 --> 01:36:45,520
thank you i remind you about being brief

2598
01:36:45,520 --> 01:36:48,520
james

2599
01:36:52,880 --> 01:36:54,480
my

2600
01:36:54,480 --> 01:36:56,960
response to stefan earlier around

2601
01:36:56,960 --> 01:36:59,440
focusing on distribution and not

2602
01:36:59,440 --> 01:37:02,239
focusing on ingest is that there's this

2603
01:37:02,239 --> 01:37:04,719
two two things that should be considered

2604
01:37:04,719 --> 01:37:06,400
uh the first one is that ingest

2605
01:37:06,400 --> 01:37:08,320
protocols are becoming very diverse and

2606
01:37:08,320 --> 01:37:09,840
very uh

2607
01:37:09,840 --> 01:37:11,119
spread out covering a whole bunch of

2608
01:37:11,119 --> 01:37:12,960
different use cases and

2609
01:37:12,960 --> 01:37:14,159
maybe coming up with something that can

2610
01:37:14,159 --> 01:37:16,159
harmonize some of those problems down

2611
01:37:16,159 --> 01:37:17,840
would be very very useful it would

2612
01:37:17,840 --> 01:37:20,400
certainly be useful in my domain

2613
01:37:20,400 --> 01:37:23,199
uh satellite trucks permitting uh and

2614
01:37:23,199 --> 01:37:24,880
the second thing to consider as well is

2615
01:37:24,880 --> 01:37:27,040
that a lot of distribution protocols end

2616
01:37:27,040 --> 01:37:30,880
up getting reused as ingest protocols

2617
01:37:30,880 --> 01:37:35,520
hls dash and rtp rtm ping

2618
01:37:35,520 --> 01:37:38,480
all end up getting reused as some means

2619
01:37:38,480 --> 01:37:41,119
of contributing into a distribution

2620
01:37:41,119 --> 01:37:43,600
platform right there's many cdns and

2621
01:37:43,600 --> 01:37:45,679
other services that have got

2622
01:37:45,679 --> 01:37:48,239
uh that as a thing and you've got to ask

2623
01:37:48,239 --> 01:37:50,159
yourself well why are they doing that

2624
01:37:50,159 --> 01:37:52,159
and the answer is is that if your input

2625
01:37:52,159 --> 01:37:53,920
protocol and your output protocol the

2626
01:37:53,920 --> 01:37:56,639
same then it's easier to reason with the

2627
01:37:56,639 --> 01:37:58,639
architecture of the overall system and

2628
01:37:58,639 --> 01:38:01,760
and how things function as well so if we

2629
01:38:01,760 --> 01:38:04,719
we don't focus on the ingest

2630
01:38:04,719 --> 01:38:07,520
up front then we certainly run the risk

2631
01:38:07,520 --> 01:38:11,760
of it being bodged in in the future

2632
01:38:13,440 --> 01:38:16,839
thanks victor

2633
01:38:17,760 --> 01:38:19,920
i want to comment on the question of

2634
01:38:19,920 --> 01:38:22,560
quite quick specifically and not other

2635
01:38:22,560 --> 01:38:24,880
protocol so

2636
01:38:24,880 --> 01:38:26,239
i've

2637
01:38:26,239 --> 01:38:29,679
at least with google we have at least

2638
01:38:29,679 --> 01:38:32,880
three different teams that are dedicated

2639
01:38:32,880 --> 01:38:35,440
to running uh maintaining and transfer

2640
01:38:35,440 --> 01:38:37,840
stack there is a quick name there is a

2641
01:38:37,840 --> 01:38:38,719
team

2642
01:38:38,719 --> 01:38:39,679
that

2643
01:38:39,679 --> 01:38:42,400
does work on improving tcp congestion

2644
01:38:42,400 --> 01:38:44,880
control and other aspects in linux

2645
01:38:44,880 --> 01:38:47,920
kernel and there is also a team that

2646
01:38:47,920 --> 01:38:50,560
works in rtp and or

2647
01:38:50,560 --> 01:38:54,239
some other protocols like sctp we also

2648
01:38:54,239 --> 01:38:57,760
use in some cases and supporting those

2649
01:38:57,760 --> 01:39:01,440
is not free it takes a lot of effort it

2650
01:39:01,440 --> 01:39:04,320
takes a lot of very specialized

2651
01:39:04,320 --> 01:39:05,600
knowledge

2652
01:39:05,600 --> 01:39:08,000
uh and

2653
01:39:08,000 --> 01:39:09,840
a lot of

2654
01:39:09,840 --> 01:39:12,159
speak investment is specific types of

2655
01:39:12,159 --> 01:39:14,639
codes like cpu optimization

2656
01:39:14,639 --> 01:39:15,520
and

2657
01:39:15,520 --> 01:39:17,920
we spend a lot of time optimizing quick

2658
01:39:17,920 --> 01:39:20,159
for cpu because

2659
01:39:20,159 --> 01:39:22,719
delivering video is

2660
01:39:22,719 --> 01:39:23,840
very

2661
01:39:23,840 --> 01:39:27,520
is at scales that youtube does just

2662
01:39:27,520 --> 01:39:29,679
takes up a lot of resources

2663
01:39:29,679 --> 01:39:31,920
uh in that sense

2664
01:39:31,920 --> 01:39:35,679
you being able to build upon all of this

2665
01:39:35,679 --> 01:39:37,760
effort rather than

2666
01:39:37,760 --> 01:39:40,800
building something new from scratch is a

2667
01:39:40,800 --> 01:39:42,880
very important plus

2668
01:39:42,880 --> 01:39:44,960
and dash over

2669
01:39:44,960 --> 01:39:47,840
http free at this point is an extremely

2670
01:39:47,840 --> 01:39:50,960
mature technology

2671
01:39:52,840 --> 01:39:56,320
and the reason i believe that

2672
01:39:56,320 --> 01:39:59,520
we should do this is not only from

2673
01:39:59,520 --> 01:40:01,679
standpoint that this is a good idea but

2674
01:40:01,679 --> 01:40:05,040
this is also something that many people

2675
01:40:05,040 --> 01:40:07,840
in the industry independently have

2676
01:40:07,840 --> 01:40:10,560
built facebook built trash

2677
01:40:10,560 --> 01:40:12,960
uh twitch built warp and

2678
01:40:12,960 --> 01:40:14,960
they work on this fundament on

2679
01:40:14,960 --> 01:40:16,960
fundamental is the same principles as

2680
01:40:16,960 --> 01:40:19,199
they use quick avoidance of head of land

2681
01:40:19,199 --> 01:40:21,119
blocking to bush

2682
01:40:21,119 --> 01:40:23,440
media

2683
01:40:23,440 --> 01:40:24,480
and

2684
01:40:24,480 --> 01:40:26,639
i believe this

2685
01:40:26,639 --> 01:40:28,800
means that

2686
01:40:28,800 --> 01:40:30,960
this is the right direction because

2687
01:40:30,960 --> 01:40:33,040
multiple people independently came up

2688
01:40:33,040 --> 01:40:35,040
with a solution and it is worth

2689
01:40:35,040 --> 01:40:37,119
standardizing it

2690
01:40:37,119 --> 01:40:38,320
so

2691
01:40:38,320 --> 01:40:40,800
thank you victor please be brief uh we

2692
01:40:40,800 --> 01:40:42,159
are

2693
01:40:42,159 --> 01:40:43,760
closing the queue

2694
01:40:43,760 --> 01:40:45,119
very soon

2695
01:40:45,119 --> 01:40:46,880
uh ted hardy speaking

2696
01:40:46,880 --> 01:40:48,719
and i came up to kind of pick up on

2697
01:40:48,719 --> 01:40:50,960
something that magnus said in the chat a

2698
01:40:50,960 --> 01:40:53,119
good while back which is

2699
01:40:53,119 --> 01:40:53,920
that

2700
01:40:53,920 --> 01:40:56,239
fundamentally what this really is a

2701
01:40:56,239 --> 01:40:58,639
discussion about whether it's time for a

2702
01:40:58,639 --> 01:41:00,719
new media delivery protocol

2703
01:41:00,719 --> 01:41:03,040
and the point he made in chat was that

2704
01:41:03,040 --> 01:41:05,920
quick coming to the fore has kind of

2705
01:41:05,920 --> 01:41:08,000
created a straw that broke the camel's

2706
01:41:08,000 --> 01:41:10,159
back or i would say that broke open the

2707
01:41:10,159 --> 01:41:11,920
dam of discussion about whether or not

2708
01:41:11,920 --> 01:41:13,520
it's time for a new media delivery

2709
01:41:13,520 --> 01:41:14,560
protocol

2710
01:41:14,560 --> 01:41:15,760
and i think

2711
01:41:15,760 --> 01:41:18,159
most of the people i've heard at both in

2712
01:41:18,159 --> 01:41:20,239
the in the mic line and on on the chat

2713
01:41:20,239 --> 01:41:22,400
have basically said yes it's time for a

2714
01:41:22,400 --> 01:41:24,400
new media delivery protocol and the

2715
01:41:24,400 --> 01:41:26,239
question is why is it that quick broke

2716
01:41:26,239 --> 01:41:28,960
the dam and webrtc did not

2717
01:41:28,960 --> 01:41:30,480
and i think the interesting thing about

2718
01:41:30,480 --> 01:41:32,320
that is actually to go back to the point

2719
01:41:32,320 --> 01:41:34,320
about multicast models

2720
01:41:34,320 --> 01:41:36,560
multicast models

2721
01:41:36,560 --> 01:41:38,480
are fundamentally a public publication

2722
01:41:38,480 --> 01:41:40,320
that subscribe somebody publishes

2723
01:41:40,320 --> 01:41:42,400
a stream and you subscribe to it and

2724
01:41:42,400 --> 01:41:45,520
those publication subscribe models

2725
01:41:45,520 --> 01:41:48,000
especially with the kind of fan out that

2726
01:41:48,000 --> 01:41:50,560
typically occurred in application layer

2727
01:41:50,560 --> 01:41:51,840
multicast

2728
01:41:51,840 --> 01:41:54,159
are much easier with quick

2729
01:41:54,159 --> 01:41:55,760
because of the infrastructure that's

2730
01:41:55,760 --> 01:41:57,600
been built up in the internet so it's

2731
01:41:57,600 --> 01:42:00,000
it's simply the case that cdn

2732
01:42:00,000 --> 01:42:01,360
infrastructure and the rest of the

2733
01:42:01,360 --> 01:42:04,000
infrastructure is friendlier to to quick

2734
01:42:04,000 --> 01:42:06,880
because it shares h3 as one of its use

2735
01:42:06,880 --> 01:42:08,960
cases than it would be to building

2736
01:42:08,960 --> 01:42:12,480
something new on top of webrtc

2737
01:42:12,480 --> 01:42:15,119
so i think the question we really have

2738
01:42:15,119 --> 01:42:17,199
in front of us is

2739
01:42:17,199 --> 01:42:19,920
do we want a new media distribution

2740
01:42:19,920 --> 01:42:22,480
protocol and i think my answer is yes

2741
01:42:22,480 --> 01:42:24,400
do we want it to be based on something

2742
01:42:24,400 --> 01:42:25,199
where

2743
01:42:25,199 --> 01:42:27,440
the fan out possibilities of publication

2744
01:42:27,440 --> 01:42:29,679
subscribe have this scaling property of

2745
01:42:29,679 --> 01:42:31,280
quick and i think my answer to that is

2746
01:42:31,280 --> 01:42:32,320
yes

2747
01:42:32,320 --> 01:42:33,920
and then i think we have kind of the

2748
01:42:33,920 --> 01:42:35,440
question of if we're going to do

2749
01:42:35,440 --> 01:42:38,719
multicast and unicast for this how many

2750
01:42:38,719 --> 01:42:41,520
of these use cases are actually in scope

2751
01:42:41,520 --> 01:42:43,600
and i think my answer to that is again

2752
01:42:43,600 --> 01:42:46,320
yes if we're building a new

2753
01:42:46,320 --> 01:42:48,960
media dis uh distribution protocol it

2754
01:42:48,960 --> 01:42:50,880
should actually cover all of the use

2755
01:42:50,880 --> 01:42:53,360
cases that have been described because

2756
01:42:53,360 --> 01:42:55,040
then we get the best

2757
01:42:55,040 --> 01:42:57,280
network effect of building on that

2758
01:42:57,280 --> 01:42:58,880
infrastructure and building on the code

2759
01:42:58,880 --> 01:43:01,199
bases that are there

2760
01:43:01,199 --> 01:43:03,360
so uh people have said we we named this

2761
01:43:03,360 --> 01:43:05,360
wrong sorry we bike shedding the name of

2762
01:43:05,360 --> 01:43:06,800
something is one of our favorite

2763
01:43:06,800 --> 01:43:08,400
occupations at the

2764
01:43:08,400 --> 01:43:11,440
uh at the itap uh if you if you want to

2765
01:43:11,440 --> 01:43:14,000
call it new media

2766
01:43:14,000 --> 01:43:17,360
uh delivery protocol yes or no buff

2767
01:43:17,360 --> 01:43:19,679
i think at the end of the day chairs

2768
01:43:19,679 --> 01:43:22,239
your your your your question will be

2769
01:43:22,239 --> 01:43:23,920
very quick because i think you'll get a

2770
01:43:23,920 --> 01:43:27,600
resounding yes to its time

2771
01:43:27,600 --> 01:43:29,840
thanks mel

2772
01:43:29,840 --> 01:43:31,119
uh miles and eddie i'd like to briefly

2773
01:43:31,119 --> 01:43:32,639
touch on three main themes that i'm

2774
01:43:32,639 --> 01:43:34,800
hearing from a lot of people so uh one

2775
01:43:34,800 --> 01:43:37,280
on quick uh versus non-quick

2776
01:43:37,280 --> 01:43:39,520
two on ingest versus distribution and

2777
01:43:39,520 --> 01:43:40,560
three on

2778
01:43:40,560 --> 01:43:43,280
um latency trade-offs so on quick versus

2779
01:43:43,280 --> 01:43:44,639
not quick i think

2780
01:43:44,639 --> 01:43:47,600
all the discussion about webrtc and uh

2781
01:43:47,600 --> 01:43:50,560
god forbid sctp directly

2782
01:43:50,560 --> 01:43:54,239
uh um or srt or other things

2783
01:43:54,239 --> 01:43:55,360
i think a lot of people have already

2784
01:43:55,360 --> 01:43:56,639
done a lot of soul searching and we

2785
01:43:56,639 --> 01:43:58,480
arrived at quick for a reason it wasn't

2786
01:43:58,480 --> 01:44:00,960
that we ignored uh a lot of us have

2787
01:44:00,960 --> 01:44:02,400
deployed you know

2788
01:44:02,400 --> 01:44:03,199
uh

2789
01:44:03,199 --> 01:44:05,679
as higher scale as possible all those

2790
01:44:05,679 --> 01:44:07,520
other solutions and we've arrived at

2791
01:44:07,520 --> 01:44:09,520
quick for for very good reasons so i

2792
01:44:09,520 --> 01:44:10,719
don't think we need to

2793
01:44:10,719 --> 01:44:13,280
rehash all of that

2794
01:44:13,280 --> 01:44:14,159
and

2795
01:44:14,159 --> 01:44:16,560
for the ingest versus for the

2796
01:44:16,560 --> 01:44:19,280
contribution versus distribution

2797
01:44:19,280 --> 01:44:21,360
i don't think that there is really that

2798
01:44:21,360 --> 01:44:23,520
much difference when you look at the uh

2799
01:44:23,520 --> 01:44:25,679
all of the the different needs at the

2800
01:44:25,679 --> 01:44:27,520
lower layers and even at the app layer

2801
01:44:27,520 --> 01:44:29,280
between those two cases there's a few

2802
01:44:29,280 --> 01:44:31,679
nuances contribution you know may have

2803
01:44:31,679 --> 01:44:33,520
more nuances about

2804
01:44:33,520 --> 01:44:35,840
both live and

2805
01:44:35,840 --> 01:44:37,760
pseudolive that i want to get this

2806
01:44:37,760 --> 01:44:40,080
stream up reliably anyway but give me

2807
01:44:40,080 --> 01:44:42,159
the live edge as fast as you can but

2808
01:44:42,159 --> 01:44:44,000
also

2809
01:44:44,000 --> 01:44:46,400
make sure that i can give full

2810
01:44:46,400 --> 01:44:48,880
you know contribution uh you know at a

2811
01:44:48,880 --> 01:44:51,199
delayed time that's the only nuance for

2812
01:44:51,199 --> 01:44:52,560
a contribution and distribution the

2813
01:44:52,560 --> 01:44:55,520
scale is obviously a difference but when

2814
01:44:55,520 --> 01:44:56,960
you look at the lower layers of the

2815
01:44:56,960 --> 01:44:58,239
protocol required to deliver those

2816
01:44:58,239 --> 01:44:59,199
things

2817
01:44:59,199 --> 01:45:00,719
there's really not that much difference

2818
01:45:00,719 --> 01:45:02,400
and the latency trade-offs i keep

2819
01:45:02,400 --> 01:45:03,920
hearing the trade-off between latency

2820
01:45:03,920 --> 01:45:05,600
and quality i think those are you know

2821
01:45:05,600 --> 01:45:07,600
false false trade-offs i think harold

2822
01:45:07,600 --> 01:45:08,880
put it well but i don't i think was kind

2823
01:45:08,880 --> 01:45:10,960
of lost in the room the channel is your

2824
01:45:10,960 --> 01:45:13,280
limit the channel governs your quality

2825
01:45:13,280 --> 01:45:15,199
you can't get better quality by adding

2826
01:45:15,199 --> 01:45:16,800
latency if you're talking about a

2827
01:45:16,800 --> 01:45:18,560
short-lived you know five-second ad

2828
01:45:18,560 --> 01:45:21,119
maybe but not these long-lived flows

2829
01:45:21,119 --> 01:45:22,000
that we're talking about we're talking

2830
01:45:22,000 --> 01:45:23,920
about distributing events we're talking

2831
01:45:23,920 --> 01:45:26,080
about live streaming you know many

2832
01:45:26,080 --> 01:45:28,239
minutes or hours worth of content you

2833
01:45:28,239 --> 01:45:29,679
can't get better quality than the

2834
01:45:29,679 --> 01:45:30,719
channel

2835
01:45:30,719 --> 01:45:33,199
by uh by just increasing your latency so

2836
01:45:33,199 --> 01:45:36,880
that's a false dichotomy what latency um

2837
01:45:36,880 --> 01:45:39,600
impacts is resilience how how resilient

2838
01:45:39,600 --> 01:45:42,320
is your delivery of that um and so we

2839
01:45:42,320 --> 01:45:45,119
need to take latency as a as a trade-off

2840
01:45:45,119 --> 01:45:46,639
between resilience not as a trade-off

2841
01:45:46,639 --> 01:45:48,560
between quality and the same applies for

2842
01:45:48,560 --> 01:45:50,400
contribution and distribution ultra low

2843
01:45:50,400 --> 01:45:52,480
latency can be achieved with the best

2844
01:45:52,480 --> 01:45:54,400
quality that the channel can provide in

2845
01:45:54,400 --> 01:45:56,960
both of those cases

2846
01:45:56,960 --> 01:45:58,320
thanks i'll just say we've got five

2847
01:45:58,320 --> 01:45:59,760
people in the queue and five minutes

2848
01:45:59,760 --> 01:46:01,040
left before we're going to end the

2849
01:46:01,040 --> 01:46:03,840
discussion so 60 seconds david go

2850
01:46:03,840 --> 01:46:05,199
all right i'll speak really quickly

2851
01:46:05,199 --> 01:46:07,520
davidskenazi quick enthusiast

2852
01:46:07,520 --> 01:46:09,040
uh first off

2853
01:46:09,040 --> 01:46:10,880
i'm not going to beat over the dead

2854
01:46:10,880 --> 01:46:12,800
horse of let's do this over quick of

2855
01:46:12,800 --> 01:46:14,080
course quick is awesome let's do this

2856
01:46:14,080 --> 01:46:15,920
over quick people have said why and

2857
01:46:15,920 --> 01:46:16,960
that's good

2858
01:46:16,960 --> 01:46:19,920
second as speaking as an internet

2859
01:46:19,920 --> 01:46:22,159
architecture enthusiast i'd like to

2860
01:46:22,159 --> 01:46:24,159
offer perhaps a suggestion to the

2861
01:46:24,159 --> 01:46:26,719
proponents of this buff um

2862
01:46:26,719 --> 01:46:29,119
we've seen that like not going into the

2863
01:46:29,119 --> 01:46:30,239
buff questions because this is not

2864
01:46:30,239 --> 01:46:32,159
working forming but

2865
01:46:32,159 --> 01:46:34,480
clearly there's interest and it sounds

2866
01:46:34,480 --> 01:46:35,760
like it makes sense for this to happen

2867
01:46:35,760 --> 01:46:37,520
in ietf and there's people who want to

2868
01:46:37,520 --> 01:46:39,840
do the work that's all great what i

2869
01:46:39,840 --> 01:46:41,840
worry about is

2870
01:46:41,840 --> 01:46:43,520
we keep hearing like all these like use

2871
01:46:43,520 --> 01:46:45,679
cases which are awesome

2872
01:46:45,679 --> 01:46:48,239
i would love to see a list

2873
01:46:48,239 --> 01:46:49,920
my concern is i'm not entirely sure if

2874
01:46:49,920 --> 01:46:52,239
we can agree on a list of requirements

2875
01:46:52,239 --> 01:46:53,520
so what i would recommend for the

2876
01:46:53,520 --> 01:46:55,760
proponents is to

2877
01:46:55,760 --> 01:46:57,840
have side meetings and

2878
01:46:57,840 --> 01:47:00,080
refine this list

2879
01:47:00,080 --> 01:47:03,679
uh in in and if you can agree on some uh

2880
01:47:03,679 --> 01:47:05,520
on a list there that's something that we

2881
01:47:05,520 --> 01:47:06,880
can then have a

2882
01:47:06,880 --> 01:47:09,520
walking group forming buff because if we

2883
01:47:09,520 --> 01:47:10,880
agree on a set of requirements that

2884
01:47:10,880 --> 01:47:12,639
means we can tightly scope this for a

2885
01:47:12,639 --> 01:47:14,080
working group and then start building a

2886
01:47:14,080 --> 01:47:16,320
solution that meets those requirements

2887
01:47:16,320 --> 01:47:17,920
right now i'm not enough enough of an

2888
01:47:17,920 --> 01:47:19,679
expert in this space to be able to tell

2889
01:47:19,679 --> 01:47:22,159
if all those use cases have a single set

2890
01:47:22,159 --> 01:47:23,600
of requirements and that worries me a

2891
01:47:23,600 --> 01:47:24,800
little bit so that's what i would love

2892
01:47:24,800 --> 01:47:27,360
to see thank you

2893
01:47:27,360 --> 01:47:30,000
thanks uh cohen

2894
01:47:30,000 --> 01:47:32,320
um i just want to speak to the ingress

2895
01:47:32,320 --> 01:47:34,080
uh issues and

2896
01:47:34,080 --> 01:47:35,920
you know the this comment made earlier

2897
01:47:35,920 --> 01:47:37,520
about like hey it's the distribution

2898
01:47:37,520 --> 01:47:38,480
that's really where the money is or

2899
01:47:38,480 --> 01:47:40,239
whatever i mean yeah there's obviously

2900
01:47:40,239 --> 01:47:42,400
that's a larger scale side of it but

2901
01:47:42,400 --> 01:47:44,239
ingress is where we're failing the worst

2902
01:47:44,239 --> 01:47:46,960
right now i mean um if you're working if

2903
01:47:46,960 --> 01:47:49,119
somebody are using non-proprietary setup

2904
01:47:49,119 --> 01:47:50,880
for their system applications probably

2905
01:47:50,880 --> 01:47:51,840
the most

2906
01:47:51,840 --> 01:47:54,400
common ingress is rtmp and i mean that's

2907
01:47:54,400 --> 01:47:55,920
that's really old it's out of blind

2908
01:47:55,920 --> 01:47:58,159
blocking over tcp has all kinds of

2909
01:47:58,159 --> 01:48:00,080
issues people have mentioned and it's

2910
01:48:00,080 --> 01:48:01,679
not like you can build a device that

2911
01:48:01,679 --> 01:48:03,360
will work with anybody's ingress i mean

2912
01:48:03,360 --> 01:48:05,840
when we do our tmmp ingress to facebook

2913
01:48:05,840 --> 01:48:07,119
versus youtube we have to do it

2914
01:48:07,119 --> 01:48:08,239
differently and like you have to

2915
01:48:08,239 --> 01:48:09,840
understand all of that with those things

2916
01:48:09,840 --> 01:48:12,480
so i really think that we can't just

2917
01:48:12,480 --> 01:48:14,560
pretend like ingress is so currently

2918
01:48:14,560 --> 01:48:16,080
solved right now i think it's it's an

2919
01:48:16,080 --> 01:48:18,000
area where you know the state of the art

2920
01:48:18,000 --> 01:48:19,920
is like hair on fire and that needs to

2921
01:48:19,920 --> 01:48:22,480
be part of what we're looking at thanks

2922
01:48:22,480 --> 01:48:25,919
all right thanks colin justin

2923
01:48:27,360 --> 01:48:30,159
why quick uh question yeah i think

2924
01:48:30,159 --> 01:48:31,760
everyone here is very excited about the

2925
01:48:31,760 --> 01:48:33,119
fact that we're now going to have a

2926
01:48:33,119 --> 01:48:35,040
protocol that's extremely widely

2927
01:48:35,040 --> 01:48:38,159
deployed both across clients as well as

2928
01:48:38,159 --> 01:48:40,239
in public cloud architectures

2929
01:48:40,239 --> 01:48:42,400
and that that protocol is capable of

2930
01:48:42,400 --> 01:48:45,760
doing uh you know unreliable delivery

2931
01:48:45,760 --> 01:48:47,199
and so i think we're all looking and

2932
01:48:47,199 --> 01:48:49,600
saying well what can we do with this

2933
01:48:49,600 --> 01:48:51,600
and it's interesting to see both rush

2934
01:48:51,600 --> 01:48:52,639
and warp

2935
01:48:52,639 --> 01:48:55,440
as ways of leveraging uh that sort of

2936
01:48:55,440 --> 01:48:57,360
unreliable delivery feature within quick

2937
01:48:57,360 --> 01:48:59,360
to do things solve problems they're

2938
01:48:59,360 --> 01:49:01,360
being faced in the streaming world

2939
01:49:01,360 --> 01:49:03,360
um i think we're also interested in

2940
01:49:03,360 --> 01:49:05,440
trying to use it for other types of use

2941
01:49:05,440 --> 01:49:07,840
cases like some of these 50 millisecond

2942
01:49:07,840 --> 01:49:11,119
200 millisecond uh latency problems

2943
01:49:11,119 --> 01:49:13,280
but we haven't yet seen the solution put

2944
01:49:13,280 --> 01:49:16,159
forth um that basically speaks so here's

2945
01:49:16,159 --> 01:49:18,400
like a need and here's how quick solves

2946
01:49:18,400 --> 01:49:19,280
that

2947
01:49:19,280 --> 01:49:20,639
and i think we're all kind of really

2948
01:49:20,639 --> 01:49:22,639
excited as i said because of the quick

2949
01:49:22,639 --> 01:49:23,920
deployment we know there'll be all these

2950
01:49:23,920 --> 01:49:25,360
things we can do

2951
01:49:25,360 --> 01:49:27,280
but i i think that you know we may be

2952
01:49:27,280 --> 01:49:28,880
wanting to focus on these concrete

2953
01:49:28,880 --> 01:49:29,920
things

2954
01:49:29,920 --> 01:49:32,080
um that sort of applied in live

2955
01:49:32,080 --> 01:49:33,679
streaming rather than some of those or

2956
01:49:33,679 --> 01:49:36,320
future possible gains of making web rtc

2957
01:49:36,320 --> 01:49:38,880
easier to deploy uh just because we have

2958
01:49:38,880 --> 01:49:40,880
these concrete things in front of us and

2959
01:49:40,880 --> 01:49:43,119
hopefully as time goes forward we'll

2960
01:49:43,119 --> 01:49:45,760
also see ways of how quick makes webrtc

2961
01:49:45,760 --> 01:49:48,639
easier to deploy

2962
01:49:52,080 --> 01:49:53,119
it's max

2963
01:49:53,119 --> 01:49:55,760
yes magazine but this is the questions

2964
01:49:55,760 --> 01:49:58,159
we'll at least do some polls on after we

2965
01:49:58,159 --> 01:50:01,040
have gone through the queue

2966
01:50:05,920 --> 01:50:07,599
uh hi this maximum

2967
01:50:07,599 --> 01:50:10,320
vision srt developer so if anyone wants

2968
01:50:10,320 --> 01:50:11,679
to talk about it

2969
01:50:11,679 --> 01:50:13,920
you're welcome so i just wanted to add

2970
01:50:13,920 --> 01:50:15,920
on our use case we are currently one of

2971
01:50:15,920 --> 01:50:18,719
the most popular protocols for our live

2972
01:50:18,719 --> 01:50:20,560
video contribution and distribution and

2973
01:50:20,560 --> 01:50:23,119
mainly for enterprise and i just wanted

2974
01:50:23,119 --> 01:50:24,480
to tell that

2975
01:50:24,480 --> 01:50:26,560
the topic of congestion control is very

2976
01:50:26,560 --> 01:50:28,080
important

2977
01:50:28,080 --> 01:50:30,320
but i would propose not to

2978
01:50:30,320 --> 01:50:31,280
like

2979
01:50:31,280 --> 01:50:33,760
uh in terms of mediocrity and protocol

2980
01:50:33,760 --> 01:50:36,000
be developed here not to take all the

2981
01:50:36,000 --> 01:50:38,080
responsibility for congestion control

2982
01:50:38,080 --> 01:50:40,239
and for latency because when we talk

2983
01:50:40,239 --> 01:50:42,800
about enterprise contributor uh he

2984
01:50:42,800 --> 01:50:43,599
really

2985
01:50:43,599 --> 01:50:45,920
has some idea of what he's doing he has

2986
01:50:45,920 --> 01:50:47,920
some idea of the network he has some

2987
01:50:47,920 --> 01:50:49,599
idea of the quality and

2988
01:50:49,599 --> 01:50:52,400
if it wants to contribute really

2989
01:50:52,400 --> 01:50:55,040
high quality of its video but the

2990
01:50:55,040 --> 01:50:56,560
transport layer

2991
01:50:56,560 --> 01:50:59,119
limits it and it drops

2992
01:50:59,119 --> 01:51:01,199
this kind of stuff

2993
01:51:01,199 --> 01:51:02,960
it might be a temporal congestion right

2994
01:51:02,960 --> 01:51:05,119
but you're dropping the quality like for

2995
01:51:05,119 --> 01:51:07,040
five seconds and it's really a major

2996
01:51:07,040 --> 01:51:09,360
thing that should not happen and instead

2997
01:51:09,360 --> 01:51:10,400
if you could

2998
01:51:10,400 --> 01:51:12,639
sustain this temporal congestion for

2999
01:51:12,639 --> 01:51:14,000
some time

3000
01:51:14,000 --> 01:51:15,520
it would be better and that's what we

3001
01:51:15,520 --> 01:51:18,080
see uh that's that's one of the reasons

3002
01:51:18,080 --> 01:51:20,639
why srt is currently so popular and

3003
01:51:20,639 --> 01:51:22,719
important uh among enterprise

3004
01:51:22,719 --> 01:51:25,040
contributors is that we trust

3005
01:51:25,040 --> 01:51:26,960
them more we let them

3006
01:51:26,960 --> 01:51:31,360
uh decide what to do thank you

3007
01:51:31,440 --> 01:51:33,840
thanks and

3008
01:51:33,840 --> 01:51:35,550
fantastic i got the last word

3009
01:51:35,550 --> 01:51:36,880
[Music]

3010
01:51:36,880 --> 01:51:38,159
so

3011
01:51:38,159 --> 01:51:40,960
we have to learn from our experience

3012
01:51:40,960 --> 01:51:43,360
with doing real-time media

3013
01:51:43,360 --> 01:51:45,280
over the internet over the last few

3014
01:51:45,280 --> 01:51:46,560
years

3015
01:51:46,560 --> 01:51:48,719
which is after all the basis of all the

3016
01:51:48,719 --> 01:51:51,360
all the stuff we're doing here now

3017
01:51:51,360 --> 01:51:54,480
because that's media

3018
01:51:54,480 --> 01:51:56,239
congestion control

3019
01:51:56,239 --> 01:51:58,560
needs to open up

3020
01:51:58,560 --> 01:52:01,760
so that application protocols

3021
01:52:01,760 --> 01:52:03,119
can do

3022
01:52:03,119 --> 01:52:05,440
more intelligent things

3023
01:52:05,440 --> 01:52:06,639
than just

3024
01:52:06,639 --> 01:52:09,599
throw packets away or

3025
01:52:09,599 --> 01:52:12,639
cue them for later delivery

3026
01:52:12,639 --> 01:52:14,320
so

3027
01:52:14,320 --> 01:52:15,599
designing

3028
01:52:15,599 --> 01:52:17,920
the interface

3029
01:52:17,920 --> 01:52:20,800
between congestion control and media

3030
01:52:20,800 --> 01:52:24,639
is right at the core of what the itf

3031
01:52:24,639 --> 01:52:27,599
should be attacking

3032
01:52:27,760 --> 01:52:29,280
we have groups do

3033
01:52:29,280 --> 01:52:31,440
that know congressional control very

3034
01:52:31,440 --> 01:52:32,320
well

3035
01:52:32,320 --> 01:52:34,159
we are groups that

3036
01:52:34,159 --> 01:52:37,199
know media at least somewhat well

3037
01:52:37,199 --> 01:52:39,440
and

3038
01:52:41,440 --> 01:52:44,400
making sure we draw on the experience

3039
01:52:44,400 --> 01:52:47,040
of the last few years

3040
01:52:47,040 --> 01:52:48,719
of

3041
01:52:48,719 --> 01:52:50,400
low

3042
01:52:50,400 --> 01:52:52,880
for whatever value of low latency

3043
01:52:52,880 --> 01:52:54,480
streaming

3044
01:52:54,480 --> 01:52:56,719
of media

3045
01:52:56,719 --> 01:52:58,800
in designing that interface to

3046
01:52:58,800 --> 01:53:00,400
congestion control

3047
01:53:00,400 --> 01:53:02,960
i think that's a core deliverable for

3048
01:53:02,960 --> 01:53:06,480
whatever comes out of this effort

3049
01:53:06,480 --> 01:53:08,799
thanks

3050
01:53:09,360 --> 01:53:11,360
yes so

3051
01:53:11,360 --> 01:53:13,599
um thank you everyone who's been very

3052
01:53:13,599 --> 01:53:15,679
civil and i have nicely contributed

3053
01:53:15,679 --> 01:53:17,360
discussions here

3054
01:53:17,360 --> 01:53:18,560
uh

3055
01:53:18,560 --> 01:53:20,000
i think we start with these three

3056
01:53:20,000 --> 01:53:22,480
questions you see a bit of of henry use

3057
01:53:22,480 --> 01:53:25,280
the hand racing to show han's tool to

3058
01:53:25,280 --> 01:53:26,800
figure out

3059
01:53:26,800 --> 01:53:28,239
so even those in the room you need to

3060
01:53:28,239 --> 01:53:31,840
use your retecco light or fall to

3061
01:53:31,840 --> 01:53:33,520
give you input i will start the first

3062
01:53:33,520 --> 01:53:35,520
question

3063
01:53:35,520 --> 01:53:38,320
now so

3064
01:53:38,840 --> 01:53:41,840
um and this is really just to figure out

3065
01:53:41,840 --> 01:53:44,239
give some indications i think uh to

3066
01:53:44,239 --> 01:53:45,920
verify what's i think what the

3067
01:53:45,920 --> 01:53:47,599
discussions show

3068
01:53:47,599 --> 01:53:52,199
that the interest etc but um

3069
01:53:55,199 --> 01:53:57,599
sorry just quick clarification race hand

3070
01:53:57,599 --> 01:54:00,239
means yes do not raised hand means no

3071
01:54:00,239 --> 01:54:01,840
ray sound means

3072
01:54:01,840 --> 01:54:02,719
yeah

3073
01:54:02,719 --> 01:54:06,920
yes thanks yes

3074
01:54:14,570 --> 01:54:17,630
[Music]

3075
01:54:22,000 --> 01:54:23,599
it's still ticking up here i will give

3076
01:54:23,599 --> 01:54:27,440
it a few more seconds um

3077
01:54:33,040 --> 01:54:34,639
yeah i will

3078
01:54:34,639 --> 01:54:37,840
end this now

3079
01:54:41,280 --> 01:54:44,239
seems to be quite significant 55 that

3080
01:54:44,239 --> 01:54:45,599
race that i'm saying yes there's

3081
01:54:45,599 --> 01:54:46,639
something to

3082
01:54:46,639 --> 01:54:47,520
be

3083
01:54:47,520 --> 01:54:51,000
that's not met

3084
01:54:52,480 --> 01:54:54,560
they don't don't see it

3085
01:54:54,560 --> 01:54:55,760
i mean

3086
01:54:55,760 --> 01:54:57,520
i have a clarifying question about that

3087
01:54:57,520 --> 01:54:58,719
i realized i didn't understand the

3088
01:54:58,719 --> 01:55:00,719
question i know is this conversation

3089
01:55:00,719 --> 01:55:02,320
we're having right now between you and i

3090
01:55:02,320 --> 01:55:05,320
live

3091
01:55:05,840 --> 01:55:08,080
yes

3092
01:55:09,360 --> 01:55:12,560
people are saying yes yes colin

3093
01:55:12,560 --> 01:55:14,800
yeah i mean okay so i i think the thing

3094
01:55:14,800 --> 01:55:17,199
is is that i i just want to make sure

3095
01:55:17,199 --> 01:55:18,960
that later in the minutes we don't

3096
01:55:18,960 --> 01:55:20,960
redefine live to mean something

3097
01:55:20,960 --> 01:55:22,400
completely discussed than what was in

3098
01:55:22,400 --> 01:55:23,920
the box right that it includes things

3099
01:55:23,920 --> 01:55:25,440
like what we're doing right now in meat

3100
01:55:25,440 --> 01:55:26,880
echo

3101
01:55:26,880 --> 01:55:27,920
so

3102
01:55:27,920 --> 01:55:30,080
and then i i think that you know so i

3103
01:55:30,080 --> 01:55:31,199
just want to have that point in there

3104
01:55:31,199 --> 01:55:33,839
okay

3105
01:55:33,920 --> 01:55:35,920
go ahead go ahead peep it quickly

3106
01:55:35,920 --> 01:55:38,159
i'll repeat what i yelled from the floor

3107
01:55:38,159 --> 01:55:41,119
which was simply what do those 13 people

3108
01:55:41,119 --> 01:55:45,559
mean who said no

3109
01:55:48,300 --> 01:55:50,400
[Music]

3110
01:55:50,400 --> 01:55:51,920
i mean if those have

3111
01:55:51,920 --> 01:55:53,840
input they it would be good if they

3112
01:55:53,840 --> 01:55:55,840
could post why they don't believe etc or

3113
01:55:55,840 --> 01:55:58,320
what i mean it's it's i interpret as my

3114
01:55:58,320 --> 01:56:00,400
personal implication of that those 13

3115
01:56:00,400 --> 01:56:03,119
are saying they don't see there's a

3116
01:56:03,119 --> 01:56:05,440
need to do something there's no use case

3117
01:56:05,440 --> 01:56:06,719
they see that

3118
01:56:06,719 --> 01:56:08,480
can't be met

3119
01:56:08,480 --> 01:56:10,639
that's my interpretation

3120
01:56:10,639 --> 01:56:14,080
so let's go on to the

3121
01:56:14,080 --> 01:56:15,840
media and the eskian side here or

3122
01:56:15,840 --> 01:56:19,040
contribution what we call it so and and

3123
01:56:19,040 --> 01:56:20,239
yeah

3124
01:56:20,239 --> 01:56:23,520
raising hand if you believe there's not

3125
01:56:23,520 --> 01:56:26,239
there's use case that's not met

3126
01:56:26,239 --> 01:56:29,239
so

3127
01:56:35,390 --> 01:56:38,649
[Music]

3128
01:56:56,880 --> 01:56:58,320
okay

3129
01:56:58,320 --> 01:57:00,480
i will soon end the

3130
01:57:00,480 --> 01:57:01,679
poll

3131
01:57:01,679 --> 01:57:04,800
but it's still taking up

3132
01:57:08,840 --> 01:57:10,639
okay

3133
01:57:10,639 --> 01:57:13,520
i'm ending it now or

3134
01:57:13,520 --> 01:57:14,320
sorry

3135
01:57:14,320 --> 01:57:15,840
can you for all the polls put the

3136
01:57:15,840 --> 01:57:17,360
results in the chat because they're no

3137
01:57:17,360 --> 01:57:20,800
longer accessible just so we have them

3138
01:57:20,800 --> 01:57:22,480
sorry

3139
01:57:22,480 --> 01:57:24,719
yeah um

3140
01:57:24,719 --> 01:57:27,840
okay uh thank you i'm ending this

3141
01:57:27,840 --> 01:57:30,480
so there is

3142
01:57:30,480 --> 01:57:31,599
some people feel like the third question

3143
01:57:31,599 --> 01:57:33,199
is

3144
01:57:33,199 --> 01:57:34,719
okay well let's discuss the third

3145
01:57:34,719 --> 01:57:36,719
question before

3146
01:57:36,719 --> 01:57:37,599
um

3147
01:57:37,599 --> 01:57:40,719
but but just to summarize here it's um

3148
01:57:40,719 --> 01:57:42,719
slightly less number of responses but

3149
01:57:42,719 --> 01:57:44,639
they're even more for that that's within

3150
01:57:44,639 --> 01:57:46,159
just it's not

3151
01:57:46,159 --> 01:57:47,840
there's not their use case that's not

3152
01:57:47,840 --> 01:57:50,840
met today with today's protocols so

3153
01:57:50,840 --> 01:57:53,920
ted uh uh ted hardy speaking uh as a

3154
01:57:53,920 --> 01:57:55,520
couple other people in the chat i think

3155
01:57:55,520 --> 01:57:57,199
three might be a little bit confusing

3156
01:57:57,199 --> 01:57:58,960
and i'm suggesting a friendly member

3157
01:57:58,960 --> 01:58:01,599
should work on these two use cases be

3158
01:58:01,599 --> 01:58:06,420
done together as a friendly amendment

3159
01:58:06,420 --> 01:58:09,199
[Music]

3160
01:58:09,199 --> 01:58:12,199
yes

3161
01:58:23,040 --> 01:58:26,400
i'm editing here

3162
01:58:27,040 --> 01:58:29,440
let's i'm trying to get it should work

3163
01:58:29,440 --> 01:58:31,679
on these two use cases be done together

3164
01:58:31,679 --> 01:58:34,719
what's that producer that's a reasonable

3165
01:58:34,719 --> 01:58:39,199
sets of use cases two sets

3166
01:58:41,760 --> 01:58:43,840
okay

3167
01:58:43,840 --> 01:58:47,040
i will start the poll now

3168
01:58:47,840 --> 01:58:51,639
erase on this yes

3169
01:59:06,240 --> 01:59:09,840
[Laughter]

3170
01:59:09,840 --> 01:59:13,040
while not participating chose a lower

3171
01:59:13,040 --> 01:59:15,280
count which means that

3172
01:59:15,280 --> 01:59:17,840
yeah

3173
01:59:37,280 --> 01:59:38,159
okay

3174
01:59:38,159 --> 01:59:39,520
i think i'll

3175
01:59:39,520 --> 01:59:43,119
very soon close it um

3176
01:59:43,440 --> 01:59:46,960
so get your pulse result all seen

3177
01:59:46,960 --> 01:59:48,400
thank you

3178
01:59:48,400 --> 01:59:50,239
and

3179
01:59:50,239 --> 01:59:54,400
this had 58 participants 50

3180
01:59:54,400 --> 01:59:59,679
saying yes and it's saying no um

3181
01:59:59,679 --> 02:00:01,119
i think it gives a fairly good

3182
02:00:01,119 --> 02:00:02,719
indication of

3183
02:00:02,719 --> 02:00:04,880
that some joint work and then their

3184
02:00:04,880 --> 02:00:07,119
interest a significant interest in both

3185
02:00:07,119 --> 02:00:10,719
of these two sets of use cases

3186
02:00:10,719 --> 02:00:12,560
so i think the next steps really is what

3187
02:00:12,560 --> 02:00:14,480
i lied out there saying okay can we

3188
02:00:14,480 --> 02:00:16,320
scope this um

3189
02:00:16,320 --> 02:00:18,400
and that the proponents etcetera will

3190
02:00:18,400 --> 02:00:19,199
start

3191
02:00:19,199 --> 02:00:21,360
looking into okay discussing on the mock

3192
02:00:21,360 --> 02:00:23,679
list seeing what we can do

3193
02:00:23,679 --> 02:00:26,000
working towards maybe shorter or

3194
02:00:26,000 --> 02:00:28,400
suitable place but yeah

3195
02:00:28,400 --> 02:00:30,800
so um

3196
02:00:30,800 --> 02:00:32,560
mari do you have any

3197
02:00:32,560 --> 02:00:35,520
comments as a.d

3198
02:00:35,520 --> 02:00:38,920
for this buff

3199
02:00:40,320 --> 02:00:42,800
no i don't think so um

3200
02:00:42,800 --> 02:00:44,480
you think you've got the next step that

3201
02:00:44,480 --> 02:00:46,400
i would be expecting

3202
02:00:46,400 --> 02:00:50,360
i'm good with what we have here

3203
02:00:59,760 --> 02:01:01,840
okay well that's we're just at time now

3204
02:01:01,840 --> 02:01:03,199
i really want to thank everybody for

3205
02:01:03,199 --> 02:01:04,719
coming for participating i thought it

3206
02:01:04,719 --> 02:01:06,400
was really helpful session it was good

3207
02:01:06,400 --> 02:01:08,560
to see so many people here i want to of

3208
02:01:08,560 --> 02:01:10,320
course thank the ads thank the

3209
02:01:10,320 --> 02:01:13,760
presenters uh thank my co-chair um and

3210
02:01:13,760 --> 02:01:16,080
everyone have a great rest of your week

3211
02:01:16,080 --> 02:01:17,640
here

3212
02:01:17,640 --> 02:01:20,729
[Music]

3213
02:01:24,000 --> 02:01:27,080
all right

3214
02:01:44,340 --> 02:01:47,539
[Music]

3215
02:01:48,960 --> 02:01:50,639
had like back to bed and immediately

3216
02:01:50,639 --> 02:01:54,040
closed his browser

3217
02:02:05,360 --> 02:02:07,840
hi it's nice to meet you in person

3218
02:02:07,840 --> 02:02:10,080
yes uh well in the time of

3219
02:02:10,080 --> 02:02:12,239
make sure we sanitize it

3220
02:02:12,239 --> 02:02:13,679
that's going okay thank you guys for

3221
02:02:13,679 --> 02:02:14,560
coming

3222
02:02:14,560 --> 02:02:17,560
um

3223
02:02:24,239 --> 02:02:27,199
nice to meet you in person

3224
02:02:27,199 --> 02:02:30,440
thank you

3225
02:02:39,440 --> 02:02:40,800
well i think hopefully this will

3226
02:02:40,800 --> 02:02:42,719
generate some discussion on the list

3227
02:02:42,719 --> 02:02:46,560
um which has been a little bit sparse

3228
02:02:46,560 --> 02:02:48,400
and then i mean i would like to see you

3229
02:02:48,400 --> 02:02:50,320
start to put together a charter i mean

3230
02:02:50,320 --> 02:02:51,119
and

3231
02:02:51,119 --> 02:02:51,840
if

3232
02:02:51,840 --> 02:02:53,599
we can agree on and let people argue

3233
02:02:53,599 --> 02:02:55,440
about what a charter should be

3234
02:02:55,440 --> 02:02:58,400
what it should be like on the list

3235
02:02:58,400 --> 02:03:01,119
if it goes well then we don't have it we

3236
02:03:01,119 --> 02:03:04,119
can

