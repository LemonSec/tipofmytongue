1
00:00:09,920 --> 00:00:12,160
and now we are on top of the hour so i

2
00:00:12,160 --> 00:00:14,400
think we can start

3
00:00:14,400 --> 00:00:16,880
welcome everyone to this uh co-working

4
00:00:16,880 --> 00:00:20,400
group meeting at ietf 113 hybrid after

5
00:00:20,400 --> 00:00:22,640
two years or so it's nice to be here and

6
00:00:22,640 --> 00:00:24,240
i've seen you again

7
00:00:24,240 --> 00:00:26,720
uh on site i am marco tyroca my

8
00:00:26,720 --> 00:00:28,640
co-chairs are jaime jimenez and

9
00:00:28,640 --> 00:00:31,039
president boardman you can find in this

10
00:00:31,039 --> 00:00:32,960
cover slide also a new resource for the

11
00:00:32,960 --> 00:00:36,480
working group the zulip stream

12
00:00:38,000 --> 00:00:39,520
so of course as usual you assume people

13
00:00:39,520 --> 00:00:40,879
to have read the documents to be

14
00:00:40,879 --> 00:00:43,680
discussed today in the agenda

15
00:00:43,680 --> 00:00:45,840
please do your best to use

16
00:00:45,840 --> 00:00:47,360
the allocated time in the best possible

17
00:00:47,360 --> 00:00:49,760
way to discuss um issues that benefit

18
00:00:49,760 --> 00:00:50,559
from

19
00:00:50,559 --> 00:00:52,239
face-to-face discussion

20
00:00:52,239 --> 00:00:54,160
the not well applies and slide comes

21
00:00:54,160 --> 00:00:56,079
later the blue sheets is collected

22
00:00:56,079 --> 00:00:58,879
automatically through meteco

23
00:00:58,879 --> 00:01:01,039
carson will mostly pay attention to the

24
00:01:01,039 --> 00:01:03,359
chat and jabber and we have ricardo

25
00:01:03,359 --> 00:01:06,000
hogland that volunteered to take notes

26
00:01:06,000 --> 00:01:07,360
thank you very much

27
00:01:07,360 --> 00:01:09,040
anyone is welcome to

28
00:01:09,040 --> 00:01:12,439
help him out

29
00:01:13,439 --> 00:01:15,119
and of course this this is an

30
00:01:15,119 --> 00:01:16,799
officiality of meeting then not well

31
00:01:16,799 --> 00:01:19,360
applies uh please get get familiar with

32
00:01:19,360 --> 00:01:21,280
that if you're not already

33
00:01:21,280 --> 00:01:23,759
it's not about ipr and patents it's also

34
00:01:23,759 --> 00:01:25,520
in the special about

35
00:01:25,520 --> 00:01:27,439
our code of conduct so be nice and

36
00:01:27,439 --> 00:01:28,720
professional

37
00:01:28,720 --> 00:01:31,439
with one another

38
00:01:33,119 --> 00:01:35,200
right we are on friday so probably you

39
00:01:35,200 --> 00:01:37,680
have seen this many times and you are

40
00:01:37,680 --> 00:01:39,600
masters of this already but

41
00:01:39,600 --> 00:01:42,000
the meeting is recording and it works in

42
00:01:42,000 --> 00:01:43,600
a particular way for

43
00:01:43,600 --> 00:01:45,840
in-person attendees you have to be

44
00:01:45,840 --> 00:01:47,600
signing me taeko

45
00:01:47,600 --> 00:01:49,680
to be able to build a single queue for

46
00:01:49,680 --> 00:01:51,280
the church to manage

47
00:01:51,280 --> 00:01:52,960
and to be counted in the blue sheets and

48
00:01:52,960 --> 00:01:56,159
so on uh you can do that using the light

49
00:01:56,159 --> 00:01:58,479
version from the agenda and the data

50
00:01:58,479 --> 00:01:59,920
tracker if you still want to use the

51
00:01:59,920 --> 00:02:01,920
full version please

52
00:02:01,920 --> 00:02:04,479
keep audio video off and as to join the

53
00:02:04,479 --> 00:02:06,240
queue you have to join the qmi takeoff

54
00:02:06,240 --> 00:02:07,680
first of all

55
00:02:07,680 --> 00:02:09,280
before going to the mic

56
00:02:09,280 --> 00:02:11,120
for remote participants this work pretty

57
00:02:11,120 --> 00:02:13,200
much like it has worked in the last

58
00:02:13,200 --> 00:02:14,959
two years

59
00:02:14,959 --> 00:02:16,879
if you cannot use audio at all

60
00:02:16,879 --> 00:02:18,239
just type make

61
00:02:18,239 --> 00:02:19,360
on the chat

62
00:02:19,360 --> 00:02:23,319
to ask for relaying your question

63
00:02:24,480 --> 00:02:26,400
all right this is the agenda uh for

64
00:02:26,400 --> 00:02:27,599
today

65
00:02:27,599 --> 00:02:29,920
it's pretty packed so uh please

66
00:02:29,920 --> 00:02:32,640
try to stay on time and shares will

67
00:02:32,640 --> 00:02:35,360
be sure that happens

68
00:02:35,360 --> 00:02:37,680
uh we start with a bunch of working

69
00:02:37,680 --> 00:02:39,599
group documents in the first half of the

70
00:02:39,599 --> 00:02:41,760
meeting meaning href conditional

71
00:02:41,760 --> 00:02:43,200
attributes

72
00:02:43,200 --> 00:02:44,800
group communication for co-op or group

73
00:02:44,800 --> 00:02:46,239
combis

74
00:02:46,239 --> 00:02:48,720
and then the group of score document

75
00:02:48,720 --> 00:02:51,280
and the key update for oscor on kudos

76
00:02:51,280 --> 00:02:54,000
document and then we continue with uh

77
00:02:54,000 --> 00:02:55,760
three non-working group documents

78
00:02:55,760 --> 00:02:57,280
transport indication on traditional

79
00:02:57,280 --> 00:02:58,480
responses

80
00:02:58,480 --> 00:02:59,840
and dns

81
00:02:59,840 --> 00:03:01,920
over co-op

82
00:03:01,920 --> 00:03:03,920
before we continue is there any agenda

83
00:03:03,920 --> 00:03:07,920
bashing that anyone wants to propose

84
00:03:10,879 --> 00:03:14,319
here in scene none

85
00:03:16,560 --> 00:03:18,879
then moving on and usual update on the

86
00:03:18,879 --> 00:03:22,080
document status in the working group

87
00:03:22,080 --> 00:03:25,120
so double reason to celebrate

88
00:03:25,120 --> 00:03:26,799
in the recent weeks we have

89
00:03:26,799 --> 00:03:29,640
uh two documents published as rfc um

90
00:03:29,640 --> 00:03:33,519
9175 that used to be a echo request tag

91
00:03:33,519 --> 00:03:34,799
thank you very much as usual to the

92
00:03:34,799 --> 00:03:38,400
authors and the working group for this

93
00:03:38,720 --> 00:03:42,400
and a few days ago only also 9177 was

94
00:03:42,400 --> 00:03:46,000
published and used to be a new block

95
00:03:46,000 --> 00:03:48,480
thank you very much for this too

96
00:03:48,480 --> 00:03:50,700
awesome yes

97
00:03:50,700 --> 00:03:54,239
[Applause]

98
00:03:54,239 --> 00:03:56,560
and similar news should come anytime

99
00:03:56,560 --> 00:03:59,120
soon about two other documents that are

100
00:03:59,120 --> 00:04:02,080
still in the rfcq but one is all 48 done

101
00:04:02,080 --> 00:04:04,239
even as ml data ct

102
00:04:04,239 --> 00:04:06,319
and the resource directory is in out 48

103
00:04:06,319 --> 00:04:07,439
and waiting for

104
00:04:07,439 --> 00:04:09,040
very final touches as far as i know

105
00:04:09,040 --> 00:04:13,720
before it can proceed for publication

106
00:04:15,280 --> 00:04:17,600
and we have two documents in isg

107
00:04:17,600 --> 00:04:19,600
processing uh

108
00:04:19,600 --> 00:04:22,320
young cyborg and sid so young zebra is

109
00:04:22,320 --> 00:04:24,400
really almost there there is one more

110
00:04:24,400 --> 00:04:26,639
comment uh to be addressed

111
00:04:26,639 --> 00:04:29,520
and all should be concluded next week

112
00:04:29,520 --> 00:04:32,080
and for c there has been a lot of

113
00:04:32,080 --> 00:04:34,080
discussion also in a side meeting

114
00:04:34,080 --> 00:04:36,880
yesterday between authors and the id

115
00:04:36,880 --> 00:04:39,040
on a final discuss ballot to be

116
00:04:39,040 --> 00:04:40,240
addressed

117
00:04:40,240 --> 00:04:42,080
and this requires some more text to be

118
00:04:42,080 --> 00:04:44,080
added but that should happen also very

119
00:04:44,080 --> 00:04:46,320
soon

120
00:04:48,400 --> 00:04:50,240
all right and then a bunch of documents

121
00:04:50,240 --> 00:04:52,080
post working group plus call meaning the

122
00:04:52,080 --> 00:04:54,080
other two documents of the quarkon

123
00:04:54,080 --> 00:04:56,479
clusters that just waiting for the first

124
00:04:56,479 --> 00:05:00,000
two uh ones i've just mentioned before

125
00:05:00,000 --> 00:05:01,680
they can actually go under shepherd

126
00:05:01,680 --> 00:05:02,800
write up

127
00:05:02,800 --> 00:05:04,240
and then we have the group of score

128
00:05:04,240 --> 00:05:06,320
document that has passed the second

129
00:05:06,320 --> 00:05:08,160
working group call and

130
00:05:08,160 --> 00:05:09,840
should be ready to move on but we have a

131
00:05:09,840 --> 00:05:11,600
presentation about it

132
00:05:11,600 --> 00:05:14,240
later today

133
00:05:16,800 --> 00:05:18,240
and that's all for the document status

134
00:05:18,240 --> 00:05:20,400
unless there are any questions comment

135
00:05:20,400 --> 00:05:22,799
on that

136
00:05:23,520 --> 00:05:25,680
then we can start with the

137
00:05:25,680 --> 00:05:28,240
actual presentation and that's on cars

138
00:05:28,240 --> 00:05:31,520
then for href

139
00:05:35,680 --> 00:05:38,680
okay

140
00:05:49,199 --> 00:05:51,600
so this will just be a quick status

141
00:05:51,600 --> 00:05:53,840
update

142
00:05:54,800 --> 00:05:57,840
the draft is called href the subject of

143
00:05:57,840 --> 00:06:00,240
the draft is the cri the concise

144
00:06:00,240 --> 00:06:02,560
resource identifier

145
00:06:02,560 --> 00:06:04,560
which is essentially concise equivalent

146
00:06:04,560 --> 00:06:07,280
of the uis

147
00:06:07,280 --> 00:06:09,680
sorry to interrupt your mic is pretty

148
00:06:09,680 --> 00:06:12,160
noisy it worked better when you tested

149
00:06:12,160 --> 00:06:13,360
it

150
00:06:13,360 --> 00:06:17,120
maybe it's just noise distance

151
00:06:17,120 --> 00:06:19,840
almost breaking up

152
00:06:19,840 --> 00:06:22,479
yeah okay that will be my internet

153
00:06:22,479 --> 00:06:24,720
access this is provided by the german

154
00:06:24,720 --> 00:06:27,199
telecom

155
00:06:27,520 --> 00:06:29,520
okay still understandable

156
00:06:29,520 --> 00:06:32,000
that's right

157
00:06:33,280 --> 00:06:34,639
ugly okay

158
00:06:34,639 --> 00:06:37,680
um yeah just tell me when i'm no longer

159
00:06:37,680 --> 00:06:39,360
intelligible

160
00:06:39,360 --> 00:06:40,160
um

161
00:06:40,160 --> 00:06:43,120
so the idea is that your eyes and your

162
00:06:43,120 --> 00:06:45,600
references which we love so much

163
00:06:45,600 --> 00:06:47,919
um actually have an underlying data

164
00:06:47,919 --> 00:06:50,800
model that just has to be discovered

165
00:06:50,800 --> 00:06:52,960
and we can provide a concise

166
00:06:52,960 --> 00:06:55,599
representation format

167
00:06:55,599 --> 00:06:57,199
for that

168
00:06:57,199 --> 00:06:59,599
so that's the point of this draft this

169
00:06:59,599 --> 00:07:01,599
has been originally started by klaus

170
00:07:01,599 --> 00:07:03,759
harker and

171
00:07:03,759 --> 00:07:06,400
right now we are just trying to finish

172
00:07:06,400 --> 00:07:07,680
that

173
00:07:07,680 --> 00:07:10,560
and there have been a few uh updates

174
00:07:10,560 --> 00:07:13,919
since the last itf dasher 8 was the

175
00:07:13,919 --> 00:07:15,759
iit f112

176
00:07:15,759 --> 00:07:17,440
version where we had added percent

177
00:07:17,440 --> 00:07:18,720
encoded

178
00:07:18,720 --> 00:07:20,400
uh text

179
00:07:20,400 --> 00:07:22,720
and there have been a few tricks to that

180
00:07:22,720 --> 00:07:24,400
in dash online

181
00:07:24,400 --> 00:07:27,440
we also did an editorial step by by

182
00:07:27,440 --> 00:07:29,599
moving all the

183
00:07:29,599 --> 00:07:32,080
yeah weird stuff into an appendix the

184
00:07:32,080 --> 00:07:33,440
small print

185
00:07:33,440 --> 00:07:36,000
appendix that you probably only have to

186
00:07:36,000 --> 00:07:37,280
read if you're actually implementing

187
00:07:37,280 --> 00:07:38,400
this

188
00:07:38,400 --> 00:07:41,199
and in dash 10

189
00:07:41,199 --> 00:07:45,120
we finally added the last

190
00:07:45,120 --> 00:07:47,840
ui component that we so far hadn't

191
00:07:47,840 --> 00:07:50,000
supported the user info

192
00:07:50,000 --> 00:07:52,560
structure this is the thing that comes

193
00:07:52,560 --> 00:07:55,199
in an ad design before the

194
00:07:55,199 --> 00:07:56,479
host name

195
00:07:56,479 --> 00:07:58,800
and that is really bad if there is a

196
00:07:58,800 --> 00:08:00,720
password included so that that feature

197
00:08:00,720 --> 00:08:01,919
is not

198
00:08:01,919 --> 00:08:02,800
um

199
00:08:02,800 --> 00:08:06,479
part of dash 10 but the user info itself

200
00:08:06,479 --> 00:08:09,120
is occasionally being used so this is

201
00:08:09,120 --> 00:08:11,520
now also possible to

202
00:08:11,520 --> 00:08:14,240
represent and a few more

203
00:08:14,240 --> 00:08:17,280
editorial inferior changes and

204
00:08:17,280 --> 00:08:20,720
we also have a separate cdda rule for

205
00:08:20,720 --> 00:08:21,919
both

206
00:08:21,919 --> 00:08:24,000
cri and ci

207
00:08:24,000 --> 00:08:25,840
reference because in many cases you

208
00:08:25,840 --> 00:08:28,479
really just want cis and so you don't

209
00:08:28,479 --> 00:08:31,199
need the full cia reference

210
00:08:31,199 --> 00:08:33,360
production

211
00:08:33,360 --> 00:08:35,440
what i'm doing right now is

212
00:08:35,440 --> 00:08:37,440
implementation work

213
00:08:37,440 --> 00:08:40,719
so there are four implementations that

214
00:08:40,719 --> 00:08:42,320
i'm aware of

215
00:08:42,320 --> 00:08:45,200
in four different languages

216
00:08:45,200 --> 00:08:47,680
and well if you implement something you

217
00:08:47,680 --> 00:08:49,760
uncover little issues

218
00:08:49,760 --> 00:08:52,000
so this is exactly what's happening

219
00:08:52,000 --> 00:08:53,680
right now

220
00:08:53,680 --> 00:08:56,880
and in the process we are also

221
00:08:56,880 --> 00:09:01,040
expanding our collection of test vectors

222
00:09:01,040 --> 00:09:02,320
so

223
00:09:02,320 --> 00:09:04,399
there will be a

224
00:09:04,399 --> 00:09:06,839
connection that all these

225
00:09:06,839 --> 00:09:09,200
implementations support and that new

226
00:09:09,200 --> 00:09:12,080
implementers can use that as a reference

227
00:09:12,080 --> 00:09:14,320
to test their implementations

228
00:09:14,320 --> 00:09:16,320
but really the implementation the

229
00:09:16,320 --> 00:09:18,000
objective of the implementation is to

230
00:09:18,000 --> 00:09:21,600
exercise ci in a number of contexts

231
00:09:21,600 --> 00:09:24,320
and that's of course coral which is what

232
00:09:24,320 --> 00:09:26,480
ci originally was

233
00:09:26,480 --> 00:09:28,240
developed for

234
00:09:28,240 --> 00:09:32,000
but also in the context of various uh

235
00:09:32,000 --> 00:09:35,120
data formats that use queries

236
00:09:35,120 --> 00:09:37,440
and we need to make sure that these work

237
00:09:37,440 --> 00:09:38,959
well with

238
00:09:38,959 --> 00:09:40,880
um

239
00:09:40,880 --> 00:09:42,560
the eyes which is not too easy because

240
00:09:42,560 --> 00:09:45,279
curries are really just a synthetic

241
00:09:45,279 --> 00:09:47,680
on your eyes so they

242
00:09:47,680 --> 00:09:49,360
do not map

243
00:09:49,360 --> 00:09:51,440
to the data model

244
00:09:51,440 --> 00:09:54,320
um at all so we we have to

245
00:09:54,320 --> 00:09:56,240
provide some some

246
00:09:56,240 --> 00:09:59,200
help for that and that is of course also

247
00:09:59,200 --> 00:10:00,240
in

248
00:10:00,240 --> 00:10:02,079
the context of

249
00:10:02,079 --> 00:10:05,440
sibo packed where we want to make sure

250
00:10:05,440 --> 00:10:08,800
that the cis can work well with sibo

251
00:10:08,800 --> 00:10:11,120
packed

252
00:10:13,120 --> 00:10:15,760
okay and finally

253
00:10:15,760 --> 00:10:16,959
where we are

254
00:10:16,959 --> 00:10:19,760
we have five remaining issues on the

255
00:10:19,760 --> 00:10:22,240
repository we have one

256
00:10:22,240 --> 00:10:24,480
pr on the text of the document we also

257
00:10:24,480 --> 00:10:26,800
have two more pr's on the test vectors i

258
00:10:26,800 --> 00:10:29,040
think that that's

259
00:10:29,040 --> 00:10:32,240
maybe something the implementers can

260
00:10:32,240 --> 00:10:34,480
decide among themselves

261
00:10:34,480 --> 00:10:37,519
but the other things really could help i

262
00:10:37,519 --> 00:10:38,399
could

263
00:10:38,399 --> 00:10:40,000
use help

264
00:10:40,000 --> 00:10:41,680
from the working group so if you

265
00:10:41,680 --> 00:10:44,000
occasionally maybe can look

266
00:10:44,000 --> 00:10:45,839
into

267
00:10:45,839 --> 00:10:48,640
core working group href repository maybe

268
00:10:48,640 --> 00:10:51,120
watch it so you'll find out about

269
00:10:51,120 --> 00:10:53,680
new issues and comment there that would

270
00:10:53,680 --> 00:10:56,160
be really helpful

271
00:10:56,160 --> 00:10:58,800
my personal

272
00:10:58,800 --> 00:11:00,480
estimate would be that we probably need

273
00:11:00,480 --> 00:11:02,560
about six more weeks to do this

274
00:11:02,560 --> 00:11:04,160
implementation

275
00:11:04,160 --> 00:11:05,680
uh work

276
00:11:05,680 --> 00:11:08,160
and then maybe one more interim before

277
00:11:08,160 --> 00:11:09,680
we actually can

278
00:11:09,680 --> 00:11:11,040
get all these

279
00:11:11,040 --> 00:11:12,720
little issues

280
00:11:12,720 --> 00:11:15,279
laid down um as well so look into the

281
00:11:15,279 --> 00:11:17,839
issues list on github to see what these

282
00:11:17,839 --> 00:11:19,440
nuclear issues are

283
00:11:19,440 --> 00:11:22,800
um yeah we are no longer having really

284
00:11:22,800 --> 00:11:23,839
big

285
00:11:23,839 --> 00:11:26,000
questions but the the small ones need to

286
00:11:26,000 --> 00:11:28,480
be answered as well

287
00:11:28,480 --> 00:11:31,360
so that's my summary

288
00:11:33,519 --> 00:11:35,680
thank you carson

289
00:11:35,680 --> 00:11:39,959
any questions comments

290
00:11:42,880 --> 00:11:44,959
okay do you plan an actual revision

291
00:11:44,959 --> 00:11:47,600
submitted in about six weeks or so

292
00:11:47,600 --> 00:11:49,600
or even some discussion before that

293
00:11:49,600 --> 00:11:51,600
happens

294
00:11:51,600 --> 00:11:55,200
well one or two revisions until we we

295
00:11:55,200 --> 00:11:57,279
are done with the implementation

296
00:11:57,279 --> 00:11:58,399
testing

297
00:11:58,399 --> 00:12:01,120
and then maybe we can do

298
00:12:01,120 --> 00:12:04,560
another revision after the interim

299
00:12:04,800 --> 00:12:07,359
sounds good

300
00:12:08,800 --> 00:12:12,320
okay see no questions in the chat no one

301
00:12:12,320 --> 00:12:14,320
in the queue

302
00:12:14,320 --> 00:12:17,040
i think we're done with href

303
00:12:17,040 --> 00:12:19,040
thank you carson

304
00:12:19,040 --> 00:12:21,360
thank you

305
00:12:22,839 --> 00:12:26,320
okay uh next in the agenda is

306
00:12:26,320 --> 00:12:29,279
bill hi bill

307
00:12:33,680 --> 00:12:35,279
hi can you hear me now

308
00:12:35,279 --> 00:12:37,040
yes very well

309
00:12:37,040 --> 00:12:38,399
thank you yeah

310
00:12:38,399 --> 00:12:40,160
i might have some audio trouble so if

311
00:12:40,160 --> 00:12:41,920
you suddenly see my audio cutting off

312
00:12:41,920 --> 00:12:43,279
then

313
00:12:43,279 --> 00:12:46,399
okay okay i'm gonna start video uh i

314
00:12:46,399 --> 00:12:48,160
hope it's coming through

315
00:12:48,160 --> 00:12:51,200
yes okay and see you hello everybody in

316
00:12:51,200 --> 00:12:53,839
vienna and remote

317
00:12:53,839 --> 00:12:55,279
couldn't join you this time but i hope

318
00:12:55,279 --> 00:12:56,720
to do that next time so i'm going to

319
00:12:56,720 --> 00:12:59,680
share slides now

320
00:13:00,560 --> 00:13:04,119
it's coming up

321
00:13:09,040 --> 00:13:11,120
please let me know if you can see this

322
00:13:11,120 --> 00:13:13,440
we can see them go ahead

323
00:13:13,440 --> 00:13:15,040
good so everything is good to go all

324
00:13:15,040 --> 00:13:16,000
right

325
00:13:16,000 --> 00:13:19,200
so again uh good morning everybody uh

326
00:13:19,200 --> 00:13:20,720
it's a very small presentation that i

327
00:13:20,720 --> 00:13:21,519
have

328
00:13:21,519 --> 00:13:23,680
so this is about uh the conditional

329
00:13:23,680 --> 00:13:27,839
attributes draft for um core and uh

330
00:13:27,839 --> 00:13:29,680
and this is just delta from what had

331
00:13:29,680 --> 00:13:33,519
happened from the last interim meeting

332
00:13:33,519 --> 00:13:35,519
so the last interior meeting we actually

333
00:13:35,519 --> 00:13:37,760
resolved a lot of issues um at the

334
00:13:37,760 --> 00:13:40,560
moment there are no more github issues

335
00:13:40,560 --> 00:13:41,600
um

336
00:13:41,600 --> 00:13:45,040
and uh there was uh some um resolution

337
00:13:45,040 --> 00:13:48,000
made on the value of the band attribute

338
00:13:48,000 --> 00:13:49,440
we

339
00:13:49,440 --> 00:13:51,279
included some text about the proxy

340
00:13:51,279 --> 00:13:53,760
considerations inside the implementation

341
00:13:53,760 --> 00:13:55,600
considerations part

342
00:13:55,600 --> 00:13:58,720
uh there is security considerations done

343
00:13:58,720 --> 00:14:00,480
but then during the last interim we

344
00:14:00,480 --> 00:14:03,040
actually had a small chat about um what

345
00:14:03,040 --> 00:14:04,480
more could be done in this draft before

346
00:14:04,480 --> 00:14:05,839
it goes for working through glasgow so

347
00:14:05,839 --> 00:14:07,839
this is what i'm here for

348
00:14:07,839 --> 00:14:10,160
uh firstly there was a

349
00:14:10,160 --> 00:14:11,440
um

350
00:14:11,440 --> 00:14:14,480
a request that that perhaps the term

351
00:14:14,480 --> 00:14:17,199
attributes or conditional attributes um

352
00:14:17,199 --> 00:14:19,120
could be explained a little bit better

353
00:14:19,120 --> 00:14:21,040
uh and perhaps put it into his own

354
00:14:21,040 --> 00:14:21,920
section

355
00:14:21,920 --> 00:14:23,760
but considering the the whole draft is

356
00:14:23,760 --> 00:14:26,560
about um attributes it felt a bit weird

357
00:14:26,560 --> 00:14:30,199
so i um

358
00:14:30,240 --> 00:14:32,399
the introduction of the the draft so

359
00:14:32,399 --> 00:14:35,279
that um i try to clarify

360
00:14:35,279 --> 00:14:38,639
uh what conditional attributes are so um

361
00:14:38,639 --> 00:14:41,040
the old specification define contribute

362
00:14:41,040 --> 00:14:42,720
conditional attributes

363
00:14:42,720 --> 00:14:44,079
uh as just providing fine-grained

364
00:14:44,079 --> 00:14:46,560
control of notification and

365
00:14:46,560 --> 00:14:50,000
synchronization with core observe and

366
00:14:50,000 --> 00:14:52,240
there was some artifact about resource

367
00:14:52,240 --> 00:14:54,399
interfaces blah blah blah and then there

368
00:14:54,399 --> 00:14:56,240
was saying that a resource marked as

369
00:14:56,240 --> 00:14:57,519
observable

370
00:14:57,519 --> 00:14:58,959
in its link description should support

371
00:14:58,959 --> 00:15:02,000
this control attribute so i i

372
00:15:02,000 --> 00:15:04,959
recrafted that text and um

373
00:15:04,959 --> 00:15:07,360
um initially i essentially i basically

374
00:15:07,360 --> 00:15:08,800
put that this is this is for use with

375
00:15:08,800 --> 00:15:10,240
call observe

376
00:15:10,240 --> 00:15:13,600
but also um it's um how how do you

377
00:15:13,600 --> 00:15:15,680
actually convey the the conditional

378
00:15:15,680 --> 00:15:17,120
attributes so so using the query

379
00:15:17,120 --> 00:15:19,120
component of a quad uri

380
00:15:19,120 --> 00:15:21,199
and it can be either a name value query

381
00:15:21,199 --> 00:15:24,000
parameter or then um just a name without

382
00:15:24,000 --> 00:15:27,440
a value and and we we are able to

383
00:15:27,440 --> 00:15:28,800
um

384
00:15:28,800 --> 00:15:30,399
essentially describe

385
00:15:30,399 --> 00:15:32,240
the resource using multiple conditional

386
00:15:32,240 --> 00:15:34,160
attributes

387
00:15:34,160 --> 00:15:35,440
um

388
00:15:35,440 --> 00:15:37,759
please uh let me know if that is uh not

389
00:15:37,759 --> 00:15:38,560
okay

390
00:15:38,560 --> 00:15:41,360
i hope it's okay and um

391
00:15:41,360 --> 00:15:42,800
and this is already in the in the

392
00:15:42,800 --> 00:15:44,880
current um working

393
00:15:44,880 --> 00:15:46,639
group no sorry the current editor's

394
00:15:46,639 --> 00:15:48,800
draft um it hasn't gone into the into

395
00:15:48,800 --> 00:15:50,880
the newest version

396
00:15:50,880 --> 00:15:53,600
um and um once everything is done once

397
00:15:53,600 --> 00:15:55,680
you have good this then i will resubmit

398
00:15:55,680 --> 00:15:57,519
the new version hopefully that will be

399
00:15:57,519 --> 00:15:59,040
the last one before working group last

400
00:15:59,040 --> 00:16:01,360
call so this is this is basically the

401
00:16:01,360 --> 00:16:02,720
the let's say the

402
00:16:02,720 --> 00:16:04,639
editorial the last editorial which i'd

403
00:16:04,639 --> 00:16:06,639
like to do um one more thing that came

404
00:16:06,639 --> 00:16:09,600
up in the interim meeting was um

405
00:16:09,600 --> 00:16:10,480
the

406
00:16:10,480 --> 00:16:12,320
the fact of whether we need a registry

407
00:16:12,320 --> 00:16:14,240
and what kind of registry does does this

408
00:16:14,240 --> 00:16:16,560
draft require so

409
00:16:16,560 --> 00:16:18,399
uh in the inner construction section i

410
00:16:18,399 --> 00:16:20,800
had um originally included in the last

411
00:16:20,800 --> 00:16:22,320
version of the draft conditional

412
00:16:22,320 --> 00:16:24,320
attributes registry

413
00:16:24,320 --> 00:16:25,680
to

414
00:16:25,680 --> 00:16:28,800
uniquely map these names to

415
00:16:28,800 --> 00:16:30,320
what they really are

416
00:16:30,320 --> 00:16:32,160
but then the discussions came about

417
00:16:32,160 --> 00:16:33,600
whether this is necessary and what kind

418
00:16:33,600 --> 00:16:35,680
of registry we should have um there was

419
00:16:35,680 --> 00:16:37,839
some discussion on about whether there's

420
00:16:37,839 --> 00:16:39,920
a you know what the pros and cons

421
00:16:39,920 --> 00:16:41,839
um so obviously it would be nice to have

422
00:16:41,839 --> 00:16:44,320
registry to to remove the integrity of

423
00:16:44,320 --> 00:16:47,199
how this can be defined

424
00:16:47,199 --> 00:16:48,839
and that the

425
00:16:48,839 --> 00:16:51,519
direct let's say um

426
00:16:51,519 --> 00:16:53,199
implication of this is that some of

427
00:16:53,199 --> 00:16:55,360
these names are used in in different

428
00:16:55,360 --> 00:16:57,600
contexts in in different places so for

429
00:16:57,600 --> 00:16:59,440
example lte is used in the conditional

430
00:16:59,440 --> 00:17:01,920
attributes draft to mean less than but

431
00:17:01,920 --> 00:17:05,119
then lt is used in

432
00:17:05,119 --> 00:17:07,039
the query parameters i think in in the

433
00:17:07,039 --> 00:17:09,359
resource directory to mean lifetime

434
00:17:09,359 --> 00:17:12,000
uh so and uh

435
00:17:12,000 --> 00:17:13,439
resource directory actually already

436
00:17:13,439 --> 00:17:14,640
defines the sub

437
00:17:14,640 --> 00:17:16,640
registry for rd parameters to to

438
00:17:16,640 --> 00:17:18,959
describe lt's lifetime so

439
00:17:18,959 --> 00:17:20,559
um

440
00:17:20,559 --> 00:17:22,240
that's that's one thing that i i'd like

441
00:17:22,240 --> 00:17:25,280
to resolve today um obviously i don't

442
00:17:25,280 --> 00:17:26,799
really mind going forward that the draft

443
00:17:26,799 --> 00:17:28,799
never actually had a registry before but

444
00:17:28,799 --> 00:17:30,880
it would be great to

445
00:17:30,880 --> 00:17:34,480
to um to get some resolution on this um

446
00:17:34,480 --> 00:17:36,400
and also the discussion was whether it

447
00:17:36,400 --> 00:17:38,160
makes sense to have a more general uh

448
00:17:38,160 --> 00:17:40,400
attributes registry but

449
00:17:40,400 --> 00:17:41,919
um

450
00:17:41,919 --> 00:17:44,400
the one

451
00:17:44,400 --> 00:17:47,120
let's say the one caveat to this is uh

452
00:17:47,120 --> 00:17:50,240
i'd like to just call it rfc 80 20 88 20

453
00:17:50,240 --> 00:17:52,080
so to describe why we should not be

454
00:17:52,080 --> 00:17:53,280
doing that

455
00:17:53,280 --> 00:17:55,919
uh because it it we don't want to use up

456
00:17:55,919 --> 00:17:58,960
the um the use of

457
00:17:58,960 --> 00:18:01,520
these uh attributes in in other kinds of

458
00:18:01,520 --> 00:18:03,600
uh client other clients

459
00:18:03,600 --> 00:18:05,440
that may not necessarily be using this

460
00:18:05,440 --> 00:18:07,200
so um

461
00:18:07,200 --> 00:18:08,640
and then specifying more elaborate

462
00:18:08,640 --> 00:18:10,880
structures to avoid these collisions is

463
00:18:10,880 --> 00:18:13,120
not really an acceptable solution so you

464
00:18:13,120 --> 00:18:15,120
know it's it's if we can go if we go

465
00:18:15,120 --> 00:18:18,160
generic then i i i feel that perhaps

466
00:18:18,160 --> 00:18:21,039
it will really um complicate matters

467
00:18:21,039 --> 00:18:23,760
but um on the other hand i i know that

468
00:18:23,760 --> 00:18:25,919
um there are experts in our group who

469
00:18:25,919 --> 00:18:27,440
probably will know how to deal with this

470
00:18:27,440 --> 00:18:30,000
better than i do so this is why i'd like

471
00:18:30,000 --> 00:18:30,799
to

472
00:18:30,799 --> 00:18:32,640
put this to the floor today

473
00:18:32,640 --> 00:18:34,559
have a discussion about that and then

474
00:18:34,559 --> 00:18:36,640
take this forward and hopefully resolve

475
00:18:36,640 --> 00:18:38,480
it so quickly that we can go to the last

476
00:18:38,480 --> 00:18:40,799
call

477
00:18:41,280 --> 00:18:43,039
uh so that's all i have actually for

478
00:18:43,039 --> 00:18:45,919
today so um please

479
00:18:45,919 --> 00:18:49,720
if anybody has any comments

480
00:19:00,480 --> 00:19:03,360
let's go go ahead

481
00:19:04,320 --> 00:19:07,440
yep um i just thought about

482
00:19:07,440 --> 00:19:08,559
this

483
00:19:08,559 --> 00:19:11,760
especially this example of lt

484
00:19:11,760 --> 00:19:13,200
yeah i think if it's used in a

485
00:19:13,200 --> 00:19:15,280
particular context like resource

486
00:19:15,280 --> 00:19:17,520
directory uh it should be no problem

487
00:19:17,520 --> 00:19:19,280
that it's reused for something else

488
00:19:19,280 --> 00:19:21,280
right in another

489
00:19:21,280 --> 00:19:23,039
context so you cannot

490
00:19:23,039 --> 00:19:27,200
rule that out it will happen in this way

491
00:19:29,840 --> 00:19:32,080
so that seemed seems to be fine although

492
00:19:32,080 --> 00:19:34,480
it's of course better to look at what

493
00:19:34,480 --> 00:19:37,600
others use and then try to uh

494
00:19:37,600 --> 00:19:40,799
yeah try to use more inconvenience uh

495
00:19:40,799 --> 00:19:42,320
where possible

496
00:19:42,320 --> 00:19:44,559
yep

497
00:19:48,720 --> 00:19:50,960
so i i agree with that i think that it's

498
00:19:50,960 --> 00:19:53,280
it's a it's a good

499
00:19:53,280 --> 00:19:55,280
in my opinion i i

500
00:19:55,280 --> 00:19:58,240
my personal um preference will be to to

501
00:19:58,240 --> 00:20:00,000
introduce a new sub registry for

502
00:20:00,000 --> 00:20:01,520
conditional attributes

503
00:20:01,520 --> 00:20:05,039
specifically for this purpose um without

504
00:20:05,039 --> 00:20:07,919
uh impinging on the use of the same

505
00:20:07,919 --> 00:20:10,159
attribute space in in our career

506
00:20:10,159 --> 00:20:12,960
parameter names in other applications

507
00:20:12,960 --> 00:20:14,960
uh i think it's clearer

508
00:20:14,960 --> 00:20:16,720
but um

509
00:20:16,720 --> 00:20:18,480
if you if you

510
00:20:18,480 --> 00:20:19,919
the rest of you feel that perhaps a

511
00:20:19,919 --> 00:20:21,600
registry is not needed then then we can

512
00:20:21,600 --> 00:20:23,200
easily audit that as well in the draft

513
00:20:23,200 --> 00:20:24,159
and then

514
00:20:24,159 --> 00:20:26,799
move this forward

515
00:20:28,880 --> 00:20:29,919
christian

516
00:20:29,919 --> 00:20:32,240
are you on the queue or if esco hasn't

517
00:20:32,240 --> 00:20:34,880
yeah all right kristen yeah because then

518
00:20:34,880 --> 00:20:36,000
i'm just um

519
00:20:36,000 --> 00:20:37,840
i'd like just like kind of i don't have

520
00:20:37,840 --> 00:20:40,000
a particular opinion on whether a

521
00:20:40,000 --> 00:20:42,159
registry structure makes sense

522
00:20:42,159 --> 00:20:44,400
but i would like to point out that just

523
00:20:44,400 --> 00:20:45,360
because

524
00:20:45,360 --> 00:20:47,360
the one thing is used for observations

525
00:20:47,360 --> 00:20:49,039
and one is the resource directory

526
00:20:49,039 --> 00:20:51,120
doesn't mean that they might not overlap

527
00:20:51,120 --> 00:20:52,880
because especially as it is phrased now

528
00:20:52,880 --> 00:20:55,200
with everything that is observable

529
00:20:55,200 --> 00:20:56,960
um should support

530
00:20:56,960 --> 00:20:58,400
the attributes

531
00:20:58,400 --> 00:20:59,440
a lot of things in the resource

532
00:20:59,440 --> 00:21:02,640
directory are observable um not partic

533
00:21:02,640 --> 00:21:05,120
not particularly used with the less than

534
00:21:05,120 --> 00:21:07,919
and lifetime but in general you can find

535
00:21:07,919 --> 00:21:08,960
things in the resource directory and

536
00:21:08,960 --> 00:21:11,760
then look it up so these things might

537
00:21:11,760 --> 00:21:15,559
easily need to be combined

538
00:21:18,960 --> 00:21:21,440
are you um christian could i

539
00:21:21,440 --> 00:21:23,840
trouble you to to say that did you

540
00:21:23,840 --> 00:21:25,760
just imply that

541
00:21:25,760 --> 00:21:27,120
when you say these things might need to

542
00:21:27,120 --> 00:21:30,080
be combined are you implying a common

543
00:21:30,080 --> 00:21:32,159
sub registry for both

544
00:21:32,159 --> 00:21:33,919
because that would require some

545
00:21:33,919 --> 00:21:36,240
considerable thinking if lte is used for

546
00:21:36,240 --> 00:21:38,000
example even live with m2m

547
00:21:38,000 --> 00:21:40,640
already so

548
00:21:43,360 --> 00:21:45,919
i've i have i i don't i don't know

549
00:21:45,919 --> 00:21:48,559
whether whether it comes up if if you go

550
00:21:48,559 --> 00:21:50,960
for regis for actually registered things

551
00:21:50,960 --> 00:21:51,919
then

552
00:21:51,919 --> 00:21:54,640
probably doing this across applications

553
00:21:54,640 --> 00:21:56,720
makes sense

554
00:21:56,720 --> 00:21:58,799
but that might also be a point why not

555
00:21:58,799 --> 00:22:00,320
doing a registry in the first place

556
00:22:00,320 --> 00:22:02,799
would be a thing to consider but then

557
00:22:02,799 --> 00:22:03,760
um

558
00:22:03,760 --> 00:22:06,799
these things would be combined like by

559
00:22:06,799 --> 00:22:09,120
the particular buyer server and then the

560
00:22:09,120 --> 00:22:12,159
server could just not combine this and

561
00:22:12,159 --> 00:22:14,880
that ext um component just because they

562
00:22:14,880 --> 00:22:16,080
have overlap

563
00:22:16,080 --> 00:22:18,559
conflicting requirements so

564
00:22:18,559 --> 00:22:21,200
maybe that a registry would also not be

565
00:22:21,200 --> 00:22:23,919
something that is completely normative

566
00:22:23,919 --> 00:22:26,400
in the sense that as soon as one of

567
00:22:26,400 --> 00:22:29,200
these elements shows up um

568
00:22:29,200 --> 00:22:31,280
these semantics are implied

569
00:22:31,280 --> 00:22:33,919
but more um something for coordination

570
00:22:33,919 --> 00:22:36,080
between components where they where each

571
00:22:36,080 --> 00:22:38,000
component would still

572
00:22:38,000 --> 00:22:40,480
uh where the the

573
00:22:40,480 --> 00:22:42,720
particular arguments would still

574
00:22:42,720 --> 00:22:45,039
um that the semantics would be opted in

575
00:22:45,039 --> 00:22:47,679
by the extension for example resource

576
00:22:47,679 --> 00:22:50,799
directory of or conditional attributes

577
00:22:50,799 --> 00:22:54,080
but just seeing which names are in used

578
00:22:54,080 --> 00:22:56,480
allows our news allows the authors of

579
00:22:56,480 --> 00:22:58,400
these extensions to make a more informed

580
00:22:58,400 --> 00:23:00,400
decision on which

581
00:23:00,400 --> 00:23:02,000
names

582
00:23:02,000 --> 00:23:04,559
may not make sense to use here because

583
00:23:04,559 --> 00:23:05,840
they might get into conflict with

584
00:23:05,840 --> 00:23:07,280
something else

585
00:23:07,280 --> 00:23:09,200
so it's it's not a red it's another

586
00:23:09,200 --> 00:23:10,720
registry that has

587
00:23:10,720 --> 00:23:13,039
where as soon as you see the name it has

588
00:23:13,039 --> 00:23:15,200
a meaning but more

589
00:23:15,200 --> 00:23:17,280
when you want to pick a name then you

590
00:23:17,280 --> 00:23:19,679
may look there and see where there is no

591
00:23:19,679 --> 00:23:23,080
conflict yet

592
00:23:23,520 --> 00:23:24,720
okay

593
00:23:24,720 --> 00:23:26,960
thanks

594
00:23:28,559 --> 00:23:30,320
thank you ask you're out you're still on

595
00:23:30,320 --> 00:23:32,080
do you want to say something yes go

596
00:23:32,080 --> 00:23:33,360
ahead

597
00:23:33,360 --> 00:23:36,159
yeah i just want to react on that so

598
00:23:36,159 --> 00:23:38,000
yeah i think the example that christian

599
00:23:38,000 --> 00:23:39,440
mentioned uh

600
00:23:39,440 --> 00:23:41,279
shows that there is a

601
00:23:41,279 --> 00:23:42,640
kind of real

602
00:23:42,640 --> 00:23:45,120
risk of uh clashing of these uh

603
00:23:45,120 --> 00:23:46,480
attributes

604
00:23:46,480 --> 00:23:48,159
especially uh

605
00:23:48,159 --> 00:23:50,159
yeah if the draft now says that any

606
00:23:50,159 --> 00:23:51,440
observable

607
00:23:51,440 --> 00:23:54,559
resource should support these attributes

608
00:23:54,559 --> 00:23:57,279
uh maybe the resource is already uh

609
00:23:57,279 --> 00:23:58,960
supporting other attributes and there

610
00:23:58,960 --> 00:24:00,880
could well be a clash of course in the

611
00:24:00,880 --> 00:24:03,279
names of those

612
00:24:03,279 --> 00:24:05,279
so that's something to

613
00:24:05,279 --> 00:24:07,840
to consider i think if it's uh if it's a

614
00:24:07,840 --> 00:24:09,360
resource like

615
00:24:09,360 --> 00:24:11,360
something like a temperature value that

616
00:24:11,360 --> 00:24:13,360
doesn't support any other attributes

617
00:24:13,360 --> 00:24:15,200
then it's fine to apply those

618
00:24:15,200 --> 00:24:17,120
conditional attributes but

619
00:24:17,120 --> 00:24:18,960
if it's something like indeed a resource

620
00:24:18,960 --> 00:24:20,320
directory

621
00:24:20,320 --> 00:24:22,559
resource that's already using uh

622
00:24:22,559 --> 00:24:25,360
attributes with same names maybe for

623
00:24:25,360 --> 00:24:26,640
something yeah

624
00:24:26,640 --> 00:24:28,640
something else then yeah

625
00:24:28,640 --> 00:24:30,559
you immediately have a problem if you

626
00:24:30,559 --> 00:24:32,559
want to combine

627
00:24:32,559 --> 00:24:34,240
those things

628
00:24:34,240 --> 00:24:37,039
and and i don't think you can actually

629
00:24:37,039 --> 00:24:38,880
apply all the conditional attributes in

630
00:24:38,880 --> 00:24:41,360
that case

631
00:24:41,360 --> 00:24:44,880
so maybe yeah require some thought

632
00:24:44,880 --> 00:24:47,919
if there's a way to resolve that or uh

633
00:24:47,919 --> 00:24:49,120
maybe

634
00:24:49,120 --> 00:24:50,720
it's possible to

635
00:24:50,720 --> 00:24:53,039
yeah while discovering resources to uh

636
00:24:53,039 --> 00:24:54,799
to see if a resource supports the

637
00:24:54,799 --> 00:24:56,960
conditional attributes or not that would

638
00:24:56,960 --> 00:24:58,640
also be great but i'm not sure if that's

639
00:24:58,640 --> 00:25:01,360
already defined

640
00:25:01,360 --> 00:25:02,799
well i mean

641
00:25:02,799 --> 00:25:04,720
the the drug does not say that you must

642
00:25:04,720 --> 00:25:06,480
support these attributes you just as you

643
00:25:06,480 --> 00:25:07,600
you should

644
00:25:07,600 --> 00:25:09,600
so you don't necessarily need to have

645
00:25:09,600 --> 00:25:12,240
that the collision at all

646
00:25:12,240 --> 00:25:14,080
but the client needs to know probably is

647
00:25:14,080 --> 00:25:15,840
uh like are these attributes supported

648
00:25:15,840 --> 00:25:17,679
or not uh

649
00:25:17,679 --> 00:25:19,840
yeah before it rises usually i think for

650
00:25:19,840 --> 00:25:21,520
for for observe it's usually best effort

651
00:25:21,520 --> 00:25:22,960
you you don't necessarily need to know

652
00:25:22,960 --> 00:25:25,360
that i mean it's um

653
00:25:25,360 --> 00:25:27,120
just like just like for example if you

654
00:25:27,120 --> 00:25:29,120
if you try to set pmin or pmax it's it's

655
00:25:29,120 --> 00:25:30,400
kind of like a

656
00:25:30,400 --> 00:25:31,919
request to the server so the server can

657
00:25:31,919 --> 00:25:34,080
choose to ignore that

658
00:25:34,080 --> 00:25:36,799
uh we don't necessarily need to

659
00:25:36,799 --> 00:25:37,919
um

660
00:25:37,919 --> 00:25:40,559
enforce it yeah

661
00:25:40,559 --> 00:25:42,400
could we ignore it so you get more

662
00:25:42,400 --> 00:25:44,559
basically the ideas if it somehow fails

663
00:25:44,559 --> 00:25:47,120
you get more notifications than you uh

664
00:25:47,120 --> 00:25:51,039
yeah ask for in that in the fallback uh

665
00:25:51,039 --> 00:25:53,279
situation yeah exactly yeah

666
00:25:53,279 --> 00:25:54,840
at least if if the

667
00:25:54,840 --> 00:25:57,440
server accepts that so it could also

668
00:25:57,440 --> 00:25:58,960
respond with an error of course if it

669
00:25:58,960 --> 00:26:00,320
doesn't know those

670
00:26:00,320 --> 00:26:03,200
new attributes

671
00:26:04,320 --> 00:26:05,600
so that's that's why i said maybe it's

672
00:26:05,600 --> 00:26:07,520
good to have have it potentially also

673
00:26:07,520 --> 00:26:09,120
discoverable whether the resource

674
00:26:09,120 --> 00:26:10,799
supports these

675
00:26:10,799 --> 00:26:13,679
new attributes or not

676
00:26:13,679 --> 00:26:15,360
if there's a way to

677
00:26:15,360 --> 00:26:18,240
to do that so i think uh core discovery

678
00:26:18,240 --> 00:26:20,080
has some various ways

679
00:26:20,080 --> 00:26:22,080
to mark like an interface you can mark

680
00:26:22,080 --> 00:26:23,520
for the resource so it supports this

681
00:26:23,520 --> 00:26:26,720
particular interface for example

682
00:26:26,720 --> 00:26:28,960
that could be a way but yeah that's just

683
00:26:28,960 --> 00:26:31,120
a thought thanks

684
00:26:31,120 --> 00:26:33,918
okay thank you

685
00:26:34,320 --> 00:26:36,720
carson

686
00:26:37,120 --> 00:26:38,880
so um

687
00:26:38,880 --> 00:26:40,640
of course there is also

688
00:26:40,640 --> 00:26:42,960
the problem of forward capability

689
00:26:42,960 --> 00:26:45,039
compatibility here

690
00:26:45,039 --> 00:26:48,640
um so if an application already uses foo

691
00:26:48,640 --> 00:26:50,840
and then we register for we have a

692
00:26:50,840 --> 00:26:54,720
problem so one way to reduce that

693
00:26:54,720 --> 00:26:56,720
likelihood would be to define a

694
00:26:56,720 --> 00:26:58,080
namespace

695
00:26:58,080 --> 00:27:00,080
for conditional attributes so anything

696
00:27:00,080 --> 00:27:04,399
that starts ca dot or ca

697
00:27:04,720 --> 00:27:07,440
is something that that

698
00:27:07,440 --> 00:27:09,200
sensor application wouldn't use because

699
00:27:09,200 --> 00:27:10,559
it might be used for a conditional

700
00:27:10,559 --> 00:27:11,840
attribute

701
00:27:11,840 --> 00:27:13,600
i'm not sure i'm suggesting this but i

702
00:27:13,600 --> 00:27:16,640
want to bring it up as a way to

703
00:27:16,640 --> 00:27:19,600
make forward compatibility more likely

704
00:27:19,600 --> 00:27:21,279
yeah yeah so actually that's the reason

705
00:27:21,279 --> 00:27:24,720
why i put that that sub bullet point

706
00:27:24,720 --> 00:27:27,840
that this namespace issue was not um was

707
00:27:27,840 --> 00:27:31,120
discouraged quite strongly in the rfc

708
00:27:31,120 --> 00:27:32,960
as well so uh

709
00:27:32,960 --> 00:27:35,520
that did occur to my to my mind as well

710
00:27:35,520 --> 00:27:37,279
that would would that be a possibility

711
00:27:37,279 --> 00:27:39,200
but but then

712
00:27:39,200 --> 00:27:40,320
i don't know if we really want to go

713
00:27:40,320 --> 00:27:42,480
down that path yet

714
00:27:42,480 --> 00:27:43,600
well

715
00:27:43,600 --> 00:27:44,960
you're talking about application

716
00:27:44,960 --> 00:27:46,559
namespaces i'm talking about the

717
00:27:46,559 --> 00:27:48,399
namespace just for the condition

718
00:27:48,399 --> 00:27:50,399
attributes

719
00:27:50,399 --> 00:27:52,320
which would not be a surprise and

720
00:27:52,320 --> 00:27:55,039
wouldn't clash

721
00:27:55,760 --> 00:27:57,520
okay well that's one one option then if

722
00:27:57,520 --> 00:28:01,039
you really want to go with the yeah

723
00:28:01,039 --> 00:28:02,640
if you want to prefix the parameters

724
00:28:02,640 --> 00:28:04,399
with something else but uh

725
00:28:04,399 --> 00:28:06,639
okay

726
00:28:07,520 --> 00:28:09,918
listen

727
00:28:10,640 --> 00:28:13,039
i'd just like to emphasize again this

728
00:28:13,039 --> 00:28:14,559
has been said earlier in these

729
00:28:14,559 --> 00:28:17,039
discussions also

730
00:28:17,039 --> 00:28:19,440
the query a uri query option is a

731
00:28:19,440 --> 00:28:21,840
critical option and in general an

732
00:28:21,840 --> 00:28:24,000
application will not just ignore

733
00:28:24,000 --> 00:28:25,520
something just because it doesn't know

734
00:28:25,520 --> 00:28:27,600
it because this is a critical option

735
00:28:27,600 --> 00:28:29,200
the practice of ignoring query

736
00:28:29,200 --> 00:28:31,600
parameters has in my understanding come

737
00:28:31,600 --> 00:28:34,640
from php just php applications just

738
00:28:34,640 --> 00:28:37,039
usually not doing this and a few other

739
00:28:37,039 --> 00:28:38,559
implementations of web servers but that

740
00:28:38,559 --> 00:28:40,880
doesn't mean that

741
00:28:40,880 --> 00:28:43,440
a client can just make up the same the

742
00:28:43,440 --> 00:28:46,000
uri and add a query parameter and then

743
00:28:46,000 --> 00:28:49,279
just hope that it means the same unless

744
00:28:49,279 --> 00:28:52,559
the server says otherwise

745
00:28:55,520 --> 00:28:56,640
okay

746
00:28:56,640 --> 00:28:58,640
it appears that the queue is closed

747
00:28:58,640 --> 00:29:00,159
marco so

748
00:29:00,159 --> 00:29:02,320
yes an interest of time

749
00:29:02,320 --> 00:29:03,440
yeah

750
00:29:03,440 --> 00:29:06,880
we are back right on time by the way

751
00:29:06,880 --> 00:29:08,240
okay

752
00:29:08,240 --> 00:29:11,200
so um so thank you um we will take that

753
00:29:11,200 --> 00:29:12,559
on board and then prepare the next

754
00:29:12,559 --> 00:29:15,120
version and um

755
00:29:15,120 --> 00:29:18,720
um we'll take this the mailing list

756
00:29:18,720 --> 00:29:21,120
perhaps the next interim as well

757
00:29:21,120 --> 00:29:22,640
what's your timeline for the next

758
00:29:22,640 --> 00:29:24,399
version

759
00:29:24,399 --> 00:29:26,240
as soon as the uh

760
00:29:26,240 --> 00:29:28,240
the queues open

761
00:29:28,240 --> 00:29:30,320
i think i'll put in the next one so this

762
00:29:30,320 --> 00:29:32,399
is now um

763
00:29:32,399 --> 00:29:34,640
i think zero three will be will be

764
00:29:34,640 --> 00:29:36,559
perhaps latest at the before the next

765
00:29:36,559 --> 00:29:38,799
interview meeting hopefully i can i can

766
00:29:38,799 --> 00:29:41,120
come then present the next one

767
00:29:41,120 --> 00:29:43,919
that'd be great it's the 7th of april by

768
00:29:43,919 --> 00:29:44,960
the way

769
00:29:44,960 --> 00:29:47,360
very good one month

770
00:29:47,360 --> 00:29:50,479
thank you sticking now

771
00:29:51,600 --> 00:29:53,120
thank you very much

772
00:29:53,120 --> 00:29:55,840
thank you

773
00:29:57,600 --> 00:29:58,640
okay

774
00:29:58,640 --> 00:30:01,840
so we are exactly back on time again and

775
00:30:01,840 --> 00:30:02,720
the

776
00:30:02,720 --> 00:30:04,960
next presentation is group combis from

777
00:30:04,960 --> 00:30:07,960
esco

778
00:30:16,720 --> 00:30:20,600
please go ahead let's go

779
00:30:26,640 --> 00:30:28,880
so

780
00:30:28,960 --> 00:30:30,799
hi marco good to see you and and

781
00:30:30,799 --> 00:30:33,760
everyone else in the audience uh

782
00:30:33,760 --> 00:30:37,120
yeah i hope to be uh yeah at the future

783
00:30:37,120 --> 00:30:38,880
my itf meeting

784
00:30:38,880 --> 00:30:40,480
at least uh

785
00:30:40,480 --> 00:30:42,960
one more one more time or

786
00:30:42,960 --> 00:30:45,279
multiple times but we'll see

787
00:30:45,279 --> 00:30:47,279
so this is their presentation about

788
00:30:47,279 --> 00:30:49,520
communication for co-op

789
00:30:49,520 --> 00:30:52,960
the group called this draft

790
00:30:53,520 --> 00:30:55,520
yeah what i will do is show some

791
00:30:55,520 --> 00:30:56,880
examples of

792
00:30:56,880 --> 00:31:00,720
recently added contents here

793
00:31:00,720 --> 00:31:02,640
so i assume that everyone is roughly

794
00:31:02,640 --> 00:31:05,200
familiar with the topic of the draft so

795
00:31:05,200 --> 00:31:06,720
it's basically

796
00:31:06,720 --> 00:31:09,360
a normative draft that specified how to

797
00:31:09,360 --> 00:31:11,519
do group communication

798
00:31:11,519 --> 00:31:13,039
in co-op and

799
00:31:13,039 --> 00:31:15,840
adding basically adding more content to

800
00:31:15,840 --> 00:31:18,559
what was described in the original code

801
00:31:18,559 --> 00:31:20,399
rfc

802
00:31:20,399 --> 00:31:24,159
also particularly security is also added

803
00:31:24,159 --> 00:31:25,039
using

804
00:31:25,039 --> 00:31:27,919
group oscar

805
00:31:29,519 --> 00:31:31,279
all right so i'll

806
00:31:31,279 --> 00:31:32,960
tell you about what happened so after

807
00:31:32,960 --> 00:31:35,200
the last itf meeting and the

808
00:31:35,200 --> 00:31:37,279
interim meeting

809
00:31:37,279 --> 00:31:41,120
we did a lot of work in adding examples

810
00:31:41,120 --> 00:31:43,600
there were also two open

811
00:31:43,600 --> 00:31:46,240
github issues for that so the examples

812
00:31:46,240 --> 00:31:47,679
we added are

813
00:31:47,679 --> 00:31:49,840
for uh basically how to encode an

814
00:31:49,840 --> 00:31:52,000
application group name within the co-op

815
00:31:52,000 --> 00:31:54,559
request to make that more clear

816
00:31:54,559 --> 00:31:56,159
and also for the discovery there were

817
00:31:56,159 --> 00:31:58,080
some clarities about that so how to

818
00:31:58,080 --> 00:31:59,440
discover

819
00:31:59,440 --> 00:32:02,159
co-op groups and application groups

820
00:32:02,159 --> 00:32:04,080
directly on the co-op service so if you

821
00:32:04,080 --> 00:32:05,679
don't have a resource directory

822
00:32:05,679 --> 00:32:08,720
available but you just want to do it

823
00:32:08,720 --> 00:32:10,799
using co-op discovery how would you go

824
00:32:10,799 --> 00:32:12,240
about that so

825
00:32:12,240 --> 00:32:15,519
that's kind of illustrated with examples

826
00:32:15,519 --> 00:32:17,360
basically a lot of this is application

827
00:32:17,360 --> 00:32:20,080
specific but it's good to uh

828
00:32:20,080 --> 00:32:23,039
have examples for that but you know

829
00:32:23,039 --> 00:32:25,039
yeah approximately what what what you

830
00:32:25,039 --> 00:32:26,640
can expect there

831
00:32:26,640 --> 00:32:28,720
also new appendix was added so these are

832
00:32:28,720 --> 00:32:30,320
message exchanges for group

833
00:32:30,320 --> 00:32:33,360
communication just showing typical uh

834
00:32:33,360 --> 00:32:34,240
yeah

835
00:32:34,240 --> 00:32:35,679
group communication

836
00:32:35,679 --> 00:32:37,519
flows

837
00:32:37,519 --> 00:32:39,440
like a basic one

838
00:32:39,440 --> 00:32:42,080
one with observe and one with block wise

839
00:32:42,080 --> 00:32:44,559
transfer

840
00:32:45,279 --> 00:32:47,600
second bullet is here a particular

841
00:32:47,600 --> 00:32:50,640
change we made was of removing the uri

842
00:32:50,640 --> 00:32:52,240
host option

843
00:32:52,240 --> 00:32:54,320
to encode a group name

844
00:32:54,320 --> 00:32:56,880
so we initially added it because of a

845
00:32:56,880 --> 00:32:59,760
comment in an earlier itef meeting

846
00:32:59,760 --> 00:33:03,600
but uh yeah this gave some confusion uh

847
00:33:03,600 --> 00:33:05,840
and yeah if you want to resolve that it

848
00:33:05,840 --> 00:33:08,320
becomes very complex so we decided to

849
00:33:08,320 --> 00:33:11,600
just remove it it was a kind of uh

850
00:33:11,600 --> 00:33:14,080
yeah creative use of an existing option

851
00:33:14,080 --> 00:33:16,320
to do something else so that we thought

852
00:33:16,320 --> 00:33:19,120
well let's not encourage that

853
00:33:19,120 --> 00:33:21,120
particular usage so it's better to just

854
00:33:21,120 --> 00:33:23,360
remove it here

855
00:33:23,360 --> 00:33:26,000
uh also a lot of text and editorial

856
00:33:26,000 --> 00:33:28,240
improvements were done and

857
00:33:28,240 --> 00:33:32,399
now all the open issues are closed

858
00:33:34,559 --> 00:33:36,960
so next is to show some examples from

859
00:33:36,960 --> 00:33:40,720
the new version six draft

860
00:33:40,720 --> 00:33:42,399
so what we have now

861
00:33:42,399 --> 00:33:44,480
so this is example for section two to

862
00:33:44,480 --> 00:33:47,039
one so that's about name encoding of

863
00:33:47,039 --> 00:33:49,360
application groups

864
00:33:49,360 --> 00:33:51,279
and here you see a yellow

865
00:33:51,279 --> 00:33:53,360
mark this application group name and how

866
00:33:53,360 --> 00:33:55,600
it is encoded in

867
00:33:55,600 --> 00:33:56,720
yeah

868
00:33:56,720 --> 00:33:59,760
co-op request in the uri

869
00:33:59,760 --> 00:34:04,480
and in the actual co-op message options

870
00:34:04,480 --> 00:34:06,720
and yeah the second box

871
00:34:06,720 --> 00:34:10,000
is a second example of the same thing

872
00:34:10,000 --> 00:34:12,159
a little bit more uh compact

873
00:34:12,159 --> 00:34:15,839
carbon pressed in this case

874
00:34:16,879 --> 00:34:18,719
so that's pretty straightforward there

875
00:34:18,719 --> 00:34:21,679
are more examples in the draft

876
00:34:21,679 --> 00:34:24,320
i will now move to the next

877
00:34:24,320 --> 00:34:26,320
slide so it's for another section about

878
00:34:26,320 --> 00:34:28,320
discovery

879
00:34:28,320 --> 00:34:30,399
so this was the discovery without

880
00:34:30,399 --> 00:34:34,598
resource directory that i mentioned

881
00:34:34,719 --> 00:34:35,839
and

882
00:34:35,839 --> 00:34:37,599
the idea here is in this example that

883
00:34:37,599 --> 00:34:40,800
you have as input co-op group that's a

884
00:34:40,800 --> 00:34:41,760
known

885
00:34:41,760 --> 00:34:44,159
entity also marked in red

886
00:34:44,159 --> 00:34:46,800
and a client now wants to discover what

887
00:34:46,800 --> 00:34:49,359
are the associated application groups

888
00:34:49,359 --> 00:34:51,599
to this and what servers

889
00:34:51,599 --> 00:34:54,159
are in it

890
00:34:54,159 --> 00:34:56,079
yeah basically and also discover the

891
00:34:56,079 --> 00:34:59,599
resources that belong to that group

892
00:34:59,599 --> 00:35:01,280
so what you can see here on the in the

893
00:35:01,280 --> 00:35:03,599
box an example is that the request is

894
00:35:03,599 --> 00:35:05,520
sent to the group

895
00:35:05,520 --> 00:35:08,560
with a query looking for specific

896
00:35:08,560 --> 00:35:10,400
resource types

897
00:35:10,400 --> 00:35:12,480
that denote a group

898
00:35:12,480 --> 00:35:14,640
so that's in this application specific

899
00:35:14,640 --> 00:35:17,680
example that's the g dot something is

900
00:35:17,680 --> 00:35:19,760
the resource type for a group

901
00:35:19,760 --> 00:35:21,920
and as you can see two servers are

902
00:35:21,920 --> 00:35:23,440
returning

903
00:35:23,440 --> 00:35:26,560
responding basically with their groups

904
00:35:26,560 --> 00:35:27,599
and

905
00:35:27,599 --> 00:35:29,280
marking a particular

906
00:35:29,280 --> 00:35:31,599
type of group

907
00:35:31,599 --> 00:35:34,160
so basically this is discovering the

908
00:35:34,160 --> 00:35:36,560
the likes like you say the entry or the

909
00:35:36,560 --> 00:35:39,760
root resource of the group

910
00:35:39,760 --> 00:35:42,560
if the client wants to do more resource

911
00:35:42,560 --> 00:35:44,240
discoveries of what are the resources

912
00:35:44,240 --> 00:35:45,680
within that group we can just do a

913
00:35:45,680 --> 00:35:48,640
second request that's not shown here

914
00:35:48,640 --> 00:35:50,880
but to get more details okay what are

915
00:35:50,880 --> 00:35:53,119
the resources within a particular group

916
00:35:53,119 --> 00:35:56,079
that are supported

917
00:35:57,440 --> 00:35:59,200
all right then

918
00:35:59,200 --> 00:36:01,359
moving to the next example so it was the

919
00:36:01,359 --> 00:36:02,550
appendix that

920
00:36:02,550 --> 00:36:03,839
[Music]

921
00:36:03,839 --> 00:36:05,920
was added about message exchange this

922
00:36:05,920 --> 00:36:10,480
shows a basic example so a client

923
00:36:10,480 --> 00:36:13,520
sends a multicast co-op request to a b

924
00:36:13,520 --> 00:36:15,200
and c

925
00:36:15,200 --> 00:36:17,839
and all of those respond with the

926
00:36:17,839 --> 00:36:21,119
unicast response one of them is lost

927
00:36:21,119 --> 00:36:23,599
and there's kind of a special twist in

928
00:36:23,599 --> 00:36:25,520
here in this example you can see that

929
00:36:25,520 --> 00:36:27,599
client c is responding from a different

930
00:36:27,599 --> 00:36:31,119
port that is just to illustrate that

931
00:36:31,119 --> 00:36:33,839
yeah this is kind of allowed behavior

932
00:36:33,839 --> 00:36:37,280
that's specified by co-op so for

933
00:36:37,280 --> 00:36:39,760
yeah these multicast requests the

934
00:36:39,760 --> 00:36:42,560
source port of the responding server is

935
00:36:42,560 --> 00:36:44,000
actually not

936
00:36:44,000 --> 00:36:46,320
not used in the matching

937
00:36:46,320 --> 00:36:48,079
request to responses that happens in

938
00:36:48,079 --> 00:36:49,440
clients so the

939
00:36:49,440 --> 00:36:52,960
server could use a different source port

940
00:36:52,960 --> 00:36:55,839
as is shown in this case

941
00:36:58,720 --> 00:37:00,240
okay and there's more

942
00:37:00,240 --> 00:37:02,720
examples so i'll show uh one more that's

943
00:37:02,720 --> 00:37:06,880
with a more advanced example much longer

944
00:37:06,880 --> 00:37:09,200
so this is the blockwise option you can

945
00:37:09,200 --> 00:37:12,240
see that in yellow so there is a block

946
00:37:12,240 --> 00:37:14,880
option in the request and also

947
00:37:14,880 --> 00:37:16,400
in the responses so you can see the

948
00:37:16,400 --> 00:37:18,880
servers all supported and

949
00:37:18,880 --> 00:37:21,040
we'll send back the first block of the

950
00:37:21,040 --> 00:37:22,800
resource that's being requested in this

951
00:37:22,800 --> 00:37:24,720
case it's a log resource so you can

952
00:37:24,720 --> 00:37:26,320
expect that it can be

953
00:37:26,320 --> 00:37:28,880
rather big

954
00:37:30,480 --> 00:37:31,920
on the next slide

955
00:37:31,920 --> 00:37:34,640
that example continues so

956
00:37:34,640 --> 00:37:36,240
now the first block is in so what does

957
00:37:36,240 --> 00:37:37,520
the client do

958
00:37:37,520 --> 00:37:39,599
the client will basically use unicast

959
00:37:39,599 --> 00:37:41,760
clockwise transfer to

960
00:37:41,760 --> 00:37:43,359
basically go to each

961
00:37:43,359 --> 00:37:45,359
of the servers and then

962
00:37:45,359 --> 00:37:47,200
fetch the rest of the resource that's

963
00:37:47,200 --> 00:37:48,960
also shown here

964
00:37:48,960 --> 00:37:53,440
this is all uh content coming from a

965
00:37:53,440 --> 00:37:56,000
and then the example continues we'll go

966
00:37:56,000 --> 00:37:57,359
to the next

967
00:37:57,359 --> 00:37:59,760
next slide and it's the same for b so

968
00:37:59,760 --> 00:38:01,680
from b also the

969
00:38:01,680 --> 00:38:04,880
content is fetched

970
00:38:04,880 --> 00:38:06,880
so for details you can also look look in

971
00:38:06,880 --> 00:38:09,119
the draft

972
00:38:09,119 --> 00:38:10,720
and this basically concludes what i

973
00:38:10,720 --> 00:38:12,120
wanted to show here

974
00:38:12,120 --> 00:38:13,760
[Music]

975
00:38:13,760 --> 00:38:15,920
one more thing that's the next step so

976
00:38:15,920 --> 00:38:19,200
we don't have any current updates

977
00:38:19,200 --> 00:38:21,839
planned all the issues are closed and so

978
00:38:21,839 --> 00:38:23,680
that's why we think it's now ready for

979
00:38:23,680 --> 00:38:25,119
the working group

980
00:38:25,119 --> 00:38:27,440
last call to be done at some point for

981
00:38:27,440 --> 00:38:29,200
this version

982
00:38:29,200 --> 00:38:31,359
zero six but if there are any more

983
00:38:31,359 --> 00:38:33,680
issues found of course before that we're

984
00:38:33,680 --> 00:38:37,598
happy to to work on that as well

985
00:38:38,480 --> 00:38:42,760
okay thanks any questions

986
00:38:56,560 --> 00:38:58,560
so there was one

987
00:38:58,560 --> 00:39:01,520
observation on the chat that maybe ui

988
00:39:01,520 --> 00:39:03,200
ui host

989
00:39:03,200 --> 00:39:04,720
wasn't as

990
00:39:04,720 --> 00:39:05,839
bad

991
00:39:05,839 --> 00:39:10,400
so can you maybe quickly recap

992
00:39:10,400 --> 00:39:14,720
why why this leads to complications

993
00:39:14,720 --> 00:39:16,320
yeah i think the the

994
00:39:16,320 --> 00:39:19,119
point was the uri host option is also

995
00:39:19,119 --> 00:39:20,640
related

996
00:39:20,640 --> 00:39:22,640
to the parsing algorithm that co-op

997
00:39:22,640 --> 00:39:25,440
defines so you get this input

998
00:39:25,440 --> 00:39:27,359
uri basically

999
00:39:27,359 --> 00:39:30,240
and as output of the parsing you get

1000
00:39:30,240 --> 00:39:31,680
multiple

1001
00:39:31,680 --> 00:39:34,110
co-op options

1002
00:39:34,110 --> 00:39:36,160
[Music]

1003
00:39:36,160 --> 00:39:38,640
so the the argument for

1004
00:39:38,640 --> 00:39:40,839
for including an application group was

1005
00:39:40,839 --> 00:39:43,599
that um

1006
00:39:43,599 --> 00:39:46,160
basically you do not include it in the

1007
00:39:46,160 --> 00:39:47,920
group uri

1008
00:39:47,920 --> 00:39:50,880
but after the parsing you you add in the

1009
00:39:50,880 --> 00:39:53,440
uri host you added additionally so it's

1010
00:39:53,440 --> 00:39:55,760
not included in group uri and that's

1011
00:39:55,760 --> 00:39:58,240
that's that's obvious

1012
00:39:58,240 --> 00:39:59,839
yeah that's kind of

1013
00:39:59,839 --> 00:40:02,079
changing the yeah like changing the

1014
00:40:02,079 --> 00:40:04,720
parsing algorithm almost there or

1015
00:40:04,720 --> 00:40:06,319
yeah doing something

1016
00:40:06,319 --> 00:40:08,640
after that and that's

1017
00:40:08,640 --> 00:40:09,680
yeah

1018
00:40:09,680 --> 00:40:11,599
okay let's take it off

1019
00:40:11,599 --> 00:40:14,560
it gave so many discussions that yeah

1020
00:40:14,560 --> 00:40:16,400
it's maybe best not not to mention it at

1021
00:40:16,400 --> 00:40:17,760
all uh

1022
00:40:17,760 --> 00:40:19,680
i mean why why would it doesn't really

1023
00:40:19,680 --> 00:40:22,240
help then

1024
00:40:23,359 --> 00:40:25,839
okay christian i can't stand here so for

1025
00:40:25,839 --> 00:40:28,400
clarification the the way of

1026
00:40:28,400 --> 00:40:30,640
naming the group just with the uri host

1027
00:40:30,640 --> 00:40:32,160
is still fine as long as it's just in

1028
00:40:32,160 --> 00:40:33,839
the group uri so if it's in the group

1029
00:40:33,839 --> 00:40:36,960
uri that's a way of naming it but not

1030
00:40:36,960 --> 00:40:38,880
adding it like

1031
00:40:38,880 --> 00:40:41,040
sideways okay thank you yeah that's

1032
00:40:41,040 --> 00:40:43,440
still allowed yeah but then it's uh also

1033
00:40:43,440 --> 00:40:45,680
um because it's in the authority

1034
00:40:45,680 --> 00:40:48,319
component it becomes the co-op group

1035
00:40:48,319 --> 00:40:49,520
also

1036
00:40:49,520 --> 00:40:50,800
so that means in that case the

1037
00:40:50,800 --> 00:40:52,880
application group and the co-op group

1038
00:40:52,880 --> 00:40:54,720
are one of the same and they are

1039
00:40:54,720 --> 00:40:57,280
identified by the same

1040
00:40:57,280 --> 00:41:00,240
information item basically

1041
00:41:00,240 --> 00:41:00,960
so

1042
00:41:00,960 --> 00:41:03,280
that's that's the point and we wanted to

1043
00:41:03,280 --> 00:41:04,880
to basically encode a different

1044
00:41:04,880 --> 00:41:07,520
application group name

1045
00:41:07,520 --> 00:41:09,520
in the uri host option so that's what

1046
00:41:09,520 --> 00:41:11,599
makes it confusing

1047
00:41:11,599 --> 00:41:13,359
actually yeah

1048
00:41:13,359 --> 00:41:15,598
okay

1049
00:41:18,240 --> 00:41:21,560
okay thanks

1050
00:41:23,040 --> 00:41:25,759
thank you oscar

1051
00:41:25,839 --> 00:41:28,160
any uh reaction from the chair so what

1052
00:41:28,160 --> 00:41:30,640
do we do

1053
00:41:31,040 --> 00:41:35,800
i leave this to kirsten of course yes

1054
00:41:56,640 --> 00:41:58,480
so did you want me to say something

1055
00:41:58,480 --> 00:42:00,880
about that

1056
00:42:01,680 --> 00:42:03,440
yeah we will leave to you about the

1057
00:42:03,440 --> 00:42:06,800
concrete next step to take if you think

1058
00:42:06,800 --> 00:42:08,800
this is a problem right now

1059
00:42:08,800 --> 00:42:11,680
well i to me it seems that we we are

1060
00:42:11,680 --> 00:42:13,920
ready for a new place for it

1061
00:42:13,920 --> 00:42:17,040
so that without people to the fact that

1062
00:42:17,040 --> 00:42:19,359
this spec is done and they should be

1063
00:42:19,359 --> 00:42:21,040
reading it

1064
00:42:21,040 --> 00:42:21,920
so

1065
00:42:21,920 --> 00:42:25,760
that sounds like a good next step to me

1066
00:42:28,839 --> 00:42:32,160
okay you

1067
00:42:34,480 --> 00:42:36,720
okay uh next presentation is group of

1068
00:42:36,720 --> 00:42:39,119
score and it's on me so carson if you

1069
00:42:39,119 --> 00:42:42,400
can drive the slides

1070
00:42:42,480 --> 00:42:44,800
that'd be good at least i moved to the

1071
00:42:44,800 --> 00:42:47,520
presenter mic

1072
00:42:50,640 --> 00:42:52,480
the amount of mouse movement that is

1073
00:42:52,480 --> 00:42:54,480
needed to do that it's

1074
00:42:54,480 --> 00:42:58,270
amazing one second

1075
00:42:58,270 --> 00:43:01,200
[Music]

1076
00:43:01,200 --> 00:43:03,119
hey do you see them are these those

1077
00:43:03,119 --> 00:43:04,000
sides

1078
00:43:04,000 --> 00:43:05,520
yes thank you

1079
00:43:05,520 --> 00:43:07,839
okay this is marco uh this is an update

1080
00:43:07,839 --> 00:43:09,599
on the latest version of the drupal

1081
00:43:09,599 --> 00:43:11,200
score document

1082
00:43:11,200 --> 00:43:13,839
next slide please

1083
00:43:15,920 --> 00:43:18,400
right the document underwent

1084
00:43:18,400 --> 00:43:20,800
a second working row plus call and based

1085
00:43:20,800 --> 00:43:23,359
on that we submitted version 14 wait for

1086
00:43:23,359 --> 00:43:26,400
the cutoff and this was based on two

1087
00:43:26,400 --> 00:43:29,839
reviews um we got during the last call

1088
00:43:29,839 --> 00:43:32,480
uh from esko and rickard thank you very

1089
00:43:32,480 --> 00:43:33,920
much indeed for that

1090
00:43:33,920 --> 00:43:36,640
there were very good comments and escos

1091
00:43:36,640 --> 00:43:40,720
came uh first in two parts uh the the

1092
00:43:40,720 --> 00:43:42,480
main actual comments followed by a

1093
00:43:42,480 --> 00:43:44,800
separate mail with editorial needs

1094
00:43:44,800 --> 00:43:46,480
so we worked on those first and we're

1095
00:43:46,480 --> 00:43:49,680
also objective discussion at an interim

1096
00:43:49,680 --> 00:43:53,280
and rica reviews uh instead came on the

1097
00:43:53,280 --> 00:43:56,000
editor's copy produced

1098
00:43:56,000 --> 00:43:58,400
from processing esco's review which was

1099
00:43:58,400 --> 00:44:02,480
very convenient to finalize the document

1100
00:44:02,480 --> 00:44:05,200
next slide please

1101
00:44:06,319 --> 00:44:08,960
so this is a summary of the uh main

1102
00:44:08,960 --> 00:44:11,680
comments from esko's review that we uh

1103
00:44:11,680 --> 00:44:13,359
addressed uh

1104
00:44:13,359 --> 00:44:14,079
in

1105
00:44:14,079 --> 00:44:15,920
through different incremental steps so

1106
00:44:15,920 --> 00:44:18,319
there was first a proposal of overall

1107
00:44:18,319 --> 00:44:20,720
direction to take on those on the list

1108
00:44:20,720 --> 00:44:22,960
uh the most controversial delicate

1109
00:44:22,960 --> 00:44:25,200
points were discussed at the cone

1110
00:44:25,200 --> 00:44:28,000
interim and it's basically those

1111
00:44:28,000 --> 00:44:29,760
listed here

1112
00:44:29,760 --> 00:44:32,160
so we enforce the clear-cut distinction

1113
00:44:32,160 --> 00:44:34,079
between authentication credential and

1114
00:44:34,079 --> 00:44:35,920
public key in terms of terminology and

1115
00:44:35,920 --> 00:44:37,520
phrasing around those

1116
00:44:37,520 --> 00:44:38,319
uh

1117
00:44:38,319 --> 00:44:39,839
and then it was also a point about

1118
00:44:39,839 --> 00:44:42,000
clarifying the trade-off between uh

1119
00:44:42,000 --> 00:44:44,720
storage over and convenience for for

1120
00:44:44,720 --> 00:44:46,160
storing uh whole authentication

1121
00:44:46,160 --> 00:44:47,599
credentials

1122
00:44:47,599 --> 00:44:48,640
uh

1123
00:44:48,640 --> 00:44:51,119
one very delicate point was about making

1124
00:44:51,119 --> 00:44:53,760
uh optional the feature at the group

1125
00:44:53,760 --> 00:44:57,040
manager to recycle group ideas so that

1126
00:44:57,040 --> 00:44:58,800
a group can

1127
00:44:58,800 --> 00:45:00,800
live forever in principle still in a

1128
00:45:00,800 --> 00:45:02,160
safe way

1129
00:45:02,160 --> 00:45:05,200
and there was especially important to

1130
00:45:05,200 --> 00:45:08,079
well confined uh this optional feature

1131
00:45:08,079 --> 00:45:10,640
in in a very self-contained section so

1132
00:45:10,640 --> 00:45:12,720
that it was clear to be

1133
00:45:12,720 --> 00:45:14,319
uh something optional for the group

1134
00:45:14,319 --> 00:45:15,280
manager

1135
00:45:15,280 --> 00:45:16,560
to support

1136
00:45:16,560 --> 00:45:17,599
so that's

1137
00:45:17,599 --> 00:45:20,319
all the case now and exactly about these

1138
00:45:20,319 --> 00:45:22,240
point uh there was a further

1139
00:45:22,240 --> 00:45:25,440
confirmation um on the list

1140
00:45:25,440 --> 00:45:27,200
and finally a number of points related

1141
00:45:27,200 --> 00:45:30,240
to what was uh mandatory to implement

1142
00:45:30,240 --> 00:45:32,319
support and whatnot

1143
00:45:32,319 --> 00:45:34,400
rearrangement of references to be

1144
00:45:34,400 --> 00:45:37,359
appropriately normative or informative

1145
00:45:37,359 --> 00:45:40,240
as the text uh citing those

1146
00:45:40,240 --> 00:45:41,359
um

1147
00:45:41,359 --> 00:45:43,599
and the yak option used for uh

1148
00:45:43,599 --> 00:45:45,040
synchronization of sequence number three

1149
00:45:45,040 --> 00:45:47,680
challenge response moved up to the

1150
00:45:47,680 --> 00:45:49,839
document body

1151
00:45:49,839 --> 00:45:53,359
you find more pointers in in the slide

1152
00:45:53,359 --> 00:45:56,160
next slide please

1153
00:45:57,520 --> 00:45:59,440
yeah and this is actually it we believe

1154
00:45:59,440 --> 00:46:01,119
that the latest version of the data

1155
00:46:01,119 --> 00:46:02,640
tracker uh

1156
00:46:02,640 --> 00:46:05,040
well addresses uh the working classical

1157
00:46:05,040 --> 00:46:06,960
reviews and we had actually

1158
00:46:06,960 --> 00:46:09,760
confirmations about that on the list

1159
00:46:09,760 --> 00:46:12,240
uh we are not aware of any other open

1160
00:46:12,240 --> 00:46:16,319
point or or issue specifically on github

1161
00:46:16,319 --> 00:46:18,480
so we think the work on this document is

1162
00:46:18,480 --> 00:46:20,960
actually done for a working group and

1163
00:46:20,960 --> 00:46:22,160
that it

1164
00:46:22,160 --> 00:46:24,319
can proceed with the next step meaning

1165
00:46:24,319 --> 00:46:26,240
the shepherd write up

1166
00:46:26,240 --> 00:46:29,119
in after uh some discussion we

1167
00:46:29,119 --> 00:46:31,200
we found out that christian amsas is

1168
00:46:31,200 --> 00:46:33,440
available to uh act as shepherd for this

1169
00:46:33,440 --> 00:46:37,359
document that we really appreciate

1170
00:46:38,079 --> 00:46:41,119
and that's all from my side thank you

1171
00:46:41,119 --> 00:46:43,040
so one quick question

1172
00:46:43,040 --> 00:46:46,160
um what is the web of normative

1173
00:46:46,160 --> 00:46:48,800
references you are enchanted in

1174
00:46:48,800 --> 00:46:52,400
it is group combis and the cozy

1175
00:46:52,400 --> 00:46:56,319
documents that hopefully will be uh

1176
00:46:56,319 --> 00:46:58,720
uh yeah published anytime soon they are

1177
00:46:58,720 --> 00:47:01,280
not 48 for a while now

1178
00:47:01,280 --> 00:47:03,440
but except those if i remember correctly

1179
00:47:03,440 --> 00:47:05,680
it's only grouped on this and well those

1180
00:47:05,680 --> 00:47:07,440
documents have to proceed in parallel

1181
00:47:07,440 --> 00:47:09,119
anyway because they are

1182
00:47:09,119 --> 00:47:11,280
mutually referring each other

1183
00:47:11,280 --> 00:47:14,400
okay great thank you

1184
00:47:17,839 --> 00:47:19,440
okay there's no other

1185
00:47:19,440 --> 00:47:21,920
question or comment

1186
00:47:21,920 --> 00:47:24,160
i think we are done with this topic

1187
00:47:24,160 --> 00:47:26,480
thank you

1188
00:47:33,599 --> 00:47:34,800
okay

1189
00:47:34,800 --> 00:47:38,640
and the next presentation is about kudos

1190
00:47:38,640 --> 00:47:41,520
from ricard

1191
00:47:42,640 --> 00:47:44,640
and from now on all presenters are on

1192
00:47:44,640 --> 00:47:45,760
site

1193
00:47:45,760 --> 00:47:49,000
by the way

1194
00:48:00,800 --> 00:48:03,599
so you you do this slides no i got those

1195
00:48:03,599 --> 00:48:05,680
slides yes i will share them here from

1196
00:48:05,680 --> 00:48:06,640
the

1197
00:48:06,640 --> 00:48:08,960
phone

1198
00:48:09,040 --> 00:48:10,160
version

1199
00:48:10,160 --> 00:48:12,480
yes

1200
00:48:18,800 --> 00:48:21,800
okay

1201
00:48:23,359 --> 00:48:25,680
go ahead yes thank you right so i will

1202
00:48:25,680 --> 00:48:28,319
be presenting this draft today key

1203
00:48:28,319 --> 00:48:31,520
update for overscore kudos and uh yes my

1204
00:48:31,520 --> 00:48:34,000
name is riker herglund

1205
00:48:34,000 --> 00:48:35,920
so

1206
00:48:35,920 --> 00:48:38,079
yes as a content recap of what this

1207
00:48:38,079 --> 00:48:41,280
draft actually contains

1208
00:48:41,280 --> 00:48:43,520
it has

1209
00:48:43,520 --> 00:48:45,920
basically two parts and

1210
00:48:45,920 --> 00:48:49,040
the general challenge is that oscor uses

1211
00:48:49,040 --> 00:48:52,559
these aad algorithms to provide security

1212
00:48:52,559 --> 00:48:54,880
and in order to do things securely you

1213
00:48:54,880 --> 00:48:56,800
need to follow a number of limits when

1214
00:48:56,800 --> 00:48:58,640
it comes to number of encryptions and

1215
00:48:58,640 --> 00:49:00,240
failed decryptions before you have to

1216
00:49:00,240 --> 00:49:01,520
rekey

1217
00:49:01,520 --> 00:49:03,680
the keys that you use for

1218
00:49:03,680 --> 00:49:06,079
message processing because excessive use

1219
00:49:06,079 --> 00:49:07,760
of the same key can enable breaking

1220
00:49:07,760 --> 00:49:09,680
security properties of the aea the

1221
00:49:09,680 --> 00:49:11,920
algorithms and there's a reference to a

1222
00:49:11,920 --> 00:49:14,000
document in cfrd

1223
00:49:14,000 --> 00:49:16,319
at the bottom right where you can look

1224
00:49:16,319 --> 00:49:18,000
more into this and

1225
00:49:18,000 --> 00:49:19,920
so essentially this draft has two parts

1226
00:49:19,920 --> 00:49:22,079
the first part is about the aad key

1227
00:49:22,079 --> 00:49:24,880
usage limits in os core where we define

1228
00:49:24,880 --> 00:49:27,440
appropriate limits frost core for a

1229
00:49:27,440 --> 00:49:29,760
variety of algorithms

1230
00:49:29,760 --> 00:49:31,200
and this basically means that when these

1231
00:49:31,200 --> 00:49:32,880
limits are reached

1232
00:49:32,880 --> 00:49:34,880
you have to rekey

1233
00:49:34,880 --> 00:49:35,680
um

1234
00:49:35,680 --> 00:49:37,359
the keys that you're using and we also

1235
00:49:37,359 --> 00:49:39,040
define like how can you practically have

1236
00:49:39,040 --> 00:49:41,599
a counter for the key usage how do you

1237
00:49:41,599 --> 00:49:43,359
change the message processing compared

1238
00:49:43,359 --> 00:49:45,280
to vanilla score

1239
00:49:45,280 --> 00:49:46,720
and what steps then should you take when

1240
00:49:46,720 --> 00:49:48,800
the limits are reached and the recent

1241
00:49:48,800 --> 00:49:51,440
update here was that we recommended a

1242
00:49:51,440 --> 00:49:54,800
new set of values for the qv and l

1243
00:49:54,800 --> 00:49:57,920
for the as128 ccm8 because that has to

1244
00:49:57,920 --> 00:49:59,280
be

1245
00:49:59,280 --> 00:50:01,440
handled separately from the other

1246
00:50:01,440 --> 00:50:04,000
algorithms since there the limits

1247
00:50:04,000 --> 00:50:05,359
has to be lower basically to get

1248
00:50:05,359 --> 00:50:06,800
acceptable

1249
00:50:06,800 --> 00:50:09,839
probabilities for um

1250
00:50:09,839 --> 00:50:11,680
security

1251
00:50:11,680 --> 00:50:13,760
but today the main focus will really be

1252
00:50:13,760 --> 00:50:15,839
about the key update for our score

1253
00:50:15,839 --> 00:50:17,200
procedure

1254
00:50:17,200 --> 00:50:18,880
and this is a procedure that's loosely

1255
00:50:18,880 --> 00:50:22,319
inspired by the appendix p2 of os core

1256
00:50:22,319 --> 00:50:24,559
and the goal is basically that well when

1257
00:50:24,559 --> 00:50:26,480
you reach this limits then what you want

1258
00:50:26,480 --> 00:50:28,240
to do is renew the master seekers and

1259
00:50:28,240 --> 00:50:30,559
master salt and from those you want to

1260
00:50:30,559 --> 00:50:32,160
derive a new

1261
00:50:32,160 --> 00:50:34,559
sender recipient key

1262
00:50:34,559 --> 00:50:36,559
and one good thing about this

1263
00:50:36,559 --> 00:50:38,240
procedure is that you achieve forward

1264
00:50:38,240 --> 00:50:41,240
secrecy

1265
00:50:41,440 --> 00:50:44,160
and just as a recap on how this actual

1266
00:50:44,160 --> 00:50:45,680
procedure works

1267
00:50:45,680 --> 00:50:47,280
you can see here on the right hand side

1268
00:50:47,280 --> 00:50:50,400
the message flow but the general idea is

1269
00:50:50,400 --> 00:50:51,359
that

1270
00:50:51,359 --> 00:50:53,839
the client and server exchanges two

1271
00:50:53,839 --> 00:50:56,720
nonsense r1 and r2

1272
00:50:56,720 --> 00:50:58,559
and then you have this update ctek

1273
00:50:58,559 --> 00:51:00,640
function which takes this nonsense as

1274
00:51:00,640 --> 00:51:01,680
input

1275
00:51:01,680 --> 00:51:05,280
to generate a new score security context

1276
00:51:05,280 --> 00:51:06,400
and

1277
00:51:06,400 --> 00:51:08,640
but we also did we extended the oscar

1278
00:51:08,640 --> 00:51:10,960
option to have a place where we can

1279
00:51:10,960 --> 00:51:13,200
transport these nonsense

1280
00:51:13,200 --> 00:51:15,920
so now we have defined this bit d and

1281
00:51:15,920 --> 00:51:17,760
when that bit is set

1282
00:51:17,760 --> 00:51:20,240
there is an id detail field added to

1283
00:51:20,240 --> 00:51:21,680
those corruption

1284
00:51:21,680 --> 00:51:23,359
so you have the id detail and you have x

1285
00:51:23,359 --> 00:51:25,040
which is the length of the id detail but

1286
00:51:25,040 --> 00:51:26,400
the purpose of the id detail is

1287
00:51:26,400 --> 00:51:28,400
essentially to carry these nonsense back

1288
00:51:28,400 --> 00:51:29,839
and forth

1289
00:51:29,839 --> 00:51:31,119
and you can see that also to the right

1290
00:51:31,119 --> 00:51:32,400
hand side that

1291
00:51:32,400 --> 00:51:36,520
the idea holds the nonsense

1292
00:51:38,240 --> 00:51:41,440
and now i go into a bit more detail on

1293
00:51:41,440 --> 00:51:43,359
updates that we did or additions that we

1294
00:51:43,359 --> 00:51:45,839
did from the latest

1295
00:51:45,839 --> 00:51:48,000
version of the draft so one thing we

1296
00:51:48,000 --> 00:51:50,640
added based on discussions and feedback

1297
00:51:50,640 --> 00:51:52,160
and also discussions on the core mailing

1298
00:51:52,160 --> 00:51:53,920
list is

1299
00:51:53,920 --> 00:51:55,920
a mode of kudos

1300
00:51:55,920 --> 00:51:59,520
where you do not have forward secrecy

1301
00:51:59,520 --> 00:52:01,760
and the point of this is that you need

1302
00:52:01,760 --> 00:52:04,240
to be able to support a stateless key

1303
00:52:04,240 --> 00:52:06,400
update because if some

1304
00:52:06,400 --> 00:52:08,480
device loses state like for instance due

1305
00:52:08,480 --> 00:52:09,920
to rebooting

1306
00:52:09,920 --> 00:52:11,680
and it cannot store information to

1307
00:52:11,680 --> 00:52:13,520
persistent memory which may be the case

1308
00:52:13,520 --> 00:52:15,599
for some constrained devices

1309
00:52:15,599 --> 00:52:17,680
it still needs to be able to run a key

1310
00:52:17,680 --> 00:52:19,920
update procedure

1311
00:52:19,920 --> 00:52:22,240
and the in fact the the original version

1312
00:52:22,240 --> 00:52:23,839
like the appendix p2 procedure that

1313
00:52:23,839 --> 00:52:26,400
oscar defines does support this

1314
00:52:26,400 --> 00:52:28,800
stateless mode of operation

1315
00:52:28,800 --> 00:52:30,559
so what we did here was we add an

1316
00:52:30,559 --> 00:52:32,720
extension to kudos basically that there

1317
00:52:32,720 --> 00:52:35,200
is now a way to by having yet another

1318
00:52:35,200 --> 00:52:37,200
bit this p bit you can indicate if you

1319
00:52:37,200 --> 00:52:39,280
want to run kudos in the mode with

1320
00:52:39,280 --> 00:52:41,359
forward secrecy or without forward

1321
00:52:41,359 --> 00:52:43,119
secrecy

1322
00:52:43,119 --> 00:52:45,119
so if this p bit is set to zero you run

1323
00:52:45,119 --> 00:52:47,040
it in forward secrecy mode

1324
00:52:47,040 --> 00:52:50,160
which is the original mode and um

1325
00:52:50,160 --> 00:52:52,559
if you are capable of writing to

1326
00:52:52,559 --> 00:52:54,559
persistent memory you should use the

1327
00:52:54,559 --> 00:52:56,640
forward secrecy mode so

1328
00:52:56,640 --> 00:52:58,559
it the the knob for a secret mode should

1329
00:52:58,559 --> 00:53:00,400
really only be used by devices that have

1330
00:53:00,400 --> 00:53:02,160
to use it because they cannot write to

1331
00:53:02,160 --> 00:53:05,118
persistent memory

1332
00:53:05,760 --> 00:53:07,760
yeah so if the b bit is set to one then

1333
00:53:07,760 --> 00:53:09,280
that is an indication you want to run

1334
00:53:09,280 --> 00:53:13,119
kudos in the no forward secrecy mode

1335
00:53:13,119 --> 00:53:14,880
and we defined some concepts related to

1336
00:53:14,880 --> 00:53:17,040
this so you have like two sets of key

1337
00:53:17,040 --> 00:53:18,319
material basically like you have the

1338
00:53:18,319 --> 00:53:20,319
latest master secret and latest master

1339
00:53:20,319 --> 00:53:21,200
salt

1340
00:53:21,200 --> 00:53:22,880
and this is the information from your

1341
00:53:22,880 --> 00:53:24,800
last most recently derived score

1342
00:53:24,800 --> 00:53:26,480
security context

1343
00:53:26,480 --> 00:53:28,240
and this you should store on disk if you

1344
00:53:28,240 --> 00:53:29,920
are capable to do so

1345
00:53:29,920 --> 00:53:31,599
then you also have the bootstrap master

1346
00:53:31,599 --> 00:53:33,280
seeker then bootstrap mesh assault and

1347
00:53:33,280 --> 00:53:35,200
this can be information that is pre

1348
00:53:35,200 --> 00:53:36,720
provisioned to the device at

1349
00:53:36,720 --> 00:53:39,040
manufacturing and this is information

1350
00:53:39,040 --> 00:53:40,480
that the device itself would never

1351
00:53:40,480 --> 00:53:43,480
change

1352
00:53:45,520 --> 00:53:47,920
right and

1353
00:53:47,920 --> 00:53:49,920
if you want to run kudos in the no

1354
00:53:49,920 --> 00:53:51,599
forward secrecy mode

1355
00:53:51,599 --> 00:53:53,680
basically what the difference between

1356
00:53:53,680 --> 00:53:55,040
the current

1357
00:53:55,040 --> 00:53:56,880
definition of kudos that we have is you

1358
00:53:56,880 --> 00:53:59,359
do this modification that the

1359
00:53:59,359 --> 00:54:01,599
security context uses input to derive

1360
00:54:01,599 --> 00:54:03,200
your new security context you simply

1361
00:54:03,200 --> 00:54:05,040
replace the master secret and master

1362
00:54:05,040 --> 00:54:06,640
salt in that with the bootstrap master

1363
00:54:06,640 --> 00:54:08,960
secret and bootstrap master salt

1364
00:54:08,960 --> 00:54:10,640
so your starting point is always this

1365
00:54:10,640 --> 00:54:12,960
bootstrap information

1366
00:54:12,960 --> 00:54:14,640
and because of that you sacrifice for a

1367
00:54:14,640 --> 00:54:16,640
secrecy but you still have all the other

1368
00:54:16,640 --> 00:54:19,599
properties for kudos remaining

1369
00:54:19,599 --> 00:54:20,880
and

1370
00:54:20,880 --> 00:54:23,040
now there is a way like for instance if

1371
00:54:23,040 --> 00:54:25,680
one device supports writing to disk and

1372
00:54:25,680 --> 00:54:27,119
the other device does not support

1373
00:54:27,119 --> 00:54:28,559
writing to disk well

1374
00:54:28,559 --> 00:54:30,400
the device that takes initiative if it

1375
00:54:30,400 --> 00:54:32,079
can write to disk it will try to run

1376
00:54:32,079 --> 00:54:34,880
kudos in the forward secrecy mode right

1377
00:54:34,880 --> 00:54:36,960
um so it couldn't be the case that the

1378
00:54:36,960 --> 00:54:38,640
initiator tries to run it in for a

1379
00:54:38,640 --> 00:54:40,640
secrecy mode but the responder is unable

1380
00:54:40,640 --> 00:54:41,920
to continue

1381
00:54:41,920 --> 00:54:43,680
because it cannot practically write to

1382
00:54:43,680 --> 00:54:46,480
disk so it cannot remember and store the

1383
00:54:46,480 --> 00:54:48,079
latest key material

1384
00:54:48,079 --> 00:54:49,920
but in this case we have this agreed

1385
00:54:49,920 --> 00:54:53,920
downgrading of mode so basically if the

1386
00:54:53,920 --> 00:54:55,920
responder is a server

1387
00:54:55,920 --> 00:54:59,520
you return a protected 503 error message

1388
00:54:59,520 --> 00:55:01,119
with p set to one to indicate yeah i

1389
00:55:01,119 --> 00:55:02,880
want to run it in the

1390
00:55:02,880 --> 00:55:05,200
no forward secrecy mode

1391
00:55:05,200 --> 00:55:06,880
and if the client is responder you can

1392
00:55:06,880 --> 00:55:09,200
send the protected request to with p set

1393
00:55:09,200 --> 00:55:10,319
to one

1394
00:55:10,319 --> 00:55:12,960
but basically if you attempt to run

1395
00:55:12,960 --> 00:55:14,799
kudos and the other party responds with

1396
00:55:14,799 --> 00:55:16,640
the p bit set one saying i want to run

1397
00:55:16,640 --> 00:55:18,559
it in the no forward secrecy mode you

1398
00:55:18,559 --> 00:55:20,640
can simply try yourself with the p bit

1399
00:55:20,640 --> 00:55:22,960
set to one so at least you can run it in

1400
00:55:22,960 --> 00:55:25,200
common

1401
00:55:25,200 --> 00:55:26,799
so you basically have to downgrade to

1402
00:55:26,799 --> 00:55:27,599
the

1403
00:55:27,599 --> 00:55:29,440
device that has the least

1404
00:55:29,440 --> 00:55:31,760
capability

1405
00:55:31,760 --> 00:55:33,599
and yeah here are some open questions if

1406
00:55:33,599 --> 00:55:35,920
this is a reasonable approach and

1407
00:55:35,920 --> 00:55:38,240
if there are any comments or

1408
00:55:38,240 --> 00:55:40,319
if this and now basically we have this

1409
00:55:40,319 --> 00:55:42,880
in appendix actually and to as a

1410
00:55:42,880 --> 00:55:45,200
suggested way to do this

1411
00:55:45,200 --> 00:55:47,200
and so one open question is also if this

1412
00:55:47,200 --> 00:55:49,440
could be good to move to the draft main

1413
00:55:49,440 --> 00:55:51,680
body

1414
00:55:51,680 --> 00:55:54,160
uh joran

1415
00:55:54,160 --> 00:55:55,680
yes uh

1416
00:55:55,680 --> 00:55:56,720
can you hear me

1417
00:55:56,720 --> 00:55:58,959
yes

1418
00:56:00,559 --> 00:56:03,200
so i'd like to thank the others for

1419
00:56:03,200 --> 00:56:05,200
for doing this this work i'm i mean

1420
00:56:05,200 --> 00:56:06,720
there's plenty of updates here this is

1421
00:56:06,720 --> 00:56:08,319
just the first one and i think this is a

1422
00:56:08,319 --> 00:56:09,680
really good

1423
00:56:09,680 --> 00:56:12,319
good part uh that we should keep and

1424
00:56:12,319 --> 00:56:14,319
move up to the body

1425
00:56:14,319 --> 00:56:17,440
i could see many settings where this is

1426
00:56:17,440 --> 00:56:18,880
useful

1427
00:56:18,880 --> 00:56:19,920
uh

1428
00:56:19,920 --> 00:56:21,760
you could have i mean if

1429
00:56:21,760 --> 00:56:24,079
you could use this not only for things

1430
00:56:24,079 --> 00:56:25,599
that are

1431
00:56:25,599 --> 00:56:27,119
masteries

1432
00:56:27,119 --> 00:56:29,119
manufacturers that it could be things

1433
00:56:29,119 --> 00:56:30,720
like uh

1434
00:56:30,720 --> 00:56:33,119
afternoon printing you could fill this

1435
00:56:33,119 --> 00:56:35,200
bootstrap master secret with with the

1436
00:56:35,200 --> 00:56:36,319
result

1437
00:56:36,319 --> 00:56:39,280
or it could be the result uh after and

1438
00:56:39,280 --> 00:56:41,359
provisioning through the ace oauth

1439
00:56:41,359 --> 00:56:43,520
framework

1440
00:56:43,520 --> 00:56:46,319
and it could be used uh in in the reset

1441
00:56:46,319 --> 00:56:48,160
button settings so you could i mean even

1442
00:56:48,160 --> 00:56:49,599
if you have both

1443
00:56:49,599 --> 00:56:52,799
both the bootstrap master secret and the

1444
00:56:52,799 --> 00:56:53,680
uh

1445
00:56:53,680 --> 00:56:55,359
the latest master secret fields you

1446
00:56:55,359 --> 00:56:57,520
could have a reset

1447
00:56:57,520 --> 00:56:59,680
a button for example which means that

1448
00:56:59,680 --> 00:57:01,440
you pick from the bootstrap master

1449
00:57:01,440 --> 00:57:04,799
secret register if i understand right

1450
00:57:04,799 --> 00:57:06,559
and and that i think it would be really

1451
00:57:06,559 --> 00:57:08,240
useful um

1452
00:57:08,240 --> 00:57:10,400
so this gives a lot of options

1453
00:57:10,400 --> 00:57:12,400
there's some security considerations

1454
00:57:12,400 --> 00:57:14,079
here you obviously need to integrity

1455
00:57:14,079 --> 00:57:15,680
protect the field but you have you're

1456
00:57:15,680 --> 00:57:18,400
coming to that in the latest line

1457
00:57:18,400 --> 00:57:19,280
and

1458
00:57:19,280 --> 00:57:21,920
and also to to handle the situations

1459
00:57:21,920 --> 00:57:22,960
when you have

1460
00:57:22,960 --> 00:57:24,799
i mean there are a number of cases now p

1461
00:57:24,799 --> 00:57:28,000
equals one and zero and existence of

1462
00:57:28,000 --> 00:57:30,240
these whether you support the boost trap

1463
00:57:30,240 --> 00:57:31,839
master secret or not

1464
00:57:31,839 --> 00:57:33,520
but i think that's not not overly

1465
00:57:33,520 --> 00:57:35,680
complex and that's

1466
00:57:35,680 --> 00:57:37,520
this looks good

1467
00:57:37,520 --> 00:57:38,720
yeah thank you thanks a lot for the

1468
00:57:38,720 --> 00:57:41,440
feedback on that yes

1469
00:57:41,440 --> 00:57:43,359
uh carson

1470
00:57:43,359 --> 00:57:46,559
yeah i also think this is a nice work

1471
00:57:46,559 --> 00:57:48,559
i have a pretty trivial question how

1472
00:57:48,559 --> 00:57:50,799
often can you use your bootstrap master

1473
00:57:50,799 --> 00:57:53,200
secret

1474
00:57:53,760 --> 00:57:55,520
can you repeat how often you can use the

1475
00:57:55,520 --> 00:57:57,200
booster plaster secret

1476
00:57:57,200 --> 00:58:00,079
yeah so this is just another key and

1477
00:58:00,079 --> 00:58:01,920
there is probably a limit

1478
00:58:01,920 --> 00:58:05,280
to how often you can use it

1479
00:58:05,440 --> 00:58:07,200
yeah we haven't really done any security

1480
00:58:07,200 --> 00:58:10,480
analysis on on that for now on how many

1481
00:58:10,480 --> 00:58:12,079
times you can use it until you really

1482
00:58:12,079 --> 00:58:14,079
have to change also that but that's i

1483
00:58:14,079 --> 00:58:15,440
think it's a good

1484
00:58:15,440 --> 00:58:18,240
good question something we can we can

1485
00:58:18,240 --> 00:58:21,359
think about a bit deeper

1486
00:58:21,760 --> 00:58:22,880
yeah so

1487
00:58:22,880 --> 00:58:25,119
your assumption was you cannot change it

1488
00:58:25,119 --> 00:58:26,720
so essentially you have to throw away

1489
00:58:26,720 --> 00:58:28,480
the device when

1490
00:58:28,480 --> 00:58:30,720
yeah i mean we are something well

1491
00:58:30,720 --> 00:58:32,240
let's put this way our assumption was

1492
00:58:32,240 --> 00:58:34,799
that device itself cannot change it

1493
00:58:34,799 --> 00:58:35,520
so

1494
00:58:35,520 --> 00:58:37,520
like the device itself couldn't write to

1495
00:58:37,520 --> 00:58:39,359
itself to change it but possibly through

1496
00:58:39,359 --> 00:58:42,079
some manual intervention

1497
00:58:42,079 --> 00:58:43,760
some a technician may be able to go and

1498
00:58:43,760 --> 00:58:45,200
change it

1499
00:58:45,200 --> 00:58:46,240
okay

1500
00:58:46,240 --> 00:58:47,119
and

1501
00:58:47,119 --> 00:58:49,520
carson i think uh

1502
00:58:49,520 --> 00:58:51,119
and the authors i think this is not a

1503
00:58:51,119 --> 00:58:53,920
big problem i mean in the sense that

1504
00:58:53,920 --> 00:58:55,440
i mean assume that you have a good

1505
00:58:55,440 --> 00:58:57,440
entropy of of the

1506
00:58:57,440 --> 00:59:00,400
bootstrap master secret

1507
00:59:00,400 --> 00:59:02,240
and what what happens at the key update

1508
00:59:02,240 --> 00:59:04,880
is just that you're adding nonsense

1509
00:59:04,880 --> 00:59:06,079
so yeah

1510
00:59:06,079 --> 00:59:07,839
so so you shouldn't i mean you shouldn't

1511
00:59:07,839 --> 00:59:09,359
really have a problem

1512
00:59:09,359 --> 00:59:11,119
uh as long as

1513
00:59:11,119 --> 00:59:13,440
the original entropy of the

1514
00:59:13,440 --> 00:59:16,400
of the bms is large enough it should

1515
00:59:16,400 --> 00:59:17,520
so

1516
00:59:17,520 --> 00:59:19,920
that that i mean it bought it

1517
00:59:19,920 --> 00:59:22,079
what you say boils down it it falls back

1518
00:59:22,079 --> 00:59:22,960
to the

1519
00:59:22,960 --> 00:59:26,079
the assumption of the entropy of the

1520
00:59:26,079 --> 00:59:28,480
of the secret key

1521
00:59:28,480 --> 00:59:30,240
yeah i'm just

1522
00:59:30,240 --> 00:59:32,240
interested in this because if if it's a

1523
00:59:32,240 --> 00:59:33,599
limited

1524
00:59:33,599 --> 00:59:35,839
uh number of times you can use it then

1525
00:59:35,839 --> 00:59:37,520
of course it becomes an attack vector

1526
00:59:37,520 --> 00:59:38,799
for the u.s

1527
00:59:38,799 --> 00:59:41,119
attack so you have to be aware of that

1528
00:59:41,119 --> 00:59:42,880
vector

1529
00:59:42,880 --> 00:59:45,280
yeah and there is a limit yes but that

1530
00:59:45,280 --> 00:59:47,359
limit will not be the limiting

1531
00:59:47,359 --> 00:59:49,599
factor in this

1532
00:59:49,599 --> 00:59:51,920
correct

1533
00:59:53,280 --> 00:59:55,040
okay thanks a lot for the discussion i

1534
00:59:55,040 --> 00:59:57,920
think i will proceed to the next

1535
00:59:57,920 --> 01:00:02,400
section then um i don't know how many

1536
01:00:03,200 --> 01:00:04,079
so

1537
01:00:04,079 --> 01:00:06,240
now another addition we did and this is

1538
01:00:06,240 --> 01:00:09,040
also in fact added to um

1539
01:00:09,040 --> 01:00:11,440
an appendix in the draft is how can we

1540
01:00:11,440 --> 01:00:12,960
keep observations around and this has

1541
01:00:12,960 --> 01:00:14,480
been something we discussed in earlier

1542
01:00:14,480 --> 01:00:16,000
meetings also

1543
01:00:16,000 --> 01:00:18,000
so basically there is a problem that we

1544
01:00:18,000 --> 01:00:20,480
identified and that problem is if the

1545
01:00:20,480 --> 01:00:22,880
client starts an observation

1546
01:00:22,880 --> 01:00:24,559
let's call it ops one by sending a

1547
01:00:24,559 --> 01:00:26,799
request direct one with the

1548
01:00:26,799 --> 01:00:28,720
request pivx

1549
01:00:28,720 --> 01:00:30,559
and then now after that the two pairs

1550
01:00:30,559 --> 01:00:32,960
run the kudos procedure and reset the

1551
01:00:32,960 --> 01:00:35,920
sender sequence numbers back to zero

1552
01:00:35,920 --> 01:00:37,520
and later on while this observation is

1553
01:00:37,520 --> 01:00:39,520
still ongoing now the client sends a new

1554
01:00:39,520 --> 01:00:42,319
request rec2 but this also uses

1555
01:00:42,319 --> 01:00:44,799
checkpivx because the client restarted

1556
01:00:44,799 --> 01:00:46,640
from zero

1557
01:00:46,640 --> 01:00:48,480
it's partially it's under sequence

1558
01:00:48,480 --> 01:00:49,760
numbers

1559
01:00:49,760 --> 01:00:51,680
so the problem here is that now a

1560
01:00:51,680 --> 01:00:54,079
notification sent by the server for the

1561
01:00:54,079 --> 01:00:55,599
observation one

1562
01:00:55,599 --> 01:00:58,079
or a response to request two would both

1563
01:00:58,079 --> 01:01:00,160
cryptographically match against the

1564
01:01:00,160 --> 01:01:02,480
request one and request two

1565
01:01:02,480 --> 01:01:04,480
and essentially because they're using

1566
01:01:04,480 --> 01:01:06,160
them

1567
01:01:06,160 --> 01:01:07,680
they're using the same request pov in

1568
01:01:07,680 --> 01:01:09,119
this case right

1569
01:01:09,119 --> 01:01:10,400
so

1570
01:01:10,400 --> 01:01:13,440
we needed a way to avoid this um

1571
01:01:13,440 --> 01:01:15,440
accidental use of the request piv for

1572
01:01:15,440 --> 01:01:17,200
open observations

1573
01:01:17,200 --> 01:01:19,359
so what we do now in appendix is we

1574
01:01:19,359 --> 01:01:21,359
define a method where you do this

1575
01:01:21,359 --> 01:01:23,760
jumping we call it long jumping

1576
01:01:23,760 --> 01:01:25,599
beyond the partial levees that are

1577
01:01:25,599 --> 01:01:27,839
already in use for observations

1578
01:01:27,839 --> 01:01:29,280
and more information on this is also on

1579
01:01:29,280 --> 01:01:30,480
the next slide

1580
01:01:30,480 --> 01:01:33,359
and we also now propose to

1581
01:01:33,359 --> 01:01:35,760
have a new bit b that you can actually

1582
01:01:35,760 --> 01:01:38,000
use to signal interest if you wish to

1583
01:01:38,000 --> 01:01:40,240
keep observations or not

1584
01:01:40,240 --> 01:01:42,240
and of course if both parties do not

1585
01:01:42,240 --> 01:01:43,839
wish to keep the observations well you

1586
01:01:43,839 --> 01:01:45,359
can simply discard them every time you

1587
01:01:45,359 --> 01:01:47,280
do their keying there's no need and to

1588
01:01:47,280 --> 01:01:48,880
keep them but if you wish to keep them

1589
01:01:48,880 --> 01:01:51,359
you can indicate it with this big p

1590
01:01:51,359 --> 01:01:53,040
sorry bit b

1591
01:01:53,040 --> 01:01:53,760
so

1592
01:01:53,760 --> 01:01:55,839
what is this long jumping method

1593
01:01:55,839 --> 01:01:57,280
it's basically that when you want to

1594
01:01:57,280 --> 01:01:59,280
send the first request after you did the

1595
01:01:59,280 --> 01:02:01,839
key update kudos execution

1596
01:02:01,839 --> 01:02:03,760
the client should determine the partial

1597
01:02:03,760 --> 01:02:07,280
av which has the highest partial me iv

1598
01:02:07,280 --> 01:02:10,640
among all ongoing observations

1599
01:02:10,640 --> 01:02:12,640
and the point is that you wish to now

1600
01:02:12,640 --> 01:02:14,400
set your sender sequence number to that

1601
01:02:14,400 --> 01:02:16,480
value plus one so you jump beyond this

1602
01:02:16,480 --> 01:02:18,079
so there's absolutely no risk that you

1603
01:02:18,079 --> 01:02:19,920
will be reducing that partially that's

1604
01:02:19,920 --> 01:02:21,200
already occupied for an ongoing

1605
01:02:21,200 --> 01:02:22,880
observation

1606
01:02:22,880 --> 01:02:25,200
um but then we identified after some

1607
01:02:25,200 --> 01:02:27,359
discussion like a sub issue or related

1608
01:02:27,359 --> 01:02:29,280
issue to this which is that

1609
01:02:29,280 --> 01:02:31,520
to remove ongoing observations the

1610
01:02:31,520 --> 01:02:33,599
client needs an explicit confirmation

1611
01:02:33,599 --> 01:02:35,200
from the server because otherwise the

1612
01:02:35,200 --> 01:02:37,119
server may still consider observation to

1613
01:02:37,119 --> 01:02:38,640
be open

1614
01:02:38,640 --> 01:02:40,400
so what you do if this client cannot get

1615
01:02:40,400 --> 01:02:41,920
the confirmation

1616
01:02:41,920 --> 01:02:43,520
the worst case these observations would

1617
01:02:43,520 --> 01:02:45,119
be around forever and you would always

1618
01:02:45,119 --> 01:02:46,799
have to jump to a very high sender

1619
01:02:46,799 --> 01:02:49,359
sequence number or partially however we

1620
01:02:49,359 --> 01:02:51,039
now define this

1621
01:02:51,039 --> 01:02:53,039
epoch counter so for each ongoing

1622
01:02:53,039 --> 01:02:55,920
observation you have an epoch

1623
01:02:55,920 --> 01:02:57,760
and when this apple counter reaches the

1624
01:02:57,760 --> 01:02:59,839
max epoch you can

1625
01:02:59,839 --> 01:03:01,760
both parties delete the observation and

1626
01:03:01,760 --> 01:03:03,280
this counter would be incremented every

1627
01:03:03,280 --> 01:03:05,440
time you do the key update right

1628
01:03:05,440 --> 01:03:07,119
this is like to reduce the risk that you

1629
01:03:07,119 --> 01:03:08,559
have observations

1630
01:03:08,559 --> 01:03:10,240
staying around forever and always

1631
01:03:10,240 --> 01:03:12,000
forcing you to jump for a head in the

1632
01:03:12,000 --> 01:03:14,000
piv space so in this case it would be a

1633
01:03:14,000 --> 01:03:17,520
guarantee that let's say the max epoch

1634
01:03:17,520 --> 01:03:19,520
is three then after three kudos three

1635
01:03:19,520 --> 01:03:21,760
year keying executions you would

1636
01:03:21,760 --> 01:03:23,200
guaranteed to have deleted that

1637
01:03:23,200 --> 01:03:26,240
observation and both sides do that

1638
01:03:26,240 --> 01:03:27,039
so

1639
01:03:27,039 --> 01:03:29,119
now the question here is like for

1640
01:03:29,119 --> 01:03:31,119
instance what is a recommended a good

1641
01:03:31,119 --> 01:03:33,119
value for the max epoch

1642
01:03:33,119 --> 01:03:35,359
and we're also yeah any kind of

1643
01:03:35,359 --> 01:03:37,839
commentary input on this and one thing

1644
01:03:37,839 --> 01:03:39,760
we were thinking about it if it can make

1645
01:03:39,760 --> 01:03:41,520
sense also to have like um

1646
01:03:41,520 --> 01:03:44,960
a negotiation within kudos where you can

1647
01:03:44,960 --> 01:03:48,799
mutually agree on the max epoch

1648
01:03:49,520 --> 01:03:53,520
uh there's euron in the queue euron

1649
01:03:53,520 --> 01:03:54,880
yeah thank you

1650
01:03:54,880 --> 01:03:56,400
yeah i i

1651
01:03:56,400 --> 01:03:58,960
i'm a little bit critical to this

1652
01:03:58,960 --> 01:04:01,359
i now have read it a little bit more in

1653
01:04:01,359 --> 01:04:02,960
detail so

1654
01:04:02,960 --> 01:04:04,559
i'm i'm not really sure we should do

1655
01:04:04,559 --> 01:04:07,119
this at all but i'll provide since we're

1656
01:04:07,119 --> 01:04:09,440
running out of time here i did not

1657
01:04:09,440 --> 01:04:12,880
ask those questions now but um

1658
01:04:12,880 --> 01:04:13,680
yeah

1659
01:04:13,680 --> 01:04:15,520
i think this is maybe a little bit

1660
01:04:15,520 --> 01:04:17,839
engineering too much something that we

1661
01:04:17,839 --> 01:04:20,400
should first understand if we need to do

1662
01:04:20,400 --> 01:04:22,079
so i'll get back on that

1663
01:04:22,079 --> 01:04:23,760
yeah fair enough thank you thanks for

1664
01:04:23,760 --> 01:04:24,839
the

1665
01:04:24,839 --> 01:04:28,079
input uh try to take about

1666
01:04:28,079 --> 01:04:30,240
five minutes at most for the remaining

1667
01:04:30,240 --> 01:04:32,880
yeah thank you i um yes

1668
01:04:32,880 --> 01:04:34,720
so i'll go through it a bit quicker and

1669
01:04:34,720 --> 01:04:36,799
so one other thing we added was the

1670
01:04:36,799 --> 01:04:40,319
ability to renew the sender and cpid

1671
01:04:40,319 --> 01:04:42,799
recipient ids on the pairs so we have

1672
01:04:42,799 --> 01:04:45,200
this now in appendix d

1673
01:04:45,200 --> 01:04:46,960
and it's basically

1674
01:04:46,960 --> 01:04:48,720
a procedure where

1675
01:04:48,720 --> 01:04:49,760
um

1676
01:04:49,760 --> 01:04:51,760
you say as a pair okay i wish to use

1677
01:04:51,760 --> 01:04:53,440
this recipient id

1678
01:04:53,440 --> 01:04:55,200
and the other party says which new

1679
01:04:55,200 --> 01:04:57,440
recipient id it wishes to use

1680
01:04:57,440 --> 01:04:59,280
and

1681
01:04:59,280 --> 01:05:01,119
when you have then you basically you

1682
01:05:01,119 --> 01:05:03,039
generate new contacts based on those new

1683
01:05:03,039 --> 01:05:04,880
recipient ids and you can continue the

1684
01:05:04,880 --> 01:05:06,720
communication with new recipient ids on

1685
01:05:06,720 --> 01:05:08,960
both parties and this procedure can also

1686
01:05:08,960 --> 01:05:11,599
be embedded in a kudos execution or run

1687
01:05:11,599 --> 01:05:13,280
standalone

1688
01:05:13,280 --> 01:05:15,520
so we defined a new option for this it's

1689
01:05:15,520 --> 01:05:17,359
just the recipient of the option again

1690
01:05:17,359 --> 01:05:19,039
the idea is pretty basic in there you

1691
01:05:19,039 --> 01:05:21,359
put what recipient id you wish to use in

1692
01:05:21,359 --> 01:05:23,200
the future and the other party does the

1693
01:05:23,200 --> 01:05:25,440
same

1694
01:05:25,440 --> 01:05:27,280
and here's the message flow so basically

1695
01:05:27,280 --> 01:05:28,799
what you can see here is

1696
01:05:28,799 --> 01:05:30,799
the client starts with a recipient id of

1697
01:05:30,799 --> 01:05:33,599
zero now in request one it includes the

1698
01:05:33,599 --> 01:05:37,839
recipient id option indicating 42

1699
01:05:38,160 --> 01:05:40,559
in the response the server indicates

1700
01:05:40,559 --> 01:05:42,559
that it wishes to use

1701
01:05:42,559 --> 01:05:44,079
78

1702
01:05:44,079 --> 01:05:46,319
and

1703
01:05:46,559 --> 01:05:48,160
at the bottom then you see that both

1704
01:05:48,160 --> 01:05:50,000
sides have generated new score security

1705
01:05:50,000 --> 01:05:52,079
context and now the client in fact is

1706
01:05:52,079 --> 01:05:55,039
using 42 as its recipient id there

1707
01:05:55,039 --> 01:05:57,200
and the server is using 78 so they have

1708
01:05:57,200 --> 01:05:58,880
actually successful transition to the

1709
01:05:58,880 --> 01:06:01,359
new values

1710
01:06:01,359 --> 01:06:03,359
and again any feedback

1711
01:06:03,359 --> 01:06:05,280
objections or alternatives is very

1712
01:06:05,280 --> 01:06:07,920
welcome here

1713
01:06:10,079 --> 01:06:13,599
yeah again just a brief i think this

1714
01:06:13,599 --> 01:06:15,359
i don't see any problem with this but

1715
01:06:15,359 --> 01:06:17,200
i'm i haven't seen the compelling use

1716
01:06:17,200 --> 01:06:18,400
case

1717
01:06:18,400 --> 01:06:19,920
that's one one comment and the other

1718
01:06:19,920 --> 01:06:22,559
comment is that this must only used when

1719
01:06:22,559 --> 01:06:23,520
it's

1720
01:06:23,520 --> 01:06:24,880
protected with the previously

1721
01:06:24,880 --> 01:06:27,280
established security context so it's not

1722
01:06:27,280 --> 01:06:29,359
enough that austria is being used

1723
01:06:29,359 --> 01:06:30,960
it has to be previously established

1724
01:06:30,960 --> 01:06:32,400
security context

1725
01:06:32,400 --> 01:06:33,680
but

1726
01:06:33,680 --> 01:06:35,440
yes there are some exactly like you

1727
01:06:35,440 --> 01:06:37,359
should also not run it after a reboot

1728
01:06:37,359 --> 01:06:40,720
for instance because

1729
01:06:40,720 --> 01:06:42,559
yeah there are some restrictions on safe

1730
01:06:42,559 --> 01:06:44,559
ways to use this uh which i think we

1731
01:06:44,559 --> 01:06:46,640
also cover in the text yeah yeah then

1732
01:06:46,640 --> 01:06:47,760
it's not the previous established

1733
01:06:47,760 --> 01:06:50,160
security context so that's exactly right

1734
01:06:50,160 --> 01:06:53,520
one reason okay thanks

1735
01:06:53,520 --> 01:06:55,200
okay um

1736
01:06:55,200 --> 01:06:57,039
and then i had this final part which is

1737
01:06:57,039 --> 01:06:58,160
about

1738
01:06:58,160 --> 01:06:59,680
so throughout this draft now we

1739
01:06:59,680 --> 01:07:02,000
basically defined three new bits one is

1740
01:07:02,000 --> 01:07:04,720
the id detail bit itself to signal the

1741
01:07:04,720 --> 01:07:06,079
inclusion of the id detail in those

1742
01:07:06,079 --> 01:07:08,240
corruption then we have the no forward

1743
01:07:08,240 --> 01:07:10,400
secrecy bit p to signal the use of the

1744
01:07:10,400 --> 01:07:12,240
node forward secrecy mode

1745
01:07:12,240 --> 01:07:15,359
and then we have the observation speed b

1746
01:07:15,359 --> 01:07:16,960
so

1747
01:07:16,960 --> 01:07:19,520
we now first of all the id detail bit

1748
01:07:19,520 --> 01:07:21,200
that is placed in those corruption as

1749
01:07:21,200 --> 01:07:22,960
you can see there to the right

1750
01:07:22,960 --> 01:07:24,799
but then the question comes okay where

1751
01:07:24,799 --> 01:07:28,240
do we put the bits b and p to also

1752
01:07:28,240 --> 01:07:30,000
provide integrity protection of these

1753
01:07:30,000 --> 01:07:30,960
bits

1754
01:07:30,960 --> 01:07:32,960
so our idea and proposal now is to put

1755
01:07:32,960 --> 01:07:34,880
this this is based on on feedback and

1756
01:07:34,880 --> 01:07:36,640
discussions and i know crystal gave a

1757
01:07:36,640 --> 01:07:38,960
lot of input on this so the idea is to

1758
01:07:38,960 --> 01:07:42,000
put these bits in the byte x which is

1759
01:07:42,000 --> 01:07:44,079
currently the length the size of the id

1760
01:07:44,079 --> 01:07:45,119
detail

1761
01:07:45,119 --> 01:07:48,000
so we take two bits of the x field to

1762
01:07:48,000 --> 01:07:50,640
encode this bit b and p

1763
01:07:50,640 --> 01:07:52,559
then we still have six bits remaining in

1764
01:07:52,559 --> 01:07:53,760
x which is

1765
01:07:53,760 --> 01:07:56,000
sufficient to describe the size of id

1766
01:07:56,000 --> 01:07:57,680
detail

1767
01:07:57,680 --> 01:07:59,920
and the point here is also now what we

1768
01:07:59,920 --> 01:08:01,920
do is we take the x value as input to

1769
01:08:01,920 --> 01:08:03,839
the key derivation procedure

1770
01:08:03,839 --> 01:08:05,520
to achieve integrity protection for the

1771
01:08:05,520 --> 01:08:07,920
bmp

1772
01:08:08,839 --> 01:08:11,440
bits yeah and then just a quick summary

1773
01:08:11,440 --> 01:08:13,760
and next step so what did we do in this

1774
01:08:13,760 --> 01:08:17,040
version we suggest now a way to do a key

1775
01:08:17,040 --> 01:08:18,880
update without forward secrecy defined

1776
01:08:18,880 --> 01:08:20,399
in appendix e

1777
01:08:20,399 --> 01:08:22,000
we suggest a method for preserving

1778
01:08:22,000 --> 01:08:24,000
observations across key updates

1779
01:08:24,000 --> 01:08:26,238
suggesting appendix

1780
01:08:26,238 --> 01:08:27,520
c

1781
01:08:27,520 --> 01:08:29,759
and we all started yesterday procedure

1782
01:08:29,759 --> 01:08:32,000
to update the overscore sender recipient

1783
01:08:32,000 --> 01:08:34,719
ids defined in appendix d

1784
01:08:34,719 --> 01:08:36,479
we propose an alternative placement for

1785
01:08:36,479 --> 01:08:38,640
the signaling bits then we did some

1786
01:08:38,640 --> 01:08:39,839
general improvements in the massive

1787
01:08:39,839 --> 01:08:41,759
processing and also nothing i didn't

1788
01:08:41,759 --> 01:08:43,920
really cover we have a document an

1789
01:08:43,920 --> 01:08:46,640
optimized way of count

1790
01:08:46,640 --> 01:08:49,120
storing the count q variable which is

1791
01:08:49,120 --> 01:08:51,120
basically related to the limits that you

1792
01:08:51,120 --> 01:08:52,719
have to count the amount of times you

1793
01:08:52,719 --> 01:08:54,640
use a particular key

1794
01:08:54,640 --> 01:08:56,238
and that's in appendix b

1795
01:08:56,238 --> 01:08:57,279
and

1796
01:08:57,279 --> 01:08:58,880
yeah our plan is basically to address

1797
01:08:58,880 --> 01:09:00,319
open points and issues we have a number

1798
01:09:00,319 --> 01:09:02,238
of issues on github and feedback is very

1799
01:09:02,238 --> 01:09:03,520
welcome

1800
01:09:03,520 --> 01:09:06,319
and we also want to move the suggestion

1801
01:09:06,319 --> 01:09:07,839
we have added now to the main document

1802
01:09:07,839 --> 01:09:09,839
body of course taking any feedback into

1803
01:09:09,839 --> 01:09:10,880
account

1804
01:09:10,880 --> 01:09:12,560
and um

1805
01:09:12,560 --> 01:09:14,080
yeah then we also want to basically do

1806
01:09:14,080 --> 01:09:16,560
an implementation on this based on an

1807
01:09:16,560 --> 01:09:18,960
implementation of what score we have in

1808
01:09:18,960 --> 01:09:21,359
the java californium library

1809
01:09:21,359 --> 01:09:22,399
so

1810
01:09:22,399 --> 01:09:23,920
thank you

1811
01:09:23,920 --> 01:09:26,080
and any comments or questions are

1812
01:09:26,080 --> 01:09:28,238
welcome

1813
01:09:28,238 --> 01:09:30,158
signal in the queue

1814
01:09:30,158 --> 01:09:32,319
nothing in the chat in interest of time

1815
01:09:32,319 --> 01:09:34,399
unless they're very compelling points to

1816
01:09:34,399 --> 01:09:36,319
raise now i think it's pretty clear how

1817
01:09:36,319 --> 01:09:37,600
to proceed

1818
01:09:37,600 --> 01:09:40,239
yes chris

1819
01:09:40,399 --> 01:09:41,920
okay

1820
01:09:41,920 --> 01:09:44,080
no

1821
01:09:44,158 --> 01:09:45,679
we can continue discussion at least or

1822
01:09:45,679 --> 01:09:47,759
definitely otherwise thank you thank you

1823
01:09:47,759 --> 01:09:50,238
ricard

1824
01:09:50,719 --> 01:09:52,479
and the next

1825
01:09:52,479 --> 01:09:56,559
is christian with transport indication

1826
01:10:00,080 --> 01:10:02,640
can you hear me

1827
01:10:02,640 --> 01:10:04,400
yeah i had to clear up

1828
01:10:04,400 --> 01:10:06,080
hello everyone my name is christian

1829
01:10:06,080 --> 01:10:07,840
amsas and i would like to i think

1830
01:10:07,840 --> 01:10:10,960
transport indication is next um

1831
01:10:10,960 --> 01:10:12,159
there you are

1832
01:10:12,159 --> 01:10:14,719
oh that's sorry sorry this sorry picked

1833
01:10:14,719 --> 01:10:17,840
the wrong one

1834
01:10:21,120 --> 01:10:23,520
yeah okay protocol indication that's the

1835
01:10:23,520 --> 01:10:25,199
right one

1836
01:10:25,199 --> 01:10:28,239
okay um what i'd like to

1837
01:10:28,239 --> 01:10:30,719
do here right uh today is give you a

1838
01:10:30,719 --> 01:10:32,800
brief summary on the on the topic

1839
01:10:32,800 --> 01:10:34,800
because we've talked a lot of in during

1840
01:10:34,800 --> 01:10:36,880
interims and gone into details there but

1841
01:10:36,880 --> 01:10:38,480
i think what will help be helpful for

1842
01:10:38,480 --> 01:10:39,520
today

1843
01:10:39,520 --> 01:10:41,280
is to talk about

1844
01:10:41,280 --> 01:10:44,080
what this is and what that why why why

1845
01:10:44,080 --> 01:10:45,840
this needs to be done and what other

1846
01:10:45,840 --> 01:10:47,920
challenges and solutions

1847
01:10:47,920 --> 01:10:49,679
uh conveniently the secretariat has been

1848
01:10:49,679 --> 01:10:52,159
providing these small badges and

1849
01:10:52,159 --> 01:10:53,199
this

1850
01:10:53,199 --> 01:10:55,440
roughly sums up what this draft is about

1851
01:10:55,440 --> 01:10:56,880
that is

1852
01:10:56,880 --> 01:10:59,120
everything before the

1853
01:10:59,120 --> 01:11:01,280
before the authority in the component

1854
01:11:01,280 --> 01:11:04,000
um of the co-op uri

1855
01:11:04,000 --> 01:11:04,800
might

1856
01:11:04,800 --> 01:11:06,800
have different values so the typical

1857
01:11:06,800 --> 01:11:09,840
examples that we see are co-op over udp

1858
01:11:09,840 --> 01:11:12,159
and code over tcp but really this

1859
01:11:12,159 --> 01:11:13,760
applies just as well to couple web

1860
01:11:13,760 --> 01:11:15,280
sockets um

1861
01:11:15,280 --> 01:11:17,600
and any of those transports that have

1862
01:11:17,600 --> 01:11:19,760
been around in draft be it corp over

1863
01:11:19,760 --> 01:11:21,920
serial sms bluetooth

1864
01:11:21,920 --> 01:11:24,239
and there are a few ideas around of

1865
01:11:24,239 --> 01:11:26,080
people who want to do it over quick and

1866
01:11:26,080 --> 01:11:28,400
that might be done through taps so

1867
01:11:28,400 --> 01:11:30,080
maybe keep a look keep an eye open for

1868
01:11:30,080 --> 01:11:32,719
that i'll be talking about udp and tcp

1869
01:11:32,719 --> 01:11:35,280
primarily as placeholders here

1870
01:11:35,280 --> 01:11:37,600
the thing is um the way if you if you

1871
01:11:37,600 --> 01:11:39,280
look at a device that is concretely

1872
01:11:39,280 --> 01:11:41,040
implemented what you usually see is that

1873
01:11:41,040 --> 01:11:42,640
it has a few resources in there so an

1874
01:11:42,640 --> 01:11:44,480
led and the firmware

1875
01:11:44,480 --> 01:11:46,159
and provides different transports but

1876
01:11:46,159 --> 01:11:50,159
what on the uri level it actually is

1877
01:11:50,159 --> 01:11:51,280
is

1878
01:11:51,280 --> 01:11:54,159
the one comes in through co-op over tcp

1879
01:11:54,159 --> 01:11:56,320
that's called plus tcp column slash

1880
01:11:56,320 --> 01:11:58,640
slash authority component and then some

1881
01:11:58,640 --> 01:12:01,280
resources christian please don't go away

1882
01:12:01,280 --> 01:12:03,679
from your microphone grab it

1883
01:12:03,679 --> 01:12:06,080
apologies and i'll just um point to the

1884
01:12:06,080 --> 01:12:08,320
right half of things

1885
01:12:08,320 --> 01:12:10,559
right

1886
01:12:13,280 --> 01:12:14,159
okay

1887
01:12:14,159 --> 01:12:15,760
and

1888
01:12:15,760 --> 01:12:18,640
so these are distinct uris and of course

1889
01:12:18,640 --> 01:12:21,199
a server may implement things that this

1890
01:12:21,199 --> 01:12:22,880
server or this firmware over here on

1891
01:12:22,880 --> 01:12:24,719
this firmware over there is really the

1892
01:12:24,719 --> 01:12:27,280
same thing and most servers do that

1893
01:12:27,280 --> 01:12:28,159
but

1894
01:12:28,159 --> 01:12:30,560
at least uh at least from the uri

1895
01:12:30,560 --> 01:12:31,679
definitions

1896
01:12:31,679 --> 01:12:33,440
this does not follow so

1897
01:12:33,440 --> 01:12:36,960
we might need to indicate what actually

1898
01:12:36,960 --> 01:12:38,560
what the situation is and whether a

1899
01:12:38,560 --> 01:12:40,159
client may just

1900
01:12:40,159 --> 01:12:42,960
when it is doing cover or udp

1901
01:12:42,960 --> 01:12:44,880
switch over to tcp and continue on the

1902
01:12:44,880 --> 01:12:47,520
same resource

1903
01:12:47,520 --> 01:12:49,520
now something we could do

1904
01:12:49,520 --> 01:12:52,480
is to define that just for a particular

1905
01:12:52,480 --> 01:12:54,080
set of servers

1906
01:12:54,080 --> 01:12:55,920
uh just to define that for particular

1907
01:12:55,920 --> 01:12:58,239
protocols these are the same thing

1908
01:12:58,239 --> 01:13:00,159
um

1909
01:13:00,159 --> 01:13:02,159
it is generally discouraged in in the

1910
01:13:02,159 --> 01:13:05,360
context of your eyes because

1911
01:13:05,360 --> 01:13:07,120
they might previously not have been and

1912
01:13:07,120 --> 01:13:09,840
there are a few other problems like

1913
01:13:09,840 --> 01:13:11,520
there could be cash entries that need to

1914
01:13:11,520 --> 01:13:13,280
be aligned to that um what does it mean

1915
01:13:13,280 --> 01:13:14,880
for security

1916
01:13:14,880 --> 01:13:17,280
what does it mean kind of how identical

1917
01:13:17,280 --> 01:13:19,920
can two things be if they are not

1918
01:13:19,920 --> 01:13:21,760
accessed the same way

1919
01:13:21,760 --> 01:13:23,280
and last but not least this would be a

1920
01:13:23,280 --> 01:13:25,600
breaking change because exp existing

1921
01:13:25,600 --> 01:13:28,000
implementations can already distinguish

1922
01:13:28,000 --> 01:13:30,000
between the same resource as

1923
01:13:30,000 --> 01:13:33,840
accessed through udp or through tcp

1924
01:13:34,800 --> 01:13:39,760
so the current proposal is to not um

1925
01:13:39,760 --> 01:13:42,719
is to to not unify these but rather to

1926
01:13:42,719 --> 01:13:44,320
provide access

1927
01:13:44,320 --> 01:13:47,199
to the resources on one side of the of

1928
01:13:47,199 --> 01:13:48,800
on on one protocol

1929
01:13:48,800 --> 01:13:50,000
through the other protocol and

1930
01:13:50,000 --> 01:13:51,360
conveniently

1931
01:13:51,360 --> 01:13:53,280
uh corp always really gives us all the

1932
01:13:53,280 --> 01:13:56,000
tools we need for that because there is

1933
01:13:56,000 --> 01:13:58,840
um there is the proxy scheme option and

1934
01:13:58,840 --> 01:14:02,560
if a device is accessed with a query

1935
01:14:02,560 --> 01:14:05,199
with a request that includes that option

1936
01:14:05,199 --> 01:14:07,520
the uri host option still has the same

1937
01:14:07,520 --> 01:14:10,159
default value that it has already

1938
01:14:10,159 --> 01:14:12,000
that is the

1939
01:14:12,000 --> 01:14:14,800
vip address and possibly the port of the

1940
01:14:14,800 --> 01:14:17,040
previous request and if they are as

1941
01:14:17,040 --> 01:14:19,679
neatly aligned as cobo vdp and kobo or

1942
01:14:19,679 --> 01:14:21,360
tcp are that is

1943
01:14:21,360 --> 01:14:22,800
they have a host name and they have a

1944
01:14:22,800 --> 01:14:25,360
port and that's usually the same one

1945
01:14:25,360 --> 01:14:27,679
then not even that your ihos needs to be

1946
01:14:27,679 --> 01:14:30,400
expressed so a device that wants to a

1947
01:14:30,400 --> 01:14:32,719
client that wants to access the firmware

1948
01:14:32,719 --> 01:14:35,280
resource over cob over tcp

1949
01:14:35,280 --> 01:14:38,560
can just already do this in principle

1950
01:14:38,560 --> 01:14:40,000
by just

1951
01:14:40,000 --> 01:14:41,679
adding the proxy scheme option and then

1952
01:14:41,679 --> 01:14:44,000
asking the device to

1953
01:14:44,000 --> 01:14:46,159
act as a proxy to the resources that are

1954
01:14:46,159 --> 01:14:48,000
even on the same device

1955
01:14:48,000 --> 01:14:50,640
which sounds like a lot i mean we have

1956
01:14:50,640 --> 01:14:52,640
to add proxy functionality but really

1957
01:14:52,640 --> 01:14:54,320
what it is is

1958
01:14:54,320 --> 01:14:56,239
the device must be prepared to ignore

1959
01:14:56,239 --> 01:14:58,159
that option as long as

1960
01:14:58,159 --> 01:15:00,480
um it implements the same resources on

1961
01:15:00,480 --> 01:15:02,560
both on both protocols

1962
01:15:02,560 --> 01:15:04,960
so reads like a lot um

1963
01:15:04,960 --> 01:15:06,960
but really what it is is simple to

1964
01:15:06,960 --> 01:15:09,199
implement and just adding a few bytes on

1965
01:15:09,199 --> 01:15:11,839
the wire

1966
01:15:13,120 --> 01:15:15,679
the suggested mechanism for

1967
01:15:15,679 --> 01:15:18,320
advertising this is using web links

1968
01:15:18,320 --> 01:15:20,400
which we already use for discovering and

1969
01:15:20,400 --> 01:15:23,040
advertising anything else

1970
01:15:23,040 --> 01:15:26,400
we probably don't want to advertise this

1971
01:15:26,400 --> 01:15:28,480
proper this proc the availability of the

1972
01:15:28,480 --> 01:15:30,320
proxy per resource because that would

1973
01:15:30,320 --> 01:15:32,560
mean that if we have 15 resources we

1974
01:15:32,560 --> 01:15:35,760
advertise 15 different statements

1975
01:15:35,760 --> 01:15:38,159
so instead it would be advertised once

1976
01:15:38,159 --> 01:15:39,360
per server

1977
01:15:39,360 --> 01:15:40,159
and

1978
01:15:40,159 --> 01:15:42,640
following the links that we already have

1979
01:15:42,640 --> 01:15:45,280
the statement could be

1980
01:15:45,280 --> 01:15:47,120
if anything is

1981
01:15:47,120 --> 01:15:49,600
linked from that root resource which in

1982
01:15:49,600 --> 01:15:51,520
practice things are because of the

1983
01:15:51,520 --> 01:15:55,760
implicit rules of rfc 6690

1984
01:15:56,239 --> 01:15:58,239
then you may follow that additional link

1985
01:15:58,239 --> 01:15:59,920
to find a proxy

1986
01:15:59,920 --> 01:16:02,800
and use that proxy

1987
01:16:02,800 --> 01:16:06,320
now proxy is a co-op service and

1988
01:16:06,320 --> 01:16:08,239
basically um

1989
01:16:08,239 --> 01:16:10,960
mapped to a socket somewhere

1990
01:16:10,960 --> 01:16:12,960
whereas all the things we can talk about

1991
01:16:12,960 --> 01:16:13,760
in

1992
01:16:13,760 --> 01:16:16,560
in web linking are your eyes so and we

1993
01:16:16,560 --> 01:16:18,640
don't have a particular uri scheme that

1994
01:16:18,640 --> 01:16:21,040
identifies a service running on a

1995
01:16:21,040 --> 01:16:23,440
particular port

1996
01:16:23,440 --> 01:16:25,840
the terminology which was

1997
01:16:25,840 --> 01:16:28,400
sharpened thanks to klaus's input

1998
01:16:28,400 --> 01:16:31,600
is now such that we still talk about

1999
01:16:31,600 --> 01:16:34,080
your eyes so this green box is replaced

2000
01:16:34,080 --> 01:16:37,120
with a with an actual uri indicating the

2001
01:16:37,120 --> 01:16:38,640
root resource

2002
01:16:38,640 --> 01:16:40,159
of that server

2003
01:16:40,159 --> 01:16:42,800
but the predicate used there um says

2004
01:16:42,800 --> 01:16:43,520
that

2005
01:16:43,520 --> 01:16:46,400
this is pointing to a uri and what it

2006
01:16:46,400 --> 01:16:48,960
actually means is put the put the

2007
01:16:48,960 --> 01:16:51,280
transport and the and the protocol out

2008
01:16:51,280 --> 01:16:54,880
of that and use that

2009
01:16:57,520 --> 01:17:00,400
so so far this address is the the first

2010
01:17:00,400 --> 01:17:03,040
two goals that is we introduce a

2011
01:17:03,040 --> 01:17:05,520
mechanism that allows discovery and the

2012
01:17:05,520 --> 01:17:08,480
other is that we don't add uri aliasing

2013
01:17:08,480 --> 01:17:09,280
to

2014
01:17:09,280 --> 01:17:11,760
a world in which it was not taken for

2015
01:17:11,760 --> 01:17:14,480
granted so far

2016
01:17:14,800 --> 01:17:16,560
um by the way if you have questions i

2017
01:17:16,560 --> 01:17:18,719
think now would be a good

2018
01:17:18,719 --> 01:17:20,000
yeah okay

2019
01:17:20,000 --> 01:17:22,000
now might be a good time because i can

2020
01:17:22,000 --> 01:17:24,640
take a okay i can't go back here

2021
01:17:24,640 --> 01:17:27,520
because this is like the

2022
01:17:27,520 --> 01:17:31,000
basic groundwork

2023
01:17:31,120 --> 01:17:33,520
otherwise i'll just continue on with to

2024
01:17:33,520 --> 01:17:35,920
the next um part here that is asking the

2025
01:17:35,920 --> 01:17:37,520
queue actually no question i didn't see

2026
01:17:37,520 --> 01:17:38,159
him

2027
01:17:38,159 --> 01:17:39,520
let's go please

2028
01:17:39,520 --> 01:17:41,760
yeah this question on this proxy

2029
01:17:41,760 --> 01:17:45,360
statement so when would that be included

2030
01:17:45,360 --> 01:17:47,280
if you do discovery

2031
01:17:47,280 --> 01:17:48,239
so

2032
01:17:48,239 --> 01:17:50,159
it's like every time you ask for

2033
01:17:50,159 --> 01:17:51,120
anything

2034
01:17:51,120 --> 01:17:53,360
it adds a proxy statement

2035
01:17:53,360 --> 01:17:55,760
or do you have to ask specifically for

2036
01:17:55,760 --> 01:17:58,719
something to get the proxy

2037
01:17:58,719 --> 01:18:01,520
um this is so far not precisely

2038
01:18:01,520 --> 01:18:03,840
described my roth expectation would be

2039
01:18:03,840 --> 01:18:05,840
that it is

2040
01:18:05,840 --> 01:18:07,920
that it is done whenever there is

2041
01:18:07,920 --> 01:18:09,679
something that looks like initial

2042
01:18:09,679 --> 01:18:11,520
discovery

2043
01:18:11,520 --> 01:18:12,400
but

2044
01:18:12,400 --> 01:18:15,679
might warrant a few more words so

2045
01:18:15,679 --> 01:18:18,159
especially with servers that provide a

2046
01:18:18,159 --> 01:18:20,640
lot of different transports it can well

2047
01:18:20,640 --> 01:18:23,280
make sense to narrow this down

2048
01:18:23,280 --> 01:18:24,400
um

2049
01:18:24,400 --> 01:18:26,719
i'll take that as an input for uh for

2050
01:18:26,719 --> 01:18:28,640
for an updated version

2051
01:18:28,640 --> 01:18:31,360
um to say something about

2052
01:18:31,360 --> 01:18:34,480
which proxy statements make sense to

2053
01:18:34,480 --> 01:18:36,560
um send unprompted

2054
01:18:36,560 --> 01:18:38,960
and whether and how a client might

2055
01:18:38,960 --> 01:18:41,280
express interest in them

2056
01:18:41,280 --> 01:18:43,520
there is um

2057
01:18:43,520 --> 01:18:44,800
providing

2058
01:18:44,800 --> 01:18:47,440
so there is there are a few words on how

2059
01:18:47,440 --> 01:18:50,800
a client can ask for them explicitly

2060
01:18:50,800 --> 01:18:52,640
but especially with the lookup defined

2061
01:18:52,640 --> 01:18:55,280
in 6690 and used also a resource

2062
01:18:55,280 --> 01:18:57,440
directory that is really

2063
01:18:57,440 --> 01:19:00,000
an extra query step with corel things

2064
01:19:00,000 --> 01:19:02,239
might be a bit easier but then again we

2065
01:19:02,239 --> 01:19:04,080
don't have the coral query format

2066
01:19:04,080 --> 01:19:06,480
specified yet so

2067
01:19:06,480 --> 01:19:08,080
that might be selling things that we

2068
01:19:08,080 --> 01:19:09,360
haven't even

2069
01:19:09,360 --> 01:19:12,159
um really hunted yet

2070
01:19:12,159 --> 01:19:14,159
okay yeah thanks i see also use case

2071
01:19:14,159 --> 01:19:16,239
here for uh

2072
01:19:16,239 --> 01:19:18,560
clients that do co-op discovery and and

2073
01:19:18,560 --> 01:19:22,080
get a big list of co-op s resources back

2074
01:19:22,080 --> 01:19:24,080
so if you use this

2075
01:19:24,080 --> 01:19:26,400
statement uh and the client understands

2076
01:19:26,400 --> 01:19:27,920
it at least then then you can make the

2077
01:19:27,920 --> 01:19:31,040
list shorter overall by removing yes of

2078
01:19:31,040 --> 01:19:31,840
uh

2079
01:19:31,840 --> 01:19:33,520
yeah overhead but that's only in link

2080
01:19:33,520 --> 01:19:34,840
format i

2081
01:19:34,840 --> 01:19:36,800
think yeah

2082
01:19:36,800 --> 01:19:39,280
probably nothing

2083
01:19:39,280 --> 01:19:40,960
that's generally good input thank you

2084
01:19:40,960 --> 01:19:43,199
i'll take it for the next document

2085
01:19:43,199 --> 01:19:44,640
version

2086
01:19:44,640 --> 01:19:46,960
so of course this has security

2087
01:19:46,960 --> 01:19:48,159
implications

2088
01:19:48,159 --> 01:19:51,040
and i like to say that it's just really

2089
01:19:51,040 --> 01:19:52,480
another proxy

2090
01:19:52,480 --> 01:19:54,560
there is of course a bit more to it but

2091
01:19:54,560 --> 01:19:56,719
i think that's just you should take

2092
01:19:56,719 --> 01:20:00,640
um so if a proxy is advertised um this

2093
01:20:00,640 --> 01:20:02,400
way the general expectation of the

2094
01:20:02,400 --> 01:20:04,159
client should be that the proxy can

2095
01:20:04,159 --> 01:20:06,239
still provide credentials

2096
01:20:06,239 --> 01:20:09,440
for whatever the original service was

2097
01:20:09,440 --> 01:20:11,679
um so there would be no downgrade of

2098
01:20:11,679 --> 01:20:13,520
security

2099
01:20:13,520 --> 01:20:15,920
um there are of cour kind of this works

2100
01:20:15,920 --> 01:20:18,800
really well and transparently if oscor

2101
01:20:18,800 --> 01:20:22,560
is used this also works for tls um based

2102
01:20:22,560 --> 01:20:25,040
connections as long as that proxy is as

2103
01:20:25,040 --> 01:20:26,960
i've been describing it so far

2104
01:20:26,960 --> 01:20:28,719
um really on the same device so if the

2105
01:20:28,719 --> 01:20:30,719
same device just opens the

2106
01:20:30,719 --> 01:20:33,920
tls port in addition to a dtls board

2107
01:20:33,920 --> 01:20:35,280
it would just

2108
01:20:35,280 --> 01:20:38,719
provide the same certificates there

2109
01:20:40,960 --> 01:20:42,719
if someone wants to use

2110
01:20:42,719 --> 01:20:45,600
advertised proxies over tt over t ls

2111
01:20:45,600 --> 01:20:47,600
that are not in the same device that's

2112
01:20:47,600 --> 01:20:48,719
pretty much out of scope for this

2113
01:20:48,719 --> 01:20:50,560
document because it is very complicated

2114
01:20:50,560 --> 01:20:51,520
and

2115
01:20:51,520 --> 01:20:54,880
probably not worth encouraging

2116
01:20:55,520 --> 01:20:57,120
there is of course the case of traffic

2117
01:20:57,120 --> 01:20:59,440
misdirection so even if for example with

2118
01:20:59,440 --> 01:21:00,719
oscar the

2119
01:21:00,719 --> 01:21:03,600
connection is secure in terms of what

2120
01:21:03,600 --> 01:21:05,280
oscar provides

2121
01:21:05,280 --> 01:21:07,280
such a proxy could still be advertised

2122
01:21:07,280 --> 01:21:10,800
to make the client send its data

2123
01:21:10,800 --> 01:21:12,480
up around another services so that

2124
01:21:12,480 --> 01:21:15,199
service does an up around through up

2125
01:21:15,199 --> 01:21:16,400
through um

2126
01:21:16,400 --> 01:21:17,920
attack so the attacker at least sees the

2127
01:21:17,920 --> 01:21:19,840
traffic pattern

2128
01:21:19,840 --> 01:21:22,320
um the latest version now has a few

2129
01:21:22,320 --> 01:21:23,760
words on that

2130
01:21:23,760 --> 01:21:25,760
um among other things saying that yeah

2131
01:21:25,760 --> 01:21:27,280
if you want to protect against that you

2132
01:21:27,280 --> 01:21:30,159
better also use dns sec and look at what

2133
01:21:30,159 --> 01:21:32,400
routing advertisements you take because

2134
01:21:32,400 --> 01:21:34,000
if you don't watch for that you might

2135
01:21:34,000 --> 01:21:36,159
wind up in the same situation

2136
01:21:36,159 --> 01:21:38,719
but basically it's up to the application

2137
01:21:38,719 --> 01:21:40,639
which requirements to place on the

2138
01:21:40,639 --> 01:21:42,480
statement

2139
01:21:42,480 --> 01:21:44,400
because the

2140
01:21:44,400 --> 01:21:46,000
fundamental security properties are

2141
01:21:46,000 --> 01:21:49,280
already upheld by the

2142
01:21:49,280 --> 01:21:51,040
requirement that the serve the proxy

2143
01:21:51,040 --> 01:21:53,040
still needs to

2144
01:21:53,040 --> 01:21:56,600
provide good credentials

2145
01:21:57,440 --> 01:21:59,520
now so far this

2146
01:21:59,520 --> 01:22:02,400
resolves the long-standing issue of

2147
01:22:02,400 --> 01:22:04,719
reconciling the various co-op plus

2148
01:22:04,719 --> 01:22:07,440
something schemes

2149
01:22:07,440 --> 01:22:09,440
and maybe that's enough

2150
01:22:09,440 --> 01:22:11,360
maybe we just want to look into a few

2151
01:22:11,360 --> 01:22:12,880
more things that the document also

2152
01:22:12,880 --> 01:22:14,159
provides

2153
01:22:14,159 --> 01:22:15,760
in particular that

2154
01:22:15,760 --> 01:22:17,840
someone else might provide that proxy

2155
01:22:17,840 --> 01:22:19,920
service for example a resource directory

2156
01:22:19,920 --> 01:22:22,159
that

2157
01:22:22,719 --> 01:22:24,960
allows cross-proximing between coop and

2158
01:22:24,960 --> 01:22:27,040
core plus tcp connections

2159
01:22:27,040 --> 01:22:31,360
and also we still send a few bytes more

2160
01:22:31,360 --> 01:22:33,679
so on the on the pro on the proxy side

2161
01:22:33,679 --> 01:22:35,520
this is rather straightforward because

2162
01:22:35,520 --> 01:22:37,840
generally this statement can be produced

2163
01:22:37,840 --> 01:22:40,639
by any other party in particular those

2164
01:22:40,639 --> 01:22:43,840
that are in the discovery path

2165
01:22:43,840 --> 01:22:45,760
and the rest is really up to the

2166
01:22:45,760 --> 01:22:49,440
security requirements of the application

2167
01:22:49,520 --> 01:22:51,760
uh the line on proxy usability i won't

2168
01:22:51,760 --> 01:22:54,159
talk say much more other than

2169
01:22:54,159 --> 01:22:56,320
yeah of course if there are

2170
01:22:56,320 --> 01:22:58,400
clients or if there are proxies already

2171
01:22:58,400 --> 01:23:00,639
in the same in this whole game things

2172
01:23:00,639 --> 01:23:03,440
will still keep working

2173
01:23:03,440 --> 01:23:04,840
on the topic of

2174
01:23:04,840 --> 01:23:07,600
um optimizing away those additional

2175
01:23:07,600 --> 01:23:10,320
bytes that we might have on the wire

2176
01:23:10,320 --> 01:23:11,360
there is a

2177
01:23:11,360 --> 01:23:13,199
specialization of that option that says

2178
01:23:13,199 --> 01:23:14,000
that

2179
01:23:14,000 --> 01:23:15,600
this that the

2180
01:23:15,600 --> 01:23:18,880
host is generally not doing any name and

2181
01:23:18,880 --> 01:23:21,360
protocol protocol-based virtual hosting

2182
01:23:21,360 --> 01:23:22,639
if the host

2183
01:23:22,639 --> 01:23:24,719
advertises this property then the client

2184
01:23:24,719 --> 01:23:26,239
can just

2185
01:23:26,239 --> 01:23:28,639
do away with that proxy scheme option

2186
01:23:28,639 --> 01:23:31,199
that it would otherwise have to send

2187
01:23:31,199 --> 01:23:33,520
looks a bit like a last thing on the

2188
01:23:33,520 --> 01:23:37,360
wire i prefer to think of it as

2189
01:23:37,360 --> 01:23:40,320
an agreed on compression

2190
01:23:40,320 --> 01:23:43,520
um basically similar to schick because

2191
01:23:43,520 --> 01:23:46,639
we establish a context although not um

2192
01:23:46,639 --> 01:23:49,360
all not statically but dynamically

2193
01:23:49,360 --> 01:23:51,840
and that context then says

2194
01:23:51,840 --> 01:23:54,000
there is an implication that

2195
01:23:54,000 --> 01:23:55,790
your ihos that you arrive um

2196
01:23:55,790 --> 01:23:56,880
[Music]

2197
01:23:56,880 --> 01:23:58,400
sorry that proxy scheme and your eye

2198
01:23:58,400 --> 01:24:01,120
host are already always that

2199
01:24:01,120 --> 01:24:02,960
but the security implications are a bit

2200
01:24:02,960 --> 01:24:04,320
harder to

2201
01:24:04,320 --> 01:24:06,080
manage and there's still ongoing

2202
01:24:06,080 --> 01:24:09,040
exploration on that

2203
01:24:10,480 --> 01:24:11,280
which

2204
01:24:11,280 --> 01:24:13,120
probably boils down to

2205
01:24:13,120 --> 01:24:14,960
such statements only being acceptable

2206
01:24:14,960 --> 01:24:18,320
when they come from the original source

2207
01:24:18,320 --> 01:24:19,760
which might

2208
01:24:19,760 --> 01:24:20,800
be

2209
01:24:20,800 --> 01:24:24,000
which is probably okay

2210
01:24:25,040 --> 01:24:28,080
so to summarize um i think it's not too

2211
01:24:28,080 --> 01:24:29,760
hard to

2212
01:24:29,760 --> 01:24:31,760
get all of this going especially because

2213
01:24:31,760 --> 01:24:33,280
most of the options that we need are

2214
01:24:33,280 --> 01:24:34,800
already there

2215
01:24:34,800 --> 01:24:36,480
we can do this without breaking the

2216
01:24:36,480 --> 01:24:38,800
general rules of the web that is do not

2217
01:24:38,800 --> 01:24:40,960
just introduce url

2218
01:24:40,960 --> 01:24:43,440
aliasing

2219
01:24:43,440 --> 01:24:44,800
yep um

2220
01:24:44,800 --> 01:24:47,199
and i think it can and should be done

2221
01:24:47,199 --> 01:24:49,199
the question is um

2222
01:24:49,199 --> 01:24:51,520
what am i missing and is this something

2223
01:24:51,520 --> 01:24:53,520
that should go through this working

2224
01:24:53,520 --> 01:24:56,520
group

2225
01:24:58,400 --> 01:25:02,080
thank you any comment

2226
01:25:02,639 --> 01:25:05,120
question

2227
01:25:05,520 --> 01:25:07,920
carsten

2228
01:25:08,560 --> 01:25:10,480
yeah chairhead off

2229
01:25:10,480 --> 01:25:14,320
the answers are yes and yes

2230
01:25:17,360 --> 01:25:20,679
let's go

2231
01:25:26,320 --> 01:25:28,719
go ahead

2232
01:25:28,719 --> 01:25:30,639
yeah okay sorry

2233
01:25:30,639 --> 01:25:32,719
um yeah i was just thinking uh doing it

2234
01:25:32,719 --> 01:25:35,920
in this working group sounds good and

2235
01:25:35,920 --> 01:25:38,239
it might require indeed

2236
01:25:38,239 --> 01:25:40,560
yeah a document to clarify that use of

2237
01:25:40,560 --> 01:25:41,760
the

2238
01:25:41,760 --> 01:25:44,000
proxy option

2239
01:25:44,000 --> 01:25:46,560
so um yeah it sounds sounds useful at

2240
01:25:46,560 --> 01:25:50,840
least to do it in this way

2241
01:25:54,800 --> 01:25:57,920
thank you uh cheretov uh yes and yes

2242
01:25:57,920 --> 01:25:59,360
from my side too

2243
01:25:59,360 --> 01:26:01,120
anyway

2244
01:26:01,120 --> 01:26:02,320
uh

2245
01:26:02,320 --> 01:26:04,080
okay i'd just like to have a first

2246
01:26:04,080 --> 01:26:06,400
feeling from the room and ask a usual

2247
01:26:06,400 --> 01:26:08,400
question we can use the

2248
01:26:08,400 --> 01:26:11,280
very sense tool

2249
01:26:12,000 --> 01:26:14,239
so i'm going to ask who thinks the draft

2250
01:26:14,239 --> 01:26:16,560
is ready for working group adoption

2251
01:26:16,560 --> 01:26:20,280
race and agree

2252
01:26:25,600 --> 01:26:28,400
there also was a comment from the chat

2253
01:26:28,400 --> 01:26:29,360
ari

2254
01:26:29,360 --> 01:26:31,440
said he needs a solution and the

2255
01:26:31,440 --> 01:26:35,480
presented solution looks good

2256
01:26:41,280 --> 01:26:42,639
okay

2257
01:26:42,639 --> 01:26:43,520
there's

2258
01:26:43,520 --> 01:26:45,199
10 raised hand

2259
01:26:45,199 --> 01:26:49,840
and 0 do not raise hand for the minutes

2260
01:26:49,840 --> 01:26:52,080
we'll confirm this to the list i think

2261
01:26:52,080 --> 01:26:54,400
we can literally go for a confirmation

2262
01:26:54,400 --> 01:26:56,719
of adoption considering this of course

2263
01:26:56,719 --> 01:27:00,239
any further feedback is welcome

2264
01:27:00,239 --> 01:27:01,679
thank you

2265
01:27:01,679 --> 01:27:04,920
thank you

2266
01:27:05,280 --> 01:27:08,000
okay uh having eaten five minutes from

2267
01:27:08,000 --> 01:27:09,920
flex time we are still good on time i

2268
01:27:09,920 --> 01:27:11,440
think and

2269
01:27:11,440 --> 01:27:12,639
you can move on with the next

2270
01:27:12,639 --> 01:27:15,520
presentation christian

2271
01:27:15,920 --> 01:27:18,920
yep

2272
01:27:22,400 --> 01:27:25,360
so this next slot is about

2273
01:27:25,360 --> 01:27:27,520
non-traditional responses

2274
01:27:27,520 --> 01:27:32,080
where i've recently joined the

2275
01:27:32,080 --> 01:27:33,520
ah now

2276
01:27:33,520 --> 01:27:37,120
um who's author team i recently joined

2277
01:27:37,120 --> 01:27:38,159
and

2278
01:27:38,159 --> 01:27:40,960
again i'd like to start with kind of

2279
01:27:40,960 --> 01:27:43,280
setting out the problem space here

2280
01:27:43,280 --> 01:27:45,280
that is that um

2281
01:27:45,280 --> 01:27:47,199
without defining what it is

2282
01:27:47,199 --> 01:27:49,679
we've had a few variations on how

2283
01:27:49,679 --> 01:27:52,080
responses come in to coop requests so

2284
01:27:52,080 --> 01:27:52,800
the

2285
01:27:52,800 --> 01:27:56,639
simple thing that happens in in

2286
01:27:56,639 --> 01:27:58,639
at least in my application like 99 of

2287
01:27:58,639 --> 01:28:00,239
requests

2288
01:28:00,239 --> 01:28:01,840
is that there is a single request and

2289
01:28:01,840 --> 01:28:03,440
there's one response and if that

2290
01:28:03,440 --> 01:28:04,719
response

2291
01:28:04,719 --> 01:28:06,960
is retransmitted that the retransmitted

2292
01:28:06,960 --> 01:28:09,040
version might be slightly different but

2293
01:28:09,040 --> 01:28:10,639
the client still processes only one

2294
01:28:10,639 --> 01:28:12,159
response

2295
01:28:12,159 --> 01:28:14,000
now multicast has been around from the

2296
01:28:14,000 --> 01:28:15,440
start which means that there are

2297
01:28:15,440 --> 01:28:16,880
different responses coming in from

2298
01:28:16,880 --> 01:28:18,639
different source addresses

2299
01:28:18,639 --> 01:28:20,800
observation was um

2300
01:28:20,800 --> 01:28:24,000
part of co-op almost from the beginning

2301
01:28:24,000 --> 01:28:26,800
indicate um which allows the server to

2302
01:28:26,800 --> 01:28:30,480
send more than one response over time

2303
01:28:30,480 --> 01:28:31,840
um

2304
01:28:31,840 --> 01:28:33,760
and then a few documents

2305
01:28:33,760 --> 01:28:36,639
explored how else responses could come

2306
01:28:36,639 --> 01:28:39,120
in so for example co-op over sms was to

2307
01:28:39,120 --> 01:28:41,199
my knowledge the first document

2308
01:28:41,199 --> 01:28:42,800
that described that there could be

2309
01:28:42,800 --> 01:28:44,639
something like a triangular request

2310
01:28:44,639 --> 01:28:46,880
where you send a request

2311
01:28:46,880 --> 01:28:49,199
from the client to the server over sms

2312
01:28:49,199 --> 01:28:51,040
but also indicate that you would pretty

2313
01:28:51,040 --> 01:28:52,719
please want the response

2314
01:28:52,719 --> 01:28:55,280
sent over udp down to that that

2315
01:28:55,280 --> 01:28:56,800
particular address

2316
01:28:56,800 --> 01:29:00,560
which would be indicated in the request

2317
01:29:01,360 --> 01:29:03,360
and that was taken up later in in core

2318
01:29:03,360 --> 01:29:05,199
responses

2319
01:29:05,199 --> 01:29:07,199
the endpoint id draft that was around i

2320
01:29:07,199 --> 01:29:08,840
think around

2321
01:29:08,840 --> 01:29:10,800
2017 um

2322
01:29:10,800 --> 01:29:12,639
had options for observations that

2323
01:29:12,639 --> 01:29:14,560
changed the server's address so then

2324
01:29:14,560 --> 01:29:17,360
again a later response would come in

2325
01:29:17,360 --> 01:29:18,880
from my next address that the client

2326
01:29:18,880 --> 01:29:22,639
wasn't originally expecting it from

2327
01:29:22,639 --> 01:29:25,840
and more recently uh the

2328
01:29:25,840 --> 01:29:28,800
uh the multiblocks um rfc and the mo and

2329
01:29:28,800 --> 01:29:32,320
the um proxy for group communication

2330
01:29:32,320 --> 01:29:35,040
draft um

2331
01:29:36,080 --> 01:29:38,880
use mechanisms by which a client can

2332
01:29:38,880 --> 01:29:41,520
tell the server that it is really okay

2333
01:29:41,520 --> 01:29:44,400
to send a few responses as long as the

2334
01:29:44,400 --> 01:29:46,320
regular flow control which is unaffected

2335
01:29:46,320 --> 01:29:47,520
by any of this

2336
01:29:47,520 --> 01:29:48,800
is upheld

2337
01:29:48,800 --> 01:29:50,840
and that the client would be willing to

2338
01:29:50,840 --> 01:29:53,120
receive particular

2339
01:29:53,120 --> 01:29:56,000
a particular set of messages

2340
01:29:56,000 --> 01:29:57,840
what they all have in common is that the

2341
01:29:57,840 --> 01:29:59,520
responses

2342
01:29:59,520 --> 01:30:02,320
arrive on the same token

2343
01:30:02,320 --> 01:30:04,719
and i think it makes sense to call all

2344
01:30:04,719 --> 01:30:07,199
of these are non-traditional responses

2345
01:30:07,199 --> 01:30:10,000
because in all of these cases something

2346
01:30:10,000 --> 01:30:13,120
comes back that was not ex requested

2347
01:30:13,120 --> 01:30:15,280
precisely like that through precisely

2348
01:30:15,280 --> 01:30:17,759
that channel

2349
01:30:18,560 --> 01:30:21,120
so the definition that is now in in the

2350
01:30:21,120 --> 01:30:22,320
responses draft is that a

2351
01:30:22,320 --> 01:30:24,400
non-traditional response is a response

2352
01:30:24,400 --> 01:30:26,159
that is not the single response that was

2353
01:30:26,159 --> 01:30:28,000
generated for request that was received

2354
01:30:28,000 --> 01:30:30,159
on the same transport

2355
01:30:30,159 --> 01:30:31,920
in particular that means if there's one

2356
01:30:31,920 --> 01:30:33,280
response to request that is

2357
01:30:33,280 --> 01:30:35,040
non-traditional all responses are

2358
01:30:35,040 --> 01:30:36,719
non-traditional

2359
01:30:36,719 --> 01:30:37,520
but

2360
01:30:37,520 --> 01:30:39,199
there might be one that is that is

2361
01:30:39,199 --> 01:30:41,360
standing out not necessarily by anything

2362
01:30:41,360 --> 01:30:43,600
the transport provides because any

2363
01:30:43,600 --> 01:30:46,400
um additional response just looks like

2364
01:30:46,400 --> 01:30:47,679
the others

2365
01:30:47,679 --> 01:30:50,239
but quite possibly only one response

2366
01:30:50,239 --> 01:30:52,159
matches the request in some sense

2367
01:30:52,159 --> 01:30:53,360
because

2368
01:30:53,360 --> 01:30:55,920
there are the others might have say

2369
01:30:55,920 --> 01:30:58,960
options that clearly deviate from what

2370
01:30:58,960 --> 01:31:00,960
is okay to respond with so there's an

2371
01:31:00,960 --> 01:31:04,000
additional definition and

2372
01:31:04,000 --> 01:31:07,199
looking at it now i might want to

2373
01:31:07,199 --> 01:31:09,199
flip terminology to not have too many

2374
01:31:09,199 --> 01:31:11,120
negations in there but a matching

2375
01:31:11,120 --> 01:31:13,600
response is one that

2376
01:31:13,600 --> 01:31:15,360
works well for the original request and

2377
01:31:15,360 --> 01:31:16,800
has no options

2378
01:31:16,800 --> 01:31:19,840
that make it incompatible so for example

2379
01:31:19,840 --> 01:31:22,000
if um and that is what's been using in

2380
01:31:22,000 --> 01:31:25,120
the block wise request um clockwise rfc

2381
01:31:25,120 --> 01:31:27,840
and new blocks sorry

2382
01:31:27,840 --> 01:31:29,840
9177

2383
01:31:29,840 --> 01:31:31,520
is that a request is sent for a

2384
01:31:31,520 --> 01:31:34,080
particular block and one of the many

2385
01:31:34,080 --> 01:31:35,760
responses that come back

2386
01:31:35,760 --> 01:31:38,239
one response is indicating that

2387
01:31:38,239 --> 01:31:40,639
particular block again and the others

2388
01:31:40,639 --> 01:31:43,040
just include block options for later

2389
01:31:43,040 --> 01:31:45,679
blocks or earlier blocks but blocks that

2390
01:31:45,679 --> 01:31:49,040
are clearly not that one

2391
01:31:53,360 --> 01:31:55,679
so the document as it is now

2392
01:31:55,679 --> 01:31:57,840
does a few things that could all be

2393
01:31:57,840 --> 01:32:01,280
useful on their own and

2394
01:32:01,280 --> 01:32:03,520
anticipating the next slide this is what

2395
01:32:03,520 --> 01:32:05,600
we'll need a bit of guidance for one

2396
01:32:05,600 --> 01:32:08,880
thing is it provides terminology so

2397
01:32:08,880 --> 01:32:12,880
right now every document that somehow

2398
01:32:12,880 --> 01:32:15,120
introduces non-traditional responses has

2399
01:32:15,120 --> 01:32:18,239
to reiterate on the topics of tokens

2400
01:32:18,239 --> 01:32:20,480
has to say again that and by the way

2401
01:32:20,480 --> 01:32:22,480
flow control of this is all still as in

2402
01:32:22,480 --> 01:32:25,040
rfc 7252 or any extensions to flow

2403
01:32:25,040 --> 01:32:26,880
control

2404
01:32:26,880 --> 01:32:29,520
and cons and nons work as they always

2405
01:32:29,520 --> 01:32:31,120
have

2406
01:32:31,120 --> 01:32:33,679
so this document could provide

2407
01:32:33,679 --> 01:32:35,840
terminology for this and there are two

2408
01:32:35,840 --> 01:32:37,360
concrete drafts where i think it would

2409
01:32:37,360 --> 01:32:39,920
be very useful to pivot over to this

2410
01:32:39,920 --> 01:32:42,159
provided this is something that

2411
01:32:42,159 --> 01:32:43,920
we can this is a direction we continue

2412
01:32:43,920 --> 01:32:46,320
going in

2413
01:32:46,320 --> 01:32:48,560
same goes for implementations

2414
01:32:48,560 --> 01:32:49,679
so um

2415
01:32:49,679 --> 01:32:52,560
i've seen implementations of

2416
01:32:52,560 --> 01:32:54,960
observation of various quality varying

2417
01:32:54,960 --> 01:32:56,880
quality in different

2418
01:32:56,880 --> 01:33:00,800
um in different implementations and

2419
01:33:01,120 --> 01:33:03,679
these often don't work well together

2420
01:33:03,679 --> 01:33:06,080
with for example multicast

2421
01:33:06,080 --> 01:33:08,320
and if there is a general concept of

2422
01:33:08,320 --> 01:33:10,400
non-traditional responses and how these

2423
01:33:10,400 --> 01:33:12,800
work i think that this can

2424
01:33:12,800 --> 01:33:16,000
um also go into implementations and they

2425
01:33:16,000 --> 01:33:18,000
would then just say that ah we are

2426
01:33:18,000 --> 01:33:19,120
expecting

2427
01:33:19,120 --> 01:33:20,840
several um

2428
01:33:20,840 --> 01:33:22,960
responses um

2429
01:33:22,960 --> 01:33:25,280
client implementers please um please

2430
01:33:25,280 --> 01:33:26,960
provide your hooks in case a

2431
01:33:26,960 --> 01:33:29,280
non-traditional response comes in or

2432
01:33:29,280 --> 01:33:31,360
tell the stack how it how it's handled

2433
01:33:31,360 --> 01:33:33,360
in this particular case without the need

2434
01:33:33,360 --> 01:33:35,520
for the stack to implement down every

2435
01:33:35,520 --> 01:33:38,960
one of them and their combinations

2436
01:33:40,639 --> 01:33:43,840
the current draft also defines a few

2437
01:33:43,840 --> 01:33:46,320
a few options for example one by which

2438
01:33:46,320 --> 01:33:48,560
your client can generally request

2439
01:33:48,560 --> 01:33:51,600
several more responses over a particular

2440
01:33:51,600 --> 01:33:54,239
over some time so

2441
01:33:54,239 --> 01:33:55,920
that's the okay that's the fourth bullet

2442
01:33:55,920 --> 01:33:57,760
here these options could be by

2443
01:33:57,760 --> 01:33:59,120
applications

2444
01:33:59,120 --> 01:34:01,920
and the draft also describes that there

2445
01:34:01,920 --> 01:34:04,880
could be pre-configured

2446
01:34:04,880 --> 01:34:07,360
pre-configured requests which means that

2447
01:34:07,360 --> 01:34:10,080
there isn't there are no added options

2448
01:34:10,080 --> 01:34:12,159
it's just

2449
01:34:12,159 --> 01:34:14,080
client and server agree on a particular

2450
01:34:14,080 --> 01:34:16,560
set of configuration values and then

2451
01:34:16,560 --> 01:34:19,280
those responses are just sent using

2452
01:34:19,280 --> 01:34:20,960
based on the terminology established

2453
01:34:20,960 --> 01:34:22,320
here

2454
01:34:22,320 --> 01:34:25,280
uh we have carsten in the queue

2455
01:34:25,280 --> 01:34:27,679
yeah i just have one more item for the

2456
01:34:27,679 --> 01:34:29,679
list

2457
01:34:29,679 --> 01:34:32,560
since our security

2458
01:34:32,560 --> 01:34:35,520
models need to be able to bind responses

2459
01:34:35,520 --> 01:34:37,600
to requests

2460
01:34:37,600 --> 01:34:40,239
we need to understand

2461
01:34:40,239 --> 01:34:42,719
how the security models are impacted or

2462
01:34:42,719 --> 01:34:44,800
on the other hand provide guidance for

2463
01:34:44,800 --> 01:34:47,199
the security models to handle

2464
01:34:47,199 --> 01:34:50,638
how to handle these responses

2465
01:34:52,080 --> 01:34:56,040
yes very much yes

2466
01:35:00,719 --> 01:35:01,840
okay

2467
01:35:01,840 --> 01:35:04,320
so the questions that we'd like to ask

2468
01:35:04,320 --> 01:35:07,199
is a um are non-traditional responses

2469
01:35:07,199 --> 01:35:08,880
something that this working group is

2470
01:35:08,880 --> 01:35:11,280
interested in working in general

2471
01:35:11,280 --> 01:35:12,480
and then b

2472
01:35:12,480 --> 01:35:14,800
if it is is this document the right

2473
01:35:14,800 --> 01:35:16,639
taking the right approach so

2474
01:35:16,639 --> 01:35:18,080
um

2475
01:35:18,080 --> 01:35:20,960
do we um do we provide con

2476
01:35:20,960 --> 01:35:23,360
concepts that are useful do we provide

2477
01:35:23,360 --> 01:35:25,280
options that are useful do you want to

2478
01:35:25,280 --> 01:35:28,239
keep all of that in

2479
01:35:28,239 --> 01:35:29,040
um

2480
01:35:29,040 --> 01:35:32,000
apart from the interest interest topic

2481
01:35:32,000 --> 01:35:34,080
there's also the question of do we

2482
01:35:34,080 --> 01:35:36,639
conflict with anything so so far i've

2483
01:35:36,639 --> 01:35:39,679
compared this against everything i found

2484
01:35:39,679 --> 01:35:42,480
that did multiple responses and i think

2485
01:35:42,480 --> 01:35:44,800
it's matching pretty well but

2486
01:35:44,800 --> 01:35:47,440
we might have overlooked something and

2487
01:35:47,440 --> 01:35:49,520
um so this is something that i would

2488
01:35:49,520 --> 01:35:51,040
like to have checked

2489
01:35:51,040 --> 01:35:53,040
and then the remaining question is

2490
01:35:53,040 --> 01:35:56,719
basically aof any other feedback

2491
01:35:56,719 --> 01:35:58,560
so yeah thanks for your attentions i

2492
01:35:58,560 --> 01:36:00,639
would be very glad to hear questions on

2493
01:36:00,639 --> 01:36:03,920
this on feedback

2494
01:36:07,040 --> 01:36:11,080
any questions comments

2495
01:36:13,280 --> 01:36:15,760
let's go

2496
01:36:15,760 --> 01:36:18,080
yeah i think these are good questions i

2497
01:36:18,080 --> 01:36:20,400
find them difficult to answer

2498
01:36:20,400 --> 01:36:21,840
at this moment

2499
01:36:21,840 --> 01:36:24,400
but but i wanted to ask one question uh

2500
01:36:24,400 --> 01:36:26,480
from the implementer perspective so you

2501
01:36:26,480 --> 01:36:27,679
propose that

2502
01:36:27,679 --> 01:36:29,600
by introducing this concept of

2503
01:36:29,600 --> 01:36:32,560
non-traditional response that it

2504
01:36:32,560 --> 01:36:35,040
would improve also the software

2505
01:36:35,040 --> 01:36:38,080
quality in that way but because the the

2506
01:36:38,080 --> 01:36:39,760
stack would have a

2507
01:36:39,760 --> 01:36:42,400
sort of catch-all

2508
01:36:42,400 --> 01:36:44,960
function or callback or whatever for the

2509
01:36:44,960 --> 01:36:47,199
non-traditional response case

2510
01:36:47,199 --> 01:36:49,520
yeah it doesn't know how to handle it

2511
01:36:49,520 --> 01:36:51,600
otherwise yeah

2512
01:36:51,600 --> 01:36:53,760
so the the stack would still need to be

2513
01:36:53,760 --> 01:36:56,080
so what right now happens is the stack

2514
01:36:56,080 --> 01:36:58,400
needs to be aware of the

2515
01:36:58,400 --> 01:37:00,800
full semantics of all the

2516
01:37:00,800 --> 01:37:03,600
non-traditional response options

2517
01:37:03,600 --> 01:37:06,880
so it needs to handle um the proxy the

2518
01:37:06,880 --> 01:37:09,280
the multicast proxy option needs to

2519
01:37:09,280 --> 01:37:11,199
handle observation

2520
01:37:11,199 --> 01:37:12,639
and

2521
01:37:12,639 --> 01:37:15,119
with that terminology the stack could

2522
01:37:15,119 --> 01:37:17,440
just have a list of options with their

2523
01:37:17,440 --> 01:37:19,760
respective rules of how long how many

2524
01:37:19,760 --> 01:37:22,239
responses or how long responses come in

2525
01:37:22,239 --> 01:37:24,639
without necessarily having to implement

2526
01:37:24,639 --> 01:37:26,800
all the nitty-gritty details and can

2527
01:37:26,800 --> 01:37:30,239
leave some of that to the application

2528
01:37:31,440 --> 01:37:34,000
okay well still they need to think about

2529
01:37:34,000 --> 01:37:35,600
that but that sounds useful at least

2530
01:37:35,600 --> 01:37:37,360
there so it's more prepared for the

2531
01:37:37,360 --> 01:37:39,199
future in a way if

2532
01:37:39,199 --> 01:37:40,560
more things will be defined in the

2533
01:37:40,560 --> 01:37:41,520
future

2534
01:37:41,520 --> 01:37:42,560
yeah

2535
01:37:42,560 --> 01:37:46,040
okay thanks

2536
01:37:48,159 --> 01:37:51,440
marco cherhatov i've read the the last

2537
01:37:51,440 --> 01:37:53,440
two versions of the draft and i plan to

2538
01:37:53,440 --> 01:37:55,840
give out review anyway i couldn't see

2539
01:37:55,840 --> 01:37:58,239
any conflict uh really with other

2540
01:37:58,239 --> 01:37:59,600
documents and

2541
01:37:59,600 --> 01:38:00,960
actually i think it's good to have a

2542
01:38:00,960 --> 01:38:03,600
single framework as reference point for

2543
01:38:03,600 --> 01:38:06,400
terminology taxonomy and concepts

2544
01:38:06,400 --> 01:38:08,159
that are already used here and there any

2545
01:38:08,159 --> 01:38:10,320
way and otherwise we risk dialects of

2546
01:38:10,320 --> 01:38:12,239
this concept to develop and so on and

2547
01:38:12,239 --> 01:38:15,879
just create confusion

2548
01:38:16,560 --> 01:38:18,400
thank you

2549
01:38:18,400 --> 01:38:20,000
hank was the question or were you just

2550
01:38:20,000 --> 01:38:23,000
stretching

2551
01:38:42,800 --> 01:38:47,080
looks like chatting going on

2552
01:39:01,920 --> 01:39:04,320
okay so i suppose we will see a next

2553
01:39:04,320 --> 01:39:06,800
version posted anytime soon or in the

2554
01:39:06,800 --> 01:39:08,080
next few months

2555
01:39:08,080 --> 01:39:09,600
yeah

2556
01:39:09,600 --> 01:39:10,400
thanks

2557
01:39:10,400 --> 01:39:12,800
okay thank you

2558
01:39:12,800 --> 01:39:14,960
so could we have a show of hands for the

2559
01:39:14,960 --> 01:39:17,520
first question

2560
01:39:18,000 --> 01:39:20,000
say it again question

2561
01:39:20,000 --> 01:39:22,159
could we have a show of hands for the

2562
01:39:22,159 --> 01:39:24,320
first question

2563
01:39:24,320 --> 01:39:27,360
in these

2564
01:39:32,320 --> 01:39:35,119
will you type that or do i type that

2565
01:39:35,119 --> 01:39:36,400
i'm typing

2566
01:39:36,400 --> 01:39:39,400
good

2567
01:39:46,639 --> 01:39:48,320
and of course my next question where you

2568
01:39:48,320 --> 01:39:50,639
are stereotyping would be

2569
01:39:50,639 --> 01:39:52,800
who would be interested to review such a

2570
01:39:52,800 --> 01:39:56,639
document so just type in the chat

2571
01:39:56,639 --> 01:39:58,159
if you

2572
01:39:58,159 --> 01:40:01,759
could help reviewing that

2573
01:40:01,840 --> 01:40:03,440
so i'm going to ask is the working group

2574
01:40:03,440 --> 01:40:04,639
interested in general work and

2575
01:40:04,639 --> 01:40:06,480
non-traditional responses raise hand if

2576
01:40:06,480 --> 01:40:09,480
agree

2577
01:40:20,960 --> 01:40:22,480
and just confirm it in the chat i'm

2578
01:40:22,480 --> 01:40:25,360
interested to review

2579
01:40:29,840 --> 01:40:32,800
so the poll says

2580
01:40:32,800 --> 01:40:34,239
nine race end

2581
01:40:34,239 --> 01:40:37,759
zero do not raise hand

2582
01:40:38,960 --> 01:40:40,800
10 raise end okay let's wait a few

2583
01:40:40,800 --> 01:40:43,280
seconds more

2584
01:40:46,080 --> 01:40:47,520
than raisin

2585
01:40:47,520 --> 01:40:49,199
and zero do not raise end for the

2586
01:40:49,199 --> 01:40:50,620
minutes

2587
01:40:50,620 --> 01:40:52,560
[Music]

2588
01:40:52,560 --> 01:40:55,440
okay thank you

2589
01:40:58,639 --> 01:41:00,400
and for the minutes also you're in the

2590
01:41:00,400 --> 01:41:01,679
chat said

2591
01:41:01,679 --> 01:41:04,800
you can review this document and also

2592
01:41:04,800 --> 01:41:08,400
esco at some point

2593
01:41:11,360 --> 01:41:13,760
there's a comment from david navarro in

2594
01:41:13,760 --> 01:41:15,280
in the chat

2595
01:41:15,280 --> 01:41:17,679
i'm kind of discovering this response to

2596
01:41:17,679 --> 01:41:20,639
star options they look like a vector for

2597
01:41:20,639 --> 01:41:22,239
those attacks should the document

2598
01:41:22,239 --> 01:41:23,520
address it

2599
01:41:23,520 --> 01:41:27,840
yes that's the security considerations

2600
01:41:34,800 --> 01:41:37,280
all right

2601
01:41:37,440 --> 01:41:41,199
okay thank you thank you christian

2602
01:41:41,199 --> 01:41:44,320
last but not least

2603
01:41:44,800 --> 01:41:48,880
martin about dns over co-op

2604
01:41:59,199 --> 01:42:02,400
okay um yeah i'm talking about uh dns

2605
01:42:02,400 --> 01:42:05,360
queries over corp um together with and

2606
01:42:05,360 --> 01:42:07,199
also representing my other co-authors

2607
01:42:07,199 --> 01:42:09,520
which are on this slide right now

2608
01:42:09,520 --> 01:42:11,679
um yeah i first want to talk of course a

2609
01:42:11,679 --> 01:42:13,600
little bit about the concept and then

2610
01:42:13,600 --> 01:42:15,920
update you on what we did since the last

2611
01:42:15,920 --> 01:42:17,760
time we spoke in this

2612
01:42:17,760 --> 01:42:19,679
working group which was the

2613
01:42:19,679 --> 01:42:22,320
an interim last year

2614
01:42:22,320 --> 01:42:24,480
then

2615
01:42:24,480 --> 01:42:26,480
show some of our preliminary evaluation

2616
01:42:26,480 --> 01:42:30,320
we did on the various dns transports

2617
01:42:30,320 --> 01:42:32,880
we could use and

2618
01:42:32,880 --> 01:42:35,119
then go over into the discussion where i

2619
01:42:35,119 --> 01:42:37,199
want to discuss a new content format

2620
01:42:37,199 --> 01:42:40,159
caching options

2621
01:42:40,159 --> 01:42:42,480
if we need to account for observe or

2622
01:42:42,480 --> 01:42:45,600
so-called server push if we take https

2623
01:42:45,600 --> 01:42:46,719
lingo

2624
01:42:46,719 --> 01:42:48,960
and

2625
01:42:48,960 --> 01:42:51,040
the question of how abstract the draft

2626
01:42:51,040 --> 01:42:53,679
should be or how concrete

2627
01:42:53,679 --> 01:42:57,360
um yeah for the motivation basically we

2628
01:42:57,360 --> 01:42:59,600
basically just want to uh protect

2629
01:42:59,600 --> 01:43:01,840
against eave dropping when doing dns

2630
01:43:01,840 --> 01:43:04,480
requests in with iot devices and of

2631
01:43:04,480 --> 01:43:06,239
course the usual way to do it is to

2632
01:43:06,239 --> 01:43:08,560
encrypt the name resolution

2633
01:43:08,560 --> 01:43:10,960
and uh basically there are already some

2634
01:43:10,960 --> 01:43:12,719
solutions for that of course which is

2635
01:43:12,719 --> 01:43:16,320
dns over https dns over tls

2636
01:43:16,320 --> 01:43:19,679
then newly added the sdns over quick

2637
01:43:19,679 --> 01:43:22,880
and dns over dtls but

2638
01:43:22,880 --> 01:43:24,400
all of these have problems when it comes

2639
01:43:24,400 --> 01:43:26,960
to the iot um the first two of course uh

2640
01:43:26,960 --> 01:43:29,280
use tcp which conflicts with some of our

2641
01:43:29,280 --> 01:43:31,600
resource constraints we face in the

2642
01:43:31,600 --> 01:43:33,199
in the constraint iot

2643
01:43:33,199 --> 01:43:35,600
uh dns over quilt has similar problems

2644
01:43:35,600 --> 01:43:37,119
when it comes to that

2645
01:43:37,119 --> 01:43:40,320
and dns over dtls has a so-called path

2646
01:43:40,320 --> 01:43:42,800
and deal problem which is even amplified

2647
01:43:42,800 --> 01:43:44,480
when it comes to constraint link layer

2648
01:43:44,480 --> 01:43:46,679
videos with like the ones we face in

2649
01:43:46,679 --> 01:43:49,840
802154 or lower one

2650
01:43:49,840 --> 01:43:52,960
so our proposal is to do dns over co-op

2651
01:43:52,960 --> 01:43:54,880
we can then base your user encrypted

2652
01:43:54,880 --> 01:43:58,800
communication based on ddls or oscore

2653
01:43:58,800 --> 01:44:00,639
use the block-wise message transfer to

2654
01:44:00,639 --> 01:44:03,840
overcome the plasm due problem and also

2655
01:44:03,840 --> 01:44:06,159
share the system resources with co-op

2656
01:44:06,159 --> 01:44:08,080
applications so we can basically save

2657
01:44:08,080 --> 01:44:10,320
some memory by using the same buffers

2658
01:44:10,320 --> 01:44:11,840
and sockets

2659
01:44:11,840 --> 01:44:13,840
and also you reuse the corporate

2660
01:44:13,840 --> 01:44:16,880
transmission mechanism

2661
01:44:16,960 --> 01:44:19,040
and we basically just do that by putting

2662
01:44:19,040 --> 01:44:22,719
the dns query in a co-op request fetch

2663
01:44:22,719 --> 01:44:24,880
and that is then issued to a doc server

2664
01:44:24,880 --> 01:44:27,760
that's that one can then basically just

2665
01:44:27,760 --> 01:44:29,600
get the information either from a local

2666
01:44:29,600 --> 01:44:32,320
storage or another dns server and then

2667
01:44:32,320 --> 01:44:35,280
respond in a co-op response

2668
01:44:35,280 --> 01:44:39,360
also encoded as in the dns response

2669
01:44:39,360 --> 01:44:43,199
um yes since last time we spoke here we

2670
01:44:43,199 --> 01:44:45,360
basically removed the originally

2671
01:44:45,360 --> 01:44:47,520
proposed get and post method which came

2672
01:44:47,520 --> 01:44:50,400
basically from doh

2673
01:44:50,400 --> 01:44:52,960
we put a little bit of thought into how

2674
01:44:52,960 --> 01:44:54,880
caching and cache validation is done

2675
01:44:54,880 --> 01:44:56,960
with the e-tags

2676
01:44:56,960 --> 01:44:59,679
we also added doq as another

2677
01:44:59,679 --> 01:45:02,159
consideration and why it constant

2678
01:45:02,159 --> 01:45:05,280
conflicts with constrained iot scenarios

2679
01:45:05,280 --> 01:45:07,520
uh we clarified how our content format

2680
01:45:07,520 --> 01:45:08,239
is

2681
01:45:08,239 --> 01:45:09,840
and accept this handled

2682
01:45:09,840 --> 01:45:10,960
and

2683
01:45:10,960 --> 01:45:15,119
yeah also did a lot of to be done by

2684
01:45:15,119 --> 01:45:16,880
mostly just saying that they're out of

2685
01:45:16,880 --> 01:45:18,960
band for example the service relate uh

2686
01:45:18,960 --> 01:45:20,400
selection but also put some

2687
01:45:20,400 --> 01:45:22,159
consideration on how

2688
01:45:22,159 --> 01:45:25,119
messages uh that are too big basically

2689
01:45:25,119 --> 01:45:27,040
dns messages that are too big should be

2690
01:45:27,040 --> 01:45:30,080
handled by a doc server

2691
01:45:30,080 --> 01:45:31,440
and yeah and also added some

2692
01:45:31,440 --> 01:45:34,320
considerations on how to use dns over

2693
01:45:34,320 --> 01:45:38,400
corp with a why to use uh dns over coop

2694
01:45:38,400 --> 01:45:41,360
with an unencrypted connection

2695
01:45:41,360 --> 01:45:43,600
and why it might be also beneficial

2696
01:45:43,600 --> 01:45:45,280
for evaluation

2697
01:45:45,280 --> 01:45:46,960
we basically

2698
01:45:46,960 --> 01:45:47,840
first

2699
01:45:47,840 --> 01:45:50,320
looked into what is there on dns traffic

2700
01:45:50,320 --> 01:45:52,239
in the iot and basically made an

2701
01:45:52,239 --> 01:45:54,880
empirical data set of that to get some

2702
01:45:54,880 --> 01:45:57,119
idea what name properties and resource

2703
01:45:57,119 --> 01:45:58,800
records are there

2704
01:45:58,800 --> 01:46:01,119
um we then did that and

2705
01:46:01,119 --> 01:46:03,840
used that information to experiment do

2706
01:46:03,840 --> 01:46:06,159
some experiments in a testbed with two

2707
01:46:06,159 --> 01:46:09,679
clients which uh requests a name uh from

2708
01:46:09,679 --> 01:46:11,360
a resolver via forwarder and a border

2709
01:46:11,360 --> 01:46:13,920
router the clients basically just query

2710
01:46:13,920 --> 01:46:18,080
50a or aaa the quad a records

2711
01:46:18,080 --> 01:46:20,880
often for a name of length 24. we do

2712
01:46:20,880 --> 01:46:25,360
this over udp dtls co-op corps and oscar

2713
01:46:25,360 --> 01:46:28,560
and uh yeah basically these 50 queries

2714
01:46:28,560 --> 01:46:29,280
are

2715
01:46:29,280 --> 01:46:30,400
done

2716
01:46:30,400 --> 01:46:32,320
around five queries per seconds and

2717
01:46:32,320 --> 01:46:34,960
poisson distributants of course this

2718
01:46:34,960 --> 01:46:36,800
completely ignores the end start

2719
01:46:36,800 --> 01:46:42,000
requirement which is uh outlined in 7252

2720
01:46:42,000 --> 01:46:44,400
but we wanted to see the

2721
01:46:44,400 --> 01:46:46,080
network basically in a constrained

2722
01:46:46,080 --> 01:46:49,199
manner so we get some interesting data

2723
01:46:49,199 --> 01:46:51,840
and yeah we did 10 runs with that on

2724
01:46:51,840 --> 01:46:53,760
cortex and three nodes

2725
01:46:53,760 --> 01:46:56,560
with an 82154 radio

2726
01:46:56,560 --> 01:46:58,080
and basically

2727
01:46:58,080 --> 01:47:00,000
we got the following resolution times

2728
01:47:00,000 --> 01:47:02,400
which we plotted here as a

2729
01:47:02,400 --> 01:47:05,440
cumulative distributive function

2730
01:47:05,440 --> 01:47:07,280
and we basically see

2731
01:47:07,280 --> 01:47:08,639
three groups

2732
01:47:08,639 --> 01:47:11,040
types of types of communication

2733
01:47:11,040 --> 01:47:13,199
so this is basically

2734
01:47:13,199 --> 01:47:15,679
group one this one on the top which is

2735
01:47:15,679 --> 01:47:18,159
just gdp for a records group two which

2736
01:47:18,159 --> 01:47:21,119
is co-op and udp and

2737
01:47:21,119 --> 01:47:23,440
for post infection udp for

2738
01:47:23,440 --> 01:47:26,560
the quad a records and then this other

2739
01:47:26,560 --> 01:47:28,880
basically the whole rest is this group

2740
01:47:28,880 --> 01:47:29,760
three

2741
01:47:29,760 --> 01:47:31,520
and the question of course is where do

2742
01:47:31,520 --> 01:47:33,920
these performance groups come from

2743
01:47:33,920 --> 01:47:34,880
um

2744
01:47:34,880 --> 01:47:36,880
and when we look at the packet sizes we

2745
01:47:36,880 --> 01:47:38,880
get basically our answer

2746
01:47:38,880 --> 01:47:40,880
because uh the group one is basically

2747
01:47:40,880 --> 01:47:42,880
where no message fragmentation is

2748
01:47:42,880 --> 01:47:45,600
happening um group two is where the

2749
01:47:45,600 --> 01:47:47,360
query is unfragmented and the response

2750
01:47:47,360 --> 01:47:48,880
is fragmented

2751
01:47:48,880 --> 01:47:52,320
and the group 3 is basically where both

2752
01:47:52,320 --> 01:47:56,400
query and response are fragmented

2753
01:47:56,400 --> 01:47:58,560
so our conclusion of that is that

2754
01:47:58,560 --> 01:48:00,639
when it comes to performance basically

2755
01:48:00,639 --> 01:48:02,320
the fragmentation has a far larger

2756
01:48:02,320 --> 01:48:04,639
impact compared to transport or co-op

2757
01:48:04,639 --> 01:48:05,679
methods

2758
01:48:05,679 --> 01:48:07,920
and i guess this is not a big surprise

2759
01:48:07,920 --> 01:48:09,760
for most of you

2760
01:48:09,760 --> 01:48:11,440
um but

2761
01:48:11,440 --> 01:48:12,719
yeah but

2762
01:48:12,719 --> 01:48:14,400
our conclusion from that is basically

2763
01:48:14,400 --> 01:48:15,440
that we

2764
01:48:15,440 --> 01:48:18,159
need a new new content format other than

2765
01:48:18,159 --> 01:48:20,480
the normal wire format for dns over

2766
01:48:20,480 --> 01:48:21,440
co-op

2767
01:48:21,440 --> 01:48:23,760
which because even with the most

2768
01:48:23,760 --> 01:48:24,880
realistic

2769
01:48:24,880 --> 01:48:26,960
query and response sizes

2770
01:48:26,960 --> 01:48:28,880
we see fragmentation even when we just

2771
01:48:28,880 --> 01:48:30,560
take our minimal

2772
01:48:30,560 --> 01:48:33,600
name length of two

2773
01:48:33,600 --> 01:48:35,840
the response for a quad a record already

2774
01:48:35,840 --> 01:48:37,760
gets fragmented

2775
01:48:37,760 --> 01:48:40,000
and so yeah basically we want to have

2776
01:48:40,000 --> 01:48:41,440
some kind of

2777
01:48:41,440 --> 01:48:43,199
compression basically

2778
01:48:43,199 --> 01:48:47,119
to get below that number um and some

2779
01:48:47,119 --> 01:48:49,840
ideas we put forward for that not yet in

2780
01:48:49,840 --> 01:48:52,719
our draft but to discuss here

2781
01:48:52,719 --> 01:48:54,719
is to basically omit the authority and

2782
01:48:54,719 --> 01:48:58,320
additional sections of the dns response

2783
01:48:58,320 --> 01:49:01,199
omit the qd field because acute count

2784
01:49:01,199 --> 01:49:03,040
fields because the question section is

2785
01:49:03,040 --> 01:49:05,199
always of length irons most resolvers

2786
01:49:05,199 --> 01:49:08,159
even just throw away any query that has

2787
01:49:08,159 --> 01:49:11,840
more than one qr question in it

2788
01:49:11,840 --> 01:49:13,760
then make the class and type optional

2789
01:49:13,760 --> 01:49:16,000
and basically imply the most requested

2790
01:49:16,000 --> 01:49:19,360
ones which are hopefully soon in in quad

2791
01:49:19,360 --> 01:49:22,480
a apparently it's more in and a but

2792
01:49:22,480 --> 01:49:24,560
yeah we hope that will change in the

2793
01:49:24,560 --> 01:49:25,520
future

2794
01:49:25,520 --> 01:49:28,400
um then you self-eliminating

2795
01:49:28,400 --> 01:49:31,119
numeric values like we of course for

2796
01:49:31,119 --> 01:49:33,760
example have in the co-op options

2797
01:49:33,760 --> 01:49:37,440
uh for the for all the numeric values um

2798
01:49:37,440 --> 01:49:39,520
and maybe even make the question option

2799
01:49:39,520 --> 01:49:41,040
completely optional

2800
01:49:41,040 --> 01:49:44,239
because requests are most often times

2801
01:49:44,239 --> 01:49:46,800
bound to their responses so we basically

2802
01:49:46,800 --> 01:49:48,480
already know what the question was when

2803
01:49:48,480 --> 01:49:50,639
we get a response

2804
01:49:50,639 --> 01:49:52,639
and basically we propose two options

2805
01:49:52,639 --> 01:49:54,960
here which we haven't clearly decided

2806
01:49:54,960 --> 01:49:57,760
yet on which is basically putting the

2807
01:49:57,760 --> 01:49:58,639
question

2808
01:49:58,639 --> 01:50:00,400
putting it in a cyborg

2809
01:50:00,400 --> 01:50:02,400
array and put the question in the sibo

2810
01:50:02,400 --> 01:50:04,080
array and the answer section in a

2811
01:50:04,080 --> 01:50:06,080
receiver array of arrays

2812
01:50:06,080 --> 01:50:06,960
or

2813
01:50:06,960 --> 01:50:09,599
uses what we call a remote get address

2814
01:50:09,599 --> 01:50:11,199
by name where we basically just put a

2815
01:50:11,199 --> 01:50:13,119
query the name that we want to query

2816
01:50:13,119 --> 01:50:16,000
into the query into the

2817
01:50:16,000 --> 01:50:19,040
request maybe also a type and then

2818
01:50:19,040 --> 01:50:20,800
basically expect an address as a

2819
01:50:20,800 --> 01:50:22,719
response

2820
01:50:22,719 --> 01:50:25,920
but um in general uh

2821
01:50:25,920 --> 01:50:27,840
this probably should be discussed in a

2822
01:50:27,840 --> 01:50:30,880
separate draft

2823
01:50:30,880 --> 01:50:32,880
and there is carson in the queue yeah go

2824
01:50:32,880 --> 01:50:34,080
ahead carson

2825
01:50:34,080 --> 01:50:36,480
yeah just a quick question

2826
01:50:36,480 --> 01:50:38,719
what is the the

2827
01:50:38,719 --> 01:50:41,280
percentage of the

2828
01:50:41,280 --> 01:50:44,000
space that is taken by the actual labels

2829
01:50:44,000 --> 01:50:45,440
here

2830
01:50:45,440 --> 01:50:46,639
but what

2831
01:50:46,639 --> 01:50:48,400
by the labels

2832
01:50:48,400 --> 01:50:50,159
the dns names

2833
01:50:50,159 --> 01:50:53,040
um

2834
01:50:53,040 --> 01:50:55,679
well it's always these most of the time

2835
01:50:55,679 --> 01:50:57,840
it's basically the number of characters

2836
01:50:57,840 --> 01:50:59,520
plus two bytes for the delimiting

2837
01:50:59,520 --> 01:51:00,880
characters

2838
01:51:00,880 --> 01:51:01,679
so

2839
01:51:01,679 --> 01:51:04,560
yeah it's oftentimes really a small part

2840
01:51:04,560 --> 01:51:06,960
of that especially when you look at some

2841
01:51:06,960 --> 01:51:08,400
name links

2842
01:51:08,400 --> 01:51:11,440
i have a slide in my backup slides

2843
01:51:11,440 --> 01:51:12,880
which i don't want to scroll forward to

2844
01:51:12,880 --> 01:51:14,560
because this uh

2845
01:51:14,560 --> 01:51:16,000
meet equals thing is a little bit okay

2846
01:51:16,000 --> 01:51:17,840
i'll look it up there i i can show you

2847
01:51:17,840 --> 01:51:20,400
at the end maybe if there's time yeah

2848
01:51:20,400 --> 01:51:22,719
because we could come up with a much

2849
01:51:22,719 --> 01:51:25,360
more efficient encoding of adh

2850
01:51:25,360 --> 01:51:27,119
labels which are probably the majority

2851
01:51:27,119 --> 01:51:29,199
of the labels that we are looking at

2852
01:51:29,199 --> 01:51:30,880
yeah

2853
01:51:30,880 --> 01:51:32,090
okay

2854
01:51:32,090 --> 01:51:33,760
[Music]

2855
01:51:33,760 --> 01:51:36,000
yeah um then the other discussion we

2856
01:51:36,000 --> 01:51:38,080
want to basically open is that we have

2857
01:51:38,080 --> 01:51:41,280
basically currently two proposals for

2858
01:51:41,280 --> 01:51:45,280
how to handle uh caching and the max age

2859
01:51:45,280 --> 01:51:48,320
option and dns ttls which all use

2860
01:51:48,320 --> 01:51:50,800
relative values and so we they might get

2861
01:51:50,800 --> 01:51:53,199
out of sync at caching proxies

2862
01:51:53,199 --> 01:51:55,840
uh indeed in the doh rvc basically

2863
01:51:55,840 --> 01:51:57,840
there's a proposal just use the minimum

2864
01:51:57,840 --> 01:52:00,800
ttls as a freshness which would

2865
01:52:00,800 --> 01:52:03,679
equate and go up to the max age option

2866
01:52:03,679 --> 01:52:05,760
and then the clients basically need to

2867
01:52:05,760 --> 01:52:08,480
figure out how to do the ttl to the dtls

2868
01:52:08,480 --> 01:52:10,080
and basically this would mean that you

2869
01:52:10,080 --> 01:52:11,679
basically look for the

2870
01:52:11,679 --> 01:52:14,239
smallest ttl and if that is not the same

2871
01:52:14,239 --> 01:52:17,840
as a max h just subtract them and

2872
01:52:17,840 --> 01:52:19,920
calculate the detail from that

2873
01:52:19,920 --> 01:52:21,440
that of course

2874
01:52:21,440 --> 01:52:24,480
and the other option would be to

2875
01:52:24,480 --> 01:52:26,880
do it also like doh but then adapt the

2876
01:52:26,880 --> 01:52:29,280
ttls already at the server so basically

2877
01:52:29,280 --> 01:52:31,679
the minimum ttl is zero and everything

2878
01:52:31,679 --> 01:52:33,520
else is just the

2879
01:52:33,520 --> 01:52:34,960
difference from that

2880
01:52:34,960 --> 01:52:36,800
and then the client basically just needs

2881
01:52:36,800 --> 01:52:37,920
to

2882
01:52:37,920 --> 01:52:40,880
re-adapt this based on the max age

2883
01:52:40,880 --> 01:52:43,040
if we do this it looks at this in detail

2884
01:52:43,040 --> 01:52:44,480
so basically we get

2885
01:52:44,480 --> 01:52:46,719
our response at the dock server

2886
01:52:46,719 --> 01:52:50,080
see the ttls get the minimum ttl off

2887
01:52:50,080 --> 01:52:52,320
the dns response and put it into our

2888
01:52:52,320 --> 01:52:53,599
core header

2889
01:52:53,599 --> 01:52:56,159
that then is sent via a cache that which

2890
01:52:56,159 --> 01:52:58,880
does stores the response and we wait

2891
01:52:58,880 --> 01:53:00,560
some time

2892
01:53:00,560 --> 01:53:03,040
then when we query the

2893
01:53:03,040 --> 01:53:04,719
the next time we basically find it on

2894
01:53:04,719 --> 01:53:06,080
our cache

2895
01:53:06,080 --> 01:53:08,239
and of course the max h now has

2896
01:53:08,239 --> 01:53:09,599
decreased

2897
01:53:09,599 --> 01:53:12,480
and differs from the minimum ttl so we

2898
01:53:12,480 --> 01:53:16,400
need to somehow adapt this

2899
01:53:17,360 --> 01:53:20,159
and basically this solution aims to be

2900
01:53:20,159 --> 01:53:23,199
mostly just compatible with doh

2901
01:53:23,199 --> 01:53:24,960
so if for example the dock server is a

2902
01:53:24,960 --> 01:53:27,119
dh proxy

2903
01:53:27,119 --> 01:53:29,679
and the other option would be the

2904
01:53:29,679 --> 01:53:31,760
adapting ttl i already talked about

2905
01:53:31,760 --> 01:53:33,599
which basically then

2906
01:53:33,599 --> 01:53:35,199
subtracts all the

2907
01:53:35,199 --> 01:53:38,159
ttls with the max h option

2908
01:53:38,159 --> 01:53:41,040
and then we do the same thing again um

2909
01:53:41,040 --> 01:53:43,520
at the client we see the max age option

2910
01:53:43,520 --> 01:53:46,000
just added to all the ttls

2911
01:53:46,000 --> 01:53:49,280
uh we basically are already done so

2912
01:53:49,280 --> 01:53:51,520
uh we put mostly the workout on load on

2913
01:53:51,520 --> 01:53:53,040
the server which in this scenario is

2914
01:53:53,040 --> 01:53:55,199
assumed to be the more powerful node and

2915
01:53:55,199 --> 01:53:57,199
also we have less cash invalidation

2916
01:53:57,199 --> 01:54:00,080
because even if the ttls change

2917
01:54:00,080 --> 01:54:02,320
uh in the responses we get from some

2918
01:54:02,320 --> 01:54:04,400
upstream dns server

2919
01:54:04,400 --> 01:54:06,400
assuming they are off

2920
01:54:06,400 --> 01:54:09,360
always uh the same time amount of time

2921
01:54:09,360 --> 01:54:10,320
apart

2922
01:54:10,320 --> 01:54:12,320
we don't change the content of the

2923
01:54:12,320 --> 01:54:13,760
response so

2924
01:54:13,760 --> 01:54:16,800
uh if the content if the e-tec is for

2925
01:54:16,800 --> 01:54:18,320
example based on

2926
01:54:18,320 --> 01:54:20,880
hashing the content then we basically

2927
01:54:20,880 --> 01:54:23,119
don't invalidate our cache we can just

2928
01:54:23,119 --> 01:54:25,360
get a valid response from the dlc server

2929
01:54:25,360 --> 01:54:28,480
from the core proxy

2930
01:54:28,480 --> 01:54:30,960
okay and then the second to last thing

2931
01:54:30,960 --> 01:54:32,000
to

2932
01:54:32,000 --> 01:54:34,000
maybe to discuss is the

2933
01:54:34,000 --> 01:54:36,400
section five three which uh talks about

2934
01:54:36,400 --> 01:54:37,840
observe and

2935
01:54:37,840 --> 01:54:40,480
server push in http 2 which basically

2936
01:54:40,480 --> 01:54:43,040
based on this doh section

2937
01:54:43,040 --> 01:54:46,159
um which is about to uh

2938
01:54:46,159 --> 01:54:49,280
how that maybe the the response to the

2939
01:54:49,280 --> 01:54:50,800
potentially next

2940
01:54:50,800 --> 01:54:53,520
request could be delivered to

2941
01:54:53,520 --> 01:54:56,800
a client and then cached by them

2942
01:54:56,800 --> 01:54:59,760
um with core someone could think maybe

2943
01:54:59,760 --> 01:55:02,320
that the name could be

2944
01:55:02,320 --> 01:55:04,480
of the of the core rd

2945
01:55:04,480 --> 01:55:06,239
could be requested and then basically

2946
01:55:06,239 --> 01:55:08,880
also deliver the well-known core of the

2947
01:55:08,880 --> 01:55:10,000
core id

2948
01:55:10,000 --> 01:55:12,080
but um

2949
01:55:12,080 --> 01:55:14,719
all in all this would require the corp

2950
01:55:14,719 --> 01:55:16,639
put somehow the request information in

2951
01:55:16,639 --> 01:55:18,719
the notification or

2952
01:55:18,719 --> 01:55:21,360
so we get back to this non-traditional

2953
01:55:21,360 --> 01:55:24,320
dns responses thing

2954
01:55:24,320 --> 01:55:26,800
so that the client basically knows where

2955
01:55:26,800 --> 01:55:29,199
to cache and for what to cache this

2956
01:55:29,199 --> 01:55:31,280
response that it got just out of the

2957
01:55:31,280 --> 01:55:35,840
blue um and another use case of observe

2958
01:55:35,840 --> 01:55:38,000
specifically was that there is dna state

2959
01:55:38,000 --> 01:55:39,440
for operations but there is also the

2960
01:55:39,440 --> 01:55:41,920
question if this is even needed by

2961
01:55:41,920 --> 01:55:43,360
just some

2962
01:55:43,360 --> 01:55:44,960
step resolver or

2963
01:55:44,960 --> 01:55:47,599
doc client

2964
01:55:47,599 --> 01:55:50,960
yeah and the last thing basically is

2965
01:55:50,960 --> 01:55:53,119
how to how abstract the

2966
01:55:53,119 --> 01:55:55,679
draft should be klaus harker there put

2967
01:55:55,679 --> 01:55:58,719
an issue in our issue tracker

2968
01:55:58,719 --> 01:56:02,639
and he basically proposes that uh to

2969
01:56:02,639 --> 01:56:05,280
that that we just specify a rest api

2970
01:56:05,280 --> 01:56:06,320
that

2971
01:56:06,320 --> 01:56:08,320
the server then serves

2972
01:56:08,320 --> 01:56:10,159
how to retrieve the dns information and

2973
01:56:10,159 --> 01:56:13,360
leave all the protocol details uh to the

2974
01:56:13,360 --> 01:56:15,839
implementation

2975
01:56:15,920 --> 01:56:17,330
so yeah

2976
01:56:17,330 --> 01:56:19,199
[Music]

2977
01:56:19,199 --> 01:56:20,080
maybe

2978
01:56:20,080 --> 01:56:22,400
if there are not yet any questions or

2979
01:56:22,400 --> 01:56:24,000
people need to think about i can show

2980
01:56:24,000 --> 01:56:28,000
what carson was asking about

2981
01:56:28,000 --> 01:56:29,119
oh

2982
01:56:29,119 --> 01:56:32,320
there are four more minutes to go okay

2983
01:56:32,320 --> 01:56:33,599
then

2984
01:56:33,599 --> 01:56:36,719
yeah uh so basically here i uh

2985
01:56:36,719 --> 01:56:39,840
resolved all the layers by um

2986
01:56:39,840 --> 01:56:43,760
by all the packets by layer and uh

2987
01:56:43,760 --> 01:56:46,639
you see for the minimal mim format there

2988
01:56:46,639 --> 01:56:48,080
is i mean

2989
01:56:48,080 --> 01:56:50,080
uh there's basically these four bytes

2990
01:56:50,080 --> 01:56:52,159
but they are part of a bigger dns

2991
01:56:52,159 --> 01:56:54,800
response because of course also the

2992
01:56:54,800 --> 01:56:56,800
quad a record itself is in it like the

2993
01:56:56,800 --> 01:56:58,560
ip address

2994
01:56:58,560 --> 01:57:00,239
but maybe we can also compress that

2995
01:57:00,239 --> 01:57:01,920
somehow if it's a known prefix or

2996
01:57:01,920 --> 01:57:04,639
something like that

2997
01:57:07,679 --> 01:57:09,599
there's a question or someone named

2998
01:57:09,599 --> 01:57:14,719
loren in the queue and after him esco

2999
01:57:16,000 --> 01:57:18,239
thank you for your presentations this is

3000
01:57:18,239 --> 01:57:19,920
basically very interesting

3001
01:57:19,920 --> 01:57:22,719
you do you focus only on ip address a

3002
01:57:22,719 --> 01:57:26,880
and quid a or you you are all the record

3003
01:57:26,880 --> 01:57:28,400
well at the moment we are focusing on

3004
01:57:28,400 --> 01:57:30,560
quad a because that in was what we saw

3005
01:57:30,560 --> 01:57:33,040
in our data set was the most requested

3006
01:57:33,040 --> 01:57:36,080
uh stuff actually uh if you don't

3007
01:57:36,080 --> 01:57:39,280
account for mdns it's basically the only

3008
01:57:39,280 --> 01:57:42,800
record we saw or b or the a records in

3009
01:57:42,800 --> 01:57:44,159
to be honest

3010
01:57:44,159 --> 01:57:45,119
but

3011
01:57:45,119 --> 01:57:47,760
we of course want to also support other

3012
01:57:47,760 --> 01:57:48,639
um

3013
01:57:48,639 --> 01:57:52,760
kind of records okay

3014
01:57:56,400 --> 01:57:58,000
yeah so i had a

3015
01:57:58,000 --> 01:57:59,840
thought because you mentioned observe

3016
01:57:59,840 --> 01:58:01,360
and

3017
01:58:01,360 --> 01:58:03,599
i think one particularly interesting

3018
01:58:03,599 --> 01:58:04,960
technology is

3019
01:58:04,960 --> 01:58:06,960
the dns push

3020
01:58:06,960 --> 01:58:08,719
approach so you do a

3021
01:58:08,719 --> 01:58:11,679
query and the server pushes updates to

3022
01:58:11,679 --> 01:58:13,119
you uh

3023
01:58:13,119 --> 01:58:16,639
over tcp or tls

3024
01:58:17,920 --> 01:58:20,719
yeah so that seems very uh suitable to

3025
01:58:20,719 --> 01:58:23,119
just apply observe to it and i guess you

3026
01:58:23,119 --> 01:58:25,119
already consider that

3027
01:58:25,119 --> 01:58:27,440
yeah but i think that's basically what

3028
01:58:27,440 --> 01:58:29,719
rca 800

3029
01:58:29,719 --> 01:58:32,800
8490 is talking about

3030
01:58:32,800 --> 01:58:33,599
so

3031
01:58:33,599 --> 01:58:35,599
yeah yeah it's eight eight seven six

3032
01:58:35,599 --> 01:58:37,679
five it's also uh

3033
01:58:37,679 --> 01:58:39,040
notifications

3034
01:58:39,040 --> 01:58:42,000
and then that's for example used also by

3035
01:58:42,000 --> 01:58:44,719
embedded devices i'm working on

3036
01:58:44,719 --> 01:58:46,159
on those kind of solutions where

3037
01:58:46,159 --> 01:58:48,880
actually they will query for services so

3038
01:58:48,880 --> 01:58:50,320
using uh

3039
01:58:50,320 --> 01:58:52,800
yeah dns sd type of queries and getting

3040
01:58:52,800 --> 01:58:56,239
responses and those are also updated

3041
01:58:56,239 --> 01:58:57,840
whenever there's a change so whenever a

3042
01:58:57,840 --> 01:59:00,080
new device comes online the device can

3043
01:59:00,080 --> 01:59:01,440
be notified

3044
01:59:01,440 --> 01:59:03,199
like hey there's this new new service

3045
01:59:03,199 --> 01:59:05,040
online

3046
01:59:05,040 --> 01:59:07,199
yeah and that's using basically the dns

3047
01:59:07,199 --> 01:59:09,520
push so directly over tls

3048
01:59:09,520 --> 01:59:11,840
but i think it could also be mapped to

3049
01:59:11,840 --> 01:59:14,480
yeah do the same thing with observe very

3050
01:59:14,480 --> 01:59:17,280
well

3051
01:59:17,280 --> 01:59:18,080
yeah

3052
01:59:18,080 --> 01:59:20,960
i i guess i mean that's why we put it in

3053
01:59:20,960 --> 01:59:23,440
there because we were wondering if there

3054
01:59:23,440 --> 01:59:27,199
is some use case to have observed if

3055
01:59:27,199 --> 01:59:29,760
then maybe some adaptation unneeded to

3056
01:59:29,760 --> 01:59:32,159
it but

3057
01:59:32,159 --> 01:59:34,080
from what i hear basically it's

3058
01:59:34,080 --> 01:59:36,560
basically just the normal observe

3059
01:59:36,560 --> 01:59:37,520
so

3060
01:59:37,520 --> 01:59:38,560
yeah

3061
01:59:38,560 --> 01:59:39,840
maybe

3062
01:59:39,840 --> 01:59:42,159
we put an option in there and say it's

3063
01:59:42,159 --> 01:59:46,080
for dns push or maybe we don't uh yeah

3064
01:59:46,080 --> 01:59:48,000
that also i guess depends a little bit

3065
01:59:48,000 --> 01:59:50,560
on the direction the approach will take

3066
01:59:50,560 --> 01:59:53,119
in the future

3067
01:59:53,119 --> 01:59:55,520
yeah okay so indeed the use case is

3068
01:59:55,520 --> 01:59:57,199
there but well

3069
01:59:57,199 --> 01:59:59,679
i think what technology exactly uh is

3070
01:59:59,679 --> 02:00:01,679
going to be used yeah that's that's

3071
02:00:01,679 --> 02:00:05,280
still the question of course but yeah

3072
02:00:05,440 --> 02:00:06,480
okay

3073
02:00:06,480 --> 02:00:09,598
okay thank you

3074
02:00:11,199 --> 02:00:13,040
so it looks like you know what to do i

3075
02:00:13,040 --> 02:00:16,560
could count uh kind of four main topics

3076
02:00:16,560 --> 02:00:19,199
or tracks to be more explored uh if it's

3077
02:00:19,199 --> 02:00:21,280
useful you can even start one thread

3078
02:00:21,280 --> 02:00:23,520
each uh on the mailing list

3079
02:00:23,520 --> 02:00:25,679
to get more specific feedback yeah on

3080
02:00:25,679 --> 02:00:28,320
those uh otherwise definite material for

3081
02:00:28,320 --> 02:00:30,960
discussions editorial meetings yeah

3082
02:00:30,960 --> 02:00:34,080
um yeah exactly

3083
02:00:34,080 --> 02:00:35,199
so

3084
02:00:35,199 --> 02:00:36,880
yeah and um

3085
02:00:36,880 --> 02:00:37,760
please

3086
02:00:37,760 --> 02:00:40,400
if you are interested in reviewing

3087
02:00:40,400 --> 02:00:42,719
versions of this draft please send a

3088
02:00:42,719 --> 02:00:45,679
message to the chat so we can

3089
02:00:45,679 --> 02:00:49,280
gauge the interest in that

3090
02:00:52,960 --> 02:00:55,520
uh thomas says he is interested to

3091
02:00:55,520 --> 02:00:56,560
review

3092
02:00:56,560 --> 02:00:58,639
and by the way he was thanking you and

3093
02:00:58,639 --> 02:01:02,159
cultures for the nice work okay

3094
02:01:02,159 --> 02:01:03,440
thank you

3095
02:01:03,440 --> 02:01:05,119
um

3096
02:01:05,119 --> 02:01:07,280
thank you we are exactly on top of the

3097
02:01:07,280 --> 02:01:08,880
hour

3098
02:01:08,880 --> 02:01:10,719
just to mention again that we resume

3099
02:01:10,719 --> 02:01:12,880
internet meetings on april 27th by

3100
02:01:12,880 --> 02:01:15,599
weekly as usual

3101
02:01:15,599 --> 02:01:18,239
unless there's any big compelling

3102
02:01:18,239 --> 02:01:20,800
comment anyone wants to make i think we

3103
02:01:20,800 --> 02:01:23,599
can join the meeting

3104
02:01:23,599 --> 02:01:24,560
thank you very much for your

3105
02:01:24,560 --> 02:01:27,520
participation and work

3106
02:01:28,560 --> 02:01:30,080
thank you for the presenters this was a

3107
02:01:30,080 --> 02:01:32,480
great meeting

3108
02:01:32,480 --> 02:01:36,119
thank you bye

3109
02:01:42,719 --> 02:01:45,719
hmm

3110
02:01:50,560 --> 02:01:53,560
uh

3111
02:02:10,639 --> 02:02:12,719
you

