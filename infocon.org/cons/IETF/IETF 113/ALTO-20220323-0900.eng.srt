1
00:00:06,000 --> 00:00:09,000
okay

2
00:00:22,560 --> 00:00:25,560
yes

3
00:01:08,720 --> 00:01:11,039
okay

4
00:01:11,200 --> 00:01:13,200
uh let's get started

5
00:01:13,200 --> 00:01:17,040
uh so uh hi everyone and welcome to auto

6
00:01:17,040 --> 00:01:18,000
session

7
00:01:18,000 --> 00:01:20,720
so this is a hybrid meeting and my name

8
00:01:20,720 --> 00:01:22,320
is ching woo

9
00:01:22,320 --> 00:01:26,479
join with me online we have

10
00:01:26,479 --> 00:01:29,360
yen siddharth and mohammed book there

11
00:01:29,360 --> 00:01:31,280
and we will host the

12
00:01:31,280 --> 00:01:34,400
remotely and

13
00:01:34,560 --> 00:01:36,720
actually in a room we have judy actually

14
00:01:36,720 --> 00:01:37,600
to

15
00:01:37,600 --> 00:01:40,640
coordinate and to manage the midi echo

16
00:01:40,640 --> 00:01:42,799
so thanks jody

17
00:01:42,799 --> 00:01:46,560
for volunteer very appreciate

18
00:01:48,479 --> 00:01:50,399
not aware

19
00:01:50,399 --> 00:01:52,320
and

20
00:01:52,320 --> 00:01:54,479
probably already familiar with this if

21
00:01:54,479 --> 00:01:56,799
you make any contribution

22
00:01:56,799 --> 00:01:58,159
and

23
00:01:58,159 --> 00:01:59,520
please uh

24
00:01:59,520 --> 00:02:02,399
make sure you follow itf rules and if

25
00:02:02,399 --> 00:02:07,960
you have ipr please just close it

26
00:02:08,720 --> 00:02:11,200
uh codec conductor

27
00:02:11,200 --> 00:02:12,640
and uh

28
00:02:12,640 --> 00:02:14,959
and when you make a contribution or you

29
00:02:14,959 --> 00:02:17,840
make comments to others

30
00:02:17,840 --> 00:02:19,840
topics please be

31
00:02:19,840 --> 00:02:22,319
friendly and focus on technical

32
00:02:22,319 --> 00:02:24,879
discussion

33
00:02:24,879 --> 00:02:26,560
add a mix trivial

34
00:02:26,560 --> 00:02:28,879
and as usual we'll use

35
00:02:28,879 --> 00:02:30,239
midi echo

36
00:02:30,239 --> 00:02:32,720
to for the kill control

37
00:02:32,720 --> 00:02:34,239
if you

38
00:02:34,239 --> 00:02:36,480
do the presentation or make comments

39
00:02:36,480 --> 00:02:39,200
please enter into the queue and by

40
00:02:39,200 --> 00:02:43,599
pressing the red button and if you uh

41
00:02:43,599 --> 00:02:46,480
speak please identify yourself

42
00:02:46,480 --> 00:02:47,440
and

43
00:02:47,440 --> 00:02:49,760
when you stop speaking please mute

44
00:02:49,760 --> 00:02:51,760
yourself

45
00:02:51,760 --> 00:02:54,560
and uh for jabba scriber and

46
00:02:54,560 --> 00:02:56,640
we minutes taker

47
00:02:56,640 --> 00:02:57,599
we

48
00:02:57,599 --> 00:03:00,640
actually have danielle king and richard

49
00:03:00,640 --> 00:03:03,040
to have her take a minute

50
00:03:03,040 --> 00:03:05,920
so thanks ben and the richer

51
00:03:05,920 --> 00:03:07,920
and the jabber

52
00:03:07,920 --> 00:03:13,079
any other any volunteer for the chopper

53
00:03:19,920 --> 00:03:21,280
actually uh

54
00:03:21,280 --> 00:03:23,200
i think the rule can help you to watch

55
00:03:23,200 --> 00:03:24,000
the

56
00:03:24,000 --> 00:03:25,120
java

57
00:03:25,120 --> 00:03:27,040
yeah

58
00:03:27,040 --> 00:03:28,080
uh

59
00:03:28,080 --> 00:03:29,519
blue shield actually we have uh

60
00:03:29,519 --> 00:03:30,959
electrical blue shift

61
00:03:30,959 --> 00:03:32,480
please

62
00:03:32,480 --> 00:03:35,200
make sure you join the medical so your

63
00:03:35,200 --> 00:03:36,640
attendance will be automatically

64
00:03:36,640 --> 00:03:37,920
recorded

65
00:03:37,920 --> 00:03:40,400
and you attend them in person please

66
00:03:40,400 --> 00:03:45,799
make sure you join the medical as well

67
00:03:49,280 --> 00:03:52,400
and work remotely actually uh as we know

68
00:03:52,400 --> 00:03:54,159
actually most of the work actually will

69
00:03:54,159 --> 00:03:56,560
be done on the menus please

70
00:03:56,560 --> 00:03:58,159
leverage the meninist

71
00:03:58,159 --> 00:04:00,400
and if you bring if you have any new

72
00:04:00,400 --> 00:04:01,840
idea please

73
00:04:01,840 --> 00:04:02,640
uh

74
00:04:02,640 --> 00:04:05,360
introduce your idea on the meninist and

75
00:04:05,360 --> 00:04:06,959
for working good job

76
00:04:06,959 --> 00:04:08,879
it's important to

77
00:04:08,879 --> 00:04:10,080
raise the discussion on the list to

78
00:04:10,080 --> 00:04:12,560
resolve any open issue

79
00:04:12,560 --> 00:04:15,200
and uh for informal meeting we actually

80
00:04:15,200 --> 00:04:17,839
already have a weekly webis webex

81
00:04:17,839 --> 00:04:18,880
meeting

82
00:04:18,880 --> 00:04:21,279
and to uh facilitate

83
00:04:21,279 --> 00:04:22,720
the uh

84
00:04:22,720 --> 00:04:25,280
chat item progress

85
00:04:25,280 --> 00:04:28,320
and for online meeting uh if you think

86
00:04:28,320 --> 00:04:30,720
you have any good proposal

87
00:04:30,720 --> 00:04:32,639
can fit into the order charter and you

88
00:04:32,639 --> 00:04:35,440
can request the share to schedule the

89
00:04:35,440 --> 00:04:37,199
online meeting

90
00:04:37,199 --> 00:04:38,479
so we are

91
00:04:38,479 --> 00:04:42,280
happy to do this

92
00:04:43,280 --> 00:04:47,119
rpr disclosure and

93
00:04:48,800 --> 00:04:51,360
so this meeting agenda

94
00:04:51,360 --> 00:04:53,360
for today's discussion will focus on

95
00:04:53,360 --> 00:04:55,199
childhood items

96
00:04:55,199 --> 00:04:56,560
and the

97
00:04:56,560 --> 00:04:58,800
two items will be discussed one is auto

98
00:04:58,800 --> 00:05:00,880
om support the second is auto new

99
00:05:00,880 --> 00:05:02,240
transport

100
00:05:02,240 --> 00:05:05,039
and also we actually have a deployment

101
00:05:05,039 --> 00:05:06,960
experience updater

102
00:05:06,960 --> 00:05:09,360
and this is also part of our auto

103
00:05:09,360 --> 00:05:10,400
chatter

104
00:05:10,400 --> 00:05:12,560
and if we still have time actually we

105
00:05:12,560 --> 00:05:15,120
will discuss a new uh

106
00:05:15,120 --> 00:05:16,960
non charter item

107
00:05:16,960 --> 00:05:18,150
which actually

108
00:05:18,150 --> 00:05:19,600
[Music]

109
00:05:19,600 --> 00:05:21,520
introduced a new idea

110
00:05:21,520 --> 00:05:23,680
to discuss how to integrate the g2 into

111
00:05:23,680 --> 00:05:24,880
the auto

112
00:05:24,880 --> 00:05:26,639
and also we have

113
00:05:26,639 --> 00:05:28,560
auto related activity

114
00:05:28,560 --> 00:05:30,000
uh

115
00:05:30,000 --> 00:05:30,880
uh

116
00:05:30,880 --> 00:05:33,840
actually we have computer aware

117
00:05:33,840 --> 00:05:35,919
networking both actually this

118
00:05:35,919 --> 00:05:37,039
will be

119
00:05:37,039 --> 00:05:39,440
introduced by luis

120
00:05:39,440 --> 00:05:43,400
so any agenda batch

121
00:05:52,720 --> 00:05:54,160
okay

122
00:05:54,160 --> 00:05:56,880
uh let's move uh move on

123
00:05:56,880 --> 00:06:00,880
uh for document update and uh

124
00:06:00,880 --> 00:06:02,400
since last night

125
00:06:02,400 --> 00:06:04,960
it meeting we actually moved four

126
00:06:04,960 --> 00:06:08,080
existing work item to the offset queue

127
00:06:08,080 --> 00:06:11,440
so thanks for the author and editor for

128
00:06:11,440 --> 00:06:13,360
tremendous effort

129
00:06:13,360 --> 00:06:14,720
and we

130
00:06:14,720 --> 00:06:17,680
finally deliver this for work

131
00:06:17,680 --> 00:06:19,680
so let's give applause to all the

132
00:06:19,680 --> 00:06:21,840
authors and editors

133
00:06:21,840 --> 00:06:24,639
and also in addition we have a new

134
00:06:24,639 --> 00:06:27,759
worker item to be adopted

135
00:06:27,759 --> 00:06:29,919
which is a course model draft this

136
00:06:29,919 --> 00:06:32,840
actually is a companion job for the past

137
00:06:32,840 --> 00:06:34,720
vector and

138
00:06:34,720 --> 00:06:36,800
we already initiated the

139
00:06:36,800 --> 00:06:38,880
adoption call in

140
00:06:38,880 --> 00:06:40,160
uh

141
00:06:40,160 --> 00:06:42,639
before this meeting actually this

142
00:06:42,639 --> 00:06:44,560
has already have a zero zero working

143
00:06:44,560 --> 00:06:45,759
group job

144
00:06:45,759 --> 00:06:46,639
and

145
00:06:46,639 --> 00:06:48,960
our chairs plan is we were

146
00:06:48,960 --> 00:06:51,199
uh immediately initially the working

147
00:06:51,199 --> 00:06:54,800
last call uh right after this meeting

148
00:06:54,800 --> 00:06:57,919
uh for new era actually we

149
00:06:57,919 --> 00:07:00,479
got a four new era actually uh all of

150
00:07:00,479 --> 00:07:02,080
these right actually are related to the

151
00:07:02,080 --> 00:07:03,919
auto based protocol

152
00:07:03,919 --> 00:07:05,039
and

153
00:07:05,039 --> 00:07:07,360
so for the

154
00:07:07,360 --> 00:07:09,599
first one actually uh

155
00:07:09,599 --> 00:07:13,840
raised by the samuel uh during his

156
00:07:13,840 --> 00:07:17,440
security direct review he identified a

157
00:07:17,440 --> 00:07:20,639
typo actually these need to be verified

158
00:07:20,639 --> 00:07:21,599
and

159
00:07:21,599 --> 00:07:22,560
also

160
00:07:22,560 --> 00:07:23,360
for

161
00:07:23,360 --> 00:07:25,840
another one another two actually relate

162
00:07:25,840 --> 00:07:29,039
to the course mode actually we

163
00:07:29,039 --> 00:07:30,720
need to uh

164
00:07:30,720 --> 00:07:33,360
uh you know make update to the other

165
00:07:33,360 --> 00:07:35,759
baseball game it's kind of type already

166
00:07:35,759 --> 00:07:38,479
this has been discussed on the list with

167
00:07:38,479 --> 00:07:41,520
auto based political author and uh for

168
00:07:41,520 --> 00:07:44,160
all these three i think this need to be

169
00:07:44,160 --> 00:07:45,599
verified by

170
00:07:45,599 --> 00:07:48,159
our id

171
00:07:49,599 --> 00:07:53,800
so any comments on this

172
00:08:00,960 --> 00:08:03,440
uh milestone update actually currently

173
00:08:03,440 --> 00:08:05,680
we have already have a three

174
00:08:05,680 --> 00:08:08,960
uh milestone and uh

175
00:08:08,960 --> 00:08:11,919
but uh because of the existing work item

176
00:08:11,919 --> 00:08:13,599
actually will take quite a long time

177
00:08:13,599 --> 00:08:14,960
actually so

178
00:08:14,960 --> 00:08:16,160
uh

179
00:08:16,160 --> 00:08:17,199
so we

180
00:08:17,199 --> 00:08:19,440
chair actually uh suggest that we can

181
00:08:19,440 --> 00:08:21,520
make a milestone update in addition we

182
00:08:21,520 --> 00:08:23,440
actually introduce a new

183
00:08:23,440 --> 00:08:26,639
uh work item customer specification

184
00:08:26,639 --> 00:08:29,120
and this has already discussed with our

185
00:08:29,120 --> 00:08:32,159
ad and the set of the milestone so we

186
00:08:32,159 --> 00:08:34,080
propose the milestone actually to change

187
00:08:34,080 --> 00:08:35,360
it

188
00:08:35,360 --> 00:08:38,959
changes the time frame

189
00:08:39,360 --> 00:08:41,039
so

190
00:08:41,039 --> 00:08:42,719
any

191
00:08:42,719 --> 00:08:46,800
uh suggestion for for this any input or

192
00:08:46,800 --> 00:08:51,240
opinion on this proposed milestone

193
00:08:57,519 --> 00:08:59,279
uh

194
00:08:59,279 --> 00:09:01,120
last one actually we

195
00:09:01,120 --> 00:09:02,560
shared this class actually how to

196
00:09:02,560 --> 00:09:03,760
socialize

197
00:09:03,760 --> 00:09:06,000
auto actually we really want to increase

198
00:09:06,000 --> 00:09:10,080
more visibility to the auto activity and

199
00:09:10,080 --> 00:09:12,480
our purpose actually is

200
00:09:12,480 --> 00:09:15,120
disseminate this worker to

201
00:09:15,120 --> 00:09:16,170
all the other

202
00:09:16,170 --> 00:09:18,080
[Music]

203
00:09:18,080 --> 00:09:20,560
areas in ibtl and we also need to you

204
00:09:20,560 --> 00:09:21,360
know

205
00:09:21,360 --> 00:09:23,440
socialize this author to the operator

206
00:09:23,440 --> 00:09:25,279
community and operation

207
00:09:25,279 --> 00:09:29,040
developer community and uh we actually

208
00:09:29,040 --> 00:09:32,240
have a sitcom ai actually um

209
00:09:32,240 --> 00:09:34,000
actually proposed by the auto design

210
00:09:34,000 --> 00:09:36,720
team member and this

211
00:09:36,720 --> 00:09:39,519
will be a continued effort and

212
00:09:39,519 --> 00:09:41,920
but we need other venues to promote the

213
00:09:41,920 --> 00:09:43,920
author in operator community and

214
00:09:43,920 --> 00:09:45,920
application community

215
00:09:45,920 --> 00:09:48,800
and in addition we seek more volunteer

216
00:09:48,800 --> 00:09:52,399
to build the auto tutorial actually

217
00:09:52,399 --> 00:09:54,720
and this will be

218
00:09:54,720 --> 00:09:58,080
discussed in for example office area hot

219
00:09:58,080 --> 00:10:01,279
area or some other venues

220
00:10:01,279 --> 00:10:04,720
and if you have any input to but

221
00:10:04,720 --> 00:10:06,800
please let us know

222
00:10:06,800 --> 00:10:09,680
in addition actually we will consider to

223
00:10:09,680 --> 00:10:12,880
edit a paper in ietf journal

224
00:10:12,880 --> 00:10:15,040
and we can hold the pen and but we need

225
00:10:15,040 --> 00:10:16,720
an input from

226
00:10:16,720 --> 00:10:18,800
the auto design team and

227
00:10:18,800 --> 00:10:21,600
an auto community

228
00:10:21,600 --> 00:10:25,279
so i say uh luis

229
00:10:25,920 --> 00:10:28,160
do you have any comments on this

230
00:10:28,160 --> 00:10:30,079
yes i think this is

231
00:10:30,079 --> 00:10:31,680
from telefonica

232
00:10:31,680 --> 00:10:32,399
yeah

233
00:10:32,399 --> 00:10:33,200
we

234
00:10:33,200 --> 00:10:36,399
i we were talking jordy and me about the

235
00:10:36,399 --> 00:10:39,040
different uh potential venues that we

236
00:10:39,040 --> 00:10:41,519
are identifying here in in this meeting

237
00:10:41,519 --> 00:10:43,760
precisely so our proposal will be maybe

238
00:10:43,760 --> 00:10:44,880
to in

239
00:10:44,880 --> 00:10:47,279
one of her weekly calls to

240
00:10:47,279 --> 00:10:49,360
to make a proposal maybe a survey of

241
00:10:49,360 --> 00:10:50,959
what could be potential let's say

242
00:10:50,959 --> 00:10:52,399
targets to

243
00:10:52,399 --> 00:10:53,920
socialize although with different

244
00:10:53,920 --> 00:10:56,240
working groups here also even research

245
00:10:56,240 --> 00:10:58,160
groups from irtf

246
00:10:58,160 --> 00:11:00,880
so just to comment the or proposal of

247
00:11:00,880 --> 00:11:02,399
commenting maybe in one of our weekly

248
00:11:02,399 --> 00:11:03,920
calls and and

249
00:11:03,920 --> 00:11:05,279
and to

250
00:11:05,279 --> 00:11:09,279
to plan some activity in that respect

251
00:11:09,360 --> 00:11:11,600
okay okay

252
00:11:11,600 --> 00:11:13,760
thanks for input actually i hope you

253
00:11:13,760 --> 00:11:15,839
will contribute to this kind of effort

254
00:11:15,839 --> 00:11:18,079
yeah

255
00:11:20,480 --> 00:11:24,320
so any other opinion

256
00:11:27,120 --> 00:11:29,519
if you know actually we can uh kick off

257
00:11:29,519 --> 00:11:32,480
the discussion for a general item

258
00:11:32,480 --> 00:11:36,640
uh and i think the first one

259
00:11:38,880 --> 00:11:41,440
is jason right

260
00:11:41,440 --> 00:11:43,279
jason so

261
00:11:43,279 --> 00:11:47,560
please take a take away

262
00:12:00,079 --> 00:12:01,519
yeah i just

263
00:12:01,519 --> 00:12:05,519
asked to share this slide

264
00:12:08,839 --> 00:12:14,480
yep maybe i need to stop my share right

265
00:12:15,839 --> 00:12:20,279
can you request again maybe

266
00:12:24,160 --> 00:12:25,680
okay okay

267
00:12:25,680 --> 00:12:26,290
i see

268
00:12:26,290 --> 00:12:28,399
[Music]

269
00:12:28,399 --> 00:12:31,279
okay so

270
00:12:31,680 --> 00:12:35,040
hello everyone this is jason and

271
00:12:35,040 --> 00:12:36,720
so there's a slide for

272
00:12:36,720 --> 00:12:40,079
discussion about the the new generator

273
00:12:40,079 --> 00:12:40,959
for

274
00:12:40,959 --> 00:12:45,359
the autoimm and management data module

275
00:12:47,360 --> 00:12:51,040
i work with to roland and kai and we are

276
00:12:51,040 --> 00:12:54,800
working on this uh document right now

277
00:12:54,800 --> 00:12:56,720
they

278
00:12:56,720 --> 00:12:58,079
pick a

279
00:12:58,079 --> 00:13:00,160
summary about this document the main

280
00:13:00,160 --> 00:13:02,720
goal of the document is to try to try to

281
00:13:02,720 --> 00:13:04,880
provide the young data module

282
00:13:04,880 --> 00:13:07,360
for the om and the management of the

283
00:13:07,360 --> 00:13:10,000
auto protocols unless it version already

284
00:13:10,000 --> 00:13:12,160
uploaded to the data tracker also we

285
00:13:12,160 --> 00:13:13,680
also have the

286
00:13:13,680 --> 00:13:17,120
other copies on the github and

287
00:13:17,120 --> 00:13:18,839
in the recent

288
00:13:18,839 --> 00:13:21,440
version we also

289
00:13:21,440 --> 00:13:26,000
include the aussie young audio code

290
00:13:26,000 --> 00:13:29,200
also on the github can be accessed

291
00:13:29,200 --> 00:13:32,639
i think where we can

292
00:13:32,720 --> 00:13:34,560
request and reviews for the initial

293
00:13:34,560 --> 00:13:36,639
version of the uncle

294
00:13:36,639 --> 00:13:38,880
and

295
00:13:39,920 --> 00:13:42,639
for the major uh changes uh since the

296
00:13:42,639 --> 00:13:44,160
latest uh

297
00:13:44,160 --> 00:13:46,639
between this latest version and our

298
00:13:46,639 --> 00:13:48,639
previous version

299
00:13:48,639 --> 00:13:50,720
so why not change the vision day

300
00:13:50,720 --> 00:13:53,760
document title from the om to the o and

301
00:13:53,760 --> 00:13:55,600
m so so which means the oem and

302
00:13:55,600 --> 00:13:56,800
management

303
00:13:56,800 --> 00:13:58,720
that we follow the guideline this is

304
00:13:58,720 --> 00:14:00,079
comments from the

305
00:14:00,079 --> 00:14:02,880
edu in the mailing list

306
00:14:02,880 --> 00:14:07,040
so we check the gala of the art 6291 so

307
00:14:07,040 --> 00:14:09,360
i think they this document not just

308
00:14:09,360 --> 00:14:12,320
target to the om i also include the

309
00:14:12,320 --> 00:14:14,880
management part between this title to

310
00:14:14,880 --> 00:14:16,560
the onm

311
00:14:16,560 --> 00:14:18,560
also writes the scope and requirements

312
00:14:18,560 --> 00:14:21,519
to be exactly aligned with the rfc 7285

313
00:14:21,519 --> 00:14:22,639
and

314
00:14:22,639 --> 00:14:26,079
the rfc 7971

315
00:14:26,079 --> 00:14:27,360
it's also

316
00:14:27,360 --> 00:14:30,639
a common comment from

317
00:14:30,639 --> 00:14:34,079
many reviewers in the middle east

318
00:14:34,560 --> 00:14:38,079
so another major changes will make the

319
00:14:38,079 --> 00:14:39,519
initial

320
00:14:39,519 --> 00:14:42,240
yamada code ready so i think it's ready

321
00:14:42,240 --> 00:14:45,519
to be reviewed and also thanks to the

322
00:14:45,519 --> 00:14:47,360
supermass contribution to the english

323
00:14:47,360 --> 00:14:49,680
version

324
00:14:51,440 --> 00:14:55,519
so this is the current basic requirement

325
00:14:55,519 --> 00:14:56,399
we

326
00:14:56,399 --> 00:14:58,959
post in the latest version so you can

327
00:14:58,959 --> 00:15:01,040
see the basic requirements

328
00:15:01,040 --> 00:15:02,240
they have the

329
00:15:02,240 --> 00:15:05,040
several requirements uh which align to

330
00:15:05,040 --> 00:15:09,600
the app system tuning 85.91

331
00:15:09,600 --> 00:15:11,760
so all the references the given in the

332
00:15:11,760 --> 00:15:14,079
table

333
00:15:15,279 --> 00:15:17,250
and we also have the

334
00:15:17,250 --> 00:15:19,279
[Music]

335
00:15:19,279 --> 00:15:21,040
additional requirements so that's for

336
00:15:21,040 --> 00:15:23,440
the extensibility so as the auto

337
00:15:23,440 --> 00:15:26,399
purchase is extensible so we also

338
00:15:26,399 --> 00:15:29,759
requested it data model for the auto onm

339
00:15:29,759 --> 00:15:30,800
still

340
00:15:30,800 --> 00:15:33,040
should allow for the augmentation to

341
00:15:33,040 --> 00:15:35,040
support the potential future expansion

342
00:15:35,040 --> 00:15:35,920
so

343
00:15:35,920 --> 00:15:38,079
that's a

344
00:15:38,079 --> 00:15:39,920
the current additional requirements i

345
00:15:39,920 --> 00:15:41,519
think is very important for this

346
00:15:41,519 --> 00:15:44,000
document

347
00:15:46,880 --> 00:15:48,959
and then so this is the current status

348
00:15:48,959 --> 00:15:51,440
of the our

349
00:15:51,440 --> 00:15:53,120
progress for

350
00:15:53,120 --> 00:15:55,920
of those requirements so you can see

351
00:15:55,920 --> 00:15:57,360
we have already have the initial

352
00:15:57,360 --> 00:16:00,639
proposal for the from three times five

353
00:16:00,639 --> 00:16:02,959
five one five point two and the

354
00:16:02,959 --> 00:16:04,880
six and eight

355
00:16:04,880 --> 00:16:07,120
uh so right now we are working uh

356
00:16:07,120 --> 00:16:09,440
progress on the

357
00:16:09,440 --> 00:16:13,759
the first requirements and the 5.3 and

358
00:16:13,759 --> 00:16:16,399
day 7.

359
00:16:16,959 --> 00:16:18,399
transfer

360
00:16:18,399 --> 00:16:20,639
it's

361
00:16:20,800 --> 00:16:24,160
in our plan but i've been still in the

362
00:16:24,160 --> 00:16:26,320
to delete the i'm not any purpose right

363
00:16:26,320 --> 00:16:27,360
now

364
00:16:27,360 --> 00:16:29,120
but uh

365
00:16:29,120 --> 00:16:31,199
hope you can finish it

366
00:16:31,199 --> 00:16:34,639
by the next scientific meeting

367
00:16:35,519 --> 00:16:36,720
so

368
00:16:36,720 --> 00:16:39,040
we want to use this slide to give a very

369
00:16:39,040 --> 00:16:41,680
quick uh overview about uh

370
00:16:41,680 --> 00:16:44,959
how we manage this uh

371
00:16:45,040 --> 00:16:48,399
data model so how the model can land to

372
00:16:48,399 --> 00:16:50,800
the other server architectures

373
00:16:50,800 --> 00:16:53,040
so

374
00:16:53,519 --> 00:16:55,839
they did blackbox uh

375
00:16:55,839 --> 00:16:57,920
its black clothes means uh

376
00:16:57,920 --> 00:17:02,160
component uh in the auto server so it

377
00:17:02,160 --> 00:17:05,839
is inside model scope so this this model

378
00:17:05,839 --> 00:17:08,640
will provide a

379
00:17:08,640 --> 00:17:10,880
uh

380
00:17:12,079 --> 00:17:14,240
the the current document will provide

381
00:17:14,240 --> 00:17:15,520
any model for

382
00:17:15,520 --> 00:17:16,839
those components like this server

383
00:17:16,839 --> 00:17:18,880
management the information resource

384
00:17:18,880 --> 00:17:21,280
management the performance monitor

385
00:17:21,280 --> 00:17:23,280
logging and phone management

386
00:17:23,280 --> 00:17:24,720
and also the

387
00:17:24,720 --> 00:17:28,400
data source listener so never requires a

388
00:17:28,400 --> 00:17:31,120
data mod spot but

389
00:17:31,120 --> 00:17:34,480
in the auto scope we also have them

390
00:17:34,480 --> 00:17:37,120
data brokers to

391
00:17:37,120 --> 00:17:39,440
define how to

392
00:17:39,440 --> 00:17:42,000
store and

393
00:17:43,840 --> 00:17:45,440
use this uh

394
00:17:45,440 --> 00:17:47,679
clock from this resources

395
00:17:47,679 --> 00:17:48,320
and

396
00:17:48,320 --> 00:17:49,130
also need some

397
00:17:49,130 --> 00:17:51,200
[Music]

398
00:17:51,200 --> 00:17:55,120
implement specific algorithm plugins to

399
00:17:55,120 --> 00:17:59,039
really define how to translate this data

400
00:17:59,039 --> 00:18:02,240
data sources to the specific information

401
00:18:02,240 --> 00:18:04,000
resources

402
00:18:04,000 --> 00:18:08,240
they are in the autoscope but not in the

403
00:18:08,240 --> 00:18:12,360
scope of this data model document

404
00:18:17,919 --> 00:18:20,160
and

405
00:18:20,799 --> 00:18:22,960
they so this is the

406
00:18:22,960 --> 00:18:25,919
gift for the

407
00:18:25,919 --> 00:18:28,000
server setup so which is the first

408
00:18:28,000 --> 00:18:30,320
requirement

409
00:18:30,320 --> 00:18:31,280
so

410
00:18:31,280 --> 00:18:32,880
this part will define some meta

411
00:18:32,880 --> 00:18:34,799
information

412
00:18:34,799 --> 00:18:36,799
for the server level

413
00:18:36,799 --> 00:18:40,640
uh oem and management but it's still in

414
00:18:40,640 --> 00:18:43,520
working progress so you can see the

415
00:18:43,520 --> 00:18:44,880
current

416
00:18:44,880 --> 00:18:47,760
information word

417
00:18:49,200 --> 00:18:50,720
they only include

418
00:18:50,720 --> 00:18:53,039
some copies of the required information

419
00:18:53,039 --> 00:18:53,840
so

420
00:18:53,840 --> 00:18:54,420
trying to

421
00:18:54,420 --> 00:18:55,760
[Music]

422
00:18:55,760 --> 00:18:57,280
make it more

423
00:18:57,280 --> 00:18:58,720
comprehensive like

424
00:18:58,720 --> 00:19:01,200
we try to

425
00:19:01,200 --> 00:19:04,000
also include some http server

426
00:19:04,000 --> 00:19:06,320
lesson configurations which is inspired

427
00:19:06,320 --> 00:19:10,000
by the redstone server

428
00:19:10,000 --> 00:19:12,960
data models and also we also need some

429
00:19:12,960 --> 00:19:14,480
dns computations for the server

430
00:19:14,480 --> 00:19:18,640
discovery which is required by the fj72

431
00:19:18,640 --> 00:19:20,559
86 and

432
00:19:20,559 --> 00:19:23,559
86

433
00:19:26,799 --> 00:19:28,080
and

434
00:19:28,080 --> 00:19:30,559
this one will be the major piece of this

435
00:19:30,559 --> 00:19:32,799
data model which is provided model for

436
00:19:32,799 --> 00:19:35,280
the information resource management

437
00:19:35,280 --> 00:19:38,400
and to achieve this uh so that this is

438
00:19:38,400 --> 00:19:40,799
the uh requirement five

439
00:19:40,799 --> 00:19:43,280
so to achieve this uh we separated to

440
00:19:43,280 --> 00:19:44,000
the

441
00:19:44,000 --> 00:19:46,480
three pieces why is uh

442
00:19:46,480 --> 00:19:50,000
how to define uh

443
00:19:50,400 --> 00:19:54,080
information results so it provides some

444
00:19:54,080 --> 00:19:57,440
common parameters for its resource and

445
00:19:57,440 --> 00:19:58,320
the

446
00:19:58,320 --> 00:20:00,559
resource specific parameters and in each

447
00:20:00,559 --> 00:20:03,760
research specific parameters

448
00:20:03,760 --> 00:20:06,000
the opportunity to specify what

449
00:20:06,000 --> 00:20:08,559
algorithm used to generate this

450
00:20:08,559 --> 00:20:10,640
information result and which data

451
00:20:10,640 --> 00:20:12,159
sources

452
00:20:12,159 --> 00:20:13,840
can be used to

453
00:20:13,840 --> 00:20:14,799
generate

454
00:20:14,799 --> 00:20:17,799
information

455
00:20:25,840 --> 00:20:29,760
and for the third monitoring

456
00:20:30,640 --> 00:20:32,159
they

457
00:20:32,159 --> 00:20:33,120
so they

458
00:20:33,120 --> 00:20:34,640
the green uh

459
00:20:34,640 --> 00:20:36,799
landmark uh

460
00:20:36,799 --> 00:20:40,400
to the uh these atoms uh marked in the

461
00:20:40,400 --> 00:20:43,120
green colors uh means uh it's already

462
00:20:43,120 --> 00:20:44,960
included in the current

463
00:20:44,960 --> 00:20:46,960
model

464
00:20:46,960 --> 00:20:47,679
and

465
00:20:47,679 --> 00:20:50,000
the atom marking the red colors means

466
00:20:50,000 --> 00:20:52,799
they still work in progress it's not

467
00:20:52,799 --> 00:20:55,520
still not in the

468
00:20:55,520 --> 00:20:57,120
conjugate models part

469
00:20:57,120 --> 00:20:58,320
but we are

470
00:20:58,320 --> 00:21:00,799
trying to work on them to finish this by

471
00:21:00,799 --> 00:21:03,840
the entire active meeting

472
00:21:04,640 --> 00:21:06,960
so the meterpiece uh we still need some

473
00:21:06,960 --> 00:21:09,280
discussion about how which

474
00:21:09,280 --> 00:21:12,159
specific information needs to be put for

475
00:21:12,159 --> 00:21:13,360
the

476
00:21:13,360 --> 00:21:15,840
mailman on impact which is

477
00:21:15,840 --> 00:21:19,039
because some information will

478
00:21:19,039 --> 00:21:21,360
associate with the

479
00:21:21,360 --> 00:21:24,879
application performance so

480
00:21:26,240 --> 00:21:27,760
that probably

481
00:21:27,760 --> 00:21:29,679
will be

482
00:21:29,679 --> 00:21:32,000
implementation

483
00:21:32,000 --> 00:21:33,520
related

484
00:21:33,520 --> 00:21:35,760
not uh so we'll try to summarize some

485
00:21:35,760 --> 00:21:39,679
common features from this uh

486
00:21:40,640 --> 00:21:45,320
merman so to get some proposal

487
00:21:49,280 --> 00:21:51,120
and another major pieces

488
00:21:51,120 --> 00:21:53,360
already including the current data model

489
00:21:53,360 --> 00:21:55,120
is that

490
00:21:55,120 --> 00:21:57,039
they

491
00:21:57,039 --> 00:21:59,039
of all they recommend

492
00:21:59,039 --> 00:22:01,120
which is how to

493
00:22:01,120 --> 00:22:04,159
provide the sensibility so how to

494
00:22:04,159 --> 00:22:07,200
extend the current to the model

495
00:22:07,200 --> 00:22:08,400
to

496
00:22:08,400 --> 00:22:13,400
support some future features like

497
00:22:13,679 --> 00:22:14,880
if the

498
00:22:14,880 --> 00:22:17,679
developer wants to implement some

499
00:22:17,679 --> 00:22:19,520
specific algorithm

500
00:22:19,520 --> 00:22:21,200
to define

501
00:22:21,200 --> 00:22:24,000
how to generate a

502
00:22:24,000 --> 00:22:27,760
information resources so this example

503
00:22:27,760 --> 00:22:29,919
gives issues how to

504
00:22:29,919 --> 00:22:32,240
argument the algorithm choice of the

505
00:22:32,240 --> 00:22:34,480
auto network parameters

506
00:22:34,480 --> 00:22:36,080
with a creation

507
00:22:36,080 --> 00:22:38,639
algorithm

508
00:22:38,840 --> 00:22:42,000
so it's required simple so you just need

509
00:22:42,000 --> 00:22:44,880
to specify so

510
00:22:44,880 --> 00:22:48,480
which source id uh

511
00:22:48,480 --> 00:22:50,080
should be used and the third item will

512
00:22:50,080 --> 00:22:51,760
link to

513
00:22:51,760 --> 00:22:52,840
a layer

514
00:22:52,840 --> 00:22:56,080
three networks about

515
00:22:56,080 --> 00:22:57,919
which is defined in

516
00:22:57,919 --> 00:23:01,280
another your model so

517
00:23:01,360 --> 00:23:05,360
it can be provided by the netcom and

518
00:23:05,360 --> 00:23:07,160
we reference another

519
00:23:07,160 --> 00:23:10,219
[Music]

520
00:23:10,240 --> 00:23:11,919
individual draft which provide the

521
00:23:11,919 --> 00:23:13,679
reference algorithm implementation so

522
00:23:13,679 --> 00:23:16,400
how to translate this uh

523
00:23:16,400 --> 00:23:17,840
the layer 3

524
00:23:17,840 --> 00:23:20,480
network model to the auto information

525
00:23:20,480 --> 00:23:21,679
the network

526
00:23:21,679 --> 00:23:25,039
map and the custom app

527
00:23:32,960 --> 00:23:36,200
yeah so

528
00:23:36,400 --> 00:23:38,320
the obvious days come to

529
00:23:38,320 --> 00:23:40,720
progress uh we achieved for the current

530
00:23:40,720 --> 00:23:43,120
data model but we still have some

531
00:23:43,120 --> 00:23:44,559
questions

532
00:23:44,559 --> 00:23:46,880
about how to proceed

533
00:23:46,880 --> 00:23:48,799
so

534
00:23:48,799 --> 00:23:50,559
the first question actually generated

535
00:23:50,559 --> 00:23:53,760
recently in the mailing list

536
00:23:54,080 --> 00:23:55,520
which is uh

537
00:23:55,520 --> 00:23:57,039
because this data model referenced

538
00:23:57,039 --> 00:24:00,159
several uh identities and the numeration

539
00:24:00,159 --> 00:24:01,039
type

540
00:24:01,039 --> 00:24:02,159
defined

541
00:24:02,159 --> 00:24:04,720
which are managed by the ana registries

542
00:24:04,720 --> 00:24:08,320
so to make it uh this model extensible

543
00:24:08,320 --> 00:24:10,720
one question is that uh to remove them

544
00:24:10,720 --> 00:24:13,440
into a separate ion

545
00:24:13,440 --> 00:24:15,760
management uh match the

546
00:24:15,760 --> 00:24:18,480
data model like there are no auto tabs

547
00:24:18,480 --> 00:24:22,240
uh we just keep in the

548
00:24:22,240 --> 00:24:23,679
common uh

549
00:24:23,679 --> 00:24:26,640
models though so we already asked the

550
00:24:26,640 --> 00:24:28,720
young doctors about what's the best

551
00:24:28,720 --> 00:24:30,640
practice

552
00:24:30,640 --> 00:24:33,600
for this for argument that if we make

553
00:24:33,600 --> 00:24:35,600
this change so it can

554
00:24:35,600 --> 00:24:38,080
fill up update like the

555
00:24:38,080 --> 00:24:41,120
metrics and the customer updates so it

556
00:24:41,120 --> 00:24:42,880
will be easy to support it without

557
00:24:42,880 --> 00:24:44,880
updating the our basic

558
00:24:44,880 --> 00:24:46,880
community module

559
00:24:46,880 --> 00:24:48,159
but the

560
00:24:48,159 --> 00:24:51,360
him also introduced some complexity so

561
00:24:51,360 --> 00:24:53,039
we need something

562
00:24:53,039 --> 00:24:55,679
for this part

563
00:24:57,919 --> 00:25:02,880
so for chair uh doing two stuff here and

564
00:25:03,200 --> 00:25:06,799
there's some discussion oh we just

565
00:25:07,279 --> 00:25:13,000
post all the questions and then we can

566
00:25:14,400 --> 00:25:15,679
yeah

567
00:25:15,679 --> 00:25:17,520
i see this issue you are already you

568
00:25:17,520 --> 00:25:18,320
know

569
00:25:18,320 --> 00:25:20,960
sent to the list and also copied to the

570
00:25:20,960 --> 00:25:24,720
young doctor to get a confirmation so we

571
00:25:24,720 --> 00:25:25,919
can actually

572
00:25:25,919 --> 00:25:29,440
discuss with you and offline and we have

573
00:25:29,440 --> 00:25:32,000
two uh proposals on the table one is

574
00:25:32,000 --> 00:25:33,679
you can change your numeration into the

575
00:25:33,679 --> 00:25:36,720
identity the second actually you define

576
00:25:36,720 --> 00:25:39,360
all all these type of definition in the

577
00:25:39,360 --> 00:25:41,279
ana

578
00:25:41,279 --> 00:25:42,720
module so

579
00:25:42,720 --> 00:25:46,240
i think both uh proposal actually works

580
00:25:46,240 --> 00:25:48,640
but we need to you know double check a

581
00:25:48,640 --> 00:25:52,159
young doctor get their feedback my

582
00:25:52,159 --> 00:25:54,159
uh i think we can

583
00:25:54,159 --> 00:25:57,120
open the floor to get any feedback for

584
00:25:57,120 --> 00:26:01,120
anyone to share your opinion

585
00:26:01,919 --> 00:26:04,640
okay uh i see richard asked the question

586
00:26:04,640 --> 00:26:08,919
was complexity when decomposed

587
00:26:11,760 --> 00:26:13,840
sorry to kind of explain a little bit uh

588
00:26:13,840 --> 00:26:17,199
not sure i understand your question

589
00:26:20,240 --> 00:26:21,279
so mike

590
00:26:21,279 --> 00:26:25,400
richard can you go to the mic

591
00:26:36,640 --> 00:26:39,840
richard go ahead

592
00:26:41,600 --> 00:26:43,360
i i heard jason

593
00:26:43,360 --> 00:26:45,200
want to discuss about this composition

594
00:26:45,200 --> 00:26:46,799
he mentioned there could be some

595
00:26:46,799 --> 00:26:49,039
potential complexes therefore i was

596
00:26:49,039 --> 00:26:51,360
wondering what kind of complex is i

597
00:26:51,360 --> 00:26:54,320
think i saw some uh uh a quick comment

598
00:26:54,320 --> 00:26:55,840
from druva that there might be

599
00:26:55,840 --> 00:26:58,159
complexity i think maybe there's some

600
00:26:58,159 --> 00:27:00,720
like a potential uh caveat that people

601
00:27:00,720 --> 00:27:02,559
need need to pay attention so what would

602
00:27:02,559 --> 00:27:03,840
that be

603
00:27:03,840 --> 00:27:05,200
being when you mentioned about profile

604
00:27:05,200 --> 00:27:08,080
matrix performance can can have a some

605
00:27:08,080 --> 00:27:10,159
complex for example

606
00:27:10,159 --> 00:27:10,960
uh

607
00:27:10,960 --> 00:27:12,960
for example tcp throughput right a big

608
00:27:12,960 --> 00:27:14,880
part of configuration would be specified

609
00:27:14,880 --> 00:27:16,960
which tcp model so they're all kind of

610
00:27:16,960 --> 00:27:20,080
issues so what oh okay so therefore i'm

611
00:27:20,080 --> 00:27:22,559
listening to see okay i i i saw some

612
00:27:22,559 --> 00:27:24,720
comments by matt as well but i want to

613
00:27:24,720 --> 00:27:28,720
hear from you as well jensen go ahead

614
00:27:30,480 --> 00:27:33,480
okay

615
00:27:34,480 --> 00:27:37,120
yeah actually the

616
00:27:37,120 --> 00:27:39,840
yeah the complexity see a part

617
00:27:39,840 --> 00:27:42,080
yeah i mean what isn't getting to

618
00:27:42,080 --> 00:27:45,200
to get the feedback from the

619
00:27:45,200 --> 00:27:46,840
the younger

620
00:27:46,840 --> 00:27:49,840
doctors because i see some uh some

621
00:27:49,840 --> 00:27:51,200
documents uh

622
00:27:51,200 --> 00:27:52,000
some

623
00:27:52,000 --> 00:27:53,520
yamamoto

624
00:27:53,520 --> 00:27:55,360
purpose document will

625
00:27:55,360 --> 00:27:57,760
integrate the

626
00:27:57,760 --> 00:27:59,600
ana management

627
00:27:59,600 --> 00:28:01,279
into the single

628
00:28:01,279 --> 00:28:02,399
mother but

629
00:28:02,399 --> 00:28:04,320
something will separate them yeah i'm

630
00:28:04,320 --> 00:28:07,918
not sure what's the best practice

631
00:28:15,200 --> 00:28:17,600
okay i'll i'll take it until the meaning

632
00:28:17,600 --> 00:28:21,039
is to this house a bit more thank you

633
00:28:21,039 --> 00:28:23,360
okay

634
00:28:26,080 --> 00:28:28,320
so

635
00:28:28,399 --> 00:28:30,240
yeah we can we can move this uh the more

636
00:28:30,240 --> 00:28:32,720
detailed discussion to the main list and

637
00:28:32,720 --> 00:28:33,520
uh

638
00:28:33,520 --> 00:28:35,360
i just uh

639
00:28:35,360 --> 00:28:36,960
post some other uh

640
00:28:36,960 --> 00:28:39,120
questions here yeah

641
00:28:39,120 --> 00:28:41,679
so one other questions about

642
00:28:41,679 --> 00:28:43,760
yeah because a lot of parameters can be

643
00:28:43,760 --> 00:28:45,919
configured for

644
00:28:45,919 --> 00:28:48,640
the auto information generation

645
00:28:48,640 --> 00:28:50,480
but we need some

646
00:28:50,480 --> 00:28:52,880
principles for so which one should be

647
00:28:52,880 --> 00:28:56,000
defined in the standard basic module and

648
00:28:56,000 --> 00:28:57,120
which one

649
00:28:57,120 --> 00:28:59,360
should just delegate to the algorithm

650
00:28:59,360 --> 00:29:02,640
not to be the common parameters

651
00:29:02,640 --> 00:29:03,520
like

652
00:29:03,520 --> 00:29:06,159
i see some uh one

653
00:29:06,159 --> 00:29:07,279
uh

654
00:29:07,279 --> 00:29:09,600
be suggested by the

655
00:29:09,600 --> 00:29:12,799
base particles and also the f6m9

656
00:29:12,799 --> 00:29:15,200
symptomizing knight

657
00:29:15,200 --> 00:29:16,559
but

658
00:29:16,559 --> 00:29:18,240
yeah for example the east coast

659
00:29:18,240 --> 00:29:20,480
magnitude configures the different two

660
00:29:20,480 --> 00:29:22,559
pids and

661
00:29:22,559 --> 00:29:24,000
i also

662
00:29:24,000 --> 00:29:26,720
probably have some parameters to point

663
00:29:26,720 --> 00:29:29,760
out what's granularity for each network

664
00:29:29,760 --> 00:29:32,159
map and cosmic

665
00:29:32,159 --> 00:29:34,880
and also probably have some

666
00:29:34,880 --> 00:29:37,919
plan-specific computing to

667
00:29:37,919 --> 00:29:40,960
define the

668
00:29:40,960 --> 00:29:43,600
the information resource level access

669
00:29:43,600 --> 00:29:46,399
control so which client can

670
00:29:46,399 --> 00:29:49,120
request this uh

671
00:29:49,120 --> 00:29:51,679
resource and which can come out it can

672
00:29:51,679 --> 00:29:55,039
be detached by the current ip or some

673
00:29:55,039 --> 00:29:56,960
some other

674
00:29:56,960 --> 00:29:59,520
metadata from the client

675
00:29:59,520 --> 00:30:01,200
so

676
00:30:01,200 --> 00:30:02,720
i think we need to achieve some

677
00:30:02,720 --> 00:30:05,440
principles so which one is to include in

678
00:30:05,440 --> 00:30:07,520
the in this data model and which means

679
00:30:07,520 --> 00:30:10,320
not in the scope should be moved to the

680
00:30:10,320 --> 00:30:13,960
algorithmic tension

681
00:30:24,480 --> 00:30:28,720
so uh jason go back to the

682
00:30:28,720 --> 00:30:30,559
question

683
00:30:30,559 --> 00:30:33,360
sure yeah do we have a standard

684
00:30:33,360 --> 00:30:35,440
algorithm we can leverage it

685
00:30:35,440 --> 00:30:37,840
now

686
00:30:39,440 --> 00:30:42,559
what do you mean standard like algorithm

687
00:30:42,559 --> 00:30:44,880
actually this is a module i'm not trying

688
00:30:44,880 --> 00:30:47,520
to define any algorithm so acronym

689
00:30:47,520 --> 00:30:48,559
should not

690
00:30:48,559 --> 00:30:50,880
be in the scope of the data model

691
00:30:50,880 --> 00:30:54,960
actually algorithm should always be some

692
00:30:54,960 --> 00:30:57,760
kind of extension

693
00:30:58,960 --> 00:31:01,840
okay maybe i'm misunderstood

694
00:31:01,840 --> 00:31:04,399
i think we can focus on you know a

695
00:31:04,399 --> 00:31:07,200
basic parameter that has already been

696
00:31:07,200 --> 00:31:09,600
specified specified by auto based

697
00:31:09,600 --> 00:31:12,399
protocol and we can stick to

698
00:31:12,399 --> 00:31:16,080
the basic set you know

699
00:31:30,480 --> 00:31:31,360
yes

700
00:31:31,360 --> 00:31:34,960
do you have some comment uh

701
00:31:34,960 --> 00:31:38,000
so do you want to speak

702
00:31:38,880 --> 00:31:40,480
yeah

703
00:31:40,480 --> 00:31:43,279
maybe you move to the next one how

704
00:31:43,279 --> 00:31:45,039
do you have it

705
00:31:45,039 --> 00:31:48,559
how many slides do you have

706
00:31:50,080 --> 00:31:53,440
yeah actually i just prepared the

707
00:31:53,440 --> 00:31:56,240
the first three simple discus questions

708
00:31:56,240 --> 00:31:59,600
so most discussions come to

709
00:31:59,600 --> 00:32:01,600
try to move to their main list so you

710
00:32:01,600 --> 00:32:03,919
can define more details and

711
00:32:03,919 --> 00:32:07,360
this three one i think it

712
00:32:08,399 --> 00:32:11,600
can be finished in the meetings so

713
00:32:11,600 --> 00:32:15,200
another discussion about the

714
00:32:15,200 --> 00:32:16,799
yeah so far you can see the other

715
00:32:16,799 --> 00:32:19,360
requirements as for the also servers

716
00:32:19,360 --> 00:32:21,120
so we don't have any comments for the

717
00:32:21,120 --> 00:32:22,799
auto client side

718
00:32:22,799 --> 00:32:24,320
but

719
00:32:24,320 --> 00:32:26,799
actually in the initial versions we also

720
00:32:26,799 --> 00:32:28,799
mentioned that yeah we're trying to

721
00:32:28,799 --> 00:32:30,240
include some

722
00:32:30,240 --> 00:32:33,360
include the auto client

723
00:32:33,440 --> 00:32:36,720
in the scope of this document

724
00:32:37,279 --> 00:32:40,720
because the proper point parents

725
00:32:40,720 --> 00:32:43,200
using the auto client also do some

726
00:32:43,200 --> 00:32:44,799
uh to need some

727
00:32:44,799 --> 00:32:46,240
oem

728
00:32:46,240 --> 00:32:48,480
uh

729
00:32:49,200 --> 00:32:52,559
for example we need to configure the the

730
00:32:52,559 --> 00:32:54,399
caching management the server discovery

731
00:32:54,399 --> 00:32:57,360
part and

732
00:32:57,360 --> 00:32:59,679
if the house client can access the

733
00:32:59,679 --> 00:33:02,480
multiple uh auto servers i also need

734
00:33:02,480 --> 00:33:05,120
some measurements for which one to

735
00:33:05,120 --> 00:33:07,678
be choice

736
00:33:08,240 --> 00:33:09,200
so

737
00:33:09,200 --> 00:33:10,960
but i think uh

738
00:33:10,960 --> 00:33:13,919
the om for the auto client should also

739
00:33:13,919 --> 00:33:15,440
be

740
00:33:15,440 --> 00:33:18,240
important but

741
00:33:18,640 --> 00:33:20,399
one thing uh

742
00:33:20,399 --> 00:33:21,840
i'm not sure is that

743
00:33:21,840 --> 00:33:24,720
if the yamamoto is a good approach to

744
00:33:24,720 --> 00:33:29,320
expand for the clan oem

745
00:33:38,080 --> 00:33:40,240
okay uh any

746
00:33:40,240 --> 00:33:41,120
comments

747
00:33:41,120 --> 00:33:42,799
for this question

748
00:33:42,799 --> 00:33:45,679
i say martin

749
00:33:48,399 --> 00:33:52,000
uh martin duke google um

750
00:33:52,000 --> 00:33:53,200
so i think you're asking the right

751
00:33:53,200 --> 00:33:55,840
questions here um but i think chin's

752
00:33:55,840 --> 00:33:58,240
advice is good

753
00:33:58,240 --> 00:33:59,919
um

754
00:33:59,919 --> 00:34:02,320
you should strive to reduce the scope of

755
00:34:02,320 --> 00:34:04,880
this wherever you can um

756
00:34:04,880 --> 00:34:08,480
and if no one is willing to speak up

757
00:34:08,480 --> 00:34:10,639
for any of these uh

758
00:34:10,639 --> 00:34:12,239
particular features you should probably

759
00:34:12,239 --> 00:34:14,960
just omit them make sure that they're

760
00:34:14,960 --> 00:34:18,399
extensible to support later but um

761
00:34:18,399 --> 00:34:20,000
uh i mean like i said if someone wants

762
00:34:20,000 --> 00:34:21,839
to speak up for any for this or for any

763
00:34:21,839 --> 00:34:24,079
of the other features that's great but

764
00:34:24,079 --> 00:34:25,918
otherwise just leave it out

765
00:34:25,918 --> 00:34:28,239
thanks

766
00:34:30,000 --> 00:34:34,119
okay thanks for coming

767
00:34:36,239 --> 00:34:38,719
rachel

768
00:34:40,000 --> 00:34:42,079
i think martin gave a very good reach

769
00:34:42,079 --> 00:34:44,079
idiom from yeah so uh martin keep a

770
00:34:44,079 --> 00:34:46,159
wonderful comments and very good

771
00:34:46,159 --> 00:34:49,359
suggestions uh i i do want to but uh

772
00:34:49,359 --> 00:34:52,399
somehow i i do i think uh the issue of

773
00:34:52,399 --> 00:34:54,639
how to configure auto clients

774
00:34:54,639 --> 00:34:56,560
it's an interesting issue because that's

775
00:34:56,560 --> 00:34:59,440
an issue uh that we encountered during

776
00:34:59,440 --> 00:35:01,680
uh yeah changing yourself right and we

777
00:35:01,680 --> 00:35:02,640
stored it

778
00:35:02,640 --> 00:35:04,480
to configure use it right for user

779
00:35:04,480 --> 00:35:06,480
download command and a huge amount of

780
00:35:06,480 --> 00:35:08,240
back and forth about how to configure

781
00:35:08,240 --> 00:35:09,839
the

782
00:35:09,839 --> 00:35:10,640
the

783
00:35:10,640 --> 00:35:13,520
client and do we do using command line

784
00:35:13,520 --> 00:35:15,760
how do we use computer file uh what kind

785
00:35:15,760 --> 00:35:17,839
of primary do we configure they're

786
00:35:17,839 --> 00:35:20,400
clearly uh they are application specific

787
00:35:20,400 --> 00:35:22,160
they're all different culture

788
00:35:22,160 --> 00:35:24,079
right really essentially command line

789
00:35:24,079 --> 00:35:25,760
from cern so they have different

790
00:35:25,760 --> 00:35:27,599
suggestions so uh

791
00:35:27,599 --> 00:35:29,359
i think marketing suggestions is great

792
00:35:29,359 --> 00:35:30,880
but maybe there's some way to tell

793
00:35:30,880 --> 00:35:34,240
people uh exactly how uh

794
00:35:34,240 --> 00:35:35,920
i think uh you will mention the

795
00:35:35,920 --> 00:35:37,280
consistency across different young

796
00:35:37,280 --> 00:35:38,960
modules and maybe here we can also

797
00:35:38,960 --> 00:35:40,640
subscribe to people for different uh

798
00:35:40,640 --> 00:35:42,960
auto clients for example you know ruseo

799
00:35:42,960 --> 00:35:44,000
or we're working on some other

800
00:35:44,000 --> 00:35:45,680
applications as well

801
00:35:45,680 --> 00:35:48,240
and what would be some common ways to

802
00:35:48,240 --> 00:35:49,920
configure auto client can be a very

803
00:35:49,920 --> 00:35:53,680
interesting way to move forward

804
00:35:56,839 --> 00:36:00,480
yeah i also think yeah

805
00:36:00,480 --> 00:36:03,520
it's very important yeah

806
00:36:04,480 --> 00:36:06,880
yeah i tend to agree with uh

807
00:36:06,880 --> 00:36:09,599
richer actually

808
00:36:09,599 --> 00:36:12,720
otherwise for normal client without auto

809
00:36:12,720 --> 00:36:14,720
protocol support can

810
00:36:14,720 --> 00:36:17,040
discover the auto server

811
00:36:17,040 --> 00:36:17,839
you know

812
00:36:17,839 --> 00:36:20,560
there's no way to do this you need some

813
00:36:20,560 --> 00:36:23,839
configuration for auto client

814
00:36:30,560 --> 00:36:33,920
i say uh joe and

815
00:36:36,800 --> 00:36:37,920
hi

816
00:36:37,920 --> 00:36:40,320
so one query which i had for the auto

817
00:36:40,320 --> 00:36:42,960
working group to also guide us is

818
00:36:42,960 --> 00:36:45,680
whether the current auto clients which

819
00:36:45,680 --> 00:36:48,160
are envisioned do they already support

820
00:36:48,160 --> 00:36:51,920
yang based interfaces for om techniques

821
00:36:51,920 --> 00:36:54,000
is if that is not the case even if we

822
00:36:54,000 --> 00:36:55,920
write a yang model the issue would be

823
00:36:55,920 --> 00:36:57,680
that yang model may not get deployed

824
00:36:57,680 --> 00:36:59,760
because these are the kind of client

825
00:36:59,760 --> 00:37:02,400
client devices that do not use rescon

826
00:37:02,400 --> 00:37:03,200
for

827
00:37:03,200 --> 00:37:05,200
like the typical techniques that we have

828
00:37:05,200 --> 00:37:07,359
for young models so this part was not

829
00:37:07,359 --> 00:37:09,359
very clear to me so i would be looking

830
00:37:09,359 --> 00:37:11,119
for more feedback from

831
00:37:11,119 --> 00:37:12,880
like you know people who are

832
00:37:12,880 --> 00:37:14,880
developing also clients to give us that

833
00:37:14,880 --> 00:37:17,680
feedback as well

834
00:37:18,160 --> 00:37:20,560
yeah that's a very good uh point

835
00:37:20,560 --> 00:37:23,920
yeah that's also my concern because uh

836
00:37:23,920 --> 00:37:27,119
yeah for my own experience

837
00:37:27,119 --> 00:37:29,280
so far we are not using the

838
00:37:29,280 --> 00:37:31,359
yam mode to develop the

839
00:37:31,359 --> 00:37:32,720
client because

840
00:37:32,720 --> 00:37:34,839
some applications

841
00:37:34,839 --> 00:37:37,920
uh that try to use their

842
00:37:37,920 --> 00:37:40,079
level is the auto server

843
00:37:40,079 --> 00:37:43,520
the auto pro code but you not use the

844
00:37:43,520 --> 00:37:45,839
red comp uh netcom to

845
00:37:45,839 --> 00:37:48,560
be because the the um high level

846
00:37:48,560 --> 00:37:49,680
application

847
00:37:49,680 --> 00:37:50,180
now they

848
00:37:50,180 --> 00:37:51,920
[Music]

849
00:37:51,920 --> 00:37:54,160
some application for the network devices

850
00:37:54,160 --> 00:37:56,320
are

851
00:37:56,320 --> 00:37:58,880
the controllers awesome i think so

852
00:37:58,880 --> 00:38:02,000
they are not using the their modules to

853
00:38:02,000 --> 00:38:03,520
match their

854
00:38:03,520 --> 00:38:05,760
applications so the clients

855
00:38:05,760 --> 00:38:08,160
also now use the yamamoto server

856
00:38:08,160 --> 00:38:09,440
but

857
00:38:09,440 --> 00:38:11,280
probably some other

858
00:38:11,280 --> 00:38:12,800
applications

859
00:38:12,800 --> 00:38:15,119
will use yamamoto

860
00:38:15,119 --> 00:38:16,480
so i'm not sure

861
00:38:16,480 --> 00:38:18,320
also

862
00:38:18,320 --> 00:38:20,560
read this question today mainly to today

863
00:38:20,560 --> 00:38:23,280
working group to say

864
00:38:23,280 --> 00:38:25,680
if other people have seen

865
00:38:25,680 --> 00:38:28,399
comments on this

866
00:38:28,560 --> 00:38:30,880
and i think med also mentioned that on

867
00:38:30,880 --> 00:38:33,680
the chat it doesn't hurt us to create an

868
00:38:33,680 --> 00:38:35,920
alto client yang model like you know it

869
00:38:35,920 --> 00:38:38,320
will act as sort of an information model

870
00:38:38,320 --> 00:38:40,640
for even if somebody wants to use some

871
00:38:40,640 --> 00:38:42,480
other techniques but this will be the

872
00:38:42,480 --> 00:38:46,800
common data that any auto client must

873
00:38:46,800 --> 00:38:49,760
use so sort of using yang as an info

874
00:38:49,760 --> 00:38:51,359
model that we have

875
00:38:51,359 --> 00:38:53,119
standardized but it's okay but like you

876
00:38:53,119 --> 00:38:55,200
know we would need more feedback from

877
00:38:55,200 --> 00:38:56,880
the working group so that we can do the

878
00:38:56,880 --> 00:39:00,119
right thing

879
00:39:01,359 --> 00:39:03,680
yeah i agree

880
00:39:03,680 --> 00:39:05,119
okay

881
00:39:05,119 --> 00:39:06,880
so jody do you have a clear comment

882
00:39:06,880 --> 00:39:08,079
actually we

883
00:39:08,079 --> 00:39:11,359
run on time for this topic

884
00:39:12,560 --> 00:39:15,200
hi uh jordy from qualcomm yeah there was

885
00:39:15,200 --> 00:39:16,640
a conversation just a couple days with

886
00:39:16,640 --> 00:39:18,800
alberto and fabio and

887
00:39:18,800 --> 00:39:20,480
also the idea of um

888
00:39:20,480 --> 00:39:22,800
uh you know how do we not

889
00:39:22,800 --> 00:39:24,800
impose modifying the application uh to

890
00:39:24,800 --> 00:39:26,160
integrate with an auto client

891
00:39:26,160 --> 00:39:28,240
potentially providing like a proxy so

892
00:39:28,240 --> 00:39:29,280
that you don't have to modify the

893
00:39:29,280 --> 00:39:30,960
application basically so that the auto

894
00:39:30,960 --> 00:39:32,240
client would run

895
00:39:32,240 --> 00:39:34,240
in a proxy or and then there's also

896
00:39:34,240 --> 00:39:35,680
conversations on

897
00:39:35,680 --> 00:39:38,079
edge computing um for instance law

898
00:39:38,079 --> 00:39:40,720
balancing so um presentations at

899
00:39:40,720 --> 00:39:43,359
competing aware networking and so on um

900
00:39:43,359 --> 00:39:45,119
about performing load balancing and so

901
00:39:45,119 --> 00:39:47,280
the load balancer that decides how to

902
00:39:47,280 --> 00:39:49,760
steer traffic in the edge cloud uh could

903
00:39:49,760 --> 00:39:52,160
benefit from from an auto client uh

904
00:39:52,160 --> 00:39:53,440
implementation so those are a couple of

905
00:39:53,440 --> 00:39:55,040
use cases um

906
00:39:55,040 --> 00:39:57,119
that um you know it's worth uh asking

907
00:39:57,119 --> 00:39:58,720
whether this would require some kind of

908
00:39:58,720 --> 00:40:00,000
a

909
00:40:00,000 --> 00:40:02,000
good way to actually configure this um

910
00:40:02,000 --> 00:40:03,599
specific use case whether it's a proxy

911
00:40:03,599 --> 00:40:06,240
or an lb that could benefit from from

912
00:40:06,240 --> 00:40:08,079
you know uh interaction with an

913
00:40:08,079 --> 00:40:10,960
autoclient uh basically so

914
00:40:10,960 --> 00:40:13,200
thanks

915
00:40:13,599 --> 00:40:17,040
okay thanks that's dirty with our good

916
00:40:17,040 --> 00:40:19,440
input

917
00:40:19,760 --> 00:40:21,760
so jason you finish your

918
00:40:21,760 --> 00:40:24,760
slides

919
00:40:25,040 --> 00:40:26,480
yeah so

920
00:40:26,480 --> 00:40:27,680
that's just uh

921
00:40:27,680 --> 00:40:29,359
some proposal to update the milestones

922
00:40:29,359 --> 00:40:31,599
yeah i think we already integrated into

923
00:40:31,599 --> 00:40:34,000
the slide yeah

924
00:40:34,000 --> 00:40:37,119
so try to okay make the means

925
00:40:37,119 --> 00:40:37,599
yeah vector

926
00:40:37,599 --> 00:40:39,760
the next item thinking and

927
00:40:39,760 --> 00:40:41,359
it's ready for that

928
00:40:41,359 --> 00:40:44,880
reviews by the december

929
00:40:44,960 --> 00:40:46,480
yeah because

930
00:40:46,480 --> 00:40:48,319
thanks everyone and you can give any

931
00:40:48,319 --> 00:40:49,520
feedback

932
00:40:49,520 --> 00:40:52,480
on many cities how open

933
00:40:52,480 --> 00:40:54,640
issue in the github

934
00:40:54,640 --> 00:40:57,599
yeah thank you okay so for your request

935
00:40:57,599 --> 00:40:58,400
to

936
00:40:58,400 --> 00:41:00,240
adoption call actually

937
00:41:00,240 --> 00:41:01,839
we see a lot of interesting for this

938
00:41:01,839 --> 00:41:03,599
work and you guys

939
00:41:03,599 --> 00:41:06,319
make a lot of good progress and we see

940
00:41:06,319 --> 00:41:07,440
actually

941
00:41:07,440 --> 00:41:09,599
maybe we can you know

942
00:41:09,599 --> 00:41:12,079
initiate an adoption call after this

943
00:41:12,079 --> 00:41:14,160
meeting

944
00:41:14,160 --> 00:41:15,119
so

945
00:41:15,119 --> 00:41:17,839
in a room if anybody have some objection

946
00:41:17,839 --> 00:41:21,200
please speak up and otherwise

947
00:41:21,200 --> 00:41:22,319
we will

948
00:41:22,319 --> 00:41:24,720
proceed

949
00:41:30,560 --> 00:41:32,839
okay thanks

950
00:41:32,839 --> 00:41:36,160
jason okay

951
00:41:37,040 --> 00:41:39,520
please stop sharing so next topic is

952
00:41:39,520 --> 00:41:41,440
ronan

953
00:41:41,440 --> 00:41:43,920
take away

954
00:41:46,839 --> 00:41:51,280
yay hello everybody uh the next slides

955
00:41:51,280 --> 00:41:53,359
are about uh

956
00:41:53,359 --> 00:41:57,040
aldo transport uh and the draft

957
00:41:57,040 --> 00:41:57,920
is

958
00:41:57,920 --> 00:41:59,280
in a nutshell

959
00:41:59,280 --> 00:42:02,240
covering the topic how http 2 and alto

960
00:42:02,240 --> 00:42:04,880
can be combined and work together the

961
00:42:04,880 --> 00:42:06,720
work was done with richard kai and

962
00:42:06,720 --> 00:42:08,000
jensen here

963
00:42:08,000 --> 00:42:09,440
and

964
00:42:09,440 --> 00:42:10,240
yeah

965
00:42:10,240 --> 00:42:12,480
my name is olan shot and i will do the

966
00:42:12,480 --> 00:42:14,560
presentation today

967
00:42:14,560 --> 00:42:15,839
i hope you can hear me because i have

968
00:42:15,839 --> 00:42:16,960
the mic

969
00:42:16,960 --> 00:42:20,079
here and have the mask uh on but if

970
00:42:20,079 --> 00:42:21,599
there's no complaint i will do it in

971
00:42:21,599 --> 00:42:24,800
that way okay then next slide please

972
00:42:24,800 --> 00:42:26,640
so as i state the motivation and

973
00:42:26,640 --> 00:42:30,160
requirements uh is that hd poet 2 at the

974
00:42:30,160 --> 00:42:31,839
moment is not

975
00:42:31,839 --> 00:42:34,240
usable or not used for

976
00:42:34,240 --> 00:42:35,280
alto

977
00:42:35,280 --> 00:42:38,079
and this work tries to

978
00:42:38,079 --> 00:42:40,560
give the proposal how this could be

979
00:42:40,560 --> 00:42:43,040
established and how it could works and

980
00:42:43,040 --> 00:42:44,960
we want to

981
00:42:44,960 --> 00:42:46,480
introduce this

982
00:42:46,480 --> 00:42:48,480
idea the ideas that we have and then

983
00:42:48,480 --> 00:42:51,200
have a discussion regarding this

984
00:42:51,200 --> 00:42:53,880
the next slide so uh just to regulate

985
00:42:53,880 --> 00:42:57,440
recapitulate what is the status

986
00:42:57,440 --> 00:43:00,960
also based on the base rfcs and we have

987
00:43:00,960 --> 00:43:05,680
here also rc 8895 which already has

988
00:43:05,680 --> 00:43:07,839
introduced a server sent

989
00:43:07,839 --> 00:43:10,720
event mechanism sse and we can see it

990
00:43:10,720 --> 00:43:12,400
here on the right hand side the ultra

991
00:43:12,400 --> 00:43:16,000
sse example but unfortunately this

992
00:43:16,000 --> 00:43:17,200
mechanism

993
00:43:17,200 --> 00:43:21,520
is only available with for http uh one

994
00:43:21,520 --> 00:43:24,880
and um the isg review has considered to

995
00:43:24,880 --> 00:43:27,520
make a proposal how hdb2

996
00:43:27,520 --> 00:43:30,800
can work and the idea is in a way to

997
00:43:30,800 --> 00:43:32,880
use what's already defined in all the

998
00:43:32,880 --> 00:43:34,000
sse

999
00:43:34,000 --> 00:43:38,800
but make it available also with http 2.

1000
00:43:38,800 --> 00:43:42,560
okay um so before going into the details

1001
00:43:42,560 --> 00:43:44,400
just a double check to the requirements

1002
00:43:44,400 --> 00:43:46,160
for sure we have also

1003
00:43:46,160 --> 00:43:49,839
collected uh the requirements from the

1004
00:43:49,839 --> 00:43:53,040
protocol so and client can

1005
00:43:53,040 --> 00:43:55,520
have an auto resource connection as it

1006
00:43:55,520 --> 00:43:59,640
is defined in fc 7285

1007
00:43:59,839 --> 00:44:02,079
and then all the requirements from all

1008
00:44:02,079 --> 00:44:05,359
the sse for example start incremental

1009
00:44:05,359 --> 00:44:07,839
update stop an incremental update of the

1010
00:44:07,839 --> 00:44:09,599
research and

1011
00:44:09,599 --> 00:44:12,400
signaling all of this stuff and

1012
00:44:12,400 --> 00:44:14,560
for sure have also ensured that the

1013
00:44:14,560 --> 00:44:16,960
communication between server and client

1014
00:44:16,960 --> 00:44:18,400
works well

1015
00:44:18,400 --> 00:44:21,520
and then from the auto base framework

1016
00:44:21,520 --> 00:44:24,640
yeah for sure using http

1017
00:44:24,640 --> 00:44:27,359
we propose only to use the element

1018
00:44:27,359 --> 00:44:31,119
number of verbs and now comes the http

1019
00:44:31,119 --> 00:44:34,079
design the push promise

1020
00:44:34,079 --> 00:44:35,680
mechanism that

1021
00:44:35,680 --> 00:44:38,720
in a way will improve the

1022
00:44:38,720 --> 00:44:40,640
transport of the optimization of the

1023
00:44:40,640 --> 00:44:42,319
communication between the server and the

1024
00:44:42,319 --> 00:44:43,359
client

1025
00:44:43,359 --> 00:44:45,200
and last but not least there was also

1026
00:44:45,200 --> 00:44:46,960
the idea to have

1027
00:44:46,960 --> 00:44:49,839
some kind of capability negotiation but

1028
00:44:49,839 --> 00:44:52,000
when we go to the next

1029
00:44:52,000 --> 00:44:54,880
slide so at the moment our work no no

1030
00:44:54,880 --> 00:44:57,440
our cover work covers

1031
00:44:57,440 --> 00:45:00,880
these requirements so uh zero to six and

1032
00:45:00,880 --> 00:45:02,640
uh the flexible deployment that's at the

1033
00:45:02,640 --> 00:45:05,200
moment covered in our work

1034
00:45:05,200 --> 00:45:08,240
so now we come to the design overview

1035
00:45:08,240 --> 00:45:10,480
and the idea how to

1036
00:45:10,480 --> 00:45:14,240
uh make it workable next slide please

1037
00:45:14,240 --> 00:45:15,680
so um

1038
00:45:15,680 --> 00:45:19,200
when now uh going into this slide you

1039
00:45:19,200 --> 00:45:22,880
can see here above from there also the

1040
00:45:22,880 --> 00:45:26,560
current uh possibilities of the alto

1041
00:45:26,560 --> 00:45:28,960
server we have uh information resources

1042
00:45:28,960 --> 00:45:30,400
sources we can

1043
00:45:30,400 --> 00:45:32,960
have static resources like a network map

1044
00:45:32,960 --> 00:45:36,000
but and also filterable resources like

1045
00:45:36,000 --> 00:45:38,160
cost map so this is the

1046
00:45:38,160 --> 00:45:41,119
basic all the functionality and we have

1047
00:45:41,119 --> 00:45:43,920
also the goal that we have a single http

1048
00:45:43,920 --> 00:45:46,560
connection between client and the aldo

1049
00:45:46,560 --> 00:45:49,280
server which tries to be addressed here

1050
00:45:49,280 --> 00:45:52,319
with this h2dp

1051
00:45:52,319 --> 00:45:55,280
connection overview and the ambition is

1052
00:45:55,280 --> 00:45:58,000
not to change here

1053
00:45:58,000 --> 00:45:59,040
things and

1054
00:45:59,040 --> 00:46:01,760
have also the ambition to keep the http

1055
00:46:01,760 --> 00:46:04,640
2 protocol as it is and then the idea is

1056
00:46:04,640 --> 00:46:07,440
to have here some kind of

1057
00:46:07,440 --> 00:46:11,119
intermediate layer between the alto and

1058
00:46:11,119 --> 00:46:15,119
http 2 that allows the server to use the

1059
00:46:15,119 --> 00:46:16,319
http 2

1060
00:46:16,319 --> 00:46:19,200
connection and the idea is

1061
00:46:19,200 --> 00:46:20,160
to

1062
00:46:20,160 --> 00:46:23,440
make the auto sse mechanism available

1063
00:46:23,440 --> 00:46:25,520
for http 2

1064
00:46:25,520 --> 00:46:28,400
and we introduced or makes a proposal or

1065
00:46:28,400 --> 00:46:30,240
the introduction of the idea of

1066
00:46:30,240 --> 00:46:32,560
transport queue so it is shown here in

1067
00:46:32,560 --> 00:46:33,680
the

1068
00:46:33,680 --> 00:46:34,480
uh

1069
00:46:34,480 --> 00:46:36,240
picture and

1070
00:46:36,240 --> 00:46:40,240
by uh we are in a way implementing this

1071
00:46:40,240 --> 00:46:42,480
transport queue in the

1072
00:46:42,480 --> 00:46:45,440
in this information model we have uh

1073
00:46:45,440 --> 00:46:48,640
also an yeah let's say an incremental

1074
00:46:48,640 --> 00:46:51,200
update skew and uh receiver set

1075
00:46:51,200 --> 00:46:53,920
information that is automatically

1076
00:46:53,920 --> 00:46:55,760
created with

1077
00:46:55,760 --> 00:46:57,599
transport queue is

1078
00:46:57,599 --> 00:47:00,480
established so various clients can

1079
00:47:00,480 --> 00:47:02,000
connect to

1080
00:47:02,000 --> 00:47:05,440
different uh yeah let's say 10 transport

1081
00:47:05,440 --> 00:47:08,560
queues and one client could also connect

1082
00:47:08,560 --> 00:47:11,520
to different transport queues to get

1083
00:47:11,520 --> 00:47:13,520
the different information

1084
00:47:13,520 --> 00:47:16,400
i i hope that is clear and now we

1085
00:47:16,400 --> 00:47:18,640
will describe how this will work then in

1086
00:47:18,640 --> 00:47:20,240
principle but before doing this the

1087
00:47:20,240 --> 00:47:21,920
information structure

1088
00:47:21,920 --> 00:47:24,079
so client options connection to the

1089
00:47:24,079 --> 00:47:25,040
server

1090
00:47:25,040 --> 00:47:27,760
the client ops that identifies the

1091
00:47:27,760 --> 00:47:30,319
transfer tuite itself and then in

1092
00:47:30,319 --> 00:47:33,040
principle the client has mainly

1093
00:47:33,040 --> 00:47:34,480
read

1094
00:47:34,480 --> 00:47:37,280
capabilities and requests

1095
00:47:37,280 --> 00:47:38,960
for the status for example of the

1096
00:47:38,960 --> 00:47:40,800
transport queue

1097
00:47:40,800 --> 00:47:43,440
the element method the element in the

1098
00:47:43,440 --> 00:47:45,839
message queue becomes a receiver

1099
00:47:45,839 --> 00:47:47,760
the client receives push updates from

1100
00:47:47,760 --> 00:47:50,640
the server and the client has a

1101
00:47:50,640 --> 00:47:53,520
capability to close a transport queue or

1102
00:47:53,520 --> 00:47:56,480
to close the connection

1103
00:47:56,480 --> 00:47:59,200
okay next slide then

1104
00:47:59,200 --> 00:48:01,440
and now we are showing how the transport

1105
00:48:01,440 --> 00:48:04,480
queue is established

1106
00:48:04,880 --> 00:48:06,960
so the basic operations here we have

1107
00:48:06,960 --> 00:48:10,400
here create read and delete operations

1108
00:48:10,400 --> 00:48:12,800
and similar to the older sse

1109
00:48:12,800 --> 00:48:16,559
we have here a method in a way to

1110
00:48:16,559 --> 00:48:18,160
to create

1111
00:48:18,160 --> 00:48:21,440
here uh accurate response of the server

1112
00:48:21,440 --> 00:48:22,880
so the client

1113
00:48:22,880 --> 00:48:24,640
creates the

1114
00:48:24,640 --> 00:48:26,319
the the queue by

1115
00:48:26,319 --> 00:48:28,400
sending a q request and the server

1116
00:48:28,400 --> 00:48:30,480
responds with the information of the

1117
00:48:30,480 --> 00:48:32,800
transport queue and this is more or less

1118
00:48:32,800 --> 00:48:35,920
the json text that's used next slide how

1119
00:48:35,920 --> 00:48:37,200
does

1120
00:48:37,200 --> 00:48:40,079
it looks like so the server request here

1121
00:48:40,079 --> 00:48:42,400
you have your post information

1122
00:48:42,400 --> 00:48:43,680
and uh

1123
00:48:43,680 --> 00:48:45,520
to uh

1124
00:48:45,520 --> 00:48:49,040
the passes uh the transport queue that

1125
00:48:49,040 --> 00:48:50,960
where the information of the server

1126
00:48:50,960 --> 00:48:53,119
could be pushed to the client and the

1127
00:48:53,119 --> 00:48:56,800
server responds us here with

1128
00:48:56,800 --> 00:48:58,720
establishment of the transport queue to

1129
00:48:58,720 --> 00:49:00,559
the

1130
00:49:00,559 --> 00:49:02,400
to the client

1131
00:49:02,400 --> 00:49:04,240
this was um

1132
00:49:04,240 --> 00:49:06,559
already stated then we have also as

1133
00:49:06,559 --> 00:49:11,599
stated here the client reads uh uh um

1134
00:49:11,599 --> 00:49:14,839
possibility but also uh

1135
00:49:14,839 --> 00:49:17,520
explicitly a delete of the transferred

1136
00:49:17,520 --> 00:49:19,680
clue queue so the deletion of the

1137
00:49:19,680 --> 00:49:21,200
transport queue is

1138
00:49:21,200 --> 00:49:23,599
mainly also from the view of the client

1139
00:49:23,599 --> 00:49:24,720
so

1140
00:49:24,720 --> 00:49:26,480
if other clients are connected to the

1141
00:49:26,480 --> 00:49:28,720
transport users transport you as itself

1142
00:49:28,720 --> 00:49:30,640
cannot be a delete because there are

1143
00:49:30,640 --> 00:49:33,920
some dependencies so the transfer for

1144
00:49:33,920 --> 00:49:35,920
client is and feral

1145
00:49:35,920 --> 00:49:37,520
and um

1146
00:49:37,520 --> 00:49:39,359
in case the

1147
00:49:39,359 --> 00:49:41,680
client deletes it so from the client

1148
00:49:41,680 --> 00:49:42,559
view

1149
00:49:42,559 --> 00:49:44,319
he cannot expect that this transport

1150
00:49:44,319 --> 00:49:46,000
queue is still

1151
00:49:46,000 --> 00:49:47,280
valid so

1152
00:49:47,280 --> 00:49:49,520
the client has also the possibility

1153
00:49:49,520 --> 00:49:51,680
to delete let's go then

1154
00:49:51,680 --> 00:49:53,920
the next slide will show the

1155
00:49:53,920 --> 00:49:56,559
read option of the transcript queue

1156
00:49:56,559 --> 00:49:59,760
could you please go to the next slide so

1157
00:49:59,760 --> 00:50:02,319
here transport queue example read

1158
00:50:02,319 --> 00:50:05,680
so uh when the transfer queue is

1159
00:50:05,680 --> 00:50:08,720
um established then the client has here

1160
00:50:08,720 --> 00:50:10,559
the information of the appropriate

1161
00:50:10,559 --> 00:50:12,480
transport queue

1162
00:50:12,480 --> 00:50:15,280
sends information to the

1163
00:50:15,280 --> 00:50:17,680
server and the server response for

1164
00:50:17,680 --> 00:50:20,559
example here with incremental update

1165
00:50:20,559 --> 00:50:23,599
queues and the server set and then we

1166
00:50:23,599 --> 00:50:25,280
have here some

1167
00:50:25,280 --> 00:50:28,240
sequence numbers with let's say some

1168
00:50:28,240 --> 00:50:30,800
tech ideas and

1169
00:50:30,800 --> 00:50:33,839
as shown before in the

1170
00:50:33,839 --> 00:50:35,040
picture

1171
00:50:35,040 --> 00:50:37,040
we have some relationship between the

1172
00:50:37,040 --> 00:50:38,880
transport queue and the

1173
00:50:38,880 --> 00:50:40,400
the dedicated

1174
00:50:40,400 --> 00:50:41,680
stream tags

1175
00:50:41,680 --> 00:50:45,040
the next slide um

1176
00:50:45,040 --> 00:50:48,720
incremental updates cue how this works

1177
00:50:48,720 --> 00:50:50,720
then looking into this

1178
00:50:50,720 --> 00:50:51,599
again

1179
00:50:51,599 --> 00:50:54,640
it's important to know that the

1180
00:50:54,640 --> 00:50:56,720
incremental aptitude basic operation is

1181
00:50:56,720 --> 00:50:59,040
only a read operation

1182
00:50:59,040 --> 00:51:01,200
so the client cannot create update or

1183
00:51:01,200 --> 00:51:03,599
leak incremental updates queue directly

1184
00:51:03,599 --> 00:51:06,800
it's associated with the transport queue

1185
00:51:06,800 --> 00:51:09,359
automatically as uh

1186
00:51:09,359 --> 00:51:12,079
i stated and if there is a

1187
00:51:12,079 --> 00:51:14,720
request for example to a dedicated

1188
00:51:14,720 --> 00:51:16,640
transport queue we have here

1189
00:51:16,640 --> 00:51:19,359
also uh the link of the transport queue

1190
00:51:19,359 --> 00:51:20,839
and then the

1191
00:51:20,839 --> 00:51:23,119
dedicated uh for example information

1192
00:51:23,119 --> 00:51:26,000
that's then uh forwarded to

1193
00:51:26,000 --> 00:51:26,880
uh

1194
00:51:26,880 --> 00:51:28,400
to the client

1195
00:51:28,400 --> 00:51:30,960
um this is related to our requirements

1196
00:51:30,960 --> 00:51:32,400
that we have

1197
00:51:32,400 --> 00:51:35,680
stated here and yeah that is how the

1198
00:51:35,680 --> 00:51:39,119
incremental update works so next slide

1199
00:51:39,119 --> 00:51:42,319
individual updates

1200
00:51:42,880 --> 00:51:46,079
so here we have the pull

1201
00:51:46,079 --> 00:51:47,200
read

1202
00:51:47,200 --> 00:51:48,160
push

1203
00:51:48,160 --> 00:51:51,359
read important if you have now a client

1204
00:51:51,359 --> 00:51:53,920
pull so with the get information and

1205
00:51:53,920 --> 00:51:56,400
update uh the ue and this looks like

1206
00:51:56,400 --> 00:51:58,240
followed

1207
00:51:58,240 --> 00:52:01,040
well next slide please yeah so we have

1208
00:52:01,040 --> 00:52:04,160
here again the client pool with the

1209
00:52:04,160 --> 00:52:05,760
path and uh

1210
00:52:05,760 --> 00:52:07,920
then it's rca associated here the

1211
00:52:07,920 --> 00:52:11,040
information for example a cost map that

1212
00:52:11,040 --> 00:52:14,400
is then pulled down to the to the client

1213
00:52:14,400 --> 00:52:15,440
the

1214
00:52:15,440 --> 00:52:18,000
normal alter information one can say

1215
00:52:18,000 --> 00:52:19,760
let's need it

1216
00:52:19,760 --> 00:52:21,599
then the server push

1217
00:52:21,599 --> 00:52:24,319
yes and now it becomes to the to the

1218
00:52:24,319 --> 00:52:26,160
in interesting thing and the

1219
00:52:26,160 --> 00:52:29,359
relationship also to http to what's a

1220
00:52:29,359 --> 00:52:30,480
little bit

1221
00:52:30,480 --> 00:52:33,200
tricky so the server push

1222
00:52:33,200 --> 00:52:36,400
uh is uh though the client needs to

1223
00:52:36,400 --> 00:52:38,079
to have an information more or less on

1224
00:52:38,079 --> 00:52:39,440
which

1225
00:52:39,440 --> 00:52:42,319
yeah away the server push the

1226
00:52:42,319 --> 00:52:43,760
information

1227
00:52:43,760 --> 00:52:44,880
and we

1228
00:52:44,880 --> 00:52:47,040
use as mentioned earlier the push

1229
00:52:47,040 --> 00:52:49,119
promise mechanism

1230
00:52:49,119 --> 00:52:52,720
and um yeah and how this is established

1231
00:52:52,720 --> 00:52:54,720
that's shown in the uh

1232
00:52:54,720 --> 00:52:56,800
next slide so you can

1233
00:52:56,800 --> 00:52:58,079
move this

1234
00:52:58,079 --> 00:53:00,800
so um the server push and as an

1235
00:53:00,800 --> 00:53:03,920
authentication example as phone for we

1236
00:53:03,920 --> 00:53:06,559
have here the sequence

1237
00:53:06,559 --> 00:53:08,960
number and the dedicated text

1238
00:53:08,960 --> 00:53:10,640
so if the client has

1239
00:53:10,640 --> 00:53:13,280
no match it chooses let's say the first

1240
00:53:13,280 --> 00:53:16,240
entry and if the client has already some

1241
00:53:16,240 --> 00:53:19,599
matching criteria it chooses the next uh

1242
00:53:19,599 --> 00:53:21,200
next in for

1243
00:53:21,200 --> 00:53:24,319
the next number and then now going to

1244
00:53:24,319 --> 00:53:27,920
the push prompt mechanism of http 2 for

1245
00:53:27,920 --> 00:53:30,640
example when the server push

1246
00:53:30,640 --> 00:53:33,520
for example in a dedicated stream and

1247
00:53:33,520 --> 00:53:36,400
hear the information in each stream

1248
00:53:36,400 --> 00:53:39,839
then the relevant information us is auto

1249
00:53:39,839 --> 00:53:42,640
solver sn pushed down towards

1250
00:53:42,640 --> 00:53:44,880
the client

1251
00:53:44,880 --> 00:53:46,640
now let's say then therefore the client

1252
00:53:46,640 --> 00:53:48,319
knows in which

1253
00:53:48,319 --> 00:53:50,480
queue or where the integrated update

1254
00:53:50,480 --> 00:53:53,040
happens and then also receive a set

1255
00:53:53,040 --> 00:53:54,319
information

1256
00:53:54,319 --> 00:53:57,359
how it is yeah sweet get status delete

1257
00:53:57,359 --> 00:54:00,559
yeah for sure the client uh in case has

1258
00:54:00,559 --> 00:54:02,960
the opportunity to

1259
00:54:02,960 --> 00:54:05,119
delete

1260
00:54:05,119 --> 00:54:07,760
also the transport queue but in case

1261
00:54:07,760 --> 00:54:11,599
also connection is not available then

1262
00:54:11,599 --> 00:54:13,520
from the point of view of the client the

1263
00:54:13,520 --> 00:54:16,880
transfer is also closed

1264
00:54:16,880 --> 00:54:19,599
yeah then next slide

1265
00:54:19,599 --> 00:54:21,599
stream management is also important how

1266
00:54:21,599 --> 00:54:24,079
is now all the stuff it was more or less

1267
00:54:24,079 --> 00:54:24,960
the

1268
00:54:24,960 --> 00:54:27,359
the intermediate layer between

1269
00:54:27,359 --> 00:54:30,240
the alto and

1270
00:54:30,400 --> 00:54:32,720
http 2 but we have also a relationship

1271
00:54:32,720 --> 00:54:34,800
how stream management is

1272
00:54:34,800 --> 00:54:35,680
done

1273
00:54:35,680 --> 00:54:38,400
the objectives are here to

1274
00:54:38,400 --> 00:54:41,040
allow concurrency of the streams to

1275
00:54:41,040 --> 00:54:43,359
reduce latency

1276
00:54:43,359 --> 00:54:46,640
reducing minimum numbers of streams etc

1277
00:54:46,640 --> 00:54:50,079
is more or less a goal of http 2

1278
00:54:50,079 --> 00:54:53,200
and here is now shown the relationship

1279
00:54:53,200 --> 00:54:55,680
between the frame layout and headers

1280
00:54:55,680 --> 00:54:58,160
without so important thing is that we

1281
00:54:58,160 --> 00:55:00,720
use something like a stream id

1282
00:55:00,720 --> 00:55:02,319
and the stream id

1283
00:55:02,319 --> 00:55:04,000
is then written down in the stream

1284
00:55:04,000 --> 00:55:07,040
identifier or in the steam dependency if

1285
00:55:07,040 --> 00:55:09,359
we create a transport queue for the

1286
00:55:09,359 --> 00:55:11,200
steam dependency is zero because nothing

1287
00:55:11,200 --> 00:55:11,920
is

1288
00:55:11,920 --> 00:55:13,119
there before

1289
00:55:13,119 --> 00:55:15,839
let's go please to the next slide

1290
00:55:15,839 --> 00:55:18,480
and yeah for sure if you close transport

1291
00:55:18,480 --> 00:55:20,720
queue it must be sure that there is no

1292
00:55:20,720 --> 00:55:23,200
steam dependency and then also the

1293
00:55:23,200 --> 00:55:25,200
relevant information is

1294
00:55:25,200 --> 00:55:27,920
written down and

1295
00:55:27,920 --> 00:55:29,599
yeah in the

1296
00:55:29,599 --> 00:55:30,960
fields

1297
00:55:30,960 --> 00:55:34,079
are properly yeah and close transport

1298
00:55:34,079 --> 00:55:36,640
queue and then for example it's uh if

1299
00:55:36,640 --> 00:55:38,480
you have here just an

1300
00:55:38,480 --> 00:55:41,280
request or wanted to to read something

1301
00:55:41,280 --> 00:55:44,799
then the uh stream id is also written

1302
00:55:44,799 --> 00:55:47,599
down and then for sure as long as

1303
00:55:47,599 --> 00:55:49,440
something is streamed and the steam

1304
00:55:49,440 --> 00:55:52,400
dependency is not zero and the

1305
00:55:52,400 --> 00:55:55,280
identifier is written down and same

1306
00:55:55,280 --> 00:55:58,400
thing with the promised stream id so

1307
00:55:58,400 --> 00:56:00,880
this is then the consequence of the

1308
00:56:00,880 --> 00:56:03,359
concept that this needs to be worked

1309
00:56:03,359 --> 00:56:04,480
together

1310
00:56:04,480 --> 00:56:07,520
yeah i think this is a setting max

1311
00:56:07,520 --> 00:56:09,599
of concurrent streams

1312
00:56:09,599 --> 00:56:11,359
this is some detail

1313
00:56:11,359 --> 00:56:13,119
each push needs to

1314
00:56:13,119 --> 00:56:15,359
open a new stream

1315
00:56:15,359 --> 00:56:16,799
and steam

1316
00:56:16,799 --> 00:56:20,319
transport queue i think that we can

1317
00:56:20,319 --> 00:56:21,200
omit

1318
00:56:21,200 --> 00:56:23,920
this slide and go to the next one then

1319
00:56:23,920 --> 00:56:25,520
please

1320
00:56:25,520 --> 00:56:28,000
and yeah and then we now come to

1321
00:56:28,000 --> 00:56:31,040
discussion discussion and open points

1322
00:56:31,040 --> 00:56:32,319
and

1323
00:56:32,319 --> 00:56:34,640
yeah open point is what is missing yeah

1324
00:56:34,640 --> 00:56:37,760
so we do not create generic message

1325
00:56:37,760 --> 00:56:40,400
or that does not allow uh creation of

1326
00:56:40,400 --> 00:56:41,599
message to

1327
00:56:41,599 --> 00:56:44,000
and the client cannot publish info

1328
00:56:44,000 --> 00:56:46,079
shared with other clients so that is

1329
00:56:46,079 --> 00:56:48,640
something so we have not the ability to

1330
00:56:48,640 --> 00:56:52,240
have a direct exchange or

1331
00:56:52,240 --> 00:56:54,319
things there we are also aware of the

1332
00:56:54,319 --> 00:56:56,880
broker discussion that

1333
00:56:56,880 --> 00:56:59,040
has done so we haven't

1334
00:56:59,040 --> 00:57:01,359
looked so in the details but these are

1335
00:57:01,359 --> 00:57:04,000
also options that can be discussed

1336
00:57:04,000 --> 00:57:06,799
yeah and then uh the capability of

1337
00:57:06,799 --> 00:57:08,079
negligation

1338
00:57:08,079 --> 00:57:10,240
we have as mentioned earlier this

1339
00:57:10,240 --> 00:57:13,119
occurrence is not addressed in the draft

1340
00:57:13,119 --> 00:57:15,440
next slide and also calendar semantics

1341
00:57:15,440 --> 00:57:17,520
is not addressed

1342
00:57:17,520 --> 00:57:20,640
yeah and that's it now we can discuss or

1343
00:57:20,640 --> 00:57:24,040
get your feedback

1344
00:57:27,280 --> 00:57:28,400
okay

1345
00:57:28,400 --> 00:57:31,040
thanks ronan actually

1346
00:57:31,040 --> 00:57:34,160
a good presentation so uh

1347
00:57:34,160 --> 00:57:36,960
actually i have some comments

1348
00:57:36,960 --> 00:57:38,000
on

1349
00:57:38,000 --> 00:57:41,599
the slides actually

1350
00:57:41,599 --> 00:57:42,880
so in the

1351
00:57:42,880 --> 00:57:46,240
page 25 is any out of order delivery

1352
00:57:46,240 --> 00:57:50,319
issue for streaming management

1353
00:57:52,480 --> 00:57:55,520
is there are you know i see no no no

1354
00:57:55,520 --> 00:57:58,559
issues do i can you go

1355
00:57:58,559 --> 00:58:01,559
25.

1356
00:58:10,000 --> 00:58:13,000
25

1357
00:58:13,839 --> 00:58:16,880
it was 25 gin all right

1358
00:58:16,880 --> 00:58:18,559
yeah 25

1359
00:58:18,559 --> 00:58:21,440
35 25

1360
00:58:21,440 --> 00:58:23,119
25

1361
00:58:23,119 --> 00:58:24,720
next one okay

1362
00:58:24,720 --> 00:58:27,760
objectives so uh do you do

1363
00:58:27,760 --> 00:58:30,480
what was the question do you see any uh

1364
00:58:30,480 --> 00:58:33,200
issues regarding this

1365
00:58:33,200 --> 00:58:36,160
i'm just wondering because you for

1366
00:58:36,160 --> 00:58:38,079
stream you have dependency so it

1367
00:58:38,079 --> 00:58:39,680
enforces that such kind of dependence

1368
00:58:39,680 --> 00:58:42,000
among streams so when you send a stream

1369
00:58:42,000 --> 00:58:43,200
is any

1370
00:58:43,200 --> 00:58:44,799
out of order

1371
00:58:44,799 --> 00:58:45,920
other

1372
00:58:45,920 --> 00:58:49,359
order delivery issues yeah and this is

1373
00:58:49,359 --> 00:58:50,160
done

1374
00:58:50,160 --> 00:58:52,000
we can answer the question yeah yeah you

1375
00:58:52,000 --> 00:58:54,400
can but but this is this is mandatory

1376
00:58:54,400 --> 00:58:56,960
but yeah

1377
00:58:56,960 --> 00:58:59,200
yeah i i i would like to answer this

1378
00:58:59,200 --> 00:59:00,480
question because

1379
00:59:00,480 --> 00:59:02,839
this is excellent and

1380
00:59:02,839 --> 00:59:05,839
uh okay so the

1381
00:59:05,839 --> 00:59:06,640
uh

1382
00:59:06,640 --> 00:59:08,400
yes so there are a lot of streams

1383
00:59:08,400 --> 00:59:10,559
running going on right inside this

1384
00:59:10,559 --> 00:59:12,160
system because that's really the purpose

1385
00:59:12,160 --> 00:59:15,599
of using hdb2 for streaming concurrency

1386
00:59:15,599 --> 00:59:17,680
uh for example a

1387
00:59:17,680 --> 00:59:19,359
from the design of course the newest

1388
00:59:19,359 --> 00:59:20,960
version has not been posted and all the

1389
00:59:20,960 --> 00:59:23,280
details of course are only posted on on

1390
00:59:23,280 --> 00:59:26,000
deck of slate uh we were very careful

1391
00:59:26,000 --> 00:59:27,599
that there will be no out of order

1392
00:59:27,599 --> 00:59:30,240
delivery and

1393
00:59:30,240 --> 00:59:32,079
of course we need to go over a very

1394
00:59:32,079 --> 00:59:33,839
formal proof but let me just give you a

1395
00:59:33,839 --> 00:59:36,160
sense about why we don't have uh auto

1396
00:59:36,160 --> 00:59:38,799
order uh delivery for example the main

1397
00:59:38,799 --> 00:59:40,319
main thing which we're trying to push

1398
00:59:40,319 --> 00:59:43,200
through using the new transport is to

1399
00:59:43,200 --> 00:59:45,599
send increment updates

1400
00:59:45,599 --> 00:59:47,359
there are actually multiple mechanisms

1401
00:59:47,359 --> 00:59:49,359
to make sure that we don't have other uh

1402
00:59:49,359 --> 00:59:52,640
delivery of the income updates and

1403
00:59:52,640 --> 00:59:56,079
number one is that all the push promise

1404
00:59:56,079 --> 00:59:58,640
push promise they are only sent into a

1405
00:59:58,640 --> 01:00:00,799
single stream which is a stream which is

1406
01:00:00,799 --> 01:00:03,760
open for this particular uh transport

1407
01:00:03,760 --> 01:00:06,480
queue so therefore because if you're

1408
01:00:06,480 --> 01:00:07,839
inside a single stream and you're

1409
01:00:07,839 --> 01:00:11,040
carried by by tcp and all the packets

1410
01:00:11,040 --> 01:00:13,040
inside the single uh stream will be

1411
01:00:13,040 --> 01:00:15,599
delivered in order by tcp so therefore

1412
01:00:15,599 --> 01:00:17,760
all the project promises one by one will

1413
01:00:17,760 --> 01:00:20,000
be sent uh to the client in order so

1414
01:00:20,000 --> 01:00:21,920
therefore if the client will process all

1415
01:00:21,920 --> 01:00:24,400
the promise in order and therefore the

1416
01:00:24,400 --> 01:00:26,240
client actually can know for example uh

1417
01:00:26,240 --> 01:00:29,119
put the prime minister

1418
01:00:29,119 --> 01:00:31,520
six and eight and twenty they're all

1419
01:00:31,520 --> 01:00:33,920
sending other and so therefore

1420
01:00:33,920 --> 01:00:36,160
the client can know the order of the the

1421
01:00:36,160 --> 01:00:38,400
income that's therefore they're safe and

1422
01:00:38,400 --> 01:00:40,240
number two uh there's also building a

1423
01:00:40,240 --> 01:00:44,079
mechanism and to assign a sequential uh

1424
01:00:44,079 --> 01:00:45,599
sequence number

1425
01:00:45,599 --> 01:00:48,000
to the incoming updates so therefore the

1426
01:00:48,000 --> 01:00:49,520
client actually can check into it so

1427
01:00:49,520 --> 01:00:51,280
therefore the client can really do it in

1428
01:00:51,280 --> 01:00:53,119
the transfer layer using stream or can

1429
01:00:53,119 --> 01:00:55,520
also go to application layer uh to yield

1430
01:00:55,520 --> 01:00:57,119
the second number so there are two ways

1431
01:00:57,119 --> 01:00:59,040
to protect they they are

1432
01:00:59,040 --> 01:01:00,960
the other delivery so therefore i think

1433
01:01:00,960 --> 01:01:02,400
uh that's an example because that's the

1434
01:01:02,400 --> 01:01:05,440
main part we we are sure but of course

1435
01:01:05,440 --> 01:01:06,880
we want to even try to write down some

1436
01:01:06,880 --> 01:01:08,720
kind of formal proof that there will be

1437
01:01:08,720 --> 01:01:12,000
no out of delivery in terms of uh the

1438
01:01:12,000 --> 01:01:13,760
the requirement of course otherwise

1439
01:01:13,760 --> 01:01:15,440
actually we want to maximize also all

1440
01:01:15,440 --> 01:01:17,680
the delivery as long as there's no

1441
01:01:17,680 --> 01:01:20,319
dependency

1442
01:01:20,480 --> 01:01:22,079
okay

1443
01:01:22,079 --> 01:01:23,920
so uh another question actually i want

1444
01:01:23,920 --> 01:01:26,000
to make sure make sure uh the auto

1445
01:01:26,000 --> 01:01:27,359
neutral spot

1446
01:01:27,359 --> 01:01:30,400
doesn't require uh you know uh extension

1447
01:01:30,400 --> 01:01:33,760
to the existing http protocols

1448
01:01:33,760 --> 01:01:35,119
is that right

1449
01:01:35,119 --> 01:01:38,079
yes uh and so john can also answer right

1450
01:01:38,079 --> 01:01:39,040
of course

1451
01:01:39,040 --> 01:01:40,160
i think uh

1452
01:01:40,160 --> 01:01:42,319
from from the way we design is we make

1453
01:01:42,319 --> 01:01:45,119
sure we only use uh the

1454
01:01:45,119 --> 01:01:48,480
the central hb2 uh uh capabilities of

1455
01:01:48,480 --> 01:01:50,559
course we are using the assignment right

1456
01:01:50,559 --> 01:01:52,079
for example here jordan show this

1457
01:01:52,079 --> 01:01:54,160
particular figure and and we're trying

1458
01:01:54,160 --> 01:01:56,799
to use http 2 capabilities for example

1459
01:01:56,799 --> 01:01:59,440
how to assign the stream dependencies

1460
01:01:59,440 --> 01:02:01,760
and how to how to assign the identifiers

1461
01:02:01,760 --> 01:02:03,599
and so on and how to assign which

1462
01:02:03,599 --> 01:02:06,640
request to which streams to maximize the

1463
01:02:06,640 --> 01:02:08,400
leverage of the capability for example

1464
01:02:08,400 --> 01:02:10,240
also assign for example wheat to really

1465
01:02:10,240 --> 01:02:11,760
allow some kind of scheduling but

1466
01:02:11,760 --> 01:02:14,079
everything capabilities will be inside

1467
01:02:14,079 --> 01:02:16,640
uh db2 of course the api need to be a

1468
01:02:16,640 --> 01:02:18,559
little more careful when the client or

1469
01:02:18,559 --> 01:02:20,160
the server any product client is using

1470
01:02:20,160 --> 01:02:22,480
http 2 because the api should really

1471
01:02:22,480 --> 01:02:24,640
allow the application the kind of

1472
01:02:24,640 --> 01:02:26,799
specifics okay for this request send to

1473
01:02:26,799 --> 01:02:28,480
this particular stream for this one

1474
01:02:28,480 --> 01:02:30,079
please send to this stream and then of

1475
01:02:30,079 --> 01:02:31,520
course the server also need to be

1476
01:02:31,520 --> 01:02:32,880
confirmed in the sense that server

1477
01:02:32,880 --> 01:02:34,720
should pick the right uh when they when

1478
01:02:34,720 --> 01:02:36,799
they send the the request i think it

1479
01:02:36,799 --> 01:02:38,240
must be confirming as well so if a

1480
01:02:38,240 --> 01:02:40,720
server must send the the the packs into

1481
01:02:40,720 --> 01:02:42,720
the right stream otherwise we don't

1482
01:02:42,720 --> 01:02:44,799
really need any modification of http2 i

1483
01:02:44,799 --> 01:02:48,079
think that was the requirement

1484
01:02:48,079 --> 01:02:48,960
okay

1485
01:02:48,960 --> 01:02:51,920
uh last question from me actually is you

1486
01:02:51,920 --> 01:02:52,880
know

1487
01:02:52,880 --> 01:02:55,200
for auto portal you define four

1488
01:02:55,200 --> 01:02:58,880
functionality transfer queue incremental

1489
01:02:58,880 --> 01:03:01,839
updater uh request and also receiver

1490
01:03:01,839 --> 01:03:03,520
said so for all these four

1491
01:03:03,520 --> 01:03:05,520
functionalities will be mandatory or

1492
01:03:05,520 --> 01:03:08,960
somehow just optional

1493
01:03:10,160 --> 01:03:11,839
uh

1494
01:03:11,839 --> 01:03:13,200
okay so

1495
01:03:13,200 --> 01:03:16,240
given that i i'm on the queue already

1496
01:03:16,240 --> 01:03:18,640
they are all necessary

1497
01:03:18,640 --> 01:03:21,599
to really get incremental push updates

1498
01:03:21,599 --> 01:03:23,760
but if you don't want incremental push

1499
01:03:23,760 --> 01:03:26,640
updates uh for example in the initial

1500
01:03:26,640 --> 01:03:29,200
request when the increment updates

1501
01:03:29,200 --> 01:03:31,039
increment updates flag is set to be

1502
01:03:31,039 --> 01:03:32,079
false

1503
01:03:32,079 --> 01:03:34,640
which is uh two

1504
01:03:34,640 --> 01:03:36,880
in which it can be by default like the

1505
01:03:36,880 --> 01:03:38,240
true but of course you can make it a

1506
01:03:38,240 --> 01:03:40,799
false and then the increment updates

1507
01:03:40,799 --> 01:03:42,480
feature will be turned off

1508
01:03:42,480 --> 01:03:43,599
so therefore basically there's no

1509
01:03:43,599 --> 01:03:45,280
increments so therefore if application

1510
01:03:45,280 --> 01:03:48,480
only wants to provide a way uh to

1511
01:03:48,480 --> 01:03:50,720
uh provide this uh

1512
01:03:50,720 --> 01:03:52,880
insight to the large scope deployment to

1513
01:03:52,880 --> 01:03:54,640
show that there are large number of

1514
01:03:54,640 --> 01:03:57,920
clients watching and you can turn off

1515
01:03:57,920 --> 01:03:59,920
increment updates but now the client can

1516
01:03:59,920 --> 01:04:02,720
only see the queue

1517
01:04:04,160 --> 01:04:06,480
okay

1518
01:04:06,559 --> 01:04:09,359
thank you so any other comments from

1519
01:04:09,359 --> 01:04:12,520
the floor

1520
01:04:21,520 --> 01:04:23,680
so ronald you have already completed

1521
01:04:23,680 --> 01:04:25,520
your slides i see you have some open

1522
01:04:25,520 --> 01:04:27,200
issues

1523
01:04:27,200 --> 01:04:31,038
you haven't discussed or you finished

1524
01:04:32,720 --> 01:04:34,400
the issues

1525
01:04:34,400 --> 01:04:37,839
we need to address these open issues

1526
01:04:37,839 --> 01:04:39,920
at the moment i cannot say when it is

1527
01:04:39,920 --> 01:04:41,119
finished we

1528
01:04:41,119 --> 01:04:43,440
also need to check exp especially in the

1529
01:04:43,440 --> 01:04:46,160
capability initiation how this works so

1530
01:04:46,160 --> 01:04:49,599
we we at the beginning here in

1531
01:04:49,599 --> 01:04:52,839
the analyzing how to solve

1532
01:04:52,839 --> 01:04:56,240
this okay

1533
01:04:56,880 --> 01:04:58,880
so giving the time limit actually i

1534
01:04:58,880 --> 01:05:00,960
think maybe we can move on and for some

1535
01:05:00,960 --> 01:05:03,359
other issue we can take it to the list

1536
01:05:03,359 --> 01:05:06,160
and we can decide how to move this work

1537
01:05:06,160 --> 01:05:07,119
forward

1538
01:05:07,119 --> 01:05:09,520
so so we can we can bring this into this

1539
01:05:09,520 --> 01:05:12,160
draft or we can separate it and do in a

1540
01:05:12,160 --> 01:05:14,640
separate work the the open issues

1541
01:05:14,640 --> 01:05:16,640
because i i think the

1542
01:05:16,640 --> 01:05:19,039
main issues regarding the transport and

1543
01:05:19,039 --> 01:05:20,400
http 2

1544
01:05:20,400 --> 01:05:23,760
are already addressed here in this draft

1545
01:05:23,760 --> 01:05:25,839
i think the mandatory things are the

1546
01:05:25,839 --> 01:05:29,280
main things are already addressed and

1547
01:05:29,280 --> 01:05:31,839
described

1548
01:05:32,400 --> 01:05:34,720
okay

1549
01:05:35,119 --> 01:05:37,359
so let's uh uh for always you take take

1550
01:05:37,359 --> 01:05:39,039
it to the list and

1551
01:05:39,039 --> 01:05:42,079
we can see how do you yeah yeah yeah i i

1552
01:05:42,079 --> 01:05:44,319
i it's also

1553
01:05:44,319 --> 01:05:46,799
for me i'm quite open but uh potentially

1554
01:05:46,799 --> 01:05:48,960
it would make sense to split some some

1555
01:05:48,960 --> 01:05:51,680
work but let's do it discuss on the list

1556
01:05:51,680 --> 01:05:52,799
i

1557
01:05:52,799 --> 01:05:54,640
uh

1558
01:05:54,640 --> 01:05:57,759
both ways are possible

1559
01:05:58,799 --> 01:06:00,880
yeah

1560
01:06:00,880 --> 01:06:03,280
so richard do you have any comments yeah

1561
01:06:03,280 --> 01:06:06,480
i do want to get one question quickly

1562
01:06:06,480 --> 01:06:09,440
and given that we have other people here

1563
01:06:09,440 --> 01:06:13,200
is this design is very very http 2

1564
01:06:13,200 --> 01:06:15,039
specific

1565
01:06:15,039 --> 01:06:16,000
and

1566
01:06:16,000 --> 01:06:18,160
the guidance i think roland and i and

1567
01:06:18,160 --> 01:06:20,640
with this design team with this cast is

1568
01:06:20,640 --> 01:06:23,039
uh how much do we should we consider

1569
01:06:23,039 --> 01:06:27,200
essential https three like a quick

1570
01:06:28,160 --> 01:06:30,240
any guidance and oh we should really

1571
01:06:30,240 --> 01:06:32,480
just get this one down and focusing on

1572
01:06:32,480 --> 01:06:35,200
http 2 because quick somehow iq3 will

1573
01:06:35,200 --> 01:06:36,880
open a total different way for example

1574
01:06:36,880 --> 01:06:38,880
all these stream assignments somehow or

1575
01:06:38,880 --> 01:06:40,640
just like a dependency they're all quite

1576
01:06:40,640 --> 01:06:44,079
quite http http 2 specific

1577
01:06:44,079 --> 01:06:47,520
so any guidance from the working group

1578
01:06:47,520 --> 01:06:49,839
to us

1579
01:06:50,640 --> 01:06:54,480
my suggestion is to get hdb to solid

1580
01:06:54,480 --> 01:06:56,319
and then we can

1581
01:06:56,319 --> 01:07:00,920
make experimental on quake

1582
01:07:01,760 --> 01:07:03,920
so might be echo there it is okay

1583
01:07:03,920 --> 01:07:05,920
walking into the queue i guess

1584
01:07:05,920 --> 01:07:08,160
um

1585
01:07:09,839 --> 01:07:11,440
hp3's

1586
01:07:11,440 --> 01:07:13,520
application interface should be very

1587
01:07:13,520 --> 01:07:17,520
similar to http2 um

1588
01:07:17,520 --> 01:07:20,319
so i'm a little

1589
01:07:21,200 --> 01:07:23,599
surprised that it requires a lot of

1590
01:07:23,599 --> 01:07:25,760
re-engineering to to

1591
01:07:25,760 --> 01:07:29,760
update i mean can you say more about it

1592
01:07:29,760 --> 01:07:32,079
uh

1593
01:07:32,400 --> 01:07:35,200
so uh martin for example

1594
01:07:35,200 --> 01:07:37,359
i believe uh

1595
01:07:37,359 --> 01:07:40,960
for ours this one uh we are for example

1596
01:07:40,960 --> 01:07:43,359
if you look at this current slide

1597
01:07:43,359 --> 01:07:45,200
uh it is

1598
01:07:45,200 --> 01:07:47,119
depends on for example all these are

1599
01:07:47,119 --> 01:07:49,520
blocking for example all the streams

1600
01:07:49,520 --> 01:07:51,920
because fundamentally everything will be

1601
01:07:51,920 --> 01:07:54,839
underlying there's a single tcp

1602
01:07:54,839 --> 01:07:57,520
stream running

1603
01:07:57,520 --> 01:07:59,359
right because we

1604
01:07:59,359 --> 01:08:01,119
interleave everything

1605
01:08:01,119 --> 01:08:03,520
uh it's a single tcp stream because it

1606
01:08:03,520 --> 01:08:05,359
could be two essentially a single tcp

1607
01:08:05,359 --> 01:08:08,160
running on on a single tcp so therefore

1608
01:08:08,160 --> 01:08:09,680
a lot of for example all the other

1609
01:08:09,680 --> 01:08:12,480
things probably would be very safe and

1610
01:08:12,480 --> 01:08:14,720
uh so therefore on the client side on

1611
01:08:14,720 --> 01:08:16,319
the server side you probably don't know

1612
01:08:16,319 --> 01:08:18,158
what about outdoor delivery at all

1613
01:08:18,158 --> 01:08:19,759
because tcp enforcing essentially a

1614
01:08:19,759 --> 01:08:21,359
single stream of course you should have

1615
01:08:21,359 --> 01:08:23,359
issue of had a height of a line blocking

1616
01:08:23,359 --> 01:08:25,120
uh in this level even though you

1617
01:08:25,120 --> 01:08:26,960
interview all the streams and my

1618
01:08:26,960 --> 01:08:29,120
understanding of quick rgb 3 would be

1619
01:08:29,120 --> 01:08:31,198
then this kind of highlight blocking

1620
01:08:31,198 --> 01:08:32,560
will disappear right because they're

1621
01:08:32,560 --> 01:08:34,560
using essential different

1622
01:08:34,560 --> 01:08:37,279
udp and you're not going to if there's a

1623
01:08:37,279 --> 01:08:38,640
single packet loss you're not going to

1624
01:08:38,640 --> 01:08:40,799
block everything below

1625
01:08:40,799 --> 01:08:42,158
be behind it

1626
01:08:42,158 --> 01:08:44,560
so therefore then we we need to really

1627
01:08:44,560 --> 01:08:46,399
check if that will cause potential

1628
01:08:46,399 --> 01:08:48,719
issues for us in terms of and this may

1629
01:08:48,719 --> 01:08:50,319
not be the functionality but i didn't

1630
01:08:50,319 --> 01:08:52,080
come for performance or design

1631
01:08:52,080 --> 01:08:53,920
requirement so therefore we they need to

1632
01:08:53,920 --> 01:08:55,600
investigate to see how what the impact

1633
01:08:55,600 --> 01:08:58,399
it really is so so

1634
01:08:58,399 --> 01:09:00,880
so you're concerned that you need order

1635
01:09:00,880 --> 01:09:02,000
delivery

1636
01:09:02,000 --> 01:09:04,080
between the streams

1637
01:09:04,080 --> 01:09:06,238
oh maybe it is buffering and those type

1638
01:09:06,238 --> 01:09:08,319
of things inside the clan of server set

1639
01:09:08,319 --> 01:09:10,960
because here we assume a lot of some

1640
01:09:10,960 --> 01:09:13,198
optimization assuming somehow a packet

1641
01:09:13,198 --> 01:09:15,120
will be always delivering order because

1642
01:09:15,120 --> 01:09:17,839
tcp really delivers everything in order

1643
01:09:17,839 --> 01:09:19,198
even when you interleave different

1644
01:09:19,198 --> 01:09:21,839
streams

1645
01:09:23,040 --> 01:09:25,759
yeah so my my understanding uh i could

1646
01:09:25,759 --> 01:09:27,439
be correct here my understanding of http

1647
01:09:27,439 --> 01:09:29,839
2 is that hp2 is not even really

1648
01:09:29,839 --> 01:09:31,839
promising you order delivery between the

1649
01:09:31,839 --> 01:09:34,238
streams because the protocol could be

1650
01:09:34,238 --> 01:09:36,158
full controlling the streams differently

1651
01:09:36,158 --> 01:09:37,279
etc

1652
01:09:37,279 --> 01:09:39,520
um if it's just a matter of

1653
01:09:39,520 --> 01:09:41,439
you like thinking about it a little bit

1654
01:09:41,439 --> 01:09:42,479
um

1655
01:09:42,479 --> 01:09:44,399
i would encourage you to do that because

1656
01:09:44,399 --> 01:09:47,600
hp3 is going to be an rfc before this is

1657
01:09:47,600 --> 01:09:50,080
um if it turns out that you need a bunch

1658
01:09:50,080 --> 01:09:52,000
more protocol machinery

1659
01:09:52,000 --> 01:09:54,080
to support http 3 then then that would

1660
01:09:54,080 --> 01:09:56,320
be a different discussion to have

1661
01:09:56,320 --> 01:09:57,520
i don't know if i want to make this you

1662
01:09:57,520 --> 01:09:59,120
know 20 pages longer or something

1663
01:09:59,120 --> 01:10:01,440
because to support http 3 like maybe it

1664
01:10:01,440 --> 01:10:03,120
could be a different document

1665
01:10:03,120 --> 01:10:04,960
but like uh

1666
01:10:04,960 --> 01:10:06,560
i mean easy for me to say but i would

1667
01:10:06,560 --> 01:10:08,159
encourage you to like

1668
01:10:08,159 --> 01:10:11,840
do a little bit of analysis i i don't

1669
01:10:11,840 --> 01:10:14,719
i'm surprised to to learn that this is

1670
01:10:14,719 --> 01:10:16,719
potentially a concern and and i would

1671
01:10:16,719 --> 01:10:19,840
hope it turned would turn out not to be

1672
01:10:19,840 --> 01:10:22,800
sure sure what will investigate but

1673
01:10:22,800 --> 01:10:25,520
let us clarify with you so if we deliver

1674
01:10:25,520 --> 01:10:27,440
this document initially for example by a

1675
01:10:27,440 --> 01:10:30,400
next ietf and we're mostly very specific

1676
01:10:30,400 --> 01:10:32,960
to hpd only and we leave the work of

1677
01:10:32,960 --> 01:10:35,520
looking at the capability or impact of

1678
01:10:35,520 --> 01:10:38,640
hdb3 to be to be the future work are you

1679
01:10:38,640 --> 01:10:41,679
happy or our working group happy or that

1680
01:10:41,679 --> 01:10:43,360
working we would recommend that we

1681
01:10:43,360 --> 01:10:45,440
should always like initially already

1682
01:10:45,440 --> 01:10:47,120
start look at until the impact of

1683
01:10:47,120 --> 01:10:50,920
potential hdpd3

1684
01:10:53,360 --> 01:10:56,360
um

1685
01:11:00,080 --> 01:11:03,199
certainly like uh

1686
01:11:03,199 --> 01:11:04,480
you know like

1687
01:11:04,480 --> 01:11:05,440
the

1688
01:11:05,440 --> 01:11:06,800
the document

1689
01:11:06,800 --> 01:11:08,960
so first of all it is perfectly fine to

1690
01:11:08,960 --> 01:11:10,000
like

1691
01:11:10,000 --> 01:11:12,880
for early versions of the draft

1692
01:11:12,880 --> 01:11:15,600
to just consider hp2 and like and like

1693
01:11:15,600 --> 01:11:17,840
consider hp3 later

1694
01:11:17,840 --> 01:11:20,080
um

1695
01:11:23,600 --> 01:11:25,600
uh so i would say that

1696
01:11:25,600 --> 01:11:27,199
that to me

1697
01:11:27,199 --> 01:11:29,760
the the case where

1698
01:11:29,760 --> 01:11:32,239
uh we do the analysis it turns out that

1699
01:11:32,239 --> 01:11:34,640
http 3 does require like a bunch of

1700
01:11:34,640 --> 01:11:38,159
additional specification i'd be 100 fine

1701
01:11:38,159 --> 01:11:40,400
with submitting it as is

1702
01:11:40,400 --> 01:11:41,360
um

1703
01:11:41,360 --> 01:11:43,679
uh now in in the case where we just do

1704
01:11:43,679 --> 01:11:46,640
not do the analysis

1705
01:11:46,640 --> 01:11:48,960
um

1706
01:11:50,640 --> 01:11:52,239
that would uh

1707
01:11:52,239 --> 01:11:54,800
i would not like that i would have to

1708
01:11:54,800 --> 01:11:56,320
think about whether

1709
01:11:56,320 --> 01:11:58,239
that would be like

1710
01:11:58,239 --> 01:12:01,759
unacceptable um

1711
01:12:02,400 --> 01:12:03,520
uh

1712
01:12:03,520 --> 01:12:04,880
my inclination would say that i would

1713
01:12:04,880 --> 01:12:07,520
probably grudgingly accept something

1714
01:12:07,520 --> 01:12:09,440
where we'd just not done the analysis

1715
01:12:09,440 --> 01:12:11,199
but um

1716
01:12:11,199 --> 01:12:13,120
that seems

1717
01:12:13,120 --> 01:12:15,360
uh

1718
01:12:16,320 --> 01:12:18,719
it seems like just something to do like

1719
01:12:18,719 --> 01:12:20,800
in my opinion that's kind of a

1720
01:12:20,800 --> 01:12:23,600
due diligence thing to do um

1721
01:12:23,600 --> 01:12:25,679
but but again like i don't i don't know

1722
01:12:25,679 --> 01:12:27,840
if i want to put the full force of my id

1723
01:12:27,840 --> 01:12:29,280
role behind that assertion as an

1724
01:12:29,280 --> 01:12:31,040
individual i would say that let's say

1725
01:12:31,040 --> 01:12:33,440
for now

1726
01:12:34,000 --> 01:12:36,640
is that does that make sense

1727
01:12:36,640 --> 01:12:37,840
yeah i think it makes sense to me

1728
01:12:37,840 --> 01:12:40,320
because uh right because your land is

1729
01:12:40,320 --> 01:12:41,920
essentially where guy yelling is guiding

1730
01:12:41,920 --> 01:12:44,320
the most thing we're focusing on b2

1731
01:12:44,320 --> 01:12:45,840
y'all then what do you think we need to

1732
01:12:45,840 --> 01:12:48,800
go to queue so so uh when we

1733
01:12:48,800 --> 01:12:51,840
just this this uh discussed this

1734
01:12:51,840 --> 01:12:53,920
uh the main motivation was to focus on

1735
01:12:53,920 --> 01:12:56,640
http 2 because uh it was mandatory and

1736
01:12:56,640 --> 01:12:58,080
it was a quick

1737
01:12:58,080 --> 01:13:00,560
way forward and so we

1738
01:13:00,560 --> 01:13:02,960
didn't focus on http not to overload the

1739
01:13:02,960 --> 01:13:04,560
work so in my opinion

1740
01:13:04,560 --> 01:13:07,520
the analysis needs to be done too and i

1741
01:13:07,520 --> 01:13:08,960
am happy to

1742
01:13:08,960 --> 01:13:10,480
yeah

1743
01:13:10,480 --> 01:13:12,880
as i said like when we chartered this i

1744
01:13:12,880 --> 01:13:15,120
was i was offering an assumption that

1745
01:13:15,120 --> 01:13:17,040
that the upper layers the upper layer

1746
01:13:17,040 --> 01:13:19,120
interface for hp 2 and 3 were almost

1747
01:13:19,120 --> 01:13:20,320
identical

1748
01:13:20,320 --> 01:13:23,280
um and that the value proposition of the

1749
01:13:23,280 --> 01:13:24,800
application was almost identical and

1750
01:13:24,800 --> 01:13:27,199
that there should not be

1751
01:13:27,199 --> 01:13:29,280
a bunch more design if that turns out to

1752
01:13:29,280 --> 01:13:32,320
be untrue then i'm i'm 100 comfortable

1753
01:13:32,320 --> 01:13:34,719
just shipping this as an http 2 rfc and

1754
01:13:34,719 --> 01:13:35,520
like

1755
01:13:35,520 --> 01:13:37,840
maybe if there's the then later doing it

1756
01:13:37,840 --> 01:13:39,760
for h3 separately but

1757
01:13:39,760 --> 01:13:42,000
again my my initial

1758
01:13:42,000 --> 01:13:44,159
guess coming in is that that is actually

1759
01:13:44,159 --> 01:13:45,840
not the case and that it is essentially

1760
01:13:45,840 --> 01:13:47,440
the same mapping

1761
01:13:47,440 --> 01:13:48,239
but

1762
01:13:48,239 --> 01:13:51,919
i could be proven wrong thanks

1763
01:13:53,679 --> 01:13:56,480
the other question

1764
01:13:57,199 --> 01:13:59,520
any other question okay thanks everyone

1765
01:13:59,520 --> 01:14:01,520
yeah

1766
01:14:01,520 --> 01:14:04,159
thank you i think no yeah thanks mona

1767
01:14:04,159 --> 01:14:06,960
let's move on to the next topic

1768
01:14:06,960 --> 01:14:09,520
i think it's jody

1769
01:14:09,520 --> 01:14:10,640
and

1770
01:14:10,640 --> 01:14:15,239
kai you will join present

1771
01:14:26,960 --> 01:14:29,840
um

1772
01:14:39,840 --> 01:14:42,840
okay

1773
01:14:52,159 --> 01:14:57,159
jody i think you can take away yep

1774
01:15:00,719 --> 01:15:04,000
hi um yeah i'm jordy from qualcomm

1775
01:15:04,000 --> 01:15:05,920
and um

1776
01:15:05,920 --> 01:15:08,320
this one

1777
01:15:08,400 --> 01:15:12,239
and this is kai from central university

1778
01:15:12,640 --> 01:15:13,920
yeah so kai and i are actually going to

1779
01:15:13,920 --> 01:15:16,000
be talking about the alto code base

1780
01:15:16,000 --> 01:15:17,520
project

1781
01:15:17,520 --> 01:15:18,719
and um

1782
01:15:18,719 --> 01:15:19,920
so i'm going to start and nkai is going

1783
01:15:19,920 --> 01:15:22,400
to take over

1784
01:15:22,880 --> 01:15:25,840
yes actually

1785
01:15:26,640 --> 01:15:28,560
yeah okay yeah

1786
01:15:28,560 --> 01:15:30,400
um because most of you are familiar so

1787
01:15:30,400 --> 01:15:32,080
i'm gonna sort of script through even

1788
01:15:32,080 --> 01:15:33,760
though the slide deck is self-contained

1789
01:15:33,760 --> 01:15:35,520
so because it's gonna be offline so

1790
01:15:35,520 --> 01:15:36,719
people can actually take a look at the

1791
01:15:36,719 --> 01:15:37,760
slide deck

1792
01:15:37,760 --> 01:15:39,360
and sort of uh think of this as a

1793
01:15:39,360 --> 01:15:40,719
self-contained

1794
01:15:40,719 --> 01:15:42,719
uh deck but mostly i'm going to skip

1795
01:15:42,719 --> 01:15:43,679
through

1796
01:15:43,679 --> 01:15:46,400
this slide here to begin with

1797
01:15:46,400 --> 01:15:48,400
and

1798
01:15:48,400 --> 01:15:51,040
what i'll say to i guess is that um you

1799
01:15:51,040 --> 01:15:52,800
know we we came to the realization that

1800
01:15:52,800 --> 01:15:54,080
um

1801
01:15:54,080 --> 01:15:55,840
to help alto get some visibility and

1802
01:15:55,840 --> 01:15:57,199
actually uh

1803
01:15:57,199 --> 01:15:59,120
uh adoption basically that there is a

1804
01:15:59,120 --> 01:16:00,239
need to

1805
01:16:00,239 --> 01:16:03,040
uh to have a code base for alto actually

1806
01:16:03,040 --> 01:16:04,719
there's already codebase and there's an

1807
01:16:04,719 --> 01:16:07,120
open auto project that kai and jensen

1808
01:16:07,120 --> 01:16:09,199
and others have actually been leading um

1809
01:16:09,199 --> 01:16:11,679
they need to bring it up to speed um

1810
01:16:11,679 --> 01:16:12,480
and

1811
01:16:12,480 --> 01:16:14,320
actually have sort of a

1812
01:16:14,320 --> 01:16:16,400
a community to help sort of drive that

1813
01:16:16,400 --> 01:16:17,679
development

1814
01:16:17,679 --> 01:16:19,600
and the reason we think this is relevant

1815
01:16:19,600 --> 01:16:22,320
is because we think that um you know

1816
01:16:22,320 --> 01:16:23,840
visibility network visibility is very

1817
01:16:23,840 --> 01:16:25,199
important for the kind of applications

1818
01:16:25,199 --> 01:16:28,080
we we're looking at at these days uh and

1819
01:16:28,080 --> 01:16:29,600
alto provides a key component for that

1820
01:16:29,600 --> 01:16:31,199
visibility

1821
01:16:31,199 --> 01:16:33,040
specifically in applications like edge

1822
01:16:33,040 --> 01:16:34,400
computing for instance so we're going to

1823
01:16:34,400 --> 01:16:36,320
be talking about that secondly

1824
01:16:36,320 --> 01:16:38,400
but um yeah and many others actually not

1825
01:16:38,400 --> 01:16:39,679
just edge computing but many others

1826
01:16:39,679 --> 01:16:41,760
really you think about um how do we get

1827
01:16:41,760 --> 01:16:44,000
application performance is really three

1828
01:16:44,000 --> 01:16:45,840
components visibility

1829
01:16:45,840 --> 01:16:48,159
intelligence and controllability and so

1830
01:16:48,159 --> 01:16:50,480
with um so much going on controllability

1831
01:16:50,480 --> 01:16:52,960
and and so much effort you know we think

1832
01:16:52,960 --> 01:16:54,880
visibility is lagging behind so without

1833
01:16:54,880 --> 01:16:56,400
uh proper visibility it's very hard to

1834
01:16:56,400 --> 01:16:59,440
do control and and then sort of make

1835
01:16:59,440 --> 01:17:01,280
intelligent decisions so that's what

1836
01:17:01,280 --> 01:17:03,440
this is sort of about in this case to

1837
01:17:03,440 --> 01:17:05,360
help out to get some visibility to

1838
01:17:05,360 --> 01:17:07,679
running code uh and trying to bring the

1839
01:17:07,679 --> 01:17:08,960
community together there are actually

1840
01:17:08,960 --> 01:17:10,560
several efforts already going on with

1841
01:17:10,560 --> 01:17:12,320
different vendors but it's sort of

1842
01:17:12,320 --> 01:17:14,080
fragmented and um

1843
01:17:14,080 --> 01:17:16,320
because we're going to be looking at um

1844
01:17:16,320 --> 01:17:18,000
many different kinds of networks and we

1845
01:17:18,000 --> 01:17:19,840
think that uh you know we can really

1846
01:17:19,840 --> 01:17:21,120
leverage some

1847
01:17:21,120 --> 01:17:22,960
networking effects here and sort of uh

1848
01:17:22,960 --> 01:17:25,040
build that code base so if you look at

1849
01:17:25,040 --> 01:17:28,320
the alto architecture which you

1850
01:17:28,320 --> 01:17:29,520
which i'm sure

1851
01:17:29,520 --> 01:17:32,239
so you understand already you know

1852
01:17:32,239 --> 01:17:33,679
just um two main building blocks the

1853
01:17:33,679 --> 01:17:34,880
alpha server and the outdoor client

1854
01:17:34,880 --> 01:17:37,120
right and so uh there's a northbound api

1855
01:17:37,120 --> 01:17:38,480
and the southbound api and the service

1856
01:17:38,480 --> 01:17:40,400
is provided by the alto the visibility

1857
01:17:40,400 --> 01:17:42,400
services that in between

1858
01:17:42,400 --> 01:17:43,520
so on the northbound basically you're

1859
01:17:43,520 --> 01:17:46,000
interfacing with applications so a few

1860
01:17:46,000 --> 01:17:47,760
examples but uh you can see it some of

1861
01:17:47,760 --> 01:17:49,600
these are coming from the edge h cloud

1862
01:17:49,600 --> 01:17:50,719
already so

1863
01:17:50,719 --> 01:17:54,159
uh you know xr v2x uh iot and then the

1864
01:17:54,159 --> 01:17:55,600
hackathon demo we put over the weekend

1865
01:17:55,600 --> 01:17:57,520
was with uh science networks another

1866
01:17:57,520 --> 01:18:00,560
very interesting use case um and um and

1867
01:18:00,560 --> 01:18:02,560
ncdms of course historically alto has

1868
01:18:02,560 --> 01:18:05,840
been very uh predominant on cdns and and

1869
01:18:05,840 --> 01:18:07,840
originally back to the original days on

1870
01:18:07,840 --> 01:18:09,840
p2p but as you can see the applications

1871
01:18:09,840 --> 01:18:11,679
are evolving sort of the need to have

1872
01:18:11,679 --> 01:18:14,000
this visibility and on this new

1873
01:18:14,000 --> 01:18:15,520
landscape basically but in the

1874
01:18:15,520 --> 01:18:16,719
southbound we're looking at actually

1875
01:18:16,719 --> 01:18:18,320
multi-domain networks right so many

1876
01:18:18,320 --> 01:18:20,480
different components and um with the

1877
01:18:20,480 --> 01:18:22,719
conversions of the edge and uh and the

1878
01:18:22,719 --> 01:18:24,560
ip together

1879
01:18:24,560 --> 01:18:26,239
the wireless and the nd and the and the

1880
01:18:26,239 --> 01:18:29,280
core ip at the edge uh it's uh

1881
01:18:29,280 --> 01:18:31,040
on the edge computing side this is a

1882
01:18:31,040 --> 01:18:32,880
it's about the main problem really so

1883
01:18:32,880 --> 01:18:34,960
going expanding from data centers which

1884
01:18:34,960 --> 01:18:37,440
are in the core but also in the edge and

1885
01:18:37,440 --> 01:18:39,280
then once the backhaul mid call throne

1886
01:18:39,280 --> 01:18:42,239
hall ran mobile core multi-domain so

1887
01:18:42,239 --> 01:18:44,480
this sort of landscape tells us that you

1888
01:18:44,480 --> 01:18:46,560
know we could really leverage uh by sort

1889
01:18:46,560 --> 01:18:48,960
of bringing some code base together and

1890
01:18:48,960 --> 01:18:50,320
not having to reinvent the wheel you

1891
01:18:50,320 --> 01:18:51,679
know developing plug-ins for different

1892
01:18:51,679 --> 01:18:54,640
sdn controllers uh and same provide run

1893
01:18:54,640 --> 01:18:56,159
some code reference for the application

1894
01:18:56,159 --> 01:18:58,560
side and so on and so forth so the

1895
01:18:58,560 --> 01:19:00,480
effort here decide to sort of

1896
01:19:00,480 --> 01:19:03,440
leverage uh all these um

1897
01:19:03,440 --> 01:19:05,360
efforts to sort of uh not having to

1898
01:19:05,360 --> 01:19:07,199
reinvent the wheel

1899
01:19:07,199 --> 01:19:09,360
um

1900
01:19:09,360 --> 01:19:11,199
yeah so let's talk then

1901
01:19:11,199 --> 01:19:13,920
uh then how does that map actually so

1902
01:19:13,920 --> 01:19:16,080
again a different view but the same

1903
01:19:16,080 --> 01:19:19,920
picture essentially so um

1904
01:19:20,480 --> 01:19:22,800
yeah so again northbound api certain api

1905
01:19:22,800 --> 01:19:24,400
and then we're looking at building some

1906
01:19:24,400 --> 01:19:27,760
open uh so uh open sourcing some of uh

1907
01:19:27,760 --> 01:19:29,520
some uh some of these components here

1908
01:19:29,520 --> 01:19:31,520
building some open uh some components

1909
01:19:31,520 --> 01:19:34,560
here that would allow to avoid having to

1910
01:19:34,560 --> 01:19:36,640
develop this over and over

1911
01:19:36,640 --> 01:19:37,920
where value is really being created is

1912
01:19:37,920 --> 01:19:40,239
at the at the core here but uh and then

1913
01:19:40,239 --> 01:19:41,920
you have the software api

1914
01:19:41,920 --> 01:19:43,280
plugins to interface with the various

1915
01:19:43,280 --> 01:19:45,840
various sdn controllers uh so over the

1916
01:19:45,840 --> 01:19:47,920
weekend we demonstrated integration with

1917
01:19:47,920 --> 01:19:49,760
mini net but also

1918
01:19:49,760 --> 01:19:51,120
openout already integrates with

1919
01:19:51,120 --> 01:19:53,360
opendaylight but of course uh there's a

1920
01:19:53,360 --> 01:19:55,120
need to sort of integrate more with more

1921
01:19:55,120 --> 01:19:58,640
com sdn controllers to help uh adoption

1922
01:19:58,640 --> 01:20:00,159
of the standard right

1923
01:20:00,159 --> 01:20:02,719
uh the same thing for the itf uh sorry

1924
01:20:02,719 --> 01:20:05,440
for the alto client side and then uh you

1925
01:20:05,440 --> 01:20:06,639
know you could have

1926
01:20:06,639 --> 01:20:09,199
you would have the the the apis

1927
01:20:09,199 --> 01:20:11,840
uh potentially being open uh

1928
01:20:11,840 --> 01:20:13,600
and then but then vendors could also

1929
01:20:13,600 --> 01:20:14,880
develop their own components within

1930
01:20:14,880 --> 01:20:17,880
these

1931
01:20:22,320 --> 01:20:23,120
okay

1932
01:20:23,120 --> 01:20:25,360
i want to talk a little bit about um if

1933
01:20:25,360 --> 01:20:27,120
i hand it over to kai

1934
01:20:27,120 --> 01:20:29,199
about how do we envision this happening

1935
01:20:29,199 --> 01:20:30,000
um

1936
01:20:30,000 --> 01:20:31,280
basically so

1937
01:20:31,280 --> 01:20:33,280
uh within that uh the hackathon actually

1938
01:20:33,280 --> 01:20:35,440
provide a sort of a good uh good

1939
01:20:35,440 --> 01:20:38,880
mechanism here so we're looking at um

1940
01:20:38,880 --> 01:20:40,400
you know the autocode based project ends

1941
01:20:40,400 --> 01:20:42,400
up providing a parallel track to the the

1942
01:20:42,400 --> 01:20:44,800
working groups standardization effort

1943
01:20:44,800 --> 01:20:45,920
towards implementing the features

1944
01:20:45,920 --> 01:20:48,560
introducing the are in the latest rfcs

1945
01:20:48,560 --> 01:20:51,040
that's one but then uh you know the idf

1946
01:20:51,040 --> 01:20:53,520
hackathons uh we intend to use them as

1947
01:20:53,520 --> 01:20:55,360
three checkpoints a year

1948
01:20:55,360 --> 01:20:58,480
for us to test interoperability test the

1949
01:20:58,480 --> 01:21:00,560
the sort of the new features and and

1950
01:21:00,560 --> 01:21:02,239
demonstrate them and socialize them and

1951
01:21:02,239 --> 01:21:04,880
get feedback uh basically on running

1952
01:21:04,880 --> 01:21:08,000
code so uh and the the focus of this

1953
01:21:08,000 --> 01:21:10,159
effort is also gonna be on really on

1954
01:21:10,159 --> 01:21:13,199
production use cases right so uh really

1955
01:21:13,199 --> 01:21:14,480
applications that are already running

1956
01:21:14,480 --> 01:21:16,400
and how can we help them by bringing

1957
01:21:16,400 --> 01:21:18,159
more visibility like the one we had over

1958
01:21:18,159 --> 01:21:20,239
the weekend with uh science and traffic

1959
01:21:20,239 --> 01:21:24,239
with rusio uh and so on so yeah i divine

1960
01:21:24,239 --> 01:21:25,600
build production open source

1961
01:21:25,600 --> 01:21:27,199
environments for use cases and

1962
01:21:27,199 --> 01:21:29,360
deployment and sort of follow like the

1963
01:21:29,360 --> 01:21:31,040
lena startup approach where you know

1964
01:21:31,040 --> 01:21:31,920
really

1965
01:21:31,920 --> 01:21:33,920
and then driving this by

1966
01:21:33,920 --> 01:21:36,159
you know use cases are meaningful um

1967
01:21:36,159 --> 01:21:37,679
many of you here actually have use cases

1968
01:21:37,679 --> 01:21:39,520
that are relevant we want to know about

1969
01:21:39,520 --> 01:21:42,159
them and uh and then what we plan to do

1970
01:21:42,159 --> 01:21:44,400
is you know starting next week from the

1971
01:21:44,400 --> 01:21:46,320
hackathon we're going to regroup and

1972
01:21:46,320 --> 01:21:47,840
then collect all the feedback from this

1973
01:21:47,840 --> 01:21:49,679
week uh look at all the possible use

1974
01:21:49,679 --> 01:21:52,719
cases and select maybe one or two and

1975
01:21:52,719 --> 01:21:54,880
work for them for the next hackathon

1976
01:21:54,880 --> 01:21:57,280
basically so uh and we're gonna continue

1977
01:21:57,280 --> 01:21:59,600
to do this as we continue to

1978
01:21:59,600 --> 01:22:02,000
build a code base as well right so

1979
01:22:02,000 --> 01:22:04,000
uh three checkpoints and in between you

1980
01:22:04,000 --> 01:22:05,920
can you know you you know there's a time

1981
01:22:05,920 --> 01:22:07,920
period here of two three weeks

1982
01:22:07,920 --> 01:22:09,520
where we are going to be opening in the

1983
01:22:09,520 --> 01:22:10,880
outer working group suggestions we're

1984
01:22:10,880 --> 01:22:12,639
already getting some suggestions on

1985
01:22:12,639 --> 01:22:14,480
which features which are uh which use

1986
01:22:14,480 --> 01:22:16,239
cases are important and then psyc one

1987
01:22:16,239 --> 01:22:17,840
and then aim at demonstration in the

1988
01:22:17,840 --> 01:22:20,400
next hackathon as we uh continue to

1989
01:22:20,400 --> 01:22:24,000
build that that code base

1990
01:22:24,000 --> 01:22:25,600
okay uh

1991
01:22:25,600 --> 01:22:27,360
yeah so basically

1992
01:22:27,360 --> 01:22:28,480
you know i don't have to go through the

1993
01:22:28,480 --> 01:22:30,800
whole thing here but we are invoking the

1994
01:22:30,800 --> 01:22:32,719
community for participation

1995
01:22:32,719 --> 01:22:35,199
uh and then this is actually gonna be

1996
01:22:35,199 --> 01:22:36,960
we're driving this through there's a lot

1997
01:22:36,960 --> 01:22:38,080
of interest from the students actually

1998
01:22:38,080 --> 01:22:40,560
to participate and this this is a big

1999
01:22:40,560 --> 01:22:42,480
thank you to richard yang professor

2000
01:22:42,480 --> 01:22:44,080
young and professor kai

2001
01:22:44,080 --> 01:22:46,320
uh you know uh from yale university and

2002
01:22:46,320 --> 01:22:48,960
sinchon university and and and then uh

2003
01:22:48,960 --> 01:22:50,880
for for bringing the students it was

2004
01:22:50,880 --> 01:22:52,560
actually very good experience

2005
01:22:52,560 --> 01:22:54,400
for the past month you know working with

2006
01:22:54,400 --> 01:22:56,800
them so we envisioned these two roles

2007
01:22:56,800 --> 01:22:59,120
developers and mentors mentors are

2008
01:22:59,120 --> 01:23:01,520
usually experienced people from the ietf

2009
01:23:01,520 --> 01:23:03,679
work uh auto working group

2010
01:23:03,679 --> 01:23:06,320
um basically and then developers are

2011
01:23:06,320 --> 01:23:07,920
usually coming from universities

2012
01:23:07,920 --> 01:23:09,600
students uh that are interested in

2013
01:23:09,600 --> 01:23:10,560
learning

2014
01:23:10,560 --> 01:23:12,960
uh you know and on interesting

2015
01:23:12,960 --> 01:23:13,920
production

2016
01:23:13,920 --> 01:23:16,560
production use cases and then real you

2017
01:23:16,560 --> 01:23:17,840
know something that's really uh really

2018
01:23:17,840 --> 01:23:20,320
running on a standard uh we think it can

2019
01:23:20,320 --> 01:23:22,159
be really good a learning experience and

2020
01:23:22,159 --> 01:23:24,800
so uh today we have you know two three

2021
01:23:24,800 --> 01:23:26,320
universities already participating but

2022
01:23:26,320 --> 01:23:28,159
we also call for you know other

2023
01:23:28,159 --> 01:23:29,760
universities other universities that

2024
01:23:29,760 --> 01:23:31,840
might be interested in participating so

2025
01:23:31,840 --> 01:23:33,760
you know uh we are already potentially

2026
01:23:33,760 --> 01:23:35,920
discussing with maybe upc and other

2027
01:23:35,920 --> 01:23:38,000
universities we really want to

2028
01:23:38,000 --> 01:23:40,000
make this also sort of comprehensive in

2029
01:23:40,000 --> 01:23:42,159
terms of uh people who might want to

2030
01:23:42,159 --> 01:23:45,040
participate um yeah project resources so

2031
01:23:45,040 --> 01:23:47,360
we're gonna you know leverage uh github

2032
01:23:47,360 --> 01:23:49,120
some of the new features for

2033
01:23:49,120 --> 01:23:51,040
scam management if you will

2034
01:23:51,040 --> 01:23:52,159
and uh

2035
01:23:52,159 --> 01:23:53,679
yeah that's an example of the the

2036
01:23:53,679 --> 01:23:55,360
dashboard that the the scrum dashboard

2037
01:23:55,360 --> 01:23:56,639
that we use for the hackathon this is

2038
01:23:56,639 --> 01:23:57,440
now

2039
01:23:57,440 --> 01:23:58,560
completed basically next week we're

2040
01:23:58,560 --> 01:24:00,080
gonna be sort of moving on to the next

2041
01:24:00,080 --> 01:24:00,880
one

2042
01:24:00,880 --> 01:24:03,120
uh yeah

2043
01:24:03,120 --> 01:24:05,360
so at this point kai do you want to take

2044
01:24:05,360 --> 01:24:07,199
over

2045
01:24:07,199 --> 01:24:09,120
yup thank you jordy

2046
01:24:09,120 --> 01:24:11,040
uh so carry on hear me

2047
01:24:11,040 --> 01:24:11,760
yeah

2048
01:24:11,760 --> 01:24:12,800
okay

2049
01:24:12,800 --> 01:24:15,120
okay sounds good so uh

2050
01:24:15,120 --> 01:24:17,920
so uh so after this introduction i'll

2051
01:24:17,920 --> 01:24:20,639
give some update on the auto deployment

2052
01:24:20,639 --> 01:24:23,600
and also the state status of the cloud

2053
01:24:23,600 --> 01:24:26,000
base and also the demo that we did in uh

2054
01:24:26,000 --> 01:24:31,239
during the itf hex so next page please

2055
01:24:31,520 --> 01:24:33,440
so as part of the

2056
01:24:33,440 --> 01:24:35,280
chatter item we're actually collecting

2057
01:24:35,280 --> 01:24:37,040
information about

2058
01:24:37,040 --> 01:24:38,480
existing employment

2059
01:24:38,480 --> 01:24:40,239
using auto and

2060
01:24:40,239 --> 01:24:43,040
we have the wiki on the itf webpage

2061
01:24:43,040 --> 01:24:44,960
which collects a list of implementations

2062
01:24:44,960 --> 01:24:46,400
and we also

2063
01:24:46,400 --> 01:24:48,400
uh there are some

2064
01:24:48,400 --> 01:24:51,600
widely known deployments that we

2065
01:24:51,600 --> 01:24:53,679
already see from the previous auto

2066
01:24:53,679 --> 01:24:56,639
working group presenting in 2008

2067
01:24:56,639 --> 01:24:58,639
the comcast and other

2068
01:24:58,639 --> 01:24:59,679
vendors

2069
01:24:59,679 --> 01:25:01,520
actually connect very few uh a

2070
01:25:01,520 --> 01:25:04,400
relatively large scale a few tests to

2071
01:25:04,400 --> 01:25:07,120
for the p4p protocol which is uh

2072
01:25:07,120 --> 01:25:08,800
kind of a predecessor of the auto

2073
01:25:08,800 --> 01:25:11,199
protocol and then we also have the binox

2074
01:25:11,199 --> 01:25:15,120
deployment with dash telecom i think

2075
01:25:15,120 --> 01:25:18,239
roughly starts around 2017 and has been

2076
01:25:18,239 --> 01:25:20,880
running for uh several years

2077
01:25:20,880 --> 01:25:24,280
and uh they also use auto as one of the

2078
01:25:24,280 --> 01:25:26,719
northbound apis

2079
01:25:26,719 --> 01:25:28,639
and uh we are also

2080
01:25:28,639 --> 01:25:31,280
working with telefonica to

2081
01:25:31,280 --> 01:25:33,920
use auto for their cdn deployments and i

2082
01:25:33,920 --> 01:25:35,280
think from the deployment we actually

2083
01:25:35,280 --> 01:25:37,840
see there's actually a shift from

2084
01:25:37,840 --> 01:25:40,400
for the work use cases so previously is

2085
01:25:40,400 --> 01:25:42,719
mostly about the p2p traffic and right

2086
01:25:42,719 --> 01:25:46,560
now it's shifting to a cdn traffic and

2087
01:25:46,560 --> 01:25:48,480
we uh

2088
01:25:48,480 --> 01:25:50,880
we're also working with

2089
01:25:50,880 --> 01:25:53,679
russo and also the

2090
01:25:53,679 --> 01:25:56,320
pacific research platform

2091
01:25:56,320 --> 01:25:58,560
and they are providing use cases such as

2092
01:25:58,560 --> 01:26:01,520
5g and

2093
01:26:01,520 --> 01:26:03,440
i think they also mention like network

2094
01:26:03,440 --> 01:26:06,560
slicing using techniques such as

2095
01:26:06,560 --> 01:26:09,600
srv6 so well uh

2096
01:26:09,600 --> 01:26:11,760
so we believe like the five uh five

2097
01:26:11,760 --> 01:26:13,440
shooting techniques and also uh the

2098
01:26:13,440 --> 01:26:15,280
large scale data management could be the

2099
01:26:15,280 --> 01:26:16,960
next use cases that

2100
01:26:16,960 --> 01:26:20,560
where auto can play an important role

2101
01:26:20,560 --> 01:26:23,840
so next page please

2102
01:26:25,120 --> 01:26:26,960
okay so uh

2103
01:26:26,960 --> 01:26:29,280
so right now i'll be talking about uh

2104
01:26:29,280 --> 01:26:30,800
the

2105
01:26:30,800 --> 01:26:34,400
the hacksaw that we did for the itf 113

2106
01:26:34,400 --> 01:26:36,719
and here is basically a summary of the

2107
01:26:36,719 --> 01:26:38,320
demo so

2108
01:26:38,320 --> 01:26:41,520
we are using minute to simulate a

2109
01:26:41,520 --> 01:26:44,000
network and all the applications are

2110
01:26:44,000 --> 01:26:46,080
actually running real software using

2111
01:26:46,080 --> 01:26:47,840
specifically in containers

2112
01:26:47,840 --> 01:26:48,880
and

2113
01:26:48,880 --> 01:26:50,400
the demo environment is packed as

2114
01:26:50,400 --> 01:26:52,320
multiple containers for future

2115
01:26:52,320 --> 01:26:54,960
enhancement basically uh so jensen is

2116
01:26:54,960 --> 01:26:57,920
doing most of the work and we have the

2117
01:26:57,920 --> 01:27:00,639
the doctors will be made available

2118
01:27:00,639 --> 01:27:04,080
available through the ietf hacksaw

2119
01:27:04,080 --> 01:27:05,600
on github

2120
01:27:05,600 --> 01:27:06,719
and

2121
01:27:06,719 --> 01:27:07,520
so

2122
01:27:07,520 --> 01:27:10,480
uh what we did during the icf hacksaw is

2123
01:27:10,480 --> 01:27:11,520
actually we

2124
01:27:11,520 --> 01:27:13,840
uh demonstrate the capabilities of auto

2125
01:27:13,840 --> 01:27:16,639
to select uh like

2126
01:27:16,639 --> 01:27:19,679
uh to give cost information between

2127
01:27:19,679 --> 01:27:22,480
uh deep sources and a single client so

2128
01:27:22,480 --> 01:27:24,159
that basically enables the source

2129
01:27:24,159 --> 01:27:25,760
selection based on the network map and

2130
01:27:25,760 --> 01:27:28,239
cost map and we also

2131
01:27:28,239 --> 01:27:31,120
compute two types of costs so this will

2132
01:27:31,120 --> 01:27:33,120
be based on the new document basically

2133
01:27:33,120 --> 01:27:34,800
the performance metrics

2134
01:27:34,800 --> 01:27:37,360
and we are able to uh basically provide

2135
01:27:37,360 --> 01:27:39,600
two metrics but well we'll give the

2136
01:27:39,600 --> 01:27:41,600
details later and then

2137
01:27:41,600 --> 01:27:43,199
for the hacksaw we actually

2138
01:27:43,199 --> 01:27:46,800
uh conduct some development and

2139
01:27:46,800 --> 01:27:49,360
a new library written python is provided

2140
01:27:49,360 --> 01:27:51,360
so that people can

2141
01:27:51,360 --> 01:27:53,840
use these libraries uh to

2142
01:27:53,840 --> 01:27:56,239
fulfill for for future development and

2143
01:27:56,239 --> 01:27:57,440
also

2144
01:27:57,440 --> 01:27:59,040
we

2145
01:27:59,040 --> 01:28:01,280
uh we add the auto-based replica

2146
01:28:01,280 --> 01:28:02,719
selection support in the lucio

2147
01:28:02,719 --> 01:28:03,840
scientific

2148
01:28:03,840 --> 01:28:05,440
data management system so next page

2149
01:28:05,440 --> 01:28:07,678
please

2150
01:28:08,800 --> 01:28:10,719
so for people who are not familiar with

2151
01:28:10,719 --> 01:28:12,400
the russia develop

2152
01:28:12,400 --> 01:28:14,000
data management system uh here's

2153
01:28:14,000 --> 01:28:16,000
basically introduction so

2154
01:28:16,000 --> 01:28:18,320
the russell data management system is

2155
01:28:18,320 --> 01:28:19,480
used by

2156
01:28:19,480 --> 01:28:23,679
lhc-1 which is also part of us

2157
01:28:23,679 --> 01:28:26,159
we used to host the data generated by

2158
01:28:26,159 --> 01:28:29,199
the student project and the data will be

2159
01:28:29,199 --> 01:28:31,199
actually spanned across multiple

2160
01:28:31,199 --> 01:28:33,760
projects including

2161
01:28:33,760 --> 01:28:38,320
cms and also atlas so this large-scale

2162
01:28:38,320 --> 01:28:41,360
physical experiments

2163
01:28:41,600 --> 01:28:45,679
and what we did is we modified the auto

2164
01:28:45,679 --> 01:28:46,880
the lucio

2165
01:28:46,880 --> 01:28:48,880
a client code and we

2166
01:28:48,880 --> 01:28:50,480
uh basically

2167
01:28:50,480 --> 01:28:52,000
previously the

2168
01:28:52,000 --> 01:28:54,560
russo client code enables the clients to

2169
01:28:54,560 --> 01:28:56,320
select replicas based on for example

2170
01:28:56,320 --> 01:29:00,080
random order or using uh dual uh

2171
01:29:00,080 --> 01:29:02,320
location information and what we did

2172
01:29:02,320 --> 01:29:04,480
in the hack zone is to enable basically

2173
01:29:04,480 --> 01:29:07,120
to integrate auto in basic integrated

2174
01:29:07,120 --> 01:29:10,000
auto client with a lucio code and then

2175
01:29:10,000 --> 01:29:12,080
we allow the russo client to select

2176
01:29:12,080 --> 01:29:13,120
information

2177
01:29:13,120 --> 01:29:15,040
collected by the auto

2178
01:29:15,040 --> 01:29:18,239
okay so next page please

2179
01:29:21,120 --> 01:29:22,159
and

2180
01:29:22,159 --> 01:29:24,960
the hack during the hexon we actually uh

2181
01:29:24,960 --> 01:29:26,480
implement functionalities from these

2182
01:29:26,480 --> 01:29:27,360
three

2183
01:29:27,360 --> 01:29:29,920
uh drafts so for the base protocol we

2184
01:29:29,920 --> 01:29:32,000
actually use the network map and course

2185
01:29:32,000 --> 01:29:34,000
map and for the

2186
01:29:34,000 --> 01:29:35,920
flow based course query so this these

2187
01:29:35,920 --> 01:29:37,600
two are individual

2188
01:29:37,600 --> 01:29:40,000
documents and we actually implement

2189
01:29:40,000 --> 01:29:40,960
a

2190
01:29:40,960 --> 01:29:43,600
flow code service so that uh we can

2191
01:29:43,600 --> 01:29:46,000
express uh not only the cross product

2192
01:29:46,000 --> 01:29:48,000
between source synthesization but in a

2193
01:29:48,000 --> 01:29:50,159
more fine-grained way and also we

2194
01:29:50,159 --> 01:29:52,639
implement two metrics in the auto

2195
01:29:52,639 --> 01:29:54,880
performance cosmetic document

2196
01:29:54,880 --> 01:29:57,760
so next page piece

2197
01:30:00,159 --> 01:30:02,320
so here is a summary of what is achieved

2198
01:30:02,320 --> 01:30:04,560
during the hacksaw so we have uh like we

2199
01:30:04,560 --> 01:30:06,400
said before we had a client library in

2200
01:30:06,400 --> 01:30:08,480
python and then we

2201
01:30:08,480 --> 01:30:09,760
uh integrate

2202
01:30:09,760 --> 01:30:11,840
autoclient with a certain russo replica

2203
01:30:11,840 --> 01:30:15,440
download command and we also uh

2204
01:30:15,440 --> 01:30:18,080
we plan for three demos and we were able

2205
01:30:18,080 --> 01:30:19,199
to achieve

2206
01:30:19,199 --> 01:30:21,199
two of them and also the third one is

2207
01:30:21,199 --> 01:30:22,480
still

2208
01:30:22,480 --> 01:30:25,440
partially uh

2209
01:30:25,440 --> 01:30:27,679
partially completed and we are still

2210
01:30:27,679 --> 01:30:28,719
working

2211
01:30:28,719 --> 01:30:30,639
and hopefully to get working

2212
01:30:30,639 --> 01:30:34,320
before the next hacksaw and then we also

2213
01:30:34,320 --> 01:30:36,320
have some saucepan auto integration with

2214
01:30:36,320 --> 01:30:37,920
sdn so

2215
01:30:37,920 --> 01:30:39,199
um

2216
01:30:39,199 --> 01:30:40,639
and during the process we're actually

2217
01:30:40,639 --> 01:30:42,480
using uh

2218
01:30:42,480 --> 01:30:44,000
what jordy has mentioned before that

2219
01:30:44,000 --> 01:30:46,639
we're using the scrum

2220
01:30:46,639 --> 01:30:49,600
board to basically keep the

2221
01:30:49,600 --> 01:30:52,239
software management

2222
01:30:52,239 --> 01:30:55,519
yep so next page please

2223
01:30:55,840 --> 01:30:58,239
and here is basically the two other

2224
01:30:58,239 --> 01:30:59,520
measures that we implement during the

2225
01:30:59,520 --> 01:31:03,360
hacksaw so what the the one the first is

2226
01:31:03,360 --> 01:31:06,320
actually the one-way delay uh metric

2227
01:31:06,320 --> 01:31:08,800
and the second is available bandwidth so

2228
01:31:08,800 --> 01:31:11,520
next page piece

2229
01:31:15,360 --> 01:31:18,639
and so here is a list of the docker

2230
01:31:18,639 --> 01:31:21,840
images that we used during the uh as the

2231
01:31:21,840 --> 01:31:24,080
test environment so some of the

2232
01:31:24,080 --> 01:31:26,880
containers are provided by the lucio

2233
01:31:26,880 --> 01:31:30,080
uh project so the uh for example uh the

2234
01:31:30,080 --> 01:31:32,960
lucio container basically is where the

2235
01:31:32,960 --> 01:31:36,080
client is located and then we have the

2236
01:31:36,080 --> 01:31:37,920
uh xrd

2237
01:31:37,920 --> 01:31:39,920
uh container basically

2238
01:31:39,920 --> 01:31:42,159
that's where the data are stored and

2239
01:31:42,159 --> 01:31:43,040
then

2240
01:31:43,040 --> 01:31:45,520
we have the auto

2241
01:31:45,520 --> 01:31:48,400
the audio container which is used to

2242
01:31:48,400 --> 01:31:49,840
generate the

2243
01:31:49,840 --> 01:31:51,920
auto maps

2244
01:31:51,920 --> 01:31:54,800
so next page please

2245
01:31:55,920 --> 01:31:58,639
and so here is actually some screenshots

2246
01:31:58,639 --> 01:32:01,840
for the demo first we were using

2247
01:32:01,840 --> 01:32:05,440
the container nets uh

2248
01:32:05,440 --> 01:32:07,440
basically canadian is a container that

2249
01:32:07,440 --> 01:32:10,639
enables the containers to be connected

2250
01:32:10,639 --> 01:32:13,120
to a virtual network so here

2251
01:32:13,120 --> 01:32:15,040
we use containers to construct a network

2252
01:32:15,040 --> 01:32:17,520
looks like this and then from this

2253
01:32:17,520 --> 01:32:20,400
network we actually construct to

2254
01:32:20,400 --> 01:32:22,239
all the resources the first is auto

2255
01:32:22,239 --> 01:32:24,239
natural map and for the natural map we

2256
01:32:24,239 --> 01:32:27,280
actually group the uh host based on the

2257
01:32:27,280 --> 01:32:29,440
access link and then

2258
01:32:29,440 --> 01:32:30,480
uh

2259
01:32:30,480 --> 01:32:32,400
we collect bandwidth information between

2260
01:32:32,400 --> 01:32:35,040
the hosts as the auto cost and provided

2261
01:32:35,040 --> 01:32:36,639
through the out of course map

2262
01:32:36,639 --> 01:32:38,480
and the

2263
01:32:38,480 --> 01:32:41,440
the third step is we actually uh

2264
01:32:41,440 --> 01:32:44,719
uh by invoking the by passing the the

2265
01:32:44,719 --> 01:32:47,440
address of the auto course map to the

2266
01:32:47,440 --> 01:32:48,560
russo

2267
01:32:48,560 --> 01:32:51,840
uh command which we have modified to

2268
01:32:51,840 --> 01:32:54,400
integrate the auto capabilities and then

2269
01:32:54,400 --> 01:32:56,480
it enables the sorting of the replicas

2270
01:32:56,480 --> 01:32:58,480
based on all the information and because

2271
01:32:58,480 --> 01:33:00,560
we are using bandwidth so actually this

2272
01:33:00,560 --> 01:33:03,199
uh the sorting order is from the largest

2273
01:33:03,199 --> 01:33:05,199
bandwidth to the smallest and then we

2274
01:33:05,199 --> 01:33:06,880
were able to select the one with the

2275
01:33:06,880 --> 01:33:10,000
highest bandwidth in the in this demo so

2276
01:33:10,000 --> 01:33:12,719
next page please

2277
01:33:13,760 --> 01:33:16,239
and here is the

2278
01:33:16,239 --> 01:33:18,320
results that we get when we basically

2279
01:33:18,320 --> 01:33:22,239
use as flow as the

2280
01:33:22,239 --> 01:33:23,760
monitor and

2281
01:33:23,760 --> 01:33:24,800
i think

2282
01:33:24,800 --> 01:33:26,639
the the first the figure on the left

2283
01:33:26,639 --> 01:33:29,040
basically shows when we randomly select

2284
01:33:29,040 --> 01:33:30,239
a

2285
01:33:30,239 --> 01:33:32,000
replica and

2286
01:33:32,000 --> 01:33:33,600
the maximum

2287
01:33:33,600 --> 01:33:36,960
balance with uh perfect gain is about

2288
01:33:36,960 --> 01:33:39,360
four to five times higher

2289
01:33:39,360 --> 01:33:42,719
so next page please

2290
01:33:45,280 --> 01:33:46,320
and then

2291
01:33:46,320 --> 01:33:48,159
in this figure obviously we are doing

2292
01:33:48,159 --> 01:33:49,199
the

2293
01:33:49,199 --> 01:33:51,520
same selection process except that we're

2294
01:33:51,520 --> 01:33:53,280
using a different matrix and we're not

2295
01:33:53,280 --> 01:33:54,960
using the bandwidth information by using

2296
01:33:54,960 --> 01:33:56,960
the latency and

2297
01:33:56,960 --> 01:33:59,199
for latency basically the sorting orders

2298
01:33:59,199 --> 01:34:01,040
will be slightly different and also in

2299
01:34:01,040 --> 01:34:02,880
increasing order so we

2300
01:34:02,880 --> 01:34:05,440
select the one with the smallest one-way

2301
01:34:05,440 --> 01:34:07,600
latency and then

2302
01:34:07,600 --> 01:34:09,280
uh

2303
01:34:09,280 --> 01:34:11,840
but but for this use case actually

2304
01:34:11,840 --> 01:34:13,760
because of downloading is mostly

2305
01:34:13,760 --> 01:34:15,679
determined by the bandwidth so when we

2306
01:34:15,679 --> 01:34:17,360
use the latency selection

2307
01:34:17,360 --> 01:34:19,040
uh it does not

2308
01:34:19,040 --> 01:34:20,719
give the best performance but actually

2309
01:34:20,719 --> 01:34:23,199
but but it still shows that we enable

2310
01:34:23,199 --> 01:34:26,480
the capability of like exposing this

2311
01:34:26,480 --> 01:34:28,239
network from providing this network

2312
01:34:28,239 --> 01:34:29,679
visibility to the

2313
01:34:29,679 --> 01:34:31,280
rucio client

2314
01:34:31,280 --> 01:34:34,320
so let's page please

2315
01:34:35,920 --> 01:34:38,960
and uh here is uh what we're doing for

2316
01:34:38,960 --> 01:34:41,520
demo2 so we're actually providing

2317
01:34:41,520 --> 01:34:43,760
uh the multiple uh

2318
01:34:43,760 --> 01:34:46,159
throughput prediction for multiple flows

2319
01:34:46,159 --> 01:34:48,400
and uh here the screen basically we're

2320
01:34:48,400 --> 01:34:50,719
using uh two

2321
01:34:50,719 --> 01:34:52,239
we're

2322
01:34:52,239 --> 01:34:54,320
initializing like multiple flows

2323
01:34:54,320 --> 01:34:56,320
downloading uh

2324
01:34:56,320 --> 01:34:58,480
downloading requirements and then

2325
01:34:58,480 --> 01:34:59,360
uh

2326
01:34:59,360 --> 01:35:02,159
we used a prediction

2327
01:35:02,159 --> 01:35:04,719
uh through multiplication based on the

2328
01:35:04,719 --> 01:35:07,040
uh uh basically network utility

2329
01:35:07,040 --> 01:35:09,119
maximization model and

2330
01:35:09,119 --> 01:35:11,520
uh we already modified the auto

2331
01:35:11,520 --> 01:35:13,280
interfaces to support the flow core

2332
01:35:13,280 --> 01:35:16,080
service so that the cost would not be

2333
01:35:16,080 --> 01:35:18,239
provided for

2334
01:35:18,239 --> 01:35:20,800
the prosta the cross-product of sources

2335
01:35:20,800 --> 01:35:22,800
and destinations but for

2336
01:35:22,800 --> 01:35:25,280
more fine-grained approaches and this is

2337
01:35:25,280 --> 01:35:27,679
actually

2338
01:35:27,679 --> 01:35:29,760
uh proposed in one of the individual

2339
01:35:29,760 --> 01:35:32,000
drafts which we are pushing for to

2340
01:35:32,000 --> 01:35:34,080
become a working group document so next

2341
01:35:34,080 --> 01:35:36,559
specialist

2342
01:35:38,960 --> 01:35:42,400
and uh what is not a fully achieved

2343
01:35:42,400 --> 01:35:44,480
during the hacksaw is the third drama is

2344
01:35:44,480 --> 01:35:45,199
to

2345
01:35:45,199 --> 01:35:47,520
so in the in the demo one we're actually

2346
01:35:47,520 --> 01:35:49,920
starting a download for a single client

2347
01:35:49,920 --> 01:35:50,800
and

2348
01:35:50,800 --> 01:35:53,199
uh in practice what is what usually

2349
01:35:53,199 --> 01:35:54,960
happens is where there actually are

2350
01:35:54,960 --> 01:35:57,280
multiple concurrent downloads and for

2351
01:35:57,280 --> 01:36:00,159
multiple congruent dentals choosing the

2352
01:36:00,159 --> 01:36:01,840
one with the maximum bandwidth may not

2353
01:36:01,840 --> 01:36:03,920
be the optimal solution and what we're

2354
01:36:03,920 --> 01:36:06,639
trying to demonstrate in this demo is

2355
01:36:06,639 --> 01:36:08,400
that maybe we can

2356
01:36:08,400 --> 01:36:10,159
we can average the information provided

2357
01:36:10,159 --> 01:36:11,760
in demo too basically the super

2358
01:36:11,760 --> 01:36:14,719
prediction when there are concrete uh

2359
01:36:14,719 --> 01:36:16,159
tcp flows

2360
01:36:16,159 --> 01:36:17,520
uh

2361
01:36:17,520 --> 01:36:18,480
and

2362
01:36:18,480 --> 01:36:20,080
so for demo three we're actually trying

2363
01:36:20,080 --> 01:36:21,040
to

2364
01:36:21,040 --> 01:36:22,639
uh developing

2365
01:36:22,639 --> 01:36:25,040
basically to integrate the multiple

2366
01:36:25,040 --> 01:36:27,760
uh flow throughput prediction capability

2367
01:36:27,760 --> 01:36:30,159
into the russell clan but this is uh not

2368
01:36:30,159 --> 01:36:31,199
fully

2369
01:36:31,199 --> 01:36:34,000
uh completely and we look we are

2370
01:36:34,000 --> 01:36:35,840
hoping to get this

2371
01:36:35,840 --> 01:36:38,080
demo down in the next item hack song and

2372
01:36:38,080 --> 01:36:40,000
then we can

2373
01:36:40,000 --> 01:36:41,280
maybe get

2374
01:36:41,280 --> 01:36:42,159
also

2375
01:36:42,159 --> 01:36:43,040
uh

2376
01:36:43,040 --> 01:36:45,280
have like further demonstrations about

2377
01:36:45,280 --> 01:36:49,440
how it can improve the performance

2378
01:36:49,440 --> 01:36:53,000
so let's start please

2379
01:36:53,360 --> 01:36:55,920
yep i think this is

2380
01:36:55,920 --> 01:36:58,000
this is and so i'll give the floor back

2381
01:36:58,000 --> 01:37:00,560
to you charlie

2382
01:37:03,119 --> 01:37:05,360
yeah

2383
01:37:05,520 --> 01:37:07,440
yeah i guess any questions but before uh

2384
01:37:07,440 --> 01:37:09,280
yeah i just wanted to also say thank you

2385
01:37:09,280 --> 01:37:11,040
because uh you know there's a lot of

2386
01:37:11,040 --> 01:37:12,400
people actually who worked endless hours

2387
01:37:12,400 --> 01:37:14,400
for the last 10 days actually it has

2388
01:37:14,400 --> 01:37:16,239
been like a couple of months

2389
01:37:16,239 --> 01:37:18,239
planning and so on but the last 10 days

2390
01:37:18,239 --> 01:37:19,440
you know i should really say thank you

2391
01:37:19,440 --> 01:37:21,520
because people say three time zones and

2392
01:37:21,520 --> 01:37:23,119
it's the same late night so thank you

2393
01:37:23,119 --> 01:37:25,119
all everyone for the adaptations and

2394
01:37:25,119 --> 01:37:26,159
hard work

2395
01:37:26,159 --> 01:37:29,440
uh yeah so any any questions

2396
01:37:29,440 --> 01:37:32,599
on these

2397
01:37:34,960 --> 01:37:36,960
yeah martin duke google thanks this is

2398
01:37:36,960 --> 01:37:38,880
very interesting and and pretty

2399
01:37:38,880 --> 01:37:41,840
impressive um

2400
01:37:44,080 --> 01:37:46,320
um it was it was nice to see like three

2401
01:37:46,320 --> 01:37:47,840
different drafts incorporated in this

2402
01:37:47,840 --> 01:37:51,600
work that kai presented um

2403
01:37:52,400 --> 01:37:54,000
and i seem to recall cern having

2404
01:37:54,000 --> 01:37:56,080
deployed some stuff here so

2405
01:37:56,080 --> 01:37:58,719
is is russio the service that already

2406
01:37:58,719 --> 01:38:01,360
had alto so is this is the diff here

2407
01:38:01,360 --> 01:38:03,600
from 7285 to

2408
01:38:03,600 --> 01:38:06,960
adding the additional drafts or is there

2409
01:38:06,960 --> 01:38:09,920
or is that a completely different thing

2410
01:38:09,920 --> 01:38:11,440
so um

2411
01:38:11,440 --> 01:38:13,679
i think this is a a new thing uh richard

2412
01:38:13,679 --> 01:38:15,360
might have more historical background we

2413
01:38:15,360 --> 01:38:17,920
will have some yeah richard actually

2414
01:38:17,920 --> 01:38:20,400
yeah so uh martin could clarify

2415
01:38:20,400 --> 01:38:21,520
uh

2416
01:38:21,520 --> 01:38:24,719
this code and 7285 and all the stuff

2417
01:38:24,719 --> 01:38:26,719
they're part of rules already so of

2418
01:38:26,719 --> 01:38:28,239
course they really need to finalize and

2419
01:38:28,239 --> 01:38:31,040
do all unit has and so on so but overall

2420
01:38:31,040 --> 01:38:33,600
let me just clarify that russo is the

2421
01:38:33,600 --> 01:38:35,440
the data management system for search

2422
01:38:35,440 --> 01:38:39,119
and for audio items and so on and

2423
01:38:39,119 --> 01:38:42,080
the workflow actually is complex so a

2424
01:38:42,080 --> 01:38:44,080
workflow typically what using their

2425
01:38:44,080 --> 01:38:45,440
terminology i don't know if there are

2426
01:38:45,440 --> 01:38:48,719
any like uh uh uh uh certain people uh

2427
01:38:48,719 --> 01:38:50,560
or rules of people here doing a call

2428
01:38:50,560 --> 01:38:51,920
here but of course they can ask him to

2429
01:38:51,920 --> 01:38:54,719
clarify and we're mostly working with uh

2430
01:38:54,719 --> 01:38:55,600
uh

2431
01:38:55,600 --> 01:38:58,159
the project lead and martin and and

2432
01:38:58,159 --> 01:39:00,800
mario uh lesnik and they are the project

2433
01:39:00,800 --> 01:39:02,560
leads of the russo team and there's also

2434
01:39:02,560 --> 01:39:04,480
radhu who's the transfer lead so

2435
01:39:04,480 --> 01:39:06,480
therefore they they guided us about the

2436
01:39:06,480 --> 01:39:08,960
integration of auto and with the rule

2437
01:39:08,960 --> 01:39:09,760
the

2438
01:39:09,760 --> 01:39:12,320
system and for the user at high level

2439
01:39:12,320 --> 01:39:14,080
there are two workloads what they call

2440
01:39:14,080 --> 01:39:16,400
and one workload is called the manual

2441
01:39:16,400 --> 01:39:18,320
workload which basically means uh

2442
01:39:18,320 --> 01:39:20,000
whenever a client

2443
01:39:20,000 --> 01:39:22,400
for example when they download the file

2444
01:39:22,400 --> 01:39:24,480
they won't really do analysis and they

2445
01:39:24,480 --> 01:39:26,080
would start something called a user

2446
01:39:26,080 --> 01:39:27,920
download and that part actually worked

2447
01:39:27,920 --> 01:39:29,280
out so this part of code actually is

2448
01:39:29,280 --> 01:39:30,719
already in the system they probably

2449
01:39:30,719 --> 01:39:32,639
hopefully we can get fully deployed onto

2450
01:39:32,639 --> 01:39:34,800
the drupal system and soon and all the

2451
01:39:34,800 --> 01:39:36,400
code i think we went through the old

2452
01:39:36,400 --> 01:39:38,560
review last week so hopefully this will

2453
01:39:38,560 --> 01:39:40,560
really become part of rusev and but

2454
01:39:40,560 --> 01:39:43,119
actually the main main work main

2455
01:39:43,119 --> 01:39:45,520
workload is what they call the automatic

2456
01:39:45,520 --> 01:39:47,679
uh workload which is

2457
01:39:47,679 --> 01:39:49,760
automatically replication of all the

2458
01:39:49,760 --> 01:39:53,040
data into all kinds of sites that part

2459
01:39:53,040 --> 01:39:55,920
of code to do the integration need to

2460
01:39:55,920 --> 01:39:58,239
modify their database

2461
01:39:58,239 --> 01:40:01,600
schema which is tricky so we are hoping

2462
01:40:01,600 --> 01:40:03,199
that we can really like hammer down the

2463
01:40:03,199 --> 01:40:05,360
details with them for next week and then

2464
01:40:05,360 --> 01:40:07,119
we can start really modify the database

2465
01:40:07,119 --> 01:40:09,920
schema and integrate into the total uh

2466
01:40:09,920 --> 01:40:10,800
uh

2467
01:40:10,800 --> 01:40:12,560
the total automated workload so

2468
01:40:12,560 --> 01:40:14,400
therefore then we can claim that we have

2469
01:40:14,400 --> 01:40:16,719
a full integration of the both auto this

2470
01:40:16,719 --> 01:40:19,360
moment mostly is for the manual uh

2471
01:40:19,360 --> 01:40:20,800
workflow which is actually a smaller

2472
01:40:20,800 --> 01:40:22,880
part of total workload

2473
01:40:22,880 --> 01:40:24,560
i don't know if that's clarified or not

2474
01:40:24,560 --> 01:40:25,840
yeah that was an interesting

2475
01:40:25,840 --> 01:40:28,320
clarification but i'm not but but my

2476
01:40:28,320 --> 01:40:30,800
actual question was

2477
01:40:30,800 --> 01:40:33,199
prior to this project

2478
01:40:33,199 --> 01:40:36,560
did rusio have any ulta support at all

2479
01:40:36,560 --> 01:40:38,000
no it doesn't

2480
01:40:38,000 --> 01:40:39,040
okay

2481
01:40:39,040 --> 01:40:40,239
so it

2482
01:40:40,239 --> 01:40:42,639
all right so because at one time

2483
01:40:42,639 --> 01:40:44,239
i remember having explained to me that

2484
01:40:44,239 --> 01:40:46,400
cern had some sort of alto deployment is

2485
01:40:46,400 --> 01:40:47,760
that a different

2486
01:40:47,760 --> 01:40:50,760
tool

2487
01:40:51,760 --> 01:40:53,679
so there's a deployment and we're

2488
01:40:53,679 --> 01:40:55,520
working with the es net and the pacific

2489
01:40:55,520 --> 01:40:57,920
research platform okay ronaldo yet but

2490
01:40:57,920 --> 01:40:59,440
on something called grading graph which

2491
01:40:59,440 --> 01:41:01,040
um is something i'm actually going to

2492
01:41:01,040 --> 01:41:02,880
present in a couple minutes uh i don't

2493
01:41:02,880 --> 01:41:04,480
know if that's a reference that you were

2494
01:41:04,480 --> 01:41:06,560
connected science networks with and

2495
01:41:06,560 --> 01:41:08,320
we're actually gonna be working with

2496
01:41:08,320 --> 01:41:10,239
packaging that into alto

2497
01:41:10,239 --> 01:41:13,040
and deploying that at esnet prp

2498
01:41:13,040 --> 01:41:13,840
uh

2499
01:41:13,840 --> 01:41:15,600
and starting with prp i should say and

2500
01:41:15,600 --> 01:41:18,159
then people into potentially es net and

2501
01:41:18,159 --> 01:41:19,600
then yeah and then so certain there's a

2502
01:41:19,600 --> 01:41:21,119
lot of synergies because this as you

2503
01:41:21,119 --> 01:41:22,159
know it's uh

2504
01:41:22,159 --> 01:41:24,719
all neighbors are connected so yeah yeah

2505
01:41:24,719 --> 01:41:26,320
okay thanks all right i'll wait for that

2506
01:41:26,320 --> 01:41:29,199
then yeah cool

2507
01:41:30,960 --> 01:41:32,960
okay uh i think

2508
01:41:32,960 --> 01:41:36,719
so thanks jody thanks uh uh kai and uh

2509
01:41:36,719 --> 01:41:37,600
you

2510
01:41:37,600 --> 01:41:39,440
did a very good job for

2511
01:41:39,440 --> 01:41:41,520
uh hacksaw actually build the code basis

2512
01:41:41,520 --> 01:41:44,960
is very important for auto let's uh move

2513
01:41:44,960 --> 01:41:47,199
to the next topic so give the time and

2514
01:41:47,199 --> 01:41:50,000
limit i i want to suggest maybe

2515
01:41:50,000 --> 01:41:53,119
jodi you may only have 15 minutes for

2516
01:41:53,119 --> 01:41:56,280
this topic

2517
01:42:01,040 --> 01:42:04,040
um

2518
01:42:27,360 --> 01:42:28,239
play

2519
01:42:28,239 --> 01:42:29,840
okay

2520
01:42:29,840 --> 01:42:33,239
sorry about that

2521
01:42:55,119 --> 01:42:57,920
baltimore's lecture advance in auto

2522
01:42:57,920 --> 01:42:59,600
requirements

2523
01:42:59,600 --> 01:43:01,920
right here use casino requirements sorry

2524
01:43:01,920 --> 01:43:03,119
and uh

2525
01:43:03,119 --> 01:43:04,880
yeah so

2526
01:43:04,880 --> 01:43:07,119
um

2527
01:43:08,560 --> 01:43:11,040
let's get through this but um

2528
01:43:11,040 --> 01:43:12,159
you know

2529
01:43:12,159 --> 01:43:13,440
this is work actually coming from

2530
01:43:13,440 --> 01:43:14,880
research uh there's a couple of papers

2531
01:43:14,880 --> 01:43:17,119
we publish at sigmatrix and sitcom and

2532
01:43:17,119 --> 01:43:18,480
then uh

2533
01:43:18,480 --> 01:43:20,719
you know uh professor richard yang nine

2534
01:43:20,719 --> 01:43:22,639
months ago about nine months ago and

2535
01:43:22,639 --> 01:43:24,719
reached out to us you know saying you

2536
01:43:24,719 --> 01:43:26,800
know hey this is interesting maybe could

2537
01:43:26,800 --> 01:43:28,960
we uh discuss putting this in into the

2538
01:43:28,960 --> 01:43:30,239
alto

2539
01:43:30,239 --> 01:43:32,320
uh work basically so

2540
01:43:32,320 --> 01:43:34,000
first of all thank you to

2541
01:43:34,000 --> 01:43:36,239
uh richard uh for reaching out

2542
01:43:36,239 --> 01:43:37,679
and that's been very interesting in nine

2543
01:43:37,679 --> 01:43:40,239
months i guess since then and uh yeah

2544
01:43:40,239 --> 01:43:41,760
and thank you everyone for the coaching

2545
01:43:41,760 --> 01:43:44,000
actually and the guidance uh from the

2546
01:43:44,000 --> 01:43:46,159
you know from everyone at the outworking

2547
01:43:46,159 --> 01:43:47,600
group really um

2548
01:43:47,600 --> 01:43:49,840
so um but yeah so this is an

2549
01:43:49,840 --> 01:43:53,840
informational draft um and

2550
01:43:53,920 --> 01:43:55,360
what we so the details i'm going to skip

2551
01:43:55,360 --> 01:43:57,199
the leaders of course but if you are

2552
01:43:57,199 --> 01:43:58,320
more interested you can look into the

2553
01:43:58,320 --> 01:43:59,840
papers um

2554
01:43:59,840 --> 01:44:01,280
and the what i'll try to do is to

2555
01:44:01,280 --> 01:44:02,480
introduce

2556
01:44:02,480 --> 01:44:05,760
vulnera structures uh briefly and then

2557
01:44:05,760 --> 01:44:07,440
um we're going to talk about use

2558
01:44:07,440 --> 01:44:09,520
potential use cases for alton

2559
01:44:09,520 --> 01:44:12,320
and then requirements um let's see

2560
01:44:12,320 --> 01:44:14,320
so the the context here i'm going to

2561
01:44:14,320 --> 01:44:15,920
pick on the congestion control problem

2562
01:44:15,920 --> 01:44:18,560
say so the congest the conventional v on

2563
01:44:18,560 --> 01:44:20,159
on congestion control basically for the

2564
01:44:20,159 --> 01:44:21,920
last 30 years

2565
01:44:21,920 --> 01:44:24,159
is this um idea that the performance of

2566
01:44:24,159 --> 01:44:25,920
a flow is uniquely determined by its

2567
01:44:25,920 --> 01:44:27,760
bottleneck link right so this comes from

2568
01:44:27,760 --> 01:44:30,159
jacobson's paper back in 1988 that

2569
01:44:30,159 --> 01:44:32,159
literally saved the internet from

2570
01:44:32,159 --> 01:44:34,000
congestion collapse basically by

2571
01:44:34,000 --> 01:44:35,679
inventing the first congestion control

2572
01:44:35,679 --> 01:44:37,360
algorithm and this is a true statement

2573
01:44:37,360 --> 01:44:39,679
right i mean the the performance of

2574
01:44:39,679 --> 01:44:41,440
a flow it is uh determined by its

2575
01:44:41,440 --> 01:44:43,360
bottleneck link right but while this is

2576
01:44:43,360 --> 01:44:45,119
a true statement with um

2577
01:44:45,119 --> 01:44:46,880
we realize that there is a much more

2578
01:44:46,880 --> 01:44:49,920
sort of fundamental or intricate um

2579
01:44:49,920 --> 01:44:51,199
um

2580
01:44:51,199 --> 01:44:52,639
element going going on in a

2581
01:44:52,639 --> 01:44:54,320
communication network the analogy here

2582
01:44:54,320 --> 01:44:56,480
is uh with an iceberg if a communication

2583
01:44:56,480 --> 01:44:58,560
network where an iceberg the notion that

2584
01:44:58,560 --> 01:45:00,960
the flow uh the performance will flow is

2585
01:45:00,960 --> 01:45:02,320
uniquely determined by its bottom egg

2586
01:45:02,320 --> 01:45:04,960
lean would be the tip of the iceberg

2587
01:45:04,960 --> 01:45:07,520
underneath what the submerged part is

2588
01:45:07,520 --> 01:45:08,719
what we call the bond mecha structure

2589
01:45:08,719 --> 01:45:10,560
which really reveals

2590
01:45:10,560 --> 01:45:12,320
system-wide performance

2591
01:45:12,320 --> 01:45:13,360
and how

2592
01:45:13,360 --> 01:45:15,600
flows and bottleneck links

2593
01:45:15,600 --> 01:45:17,119
relate to each other and the forces that

2594
01:45:17,119 --> 01:45:17,920
they

2595
01:45:17,920 --> 01:45:19,920
exert on each other basically so let's

2596
01:45:19,920 --> 01:45:20,880
see how

2597
01:45:20,880 --> 01:45:22,400
that works i'm gonna just put a very

2598
01:45:22,400 --> 01:45:24,560
simple example to see if we can capture

2599
01:45:24,560 --> 01:45:25,679
the idea

2600
01:45:25,679 --> 01:45:26,560
um

2601
01:45:26,560 --> 01:45:28,000
and and what's the relationship with

2602
01:45:28,000 --> 01:45:29,280
alto basically because we're going to

2603
01:45:29,280 --> 01:45:31,040
show that bonding structures are a very

2604
01:45:31,040 --> 01:45:33,360
compact way to sort of uh summarize the

2605
01:45:33,360 --> 01:45:35,440
state of the network that takes um that

2606
01:45:35,440 --> 01:45:37,119
includes topology routing and flow

2607
01:45:37,119 --> 01:45:39,199
information in a single d graph and that

2608
01:45:39,199 --> 01:45:41,040
actually allows you to quantify things

2609
01:45:41,040 --> 01:45:42,560
and compute derivatives on the network

2610
01:45:42,560 --> 01:45:45,119
so it's a it's um it's a way to sort of

2611
01:45:45,119 --> 01:45:46,320
capture the state of network that

2612
01:45:46,320 --> 01:45:48,560
applications could potentially leverage

2613
01:45:48,560 --> 01:45:51,199
so let's take as an example this network

2614
01:45:51,199 --> 01:45:53,520
so links are circles so there are four

2615
01:45:53,520 --> 01:45:54,400
links

2616
01:45:54,400 --> 01:45:55,920
link one through link four each one with

2617
01:45:55,920 --> 01:45:58,400
a different capacity flows are lines

2618
01:45:58,400 --> 01:45:59,679
each one with a different color so there

2619
01:45:59,679 --> 01:46:01,679
are six flows and i'm going to skip

2620
01:46:01,679 --> 01:46:03,280
forward and just

2621
01:46:03,280 --> 01:46:04,560
show you what's the bottleneck structure

2622
01:46:04,560 --> 01:46:06,080
so this is the bottom like structure of

2623
01:46:06,080 --> 01:46:08,480
this network basically

2624
01:46:08,480 --> 01:46:10,000
and then how do we read a bottlenecker

2625
01:46:10,000 --> 01:46:12,639
structure so a bonding structure is read

2626
01:46:12,639 --> 01:46:13,840
as follows

2627
01:46:13,840 --> 01:46:16,000
links and flows are vertices in the

2628
01:46:16,000 --> 01:46:17,760
graph so for every flow and for

2629
01:46:17,760 --> 01:46:21,520
everything we have a vertex in the graph

2630
01:46:21,520 --> 01:46:23,280
if there is a directed edge from a link

2631
01:46:23,280 --> 01:46:24,480
to a flow

2632
01:46:24,480 --> 01:46:26,239
then that flow is bottleneck at that

2633
01:46:26,239 --> 01:46:27,760
link

2634
01:46:27,760 --> 01:46:29,679
it instead like for instance flossy is

2635
01:46:29,679 --> 01:46:30,880
bottlenecked a linguan because there is

2636
01:46:30,880 --> 01:46:32,560
a directed edge from ling one to flow

2637
01:46:32,560 --> 01:46:33,840
three

2638
01:46:33,840 --> 01:46:35,600
if there is a direct attach from a flow

2639
01:46:35,600 --> 01:46:38,159
to a link then that flow traverses that

2640
01:46:38,159 --> 01:46:40,639
link that's the relationship so float3

2641
01:46:40,639 --> 01:46:42,320
versus link to because there's a direct

2642
01:46:42,320 --> 01:46:44,639
attach from pro 3 to link two because

2643
01:46:44,639 --> 01:46:46,320
flow three is bottom like a link one it

2644
01:46:46,320 --> 01:46:48,159
also master reversal in one therefore

2645
01:46:48,159 --> 01:46:49,520
there's also this is a bi-directional

2646
01:46:49,520 --> 01:46:51,119
edge right whenever you're bottleneck

2647
01:46:51,119 --> 01:46:53,440
you have a directional edge now why this

2648
01:46:53,440 --> 01:46:55,760
graph is relevant uh is because this

2649
01:46:55,760 --> 01:46:57,679
graph actually allows us to both qualify

2650
01:46:57,679 --> 01:46:59,840
and also quantify the forces that flows

2651
01:46:59,840 --> 01:47:01,520
and bottlenecks exert on each other and

2652
01:47:01,520 --> 01:47:02,880
reveals a

2653
01:47:02,880 --> 01:47:04,960
hierarchical structure of the submerged

2654
01:47:04,960 --> 01:47:07,040
part of that iceberg that tells us how

2655
01:47:07,040 --> 01:47:09,360
how to drive system-wide performance

2656
01:47:09,360 --> 01:47:10,639
if you want to know how this graph is it

2657
01:47:10,639 --> 01:47:12,320
can be computed uh you can be computed

2658
01:47:12,320 --> 01:47:13,679
in polynomial time

2659
01:47:13,679 --> 01:47:15,760
uh you can actually compute a you know

2660
01:47:15,760 --> 01:47:18,639
um this graph for a us-wide network in a

2661
01:47:18,639 --> 01:47:20,080
fraction of a second so this is kind of

2662
01:47:20,080 --> 01:47:21,760
the algorithms are highly scalable and

2663
01:47:21,760 --> 01:47:23,280
that's some point but basically i'm

2664
01:47:23,280 --> 01:47:25,760
gonna sort of talk about a couple of

2665
01:47:25,760 --> 01:47:27,360
concepts only

2666
01:47:27,360 --> 01:47:29,440
uh one is um

2667
01:47:29,440 --> 01:47:31,280
that the fact that this graph reveals

2668
01:47:31,280 --> 01:47:33,679
how perturbations on a network

2669
01:47:33,679 --> 01:47:35,520
propagate uh through the system

2670
01:47:35,520 --> 01:47:37,280
basically the ripple effects

2671
01:47:37,280 --> 01:47:39,040
suppose that there's a perturbation on a

2672
01:47:39,040 --> 01:47:40,560
link what that means that could be

2673
01:47:40,560 --> 01:47:41,679
several things for instance if it's a

2674
01:47:41,679 --> 01:47:43,280
wireless link could be the signal to

2675
01:47:43,280 --> 01:47:45,040
noise ratio is changing

2676
01:47:45,040 --> 01:47:46,480
so what the graph tells us that if

2677
01:47:46,480 --> 01:47:47,840
there's a perturbation on link two

2678
01:47:47,840 --> 01:47:49,440
that's gonna have an effect

2679
01:47:49,440 --> 01:47:52,159
on flows that can be reached

2680
01:47:52,159 --> 01:47:53,840
from this limb

2681
01:47:53,840 --> 01:47:55,280
according to the bottleneck structures

2682
01:47:55,280 --> 01:47:57,280
so this tells us that only these flows

2683
01:47:57,280 --> 01:47:59,199
here which are reachable that they have

2684
01:47:59,199 --> 01:48:01,040
a path

2685
01:48:01,040 --> 01:48:02,880
will be affected by such perturbations

2686
01:48:02,880 --> 01:48:04,080
but these flows will not be affected

2687
01:48:04,080 --> 01:48:05,520
because they i cannot go from link two

2688
01:48:05,520 --> 01:48:06,880
to flow one there is no no path it's

2689
01:48:06,880 --> 01:48:09,679
broken here and so on so first tells us

2690
01:48:09,679 --> 01:48:11,760
how things are interconnected

2691
01:48:11,760 --> 01:48:12,800
um

2692
01:48:12,800 --> 01:48:14,159
the same applies to flows if there is a

2693
01:48:14,159 --> 01:48:15,840
perturbation on a flow if i tactic shape

2694
01:48:15,840 --> 01:48:17,360
or flow that's going to create a ripple

2695
01:48:17,360 --> 01:48:19,840
effect on the network uh and it tells us

2696
01:48:19,840 --> 01:48:22,560
how it propagates basically so

2697
01:48:22,560 --> 01:48:24,480
so far we've been talking about the

2698
01:48:24,480 --> 01:48:26,159
the sort of the quality the quality of

2699
01:48:26,159 --> 01:48:28,800
the qualitative aspects of the problem

2700
01:48:28,800 --> 01:48:30,880
but the other element is that bottleneck

2701
01:48:30,880 --> 01:48:32,719
structures are actually computational

2702
01:48:32,719 --> 01:48:34,880
graphs themselves they cannot we can

2703
01:48:34,880 --> 01:48:36,719
also use them to compute the magnitude

2704
01:48:36,719 --> 01:48:37,840
of change

2705
01:48:37,840 --> 01:48:40,239
uh if i if i have a perturbation i can

2706
01:48:40,239 --> 01:48:42,800
quantify how much the change is uh how

2707
01:48:42,800 --> 01:48:44,400
much is that going to induce a change on

2708
01:48:44,400 --> 01:48:47,040
a flow basically and so what is the

2709
01:48:47,040 --> 01:48:49,040
perturbation perturbation is basically

2710
01:48:49,040 --> 01:48:50,960
taking a derivative on on the system

2711
01:48:50,960 --> 01:48:52,400
right so a small like an infinite

2712
01:48:52,400 --> 01:48:54,719
decimal change on a link or or a flow

2713
01:48:54,719 --> 01:48:56,239
rate that's going to have an effect

2714
01:48:56,239 --> 01:48:57,760
that's like taking a derivative so once

2715
01:48:57,760 --> 01:48:59,280
we have a tool that allows us to compute

2716
01:48:59,280 --> 01:49:00,480
derivatives

2717
01:49:00,480 --> 01:49:02,480
that is a tool to help us optimize

2718
01:49:02,480 --> 01:49:04,080
optimize application performance and

2719
01:49:04,080 --> 01:49:05,920
that's the connection with alto well

2720
01:49:05,920 --> 01:49:08,400
microstructures we think that can be a

2721
01:49:08,400 --> 01:49:09,600
good way to summarize the state of the

2722
01:49:09,600 --> 01:49:12,080
network and empower applications to make

2723
01:49:12,080 --> 01:49:13,040
this

2724
01:49:13,040 --> 01:49:14,960
you know figure out how to do better

2725
01:49:14,960 --> 01:49:16,800
routing how to do better

2726
01:49:16,800 --> 01:49:18,639
flow uh traffic shaping or scaling rate

2727
01:49:18,639 --> 01:49:20,480
limiting for instance for xr

2728
01:49:20,480 --> 01:49:21,920
applications i mean the reality that you

2729
01:49:21,920 --> 01:49:23,840
need to sort of encode the rate of your

2730
01:49:23,840 --> 01:49:25,360
your sender according to the

2731
01:49:25,360 --> 01:49:28,480
multi-domain uh uh you know available

2732
01:49:28,480 --> 01:49:30,560
bandwidth sort of uh you could actually

2733
01:49:30,560 --> 01:49:32,239
use this kind of um

2734
01:49:32,239 --> 01:49:34,480
um framework so

2735
01:49:34,480 --> 01:49:35,840
i'm not gonna go into this but it's a

2736
01:49:35,840 --> 01:49:37,760
tool to also quantify quantify these

2737
01:49:37,760 --> 01:49:40,480
changes and compute derivatives

2738
01:49:40,480 --> 01:49:43,360
so um yeah so anyway this notion that

2739
01:49:43,360 --> 01:49:45,199
can a butterfly in mexico grade a

2740
01:49:45,199 --> 01:49:47,040
tornado in asia of course the answer is

2741
01:49:47,040 --> 01:49:49,520
no but everything is interrelated and

2742
01:49:49,520 --> 01:49:50,960
baldnecker structures tells us how about

2743
01:49:50,960 --> 01:49:52,080
the you know what's the effect of a

2744
01:49:52,080 --> 01:49:53,360
butterfly

2745
01:49:53,360 --> 01:49:56,000
flapping its wings in mexico

2746
01:49:56,000 --> 01:49:58,320
in china say for instance so

2747
01:49:58,320 --> 01:49:59,199
uh

2748
01:49:59,199 --> 01:50:00,800
yeah i'm actually gonna skip through

2749
01:50:00,800 --> 01:50:02,239
this yeah you know the slide deck is

2750
01:50:02,239 --> 01:50:03,199
there

2751
01:50:03,199 --> 01:50:04,639
uh

2752
01:50:04,639 --> 01:50:06,159
and then it's just gonna sort of jump

2753
01:50:06,159 --> 01:50:08,480
into

2754
01:50:08,960 --> 01:50:10,560
yeah so this this just reflects the idea

2755
01:50:10,560 --> 01:50:11,599
that you can actually compute what we

2756
01:50:11,599 --> 01:50:13,679
call gradients or derivatives uh using

2757
01:50:13,679 --> 01:50:15,520
the vulnerable structure and the bone

2758
01:50:15,520 --> 01:50:17,199
maker structure is think of it as a

2759
01:50:17,199 --> 01:50:19,280
computational graph so one of the values

2760
01:50:19,280 --> 01:50:20,960
is that um this allows us to do these

2761
01:50:20,960 --> 01:50:22,880
calculations very efficiently

2762
01:50:22,880 --> 01:50:24,560
uh because

2763
01:50:24,560 --> 01:50:26,560
these are delta calculations on a graph

2764
01:50:26,560 --> 01:50:27,520
so if you're trying to solve these

2765
01:50:27,520 --> 01:50:29,280
problems using lp

2766
01:50:29,280 --> 01:50:31,119
rapidly they are not scalable because

2767
01:50:31,119 --> 01:50:32,400
you have millions of flows and so on so

2768
01:50:32,400 --> 01:50:33,760
it's hard

2769
01:50:33,760 --> 01:50:35,040
but these kind of calculations you can

2770
01:50:35,040 --> 01:50:37,040
actually do two or three orders of many

2771
01:50:37,040 --> 01:50:39,119
faster using these these techniques

2772
01:50:39,119 --> 01:50:41,199
and uh so it's not only that just

2773
01:50:41,199 --> 01:50:43,280
quantify qualify but also the speed that

2774
01:50:43,280 --> 01:50:44,480
we can do these calculations and we're

2775
01:50:44,480 --> 01:50:46,400
looking at sort of doing this kind of

2776
01:50:46,400 --> 01:50:48,880
kind of um analysis in many cases uh

2777
01:50:48,880 --> 01:50:52,599
sort of near real-time

2778
01:50:53,440 --> 01:50:54,960
okay so

2779
01:50:54,960 --> 01:50:57,440
i'm gonna skip through these uh

2780
01:50:57,440 --> 01:50:59,760
but um you know types of perturbations

2781
01:50:59,760 --> 01:51:01,440
so perturbations are derivatives

2782
01:51:01,440 --> 01:51:02,880
basically so

2783
01:51:02,880 --> 01:51:05,199
um and um

2784
01:51:05,199 --> 01:51:07,280
and so we can you know we can compute

2785
01:51:07,280 --> 01:51:08,960
many different kinds of perturbations

2786
01:51:08,960 --> 01:51:11,119
and think of them as derivatives let me

2787
01:51:11,119 --> 01:51:13,840
actually skip through this and just uh

2788
01:51:13,840 --> 01:51:15,119
jump into

2789
01:51:15,119 --> 01:51:19,119
the outdoor use cases so uh

2790
01:51:19,119 --> 01:51:20,639
you know we have this sort of tree we

2791
01:51:20,639 --> 01:51:22,400
realize that bottom line structures you

2792
01:51:22,400 --> 01:51:23,199
know

2793
01:51:23,199 --> 01:51:24,719
they are sort of a

2794
01:51:24,719 --> 01:51:26,320
foundational element if you will and so

2795
01:51:26,320 --> 01:51:27,599
that's what through the research we

2796
01:51:27,599 --> 01:51:28,719
realized that you know there are

2797
01:51:28,719 --> 01:51:30,159
potentially many applications you could

2798
01:51:30,159 --> 01:51:32,000
use them network design traffic

2799
01:51:32,000 --> 01:51:33,040
engineering

2800
01:51:33,040 --> 01:51:35,199
ai even because bonding structures are a

2801
01:51:35,199 --> 01:51:36,960
computational graph and neural networks

2802
01:51:36,960 --> 01:51:38,159
are computational graphs too so you

2803
01:51:38,159 --> 01:51:40,239
could think of fibonacci structures as a

2804
01:51:40,239 --> 01:51:42,239
as a neural network itself so

2805
01:51:42,239 --> 01:51:44,800
uh and but the point about sort of the

2806
01:51:44,800 --> 01:51:46,800
the work here is also how does this get

2807
01:51:46,800 --> 01:51:48,719
connected um we think that there's a

2808
01:51:48,719 --> 01:51:50,880
strong connection with alto thanks to

2809
01:51:50,880 --> 01:51:54,239
again uh richard for connecting uh

2810
01:51:54,239 --> 01:51:56,719
and also but then also throughout this

2811
01:51:56,719 --> 01:51:58,480
week here participating you can see that

2812
01:51:58,480 --> 01:52:00,080
in many different working groups there

2813
01:52:00,080 --> 01:52:02,320
are potential connections uh basically

2814
01:52:02,320 --> 01:52:04,639
so i listed some of them here uh but

2815
01:52:04,639 --> 01:52:06,080
we're still exploring and we you know we

2816
01:52:06,080 --> 01:52:07,840
look forward starting from from the

2817
01:52:07,840 --> 01:52:09,280
output to see how we could explore

2818
01:52:09,280 --> 01:52:11,679
potential uh uh you know cross-working

2819
01:52:11,679 --> 01:52:15,040
group collaborations

2820
01:52:15,520 --> 01:52:17,199
yeah use cases you'll have you'll have

2821
01:52:17,199 --> 01:52:18,960
them in in the in the eye draft

2822
01:52:18,960 --> 01:52:21,599
basically so you want to look at them

2823
01:52:21,599 --> 01:52:22,560
but um

2824
01:52:22,560 --> 01:52:23,679
and then what i'm going to do is just

2825
01:52:23,679 --> 01:52:25,760
i'm going to pick on on one of these use

2826
01:52:25,760 --> 01:52:27,440
cases

2827
01:52:27,440 --> 01:52:28,800
optimize your writing and congestion

2828
01:52:28,800 --> 01:52:31,280
control and for this one we have a use

2829
01:52:31,280 --> 01:52:33,119
case what we do here in the in the eye

2830
01:52:33,119 --> 01:52:34,719
draft is actually we take an arbitrary

2831
01:52:34,719 --> 01:52:36,639
topology we actually choose

2832
01:52:36,639 --> 01:52:39,199
the b4 topology google's d4 topology so

2833
01:52:39,199 --> 01:52:40,400
this is actually

2834
01:52:40,400 --> 01:52:43,280
uh back from 2013 sitcom paper so it's a

2835
01:52:43,280 --> 01:52:44,880
simplified now of course it has many

2836
01:52:44,880 --> 01:52:46,239
more data centers

2837
01:52:46,239 --> 01:52:47,760
but um and then

2838
01:52:47,760 --> 01:52:50,320
uh i'm gonna do i'm gonna just show you

2839
01:52:50,320 --> 01:52:52,480
the more sort of human readable version

2840
01:52:52,480 --> 01:52:53,760
of that slide

2841
01:52:53,760 --> 01:52:55,280
so this is a

2842
01:52:55,280 --> 01:52:56,239
the

2843
01:52:56,239 --> 01:52:57,840
subset i guess of the google's before

2844
01:52:57,840 --> 01:52:58,800
network

2845
01:52:58,800 --> 01:53:01,520
with links uh across the globe and then

2846
01:53:01,520 --> 01:53:02,639
we're going to compute the bond mecha

2847
01:53:02,639 --> 01:53:05,440
structure of this network

2848
01:53:05,440 --> 01:53:07,520
and what you get is uh this one so this

2849
01:53:07,520 --> 01:53:08,719
is in the i draft but i'm going to make

2850
01:53:08,719 --> 01:53:10,560
this more user-friendly what assumption

2851
01:53:10,560 --> 01:53:12,639
here is that i'm gonna make some some

2852
01:53:12,639 --> 01:53:14,639
kind of a random assumptions about ad

2853
01:53:14,639 --> 01:53:15,599
hoc

2854
01:53:15,599 --> 01:53:17,360
uh that everything has 10 gigabits per

2855
01:53:17,360 --> 01:53:18,800
second capacity

2856
01:53:18,800 --> 01:53:21,440
and that uh the the the two links

2857
01:53:21,440 --> 01:53:22,800
between the terms and landing links have

2858
01:53:22,800 --> 01:53:25,119
25 units per second and i'm just gonna

2859
01:53:25,119 --> 01:53:27,280
make a very simple use case which is

2860
01:53:27,280 --> 01:53:29,840
every the pair of data centers from us

2861
01:53:29,840 --> 01:53:32,800
and and europe are connected both ways

2862
01:53:32,800 --> 01:53:34,960
okay in fact you know before runs is a

2863
01:53:34,960 --> 01:53:36,800
sort of multi-path network but and in

2864
01:53:36,800 --> 01:53:37,920
this case we're going to assume a single

2865
01:53:37,920 --> 01:53:38,719
path

2866
01:53:38,719 --> 01:53:39,840
so you can actually complete the bottom

2867
01:53:39,840 --> 01:53:42,639
like a structure of that

2868
01:53:42,639 --> 01:53:44,639
and this is what you get then you can

2869
01:53:44,639 --> 01:53:46,800
start reasoning okay if i want to do a

2870
01:53:46,800 --> 01:53:49,840
large large dataset transfer uh you know

2871
01:53:49,840 --> 01:53:52,080
which path should i be using

2872
01:53:52,080 --> 01:53:53,679
and so for instance here in the bottom

2873
01:53:53,679 --> 01:53:55,599
structure we see that uh you know the

2874
01:53:55,599 --> 01:53:57,040
turns and landing links are at this

2875
01:53:57,040 --> 01:53:59,199
level the bottom line structure

2876
01:53:59,199 --> 01:54:01,840
and uh and these two links are here

2877
01:54:01,840 --> 01:54:03,840
i i highlighted these two links uh

2878
01:54:03,840 --> 01:54:05,679
because um they are sort of relevant

2879
01:54:05,679 --> 01:54:07,440
there's this property that the

2880
01:54:07,440 --> 01:54:09,599
the the links at the top get less

2881
01:54:09,599 --> 01:54:11,679
bandwidth so these are actually the

2882
01:54:11,679 --> 01:54:14,000
links that are sort of more bottlenecked

2883
01:54:14,000 --> 01:54:15,599
there's a notion of

2884
01:54:15,599 --> 01:54:17,679
being more influential because

2885
01:54:17,679 --> 01:54:18,800
these links actually influence the

2886
01:54:18,800 --> 01:54:20,880
performance of the whole network so that

2887
01:54:20,880 --> 01:54:23,040
they tend to be more relevant

2888
01:54:23,040 --> 01:54:24,320
and then what i'm going to do i'm

2889
01:54:24,320 --> 01:54:25,119
actually going to skip through the

2890
01:54:25,119 --> 01:54:26,560
interest of time but basically here what

2891
01:54:26,560 --> 01:54:28,239
we do in this use case is i need to

2892
01:54:28,239 --> 01:54:30,080
transfer data from this point to this

2893
01:54:30,080 --> 01:54:32,080
point i have multiple choices and i'm

2894
01:54:32,080 --> 01:54:34,239
going to use the bonding structure to

2895
01:54:34,239 --> 01:54:36,560
to uh to predict the performance of the

2896
01:54:36,560 --> 01:54:38,400
raid this is sort of like solving the

2897
01:54:38,400 --> 01:54:39,840
joint routing and congestion control

2898
01:54:39,840 --> 01:54:41,679
problem together because what balance

2899
01:54:41,679 --> 01:54:43,119
structures do is model the congestion

2900
01:54:43,119 --> 01:54:44,800
control algorithm and tell you if i

2901
01:54:44,800 --> 01:54:47,040
place a flow on this network according

2902
01:54:47,040 --> 01:54:48,639
to this path that's going to create a

2903
01:54:48,639 --> 01:54:50,000
ripple effect and i can compute what

2904
01:54:50,000 --> 01:54:51,920
congestion control will do and get you

2905
01:54:51,920 --> 01:54:54,159
that rate basically after the deploy

2906
01:54:54,159 --> 01:54:55,920
after you place the flow

2907
01:54:55,920 --> 01:54:58,000
and if you do that then basically in

2908
01:54:58,000 --> 01:54:59,840
this case we showed that

2909
01:54:59,840 --> 01:55:00,960
it's actually better to not use the

2910
01:55:00,960 --> 01:55:02,480
shortest path that you're going to get

2911
01:55:02,480 --> 01:55:05,280
more bandwidth if you use

2912
01:55:05,280 --> 01:55:06,880
the non-shortest path

2913
01:55:06,880 --> 01:55:09,760
and uh and so uh sometimes some of these

2914
01:55:09,760 --> 01:55:12,719
uh outcomes are non-intuitive basically

2915
01:55:12,719 --> 01:55:14,080
and you can also

2916
01:55:14,080 --> 01:55:16,880
reason about them

2917
01:55:17,280 --> 01:55:19,840
so

2918
01:55:19,840 --> 01:55:22,639
yeah we have a few requirements uh that

2919
01:55:22,639 --> 01:55:24,560
we start sort of um

2920
01:55:24,560 --> 01:55:26,719
uh discuss uh in the group or through

2921
01:55:26,719 --> 01:55:28,000
the draft we're starting to discuss it

2922
01:55:28,000 --> 01:55:30,080
this is very preliminary i should say

2923
01:55:30,080 --> 01:55:32,719
uh the the initial requirements um are

2924
01:55:32,719 --> 01:55:34,239
in the draft so maybe we don't have to

2925
01:55:34,239 --> 01:55:36,560
actually maybe time because uh

2926
01:55:36,560 --> 01:55:38,639
to do that but they are in in the in the

2927
01:55:38,639 --> 01:55:40,960
draft they are very intuitive at this

2928
01:55:40,960 --> 01:55:42,400
point i think

2929
01:55:42,400 --> 01:55:43,440
um

2930
01:55:43,440 --> 01:55:45,119
and the requirements are actually

2931
01:55:45,119 --> 01:55:47,040
structuring in four groups

2932
01:55:47,040 --> 01:55:49,520
you know one is the bsgs abstraction you

2933
01:55:49,520 --> 01:55:50,639
know do we want to create an abstraction

2934
01:55:50,639 --> 01:55:51,920
for bond like structures that's an

2935
01:55:51,920 --> 01:55:54,159
object basically that would go into

2936
01:55:54,159 --> 01:55:55,920
the specification

2937
01:55:55,920 --> 01:55:58,000
uh requirements number two uh

2938
01:55:58,000 --> 01:55:59,440
information received from the network so

2939
01:55:59,440 --> 01:56:00,560
what kind of information we need to

2940
01:56:00,560 --> 01:56:01,679
extract from the network in order to

2941
01:56:01,679 --> 01:56:04,480
compute the wellness structure

2942
01:56:04,480 --> 01:56:06,880
requirements regarding regarding the

2943
01:56:06,880 --> 01:56:07,920
information passed through the

2944
01:56:07,920 --> 01:56:09,760
application so you can think that one is

2945
01:56:09,760 --> 01:56:10,639
the southbound the other is the

2946
01:56:10,639 --> 01:56:12,560
northbound this would be the northbound

2947
01:56:12,560 --> 01:56:13,760
what information given about

2948
01:56:13,760 --> 01:56:15,679
megastructure what information we pass

2949
01:56:15,679 --> 01:56:17,679
through to the application

2950
01:56:17,679 --> 01:56:18,880
do we want to pass the whole volume like

2951
01:56:18,880 --> 01:56:20,480
structure as a compact way to represent

2952
01:56:20,480 --> 01:56:22,560
the state or maybe

2953
01:56:22,560 --> 01:56:24,960
some elements of it and then features

2954
01:56:24,960 --> 01:56:26,400
features that would go into this

2955
01:56:26,400 --> 01:56:28,320
potential bonding structure graph

2956
01:56:28,320 --> 01:56:30,000
service uh

2957
01:56:30,000 --> 01:56:32,400
and some some some initial sort of uh

2958
01:56:32,400 --> 01:56:34,159
debate or discussion about what features

2959
01:56:34,159 --> 01:56:35,360
we we

2960
01:56:35,360 --> 01:56:37,119
want to put into

2961
01:56:37,119 --> 01:56:39,119
you know for consideration basically so

2962
01:56:39,119 --> 01:56:41,440
you know welcome any feedback at this

2963
01:56:41,440 --> 01:56:43,920
point we're just uh discussing this

2964
01:56:43,920 --> 01:56:46,560
understanding what's the connection and

2965
01:56:46,560 --> 01:56:48,400
and trying to get some coaching guidance

2966
01:56:48,400 --> 01:56:50,880
on on the steps here uh yeah looking

2967
01:56:50,880 --> 01:56:54,560
forward to that conversation

2968
01:56:54,800 --> 01:56:56,800
thanks jody actually have the time limit

2969
01:56:56,800 --> 01:56:59,119
we don't have time to take a question

2970
01:56:59,119 --> 01:57:01,440
maybe we can uh take it to take it to

2971
01:57:01,440 --> 01:57:03,599
the list you can you know introduce your

2972
01:57:03,599 --> 01:57:06,000
uh draft on the list and we can keep on

2973
01:57:06,000 --> 01:57:09,280
uh discussing on the auto weekly webex

2974
01:57:09,280 --> 01:57:11,840
meeting

2975
01:57:12,159 --> 01:57:14,000
next let's move to

2976
01:57:14,000 --> 01:57:17,000
luis

2977
01:57:25,360 --> 01:57:27,599
maybe you have to

2978
01:57:27,599 --> 01:57:30,599
yeah

2979
01:57:51,760 --> 01:57:54,639
hello this is andreas from telefonica uh

2980
01:57:54,639 --> 01:57:58,679
yeah next slide please

2981
01:58:07,119 --> 01:58:09,199
yeah well the idea of this presentation

2982
01:58:09,199 --> 01:58:11,199
is simply to comment about the computer

2983
01:58:11,199 --> 01:58:13,280
awareness capabilities and how uh what

2984
01:58:13,280 --> 01:58:16,159
could be the role of alton in this story

2985
01:58:16,159 --> 01:58:18,880
so a content service provider for sure

2986
01:58:18,880 --> 01:58:20,400
from a long time ago but now also

2987
01:58:20,400 --> 01:58:23,199
operators are developing the networks by

2988
01:58:23,199 --> 01:58:25,040
adding compute capabilities spread and

2989
01:58:25,040 --> 01:58:27,599
disability across the network this is

2990
01:58:27,599 --> 01:58:30,000
not necessarily related to edge for sure

2991
01:58:30,000 --> 01:58:32,159
the edge is there but we could talk in

2992
01:58:32,159 --> 01:58:33,360
general terms about computing

2993
01:58:33,360 --> 01:58:35,119
capabilities so cloud they more or less

2994
01:58:35,119 --> 01:58:36,960
centralized data centers and for sure

2995
01:58:36,960 --> 01:58:39,119
also edge computing so it seems to be

2996
01:58:39,119 --> 01:58:41,040
interesting to know about where and how

2997
01:58:41,040 --> 01:58:42,560
these computer capabilities are really

2998
01:58:42,560 --> 01:58:45,119
connected and also to extract from them

2999
01:58:45,119 --> 01:58:47,599
also even metrics so to understand to

3000
01:58:47,599 --> 01:58:48,960
what would be the latency what would be

3001
01:58:48,960 --> 01:58:50,400
the throughput that we could have for

3002
01:58:50,400 --> 01:58:51,840
reaching whatever

3003
01:58:51,840 --> 01:58:53,920
amount of cpus and status in the in the

3004
01:58:53,920 --> 01:58:54,960
cloud path

3005
01:58:54,960 --> 01:58:56,560
this is clear for the resources but also

3006
01:58:56,560 --> 01:58:58,159
this could be an augmented for

3007
01:58:58,159 --> 01:59:00,000
connecting a service function so we have

3008
01:59:00,000 --> 01:59:02,480
a notion of where we can find

3009
01:59:02,480 --> 01:59:04,560
a gateway or where we can deploy a

3010
01:59:04,560 --> 01:59:06,719
gateway or whatever other

3011
01:59:06,719 --> 01:59:08,880
function that we could consider so there

3012
01:59:08,880 --> 01:59:10,239
is some space for optimization on

3013
01:59:10,239 --> 01:59:12,320
service delivery management and and

3014
01:59:12,320 --> 01:59:14,800
planning by combining the information of

3015
01:59:14,800 --> 01:59:16,239
compute and and the work you know

3016
01:59:16,239 --> 01:59:18,000
together so breaking those silos that

3017
01:59:18,000 --> 01:59:20,320
are today is how they couple and

3018
01:59:20,320 --> 01:59:22,800
permitting for decisions uh for placing

3019
01:59:22,800 --> 01:59:25,040
of functions so for simply connecting

3020
01:59:25,040 --> 01:59:28,400
and accessing resources so next please

3021
01:59:28,400 --> 01:59:30,560
so yeah for just for finishing this week

3022
01:59:30,560 --> 01:59:31,840
but there was a

3023
01:59:31,840 --> 01:59:34,719
uh both um named tan how about computer

3024
01:59:34,719 --> 01:59:36,639
i want to work in that precisely was

3025
01:59:36,639 --> 01:59:38,239
that they're trying to address this same

3026
01:59:38,239 --> 01:59:40,159
problem space but from the routing

3027
01:59:40,159 --> 01:59:42,400
perspective so trying to define routing

3028
01:59:42,400 --> 01:59:44,400
solutions for for that

3029
01:59:44,400 --> 01:59:46,239
we consider that alto can can address

3030
01:59:46,239 --> 01:59:47,760
the same problem in space but from a

3031
01:59:47,760 --> 01:59:49,199
different engineering perspective from

3032
01:59:49,199 --> 01:59:51,119
an ethereum

3033
01:59:51,119 --> 01:59:53,280
point of view or angle so the idea would

3034
01:59:53,280 --> 01:59:55,599
be to have alto as a

3035
01:59:55,599 --> 01:59:57,520
element capable of exposing combined

3036
01:59:57,520 --> 01:59:59,280
information between network and and

3037
01:59:59,280 --> 02:00:01,199
compute capabilities so adding metric

3038
02:00:01,199 --> 02:00:03,920
resources topology view and reachability

3039
02:00:03,920 --> 02:00:06,159
and so on so far in fact there are two

3040
02:00:06,159 --> 02:00:08,880
existing pieces of work on this subject

3041
02:00:08,880 --> 02:00:10,639
i put the the

3042
02:00:10,639 --> 02:00:12,960
draft and just simply well the the final

3043
02:00:12,960 --> 02:00:15,040
message for this the goal that we were

3044
02:00:15,040 --> 02:00:16,880
considering with this presentation would

3045
02:00:16,880 --> 02:00:19,360
be to explore the how

3046
02:00:19,360 --> 02:00:21,360
alto can communicate contribute on this

3047
02:00:21,360 --> 02:00:23,280
so uh to define a solution on the to

3048
02:00:23,280 --> 02:00:25,520
this problem space trying to propose

3049
02:00:25,520 --> 02:00:27,599
this as a subject for future working

3050
02:00:27,599 --> 02:00:29,679
group recharging and with this uh with

3051
02:00:29,679 --> 02:00:33,119
that i finished so thank you

3052
02:00:33,360 --> 02:00:36,159
okay thanks uh luis actually a good

3053
02:00:36,159 --> 02:00:37,040
topic

3054
02:00:37,040 --> 02:00:39,199
actually can actually i think

3055
02:00:39,199 --> 02:00:40,560
uh

3056
02:00:40,560 --> 02:00:42,480
has a lot of

3057
02:00:42,480 --> 02:00:44,880
you know uh you know for also actually

3058
02:00:44,880 --> 02:00:47,280
designed for the uh the sitting

3059
02:00:47,280 --> 02:00:49,679
application actually you know uh

3060
02:00:49,679 --> 02:00:51,520
for computer awareness working actually

3061
02:00:51,520 --> 02:00:53,199
you know very similar to the cd

3062
02:00:53,199 --> 02:00:55,840
application so i i think also can be the

3063
02:00:55,840 --> 02:00:57,440
potential solution for

3064
02:00:57,440 --> 02:00:59,679
uh computer aware networking

3065
02:00:59,679 --> 02:01:01,760
so that that's a you know keep on

3066
02:01:01,760 --> 02:01:03,599
discussing this and cooking your draft

3067
02:01:03,599 --> 02:01:04,560
and

3068
02:01:04,560 --> 02:01:06,880
for audience if you have any uh imported

3069
02:01:06,880 --> 02:01:09,840
to this and uh feel free to uh

3070
02:01:09,840 --> 02:01:11,280
uh

3071
02:01:11,280 --> 02:01:14,000
join on the menace or contact with luis

3072
02:01:14,000 --> 02:01:16,080
and as a

3073
02:01:16,080 --> 02:01:18,719
prevalent for the cairn

3074
02:01:18,719 --> 02:01:19,599
and

3075
02:01:19,599 --> 02:01:22,560
with this actually we

3076
02:01:22,560 --> 02:01:24,239
we actually at the end of the meeting

3077
02:01:24,239 --> 02:01:25,280
and

3078
02:01:25,280 --> 02:01:26,480
so uh

3079
02:01:26,480 --> 02:01:29,360
matt do you have any last words or

3080
02:01:29,360 --> 02:01:31,679
nothing

3081
02:01:31,679 --> 02:01:33,040
no

3082
02:01:33,040 --> 02:01:36,239
no it comes from my side

3083
02:01:37,760 --> 02:01:39,760
actually yeah yeah it's not here but i'd

3084
02:01:39,760 --> 02:01:41,840
like to thank the yen to serve the

3085
02:01:41,840 --> 02:01:44,639
author and uh he will it i'll go in the

3086
02:01:44,639 --> 02:01:46,639
auto chair

3087
02:01:46,639 --> 02:01:51,199
yeah so thanks of all and and

3088
02:01:51,199 --> 02:01:55,638
that's a closed meeting

3089
02:02:12,960 --> 02:02:16,199
thank you

3090
02:02:18,960 --> 02:02:21,960
okay

3091
02:02:32,960 --> 02:02:35,960
out

