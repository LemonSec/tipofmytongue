1
00:00:22,080 --> 00:00:25,080
today

2
00:00:30,640 --> 00:00:34,320
i think we can get started

3
00:00:34,480 --> 00:00:37,280
sound good francesca

4
00:00:37,280 --> 00:00:39,040
okay cool

5
00:00:39,040 --> 00:00:41,200
well hi everyone welcome to the ohio

6
00:00:41,200 --> 00:00:42,840
session at

7
00:00:42,840 --> 00:00:44,399
ietf113

8
00:00:44,399 --> 00:00:47,120
i'm siobhan and i'm joined by richard

9
00:00:47,120 --> 00:00:49,920
bronze and francesca is our eyes and

10
00:00:49,920 --> 00:00:52,640
ears on the ground thank you for that

11
00:00:52,640 --> 00:00:53,920
um

12
00:00:53,920 --> 00:00:55,840
and we are still looking for a note

13
00:00:55,840 --> 00:00:56,800
taker

14
00:00:56,800 --> 00:00:58,480
so if anyone

15
00:00:58,480 --> 00:01:00,399
would be willing to volunteer that would

16
00:01:00,399 --> 00:01:03,280
be fantastic

17
00:01:07,200 --> 00:01:10,840
anyone anyone

18
00:01:16,400 --> 00:01:19,360
face for the link

19
00:01:21,360 --> 00:01:22,960
i think yeah i think richard also said

20
00:01:22,960 --> 00:01:26,720
that you can keep an eye on the minutes

21
00:01:26,720 --> 00:01:29,119
as well

22
00:01:29,280 --> 00:01:31,119
so worst case we could do that but it

23
00:01:31,119 --> 00:01:32,320
would be really nice if someone could

24
00:01:32,320 --> 00:01:35,559
just volunteer

25
00:01:42,000 --> 00:01:44,799
fantastic thank you

26
00:01:44,799 --> 00:01:47,600
so we have a note taker um

27
00:01:47,600 --> 00:01:50,159
yeah and if you have anything

28
00:01:50,159 --> 00:01:51,280
that

29
00:01:51,280 --> 00:01:52,880
um you would like to

30
00:01:52,880 --> 00:01:55,200
say the mic just prepend that with mike

31
00:01:55,200 --> 00:01:56,880
and you can

32
00:01:56,880 --> 00:01:59,759
get that sorted out

33
00:01:59,759 --> 00:02:02,240
this is the itf note well please go

34
00:02:02,240 --> 00:02:03,520
through this

35
00:02:03,520 --> 00:02:05,119
whether it's your first idf meeting or

36
00:02:05,119 --> 00:02:08,560
your 113th it's always good to refresh

37
00:02:08,560 --> 00:02:11,119
your memory

38
00:02:11,520 --> 00:02:14,239
um iatf 113 is

39
00:02:14,239 --> 00:02:16,879
hybrid so if you're in person please

40
00:02:16,879 --> 00:02:18,480
please make sure to sign into the

41
00:02:18,480 --> 00:02:20,000
session using

42
00:02:20,000 --> 00:02:22,400
meet echo online tool

43
00:02:22,400 --> 00:02:24,720
um and please please use

44
00:02:24,720 --> 00:02:28,080
uh we are going to join the queue um

45
00:02:28,080 --> 00:02:30,480
it is important for queueing and all

46
00:02:30,480 --> 00:02:34,080
queueing is done through medico

47
00:02:34,080 --> 00:02:37,840
um all right i think

48
00:02:37,840 --> 00:02:42,319
we can get started we uh we do have

49
00:02:42,319 --> 00:02:44,720
quite a bit of time um so i'm hoping we

50
00:02:44,720 --> 00:02:46,879
can get some good discussion on

51
00:02:46,879 --> 00:02:48,000
and

52
00:02:48,000 --> 00:02:49,760
first up

53
00:02:49,760 --> 00:02:51,760
we'll have martin and then

54
00:02:51,760 --> 00:02:53,360
there will be

55
00:02:53,360 --> 00:02:54,400
um

56
00:02:54,400 --> 00:02:57,280
some discussion about issues and updates

57
00:02:57,280 --> 00:02:58,959
since last meeting and then we have two

58
00:02:58,959 --> 00:03:00,480
brand new drafts

59
00:03:00,480 --> 00:03:02,879
being presented by tommy and hero

60
00:03:02,879 --> 00:03:06,400
so if martin i think you have some sites

61
00:03:06,400 --> 00:03:08,319
mine's coming up

62
00:03:08,319 --> 00:03:10,879
perfect

63
00:03:14,159 --> 00:03:17,959
i think i have to

64
00:03:18,560 --> 00:03:20,640
let's see how this works

65
00:03:20,640 --> 00:03:22,159
i'm going to do the uh hall of mirrors

66
00:03:22,159 --> 00:03:24,159
thing for a moment

67
00:03:24,159 --> 00:03:28,079
because i'm going to be jumping in to

68
00:03:28,319 --> 00:03:31,040
uh yes i want to share my screen that's

69
00:03:31,040 --> 00:03:32,959
the crazy

70
00:03:32,959 --> 00:03:35,599
crazy thing

71
00:03:35,599 --> 00:03:37,360
uh yeah

72
00:03:37,360 --> 00:03:39,599
okay all the mirrors

73
00:03:39,599 --> 00:03:42,480
and now slides

74
00:03:43,200 --> 00:03:44,840
so

75
00:03:44,840 --> 00:03:47,760
um this is

76
00:03:47,760 --> 00:03:48,640
uh

77
00:03:48,640 --> 00:03:50,400
just a brief update on what we're doing

78
00:03:50,400 --> 00:03:51,840
and i'm going to go through some of the

79
00:03:51,840 --> 00:03:53,599
issues here that we've got

80
00:03:53,599 --> 00:03:54,400
um

81
00:03:54,400 --> 00:03:56,000
since the last meeting there have been a

82
00:03:56,000 --> 00:03:59,040
few issues raised in the last hour or so

83
00:03:59,040 --> 00:04:00,239
obviously i won't

84
00:04:00,239 --> 00:04:01,920
go into those ones but

85
00:04:01,920 --> 00:04:04,480
i will hopefully get through all of the

86
00:04:04,480 --> 00:04:07,519
important things that we identified

87
00:04:07,519 --> 00:04:10,319
this is every open issue that existed as

88
00:04:10,319 --> 00:04:13,119
of a week ago

89
00:04:13,680 --> 00:04:15,840
so

90
00:04:17,759 --> 00:04:18,959
option

91
00:04:18,959 --> 00:04:19,918
one

92
00:04:19,918 --> 00:04:22,479
changes in version one uh we've moved

93
00:04:22,479 --> 00:04:25,600
the padding to the binary messages draft

94
00:04:25,600 --> 00:04:26,400
that

95
00:04:26,400 --> 00:04:29,120
is something that i think simplifies the

96
00:04:29,120 --> 00:04:31,440
overall design uh and it makes the

97
00:04:31,440 --> 00:04:32,800
binary messages stuff more useful

98
00:04:32,800 --> 00:04:34,720
generally

99
00:04:34,720 --> 00:04:37,040
we've also made uh changes to the the

100
00:04:37,040 --> 00:04:38,800
labels that we're using for generating

101
00:04:38,800 --> 00:04:39,600
to

102
00:04:39,600 --> 00:04:41,680
extend the exports

103
00:04:41,680 --> 00:04:45,040
those are now um based on the the

104
00:04:45,040 --> 00:04:48,400
content type of the um

105
00:04:48,400 --> 00:04:52,560
of the the content that's enclosed

106
00:04:52,560 --> 00:04:54,160
and there's some text about repurposing

107
00:04:54,160 --> 00:04:55,680
the design that we have here for other

108
00:04:55,680 --> 00:04:56,880
purposes

109
00:04:56,880 --> 00:04:59,120
not that this is a primary goal for us

110
00:04:59,120 --> 00:05:00,960
but it's something that makes a little

111
00:05:00,960 --> 00:05:04,000
bit easier for us to manage

112
00:05:04,000 --> 00:05:05,520
there's some new text on resource

113
00:05:05,520 --> 00:05:06,479
mappings

114
00:05:06,479 --> 00:05:08,080
i think one of our new issues is about

115
00:05:08,080 --> 00:05:09,039
that

116
00:05:09,039 --> 00:05:11,520
and some draft texts on anti-replay that

117
00:05:11,520 --> 00:05:13,280
i'll go through as part of the issues

118
00:05:13,280 --> 00:05:15,440
here

119
00:05:17,199 --> 00:05:19,520
so the first one

120
00:05:19,520 --> 00:05:21,600
of the issues that we're talking about

121
00:05:21,600 --> 00:05:23,520
is

122
00:05:23,520 --> 00:05:26,560
what information the proxy is able to

123
00:05:26,560 --> 00:05:29,440
provide to it to a server when it um

124
00:05:29,440 --> 00:05:32,000
relays messages obviously we want the

125
00:05:32,000 --> 00:05:35,199
proxy to hide a lot of information about

126
00:05:35,199 --> 00:05:37,120
what the client is

127
00:05:37,120 --> 00:05:39,039
who they are and where their requests

128
00:05:39,039 --> 00:05:40,160
are coming from

129
00:05:40,160 --> 00:05:42,479
but there are certain use cases where

130
00:05:42,479 --> 00:05:43,520
um

131
00:05:43,520 --> 00:05:46,160
it might be useful perhaps to have a

132
00:05:46,160 --> 00:05:47,440
proxy

133
00:05:47,440 --> 00:05:48,800
um

134
00:05:48,800 --> 00:05:50,320
provides just a tiny amount of

135
00:05:50,320 --> 00:05:52,639
information

136
00:05:52,639 --> 00:05:54,880
at the moment we're considering one bit

137
00:05:54,880 --> 00:05:56,160
that would allow

138
00:05:56,160 --> 00:05:58,720
proxies to to do shadow banning for

139
00:05:58,720 --> 00:06:00,560
instance that is

140
00:06:00,560 --> 00:06:02,880
identify abusive clients

141
00:06:02,880 --> 00:06:06,639
and allow the request to pass and appear

142
00:06:06,639 --> 00:06:09,199
to be handled correctly but give the

143
00:06:09,199 --> 00:06:10,080
server

144
00:06:10,080 --> 00:06:12,160
a sort of side channel signal that says

145
00:06:12,160 --> 00:06:15,199
hey this this guy's probably a bad actor

146
00:06:15,199 --> 00:06:16,160
you might

147
00:06:16,160 --> 00:06:17,120
want to

148
00:06:17,120 --> 00:06:19,520
de-prioritize or or

149
00:06:19,520 --> 00:06:21,919
respond in a different fashion

150
00:06:21,919 --> 00:06:24,080
there's a pull request uh

151
00:06:24,080 --> 00:06:26,319
we're discussing that i

152
00:06:26,319 --> 00:06:28,240
don't know if we want to talk about that

153
00:06:28,240 --> 00:06:29,520
one just

154
00:06:29,520 --> 00:06:31,759
just now

155
00:06:31,759 --> 00:06:34,400
it's kind of in flight right right now

156
00:06:34,400 --> 00:06:36,720
there's a number of comments

157
00:06:36,720 --> 00:06:38,479
so um

158
00:06:38,479 --> 00:06:39,680
i will

159
00:06:39,680 --> 00:06:42,000
probably

160
00:06:42,000 --> 00:06:44,319
just stick to this uh

161
00:06:44,319 --> 00:06:46,400
one here are there any comments about

162
00:06:46,400 --> 00:06:48,880
this one i'm going to bring this off

163
00:06:48,880 --> 00:06:51,520
full screen

164
00:06:56,639 --> 00:06:59,360
where did you want to go

165
00:07:00,960 --> 00:07:02,960
it's just waiting to be to be called on

166
00:07:02,960 --> 00:07:04,160
um

167
00:07:04,160 --> 00:07:05,680
yeah so i guess

168
00:07:05,680 --> 00:07:08,000
i think my take on this is that actually

169
00:07:08,000 --> 00:07:09,360
like this entire restriction is kind of

170
00:07:09,360 --> 00:07:10,880
misguided um

171
00:07:10,880 --> 00:07:11,759
and

172
00:07:11,759 --> 00:07:12,560
that

173
00:07:12,560 --> 00:07:13,599
there's a number of things that you

174
00:07:13,599 --> 00:07:16,560
might want the proxy to say um um one

175
00:07:16,560 --> 00:07:18,400
one of them is this bit as you indicate

176
00:07:18,400 --> 00:07:21,199
um one of them um i've heard floated is

177
00:07:21,199 --> 00:07:24,479
a um a token of some kind indicating um

178
00:07:24,479 --> 00:07:26,240
you know um

179
00:07:26,240 --> 00:07:27,840
uh you know that there's been some sort

180
00:07:27,840 --> 00:07:29,360
of dial service reputation kind of stuff

181
00:07:29,360 --> 00:07:31,360
on it um you know one thing i've heard

182
00:07:31,360 --> 00:07:34,880
of is geo is rough geo um i certainly

183
00:07:34,880 --> 00:07:37,360
heard suggestions of you know um

184
00:07:37,360 --> 00:07:40,000
of short term uh short term linkages for

185
00:07:40,000 --> 00:07:41,440
um for

186
00:07:41,440 --> 00:07:43,120
ip address you know this is the same

187
00:07:43,120 --> 00:07:44,639
person over or cover a couple of a

188
00:07:44,639 --> 00:07:46,160
couple less messages

189
00:07:46,160 --> 00:07:48,960
um yeah i'm not like a huge fan of these

190
00:07:48,960 --> 00:07:50,879
but i guess my my thermal thesis is

191
00:07:50,879 --> 00:07:52,080
these are all out of scope for this

192
00:07:52,080 --> 00:07:54,400
protocol and that we should simply not

193
00:07:54,400 --> 00:07:56,080
say anything about what you should say

194
00:07:56,080 --> 00:07:56,879
and

195
00:07:56,879 --> 00:08:00,080
um and and leave that to applications um

196
00:08:00,080 --> 00:08:01,199
fundamentally that's i don't know

197
00:08:01,199 --> 00:08:03,120
exactly what what messages are what what

198
00:08:03,120 --> 00:08:05,280
crap is conveyed in that metadata is

199
00:08:05,280 --> 00:08:06,400
really

200
00:08:06,400 --> 00:08:07,680
like for

201
00:08:07,680 --> 00:08:08,479
um

202
00:08:08,479 --> 00:08:11,919
the uh the client and the um the client

203
00:08:11,919 --> 00:08:13,280
in the proxy to like work out for

204
00:08:13,280 --> 00:08:14,800
themselves um

205
00:08:14,800 --> 00:08:17,280
so um and i understand like certainly

206
00:08:17,280 --> 00:08:18,479
like you know that that allows you to

207
00:08:18,479 --> 00:08:20,000
bypass any possible protections being

208
00:08:20,000 --> 00:08:22,000
offered here but like but like you know

209
00:08:22,000 --> 00:08:24,000
this is just like this is like this is

210
00:08:24,000 --> 00:08:27,440
like a 6919

211
00:08:28,479 --> 00:08:30,160
don't do it so i just think it's like

212
00:08:30,160 --> 00:08:31,520
rather than trying to like put that in

213
00:08:31,520 --> 00:08:32,799
the number of language we should like

214
00:08:32,799 --> 00:08:34,479
talk about what um

215
00:08:34,479 --> 00:08:35,599
um

216
00:08:35,599 --> 00:08:36,799
well uh

217
00:08:36,799 --> 00:08:38,240
nick asks we don't know it's being out

218
00:08:38,240 --> 00:08:40,240
of them yeah the point the point is that

219
00:08:40,240 --> 00:08:42,000
like the point is that there would be an

220
00:08:42,000 --> 00:08:43,679
understood policy of what of what the

221
00:08:43,679 --> 00:08:45,440
proxy was doing and not doing and the

222
00:08:45,440 --> 00:08:46,640
user be aware of that at the point they

223
00:08:46,640 --> 00:08:48,000
chose it just entered we're still aware

224
00:08:48,000 --> 00:08:50,320
of anything issues anything here right

225
00:08:50,320 --> 00:08:51,120
um

226
00:08:51,120 --> 00:08:53,120
um i mean like you know the proxy and

227
00:08:53,120 --> 00:08:54,800
the process can just be side channeling

228
00:08:54,800 --> 00:08:55,920
all the information to the server for

229
00:08:55,920 --> 00:08:58,399
once right and so the only question here

230
00:08:58,399 --> 00:09:00,640
is like um um

231
00:09:00,640 --> 00:09:02,480
so i think you know your fundamental

232
00:09:02,480 --> 00:09:05,040
trust in the process

233
00:09:05,360 --> 00:09:07,760
yeah so that speaks to to potentially

234
00:09:07,760 --> 00:09:08,560
saying

235
00:09:08,560 --> 00:09:10,800
um as long as the the

236
00:09:10,800 --> 00:09:12,959
potential uh

237
00:09:12,959 --> 00:09:14,240
range of things that a proxy could

238
00:09:14,240 --> 00:09:16,240
communicate to a server is is known to

239
00:09:16,240 --> 00:09:18,080
the client then the client can use that

240
00:09:18,080 --> 00:09:20,320
as part of this decision to use a proxy

241
00:09:20,320 --> 00:09:21,680
that's what i just said that's my name

242
00:09:21,680 --> 00:09:23,600
and in general maybe we could just make

243
00:09:23,600 --> 00:09:25,680
some have some waffley words about

244
00:09:25,680 --> 00:09:27,760
you know don't include too much

245
00:09:27,760 --> 00:09:30,319
uh chris

246
00:09:30,800 --> 00:09:32,399
yeah yeah i think that's what the the

247
00:09:32,399 --> 00:09:34,640
text in 96 tries to do right now in

248
00:09:34,640 --> 00:09:36,959
particular tries to say that any of this

249
00:09:36,959 --> 00:09:39,200
of this public metadata that the client

250
00:09:39,200 --> 00:09:40,959
and proxy agree upon

251
00:09:40,959 --> 00:09:41,760
uh

252
00:09:41,760 --> 00:09:43,440
as being revealed during the course of

253
00:09:43,440 --> 00:09:44,800
using this proxy

254
00:09:44,800 --> 00:09:45,920
um

255
00:09:45,920 --> 00:09:48,480
is known to the client uh whereas in

256
00:09:48,480 --> 00:09:50,720
contrast what i call private metadata

257
00:09:50,720 --> 00:09:53,040
like this this shadow banning bit where

258
00:09:53,040 --> 00:09:54,959
the client does not necessarily agree to

259
00:09:54,959 --> 00:09:56,959
the presence of that metadata

260
00:09:56,959 --> 00:09:59,839
um that must be strictly bounded the

261
00:09:59,839 --> 00:10:01,760
proxy just shouldn't

262
00:10:01,760 --> 00:10:03,680
add things to the you know client

263
00:10:03,680 --> 00:10:05,120
forward of requests without the client

264
00:10:05,120 --> 00:10:07,120
being aware of it

265
00:10:07,120 --> 00:10:09,200
so the sort of intent here uh in my

266
00:10:09,200 --> 00:10:11,440
mental model has been that the

267
00:10:11,440 --> 00:10:13,760
any sort of public metadata is agreed

268
00:10:13,760 --> 00:10:16,000
upon between client proxy

269
00:10:16,000 --> 00:10:17,920
and and factored into the decision to

270
00:10:17,920 --> 00:10:19,920
use a particular proxy or not

271
00:10:19,920 --> 00:10:22,079
um and private metadata must be uh

272
00:10:22,079 --> 00:10:24,720
strictly bounded it is sort of like a

273
00:10:24,720 --> 00:10:25,839
you know

274
00:10:25,839 --> 00:10:29,519
a must but we know you won't in a way uh

275
00:10:29,519 --> 00:10:31,040
um

276
00:10:31,040 --> 00:10:32,160
but at the end of the day you kind of

277
00:10:32,160 --> 00:10:35,360
have to trust the proxy to to not do

278
00:10:35,360 --> 00:10:37,040
bad things like forward your ip address

279
00:10:37,040 --> 00:10:39,360
or whatever so i i'm not i'm not too

280
00:10:39,360 --> 00:10:41,440
concerned with the language there but

281
00:10:41,440 --> 00:10:43,200
that's the tent that's my mental model

282
00:10:43,200 --> 00:10:44,880
so i think that aligns with ecker as

283
00:10:44,880 --> 00:10:47,920
well so so chris i want to pull on

284
00:10:47,920 --> 00:10:49,279
something there a little bit there's

285
00:10:49,279 --> 00:10:51,839
there's two things that we're sort of

286
00:10:51,839 --> 00:10:54,800
conflating perhaps one is the

287
00:10:54,800 --> 00:10:57,120
uh spectrum of possible things that the

288
00:10:57,120 --> 00:10:58,880
proxy might say so the type of

289
00:10:58,880 --> 00:11:00,079
information that it might pass to a

290
00:11:00,079 --> 00:11:02,000
server and the other is the specific

291
00:11:02,000 --> 00:11:03,040
values

292
00:11:03,040 --> 00:11:05,519
that those types take

293
00:11:05,519 --> 00:11:07,360
now are you suggesting that most things

294
00:11:07,360 --> 00:11:09,519
fit in the you know the precise value

295
00:11:09,519 --> 00:11:11,279
that's being communicated

296
00:11:11,279 --> 00:11:12,839
or

297
00:11:12,839 --> 00:11:15,600
um it is that

298
00:11:15,600 --> 00:11:17,279
just all of them just you know the type

299
00:11:17,279 --> 00:11:18,560
of the thing that's being communicated

300
00:11:18,560 --> 00:11:20,959
about you

301
00:11:22,000 --> 00:11:24,560
um

302
00:11:25,040 --> 00:11:26,560
can you repeat it one more time i'm i'm

303
00:11:26,560 --> 00:11:29,680
sorry i just spoke so so

304
00:11:29,680 --> 00:11:32,480
understandable um so in the shadow

305
00:11:32,480 --> 00:11:35,040
banning case the client might know that

306
00:11:35,040 --> 00:11:37,760
the so that the proxy might pass a bit

307
00:11:37,760 --> 00:11:39,279
along but it won't know the value of

308
00:11:39,279 --> 00:11:40,399
that bit

309
00:11:40,399 --> 00:11:42,000
yeah

310
00:11:42,000 --> 00:11:44,240
in the geocache

311
00:11:44,240 --> 00:11:46,320
do we expect that the client will know

312
00:11:46,320 --> 00:11:48,240
the precise value of a geolocation

313
00:11:48,240 --> 00:11:50,240
that's being provided along

314
00:11:50,240 --> 00:11:51,120
or

315
00:11:51,120 --> 00:11:53,440
it will just know that geolocation of a

316
00:11:53,440 --> 00:11:56,480
certain type

317
00:11:57,120 --> 00:11:59,600
yeah my uh thank you

318
00:11:59,600 --> 00:12:01,680
my my um

319
00:12:01,680 --> 00:12:02,959
my thing is that the client does not

320
00:12:02,959 --> 00:12:04,560
necessarily know the precise value it

321
00:12:04,560 --> 00:12:05,760
will just know that the value is being

322
00:12:05,760 --> 00:12:06,880
communicated

323
00:12:06,880 --> 00:12:11,120
um faithfully by the proxy um

324
00:12:11,120 --> 00:12:13,040
like it would be the right geo mapping

325
00:12:13,040 --> 00:12:14,079
or whatever it would compute the right

326
00:12:14,079 --> 00:12:16,240
token it would send the right bit

327
00:12:16,240 --> 00:12:18,160
um but the client is explicitly made

328
00:12:18,160 --> 00:12:20,639
aware of it

329
00:12:20,800 --> 00:12:22,079
yeah i

330
00:12:22,079 --> 00:12:24,639
i do wonder whether some of these

331
00:12:24,639 --> 00:12:26,959
examples can be made to work i mean

332
00:12:26,959 --> 00:12:29,760
geolocation is pretty dangerous to do

333
00:12:29,760 --> 00:12:31,760
these sorts of things with so yeah i

334
00:12:31,760 --> 00:12:33,200
think there's a lot of sharp edges

335
00:12:33,200 --> 00:12:34,800
within that any more metadata you're

336
00:12:34,800 --> 00:12:37,600
adding that's why like with the 96 pr in

337
00:12:37,600 --> 00:12:38,639
particular

338
00:12:38,639 --> 00:12:40,880
um i tried to

339
00:12:40,880 --> 00:12:43,040
punt any anything more than a single bit

340
00:12:43,040 --> 00:12:45,040
to a separate you know discussion down

341
00:12:45,040 --> 00:12:46,000
the road

342
00:12:46,000 --> 00:12:47,760
um

343
00:12:47,760 --> 00:12:48,720
uh

344
00:12:48,720 --> 00:12:50,079
and

345
00:12:50,079 --> 00:12:52,160
because to your point uh any any any

346
00:12:52,160 --> 00:12:54,639
more information you're adding is uh

347
00:12:54,639 --> 00:12:57,200
it's a slippery slope so to speak

348
00:12:57,200 --> 00:12:59,839
okay thank you

349
00:12:59,920 --> 00:13:02,479
hi tell me

350
00:13:03,440 --> 00:13:05,120
all right hello

351
00:13:05,120 --> 00:13:08,079
um so i agree with ecker that it's

352
00:13:08,079 --> 00:13:10,320
difficult or impossible to try to make

353
00:13:10,320 --> 00:13:11,200
this

354
00:13:11,200 --> 00:13:12,720
normative

355
00:13:12,720 --> 00:13:14,160
maybe one thing we could do is have a

356
00:13:14,160 --> 00:13:17,279
normative statement about

357
00:13:17,279 --> 00:13:19,120
future standardization of protocols

358
00:13:19,120 --> 00:13:20,639
between a proxy and a target of saying

359
00:13:20,639 --> 00:13:21,680
like

360
00:13:21,680 --> 00:13:24,320
we really shouldn't approve things that

361
00:13:24,320 --> 00:13:26,880
give away you know lots of information

362
00:13:26,880 --> 00:13:28,720
but otherwise we can't really enforce

363
00:13:28,720 --> 00:13:30,240
this

364
00:13:30,240 --> 00:13:32,320
and to echo what people have been saying

365
00:13:32,320 --> 00:13:34,160
i think this really comes down to how

366
00:13:34,160 --> 00:13:37,440
much the client trusts the proxy

367
00:13:37,440 --> 00:13:39,519
and the like the implicit thing whenever

368
00:13:39,519 --> 00:13:42,000
we're using oblivious proxy is

369
00:13:42,000 --> 00:13:44,560
that trust relationship and so anytime

370
00:13:44,560 --> 00:13:46,399
we try to talk about

371
00:13:46,399 --> 00:13:47,920
untrusted proxies or proxies doing

372
00:13:47,920 --> 00:13:49,199
things that the client don't doesn't

373
00:13:49,199 --> 00:13:50,240
want

374
00:13:50,240 --> 00:13:51,440
we're kind of missing the entire

375
00:13:51,440 --> 00:13:52,720
deployment model

376
00:13:52,720 --> 00:13:53,519
um

377
00:13:53,519 --> 00:13:54,320
and

378
00:13:54,320 --> 00:13:56,000
i think even for the shadow banning case

379
00:13:56,000 --> 00:13:58,320
like i could as a client

380
00:13:58,320 --> 00:14:00,560
once i learned that a proxy

381
00:14:00,560 --> 00:14:02,240
does shadow banning bits i could choose

382
00:14:02,240 --> 00:14:03,519
not to use it and say i don't trust you

383
00:14:03,519 --> 00:14:04,720
anymore because i don't want that in my

384
00:14:04,720 --> 00:14:07,120
contract so i don't know if the shadow

385
00:14:07,120 --> 00:14:08,959
banning is really

386
00:14:08,959 --> 00:14:11,760
unique or if it's just one more thing

387
00:14:11,760 --> 00:14:13,760
the client could

388
00:14:13,760 --> 00:14:17,720
decide not to trust you about

389
00:14:18,000 --> 00:14:20,240
yeah i i think the the the general shape

390
00:14:20,240 --> 00:14:21,680
of the things that chris has described

391
00:14:21,680 --> 00:14:23,440
is is what we're aiming for i'm not sure

392
00:14:23,440 --> 00:14:25,199
that we're there yet on the pull request

393
00:14:25,199 --> 00:14:27,120
but this is good input

394
00:14:27,120 --> 00:14:28,639
shivan

395
00:14:28,639 --> 00:14:30,800
yeah i think um i kind of mentioned

396
00:14:30,800 --> 00:14:32,240
something similar on the pull request

397
00:14:32,240 --> 00:14:34,800
but yeah i kind of agree i think that

398
00:14:34,800 --> 00:14:36,639
um well i think that we should just keep

399
00:14:36,639 --> 00:14:38,480
it to be assured and you can describe

400
00:14:38,480 --> 00:14:39,839
the many ways in which this can go

401
00:14:39,839 --> 00:14:42,079
really badly and like why a proxy

402
00:14:42,079 --> 00:14:44,560
shouldn't just add you know

403
00:14:44,560 --> 00:14:46,160
everything under the sun

404
00:14:46,160 --> 00:14:48,079
and it communicates with the server but

405
00:14:48,079 --> 00:14:50,160
i think applications will have

406
00:14:50,160 --> 00:14:51,760
things that they want to do

407
00:14:51,760 --> 00:14:53,120
um

408
00:14:53,120 --> 00:14:54,880
so there's i don't know if there's much

409
00:14:54,880 --> 00:14:56,160
point being like

410
00:14:56,160 --> 00:14:57,839
this is the exact amount of amount of

411
00:14:57,839 --> 00:14:59,360
information that

412
00:14:59,360 --> 00:15:02,880
should be uh given out

413
00:15:07,760 --> 00:15:10,839
david david kanasi privacy proxy

414
00:15:10,839 --> 00:15:14,079
enthusiast um hey martin i want to

415
00:15:14,079 --> 00:15:15,920
really echo what folks before i've been

416
00:15:15,920 --> 00:15:17,440
saying like

417
00:15:17,440 --> 00:15:19,279
this must is completely unenforceable

418
00:15:19,279 --> 00:15:21,519
and we will probably have uses for this

419
00:15:21,519 --> 00:15:23,120
later which all we'll have to do is by

420
00:15:23,120 --> 00:15:25,199
the way that must just ignore it in that

421
00:15:25,199 --> 00:15:26,639
previous document

422
00:15:26,639 --> 00:15:27,519
so

423
00:15:27,519 --> 00:15:29,920
having some text about well

424
00:15:29,920 --> 00:15:31,600
duh don't put the name of the user in

425
00:15:31,600 --> 00:15:33,360
there uh sounds i would have should

426
00:15:33,360 --> 00:15:34,560
sounds good

427
00:15:34,560 --> 00:15:36,399
and some like implementation guidance

428
00:15:36,399 --> 00:15:37,920
says we have more implementations is

429
00:15:37,920 --> 00:15:40,320
good but i wouldn't i would prefer no no

430
00:15:40,320 --> 00:15:43,320
must

431
00:15:57,040 --> 00:15:58,639
i'm suggesting that at this point

432
00:15:58,639 --> 00:16:00,959
perhaps it's time to um

433
00:16:00,959 --> 00:16:03,920
to to go back to the the the

434
00:16:03,920 --> 00:16:05,040
separate work on the poor request and

435
00:16:05,040 --> 00:16:06,839
maybe we can try to like

436
00:16:06,839 --> 00:16:08,000
um go back

437
00:16:08,000 --> 00:16:09,440
um and like rather than try to like i

438
00:16:09,440 --> 00:16:11,040
think i'm generally like

439
00:16:11,040 --> 00:16:12,320
obviously when i'm generally hearing of

440
00:16:12,320 --> 00:16:14,880
course if people agree with me but

441
00:16:14,880 --> 00:16:16,560
what i think they think agreement is

442
00:16:16,560 --> 00:16:17,759
like that we should try to talk about

443
00:16:17,759 --> 00:16:19,199
the positive

444
00:16:19,199 --> 00:16:20,639
the space here and like give some

445
00:16:20,639 --> 00:16:21,920
guidance but not actually tell people to

446
00:16:21,920 --> 00:16:23,839
do anything and then we can work out

447
00:16:23,839 --> 00:16:25,519
the exact importance of the thing around

448
00:16:25,519 --> 00:16:28,480
that later offline

449
00:16:28,480 --> 00:16:30,560
this is also my issue 100 so i think

450
00:16:30,560 --> 00:16:31,759
this is like clearly this is clearly

451
00:16:31,759 --> 00:16:35,120
like a hot issue in this document

452
00:16:35,120 --> 00:16:36,639
yeah this is one of the more difficult

453
00:16:36,639 --> 00:16:38,560
ones uh we will take this to the pull

454
00:16:38,560 --> 00:16:41,440
request i have probably one final point

455
00:16:41,440 --> 00:16:42,240
here

456
00:16:42,240 --> 00:16:44,160
in and that is that um some of the

457
00:16:44,160 --> 00:16:46,079
things that people are requesting here

458
00:16:46,079 --> 00:16:48,399
are probably generic http features that

459
00:16:48,399 --> 00:16:51,120
don't exist currently and

460
00:16:51,120 --> 00:16:54,399
they might be something that uh we would

461
00:16:54,399 --> 00:16:56,079
would benefit from

462
00:16:56,079 --> 00:16:58,639
standardization with and so if we we

463
00:16:58,639 --> 00:17:00,959
took those things to say the http

464
00:17:00,959 --> 00:17:02,560
working group we could define new header

465
00:17:02,560 --> 00:17:07,119
fields for say the shadow band bit or

466
00:17:07,119 --> 00:17:08,559
no i'm not i'm not going to say that

467
00:17:08,559 --> 00:17:09,919
we're going to do the geolocation thing

468
00:17:09,919 --> 00:17:11,679
but um

469
00:17:11,679 --> 00:17:12,880
other things

470
00:17:12,880 --> 00:17:14,959
those lines

471
00:17:14,959 --> 00:17:16,880
okay so i'm going to move to the next

472
00:17:16,880 --> 00:17:19,839
one

473
00:17:20,559 --> 00:17:22,319
this one's a little more technically

474
00:17:22,319 --> 00:17:25,199
complicated so um

475
00:17:25,199 --> 00:17:26,480
i think a number of people have pointed

476
00:17:26,480 --> 00:17:28,319
out that

477
00:17:28,319 --> 00:17:31,120
this isn't particularly good at carrying

478
00:17:31,120 --> 00:17:34,320
all of the different http semantics

479
00:17:34,320 --> 00:17:36,559
at the moment uh we sort of have a an

480
00:17:36,559 --> 00:17:39,200
atomic request and an atomic response

481
00:17:39,200 --> 00:17:41,520
and if we want to do things like have

482
00:17:41,520 --> 00:17:43,600
large request bodies or large response

483
00:17:43,600 --> 00:17:46,400
bodies that stream and are processed in

484
00:17:46,400 --> 00:17:48,559
a streaming fashion

485
00:17:48,559 --> 00:17:50,000
it's not very well set up for doing that

486
00:17:50,000 --> 00:17:52,000
in fact it would be a very bad idea to

487
00:17:52,000 --> 00:17:55,440
use the current thing for doing uh

488
00:17:55,440 --> 00:17:57,520
very large requests that are processed

489
00:17:57,520 --> 00:18:00,160
incrementally

490
00:18:00,160 --> 00:18:01,760
and it also means that we can't do

491
00:18:01,760 --> 00:18:03,600
things like encapsulate

492
00:18:03,600 --> 00:18:07,280
uh 1xx responses

493
00:18:08,480 --> 00:18:10,240
um

494
00:18:10,240 --> 00:18:13,039
which is a little bit awkward so um i

495
00:18:13,039 --> 00:18:15,760
have a slide uh ben if you have a

496
00:18:15,760 --> 00:18:16,799
question

497
00:18:16,799 --> 00:18:20,720
i might answer it as we're coming up so

498
00:18:20,720 --> 00:18:23,520
jump in if i'm

499
00:18:24,799 --> 00:18:27,360
so um this is just a sketch of a design

500
00:18:27,360 --> 00:18:29,360
i'm part the way through writing this up

501
00:18:29,360 --> 00:18:31,120
it turns out that writing this up is

502
00:18:31,120 --> 00:18:34,080
awkward and time consuming so

503
00:18:34,080 --> 00:18:35,679
the couple of hours i've had to spend on

504
00:18:35,679 --> 00:18:37,600
this has not been enough

505
00:18:37,600 --> 00:18:39,600
to do it cleanly but the basic idea is

506
00:18:39,600 --> 00:18:42,880
that rather than having a single aad

507
00:18:42,880 --> 00:18:45,600
invocation either via hpke or just

508
00:18:45,600 --> 00:18:47,440
directly itself

509
00:18:47,440 --> 00:18:49,520
we invoke it multiple times

510
00:18:49,520 --> 00:18:53,039
and send the message in chunks

511
00:18:53,200 --> 00:18:55,520
so this is easy for hpke because it

512
00:18:55,520 --> 00:18:58,400
maintains its internal counter uh for

513
00:18:58,400 --> 00:19:00,880
the aead we need to maintain a counter

514
00:19:00,880 --> 00:19:02,880
in a nods

515
00:19:02,880 --> 00:19:04,559
and which we can follow the pattern that

516
00:19:04,559 --> 00:19:07,679
we have in tls for that sort of thing

517
00:19:07,679 --> 00:19:09,600
for each chunk we can prefix each of

518
00:19:09,600 --> 00:19:12,160
them with a length

519
00:19:12,160 --> 00:19:14,080
which if we use say for instance the

520
00:19:14,080 --> 00:19:16,880
quick variant encoding it

521
00:19:16,880 --> 00:19:19,440
might cost one extra byte if you send a

522
00:19:19,440 --> 00:19:21,440
single chunk

523
00:19:21,440 --> 00:19:22,960
and then the only other consideration

524
00:19:22,960 --> 00:19:24,799
here is that we need something to seal

525
00:19:24,799 --> 00:19:26,400
off the end of the message so when you

526
00:19:26,400 --> 00:19:28,000
have a series of chunks you need to know

527
00:19:28,000 --> 00:19:29,760
that the chunk that you're processing is

528
00:19:29,760 --> 00:19:32,240
the very last one otherwise you're

529
00:19:32,240 --> 00:19:35,039
exposed to potential truncation attacks

530
00:19:35,039 --> 00:19:36,880
so

531
00:19:36,880 --> 00:19:39,600
use something to distinguish the last

532
00:19:39,600 --> 00:19:41,360
chunk and if there's any number of

533
00:19:41,360 --> 00:19:43,600
things that you can use the the simplest

534
00:19:43,600 --> 00:19:44,400
thing

535
00:19:44,400 --> 00:19:46,320
in in many respects is is just use a

536
00:19:46,320 --> 00:19:48,400
zero length for the last one

537
00:19:48,400 --> 00:19:51,200
because then you have a distinguishing

538
00:19:51,200 --> 00:19:55,919
thing and you ensure that the um

539
00:19:57,360 --> 00:19:59,120
ensure that it's uh

540
00:19:59,120 --> 00:20:01,760
you rely on the the outer encapsulation

541
00:20:01,760 --> 00:20:03,280
to to manage the length of the remaining

542
00:20:03,280 --> 00:20:04,960
things

543
00:20:04,960 --> 00:20:06,400
uh richard's going to complain about

544
00:20:06,400 --> 00:20:08,960
that probably um

545
00:20:08,960 --> 00:20:13,919
and that's all i have so comments folks

546
00:20:17,039 --> 00:20:17,919
hi

547
00:20:17,919 --> 00:20:20,080
ben schwartz

548
00:20:20,080 --> 00:20:22,080
i

549
00:20:22,080 --> 00:20:24,159
first wanted to ask

550
00:20:24,159 --> 00:20:26,480
can you just confirm that i understand

551
00:20:26,480 --> 00:20:28,159
correctly that

552
00:20:28,159 --> 00:20:30,799
the proxy already can stream requests

553
00:20:30,799 --> 00:20:33,520
and responses

554
00:20:33,600 --> 00:20:35,919
yes the proxy can stream everything it

555
00:20:35,919 --> 00:20:37,520
receives it's the it's the client and

556
00:20:37,520 --> 00:20:40,159
the server on either end of the

557
00:20:40,159 --> 00:20:41,840
hpk thing

558
00:20:41,840 --> 00:20:42,799
okay

559
00:20:42,799 --> 00:20:44,960
yeah so that doesn't seem as important

560
00:20:44,960 --> 00:20:47,360
to me um i understand the

561
00:20:47,360 --> 00:20:49,200
the interest here

562
00:20:49,200 --> 00:20:50,799
but i would

563
00:20:50,799 --> 00:20:53,919
uh i would ideally prefer for this to go

564
00:20:53,919 --> 00:20:56,559
in a separate document possibly as an

565
00:20:56,559 --> 00:20:58,960
extension to hpke or you know as

566
00:20:58,960 --> 00:21:01,600
essentially an addendum to hpke because

567
00:21:01,600 --> 00:21:03,919
this is a very general purpose

568
00:21:03,919 --> 00:21:06,159
thing that you're describing here has

569
00:21:06,159 --> 00:21:08,960
really very little to do with

570
00:21:08,960 --> 00:21:11,039
uh http

571
00:21:11,039 --> 00:21:13,200
it seems like it seems like an expansion

572
00:21:13,200 --> 00:21:17,159
of hpke itself

573
00:21:17,360 --> 00:21:18,799
i'd love to hear what richard has to say

574
00:21:18,799 --> 00:21:20,240
about that

575
00:21:20,240 --> 00:21:21,520
so hp

576
00:21:21,520 --> 00:21:25,120
hpke has a notion of doing a single key

577
00:21:25,120 --> 00:21:26,720
exchange that you then use for multiple

578
00:21:26,720 --> 00:21:28,480
ads

579
00:21:28,480 --> 00:21:31,039
now it's up to the application of hpk to

580
00:21:31,039 --> 00:21:32,559
like provide sequence numbers to make

581
00:21:32,559 --> 00:21:34,000
sure that you process them in the right

582
00:21:34,000 --> 00:21:35,120
order

583
00:21:35,120 --> 00:21:37,360
um etc but um

584
00:21:37,360 --> 00:21:39,200
but that that's there we could use that

585
00:21:39,200 --> 00:21:41,200
it'd be pretty straightforward what i

586
00:21:41,200 --> 00:21:43,360
was wondering is whether

587
00:21:43,360 --> 00:21:45,760
we need to invent something new to

588
00:21:45,760 --> 00:21:47,440
signal end of stream here or whether

589
00:21:47,440 --> 00:21:50,720
like we could lean on the http

590
00:21:50,720 --> 00:21:52,240
chunked content encoding or something

591
00:21:52,240 --> 00:21:53,679
like that to

592
00:21:53,679 --> 00:21:54,720
you know

593
00:21:54,720 --> 00:21:57,200
which if i recall correctly has end to

594
00:21:57,200 --> 00:21:58,960
stream signal

595
00:21:58,960 --> 00:22:00,559
um and so you would just basically just

596
00:22:00,559 --> 00:22:03,440
have the the encrypted thing be

597
00:22:03,440 --> 00:22:05,580
you know here's some some chunks and

598
00:22:05,580 --> 00:22:06,720
[Music]

599
00:22:06,720 --> 00:22:07,919
uh

600
00:22:07,919 --> 00:22:10,400
and you can encrypt them and then the

601
00:22:10,400 --> 00:22:11,919
interior thing would signal when you got

602
00:22:11,919 --> 00:22:14,480
the last shot

603
00:22:14,640 --> 00:22:16,720
i don't think we can rely on chunked

604
00:22:16,720 --> 00:22:19,440
encoding for this i don't think coupling

605
00:22:19,440 --> 00:22:21,440
the the chunk boundaries that you use

606
00:22:21,440 --> 00:22:23,840
for the aead with either the chunk

607
00:22:23,840 --> 00:22:26,640
encoding thing or http 2 data frames is

608
00:22:26,640 --> 00:22:28,240
a good idea

609
00:22:28,240 --> 00:22:29,600
i think there's

610
00:22:29,600 --> 00:22:31,280
any number of reasons why you might want

611
00:22:31,280 --> 00:22:33,360
to be doing things like rechunking

612
00:22:33,360 --> 00:22:36,000
at intermediaries for instance so i

613
00:22:36,000 --> 00:22:36,960
don't think that's going to work

614
00:22:36,960 --> 00:22:38,840
particularly well

615
00:22:38,840 --> 00:22:43,600
um this design that i have here is

616
00:22:43,919 --> 00:22:45,840
going yeah so what i was going to say is

617
00:22:45,840 --> 00:22:48,400
like if you're going to do the hpke

618
00:22:48,400 --> 00:22:50,240
uh multiple aud thing you're going to

619
00:22:50,240 --> 00:22:52,159
need a framing a little bit of framing

620
00:22:52,159 --> 00:22:54,559
anyway so you might as well just put a

621
00:22:54,559 --> 00:22:56,559
bit there

622
00:22:56,559 --> 00:22:58,720
that's exactly what i'm suggesting might

623
00:22:58,720 --> 00:23:01,360
happen here yep

624
00:23:01,360 --> 00:23:03,760
tommy

625
00:23:07,440 --> 00:23:09,360
um so one

626
00:23:09,360 --> 00:23:11,120
question

627
00:23:11,120 --> 00:23:12,799
because i was waiting to see kind of the

628
00:23:12,799 --> 00:23:14,240
proposal i understand that that's not

629
00:23:14,240 --> 00:23:15,919
ready yet

630
00:23:15,919 --> 00:23:17,679
does supporting

631
00:23:17,679 --> 00:23:19,280
this streaming chain

632
00:23:19,280 --> 00:23:21,200
do the streaming does that change the

633
00:23:21,200 --> 00:23:23,440
wire format for the encapsulated request

634
00:23:23,440 --> 00:23:26,960
for requests that don't want chunked or

635
00:23:26,960 --> 00:23:28,640
streaming

636
00:23:28,640 --> 00:23:30,799
yeah the the way that i've got it at the

637
00:23:30,799 --> 00:23:33,679
moment uh there's a single zero byte

638
00:23:33,679 --> 00:23:35,039
at the

639
00:23:35,039 --> 00:23:36,320
at the start of the message but

640
00:23:36,320 --> 00:23:38,240
otherwise it's exactly the same so

641
00:23:38,240 --> 00:23:39,520
exactly the same code that you have

642
00:23:39,520 --> 00:23:40,480
today

643
00:23:40,480 --> 00:23:42,640
you put a zero byte in

644
00:23:42,640 --> 00:23:44,880
and if you're unwilling to support

645
00:23:44,880 --> 00:23:47,360
chunking on receipt then you

646
00:23:47,360 --> 00:23:49,679
just simply read a zero byte off and

647
00:23:49,679 --> 00:23:50,480
then

648
00:23:50,480 --> 00:23:54,320
run exact same code that you have today

649
00:23:54,320 --> 00:23:56,640
right so

650
00:23:56,640 --> 00:23:57,440
okay

651
00:23:57,440 --> 00:24:00,799
and that makes sense i don't

652
00:24:01,679 --> 00:24:04,320
love it so i guess the other question is

653
00:24:04,320 --> 00:24:06,400
like you know what are the use cases for

654
00:24:06,400 --> 00:24:08,240
oblivious http that

655
00:24:08,240 --> 00:24:10,799
currently would use this like are

656
00:24:10,799 --> 00:24:12,720
who is going to benefit

657
00:24:12,720 --> 00:24:14,640
from this

658
00:24:14,640 --> 00:24:15,919
uh

659
00:24:15,919 --> 00:24:17,760
bite and the potential complexity of

660
00:24:17,760 --> 00:24:19,440
implementing like

661
00:24:19,440 --> 00:24:21,120
is anyone going to actually use this and

662
00:24:21,120 --> 00:24:24,080
test it out and exercise this um as

663
00:24:24,080 --> 00:24:25,840
we're developing the protocol because i

664
00:24:25,840 --> 00:24:26,960
have a couple use cases that i'm

665
00:24:26,960 --> 00:24:28,640
currently using this for and they're not

666
00:24:28,640 --> 00:24:31,120
needing this

667
00:24:31,279 --> 00:24:32,880
right so there's a there's

668
00:24:32,880 --> 00:24:35,440
a lot of use cases that we have that are

669
00:24:35,440 --> 00:24:37,279
very small requests very small responses

670
00:24:37,279 --> 00:24:39,039
and that would be

671
00:24:39,039 --> 00:24:41,039
kind of this would be a waste on those

672
00:24:41,039 --> 00:24:43,200
um those things now the question is

673
00:24:43,200 --> 00:24:45,120
whether there's anything that you might

674
00:24:45,120 --> 00:24:46,880
use this for that has much larger

675
00:24:46,880 --> 00:24:49,360
requests or responses

676
00:24:49,360 --> 00:24:51,600
there are some of the things

677
00:24:51,600 --> 00:24:54,559
that i've been looking at for um

678
00:24:54,559 --> 00:24:58,080
the npc related submission of

679
00:24:58,080 --> 00:25:00,159
you know advertising related things for

680
00:25:00,159 --> 00:25:01,760
instance that

681
00:25:01,760 --> 00:25:04,159
might use larger payloads

682
00:25:04,159 --> 00:25:06,720
it's uncertain

683
00:25:06,960 --> 00:25:08,480
and

684
00:25:08,480 --> 00:25:09,840
sufficiently large that they couldn't

685
00:25:09,840 --> 00:25:11,679
just create i mean couldn't just

686
00:25:11,679 --> 00:25:13,200
essentially stream it to the proxy and

687
00:25:13,200 --> 00:25:14,480
then

688
00:25:14,480 --> 00:25:16,080
have that be one large request that's

689
00:25:16,080 --> 00:25:17,679
forwarded

690
00:25:17,679 --> 00:25:19,840
well it's it's more about being able to

691
00:25:19,840 --> 00:25:22,159
stream it into the in the encryption or

692
00:25:22,159 --> 00:25:24,559
description

693
00:25:24,559 --> 00:25:26,000
okay

694
00:25:26,000 --> 00:25:29,000
yeah

695
00:25:33,120 --> 00:25:36,159
david sknozzy this time mask enthusiast

696
00:25:36,159 --> 00:25:37,279
um

697
00:25:37,279 --> 00:25:39,440
so similar to tommy i'm not entirely

698
00:25:39,440 --> 00:25:42,559
sure we need this because like in my

699
00:25:42,559 --> 00:25:45,360
view most of the use cases are for like

700
00:25:45,360 --> 00:25:46,880
short things

701
00:25:46,880 --> 00:25:48,400
and

702
00:25:48,400 --> 00:25:50,320
like if you're starting to get into

703
00:25:50,320 --> 00:25:52,799
things that are much longer

704
00:25:52,799 --> 00:25:54,080
i mean

705
00:25:54,080 --> 00:25:55,760
i know i'm the math guy but you know at

706
00:25:55,760 --> 00:25:57,679
some point you can use mask like if

707
00:25:57,679 --> 00:25:59,919
you're really want to stream that's we

708
00:25:59,919 --> 00:26:01,360
have another protocol for that that

709
00:26:01,360 --> 00:26:04,000
might be a better fit uh so at first i

710
00:26:04,000 --> 00:26:05,520
was like oh yeah this makes sense but

711
00:26:05,520 --> 00:26:09,200
now that i'm seeing um crypto foot guns

712
00:26:09,200 --> 00:26:11,760
i'm kind of concerned that solving those

713
00:26:11,760 --> 00:26:13,600
might delay the rest of

714
00:26:13,600 --> 00:26:16,400
uh this effort and unless we have a real

715
00:26:16,400 --> 00:26:18,080
use case that's not solved i'd like to

716
00:26:18,080 --> 00:26:19,600
understand more why that one can be

717
00:26:19,600 --> 00:26:23,399
solved by something like mask

718
00:26:27,440 --> 00:26:29,760
right so i suspect that the right thing

719
00:26:29,760 --> 00:26:33,039
to do here would be to uh put out a pull

720
00:26:33,039 --> 00:26:34,799
request see what people think about the

721
00:26:34,799 --> 00:26:36,799
concrete implementation of it i suspect

722
00:26:36,799 --> 00:26:38,480
that

723
00:26:38,480 --> 00:26:40,640
the feedback that i've gotten here will

724
00:26:40,640 --> 00:26:42,960
remain unchanged

725
00:26:42,960 --> 00:26:44,159
but

726
00:26:44,159 --> 00:26:46,400
since i'm 90 of the way through work

727
00:26:46,400 --> 00:26:50,000
i'll probably go ahead and

728
00:26:50,000 --> 00:26:50,840
ship a

729
00:26:50,840 --> 00:26:54,320
pr circulate on list and see see what

730
00:26:54,320 --> 00:26:56,960
comes out of that

731
00:26:57,520 --> 00:26:59,919
ben schwartz uh just one quick note you

732
00:26:59,919 --> 00:27:03,279
you could consider separating this by

733
00:27:03,279 --> 00:27:04,720
mime type

734
00:27:04,720 --> 00:27:07,600
effectively

735
00:27:07,600 --> 00:27:08,559
um

736
00:27:08,559 --> 00:27:10,000
and that would

737
00:27:10,000 --> 00:27:12,960
that would make an extension

738
00:27:18,480 --> 00:27:20,080
so in effect that would mean using an

739
00:27:20,080 --> 00:27:21,679
extension which isn't completely

740
00:27:21,679 --> 00:27:24,240
unreasonable

741
00:27:25,360 --> 00:27:27,840
a number of ways to cut this one okay so

742
00:27:27,840 --> 00:27:28,640
um

743
00:27:28,640 --> 00:27:30,880
this is one of the more interesting

744
00:27:30,880 --> 00:27:33,840
technical problems that exists here i

745
00:27:33,840 --> 00:27:35,200
think it might have been david benjamin

746
00:27:35,200 --> 00:27:36,080
who

747
00:27:36,080 --> 00:27:38,640
has sort of reminded us that um

748
00:27:38,640 --> 00:27:41,120
anti-replay is kind of a thing when

749
00:27:41,120 --> 00:27:42,640
you're doing this when you seal

750
00:27:42,640 --> 00:27:44,640
something up in hpke

751
00:27:44,640 --> 00:27:46,080
uh

752
00:27:46,080 --> 00:27:47,919
there's nothing in it that ensures that

753
00:27:47,919 --> 00:27:50,559
their connection is live and so a

754
00:27:50,559 --> 00:27:52,720
malicious proxy that gets their hands on

755
00:27:52,720 --> 00:27:54,240
a request can

756
00:27:54,240 --> 00:27:56,720
replay that request any number of times

757
00:27:56,720 --> 00:27:58,159
and the server

758
00:27:58,159 --> 00:27:59,840
that has no defenses against those sorts

759
00:27:59,840 --> 00:28:01,600
of things might just process the request

760
00:28:01,600 --> 00:28:03,840
multiple multiple times

761
00:28:03,840 --> 00:28:06,480
so uh what we have at the moment

762
00:28:06,480 --> 00:28:08,559
and this is going to require a little

763
00:28:08,559 --> 00:28:11,120
bit of coordination perhaps to address

764
00:28:11,120 --> 00:28:11,919
is

765
00:28:11,919 --> 00:28:13,840
we've got some text in the draft that

766
00:28:13,840 --> 00:28:15,840
that looks at the general problem and

767
00:28:15,840 --> 00:28:18,480
surveys the space

768
00:28:18,480 --> 00:28:20,240
and

769
00:28:20,240 --> 00:28:22,240
there's a call out to a new draft that

770
00:28:22,240 --> 00:28:24,960
i've proposed to the http api

771
00:28:24,960 --> 00:28:26,880
working group that talks about how you

772
00:28:26,880 --> 00:28:29,760
put timestamps in requests and

773
00:28:29,760 --> 00:28:32,000
how you deal with the problems in there

774
00:28:32,000 --> 00:28:33,919
um

775
00:28:33,919 --> 00:28:36,720
i will go on to the next slide to show

776
00:28:36,720 --> 00:28:38,799
you

777
00:28:38,799 --> 00:28:41,360
the sort of problem so um

778
00:28:41,360 --> 00:28:43,279
if you're doing anti-replay

779
00:28:43,279 --> 00:28:44,799
there's um

780
00:28:44,799 --> 00:28:46,159
sort of two

781
00:28:46,159 --> 00:28:47,679
broad ways that you can deal with it

782
00:28:47,679 --> 00:28:50,159
first is you can just not care

783
00:28:50,159 --> 00:28:52,080
this is often the case

784
00:28:52,080 --> 00:28:52,799
for

785
00:28:52,799 --> 00:28:55,120
things like dns even though perhaps

786
00:28:55,120 --> 00:28:56,320
maybe they should care in certain

787
00:28:56,320 --> 00:28:58,080
circumstances a lot of dns servers won't

788
00:28:58,080 --> 00:29:00,960
care about replays

789
00:29:01,440 --> 00:29:04,000
and the other one is

790
00:29:04,000 --> 00:29:05,919
you take all the requests you receive

791
00:29:05,919 --> 00:29:07,840
and you remem remember them and if you

792
00:29:07,840 --> 00:29:08,720
see

793
00:29:08,720 --> 00:29:10,960
a request that's played out twice

794
00:29:10,960 --> 00:29:12,960
you reject the second one all subsequent

795
00:29:12,960 --> 00:29:14,559
ones

796
00:29:14,559 --> 00:29:16,320
for something

797
00:29:16,320 --> 00:29:17,520
like

798
00:29:17,520 --> 00:29:21,600
oh gdp you just look at the a slice

799
00:29:21,600 --> 00:29:24,880
of the the request that the encapsulated

800
00:29:24,880 --> 00:29:25,679
key

801
00:29:25,679 --> 00:29:28,640
is a good thing to use in that case

802
00:29:28,640 --> 00:29:30,320
you don't need to remember the entire

803
00:29:30,320 --> 00:29:32,000
request in order to recognize that

804
00:29:32,000 --> 00:29:33,679
something's coming again

805
00:29:33,679 --> 00:29:35,360
you just need enough of that ink value

806
00:29:35,360 --> 00:29:38,080
to to ensure that it's unique

807
00:29:38,080 --> 00:29:41,279
probably 16 bytes would do

808
00:29:41,279 --> 00:29:42,640
so the problem with this is that you

809
00:29:42,640 --> 00:29:44,799
even with as little as 16 bytes per

810
00:29:44,799 --> 00:29:47,520
request that you've processed

811
00:29:47,520 --> 00:29:49,919
that's an infinite amount of state

812
00:29:49,919 --> 00:29:52,240
if you're a long running server

813
00:29:52,240 --> 00:29:54,960
so um

814
00:29:54,960 --> 00:29:56,480
a practice that we've used in a number

815
00:29:56,480 --> 00:29:58,640
of other settings is to include

816
00:29:58,640 --> 00:30:00,559
uh some sort of timestamp in the request

817
00:30:00,559 --> 00:30:02,960
and the http date header field

818
00:30:02,960 --> 00:30:04,720
is not a bad

819
00:30:04,720 --> 00:30:06,399
choice for this one even though the date

820
00:30:06,399 --> 00:30:07,279
is not

821
00:30:07,279 --> 00:30:10,000
used particularly often

822
00:30:10,000 --> 00:30:11,440
and then you only need to remember

823
00:30:11,440 --> 00:30:14,080
requests over a short span of time

824
00:30:14,080 --> 00:30:17,279
anything outside of that

825
00:30:17,279 --> 00:30:20,559
span is rejected because it's too old

826
00:30:20,559 --> 00:30:23,600
it's probably a replay or too far into

827
00:30:23,600 --> 00:30:27,120
the future someone's got a wacky clock

828
00:30:27,120 --> 00:30:28,880
for those requests that you remember as

829
00:30:28,880 --> 00:30:31,360
they get too old you just

830
00:30:31,360 --> 00:30:32,960
stop remembering them

831
00:30:32,960 --> 00:30:35,360
it sort of keeps the amount of

832
00:30:35,360 --> 00:30:39,678
the state that you maintain finite

833
00:30:42,240 --> 00:30:43,840
that leads to the next problem which is

834
00:30:43,840 --> 00:30:46,720
that client clocks are bad and in some

835
00:30:46,720 --> 00:30:49,360
cases really really bad

836
00:30:49,360 --> 00:30:51,760
there's a paper that we cite that talks

837
00:30:51,760 --> 00:30:54,720
about just how bad it is but um

838
00:30:54,720 --> 00:30:58,399
it's not unusual to find clocks that are

839
00:30:58,399 --> 00:31:00,640
years bad

840
00:31:00,640 --> 00:31:01,840
some of them

841
00:31:01,840 --> 00:31:02,799
like

842
00:31:02,799 --> 00:31:04,640
centuries into the future

843
00:31:04,640 --> 00:31:06,559
that sort of thing um completely weird

844
00:31:06,559 --> 00:31:07,360
stuff

845
00:31:07,360 --> 00:31:10,960
so um the solution there i think is to

846
00:31:10,960 --> 00:31:13,600
just let the client retry so

847
00:31:13,600 --> 00:31:15,440
you have a the service send a signal

848
00:31:15,440 --> 00:31:17,200
saying that you'll collap your clock is

849
00:31:17,200 --> 00:31:20,399
wacky and the server response will

850
00:31:20,399 --> 00:31:23,840
include a date header field conveniently

851
00:31:23,840 --> 00:31:27,519
and the client can just retry

852
00:31:27,600 --> 00:31:28,880
using the date that the server has

853
00:31:28,880 --> 00:31:30,799
provided you should turn the value

854
00:31:30,799 --> 00:31:34,080
around in most cases

855
00:31:34,080 --> 00:31:35,919
there's a number of ways in which this

856
00:31:35,919 --> 00:31:38,159
can go really really badly wrong

857
00:31:38,159 --> 00:31:40,159
you don't want to use the service date

858
00:31:40,159 --> 00:31:43,760
for things other than an immediate retry

859
00:31:43,760 --> 00:31:44,799
but

860
00:31:44,799 --> 00:31:47,200
there's a you can use it for this one

861
00:31:47,200 --> 00:31:48,799
retry so there's a there's a bunch of

862
00:31:48,799 --> 00:31:50,720
stuff in the in the date request draft

863
00:31:50,720 --> 00:31:53,919
that covers the security risks of taking

864
00:31:53,919 --> 00:31:57,039
random clocks from random servers

865
00:31:57,039 --> 00:31:58,399
um

866
00:31:58,399 --> 00:32:00,000
but in general this this works

867
00:32:00,000 --> 00:32:02,080
reasonably well it provides linkability

868
00:32:02,080 --> 00:32:04,399
between the original attempt and the

869
00:32:04,399 --> 00:32:07,120
retry but if the retry is essentially

870
00:32:07,120 --> 00:32:09,440
the same request tried again then it's

871
00:32:09,440 --> 00:32:12,799
not particularly bad

872
00:32:13,600 --> 00:32:16,559
and here there's not there's acne

873
00:32:16,559 --> 00:32:18,799
answers as well in the chat i don't

874
00:32:18,799 --> 00:32:21,039
think that allows you to do the time

875
00:32:21,039 --> 00:32:22,799
windowing thing

876
00:32:22,799 --> 00:32:25,840
although it may be uh possible in that

877
00:32:25,840 --> 00:32:27,519
case because the server is the one

878
00:32:27,519 --> 00:32:30,320
that's generating the noises

879
00:32:30,320 --> 00:32:32,399
it seems like the server generated date

880
00:32:32,399 --> 00:32:35,919
here because the server comes indeed

881
00:32:35,919 --> 00:32:39,760
yep so it's essentially a token so um

882
00:32:39,760 --> 00:32:42,320
this is more or less in uh for your

883
00:32:42,320 --> 00:32:46,399
information um i think this is probably

884
00:32:46,399 --> 00:32:49,039
a reasonable thing here i think the

885
00:32:49,039 --> 00:32:50,559
challenge here is that we're citing a

886
00:32:50,559 --> 00:32:52,240
draft that's an individual draft in

887
00:32:52,240 --> 00:32:53,679
another working group

888
00:32:53,679 --> 00:32:55,760
so i just wanted to make people aware of

889
00:32:55,760 --> 00:32:58,080
that that possibility we could probably

890
00:32:58,080 --> 00:32:59,679
break that dependency

891
00:32:59,679 --> 00:33:02,320
uh by folding some of the content in

892
00:33:02,320 --> 00:33:03,760
but um

893
00:33:03,760 --> 00:33:05,279
we haven't yet had the conversation in

894
00:33:05,279 --> 00:33:07,039
http api about what to do with that

895
00:33:07,039 --> 00:33:08,080
draft

896
00:33:08,080 --> 00:33:08,799
so

897
00:33:08,799 --> 00:33:11,600
um there's a little uncertainty there

898
00:33:11,600 --> 00:33:13,039
thankfully we have some other problems

899
00:33:13,039 --> 00:33:14,399
to solve so we

900
00:33:14,399 --> 00:33:17,600
this doesn't become urgent

901
00:33:17,840 --> 00:33:20,000
any input on this one

902
00:33:20,000 --> 00:33:22,320
okay

903
00:33:23,600 --> 00:33:24,960
so first let me just like state what i

904
00:33:24,960 --> 00:33:27,600
think is the case um which is um that

905
00:33:27,600 --> 00:33:29,519
this is about replay by the proxy

906
00:33:29,519 --> 00:33:31,360
correct

907
00:33:31,360 --> 00:33:32,880
so the proxy is pretty much the only one

908
00:33:32,880 --> 00:33:34,640
that ever gets to see these messages so

909
00:33:34,640 --> 00:33:36,000
yeah

910
00:33:36,000 --> 00:33:37,279
right are you good just making sure i'm

911
00:33:37,279 --> 00:33:39,440
the same page as you um

912
00:33:39,440 --> 00:33:41,919
i think

913
00:33:42,320 --> 00:33:45,600
i mean i i guess i wonder like i mean i

914
00:33:45,600 --> 00:33:46,640
know i know

915
00:33:46,640 --> 00:33:49,120
as you say clocks are like terrible um

916
00:33:49,120 --> 00:33:50,080
um

917
00:33:50,080 --> 00:33:51,120
um

918
00:33:51,120 --> 00:33:52,720
but i wonder if the answer is just don't

919
00:33:52,720 --> 00:33:55,440
do that um you know uh we're talking

920
00:33:55,440 --> 00:33:57,519
we're talking a new protocol definition

921
00:33:57,519 --> 00:33:59,760
and um i i wonder if like maybe the

922
00:33:59,760 --> 00:34:01,120
answer is just like

923
00:34:01,120 --> 00:34:02,559
it is say well

924
00:34:02,559 --> 00:34:04,320
like like have an accurate clock or it's

925
00:34:04,320 --> 00:34:06,240
not gonna work

926
00:34:06,240 --> 00:34:07,279
um

927
00:34:07,279 --> 00:34:09,760
and uh um i guess i just like like i

928
00:34:09,760 --> 00:34:11,280
know we talked about i mean you alluded

929
00:34:11,280 --> 00:34:12,159
to some of these things but it's just

930
00:34:12,159 --> 00:34:15,839
like that the like just just just like

931
00:34:15,839 --> 00:34:18,000
you know naively accepting whatever date

932
00:34:18,000 --> 00:34:19,040
the server gives you has like all kinds

933
00:34:19,040 --> 00:34:21,280
of other problems um and

934
00:34:21,280 --> 00:34:22,159
um

935
00:34:22,159 --> 00:34:25,040
um and and if if um

936
00:34:25,040 --> 00:34:26,639
um you know i think well i guess i guess

937
00:34:26,639 --> 00:34:27,760
there are the other two there are two

938
00:34:27,760 --> 00:34:29,760
flavors of this right one is where you

939
00:34:29,760 --> 00:34:31,359
don't know or you know you accept it but

940
00:34:31,359 --> 00:34:32,480
only for the purpose of this message at

941
00:34:32,480 --> 00:34:33,599
which point you mess measures or not

942
00:34:33,599 --> 00:34:35,280
because it's basically nuts or the other

943
00:34:35,280 --> 00:34:36,560
is where you persist it at which point

944
00:34:36,560 --> 00:34:38,159
now you have a tracking problem i'm not

945
00:34:38,159 --> 00:34:39,760
sure how to do what and so it seems like

946
00:34:39,760 --> 00:34:41,199
and it seems like maybe like the answer

947
00:34:41,199 --> 00:34:42,719
is just like

948
00:34:42,719 --> 00:34:45,280
um it's just like fisher clocks so um i

949
00:34:45,280 --> 00:34:47,599
don't know but um i think um i guess i

950
00:34:47,599 --> 00:34:50,560
guess if i'm i i think i think my i

951
00:34:50,560 --> 00:34:53,040
guess maybe my my my bottom line is like

952
00:34:53,040 --> 00:34:54,480
either we should do

953
00:34:54,480 --> 00:34:56,079
not try to correct the clock at all and

954
00:34:56,079 --> 00:34:57,760
just do what you have this in this thing

955
00:34:57,760 --> 00:34:59,760
or have send a correct clock or you're

956
00:34:59,760 --> 00:35:00,880
gonna have to absorb around trip for

957
00:35:00,880 --> 00:35:02,400
knots i think it's probably my take on

958
00:35:02,400 --> 00:35:03,440
this i don't think i don't think trying

959
00:35:03,440 --> 00:35:05,280
to crack the clock is going to like this

960
00:35:05,280 --> 00:35:07,119
is a great idea

961
00:35:07,119 --> 00:35:09,200
so you you're thinking of having having

962
00:35:09,200 --> 00:35:10,720
the server respond with the nonce and

963
00:35:10,720 --> 00:35:12,800
then you have to

964
00:35:12,800 --> 00:35:14,720
make another request with that nonce

965
00:35:14,720 --> 00:35:16,879
well

966
00:35:18,160 --> 00:35:19,359
the mechanics and the mechanics

967
00:35:19,359 --> 00:35:21,440
obviously or if your clock is wrong then

968
00:35:21,440 --> 00:35:22,560
you're going to send a request and

969
00:35:22,560 --> 00:35:24,079
either it's going to be dropped or

970
00:35:24,079 --> 00:35:25,200
they're going to tell you to try again

971
00:35:25,200 --> 00:35:27,359
with some other new information and and

972
00:35:27,359 --> 00:35:30,240
and and the version and the version you

973
00:35:30,240 --> 00:35:32,000
have here uh the version of the next

974
00:35:32,000 --> 00:35:33,839
slide effectively is try again with a

975
00:35:33,839 --> 00:35:35,680
correct clock but i'm just saying that

976
00:35:35,680 --> 00:35:36,960
unless you're that if you're not going

977
00:35:36,960 --> 00:35:38,400
to store that clock information for very

978
00:35:38,400 --> 00:35:39,760
long then you might as well just try the

979
00:35:39,760 --> 00:35:41,760
knots and you can skip the clock part

980
00:35:41,760 --> 00:35:42,960
and then and then the way you think

981
00:35:42,960 --> 00:35:45,040
about this is the clock is the clock is

982
00:35:45,040 --> 00:35:46,560
a shortcut around the around the knots

983
00:35:46,560 --> 00:35:50,720
right um is going to think about this

984
00:35:52,640 --> 00:35:53,760
anyway i'm

985
00:35:53,760 --> 00:35:55,359
i'm not sure if i i guess i i'm just

986
00:35:55,359 --> 00:35:56,720
trying to avoid having this like having

987
00:35:56,720 --> 00:35:58,000
to like define the privacy rules around

988
00:35:58,000 --> 00:36:00,720
precision o'clock

989
00:36:00,720 --> 00:36:02,160
yeah i mean

990
00:36:02,160 --> 00:36:03,760
i i went through it in the other draft i

991
00:36:03,760 --> 00:36:05,280
think it's probably

992
00:36:05,280 --> 00:36:08,000
probably tractable but um yeah you you

993
00:36:08,000 --> 00:36:09,520
essentially if you have a bad clock you

994
00:36:09,520 --> 00:36:11,599
end up with with a round trip an extra

995
00:36:11,599 --> 00:36:13,119
round trip for every request that you

996
00:36:13,119 --> 00:36:15,760
you send which is unpleasant

997
00:36:15,760 --> 00:36:18,000
then

998
00:36:19,119 --> 00:36:21,200
uh so i i

999
00:36:21,200 --> 00:36:23,119
looked just briefly at the i guess two

1000
00:36:23,119 --> 00:36:25,520
drafts involved here um

1001
00:36:25,520 --> 00:36:27,119
neither of them seems to mention the

1002
00:36:27,119 --> 00:36:29,200
problem of

1003
00:36:29,200 --> 00:36:31,680
distinctive skew linkability so if

1004
00:36:31,680 --> 00:36:34,160
you're the only client who's 11 seconds

1005
00:36:34,160 --> 00:36:35,280
behind

1006
00:36:35,280 --> 00:36:37,839
then all of your requests become

1007
00:36:37,839 --> 00:36:40,160
thinkable you lose the oblivious

1008
00:36:40,160 --> 00:36:42,079
property

1009
00:36:42,079 --> 00:36:44,079
so including a date header in the inner

1010
00:36:44,079 --> 00:36:46,240
request is a little scary

1011
00:36:46,240 --> 00:36:47,760
unless it's

1012
00:36:47,760 --> 00:36:49,440
i guess

1013
00:36:49,440 --> 00:36:50,720
fuzzed

1014
00:36:50,720 --> 00:36:53,760
rather than quantized

1015
00:36:53,760 --> 00:36:56,480
anyway something to think about

1016
00:36:56,480 --> 00:36:59,119
yeah i did talk about fuzzing but uh i

1017
00:36:59,119 --> 00:37:00,720
should probably have

1018
00:37:00,720 --> 00:37:03,359
brought that out a little bit more

1019
00:37:03,359 --> 00:37:06,720
maybe ecker's idea is much much better

1020
00:37:06,720 --> 00:37:09,839
tell me

1021
00:37:14,079 --> 00:37:15,200
all right

1022
00:37:15,200 --> 00:37:16,720
one high level comment on this is like i

1023
00:37:16,720 --> 00:37:19,040
would suggest that the normative

1024
00:37:19,040 --> 00:37:20,320
bits

1025
00:37:20,320 --> 00:37:22,480
should be a bit more generalized that

1026
00:37:22,480 --> 00:37:24,160
they should be around the fact that the

1027
00:37:24,160 --> 00:37:25,680
client and the target

1028
00:37:25,680 --> 00:37:27,280
should ensure that the protocol that is

1029
00:37:27,280 --> 00:37:28,560
encapsulated

1030
00:37:28,560 --> 00:37:30,079
isn't going to be vulnerable to replay

1031
00:37:30,079 --> 00:37:31,440
attacks

1032
00:37:31,440 --> 00:37:32,400
and then

1033
00:37:32,400 --> 00:37:34,160
drill down more specifically for the

1034
00:37:34,160 --> 00:37:36,400
binary htb case and say okay here's the

1035
00:37:36,400 --> 00:37:37,440
date field or we talk about the

1036
00:37:37,440 --> 00:37:38,640
technique

1037
00:37:38,640 --> 00:37:41,119
and then yeah i mean calling out to your

1038
00:37:41,119 --> 00:37:42,160
draft

1039
00:37:42,160 --> 00:37:44,000
makes sense but i think probably be a

1040
00:37:44,000 --> 00:37:45,920
pretty soft

1041
00:37:45,920 --> 00:37:47,920
reference because

1042
00:37:47,920 --> 00:37:48,800
other

1043
00:37:48,800 --> 00:37:51,680
protocols like if i'm doing just dns

1044
00:37:51,680 --> 00:37:52,960
message wrong here or something new in

1045
00:37:52,960 --> 00:37:54,960
the future like that will have their own

1046
00:37:54,960 --> 00:37:56,400
considerations

1047
00:37:56,400 --> 00:37:58,079
and those don't need to be

1048
00:37:58,079 --> 00:38:00,160
a fundamental dependency

1049
00:38:00,160 --> 00:38:01,040
from

1050
00:38:01,040 --> 00:38:05,160
the main ohtp draft

1051
00:38:05,359 --> 00:38:07,920
yeah that's um

1052
00:38:07,920 --> 00:38:08,960
this is

1053
00:38:08,960 --> 00:38:11,440
really only http at this point so i

1054
00:38:11,440 --> 00:38:12,640
don't think we need to make it

1055
00:38:12,640 --> 00:38:14,480
particularly generic but it does i think

1056
00:38:14,480 --> 00:38:16,720
i think we do a text on the generic

1057
00:38:16,720 --> 00:38:19,599
protections that are necessary

1058
00:38:19,599 --> 00:38:21,760
if we don't then

1059
00:38:21,760 --> 00:38:25,280
let me know fix we'll fix it up

1060
00:38:25,440 --> 00:38:28,440
eric

1061
00:38:32,000 --> 00:38:33,520
yeah similar to the

1062
00:38:33,520 --> 00:38:35,520
to tommy's comment a moment ago i think

1063
00:38:35,520 --> 00:38:36,480
this is

1064
00:38:36,480 --> 00:38:38,640
enough of a case that a lot of the uses

1065
00:38:38,640 --> 00:38:40,720
of oblivious won't care about this to

1066
00:38:40,720 --> 00:38:42,240
the point where i don't know if this

1067
00:38:42,240 --> 00:38:44,560
really belongs in the main oblivious

1068
00:38:44,560 --> 00:38:46,000
draft at all this i think this should

1069
00:38:46,000 --> 00:38:47,040
either be

1070
00:38:47,040 --> 00:38:48,720
either something generalized or maybe

1071
00:38:48,720 --> 00:38:49,680
just a

1072
00:38:49,680 --> 00:38:52,240
a quick informational draft of

1073
00:38:52,240 --> 00:38:54,720
if you care about replayability attacks

1074
00:38:54,720 --> 00:38:56,800
and your oblivious usage here's what you

1075
00:38:56,800 --> 00:38:58,560
do about it and then the main draft can

1076
00:38:58,560 --> 00:39:00,480
just be nothing other than a citation of

1077
00:39:00,480 --> 00:39:01,359
hey

1078
00:39:01,359 --> 00:39:03,359
replay is a concern for it here's the

1079
00:39:03,359 --> 00:39:05,760
draft to look at if you do care but

1080
00:39:05,760 --> 00:39:08,079
overall since i think the majority of

1081
00:39:08,079 --> 00:39:10,480
usage won't care i don't think this

1082
00:39:10,480 --> 00:39:14,359
should be polluting the main draft

1083
00:39:17,280 --> 00:39:19,680
um okay let's take this to the list

1084
00:39:19,680 --> 00:39:21,119
because i think this is a little bit

1085
00:39:21,119 --> 00:39:22,720
more challenging than i

1086
00:39:22,720 --> 00:39:25,680
had anticipated

1087
00:39:26,240 --> 00:39:29,839
let's see where we're up to

1088
00:39:30,560 --> 00:39:32,640
and the queue is trained great so we'll

1089
00:39:32,640 --> 00:39:34,160
take the take that to list there's some

1090
00:39:34,160 --> 00:39:35,599
ideas floating around here that we can

1091
00:39:35,599 --> 00:39:36,960
probably take up

1092
00:39:36,960 --> 00:39:40,000
uh i'm not convinced that we can

1093
00:39:40,000 --> 00:39:41,440
ship something like this without some

1094
00:39:41,440 --> 00:39:43,839
replay protection but

1095
00:39:43,839 --> 00:39:45,920
we'll see

1096
00:39:45,920 --> 00:39:48,560
so um final final issues a couple of

1097
00:39:48,560 --> 00:39:50,079
small things

1098
00:39:50,079 --> 00:39:51,760
uh

1099
00:39:51,760 --> 00:39:55,520
issue number 58 uh and and 19 are things

1100
00:39:55,520 --> 00:39:57,040
that i think we can dispense with

1101
00:39:57,040 --> 00:39:59,760
relatively quickly here i just wanted to

1102
00:39:59,760 --> 00:40:00,720
test

1103
00:40:00,720 --> 00:40:02,880
since the room on two of these things

1104
00:40:02,880 --> 00:40:05,599
the first one 58 asks whether this work

1105
00:40:05,599 --> 00:40:08,640
should be experimental

1106
00:40:08,640 --> 00:40:10,560
i'm going to suggest no does anyone

1107
00:40:10,560 --> 00:40:13,440
disagree with me

1108
00:40:23,280 --> 00:40:24,880
please come to the like if you have an

1109
00:40:24,880 --> 00:40:26,880
opinion on this whether this document

1110
00:40:26,880 --> 00:40:28,800
should be experimental or standards

1111
00:40:28,800 --> 00:40:31,040
track

1112
00:40:35,040 --> 00:40:36,960
i've implemented this i think we plan to

1113
00:40:36,960 --> 00:40:39,839
ship this

1114
00:40:40,319 --> 00:40:43,280
and there are others so

1115
00:40:43,280 --> 00:40:46,000
it doesn't seem to make much sense to

1116
00:40:46,000 --> 00:40:49,280
make it a grand experiment but uh

1117
00:40:49,280 --> 00:40:52,240
i'd like to hear reasons why there's

1118
00:40:52,240 --> 00:40:54,400
feedback on the in the chat that says

1119
00:40:54,400 --> 00:40:57,359
not experimental

1120
00:40:59,920 --> 00:41:01,839
wouldn't it be great if medieca would

1121
00:41:01,839 --> 00:41:04,160
scroll the chat

1122
00:41:04,160 --> 00:41:07,520
all right so uh issue 19

1123
00:41:07,520 --> 00:41:08,800
uh

1124
00:41:08,800 --> 00:41:10,400
is um

1125
00:41:10,400 --> 00:41:12,000
talking about discovery and there's a

1126
00:41:12,000 --> 00:41:13,119
number of things that we could talk

1127
00:41:13,119 --> 00:41:14,640
about in discovery

1128
00:41:14,640 --> 00:41:17,119
um i think i'd just like to reaffirm

1129
00:41:17,119 --> 00:41:18,720
that we're not going to do it in this

1130
00:41:18,720 --> 00:41:21,040
draft

1131
00:41:21,040 --> 00:41:22,960
we may do it in this working group i

1132
00:41:22,960 --> 00:41:25,119
think tommy has a

1133
00:41:25,119 --> 00:41:27,040
document that's talking about discovery

1134
00:41:27,040 --> 00:41:29,119
or at least some aspects of the

1135
00:41:29,119 --> 00:41:32,160
discovery related to this

1136
00:41:32,160 --> 00:41:33,520
there may be other things that we need

1137
00:41:33,520 --> 00:41:35,599
to discuss about discovery

1138
00:41:35,599 --> 00:41:38,960
i suspect this is a very long topic

1139
00:41:38,960 --> 00:41:40,720
and we should we should continue having

1140
00:41:40,720 --> 00:41:43,439
those discussions

1141
00:41:45,119 --> 00:41:46,240
does anyone think that we need to

1142
00:41:46,240 --> 00:41:47,520
address

1143
00:41:47,520 --> 00:41:48,560
more

1144
00:41:48,560 --> 00:41:50,960
of the discovery problem in this in this

1145
00:41:50,960 --> 00:41:53,359
document

1146
00:41:57,280 --> 00:42:00,319
now i've got a couple of notes

1147
00:42:00,319 --> 00:42:03,560
but those people are sensible

1148
00:42:03,560 --> 00:42:06,319
[Music]

1149
00:42:06,319 --> 00:42:08,160
because i don't know how to do discovery

1150
00:42:08,160 --> 00:42:11,200
in this document uh because

1151
00:42:11,200 --> 00:42:12,800
yeah

1152
00:42:12,800 --> 00:42:15,359
i can imagine the service b config stuff

1153
00:42:15,359 --> 00:42:16,480
um

1154
00:42:16,480 --> 00:42:19,200
is is going to be enough of a challenge

1155
00:42:19,200 --> 00:42:22,160
for the what is it ddr

1156
00:42:22,160 --> 00:42:24,240
so

1157
00:42:24,240 --> 00:42:25,760
i would note that the charter text on

1158
00:42:25,760 --> 00:42:27,599
this says that the working group may

1159
00:42:27,599 --> 00:42:29,200
work on other use cases or deployment

1160
00:42:29,200 --> 00:42:30,480
models including those involved

1161
00:42:30,480 --> 00:42:33,440
discovery so this is at best secondary

1162
00:42:33,440 --> 00:42:36,000
in the charter

1163
00:42:39,040 --> 00:42:41,040
so

1164
00:42:41,040 --> 00:42:43,280
with that feedback i think we're good to

1165
00:42:43,280 --> 00:42:45,599
close that issue off

1166
00:42:45,599 --> 00:42:48,160
and move on

1167
00:42:48,160 --> 00:42:50,799
that's me done

1168
00:42:54,800 --> 00:42:56,960
thanks martin

1169
00:42:56,960 --> 00:43:00,800
i think next through

1170
00:43:05,520 --> 00:43:07,920
hello

1171
00:43:08,480 --> 00:43:10,720
hello uh theory did you wanna

1172
00:43:10,720 --> 00:43:11,550
uh

1173
00:43:11,550 --> 00:43:14,609
[Music]

1174
00:43:25,040 --> 00:43:27,040
you want to share a screen or um i think

1175
00:43:27,040 --> 00:43:29,119
it might be easier to do sharing

1176
00:43:29,119 --> 00:43:31,200
of pre-loaded slides

1177
00:43:31,200 --> 00:43:34,399
yeah that would be great yeah

1178
00:43:34,480 --> 00:43:38,359
wait do i have to okay

1179
00:43:52,319 --> 00:43:55,119
can you try controlling that

1180
00:43:55,119 --> 00:43:57,359
yeah

1181
00:44:02,880 --> 00:44:05,599
hey um good afternoon everyone i'll be

1182
00:44:05,599 --> 00:44:07,440
i'm through from i will be presenting

1183
00:44:07,440 --> 00:44:09,760
the obvious proxy feedback draft we

1184
00:44:09,760 --> 00:44:11,440
published this rap a few weeks back and

1185
00:44:11,440 --> 00:44:13,040
we got some feedback on this stuff so we

1186
00:44:13,040 --> 00:44:15,040
worked on that so i'll share

1187
00:44:15,040 --> 00:44:16,720
the feedback as well as what this draft

1188
00:44:16,720 --> 00:44:19,598
is trying to propose

1189
00:44:21,440 --> 00:44:23,200
the problem is quite straightforward

1190
00:44:23,200 --> 00:44:24,560
that uh

1191
00:44:24,560 --> 00:44:26,319
uh because we have there's an obvious

1192
00:44:26,319 --> 00:44:29,040
proxy which is basically uh masking all

1193
00:44:29,040 --> 00:44:30,880
the clients behind it and sending the

1194
00:44:30,880 --> 00:44:33,359
traffic there's a good chance that uh

1195
00:44:33,359 --> 00:44:34,160
the

1196
00:44:34,160 --> 00:44:35,599
traffic that's coming from the proxy

1197
00:44:35,599 --> 00:44:36,640
could

1198
00:44:36,640 --> 00:44:37,839
exceed the

1199
00:44:37,839 --> 00:44:40,400
uh capabilities of the target server and

1200
00:44:40,400 --> 00:44:42,000
that would cause it to start rate

1201
00:44:42,000 --> 00:44:43,440
limiting the traffic from the process

1202
00:44:43,440 --> 00:44:44,960
this is something that we have seen in

1203
00:44:44,960 --> 00:44:47,280
various deployments today with regard to

1204
00:44:47,280 --> 00:44:49,119
various types of rate limiting that gets

1205
00:44:49,119 --> 00:44:51,599
applied uh but this is quite different

1206
00:44:51,599 --> 00:44:53,040
that because there's a proxy involved

1207
00:44:53,040 --> 00:44:54,720
typically the rate limiting is usually

1208
00:44:54,720 --> 00:44:56,400
applied for clients but in this case the

1209
00:44:56,400 --> 00:44:57,839
right lifting would get applied to the

1210
00:44:57,839 --> 00:44:59,920
proxy and if the rate clipping gets

1211
00:44:59,920 --> 00:45:01,920
applied to the proxy then it would start

1212
00:45:01,920 --> 00:45:03,520
harming all the clients that are behind

1213
00:45:03,520 --> 00:45:05,119
the proxy that's the problem that we are

1214
00:45:05,119 --> 00:45:08,480
trying to solve by this draft

1215
00:45:10,560 --> 00:45:12,880
the proposal is to signal the overload

1216
00:45:12,880 --> 00:45:16,000
from the server to the ws proxy and the

1217
00:45:16,000 --> 00:45:18,400
proxy uses this feedback to rate limit

1218
00:45:18,400 --> 00:45:21,440
uh any http request from uh like

1219
00:45:21,440 --> 00:45:23,359
offending clients or misbehaving clients

1220
00:45:23,359 --> 00:45:25,520
or botnets which are trying to overwhelm

1221
00:45:25,520 --> 00:45:26,800
the server

1222
00:45:26,800 --> 00:45:27,760
uh

1223
00:45:27,760 --> 00:45:29,839
one of the feedback that we got was uh

1224
00:45:29,839 --> 00:45:31,680
there's already a draft in http api

1225
00:45:31,680 --> 00:45:33,599
working group with regard to use of rate

1226
00:45:33,599 --> 00:45:34,960
limit headers which basically is

1227
00:45:34,960 --> 00:45:36,880
publishing the quotas or service limits

1228
00:45:36,880 --> 00:45:40,319
to clients uh we updated the proposal

1229
00:45:40,319 --> 00:45:42,720
that we have to align with this draft to

1230
00:45:42,720 --> 00:45:44,560
basically send those quotas or service

1231
00:45:44,560 --> 00:45:46,240
limits only to the proxy and not to

1232
00:45:46,240 --> 00:45:49,759
these offending clients

1233
00:45:51,680 --> 00:45:53,760
so what we did was uh we introduced a

1234
00:45:53,760 --> 00:45:55,599
new uh

1235
00:45:55,599 --> 00:45:57,680
proxy header earlier in the zero zero

1236
00:45:57,680 --> 00:45:59,520
version we had just a feedback editor

1237
00:45:59,520 --> 00:46:01,680
and the feedback was not to pick a very

1238
00:46:01,680 --> 00:46:04,640
generic header so we changed it to ohi

1239
00:46:04,640 --> 00:46:06,560
proxy feedback header which provides

1240
00:46:06,560 --> 00:46:08,560
feedback from either the

1241
00:46:08,560 --> 00:46:10,160
request resource or target resource to

1242
00:46:10,160 --> 00:46:12,400
the proxy and the whole idea is the

1243
00:46:12,400 --> 00:46:14,079
proxy would remove the header before

1244
00:46:14,079 --> 00:46:18,079
sending the http response to the client

1245
00:46:19,599 --> 00:46:23,359
a simple uh workflow would be like the

1246
00:46:23,359 --> 00:46:26,000
client gets sent in that's in

1247
00:46:26,000 --> 00:46:28,160
a crafted packet just to target the

1248
00:46:28,160 --> 00:46:29,440
server and

1249
00:46:29,440 --> 00:46:31,520
the target resource identifies that it's

1250
00:46:31,520 --> 00:46:32,160
an

1251
00:46:32,160 --> 00:46:35,280
uh malicious request and it sends in 400

1252
00:46:35,280 --> 00:46:37,599
response along with the ohio proxy

1253
00:46:37,599 --> 00:46:39,599
feedback back to the request resource

1254
00:46:39,599 --> 00:46:40,960
which which again forwards it to the

1255
00:46:40,960 --> 00:46:42,880
proxy proxy basically takes it out from

1256
00:46:42,880 --> 00:46:45,920
the foreign response puts it in uh

1257
00:46:45,920 --> 00:46:47,680
the request resource takes it out and

1258
00:46:47,680 --> 00:46:49,920
puts it in the 200 response only for the

1259
00:46:49,920 --> 00:46:52,079
consumption of the proxy and sends the

1260
00:46:52,079 --> 00:46:54,560
encapsulated 400 response without this

1261
00:46:54,560 --> 00:46:56,480
feedback header and then the proxy

1262
00:46:56,480 --> 00:46:57,839
applies this

1263
00:46:57,839 --> 00:47:00,079
rate limiting rules that if it believes

1264
00:47:00,079 --> 00:47:01,440
is the right remitting rules that the

1265
00:47:01,440 --> 00:47:05,119
target resource has given it and the 400

1266
00:47:05,119 --> 00:47:09,960
response would hit the client back

1267
00:47:11,280 --> 00:47:13,119
so what we did was uh all these

1268
00:47:13,119 --> 00:47:14,880
parameters that we have would be part of

1269
00:47:14,880 --> 00:47:16,079
this uh

1270
00:47:16,079 --> 00:47:18,720
proxy feedback header uh so we have

1271
00:47:18,720 --> 00:47:20,880
picked the various uh

1272
00:47:20,880 --> 00:47:22,720
fields that are there in the rate limit

1273
00:47:22,720 --> 00:47:25,200
headers to be part of this header which

1274
00:47:25,200 --> 00:47:28,079
would be sent back to the proxy for

1275
00:47:28,079 --> 00:47:30,079
enforcing this rate limits either for

1276
00:47:30,079 --> 00:47:32,640
the proxy to enforce late remits or for

1277
00:47:32,640 --> 00:47:34,559
if it's an offending client which is

1278
00:47:34,559 --> 00:47:36,400
trying to attack the server then the

1279
00:47:36,400 --> 00:47:39,280
target server can ask to the proxy to uh

1280
00:47:39,280 --> 00:47:41,599
rate limit this uh offending client and

1281
00:47:41,599 --> 00:47:42,720
uh

1282
00:47:42,720 --> 00:47:44,720
and the server obviously in this case

1283
00:47:44,720 --> 00:47:46,240
would not have any information about the

1284
00:47:46,240 --> 00:47:47,359
client

1285
00:47:47,359 --> 00:47:48,880
all right do could i ask you a

1286
00:47:48,880 --> 00:47:50,319
clarifying question please sorry to

1287
00:47:50,319 --> 00:47:52,880
interrupt yeah could you go

1288
00:47:52,880 --> 00:47:55,520
one slide to slide five please

1289
00:47:55,520 --> 00:47:57,440
sure

1290
00:47:57,440 --> 00:47:58,559
so

1291
00:47:58,559 --> 00:48:00,720
when you were first explaining this i

1292
00:48:00,720 --> 00:48:03,440
was assuming that the request resource

1293
00:48:03,440 --> 00:48:05,520
was getting too many requests from the

1294
00:48:05,520 --> 00:48:07,839
proxy resource

1295
00:48:07,839 --> 00:48:09,440
but now i'm kind of thinking that the

1296
00:48:09,440 --> 00:48:10,960
target resource is getting too many from

1297
00:48:10,960 --> 00:48:13,359
the request resource so can you clarify

1298
00:48:13,359 --> 00:48:15,359
in which which server is being

1299
00:48:15,359 --> 00:48:16,640
overwhelmed or

1300
00:48:16,640 --> 00:48:19,040
receiving malicious requests here so so

1301
00:48:19,040 --> 00:48:20,960
in this example we have just targeted

1302
00:48:20,960 --> 00:48:22,800
the target resource getting an offending

1303
00:48:22,800 --> 00:48:24,880
packet for example assuming it's getting

1304
00:48:24,880 --> 00:48:27,040
an abnormal header the attack could be

1305
00:48:27,040 --> 00:48:28,640
even on the request resource that it's

1306
00:48:28,640 --> 00:48:30,559
getting let's say and garbled

1307
00:48:30,559 --> 00:48:32,640
encapsulated request and it tries to

1308
00:48:32,640 --> 00:48:34,240
decrypt it and it just fails so the

1309
00:48:34,240 --> 00:48:35,599
attack could happen

1310
00:48:35,599 --> 00:48:37,440
the draft currently talks about attacks

1311
00:48:37,440 --> 00:48:41,040
uh encapsulated malformed uh request or

1312
00:48:41,040 --> 00:48:42,559
higher rate of

1313
00:48:42,559 --> 00:48:44,240
request coming and hitting the request

1314
00:48:44,240 --> 00:48:45,520
resource or it could be hitting the

1315
00:48:45,520 --> 00:48:49,839
target resource with crafted packets

1316
00:48:50,000 --> 00:48:51,200
okay thank you i'm gonna need to think

1317
00:48:51,200 --> 00:48:53,200
about this some more

1318
00:48:53,200 --> 00:48:55,520
thank you

1319
00:48:58,079 --> 00:49:00,240
hi um eric scroll um

1320
00:49:00,240 --> 00:49:01,680
i guess i'm a little unclear on how this

1321
00:49:01,680 --> 00:49:03,119
is supposed to work

1322
00:49:03,119 --> 00:49:06,160
so um you know the um you give the

1323
00:49:06,160 --> 00:49:08,160
example of um

1324
00:49:08,160 --> 00:49:10,880
of a uh undergraduate message but like

1325
00:49:10,880 --> 00:49:12,160
it's perfectly easy to make a decrepit

1326
00:49:12,160 --> 00:49:14,400
robust critical message right so i guess

1327
00:49:14,400 --> 00:49:15,440
like

1328
00:49:15,440 --> 00:49:17,040
so i guess like what i'm trying to

1329
00:49:17,040 --> 00:49:18,000
understand i mean it's like there's

1330
00:49:18,000 --> 00:49:19,599
there's like like so there's like one

1331
00:49:19,599 --> 00:49:21,280
very specific set of veg cases where

1332
00:49:21,280 --> 00:49:23,280
somehow there's a particular kind of

1333
00:49:23,280 --> 00:49:25,920
like message i send that like has abuse

1334
00:49:25,920 --> 00:49:28,000
like has abusively high single message

1335
00:49:28,000 --> 00:49:29,680
consumption of resources on the server

1336
00:49:29,680 --> 00:49:31,520
um like i do something that requires you

1337
00:49:31,520 --> 00:49:33,200
like making a normal secret powerful big

1338
00:49:33,200 --> 00:49:35,119
computation right and then no legitimate

1339
00:49:35,119 --> 00:49:37,280
client would ask for but the way that

1340
00:49:37,280 --> 00:49:38,880
dots and act like frequently work is i

1341
00:49:38,880 --> 00:49:41,520
send legitimate appearing requests and

1342
00:49:41,520 --> 00:49:43,040
um and they're indistinguishable from

1343
00:49:43,040 --> 00:49:44,240
illegitimate requests and their problems

1344
00:49:44,240 --> 00:49:46,720
the volume of those requests and so

1345
00:49:46,720 --> 00:49:48,800
given so i don't understand like which

1346
00:49:48,800 --> 00:49:50,720
give it if you're getting if you get you

1347
00:49:50,720 --> 00:49:52,160
know if you're if you're able to channel

1348
00:49:52,160 --> 00:49:53,599
a thousand requests a second and you're

1349
00:49:53,599 --> 00:49:55,839
getting five thousand requests a second

1350
00:49:55,839 --> 00:49:57,520
like to which ones do you send the

1351
00:49:57,520 --> 00:50:00,240
throttling messages

1352
00:50:00,559 --> 00:50:02,000
yeah there are two types of attacks when

1353
00:50:02,000 --> 00:50:03,680
i was referring to either it could be a

1354
00:50:03,680 --> 00:50:06,160
simple http flood or it could be a flash

1355
00:50:06,160 --> 00:50:08,280
cloud scenario and it's quite

1356
00:50:08,280 --> 00:50:10,160
undiscontinual in which case the target

1357
00:50:10,160 --> 00:50:11,680
resource is getting over and branded

1358
00:50:11,680 --> 00:50:13,440
want to handle those the other one is

1359
00:50:13,440 --> 00:50:15,440
basically an attack where it could be a

1360
00:50:15,440 --> 00:50:17,440
slow loris or it could be a malformed

1361
00:50:17,440 --> 00:50:19,599
request or a garbled request kind of an

1362
00:50:19,599 --> 00:50:21,280
attack

1363
00:50:21,280 --> 00:50:23,440
okay but we agree this does not work for

1364
00:50:23,440 --> 00:50:24,960
the ones where it's just a lot it was

1365
00:50:24,960 --> 00:50:26,319
just a lot of legitimate looking traffic

1366
00:50:26,319 --> 00:50:28,079
right

1367
00:50:28,079 --> 00:50:30,000
sorry i didn't get that we agree this

1368
00:50:30,000 --> 00:50:32,319
does not work for ones where the traffic

1369
00:50:32,319 --> 00:50:34,480
is legitimate working right

1370
00:50:34,480 --> 00:50:36,960
yeah yeah

1371
00:50:36,960 --> 00:50:38,559
the malicious request is not for the

1372
00:50:38,559 --> 00:50:40,480
legitimate tracking but for if the

1373
00:50:40,480 --> 00:50:41,839
target resource is getting really

1374
00:50:41,839 --> 00:50:43,839
overwhelmed with let's say

1375
00:50:43,839 --> 00:50:45,440
black millions of requests coming from

1376
00:50:45,440 --> 00:50:47,359
the proxy and it wants to rate limit

1377
00:50:47,359 --> 00:50:49,040
then it can basically signal that the

1378
00:50:49,040 --> 00:50:50,640
rate limit is not just specific for a

1379
00:50:50,640 --> 00:50:55,240
client it could be for the proxy as well

1380
00:50:57,839 --> 00:50:59,520
i guess i'm still not like

1381
00:50:59,520 --> 00:51:01,200
i hear you're saying but i don't i don't

1382
00:51:01,200 --> 00:51:02,319
see how this works because you're just

1383
00:51:02,319 --> 00:51:04,000
now you're just rate limiting everybody

1384
00:51:04,000 --> 00:51:05,839
like you got you got i mean for this to

1385
00:51:05,839 --> 00:51:07,359
work properly to discriminate between

1386
00:51:07,359 --> 00:51:09,359
the valid traffic and invalid traffic

1387
00:51:09,359 --> 00:51:10,240
and

1388
00:51:10,240 --> 00:51:12,000
um you know if you just don't like how

1389
00:51:12,000 --> 00:51:13,440
much bandwidth you're getting likes like

1390
00:51:13,440 --> 00:51:15,040
you know slow down your tcp stack or

1391
00:51:15,040 --> 00:51:16,640
something i mean like it just seems like

1392
00:51:16,640 --> 00:51:19,359
you know i mean i i guess

1393
00:51:19,359 --> 00:51:20,640
i mean

1394
00:51:20,640 --> 00:51:22,480
it seems like i mean i i guess if you're

1395
00:51:22,480 --> 00:51:23,839
just trying to like like narrow the

1396
00:51:23,839 --> 00:51:25,359
amount of bandwidth being assumed but

1397
00:51:25,359 --> 00:51:26,960
you're not like actually writing any any

1398
00:51:26,960 --> 00:51:29,920
better service right

1399
00:51:29,920 --> 00:51:32,400
yeah narrowing the bandwidth to to

1400
00:51:32,400 --> 00:51:34,160
basically give an equal share to all the

1401
00:51:34,160 --> 00:51:37,839
clients both the legitimate and uh

1402
00:51:37,839 --> 00:51:39,200
i don't understand how that works what

1403
00:51:39,200 --> 00:51:41,040
i'm saying is is that like

1404
00:51:41,040 --> 00:51:43,440
the the nature of the proxy

1405
00:51:43,440 --> 00:51:44,640
is to

1406
00:51:44,640 --> 00:51:46,319
transparently send the data coming into

1407
00:51:46,319 --> 00:51:49,200
the data coming out and so in order to

1408
00:51:49,200 --> 00:51:51,040
and so like and it will like naturally

1409
00:51:51,040 --> 00:51:52,400
attempt to share between those clients

1410
00:51:52,400 --> 00:51:54,720
right and so if you want to like do less

1411
00:51:54,720 --> 00:51:56,559
you've got to somehow tell it give these

1412
00:51:56,559 --> 00:51:58,000
clients less and these other clients

1413
00:51:58,000 --> 00:51:58,960
more i don't understand how you're

1414
00:51:58,960 --> 00:52:01,599
saying that well but ecker the the whole

1415
00:52:01,599 --> 00:52:04,079
concept here is that the resource server

1416
00:52:04,079 --> 00:52:06,160
can't or the request server can't

1417
00:52:06,160 --> 00:52:09,280
distinguish the clients

1418
00:52:09,280 --> 00:52:11,280
i think the idea here is to say dear

1419
00:52:11,280 --> 00:52:14,079
proxy server figure it out

1420
00:52:14,079 --> 00:52:16,079
because you can see the clients

1421
00:52:16,079 --> 00:52:17,040
by

1422
00:52:17,040 --> 00:52:20,720
uh okay but i guess like

1423
00:52:20,720 --> 00:52:24,400
sure okay i guess but like

1424
00:52:24,400 --> 00:52:26,160
um i mean i would hope the processor

1425
00:52:26,160 --> 00:52:28,559
would always do that i guess

1426
00:52:28,559 --> 00:52:30,559
one might think

1427
00:52:30,559 --> 00:52:34,720
so we have a bit of a cue here um tommy

1428
00:52:34,720 --> 00:52:36,879
hey

1429
00:52:38,319 --> 00:52:39,760
all right um

1430
00:52:39,760 --> 00:52:42,000
thank you teru um so

1431
00:52:42,000 --> 00:52:43,200
actually to this point that you have on

1432
00:52:43,200 --> 00:52:45,599
the slide right here about aligning

1433
00:52:45,599 --> 00:52:47,200
with the rate limiting

1434
00:52:47,200 --> 00:52:49,440
um it doesn't really seem to be quite

1435
00:52:49,440 --> 00:52:51,520
aligned i see that you're using some of

1436
00:52:51,520 --> 00:52:54,319
the same terms as like the values of

1437
00:52:54,319 --> 00:52:56,400
your http fields

1438
00:52:56,400 --> 00:52:57,680
but

1439
00:52:57,680 --> 00:53:00,000
in the right limit document those are

1440
00:53:00,000 --> 00:53:01,599
the actual

1441
00:53:01,599 --> 00:53:03,359
field names the header name so i would

1442
00:53:03,359 --> 00:53:04,880
really suggest like

1443
00:53:04,880 --> 00:53:07,520
just use the rate limit headers i i

1444
00:53:07,520 --> 00:53:09,119
don't see

1445
00:53:09,119 --> 00:53:10,400
really what we're getting from these

1446
00:53:10,400 --> 00:53:12,960
additional ones um

1447
00:53:12,960 --> 00:53:14,800
and overall the reason why we didn't

1448
00:53:14,800 --> 00:53:16,800
pick the fields as is as what is there

1449
00:53:16,800 --> 00:53:18,480
in the rate limit header was we didn't

1450
00:53:18,480 --> 00:53:20,640
want this uh signal to go back to the

1451
00:53:20,640 --> 00:53:22,640
client if it goes back to the client

1452
00:53:22,640 --> 00:53:24,240
then probably the client would know that

1453
00:53:24,240 --> 00:53:26,160
hey it's attack strategy is being

1454
00:53:26,160 --> 00:53:28,559
identified and that's being mitigated so

1455
00:53:28,559 --> 00:53:30,240
we wanted the signal only to reach the

1456
00:53:30,240 --> 00:53:31,440
proxy

1457
00:53:31,440 --> 00:53:33,359
so how do you distinguish other

1458
00:53:33,359 --> 00:53:36,078
fields that are

1459
00:53:36,400 --> 00:53:39,520
i guess i would say um overall for ohtp

1460
00:53:39,520 --> 00:53:41,200
if it's not already said

1461
00:53:41,200 --> 00:53:44,720
the proxy should not just be relaying

1462
00:53:44,720 --> 00:53:46,720
arbitrary headers between the target and

1463
00:53:46,720 --> 00:53:49,040
the client or the client and the target

1464
00:53:49,040 --> 00:53:50,640
um

1465
00:53:50,640 --> 00:53:52,160
i i

1466
00:53:52,160 --> 00:53:54,240
if that's not said it should be said by

1467
00:53:54,240 --> 00:53:55,680
i wouldn't expect that the proxy would

1468
00:53:55,680 --> 00:53:57,119
just say oh yeah the target just can

1469
00:53:57,119 --> 00:53:58,800
just include whatever random data it

1470
00:53:58,800 --> 00:54:00,400
wants and then we'll send it

1471
00:54:00,400 --> 00:54:03,119
kind of as clear text not inside

1472
00:54:03,119 --> 00:54:06,400
the actual encrypted payload

1473
00:54:06,400 --> 00:54:08,240
right and with the current rate limit

1474
00:54:08,240 --> 00:54:09,440
header i believe it will be in the

1475
00:54:09,440 --> 00:54:11,119
encapsulated response so the proxy

1476
00:54:11,119 --> 00:54:12,960
wouldn't even know what is there in that

1477
00:54:12,960 --> 00:54:14,559
right

1478
00:54:14,559 --> 00:54:15,760
yeah

1479
00:54:15,760 --> 00:54:19,119
um and then overall this seems like it's

1480
00:54:19,119 --> 00:54:20,640
like what we should have here is just

1481
00:54:20,640 --> 00:54:23,040
normal rate limiting between the target

1482
00:54:23,040 --> 00:54:24,480
and the proxy saying hey proxy you're

1483
00:54:24,480 --> 00:54:26,000
sending me too much

1484
00:54:26,000 --> 00:54:28,240
and then the proxy should just figure

1485
00:54:28,240 --> 00:54:29,680
out on its own

1486
00:54:29,680 --> 00:54:31,359
what it needs to do about that and it

1487
00:54:31,359 --> 00:54:33,119
can identify its own clients that are

1488
00:54:33,119 --> 00:54:35,040
overwhelming it

1489
00:54:35,040 --> 00:54:35,839
right

1490
00:54:35,839 --> 00:54:37,040
but

1491
00:54:37,040 --> 00:54:38,400
that's it we should just leave it very

1492
00:54:38,400 --> 00:54:40,960
very simple this is just two

1493
00:54:40,960 --> 00:54:42,319
layers of

1494
00:54:42,319 --> 00:54:43,760
normal rate limit headers and we don't

1495
00:54:43,760 --> 00:54:46,799
need another header field here i think

1496
00:54:46,799 --> 00:54:49,599
okay so sure yes we can restrict that

1497
00:54:49,599 --> 00:54:52,240
quick point of order um did you have

1498
00:54:52,240 --> 00:54:54,160
more uh presentation content you wanted

1499
00:54:54,160 --> 00:54:55,839
to get through because we have a queue

1500
00:54:55,839 --> 00:54:58,079
here we can put that off so you're done

1501
00:54:58,079 --> 00:55:00,640
sure uh just one more slide so basically

1502
00:55:00,640 --> 00:55:02,640
uh if

1503
00:55:02,640 --> 00:55:04,079
i wanted to have a discussion whether

1504
00:55:04,079 --> 00:55:05,920
this header needs to be only conveyed to

1505
00:55:05,920 --> 00:55:07,839
trusted proxies and

1506
00:55:07,839 --> 00:55:10,160
if an attacking proxy which is colluding

1507
00:55:10,160 --> 00:55:11,920
with attacking clients would leak this

1508
00:55:11,920 --> 00:55:13,520
feedback to change the attack strategy

1509
00:55:13,520 --> 00:55:14,319
so

1510
00:55:14,319 --> 00:55:16,079
is this something that

1511
00:55:16,079 --> 00:55:18,480
needs to be only conveyed to proxies

1512
00:55:18,480 --> 00:55:21,839
which authenticate back to the

1513
00:55:21,839 --> 00:55:23,760
target reso target and resource servers

1514
00:55:23,760 --> 00:55:26,000
or could this be used with any any any

1515
00:55:26,000 --> 00:55:26,960
proxy

1516
00:55:26,960 --> 00:55:28,079
that was

1517
00:55:28,079 --> 00:55:30,480
one of the questions i wanted to discuss

1518
00:55:30,480 --> 00:55:33,960
with the working

1519
00:55:35,200 --> 00:55:38,879
all right going back to the queue eric

1520
00:55:44,240 --> 00:55:47,959
mr escort law

1521
00:55:53,520 --> 00:55:56,480
all right reggie

1522
00:55:57,359 --> 00:55:59,920
from piconets uh just wanted to say you

1523
00:55:59,920 --> 00:56:00,960
know um

1524
00:56:00,960 --> 00:56:03,680
i have only personally reviewed the

1525
00:56:03,680 --> 00:56:07,119
draft but um at least based on heroes

1526
00:56:07,119 --> 00:56:09,200
description if we can go back a couple

1527
00:56:09,200 --> 00:56:12,319
of slides um i am still unconvinced

1528
00:56:12,319 --> 00:56:14,799
whether this uh rate limit based

1529
00:56:14,799 --> 00:56:16,720
approach is the right

1530
00:56:16,720 --> 00:56:19,440
uh approach to take to try and mitigate

1531
00:56:19,440 --> 00:56:22,160
these challenges so i i i see clearly

1532
00:56:22,160 --> 00:56:23,920
that there are two types of challenges

1533
00:56:23,920 --> 00:56:25,520
here that uh you know like eric

1534
00:56:25,520 --> 00:56:26,480
mentioned

1535
00:56:26,480 --> 00:56:30,000
one type which is where there is a

1536
00:56:30,000 --> 00:56:31,440
obviously

1537
00:56:31,440 --> 00:56:32,559
uh

1538
00:56:32,559 --> 00:56:36,000
individual request that is likely to be

1539
00:56:36,000 --> 00:56:38,799
malicious in nature either because of of

1540
00:56:38,799 --> 00:56:40,480
the scope of that individual request or

1541
00:56:40,480 --> 00:56:43,680
how it is structured uh it may contain

1542
00:56:43,680 --> 00:56:45,920
junk or it may contain the kind of

1543
00:56:45,920 --> 00:56:47,440
content which will

1544
00:56:47,440 --> 00:56:50,319
is designed to overload the server okay

1545
00:56:50,319 --> 00:56:51,119
so

1546
00:56:51,119 --> 00:56:52,960
there the challenge is the fact that

1547
00:56:52,960 --> 00:56:56,000
it's a malicious or uh

1548
00:56:56,000 --> 00:56:58,640
you know overloading style request

1549
00:56:58,640 --> 00:57:02,559
which you want to restrict the second

1550
00:57:02,559 --> 00:57:05,040
uh condition that we are looking at is

1551
00:57:05,040 --> 00:57:07,599
like eric mentioned a large amount of

1552
00:57:07,599 --> 00:57:09,920
legitimate looking requests but just at

1553
00:57:09,920 --> 00:57:13,599
a scale designed to disrupt the target

1554
00:57:13,599 --> 00:57:15,760
server okay now

1555
00:57:15,760 --> 00:57:16,640
in

1556
00:57:16,640 --> 00:57:19,040
scenario one where it's an individual

1557
00:57:19,040 --> 00:57:22,000
request that is malicious by nature of

1558
00:57:22,000 --> 00:57:24,400
its content okay

1559
00:57:24,400 --> 00:57:27,359
fill rate limiting

1560
00:57:28,480 --> 00:57:30,079
are you going to send back a rate limit

1561
00:57:30,079 --> 00:57:32,319
of zero because that's the only way you

1562
00:57:32,319 --> 00:57:35,040
can guarantee that the next request does

1563
00:57:35,040 --> 00:57:36,640
not come through

1564
00:57:36,640 --> 00:57:39,040
right because here it's not the volume

1565
00:57:39,040 --> 00:57:41,440
of the request that is a problem for the

1566
00:57:41,440 --> 00:57:44,160
server it's the nature of the request so

1567
00:57:44,160 --> 00:57:46,400
i have three clients each sending one

1568
00:57:46,400 --> 00:57:47,520
request

1569
00:57:47,520 --> 00:57:50,559
per minute but if those requests are

1570
00:57:50,559 --> 00:57:51,599
designed

1571
00:57:51,599 --> 00:57:54,720
to bring my server down and

1572
00:57:54,720 --> 00:57:56,559
and the only way for me to stop them

1573
00:57:56,559 --> 00:57:58,319
from coming is to send a rate limit of

1574
00:57:58,319 --> 00:58:00,559
zero because these kind of malicious

1575
00:58:00,559 --> 00:58:03,920
requests are not designed to be limited

1576
00:58:03,920 --> 00:58:05,760
by a rate limit

1577
00:58:05,760 --> 00:58:07,280
type of mechanism

1578
00:58:07,280 --> 00:58:10,160
so in the first in the first case rate

1579
00:58:10,160 --> 00:58:12,400
limit is obviously the wrong

1580
00:58:12,400 --> 00:58:16,160
approach to take to try and uh you know

1581
00:58:16,160 --> 00:58:17,760
mitigate or block that particular

1582
00:58:17,760 --> 00:58:20,160
traffic hey rajiv i'll answer the first

1583
00:58:20,160 --> 00:58:22,079
question i think uh if you look at the

1584
00:58:22,079 --> 00:58:24,160
rate limit headers graph right it allows

1585
00:58:24,160 --> 00:58:26,720
a rate limit uh uh option where you set

1586
00:58:26,720 --> 00:58:28,960
it to zero basically that means to say

1587
00:58:28,960 --> 00:58:30,640
that the server is not willing to accept

1588
00:58:30,640 --> 00:58:32,400
any any further client so the rate limit

1589
00:58:32,400 --> 00:58:34,799
is typically a block action

1590
00:58:34,799 --> 00:58:36,559
correct but then in this particular

1591
00:58:36,559 --> 00:58:38,480
scenario because of the fact that you

1592
00:58:38,480 --> 00:58:41,520
have two levels of intermediation with

1593
00:58:41,520 --> 00:58:43,680
anonymization happening in between what

1594
00:58:43,680 --> 00:58:45,680
you have effectively done by allowing

1595
00:58:45,680 --> 00:58:47,839
rate limit zero to be said is you have

1596
00:58:47,839 --> 00:58:50,880
dosed your entire proxy infrastructure

1597
00:58:50,880 --> 00:58:52,880
no uh so if you see the headers that we

1598
00:58:52,880 --> 00:58:54,319
have defined we have defined multiple

1599
00:58:54,319 --> 00:58:56,319
headers one is rate limit p limit which

1600
00:58:56,319 --> 00:58:59,280
is for the proxy and one is rate limit

1601
00:58:59,280 --> 00:59:01,359
uh uh rate limit hyphen limit which is

1602
00:59:01,359 --> 00:59:02,880
for the client basis

1603
00:59:02,880 --> 00:59:05,520
which then brings into the picture the

1604
00:59:05,520 --> 00:59:08,240
fact that now the now the dependence is

1605
00:59:08,240 --> 00:59:10,640
on the target server somehow knowing

1606
00:59:10,640 --> 00:59:12,400
that this is coming through a proxy

1607
00:59:12,400 --> 00:59:14,160
infrastructure and i need to have

1608
00:59:14,160 --> 00:59:16,480
separate headers for that or you are

1609
00:59:16,480 --> 00:59:18,400
talking of putting intelligence at the

1610
00:59:18,400 --> 00:59:19,760
request

1611
00:59:19,760 --> 00:59:22,240
resource level to identify that when i

1612
00:59:22,240 --> 00:59:25,280
get a rate limit zero okay i am now

1613
00:59:25,280 --> 00:59:27,599
supposed to be uh

1614
00:59:27,599 --> 00:59:29,760
setting the rate limit p limit and

1615
00:59:29,760 --> 00:59:32,799
sending that onwards to the proxy but

1616
00:59:32,799 --> 00:59:35,760
in in most cases the expectation from

1617
00:59:35,760 --> 00:59:38,240
the target resource will be hey i am

1618
00:59:38,240 --> 00:59:40,079
talking to the requester resource that's

1619
00:59:40,079 --> 00:59:41,440
that's all i know

1620
00:59:41,440 --> 00:59:43,599
okay i am the whole point of being

1621
00:59:43,599 --> 00:59:45,599
oblivious is that the target resource

1622
00:59:45,599 --> 00:59:47,920
should not have to know that it's coming

1623
00:59:47,920 --> 00:59:49,599
through a proxy infrastructure

1624
00:59:49,599 --> 00:59:53,040
anonymization intermediation is all

1625
00:59:53,040 --> 00:59:55,359
a black box to it all it knows is i've

1626
00:59:55,359 --> 00:59:57,200
received

1627
00:59:57,200 --> 01:00:00,160
a malicious request from request

1628
01:00:00,160 --> 01:00:02,079
resource so i'm sending a rate limit

1629
01:00:02,079 --> 01:00:03,520
zero to that request resource which

1630
01:00:03,520 --> 01:00:06,079
means anyone any other traffic coming

1631
01:00:06,079 --> 01:00:07,599
through that request resource has

1632
01:00:07,599 --> 01:00:09,920
effectively now been dosed

1633
01:00:09,920 --> 01:00:12,000
yeah it all depends on if the request

1634
01:00:12,000 --> 01:00:13,520
resource and target resource writer

1635
01:00:13,520 --> 01:00:15,119
requests because all this can share that

1636
01:00:15,119 --> 01:00:16,960
it's coming by a client or a proxy right

1637
01:00:16,960 --> 01:00:18,400
otherwise if it's let's say if it's a

1638
01:00:18,400 --> 01:00:21,200
direct communication

1639
01:00:24,240 --> 01:00:26,079
for example in case the target server

1640
01:00:26,079 --> 01:00:27,760
could be attacked by both the client

1641
01:00:27,760 --> 01:00:30,000
directly talking to the server or it

1642
01:00:30,000 --> 01:00:32,640
could be coming by an oblivious uh path

1643
01:00:32,640 --> 01:00:34,559
right yeah in both the cases the server

1644
01:00:34,559 --> 01:00:36,880
needs to have that context right if you

1645
01:00:36,880 --> 01:00:39,280
see what we have proposed is there has

1646
01:00:39,280 --> 01:00:40,960
to be some uh communication that's

1647
01:00:40,960 --> 01:00:42,799
happening between the request resource

1648
01:00:42,799 --> 01:00:45,280
and the target to identify whether this

1649
01:00:45,280 --> 01:00:47,359
was this request actually originated

1650
01:00:47,359 --> 01:00:49,839
because it was obvious or or a direct

1651
01:00:49,839 --> 01:00:52,240
communication so that way uh

1652
01:00:52,240 --> 01:00:54,480
obvious basically so that the target can

1653
01:00:54,480 --> 01:00:56,720
actually set the right kind of headers

1654
01:00:56,720 --> 01:00:57,839
there

1655
01:00:57,839 --> 01:01:00,799
yeah so this kind of goes against the

1656
01:01:00,799 --> 01:01:02,400
text at least in the first section of

1657
01:01:02,400 --> 01:01:04,480
the draft where it clearly says that the

1658
01:01:04,480 --> 01:01:06,720
whole purpose of oblivious one of the

1659
01:01:06,720 --> 01:01:08,960
use cases that should be supported is

1660
01:01:08,960 --> 01:01:11,359
the fact where the fact that traffic is

1661
01:01:11,359 --> 01:01:13,359
coming through an oblivious proxy

1662
01:01:13,359 --> 01:01:16,640
channel is masked and not visible to the

1663
01:01:16,640 --> 01:01:18,400
target resource the target resource

1664
01:01:18,400 --> 01:01:20,000
should not

1665
01:01:20,000 --> 01:01:22,319
not know nor care that this is traffic

1666
01:01:22,319 --> 01:01:24,000
coming in from an oblivious reason yeah

1667
01:01:24,000 --> 01:01:25,359
it doesn't it doesn't care about the

1668
01:01:25,359 --> 01:01:27,040
client identity right i mean that's the

1669
01:01:27,040 --> 01:01:29,040
purpose of ws is my understanding but

1670
01:01:29,040 --> 01:01:30,799
whether it knows that it's coming

1671
01:01:30,799 --> 01:01:33,040
because obvious protocol is being used

1672
01:01:33,040 --> 01:01:34,319
it's not going to invade the client

1673
01:01:34,319 --> 01:01:36,799
privacy in any way right

1674
01:01:36,799 --> 01:01:39,680
okay so so on on on the one hand then

1675
01:01:39,680 --> 01:01:42,400
you're saying that yes uh you know you

1676
01:01:42,400 --> 01:01:45,119
will have some sort of uh probably

1677
01:01:45,119 --> 01:01:47,040
header level communication between the

1678
01:01:47,040 --> 01:01:49,359
requester and the target saying that hey

1679
01:01:49,359 --> 01:01:51,920
oh oh by the way this isn't a request

1680
01:01:51,920 --> 01:01:54,319
directly from me it's from it's for a

1681
01:01:54,319 --> 01:01:56,400
downstream client of mine but it's

1682
01:01:56,400 --> 01:01:58,400
anonymized

1683
01:01:58,400 --> 01:02:00,640
so therefore i'm not sharing that with

1684
01:02:00,640 --> 01:02:01,280
you

1685
01:02:01,280 --> 01:02:04,799
so and and then you're talking of uh the

1686
01:02:04,799 --> 01:02:07,440
target server then having intelligence

1687
01:02:07,440 --> 01:02:09,440
in it to understand this communication

1688
01:02:09,440 --> 01:02:11,599
from the requester and know that if i

1689
01:02:11,599 --> 01:02:13,920
see a malicious request of type one i

1690
01:02:13,920 --> 01:02:16,559
need to send back headers specifically

1691
01:02:16,559 --> 01:02:18,240
allowing the requester resource to

1692
01:02:18,240 --> 01:02:20,480
continue to come to me but

1693
01:02:20,480 --> 01:02:22,799
also to communicate downstream to its

1694
01:02:22,799 --> 01:02:24,640
clients saying that you you specific

1695
01:02:24,640 --> 01:02:27,039
client are no longer allowed to come

1696
01:02:27,039 --> 01:02:28,559
right

1697
01:02:28,559 --> 01:02:32,000
okay now i think you should move on

1698
01:02:32,640 --> 01:02:35,640
congratulations

1699
01:02:37,839 --> 01:02:39,599
yeah let's check the discussion on the

1700
01:02:39,599 --> 01:02:41,280
list but the good questions thank you

1701
01:02:41,280 --> 01:02:43,119
thanks for all the questions here

1702
01:02:43,119 --> 01:02:45,359
okay can i very quickly address my

1703
01:02:45,359 --> 01:02:47,920
second point uh which is the volumetric

1704
01:02:47,920 --> 01:02:50,000
actual volumetric attack that date limit

1705
01:02:50,000 --> 01:02:52,880
was designed to counter against uh i

1706
01:02:52,880 --> 01:02:54,799
tried to keep it down to 30 seconds

1707
01:02:54,799 --> 01:02:58,720
so um again in a case of a rate limit

1708
01:02:58,720 --> 01:02:59,839
the same

1709
01:02:59,839 --> 01:03:01,680
you know

1710
01:03:01,680 --> 01:03:04,400
limitation applies the target resource

1711
01:03:04,400 --> 01:03:06,480
has to be aware that this is

1712
01:03:06,480 --> 01:03:09,039
a volumetric traffic coming through a

1713
01:03:09,039 --> 01:03:11,599
proxy infrastructure of some kind so

1714
01:03:11,599 --> 01:03:13,440
that right you do not land up in a

1715
01:03:13,440 --> 01:03:15,760
scenario where the rate limit basically

1716
01:03:15,760 --> 01:03:18,000
doses your proxy infrastructure itself

1717
01:03:18,000 --> 01:03:20,240
correct and secondly there's a even

1718
01:03:20,240 --> 01:03:21,839
bigger problem if you come back to the

1719
01:03:21,839 --> 01:03:24,400
previous site on the proxy resource side

1720
01:03:24,400 --> 01:03:26,559
when you're dealing with a volumetric

1721
01:03:26,559 --> 01:03:28,720
proxy

1722
01:03:28,720 --> 01:03:30,880
the minute you start having to maintain

1723
01:03:30,880 --> 01:03:33,039
state of saying okay these are the list

1724
01:03:33,039 --> 01:03:34,880
of clients who are blocked or these are

1725
01:03:34,880 --> 01:03:36,799
the list of clients for whom these rate

1726
01:03:36,799 --> 01:03:39,119
limits are set up especially in a

1727
01:03:39,119 --> 01:03:41,280
volumetric attack that effectively

1728
01:03:41,280 --> 01:03:42,559
becomes a

1729
01:03:42,559 --> 01:03:44,559
toss on your proxy resource because your

1730
01:03:44,559 --> 01:03:46,799
state table is going to grow to a point

1731
01:03:46,799 --> 01:03:47,680
where it

1732
01:03:47,680 --> 01:03:49,520
probably is going to land up becoming

1733
01:03:49,520 --> 01:03:51,359
unmanageable

1734
01:03:51,359 --> 01:03:52,720
right

1735
01:03:52,720 --> 01:03:54,480
so that's also it all depends on the way

1736
01:03:54,480 --> 01:03:56,319
that yeah it all depends on the way that

1737
01:03:56,319 --> 01:03:58,160
you enforce these rate limits if you're

1738
01:03:58,160 --> 01:03:59,520
if the proxy is authenticating the

1739
01:03:59,520 --> 01:04:00,799
client then it's a different way of

1740
01:04:00,799 --> 01:04:02,640
enforcement if it is not authenticating

1741
01:04:02,640 --> 01:04:05,039
then how do you put acls for example we

1742
01:04:05,039 --> 01:04:06,559
have we have been implementing rate

1743
01:04:06,559 --> 01:04:07,839
limits for

1744
01:04:07,839 --> 01:04:10,240
ddos attacks all the while and we could

1745
01:04:10,240 --> 01:04:12,799
even program millions of such ip

1746
01:04:12,799 --> 01:04:14,480
addresses to be blocked or rate limited

1747
01:04:14,480 --> 01:04:16,640
so uh i can share more details on how it

1748
01:04:16,640 --> 01:04:18,799
could be done

1749
01:04:18,799 --> 01:04:20,400
okay

1750
01:04:20,400 --> 01:04:22,960
but i'm i just point out that that

1751
01:04:22,960 --> 01:04:24,000
should be something that should be

1752
01:04:24,000 --> 01:04:25,839
addressed in the draft specifically

1753
01:04:25,839 --> 01:04:28,160
because it is a it is a non-trivial

1754
01:04:28,160 --> 01:04:30,559
problem i i'm pretty sure you are good

1755
01:04:30,559 --> 01:04:32,960
that you you have a lot of data you have

1756
01:04:32,960 --> 01:04:34,559
a lot of years of

1757
01:04:34,559 --> 01:04:36,400
engineering behind being able to do what

1758
01:04:36,400 --> 01:04:39,520
you're saying you're doing now right

1759
01:04:39,520 --> 01:04:43,038
thanks rajiv let's move on eric

1760
01:04:47,520 --> 01:04:50,559
yeah sort of quick mental exercise to

1761
01:04:50,559 --> 01:04:52,880
sort of decide if this is a worthy thing

1762
01:04:52,880 --> 01:04:54,319
to pursue or not if we ignore your

1763
01:04:54,319 --> 01:04:55,920
specific proposal and just focus on

1764
01:04:55,920 --> 01:04:57,440
what's the simplest thing to solve the

1765
01:04:57,440 --> 01:04:58,319
issue

1766
01:04:58,319 --> 01:05:00,960
i i limit the issue down to saying

1767
01:05:00,960 --> 01:05:02,720
this specific thing that

1768
01:05:02,720 --> 01:05:04,319
this request was doing something's bad

1769
01:05:04,319 --> 01:05:05,920
in it and the proxy needs to know that

1770
01:05:05,920 --> 01:05:06,640
to

1771
01:05:06,640 --> 01:05:09,200
either ban or limit or

1772
01:05:09,200 --> 01:05:12,000
act on that specific client if they have

1773
01:05:12,000 --> 01:05:13,599
more requests of that sort i think the

1774
01:05:13,599 --> 01:05:15,680
simplest thing we can do is proxies i

1775
01:05:15,680 --> 01:05:18,559
mean the the server sends a bit to the

1776
01:05:18,559 --> 01:05:20,079
proxy saying something was bad about

1777
01:05:20,079 --> 01:05:21,200
this request

1778
01:05:21,200 --> 01:05:23,440
and then that's one bit going from the

1779
01:05:23,440 --> 01:05:24,799
survey prox and this immediately

1780
01:05:24,799 --> 01:05:26,880
something hey this sounds very very very

1781
01:05:26,880 --> 01:05:28,480
very similar to that whole shadow

1782
01:05:28,480 --> 01:05:30,799
banning conversation we just had 45

1783
01:05:30,799 --> 01:05:32,880
minutes or so ago now so from that

1784
01:05:32,880 --> 01:05:34,960
perspective maybe we should essentially

1785
01:05:34,960 --> 01:05:36,400
shelve this until

1786
01:05:36,400 --> 01:05:38,240
the debate is settled on the proxy

1787
01:05:38,240 --> 01:05:40,559
banning thing and if it's decided yes

1788
01:05:40,559 --> 01:05:42,319
sending one bit or similar information

1789
01:05:42,319 --> 01:05:44,400
from the proxy to the server makes sense

1790
01:05:44,400 --> 01:05:46,160
okay then we should go back okay this

1791
01:05:46,160 --> 01:05:47,680
makes sense to send similar information

1792
01:05:47,680 --> 01:05:49,920
from the server to proxy because that's

1793
01:05:49,920 --> 01:05:52,319
in my opinion exactly what this is and

1794
01:05:52,319 --> 01:05:54,319
if it is then then we can discuss okay

1795
01:05:54,319 --> 01:05:55,839
what's the exact stuff that makes sense

1796
01:05:55,839 --> 01:05:57,599
to be able to send and

1797
01:05:57,599 --> 01:05:59,760
pick this back up again

1798
01:05:59,760 --> 01:06:02,760
okay

1799
01:06:12,319 --> 01:06:15,039
hi ben schwartz so i think this issue is

1800
01:06:15,039 --> 01:06:17,680
real i think it's it's worth solving i

1801
01:06:17,680 --> 01:06:18,799
think

1802
01:06:18,799 --> 01:06:20,240
that you're

1803
01:06:20,240 --> 01:06:22,880
i understand the concern that you raised

1804
01:06:22,880 --> 01:06:25,200
about using the unmodified rate limit

1805
01:06:25,200 --> 01:06:27,039
headers directly

1806
01:06:27,039 --> 01:06:30,000
and i think the solution is to

1807
01:06:30,000 --> 01:06:32,400
use the unmodified rate limit headers

1808
01:06:32,400 --> 01:06:34,960
and work with that draft and the http

1809
01:06:34,960 --> 01:06:37,200
draft to make sure that they actually

1810
01:06:37,200 --> 01:06:39,760
work in the way that you that you want

1811
01:06:39,760 --> 01:06:41,280
it to work here

1812
01:06:41,280 --> 01:06:43,039
so i don't think we can i already

1813
01:06:43,039 --> 01:06:45,200
reached out to the authors of

1814
01:06:45,200 --> 01:06:47,280
their draft to help us out so

1815
01:06:47,280 --> 01:06:49,359
yeah we'll work with them so yeah i

1816
01:06:49,359 --> 01:06:50,960
don't think we need a new header here

1817
01:06:50,960 --> 01:06:53,359
but i do think there's there's some work

1818
01:06:53,359 --> 01:06:54,880
to be done

1819
01:06:54,880 --> 01:06:55,680
yeah

1820
01:06:55,680 --> 01:06:57,200
the whole challenge was how do you make

1821
01:06:57,200 --> 01:06:59,200
sure that the proxy strips it also if

1822
01:06:59,200 --> 01:07:01,200
there is a way we can the the target

1823
01:07:01,200 --> 01:07:03,839
resource can put these headers but the

1824
01:07:03,839 --> 01:07:04,640
but

1825
01:07:04,640 --> 01:07:06,000
how does it

1826
01:07:06,000 --> 01:07:07,839
from from the http response and how does

1827
01:07:07,839 --> 01:07:10,880
it get percolated back in a way that uh

1828
01:07:10,880 --> 01:07:12,960
it's it's it's it's not being sent to

1829
01:07:12,960 --> 01:07:15,440
the client field we can discuss that

1830
01:07:15,440 --> 01:07:17,280
yeah that can be specified either as an

1831
01:07:17,280 --> 01:07:19,440
aspect of the header itself or as an

1832
01:07:19,440 --> 01:07:23,799
aspect of http proxies

1833
01:07:29,920 --> 01:07:31,200
so eric

1834
01:07:31,200 --> 01:07:32,160
had a

1835
01:07:32,160 --> 01:07:33,920
fairly good in it

1836
01:07:33,920 --> 01:07:36,160
that i think probably works in this case

1837
01:07:36,160 --> 01:07:37,200
um

1838
01:07:37,200 --> 01:07:38,720
it requires communication between the

1839
01:07:38,720 --> 01:07:40,720
request resource and the proxy

1840
01:07:40,720 --> 01:07:42,880
not the target result and i'll get i'll

1841
01:07:42,880 --> 01:07:43,920
get to that

1842
01:07:43,920 --> 01:07:46,400
but um just like in the in the issue 66

1843
01:07:46,400 --> 01:07:47,599
discussion

1844
01:07:47,599 --> 01:07:49,520
we were talking about sending a a single

1845
01:07:49,520 --> 01:07:51,440
bit that says this this client is

1846
01:07:51,440 --> 01:07:52,720
suspicious

1847
01:07:52,720 --> 01:07:54,160
um

1848
01:07:54,160 --> 01:07:56,240
in the direction of the proxy to the

1849
01:07:56,240 --> 01:07:58,319
request resource not the target or the

1850
01:07:58,319 --> 01:08:00,000
request resource

1851
01:08:00,000 --> 01:08:01,920
so that the request resource can act

1852
01:08:01,920 --> 01:08:03,119
accordingly

1853
01:08:03,119 --> 01:08:05,680
the same applies for in the direction

1854
01:08:05,680 --> 01:08:07,760
from the request resource back to the

1855
01:08:07,760 --> 01:08:11,039
proxy and and that single bit with the

1856
01:08:11,039 --> 01:08:13,119
same sort of standing

1857
01:08:13,119 --> 01:08:16,479
uh would work uh it does require there

1858
01:08:16,479 --> 01:08:20,479
is a private communication um

1859
01:08:20,479 --> 01:08:22,799
that the proxy resource understands this

1860
01:08:22,799 --> 01:08:24,319
message

1861
01:08:24,319 --> 01:08:26,640
or that the proxy resource is not it's

1862
01:08:26,640 --> 01:08:29,198
not generic and doesn't blindly pass

1863
01:08:29,198 --> 01:08:31,439
uh header fields alone

1864
01:08:31,439 --> 01:08:32,560
but

1865
01:08:32,560 --> 01:08:33,759
i think both of those things are quite

1866
01:08:33,759 --> 01:08:36,799
reasonable in this heading

1867
01:08:36,799 --> 01:08:39,040
for the target resource communicating

1868
01:08:39,040 --> 01:08:40,960
this state there's a lot of cases where

1869
01:08:40,960 --> 01:08:42,479
you'll have the request resource and the

1870
01:08:42,479 --> 01:08:43,839
target resource

1871
01:08:43,839 --> 01:08:45,279
collocated

1872
01:08:45,279 --> 01:08:47,439
in which case none of this coordination

1873
01:08:47,439 --> 01:08:49,839
problem really needs to

1874
01:08:49,839 --> 01:08:52,080
occur over the wire

1875
01:08:52,080 --> 01:08:54,479
in the other case i think

1876
01:08:54,479 --> 01:08:56,158
that the

1877
01:08:56,158 --> 01:08:58,319
the rate limit stuff

1878
01:08:58,319 --> 01:09:00,479
doesn't work in this case because of the

1879
01:09:00,479 --> 01:09:02,560
way that it depends on understanding who

1880
01:09:02,560 --> 01:09:04,238
the client is

1881
01:09:04,238 --> 01:09:06,399
but some there may be some ways in which

1882
01:09:06,399 --> 01:09:08,960
we can signal um those sorts of things

1883
01:09:08,960 --> 01:09:10,399
i think there are two different

1884
01:09:10,399 --> 01:09:11,839
solutions there though

1885
01:09:11,839 --> 01:09:13,520
and um

1886
01:09:13,520 --> 01:09:15,600
the more important is the is the signal

1887
01:09:15,600 --> 01:09:17,120
that is private between the request

1888
01:09:17,120 --> 01:09:20,000
resource and the proxy resource

1889
01:09:20,000 --> 01:09:21,279
okay

1890
01:09:21,279 --> 01:09:24,158
and it is just that one bit this request

1891
01:09:24,158 --> 01:09:27,040
was potentially suspicious and then you

1892
01:09:27,040 --> 01:09:28,799
potentially have to have the volumetric

1893
01:09:28,799 --> 01:09:30,719
things as well

1894
01:09:30,719 --> 01:09:33,040
sure

1895
01:09:33,600 --> 01:09:35,439
see since martin you're suggesting that

1896
01:09:35,439 --> 01:09:37,439
for malicious requests we just say that

1897
01:09:37,439 --> 01:09:39,839
it's a malicious one rather than uh

1898
01:09:39,839 --> 01:09:41,759
providing any rate limit uh parameters

1899
01:09:41,759 --> 01:09:43,439
but for proxy continue to have the right

1900
01:09:43,439 --> 01:09:45,920
limit uh parameters being pushed on to

1901
01:09:45,920 --> 01:09:47,600
the proxy

1902
01:09:47,600 --> 01:09:50,080
yeah i i think

1903
01:09:50,080 --> 01:09:51,839
in a lot of cases though as as ekka

1904
01:09:51,839 --> 01:09:54,480
pointed out the individual request won't

1905
01:09:54,480 --> 01:09:56,080
be problematic

1906
01:09:56,080 --> 01:09:57,040
it will

1907
01:09:57,040 --> 01:09:58,400
you will need

1908
01:09:58,400 --> 01:09:59,760
some other ch

1909
01:09:59,760 --> 01:10:01,600
or perhaps a separate type of signal

1910
01:10:01,600 --> 01:10:05,440
that says hey by the way uh

1911
01:10:05,440 --> 01:10:07,199
the number of requests or the rate of

1912
01:10:07,199 --> 01:10:09,280
request that i'm receiving is too high

1913
01:10:09,280 --> 01:10:11,280
proxies start looking for for individual

1914
01:10:11,280 --> 01:10:13,440
clients that are acting badly and and

1915
01:10:13,440 --> 01:10:15,920
try to eliminate or slow them down in

1916
01:10:15,920 --> 01:10:17,600
some way

1917
01:10:17,600 --> 01:10:20,080
that i think requires

1918
01:10:20,080 --> 01:10:21,520
probably a richer outer band

1919
01:10:21,520 --> 01:10:23,840
communication than what the individual

1920
01:10:23,840 --> 01:10:25,600
request headers

1921
01:10:25,600 --> 01:10:28,320
can provide us with

1922
01:10:28,320 --> 01:10:29,280
okay

1923
01:10:29,280 --> 01:10:32,000
uh why do you think that uh the inline

1924
01:10:32,000 --> 01:10:33,920
one is bad and we need an out of band a

1925
01:10:33,920 --> 01:10:37,040
new communication channel

1926
01:10:38,640 --> 01:10:40,400
sorry i'm going off

1927
01:10:40,400 --> 01:10:42,719
then you ask me a question um for

1928
01:10:42,719 --> 01:10:44,960
exactly the reason ecker stated which is

1929
01:10:44,960 --> 01:10:47,440
that individual request in a denial of

1930
01:10:47,440 --> 01:10:50,480
service state will generally be genuine

1931
01:10:50,480 --> 01:10:52,239
or appear to be genuine

1932
01:10:52,239 --> 01:10:54,400
so um

1933
01:10:54,400 --> 01:10:56,239
it will be from the perspective of the

1934
01:10:56,239 --> 01:10:58,239
server that's operating here it will be

1935
01:10:58,239 --> 01:11:01,040
unable to distinguish between

1936
01:11:01,040 --> 01:11:02,640
the the requests that are coming from

1937
01:11:02,640 --> 01:11:05,360
bad actors and good actors and all it

1938
01:11:05,360 --> 01:11:06,400
needs

1939
01:11:06,400 --> 01:11:08,239
is try to push

1940
01:11:08,239 --> 01:11:09,920
further out toward the edge the

1941
01:11:09,920 --> 01:11:12,960
responsibility for filtering those down

1942
01:11:12,960 --> 01:11:15,280
got it

1943
01:11:23,600 --> 01:11:26,159
one additional point that just came uh

1944
01:11:26,159 --> 01:11:29,040
you know into my way or achieve here uh

1945
01:11:29,040 --> 01:11:32,239
was the fact that in uh cases of most

1946
01:11:32,239 --> 01:11:35,600
target resource servers um while they

1947
01:11:35,600 --> 01:11:38,080
may implement things like sending out

1948
01:11:38,080 --> 01:11:40,400
rate limit headers and stuff like that

1949
01:11:40,400 --> 01:11:43,520
many times when there is detection of

1950
01:11:43,520 --> 01:11:45,600
any sort of malicious traffic

1951
01:11:45,600 --> 01:11:47,840
there may also be other security

1952
01:11:47,840 --> 01:11:50,320
measures that kick in um i like an

1953
01:11:50,320 --> 01:11:53,199
application level firewall that starts

1954
01:11:53,199 --> 01:11:55,040
uh blacklisting

1955
01:11:55,040 --> 01:11:57,920
stuff like that so um having some text

1956
01:11:57,920 --> 01:12:00,239
in the draft specifically saying that

1957
01:12:00,239 --> 01:12:02,080
hey uh you know

1958
01:12:02,080 --> 01:12:05,600
any traffic that's going towards a

1959
01:12:05,600 --> 01:12:07,600
target resource from a request resource

1960
01:12:07,600 --> 01:12:10,320
must contain some header or some

1961
01:12:10,320 --> 01:12:12,800
indication that it's coming from a proxy

1962
01:12:12,800 --> 01:12:14,880
which then allows the target resource to

1963
01:12:14,880 --> 01:12:16,560
say hey um

1964
01:12:16,560 --> 01:12:18,239
yes i'm seeing a malicious request that

1965
01:12:18,239 --> 01:12:20,719
would under normal conditions lead to an

1966
01:12:20,719 --> 01:12:23,440
immediate fan on that ip but because

1967
01:12:23,440 --> 01:12:26,000
it's coming from a proxy infrastructure

1968
01:12:26,000 --> 01:12:27,840
of some kind i

1969
01:12:27,840 --> 01:12:29,840
don't do that ban right now because i

1970
01:12:29,840 --> 01:12:31,360
may end up

1971
01:12:31,360 --> 01:12:34,000
impacting legitimate users

1972
01:12:34,000 --> 01:12:36,719
which again kind of to me it's a bit of

1973
01:12:36,719 --> 01:12:38,000
a

1974
01:12:38,000 --> 01:12:40,400
disconnect between the text of what the

1975
01:12:40,400 --> 01:12:43,440
draft is intending saying that you don't

1976
01:12:43,440 --> 01:12:47,199
want a mechanism where target resources

1977
01:12:47,199 --> 01:12:49,679
have to be necessarily aware of the

1978
01:12:49,679 --> 01:12:51,600
oblivious framework in order to be able

1979
01:12:51,600 --> 01:12:53,199
to support the traffic

1980
01:12:53,199 --> 01:12:54,080
so

1981
01:12:54,080 --> 01:12:55,600
i just thought this was also something

1982
01:12:55,600 --> 01:12:57,600
since we're discussing security

1983
01:12:57,600 --> 01:12:59,920
implications that should be part of the

1984
01:12:59,920 --> 01:13:02,239
draft and uh you know it's a problem

1985
01:13:02,239 --> 01:13:04,000
that needs to be addressed even if we

1986
01:13:04,000 --> 01:13:05,760
don't have a solution for it at least

1987
01:13:05,760 --> 01:13:07,520
say that this is a potential problem

1988
01:13:07,520 --> 01:13:10,400
that we need to look at

1989
01:13:10,400 --> 01:13:12,239
yeah that's a good point rajiv i think

1990
01:13:12,239 --> 01:13:16,000
we can add some text to address that

1991
01:13:17,440 --> 01:13:19,520
okay great i think we've drained the

1992
01:13:19,520 --> 01:13:20,560
queue

1993
01:13:20,560 --> 01:13:21,600
um

1994
01:13:21,600 --> 01:13:23,760
yeah so it seems like my sense is that

1995
01:13:23,760 --> 01:13:25,600
um the

1996
01:13:25,600 --> 01:13:27,199
is that there is a need for something

1997
01:13:27,199 --> 01:13:28,640
like this but

1998
01:13:28,640 --> 01:13:32,640
um maybe that should go in the http api

1999
01:13:32,640 --> 01:13:34,880
range limiting draft um

2000
01:13:34,880 --> 01:13:37,679
in a section over there or

2001
01:13:37,679 --> 01:13:38,719
sounds like

2002
01:13:38,719 --> 01:13:40,880
like more fundamental work is needed in

2003
01:13:40,880 --> 01:13:43,360
the contract yeah especially we'll work

2004
01:13:43,360 --> 01:13:45,120
on the feedback and i think we'll get a

2005
01:13:45,120 --> 01:13:47,440
new version and then we'll take the

2006
01:13:47,440 --> 01:13:48,800
discussion on the mailing list to see

2007
01:13:48,800 --> 01:13:50,800
which working group fits us

2008
01:13:50,800 --> 01:13:55,239
okay perfect thanks a lot

2009
01:14:00,080 --> 01:14:02,080
great um tommy

2010
01:14:02,080 --> 01:14:05,280
you up next

2011
01:14:05,520 --> 01:14:09,679
thank you let me show the slides

2012
01:14:11,520 --> 01:14:13,520
and i'm going to forgo sharing video for

2013
01:14:13,520 --> 01:14:14,480
the moment

2014
01:14:14,480 --> 01:14:16,239
apologies

2015
01:14:16,239 --> 01:14:18,159
all right so

2016
01:14:18,159 --> 01:14:21,040
um we recently posted a draft

2017
01:14:21,040 --> 01:14:23,600
about how to do some discovery of

2018
01:14:23,600 --> 01:14:27,520
oblivious target configurations via dns

2019
01:14:27,520 --> 01:14:29,440
using service plan service binding

2020
01:14:29,440 --> 01:14:31,679
records

2021
01:14:31,679 --> 01:14:33,440
and this is what martin was referring to

2022
01:14:33,440 --> 01:14:35,440
earlier as one of the directions for

2023
01:14:35,440 --> 01:14:36,800
discovery

2024
01:14:36,800 --> 01:14:38,719
this is certainly not

2025
01:14:38,719 --> 01:14:40,320
the only mechanism that could be used

2026
01:14:40,320 --> 01:14:43,040
for discovery it is

2027
01:14:43,040 --> 01:14:46,600
a particular model that works for

2028
01:14:46,600 --> 01:14:49,679
a particular deployment scenario there

2029
01:14:49,679 --> 01:14:51,760
are other aspects of discovery that we

2030
01:14:51,760 --> 01:14:53,600
would want to get into but

2031
01:14:53,600 --> 01:14:55,760
this may be a good starting point to the

2032
01:14:55,760 --> 01:14:58,400
conversation

2033
01:14:59,120 --> 01:15:02,000
so what does this document do

2034
01:15:02,000 --> 01:15:04,800
it's relatively simple

2035
01:15:04,800 --> 01:15:05,679
it

2036
01:15:05,679 --> 01:15:08,880
sends the oblivious configurations

2037
01:15:08,880 --> 01:15:14,080
as well as when needed the http pads

2038
01:15:14,080 --> 01:15:15,679
for targets

2039
01:15:15,679 --> 01:15:17,760
and is specifically for the oblivious

2040
01:15:17,760 --> 01:15:19,920
targets and it sends these through dns

2041
01:15:19,920 --> 01:15:22,400
records

2042
01:15:22,560 --> 01:15:25,120
and these are defined using

2043
01:15:25,120 --> 01:15:27,440
the service binding slash

2044
01:15:27,440 --> 01:15:29,440
https

2045
01:15:29,440 --> 01:15:32,960
rr types which allow definition of new

2046
01:15:32,960 --> 01:15:35,600
parameters

2047
01:15:35,760 --> 01:15:37,440
and i

2048
01:15:37,440 --> 01:15:40,480
explains how you can use these for

2049
01:15:40,480 --> 01:15:42,400
discovering the configuration for a

2050
01:15:42,400 --> 01:15:43,440
generic

2051
01:15:43,440 --> 01:15:45,920
oblivious http target

2052
01:15:45,920 --> 01:15:48,080
and essentially learning that a server

2053
01:15:48,080 --> 01:15:49,840
that you would normally access not

2054
01:15:49,840 --> 01:15:52,400
obliviously also does offer an oblivious

2055
01:15:52,400 --> 01:15:53,760
target

2056
01:15:53,760 --> 01:15:55,520
but then it also talks about how to use

2057
01:15:55,520 --> 01:15:56,239
this

2058
01:15:56,239 --> 01:15:58,719
specifically in the dns case for doing

2059
01:15:58,719 --> 01:16:02,000
oblivious dns over https

2060
01:16:02,000 --> 01:16:03,679
and this is the part where

2061
01:16:03,679 --> 01:16:05,199
at least for my end we have a lot of

2062
01:16:05,199 --> 01:16:06,400
experience

2063
01:16:06,400 --> 01:16:08,960
deploying it now and this is where this

2064
01:16:08,960 --> 01:16:11,440
becomes interesting

2065
01:16:11,440 --> 01:16:13,840
this allows us to integrate with

2066
01:16:13,840 --> 01:16:14,800
um

2067
01:16:14,800 --> 01:16:16,640
work that's going on in the add working

2068
01:16:16,640 --> 01:16:18,560
group to discover

2069
01:16:18,560 --> 01:16:21,920
uh encrypted resolvers either via

2070
01:16:21,920 --> 01:16:24,520
a dns query to a well-known

2071
01:16:24,520 --> 01:16:26,400
resolver.arpa name

2072
01:16:26,400 --> 01:16:27,199
or

2073
01:16:27,199 --> 01:16:30,640
as something that can come in dhcp or ra

2074
01:16:30,640 --> 01:16:32,640
messages

2075
01:16:32,640 --> 01:16:35,280
and this also um explains

2076
01:16:35,280 --> 01:16:38,480
the similar use for the previous version

2077
01:16:38,480 --> 01:16:40,800
of odo which is

2078
01:16:40,800 --> 01:16:43,520
the experimental version that pre was

2079
01:16:43,520 --> 01:16:45,520
the precursor to a lot of the oblivious

2080
01:16:45,520 --> 01:16:48,640
http work

2081
01:16:48,640 --> 01:16:50,800
what this document does not do

2082
01:16:50,800 --> 01:16:53,120
at least in its current form

2083
01:16:53,120 --> 01:16:55,199
is talk about anything for oblivious

2084
01:16:55,199 --> 01:16:56,960
proxy discovery

2085
01:16:56,960 --> 01:16:59,120
that's one thing that i think

2086
01:16:59,120 --> 01:17:01,120
martin brought up

2087
01:17:01,120 --> 01:17:02,480
an issue

2088
01:17:02,480 --> 01:17:03,679
and

2089
01:17:03,679 --> 01:17:05,920
the draft could probably be

2090
01:17:05,920 --> 01:17:08,000
more clear and emphasize this more

2091
01:17:08,000 --> 01:17:11,679
strongly that it does not cover this

2092
01:17:12,480 --> 01:17:13,760
the

2093
01:17:13,760 --> 01:17:15,600
proxy discovery case

2094
01:17:15,600 --> 01:17:17,440
could be added but i believe it's

2095
01:17:17,440 --> 01:17:19,760
something that's quite different

2096
01:17:19,760 --> 01:17:22,400
as we discussed earlier

2097
01:17:22,400 --> 01:17:23,679
the

2098
01:17:23,679 --> 01:17:25,280
relationship between a client and a

2099
01:17:25,280 --> 01:17:27,679
proxy and that trust about what it's

2100
01:17:27,679 --> 01:17:29,920
doing what it's potentially adding or

2101
01:17:29,920 --> 01:17:32,159
not adding really matters

2102
01:17:32,159 --> 01:17:33,199
and

2103
01:17:33,199 --> 01:17:34,719
i don't see as much of a use case for

2104
01:17:34,719 --> 01:17:36,560
that being arbitrarily

2105
01:17:36,560 --> 01:17:38,800
discoverable in a mechanism like dns

2106
01:17:38,800 --> 01:17:40,719
maybe there could be a registry of known

2107
01:17:40,719 --> 01:17:41,920
and trusted

2108
01:17:41,920 --> 01:17:43,920
proxies but

2109
01:17:43,920 --> 01:17:44,800
what we're talking about here is

2110
01:17:44,800 --> 01:17:47,199
discovering targets

2111
01:17:47,199 --> 01:17:48,480
now there will be a little bit more on

2112
01:17:48,480 --> 01:17:50,960
this later

2113
01:17:50,960 --> 01:17:52,000
so

2114
01:17:52,000 --> 01:17:54,640
as an example

2115
01:17:54,640 --> 01:17:56,480
um

2116
01:17:56,480 --> 01:17:58,560
the

2117
01:17:58,560 --> 01:18:00,480
we have two cases here we can have

2118
01:18:00,480 --> 01:18:02,480
oblivious dns

2119
01:18:02,480 --> 01:18:05,760
um being advertised for essentially the

2120
01:18:05,760 --> 01:18:06,880
discovery

2121
01:18:06,880 --> 01:18:08,960
of encrypted resolvers case

2122
01:18:08,960 --> 01:18:10,080
ddr

2123
01:18:10,080 --> 01:18:12,880
so we would have a record for

2124
01:18:12,880 --> 01:18:15,880
dns.resolver.arpa

2125
01:18:15,920 --> 01:18:17,440
amongst other things it could say that

2126
01:18:17,440 --> 01:18:19,520
it supports an odo

2127
01:18:19,520 --> 01:18:20,560
server

2128
01:18:20,560 --> 01:18:22,719
this would include within it the fact

2129
01:18:22,719 --> 01:18:25,600
that this is an http target it would

2130
01:18:25,600 --> 01:18:27,280
have the path

2131
01:18:27,280 --> 01:18:31,199
to use for do on this query along with

2132
01:18:31,199 --> 01:18:33,840
the list of o http configs

2133
01:18:33,840 --> 01:18:35,840
this is quite similar to how the

2134
01:18:35,840 --> 01:18:38,480
encrypted client hello tls configs can

2135
01:18:38,480 --> 01:18:41,600
be communicated in the same way

2136
01:18:41,600 --> 01:18:44,080
and you can imagine this then works also

2137
01:18:44,080 --> 01:18:45,600
for a generic

2138
01:18:45,600 --> 01:18:47,920
oblivious http case where i could learn

2139
01:18:47,920 --> 01:18:49,159
that

2140
01:18:49,159 --> 01:18:50,960
metricsupload.example.net supports

2141
01:18:50,960 --> 01:18:53,120
oblivious http as a target and i could

2142
01:18:53,120 --> 01:18:56,400
learn what its config is there

2143
01:18:56,400 --> 01:19:00,480
so to walk through a very specific

2144
01:19:00,480 --> 01:19:02,159
example and this is kind of the real

2145
01:19:02,159 --> 01:19:04,719
life case that we would have

2146
01:19:04,719 --> 01:19:07,120
i have a client that has an oblivious

2147
01:19:07,120 --> 01:19:08,719
proxy that it goes through that it

2148
01:19:08,719 --> 01:19:10,640
trusts that has a strong relationship

2149
01:19:10,640 --> 01:19:11,600
with

2150
01:19:11,600 --> 01:19:14,239
and it currently would be by default

2151
01:19:14,239 --> 01:19:15,679
talking to

2152
01:19:15,679 --> 01:19:18,239
one or more oblivious

2153
01:19:18,239 --> 01:19:21,120
dns targets that it knows about this is

2154
01:19:21,120 --> 01:19:25,360
how icloud private relay works today

2155
01:19:25,760 --> 01:19:27,760
and in this scenario

2156
01:19:27,760 --> 01:19:30,159
i can imagine that i join a network

2157
01:19:30,159 --> 01:19:31,600
and i connect to

2158
01:19:31,600 --> 01:19:33,679
the isp dns resolver

2159
01:19:33,679 --> 01:19:36,000
just for my normal maintenance traffic i

2160
01:19:36,000 --> 01:19:39,120
can query it for dns.resolv.arpa

2161
01:19:39,120 --> 01:19:41,920
and i learn that the isp has designated

2162
01:19:41,920 --> 01:19:46,320
a specific oblivious dns target

2163
01:19:46,320 --> 01:19:47,600
and the reason that this could be

2164
01:19:47,600 --> 01:19:49,040
interesting is

2165
01:19:49,040 --> 01:19:51,040
maybe there is some

2166
01:19:51,040 --> 01:19:55,600
in country or in isp policy about

2167
01:19:55,600 --> 01:19:57,600
the type of responses i get from a

2168
01:19:57,600 --> 01:19:58,960
server

2169
01:19:58,960 --> 01:20:01,760
there are you know various regulations

2170
01:20:01,760 --> 01:20:03,679
in places about

2171
01:20:03,679 --> 01:20:06,159
what content someone may be accessing

2172
01:20:06,159 --> 01:20:08,080
and so

2173
01:20:08,080 --> 01:20:10,560
the case of maybe my isp knows that this

2174
01:20:10,560 --> 01:20:12,800
is a child's device

2175
01:20:12,800 --> 01:20:14,719
and it wants to have some filtering for

2176
01:20:14,719 --> 01:20:16,639
particular content

2177
01:20:16,639 --> 01:20:19,520
i do not want to when i'm using this

2178
01:20:19,520 --> 01:20:23,600
privacy system disclose

2179
01:20:23,600 --> 01:20:26,080
my kind of full browsing history

2180
01:20:26,080 --> 01:20:28,560
to that isp dns infrastructure but i

2181
01:20:28,560 --> 01:20:30,560
would be happy to go through a proxy and

2182
01:20:30,560 --> 01:20:33,840
use oblivious dns if that is safe

2183
01:20:33,840 --> 01:20:36,320
and so if we learn that configuration we

2184
01:20:36,320 --> 01:20:38,719
can essentially bootstrap this

2185
01:20:38,719 --> 01:20:41,280
and the client is now able to access

2186
01:20:41,280 --> 01:20:44,960
that isp selected oblivious doe target

2187
01:20:44,960 --> 01:20:48,560
if that target is known and trusted by

2188
01:20:48,560 --> 01:20:50,639
the proxy so there is a transitive trust

2189
01:20:50,639 --> 01:20:51,760
relationship

2190
01:20:51,760 --> 01:20:54,000
here in which the client has to trust

2191
01:20:54,000 --> 01:20:55,840
the proxy in the proxy

2192
01:20:55,840 --> 01:20:58,480
or some other

2193
01:20:58,480 --> 01:20:59,920
mechanism that the client can check

2194
01:20:59,920 --> 01:21:02,960
against validates that this is not a

2195
01:21:02,960 --> 01:21:04,800
unique per-client target but is

2196
01:21:04,800 --> 01:21:06,400
something that is more widely known and

2197
01:21:06,400 --> 01:21:08,960
registered

2198
01:21:10,400 --> 01:21:12,080
so to be very clear about the deployment

2199
01:21:12,080 --> 01:21:14,960
model for which this works this is a

2200
01:21:14,960 --> 01:21:17,360
case where the client knows one or more

2201
01:21:17,360 --> 01:21:19,199
proxies that it already trusts it's not

2202
01:21:19,199 --> 01:21:21,360
trying to discover that

2203
01:21:21,360 --> 01:21:23,840
the client wants to be able to access

2204
01:21:23,840 --> 01:21:25,440
oblivious targets

2205
01:21:25,440 --> 01:21:27,040
that are published

2206
01:21:27,040 --> 01:21:31,440
by their local dns or public dns

2207
01:21:31,440 --> 01:21:33,040
the client

2208
01:21:33,040 --> 01:21:35,120
needs a way to know that this target is

2209
01:21:35,120 --> 01:21:36,960
supported by a proxy and what path to

2210
01:21:36,960 --> 01:21:38,639
use

2211
01:21:38,639 --> 01:21:41,120
because oblivious http does require that

2212
01:21:41,120 --> 01:21:43,600
there's a mapping between the request to

2213
01:21:43,600 --> 01:21:46,239
a proxy and what the target is

2214
01:21:46,239 --> 01:21:47,679
um this

2215
01:21:47,679 --> 01:21:49,040
i'll point out and there's actually an

2216
01:21:49,040 --> 01:21:51,199
issue on the main ohtp draft that ecker

2217
01:21:51,199 --> 01:21:54,080
raised about the flexibility of these

2218
01:21:54,080 --> 01:21:56,000
mappings

2219
01:21:56,000 --> 01:21:58,159
while ohttp does require that you have a

2220
01:21:58,159 --> 01:22:00,159
one-to-one mapping that one-to-one

2221
01:22:00,159 --> 01:22:01,760
mapping could be something that is also

2222
01:22:01,760 --> 01:22:05,120
expressed as a uri template

2223
01:22:05,120 --> 01:22:07,600
so it is possible to

2224
01:22:07,600 --> 01:22:09,360
have this be a bit more generic as long

2225
01:22:09,360 --> 01:22:10,960
as the proxy is doing the correct access

2226
01:22:10,960 --> 01:22:13,679
control checking

2227
01:22:14,480 --> 01:22:15,760
i think

2228
01:22:15,760 --> 01:22:18,719
that having an unknown or untrusted

2229
01:22:18,719 --> 01:22:21,840
proxy that i need to discover

2230
01:22:21,840 --> 01:22:24,560
that's not a very clear use case

2231
01:22:24,560 --> 01:22:26,400
from what i can see right now

2232
01:22:26,400 --> 01:22:28,639
if someone does have a use case for it

2233
01:22:28,639 --> 01:22:29,920
let's definitely talk about it i'd love

2234
01:22:29,920 --> 01:22:31,120
to hear it

2235
01:22:31,120 --> 01:22:32,480
but

2236
01:22:32,480 --> 01:22:36,239
at this point i'm not aware of that

2237
01:22:36,239 --> 01:22:37,679
so the question is you know do we want

2238
01:22:37,679 --> 01:22:38,719
to

2239
01:22:38,719 --> 01:22:40,639
adopt something in this direction

2240
01:22:40,639 --> 01:22:41,679
um

2241
01:22:41,679 --> 01:22:43,120
certainly you know there could be more

2242
01:22:43,120 --> 01:22:45,360
refinement and changes but you know do

2243
01:22:45,360 --> 01:22:47,360
we want to be able to communicate

2244
01:22:47,360 --> 01:22:49,280
these types of configs

2245
01:22:49,280 --> 01:22:50,080
in

2246
01:22:50,080 --> 01:22:52,719
service binding records if so it seems

2247
01:22:52,719 --> 01:22:53,679
like it should be in scope for the

2248
01:22:53,679 --> 01:22:56,639
charter as one of these secondary items

2249
01:22:56,639 --> 01:22:58,960
and as part of that we'd like to get

2250
01:22:58,960 --> 01:23:01,280
these um service binding parameters

2251
01:23:01,280 --> 01:23:03,199
allocated because we

2252
01:23:03,199 --> 01:23:05,040
are planning on using them for our

2253
01:23:05,040 --> 01:23:06,800
olivia's dns

2254
01:23:06,800 --> 01:23:08,159
deployments

2255
01:23:08,159 --> 01:23:10,960
and that's all i have

2256
01:23:15,440 --> 01:23:18,719
hi tommy um thanks for raising this

2257
01:23:18,719 --> 01:23:20,639
um i'm a little

2258
01:23:20,639 --> 01:23:22,960
um i i understand what you're saying and

2259
01:23:22,960 --> 01:23:24,400
i think this is like a reasonable thing

2260
01:23:24,400 --> 01:23:26,400
to think about um

2261
01:23:26,400 --> 01:23:28,080
i'm trying to think through some of the

2262
01:23:28,080 --> 01:23:29,600
privacy implications

2263
01:23:29,600 --> 01:23:30,719
and

2264
01:23:30,719 --> 01:23:34,560
it's not like entirely clear to me that

2265
01:23:34,560 --> 01:23:35,679
the price implications are

2266
01:23:35,679 --> 01:23:37,600
straightforward as one might imagine and

2267
01:23:37,600 --> 01:23:39,920
so let me give you a concrete example

2268
01:23:39,920 --> 01:23:41,600
supposing i have

2269
01:23:41,600 --> 01:23:44,639
um two and i have two endpoints um i i

2270
01:23:44,639 --> 01:23:46,880
have two you know dns endpoints a and b

2271
01:23:46,880 --> 01:23:49,120
right and they're otherwise identical

2272
01:23:49,120 --> 01:23:50,000
and

2273
01:23:50,000 --> 01:23:52,400
um i'm the isp right

2274
01:23:52,400 --> 01:23:53,840
and um

2275
01:23:53,840 --> 01:23:56,080
i've two there's end points a and b are

2276
01:23:56,080 --> 01:23:59,440
identical and so to everybody but you i

2277
01:23:59,440 --> 01:24:01,679
give a

2278
01:24:01,679 --> 01:24:02,400
and

2279
01:24:02,400 --> 01:24:03,120
to

2280
01:24:03,120 --> 01:24:04,960
you i give b

2281
01:24:04,960 --> 01:24:07,280
and yes um and that they're specified by

2282
01:24:07,280 --> 01:24:09,920
by path or whatever right and so yes now

2283
01:24:09,920 --> 01:24:11,120
and so now

2284
01:24:11,120 --> 01:24:12,719
as another proxy like faithfully does

2285
01:24:12,719 --> 01:24:13,840
this it hides everything but it doesn't

2286
01:24:13,840 --> 01:24:15,760
matter because i okay because i've i've

2287
01:24:15,760 --> 01:24:17,920
now i've not linked up the dns

2288
01:24:17,920 --> 01:24:20,080
publication in that and so i'm like i'm

2289
01:24:20,080 --> 01:24:21,520
like

2290
01:24:21,520 --> 01:24:22,719
i'm just really worried that like

2291
01:24:22,719 --> 01:24:23,840
actually this will be quite easy to

2292
01:24:23,840 --> 01:24:25,840
attack um and i can imagine like i can

2293
01:24:25,840 --> 01:24:27,120
imagine a bunch of other like variants

2294
01:24:27,120 --> 01:24:28,400
of this well i give like really short

2295
01:24:28,400 --> 01:24:30,560
dhcp lifetimes and then i like i

2296
01:24:30,560 --> 01:24:31,920
encourage your identity and like in

2297
01:24:31,920 --> 01:24:33,199
single bits or i have multiple things i

2298
01:24:33,199 --> 01:24:34,400
mean i can imagine a lot of ways to

2299
01:24:34,400 --> 01:24:36,800
attack this directly and so i i i guess

2300
01:24:36,800 --> 01:24:38,560
like i want to persuade myself if this

2301
01:24:38,560 --> 01:24:41,040
actually is going to work

2302
01:24:41,040 --> 01:24:41,920
um

2303
01:24:41,920 --> 01:24:44,719
right exactly and i think that's

2304
01:24:44,719 --> 01:24:46,800
so the approach

2305
01:24:46,800 --> 01:24:49,600
you know we are thinking of here is

2306
01:24:49,600 --> 01:24:51,440
again relying on this relationship

2307
01:24:51,440 --> 01:24:52,880
between the client and the proxy and

2308
01:24:52,880 --> 01:24:55,280
that there is trust there the proxy is

2309
01:24:55,280 --> 01:24:58,800
in a place where it can ensure that the

2310
01:24:58,800 --> 01:25:01,120
volume of traffic of essentially

2311
01:25:01,120 --> 01:25:03,040
different clients to a given

2312
01:25:03,040 --> 01:25:05,920
target path as well as like the the key

2313
01:25:05,920 --> 01:25:07,040
ids

2314
01:25:07,040 --> 01:25:08,560
of the configurations is sufficiently

2315
01:25:08,560 --> 01:25:11,120
large the proxy can definitely recognize

2316
01:25:11,120 --> 01:25:13,040
or clients could all report to some

2317
01:25:13,040 --> 01:25:16,080
other entity for transparency

2318
01:25:16,080 --> 01:25:17,920
you know what are the paths and stuff

2319
01:25:17,920 --> 01:25:20,159
they're seeing so you could detect oh

2320
01:25:20,159 --> 01:25:21,920
this is a unique client and they're the

2321
01:25:21,920 --> 01:25:23,440
only ones who get this

2322
01:25:23,440 --> 01:25:24,560
um

2323
01:25:24,560 --> 01:25:27,600
and that that's part of why i think

2324
01:25:27,600 --> 01:25:28,880
there is a

2325
01:25:28,880 --> 01:25:30,480
there is i think a case where this

2326
01:25:30,480 --> 01:25:32,400
discovery makes sense and is useful but

2327
01:25:32,400 --> 01:25:33,840
it's

2328
01:25:33,840 --> 01:25:35,600
it has a lot of constraints on it and it

2329
01:25:35,600 --> 01:25:38,080
doesn't make sense

2330
01:25:38,960 --> 01:25:41,840
oh sorry i

2331
01:25:41,840 --> 01:25:43,360
i don't know what to do about that

2332
01:25:43,360 --> 01:25:45,360
you're better now

2333
01:25:45,360 --> 01:25:46,320
okay

2334
01:25:46,320 --> 01:25:48,639
sorry

2335
01:25:49,199 --> 01:25:50,239
um

2336
01:25:50,239 --> 01:25:52,080
anyway yeah i

2337
01:25:52,080 --> 01:25:54,960
i think it depends a lot on how the

2338
01:25:54,960 --> 01:25:56,719
client can trust

2339
01:25:56,719 --> 01:25:58,880
the proxy or work with other clients to

2340
01:25:58,880 --> 01:26:00,639
detect

2341
01:26:00,639 --> 01:26:02,960
um unique configurations and i think we

2342
01:26:02,960 --> 01:26:05,360
have a call out to some of the work that

2343
01:26:05,360 --> 01:26:08,560
chris and mt we're doing for key

2344
01:26:08,560 --> 01:26:10,080
consistency

2345
01:26:10,080 --> 01:26:11,199
right

2346
01:26:11,199 --> 01:26:14,000
well i i i think i guess so i i think

2347
01:26:14,000 --> 01:26:15,679
well i guess i perhaps feel differently

2348
01:26:15,679 --> 01:26:17,120
about this in the sense that like i feel

2349
01:26:17,120 --> 01:26:18,560
like we kind of we kind of like hand

2350
01:26:18,560 --> 01:26:20,400
weight this away when we when we started

2351
01:26:20,400 --> 01:26:22,080
privacy pass and now we're like having

2352
01:26:22,080 --> 01:26:23,280
to fight it because we haven't waved it

2353
01:26:23,280 --> 01:26:24,880
away and we didn't have a solution so i

2354
01:26:24,880 --> 01:26:27,040
guess like i'm a little reluctant to

2355
01:26:27,040 --> 01:26:28,800
take that bet again um without having

2356
01:26:28,800 --> 01:26:30,639
like some a more clearly worked example

2357
01:26:30,639 --> 01:26:31,840
of how to make this one how to actually

2358
01:26:31,840 --> 01:26:33,520
make this work but um

2359
01:26:33,520 --> 01:26:35,120
um but i agree it's a problem worth

2360
01:26:35,120 --> 01:26:37,600
trying to solve

2361
01:26:37,600 --> 01:26:40,000
thank you

2362
01:26:42,719 --> 01:26:45,280
hey ben schwartz so uh

2363
01:26:45,280 --> 01:26:47,360
maybe some people didn't see the the

2364
01:26:47,360 --> 01:26:50,000
comments on the the ohio mailing list

2365
01:26:50,000 --> 01:26:52,400
about this but so i read through this

2366
01:26:52,400 --> 01:26:54,719
and i conclude this is this arrangement

2367
01:26:54,719 --> 01:26:56,639
is um

2368
01:26:56,639 --> 01:26:58,800
first of all not secure

2369
01:26:58,800 --> 01:27:01,520
like above all this arrangement

2370
01:27:01,520 --> 01:27:02,840
uh

2371
01:27:02,840 --> 01:27:06,320
essentially hands over root ca powers to

2372
01:27:06,320 --> 01:27:08,639
the proxy server who can now

2373
01:27:08,639 --> 01:27:09,840
arbitrarily

2374
01:27:09,840 --> 01:27:12,800
invisibly impersonate any

2375
01:27:12,800 --> 01:27:15,199
um any website on the internet

2376
01:27:15,199 --> 01:27:16,960
uh it doesn't even have to be a website

2377
01:27:16,960 --> 01:27:20,560
that actually supports oblivious http

2378
01:27:20,560 --> 01:27:22,560
um so i am

2379
01:27:22,560 --> 01:27:24,639
seriously concerned i do not support the

2380
01:27:24,639 --> 01:27:26,639
draft as as written

2381
01:27:26,639 --> 01:27:28,320
i do think that

2382
01:27:28,320 --> 01:27:31,520
there's i i do disagree

2383
01:27:31,520 --> 01:27:33,199
about that

2384
01:27:33,199 --> 01:27:34,880
model i think it'd be good to explore

2385
01:27:34,880 --> 01:27:36,400
that a bit more right

2386
01:27:36,400 --> 01:27:38,239
sure so

2387
01:27:38,239 --> 01:27:39,600
there is a trust relationship between

2388
01:27:39,600 --> 01:27:40,800
the client and the proxy already and i

2389
01:27:40,800 --> 01:27:42,639
don't think that it's going to be able

2390
01:27:42,639 --> 01:27:43,840
to just

2391
01:27:43,840 --> 01:27:44,639
grab

2392
01:27:44,639 --> 01:27:46,080
tell the client whatever keys it wants

2393
01:27:46,080 --> 01:27:47,120
that's not where the keys are coming

2394
01:27:47,120 --> 01:27:48,480
from

2395
01:27:48,480 --> 01:27:50,960
uh right the keys are coming for over an

2396
01:27:50,960 --> 01:27:52,639
insecure channel they're coming through

2397
01:27:52,639 --> 01:27:55,600
the dns which is assumed insecure unless

2398
01:27:55,600 --> 01:27:57,440
stated otherwise

2399
01:27:57,440 --> 01:28:00,719
so uh in our in all our threat modeling

2400
01:28:00,719 --> 01:28:03,360
for the web we always assume that a dns

2401
01:28:03,360 --> 01:28:05,840
attacker could be swapping in arbitrary

2402
01:28:05,840 --> 01:28:07,360
things we don't trust

2403
01:28:07,360 --> 01:28:08,880
you know we don't rely on the ip

2404
01:28:08,880 --> 01:28:10,560
addresses coming back from dns or

2405
01:28:10,560 --> 01:28:11,840
anything else

2406
01:28:11,840 --> 01:28:14,880
uh to be secure in order to

2407
01:28:14,880 --> 01:28:16,800
in order to authenticate the domains

2408
01:28:16,800 --> 01:28:19,679
that we're visiting uh this

2409
01:28:19,679 --> 01:28:21,600
this would change that this would say

2410
01:28:21,600 --> 01:28:24,080
that if the proxy can

2411
01:28:24,080 --> 01:28:26,480
poison a dns cache if the if the

2412
01:28:26,480 --> 01:28:28,320
entity that operates the proxy can also

2413
01:28:28,320 --> 01:28:31,199
execute a dns cache poisoning attack or

2414
01:28:31,199 --> 01:28:33,520
just operates the dns resolver which

2415
01:28:33,520 --> 01:28:36,239
seems entirely reasonable or happens to

2416
01:28:36,239 --> 01:28:38,639
be near the path between the user and an

2417
01:28:38,639 --> 01:28:42,880
insecure dns server which also seems

2418
01:28:42,880 --> 01:28:44,880
highly plausible for a lot of these

2419
01:28:44,880 --> 01:28:46,639
proxy deployments

2420
01:28:46,639 --> 01:28:47,440
then

2421
01:28:47,440 --> 01:28:49,199
the proxy can

2422
01:28:49,199 --> 01:28:52,960
swap out the or or even inject a

2423
01:28:52,960 --> 01:28:55,600
synthetic ohttp config

2424
01:28:55,600 --> 01:28:58,400
for whatever domain the the user is

2425
01:28:58,400 --> 01:29:00,960
attempting to resolve and then

2426
01:29:00,960 --> 01:29:03,280
act as the origin

2427
01:29:03,280 --> 01:29:05,040
so

2428
01:29:05,040 --> 01:29:07,440
to me that makes this really a serious

2429
01:29:07,440 --> 01:29:08,880
problem i also have some other concerns

2430
01:29:08,880 --> 01:29:10,320
with the design i think the use of a

2431
01:29:10,320 --> 01:29:12,880
path here is basically wrong

2432
01:29:12,880 --> 01:29:15,520
the dope the path the doe path parameter

2433
01:29:15,520 --> 01:29:18,400
in the dough service b mapping is not a

2434
01:29:18,400 --> 01:29:21,280
good thing it's there as a compatibility

2435
01:29:21,280 --> 01:29:23,280
hack to be able to

2436
01:29:23,280 --> 01:29:26,480
work with pre-existing dns over https

2437
01:29:26,480 --> 01:29:29,760
servers but the the

2438
01:29:29,760 --> 01:29:32,400
dns service beam mapping has a long long

2439
01:29:32,400 --> 01:29:34,480
multiple paragraphs of caveats trying to

2440
01:29:34,480 --> 01:29:37,040
explain the dangers that this creates

2441
01:29:37,040 --> 01:29:38,480
because that path again is

2442
01:29:38,480 --> 01:29:40,320
attacker-controlled

2443
01:29:40,320 --> 01:29:41,120
so

2444
01:29:41,120 --> 01:29:43,520
uh so you can't assume anything about it

2445
01:29:43,520 --> 01:29:45,440
there's some problem like pat multiple

2446
01:29:45,440 --> 01:29:48,000
paths on the same server can interfere

2447
01:29:48,000 --> 01:29:49,760
uh so i think that we shouldn't have a

2448
01:29:49,760 --> 01:29:52,880
path here right there should only be um

2449
01:29:52,880 --> 01:29:55,600
that should somehow be a fixed value

2450
01:29:55,600 --> 01:29:57,120
effectively you know through the dot

2451
01:29:57,120 --> 01:30:00,000
well known mechanism

2452
01:30:00,000 --> 01:30:02,159
i mean a path on the target

2453
01:30:02,159 --> 01:30:05,360
is required to be known

2454
01:30:07,520 --> 01:30:09,679
i understand but we don't need it to be

2455
01:30:09,679 --> 01:30:12,000
flexible um given that there is no

2456
01:30:12,000 --> 01:30:13,440
install base that we're trying to

2457
01:30:13,440 --> 01:30:15,679
maintain compatibility with we can set

2458
01:30:15,679 --> 01:30:18,080
that we can say in the case where you

2459
01:30:18,080 --> 01:30:22,159
are trying to upgrade a a standard http

2460
01:30:22,159 --> 01:30:23,840
connection in this in the case where

2461
01:30:23,840 --> 01:30:26,400
you're trying to bootstrap ohttp

2462
01:30:26,400 --> 01:30:29,280
off of a dns name where all you have is

2463
01:30:29,280 --> 01:30:31,520
the dns name then we can say there's a

2464
01:30:31,520 --> 01:30:33,840
fixed default path for that or there's a

2465
01:30:33,840 --> 01:30:36,159
fixed inbound mechanism for learning

2466
01:30:36,159 --> 01:30:38,880
that path by again querying to something

2467
01:30:38,880 --> 01:30:40,800
in dot well known

2468
01:30:40,800 --> 01:30:42,159
i do think that there's a version of

2469
01:30:42,159 --> 01:30:44,639
this that can be made secure and and

2470
01:30:44,639 --> 01:30:47,280
workable and it's actually much simpler

2471
01:30:47,280 --> 01:30:49,120
and that is to just set a flag here that

2472
01:30:49,120 --> 01:30:50,480
says i do

2473
01:30:50,480 --> 01:30:54,400
http or i require ohtttp and then let

2474
01:30:54,400 --> 01:30:57,280
the client actually contact that origin

2475
01:30:57,280 --> 01:30:59,040
directly and you know through an

2476
01:30:59,040 --> 01:31:01,520
authenticated channel learn the ohtttp

2477
01:31:01,520 --> 01:31:02,480
config

2478
01:31:02,480 --> 01:31:04,639
learn the preferred path and then use

2479
01:31:04,639 --> 01:31:06,800
them

2480
01:31:11,679 --> 01:31:15,080
alright ted

2481
01:31:18,080 --> 01:31:20,400
uh ted hardy speaking um can you go back

2482
01:31:20,400 --> 01:31:23,520
to slides seven and eight please start

2483
01:31:23,520 --> 01:31:26,159
on seven

2484
01:31:26,159 --> 01:31:29,120
uh so if i understand this correctly um

2485
01:31:29,120 --> 01:31:30,719
once the

2486
01:31:30,719 --> 01:31:34,400
client has gotten information that the

2487
01:31:34,400 --> 01:31:36,639
isp dns resolver is accessible through

2488
01:31:36,639 --> 01:31:39,360
the isp doh target it tells this

2489
01:31:39,360 --> 01:31:41,199
information

2490
01:31:41,199 --> 01:31:42,639
it starts to use this information

2491
01:31:42,639 --> 01:31:44,239
through its proxy and i want to make

2492
01:31:44,239 --> 01:31:46,080
sure i understand this correctly

2493
01:31:46,080 --> 01:31:49,280
because is it your presumption here

2494
01:31:49,280 --> 01:31:50,480
that

2495
01:31:50,480 --> 01:31:52,320
if

2496
01:31:52,320 --> 01:31:56,560
the isp dns resolver presents an isp odo

2497
01:31:56,560 --> 01:31:57,600
target

2498
01:31:57,600 --> 01:32:00,719
it must always be accessible

2499
01:32:00,719 --> 01:32:02,000
to

2500
01:32:02,000 --> 01:32:03,840
all parts of the network in order to

2501
01:32:03,840 --> 01:32:06,320
work with any proxy

2502
01:32:06,320 --> 01:32:08,400
because typically isp dns resolvers

2503
01:32:08,400 --> 01:32:09,440
aren't

2504
01:32:09,440 --> 01:32:11,120
globally

2505
01:32:11,120 --> 01:32:13,040
accessible and this makes them so and i

2506
01:32:13,040 --> 01:32:14,800
want to make sure i understand that

2507
01:32:14,800 --> 01:32:17,840
that's your presumption here

2508
01:32:17,840 --> 01:32:19,360
that that is correct it doesn't

2509
01:32:19,360 --> 01:32:22,000
necessarily need to be open

2510
01:32:22,000 --> 01:32:24,400
to anybody in the world it could

2511
01:32:24,400 --> 01:32:27,040
certainly have an allow list of known

2512
01:32:27,040 --> 01:32:29,040
proxy deployments that it is willing to

2513
01:32:29,040 --> 01:32:31,120
work with

2514
01:32:31,120 --> 01:32:34,320
but yes it does need to be reachable via

2515
01:32:34,320 --> 01:32:35,840
the proxies

2516
01:32:35,840 --> 01:32:38,159
and that means it's not

2517
01:32:38,159 --> 01:32:41,600
isolated within the isp network okay so

2518
01:32:41,600 --> 01:32:43,520
i i think this is worth unpacking a

2519
01:32:43,520 --> 01:32:45,199
little bit more as you think about how

2520
01:32:45,199 --> 01:32:46,800
this goes because there are a couple of

2521
01:32:46,800 --> 01:32:49,760
consequences to that one is you if you

2522
01:32:49,760 --> 01:32:51,840
say there's an allow list

2523
01:32:51,840 --> 01:32:54,719
um you you either can pay a penalty um

2524
01:32:54,719 --> 01:32:55,920
by checking

2525
01:32:55,920 --> 01:32:57,520
each one of the proxies that you have

2526
01:32:57,520 --> 01:32:59,520
access to to find out if any of them are

2527
01:32:59,520 --> 01:33:01,679
on the allow list and that that's

2528
01:33:01,679 --> 01:33:03,199
perhaps not a very serious latency

2529
01:33:03,199 --> 01:33:05,360
penalty but it definitely would occur if

2530
01:33:05,360 --> 01:33:07,040
the only way to discover whether it's on

2531
01:33:07,040 --> 01:33:08,400
the allow list

2532
01:33:08,400 --> 01:33:11,520
is by experimentation or

2533
01:33:11,520 --> 01:33:13,520
you can publish the allow list in some

2534
01:33:13,520 --> 01:33:15,440
way and i think if you publish the allow

2535
01:33:15,440 --> 01:33:17,360
list you actually have changed the scope

2536
01:33:17,360 --> 01:33:19,360
of what you were talking about from

2537
01:33:19,360 --> 01:33:20,400
changing

2538
01:33:20,400 --> 01:33:23,280
how do i find a a target

2539
01:33:23,280 --> 01:33:25,760
to also how do i find a proxy because

2540
01:33:25,760 --> 01:33:27,679
what you're in effect doing

2541
01:33:27,679 --> 01:33:31,360
is using the the information uh from the

2542
01:33:31,360 --> 01:33:33,280
the information carrying that the target

2543
01:33:33,280 --> 01:33:35,120
list to also carry

2544
01:33:35,120 --> 01:33:38,400
uh the the permitted uh proxy list so i

2545
01:33:38,400 --> 01:33:40,480
think if if you're gonna go down that

2546
01:33:40,480 --> 01:33:42,719
path and use that allow list as

2547
01:33:42,719 --> 01:33:44,400
something that's published you're you're

2548
01:33:44,400 --> 01:33:46,080
in effect

2549
01:33:46,080 --> 01:33:47,199
whether that's

2550
01:33:47,199 --> 01:33:48,960
generic or not

2551
01:33:48,960 --> 01:33:51,600
you are providing discovery for

2552
01:33:51,600 --> 01:33:52,880
for proxies

2553
01:33:52,880 --> 01:33:54,320
i don't necessarily think that's a bad

2554
01:33:54,320 --> 01:33:56,159
thing as was pointed out on the list

2555
01:33:56,159 --> 01:33:57,679
this is this is sort of a twinned

2556
01:33:57,679 --> 01:33:59,840
problem here a proxy is useless without

2557
01:33:59,840 --> 01:34:01,199
targets and the target is useless

2558
01:34:01,199 --> 01:34:03,120
without proxies they don't without

2559
01:34:03,120 --> 01:34:04,880
knowing both of them you you actually

2560
01:34:04,880 --> 01:34:07,840
can't get this oblivious service but i

2561
01:34:07,840 --> 01:34:10,239
think if you are going to do that

2562
01:34:10,239 --> 01:34:11,440
you have to kind of rethink

2563
01:34:11,440 --> 01:34:13,360
architecturally that that's the scope

2564
01:34:13,360 --> 01:34:15,600
now and is this the best way to do it

2565
01:34:15,600 --> 01:34:17,199
um and

2566
01:34:17,199 --> 01:34:19,360
maybe maybe that does need some more

2567
01:34:19,360 --> 01:34:20,719
thought thanks

2568
01:34:20,719 --> 01:34:22,639
all right thank you um and just to

2569
01:34:22,639 --> 01:34:24,960
respond quickly to that so yes you

2570
01:34:24,960 --> 01:34:27,120
certainly could have an approach where

2571
01:34:27,120 --> 01:34:28,480
along with

2572
01:34:28,480 --> 01:34:30,080
the target information and target

2573
01:34:30,080 --> 01:34:32,800
configuration you get a list of

2574
01:34:32,800 --> 01:34:35,520
associated or trusted proxies

2575
01:34:35,520 --> 01:34:37,199
the other way that this can work is

2576
01:34:37,199 --> 01:34:38,480
again

2577
01:34:38,480 --> 01:34:40,239
the client

2578
01:34:40,239 --> 01:34:42,480
has to know

2579
01:34:42,480 --> 01:34:45,040
with its proxy

2580
01:34:45,040 --> 01:34:48,320
what the mapping is of paths so

2581
01:34:48,320 --> 01:34:51,119
if the client does have multiple proxies

2582
01:34:51,119 --> 01:34:52,800
it essentially needs to be able to ask

2583
01:34:52,800 --> 01:34:54,080
its proxy

2584
01:34:54,080 --> 01:34:55,440
have you heard of this target do you

2585
01:34:55,440 --> 01:34:56,880
know how to access it and so it's not

2586
01:34:56,880 --> 01:34:58,239
like we will have to actually have to

2587
01:34:58,239 --> 01:35:00,000
create

2588
01:35:00,000 --> 01:35:02,800
and just try random requests it can have

2589
01:35:02,800 --> 01:35:04,320
its own communication with proxies to

2590
01:35:04,320 --> 01:35:05,760
say do you already have an established

2591
01:35:05,760 --> 01:35:08,239
relationship with this target

2592
01:35:08,239 --> 01:35:10,960
uh so i agree with that thank you and um

2593
01:35:10,960 --> 01:35:12,639
there are other ways you could do it as

2594
01:35:12,639 --> 01:35:15,840
well right the the dns resolver target

2595
01:35:15,840 --> 01:35:18,560
could tell you uh what uh its

2596
01:35:18,560 --> 01:35:20,159
reachability limits are and say

2597
01:35:20,159 --> 01:35:21,920
basically give you a reachability limit

2598
01:35:21,920 --> 01:35:23,920
that's only within the isp

2599
01:35:23,920 --> 01:35:26,639
um or only within some region etc and so

2600
01:35:26,639 --> 01:35:27,679
you could do it in a bunch of different

2601
01:35:27,679 --> 01:35:29,520
ways but i think

2602
01:35:29,520 --> 01:35:32,880
it it may be important that you work out

2603
01:35:32,880 --> 01:35:35,119
in a little bit more detail which one

2604
01:35:35,119 --> 01:35:39,000
you expect to be the standard

2605
01:35:42,159 --> 01:35:45,119
davidskenazi hey tommy um

2606
01:35:45,119 --> 01:35:46,159
so

2607
01:35:46,159 --> 01:35:48,239
overall i think there's

2608
01:35:48,239 --> 01:35:51,280
definitely value in

2609
01:35:51,280 --> 01:35:53,520
having a way to

2610
01:35:53,520 --> 01:35:56,520
um

2611
01:35:56,800 --> 01:35:58,960
for a target to be able to say hey if

2612
01:35:58,960 --> 01:36:00,639
you want to talk to me here's a way of

2613
01:36:00,639 --> 01:36:03,280
doing it that improves your privacy so i

2614
01:36:03,280 --> 01:36:05,040
i like that i think there's a problem

2615
01:36:05,040 --> 01:36:07,040
worth solving here

2616
01:36:07,040 --> 01:36:08,239
um

2617
01:36:08,239 --> 01:36:10,080
however uh and i think you know some of

2618
01:36:10,080 --> 01:36:12,719
the deployment concerns uh are somewhat

2619
01:36:12,719 --> 01:36:14,719
orthogonal uh some of them not all of

2620
01:36:14,719 --> 01:36:15,600
them

2621
01:36:15,600 --> 01:36:17,119
but the

2622
01:36:17,119 --> 01:36:20,239
the point that ben made where uh

2623
01:36:20,239 --> 01:36:22,400
because of the way we have odo

2624
01:36:22,400 --> 01:36:25,360
sorry oblivious http today

2625
01:36:25,360 --> 01:36:26,480
um

2626
01:36:26,480 --> 01:36:28,400
you don't have a step or you verify

2627
01:36:28,400 --> 01:36:30,320
ownership of the private key for the tls

2628
01:36:30,320 --> 01:36:32,239
certificate um

2629
01:36:32,239 --> 01:36:34,000
that breaks kind of the security model

2630
01:36:34,000 --> 01:36:35,600
of a lot of things

2631
01:36:35,600 --> 01:36:36,480
so

2632
01:36:36,480 --> 01:36:39,199
i would say totally agree with the

2633
01:36:39,199 --> 01:36:41,920
problem to be solved here um i think we

2634
01:36:41,920 --> 01:36:44,800
should refine the solution to make sure

2635
01:36:44,800 --> 01:36:47,360
that that gap is fixed because otherwise

2636
01:36:47,360 --> 01:36:50,560
this sounds like a giant foot gun

2637
01:36:50,560 --> 01:36:52,239
thanks

2638
01:36:52,239 --> 01:36:54,879
all right thank you

2639
01:36:57,440 --> 01:36:59,919
martin

2640
01:37:01,520 --> 01:37:02,800
you're in front of me i wasn't sure if

2641
01:37:02,800 --> 01:37:03,920
it was me

2642
01:37:03,920 --> 01:37:05,840
so i'm sort of wondering whether there

2643
01:37:05,840 --> 01:37:07,199
is something here

2644
01:37:07,199 --> 01:37:09,119
that's a little little different in

2645
01:37:09,119 --> 01:37:11,280
terms of the design that might be might

2646
01:37:11,280 --> 01:37:12,960
be able to work so

2647
01:37:12,960 --> 01:37:15,840
i i think the large open problem that

2648
01:37:15,840 --> 01:37:19,040
you have here is that there's

2649
01:37:19,040 --> 01:37:21,360
there's a target and you've described a

2650
01:37:21,360 --> 01:37:24,159
way of discovering the target which i

2651
01:37:24,159 --> 01:37:26,800
think generally works um

2652
01:37:26,800 --> 01:37:30,239
there but the discovery proxy and

2653
01:37:30,239 --> 01:37:32,159
finding the intersection

2654
01:37:32,159 --> 01:37:34,639
of the set of proxies that the client

2655
01:37:34,639 --> 01:37:37,040
will trust and the set of proxies that

2656
01:37:37,040 --> 01:37:39,520
the target will trust

2657
01:37:39,520 --> 01:37:40,560
is

2658
01:37:40,560 --> 01:37:43,360
challenging um

2659
01:37:43,360 --> 01:37:45,360
and because there's no discovery

2660
01:37:45,360 --> 01:37:48,159
mechanism for the proxy pieces

2661
01:37:48,159 --> 01:37:50,000
the information the client has is

2662
01:37:50,000 --> 01:37:51,199
insufficient

2663
01:37:51,199 --> 01:37:53,440
based on your your current design i

2664
01:37:53,440 --> 01:37:54,960
think we did a little bit more about

2665
01:37:54,960 --> 01:37:57,679
that to ted's point earlier

2666
01:37:57,679 --> 01:37:59,600
so um

2667
01:37:59,600 --> 01:38:01,440
i think we probably need something more

2668
01:38:01,440 --> 01:38:02,400
i found

2669
01:38:02,400 --> 01:38:04,560
that the draft to be quite confusing on

2670
01:38:04,560 --> 01:38:06,320
that front because thinking as a client

2671
01:38:06,320 --> 01:38:07,119
i

2672
01:38:07,119 --> 01:38:08,639
i saw a url

2673
01:38:08,639 --> 01:38:12,000
but that's not the url that i i can use

2674
01:38:12,000 --> 01:38:14,080
i need two of them in order to make a

2675
01:38:14,080 --> 01:38:17,040
request with the oblivious http and you

2676
01:38:17,040 --> 01:38:18,800
only gave me one of them

2677
01:38:18,800 --> 01:38:20,639
so um

2678
01:38:20,639 --> 01:38:22,560
i think there's probably

2679
01:38:22,560 --> 01:38:25,440
around before we would go there

2680
01:38:25,440 --> 01:38:28,960
yeah i mean to respond to that i think

2681
01:38:28,960 --> 01:38:32,239
the existing model without discovery

2682
01:38:32,239 --> 01:38:33,840
for either proxy or target is

2683
01:38:33,840 --> 01:38:37,119
essentially you need some proprietary

2684
01:38:37,119 --> 01:38:38,960
mechanism for

2685
01:38:38,960 --> 01:38:41,920
learning the configurations and learning

2686
01:38:41,920 --> 01:38:44,159
what your proxy is and what the paths

2687
01:38:44,159 --> 01:38:47,360
are that map to your target

2688
01:38:47,360 --> 01:38:49,199
so a lot of this is

2689
01:38:49,199 --> 01:38:51,520
managed to clarify it assuming that you

2690
01:38:51,520 --> 01:38:53,199
still have that

2691
01:38:53,199 --> 01:38:54,800
proprietary

2692
01:38:54,800 --> 01:38:58,239
mechanism to communicate

2693
01:38:58,239 --> 01:39:00,400
uh what the config of the proxy is to

2694
01:39:00,400 --> 01:39:02,080
the client

2695
01:39:02,080 --> 01:39:03,199
and that essentially the client and

2696
01:39:03,199 --> 01:39:04,719
proxy can learn

2697
01:39:04,719 --> 01:39:06,639
you can negotiate

2698
01:39:06,639 --> 01:39:08,560
what they support and what the paths are

2699
01:39:08,560 --> 01:39:09,600
etc

2700
01:39:09,600 --> 01:39:11,199
and learn whether or not this target is

2701
01:39:11,199 --> 01:39:13,440
supported

2702
01:39:13,440 --> 01:39:15,760
and a new mechanism

2703
01:39:15,760 --> 01:39:17,280
have that relationship between a client

2704
01:39:17,280 --> 01:39:19,760
and a proxy that is generic

2705
01:39:19,760 --> 01:39:20,560
um

2706
01:39:20,560 --> 01:39:23,199
i think is a larger

2707
01:39:23,199 --> 01:39:27,199
scope and is less clear to me

2708
01:39:27,199 --> 01:39:29,520
yeah so probably the

2709
01:39:29,520 --> 01:39:31,199
uh

2710
01:39:31,199 --> 01:39:33,360
other idea that i had here was

2711
01:39:33,360 --> 01:39:35,760
if you get a url for the target resource

2712
01:39:35,760 --> 01:39:37,119
there's a bunch of things you can do by

2713
01:39:37,119 --> 01:39:40,480
talking to that target resource

2714
01:39:40,880 --> 01:39:42,400
in terms of learning what proxies it

2715
01:39:42,400 --> 01:39:44,880
trusts and learning what it's uh

2716
01:39:44,880 --> 01:39:47,520
its config is that of course creates

2717
01:39:47,520 --> 01:39:49,280
some interesting issues when it comes to

2718
01:39:49,280 --> 01:39:50,800
consistency

2719
01:39:50,800 --> 01:39:52,159
but um

2720
01:39:52,159 --> 01:39:53,280
those are the issues that i think we

2721
01:39:53,280 --> 01:39:55,119
need to be we need to be thinking

2722
01:39:55,119 --> 01:39:57,599
through here

2723
01:40:02,320 --> 01:40:04,960
chris hi yeah chris box uh i work with

2724
01:40:04,960 --> 01:40:07,520
bt um i just wanted to

2725
01:40:07,520 --> 01:40:09,119
say i think this is a really interesting

2726
01:40:09,119 --> 01:40:10,639
idea

2727
01:40:10,639 --> 01:40:11,920
it

2728
01:40:11,920 --> 01:40:15,199
it allows an isp to offer

2729
01:40:15,199 --> 01:40:17,920
dns based services

2730
01:40:17,920 --> 01:40:20,320
in a way that

2731
01:40:20,320 --> 01:40:22,800
doesn't require exposing the client's

2732
01:40:22,800 --> 01:40:25,199
identity so for example

2733
01:40:25,199 --> 01:40:27,679
an isp could offer malware filtering you

2734
01:40:27,679 --> 01:40:29,360
know for that service

2735
01:40:29,360 --> 01:40:30,800
we don't get to know who make the

2736
01:40:30,800 --> 01:40:33,199
request

2737
01:40:34,080 --> 01:40:35,280
so

2738
01:40:35,280 --> 01:40:37,760
i don't yeah i take the point of of

2739
01:40:37,760 --> 01:40:39,679
others about yeah we need to explore all

2740
01:40:39,679 --> 01:40:41,760
the implications of it but uh

2741
01:40:41,760 --> 01:40:44,239
i think it's a it's a good idea and uh

2742
01:40:44,239 --> 01:40:47,440
i'd like to see it adopted

2743
01:40:48,560 --> 01:40:52,080
all right thank you yeah yeah definitely

2744
01:40:52,080 --> 01:40:54,480
let's work work on the problem is right

2745
01:40:54,480 --> 01:40:58,000
here and fix the solution

2746
01:40:58,080 --> 01:41:01,719
yes eric

2747
01:41:04,719 --> 01:41:06,320
yeah very very similar to the last

2748
01:41:06,320 --> 01:41:07,920
comment actually i i think this is a

2749
01:41:07,920 --> 01:41:10,320
very good problem i like the overall

2750
01:41:10,320 --> 01:41:12,000
i like the overall solution i like the

2751
01:41:12,000 --> 01:41:13,360
overall area solve i think this is

2752
01:41:13,360 --> 01:41:14,719
something we should be adopting i think

2753
01:41:14,719 --> 01:41:17,679
the only question is do we solve the

2754
01:41:17,679 --> 01:41:19,600
very big security issues that i agree

2755
01:41:19,600 --> 01:41:20,639
with almost everything ever said in

2756
01:41:20,639 --> 01:41:22,880
those areas already do we solve those

2757
01:41:22,880 --> 01:41:25,119
before we adopted or do we adopt and

2758
01:41:25,119 --> 01:41:26,239
write the solutions for them and i don't

2759
01:41:26,239 --> 01:41:28,400
think they're too hard of security

2760
01:41:28,400 --> 01:41:30,480
issues to solve we've had a lot of

2761
01:41:30,480 --> 01:41:32,880
talk in the chat about hey signings of

2762
01:41:32,880 --> 01:41:34,000
all this

2763
01:41:34,000 --> 01:41:35,360
the draft r discussed a little bit

2764
01:41:35,360 --> 01:41:37,679
linking the consistency draft for stuff

2765
01:41:37,679 --> 01:41:38,719
about the

2766
01:41:38,719 --> 01:41:40,560
the other one that echo was discussing

2767
01:41:40,560 --> 01:41:41,920
earlier so

2768
01:41:41,920 --> 01:41:44,080
i i think if we if we beef up the

2769
01:41:44,080 --> 01:41:45,679
handling for security implications this

2770
01:41:45,679 --> 01:41:47,840
is a very good draft to have so i mean

2771
01:41:47,840 --> 01:41:50,400
i'd say let's adopt it and

2772
01:41:50,400 --> 01:41:52,719
do that beefing up

2773
01:41:52,719 --> 01:41:56,000
great um and what i would say is

2774
01:41:56,000 --> 01:41:57,360
besides stuff on the list there is a

2775
01:41:57,360 --> 01:41:58,560
github

2776
01:41:58,560 --> 01:42:01,600
for this and so eric and ben and egger

2777
01:42:01,600 --> 01:42:03,760
if people have ideas

2778
01:42:03,760 --> 01:42:04,639
let's

2779
01:42:04,639 --> 01:42:07,360
work on them and try to revise this we

2780
01:42:07,360 --> 01:42:09,199
can turn out another version of the

2781
01:42:09,199 --> 01:42:10,719
draft quickly and if that's something

2782
01:42:10,719 --> 01:42:12,800
that people like the solution on more

2783
01:42:12,800 --> 01:42:14,719
then that would be a good adoption

2784
01:42:14,719 --> 01:42:17,040
target

2785
01:42:21,600 --> 01:42:24,480
all right i think that's the cue

2786
01:42:24,480 --> 01:42:25,199
oh

2787
01:42:25,199 --> 01:42:26,560
ben

2788
01:42:26,560 --> 01:42:30,239
ben did you have any last comment there

2789
01:42:32,159 --> 01:42:34,800
if there's time i'll say uh i do think

2790
01:42:34,800 --> 01:42:35,760
that

2791
01:42:35,760 --> 01:42:38,320
that to step back one more step i think

2792
01:42:38,320 --> 01:42:39,679
that

2793
01:42:39,679 --> 01:42:42,320
we need a little bit more of an

2794
01:42:42,320 --> 01:42:44,960
integrated architecture approach here

2795
01:42:44,960 --> 01:42:47,360
that figuring out what makes sense here

2796
01:42:47,360 --> 01:42:49,920
really does depend on

2797
01:42:49,920 --> 01:42:52,639
how we decide to handle key consistency

2798
01:42:52,639 --> 01:42:54,960
for example it depends

2799
01:42:54,960 --> 01:42:56,400
a little bit as

2800
01:42:56,400 --> 01:42:59,040
some some other folks are saying on

2801
01:42:59,040 --> 01:42:59,840
how

2802
01:42:59,840 --> 01:43:00,800
uh

2803
01:43:00,800 --> 01:43:04,080
how users are learning the initial url

2804
01:43:04,080 --> 01:43:06,800
that that got them to this query so i

2805
01:43:06,800 --> 01:43:07,760
think

2806
01:43:07,760 --> 01:43:09,040
i would like to

2807
01:43:09,040 --> 01:43:11,199
see us step back a little bit and see if

2808
01:43:11,199 --> 01:43:12,800
we can get put together you know a set

2809
01:43:12,800 --> 01:43:14,719
of puzzle pieces that really fit fit

2810
01:43:14,719 --> 01:43:16,320
together into a

2811
01:43:16,320 --> 01:43:19,599
into a clean overall solution

2812
01:43:21,840 --> 01:43:24,400
jigsaw puzzle one might say

2813
01:43:24,400 --> 01:43:26,480
yeah so i've been chatting with with my

2814
01:43:26,480 --> 01:43:28,080
co-chair in the background here it seems

2815
01:43:28,080 --> 01:43:29,360
like where we're

2816
01:43:29,360 --> 01:43:31,040
ending up here is that there's you know

2817
01:43:31,040 --> 01:43:33,440
some energy behind this being a problem

2818
01:43:33,440 --> 01:43:36,080
that is useful to solve

2819
01:43:36,080 --> 01:43:38,480
um but it sounds like this the draft is

2820
01:43:38,480 --> 01:43:40,000
not yet in a state where it's it's kind

2821
01:43:40,000 --> 01:43:41,520
of adoptable and there's enough energy

2822
01:43:41,520 --> 01:43:43,760
around the draft in particular

2823
01:43:43,760 --> 01:43:46,400
so i i think the investors there is to

2824
01:43:46,400 --> 01:43:48,960
kind of keep refining the um

2825
01:43:48,960 --> 01:43:50,639
problem statement and especially around

2826
01:43:50,639 --> 01:43:53,679
the security requirements and um

2827
01:43:53,679 --> 01:43:56,239
i think we can look at uh

2828
01:43:56,239 --> 01:43:58,639
you know whether a future draft would

2829
01:43:58,639 --> 01:44:01,520
align with that better

2830
01:44:02,080 --> 01:44:04,400
all right

2831
01:44:05,199 --> 01:44:06,880
i think that brings us to the end of our

2832
01:44:06,880 --> 01:44:09,760
agenda siobhan is that correct

2833
01:44:09,760 --> 01:44:11,920
yes um we do have

2834
01:44:11,920 --> 01:44:14,400
about 15 minutes left i think um you can

2835
01:44:14,400 --> 01:44:17,040
just let everyone go early unless anyone

2836
01:44:17,040 --> 01:44:18,880
has anything

2837
01:44:18,880 --> 01:44:21,360
they'd like to say or we do have like

2838
01:44:21,360 --> 01:44:22,719
buffer time

2839
01:44:22,719 --> 01:44:24,159
um i don't know if anyone has any

2840
01:44:24,159 --> 01:44:26,560
comments

2841
01:44:26,560 --> 01:44:27,840
uh i guess something that we didn't want

2842
01:44:27,840 --> 01:44:31,040
to ask uh which was that like

2843
01:44:31,040 --> 01:44:32,400
it seemed like there were at least a few

2844
01:44:32,400 --> 01:44:34,400
issues that were

2845
01:44:34,400 --> 01:44:37,280
pretty i guess like hotly discuss so

2846
01:44:37,280 --> 01:44:39,040
we were wondering if folks would be

2847
01:44:39,040 --> 01:44:41,679
interested in having virtual interims

2848
01:44:41,679 --> 01:44:44,480
well the shadow band case i think

2849
01:44:44,480 --> 01:44:46,080
was the specific one you were thinking

2850
01:44:46,080 --> 01:44:47,440
about but

2851
01:44:47,440 --> 01:44:48,800
maybe for some of the other ones as well

2852
01:44:48,800 --> 01:44:50,400
so if folks would be interested in that

2853
01:44:50,400 --> 01:44:51,600
um

2854
01:44:51,600 --> 01:44:53,520
i mean please let us know yeah go ahead

2855
01:44:53,520 --> 01:44:55,840
martin

2856
01:44:59,679 --> 01:45:03,000
i don't know

2857
01:45:06,719 --> 01:45:07,440
i

2858
01:45:07,440 --> 01:45:09,280
think given the feedback that we got on

2859
01:45:09,280 --> 01:45:12,320
the shannon banning case here i i have a

2860
01:45:12,320 --> 01:45:14,840
pretty good sense that we can come to a

2861
01:45:14,840 --> 01:45:17,360
conclusion on some text that will work

2862
01:45:17,360 --> 01:45:20,320
for it in the next

2863
01:45:20,320 --> 01:45:21,840
i would say weeks

2864
01:45:21,840 --> 01:45:22,880
uh

2865
01:45:22,880 --> 01:45:24,000
the

2866
01:45:24,000 --> 01:45:26,719
anti-replay stuff uh is maybe less

2867
01:45:26,719 --> 01:45:29,280
settled but i i suspect we can make some

2868
01:45:29,280 --> 01:45:31,199
good progress on that uh

2869
01:45:31,199 --> 01:45:32,880
on on the list

2870
01:45:32,880 --> 01:45:34,639
the discovery issue does seem to be

2871
01:45:34,639 --> 01:45:37,360
something that is is worth um

2872
01:45:37,360 --> 01:45:39,119
spending a bit of in person high

2873
01:45:39,119 --> 01:45:40,880
bandwidth time on

2874
01:45:40,880 --> 01:45:43,440
so if there's any topic that rises to

2875
01:45:43,440 --> 01:45:46,879
that level i think that's the one

2876
01:45:47,360 --> 01:45:48,880
that makes sense so

2877
01:45:48,880 --> 01:45:50,639
it sounds like we maybe don't need to

2878
01:45:50,639 --> 01:45:53,280
schedule a virtual inum right now but

2879
01:45:53,280 --> 01:45:54,960
um if we get to a point where we're

2880
01:45:54,960 --> 01:45:57,600
ready to have some deeper dives on those

2881
01:45:57,600 --> 01:46:00,000
latter two topics

2882
01:46:00,000 --> 01:46:03,520
we chairs would be happy to do it

2883
01:46:05,119 --> 01:46:06,000
yep

2884
01:46:06,000 --> 01:46:07,840
that sounds right

2885
01:46:07,840 --> 01:46:09,440
um

2886
01:46:09,440 --> 01:46:12,960
francesca anything you want to say

2887
01:46:12,960 --> 01:46:14,960
no sounds good

2888
01:46:14,960 --> 01:46:16,239
okay perfect

2889
01:46:16,239 --> 01:46:18,239
all right then thanks all for coming and

2890
01:46:18,239 --> 01:46:20,320
see you all on the list

2891
01:46:20,320 --> 01:46:23,360
thanks for watching

2892
01:46:24,560 --> 01:46:27,679
thanks again francesca for helping us

2893
01:46:27,679 --> 01:46:29,199
thank you and thank you the minutes take

2894
01:46:29,199 --> 01:46:32,519
care as well

2895
01:46:45,679 --> 01:46:47,920
the three big rooms are closed because

2896
01:46:47,920 --> 01:46:49,520
they were reshuffling them

2897
01:46:49,520 --> 01:46:53,320
to prepare for the final

2898
01:46:57,760 --> 01:47:00,960
well i mean just

2899
01:47:00,960 --> 01:47:05,080
you can't you can't say

