1
00:00:05,120 --> 00:00:06,240
okay

2
00:00:06,240 --> 00:00:08,800
welcome everyone let's get going so this

3
00:00:08,800 --> 00:00:11,360
is a second official session

4
00:00:11,360 --> 00:00:13,599
for oauth web group

5
00:00:13,599 --> 00:00:14,960
uh

6
00:00:14,960 --> 00:00:15,759
let's

7
00:00:15,759 --> 00:00:18,160
get going the no well obviously applies

8
00:00:18,160 --> 00:00:20,480
here hopefully you're familiar with this

9
00:00:20,480 --> 00:00:22,400
already

10
00:00:22,400 --> 00:00:23,760
um

11
00:00:23,760 --> 00:00:25,519
hopefully you're already familiar with

12
00:00:25,519 --> 00:00:28,560
those tips too so i'm gonna skip those

13
00:00:28,560 --> 00:00:30,720
let's see with these are the sessions

14
00:00:30,720 --> 00:00:32,558
that we've talked about

15
00:00:32,558 --> 00:00:34,800
this is the update the monday agenda and

16
00:00:34,800 --> 00:00:36,880
the thursday agenda so

17
00:00:36,880 --> 00:00:38,239
um

18
00:00:38,239 --> 00:00:41,920
we have a number of topics that peter um

19
00:00:41,920 --> 00:00:44,079
with the help of

20
00:00:44,079 --> 00:00:46,320
philip and daniel maybe we'll talk about

21
00:00:46,320 --> 00:00:48,160
device code flow

22
00:00:48,160 --> 00:00:48,879
uh

23
00:00:48,879 --> 00:00:51,039
vittorio with the

24
00:00:51,039 --> 00:00:53,760
brian in supporting mode uh we'll talk

25
00:00:53,760 --> 00:00:56,320
about step up authentication

26
00:00:56,320 --> 00:00:57,920
hey daniel then they will talk about

27
00:00:57,920 --> 00:00:59,280
libraries

28
00:00:59,280 --> 00:01:01,760
and daniel will finish with the

29
00:01:01,760 --> 00:01:04,000
pixie security bcp this is a discussion

30
00:01:04,000 --> 00:01:05,199
that we had

31
00:01:05,199 --> 00:01:07,040
yesterday in a

32
00:01:07,040 --> 00:01:10,240
side meeting we just want to recap that

33
00:01:10,240 --> 00:01:11,760
and make sure that what group is aware

34
00:01:11,760 --> 00:01:14,479
of that discussion

35
00:01:14,479 --> 00:01:18,720
any comments questions about the agenda

36
00:01:18,960 --> 00:01:22,479
okay let's get going then

37
00:01:22,880 --> 00:01:25,119
peter

38
00:01:25,119 --> 00:01:27,280
okay everybody can hear me all right

39
00:01:27,280 --> 00:01:29,280
i'm gonna take the

40
00:01:29,280 --> 00:01:31,439
uh the microphone so first of all maybe

41
00:01:31,439 --> 00:01:33,439
while everything gets ready

42
00:01:33,439 --> 00:01:37,439
um my name is pedro castleman um i am uh

43
00:01:37,439 --> 00:01:39,200
really delighted to be here uh this is

44
00:01:39,200 --> 00:01:42,079
my first ietf so it's sort of a

45
00:01:42,079 --> 00:01:43,840
really momentous moment for me i

46
00:01:43,840 --> 00:01:46,000
actually want to thank everybody in this

47
00:01:46,000 --> 00:01:47,759
room and in this working group

48
00:01:47,759 --> 00:01:50,240
for the welcome that you've extended and

49
00:01:50,240 --> 00:01:51,200
how

50
00:01:51,200 --> 00:01:52,560
how

51
00:01:52,560 --> 00:01:54,159
how welcome you've made me to feel over

52
00:01:54,159 --> 00:01:56,159
the last couple of days thanks for

53
00:01:56,159 --> 00:01:59,119
entertaining my many questions and um

54
00:01:59,119 --> 00:02:00,960
i really appreciate it and that and i've

55
00:02:00,960 --> 00:02:02,880
so enjoyed it so much just uh working

56
00:02:02,880 --> 00:02:05,600
and collaborating with all of you so far

57
00:02:05,600 --> 00:02:08,720
um okay next slide please um so maybe to

58
00:02:08,720 --> 00:02:10,560
start with um so i'm going to talk about

59
00:02:10,560 --> 00:02:12,319
device code flow

60
00:02:12,319 --> 00:02:13,840
and some of the

61
00:02:13,840 --> 00:02:15,599
exploits that we've seen

62
00:02:15,599 --> 00:02:18,959
that uses social engineering techniques

63
00:02:18,959 --> 00:02:21,680
that allows

64
00:02:21,680 --> 00:02:24,560
adversaries to really

65
00:02:24,560 --> 00:02:27,040
abuse the protocol and gain access to

66
00:02:27,040 --> 00:02:30,080
resources when they really shouldn't

67
00:02:30,080 --> 00:02:30,879
and

68
00:02:30,879 --> 00:02:32,480
on the one hand right it's very easy to

69
00:02:32,480 --> 00:02:34,160
look at social engineering attacks and

70
00:02:34,160 --> 00:02:35,599
to say well that's just social

71
00:02:35,599 --> 00:02:38,080
engineering what can we do about it

72
00:02:38,080 --> 00:02:39,599
but i actually want to challenge us a

73
00:02:39,599 --> 00:02:40,560
little bit

74
00:02:40,560 --> 00:02:42,640
i read this quote recently

75
00:02:42,640 --> 00:02:44,000
uh

76
00:02:44,000 --> 00:02:45,840
there may be more that we can do and so

77
00:02:45,840 --> 00:02:47,599
what i want to ask folks as we talk

78
00:02:47,599 --> 00:02:49,360
about this today is maybe just stretch a

79
00:02:49,360 --> 00:02:50,800
little bit beyond

80
00:02:50,800 --> 00:02:52,319
what uh where we may have traditionally

81
00:02:52,319 --> 00:02:53,840
thought about where the boundaries might

82
00:02:53,840 --> 00:02:54,720
be

83
00:02:54,720 --> 00:02:56,480
and how we can go a little bit further

84
00:02:56,480 --> 00:02:57,760
perhaps

85
00:02:57,760 --> 00:03:00,720
next next slide thanks for watching um

86
00:03:00,720 --> 00:03:02,560
so we'll talk about i'm going to just

87
00:03:02,560 --> 00:03:04,400
briefly talk about device authorization

88
00:03:04,400 --> 00:03:05,599
grant

89
00:03:05,599 --> 00:03:07,920
some people may not be familiar with it

90
00:03:07,920 --> 00:03:09,680
i'll talk about the exploit patterns

91
00:03:09,680 --> 00:03:11,840
that we've seen

92
00:03:11,840 --> 00:03:13,519
and

93
00:03:13,519 --> 00:03:16,159
we'll we'll talk about that and

94
00:03:16,159 --> 00:03:18,400
also just look at it it's not like the

95
00:03:18,400 --> 00:03:20,239
uh that rfc

96
00:03:20,239 --> 00:03:22,159
8682 doesn't have any security

97
00:03:22,159 --> 00:03:23,920
considerations it's not like it wasn't

98
00:03:23,920 --> 00:03:25,440
for seen but

99
00:03:25,440 --> 00:03:27,120
maybe we can do a little bit more and

100
00:03:27,120 --> 00:03:29,440
give more guidance on this topic

101
00:03:29,440 --> 00:03:32,000
um and then what i'd love to do is maybe

102
00:03:32,000 --> 00:03:33,680
talk a little bit about what we could do

103
00:03:33,680 --> 00:03:35,200
and what we should do

104
00:03:35,200 --> 00:03:37,680
uh also while we've been here uh philip

105
00:03:37,680 --> 00:03:40,080
has also offered he's come up with some

106
00:03:40,080 --> 00:03:41,920
some additional ideas around social

107
00:03:41,920 --> 00:03:43,840
engineering attacks related to device

108
00:03:43,840 --> 00:03:46,000
code flow so he'll share some of those

109
00:03:46,000 --> 00:03:47,440
insights

110
00:03:47,440 --> 00:03:49,280
and daniel has a demo

111
00:03:49,280 --> 00:03:52,480
in case folks thinks this is not real uh

112
00:03:52,480 --> 00:03:54,720
he'll show a little bit about how this

113
00:03:54,720 --> 00:03:57,040
this actually works so uh next slide

114
00:03:57,040 --> 00:04:00,040
please

115
00:04:00,400 --> 00:04:02,080
now

116
00:04:02,080 --> 00:04:05,360
right so uh next slide

117
00:04:05,360 --> 00:04:07,599
so what is device uh authorization

118
00:04:07,599 --> 00:04:10,560
ground so it's really a protocol that

119
00:04:10,560 --> 00:04:12,799
allows device devices that lack a

120
00:04:12,799 --> 00:04:15,040
browser or input constraint right where

121
00:04:15,040 --> 00:04:18,320
it's difficult to input text

122
00:04:18,320 --> 00:04:21,519
to be part of the oauth ecosystem and to

123
00:04:21,519 --> 00:04:23,360
participate in the

124
00:04:23,360 --> 00:04:25,360
and obtain access tokens and refresh

125
00:04:25,360 --> 00:04:27,199
tokens

126
00:04:27,199 --> 00:04:29,360
next slide

127
00:04:29,360 --> 00:04:31,040
and they're really for devices like this

128
00:04:31,040 --> 00:04:33,120
right this picture is something

129
00:04:33,120 --> 00:04:35,840
uh they're for smart tvs uh or that was

130
00:04:35,840 --> 00:04:38,479
the original intent for smart tvs

131
00:04:38,479 --> 00:04:41,360
picture frames printers right devices

132
00:04:41,360 --> 00:04:46,160
uh like that um and so next slide please

133
00:04:46,160 --> 00:04:47,919
so if we we think about sort of the main

134
00:04:47,919 --> 00:04:49,680
participants in this for a typical flow

135
00:04:49,680 --> 00:04:51,600
you have your authorization server your

136
00:04:51,600 --> 00:04:53,120
endpoints you've got your consumption

137
00:04:53,120 --> 00:04:55,759
device and your authorization device and

138
00:04:55,759 --> 00:04:59,840
it typically starts with next side

139
00:04:59,840 --> 00:05:02,639
you know you get your display user code

140
00:05:02,639 --> 00:05:04,160
you also get a device code you get the

141
00:05:04,160 --> 00:05:06,160
verification uri

142
00:05:06,160 --> 00:05:09,360
the next slide please

143
00:05:09,360 --> 00:05:10,880
the um

144
00:05:10,880 --> 00:05:13,199
the user on their authorization device

145
00:05:13,199 --> 00:05:17,520
scan or enter the code next slide

146
00:05:17,520 --> 00:05:19,520
uh they then authenticate and authorize

147
00:05:19,520 --> 00:05:20,960
right and that can be a multi-factor

148
00:05:20,960 --> 00:05:23,520
authentication which is great so you can

149
00:05:23,520 --> 00:05:25,280
have really strong authentication on

150
00:05:25,280 --> 00:05:28,960
this flow uh next slide

151
00:05:28,960 --> 00:05:31,440
and then uh the uh the consumption

152
00:05:31,440 --> 00:05:33,360
device ends up retrieving the tokens the

153
00:05:33,360 --> 00:05:36,639
access token and the the refresh token

154
00:05:36,639 --> 00:05:38,880
uh next slide

155
00:05:38,880 --> 00:05:40,639
so really in a nutshell right you have

156
00:05:40,639 --> 00:05:42,400
this flow where you start a session on

157
00:05:42,400 --> 00:05:43,919
one device

158
00:05:43,919 --> 00:05:45,360
and then you authorize on the second

159
00:05:45,360 --> 00:05:49,039
device and the next slide

160
00:05:49,039 --> 00:05:51,360
and the benefits um

161
00:05:51,360 --> 00:05:54,720
so you can do authorization for devices

162
00:05:54,720 --> 00:05:56,639
with limited input capabilities it's

163
00:05:56,639 --> 00:05:58,960
really handy it's really easy in some

164
00:05:58,960 --> 00:06:00,400
ways

165
00:06:00,400 --> 00:06:01,759
and you can also do this with strong

166
00:06:01,759 --> 00:06:03,199
authentication using a personally

167
00:06:03,199 --> 00:06:07,360
trusted device next slide

168
00:06:07,360 --> 00:06:08,240
but

169
00:06:08,240 --> 00:06:11,280
this is the problem mind the gap right

170
00:06:11,280 --> 00:06:13,759
so the the challenge that that we run

171
00:06:13,759 --> 00:06:14,639
into

172
00:06:14,639 --> 00:06:16,319
is uh next

173
00:06:16,319 --> 00:06:19,360
next slide please

174
00:06:19,360 --> 00:06:21,039
is that there's this thing there's a

175
00:06:21,039 --> 00:06:22,960
kind of a session transfer that happens

176
00:06:22,960 --> 00:06:24,479
here

177
00:06:24,479 --> 00:06:26,560
there is no protocol

178
00:06:26,560 --> 00:06:28,800
between the you between the users

179
00:06:28,800 --> 00:06:30,639
authorization device and the consumption

180
00:06:30,639 --> 00:06:32,960
device and there's no way to establish

181
00:06:32,960 --> 00:06:35,600
that trust relationship

182
00:06:35,600 --> 00:06:37,199
and so and it's not a back and forth

183
00:06:37,199 --> 00:06:40,080
it's a one way right

184
00:06:40,080 --> 00:06:43,120
and really our defense here is we are

185
00:06:43,120 --> 00:06:45,199
relying on the user

186
00:06:45,199 --> 00:06:49,599
to make an informed decision

187
00:06:49,599 --> 00:06:51,919
and that doesn't always work right

188
00:06:51,919 --> 00:06:54,720
we as individuals people in this room of

189
00:06:54,720 --> 00:06:55,599
course

190
00:06:55,599 --> 00:06:57,280
do not have this problem we are very

191
00:06:57,280 --> 00:07:00,240
good at spotting these these attacks

192
00:07:00,240 --> 00:07:02,240
but uh

193
00:07:02,240 --> 00:07:04,960
not really or or maybe not but

194
00:07:04,960 --> 00:07:07,120
uh but but there are great many people

195
00:07:07,120 --> 00:07:09,759
out there where this this little this

196
00:07:09,759 --> 00:07:13,120
gap is being exploited um and so

197
00:07:13,120 --> 00:07:15,120
next slide please

198
00:07:15,120 --> 00:07:17,599
so so let's talk about how social and

199
00:07:17,599 --> 00:07:19,440
how this opens the door for social

200
00:07:19,440 --> 00:07:22,479
engineering for a moment uh next slide

201
00:07:22,479 --> 00:07:23,840
so now we have

202
00:07:23,840 --> 00:07:27,599
our i'm not sure if that is a

203
00:07:27,599 --> 00:07:29,919
that's our adversary and they get

204
00:07:29,919 --> 00:07:32,800
control of a device let's call it the

205
00:07:32,800 --> 00:07:34,880
attacker control device

206
00:07:34,880 --> 00:07:36,160
and they can

207
00:07:36,160 --> 00:07:38,240
access and they can get a code these are

208
00:07:38,240 --> 00:07:40,880
an attack pattern that we've seen in

209
00:07:40,880 --> 00:07:42,479
in the wild it's been documented i

210
00:07:42,479 --> 00:07:44,160
shared some of the attacks that that's

211
00:07:44,160 --> 00:07:45,759
in the public domain

212
00:07:45,759 --> 00:07:48,080
so it's a it's a real thing that happens

213
00:07:48,080 --> 00:07:50,720
so the attacker ends up they get a code

214
00:07:50,720 --> 00:07:53,680
and the next next slide

215
00:07:53,680 --> 00:07:56,560
uh next one's uh one more

216
00:07:56,560 --> 00:07:59,759
and what they then do is they end up

217
00:07:59,759 --> 00:08:01,440
step number two

218
00:08:01,440 --> 00:08:03,919
they change the context

219
00:08:03,919 --> 00:08:05,840
and they do this in very clever ways

220
00:08:05,840 --> 00:08:06,720
right

221
00:08:06,720 --> 00:08:08,560
they may obtain a device and then they

222
00:08:08,560 --> 00:08:12,080
may send you an email or a text message

223
00:08:12,080 --> 00:08:14,080
and the text message will say something

224
00:08:14,080 --> 00:08:15,199
like

225
00:08:15,199 --> 00:08:16,800
hey if you want to continue watching

226
00:08:16,800 --> 00:08:18,720
netflix please enter

227
00:08:18,720 --> 00:08:21,120
you need to re-authenticate right

228
00:08:21,120 --> 00:08:22,400
and of course these things happen

229
00:08:22,400 --> 00:08:24,560
occasionally so people do it

230
00:08:24,560 --> 00:08:26,720
some of them are even more devious right

231
00:08:26,720 --> 00:08:29,199
they they'd say something like hey uh

232
00:08:29,199 --> 00:08:31,680
you can get six months free of netflix

233
00:08:31,680 --> 00:08:33,919
if you go and enter your promo code

234
00:08:33,919 --> 00:08:35,839
right they don't even call it a user

235
00:08:35,839 --> 00:08:36,880
code

236
00:08:36,880 --> 00:08:39,440
uh sneaky very sneaky right

237
00:08:39,440 --> 00:08:41,200
so there's all sorts of ways in which

238
00:08:41,200 --> 00:08:43,839
the user can be tricked into entering

239
00:08:43,839 --> 00:08:45,040
these things

240
00:08:45,040 --> 00:08:46,880
and they scan and to enter the code i

241
00:08:46,880 --> 00:08:50,160
have a bus stop up there and it's not a

242
00:08:50,160 --> 00:08:53,040
the uh there has even been attacks i

243
00:08:53,040 --> 00:08:55,279
think in new york city

244
00:08:55,279 --> 00:08:57,680
that sort of follows the same pattern

245
00:08:57,680 --> 00:09:00,880
with bikes rental bikes

246
00:09:00,880 --> 00:09:05,200
where somebody took a qr code on a bike

247
00:09:05,200 --> 00:09:07,519
copied it put it on another bike

248
00:09:07,519 --> 00:09:09,920
when the customer came along scanned it

249
00:09:09,920 --> 00:09:11,760
it didn't unlock the bike but it

250
00:09:11,760 --> 00:09:13,440
unlocked the original bike for which the

251
00:09:13,440 --> 00:09:15,279
qr code was printed

252
00:09:15,279 --> 00:09:17,440
and the thief made off with the bat with

253
00:09:17,440 --> 00:09:20,240
the uh uh with the bicycle uh daniel

254
00:09:20,240 --> 00:09:22,080
actually when we talked about this uh

255
00:09:22,080 --> 00:09:24,320
share this this attack with me

256
00:09:24,320 --> 00:09:27,839
and it sort of just emphasized how um

257
00:09:27,839 --> 00:09:30,160
uh how tricky it is when when there is

258
00:09:30,160 --> 00:09:31,760
no authentication or no trust

259
00:09:31,760 --> 00:09:33,040
relationship

260
00:09:33,040 --> 00:09:34,880
right when you have this this gap when

261
00:09:34,880 --> 00:09:37,200
you're transferring a session

262
00:09:37,200 --> 00:09:40,480
so now the user scans the the code next

263
00:09:40,480 --> 00:09:42,560
slide please

264
00:09:42,560 --> 00:09:43,680
uh

265
00:09:43,680 --> 00:09:45,200
and they end up they authenticate

266
00:09:45,200 --> 00:09:48,640
they'll authorize and and and the

267
00:09:48,640 --> 00:09:50,560
sort of the tragedy of this is if even

268
00:09:50,560 --> 00:09:52,320
if you had multi-factor authentication

269
00:09:52,320 --> 00:09:53,600
deployed

270
00:09:53,600 --> 00:09:55,120
the user would still complete the

271
00:09:55,120 --> 00:09:57,600
authentication right the the attacker is

272
00:09:57,600 --> 00:10:00,720
not trying to steal the password

273
00:10:00,720 --> 00:10:03,120
or the authentication credential they

274
00:10:03,120 --> 00:10:05,920
are just trying to get the user to say

275
00:10:05,920 --> 00:10:06,959
yes

276
00:10:06,959 --> 00:10:08,079
right

277
00:10:08,079 --> 00:10:11,120
and then next slide

278
00:10:11,200 --> 00:10:13,760
they end up retrieving the tokens uh the

279
00:10:13,760 --> 00:10:16,079
attack retrieves the tokens and now they

280
00:10:16,079 --> 00:10:18,640
have an access token and a refresh token

281
00:10:18,640 --> 00:10:20,160
and depending on what's in the access

282
00:10:20,160 --> 00:10:22,320
and refresh token they may have access

283
00:10:22,320 --> 00:10:24,640
for a very long time maybe to

284
00:10:24,640 --> 00:10:26,880
something as simple as a consumer

285
00:10:26,880 --> 00:10:29,519
service or a bicycle

286
00:10:29,519 --> 00:10:32,000
but it may you know that extends to

287
00:10:32,000 --> 00:10:34,079
other services that uses the protocol as

288
00:10:34,079 --> 00:10:35,120
well

289
00:10:35,120 --> 00:10:39,040
um and next slide please rafat

290
00:10:39,200 --> 00:10:41,040
so basically if you think about this

291
00:10:41,040 --> 00:10:43,040
it's sort of a classical man in what we

292
00:10:43,040 --> 00:10:44,399
used to call man in the middle type

293
00:10:44,399 --> 00:10:46,720
attacks

294
00:10:46,720 --> 00:10:48,560
you initiate the session you retrieve

295
00:10:48,560 --> 00:10:51,600
the code you use some social engineering

296
00:10:51,600 --> 00:10:54,399
technique to change the context

297
00:10:54,399 --> 00:10:56,560
and and this attack sort of generalizes

298
00:10:56,560 --> 00:10:59,120
it applies to other protocols where

299
00:10:59,120 --> 00:11:01,839
there is an air gap right

300
00:11:01,839 --> 00:11:03,120
so

301
00:11:03,120 --> 00:11:05,839
some versions of seba might be subject

302
00:11:05,839 --> 00:11:08,320
to this

303
00:11:08,560 --> 00:11:09,839
you know some of the work we're doing

304
00:11:09,839 --> 00:11:11,600
with things like psyop and openid

305
00:11:11,600 --> 00:11:14,560
connect may also be uh subject to this

306
00:11:14,560 --> 00:11:16,640
in fact whenever you're

307
00:11:16,640 --> 00:11:18,800
scanning a qr code this is something to

308
00:11:18,800 --> 00:11:22,800
to think about uh next slide please

309
00:11:22,800 --> 00:11:24,640
and here are some examples i thought i'd

310
00:11:24,640 --> 00:11:26,720
just to sort of give people a flavor

311
00:11:26,720 --> 00:11:29,519
right uh would you say yes to any of

312
00:11:29,519 --> 00:11:30,959
these things right hey here's the

313
00:11:30,959 --> 00:11:35,200
document just enter your access code or

314
00:11:35,200 --> 00:11:37,040
you know hey you're about to be logged

315
00:11:37,040 --> 00:11:39,200
out uh do you just want to just make

316
00:11:39,200 --> 00:11:42,160
sure that you keep having service right

317
00:11:42,160 --> 00:11:44,640
or uh hey your security department or

318
00:11:44,640 --> 00:11:47,600
your company has made a change uh and

319
00:11:47,600 --> 00:11:49,360
you need to take action

320
00:11:49,360 --> 00:11:50,880
otherwise you won't be able to do your

321
00:11:50,880 --> 00:11:52,399
job

322
00:11:52,399 --> 00:11:53,120
and

323
00:11:53,120 --> 00:11:55,120
these techniques are you know and then

324
00:11:55,120 --> 00:11:57,200
there's the bicycles right so these are

325
00:11:57,200 --> 00:11:58,639
all ways in which you can change the

326
00:11:58,639 --> 00:12:00,720
context and and there's many more i'm

327
00:12:00,720 --> 00:12:01,680
sure

328
00:12:01,680 --> 00:12:03,440
rafat next thank you

329
00:12:03,440 --> 00:12:05,760
um

330
00:12:05,760 --> 00:12:07,519
and and in all of this right our defense

331
00:12:07,519 --> 00:12:09,680
right now is this mythical creature i

332
00:12:09,680 --> 00:12:12,160
call a homosecuritist

333
00:12:12,160 --> 00:12:14,399
who is a security expert he understands

334
00:12:14,399 --> 00:12:16,240
how the protocol should work he can

335
00:12:16,240 --> 00:12:18,720
detect these attempts uh

336
00:12:18,720 --> 00:12:20,720
he is so focused on the current context

337
00:12:20,720 --> 00:12:22,639
he knows exactly what's going on around

338
00:12:22,639 --> 00:12:23,600
him

339
00:12:23,600 --> 00:12:24,560
um

340
00:12:24,560 --> 00:12:28,320
but they're a rare species right

341
00:12:28,320 --> 00:12:30,560
instead next slide

342
00:12:30,560 --> 00:12:33,040
this is really

343
00:12:33,040 --> 00:12:35,519
homo sapiens right we need to help homo

344
00:12:35,519 --> 00:12:37,360
sapiens here

345
00:12:37,360 --> 00:12:38,959
they're really expertise elsewhere right

346
00:12:38,959 --> 00:12:40,720
they're very smart but this is not their

347
00:12:40,720 --> 00:12:41,680
area

348
00:12:41,680 --> 00:12:43,600
they're busy they're in a rush they want

349
00:12:43,600 --> 00:12:45,360
to help

350
00:12:45,360 --> 00:12:46,800
they're often worried about breaking

351
00:12:46,800 --> 00:12:49,440
things right

352
00:12:49,440 --> 00:12:50,240
and

353
00:12:50,240 --> 00:12:52,639
so what can we do i think the question

354
00:12:52,639 --> 00:12:54,399
is as i was looking at this how do we

355
00:12:54,399 --> 00:12:57,200
help them to make fewer decisions

356
00:12:57,200 --> 00:12:59,120
how do we help them to make better

357
00:12:59,120 --> 00:13:00,240
decisions

358
00:13:00,240 --> 00:13:01,360
uh

359
00:13:01,360 --> 00:13:03,519
and when they make a bad decision right

360
00:13:03,519 --> 00:13:05,440
how do we protect them and how do we

361
00:13:05,440 --> 00:13:07,360
provide guidance to implementers of

362
00:13:07,360 --> 00:13:09,360
these protocols

363
00:13:09,360 --> 00:13:10,800
to not just

364
00:13:10,800 --> 00:13:12,639
implement the protocol but actually take

365
00:13:12,639 --> 00:13:15,279
into account this attack attack vector

366
00:13:15,279 --> 00:13:17,680
so that we have safer implementations

367
00:13:17,680 --> 00:13:20,639
rafat

368
00:13:20,639 --> 00:13:21,360
so

369
00:13:21,360 --> 00:13:24,240
of course right rfc8628 isn't silent

370
00:13:24,240 --> 00:13:26,480
about this this was a something that was

371
00:13:26,480 --> 00:13:30,160
considered so next slide please

372
00:13:30,160 --> 00:13:33,120
so this is the entire section on remote

373
00:13:33,120 --> 00:13:35,040
phishing and really i'm gonna sort of

374
00:13:35,040 --> 00:13:36,720
summarize right

375
00:13:36,720 --> 00:13:38,800
two recommendations around

376
00:13:38,800 --> 00:13:40,959
better ui right so that

377
00:13:40,959 --> 00:13:43,279
uh there is some acknowledgement there

378
00:13:43,279 --> 00:13:46,320
and then there is uh something that says

379
00:13:46,320 --> 00:13:48,560
okay if you made a bad decision

380
00:13:48,560 --> 00:13:50,000
to limit the risk just limit the

381
00:13:50,000 --> 00:13:52,160
lifetime of the tokens right so that

382
00:13:52,160 --> 00:13:54,079
it's not a forever problem

383
00:13:54,079 --> 00:13:55,920
and so that's the extent of what we're

384
00:13:55,920 --> 00:13:58,880
recommending uh for protecting against

385
00:13:58,880 --> 00:13:59,839
uh

386
00:13:59,839 --> 00:14:02,880
phishing right now next slide please

387
00:14:02,880 --> 00:14:04,399
but it's not all there's some others

388
00:14:04,399 --> 00:14:06,480
right that's also relevant uh so there's

389
00:14:06,480 --> 00:14:08,560
a section on non-visual code

390
00:14:08,560 --> 00:14:10,320
transmission

391
00:14:10,320 --> 00:14:11,680
and it really sort of talks about

392
00:14:11,680 --> 00:14:13,279
proximity

393
00:14:13,279 --> 00:14:16,480
but really proximity in the context of a

394
00:14:16,480 --> 00:14:19,839
non-visual co-transmission

395
00:14:19,839 --> 00:14:21,760
and it's not in the context of fishing

396
00:14:21,760 --> 00:14:23,440
and i think this is actually a valuable

397
00:14:23,440 --> 00:14:25,360
and useful one in the context of fishing

398
00:14:25,360 --> 00:14:26,320
and

399
00:14:26,320 --> 00:14:27,920
putting some more emphasis on that might

400
00:14:27,920 --> 00:14:31,760
be good next slide please

401
00:14:31,760 --> 00:14:34,399
the other thing uh in the security

402
00:14:34,399 --> 00:14:36,240
consideration section is it does talk

403
00:14:36,240 --> 00:14:37,440
about trust

404
00:14:37,440 --> 00:14:38,399
uh

405
00:14:38,399 --> 00:14:40,240
there's a topic called device

406
00:14:40,240 --> 00:14:42,000
trustworthiness

407
00:14:42,000 --> 00:14:44,000
so so another thing to think about is

408
00:14:44,000 --> 00:14:46,000
what if you only allow trusted devices

409
00:14:46,000 --> 00:14:48,639
to participate in this flow

410
00:14:48,639 --> 00:14:50,320
which may not always be practical but if

411
00:14:50,320 --> 00:14:52,480
we could do that that could be another

412
00:14:52,480 --> 00:14:53,519
solution

413
00:14:53,519 --> 00:14:54,959
but again the guidance that we have

414
00:14:54,959 --> 00:14:57,360
today is really more about

415
00:14:57,360 --> 00:14:58,639
considerations of malicious

416
00:14:58,639 --> 00:15:00,720
authorization servers there's a sort of

417
00:15:00,720 --> 00:15:03,279
a comment that says there's two devices

418
00:15:03,279 --> 00:15:04,560
um

419
00:15:04,560 --> 00:15:06,639
but it's all and then it says well you

420
00:15:06,639 --> 00:15:08,800
need to trust the device provider which

421
00:15:08,800 --> 00:15:10,560
is good right we should

422
00:15:10,560 --> 00:15:12,639
but it doesn't really tell us more about

423
00:15:12,639 --> 00:15:14,560
what that mechanism should be and that

424
00:15:14,560 --> 00:15:17,120
may well be out of scope of the protocol

425
00:15:17,120 --> 00:15:19,120
but maybe that's a consideration that we

426
00:15:19,120 --> 00:15:22,000
want to provide more guidance on as well

427
00:15:22,000 --> 00:15:22,800
uh

428
00:15:22,800 --> 00:15:25,360
so that's what we have today uh next

429
00:15:25,360 --> 00:15:28,240
fight please report

430
00:15:28,240 --> 00:15:29,759
so what else could we do right so

431
00:15:29,759 --> 00:15:31,360
there's some ideas that's come up in

432
00:15:31,360 --> 00:15:33,680
discussions with uh uh

433
00:15:33,680 --> 00:15:35,519
daniel and philip and many others in

434
00:15:35,519 --> 00:15:37,040
this room even

435
00:15:37,040 --> 00:15:39,440
uh so next slide please

436
00:15:39,440 --> 00:15:41,040
um

437
00:15:41,040 --> 00:15:44,079
so one is uh looking at proximity right

438
00:15:44,079 --> 00:15:45,839
uh christina i think you're familiar

439
00:15:45,839 --> 00:15:47,040
with this stuff as well you would have

440
00:15:47,040 --> 00:15:48,800
seen versions of this and

441
00:15:48,800 --> 00:15:51,040
some of your work too

442
00:15:51,040 --> 00:15:53,920
so you know could we could we look at

443
00:15:53,920 --> 00:15:55,440
introducing more guidance and

444
00:15:55,440 --> 00:15:58,720
mitigations on how to use proximity

445
00:15:58,720 --> 00:16:01,759
uh not just pointing out proximity but

446
00:16:01,759 --> 00:16:04,959
but how we might accomplish that

447
00:16:04,959 --> 00:16:06,399
both for

448
00:16:06,399 --> 00:16:08,720
user for the user experience but also in

449
00:16:08,720 --> 00:16:11,040
terms of uh mitigating some risk on the

450
00:16:11,040 --> 00:16:12,399
back end

451
00:16:12,399 --> 00:16:14,880
uh do we need to give con guidance on

452
00:16:14,880 --> 00:16:16,160
content filtering right if you're

453
00:16:16,160 --> 00:16:18,160
deploying device code flow

454
00:16:18,160 --> 00:16:20,800
or device authorization grant

455
00:16:20,800 --> 00:16:22,720
should we give guidance about the need

456
00:16:22,720 --> 00:16:25,519
for having content filtering solutions

457
00:16:25,519 --> 00:16:27,680
in place

458
00:16:27,680 --> 00:16:30,320
additional metadata token binding writes

459
00:16:30,320 --> 00:16:31,519
who

460
00:16:31,519 --> 00:16:34,480
if somebody manages to obtain

461
00:16:34,480 --> 00:16:36,800
access and refresh tokens

462
00:16:36,800 --> 00:16:38,399
do we want to at least make it so that

463
00:16:38,399 --> 00:16:40,399
they cannot exfiltrate the tokens and

464
00:16:40,399 --> 00:16:41,360
use them

465
00:16:41,360 --> 00:16:43,360
in lateral attacks on other devices

466
00:16:43,360 --> 00:16:45,519
right is there some additional hardening

467
00:16:45,519 --> 00:16:47,519
that we want to do there

468
00:16:47,519 --> 00:16:49,680
uh trusted devices i already sort of

469
00:16:49,680 --> 00:16:52,079
alluded to um and then there's even work

470
00:16:52,079 --> 00:16:55,199
that's happening work in a way system

471
00:16:55,199 --> 00:16:57,920
uh that may be relevant right so do we

472
00:16:57,920 --> 00:16:59,600
need to think about things like secure

473
00:16:59,600 --> 00:17:02,399
qr codes right is there a solution that

474
00:17:02,399 --> 00:17:04,880
can help there so these are some of the

475
00:17:04,880 --> 00:17:06,640
examples uh

476
00:17:06,640 --> 00:17:08,160
there might be more i

477
00:17:08,160 --> 00:17:09,679
i fully expect that people in this

478
00:17:09,679 --> 00:17:11,760
working group have many more ideas that

479
00:17:11,760 --> 00:17:13,599
we can add to this uh these are just

480
00:17:13,599 --> 00:17:15,599
some some early beginnings

481
00:17:15,599 --> 00:17:19,760
aerofog excite these so

482
00:17:19,760 --> 00:17:22,079
uh another thing to think about is you

483
00:17:22,079 --> 00:17:24,160
know one of the comments when you and

484
00:17:24,160 --> 00:17:26,160
sort of uh it's on the the mailing

485
00:17:26,160 --> 00:17:27,760
thread at the moment

486
00:17:27,760 --> 00:17:30,080
is well

487
00:17:30,080 --> 00:17:31,679
you really shouldn't use device code

488
00:17:31,679 --> 00:17:34,559
flow in certain settings right

489
00:17:34,559 --> 00:17:37,840
but uh just like our customer or the end

490
00:17:37,840 --> 00:17:41,039
user is busy the engineer sometimes uh

491
00:17:41,039 --> 00:17:42,960
also is busy and is not an expert in the

492
00:17:42,960 --> 00:17:44,240
field either

493
00:17:44,240 --> 00:17:46,240
and so giving some guidance about you

494
00:17:46,240 --> 00:17:48,480
know when you need to have these cross

495
00:17:48,480 --> 00:17:50,320
device type flows

496
00:17:50,320 --> 00:17:52,000
uh giving some guidance about which

497
00:17:52,000 --> 00:17:53,760
protocols to use then a kind of a

498
00:17:53,760 --> 00:17:56,240
protocol selection guide that might be

499
00:17:56,240 --> 00:17:58,960
something else that helps um

500
00:17:58,960 --> 00:18:00,880
and it's true right the engineers can

501
00:18:00,880 --> 00:18:02,960
just read all the different protocols

502
00:18:02,960 --> 00:18:06,080
and decide or they can employ an expert

503
00:18:06,080 --> 00:18:08,799
um but again right if we if we as a

504
00:18:08,799 --> 00:18:10,640
community can make some recommendations

505
00:18:10,640 --> 00:18:12,320
that that could be another

506
00:18:12,320 --> 00:18:15,760
potential solution um

507
00:18:15,760 --> 00:18:18,799
so what should we do right uh if we go

508
00:18:18,799 --> 00:18:20,799
to the next slide

509
00:18:20,799 --> 00:18:21,520
uh

510
00:18:21,520 --> 00:18:23,120
so you know there's some options here

511
00:18:23,120 --> 00:18:25,919
right one we could say we'll do nothing

512
00:18:25,919 --> 00:18:27,520
i'll remind you about the first slide i

513
00:18:27,520 --> 00:18:29,440
put up which is you know maybe we should

514
00:18:29,440 --> 00:18:31,679
do or could do more

515
00:18:31,679 --> 00:18:33,760
um you know a simple thing is just more

516
00:18:33,760 --> 00:18:36,000
implementation guidance

517
00:18:36,000 --> 00:18:38,480
threat models risk assessment frameworks

518
00:18:38,480 --> 00:18:41,039
even user experience guidance right

519
00:18:41,039 --> 00:18:44,000
profiles recommendations and so on

520
00:18:44,000 --> 00:18:45,360
um

521
00:18:45,360 --> 00:18:46,880
you know maybe there's new protocols

522
00:18:46,880 --> 00:18:50,160
that we need to look at cbs one of those

523
00:18:50,160 --> 00:18:52,080
that's interesting but

524
00:18:52,080 --> 00:18:56,880
um you know may actually be subject or

525
00:18:56,880 --> 00:18:58,960
actually be

526
00:18:58,960 --> 00:19:02,240
vulnerable to similar exploits

527
00:19:02,240 --> 00:19:04,240
and then you know i you know any other

528
00:19:04,240 --> 00:19:05,760
options right i think that's part of why

529
00:19:05,760 --> 00:19:07,440
we're bringing it to this audience is to

530
00:19:07,440 --> 00:19:10,080
see if there is some other ideas that

531
00:19:10,080 --> 00:19:11,440
people might have

532
00:19:11,440 --> 00:19:14,960
so um rafael i think we can come back to

533
00:19:14,960 --> 00:19:16,400
this slide later i do want to give

534
00:19:16,400 --> 00:19:18,320
philip an opportunity to maybe come and

535
00:19:18,320 --> 00:19:19,360
talk

536
00:19:19,360 --> 00:19:21,600
uh so when philip and i spoke earlier

537
00:19:21,600 --> 00:19:24,160
today he mentioned that he sort of came

538
00:19:24,160 --> 00:19:25,919
you know he saw another kind of social

539
00:19:25,919 --> 00:19:28,000
engineering attack and

540
00:19:28,000 --> 00:19:29,919
related to this protocol so i'm going to

541
00:19:29,919 --> 00:19:32,000
hand it over to philip to talk about his

542
00:19:32,000 --> 00:19:34,720
insights as well thanks philip

543
00:19:34,720 --> 00:19:36,160
thank you peter

544
00:19:36,160 --> 00:19:39,840
now i need to remember which one is

545
00:19:39,840 --> 00:19:42,559
the name of yours i have a long list of

546
00:19:42,559 --> 00:19:43,520
slices

547
00:19:43,520 --> 00:19:45,840
this one

548
00:19:46,880 --> 00:19:49,919
okay um thank you peter for making us uh

549
00:19:49,919 --> 00:19:52,320
giving us a good summary on how device

550
00:19:52,320 --> 00:19:54,240
flow and device authorization ground

551
00:19:54,240 --> 00:19:56,000
works in general

552
00:19:56,000 --> 00:19:57,440
there was one very important piece that

553
00:19:57,440 --> 00:19:58,960
you mentioned and that's the use of qr

554
00:19:58,960 --> 00:19:59,919
codes

555
00:19:59,919 --> 00:20:02,080
and there is a

556
00:20:02,080 --> 00:20:04,080
class or there is a certain attack that

557
00:20:04,080 --> 00:20:05,200
is

558
00:20:05,200 --> 00:20:08,400
that is ongoing that is uh that is um

559
00:20:08,400 --> 00:20:10,799
possible to exploit at the moment

560
00:20:10,799 --> 00:20:13,360
uh which abuses the fact that uh not

561
00:20:13,360 --> 00:20:16,080
everybody uses those qr codes let's have

562
00:20:16,080 --> 00:20:17,440
a look

563
00:20:17,440 --> 00:20:18,320
um

564
00:20:18,320 --> 00:20:19,039
so

565
00:20:19,039 --> 00:20:20,880
i want to point out the textual versus

566
00:20:20,880 --> 00:20:22,880
non-textual um

567
00:20:22,880 --> 00:20:25,600
nature of of the protocol on the left

568
00:20:25,600 --> 00:20:27,360
side um

569
00:20:27,360 --> 00:20:29,440
we're asking the user to go to his other

570
00:20:29,440 --> 00:20:32,159
device enter a string and then enter

571
00:20:32,159 --> 00:20:34,080
another one

572
00:20:34,080 --> 00:20:36,080
on the right side

573
00:20:36,080 --> 00:20:38,159
i'm asking the user to to pick up his

574
00:20:38,159 --> 00:20:40,640
phone scan something which

575
00:20:40,640 --> 00:20:44,000
gets translated into

576
00:20:44,000 --> 00:20:46,400
the exact same url and the code already

577
00:20:46,400 --> 00:20:48,640
embedded and the user only has to

578
00:20:48,640 --> 00:20:49,760
compare

579
00:20:49,760 --> 00:20:50,880
at the end

580
00:20:50,880 --> 00:20:53,520
when when he opens up the qr code

581
00:20:53,520 --> 00:20:54,880
with his browser

582
00:20:54,880 --> 00:20:56,480
they only need to compare that the code

583
00:20:56,480 --> 00:20:58,159
that he sees on the phone

584
00:20:58,159 --> 00:21:00,240
matches the one that is over here and

585
00:21:00,240 --> 00:21:01,840
why is this important we can go to the

586
00:21:01,840 --> 00:21:03,520
next slide

587
00:21:03,520 --> 00:21:05,679
um

588
00:21:05,679 --> 00:21:07,919
before i go right that is important

589
00:21:07,919 --> 00:21:09,600
this non-textual thing

590
00:21:09,600 --> 00:21:11,440
was brought up into the rfc as an

591
00:21:11,440 --> 00:21:12,880
optimization

592
00:21:12,880 --> 00:21:15,760
and we have a text there that says

593
00:21:15,760 --> 00:21:17,039
that

594
00:21:17,039 --> 00:21:19,200
with the optimization that the user does

595
00:21:19,200 --> 00:21:21,919
not need to type in the user code

596
00:21:21,919 --> 00:21:23,919
the bigger optimization actually is that

597
00:21:23,919 --> 00:21:25,760
they don't need to type in the actual

598
00:21:25,760 --> 00:21:26,880
url

599
00:21:26,880 --> 00:21:28,720
and let's have a walk through

600
00:21:28,720 --> 00:21:30,320
why

601
00:21:30,320 --> 00:21:32,240
because let's imagine that the end user

602
00:21:32,240 --> 00:21:34,240
mistypes the verification uri so that's

603
00:21:34,240 --> 00:21:36,559
the url that i was told to go to

604
00:21:36,559 --> 00:21:38,400
um or i just entered it into a search

605
00:21:38,400 --> 00:21:39,840
engine because that's the thing now

606
00:21:39,840 --> 00:21:42,000
where the url bar is overloaded with

607
00:21:42,000 --> 00:21:43,679
multiple functions

608
00:21:43,679 --> 00:21:45,120
meaning that i will either land on a

609
00:21:45,120 --> 00:21:46,960
phishing site directly

610
00:21:46,960 --> 00:21:49,520
if it's a well-known provider of

611
00:21:49,520 --> 00:21:51,679
you know this is a device login or i

612
00:21:51,679 --> 00:21:53,600
will land on a search engine result page

613
00:21:53,600 --> 00:21:56,000
full of landmines paid ads

614
00:21:56,000 --> 00:21:58,240
and search engine optimized phishing

615
00:21:58,240 --> 00:21:59,360
sites

616
00:21:59,360 --> 00:22:01,760
i will enter my user code as i'm told by

617
00:22:01,760 --> 00:22:04,000
my tv for instance

618
00:22:04,000 --> 00:22:06,799
and instead of being presented with hey

619
00:22:06,799 --> 00:22:09,200
you know confirm the code and being able

620
00:22:09,200 --> 00:22:10,320
to log in

621
00:22:10,320 --> 00:22:12,400
it tells me i should phone a phone

622
00:22:12,400 --> 00:22:14,159
i should call a number

623
00:22:14,159 --> 00:22:16,080
uh where a scripted scenario will take

624
00:22:16,080 --> 00:22:18,240
place um an agent on the phone will

625
00:22:18,240 --> 00:22:20,320
first ask me for an email address

626
00:22:20,320 --> 00:22:22,159
and because i'm on the phone with him

627
00:22:22,159 --> 00:22:25,840
it's really easy to make me distracted

628
00:22:25,840 --> 00:22:27,520
as he walks me through a password reset

629
00:22:27,520 --> 00:22:28,720
flow

630
00:22:28,720 --> 00:22:31,679
where he asks me to confirm a code he

631
00:22:31,679 --> 00:22:33,600
just sent to my to my

632
00:22:33,600 --> 00:22:34,960
inbox

633
00:22:34,960 --> 00:22:36,559
which i'm happily going to give him

634
00:22:36,559 --> 00:22:40,240
because i just want to log into

635
00:22:40,240 --> 00:22:43,919
popular vod website who knows

636
00:22:44,880 --> 00:22:46,640
as i do that the agent is now

637
00:22:46,640 --> 00:22:48,240
authenticated they can run the rest of

638
00:22:48,240 --> 00:22:49,039
their

639
00:22:49,039 --> 00:22:51,360
scam they can buy digital products they

640
00:22:51,360 --> 00:22:53,840
can attempt to upsell fake services to

641
00:22:53,840 --> 00:22:55,760
me so to directly extract money out of

642
00:22:55,760 --> 00:22:56,559
me

643
00:22:56,559 --> 00:22:59,200
um and the ridiculous thing is that

644
00:22:59,200 --> 00:23:01,919
at the end of this all when they're done

645
00:23:01,919 --> 00:23:03,840
they're still going to log me onto my tv

646
00:23:03,840 --> 00:23:05,360
i'm very happy because i can finally

647
00:23:05,360 --> 00:23:07,440
watch the tv show that i was about to

648
00:23:07,440 --> 00:23:08,559
log in

649
00:23:08,559 --> 00:23:10,880
and the detection of all of this is

650
00:23:10,880 --> 00:23:12,000
delayed

651
00:23:12,000 --> 00:23:14,799
let's move on thank you

652
00:23:14,799 --> 00:23:17,280
so the key point here that the end user

653
00:23:17,280 --> 00:23:19,120
actually did initiate the authorization

654
00:23:19,120 --> 00:23:20,559
flow it is

655
00:23:20,559 --> 00:23:22,559
you know their target to login onto the

656
00:23:22,559 --> 00:23:25,200
tv it was not the attacker

657
00:23:25,200 --> 00:23:26,960
the user has a legitimate stake in

658
00:23:26,960 --> 00:23:29,520
completing the flow

659
00:23:29,520 --> 00:23:31,600
improving consent confirmation screen on

660
00:23:31,600 --> 00:23:33,280
the other device does absolutely nothing

661
00:23:33,280 --> 00:23:35,440
because i will never see it all i see is

662
00:23:35,440 --> 00:23:36,799
communication

663
00:23:36,799 --> 00:23:39,440
on the tv from the manufacturer or the

664
00:23:39,440 --> 00:23:41,279
developer of the application and

665
00:23:41,279 --> 00:23:42,880
everything else is in control of the

666
00:23:42,880 --> 00:23:44,320
attacker

667
00:23:44,320 --> 00:23:46,240
and i'm actually satisfied at the end

668
00:23:46,240 --> 00:23:48,559
because i logged in and i

669
00:23:48,559 --> 00:23:50,640
you know walk away with

670
00:23:50,640 --> 00:23:53,440
my account details either stolen

671
00:23:53,440 --> 00:23:57,520
or out of a couple hundred bucks

672
00:23:57,600 --> 00:23:59,440
uh

673
00:23:59,440 --> 00:24:01,440
yes this is an end user problem there

674
00:24:01,440 --> 00:24:04,320
are post signs along the way that

675
00:24:04,320 --> 00:24:07,440
i choose to ignore

676
00:24:07,440 --> 00:24:09,760
but we can still do better because if we

677
00:24:09,760 --> 00:24:11,840
prefer non-textual code transmission if

678
00:24:11,840 --> 00:24:14,640
we did not offer the a enter url in the

679
00:24:14,640 --> 00:24:17,039
first place this would not have happened

680
00:24:17,039 --> 00:24:19,279
likewise if there were actual password

681
00:24:19,279 --> 00:24:20,960
reset links and then password reset

682
00:24:20,960 --> 00:24:22,000
codes

683
00:24:22,000 --> 00:24:23,679
this would also not be possible because

684
00:24:23,679 --> 00:24:25,679
they could never gain

685
00:24:25,679 --> 00:24:28,880
they could have never asked me to

686
00:24:28,880 --> 00:24:31,919
can you please repeat the 64 hexadecimal

687
00:24:31,919 --> 00:24:33,760
string that i just sent to your email

688
00:24:33,760 --> 00:24:35,840
that's not a thing

689
00:24:35,840 --> 00:24:38,080
so

690
00:24:38,320 --> 00:24:40,640
question for the group for a future

691
00:24:40,640 --> 00:24:42,559
discussion after daniel is done with his

692
00:24:42,559 --> 00:24:46,320
demo is other than the qr codes uh is

693
00:24:46,320 --> 00:24:47,919
there anything else that is readily

694
00:24:47,919 --> 00:24:49,679
available and usable

695
00:24:49,679 --> 00:24:52,320
that we can offer

696
00:24:52,320 --> 00:24:53,279
thank you

697
00:24:53,279 --> 00:24:56,000
thanks philip let me quickly switch do

698
00:24:56,000 --> 00:24:57,200
you wanna

699
00:24:57,200 --> 00:24:59,039
no i'm just gonna invite daniel up

700
00:24:59,039 --> 00:25:01,760
daniel let me see if i can um thank you

701
00:25:01,760 --> 00:25:05,840
peter thank you for the screen here

702
00:25:05,840 --> 00:25:08,080
share the screen

703
00:25:08,080 --> 00:25:10,320
yes

704
00:25:11,440 --> 00:25:14,919
oh shoot

705
00:25:29,360 --> 00:25:32,639
or maybe it's a phishing attack

706
00:25:33,200 --> 00:25:35,679
i guess

707
00:25:37,520 --> 00:25:39,760
totally open

708
00:25:39,760 --> 00:25:43,400
need to rejoin

709
00:25:43,919 --> 00:25:46,080
sorry

710
00:25:46,080 --> 00:25:48,480


711
00:25:55,679 --> 00:25:57,679
yeah that's what i was worried about

712
00:25:57,679 --> 00:25:59,440
right now

713
00:25:59,440 --> 00:26:00,480
come on

714
00:26:00,480 --> 00:26:02,320
okay

715
00:26:02,320 --> 00:26:05,039
second here

716
00:26:05,440 --> 00:26:06,960
this one

717
00:26:06,960 --> 00:26:10,679
just taught here

718
00:26:20,400 --> 00:26:22,559
that you sent me this one

719
00:26:22,559 --> 00:26:24,480
this one

720
00:26:24,480 --> 00:26:25,600
okay

721
00:26:25,600 --> 00:26:26,720
see

722
00:26:26,720 --> 00:26:29,279
yes

723
00:26:30,559 --> 00:26:32,799
complete

724
00:26:32,799 --> 00:26:34,159
share

725
00:26:34,159 --> 00:26:37,159
yes

726
00:26:51,039 --> 00:26:54,720
yeah if you could stop it here yes

727
00:26:55,600 --> 00:26:58,159
okay so this is just a quick demo um to

728
00:26:58,159 --> 00:26:59,679
visualize what we're talking about here

729
00:26:59,679 --> 00:27:01,919
because usually a screencast says more

730
00:27:01,919 --> 00:27:03,360
than a thousand

731
00:27:03,360 --> 00:27:06,960
screenshots so um

732
00:27:06,960 --> 00:27:09,360
what we have here is uh on the right

733
00:27:09,360 --> 00:27:12,159
hand side wallet um that

734
00:27:12,159 --> 00:27:15,360
we're um working together with a project

735
00:27:15,360 --> 00:27:16,240
uh

736
00:27:16,240 --> 00:27:18,840
in the id union project

737
00:27:18,840 --> 00:27:22,000
um and uh in the middle you see a

738
00:27:22,000 --> 00:27:24,240
phishing site so essentially you have to

739
00:27:24,240 --> 00:27:25,360
imagine that

740
00:27:25,360 --> 00:27:28,399
you only see this part as a normal user

741
00:27:28,399 --> 00:27:30,799
you go to a website and you want to use

742
00:27:30,799 --> 00:27:33,279
your wallet at that website

743
00:27:33,279 --> 00:27:35,919
that website is um in this case called

744
00:27:35,919 --> 00:27:38,159
attacker.example.com button practice

745
00:27:38,159 --> 00:27:40,000
might have a name that is

746
00:27:40,000 --> 00:27:41,760
less suspicious

747
00:27:41,760 --> 00:27:43,840
um

748
00:27:43,840 --> 00:27:46,080
so you have that website you want to log

749
00:27:46,080 --> 00:27:48,559
in you see a qr code everything looks

750
00:27:48,559 --> 00:27:50,240
completely normal to you

751
00:27:50,240 --> 00:27:53,279
you want to log in at that website

752
00:27:53,279 --> 00:27:54,640
um

753
00:27:54,640 --> 00:27:55,360
so

754
00:27:55,360 --> 00:27:58,000
what you don't see is that this is an

755
00:27:58,000 --> 00:27:59,520
attack uncontrolled website maybe it's a

756
00:27:59,520 --> 00:28:01,760
compromise website maybe it's just set

757
00:28:01,760 --> 00:28:04,159
up specifically for that purpose and the

758
00:28:04,159 --> 00:28:05,360
attacker

759
00:28:05,360 --> 00:28:07,520
is not showing you a qr code that will

760
00:28:07,520 --> 00:28:10,480
lock you in at attacker.example.com

761
00:28:10,480 --> 00:28:11,600
but instead

762
00:28:11,600 --> 00:28:14,000
the attacker has taken that qr code from

763
00:28:14,000 --> 00:28:16,559
another website in this case it's a it's

764
00:28:16,559 --> 00:28:17,840
an xcloud

765
00:28:17,840 --> 00:28:20,960
uh login um that also works with the

766
00:28:20,960 --> 00:28:23,520
with the wallet login and the attacker

767
00:28:23,520 --> 00:28:26,399
has just stolen that qr code from there

768
00:28:26,399 --> 00:28:28,880
you don't see that website you just see

769
00:28:28,880 --> 00:28:31,279
that website but this is in the

770
00:28:31,279 --> 00:28:32,480
background

771
00:28:32,480 --> 00:28:34,880
when you say that and this just because

772
00:28:34,880 --> 00:28:39,760
okay the red one is what the user um

773
00:28:40,159 --> 00:28:41,919
so the red one is what the user sees the

774
00:28:41,919 --> 00:28:44,720
blue one is what the attacker has opened

775
00:28:44,720 --> 00:28:47,520
on his computer on the background

776
00:28:47,520 --> 00:28:48,240
so

777
00:28:48,240 --> 00:28:50,440
as a user you see the red website

778
00:28:50,440 --> 00:28:52,080
attacker.example.com and now you can

779
00:28:52,080 --> 00:28:53,840
play the video please

780
00:28:53,840 --> 00:28:54,160
um

781
00:28:54,160 --> 00:28:55,279
[Music]

782
00:28:55,279 --> 00:28:57,600
so you see that qr code

783
00:28:57,600 --> 00:28:59,440
you want to log in you open your wallet

784
00:28:59,440 --> 00:29:01,120
app on your device that would be on your

785
00:29:01,120 --> 00:29:02,480
mobile device

786
00:29:02,480 --> 00:29:04,559
you click on scan qr code and stop here

787
00:29:04,559 --> 00:29:06,480
please

788
00:29:06,480 --> 00:29:09,360
you click on scan qr code

789
00:29:09,360 --> 00:29:10,960
and

790
00:29:10,960 --> 00:29:12,880
on your mobile device you see do you

791
00:29:12,880 --> 00:29:14,320
want to log in

792
00:29:14,320 --> 00:29:16,480
um do you want to provide some data to

793
00:29:16,480 --> 00:29:19,360
that website for the login process and

794
00:29:19,360 --> 00:29:21,159
yes you want to log in at

795
00:29:21,159 --> 00:29:23,919
attacker.example.com so you click on yes

796
00:29:23,919 --> 00:29:27,840
and send and do and whatever

797
00:29:29,520 --> 00:29:30,960
and

798
00:29:30,960 --> 00:29:34,320
the login is complete it shows success

799
00:29:34,320 --> 00:29:36,480
on attacker.example.com in this case

800
00:29:36,480 --> 00:29:38,159
nothing happens the attacker could show

801
00:29:38,159 --> 00:29:40,480
thank you for your cooperation what

802
00:29:40,480 --> 00:29:42,320
happened instead is that

803
00:29:42,320 --> 00:29:44,159
you can see on the left side the

804
00:29:44,159 --> 00:29:45,520
attacker

805
00:29:45,520 --> 00:29:48,000
locked in or now has control over a

806
00:29:48,000 --> 00:29:50,159
session that is locked in under the

807
00:29:50,159 --> 00:29:53,520
victim's name in the next load

808
00:29:53,520 --> 00:29:56,559
um as a user you didn't see that an

809
00:29:56,559 --> 00:29:58,960
attack was happening here

810
00:29:58,960 --> 00:29:59,840
thank you

811
00:29:59,840 --> 00:30:01,919
awesome thank you thanks daniel thanks

812
00:30:01,919 --> 00:30:04,000
daniel rafat can you show the last slide

813
00:30:04,000 --> 00:30:06,840
of my presentation

814
00:30:06,840 --> 00:30:10,080
again so

815
00:30:10,399 --> 00:30:12,320
so back to the question about what we

816
00:30:12,320 --> 00:30:14,080
can do about this hopefully this is sort

817
00:30:14,080 --> 00:30:16,320
of a bit of an overview i think you've

818
00:30:16,320 --> 00:30:18,240
heard from a couple of people who have

819
00:30:18,240 --> 00:30:20,000
come across this social engineering

820
00:30:20,000 --> 00:30:21,760
angle and some of the challenges that we

821
00:30:21,760 --> 00:30:23,520
run into with it

822
00:30:23,520 --> 00:30:24,399
and

823
00:30:24,399 --> 00:30:26,159
um

824
00:30:26,159 --> 00:30:28,960
and so yeah i mean i'd love to hear back

825
00:30:28,960 --> 00:30:31,039
from folks in this room

826
00:30:31,039 --> 00:30:33,440
right a reasonable thing that we can do

827
00:30:33,440 --> 00:30:36,559
right is it is it um is it worthwhile

828
00:30:36,559 --> 00:30:37,679
right to

829
00:30:37,679 --> 00:30:39,600
provide some additional implementation

830
00:30:39,600 --> 00:30:41,840
guidance on top of um

831
00:30:41,840 --> 00:30:44,480
the device authorization grant uh to

832
00:30:44,480 --> 00:30:46,559
highlight some of these topics

833
00:30:46,559 --> 00:30:47,600
um

834
00:30:47,600 --> 00:30:49,600
would it help or you know is there other

835
00:30:49,600 --> 00:30:50,720
things that we should do should we

836
00:30:50,720 --> 00:30:52,240
really be thinking about other types of

837
00:30:52,240 --> 00:30:55,120
protocols or other types of solutions

838
00:30:55,120 --> 00:30:57,600
and yeah that's my question for for

839
00:30:57,600 --> 00:31:00,000
folks in this room or or online

840
00:31:00,000 --> 00:31:02,320
okay tim

841
00:31:02,320 --> 00:31:05,120
peter knows what i'm going to talk about

842
00:31:05,120 --> 00:31:07,440
um tim quality microsoft i just didn't

843
00:31:07,440 --> 00:31:09,760
like as you said jeez

844
00:31:09,760 --> 00:31:11,200
i should just terrified him as a

845
00:31:11,200 --> 00:31:13,519
colleague of mine i i didn't i didn't

846
00:31:13,519 --> 00:31:15,279
actually declare my affiliation i am a

847
00:31:15,279 --> 00:31:19,399
microsoft employee as well

848
00:31:20,080 --> 00:31:21,200
yeah

849
00:31:21,200 --> 00:31:22,159
um

850
00:31:22,159 --> 00:31:24,000
so so i think there's two i think we

851
00:31:24,000 --> 00:31:25,679
have to up level the discussion to the

852
00:31:25,679 --> 00:31:29,120
use case um to solve the use case moving

853
00:31:29,120 --> 00:31:31,600
forward in my opinion the solution is

854
00:31:31,600 --> 00:31:32,799
web authent

855
00:31:32,799 --> 00:31:34,799
and cross device flow

856
00:31:34,799 --> 00:31:36,720
and that is an important distinction

857
00:31:36,720 --> 00:31:37,600
because

858
00:31:37,600 --> 00:31:40,240
we have to start that message now

859
00:31:40,240 --> 00:31:42,720
because these tvs that are sitting here

860
00:31:42,720 --> 00:31:44,480
stay in people's houses for

861
00:31:44,480 --> 00:31:47,360
seven to ten years but we imagine in the

862
00:31:47,360 --> 00:31:48,799
next 12 months

863
00:31:48,799 --> 00:31:50,640
six billion devices around the world

864
00:31:50,640 --> 00:31:52,399
will have cross-device phishing

865
00:31:52,399 --> 00:31:54,159
resistant authentication capability

866
00:31:54,159 --> 00:31:56,080
right and that's a huge when this

867
00:31:56,080 --> 00:31:57,519
conversation started that really wasn't

868
00:31:57,519 --> 00:31:59,039
part of the discussion

869
00:31:59,039 --> 00:32:02,080
um so i think it's

870
00:32:02,399 --> 00:32:04,799
i agree everything about trying to

871
00:32:04,799 --> 00:32:06,480
reduce the risk with what's there today

872
00:32:06,480 --> 00:32:07,919
has to continue that discussion has to

873
00:32:07,919 --> 00:32:09,360
continue but in parallel we have to

874
00:32:09,360 --> 00:32:10,720
start the conversation about getting rid

875
00:32:10,720 --> 00:32:12,880
of device code flow

876
00:32:12,880 --> 00:32:15,200
and i think they intersect at a point

877
00:32:15,200 --> 00:32:16,799
where you can start to reduce the attack

878
00:32:16,799 --> 00:32:18,480
surface by reducing the scopes you're

879
00:32:18,480 --> 00:32:20,640
granted when you use the vice code flow

880
00:32:20,640 --> 00:32:23,600
um and those will drastically intersect

881
00:32:23,600 --> 00:32:25,840
hopefully in the near term

882
00:32:25,840 --> 00:32:28,159
um so yeah i'm happy to take any

883
00:32:28,159 --> 00:32:29,519
questions on

884
00:32:29,519 --> 00:32:31,679
thank you any questions for tim

885
00:32:31,679 --> 00:32:34,720
yeah justin justin good justin how does

886
00:32:34,720 --> 00:32:35,760
it work

887
00:32:35,760 --> 00:32:36,799
yes

888
00:32:36,799 --> 00:32:38,159
so yeah i like it yes i have to be a

889
00:32:38,159 --> 00:32:39,919
little careful because it's it's still

890
00:32:39,919 --> 00:32:42,159
ipr predicted but more or less there's

891
00:32:42,159 --> 00:32:43,519
bluetooth involved that handles

892
00:32:43,519 --> 00:32:45,600
proximity and key exchange and then it's

893
00:32:45,600 --> 00:32:47,039
standard web authent from the client

894
00:32:47,039 --> 00:32:48,720
simply okay

895
00:32:48,720 --> 00:32:52,799
so so okay we're not gonna

896
00:32:53,039 --> 00:32:54,640
okay so

897
00:32:54,640 --> 00:32:56,720
that's fine editorial

898
00:32:56,720 --> 00:32:58,159
right

899
00:32:58,159 --> 00:33:00,960
we'll get back to that

900
00:33:01,200 --> 00:33:02,399
hi

901
00:33:02,399 --> 00:33:06,159
victoria octa uh i think that uh the web

902
00:33:06,159 --> 00:33:09,039
often future is beautiful and bright and

903
00:33:09,039 --> 00:33:11,200
very powerful but i think that there are

904
00:33:11,200 --> 00:33:12,640
stepping stones that

905
00:33:12,640 --> 00:33:15,120
we can use to get there and uh in

906
00:33:15,120 --> 00:33:16,960
particular right now we have this

907
00:33:16,960 --> 00:33:18,880
section in which we say

908
00:33:18,880 --> 00:33:20,880
use whatever you have to transfer

909
00:33:20,880 --> 00:33:22,960
context between the requesting and the

910
00:33:22,960 --> 00:33:24,399
authorizing device

911
00:33:24,399 --> 00:33:26,159
and i think of it we have an opportunity

912
00:33:26,159 --> 00:33:30,000
to be a bit more prescriptive so their

913
00:33:30,000 --> 00:33:31,840
bluetooth is mentioned and bluetooth is

914
00:33:31,840 --> 00:33:33,840
also the thing that fuels this is the

915
00:33:33,840 --> 00:33:36,240
thing that the team described

916
00:33:36,240 --> 00:33:39,039
if we were to be more specific and say

917
00:33:39,039 --> 00:33:41,440
okay here is a how

918
00:33:41,440 --> 00:33:44,240
in practical terms to use bluetooth

919
00:33:44,240 --> 00:33:46,640
we can transfer context from a

920
00:33:46,640 --> 00:33:49,679
requesting device to a collocated

921
00:33:49,679 --> 00:33:51,519
authorization device

922
00:33:51,519 --> 00:33:53,519
and

923
00:33:53,519 --> 00:33:56,080
once you have that entrained and without

924
00:33:56,080 --> 00:33:58,480
mandating uh web often but for example

925
00:33:58,480 --> 00:34:00,640
just saying when this happens you open

926
00:34:00,640 --> 00:34:02,960
the system browser and you go to his url

927
00:34:02,960 --> 00:34:05,600
plus code at that point you would

928
00:34:05,600 --> 00:34:07,440
mitigate the number of the challenges

929
00:34:07,440 --> 00:34:09,760
that you highlighted and if it's

930
00:34:09,760 --> 00:34:12,159
standard now you can reasonably expect

931
00:34:12,159 --> 00:34:14,399
the hero apps like your authenticator or

932
00:34:14,399 --> 00:34:16,719
google authenticator or the oculus

933
00:34:16,719 --> 00:34:19,599
authenticator or even operating systems

934
00:34:19,599 --> 00:34:22,000
can start doing this of course other

935
00:34:22,000 --> 00:34:23,119
challenges you still need the

936
00:34:23,119 --> 00:34:25,199
interstitial dialogue saying this is

937
00:34:25,199 --> 00:34:27,359
happening but i think it will be a

938
00:34:27,359 --> 00:34:29,440
significant improvement not just from

939
00:34:29,440 --> 00:34:32,159
the security perspective but also

940
00:34:32,159 --> 00:34:33,679
from the user

941
00:34:33,679 --> 00:34:36,800
for user experience

942
00:34:37,040 --> 00:34:40,719
thanks vittorio hey tony

943
00:34:46,239 --> 00:34:48,079
tony natalin so i assume you're talking

944
00:34:48,079 --> 00:34:49,440
about

945
00:34:49,440 --> 00:34:51,440
of google's

946
00:34:51,440 --> 00:34:53,199
implementation that really doesn't have

947
00:34:53,199 --> 00:34:55,440
much to do with wedlock then at all it's

948
00:34:55,440 --> 00:34:57,200
down in the fido level

949
00:34:57,200 --> 00:34:58,880
to the mic tony

950
00:34:58,880 --> 00:35:01,280
so it doesn't have much to do no no he

951
00:35:01,280 --> 00:35:03,839
has a mic

952
00:35:04,240 --> 00:35:06,000
yeah so it doesn't have anything really

953
00:35:06,000 --> 00:35:08,000
to do with web authen

954
00:35:08,000 --> 00:35:10,480
so it's all done in the fido level

955
00:35:10,480 --> 00:35:13,200
protocol underneath and it's got severe

956
00:35:13,200 --> 00:35:14,880
usability

957
00:35:14,880 --> 00:35:16,480
problems and this is one of the reasons

958
00:35:16,480 --> 00:35:18,400
why it hasn't been

959
00:35:18,400 --> 00:35:20,800
released and it's still in

960
00:35:20,800 --> 00:35:23,599
what i would call trial i'm not sure

961
00:35:23,599 --> 00:35:25,599
if this is the proper

962
00:35:25,599 --> 00:35:28,560
you know paradigm to actually go in it's

963
00:35:28,560 --> 00:35:30,720
you know the bluetooth does have some

964
00:35:30,720 --> 00:35:32,960
some severe issues

965
00:35:32,960 --> 00:35:35,040
and they do have some security issues

966
00:35:35,040 --> 00:35:36,880
associated with their where their pair

967
00:35:36,880 --> 00:35:38,880
where their pairing or how they do that

968
00:35:38,880 --> 00:35:41,280
you know the quick pairing

969
00:35:41,280 --> 00:35:43,280
thanks tony okay

970
00:35:43,280 --> 00:35:45,839
justin

971
00:35:46,320 --> 00:35:49,760
hi justin richard um so

972
00:35:49,760 --> 00:35:52,000
the composed uri is something that i

973
00:35:52,000 --> 00:35:53,680
always hated about the device flow and i

974
00:35:53,680 --> 00:35:55,359
helped write that paragraph with all of

975
00:35:55,359 --> 00:35:58,000
the considerations of don't just auto

976
00:35:58,000 --> 00:35:59,680
post the form and all of that other

977
00:35:59,680 --> 00:36:01,760
stuff because i always felt that that

978
00:36:01,760 --> 00:36:04,000
was a bad idea um

979
00:36:04,000 --> 00:36:05,599
because i think

980
00:36:05,599 --> 00:36:08,079
i think fundamentally here what we're

981
00:36:08,079 --> 00:36:11,040
realizing is that these are two very

982
00:36:11,040 --> 00:36:13,520
different interaction modalities

983
00:36:13,520 --> 00:36:15,760
uh in one we're communicating something

984
00:36:15,760 --> 00:36:17,599
that a user needs to

985
00:36:17,599 --> 00:36:19,520
like be able to type whether it's you

986
00:36:19,520 --> 00:36:22,720
know the pair of uri and the code or

987
00:36:22,720 --> 00:36:24,480
you know just the code itself would they

988
00:36:24,480 --> 00:36:26,240
get the uri from documentation or

989
00:36:26,240 --> 00:36:27,839
whatever

990
00:36:27,839 --> 00:36:30,240
that is very separate from being able to

991
00:36:30,240 --> 00:36:33,599
have a uri with a whole bunch of stuff

992
00:36:33,599 --> 00:36:35,599
packed into it or like even like we saw

993
00:36:35,599 --> 00:36:37,359
in daniel's demo

994
00:36:37,359 --> 00:36:40,240
um being able to send a long arbitrary

995
00:36:40,240 --> 00:36:41,839
untypable

996
00:36:41,839 --> 00:36:43,839
chunk of information to the user where

997
00:36:43,839 --> 00:36:45,839
we're not expecting them

998
00:36:45,839 --> 00:36:48,560
to copy and paste or to remember or to

999
00:36:48,560 --> 00:36:50,800
transcribe or anything like that and i

1000
00:36:50,800 --> 00:36:52,160
think our first

1001
00:36:52,160 --> 00:36:53,760
step at this

1002
00:36:53,760 --> 00:36:55,520
needs to be

1003
00:36:55,520 --> 00:36:57,920
separating these and not treating these

1004
00:36:57,920 --> 00:36:59,440
solutions where oh we're just going to

1005
00:36:59,440 --> 00:37:01,359
send a whole bunch of cryptographic

1006
00:37:01,359 --> 00:37:03,760
information over bluetooth

1007
00:37:03,760 --> 00:37:05,920
excuse me that's not really the device

1008
00:37:05,920 --> 00:37:07,280
code flow anymore

1009
00:37:07,280 --> 00:37:09,520
right it might be using

1010
00:37:09,520 --> 00:37:11,040
some of the mechanisms or something like

1011
00:37:11,040 --> 00:37:13,040
that but it's really solving this in a

1012
00:37:13,040 --> 00:37:14,720
different way

1013
00:37:14,720 --> 00:37:17,520
and that's where i i do agree with the

1014
00:37:17,520 --> 00:37:18,800
statement where

1015
00:37:18,800 --> 00:37:19,760
this

1016
00:37:19,760 --> 00:37:22,560
this nexus of things of saying like okay

1017
00:37:22,560 --> 00:37:24,960
if you do really do have to use the

1018
00:37:24,960 --> 00:37:26,880
device code flow

1019
00:37:26,880 --> 00:37:29,599
then we know that that's got some severe

1020
00:37:29,599 --> 00:37:31,119
limitations so we're only going to let

1021
00:37:31,119 --> 00:37:33,599
you do these particular things with it

1022
00:37:33,599 --> 00:37:34,720
and we're going to warn you and we're

1023
00:37:34,720 --> 00:37:37,280
going to send you know notice that hey

1024
00:37:37,280 --> 00:37:39,200
there's a new device on your account and

1025
00:37:39,200 --> 00:37:41,280
all of that other kind of

1026
00:37:41,280 --> 00:37:43,040
good advice that we can actually give

1027
00:37:43,040 --> 00:37:43,920
today

1028
00:37:43,920 --> 00:37:45,920
while still being able to develop these

1029
00:37:45,920 --> 00:37:48,640
new paradigms and not pretending that

1030
00:37:48,640 --> 00:37:50,240
this is just another way to expand the

1031
00:37:50,240 --> 00:37:52,320
device flow

1032
00:37:52,320 --> 00:37:53,440
thanks

1033
00:37:53,440 --> 00:37:56,720
thank you for stressing okay hunt

1034
00:37:56,720 --> 00:37:58,960
hi this is santiago um i have a more

1035
00:37:58,960 --> 00:38:00,480
general remark i'm not even sure it's in

1036
00:38:00,480 --> 00:38:03,040
scope but i'll try anyway

1037
00:38:03,040 --> 00:38:04,960
so um there was something that rang my

1038
00:38:04,960 --> 00:38:06,880
bell in in a previous talk which was

1039
00:38:06,880 --> 00:38:09,359
basically this um observation that many

1040
00:38:09,359 --> 00:38:10,960
developers don't really know what they

1041
00:38:10,960 --> 00:38:12,800
do or might be you know puzzled by

1042
00:38:12,800 --> 00:38:15,119
what's available in the standards and my

1043
00:38:15,119 --> 00:38:16,960
experience actually from

1044
00:38:16,960 --> 00:38:19,040
developer using encryption standards is

1045
00:38:19,040 --> 00:38:20,880
that many of the stuff doing by crypto

1046
00:38:20,880 --> 00:38:22,640
researchers is very much low level and

1047
00:38:22,640 --> 00:38:24,640
it's very hard to grasp actually how to

1048
00:38:24,640 --> 00:38:26,880
apply that and what errors can be made

1049
00:38:26,880 --> 00:38:28,560
so my impressions this might translate a

1050
00:38:28,560 --> 00:38:30,640
little bit also to you know things like

1051
00:38:30,640 --> 00:38:32,720
oauths and the processes involved and

1052
00:38:32,720 --> 00:38:34,480
what i actually would like to have if

1053
00:38:34,480 --> 00:38:36,079
you and i read that a little bit in user

1054
00:38:36,079 --> 00:38:37,440
experience guidance is maybe something

1055
00:38:37,440 --> 00:38:39,440
like you know about design patterns in

1056
00:38:39,440 --> 00:38:41,040
programming like you know

1057
00:38:41,040 --> 00:38:43,599
um standardized label descriptions of

1058
00:38:43,599 --> 00:38:45,599
certain cases or error cases which are

1059
00:38:45,599 --> 00:38:47,200
interlinked and help me navigate and

1060
00:38:47,200 --> 00:38:48,880
relate a little bit different how

1061
00:38:48,880 --> 00:38:50,640
different things can be put together and

1062
00:38:50,640 --> 00:38:52,400
which errors might occur if i choose a

1063
00:38:52,400 --> 00:38:54,480
certain solution that was that direction

1064
00:38:54,480 --> 00:38:55,839
that's all

1065
00:38:55,839 --> 00:38:57,520
okay tim thank you

1066
00:38:57,520 --> 00:38:58,720
okay

1067
00:38:58,720 --> 00:39:00,320
microsoft sorry tony i'm not gonna let

1068
00:39:00,320 --> 00:39:01,920
the room leave with what you said um

1069
00:39:01,920 --> 00:39:03,839
that's not correct um so

1070
00:39:03,839 --> 00:39:07,040
um there are at about we're guessing two

1071
00:39:07,040 --> 00:39:08,480
billion devices that now have this

1072
00:39:08,480 --> 00:39:10,400
capability over the next over the past

1073
00:39:10,400 --> 00:39:12,400
three to four months and you are correct

1074
00:39:12,400 --> 00:39:14,000
though that that was not the the

1075
00:39:14,000 --> 00:39:15,520
communication to the phone was not web

1076
00:39:15,520 --> 00:39:17,119
authentic my point is i didn't actually

1077
00:39:17,119 --> 00:39:19,200
say verbally was that from an idp

1078
00:39:19,200 --> 00:39:20,480
standpoint you don't need to implement

1079
00:39:20,480 --> 00:39:23,280
anything special it's just web authentic

1080
00:39:23,280 --> 00:39:24,079
okay

1081
00:39:24,079 --> 00:39:28,240
thanks okay hey thanks tim um

1082
00:39:28,240 --> 00:39:30,960
do you have any just last minute

1083
00:39:30,960 --> 00:39:31,839
comments

1084
00:39:31,839 --> 00:39:34,160
or i wanna just summarize this after

1085
00:39:34,160 --> 00:39:35,440
that and see what we're gonna have

1086
00:39:35,440 --> 00:39:37,760
together again some great points thanks

1087
00:39:37,760 --> 00:39:39,839
everybody justin i i think your point is

1088
00:39:39,839 --> 00:39:41,599
spot on i do think these are separate

1089
00:39:41,599 --> 00:39:42,720
things

1090
00:39:42,720 --> 00:39:44,240
i think that the points been made we

1091
00:39:44,240 --> 00:39:45,920
have to secure

1092
00:39:45,920 --> 00:39:47,839
what we have and then we have to look

1093
00:39:47,839 --> 00:39:49,920
for ways in which we can minimize the

1094
00:39:49,920 --> 00:39:51,119
use of that

1095
00:39:51,119 --> 00:39:52,800
and provide better alternatives that's

1096
00:39:52,800 --> 00:39:55,119
kind of my my summary of that

1097
00:39:55,119 --> 00:39:57,280
i think that the point around

1098
00:39:57,280 --> 00:39:58,800
uh either way when i think about

1099
00:39:58,800 --> 00:40:00,720
engineers right they've got expertise

1100
00:40:00,720 --> 00:40:02,480
elsewhere they may not be security

1101
00:40:02,480 --> 00:40:03,920
experts and

1102
00:40:03,920 --> 00:40:05,680
the rate with which oauth is just

1103
00:40:05,680 --> 00:40:08,560
expanding in the world and being adopted

1104
00:40:08,560 --> 00:40:10,480
expecting more people to become experts

1105
00:40:10,480 --> 00:40:13,200
at this is not not right and so giving i

1106
00:40:13,200 --> 00:40:15,040
feel like i'm hearing

1107
00:40:15,040 --> 00:40:16,800
uh yeah we need to give more guidance

1108
00:40:16,800 --> 00:40:18,400
and we need to help the developers with

1109
00:40:18,400 --> 00:40:19,440
that

1110
00:40:19,440 --> 00:40:20,319
um

1111
00:40:20,319 --> 00:40:23,280
and yeah i think that's kind of what i'm

1112
00:40:23,280 --> 00:40:25,040
taking out of this that there's interest

1113
00:40:25,040 --> 00:40:27,040
in proceeding with this yeah absolutely

1114
00:40:27,040 --> 00:40:28,960
that's what i've heard too and and maybe

1115
00:40:28,960 --> 00:40:31,200
if you have a proposed solution also

1116
00:40:31,200 --> 00:40:33,760
propose those solutions right

1117
00:40:33,760 --> 00:40:34,640
um

1118
00:40:34,640 --> 00:40:36,720
so

1119
00:40:36,720 --> 00:40:38,480
anything else

1120
00:40:38,480 --> 00:40:40,319
um so if folks are interested in this

1121
00:40:40,319 --> 00:40:43,440
topic uh reach out to me uh uh let's

1122
00:40:43,440 --> 00:40:46,079
start working and figuring out how we

1123
00:40:46,079 --> 00:40:49,280
how we shape uh a response here as a as

1124
00:40:49,280 --> 00:40:50,680
a group in the community thank you

1125
00:40:50,680 --> 00:40:52,960
everybody thank you thank you thank you

1126
00:40:52,960 --> 00:40:54,640
and philip as well for your contribution

1127
00:40:54,640 --> 00:40:57,200
here today thank you all yeah that was a

1128
00:40:57,200 --> 00:40:58,880
great presentation great great

1129
00:40:58,880 --> 00:41:00,800
discussion thank you

1130
00:41:00,800 --> 00:41:05,400
victorio my friend come here

1131
00:41:09,119 --> 00:41:11,920
yeah let's see how we can do that hold

1132
00:41:11,920 --> 00:41:13,200
on

1133
00:41:13,200 --> 00:41:15,680
okay

1134
00:41:17,119 --> 00:41:19,040
sure

1135
00:41:19,040 --> 00:41:21,280
honestly told you so now i need a

1136
00:41:21,280 --> 00:41:23,440
request

1137
00:41:23,440 --> 00:41:27,680
i think i can hand it to you let me see

1138
00:41:28,400 --> 00:41:31,599
i just sent you the controller yeah

1139
00:41:31,599 --> 00:41:33,760
there you go i don't have to do anything

1140
00:41:33,760 --> 00:41:35,839
now i can't go to sleep i don't know why

1141
00:41:35,839 --> 00:41:38,079
and no one did it before it's an ultra

1142
00:41:38,079 --> 00:41:40,720
annoying idea to ask you yes

1143
00:41:40,720 --> 00:41:43,599
there you go all right okay

1144
00:41:43,599 --> 00:41:45,839
everybody and welcome

1145
00:41:45,839 --> 00:41:47,280
thank you for taking the time to come

1146
00:41:47,280 --> 00:41:49,599
here today and hear about

1147
00:41:49,599 --> 00:41:52,640
brian and yours truly proposal on

1148
00:41:52,640 --> 00:41:55,920
dealing with step-up authentication

1149
00:41:55,920 --> 00:41:58,960
step-up authentication is a

1150
00:41:58,960 --> 00:42:02,800
pretty well-known problem which emerges

1151
00:42:02,800 --> 00:42:05,839
in various circumstances and for which

1152
00:42:05,839 --> 00:42:08,960
we have no standard solution and

1153
00:42:08,960 --> 00:42:10,560
we don't have interoperability and

1154
00:42:10,560 --> 00:42:12,640
that's the reason for which we decided

1155
00:42:12,640 --> 00:42:15,200
to try to analyze our problem and see

1156
00:42:15,200 --> 00:42:18,960
whether we can suggest a very essential

1157
00:42:18,960 --> 00:42:21,280
way of dealing with that so

1158
00:42:21,280 --> 00:42:22,560
we're going to spend a few moments on

1159
00:42:22,560 --> 00:42:24,000
the problem which is well known but

1160
00:42:24,000 --> 00:42:26,800
still by due diligence then few moments

1161
00:42:26,800 --> 00:42:28,960
of your proposal which is a really

1162
00:42:28,960 --> 00:42:31,520
really bare bone so it shouldn't take

1163
00:42:31,520 --> 00:42:35,280
long and then we'll discuss

1164
00:42:35,839 --> 00:42:38,720
all right so we know that there are

1165
00:42:38,720 --> 00:42:41,200
organic ways of

1166
00:42:41,200 --> 00:42:44,079
witnessing a step up of education so a

1167
00:42:44,079 --> 00:42:46,319
client might ask for an initial set of

1168
00:42:46,319 --> 00:42:48,720
scopes and then knows that it needs to

1169
00:42:48,720 --> 00:42:51,680
call another method of api and that api

1170
00:42:51,680 --> 00:42:53,680
might require requesting a different

1171
00:42:53,680 --> 00:42:56,880
scope which in itself might require to

1172
00:42:56,880 --> 00:42:58,880
do a step-up authentication so those are

1173
00:42:58,880 --> 00:43:00,400
the cases in which

1174
00:43:00,400 --> 00:43:03,440
the problem solves itself let's say that

1175
00:43:03,440 --> 00:43:05,839
the step-up authentication just occurs

1176
00:43:05,839 --> 00:43:08,079
however there are a number of other

1177
00:43:08,079 --> 00:43:10,560
situations in which the client can do

1178
00:43:10,560 --> 00:43:13,040
everything right and use all the

1179
00:43:13,040 --> 00:43:15,040
information at its disposal and

1180
00:43:15,040 --> 00:43:17,200
successfully authenticate the user in

1181
00:43:17,200 --> 00:43:19,440
the way that the authorization server

1182
00:43:19,440 --> 00:43:23,040
requests and still the api might refuse

1183
00:43:23,040 --> 00:43:25,119
a service it might say

1184
00:43:25,119 --> 00:43:27,440
you're trying to buy an item which

1185
00:43:27,440 --> 00:43:31,280
exceeds your uh spending limit and the

1186
00:43:31,280 --> 00:43:32,800
item that you're trying to buy is not

1187
00:43:32,800 --> 00:43:34,640
available at the moment in which you are

1188
00:43:34,640 --> 00:43:36,400
asking for the token and so the

1189
00:43:36,400 --> 00:43:38,640
authorization server cannot do anything

1190
00:43:38,640 --> 00:43:41,280
to reflect these height and requirement

1191
00:43:41,280 --> 00:43:43,359
or we know that it's fashionable

1192
00:43:43,359 --> 00:43:44,880
nowadays if to do

1193
00:43:44,880 --> 00:43:47,040
continuous authentication and so you

1194
00:43:47,040 --> 00:43:49,440
might have um

1195
00:43:49,440 --> 00:43:52,319
risk engines or any other black box

1196
00:43:52,319 --> 00:43:55,280
logic which might decide that

1197
00:43:55,280 --> 00:43:58,000
the token that you send is not enough

1198
00:43:58,000 --> 00:44:00,319
and today unless you have some

1199
00:44:00,319 --> 00:44:01,920
proprietary way of dealing with that

1200
00:44:01,920 --> 00:44:04,160
particular scenario you're stuck because

1201
00:44:04,160 --> 00:44:05,920
the client is just going to repeat the

1202
00:44:05,920 --> 00:44:08,560
request for research server get the same

1203
00:44:08,560 --> 00:44:11,040
token that he requested before and the

1204
00:44:11,040 --> 00:44:14,480
refuse service just in the same way so

1205
00:44:14,480 --> 00:44:17,359
not great

1206
00:44:17,359 --> 00:44:19,598
okay

1207
00:44:19,920 --> 00:44:23,280
so what we are suggesting is very very

1208
00:44:23,280 --> 00:44:26,400
simple we are just introducing a new um

1209
00:44:26,400 --> 00:44:29,359
error code which basically says

1210
00:44:29,359 --> 00:44:32,079
authentication level was not sufficient

1211
00:44:32,079 --> 00:44:34,079
and then we are borrowing a couple of

1212
00:44:34,079 --> 00:44:36,720
parameters that are already in use in

1213
00:44:36,720 --> 00:44:39,599
open id for id token

1214
00:44:39,599 --> 00:44:41,599
requirements and we're basically saying

1215
00:44:41,599 --> 00:44:43,040
okay

1216
00:44:43,040 --> 00:44:45,520
a resource server you can specify in

1217
00:44:45,520 --> 00:44:47,520
your challenge sending back this error

1218
00:44:47,520 --> 00:44:51,680
code also the acr that you would like or

1219
00:44:51,680 --> 00:44:53,920
the list of acrs that you are okay with

1220
00:44:53,920 --> 00:44:56,240
for uh for the client so that the client

1221
00:44:56,240 --> 00:44:58,800
can turn around repeat the request of

1222
00:44:58,800 --> 00:45:00,960
the refrigeration server and include

1223
00:45:00,960 --> 00:45:03,440
voice parameters now

1224
00:45:03,440 --> 00:45:05,760
in the case of open id when you use

1225
00:45:05,760 --> 00:45:07,839
those parameters again

1226
00:45:07,839 --> 00:45:09,599
affecting the token in this particular

1227
00:45:09,599 --> 00:45:11,839
case we would extend your semantics to

1228
00:45:11,839 --> 00:45:14,240
apply to the access token and also open

1229
00:45:14,240 --> 00:45:17,200
id is lux let's say it says well

1230
00:45:17,200 --> 00:45:18,960
authorization server if you want to do

1231
00:45:18,960 --> 00:45:21,760
it do it but you are not forced to

1232
00:45:21,760 --> 00:45:24,319
instead in here we would add something

1233
00:45:24,319 --> 00:45:25,920
in the metadata which

1234
00:45:25,920 --> 00:45:28,079
for the foundation server to comply to

1235
00:45:28,079 --> 00:45:30,319
this particular flow it would commit to

1236
00:45:30,319 --> 00:45:34,079
actually do its best to comply with a

1237
00:45:34,079 --> 00:45:36,480
requested acr this system would be

1238
00:45:36,480 --> 00:45:39,119
compatible with existing mechanisms we

1239
00:45:39,119 --> 00:45:42,000
have today such as the scopes like today

1240
00:45:42,000 --> 00:45:44,560
we have insufficient scopes and so we

1241
00:45:44,560 --> 00:45:47,359
would be perfectly fine if you happen to

1242
00:45:47,359 --> 00:45:49,040
be in the circumstance in which you need

1243
00:45:49,040 --> 00:45:53,040
both to elevate your acr and to request

1244
00:45:53,040 --> 00:45:55,680
new scopes to ask above things at the

1245
00:45:55,680 --> 00:45:57,440
same time

1246
00:45:57,440 --> 00:45:58,560
and uh

1247
00:45:58,560 --> 00:46:00,880
basically now that we have a vehiclet

1248
00:46:00,880 --> 00:46:04,640
profile we can actually describe how to

1249
00:46:04,640 --> 00:46:06,960
report the outcome of these different

1250
00:46:06,960 --> 00:46:09,280
authentication in the form of the acr

1251
00:46:09,280 --> 00:46:13,280
claim we can extend the schema of the

1252
00:46:13,280 --> 00:46:15,839
infrastructure endpoint to also specify

1253
00:46:15,839 --> 00:46:17,440
exactly the same claim

1254
00:46:17,440 --> 00:46:19,280
so we basically have

1255
00:46:19,280 --> 00:46:21,280
all the various pieces of the solution

1256
00:46:21,280 --> 00:46:23,280
available

1257
00:46:23,280 --> 00:46:25,040
another real power of this thing will

1258
00:46:25,040 --> 00:46:26,800
come into play because i can show you a

1259
00:46:26,800 --> 00:46:28,560
fantastic animation

1260
00:46:28,560 --> 00:46:30,079
so here you have a client that you have

1261
00:46:30,079 --> 00:46:31,040
your resource server and your

1262
00:46:31,040 --> 00:46:33,119
authorization server

1263
00:46:33,119 --> 00:46:36,240
business as usual i just try again i

1264
00:46:36,240 --> 00:46:39,359
include my better token but as it turns

1265
00:46:39,359 --> 00:46:40,240
out

1266
00:46:40,240 --> 00:46:43,280
actually here sorry not very big

1267
00:46:43,280 --> 00:46:44,079
uh

1268
00:46:44,079 --> 00:46:46,880
there is no acr it's just like standard

1269
00:46:46,880 --> 00:46:49,760
token and again i'm using jwt just for

1270
00:46:49,760 --> 00:46:52,560
simplicity but you can perfectly have an

1271
00:46:52,560 --> 00:46:56,319
opaque token that uses uh introspection

1272
00:46:56,319 --> 00:46:59,839
and there is of server deems that

1273
00:46:59,839 --> 00:47:02,000
the level of authentication reflected is

1274
00:47:02,000 --> 00:47:04,640
insufficient and so now it returns

1275
00:47:04,640 --> 00:47:06,720
insufficient user authentication and in

1276
00:47:06,720 --> 00:47:09,440
this particular place it includes only

1277
00:47:09,440 --> 00:47:12,480
one acr value of course it could also

1278
00:47:12,480 --> 00:47:14,560
include the max age if necessary it

1279
00:47:14,560 --> 00:47:17,200
could also include scopes if scopes are

1280
00:47:17,200 --> 00:47:19,920
also missing

1281
00:47:19,920 --> 00:47:21,520
and then at that point

1282
00:47:21,520 --> 00:47:22,240
the

1283
00:47:22,240 --> 00:47:24,400
client turns around goes back to

1284
00:47:24,400 --> 00:47:27,040
authorization server and it includes the

1285
00:47:27,040 --> 00:47:29,359
information about the acr which would

1286
00:47:29,359 --> 00:47:31,599
not normally have been available which

1287
00:47:31,599 --> 00:47:33,599
could be contextual to the particular

1288
00:47:33,599 --> 00:47:36,839
request and the characteristics in

1289
00:47:36,839 --> 00:47:39,200
there then

1290
00:47:39,200 --> 00:47:41,119
for the server we do whatever it deems

1291
00:47:41,119 --> 00:47:43,760
necessary hopefully trying to comply

1292
00:47:43,760 --> 00:47:45,440
with my acr

1293
00:47:45,440 --> 00:47:47,359
and assuming that the user successfully

1294
00:47:47,359 --> 00:47:49,520
authenticates we get

1295
00:47:49,520 --> 00:47:53,440
our usual response and this time

1296
00:47:53,440 --> 00:47:56,640
we got reflected in our settings that we

1297
00:47:56,640 --> 00:47:57,440
did

1298
00:47:57,440 --> 00:47:59,920
comply with acr

1299
00:47:59,920 --> 00:48:02,880
and at that point we just repeat our

1300
00:48:02,880 --> 00:48:04,720
request and

1301
00:48:04,720 --> 00:48:05,839
oh

1302
00:48:05,839 --> 00:48:08,960
we get back to andrew

1303
00:48:10,559 --> 00:48:13,920
so the main advantage of these is that

1304
00:48:13,920 --> 00:48:16,720
now we have an interoperable way of

1305
00:48:16,720 --> 00:48:19,680
dealing with this scenario we presented

1306
00:48:19,680 --> 00:48:22,559
this problem in a similar proposal at

1307
00:48:22,559 --> 00:48:25,839
the um off security workshop last year

1308
00:48:25,839 --> 00:48:29,119
and this session was the most voted by

1309
00:48:29,119 --> 00:48:30,800
the people despite the fact that we did

1310
00:48:30,800 --> 00:48:33,040
it at the very last moment and the

1311
00:48:33,040 --> 00:48:35,119
comments and the tweets like the various

1312
00:48:35,119 --> 00:48:37,680
reactions were all like oh wow are you

1313
00:48:37,680 --> 00:48:39,839
saying that this is not standardized yet

1314
00:48:39,839 --> 00:48:41,839
like it looks like it's a problem which

1315
00:48:41,839 --> 00:48:44,000
is fairly common and also i know that

1316
00:48:44,000 --> 00:48:46,400
some platforms already have their own

1317
00:48:46,400 --> 00:48:49,119
proprietary solution but it seems like

1318
00:48:49,119 --> 00:48:51,040
whether it's solved this way or in some

1319
00:48:51,040 --> 00:48:53,119
other way this type of problem is a

1320
00:48:53,119 --> 00:48:54,960
problem that people have so one

1321
00:48:54,960 --> 00:48:56,880
advantage would be we now have an

1322
00:48:56,880 --> 00:48:59,680
interoperable way of doing this

1323
00:48:59,680 --> 00:49:02,240
the other is that it is a relatively

1324
00:49:02,240 --> 00:49:04,880
small step we are not asking anyone to

1325
00:49:04,880 --> 00:49:07,520
start implementing eventing uh seven

1326
00:49:07,520 --> 00:49:10,640
buses uh event syncs uh asynchronous

1327
00:49:10,640 --> 00:49:13,200
stuff stateful stuff this is a ultra

1328
00:49:13,200 --> 00:49:15,839
basic sending back parameters in the

1329
00:49:15,839 --> 00:49:18,079
context of transactions that are already

1330
00:49:18,079 --> 00:49:20,480
occurring so we are not creating new

1331
00:49:20,480 --> 00:49:23,599
messages or anything and we are staying

1332
00:49:23,599 --> 00:49:26,079
squarely within the extensibility

1333
00:49:26,079 --> 00:49:28,880
mechanisms that respect offer

1334
00:49:28,880 --> 00:49:31,760
and um

1335
00:49:31,760 --> 00:49:33,520
yeah

1336
00:49:33,520 --> 00:49:36,960
brian am i forgetting something

1337
00:49:39,040 --> 00:49:43,040
thank you your praise is very important

1338
00:49:43,280 --> 00:49:45,839
so

1339
00:49:47,119 --> 00:49:48,720
okay look at all these people in the

1340
00:49:48,720 --> 00:49:51,759
queue okay steve

1341
00:49:53,839 --> 00:49:56,240
clarifying question is acr multi-valued

1342
00:49:56,240 --> 00:49:58,319
in that i'm sorry sir your name and your

1343
00:49:58,319 --> 00:50:01,119
affiliation lefty once it says so on in

1344
00:50:01,119 --> 00:50:03,440
the queue

1345
00:50:04,000 --> 00:50:07,440
all right so if you flip back one or two

1346
00:50:07,440 --> 00:50:08,480
slides

1347
00:50:08,480 --> 00:50:09,920
maybe

1348
00:50:09,920 --> 00:50:12,920
um

1349
00:50:15,040 --> 00:50:17,359
i think i might have lost control no all

1350
00:50:17,359 --> 00:50:21,200
right can you go back oh come on

1351
00:50:23,920 --> 00:50:25,839
so

1352
00:50:25,839 --> 00:50:28,880
in that slide it says acr values is that

1353
00:50:28,880 --> 00:50:30,480
it's a multi-valued

1354
00:50:30,480 --> 00:50:33,280
so you can request any of these

1355
00:50:33,280 --> 00:50:35,440
yeah this is a very good yes yes the

1356
00:50:35,440 --> 00:50:37,680
semantic is exactly the same as

1357
00:50:37,680 --> 00:50:42,480
open id plus access token justin

1358
00:50:45,760 --> 00:50:46,800
so

1359
00:50:46,800 --> 00:50:49,119
my question is really around why the

1360
00:50:49,119 --> 00:50:51,359
resource server is the one that's caring

1361
00:50:51,359 --> 00:50:54,400
about uh authentication levels as

1362
00:50:54,400 --> 00:50:56,160
opposed to the authorization levels

1363
00:50:56,160 --> 00:50:58,480
applied to the access token

1364
00:50:58,480 --> 00:51:01,040
um because there's this great blog post

1365
00:51:01,040 --> 00:51:03,520
that says how the resource server is not

1366
00:51:03,520 --> 00:51:04,960
the service that you're actually logging

1367
00:51:04,960 --> 00:51:06,079
into

1368
00:51:06,079 --> 00:51:07,440
it has this whole metaphor with

1369
00:51:07,440 --> 00:51:08,640
chocolate and chocolate cake you may

1370
00:51:08,640 --> 00:51:11,119
have read this one

1371
00:51:11,119 --> 00:51:13,040
it's vitoria's blog if no but if people

1372
00:51:13,040 --> 00:51:14,559
didn't get that joke

1373
00:51:14,559 --> 00:51:16,720
um

1374
00:51:18,240 --> 00:51:21,280
so uh so i'm just trying to see what

1375
00:51:21,280 --> 00:51:23,280
what the use case is here where that's

1376
00:51:23,280 --> 00:51:24,640
driving the

1377
00:51:24,640 --> 00:51:28,000
the rs needing or even caring about that

1378
00:51:28,000 --> 00:51:29,680
information about

1379
00:51:29,680 --> 00:51:32,160
the authentication level

1380
00:51:32,160 --> 00:51:34,000
of the user

1381
00:51:34,000 --> 00:51:35,440
at the as

1382
00:51:35,440 --> 00:51:37,359
because you know traditionally once you

1383
00:51:37,359 --> 00:51:38,960
get the access token it's just whatever

1384
00:51:38,960 --> 00:51:41,040
the access token is good for

1385
00:51:41,040 --> 00:51:42,480
and so can you can you help me

1386
00:51:42,480 --> 00:51:44,240
understand what's driving

1387
00:51:44,240 --> 00:51:46,480
to this particular solution absolutely

1388
00:51:46,480 --> 00:51:47,920
and thank you for every question because

1389
00:51:47,920 --> 00:51:50,160
it's a it gives the opportunity for a

1390
00:51:50,160 --> 00:51:52,480
useful clarification which is uh we

1391
00:51:52,480 --> 00:51:55,680
still care about the authorization in

1392
00:51:55,680 --> 00:51:58,000
this case and we are not trying to mess

1393
00:51:58,000 --> 00:52:00,559
with what open id already does this is

1394
00:52:00,559 --> 00:52:01,440
uh

1395
00:52:01,440 --> 00:52:03,280
similar to the use cases that we

1396
00:52:03,280 --> 00:52:05,280
explored when we did the generality

1397
00:52:05,280 --> 00:52:08,880
profile which led to adding the acs

1398
00:52:08,880 --> 00:52:12,800
of the acr claim in the layout and

1399
00:52:12,800 --> 00:52:14,960
basically there are a number of

1400
00:52:14,960 --> 00:52:17,200
scenarios in which the resource in

1401
00:52:17,200 --> 00:52:20,640
itself has uh requirements about the

1402
00:52:20,640 --> 00:52:22,559
authentication level of a user still for

1403
00:52:22,559 --> 00:52:24,720
authorization purposes so it's not like

1404
00:52:24,720 --> 00:52:26,400
that they want to mess with anything

1405
00:52:26,400 --> 00:52:27,839
it's more of like

1406
00:52:27,839 --> 00:52:30,640
if i am reading nails i'm okay with this

1407
00:52:30,640 --> 00:52:33,520
password but as soon as you want to send

1408
00:52:33,520 --> 00:52:35,920
mail uh i would like to

1409
00:52:35,920 --> 00:52:38,800
know that a user performed mfa now

1410
00:52:38,800 --> 00:52:41,440
personally i agree that

1411
00:52:41,440 --> 00:52:43,680
it would be best if a resource server

1412
00:52:43,680 --> 00:52:46,480
would somehow translate these in some

1413
00:52:46,480 --> 00:52:49,520
other form like for example scopes that

1414
00:52:49,520 --> 00:52:51,440
reflect a different authentication level

1415
00:52:51,440 --> 00:52:52,720
but the thing is

1416
00:52:52,720 --> 00:52:55,119
we already have acr which already have a

1417
00:52:55,119 --> 00:52:57,920
semantic with maps to mfa and for people

1418
00:52:57,920 --> 00:53:00,960
that build the policies mfa is an easy

1419
00:53:00,960 --> 00:53:03,440
to grasp concept and so requiring it

1420
00:53:03,440 --> 00:53:05,920
somehow is something that happens very

1421
00:53:05,920 --> 00:53:08,319
very frequently like you know in real

1422
00:53:08,319 --> 00:53:11,119
life back here in the microsoft days

1423
00:53:11,119 --> 00:53:13,520
i had to do this all the time but

1424
00:53:13,520 --> 00:53:15,440
actually here

1425
00:53:15,440 --> 00:53:17,760
i would personally want to place in here

1426
00:53:17,760 --> 00:53:21,200
also amr so going to the level of method

1427
00:53:21,200 --> 00:53:22,240
but

1428
00:53:22,240 --> 00:53:25,119
the guy with the pink mask is very much

1429
00:53:25,119 --> 00:53:27,200
against and uh

1430
00:53:27,200 --> 00:53:29,359
he raised a good point that

1431
00:53:29,359 --> 00:53:31,359
it would be brittle because if you ask

1432
00:53:31,359 --> 00:53:33,440
for something specific then it's easier

1433
00:53:33,440 --> 00:53:35,440
for break it but the thing is that the

1434
00:53:35,440 --> 00:53:37,839
developers i work with in practice they

1435
00:53:37,839 --> 00:53:40,000
ask for that they ask her saying i want

1436
00:53:40,000 --> 00:53:42,480
to know if you used a smart card and not

1437
00:53:42,480 --> 00:53:45,760
just that you use mfa

1438
00:53:45,760 --> 00:53:48,000
so follow-up corollary question if i may

1439
00:53:48,000 --> 00:53:49,680
go ahead um

1440
00:53:49,680 --> 00:53:51,839
that does beg the question how does this

1441
00:53:51,839 --> 00:53:53,280
relate to

1442
00:53:53,280 --> 00:53:55,440
needing step-up authorization for

1443
00:53:55,440 --> 00:53:57,599
additional scopes and things like that

1444
00:53:57,599 --> 00:54:00,160
and since you brought up amr

1445
00:54:00,160 --> 00:54:02,640
what about vectors of trust

1446
00:54:02,640 --> 00:54:05,119
um so for scopes

1447
00:54:05,119 --> 00:54:06,480
as we mentioned

1448
00:54:06,480 --> 00:54:08,640
basically you can just return here the

1449
00:54:08,640 --> 00:54:10,480
list of scopes that you want alongside

1450
00:54:10,480 --> 00:54:12,960
with this so imagine it emerged within

1451
00:54:12,960 --> 00:54:14,960
sufficient scopes on that source of

1452
00:54:14,960 --> 00:54:15,839
trust

1453
00:54:15,839 --> 00:54:18,400
i let

1454
00:54:19,599 --> 00:54:24,160
but i uncountable to answer the question

1455
00:54:24,160 --> 00:54:24,960
but

1456
00:54:24,960 --> 00:54:26,559
you you don't have to answer it now

1457
00:54:26,559 --> 00:54:27,920
maybe

1458
00:54:27,920 --> 00:54:30,640
if you you don't have an answer now

1459
00:54:30,640 --> 00:54:32,400
yeah

1460
00:54:32,400 --> 00:54:35,119
later okay george

1461
00:54:35,119 --> 00:54:36,559
george

1462
00:54:36,559 --> 00:54:39,599
yeah so i mean i think uh for me this

1463
00:54:39,599 --> 00:54:41,760
this makes a lot of sense i think we

1464
00:54:41,760 --> 00:54:43,680
should have some caveat that says this

1465
00:54:43,680 --> 00:54:45,280
works where the resource server and

1466
00:54:45,280 --> 00:54:47,440
authorization server in the same domain

1467
00:54:47,440 --> 00:54:49,119
right i mean i think we're seeing use

1468
00:54:49,119 --> 00:54:50,799
cases where

1469
00:54:50,799 --> 00:54:52,559
you know you get

1470
00:54:52,559 --> 00:54:53,520
you know

1471
00:54:53,520 --> 00:54:55,200
authorization server issues an access

1472
00:54:55,200 --> 00:54:56,960
token that works for multiple resource

1473
00:54:56,960 --> 00:54:58,960
servers you know that maybe not within

1474
00:54:58,960 --> 00:55:00,880
the same domain i worry that we don't

1475
00:55:00,880 --> 00:55:04,079
have standards around acrs um i have

1476
00:55:04,079 --> 00:55:06,960
seen people use justin vectors of trust

1477
00:55:06,960 --> 00:55:09,680
tags as their acr values

1478
00:55:09,680 --> 00:55:13,040
you know aal1 aal2 as the value that's

1479
00:55:13,040 --> 00:55:15,440
being requested we also have the eap

1480
00:55:15,440 --> 00:55:17,200
stuff in the openid foundation that

1481
00:55:17,200 --> 00:55:18,880
allows you to request

1482
00:55:18,880 --> 00:55:20,640
a hardware

1483
00:55:20,640 --> 00:55:23,280
backed phishing resistant authentication

1484
00:55:23,280 --> 00:55:26,000
so there is some stuff here but i think

1485
00:55:26,000 --> 00:55:28,240
there's you know some more guidance

1486
00:55:28,240 --> 00:55:30,240
from a larger interoperability

1487
00:55:30,240 --> 00:55:32,400
perspective that we're going to want

1488
00:55:32,400 --> 00:55:35,280
um but within a single domain

1489
00:55:35,280 --> 00:55:36,880
where the resource servers and the

1490
00:55:36,880 --> 00:55:38,960
authorization server are sort of all run

1491
00:55:38,960 --> 00:55:41,599
by the same company um i think you know

1492
00:55:41,599 --> 00:55:43,920
this would work fine and i do think

1493
00:55:43,920 --> 00:55:45,599
there are lots of cases whether it's

1494
00:55:45,599 --> 00:55:47,520
time based or otherwise

1495
00:55:47,520 --> 00:55:48,480
where

1496
00:55:48,480 --> 00:55:53,280
um apis that are being invoked

1497
00:55:53,280 --> 00:55:56,400
need to have some level of addition

1498
00:55:56,400 --> 00:55:58,559
additional authentication right um i

1499
00:55:58,559 --> 00:56:01,280
want to know that you entered your rsa

1500
00:56:01,280 --> 00:56:02,880
code i mean this happens this used to be

1501
00:56:02,880 --> 00:56:05,040
on ebay you know e-trade all the time

1502
00:56:05,040 --> 00:56:07,200
right you got to do a trade and it pops

1503
00:56:07,200 --> 00:56:09,920
up the thing for your rsa token enter

1504
00:56:09,920 --> 00:56:12,319
your code right um and

1505
00:56:12,319 --> 00:56:14,079
i think we sort of have to include that

1506
00:56:14,079 --> 00:56:16,160
as sort of an authorization mechanism to

1507
00:56:16,160 --> 00:56:18,559
justin questions

1508
00:56:18,559 --> 00:56:20,640
thanks george this is a

1509
00:56:20,640 --> 00:56:24,079
good point to mull over i think

1510
00:56:24,079 --> 00:56:27,440
um for for the meeting minutes um i i

1511
00:56:27,440 --> 00:56:30,079
captured that um the same domain issue

1512
00:56:30,079 --> 00:56:31,680
but i wasn't quite sure what the

1513
00:56:31,680 --> 00:56:34,160
cross-domain use case george was um like

1514
00:56:34,160 --> 00:56:35,200
you're saying

1515
00:56:35,200 --> 00:56:37,359
this is not enough for across the main

1516
00:56:37,359 --> 00:56:40,078
use case or

1517
00:56:40,480 --> 00:56:43,520
sure i want to take you know a token

1518
00:56:43,520 --> 00:56:44,720
issued by

1519
00:56:44,720 --> 00:56:45,680
you know

1520
00:56:45,680 --> 00:56:49,760
i you know by a company that is you know

1521
00:56:49,760 --> 00:56:51,359
um issuing

1522
00:56:51,359 --> 00:56:54,240
uh tokens and use them at some

1523
00:56:54,240 --> 00:56:56,640
completely other reason like think about

1524
00:56:56,640 --> 00:56:59,040
a resource server that works with

1525
00:56:59,040 --> 00:57:01,520
multiple email providers right the each

1526
00:57:01,520 --> 00:57:04,400
email provider is issuing its tokens

1527
00:57:04,400 --> 00:57:06,960
right and it may support multiple

1528
00:57:06,960 --> 00:57:08,240
issuers

1529
00:57:08,240 --> 00:57:10,480
right and and those tokens are coming

1530
00:57:10,480 --> 00:57:13,839
into its api now it needs to know what

1531
00:57:13,839 --> 00:57:16,480
are all the different specific acr

1532
00:57:16,480 --> 00:57:18,559
values that each of those issuers and

1533
00:57:18,559 --> 00:57:20,720
figure out which one to send right i'm

1534
00:57:20,720 --> 00:57:23,520
just saying there's complexity there um

1535
00:57:23,520 --> 00:57:26,160
so we could we could frame this in the

1536
00:57:26,160 --> 00:57:27,680
context of

1537
00:57:27,680 --> 00:57:29,440
you know this makes that

1538
00:57:29,440 --> 00:57:31,119
this makes straightforward sense in the

1539
00:57:31,119 --> 00:57:32,559
context for the resource server and the

1540
00:57:32,559 --> 00:57:34,720
authorization server in the same domain

1541
00:57:34,720 --> 00:57:36,559
right

1542
00:57:36,559 --> 00:57:38,480
when they're not is sort of out of scope

1543
00:57:38,480 --> 00:57:39,920
of the spec

1544
00:57:39,920 --> 00:57:42,559
unless we want to tackle that problem

1545
00:57:42,559 --> 00:57:44,799
um

1546
00:57:45,440 --> 00:57:48,400
can i reply yeah

1547
00:57:48,400 --> 00:57:50,559
no of course of course

1548
00:57:50,559 --> 00:57:52,400
by all means

1549
00:57:52,400 --> 00:57:55,040
great uh great point

1550
00:57:55,040 --> 00:57:58,400
uh interesting uh thing to think about

1551
00:57:58,400 --> 00:58:00,880
i think that the fact that

1552
00:58:00,880 --> 00:58:03,359
acr is by reference

1553
00:58:03,359 --> 00:58:06,559
and it's just a string and both parties

1554
00:58:06,559 --> 00:58:09,200
need to know what that means

1555
00:58:09,200 --> 00:58:11,920
is a natural scoping mechanism

1556
00:58:11,920 --> 00:58:14,400
let's say that a resource server will

1557
00:58:14,400 --> 00:58:17,920
say i need these acr and that acr

1558
00:58:17,920 --> 00:58:21,200
connect can have been acquired only out

1559
00:58:21,200 --> 00:58:23,760
of band while talking with a particular

1560
00:58:23,760 --> 00:58:26,160
authorization server and i think that

1561
00:58:26,160 --> 00:58:28,160
that might be enough of a scoping

1562
00:58:28,160 --> 00:58:30,400
mechanism because like they are more

1563
00:58:30,400 --> 00:58:32,559
than one authorization server and they

1564
00:58:32,559 --> 00:58:35,119
share the myhcr like imagine that the

1565
00:58:35,119 --> 00:58:37,359
gain faults actually

1566
00:58:37,359 --> 00:58:40,160
uh succeed and save at the gain profile

1567
00:58:40,160 --> 00:58:42,160
as identity providers and authorization

1568
00:58:42,160 --> 00:58:44,319
servers that follow the same model and

1569
00:58:44,319 --> 00:58:45,760
they share

1570
00:58:45,760 --> 00:58:48,480
like acr values which have semantic in

1571
00:58:48,480 --> 00:58:50,400
the context of that particular system

1572
00:58:50,400 --> 00:58:52,160
at that point it looks like you might

1573
00:58:52,160 --> 00:58:53,839
have more than one domain but you might

1574
00:58:53,839 --> 00:58:55,839
have a good reasons to use the same

1575
00:58:55,839 --> 00:58:59,440
stuff so i i take them at a point that

1576
00:58:59,440 --> 00:59:01,599
people need to think about this and they

1577
00:59:01,599 --> 00:59:03,920
need to be probably mindful and explicit

1578
00:59:03,920 --> 00:59:05,920
about how to scope it whether that

1579
00:59:05,920 --> 00:59:08,240
results in being in the same domain i

1580
00:59:08,240 --> 00:59:11,280
think that we need to uh

1581
00:59:11,280 --> 00:59:13,760
uh i approve the thing like study it and

1582
00:59:13,760 --> 00:59:15,920
see whether there is a conclusion or not

1583
00:59:15,920 --> 00:59:18,480
but in general i agree with uh with the

1584
00:59:18,480 --> 00:59:20,720
premise

1585
00:59:20,720 --> 00:59:22,720
thanks say george

1586
00:59:22,720 --> 00:59:24,799
brian do you have a point about this

1587
00:59:24,799 --> 00:59:28,000
discussion or something else

1588
00:59:28,000 --> 00:59:30,400
yeah it was it was exactly that the

1589
00:59:30,400 --> 00:59:32,480
there is some agreement on what the

1590
00:59:32,480 --> 00:59:34,799
meaning and levels of acr that's

1591
00:59:34,799 --> 00:59:35,920
necessary

1592
00:59:35,920 --> 00:59:37,680
it might be on a pairwise basis it might

1593
00:59:37,680 --> 00:59:39,760
be on an ecosystem type basis but

1594
00:59:39,760 --> 00:59:41,599
there's nothing inherent about that that

1595
00:59:41,599 --> 00:59:44,000
would limit it to a single domain so

1596
00:59:44,000 --> 00:59:44,880
that i

1597
00:59:44,880 --> 00:59:47,119
don't i guess i do disagree with that

1598
00:59:47,119 --> 00:59:48,720
characterization the general idea that

1599
00:59:48,720 --> 00:59:51,920
there's something needed to

1600
00:59:51,920 --> 00:59:54,079
to work and unders a shared agreement

1601
00:59:54,079 --> 00:59:56,079
about acr yes but limited to the same

1602
00:59:56,079 --> 00:59:57,839
domain is not

1603
00:59:57,839 --> 00:59:58,839
not the right

1604
00:59:58,839 --> 01:00:00,640
scoping

1605
01:00:00,640 --> 01:00:04,400
okay thanks brian philip

1606
01:00:06,960 --> 01:00:09,040
phillips

1607
01:00:09,040 --> 01:00:12,160
here i'm sorry um so

1608
01:00:12,160 --> 01:00:14,400
very quick thing that uh very quick

1609
01:00:14,400 --> 01:00:17,119
thought that came into my head is that

1610
01:00:17,119 --> 01:00:19,359
the client and the resource server will

1611
01:00:19,359 --> 01:00:20,960
probably need to share some level of

1612
01:00:20,960 --> 01:00:22,400
trust or there needs to be some level of

1613
01:00:22,400 --> 01:00:24,319
trust established because otherwise the

1614
01:00:24,319 --> 01:00:26,960
resource server can now turn and make

1615
01:00:26,960 --> 01:00:28,720
the client do something that maybe it

1616
01:00:28,720 --> 01:00:30,640
didn't want to do in the first place

1617
01:00:30,640 --> 01:00:33,040
uh this is just something you know that

1618
01:00:33,040 --> 01:00:34,960
that came to me if there's a rogue rs

1619
01:00:34,960 --> 01:00:37,040
that the client is made

1620
01:00:37,040 --> 01:00:38,160
to talk to

1621
01:00:38,160 --> 01:00:40,480
it can now turn back to the client and

1622
01:00:40,480 --> 01:00:42,319
tell him listen just add these

1623
01:00:42,319 --> 01:00:43,599
parameters

1624
01:00:43,599 --> 01:00:45,119
i'm not sure if there's anything in it

1625
01:00:45,119 --> 01:00:46,559
but it's just a thing to consider

1626
01:00:46,559 --> 01:00:48,160
whenever we write up

1627
01:00:48,160 --> 01:00:50,799
security privacy whatever considerations

1628
01:00:50,799 --> 01:00:52,640
the other thing is um it's great that

1629
01:00:52,640 --> 01:00:54,559
there will be something else than 6750

1630
01:00:54,559 --> 01:00:56,720
that actually uses www authenticate

1631
01:00:56,720 --> 01:00:58,079
because it will force clients to

1632
01:00:58,079 --> 01:01:02,160
implement parsing it correctly thank you

1633
01:01:02,160 --> 01:01:04,000
thanks philip

1634
01:01:04,000 --> 01:01:05,760
i really like

1635
01:01:05,760 --> 01:01:08,559
the observation mostly because of visa

1636
01:01:08,559 --> 01:01:12,160
validates using a specific semantic for

1637
01:01:12,160 --> 01:01:14,960
those parameters as opposed to just say

1638
01:01:14,960 --> 01:01:17,440
let's have a generic property bug that

1639
01:01:17,440 --> 01:01:19,280
we sent back to the client and that the

1640
01:01:19,280 --> 01:01:22,079
client might mindlessly just send out so

1641
01:01:22,079 --> 01:01:23,359
that

1642
01:01:23,359 --> 01:01:26,240
at this point like the um the semantic

1643
01:01:26,240 --> 01:01:29,760
of acr values and max age and scopes is

1644
01:01:29,760 --> 01:01:32,000
very well defined and now

1645
01:01:32,000 --> 01:01:33,680
of course the requisition server might

1646
01:01:33,680 --> 01:01:37,599
still abuse it and sure the um

1647
01:01:37,599 --> 01:01:41,520
the uh resource server can ask for an

1648
01:01:41,520 --> 01:01:44,079
absurdly high level of authentication

1649
01:01:44,079 --> 01:01:45,440
but the point is

1650
01:01:45,440 --> 01:01:47,839
they can do this already let's say that

1651
01:01:47,839 --> 01:01:49,200
if they are getting a token from a

1652
01:01:49,200 --> 01:01:50,880
fourization server potentially they

1653
01:01:50,880 --> 01:01:52,880
could say when you call this method when

1654
01:01:52,880 --> 01:01:55,599
you ask for this scope i want you to use

1655
01:01:55,599 --> 01:01:58,400
visa authentication level so your point

1656
01:01:58,400 --> 01:02:01,039
in general is well taken that we need to

1657
01:02:01,039 --> 01:02:03,680
make sure that we don't enable uh all

1658
01:02:03,680 --> 01:02:06,640
the extensions in which we play stuff

1659
01:02:06,640 --> 01:02:09,359
that allows things that are unexpected

1660
01:02:09,359 --> 01:02:11,599
to occur but i think that

1661
01:02:11,599 --> 01:02:13,599
we can define the semantic of those

1662
01:02:13,599 --> 01:02:16,319
parameters narrowly enough that the vets

1663
01:02:16,319 --> 01:02:19,799
should be content

1664
01:02:21,440 --> 01:02:23,119
all right i'll leave you once again so

1665
01:02:23,119 --> 01:02:26,160
i'll take this opportunity to

1666
01:02:26,160 --> 01:02:28,640
remind about the there is an iana

1667
01:02:28,640 --> 01:02:30,960
registry for um

1668
01:02:30,960 --> 01:02:33,039
access or authentication context last

1669
01:02:33,039 --> 01:02:35,680
rest it actually covers across as well

1670
01:02:35,680 --> 01:02:39,359
based on rfc 6711 i set it up years ago

1671
01:02:39,359 --> 01:02:40,880
it has

1672
01:02:40,880 --> 01:02:44,079
like all of the globally recognized

1673
01:02:44,079 --> 01:02:46,880
um context classes like uh the e e i

1674
01:02:46,880 --> 01:02:48,480
dash level so sure and stuff like that

1675
01:02:48,480 --> 01:02:50,799
in it and you know and

1676
01:02:50,799 --> 01:02:52,640
and a suspicious number of swedish stuff

1677
01:02:52,640 --> 01:02:54,880
as well but

1678
01:02:54,880 --> 01:02:56,960
that could be used

1679
01:02:56,960 --> 01:02:58,720
i mean there are certain things that or

1680
01:02:58,720 --> 01:03:00,400
shouldn't really should have global

1681
01:03:00,400 --> 01:03:01,680
wrecking

1682
01:03:01,680 --> 01:03:04,559
recognizability right and you dump stuff

1683
01:03:04,559 --> 01:03:07,039
in there and i think maybe it's time to

1684
01:03:07,039 --> 01:03:09,280
go and revise that rfc and maybe update

1685
01:03:09,280 --> 01:03:10,960
the iana registry to make it a little

1686
01:03:10,960 --> 01:03:13,680
bit more like applicable to oauth and

1687
01:03:13,680 --> 01:03:15,680
oidc anyway

1688
01:03:15,680 --> 01:03:18,000
thank you

1689
01:03:21,039 --> 01:03:23,760
667.

1690
01:03:24,960 --> 01:03:26,960
yeah go ahead as dave robin uh

1691
01:03:26,960 --> 01:03:28,319
representing backnet the building

1692
01:03:28,319 --> 01:03:29,520
automation control so i've been

1693
01:03:29,520 --> 01:03:31,760
evangelizing oauth 2 bacnet people

1694
01:03:31,760 --> 01:03:33,359
educating them the whole thing uh

1695
01:03:33,359 --> 01:03:35,920
collect token binding client ids you

1696
01:03:35,920 --> 01:03:37,599
know scopes everything

1697
01:03:37,599 --> 01:03:38,400
um

1698
01:03:38,400 --> 01:03:40,400
now with it seems that we're throwing in

1699
01:03:40,400 --> 01:03:42,720
an additional thing here that i have not

1700
01:03:42,720 --> 01:03:44,799
been evangelizing to them and the

1701
01:03:44,799 --> 01:03:46,799
question is you said uh oh i could use a

1702
01:03:46,799 --> 01:03:48,640
different scope here i have a read token

1703
01:03:48,640 --> 01:03:51,760
now i want to write scope as well right

1704
01:03:51,760 --> 01:03:52,880
why

1705
01:03:52,880 --> 01:03:54,720
or i could have this

1706
01:03:54,720 --> 01:03:57,599
generic email scope and get this

1707
01:03:57,599 --> 01:04:00,720
different a um acr value

1708
01:04:00,720 --> 01:04:02,400
so it seems like the permissions are no

1709
01:04:02,400 --> 01:04:04,400
longer scope based

1710
01:04:04,400 --> 01:04:06,799
they're a combination of scope based and

1711
01:04:06,799 --> 01:04:09,039
acr based it's sort of this weird cross

1712
01:04:09,039 --> 01:04:10,559
product or something

1713
01:04:10,559 --> 01:04:12,880
and i find that confusing

1714
01:04:12,880 --> 01:04:14,559
i understand your answer was well we

1715
01:04:14,559 --> 01:04:17,119
have this acr mechanism so we'll use it

1716
01:04:17,119 --> 01:04:18,640
as opposed to

1717
01:04:18,640 --> 01:04:20,880
uh new scopes so

1718
01:04:20,880 --> 01:04:22,640
i'm not saying that this is a bad thing

1719
01:04:22,640 --> 01:04:25,520
i was just questioning why not use

1720
01:04:25,520 --> 01:04:26,960
scopes

1721
01:04:26,960 --> 01:04:29,200
what is additional scope not giving you

1722
01:04:29,200 --> 01:04:32,160
that you need the existing scope plus

1723
01:04:32,160 --> 01:04:35,039
the acr value is effectively a new kind

1724
01:04:35,039 --> 01:04:37,359
of permission so there are two uh

1725
01:04:37,359 --> 01:04:39,520
various levels so first scopes are not

1726
01:04:39,520 --> 01:04:41,599
necessarily only for missions but they

1727
01:04:41,599 --> 01:04:43,839
could be used as permission uh in this

1728
01:04:43,839 --> 01:04:46,880
particular case uh scopes are typically

1729
01:04:46,880 --> 01:04:49,119
something that you have at request time

1730
01:04:49,119 --> 01:04:50,799
and there are things that are you are

1731
01:04:50,799 --> 01:04:53,359
typically have in a third party scenario

1732
01:04:53,359 --> 01:04:55,359
if you are a first party potentially

1733
01:04:55,359 --> 01:04:57,599
people use all this flow with no scopes

1734
01:04:57,599 --> 01:05:00,000
at all so at that point you would be

1735
01:05:00,000 --> 01:05:02,559
asking them to include scopes in a

1736
01:05:02,559 --> 01:05:04,400
scenario in which potentially there is

1737
01:05:04,400 --> 01:05:05,359
really no

1738
01:05:05,359 --> 01:05:07,920
delegated flow so technically in term of

1739
01:05:07,920 --> 01:05:11,599
a universal turing machine scopes have

1740
01:05:11,599 --> 01:05:13,839
the enough expressive power to do all

1741
01:05:13,839 --> 01:05:16,240
these okay it's just that now i'd have

1742
01:05:16,240 --> 01:05:18,000
to introduce them and basically have the

1743
01:05:18,000 --> 01:05:21,119
same semantic i already have with my acr

1744
01:05:21,119 --> 01:05:23,119
with implementation that already react

1745
01:05:23,119 --> 01:05:25,520
to this because open id connect already

1746
01:05:25,520 --> 01:05:27,280
this mechanism in which you can ask for

1747
01:05:27,280 --> 01:05:29,680
these even if you have no scopes at all

1748
01:05:29,680 --> 01:05:30,400
and

1749
01:05:30,400 --> 01:05:32,480
the circumstance in which you needed to

1750
01:05:32,480 --> 01:05:34,319
elevate do not include the scopes

1751
01:05:34,319 --> 01:05:35,760
because they configuration the

1752
01:05:35,760 --> 01:05:38,000
consideration is not statically um

1753
01:05:38,000 --> 01:05:39,920
calling to this particular subset of a

1754
01:05:39,920 --> 01:05:41,680
resource is more

1755
01:05:41,680 --> 01:05:44,079
situation happened and so i needed to

1756
01:05:44,079 --> 01:05:47,119
ask for this so in terms of clarity and

1757
01:05:47,119 --> 01:05:48,839
in terms of distance from the

1758
01:05:48,839 --> 01:05:52,079
implementation this finger we believe

1759
01:05:52,079 --> 01:05:55,119
would be um clearer and also the other

1760
01:05:55,119 --> 01:05:56,640
point is

1761
01:05:56,640 --> 01:06:00,000
scopes as a mechanism of a challenge has

1762
01:06:00,000 --> 01:06:02,240
been in there since the very beginning

1763
01:06:02,240 --> 01:06:04,559
and very few people use it because it's

1764
01:06:04,559 --> 01:06:05,920
so generic

1765
01:06:05,920 --> 01:06:07,200
that um

1766
01:06:07,200 --> 01:06:09,440
in the end what makes a difference is

1767
01:06:09,440 --> 01:06:11,359
the scopes that you are asking for and

1768
01:06:11,359 --> 01:06:12,720
the particular semantic for your

1769
01:06:12,720 --> 01:06:15,119
particular system so just having the

1770
01:06:15,119 --> 01:06:17,200
mechanism that sends the scope around

1771
01:06:17,200 --> 01:06:19,280
doesn't make much of a difference and

1772
01:06:19,280 --> 01:06:21,359
despite our years in which we tell

1773
01:06:21,359 --> 01:06:24,880
developers do incremental consent don't

1774
01:06:24,880 --> 01:06:27,359
ask for everything upfront just at lunch

1775
01:06:27,359 --> 01:06:29,520
we were discussing the fact that in

1776
01:06:29,520 --> 01:06:32,240
practice the developers wanted to avoid

1777
01:06:32,240 --> 01:06:35,119
these as much as possible and so um

1778
01:06:35,119 --> 01:06:36,960
rather than asking for scopes when they

1779
01:06:36,960 --> 01:06:38,960
need it they ask as much as possible

1780
01:06:38,960 --> 01:06:41,039
upfront right so that they reduce the

1781
01:06:41,039 --> 01:06:43,280
number of prompts and the opportunities

1782
01:06:43,280 --> 01:06:45,119
for developers to

1783
01:06:45,119 --> 01:06:46,480
do something wrong

1784
01:06:46,480 --> 01:06:48,000
so sorry through the user to do

1785
01:06:48,000 --> 01:06:50,480
something wrong so we believe that by

1786
01:06:50,480 --> 01:06:53,039
being specific and by piggybacking on

1787
01:06:53,039 --> 01:06:55,440
existing capabilities that are already

1788
01:06:55,440 --> 01:06:57,599
rooted on those values we will have a

1789
01:06:57,599 --> 01:07:00,000
better shot at interoperability and

1790
01:07:00,000 --> 01:07:03,039
implementation than with scopes which so

1791
01:07:03,039 --> 01:07:03,839
far

1792
01:07:03,839 --> 01:07:06,319
could have done this but haven't done it

1793
01:07:06,319 --> 01:07:07,920
okay well it's similar to the resource

1794
01:07:07,920 --> 01:07:09,920
indicators thing of preventing scope of

1795
01:07:09,920 --> 01:07:12,480
use where scope scope is abused to

1796
01:07:12,480 --> 01:07:14,240
indicate resources clients and all the

1797
01:07:14,240 --> 01:07:17,680
other stuff it's perfect

1798
01:07:17,700 --> 01:07:19,119
[Music]

1799
01:07:19,119 --> 01:07:20,960
one second mike

1800
01:07:20,960 --> 01:07:23,440
brian d do you have a point about this

1801
01:07:23,440 --> 01:07:25,839
discussion go ahead just one more thing

1802
01:07:25,839 --> 01:07:27,520
that use case is kind of near and dear

1803
01:07:27,520 --> 01:07:30,240
to my heart that this fits better with

1804
01:07:30,240 --> 01:07:32,480
is on the resource server side some kind

1805
01:07:32,480 --> 01:07:35,359
of anomaly detection or ai or whatever

1806
01:07:35,359 --> 01:07:37,599
black box indicator or even signaling

1807
01:07:37,599 --> 01:07:39,520
that it's receiving that suddenly

1808
01:07:39,520 --> 01:07:42,880
decides the token is invalid and wanting

1809
01:07:42,880 --> 01:07:45,680
to be able to take the user tell the

1810
01:07:45,680 --> 01:07:47,039
client to take user through a

1811
01:07:47,039 --> 01:07:49,119
re-authentication flow to remediate that

1812
01:07:49,119 --> 01:07:50,400
situation

1813
01:07:50,400 --> 01:07:52,559
is something that is even

1814
01:07:52,559 --> 01:07:55,359
harder to model with scopes i think

1815
01:07:55,359 --> 01:07:57,359
you probably could but it's even more

1816
01:07:57,359 --> 01:07:59,520
difficult than the kinds of static scope

1817
01:07:59,520 --> 01:08:02,640
to authentication levels so um

1818
01:08:02,640 --> 01:08:04,960
just one one more driver for being able

1819
01:08:04,960 --> 01:08:06,960
to sort of independently express hey i

1820
01:08:06,960 --> 01:08:08,559
need this user to

1821
01:08:08,559 --> 01:08:11,039
authenticate again at this level and do

1822
01:08:11,039 --> 01:08:11,760
it

1823
01:08:11,760 --> 01:08:14,240
in this time frame to

1824
01:08:14,240 --> 01:08:16,719
to get access

1825
01:08:16,719 --> 01:08:18,960
mike

1826
01:08:22,158 --> 01:08:25,600
mike jones microsoft uh reinforcing my

1827
01:08:25,600 --> 01:08:29,120
friend life's comment when we defined

1828
01:08:29,120 --> 01:08:32,479
acr in open id connect we

1829
01:08:32,479 --> 01:08:36,839
already suggested that people should use

1830
01:08:36,839 --> 01:08:38,560
um

1831
01:08:38,560 --> 01:08:40,479
the level of assurance

1832
01:08:40,479 --> 01:08:42,799
profiles registry

1833
01:08:42,799 --> 01:08:45,359
uh for the values

1834
01:08:45,359 --> 01:08:48,479
and i also agree with brian's comment

1835
01:08:48,479 --> 01:08:50,640
that uh

1836
01:08:50,640 --> 01:08:53,120
the fact that there's uh mutually

1837
01:08:53,120 --> 01:08:55,359
understood values doesn't

1838
01:08:55,359 --> 01:08:57,839
imply that things are necessarily in the

1839
01:08:57,839 --> 01:08:59,120
same domain

1840
01:08:59,120 --> 01:09:01,759
indeed life's registry enables that to

1841
01:09:01,759 --> 01:09:04,560
not be the case

1842
01:09:11,520 --> 01:09:13,279
okay thank you

1843
01:09:13,279 --> 01:09:16,319
victoria do you want to wrap it up

1844
01:09:16,319 --> 01:09:18,080
um well

1845
01:09:18,080 --> 01:09:19,759
as you have seen the scope of this thing

1846
01:09:19,759 --> 01:09:21,359
is pretty small

1847
01:09:21,359 --> 01:09:22,238
um

1848
01:09:22,238 --> 01:09:23,040
if

1849
01:09:23,040 --> 01:09:25,920
you think that this is a a problem worth

1850
01:09:25,920 --> 01:09:27,439
solving then

1851
01:09:27,439 --> 01:09:31,198
the draft is out there so if we want

1852
01:09:31,198 --> 01:09:34,960
visa to be adopted and work in it

1853
01:09:34,960 --> 01:09:37,279
reluctantly but bryan and myself are

1854
01:09:37,279 --> 01:09:40,799
willing to move this thing forward

1855
01:09:40,799 --> 01:09:42,640
yeah i get the feeling from the room

1856
01:09:42,640 --> 01:09:44,319
that there is interest

1857
01:09:44,319 --> 01:09:47,120
and there is still some maybe confusion

1858
01:09:47,120 --> 01:09:51,198
or still some um something to clarify

1859
01:09:51,198 --> 01:09:54,000
so i would encourage you guys victoria

1860
01:09:54,000 --> 01:09:56,000
and brian to

1861
01:09:56,000 --> 01:09:57,199
maybe update

1862
01:09:57,199 --> 01:09:59,679
the documentary take that input into

1863
01:09:59,679 --> 01:10:01,760
consideration maybe clarify those points

1864
01:10:01,760 --> 01:10:02,480
and

1865
01:10:02,480 --> 01:10:05,679
submit a new version and let's see if

1866
01:10:05,679 --> 01:10:08,560
how we can move it forward the next time

1867
01:10:08,560 --> 01:10:11,760
um i'll read the the minutes with

1868
01:10:11,760 --> 01:10:14,400
interest i suspect that

1869
01:10:14,400 --> 01:10:17,120
if you'd read the current draft you'd

1870
01:10:17,120 --> 01:10:18,640
see that many of those things are

1871
01:10:18,640 --> 01:10:19,679
addressed

1872
01:10:19,679 --> 01:10:20,480
okay

1873
01:10:20,480 --> 01:10:22,640
there is always a possibility that some

1874
01:10:22,640 --> 01:10:25,679
data is to be managed we could also ask

1875
01:10:25,679 --> 01:10:28,640
um yeah okay for for reviewers of the

1876
01:10:28,640 --> 01:10:30,719
document i think that's always good uh

1877
01:10:30,719 --> 01:10:33,440
since now people are aware of the uh of

1878
01:10:33,440 --> 01:10:35,760
the document uh like maybe maybe you

1879
01:10:35,760 --> 01:10:37,360
have a show of hands and i can scribble

1880
01:10:37,360 --> 01:10:40,559
down a few robin

1881
01:10:41,679 --> 01:10:42,640
phillip

1882
01:10:42,640 --> 01:10:45,640
peter

1883
01:10:52,880 --> 01:10:54,400
[Laughter]

1884
01:10:54,400 --> 01:10:56,480
yeah just put it there

1885
01:10:56,480 --> 01:10:57,840
perfect you don't want me to drop it

1886
01:10:57,840 --> 01:10:59,920
okay

1887
01:10:59,920 --> 01:11:02,000
thanks victoria that's great thank you

1888
01:11:02,000 --> 01:11:03,199
all

1889
01:11:03,199 --> 01:11:04,080
okay

1890
01:11:04,080 --> 01:11:07,080
awesome

1891
01:11:35,440 --> 01:11:36,480
can you

1892
01:11:36,480 --> 01:11:41,239
exit i think you're still in control

1893
01:12:06,800 --> 01:12:09,280
there you go take it away daniel thank

1894
01:12:09,280 --> 01:12:11,520
you

1895
01:12:11,520 --> 01:12:15,440
so today i want to talk about the sorry

1896
01:12:15,440 --> 01:12:18,239
state of the clients um

1897
01:12:18,239 --> 01:12:20,560
regarding war clients obviously

1898
01:12:20,560 --> 01:12:23,840
um next slide please

1899
01:12:23,840 --> 01:12:27,120
do you want to use the mobile device

1900
01:12:28,960 --> 01:12:30,239
why

1901
01:12:30,239 --> 01:12:33,520
it worked nicely for audio so

1902
01:12:33,520 --> 01:12:34,960
um

1903
01:12:34,960 --> 01:12:36,480
oh sorry

1904
01:12:36,480 --> 01:12:38,960
my observation is that there's a lack of

1905
01:12:38,960 --> 01:12:41,520
good modern and universal oauth client

1906
01:12:41,520 --> 01:12:43,280
libraries and this is something we

1907
01:12:43,280 --> 01:12:45,760
should address this is something we

1908
01:12:45,760 --> 01:12:47,120
should fix

1909
01:12:47,120 --> 01:12:47,920
again

1910
01:12:47,920 --> 01:12:49,280
if you want to try it

1911
01:12:49,280 --> 01:12:51,199
okay so that's in the same

1912
01:12:51,199 --> 01:12:53,919
web interface

1913
01:12:54,640 --> 01:12:56,960
oh yeah got something here

1914
01:12:56,960 --> 01:12:58,320
this is where you go

1915
01:12:58,320 --> 01:12:59,440
there we go

1916
01:12:59,440 --> 01:13:00,880
excellent

1917
01:13:00,880 --> 01:13:02,080
this is great

1918
01:13:02,080 --> 01:13:05,840
yeah fantastic okay so um what is a good

1919
01:13:05,840 --> 01:13:07,199
modern

1920
01:13:07,199 --> 01:13:10,880
universal uh client library um

1921
01:13:10,880 --> 01:13:13,600
so what could it be let's say

1922
01:13:13,600 --> 01:13:15,679
uh i'm sorry is the scribble panel part

1923
01:13:15,679 --> 01:13:19,840
of the slides now can we close that

1924
01:13:19,840 --> 01:13:20,880
there we go

1925
01:13:20,880 --> 01:13:22,960
thanks

1926
01:13:22,960 --> 01:13:25,199
um

1927
01:13:27,920 --> 01:13:29,280
i would say

1928
01:13:29,280 --> 01:13:31,600
a good library is one that follows the

1929
01:13:31,600 --> 01:13:33,760
latest security recommendations is one

1930
01:13:33,760 --> 01:13:35,920
that feels native in the language or

1931
01:13:35,920 --> 01:13:37,199
framework

1932
01:13:37,199 --> 01:13:39,760
for which it was developed

1933
01:13:39,760 --> 01:13:41,920
it is hopefully also maintained and

1934
01:13:41,920 --> 01:13:43,600
documented

1935
01:13:43,600 --> 01:13:46,000
especially the so both parts are

1936
01:13:46,000 --> 01:13:47,679
important maintained obviously also for

1937
01:13:47,679 --> 01:13:49,679
the security part

1938
01:13:49,679 --> 01:13:52,080
and documented also because so you can

1939
01:13:52,080 --> 01:13:54,560
learn what the library actually supports

1940
01:13:54,560 --> 01:13:57,600
and what it does and how to use it

1941
01:13:57,600 --> 01:14:00,719
as a modern library um i would say

1942
01:14:00,719 --> 01:14:03,120
library should support

1943
01:14:03,120 --> 01:14:04,640
at least

1944
01:14:04,640 --> 01:14:06,560
a certain set of security features like

1945
01:14:06,560 --> 01:14:07,840
pxe

1946
01:14:07,840 --> 01:14:10,000
um it should support

1947
01:14:10,000 --> 01:14:11,360
methods for asymmetric client

1948
01:14:11,360 --> 01:14:14,080
authentication maybe mtls

1949
01:14:14,080 --> 01:14:15,440
um

1950
01:14:15,440 --> 01:14:18,080
and maybe maybe maybe a big question

1951
01:14:18,080 --> 01:14:20,719
mark it should support things like um

1952
01:14:20,719 --> 01:14:24,560
auth 2.1 or floppy this could so even if

1953
01:14:24,560 --> 01:14:27,920
if we don't say okay this all libraries

1954
01:14:27,920 --> 01:14:29,520
need to support happy that would be a

1955
01:14:29,520 --> 01:14:32,880
bit strange obviously but um maybe these

1956
01:14:32,880 --> 01:14:34,800
kind of profiles can give you give us a

1957
01:14:34,800 --> 01:14:35,920
direction

1958
01:14:35,920 --> 01:14:37,120
um

1959
01:14:37,120 --> 01:14:39,360
in which which way to go

1960
01:14:39,360 --> 01:14:42,480
what a good library could support

1961
01:14:42,480 --> 01:14:44,560
and universal means that it is not

1962
01:14:44,560 --> 01:14:46,640
tailored towards a specific use case or

1963
01:14:46,640 --> 01:14:47,840
specific

1964
01:14:47,840 --> 01:14:50,080
vendor specific api

1965
01:14:50,080 --> 01:14:51,120
because

1966
01:14:51,120 --> 01:14:53,360
many of the oauth clients that you find

1967
01:14:53,360 --> 01:14:55,520
out there are written for sign in with

1968
01:14:55,520 --> 01:14:57,280
google maybe they support google

1969
01:14:57,280 --> 01:15:00,320
facebook and um i don't know amazon

1970
01:15:00,320 --> 01:15:01,440
whatever

1971
01:15:01,440 --> 01:15:04,400
um so that's not a good library if you

1972
01:15:04,400 --> 01:15:06,000
want to use the library something

1973
01:15:06,000 --> 01:15:07,760
completely different

1974
01:15:07,760 --> 01:15:09,760
um it should not be limited to certain

1975
01:15:09,760 --> 01:15:12,640
use cases as far as possible obviously a

1976
01:15:12,640 --> 01:15:14,159
library on a mobile device would be

1977
01:15:14,159 --> 01:15:16,239
different from one um with a web

1978
01:15:16,239 --> 01:15:18,239
interface maybe maybe it could be the

1979
01:15:18,239 --> 01:15:19,440
same library

1980
01:15:19,440 --> 01:15:21,360
um but apart from that it should not

1981
01:15:21,360 --> 01:15:23,360
only cover very

1982
01:15:23,360 --> 01:15:26,559
narrow use case

1983
01:15:26,640 --> 01:15:27,440
yeah

1984
01:15:27,440 --> 01:15:29,600
it should be very configurable for

1985
01:15:29,600 --> 01:15:32,320
various uh feature sets ideally so it

1986
01:15:32,320 --> 01:15:35,280
should not assume the same feature set

1987
01:15:35,280 --> 01:15:37,840
um in all the use cases

1988
01:15:37,840 --> 01:15:39,520
for example

1989
01:15:39,520 --> 01:15:41,679
i saw that many libraries

1990
01:15:41,679 --> 01:15:44,640
claim to support authentic id connect

1991
01:15:44,640 --> 01:15:46,960
where in reality they just implement

1992
01:15:46,960 --> 01:15:49,360
openmd connect so you sometimes cannot

1993
01:15:49,360 --> 01:15:50,960
even switch it off

1994
01:15:50,960 --> 01:15:53,040
um that's not a good thing

1995
01:15:53,040 --> 01:15:56,560
ideally you just throw some issuer url

1996
01:15:56,560 --> 01:15:57,840
at the library and the library

1997
01:15:57,840 --> 01:16:00,000
configures itself because it can read

1998
01:16:00,000 --> 01:16:02,560
and understand server metadata

1999
01:16:02,560 --> 01:16:04,560
this obviously also requires that the

2000
01:16:04,560 --> 01:16:06,320
authorization server provides server

2001
01:16:06,320 --> 01:16:07,840
metadata

2002
01:16:07,840 --> 01:16:09,840
daniel do you want to take comments now

2003
01:16:09,840 --> 01:16:13,120
i think it's essentially on there

2004
01:16:13,360 --> 01:16:14,560
okay

2005
01:16:14,560 --> 01:16:15,600
okay

2006
01:16:15,600 --> 01:16:17,760
yeah um yeah maybe we take the comments

2007
01:16:17,760 --> 01:16:19,360
afterwards okay

2008
01:16:19,360 --> 01:16:20,480
okay

2009
01:16:20,480 --> 01:16:23,040
so what's the experience in practice

2010
01:16:23,040 --> 01:16:25,040
when i say experience in practice i mean

2011
01:16:25,040 --> 01:16:26,880
my personal experience and that is at

2012
01:16:26,880 --> 01:16:29,280
yes.com where i help customers to

2013
01:16:29,280 --> 01:16:32,000
implement yes.com

2014
01:16:32,000 --> 01:16:36,480
which is more or less frp2 profile um so

2015
01:16:36,480 --> 01:16:38,320
all standard features

2016
01:16:38,320 --> 01:16:39,199
um

2017
01:16:39,199 --> 01:16:42,880
but um yeah in practice this means that

2018
01:16:42,880 --> 01:16:45,120
um there are some libraries that you can

2019
01:16:45,120 --> 01:16:47,840
use to implement what we are doing

2020
01:16:47,840 --> 01:16:50,880
like philips node.js library works well

2021
01:16:50,880 --> 01:16:52,960
we have a demo for that on our website

2022
01:16:52,960 --> 01:16:54,480
you can just use that it's a few lines

2023
01:16:54,480 --> 01:16:55,600
of code

2024
01:16:55,600 --> 01:16:57,280
works really well

2025
01:16:57,280 --> 01:16:58,640
um

2026
01:16:58,640 --> 01:17:00,239
there are some other libraries like in

2027
01:17:00,239 --> 01:17:02,320
java the nimbus library but apart from

2028
01:17:02,320 --> 01:17:04,320
that there's not

2029
01:17:04,320 --> 01:17:06,080
much else

2030
01:17:06,080 --> 01:17:07,760
most of the time that means that our

2031
01:17:07,760 --> 01:17:09,360
customers end up with custom

2032
01:17:09,360 --> 01:17:11,440
implementations so

2033
01:17:11,440 --> 01:17:14,320
we have a developer guide we tell them

2034
01:17:14,320 --> 01:17:16,320
how to make certain requests how to

2035
01:17:16,320 --> 01:17:18,560
process responses and they have to

2036
01:17:18,560 --> 01:17:20,560
implement this step by step

2037
01:17:20,560 --> 01:17:21,600
um

2038
01:17:21,600 --> 01:17:23,679
the experience is for me personally that

2039
01:17:23,679 --> 01:17:26,719
i cannot point uh developers to good

2040
01:17:26,719 --> 01:17:28,640
libraries because maybe i just don't

2041
01:17:28,640 --> 01:17:31,600
know where the good libraries hide

2042
01:17:31,600 --> 01:17:32,320
but

2043
01:17:32,320 --> 01:17:34,080
my impression is that

2044
01:17:34,080 --> 01:17:35,920
it's really really hard to find out what

2045
01:17:35,920 --> 01:17:37,120
are the features that the library

2046
01:17:37,120 --> 01:17:38,320
supports

2047
01:17:38,320 --> 01:17:39,199
um

2048
01:17:39,199 --> 01:17:40,800
is it even a client or server library

2049
01:17:40,800 --> 01:17:42,480
some just say okay we implement auth

2050
01:17:42,480 --> 01:17:44,719
okay what exactly do you do

2051
01:17:44,719 --> 01:17:46,719
um what are the specifications that it

2052
01:17:46,719 --> 01:17:48,640
supports um

2053
01:17:48,640 --> 01:17:52,159
is it just rc 6749 and 6750 or

2054
01:17:52,159 --> 01:17:54,320
is there also pixie is there

2055
01:17:54,320 --> 01:17:56,880
anything else not so clear often

2056
01:17:56,880 --> 01:18:00,159
um that the authors

2057
01:18:00,159 --> 01:18:01,520
have a look at the latest security

2058
01:18:01,520 --> 01:18:03,440
recommendations or not

2059
01:18:03,440 --> 01:18:05,199
this in particular is often just not

2060
01:18:05,199 --> 01:18:07,040
documented so you have to dig into the

2061
01:18:07,040 --> 01:18:09,600
code and figure out whether they

2062
01:18:09,600 --> 01:18:11,840
i don't know would even handle things

2063
01:18:11,840 --> 01:18:13,040
like an issue

2064
01:18:13,040 --> 01:18:14,560
in the authorization response and stuff

2065
01:18:14,560 --> 01:18:15,920
like that

2066
01:18:15,920 --> 01:18:16,880
um

2067
01:18:16,880 --> 01:18:18,800
many of them are incomplete so it works

2068
01:18:18,800 --> 01:18:21,360
for sign in with google and a few others

2069
01:18:21,360 --> 01:18:23,040
but apart from that

2070
01:18:23,040 --> 01:18:24,239
nothing else

2071
01:18:24,239 --> 01:18:26,800
and there are dozens of unmaintained

2072
01:18:26,800 --> 01:18:28,800
implementations so if you go on

2073
01:18:28,800 --> 01:18:30,960
oauth.net where erin has listed all the

2074
01:18:30,960 --> 01:18:32,719
libraries for different languages if you

2075
01:18:32,719 --> 01:18:34,800
click on them like every second of them

2076
01:18:34,800 --> 01:18:37,440
last update four years ago or something

2077
01:18:37,440 --> 01:18:38,880
um

2078
01:18:38,880 --> 01:18:40,640
yeah and interestingly this lack of good

2079
01:18:40,640 --> 01:18:43,760
libraries um is um like a

2080
01:18:43,760 --> 01:18:46,719
um self um

2081
01:18:46,719 --> 01:18:49,760
what's it called so so

2082
01:18:49,760 --> 01:18:51,920
so fulfilling prophecy thank you

2083
01:18:51,920 --> 01:18:55,199
um the because because we have this lack

2084
01:18:55,199 --> 01:18:59,040
of libraries we as an uh offer of an api

2085
01:18:59,040 --> 01:19:01,679
we have to document every single request

2086
01:19:01,679 --> 01:19:03,600
every single response how to process it

2087
01:19:03,600 --> 01:19:05,120
so we have to write a complete

2088
01:19:05,120 --> 01:19:09,600
documentation on the http level um

2089
01:19:09,600 --> 01:19:11,120
and this leads developers to just

2090
01:19:11,120 --> 01:19:12,800
implement it this way because they have

2091
01:19:12,800 --> 01:19:15,040
this this implementation they see okay

2092
01:19:15,040 --> 01:19:16,560
it's just a few requesting responses

2093
01:19:16,560 --> 01:19:18,320
what could go wrong

2094
01:19:18,320 --> 01:19:20,480
um so they just

2095
01:19:20,480 --> 01:19:22,320
go and implement it themselves so

2096
01:19:22,320 --> 01:19:24,159
there's no real incentive for them to

2097
01:19:24,159 --> 01:19:27,840
learn how to use a library with that

2098
01:19:27,840 --> 01:19:30,480
okay um why do i keep hiding my phone in

2099
01:19:30,480 --> 01:19:32,560
my pocket when i

2100
01:19:32,560 --> 01:19:35,440
need to switch slides

2101
01:19:35,440 --> 01:19:37,199
and then there's what i call the auth

2102
01:19:37,199 --> 01:19:39,920
configuration help um

2103
01:19:39,920 --> 01:19:42,960
assuming you don't have server metadata

2104
01:19:42,960 --> 01:19:44,800
then you need to figure out a few things

2105
01:19:44,800 --> 01:19:46,560
until you can use the library yeah i

2106
01:19:46,560 --> 01:19:49,199
know but i need to i need i need to have

2107
01:19:49,199 --> 01:19:51,520
a hand so maybe i have an italian

2108
01:19:51,520 --> 01:19:53,920
somewhere in my uh ancestry i don't know

2109
01:19:53,920 --> 01:19:56,080
but

2110
01:19:57,440 --> 01:19:59,760
um the auth configuration help so just

2111
01:19:59,760 --> 01:20:02,320
to set up a library um without server

2112
01:20:02,320 --> 01:20:06,239
metadata um to to um use oauth you need

2113
01:20:06,239 --> 01:20:08,800
to figure out like the dozens of

2114
01:20:08,800 --> 01:20:11,760
dozens and dozens of uh uh things like

2115
01:20:11,760 --> 01:20:13,360
what are the endpoint urls authorization

2116
01:20:13,360 --> 01:20:15,040
endpoint token endpoint

2117
01:20:15,040 --> 01:20:16,840
if you use open id connect user for

2118
01:20:16,840 --> 01:20:18,960
endpoint what are the supported grant

2119
01:20:18,960 --> 01:20:20,400
types uh

2120
01:20:20,400 --> 01:20:21,920
what's what method of client

2121
01:20:21,920 --> 01:20:23,440
authentication is used what are the

2122
01:20:23,440 --> 01:20:25,679
security mechanisms you

2123
01:20:25,679 --> 01:20:28,560
should use or can use or must use

2124
01:20:28,560 --> 01:20:30,080
sometimes you want to use a security

2125
01:20:30,080 --> 01:20:31,679
mechanism you don't even know if you can

2126
01:20:31,679 --> 01:20:33,360
you can use it

2127
01:20:33,360 --> 01:20:34,800
and this is not even talking about the

2128
01:20:34,800 --> 01:20:37,280
specifics of the api itself so you still

2129
01:20:37,280 --> 01:20:38,560
have to figure out what are the scopes

2130
01:20:38,560 --> 01:20:40,320
claims and so on

2131
01:20:40,320 --> 01:20:41,600
um

2132
01:20:41,600 --> 01:20:43,760
yeah so without server metadata this is

2133
01:20:43,760 --> 01:20:45,760
a really tedious process

2134
01:20:45,760 --> 01:20:47,920
and this also reduces the value in using

2135
01:20:47,920 --> 01:20:49,920
libraries because if you have to figure

2136
01:20:49,920 --> 01:20:52,560
out all of this yourself

2137
01:20:52,560 --> 01:20:54,480
then maybe it's just easier to implement

2138
01:20:54,480 --> 01:20:57,599
the http requests

2139
01:20:58,320 --> 01:21:00,320
what are the consequences from this well

2140
01:21:00,320 --> 01:21:02,800
there are plenty um first of all there's

2141
01:21:02,800 --> 01:21:04,719
an unnecessary fragmentation

2142
01:21:04,719 --> 01:21:05,520
so

2143
01:21:05,520 --> 01:21:07,360
the libraries only support a specific

2144
01:21:07,360 --> 01:21:09,280
subset would be great if they could just

2145
01:21:09,280 --> 01:21:12,719
support a larger feature set and maybe

2146
01:21:12,719 --> 01:21:15,520
then we don't need that many libraries

2147
01:21:15,520 --> 01:21:18,000
um this also leads to a slow adaption of

2148
01:21:18,000 --> 01:21:19,440
new specs

2149
01:21:19,440 --> 01:21:22,800
so we have recently uh standardized the

2150
01:21:22,800 --> 01:21:24,400
issuer parameter and the authorization

2151
01:21:24,400 --> 01:21:26,840
response this is a really really small

2152
01:21:26,840 --> 01:21:30,159
change but i don't expect to see that in

2153
01:21:30,159 --> 01:21:32,400
any of the libraries soon except for

2154
01:21:32,400 --> 01:21:36,080
phillips library thank you philip

2155
01:21:36,320 --> 01:21:38,000
and this can lead to developer

2156
01:21:38,000 --> 01:21:39,760
frustration except for those who is in

2157
01:21:39,760 --> 01:21:41,040
phillips library

2158
01:21:41,040 --> 01:21:43,360
um

2159
01:21:43,360 --> 01:21:46,880
so to quote um hans jackie if i may

2160
01:21:46,880 --> 01:21:47,840
quote you

2161
01:21:47,840 --> 01:21:50,480
um he just uh was it yesterday i know

2162
01:21:50,480 --> 01:21:53,120
the day before yesterday he said that

2163
01:21:53,120 --> 01:21:55,840
when they implement an auth

2164
01:21:55,840 --> 01:21:56,800
client

2165
01:21:56,800 --> 01:21:58,560
they usually

2166
01:21:58,560 --> 01:22:01,120
count several hours of research or do

2167
01:22:01,120 --> 01:22:03,199
several hours of research before

2168
01:22:03,199 --> 01:22:06,480
actually implementing something

2169
01:22:06,480 --> 01:22:07,840
and this is

2170
01:22:07,840 --> 01:22:08,840
not a good

2171
01:22:08,840 --> 01:22:10,639
situation

2172
01:22:10,639 --> 01:22:11,440
um

2173
01:22:11,440 --> 01:22:12,719
if you

2174
01:22:12,719 --> 01:22:14,800
this is completely unscientific um but

2175
01:22:14,800 --> 01:22:16,800
if you um take a look at twitter and

2176
01:22:16,800 --> 01:22:18,000
this is

2177
01:22:18,000 --> 01:22:19,520
only from one day so i just opened

2178
01:22:19,520 --> 01:22:21,600
twitter search for auth and if you do

2179
01:22:21,600 --> 01:22:22,880
that

2180
01:22:22,880 --> 01:22:24,239
you find many many voices from

2181
01:22:24,239 --> 01:22:25,360
developers

2182
01:22:25,360 --> 01:22:28,639
who seemingly um spend hours and hours

2183
01:22:28,639 --> 01:22:30,880
of configuring auth so part of this is

2184
01:22:30,880 --> 01:22:33,040
the auth configuration

2185
01:22:33,040 --> 01:22:34,480
um

2186
01:22:34,480 --> 01:22:36,159
and i really wish that for developer

2187
01:22:36,159 --> 01:22:38,719
only the only thing that they had to do

2188
01:22:38,719 --> 01:22:40,719
was to throw an issuer url into a

2189
01:22:40,719 --> 01:22:42,239
library and then

2190
01:22:42,239 --> 01:22:44,960
off they go of course so having to

2191
01:22:44,960 --> 01:22:47,440
implement some specifics for the api

2192
01:22:47,440 --> 01:22:50,719
but we are far from that um when when

2193
01:22:50,719 --> 01:22:54,560
you count the voices on twitter

2194
01:22:55,280 --> 01:22:56,320
um

2195
01:22:56,320 --> 01:22:58,560
this of course also costs time and money

2196
01:22:58,560 --> 01:23:00,320
so we see this with our with our

2197
01:23:00,320 --> 01:23:01,440
customers

2198
01:23:01,440 --> 01:23:04,159
who often spend a couple of days

2199
01:23:04,159 --> 01:23:06,639
developing the integration

2200
01:23:06,639 --> 01:23:08,560
until they they get to the point where

2201
01:23:08,560 --> 01:23:11,199
they can actually use the data that

2202
01:23:11,199 --> 01:23:14,080
our identity providers

2203
01:23:14,080 --> 01:23:16,400
provide

2204
01:23:16,400 --> 01:23:19,760
also for those offering the apis if you

2205
01:23:19,760 --> 01:23:22,320
offer an api and you want to provide an

2206
01:23:22,320 --> 01:23:24,719
sdk for that api you often also have to

2207
01:23:24,719 --> 01:23:26,560
maintain what is essentially a

2208
01:23:26,560 --> 01:23:28,800
specialized oauth library and it would

2209
01:23:28,800 --> 01:23:30,480
be great if we could come to the point

2210
01:23:30,480 --> 01:23:33,120
where you just as you don't implement

2211
01:23:33,120 --> 01:23:36,400
tls or https today where you could just

2212
01:23:36,400 --> 01:23:38,159
use a library that's already there in

2213
01:23:38,159 --> 01:23:40,159
your framework in your language

2214
01:23:40,159 --> 01:23:41,280
and

2215
01:23:41,280 --> 01:23:44,320
use that to integrate with wars

2216
01:23:44,320 --> 01:23:47,040
api providers also have to spend a lot

2217
01:23:47,040 --> 01:23:49,280
of time just explaining what they are

2218
01:23:49,280 --> 01:23:51,679
doing it's standard auth so they they

2219
01:23:51,679 --> 01:23:53,600
have to explain it over and over again

2220
01:23:53,600 --> 01:23:55,520
and they have to support developers who

2221
01:23:55,520 --> 01:23:57,360
don't understand or off but

2222
01:23:57,360 --> 01:23:59,199
maybe they they shouldn't be required to

2223
01:23:59,199 --> 01:24:01,360
understand the auth they should just be

2224
01:24:01,360 --> 01:24:03,199
able to use auth

2225
01:24:03,199 --> 01:24:04,960
um yeah and then of course the

2226
01:24:04,960 --> 01:24:06,880
developers they have to do trying errors

2227
01:24:06,880 --> 01:24:08,800
uh trial and error to figure out

2228
01:24:08,800 --> 01:24:11,920
uh what is supported in a certain api

2229
01:24:11,920 --> 01:24:13,280
um

2230
01:24:13,280 --> 01:24:16,080
i here used twitter as an example

2231
01:24:16,080 --> 01:24:18,880
because twitter just recently created an

2232
01:24:18,880 --> 01:24:21,679
auth 2 api and this is very interesting

2233
01:24:21,679 --> 01:24:24,000
because this is not a legacy api this is

2234
01:24:24,000 --> 01:24:24,960
new

2235
01:24:24,960 --> 01:24:27,520
they support pixi and so on so it's it's

2236
01:24:27,520 --> 01:24:30,400
uh it's from so it's okay from the

2237
01:24:30,400 --> 01:24:33,440
security profile uh perfectly fine

2238
01:24:33,440 --> 01:24:35,440
um but if you read the documentation

2239
01:24:35,440 --> 01:24:37,440
it's interesting that you see that they

2240
01:24:37,440 --> 01:24:39,760
expect all developers to essentially

2241
01:24:39,760 --> 01:24:41,760
implement this from scratch

2242
01:24:41,760 --> 01:24:44,159
um so they they talk about they have a

2243
01:24:44,159 --> 01:24:46,800
glossary with auth terms they um

2244
01:24:46,800 --> 01:24:49,199
explain the or flows and uh they also

2245
01:24:49,199 --> 01:24:50,719
have an explanation for every single

2246
01:24:50,719 --> 01:24:52,800
parameter that you use

2247
01:24:52,800 --> 01:24:54,239
and uh

2248
01:24:54,239 --> 01:24:56,800
one thing in particular struck me

2249
01:24:56,800 --> 01:24:58,800
um so they give an example for an

2250
01:24:58,800 --> 01:25:01,760
authorized url and they even say you

2251
01:25:01,760 --> 01:25:03,440
will need to have the proper encoding

2252
01:25:03,440 --> 01:25:05,280
for this url to work be sure to check

2253
01:25:05,280 --> 01:25:07,679
out our documentation on the percent

2254
01:25:07,679 --> 01:25:09,520
encoding

2255
01:25:09,520 --> 01:25:12,239
why do we have to do that yeah i mean

2256
01:25:12,239 --> 01:25:14,560
this is i mean we're not explaining tcp

2257
01:25:14,560 --> 01:25:16,000
to them either

2258
01:25:16,000 --> 01:25:16,719
so

2259
01:25:16,719 --> 01:25:19,040
this should not be required

2260
01:25:19,040 --> 01:25:20,800
but i know that this is a problem so i

2261
01:25:20,800 --> 01:25:21,920
understand why could i put it there

2262
01:25:21,920 --> 01:25:23,679
because we have the same problem with

2263
01:25:23,679 --> 01:25:27,280
customers implementing yes so yeah

2264
01:25:27,280 --> 01:25:28,880
there you go

2265
01:25:28,880 --> 01:25:30,320
um

2266
01:25:30,320 --> 01:25:32,159
yeah and obviously

2267
01:25:32,159 --> 01:25:34,719
my favorite topic security um

2268
01:25:34,719 --> 01:25:36,159
customer implementation is obviously

2269
01:25:36,159 --> 01:25:37,920
also bad for security

2270
01:25:37,920 --> 01:25:39,440
so

2271
01:25:39,440 --> 01:25:40,880
there are many many opportunities for

2272
01:25:40,880 --> 01:25:43,679
hidden security problems um so when i

2273
01:25:43,679 --> 01:25:47,440
see customers implementing um our apis

2274
01:25:47,440 --> 01:25:50,320
um i sometimes have the feeling that

2275
01:25:50,320 --> 01:25:52,159
they probably don't do all the security

2276
01:25:52,159 --> 01:25:53,920
checks they should be doing but it's

2277
01:25:53,920 --> 01:25:55,360
hard for me to check that because i

2278
01:25:55,360 --> 01:25:56,480
cannot

2279
01:25:56,480 --> 01:25:58,320
look into their code i don't have the

2280
01:25:58,320 --> 01:26:00,080
time to check their code

2281
01:26:00,080 --> 01:26:02,000
um but you can just hide a lot of

2282
01:26:02,000 --> 01:26:03,600
security problems in a custom

2283
01:26:03,600 --> 01:26:04,960
implementation

2284
01:26:04,960 --> 01:26:05,760
the

2285
01:26:05,760 --> 01:26:07,520
if there come new security

2286
01:26:07,520 --> 01:26:09,120
recommendations it's unlikely that

2287
01:26:09,120 --> 01:26:11,600
custom implementations will follow them

2288
01:26:11,600 --> 01:26:13,520
and of course we have known

2289
01:26:13,520 --> 01:26:15,440
anti-patterns that are still being used

2290
01:26:15,440 --> 01:26:17,360
like state being filled with a static

2291
01:26:17,360 --> 01:26:18,480
pattern

2292
01:26:18,480 --> 01:26:21,280
um also pixi being

2293
01:26:21,280 --> 01:26:23,600
used with a static code verify code

2294
01:26:23,600 --> 01:26:24,639
challenge

2295
01:26:24,639 --> 01:26:27,120
um yeah

2296
01:26:27,120 --> 01:26:28,719
so there's some research i took that

2297
01:26:28,719 --> 01:26:30,960
from an older presentation but i guess

2298
01:26:30,960 --> 01:26:33,600
this is still more or less current

2299
01:26:33,600 --> 01:26:35,760
researcher researchers have spent some

2300
01:26:35,760 --> 01:26:37,600
time to look at actual oauth

2301
01:26:37,600 --> 01:26:40,320
implementations and they found uh

2302
01:26:40,320 --> 01:26:42,639
security problems in almost all of them

2303
01:26:42,639 --> 01:26:45,120
it's like sometimes they had

2304
01:26:45,120 --> 01:26:45,920
like

2305
01:26:45,920 --> 01:26:47,760
96 clients that they looked at and

2306
01:26:47,760 --> 01:26:50,159
almost all had security vulnerabilities

2307
01:26:50,159 --> 01:26:52,800
again this is a bit older this research

2308
01:26:52,800 --> 01:26:54,480
i guess there's

2309
01:26:54,480 --> 01:26:56,400
not so much new research on that topic

2310
01:26:56,400 --> 01:26:58,639
because it's the same

2311
01:26:58,639 --> 01:27:01,440
picture okay

2312
01:27:02,000 --> 01:27:02,880
um

2313
01:27:02,880 --> 01:27:06,159
yeah so let's discuss some solutions and

2314
01:27:06,159 --> 01:27:08,320
uh when i say let's discuss let's

2315
01:27:08,320 --> 01:27:10,480
discuss that um but i'm going to make

2316
01:27:10,480 --> 01:27:13,520
some proposals maybe as the basis for

2317
01:27:13,520 --> 01:27:15,199
the discussion

2318
01:27:15,199 --> 01:27:18,480
proposal number one would be to define a

2319
01:27:18,480 --> 01:27:20,719
goal because currently when somebody

2320
01:27:20,719 --> 01:27:22,719
starts implementing a library or when

2321
01:27:22,719 --> 01:27:24,719
somebody has a library and asks

2322
01:27:24,719 --> 01:27:25,760
themselves

2323
01:27:25,760 --> 01:27:27,120
what could be the next feature that i

2324
01:27:27,120 --> 01:27:29,440
implement there's no guidance that we

2325
01:27:29,440 --> 01:27:31,600
provide

2326
01:27:31,600 --> 01:27:34,400
maybe we can provide like defined levels

2327
01:27:34,400 --> 01:27:36,080
of support defined feature sets

2328
01:27:36,080 --> 01:27:37,280
something like that

2329
01:27:37,280 --> 01:27:39,280
something with a label on it just saying

2330
01:27:39,280 --> 01:27:42,080
hey this is uh i don't know

2331
01:27:42,080 --> 01:27:44,800
uh super duper confined whatever

2332
01:27:44,800 --> 01:27:46,880
um this can be based on existing

2333
01:27:46,880 --> 01:27:49,120
profiles and specifications so maybe we

2334
01:27:49,120 --> 01:27:51,920
can reuse or attach this somehow to auth

2335
01:27:51,920 --> 01:27:54,159
2.1 maybe you can use poppy as a

2336
01:27:54,159 --> 01:27:56,480
guideline something like that

2337
01:27:56,480 --> 01:28:00,159
um or we could just say within a very

2338
01:28:00,159 --> 01:28:03,199
narrow context with the core oauth plus

2339
01:28:03,199 --> 01:28:05,280
pixie plus something else

2340
01:28:05,280 --> 01:28:08,239
um and just say okay they're sorry um

2341
01:28:08,239 --> 01:28:09,840
that they're

2342
01:28:09,840 --> 01:28:11,840
mandatory to implement features for a

2343
01:28:11,840 --> 01:28:13,679
certain profile and i like that maybe

2344
01:28:13,679 --> 01:28:15,920
connect does the same thing so you have

2345
01:28:15,920 --> 01:28:17,679
uh mandatory to implement features for

2346
01:28:17,679 --> 01:28:19,600
all the id providers and you have

2347
01:28:19,600 --> 01:28:20,960
mandatory to implement features for

2348
01:28:20,960 --> 01:28:23,920
dynamic open id providers and and

2349
01:28:23,920 --> 01:28:26,000
more places like this in the spec

2350
01:28:26,000 --> 01:28:28,080
and this is of course then the basis for

2351
01:28:28,080 --> 01:28:29,920
uh conformance testing

2352
01:28:29,920 --> 01:28:32,159
but i think before conformance testing

2353
01:28:32,159 --> 01:28:34,719
even it would be important to say uh

2354
01:28:34,719 --> 01:28:37,360
what we expect from a modern good and

2355
01:28:37,360 --> 01:28:40,559
universal awards library

2356
01:28:40,719 --> 01:28:41,600
um

2357
01:28:41,600 --> 01:28:44,880
number two is to make metadata mandatory

2358
01:28:44,880 --> 01:28:47,360
or mandatory in the sense that we expect

2359
01:28:47,360 --> 01:28:49,440
it from any modern

2360
01:28:49,440 --> 01:28:50,719
implementation

2361
01:28:50,719 --> 01:28:53,199
um because all of metadata enables

2362
01:28:53,199 --> 01:28:55,040
libraries to automatically configure

2363
01:28:55,040 --> 01:28:56,400
themselves to figure out what are the

2364
01:28:56,400 --> 01:28:58,960
security mechanisms endpoints and so on

2365
01:28:58,960 --> 01:29:01,440
and this can greatly reduce the friction

2366
01:29:01,440 --> 01:29:03,920
that you have in implement oauth

2367
01:29:03,920 --> 01:29:05,840
and i hope that

2368
01:29:05,840 --> 01:29:07,360
this also

2369
01:29:07,360 --> 01:29:09,199
does away with the auth

2370
01:29:09,199 --> 01:29:10,960
configuration hell

2371
01:29:10,960 --> 01:29:11,840
um

2372
01:29:11,840 --> 01:29:13,679
so that reduces development time and

2373
01:29:13,679 --> 01:29:16,080
costs increase and it also increases the

2374
01:29:16,080 --> 01:29:17,760
value in using libraries because if you

2375
01:29:17,760 --> 01:29:18,960
have that and you can just throw a

2376
01:29:18,960 --> 01:29:21,440
library on it there's no incentive to

2377
01:29:21,440 --> 01:29:25,840
write the oauth flow yourself and um

2378
01:29:25,840 --> 01:29:27,920
yeah hopefully the libraries can then

2379
01:29:27,920 --> 01:29:30,320
also adapt to just using automatically

2380
01:29:30,320 --> 01:29:33,520
some new or or security features

2381
01:29:33,520 --> 01:29:36,560
yeah um therefore um i propose that this

2382
01:29:36,560 --> 01:29:40,159
is becomes mandatory in auth 2.1 and

2383
01:29:40,159 --> 01:29:41,040
also

2384
01:29:41,040 --> 01:29:42,960
generally that we expect this from

2385
01:29:42,960 --> 01:29:44,320
modern uh

2386
01:29:44,320 --> 01:29:47,199
fourth implementations

2387
01:29:47,199 --> 01:29:49,840
then there's number three um maybe the

2388
01:29:49,840 --> 01:29:52,400
elephant in the room it would be great

2389
01:29:52,400 --> 01:29:54,880
to have something like conformance tests

2390
01:29:54,880 --> 01:29:56,000
um

2391
01:29:56,000 --> 01:29:58,400
based upon the profiles that we define

2392
01:29:58,400 --> 01:30:00,480
or profiles that are there already

2393
01:30:00,480 --> 01:30:01,360
um

2394
01:30:01,360 --> 01:30:03,679
we or somebody else could provide

2395
01:30:03,679 --> 01:30:06,719
conformance tests this is a great

2396
01:30:06,719 --> 01:30:09,199
thing of the openid universe

2397
01:30:09,199 --> 01:30:12,159
it really helps to ensure that

2398
01:30:12,159 --> 01:30:14,800
implementations are standards compliant

2399
01:30:14,800 --> 01:30:18,000
obviously we could also ask the itf

2400
01:30:18,000 --> 01:30:19,920
protocol police which was established on

2401
01:30:19,920 --> 01:30:22,159
first of april 2021

2402
01:30:22,159 --> 01:30:24,560
um to to do that for us

2403
01:30:24,560 --> 01:30:28,159
uh but um yeah so

2404
01:30:28,560 --> 01:30:32,639
we reissue that rfc we really should

2405
01:30:32,639 --> 01:30:35,280
yeah um so there are many open questions

2406
01:30:35,280 --> 01:30:37,520
um obviously when we want to go in that

2407
01:30:37,520 --> 01:30:39,360
direction that's

2408
01:30:39,360 --> 01:30:40,960
something where i hope to get input from

2409
01:30:40,960 --> 01:30:42,880
you and uh

2410
01:30:42,880 --> 01:30:45,760
yeah where we need to think about

2411
01:30:45,760 --> 01:30:48,880
i do have something else no i'm just

2412
01:30:48,880 --> 01:30:51,120
asking for other ideas

2413
01:30:51,120 --> 01:30:52,880
and that's the moment where we can open

2414
01:30:52,880 --> 01:30:55,199
the discussion thank you daniel great

2415
01:30:55,199 --> 01:30:58,400
presentation victorio

2416
01:31:00,800 --> 01:31:04,000
oh he took notes vittorio

2417
01:31:04,000 --> 01:31:05,920
so i have to apologize for the huge

2418
01:31:05,920 --> 01:31:08,320
around that is about to flow from this

2419
01:31:08,320 --> 01:31:09,360
microphone

2420
01:31:09,360 --> 01:31:12,400
but i've owned sdks for identity and

2421
01:31:12,400 --> 01:31:14,800
developers for a few years so i have a

2422
01:31:14,800 --> 01:31:17,760
very strong opinion about some of these

2423
01:31:17,760 --> 01:31:20,560
and i'll start with sheet sandwich with

2424
01:31:20,560 --> 01:31:23,360
good things as in i think that the um

2425
01:31:23,360 --> 01:31:26,000
the conformance test is a fantastic idea

2426
01:31:26,000 --> 01:31:27,360
would be interesting to see what it

2427
01:31:27,360 --> 01:31:30,480
looks like because off is so protein

2428
01:31:30,480 --> 01:31:32,480
but it's a really great idea and

2429
01:31:32,480 --> 01:31:34,719
anything that in which you can like put

2430
01:31:34,719 --> 01:31:37,199
a label on the library and say this

2431
01:31:37,199 --> 01:31:39,440
library supports xyz

2432
01:31:39,440 --> 01:31:40,719
along the lines of what you're saying so

2433
01:31:40,719 --> 01:31:42,800
that it's a bit more predictable plus

2434
01:31:42,800 --> 01:31:45,120
user

2435
01:31:48,719 --> 01:31:51,120
talking about off libraries is a bit

2436
01:31:51,120 --> 01:31:53,600
misleading normally the libraries are

2437
01:31:53,600 --> 01:31:56,239
there to help people to perform some

2438
01:31:56,239 --> 01:31:58,719
kind of goal and that goal is usually

2439
01:31:58,719 --> 01:32:01,199
removed from the protocol level like

2440
01:32:01,199 --> 01:32:03,040
when we operate at the practical level

2441
01:32:03,040 --> 01:32:04,639
we are doing something which is pretty

2442
01:32:04,639 --> 01:32:06,880
fine-grained and it doesn't usually map

2443
01:32:06,880 --> 01:32:08,639
with the jobs to be done like for

2444
01:32:08,639 --> 01:32:11,280
example people do sign up all the time

2445
01:32:11,280 --> 01:32:14,000
using those flows but we don't ever talk

2446
01:32:14,000 --> 01:32:16,960
about sign up so there are like things

2447
01:32:16,960 --> 01:32:19,600
that the developer the normal person

2448
01:32:19,600 --> 01:32:22,560
think about when we're trying to perform

2449
01:32:22,560 --> 01:32:24,560
a goal function and similar which will

2450
01:32:24,560 --> 01:32:27,040
happen to use off but between off and

2451
01:32:27,040 --> 01:32:28,880
the function that we want there is a

2452
01:32:28,880 --> 01:32:31,920
death and so often as the case

2453
01:32:31,920 --> 01:32:34,719
don't expose the low level because the

2454
01:32:34,719 --> 01:32:36,719
developer would not be able to do it and

2455
01:32:36,719 --> 01:32:38,639
so depending on all the things that are

2456
01:32:38,639 --> 01:32:40,800
between the top level and off

2457
01:32:40,800 --> 01:32:42,800
it might be hard to do it like you'd

2458
01:32:42,800 --> 01:32:45,440
have a counterpart of intel inside in

2459
01:32:45,440 --> 01:32:47,040
which you don't need to know the details

2460
01:32:47,040 --> 01:32:49,120
of a prefetch pipeline and you just say

2461
01:32:49,120 --> 01:32:51,920
i like that if there is intel but the

2462
01:32:51,920 --> 01:32:53,840
library you should expect that a lot of

2463
01:32:53,840 --> 01:32:56,320
libraries will operate at high level

2464
01:32:56,320 --> 01:32:57,360
then

2465
01:32:57,360 --> 01:32:59,840
there are like when you say off we mean

2466
01:32:59,840 --> 01:33:02,639
so many different things and in general

2467
01:33:02,639 --> 01:33:04,400
if you look in terms of jobs to be done

2468
01:33:04,400 --> 01:33:07,120
there are resources as in when you say

2469
01:33:07,120 --> 01:33:09,280
uh people say off instead they are doing

2470
01:33:09,280 --> 01:33:10,960
open idea that's because they're trying

2471
01:33:10,960 --> 01:33:12,159
to do something

2472
01:33:12,159 --> 01:33:13,840
and then at the point the highest repeat

2473
01:33:13,840 --> 01:33:16,320
is signing as the resource or the api

2474
01:33:16,320 --> 01:33:19,280
versus the requesters those are vastly

2475
01:33:19,280 --> 01:33:21,280
different animals and although when you

2476
01:33:21,280 --> 01:33:24,159
do resources you can approximate some of

2477
01:33:24,159 --> 01:33:25,760
the things that you're describing as

2478
01:33:25,760 --> 01:33:28,320
soon as your client there are huge

2479
01:33:28,320 --> 01:33:30,719
individual differences that every

2480
01:33:30,719 --> 01:33:34,080
provider do which have a big impact on

2481
01:33:34,080 --> 01:33:36,080
the quality of life of a developer the

2482
01:33:36,080 --> 01:33:38,719
microsoft people have a resource

2483
01:33:38,719 --> 01:33:41,040
or refresh tokens that can be used with

2484
01:33:41,040 --> 01:33:43,440
multiple resources others don't have

2485
01:33:43,440 --> 01:33:46,159
that or they have a mechanism for the

2486
01:33:46,159 --> 01:33:48,560
metadata in which you can express

2487
01:33:48,560 --> 01:33:51,120
multiple tenants and there is a

2488
01:33:51,120 --> 01:33:52,960
proprietary mechanism for selecting

2489
01:33:52,960 --> 01:33:55,040
between votes from a developer point of

2490
01:33:55,040 --> 01:33:57,679
view that wants to get the job done the

2491
01:33:57,679 --> 01:33:59,199
fact that this thing is not strictly

2492
01:33:59,199 --> 01:34:01,679
conformed doesn't matter for the person

2493
01:34:01,679 --> 01:34:03,920
that tries to sell the service which is

2494
01:34:03,920 --> 01:34:05,840
required for that the fact that it's not

2495
01:34:05,840 --> 01:34:08,639
conformance doesn't matter the metadata

2496
01:34:08,639 --> 01:34:11,600
uh mandatory stuff we are lucky that uh

2497
01:34:11,600 --> 01:34:13,920
apple decided to more or less use open

2498
01:34:13,920 --> 01:34:16,239
connect but despite we pleaded and

2499
01:34:16,239 --> 01:34:18,639
prayed and threatened they are not

2500
01:34:18,639 --> 01:34:21,840
supporting the discovery endpoint and

2501
01:34:21,840 --> 01:34:23,360
probably there are strong reasons to do

2502
01:34:23,360 --> 01:34:26,159
so in the market people want to do

2503
01:34:26,159 --> 01:34:28,159
something with apple so the fact that we

2504
01:34:28,159 --> 01:34:29,520
don't support it is

2505
01:34:29,520 --> 01:34:30,840
it's just the way it

2506
01:34:30,840 --> 01:34:31,900
is um

2507
01:34:31,900 --> 01:34:34,080
[Music]

2508
01:34:34,080 --> 01:34:36,480
in term of the library i i didn't

2509
01:34:36,480 --> 01:34:38,000
understand if you were suggesting that

2510
01:34:38,000 --> 01:34:39,520
we would uh

2511
01:34:39,520 --> 01:34:41,520
for example start the process of

2512
01:34:41,520 --> 01:34:44,000
building libraries ourselves somehow or

2513
01:34:44,000 --> 01:34:45,040
bless them

2514
01:34:45,040 --> 01:34:47,679
i think that the up off example is a

2515
01:34:47,679 --> 01:34:49,119
good example of

2516
01:34:49,119 --> 01:34:51,040
when you try that initiative it's

2517
01:34:51,040 --> 01:34:53,920
difficult to sustain it over time and it

2518
01:34:53,920 --> 01:34:56,000
also shows an interesting

2519
01:34:56,000 --> 01:34:56,719
uh

2520
01:34:56,719 --> 01:34:59,040
drifting toward the proprietary because

2521
01:34:59,040 --> 01:35:01,600
google was the main proponent but we

2522
01:35:01,600 --> 01:35:03,840
still had a special flavor of the

2523
01:35:03,840 --> 01:35:05,679
library for the reasons that i said

2524
01:35:05,679 --> 01:35:07,360
earlier because people want to be

2525
01:35:07,360 --> 01:35:09,520
productive with google and so they add

2526
01:35:09,520 --> 01:35:11,119
layers on top of it that are not

2527
01:35:11,119 --> 01:35:13,360
strictly for the um

2528
01:35:13,360 --> 01:35:14,800
spec

2529
01:35:14,800 --> 01:35:17,119
and

2530
01:35:17,119 --> 01:35:18,159
that's it

2531
01:35:18,159 --> 01:35:20,000
thank you um

2532
01:35:20,000 --> 01:35:22,560
so two things uh so

2533
01:35:22,560 --> 01:35:25,040
regarding the lay the last point

2534
01:35:25,040 --> 01:35:27,760
uh i don't think we should ourselves be

2535
01:35:27,760 --> 01:35:30,159
producing libraries uh i i don't think

2536
01:35:30,159 --> 01:35:32,159
that will bring us somewhere

2537
01:35:32,159 --> 01:35:34,320
so

2538
01:35:34,880 --> 01:35:36,400
sorry

2539
01:35:36,400 --> 01:35:37,760
stop

2540
01:35:37,760 --> 01:35:40,320
immediately

2541
01:35:40,639 --> 01:35:42,719
blessing them or something is something

2542
01:35:42,719 --> 01:35:45,119
else but we shouldn't be producing their

2543
01:35:45,119 --> 01:35:46,400
code ourselves

2544
01:35:46,400 --> 01:35:49,840
um the other thing that uh you race and

2545
01:35:49,840 --> 01:35:51,760
i think that's a very important point

2546
01:35:51,760 --> 01:35:54,639
there's not always the one use case uh

2547
01:35:54,639 --> 01:35:57,040
maybe there's a use case where

2548
01:35:57,040 --> 01:35:58,880
like

2549
01:35:58,880 --> 01:36:01,520
or yeah there's a use case that is quite

2550
01:36:01,520 --> 01:36:03,520
common to many of the libraries

2551
01:36:03,520 --> 01:36:04,639
like a

2552
01:36:04,639 --> 01:36:06,719
sign-in or just getting an access token

2553
01:36:06,719 --> 01:36:09,360
the easy case

2554
01:36:09,360 --> 01:36:11,679
but i imagine that any library can also

2555
01:36:11,679 --> 01:36:14,239
be created in a way um that you can dig

2556
01:36:14,239 --> 01:36:16,719
deep dig deeper so when i compare to

2557
01:36:16,719 --> 01:36:19,119
http libraries for example um

2558
01:36:19,119 --> 01:36:21,040
there's usually a very easy way to send

2559
01:36:21,040 --> 01:36:23,199
a get request and i get the response

2560
01:36:23,199 --> 01:36:25,199
buddy and that's it right

2561
01:36:25,199 --> 01:36:28,159
um maybe there's a way to do the same uh

2562
01:36:28,159 --> 01:36:30,159
with with a cookie so maintain a session

2563
01:36:30,159 --> 01:36:31,760
with the server when i say when i'm

2564
01:36:31,760 --> 01:36:33,679
sending two or more requests

2565
01:36:33,679 --> 01:36:35,600
um but usually i can also say okay

2566
01:36:35,600 --> 01:36:37,360
please add a header to that specific

2567
01:36:37,360 --> 01:36:38,400
request

2568
01:36:38,400 --> 01:36:40,239
please change the encoding of that

2569
01:36:40,239 --> 01:36:43,920
specific request or here i want to use

2570
01:36:43,920 --> 01:36:46,239
i don't know i put some json into this

2571
01:36:46,239 --> 01:36:48,560
please handle this for me so i think

2572
01:36:48,560 --> 01:36:50,800
there's a way to to write libraries

2573
01:36:50,800 --> 01:36:53,679
where you can dig into all the details

2574
01:36:53,679 --> 01:36:56,320
which you can then use uh

2575
01:36:56,320 --> 01:36:58,480
to uh to send

2576
01:36:58,480 --> 01:37:01,280
very specific requests maybe also stuff

2577
01:37:01,280 --> 01:37:04,159
that is far from the core of auth

2578
01:37:04,159 --> 01:37:04,960
but

2579
01:37:04,960 --> 01:37:07,040
i think developers shouldn't have to do

2580
01:37:07,040 --> 01:37:08,400
that so

2581
01:37:08,400 --> 01:37:11,440
just as an http library uh i so i'm not

2582
01:37:11,440 --> 01:37:12,960
sure when i last

2583
01:37:12,960 --> 01:37:15,600
uh wrote something where i sent their

2584
01:37:15,600 --> 01:37:18,480
http headers over a tcp connection

2585
01:37:18,480 --> 01:37:21,280
um that should just not be required from

2586
01:37:21,280 --> 01:37:23,840
the developers so and in the same

2587
01:37:23,840 --> 01:37:24,639
uh

2588
01:37:24,639 --> 01:37:27,440
in the same spirit manner uh

2589
01:37:27,440 --> 01:37:29,760
users should not be forced to implement

2590
01:37:29,760 --> 01:37:31,840
http requests themselves

2591
01:37:31,840 --> 01:37:32,800
and just

2592
01:37:32,800 --> 01:37:34,000
they shouldn't be thinking about

2593
01:37:34,000 --> 01:37:36,080
encoding if they don't have to okay

2594
01:37:36,080 --> 01:37:38,480
justin

2595
01:37:40,880 --> 01:37:44,159
uh justin richards so um

2596
01:37:44,159 --> 01:37:45,520
a couple of things here one i want to

2597
01:37:45,520 --> 01:37:49,040
echo victoria's point that the uh

2598
01:37:49,040 --> 01:37:51,119
the use of an oauth library is always

2599
01:37:51,119 --> 01:37:53,199
always contextual

2600
01:37:53,199 --> 01:37:54,159
and

2601
01:37:54,159 --> 01:37:55,679
while technically you could also say

2602
01:37:55,679 --> 01:37:58,400
that http use is also

2603
01:37:58,400 --> 01:38:00,480
contextual it's not contextual in really

2604
01:38:00,480 --> 01:38:02,560
the same way because

2605
01:38:02,560 --> 01:38:04,239
the applications that you're building on

2606
01:38:04,239 --> 01:38:06,800
top of http kind of mostly don't care

2607
01:38:06,800 --> 01:38:09,119
about the http itself

2608
01:38:09,119 --> 01:38:13,360
um the oauth stuff is

2609
01:38:13,360 --> 01:38:16,639
a really brilliant abstraction of the

2610
01:38:16,639 --> 01:38:19,760
security properties of apis

2611
01:38:19,760 --> 01:38:22,080
but it is not a complete

2612
01:38:22,080 --> 01:38:25,360
layer separation of those properties

2613
01:38:25,360 --> 01:38:27,759
and

2614
01:38:28,400 --> 01:38:32,239
two direct examples of this that um

2615
01:38:32,239 --> 01:38:34,159
that i think inform this uh i will start

2616
01:38:34,159 --> 01:38:36,639
by saying that i absolutely

2617
01:38:36,639 --> 01:38:38,320
hear where you're coming from and i also

2618
01:38:38,320 --> 01:38:40,320
wish the world were better i think that

2619
01:38:40,320 --> 01:38:42,159
there are a few things that are stopping

2620
01:38:42,159 --> 01:38:44,560
the world from being better though

2621
01:38:44,560 --> 01:38:47,119
the first problem is oauth itself

2622
01:38:47,119 --> 01:38:49,040
it is not a single protocol

2623
01:38:49,040 --> 01:38:52,560
so writing especially a client library

2624
01:38:52,560 --> 01:38:54,159
for oauth

2625
01:38:54,159 --> 01:38:55,920
means at least six different things

2626
01:38:55,920 --> 01:38:58,639
depending on which flows you're doing

2627
01:38:58,639 --> 01:39:00,080
um i

2628
01:39:00,080 --> 01:39:02,639
for a while maintained a

2629
01:39:02,639 --> 01:39:05,119
a java implementation of a client

2630
01:39:05,119 --> 01:39:07,360
library they could do all of the oauth

2631
01:39:07,360 --> 01:39:09,280
stuff for the auth code flow

2632
01:39:09,280 --> 01:39:11,199
and we routinely have people coming in

2633
01:39:11,199 --> 01:39:13,360
saying like make it do the implicit flow

2634
01:39:13,360 --> 01:39:16,000
and we were like no it's a web server

2635
01:39:16,000 --> 01:39:17,840
you were yeah that's a totally that's a

2636
01:39:17,840 --> 01:39:19,360
different thing we're not going to do

2637
01:39:19,360 --> 01:39:20,480
that

2638
01:39:20,480 --> 01:39:22,800
right and so that is going to be a

2639
01:39:22,800 --> 01:39:26,080
consideration for any oauth library

2640
01:39:26,080 --> 01:39:28,960
just the use of it is going to be

2641
01:39:28,960 --> 01:39:30,880
drastically different

2642
01:39:30,880 --> 01:39:33,199
depending on which flows you're doing

2643
01:39:33,199 --> 01:39:34,560
the second thing is that ultimately

2644
01:39:34,560 --> 01:39:37,199
developers really want to have

2645
01:39:37,199 --> 01:39:39,280
they want to get to that end state of

2646
01:39:39,280 --> 01:39:42,320
doing the thing that oauth is protecting

2647
01:39:42,320 --> 01:39:46,560
and we saw that well antonio sanso and i

2648
01:39:46,560 --> 01:39:48,560
saw that when we were uh putting our

2649
01:39:48,560 --> 01:39:50,719
book together originally a few uh is a

2650
01:39:50,719 --> 01:39:52,159
few years ago now

2651
01:39:52,159 --> 01:39:54,560
one uh we went out of our way to make

2652
01:39:54,560 --> 01:39:56,560
sure all of our examples were not

2653
01:39:56,560 --> 01:39:58,719
provider specific we were not talking

2654
01:39:58,719 --> 01:40:00,880
about google or facebook or github or

2655
01:40:00,880 --> 01:40:02,800
anything like that

2656
01:40:02,800 --> 01:40:06,080
the first review that we got back in

2657
01:40:06,080 --> 01:40:07,440
uh during

2658
01:40:07,440 --> 01:40:10,400
uh during the um like the copy review

2659
01:40:10,400 --> 01:40:12,320
phase with our publisher

2660
01:40:12,320 --> 01:40:14,960
somebody said this is useless it doesn't

2661
01:40:14,960 --> 01:40:17,280
tell me how to connect to github

2662
01:40:17,280 --> 01:40:18,960
so you need to throw out all of the

2663
01:40:18,960 --> 01:40:21,280
examples and write how do i connect

2664
01:40:21,280 --> 01:40:23,119
write a client to connect to github that

2665
01:40:23,119 --> 01:40:27,199
would be a useful book this is garbage

2666
01:40:31,199 --> 01:40:33,440
no no they they it actually had nothing

2667
01:40:33,440 --> 01:40:35,760
to do with the specific specifics of

2668
01:40:35,760 --> 01:40:37,679
that they were mad that we were that all

2669
01:40:37,679 --> 01:40:39,520
of our examples were not pointing to

2670
01:40:39,520 --> 01:40:42,480
github.com specifically

2671
01:40:42,480 --> 01:40:45,119
right it actually had nothing to do with

2672
01:40:45,119 --> 01:40:47,760
like hands-on implementation that the

2673
01:40:47,760 --> 01:40:49,520
quirks of things like that totally a

2674
01:40:49,520 --> 01:40:51,520
different thing and um and vittorio

2675
01:40:51,520 --> 01:40:53,920
covered that um

2676
01:40:53,920 --> 01:40:55,920
but the the point of this here though is

2677
01:40:55,920 --> 01:40:58,960
that uh is that the end users of

2678
01:40:58,960 --> 01:41:00,960
libraries of this developers

2679
01:41:00,960 --> 01:41:02,560
ultimately want to just go and do the

2680
01:41:02,560 --> 01:41:04,960
thing and so

2681
01:41:04,960 --> 01:41:06,560
in my view

2682
01:41:06,560 --> 01:41:09,440
this good general purpose library uh

2683
01:41:09,440 --> 01:41:11,440
suite that you're describing

2684
01:41:11,440 --> 01:41:13,760
the actual end users of that would be

2685
01:41:13,760 --> 01:41:16,080
people who are more sdk developers than

2686
01:41:16,080 --> 01:41:17,440
anything

2687
01:41:17,440 --> 01:41:19,040
right this is the stuff we would want to

2688
01:41:19,040 --> 01:41:20,560
be included

2689
01:41:20,560 --> 01:41:23,040
in a package that speaks a protocol

2690
01:41:23,040 --> 01:41:24,719
and that is a very different type of

2691
01:41:24,719 --> 01:41:26,880
thing to architect for

2692
01:41:26,880 --> 01:41:31,080
okay thank you mike

2693
01:41:33,280 --> 01:41:35,199
we have a long list of people waiting so

2694
01:41:35,199 --> 01:41:37,600
i want to kind of allow them to give

2695
01:41:37,600 --> 01:41:39,600
them a chance to to save something right

2696
01:41:39,600 --> 01:41:41,119
okay

2697
01:41:41,119 --> 01:41:44,000
as a practical matter um

2698
01:41:44,000 --> 01:41:45,679
for instance in the connect world

2699
01:41:45,679 --> 01:41:48,560
because we have a certification program

2700
01:41:48,560 --> 01:41:50,960
then we can host a list of certified

2701
01:41:50,960 --> 01:41:53,679
implementations which perhaps joseph

2702
01:41:53,679 --> 01:41:56,480
will speak to when he hits the queue

2703
01:41:56,480 --> 01:42:00,480
and so we have a quality bar

2704
01:42:00,480 --> 01:42:03,600
as danielle pointed out there is no

2705
01:42:03,600 --> 01:42:05,760
quality bar for

2706
01:42:05,760 --> 01:42:08,159
oauth implementations

2707
01:42:08,159 --> 01:42:09,360
and

2708
01:42:09,360 --> 01:42:11,199
but we could list quality

2709
01:42:11,199 --> 01:42:12,960
implementations

2710
01:42:12,960 --> 01:42:15,679
i do note that a prominent member of our

2711
01:42:15,679 --> 01:42:18,000
community aaron pirecki

2712
01:42:18,000 --> 01:42:20,440
out of the goodness of his heart hosts

2713
01:42:20,440 --> 01:42:22,080
oauth.net

2714
01:42:22,080 --> 01:42:24,560
which among other things has oauth.net

2715
01:42:24,560 --> 01:42:26,159
slash code

2716
01:42:26,159 --> 01:42:28,239
with a whole bunch of implementations on

2717
01:42:28,239 --> 01:42:29,280
it

2718
01:42:29,280 --> 01:42:30,159
and

2719
01:42:30,159 --> 01:42:32,719
i'll just ask aaron to speak to that and

2720
01:42:32,719 --> 01:42:33,600
what

2721
01:42:33,600 --> 01:42:35,760
is already happening for the community

2722
01:42:35,760 --> 01:42:36,960
thank you

2723
01:42:36,960 --> 01:42:39,920
thanks mike hunt

2724
01:42:40,159 --> 01:42:42,400
yes this is santiago from rodriguez um i

2725
01:42:42,400 --> 01:42:44,080
just want to make three short points

2726
01:42:44,080 --> 01:42:45,600
first one appreciate this this

2727
01:42:45,600 --> 01:42:47,119
discussion here taking place i think

2728
01:42:47,119 --> 01:42:49,840
it's not so usual for any working group

2729
01:42:49,840 --> 01:42:52,000
second point is i think uh issues raised

2730
01:42:52,000 --> 01:42:53,040
here are

2731
01:42:53,040 --> 01:42:55,199
kind of generic to some other itf groups

2732
01:42:55,199 --> 01:42:56,719
as well right so it's about a very

2733
01:42:56,719 --> 01:42:59,119
general thing about an rfc being out of

2734
01:42:59,119 --> 01:43:01,040
context when you google it so this might

2735
01:43:01,040 --> 01:43:03,119
be something like a sidebar referencing

2736
01:43:03,119 --> 01:43:05,199
libraries or whatever kind of stuff

2737
01:43:05,199 --> 01:43:06,960
maybe that's versus one

2738
01:43:06,960 --> 01:43:09,360
idea and thirdpoint is basically adding

2739
01:43:09,360 --> 01:43:11,679
to some of your examples uh basically so

2740
01:43:11,679 --> 01:43:13,840
i think um there is one more point it

2741
01:43:13,840 --> 01:43:16,400
was discussed that um os libraries might

2742
01:43:16,400 --> 01:43:19,679
be included in sdks yes probably

2743
01:43:19,679 --> 01:43:21,520
point is it's already right now to a

2744
01:43:21,520 --> 01:43:23,119
certain extent so typically if you deal

2745
01:43:23,119 --> 01:43:25,360
with some google or facebook or

2746
01:43:25,360 --> 01:43:27,840
something there will already be oros

2747
01:43:27,840 --> 01:43:30,159
functionality within the sdk

2748
01:43:30,159 --> 01:43:32,239
whereas for some less known providers

2749
01:43:32,239 --> 01:43:33,760
you will need to use some general

2750
01:43:33,760 --> 01:43:35,760
purpose for us library and this is

2751
01:43:35,760 --> 01:43:37,360
actually also a practical problem in my

2752
01:43:37,360 --> 01:43:40,080
opinion because not that you need to do

2753
01:43:40,080 --> 01:43:43,040
all alls with different libraries

2754
01:43:43,040 --> 01:43:44,960
um it also makes the handling less

2755
01:43:44,960 --> 01:43:46,320
generic in a way and there is for

2756
01:43:46,320 --> 01:43:48,080
instance security problems i mean most

2757
01:43:48,080 --> 01:43:49,920
of the security problems seem to relate

2758
01:43:49,920 --> 01:43:50,639
to

2759
01:43:50,639 --> 01:43:52,639
cross-site scripting and so on but for

2760
01:43:52,639 --> 01:43:53,840
instance there's also problem of

2761
01:43:53,840 --> 01:43:55,840
maintaining os credentials on the server

2762
01:43:55,840 --> 01:43:58,159
for instance which gets much more

2763
01:43:58,159 --> 01:44:00,239
problematic if you have different ways

2764
01:44:00,239 --> 01:44:02,400
of you know how libraries read the

2765
01:44:02,400 --> 01:44:05,040
secrets and so on

2766
01:44:05,040 --> 01:44:06,880
and also there is stuff like you know

2767
01:44:06,880 --> 01:44:08,239
what you what what do we do about

2768
01:44:08,239 --> 01:44:10,080
refreshing tokens and this kind of stuff

2769
01:44:10,080 --> 01:44:11,679
yeah so it's operational stuff you need

2770
01:44:11,679 --> 01:44:13,840
to do logging that kind of stuff that

2771
01:44:13,840 --> 01:44:16,239
gets also quite difficult when you have

2772
01:44:16,239 --> 01:44:18,239
um you know multiple libraries you need

2773
01:44:18,239 --> 01:44:20,480
to support so maybe it would be even

2774
01:44:20,480 --> 01:44:24,080
nice if sdk developers would think about

2775
01:44:24,080 --> 01:44:25,920
offering a way besides what they have

2776
01:44:25,920 --> 01:44:27,920
included by themselves you know to

2777
01:44:27,920 --> 01:44:29,920
probably get a token from a third-party

2778
01:44:29,920 --> 01:44:31,360
library included so there is some

2779
01:44:31,360 --> 01:44:34,639
interoperability thank you i'll ask the

2780
01:44:34,639 --> 01:44:36,400
rest of people in the queue to be a

2781
01:44:36,400 --> 01:44:37,360
little bit

2782
01:44:37,360 --> 01:44:38,239
quick

2783
01:44:38,239 --> 01:44:40,480
so to allow everybody to get into a

2784
01:44:40,480 --> 01:44:43,600
market peter peter castleman microsoft

2785
01:44:43,600 --> 01:44:46,639
um so i think a couple of things um as

2786
01:44:46,639 --> 01:44:48,719
we've been looking at implementations

2787
01:44:48,719 --> 01:44:50,560
one of the challenges that we see is

2788
01:44:50,560 --> 01:44:52,080
that there's a lot of mistakes being

2789
01:44:52,080 --> 01:44:53,520
made again and again in terms of

2790
01:44:53,520 --> 01:44:55,600
implementation to mike's point around

2791
01:44:55,600 --> 01:44:57,760
the quality bar i think anything that we

2792
01:44:57,760 --> 01:45:00,560
can do in terms of defining a target

2793
01:45:00,560 --> 01:45:02,880
and a set of acceptance criteria or test

2794
01:45:02,880 --> 01:45:04,000
cases

2795
01:45:04,000 --> 01:45:06,159
and implementations whether we put

2796
01:45:06,159 --> 01:45:08,000
certifications next to that that's a

2797
01:45:08,000 --> 01:45:10,320
separate discussion but very supportive

2798
01:45:10,320 --> 01:45:12,320
of that idea of helping to

2799
01:45:12,320 --> 01:45:14,800
just improve the security profile by

2800
01:45:14,800 --> 01:45:17,119
having at least some standard test cases

2801
01:45:17,119 --> 01:45:20,400
and a profile to aim for

2802
01:45:20,400 --> 01:45:23,440
thank you peter um

2803
01:45:23,440 --> 01:45:26,239
i think joseph

2804
01:45:28,880 --> 01:45:32,480
joseph can you hear us

2805
01:45:32,560 --> 01:45:35,520
sorry i don't think the prompts pop up

2806
01:45:35,520 --> 01:45:37,760
um yeah so i mean i agree very strongly

2807
01:45:37,760 --> 01:45:39,280
with everything daniel has said and i

2808
01:45:39,280 --> 01:45:42,800
could talk about this for a long time um

2809
01:45:42,800 --> 01:45:45,199
there's some weird stuff out there um

2810
01:45:45,199 --> 01:45:46,880
i've seen vendor documentation that

2811
01:45:46,880 --> 01:45:48,639
really strongly encourages people to

2812
01:45:48,639 --> 01:45:51,199
just generate one pixie challenge and

2813
01:45:51,199 --> 01:45:54,239
code verifier and to use that always

2814
01:45:54,239 --> 01:45:56,960
um i've done a lot of work in open

2815
01:45:56,960 --> 01:45:58,880
banking i'm sorry i forgot to say my

2816
01:45:58,880 --> 01:46:01,760
affiliation i'm either ortholite or open

2817
01:46:01,760 --> 01:46:04,239
id foundation or both

2818
01:46:04,239 --> 01:46:05,760
um

2819
01:46:05,760 --> 01:46:07,520
yeah even in open banking a highly

2820
01:46:07,520 --> 01:46:10,320
regulated industry where there's quite a

2821
01:46:10,320 --> 01:46:12,480
regulation that applies to the clients

2822
01:46:12,480 --> 01:46:14,880
um securities like eight or nine on the

2823
01:46:14,880 --> 01:46:16,320
list when people are implementing

2824
01:46:16,320 --> 01:46:19,199
clients and they just don't get to it

2825
01:46:19,199 --> 01:46:20,639
some of the checks just don't get put

2826
01:46:20,639 --> 01:46:22,400
there we've seen that across multiple

2827
01:46:22,400 --> 01:46:24,719
ecosystems

2828
01:46:24,719 --> 01:46:27,280
um

2829
01:46:27,280 --> 01:46:29,360
i mean i think that the profiles and

2830
01:46:29,360 --> 01:46:31,679
insisting on metadata absolutely makes

2831
01:46:31,679 --> 01:46:34,560
things a lot easier um fappy insists on

2832
01:46:34,560 --> 01:46:35,840
metadata and that's made such a

2833
01:46:35,840 --> 01:46:38,560
difference to everything

2834
01:46:38,560 --> 01:46:40,560
um as you know i'm heavily

2835
01:46:40,560 --> 01:46:41,760
some people know i'm heavily involved

2836
01:46:41,760 --> 01:46:43,360
with the open id

2837
01:46:43,360 --> 01:46:46,719
conformance program um

2838
01:46:46,719 --> 01:46:48,719
that's a great program but getting a

2839
01:46:48,719 --> 01:46:49,920
library through that program is

2840
01:46:49,920 --> 01:46:51,920
definitely not a non-zero effort it does

2841
01:46:51,920 --> 01:46:54,080
require some determination from the the

2842
01:46:54,080 --> 01:46:56,000
developer

2843
01:46:56,000 --> 01:46:58,159
so it's not just about providing the

2844
01:46:58,159 --> 01:47:00,719
tooling there's more of a problem

2845
01:47:00,719 --> 01:47:01,840
here

2846
01:47:01,840 --> 01:47:03,280
um

2847
01:47:03,280 --> 01:47:04,880
and i think as a few people made the

2848
01:47:04,880 --> 01:47:06,880
point about these sdks

2849
01:47:06,880 --> 01:47:08,560
yeah a lot of the earthquakes do get

2850
01:47:08,560 --> 01:47:10,800
incorporated into the sdks um there are

2851
01:47:10,800 --> 01:47:13,119
an awful lot of sdks that have very poor

2852
01:47:13,119 --> 01:47:15,600
oauth client implementations in them

2853
01:47:15,600 --> 01:47:17,679
um and that they have filtered through

2854
01:47:17,679 --> 01:47:18,960
that's one of the reasons for the

2855
01:47:18,960 --> 01:47:22,400
horrendous stats of our apps that daniel

2856
01:47:22,400 --> 01:47:23,679
showed is that

2857
01:47:23,679 --> 01:47:25,520
there's a lot of apps that are all using

2858
01:47:25,520 --> 01:47:27,840
the same sdk that's very bad

2859
01:47:27,840 --> 01:47:30,080
um so i mean i think one of the ways

2860
01:47:30,080 --> 01:47:31,760
forward here has to be a kind of

2861
01:47:31,760 --> 01:47:33,119
collaboration

2862
01:47:33,119 --> 01:47:35,440
collaborative effort of all the

2863
01:47:35,440 --> 01:47:37,679
authorization server vendors where we

2864
01:47:37,679 --> 01:47:40,159
agree that this is a direction to go and

2865
01:47:40,159 --> 01:47:42,239
we each individually put effort into

2866
01:47:42,239 --> 01:47:44,639
tackling one piece of the problem and

2867
01:47:44,639 --> 01:47:46,960
making sure all our documentation

2868
01:47:46,960 --> 01:47:49,280
says consistent things that look go here

2869
01:47:49,280 --> 01:47:51,360
don't implement protocol from first

2870
01:47:51,360 --> 01:47:53,360
principles because everybody's

2871
01:47:53,360 --> 01:47:55,600
documentation like daniel says it goes

2872
01:47:55,600 --> 01:47:57,280
right back to first principles and often

2873
01:47:57,280 --> 01:47:58,880
doesn't mention

2874
01:47:58,880 --> 01:48:01,199
libraries even for the places that there

2875
01:48:01,199 --> 01:48:04,400
are actually good libraries

2876
01:48:05,600 --> 01:48:09,600
thanks joseph thank you dave

2877
01:48:10,320 --> 01:48:12,639
yeah hi um so yeah

2878
01:48:12,639 --> 01:48:14,480
just to agree with what joseph's saying

2879
01:48:14,480 --> 01:48:16,159
what daniel saying i disagree with what

2880
01:48:16,159 --> 01:48:18,800
justin was saying um about kind of

2881
01:48:18,800 --> 01:48:20,239
there's too much you know different

2882
01:48:20,239 --> 01:48:22,400
context and this needs to you know and

2883
01:48:22,400 --> 01:48:24,800
this is just for maybe sdk authors yeah

2884
01:48:24,800 --> 01:48:26,719
definitely the big providers who make

2885
01:48:26,719 --> 01:48:28,560
sdks if they can use these libraries

2886
01:48:28,560 --> 01:48:30,320
that's excellent but i actually think

2887
01:48:30,320 --> 01:48:32,239
this the normal thing should be like

2888
01:48:32,239 --> 01:48:34,320
daniel said you don't re-implement an

2889
01:48:34,320 --> 01:48:36,400
http library hopefully you don't

2890
01:48:36,400 --> 01:48:39,600
re-implement a jot library um if the if

2891
01:48:39,600 --> 01:48:41,679
the scope is restricted enough you

2892
01:48:41,679 --> 01:48:43,679
should be able to just use an or2

2893
01:48:43,679 --> 01:48:45,920
library so i i've yet to hear a

2894
01:48:45,920 --> 01:48:47,600
convincing argument why why that's not

2895
01:48:47,600 --> 01:48:50,159
the case and uh sorry yeah um my

2896
01:48:50,159 --> 01:48:51,760
affiliation is money hub and with our

2897
01:48:51,760 --> 01:48:54,320
own uh our own sdk yeah we just use

2898
01:48:54,320 --> 01:48:56,960
phillips library and it's it's very very

2899
01:48:56,960 --> 01:48:59,199
easy so yeah very strongly in support of

2900
01:48:59,199 --> 01:49:01,040
daniel's suggestions

2901
01:49:01,040 --> 01:49:04,400
thanks dave hey aaron

2902
01:49:04,400 --> 01:49:07,119
hold on iron one second daniel do you

2903
01:49:07,119 --> 01:49:08,560
want to say something just really quick

2904
01:49:08,560 --> 01:49:12,159
uh adding to that this question here um

2905
01:49:12,159 --> 01:49:14,320
maybe there's an eighty percent use case

2906
01:49:14,320 --> 01:49:15,119
so

2907
01:49:15,119 --> 01:49:17,520
maybe twenty percent you can't uh cover

2908
01:49:17,520 --> 01:49:19,280
with the library and maybe that's fine

2909
01:49:19,280 --> 01:49:21,040
but i feel that there's like an eighty

2910
01:49:21,040 --> 01:49:22,719
percent use case here

2911
01:49:22,719 --> 01:49:25,360
uh where we need to think about okay

2912
01:49:25,360 --> 01:49:26,239
aaron

2913
01:49:26,239 --> 01:49:28,639
i'll give you a chance uh one second

2914
01:49:28,639 --> 01:49:31,040
just in

2915
01:49:31,040 --> 01:49:33,280
yeah um i just wanted to thanks for

2916
01:49:33,280 --> 01:49:34,480
teaming me up for that mike i just

2917
01:49:34,480 --> 01:49:36,400
wanted to say i'm happy to do

2918
01:49:36,400 --> 01:49:38,159
um to put some more work into the

2919
01:49:38,159 --> 01:49:40,560
oauth.net site

2920
01:49:40,560 --> 01:49:42,960
code in particular to

2921
01:49:42,960 --> 01:49:43,840
better

2922
01:49:43,840 --> 01:49:45,280
highlight

2923
01:49:45,280 --> 01:49:47,199
the libraries that are there

2924
01:49:47,199 --> 01:49:49,199
right now it's pretty much a list that

2925
01:49:49,199 --> 01:49:50,080
i've

2926
01:49:50,080 --> 01:49:51,760
chopped up and

2927
01:49:51,760 --> 01:49:54,560
encouraged people to contribute to but i

2928
01:49:54,560 --> 01:49:56,400
haven't done a lot of i would say

2929
01:49:56,400 --> 01:49:58,400
maintenance myself on in terms of like

2930
01:49:58,400 --> 01:49:59,920
auditing existing

2931
01:49:59,920 --> 01:50:02,239
existing code um and i do think one of

2932
01:50:02,239 --> 01:50:05,360
the challenges of that is that there

2933
01:50:05,360 --> 01:50:07,360
well you know there's

2934
01:50:07,360 --> 01:50:10,159
uh a lot of options available for any

2935
01:50:10,159 --> 01:50:11,679
particular oauth implementation so it's

2936
01:50:11,679 --> 01:50:14,000
hard to sort of say here's

2937
01:50:14,000 --> 01:50:16,159
the stuff that you have to do and here's

2938
01:50:16,159 --> 01:50:17,440
when you're done

2939
01:50:17,440 --> 01:50:18,320
um

2940
01:50:18,320 --> 01:50:19,520
so

2941
01:50:19,520 --> 01:50:21,520
i definitely a conformance test would

2942
01:50:21,520 --> 01:50:24,239
help with that but that is a whole a

2943
01:50:24,239 --> 01:50:26,320
whole topic by itself but yeah i just

2944
01:50:26,320 --> 01:50:27,760
want to say i'm happy to

2945
01:50:27,760 --> 01:50:29,760
to take suggestions or

2946
01:50:29,760 --> 01:50:31,040
do some more work on maintaining that

2947
01:50:31,040 --> 01:50:32,080
list

2948
01:50:32,080 --> 01:50:32,960
awesome

2949
01:50:32,960 --> 01:50:34,560
thanks say aaron

2950
01:50:34,560 --> 01:50:37,040
justin super quick um just i wanted to

2951
01:50:37,040 --> 01:50:39,360
appreciate that uh dave came on to

2952
01:50:39,360 --> 01:50:41,119
disagree with me and then proceeded to

2953
01:50:41,119 --> 01:50:42,639
basically make all of the same points

2954
01:50:42,639 --> 01:50:45,199
that i just made um because really what

2955
01:50:45,199 --> 01:50:46,480
i was talking about is that when we're

2956
01:50:46,480 --> 01:50:48,400
talking about these generic things

2957
01:50:48,400 --> 01:50:51,280
the target of this is not the same as

2958
01:50:51,280 --> 01:50:52,400
you know like

2959
01:50:52,400 --> 01:50:53,199
uh

2960
01:50:53,199 --> 01:50:56,719
like a lot of uh general libraries

2961
01:50:56,719 --> 01:50:58,639
you're building this to be embedded into

2962
01:50:58,639 --> 01:51:00,880
something and that is a different kind

2963
01:51:00,880 --> 01:51:02,000
of

2964
01:51:02,000 --> 01:51:04,560
architecture and set of considerations

2965
01:51:04,560 --> 01:51:06,880
that you are evaluating for and that

2966
01:51:06,880 --> 01:51:08,880
you're designing for and that was really

2967
01:51:08,880 --> 01:51:10,560
the main point because

2968
01:51:10,560 --> 01:51:14,719
um by building into an sdk like even

2969
01:51:14,719 --> 01:51:16,080
it doesn't have to be like a large

2970
01:51:16,080 --> 01:51:17,760
provider like hey here's google here's

2971
01:51:17,760 --> 01:51:20,239
how to talk to google it's oh there's an

2972
01:51:20,239 --> 01:51:22,320
api that i need to talk to and i'm going

2973
01:51:22,320 --> 01:51:24,320
to build a module in my code that talks

2974
01:51:24,320 --> 01:51:25,679
to that api

2975
01:51:25,679 --> 01:51:27,440
give me something that does

2976
01:51:27,440 --> 01:51:29,599
the oauthy stuff yes i would love to

2977
01:51:29,599 --> 01:51:31,760
have lots of those things across lots of

2978
01:51:31,760 --> 01:51:33,520
different platforms available i think

2979
01:51:33,520 --> 01:51:35,760
that would be very very very useful

2980
01:51:35,760 --> 01:51:37,760
i just don't think it's quite as

2981
01:51:37,760 --> 01:51:39,599
uh universal

2982
01:51:39,599 --> 01:51:42,239
as we would like it to be and

2983
01:51:42,239 --> 01:51:43,920
that's the point i was trying to make

2984
01:51:43,920 --> 01:51:46,560
not that this is a bad idea thank you

2985
01:51:46,560 --> 01:51:49,920
sorry vittorio we we need to move on um

2986
01:51:49,920 --> 01:51:52,239
daniel do you wanna just wrap it up and

2987
01:51:52,239 --> 01:51:54,400
then we wanna switch the other one okay

2988
01:51:54,400 --> 01:51:55,520
yeah uh

2989
01:51:55,520 --> 01:51:57,440
to wrap it up i

2990
01:51:57,440 --> 01:52:01,119
do have one more slide um

2991
01:52:01,199 --> 01:52:03,360
so thank you all

2992
01:52:03,360 --> 01:52:05,440
uh i think this was a great discussion

2993
01:52:05,440 --> 01:52:07,599
and i'm looking forward to uh

2994
01:52:07,599 --> 01:52:09,520
following up when i'm eating this um

2995
01:52:09,520 --> 01:52:11,440
there's a threat already so it would be

2996
01:52:11,440 --> 01:52:13,119
great if you could put your ideas into

2997
01:52:13,119 --> 01:52:16,800
an email yeah so that we can yeah

2998
01:52:16,800 --> 01:52:19,040
definitely thank you all for the great

2999
01:52:19,040 --> 01:52:20,080
feedback

3000
01:52:20,080 --> 01:52:22,320
great discussion let's continue that and

3001
01:52:22,320 --> 01:52:24,719
see what could be done in in this area

3002
01:52:24,719 --> 01:52:26,639
let's switch to the last topic here very

3003
01:52:26,639 --> 01:52:29,599
quickly please stay seated yeah how to

3004
01:52:29,599 --> 01:52:31,599
oh yeah the plane has reached the

3005
01:52:31,599 --> 01:52:33,599
position

3006
01:52:33,599 --> 01:52:34,560
i'm gonna

3007
01:52:34,560 --> 01:52:37,760
boot you off first

3008
01:52:37,920 --> 01:52:39,760
and

3009
01:52:39,760 --> 01:52:41,920
uh

3010
01:52:42,080 --> 01:52:45,840
which one is this

3011
01:52:46,080 --> 01:52:49,199
one yes there you go sure yeah so this

3012
01:52:49,199 --> 01:52:50,320
is uh

3013
01:52:50,320 --> 01:52:54,840
essentially a repetition from um

3014
01:52:56,480 --> 01:52:59,280
control uh so yesterday we had uh

3015
01:52:59,280 --> 01:53:00,560
uh

3016
01:53:00,560 --> 01:53:02,639
yesterday in the depart yesterday we had

3017
01:53:02,639 --> 01:53:04,639
a discussion um in the info meetings

3018
01:53:04,639 --> 01:53:06,400
here at the itf meeting

3019
01:53:06,400 --> 01:53:08,000
uh regarding the role of pixie and the

3020
01:53:08,000 --> 01:53:10,840
security vcp

3021
01:53:10,840 --> 01:53:12,800
um so

3022
01:53:12,800 --> 01:53:15,040
yesterday i created this slide so i'm

3023
01:53:15,040 --> 01:53:18,320
going to go over this really quickly um

3024
01:53:18,320 --> 01:53:21,280
pixi is in your security bcp

3025
01:53:21,280 --> 01:53:25,119
and i recommend or must in many cases

3026
01:53:25,119 --> 01:53:27,599
and the reason is that pixi is a really

3027
01:53:27,599 --> 01:53:29,440
really good tool um

3028
01:53:29,440 --> 01:53:31,599
pixi provides csf protection so it can

3029
01:53:31,599 --> 01:53:33,440
be used instead of state

3030
01:53:33,440 --> 01:53:34,400
um

3031
01:53:34,400 --> 01:53:35,280
to

3032
01:53:35,280 --> 01:53:38,159
protect clients against csf

3033
01:53:38,159 --> 01:53:41,280
pxe is also a protection layer for

3034
01:53:41,280 --> 01:53:43,360
authorization codes and that's the main

3035
01:53:43,360 --> 01:53:44,800
reason um

3036
01:53:44,800 --> 01:53:46,639
we made it a

3037
01:53:46,639 --> 01:53:50,000
must in many cases in the security bcp

3038
01:53:50,000 --> 01:53:51,199
with the

3039
01:53:51,199 --> 01:53:54,400
alternative of using the nonce in some

3040
01:53:54,400 --> 01:53:58,400
cases if you're using operating connect

3041
01:53:58,400 --> 01:53:59,760
there are essentially

3042
01:53:59,760 --> 01:54:01,599
two different attacks that we're talking

3043
01:54:01,599 --> 01:54:04,639
about here the first one is an attacker

3044
01:54:04,639 --> 01:54:07,360
sees an authorization response

3045
01:54:07,360 --> 01:54:08,880
sees the code that is in the

3046
01:54:08,880 --> 01:54:11,599
authorization response takes the code

3047
01:54:11,599 --> 01:54:13,199
goes to the token endpoint of the

3048
01:54:13,199 --> 01:54:15,119
authorization server sends the code and

3049
01:54:15,119 --> 01:54:16,880
gets back the access token so the

3050
01:54:16,880 --> 01:54:19,360
attacker ends up with an access token

3051
01:54:19,360 --> 01:54:20,960
um

3052
01:54:20,960 --> 01:54:23,520
this is uh bad um but the attacker can

3053
01:54:23,520 --> 01:54:25,440
only do that if we are talking about a

3054
01:54:25,440 --> 01:54:26,719
public client

3055
01:54:26,719 --> 01:54:28,080
because with a public client there's no

3056
01:54:28,080 --> 01:54:29,520
client authentication at the token

3057
01:54:29,520 --> 01:54:31,040
endpoint

3058
01:54:31,040 --> 01:54:33,920
okay so for confidential clients uh for

3059
01:54:33,920 --> 01:54:35,920
a long time the belief was that if an

3060
01:54:35,920 --> 01:54:37,760
attacker steals the access the

3061
01:54:37,760 --> 01:54:39,920
authorization code

3062
01:54:39,920 --> 01:54:41,760
that the attacker cannot do anything

3063
01:54:41,760 --> 01:54:42,719
with that

3064
01:54:42,719 --> 01:54:45,199
however the attacker can

3065
01:54:45,199 --> 01:54:46,239
do

3066
01:54:46,239 --> 01:54:49,440
what i call authorization code injection

3067
01:54:49,440 --> 01:54:51,040
that is the attacker can take the

3068
01:54:51,040 --> 01:54:52,480
authorization code

3069
01:54:52,480 --> 01:54:54,400
and on his own device start a new

3070
01:54:54,400 --> 01:54:57,040
session with the same client

3071
01:54:57,040 --> 01:54:59,280
do the authorization request response

3072
01:54:59,280 --> 01:55:02,159
and in the response exchange the

3073
01:55:02,159 --> 01:55:04,960
original code with the stolen code so

3074
01:55:04,960 --> 01:55:08,000
essentially providing the stolen code to

3075
01:55:08,000 --> 01:55:09,599
the same client

3076
01:55:09,599 --> 01:55:12,320
the client will then use that

3077
01:55:12,320 --> 01:55:14,960
uh code on the attacker's behalf at the

3078
01:55:14,960 --> 01:55:16,320
token endpoint providing the

3079
01:55:16,320 --> 01:55:19,679
authorization client authentication

3080
01:55:19,679 --> 01:55:21,679
and the attacker will therefore have

3081
01:55:21,679 --> 01:55:24,080
control over session with the original

3082
01:55:24,080 --> 01:55:26,080
client in which the code was used that

3083
01:55:26,080 --> 01:55:28,000
was stolen from

3084
01:55:28,000 --> 01:55:31,360
another device from a victim

3085
01:55:31,360 --> 01:55:33,119
the attacker only has to do that when

3086
01:55:33,119 --> 01:55:34,639
we're talking about confidential clients

3087
01:55:34,639 --> 01:55:36,000
because for public clients there's an

3088
01:55:36,000 --> 01:55:37,520
easy attack

3089
01:55:37,520 --> 01:55:39,280
now the thing is

3090
01:55:39,280 --> 01:55:40,960
if you have confidential clients and you

3091
01:55:40,960 --> 01:55:44,560
do this code injection attack both

3092
01:55:44,560 --> 01:55:47,679
pixie and nons prevent this attack

3093
01:55:47,679 --> 01:55:49,679
if you have a public client no client

3094
01:55:49,679 --> 01:55:51,599
authentication and the attacker can go

3095
01:55:51,599 --> 01:55:53,760
directly to the token endpoint

3096
01:55:53,760 --> 01:55:56,320
then um only pixie can prevent this

3097
01:55:56,320 --> 01:55:57,920
attack because the attacker would have

3098
01:55:57,920 --> 01:56:00,400
to write a code verifier which you

3099
01:56:00,400 --> 01:56:02,320
cannot know

3100
01:56:02,320 --> 01:56:06,239
therefore we created a nice table

3101
01:56:06,239 --> 01:56:08,159
or aaron created a nice table thank you

3102
01:56:08,159 --> 01:56:10,080
aaron

3103
01:56:10,080 --> 01:56:11,119
showing

3104
01:56:11,119 --> 01:56:13,040
what you see here

3105
01:56:13,040 --> 01:56:14,880
not going through all the details here

3106
01:56:14,880 --> 01:56:18,080
um the thing is uh csf can be parented

3107
01:56:18,080 --> 01:56:20,800
by both pixie and nonce that's fine

3108
01:56:20,800 --> 01:56:23,199
um but if you have a public client that

3109
01:56:23,199 --> 01:56:24,239
use a

3110
01:56:24,239 --> 01:56:26,239
response type code

3111
01:56:26,239 --> 01:56:29,440
then only pixie can provide protection

3112
01:56:29,440 --> 01:56:31,920
if the code is stolen

3113
01:56:31,920 --> 01:56:34,560
therefore we say in the security bcp

3114
01:56:34,560 --> 01:56:36,719
that for public clients

3115
01:56:36,719 --> 01:56:37,840
pxe

3116
01:56:37,840 --> 01:56:39,920
is a must because it's the only layer of

3117
01:56:39,920 --> 01:56:42,000
defense that we have in case the code

3118
01:56:42,000 --> 01:56:44,080
gets though

3119
01:56:44,080 --> 01:56:46,960
okay um and yesterday we agreed that we

3120
01:56:46,960 --> 01:56:49,760
keep this in the um so this is the

3121
01:56:49,760 --> 01:56:50,880
wording not going through all the

3122
01:56:50,880 --> 01:56:52,000
details

3123
01:56:52,000 --> 01:56:54,840
but that we essentially want to keep

3124
01:56:54,840 --> 01:56:57,440
this uh wording that we have in this

3125
01:56:57,440 --> 01:56:59,520
security bcp that's not the slide next

3126
01:56:59,520 --> 01:57:00,480
one

3127
01:57:00,480 --> 01:57:02,718
um

3128
01:57:03,119 --> 01:57:04,719
hello

3129
01:57:04,719 --> 01:57:06,719
it's this little slide set

3130
01:57:06,719 --> 01:57:10,080
i think maybe

3131
01:57:15,920 --> 01:57:17,840
so we agreed to essentially keep the

3132
01:57:17,840 --> 01:57:19,760
wording uh what we'll be doing is we are

3133
01:57:19,760 --> 01:57:21,599
going to explain what i just explained

3134
01:57:21,599 --> 01:57:23,840
and what what is on the slides better in

3135
01:57:23,840 --> 01:57:25,920
the security vcp because it took us a

3136
01:57:25,920 --> 01:57:28,320
while to figure out why we uh why we

3137
01:57:28,320 --> 01:57:29,280
wrote

3138
01:57:29,280 --> 01:57:31,040
this in the security recipe that's not a

3139
01:57:31,040 --> 01:57:32,400
good sign

3140
01:57:32,400 --> 01:57:33,280
um

3141
01:57:33,280 --> 01:57:34,719
yeah

3142
01:57:34,719 --> 01:57:36,080
and

3143
01:57:36,080 --> 01:57:38,480
also some changes on the wording

3144
01:57:38,480 --> 01:57:39,760
in the details

3145
01:57:39,760 --> 01:57:41,520
uh because the attack is not described

3146
01:57:41,520 --> 01:57:44,239
at the right place mike mike has a

3147
01:57:44,239 --> 01:57:47,119
comment on this

3148
01:57:47,280 --> 01:57:50,159
mike jones microsoft first thank you for

3149
01:57:50,159 --> 01:57:51,920
putting this together yesterday into

3150
01:57:51,920 --> 01:57:52,880
aaron

3151
01:57:52,880 --> 01:57:55,679
that was a good discussion

3152
01:57:55,679 --> 01:57:57,840
i believe there are cases where you're

3153
01:57:57,840 --> 01:58:00,239
correct that

3154
01:58:00,239 --> 01:58:03,040
code injection is not prevented

3155
01:58:03,040 --> 01:58:05,199
i have thought about some of the openid

3156
01:58:05,199 --> 01:58:07,280
connect flows such as

3157
01:58:07,280 --> 01:58:10,400
id token token

3158
01:58:10,400 --> 01:58:12,639
where you send a nonce

3159
01:58:12,639 --> 01:58:14,639
you get back an id token in the front

3160
01:58:14,639 --> 01:58:16,480
channel you get back the code in the

3161
01:58:16,480 --> 01:58:18,239
front channel

3162
01:58:18,239 --> 01:58:21,199
and the token and you use are you yeah

3163
01:58:21,199 --> 01:58:23,440
they said id token token so it's also

3164
01:58:23,440 --> 01:58:26,239
token and also id token code

3165
01:58:26,239 --> 01:58:28,560
yes i said the wrong thing

3166
01:58:28,560 --> 01:58:29,520
um

3167
01:58:29,520 --> 01:58:31,440
if you're using id token code you get

3168
01:58:31,440 --> 01:58:33,280
the id token

3169
01:58:33,280 --> 01:58:35,520
with the non-senate to check you have a

3170
01:58:35,520 --> 01:58:37,360
c hash in it

3171
01:58:37,360 --> 01:58:41,119
to check and so the attack is prevented

3172
01:58:41,119 --> 01:58:43,040
not for the code flow and i agree with

3173
01:58:43,040 --> 01:58:43,760
you

3174
01:58:43,760 --> 01:58:45,520
and i'll just repeat for the minutes

3175
01:58:45,520 --> 01:58:47,760
here i am volunteering

3176
01:58:47,760 --> 01:58:49,599
to work with daniel and the other

3177
01:58:49,599 --> 01:58:51,840
authors on

3178
01:58:51,840 --> 01:58:53,840
language trying to help developers

3179
01:58:53,840 --> 01:58:56,000
understand exactly when

3180
01:58:56,000 --> 01:58:58,639
this is essential and when there's other

3181
01:58:58,639 --> 01:59:00,560
mitigations i'm not

3182
01:59:00,560 --> 01:59:03,440
changing the basic conclusion

3183
01:59:03,440 --> 01:59:06,000
uh but like much of this it's subtle and

3184
01:59:06,000 --> 01:59:07,840
it depends upon

3185
01:59:07,840 --> 01:59:09,679
when you're getting the cryptographic

3186
01:59:09,679 --> 01:59:11,840
hashes of the things

3187
01:59:11,840 --> 01:59:13,599
what and when you're not

3188
01:59:13,599 --> 01:59:15,679
very briefly to this

3189
01:59:15,679 --> 01:59:17,280
in this case the code is already leaked

3190
01:59:17,280 --> 01:59:19,520
to the attacker because we assume the

3191
01:59:19,520 --> 01:59:20,800
authorization response leaks to the

3192
01:59:20,800 --> 01:59:22,639
attacker attacker has the code and can

3193
01:59:22,639 --> 01:59:24,560
just use it in the token endpoint so c

3194
01:59:24,560 --> 01:59:26,159
hash doesn't have

3195
01:59:26,159 --> 01:59:28,159
the id token

3196
01:59:28,159 --> 01:59:29,840
so nobody would accept that id token

3197
01:59:29,840 --> 01:59:32,080
right but the attacker can just use the

3198
01:59:32,080 --> 01:59:34,960
code and go to the token endpoint so

3199
01:59:34,960 --> 01:59:38,239
that doesn't help in this case

3200
01:59:39,040 --> 01:59:41,360
you check the id token against the nonce

3201
01:59:41,360 --> 01:59:43,119
you check the

3202
01:59:43,119 --> 01:59:46,239
authorization code against the c hash

3203
01:59:46,239 --> 01:59:48,400
and so it's impossible to inject the

3204
01:59:48,400 --> 01:59:49,520
code

3205
01:59:49,520 --> 01:59:51,360
are you guys trying to find out whether

3206
01:59:51,360 --> 01:59:53,520
there are some cases and open id that

3207
01:59:53,520 --> 01:59:55,360
would also need to be

3208
01:59:55,360 --> 01:59:57,760
sort of like additionally uh improved

3209
01:59:57,760 --> 01:59:59,360
whether we whether we can narrow down

3210
01:59:59,360 --> 02:00:01,360
the cases where the the pixie would be a

3211
02:00:01,360 --> 02:00:03,199
must but i don't think this is one

3212
02:00:03,199 --> 02:00:05,280
because there's no client involved

3213
02:00:05,280 --> 02:00:07,840
after the attacker anyway

3214
02:00:07,840 --> 02:00:09,760
we will work on this my point is there's

3215
02:00:09,760 --> 02:00:14,800
still details to work out okay yeah earn

3216
02:00:14,800 --> 02:00:17,040
just give aaron and i'm gonna close the

3217
02:00:17,040 --> 02:00:19,760
mic after that i just i just wanted to

3218
02:00:19,760 --> 02:00:21,920
say that uh to mike's point there are

3219
02:00:21,920 --> 02:00:23,760
two different attacks being talked about

3220
02:00:23,760 --> 02:00:26,960
here so the code injection

3221
02:00:26,960 --> 02:00:29,440
is the attack that is prevented by the c

3222
02:00:29,440 --> 02:00:30,320
hash

3223
02:00:30,320 --> 02:00:31,440
but

3224
02:00:31,440 --> 02:00:33,119
stealing a code and using at the token

3225
02:00:33,119 --> 02:00:35,280
endpoint is not prevented by the c hash

3226
02:00:35,280 --> 02:00:37,520
because that's i think that the client

3227
02:00:37,520 --> 02:00:39,920
is using to protect itself

3228
02:00:39,920 --> 02:00:41,679
two different attacks and that's why i

3229
02:00:41,679 --> 02:00:44,159
was trying to make that table which

3230
02:00:44,159 --> 02:00:46,000
it got more complicated than i wanted it

3231
02:00:46,000 --> 02:00:48,000
to be and maybe not be clear enough yet

3232
02:00:48,000 --> 02:00:50,320
so we need to work on that still

3233
02:00:50,320 --> 02:00:52,400
awesome thank you aaron

3234
02:00:52,400 --> 02:00:54,880
um daniel thank you for two great

3235
02:00:54,880 --> 02:00:56,719
presentations do you wanna wrap up for

3236
02:00:56,719 --> 02:00:59,760
the good okay wrap that up so it was

3237
02:00:59,760 --> 02:01:02,639
nice to be here okay everybody

3238
02:01:02,639 --> 02:01:05,440
indeed it was great seeing you all and

3239
02:01:05,440 --> 02:01:07,199
hopefully we'll see you in

3240
02:01:07,199 --> 02:01:08,880
philadelphia

3241
02:01:08,880 --> 02:01:10,000
thank you all

3242
02:01:10,000 --> 02:01:12,320
bye

3243
02:01:17,280 --> 02:01:20,280
great

