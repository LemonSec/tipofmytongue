1
00:00:05,040 --> 00:00:08,560
but it just

2
00:00:09,760 --> 00:00:13,200
it feels also good to be able to

3
00:00:13,200 --> 00:00:17,880
badger people for fun and profit

4
00:00:18,000 --> 00:00:20,480
part of it

5
00:00:23,439 --> 00:00:25,039
all right

6
00:00:25,039 --> 00:00:27,840
it's ten o'clock

7
00:00:28,400 --> 00:00:32,000
i guess we should get started so um

8
00:00:32,000 --> 00:00:33,920
if somebody could volunteer to take

9
00:00:33,920 --> 00:00:34,880
notes

10
00:00:34,880 --> 00:00:37,200
um and i'm looking at the remote

11
00:00:37,200 --> 00:00:39,040
participants who

12
00:00:39,040 --> 00:00:41,519
who um

13
00:00:41,680 --> 00:00:43,520
there are 17 of you

14
00:00:43,520 --> 00:00:46,320
well 16 i guess

15
00:00:46,320 --> 00:00:47,280
so

16
00:00:47,280 --> 00:00:49,200
if anybody could

17
00:00:49,200 --> 00:00:51,840
step up and volunteer to take notes that

18
00:00:51,840 --> 00:00:55,039
be very very helpful

19
00:00:55,039 --> 00:00:58,800
there is a note-taking tool in

20
00:00:58,800 --> 00:01:00,480
right there in

21
00:01:00,480 --> 00:01:02,800
meet echo it's very very easy to log in

22
00:01:02,800 --> 00:01:05,280
and use

23
00:01:06,400 --> 00:01:09,400
anyone

24
00:01:12,640 --> 00:01:14,400
thank you christopher

25
00:01:14,400 --> 00:01:16,479
perfect uh

26
00:01:16,479 --> 00:01:18,320
christopher nacio has volunteered to do

27
00:01:18,320 --> 00:01:20,720
that all right so jaron i think we can

28
00:01:20,720 --> 00:01:22,960
sort of just get uh

29
00:01:22,960 --> 00:01:26,080
get the show on the road

30
00:01:26,080 --> 00:01:28,479
at that point so um

31
00:01:28,479 --> 00:01:29,920
this is the

32
00:01:29,920 --> 00:01:31,759
session

33
00:01:31,759 --> 00:01:33,200
um

34
00:01:33,200 --> 00:01:35,040
let's get to the note well

35
00:01:35,040 --> 00:01:37,280
um

36
00:01:37,680 --> 00:01:42,320
no the note well well as the saying is

37
00:01:43,280 --> 00:01:44,399
and uh

38
00:01:44,399 --> 00:01:47,119
your own this is

39
00:01:47,119 --> 00:01:48,960
usually when you tell people to sign up

40
00:01:48,960 --> 00:01:51,360
to meet echo

41
00:01:51,360 --> 00:01:54,560
yeah this is where you tell local people

42
00:01:54,560 --> 00:01:56,960
of which there are very few to use the

43
00:01:56,960 --> 00:01:58,560
local tool

44
00:01:58,560 --> 00:02:01,759
the local tool the in-person tool

45
00:02:01,759 --> 00:02:03,600
and then remote people already know what

46
00:02:03,600 --> 00:02:06,880
to do because they're here

47
00:02:07,439 --> 00:02:09,119
exactly

48
00:02:09,119 --> 00:02:10,800
all right

49
00:02:10,800 --> 00:02:13,440
uh well we have a note taker

50
00:02:13,440 --> 00:02:16,480
uh and uh

51
00:02:16,480 --> 00:02:19,840
hoping we get good notes in hedgehog and

52
00:02:19,840 --> 00:02:23,360
i think with that the agenda um

53
00:02:23,360 --> 00:02:25,599
so we're basically gonna have

54
00:02:25,599 --> 00:02:28,800
um justin up here talking and he's also

55
00:02:28,800 --> 00:02:31,280
gonna attempt a live demo from from you

56
00:02:31,280 --> 00:02:32,080
know

57
00:02:32,080 --> 00:02:34,480
tempting the gods of the demo gods to

58
00:02:34,480 --> 00:02:36,080
see if we can actually do a live demo

59
00:02:36,080 --> 00:02:37,519
based on the hackathon which is going to

60
00:02:37,519 --> 00:02:41,120
be fun but um

61
00:02:41,120 --> 00:02:43,280
we have a lot of stuff to go through so

62
00:02:43,280 --> 00:02:44,560
um

63
00:02:44,560 --> 00:02:47,040
i think we'll just

64
00:02:47,040 --> 00:02:49,920
invite you up and i'll switch the slides

65
00:02:49,920 --> 00:02:52,720
over to protocol update

66
00:02:52,720 --> 00:02:54,800
and uh

67
00:02:54,800 --> 00:02:57,519
let's see here

68
00:02:58,640 --> 00:03:01,120
embedding editor editors update there

69
00:03:01,120 --> 00:03:04,200
you go

70
00:03:08,959 --> 00:03:12,200
too advanced

71
00:03:21,120 --> 00:03:22,640
there's this stupid open id thing it

72
00:03:22,640 --> 00:03:24,640
makes me do every time come on

73
00:03:24,640 --> 00:03:26,400
yeah all right

74
00:03:26,400 --> 00:03:28,640
i wonder who came up with that stuff

75
00:03:28,640 --> 00:03:30,720
yeah that stuff stopped all right yeah

76
00:03:30,720 --> 00:03:33,200
so i have requested

77
00:03:33,200 --> 00:03:35,120
have you had control

78
00:03:35,120 --> 00:03:38,000
how do i see that i think it's the thing

79
00:03:38,000 --> 00:03:38,879
that's

80
00:03:38,879 --> 00:03:41,280
lit up

81
00:03:42,720 --> 00:03:45,840
i don't see any anyone asking me for oh

82
00:03:45,840 --> 00:03:47,599
right there no

83
00:03:47,599 --> 00:03:50,080
no where's that list go to the list oh

84
00:03:50,080 --> 00:03:52,799
there we go here we go

85
00:03:52,799 --> 00:03:55,040
gotcha and that way i should have slides

86
00:03:55,040 --> 00:03:58,400
magic there we go there we go

87
00:03:58,400 --> 00:04:01,280
awesome

88
00:04:01,280 --> 00:04:02,879
all right so

89
00:04:02,879 --> 00:04:04,080
good morning everybody welcome to the

90
00:04:04,080 --> 00:04:06,480
last day of ietf 113.

91
00:04:06,480 --> 00:04:08,799
uh i am going to be presenting all of

92
00:04:08,799 --> 00:04:11,439
the presentations today uh because

93
00:04:11,439 --> 00:04:13,280
fabion was unable to travel here in

94
00:04:13,280 --> 00:04:15,760
person he's online though i saw and

95
00:04:15,760 --> 00:04:17,680
aaron was unfortunately unable to make

96
00:04:17,680 --> 00:04:19,600
it this morning he is also online and

97
00:04:19,600 --> 00:04:22,320
we'll be jumping in from time to time

98
00:04:22,320 --> 00:04:23,199
so

99
00:04:23,199 --> 00:04:24,320
um

100
00:04:24,320 --> 00:04:27,680
first off we are going to go through the

101
00:04:27,680 --> 00:04:30,400
protocol update i'm going to go through

102
00:04:30,400 --> 00:04:33,680
the changes to the core draft since iatf

103
00:04:33,680 --> 00:04:35,840
113 that's uh from version 8 to version

104
00:04:35,840 --> 00:04:36,960
9.

105
00:04:36,960 --> 00:04:39,199
and including all of the editorial and

106
00:04:39,199 --> 00:04:40,800
functional changes because there's

107
00:04:40,800 --> 00:04:42,880
there's been a fair bit

108
00:04:42,880 --> 00:04:44,960
um and i want to

109
00:04:44,960 --> 00:04:47,840
take a take a pause to say that we have

110
00:04:47,840 --> 00:04:50,479
not been focusing on the rf dr on the rs

111
00:04:50,479 --> 00:04:53,280
draft uh during this time frame

112
00:04:53,280 --> 00:04:55,840
um the reason for that is that there's

113
00:04:55,840 --> 00:04:57,520
still been enough

114
00:04:57,520 --> 00:04:59,759
sort of editorial and structural stuff

115
00:04:59,759 --> 00:05:01,280
that has been happening in the core

116
00:05:01,280 --> 00:05:04,160
draft that the editors didn't want to

117
00:05:04,160 --> 00:05:06,160
split our focus and split our attention

118
00:05:06,160 --> 00:05:07,600
too much right now

119
00:05:07,600 --> 00:05:08,960
because they do

120
00:05:08,960 --> 00:05:10,639
the two drafts are intended to work

121
00:05:10,639 --> 00:05:13,759
fairly orthogonally with each other so

122
00:05:13,759 --> 00:05:16,560
um the idea being we can get the core

123
00:05:16,560 --> 00:05:17,440
draft

124
00:05:17,440 --> 00:05:18,720
uh

125
00:05:18,720 --> 00:05:21,039
even more solid and then start focusing

126
00:05:21,039 --> 00:05:22,840
on the rs draft in the

127
00:05:22,840 --> 00:05:26,000
future all right

128
00:05:26,400 --> 00:05:28,240
so if you download the slides all of

129
00:05:28,240 --> 00:05:30,320
these links are live uh you can go and

130
00:05:30,320 --> 00:05:32,560
look at the actual diffs between all of

131
00:05:32,560 --> 00:05:34,080
uh all of the different drafts if you're

132
00:05:34,080 --> 00:05:36,840
curious about the actual text that we

133
00:05:36,840 --> 00:05:39,759
changed um

134
00:05:39,759 --> 00:05:43,600
we did uh 37 pull requests on the core

135
00:05:43,600 --> 00:05:47,199
draft and uh and two on the rs draft

136
00:05:47,199 --> 00:05:48,560
although we did not publish a new

137
00:05:48,560 --> 00:05:50,400
version of the rs draft in this time

138
00:05:50,400 --> 00:05:53,360
frame and again if you go click on those

139
00:05:53,360 --> 00:05:55,680
uh live links um

140
00:05:55,680 --> 00:05:57,600
that'll actually pull up a list in

141
00:05:57,600 --> 00:05:59,520
github of everything that's changed

142
00:05:59,520 --> 00:06:01,199
during that time so that you can see the

143
00:06:01,199 --> 00:06:02,960
actual changes with all the commentary

144
00:06:02,960 --> 00:06:05,199
and everything like that

145
00:06:05,199 --> 00:06:07,280
all right

146
00:06:07,280 --> 00:06:10,639
we managed to close uh 40 issues in the

147
00:06:10,639 --> 00:06:12,080
uh in the core

148
00:06:12,080 --> 00:06:15,280
github tracker um in this time frame

149
00:06:15,280 --> 00:06:16,720
again you can go look at that list

150
00:06:16,720 --> 00:06:18,639
yourself see all of the things that

151
00:06:18,639 --> 00:06:21,039
we've managed to close almost all of

152
00:06:21,039 --> 00:06:23,039
those are closed

153
00:06:23,039 --> 00:06:25,199
with actions that are tied to one of

154
00:06:25,199 --> 00:06:28,560
these pull requests a few of them

155
00:06:28,560 --> 00:06:31,199
they were either

156
00:06:31,280 --> 00:06:34,240
duplicates of other p of other issues

157
00:06:34,240 --> 00:06:36,960
and we tied the conversations together

158
00:06:36,960 --> 00:06:40,960
or things like that or we went and um

159
00:06:40,960 --> 00:06:43,120
read through them and

160
00:06:43,120 --> 00:06:45,360
decided and and brought to the group the

161
00:06:45,360 --> 00:06:47,120
fact that you know this this has kind of

162
00:06:47,120 --> 00:06:49,840
been overrun by events or there's

163
00:06:49,840 --> 00:06:51,280
there wasn't consensus to make the

164
00:06:51,280 --> 00:06:53,919
changes requested or something like that

165
00:06:53,919 --> 00:06:55,599
but for the most part the issues that

166
00:06:55,599 --> 00:06:56,960
we've been closing

167
00:06:56,960 --> 00:06:59,360
uh we are actually making

168
00:06:59,360 --> 00:07:01,520
uh changes into the text to make it more

169
00:07:01,520 --> 00:07:03,680
consistent to make it more readable

170
00:07:03,680 --> 00:07:07,120
and to make it more robust overall

171
00:07:07,120 --> 00:07:09,280
and no issues closed on the on the rs

172
00:07:09,280 --> 00:07:11,679
draft

173
00:07:12,800 --> 00:07:16,160
so on the editorial side

174
00:07:16,160 --> 00:07:17,440
things fell into three different

175
00:07:17,440 --> 00:07:20,160
categories um

176
00:07:20,160 --> 00:07:22,240
first and uh this is this is a big one

177
00:07:22,240 --> 00:07:24,400
for a draft this big

178
00:07:24,400 --> 00:07:27,120
um i forget our page count right now but

179
00:07:27,120 --> 00:07:28,319
uh

180
00:07:28,319 --> 00:07:31,840
it's it's a very extensive draft um

181
00:07:31,840 --> 00:07:34,319
text consistency is going to be a really

182
00:07:34,319 --> 00:07:36,800
really big thing because sections get

183
00:07:36,800 --> 00:07:37,599
written

184
00:07:37,599 --> 00:07:39,360
at different times by different authors

185
00:07:39,360 --> 00:07:41,440
by different people and stuff like that

186
00:07:41,440 --> 00:07:42,880
so there have been a number of things

187
00:07:42,880 --> 00:07:45,280
over the last six months so uh you know

188
00:07:45,280 --> 00:07:48,479
the last ietf period and this period

189
00:07:48,479 --> 00:07:50,000
where we've realized that we haven't

190
00:07:50,000 --> 00:07:52,160
been using terms correctly or somebody

191
00:07:52,160 --> 00:07:53,919
asks like why do you call it this here

192
00:07:53,919 --> 00:07:55,919
and that there and stuff like that and

193
00:07:55,919 --> 00:07:57,520
most of the time there's actually not a

194
00:07:57,520 --> 00:07:59,280
good reason

195
00:07:59,280 --> 00:08:01,680
and so there's been a lot of cleanup on

196
00:08:01,680 --> 00:08:04,720
that so two big issues for that

197
00:08:04,720 --> 00:08:08,000
ones i want to point out is

198
00:08:08,000 --> 00:08:10,479
excuse me use of the term end user

199
00:08:10,479 --> 00:08:12,879
and use of

200
00:08:12,879 --> 00:08:14,960
oh i'd have to click through to remember

201
00:08:14,960 --> 00:08:16,800
what the other one was anyway again

202
00:08:16,800 --> 00:08:18,560
these are all live links uh thanks to

203
00:08:18,560 --> 00:08:20,960
aaron's editing on all the slides these

204
00:08:20,960 --> 00:08:22,080
all actually

205
00:08:22,080 --> 00:08:25,680
link into uh github uh the actual github

206
00:08:25,680 --> 00:08:26,720
issues

207
00:08:26,720 --> 00:08:29,840
uh and and pull requests

208
00:08:29,840 --> 00:08:31,199
the um

209
00:08:31,199 --> 00:08:32,399
as you can see there's a lot of

210
00:08:32,399 --> 00:08:35,279
editorial stuff that went in here

211
00:08:35,279 --> 00:08:37,360
these are typos these are formatting

212
00:08:37,360 --> 00:08:39,200
these are you know little bits and

213
00:08:39,200 --> 00:08:42,479
pieces um and then finally a lot of what

214
00:08:42,479 --> 00:08:45,120
we just put under cleanup like it's not

215
00:08:45,120 --> 00:08:47,680
even really changing editorial text it's

216
00:08:47,680 --> 00:08:51,200
shuffling headers and things like that

217
00:08:51,200 --> 00:08:54,000
functional changes uh we actually had a

218
00:08:54,000 --> 00:08:56,640
few um a few good ones and i'm gonna go

219
00:08:56,640 --> 00:08:58,399
into a couple of these categories in

220
00:08:58,399 --> 00:09:01,360
more detail as part of this presentation

221
00:09:01,360 --> 00:09:03,600
um actually if you guys don't mind uh

222
00:09:03,600 --> 00:09:05,120
would you guys mind if i took my mask

223
00:09:05,120 --> 00:09:06,560
off while i'm talking because trying to

224
00:09:06,560 --> 00:09:10,959
project in a mask all right thank you

225
00:09:11,440 --> 00:09:13,360
thank you trying to project in that mask

226
00:09:13,360 --> 00:09:14,480
is a little

227
00:09:14,480 --> 00:09:16,880
a little difficult um

228
00:09:16,880 --> 00:09:20,480
so uh we have a very extensive security

229
00:09:20,480 --> 00:09:22,399
consideration section now

230
00:09:22,399 --> 00:09:23,519
um

231
00:09:23,519 --> 00:09:26,560
it's obviously not complete because

232
00:09:26,560 --> 00:09:28,240
you know it's a security protocol

233
00:09:28,240 --> 00:09:29,839
there's going to be a lot of security

234
00:09:29,839 --> 00:09:31,600
considerations

235
00:09:31,600 --> 00:09:32,959
but we added

236
00:09:32,959 --> 00:09:34,880
sections on a few new attacks

237
00:09:34,880 --> 00:09:37,519
or newly identified attacks and

238
00:09:37,519 --> 00:09:38,720
either the mitigations or the

239
00:09:38,720 --> 00:09:41,040
descriptions about them uh are now in

240
00:09:41,040 --> 00:09:42,880
the security considerations one of the

241
00:09:42,880 --> 00:09:44,160
things that we did with the security

242
00:09:44,160 --> 00:09:46,800
considerations in this uh in this round

243
00:09:46,800 --> 00:09:48,160
and tied a little bit into the last

244
00:09:48,160 --> 00:09:50,880
revision as well was we tried to

245
00:09:50,880 --> 00:09:53,279
make sure to have forward links from the

246
00:09:53,279 --> 00:09:55,120
um

247
00:09:55,120 --> 00:09:56,800
from the actual normative text that was

248
00:09:56,800 --> 00:09:58,720
making the requirements and forward link

249
00:09:58,720 --> 00:10:00,240
into the security considerations that

250
00:10:00,240 --> 00:10:02,640
explains why you would want to do that

251
00:10:02,640 --> 00:10:04,720
or the additional things you might want

252
00:10:04,720 --> 00:10:05,519
to

253
00:10:05,519 --> 00:10:08,320
think about and and talk about

254
00:10:08,320 --> 00:10:10,079
uh we made some changes to the subject

255
00:10:10,079 --> 00:10:12,240
identifier format

256
00:10:12,240 --> 00:10:13,600
sect that's tracking work in the sec

257
00:10:13,600 --> 00:10:17,440
event group that is uh wrapping up um

258
00:10:17,440 --> 00:10:19,600
hopefully real soon right now

259
00:10:19,600 --> 00:10:20,720
um

260
00:10:20,720 --> 00:10:23,200
i did a bit of work on keys and

261
00:10:23,200 --> 00:10:24,320
discovery

262
00:10:24,320 --> 00:10:27,120
some changes in how uh

263
00:10:27,120 --> 00:10:29,279
in the interaction section

264
00:10:29,279 --> 00:10:31,120
and i'll be talking about the changes in

265
00:10:31,120 --> 00:10:33,920
the user code uh mode specifically and

266
00:10:33,920 --> 00:10:35,200
those of you that were in the oauth

267
00:10:35,200 --> 00:10:37,519
working group this will um

268
00:10:37,519 --> 00:10:38,720
you know this

269
00:10:38,720 --> 00:10:39,920
this this ties into some of the

270
00:10:39,920 --> 00:10:41,040
discussions that have been happening

271
00:10:41,040 --> 00:10:42,399
there as well

272
00:10:42,399 --> 00:10:45,200
um we finally have error codes

273
00:10:45,200 --> 00:10:48,399
thanks to thanks to aaron um

274
00:10:48,399 --> 00:10:50,720
and i i totally take the blame for us

275
00:10:50,720 --> 00:10:53,120
not having uh uh error codes up until

276
00:10:53,120 --> 00:10:56,160
now because i got into the lazy habit of

277
00:10:56,160 --> 00:10:58,240
saying it returns an error and linked to

278
00:10:58,240 --> 00:11:00,399
the to be defined error section

279
00:11:00,399 --> 00:11:02,480
um so aaron went through and created the

280
00:11:02,480 --> 00:11:04,560
error code section and

281
00:11:04,560 --> 00:11:06,399
um sort of established the pattern of

282
00:11:06,399 --> 00:11:09,440
what these will look like and um

283
00:11:09,440 --> 00:11:10,720
we're still

284
00:11:10,720 --> 00:11:12,720
still kind of backfilling some of the

285
00:11:12,720 --> 00:11:15,200
places in the spec that need to define

286
00:11:15,200 --> 00:11:17,680
specific errors but i think we've got a

287
00:11:17,680 --> 00:11:19,839
lot of them done right now

288
00:11:19,839 --> 00:11:21,600
and we had a couple of different changes

289
00:11:21,600 --> 00:11:24,320
to uh to how token management works and

290
00:11:24,320 --> 00:11:25,519
i think we're going to go over those in

291
00:11:25,519 --> 00:11:26,720
a bit

292
00:11:26,720 --> 00:11:28,880
all right

293
00:11:28,880 --> 00:11:30,880
oh here we here we go that was the other

294
00:11:30,880 --> 00:11:32,079
change

295
00:11:32,079 --> 00:11:34,320
i forgot i for aaron was sorry aaron was

296
00:11:34,320 --> 00:11:36,000
supposed to do these slides

297
00:11:36,000 --> 00:11:39,120
so my bad um

298
00:11:39,120 --> 00:11:42,160
so on the editorial side uh we were more

299
00:11:42,160 --> 00:11:43,680
deliberate and consistent about the use

300
00:11:43,680 --> 00:11:46,079
of uri versus url anybody who's tried to

301
00:11:46,079 --> 00:11:48,000
get something through the iesg knows

302
00:11:48,000 --> 00:11:49,760
that this we would have been raked over

303
00:11:49,760 --> 00:11:52,560
the goals for this anyway um so good to

304
00:11:52,560 --> 00:11:54,079
at least try to be consistent and

305
00:11:54,079 --> 00:11:56,560
correct about that now turns out most of

306
00:11:56,560 --> 00:11:59,040
the places inside gennapp are don't

307
00:11:59,040 --> 00:12:02,079
really need a url so almost everything

308
00:12:02,079 --> 00:12:03,920
is a uri

309
00:12:03,920 --> 00:12:07,760
inside the spec space

310
00:12:07,839 --> 00:12:10,240
and the use of end user without the dash

311
00:12:10,240 --> 00:12:12,880
as opposed to end user with a dash and

312
00:12:12,880 --> 00:12:13,839
uh

313
00:12:13,839 --> 00:12:16,480
one one of the big ones for readability

314
00:12:16,480 --> 00:12:17,440
um

315
00:12:17,440 --> 00:12:20,639
that that i think is actually uh

316
00:12:20,639 --> 00:12:22,160
you know it's one of those improvements

317
00:12:22,160 --> 00:12:24,399
that you don't notice until you're

318
00:12:24,399 --> 00:12:26,160
reading text that doesn't have it

319
00:12:26,160 --> 00:12:28,320
is the parameter lists are all listed

320
00:12:28,320 --> 00:12:30,320
now in such a way that things are

321
00:12:30,320 --> 00:12:32,560
actually uh consistently listed out in

322
00:12:32,560 --> 00:12:34,959
terms of what the parameter is its

323
00:12:34,959 --> 00:12:36,320
description and whether or not it's

324
00:12:36,320 --> 00:12:38,959
required

325
00:12:38,959 --> 00:12:40,160
all right

326
00:12:40,160 --> 00:12:42,959
so user code interactions

327
00:12:42,959 --> 00:12:43,839
um

328
00:12:43,839 --> 00:12:46,800
previously we had this kind of

329
00:12:46,800 --> 00:12:49,120
wishy-washy text about the user code

330
00:12:49,120 --> 00:12:51,120
interaction mode that said that you

331
00:12:51,120 --> 00:12:53,760
return a user code for a user to type in

332
00:12:53,760 --> 00:12:56,240
and then a uri which

333
00:12:56,240 --> 00:12:58,480
shouldn't vary but it was kind of

334
00:12:58,480 --> 00:12:59,839
allowed to

335
00:12:59,839 --> 00:13:02,399
and if it did then maybe you should do

336
00:13:02,399 --> 00:13:03,920
something about it but the client wasn't

337
00:13:03,920 --> 00:13:05,760
actually required to do anything with

338
00:13:05,760 --> 00:13:07,279
that because the client was supposed to

339
00:13:07,279 --> 00:13:08,720
be able to

340
00:13:08,720 --> 00:13:10,959
count on that being static

341
00:13:10,959 --> 00:13:13,360
and all this kind of stuff

342
00:13:13,360 --> 00:13:15,680
we've realized for a while that that was

343
00:13:15,680 --> 00:13:18,839
that that was kind of messy and um we

344
00:13:18,839 --> 00:13:20,639
finally uh

345
00:13:20,639 --> 00:13:22,560
finally came up with the idea of

346
00:13:22,560 --> 00:13:25,760
actually splitting the user code mode

347
00:13:25,760 --> 00:13:28,000
into uh into two separate interaction

348
00:13:28,000 --> 00:13:30,959
modes just very simply there is now user

349
00:13:30,959 --> 00:13:34,399
code which has no uri and user code uri

350
00:13:34,399 --> 00:13:36,720
which does have a uri

351
00:13:36,720 --> 00:13:39,120
the expectations of the client instance

352
00:13:39,120 --> 00:13:41,360
are different in each of these cases

353
00:13:41,360 --> 00:13:43,920
right so um for

354
00:13:43,920 --> 00:13:45,600
user code

355
00:13:45,600 --> 00:13:47,440
that's the art that's the slides

356
00:13:47,440 --> 00:13:50,000
so for user code you just get back the

357
00:13:50,000 --> 00:13:52,639
code and the uri where you type that in

358
00:13:52,639 --> 00:13:55,120
is assumed to be static and known out of

359
00:13:55,120 --> 00:13:56,000
band

360
00:13:56,000 --> 00:13:58,000
so this is for stuff that can't actually

361
00:13:58,000 --> 00:14:00,160
display anything maybe it's like

362
00:14:00,160 --> 00:14:03,760
talking or something like that um

363
00:14:03,760 --> 00:14:07,040
so and displaying any kind of uri that

364
00:14:07,040 --> 00:14:09,360
might be dynamic is just too big of a

365
00:14:09,360 --> 00:14:11,680
lift uh for this kind of thing

366
00:14:11,680 --> 00:14:13,680
um so for that we have just the plain

367
00:14:13,680 --> 00:14:14,720
user code

368
00:14:14,720 --> 00:14:16,399
user code uri

369
00:14:16,399 --> 00:14:17,600
you have

370
00:14:17,600 --> 00:14:19,040
a user code

371
00:14:19,040 --> 00:14:22,480
and a uri to go type it into now that

372
00:14:22,480 --> 00:14:24,959
uri could vary but it is not intended to

373
00:14:24,959 --> 00:14:26,880
be a secret uri

374
00:14:26,880 --> 00:14:29,839
it is however intended to be variable

375
00:14:29,839 --> 00:14:31,199
such that

376
00:14:31,199 --> 00:14:32,480
when you are

377
00:14:32,480 --> 00:14:35,440
uh you know say talking to a new as or

378
00:14:35,440 --> 00:14:37,519
talking to a multi-tenanted system or

379
00:14:37,519 --> 00:14:39,600
something like that you might get back a

380
00:14:39,600 --> 00:14:41,519
different uri for a different tenancy

381
00:14:41,519 --> 00:14:42,880
depending on what it is you're

382
00:14:42,880 --> 00:14:44,399
connecting and what it is you're asking

383
00:14:44,399 --> 00:14:46,800
for and things like that a client asking

384
00:14:46,800 --> 00:14:48,880
for this mode is making the declaration

385
00:14:48,880 --> 00:14:51,360
that i can display not only or i can

386
00:14:51,360 --> 00:14:54,000
communicate not only the user code

387
00:14:54,000 --> 00:14:56,320
itself but this short uri

388
00:14:56,320 --> 00:14:58,560
and the expectations from the as are the

389
00:14:58,560 --> 00:15:00,639
are that these are both supposed to be

390
00:15:00,639 --> 00:15:02,720
short enough and simple enough for

391
00:15:02,720 --> 00:15:04,399
somebody to type in

392
00:15:04,399 --> 00:15:07,680
right these are not uh you know

393
00:15:07,680 --> 00:15:10,160
32 character random

394
00:15:10,160 --> 00:15:13,199
things and stuff like that um these are

395
00:15:13,199 --> 00:15:16,160
all meant to be very simple user typable

396
00:15:16,160 --> 00:15:18,560
uh that is the expected and defined ux

397
00:15:18,560 --> 00:15:20,399
for both of these

398
00:15:20,399 --> 00:15:22,480
all right

399
00:15:22,480 --> 00:15:23,920
so the reason for the change is that

400
00:15:23,920 --> 00:15:25,519
things were ambiguous before we think

401
00:15:25,519 --> 00:15:26,959
that this does make it clear even though

402
00:15:26,959 --> 00:15:29,519
it is is adding another

403
00:15:29,519 --> 00:15:32,399
interaction mode to the possible list it

404
00:15:32,399 --> 00:15:35,120
does give you a way to

405
00:15:35,120 --> 00:15:37,839
declare what your capabilities are at a

406
00:15:37,839 --> 00:15:40,079
more fine-grained model and that

407
00:15:40,079 --> 00:15:43,440
fundamentally is um is really key to how

408
00:15:43,440 --> 00:15:45,199
can app manages all of its user

409
00:15:45,199 --> 00:15:46,560
interactions

410
00:15:46,560 --> 00:15:48,639
right the client instance shows up and

411
00:15:48,639 --> 00:15:51,360
says this is what i can do and the as

412
00:15:51,360 --> 00:15:53,199
responds to okay these are the bits that

413
00:15:53,199 --> 00:15:55,279
i support and this is this is what i can

414
00:15:55,279 --> 00:15:57,279
give you so a client instance saying

415
00:15:57,279 --> 00:15:59,360
that it can do both of these i can do

416
00:15:59,360 --> 00:16:02,399
user code or user code uri the as might

417
00:16:02,399 --> 00:16:04,320
give you different codes for both it

418
00:16:04,320 --> 00:16:06,399
might only give you one of the two

419
00:16:06,399 --> 00:16:08,399
because you've said you can do either

420
00:16:08,399 --> 00:16:11,040
and it's gonna let you um it's gonna let

421
00:16:11,040 --> 00:16:12,639
the client pick which one it actually

422
00:16:12,639 --> 00:16:14,320
wants to engage in

423
00:16:14,320 --> 00:16:15,040
right

424
00:16:15,040 --> 00:16:17,600
if the eas supports both

425
00:16:17,600 --> 00:16:19,600
this does raise an interesting question

426
00:16:19,600 --> 00:16:21,759
though the two interesting questions

427
00:16:21,759 --> 00:16:24,320
the first is that user code which was

428
00:16:24,320 --> 00:16:26,079
previously coming back as an object is

429
00:16:26,079 --> 00:16:28,959
now an object with a single sub member

430
00:16:28,959 --> 00:16:30,959
which is always a string

431
00:16:30,959 --> 00:16:32,560
so like we've done in a lot of the rest

432
00:16:32,560 --> 00:16:34,399
of the nap protocol should this be

433
00:16:34,399 --> 00:16:36,959
collapsed up into just a string return

434
00:16:36,959 --> 00:16:38,880
value i think so and it would look

435
00:16:38,880 --> 00:16:40,240
something like that you would just get

436
00:16:40,240 --> 00:16:43,199
user code and just get the string back

437
00:16:43,199 --> 00:16:44,399
we need to make sure that we don't

438
00:16:44,399 --> 00:16:46,160
expect any other

439
00:16:46,160 --> 00:16:48,079
extended parameters inside of that but i

440
00:16:48,079 --> 00:16:50,000
think with the new tighter definitions i

441
00:16:50,000 --> 00:16:51,839
don't think that that's going to happen

442
00:16:51,839 --> 00:16:53,440
uh that would be a sin that would be an

443
00:16:53,440 --> 00:16:56,160
additional syntax change but i um

444
00:16:56,160 --> 00:16:59,440
personally uh i think that that

445
00:16:59,440 --> 00:17:01,360
is a good way to go

446
00:17:01,360 --> 00:17:03,360
this also raises the question and this

447
00:17:03,360 --> 00:17:05,199
is relevant to the a lot of the

448
00:17:05,199 --> 00:17:06,720
discussions we've been having in the

449
00:17:06,720 --> 00:17:08,880
oauth working group recently

450
00:17:08,880 --> 00:17:11,919
does the redirect mode is that actually

451
00:17:11,919 --> 00:17:13,839
a good name for it

452
00:17:13,839 --> 00:17:17,199
um because redirect in ganap doesn't

453
00:17:17,199 --> 00:17:20,079
actually mean redirect it means i can

454
00:17:20,079 --> 00:17:22,880
communicate an arbitrary uri to the end

455
00:17:22,880 --> 00:17:24,160
user

456
00:17:24,160 --> 00:17:26,640
and get them to go there somehow now i

457
00:17:26,640 --> 00:17:28,400
might do a redirect i might launch their

458
00:17:28,400 --> 00:17:30,640
system browser i might display a giant

459
00:17:30,640 --> 00:17:33,679
qr code for them to scan on a secondary

460
00:17:33,679 --> 00:17:36,080
device an apt actually doesn't make an

461
00:17:36,080 --> 00:17:37,919
assumption whether it's a

462
00:17:37,919 --> 00:17:40,000
single device or a multiple device based

463
00:17:40,000 --> 00:17:41,360
on this alone

464
00:17:41,360 --> 00:17:43,600
all of that single and multiple device

465
00:17:43,600 --> 00:17:45,840
stuff that is tied up into the

466
00:17:45,840 --> 00:17:47,760
interaction finish method which is

467
00:17:47,760 --> 00:17:51,360
declared separately from all of this

468
00:17:51,360 --> 00:17:53,760
so with that in mind the editors are

469
00:17:53,760 --> 00:17:54,799
uh

470
00:17:54,799 --> 00:17:58,559
opening the bike shed discussion of

471
00:17:58,559 --> 00:18:00,880
should we rename the redirect mode

472
00:18:00,880 --> 00:18:02,720
because it's not really just redirect it

473
00:18:02,720 --> 00:18:05,600
never actually was just a redirect um in

474
00:18:05,600 --> 00:18:07,039
implementation

475
00:18:07,039 --> 00:18:08,080
um

476
00:18:08,080 --> 00:18:10,559
and as you'll see during the uh

477
00:18:10,559 --> 00:18:13,600
during the hackathon demo the um the

478
00:18:13,600 --> 00:18:16,400
scannable qr code thing uh that aaron

479
00:18:16,400 --> 00:18:18,480
has on his command line client uses the

480
00:18:18,480 --> 00:18:20,160
redirect mode even though there's no

481
00:18:20,160 --> 00:18:21,600
redirection happening and it's on a

482
00:18:21,600 --> 00:18:23,280
secondary device

483
00:18:23,280 --> 00:18:24,880
um so

484
00:18:24,880 --> 00:18:26,960
do we call it arbitrary uri what do we

485
00:18:26,960 --> 00:18:29,360
call it i don't know um

486
00:18:29,360 --> 00:18:31,440
but that is something that uh that we

487
00:18:31,440 --> 00:18:34,000
need to consider

488
00:18:34,000 --> 00:18:35,600
all right

489
00:18:35,600 --> 00:18:37,280
subject information request this is what

490
00:18:37,280 --> 00:18:38,720
fabian did

491
00:18:38,720 --> 00:18:40,160
to align

492
00:18:40,160 --> 00:18:42,480
the uh the subject identifier and

493
00:18:42,480 --> 00:18:44,720
assertions uh with each other more than

494
00:18:44,720 --> 00:18:47,360
anything else uh he realized when doing

495
00:18:47,360 --> 00:18:49,039
work on uh updating the subject

496
00:18:49,039 --> 00:18:50,799
identifier formats

497
00:18:50,799 --> 00:18:52,559
to be in line with the with the latest

498
00:18:52,559 --> 00:18:54,080
sec event draft

499
00:18:54,080 --> 00:18:58,000
that um the way we were asking for

500
00:18:58,000 --> 00:18:59,280
assertions

501
00:18:59,280 --> 00:19:02,240
um and subject identifiers was

502
00:19:02,240 --> 00:19:03,039
it

503
00:19:03,039 --> 00:19:06,640
they didn't match each other um so now

504
00:19:06,640 --> 00:19:10,160
you ask for sub id formats and assertion

505
00:19:10,160 --> 00:19:11,360
formats

506
00:19:11,360 --> 00:19:13,440
and they're both lists of identifier

507
00:19:13,440 --> 00:19:17,120
strings format identifier strings

508
00:19:17,120 --> 00:19:19,200
but more importantly the response now

509
00:19:19,200 --> 00:19:22,400
comes back using a similar structure

510
00:19:22,400 --> 00:19:24,320
so subject identifier formats are

511
00:19:24,320 --> 00:19:27,200
defined by the sec event draft um we are

512
00:19:27,200 --> 00:19:29,520
using pretty much the same kind of

513
00:19:29,520 --> 00:19:30,720
structure

514
00:19:30,720 --> 00:19:33,600
for assertion response

515
00:19:33,600 --> 00:19:35,440
and right now assertions are defined to

516
00:19:35,440 --> 00:19:38,720
be a a single json string

517
00:19:38,720 --> 00:19:41,120
in the value with the format

518
00:19:41,120 --> 00:19:43,280
as the as the indexing key to tell you

519
00:19:43,280 --> 00:19:45,200
how to parse that if there are other

520
00:19:45,200 --> 00:19:47,360
formats that could use other

521
00:19:47,360 --> 00:19:49,840
structures in there um

522
00:19:49,840 --> 00:19:51,280
you know we're open to that we haven't

523
00:19:51,280 --> 00:19:52,799
seen any examples of it yet because the

524
00:19:52,799 --> 00:19:54,559
only ones that have come up so far have

525
00:19:54,559 --> 00:19:56,559
been open id connect id tokens and saml

526
00:19:56,559 --> 00:19:58,480
assertions and both of those would just

527
00:19:58,480 --> 00:20:00,480
get chucked into a json string

528
00:20:00,480 --> 00:20:02,480
so this is what we have right now

529
00:20:02,480 --> 00:20:04,080
we'd like to see this exercise more to

530
00:20:04,080 --> 00:20:05,440
figure out if it needs to be more

531
00:20:05,440 --> 00:20:06,960
flexible

532
00:20:06,960 --> 00:20:09,120
but i do think that this is a big

533
00:20:09,120 --> 00:20:11,520
improvement over the previous method

534
00:20:11,520 --> 00:20:13,280
which allowed you to only do one

535
00:20:13,280 --> 00:20:14,960
assertion of a given type and it was a

536
00:20:14,960 --> 00:20:16,799
different type of indexing and

537
00:20:16,799 --> 00:20:19,280
formatting than what we had before

538
00:20:19,280 --> 00:20:21,600
we also editorially cleaned up a lot of

539
00:20:21,600 --> 00:20:24,400
the uh the text around how these things

540
00:20:24,400 --> 00:20:25,919
align with each other

541
00:20:25,919 --> 00:20:27,039
um

542
00:20:27,039 --> 00:20:29,039
the fact that uh you know the assertions

543
00:20:29,039 --> 00:20:31,200
and the identifiers should be about the

544
00:20:31,200 --> 00:20:32,799
same person but they might use different

545
00:20:32,799 --> 00:20:34,799
identifiers so for example you get back

546
00:20:34,799 --> 00:20:36,320
an id token that has a subject

547
00:20:36,320 --> 00:20:38,720
identifier but you ask first

548
00:20:38,720 --> 00:20:41,039
that has the issuer and subject inside

549
00:20:41,039 --> 00:20:43,520
the id token but the subject identifier

550
00:20:43,520 --> 00:20:45,919
you ask for is an email address

551
00:20:45,919 --> 00:20:48,799
right and uh so those are different

552
00:20:48,799 --> 00:20:50,799
identifiers used for the same person but

553
00:20:50,799 --> 00:20:51,679
it is

554
00:20:51,679 --> 00:20:54,400
um implied by the as as part of this

555
00:20:54,400 --> 00:20:55,840
contract that these are pointing to the

556
00:20:55,840 --> 00:20:57,200
same person

557
00:20:57,200 --> 00:21:00,720
that's part of the request and response

558
00:21:00,720 --> 00:21:02,240
like i mentioned before a whole bunch of

559
00:21:02,240 --> 00:21:04,960
security considerations got added um a

560
00:21:04,960 --> 00:21:06,720
lot of these came from the community so

561
00:21:06,720 --> 00:21:09,600
thank you to um you know florian i know

562
00:21:09,600 --> 00:21:11,039
wrote a couple

563
00:21:11,039 --> 00:21:13,280
uh

564
00:21:14,159 --> 00:21:16,000
i'm i'm really bad at remembering names

565
00:21:16,000 --> 00:21:19,440
i'm sorry a few people wrote these um

566
00:21:19,440 --> 00:21:21,360
but uh

567
00:21:21,360 --> 00:21:23,600
tightening down redirect codes

568
00:21:23,600 --> 00:21:24,880
um

569
00:21:24,880 --> 00:21:26,400
bits on session management the session

570
00:21:26,400 --> 00:21:27,679
management one is actually a little bit

571
00:21:27,679 --> 00:21:29,760
interesting we used to have normative

572
00:21:29,760 --> 00:21:32,159
requirements about session management

573
00:21:32,159 --> 00:21:34,640
which made absolutely no sense in

574
00:21:34,640 --> 00:21:37,520
practice and so we backed off the

575
00:21:37,520 --> 00:21:39,200
normative requirements and turned that

576
00:21:39,200 --> 00:21:41,280
into a more comprehensive security

577
00:21:41,280 --> 00:21:43,280
considerations with advice about what to

578
00:21:43,280 --> 00:21:44,799
look for and how to do it that is going

579
00:21:44,799 --> 00:21:47,039
to depend on the type of client instance

580
00:21:47,039 --> 00:21:50,080
and deployment that you have

581
00:21:50,799 --> 00:21:53,520
there's a really interesting attack

582
00:21:53,520 --> 00:21:54,559
about

583
00:21:54,559 --> 00:21:56,400
how you replay stolen tokens even though

584
00:21:56,400 --> 00:21:59,360
gnapp uses bounce tokens by default uh

585
00:21:59,360 --> 00:22:01,679
there's still an ability to

586
00:22:01,679 --> 00:22:03,440
poke a client to get it to replay a

587
00:22:03,440 --> 00:22:06,000
bound token so this is also relevant for

588
00:22:06,000 --> 00:22:08,159
oauth mtls and oauth depop and things

589
00:22:08,159 --> 00:22:09,120
like that

590
00:22:09,120 --> 00:22:10,159
um

591
00:22:10,159 --> 00:22:11,440
and that's that's actually where the

592
00:22:11,440 --> 00:22:13,280
attack was first discovered and uh

593
00:22:13,280 --> 00:22:15,840
researchers applied it to get out um so

594
00:22:15,840 --> 00:22:18,080
we've got uh discussion on how to

595
00:22:18,080 --> 00:22:19,280
mitigate

596
00:22:19,280 --> 00:22:23,039
that um considerations on uh

597
00:22:23,039 --> 00:22:24,880
self-contained access tokens especially

598
00:22:24,880 --> 00:22:27,280
as it relates to token management inside

599
00:22:27,280 --> 00:22:28,320
of gnab

600
00:22:28,320 --> 00:22:30,640
um so gnap has an explicit token

601
00:22:30,640 --> 00:22:34,240
management uh layer to it um

602
00:22:34,240 --> 00:22:35,840
that is separate from requesting the

603
00:22:35,840 --> 00:22:37,200
grants and

604
00:22:37,200 --> 00:22:40,240
the thing uh you know it's it's like the

605
00:22:40,240 --> 00:22:42,080
little statements that are in the uh

606
00:22:42,080 --> 00:22:44,720
oauth revocation draft about like if you

607
00:22:44,720 --> 00:22:46,240
can't revoke a token then the token's

608
00:22:46,240 --> 00:22:47,679
not revoked

609
00:22:47,679 --> 00:22:49,039
right uh if you have a completely

610
00:22:49,039 --> 00:22:50,480
self-contained token and you try to

611
00:22:50,480 --> 00:22:52,000
revoke it it's

612
00:22:52,000 --> 00:22:55,679
well that's that's a you problem and

613
00:22:55,679 --> 00:22:56,799
excuse me

614
00:22:56,799 --> 00:22:59,039
and that is all um

615
00:22:59,039 --> 00:23:00,960
that's all uh

616
00:23:00,960 --> 00:23:02,799
recorded here now

617
00:23:02,799 --> 00:23:04,240
um

618
00:23:04,240 --> 00:23:07,360
oh and another big one that i have not

619
00:23:07,360 --> 00:23:10,159
seen nearly enough in um

620
00:23:10,159 --> 00:23:12,880
in this space is a server-side request

621
00:23:12,880 --> 00:23:16,880
forgery anytime a protocol allows a

622
00:23:16,880 --> 00:23:19,440
an input of a uri for the server to

623
00:23:19,440 --> 00:23:21,280
fetch for the authorization server to go

624
00:23:21,280 --> 00:23:23,200
and fetch whether that be the client's

625
00:23:23,200 --> 00:23:25,200
keys or in gnapp's case the logo and

626
00:23:25,200 --> 00:23:28,240
home page and things like that

627
00:23:28,240 --> 00:23:30,480
you open up a

628
00:23:30,480 --> 00:23:33,039
vector for an attacker to be able to

629
00:23:33,039 --> 00:23:36,080
craft a uri to go and fetch things we

630
00:23:36,080 --> 00:23:38,799
saw exactly how bad this can be with the

631
00:23:38,799 --> 00:23:42,640
log4j vulnerability earlier this year

632
00:23:42,640 --> 00:23:44,320
where something

633
00:23:44,320 --> 00:23:47,600
was very exploitable

634
00:23:47,600 --> 00:23:50,000
to anything to any deployment that was

635
00:23:50,000 --> 00:23:53,120
vulnerable to ssrf so we're calling that

636
00:23:53,120 --> 00:23:55,520
out now

637
00:23:55,520 --> 00:23:57,840
all right

638
00:23:58,080 --> 00:24:00,400
for the mix-up attacks a little bit more

639
00:24:00,400 --> 00:24:01,840
detail on some of these for the mix-up

640
00:24:01,840 --> 00:24:03,760
attacks

641
00:24:03,760 --> 00:24:05,440
the recommendation is that a client that

642
00:24:05,440 --> 00:24:07,279
is capable of talking to multiple asses

643
00:24:07,279 --> 00:24:09,679
should use a different key for each as

644
00:24:09,679 --> 00:24:12,159
this completely prevents a whole class

645
00:24:12,159 --> 00:24:13,919
of attacks of the client

646
00:24:13,919 --> 00:24:15,919
being handed a token that was supposed

647
00:24:15,919 --> 00:24:19,120
to be used with one set of rss um

648
00:24:19,120 --> 00:24:20,960
and or was supposed to be fetched with

649
00:24:20,960 --> 00:24:23,679
one rs uh with one as and

650
00:24:23,679 --> 00:24:25,120
uh actually getting it from an

651
00:24:25,120 --> 00:24:26,799
attacker's as for the attacker to be

652
00:24:26,799 --> 00:24:29,360
able to inject it um it's a really

653
00:24:29,360 --> 00:24:30,960
simple thing for a client to be able to

654
00:24:30,960 --> 00:24:33,039
do inside of ganap

655
00:24:33,039 --> 00:24:36,640
and now we've called that out explicit

656
00:24:36,799 --> 00:24:38,240
i've already talked about most of these

657
00:24:38,240 --> 00:24:39,679
i forgot that we had slides for each of

658
00:24:39,679 --> 00:24:40,880
these my bad

659
00:24:40,880 --> 00:24:43,200
um

660
00:24:43,279 --> 00:24:45,120
yeah i already covered this this was the

661
00:24:45,120 --> 00:24:46,880
user presence and session management

662
00:24:46,880 --> 00:24:49,279
requirement this is uh

663
00:24:49,279 --> 00:24:51,120
aaron's error responses these are the

664
00:24:51,120 --> 00:24:53,039
these are the responses here

665
00:24:53,039 --> 00:24:54,240
um

666
00:24:54,240 --> 00:24:56,240
and one i do want to point out uh that i

667
00:24:56,240 --> 00:24:58,320
think is interesting uh the last one

668
00:24:58,320 --> 00:25:00,720
request denied which is separate from

669
00:25:00,720 --> 00:25:03,279
user denied that's basically the as

670
00:25:03,279 --> 00:25:05,440
saying no and i'm not going to tell you

671
00:25:05,440 --> 00:25:06,240
why

672
00:25:06,240 --> 00:25:08,320
so if you have some reason to

673
00:25:08,320 --> 00:25:10,480
distrust the client instance or

674
00:25:10,480 --> 00:25:12,480
something else happened

675
00:25:12,480 --> 00:25:14,480
it this is just saying

676
00:25:14,480 --> 00:25:15,360
no

677
00:25:15,360 --> 00:25:18,320
like the the request is over

678
00:25:18,320 --> 00:25:19,600
and you're done

679
00:25:19,600 --> 00:25:21,360
um i want to point out for anybody

680
00:25:21,360 --> 00:25:23,360
coming from the oauth side these are all

681
00:25:23,360 --> 00:25:25,600
uh error responses that come in the back

682
00:25:25,600 --> 00:25:27,760
channel only the front channel does not

683
00:25:27,760 --> 00:25:30,320
carry any error codes

684
00:25:30,320 --> 00:25:31,279
at all

685
00:25:31,279 --> 00:25:34,559
which already closes a huge set of

686
00:25:34,559 --> 00:25:36,960
potential vulnerabilities

687
00:25:36,960 --> 00:25:39,279
all right

688
00:25:39,440 --> 00:25:43,000
so um

689
00:25:43,120 --> 00:25:45,600
right so uh the token rotation changes

690
00:25:45,600 --> 00:25:46,960
that we have in there

691
00:25:46,960 --> 00:25:48,320
um

692
00:25:48,320 --> 00:25:50,240
when you go and rotate a token through

693
00:25:50,240 --> 00:25:52,880
the token management system in ganap

694
00:25:52,880 --> 00:25:54,480
that means that you are getting a

695
00:25:54,480 --> 00:25:56,080
replacement for the token that you are

696
00:25:56,080 --> 00:25:58,320
rotating that's the intended semantics

697
00:25:58,320 --> 00:25:59,440
of that move

698
00:25:59,440 --> 00:26:01,679
if you are making a

699
00:26:01,679 --> 00:26:03,919
request to continue a grant with the

700
00:26:03,919 --> 00:26:05,440
same set of rights and permissions

701
00:26:05,440 --> 00:26:07,520
you're asking for a new token to be

702
00:26:07,520 --> 00:26:09,760
issued as part of that grant

703
00:26:09,760 --> 00:26:10,559
now

704
00:26:10,559 --> 00:26:12,080
the old token may or may not be thrown

705
00:26:12,080 --> 00:26:13,520
out in that case that's kind of up to

706
00:26:13,520 --> 00:26:14,799
the as

707
00:26:14,799 --> 00:26:17,279
at least how it's currently written

708
00:26:17,279 --> 00:26:19,440
when writing all of this we realize

709
00:26:19,440 --> 00:26:21,200
though that we really need to have a

710
00:26:21,200 --> 00:26:23,440
more explicit grant life cycle

711
00:26:23,440 --> 00:26:24,960
discussion and i'll cover that in a

712
00:26:24,960 --> 00:26:27,760
later presentation

713
00:26:28,799 --> 00:26:31,760
sorry it's not going

714
00:26:37,200 --> 00:26:39,200
life can you advance yourself with your

715
00:26:39,200 --> 00:26:40,559
um

716
00:26:40,559 --> 00:26:42,640
re-requests yeah i will i am going to

717
00:26:42,640 --> 00:26:45,200
re-request

718
00:26:45,200 --> 00:26:47,279
and oh oh

719
00:26:47,279 --> 00:26:49,039
did we lose the

720
00:26:49,039 --> 00:26:52,000
yeah i'm i'm doing it right now okay

721
00:26:52,000 --> 00:26:54,400
there we go it it asked me to share

722
00:26:54,400 --> 00:26:56,159
okay

723
00:26:56,159 --> 00:26:58,320
all right i'm gonna try and page through

724
00:26:58,320 --> 00:27:00,559
this

725
00:27:02,240 --> 00:27:04,240
token rotation perfect

726
00:27:04,240 --> 00:27:06,559
all right

727
00:27:06,559 --> 00:27:09,840
or is that just the last slide

728
00:27:13,760 --> 00:27:14,880
that might just be the end of the

729
00:27:14,880 --> 00:27:15,540
presentation

730
00:27:15,540 --> 00:27:18,670
[Music]

731
00:27:18,960 --> 00:27:20,720
well i i don't see it because you're

732
00:27:20,720 --> 00:27:23,520
sharing so you should be seeing the oh

733
00:27:23,520 --> 00:27:25,600
well then it's the last i think i think

734
00:27:25,600 --> 00:27:27,360
it's okay all right i think this is the

735
00:27:27,360 --> 00:27:30,399
last slides uh again sorry i didn't uh i

736
00:27:30,399 --> 00:27:32,399
wasn't prepared to present this deck

737
00:27:32,399 --> 00:27:34,880
this morning uh so anyway that's the

738
00:27:34,880 --> 00:27:36,480
state of the current core draft uh the

739
00:27:36,480 --> 00:27:38,320
editors are still uh working through

740
00:27:38,320 --> 00:27:41,120
issue backlogs and um and things like

741
00:27:41,120 --> 00:27:43,919
that uh any questions on where this is

742
00:27:43,919 --> 00:27:45,840
before we move to the next uh

743
00:27:45,840 --> 00:27:48,840
presentation

744
00:27:49,840 --> 00:27:52,960
nobody online i i guess

745
00:27:52,960 --> 00:27:56,000
not i'm not seeing

746
00:27:58,240 --> 00:28:00,640
somebody um

747
00:28:00,640 --> 00:28:02,880
so

748
00:28:02,880 --> 00:28:05,360
jay hoyla

749
00:28:05,360 --> 00:28:07,039
is asking so i haven't read any of the

750
00:28:07,039 --> 00:28:08,559
drafts or anything but with the computer

751
00:28:08,559 --> 00:28:09,760
attacks

752
00:28:09,760 --> 00:28:11,279
would it be possible to have a master

753
00:28:11,279 --> 00:28:12,960
key and then use the kdf to produce an

754
00:28:12,960 --> 00:28:14,960
independent key for each ass sorry yeah

755
00:28:14,960 --> 00:28:17,440
that was me oh oh yeah well go ahead

756
00:28:17,440 --> 00:28:20,480
there you go yep so yeah as i said i

757
00:28:20,480 --> 00:28:21,600
haven't read any of the drafts or

758
00:28:21,600 --> 00:28:22,640
anything

759
00:28:22,640 --> 00:28:25,360
um but with the confusion attack a few

760
00:28:25,360 --> 00:28:27,120
slides before yeah

761
00:28:27,120 --> 00:28:28,399
um

762
00:28:28,399 --> 00:28:29,520
go ahead

763
00:28:29,520 --> 00:28:31,600
it says um you should use a different

764
00:28:31,600 --> 00:28:32,960
key for each

765
00:28:32,960 --> 00:28:35,919
ass yes would it be possible to do

766
00:28:35,919 --> 00:28:37,760
something where

767
00:28:37,760 --> 00:28:39,679
you have a master key and then you use a

768
00:28:39,679 --> 00:28:41,679
kdf to derive a different key for each

769
00:28:41,679 --> 00:28:42,840
as yeah

770
00:28:42,840 --> 00:28:46,080
absolutely yeah absolutely and um

771
00:28:46,080 --> 00:28:46,960
uh

772
00:28:46,960 --> 00:28:48,320
at the end of the day as far as good map

773
00:28:48,320 --> 00:28:50,640
is concerned as long as the as accepts

774
00:28:50,640 --> 00:28:52,960
the key for the client instance and

775
00:28:52,960 --> 00:28:55,039
whatever trust logic it needs in order

776
00:28:55,039 --> 00:28:56,640
to accept that key

777
00:28:56,640 --> 00:28:58,480
as long as the as accepts the key it's

778
00:28:58,480 --> 00:29:01,679
fine um and so if you're in an ecosystem

779
00:29:01,679 --> 00:29:04,640
with like multiple uh as's that are in

780
00:29:04,640 --> 00:29:07,360
like a tight federation relationship and

781
00:29:07,360 --> 00:29:08,320
you know

782
00:29:08,320 --> 00:29:10,320
you can tell that this has been derived

783
00:29:10,320 --> 00:29:12,320
from a certain master key or it's

784
00:29:12,320 --> 00:29:14,880
co-signed or some something like that

785
00:29:14,880 --> 00:29:16,640
when that key shows up and you can

786
00:29:16,640 --> 00:29:19,520
verify that that's great uh gnapp

787
00:29:19,520 --> 00:29:21,919
actually doesn't care how that trust

788
00:29:21,919 --> 00:29:24,000
gets established as long as it is

789
00:29:24,000 --> 00:29:26,720
established so yes you can do exactly

790
00:29:26,720 --> 00:29:30,399
that very cool thank you yep

791
00:29:31,600 --> 00:29:33,840
well

792
00:29:34,559 --> 00:29:36,640
we don't have anyone else on the queue

793
00:29:36,640 --> 00:29:39,039
so we might as well

794
00:29:39,039 --> 00:29:41,840
go ahead and

795
00:29:41,840 --> 00:29:43,679
all right yeah

796
00:29:43,679 --> 00:29:45,200
and now the

797
00:29:45,200 --> 00:29:47,760
hackathon

798
00:29:48,320 --> 00:29:52,360
is the next one it is

799
00:29:56,640 --> 00:29:58,399
all right

800
00:29:58,399 --> 00:29:59,520
so

801
00:29:59,520 --> 00:30:02,240
this last weekend um aaron parechi and i

802
00:30:02,240 --> 00:30:04,240
sat down in the hackathon and

803
00:30:04,240 --> 00:30:06,799
implemented a whole bunch of stuff and

804
00:30:06,799 --> 00:30:07,679
um

805
00:30:07,679 --> 00:30:09,760
i'm gonna tell you guys about what we

806
00:30:09,760 --> 00:30:10,559
did

807
00:30:10,559 --> 00:30:11,919
um

808
00:30:11,919 --> 00:30:13,840
you know what we learned from that

809
00:30:13,840 --> 00:30:16,559
including some uh some feedback for the

810
00:30:16,559 --> 00:30:17,760
drafts that we were implementing

811
00:30:17,760 --> 00:30:21,200
themselves and uh hopefully hopefully

812
00:30:21,200 --> 00:30:23,200
show you guys some of this stuff live

813
00:30:23,200 --> 00:30:26,240
we'll we'll see how that goes

814
00:30:26,240 --> 00:30:27,679
all right

815
00:30:27,679 --> 00:30:29,200
i'm going to skip the what is gnapp

816
00:30:29,200 --> 00:30:30,880
slide these are slides we wrote for the

817
00:30:30,880 --> 00:30:32,080
hackathon

818
00:30:32,080 --> 00:30:34,559
results

819
00:30:34,720 --> 00:30:36,960
our focus during the hackathon

820
00:30:36,960 --> 00:30:39,360
was uh that all the requests would be

821
00:30:39,360 --> 00:30:41,760
protected with http signatures

822
00:30:41,760 --> 00:30:44,720
um we were trying to build stuff

823
00:30:44,720 --> 00:30:47,679
you know from from sort of ground up as

824
00:30:47,679 --> 00:30:50,159
much as we could using existing

825
00:30:50,159 --> 00:30:51,679
libraries for components where they were

826
00:30:51,679 --> 00:30:52,960
available building them where they

827
00:30:52,960 --> 00:30:55,200
weren't

828
00:30:56,320 --> 00:30:57,679
and we

829
00:30:57,679 --> 00:31:00,159
our goal was to be able to

830
00:31:00,159 --> 00:31:02,799
make requests make valid requests for

831
00:31:02,799 --> 00:31:04,720
access tokens and get the user to

832
00:31:04,720 --> 00:31:06,559
interact with the aes

833
00:31:06,559 --> 00:31:08,640
now because gnapp is such a flexible

834
00:31:08,640 --> 00:31:13,120
protocol we limited our scope of what we

835
00:31:13,120 --> 00:31:14,880
wanted for interaction what we wanted

836
00:31:14,880 --> 00:31:18,399
for access tokens and things like that

837
00:31:18,399 --> 00:31:19,760
but at the end of the day it was mostly

838
00:31:19,760 --> 00:31:21,360
about getting these messages along the

839
00:31:21,360 --> 00:31:23,360
wire

840
00:31:23,360 --> 00:31:26,559
so we built a whole bunch of new code

841
00:31:26,559 --> 00:31:29,360
php code that aaron wrote

842
00:31:29,360 --> 00:31:30,960
from scratch

843
00:31:30,960 --> 00:31:32,399
for a cli

844
00:31:32,399 --> 00:31:34,559
and a web client um

845
00:31:34,559 --> 00:31:35,919
he uh

846
00:31:35,919 --> 00:31:37,760
if i recall correctly he built the cli

847
00:31:37,760 --> 00:31:39,840
first then refactored out sort of the

848
00:31:39,840 --> 00:31:42,240
core bits of that and

849
00:31:42,240 --> 00:31:45,519
built that into a php website

850
00:31:45,519 --> 00:31:48,320
as well uh that work that acts as a good

851
00:31:48,320 --> 00:31:49,679
app client

852
00:31:49,679 --> 00:31:52,880
um i built a javascript spa single page

853
00:31:52,880 --> 00:31:55,600
app um again pretty much pulling things

854
00:31:55,600 --> 00:31:58,080
from scratch i had a basic react react

855
00:31:58,080 --> 00:32:00,960
shell uh from previous work that i had

856
00:32:00,960 --> 00:32:01,760
done

857
00:32:01,760 --> 00:32:03,279
throughout pretty much everything that

858
00:32:03,279 --> 00:32:05,840
was in the middle of it and

859
00:32:05,840 --> 00:32:08,640
and put that forward

860
00:32:08,640 --> 00:32:10,640
in the process of this we made

861
00:32:10,640 --> 00:32:13,519
significant updates to existing code

862
00:32:13,519 --> 00:32:14,960
that we already had that we were running

863
00:32:14,960 --> 00:32:18,640
against so we had a java based

864
00:32:18,640 --> 00:32:22,880
web server client based on java spring

865
00:32:23,440 --> 00:32:25,760
and we had a java based authorization

866
00:32:25,760 --> 00:32:27,600
server both of these needed to be

867
00:32:27,600 --> 00:32:29,200
tweaked um

868
00:32:29,200 --> 00:32:31,039
because it turned out there were some

869
00:32:31,039 --> 00:32:34,159
errors and bad assumptions inside of uh

870
00:32:34,159 --> 00:32:36,559
of each of those implementations

871
00:32:36,559 --> 00:32:38,799
now we leveraged as many existing

872
00:32:38,799 --> 00:32:40,840
libraries as we could find

873
00:32:40,840 --> 00:32:43,919
um but in a lot of cases

874
00:32:43,919 --> 00:32:47,440
uh there weren't full libraries on hand

875
00:32:47,440 --> 00:32:50,159
to build this stuff out

876
00:32:50,159 --> 00:32:52,720
so those of you that were in the

877
00:32:52,720 --> 00:32:54,559
again the oauth meeting the other day

878
00:32:54,559 --> 00:32:55,519
the whole

879
00:32:55,519 --> 00:32:56,720
lack of

880
00:32:56,720 --> 00:32:58,399
you know good libraries to do things

881
00:32:58,399 --> 00:33:00,799
this is as important for

882
00:33:00,799 --> 00:33:03,279
uh the component pieces of a system as

883
00:33:03,279 --> 00:33:05,760
it is for somebody just being able to

884
00:33:05,760 --> 00:33:08,080
pull down a nap library and go which we

885
00:33:08,080 --> 00:33:10,640
wouldn't expect at this point in time

886
00:33:10,640 --> 00:33:11,760
but

887
00:33:11,760 --> 00:33:13,919
being able to pull things down for http

888
00:33:13,919 --> 00:33:15,600
structured fields and cryptographic

889
00:33:15,600 --> 00:33:17,519
primitives and things like that

890
00:33:17,519 --> 00:33:19,440
that was all really important for aaron

891
00:33:19,440 --> 00:33:21,600
and i to be able to build stuff

892
00:33:21,600 --> 00:33:23,039
all right

893
00:33:23,039 --> 00:33:25,840
what we learned is that in particular

894
00:33:25,840 --> 00:33:29,519
http signatures is very complex to do

895
00:33:29,519 --> 00:33:32,320
from scratch now i want to emphasize

896
00:33:32,320 --> 00:33:35,439
that last bit there

897
00:33:35,519 --> 00:33:38,240
signatures itself hb message signatures

898
00:33:38,240 --> 00:33:39,760
in cell itself

899
00:33:39,760 --> 00:33:40,720
isn't

900
00:33:40,720 --> 00:33:42,080
that crazy

901
00:33:42,080 --> 00:33:44,159
once once you kind of you know get your

902
00:33:44,159 --> 00:33:45,840
head around how

903
00:33:45,840 --> 00:33:47,200
the fact that you're doing a detached

904
00:33:47,200 --> 00:33:49,279
signature system

905
00:33:49,279 --> 00:33:51,519
but there's a lot of moving parts

906
00:33:51,519 --> 00:33:52,799
so having

907
00:33:52,799 --> 00:33:55,200
libraries for manipulating things like

908
00:33:55,200 --> 00:33:57,200
http structured

909
00:33:57,200 --> 00:33:59,360
structured fields and all of those data

910
00:33:59,360 --> 00:34:02,880
structures goes a very very long way

911
00:34:02,880 --> 00:34:04,880
having knowledge about how to

912
00:34:04,880 --> 00:34:07,519
get strings properly in and out of or

913
00:34:07,519 --> 00:34:09,918
really bite arrays in and out of your

914
00:34:09,918 --> 00:34:13,598
platform's chosen crypto library

915
00:34:15,760 --> 00:34:17,520
how to um

916
00:34:17,520 --> 00:34:19,839
how to get keys in and out of that uh

917
00:34:19,839 --> 00:34:21,839
crypto library

918
00:34:21,839 --> 00:34:23,599
that kind of knowledge you would need

919
00:34:23,599 --> 00:34:25,520
for any crypto system

920
00:34:25,520 --> 00:34:28,480
and um it applies to this no less

921
00:34:28,480 --> 00:34:30,239
there were a couple of surprising bits

922
00:34:30,239 --> 00:34:33,679
that were more fiddly than we expected

923
00:34:33,679 --> 00:34:34,960
in particular

924
00:34:34,960 --> 00:34:36,480
turns

925
00:34:36,480 --> 00:34:39,119
turns out that the order of the

926
00:34:39,119 --> 00:34:40,800
parameters

927
00:34:40,800 --> 00:34:42,960
um was not on

928
00:34:42,960 --> 00:34:44,960
on one of the http structured fields was

929
00:34:44,960 --> 00:34:46,320
not being preserved on one of the

930
00:34:46,320 --> 00:34:50,159
platforms that we were going on and

931
00:34:50,159 --> 00:34:52,000
when you're doing a

932
00:34:52,000 --> 00:34:53,280
when you're doing a cryptographic

933
00:34:53,280 --> 00:34:55,280
operation if you've got

934
00:34:55,280 --> 00:34:57,599
parameters swapping order

935
00:34:57,599 --> 00:34:59,200
semantically we didn't care what order

936
00:34:59,200 --> 00:35:00,720
the parameters were in

937
00:35:00,720 --> 00:35:01,520
but

938
00:35:01,520 --> 00:35:03,040
when you've got parameter swapping order

939
00:35:03,040 --> 00:35:05,200
that changes your input string

940
00:35:05,200 --> 00:35:06,720
that completely breaks all of your

941
00:35:06,720 --> 00:35:09,279
signatures

942
00:35:11,599 --> 00:35:13,920
so ideally

943
00:35:13,920 --> 00:35:16,720
the end goal for http message signatures

944
00:35:16,720 --> 00:35:19,599
um and this is uh we're taking back to

945
00:35:19,599 --> 00:35:21,280
the http working group

946
00:35:21,280 --> 00:35:22,560
um

947
00:35:22,560 --> 00:35:24,480
the end goal for that really is that it

948
00:35:24,480 --> 00:35:27,359
really should be transparent within http

949
00:35:27,359 --> 00:35:29,839
uh library platforms

950
00:35:29,839 --> 00:35:31,119
that's what

951
00:35:31,119 --> 00:35:32,720
that's that's the layer it should be

952
00:35:32,720 --> 00:35:34,720
working at i should be able to say make

953
00:35:34,720 --> 00:35:38,399
an http request and sign it with this

954
00:35:42,839 --> 00:35:46,720
key excuse me uh i will say though

955
00:35:46,720 --> 00:35:48,560
once we had that part

956
00:35:48,560 --> 00:35:50,160
the rest of the gnat protocol came

957
00:35:50,160 --> 00:35:52,640
together very very quickly

958
00:35:52,640 --> 00:35:54,240
um so

959
00:35:54,240 --> 00:35:55,359
um

960
00:35:55,359 --> 00:35:56,800
i also want to point out that aaron and

961
00:35:56,800 --> 00:35:59,200
i built our signing functions

962
00:35:59,200 --> 00:36:01,359
deliberately so that it they would sign

963
00:36:01,359 --> 00:36:03,839
an arbitrary http message

964
00:36:03,839 --> 00:36:05,200
we could have hard-coded a bunch of

965
00:36:05,200 --> 00:36:07,040
stuff to say okay this is just making a

966
00:36:07,040 --> 00:36:09,119
good app request and setting the

967
00:36:09,119 --> 00:36:11,440
fields this way and stuff like that

968
00:36:11,440 --> 00:36:13,520
neither of us wanted to do that

969
00:36:13,520 --> 00:36:15,200
we both wanted to have something that

970
00:36:15,200 --> 00:36:18,560
says given an http url to go to and a

971
00:36:18,560 --> 00:36:19,760
key

972
00:36:19,760 --> 00:36:21,520
sign this and send it

973
00:36:21,520 --> 00:36:24,640
so the hackathon was as much a

974
00:36:24,640 --> 00:36:26,560
http message signatures implementation

975
00:36:26,560 --> 00:36:28,640
as it was can happen

976
00:36:28,640 --> 00:36:30,800
but once we had that function in place

977
00:36:30,800 --> 00:36:34,000
on all of the different platforms

978
00:36:34,000 --> 00:36:36,640
everything else really kind of um went

979
00:36:36,640 --> 00:36:39,520
fairly smoothly gnapp at its core is a

980
00:36:39,520 --> 00:36:41,760
json based protocol

981
00:36:41,760 --> 00:36:44,000
with certain semantics on on different

982
00:36:44,000 --> 00:36:45,040
fields

983
00:36:45,040 --> 00:36:47,760
and so getting those json bits in place

984
00:36:47,760 --> 00:36:50,960
was definitely the easy part

985
00:36:52,000 --> 00:36:53,760
and i learned that i still hate

986
00:36:53,760 --> 00:36:55,359
javascript

987
00:36:55,359 --> 00:36:57,119
it's it's

988
00:36:57,119 --> 00:36:59,280
it's just a bad idea

989
00:36:59,280 --> 00:37:01,119
all right

990
00:37:01,119 --> 00:37:02,480
so

991
00:37:02,480 --> 00:37:04,880
things we learned from actually building

992
00:37:04,880 --> 00:37:06,839
this about the

993
00:37:06,839 --> 00:37:10,000
specs for gnapp we

994
00:37:10,000 --> 00:37:11,760
discovered that

995
00:37:11,760 --> 00:37:15,200
we need a way to communicate

996
00:37:15,359 --> 00:37:17,920
the proof parameters

997
00:37:17,920 --> 00:37:19,200
so when you're doing http message

998
00:37:19,200 --> 00:37:20,880
signatures for example

999
00:37:20,880 --> 00:37:23,119
you've got a signing algorithm and a

1000
00:37:23,119 --> 00:37:26,240
digest algorithm and um all these other

1001
00:37:26,240 --> 00:37:28,720
sort of sub layers of that

1002
00:37:28,720 --> 00:37:30,400
that are not communicated with just the

1003
00:37:30,400 --> 00:37:32,960
key that says do http signing

1004
00:37:32,960 --> 00:37:34,800
same with jws

1005
00:37:34,800 --> 00:37:36,880
detach signing uh you would want to be

1006
00:37:36,880 --> 00:37:39,040
able to communicate the jw the target

1007
00:37:39,040 --> 00:37:42,480
intended jws algorithm um inside of that

1008
00:37:42,480 --> 00:37:44,400
as well as opposed to just accepting

1009
00:37:44,400 --> 00:37:46,640
whatever signed object came in

1010
00:37:46,640 --> 00:37:49,040
because we know that that is one of

1011
00:37:49,040 --> 00:37:53,040
um that is the basis of one of jose's

1012
00:37:53,040 --> 00:37:54,560
you know most

1013
00:37:54,560 --> 00:37:57,200
most famous

1014
00:37:57,359 --> 00:37:59,520
misimplementations

1015
00:37:59,520 --> 00:38:01,520
um people just accepting whatever

1016
00:38:01,520 --> 00:38:03,920
whatever algorithm is in the jws

1017
00:38:03,920 --> 00:38:06,320
structure

1018
00:38:06,800 --> 00:38:08,079
um

1019
00:38:08,079 --> 00:38:10,079
we realize that

1020
00:38:10,079 --> 00:38:12,079
the life cycle is unclear

1021
00:38:12,079 --> 00:38:14,000
in when you're actually exercising the

1022
00:38:14,000 --> 00:38:15,040
protocol

1023
00:38:15,040 --> 00:38:16,320
and that's why

1024
00:38:16,320 --> 00:38:18,079
the editors are going to focus on this

1025
00:38:18,079 --> 00:38:21,040
uh during the next cycle here

1026
00:38:21,040 --> 00:38:23,359
um

1027
00:38:23,839 --> 00:38:24,720
so

1028
00:38:24,720 --> 00:38:27,280
the fact that we're doing a at one step

1029
00:38:27,280 --> 00:38:29,359
of the process in some circumstances

1030
00:38:29,359 --> 00:38:33,520
we're doing a post with no message body

1031
00:38:33,520 --> 00:38:35,599
we finally took us took a beat and asked

1032
00:38:35,599 --> 00:38:37,200
ourselves why are we doing a post with

1033
00:38:37,200 --> 00:38:38,800
no message body is this more

1034
00:38:38,800 --> 00:38:41,280
semantically like a get does this make

1035
00:38:41,280 --> 00:38:42,400
sense

1036
00:38:42,400 --> 00:38:44,240
that's the type of stuff that we need to

1037
00:38:44,240 --> 00:38:46,640
step back and ask us uh

1038
00:38:46,640 --> 00:38:47,920
ask everybody

1039
00:38:47,920 --> 00:38:50,079
what does each piece actually mean and

1040
00:38:50,079 --> 00:38:52,640
and what are we doing with it

1041
00:38:52,640 --> 00:38:55,280
um so that is going to be the big focus

1042
00:38:55,280 --> 00:38:56,079
for

1043
00:38:56,079 --> 00:38:58,480
for the next bit which we'll get into in

1044
00:38:58,480 --> 00:39:01,119
in the later presentation in detail

1045
00:39:01,119 --> 00:39:02,000
um

1046
00:39:02,000 --> 00:39:05,119
we definitely need to uh externalize

1047
00:39:05,119 --> 00:39:08,160
some of our uh references like our hash

1048
00:39:08,160 --> 00:39:09,520
reference

1049
00:39:09,520 --> 00:39:11,599
for the interaction hash

1050
00:39:11,599 --> 00:39:13,760
aaron found a an existing registry we

1051
00:39:13,760 --> 00:39:15,040
can use for that which we're going to be

1052
00:39:15,040 --> 00:39:17,599
changing to

1053
00:39:18,320 --> 00:39:20,320
um we need

1054
00:39:20,320 --> 00:39:22,000
during the hackathon aaron and i

1055
00:39:22,000 --> 00:39:23,920
actually got into an interesting and

1056
00:39:23,920 --> 00:39:25,920
lively debate about what the hash

1057
00:39:25,920 --> 00:39:27,440
actually protects and drew up a few

1058
00:39:27,440 --> 00:39:30,640
diagrams so i've already put in a pr to

1059
00:39:30,640 --> 00:39:32,160
add the diagram that we drew during the

1060
00:39:32,160 --> 00:39:34,640
hackathon to the uh to the draft and

1061
00:39:34,640 --> 00:39:36,480
security considerations

1062
00:39:36,480 --> 00:39:38,560
and um

1063
00:39:38,560 --> 00:39:41,040
yeah and like i mentioned there's a

1064
00:39:41,040 --> 00:39:42,800
little bit of semantic cleanup that some

1065
00:39:42,800 --> 00:39:44,320
of the names might not make as much

1066
00:39:44,320 --> 00:39:47,599
sense as as we originally thought

1067
00:39:47,599 --> 00:39:48,880
um

1068
00:39:48,880 --> 00:39:53,040
http structured values is a fantastic

1069
00:39:53,040 --> 00:39:54,000
uh

1070
00:39:54,000 --> 00:39:58,160
fantastic spec uh rfc 8941 i think it is

1071
00:39:58,160 --> 00:40:00,240
now um

1072
00:40:00,240 --> 00:40:02,240
it's absolutely brilliant

1073
00:40:02,240 --> 00:40:03,839
but it's

1074
00:40:03,839 --> 00:40:08,000
weird because it is very http ish

1075
00:40:08,000 --> 00:40:11,280
and http is a weird protocol

1076
00:40:11,280 --> 00:40:12,240
um

1077
00:40:12,240 --> 00:40:13,680
so

1078
00:40:13,680 --> 00:40:16,240
if you're not thinking in very http kind

1079
00:40:16,240 --> 00:40:18,640
of structures and terms it can be

1080
00:40:18,640 --> 00:40:19,599
jarring

1081
00:40:19,599 --> 00:40:22,000
to and the first question you are going

1082
00:40:22,000 --> 00:40:24,880
to ask is why isn't this just json

1083
00:40:24,880 --> 00:40:26,400
there's a good reason that it's not just

1084
00:40:26,400 --> 00:40:28,079
json there's a lot of good reasons

1085
00:40:28,079 --> 00:40:29,119
actually

1086
00:40:29,119 --> 00:40:30,800
but

1087
00:40:30,800 --> 00:40:31,599
some

1088
00:40:31,599 --> 00:40:33,839
you know some more starter guides for

1089
00:40:33,839 --> 00:40:35,359
structured fields would be really good

1090
00:40:35,359 --> 00:40:38,440
to see

1091
00:40:38,480 --> 00:40:40,160
and i mentioned with http signatures

1092
00:40:40,160 --> 00:40:43,040
already um this really needs to be built

1093
00:40:43,040 --> 00:40:45,599
into uh the http libraries and this is

1094
00:40:45,599 --> 00:40:47,440
something that i would like to really

1095
00:40:47,440 --> 00:40:50,640
see happen we are seeing a lot of uptake

1096
00:40:50,640 --> 00:40:54,160
of um developers on different platforms

1097
00:40:54,160 --> 00:40:56,800
uh writing uh signature implementations

1098
00:40:56,800 --> 00:40:59,040
people have been waiting for the ietf to

1099
00:40:59,040 --> 00:41:00,720
actually declare an http message

1100
00:41:00,720 --> 00:41:02,160
signature

1101
00:41:02,160 --> 00:41:04,960
process for a long time now and so we're

1102
00:41:04,960 --> 00:41:07,280
seeing developer uptake hopefully it's a

1103
00:41:07,280 --> 00:41:09,760
matter of time before those get uh more

1104
00:41:09,760 --> 00:41:12,720
tightly integrated

1105
00:41:13,040 --> 00:41:14,160
all right

1106
00:41:14,160 --> 00:41:17,599
so now it's time for the demos um

1107
00:41:17,599 --> 00:41:19,440
we have the cams demos here but i am

1108
00:41:19,440 --> 00:41:21,680
actually going to go

1109
00:41:21,680 --> 00:41:24,879
and grab my laptop

1110
00:41:25,359 --> 00:41:27,119
live demo

1111
00:41:27,119 --> 00:41:29,119
not not not something you see every day

1112
00:41:29,119 --> 00:41:32,359
in the itap

1113
00:41:34,079 --> 00:41:35,839
all right so you guys get to uh get to

1114
00:41:35,839 --> 00:41:37,839
see this fail live

1115
00:41:37,839 --> 00:41:39,680
all right let's uh i gotta prove

1116
00:41:39,680 --> 00:41:42,160
something all right well i i

1117
00:41:42,160 --> 00:41:43,359
approve the screen share from your

1118
00:41:43,359 --> 00:41:45,839
laptop yeah exactly and apparently i

1119
00:41:45,839 --> 00:41:48,160
need to

1120
00:41:48,160 --> 00:41:50,000
i think meet echo locked me out because

1121
00:41:50,000 --> 00:41:53,040
i logged in for my phone

1122
00:41:59,760 --> 00:42:02,000
god forbid that you should over consume

1123
00:42:02,000 --> 00:42:04,400
itf meetings

1124
00:42:04,400 --> 00:42:07,599
from separate devices

1125
00:42:11,839 --> 00:42:13,040
there we go

1126
00:42:13,040 --> 00:42:14,240
all right

1127
00:42:14,240 --> 00:42:17,839
and the infinite tunnel yes

1128
00:42:18,480 --> 00:42:19,839
all right so

1129
00:42:19,839 --> 00:42:22,480
here's to hoping this works

1130
00:42:22,480 --> 00:42:25,200
and you guys can follow along at home

1131
00:42:25,200 --> 00:42:28,960
um if you go to uh ganap c dot

1132
00:42:28,960 --> 00:42:31,960
herokuapp.com

1133
00:42:32,079 --> 00:42:35,599
you get the same the same screen

1134
00:42:35,599 --> 00:42:37,920
now this is set up to very much be an

1135
00:42:37,920 --> 00:42:39,520
engineer's interface

1136
00:42:39,520 --> 00:42:41,920
because as you can see here

1137
00:42:41,920 --> 00:42:45,280
these are all of the parameters for a

1138
00:42:45,280 --> 00:42:47,280
gnap request

1139
00:42:47,280 --> 00:42:49,359
right

1140
00:42:49,359 --> 00:42:52,079
some of them are just defined in raw

1141
00:42:52,079 --> 00:42:53,599
json

1142
00:42:53,599 --> 00:42:57,040
so i hope your mental json serializer is

1143
00:42:57,040 --> 00:42:59,040
really good because it does not fail

1144
00:42:59,040 --> 00:43:02,000
gracefully if you break your json

1145
00:43:02,000 --> 00:43:05,119
sorry we had a weekend

1146
00:43:06,240 --> 00:43:07,839
and i am going to do

1147
00:43:07,839 --> 00:43:08,800
um

1148
00:43:08,800 --> 00:43:10,319
a redirect

1149
00:43:10,319 --> 00:43:13,520
mode here i'm going to

1150
00:43:13,520 --> 00:43:15,599
create new request

1151
00:43:15,599 --> 00:43:17,839
and in the background is where all the

1152
00:43:17,839 --> 00:43:19,920
interesting stuff happened

1153
00:43:19,920 --> 00:43:22,319
right um this is the problem with doing

1154
00:43:22,319 --> 00:43:24,319
a demo of a security protocol it's you

1155
00:43:24,319 --> 00:43:26,560
click a button and something works

1156
00:43:26,560 --> 00:43:28,400
all the fun stuff is happening off on

1157
00:43:28,400 --> 00:43:30,240
the server where it's creating the

1158
00:43:30,240 --> 00:43:32,000
messages and signing them and stuff like

1159
00:43:32,000 --> 00:43:33,359
that we'll be able to see a little bit

1160
00:43:33,359 --> 00:43:35,280
more of that when i show the spa demo in

1161
00:43:35,280 --> 00:43:36,720
a moment

1162
00:43:36,720 --> 00:43:39,040
and aaron's uh aaron's demo actually

1163
00:43:39,040 --> 00:43:41,920
shows it a little bit better also

1164
00:43:41,920 --> 00:43:45,440
but i'm going to go here to the uh

1165
00:43:45,440 --> 00:43:47,280
to the interaction url this is that

1166
00:43:47,280 --> 00:43:49,200
redirect uri that we were talking about

1167
00:43:49,200 --> 00:43:51,119
before

1168
00:43:51,119 --> 00:43:53,839
now up here you can see that we are

1169
00:43:53,839 --> 00:43:56,319
approving access

1170
00:43:56,319 --> 00:43:59,200
uh to four different kinds of things

1171
00:43:59,200 --> 00:44:01,599
um what's not clear from this is that

1172
00:44:01,599 --> 00:44:03,760
the top three are

1173
00:44:03,760 --> 00:44:06,079
oauth scope style requests so they're

1174
00:44:06,079 --> 00:44:08,160
just simple strings

1175
00:44:08,160 --> 00:44:09,839
so if you have apis that are protected

1176
00:44:09,839 --> 00:44:11,440
with oauth scopes this is how gnapp

1177
00:44:11,440 --> 00:44:13,280
represents that

1178
00:44:13,280 --> 00:44:15,920
the bottom one is actually that large

1179
00:44:15,920 --> 00:44:17,680
object block the rich authorization

1180
00:44:17,680 --> 00:44:19,359
request style

1181
00:44:19,359 --> 00:44:20,720
request

1182
00:44:20,720 --> 00:44:22,319
an app of course allows you to do them

1183
00:44:22,319 --> 00:44:24,480
together in the same request and so

1184
00:44:24,480 --> 00:44:26,960
that's what's showing up here

1185
00:44:26,960 --> 00:44:29,119
i'm going to approve that

1186
00:44:29,119 --> 00:44:30,560
and then

1187
00:44:30,560 --> 00:44:32,480
hide the form

1188
00:44:32,480 --> 00:44:33,599
and then

1189
00:44:33,599 --> 00:44:37,040
as if magic we now have an access token

1190
00:44:37,040 --> 00:44:39,200
from the as that we can then use to go

1191
00:44:39,200 --> 00:44:40,000
and

1192
00:44:40,000 --> 00:44:41,520
um

1193
00:44:41,520 --> 00:44:42,640
you know

1194
00:44:42,640 --> 00:44:45,520
at apis and stuff like that

1195
00:44:45,520 --> 00:44:48,240
all of this was done using a

1196
00:44:48,240 --> 00:44:50,880
a java based web server so all of the

1197
00:44:50,880 --> 00:44:52,560
keys secrets and stuff like that are

1198
00:44:52,560 --> 00:44:54,480
happening off on a back end out of the

1199
00:44:54,480 --> 00:44:56,880
browser

1200
00:45:00,640 --> 00:45:02,839
so one of the things about the

1201
00:45:02,839 --> 00:45:05,599
um about the hackathon was that we

1202
00:45:05,599 --> 00:45:07,359
wanted to be able to do all of this

1203
00:45:07,359 --> 00:45:09,200
inside the browser

1204
00:45:09,200 --> 00:45:12,000
and see what that would feel like

1205
00:45:12,000 --> 00:45:14,240
so

1206
00:45:15,440 --> 00:45:16,800
this key

1207
00:45:16,800 --> 00:45:20,680
was generated using web crypto so

1208
00:45:20,680 --> 00:45:22,000
navigator.credentials.createkey whatever

1209
00:45:22,000 --> 00:45:25,839
it is i'm actually going to go down and

1210
00:45:25,839 --> 00:45:27,599
so look at the end value it starts with

1211
00:45:27,599 --> 00:45:29,920
2i20s

1212
00:45:29,920 --> 00:45:31,680
i'm going to go and

1213
00:45:31,680 --> 00:45:33,200
this button

1214
00:45:33,200 --> 00:45:35,119
which you would never guess

1215
00:45:35,119 --> 00:45:37,680
does create a new key so now our n value

1216
00:45:37,680 --> 00:45:39,920
starts with mfx q4

1217
00:45:39,920 --> 00:45:42,240
completely different key generated just

1218
00:45:42,240 --> 00:45:44,319
now this client is going to use that to

1219
00:45:44,319 --> 00:45:46,240
make a request to the authorization

1220
00:45:46,240 --> 00:45:48,000
server

1221
00:45:48,000 --> 00:45:49,440
all right

1222
00:45:49,440 --> 00:45:51,200
and oh and i do want to point out that

1223
00:45:51,200 --> 00:45:54,560
both the spa and the um

1224
00:45:54,560 --> 00:45:56,319
and the java based client one of the

1225
00:45:56,319 --> 00:45:58,800
things that they do allow

1226
00:45:58,800 --> 00:46:00,480
is you to set your

1227
00:46:00,480 --> 00:46:01,920
grant endpoint

1228
00:46:01,920 --> 00:46:04,079
right at the top

1229
00:46:04,079 --> 00:46:07,040
so gnapp is a protocol is designed to

1230
00:46:07,040 --> 00:46:09,599
not really require a discovery step

1231
00:46:09,599 --> 00:46:11,839
uh it is you know negotiation is built

1232
00:46:11,839 --> 00:46:14,240
into the protocol in a lot of spaces so

1233
00:46:14,240 --> 00:46:15,760
you just need this one url to kick

1234
00:46:15,760 --> 00:46:16,960
things off

1235
00:46:16,960 --> 00:46:19,280
both of these clients are configurable

1236
00:46:19,280 --> 00:46:22,480
to whatever url you want to put on

1237
00:46:22,480 --> 00:46:24,400
and if you're running it

1238
00:46:24,400 --> 00:46:26,800
the the code on localhost i have a

1239
00:46:26,800 --> 00:46:28,720
shortcut there because i got tired of

1240
00:46:28,720 --> 00:46:31,359
typing that in

1241
00:46:32,240 --> 00:46:33,920
all right so anyway

1242
00:46:33,920 --> 00:46:35,760
we are going to go create a brand new

1243
00:46:35,760 --> 00:46:38,400
transaction

1244
00:46:38,560 --> 00:46:40,800
it auto redirects because

1245
00:46:40,800 --> 00:46:43,040
i was lazy um

1246
00:46:43,040 --> 00:46:44,480
but this is doing the same redirect

1247
00:46:44,480 --> 00:46:46,720
based flow as we were doing before

1248
00:46:46,720 --> 00:46:48,000
and i'm going to go through all of that

1249
00:46:48,000 --> 00:46:49,520
in addition to all of the access that

1250
00:46:49,520 --> 00:46:51,680
it's asking for it's also asking for

1251
00:46:51,680 --> 00:46:53,359
these two different subject identifiers

1252
00:46:53,359 --> 00:46:55,280
for me is the user

1253
00:46:55,280 --> 00:46:57,680
i hit approve

1254
00:46:57,680 --> 00:47:00,640
and now in addition to my oh my access

1255
00:47:00,640 --> 00:47:04,240
token which is here i also have a user

1256
00:47:04,240 --> 00:47:06,240
information in form of an email address

1257
00:47:06,240 --> 00:47:07,200
and then

1258
00:47:07,200 --> 00:47:10,079
a server specific opaque identifier all

1259
00:47:10,079 --> 00:47:11,760
of that came back straight to the client

1260
00:47:11,760 --> 00:47:13,520
this is not wrapped up in an id token

1261
00:47:13,520 --> 00:47:15,119
this is not a user info call this is

1262
00:47:15,119 --> 00:47:17,119
information that is just dropped

1263
00:47:17,119 --> 00:47:18,720
directly back to the client in a back

1264
00:47:18,720 --> 00:47:20,319
channel response

1265
00:47:20,319 --> 00:47:21,680
so that the client can just pick it up

1266
00:47:21,680 --> 00:47:23,599
and use it you can additionally as we

1267
00:47:23,599 --> 00:47:25,440
saw uh

1268
00:47:25,440 --> 00:47:27,200
do the assertions and things like that

1269
00:47:27,200 --> 00:47:29,359
you can of course call apis that are as

1270
00:47:29,359 --> 00:47:32,319
specialized as you want them to be

1271
00:47:32,319 --> 00:47:34,559
on top of this as well just in exactly

1272
00:47:34,559 --> 00:47:36,800
the same way that openid connect does

1273
00:47:36,800 --> 00:47:38,960
but one of the optimizations that can

1274
00:47:38,960 --> 00:47:40,960
app adds is this ability to send the

1275
00:47:40,960 --> 00:47:42,880
subject information directly back to the

1276
00:47:42,880 --> 00:47:45,119
client without the additional wrapping

1277
00:47:45,119 --> 00:47:46,480
for the cases where you don't want or

1278
00:47:46,480 --> 00:47:48,160
need that

1279
00:47:48,160 --> 00:47:52,160
um so that's what i have for these demos

1280
00:47:52,160 --> 00:47:57,118
erin if you're available to do your demo

1281
00:47:58,640 --> 00:48:00,960
sure

1282
00:48:02,880 --> 00:48:04,000
all right

1283
00:48:04,000 --> 00:48:07,839
i'm also going to share my screen

1284
00:48:12,000 --> 00:48:13,200
oh no

1285
00:48:13,200 --> 00:48:18,200
why did why did my permissions get reset

1286
00:48:21,359 --> 00:48:23,440
um i have to rejoin

1287
00:48:23,440 --> 00:48:25,599
uh it's telling us it's starting oh is

1288
00:48:25,599 --> 00:48:28,160
is it permissions on your side

1289
00:48:28,160 --> 00:48:30,240
it's my chrome permissions

1290
00:48:30,240 --> 00:48:33,040
i'll be right back

1291
00:48:33,359 --> 00:48:36,720
okay aaron is reconnecting

1292
00:48:38,079 --> 00:48:40,720
uh any questions on that demo before we

1293
00:48:40,720 --> 00:48:44,040
move forward

1294
00:48:51,280 --> 00:48:53,280
jonathan hoyland cloud player uh this is

1295
00:48:53,280 --> 00:48:55,920
just like that i was bringing up in chat

1296
00:48:55,920 --> 00:48:57,040
um

1297
00:48:57,040 --> 00:48:58,319
again i haven't read any of these

1298
00:48:58,319 --> 00:49:01,119
documents or anything right but um

1299
00:49:01,119 --> 00:49:05,040
the the message format the signatures

1300
00:49:05,040 --> 00:49:07,520
um do they include a

1301
00:49:07,520 --> 00:49:09,680
uh like a string that says like gina

1302
00:49:09,680 --> 00:49:12,000
such that you couldn't possibly use this

1303
00:49:12,000 --> 00:49:14,319
interface as an oracle

1304
00:49:14,319 --> 00:49:16,000
like if i if i have a dumb client that

1305
00:49:16,000 --> 00:49:17,599
will just sign anything

1306
00:49:17,599 --> 00:49:20,079
and i've wired that up to the network

1307
00:49:20,079 --> 00:49:21,359
does the

1308
00:49:21,359 --> 00:49:23,119
does the api

1309
00:49:23,119 --> 00:49:25,040
require the string gene app to always be

1310
00:49:25,040 --> 00:49:27,599
added or some distinguishing string

1311
00:49:27,599 --> 00:49:29,520
such that i can't persuade some client

1312
00:49:29,520 --> 00:49:31,440
to sign saying it shouldn't

1313
00:49:31,440 --> 00:49:32,960
or to produce a signature that it

1314
00:49:32,960 --> 00:49:34,880
shouldn't rather

1315
00:49:34,880 --> 00:49:36,800
so clients in general should not be

1316
00:49:36,800 --> 00:49:38,800
producing signatures on things on

1317
00:49:38,800 --> 00:49:40,400
messages that they aren't sending

1318
00:49:40,400 --> 00:49:42,640
themselves so

1319
00:49:42,640 --> 00:49:44,880
think of it more like making a tls

1320
00:49:44,880 --> 00:49:46,160
connection

1321
00:49:46,160 --> 00:49:47,280
um

1322
00:49:47,280 --> 00:49:48,800
it's only going to

1323
00:49:48,800 --> 00:49:52,400
your tls stack is only going to

1324
00:49:52,400 --> 00:49:54,400
encrypt stuff for

1325
00:49:54,400 --> 00:49:56,640
sockets that you're connecting to

1326
00:49:56,640 --> 00:49:57,440
or

1327
00:49:57,440 --> 00:49:58,400
transport

1328
00:49:58,400 --> 00:49:59,839
yelled at me for calling it sockets

1329
00:49:59,839 --> 00:50:01,760
before i don't remember the right term

1330
00:50:01,760 --> 00:50:03,280
um

1331
00:50:03,280 --> 00:50:05,280
whatever tls does

1332
00:50:05,280 --> 00:50:08,079
so tls does include long strings saying

1333
00:50:08,079 --> 00:50:12,400
you know tls13 message uh

1334
00:50:12,400 --> 00:50:14,720
and those mean that if somebody if i'm

1335
00:50:14,720 --> 00:50:16,400
talking to somebody malicious and i send

1336
00:50:16,400 --> 00:50:18,240
them a signed thing

1337
00:50:18,240 --> 00:50:19,839
they can't then turn around and give

1338
00:50:19,839 --> 00:50:21,440
that sign thing to some other service to

1339
00:50:21,440 --> 00:50:23,839
pretend to be me oh okay okay i think i

1340
00:50:23,839 --> 00:50:26,079
know what you mean i'm going to uh open

1341
00:50:26,079 --> 00:50:27,920
up the console so

1342
00:50:27,920 --> 00:50:30,960
i can show you guys

1343
00:50:31,440 --> 00:50:33,520
what that looks like my mo has some

1344
00:50:33,520 --> 00:50:35,839
details on on that

1345
00:50:35,839 --> 00:50:38,839
it shows the actual request being signed

1346
00:50:38,839 --> 00:50:41,760
right aaron is back but you guys talk

1347
00:50:41,760 --> 00:50:44,640
about this and then we'll let him

1348
00:50:44,640 --> 00:50:47,680
yeah aaron shows a lot of details um but

1349
00:50:47,680 --> 00:50:49,599
just inside the sba clan i know it's a

1350
00:50:49,599 --> 00:50:51,040
little bit small here

1351
00:50:51,040 --> 00:50:52,079
but

1352
00:50:52,079 --> 00:50:55,839
uh what's happening behind the scenes

1353
00:50:56,559 --> 00:50:57,920
this is the string that's actually

1354
00:50:57,920 --> 00:50:59,599
getting signed

1355
00:50:59,599 --> 00:51:01,920
so http message signatures is a detached

1356
00:51:01,920 --> 00:51:05,200
uh signature mechanism you generate this

1357
00:51:05,200 --> 00:51:07,520
on both the signer and the verifier side

1358
00:51:07,520 --> 00:51:09,599
independently based on the context of

1359
00:51:09,599 --> 00:51:10,640
the message

1360
00:51:10,640 --> 00:51:13,200
all right so when i am sending

1361
00:51:13,200 --> 00:51:16,319
a request i take that request message

1362
00:51:16,319 --> 00:51:18,880
and uh i decide that i am going to be

1363
00:51:18,880 --> 00:51:21,200
signing the method the target uri the

1364
00:51:21,200 --> 00:51:22,960
authorization header the content digest

1365
00:51:22,960 --> 00:51:25,040
header the content type header and then

1366
00:51:25,040 --> 00:51:26,880
finally these are the signature

1367
00:51:26,880 --> 00:51:28,559
parameters for the signature that i'm

1368
00:51:28,559 --> 00:51:30,880
creating right now

1369
00:51:30,880 --> 00:51:32,240
right

1370
00:51:32,240 --> 00:51:34,480
all of that gets concatenated together

1371
00:51:34,480 --> 00:51:37,920
in a in a very deterministic algorithm

1372
00:51:37,920 --> 00:51:40,400
i sign that and then i actually send

1373
00:51:40,400 --> 00:51:42,720
that signature

1374
00:51:42,720 --> 00:51:45,520
uh where is it so this is the signature

1375
00:51:45,520 --> 00:51:47,760
value right here

1376
00:51:47,760 --> 00:51:49,680
nice binary blob

1377
00:51:49,680 --> 00:51:51,280
alongside

1378
00:51:51,280 --> 00:51:52,559
the

1379
00:51:52,559 --> 00:51:55,359
uh where'd it go the signature input

1380
00:51:55,359 --> 00:51:57,680
line itself so that last line of the

1381
00:51:57,680 --> 00:52:00,480
signature gets sent out in clear text

1382
00:52:00,480 --> 00:52:04,559
kind of as a as a detached header

1383
00:52:04,559 --> 00:52:07,280
those get sent side by side

1384
00:52:07,280 --> 00:52:10,240
so that the verifier can then parse that

1385
00:52:10,240 --> 00:52:14,000
and and recreate that signed signature

1386
00:52:14,000 --> 00:52:16,079
or that signature base

1387
00:52:16,079 --> 00:52:20,319
verify the signature and go forward

1388
00:52:21,280 --> 00:52:22,559
so

1389
00:52:22,559 --> 00:52:24,079
aaron i know you're on the line but

1390
00:52:24,079 --> 00:52:26,160
thank you i'm guessing jaron do you want

1391
00:52:26,160 --> 00:52:27,599
to comment on this particular point or

1392
00:52:27,599 --> 00:52:28,559
should we let

1393
00:52:28,559 --> 00:52:31,200
aaron run this thing

1394
00:52:31,200 --> 00:52:33,040
what do you want to do

1395
00:52:33,040 --> 00:52:35,520
yes actually i do uh

1396
00:52:35,520 --> 00:52:37,520
i'll start with the class one that

1397
00:52:37,520 --> 00:52:40,400
signatures are reasonably

1398
00:52:40,400 --> 00:52:43,520
easy to write if you have a structured

1399
00:52:43,520 --> 00:52:45,119
field library

1400
00:52:45,119 --> 00:52:48,400
and with golang i was lucky to have one

1401
00:52:48,400 --> 00:52:50,319
so

1402
00:52:50,319 --> 00:52:52,720
um but otherwise it's really

1403
00:52:52,720 --> 00:52:56,000
difficult and then to

1404
00:52:56,000 --> 00:52:58,480
to jonathan's point

1405
00:52:58,480 --> 00:53:00,240
i

1406
00:53:00,240 --> 00:53:02,640
support this idea i think it's something

1407
00:53:02,640 --> 00:53:04,559
we should consider for message

1408
00:53:04,559 --> 00:53:05,920
signatures

1409
00:53:05,920 --> 00:53:08,319
and my example

1410
00:53:08,319 --> 00:53:10,319
of an analogous

1411
00:53:10,319 --> 00:53:16,800
context is the end time type in in jobs

1412
00:53:16,800 --> 00:53:20,559
again to to prevent

1413
00:53:20,559 --> 00:53:22,800
confusion

1414
00:53:22,800 --> 00:53:25,599
mix up attacks

1415
00:53:25,599 --> 00:53:28,960
where people are reusing

1416
00:53:34,400 --> 00:53:36,079
okay that was that was hard they don't

1417
00:53:36,079 --> 00:53:37,760
have that in the monitor up here but did

1418
00:53:37,760 --> 00:53:40,640
you guys hear that okay

1419
00:53:40,839 --> 00:53:42,960
okay um

1420
00:53:42,960 --> 00:53:45,680
all right so yeah i'm trying to type to

1421
00:53:45,680 --> 00:53:47,680
meet echo about that

1422
00:53:47,680 --> 00:53:50,559
but um all right so aaron do you want to

1423
00:53:50,559 --> 00:53:52,720
so do you want to i'm all set so aaron

1424
00:53:52,720 --> 00:53:56,279
aaron will be sure

1425
00:53:56,400 --> 00:53:59,599
i'm not sure i can

1426
00:53:59,599 --> 00:54:02,640
i don't seem to be able to grant

1427
00:54:02,640 --> 00:54:04,880
can you might need to remove justin

1428
00:54:04,880 --> 00:54:06,640
first

1429
00:54:06,640 --> 00:54:08,960
yeah i stopped sharing oh did i not no i

1430
00:54:08,960 --> 00:54:12,160
don't think you stopped cheering

1431
00:54:12,559 --> 00:54:14,800
there well

1432
00:54:14,800 --> 00:54:17,359
doesn't look like just there i i stopped

1433
00:54:17,359 --> 00:54:20,240
no sorry there we go

1434
00:54:20,240 --> 00:54:23,399
all right

1435
00:54:24,319 --> 00:54:26,079
okay tunnel vision

1436
00:54:26,079 --> 00:54:28,720
let's there we go there we go

1437
00:54:28,720 --> 00:54:31,839
so um hi aaron perecki um i want to

1438
00:54:31,839 --> 00:54:33,520
share what i

1439
00:54:33,520 --> 00:54:35,520
built during the hackathon so this is

1440
00:54:35,520 --> 00:54:37,440
going to be the two

1441
00:54:37,440 --> 00:54:39,680
versions of the same um

1442
00:54:39,680 --> 00:54:41,599
same code the command line version and

1443
00:54:41,599 --> 00:54:43,359
the web based

1444
00:54:43,359 --> 00:54:44,880
client version

1445
00:54:44,880 --> 00:54:47,440
um both of these are talking to the same

1446
00:54:47,440 --> 00:54:49,280
authorization server that justin's

1447
00:54:49,280 --> 00:54:50,880
client was talking to so just for

1448
00:54:50,880 --> 00:54:52,640
context you will see the same

1449
00:54:52,640 --> 00:54:53,920
authorization screen because it's

1450
00:54:53,920 --> 00:54:55,359
talking to the same

1451
00:54:55,359 --> 00:54:57,839
graph server

1452
00:54:57,839 --> 00:54:59,839
so the command line version starts off

1453
00:54:59,839 --> 00:55:01,760
with um

1454
00:55:01,760 --> 00:55:04,400
creating the request for you know what

1455
00:55:04,400 --> 00:55:06,319
it's what it's trying to get access to

1456
00:55:06,319 --> 00:55:09,119
so i have a uh command that's going to

1457
00:55:09,119 --> 00:55:10,880
do that and like i said mine is much

1458
00:55:10,880 --> 00:55:12,240
more verbose so i'll explain what's

1459
00:55:12,240 --> 00:55:13,520
going on here

1460
00:55:13,520 --> 00:55:17,119
um this is the string that is

1461
00:55:17,119 --> 00:55:19,200
being signed with the private key so it

1462
00:55:19,200 --> 00:55:22,000
generated the key that it's got in a

1463
00:55:22,000 --> 00:55:24,160
in a file here and this is the

1464
00:55:24,160 --> 00:55:26,799
string that's being signed so

1465
00:55:26,799 --> 00:55:28,000
um

1466
00:55:28,000 --> 00:55:29,040
i

1467
00:55:29,040 --> 00:55:31,040
uh this this is what ends up creating

1468
00:55:31,040 --> 00:55:33,200
that header

1469
00:55:33,200 --> 00:55:35,119
this is the http

1470
00:55:35,119 --> 00:55:37,359
signatures part which

1471
00:55:37,359 --> 00:55:39,119
uh plus i guess the content digest

1472
00:55:39,119 --> 00:55:40,079
header

1473
00:55:40,079 --> 00:55:42,000
and this was the part you increase the

1474
00:55:42,000 --> 00:55:45,680
font size this is almost

1475
00:55:45,839 --> 00:55:47,680
it's mostly um

1476
00:55:47,680 --> 00:55:50,079
mostly a blur anyway so

1477
00:55:50,079 --> 00:55:51,520
thank you

1478
00:55:51,520 --> 00:55:54,559
um hopefully that helps

1479
00:55:54,720 --> 00:55:56,000
um

1480
00:55:56,000 --> 00:55:56,720
so

1481
00:55:56,720 --> 00:55:58,960
the this is the http signatures part

1482
00:55:58,960 --> 00:56:00,640
this is the string being signed talking

1483
00:56:00,640 --> 00:56:03,200
about what url it's talking to

1484
00:56:03,200 --> 00:56:04,079
um

1485
00:56:04,079 --> 00:56:05,680
the different headers being signed etc

1486
00:56:05,680 --> 00:56:08,880
etc this was the part that took the most

1487
00:56:08,880 --> 00:56:10,400
the most work because i didn't find an

1488
00:56:10,400 --> 00:56:11,760
existing library for doing this

1489
00:56:11,760 --> 00:56:14,720
specifically http signatures part

1490
00:56:14,720 --> 00:56:16,400
thankfully i did find the library for

1491
00:56:16,400 --> 00:56:18,960
doing the actual crypto work as well as

1492
00:56:18,960 --> 00:56:20,079
building

1493
00:56:20,079 --> 00:56:23,680
uh this header which is the structured

1494
00:56:23,680 --> 00:56:26,799
header structure atp header spec

1495
00:56:26,799 --> 00:56:27,839
so

1496
00:56:27,839 --> 00:56:29,920
um it goes in creates a signature this

1497
00:56:29,920 --> 00:56:32,079
is the actual post request request it's

1498
00:56:32,079 --> 00:56:32,960
making

1499
00:56:32,960 --> 00:56:34,559
um and then here is the json that's part

1500
00:56:34,559 --> 00:56:37,119
of the actual gnap protocol so this is

1501
00:56:37,119 --> 00:56:40,000
where it's saying um i can send the user

1502
00:56:40,000 --> 00:56:42,960
to a url i'm trying to get an access

1503
00:56:42,960 --> 00:56:45,280
token and here is the info about the

1504
00:56:45,280 --> 00:56:46,720
client's key

1505
00:56:46,720 --> 00:56:48,960
and the name of the client

1506
00:56:48,960 --> 00:56:51,599
um the server was able to validate that

1507
00:56:51,599 --> 00:56:54,559
accept the key and then created this

1508
00:56:54,559 --> 00:56:56,400
response sending back to the client so

1509
00:56:56,400 --> 00:56:58,480
it's saying go over you know send the

1510
00:56:58,480 --> 00:57:01,839
user out to this url to continue

1511
00:57:01,839 --> 00:57:03,920
um or sorry this is the url to continue

1512
00:57:03,920 --> 00:57:04,799
at

1513
00:57:04,799 --> 00:57:05,599
the

1514
00:57:05,599 --> 00:57:07,200
command line app this is all sort of

1515
00:57:07,200 --> 00:57:09,359
debug up here um the command line app

1516
00:57:09,359 --> 00:57:10,640
what it would actually be doing is then

1517
00:57:10,640 --> 00:57:13,599
saying to the user visit this url

1518
00:57:13,599 --> 00:57:16,000
in your browser or

1519
00:57:16,000 --> 00:57:18,720
go to this url enter this code

1520
00:57:18,720 --> 00:57:20,880
and it can also take this complete url

1521
00:57:20,880 --> 00:57:23,119
and show it as a qr code for example

1522
00:57:23,119 --> 00:57:24,839
which might be a little bit more

1523
00:57:24,839 --> 00:57:29,680
friendly so i can go and

1524
00:57:29,680 --> 00:57:30,720
scan

1525
00:57:30,720 --> 00:57:34,640
that qr code in my phone so

1526
00:57:34,640 --> 00:57:36,640
well while aaron's well aaron's scanning

1527
00:57:36,640 --> 00:57:38,640
that i want to point out

1528
00:57:38,640 --> 00:57:39,599
in

1529
00:57:39,599 --> 00:57:42,240
case the audio was a little low the

1530
00:57:42,240 --> 00:57:46,000
url that's in the qr code is not the url

1531
00:57:46,000 --> 00:57:47,520
that you go to enter

1532
00:57:47,520 --> 00:57:48,799
the um

1533
00:57:48,799 --> 00:57:51,599
the user code into it is that full url

1534
00:57:51,599 --> 00:57:52,880
which has this

1535
00:57:52,880 --> 00:57:55,280
uh randomly generated blob at the end

1536
00:57:55,280 --> 00:57:57,280
which we're not expecting a user to type

1537
00:57:57,280 --> 00:57:59,440
or memorize or recognize

1538
00:57:59,440 --> 00:58:01,920
right so that could be a whole encoded

1539
00:58:01,920 --> 00:58:03,440
encrypted whatever

1540
00:58:03,440 --> 00:58:04,960
thing tacked on to the end of that

1541
00:58:04,960 --> 00:58:05,920
because

1542
00:58:05,920 --> 00:58:07,760
it's not expected to be user facing

1543
00:58:07,760 --> 00:58:09,359
directly

1544
00:58:09,359 --> 00:58:10,160
so

1545
00:58:10,160 --> 00:58:12,240
thus the previous question of should we

1546
00:58:12,240 --> 00:58:14,319
rename redirect because that is the

1547
00:58:14,319 --> 00:58:16,799
mechanism that's being used here because

1548
00:58:16,799 --> 00:58:18,480
but it's not a redirect sorry for the

1549
00:58:18,480 --> 00:58:19,440
interruption

1550
00:58:19,440 --> 00:58:20,960
please continue

1551
00:58:20,960 --> 00:58:24,240
you can see my phone screen right

1552
00:58:25,200 --> 00:58:26,559
yes okay

1553
00:58:26,559 --> 00:58:28,720
so um i'm looking at the same

1554
00:58:28,720 --> 00:58:30,319
authorization screen

1555
00:58:30,319 --> 00:58:32,640
that you saw on justin's demo and then i

1556
00:58:32,640 --> 00:58:35,520
can click approve and because there's no

1557
00:58:35,520 --> 00:58:37,920
way for the server to send my phone back

1558
00:58:37,920 --> 00:58:40,079
anywhere useful it just says go back to

1559
00:58:40,079 --> 00:58:41,280
the device

1560
00:58:41,280 --> 00:58:42,480
so

1561
00:58:42,480 --> 00:58:44,720
at this point the command line app needs

1562
00:58:44,720 --> 00:58:46,720
to go and actually do a

1563
00:58:46,720 --> 00:58:48,319
poll

1564
00:58:48,319 --> 00:58:51,200
so um

1565
00:58:51,200 --> 00:58:53,119
this little thing is in the way there we

1566
00:58:53,119 --> 00:58:54,240
go

1567
00:58:54,240 --> 00:58:55,040
so

1568
00:58:55,040 --> 00:58:57,359
i will instead do a poll and it's going

1569
00:58:57,359 --> 00:59:00,960
to do a poll with um

1570
00:59:02,400 --> 00:59:05,359
to the here we go to the continue

1571
00:59:05,359 --> 00:59:06,880
endpoint which i got back in that first

1572
00:59:06,880 --> 00:59:09,119
response

1573
00:59:09,119 --> 00:59:11,520
and it sends back a token that it got in

1574
00:59:11,520 --> 00:59:12,960
that first response

1575
00:59:12,960 --> 00:59:15,760
and uh does this whole signing

1576
00:59:15,760 --> 00:59:18,640
dance again and because i approved the

1577
00:59:18,640 --> 00:59:21,040
request on my phone it actually got back

1578
00:59:21,040 --> 00:59:24,240
the access token now so now the app is

1579
00:59:24,240 --> 00:59:26,240
considered login and there is the access

1580
00:59:26,240 --> 00:59:28,160
token

1581
00:59:28,160 --> 00:59:29,760
um i guess i should have shown what

1582
00:59:29,760 --> 00:59:30,960
happens if i

1583
00:59:30,960 --> 00:59:34,559
don't approve the request

1584
00:59:34,559 --> 00:59:36,880
first so if i pull with a pending

1585
00:59:36,880 --> 00:59:38,160
request

1586
00:59:38,160 --> 00:59:40,319
uh the response is

1587
00:59:40,319 --> 00:59:41,920
sort of looks the same there's no access

1588
00:59:41,920 --> 00:59:44,079
token in this response there's just a

1589
00:59:44,079 --> 00:59:45,280
um

1590
00:59:45,280 --> 00:59:47,040
you know the continue url so it's

1591
00:59:47,040 --> 00:59:48,799
basically saying try again

1592
00:59:48,799 --> 00:59:50,640
and if i keep doing that it'll keep

1593
00:59:50,640 --> 00:59:52,720
saying pending until i actually go and

1594
00:59:52,720 --> 00:59:54,480
approve that request

1595
00:59:54,480 --> 00:59:57,440
so that is the command line

1596
00:59:57,440 --> 00:59:58,480
um

1597
00:59:58,480 --> 01:00:00,960
demo and then we can look at the same

1598
01:00:00,960 --> 01:00:01,920
thing

1599
01:00:01,920 --> 01:00:03,359
on

1600
01:00:03,359 --> 01:00:05,280
the web

1601
01:00:05,280 --> 01:00:06,640
so now this is

1602
01:00:06,640 --> 01:00:08,799
i'm in the web browser i'm talking to

1603
01:00:08,799 --> 01:00:10,160
this application it's actually using the

1604
01:00:10,160 --> 01:00:10,960
same

1605
01:00:10,960 --> 01:00:12,880
client library underneath but now this

1606
01:00:12,880 --> 01:00:14,079
one's running the web browser so i'm

1607
01:00:14,079 --> 01:00:15,839
going to click log in we're going to see

1608
01:00:15,839 --> 01:00:18,480
the same verbose debugging

1609
01:00:18,480 --> 01:00:20,400
of

1610
01:00:20,400 --> 01:00:22,799
what it's sending this time it's sending

1611
01:00:22,799 --> 01:00:24,960
it's saying we can start

1612
01:00:24,960 --> 01:00:26,720
the user by redirecting them somewhere

1613
01:00:26,720 --> 01:00:28,720
and we can finish the flow by

1614
01:00:28,720 --> 01:00:32,400
redirecting them back to localhost 8080.

1615
01:00:32,400 --> 01:00:34,160
so it's gonna we're telling the

1616
01:00:34,160 --> 01:00:35,599
authorization server to send the user

1617
01:00:35,599 --> 01:00:36,880
back here

1618
01:00:36,880 --> 01:00:38,720
after they log in which is different

1619
01:00:38,720 --> 01:00:40,240
from the command line which doesn't have

1620
01:00:40,240 --> 01:00:41,680
a way to do that

1621
01:00:41,680 --> 01:00:43,119
so

1622
01:00:43,119 --> 01:00:44,160
here's the response from the

1623
01:00:44,160 --> 01:00:46,000
authorization server saying all right go

1624
01:00:46,000 --> 01:00:47,440
send the user here

1625
01:00:47,440 --> 01:00:49,280
um and because we're in a browser i can

1626
01:00:49,280 --> 01:00:51,839
just put that as a link on this button

1627
01:00:51,839 --> 01:00:53,200
you know in a real app i would obviously

1628
01:00:53,200 --> 01:00:55,520
just send them right there with no

1629
01:00:55,520 --> 01:00:57,040
interstitial

1630
01:00:57,040 --> 01:00:58,400
we click on this we see the same

1631
01:00:58,400 --> 01:01:00,559
approval screen click approve and this

1632
01:01:00,559 --> 01:01:02,400
is going to now redirect the user back

1633
01:01:02,400 --> 01:01:05,280
in this browser back to the redirect url

1634
01:01:05,280 --> 01:01:06,880
which you probably can't read the

1635
01:01:06,880 --> 01:01:08,960
address bar but up in the address bar

1636
01:01:08,960 --> 01:01:12,000
there is a a hash and interact ref and

1637
01:01:12,000 --> 01:01:14,480
those two things combined work out to

1638
01:01:14,480 --> 01:01:16,799
the client being able to say cool uh

1639
01:01:16,799 --> 01:01:20,319
let's go make that request to um

1640
01:01:20,319 --> 01:01:22,000
to the continue endpoint

1641
01:01:22,000 --> 01:01:24,400
this is the thing that i got in the url

1642
01:01:24,400 --> 01:01:25,839
and then the response is now the access

1643
01:01:25,839 --> 01:01:27,200
token

1644
01:01:27,200 --> 01:01:28,160
so

1645
01:01:28,160 --> 01:01:30,240
uh now we're logged in and there was

1646
01:01:30,240 --> 01:01:31,760
more info in this response because i

1647
01:01:31,760 --> 01:01:33,920
requested subject info for example

1648
01:01:33,920 --> 01:01:35,520
in this app

1649
01:01:35,520 --> 01:01:36,400
and

1650
01:01:36,400 --> 01:01:37,440
um

1651
01:01:37,440 --> 01:01:39,760
yeah we're logged in in the command line

1652
01:01:39,760 --> 01:01:41,520
up now so

1653
01:01:41,520 --> 01:01:43,759
um

1654
01:01:50,799 --> 01:01:54,480
right four live demos actually worked

1655
01:01:54,480 --> 01:01:57,119
quite impressive so i we did have sam

1656
01:01:57,119 --> 01:01:59,839
weiner at the q for a little bit but i

1657
01:01:59,839 --> 01:02:01,680
guess he stepped away so

1658
01:02:01,680 --> 01:02:02,559
um

1659
01:02:02,559 --> 01:02:06,480
i think that means that we're at future

1660
01:02:06,480 --> 01:02:07,680
work right

1661
01:02:07,680 --> 01:02:09,839
um where is it

1662
01:02:09,839 --> 01:02:11,839
yeah or is it embedding now

1663
01:02:11,839 --> 01:02:13,839
uh it's future work future work all

1664
01:02:13,839 --> 01:02:16,400
right um

1665
01:02:16,960 --> 01:02:21,640
i'll share and you can request control

1666
01:02:30,640 --> 01:02:32,319
the thing is i totally get why they do

1667
01:02:32,319 --> 01:02:35,319
that

1668
01:02:35,359 --> 01:02:37,599
so should have control

1669
01:02:37,599 --> 01:02:39,599
all right um

1670
01:02:39,599 --> 01:02:41,680
so now that we've just waited to beat no

1671
01:02:41,680 --> 01:02:43,200
nobody in the queue for questions on the

1672
01:02:43,200 --> 01:02:45,599
hackathon results

1673
01:02:45,599 --> 01:02:47,280
all right

1674
01:02:47,280 --> 01:02:49,039
okay so

1675
01:02:49,039 --> 01:02:52,640
where do we go from here um

1676
01:02:56,160 --> 01:02:57,920
that's what we're going to talk about

1677
01:02:57,920 --> 01:03:00,839
i put a lot into that slide

1678
01:03:00,839 --> 01:03:03,760
um so

1679
01:03:03,760 --> 01:03:06,319
the biggest thing that the editors did

1680
01:03:06,319 --> 01:03:07,920
um

1681
01:03:07,920 --> 01:03:10,240
between last ietf and now

1682
01:03:10,240 --> 01:03:12,720
is we went through

1683
01:03:12,720 --> 01:03:14,720
all of the

1684
01:03:14,720 --> 01:03:17,920
existing github issues

1685
01:03:17,920 --> 01:03:19,119
and

1686
01:03:19,119 --> 01:03:23,359
triaged them and assigned

1687
01:03:23,760 --> 01:03:25,280
little little less than half of them at

1688
01:03:25,280 --> 01:03:26,559
the time

1689
01:03:26,559 --> 01:03:28,640
to ourselves as

1690
01:03:28,640 --> 01:03:30,079
things that like we are going to go

1691
01:03:30,079 --> 01:03:31,119
through

1692
01:03:31,119 --> 01:03:33,359
and close this specific one and figure

1693
01:03:33,359 --> 01:03:34,880
out what's going on we're going to keep

1694
01:03:34,880 --> 01:03:36,240
doing that

1695
01:03:36,240 --> 01:03:37,839
you know it's um

1696
01:03:37,839 --> 01:03:40,480
it's it's a lot of overhead uh for us

1697
01:03:40,480 --> 01:03:42,720
but it's also forcing us to be very

1698
01:03:42,720 --> 01:03:43,680
thorough

1699
01:03:43,680 --> 01:03:45,839
about how we're addressing everything so

1700
01:03:45,839 --> 01:03:47,200
we're gonna we're gonna plan to keep

1701
01:03:47,200 --> 01:03:48,240
doing that

1702
01:03:48,240 --> 01:03:50,640
um but there are a couple of

1703
01:03:50,640 --> 01:03:54,720
sort of larger issues that we know that

1704
01:03:54,720 --> 01:03:57,200
uh we need to address in this to in

1705
01:03:57,200 --> 01:03:58,640
order for this to be

1706
01:03:58,640 --> 01:04:01,119
a you know rich full and complete

1707
01:04:01,119 --> 01:04:02,880
protocol

1708
01:04:02,880 --> 01:04:04,160
um

1709
01:04:04,160 --> 01:04:05,520
the biggest thing

1710
01:04:05,520 --> 01:04:08,240
and this is something that i am going i

1711
01:04:08,240 --> 01:04:09,440
am personally going to be taking the

1712
01:04:09,440 --> 01:04:12,960
lead on and that is the uh

1713
01:04:12,960 --> 01:04:16,480
life cycle of these grant requests

1714
01:04:16,480 --> 01:04:18,960
um because right now there's an implied

1715
01:04:18,960 --> 01:04:21,839
life cycle uh you make a request you

1716
01:04:21,839 --> 01:04:23,520
continue it

1717
01:04:23,520 --> 01:04:26,799
you can update it you can uh you know

1718
01:04:26,799 --> 01:04:29,280
revoke it and all this other stuff

1719
01:04:29,280 --> 01:04:30,799
we're just not explicit about the fact

1720
01:04:30,799 --> 01:04:33,119
that it is stateful it's inherently

1721
01:04:33,119 --> 01:04:34,240
stateful

1722
01:04:34,240 --> 01:04:36,400
so what we're going to do is we're going

1723
01:04:36,400 --> 01:04:39,119
to add that discussion explicitly

1724
01:04:39,119 --> 01:04:41,280
into the spec

1725
01:04:41,280 --> 01:04:43,520
this may end up actually having uh

1726
01:04:43,520 --> 01:04:45,760
syntactic and semantic

1727
01:04:45,760 --> 01:04:49,119
knock-on effects to the protocol itself

1728
01:04:49,119 --> 01:04:51,119
specifically

1729
01:04:51,119 --> 01:04:53,200
we want to be and we know we need to be

1730
01:04:53,200 --> 01:04:55,359
much more precise

1731
01:04:55,359 --> 01:04:58,000
about what you're allowed to send

1732
01:04:58,000 --> 01:05:00,160
at each stage of the protocol

1733
01:05:00,160 --> 01:05:02,640
so if i am doing for example a

1734
01:05:02,640 --> 01:05:04,480
continuation request am i allowed to

1735
01:05:04,480 --> 01:05:07,760
send a new client key like right then

1736
01:05:07,760 --> 01:05:10,400
that probably doesn't make any sense

1737
01:05:10,400 --> 01:05:12,880
right now you're kind of allowed to and

1738
01:05:12,880 --> 01:05:15,119
kind of not but if i'm making a

1739
01:05:15,119 --> 01:05:17,520
continuation request and i send you a

1740
01:05:17,520 --> 01:05:18,319
new

1741
01:05:18,319 --> 01:05:20,720
interaction block

1742
01:05:20,720 --> 01:05:22,400
the client might actually

1743
01:05:22,400 --> 01:05:25,039
have some additional interaction method

1744
01:05:25,039 --> 01:05:27,200
that it realizes it can do now based on

1745
01:05:27,200 --> 01:05:28,880
what the authorization server has told

1746
01:05:28,880 --> 01:05:30,559
it you know it has new bits of

1747
01:05:30,559 --> 01:05:33,359
information that it that it's saying i

1748
01:05:33,359 --> 01:05:34,960
can share this

1749
01:05:34,960 --> 01:05:37,599
so when when do we allow that kind of

1750
01:05:37,599 --> 01:05:40,079
thing right now it's very ambiguous and

1751
01:05:40,079 --> 01:05:41,440
and you're just you're kind of allowed

1752
01:05:41,440 --> 01:05:42,960
to send it and the a.s is kind of

1753
01:05:42,960 --> 01:05:44,319
allowed to deal with it

1754
01:05:44,319 --> 01:05:47,039
uh however it sees fit we need this to

1755
01:05:47,039 --> 01:05:49,039
be in order for this to be interoperable

1756
01:05:49,039 --> 01:05:50,960
at this level

1757
01:05:50,960 --> 01:05:52,720
that needs to be much much more

1758
01:05:52,720 --> 01:05:54,400
precisely defined and so that's going to

1759
01:05:54,400 --> 01:05:57,119
be one of the biggest things

1760
01:05:57,119 --> 01:05:59,680
that we are targeting for change between

1761
01:05:59,680 --> 01:06:04,240
now and iatf 114 this summer

1762
01:06:05,200 --> 01:06:07,280
we've got a good feel for what this

1763
01:06:07,280 --> 01:06:09,039
looks like the editors have been

1764
01:06:09,039 --> 01:06:10,880
discussing this for a while and have

1765
01:06:10,880 --> 01:06:14,640
talked about different aspects of this

1766
01:06:14,799 --> 01:06:17,520
this is kind of the life cycle that we

1767
01:06:17,520 --> 01:06:19,280
have in mind

1768
01:06:19,280 --> 01:06:20,799
right um

1769
01:06:20,799 --> 01:06:23,839
this is a bit of a straw man this is

1770
01:06:23,839 --> 01:06:25,280
hardly final

1771
01:06:25,280 --> 01:06:27,280
but the idea being

1772
01:06:27,280 --> 01:06:28,640
once you

1773
01:06:28,640 --> 01:06:30,799
create a request

1774
01:06:30,799 --> 01:06:32,559
if you need interaction it goes into

1775
01:06:32,559 --> 01:06:34,400
this pending approval state where it

1776
01:06:34,400 --> 01:06:37,200
stays until somebody approves it

1777
01:06:37,200 --> 01:06:39,280
and then it's approved that's where you

1778
01:06:39,280 --> 01:06:41,039
get tokens and eventually gets thrown

1779
01:06:41,039 --> 01:06:41,760
out

1780
01:06:41,760 --> 01:06:43,520
if you create a request and it doesn't

1781
01:06:43,520 --> 01:06:44,960
need interaction it doesn't need

1782
01:06:44,960 --> 01:06:47,200
external approval so this is the oauth

1783
01:06:47,200 --> 01:06:49,520
client credentials or assertions or some

1784
01:06:49,520 --> 01:06:51,839
of the more advanced uma flows

1785
01:06:51,839 --> 01:06:54,960
um that gnap can do natively

1786
01:06:54,960 --> 01:06:56,720
then you just go straight to approved

1787
01:06:56,720 --> 01:06:58,079
and that's where you're getting tokens

1788
01:06:58,079 --> 01:07:00,880
and here you're you can continue to pull

1789
01:07:00,880 --> 01:07:02,880
it and get additional access tokens and

1790
01:07:02,880 --> 01:07:04,480
things like that

1791
01:07:04,480 --> 01:07:06,720
however once you're approved there are

1792
01:07:06,720 --> 01:07:09,359
cases where you want to update that

1793
01:07:09,359 --> 01:07:12,319
existing grant

1794
01:07:12,559 --> 01:07:13,359
and

1795
01:07:13,359 --> 01:07:15,760
that might move you back up into pending

1796
01:07:15,760 --> 01:07:18,079
approval because you're asking for more

1797
01:07:18,079 --> 01:07:19,440
you're asking for additional things that

1798
01:07:19,440 --> 01:07:21,039
haven't been approved yet

1799
01:07:21,039 --> 01:07:22,880
so instead of kicking you out of the

1800
01:07:22,880 --> 01:07:24,640
system entirely and saying go create a

1801
01:07:24,640 --> 01:07:25,760
new thing

1802
01:07:25,760 --> 01:07:28,319
uh get app is designed to allow this

1803
01:07:28,319 --> 01:07:29,359
sort of

1804
01:07:29,359 --> 01:07:32,400
you know a cleaner fallback

1805
01:07:32,400 --> 01:07:34,480
uh into say okay you're already here

1806
01:07:34,480 --> 01:07:37,039
just go interact again and this is why

1807
01:07:37,039 --> 01:07:38,400
we need to have

1808
01:07:38,400 --> 01:07:41,200
clarity about when you're allowed to

1809
01:07:41,200 --> 01:07:43,119
send interact blocks and things like

1810
01:07:43,119 --> 01:07:46,480
that inside the protocol itself

1811
01:07:46,480 --> 01:07:48,480
um

1812
01:07:48,480 --> 01:07:50,880
so again this is i will be sending this

1813
01:07:50,880 --> 01:07:52,480
diagram out to the list and hopefully

1814
01:07:52,480 --> 01:07:54,839
starting a conversation on this as well

1815
01:07:54,839 --> 01:07:58,480
um uh i surprised my co-editors with

1816
01:07:58,480 --> 01:08:01,119
this diagram i think yesterday afternoon

1817
01:08:01,119 --> 01:08:04,559
so when i say we came up with it

1818
01:08:04,559 --> 01:08:05,920
i'm hoping they're not going to yell at

1819
01:08:05,920 --> 01:08:07,680
me

1820
01:08:07,680 --> 01:08:09,039
but again this is a straw man and

1821
01:08:09,039 --> 01:08:10,640
hopefully we can

1822
01:08:10,640 --> 01:08:12,799
uh we can

1823
01:08:12,799 --> 01:08:14,160
improve this

1824
01:08:14,160 --> 01:08:17,839
there's a question from jabba

1825
01:08:17,920 --> 01:08:20,479
euron says i was going to ask if the

1826
01:08:20,479 --> 01:08:22,158
protocol is ready to freeze to allow

1827
01:08:22,158 --> 01:08:24,479
researchers to focus on proof's attacks

1828
01:08:24,479 --> 01:08:25,839
but if we're still changing the state

1829
01:08:25,839 --> 01:08:27,759
machine we're not ready to be clear i'm

1830
01:08:27,759 --> 01:08:29,920
supportive of that

1831
01:08:29,920 --> 01:08:30,719
okay

1832
01:08:30,719 --> 01:08:33,439
yeah thank you yarn um

1833
01:08:33,439 --> 01:08:35,520
i don't i think we're clarifying the

1834
01:08:35,520 --> 01:08:36,640
state machine

1835
01:08:36,640 --> 01:08:39,439
but i uh but i agree that until this is

1836
01:08:39,439 --> 01:08:40,799
this is fully

1837
01:08:40,799 --> 01:08:43,120
formalized um

1838
01:08:43,120 --> 01:08:45,520
you know uh we don't have quite all of

1839
01:08:45,520 --> 01:08:46,880
the tools to

1840
01:08:46,880 --> 01:08:48,399
do the full

1841
01:08:48,399 --> 01:08:50,960
static formal analysis of the protocol i

1842
01:08:50,960 --> 01:08:52,560
think that this will actually help us a

1843
01:08:52,560 --> 01:08:55,040
lot like once we get this written down

1844
01:08:55,040 --> 01:08:56,560
this is the kind of thing that feeds

1845
01:08:56,560 --> 01:08:59,040
into formal analysis engines

1846
01:08:59,040 --> 01:09:00,799
and that will help us from a security

1847
01:09:00,799 --> 01:09:04,080
perspective and also from um

1848
01:09:04,080 --> 01:09:06,158
from a developer and implementer

1849
01:09:06,158 --> 01:09:07,839
perspective being able to look at this

1850
01:09:07,839 --> 01:09:09,679
and say like this is where i am right

1851
01:09:09,679 --> 01:09:11,439
now inside this process here's what i

1852
01:09:11,439 --> 01:09:12,960
need to do next

1853
01:09:12,960 --> 01:09:14,000
right

1854
01:09:14,000 --> 01:09:15,920
one of the uh

1855
01:09:15,920 --> 01:09:18,560
one of the things that's great about

1856
01:09:18,560 --> 01:09:20,960
oauth 2 is that it's a tends to be a

1857
01:09:20,960 --> 01:09:22,960
very linear state process

1858
01:09:22,960 --> 01:09:24,960
it's just you go you ask maybe you

1859
01:09:24,960 --> 01:09:26,319
refresh

1860
01:09:26,319 --> 01:09:28,479
and that's kind of it where oauth falls

1861
01:09:28,479 --> 01:09:30,479
apart is that people start bolting on

1862
01:09:30,479 --> 01:09:33,198
things to get these loopbacks back into

1863
01:09:33,198 --> 01:09:35,920
the system which sometimes means just go

1864
01:09:35,920 --> 01:09:38,080
start over from the beginning in ganap

1865
01:09:38,080 --> 01:09:40,158
we want to actually have that

1866
01:09:40,158 --> 01:09:42,640
type of structure be explicitly

1867
01:09:42,640 --> 01:09:45,600
declared inside here

1868
01:09:45,600 --> 01:09:47,198
all right

1869
01:09:47,198 --> 01:09:49,198
key rotation is something we've been

1870
01:09:49,198 --> 01:09:52,158
kind of talking about for a long time

1871
01:09:52,158 --> 01:09:53,520
this whole state machine i think will

1872
01:09:53,520 --> 01:09:55,600
actually help us with that uh we now

1873
01:09:55,600 --> 01:09:57,679
have a much clearer model of where the

1874
01:09:57,679 --> 01:10:00,320
keys are associated um and what they're

1875
01:10:00,320 --> 01:10:03,360
associated with inside the um

1876
01:10:03,360 --> 01:10:05,040
inside the protocol

1877
01:10:05,040 --> 01:10:07,120
and this is something that i actually

1878
01:10:07,120 --> 01:10:09,679
realized during the hackathon

1879
01:10:09,679 --> 01:10:12,480
um the way that i'm associating keys in

1880
01:10:12,480 --> 01:10:14,239
my implementation of the authorization

1881
01:10:14,239 --> 01:10:15,360
server

1882
01:10:15,360 --> 01:10:18,080
probably doesn't actually match the uh

1883
01:10:18,080 --> 01:10:20,800
the model implied by the uh

1884
01:10:20,800 --> 01:10:22,800
implied by the specification so i need

1885
01:10:22,800 --> 01:10:24,239
to update my code and we need to make

1886
01:10:24,239 --> 01:10:26,640
the special specification clearer

1887
01:10:26,640 --> 01:10:29,120
about where these things are associated

1888
01:10:29,120 --> 01:10:30,800
so that people don't make the same

1889
01:10:30,800 --> 01:10:33,520
mistakes that i did

1890
01:10:33,520 --> 01:10:34,480
and

1891
01:10:34,480 --> 01:10:36,800
so that if everybody is doing this they

1892
01:10:36,800 --> 01:10:39,360
can do it in a predictable way

1893
01:10:39,360 --> 01:10:40,719
right

1894
01:10:40,719 --> 01:10:43,199
key rotation needs to be handled for

1895
01:10:43,199 --> 01:10:46,159
access tokens and potentially for client

1896
01:10:46,159 --> 01:10:49,440
instances themselves

1897
01:10:49,600 --> 01:10:51,040
since we also have different key

1898
01:10:51,040 --> 01:10:52,960
proofing mechanisms inside of gnapp and

1899
01:10:52,960 --> 01:10:55,040
that is an explicitly extensible

1900
01:10:55,040 --> 01:10:58,719
plugable part of the protocol

1901
01:10:58,719 --> 01:11:01,040
we need to be able to handle these all

1902
01:11:01,040 --> 01:11:03,120
of these different methods originally

1903
01:11:03,120 --> 01:11:04,640
the editors were trying to come up with

1904
01:11:04,640 --> 01:11:07,280
one grand unified way to rotate keys

1905
01:11:07,280 --> 01:11:10,000
across all proofing methods and whatnot

1906
01:11:10,000 --> 01:11:11,600
we actually no longer think that that

1907
01:11:11,600 --> 01:11:14,800
actu that that makes sense um uh because

1908
01:11:14,800 --> 01:11:16,400
each of these different proofing methods

1909
01:11:16,400 --> 01:11:18,560
has very very different properties in

1910
01:11:18,560 --> 01:11:21,040
terms of uh key presentation and key

1911
01:11:21,040 --> 01:11:22,320
verification

1912
01:11:22,320 --> 01:11:26,080
um so what we're now proposing

1913
01:11:26,080 --> 01:11:27,760
which we need to we need to write the

1914
01:11:27,760 --> 01:11:29,679
text for what we're now proposing is

1915
01:11:29,679 --> 01:11:32,239
different ways to handle key rotation

1916
01:11:32,239 --> 01:11:34,719
based on the proofing mechanism that

1917
01:11:34,719 --> 01:11:37,199
that you have in use this of course

1918
01:11:37,199 --> 01:11:38,719
raises the question of what if i want to

1919
01:11:38,719 --> 01:11:41,600
change proofing mechanisms say i'm doing

1920
01:11:41,600 --> 01:11:45,440
uh htv sig and i need to switch to mtls

1921
01:11:45,440 --> 01:11:46,480
for

1922
01:11:46,480 --> 01:11:48,159
who knows what reason

1923
01:11:48,159 --> 01:11:49,600
um

1924
01:11:49,600 --> 01:11:50,960
is that something that can app is going

1925
01:11:50,960 --> 01:11:53,280
to allow natively or is knapp going to

1926
01:11:53,280 --> 01:11:55,679
say if you want to do that just start

1927
01:11:55,679 --> 01:11:58,080
over pretend it's a brand new key

1928
01:11:58,080 --> 01:11:59,440
um

1929
01:11:59,440 --> 01:12:00,800
that's that's a bridge we're gonna have

1930
01:12:00,800 --> 01:12:02,719
to cross when we uh when we actually get

1931
01:12:02,719 --> 01:12:03,840
through

1932
01:12:03,840 --> 01:12:07,040
um this section

1933
01:12:07,040 --> 01:12:08,400
okay

1934
01:12:08,400 --> 01:12:10,640
now for mandatory to implement

1935
01:12:10,640 --> 01:12:13,600
this is something that um

1936
01:12:13,600 --> 01:12:15,840
uh the editors have uh

1937
01:12:15,840 --> 01:12:18,400
gone back and forth on a lot

1938
01:12:18,400 --> 01:12:20,320
and

1939
01:12:20,320 --> 01:12:21,600
what we are

1940
01:12:21,600 --> 01:12:23,440
we still don't have mandatory to

1941
01:12:23,440 --> 01:12:25,440
implement text um

1942
01:12:25,440 --> 01:12:29,360
partially because gnapp is such a

1943
01:12:29,360 --> 01:12:32,480
an incredibly flexible design

1944
01:12:32,480 --> 01:12:34,560
uh it's meant to be used in lots of

1945
01:12:34,560 --> 01:12:37,840
different kinds of deployments

1946
01:12:39,199 --> 01:12:40,880
but

1947
01:12:40,880 --> 01:12:42,560
what we think actually makes a lot of

1948
01:12:42,560 --> 01:12:44,960
sense is to borrow something from openid

1949
01:12:44,960 --> 01:12:46,400
connect

1950
01:12:46,400 --> 01:12:48,800
openid connect has an implementation

1951
01:12:48,800 --> 01:12:51,760
consideration section which includes

1952
01:12:51,760 --> 01:12:54,560
profiles that say if you are doing this

1953
01:12:54,560 --> 01:12:56,320
type of application here's all of the

1954
01:12:56,320 --> 01:12:58,640
stuff you have to include

1955
01:12:58,640 --> 01:13:01,280
right and that's not to say that it is

1956
01:13:01,280 --> 01:13:03,280
going to necessarily be

1957
01:13:03,280 --> 01:13:05,679
like everybody follows that but

1958
01:13:05,679 --> 01:13:08,480
providing those base recipes

1959
01:13:08,480 --> 01:13:11,280
we think is uh the editors are at least

1960
01:13:11,280 --> 01:13:14,239
proposing that that is a reasonable way

1961
01:13:14,239 --> 01:13:15,600
to approach

1962
01:13:15,600 --> 01:13:18,480
uh the mandatory to implement question

1963
01:13:18,480 --> 01:13:21,120
for uh for a protocol as flexible as

1964
01:13:21,120 --> 01:13:23,040
this

1965
01:13:23,040 --> 01:13:24,800
um

1966
01:13:24,800 --> 01:13:28,800
so anybody in the queue for that no

1967
01:13:30,840 --> 01:13:34,719
okay extensions are another really big

1968
01:13:34,719 --> 01:13:36,960
part of the spec uh this doesn't really

1969
01:13:36,960 --> 01:13:39,679
change the core spec this changes how

1970
01:13:39,679 --> 01:13:42,320
um designers and implementers interact

1971
01:13:42,320 --> 01:13:44,320
with the spec itself

1972
01:13:44,320 --> 01:13:45,760
uh are you allowed to ignore an

1973
01:13:45,760 --> 01:13:48,239
extension that you've never heard of

1974
01:13:48,239 --> 01:13:50,159
um that seems like a sensible thing to

1975
01:13:50,159 --> 01:13:51,600
do but what if that is the extension

1976
01:13:51,600 --> 01:13:53,679
that actually adds security like oh

1977
01:13:53,679 --> 01:13:56,560
office 2 uh struggles with pixie right

1978
01:13:56,560 --> 01:13:57,360
now

1979
01:13:57,360 --> 01:13:59,520
if the as doesn't know pixie it ignores

1980
01:13:59,520 --> 01:14:00,880
pixie and then you don't get any of the

1981
01:14:00,880 --> 01:14:02,880
benefits but you think you are getting

1982
01:14:02,880 --> 01:14:03,920
them

1983
01:14:03,920 --> 01:14:05,760
from a client perspective

1984
01:14:05,760 --> 01:14:08,239
so this is not an as easy a question as

1985
01:14:08,239 --> 01:14:11,600
it seems on the surface um we are

1986
01:14:11,600 --> 01:14:12,800
at a

1987
01:14:12,800 --> 01:14:14,719
spot in um

1988
01:14:14,719 --> 01:14:16,640
in the development of gnapp that

1989
01:14:16,640 --> 01:14:18,640
we think there's a lot that we can do to

1990
01:14:18,640 --> 01:14:20,800
make this clearer based on what we've

1991
01:14:20,800 --> 01:14:22,320
learned from other protocols and other

1992
01:14:22,320 --> 01:14:25,519
systems and other stacks

1993
01:14:25,840 --> 01:14:27,520
and

1994
01:14:27,520 --> 01:14:29,600
the editors are currently proposing to

1995
01:14:29,600 --> 01:14:31,280
kind of

1996
01:14:31,280 --> 01:14:34,239
create a section about how to add new

1997
01:14:34,239 --> 01:14:36,000
features and functions to gnapp and what

1998
01:14:36,000 --> 01:14:37,920
you're allowed to do with all of the

1999
01:14:37,920 --> 01:14:39,679
different parts of the protocol

2000
01:14:39,679 --> 01:14:41,360
right now we have a bunch of scattered

2001
01:14:41,360 --> 01:14:43,440
sections that says and this can be

2002
01:14:43,440 --> 01:14:46,000
extended and it waves to iana and that's

2003
01:14:46,000 --> 01:14:46,800
it

2004
01:14:46,800 --> 01:14:48,640
we obviously need a lot more than that

2005
01:14:48,640 --> 01:14:49,520
um

2006
01:14:49,520 --> 01:14:50,400
and

2007
01:14:50,400 --> 01:14:51,520
that's that's what we're going to plan

2008
01:14:51,520 --> 01:14:52,560
to do

2009
01:14:52,560 --> 01:14:54,400
we do think that we have really good

2010
01:14:54,400 --> 01:14:56,800
extension points though from what we've

2011
01:14:56,800 --> 01:14:59,520
seen and what we've been talking to

2012
01:14:59,520 --> 01:15:01,199
the people who are building this out

2013
01:15:01,199 --> 01:15:03,199
into their out into their systems right

2014
01:15:03,199 --> 01:15:04,560
now

2015
01:15:04,560 --> 01:15:06,400
the ability to extend interaction

2016
01:15:06,400 --> 01:15:08,159
methods without completely uprooting the

2017
01:15:08,159 --> 01:15:10,719
protocol the ability to have different

2018
01:15:10,719 --> 01:15:13,040
proofing methods

2019
01:15:13,040 --> 01:15:14,560
have different user information come

2020
01:15:14,560 --> 01:15:15,679
back

2021
01:15:15,679 --> 01:15:18,960
those bits and pieces all seem to feel

2022
01:15:18,960 --> 01:15:20,480
like those are the right places to be

2023
01:15:20,480 --> 01:15:21,679
extended

2024
01:15:21,679 --> 01:15:23,600
so what we're really after here

2025
01:15:23,600 --> 01:15:25,360
is not necessarily changing that and

2026
01:15:25,360 --> 01:15:27,760
changing that nature of the protocol but

2027
01:15:27,760 --> 01:15:30,080
providing the right context and guidance

2028
01:15:30,080 --> 01:15:31,920
around people who want to add additional

2029
01:15:31,920 --> 01:15:32,800
stuff

2030
01:15:32,800 --> 01:15:35,360
what they're allowed to do

2031
01:15:35,360 --> 01:15:37,360
and so that implementers of the core

2032
01:15:37,360 --> 01:15:39,040
spec can

2033
01:15:39,040 --> 01:15:41,280
be prepared for what weird extension

2034
01:15:41,280 --> 01:15:42,880
somebody is going to try to cram into

2035
01:15:42,880 --> 01:15:44,159
all of these places that we say is

2036
01:15:44,159 --> 01:15:45,360
extensible

2037
01:15:45,360 --> 01:15:48,719
and what you're supposed to do with that

2038
01:15:48,719 --> 01:15:50,560
all right

2039
01:15:50,560 --> 01:15:52,239
there is the lingering question of what

2040
01:15:52,239 --> 01:15:54,400
to do with the two jose based uh key

2041
01:15:54,400 --> 01:15:56,400
proofing mechanisms uh we've kept them

2042
01:15:56,400 --> 01:15:58,000
in core for now this is the same slide

2043
01:15:58,000 --> 01:16:00,880
as uh at ietf 112. i'm just bringing it

2044
01:16:00,880 --> 01:16:02,400
up right now that this is i think going

2045
01:16:02,400 --> 01:16:03,679
to be a

2046
01:16:03,679 --> 01:16:07,760
a continual question for a while um

2047
01:16:07,760 --> 01:16:09,600
it's the only jose dependency in all of

2048
01:16:09,600 --> 01:16:12,800
canapcore is is this proofing mechanism

2049
01:16:12,800 --> 01:16:14,719
and

2050
01:16:14,719 --> 01:16:17,120
i do think that that is a good thing

2051
01:16:17,120 --> 01:16:19,040
that it is limited to just this this

2052
01:16:19,040 --> 01:16:21,840
particular space

2053
01:16:23,600 --> 01:16:26,000
the twin questions of

2054
01:16:26,000 --> 01:16:28,080
does this need to be tied directly to

2055
01:16:28,080 --> 01:16:29,760
gnapp

2056
01:16:29,760 --> 01:16:31,920
you know is it something in core should

2057
01:16:31,920 --> 01:16:33,520
this be an extension

2058
01:16:33,520 --> 01:16:35,360
and if it is an extension is it actually

2059
01:16:35,360 --> 01:16:36,960
something that's even more generic than

2060
01:16:36,960 --> 01:16:38,400
just an app

2061
01:16:38,400 --> 01:16:40,880
um so this is doing things in a way

2062
01:16:40,880 --> 01:16:42,960
that's a little bit different from depop

2063
01:16:42,960 --> 01:16:45,120
because it is not tied into the the deep

2064
01:16:45,120 --> 01:16:46,880
pop key presentation

2065
01:16:46,880 --> 01:16:49,440
and um sort of the oauth

2066
01:16:49,440 --> 01:16:51,520
protocol flow directly

2067
01:16:51,520 --> 01:16:52,800
um

2068
01:16:52,800 --> 01:16:54,800
but could this be used outside of gnapp

2069
01:16:54,800 --> 01:16:56,560
as well possibly

2070
01:16:56,560 --> 01:16:57,920
um

2071
01:16:57,920 --> 01:16:59,520
that is that is a question that the

2072
01:16:59,520 --> 01:17:01,520
community eventually needs to answer

2073
01:17:01,520 --> 01:17:03,520
inertia however will keep these as

2074
01:17:03,520 --> 01:17:06,480
methods inside of gnap itself

2075
01:17:06,480 --> 01:17:09,199
unless there is a significant force to

2076
01:17:09,199 --> 01:17:12,000
to extract them

2077
01:17:12,960 --> 01:17:14,080
all right

2078
01:17:14,080 --> 01:17:16,080
so the resource server draft we know

2079
01:17:16,080 --> 01:17:18,000
it's still there we haven't forgotten

2080
01:17:18,000 --> 01:17:19,920
about it uh it's been expired for a

2081
01:17:19,920 --> 01:17:21,280
little bit uh but that's because we

2082
01:17:21,280 --> 01:17:23,440
haven't been doing active publication

2083
01:17:23,440 --> 01:17:25,360
work on it

2084
01:17:25,360 --> 01:17:27,199
the two biggest things for the resource

2085
01:17:27,199 --> 01:17:28,800
server draft though because it is a lot

2086
01:17:28,800 --> 01:17:31,679
simpler than core um is the security

2087
01:17:31,679 --> 01:17:34,000
privacy and trust considerations uh like

2088
01:17:34,000 --> 01:17:36,480
we did with the core draft last fall

2089
01:17:36,480 --> 01:17:37,840
we're going to do the same exercise with

2090
01:17:37,840 --> 01:17:41,440
the rs draft and um we're also very

2091
01:17:41,440 --> 01:17:43,120
importantly going to be presenting a

2092
01:17:43,120 --> 01:17:44,880
token model

2093
01:17:44,880 --> 01:17:46,400
now this is not necessarily a token

2094
01:17:46,400 --> 01:17:48,560
format it could be expressed as a token

2095
01:17:48,560 --> 01:17:50,080
format

2096
01:17:50,080 --> 01:17:52,320
and it can be expressed as introspection

2097
01:17:52,320 --> 01:17:53,920
responses

2098
01:17:53,920 --> 01:17:55,120
but

2099
01:17:55,120 --> 01:17:57,520
a model of what tokens represent and

2100
01:17:57,520 --> 01:17:59,199
sort of that data

2101
01:17:59,199 --> 01:18:03,280
data structure data model style thing of

2102
01:18:03,280 --> 01:18:04,800
there is

2103
01:18:04,800 --> 01:18:07,199
a user there are rights there is a

2104
01:18:07,199 --> 01:18:09,920
client there is an as there are target

2105
01:18:09,920 --> 01:18:12,159
rs's that type of stuff needs to be

2106
01:18:12,159 --> 01:18:13,360
enumerated

2107
01:18:13,360 --> 01:18:16,080
and clarified and then mapped into

2108
01:18:16,080 --> 01:18:17,600
things like jot and introspection

2109
01:18:17,600 --> 01:18:20,080
response

2110
01:18:21,120 --> 01:18:22,239
okay

2111
01:18:22,239 --> 01:18:24,320
and that is all

2112
01:18:24,320 --> 01:18:28,080
the editors had for our updates

2113
01:18:28,080 --> 01:18:29,199
all right

2114
01:18:29,199 --> 01:18:30,239
let's

2115
01:18:30,239 --> 01:18:32,320
see if anybody wants to step up to the

2116
01:18:32,320 --> 01:18:36,320
mic and ask questions or

2117
01:18:36,320 --> 01:18:37,679
uh

2118
01:18:37,679 --> 01:18:41,080
not um

2119
01:18:44,239 --> 01:18:45,760
oh there we go

2120
01:18:45,760 --> 01:18:47,679
hi george

2121
01:18:47,679 --> 01:18:50,239
hey can you guys hear me

2122
01:18:50,239 --> 01:18:51,120
hey

2123
01:18:51,120 --> 01:18:52,719
so

2124
01:18:52,719 --> 01:18:54,560
i just in in listening to the

2125
01:18:54,560 --> 01:18:56,320
presentations this morning it sounded

2126
01:18:56,320 --> 01:18:58,719
like key rotation was proof method

2127
01:18:58,719 --> 01:18:59,920
specific

2128
01:18:59,920 --> 01:19:02,560
is there value in just basically making

2129
01:19:02,560 --> 01:19:03,600
proofing

2130
01:19:03,600 --> 01:19:06,960
method a sort of plugable entity and

2131
01:19:06,960 --> 01:19:10,239
then jose just becomes a

2132
01:19:10,239 --> 01:19:12,320
one of the proofing mechanisms that

2133
01:19:12,320 --> 01:19:14,400
support it and that way it's sort of

2134
01:19:14,400 --> 01:19:16,239
you know it can you can either plug it

2135
01:19:16,239 --> 01:19:18,480
in or or not based on

2136
01:19:18,480 --> 01:19:20,080
on how you want to do it it just seemed

2137
01:19:20,080 --> 01:19:21,920
like from a factoring perspective you're

2138
01:19:21,920 --> 01:19:24,640
already heading down a path of saying

2139
01:19:24,640 --> 01:19:26,560
the proofing mechanisms are sort of

2140
01:19:26,560 --> 01:19:28,719
unique in their own way so you could

2141
01:19:28,719 --> 01:19:31,280
write a standard set of way of saying

2142
01:19:31,280 --> 01:19:32,640
you could even write instructions like

2143
01:19:32,640 --> 01:19:34,800
hey if you have a new proofing mechanism

2144
01:19:34,800 --> 01:19:36,320
here's the things that you need to

2145
01:19:36,320 --> 01:19:39,120
describe right how you you know cycle

2146
01:19:39,120 --> 01:19:42,719
keys you know blah blah blah

2147
01:19:42,719 --> 01:19:43,600
yeah

2148
01:19:43,600 --> 01:19:45,760
yeah thanks george uh that is exactly

2149
01:19:45,760 --> 01:19:48,880
how it's written already actually uh the

2150
01:19:48,880 --> 01:19:49,679
so

2151
01:19:49,679 --> 01:19:52,960
the jose stuff is already a separated

2152
01:19:52,960 --> 01:19:55,840
module if you will uh as is http

2153
01:19:55,840 --> 01:19:57,679
signatures and

2154
01:19:57,679 --> 01:19:58,719
um

2155
01:19:58,719 --> 01:20:00,159
mutual tls

2156
01:20:00,159 --> 01:20:04,480
um so you're already allowed to um you

2157
01:20:04,480 --> 01:20:06,560
know plug that in or out

2158
01:20:06,560 --> 01:20:08,639
as you see fit so for example one of the

2159
01:20:08,639 --> 01:20:11,199
things that we did for the hackathon

2160
01:20:11,199 --> 01:20:13,760
is we decided we were just going to use

2161
01:20:13,760 --> 01:20:16,639
http signatures as our proofing method

2162
01:20:16,639 --> 01:20:18,400
for all of our stuff

2163
01:20:18,400 --> 01:20:21,199
um even though the the java as does

2164
01:20:21,199 --> 01:20:23,760
support the jose methods and and other

2165
01:20:23,760 --> 01:20:24,960
stuff as well

2166
01:20:24,960 --> 01:20:26,159
um

2167
01:20:26,159 --> 01:20:27,840
so yeah that is that is the intent and

2168
01:20:27,840 --> 01:20:29,360
that is hopefully something that will

2169
01:20:29,360 --> 01:20:30,480
come

2170
01:20:30,480 --> 01:20:34,239
become more clear with the discussion on

2171
01:20:34,239 --> 01:20:36,239
how to write extensions like what a new

2172
01:20:36,239 --> 01:20:37,520
proofing method

2173
01:20:37,520 --> 01:20:39,920
needs to cover what it needs to what

2174
01:20:39,920 --> 01:20:41,760
aspects it needs to have

2175
01:20:41,760 --> 01:20:43,440
in order for it to be considered a valid

2176
01:20:43,440 --> 01:20:45,360
gnat proofing method

2177
01:20:45,360 --> 01:20:47,520
this also ties into the mandatory to

2178
01:20:47,520 --> 01:20:49,120
implement discussion

2179
01:20:49,120 --> 01:20:50,639
of um

2180
01:20:50,639 --> 01:20:53,120
you know if you're talking to

2181
01:20:53,120 --> 01:20:55,840
an authorization server can you expect

2182
01:20:55,840 --> 01:20:57,840
for there to always be

2183
01:20:57,840 --> 01:21:00,400
one type of proofing method that is

2184
01:21:00,400 --> 01:21:02,880
always supported

2185
01:21:02,880 --> 01:21:06,080
or is that going to be

2186
01:21:06,080 --> 01:21:09,920
based on some other deployment profile

2187
01:21:09,920 --> 01:21:12,159
so yeah it already is that type of

2188
01:21:12,159 --> 01:21:14,159
separate module

2189
01:21:14,159 --> 01:21:16,080
cool in in that context you had

2190
01:21:16,080 --> 01:21:18,639
mentioned that um and obviously i

2191
01:21:18,639 --> 01:21:20,960
checked out a long time ago so i'm

2192
01:21:20,960 --> 01:21:22,960
listening to try and

2193
01:21:22,960 --> 01:21:26,560
gain some ideas or gain some familiarity

2194
01:21:26,560 --> 01:21:30,480
i can't talk it's early here in the u.s

2195
01:21:32,159 --> 01:21:35,360
is there a way when i hit that first

2196
01:21:35,360 --> 01:21:37,040
single endpoint since there's no real

2197
01:21:37,040 --> 01:21:39,360
configuration to basically ask with the

2198
01:21:39,360 --> 01:21:44,559
proofing methods supported by the asr

2199
01:21:47,040 --> 01:21:48,880
uh sorry i had to get up to the speaker

2200
01:21:48,880 --> 01:21:50,480
here um

2201
01:21:50,480 --> 01:21:52,880
so the question is can you ask what

2202
01:21:52,880 --> 01:21:55,520
proofing methods are supported and yes

2203
01:21:55,520 --> 01:21:57,440
so with that

2204
01:21:57,440 --> 01:22:00,239
first url if you make an http options

2205
01:22:00,239 --> 01:22:03,600
request to that the as uh is required to

2206
01:22:03,600 --> 01:22:04,880
send back what is effectively a

2207
01:22:04,880 --> 01:22:07,120
discovery document

2208
01:22:07,120 --> 01:22:09,360
you can also

2209
01:22:09,360 --> 01:22:11,840
with the new error codes you can also

2210
01:22:11,840 --> 01:22:12,639
just

2211
01:22:12,639 --> 01:22:15,040
blindly try your first request

2212
01:22:15,040 --> 01:22:17,360
and then if the if the error comes back

2213
01:22:17,360 --> 01:22:19,440
and says like hey that method isn't

2214
01:22:19,440 --> 01:22:20,560
supported

2215
01:22:20,560 --> 01:22:22,639
then you switch and go do stuff like

2216
01:22:22,639 --> 01:22:25,280
that um in the wild

2217
01:22:25,280 --> 01:22:27,679
like we we see clients doing both we see

2218
01:22:27,679 --> 01:22:29,199
clients like

2219
01:22:29,199 --> 01:22:30,639
trying to pre-configure themselves and

2220
01:22:30,639 --> 01:22:32,080
do the right thing and we see clients

2221
01:22:32,080 --> 01:22:34,159
that just kind of blast the thing that

2222
01:22:34,159 --> 01:22:35,840
they know how to do and if that fails

2223
01:22:35,840 --> 01:22:37,360
well i couldn't reconfigure myself

2224
01:22:37,360 --> 01:22:40,080
anyway um so

2225
01:22:40,080 --> 01:22:42,800
get out kind of allows both types of

2226
01:22:42,800 --> 01:22:45,360
client behavior with at least

2227
01:22:45,360 --> 01:22:47,199
predictable results it's not going to

2228
01:22:47,199 --> 01:22:48,719
guarantee that it's going to work

2229
01:22:48,719 --> 01:22:50,880
because you know if a client only does

2230
01:22:50,880 --> 01:22:52,960
jose then and it's talking to a server

2231
01:22:52,960 --> 01:22:54,960
that's doing tls that's obviously not

2232
01:22:54,960 --> 01:22:56,159
going to work

2233
01:22:56,159 --> 01:22:57,679
um

2234
01:22:57,679 --> 01:22:59,199
but

2235
01:22:59,199 --> 01:23:00,639
there's at least predictable results

2236
01:23:00,639 --> 01:23:02,080
when that's when that kind of

2237
01:23:02,080 --> 01:23:04,639
combination shows up

2238
01:23:04,639 --> 01:23:07,840
cool thanks

2239
01:23:08,400 --> 01:23:11,199
all right thanks george i

2240
01:23:11,199 --> 01:23:13,920
think that means that

2241
01:23:13,920 --> 01:23:17,520
all right you got a uh unfair

2242
01:23:17,520 --> 01:23:19,760
or actually just

2243
01:23:19,760 --> 01:23:22,239
you could switch over to your final yeah

2244
01:23:22,239 --> 01:23:23,280
the um

2245
01:23:23,280 --> 01:23:24,400
embedding

2246
01:23:24,400 --> 01:23:26,320
thing

2247
01:23:26,320 --> 01:23:30,080
run that from your hangout

2248
01:23:32,080 --> 01:23:33,199
there we go

2249
01:23:33,199 --> 01:23:34,800
okay

2250
01:23:34,800 --> 01:23:36,719
and i think i have control

2251
01:23:36,719 --> 01:23:37,600
all right

2252
01:23:37,600 --> 01:23:40,320
i'll get my guess

2253
01:23:40,320 --> 01:23:42,080
all right

2254
01:23:42,080 --> 01:23:43,679
last presentation

2255
01:23:43,679 --> 01:23:47,120
i still kind of have a voice

2256
01:23:47,280 --> 01:23:48,400
embedding

2257
01:23:48,400 --> 01:23:51,679
nap this is uh something that uh that i

2258
01:23:51,679 --> 01:23:54,000
posted out to the list we actually had a

2259
01:23:54,000 --> 01:23:56,159
speaker about um

2260
01:23:56,159 --> 01:23:58,639
uh during the interim call

2261
01:23:58,639 --> 01:24:00,719
um

2262
01:24:00,719 --> 01:24:02,880
for this talk i am not speaking as an

2263
01:24:02,880 --> 01:24:05,040
editor i'm speaking as an individual

2264
01:24:05,040 --> 01:24:08,159
contributor to the working group um none

2265
01:24:08,159 --> 01:24:10,639
of this can uh carries editorial weight

2266
01:24:10,639 --> 01:24:13,920
or consent or uh intent rather

2267
01:24:13,920 --> 01:24:15,199
um

2268
01:24:15,199 --> 01:24:17,040
i'm not even saying that i necessarily

2269
01:24:17,040 --> 01:24:18,960
think this is a good idea this is a

2270
01:24:18,960 --> 01:24:20,719
question that i think the group should

2271
01:24:20,719 --> 01:24:22,000
consider

2272
01:24:22,000 --> 01:24:24,159
and uh so what i would like to get out

2273
01:24:24,159 --> 01:24:26,159
of this discussion is

2274
01:24:26,159 --> 01:24:28,000
um if the group thinks that this is

2275
01:24:28,000 --> 01:24:29,840
something that this is an interesting

2276
01:24:29,840 --> 01:24:33,040
problem that we should address

2277
01:24:33,040 --> 01:24:35,920
let's let's start that if not then we

2278
01:24:35,920 --> 01:24:37,840
know that we won't

2279
01:24:37,840 --> 01:24:39,600
all right

2280
01:24:39,600 --> 01:24:41,840
so there are a couple of use cases

2281
01:24:41,840 --> 01:24:43,360
that uh

2282
01:24:43,360 --> 01:24:45,840
that have been brought up um that have

2283
01:24:45,840 --> 01:24:48,000
some similar

2284
01:24:48,000 --> 01:24:49,520
uh

2285
01:24:49,520 --> 01:24:52,000
similar aspects all right so one that

2286
01:24:52,000 --> 01:24:53,679
got brought up during this working

2287
01:24:53,679 --> 01:24:56,800
group's initial boss was this idea of i

2288
01:24:56,800 --> 01:24:59,679
am calling an api and the api says wait

2289
01:24:59,679 --> 01:25:01,920
i need the user that's using you right

2290
01:25:01,920 --> 01:25:03,760
now to go enter new credit card

2291
01:25:03,760 --> 01:25:04,880
information

2292
01:25:04,880 --> 01:25:07,600
so i need them to go interact go do some

2293
01:25:07,600 --> 01:25:09,920
approval enter some information

2294
01:25:09,920 --> 01:25:11,440
and then come back to me and we can keep

2295
01:25:11,440 --> 01:25:14,000
doing the api thing

2296
01:25:14,000 --> 01:25:16,239
that feels a lot like a delegation

2297
01:25:16,239 --> 01:25:17,600
protocol

2298
01:25:17,600 --> 01:25:20,000
stepping out in the middle there right

2299
01:25:20,000 --> 01:25:22,639
even though it's it's it's kind of not

2300
01:25:22,639 --> 01:25:25,280
um it's it's getting the user involved

2301
01:25:25,280 --> 01:25:27,440
in the middle of an existing process

2302
01:25:27,440 --> 01:25:28,560
that's something that delegation

2303
01:25:28,560 --> 01:25:30,400
protocols like knapp

2304
01:25:30,400 --> 01:25:32,560
that's what they do that's their entire

2305
01:25:32,560 --> 01:25:34,159
purpose

2306
01:25:34,159 --> 01:25:36,480
another use case came up recently in the

2307
01:25:36,480 --> 01:25:38,840
verifiable credentials api

2308
01:25:38,840 --> 01:25:40,800
um

2309
01:25:40,800 --> 01:25:43,440
special interest topic whatever it's

2310
01:25:43,440 --> 01:25:45,360
called in the w3c it's not its own

2311
01:25:45,360 --> 01:25:49,360
working group because w3c is weird

2312
01:25:49,360 --> 01:25:51,920
you've got a wallet presenting a vc

2313
01:25:51,920 --> 01:25:54,239
and the presentation api needs to go

2314
01:25:54,239 --> 01:25:56,800
gather consent from the user

2315
01:25:56,800 --> 01:25:58,320
um

2316
01:25:58,320 --> 01:26:00,400
in order to do that it needs to be able

2317
01:26:00,400 --> 01:26:02,480
to get the user in front of some other

2318
01:26:02,480 --> 01:26:04,880
piece of software for the user to say hi

2319
01:26:04,880 --> 01:26:07,600
it's me i'm okay with this this and this

2320
01:26:07,600 --> 01:26:08,400
okay

2321
01:26:08,400 --> 01:26:09,520
go

2322
01:26:09,520 --> 01:26:11,520
right

2323
01:26:11,520 --> 01:26:13,360
in some cases the user might log in in

2324
01:26:13,360 --> 01:26:15,520
some cases the user might present a

2325
01:26:15,520 --> 01:26:16,880
separate set of

2326
01:26:16,880 --> 01:26:20,239
vcs uh to this in sort of this you know

2327
01:26:20,239 --> 01:26:22,560
change transaction thing

2328
01:26:22,560 --> 01:26:25,760
regardless once the user says go

2329
01:26:25,760 --> 01:26:28,719
then they actually need to come back and

2330
01:26:28,719 --> 01:26:30,400
the app needs to

2331
01:26:30,400 --> 01:26:32,639
finish calling the api exactly like it

2332
01:26:32,639 --> 01:26:35,199
always has

2333
01:26:35,199 --> 01:26:37,600
so

2334
01:26:37,600 --> 01:26:39,120
the reason that i think that this is

2335
01:26:39,120 --> 01:26:41,120
interesting is that protocols like an

2336
01:26:41,120 --> 01:26:43,760
app are never used on their own

2337
01:26:43,760 --> 01:26:45,600
like nobody ever runs a security

2338
01:26:45,600 --> 01:26:47,199
protocol for the sake of running a

2339
01:26:47,199 --> 01:26:49,040
security protocol

2340
01:26:49,040 --> 01:26:51,040
unless you're a couple of nerds at a

2341
01:26:51,040 --> 01:26:52,800
hackathon last weekend

2342
01:26:52,800 --> 01:26:55,040
uh but that doesn't count

2343
01:26:55,040 --> 01:26:56,560
uh in the real world you're either

2344
01:26:56,560 --> 01:26:58,480
protecting an api you're gathering user

2345
01:26:58,480 --> 01:27:00,080
information or you're just you're just

2346
01:27:00,080 --> 01:27:01,840
doing something

2347
01:27:01,840 --> 01:27:04,000
and the security protocol is your means

2348
01:27:04,000 --> 01:27:05,760
of doing that

2349
01:27:05,760 --> 01:27:07,440
right or it's part of your means of

2350
01:27:07,440 --> 01:27:09,199
doing that and that's that is actually

2351
01:27:09,199 --> 01:27:11,919
really important

2352
01:27:12,159 --> 01:27:14,480
how gnap fits in with other protocols

2353
01:27:14,480 --> 01:27:16,639
and ecosystems is intentionally flexible

2354
01:27:16,639 --> 01:27:18,080
because we've learned a lot from how

2355
01:27:18,080 --> 01:27:20,960
oauth 2 has been used over the years

2356
01:27:20,960 --> 01:27:23,040
both as part of open id connect and on

2357
01:27:23,040 --> 01:27:26,560
its own and as part of other systems

2358
01:27:26,560 --> 01:27:28,320
so we've got two models today i'm going

2359
01:27:28,320 --> 01:27:29,440
to go through three different models

2360
01:27:29,440 --> 01:27:32,560
we've got two that exist today

2361
01:27:32,560 --> 01:27:36,239
we either have a traditional delegation

2362
01:27:36,239 --> 01:27:38,560
we can embed protocols inside of canap

2363
01:27:38,560 --> 01:27:39,679
itself

2364
01:27:39,679 --> 01:27:41,199
and i want to raise the question of does

2365
01:27:41,199 --> 01:27:43,360
it make sense to embed gnap inside of

2366
01:27:43,360 --> 01:27:46,080
another protocol

2367
01:27:46,080 --> 01:27:48,719
so what do those look like

2368
01:27:48,719 --> 01:27:50,880
with traditional delegation you go

2369
01:27:50,880 --> 01:27:53,360
try to do the protocol your tar your end

2370
01:27:53,360 --> 01:27:55,840
target protocol you try to go do that

2371
01:27:55,840 --> 01:27:57,679
and you fail and you get told to go talk

2372
01:27:57,679 --> 01:27:59,920
to an authorization server do whatever

2373
01:27:59,920 --> 01:28:02,400
that says and then come try again come

2374
01:28:02,400 --> 01:28:04,560
back with an access token and talk to me

2375
01:28:04,560 --> 01:28:06,719
to prove that you've done this

2376
01:28:06,719 --> 01:28:08,719
all right

2377
01:28:08,719 --> 01:28:12,320
this is really simple uh from a protocol

2378
01:28:12,320 --> 01:28:14,719
design perspective like we all know how

2379
01:28:14,719 --> 01:28:15,840
this works

2380
01:28:15,840 --> 01:28:18,239
we've been doing this for a very very

2381
01:28:18,239 --> 01:28:21,120
very long time

2382
01:28:21,280 --> 01:28:23,840
gnap fits completely in that box in the

2383
01:28:23,840 --> 01:28:26,400
middle and does not really touch the

2384
01:28:26,400 --> 01:28:28,080
outside of the protocol except for that

2385
01:28:28,080 --> 01:28:30,239
www off header

2386
01:28:30,239 --> 01:28:32,080
that indicates go start the connect

2387
01:28:32,080 --> 01:28:33,440
process

2388
01:28:33,440 --> 01:28:35,120
and otherwise you know that's that's

2389
01:28:35,120 --> 01:28:37,280
pretty much it this is

2390
01:28:37,280 --> 01:28:41,040
plain vanilla api access

2391
01:28:41,199 --> 01:28:42,719
so the benefits of this is that it

2392
01:28:42,719 --> 01:28:45,520
separates the layers very cleanly

2393
01:28:45,520 --> 01:28:47,520
and that is a really really big benefit

2394
01:28:47,520 --> 01:28:49,679
to be clear the ganap layer and the

2395
01:28:49,679 --> 01:28:51,199
protocol layer don't really have to know

2396
01:28:51,199 --> 01:28:52,320
anything about each other they don't

2397
01:28:52,320 --> 01:28:54,080
have to deal with each other separate

2398
01:28:54,080 --> 01:28:54,840
set of

2399
01:28:54,840 --> 01:28:56,400
concerns

2400
01:28:56,400 --> 01:28:59,280
and it's usable without modif without

2401
01:28:59,280 --> 01:29:01,520
modifying either protocol

2402
01:29:01,520 --> 01:29:02,960
like an app doesn't have to do anything

2403
01:29:02,960 --> 01:29:04,960
special the protocol doesn't have to do

2404
01:29:04,960 --> 01:29:06,719
anything special except

2405
01:29:06,719 --> 01:29:08,960
say that it's protected by access tokens

2406
01:29:08,960 --> 01:29:10,880
and knows how to kick this off

2407
01:29:10,880 --> 01:29:12,320
right

2408
01:29:12,320 --> 01:29:14,159
but it doesn't need to the protocol

2409
01:29:14,159 --> 01:29:15,440
doesn't need to know anything about how

2410
01:29:15,440 --> 01:29:17,920
these are interacted or

2411
01:29:17,920 --> 01:29:19,920
what's being requested or anything like

2412
01:29:19,920 --> 01:29:22,719
that if it doesn't want to

2413
01:29:22,719 --> 01:29:24,400
and another huge benefit here is that

2414
01:29:24,400 --> 01:29:26,159
you can do this against multiple

2415
01:29:26,159 --> 01:29:27,760
protocols at once

2416
01:29:27,760 --> 01:29:29,679
this abstraction layer across of

2417
01:29:29,679 --> 01:29:31,600
security across different apis is one of

2418
01:29:31,600 --> 01:29:33,040
the biggest things that delegation

2419
01:29:33,040 --> 01:29:35,360
protocols like cannabinoauth really

2420
01:29:35,360 --> 01:29:38,159
really give us

2421
01:29:38,159 --> 01:29:40,800
the downside is this is very chatty

2422
01:29:40,800 --> 01:29:42,480
there's a lot of back and forth there's

2423
01:29:42,480 --> 01:29:44,320
a lot of discrete steps

2424
01:29:44,320 --> 01:29:46,880
um when you know the end result that

2425
01:29:46,880 --> 01:29:49,360
you're trying to get to

2426
01:29:49,360 --> 01:29:51,199
and it's really really inefficient for

2427
01:29:51,199 --> 01:29:54,080
the simple cases like going and getting

2428
01:29:54,080 --> 01:29:55,679
and um

2429
01:29:55,679 --> 01:29:57,840
you know credit card information

2430
01:29:57,840 --> 01:29:59,199
like i'm not really asking for

2431
01:29:59,199 --> 01:30:01,760
additional access to the api at that

2432
01:30:01,760 --> 01:30:03,679
point it's just that's the only means

2433
01:30:03,679 --> 01:30:06,960
the api has if we're doing this the only

2434
01:30:06,960 --> 01:30:08,880
means the api has for getting the user

2435
01:30:08,880 --> 01:30:11,040
involved is to say

2436
01:30:11,040 --> 01:30:14,639
your access token failed quote unquote

2437
01:30:14,639 --> 01:30:16,800
go tell the user

2438
01:30:16,800 --> 01:30:19,800
right

2439
01:30:21,280 --> 01:30:22,719
then there's the case of embedding

2440
01:30:22,719 --> 01:30:25,199
protocols inside of canap itself so you

2441
01:30:25,199 --> 01:30:27,199
start a genetic process

2442
01:30:27,199 --> 01:30:29,440
but then with extensions probably

2443
01:30:29,440 --> 01:30:31,120
through the interaction methods you're

2444
01:30:31,120 --> 01:30:32,960
actually going to go do a co a totally

2445
01:30:32,960 --> 01:30:34,400
different protocol

2446
01:30:34,400 --> 01:30:37,440
inside the context of canal

2447
01:30:37,440 --> 01:30:38,960
and then you're going to return the

2448
01:30:38,960 --> 01:30:40,480
results of that

2449
01:30:40,480 --> 01:30:42,800
as part of the canap response an app is

2450
01:30:42,800 --> 01:30:45,440
built to be extended in exactly this way

2451
01:30:45,440 --> 01:30:47,360
the reason for this is this is exactly

2452
01:30:47,360 --> 01:30:50,880
what openid connect did to oauth 2.

2453
01:30:50,880 --> 01:30:53,600
you go start off the map process

2454
01:30:53,600 --> 01:30:56,159
make your grant request and say i can do

2455
01:30:56,159 --> 01:30:57,760
the foo api

2456
01:30:57,760 --> 01:31:00,080
for my interaction method this is how i

2457
01:31:00,080 --> 01:31:02,239
can get the user involved and so i'm

2458
01:31:02,239 --> 01:31:04,000
going to go do that food protocol and i

2459
01:31:04,000 --> 01:31:06,080
can do all whatever i need to do whether

2460
01:31:06,080 --> 01:31:09,600
that's exchanging vcs or

2461
01:31:09,600 --> 01:31:11,760
calling you know back-end fabrics to

2462
01:31:11,760 --> 01:31:16,199
post information or doing key exchanges

2463
01:31:16,400 --> 01:31:18,800
good app doesn't care during this phase

2464
01:31:18,800 --> 01:31:21,040
like it's whatever extensions you want

2465
01:31:21,040 --> 01:31:22,480
to be able to do there

2466
01:31:22,480 --> 01:31:24,080
and then you kick off this interaction

2467
01:31:24,080 --> 01:31:25,440
finish

2468
01:31:25,440 --> 01:31:27,760
portion of the ganap protocol which can

2469
01:31:27,760 --> 01:31:30,400
happen can then take over

2470
01:31:30,400 --> 01:31:33,280
and say all right now that that's done

2471
01:31:33,280 --> 01:31:35,040
hey i've got this extra chunk of

2472
01:31:35,040 --> 01:31:36,719
information that i can return directly

2473
01:31:36,719 --> 01:31:38,639
to you at the client

2474
01:31:38,639 --> 01:31:42,080
as part of the gnap response

2475
01:31:42,239 --> 01:31:43,760
the

2476
01:31:43,760 --> 01:31:46,320
most obvious way to use this

2477
01:31:46,320 --> 01:31:50,719
is for things like identity information

2478
01:31:50,719 --> 01:31:53,440
so i'm going and i'm doing a negotiation

2479
01:31:53,440 --> 01:31:57,840
for which types of uh user claims and uh

2480
01:31:57,840 --> 01:31:59,760
attributes that i'm asking for and i'm

2481
01:31:59,760 --> 01:32:01,360
getting back signed assertions that i

2482
01:32:01,360 --> 01:32:02,880
can then use as part of

2483
01:32:02,880 --> 01:32:04,960
federation transactions

2484
01:32:04,960 --> 01:32:07,120
right

2485
01:32:08,000 --> 01:32:09,840
the downside is that this is a very

2486
01:32:09,840 --> 01:32:11,679
specialized integration that assumes

2487
01:32:11,679 --> 01:32:13,280
that you are doing gnapp right from the

2488
01:32:13,280 --> 01:32:14,159
start

2489
01:32:14,159 --> 01:32:15,920
which is a really really funny thing to

2490
01:32:15,920 --> 01:32:18,080
think of if somebody is trying to go and

2491
01:32:18,080 --> 01:32:20,239
actually do something else

2492
01:32:20,239 --> 01:32:22,320
so if somebody just wants to call their

2493
01:32:22,320 --> 01:32:23,199
you know

2494
01:32:23,199 --> 01:32:25,040
purchase api

2495
01:32:25,040 --> 01:32:27,360
embedding that every time inside of the

2496
01:32:27,360 --> 01:32:29,440
gnap request makes no sense especially

2497
01:32:29,440 --> 01:32:30,880
in the cases where

2498
01:32:30,880 --> 01:32:32,960
it's just going to go through

2499
01:32:32,960 --> 01:32:34,080
right you already have all of the

2500
01:32:34,080 --> 01:32:35,280
information

2501
01:32:35,280 --> 01:32:37,520
this is a whole other extra layer of

2502
01:32:37,520 --> 01:32:39,280
overhead which is why the login case

2503
01:32:39,280 --> 01:32:41,760
makes sense because you're kicking off a

2504
01:32:41,760 --> 01:32:43,440
brand new process when you're going to

2505
01:32:43,440 --> 01:32:45,760
get login information so it makes sense

2506
01:32:45,760 --> 01:32:46,960
that you might have to do some

2507
01:32:46,960 --> 01:32:48,560
additional stuff to get there when

2508
01:32:48,560 --> 01:32:50,560
you're calling other kinds of apis it

2509
01:32:50,560 --> 01:32:54,400
doesn't make nearly as much sense

2510
01:32:54,400 --> 01:32:56,960
so that brings us to the third and uh in

2511
01:32:56,960 --> 01:32:58,960
my opinion weirdest case

2512
01:32:58,960 --> 01:33:00,880
of embedding gnap inside of a different

2513
01:33:00,880 --> 01:33:03,360
protocol

2514
01:33:03,360 --> 01:33:05,920
so we started the protocol

2515
01:33:05,920 --> 01:33:06,960
and then

2516
01:33:06,960 --> 01:33:09,280
we get kicked out of the protocol and

2517
01:33:09,280 --> 01:33:11,760
start doing gnaps stuff

2518
01:33:11,760 --> 01:33:14,400
sort of already in process already in

2519
01:33:14,400 --> 01:33:16,639
progress

2520
01:33:16,639 --> 01:33:18,560
and then we do that for a bit

2521
01:33:18,560 --> 01:33:19,760
and then we

2522
01:33:19,760 --> 01:33:21,199
land back

2523
01:33:21,199 --> 01:33:23,679
at the original protocol

2524
01:33:23,679 --> 01:33:25,600
now

2525
01:33:25,600 --> 01:33:27,520
what this looks like

2526
01:33:27,520 --> 01:33:30,239
this absolutely looks weird this is this

2527
01:33:30,239 --> 01:33:32,239
is looks really funny

2528
01:33:32,239 --> 01:33:34,080
but this is the way that these use cases

2529
01:33:34,080 --> 01:33:36,080
keep getting described

2530
01:33:36,080 --> 01:33:37,440
and this is why i think this is

2531
01:33:37,440 --> 01:33:39,280
fascinating

2532
01:33:39,280 --> 01:33:41,679
because i go to call the api and i'm

2533
01:33:41,679 --> 01:33:44,159
just doing the native api call whatever

2534
01:33:44,159 --> 01:33:46,400
that is not even necessarily access

2535
01:33:46,400 --> 01:33:47,440
tokens

2536
01:33:47,440 --> 01:33:49,520
i'm just calling the api and doing that

2537
01:33:49,520 --> 01:33:51,600
and then the api says

2538
01:33:51,600 --> 01:33:54,080
hey i have figured out that i need to

2539
01:33:54,080 --> 01:33:57,120
get the user in front of me somehow

2540
01:33:57,120 --> 01:34:00,400
so here is a gnapp response block it's

2541
01:34:00,400 --> 01:34:02,639
got interaction and continuation and all

2542
01:34:02,639 --> 01:34:05,679
of that other stuff that can app defines

2543
01:34:05,679 --> 01:34:07,679
go process this

2544
01:34:07,679 --> 01:34:09,920
and to process that you go

2545
01:34:09,920 --> 01:34:12,000
and you start doing gnap

2546
01:34:12,000 --> 01:34:14,639
you follow the interaction stuff

2547
01:34:14,639 --> 01:34:17,280
you do the token continuation you do all

2548
01:34:17,280 --> 01:34:19,199
of that stuff

2549
01:34:19,199 --> 01:34:22,159
and then when that has been fulfilled

2550
01:34:22,159 --> 01:34:24,320
the api call

2551
01:34:24,320 --> 01:34:27,520
comes back with the native api response

2552
01:34:27,520 --> 01:34:29,120
so the thing that you were asking for in

2553
01:34:29,120 --> 01:34:32,480
the first place it's a vc it's the uh

2554
01:34:32,480 --> 01:34:35,199
the purchase completion it's whatever

2555
01:34:35,199 --> 01:34:36,880
this is not something embedded inside of

2556
01:34:36,880 --> 01:34:39,040
a knapp response anymore this is the

2557
01:34:39,040 --> 01:34:42,800
native ape target api

2558
01:34:43,199 --> 01:34:44,800
now the upside of this is that this is a

2559
01:34:44,800 --> 01:34:47,360
really efficient use of the gen-app

2560
01:34:47,360 --> 01:34:48,480
security

2561
01:34:48,480 --> 01:34:49,840
components

2562
01:34:49,840 --> 01:34:51,360
because you're only using the bits that

2563
01:34:51,360 --> 01:34:52,960
are relevant to you

2564
01:34:52,960 --> 01:34:54,800
like you're getting the user in front of

2565
01:34:54,800 --> 01:34:57,280
something else you are managing the

2566
01:34:57,280 --> 01:34:59,119
state of that request over time and then

2567
01:34:59,119 --> 01:35:01,839
you're getting out of the way

2568
01:35:02,880 --> 01:35:05,040
and calling the protocol natively at the

2569
01:35:05,040 --> 01:35:06,719
start and at the end

2570
01:35:06,719 --> 01:35:08,560
that that feels right because that's

2571
01:35:08,560 --> 01:35:10,159
what the developer is ultimately trying

2572
01:35:10,159 --> 01:35:12,719
to do they're not trying to get access

2573
01:35:12,719 --> 01:35:14,560
to the api they already have access to

2574
01:35:14,560 --> 01:35:16,000
the api

2575
01:35:16,000 --> 01:35:19,119
there's just an additional bit of

2576
01:35:19,119 --> 01:35:20,239
user

2577
01:35:20,239 --> 01:35:21,600
interaction

2578
01:35:21,600 --> 01:35:22,960
and

2579
01:35:22,960 --> 01:35:24,880
consent and other stuff that they need

2580
01:35:24,880 --> 01:35:26,840
to gather in the middle of that

2581
01:35:26,840 --> 01:35:31,119
api so the downsides

2582
01:35:31,119 --> 01:35:33,280
is that this is a really

2583
01:35:33,280 --> 01:35:35,280
strange specialized integration and

2584
01:35:35,280 --> 01:35:37,199
gnapp was never meant to start halfway

2585
01:35:37,199 --> 01:35:38,960
through like this

2586
01:35:38,960 --> 01:35:41,520
like the nap process

2587
01:35:41,520 --> 01:35:43,920
is always you start it exactly the same

2588
01:35:43,920 --> 01:35:46,880
way and then then you branch off into

2589
01:35:46,880 --> 01:35:49,199
all of these different options

2590
01:35:49,199 --> 01:35:50,159
um

2591
01:35:50,159 --> 01:35:52,239
that is that is a fundamental pillar of

2592
01:35:52,239 --> 01:35:54,239
gnapp's design

2593
01:35:54,239 --> 01:35:57,040
all right um

2594
01:35:57,040 --> 01:35:58,880
every version of this is going to depend

2595
01:35:58,880 --> 01:36:00,400
on the protocol that it's being embedded

2596
01:36:00,400 --> 01:36:01,360
in

2597
01:36:01,360 --> 01:36:04,400
so that can app response coming back

2598
01:36:04,400 --> 01:36:06,080
you know it's going to look different

2599
01:36:06,080 --> 01:36:07,920
what if i'm calling an api that speaks

2600
01:36:07,920 --> 01:36:09,600
xml or speaks

2601
01:36:09,600 --> 01:36:12,000
cozy or speaks something else

2602
01:36:12,000 --> 01:36:16,719
gnapp is defined in json over http

2603
01:36:16,719 --> 01:36:20,080
so if i'm getting a json blob embedded

2604
01:36:20,080 --> 01:36:22,400
in some other protocol definition that

2605
01:36:22,400 --> 01:36:23,280
means

2606
01:36:23,280 --> 01:36:25,600
i now need to sort of roughly shift

2607
01:36:25,600 --> 01:36:28,719
gears to go do this other thing

2608
01:36:28,719 --> 01:36:31,520
that feels very strange

2609
01:36:31,520 --> 01:36:34,159
and what we're seeing right now

2610
01:36:34,159 --> 01:36:35,280
um

2611
01:36:35,280 --> 01:36:37,119
with the handful of places that are

2612
01:36:37,119 --> 01:36:38,960
doing stuff like this

2613
01:36:38,960 --> 01:36:40,480
is that instead of embedding gnap

2614
01:36:40,480 --> 01:36:42,480
they're actually uh

2615
01:36:42,480 --> 01:36:45,679
claiming inspiration from gnab

2616
01:36:45,679 --> 01:36:48,480
and doing this interaction type stuff

2617
01:36:48,480 --> 01:36:50,718
right

2618
01:36:51,440 --> 01:36:53,920
so my question to the community to the

2619
01:36:53,920 --> 01:36:56,239
working group is

2620
01:36:56,239 --> 01:36:58,639
is this something we care about

2621
01:36:58,639 --> 01:37:00,560
it's been it hasn't been brought up a

2622
01:37:00,560 --> 01:37:02,000
lot but it's been brought up at least

2623
01:37:02,000 --> 01:37:04,320
twice which is interesting

2624
01:37:04,320 --> 01:37:06,639
in very different contexts

2625
01:37:06,639 --> 01:37:08,080
and

2626
01:37:08,080 --> 01:37:10,400
my question to the group that i think we

2627
01:37:10,400 --> 01:37:11,840
should consider is

2628
01:37:11,840 --> 01:37:13,199
are the extension points that we have

2629
01:37:13,199 --> 01:37:14,320
sufficient

2630
01:37:14,320 --> 01:37:17,040
should we explicitly consider this case

2631
01:37:17,040 --> 01:37:18,960
of pulling like the middle bits of gnap

2632
01:37:18,960 --> 01:37:20,480
out and

2633
01:37:20,480 --> 01:37:22,719
saying how people should use it in that

2634
01:37:22,719 --> 01:37:24,000
way

2635
01:37:24,000 --> 01:37:26,639
or is this something that we just

2636
01:37:26,639 --> 01:37:30,080
we just are silent on and if people take

2637
01:37:30,080 --> 01:37:31,840
inspiration from ganap that's good

2638
01:37:31,840 --> 01:37:32,880
enough

2639
01:37:32,880 --> 01:37:35,679
um do we even care

2640
01:37:35,679 --> 01:37:37,600
so that's that's my question i don't

2641
01:37:37,600 --> 01:37:40,400
have those answers

2642
01:37:42,800 --> 01:37:45,520
uh jonathan hoyland cloudflare

2643
01:37:45,520 --> 01:37:47,199
um

2644
01:37:47,199 --> 01:37:48,480
this

2645
01:37:48,480 --> 01:37:50,239
i mean obviously people think i say this

2646
01:37:50,239 --> 01:37:52,480
about everything but uh this this looks

2647
01:37:52,480 --> 01:37:53,280
like

2648
01:37:53,280 --> 01:37:55,199
a place where you'd use channel bindings

2649
01:37:55,199 --> 01:37:57,520
and importers and exporters

2650
01:37:57,520 --> 01:37:59,040
because

2651
01:37:59,040 --> 01:38:01,840
what you're actually trying to do is not

2652
01:38:01,840 --> 01:38:04,320
produce one sort of super big protocol

2653
01:38:04,320 --> 01:38:05,840
you're trying to say

2654
01:38:05,840 --> 01:38:09,119
we want to in a principled way

2655
01:38:09,119 --> 01:38:11,679
get some security guarantee from using

2656
01:38:11,679 --> 01:38:13,679
gene app or using some other protocol

2657
01:38:13,679 --> 01:38:15,280
inside gene app

2658
01:38:15,280 --> 01:38:17,440
and transfer that between the two

2659
01:38:17,440 --> 01:38:19,119
protocols

2660
01:38:19,119 --> 01:38:21,600
and rather than trying to come up with a

2661
01:38:21,600 --> 01:38:24,320
sort of one-size-fits-all solution

2662
01:38:24,320 --> 01:38:25,760
you should

2663
01:38:25,760 --> 01:38:27,280
or you could

2664
01:38:27,280 --> 01:38:28,480
produce

2665
01:38:28,480 --> 01:38:30,880
an importer interface where people can

2666
01:38:30,880 --> 01:38:32,480
import keys and an exporter interface

2667
01:38:32,480 --> 01:38:34,560
where people can take keys out

2668
01:38:34,560 --> 01:38:36,639
that give you those guarantees

2669
01:38:36,639 --> 01:38:39,280
when used

2670
01:38:39,679 --> 01:38:42,000
yeah i know so it could be done in a

2671
01:38:42,000 --> 01:38:43,840
principles way if you want to do formal

2672
01:38:43,840 --> 01:38:46,000
analysis stuff

2673
01:38:46,000 --> 01:38:47,920
all right

2674
01:38:47,920 --> 01:38:50,000
thank you i'm honestly i'm not sure i

2675
01:38:50,000 --> 01:38:52,320
fully understand that response as to

2676
01:38:52,320 --> 01:38:54,239
what the key important export binding

2677
01:38:54,239 --> 01:38:55,679
would have to do with

2678
01:38:55,679 --> 01:38:57,280
with this because i think we might be

2679
01:38:57,280 --> 01:38:59,360
talking past each other

2680
01:38:59,360 --> 01:39:01,199
so

2681
01:39:01,199 --> 01:39:03,199
if you if you have this

2682
01:39:03,199 --> 01:39:06,480
sort of protocol in the middle

2683
01:39:06,480 --> 01:39:08,719
um rather than trying to say

2684
01:39:08,719 --> 01:39:10,800
define

2685
01:39:10,800 --> 01:39:13,840
your food protocol gene app interface in

2686
01:39:13,840 --> 01:39:16,400
a draft and then going away and using it

2687
01:39:16,400 --> 01:39:19,760
you could just say gene app has this

2688
01:39:19,760 --> 01:39:21,360
api call that you can make at the

2689
01:39:21,360 --> 01:39:22,719
beginning

2690
01:39:22,719 --> 01:39:26,239
and produces some output at the end um

2691
01:39:26,239 --> 01:39:28,159
and then foo just has to be able to use

2692
01:39:28,159 --> 01:39:30,239
those two

2693
01:39:30,239 --> 01:39:31,920
um without

2694
01:39:31,920 --> 01:39:33,600
understanding anything about gene app or

2695
01:39:33,600 --> 01:39:35,440
defining anything about cheating

2696
01:39:35,440 --> 01:39:38,000
yeah that's

2697
01:39:38,639 --> 01:39:39,520
what's

2698
01:39:39,520 --> 01:39:43,520
what you're describing is this

2699
01:39:44,239 --> 01:39:45,040
uh

2700
01:39:45,040 --> 01:39:48,320
okay yeah but uh

2701
01:39:48,320 --> 01:39:49,920
my point is you could do it in a formal

2702
01:39:49,920 --> 01:39:52,000
analysis style okay

2703
01:39:52,000 --> 01:39:55,159
thank you

2704
01:39:55,280 --> 01:39:58,080
so the embedded gnap just to be clear is

2705
01:39:58,080 --> 01:39:59,199
basically

2706
01:39:59,199 --> 01:40:01,760
an optimization of this model where you

2707
01:40:01,760 --> 01:40:05,119
sort of slice off the top and bottom of

2708
01:40:05,119 --> 01:40:07,920
that box in the middle

2709
01:40:07,920 --> 01:40:10,000
in order to make it more streamlined and

2710
01:40:10,000 --> 01:40:11,199
compact

2711
01:40:11,199 --> 01:40:13,840
at least in theory

2712
01:40:13,840 --> 01:40:14,639
right

2713
01:40:14,639 --> 01:40:17,280
um and the main reason for this is that

2714
01:40:17,280 --> 01:40:19,679
you are no longer

2715
01:40:19,679 --> 01:40:21,920
in in the proposed use cases you are no

2716
01:40:21,920 --> 01:40:24,560
longer really calling a protected api

2717
01:40:24,560 --> 01:40:25,920
you are just

2718
01:40:25,920 --> 01:40:27,600
kicking off for user interaction and

2719
01:40:27,600 --> 01:40:29,040
coming back

2720
01:40:29,040 --> 01:40:30,080
and

2721
01:40:30,080 --> 01:40:32,159
the answer may very well be we just tell

2722
01:40:32,159 --> 01:40:33,600
all of these groups

2723
01:40:33,600 --> 01:40:34,880
go figure it out on your own that's

2724
01:40:34,880 --> 01:40:36,719
that's your protocol if you don't want

2725
01:40:36,719 --> 01:40:38,960
to fully step out into

2726
01:40:38,960 --> 01:40:40,800
delegation space then that's not our

2727
01:40:40,800 --> 01:40:44,000
problem that might very well be the the

2728
01:40:44,000 --> 01:40:45,840
right answer and i would be fine with

2729
01:40:45,840 --> 01:40:46,719
that

2730
01:40:46,719 --> 01:40:48,000
um

2731
01:40:48,000 --> 01:40:49,679
but because this has come up a few times

2732
01:40:49,679 --> 01:40:51,199
people have looked at knapp and said

2733
01:40:51,199 --> 01:40:53,600
maybe i can use parts of it i think we

2734
01:40:53,600 --> 01:40:56,880
should at least have an answer for that

2735
01:40:58,000 --> 01:41:00,400
so aaron do you want to oh sorry jaron

2736
01:41:00,400 --> 01:41:01,440
do you want to

2737
01:41:01,440 --> 01:41:03,040
jump in

2738
01:41:03,040 --> 01:41:07,440
yeah so let me check if you can hear me

2739
01:41:13,440 --> 01:41:16,000
all right so

2740
01:41:16,239 --> 01:41:20,000
i think this can become very complicated

2741
01:41:20,000 --> 01:41:23,760
very quickly and we should avoid it now

2742
01:41:23,760 --> 01:41:24,639
uh

2743
01:41:24,639 --> 01:41:27,360
we're still figuring out our own state

2744
01:41:27,360 --> 01:41:29,679
machine

2745
01:41:29,679 --> 01:41:31,520
they

2746
01:41:31,520 --> 01:41:34,800
security integration which jonathan

2747
01:41:34,800 --> 01:41:38,159
alluded to is complicated maybe it's

2748
01:41:38,159 --> 01:41:40,320
doable maybe it's not

2749
01:41:40,320 --> 01:41:42,400
i think it would just

2750
01:41:42,400 --> 01:41:43,840
hold us back

2751
01:41:43,840 --> 01:41:47,840
and we shouldn't look at this

2752
01:41:48,320 --> 01:41:50,719
before the

2753
01:41:50,719 --> 01:41:53,840
v1 is out

2754
01:41:58,960 --> 01:42:00,639
so if those of you in the room didn't

2755
01:42:00,639 --> 01:42:02,639
hear yarns take was that we shouldn't

2756
01:42:02,639 --> 01:42:05,280
should not look at this until v1 is

2757
01:42:05,280 --> 01:42:06,560
is done

2758
01:42:06,560 --> 01:42:08,000
which is a

2759
01:42:08,000 --> 01:42:11,040
totally reasonable take

2760
01:42:11,440 --> 01:42:13,280
and honestly kind of something i

2761
01:42:13,280 --> 01:42:14,880
personally lean towards but i wanted to

2762
01:42:14,880 --> 01:42:16,239
make sure that this was written down and

2763
01:42:16,239 --> 01:42:20,000
we considered if this was worth it

2764
01:42:23,679 --> 01:42:26,159
all right that's that's it

2765
01:42:26,159 --> 01:42:28,400
yeah and i think that gets us

2766
01:42:28,400 --> 01:42:31,040
i'm gonna put the

2767
01:42:31,040 --> 01:42:33,520
chair slides back just for uh

2768
01:42:33,520 --> 01:42:36,560
for the hell of it and

2769
01:42:36,880 --> 01:42:39,600
yeah um

2770
01:42:39,600 --> 01:42:43,119
so um

2771
01:42:43,119 --> 01:42:46,560
the uh i that gets us to the end of

2772
01:42:46,560 --> 01:42:47,600
our

2773
01:42:47,600 --> 01:42:49,600
content for for today

2774
01:42:49,600 --> 01:42:50,800
and uh

2775
01:42:50,800 --> 01:42:52,480
we didn't actually put up a slide that

2776
01:42:52,480 --> 01:42:55,520
says open mic but this is it right so if

2777
01:42:55,520 --> 01:42:57,119
somebody has anything they want to raise

2778
01:42:57,119 --> 01:42:58,800
otherwise we're uh

2779
01:42:58,800 --> 01:43:01,760
we're out of here um early and uh

2780
01:43:01,760 --> 01:43:04,400
hopefully meet again well

2781
01:43:04,400 --> 01:43:07,280
gerald have we decided on the interims

2782
01:43:07,280 --> 01:43:08,400
um

2783
01:43:08,400 --> 01:43:10,159
i don't think we have decided on the m

2784
01:43:10,159 --> 01:43:12,639
trims yet no no we have not

2785
01:43:12,639 --> 01:43:14,560
no but we will definitely discuss that

2786
01:43:14,560 --> 01:43:16,639
on the list and it's like very likely

2787
01:43:16,639 --> 01:43:18,960
that we'll do in further interims before

2788
01:43:18,960 --> 01:43:21,040
philadelphia but you know hope to see

2789
01:43:21,040 --> 01:43:23,360
more of you in philadelphia um

2790
01:43:23,360 --> 01:43:26,159
for itf 140 114

2791
01:43:26,159 --> 01:43:27,840
and

2792
01:43:27,840 --> 01:43:30,159
i think that's um not seeing anybody

2793
01:43:30,159 --> 01:43:32,080
running for the mics or up to the queue

2794
01:43:32,080 --> 01:43:33,760
so i think that's it

2795
01:43:33,760 --> 01:43:34,800
and

2796
01:43:34,800 --> 01:43:36,159
thank you all for

2797
01:43:36,159 --> 01:43:36,840
for

2798
01:43:36,840 --> 01:43:38,719
coming

2799
01:43:38,719 --> 01:43:41,719
right

2800
01:44:03,360 --> 01:44:06,360
um

2801
01:44:46,960 --> 01:44:48,639
one of them um

2802
01:44:48,639 --> 01:44:50,159
well a couple of them are really good

2803
01:44:50,159 --> 01:44:51,600
ivan

2804
01:44:51,600 --> 01:44:53,119
and uh

2805
01:44:53,119 --> 01:44:54,639
who you might have talked to i don't

2806
01:44:54,639 --> 01:44:58,719
know maybe maybe but um they're gonna be

2807
01:44:58,719 --> 01:45:00,239
involved in a lot of

2808
01:45:00,239 --> 01:45:03,239
work

2809
01:45:03,520 --> 01:45:05,520
yeah a lot of the

2810
01:45:05,520 --> 01:45:07,760
there's there's a few different people

2811
01:45:07,760 --> 01:45:09,360
in the wallet space that are

2812
01:45:09,360 --> 01:45:11,600
implementing that for yeah for

2813
01:45:11,600 --> 01:45:14,600
authorization

